{"patent_id": "10-2021-0041903", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0047286", "출원번호": "10-2021-0041903", "발명의 명칭": "칩을 검증하는 방법, 장치, 전자 기기, 저장 매체 및 프로그램", "출원인": "베이징 바이두 넷컴 사이언스 앤 테크놀로지 코.,", "발명자": "자오 바오푸"}}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "칩을 검증하는 방법으로서, 구성 파일에 의해, 상기 칩에 관련되는 소프트웨어 환경과 하드웨어 환경을 구성하는 단계 - 상기 구성 파일은복수의 명령 및 상기 복수의 명령을 실행하는 데 필요한 데이터를 포함하고, 상기 소프트웨어 환경과 상기 하드웨어 환경은 상기 칩에 기반하여 생성됨 - ; 상기 복수의 명령을 각각 상기 소프트웨어 환경과 상기 하드웨어 환경에서 실행하는 단계; 상기 복수의 명령이 상기 소프트웨어 환경에서 실행되면서 생성된 제1 정보 및 상기 복수의 명령이 상기 하드웨어 환경에서 실행되면서 생성된 제2 정보를 각각 취득하는 단계 - 상기 제1 정보와 상기 제2 정보는 실행된 상기 복수의 명령, 실행된 상기 복수의 명령의 주소 및 상기 복수의 명령이 실행되면서 생성된 데이터를 포함함 -; 및 생성된 상기 제1 정보와 상기 제2 정보에 기반하여 상기 칩을 검증하는 단계를 포함하는, 칩을 검증하는 방법."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 소프트웨어 환경과 상기 하드웨어 환경은 명령 메모리, 레지스터 및 데이터 메모리를 사용하고, 구성 파일에 의해, 상기 칩에 관련되는 소프트웨어 환경과 하드웨어 환경을 구성하는 상기 단계는, 상기 구성 파일의 상기 복수의 명령을 상기 명령 메모리에 저장하는 단계; 및 상기 복수의 명령을 실행하는 데 필요한 상기 복수의 데이터를 상기 레지스터와 상기 데이터 메모리에 저장하는단계를 포함하는, 칩을 검증하는 방법."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,생성된 상기 데이터는 레지스터 데이터와 메모리 데이터를 포함하고, 상기 방법은,상기 제1 정보 중의 사전결정 유형의 정보를 제1 파일에 저장하는 단계 - 상기 사전결정 유형은 명령 유형, 메모리 데이터 유형 및 레지스터 데이터 유형 중의 하나를 포함함 - ; 및 상기 제2 정보 중의 같은 상기 사전결정 유형의 정보를 제2 파일에 저장하는 단계를 더 포함하는, 칩을 검증하는 방법."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서, 생성된 상기 제1 정보와 상기 제2 정보에 기반하여 상기 칩을 검증하는 상기 단계는, 상기 제1 파일과 상기 제2 파일을 비교함으로써, 상기 제1 파일과 상기 제2 파일에 있어서 매치되지 않는 부분을 결정하는 단계; 상기 매치되지 않는 부분에 기반하여 정확하게 실행되지 않은 명령을 결정하는 단계; 및 상기 정확하게 실행되지 않은 명령에 기반하여 상기 소프트웨어 환경 및/또는 상기 하드웨어 환경 중의 정확하지 않은 부분을 결정하는 단계를 포함하는, 칩을 검증하는 방법.공개특허 10-2021-0047286-3-청구항 5 제4항에 있어서, 상기 제1 정보는 실행된 상기 복수의 명령의 서술 정보를 더 포함하고, 상기 정확하게 실행되지 않은 명령에 기반하여 상기 소프트웨어 환경 및/또는 상기 하드웨어 환경 중의 정확하지 않은 부분을 결정하는 상기 단계는,상기 정확하게 실행되지 않은 명령의 목표 서술 정보를 결정하는 단계; 및 상기 목표 서술 정보에 기반하여 상기 정확하지 않은 부분을 결정하는 단계를 포함하는, 칩을 검증하는 방법."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서, 실행된 상기 복수의 명령의 서술 정보는 적어도 명령의 의미, 기능, 소스 오퍼랜드 및 실행 결과 중의 하나를포함하는, 칩을 검증하는 방법."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "칩을 검증하는 장치로서, 구성 파일에 의해, 상기 칩에 관련되는 소프트웨어 환경과 하드웨어 환경을 구성하도록 구성되는 구성 모듈 -상기 구성 파일은 복수의 명령 및 상기 복수의 명령을 실행하는 데 필요한 데이터를 포함하고, 상기 소프트웨어환경과 상기 하드웨어 환경은 상기 칩에 기반하여 생성됨 - ; 상기 복수의 명령을 각각 상기 소프트웨어 환경과 상기 하드웨어 환경에서 실행하도록 구성되는 실행 모듈; 상기 복수의 명령이 상기 소프트웨어 환경에서 실행되면서 생성된 제1 정보 및 상기 복수의 명령이 상기 하드웨어 환경에서 실행되면서 생성된 제2 정보를 각각 취득하도록 구성되는 정보 취득 모듈 - 상기 제1 정보와 상기제2 정보는 실행된 상기 복수의 명령, 실행된 상기 복수의 명령의 주소 및 상기 복수의 명령이 실행되면서 생성된 데이터를 포함함 - ; 및 생성된 상기 제1 정보와 상기 제2 정보에 기반하여 상기 칩을 검증하도록 구성되는 검증 모듈을 포함하는, 칩을검증하는 장치."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 소프트웨어 환경과 상기 하드웨어 환경은 명령 메모리, 레지스터 및 데이터 메모리를 사용하고, 상기 구성 모듈은, 상기 구성 파일의 상기 복수의 명령을 상기 명령 메모리에 저장하도록 구성되는 명령 저장 모듈; 및 상기 복수의 명령을 실행하는 데 필요한 상기 복수의 데이터를 상기 레지스터와 상기 데이터 메모리에 저장하도록 구성되는 데이터 저장 모듈을 포함하는, 칩을 검증하는 장치."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제7항에 있어서, 생성된 상기 데이터는 레지스터 데이터와 메모리 데이터를 포함하고, 상기 장치는, 상기 제1 정보 중의 사전결정 유형의 정보를 제1 파일에 저장하도록 구성되는 제1 정보 저장 모듈 - 상기 사전결정 유형은 명령 유형, 메모리 데이터 유형 및 레지스터 데이터 유형 중의 하나를 포함함 - ; 및 상기 제2 정보 중의 같은 상기 사전결정 유형의 정보를 제2 파일에 저장하도록 구성되는 제2 정보 저장 모듈을더 포함하는, 칩을 검증하는 장치.공개특허 10-2021-0047286-4-청구항 10 제9항에 있어서, 상기 검증 모듈은, 상기 제1 파일과 상기 제2 파일을 비교함으로써, 상기 제1 파일과 상기 제2 파일에 있어서 매치되지 않는 부분을 결정도록 구성되는 비교 모듈; 상기 매치되지 않는 부분에 기반하여 정확하게 실행되지 않은 명령을 결정하도록 구성되는 제1 착오 결정 모듈;및 상기 정확하게 실행되지 않은 명령에 기반하여 상기 소프트웨어 환경 및/또는 상기 하드웨어 환경 중의 정확하지 않은 부분을 결정하도록 구성되는 제2 착오 결정 모듈을 포함하는, 칩을 검증하는 장치."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서, 상기 제1 정보는 실행된 상기 복수의 명령의 서술 정보를 더 포함하고, 상기 제2 착오 결정 모듈은, 상기 정확하게 실행되지 않은 명령의 목표 서술 정보를 결정하도록 구성되는 목표 서술 정보 결정 모듈; 및 상기 목표 서술 정보에 기반하여 상기 정확하지 않은 부분을 결정하도록 구성되는 제3 착오 결정 모듈을 포함하는, 칩을 검증하는 장치."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 실행된 상기 복수의 명령의 서술 정보는 적어도 명령의 의미, 기능, 소스 오퍼랜드 및 실행 결과 중의 하나를포함하는, 칩을 검증하는 장치."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "전자 기기로서, 하나 또는 복수의 프로세서; 및 하나 또는 복수의 프로그램을 저장하는 저장 장치를 포함하고,상기 하나 또는 복수의 프로그램이 상기 하나 또는 복수의 프로세서에 의해 실행되는 경우, 상기 하나 또는 복수의 프로세서에 의해 제1항 내지 제6항 중 어느 한 항의 방법이 구현되도록 하는, 전자 기기."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "컴퓨터 프로그램이 저장되어 있는 컴퓨터 판독가능 저장 매체에 있어서, 상기 프로그램이 프로세서에 의해 실행되는 경우, 제1항 내지 제6항 중 어느 한 항의 방법이 구현되는, 컴퓨터판독가능 저장 매체."}
{"patent_id": "10-2021-0041903", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "매체에 저장된 컴퓨터 프로그램으로서, 상기 프로그램이 프로세서에 의해 실행되는 경우, 제1항 내지 제6항 중 어느 한 항의 방법이 구현되는, 매체에저장된 컴퓨터 프로그램."}
{"patent_id": "10-2021-0041903", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 실시예에 따르면, 칩을 검증하는 방법, 장치, 전자 기기, 저장 매체 및 프로그램를 제공하는바, 인공 지능 칩 설계, 시뮬레이터 개발, 기능 검증에 사용될 수 있다. 칩을 검증하는 방법은, 구성 파일에 의해, 칩에 관련되는 소프트웨어 환경과 하드웨어 환경을 구성하는 단계 - 구성 파일은 복수의 명령 및 복수의 명령을 실행 (뒷면에 계속)"}
{"patent_id": "10-2021-0041903", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 실시예는 칩 설계 분야에 관한 것이고, 더 구체적으로, 칩을 검증하는 방법, 장치, 전자 기기, 저장 매체 및 프로그램에 관한 것이다."}
{"patent_id": "10-2021-0041903", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 칩 설계와 같은 현대의 칩 설계에서, 실제의 하드웨어를 구축하기 전에, 시뮬레이션 방식으로 구축하 려는 칩의 아키텍처를 구현하여야 하는데, 칩의 기능을 빠르게 시뮬레이션하면서 칩의 설계가 기능적으로 정확 한지 여부를 검증할 수 있는 시뮬레이터가 필요하다. 칩 설계 인원한테는, 시뮬레이션 방식으로 아키텍처를 구 현하는 것이, 하드웨어를 구현하는 비용이 절약될 뿐만하니라 방안을 수정하기에도 편리하다. 개발에 있어서의 기능 시뮬레이터의 중요한 작용에 비추어 볼때, 기능 시뮬레이터의 기능이 정확하고 무결하도록 확보하는 개발 방법이 필요하다. 본 개시의 실시예에 따르면, 칩을 검증하는 방안을 제공한다. 본 개시의 첫 번째 측면은, 칩을 검증하는 방법을 제공하는바, 상기 방법은, 구성 파일에 의해, 칩에 관련되는 소프트웨어 환경과 하드웨어 환경을 구성하는 단계 - 구성 파일은 복수의 명령 및 복수의 명령을 실행하는 데 필요한 데이터를 포함하고, 소프트웨어 환경과 하드웨어 환경은 칩에 기반하여 생성됨 - ; 복수의 명령을 각각 소프트웨어 환경과 하드웨어 환경에서 실행하는 단계; 복수의 명령이 소프트웨어 환경에서 실행되면서 생성된 제1 정보 및 복수의 명령이 하드웨어 환경에서 실행되면서 생성된 제2 정보를 각각 취득하는 단계 - 제1 정보와 제2 정보는 실행된 복수의 명령, 실행된 복수의 명령의 주소 및 복수의 명령이 실행되면서 생성된 데이터를 포 함함 - ; 및 생성된 제1 정보와 제2 정보에 기반하여 칩을 검증하는 단계를 포함한다. 본 개시의 두 번째 측면은 칩을 검증하는 장치를 제공하는바, 상기 장치는, 구성 파일에 의해, 칩에 관련되는 소프트웨어 환경과 하드웨어 환경을 구성하도록 구성되는 구성 모듈 - 구성 파일은 복수의 명령 및 복수의 명령 을 실행하는 데 필요한 데이터를 포함하고, 소프트웨어 환경과 하드웨어 환경은 칩에 기반하여 생성됨 - ; 복수 의 명령을 각각 소프트웨어 환경과 하드웨어 환경에서 실행하도록 구성되는 실행 모듈; 복수의 명령이 소프트웨 어 환경에서 실행되면서 생성된 제1 정보 및 복수의 명령이 하드웨어 환경에서 실행되면서 생성된 제2 정보를 각각 취득하도록 구성되는 정보 취득 모듈 - 제1 정보와 제2 정보는 실행된 복수의 명령, 실행된 복수의 명령의 주소 및 복수의 명령이 실행되면서 생성된 데이터를 포함함 - ; 및 생성된 제1 정보와 제2 정보에 기반하여 칩 을 검증하도록 구성되는 검증 모듈을 포함한다. 본 개시의 세 번째 측면은 전자 기기를 제공하는바, 하나 또는 복수의 프로세서; 및 하나 또는 복수의 프로그램 을 저장하는 저장 장치를 포함하고, 하나 또는 복수의 프로그램이 하나 또는 복수의 프로세서에 의해 실행되는 경우, 하나 또는 복수의 프로세서가 본 개시의 첫 번째 측면에 따른 방법을 구현하도록 한다. 본 개시의 네 번째 측면은 컴퓨터 프로그램이 저장되어 있는 컴퓨터 판독가능 저장 매체를 제공하는바, 당해 프 로그램이 프로세서에 의해 실행되는 경우, 본 개시의 첫 번째 측면에 따른 방법이 구현된다. 본 개시의 다섯 번째 측면은 매체에 저장된 컴퓨터 프로그램을 제공하는바, 상술한 프로그램이 프로세서에 의해 실행되는 경우, 본 개시의 첫 번째 측면에 따른 방법이 구현된다."}
{"patent_id": "10-2021-0041903", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "발명의 내용 부분에서 서술한 내용은 본 개시의 실시예의 핵심적인 또는 중요한 특징을 한정하고자 하는 것이 아니고 본 개시의 범위를 한정하기 위한 것이 아님을 이해하여야 한다. 본 개시의 다른 특징은 아래 서술에 의 해 이해하기 수월해질 것이다."}
{"patent_id": "10-2021-0041903", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "아래, 첨부 도면을 참조하여 본 개시의 바람직한 실시예를 더 상세히 서술하고자 한다. 비록 첨부 도면에 본 개 시의 바람직한 실시예를 도시하였으나, 본 개시는 다양한 형식으로 구현될 수 있는 것으로, 여기서 서술하는 실 시예에 의해 한정되지 않음을 이해하여야 한다. 반대로, 이러한 실시예를 제공한 것은, 본 개시를 더욱 투철하 고 온전하게 하고 본 개시의 범위를 당업자한테 온전하게 전달하기 위해서이다. 본 명세서에서 사용하는 용어 \"포함하다\" 및 이의 변형은 개방적인 포함, 즉 \"포함하나 이에 한정되지 않는다\" 를 나타낸다. 특별히 언급하지 않은 한, 용어 \"또는\"은 \"및/또는\"을 나타낸다. 용어 \"에 기반하여\"는 \"적어도 부분적으로 쪋에 기반하여\"를 나타낸다. 용어 \"일 예시적인 실시예\" 및 \"일 실시예\"는 \"적어도 하나의 예시적인 실시예\"를 나타낸다. 용어 \"다른 실시예\"는 \"적어도 하나의 다른 실시예\"를 나타낸다. 용어 \"제1\", \"제2\" 등은 서로 다른 또는 같은 객체를 지칭할 수 있다. 후술하는 바는 또한 다른 명확한 및 암묵적인 정의를 포함할 수도 있다. 위에서 언급한 바와 같이, 시뮬레이터에 의해 칩의 기능과 아키텍처를 검증하여야 한다. 그러나 기존의 기능 시 뮬레이터 개발은 일반적으로 소프트웨어 개발자에 의해 완성되고 개발된 후의 정확성 및 무결성에 대하여서도 소프트웨어 관련 인원에 의해 작성된 명령 테스트 프로그램을 통해 테스트가 수행되고, 당해 테스트는 소프트웨 어 환경에서만 수행되는데, 이는 기능 시뮬레이터의 기능과 목표 칩 아키텍처의 완전한 일치를 보장하기 어렵고 목표 칩 아키텍처의 기능이 전부 구현될 수 있도록 보장하기도 어렵다. 이 외에도, 기능 시뮬레이터의 개발 이 터레이션에 따라, 기능 시뮬레이터는 더욱 더 복잡해지는바, 무결성의 테스트를 보장하기가 더 어려워진다. 따 라서, 기능 시뮬레이터의 기능이 정확하고 무결하도록 확보하는 개발방법이 필요하다. 본 개시의 실시예에 따르면, 칩을 검증하는 방안을 제공한다. 당해 방안은 구성 파일을 이용하여 소프트웨어 및 하드웨어 시뮬레이션 환경을 구성하고, 다음, 결과를 비교하여 칩의 기능을 검증한다. 당해 방안에서, 우선, 구 성 파일에 의해, 소프트웨어 환경과 하드웨어 환경을 구성하는바, 구성 파일은 명령과 데이터를 포함하고, 소프 트웨어 환경과 하드웨어 환경은 칩(예를 들면, 기능과 구조)에 기반하여 생성된다. 다음, 소프트웨어 환경과 하 드웨어 환경에서 명령을 실행한다. 이어서 명령이 소프트웨어 환경에서 실행되면서 생성된 제1 정보 및 명령이 하드웨어 환경에서 실행되면서 생성된 제2 정보를 각각 취득하는바, 제1 정보와 제2 정보는 실행된 명령, 명령 의 주소 및 생성된 데이터를 포함한다. 마지막으로, 생성된 제1 정보와 제2 정보에 의해 칩을 검증한다. 파일에 의해, 소프트웨어 및 하드웨어 시뮬레이션 환경을 초기화하면, 대량의 무작위 명령 및 데이터 테스트를 수행하기 편리하다. 소프트웨어 시뮬레이터 및 하드웨어 시뮬레이터를 각각 이용하여 같은 명령을 실행하고 결 과를 비교함으로써 시뮬레이터의 기능 착오의 위치를 적시에 발견하여 수정 보완할 수 있는바, 기능 시뮬레이터 의 기능 정확성을 확보할 수 있다. 대량의 무작위 명령의 테스트 및 검증 환경의 지속적인 스트레스 테스팅에 의하여 모든 명령 조합을 커버함으로써, 시뮬레이터의 기능의 무결성을 확보할 수 있다. 아래, 첨부 도면을 참조하여 본 개시의 기본 원리 및 몇몇 예시의 구현을 설명하고자 한다. 도 1은 본 개시의 복수의 실시예가 구현될 수 있는 예시 환경의 개략도를 도시한다. 도 1에 도시한 환경 은 단지 예시적인 것으로, 본 개시에서 서술하는 구현의 기능 및 범위를 한정하지 않음을 이해하여야 한다. 도 1에 도시한 바와 같이, 환경은 구성 파일, 명령(120-1), 명령(120-2)(아래 복수의 명령 르로 통칭함), 데이터, 컴퓨팅 기기, 소프트웨어 환경, 하드웨어 환경, 제1 정보 , 제2 정보 및 검증 결과를 포함한다. 구성 파일은 복수의 명령을 포함할 수 있고, 비록 도 1에는 복수의 명령 중의 2개의 명령(120-1, 120-2)만을 도시하였으나, 이는 단지 예시적인 것으로, 더 많은 명령과 명령 집합이 존재할 수도 있다. 복수의 명령은 같은 유형의 명령일 수 도 있고, 서로 다른 유형의 명령일 수 도 있고, 데이터 전송 명령, 산술연 산 명령, 비트 연산 명령, 프로그램 플로우 제어 명령, 문자열 조작 명령, 프로세서 제어 명령 등을 포함하나 이에 한정되지 않는다. 구성 파일은 또한 데이터를 포함할 수 있는데, 당해 데이터는 상술한 명령을 실행하는 데 필요한 데이터일 수도 있고 상술한 명령과는 무관한 다른 데이터일 수도 있으며, 데이터의 유 형은 선형 테이블, 스택과 큐, 어레이, 트리, 그래프, 범용 리스트, 희소 행렬 등을 포함하나 이에 한정되지 않 는다. 구성 파일은 대량의 데이터와 명령을 무작위로 생성하여 후속 조작에 제공할 수 있다. 명령과 데이 터는 이진법, 팔진법, 십진법 또는 십육진법 유형일 수 있는바, 본 개시는 이에 대해 한정하지 않는다. 컴퓨팅 기기는 구조, 기능, 논리 등과 같은 칩의 특성에 기반하여 소프트웨어 환경 및 하드웨어 환경 을 생성할 수 있다. 당해 소프트웨어 환경은 칩 기능을 검증하는 기능 시뮬레이터일 수 있고, 당해 소프트웨어 환경은 C, C++ 언어에 의해 생성될 수 있다. 당해 하드웨어 환경은 하드웨어RTL(Register Transfer Level) 시스템일 수 있고, 당해 하드웨어RTL 시스템은 회로 조작의 추상레벌을 서술하고, 하드웨어 환 경은 하드웨어 서술 언어(예를 들면 Verilog, system Verilog, VHDL) 등에 의해 생성될 수 있다. 일 예시 에서, 컴퓨팅 기기는 소프트웨어 환경 및 하드웨어 환경을 통해, 명령, 데이터, 레지스터 및 메 모리에 의해 칩의 기능에 대한 시뮬레이션을 완성한다. 컴퓨팅 기기는 구성 파일 중의 복수의 명령 또는 데이터에 의해 소프트웨어 환경 및 하드웨어 환경을 구성할 수 있는바, 예를 들면 구성 파일을 통해 소프트웨어 환경 및 하드웨어 환경의 메모리, 레지스터를 초기화할 수 있다. 컴퓨팅 기기는 구성을 거친 소프트웨어 환경 및 하드웨어 환경을 통해 명령과 데이터를 실행하여 제1 정보와 제2 정보를 각각 생성할 수 있다. 제1 정보와 제2 정보는 명령과 명령의 PC값, 발생되는 데이터, 명령의 상세내용, 예를 들면 명령의 의미, 기능, 소스 오퍼랜드, 결과 등일 수 있다. 비록 컴퓨팅 기기는 소프트웨어 환경 및 하드웨어 환경을 포함하는 것으로 도시되었으나, 컴퓨 팅 기기는 소프트웨어 환경 및 하드웨어 환경 이외의 개체일 수도 있다. 컴퓨팅 기기는 계 산 능력을 가진 임의의 기기일 수 있다. 비한정적인 예시로, 컴퓨팅 기기는 임의 유형의 고정형 컴퓨팅 기 기, 모바일 컴퓨팅 기기 또는 휴대용 컴퓨팅 기기일 수 있는바, 데스크톱 컴퓨터, 랩톱 컴퓨터, 노트북 컴퓨터, 넷북 컴퓨터, 태블릿 컴퓨터, 멀티미디어 컴퓨터, 휴대 전화 등을 포함하나 이에 한정되지 않고; 컴퓨팅 기기 의 전체 컴포넌트 또는 일부 컴포넌트는 클라우드에 분산될 수 있다. 컴퓨팅 기기는 적어도 프로세서, 메모리 및 범용 컴퓨터에 통상적으로 존재하는 컴포넌트를 포함함으로써 계산, 저장, 통신, 제어 등 의 기능을 구현한다. 컴퓨팅 기기는 또한 제1 정보와 제2 정보를 비교함으로써 검증 결과를 생성하고, 검증 결 과에 의해 소프트웨어 환경 및 하드웨어 환경 중의 착오가 발생된 위치를 결정하고 보완할 수 있다. 아래, 도 2 내지 도 5를 결부하여 상세한 검증 과정에 대해 나아가 서술하고자 한다. 도 2는 본 개시의 일부 실 시예에 따른 칩을 검증하는 과정의 흐름도이다. 과정은 도 1에서의 컴퓨팅 기기에 의해 실시될 수 있다. 서술의 편의를 위해, 도 1을 참조하여 과정을 서술한다. 블록에서, 컴퓨팅 기기는 구성 파일에 의해, 상기 칩에 관련되는 소프트웨어 환경 및 하드 웨어 환경을 구성하는바, 구성 파일은 복수의 명령 및 복수의 명령을 실행하는 데 필요한 데이 터를 포함하고, 소프트웨어 환경과 하드웨어 환경은 칩에 기반하여 생성된다. 예를 들면, 컴퓨 팅 기기는 구성 파일에 의해, 대량의 무작위 명령과 데이터를 생성하여 소프트웨어 환경 및 하 드웨어 환경을 구성(configure)할 수 있고, 무작위 명령과 데이터는 소프트웨어 환경 및 하드웨어 환 경을 테스트하기 위한 것이다. 컴퓨팅 기기는 생성하려는 칩의 기능, 논리 및 구체적인 회로 구조에 따라, 서로 다른 프로그래밍 언어에 의해 칩을 테스트하는 소프트웨어 환경과 하드웨어 환경을 생성 할 수 있다. 일 실시예에서, 하드웨어 환경을 구축함에 있어서, 컴퓨팅 기기는 칩의 상위 기능 및 구조로부터의 설계 방법으로, 칩 시스템을 복수의 기본 유닛으로 나누고, 각 기본 유닛을 다음 계층의 기본 유닛으로 나누는 바, 이와 같이 유추하여, 게이트 또는 연결라인을 직접 사용할 수 있을 때까지, 순차적으로 하드웨어 환경(16 0)을 구축한다. 하드웨어 환경은 하드웨어RTL 시스템일 수 있는바, 일 예시에서, 컴퓨팅 기기는 하기 단계 인, 기능 정의 및 모델 분할을 수행하는 단계; 모든 모듈의 인터페이스를 정의하는 단계; 클럭 도메인을 설계하 는 단계; 설계의 핵심 경로를 고려하는 단계; 상위 설계 단계; FSM 설계 단계; 시계열 논리 설계 단계; 조합 논 리 설계 단계에 의해 하드웨어RTL 시스템을 구축할 수 있다. 파일에 의해 초기화함으로써, 대량의 무작위 명령 및 데이터의 테스트가 편리해지고, 이로써 이후에 테스트되는 명령의 커버율을 향상할 수 있고, 칩을 검증하는, 및 칩의 시뮬레이터의 기능의 무결성을 확보할 수 있다. 일 실시예에서, 컴퓨팅 기기는 시간 시드(seed)에 의해, 구성 파일이 매 회 생성한 명령 및 데이터가 다르 도록 확보할 수 있는바, 매 회 획득하는 시간 시드가 다르도록 확보함으로써 그에 대응되는 생성된 명령 및 데 이터가 다르도록 확보한다. 일 실시예에서, 소프트웨어 환경과 하드웨어 환경은 명령 메모리, 레지스터 및 데이터 메모리를 사용 하는바, 당해 명령 메모리는 복수의 명령 메모리일 수 있고, 당해 레지스터는 복수의 레지스터 또는 레지스터 그룹일 수 있고, 당해 데이터 메모리는 복수의 데이터 메모리일 수 있다. 소프트웨어 환경을 예시로 하면, 컴퓨팅 기기는 하기 단계, , 에 의해 소프트웨어 환경을 구성할 수 있다. 컴퓨팅 기기는 구성 파일에 의해 무작위로 생성된 복수의 명령을 명령 메모리에 저장하는바, 여기서 각 행은 실행할 명령을 대표하고, 당해 복수의 명령은 PC값의 올림차순으로 정렬되고, 02003000 ... 7ff1111b 컴퓨팅 기기는 구성 파일에 의해 무작위로 생성된 복수의 데이터 중의 레지스터 데이터를 레지스 터에 저장하는바, 각 행은 하나의 레지스터에 저장된 데이터를 대표하고, 레지스터 번호의 올림차순으로 정렬되 고, f323bad1 ... 23dc0ab8 컴퓨팅 기기는 구성 파일에 의해 무작위로 생성된 복수의 데이터 중의 메모리 데이터를 메모리에 저장하는바, 각 행은 하나의 메모리에 저장된 데이터를 대표하고, 메모리 주소의 올림차순으로 정렬되고, 1030f0bc ... 049a0dc1 비록 당해 예시에서, 16진법으로 상술한 데이터를 서술하였으나, 이는 본 개시를 한정하기 위한 것이 아니며, 다른 진법의 데이터를 사용할 수도 있다. 하드웨어 환경을 구성하는 과정은 상술한 과정과 유사하므로, 이 에 대한 상세한 설명은 생략하기로 한다. 블록에서, 컴퓨팅 기기는 복수의 명령을 상기 소프트웨어 환경과 상기 하드웨어 환경에서 각각 실행되도록 한다. 예를 들면, 컴퓨팅 기기는 하드웨어 코드 검증 환경에 기반하여, 동시에 소프트웨어 환경 (예를 들면, 기능 시뮬레이터) 및 하드웨어 환경(예를 들면, 하드웨어 RTL 시스템)에 의해 상술한 구 성의 복수의 명령을 실행할 수 있다. 블록에서, 컴퓨팅 기기는 복수의 명령이 소프트웨어 환경에서 실행되면서 생성된 제1 정보 및 복수의 명령이 하드웨어 환경에서 실행되면서 생성된 제2 정보를 각각 취득하고, 제1 정보와 제2 정보는 실행된 복수의 명령, 실행된 복수의 명령의 주소 및 복수의 명령이 실행되면서 생 성된 데이터를 포함한다. 일 실시예에서, 소프트웨어 환경, 및 컴퓨팅 기기가 이에 의해 생성한 제1 정보를 예로 들면, 계속하여 상술한 단계, , 에 있어서, 컴퓨팅 기기는 복수의 명령을 명령 메모리에 저장한 후, 명 령 메모리로부터 PC값의 순서에 따라 단계에서 저장된 명령을 취득하고, 명령을 해석(interpret)하고 레지스 터로부터 단계에서 저장된 레지스터 데이터(예를 들면 소스 오퍼랜드)를 취득한다. 컴퓨팅 기기는 이어 서 명령에 관련되는 계산을 수행하고, 명령의 복잡 정도에 따라, 명령 실행 기간에 데이터 메모리로부터 단계 에서 저장된 메모리 데이터를 판독할 수 있고, 실행 과정에서 생성된 데이터를 데이터 메모리에 라이트 (write)한다. 마지막으로, 컴퓨팅 기기는 명령의 최종 실행 결과를 레지스터에 라이트하고, 테스트할 모든 명령이 실행 완료될 때까지, 계속하여 상술한 과정을 반복한다. 컴퓨팅 기기는 여기서 실행된 명령 및 그 주소, 및 생성된 데이터를 취득하여 제1 정보로 한다. 일 예시에서, 하기 단계, , 를 통해 소프트웨어 환경을 구성한다. 컴퓨팅 기기는 실행 과정에서의 PC값과 명령을 취득하여 제1 정보로 하는바, 각 행은 하나의 PC값 및 대응되는 하나의 명령을 대표하고, 명령에 따라 순서 정렬을 수행하고, 00000000: 02003000 ... 000007fc: 7ff1111b 컴퓨팅 기기는 명령이 실행 완료된 후, 소프트웨어 환경에서의 레지스터의 결과 데이터를 취득하 여 제1 정보로 하는바, 각 행은 하나의 레지스터의 데이터를 대표하고, 레지스터 번호의 올림차순으로 정 렬되고, 4f3eba17 ... 19efdc80 컴퓨팅 기기는 명령이 실행 완료된 후, 소프트웨어 환경에서의 데이터 메모리의 결과 데이터를 취 득하여 제1 정보로 하는바, 각 행은 데이터 메모리의 하나의 결과 데이터를 대표하고, 메모리 주소의 올림 차순으로 정렬되고, 429a13fc ... b92a8d12 컴퓨팅 기기가 하드웨어 환경에서의 제2 정보를 취득하는 과정은 상술한 과정과 유사하므로, 이 에 대한 상세한 설명은 생략하기로 한다. 일 실시예에서, 컴퓨팅 기기는 취득된 상술한 정보를 저장하는바, 도 3을 참조하여 서술하고자 한다. 도 3 은 본 개시의 일부 실시예에 따른 정보를 저장하는 과정의 흐름도이다. 블록에서, 컴퓨팅 기기는 제1 정보 중의 사전결정 유형의 정보를 제1 파일에 저장하고, 사전결 정 유형은 명령 유형, 메모리 데이터 유형 및 레지스터 데이터 유형 중의 하나를 포함한다. 예를 들면, 컴퓨팅 기기는 상술한 단계에서 취득된 제1 정보 중의 명령 유형의 데이터(즉 실행된 명령, 그의 PC값 및 그의 실행 순서)를 제1 파일의 A파일에 저장하고, 상술한 단계에서 취득된 제1 정보 중의 레지스터 데 이터 유형의 데이터를 제1 파일의 B파일에 저장하고, 상술한 단계에서 취득된 제1 정보 중의 메모리 데 이터 유형의 데이터를 제1 파일의 C에 저장한다. 블록에서, 컴퓨팅 기기는 제2 정보 중의 같은 사전결정 유형의 정보를 제2 파일에 저장한다. 예 를 들면, 컴퓨팅 기기는 제2 정보 중의 명령 유형의 데이터를 제2 파일의 A'파일에 저장하고, 제2 정 보 중의 레지스터 데이터 유형의 데이터를 제2 파일의 B'파일에 저장하고, 제2 정보 중의 메모리 데 이터 유형의 데이터를 제2 파일의 C'파일에 저장한다. 명령 실행 결과 데이터를 파일에 저장함으로써, 후속으로 자동화된 비교를 수행하여 결과가 정확한지 여부를 검 증하는 데 편리하게 된다. 블록에서, 컴퓨팅 기기는 생성된 제1 정보와 제2 정보에 기반하여, 칩을 검증한다. 도 4 및 도 5를 결부하여 나아가 서술하고자 한다. 도 4로 넘어가서 서술하면, 도 4는 본 개시의 일부 실시예에 따른 칩을 검증하는 과정의 흐름도이다. 블록(41 0)에서, 컴퓨팅 기기는 제1 파일과 제2 파일을 비교함으로써, 제1 파일과 제2 파일에 있어서 매치되지 않 는 부분을 결정한다. 일 예시에서, 컴퓨팅 기기는 제1 파일 및 제2 파일 중의 같은 유형의 데이터를 각각 비교한다. 예를 들면, 컴퓨팅 기기는 제1 파일 중의 A파일 중의 명령을 제2 파일 중의 A'파일 중의 명령과 행별로 비교하고, 제1 파일 중의 B파일 중의 데이터를 제2 파일 중의 B'파일 중의 데이터와 행별로 비교하고, 제1 파일 중의 C파일 중의 데이터를 제2 파일 중의 C'파일 중의 데이터와 행별로 비교하는바, 이로써 이 중의불일치되는 부분을 결정한다. 블록에서, 컴퓨팅 기기는 매치되지 않는 부분에 기반하여, 정확하게 실행되지 않은 명령을 결정한다. 일 실시예에서, 컴퓨팅 기기는 A파일 중의 한 행의 명령이 A'파일 중의 한 행의 명령과 불일치하다고 결정 되는 경우, 해당 명령이 정확하게 실행되지 않았다고 바로 결정할 수 있다. 다른 실시예에서, 컴퓨팅 기기는 B 또는 C파일 중의 한 행의 데이터가 B' 또는 C'파일 중의 한 행의 데이 터와 불일치하다고 결정되는 경우, 당해 데이터에 의해 당해 데이터에 관련되는 명령을 찾아냄으로써, 정확하게 실행되지 않은 명령을 결정할 수 있다. 블록에서, 컴퓨팅 기기는 정확하게 실행되지 않은 명령에 기반하여 소프트웨어 환경 및/또는 하 드웨어 환경 중의 정확하지 않은 부분을 결정한다. 예를 들면, 컴퓨팅 기기는 당해 정확하게 실행되지 않 은 명령에 기반하여 소프트웨어 환경 및/또는 하드웨어 환경 중의 기능 착오를 결정할 수 있는바, 이 로써 기능 시뮬레이터 또는 하드웨어 RTL 시스템을 보완할 수 있다. 도 5를 결부하여 나아가 서술하고자 한다. 도 5로 넘어가서 서술하면, 도 5는 본 개시의 일부 실시예에 따른 칩을 검증하는 과정의 흐름도이다. 블록에서, 컴퓨팅 기기는 정확하게 실행되지 않은 명령의 목표 서술 정보를 결정한다. 예를 들면, 컴 퓨팅 기기는 소프트웨어 환경에 대해 상술한 단계 내지 을 수행하는 경우, 모든 실행된 명령의 목표 서술 정보를 취득하여 당해 정보를 제3 파일에 저장할 수 있고, 정확하게 실행되지 않은 명령이 결정된 후, 당해 파일에 의해, 정확하게 실행되지 않은 명령의 목표 서술 정보를 결정할 수 있다. 일 실시예에서, 서술 정보는 적어도 명령의 의미, 기능, 소스 오퍼랜드 및 실행 결과 중의 하나를 포함한다. 블록에서, 컴퓨팅 기기는 목표 서술 정보에 기반하여 정확하지 않은 부분을 결정한다. 예를 들면, 컴 퓨팅 기기는 당해 정확하게 실행되지 않은 명령의 의미, 기능, 소스 오퍼랜드 및 실행 결과에 기반하여, 소프트웨어 환경 및/또는 하드웨어 환경 중의 착오가 발생한 기능 및 착오가 발생한 위치를 더 용이 하게 결정할 수 있다. 일 대안적인 실시예에서, 컴퓨팅 기기는 또한, 소프트웨어 환경 및/또는 하드웨어 환경에 의해 실행 되는 과정 및 결과를 양자 간에 비교하는 것이 아니라 각각 역치와 비교함으로써 칩을 검증할 수도 있다. 본 개시는 파일에 의해 소프트웨어 및 하드웨어 시뮬레이션 환경을 초기화함으로써, 대량의 무작위 명령 및 데 이터 테스트에 편리해지도록 하고, 실행 결과 데이터를 파일에 저장함으로써, 자동화된 비교를 수행하여 결과가 정확한지 여부를 검증하는 데 편리하게 된다. 소프트웨어 시뮬레이터 및 하드웨어 시뮬레이터를 각각 이용하여 같은 명령을 실행하고 결과를 비교함으로써 시뮬레이터의 기능 착오의 위치를 적시에 발견하여 수정 보완할 수 있는바, 기능 시뮬레이터의 기능 정확성을 확보할 수 있다. 대량의 무작위 명령의 테스트 및 검증 환경의 지속 적인 스트레스 테스팅에 의하여 모든 명령 조합을 커버함으로써, 시뮬레이터의 기능의 무결성을 확보할 수 있다. 도 6은 본 개시의 일부 실시예에 따른 칩을 검증하는 장치의 예시적인 블록도이다. 장치는 도 1의 컴퓨팅 기기에 포함되거나 또는 컴퓨팅 기기로 구현될 수 있다. 도 6에 도시한 바와 같이, 장치는, 구성 파일에 의해, 칩에 관련되는 소프트웨어 환경과 하드웨어 환경을 구성하도록 구성되는 구성 모듈 - 구성 파일은 복수의 명령 및 복수의 명령을 실행하는 데 필요한 데이터 를 포함하고, 소프트웨어 환경과 하드웨어 환경은 칩에 기반하여 생성됨 - ; 복수의 명령을 각각 소프트웨어 환 경과 하드웨어 환경에서 실행하도록 구성되는 실행 모듈; 복수의 명령이 소프트웨어 환경에서 실행되면서 생성된 제1 정보 및 복수의 명령이 하드웨어 환경에서 실행되면서 생성된 제2 정보를 각각 취득하도록 구성되는 정보 취득 모듈 - 제1 정보와 제2 정보는 실행된 복수의 명령, 실행된 복수의 명령의 주소 및 복수의 명령 이 실행되면서 생성된 데이터를 포함함 - ; 및 생성된 제1 정보와 제2 정보에 기반하여 칩을 검증하도록 구성되 는 검증 모듈을 포함한다. 일부 실시에서, 소프트웨어 환경과 하드웨어 환경은 명령 메모리, 레지스터 및 데이터 메모리를 사용하고, 구성 모듈은, 구성 파일의 복수의 명령을 명령 메모리에 저장하도록 구성되는 명령 저장 모듈; 및 복수의 명령 을 실행하는 데 필요한 복수의 데이터를 레지스터 및 데이터 메모리에 저장하도록 구성되는 데이터 저장 모듈을 포함할 수 있다. 일부 실시에서, 생성된 데이터는 레지스터 데이터와 메모리 데이터를 포함하고, 장치는, 제1 정보 중의 사 전결정 유형의 정보를 제1 파일에 저장하도록 구성되는 제1 정보 저장 모듈 - 사전결정 유형은 명령 유형, 메모 리 데이터 유형 및 레지스터 데이터 유형 중의 하나를 포함함 - ; 및 제2 정보 중의 같은 사전결정 유형의 정보 를 제2 파일에 저장하도록 구성되는 제2 정보 저장 모듈을 더 포함할 수 있다. 일부 실시에서, 검증 모듈은, 제1 파일과 제2 파일을 비교함으로써, 제1 파일과 제2 파일에 있어서 매치되 지 않는 부분을 결정하도록 구성되는 비교 모듈; 매치되지 않는 부분에 기반하여 결정정확하게 실행되지 않은 명령을 결정하도록 구성되는 제1 착오 결정 모듈; 및 정확하게 실행되지 않은 명령에 기반하여 소프트웨어 환경 및/또는 하드웨어 환경 중의 정확하지 않은 부분을 결정하도록 구성되는 제2 착오 결정 모듈을 포함할 수 있다. 일부 실시에서, 제1 정보는 실행된 복수의 명령의 서술 정보를 더 포함하고, 제2 착오 결정 모듈은, 정확하게 실행되지 않은 명령의 목표 서술 정보를 결정하도록 구성되는 목표 서술 정보 결정 모듈; 및 목표 서술 정보에 기반하여 정확하지 않은 부분을 결정하도록 구성되는 제3 착오 결정 모듈을 포함할 수 있다. 일부 실시에서, 실행된 복수의 명령의 서술 정보는 적어도 명령의 의미, 기능, 소스 오퍼랜드 및 실행 결과 중 의 하나를 포함한다. 도 7은 본 개시 내용의 실시예를 실시할 수 있는 예시적인 기기의 예시적인 블록도를 도시한다. 예를 들면, 도 1에 도시한 바와 같은 예시 환경에서의 컴퓨팅 기기는 기기로 실시될 수 있다. 도에 도시한 바와 같이, 기기는 중앙처리장치(CPU)를 포함하고, 이는 읽기 전용 메모리(ROM)에 저장 된 컴퓨터 프로그램 명령 또는 저장 유닛으로부터 랜덤 액세스 메모리(RAM)로 로딩된 컴퓨터 프로그 램 명령에 따라 다양한 적당한 동작 및 처리를 수행할 수 있다. RAM에는 또한 기기 조작에 필요한 다 양한 프로그램 및 데이터를 저장할 수 있다. CPU, ROM 및 RAM은 버스에 의해 서로 연결된 다. 입력/출력(I/O) 인터페이스도 버스에 연결된다. 기기에서의 복수의 부품은 I/O 인터페이스에 연결되고, 입력 유닛, 예를 들면 키보드, 마우스 등; 출력 유닛, 예를 들면 다양한 유형의 디스플레이, 스피커 등; 저장 유닛, 예를 들면 자기 디스크, 광 디스크 등; 및 통신 유닛, 예를 들면 네트워크 인터페이스 카드, 모뎀, 무선 통신 송수신기 등 을 포함한다. 통신 유닛은 기기가 인테넷과 같은 컴퓨터 네트워크 및/또는 다양한 전기통신 네트워크 를 통해 다른 기기와 정보/데이터를 교환하도록 허용한다. 전술한 각 과정 및 처리 - 예를 들면 과정(200, 300, 400 및 500) - 은, 처리 유닛에 의해 수행될 수 있다. 예를 들면, 일부 실시에서, 과정(200, 300, 400 및 500)은 컴퓨터 소프트웨어 프로그램으로 구현될 수 있 는바, 이는 기계 판독가능 매체, 예를 들면 저장 유닛에 유형으로(tangibly) 포함된다. 일부 실시에서, 컴 퓨터 프로그램의 일부 또는 전부가 ROM 및/또는 통신 유닛에 의해 기기에 로딩 및/또는 설치될 수 있다. 컴퓨터 프로그램이 RAM에 로딩되어 CPU에 의해 실행되는 경우, 상술한 과정(200, 300, 400 및 500) 중의 하나 또는 복수의 동작을 수행할 수 있다. 본 개시는 방법, 장치, 시스템 및/또는 컴퓨터 프로그램 제품일 수 있다. 컴퓨터 프로그램 제품은 컴퓨터 판독 가능 저장 매체를 포함할 수 있는바, 이는 본 개시의 각 측면을 수행하는 컴퓨터 판독가능 프로그램 명령을 탑 재하고 있다. 컴퓨터 판독가능 저장 매체는 명령 실행 기기에 의해 사용되는 명령을 유지 및 저장하는, 유형의(tangible) 기 기일 수 있다. 컴퓨터 판독가능 저장 매체는 예를 들면 전기 저장 기기, 자기 저장 기기, 광 저장 기기, 전자기 저장 기기, 반도체 저장 기기 또는 상술한 것의 임의의 적합한 조합일 수 있으나 이에 한정되지 않는다. 컴퓨터 판독가능 저장 매체의 더 구체적인 예(불완전 리스트)는 휴대용 컴퓨터 디스크, 하드디스크, 랜덤 액세스 메모 리(RAM), 읽기 전용 메모리(ROM), 소거 및 프로그램가능한 읽기 전용 메모리(EPROM 또는 플래시 메모리), 정적 랜덤 액세스 메모리(SRAM), 휴대용 컴팩트 디스크 읽기 전용 메모리(CD-ROM), 디지털 다기능 디스크(DVD), 메모 리스틱, 플로피 디스크, 예를 들면 명령이 저장되어 있는 천공 카드 또는 요홈 내 돌기 구조와 같은 기계식 코 딩 기기 및 상술한 것의 임의의 적합한 조합을 포함한다. 여기서 사용되는 컴퓨터 판독가능 저장 매체는, 라디 오파 또는 자유 전파되는 다른 전자기파, 웨이브가이드 또는 다른 전송 매체를 통해 전파하는 전자기파(예를 들 면, 광섬유 케이블을 통과하는 광펄스), 또는 전기선을 통해 전송되는 전기 신호와 같은 일시적 신호 자체로 해 석되지 않는다. 여기서 서술하는 컴퓨터 판독가능 프로그램 명령은, 컴퓨터 판독가능 저장 매체로부터 각 계산/처리 기기에 다 운로드되거나 또는 네트워크(예를 들면 인테넷, 근거리 통신망, 원거리 통신망 및/또는 무선 네트워크)를 통해 외부 컴퓨터 또는 외부 저장 기기에 다운로드될 수 있다. 네트워크는 구리 전송 케이블, 광섬유 전송, 무선 전송, 라우터, 방화벽, 스위치, 게이트웨이 컴퓨터 및/또는 엣지 서버를 포함할 수 있다. 각 계산/처리 기기 중의 네트워크 어댑터 카드 또는 네트워크 인터페이스는 네트워크로부터 컴퓨터 판독가능 프로그램 명령을 수신하고 당해 컴퓨터 판독가능 프로그램 명령을 전달함으로써 각 계산/처리 기기 중의 컴퓨터 판독가능 저장 매체에 저 장되도록 한다. 본 개시 조작을 수행하는 컴퓨터 프로그램 명령은 어셈블리 명령, 명령어 집합 구조(ISA) 명령, 기계 명령, 기 계 관련 명령, 마이크로코드, 펌웨어 명령, 상태 설정 데이터, 또는 하나의 또는 복수의 프로그래밍 언어의 임 의 조합으로 작성된 소스 코드 또는 오브젝트 코드일 수 있고, 상기 프로그래밍 언어는 Smalltalk, C++ 등과 같 은 객체지향 프로그래밍 언어, 및 'C' 언어 또는 이와 유사한 프로그래밍 언어와 같은 통상의 절차적 프로그래 밍 언어를 포함한다. 컴퓨터 판독가능 프로그램 명령은 전부 사용자 컴퓨터에서 실행되거나, 일부가 사용자 컴 퓨터에서 실행되거나, 하나의 독립적인 소프트웨어 패키지로 실행되어 일부가 사용자 컴퓨터에서, 일부는 원격 컴퓨터에서 실행되거나, 또는 전부가 원격 컴퓨터 또는 서버에서 실행될 수 있다. 원격 컴퓨터에 관련되는 상황 에서, 원격 컴퓨터는 근거리 통신망(LAN) 또는 원거리 통신망(WAN)을 포함하는 임의 종류의 네트워크를 통해, 사용자 컴퓨터에 연결되거나 또는 외부 컴퓨터에 연결될 수 있다(예를 들면 인터넷 서비스 사업자를 이용하여 인터넷을 통해 연결된다). 일부 실시에서, 컴퓨터 판독가능 프로그램 명령의 상태 정보를 이용하여, 예를 들어 프로그램가능 논리 회로, 필드 프로그램가능 게이트 어레이(FPGA) 또는 프로그램가능 논리 어레이(PLA)와 같은 전자 회로를 맞춤 제작하는바, 당해 전자 회로는 컴퓨터 판독가능 프로그램 명령을 실행할 수 있고, 이로써 본 개시의 각 측면을 구현할 수 있다. 여기서는 본 개시의 실시예에 따른 방법, 장치(시스템) 및 컴퓨터 프로그램 제품의 흐름도 및/또는 블록도를 참 조하여 본 개시의 각 측면을 서술하였다. 흐름도 및/또는 블록도의 각 블록 및 흐름도 및/또는 블록도 중의 각 블록의 조합은 모두 컴퓨터 판독가능 프로그램 명령에 의해 구현될 수 있음을 이해하여야 한다. 이러한 컴퓨터 판독가능 프로그램 명령은 범용 컴퓨터, 전용 컴퓨터 또는 다른 프로그램가능 데이터 처리 장치 의 처리 유닛에 제공되어 일 종의 기계를 생성할 수 있는바, 이로써 이러한 명령이 컴퓨터 또는 다른 프로그램 가능 데이터 처리 장치의 처리 유닛에 의해 실행되는 경우, 흐름도 및/또는 블록도 중의 하나 또는 복수의 블록 에서 규정하는 기능/동작을 구현하는 장치가 발생하도록 한다. 이러한 컴퓨터 판독가능 프로그램 명령을 컴퓨터 판독가능 저장 매체에 저장할 수도 있고 이러한 명령은 컴퓨터, 프로그램가능 데이터 처리 장치 및/또는 다른 기기를 특정 방식으로 동작하게 하는데, 이로써 명령이 저장되어 있는 컴퓨터 판독가능 매체는 하나의 생산품을 포함하게 되고, 이는 흐름도 및/또는 블록도 중의 하나 또는 복수의 블록에서 규정한 기능/동작을 구현하는 각 측면의 명령을 포함한다. 또한, 컴퓨터 판독가능 프로그램 명령을 컴퓨터, 다른 프로그램가능 데이터 처리 장치 또는 다른 기기에 로딩하 여 컴퓨터, 다른 프로그램가능 데이터 처리 장치 또는 다른 기기에서 일련의 조작단계가 수행되어 컴퓨터 구현 과정이 발생되도록 할 수 있는바, 이로써 컴퓨터, 다른 프로그램가능 데이터 처리 장치 또는 다른 기기에서 실 행되는 명령에 의해, 흐름도 및/또는 블록도 중의 하나 또는 복수의 블록에서 규정한 기능/동작이 구현되도록 할 수 있다. 첨부 도면 중의 흐름도 및 블록도는 본 개시의 복수의 실시예에 따른 시스템, 방법 및 컴퓨터 프로그램 제품에 의해 구현 가능한 시스템 아키텍처, 기능 및 조작을 도시한다. 여기서, 흐름도 또는 블록도 중의 각 블록은 하 나의 모듈, 프로그램 세그먼트 또는 명령의 일부분을 대표할 수 있고, 상기 모듈, 프로그램 세그먼트 또는 명령 의 일부분은 하나 또는 복수의 규정된 논리 기능을 구현하는 실행가능 명령을 포함한다. 일부 대안적인 구현에 서, 블록 내에 표기된 기능은 첨부도면에서의 표기와는 다른 순서로 발생할 수도 있다. 예를 들면, 연속된 2개 의 블록은 실제로는 기본적으로 병렬로 수행될 수 있는데, 이들은 때로는 상반되는 순서로 수행될 수도 있으며, 이는 관련되는 기능에 따라 결정된다. 블록도 및/또는 흐름도 중의 각 블록 및 블록도 및/또는 흐름도 중의 블 록의 조합은, 규정된 기능 또는 동작을 수행하는, 전용의, 하드웨어 기반의 시스템에 의해 구현될 수도 있고, 또는 전용 하드웨어와 컴퓨터 명령의 조합에 의해 구현될 수도 있다는 점 또한 유의하여야 한다. 이상으로 이미 본 개시의 각 실시 방식에 대해 서술하였으나, 상술한 설명은 예시적인 것이지, 완전한 것이 아 니며, 또한 공개된 각 실시 방식에 한정되지 않는다. 설명한 각 실시 방식의 범위 및 사상을 벗어나지 않는 여 러 가지 수정 및 변경은 당업자에 있어서 자명하다. 본 명세서에서 사용하는 용어의 선택은, 각 실시 방식의 원 리, 실제 응용 또는 마켓 중의 기술에 대한 개량이 가장 잘 이해되도록 하거나 또는 다른 당업자들이 본 명세서 에서 공개하는 각 실시 방식을 이해할 수 있도록 하려는 데 착안하였다. 도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7"}
{"patent_id": "10-2021-0041903", "section": "도면", "subsection": "도면설명", "item": 1, "content": "첨부 도면을 결부하고 아래 상세한 설명을 참조하면, 본 개시의 각 실시예의 상술한 및 다른 특징, 이점 및 측 면은 더 뚜렷해질 것이다. 첨부 도면에서, 같거나 또는 유사한 도면부호는 같거나 또는 유사한 요소를 나타내는 바, 여기서, 도 1은 본 개시의 복수의 실시예가 구현될 수 있는 예시 환경의 개략도이다. 도 2는 본 개시의 일부 실시예에 따른 칩을 검증하는 과정의 흐름도이다. 도 3은 본 개시의 일부 실시예에 따른 정보를 저장하는 과정의 흐름도이다. 도 4는 본 개시의 일부 실시예에 따른 칩을 검증하는 과정의 흐름도이다. 도 5는 본 개시의 일부 실시예에 따른 칩을 검증하는 과정의 흐름도이다. 도 6은 본 개시의 일부 실시예에 따른 칩을 검증하는 장치의 예시적인 블록도이다. 도 7은 본 개시의 복수의 실시예를 실시할 수 있는 컴퓨팅 기기의 블록도이다."}
