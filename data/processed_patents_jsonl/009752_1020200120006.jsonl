{"patent_id": "10-2020-0120006", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0004524", "출원번호": "10-2020-0120006", "발명의 명칭": "지능형 스케줄링 장치 및 방법", "출원인": "한국전자통신연구원", "발명자": "장수민"}}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "하나 이상의 프로세서; 및상기 하나 이상의 프로세서에 의해 실행되는 적어도 하나 이상의 프로그램을 저장하는 실행메모리를 포함하고,상기 적어도 하나 이상의 프로그램은클라우드, 엣지 시스템 및 이웃 엣지(NEAR EDGE) 시스템을 포함하는 혼합 클라우드 환경에서, 상기 클라우드,상기 엣지 시스템 및 상기 이웃 엣지의 작업들을 스케줄링하기 위한 스케줄러들을 구성하고,스케줄러 정책에 기반하여 상기 스케줄러들을 제어하여 클라이언트로부터 요청 받은 데이터를 작업 큐에 저장하고, 상기 작업 큐에 저장된 데이터에 기반하여 상기 작업들을 처리하고,상기 스케줄러 정책에 따라 상기 작업들을 처리한 히스토리 데이터를 수집하고, 상기 히스토리 데이터에 기반하여 상기 스케줄러 정책을 트레이닝 하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서,상기 적어도 하나 이상의 프로그램은상기 스케줄러들의 직렬적 연결 및 병렬적 연결 중 적어도 하나를 이용하여 작업을 처리하도록 상기 스케줄러들을 구성하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 2에 있어서,상기 적어도 하나 이상의 프로그램은상기 스케줄러들의 직렬적 연결과 병렬적 연결을 모두 이용하여 복합적으로 상기 작업들을 처리하도록 상기 스케줄러들을 구성하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 3에 있어서,상기 적어도 하나 이상의 프로그램은상기 직렬적 연결로 구성된 스케줄러들의 자원 할당 성공 여부에 따라 순차적으로 스케줄러들에게 상기 작업들을 전달하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 4에 있어서,상기 적어도 하나 이상의 프로그램은상기 병렬적 연결로 구성된 스케줄러들 중 적어도 두 개의 스케줄러들에게 동일한 작업을 요청하여 상기 두 개의 스케줄러들 중 어느 하나로 결정된 최적 스케줄러로 상기 작업들을 전달하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 1에 있어서,공개특허 10-2022-0004524-3-상기 적어도 하나 이상의 프로그램은복수개의 작업 큐들에 상기 클라이언트로부터 요청 받은 데이터를 우선 순위에 따라 저장하고, 상기 작업 큐들에 저장된 데이터를 스케줄링 하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 6에 있어서,상기 적어도 하나 이상의 프로그램은상기 클라이언트로부터의 요청 받은 데이터의 작업 요청이 실패한 횟수가 기설정된 횟수 이상인 경우, 상기 작업 요청을 우선적으로 처리하기 위한 작업 큐에 상기 데이터를 저장하는 것을 특징으로 하는 지능형 스케줄링장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 6에 있어서,상기 적어도 하나 이상의 프로그램은상기 작업 큐에 저장된 데이터의 스케줄링을 실패한 횟수가 기설정된 횟수 이상인 경우, 다음 작업 큐로 상기데이터를 전달하고, 상기 다음 작업 큐로 전달된 데이터의 스케줄링 수행하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 8에 있어서,상기 적어도 하나 이상의 프로그램은상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지 시스템의 리소스 정보를 수집하고, 상기 리소스 정보 및상기 스케줄러 정책을 실행한 결과로부터 상기 히스토리 데이터를 생성하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "청구항 9에 있어서,상기 적어도 하나 이상의 프로그램은상기 리소스 정보에 기반하여 상기 스케줄러 정책의 실행 계획을 수립하고, 상기 스케줄러 정책의 실행 계획을적용한 결과로부터 상기 스케줄러 정책을 트레이닝 하는 것을 특징으로 하는 지능형 스케줄링 장치."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "지능형 스케줄링 장치의 지능형 스케줄링 방법에 있어서,클라우드, 엣지 시스템 및 이웃 엣지(NEAR EDGE) 시스템을 포함하는 혼합 클라우드 환경에서, 상기 클라우드,상기 엣지 시스템 및 상기 이웃 엣지의 작업들을 스케줄링하기 위한 스케줄러들을 구성하는 단계;스케줄러 정책에 기반하여 상기 스케줄러들을 제어하여 클라이언트로부터 요청 받은 데이터를 작업 큐에 저장하고, 상기 작업 큐에 저장된 데이터에 기반하여 상기 작업들을 처리하는 단계; 및상기 스케줄러 정책에 따라 상기 작업들을 처리한 히스토리 데이터를 수집하고, 상기 히스토리 데이터에 기반하여 상기 스케줄러 정책을 트레이닝 하는 단계;를 포함하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "청구항 11에 있어서,상기 스케줄러들을 구성하는 단계는공개특허 10-2022-0004524-4-상기 스케줄러들의 직렬적 연결 및 병렬적 연결 중 적어도 하나를 이용하여 작업을 처리하도록 상기 스케줄러들을 구성하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "청구항 12에 있어서,상기 스케줄러들을 구성하는 단계는상기 스케줄러들의 직렬적 연결과 병렬적 연결을 모두 이용하여 복합적으로 상기 작업들을 처리하도록 상기 스케줄러들을 구성하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "청구항 13에 있어서,상기 스케줄러들을 구성하는 단계는상기 직렬적 연결로 구성된 스케줄러들의 자원 할당 성공 여부에 따라 순차적으로 스케줄러들에게 상기 작업들을 전달하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "청구항 14에 있어서,상기 스케줄러들을 구성하는 단계는상기 병렬적 연결로 구성된 스케줄러들 중 적어도 두 개의 스케줄러들에게 동일한 작업을 요청하여 상기 두 개의 스케줄러들 중 어느 하나로 결정된 최적 스케줄러로 상기 작업들을 전달하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "청구항 11에 있어서,상기 작업들을 처리하는 단계는복수개의 작업 큐들에 상기 클라이언트로부터 요청 받은 데이터를 우선 순위에 따라 저장하고, 상기 작업 큐들에 저장된 데이터를 스케줄링 하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "청구항 16에 있어서,상기 작업들을 처리하는 단계는상기 클라이언트로부터의 요청 받은 데이터의 작업 요청이 실패한 횟수가 기설정된 횟수 이상인 경우, 상기 작업 요청을 우선적으로 처리하기 위한 작업 큐에 상기 데이터를 저장하는 것을 특징으로 하는 지능형 스케줄링방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "청구항 16에 있어서,상기 작업들을 처리하는 단계는상기 작업 큐에 저장된 데이터의 스케줄링을 실패한 횟수가 기설정된 횟수 이상인 경우, 다음 작업 큐로 상기데이터를 전달하고, 상기 다음 작업 큐로 전달된 데이터의 스케줄링 수행하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "청구항 18에 있어서,공개특허 10-2022-0004524-5-상기 스케줄러 정책을 트레이닝 하는 단계는상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지 시스템의 리소스 정보를 수집하고, 상기 리소스 정보 및상기 스케줄러 정책을 실행한 결과로부터 상기 히스토리 데이터를 생성하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "청구항 19에 있어서,상기 스케줄러 정책을 트레이닝 하는 단계는상기 리소스 정보에 기반하여 상기 스케줄러 정책의 실행 계획을 수립하고, 상기 스케줄러 정책의 실행 계획을적용한 결과로부터 상기 스케줄러 정책을 트레이닝 하는 것을 특징으로 하는 지능형 스케줄링 방법."}
{"patent_id": "10-2020-0120006", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "지능형 스케줄링 장치 및 방법이 개시된다. 본 발명의 일실시예에 따른 지능형 스케줄링 장치는 하나 이상의 프 로세서 및 상기 하나 이상의 프로세서에 의해 실행되는 적어도 하나 이상의 프로그램을 저장하는 실행메모리를 포함하고, 상기 적어도 하나 이상의 프로그램은 클라우드, 엣지 시스템 및 이웃 엣지(NEAR EDGE) 시스템을 포함 하는 혼합 클라우드 환경에서, 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지의 작업들을 스케줄링하기 위 한 스케줄러들을 구성하고, 스케줄러 정책에 기반하여 상기 스케줄러들을 제어하여 클라이언트로부터 요청 받은 데이터를 작업 큐에 저장하고, 상기 작업 큐에 저장된 데이터에 기반하여 상기 작업들을 처리하고, 상기 스케줄 러 정책에 따라 상기 작업들을 처리한 히스토리 데이터를 수집하고, 상기 히스토리 데이터에 기반하여 상기 스케 줄러 정책을 트레이닝 한다."}
{"patent_id": "10-2020-0120006", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 클라우드 컴퓨팅 기술에 관한 것으로, 보다 상세하게는 클라우드와 엣지 시스템이 혼합된 환경에서 서비스 제공을 위한 지능형 스케줄링 기술에 관한 것이다."}
{"patent_id": "10-2020-0120006", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 클라우드 컴퓨팅을 통하여 서버, 저장소, 소프트웨어, 빅데이터 분석, 인공지능 서비스 등의 다양한 컴퓨 팅 서비스를 제공하고 있다. 그러나 클라우드 서비스를 요구하는 사용자들이 늘어나면서 수집한 데이터를 분석 하고 송신하는 과정에서 발생하는 서비스에 대한 지연되는 문제점이 있다. 또한, 사용자와 클라우드의 데이터통 신과정에서 보안 문제도 해결해야 할 부분이다. 이러한 데이터 처리 속도, 용량 및 보안에 관련된 문제점들을 해결하기 위해 클라우드와 엣지 시스템을 통합한 컴퓨팅 서비스 기술에 대한 효율적인 방법이 필요하다. 클라우드 컴퓨팅은 데이터 센터에 의해 데이터가 처리되지만, 엣지 컴퓨팅은 대규모 엣지 단말들이 생성하는 방 대한 데이터의 클라우드 집중화로 인한 처리 및 전송 지연을 극복하기 위해 단말 근접 위치에서 데이터를 처리 한다. 이 때, 클라우드-엣지-단말 간에는 분산 협업을 기반으로 응답 속도 민감 서비스를 지원하는 지능형 엣지 SW 플 랫폼이 필요하다. 그러나 기존 엣지 시스템은 서비스 특징 및 제원 제공에 최적화되지 않은 형태로 서비스 제공하는 점, 실행 형 태별 분리된 자원배치로 성능 최적화를 고려하고 있지 않은 점, 부분적인 수직적 협업만을 제공하는 점, 기존 모놀리틱 응용과 마이크로 서비스 형태의 실행 형태에 국한된 종속적인 서비스 제공하는 점, 여유 자원 부족 시 성능 보장을 위한 자원 추가 방법이 제공되지 않는 점 및 수직적/수평적 협업을 위한 응용프로그램 수준에서 설 계가 필요하다는 점 등의 문제점이 있다. 한편, 한국공개특허 제 10-2018-0031546 호\"클라우드 서버를 스케줄링하는 방법 및 장치\"는 클라우드 서버들의 기정 기간에 처해져 있음에 응답하여 클라우드 서버 클러스터들로부터 획득한 태스크를 수행하는 클라우드 서버 의 태스크를 스케줄링하는 장치 및 방법에 관하여 개시하고 있다. 그러나, 한국공개특허 제 10-2018-0031546 호는 클라우드와 엣지 시스템이 혼합된 환경에서의 태스크 스케줄링 에 관해서는 개시하고 있지 않다."}
{"patent_id": "10-2020-0120006", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 클라우드와 엣지 간 수직 및 수평적 협업 최적화를 위한 지능형 스케줄링을 제공하는 것을 목적으로 한다. 또한, 본 발명은 클라우드와 엣지 간 수직 및 수평적 협업 최적화를 통하여 AR/VR, 비디오 감시(Surveillance), 긴급재난관리서비스, 스마트 시티 및 커넥티드 카 등 빠른 응답 속도를 요구하는 초저지연 지능 정보서비스를제공하는 것을 목적으로 한다. 또한, 본 발명은 클라우드, 엣지 및 이웃 엣지를 포함한 통합적인 분산 처리와 로그나 통계 정보를 기반으로 효 율적인 지능형 스케줄러 정책을 생성하는 것을 목적으로 한다."}
{"patent_id": "10-2020-0120006", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 지능형 스케줄링 장치는 하나 이상의 프로세서 및 상 기 하나 이상의 프로세서에 의해 실행되는 적어도 하나 이상의 프로그램을 저장하는 실행메모리를 포함하고, 상 기 적어도 하나 이상의 프로그램은 클라우드, 엣지 시스템 및 이웃 엣지(NEAR EDGE) 시스템을 포함하는 혼합 클 라우드 환경에서, 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지의 작업들을 스케줄링하기 위한 스케줄러 들을 구성하고, 스케줄러 정책에 기반하여 상기 스케줄러들을 제어하여 클라이언트로부터 요청 받은 데이터를 요청 큐에 저장하고, 상기 요청 큐에 저장된 데이터를 작업 큐에서 스케줄링하여 상기 작업들을 처리하고, 상기 스케줄러 정책에 따라 상기 작업들을 처리한 히스토리 데이터를 수집하고, 상기 히스토리 데이터에 기반하여 상 기 스케줄러 정책을 트레이닝 한다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 스케줄러들의 직렬적 연결 및 병렬적 연결 중 적어도 하나를 이용하여 작업을 처리하도록 상기 스케줄러들을 구성할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 스케줄러들의 직렬적 연결과 병렬적 연결을 모두 이용하여 복 합적으로 상기 작업들을 처리하도록 상기 스케줄러들을 구성할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 직렬적 연결로 구성된 스케줄러들의 자원 할당 성공 여부에 따라 순차적으로 스케줄러들에게 상기 작업들을 전달할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 병렬적 연결로 구성된 스케줄러들 중 적어도 두 개의 스케줄 러들에게 동일한 작업을 요청하여 상기 두 개의 스케줄러들 중 어느 하나로 결정된 최적 스케줄러로 상기 작업 들을 전달할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 복수개의 작업 큐들에 상기 클라이언트로부터 요청 받은 데이터를 우선 순위에 따라 저장하고, 상기 작업 큐들에 저장된 데이터를 스케줄링 할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 클라이언트로부터의 요청 받은 데이터의 작업 요청이 실패한 횟수가 기설정된 횟수 이상인 경우, 상기 작업 요청을 우선적으로 처리하기 위한 작업 큐에 상기 데이터를 저장 할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 작업 큐에 저장된 데이터의 스케줄링을 실패한 횟수가 기설정 된 횟수 이상인 경우, 다음 작업 큐로 상기 데이터를 전달하고, 상기 다음 작업 큐로 전달된 데이터의 스케줄링 수행할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지 시스템의 리 소스 정보를 수집하고, 상기 리소스 정보 및 상기 스케줄러 정책을 실행한 결과로부터 상기 히스토리 데이터를 생성할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 리소스 정보에 기반하여 상기 스케줄러 정책의 실행 계획을 수립하고, 상기 스케줄러 정책의 실행 계획을 적용한 결과로부터 상기 스케줄러 정책을 트레이닝 할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 지능형 스케줄링 방법은 지능형 스케줄링 장치 의 지능형 스케줄링 방법에 있어서, 클라우드, 엣지 시스템 및 이웃 엣지(NEAR EDGE) 시스템을 포함하는 혼합 클라우드 환경에서, 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지의 작업들을 스케줄링하기 위한 스케줄 러들을 구성하는 단계; 스케줄러 정책에 기반하여 상기 스케줄러들을 제어하여 클라이언트로부터 요청 받은 데 이터를 요청 큐에 저장하고, 상기 요청 큐에 저장된 데이터를 작업 큐에서 스케줄링하여 단계 및 상기 스케줄러 정책에 따라 상기 작업들을 처리한 히스토리 데이터를 수집하고, 상기 히스토리 데이터에 기반하여 상기 스케줄 러 정책을 트레이닝 하는 단계를 포함한다. 이 때, 상기 스케줄러들을 구성하는 단계는 상기 스케줄러들의 직렬적 연결 및 병렬적 연결 중 적어도 하나를 이용하여 작업을 처리하도록 상기 스케줄러들을 구성할 수 있다. 이 때, 상기 스케줄러들을 구성하는 단계는 상기 스케줄러들의 직렬적 연결과 병렬적 연결을 모두 이용하여 복 합적으로 상기 작업들을 처리하도록 상기 스케줄러들을 구성할 수 있다. 이 때, 상기 스케줄러들을 구성하는 단계는 상기 직렬적 연결로 구성된 스케줄러들의 자원 할당 성공 여부에 따 라 순차적으로 스케줄러들에게 상기 작업들을 전달할 수 있다. 이 때, 상기 스케줄러들을 구성하는 단계는 상기 병렬적 연결로 구성된 스케줄러들 중 적어도 두 개의 스케줄러 들에게 동일한 작업을 요청하여 상기 두 개의 스케줄러들 중 어느 하나로 결정된 최적 스케줄러로 상기 작업들 을 전달할 수 있다. 이 때, 상기 작업들을 처리하는 단계는 복수개의 작업 큐들에 상기 클라이언트로부터 요청 받은 데이터를 우선 순위에 따라 저장하고, 상기 작업 큐들에 저장된 데이터를 스케줄링 할 수 있다. 이 때, 상기 작업들을 처리하는 단계는 상기 클라이언트로부터의 요청 받은 데이터의 작업 요청이 실패한 횟수 가 기설정된 횟수 이상인 경우, 상기 작업 요청을 우선적으로 처리하기 위한 작업 큐에 상기 데이터를 저장할 수 있다. 이 때, 상기 작업들을 처리하는 단계는 상기 작업 큐에 저장된 데이터의 스케줄링을 실패한 횟수가 기설정된 횟 수 이상인 경우, 다음 작업 큐로 상기 데이터를 전달하고, 상기 다음 작업 큐로 전달된 데이터의 스케줄링 수행 할 수 있다. 이 때, 상기 스케줄러 정책을 트레이닝 하는 단계는 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지 시스 템의 리소스 정보를 수집하고, 상기 리소스 정보 및 상기 스케줄러 정책을 실행한 결과로부터 상기 히스토리 데 이터를 생성할 수 있다. 이 때, 상기 스케줄러 정책을 트레이닝 하는 단계는 상기 리소스 정보에 기반하여 상기 스케줄러 정책의 실행 계획을 수립하고, 상기 스케줄러 정책의 실행 계획을 적용한 결과로부터 상기 스케줄러 정책을 트레이닝 할 수 있다."}
{"patent_id": "10-2020-0120006", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명은 클라우드와 엣지 간 수직 및 수평적 협업 최적화를 위한 지능형 스케줄링을 제공할 수 있다. 또한, 본 발명은 클라우드와 엣지 간 수직 및 수평적 협업 최적화를 통하여 AR/VR, 비디오 감시(Surveillance), 긴급재난관리서비스, 스마트 시티 및 커넥티드 카 등 빠른 응답 속도를 요구하는 초저지연 지능 정보서비스를 제공할 수 있다. 또한, 본 발명은 클라우드, 엣지 및 이웃 엣지를 포함한 통합적인 분산 처리와 로그나 통계 정보를 기반으로 효 율적인 지능형 스케줄러 정책을 생성할 수 있다."}
{"patent_id": "10-2020-0120006", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명을 첨부된 도면을 참조하여 상세히 설명하면 다음과 같다. 여기서, 반복되는 설명, 본 발명의 요지를 불 필요하게 흐릴 수 있는 공지 기능, 및 구성에 대한 상세한 설명은 생략한다. 본 발명의 실시형태는 당 업계에서 평균적인 지식을 가진 자에게 본 발명을 보다 완전하게 설명하기 위해서 제공되는 것이다. 따라서, 도면에서의 요소들의 형상 및 크기 등은 보다 명확한 설명을 위해 과장될 수 있다. 명세서 전체에서, 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다 른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 이하, 본 발명에 따른 바람직한 실시예를 첨부된 도면을 참조하여 상세하게 설명한다. 도 1은 본 발명의 일실시예에 따른 엣지 서비스 시스템을 나타낸 도면이다. 도 2는 본 발명의 일실시예에 따른 엣지 서비스 시스템의 3LT(LOCATIONS) 구성을 나타낸 도면이다. 도 1을 참조하면, 엣지 서비스 시스템은 클라우드와 엣지 시스템의 혼합 클라우드로 구성되는 것을 알 수 있다. 이 때, 도 2를 참조하면, 본 발명의 일실시예에 따른 엣지 서비스 시스템은 클라우드 및 엣지 시스템과 함께 이웃 엣지(NEAR EDGE) 시스템이 고려된 3 가지 위치(3 LOCATIONS)를 포함하는 혼합 클라우드 환경을 나타낸 것을 알 수 있다. 본 발명의 일실시예에 따른 엣지 서비스 시스템은 3 가지 어플리케이션 형태(3 Application Types)를 제공할 수 있다. 3 가지 어플리케이션 형태는 모놀리틱 응용(Monolithic App), 마이크로 서비스(Micro Service) 및 서비스형 함 수(FaaS)를 포함할 수 있다. 3 가지 애플리케이션 형태(3 Application Types)은 표 1과 같이 응용프로그램의 복잡도나 서비스 규모, 그리고 자원사용 형태 측면에서 서로 다른 특성이 있는 것을 알 수 있다. 본 발명의 일실시예에 따른 엣지 서비스 시스 템은 상기 특성을 잘 반영한 상호 협업이나 서비스 이동과 같은 기능을 효과적으로 적용할 필요가 있다. [표 1]"}
{"patent_id": "10-2020-0120006", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "본 발명의 일실시예에 따른 엣지 서비스 시스템은 수직 및 수평적 협업 최적화를 3LT(3 Locations, 3 Application Types)을 바탕으로 지원할 수 있다.도 3은 본 발명의 일실시예에 따른 수직 및 수평적 협업이 가능한 엣지 서비스 개념을 나타낸 도면이다. 도 3을 참조하면, 본 발명의 일실시예에 따른 엣지 서비스 시스템은 위치 및 서비스 타입에 관계없이 다양한 수 직 및 수평적 협업을 가능한 구조를 나타낸 것을 알 수 있다. 본 발명의 일실시예에 따른 엣지 서비스 시스템은 3L를 이용한 스케일 아웃, 3L를 이용한 스케일 업 및 3L를 이 용한 예측형 오버 엣지를 제공할 수 있다. 본 발명의 일실시예에 따른 지능형 스케줄링 장치 및 방법은 상기와 같은 혼합 클라우드 환경에서 엣지 서비스 를 제공하는 엣지 서비스 시스템으로써 적용될 수 있으며, 지능형 스케줄링 장치 및 방법에 관하여 아래에서 상 세히 설명한다. 도 4는 본 발명의 일실시예에 따른 지능형 스케줄링 방법을 나타낸 동작흐름도이다. 도 4를 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄링 방법은 먼저 스케줄러를 구성할 수 있다(S1101). 즉, 단계(S1101)는 클라우드, 엣지 시스템 및 이웃 엣지(NEAR EDGE) 시스템을 포함하는 혼합 클라우드 환경에서, 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지의 작업들을 스케줄링하기 위한 스케줄러들을 구 성할 수 있다. 이 때, 단계(S1101)는 상기 스케줄러들의 직렬적 연결 및 병렬적 연결 중 적어도 하나를 이용하여 작업을 처리 하도록 상기 스케줄러들을 구성할 수 있다. 이 때, 단계(S1101)는 상기 스케줄러들의 직렬적 연결과 병렬적 연결을 모두 이용하여 복합적으로 상기 작업들 을 처리하도록 상기 스케줄러들을 구성할 수 있다. 이 때, 단계(S1101)는 상기 직렬적 연결로 구성된 스케줄러들의 자원 할당 성공 여부에 따라 순차적으로 스케줄 러들에게 상기 작업들을 전달할 수 있다. 이 때, 단계(S1101)는 상기 병렬적 연결로 구성된 복수개의 스케줄러들 중 적어도 두 개의 스케줄러들에게 동일 한 작업을 요청하여 상기 두 개의 스케줄러들 중 어느 하나로 결정된 최적 스케줄러로 상기 작업들을 전달할 수 있다. 또한, 본 발명의 일실시예에 따른 지능형 스케줄링 방법은 스케줄러 정책을 실행할 수 있다(S1102). 즉, 단계(S1102)는 스케줄러 정책에 기반하여 상기 스케줄러들을 제어하여 클라이언트로부터 요청 받은 데이터 를 요청 큐에 저장하고, 상기 요청 큐에 저장된 데이터를 작업 큐에서 스케줄링하여 상기 작업들을 처리할 수 있다. 이 때, 단계(S1102)는 복수개의 작업 큐들에 상기 클라이언트로부터 요청 받은 데이터를 우선 순위에 따라 저장 하고, 상기 작업 큐들에 저장된 데이터를 스케줄링 할 수 있다. 이 때, 단계(S1102)는 상기 클라이언트로부터의 요청 받은 데이터의 작업 요청이 실패한 횟수가 기설정된 횟수 이상인 경우, 상기 작업 요청을 우선적으로 처리하기 위한 작업 큐에 상기 데이터를 저장할 수 있다. 이 때, 단계(S1102)는 상기 작업 큐에 저장된 데이터의 스케줄링을 실패한 횟수가 기설정된 횟수 이상인 경우, 다음 작업 큐로 상기 데이터를 전달하고, 상기 다음 작업 큐로 전달된 데이터의 스케줄링 수행할 수 있다. 또한, 본 발명의 일실시예에 따른 지능형 스케줄링 방법은 지능형 스케줄러 정책을 도출할 수 있다(S1103). 즉, 단계(S1103)는 상기 스케줄러 정책에 따라 상기 작업들을 처리한 히스토리 데이터를 수집하고, 상기 히스토 리 데이터에 기반하여 상기 스케줄러 정책을 트레이닝 할 수 있다. 이 때, 단계(S1103)는 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지 시스템의 리소스 정보를 수집하고, 상기 리소스 정보 및 상기 스케줄러 정책을 실행한 결과로부터 상기 히스토리 데이터를 생성할 수 있다. 이 때, 단계(S1103)는 상기 리소스 정보에 기반하여 상기 스케줄러 정책의 실행 계획을 수립하고, 상기 스케줄 러 정책의 실행 계획을 적용한 결과로부터 상기 스케줄러 정책을 트레이닝 할 수 있다. 도 5는 본 발명의 일실시예에 따른 지능형 스케줄링 장치를 나타낸 블록도이다. 도 6은 본 발명의 일실시예에 따른 지능형 스케줄링 장치와 연계된 클라우드, 엣지, 이웃 엣지를 나타낸 블록도이다. 도 5를 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄링 장치는 글로벌 스케줄러, 글로벌 스케 줄러 핸들러, 요청 작업 큐 관리기, 요청 큐, 글로벌 스케줄러 제어기, 글로벌 스케줄러 작업 쓰레드, 작업 메시지 큐 관리기, 작업 메시지 큐 및 엣지 클러스터 메타 데이터 저장소 를 포함할 수 있다. 글로벌 스케줄러는 사용자 인터페이스나 명령어 도구로부터 관련 응용 컨테이너를 할당 요청하는 스케줄 러에 해당하는 REST API 를 포함할 수 있다. 글로벌 스케줄러 핸들러는 글로벌 스케줄러 REST API를 처리할 수 있다. 요청 작업 큐 관리기는 글로벌 스케줄러 핸들러로부터 컨테이너의 할당 요청들을 수신하여 그 데이터 를 요청 큐에 저장하고 관리할 수 있다. 글로벌 스케줄러 제어기는 요청 큐로부터 스케줄링 요청 데이터를 꺼내고, 글로벌 스케줄러 작업 쓰 레드를 생성 및 실행할 수 있다. 글로벌 스케줄러 작업 쓰레드는 실질적으로 스케줄러 작업을 해당 마스터 노드의 글로벌 스케줄러 에이전 트에 전달할 메시지 형태로 변환하여 작업 메시지 큐 관리기를 통해 작업 메시지 큐에 저장할 수 있 다. 작업 메시지 큐는 지능형 스케줄링 장치와 클러스터(10, 20, 30) 간 스케줄러 작업 메시지를 저장할 수 있다. 엣지 클러스터 메타 데이터 저장소는 엣지 클러스터 관련된 메타 데이터들을 저장할 수 있다. 도 6을 참조하면, 지능형 스케줄링 장치와 연계된 클러스터들인 클라우드, 엣지 시스템 및 이웃 엣지 시스템을 나타낸 것을 알 수 있다. 엣지 시스템의 글로벌 스케줄러 에이전트는 클러스터의 마스터 노드에서 작업 메시지 큐로부터 자 신에 해당하는 스케줄러 작업 메시지를 수신하여 REST API를 호출할 수 있다. 엣지(클라우드) 스케줄러는 배정되지 않은 컨테이너를 감지하고, 컨테이너를 실행할 워커노드를 선별할 수 있다. 워커 에이전트는 워커 노드에서 컨테이너를 실행할 수 있다. 도 7은 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 도면이다. 도 7을 참조하면, 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 것을 알 수 있다. 본 발명의 일실시예에 따른 스케줄러들은 동적으로 정책 설정이 가능한 스케줄러, 로그 데이터 분석을 통한 지 능형 스케줄러, 스케줄링 정책 변경에 따른 비용 최소화, 대기 및 연 시간 최소화된 스케줄러들을 포함할 수 있 다. 본 발명의 일실시에에 따른 스케줄러의 작업 대상은 모놀리틱 응용이나 마이크로 서비스를 실행하기 위한 상주 형 컨테이너와 서비스형 함수(FaaS)의 실행을 위한 비상주형 컨테이너를 포함할 수 있다. 본 발명의 일실시예에 따른 스케줄러들은 도 7에 도시된 바와 같이 상기에서 언급한 3 Locations에 해당하는 글 로벌 엣지 스케줄러와 3가지 스케줄러들(112, 113, 114)을 포함할 수 있다. 글로벌 엣지 스케줄러는 마스터 엣지 스케줄러, 이웃 엣지 스케줄러 및 클라우드 스케줄러(11 4)를 연동하기 위한 스케줄러에 상응할 수 있으며 지능형 스케줄링 장치에 포함된 글로벌 스케줄러에 상응할 수도 있다. 마스터 엣지 스케줄러는 주요 서비스가 실행되는 엣지(마스터 엣지) 시스템에 포함된 스케줄러에 상응 할 수 있다. 이웃 엣지 스케줄러는 마스터 엣지 주변에 존재하는 이웃 엣지 시스템에 포함된 스케줄러에 상응할 수 있다. 클라우드 스케줄러는 공용/개인용 클라우드에 포함된 스케줄러에 상응할 수 있다. 도 8은 도 7에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러로 구성한 일 예를 나타낸 도면이다.본 발명의 일실시예에 따른 스케줄러들의 구성 엣지 서비스에서 수평적/수직적 협업을 시스템 수준에서 적용할 수 있다. 이를 위해, 본 발명의 일실시예에 따른 스케줄러들은 LEVELED 스케줄러와 같은 직렬적 연결 구성과 SHARED 스케줄러와 같은 병렬적 연결 구성을 제공할 수 있다. LEVELED 스케줄러는 스케줄러들의 순차적 처리를 위한 직렬적 연결 구성이고, SHARED 스케줄러는 스케줄러들이 서로 경쟁하여 최적의 조건을 찾는 병렬적 연결 구성일 수 있다. 도 8을 참조하면, LEVELED 스케줄러 구성의 일 예를 나타낸 것을 알 수 있고, 마스터 엣지 스케줄러, 이웃 엣지 스케줄러 및 클라우드 스케줄러 순으로 직렬적 연결 구성인 3 LEVELED 스케줄러를 나타낸 것을 알 수 있다. 예를 들어, 글로벌 엣지 스케줄러는 1 Level인 첫번째 마스터 엣지 스케줄러를 통하여 자원 할당이 성공하면 2, 3 Level 스케줄러의 실행은 생략할 수 있다. 그러나, 글로벌 엣지 스케줄러는 1 Level인 첫번 째 마스터 엣지 스케줄러에서 자원 할당이 실패한다면, 순차적으로 다음 단계인 2 Level 스케줄러인 이웃 엣지 스케줄러 또는 3 Level 인 클라우드 스케줄러로 작업을 순차적으로 전달할 수 있다. 서비스 개 발자는 이러한 LEVELED 스케줄러를 사용하여 시스템 레벨에서 엣지 서비스의 부하 분산과 서비스 간 협업을 적 용할 수 있다. 도 9는 도 7에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러와 SHARED 스케줄러를 결합한 복합 적 구성의 일 예를 세부적으로 나타낸 도면이다. 도 9를 참조하면, LEVELD 스케줄러와 SHARED 스케줄러가 결합된 복합적 구성을 나타낸 것을 알 수 있다. 이 때, 2 Level로 구성된 LEVELED 스케줄러이면서 2 Level에서 이웃 엣지 스케줄러와 클라우드 스케줄러 간에 SHARED 스케줄러로 구성한 것을 알 수 있다. SHARED 스케줄러는 2개 이상의 스케줄러에 작업을 동시에 요청하여 각 스케줄러로부터 후보들을 받아서 그 중에 가장 적합한 스케줄러를 선택할 수 있다. 예를 들어, 1 Level인 첫 번째 마스터 엣지 스케줄러에서 자원 할당이 실패한다면, 글로벌 엣지 스케줄러 는 2 Level 스케줄러에서 이웃 엣지 스케줄러와 클라우드 스케줄러가 경쟁모드로 작업을 동시에 요청하고, 각 스케줄러들로부터 후보들을 받아서 가장 적합한 스케줄러를 선택할 수 있다. 도 10은 본 발명의 일실시예에 따른 지능형 스케줄링 장치의 처리 흐름을 나타낸 블록도이다. 도 11은 도 10 에 도시된 지능형 스케줄링 장치의 처리 흐름에서 이어진 엣지, 이웃 엣지 및 클라우드에서의 처리 흐름을 나타낸 블록도이다. 도 10을 참조하면, 먼저 클라이언트로부터 요청받은 컨테이너를 워커 노드에 생성 및 실행하는 것을 알 수 있다(S210). 즉, 단계(S210)는 클라이언트가 컨테이너 생성에 해당하는 REST API를 글로벌 스케줄러에 호출할 수 있다. 또한, 단계(S220)는 글로벌 스케줄러가, 호출된 REST API에 해당하는 글로벌 스케줄러 핸들러를 실행 시킬 수 있다. 또한, 단계(S230)는 글로벌 스케줄러 핸들러가 요청된 데이터를 요청 큐 관리기에 송신할 수 있다. 또한, 단계(S240)는 요청 큐 관리기가 요청된 데이터를 요청 큐에 저장할 수 있다. 또한, 단계(S250)는 글로벌 스케줄러 제어기가, 요청 큐로부터 우선 순위를 고려하여 처리할 데이터 를 가져올 수 있다. 또한, 단계(S260)는 글로벌 스케줄러 제어기가, 글로벌 스케줄러 작업 쓰레드에 복수의 작업 쓰레드 들을 생성하고, 글로벌 스케줄러 작업 쓰레드에 처리할 데이터를 전달하여 작업 큐 스케줄링 작업을 실행 할 수 있다. 또한, 단계(S270)는 글로벌 스케줄러 작업 쓰레드가, 요청된 작업을 분석하고 해당하는 클러스터(10, 20, 30)에 요청할 메시지를 작업 메시지 큐 관리기에 전달할 수 있다. 또한, 단계(S280)는 작업 메시지 큐 관리기가, 전달된 메시지를 작업 메시지 큐에 저장할 수 있다. 도 11을 참조하면, 단계(S290)는 글로벌 스케줄러 에이전트가 작업 메시지 큐로부터 엣지 시스템 또는 이웃 엣지 시스템에 해당하는 메시지가 있는지 체크하고, 해당되는 메시지를 가져올 수 있다. 또한, 단계(S300)는 글로벌 스케줄러 에이전트가. 가져온 메시지를 분석하여 자신의 엣지 API 서버에게 해당 API 호출할 수 있다. 또한, 단계(S310)는 엣지 스케줄러가 워커 노드들에 있는 워커 에이전트들을 통하여 요청한 컨테이너를 생성 및 실행할 수 있다. 이 때, 상기 단계(S210) 내지 단계(S310)는 도 4에 도시된 스케줄러 정책 실행 단계에 포함될 수 있다. 도 12는 도 11 에 도시된 작업 큐 스케줄링 단계의 일 예를 세부적으로 나타낸 동작흐름도이다. 도 12를 참조하면, 도 11에 도시된 상기 단계(S260) 내지 단계(S280)에서 작업 큐 스케줄링 단계에서, 작업 큐 에서 작업에 대한 스케줄링이 요청됐지만, 반복적으로 실패한 요청에 대한 작업을 우선적으로 처리하고, 우선순위 옵션을 갖는 요청이 기본 스케줄링 요청보다 우선으로 처리하기 위해 작업 큐를 3단계로 나누어 처리하는 세부적인 단계를 나타낸 것을 알 수 있다. 3단계 작업 큐는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이 스 큐(Base Queue)를 포함할 수 있다. 첫 번째 프런트 큐(First Front Queue)는 반복적으로 실패한 요청에 대한 우선으로 처리하기 위한 큐이다. 두 번째 프런트 큐(Second Front Queue)는 기본 스케줄링 요청보다 우선으로 처리하는 큐이다. 엣지 스케줄러 정책 실행기의 3단계 작업 큐의 처리는 아래와 같은 규칙으로 처리한다. 먼저, 단계(S410)는 요청된 데이터에 우선순위 옵션(FAST Option)이 있는지 조사하고, 우선순위 옵션이 존재하 는 경우, 두 번째 프런트 큐에 데이터를 저장하고(S420), 우선순위 옵션이 존재하지 않는 경우, 베이스 큐에 저 장할 수 있다(S430). 단계(S440)는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이스 큐 (Base Queue)에 저장된 데이터를 작업 큐에 저장할 수 있다. 단계(S450)는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이스 큐 (Base Queue)의 순으로 큐에 데이터가 있는지 조사하여 각 큐로부터 기설정된 개수(N*)씩 순서대로 스케줄링 작 업 큐에 생성하여 스케줄링 작업을 처리할 수 있다. 단계(S460)는 스케줄링이 성공한 경우, 작업 큐 처리 절차를 종료하고, 스케줄링이 실패한 경우, 각 요청의 실 패한 횟수(Fail_Num)를 1 증가시키고(S470), 실패한 횟수가 기설정된 실패 횟수(K*) 이상인지 판단하고(S480), 기설정된 실패 횟수(K*) 이상인 경우, 첫번째 프런트 큐(First Front Queue)에 저장할 수 있다(S500). 이 때, 단계(S480)는 기설정된 실패 횟수(K*) 미만이고, 우선순위 옵션이 존재하는 경우에는 두 번째 프런트 큐 (Second Front Queue)에 데이터를 저장하고(S420), 우선순위 옵션이 존재하지 않는 경우에는 베이스 큐에 데이 터를 저장할 수 있다(S430). 도 12에 도시된 작업 큐의 스케줄링 단계는 3단계 작업 큐에 모든 요청 데이터가 없을 때까지 반복하고 데이터 가 없으면 대기할 수 있다. 도 13은 본 발명의 일실시예에 따른 지능형 스케줄러에 기반한 서비스의 분산 협업을 위한 동적 배치를 나타낸 도면이다. 도 13을 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄링 장치의 스케줄러들은 고정적 스케줄러가 아닌 지능형 스케줄러로 제공될 수 있다. 본 발명의 일실시예에 따른 지능형 스케줄링 장치는 클라우드, 엣지 시스템 및 이웃 엣지 시스템 에 대한 실시간 모니터링 데이터 및 로그를 수집하고 수집된 데이터를 딥 러닝과 같은 AI 분석을 통하여 다 양한 서비스를 지능형 스케줄러로 동적 배치하는 지능형 분석기를 더 포함할 수 있다. 지능형 분석기는 인공지능 트레이닝을 통하여 지능형 스케줄러 정책을 도출할 때 많은 히스토리 데이터가 필요할 수 있다.이 때, 지능형 분석기는 엣지 서비스 시스템을 구축하고 바로 인공지능 트레이닝은 불가능하지만, 일정 기 간 히스토리 데이터를 수집한 후에는 엣지 스케줄러 정책을 트레이닝할 수 있다. 도 14는 본 발명의 일실시예에 따른 지능형 스케줄러를 적용한 지능형 스케줄링 장치를 나타낸 블록도이다. 도 14를 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄러에 포함되는 지능형 분석기를 세부적으로 나타낸 것을 알 수 있다. 지능형 분석기는 엣지 응용별 정보 수집기, 엣지 클러스터 정보 수집기, 엣지 스케줄러 정책 실행기, 엣지 스케줄러 정책 플랜너, 엣지 스케줄러 정책 평가기, 엣지 스케줄러 정책 로그 기 및 엣지 스케줄러 정책 트레이너를 포함할 수 있다. 지능형 분석기는 엣지 스케줄러 정책 메타데이터 저장소 및 엣지 스케줄러 정책 로그 데이터 저장소 에 메타데이터 및 스케줄러 정책 로그를 저장할 수 있다. 엣지 스케줄러 정책(Edge Scheduler Policy) 메타데이터 저장소는 엣지 스케줄러 정책(ESP)을 저장할 수 있다. 엣지 스케줄러 정책 로그 데이터 저장소는 엣지 스케줄러 정책 로그기를 통하여 엣지 스케줄러 정책을 적 용한 결과를 저장할 수 있다. 엣지 응용별 정보 수집기는 엣지에서 구동되는 응용별로 응답속도, CPU 실사용률, 메모리 실사용률, 기타 자원사용 상태 등의 리소스 정보를 수집할 수 있다. 엣지 클러스터 정보 수집기는 클러스터를 구성하는 물리적 노드별 CPU 실사용률, 메모리 실사용률 등의 리소스 정보를 수집할 수 있다. 엣지 스케줄러 정책 실행기는 여러 엣지 스케줄러 정책을 적용한 후 최적화 정도에 따른 평가하여 가장 좋은 정책을 실행할 수 있다. 엣지 스케줄러 정책 플랜너는 엣지 응용별 정보 수집기와 엣지 클러스터 정보 수집기로부터 수집한 정보를 기반으로 정책을 계획을 수립할 수 있다. 엣지 스케줄러 정책 평가기는 엣지 스케줄러 정책을 적용한 후 최적화 정도에 따른 스케줄러 정책을 평가 할 수 있다. 엣지 스케줄러 정책 로그기는 실행된 스케줄러 정책과 그 결과를 로그로 저장할 수 있다. 엣지 스케줄러 정책 트레이너는 엣지 스케줄러 정책 로그 데이터 저장소로부터 히스토리 데이터를 가져와 스케줄러 정책을 트레이닝 할 수 있다. 도 15는 본 발명의 일실시예에 따른 지능형 스케줄러의 최적화 흐름을 나타낸 블록도이다. 도 15를 참조하면, 지능형 분석기를 적용한 지능형 스케줄링 방법의 지능형 스케줄링 트레이낭 단계 (S1103)의 일 예를 세부적으로 나타낸 것을 알 수 있다. 지능형 스케줄링의 핵심은 최소비용으로 최적화하는 방법과 최대한 빠른 속도로 최적화하는 방법을 모두 제공할 수 있다. 먼저, 단계(S510)는 엣지 응용별 정보 수집기와 엣지 클러스터 정보 수집기를 통하여 컨테이너 플 렛폼의 정보를 수집할 수 있다. 단계(S520)는 엣지 스케줄러 정책 플랜너가 단계(S510)에서 수집된 정보를 바탕으로 엣지 스케줄러 정책 메타데이터 저장소로부터 정책을 선정할 수 있다. 단계(S530)는 컨테이너 플렛폼의 부하 정도와 같은 리소스 정보에 기반하여 ESP 적용 비용 최소화 타입, ESP 적 용 최적화 타입 중 하나를 선택할 수 있다. 단계(S540)는 엣지 스케줄러 정책 실행기를 통하여 컨테이너들을 할당할 수 있다. 단계(S550)는 엣지 스케줄러 정책을 적용전과 적용한 후에 대한 상대 비교를 통하여 스케줄러 정책을 평가할 수 있다. 단계(S560)는 최종적으로 선택된 엣지 스케줄러 정책을 비적용 부분이 없도록 스케줄러들 전체에 적용할 수 있 다. 단계(S570)는 엣지 스케줄러 정책 로그기를 통하여 스케줄러 정책 평가 결과를 엣지 스케줄러 정책 로그 데이터 저장소에 저장할 수 있다. 단계(S580)는 엣지 스케줄러 정책 트레이너가, 엣지 스케줄러 정책 로그데이터 저장소에 저장된 엣 지 스케줄러 정책 로그데이터를 수집할 수 있다. 단계(S590)는 엣지 스케줄러 정책 트레이너가, 스케줄러 정책 트레이닝을 수행하여 최적화된 지능형 스케 줄러 정책을 생성할 수 있다. 도 16은 본 발명의 일실시예에 따른 클라우드 서비스 커스터머와 클라우드 서비스 프로바이더 사이의 지능형 스 케줄링을 나타낸 도면이다. 도 16을 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄링 장치 및 방법을 클라우드 컴퓨팅에서 클라우드 서비스 커스터머(CLOUD SERVICE CUSTOMER, CSC)와 클라우드 서비스 프로바이더(CLOUD SERVICE PROVIDER, CSP) 에 적용한 것을 알 수 있다. 클라우드 서비스 프로바이더는 중앙 클라우드(CENTER CLOUD, CC), 지역 클라우드(REGION CLOUD, RC) 및 에지 클라우드(EDGE CLOUD, EC) 간의 서비스에 대한 글로벌 스케줄링을 위한 관리 구조를 나타낸 것을 알 수 있다. 클라우드 서비스 프로바이더는 글로벌 스케줄러를 실행하기 위한 글로벌 스케줄러의 아래와 같은 세부 구성 요 소들을 포함할 수 있다. 글로벌 API 게이트웨이는 애플리케이션 할당 및 실행 요청 서비스를위한 API 게이트웨이를 제공할 수 있다. 글로벌 API 핸들러는 글로벌 스케줄러 API를 처리할 수 있다. 큐 관리기는 글로벌 스케줄러 핸들러에서 실제로 수행 할 서비스 할당 요청 메시지와 작업 메시지를 받아 저장 할 수 있다. 스케줄러 컨트롤러는 요청 큐에서 스케줄링 메시지를 가져와 글로벌 스케줄러 작업 스레드를 생성하고 실행할 수 있다. 작업 스레드 관리기는 해당 글로벌 스케줄러 에이전트로 전달할 메시지 유형을 변환하여 작업 메시지 큐에 저장 할 수 있다. 메타 데이터 저장소는 분산 클라우드의 메타 데이터를 저장할 수 있다. 작업 메시지 큐는 지역 및 에지 클라우드에서 수행 할 작업 메시지를 저장할 수 있다. 글로벌 스케줄러 에이전트는 작업 메시지 대기열에서 자신에 해당하는 스케줄러 작업 메시지를 받아 해당 API를 호출할 수 있다. 로컬 스케줄러는 할당되지 않은 클라우드를 감지하고 애플리케이션 서비스 실행을 위해 워커 노드를 선택할 수 있다. 워커 에이전트는 노드에서 컨테이너를 실행할 수 있다. 분산 클라우드에서 CSC에서 요청한 애플리케이션 서비스를 생성하고 실행하는 과정은 먼저 CSC가 애플리케이션 생성을 위해 API를 호출할 수 있다. 이 때, 호출 된 API에 해당하는 글로벌 스케줄러 핸들러가 실행될 수 있다. 이 때, 글로벌 API 핸들러는 요청 된 데이터를 요청 큐 관리자로 전송할 수 있다. 이 때, 요청 큐 관리자는 요청 된 데이터를 큐에 저장할 수 있다. 이 때, 스케줄러 컨트롤러는 요청 큐에서 우선 순위를 고려하여 처리 할 데이터를 가져올 수 있다. 이 때, 글로벌 스케줄러 컨트롤러는 작업 스레드를 생성하고 처리 할 데이터를 전달하여 스케줄링 작업을 실행 할 수 있다. 이 때, 작업 스레드 관리기는 요청 된 태스크를 분석하고 큐 관리기에게 메시지를 보내 해당 클러스터를 요청할 수 있다. 이 때, 큐 관리기는 전달 된 메시지를 작업 메시지 큐에 저장할 수 있다. 이 때, 글로벌 스케줄러 에이전트는 작업 메시지 큐에서 엣지 클라우드 또는 로컬 클라우드에 해당하는 메시지 가 있는지 확인하여 해당 메시지를 가져올 수 있다. 이 때, 글로벌 스케줄러 에이전트는 가져온 메시지를 분석하고 해당 API를 로컬 스케줄러에 호출할 수 있다. 로컬 스케줄러는 워커 노드의 워커 에이전트를 통해 요청 된 응용 프로그램 서비스를 생성 및 실행할 수 있다. 이 때, CSP는 실행할 애플리케이션에 따라 글로벌 스케줄링을 제공할 수 있다. 이 때, CSP는 API를 즉시 처리 할 수 있도록 API 관리를 제공할 수 있다. 예를 들어, CSC는 애플리케이션 서비스를 위한 API를 요청한 다음, 글로벌 스케줄링을 위한 API 핸들러가 빠른 응답을 위해 요청 메시지를 큐에 저장하고 관리할 수 있다. 이 때, CSP 는 글로벌 스케줄링을 위해 생성 또는 반영 할 정책 관리를 제공할 수 있다. 예를 들어 글로벌 스케줄링 정책에는 작업 우선 순위, 선호도, 리소스 사용량 등이 포함될 수 있다. CSP는 지역 클라우드 및 엣지 클라우드에서 리소스 정보를 저장하는 메타 데이터 저장소를 제공하고 관리할 수 있다. 예를 들어, 클라우드의 리소스 정보에는 클라우드 서비스 유형, 사용량 등이 포함되며, 리소스 정보는 CSP가 지 역 클라우드 및 에지 클라우드를 모니터링하는 형태로 관리될 수 있다. 이 때, CSP는 작업 우선 순위에 대한 대기열 관리를 제공할 수 있다. 예를 들어, 글로벌 스케줄링을 위한 대기열은 CSC의 요청 메시지 대기열, 작업 메시지 대기열 등이 포함될 수 있다. 이 때, CSP는 분산 자원 및 글로벌 스케줄링을 위한 연결 관리 기능을 제공할 수 있다. 글로벌 스케줄링을 위한 연결 관리는 지역 클라우드 또는 엣지 클라우드의 분산 리소스를 활용하기 위해 연결 프로토콜 또는 에이전트로 관리될 수 있다. 또한, 지역 클라우드 또는 엣지 클라우드의 에이전트는 글로벌 스케줄링의 작업 메시지 큐에서 메시지를 자동으 로 수신할 수 있다. 도 17은 본 발명의 일실시예에 따른 컴퓨터 시스템을 나타낸 도면이다. 도 17을 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄링 장치는 컴퓨터로 읽을 수 있는 기록매체와 같은 컴퓨터 시스템에서 구현될 수 있다. 도 17에 도시된 바와 같이, 컴퓨터 시스템은 버스를 통 하여 서로 통신하는 하나 이상의 프로세서, 메모리, 사용자 인터페이스 입력 장치, 사용자 인터페이스 출력 장치 및 스토리지를 포함할 수 있다. 또한, 컴퓨터 시스템은 네트워크 에 연결되는 네트워크 인터페이스를 더 포함할 수 있다. 프로세서는 중앙 처리 장치 또는 메모리나 스토리지에 저장된 프로세싱 인스트럭션들을 실행하는 반도체 장치일 수 있다. 메모리 및 스토리지는 다양한 형태의 휘발성 또는 비휘발성 저장 매체일 수 있다. 예를 들어, 메모리는 ROM이나 RAM을 포함할 수 있다. 본 발명의 일실시예에 따른 지능형 스케줄링 장치는 하나 이상의 프로세서; 및 상기 하나 이상의 프로세 서에 의해 실행되는 적어도 하나 이상의 프로그램을 저장하는 실행메모리를 포함하고, 상기 적어도 하나 이상의 프로그램은 클라우드, 엣지 시스템 및 이웃 엣지(NEAR EDGE) 시스템을 포함하는 혼합 클라우드 환 경에서, 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지의 작업들을 스케줄링하기 위한 스케줄러들을 구성 하고, 스케줄러 정책에 기반하여 상기 스케줄러들을 제어하여 클라이언트로부터 요청 받은 데이터를 요청 큐에 저장하고, 상기 요청 큐에 저장된 데이터를 작업 큐에서 스케줄링하여 상기 작업들을 처리하고, 상기 스케줄러 정책에 따라 상기 작업들을 처리한 히스토리 데이터를 수집하고, 상기 히스토리 데이터에 기반하여 상기 스케줄러 정책을 트레이닝 한다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 스케줄러들의 직렬적 연결 및 병렬적 연결 중 적어도 하나를 이용하여 작업을 처리하도록 상기 스케줄러들을 구성할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 스케줄러들의 직렬적 연결과 병렬적 연결을 모두 이용하여 복 합적으로 상기 작업들을 처리하도록 상기 스케줄러들을 구성할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 직렬적 연결로 구성된 스케줄러들의 자원 할당 성공 여부에 따라 순차적으로 스케줄러들에게 상기 작업들을 전달할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 병렬적 연결로 구성된 복수개의 스케줄러들 중 적어도 두 개 의 스케줄러들에게 동일한 작업을 요청하여 상기 두 개의 스케줄러들 중 어느 하나로 결정된 최적 스케줄러로 상기 작업들을 전달할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 복수개의 작업 큐들에 상기 클라이언트로부터 요청 받은 데이터를 우선 순위에 따라 저장하고, 상기 작업 큐들에 저장된 데이터를 스케줄링 할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 클라이언트로부터의 요청 받은 데이터의 작업 요청이 실패한 횟수가 기설정된 횟수 이상인 경우, 상기 작업 요청을 우선적으로 처리하기 위한 작업 큐에 상기 데이터를 저장 할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 작업 큐에 저장된 데이터의 스케줄링을 실패한 횟수가 기설정 된 횟수 이상인 경우, 다음 작업 큐로 상기 데이터를 전달하고, 상기 다음 작업 큐로 전달된 데이터의 스케줄링 수행할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 클라우드, 상기 엣지 시스템 및 상기 이웃 엣지 시스템의 리 소스 정보를 수집하고, 상기 리소스 정보 및 상기 스케줄러 정책을 실행한 결과로부터 상기 히스토리 데이터를 생성할 수 있다. 이 때, 상기 적어도 하나 이상의 프로그램은 상기 리소스 정보에 기반하여 상기 스케줄러 정책의 실행 계획을 수립하고, 상기 스케줄러 정책의 실행 계획을 적용한 결과로부터 상기 스케줄러 정책을 트레이닝 할 수 있다. 이상에서와 같이 본 발명의 일실시예에 따른 지능형 스케줄링 장치 및 방법은 상기한 바와 같이 설명된 실시예 들의 구성과 방법이 한정되게 적용될 수 있는 것이 아니라, 상기 실시예들은 다양한 변형이 이루어질 수 있도록 각 실시예들의 전부 또는 일부가 선택적으로 조합되어 구성될 수도 있다."}
{"patent_id": "10-2020-0120006", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일실시예에 따른 엣지 서비스 시스템을 나타낸 도면이다. 도 2는 본 발명의 일실시예에 따른 엣지 서비스 시스템의 3LT(LOCATIONS) 구성을 나타낸 도면이다. 도 3은 본 발명의 일실시예에 따른 수직 및 수평적 협업이 가능한 엣지 서비스 개념을 나타낸 도면이다. 도 4는 본 발명의 일실시예에 따른 지능형 스케줄링 방법을 나타낸 동작흐름도이다. 도 5는 본 발명의 일실시예에 따른 지능형 스케줄링 장치를 나타낸 블록도이다. 도 6은 본 발명의 일실시예에 따른 지능형 스케줄링 장치와 연계된 클라우드, 엣지, 이웃 엣지를 나타낸 블록도 이다. 도 7은 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 도면이다. 도 8은 도 7에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러로 구성한 일 예를 나타낸 도면이다. 도 9는 도 7에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러와 SHARED 스케줄러를 결합한 복합 적 구성의 일 예를 세부적으로 나타낸 도면이다. 도 10은 본 발명의 일실시예에 따른 지능형 스케줄링 장치의 처리 흐름을 나타낸 블록도이다.도 11은 도 10 에 도시된 지능형 스케줄링 장치의 처리 흐름에서 이어진 엣지, 이웃 엣지 및 클라우드에서의 처 리 흐름을 나타낸 블록도이다. 도 12는 도 11 에 도시된 작업 큐의 스케줄링 단계의 일 예를 세부적으로 나타낸 동작흐름도이다. 도 13은 본 발명의 일실시예에 따른 지능형 스케줄러에 기반한 서비스의 분산 협업을 위한 동적 배치를 나타낸 도면이다. 도 14는 본 발명의 일실시예에 따른 지능형 스케줄러를 적용한 지능형 스케줄링 장치를 나타낸 블록도이다. 도 15는 본 발명의 일실시예에 따른 지능형 스케줄러의 최적화 흐름을 나타낸 블록도이다. 도 16은 본 발명의 일실시예에 따른 클라우드 서비스 커스터머와 클라우드 서비스 프로바이더 사이의 지능형 스 케줄링을 나타낸 도면이다. 도 17은 본 발명의 일실시예에 따른 컴퓨터 시스템을 나타낸 도면이다."}
