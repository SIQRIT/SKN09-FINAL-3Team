{"patent_id": "10-2020-7019378", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0061304", "출원번호": "10-2020-7019378", "발명의 명칭": "플렉서블 케이블 연결 기반의 분산형 AI 훈련 토폴로지", "출원인": "바이두닷컴 타임즈 테크놀로지", "발명자": "주, 허페이"}}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "데이터 처리 시스템에 있어서,중앙 처리 장치(CPU); 및버스를 통해 상기 CPU에 연결된 복수의 가속기 카드 - 각 상기 가속기 카드는 복수의 데이터 처리(DP) 가속기를구비함으로써 상기 CPU로부터 DP 태스크를 수신하고 수신한 DP 태스크를 수행하며, 상기 가속기 카드 중 적어도두 개는 카드간 연결을 통해 서로 연결되고, 상기 DP 가속기 중 적어도 두 개는 칩간 연결을 통해 서로 연결됨-;를 포함하고,상기 카드간 연결 및 칩간 연결 각각은, 상기 CPU로부터 수신한 요청에 응답하여 임의의 한 가속기 카드 또는임의의 한 가속기 카드 내의 임의의 한 DP 가속기가 활성화 또는 비활성화되어 상기 CPU로부터 수신한 임의의한 DP 태스크를 처리하도록, 동적으로 활성화 또는 비활성화될 수 있는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,각 가속기 카드의 DP 가속기 각각은 복수의 칩간 인터페이스를 포함하고, 상기 칩간 인터페이스는 상응하는 칩간 연결을 통해 상기 가속기 카드의 다른 한 DP 가속기와 상호 접속하는데 사용될 수 있는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 각 가속기 카드의 DP 가속기 각각은 복수의 칩간 인터페이스를 포함하고, 상기 칩간 인터페이스는 상응하는 카드간 연결을 통해 상기 가속기 카드의 다른 한 DP 가속기와의 상호 연결에 사용될 수 있는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항 내지 제3항 중 어느 한 항에 있어서,각 가속기 카드 중 상기 DP 가속기는 하나 또는 복수의 칩간 연결을 통해 서로 연결되는 복수의 행과 복수의 열로 배열되는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 가속기 카드 중 제1 가속기 카드의 각 행의 DP 가속기는 상응하는 수평 칩간 연결을 통해 직렬로 연결되어수평 가속기 링을 형성하는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,각 열의 제1 가속기 카드는 하나 또는 복수의 상응하는 카드간 연결을 통해 상기 가속기 카드 중 대응하는 열의제2 가속기 카드에 연결되어 수직 가속기 링을 형성하는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제4항에 있어서,제1 가속기 카드의 각 열의 DP 가속기는 상응하는 수직 칩간 연결을 통해 직렬로 연결되어 수직 가속기 링을 형성하는 데이터 처리 시스템.공개특허 10-2021-0061304-3-청구항 8 제7항에 있어서,각 행의 제1 가속기 카드는 하나 또는 복수의 상응하는 카드간 연결을 통해 상기 가속기 카드 중 대응하는 행의제2 가속기 카드에 연결되어 수평 가속기 링을 형성하는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항 내지 제8항 중 어느 한 항에 있어서,상기 각 DP 가속기는 인공 지능 AI 가속기 칩을 포함하는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항 내지 제9항 중 어느 한 항에 있어서, 상기 버스는 PCIe (PCI 익스프레스) 링크 또는 이더넷 연결을 포함하고, 칩간 연결 또는 카드간 연결은 가속기를 위한 캐시 일관성 인터커넥트 (CCIX) 링크를 포함하는 데이터 처리 시스템."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "가속기 카드에 있어서, 버스를 통해 중앙 처리 장치(CPU)에 연결된 호스트 인터페이스; 및 상기 CPU로부터 데이터 처리 (DP) 태스크를 수신하고 수신한 DP 태스크를 수행하는 복수의 DP 가속기 - 상기 DP가속기 중 적어도 두 개는 칩간 연결을 통해 서로 연결됨 -; 를 포함하고,각 칩간 연결은, 상기 호스트 인터페이스를 통해 상기 CPU로부터 수신한 요청에 응답하여 임의의 한 DP 가속기가 활성화 또는 비활성화되어 상기 CPU로부터 수신한 임의의 한 DP 태스크를 처리하도록, 동적으로 활성화 또는비활성화될 수 있는 가속기 카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 각 DP 가속기는 복수의 칩간 인터페이스를 포함하고, 상기 칩간 인터페이스는 상응하는 칩간 연결을 통해 다른DP 가속기와의 상호 연결에 사용될 수 있는 가속기 카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서, 각 DP 가속기는 복수의 칩간 인터페이스를 포함하고, 상기 칩간 인터페이스는 상응하는 카드간 연결을 통해 다른 DP 가속기 카드의 다른 한 DP 가속기와의 상호 연결에 사용될 수 있는 가속기 카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제11항 내지 제13항 중 어느 한 항에 있어서,상기 DP 가속기는 하나 또는 복수의 칩간 연결을 통해 서로 연결되는 복수의 행과 복수의 열로 배열되는 가속기카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,각 행의 DP 가속기는 상응하는 수평 칩간 연결을 통해 직렬로 연결되어 수평 가속기 링을 형성하는 가속기카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "공개특허 10-2021-0061304-4-제15항에 있어서,각 열은 하나 또는 복수의 상응하는 카드간 연결을 통해 상기 가속기 카드 중 대응하는 열의 제2 가속기 카드에연결되어 수직 가속기 링을 형성하는 가속기 카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제14항에 있어서,각 열의 DP 가속기는 상응하는 수직 칩간 연결을 통해 직렬로 연결되어 수직 가속기 링을 형성하는 가속기카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,각 행은 하나 또는 복수의 상응하는 카드간 연결을 통해 상기 가속기 카드 중 대응하는 행의 제2 가속기 카드에연결되어 수평 가속기 링을 형성하는 가속기 카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제11항 내지 제18항 중 어느 한 항에 있어서,상기 각 DP 가속기는 인공 지능 AI 가속기 칩을 포함하는 가속기 카드."}
{"patent_id": "10-2020-7019378", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제11항 내지 제19항 중 어느 한 항에 있어서,상기 버스는 PCIe (PCI 익스프레스) 링크 또는 이더넷 연결을 포함하고, 칩간 연결 또는 카드간 연결은 가속기를 위한 캐시 일관성 인터커넥트 (CCIX) 링크를 포함하는 가속기 카드."}
{"patent_id": "10-2020-7019378", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "데이터 처리 시스템은 중앙 처리 장치(CPU) 및 버스를 통해 CPU에 연결된 복수의 가속기 카드를 포함하고, 각 가 속기 카드는 복수의 데이터 처리 (DP) 가속기를 구비함으로써 CPU로부터 DP 태스크를 수신하고 수신한 DP 태스크 를 수행한다. 가속기 카드 중 적어도 두개는 카드간 연결을 통해 서로 연결되고, DP 가속기 중 적어도 두개는 칩 간 연결을 통해 서로 연결된다. 카드간 연결과 칩간 연결 각각은, CPU로부터 수신한 요청에 응답하여 임의의 한 가속기 카드 또는 임의의 한 가속기 카드 내의 임의의 한 DP 가속기가 활성화 또는 비활성화되어 CPU로부터 수신 한 임의의 DP 태스크를 처리하도록, 동적으로 활성화 또는 비활성화될 수 있다."}
{"patent_id": "10-2020-7019378", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 출원의 실시예는 전체적으로 머신 러닝에 관한 것이고, 상세하게 인공 지능(AI) 가속기 칩 토폴로지에 관한 것이다."}
{"patent_id": "10-2020-7019378", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "분산형 AI 훈련은 전체 훈련 과정을 가속화하고 훈련 시간을 줄이기 위해 동시에 작동하는 복수의 AI 가속기 칩 을 필요로 한다. 따라서 AI 가속기 칩을 조정하기 위해 칩의 토폴로지가 필요하다. 이러한 토폴로지 크기는 훈 련 요구에 따라 한 자리수부터 수천 개의 AI 가속기 칩에 이르기까지 다양할 수 있다. 일반적으로 인쇄 회로 기 판(PCB) 배선을 사용하여 작은 토폴로지를 구축할 수 있고, 이더넷을 사용하여 다양한 기판을 연결함으로써 큰 토폴로지를 구축할 수 있다. 그러나 이 두 가지 방법은 모두 세련되지 못하거나 또는 상당한 하드웨어 오버해드 를 요구하기 때문에 적합하지 않다."}
{"patent_id": "10-2020-7019378", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "제1 양태에 있어서, 본 발명의 일부 실시예에서는 중앙 처리 장치 (CPU); 및 버스를 통해 CPU에 연결된 복수의 가속기 카드를 포함하는 데이터 처리 시스템을 제공한다."}
{"patent_id": "10-2020-7019378", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "가속기 카드 중 각각은 복수의 데이터 처리 (DP) 가속기를 구비함으로써 CPU로부터 DP 태스크를 수신하고 수신 한 DP 태스크를 수행한다. 여기서, 가속기 카드 중 적어도 두 개는 카드간 연결을 통해 서로 연결되고, DP 가속 기 중 적어도 두 개는 칩간 연결을 통해 서로 연결된다. 카드간 연결 및 칩간 연결 각각은, CPU로부터 수신한 요청에 응답하여 임의의 한 가속기 카드 또는 임의의 한 가속기 카드 내의 임의의 한 DP 가속기가 활성화 또는비활성화되어 CPU로부터 수신한 임의의 DP 태스크를 처리하도록, 동적으로 활성화 또는 비활성화될 수 있다."}
{"patent_id": "10-2020-7019378", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "제2 양태에 있어서, 본 발명의 일부 실시예에서는 가속기 카드를 제공한다. 상기 가속기 카드는 버스를 통해 중 앙 처리 장치 (CPU) 에 연결된 호스트 인터페이스; 및 CPU로부터 DP 태스크를 수신하고 수신한 DP 태스크를 수 행하는 복수의 데이터 처리 (DP) 가속기 - DP 가속기 중 적어도 두 개는 칩간 연결을 통해 서로 연결됨 -;를 포 함하고, 각 칩간 연결은 호스트 인터페이스를 통해 CPU로부터 수신한 요청에 응답하여 임의의 한 DP 가속기가 활성화 또는 비활성화되어 CPU로부터 수신한 임의의 DP 태스크를 처리하도록, 동적으로 활성화 또는 비활성화될 수 있다."}
{"patent_id": "10-2020-7019378", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서 설명되는 세부 사항들을 참조하여 본 발명의 각 실시예 및 양태에 대해 설명할 것이고, 첨부된 도면은 각 실시예들을 나타낼 것이다. 아래의 설명 및 도면들은 본 발명의 예시일 뿐, 본 발명을 한정하는 것으로 이해 해서는 안된다. 본 발명의 각 실시예들에 대한 충분한 이해를 제공하기 위해 많은 구체적인 세부 사항들에 대해 설명하였다. 그러나, 특정 경우에 있어서, 본 발명에 대한 간결한 설명을 제공하기 위해, 공지된 또는 종래의 세부 사항들에 대해 설명하지 않았다. 본 명세서에서 “일 실시예(one embodiment)” 또는 “실시예(an embodiment)”라고 지칭하는 것은 실시예에 결 합하여 설명한 구체적인 특징, 구조 또는 특성이 본 발명의 적어도 하나의 실시예에 포함될 수 있음을 의미한다. 본 명세서의 여러 부분에서 관용구 “일 실시예에 있어서”가 나타날 경우, 이는 반드시 동일한 실시 예를 가리켜야만 하는 것은 아니다. 본 발명에서 AI 가속기, AI 가속기 칩 및 칩 등의 기술 용어는 호환되어 사용될 수 있고, 이러한 용어들은 모두 범용 처리 장치(GPU)의 예로서, 상기 범용 처리 장치(GPU)는 데이터 처리 (DP) 가속기의 일 예이다. 일 양태에 있어서, 데이터 처리 시스템은 중앙 처리 장치 (CPU) 및 버스를 통해 CPU에 연결된 가속기 카드를 포 함하고, 각 가속기 카드는 복수의 데이터 처리 (DP) 가속기를 구비함으로써 CPU로부터 DP 태스크를 수신하고 수 신한 DP 태스크를 수행하며, 가속기 카드 중 적어도 두개는 카드간 연결을 통해 서로 연결되고, DP 가속기 중 적어도 두개는 칩간 연결을 통해 서로 연결된다. 카드간 연결 및 칩간 연결 각각은, CPU로부터 수신한 요청에 응답하여 임의의 한 가속기 카드 또는 임의의 한 가속기 카드 내의 임의의 한 DP 가속기가 활성화 또는 비활성 화되어 CPU로부터 수신한 임의의 한 DP 태스크를 처리하도록, 동적으로 활성화 또는 비활성화될 수 있다. 다른 일 양태에 있어서, 가속기 카드는 버스를 통해 중앙 처리 장치(CPU)에 연결된 호스트 인터페이스; 및 CPU 로부터 DP 태스크를 수신하고 수신한 DP 태스크를 수행하는 복수의 데이터 처리 (DP) 가속기를 포함하고, DP 가 속기 중 적어도 두 개는 칩간 연결을 통해 서로 연결되고, 각 칩간 연결은, 호스트 인터페이스를 통해 CPU로부 터 수신한 요청에 응답하여 임의의 한 DP 가속기가 활성화 또는 비활성화되어 CPU로부터 수신한 임의의 한 DP 태스크를 처리하도록, 동적으로 활성화 또는 비활성화될 수 있다.다양한 실시예에 따라, AI 칩 토폴로지를 동적으로 구축하는 시스템 및 방법에 대해 설명하고자 한다. AI 칩 클 러스터의 기판(가속기 카드 또는 가속기 모듈이라고도 불림) 사이의 케이블 연결(칩간 또는 프로세서간 연결이 라고도 함)을 동적으로 활성화 또는 비활성화시킴으로써 다양한 크기의 AI 토폴로지를 구축할 수 있다. 칩 클러 스터는 서로 다른 기판에 위치하는 대량의 AI 칩을 포함할 수 있다. 각 기판은 동일 수량의 AI 칩을 포함할 수 있고, AI 칩은 인쇄 회로 기판 (PCB) 배선 또는 전기 배선을 통해 서로 연결된다. 예시적인 방법에 따르면, 칩 클러스터에서 칩 토폴로지를 구축하기 위한 요청을 수신하고, 상기 요청은 상기 칩 토폴로지에 사용되는 칩의 개수를 지정한다. 칩 클러스터는 케이블 연결을 통해 서로 연결된 대량의 기판을 포 함하고, 각 기판은 기판 상에 위치한 칩 세트를 포함한다. 상기 요청에 따라 칩 토폴로지에 대해 지정한 수량의 칩과 각 기판 상에 위치한 칩 세트의 수량을 바탕으로, 칩 토폴로지에 사용되는 기판 세트를 결정한다. 상기 기 판 세트가 결정되면 상기 기판 세트 사이의 케이블 연결을 검사하여, 비활성화 상태에 처한 케이블 연결의 존재 여부를 확인한다. 그 후 비활성화된 케이블 연결을 활성화시켜 요청하는 칩 토폴로지를 구축한다. 일 실시예에서, 각 칩은 하나 또는 복수의 프로그램 명령(명령 또는 신호)을 수행하여 칩과의 칩간 연결을 활성 화 또는 비활성화하도록 구성될 수 있다. 일 실시예에서 모든 칩은 AI 가속기 칩이다. 각 기판의 칩 세트는 복 수의 행으로 구성되고, 각 행마다 동일 수량의 칩을 포함하며 각 칩은 양방향 인쇄 회로 기판 (PCB) 배선을 통 해 인접한 칩에 연결된다. 일 실시예에서, 칩 토폴로지는 복수의 행과 복수의 열로 배열된 칩을 포함하고, 각 행 또는 각 열의 칩은 데이 지 체인 (daisy-chain) 방식으로 연결되어 양방향 물리적 링을 형성한다. 각 물리적 링에 있어서, 각 행 또는 각 열의 양 끝부분에 위치하는 칩은 케이블 연결을 통해 서로 연결된다. 케이블 연결은 가속기의 캐시 일관성 인터커넥트 (CCIX; Cache Coherent Interconnect for Accelerators) 연결일 수 있다. 일 실시예에서, 각 패널은 두개의 행으로 배치된 짝수의 칩을 포함할 수 있다. 각 행의 끝부분에 위치하는 칩은 두개 또는 복수의 칩-투-칩 케이블 인터페이스를 구비할 수 있고, 나머지 칩들은 각각 하나 또는 복수의 칩-투- 칩 케이블 인터페이스를 구비할 수 있다. 각 칩은 칩의 각 측면에 적어도 하나의 칩-투-칩 케이블 또는 PCB 배 선 인터페이스를 구비한다. 도 1은 실시예에 따른 AI 모델 훈련에 사용되는 시스템의 일 예를 나타낸다. 도 1에 도시된 바와 같이, 상기 시 스템은 복수의 서버 (예컨대, 서버 A와 서버 B)에 배포된 GPU 클러스터를 포함하고, 여기서 각 각의 서버는 하나 또는 복수의 CPU를 포함하며, 각각의 CPU는 하나 또는 복수의 GPU와 같은 DP 가속기와 연관된 다. 서버는 이더넷을 통해 서로 통신하는 CPU와 CPU를 포함한다. 도 1의 예시적인 시스템에서, 각 CPU는 복수의 GPU를 구비할 수 있고, 상기 복수의 GPU는 PCIe 스위치를 통해 CPU에 연결된다. 예를 들어, 서 버 A에서 GPU, GPU 및 GPU는 PCIe 스위치 A를 통해 CPU A에 연결되고; 서버 B에서 GPU, GPU 및 GPU는 PCIe 스위치 B를 통해 CPU B에 연결된다. CPU와 CPU는 신경망을 훈련시키기 위해 이더넷과 같은 프로세서간 링크를 통해 서로 통신할 수 있다. 예를 들어, 작업 명령어는 이더넷을 통해 각 서버에 배포될 수 있다. 이어서, 작업 명령어는 서버의 CPU로부터 상기 CPU에 연결된 GPU에 배포될 수 있다. 작업 명령어가 일단 배포되면, 시스템의 GPU간 데이터는 대응하는 프로세서간 링크 또는 CCIX (Cache Coherent Interconnect for Accelerators; 가속기의 캐시 일관성 인터커넥트) 호환성 연결과 같은 연결을 통해 전송될 수 있다. 단방향 링 토폴로지를 사용할 수도 있으나, 시스 템의 GPU는 도 1과 같이 양방향 링 토폴로지로 배치되었다. CCIX는 CCIX 컨소시엄(CCIX Consortium)에서 개발한 오픈 캐시 일관성 인터커넥트 아키텍처(open cache coherent interconnect architecture)이다. CCIX는 표준 PCIe에 대한 캐시 일관성 확장을 통해 중앙 처리 장치 (예컨대, CPU)와 다양한 가속기(예컨대, GPU) 사이의 통신을 간소화하도록 설계되었다. CCIX는 이기종 시스템 아키텍처(heterogeneous system architectures)에 캐시 일관성 프레임워크를 제공하는 고성능 칩-투-칩 인터커 넥트 아키텍처이다. 시스템 내 중앙 처리 장치와 다른 여러 가속기 사이의 캐시 일관성은 항상 자동으로 유지된 다. 각각의 CCIX 지원 장치는 임의의 기타 CCIX 지원 장치와 핀 호환(pin-compatible)이 되는 적어도 하나의 CCIX 포트를 포함한다. CCIX는 칩-투-칩, 칩-스위치-칩, 메시(mesh), 데이지 체인, 링과 같은 대규모 토폴로지 를 지원한다. 일 실시예에서 GPU는 파이프라인 방식으로 대응하는 CPU로부터 배포된 데이터 블록에 대해 AI 훈련 작업을 수행 한다. 또한 각각의 GPU는 프로세서 간 링크를 통해 서로 통신한다. GPU는 링 형태로 배치됨으로써, 업스트림 GPU의 처리 결과를 수신하여 데이터를 추가적으로 처리하도록 한다. 각 GPU는 처리 결과를 대응하는 다운스트림GPU에 전송하여 해당 GPU에서 추가적 처리를 진행하도록 할 수 있다. 따라서 각 GPU는 그에 할당된 DP 작업을 병행으로 수행하고 해당 DP 결과를 다운스트림 GPU에 전송한다. 동시에, 각 GPU는 업스트림 GPU로부터 처리 결 과를 수신하여 추가적 처리를 진행한다. 도 2A 내지 도 2F는 실시예에 따른 AI 모델 훈련 과정의 데이터 전송에 대한 예시적인 프로세스를 나타낸다. 본 명세서에서 3개의 GPU인 GPU, GPU 및 GPU를 표시하였으나, 예시적인 프로세스는 훈련하고자 하 는 신경망의 복잡성, 트레이닝 데이터의 크기 및 사용자가 원하는 훈련 속도 등 여러가지 요소에 따라 최대한 많은 GPU(예컨대, 수천 개의 GPU)를 사용할 수 있다. 예시적인 시스템에서 훈련할 수 있는 신경망의 예에는, 서로 연결된 뉴런의 집합을 포함하는 다층 퍼셉트론 (MLP; multilayer perceptron) 신경망이 포함된다. 하나의 층에 있는 각각의 뉴런이 파라미터(예컨대, 가중치와 바이어스)에 의해 다음 층의 각각의 뉴런에 연결됨으로써 MLP 신경망의 뉴런은 완전 연결될 수 있다. 신경망 모델을 훈련시키는 동안, 신경망 모델의 예상 값과 신경망 모델의 실제 출력간 차이를 최소화하기 위해 경사 하강법(즉, 역전파)으로 파라미터 집합을 결정할 수 있다. 경사 하강에는 손실/오차 함수의 그레디언트를 계산하고, 상기 그레디언트에 대응하여 기존 파라미터를 업데이트하는 단계가 포함된다. 손실 함수가 최소값에 도달할 때까지 상기 사이클을 반복할 수 있다. 일 실시예에서, 신경망 모델에 대한 트레이닝 데이터 세트는 다수의 서브 세트으로 나뉠 수 있으며, 각 서브 세 트는 GPU 중 하나에서의 신경망 모델 훈련에 사용되어, 신경망 훈련이 복수의 GPU에 의해 병행으로 수행될 수 있도록 한다. 각 GPU는 신경망 모델의 전체 사본을 가질 수 있다. 트레이닝 데이터 세트의 각 서브 세트는 동일한 크기의 여러 데이터 블록으로 논리적으로 나뉠 수 있다. 예시적 인 프로세스에서 블록 수는 GPU 수와 같을 수 있다. 신경망 모델의 병렬화 훈련은 경사 하강에 대한 다중 반복 을 요구한다. 각 반복에서, 각 GPU는 상기 GPU의 데이터에서 신경망 모델의 순전파를 실행하고, 이어서 오차 역 전파를 실행함으로써 네트워크 파라미터 대비 손실 그레디언트를 계산한다. 그 다음, GPU는 서로 통신하여 그레 디언트의 통계값(예컨대, 평균값, 최대값 또는 최소값)을 계산하고, 통계결과(예컨대, 평균 그레디언트)를 적용 하여 업데이트된 파라미터를 획득한다. 신경망 모델은 대량의 파라미터(예컨대, 수십억 개의 파라미터)를 가질 수 있으며, 각 파라미터는 그레디언트 값과 연관될 수 있다. 이와 같이 신경망에 있어서 그레디언트의 크기는 매우 클 수 있고, GPU 간 그레디언트의 전송은 대량의 대역폭을 점용할 수 있다. 도 2A 내지 도 2F를 참조하면, 예시적인 프로세스에서 GPU간 데이터 전송에 필요한 대역폭 요구량을 줄이는 알 고리즘을 보여준다. 일 실시예에서, 본원에 사용된 대역폭은 주어진 네트워크 연결에서의 데이터 전송 최대 속 도이다. 상기 알고리즘은 두 가지 프로세스를 포함할 수 있다. 첫번째 프로세스는 Scatter-Reduce 프로세스이고 두번째 프로세스는 Allgather 프로세스이다. Scatter-Produce 프로세스 동안, GPU는 모든 GPU가 대량의 최종 결 과로 마감될 때까지 데이터를 교환할 수 있다. Allgather 프로세스 동안, GPU는 모든 GPU가 완전한 최종 결과로 마감될 때까지 상기 대량의 결과들을 교환할 수 있다. 각 GPU는 상기 GPU의 트레이닝 데이터 세트의 서브 세트를 동일한 크기의 데이터 블록으로 분할하도록 구성된 하나 또는 복수의 애플리케이션을 포함할 수 있고; 예시적인 시스템에서 각 GPU 상의 데이터 블록 수는 GPU의 수와 동일하다. 신경망 모델을 훈련시키는 동안 각 데이터 블록은 자체의 그레디언트 집합을 생성할 수 있다. 위에서 설명한 바와 같이, 상기 실시예에서, 시스템에 3개의 GPU가 존재하므로 각 GPU의 데이터 블록의 수량은 3개이다. GPU#0에서의 트레이닝 데이터 서브 세트으로부터 3개의 그레디언트 a0, b0, c0를 생성할 수 있고; GPU #1에서의 트레이닝 데이터 서브 세트으로부터 3개의 그레디언트 a1, b1, c1를 더 생성할 수 있다. 마찬가지로, GPU#2에서의 트레이닝 데이터 서브 세트으로부터 3개의 그레디 언트 a2, b2, c2를 생성할 수 있다. 일 실시예에서, 각 GPU의 서로 다른 그레디언트 집합들은 어 레이 또는 기타 데이터 구조로 저장될 수 있다. 예를 들어, 상기 알고리즘은 트레이닝 데이터 세트의 각 서브 세트에 의해 생성된 그레디언트를 합산하여, 알고 리즘 완성 시 각 GPU가 트레이닝 데이터 세트으로부터 생성된 그레디언트의 총합을 가지도록 설계되었다. 예시적인 프로세스의 GPU는 Scatter-Reduce 프로세스 동안 N-1 회의 반복 작업을 수행할 수 있으며, 여기서 N은 시스템의 총 GPU 수이다. 따라서 예시적인 시스템의 GPU는 2 회 반복을 수행할 수 있다. 각각의 반복에서, 각 GPU는 GPU상의 그레디언트 집합을 우측으로 인접한 GPU에 전송하고, 좌측으로 인접한 GPU로부터 그레디언트 집 합을 수신하며, 상기 두 그레디언트 집합을 합산하여 새로운 그레디언트 집합을 생성한다. 각 반복에서, 각 GPU가 송수신하는 그레디언트 집합은 서로 다르고; n번째 GPU는 n번째 그레디언트 집합을 전송하는 것으로 시작하 여 (n-1)번째 그레디언트 집합을 수신한 후 역처리를 진행한다. 도 2A 내지 도 2C는 Scatter-Reduce 프로세스를 나타낸다. 도 2A는 Scatter-Reduce 프로세스의 제1 반복에서의 데이터 전송을 나타낸다. 제1 전송 및 제1 수신이 완료된 후, 각 GPU는 두 개의 서로 다른 GPU에서의 두 그레디 언트 집합의 합을 나타내는 값을 가진 어레이 요소를 갖게 된다. 예를 들어, GPU의 제1 요소 a1은 제2 GPU와 제1 GPU의 그레디언트 집합의 합을 포함할 수 있다. 도 2B는 Scatter-Reduce 프로세스의 제2 반복에서의 데이터 전송을 나타내며, 또한 Scatter-Reduce 프로세스의 제1 반복이 완료된 후의 중간 합계를 보 여준다. 제2 반복에서 Scatter-Reduce 프로세스는 계속되며, Scatter-Reduce 프로세스가 끝나는 시점에서(즉, 본 예에서 제2 반복 이후), 각 GPU는 모든 GPU에 걸쳐 대응하는 어레이 요소의 모든 그레디언트의 합을 포함하 는 하나의 어레이 요소를 갖게 된다. 도 2C는 Scatter-Reduce 프로세스 종료 시의 최종 상태를 보여준다. 도 2D 내지 도 2F는 Scatter-Reduce와 동일하게 진행이 되고 마찬가지로 N-1 회 반복을 진행하는 Allgather 프 로세스를 나타낸다. 다만, GPU가 수신한 그레디언트를 누적하는 것이 아니라, 수신된 그레디언트가 수신 GPU의 대응하는 어레이 요소 중의 그레디언트를 커버한다는 것에 차이점이 있다. 도 2D는 Allgather 프로세스의 제1 반복에서의 데이터 전송을 나타낸다. 도 2E에서와 같이 제1 반복 완료 후, 각 GPU는 모든 GPU를 거친 대응하는 어레이 요소의 모든 그레디언트의 합을 각각 포함하는 2개의 어레이 요소를 갖게 된다. 도 2E는 제2 반복에서의 Allgather 프로세스, 즉 예시적인 프로세스의 마지막 반복을 나타낸다. 도 2F와 같이, Allgather 프로세스 종료 시 GPU는 전체 트레이닝 데이터 세트에 따른 완전 누적된 그레디언트를 갖게 된다. 모든 데이터 전송은 이산 반 복에서 동시에 발생하므로 예시적인 프로세스는 대역폭에 최적화된다. 도 3은 실시예에 따른 AI 칩 토폴로지 구축에 사용되는 시스템의 일 예를 나타낸다. 도 1과 같이, 클라우드 환 경에서 AI 가속기 칩 클러스터를 제공할 수 있다. AI 칩 클러스터는 기판 A, 기판 B, 기판 C 및 기판 N과 같이 대량의 PCB 기판을 포함할 수 있다. 도면에서는 4 개의 기판을 도 시하였으나, AI 칩 클러스터는 임의 수량의 PCB 기판을 포함할 수 있다. 칩 클러스터 중 각 PCB 기판은 동일한 수량의 AI 칩을 포함한다. 상기 도면에서는 기판 A의 AI 칩 A, 기판 B의 AI 칩 B, 기판 C의 AI 칩 C 및 기판 N의 AI 칩 N과 같이, 각 기판 상의 AI 칩의 예를 보여준다. 각 PCB 기판에 위치하는 칩은 동일한 배열로 구성되고, PCB 배선(307, 309, 313, 315, 321, 323, 331, 333)을 통해 서로 연결된다. 예를 들어, 각 PCB는 두개의 행으로 배치된 짝수개(예컨대, 8개)의 AI 칩을 포함할 수 있다. 각 행의 AI 칩은 PCB 배선을 통해 순차적으로 연결될 수 있고, 한개의 행에 위치한 각 AI 칩은 다른 한 행에 위치한 대응 AI 칩 에 연결될 수 있다. AI 칩 클러스터의 PCB 기판은 케이블 연결을 통해 서로 연결될 수 있고, 케이블 연결은 초기에 비활성화 상태일 수 있다. 각 케이블 연결의 끝부분은 대응되는 기판 자체가 아닌 PCB 기판 상의 대응 AI 칩이다. 각 AI 칩은 복수의 상호 연결 인터페이스를 구비할 수 있고, 각 상호 연결 인터페이스는 케이블 연결 또는 PCB 배선을 통해 연결될 수 있다. 그러나 각 AI 칩은 케이블 연결을 위한 적어도 하나의 상호 연결 인터페이스를 구비할 수 있고, 이는 기타 PCB 기판의 AI 칩과의 연결에 사용된다. 일 실시예에서, 서로 수평인 임의의 두 PCB 기판 사이의 케이블 연결(333, 335, 337, 339)의 수는 PCB 기판의 AI 칩 행의 수와 동일할 수 있고, 서로 수직인 임의의 두 PCB 기판 사이의 케이블 연결(341, 345, 347, 349, 351, 353)의 수는 PCB 기판의 AI 칩 열의 수와 동일할 수 있다. AI 칩 사이의 각 PCB 배선들은 유선으로 연결된 것으로 동적으로 연결 해제하는 것은 불가능하다. 그러나 PCB 기판 사이의 각 케이블 연결(예컨대, CCIX 연결)은 프로그래밍을 통해 연결 해제 또는 재연결할 수 있다. 케이 블 연결의 연결 해제 또는 재연결은 케이블 연결과 관련된 하나 또는 복수의 PCB 기판에서 실행되는 하나 또는 복수의 프로그램 명령어로 실행될 수 있다. 도 3에서 사용자는 AI 가속기 칩 클러스터에 기설정된 개수의 AI 칩을 갖는 AI 칩 토폴로지의 구축에 대한 요청을 전송할 수 있다. 서비스형 플랫폼(PaaS; Platform as a Service) 형태로 클라우드 환경을 여 러 태넌트(tenants)에게 제공할 수 있다. 사용자도 태넌트 중 하나일 수 있다. 상기 요청은 하나 또는 복수의 서버에서 실행되는 토폴로지 구축 소프트웨어 프로그램으로부터 수신할 수 있다. 토폴로지 구축 로직은 요청 정보를 AI 가속기 칩 클러스터 중 하나 또는 복수의 PCB 기판에서실행되는 프로그램 명령어 세트로 전환하기 위해 설정된 알고리즘을 구현할 수 있다. 토폴로지 구축 소프트웨어 프로그램은 PCB 기판의 idle 상태 또는 busy 상태를 포함한 AI 가속기 칩 클러스터의 각 PCB 기판의 상태를 추적할 수 있다. PCB 기판이 idle 일 경우, PCB 기판은 태넌트가 사용하고 있지 않는다. 토폴로지 구축 로직은 규칙 집합을 구현함으로써, 수신한 토폴로지 구축 요청을 만족시키기 위해 어떤 방식으로 하나 또 는 복수의 PCB 기판을 선택할 것인지를 결정할 수 있다. 예를 들어, 토폴로지 구축 소프트웨어 프로그램은 AI 가속기 클러스터를 스캔하고 요청된 AI 칩 토폴 로지의 구축에 사용될 임의의 idle PCB 기판을 표식할 수 있다. 대안적으로, 상기 PCB 기판의 이용 가능할 때까 지 남은 시간이 설정 범위 내에 있고 상기 PCB 기판이 요청된 토폴로지를 구축하기 위해 선택된 PCB 기판보다 더 가까운 곳에 위치할 경우, 토폴로지 구축 소프트웨어 프로그램은 하나 또는 복수의 PCB 기판에서 대기 할 수 있다. 예시적으로, 사용자가 32-칩 토폴로지를 구비한 토폴로지를 구축할 것을 요청하는 경우, 토폴로지 구축 소 프트웨어 프로그램은 다양한 방식으로 토폴로지를 구축할 수 있다. 토폴로지는 기판 A 및 기판 B; 기판 C 및 기판 N; 기판 A 및 기판 C; 및 기판 B 및 기판 N를 포함할 수 있다. 요청된 토폴로지를 구축 시, PCB 기판에 선택에 사용되는 설정 알고리즘 및/또는 규칙에 따라, 토폴로 지 구축 소프트웨어 프로그램은 상기 4개의 옵션 중 임의의 하나를 선택할 수 있다. 도 4는 실시예에 따른 AI 칩의 일 예를 나타낸다. 도 4와 같이 AI 칩은 4개의 칩-투-칩 상호 연결 인터페 이스(402, 403, 405, 407)를 포함할 수 있다. 일 실시예에서 AI 칩은 4개 이상의 상호 연결 인터페이스를 구비할 수 있다. 각 칩-투-칩 상호 연결 인터페이스는 PCIe, CCIX 또는 Interlaken과 같은 임의의 산업 표준 인터페이스일 수 있 다. 상호 연결 버스(411, 415, 513, 417)는 각 상호 연결 인터페이스와 함께 사용할 수 있다. 각 상호 연결 버 스는 케이블 또는 PCB 배선일 수 있고, 각 상호 연결 버스 상의 데이터 전송은 단방향 또는 양방향일 수 있다. 도 5는 실시예에 따른 PCB 기판의 일 예를 나타낸다. 도 5와 같이 PCB 기판은 두개의 행으로 배열된 짝수 개의 AI 칩(예컨대, 8개)(501 내지 515)을 포함하고 각 행에는 동일한 수의 AI 칩이 배치된다. 한 쌍의 AI 칩은 PCB 배선, 케이블 연결 또는 양자의 조합으로 연결될 수 있다. 예를 들어, AI 칩과 AI 칩은 PCB 배선 및 케이블 연결을 통해 연결되고, AI 칩과 AI 칩은 PCB 배선만 이용하여 연결된다. 일 실시예에서 각 행의 양 끝부분에 위치한 AI 칩(예컨대, AI 칩, AI 칩, AI 칩, AI 칩) 은 각각 2개의 상호 연결 케이블 인터페이스를 구비할 수 있고, 나머지 AI 칩은 각각 하나의 상호 연결 케이블 인터페이스를 구비할 수 있다. 예시적인 PCB 의 AI 칩은 2개의 양방향 물리적 링(503, 504)으로 구성되어, All-Reduce 알고리즘에서의 AI 모델 훈련 동안 데이터의 교환에 사용될 수 있다. 각 물리적 링은 모두 양방향이므로 2개의 물리적 링은 4개 의 논리적 링으로 동작할 수 있다. AI 모델 훈련, 특히 일부 알고리즘(예컨대, All-Reduce 알고리즘)에서 대량의 링(물리적 또는 논리적 링)은 대 량의 훈련 과정을 병행으로 수행하여 AI 모델의 훈련을 가속화하고 훈련에 필요한 시간을 감소할 수 있음을 의 미한다. PCB 기판 상에서의 AI 칩 배치, PCB 기판 배선과 케이블 연결을 조함하여 사용함으로써 이러한 PCB 기판에 의해 구축된 복수의 AI 칩 토폴로지는 과도한 하드웨어 오버해드 없이, 토폴로지의 물리적 링의 수량을 최대화 할 수 있으며, 다양한 크기의 토폴로지를 구축하는 유연성을 유지할 수 있다. 도 6은 실시예에 따른 AI 칩 토폴로지의 일 예를 나타낸다. 도면과 같이 16-칩 토폴로지는 2개의 PCB 기판 (602, 604)으로 구성되고, 각 PCB 기판은 두개의 행으로 배치된 8개의 AI 칩을 포함한다. 일 실시예에서 도 5에 나타낸 바와 같이, AI 칩 토폴로지에 단일 PCB 기판이 포함되는 경우, 2개의 양방향 물리 적 링을 형성할 수 있다. 그러나 도 6과 같이 하나 이상의 이러한 PCB 기판으로 AI 칩 토폴로지를 구축할 경우 AI 칩 토폴로지에 물리적 링을 형성하는 방식은 다를 수 있다. 도 6에서 토폴로지는 전체적으로 4개의 행 및 4개의 열을 포함할 수 있다. PCB 배선 및 케이블 연결을 통 해 각 행을 연결하여 양방향 물리적 링을 구축할 수 있다. 케이블 연결은 열 끝부분 2개의 AI 칩의 연결에 사용 된다. 링(601 내지 607)은 4개 행의 AI 칩으로 구축된 4개의 물리적 링을 표시한다.토폴로지 중 4개 열의 AI 칩은 4개의 분리된 물리적 링(609, 611, 613, 615)을 더 형성한다. 그러나, 각 열은 물리적 링을 구축하기 위해 복수의 케이블 연결이 필요하다. 예를 들어, 물리적 링의 경우, 제1 케이 블 연결은 AI 칩과 AI 칩을 연결하고, 제2 연결은 AI 칩 열 끝부분에 위치한 2개의 AI 칩 인 AI 칩과 AI 칩을 연결한다. 케이블 연결 및 PCB 배선을 혼합하여 구축한 16-칩 토폴로지는 서버 랙의 전원 용량이 지원할 수만 있다면, 서버 랙 내에서 보다 큰 토폴로지(예컨대, 64-칩 또는 128-칩)로 수직으로 확장될 수 있다. 단일 서버 랙이 그의 전원 공급의 풀 용량으로 동작하게 되면, 16-칩 토폴로지는 여러 서버 랙을 거쳐 수평으로 확장 될 수 있다. 도 7은 실시예에 따른 AI 칩 토폴로지의 다른 일 예를 나타낸다. 상술한 바와 같이, AI 칩 토폴로지의 크 기는 단일 서버 랙의 전원 용량의 제한을 받을 수 있다. 하나의 서버 랙의 전원 제한을 극복하기 위해 도 7에서 는 AI 칩을 복수의 수평으로 서버 랙을 걸친 토폴로지를 보여준다. AI 칩 토폴로지는 서로 다른 서버 랙에서 4개의 PCB 기판(701, 703, 705, 707)을 포함할 수 있다. 예를 들어, PCB 기판과 PCB 기판은 제1 서버 랙에 수용될 수 있고, PCB 기판과 PCB 기판은 제2 서버 랙에 수용될 수 있다. 서버 랙의 PCB 기판의 개수는 상기 서버 랙의 전원 용량의 한계에 도달할 때까지 증 가될 수 있다. 칩 토폴로지는 더 많은 서버 랙에 연결됨으로써 수평으로 진일보 확장될 수 있다. 도 8은 실시예에 따른 AI 칩 토폴로지를 구축하는 프로세스의 일 예를 나타낸다. 프로세스는 소프트 웨어, 하드웨어 또는 이들의 조합을 포함할 수 있는 처리 로직으로 수행될 수 있다. 도 8의 동작에서, 처리 로직은 칩 클러스터에서, 지정된 개수의 칩을 포함한 칩 토폴로지를 구축하기 위한 요청을 수신하고, 상기 칩 클러스터는 케이블 연결에 의해 서로 연결된 복수의 기판을 포함하고, 각 기판은 동 일한 개수의 칩을 포함한다. 동작에서, 상기 요청에 응답하여, 처리 로직은 지정된 개수의 칩과 각 기판 상에 위치한 칩 개수에 기반하여, 복수의 기판 중에서 칩 토폴로지를 구축하기 위한 기판 세트를 결정한다. 동 작에서, 처리 로직은 상기 기판 세트 내에서 비활성화된 케이블 연결을 확인한다. 동작에서, 처리 로 직은 상기 케이블 연결을 활성화시킴으로써 요청된 칩 토폴로지를 구축한다. 위에서 도시되고 설명된 바와 같은 구성 요소들 중 일부 또는 전부는 소프트웨어, 하드웨어 또는 이들의 조합으 로 구현될 수 있음에 유의하여야 한다. 예를 들어, 이러한 구성 요소는 영구 저장 장치에 설치 및 저장되는 소 프트웨어로 구현될 수 있으며, 이러한 저장 장치는 프로세서(도시되지 않음)에 의해 메모리에 로드 및 실행되어 본 출원 전체에 기술된 프로세스 또는 동작을 수행할 수 있다. 대안적으로, 이러한 구성 요소들은 집적 회로(예 를 들어, 애플리케이션 특정 IC 또는 ASIC), 디지털 신호 프로세서(DSP), 또는 필드 프로그램 가능 게이트 어레 이(FPGA)와 같은 전용 하드웨어에 프로그래밍되거나 내장된 실행 코드로서 구현될 수 있으며, 이러한 코드는 응 용 프로그램으로부터 해당 드라이버 및/또는 운영 체제를 통해 액세스할 수 있다. 또한, 이러한 구성 요소는 하 나 이상의 특정 명령어를 통해 소프트웨어 컴포넌트에 의해 액세스 가능한 명령어 세트의 일부로서 프로세서 또 는 프로세서 코어에서 특정 하드웨어 로직으로 구현될 수 있다. 전술한 상세한 설명의 일부는 컴퓨터 메모리 내의 데이터 비트에 대한 연산 작업의 알고리즘 및 상징적 표현과 관련하여 제시되었다. 이들 알고리즘적 설명 및 표현은 데이터 처리 분야의 당업자가 그들의 작업 내용을 다른 당업자에게 가장 효과적으로 전달하기 위해 사용하는 방식이다. 여기서 알고리즘은 일반적으로 원하는 결과를 도출하는 자체일관된 (self-consistent) 동작 시퀀스인 것으로 보아야 한다. 작업은 물리적 수량을 물리적으로 조작해야하는 작업을 가리킨다. 이들 및 유사한 용어는 모두 적절한 물리량과 관련되며 이들 수량에 적용되는 편리한 라벨일 뿐이다. 상기 논의 로부터 명백하게 알 수 있듯이 달리 명백하게 언급되지 않는 한, 설명 전반에 걸쳐, 하기 청구 범위에 제시된 것과 같은 용어를 이용한 설명은, 컴퓨터 시스템의 레지스터 및 메모리 내의 물리적 (전자) 수량으로 표현된 데 이터를 컴퓨터 시스템 메모리 또는 레지스터 내의 물리량 또는 유사하게 정보 저장, 전송 또는 디스플레이 장치 내의 물리량으로 표현되는 다른 데이터로 조작 및 변환하는 컴퓨터 시스템 또는 유사한 전자 컴퓨팅 장치의 작 용 및 프로세스를 지칭하는 것으로 이해하여야 한다. 본 개시의 실시예는 또한 본 명세서의 동작을 수행하기 위한 장치에 관한 것이다. 이러한 컴퓨터 프로그램은 비 일시적 컴퓨터 판독 가능 매체에 저장된다. 기계 판독 가능 매체는 기계 (예를 들어, 컴퓨터)에 의해 판독 가능 한 형태로 정보를 저장하기 위한 임의의 메커니즘을 포함한다. 예를 들어, 기계 판독 가능 (예를 들어, 컴퓨터 판독 가능) 매체는 기계 (예를 들어, 컴퓨터) 판독 가능 저장 매체 (예를 들어, 판독 전용 메모리 (\"ROM\"), 랜덤 액세스 메모리 (\"RAM\"), 자기 디스크 저장 매체, 광 저장 매체, 플래시 메모리 장치)를 포함한다. 전술한 도면에 도시된 프로세스 또는 방법은 하드웨어 (예를 들어, 회로, 전용 로직 등), 소프트웨어 (예를 들 어, 비 일시적 컴퓨터 판독 가능 매체에 구현됨), 또는 양자의 조합을 포함하는 처리 로직에 의해 수행될 수 있 다. 위에서 프로세스들 또는 방법들이 일부 순차적 동작들과 관련하여 설명되었으나, 설명된 동작들 중 일부는 다른 순서로 수행될 수도 있음을 이해하여야 한다. 또한, 일부 동작들은 순차적이 아니라 병행으로 수행될 수 있다. 본 개시의 실시예는 임의의 특정 프로그래밍 언어를 참조하여 설명되지 않는다. 본 명세서에 기술된 바와 같이 본 개시의 실시예의 교시를 구현하기 위해 다양한 프로그래밍 언어가 사용될 수 있다는 것이 이해될 것이다. 이상에서 본 출원의 구체적인 실시예에 대해 도시하고 또한 설명하였다. 다음의 청구 범위에 개시된 본 발명의 더 넓은 사상 및 범위를 벗어나지 않고 다양한 변형이 이루어질 수 있음은 명백할 것이다. 따라서, 명세서 및 도면은 한정적인 것이 아니라, 예시적인 것으로 이해해야 한다."}
{"patent_id": "10-2020-7019378", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 발명의 실시예는 도면에서 제한적인 의미가 아닌 예로서 도시되며, 동일한 도면 번호는 유사한 요소를 지칭 한다. 도 1은 실시예에 따른 AI 모델 훈련에 사용되는 시스템의 일 예를 나타낸다. 도 2A 내지 도 2F는 실시예에 따른 AI 모델 훈련 과정에서 데이터 전달에 대한 프로세스의 일 예를 나타낸다. 도 3은 실시예에 따른 AI 칩 토폴로지를 구축하기 위한 시스템의 일 예를 나타낸다. 도 4는 실시예에 따른 AI 칩의 일 예를 나타낸다. 도 5는 실시예에 따른 PCB 기판의 일 예를 나타낸다. 도 6은 실시예에 따른 AI 칩 토폴로지의 일 예를 나타낸다. 도 7은 실시예에 따른 AI 모델 훈련 과정의 일 예를 나타낸다. 도 8은 실시예에 따른 AI 칩 토폴로지를 구축하는 프로세스의 일 예를 나타낸다."}
