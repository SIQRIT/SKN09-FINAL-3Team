{"patent_id": "10-2022-0086963", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0015843", "출원번호": "10-2022-0086963", "발명의 명칭": "게임 응용의 가상 환경 내에서의 루트 생성 시스템", "출원인": "일렉트로닉 아트 아이엔씨.", "발명자": "카터, 벤 폴솜, 주니어."}}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "게임 애플리케이션의 게임 환경 내에서의 루트 생성(route generation)을 위한 컴퓨터 구현 방법으로서,컴퓨터에 의해 실행가능한 명령어들로 구성된(configured with) 하드웨어 프로세서에 의해,게임 환경을 포함하는 게임 애플리케이션을 실행하는 단계 - 상기 게임 환경은 플레이어에 의해 제어되는 적어도 하나의 캐릭터(at least one player-controlled character) 및 논플레이어에 의해 제어되는 복수의 캐릭터(plurality of non-player controlled characters)를 포함하고, 상기 논플레이어에 의해 제어되는 복수의 캐릭터는 상기 게임 애플리케이션에 의해 제어되도록 구성됨 -,루트 데이터베이스(route database)에 저장된 복수의 루트(plurality of routes)에 액세스하는 단계 - 상기 복수의 루트의 각각의 루트는 실세계의 인간(real world person)에 의한, 상기 루트를 따라 행해지는 움직임(movement)으로부터 수집된 데이터에 기초하여 생성됨 -,사용자 컴퓨팅 시스템으로부터 사용자 입력을 수신하는 단계 - 상기 사용자 입력은 게임 내 이벤트(in-gameevent) 동안에 상기 논플레이어에 의해 제어되는 복수의 캐릭터의 적어도 하나에 의해 적어도 하나의 액션(action)이 수행될 것을 요청함 -,상기 사용자 입력에 응답하여, 상기 게임 환경 내에서 논플레이어에 의해 제어되는 제1 캐릭터에 대한 제1 게임내 웨이포인트 경로(first in-game waypoint path)를 결정하는 단계,제1 루트 필터링 기준들(route filtering criteria)을 이용하여 제1 루트와 연관된 특성들에 기초하여 상기 복수의 루트를 필터링하여 제1 루트 서브세트(first subset of routes)라는 결과를 낳는 단계,루트 선택 특성들(route selection characteristics)에 기초하여 상기 제1 루트 서브세트를 분석하는 단계,상기 루트 선택 특성들에 기초하여 상기 제1 루트 서브세트의 제1 루트를 선택하는 단계,상기 제1 루트에 적어도 부분적으로 기초하여 상기 논플레이어에 의해 제어되는 제1 캐릭터에 대한 캐릭터 경로(character path)를 생성하는 단계 - 상기 캐릭터 경로는 출발지점 및 목적지점을 포함하고, 상기 캐릭터 경로는 상기 캐릭터 경로를 따른 상기 논플레이어에 의해 제어되는 제1 캐릭터의 움직임과 연관된 모션 데이터(motion data)를 포함함 -, 및상기 게임 내 이벤트의 개시 전에 상기 논플레이어에 의해 제어되는 제1 캐릭터에 의한 실행을 위해 상기 캐릭터 경로를 출력하는 단계를 포함하는컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 논플레이어에 의해 제어되는 제1 캐릭터의 애니메이션(animation)을 위한 포즈 데이터(pose data)를 상기모션 데이터에 기초하여 생성하는 단계,상기 포즈 데이터에 기초하여 포즈 데이터베이스로부터 포즈(pose)를 선택하는 단계 - 상기 포즈 데이터베이스에 저장된 포즈 데이터는 모션 캡쳐 데이터(motion capture data)에 기초함 -, 및상기 게임 환경 내에서 상기 선택된 포즈를 렌더링하는(rendering) 단계를 더 포함하는컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,공개특허 10-2023-0015843-3-상기 캐릭터 경로를 위한 모션 데이터는, 상기 논플레이어에 의해 제어되는 제1 캐릭터의 움직임과 연관된위치, 방위(orientation), 속도 및 가속도를 포함하는,컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 제1 루트 필터링 기준들은 루트 타입(route type) 또는 상대적 이동각(relative move angle) 중 적어도하나를 포함하는,컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 루트 선택 특성들은, 디펜더들(defenders)까지의 거리, 퍼스트 다운(first down)까지의 거리, 리시버 포지션(receiver position), 최고 속도(max speed), 상대적 이동각, 캐릭터 위치 중 적어도 하나를 포함하는,컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 루트 선택 특성들에 기초하여 상기 제1 루트 서브세트를 분석하는 단계는,상기 경로(path)로부터의 상기 루트의 길이, 루트의 끝에 대한 경로의 끝(end of path relative to end ofroute), 캐릭터 위치 또는 원래의 루트를 달린 경기자(athlete that ran the original route) 중 적어도 하나에 기초하여 점수를 생성하는 단계를 포함하는,컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 캐릭터 경로를 생성하는 단계는,상기 캐릭터 경로를 형성하기 위해 세그먼트(segment)로서의 상기 제1 루트를 절차적으로 생성된 세그먼트(procedurally generated segment)와 결합하는 단계를 포함하는,컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 캐릭터 경로의 절차적으로 생성된 세그먼트는 실세계 경로 데이터(real world pathing data)에 적어도 부분적으로 기초하여 생성되는,컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,상기 루트 선택 특성들(route selection characteristics)에 기초하여 상기 제1 루트 서브세트를 분석하는 단계는,정의된 임계값을 만족하지 않는 루트들을 폐기하는 단계를 더 포함하는,컴퓨터 구현 방법.공개특허 10-2023-0015843-4-청구항 10 제1항에 있어서,상기 캐릭터 경로는 포즈 궤적 매칭 경로(pose trajectory matching path)인,컴퓨터 구현 방법."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "컴퓨팅 시스템으로서,게임 애플리케이션을 실행하도록 구성된 컴퓨터 판독가능 명령어 및 복수의 루트를 포함하는 루트 데이터베이스를 저장하도록 구성된 데이터 저장 저장장치(data store storage device) - 상기 루트들의 각각은 실세계의 인간에 의한, 상기 루트를 따라 행해지는 움직임으로부터 수집된 데이터에 기초하여 생성됨 -,상기 게임 애플리케이션을 실행하도록 구성된 프로세서를 포함하고,상기 게임 애플리케이션은 게임 환경을 생성하도록 구성되고, 상기 게임 애플리케이션은,사용자 컴퓨팅 시스템으로부터 사용자 입력을 수신하고 - 상기 사용자 입력은 게임 내 이벤트 중에 논플레이어에 의해 제어되는 복수의 캐릭터의 적어도 하나에 의해 적어도 하나의 액션이 수행될 것을 요청함 -,상기 사용자 입력에 응답하여, 상기 게임 환경 내에서 논플레이어에 의해 제어되는 제1 캐릭터에 대한 제1 게임내 웨이포인트 경로를 결정하고,제1 루트 필터링 기준들을 이용하여 제1 루트와 연관된 특성들에 기초하여 상기 복수의 루트를 필터링하여 제1루트 서브세트라는 결과를 낳고,루트 선택 특성들에 기초하여 상기 제1 루트 서브세트를 분석하고,상기 루트 선택 특성들에 기초하여 상기 제1 루트 서브세트의 제1 루트를 선택하고,상기 제1 루트에 적어도 부분적으로 기초하여 상기 논플레이어에 의해 제어되는 제1 캐릭터에 대한 캐릭터 경로를 생성하고 - 상기 캐릭터 경로는 출발지점 및 목적지점을 포함하고, 상기 캐릭터 경로는 상기 캐릭터 경로를따른 상기 논플레이어에 의해 제어되는 제1 캐릭터의 움직임과 연관된 모션 데이터를 포함함 -, 그리고상기 게임 내 이벤트의 개시 전에 상기 논플레이어에 의해 제어되는 제1 캐릭터에 의한 실행을 위해 상기 캐릭터 경로를 출력하도록 구성된 루트 생성 엔진(route generation engine)을 포함하는, 컴퓨팅 시스템."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항에 있어서,상기 프로세서는,상기 논플레이어에 의해 제어되는 제1 캐릭터의 애니메이션을 위한 포즈 데이터를 상기 모션 데이터에 기초하여생성하고,상기 포즈 데이터에 기초하여 포즈 데이터베이스로부터 포즈를 선택하고 - 상기 포즈 데이터베이스에 저장된 포즈 데이터는 모션 캡쳐 데이터에 기초함 -, 그리고상기 게임 환경 내에서 상기 선택된 포즈를 렌더링하도록 더 구성되는,시스템."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서,상기 캐릭터 경로를 위한 모션 데이터는, 상기 논플레이어에 의해 제어되는 제1 캐릭터의 움직임과 연관된위치, 방위, 속도 및 가속도를 포함하는,시스템.공개특허 10-2023-0015843-5-청구항 14 제11항에 있어서,상기 제1 루트 필터링 기준들은 루트 타입 또는 상대적 이동각 중 적어도 하나를 포함하는,시스템."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서,상기 루트 선택 특성들은, 디펜더들까지의 거리, 퍼스트 다운까지의 거리, 리시버 포지션, 최고 속도, 상대적이동각, 캐릭터 위치 중 적어도 하나를 포함하는,시스템."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서,상기 프로세서는,루트 선택 특성들에 기초하여 상기 루트 서브세트를 분석할 때, 상기 경로(path)로부터의 상기 루트의 길이, 루트의 끝에 대한 경로의 끝(end of path relative to end of route), 캐릭터 위치 또는 원래의 루트를 달린 경기자(athlete that ran the original route) 중 적어도 하나에 기초하여 점수를 생성하도록 더 구성되는,시스템."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제11항에 있어서,상기 프로세서는,상기 캐릭터 경로를 생성할 때, 상기 캐릭터 경로를 형성하기 위해 세그먼트로서의 상기 제1 루트를 절차적으로생성된 세그먼트와 결합하도록 더 구성되는,시스템."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,상기 캐릭터 경로의 절차적으로 생성된 세그먼트는 실세계 경로 데이터에 적어도 부분적으로 기초하여생성되는,시스템."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제11항에 있어서,상기 프로세서는,상기 루트 선택 특성들에 적어도 부분적으로 기초하여, 정의된 임계값을 만족하지 않는 루트들을 폐기하도록 더구성되는,시스템."}
{"patent_id": "10-2022-0086963", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제11항에 있어서,상기 캐릭터 경로는 포즈 궤적 매칭 경로인,공개특허 10-2023-0015843-6-시스템."}
{"patent_id": "10-2022-0086963", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "여기에 기술되는 시스템들과 프로세스들은, 게임 환경 내에서 실제 루트 데이터(route data)에 기초한 동적이고 현실적인 루트 생성을 제공할 수 있다. 본 시스템은 스포츠 시뮬레이션 게임 응용과 같이 사용하기 위한 루트 데이터베이스를 생성하는 것을 제공한다. 본 개시는 또한 게임 응용의 실행시간 동안의 루트들의 생성을 제공한 다. 본 루트 생성 시스템은 운동 선수들의 실생활 운동에 기초하여 현실적이고 살아있는 듯한 루트들을 생성하 는 문제를 해결하도록 도울수 있다."}
{"patent_id": "10-2022-0086963", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은, 게임 애플리케이션의 가상 환경 내에서의 루트 생성 시스템에 관한 것이다."}
{"patent_id": "10-2022-0086963", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "비디오 게임들에 있어서, 게임 애플리케이션은, 게임 내 캐릭터들(in-game characters)이 목적지에 도달하기 위 해 가상 환경들(virtual environments)을 통해 움직일, 축구 게임(football game)에서의 패스 루트(pass route)와 같은 루트들(routes)을 생성할 수 있다. 일반적으로, 게임 내에서의 루트들은 출발점(start point)과 종점(end point)을 가진다. 예를 들어, 축구 게임에서, 각각의 게임 내 캐릭터는 할당된 패스 루트의 시작부터 끝까지의 정의된 선형 경로(defined linear path)를 따라갈 수 있다. 더욱 복잡한 게임들에서는, 게임 애플리 케이션은 게임 환경 내에서의 수많은 서로 다른 게임 내 캐릭터들을 위한 루트들을 생성하도록 구성될 수 있다. 예를 들어, 비디오 게임은, 개별적인 플레이들(individual plays)을 위해 서로 다른 패스 루트들을 달리는 다수 의 서로 다른 캐릭터들을 위한 루트들을 생성하고 있을 수 있다. 본 개시의 시스템들, 방법들 및 장치들은 각기 여러가지의 혁신적인 측면들을 가지는데, 이들의 어떠한 개개의 것도 단독으로 여기에 개시된 바람직한 특질들의 모두에 대한 원인이 되는 것이 아니다. 일 실시예는 게임 애플리케이션(game application)의 게임 환경(game environment) 내에서의 루트 생성(route generation)을 위한 컴퓨터 구현 방법을 개시하는데, 이 방법은, 컴퓨터에 의해 실행가능한 명령어들로 구성된 (configured with) 하드웨어 프로세서에 의해, 게임 환경을 포함하는 게임 애플리케이션을 실행하는 단계 - 상 기 게임 환경은 플레이어에 의해 제어되는 적어도 하나의 캐릭터(at least one player-controlled character) 및 논플레이어에 의해 제어되는 복수의 캐릭터(plurality of non-player controlled characters)를 포함하고, 상기 게임 내 캐릭터들(in-game characters)은 상기 게임 애플리케이션에 의해 제어되도록 구성됨 -, 루트 데이 터베이스(route database)에 저장된 복수의 루트(plurality of routes)에 액세스하는 단계 - 상기 복수의 루트 의 각각의 루트는 실세계의 인간(real world person)에 의한, 상기 루트를 따라 행해지는 움직임(movement)으로 부터 수집된 데이터에 기초하여 생성됨 -, 사용자 컴퓨팅 시스템으로부터 사용자 입력을 수신하는 단계 - 상기 사용자 입력은 게임 내 이벤트(in-game event) 동안에 상기 논플레이어에 의해 제어되는 복수의 캐릭터의 적어 도 하나에 의해 적어도 하나의 액션(action)이 수행될 것을 요청함 -, 상기 사용자 입력에 응답하여, 상기 게임 환경 내에서 논플레이어에 의해 제어되는 제1 캐릭터에 대한 제1 게임 내 웨이포인트 경로(first in-game waypoint path)를 결정하는 단계, 제1 루트 필터링 기준들(route filtering criteria)을 이용하여 제1 루트와 연관된 특성들에 기초하여 상기 복수의 루트를 필터링하여 제1 루트 서브세트(first subset of routes)라는 결 과를 낳는 단계, 루트 선택 특성들(route selection characteristics)에 기초하여 상기 제1 루트 서브세트를 분석하는 단계, 상기 루트 선택 특성들에 기초하여 상기 제1 루트 서브세트의 제1 루트를 선택하는 단계, 상기 논플레이어에 의해 제어되는 제1 캐릭터에 대한 캐릭터 경로(character path)를 생성하는 단계 - 상기 캐릭터 경로는 상기 제1 루트에 적어도 부분적으로 기초한 출발지점(start point) 및 목적지점(destination point)을 포함하고, 상기 캐릭터 경로는 상기 제1 경로를 따른 상기 논플레이어에 의해 제어되는 제1 캐릭터의 움직임과 연관된 모션 데이터(motion data)를 포함함 -, 및 상기 게임 내 이벤트의 개시 전에 상기 논플레이어에 의해 제 어되는 제1 캐릭터에 의한 실행을 위해 상기 캐릭터 경로를 출력하는 단계를 수행한다. 몇몇 실시예들에서, 상기 방법은, 상기 논플레이어에 의해 제어되는 제1 캐릭터의 애니메이션(animation)을 위 한 포즈 데이터(pose data)를 상기 모션 데이터에 기초하여 생성하는 단계, 상기 포즈 데이터에 기초하여 포즈 데이터베이스(pose database)로부터 포즈(pose)를 선택하는 단계 - 상기 포즈 데이터베이스에 저장된 포즈 데이 터는 모션 캡쳐 데이터(motion capture data)에 기초함 -, 및 상기 가상 환경 내에서 상기 선택된 포즈를 렌더 링하는(rendering) 단계를 포함한다. 몇몇 실시예들에서, 상기 제1 캐릭터 경로를 위한 모션 데이터는 위치 (position), 방위(orientation), 속도(speed) 및 가속도(acceleration)를 포함한다. 몇몇 실시예들에서, 상기 제1 루트 필터링 기준들은 루트 타입(route type) 또는 상대적 이동각(relative move angle) 중 적어도 하나를포함한다. 몇몇 실시예들에서, 상기 루트 선택 특성들은, 디펜더들(defenders)까지의 거리, 퍼스트 다운(first down)까지의 거리, 리시버 포지션(receiver position), 최고 속도(max speed), 상대적 이동각, 캐릭터 위치 중 적어도 하나를 포함한다. 몇몇 실시예들에서, 상기 루트 선택 특성들에 기초하여 상기 루트 서브세트를 분석하 는 단계는, 상기 경로(path)로부터의 상기 루트의 길이, 루트의 끝에 대한 경로의 끝(end of path relative to end of route), 캐릭터 위치 또는 원래의 루트를 달린 경기자(athlete that ran the original route) 중 적어 도 하나에 기초하여 점수(score)를 생성하는 단계를 포함한다. 몇몇 실시예들에서, 상기 캐릭터 경로를 생성하 는 단계는, 상기 캐릭터 경로를 형성하기 위해 세그먼트(segment)로서의 상기 선택된 루트를 절차적으로 생성된 세그먼트(procedurally generated segment)와 결합하는 단계를 포함한다. 몇몇 실시예들에서, 상기 캐릭터 경 로의 절차적으로 생성된 세그먼트는 실세계 경로 데이터(real world pathing data)에 기초하여 생성된다. 몇몇 실시예들에서, 상기 루트 선택 특성들(route selection characteristics)은 정의된 임계값(defined threshol d)을 만족하지 않는 루트들을 폐기한다. 몇몇 실시예들에서, 상기 캐릭터 경로는 포즈 궤적 매칭 경로(pose trajectory matching path)이다. 다른 실시예는 컴퓨팅 시스템을 개시한다. 본 컴퓨팅 시스템은, 게임 애플리케이션을 실행하도록 구성된 컴퓨 터 판독가능 명령어 및 복수의 루트를 포함하는 루트 데이터베이스를 저장하도록 구성된 데이터 저장 저장장치 (data store storage device) - 상기 루트들의 각각은 실세계의 인간에 의한, 상기 루트를 따라 행해지는 움직 임으로부터 수집된 데이터에 기초하여 생성됨 -, 상기 게임 애플리케이션을 실행하도록 구성된 프로세서를 포함 한다. 여기서 상기 게임 애플리케이션은 게임 환경을 생성하도록 구성되고, 상기 게임 애플리케이션은, 사용자 컴퓨팅 시스템으로부터 사용자 입력을 수신하고 - 상기 사용자 입력은 게임 내 이벤트 동안에 논플레이어에 의 해 제어되는 복수의 캐릭터의 적어도 하나에 의해 적어도 하나의 액션이 수행될 것을 요청함 -, 상기 사용자 입 력에 응답하여, 상기 게임 환경 내에서 논플레이어에 의해 제어되는 제1 캐릭터에 대한 제1 게임 내 웨이포인트 경로를 결정하고, 제1 루트 필터링 기준들을 이용하여 제1 루트와 연관된 특성들에 기초하여 상기 복수의 루트 를 필터링하여 제1 루트 서브세트라는 결과를 낳고, 루트 선택 특성들에 기초하여 상기 루트 서브세트를 분석하 고, 상기 루트 선택 특성들에 기초하여 상기 제1 루트 서브세트의 제1 루트를 선택하고, 상기 논플레이어에 의 해 제어되는 제1 캐릭터에 대한 캐릭터 경로를 생성하고 - 상기 캐릭터 경로는 상기 제1 루트에 적어도 부분적 으로 기초하는 출발지점 및 목적지점을 포함하고, 상기 캐릭터 경로는 상기 제1 경로를 따른 상기 논플레이어에 의해 제어되는 제1 캐릭터의 움직임과 연관된 모션 데이터를 포함함 -, 그리고 상기 게임 내 이벤트의 개시 전 에 상기 논플레이어에 의해 제어되는 제1 캐릭터에 의한 실행을 위해 상기 제1 경로를 출력하도록 구성된 루트 생성 엔진(route generation engine)을 포함한다. 몇몇 실시예들에서, 상기 루트 생성 엔진은, 상기 논플레이어에 의해 제어되는 제1 캐릭터의 애니메이션을 위한 포즈 데이터를 상기 모션 데이터에 기초하여 생성하고, 상기 포즈 데이터에 기초하여 포즈 데이터베이스로부터 포즈를 선택하고 - 상기 포즈 데이터베이스에 저장된 포즈 데이터는 모션 캡쳐 데이터에 기초함 -, 그리고 상기 가상 환경 내에서 상기 선택된 포즈를 렌더링하도록 더 구성된다. 몇몇 실시예들에서, 상기 제1 캐릭터 경로를 위한 모션 데이터는 위치(position), 방위(orientation), 속도(speed) 및 가속도(acceleration)를 포함한다. 몇몇 실시예들에서, 상기 제1 루트 필터링 기준들은 루트 타입(route type) 또는 상대적 이동각(relative move angle) 중 적어도 하나를 포함한다. 몇몇 실시예들에서, 상기 루트 선택 특성들은, 디펜더들(defenders)까지의 거리, 퍼스트 다운(first down)까지의 거리, 리시버 포지션(receiver position), 최고 속도(max speed), 상대 적 이동각, 캐릭터 위치 중 적어도 하나를 포함한다. 몇몇 실시예들에서, 상기 루트 생성 엔진은, 루트 선택 특성들에 기초하여 상기 루트 서브세트를 분석할 때, 상기 경로(path)로부터의 상기 루트의 길이, 루트의 끝에 대한 경로의 끝(end of path relative to end of route), 캐릭터 위치 또는 원래의 루트를 달린 경기자 (athlete that ran the original route) 중 적어도 하나에 기초하여 점수(score)를 생성하도록 더 구성된다. 몇몇 실시예들에서, 상기 루트 생성 엔진은, 캐릭터 경로를 생성할 때, 상기 캐릭터 경로를 형성하기 위해 세그 먼트(segment)로서의 상기 선택된 루트를 절차적으로 생성된 세그먼트(procedurally generated segment)와 결 합하도록 더 구성된다. 몇몇 실시예들에서, 상기 캐릭터 경로의 절차적으로 생성된 세그먼트는 실세계 경로 데 이터(real world pathing data)에 기초하여 생성된다. 몇몇 실시예들에서, 상기 루트 선택 특성들(route selection characteristics)은 정의된 임계값(defined threshold)을 만족하지 않는 루트들을 폐기한다. 몇몇 실시예들에서, 상기 캐릭터 경로는 포즈 궤적 매칭 경로(pose trajectory matching path)이다. 특정 실시예들과 예들이 여기에 개시되지만, 본 발명의 주제는 구체적으로 개시된 실시예들에서의 예들을 넘어 서서 다른 대안적 실시예들 및/또는 용도들에까지 그리고 그 변형들 및 균등물들에까지 미친다."}
{"patent_id": "10-2022-0086963", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "개관 비디오 게임들에서 직면하는 문제들 중 하나는, 게임 내의 캐릭터들이 달리는 루트들이 일반적으로 대단히 생생 하지는 않다는 것이다. 예를 들어, 캐릭터들은 완전히 일직선으로 움직일 것이고 부자연스럽게 정확한 각도로 방향을 바꿀 것이다. 캐릭터들은, 일반적으로, 현실에서는 가능하지 않은 속도로 가속하고 움직이기도 한다. 이는 현실적이지 않고 생생하지 않은 움직임과 애니메이션(animations)을 초래할 수 있다. 스포츠 시뮬레이션 (sports simulations)과 같은 게임들에서, 이는 게임 내에서의 몰입감과 현실감을 약화시킬 수 있다. 뿐만 아 니라, 스포츠 또는 시뮬레이션 게임들에서 캐릭터들을 위해 사용되는 로코모션의 움직임들과 애니메이션들 (locomotion movements and animations)의 많은 것들은, 동일 또는 유사한 액션들(actions)을 수행하는 사람들 의 모션 캡쳐 움직임들(motion capture movements)에 기초한다. 애니메이션들을 위해 사용되는 모션 캡쳐 데이 터는, 게임 내에서의 캐릭터들의 부자연스러운 움직임들, 속도들 및 가속도들로 인해 게임들에서의 캐릭터들의 움직임에 부합되기 어려울 수 있는데, 이는 게임에 의해 생성되는 현실적인 시뮬레이션을 더욱 약화시킬 수 있 다. 이 문제의 측면들에 대한 한 해결책은, 게임 내에서의 캐릭터의 루트들이 실생활 게임들에서 경기자들 (athletes)에 의해 수행된 실제의 루트들에 기반하도록 하는 것이다. 이러한 접근책을 따르는데 있어서의 문제 점들 중 하나는 게임 내의 경기자들이 달리는 루트들(routes that are run by athletes within a game)과 연관 된 데이터를 캡쳐하는 것이다. 한가지 선택은 비디오 데이터를 분석하여 게임 내의 경기자들이 달린 루트들을 결정하는 것이다. 그러나, 비디오 추적 기술(video tracking technology)을 가지고도, 게임 내의 경기자들의 움직임에 관한 정확한 정보를 얻는 것이 어려울 수 있다. 여기에서 더 기술될 다른 선택은 경기자들에 위치하 는 추적 장치들(tracking devices)을 이용하여 게임 동안에 경기자들의 데이터를 추적하는 것이다. 예를 들어, 경기자들은 그들의 신발, 숄더 패드(shoulder pads), 글러브(gloves) 또는 축구공, 라켓(racquet), 하키 스틱 (hockey stick), 배트(bat) 또는 공과 같은 다른 게임 장비에 추적 칩들(tracking chips)을 가지고 있을 수 있 다. 추적 칩들은 게임 동안에 각각의 경기자에 대한 원격측정(telemetry) 데이터를 모으기 위해 사용될 수 있 다. 이 원격측정 데이터는 게임 동안에 경기자들의 움직임을 평가하고 경기자들이 달리고 있는 루트들을 식별 하기 위해 사용될 수 있다. 그 다음, 루트들이 분석되고 게임 애플리케이션 내의 가상 캐릭터들(virtual characters)이 따라갈 수 있는 가용 루트들(available routes)의 데이터베이스에 추가될 수 있다. 원격측정 데 이터는 축구(football) 게임 내의 플레이(play)와 같은 정의된 이벤트 간격들(defined event intervals)에 따 른 섹션들(sections)로 분할될 수 있다. 이벤트 간격의 길이가 불확정적일 수 있기 때문에, 원격측정 데이터는 각각의 경기에 대한 시작 시간 및 종료 시간을 포함할 수 있다. 각각의 루트에 대한 원격측정 데이터는, 궤적(trajectory), 속도(speed), 가속도(acceleration) 및 위치 (position)와 같은, 루트 동안에 선수(player)가 수행하는 구체적인 움직임들을 식별할 수 있는 물리적인 루트 데이터(physical route data)를 포함할 수 있다. 각각의 루트에 대한 원격측정 데이터는, 해당 루트를 달린 게 임뿐만 아니라 경기자들과 연관된 메타데이터(metadata)를 가질 수 있다. 예를 들어, 메타데이터는 특정 경기중에 루트를 달리는, 게임 내의 특정 경기자를 식별할 수 있다. 메타데이터는, 경기자의 팀 또는 상대팀 (opposing team)에서의 다른 경기자들의 위치와 같은, 게임 내의 다른 경기자들에 관련된 정보를 추가로 포함할 수 있다. 메타데이터는, 게임 애플리케이션의 실행시간 동안에 게임 애플리케이션에 의해 고를 루트(route to pick)를 식별하고 결정하기 위해 사용될 수 있는 부가적 상황 데이터(additional contextual data)로서 사용될 수 있다. 원격측정 데이터는 처리되어서 실행시간 동안에 게임 애플리케이션에 의해 사용될 수 있는 서브경로(subpath)로 서 데이터베이스에 저장될 수 있다. 서브경로는, 게임 애플리케이션의 실행시간 동안에 캐릭터들에 의해 실행 될 수 있는 더욱 현실적인 달리기 루트들(running routes)을 생성하기 위해 게임 애플리케이션에 의해 사용될 수 있다. 이는 게임 동안의 더욱 현실적인 달리기 루트들 그리고 생성된 게임의 루트들과 연관된 더욱 현실적 인 애니메이션들이라는 결과를 가져올 수 있다. 이 데이터베이스는 게임 애플리케이션 상에 자체적으로 (locally) 설치될 수 있는데, 이는 게임 애플리케이션 동안에 데이터베이스가 사용될 수 있도록 해준다. 게임 애플리케이션의 실행시간 동안에, 경기의 시작 이전과 같은, 각각의 이벤트 간격에서, 사용자는 게임 애플 리케이션 내에서 실행하기 위한 경기를 선택하기 위해 게임 애플리케이션에 입력을 제공할 수 있다. 캐릭터에 의한 이러한 경기의 실행은 사용자에 의해 제어되지 않는 팀상에서의 경기자들을 포함할 수 있다. 이러한 캐릭 터들은, 사용자가 제어권을 가질 때까지 캐릭터들의 실행을 제어하는 게임 애플리케이션의 인공지능(artificial intelligence: AI) 제어기에 의해 제어된다. 게임 애플리케이션은 사용자에 의해 제공된 입력에 기초하여 루트 들을 캐릭터들에 할당한다. 예를 들어, 사용자에 의해 선택된 경기는 사용자의 팀에 있는 캐릭터들에게 3개의 서로 다른 패스 루트들(pass routes)을 할당할 수 있다. 그 다음, 게임 애플리케이션은 할당된 루트(들)에 기 초하여 가상 환경 내의 캐릭터(들)에 대한 웨이포인트 경로들(waypoint paths)을 생성할 수 있다. 루트 생성 엔진(route generation engine)은, 초기 루트 게이팅 기준들(route gating criteria)을 만족하는 총 가용 루트들(total available routes)의 서브세트를 식별하기 위해 데이터베이스에 질의할 수 있다. 루트 게이 팅 기준들은 루트의 타입 및/또는 방향을 만족하지 않는, 루트 데이터베이스에 있는 대부분의 루트들을 제거하 기 위해 사용될 수 있다. 예를 들어, 게이팅 기준들은 경사진 루트(slant route)가 아닌 모든 루트들을 제거할 수 있다. 그 다음, 할당된 루트에 대한 최상의 매치(best match)인 루트들을 식별하기 위해 나머지 루트 서브 세트(subset of routes)에 점수를 매길 수 있다. 루트에 대한 최상의 매치를 선택하기 위해 사용되는 복수의 서로 다른 선택 기준이 있을 수 있다. 루트 데이터베이스로부터 루트가 선택된 후에, 루트 생성 엔진은 루트 데이터에 기초하여 캐릭터에 대한 포즈 궤적 매칭(pose trajectory matching: PTM) 경로를 생성할 수 있다. PTM 경로는, 선택된 루트에서 누락된 임 의의 경로 데이터를 메우기 위한 절차적으로 생성된 경로 데이터 및 선택된 경로를 포함할 수 있다. 예를 들어, 절차적으로 생성된 데이터는 루트 데이터의 끝(end of the route data)을 지나 경로를 연장할 수 있다. PTM 경로는, 각각의 프레임에서 캐릭터의 포즈들을 생성하기 위해 애니메이션 및 렌더링 시스템(animation and rendering system)에 의해 사용되는 움직임 데이터(movement data)를 포함할 수 있다. 예를 들어, 속도, 위치, 방위 및 궤적 정보는, 캐릭터의 로코모션(locomotion)을 애니메이션 데이터베이스에 있는 포즈 데이터에 매칭시키기 위해 사용될 수 있다. 루트와 연관된 데이터가 경기자들의 실제 움직임 특성들에 기초하기 때문에, 애니메이션 시스템은 움직임 데이터를 캐릭터를 위한 포즈 데이터에 더 잘 매칭시킬 수 있다. 이는 게임의 실 행시간 동안에 캐릭터들의 보다 더 생생하고 현실적인 움직임들 및 애니메이션이라는 결과를 가져올 수 있다. 여기에 기술되는 시스템들과 프로세스들은 게임 환경 내에서 실제 루트 데이터에 기초하여 동적이고 현실적인 루트 생성을 제공할 수 있다. 여기서 추가로 설명되는 바와 같이, 본 개시는 스포츠 시뮬레이션 게임 애플리케 이션(sports simulation game application)과 같이 사용하기 위한 루트 데이터베이스(route database)를 생성 하기 위한 시스템에 관한 것이다. 본 개시는 또한 게임 애플리케이션의 실행시간 동안에서의 루트들의 생성을 제공한다. 본 루트 생성 시스템은 경기자들의 실생활 움직임들에 기초하여 현실적이고 생생한 루트들을 생성하 는 문제를 해결하는데 도움을 줄 수 있다. 여기에 기술되는 프로세스들은 일반적으로 축구 게임들에 적용될 것 이지만, 시스템이 실생활의 액션들을 흉내내는 게임 내에서 캐릭터들의 움직임을 제어하고 애니메이션하는 여타 의 스포츠 게임들 또는 애플리케이션들에서 루트들을 생성하기 위해 동일한 시스템들 및 프로세스들이 사용될 수 있다. 예를 들어, 전투에 돌입하는 많은 사람들 또는 캐릭터들의 집단 내에서의 캐릭터들의 움직임들을 제 어하기 위해 본 프로세스가 사용될 수 있다. 본 개시의 목적상, '사용자'(user)라는 용어는 게임 애플리케이션의 동작을 제어하기 위해 컴퓨팅 장치를 운용 하는 사람을 가리킬 수 있다. 본 개시의 목적상, '캐릭터'(character)라는 용어는, 사용자가 게임 애플리케이션 내에서 제어할 수 있는 가상의 아바타(virtual avatar) 또는 캐릭터를 가리킬 수 있다. 캐릭터는 사람, 차 량, 객체 및/또는 사용자가 게임 애플리케이션 내에서 제어할 수 있는 임의의 가상의 엔티티(any virtual entity)일 수 있다. 본 개시의 목적상, '경기자'(athlete)라는 용어는 스포츠 이벤트(sporting event) 또는 다른 실세계의 활동에 출전하는 실세계의 사람(real world person)을 가리킬 수 있다. 비디오 게임 환경의 개관 도 1은 루트 생성 엔진 및 루트 집성 엔진(route aggregation engine)을 구현하기 위한 컴퓨팅 환경 의 실시예를 도시한다. 환경은 네트워크, 복수의 사용자 컴퓨팅 시스템 및 대화형 컴퓨팅 시스템(interactive computing system)을 포함하고, 여기서 대화형 컴퓨팅 시스템은 애플리케이션 호스트 시스템들(application host systems) 및 루트 데이터 저장소(route data store)를 포함한다. 복수의 시스템들이 사용될 수 있지만, 논의를 단순화하고 본 개시를 제한하지 않기 위해, 도 1은 단지 하나의 사용자 컴퓨팅 시스템 및 하나의 대화형 컴퓨팅 시스템을 도시한다. 사용자 컴퓨팅 시스템은 네트워크를 통해 대화형 컴퓨팅 시스템과 통신할 수 있다. 단지 하나 의 네트워크가 도시되어 있지만, 이종의 및/또는 분산된 네트워크들이 다수개 존재할 수 있다. 네트 워크는 임의의 유형의 통신 네트워크를 포함할 수 있다. 예를 들어, 네트워크는 하나 이상의 광역 통신망(wide area network: WAN), 근거리 통신망(local area network: LAN), 셀룰러 네트워크(cellular network), 애드혹 네트워크(ad hoc network), 위성 통신망(satellite network), 유선 통신망(wired network), 무선 통신망(wireless network) 등등을 포함할 수 있다. 몇몇 실시예들에서, 네트워크는 인터넷을 포함할 수 있다. 컴퓨팅 시스템 컴퓨팅 시스템은 컴퓨팅 리소스들(computing resources) 및 애플리케이션 데이터 저장소를 포함 한다. 사용자 컴퓨팅 시스템은, 중앙 처리 유니트들 및 아키텍쳐들(central processing units and architectures), 메모리, 대용량 저장장치(mass storage), 그래픽 프로세싱 유니트(graphics processing units), 통신망 가용성 및 대역폭(communication network availability and bandwidth) 등등과 같은, 다양한 로컬 컴퓨팅 리소스들(local computing resources)을 가질 수 있다. 더욱이, 사용자 컴퓨팅 시스템(10 2)은 임의의 유형의 컴퓨팅 시스템을 포함할 수 있다. 예를 들어, 사용자 컴퓨팅 시스템은, 몇 가지만 말 하자면, 데스크탑, 랩탑, 비디오 게임 플랫폼/콘솔, 텔레비전 셋탑 박스, 텔레비전(예를 들어, 인터넷 TVs), 네 트워크 기반의 키오스크(network-enabled kiosk), 카 콘솔 디바이스(car-console device), 컴퓨터화된 기기 (computerized appliance), 웨어러블 디바이스(예를 들어, 컴퓨팅 기능성을 가진 스마트 워치들 및 안경들), 무 선 이동 디바이스들(wireless mobile devices)(예를 들어, 스마트폰들, PDA들, 태블릿들 또는 그와 유사한 것) 과 같은 임의의 유형의 컴퓨팅 장치일 수 있다. 컴퓨팅 시스템의 실시예의 더욱 상세한 설명은 도 7과 관 련하여 이하에서 제공된다. 게임 애플리케이션 사용자 컴퓨팅 장치는 애플리케이션 데이터 저장소에 적어도 부분적으로 저장된 소프트웨어 코드에 기초하여 게임 애플리케이션을 실행할 수 있다. 게임 애플리케이션은 비디오게임, 게임, 게임 코드 및/또는 게임 프로그램이라 언급될 수도 있다. 게임 애플리케이션은, 컴퓨팅 장치가 사용자가 플레 이할 게임을 제공하기 위해 사용할 수 있는 소프트웨어 코드를 포함하는 것으로 이해되어야 한다. 게임 애플리 케이션은, 컴퓨팅 장치에게 실행할 프로세서 명령어들을 알려주는 소프트웨어 코드를 포함할 수 있으 나, 상수들(constants), 영상들, 루트 정보 및 다른 데이터 구조들과 관련된 데이터와 같은, 게임을 플레이하는 데 있어 사용되는 데이터를 또한 포함할 수 있다. 도시된 실시예에 있어서, 게임 애플리케이션은 게임 엔 진, 게임 데이터, 게임 상태 정보(game state information) 및 루트 생성 엔진을 포함한 다. 몇몇 실시예들에서, 사용자 컴퓨팅 시스템은, 분산 환경(distributed environment)에서 저장될 수 있고 및 /또는 실행될 수 있는 게임 애플리케이션을 실행할 수 있다. 예를 들어, 사용자 컴퓨팅 시스템은 게 임의 일부를 실행할 수 있고, 네트워크 기반의 컴퓨팅 시스템은 게임의 다른 일부를 실행할 수 있다. 예를 들 어, 게임은, 사용자 컴퓨팅 시스템에 의해 실행되는 클라이언트 부분(client portion) 및 하나 이상의 애 플리케이션 호스트 시스템들에 의해 실행되는 서버 부분(server portion)을 포함하는, 다수의 사용자가 경 쟁적으로 또는 협동하여 게임을 플레이하는 축구 게임과 같은 멀티플레이어 스포츠 게임(multiplayer sportsgame)일 수 있다. 게임 엔진 게임 엔진은 컴퓨팅 장치 내에서 게임 애플리케이션의 동작의 양상들(aspects)을 실행하도록 구 성될 수 있다. 게임 애플리케이션 내에서의 게임 플레이의 양상들의 실행은, 수신되는 사용자 입력, 게임 데이 터 및 게임 상태 정보에 적어도 부분적으로 기반할 수 있다. 게임 데이터는 게임 룰들(game rules), 사전 녹화된 모션 캡쳐 포즈들/경로들(prerecorded motion capture poses/paths), 환경 설정들 (environmental settings), 제약조건들(constraints), 골격 모델들(skeleton models), 루트 정보 및/또는 다른 게임 애플리케이션 정보를 포함할 수 있다. 게임 엔진은 게임 룰들에 따라 게임 내에서 게임플레이(gameplay)를 실행할 수 있다. 게임 룰들의 예들은 득점 룰들(rules for scoring), 가능한 입력들(possible inputs), 액션들/이벤트들, 입력들에 응답한 움직임 및 그와 유사한 것들을 포함할 수 있다. 다른 구성 부분들은, 어떤 입력들이 받아들여지는지, 게임이 어떻게 진행되는지 그리고 게임플레이의 다른 양상들을 제어할 수 있다. 게임 엔진은 사용자 입력들을 수신하고, 액션들(actions), 뛰기(jumps), 달리기(runs), 던지기(throws), 공격(attacks) 및 게임 애플리케이션을 위해 적합한 다른 이벤트들과 같은 게임 내 이벤트들(in-game events)을 결정할 수 있다. 실행시간 동작 동안 에, 게임 엔진은 적절한 게임 내 이벤트들을 결정하기 위해 게임 데이터 및 게임 상태 정보를 읽어 들일 수 있다. 일 예에서, 게임 엔진이 캐릭터 이벤트들을 결정한 후에, 캐릭터 이벤트들은, 캐릭터들이 가상 환경 내에 서의 이벤트들과 움직임에 응답하여 취해야 하는 적절한 모션들과 포즈들을 결정할 수 있는 무브먼트 엔진 (movement engine)으로 전달될 수 있다. 무브먼트 엔진은 캐릭터들을 위한 포즈들을 결정하기 위해 모션 매칭 프로세스들(motion matching processes)을 사용할 수 있다. 예를 들어, PTM 경로에 의해 생성된 모션 특성들 (motion characteristics)이 캐릭터의 현실적인 애니메이션을 생성하기 위해 사용될 수 있다. 모션 특성들은, 캐릭터가 PTM 경로를 따라 로코모션(locomotion)을 수행하는 동안에 캐릭터를 위한 포즈들을 선택하기 위해 사 용될 수 있다. 캐릭터에 개한 포즈 선택 프로세스는, 각각의 프레임에서 렌더링할 포즈를 결정하기 위해 포즈 매칭 프로세스(pose matching process)를 사용할 수 있다. 포즈 매칭 프로세스는, 캐릭터에 대한 최상의 매치 인 포즈를 결정하기 위해 경로를 따른 각각의 위치 점(each positional point)에서 캐릭터의 모션 특성들을 사 용할 수 있다. 포즈 매칭 시스템은, 적절한 포즈를 선택하기 위해 속도 및 위치 정보를 포즈 데이터베이스에 있는 포즈들에 매칭할 수 있다. 캐릭터들을 위한 새로운 포즈들이 스키닝 및 렌더링 엔진(skinning and rendering engine)에 제공될 수 있다. 그러면 스키닝 및 렌더링 엔진은, 애니메이션되는(animate), 애니메이션되지 않는(inanimate) 그리고 배경의 객 체들을 전체 장면(full scene)으로 결합하기 위해 캐릭터 영상들을 객체 결합기(object combiner)에 제공할 수 있다. 전체 장면은, 사용자에게 표시하기 위한 새로운 프레임을 생성하는 렌더러(renderer)에게 전달될 수 있 다. 게임 애플리케이션의 실행 동안에 각각의 프레임을 렌더링하기 위해 이 프로세스가 반복될 수 있다. 이 프로세스가 캐릭터와 관련하여 기술되었지만, 이 프로세스는 이벤트들을 처리하고 사용자에게 표시하기 위해 출 력을 렌더링하기 위한 임의의 프로세스에 적용될 수 있다. 게임 데이터 게임 데이터는 게임 룰들(game rules), 사전 녹화된 모션 캡쳐 포즈들/경로들(prerecorded motion capture poses/paths), 환경 설정들(environmental settings), 환경 객체들(environmental objects), 제약조건 들(constraints), 골격 모델들(skeleton models), 루트 정보 및/또는 다른 게임 애플리케이션 정보를 포함할 수 있다. 게임 데이터의 적어도 일부분은 애플리케이션 데이터 저장소에 저장될 수 있다. 몇몇 실시예 들에서, 게임 데이터의 일부분이 수신될 수 있고 및/또는 루트 데이터 저장소(route data store)에와 같이 원격으로 저장될 수 있고, 그러한 실시예들에서, 게임 데이터는 게임 애플리케이션의 실행시간 동안에 수 신될 수 있다. 게임 상태 정보 실행시간 동안에, 게임 애플리케이션은 게임 상태 정보를 저장할 수 있는데, 게임 상태 정보는 게임 상태, 캐릭터 상태들, 환경 상태들, 장면 객체 저장소(scene object storage), 루트 정보 및/또는 게임 애 플리케이션의 실행시간 상태(runtime state)와 연관된 다른 정보를 포함할 수 있다. 예를 들어, 게임 상 태 정보는, 캐릭터 위치, 캐릭터 방위, 캐릭터 액션, 게임 레벨 속성들(game level attributes) 및 게임애플리케이션의 상태에 기여하는 다른 정보와 같은, 특정 시점에서의 게임 애플리케이션의 상태를 식별할 수 있다. 게임 상태 정보는, 캐릭터 움직임 위치들과 같이 끊임없이 변하는 동적 상태 정보 및 게임 내에서의 게임 레벨의 식별(identification)과 같은 정적 상태 정보를 포함할 수 있다. 루트 생성 엔진 루트 생성 엔진은, 게임 애플리케이션 내에서 루트 생성 기능성을 제공하기 위하여 다양한 기능들을 수행할 수 있고 게임 애플리케이션의 실행시간 동안에 동작할 수 있다. 루트 생성 엔진은, 여기서 후술하는 바와 같은 다양한 루트 생성 기능들을 수행하기 위해 게임 데이터에 저장되거나 루트 집성 엔진 으로부터 수신된 루트 정보를 사용할 수 있다. 몇몇 실시예들에서, 루트 생성 엔진은, 게임 애플리케이션 에 대한 업데이트(update)에서와 같이 게임 애플리케이션의 실행 이전에 대화형 컴퓨팅 시스템으로부터 루 트 정보를 수신할 수 있다. 몇몇 실시예들에서, 게임 애플리케이션은 실행시간 동안에 대화형 컴퓨팅 시 스템으로부터 루트 정보를 수신할 수 있다. 그러한 실시예들에서, 루트 생성 엔진은, 실행시간 동안 에 대화형 컴퓨팅 시스템으로부터 수신된 정보에 기초하여 게임 애플리케이션 내에서 루트 정보를 동 적으로 갱신할 수 있다. 루트 생성 엔진은 게임 환경 내에서 동적인 루팅 정보(dynamic routing information)를 제공할 수 있다. 루트 생성 엔진의 기능들은, 사용자로부터의 입력 및 게임 환경 내의 다 른 루트 생성 기능들에 기초하여 게임 애플리케이션의 실행시간 동안에 캐릭터들의 루트들을 동적으로 결정하는 것을 포함할 수 있다. 루트 생성 엔진의 동작의 다양한 측면들이 이하에서 더욱 상세히 설명된다. 대화형 컴퓨팅 시스템 대화형 컴퓨팅 시스템은 하나 이상의 애플리케이션 호스트 시스템들 및 루트 데이터 저장소를 포함할 수 있다. 대화형 컴퓨팅 시스템은 게임 애플리케이션의 일부분을 실행하도록 구성된 하나 이 상의 컴퓨팅 시스템들을 포함할 수 있다. 몇몇 실시예들에서, 하나 이상의 애플리케이션 호스트 시스템들(13 2)은, 게임 애플리케이션의 하나 이상의 인스턴스들(instances)의 일부를 호스트(host)할 수 있고 및/또는 실행할 수 있는 서버들 및 데이터베이스들과 같은, 하나 이상의 컴퓨팅 장치들을 포함할 수 있다. 특정 실시예 들에서, 게임 애플리케이션의 일부를 실행하는 것 대신에 또는 그에 부가하여, 애플리케이션 호스트 시스 템들은, 루트 집성 엔진과 같은, 애플리케이션의 인스턴스의 실행 동안에 애플리케이션을 보완할 수 있고 및/또는 그와 상호작용할 수 있는 다른 애플리케이션을 실행할 수 있다. 애플리케이션 호스트 시스템 대화형 컴퓨팅 시스템은 다수의 사용자 또는 컴퓨팅 시스템들로 하여금 대화형 컴퓨팅 시스템에 의해 실행되거나 호스트되는(hosted) 게임 애플리케이션의 일부에 액세스하도록 할 수 있다. 대화형 컴퓨팅 시 스템은 루트 집성 엔진을 포함할 수 있다. 몇몇 실시예들에서, 호스트 애플리케이션 시스템은 게임 환경의 다양한 양상들을 실행하기 위한 호스트 시스템을 실행할 수 있다. 예를 들어, 일 실시예에서, 게 임 애플리케이션은 게임 환경 내에서의 캐릭터들의 위치를 기록할 수 있다. 몇몇 실시예들에서, 게임 애 플리케이션은, 대화형 컴퓨팅 시스템이 게임 애플리케이션의 인스턴스에 연결되었을 때 부가의 기능성을 제공하는, 싱글 플레이어 게임(single player game)일 수 있다. 예를 들어, 대화형 컴퓨팅 시스템 은, 동일한 게임 애플리케이션을 운용하는 복수의 사용자로부터 수신된 집성된 정보(aggregated information)에 기초하여 추가의 루트 정보를 루트 생성 엔진에 제공할 수 있다. 몇몇 실시예들에서, 애 플리케이션 호스트 시스템은 다수의 게임 인스턴스를 호스트하기 위한 전용 호스팅 서비스(dedicated hosting service)를 제공하거나 사용자 컴퓨팅 장치들에 의해 호스트되는 게임 인스턴스들(game instances)의 생성을 원활하게 할 수 있다. 몇몇 실시예들에서, 호스트 애플리케이션 시스템은 사용자들이 서로 간에 가상적으로 상호작용할 로비(lobby) 또는 다른 환경을 제공할 수 있다. 루트 집성 엔진 루트 집성 엔진은 게임 애플리케이션에 대한 루트 생성 기능성을 제공하기 위한 루트 데이터베이스의 생성을 제공할 수 있다. 루트 집성 엔진은, 게임 애플리케이션의 가상 환경 내에서 사용하기 위해 실세계에 있는 경기자들에 대해 수신된 원격측정 데이터에 기초하여 루트 정보를 집계하고 집성하도록 구성될 수 있다. 루트 정보와 원격측정 데이터는 복수의 외부 시스템 및 데이터 소스들로부터 모아서 집성될 수 있다. 몇몇 실시예들에서, 루트 정보는, 스포츠 이벤트들(sporting events)과 같은 실생활 이벤트들 동안에 원격측정 데이터를 집계하는 제3자 시스템들(third party systems)로부터 모을 수 있다. 예를 들어, 원격측정 데이터는 축구 게임 동안에 경기자들이 차고 있는 데이터 추적 장치들(data tracking devices)에 기초하여 모을 수 있다.루트 집성 엔진은 게임 애플리케이션 내의 가상 환경들에서 루트들을 생성하기 위해 루트 데이터베이 스를 생성하도록 구성될 수 있다. 몇몇 실시예들에서, 게임 애플리케이션은 복수의 게임 환경을 포함할 수 있다. 루트 집성 엔진은 각각의 게임 환경에 대한 루트들을 저장할 수 있다. 루트 집성 엔진은 루트들을 자동으로 생성하기 위해 원격측정 데이터를 사용하도록 구성될 수 있다. 가상 환경 내에서 PTM 경로 들을 생성하기 위해, 자동으로 생성된 루트들이 절차적으로 생성된 루트들(procedurally generated routes)과 결합될 수 있다. 원격측정 데이터는, 게임 애플리케이션 내에서 사용하기 위한 기준들을 만족하지 않는 루트들 의 양상들을 제거하기 위해 조작되고 필터링될 수 있다. 예를 들어, 수신된 루트 데이터는 경기가 끝난 후 일 어나는 경기자에 의한 움직임을 포함할 수 있다. 루트 집성 엔진의 동작의 양상들은 이하에서 더욱 상세 히 논의된다. 루트 데이터 저장소 대화형 컴퓨팅 시스템은, 대화형 컴퓨팅 시스템 및/또는 애플리케이션 호스트 시스템들에 의해 호스트되는 게임 애플리케이션과 연관된 루트 정보를 저장하도록 구성되는 하나 이상의 루트 데이터 저장 소들을 포함할 수 있다. 루트 데이터 저장소는 루트 집성 엔진에 의해 생성되어 집성되는, 게 임 애플리케이션과 연관된 루트 정보를 포함할 수 있다. 루트 정보는, 게임 애플리케이션 내에서 사용가 능하도록 필터링되고 처리될 수 있다. 루트 정보는, 각각의 루트에 대한 물리적인 루트 데이터 및 메타데이터 및 루트 집성 엔진에 의해 사용되는 다른 정보를 포함할 수 있다. 물리적인 루트 데이터는, 위치(예를 들 어, x, y, z, 위치), 경기장(field)에서의 방위(orientation), 속도, 가속도, 게임 내에서 일어나는 이벤트들 (예를 들어, 패스(pass), 태클(tackle), 경계선을 넘음(out of bounds) 등) 및 경로를 따른 경기자의 움직임 동안에 기록되는 다른 정보와 같은, 정의된 간격들에서 택해진 루트(route taken at defined intervals) 동안에 기록된 정보를 제공할 수 있다. 메타데이터는 게임 및 루트와 연관된 정보를 포함할 수 있다. 예를 들어, 메 타데이터는, 경기자의 이름, 경기자의 번호, 경기자의 ID(들), 게임 ID, 경기 ID, 경기자 포지션, 루트 유형, 플레이 방향, 퍼스트 다운까지의 거리, 경기자에 대한 다른 경기자들의 위치들, 및 루트와 연관된 정보와 같은 다른 것들을 포함할 수 있다. 루트 생성 도 2a 내지 도 2c는, 게임 애플리케이션 내에서 사용하기 위한 루트 정보를 생성하기 위해 루트 집성 엔진 에 의해 구현될 수 있는 다양한 기능들과 루틴들(routines)의 실시예들을 도시한다. 루트 집성 엔진은, 게임 애플리케이션 내에서 사용되는 루트 정보를 생성하기 위해 실생활 스포츠 이벤트들 동안에 경기자들에 의 해 생성되는 원격측정 데이터를 집성하고 분석하고 처리하도록 구성될 수 있다. 루트 정보는, 실행시간 동안에 사용하기 위해 루트 집성 엔진에 의해 루트 생성 엔진에 제공될 수 있다. 루트 집성 엔진은, 게임 애플리케이션과 함께 또는 게임 업데이트(game update)에서와 같이 게임 애플리케이션이 설치된 후에 설치하기 위한 루트 정보를 생성하도록 구성될 수 있다. 원격측정 데이터 원격측정 데이터는 제3자 수집 서비스(third party collection service)에 의해 스포츠 이벤트 동안에 경기자들 로부터 수집될 수 있고 처리를 위해 루트 집성 엔진에 제공될 수 있다. 원격측정 데이터는 게임 동 안에 경기자들에 배치된 복수의 추적 장치를 이용하여 경기자들로부터 기록될 수 있다. 예를 들어, 추적 장치 들은 경기자들에 배치한 RFID 태그들 및/또는 공과 같은 게임 내에서의 객체들일 수 있다. 원격측정 데이터는, 전체 경기장(entire playing field) 위에서 펼쳐지는 각각의 경기 동안에 경기자들에 대한 실시간 위치 데이터 (real-time location data), 속도 및 가속도를 캡쳐하기 위해 사용될 수 있다. 예시적인 실시예에서, 스타디움 에 걸쳐 있는 센서들이, 아슬아슬한 개별적인 움직임들(individual movements within inches)을 결정하기 위해 사용될 수 있는, 경기자들의 숄더 패드들 위에 배치된 태그들을 추적한다. 루트를 위한 원격측정 데이터의 예 들이 도 2a에 도시되어 있다. 도 2a에 도시된 바와 같이, 미가공 루트 데이터(raw route data)가 가상 환 경 내에서 그리드 위에 오버레이된다. 각각의 루트에 대한 원격측정 데이터는 물리적인 루트 데이터 및 루트 메타데이터를 포함할 수 있다. 물리적인 루트 데이터는, 위치(예를 들어, x, y, z, 위치), 경기장(fiel d)에서의 방위(orientation), 속도, 가속도, 게임 내에서 일어나는 이벤트들(예를 들어, 패스(pass), 태클 (tackle), 경계선을 넘음(out of bounds) 등) 및 경로를 따른 경기자의 움직임 동안에 기록되는 다른 정보와 같 은, (매 0.1초 마다 또는 다른 시간 주기와 같은) 정의된 간격들에서 택해진 루트(route taken at defined intervals) 동안에 기록된 정보를 포함할 수 있다. 메타데이터는 게임 및 루트와 연관된 정보를 포함할 수 있 다. 예를 들어, 메타데이터는, 경기자의 이름, 경기자의 번호, 경기자의 ID(들), 게임 ID, 경기 ID, 경기자 포지션, 루트 유형, 플레이 방향, 퍼스트 다운까지의 거리, 경기자에 대한 다른 경기자들의 위치들, 및 루트와 연 관된 정보와 같은 다른 것들을 포함할 수 있다. 루트 집성 엔진은 제3 자로부터 수신된 원격측정 데이터 를 집성할 수 있다. 원격측정 데이터는, 게임에서의 각각의 플레이와 같은 각각의 이벤트 주기에 대한 개별적 인 루트들로 세분되는 방대한 수의 데이터 포인트들(data points)을 포함할 수 있다. 서브경로(subpath) 생성 도 2a 및 도 2b는 미가공 루트 데이터로부터 서브경로를 생성하는 것을 도시한다. 도 2a는 그리드 상에 있는 루트를 위한 미가공 원격측정 데이터의 예를 도시한다. 도시된 가상 환경은 경로 데이터 의 시각화를 위해 제공된다. 경로 데이터는, 루트 동안에 데이터가 수집되는 포인트들을 나타내는 시작점 , 경기자 궤적, 경기자 움직임 속도 및 라인들을 포함한다. 예를 들어, 데이터는 매 0.1 초마다 수집될 수 있다. 루트 데이터는 루트 동안에 생성된 게임 이벤트들을 포함한다. 예를 들어, \"pass_forward\"는 쿼터백(quarterback)이 공을 놓았을 때를 나타내고, \"pass_arrived\", \"pass_outcome_caught\" 및 \"out_of_bounds\"가 그 뒤를 따른다. 게임 이벤트는 루트로부터 관련 데이터를 추출하고 게임 애플리케 이션 내에서 루트들을 생성하기 위해 유용하지 않은 루트 데이터를 제거하기 위해 사용될 수 있다. 도시된 바와 같이, 플레이어의 위치는 루트의 끝을 향해서 위로 방향이 바뀌는데(veers upwards), 이는 경기자 가 \"pass_outcome_caught\"에서 공을 잡았고 엔드존(end zone)을 향해 달리기 위해 다운필드(downfield)로 방향 을 바꾸었기 때문이다. 경기자의 속도는 또한 공을 잡을 때 급강하한다. 그 다음 경기자는 \"out_of_bounds\"에 서 경계선을 넘어 달린다. 공을 잡은 후의 경기자의 움직임은 패스 루트(pass route)를 따른 경기자의 움직임 을 더 이상 나타내지 않는다. 따라서, 루트 데이터는, 경기자가 달리고 있는 패스 루트에 관련이 없는 데이터 를 제어하고 폐기하기 위해 처리될 수 있다. 추후 사용을 위해 저장되는 루트의 부분을 서브경로라고 부를 수 있다. 도 2b는, 루트 데이터가 필터링되어 처리된 후에 생성되는 서브경로를 도시한다. 이 경우, 게임 이벤트 \"pass_arrived\" 후에 루트 데이터를 폐기함으로써 서브경로가 생성되었다. 다른 루트들은, 패스를 던지고 잡은 후의, 추가적으로 사용가능한 루트 데이터를 포함할 수 있다. 예를 들어, 경기자는, 패스를 던져서 다른 경기자가 잡은 후에도 패스 루트를 계속 달릴 수 있다. 루트 집성 엔진에 의해 수신된 각각의 루트에 대한 루트 정보는, 루트 데이터베이스에 포함되기 전에 분석되고 필터링되고 처리될 수 있다. 몇몇 실시예들에서, 개발자들은, 각각의 루트가 패스 루트에 관련된 정확한 서브경로를 활용하는 것 을 보장하기 위해, 루트 데이터를 수작업으로 처리할 수 있다. 몇몇 실시예들에서, 시스템은 데이터를 자동으 로 필터링하고 처리하도록 구성될 수 있다. 예를 들어, 루트 집성 엔진은, 예를 들어, 게임 이벤트들, 속 도, 방위 및 궤적과 같은 물리적 루트 데이터 및 메타데이터의 분석에 기초하여 데이터를 필터링하고 폐기하기 위해 원격측정 데이터를 처리하기 위한 알고리즘을 활용할 수 있다. 루트 데이터베이스의 실시예 도 2c는 원격측정 데이터를 필터링하고 처리한 후 루트 데이터베이스 내에서의 루트들의 선택의 실시예를 도시 한다. 루트 데이터베이스의 각각의 행은 게임 애플리케이션 내에서 루트 생성 시스템이 사용하기 위한 단 일의 서브경로에 대응할 수 있다. 서브경로 데이터는 실행시간 루트 생성 동안에 루트 데이터를 필터링하기 위 해 사용될 수 있는 특성들을 포함할 수 있다. 서브경로 특성들은 원격측정 데이터로부터 직접 얻을 수 있고 또 는 원격측정 데이터로부터 유도될 수 있다. 예를 들어, 원격측정 데이터는 루트 동안에 경기자가 도달한 최고 속도를 유도하기 위해 사용될 수 있다. 도시된 실시예에서, 열들(columns)은 서브경로 이름(290A), 경기자 위 치(290B), 최고 경기자 속도(290C), 이동각(movement angle)(290D) 및 퍼스트 다운까지의 거리(290E)에 대한 데이터를 제공한다. 데이터베이스는 원하는 만큼 많은 서브경로 특성들을 포함할 수 있다. 몇몇 실시예들에서, 서브경로 데이터는 미가공 루트 데이터에 포함된 전체 특성들의 서브세트를 포함하는데, 이는 데 이터를 저장하기 위해 필요로 되는 저장 공간 및 실행시간 동안에 서브경로 데이터를 탐색하기 위해 필요로 되 는 처리 능력(processing power)을 줄일 수 있다. 데이터베이스가 완성된 후에, 데이터베이스는 실행시간 동안 에 사용하기 위한 게임 애플리케이션에 포함될 수 있다. 루트 데이터베이스는 애플리케이션의 게임 코드와 함 께 포함될 수 있고 게임에 대한 업데이트 동안에 후에 제공되거나 실행시간 동안에 네트워크를 통해 게임 애플 리케이션에 제공될 수 있다. 루트 데이터베이스 생성 프로세스 도 3은 게임 애플리케이션 내에서 사용하기 위한 루트들의 데이터베이스를 생성하기 위한 프로세스의 흐름도의 실시예를 도시한다. 프로세스는 게임 애플리케이션에 대한 원격측정 데이터를 집성하고 처리할 수 있는임의의 시스템에 의해 구현될 수 있다. 예를 들어, 프로세스는 그 전체 또는 일부가 루트 집성 엔진 , 대화형 컴퓨팅 시스템, 애플리케이션 호스트 시스템 및/또는 다른 시스템에 의해 구현될 수 있다. 임의의 개수의 시스템들의 전체 또는 일부가 프로세스를 구현할 수 있지만, 논의를 단순화하기 위 해, 프로세스는 특정 시스템들과 관련하여 기술될 것이다. 더욱이, 프로세스의 실시예들이 다양한 게임 애플리케이션 환경들을 포함하는 시스템들의 변형들과 관련하여 수행될 수 있지만, 논의를 단순화하기 위 해, 프로세스는 대화형 컴퓨팅 시스템과 관련하여 기술될 것이다. 블록에서, 컴퓨팅 시스템은 원격측정 데이터를 수신한다. 원격측정 데이터는 제3자 수집 서비스에 의해 스포츠 이벤트 동안에 경기자들로부터 수집될 수 있고 처리를 위해 시스템에 제공될 수 있다. 원격측정 데이터 는 스포츠 이벤트 동안에 경기자들에 배치된 복수의 추적 장치를 이용하여 경기자들로부터 기록될 수 있다. 블록에서, 시스템은 원격측정 데이터에 포함된 각각의 루트를 처리한다. 원격측정 데이터는, 축구 게임에 서의 플레이(play)와 같은 이벤트 세그먼트들(event segments)에 의해 분할될 수 있다. 루트 데이터는 이벤트 세그먼트 동안에 기록된 물리적인 루트 데이터 및 연관된 메타데이터를 포함할 수 있다. 예를 들어, 물리적 루 트 데이터는 시작점, 경기자 궤적, 경기자 움직임 속도 및 이벤트 세그먼트에 걸친 정의된 간격들에서 수집된 루트 동안에 생성된 게임 이벤트들을 포함할 수 있다. 몇몇 실시예들에서, 시스템은 개발자가 검토하기 위한 루트 데이터의 시각적 표현(visual representation)을 생성할 수 있다. 블록에서, 시스템은 루트 데이터로부터 서브경로 루트 데이터 자산(subpath route data asset)을 생성할 수 있다. 서브경로 루트 데이터 자산은, 경기자의 패스 루트(pass route)에 관련된 루트 데이터를 추출하기 위 해 루트 데이터를 처리함으로써 생성될 수 있다. 처리는, 분석되는 패스 루트에 관련되지 않은 루트 데이터를 폐기하는 것을 포함할 수 있다. 몇몇 실시예들에서, 개발자들은 패스 루트에 관련된 정확한 서브경로를 식별하 기 위해 루트 데이터를 수작업으로 처리할 수 있다. 몇몇 실시예들에서, 시스템은 데이터를 자동으로 필터링하 고 처리하도록 구성될 수 있다. 예를 들어, 루트 집성 엔진은, 예를 들어 게임 이벤트들, 속도, 방위 및 궤적과 같은 물리적인 루트 데이터 및 메타데이터의 분석에 기초하여 데이터를 필터링하고 폐기하기 위해 원격 측정 데이터를 처리하기 위한 알고리즘을 활용할 수 있다. 블록에서, 시스템은 서브경로 루트 데이터 자산의 특성들을 결정할 수 있다. 시스템은, 루트에서의 경기 자의 최고 속도와 같은 원격측정 데이터에 포함된 특성들에 기초하여 특성들을 유도할 수 있다. 블록에서, 시스템은 루트 데이터베이스에 서브경로 루트를 추가할 수 있다. 루트 데이터베이스는 실행시 간 루트 생성 동안에 루트 데이터를 필터링하기 위해 사용될 수 있는 선택 특성들(selection characteristics) 을 포함하도록 구성될 수 있다. 시스템은 서브경로 루트와 연관된 특성들 또는 데이터의 개수를 줄일 수 있는 데, 이는 루트 데이터베이스의 저장 공간을 줄이는데 도움이 될 수 있다. 예를 들어, 시스템은 게임 애플리케 이션 내에서의 루트의 선택에 관련이 없는 미가공 원격측정 데이터에 포함된 특성들을 제거할 수 있다. 루트 생성 프로세스의 실시예들 도 4는 게임 애플리케이션 내에서의 루트 생성의 양상들을 예시하는 게임 환경의 실시예를 도시한다. 루트 생성 엔진은 루트 데이터베이스에 저장된 서브경로 루트 데이터에 기초하여 게임 환경 내에서 캐릭터 를 위한 경로를 생성하도록 구성된다. 루트 생성 엔진은 더욱 현실적이고 게임 동안에 실제의 경기자들이 달린 경로들에 유사한 서브경로 루트 데이터에 기초하여 루트를 생성할 수 있다. 루트 생성 엔진은 캐릭 터에 할당된 웨이포인트 경로(waypoint path)를 루트 데이터베이스에 저장된 서브경로 루트 데이터와 매칭시킴 으로써 캐릭터를 위한 PTM 경로를 생성하도록 구성된다. 루트 생성 엔진은, 또한 웨이포인트 경로와 부합 되는(matches) 선택된 서브경로 루트 데이터에 포함되지 않은 웨이포인트 루트의 부분들을 보완하기 위한 경로 데이터를 절차적으로 생성하도록 구성된다. 도 4는 가상 게임 환경의 예시적인 인터페이스를 도시한다. 캐릭터는 제1 위치에 위치하고 웨이포인 트 경로를 가진다. 게임 환경은 게임 경기장(game field)에 있는 복수의 다른 캐릭터를 포함한 다. 캐릭터는 게임 환경을 두루 이동하고 사용자에 의해 제공되는 게임 입력에 기초하여 캐릭터에 할당된 웨이포인트 경로를 대체로 따라가도록 구성된다. 예를 들어, 사용자는, 게임 내의 플레이들(plays)을 식별하는 플레이북(playbook)으로부터 웨이포인트 경로를 식별하는 플레이를 선택할 수 있다. 각각의 웨 이포인트 경로는 정의된 유형(예를 들어, 아웃(out), 경사, 코너 등) 및 상대적 이동각(relative move angle) (예를 들어, 경로가 왼쪽으로 가는지 또는 오른쪽으로 가는지의 여부)을 가진다. 웨이포인트 경로는 일련 의 웨이포인트 할당들(waypoint assignments)로부터 구축된다. 각각의 할당은 방향과 거리를 식별할 수 있다.그런 다음, 웨이포인트 경로는 가상 환경 내에서의 위치 데이터(positional data)를 사용하여 웨이포인트 할당들로부터 캐릭터에 대해 생성된다. 예를 들어, 도시된 바와 같이, 경기장을 따라 연장된 다음 경기장을 가 로지르는 90도 좌회전을 포함하는 웨이포인트 경로가 생성된다. 루트 생성 엔진은 서브경로 루트들의 특성들에 기초하여 가용 루트들(available routes)을 필터링할 수 있 다. 초기의 필터링 기준들은 게이팅 기준들(gating criteria)이라고 불려 질 수 있고 생성된 웨이포인트 경로 를 위한 가능한 매치들(possible matches)일 수 있는 루트들의 수를 줄이기 위해 사용된다. 몇몇 실시예들에서, 게이팅 기준들은 루트 유형 및 상대적 이동각을 포함할 수 있다. 웨이포인트 경로를 루트 데이 터베이스 내의 경로들에 매칭하기 위해 시도하는 경우, 루트 생성 엔진은 웨이포인트 경로 유형 및 방향을 만족할 수 없는 데이터베이스에 있는 서브경로 루트들을 제어하기 위해 이 초기 필터링 단계를 수행한다. 루트 들을 필터링하기 위해 사용되는 게이팅 기준들의 예는 도 5a에 추가로 예시된다. 도 5a를 참조하면, 인터페이스는 루트 데이터베이스에 대한 초기 질의(query)를 위해 사용될 수 있는 샘플 게이팅 기준들을 나타낸다. 예시된 실시예에서, 시스템은 게이팅 기준들로서 사용되는 9개의 서로 다른 특성들을 포함한다. 게이팅 기준들의 어느 하나라도 실패하면, 그 서브경로 루트는 웨이포인트 경로에 대한 실 행가능한 매치(viable match)로 여겨지지 않는다. 도시된 바와 같이, 서브경로 루트들의 서브세트는 점수 를 가지고 있고, 그 아래의 서브경로 루트들은 점수를 가지고 있지 않다. 도시된 실시예에서, 가장 높은 점수는 255이고, 0은 실패로 여겨진다. 도시된 인터페이스에서, 서브경로 루트들은, 서브경로 루트의 상 대적 이동각에 대응하는 마지막 게이팅 기준을 만족하지 못했다. 따라서, 서브경로 루트들은 점수가 매겨지지 않았고 웨이포인트 경로에 대한 매치로서 여겨지지 않을 것이다. 루트 생성 엔진은, 생성된 웨이포인트 경로의 특성들을 만족할 수 있는 전체 가용 서브경로 루트들의 서브 세트(subset of the total available subpath routes)를 신속하게 식별하기 위해 필터링 단계를 사용할 수 있 다. 이 프로세스는 전체 서브경로 루트들의 대부분을 제거할 수 있고 남아있는 루트들의 각각에 점수를 매기고 서브경로 루트를 선택하기 위한 계산상의 비용을 상당히 줄인다. 그 다음, 가용 서브경로 루트들의 서브세트는 정의된 루트 선택 기준들을 이용하여 서브경로 특성들에 기초하여 더 분석될 수 있다. 서브경로 루트들이 게임 내 상황에 얼마나 가깝게 매치되는지를 결정하기 위해 각각의 서 브경로 루트의 서브경로 특성들의 하나 이상에 대해 점수를 매기기 위해 선택 기준들이 사용될 수 있다. 도 4 에서의 예시된 실시예에서, 루트들은 선택되지 않았고, 루트가 선택되었다. 채점 기준들(scoring criteria)의 예가 도 5b에 예시되어 있다. 도 5b를 참조하면, 인터페이스는 가능성 있는 매치들(potential matches)의 리스트를 예시한다. 가 능성 있는 매치가 선택되었고 도 4에 라인으로서 도시되어 있다. 매치들은 도 4에 라인들(43 0)에 의해 예시된 가까운 매치들(close matches)이다. 루트 생성 엔진은, 어느 서브경로 루트가 웨이포인 트 경로에 가장 가까이 매칭되는지를 알아내기 위해 물리적인 루트 데이터를 분석한다. 몇몇 실시예들에서, 웨 이포인트 경로로부터의 서브경로 루트의 최대 거리가 기초 점수(base score)로서 사용될 수 있고, 그 다음 기초 점수가, 초기 필터링 단계 동안에 생성된 점수가 얼마나 양호한지 그리고 게임 내 플레이어가 원래의 루트를 달 린 경기자와 부합되는지와 같은 추가의 기준들에 기초하여 수정될 수 있다. 이 단계에서, 채점 기준들은 루트들을 추가로 제거하기 위해 사용될 수 있는 추가의 임계값들(additional thresholds)을 포함할 수 있다. 예를 들어, 서브경로 루트가 정의된 임계값 보다 큰 웨이포인트 경로로부터 최 대 거리를 가지는 경우 루트들이 제거될 수 있다. 도 4를 더 참조하면, 서브경로 루트 및 웨이포인트 경로로부 터 가장 긴 거리의 시각적 표현이 라인들에 의해 예시되어 있다. 서브경로 루트의 레그들(legs)의 하나가 웨이포인트 경로의 모든 레그들과 부합되지 않는 경우, 서브경로 루트들이 또한 제거될 수 있다. 도시된 실시 예에서, 가장 낮은 점수를 가진 서브경로 루트가 서브경로 루트로서 선택된다. 루트 선택 기준들은, 충분히 멀 리 연장되지 않거나 너무 멀리 연장되는 서브경로 루트들을 더 제거할 수 있다. 서브경로 루트가 선택된 후에, 루트 생성 엔진은, 선택된 서브경로 루트에 기초하여 캐릭터를 위한 포즈 궤적 매칭(pose trajectory matching: PTM) 경로를 생성할 수 있다. 루트 생성 엔진에 의해 생성된 PTM 경로는, 서브경로 루트가 웨이포인트 경로의 총 거리와 부합되기 위한 충분한 거리만큼 연장되지 않는 경우들에 대해서 절차적으로 생성된 경로 세그먼트들을 포함할 수 있다. 절차적으로 생성되는 PTM 경로의 세그먼트들은, 모션 캡쳐 데이터(motion capture data)와 같은 실세계 데이터를 이용하여 생성될 수 있다. 플레이가 시작되기 전에 PTM 경로의 생성이 완료된다. 플레이의 시작 시에 캐릭터의 정적인 위치로부터 PTM 경로들이 개시될 수 있다. 루트 생성 엔진은 할당된 웨이포인트 경로 및 선택된 서브경로 루트에 기초하여 각각의 캐릭터에대한 PTM 경로를 생성한다. PTM 경로는, 캐릭터 포즈들을 선택하고 캐릭터의 로코모션 애니메이션들(locomotion animations)을 생성하기 위 해 그래픽 엔진(graphics engine)에 의해 사용되는 모션 특성들(motion characteristics)을 포함한다. PTM에 포함된 모션 데이터는 위치, 속도, 궤적, 방위, 가속도 및 다른 모션 특성들을 포함할 수 있다. PTM 경로는 실 세계 데이터에 기초하여 생성되는 가속도 커브를 사용할 수 있다. 가속도 커브는 PTM 경로를 따른 캐릭터의 움 직임에 대한 기초(basis for movement of the character)로서 기능할 수 있다. PTM 경로는 캐릭터가 달리게 되는 속도를 정의할 수 있는데, 이 속도는 PTM 경로를 달리도록 할당된 캐릭터의 속도에 기초하여 스케일링될 (scaled) 수 있다. 서로 다른 게임 내 캐릭터들의 경우, 일반적으로, 캐릭터가 따르는 위치적 경로(positional path)는 같을 것이나, 캐릭터가 경로의 포인트들(points)을 따라 이동하는 속도는 게임 내 캐릭터의 속도 및/또 는 가속도 특성들에 기초하여 스케일링될 수 있다. 실행시간 동안에, PTM 경로에 의해 생성된 모션 특성들은 캐릭터의 현실적인 애니메이션을 생성하기 위해 사용 될 수 있다. 모션 특성들은 PTM 경로를 따른 캐릭터의 로코모션 동안에 캐릭터를 위한 포즈들을 선택하기 위해 사용될 수 있다. 캐릭터를 위한 포즈 선택 프로세스는 각각의 프레임에서 렌더링할 포즈를 결정하기 위해 포즈 매칭 프로세스(pose matching process)를 사용할 수 있다. 포즈 매칭 프로세스는, 캐릭터를 위한 최상의 매치 인 포즈를 결정하기 위해 경로를 따른 각각의 위치적 포인트(positional point)에서의 캐릭터의 모션 특성들을 사용할 수 있다. 포즈 매칭 시스템은, 적절한 포즈를 선택하기 위해 속도와 위치 정보를 포즈 데이터베이스에 있는 포즈들과 매칭할 수 있다. PTM 경로가 현실적인 속도와 위치 데이터를 포함하기 때문에, 캐릭터를 위한 포즈 데이터는 포즈 데이터베이스에 있는 포즈 데이터에 더 잘 매칭될 수 있다. 이러한 방식으로, 더욱 현실적 인 움직임과 애니메이션이 게임 애플리케이션의 실행시간 동안에 생성될 수 있다. 루트 생성 프로세스 도 6은 게임 애플리케이션의 게임 환경 내에서의 캐릭터들의 루트 생성을 위한 프로세스를 위한 흐름도의 실시 예를 도시한다. 프로세스는 게임 애플리케이션을 실행할(execute and run) 수 있는 임의의 시스템에 의해 구현될 수 있다. 예를 들어, 프로세스는, 그 전체 또는 일부가 게임 애플리케이션, 게임 엔진, 루트 생성 엔진, 대화형 컴퓨팅 시스템, 애플리케이션 호스트 시스템 및/또는 다른 시스템에 의 해 구현될 수 있다. 임의의 개수의 시스템들의 전체 또는 일부가 프로세스를 구현할 수 있지만, 논의를 단순화하기 위해, 프로세스는 특정 시스템들과 관련하여 기술될 것이다. 더욱이, 프로세스의 실시예 들이 다양한 게임 애플리케이션 환경들을 포함하는 시스템들의 변형들과 관련하여 수행될 수 있지만, 논의를 단 순화하기 위해, 프로세스는 컴퓨팅 시스템과 관련하여 기술될 것이다. 블록에서, 루트 생성 엔진은 사용자 컴퓨팅 시스템으로부터 가상 환경 내에서의 하나 이상의 캐릭터 루트 들의 생성을 요구하는 가상 환경 내의 액션을 선택하는 입력을 수신한다. 예를 들어, 사용자는 사용자의 축구 팀에서의 적어도 하나의 캐릭터를 위한 패스 루트들(pass routes)을 포함하는 플레이를 선택할 수 있다. 블록은 가상 환경 내에서 하나 이상의 캐릭터 루트들의 각각을 위한 PTM 경로를 생성하기 위한 서브프로세 스를 나타낸다. 이 프로세스는 사용자에 의해 요청된 액션의 시작 전에 각각의 웨이포인트 경로에 대해 수행된 다. 예를 들어, 이 서브프로세스는 축구 게임 내에서의 플레이의 시작 전에 캐릭터들의 각각에 대해 완료될 수 있다. 블록에서, 루트 생성 엔진은 사용자 입력에 기초하여 요청된 캐릭터 루트들의 각각에 대해 웨이포인트 경 로를 생성한다. 웨이포인트 경로는 일련의 웨이포인트 할당들로부터 구축된다. 각각의 할당은 방향과 거리를 식별할 수 있다. 웨이포인트 경로는 가상 환경 내에서의 위치적 데이터를 이용하여 웨이포인트 할당들로부터 캐릭터에 대해 생성될 수 있다. 블록에서, 루트 생성 엔진은 제1 필터링 기준들에 기초하여 루트 데이터베이스에 저장된 가용 서브경로 루 트들을 필터링하여 가용 서브경로 루트들의 서브세트라는 결과를 낳을 수 있다. 루트 생성 엔진은 가능성 있는 서브경로 루트들(potential subpath routes)을 식별하기 위해 루트 데이터베이스에 질의를 할 수 있다. 루트 생성 엔진은 서브경로 루트들의 특성들에 기초하여 가용 루트들을 필터링할 수 있다. 제1 필터링 기준들은 게 이팅 기준들(gating criteria)이라 불려질 수 있고 생성된 웨이포인트 경로를 위한 가능한 매치들일 수 있는 루 트들의 개수를 줄이기 위해 사용된다. 몇몇 실시예들에서, 게이팅 기준들은 루트 유형과 상대적 이동각을 포함 할 수 있다. 게이팅 기준들의 어느 하나라도 실패하면, 그 서브경로 루트는 웨이포인트 경로에 대한 실행가능 한 매치로 여겨지지 않는다. 가능성 있는 매치들(potential matches)로 여겨지는 서브경로 루트들은 초기 점수(initial score)를 추가로 수신할 수 있다. 블록에서, 루트 생성 엔진은 루트 선택 기준들에 기초하여 가용 서브경로 루트들의 서브세트를 분석한다. 서브경로 루트들이 게임 내 상황에 얼마나 가깝게 매치되는지를 결정하기 위해 각각의 서브경로 루트의 서브경 로 특성들의 하나 이상에 대해 점수를 매기기 위해 선택 기준들이 사용될 수 있다. 몇몇 실시예들에서, 웨이포 인트 경로로부터의 서브경로 루트의 최대 거리가 기초 점수(base score)로서 사용될 수 있고, 그 다음 기초 점 수가, 블록에서의 초기 필터링 단계 동안에 생성된 점수가 얼마나 양호한지에 기초하여 수정될 수 있다. 점수는, 게임 내 플레이어가 원래의 루트를 달린 경기자와 부합되는지와 같은 추가의 기준들에 의해서 수정될 수도 있다. 루트 선택 기준들은 루트들을 추가로 제거하기 위해 사용될 수 있는 추가의 임계값들(additional thresholds)을 포함할 수 있다. 예를 들어, 서브경로 루트가 정의된 임계값 보다 큰 웨이포인트 경로로부터 최 대 거리를 가지는 경우 루트들이 제거될 수 있다. 서브경로 루트의 레그들(legs)의 하나가 웨이포인트 경로의 모든 레그들과 부합되지 않는 경우, 서브경로 루트들이 또한 제거될 수 있다. 채점 기준들은, 충분히 멀리 연 장되지 않거나 너무 멀리 연장되는 서브경로 루트들을 더 제거할 수 있다. 블록에서, 루트 생성 엔진은 루트 선택 특성들에 기초하여 루트를 선택한다. 블록에서, 루트 생성 엔진은 선택된 루트에 기초하여 PTM 경로를 생성한다. PTM 경로는 서브경로 루 트 세그먼트 및 절차적으로 생성된 세그먼트의 조합일 수 있다. PTM 경로는 캐릭터 포즈들을 선택하고 캐릭터 의 로코모션 애니메이션들을 생성하기 위해 그래픽 엔진에 의해 사용되는 모션 특성들을 포함한다. PTM 경로에 포함되는 모션 데이터는 위치, 속도, 궤적, 방위, 가속도 및 다른 모션 특성들을 포함할 수 있다. PTM 경로는 실세계 데이터에 기초하여 생성되는 가속도 커브를 사용할 수 있다. 가속도 커브는 PTM 경로를 따른 캐릭터의 움직임에 대한 기초로서 기능할 수 있다. 블록에서, 루트 생성 엔진은 가상 환경 내에서 실행하기 위한 PTM 경로들을 출력한다. 실행시간 동 안에, PTM 경로에 의해 생성된 모션 특성들은 캐릭터의 현실적인 애니메이션들을 생성하기 위해 사용될 수 있다. 모션 특성들은 PTM 경로를 따른 캐릭터의 로코모션 동안에 캐릭터를 위한 포즈들을 선택하기 위해 사용 될 수 있다. 캐릭터를 위한 포즈 선택 프로세스는 각각의 프레임에서 렌더링할 포즈를 결정하기 위해 포즈 매 칭 프로세스(pose matching process)를 사용할 수 있다. 포즈 매칭 프로세스는 캐릭터에 대한 최상의 매치인 포즈들을 결정하기 위해 경로를 따른 각각의 위치적 포인트에서의 캐릭터의 모션 특성들을 사용할 수 있다. 컴퓨팅 장치의 개관 도 7은 본 개시에 따른 컴퓨팅 장치의 실시예를 도시한다. 컴퓨팅 장치로부터 부품들을 제거하거나 그에 부품들을 추가하는 것과 같은 컴퓨팅 장치의 다른 변형들을 여기에 명시적으로 제시된 예들 대신에 쓸 수 있다. 컴퓨팅 장치는 게임 장치, 스마트폰, 태블릿, 퍼스널 컴퓨터, 랩탑, 스마트 텔레비젼, 카 콘솔 디스플레이(car console display), 서버 및 이와 유사한 것을 포함할 수 있다. 도시된 바와 같이, 컴퓨팅 장치 는 컴퓨팅 장치의 다른 부품들 및 컴퓨팅 장치의 외부에 있는 부품들과 상호작용하는 프로세싱 유 니트를 포함한다. 미디어와 통신하는 미디어 판독기가 포함된다. 미디어 판독기는 CD-ROM 또 는 DVD들과 같은 광 디스크들을 판독할 수 있는 광디스크 판독기 또는 게임 미디어로부터 데이터를 수신하 고 동 데이터를 판독할 수 있는 임의의 다른 유형의 판독기일 수 있다. 컴퓨팅 장치들의 하나 이상은 여기에 개시된 시스템들의 하나 이상을 구현하기 위해 사용될 수 있다. 컴퓨팅 장치는 별도의 그래픽 프로세서를 포함할 수 있다. 몇몇의 경우에 있어서, 그래픽 프로세서 는 프로세싱 유니트에 내장될 수 있다. 그러한 몇몇 경우에, 그래픽 프로세서는 프로세싱 유니트 와 랜덤 액세스 메모리(RAM)를 공유할 수 있다. 대안적으로 또는 부가적으로, 컴퓨팅 장치는 프로세싱 유니트와는 별도인 이산 그래픽 프로세서(discrete graphics processor)를 포함할 수 있다. 그러한 몇몇 경우에, 그래픽 프로세서는 프로세싱 유니트와는 별도의 RAM을 가질 수 있다. 컴퓨팅 장치는 핸드헬드 비디오 게임 장치, 전용 게임 콘솔 컴퓨팅 시스템, 범용 랩탑 또는 데스크탑 컴퓨터, 스마트폰, 태블 릿, 카 콘솔 또는 다른 적절한 시스템일 수 있다. 컴퓨팅 시스템은 또한, I/O, 사용자 I/O, 디스플레이 I/O 및 네트워크 I/O와 같이 입/출 력을 가능하게 하는 다양한 부품들을 포함한다. I/O는 컴퓨팅 장치를 위한 저장 기능을 제공하기 위해 저장 요소와 그리고 장치를 통해 착탈가능한 저장 미디어(removable storage media)와 상호작용한 다. 프로세싱 유니트는, 게임 상태 데이터 및 임의의 공유 데이터 파일들과 같은 데이터를 저장하기 위해 I/O를 통해 통신할 수 있다. 저장 요소 및 착탈가능한 저장 미디어 뿐만 아니라, 컴퓨팅 장치는 또한 ROM(Read-Only Memory) 및 RAM을 포함하는 것으로 도시되어 있다. RAM은, 게임이 플레 이되고 있거나 이상금융거래탐지(fraud detection)가 수행되고 있을 때와 같이, 빈번히 액세스되는 데이터 용으 로 사용될 수 있다. 사용자 I/O는, 프로세싱 유니트 및 게임 컨트롤러들과 같은 사용자 장치들 간에서 명령들(commands)을 송수신하기 위해 사용된다. 몇몇 실시예들에서, 사용자 I/O는 터치스크린 입력들을 포함할 수 있다. 터치스크 린은 용량성 터치스크린, 저항성 터치스크린 또는 촉각 입력들(tactile inputs)을 통해 사용자로부터 사용자 입 력을 수신하도록 구성되는 다른 유형의 터치스크린 기술일 수 있다. 디스플레이 I/O는 플레이되고 있는 게 임으로부터의 영상들을 표시하기 위해 사용되는 입/출력 기능들을 제공한다. 네트워크 I/O는 네트워크를 위한 입/출력 기능들 용으로 사용된다. 네트워크 I/O는, 게임이 온라인으로 플레이되고 있거나 온라인으로 액세스되고 있을 때와 같이 게임의 실행 동안에 사용될 수 있다. 디스플레이 I/O에 의해 생성되는 디스플레이 출력 신호들은, 그래픽, 사용자 인터페이스들, 비디오 및/또는 다른 시각적 컨텐츠와 같은, 컴퓨팅 장치에 의해 디스플레이 장치 상에 생성되는 시각적 컨텐츠를 표시하기 위한 신호들을 포함한다. 컴퓨팅 장치는 디스플레이 I/O에 의해 생성되는 디스플레이 출력 신호들을 수신하도록 구성되는 하나 이상의 통합 디스플레이들(integrated displays)을 포함할 수 있다. 몇몇 실시예들 에 따르면, 디스플레이 I/O에 의해 생성되는 디스플레이 출력 신호들은 또한, 디스플레이와 같은, 컴퓨 팅 장치의 외부에 있는 하나 이상의 디스플레이 장치들로 출력될 수 있다. 컴퓨팅 장치는, 클럭, 플래시 메모리 및 다른 부품들과 같은, 게임과 함께 사용될 수 있는 다른 특 징부들을 또한 포함할 수 있다. 영화와 같은 비디오 시퀀스를 플레이하기 위해 오디오/비디오 경기자가 또 한 사용될 수도 있다. 컴퓨팅 장치에 다른 부품들이 제공될 수 있고 본 기술 분야에 숙련된 자들이라면 컴 퓨팅 장치의 다른 변형들을 인식할 것이라는 점을 이해하여야 한다. 프로그램 코드는, ROM, RAM 또는 (하드 디스크, 다른 자기 저장장치, 광학 저장장치, 다른 비휘발성 저 장장치 또는 이들의 조합 또는 변형을 포함할 수 있는) 저장 요소에 저장될 수 있다. 프로그램 코드의 일 부는 프로그램가능한 ROM(ROM, PROM, EPROM, EEPROM 및 등등)에 저장될 수 있고, 프로그램 코드의 일부는 저장 요소에 및/또는 (CR-ROM, 카트리지, 메모리 칩 또는 그와 유사한 것일 수 있고 네트워크 또는 필요한 다른 전자적 채널을 통해 획득될 수 있는) 게임 미디어와 같은 착탈가능한 미디어 상에 저장될 수 있다. 일반적 으로, 프로그램 코드는 유형의 비일시적 신호 저장 매체(tangible non-transitory signal-bearing medium)에 구현될 수 있다. RAM(및 가능하게는 다른 저장장치)은 변수들 및 필요한 다른 게임 및 프로세서 데이터를 저장하기 위해 사 용될 수 있다. RAM은 애플리케이션의 실행 동안에 생성된 데이터를 보유하기 위해 사용되고, 그 일부분들을 프 레임 버퍼들(frame buffers) 용으로, 애플리케이션 상태 정보 용으로 및/또는 사용자 입력을 해석하고 디스플레 이 출력들을 생성하기 위해 필요로 되거나 사용가능한 다른 데이터 용으로 남겨둘 수도 있다. 일반적으로, RAM은 휘발성 저장장치이고, RAM 내에 저장된 데이터는 컴퓨터 장치가 턴오프되거나 전력 공급을 못 받을 때 손실될 수 있다. 컴퓨팅 장치가 미디어를 판독하고 애플리케이션을 제공할 때, 정보가 게임 미디어로부터 판독되고 RAM과 같은 메모리 장치에 저장된다. 추가적으로, 저장 요소, ROM, 네트워크(도시되지 않음)를 통 해 액세스되는 서버들 또는 착탈가능한 저장 매체로부터의 데이터는 판독되어 RAM에 로드될 수 있다. 데이터가 RAM에 있는 것으로 기술되지만, 데이터가 RAM에 저장될 필요는 없고 프로세싱 유니트에 액세스가능하거나, 미디어 또는 저장 요소와 같은 다양한 매체들 간에 분산되어 있는 다른 메모리에 저 장될 수 있음이 이해될 것이다. 모든 목적들 또는 장점들이 여기에 기술된 임의의 특정 실시예에 따라 반드시 성취될 수 있는 것이 아님을 이해 하여야 할 것이다. 따라서, 예를 들어, 특정 실시예들이, 여기에 교시되거나 암시된 것일 수 있는 다른 목적들 또는 장점들을 반드시 성취하지 않고도 여기에 교시된 하나의 장점 또는 일단의 장점들을 성취하거나 최적화하 는 방식으로 동작하도록 구성될 수 있다는 점을 본 기술 분야에 숙련된 자들은 인식할 것이다. 여기에 기술된 프로세스들의 모두는, 하나 이상의 컴퓨터들 또는 프로세서들을 포함하는 컴퓨팅 시스템에 의해 실행되는 소프트웨어 코드 모듈들로 구현될 수 있고 그를 통해 전자동화될 수 있다. 코드 모듈들은 임의의 유 형의 비일시적 컴퓨터 판독가능 매체 또는 다른 컴퓨터 저장 장치에 저장될 수 있다. 본 방법들의 일부 또는 모두는 전용 컴퓨터 하드웨어(specialized computer hardware)로 구현될 수 있다.여기에 기술된 것들과 다른 많은 변형들이 본 개시로부터 명백해질 것이다. 예를 들어, 실시예에 따라서는, 여 기에 기술되는 알고리즘들의 임의의 알고리즘의 특정 동작들, 이벤트들 또는 기능들이 다른 순서로 수행될 수 있거나 부가될 수 있거나 병합될 수 있거나 또는 함께 제외될 수 있다(예를 들어, 기술된 모든 동작들 또는 이 벤트들이 알고리즘들의 실시를 위해 반드시 필요한 것은 아니다). 더욱이, 특정 실시예들에서는, 동작들 또는 이벤트들이 순차적으로라기 보다 동시에(concurrently), 예를 들어 멀티쓰레드 프로세싱(multi-threaded processing), 인터럽트 프로세싱(interrupt processing) 또는 다수의 프로세서 또는 프로세서 코어(multiple processors or processor cores)를 통해 또는 다른 병렬 아키텍쳐들(parallel architectures) 상에서 수행될 수 있다. 뿐만 아니라, 서로 다른 태스크들(tasks) 또는 프로세스들이 함께 기능할 수 있는 서로 다른 머신들 및/또는 컴퓨팅 시스템들에 의해 수행될 수 있다. 여기에 개시된 실시예들과 관련하여 설명된 다양한 예시적인 논리 블록들 및 모듈들은, 프로세싱 유니트 또는 프로세서와 같은 머신, 디지털 신호 처리기(DSP), 주문형 반도체(ASIC), 필드 프로그래머블 게이트 어레이 (FPGA) 또는 기타 프로그램가능한 논리 장치, 이산 게이트(discrete gate) 또는 트랜지스터 논리회로, 이산 하 드웨어 소자들 또는 여기에 기술된 기능들을 수행하기 위해 설계된 전술한 것들의 임의의 조합에 의해 구현되거 나 수행될 수 있다. 프로세서는 마이크로프로세서일 수 있으나, 대안적으로 이 프로세서는 제어기, 마이크로제 어기 또는 상태 머신, 이들의 조합들 또는 이와 유사한 것들일 수 있다. 프로세서는, 컴퓨터에 의해 실행가능 한 명령어들을 처리하도록 구성된 전기 회로를 포함할 수 있다. 다른 실시예에서, 프로세서는, 컴퓨터에 의해 실행가능한 명령어들을 처리하지 않고 논리 동작들을 수행하는 FPGA 또는 기타 프로그램가능한 장치를 포함한다. 프로세서는 또한, 컴퓨팅 장치들의 조합, 예를 들어 DSP 및 마이크로프로세서의 조합, 복수의 마이 크로프로세서, DSP 코어와 협력하는 하나 이상의 마이크로프로세서 또는 기타 임의의 그러한 구성으로서 구현될 수 있다. 여기서는 주로 디지털 기술과 관련하여 기술되었지만, 프로세서는 주로 애널로그의 소자들을 포함할 수도 있다. 예를 들어, 여기에 기술된 신호 처리 알고리즘들의 일부 또는 전부는 애널로그 회로 또는 애널로그 및 디지털 혼합 회로(mixed analog and digital circuitry)로 구현될 수 있다. 컴퓨팅 환경은, 몇 가지만 말 하자면 마이크로프로세서에 기반한 컴퓨터 시스템, 메인프레임 컴퓨터, 디지털 신호 처리기, 휴대용 컴퓨팅 장 치, 디바이스 컨트롤러 또는 기구 내의 계산 엔진(computational engine within an appliance)을 포함하나 이 들에 제한되지 않는 임의의 형태의 컴퓨팅 시스템을 포함할 수 있다. '다른 것들도 있지만 그 중 특히'(among others), '할 수 있다'(can), '할 수 있다'(could), '할(일) 수도 있 다'(might) 또는 '할(일) 수 있다'(may)와 같은 조건적 언어(conditional language)는, 특히 달리 명시하지 않 는 한, 특정의 특징들, 요소들 및/또는 단계들을 다른 실시예들은 포함하지 않는 한편 특정 실시예들이 포함한 다는 것을 전달하기 위해 해당 문맥 내에서 일반적으로 사용되는 것으로 이해된다. 따라서 이러한 조건적 언어 는, 특징들, 요소들 및/또는 단계들이 어찌 되었든 하나 이상의 실시예들을 위해 필요하다거나, 이러한 특징들, 요소들 및/또는 단계들이 임의의 특정 실시예에 포함되거나 그러한 실시예에서 수행되어야 하는지를 사용자 입 력 또는 프롬프팅(prompting)을 가지고 또는 그러한 것 없이 결정하기 위한 로직을 하나 이상의 실시예들이 필 연적으로 포함한다는 것을 암시하도록 일반적으로 의도된 것은 아니다. 'X, Y 또는 Z 중 적어도 하나'와 같은 이접적 언어(disjunctive language)는, 특히 달리 명시하지 않는 한, 항 목, 용어 등이 X, Y 및 Z 중 어느 것이라도 될 수 있고 그 조합(예를 들어, X, Y 및/또는 Z)도 될 수 있음을 제 시하기 위해 해당 문맥 내에서 일반적으로 사용되는 것으로 이해된다. 따라서 그러한 이접적 언어는, 특정 실 시예들이 X라는 적어도 하나, Y라는 적어도 하나 또는 Z라는 적어도 하나가 각각 존재할 것을 요구한다는 것을 암시하도록 일반적으로 의도된 것이 아니고 그러해서도 아니된다. 여기에 기술된 및/또는 첨부된 도면들에 도시된 흐름도들에서의 임의의 프로세스 설명들, 요소들 또는 블록들은, 프로세스에서의 특정 논리 기능들 또는 요소들을 구현하기 위한 하나 이상의 실행가능한 명령어들을 포함하는 모듈들, 세그먼트들 또는 코드 부분들을 나타낼 수 있는 것으로 이해되어야 한다. 여기에 기술되는 실시예들의 범위 내에 대안적 구현예들이 포함될 수 있는데, 이러한 구현예들에서는, 요소들 또는 기능들이, 제 거될 수 있고 또는 본 기술 분야에 숙련된 자들에 의해 이해되는 바와 같이 연루된 기능이 무엇이냐에 따라서, 실질적으로 동시(substantially concurrently) 또는 역순(in reverse order)의 순서를 포함해서, 도시되거나 논의된 것과 다른 순서로 실행될 수 있다. 명시적으로 달리 기재하지 않는 한, '하나의'(a) 또는 '하나의'(an)와 같은 관사들은, 하나 또는 그 이상의 기 술된 항목들을 포함하는 것으로 일반적으로 해석되어야 한다. 따라서 '~하도록 구성된 장치'(a device configured to)와 같은 구들은 하나 또는 그 이상의 열거된 장치들을 포함시키는 것으로 의도된 것이다. 이러 한 하나 또는 그 이상의 열거된 장치들은, 명시된 열거사항들(stated recitations)을 수행하도록 총괄적으로 구성될 수도 있다. 예를 들어, '열거사항들 A, B 및 C를 수행하도록 구성된 프로세서'는, 열거사항들 B 및 C를 수행하도록 구성된 제2 프로세서와 협력하여 작동되는, 열거사항 A를 수행하도록 구성된 제1 프로세서를 포함할 수 있다. 그 구성요소들이 다른 수용가능한 예들 중의 일부로서 이해되어야 하는 상술한 실시예들에 대해 많은 변경과 수 정이 이루어질 수 있음이 강조되어야 한다. 모든 그러한 수정들과 변경들은 본 개시의 범위 내에 포함되는 것으로 의도된 것이다."}
{"patent_id": "10-2022-0086963", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면들에 걸쳐서, 참조되는 요소들 간의 대응을 나타내기 위해 참조 번호들이 재사용된다. 도면들은 여기에 기 술되는 주제의 실시예들을 도시하기 위해 제공되는 것이고 그 범위를 제한하기 위한 것이 아니다. 도 1은 루트 생성 시스템의 하나 이상의 실시예들을 구현할 수 있는 컴퓨팅 환경의 실시예를 도시한다. 도 2a 내지 도 2c는 루트 데이터베이스의 생성을 위한 프로세스의 실시예들을 도시한다. 도 3은 루트 데이터베이스를 생성하기 위한 프로세스의 실시예의 흐름도를 도시한다. 도 4는 게임 환경 내에서의 루트 생성의 실시예를 도시한다. 도 5a 및 도 5b는 게임 환경 내에서 루트를 선택하고 생성할 때 사용하기 위한 루트 선택 특성들의 실시예를 도 시한다. 도 6은 루트 생성 프로세스의 실시예의 흐름도의 실시예를 도시한다. 도 7은 컴퓨팅 장치의 실시예를 도시한다."}
