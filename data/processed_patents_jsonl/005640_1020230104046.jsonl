{"patent_id": "10-2023-0104046", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0005824", "출원번호": "10-2023-0104046", "발명의 명칭": "인공지능 모델을 이용하여 연산을 수행하는 전자 장치 및 전자 장치의 동작 방법", "출원인": "삼성전자주식회사", "발명자": "박현빈"}}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "MAC(multiply and accumulate)연산을 수행하는 전자 장치에 있어서,적어도 하나의 MAC 유닛;SRAM(static random access memory);1개의 8bx8b 연산기, 2개의 8bx4b 연산기, 1개의 4bx4b 연산기;비트 시프트(bit shift);덧셈기;적어도 하나의 누적회로(accumulator);및프로세서를 포함하고,상기 프로세서는12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터를 수신하고,상기 제 1 비트열 데이터를 4개 비트 및 8개 비트로 분류하고,상기 제 2 비트열 데이터를 4개 비트 및 8개 비트로 분류하며,A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여상기 비트 시프터와 제 1 누적회로를 이용하여 A8W8에 대응하는 두 개의 8비트 결과를 출력하고,A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여A12W12에 대응하는 1 개의 12비트 결과를 출력하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 프로세서는상기 제 1 비트열 데이터의 8개 비트와 상기 제 1 비트열 데이터의 4개 비트간 곱 연산을 수행하고, 상기 제 1비트열 데이터의 8개 비트와 상기 제 2 비트열 데이터의 4개 비트간 곱 연산을 수행하고,상기 비트 시프터와 제 1 누적회로(accumulator)를 이용하여 A8W8에 대응하는 제 1 결과를 출력하고,상기 제 1 비트열 데이터의 8개 비트와 상기 제 2 비트열 데이터의 8개 비트간 곱 연산을 수행하고제 2 누적회로(accumulator)를 이용하여 A8W8에 대응하는 제 2 결과를 출력하며,A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여상기 제 1 비트열 데이터의 8개 비트와 상기 제 2 비트열 데이터의 8개 비트간 곱 연산을 수행하고,상기 제 1 비트열 데이터의 4개 비트와 상기 제 2 비트열 데이터의 4개 비트간 곱 연산을 수행하고,상기 제 1 비트열 데이터의 8개 비트와 상기 제 2 비트열 데이터의 4개 비트간 곱 연산을 수행하고, 상기 제 2 비트열 데이터의 8개 비트와 상기 제 1 비트열 데이터의 4개 비트간 곱 연산을 수행하고,공개특허 10-2025-0005824-3-적어도 하나의 누적회로(accumulator)를 이용하여 A12W12에 대응하는 제 3 결과를 출력하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 프로세서는A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여상기 제 1 비트열 데이터의 여덟 비트 상에는 가중치 입력(weight input)을 할당하고,상기 제 2 비트열 데이터의 여덟 비트 상에는 제 1 데이터를 할당 하고,상기 제 1 비트열 데이터 및 상기 제 2 비트열 데이터의 네 비트 상에는 제 2 데이터를 할당하며,상기 제 1 비트열 데이터의 여덟 비트와 상기 제 1 비트열 데이터 및 상기 제 2 비트열 데이터의 네 비트 간 곱연산을 각각 수행하고, 상기 비트 시프터와 제 1 누적회로(accumulator)를 이용하여 제 1 결과를 출력하고,상기 제 1 비트열 데이터의 여덟 비트와 상기 제 2 비트열 데이터의 여덟 비트 간 곱 연산을 수행하여 제 2 누적회로(accumulator)를 이용하여 제 2 결과를 출력하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,상기 프로세서는A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여상기 제 1 비트열 데이터의 여덟 비트 및 상기 제 1 비트열 데이터의 네 비트 상에는 가중치 입력(weightinput)을 할당 하고, 상기 제 2 비트열 데이터의 여덟 비트 및 네 비트 상에는 제 3 데이터를 할당하며,상기 제 1 비트열 데이터의 여덟 비트 및 상기 제 2 비트열 데이터의 여덟 비트 간 곱 연산을 수행하고, 상기제 1 비트열 데이터의 여덟 비트 및 상기 제 2 비트열 데이터의 네 비트 간 곱 연산을 수행하며, 상기 제 2 비트열 데이터의 여덟 비트 및 상기 제 1 비트열 데이터의 네 비트 간 곱 연산을 수행하며, 상기 제 1 비트열 데이터의 네 비트 및 상기 제 2 비트열 데이터의 네 비트 간 곱 연산을 수행하고,상기 비트 시프트와 적어도 하나의 누적회로(accumulator)를 이용하여 제 3 결과를 출력하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,제 1 구간은 상기 제 1 비트열 데이터의 네 비트를 지칭하고,제 2 구간은 상기 제 1 비트열 데이터의 여덟 비트를 지칭하며,제 3 구간은 상기 제 2 비트열 데이터의 네 비트를 지칭하고, 제 4 구간은 상기 제 2 비트열 데이터의 여덟 비트를 지칭하며,상기 프로세서는상기 제 2 구간에 대응하는 비트 및 상기 제 4 구간에 대응하는 비트에 대한 곱셈을 수행하여 제 1 결과값을 결정하고,상기 제 4 구간에 대응하는 비트 및 상기 제 3 구간에 대응하는 비트에 대한 곱셈을 수행하고, 곱셉으로 얻어진결과 값에 대해 상기 비트 시프터를 이용하여 상위 방향으로 4비트를 이동시켜 제 2 결과값을 결정하고, 상기공개특허 10-2025-0005824-4-제 4 구간에 대응하는 비트 및 상기 제 1 구간에 대응하는 비트에 대한 곱셈을 수행하여 제 3 결과값을 결정하며,상기 제 1 결과값을 출력하고, 상기 제 2 결과값 및 상기 제 3 결과값에 대한 합 연산을 수행하고 결과를 출력하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5 항에 있어서,상기 프로세서는상기 제 2 구간에 대응하는 비트 및 상기 제 4 구간에 대응하는 비트에 대한 곱 연산을 수행하고 결과를 저장하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 5 항에 있어서,상기 프로세서는12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터에 대해 8비트로 나눠진 구간들의 곱 연산을수행하고 제 1 값을 결정하고,8비트와 4비트 구간들의 곱 연산을 수행하고 제 2 값을 결정하고,4비트로 나눠진 구간들의 곱 연산을 수행하고 제 3 값을 결정하며,상기 제 1 값, 상기 제 2 값 및 상기 제 3 값을 합하여 결과를 누적하여 저장하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "전자 장치에 있어서,연산 회로;메모리; 및프로세서를 포함하고,상기 연산 회로는복수 개의 멀티플렉서들(multiplexer), 비트 쉬프트(bit shift), 가산기(adder) 및 저장 공간(accumulator)을포함하며,상기 프로세서는사용자 입력에 기반하여 상기 연산 회로 내에서 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력할 수 있는 제 1 경로를 선택하거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있는 제 2 경로를 선택하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8항에 있어서,상기 프로세서는사용자 입력에 기반하여 A16W16(activation 16-bit, weight 16-bit)의 결과를 출력할 수 있는 제 3 경로를 선공개특허 10-2025-0005824-5-택하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 8항에 있어서, 상기 프로세서는A8W8에 대응하는 두 개의 8비트 결과를 출력하거나 또는 A12W12(activation 12-bit, weight 12-bit)에 대응하는 1개의 12비트 결과를 출력하는 전자 장치."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "인공지능 모델을 이용하여 연산을 수행하는 전자 장치의 동작 방법에 있어서,12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터를 수신하는 동작;상기 제 1 비트열 데이터를 네 비트 및 여덟 비트로 분류하는 동작;상기 제 2 비트열 데이터를 네 비트 및 여덟 비트로 분류하는 동작;A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 상기 비트 시프터와 제 1 누적회로를 이용하여 A8W8에 대응하는 두 개의 8비트 결과를 출력하는 동작;A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여A12W12에 대응하는 1 개의 12비트 결과를 출력하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서,상기 제 1 비트열 데이터의 상위 네 비트를 제 1 구간 으로 분류하고, 상기 제 1 비트열 데이터의 하위 여덟 비트를 제 2 구간 으로 분류하는 동작;상기 제 2 비트열 데이터의 상위 네 비트를 제 3 구간 으로 분류하고, 상기 제 2 비트열 데이터의 하위 여덟 비트를 제 4 구간 으로 분류하는 동작;A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 하위 여덟 비트에 대응하는 상기 제 2 구간 및 상기 제 4 구간끼리 곱 연산을 수행하고 결과를 출력하는 동작;비트 시프터를 이용하여 상기 제 3 구간을 여덟 비트의 데이터로 생성하고 상기 제 4 구간과 곱 연산을 수행하며, 상기 제 1 구간과 상기 제 4 구간과의 곱 연산을 수행하는 동작;A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 하위 여덟 비트에 대응하는 상기 제 2 구간 및 상기 제 4 구간끼리 곱 연산을 수행하는 동작;및하위 여덟비트와 상위 네 비트에 대응하는 구간들 끼리 곱 연산을 수행하고,상위 네 비트에 대응하는 상기 제 1 구간 및 상기 제 3 구간끼리 곱 연산을 수행하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 11항에 있어서,상기 제 2 구간에 대응하는 비트 및 상기 제 4 구간에 대응하는 비트에 대한 곱셈을 수행하여 제 1 결과값을 결정하고,공개특허 10-2025-0005824-6-상기 제 4 구간에 대응하는 비트 및 상기 제 3 구간에 대응하는 비트에 대한 곱셈을 수행하고, 곱셉으로 얻어진결과 값에 대해 상기 비트 시프터를 이용하여 상위 방향으로 4비트를 이동시켜 제 2 결과값을 결정하고, 상기제 4 구간에 대응하는 비트 및 상기 제 1 구간에 대응하는 비트에 대한 곱셈을 수행하여 제 3 결과값을 결정하며,상기 제 1 결과값을 출력하고, 상기 제 2 결과값 및 상기 제 3 결과값에 대한 합 연산을 수행하고 결과를 출력하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 11 항에 있어서,상기 제 2 구간에 대응하는 비트 및 상기 제 4 구간에 대응하는 비트에 대한 곱셈을 수행하여 제 1 결과값을 결정하고,상기 제 2 구간에 대응하는 비트 및 상기 제 3 구간에 대응하는 비트에 대한 곱셈을 수행하고 곱 연산의 결과물에 대해 상기 비트 시프터를 이용하여 상위 방향으로 8 비트 이동시켜 제 2 결과값을 결정하고,상기 제 1 구간에 대응하는 비트 및 상기 제 3 구간에 대응하는 비트에 대한 곱셈을 수행하고 곱 연산의 결과물에 대해 상기 비트 시프터를 이용하여 상위 방향으로 8 비트 이동시켜 제 3 결과값을 결정하고,상기 제 1 구간에 대응하는 비트 및 상기 제 4 구간에 대응하는 비트에 대한 곱셈을 수행하고 곱 연산의 결과물에 대해 상기 비트 시프터를 이용하여 상위 방향으로 8 비트 이동시켜 제 4 결과값을 결정하며,상기 제 1 결과값 내지 상기 제 4 결과값에 대한 합 연산을 수행하여 결과를 출력하는 동작을 더 포함하는방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 11 항에 있어서,상기 제 2 구간에 대응하는 비트 및 상기 제 4 구간에 대응하는 비트에 대한 곱 연산을 수행하고 결과를 저장하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 11 항에 있어서,상기 제 2 구간에 대응하는 비트 또는 상기 제 4 구간에 대응하는 비트 중 어느 하나 및 상기 제 3 구간에 대응하는 비트와 곱 연산을 수행한 결과값과, 상기 제 4 구간에 대응하는 비트 및 상기 제 1 구간에 대응하는 비트와의 곱 연산을 수행한 결과값의 합 연산을 수행하고,상기 제 3 구간에 대응하는 비트 및 상기 제 1 구간에 대응하는 비트의 곱 연산을 수행하고 결과를 누적하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 11 항에 있어서,12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터에 대해 8비트로 나눠진 구간들의 곱 연산을수행하고 제 1 값을 결정하고,8비트와 4비트 구간들의 곱 연산을 수행하고 제 2 값을 결정하고,4비트로 나눠진 구간들의 곱 연산을 수행하고 제 3 값을 결정하며,공개특허 10-2025-0005824-7-상기 제 1 값, 상기 제 2 값 및 상기 제 3 값을 합하여 결과를 누적하여 저장하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 11 항에 있어서,상기 전자 장치는곱 연산 및 합 연산을 수행하는 적어도 하나의 MAC(multiply and accumulate)유닛을 포함하고,상기 MAC 유닛은 복수의 신호들 중 적어도 하나의 신호를 출력하는 멀티플렉서(multiplexer)와 작동적으로 연결되어 입력된 값에 대한 딥러닝 연산을 수행하며,상기 MAC 유닛을 이용하여 상기 제 1 구간 내지 상기 제 4 구간의 비트열 데이터들의 곱셈을 수행하고, 곱셈 결과들을 가산하며,외부 입력에 기반하여 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력할 것인지 또는 A12W12(activation12-bit, weight 12-bit)의 결과를 출력할 것인지 결정하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 11항에 있어서,사용자 입력에 기반하여 상기 연산 회로 내에서 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력할 수 있는 제 1 경로를 선택하거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있는 제 2 경로를 선택하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 19항에 있어서,사용자 입력에 기반하여 A16W16(activation 16-bit, weight 16-bit)의 결과를 출력할 수 있는 제 3 경로를 선택하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0104046", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "MAC(multiply and accumulate)연산을 수행하는 전자 장치는 적어도 하나의 MAC 유닛, SRAM(static random access memory), 1개의 8bx8b 연산기, 2개의 8bx4b 연산기, 1개의 4bx4b 연산기, 비트 시프트(bit shift), 덧셈 기, 적어도 하나의 누적회로(accumulator),및 프로세서를 포함하고, 프로세서는 12비트(bits)로 구성된 제 1 비 트열 데이터 및 제 2 비트열 데이터를 수신하고, 제 1 비트열 데이터를 4개 비트 및 8개 비트로 분류하고, 제 2 비트열 데이터를 4개 비트 및 8개 비트로 분류하며, A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 비트 시프터와 제 1 누적회로를 이용하여 A8W8에 대응하는 두 개의 8비트 결과를 출력 하고, A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 A12W12에 대응 하는 1 개의 12비트 결과를 출력할 수 있다."}
{"patent_id": "10-2023-0104046", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 문서의 다양한 실시예들은 인공지능 모델을 이용하여 연산을 수행하는 전자 장치 및 전자 장치의 동작 방법 에 관한 것이다."}
{"patent_id": "10-2023-0104046", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 신경망(artificial neural network; ANN)은 생물학적 뇌를 모델링한 컴퓨터 과학적 아키텍쳐 (computational architecture)를 참조한다. 인공 신경망에 기초하여 딥러닝(deep learning) 또는 기계 학습 (machine learning) 등이 구현될 수 있다. 인공 신경망의 예시로서 심층 신경망(deep neural network) 또는 딥 러닝(deep learning)은 복수의 레이어들을 포함하는 멀티 레이어 구조를 가질 수 있다. 시각, 음성을 분석하는 기술 분야에서, 인공지능 모델(AI 모델)이 다양하게 활용되고 있다. 모바일 단말에서 인 공지능 모델을 효과적으로 동작 시키기 위해 인공지능 모델과 관련된 하드웨어 기술에 대한 연구 개발이 활발하 게 진행되고 있다. 예를 들어, 딥러닝 인공지능 모델에서 수행되는 MAC 연산 (multiply-accumulate) 최적화 연구뿐만 아니라 인공지능 모델을 고려한 하드웨어의 구조개선 기술 또한 연구, 적용 되고 있다. 또한, 데이터 프로세싱 시스템은 일반적으로 중앙 처리 장치(센트럴 프로세싱 유닛, CPU, central processing unit)으로 알려져 있는 적어도 하나의 프로세서를 포함할 수 있다. 그러한 데이터 프로세싱 시스템은 또한 다양 한 타입의 특화된 프로세싱을 위해 사용되는 적어도 하나의 다른 프로세서, 예를 들어 뉴럴 프로세싱 유닛(NPU, neural processing unit)을 포함할 수 있다. A8W8에 대응하는 데이터는 8비트의 크기를 가질 수 있다. A8W8은 activation 8bit 및 weight 8bit를 의미할 수 있다. activation은 입력된 데이터의 크기를 의미할 수 있다. 가중치(weight)는 입력된 데이터가 결과에 미치는 영향을 조절하기 위한 변수를 의미할 수 있다. A12W12에 대응하는 데이터는 12비트의 크기를 가질 수 있다. 일반적인 컴퓨터 시스템은 32비트나 64비트를 사용 하기 때문에 12비트의 데이터를 입력 받는 경우, 32비트 및 64비트 모두 비트가 남을 수 있다. 예를 들어, 컴퓨 터 시스템은 32비트에 12비트의 데이터를 입력 받는 경우, 8비트가 남을 수 있다. 또한, 컴퓨터 시스템은 64비 트에 12비트의 데이터를 입력 받는 경우, 4비트가 남을 수 있다. 일 예시에 따르면, A12W12 형태의 데이터를 학습하는 경우, A12W12가 다른 시스템(예: A8W8)에 비해 효율이 좋 을 수 있으나, 낭비되는 비트가 발생할 수 있다. MAC(multiply and accumulate)연산을 수행하는 전자 장치는 적어도 하나의 MAC 유닛, SRAM(static random access memory), 1개의 8bx8b 연산기, 2개의 8bx4b 연산기, 1개의 4bx4b 연산기, 비트 시프트(bit shift), 덧 셈기, 적어도 하나의 누적회로(accumulator),및 프로세서를 포함하고, 프로세서는 12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터를 수신하고, 제 1 비트열 데이터를 4개 비트 및 8개 비트로 분류하고, 제 2 비트열 데이터를 4개 비트 및 8개 비트로 분류하며, A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하 는 것으로 결정됨에 기반하여 비트 시프터와 제 1 누적회로를 이용하여 A8W8에 대응하는 두 개의 8비트 결과를 출력하고, A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 A12W12에 대응하는 1 개의 12비트 결과를 출력할 수 있다. 전자 장치는 연산 회로, 메모리, 및 프로세서를 포함하고, 연산 회로는 복수 개의 멀티플렉서들(multiplexer), 비트 쉬프트(bit shift), 가산기(adder) 및 저장 공간(accumulator)을 포함하며, 프로세서는 사용자 입력에 기 반하여 연산 회로 내에서 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력할 수 있는 제 1 경로를 선택하 거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있는 제 2 경로를 선택할 수 있다. 인공지능 모델을 이용하여 연산을 수행하는 전자 장치의 동작 방법은 12비트(bits)로 구성된 제 1 비트열 데이 터 및 제 2 비트열 데이터를 수신하는 동작, 제 1 비트열 데이터를 네 비트 및 여덟 비트로 분류하는 동작, 제 2 비트열 데이터를 네 비트 및 여덟 비트로 분류하는 동작, A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 비트 시프터와 제 1 누적회로를 이용하여 A8W8에 대응하는 두 개의 8비트 결과를 출력하는 동작, A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하 여 A12W12에 대응하는 1 개의 12비트 결과를 출력하는 동작을 포함할 수 있다. 본 문서에 따른 인공지능 모델을 이용하여 연산을 수행하는 전자 장치는 하나의 MAC(multiply and accumulate) 를 사용하여 12비트 데이터에 대해 4비트 및 8비트로 나눠 연산을 수행하고 선택적으로 A8W8 및 A12W12에 대응 하는 결과를 출력할 수 있다. 본 문서에 따른 인공지능 모델을 이용하여 연산을 수행하는 전자 장치는 8비트 데이터를 처리할 수 있고, 사용 자의 선택에 따라 12비트 데이터도 처리할 수 있다. 본 문서에 따른 인공지능 모델을 이용하여 연산을 수행하는 전자 장치는 12비트의 데이터를 처리하면서도 32비 트 또는 64비트로 운영되는 컴퓨터 시스템 상에서 낭비되는 비트 없이 효율적으로 연산을 수행할 수 있다."}
{"patent_id": "10-2023-0104046", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다.연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다.다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴 퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어(예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, '비일시적'은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전자 기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경우 와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다. 도 2는 일 실시예에 따른 전자 장치의 구성을 블록도로 나타낸 것이다. 도 2에 따르면 전자 장치는 프로세서 및 메모리를 포함할 수 있으며 도시된 구성 중 일부가 생 략 또는 치환 될 수도 있다. 전자 장치는 도 1의 전자 장치의 구성 및/또는 기능 중 적어도 일부를 더 포함할 수 있다. 도시된(또는 도시되지 않은) 전자 장치의 각 구성 중 적어도 일부는 상호 작동적으로 (operatively), 기능적으로(functionally) 및/또는 전기적으로 (electrically) 연결될 수 있다. 일 실시예에 따르면, 프로세서는 전자 장치의 각 구성 요소들의 제어 및/또는 통신에 관한 연산이나 데이터 처리를 수행할 수 있는 구성으로써, 하나 이상의 프로세서들로 구성될 수 있다. 프로세서는 도 1의 프로세서의 구성 및/또는 기능 중 적어도 일부를 포함할 수 있다. 일 실시예에 따르면, 프로세서가 전자 장치 상에서 구현할 수 있는 연산 및 데이터 처리 기능에는 한 정됨이 없을 것이나, 이하에서는 딥러닝 연산을 위해 12bit의 데이터를 8bit 및 4bit로 나누어 제어하는 특징에 대해 상세히 설명하기로 한다. 프로세서의 동작들은 메모리에 저장된 인스트럭션들을 로딩(loading) 함으로써 수행될 수 있다. 일 실시예에 따르면, 전자 장치는 하나 이상의 메모리를 포함하며, 메모리는 메인 메모리(main memory) 및 스토리지(storage)를 포함할 수 있다. 메인 메모리는 DRAM(dynamic random access memory), SRAM(static RAM), 또는 SDRAM(synchronous dynamic RAM) 등 휘발성 메모리로 구성될 수 있다. 또는 메모리 는 비휘발성 메모리(non-volatile memory)로써, 대용량의 스토리지(storage) 장치를 포함할 수 있다. 스 토리지(storage)는 OTPROM(one time programmable ROM), PROM, EPROM, EEPROM, mask ROM, flash ROM, 플래시 메모리, 하드 드라이브, 또는 솔리드 스테이트 드라이브 (SSD) 중 적어도 하나를 포함할 수 있다. 메모리 는 다양한 파일 데이터들을 저장할 수 있으며, 프로세서의 동작에 따라 저장된 파일 데이터들은 업데이트 될 수 있다. 딥 러닝은 가중치(weight)와 입력의 곱의 합을 통해 수행될 수 있다. 가중치(weight)와 입력의 곱의 합을 통해 얻어진 계산 결과에 activation 함수를 적용하면 최종 결과값(activation)을 얻을 수 있다.카메라 이미지 센서는 12 bit 데이터 포맷의 가공 전 데이터(raw data)에 대해 ISP(image signal processor)를 이용하여 노이즈 제거 및 왜곡 보정을 수행할 수 있다. ISP(image signal processor)는 카메라 이미지 센서로부 터 12 bit 데이터 를 수신하고 딥러닝 픽셀 프로세싱으로 이미지의 퀄리티(quality)를 상승시킬 수 있다. 프로 세서(예: NPU) 가 A8W8 정밀도로 Neural ISP 처리(딥러닝 픽셀 프로세싱)를 한다면, 12-bit Bayer 데이터 에서 손실이 발생할 수 있다. NPU 가 A16W8 정밀도로 12-bit Bayer 데이터를 처리한다면, 데이터의 손실은 없지 만, 가중치를 8비트를 사용하므로 bitdwidth가 부족하여 화질의 열화가 생길 수 있다. 만약 NPU가 A12W12 를 지 원한다면, Bayer 데이터의 손실 없이 12비트의 가중치를 활용할 수 있어서 호환이 좋을 수 있다. 그래서 A12W12 의 데이터를 처리할 수 있는 NPU가 필요할 수 있다. 일 실시예에 따르면, 프로세서는 NPU(neural processing unit)를 포함하거나 NPU로 구현될 수 있다. 일 실시예에 따르면, 프로세서는 상기 제 1 비트열 데이터를 4개 비트 및 8개 비트로 분류하고, 제 2 비트 열 데이터를 4개 비트 및 8개 비트로 분류하며, A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 비트 시프터와 제 1 누적회로를 이용하여 A8W8에 대응하는 두 개의 8비트 결과를 출력 하고, A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 A12W12에 대응 하는 1 개의 12비트 결과를 출력할 수 있다. 일 실시예에 따르면, 프로세서는 12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터를 수 신하고, 제 1 비트열 데이터의 상위 4개 비트를 제 1 구간 으로 분류하고, 상기 제 1 비트열 데이터의 하위 8개 비트를 제 2 구간 으로 분류하며, 제 2 비트열 데이터의 상위 4개 비트를 제 3 구간 으로 분류하고, 상기 제 2 비트열 데이터의 하위 8개 비트를 제 4 구간 으로 분류하며, 입력 신호에 기반하여 상기 제 1 구간 내지 상기 제 4 구간의 데이터들의 곱셈을 수행하고, 곱셈 결과를 가산하여 A8W8(activation 8-bit, weight 8-bit)의 결 과를 출력하거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있다. 일 실시예에 따르면, 프로세서는 멀티플렉서 및 비트 시프터를 이용하여 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있다. 일 실시예에 따르면, 프로세서는 제 2 구간 및 상기 제 4 구간 에 대한 곱셈을 수행하여 제 1 결과값을 결 정하고, 제 4 구간 및 상기 제 3 구간 에 대한 곱셈을 계산하고, 상기 비트 시프터를 이용하여 상위 방향으로 4 비트를 이동시켜 제 2 결과값을 결정하고, 상기 제 4 구간 및 상기 제 1 구간 에 대한 곱셈을 계산하고 제 3 결 과값을 결정하며, 제 1 결과값을 출력하고, 제 2 결과값 및 제 3 결과값에 대한 합 연산을 수행하고 결과를 출 력할 수 있다. 일 실시예에 따르면, 프로세서는 제 2 구간에 대응하는 비트와 및 상기 제 4 구간에 대응하는 비트에 대한 곱셈을 수행하여 제 1 결과값을 결정하고, 제 2 구간에 대응하는 비트 및 상기 제 3 구간에 대응하는 비트에 대 한 곱셈을 수행하고 곱셈으로 얻어진 결과 값에 대해 상기 비트 시프터를 이용하여 상위 방향으로 8 비트 이동 시켜 제 2 결과값을 결정하고, 제 1 구간에 대응하는 비트 및 상기 제 3 구간에 대응하는 비트에 대한 곱셈을 수행하고 곱셉으로 얻어진 결과 값에 대해 비트 시프터를 이용하여 상위 방향으로 8 비트 이동시켜 제 3 결과값 을 결정하고, 제 1 구간에 대응하는 비트 및 상기 제 4 구간에 대응하는 비트에 대한 곱셈을 수행하고 곱셈으로 얻어진 결과 값에 대해 비트 시프터를 이용하여 상위 방향으로 8 비트 이동시켜 제 4 결과값을 결정하며, 제 1 결과값 내지 제 4 결과값에 대한 합 연산을 수행하여 결과를 출력할 수 있다. 일 실시예에 따르면, 프로세서는 NPU(neural processing unit)를 포함하거나, NPU로 구현될 수 있다. 일 실시예에 따르면, 프로세서는 상기 제 2 구간에 대응하는 비트 및 상기 제 4 구간에 대응하는 비트에 대한 곱 연산을 수행하고 곱셉으로 얻어진 결과를 누적할 수 있다. 일 실시예에 따르면, 프로세서는 상기 제 2 구간에 대응하는 비트 또는 상기 제 4 구간에 대응하는 비트 중 어느 하나와 상기 제 3 구간에 대응하는 비트 간의 곱 연산을 수행한 결과값과, 상기 제 4 구간에 대응하는 비트 및 상기 제 1 구간에 대응하는 비트 간의 곱 연산을 수행한 결과값의 합 연산을 수행하고, 제 3 구간에 대 응하는 비트 및 제 1 구간에 대응하는 비트의 곱 연산을 수행하고 결과를 누적할 수 있다. 일 실시예에 따르면, 프로세서는 12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터에 대 해 8비트로 나눠진 구간들의 곱 연산을 수행하고 제 1 값을 결정하고, 8비트와 4비트 구간들의 곱 연산을 수행 하고 제 2 값을 결정하고, 4비트로 나눠진 구간들의 곱 연산을 수행하고 제 3 값을 결정하며, 제 1 값, 제 2 값 및 제 3 값을 합하여 결과를 누적하여 저장할 수 있다.일 실시예에 따르면, 프로세서는 MAC 유닛을 이용하여 상기 제 1 구간 내지 상기 제 4 구간의 데이터들의 곱셈을 수행하고, 곱셈 결과를 가산할 수 있다. 프로세서는 외부 입력에 기반하여 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력할 것인지 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 것인 지 결정할 수 있다. 도 3a는 곱셈과 결과 누적을 수행하는 MAC(multiply and accumulate)의 구조를 도시한 것이다. 도 3a에 따르면, MAC(multiply and accumulate)는 입력된 데이터의 곱 연산을 수행하고, 합 연산을 수행할 수 있다. MAC는 3개의 멀티플렉서(mux) 및 1개의 비트-쉬프트(bit shift)를 포함할 수 있다. 멀티플렉서 (mux)는 복수의 입력들 중 어느 하나를 선택하는 데 사용될 수 있다. 비트-쉬프트(bit shift)는 비트 간 연산과정에서 적어도 하나의 비트의 자리수를 이동(또는, 변경)시키는데 사용될 수 있다. 예를 들어, 12비트 로 구성된 비트열 데이터에서 0 내지 3에 위치한 4개의 비트로 이뤄진 제 1 비트열 데이터는 4비트-쉬프트에 의 해 4 내지 7에 위치하는 것으로 변경될 수 있다. 비트 간 연산 과정에 대해서는 도 3b에서 자세히 설명될 것이다. MAC(multiply and accumulate)는 8bit간 곱 연산을 수행한 결과값을 제 1 축적기(accumulator) 상에 저장 할 수 있다. MAC(multiply and accumulate)는 2개의 멀티플렉서(mux)(310, 314)와 비트 쉬프터를 이용하여 8bit 및 4bit 간 곱 연산을 수행할 수 있다. MAC(multiply and accumulate)는 4bit 및 4bit 간 곱 연산을 수행할 수 있 다. MAC는 가산기(adder)를 이용하여 8bit 및 8bit 간 곱 연산의 결과값, 8bit 및 4bit 간 곱 연산의 결 과값과 4bit 및 4bit 간 곱 연산의 결과값에 대해 합 연산을 수행할 수 있다. MAC는 합 연산을 수행한 결과값과 8bit 및 4bit 간 곱 연산을 수행한 결과값을 제 3 멀티플렉서를 거쳐 제 2 축적기에 저장할 수 있다. 도 3b는 4bit 데이터 간의 곱셈 방식을 나타낸 것이다. MAC는 4bit 간 곱 연산을 수행할 수 있다. 도 3b는 일 예시일 뿐 MAC는 다른 비트를 갖는 데이터 간에도 곱 연 산을 수행할 수 있다. 예를 들어, MAC는 '1101'을 갖는 4비트 데이터와, '1011'을 갖는 4비트 데이터 간의 곱 연산을 수행할 수 있다. MAC는 '1101'을 갖는 4비트 데이터 상에 '1011'을 갖는 데이터를 한 자리씩 곱 연산을 수행할 수 있다. MAC는 1101과 1011의 오른쪽에서 첫번째 자리에 대응하는 비트인 1을 곱할 수 있다. MAC는 1101과 1011의 오른쪽쪽에 서 두 번째 자리에 대응하는 비트인 1을 곱하고, 곱셈의 결과에 대해 1비트만큼 상위 비트로 이동시킬 수 있다. MAC는 1101과 1011의 오른쪽 세 번째 자리의 0을 곱하고, 곱셈의 결과에 대해 2비트만큼 상위 비트로 이동시킬 수 있다. MAC는 1101과 1011의 오른쪽에서 네 번째 자리에 위치한 1을 곱하고, 곱셈의 결과에 대해 3비트만큼 상위 비트로 이동시킬 수 있다. MAC는 각 자리수별로 곱 연산의 결과물을 모두 합하여 최종값을 결정할 수 있다. 도 3b에서 ‘1101'을 갖는 4비트 데이터와, '1011'을 갖는 4비트 데이터 간의 곱 연산의 결과는 '10001111'로 표시될 수 있다. 도 4a는 12bit 데이터들을 4개의 구간으로 분류하는 과정을 도시한 것이다. 도 4a에 따르면, 프로세서(예: 도 2의 프로세서)는 제 1 비트열 데이터의 상위 4개 비트를 제 1 구간 (IN1) 으로 분류하고, 제 1 비트열 데이터의 하위 8개 비트를 제 2 구간(IN0) 으로 분류할 수 있다. 프로세서는 제 2 비트열 데이터의 상위 4개 비트를 제 3 구간(IN2)으로 분류하고, 제 2 비트열 데이 터의 하위 8개 비트를 제 4 구간(IN3) 으로 분류할 수 있다. 또는 프로세서는 제 1 비트열 데이터의 상위 8개 비트를 제 1 구간(IN1) 으로 분류하고, 제 1 비트열 데이터의 하위 4개 비트를 제 2 구간 (IN0) 으로 분류할 수도 있다. 프로세서는 제 2 비트열 데이터의 상위 8개 비트를 제 3 구간 (IN2)으로 분류하고, 제 2 비트열 데이터의 하위 4개 비트를 제 4 구간(IN3) 으로 분류할 수도 있다. 즉, 제 1 비트열 데이터 및 제 2 비트열 데이트는 8개 비트와 4개의 비트로 구분될 수 있으나 8개 비트가 상위 에 배열되고 4개 비트가 하위에 배열될 수도 있고, 반대로 8개 비트가 하위에 배열되고 4개 비트가 상위에 배열 될 수도 있다. 제 1 비트열 데이터 또는 제 2 비트열 데이터의 적어도 하나에 12비트(bit)를 갖는 데이터(예:이미지 데이터)를 포함할 수 있다. 프로세서는 제 1 구간, 제 2 구간, 제 3 구간 및 제 4 구간의 데이터들의 곱셈을 수 행하고, 곱셈 결과들을 서로 더해서 최종 결과를 출력할 수 있다. 프로세서는 외부 입력(예: 사용자 입 력)에 기반하여 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있다. 프로세서는 데이터들의 곱셈을 수행하고, 곱셈 결과를 가산하기 전에 외부 입력에 기반하여 A8W8 또는 A12W12 중에서 어느 데이터를 출력할지 미리 결정할 수도 있다. A8W8 또는 A12W12 중 적어도 어느 하나의 데이터를 출력하는 과정은 도 4b 및 도 4c에서 설명될 것이다. 도 4a 에서는 12개 비트로 이뤄진 하나의 비트열 데이터에 대해 상위 4개 비트 및 하위 8개 비트로 나누는 것으로 설 명되었으나 이는 설명의 편의를 위한 것일뿐 데이터 분류 방식은 이것으로 한정되는 것은 아니다. 비트열 데이 터는 예를 들어, 상위 8개 비트 및 하위 4개 비트로 분류될 수 있으며 이러한 분류 방식은 설정에 따라 달라질 수 있다. 도 4b는 4개의 구간으로 분류된 데이터의 곱과 합 연산을 통해 A8W8 결과를 얻는 과정을 도시한 것이다. 프로세 서는 IN0, IN1, IN2, IN3 를 조합하여 하나의 사이클에서 두 개의 A8W8 결과를 얻기 위한 계산을 수행할 수 있다. X1 및 X2는 8비트 입력 값을 의미할 수 있다. IN 은 MAC 의 입력의 이름을 의미할 수 있다. 하나의 MAC 은 X1*W 와 X2*W 을 한 사이클 내에 실행할 수 있다. W는 8비트 가중치를 의미할 수 있다. 프로세서는 8개 비트로 분류된 구간에 첫 번째 입력 X1 을 할당하고, 8개 비트로 분류된 다른 구간에 가중치 W 를 할당할 수 있다. 프로세서는 4개 비트로 분류된 구간(예: IN1)에 두 번째 입력 X2 의 하위 4개 비트를 할당하고, 4개 비트 분류된 다른 구간(예: IN2)에 X2 의 상위 4개 비트를 할당할 수 있다. 프로세서는 IN0 에 첫번째 입력 X1 을 할당하고, IN3 에 가중치 W 를 할당할 수 있다. 또는 반대로 프로세서는 IN3 에 첫번째 입력 X1 을 할당하고, IN0 에 가중치 W 를 할당할 수도 있다. X1 및 W 할당 여부는 설정에 따라 달라질 수 있다. 프로세서는 IN1 에 두 번째 입력 X2 의 하위 4개 비트를 할당하고, IN2 에 X2 의 상위 4개 비트를 할당할 수 있다. 또는 반대로 프로세서는 IN2 에 두 번째 입력 X2 의 하위 4개 비트를 할당하고, IN1 에 X2 의 상위 4 개 비트를 할당할 수도 있다. X1 및 X2 및 W을 IN0, IN1, IN2, IN3에 할당하는 방법은 설정에 따라 달라질 수 있으며 도 4b에 도시된 것으로 제한되지 않는다. 도 4b는 일 실시예에 따라 IN0 에 첫번째 입력 X1, IN3 에 가중치 W, IN2 에 두 번째 입력 X2 의 하위 4개 비트, IN1 에 X2 의 상위 4개 비트를 할당한 예를 도시하였다. 도 4b에 따르면, 프로세서는 8비트의 크기를 갖는 제 2 구간 및 제 4 구간의 곱 연산을 수행할 수 있다. 프로세서는 8비트의 크기를 갖는 제 2 구간 및 제 4 구간의 곱 연산을 수행하여 A8W8 에 대응하는 첫 번째 8비트 결과값을 얻을 수 있다. 8비트 간 곱셈은 도 3b에 기재된 것처럼 수행될 수 있다. 도 3b에서는 4비트 간 곱셈을 수행하여 8비트를 얻는 과정을 도시하고 있다. 마찬가지로 8비트 간 곱셈을 수행 하면 16비트의 결과를 얻을 수 있다. 프로세서는 8비트 간 곱셈의 결과로 얻어진 16비트의 값을 8비트로 변환(quantization)시킬 수 있다. 프로세서는 INT16에서 INT8로 변환 시 scaling factor (상수값) 을 곱 해주고 bias를 더해줘서 변환을 수행할 수 있다. 프로세서는 8비트로 변환된 값을 다음 레이어의 입력으로 제공할 수 있다. 그림 410에서, 프로세서는 X1(8비트)과 W(8비트)의 곱 연산을 수행하는 방식으로 첫번째 A8W8 결과값을 얻 을 수 있다. 이는 도 3b에서 4비트 연산의 곱이 수행된 과정과 마찬가지로 수행될 수 있다. 또한, 프로세서는 제 4 구간 에 대해 제 1 구간 및 제 3 구간을 합한 8비트 데이터와 곱 연산을 수행할 수 있다. 프로세서는 제 4 구간 및 제 1 구간에 대한 곱 연산을 수행하여 제 1 결과값을 결정할 수 있다. 프로세서는 제 4 구간 및 제 3 구간에 대한 곱 연산을 수행하고, 곱 연산의 결과물에 대해 비트 쉬프트(bit shift)를 이용하여 4비트만큼 상위로 이동시킨 제 2 결과값을 결정할 수 있다. 프로세서는 제 1 결과값 및 제 2 결과값을 합하여 A8W8에 대응하는 두 번째 8비트 결과값을 얻을 수 있다. 그림 412에서, 프로세서는 X2(8비트)와 W(8비트)의 곱 연산을 수행할 수 있다. X2는 오른쪽을 기준으로 첫 번째에서 네 번째 비트를 포함하는 IN1과 다섯번째에서 여덟번째 비트를 포함하는 IN2로 구성될 수 있다. 프로 세서는 W(8비트)와 IN1의 곱 연산을 수행할 수 있다. 또한, 프로세서는 W(8비트)와 IN2의 곱 연산을 수행할 수 있다. 다만, IN2는 다섯번째에서 여덟번째 비트를 포함하기 때문에 오른쪽을 기준으로 첫 번째에서네 번째 비트가 생략될 수 있다. 그림 420은 오른쪽을 기준으로 첫 번째에서 네 번째 비트가 생략된 IN2 상에 자릿수를 추가하여 W(8비트)와의 곱 연산을 수행하는 과정을 나타낸 것이다. 프로세서는 IN3 및 IN1의 곱 연산을 수행하고, IN3 및IN2 의 곱 연산을 수행할 수 있다. 이후 프로세서는 IN3 및 IN1의 곱 연산 값에 IN3*IN2 의 곱 연산 값을 상위비 트 방향으로 네 비트 어긋나게 더할 수 있다. 프로세서는 IN3 및 IN1의 곱 연산 값에 IN3*IN2 의 곱 연산 값을 상위비트 방향으로 네 비트 어긋나게 더하여 X2 와 W의 곱 연산 결과값을 결정할 수 있다. 프로세서 는 여덟 비트의 값에 네 비트 값들을 각각 곱한 후 상위비트 방향으로 네 비트 어긋나게 더하는 방식으로 두번 째 A8W8 결과값을 얻을 수 있다.즉, 도 4b에서 프로세서는 2 개의 8비트 결과값을 출력할 수 있다. 도 4c는 4개의 구간으로 분류된 데이터의 곱과 합 연산을 통해 A12W12 결과를 얻는 과정을 도시한 것이다. 도 4c에 따르면, 프로세서는 12비트의 크기를 갖는 2개의 비트열 데이터를 제 1 구간 내지 제 4 구간 으로 나눠서 곱 연산을 수행할 수 있다. X는 12비트 입력을 의미할 수 있다. W는 12비트 가중치를 의미할 수 있다. 하나의 MAC는 X와W 사이의 곱 연산을 하나의 사이클 내에 수행할 수 있다. 프로세서는 X를 IN0, IN1에 할당하는 경우 W를 IN2, IN3에 할당할 수 있다. 반대로 프로세서는 W가 IN0, IN1에 할당될 경우 X를 IN2, IN3에 할당할 수 있다. 이하의 설명과 도면은 설명의 편의상 X가 IN0, IN1에 할당되고, W는 IN2, IN3에 할 당되는 실시예만 도시하였으나 이는 일 실시예일뿐 X와 W가 할당되는 위치는 설정에 따라 달라질 수 있다. 프로 세서는 IN1에 입력 X의 상위 4개비트를 할당할 수 있다. 또한, 프로세서는 IN0에 입력 X의 하위 8개 비트를 할당할 수 있다. 프로세서는 IN2에 W의 상위 4개비트를 할당할 수 있다. 프로세서는 IN3에 W 의 하위 8개비트를 할당할 수 있다. 프로세서는 IN0와 IN3의 곱 연산을 수행하고 그 결과값에 IN2*IN1는 상위 비트 방향으로 16 비트, IN0*IN2, IN3*IN1는 상위 비트 방향으로 8비트 어긋나게 더해서 X와 W의 곱 연산 의 결과값을 구할 수 있다. 프로세서는 비트 쉬프트(bit shift)를 이용하지 않고서도 X와 W의 곱 연산의 결과값을 구할 수 있다. 그림 420에서, 프로세서는 8비트의 크기를 갖는 IN0 및 IN3의 곱 연산을 수행할 수 있다. IN0 및 IN3의 곱 연산은 8개 비트 간 곱셈으로 도 3b에서 설명된 방식처럼 진행될 수 있다. 그림 422에서 프로세서는 4비트의 크기를 갖는 IN2 및 IN1의 곱 연산을 수행할 수 있다. IN2는 W의 상위 4 개 비트를 포함하고, IN1은 입력 X의 상위 4개 비트를 포함할 수 있다. 본 문서에 따른 전자 장치(예: 도 2의 전자 장치)는 IN0와 IN3의 곱 연산을 수행하고 그 결과값에 IN0*IN2, IN3*IN1를 상위 비트 방향으로 여덟 비트, IN2*IN1 은 상위비트 방향으로 열여섯 비트 어긋나게 더해서 X와 W의 곱 연산의 결과값을 구할 수 있다. 전자 장치는 비트 쉬프트(bit shift)를 이용하지 않고서도 X와 W의 곱 연산의 결과값을 구할 수 있다. 그림 424에서, 프로세서는 8비트의 크기를 갖는 IN3 및 4비트의 크기를 갖는 IN1의 곱 연산을 수행할 수 있다. 프로세서는 IN1을 상위 비트 방향으로 8개 비트 이동시켜 IN3와 곱 연산을 수행할 수 있다. 그림 426에서, 프로세서는 8비트의 크기를 갖는 IN0 및 4비트의 크기를 갖는 IN2의 곱 연산을 수행할 수 있다. 프로세서는 IN2를 상위 비트 방향으로 8개 비트 이동 시켜 IN0와 곱 연산을 수행할 수 있다. 프로세서는 그림 420 및 그림 422의 합 연산을 수행하고, 그림 424 및 그림 426의 합 연산을 수행할 수 있 다. 프로세서는 그림 420 및 그림 422의 합 연산에 대한 결과값과 그림 424 및 그림 426의 합 연산에 대한 결과값을 합하여 A12W12에 대응하는 12비트의 출력값을 결정할 수 있다. 즉, 도 4c에서 프로세서는 하나의 사이클에서 1개의 12비트 결과값을 출력할 수 있다. 도 5a는 MAC를 이용하여 곱과 합 연산을 통해 A8W8 결과를 얻는 과정을 도시한 것이다. A8W8에 대응하는 8비트의 결과를 얻는 과정은 앞선 도 4b에서 설명된 바 있다. MAC(multiply and accumulate) 의 구조 및 동작에 대해서는 도 3a에서 설명된 바 있다. 도 5a에서는 12개 비트로 이뤄진 하나의 비트열 데이터에 대해 상위 4개 비트 및 하위 8개 비트로 나누는 것으 로 설명되었으나 이는 설명의 편의를 위한 것일뿐 데이터 분류 방식은 이것으로 한정되는 것은 아니다. 비트열 데이터는 예를 들어, 상위 8개 비트 및 하위 4개 비트로 분류될 수도 있으며 이러한 분류 방식은 설정에 따라 달라질 수 있다. IN0(8비트) 및 IN1(4비트)의 입력값을 결정하는 과정은 도 4b에서 설명된 바 있으며, 도 5a 및도 5b는 다양한 실시예 중 하나로 이에 제한되지 않는다. 그림 501은 전자 장치(예: 도 2의 전자 장치)가 프로세서(예: 도 2의 프로세서)의 제어 하에 컨벌루 션을 수행하는 과정을 도시한 것이다. cycle 0에서 에는 X1이 배정되고, 에는 X2가 배정되고, Woo 에는 W가 배정될 수 있다. 하나의 MAC 유닛은 하나의 사이클(예: cycle 0)에서 과 Woo의 곱 연산을 수행 하고, 과 Woo의 곱 연산을 수행할 수 있다. 전자 장치는 두 번의 곱 연산의 결과값을 이용하여 하 나의 사이클에서 두 개의 A8W8 결과값을 얻을 수 있다. 전자 장치는 cycle 1에서 , 및 Wo1 과 MAC(multiply and accumulate) 연산을 수행할 수 있 다. 전자 장치는 cycle i에서 , 및 Woi 와 MAC(multiply and accumulate) 연산을 수행할 수 있다. i는 0 및 자연수를 의미할 수 있다. 그림 503은 MAC 연산을 수행하는 회로도를 도시한 것이다. 전자 장치는 cycle 0에서 Woo 및 의 곱 연산을 수행하고 제 1 축적기상에 결과를 저장할 수 있 다. 전자 장치는 cycle i에서 Woi 및 Xooi의 곱 연산을 수행하고 제 1 축적기상에 결과를 저장할 수 있다. 여기서 i는 자연수를 포함할 수 있다. 전자 장치는 cycle 0 부터 cycle i까지 곱 연산을 수행하고, 결과들을 제 1 축적기상에 누적하여 저장할 수 있다. 제 1 축적기는 adder와 register를 포함할 수 있다. 제 1 축적기는 adder를 이용하여 cycle 0에서 결정된 곱 연산의 결과 값과 cycle i 에서 결정된 곱 연산의 결과 값을 더할 수 있다. 이후 제 1 축적기는 결과값들을 더하고, 더해진 결과를 register에 등록할 수 있다. 전자 장치는 cycle 0에서 Woo 및 Xo1o의 곱 연산을 수행하고 제 2 축적기상에 결과를 저장할 수 있다. 전자 장치는 cycle i에서 Woi 및 Xo1i의 곱 연산을 수행하고 제 2 축적기상에 결과를 저장할 수 있다. 여기서 i는 자연수를 포함할 수 있다. 전자 장치는 cycle 0 부터 cycle i까지 곱 연산을 수행하 고, 결과들을 제 2 축적기상에 누적하여 저장할 수 있다. 8비트 및 4비트 간의 곱셈은 앞선 도 3a에서 설 명된 것과 같다. 그림 503에서, 4비트 간 곱셈(4b x 4b)에 대응하는 구간은 사용되지 않고 비활성화될 수 있다. 멀티플렉서는 컨트롤 신호에 기반하여 두 입력 중 하나의 입력을 선택할 수 있다. 그림 503에서, 4비트 간 곱셈(4b x 4b)에 대응하는 입력은 선택받지 못하여 비활성화될 수 있다. 도 5b는 상기 도 5a에 도시된 MAC가 하나 이상 있을 때 복수의 MAC 들 사이에서 입력 값을 공유하는 제 1 실시 예를 도시한 것이다. 도 5b에 따르면, 전자 장치(예: 도 2의 전자 장치)는 복수의 MAC를 포함할 수 있다. 복수의 MAC들은 각각 도 5a에서 설명된 연산 과정을 수행할 수 있다. 복수의 MAC들은 하나의 사이클에서 각각 적어도 하나의 A8W8 결 과값을 출력할 수 있다. 전자 장치는 통신 오버헤드를 줄이기 위해 복수의 MAC들 간의 입력값을 공유할 수 있다. 예를 들어, A8W8 의 경우, 전자 장치는 IN0(8비트), IN1(4비트) 및 IN2(4비트)를 포함하여 총 16비트를 공유할 수 있다. MAC k 유닛은 MAC 0 유닛부터 매 사이클마다 각각 다른 1x1 필터의 가중치를 받을 수 있다. k는 자연수를 의미 할 수 있다. 전자 장치는 IN0(8비트), IN1(4비트) 및 IN2(4비트)는 같은 입력값으로 각각의 MAC들에게 제 공할 수 있다. 예를 들어, 전자 장치는 입력 X1 및 X2를 이용하여 IN0(8비트), IN1(4비트) 및 IN2(4비 트)를 결정할 수 있다. X1 및 X2는 8비트 입력 값을 의미할 수 있다. IN0, IN1,IN2 및 IN3를 8개 비트와 4개 비 트 구간으로 분류하고 입력값을 결정하는 과정은 도 4a, 도 4b에서 설명된 바 있다. 전자 장치는 X1, X2에 해당하는 IN0(8비트), IN1(4비트) 및 IN2(4비트)를 결정하고, 결정된 값을 복수의 MAC 들에게 공유할 수 있다. 또한, 전자 장치는 필터 0(filter 0)을 이용하여 사이클 별로 다른 가중치(예:Woo, Wo1)를 부여하여 8비트 의 IN3 값을 결정하고 MAC 0 상으로 전송할 수 있다. 다만, IN3 값은 IN0(8비트), IN1(4비트) 및 IN2(4비트)와 는 다르게 다른 MAC로 공유되는 것은 아닐 수 있다. 전자 장치는 필터 1(filter 1)을 이용하여 사이클 별 로 다른 가중치(예:W11, W1o)를 부여하여 8비트의 IN3 값을 결정하고 MAC 1 상으로 전송할 수 있다. 전자 장치는 필터 k(filter k)을 이용하여 사이클 별로 다른 가중치(예:Wk1, Wko)를 부여하여 8비트의 IN3 값을 결 정하고 MAC k 상으로 전송할 수 있다. 여기서 k는 0 및 자연수를 의미한다. 그림 540은 전자 장치가 프로세서의 제어 하에 컨벌루션을 수행하는 과정을 도시한 것이다. cycle 0 에서 에는 X1이 배정되고, 에는 X2가 배정되고, Woo에는 W가 배정될 수 있다. 하나의 MAC 유닛은 하나의 사이클(예: cycle 0)에서 과 Woo의 곱 연산을 수행하고, 과 Woo의 곱 연산을 수행할 수 있 다. 전자 장치는 두 번의 곱 연산의 결과값을 이용하여 A8W8의 결과값을 얻을 수 있다. cycle 1에서 , 및 Wo1 과 MAC(multiply and accumulate) 연산을 수행할 수 있다. 전자 장치는 cycle i에 서 , 및 Woi 와 MAC(multiply and accumulate) 연산을 수행할 수 있다. i는 0 및 자연수를 의미할 수 있다. 자연수를 나타내는 문자는 i,j 및 k를 포함할 수 있으나 이는 표시의 차이일 뿐 각 문자의 의미는 0 및 자연수를 나타내는 것으로 동일할 수 있다. 전자 장치는 같은 입력값에 대해 여러 필터의 연산을 병렬적으로 수행할 수 있다. 본 문서에 따른 전자 장 치는 하나의 MAC에서 연산이 수행되면 결과값을 기다린 후 연산을 수행하는 직렬 연결 방식과는 다르게 복 수의 MAC 들에서 동시에 연산을 수행할 수 있어 연산 수행에 따른 지연(latency)시간을 감소시킬 수 있다. 컨벌 루션의 중간 출력 결과는 MAC 내 축적기의 register 상에 누적될 수 있다. MAC는 누적이 끝난 결과값을 메모리 (예:SRAM) 상에 저장할 수 있다. 도 6a는 다양한 실시예에 따른 MAC를 이용하여 곱과 합 연산을 통해 A12W12 결과를 얻는 과정을 도시한 것이다. 도 6a에 따르면, 프로세서(예: 도 2의 프로세서)는 2개의 12비트 데이터에 대해 제 1 비트열 데이터의 상 위 네 4개 비트를 제 1 구간(예: 도 4a의 제 1 구간)(IN1) 으로 분류하고, 제 1 비트열 데이터의 하위 여 덟 8개 비트를 제 2 구간(예: 도 4a의 제 2 구간)(IN0)으로 분류할 수 있다. 프로세서는 제 2 비트열 데이터의 상위 네 4개 비트를 제 3 구간(예: 도 4a의 제 3 구간)(IN2)으로 분류하고, 제 2 비트열 데이터 의 하위 여덟 8개 비트를 제 4 구간(예: 도 4a의 제 4 구간)(IN3) 으로 분류할 수 있다. IN0, IN1, IN2 및 IN3를 8개 비트와 4개 비트 구간으로 분류하고 입력값을 결정하는 과정은 도 4a, 도 4b에서 설명된 바 있다. 도 6a에서는 편의를 위해 상위 4개 비트와 하위 8개 비트를 분류하는 것으로 설명했으나 분류 방법은 이것으로 제한되는 것은 아니며 설정에 따라 달라질 수 있다. 제 1 비트열 데이터 및 제 2 비트열 데이터는 12비트(bi t)를 갖는 데이터(예: 이미지 데이터)를 포함할 수 있다. 그림 610은 전자 장치가 컨벌루션을 수행하는 과정을 도시한 것이다. cycle 0에서 에는 입력값 X1이 배정되고, Woo에는 가중치 W가 배정될 수 있다. X1 및 W는 12비트 데이터 를 포함할 수 있다. 12비트 데이터는 상위 4개비트, 하위 8개 비트로 나눠질 수도 있고, 상위 8개 비트, 하위 4 개 비트로 나눠질 수도 있다. 도 6a에서는 12비트 데이터를 상위 4개비트, 하위 8개 비트로 나눠지는 것으로 가 정하여 설명하지만 분류 방식은 이것으로 제한되는 것은 아니며 설정에 따라 달라질 수 있다. 하나의 MAC 유닛은 하나의 사이클(예: cycle 0)에서 과 Woo의 곱 연산을 수행할 수 있다. 전자 장치(20 0)는 X1과 W에 대해 MAC(multiply and accumulate) 연산을 수행할 수 있다. 전자 장치는 X1과 W의 8개 비 트 간 곱을 수행하고 제 1 결과값을 얻을 수 있다. 전자 장치는 X1의 8개 비트와 W의 4개 비트 간 곱을 수행할 수 있다. 그리고 전자 장치는 W의 8개 비 트와 X1의 4개 비트 간 곱을 수행할 수 있다. 전자 장치는 8개 비트와 4개 비트간 곱을 수행하고 각 결과 값을 더해서 제 2 결과값을 얻을 수 있다. 전자 장치는 X1의 4개 비트와 W의 4개 비트 간 곱을 수행하고 제 3 결과값을 얻을 수 있다. 전자 장치 는 제 1 결과값, 제 2 결과값 및 제 3 결과값을 모두 합산하여 하나의 사이클(예: cycle 0)에 대한 A12W12 결과를 얻을 수 있다. 전자 장치는 cycle i에서 및 Woi 에 대한 MAC(multiply and accumulate) 연산을 수행할 수 있다. i는 0 및 자연수를 의미할 수 있다. 하나의 MAC 유닛은 cycle i에 와 Woi를 곱해서 하나의 A12W12 multiply and accumulate 연산을 수행하고, 그 결과를 제 2 축적기 상에 누적하여 저장할 수 있다. 하나의 MAC 유닛은 cycle 0, cycle 1 내지 cycle i 까지 반복하여 multiply and accumulate 연산을 수행하고, 결과를 제 2 축적기 상에 누적하여 저장할 수 있다. 제 1 축적기는 비활성화될 수 있다. A는 8비트와 4비트간 곱 연산의 결과물을 의미할 수 있다. C는 4비트간 곱 연산의 결과물을 의미할 수 있다. 전 자 장치는 A 에 대해 8비트만큼, C에 대해 16비트만큼 상위 비트로 어긋나게 만들어 합 연산을 수행할 수 있다. 전자 장치는 비트 쉬프트를 위한 하드웨어 없이도 A 에 대해 8비트만큼, C에 대해 16비트만큼 상위 비트로 어긋나게 만들어 합 연산을 수행할 수 있다. 멀티플렉서(612, 614, 616)는 컨트롤 신호에 따라 두 입력 중 하나의 입력을 선택할 수 있다. 도 6a에서 멀티플렉서(612, 614, 616) 상에서 선택받지 못한 입력 경로는 비 활성화된 것으로 표시될 수 있다. 도 6b는 다양한 실시예에 따른 복수의 MAC 들 사이에서 입력 값을 공유하는 제 2 실시예를 도시한 것이다. 도 6b에 따르면, 프로세서(예: 도 2의 프로세서)는 2개의 12비트 데이터에 대해 제 1 비트열 데이터의 상위 네 4개 비트를 제 1 구간(예: 도 4a의 제 1 구간)(IN1) 으로 분류하고, 제 1 비트열 데이터의 하위 여덟 8 개 비트를 제 2 구간(예: 도 4a의 제 2 구간)(IN0)으로 분류할 수 있다. 프로세서는 제 2 비트열 데 이터의 상위 네 4개 비트를 제 3 구간(예: 도 4a의 제 3 구간)(IN2)으로 분류하고, 제 2 비트열 데이터의 하위 여덟 8개 비트를 제 4 구간(예: 도 4a의 제 4 구간)(IN3) 으로 분류할 수 있다. 제 1 비트열 데이터 및 제 2 비트열 데이터는 12비트(bit)를 갖는 데이터(예: 이미지 데이터)를 포함할 수 있다. 복수의 MAC들은 각 각은 도 6a에서 설명된 연산 과정을 수행할 수 있다. 복수의 MAC들은 한 사이클에서 각각 하나의 A12W12 결과값 을 출력할 수 있다. 전자 장치는 통신 오버헤드를 줄이기 위해 복수의 MAC들 간의 입력값을 공유할 수 있다. 예를 들어, A12W12의 경우, 전자 장치는 X값에 해당하는 IN0(8비트), IN1(4비트)를 포함하여 총 12비트를 공유할 수 있다. MAC k 유닛은 MAC 0 유닛부터 매 사이클마다 각각 다른 1x1 필터의 가중치를 받을 수 있다. k는 자연수를 의미 할 수 있다. 전자 장치는 IN0(8비트) 및 IN1(4비트)는 같은 입력값으로 각각의 MAC들에게 제공할 수 있다. 예를 들어, 전자 장치는 입력 X1 를 이용하여 IN0(8비트) 및 IN1(4비트)를 결정할 수 있다. X1 는 12개 비 트 입력 값을 의미할 수 있다. IN0 및 IN1의 입력값을 결정하는 과정은 도 4b에서 설명된 바 있으며, 도 6은 다 양한 실시예 중 하나로 이에 제한되지 않는다. 전자 장치는 X1에 해당하는 IN0(8비트) 및 IN1(4비트)를 결 정하고, 결정된 값을 복수의 MAC 들에게 공유할 수 있다. 또한, 전자 장치는 필터 0(filter 0)을 이용하여 사이클 별로 다른 가중치(예:Woo, Wo1)를 부여하여 4비트의 IN2값 및 8비트의 IN3 값을 결정하고 MAC 0 상으로 전송할 수 있다. 다만, IN2 및 IN3 값은 IN0(8비트) 및 IN1(4비트)과는 다르게 다른 MAC로 공유되는 것은 아닐 수 있다. 전자 장치는 필터 1(filter 1)을 이용하여 사이클 별로 다른 가중치(예:W11, W1o)를 부여하여 4 비트의 IN2값 및 8비트의 IN3 값을 결정하고 MAC 1 상으로 전송할 수 있다. 전자 장치는 필터 k(filter k)을 이용하여 사이클 별로 다른 가중치(예:Wk1, Wko)를 부여하여 4비트의 IN2값 및 8비트의 IN3 값을 결정하고 MAC k 상으로 전송할 수 있다. 여기서 k는 0 및 자연수를 의미한다. 전자 장치는 같은 입력값에 대해 여러 필터의 연산을 병렬적으로 수행할 수 있다. 본 문서에 따른 전자 장 치는 하나의 MAC에서 연산이 수행되면 결과값을 기다린 후 연산을 수행하는 직렬 연결 방식과는 다르게 복 수의 MAC 들에서 동시에 연산을 수행할 수 있어 연산 수행에 따른 지연(latency)시간을 감소시킬 수 있다. 컨벌 루션의 중간 출력 결과는 MAC 내 축적기의 register 상에 누적될 수 있다. MAC는 누적이 끝난 결과값을 메모리 (예:SRAM) 상에 저장할 수 있다. 도 7a 및 도 7b는은 8비트 단위 및 4비트 단위로 데이터를 패킹하여 A8W8 및 A12W12 결과를 얻는 과정을 도시한 것이다. 도 7a에서 A8W8에 대응하는 데이터는 8비트의 크기를 가질 수 있다. A8W8은 activation 8bit 및 weight 8bit를 의미할 수 있다. activation은 입력된 데이터의 크기를 의미할 수 있다. 가중치(weight)는 입력된 데이터가 결과에 미치는 영향을 조절하기 위한 변수를 의미할 수 있다. A12W12에 대응하는 데이터는 12비트의 크기를 가질 수 있다. 일반적인 컴퓨터 시스템은 32비트나 64비트를 사용 하기 때문에 12비트의 데이터를 입력 받는 경우 32비트 및 64비트 모두 비트가 남을 수 있다. 예를 들어, 컴퓨 터 시스템은 32비트에 12비트의 데이터를 입력 받는 경우 8비트가 남을 수 있다. 또한, 컴퓨터 시스템은 64비트 에 12비트의 데이터를 입력 받는 경우 4비트가 남을 수 있다. 일 예시에 따르면, A12W12 형태의 데이터를 학습 하는 경우, A12W12가 다른 시스템(예: A8W8)에 비해 효율이 좋을 수 있으나, 낭비되는 비트가 발생할 수 있다. 도 7a에 개시된 전자 장치(예: 도 2의 전자 장치)는 12비트의 데이터를 4비트 및 8비트로 나눠 연산을 수 행할 수 있다. 전자 장치는 별도의 연산 장치를 추가하지 않고서도 3개의 멀티플렉서(mux)와 1개의 비트 쉬프트(bit shift)만을 추가하여 12비트에 대한 연산 및 8비트에 대한 연산을 동시에 수행할 수 있다. 일 실시 예에 따르면, 프로세서(예: 도 2의 프로세서)는 외부 입력에 기반하여 A8W8(activation 8-bit, weight 8- bit)의 결과를 출력할 것인지 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 것인지 결정할 수 있다. 본 문서에 따른 전자 장치는 하나의 MAC 상에서 계산 방법만을 다르게 하여 8비트의 결과물을 출 력하거나 또는 12비트의 결과물을 선택적으로 출력할 수 있다. 전자 장치는 8비트 데이터에 대한 학습 및 12비트 데이터에 대한 학습에 기반한 딥러닝을 선택적으로 수행할 수 있다. 도 7a에 따르면, NPU SRAM은 내부에서 입력 X와 가중치 W에 대한 데이터들을 DRAM(미도시)에서 로딩할 수 있다. 로딩된 데이터는 MAC 유닛들로 전달되기 전 버퍼(buffer)로 이동될 수 있다. 전자 장치는 SRAM의 데이터 중 적어도 일부를 버퍼(buffer)로 이동시킬 수 있다. 도 7b에 따르면, 전자 장치는 A8W8에 대해서는 세 행의 데이터 라인을 SRAM 상에서 로딩하고, A12W12 에 대해서는 네 행의 데이터 라인을 SRAM 상에서 로딩할 수 있다. 전자 장치는 버퍼 내에 포함된 데이터들을 와이어(wire) 또는 멀티플렉서(mux)를 이용하여 MAC의 인 풋으로 제공할 수 있다. 예를 들어, 전자 장치는 A8W8에 대해서는 X010[0:3]을 MAC_0_IN1의 인풋으로 제공 하고, A12W12에 대해서는 X000[8:11]을 MAC_0_IN1의 인풋으로 제공할 수 있다. 예를 들어, 전자 장치는 A8W8에 대해서는 X010[4:7]을 MAC_0_IN2의 인풋으로 제공하고, A12W12에 대해서는 W00[8:11]을 MAC_0_IN2의 인 풋으로 제공할 수 있다. 도 7c는 일 실시예에 따른 A8W8의 경우 3x3 컨벌루션 연산을 수행하는 과정을 도시한 것이다. 도 7c에 따르면, 전자 장치(예: 도 2의 전자 장치)는 3x3 컨벌루션 연산을 수행하기 위해 1x1에 대응하는 피쳐맵을 옮겨가면서 8번을 추가로 누적할 수 있다. 전자 장치는 프로세서(예: 도 2의 프로세서)의 제어 하에, cycle 0 부터 cycle j 까지 1x1x(j+1) 만 큼의 MAC(multiply-and-accumulate) 연산을 누적하고, cycle j+1 부터 cycle 2j+1 까지 누적하여 연산을 수행 할 수 있다. 전자 장치는 1x1에 대응하는 피쳐맵을 옮겨가면서 총 9번 누적하면 총 2개의 3x3x(j+1) 컨벌루션 결과 값 을 얻을 수 있다. 도 7c 는 A8W8 인 경우, 하나의 MAC 이 동일한 3x3x(j+1) 필터를 동시에 두 피쳐맵 영역에 컨볼루션 연산을 적 용하여, MAC의 두 축적기(accumulator) 에서 병렬적으로 아웃풋 피쳐맵의 두 값을 얻는 동작의 실시예를 나타낸 다. MAC의 첫번째 축적기(accumulator)는 아웃풋 피쳐맵의 하나의 값을 얻기 위해 cyc 0 부터 cyc j 까지 1x1x(j+1) 만큼의 multiply-and-accumulate 연산을 누적하고, 피쳐맵 영역을 한 칸 옮겨, 또다시 cyc j+1 부터 cyc 2j+1 까지 누적 연산을 수행할 수 있다. MAC의 첫번째 축적기(accumulator)는 이러한 1x1x(j+1) convolution 연산을 3x3 영역에서 총 9번 누적하여 3x3x(j+1) convolution 연산 결과를 얻을 수 있다 MAC의 두 번째 축적기(accumulator)는 첫번째 축적기(accumulator)상에서 연산을 수행한 피쳐맵 영역에 대해 한 칸 옆의 3x3x(j+1) 영역 상에서 연산을 수행할 수 있다. MAC의 두 번째 축적기(accumulator)는 첫번째 축적기 (accumulator)와 동일한 과정으로 연산을 수행할 수 있다. MAC의 두 번째 축적기(accumulator)는 3x3x(j+1) convolution 연산의 두번째 결과값을 얻을 수 있다.도 8은 일 실시예에 따른 인공지능 모델을 이용하여 연산을 수행하는 전자 장치의 동작 방법을 흐름도로 나타낸 것이다. 도 8을 통하여 설명되는 동작들은 컴퓨터 기록 매체 또는 메모리(예: 도 2의 메모리)에 저장될 수 있는 인 스트럭션들 을 기반으로 구현될 수 있다. 도시된 방법은 앞서 도 1 내지 도 7을 통해 설명한 전자 장치(예: 도 2의 전자 장치)에 의해 실행될 수 있으며, 앞서 설명한 바 있는 기술적 특징은 이하에서 생략 하기로 한다. 도 8의 각 동작의 순서가 변경될 수 있으며, 일부 동작이 생략될 수도 있고, 일부 동작들이 동시 에 수행될 수도 있다. 동작 810에서, 프로세서(예: 도 2의 프로세서)는 12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트 열 데이터를 수신할 수 있다. 프로세서는 센서(예: 카메라)로부터 12비트로 구성된 이미지 데이터를 수신 할 수 있다. 12비트로 구성된 비트열 데이터는 처음부터 12비트의 데이터로 구성될 수 있다. 또는 12비트로 구 성된 비트열 데이터는 다른 비트(예: 8비트 또는 16비트) 데이터가 12비트 포맷으로 변환(preprocessing)되면서 생성될 수도 있다. 동작 820에서, 프로세서는 제 1 비트열 데이터 및 제 2 비트열 데이터를 4개의 구간으로 분류할 수 있다. 일 실시예로서, 프로세서는 제 1 비트열 데이터의 상위 4개 비트를 제 1 구간 으로 분류하고, 제 1 비트열 데이터의 하위 8개 비트를 제 2 구간 으로 분류할 수 있다. 프로세서는 제 2 비트열 데이터의 상위 4개 비 트를 제 3 구간 으로 분류하고, 제 2 비트열 데이터의 하위 8개 비트를 제 4 구간 으로 분류할 수 있다. 또는 일 실시예로서, 프로세서는 제 1 비트열 데이터의 상위 8개 비트를 제 1 구간 으로 분류하고, 제 1 비트열 데이터의 하위 4개 비트를 제 2 구간 으로 분류할 수 있다. 프로세서는 제 2 비트열 데이터의 상위 8개 비 트를 제 3 구간 으로 분류하고, 제 2 비트열 데이터의 하위 4개 비트를 제 4 구간 으로 분류할 수 있다. 이하에 서는 제 1 비트열 데이터의 상위 4개 비트를 제 1 구간으로 분류하고, 하위 8개 비트를 제 2 구간으로 분류하여 연산을 수행하는 것으로 가정하여 설명하지만 분류 방법은 이것으로 제한되는 것은 아니며 설정에 따라 달라질 수 있다. 동작 830에서, 프로세서는 4개의 구간 데이터들의 곱셈을 수행하여 A8W8 또는 A12W12 결과를 출력할 수 있 다. 프로세서는 제 1 구간에 대응하는 비트 내지 상기 제 4 구간에 대응하는 비트의 데이터들의 곱셈을 수 행하고, 곱셈 결과들을 더하여 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있다. 일 실시예에 따르면, 프로세서는 MAC 유닛을 이용하여 상기 제 1 구간 내지 상기 제 4 구간의 데이터들의 곱셈을 수행하고, 곱셈 결과를 가산할 수 있다. 프로세서는 외부 입력(예: 사용자 입력)에 기반하여 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력할 것인지 또는 A12W12(activation 12-bit, weight 12- bit)의 결과를 출력할 것인지 결정할 수 있다. 일 실시예에 따르면, 연산 회로는 복수 개의 멀티플렉서들(multiplexer), 비트 쉬프트(bit shift), 가산기 (adder) 및 저장 공간(accumulator)을 포함할 수 있다. 프로세서는 사용자 입력에 기반하여 연산 회로 내 에서 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력할 수 있는 제 1 경로를 선택하거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있는 제 2 경로를 선택할 수 있다. 일 실시예에 따르면, 프로세서는 사용자 입력에 기반하여 A16W16(activation 16-bit, weight 16-bit)의 결과를 출력할 수 있는 제 3 경로를 선택할 수 있다. 전자 장치는 A8W8-A12W12 MAC array 및 A16W16(or FP16) MAC array를 각각 포함할 수 있다 전자 장치 는 사용자 입력에 기반하여 A8W8-A12W12 MAC array 또는 A16W16(or FP16) MAC array 중 어느 하나를 선택 적으로 사용할 수 있다 본 문서에 따른 인공지능 모델을 이용하여 연산을 수행하는 전자 장치는 동일한 회로에 대해 연산 방법만 을 변경하여 12비트의 데이터 입력에 대해 A8W8의 결과를 출력하거나, 또는 A12W12의 결과를 출력할 수 있다. 전자 장치는 3개의 멀티플렉서 및 1개의 bit shifter만을 추가하여 A8W8 연산도 지원하고, A12W12 연산도 지원하여 이미지 데이터에 대한 딥러닝 효율을 높일 수 있다. MAC(multiply and accumulate)연산을 수행하는 전자 장치는 적어도 하나의 MAC 유닛, SRAM(static random access memory), 1개의 8bx8b 연산기, 2개의 8bx4b 연산기, 1개의 4bx4b 연산기, 비트 시프트(bit shift), 덧셈기, 적어도 하나의 누적회로(accumulator),및 프로세서를 포함하고, 프로세서는 12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터를 수신하고, 제 1 비트열 데이터를 4개 비트 및 8개 비트로 분류하고, 제 2 비트열 데이터를 4개 비트 및 8개 비트로 분류하며, A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하 는 것으로 결정됨에 기반하여 비트 시프터와 제 1 누적회로를 이용하여 A8W8에 대응하는 두 개의 8비트 결과를 출력하고, A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 A12W12에 대응하는 1 개의 12비트 결과를 출력할 수 있다. 프로세서는 제 1 비트열 데이터의 8개 비트와 제 1 비트열 데이터의 4개 비트간 곱 연산을 수행하고, 제 1 비트 열 데이터의 8개 비트와 제 2 비트열 데이터의 4개 비트간 곱 연산을 수행하고, 비트 시프터와 제 1 누적회로 (accumulator)를 이용하여 A8W8에 대응하는 제 1 결과를 출력하고, 제 1 비트열 데이터의 8개 비트와 제 2 비트 열 데이터의 8개 비트간 곱 연산을 수행하고 제 2 누적회로(accumulator)를 이용하여 A8W8에 대응하는 제 2 결 과를 출력하며, A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 제 1 비트열 데이터의 8개 비트와 제 2 비트열 데이터의 8개 비트간 곱 연산을 수행하고, 제 1 비트열 데이터의 4개 비트와 제 2 비트열 데이터의 4개 비트간 곱 연산을 수행하고, 제 1 비트열 데이터의 8개 비트와 제 2 비트열 데이터의 4개 비트간 곱 연산을 수행하고, 제 2 비트열 데이터의 8개 비트와 제 1 비트열 데이터의 4개 비트간 곱 연산을 수행하고, 적어도 하나의 누적회로(accumulator)를 이용하여 A12W12에 대응하는 제 3 결과를 출력할 수 있다. 프로세서는 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 제 1 비트열 데이터의 여덟 비트 상에는 가중치 입력(weight input)을 할당하고, 제 2 비트열 데이터의 여덟 비트 상에는 제 1 데이터를 할당 하고, 제 1 비트열 데이터 및 제 2 비트열 데이터의 네 비트 상에는 제 2 데이터를 할당하며, 제 1 비트열 데이터의 여덟 비트와 제 1 비트열 데이터 및 제 2 비트열 데이터의 네 비트 간 곱 연산을 각각 수 행하고, 비트 시프터와 제 1 누적회로(accumulator)를 이용하여 제 1 결과를 출력하고, 제 1 비트열 데이터의 여덟 비트와 제 2 비트열 데이터의 여덟 비트 간 곱 연산을 수행하여 제 2 누적회로(accumulator)를 이용하여 제 2 결과를 출력할 수 있다. 프로세서는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 제 1 비 트열 데이터의 여덟 비트 및 제 1 비트열 데이터의 네 비트 상에는 가중치 입력(weight input)을 할당 하고, 제 2 비트열 데이터의 여덟 비트 및 네 비트 상에는 제 3 데이터를 할당하며, 제 1 비트열 데이터의 여덟 비트 및 제 2 비트열 데이터의 여덟 비트 간 곱 연산을 수행하고, 제 1 비트열 데이터의 여덟 비트 및 제 2 비트열 데이 터의 네 비트 간 곱 연산을 수행하며, 제 2 비트열 데이터의 여덟 비트 및 제 1 비트열 데이터의 네 비트 간 곱 연산을 수행하며, 제 1 비트열 데이터의 네 비트 및 제 2 비트열 데이터의 네 비트 간 곱 연산을 수행하고, 비 트 시프트와 적어도 하나의 누적회로(accumulator)를 이용하여 제 3 결과를 출력할 수 있다. 제 1 구간은 제 1 비트열 데이터의 네 비트를 지칭하고, 제 2 구간은 제 1 비트열 데이터의 여덟 비트를 지칭하 며, 제 3 구간은 제 2 비트열 데이터의 네 비트를 지칭하고, 제 4 구간은 제 2 비트열 데이터의 여덟 비트를 지 칭하며, 프로세서는 제 2 구간에 대응하는 비트 및 제 4 구간에 대응하는 비트에 대한 곱셈을 수행하여 제 1 결 과값을 결정하고, 제 4 구간에 대응하는 비트 및 제 3 구간에 대응하는 비트에 대한 곱셈을 수행하고, 곱셉으로 얻어진 결과 값에 대해 비트 시프터를 이용하여 상위 방향으로 4비트를 이동시켜 제 2 결과값을 결정하고, 제 4 구간에 대응하는 비트 및 제 1 구간에 대응하는 비트에 대한 곱셈을 수행하여 제 3 결과값을 결정하며, 제 1 결 과값을 출력하고, 제 2 결과값 및 제 3 결과값에 대한 합 연산을 수행하고 결과를 출력 할 수 있다. 프로세서는 제 2 구간에 대응하는 비트 및 제 4 구간에 대응하는 비트에 대한 곱 연산을 수행하고 결과를 저장 할 수 있다. 프로세서는 12비트(bits)로 구성된 제 1 비트열 데이터 및 제 2 비트열 데이터에 대해 8비트로 나눠진 구간들의 곱 연산을 수행하고 제 1 값을 결정하고, 8비트와 4비트 구간들의 곱 연산을 수행하고 제 2 값을 결정하고, 4비 트로 나눠진 구간들의 곱 연산을 수행하고 제 3 값을 결정하며, 제 1 값, 제 2 값 및 제 3 값을 합하여 결과를 누적하여 저장할 수 있다. 전자 장치는 연산 회로, 메모리, 및 프로세서를 포함하고, 연산 회로는 복수 개의 멀티플렉서들(multiplexer), 비트 쉬프트(bit shift), 가산기(adder) 및 저장 공간(accumulator)을 포함하며, 프로세서는 사용자 입력에 기 반하여 연산 회로 내에서 A8W8(activation 8-bit, weight 8-bit)의 결과를 출력할 수 있는 제 1 경로를 선택하 거나 또는 A12W12(activation 12-bit, weight 12-bit)의 결과를 출력할 수 있는 제 2 경로를 선택할 수 있다.인공지능 모델을 이용하여 연산을 수행하는 전자 장치의 동작 방법은 12비트(bits)로 구성된 제 1 비트열 데이 터 및 제 2 비트열 데이터를 수신하는 동작, 제 1 비트열 데이터를 네 비트 및 여덟 비트로 분류하는 동작, 제 2 비트열 데이터를 네 비트 및 여덟 비트로 분류하는 동작, A8W8(activation 8-bit, weight 8-bit)의 결과를 출력하는 것으로 결정됨에 기반하여 비트 시프터와 제 1 누적회로를 이용하여 A8W8에 대응하는 두 개의 8비트 결과를 출력하는 동작, A12W12(activation 12-bit, weight 12-bit)의 결과를 출력하는 것으로 결정됨에 기반하 여 A12W12에 대응하는 1 개의 12비트 결과를 출력하는 동작을 포함할 수 있다."}
{"patent_id": "10-2023-0104046", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 일 실시예에 따른 전자 장치의 구성을 블록도로 나타낸 것이다. 도 3a는 다양한 실시예에 따른 곱셈과 결과 누적을 수행하는 MAC(multiply and accumulate)의 구조를 도시한 것 이다. 도 3b는 다양한 실시예에 따른 4bit 데이터 간의 곱셈 방식을 나타낸 것이다. 도 4a는 다양한 실시예에 따른 12bit 데이터들을 4개의 구간으로 분류하는 과정을 도시한 것이다. 도 4b는 다양한 실시예에 따른 4개의 구간으로 분류된 데이터의 곱과 합 연산을 통해 A8W8 결과를 얻는 과정을 도시한 것이다. 도 4c는 다양한 실시예에 따른 4개의 구간으로 분류된 데이터의 곱과 합 연산을 통해 A12W12 결과를 얻는 과정 을 도시한 것이다. 도 5a는 다양한 실시예에 따른 MAC를 이용하여 곱과 합 연산을 통해 A8W8 결과를 얻는 과정을 도시한 것이다. 도 5b는 도 5a에 도시된 MAC가 복수 개 있을 때 복수의 MAC 들 사이에서 입력 값을 공유하는 제 1 실시예를 도 시한 것이다. 도 6a는 다양한 실시예에 따른 MAC를 이용하여 곱과 합 연산을 통해 A12W12 결과를 얻는 과정을 도시한 것이다. 도 6b는 다양한 실시예에 따른 복수의 MAC 들 사이에서 입력 값을 공유하는 제 2 실시예를 도시한 것이다. 도 7a 및 도 7b는 다양한 실시예에 따른 8비트 단위 및 4비트 단위로 데이터를 패킹하여 A8W8 및 A12W12 결과를 얻는 과정을 도시한 것이다. 도 7c는 일 실시예에 따른 3x3 컨벌루션 연산을 수행하는 과정을 도시한 것이다. 도 8은 일 실시예에 따른 인공지능 모델을 이용하여 연산을 수행하는 전자 장치의 동작 방법을 흐름도로 나타낸 것이다."}
