{"patent_id": "10-2023-0105900", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0024404", "출원번호": "10-2023-0105900", "발명의 명칭": "파이썬 언어를 이용하여 실시간 다중 태스크를 제어하는 장치 및 방법", "출원인": "서울과학기술대학교 산학협력단", "발명자": "최병욱"}}
{"patent_id": "10-2023-0105900", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "파이썬(Python) 언어를 이용하여 실시간 다중 태스크(task)를 제어하는 장치에 있어서,리눅스를 실시간성을 지원할 수 있는 운영체제로 패치(patch)하는 모듈(120, 102);상기 파이썬 언어 기반으로 실시간 제약조건을 가진 실시간 태스크를 생성하는 제1 파이썬 모듈(100);상기 파이썬 언어 기반으로 상기 이더캣 마스터 코어와 연동하여 이더캣 네트워크를 제어하는 제2 파이썬 모듈(110); 실시간 필드버스 인터페이스를 위해 IgH 이더캣(EtherCAT: Ethernet for Control Automation Technology) 마스터 모듈(114)과 연동된 이더캣 마스터 코어(112); 및미리 설정된 언어 모듈을 통해 상기 제1 파이썬 모듈과 상기 제2 파이썬 모듈을 구동시키기 위한 라이브러리를로딩하도록 구현되는 FFI(Foreign Function Interface)(130)를 포함하는, 실시간 다중 태스크 제어 장치."}
{"patent_id": "10-2023-0105900", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 제1 파이썬 모듈은 상기 FFI를 통해 실시간(RT: Real-Time)-POSIX(Portable Operating System Interface)라이브러리를 로딩하고, 로딩된 라이브러리를 사용하여 C언어로 작성된 함수들을 호출함을 특징으로 하는, 실시간 다중 태스크 제어 장치."}
{"patent_id": "10-2023-0105900", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 제2 파이썬 모듈은 상기 FFI를 통해 이더캣 마스터 코어 라이브러리를 로딩하고, 로딩된 라이브러리를 사용하여 C언어로 작성된 함수들을 호출함을 특징으로 하는, 실시간 다중 태스크 제어 장치."}
{"patent_id": "10-2023-0105900", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 미리 설정된 언어 모듈은 C타입(CTypes) 언어 모듈을 포함하며, 상기 FFI는 상기 C타입 언어 모듈로 구현됨을 특징으로 하는, 실시간 다중 태스크 제어 장치."}
{"patent_id": "10-2023-0105900", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "파이썬(Python) 언어를 이용하여 실시간 다중 태스크(task)를 제어하는 방법에 있어서,제1 파이썬 모듈(100)이 FFI(Foreign Function Interface)(130)를 통해 실시간(RT: Real-Time)-POSIX(PortableOperating System Interface) 라이브러리를 로딩하는 단계;상기 로딩된 RT-POSIX 라이브러리를 사용하여 C언어로 작성된 함수들을 호출하여 실시간 제약조건을 가진 실시간 태스크를 생성하는 단계;제2 파이썬 모듈(110)이 상기 FFI를 통해 이더캣(EtherCAT: Ethernet for Control Automation Technology) 마공개특허 10-2025-0024404-3-스터 코어 라이브러리를 로딩하는 단계; 및상기 로딩된 이더캣 마스터 코어 라이브러리를 사용하여 C언어로 작성된 함수들을 호출하여 이더캣 네트워크를제어하는 단계;를 포함하는, 실시간 다중 태스크 제어 방법."}
{"patent_id": "10-2023-0105900", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "파이썬(Python) 언어를 이용하여 실시간 다중 태스크(task)를 제어하는 장치에 있어서, 리눅스를 실시간성을 지 원할 수 있는 운영체제로 패치(patch)하는 모듈(120, 102); 상기 파이썬 언어 기반으로 실시간 제약조건을 가진 실시간 태스크를 생성하는 제1 파이썬 모듈; 상기 파이썬 언어 기반으로 상기 이더캣 마스터 코어와 연동하 여 이더캣 네트워크를 제어하는 제2 파이썬 모듈; 실시간 필드버스 인터페이스를 위해 IgH 이더캣 (EtherCAT: Ethernet for Control Automation Technology) 마스터 모듈과 연동된 이더캣 마스터 코어 ; 및 미리 설정된 언어 모듈을 통해 상기 제1 파이썬 모듈과 상기 제2 파이썬 모듈을 구동시키기 위한 라이 브러리를 로딩하도록 구현되는 FFI를 포함한다."}
{"patent_id": "10-2023-0105900", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 파이썬 언어를 이용하여 실시간 다중 태스크를 제어하는 장치 및 방법에 관한 것이다."}
{"patent_id": "10-2023-0105900", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 인공지능 기술은 로봇, 사물 인터넷(IoT: Internet of Things), 자율주행 자동차 등 사회 및 산업 시설 전 반에 적용되고 있으며, 이러한 기술의 구현을 위한 연구 및 개발은 주로 파이썬(Python) 언어를 기반으로 이루 어지고 있다. 파이썬 언어는 직관적인 문법과 낮은 진입 장벽, 데이터 처리를 위한 다양한 라이브러리를 제공하며, 특히 텐서 플로우(Tensorflow), 파이토치(Pytorch), 케라스(Keras)와 같은 인공지능 및 기계학습 라이브러리로 많이 활용 된다. 그러나 파이썬 언어는 인터프리터 언어의 특징으로 인해 처리 성능이 컴파일 언어인 C/C++와 비교하여 상대적으 로 낮을 수 있으며, 이는 일부의 경우에 성능 문제를 야기할 수 있다. 이러한 문제를 해결하기 위해 C언어 기반 의 확장 모듈, JIT(Just-in-Time) 컴파일러, 코드 최적화 등 다양한 접근방식을 활용할 수 있다. 또한 파이썬은 실시간 제약조건을 보장하지 못하는 문제가 있다. 실시간 제약조건은 시스템이 주어진 목표 시간 에 따라 동작해야 하는 제약사항을 의미하며 제어 장치에 있어 필수적으로 요구되는 조건이다. 이는 외부 환경 이나 사용자의 요구에 신속하게 응답하고, 주어진 목표 시간 내에 원하는 결과를 획득해야 함을 의미한다. 이러 한 실시간 제약조건은 의료기기, 자동차의 안전 시스템, 제조 공정, 로봇 제어 시스템, 군사 장비와 같은 여러 산업 분야에서 중요한 역할을 하고 있으나, 파이썬은 실시간 제약조건을 충족하기 어려워 실시간 제어 시스템의 언어로 적용하기에는 한계점이 존재한다. 뿐만 아니라 산업용 필드버스로써 실시간 제어를 위한 직렬 통신 수단으로 사용되는 이더캣(EtherCAT)은 주로 PLC(Programmable Logic Controller) 또는 C/C++ 언어로 구현되며, PLC 또는 C/C++ 언어는 파이썬에서 직접적 으로 사용하기 어려운 문제가 있다. 이와 같이 파이썬 언어는 인공지능 및 기계학습 분야에서 많이 사용되지만, 실시간 제약조건을 충족해야 하는 기계장치의 제어 시스템이나 일부 산업용 필드버스와의 통합에서는 한계점이 존재하며 인공지능 응용이 통합된 제어 시스템에서의 활용이 제한되는 단점이 존재한다. 선행기술문헌 특허문헌 (특허문헌 0001) 한국등록특허공보 제10-2006211호"}
{"patent_id": "10-2023-0105900", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 상기와 같은 문제를 해결하기 위해 안출된 것으로, 본 발명의 목적은 파이썬 언어를 이용하여 실시간 다중 태스크를 제어하는 장치 및 방법을 제공하는 것이다."}
{"patent_id": "10-2023-0105900", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 목적을 달성하기 위한 본 발명의 일 실시예에 따른 파이썬(Python) 언어를 이용하여 실시간 다중 태스크 (task)를 제어하는 장치는, 리눅스를 실시간성을 지원할 수 있는 운영체제로 패치(patch)하는 모듈(120, 102); 상기 파이썬 언어 기반으로 실시간 제약조건을 가진 실시간 태스크를 생성하는 제1 파이썬 모듈; 상기 파 이썬 언어 기반으로 상기 이더캣 마스터 코어와 연동하여 이더캣 네트워크를 제어하는 제2 파이썬 모듈; 실시간 필드버스 인터페이스를 위해 IgH 이더캣(EtherCAT: Ethernet for Control Automation Technology) 마스 터 모듈과 연동된 이더캣 마스터 코어 및 미리 설정된 언어 모듈을 통해 상기 제1 파이썬 모듈과 상기 제2 파이썬 모듈을 구동시키기 위한 라이브러리를 로딩하도록 구현되는 FFI를 포함한다. 상기 목적을 달성하기 위한 본 발명의 일 실시예에 따른 파이썬(Python) 언어를 이용하여 실시간 다중 태스크 (task)를 제어하는 방법은, 제1 파이썬 모듈이 FFI를 통해 RT-POSIX 라이브러리를 로딩하는 단계; 상 기 로딩된 RT-POSIX 라이브러리를 사용하여 C언어로 작성된 함수들을 호출하여 실시간 제약조건을 가진 실시간 태스크를 생성하는 단계; 제2 파이썬 모듈이 상기 FFI를 통해 이더캣 마스터 코어 라이브러리를 로딩하는 단계; 및 상기 로딩된 이더캣 마스터 코어 라이브러리를 사용하여 C언어로 작성된 함수들을 호출하여 이더캣 네 트워크를 제어하는 단계;를 포함한다."}
{"patent_id": "10-2023-0105900", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "상술한 본 발명의 일측면에 따르면, 파이썬 언어를 이용하여 실시간 다중 태스크를 제어하는 장치 및 방법을 제 공함으로써, 파이썬 언어의 직관적인 문법과 낮은 진입 장벽, 다양한 라이브러리를 활용하여 제어 시스템 개발 의 어려움을 개선하며 이를 통해 실시간 제어 시스템을 구축하는 프로세스가 간소화되고 효율성이 향상되는 효 과가 있다. 뿐만 아니라 파이썬 언어는 이미 다양한 분야에서 널리 사용되는 언어로써 인공지능 및 데이터 처리와 관련된 라이브러리와의 통합이 용이하여 실현 가능성이 높으며, 빠르고 유연한 개발이 가능하므로 제어 시스템 개발의 생산성과 유지보수성을 향상시키는데 도움이 된다."}
{"patent_id": "10-2023-0105900", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "후술하는 본 발명에 대한 상세한 설명은, 본 발명이 실시될 수 있는 특정 실시예를 예시로서 도시하는 첨부 도 면을 참조한다. 이들 실시예는 당업자가 본 발명을 실시할 수 있기에 충분하도록 상세히 설명된다. 본 발명의 다양한 실시예는 서로 다르지만 상호 배타적일 필요는 없음이 이해되어야 한다. 예를 들어, 여기에 기재되어 있 는 특정 형상, 구조 및 특성은 일 실시예와 관련하여 본 발명의 정신 및 범위를 벗어나지 않으면서 다른 실시예 로 구현될 수 있다. 또한, 각각의 개시된 실시예 내의 개별 구성요소의 위치 또는 배치는 본 발명의 정신 및 범 위를 벗어나지 않으면서 변경될 수 있음이 이해되어야 한다. 따라서, 후술하는 상세한 설명은 한정적인 의미로 서 취하려는 것이 아니며, 본 발명의 범위는, 적절하게 설명된다면, 그 청구항들이 주장하는 것과 균등한 모든 범위와 더불어 첨부된 청구항에 의해서만 한정된다. 도면에서 유사한 참조부호는 여러 측면에 걸쳐서 동일하거 나 유사한 기능을 지칭한다. 본 발명에 따른 구성요소들은 물리적인 구분이 아니라 기능적인 구분에 의해서 정의되는 구성요소들로써 각각이 수행하는 기능들에 의해서 정의될 수 있다. 각각의 구성요소들은 하드웨어 또는 각각의 기능을 수행하는 프로그램 코드 및 프로세싱 유닛으로 구현될 수 있을 것이며, 두 개 이상의 구성요소의 기능이 하나의 구성요소에 포 함되어 구현될 수도 있을 것이다. 따라서 이하의 실시예에서 구성요소에 부여되는 명칭은 각각의 구성요소를 물 리적으로 구분하기 위한 것이 아니라 각각의 구성요소가 수행되는 대표적인 기능을 암시하기 위해서 부여된 것 이며, 구성요소의 명칭에 의해서 본 발명의 기술적 사상이 한정되지 않는 것임에 유의하여야 한다. 이하에서는 도면들을 참조하여 본 발명의 바람직한 실시예들을 보다 상세하게 설명하기로 한다. 도 1은 본 발명의 실시예에 따른 파이썬 언어를 이용하여 실시간 다중 태스크를 제어하는 장치의 소프트웨어 아 키텍처를 나타낸 도면이다. 제1 파이썬 모듈인 PyRT(Python-based Real-Time) 모듈 및 실시간(RT: Real-Time)-POSIX(Portable Operating System Interface) 모듈은 실시간 태스크를 생성하고 관리하는데 필요한 구성 요소를 나타내고, 제2 파이썬 모듈인 PyIgH(Python-based IgH) 모듈, 이더캣(EtherCAT: Ethernet for Control Automation Technology) 마스터 코어(Core) 및 IgH 이더캣 마스터 모듈은 이더캣 관련 구성 요소를 나타내고, RT-Preempt 커널(Kernel)은 상기 RT-POSIX 모듈과 함께 리눅스를 실시간성을 지원할 수 있는 운영체 제로 패치(patch)하는 모듈이다. 이더캣 제어를 위한 실시간 응용 프로그램을 개발하기 위한 필수 구성 요소는 도 1에 점선으로 그룹핑하여 표시 하였고, 이더캣 마스터 코어의 라이브러리, 파이썬에서 동적 라이브러리를 사용할 수 있도록 하는 FFI(Foreign Function Interface), 파이썬 모듈인 PyRT(Python-based Real-Time) 모듈 및 PyIgH(Python-based IgH) 모듈이 상기 필수 구성 요소에 포함된다. 이더캣 마스터 코어는 실시간 필드버스 인터페이스를 위해 IgH 이더캣 마스터 모듈과 연동되며, 사용 자의 주의가 필요 없는 IgH 이더캣 마스터 API(Application Programing Interface) 및 라이브러리를 기반으로 이더캣 관련 시스템 레벨 루틴을 추상화하기 위해 개발되었다. 마스터 베이스(112-1)는 연결된 슬레이브에 따라 이더캣 마스터의 구성을 처리하고, 각 슬레이브는 각각의 슬레이브 베이스(112-4) 인스턴스에 의해 기술되어야 한다. 현재 형태에서 이더캣 마스터 코어는 서보 드라이브를 지원한다. PyRT 모듈은 파이썬 언어 기반으로 실시간 제약조건을 가진 실시간 태스크(RT Task)를 생성하고, PyIgH 모 듈은 파이썬 언어 기반으로 이더캣 마스터 코어와 연동하여 이더캣 네트워크를 제어한다. FFI는 미리 설정된 언어 모듈, 일례로 C타입(CTypes), CFFI(C Foreign Function Interface) 또는 SWIG(Simplified Wrapper and Interface Generator)로 구현될 수 있다. 본 발명의 실시예에 따른 FFI는 C 타입을 통해 PyRT 모듈과 PyIgH 모듈을 구동시키기 위한 함수를 호출하고 GIL(Global Interpreter Lock)을 해제하여 원하지 않는 지연이나 시스템 충돌을 방지하고, 필요한 동적 라이브러리, 즉 이더캣 마스터 코어 라이브러리, RT-POSIX 라이브러리를 파이썬에 로드한다. PyIgH 모듈은 공유 라이브러리인 libethercat을 사용하여 도메인 활성화, 슬레이브 초기화, 분산 클럭 동 기화, 데이터 교환 및 상태 확인 기능을 수행한다. 이하에서는 도 2를 통해 이러한 기능 래퍼(wrapper)에 대해 보다 상세히 설명하도록 한다. 도 2는 파이썬 함수를 기능 래퍼를 통해 구현한 함수 리스트를 나타낸 도면이고, 도 3은 본 발명의 실시예에 따 른 이더캣 마스터 코어의 클래스 다이어그램을 나타낸 도면이다. ecat_init_slave() 함수는 이더캣 슬레이브를 초기화하기 위해 호출되며, 다음과 같은 몇 가지 중요한 단계를 수행한다. 먼저 ecrt_request_master() 함수를 사용하여 이더캣 마스터 인스턴스에 실시간 사용자 공간 동작을 요청하고, 이를 통해 응용 프로그램은 이더캣 시스템을 사용할 수 있다. 다음으로 ecrt_master_create_domain() 함수를 사용하여 프로세스 데이터 교환을 위한 프로세스 데이터 도메인 을 생성한다. 상기 프로세스 데이터 도메인은 실시간으로 슬레이브 간에 데이터를 전송하는 데 사용되는 프로토 콜인 PDO(Process data object)를 등록하고 주기적으로 교환하는 데 중요하며, 이후 ecrt_master_slave_config() 함수를 사용하여 슬레이브 구성 객체를 생성한다. 상기 ecrt_master_slave_config() 함수는 별칭과 위치를 입력으로 사용하며 지정된 주소를 가진 슬레이브의 벤더 식 별자(ID: Identifier)와 제품 코드를 지정된 값과 비교한다. 이때 벤더 ID와 제품 코드가 지정된 값과 불일치할 경우에는 슬레이브가 구성되지 않고 오류가 발생한다.ecrt_slave_config_pdos() 함수는 마스터에 대한 전체 PDO 매핑 구성을 지정하는데 사용되며, 생성된 도메인에 대한 PDO 항목은 ecrt_domain_reg_pdo_entry_list() 함수를 사용하여 등록된다. 이는 이더캣 슬레이브를 초기 화하는 과정에서 중요한 단계에 해당한다. 마지막으로, ecrt_slave_config_dc() 함수를 사용하여 분산 클럭의 사용을 활성화하고 구성한다. 이는 이더캣 슬레이브 장치의 동기 통신을 보장하며, 데이터는 순환 작업 중에 따라야 할 중요한 시퀀스를 수신한다. 즉, 이 더넷(Ethernet) 장치 버퍼로부터 저장된 데이터그램을 가져오고 이더캣 프레임의 상태 또는 작업 카운터를 결정 한다. 이러한 프로세스는 ecat_master_receive() 함수, ecat_domain_process() 함수 순으로 마스터 및 슬레이브의 상 태를 확인하는 즉시 수행된다. 데이터는 데이터그램을 처리하고 다음 명령 집합을 작성한 후 전송되며, 이는 장 치의 버퍼로 다시 복사되고 ecat_domain_queue() 함수를 사용하여 슬레이브로 다시 전송된다. 상기 ecat_domain_queue() 함수는 큐에 있는 모든 데이터그램을 전송하는 cat_master_send() 함수의 다음 호출에서 데이터그램을 교환할 수 있도록 데이터그램을 대기열에 넣는다. 분산 클럭 동기화는 ecat_write_apptime() 함수를 사용하여 슬레이브 장치의 DC 동기화와 일치하도록 구현된다. 상태 확인은 마스터의 상태, 슬레이브 장치의 제품 코드 및 공급업체(vendor) ID와 같은 특정 정보와 상태를 결 정하는 데 사용되며, 이것은 ecat_get_slave_info() 함수, get_master_status() 함수, check_slave_state() 함 수이다. 이러한 기능들은 도 3의 마스터 베이스 클래스(112-1) 및 슬레이브 베이스 클래스(112-4)의 메소드로 구현된다. 이더캣 통신을 활성화하려면 PDO 도메인 매핑을 직접 등록해야 하며, 이러한 작업을 완화하기 위해 슬레이브 베 이스 클래스(112-4)를 구현한다. 아울러 이더캣 도메인 관리 및 디버깅의 편의를 위해 슬레이브 별 데이터 송수 신 작업을 구분하여 2개의 도메인을 구성하여 생성한다. 슬레이브 베이스 클래스(112-4)는 마스터-슬레이브 관계 설정 기능을 수행하도록 구성되며, 상기 마스터-슬레이 브 관계 설정 기능은 일례로 PDO 매핑, DC 활성화, 슬레이브 상태 확인 등이 될 수 있다. 슬레이브 서보 클래스(112-2)는 슬레이브 베이스 클래스(112-4)에 상속되는 자식 클래스를 의미하며, CANOpen- over-EtherCAT(CoE)를 사용하는 서보 드라이버용 클래스로써 기능한다. 반면, 슬레이브 IO(Input/Output) 클래 스는 디지털 또는 아날로그 입출력 장치의 제어를 담당하는 또 다른 자식 클래스를 의미한다. 도 4는 본 발명의 실시예에 따른 파이썬 언어를 이용하여 실시간 다중 태스크를 제어하는 장치의 동작을 나타낸 순서도이다. 본 발명의 실시예에 따른 실시간 다중 태스크 제어 장치의 제1 파이썬 모듈인 PyRT 모듈은 FFI를 통해 RT-POSIX 라이브러리를 로딩하고,(S402) S402에서 로딩한 라이브러리를 사용하여 C언어로 작성된 함수들을 호출하여 실시 간 제약조건을 가진 실시간 태스크를 생성한다.(S404) 상기 실시간 다중 태스크 제어 장치의 제2 파이썬 모듈인 PyIgH 모듈은 FFI를 통해 이더캣 마스터 코어 라이브 러리를 로딩하고,(S406) S406에서 로딩한 라이브러리를 사용하여 C언어로 작성된 함수들을 호출하여 이더캣 네 트워크를 제어한다.(S408) 위와 같은 본 발명의 파이썬 언어를 이용한 실시간 다중 태스크 제어 방법은 다양한 컴퓨터 구성요소를 통하여 수행될 수 있는 프로그램 명령어의 형태로 구현되어 컴퓨터 판독 가능한 기록 매체에 기록될 수 있다. 상기 컴 퓨터 판독 가능한 기록 매체는 프로그램 명령어, 데이터 파일, 데이터 구조 등을 단독으로 또는 조합하여 포함 할 수 있다. 상기 컴퓨터 판독 가능한 기록 매체에 기록되는 프로그램 명령어는 본 발명을 위하여 특별히 설계되고 구성된 것들이거나 컴퓨터 소프트웨어 분야의 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능한 기록 매체의 예에는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD- ROM, DVD 와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 ROM, RAM, 플래시 메모리 등과 같은 프로그램 명령어를 저장하고 수행하도록 특별히 구성된 하드웨 어 장치가 포함된다. 프로그램 명령어의 예에는, 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사 용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드도 포함된다. 상기 하드웨어 장치는 본 발명에 따른 처리를 수행하기 위해 하나 이상의 소프트웨어 모듈로서 작동하도록 구성될 수 있으며, 그 역도 마찬가지이다. 이상에서는 본 발명의 다양한 실시예에 대하여 도시하고 설명하였지만, 본 발명은 상술한 특정의 실시예에 한정"}
{"patent_id": "10-2023-0105900", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "되지 아니하며, 청구범위에서 청구하는 본 발명의 요지를 벗어남이 없이 당해 발명이 속하는 기술분야에서 통상 의 지식을 가진 자에 의해 다양한 변형실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 발명의 기술적 사 상이나 전망으로부터 개별적으로 이해되어져서는 안될 것이다."}
{"patent_id": "10-2023-0105900", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 실시예에 따른 파이썬 언어를 이용하여 실시간 다중 태스크를 제어하는 소프트웨어 아키텍처 를 나타낸 도면, 도 2는 파이썬 함수를 기능 래퍼를 통해 구현한 함수 리스트를 나타낸 도면, 도 3은 본 발명의 실시예에 따른 이더캣 마스터 코어의 클래스 다이어그램을 나타낸 도면, 그리고, 도 4는 본 발명의 실시예에 따른 파이썬 언어를 이용하여 실시간 다중 태스크를 제어하는 장치의 동작 을 나타낸 순서도."}
