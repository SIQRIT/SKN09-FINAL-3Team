{"patent_id": "10-2019-0044380", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2020-0121611", "출원번호": "10-2019-0044380", "발명의 명칭": "서버 및 그 제어 방법", "출원인": "삼성전자주식회사", "발명자": "이남기"}}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "서버의 제어 방법에 있어서,프로그램에 대한 코드 정보를 획득하는 단계;기설정된 코드 스타일 룰에 기초하여 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하는 단계;상기 판단된 코드 스타일에 대한 적어도 하나의 에러 정보를 획득하는 단계; 및상기 코드 스타일 룰이 학습된 인공지능 모델에 상기 코드 정보 및 상기 에러 정보를 입력하여 상기 코드 스타일을 수정하는 단계;를 포함하는 제어 방법."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 에러를 판단하는 단계는,적어도 하나의 코드 스타일 체크 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러를 판단하는 것을특징으로 하는 제어 방법."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2 항에 있어서,상기 에러 정보를 획득하는 단계는,상기 적어도 하나의 코드 스타일 체크 툴 중 제1 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러가검출되면, 상기 제1 툴과 관련된 제1 타입의 에러 정보를 획득하고,상기 적어도 하나의 코드 스타일 체크 툴 중 제2 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러가검출되면, 상기 제2 툴과 관련된 제2 타입의 에러 정보를 획득하는 것을 특징으로 하는 제어 방법."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서,상기 인공지능 모델은,상기 기설정된 코드 스타일 룰 및 상기 제1 타입의 에러 정보를 바탕으로 학습되는 것을 특징으로 하는 제어 방법."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 3 항에 있어서,상기 인공지능 모델은,상기 인공지능 모델에 상기 제1 타입의 에러 정보가 입력된 이후, 상기 제1 타입의 에러 정보와 상이한 상기 제2 타입의 에러 정보가 연속해서 입력되면, 상기 기설정된 코드 스타일 룰, 상기 코드 정보 및 상기 제2 타입의에러 정보를 바탕으로 학습되는 것을 특징으로 하는 제어 방법."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "공개특허 10-2020-0121611-3-제 1 항에 있어서,상기 코드 스타일 룰을 입력받는 단계;를 더 포함하며,상기 판단하는 단계는,상기 코드 스타일 룰과 관련하여 변경된 코드 스타일 룰이 입력되면, 상기 변경된 코드 스타일 룰에 기초하여상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하며,상기 수정하는 단계는,상기 변경된 코드 스타일 룰이 학습된 상기 인공지능 모델을 이용하여 상기 코드 스타일을 수정하는 특징으로하는 제어 방법."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 1 항에 있어서,상기 획득된 코드 정보에 대한 Build Test를 수행하여 상기 프로그램이 정상적으로 동작하는지 여부를 판단하는단계;를 더 포함하며,상기 에러를 판단하는 단계는,상기 프로그램이 정상적으로 동작하면, 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하는 것을 특징으로 하는 제어 방법."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1 항에 있어서,상기 수정된 코드 스타일을 포함하는 코드 정보를 저장하는 단계;를 더 포함하며,상기 저장하는 단계는,상기 코드 정보에 포함된 코드 스타일에 대한 에러가 없는 것으로 판단되면, 상기 코드 정보를 저장하는 것을특징으로 하는 제어 방법."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "서버에 있어서,회로를 포함하는 통신부;적어도 하나의 인스트럭션을 포함하는 메모리; 및상기 적어도 하나의 인스트럭션을 실행하는 프로세서;를 포함하며,상기 프로세서는,상기 통신부를 통해 적어도 하나의 사용자 단말 장치로부터 수신된 프로그램에 대한 코드 정보가 획득되면, 기설정된 코드 스타일 룰에 기초하여 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하고,상기 판단된 코드 스타일에 대한 적어도 하나의 에러 정보를 획득하며,상기 코드 스타일 룰이 학습된 인공지능 모델에 상기 코드 정보 및 상기 에러 정보를 입력하여 상기 코드 스타일을 수정하는 서버."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 9 항에 있어서,상기 프로세서는,적어도 하나의 코드 스타일 체크 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러를 판단하는 것을공개특허 10-2020-0121611-4-특징으로 하는 서버."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 10 항에 있어서,상기 프로세서는,상기 적어도 하나의 코드 스타일 체크 툴 중 제1 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러가검출되면, 상기 제1 툴과 관련된 제1 타입의 에러 정보를 획득하고,상기 적어도 하나의 코드 스타일 체크 툴 중 제2 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러가검출되면, 상기 제2 툴과 관련된 제2 타입의 에러 정보를 획득하는 것을 특징으로 하는 서버."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서,상기 인공지능 모델은,상기 기설정된 코드 스타일 룰 및 상기 제1 타입의 에러 정보를 바탕으로 학습되는 것을 특징으로 하는 서버."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 11 항에 있어서,상기 인공지능 모델은,상기 인공지능 모델에 상기 제1 타입의 에러 정보가 입력된 이후, 상기 제1 타입의 에러 정보와 상이한 상기 제2 타입의 에러 정보가 연속해서 입력되면, 상기 기설정된 코드 스타일 룰, 상기 코드 정보 및 상기 제2 타입의에러 정보를 바탕으로 학습되는 것을 특징으로 하는 서버."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 9 항에 있어서,상기 프로세서는,상기 코스 스타일 룰과 관련하여 변경된 코드 스타일 룰이 입력되면, 상기 변경된 코드 스타일 룰에 기초하여상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하고,상기 변경된 코드 스타일 룰이 학습된 상기 인공지능 모델을 이용하여 상기 코드 스타일을 수정하는 것을 특징으로 하는 서버."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 9 항에 있어서,상기 프로세서는,상기 획득된 코드 정보에 대한 Build Test를 수행하여 상기 프로그램이 정상적으로 동작하는지 여부를판단하고, 상기 프로그램이 정상적으로 동작하면, 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의에러를 판단하는 것을 특징으로 하는 서버."}
{"patent_id": "10-2019-0044380", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 9 항에 있어서,상기 프로세서는,상기 수정된 코드 스타일을 포함하는 코드 정보를 저장하도록 상기 메모리를 제어하는 것을 특징으로 하는서버.공개특허 10-2020-0121611-5-"}
{"patent_id": "10-2019-0044380", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "서버 및 그 제어 방법이 개시된다. 본 개시에 따른 서버의 제어 방법은, 프로그램에 대한 코드 정보를 획득하는 단계, 기설정된 코드 스타일 룰에 기초하여 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단 하는 단계, 판단된 코드 스타일에 대한 적어도 하나의 에러 정보를 획득하는 단계 및 상기 코드 스타일 룰이 학 습된 인공지능 모델에 코드 정보 및 에러 정보를 입력하여 코드 스타일을 수정하는 단계를 포함한다."}
{"patent_id": "10-2019-0044380", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 서버 및 그 제어 방법에 관한 것으로써, 보다 상세하게는 프로그램에 대한 코드의 코드 스타일을 수 정하기 위한 서버 및 그 제어 방법에 관한 것이다."}
{"patent_id": "10-2019-0044380", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "프로그램에 대한 코드는 코드를 구성하는 소스 크기 또는 기능에 따라 모듈 단위 혹은 조직 단위로 관리되며, 단일 혹은 복수의 개발자들에 의해 해당 프로그램의 개발이 이루어지고 있다. 한편, 복수의 개발자들에 의해 프로그램이 개발되는 경우, 복수의 개발자들에 의해 작업된 코드의 코드 스타일 은 개발자 각각의 특성에 따라 상이할 수 있다. 이 같은 문제를 개선하기 위해서, 복수의 개발자들은 가이드된 코드 스타일 룰에 기초하여 프로그램에 대한 개 발 작업을 수행한다. 이에 따라, 복수의 개발자들에 의해 작업된 코드의 코드 스타일은 통일될 수 있다. 그럼에도 불구하고, 프로그램에 대한 개발 작업에 사용되는 코딩 언어가 상이하거나 혹은, 코드 스타일의 에러 검사를 위한 에러 체크 툴이 상이한 경우, 개발자들에 의해 작업된 코드 스타일은 서로 한 문제가 발생한다. 따라서, 복수의 개발자들은 작업된 코드의 코드 스타일을 수정하는 불필요한 작업을 하게 됨으로써, 프로그램 개발에 대한 생산성이 저하되는 문제가 있다. 본 개시는 상술한 문제점을 해결하기 위해 안출된 것으로서, 본 개시의 목적은 서버에서 프로그램에 대한 코드 의 코드 스타일에 포함된 에러를 자동으로 수정하도록 함을 목적으로 한다. 이상과 같은 목적을 달성하기 위한 서버의 제어 방법은, 프로그램에 대한 코드 정보를 획득하는 단계, 기설정된 코드 스타일 룰에 기초하여 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하는 단계, 상기 판단된 코드 스타일에 대한 적어도 하나의 에러 정보를 획득하는 단계 및 상기 코드 스타일 룰이 학습된 인공지능 모델에 상기 코드 정보 및 상기 에러 정보를 입력하여 상기 코드 스타일을 수정하는 단계를 포함한다. 그리고, 상기 에러를 판단하는 단계는, 적어도 하나의 코드 스타일 체크 툴을 이용하여 상기 코드 정보에 포함 된 코드 스타일의 에러를 판단할 수 있다. 또한, 상기 에러 정보를 획득하는 단계는, 상기 적어도 하나의 코드 스타일 체크 툴 중 제1 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러가 검출되면, 상기 제1 툴과 관련된 제1 타입의 에러 정보를 획득하고, 상기 적어도 하나의 코드 스타일 체크 툴 중 제2 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러가 검출되면, 상기 제2 툴과 관련된 제2 타입의 에러 정보를 획득할 수 있다. 그리고, 상기 인공지능 모델은, 상기 기설정된 코드 스타일 룰 및 상기 제1 타입의 에러 정보를 바탕으로 학습 될 수 있다. 또한, 상기 인공지능 모델은, 상기 인공지능 모델에 상기 제1 타입의 에러 정보가 입력된 이후, 상기 제1 타입 의 에러 정보와 상이한 상기 제2 타입의 에러 정보가 연속해서 입력되면, 상기 기설정된 코드 스타일 룰, 상기 코드 정보 및 상기 제2 타입의 에러 정보를 바탕으로 학습될 수 있다. 그리고, 상기 코드 스타일 룰을 입력받는 단계를 더 포함하며, 상기 판단하는 단계는, 상기 코드 스타일 룰과 관련하여 변경된 코드 스타일 룰이 입력되면, 상기 변경된 코드 스타일 룰에 기초하여 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하며, 상기 수정하는 단계는, 상기 변경된 코드 스타일 룰이 학 습된 상기 인공지능 모델을 이용하여 상기 코드 스타일을 수정할 수 있다. 또한, 상기 획득된 코드 정보에 대한 Build Test를 수행하여 상기 프로그램이 정상적으로 동작하는지 여부를 판 단하는 단계를 더 포함하며, 상기 에러를 판단하는 단계는, 상기 프로그램이 정상적으로 동작하면, 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단할 수 있다. 그리고, 상기 수정된 코드 스타일을 포함하는 코드 정보를 저장하는 단계;를 더 포함하며, 상기 저장하는 단계 는, 상기 코드 정보에 포함된 코드 스타일에 대한 에러가 없는 것으로 판단되면, 상기 코드 정보를 저장할 수있다. 한편, 본 개시의 또다른 실시 예에 따르면, 서버는 회로를 포함하는 통신부, 적어도 하나의 인스트럭션을 포함 하는 메모리 및 상기 적어도 하나의 인스트럭션을 실행하는 프로세서를 포함하며, 상기 프로세서는, 상기 통신 부를 통해 적어도 하나의 사용자 단말 장치로부터 수신된 프로그램에 대한 코드 정보가 획득되면, 기설정된 코 드 스타일 룰에 기초하여 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하고, 상기 판단된 코드 스타일에 대한 적어도 하나의 에러 정보를 획득하며, 상기 코드 스타일 룰이 학습된 인공지능 모델 에 상기 코드 정보 및 상기 에러 정보를 입력하여 상기 코드 스타일을 수정한다. 그리고, 상기 프로세서는, 적어도 하나의 코드 스타일 체크 툴을 이용하여 상기 코드 정보에 포함된 코드 스타 일의 에러를 판단할 수 있다. 또한, 상기 프로세서는, 상기 적어도 하나의 코드 스타일 체크 툴 중 제1 툴을 이용하여 상기 코드 정보에 포함 된 코드 스타일의 에러가 검출되면, 상기 제1 툴과 관련된 제1 타입의 에러 정보를 획득하고, 상기 적어도 하나 의 코드 스타일 체크 툴 중 제2 툴을 이용하여 상기 코드 정보에 포함된 코드 스타일의 에러가 검출되면, 상기 제2 툴과 관련된 제2 타입의 에러 정보를 획득할 수 있다. 그리고, 상기 인공지능 모델은, 상기 기설정된 코드 스타일 룰 및 상기 제1 타입의 에러 정보를 바탕으로 학습 될 수 있다. 또한, 상기 인공지능 모델은, 상기 인공지능 모델에 상기 제1 타입의 에러 정보가 입력된 이후, 상기 제1 타입 의 에러 정보와 상이한 상기 제2 타입의 에러 정보가 연속해서 입력되면, 상기 기설정된 코드 스타일 룰, 상기 코드 정보 및 상기 제2 타입의 에러 정보를 바탕으로 학습될 수 있다. 그리고, 상기 프로세서는 상기 코스 스타일 룰과 관련하여 변경된 코드 스타일 룰이 입력되면, 상기 변경된 코 드 스타일 룰에 기초하여 상기 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하고, 상기 변경된 코드 스타일 룰이 학습된 상기 인공지능 모델을 이용하여 상기 코드 스타일을 수정할 수 있다. 또한, 상기 프로세서는, 상기 획득된 코드 정보에 대한 Build Test를 수행하여 상기 프로그램이 정상적으로 동 작하는지 여부를 판단하여, 상기 프로그램이 정상적으로 동작하면, 상기 코드 정보에 포함된 코드 스타일에 대 한 적어도 하나의 에러를 판단할 수 있다. 그리고, 상기 프로세서는, 상기 수정된 코드 스타일을 포함하는 코드 정보를 저장하도록 상기 메모리를 제어할 수 있다. 이상과 같이, 본 개시에 따르면, 서버는 프로그램에 대한 코드의 코드 스타일에 포함된 에러를 판단하고, 판단 된 코드 스타일의 에러를 자동 수정할 수 있다."}
{"patent_id": "10-2019-0044380", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 문서의 다양한 실시 예가 첨부된 도면을 참조하여 기재된다. 그러나, 이는 본 문서에 기재된 기술을 특정한 실시 형태에 대해 한정하려는 것이 아니며, 본 문서의 실시 예의 다양한 변경(modifications), 균등물 (equivalents), 및/또는 대체물(alternatives)을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 본 문서에서, \"가진다,\" \"가질 수 있다,\" \"포함한다,\" 또는 \"포함할 수 있다\" 등의 표현은 해당 특징(예: 수치, 기능, 동작, 또는 부품 등의 구성요소)의 존재를 가리키며, 추가적인 특징의 존재를 배제하지 않는다. 본 문서에서, \"A 또는 B,\" \"A 또는/및 B 중 적어도 하나,\" 또는 \"A 또는/및 B 중 하나 또는 그 이상\" 등의 표현 은 함께 나열된 항목들의 모든 가능한 조합을 포함할 수 있다. 예를 들면, \"A 또는 B,\" \"A 및 B 중 적어도 하나,\" 또는 \"A 또는 B 중 적어도 하나\"는, 적어도 하나의 A를 포함, 적어도 하나의 B를 포함, 또는 적어도 하나의 A 및 적어도 하나의 B 모두를 포함하는 경우를 모두 지칭할 수 있다. 본 문서에서 사용된 \"제1,\" \"제2,\" \"첫째,\" 또는 \"둘째,\" 등의 표현들은 다양한 구성요소들을, 순서 및/또는 중 요도에 상관없이 수식할 수 있고, 한 구성요소를 다른 구성요소와 구분하기 위해 사용될 뿐 해당 구성요소들을 한정하지 않는다. 어떤 구성요소(예: 제1 구성요소)가 다른 구성요소(예: 제2 구성요소)에 \"(기능적으로 또는 통신적으로) 연결되 어((operatively or communicatively) coupled with/to)\" 있다거나 \"접속되어(connected to)\" 있다고 언급된 때에는, 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로 연결되거나, 다른 구성요소(예: 제3 구성요 소)를 통하여 연결될 수 있다고 이해되어야 할 것이다. 반면에, 어떤 구성요소(예: 제1 구성요소)가 다른 구성 요소(예: 제2 구성요소)에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있다고 언급된 때에는, 상기 어떤 구성요 소와 상기 다른 구성요소 사이에 다른 구성요소(예: 제 3 구성요소)가 존재하지 않는 것으로 이해될 수 있다. 본 문서에서 사용된 표현 \"~하도록 구성된(또는 설정된)(configured to)\"은 상황에 따라, 예를 들면, \"~에 적합 한(suitable for),\" \"~하는 능력을 가지는(having the capacity to),\" \"~하도록 설계된(designed to),\" \"~하도 록 변경된(adapted to),\" \"~하도록 만들어진(made to),\" 또는 \"~를 할 수 있는(capable of)\"과 바꾸어 사용될 수 있다. 용어 \"~하도록 구성된(또는 설정된)\"은 하드웨어적으로 \"특별히 설계된(specifically designed to)\" 것만을 반드시 의미하지 않을 수 있다. 대신, 어떤 상황에서는, \"~하도록 구성된 장치\"라는 표현은, 그 장치가 다른 장치 또는 부품들과 함께 \"~할 수 있는\" 것을 의미할 수 있다. 예를 들면, 문구 \"A, B, 및 C를 수행하도록 구성된(또는 설정된) 부프로세서\"는 해당 동작을 수행하기 위한 전용 프로세서(예: 임베디드 프로세서), 또는 메모리 장치에 저장된 하나 이상의 소프트웨어 프로그램들을 실행함으로써, 해당 동작들을 수행할 수 있는 범용 프로세서(generic-purpose processor)(예: CPU 또는 application processor)를 의미할 수 있다. 본 문서의 다양한 실시예들에 따른 사용자 단말 장치를 포함하는 전자 장치는, 예를 들면, 스마트폰, 태블릿 PC, 이동 전화기, 영상 전화기, 전자책 리더기, 데스크탑 PC, 랩탑 PC, 넷북 컴퓨터, 워크스테이션, 서버, PDA 중 적어도 하나를 포함할 수 있다. 본 문서에서, 사용자라는 용어는 전자 장치를 사용하는 사람 또는 전자 장치를 사용하는 장치(예: 인공지능 전 자 장치)를 지칭할 수 있다. 도 1a는 본 개시의 일 실시예에 따른 프로그램에 대한 오류 검사를 수행하는 시스템도이며, 도 1b는 본 개시의 일 실시예에 따른 프로그램에 대한 오류 검사를 수행하는 시스템에 대한 예시도이다. 도 1a에 도시된 바와 같이, 프로그램에 대한 오류 검사를 수행하는 시스템은 서버 및 적어도 하나의 사용자 단말 장치를 포함한다. 서버는 사용자 단말 장치로부터 수신된 코드 정보를 저장한다.여기서, 코드 정보는 개발자에 의해 개발된 프로그램에 대한 소스 코드가 될 수 있다. 또한, 서버는 기저 장된 복수의 프로그램 중 사용자가 요청한 프로그램에 대한 코드 정보를 해당 사용자의 사용자 단말 장치 로 전송한다. 사용자 단말 장치는 PC, 스마트 폰, 태블릿 PC와 같은 전자 장치로써, 사용자가 개발한 프로그램에 대한 코드 정보를 사용자 명령에 따라 서버에 전송한다. 이에 따라, 서버는 사용자 단말 장치로부터 수신된 프로그램에 대한 코드 정보를 저장할 수 있다. 또한, 사용자 단말 장치는 서버에 기저장된 복수의 프로그램 코드 중 사용자 요청에 대응하는 프로그 램 코드를 요청하여, 해당 프로그램에 대한 코드 정보를 서버로부터 수신할 수 있다. 이에 따라, 사용자는 사용자 단말 장치를 통해 서버로부터 수신된 코드 정보에 기초하여 사용자가 요 청한 프로그램을 이용할 수 있다. 한편, 서버는 적어도 하나의 사용자 단말 장치로부터 프로그램에 대한 코드 정보가 수신되면, 도 1b 와 같은 실시예를 통해 수신된 프로그램에 대한 코드 정보를 저장할 수 있다. 도 1b에 도시된 바와 같이, 서버는 적어도 하나의 사용자 단말 장치로부터 전송된 프로그램에 대한 코드 정보를 후술할 메모리에 저장한다(S10). 이후, 서버는 메모리에 저장된 프로그램에 대한 코드 정보를 획득하고, 획득된 코드 정보에 대한 Build Test 동작을 수행하여 해당 프로그램이 정상적으로 동작 하는지 여부를 판단한다(S20). 판단 결과, 해당 프로그램이 정상적으로 동작하면, 서버는 기설정된 코드 스타일 룰을 확인한 후, 확인된 코드 스타일 룰에 기초하여 해당 프로그램에 대한 코드 정보에 포함된 코드 스타일에 에러가 있는지 여부를 판 단한다(S30,S40). 여기서, 코드 스타일 룰은 코드 정보를 구성하는 텍스트 타입, 텍스트 크기, 텍스트와 기호 간의 간격, 줄 간 간격 등과 같은 코드 스타일을 정의하기 위한 것이다. 따라서, 서버는 기설정된 코드 스타일 룰에 기초하여 적어도 하나의 사용자 단말 장치로부터 수신된 프로그램에 대한 코드 정보에 포함된 코드 스타일에 에러가 있는지 여부를 판단한다. 판단 결과, 에러가 없는 것으로 판단되면, 서버는 코드 정보를 리뷰한 후 저장한다(S50). 한편, 에러가 있는 것으로 판단되면, 서버는 판단된 코드 스타일에 대한 에러 정보를 획득한다(S60). 이후, 서버 는 획득된 에러 정보 및 수신된 프로그램에 대한 코드 정보를 인공지능 모델에 입력하여 에러가 있는 코드 스타 일을 수정하거나 에러가 있는 코드 스타일에 대한 수정을 제안한다(S70,S80). 이후, 서버는 수정된 코드 스타일을 포함하는 코드 정보를 저장한다. 지금까지, 프로그램에 대한 오류 검사를 수행하는 시스템에 대해서 개략적으로 설명하였다. 이하에서는, 전술한 서버의 각 구성에 대해서 상세히 설명하도록 한다. 도 2는 본 개시의 일 실시예에 따른 서버의 블록도이다. 도 2에 도시된 바와 같이, 서버는 통신부, 메모리 및 프로세서를 포함한다. 회로를 포함하는 통신부는 사용자 단말 장치와 데이터 통신을 수행하여 사용자 단말 장치에서 전송한 프로그램에 대한 코드 정보를 수신하거나, 기저장된 복수의 프로그램 중 사용자 단말 장치에서 요 청한 프로그램에 대한 코드 정보를 해당 사용자 단말 장치로 전송한다. 이 같은 통신부는 HTTP(Hyper Text Transfer Protocol), XMPP(Extensible Messaging and Presence Protocol), SSL(Secure Sockets Layer), FTP(File Transfer Protocol), CCN(Content Centric Networking) 등 과 같은 다양한 통신 프로토콜을 통해 사용자 단말 장치를 포함하는 전자 장치, 인공지능 서버(미도시)와 데이터 통신을 수행할 수 있다. 그러나, 본 발명은 이에 한정되지 않으며, 통신부는 와이파이(WiFi), 3G(3rd Generation), 3GPP(3rd Generation Partnership Project), LTE(Ling Term Evoloution) 등과 같은 다양한 무선 통신 규격에 따라 사용 자 단말 장치를 포함하는 전자 장치, 인공지능 서버(미도시)와 데이터 통신을 수행할 수 있다. 메모리는 서버를 구동하기 위한 적어도 하나의 인스트럭션(Instruction)을 포함한다. 특히, 메모리 는 적어도 하나의 사용자 단말 장치로부터 수신된 프로그램에 대한 코드 정보를 저장하거나, 혹은 수신된 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러 검출을 위한 각종 모듈을 저장할 수 있다. 이 같은 코드 정보에 포함된 코드 스타일의 에러 검출을 위한 모듈에 대해서는 하기에서 상세히 설명하도록 한 다. 프로세서는 메모리에 저장된 적어도 하나의 인스트럭션을 실행한다. 특히, 프로세서는 통신부를 통해 적어도 하나의 사용자 단말 장치로부터 수신된 프로그램에 대 한 코드 정보가 획득되면, 기설정된 코드 스타일 룰에 기초하여 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단한다. 이후, 프로세서는 판단된 코드 스타일에 대한 적어도 하나의 에러 정보를 획득하여 인공지능 모델에 해당 코드 정보 및 에러 정보를 입력하여 적어도 하나의 에러가 검출된 코드 스타일을 수정한다. 구체적으로, 프로세서는 적어도 하나의 코드 스타일 체크 툴을 이용하여 프로그램에 대한 코드 정보에 포 함된 코드 스타일의 에러를 판단한다. 여기서, 코드 스타일 체크 툴은 실시예에 따라, 프로그램에 대한 코드 정보가 자바스크립트 형식으로 구현된 경 우, ESLint, JSLint 등이 될 수 있다. 이 같은 코드 스타일 체크 툴은 기설정된 코드 스타일 룰에 기초하여 프로그램에 대한 코드 정보에 포함된 코스 스타일의 에러를 검출하기 위한 툴이다. 이 같은 코드 스타일 체크 툴은 공지된 기술이므로, 본 발명에서는 상세한 설명을 생략하도록 한다. 한편, 적어도 하나의 코드 스타일 체크 툴을 이용하여 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러 를 검출하는 프로세서는 코드 스타일 체크 툴에 따라, 프로그램에 대한 코드 정보에 포함된 코드 스타일에 서 검출된 에러에 대한 에러 정보를 상이하게 획득할 수 있다. 실시예에 따라, 프로세서는 적어도 하나의 코드 스타일 체크 툴 중 제1 툴을 이용하여 프로그램에 대한 코 드 정보에 포함된 코드 스타일의 에러가 검출되면, 제1 툴과 관련된 제1 타입의 에러 정보를 획득할 수 있다. 그리고, 프로세서는 적어도 하나의 코드 스타일 체크 툴 중 제2 툴을 이용하여 프로그램에 대한 코드 정보 에 포함된 코드 스타일의 에러가 검출되면, 제2 툴과 관련된 제2 타입의 에러 정보를 획득할 수 있다. 이 같은 코드 스타일 체크 툴을 이용하여 코드 정보에 포함된 코드 스타일의 에러에 대한 에러 정보가 획득되면, 프로세서는 획득된 에러 정보와 해당 코드 정보를 인공지능 모델에 입력하여, 코드 정보에 포함 된 코드 스타일의 에러를 수정한다. 여기서, 인공지능 모델은 기설정된 코드 스타일 룰 및 제1 타입의 에러 정보를 바탕으로 학습된 모델이 될 수 있다. 따라서, 프로세서는 제1 툴을 통해 코드 정보에 포함된 코드 스타일의 에러에 대한 제1 타입의 에러 정보가 획득되면, 획득된 제1 타입의 에러 정보와 코드 정보를 인공지능 모델에 입력한다. 그러나, 본 발명은 이에 한정되지 않으며, 프로세서는 제1 툴을 통해 코드 정보에 포함된 코드 스타일의 에러에 대한 제1 타입의 에러 정보가 획득되면, 획득된 제1 타입의 에러 정보 및 코드 정보와, 기설정된 코드 스타일 룰을 인공지능 모델에 입력할 수 있다. 기설정된 코드 스타일 룰 및 제1 타입의 에러 정보를 바탕으로 학습된 인공지능 모델은 제1 타입의 에러 정보와 코드 정보가 입력되면, 입력된 제1 타입의 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 한편, 인공지능 모델은 전술한 바와 같이, 기설정된 코드 스타일 룰 및 제1 타입의 에러 정보 뿐만 아니라, 입 력된 코드 정보 및 코드 스타일이 수정된 코드 정보를 추가로 학습할 수 있다. 한편, 프로세서는 사용자 명령에 따라, 에러 검출을 위한 코드 스타일 체크 툴을 제1 툴에서 제2 툴로 변 경하고, 변경된 제2 툴을 이용하여 코드 정보에 포함된 코드 스타일의 에러에 대한 에러 정보를 획득할 수 있다. 전술한 바와 같이, 제2 툴은 코드 정보에 포함된 코드 스타일의 에러가 검출되면, 제2 툴과 관련된 제2 타입의 에러 정보를 생성한다. 따라서, 프로세서는 제2 툴을 통해 코드 정보에 포함된 코드 스타일의 에러에 대한 제2 타입의 에러 정보 가 획득되면, 획득된 제2 타입의 에러 정보와 코드 정보를 인공지능 모델에 입력한다. 전술한 바와 같이, 기설정된 코드 스타일 룰 및 제1 타입의 에러 정보를 바탕으로 학습된 인공지능 모델은 제2 타입의 에러 정보가 연속해서 입력되면, 입력된 제2 타입의 에러 정보 및 기설정된 코드 스타일 룰을 바탕으로 학습될 수 있다. 따라서, 제2 타입의 에러 정보 및 기설정된 코드 스타일 룰을 바탕으로 학습된 인공지능 모델은 제2 타입의 에 러 정보 및 코드 정보가 입력되면, 입력된 제2 타입의 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 한편, 프로세서는 기설정된 코드 스타일 룰과 관련하여 변경된 코드 스타일 룰이 입력되면, 변경된 코드 스타일 룰에 기초하여 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러를 판단하고, 판단된 코드 스 타일에 대한 적어도 하나의 에러 정보를 획득한다. 한편, 프로세서는 변경된 코드 스타일 룰이 입력되면, 변경된 코드 스타일 룰을 인공지능 모델에 입력한다. 이에 따라, 인공지능 모델은 변경된 코드 스타일 룰이 입력되면, 변경된 코스 스타일 룰을 학습한다. 변경된 코드 스타일 룰이 인공지능 모델에 학습된 상태에서, 프로세서는 변경된 코드 스타일 룰에 기초로 기설정된 코드 스타일 체크 툴을 이용하여 코드 정보에 포함된 코스 스타일의 에러에 대한 에러 정보를 획득되 면, 획득된 에러 정보 및 코드 정보를 인공지능 모델에 입력한다. 따라서, 인공지능 모델은 프로세서를 통해 코드 정보 및 에러 정보가 입력되면, 변경된 코드 스타일 룰 및 입력된 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 이 같이, 코드 정보에 포함된 코드 스타일이 수정되면, 프로세서는 수정된 코드 스타일을 포함하는 코드 정보를 메모리에 저장한다. 한편, 프로세서는 인공지능 모델을 통해 프로그램에 대한 코드 정보에 포함된 코드 스타일에 대한 에러를 수정하기에 앞서, 획득된 코드 정보에 기초하여 Build Test를 수행하여 해당 프로그램이 정상적으로 동작하는지 여부를 판단한다. 판단 결과, 프로그램이 정상적으로 동작하지 않으면, 프로세서는 통신부를 통해 코 드 정보를 전송한 사용자 단말 장치로 프로그램에 대한 Build Test 에러 정보를 전송한다. 한편, 프로그램이 정상적으로 동작하면, 프로세서는 전술한 바와 같이, 인공지능 모델을 통해 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러를 수정할 수 있다. 지금까지, 본 발명에 따른 서버의 각 구성에 대한 동작을 상세히 설명하였다. 이하에서는, 본 발명에 따른 메모리에 저장된 각종 모듈에 대해서 상세히 설명하도록 한다. 도 3은 본 개시의 일 실시예에 따른 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러 수정을 위한 각종 모듈을 저장하는 메모리의 블록도이다. 도 3에 도시된 바와 같이, 메모리는 코드 스타일 룰 학습 모듈 및 에러 정보 학습 모듈을 포함 할 수 있다. 코드 스타일 룰 학습 모듈은 인공지능 모델에서 기설정된 코드 스타일 룰에 기초하여 프로그램에 대한 코 드 정보에 포함된 코드 스타일이 정의될 수 있도록 해당 코드 스타일 룰을 학습하기 위한 모듈이다. 에러 정보 학습 모듈은 인공지능 모델에서 코드 정보 및 기설정된 코드 스타일 체크 툴을 이용하여 획득된 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일을 수정하도록 하기 위한 모듈이다. 구체적으로, 프로세서는 기설정된 코드 스타일 체크 툴을 이용하여 코드 정보에 포함된 코드 스타일의 에 러를 검출하고, 검출된 에러에 대한 에러 정보를 획득한다. 보다 구체적으로, 코드 스타일 체크 툴은 기설정된 코드 스타일 룰에 기초하여 코드 정보에 포함된 코드 스타일 의 에러를 검출하고, 검출된 에러에 대한 에러 정보를 생성한다. 따라서, 프로세서는 코드 스타일 체크 툴 을 통해 생성된 에러 정보가 획득되면, 획득된 에러 정보 및 코드 정보를 인공지능 모델에 입력한다. 인공지능 모델에 에러 정보 및 코드 정보가 입력되면, 에러 정보 학습 모듈은 코드 스타일 룰 학습 모듈을 통 해 학습된 코드 스타일 룰 및 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일의 에러를 수정할 수 있다.이하에서는, 본 개시에 따른 프로그램에 대한 코드 정보에 포함된 코드 스타일을 수정하는 서버의 제어 방 법에 대해서 상세히 설명하도록 한다. 도 4는 본 개시의 일 실시예에 따른 서버에서 프로그램에 대한 코드 정보에 포함된 코드 스타일을 수정하기 위 한 방법의 흐름도이다. 도 4에 도시된 바와 같이, 서버는 적어도 하나의 사용자 단말 장치로부터 수신된 프로그램에 대한 코 드 정보가 획득되면, 획득된 코드 정보에 대한 Build Test 동작을 수행하여, 해당 프로그램이 정상적으로 동작 하는지 여부를 판단한다(S410,S420). 판단 결과, 프로그램이 정상적으로 동작하지 않으면, 서버는 코드 정보를 전송하는 사용자 단말 장치(20 0)로 프로그램에 대한 Build Test 에러 정보를 전송한다(S430). 한편, 서버는 프로그램이 정상적으로 동작하면, 기설정된 코드 스타일 룰에 기초하여 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러가 존재하는지 여부를 판단한다(S440). 여기서, 코드 스타일 룰은 프로그램에 대한 코드 정보의 스타일을 정의하기 위한 것으로써, 예를 들어, 코드 정 보는 코드 정보를 구성하는 텍스트 타입, 텍스트 크기, 텍스트와 기호 간의 간격, 줄 간 간격 등이 될 수 있다. 이 같은 코드 스타일 룰에 기초하여 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러가 존재하는 것으로 판단되면, 서버는 판단된 코드 스타일에 대한 적어도 하나의 에러에 대한 에러 정보를 획득한다 (S450). 이후, 서버는 학습된 인공지능 모델에 코드 정보 및 획득된 에러 정보를 입력하여 코드 정보에 포함된 코 드 스타일을 수정하고, 수정된 코드 스타일을 포함하는 코드 정보를 저장한다(S460,S470). 한편, 서버는 전술한 단계 S440을 통해 코드 정보에 포함된 코드 스타일에 대한 적어도 하나의 에러가 존 재하지 않는 것으로 판단되면, 서버는 단계 S470을 통해 사용자 단말 장치로부터 수신된 프로그램에 대한 코드 정보를 저장한다. 전술한 단계 단계 S440과 관련하여, 서버는 적어도 하나의 코드 스타일 체크 툴을 이용하여 코드 정보에 포함된 코드 스타일에 대한 에러를 판단하고, 판단된 에러에 대한 에러 정보를 획득할 수 있다. 여기서, 코드 스타일 체크 툴은 기설정된 코드 스타일 룰에 기초하여 프로그램에 대한 코드 정보에 포함된 코스 스타일의 에러를 검출하기 위한 툴이다 이 같은 코드 스타일 체크 툴은 실시예에 따라, 프로그램에 대한 코드 정보가 자바스크립트 형식으로 구현된 경 우, ESLint, JSLint 등이 될 수 있다. 이 같은 ESLint, JSLint와 같은 코드 스타일 체크 툴은 공지된 기술이므로, 본 발명에서는 상세한 설명을 생략 하도록 한다. 실시예에 따라, 서버는 적어도 하나의 코드 스타일 체크 툴 중 제1 툴을 이용하여 코드 정보에 포함된 코 드 스타일의 에러가 검출되면, 제1 툴과 관련된 제1 타입의 에러 정보를 획득할 수 있다. 그리고, 서버는 적어도 하나의 코드 스타일 체크 툴 중 제2 툴을 이용하여 코드 정보에 포함된 코드 스타 일의 에러가 검출되면, 제2 툴과 관련된 제2 타입의 에러 정보를 획득할 수 있다. 한편, 인공지능 모델은 기설정된 코드 스타일 룰 및 적어도 하나의 코드 스타일 체크 툴과 관련된 에러 정보를 바탕으로 학습될 수 있다. 예를 들어, 인공지능 모델은 기설정된 코드 스타일 룰 및 적어도 하나의 코드 스타일 체크 툴 중 제1 툴과 관련 된 제1 타입의 에러 정보를 바탕으로 학습될 수 있다. 이 경우, 인공지능 모델은 제1 툴을 통해 획득된 제1 타입의 에러 정보와 코드 정보가 입력되면, 기학습된 코드 스타일 룰 및 제1 타입의 에러 정보에 기초하여 입력된 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 한편, 서버는 제1 툴에서 제2 툴로 코드 스타일 체크 툴을 변경하고, 변경된 제2 툴을 통해 코드 정보에 포함된 코드 스타일의 에러에 대한 제2 타입의 에러 정보를 획득할 수 있다. 이 같은 제2 타입의 에러 정보가 획득되면, 서버는 획득된 제2 타입의 에러 정보 및 코드 정보를 인공지능 모델에 입력한다. 전술한 바와 같이, 인공지능 모델은 기설정된 코드 스타일 룰 및 제1 툴과 관련된 제1 타입의 에러 정보를 바탕 으로 학습될 수 있다. 이 같은 인공지능 모델에 제2 툴과 관련된 제2 타입의 에러 정보 및 코드 정보가 연속해서 입력되면, 인공지능 모델은 입력된 제2 타입의 에러 정보 및 기설정된 코드 스타일 룰을 바탕으로 학습한다. 따라서, 제2 타입의 에러 정보 및 기설정된 코드 스타일 룰을 바탕으로 학습된 인공지능 모델은 제2 타입의 에 러 정보 및 코드 정보가 입력되면, 입력된 제2 타입의 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 한편, 인공지능 모델은 기설정된 코드 스타일 룰과 관련하여 변경된 코드 스타일 룰이 입력되면, 변경된 코드 스타일 룰에 기초하여 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 구체적으로, 서버는 사용자 명령에 따라, 기설정된 코드 스타일 룰과 관련하여 변경된 코드 스타일 룰을 인공지능 모델에 입력한다. 인공지능 모델은 변경된 코드 스타일 룰이 입력되면, 변경된 코스 스타일 룰을 학습한다. 변경된 코드 스타일 룰이 인공지능 모델에 학습된 상태에서, 서버는 변경된 코드 스타일 룰에 기초로 기설 정된 코드 스타일 체크 툴을 이용하여 코드 정보에 포함된 코스 스타일의 에러에 대한 에러 정보를 획득되면, 획득된 에러 정보 및 코드 정보를 인공지능 모델에 입력한다. 따라서, 인공지능 모델은 서버로부터 코드 정보 및 에러 정보가 입력되면, 변경된 코드 스타일 룰 및 입력 된 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 이 같이, 코드 정보에 포함된 코드 스타일이 수정되면, 서버는 수정된 코드 스타일을 포함하는 코드 정보 를 저장한다. 지금까지, 본 개시에 따른 서버에서 인공지능 모델을 이용하여 프로그램에 대한 코드 정보에 포함된 코드 스타일을 수정하는 방법에 대해서 상세히 설명하였다. 이하에서는, 본 개시에 따른 서버에서 인공지능 모델을 이용하여 프로그램에 대한 코드 정보에 포함된 코 드 스타일을 수정하는 동작에 대해서 보다 구체적으로 설명하도록 한다. 도 5는 본 개시의 일 실시예에 따른 서버에서 코드 스타일 룰에 따라 발생된 에러 정보에 기초하여 코드 스타일 을 수정하는 예시도이다. 도 5에 도시된 바와 같이, 서버는 프로그램에 대한 코드 정보가 획득되면, 적어도 하나의 코드 스타일 체크 중 제1 툴을 이용하여 코드 정보에 포함된 코드 스타일의 에러를 검출한다. 여기서, 프로그램에 대한 코드 정보는 자바스크립트 형식의 소스 코드가 될 수 있으며, 제1 툴은 ESLint의 코드 스타일 체크 툴이 될 수 있다. 구체적으로, 제1 툴은 기설정된 코드 스타일 룰에 기초하여 프로그램에 대한 코드 정보에 포함된 코드 스타일에 대한 에러를 검출한다. 기설정된 코드 스타일 룰에 따라, 코드 정보에 포함된 코드 스타일에 대한 에러가 검출되지 않으면, 제1 툴은 코드 정보에 포함된 코드 스타일에 대해서 에러가 없는 것으로 판단할 수 있다. 한편, 기설정된 코드 스타일 룰이 변경되면, 제1 툴은 변경된 코드 스타일 룰에 기초하여 코드 정보 에 포함된 코드 스타일에 대해서 에러가 있는지를 판단한다. 여기서, 코드 정보는 변경되기 전 코드 스타일 룰에 기초하여 생성된 정보일 수 있다. 이 경우, 제1 툴은 변경된 코드 스타일 룰에 기초하여 코드 정보에 포함된 코드 스타일에 에러가 있는 것으로 판단 하고, 판단된 에러에 대한 에러 정보를 생성할 수 있다. 여기서, 변경된 코드 스타일 룰은 기존의 코드 스타일 룰과 관련하여 \"space-before-blocks:2\"라는 작업 룰이 추가된 것이다. 따라서, 제1 툴은 소스 코드가 추가된 코드 스타일 룰에 기초하여 코드 정 보에 포함된 코드 스타일에 에러가 있는 것으로 판단하고, 판단된 에러에 대한 에러 정보를 생성할 수 있다.따라서, 서버는 제1 툴을 통해 생성된 에러 정보와 코드 정보를 인공지능 모델에 입력한다. 변경 된 코드 스타일 룰을 기학습한 인공지능 모델은 서버로부터 에러 정보 및 코드 정보가 입력 되면, 변경된 코드 스타일 룰과 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 도시된 바와 같이, 인공지능 모델은 입력된 에러 정보 및 코드 정보에 기초하여 코드 정보에 포함 된 'function test (value){'을 'function test (value) {'로 수정할 수 있다. 따라서, 서버는 이 같은 인공지능 모델을 통해 수정된 코드 정보(10')를 저장할 수 있다. 예를 들어, 프로그램에 대한 코드 정보는 복수의 사용자에 의해 생성될 수 있으며, 복수의 사용자 중 제1 사용 자는 변경된 코드 스타일 룰에 기초하여 해당 코드 정보에 대한 코딩을 수행할 수 있으며, 제2 사용자는 변경되기 전 코드 스타일 룰에 기초하여 해당 코드 정보에 해한 코딩을 수행할 수 있다. 이 경우, 제1 툴은 제1 사용자에 의해 코딩된 코드 정보에 포함된 코드 스타일에 에러가 없는 것으로 판단한다. 한편, 제1 툴은 제2 사용자에 의해 코딩된 코드 정보에 포함된 코드 스타일에 에러가 있는 것으로 판단하고, 판 단된 에러에 대한 에러 정보를 생성한다. 이에 따라, 서버는 제1 툴을 통해 생성된 에러 정보 및 코드 정보를 인공지능 모델에 입력하며, 변경된 코 드 스타일 룰을 기학습한 인공지능 모델은 변경된 코드 스타일 룰과 에러 정보에 기초하여 제2 사용 자에 의해 코딩된 코드 정보에 포함된 코드 스타일을 수정할 수 있다. 도 6은 본 개시의 일 실시예에 따른 서버에서 코드 스타일 체크 툴에 따라 변경된 에러 정보를 획득하는 예시도 이다. 도 6에 도시된 바와 같이, 서버는 프로그램에 대한 코드 정보가 획득되면, 적어도 하나의 코드 스타일 체크 툴 중 제1 툴을 이용하여 코드 정보에 포함된 코드 스타일의 에러를 검출한다. 여기서, 프로그램에 대한 코드 정보는 자바스크립트 형식의 소스 코드가 될 수 있으며, 제1 툴은 ESLint의 코드 스타일 체크 툴이 될 수 있다. 구체적으로, 제1 툴은 기설정된 코드 스타일 룰에 기초하여 프로그램에 대한 코드 정보에 포함된 코드 스타일에 대한 에러를 검출한다. 기설정된 코드 스타일 룰에 따라, 코드 정보에 포함된 코드 스타일에 대한 에러가 검출되면, 제1 툴은 제1 툴과 관련된 에러 정보를 생성한다. 예를 들어, 기설정된 코드 스타일 룰에는 \"코드 정보에 '+'를 사용하는 경우 withspace가 들어가야 한다.\"라는 제1 룰을 포함할 수 있다. 따라서, 제1 툴은 코드 정보에 포함된 코드 스타일로부터 제1 룰(63 0)과 관련된 에러가 검출되면, \"4:25 - Operator'+' must be spaced.\"라는 에러 정보를 생성한다. 한편, 제2 툴은 JSLint의 코드 스타일 체크 툴이 될 수 있다. 구체적으로, 제2 툴은 기설정된 코드 스타일 룰에 기초하여 프로그램에 대한 코드 정보에 포함된 코드 스타일에 대한 에러를 검출한다. 기설정된 코드 스타일 룰에 따라, 코드 정보에 포함된 코드 스타일에 대한 에러가 검출되면, 제2 툴은 제2 툴과 관련된 에러 정보를 생성한다. 전술한 예와 같이, 기설정된 코드 스타일 룰에는 \"코드 정보에 '+'를 사용하는 경우 withspace가 들어가야 한다.\"라는 제1 룰을 포함할 수 있다. 따라서, 제2 툴은 코드 정보에 포함된 코드 스타일로부터 제1 룰과 관련된 에러가 검출되면, \"Expected one space between 'Hello World' and '+'.\" 및 \"Expected one space between '+' and 'Value'.\"라는 에러 정보를 생성한다. 즉, 제1 및 제2 툴(610,620)은 코드 정보에 포함된 코드 스타일로부터 검출된 동일한 에러에 대해서 상이한 에러 정보를 생성할 수 있다. 한편, 서버는 제1 및 제2 툴(610,620) 중 제1 툴을 통해 생성된 코드 정보에 포함된 코드 스타일 에 대한 에러 정보가 획득되면, 획득된 에러 정보 및 코드 정보를 인공지능 모델에 입력한다. 여기서, 인공지능 모델은 기설정된 코드 스타일 툴 및 제1 툴로부터 생성된 에러 정보를 바탕으로 학습된 모델이 될 수 있다. 이 같은 인공지능 모델은 서버로부터 제1 툴로부터 생성된 에러 정보 및 코드 정보과 입력되면, 기학습된 코드 스타일 룰과 입력된 에러 정보에 기초하여 'return \"Hello World\"+value;'를 'return \"HelloWorld\" + value;'로 수정할 수 있다. 따라서, 서버는 이 같은 인공지능 모델을 통해 수정된 코드 정보 (20')를 저장할 수 있다 한편, 코드 정보에 포함된 코드 스타일의 에러 검출을 위한 코드 스타일 체크 툴이 제1 툴에서 제2 툴 로 변경된 경우, 서버는 제2 툴을 통해 생성된 코드 정보에 포함된 코드 스타일에 대한 에 러 정보를 획득할 수 있다. 이 같은 제2 툴로부터 생성된 에러 정보가 획득되면, 서버는 획득된 에러 정보 및 코드 정보를 인공지능 모델에 입력한다. 전술한 바와 같이, 인공지능 모델은 기설정된 코드 스타일 툴 및 제1 툴로부터 생성된 에러 정보를 바탕으 로 학습된 모델이 될 수 있다. 따라서, 인공지능 모델은 서버로부터 제2 툴로부터 생성된 에러 정보 및 코드 정보가 연속해서 입력되면, 제2 툴로부터 생성된 에러 정보 및 기설정된 코드 스타일을 바탕으로 학습한다. 이 같은 정보를 학습한 인공지능 모델은 제2 툴로부터 생성된 에러 정보 및 코드 정보가 입력되면, 기학습된 코드 스 타일 룰 및 입력된 에러 정보에 기초하여 코드 정보에 포함된 코드 스타일의 에러를 수정할 수 있다. 따라 서, 서버는 인공지능 모델을 통해 코드 정보와 관련하여 코드 스타일의 에러가 수정된 코드 정보(2 0')를 저장할 수 있다. 도 7a는 본 개시의 일 실시예에 따른 프로그램의 코드 스타일 수정을 위한 인공지능 모델의 학습을 도시한 블록 도이며, 도 7b는 본 개시의 일 실시예에 따른 프로그램의 코드 스타일 수정을 위한 인공지능 모델을 학습을 도 시한 예시도이다. 도 7a에 도시된 바와 같이, 프로그램에 대한 코드 정보에 포함된 코드 스타일 수정을 위한 정보(Data)는 특정 코드 스타일로 생성된 코드 정보 및 인공지능 모델의 학습을 위한 입력 데이터를 포함할 수 있다. 여기서, 인공지능 모델의 학습을 위한 입력 데이터는 기설정된 코드 스타일 룰 및 프로그램에 대한 코드 정보에 포함된 코드 스타일로부터 검출된 에러 정보를 포함할 수 있다. 인공지능 모델은 AI 엔진부 및 코드 스타일 처리부를 포함한다. AI 엔진부는 입력 데이터에 포함된 기설정된 코드 스타일 룰 및 프로그램에 대한 코드 정보에 포함된 코드 스타일로부터 검출된 에러 정보를 입력 받아 학습한다. 코드 스타일 처리부는 프로그램에 대한 코드 정보가 입력되면, AI 엔진부를 통해 학습된 코드 스타일 룰 및 에러 정보에 기초하여 해당 프로그램에 대한 코드 정보로부터 에러가 있는 코드 스타일을 수정하거나 해당 코드 스타일의 수정을 제안할 수 있다. 예를 들어, 도 7b에 도시된 바와 같이, 인공지능 모델은 제1 룰 타입을 포함하는 코드 스타일 룰 및 제1 에러 정보를 포함하는 에러 정보를 입력받을 수 있다. 이 같은 정보가 입력되면, AI 엔진부는 입력된 제1 소스 코드를 포함하는 코드 정보, 제1 룰 타 입을 포함하는 코드 스타일 룰 및 제1 에러 정보를 포함하는 에러 정보를 학습한다. 이후, 코드 스타일 처리부은 제1 소스 코드를 포함하는 코드 정보가 입력되면, AI 엔진부 를 통해 학습된 제1 룰 타입 및 제1 에러 정보에 기초하여 제1 소스 코드로부터 수정된 소스 코 드를 생성하거나 혹은 코드 정보에 포함된 제1 소스 코드의 수정을 제안할 메시지를 생성 할 수 있다. 한편, AI 엔진부는 코드 스타일 처리부로부터 에러가 있는 코드 스타일이 수정된 코드 정보 및 수정되기 전의 코드 정보를 입력 받아 학습할 수 있다. 또한, AI 엔진부는 코드 스타일 룰 에 기초하여 사용자에 의해 에러가 있는 코드 스타일이 수정된 코드 정보를 입력받아 학습할 수 있다. 전술한 예와 같이, 코드 스타일 처리부는 제1 에러 정보에 기초하여 제1 소스 코드로부터 수정 된 소스 코드가 생성되면, AI 엔진부는 코드 스타일 처리부로부터 제1 에러 정보, 제1 소 스 코드 및 수정된 소스 코드를 입력받을 수 있다. 이때, AI 엔진부는 에러가 있는 제1 소스 코 드와 관련하여 사용자로부터 수정된 소스 코드를 입력받을 수 있다. 이 같이, AI 엔진부는 에러가 있는 제1 소스 코드와 관련하여 코드 스타일 처리부로부터 수정된 소스 코드 및 사용자에 의해 수정된 소스 코드가 입력되면, 두 소스 코드의 일치 여부를 비교하여 코드 스 타일 처리부로부터 수정된 소스 코드가 올바르게 수정되었는지를 판단하는 학습을 수행할 수 있다. 이 같이, AI 엔진부에서 코드 스타일 처리부에서 수정된 소스 코드 및 사용자에 의해 수정된 소스 코 드를 비교하고, 그에 따른 비교 결과를 학습함으로써, 인공지능 모델은 에러가 있는 코드 스타일에 대한 수정 오류의 확률을 최소화할 수 있다. 지금까지, 본 개시에 따른 서버에서 코드 스타일 룰 변경 혹은 코드 스타일 체크 툴 변경에 따라 인공지능 모델에서 적응적으로 코드 정보에 포함된 코드 스타일을 수정하는 동작에 대해서 상세히 설명하였다. 이하에서 는, 전술한 인공지능 모델을 업데이트하는 동작에 대해서 상세히 설명하도록 한다. 도 8은 본 개시의 일 실시예에 따른 인공지능 모델을 업데이트하고 이용하는 서버의 프로세서의 세부 블록도이 다. 도 8에 도시된 바와 같이, 프로세서는 학습부 및 획득부 중 적어도 하나를 더 포함할 수 있다. 이 같은 프로세서는 도 2의 서버의 프로세서에 대응될 수 있다. 학습부는 학습 데이터를 이용하여 서버에서 획득된 프로그램에 대한 코드 정보에 포함된 코드 스타일 수정을 위한 모델(이하 제1 모델이라 함)을 생성 또는 학습시킬 수 있다. 이 같은 학습부는 수집된 학습 데이터를 이용하여 코드 스타일 룰, 코드 정보 및 적어도 하나의 코드 스타 일 체크 룰을 이용하여 해당 코드 정보에 포함된 코드 스타일의 에러에 대한 에러 정보가 학습된 제1 모델을 생 성, 학습 또는 갱신시킬 수 있다. 획득부는 소정의 데이터를 학습된 모델의 입력 데이터로 사용하여, 다양한 정보를 획득할 수 있다. 일 예로, 획득부는 프로그램에 대한 코드 정보에 포함된 코드 스타일의 수정을 위해서 학습된 제1 모델의 입력 데이터로 사용하여 수정된 코드 스타일을 포함하는 코드 정보를 획득(또는, 인식, 추정)할 수 있다. 학습부의 적어도 일부 및 획득부의 적어도 일부는, 소프트웨어 모듈로 구현되거나 적어도 하나의 하 드웨어 칩 형태로 제작되어 서버에 탑재될 수 있다. 예를 들어, 학습부 및 획득부 중 적어도 하 나는 인공 지능(AI; artificial intelligence)을 위한 전용 하드웨어 칩 형태로 제작될 수도 있다. 이때, 인공 지능을 위한 전용 하드웨어 칩은 확률 연산에 특화된 전용 프로세서로서, 기존의 범용 프로세서보다 병렬처리 성능이 높아 기계 학습과 같은 인공 지능 분야의 연산 작업을 빠르게 처리할 수 있다. 학습부 및 획득부가 소프트웨어 모듈(또는, 인스트럭션(instruction) 포함하는 프로그램 모듈)로 구 현되는 경우, 소프트웨어 모듈은 컴퓨터로 읽을 수 있는 판독 가능한 비일시적 판독 가능 기록매체(non- transitory computer readable media)에 저장될 수 있다. 이 경우, 소프트웨어 모듈은 OS(Operating System)에 의해 제공되거나, 소정의 애플리케이션에 의해 제공될 수 있다. 또는, 소프트웨어 모듈 중 일부는 OS(Operating System)에 의해 제공되고, 나머지 일부는 소정의 애플리케이션에 의해 제공될 수 있다. 이 경우, 학습부 및 획득부는 하나의 서버에 탑재될 수도 있으며, 또는 별개의 전자 장치들에 각각 탑재될 수도 있다. 예를 들어, 학습부 및 획득부 중 하나는 서버에 포함되고, 나머지 하나 는 외부의 서버(미도시)에 포함될 수 있다. 또한, 학습부 및 획득부는 유선 또는 무선으로 통하여, 학습부가 구축한 모델 정보를 획득부로 제공할 수도 있고, 학습부로 입력된 데이터가 추가 학습 데이터로서 학습부로 제공될 수도 있다. 도 9a는 본 개시의 일 실시예에 따른 학습부 및 획득부의 세부 블록도이다. 도 9a의 (a)에 도시된 바와 같이, 학습부는 학습 데이터 획득부(811-1) 및 모델 학습부(811-4)를 포함할 수 있다. 또한, 학습부는 학습 데이터 전처리부(811-2), 학습 데이터 선택부(811-3) 및 모델 평가부(811- 5) 중 적어도 하나를 선택적으로 더 포함할 수 있다. 학습 데이터 획득부(811-1)는 제1 모델 및 제2 모델에 필요한 학습 데이터를 획득할 수 있다. 실시예에 따라, 학습 데이터 획득부(811-1)는 코드 스타일 룰, 코드 정보 및 적어도 하나의 코드 스타일 체크 툴을 이용하여 획 득된 해당 코드 정보에 포함된 코드 스타일에 대한 에러 정보 등을 학습 데이터로서 획득할 수 있다. 학습 데이 터는 학습부 또는 학습부의 제조사가 수집 또는 테스트한 데이터가 될 수도 있다. 모델 학습부(811-4)는 학습 데이터를 이용하여, 코드 스타일의 에러를 어떻게 수정할지에 관한 기준을 갖도록 학습시킬 수 있다. 예로, 모델 학습부(811-4)는 학습 데이터 중 적어도 일부를 판단 기준으로 이용하는 지도 학 습(supervised learning)을 통하여, 인공지능 모델을 학습시킬 수 있다. 또는, 모델 학습부(811-4)는, 예를 들 어, 별다른 지도 없이 학습 데이터를 이용하여 스스로 학습함으로써, 상황의 판단을 위한 판단 기준을 발견하는 비지도 학습(unsupervised learning)을 통하여, 인공지능 모델을 학습시킬 수 있다. 또한, 모델 학습부(811-4)는 예를 들어, 학습에 따른 상황 판단의 결과가 올바른 지에 대한 피드백을 이용하는 강화 학습(reinforcement learning)을 통하여, 인공지능 모델을 학습시킬 수 있다. 또한, 모델 학습부(811-4)는, 예를 들어, 오류 역전파법(error back-propagation) 또는 경사 하강법(gradient descent)을 포함하는 학습 알고리즘 등을 이용하여 인공지능 모델을 학습시킬 수 있다 모델 학습부(811-4)는 미리 구축된 인공지능 모델이 복수 개가 존재하는 경우, 입력된 학습 데이터와 기본 학습 데이터의 관련성이 큰 인공지능 모델을 학습할 인공지능 모델로 결정할 수 있다. 이 경우, 기본 학습 데이터는 데이터의 타입별로 기분류되어 있을 수 있으며, 인공지능 모델은 데이터의 타입별로 미리 구축되어 있을 수 있 다. 예를 들어, 기본 학습 데이터는 학습 데이터가 생성된 지역, 학습 데이터가 생성된 시간, 학습 데이터의 크기, 학습 데이터의 장르, 학습 데이터의 생성자, 학습 데이터 내의 오브젝트의 종류 등과 같은 다양한 기준으로 기 분류되어 있을 수 있다. 인공지능 모델이 학습되면, 모델 학습부(811-4)는 학습된 인공지능 모델을 저장할 수 있다. 이 경우, 모델 학습 부(811-4)는 학습된 인공지능 모델을 서버의 메모리에 저장할 수 있다. 또는, 모델 학습부(811-4)는 학습된 인공지능 모델을 서버와 유선 또는 무선 네트워크로 연결되는 인공지능 서버(미도시)의 메모리에 저장할 수도 있다. 학습부는 인공지능 모델의 인식 결과를 향상시키거나, 인공지능 모델의 생성에 필요한 자원 또는 시간을 절약하기 위하여, 학습 데이터 전처리부(811-2) 및 학습 데이터 선택부(811-3)를 더 포함할 수도 있다. 학습 데이터 전처리부(811-2)는 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러를 수정할 수 있도록 획득된 데이터가 이용될 수 있도록, 해당 데이터를 전처리할 수 있다. 학습 데이터 전처리부(811-2)는 모델 학 습부(811-4)가 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러를 수정할 수 있도록 획득된 데이터를 이용할 수 있도록, 해당 데이터를 기설정된 포맷으로 가공할 수 있다. 학습 데이터 선택부(811-3)는 학습 데이터 획득부(811-1)에서 획득된 데이터 또는 학습 데이터 전처리부(811- 2)에서 전처리된 데이터 중에서 학습에 필요한 데이터를 선택할 수 있다. 선택된 학습 데이터는 모델 학습부 (811-4)에 제공될 수 있다. 학습 데이터 선택부(811-3)는 기설정된 선별 기준에 따라, 획득되거나 전처리된 데이터 중에서 학습에 필요한 학습 데이터를 선택할 수 있다. 또한, 학습 데이터 선택부(811-3)는 모델 학습부(811-4)에 의한 학습에 의해 기 설정된 선별 기준에 따라 학습 데이터를 선택할 수도 있다. 학습부는 인공지능 모델의 인식 결과를 향상시키기 위하여, 모델 평가부(811-5)를 더 포함할 수도 있다. 모델 평가부(811-5)는 인공지능 모델에 평가 데이터를 입력하고, 평가 데이터로부터 출력되는 인식 결과가 소정 기준을 만족하지 못하는 경우, 모델 학습부(811-4)로 하여금 다시 학습하도록 할 수 있다. 이 경우, 평가 데이 터는 인공지능 모델을 평가하기 위한 기정의된 데이터일 수 있다. 예를 들어, 모델 평가부(811-5)는 평가 데이터에 대한 학습된 인공지능 모델의 인식 결과 중에서, 인식 결과가 정확하지 않은 평가 데이터의 개수 또는 비율이 미리 설정된 임계치를 초과하는 경우 소정 기준을 만족하지 못 한 것으로 평가할 수 있다. 한편, 학습된 인공지능 모델이 복수 개가 존재하는 경우, 모델 평가부(811-5)는 각각의 학습된 인공지능 모델에 대하여 소정 기준을 만족하는지를 평가하고, 소정 기준을 만족하는 모델을 최종 인공지능 모델로서 결정할 수 있다. 소정 기준을 만족하는 모델이 복수 개인 경우, 모델 평가부(811-5)는 평가 점수가 높은 순으로 미리 설정 된 어느 하나 또는 소정 개수의 모델을 최종 인공지능 모델로서 결정할 수 있다. 한편, 획득부는 도 9a의 (b)에 도시된 바와 같이, 입력 데이터 획득부(821-1) 및 제공부(821-4)를 포함할 수 있다. 또한, 획득부는 입력 데이터 전처리부(821-2), 입력 데이터 선택부(821-3) 및 모델 갱신부(821-5) 중 적어 도 하나를 선택적으로 더 포함할 수 있다. 입력 데이터 획득부(821-1)는 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러 수정을 위한 정보를 획 득하는데 필요한 데이터를 획득할 수 있다. 제공부(821-4)는 입력 데이터 획득부(821-1)에서 획득된 입력 데이터를 입력 값으로 학습된 인공지능 모델에 적 용하여 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러 수정을 위한 정보를 획득할 수 있다. 이 같은 제공부(821-4)는 후술할 입력 데이터 전처리부(821-2) 또는 입력 데이터 선택부(821-3)에 의해 선택된 데이터를 입력 값으로 인공지능 모델에 적용하여 인식 결과를 획득할 수 있다. 인식 결과는 인공지능 모델에 의 해 결정될 수 있다. 실시예로, 제공부(821-4)는 입력 데이터 획득부(821-1)에서 획득한 영상 관련 데이터를 학습된 제1 모델에 적용 하여 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러를 수정(또는, 추정)할 수 있다. 획득부는 인공지능 모델의 인식 결과를 향상시키거나, 인식 결과의 제공을 위한 자원 또는 시간을 절약하 기 위하여, 입력 데이터 전처리부(821-2) 및 입력 데이터 선택부(821-3)를 더 포함할 수도 있다. 입력 데이터 전처리부(821-2)는 제1 및 제2 모델에 입력되기 위해 획득된 데이터가 이용될 수 있도록, 획득된 데이터를 전처리할 수 있다. 입력 데이터 전처리부(821-2)는 제공부(821-4)가 프로그램에 대한 코드 정보에 포 함된 코드 스타일의 에러를 수정을 위하여 획득된 데이터를 이용할 수 있도록, 획득된 데이터를 기정의된 포맷 으로 가공할 수 있다. 입력 데이터 선택부(821-3)는 입력 데이터 획득부(821-1)에서 획득된 데이터 또는 입력 데이터 전처리부(821- 2)에서 전처리된 데이터 중에서 상황 판단에 필요한 데이터를 선택할 수 있다. 선택된 데이터는 제공부(821- 4)에게 제공될 수 있다. 입력 데이터 선택부(821-3)는 상황 판단을 위한 기설정된 선별 기준에 따라, 획득되거 나 전처리된 데이터 중에서 일부 또는 전부를 선택할 수 있다. 또한, 입력 데이터 선택부(821-3)는 모델 학습부 (821-4)에 의한 학습에 의해 기설정된 선별 기준에 따라 데이터를 선택할 수도 있다. 모델 갱신부(821-5)는 제공부(821-4)에 의해 제공되는 인식 결과에 대한 평가에 기초하여, 인공지능 모델이 갱 신되도록 제어할 수 있다. 예를 들어, 모델 갱신부(821-5)는 제공부(821-4)에 의해 제공되는 인식 결과를 모델 학습부(821-4)에게 제공함 으로써, 모델 학습부(821-4)가 인공지능 모델을 추가 학습 또는 갱신하도록 요청할 수 있다. 도 9b는 본 개시의 일 실시예에 따른 서버 및 외부 장치가 서로 연동하여 데이터를 학습하고 판단하는 예시도이 다. 도 9b에 도시된 바와 같이, 외부 장치(A)는 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러 수정을 위 한 정보를 획득한다. 서버(S)는 외부 장치(A)에 의한 학습 결과에 기초하여 생성된 모델들을 이용하여 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러를 수정할 수 있다. 이 경우, 외부 장치(A)의 모델 학습부(811-4)는 도 8에 도시된 학습부의 기능을 수행할 수 있다. 외부 장 치(A)의 모델 학습부(811-4)는 제1 및 제2 모델에 대한 판단 기준(혹은, 인식 기준)을 학습할 수 있다. 또한, 서버(S)의 제공부(821-4)는 입력 데이터 선택부(821-3)에 의해 선택된 데이터를 외부 장치(A)에 의해 생 성된 인공지능 모델에 적용하여 에러가 수정된 코드 스타일을 포함하는 코드 정보를 획득할 수 있다. 또한, 서버(S)의 제공부(821-4)는 외부 장치 (A)에 의해 생성된 인공지능 모델을 외부 장치(A)로부터 수신하고, 수신된 인공지능 모델을 이용하여 에러가 수정된 코드 스타일을 포함하는 코드 정보를 획득할 수 있다. 지금까지, 본 개시에 따른 서버에서 인공지능 모델을 이용하여 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러를 수정하는 동작에 대해서 상세히 설명하였다. 본 개시의 다양한 실시예들은 기기(machine)(예: 컴퓨터)로 읽을 수 있는 저장 매체(machine-readable storage media에 저장된 명령어를 포함하는 소프트웨어로 구현될 수 있다. 기기는, 저장 매체로부터 저장된 명령어를 호 출하고, 호출된 명령어에 따라 동작이 가능한 장치로서, 개시된 실시예들에 따른 전자 장치(예: 전자 장치 )를 포함할 수 있다. 상기 명령이 프로세서에 의해 실행될 경우, 프로세서가 직접, 또는 상기 프로세서의 제어하에 다른 구성요소들을 이용하여 상기 명령에 해당하는 기능을 수행할 수 있다. 명령은 컴파일러 또는 인터프리터에 의해 생성 또는 실행되는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장매체는, 비일시적(non- transitory) 저장매체의 형태로 제공될 수 있다. 여기서, '비일시적'은 저장매체가 신호(signal)를 포함하지 않 으며 실재(tangible)한다는 것을 의미할 뿐 데이터가 저장매체에 반영구적 또는 임시적으로 저장됨을 구분하지 않는다. 일시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory (CD-ROM))의 형태로, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 온라인으로 배포될 수 있다. 온라인 배포의 경 우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따른 구성 요소(예: 모듈 또는 프로그램) 각각은 단수 또는 복수의 개체로 구성될 수 있으며, 전술한 해당 서브 구성 요소들 중 일부 서브 구성 요소가 생략되거나, 또는 다른 서브 구성 요소가 다 양한 실시예에 더 포함될 수 있다. 대체적으로 또는 추가적으로, 일부 구성 요소들(예: 모듈 또는 프로그램)은 하나의 개체로 통합되어, 통합되기 이전의 각각의 해당 구성 요소에 의해 수행되는 기능을 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따른, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차 적, 병렬적, 반복적 또는 휴리스틱하게 실행되거나, 적어도 일부 동작이 다른 순서로 실행되거나, 생략되거나, 또는 다른 동작이 추가될 수 있다."}
{"patent_id": "10-2019-0044380", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1a는 본 개시의 일 실시예에 따른 프로그램에 대한 오류 검사를 수행하는 시스템도, 도 1b는 본 개시의 일 실시예에 따른 프로그램에 대한 오류 검사를 수행하는 시스템에 대한 예시도, 도 2는 본 개시의 일 실시예에 따른 서버의 블록도, 도 3은 본 개시의 일 실시예에 따른 프로그램에 대한 코드 정보에 포함된 코드 스타일의 에러 수정을 위한 각종 모듈을 저장하는 메모리의 블록도, 도 4는 본 개시의 일 실시예에 따른 서버에서 프로그램에 대한 코드 정보에 포함된 코드 스타일을 수정하기 위 한 방법의 흐름도, 도 5는 본 개시의 일 실시예에 따른 서버에서 코드 스타일 룰에 따라 발생된 에러 정보에 기초하여 코드 스타일 을 수정하는 예시도, 도 6은 본 개시의 일 실시예에 따른 서버에서 코드 스타일 체크 툴에 따라 변경된 에러 정보를 획득하는 예시도, 도 7a는 본 개시의 일 실시예에 따른 프로그램의 코드 스타일 수정을 위한 인공지능 모델의 학습을 도시한 블록 도,도 7b는 본 개시의 일 실시예에 따른 프로그램의 코드 스타일 수정을 위한 인공지능 모델을 학습을 도시한 예시 도, 도 8은 본 개시의 일 실시예에 따른 인공지능 모델을 업데이트하고 이용하는 서버의 프로세서의 세부 블록도, 도 9a는 본 개시의 일 실시예에 따른 학습부 및 획득부의 세부 블록도, 도 9b는 본 개시의 일 실시예에 따른 서버 및 외부 장치가 서로 연동하여 데이터를 학습하고 판단하는 예시도이 다."}
