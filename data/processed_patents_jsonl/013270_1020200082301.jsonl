{"patent_id": "10-2020-0082301", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0004894", "출원번호": "10-2020-0082301", "발명의 명칭": "터치 입력의 디스플레이 출력 지연을 줄이는 디바이스 및 방법", "출원인": "삼성전자주식회사", "발명자": "시도랜코 드미트로"}}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "디바이스가 터치 입력의 디스플레이 출력 지연을 줄이는 방법에 있어서,터치 이벤트를 터치 입력으로서 수신하는 단계;상기 터치 입력으로부터 터치 이벤트가 발생한 위치 좌표에 대응되는 입력 좌표 및 상기 터치 이벤트의 터치 정보에 대응되는 터치 특성값을 획득하는 단계;상기 입력 좌표 및 상기 터치 특성값으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표를 획득하는 단계;상기 입력 좌표 및 상기 예측 좌표로부터 상기 디스플레이에 표시될 이미지의 출력 좌표를 획득하는 단계;상기 출력 좌표 및 상기 터치 특성값으로부터 출력 이미지를 획득하는 단계;상기 디스플레이가 스캐닝중인 버퍼에 렌더링 레이어를 생성하는 단계; 및상기 출력 이미지를 상기 렌더링 레이어에 렌더링함으로써 상기 출력 이미지를 상기 디스플레이에 출력하는 단계;를 포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 터치 입력으로부터 터치 이벤트가 발생한 위치 좌표에 대응되는 입력 좌표 및 상기 터치 이벤트의 터치 정보에 대응되는 터치 특성값을 획득하는 단계는,상기 터치 이벤트의 상기 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득하는 단계; 및상기 터치 이벤트의 터치 특성값을 획득하는 단계를 포함하되,상기 터치 특성값은, 상기 터치 이벤트의 타임스탬프, 상기 터치 이벤트의 지속 시간, 상기 터치 이벤트와 타임라인 상 인접한 다른 터치 이벤트와의 시간 간격, 상기 터치 이벤트의 접촉 각도, 상기 터치 이벤트의 접촉 기울기의 방향, 및 상기 터치 이벤트의 접촉 표면에 적용된 압력 중 적어도 어느 하나를 포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 터치 입력으로부터 터치 이벤트가 발생한 위치 좌표에 대응되는 입력 좌표 및 상기 터치 이벤트의 터치 정보에 대응되는 터치 특성값을 획득하는 단계는,상기 터치 이벤트의 상기 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득하는 단계;상기 입력 좌표가 변하지 않는 터치 이벤트를 필터링하여 제거하는 단계; 및상기 필터링된 터치 이벤트의 터치 특성값을 획득하는 단계;를 포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 터치 입력으로부터 터치 이벤트가 발생한 위치 좌표에 대응되는 입력 좌표 및 상기 터치 이벤트의 터치 정보에 대응되는 터치 특성값을 획득하는 단계는,공개특허 10-2022-0004894-3-상기 터치 이벤트의 상기 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득하는 단계;상기 입력 좌표가 변하지 않는 터치 이벤트를 필터링하여 제거하는 단계;상기 필터링된 터치 이벤트의 입력 좌표를 정규화하는 단계; 및상기 필터링된 터치 이벤트의 터치 특성값을 획득하는 단계;를 포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 필터링된 터치 이벤트의 입력 좌표를 정규화하는 단계는,대응하는 터치 이벤트의 입력 좌표 및 상기 터치 이벤트로부터 타임라인 상 하나 이전의 필터링된 터치 이벤트의 입력 좌표 사이의 차이를 계산하는 단계;상기 입력 좌표 사이의 차이를 밀리미터 단위로 변환하는 단계; 및상기 변환된 입력 좌표 사이의 차이를 평균 터치 이벤트 지속 시간(Ts)으로 나누는 단계;를 포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 평균 터치 이벤트 지속 시간(Ts)은 으로 계산되고,Tfr은 프레임 지속 시간, N은 터치 입력 벡터의 차원, n은 프레임당 평균적인 터치 이벤트의 발생 횟수인,방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 입력 좌표 및 상기 터치 특성값으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표를 획득하는 단계는,상기 터치 특성값으로부터 3개의 프레임 앞의 정보의 예측이 가능한지 판단하는 단계;상기 터치 특성값으로부터 상기 3개의 프레임 앞의 정보의 예측이 가능한 경우 상기 3개의 프레임 앞의 정보로부터 예측 좌표를 획득하고, 상기 터치 특성값으로부터 상기 3개의 프레임 앞의 정보의 예측이 불가능한 경우상기 터치 특성값으로부터 2개의 프레임 앞의 정보의 예측이 가능한지 판단하는 단계;상기 터치 특성값으로부터 상기 2개의 프레임 앞의 정보의 예측이 가능한 경우 상기 2개의 프레임 앞의 정보로부터 예측 좌표를 획득하고, 상기 터치 특성값으로부터 상기 2개의 프레임 앞의 정보의 예측이 불가능한 경우상기 터치 특성값으로부터 1개의 프레임 앞의 정보의 예측이 가능한지 판단하는 단계; 및상기 터치 특성값으로부터 상기 1개의 프레임 앞의 정보의 예측이 가능한 경우 상기 1개의 프레임 앞의 정보로부터 예측 좌표를 획득하고, 상기 터치 특성값으로부터 상기 1개의 프레임 앞의 정보의 예측이 불가능한 경우상기 입력 좌표로부터 예측 좌표를 획득하는 단계;를 포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 입력 좌표 및 상기 터치 특성값으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표를 획득하는 단계는,LSTM(Long Short-Term Memory) 구조 및 GRU(Gate Recurrent Unit) 구조 중 적어도 하나를 포함하는 순환 신경공개특허 10-2022-0004894-4-망(Recurrent Neural Network, RNN)을 통해 상기 입력 좌표 및 상기 터치 특성값으로부터 예측 좌표를 획득하는것을 포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,상기 입력 좌표 및 상기 터치 특성값으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표를 획득하는 단계는,통계적인 사용자의 입력 데이터를 포함하는 데이터베이스를 기반으로 상기 예측 좌표를 획득하는 것을포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 입력 좌표 및 상기 예측 좌표로부터 상기 디스플레이에 표시될 이미지의 출력 좌표를 획득하는 단계는,상기 입력 좌표 및 상기 예측 좌표를 가중치 결합하여 출력 좌표를 획득하는 것을 포함하는, 방법."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "터치 입력의 디스플레이 출력 지연을 줄이는 디바이스에 있어서,외부로부터 터치 이벤트를 수신하는 입력 모듈 및 이미지를 출력하는 출력 모듈을 포함하는 디스플레이;하나 이상의 명령어들(instructions)을 포함하는 프로그램을 저장하는 메모리; 및상기 메모리에 저장된 프로그램의 하나 이상의 명령어들을 실행하는 적어도 하나의 프로세서를 포함하고,상기 프로세서는,상기 입력 모듈을 제어함으로써, 터치 이벤트를 터치 입력으로서 수신하고,상기 터치 입력으로부터 터치 이벤트가 발생한 위치 좌표에 대응되는 입력 좌표 및 상기 터치 이벤트의 터치 정보에 대응되는 터치 특성값을 획득하고,상기 입력 좌표 및 상기 터치 특성값으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표를 획득하고,상기 입력 좌표 및 상기 예측 좌표로부터 상기 디스플레이에 표시될 이미지의 출력 좌표를 획득하고,상기 출력 좌표 및 상기 터치 특성값으로부터 출력 이미지를 획득하고,상기 디스플레이가 스캐닝중인 버퍼에 렌더링 레이어를 생성하고,상기 출력 이미지를 상기 렌더링 레이어에 렌더링함으로써 상기 출력 이미지를 상기 디스플레이에 출력하는, 디바이스."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 프로세서는 상기 하나 이상의 명령어들을 실행하여,상기 터치 이벤트의 상기 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득하고,상기 터치 이벤트의 터치 특성값을 획득함으로써,상기 터치 입력으로부터 입력 좌표 및 터치 특성값을 획득하고,상기 터치 특성값은, 상기 터치 이벤트의 타임스탬프, 상기 터치 이벤트의 지속 시간, 상기 터치 이벤트와 타임라인 상 인접한 다른 터치 이벤트와의 시간 간격, 상기 터치 이벤트의 접촉 각도, 상기 터치 이벤트의 접촉 기울기의 방향, 및 상기 터치 이벤트의 접촉 표면에 적용된 압력 중 적어도 어느 하나를 포함하는, 디바이스.공개특허 10-2022-0004894-5-청구항 13 제11항에 있어서,상기 프로세서는 상기 하나 이상의 명령어들을 실행하여,상기 터치 이벤트의 상기 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득하고,상기 입력 좌표가 변하지 않는 터치 이벤트를 필터링하여 제거하고,상기 필터링된 터치 이벤트의 터치 특성값을 획득함으로써,상기 터치 입력으로부터 입력 좌표 및 터치 특성값을 획득하는, 디바이스."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제11항에 있어서,상기 프로세서는 상기 하나 이상의 명령어들을 실행하여,상기 터치 이벤트의 상기 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득하고,상기 입력 좌표가 변하지 않는 터치 이벤트를 필터링하여 제거하고,상기 필터링된 터치 이벤트의 입력 좌표를 정규화하고,상기 필터링된 터치 이벤트의 터치 특성값을 획득함으로써,상기 터치 입력으로부터 입력 좌표 및 터치 특성값을 획득하는, 디바이스."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 프로세서는 상기 하나 이상의 명령어들을 실행하여,대응하는 터치 이벤트의 입력 좌표 및 상기 터치 이벤트로부터 타임라인 상 하나 이전의 필터링된 터치 이벤트의 입력 좌표 사이의 차이를 계산하고,상기 입력 좌표 사이의 차이를 밀리미터 단위로 변환하고,상기 변환된 입력 좌표 사이의 차이를 평균 터치 이벤트 지속 시간(Ts)으로 나눔으로써,상기 필터링된 터치 이벤트의 입력 좌표를 정규화하는, 디바이스."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서,상기 프로세서는 상기 하나 이상의 명령어들을 실행하여,상기 터치 특성값으로부터 3개의 프레임 앞의 정보의 예측이 가능한지 판단하고,상기 터치 특성값으로부터 상기 3개의 프레임 앞의 정보의 예측이 가능한 경우 상기 3개의 프레임 앞의 정보로부터 예측 좌표를 획득하고, 상기 터치 특성값으로부터 상기 3개의 프레임 앞의 정보의 예측이 불가능한 경우상기 터치 특성값으로부터 2개의 프레임 앞의 정보의 예측이 가능한지 판단하고,상기 터치 특성값으로부터 상기 2개의 프레임 앞의 정보의 예측이 가능한 경우 상기 2개의 프레임 앞의 정보로부터 예측 좌표를 획득하고, 상기 터치 특성값으로부터 상기 2개의 프레임 앞의 정보의 예측이 불가능한 경우상기 터치 특성값으로부터 1개의 프레임 앞의 정보의 예측이 가능한지 판단하고,상기 터치 특성값으로부터 상기 1개의 프레임 앞의 정보의 예측이 가능한 경우 상기 1개의 프레임 앞의 정보로부터 예측 좌표를 획득하고, 상기 터치 특성값으로부터 상기 1개의 프레임 앞의 정보의 예측이 불가능한 경우상기 입력 좌표로부터 예측 좌표를 획득함으로써,상기 입력 좌표 및 상기 터치 특성값으로부터 예측 좌표를 획득하는, 디바이스.공개특허 10-2022-0004894-6-청구항 17 제11항에 있어서,상기 프로세서는 상기 하나 이상의 명령어들을 실행함으로써,LSTM(Long Short-Term Memory) 구조 및 GRU(Gate Recurrent Unit) 구조 중 적어도 하나를 포함하는 순환 신경망(Recurrent Neural Network, RNN)을 통해 상기 입력 좌표 및 상기 터치 특성값으로부터 예측 좌표를획득하는, 디바이스."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제11항에 있어서,상기 프로세서는 상기 하나 이상의 명령어들을 실행함으로써,통계적인 사용자의 입력 데이터를 포함하는 데이터베이스를 기반으로 상기 입력 좌표 및 상기 터치 특성값으로부터 예측 좌표를 획득하는, 디바이스."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제11항에 있어서,상기 프로세서는 상기 하나 이상의 명령어들을 실행함으로써,상기 입력 좌표 및 상기 예측 좌표를 가중치 결합하여 출력 좌표를 획득하는, 디바이스."}
{"patent_id": "10-2020-0082301", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제1항 내지 제10항 중 어느 한 항의 방법을 컴퓨터에서 실행시키기 위한 프로그램을 기록한 컴퓨터로 읽을 수있는 기록매체."}
{"patent_id": "10-2020-0082301", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "터치 입력의 디스플레이 출력 지연을 줄이는 디바이스 및 방법이 제공된다. 디바이스가 터치 입력의 디스플레이 출력 지연을 줄이는 방법은, 터치 이벤트를 터치 입력으로서 수신하는 단계; 상기 터치 입력으로부터 터치 이벤 트가 발생한 위치 좌표에 대응되는 입력 좌표 및 상기 터치 이벤트의 터치 정보에 대응되는 터치 특성값을 획득 하는 단계; 상기 입력 좌표 및 상기 터치 특성값으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표 를 획득하는 단계; 상기 입력 좌표 및 상기 예측 좌표로부터 상기 디스플레이에 표시될 이미지의 출력 좌표를 획 득하는 단계; 상기 출력 좌표 및 상기 터치 특성값으로부터 출력 이미지를 획득하는 단계; 상기 디스플레이가 스 캐닝중인 버퍼에 렌더링 레이어를 생성하는 단계; 및 상기 출력 이미지를 상기 렌더링 레이어에 렌더링함으로써 상기 출력 이미지를 상기 디스플레이에 출력하는 단계를 포함한다."}
{"patent_id": "10-2020-0082301", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 터치 입력 대비 디스플레이 출력의 지연을 줄이는 디바이스 및 방법에 대한 것으로서, 보다 상세하게 는, 디바이스에서 수신된 터치 입력으로부터 미래의 터치 이벤트를 예측하고, 예측된 터치 이벤트 정보로 생성 된 출력 이미지를 디스플레이가 스캐닝중인 버퍼에 직접 렌더링함으로써 디스플레이 출력의 지연을 줄이는 디바 이스 및 방법에 관한 것이다."}
{"patent_id": "10-2020-0082301", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "오늘날 터치 스크린(Touch Screen)은 스마트폰(Smartphone), 태블릿(Tablet) PC 및 엔터테인먼트 (Entertainment) 시스템과 같은 광범위한 대화형 장치의 기본 입력 매커니즘이다. 최근 주로 고려되는 모바일 장치에서는, 스마트폰, 태블릿 PC 등을 HID(Human Interface Device)로서, 손가락을 이용한 터치 입력뿐만 아니라 필기 또는 그림 그리기가 가능한 디지타이저 펜(Digitizer Pen)의 일종인 스타일 러스 펜(Stylus Pen)을 입력 장치로 점점 더 많이 적용하고 있다. 스타일러스 펜을 통한 입력은 손가락에 의한 입력에 비해 더 세밀한 입력이 가능하고, 세밀한 그림 그리기 및 글씨 쓰기 등의 기능을 지원할 수 있다. 터치 스크린의 인기는 자연스러운 터치 및 이동 상호작용으로부터 발생할 수 있다. 사용자는 실제 물체인 터치 스크린을 터치하여 가상 공간상의 움직임을 조작할 수 있다. 예를 들어, 스타일러스 펜으로 터치 스크린에 그림 을 그리면, 스크린 상 이미지가 디스플레이 되어, 실제로 종이에 그림을 그리는 것과 같은 느낌을 받을 수 있다. 따라서 이 경우, 사용자의 행동과 해당 시스템의 응답 사이의 지연(Latency)은 직접적인 객체 조작의 환 상을 무너트릴 수 있다. 사용자가 지연을 인식하는 순간, 직접 조작의 환상은 무너지기 시작한다. 예를 들어, 사용자가 필기 또는 그림 의 라인 헤드(Line Head)가 약간의 간격을 두고 스타일러스(Stylus) 펜촉을 따르고 있다는 것을 인식하면, 디바 이스가 더이상 스타일러스 펜촉 움직임과 결합된 것처럼 느끼지 않는다. 따라서, 가상 현실의 리얼리티(Reality)가 떨어질 수 있다. 이러한 입력 대비 출력의 지연 효과는 스타일러스 펜이 터치 스크린 상에서 빠르게 움직일수록 더욱 심해진다. 스타일러스 펜을 이용하여 필기를 하거나 그림을 그릴 경우, 필기 또는 그리기의 특성상 펜촉은 터치 스크린 상 에서 계속 움직인다. 이 때, 펜촉은 라인 헤드로부터 상당한 거리를 두고 이동하게 되며, 때로는 라인 구성 방 향과 반대 방향으로 이동할 수도 있다. 이에 따라, 터치 입력에 대응하는 디스플레이 출력의 지연을 줄일 수 있는 기술이 요구된다."}
{"patent_id": "10-2020-0082301", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시의 일 실시예는, 터치 이벤트의 실제 입력 좌표 및 터치 이벤트의 터치 정보를 이용해 적어도 하나의 프 레임 이후의 터치 이벤트의 좌표를 예측하고, 실제 입력보다 앞서 예측된 이미지를 출력함으로써, 터치 입력의 디스플레이 출력 지연을 줄일 수 있는 디바이스 및 방법을 제공할 수 있다. 또한, 본 개시의 일 실시예는, 예측된 터치 이벤트 정보를 이용해 생성된 출력 이미지를 디스플레이가 스캐닝중 인 버퍼에 직접 렌더링함으로써, 디스플레이 출력 지연을 줄일 수 있는 디바이스 및 방법을 제공할 수 있다."}
{"patent_id": "10-2020-0082301", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상술한 기술적 과제를 달성하기 위한 기술적 수단으로서 개시된, 디바이스가 터치 입력의 디스플레이 출력 지연 을 줄이는 방법은, 터치 이벤트를 터치 입력으로서 수신하는 단계; 상기 터치 입력으로부터 터치 이벤트가 발생 한 위치 좌표에 대응되는 입력 좌표 및 상기 터치 이벤트의 터치 정보에 대응되는 터치 특성값을 획득하는 단계; 상기 입력 좌표 및 상기 터치 특성값으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표를 획득하는 단계; 상기 입력 좌표 및 상기 예측 좌표로부터 상기 디스플레이에 표시될 이미지의 출력 좌표를 획득 하는 단계; 상기 출력 좌표 및 상기 터치 특성값으로부터 출력 이미지를 획득하는 단계; 상기 디스플레이가 스 캐닝중인 버퍼에 렌더링 레이어를 생성하는 단계; 및 상기 출력 이미지를 상기 렌더링 레이어에 렌더링함으로써 상기 출력 이미지를 상기 디스플레이에 출력하는 단계를 포함할 수 있다. 상술한 기술적 과제를 달성하기 위한 기술적 수단으로서 개시된, 디바이스는, 외부로부터 터치 이벤트를 수신하 는 입력 모듈 및 이미지를 출력하는 출력 모듈을 포함하는 디스플레이; 하나 이상의 명령어들을 포함하는 프로 그램을 저장하는 메모리; 및 상기 메모리에 저장된 프로그램의 하나 이상의 명령어들을 실행하는 적어도 하나의 프로세서를 포함하고, 상기 프로세서는, 상기 입력 모듈을 제어함으로써, 터치 이벤트를 입력으로서 수신하고, 상기 터치 입력으로부터 터치 이벤트가 발생한 위치 좌표에 대응되는 입력 좌표 및 상기 터치 이벤트의 터치 정 보에 대응되는 터치 특성값을 획득하고, 상기 입력 좌표 및 상기 터치 특성값으로부터 적어도 하나의 프레임 이 후의 터치 이벤트의 예측 좌표를 획득하고, 상기 입력 좌표 및 상기 예측 좌표로부터 상기 디스플레이에 표시될 이미지의 출력 좌표를 획득하고, 상기 출력 좌표 및 상기 터치 특성값으로부터 출력 이미지를 획득하고, 상기 디스플레이가 스캐닝중인 버퍼에 렌더링 레이어를 생성하고, 상기 출력 이미지를 상기 렌더링 레이어에 렌더링 함으로써 상기 출력 이미지를 상기 디스플레이에 출력할 수 있다. 상술한 기술적 과제를 달성하기 위한 기술적 수단으로서, 컴퓨터로 읽을 수 있는 기록매체는, 개시된 방법의 실 시예들 중에서 적어도 하나를 컴퓨터에서 실행시키기 위한 프로그램이 저장된 것일 수 있다."}
{"patent_id": "10-2020-0082301", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 양태들은 터치 입력의 디스플레이 출력 지연을 줄일 수 있는 디바이스 및 방법들을 제공한다."}
{"patent_id": "10-2020-0082301", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "아래에서는 첨부한 도면을 참조하여 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 본 개시의 실시예를 상세히 설명한다. 그러나 본 개시는 여러 가지 상이한 형태로 구현될 수 있으며 여기에서 설명하는 실시예에 한정되지 않는다. 그리고 도면에서 본 개시를 명확하게 설명하기 위해서 설명과 관 계없는 부분은 생략하였으며, 명세서 전체를 통하여 유사한 부분에 대해서는 유사한 도면 부호를 붙였다. 본 개시의 실시예들에서 사용되는 용어는 본 개시의 기능을 고려하면서 가능한 현재 널리 사용되는 일반적인 용 어들을 선택하였으나, 이는 당 분야에 종사하는 기술자의 의도 또는 판례, 새로운 기술의 출현 등에 따라 달라 질 수 있다. 또한, 특정한 경우는 출원인이 임의로 선정한 용어도 있으며, 이 경우 해당되는 실시예의 설명 부 분에서 상세히 그 의미를 기재할 것이다. 따라서 본 명세서에서 사용되는 용어는 단순한 용어의 명칭이 아닌, 그 용어가 가지는 의미와 본 개시의 전반에 걸친 내용을 토대로 정의되어야 한다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함할 수 있다. 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 용어들은 본 명세서에 기재된 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가질 수 있다. 본 개시 전체에서 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다 른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있음을 의미한다. 또한, 본 명세서에 기재 된 \"...부\", \"...모듈\" 등의 용어는 적어도 하나의 기능이나 동작을 처리하는 단위를 의미하며, 이는 하드웨어 또는 소프트웨어로 구현되거나 하드웨어와 소프트웨어의 결합으로 구현될 수 있다. 명세서 전체에서, 어떤 부분이 다른 부분과 \"연결\"되어 있다고 할 때, 이는 \"직접적으로 연결\"되어 있는 경우뿐 아니라, 그 중간에 다른 소자를 사이에 두고 \"전기적으로 연결\"되어 있는 경우도 포함한다. 또한 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아 니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 본 명세서에서 사용된 표현 \"~하도록 구성된(또는 설정된)(configured to)\"은 상황에 따라, 예를 들면, \"~에 적 합한(suitable for)\", \"~하는 능력을 가지는(having the capacity to)\", \"~하도록 설계된(designed to)\", \"~하도록 변경된(adapted to)\", \"~하도록 만들어진(made to)\", 또는 \"~를 할 수 있는(capable of)\"과 바꾸어 사용 될 수 있다. 용어 \"~하도록 구성된(또는 설정된)\"은 하드웨어적으로 \"특별히 설계된(specifically designed to)\" 것만을 반드시 의미하지 않을 수 있다. 대신, 어떤 상황에서는, \"~하도록 구성된 시스템\"이라는 표현은, 그 시스템이 다른 장치 또는 부품들과 함께 \"~할 수 있는\" 것을 의미할 수 있다. 예를 들면, 문구 \"A, B, 및 C 를 수행하도록 구성된(또는 설정된) 프로세서\"는 해당 동작을 수행하기 위한 전용 프로세서(예: 임베디드 프로 세서), 또는 메모리에 저장된 하나 이상의 소프트웨어 프로그램들을 실행함으로써, 해당 동작들을 수행할 수 있 는 범용 프로세서(generic-purpose processor)(예: CPU 또는 application processor)를 의미할 수 있다. 본 개시에서 '캔버스(canvas)'는 디바이스의 디스플레이 상의 출력이 표시되는 영역, 즉, 스크린의 영역을 의미 한다. 예를 들어, 캔버스는 디스플레이에 포함된 패널들이 위치하는 영역일 수 있다. 본 개시에서 '입력'은 외부에서 디바이스의 디스플레이 상에 가해지는 터치 이벤트(Touch Event)를 의미할 수 있다. 예를 들어, 터치 이벤트는 외부 물체가 디스플레이에 접촉하는 '터치 다운 이벤트(Touch-down Event)', 외부 물체가 디스플레이에 접촉한 상태로 움직이는 '터치 무브 이벤트(Touch-move Event)' 및 외부 물체가 디스 플레이에서 분리되는 '터치 업 이벤트(Touch-up Event)'를 포함할 수 있다. 각각의 터치 이벤트는 특정 시간의 '입력 신호' 또는 '입력'이 될 수 있다. 본 개시에서 '타임스탬프(Timestamp)'는 각각의 입력 정보가 생성되거나 변경된 시각을 나타내는 문자열을 뜻한 다. 타임스탬프는 둘 이상의 시각을 비교하거나 기간을 계산할 때 편리하게 사용하기 위해 정의되었으며, 일관 성 있는 형식으로 표현될 수 있다. 타임 스탬프는 이벤트, 즉 사건이 컴퓨터에 기록된 시간을 의미하며, 사건 그 자체의 시간은 아니다. 예를 들어, 특정한 입력으로부터 하나의 타임스탬프 이후의 입력이란 해당 입력 후로 발생하는 최초의 터치 다운 이벤트, 터치 무브 이벤트 또는 터치 업 이벤트에 해당하는 입력을 의미할 수 있다. 본 개시에서 '타임라인(Timeline)'은 이벤트들을 시간 순서대로 나열해 놓은 것을 의미할 수 있다. 예를 들어, 특정한 터치 이벤트로부터 타임라인 상 하나 이전의 터치 이벤트란 해당 터치 이벤트 이전에 발생하는 최후의 터치 이벤트를 의미할 수 있다. 본 개시에서 '프레임(Frame)'은 디스플레이에 출력되는 정지 이미지의 낱장을 의미할 수 있다. 즉, 연속된 장면 을 표시하여 움직이는 화상을 만들어내는 경우로서, 영상 출력 또는 실시간 그리기, 쓰기 등의 작업에서 적용될 수 있다. 예를 들어, 하나의 프레임 이후의 데이터란 해당 출력 이미지의 다음 장면에 갱신되는 화면의 이미지 데이터를 의미할 수 있다. 본 개시에서 '좌표'는 캔버스 내에서 특정 입력, 예측 값, 또는 출력이 위치하는 부분을 의미할 수 있다. 예를 들어, 좌표는 2차원의 캔버스에서 미리 지정된 영점(0,0)으로부터의 상대적인 패널 거리 (x,y)로 표현될 수 있 다. 본 개시에서 '입력 좌표'는 입력 즉 터치 이벤트의 캔버스 상 좌표를 의미할 수 있다. '예측 좌표'는 프로세서 가 터치 입력으로부터 예측한 적어도 하나의 프레임 이후의 예측 입력 좌표를 의미할 수 있다. '출력 좌표'는 캔버스 상 이미지가 표시되는 좌표를 의미할 수 있다. 본 개시에서 '특성값(characteristics)'은 정보 또는 데이터를 의미할 수 있다. 예를 들어, 터치 특성값은 터치 입력과 관련된 특징, 정보 또는 데이터일 수 있다. 이하 첨부된 도면을 참고하여 본 개시를 상세히 설명하기로 한다. 도 1은 본 개시의 일 실시예에 따른 디바이스가 터치 입력의 디스플레이 출력 지연을 줄이는 방법 의 개요도이다. 도 1을 참조하면, 디바이스는 디스플레이를 포함할 수 있고, 디스플레이는 입력 모듈 및 출력 모듈을 포함할 수 있다. 디바이스는 디스플레이의 입력 모듈을 통해 터치 이 벤트를 터치 입력(TI)으로서 수신하고, 터치 입력(TI)으로부터 입력 좌표(xn) 및 터치 특성값(vn)을 획득할 수 있다. 디바이스는 입력 좌표(xn) 및 터치 특성값(vn)으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표(pn+1)를 획득할 수 있다. 또한, 디바이스는 획득한 입력 좌표(xn) 및 예측 좌표(pn+1)로부터 디 스플레이의 출력 모듈을 통해 표시될 이미지의 출력 좌표(yn)를 획득할 수 있다. 디바이스는 출력 좌표(yn) 및 터치 특성값(vn)으로부터 출력 이미지(D)를 획득하고, 예측된 출력 이미지 부분(Dp) 및 실제 출력 이미지 부분(Dr)을 포함하는 출력 이미지(D)를 디스플레이에 출력할 수 있다.디바이스는 외부로부터 터치 입력을 수신하고, 터치 입력을 처리함으로써, 터치 입력을 이미지로 변환하 여 출력하는 디바이스일 수 있다. 디바이스는 예를 들어, 스마트 폰(smartphone), 태블릿 PC(tablet personal computer), 이동 전화기(mobile phone), 영상 전화기, 전자책 리더기(e-book reader), 데스크탑 PC(desktop personal computer), 랩탑 PC(laptop personal computer), 넷북 컴퓨터(netbook computer), 워크 스테이션(workstation), 서버, PDA(personal digital assistant), PMP(portable multimedia player), MP3 플 레이어, 모바일 의료기기, 카메라(camera), 웨어러블 장치(wearable device), 가전기기 및 기다 모바일 또는 비 모바일 컴퓨팅 장치 중 적어도 하나로 구성될 수 있다. 그러나, 디바이스가 전술한 예시로 한정되는 것은 아니며, 디바이스는 터치 입력을 수신하고 수신된 입력을 처리하여 출력하는 모든 종류의 기기를 포함할 수 있다. 도 2는 본 개시의 일 실시예에 따른 디바이스의 블록도이다. 도 2를 참조하면, 디바이스는 입력 모듈 및 출력 모듈을 포함하는 디스플레이, 프로세 서 및 메모리를 포함할 수 있다. 도 2에 도시된 구성 요소 모두가 디바이스의 필수 구성 요 소인 것은 아니다. 도 2에 도시된 구성 요소보다 많은 구성 요소들에 의해 디바이스가 구현될 수도 있고, 도 2에 도시된 구성 요소보다 적은 구성요소에 의해 디바이스가 구현될 수도 있다. 디스플레이는 외부로부터 터치 이벤트를 수신하는 입력 모듈 및 이미지를 출력하는 출력 모듈 을 포함할 수 있다. 일 실시예에서, 입력 모듈은 터치 패드(Touch Pad) 또는 패널(Panel)을 포함할 수 있다. 입력 모듈(113 0)은 외부(예를 들어, 디지타이저 펜 펜, 필기구 또는 사용자의 신체)로부터 터치를 수신하고, 수신된 터치로부 터 터치 이벤트를 획득할 수 있다. 일 실시예에서, 입력 모듈은 접촉식 정전 용량 방식, 압력식 저항막 방식, 적외선 감지 방식, 표면 초음파 전도 방식, 적분식 장력 측정 방식, 피에조 효과 방식 등을 통해 터치 입 력을 수신할 수 있다. 일 실시예에서, 디바이스의 프로세서는 입력 모듈을 통해 수신된 입력 으로부터 노이즈(예를 들어, 손떨림 또는 정전기 등으로 인한 비접촉 성분)를 제거할 수 있다. 출력 모듈은 디스플레이에 표시되는 출력을 제어하거나 설정하기 위한 사용자 입력을 수신할 수 있 다. 일 실시예에서, 출력 모듈은 패널을 포함할 수 있다. 출력 모듈은 예를 들어, 액정 디스플레이 (liquid crystal display), 박막 트랜지스터 액정 디스플레이(thin film transistor-liquid crystal display), 유기 발광 다이오드(organic light-emitting diode), 플렉시블 디스플레이(flexible display), 3차원 디스플레 이(3D display), 전기영동 디스플레이(electrophoretic display) 중에서 적어도 하나로 구성될 수 있다. 메모리는 디바이스의 동작을 제어하기 위해 후술할 프로세서에 의해 실행될 프로그램을 저장 할 수 있다. 메모리는 디바이스의 동작을 제어하기 위한 적어도 하나 이상의 명령어들 (instructions)을 포함하는 프로그램을 저장할 수 있다. 메모리에는 프로세서가 판독할 수 있는 명 령어들 및 프로그램 코드(program code)가 저장될 수 있다. 일 실시예에서, 프로세서는 메모리에 저장된 프로그램의 명령어들 또는 코드들을 실행함으로써 구현될 수 있다. 메모리는 디바이스로 입 력되거나 디바이스로부터 출력되는 데이터를 저장할 수 있다. 메모리는 예를 들어, 플래시 메모리(flash memory), 하드디스크(hard disk), 멀티미디어 카드 마이크로 타입(multimedia card micro type), 카드 타입의 메모리(예를 들어, SD 또는 XD 메모리 등), 램(RAM, Random Access Memory), SRAM(Static Random Access Memory), 롬(ROM, Read-Only Memory), EEPROM(Electrically Erasable Programmable Read-Only Memory), PROM(Programmable Read-Only Memory), 자기 메모리, 자기 디스크, 광디스크 중 적어도 하나의 타입의 저장 매체를 포함할 수 있다. 메모리에 저장된 프로그램들은 그 기능에 따라 복수 개의 모듈들로 분류할 수 있다. 예를 들어, 메모리 는, 입력 수신 모듈, 입력 특성 획득 모듈, 예측 모듈 및 출력 좌표 획득 모듈(151 7)을 포함하는 지연 보상부및 렌더링 모듈을 포함하는 지연 감소부를 포함할 수 있다. 또한, 메모리는 RNN(순환 신경망), 데이터베이스 및 버퍼를 포함할 수 있다. 프로세서는, 디바이스의 전반적인 동작을 제어할 수 있다. 예를 들어, 프로세서는 메모리 에 저장된 프로그램들을 실행함으로써, 디스플레이, 입력 모듈, 출력 모듈 및 메모리 등을 전반적으로 제어할 수 있다. 프로세서는 산술, 로직 및 입출력 연산과 시그널 프로세싱을 수행하는 하드웨어 구성 요소로 구성될 수 있다. 프로세서는 예를 들어, 중앙 처리 장치(Central Processing Unit), 마이크로 프로세서 (microprocessor), 그래픽 프로세서(Graphic Processing Unit), ASICs(Application Specific Integrated Circuits), DSPs(Digital Signal Processors), DSPDs(Digital Signal Processing Devices), PLDs(Programmable Logic Devices), 및 FPGAs(Field Programmable Gate Arrays) 중 적어도 하나로 구성될 수 있으나, 이에 제한되는 것은 아니다. 프로세서는, 메모리에 저장된 지연 보상부를 실행함으로써, 디바이스가 수신한 터치 입력의 적어도 하나의 프레임 이후의 터치 이벤트를 예측하고, 예측된 정보를 통해 획득한 이미지를 해당 프레 임의 실제 터치 입력의 수신에 앞서 출력함으로써, 이미지의 출력이 실시간 터치 입력보다 지연되는 효과를 보 상하도록 구성될 수 있다. 이하 메모리에 저장된 지연 보상부에 포함된 각각의 모듈들의 기능을 보다 상세하게 설명한다. 프로세서는, 메모리에 저장된 입력 수신 모듈을 실행함으로써, 외부로부터의 터치 이벤트를 입력 모듈을 통해 터치 입력으로서 수신할 수 있다. 터치 이벤트는 디지타이저 펜 등의 기기 또는 사용자 의 신체 일부를 포함하는 외부 장치로부터 입력될 수 있다. 프로세서는, 메모리에 저장된 입력 특성 획득 모듈을 실행함으로써, 수신된 입력으로부터 현 재 프레임(n)의 입력 좌표(xn) 및 터치 특성값(vn)을 획득할 수 있다. 입력 좌표(xn)는 터치 이벤트가 발생한 위 치 좌표에 대응되며, 터치 입력이 수신된 디스플레이 캔버스 상의 위치로 설정될 수 있다. 터치 특성값(vn)은 터 치 이벤트의 터치 정보에 대응되며, 터치 이벤트의 타임스탬프, 터치 이벤트의 지속 시간, 터치 이벤트와 타임 라인 상 인접한 다른 터치 이벤트와의 시간 간격, 터치 이벤트의 접촉 각도, 터치 이벤트의 접촉 기울기의 방향, 및 터치 이벤트의 접촉 표면에 적용된 압력 중 적어도 어느 하나를 포함할 수 있다. 입력 좌표(xn) 및 터 치 특성값(vn)은 메모리에 저장된 데이터베이스로 전달되어 저장되고, 데이터베이스를 업데 이트할 수 있다. 프로세서는, 메모리에 저장된 예측 모듈을 실행함으로써, 현재 프레임(n)의 입력 좌표(xn) 및 터치 특성값(vn)으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표(pn+1)를 획득할 수 있다. 예 를 들어, 프로세서는, 예측 모듈을 실행함으로써, 현재 터치 입력의 입력 좌표(xn) 및 터치 이벤트 의 속도, 터치 이벤트의 접촉 압력 및 터치 이벤트의 접촉 기울기 등의 정보를 종합적으로 고려하여, 이후 프레 임의 터치 이벤트의 발생 위치를 예측할 수 있다. 일 실시예에서, 예측 모듈은 RNN(순환 신경망)을 이용해 예측 좌표(pn+1)를 산출하거나, 예측 좌표(pn+1) 획득 시 데이터베이스에 저장된 정보를 이용할 수 있다. 메모리에 저장된 순환 신경망(Recurrent Neural Network, RNN)은 인공 신경망의 한 종류로서, 유 닛 간의 연결이 순환적 구조를 갖는 특징을 가질 수 있다. 이러한 순환적 구조는 시변적 동적 특징을 모델링할 수 있도록 신경망 내부에 상태를 저장할 수 있게 해준다. 비순환 신경망과 달리, 순환 인공 신경망은 메모리를 이용해 시퀀스 형태의 입력을 처리할 수 있다. 따라서 순환 인공 신경망은 음성 인식이나 본 개시와 같은 필기 체 인식과 같이 시변적 특징을 가지는 데이터를 처리하는 것에 유리하다. 일 실시예에서 프로세서는, 메모리에 저장된 예측 모듈을 실행함으로써, LSTM(Long Short- Term Memory) 구조 및 GRU(Gate Recurrent Unit) 구조 중 적어도 하나를 포함하는 RNN을 이용하여 적어 도 하나의 프레임 이후의 터치 이벤트의 예측 좌표(pn+1)를 획득할 수 있다. 예를 들어, 프로세서는 RNN을 이용하여 예측 좌표(pn+1)를 획득하도록 하는 예측 모듈을 실행함으로써, 현재 프레임의 터치 이벤트의 정보(xn, vn)를 반영하여 예측 좌표(pn+1)를 획득할 수 있다. 순환 신경망을 이용함으로써, 미래 의 터치 이벤트에 대한 예측 좌표(pn+1)의 신뢰도가 증가될 수 있다. 메모리에 저장된 데이터베이스는 방대한 양의 데이터의 집합으로 구성될 수 있다. 일 실시예에서, 데이터베이스는 통계적인 사용자의 입력 데이터를 포함할 수 있다. 프로세서는, 메모리에 저 장된 예측 모듈을 실행함으로써, 통계적인 사용자의 입력 데이터를 포함하는 데이터베이스를 기반 으로 기계 학습(Machine Learning, ML) 기법을 이용해 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표 (pn+1)를 획득할 수 있다. 예를 들어, 프로세서는 통계적인 사용자의 입력 데이터를 포함하는 데이터베이스를 이용하여 예측 좌표(pn+1)를 획득하도록 하는 예측 모듈을 실행함으로써, 사용자의 쓰기 또는 그리기 선호도가 고려된 통계적인 사용자 정보를 반영하여 예측 좌표(pn+1)를 획득할 수 있다. 특정 사용자에 대 한 통계적인 사용자 정보를 반영하는 경우, 미래의 터치 이벤트에 대한 예측의 신뢰도가 증가될 수 있다. 일 실시예에서, 데이터베이스는 각각의 외부 입력 기기(예를 들어, 스타일러스 펜 또는 손가락)의 성질에 따른 이동 특성 데이터를 포함할 수 있다. 예를 들어, 데이터베이스는, 스타일러스 펜으로부터 입력되는 정보는 프로세서는, 메모리에 저장된 출력 좌표 획득 모듈을 실행함으로써, 현재 프레임의 입력 좌 표(xn) 및 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표(pn+1)로부터 출력 좌표(yn)를 획득할 수 있다. 출력 좌표(yn)는 디바이스가 디스플레이를 통해 출력할 이미지의 좌표를 의미한다. 일 실시예에서, 출력 좌표(yn)는 입력 좌표(xn) 및 예측 좌표(pn+1)를, 예측 결과의 신뢰도에 기반해 가중치 결합하여 산출될 수 있다. 출력 좌표(yn)는 메모리에 저장된 데이터베이스로 전달되어 저장되고, 데이터베이스를 업데 이트할 수 있다. 프로세서는, 메모리에 저장된 지연 감소부를 실행함으로써, 출력 이미지를 디스플레이가 스 캐닝 중인 버퍼에 직접 렌더링(Rendering)할 수 있다. 이 경우, 이미지의 표시에 있어서, 후술할 라인레 이싱(Line-racing) 기법 또는 드로우 패드(Draw Pad) 동기화 기법이 적용될 수 있다. 출력 이미지가 디스플레이 가 스캐닝중인 버퍼에 직접 렌더링될 경우, 렌더링의 진행과 동시에 스캐닝(Scanning)을 진행할 수 있으 므로, 렌더링이 종료될 때까지 스캐닝을 대기하지 않아도 된다. 즉, 스캐닝 대기 시간이 제거되어, 전체적인 디 스플레이 출력에 소요되는 시간이 감축될 수 있다. 또한, 스캐닝중인 버퍼에 직접 렌더링하는 경우, 단일 한 버퍼의 사용이 가능한 바, 버퍼 교체 과정이 생략될 수 있다. 따라서, 버퍼 교체 과정에서 소요되는 시간이 감축될 수 있고, 전체적인 디스플레이 출력에 소요되는 시간이 더욱 감축될 수 있다. 프로세서는, 메모리에 저장된 하나 이상의 명령어들을 실행함으로써, 버퍼에 출력 이미지의 렌더링을 위한 렌더링 레이어(Rendering Layer)를 생성할 수 있다. 프로세서는, 메모리에 저장된 지연 감소부에 포함된 렌더링 모듈을 실행함으로써, 출 력 좌표(yn) 및 터치 특성값(vn)으로부터 출력 이미지를 획득할 수 있고, 출력 이미지를 메모리에 저장된 버퍼의 렌더링 레이어에 렌더링함으로써, 출력 이미지를 디스플레이에 출력할 수 있다. 예를 들어, 프로세서는 렌더링 모듈을 실행함으로써, 출력 좌표(yn)에 대응하는 디스플레이 상의 위치에, 접촉 기울기, 접촉 압력 등의 터치 특성값(vn)으로부터 결정된, 선의 굵기, 선의 투명도 등의 성질을 반영한 출력 이 미지를 출력할 수 있다. 종래의 터치 입력에 따른 출력을 표시하는 디바이스의 경우, 터치 이벤트가 수신된 해당 프레임의 입력 데이터 만을 이용해 대응되는 이미지를 출력하였기 때문에, 데이터 인식 및 이미지로의 처리 과정에서 지연이 발생하는 경우가 많았다. 또한, 디스플레이 상 표시되는 이미지의 갱신과정에서 더블 버퍼(Double Buffer) 또는 트리플 버퍼(Triple Buffer)를 이용할 경우, 백 버퍼(Back Buffer)에 이미지가 렌더링되고, 백 버퍼와 디스플레이 상 표시되고 있는 프론트 버퍼(Front Buffer)의 교체가 이루어짐에 따라, 렌더링 소요 시간 및 버퍼 교체 시간만큼 의 출력 지연의 효과가 발생한다. 따라서, 실시간으로 입력된 터치 데이터가 이미지로 렌더링이 이루어져야 하 는 그리기, 쓰기 등의 작업에서 3개의 프레임 이상의 과도한 출력 지연이 발생하는 문제가 있었다. 본 개시의 일 실시예에 따른 디바이스는, 메모리에 저장된 지연 보상부를 포함함으로써, 디바이스 가 수신한 터치 입력보다 적어도 하나의 프레임 이후의 입력을 예측하고, 예측된 이미지를 출력할 수 있 다. 이미지의 예측에는 순환 신경망(RNN) 또는 사용자 데이터를 포함하는 데이터베이스의 기계 학습 기법이 적 용될 수 있다. 인공 신경망 또는 기계 학습 기법의 적용으로 예측의 신뢰성이 상승할 수 있다. 실제 터치 입력 이후의 터치 이벤트를 예측하고, 예측 결과를 해당 터치 입력의 수신에 앞서 미리 표시하는 방법으로, 이미지의 출력이 실시간 터치 입력보다 지연되는 효과를 줄일 수 있고, 실시간 에뮬레이션(Emulation)이 가능하다. 또한, 본 개시의 일 실시예에 따른 디바이스는, 메모리에 저장된 지연 감소부를 포함함으로써, 출 력 이미지를 디스플레이가 스캐닝중인 버퍼에 직접 렌더링할 수 있다. 이에 따라, 이미지의 표시에 있어 서 렌더링의 진행과 동시에 이미지의 스캐닝을 진행할 수 있으므로, 렌더링이 종료될 때까지 스캐닝을 대기하지 않을 수 있다. 즉, 스캐닝 대기 시간이 제거될 수 있고, 나아가 전체적인 디스플레이 출력에 소요되는 시간이감축될 수 있다. 또한, 스캐닝중인 버퍼에 직접 렌더링하는 경우, 단일한 버퍼의 사용이 가능한 바, 버퍼 교체 과정이 생략될 수 있다. 따라서, 버퍼 교체 과정에서 소요되는 시간이 생략될 수 있고, 전체적인 디스플레 이 출력에 소요되는 시간이 더욱 감축될 수 있다. 도 3은 본 개시의 일 실시예에 따른 터치 입력의 디스플레이 출력 지연을 줄이는 방법의 흐름도이다. 단계 S310에서, 외부로부터 터치 이벤트를 입력으로서 수신할 수 있다. 예를 들어, 디바이스는 도 2에서 설명한 바와 같이, 디지타이저 펜, 필기구 등의 물체로부터 터치 이벤트를 수신하거나, 또는 사용자의 신체 일부로부터 의 터치 이벤트를 수신할 수 있다. 단계 S320에서, 입력으로부터 터치 이벤트가 발생한 위치 좌표에 대응되는 입력 좌표 및 터치 이벤트의 터치 정 보에 대응되는 터치 특성값을 획득할 수 있다. 예를 들어, 입력 좌표는 터치 이벤트의 디스플레이(터치 스크린) 상의 접촉 위치로부터 획득될 수 있다. 일 실시예에서, 터치 특성값은, 터치 이벤트의 타임스탬프, 터치 이벤트 의 지속 시간, 터치 이벤트와 타임라인 상 인접한 다른 터치 이벤트와의 시간 간격, 외부 물체와 디스플레이(터 치 스크린) 간의 접촉 각도, 터치 이벤트의 접촉 기울기의 방향, 및 터치 이벤트의 디스플레이(터치 스크린) 접 촉 표면에 적용된 압력 중 적어도 하나를 포함할 수 있다. 단계 S330에서, 입력 좌표 및 터치 특성값으로부터 적어도 하나의 프레임 이후의 터치 이벤트의 예측 좌표를 획 득할 수 있다. 일 실시예에서, 예측 좌표는 1개 내지 3개의 프레임 앞의 터치 이벤트의 예측 좌표일 수 있다. 예를 들어, 예측 좌표는 순환 신경망(RNN) 또는 데이터베이스를 이용한 기계 학습(ML) 기법을 통해 계산될 수 있다. 예를 들어, 예측 좌표는 실제 좌표의 입력에 앞서서 미리 출력 이미지를 생성할 수 있도록 할 수 있다. 일 실시예에서는, 터치 입력의 수신에 앞서서 출력 이미지를 생성할 경우, 데이터의 처리 과정에 소요되는 시간 을 줄일 수 있고, 입력 모듈의 반응 속도 및 입력 데이터의 처리에 소요되는 시간 등으로 인한 출력 지연을 줄 일 수 있다. 단계 S340에서, 입력 좌표 및 예측 좌표로부터 디스플레이에 표시될 이미지의 출력 좌표를 획득할 수 있다. 예 를 들어, 출력 좌표는 출력 모듈을 통해 디스플레이 상에 표시되는 이미지에 대응될 수 있다. 예를 들어, 출력 좌표는 출력 이미지의 캔버스 상 위치 좌표일 수 있다. 출력 좌표는 현재 프레임의 입력 좌표와 적어도 하나의 프레임 앞의 예측 좌표의 조합으로 계산될 수 있다. 일 실시예에서, 출력 좌표는 입력 좌표 및 예측 좌표를 예 측 좌표의 신뢰도에 기반하여 가중치 결합함으로써 획득될 수 있다. 단계 S350에서, 출력 좌표 및 터치 특성값으로부터 출력 이미지를 획득할 수 있다. 예를 들어, 출력 이미지는, 출력 좌표를 기반으로 이미지의 위치를 결정하고, 접촉 각도, 접촉 압력 등의 터치 특성값을 기반으로 이미지의 성질(예를 들어, 선의 굵기, 선의 투명도, 선의 텍스쳐(Texture) 등)을 반영하여 획득될 수 있다. 일 실시예에 서는, 출력 이미지의 획득에, 실제 수신된 터치 입력의 정보 및 적어도 하나의 프레임 앞의 예측된 터치 정보의 조합을 이용함으로써, 전술한 바와 같이 터치 입력의 디스플레이 출력 지연을 줄일 수 있다. 단계 S360에서, 디스플레이가 스캐닝중인 버퍼에 렌더링 레이어(Rendering Layer)를 생성할 수 있다. 예를 들어, 렌더링 레이어는 출력 이미지를 디스플레이가 스캐닝중인 버퍼에 직접 렌더링하기 위한 레이어로 구성될 수 있다. 일 실시예에서는, 렌더링 레이어의 출력 이미지는 도 11에서 후술할 라인레이싱(Line-racing) 기법 또 는 도 12에서 후술할 드로우 패드(Draw Pad) 동기화 기법을 통해 디스플레이로 출력될 수 있다. 단계 S370에서, 출력 이미지를 렌더링 레이어에 렌더링 함으로써 출력 이미지를 디스플레이에 출력할 수 있다. 예를 들어, 렌더링 레이어의 데이터는 버퍼 스캔 라인(Scan Line)에 따라 디스플레이 화면에 업데이트되어 표시 되거나, 캡쳐(Capture) 등의 동기화를 통해 디스플레이 화면에 표시될 수 있다. 일 실시예에서, 터치 입력에 따 른 디스플레이 출력에 있어서, 예측 정보를 반영한 출력 데이터를, 디스플레이상 스캐닝되고 있는 버퍼에 직접 렌더링함으로써, 터치 입력 이벤트와 그에 대응하는 이미지 출력 이벤트 사이의 시간 지연을 크게 줄일 수 있다. 도 4는 본 개시의 일 실시예에 따른 디바이스가 터치 입력으로부터 입력 좌표 및 터치 특성값을 획득하는 동작 (S320)을 설명하기 위한 도면이다. 단계 S410에서, 터치 이벤트의 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득할 수 있다. 예를 들어, 입력 좌표는 터치 이벤트가 발생한 디스플레이 캔버스 상의 위치로 설정될 수 있다. 터치 이벤트의 디스플레이 캔버 스 상의 위치는, 2차원의 캔버스에서 미리 지정된 영점으로부터 상대적인 패널 거리로 표현될 수 있다. 단계 S420에서, 입력 좌표가 변하지 않는 터치 이벤트를 필터링하여 제거할 수 있다. 일 실시예에서, 모든 터치 이벤트들의 입력 좌표를 획득한 후, 터치 이벤트의 터치 정보에 대응되는 터치 특성값을 획득하기 이전에, 처리 하여야 하는 데이터의 양을 줄이기 위해서, 터치 특성값을 획득하는 대상인 터치 이벤트를 필터링할 수 있다. 예를 들어, 그리기 또는 쓰기의 작업에 있어서, 입력 좌표가 변하지 않는 경우에는 그리기 또는 쓰기가 이루어 지지 않는 것으로 판단될 수 있다. 따라서, 타임라인 상 연속된 터치 이벤트들 중, 입력 좌표가 변하지 않는 터 치 이벤트들은 각각의 연속에서 최초의 터치 이벤트와 동일한 이벤트로 볼 수 있다. 일 실시예에서, 입력 좌표 가 변하지 않는 터치 이벤트들은, 연속된 터치 이벤트들 중 최초의 터치 이벤트로 융합(merge)될 수 있다. 단계 S430에서, 필터링된 터치 이벤트의 터치 특성값을 획득할 수 있다. 일 실시예에서, 필터링된 터치 이벤트 는 필터링 되기 이전의 터치 이벤트들에 비해 그 수가 적을 수 있다. 따라서, 모든 터치 이벤트에 대해 터치 특 성값을 획득하는 것이 아니라, 필터링 단계 이후에, 필터링된 터치 이벤트만을 대상으로 터치 특성값을 획득하 는 경우, 프로세서가 처리해야하는 데이터의 양이 줄어들 수 있고, 처리 속도가 빨라질 수 있다. 이러한 경우, 터치 입력으로부터 터치 정보 및 터치 특성값을 획득하는 단계의 소요시간이 줄어들 수 있으며, 나아가 디바이 스가 터치 입력을 디스플레이에 출력하는데 걸리는 총 소요시간도 줄어들 수 있다. 도 5는 본 개시의 일 실시예에 따른 디바이스가 터치 입력으로부터 입력 좌표 및 터치 특성값을 획득하는 동작 (S320)을 설명하기 위한 도면이다. 단계 S510에서, 터치 이벤트의 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득할 수 있다. 터치 이벤트의 디스플레이 상의 접촉 위치로부터 입력 좌표를 획득하는 동작에 대해서는, 전술한 도 4에서 구체적으로 설명하 였으므로, 상세한 설명은 생략하기로 한다. 단계 S520에서, 입력 좌표가 변하지 않는 터치 이벤트를 필터링하여 제거할 수 있다. 입력 좌표가 변하지 않는 터치 이벤트를 필터링하여 제거하는 동작에 대해서는, 전술한 도 4에 서 구체적으로 설명하였으므로, 상세한 설명은 생략하기로 한다. 단계 S530에서, 필터링된 터치 이벤트의 입력 좌표를 정규화할 수 있다. 일 실시예에서, 필터링된 터치 이벤트 는 총 터치 이벤트에서 복수의 터치 이벤트들이 제거된 것으로서, 잔존하는 터치 이벤트들은 타임라인 상 동일 한 시간 간격을 가지지 않는다. 따라서, 일 실시예에서, 필터링된 터치 이벤트의 입력 좌표를 정규화하는 동작 을 더 포함할 수 있다. 일 실시예에서, 필터링된 터치 이벤트의 입력 좌표를 정규화하는 동작은, 대응하는 터치 이벤트의 입력 좌표 및 해당 터치 이벤트로부터, 타임라인 상 하나 이전의 필터링된 터치 이벤트의 입력 좌표 사이의 차이를 계산하고, 계산된 입력 좌표 사이의 차이를 밀리미터 단위로 변환하고, 변환된 입력 좌표 사이의 차이를 평균 터치 이벤트 지속 시간(Ts)으로 나누는 동작을 포함할 수 있다. 여기서, 평균 터치 이벤트 지속 시간(Ts)은, 으로 계산될 수 있으며, Tfr은 프레임 지속 시간, N은 터치 입력 벡터의 차원, n은 프레임당 평 균적인 터치 이벤트의 발생 횟수를 의미할 수 있다. 계산된 입력 좌표 사이의 차이를 밀리미터 단위로 변환함으 로써, 디스플레이 화면의 해상도에 결과값이 의존되는 것을 방지할 수 있다. 단계 S540에서, 필터링된 터치 이벤트의 터치 특성값을 획득할 수 있다. 필터링된 터치 이벤트의 터치 특성값을 획득하는 동작에 대해서는, 전술한 도 4에서 구체적으로 설명하였으므로, 상세한 설명은 생략하기로 한다. 도 6은 본 개시의 일 실시예에 따른 디바이스가 입력 좌표 및 터치 특성값으로부터 예측 좌표를 획득하는 동작 을 설명하기 위한 도면이다. 터치 입력에 따른 디스플레이 출력은 터치 입력의 처리 및 출력 이미지를 디스플레이 상 표시하는 동작에 소요 되는 시간으로 인해, 평균적으로 약 3개의 프레임이 지연되어 표시된다. 따라서, 본 개시의 일 실시예에 따른 디바이스가 터치 입력의 디스플레이 출력 지연을 줄이는 방법은, 입력 좌표 및 터치 특성값으로부터 1개 내지 3 개의 프레임 이후의 터치 이벤트의 예측 좌표를 획득하는 동작을 포함할 수 있다. 예를 들어, 가능한 순서대로 3개의 프레임 앞의 터치 이벤트를 예측하거나, 2개의 프레임 앞의 터치 이벤트를 예측하거나, 1개의 프레임 앞 의 터치 이벤트를 예측할 수 있다. 단계 S610에서, 터치 특성값으로부터 3개의 프레임 앞의 정보의 예측이 가능한지 판단할 수 있다. 단계 S610의 판단 결과에 따라, 3개의 프레임 앞의 정보의 예측이 가능한 경우, 단계 S615에서, 3개의 프레임 앞의 정보로부터 예측 좌표를 획득할 수 있고, 3개의 프레임 앞의 정보의 예측이 불가능한 경우, 단계 S620에서, 2개의 프레임 앞의 정보의 예측이 가능한지 판단할 수 있다. 단계 S620의 판단 결과에 따라, 2개의 프레임 앞의 정보의 예측이 가능한 경우, 단계 S625에서, 2개의 프레임 앞의 정보로부터 예측 좌표를 획득할 수 있고, 2개의 프레임 앞의 정보의 예측이 불가능한 경우, 단계S630에서, 1개의 프레임 앞의 정보의 예측이 가능한지 판단할 수 있다. 단계 S630의 판단 결과에 따라, 1개의 프레임 앞의 정보의 예측이 가능한 경우, 단계 S635에서, 1개의 프레임 앞의 정보로부터 예측 좌표를 획득할 수 있고, 1개의 프레임 앞의 정보의 예측이 불가능한 경우, 단계 S640에서, 실제 입력 좌표로부터 예측 좌표를 획득할 수 있다. 이후 단계에서 입력 좌표 및 예측 좌표로부터 디스플레이에 표시될 이미지의 출력 좌표를 계산하게 된다. 따라 서, 일 실시예에서, 디스플레이에 표시될 이미지의 출력 좌표에 1개 내지 3개의 프레임 앞의 예측된 터치 이벤 트의 정보가 반영될 수 있다. 일 실시예에서, 1개의 프레임 앞의 정보의 예측도 불가능한 경우에는, 입력 좌표 와 예측 좌표가 동일하게 설정될 수 있고, 나아가 입력 좌표와 출력 좌표가 동일하게 설정될 수도 있다. 도 7은 본 개시의 일 실시예에 따른 디바이스가 터치 입력에 따라 디스플레이에 이미지를 출력하는 예시를 나타 내는 도면이다. 도 7의 (a)는 본 개시의 일 실시예에서, 입력 좌표와 예측 좌표가 동일하게 설정된 경우를 나타내며, (b)는 본 개시의 일 실시예에서, 적어도 하나의 프레임 이후의 터치 이벤트를 예측하고 예측 결과를 출력 좌표에 반영한 경우를 나타낸다. 도 7의 (a)를 참조하면, 스타일러스 펜의 펜촉과 디스플레이에 표시되는 출력 이미지(D1)의 라인 헤드(Line Head)(LH1)는 일정 부분 이격되어있다. 일 실시예에서, 입력 좌표와 예측 좌표가 동일하게 설정 된 경우란, 전술한 도 6을 참조하면, 적어도 하나의 프레임 이후의 터치 이벤트의 예측이 불가능한 경우를 의미 한다. 또한, 이는 예측 정보를 반영하지 않거나, 미래의 터치 이벤트를 예측하지 않은 경우와 같다. 일 실시예 에서, 적어도 하나의 프레임 이후의 터치 이벤트를 예측하지 않거나 예측 결과를 반영하지 않은 경우, 스타일러 스 펜을 통한 터치 입력의 디스플레이 출력(D1)에 있어서, 라인 헤드(LH1)와 펜촉 사이의 갭(gap) 만큼의 출력 지연이 발생할 수 있다. 도 7의 (b)를 참조하면, 스타일러스 펜의 펜촉의 위치와 디스플레이에 표시되는 출력 이미지 (D2)의 라인 헤드(LH2)의 위치 사이의 차이가 없거나 매우 작을 수 있다. 일 실시예에서, 디바이스가 스 타일러스 펜으로부터 수신한 터치 입력의 적어도 하나의 프레임 이후의 터치 이벤트를 예측하고, 예측된 정보를 통해 획득한 이미지를 해당 프레임의 실제 터치 입력의 수신에 앞서 출력함으로써, 이미지의 출력이 실 시간 터치 입력보다 지연되지 않을 수 있고, 출력(D2)의 라인 헤드(LH2)와 스타일러스 펜의 펜촉을 통한 입력 위치 사이에 갭이 인식되지 않을 수 있다. 도 8은 본 개시의 일 실시예에 따른 디바이스가 미래의 터치 이벤트를 예측하고, 예측된 터치 이벤트 정보로 출 력 이미지를 생성하는 예시를 나타내는 도면이다. 도 8을 참조하면, n번째 프레임에서, 스타일러스 펜의 펜촉은 입력 좌표(xn) 위치에서 터치 입력을 줄 수 있다. 디바이스가 n번째 프레임의 터치 입력을 수신하고, 터치 입력을 처리하고, 대응하는 출력 이미지를 디스플레이 상 표시하는 동작을 처리하는 동안, 펜촉은 n+1번째 프레임의 터치 입력 위치(xn+1)로 이동할 수 있다. 따라서, 디바이스가 n번째 프레임의 실제 터치 입력 좌표(xn)의 위치 까지만 출력 이미지(Dr)를 생성 한다면, 이미지가 업데이트되는 순간의 라인 헤드의 위치 xn와 펜촉의 위치 xn+1 사이에 wl만큼의 출력 지 연이 발생하게 된다. 본 개시의 일 실시예에서, 디바이스는, n번째 프레임의 입력 좌표(xn) 및 n+1번째 프레임의 예측 좌표를 이용하 여 n번째 프레임의 출력 좌표(yn)를 획득할 수 있다. 일 실시예에서, 디바이스는 n번째 프레임의 실제 터치 입 력 좌표(xn)의 위치까지의 실제 출력 이미지(Dr) 및 n번째 프레임의 출력 좌표(yn)의 위치까지의 예측 출력 이미 지(Dp)를 포함하는 출력 이미지를 생성할 수 있다. 이 경우, 이미지가 업데이트되는 순간의 라인 헤드의 위치 yn와 펜촉의 위치 xn+1 사이의 출력 지연이 wg로서, 예측 좌표를 이용하지 않는 경우의 출력 지연 wl에 비 해 예측 출력 이미지(Dp)의 길이 wp만큼 줄어들 수 있다. 도 9는 본 개시의 일 실시예에 따른 디바이스가 예측한 예측 좌표와 실제 입력 좌표의 차이를 설명하기 위한 도 면이다. 일 실시예에서, n-1번째 프레임에서, n번째 프레임의 터치 이벤트의 발생 위치를 예측하고, 예측된 좌표 pn까지 출력 이미지를 생성할 수 있다. 이 때, n번째 프레임의 터치 이벤트의 예측 좌표(pn) 및 실제 n번째 프레임의 입력 좌표(xn) 사이의 오차각(α)이 발생할 수 있다. 오차각(α)는 n-1번째 프레임의 터치 입력 좌표(xn-1)로부 터 n번째 프레임의 스타일러스 펜의 펜촉의 방향과, n번째 프레임의 예측 좌표(pn) 방향 사이의 각 도이며, 두 방향이 일치하는 경우 α=0일 수 있다. 일 실시예에서, 디스플레이의 하드웨어 기능은 60Hz의 스크린 업데이트 레이트(rate)를 가질 수 있다. 예를 들 어, 60Hz의 스크린 업데이트를 가지는 디스플레이는 단위 프레임 당 16.6ms의 지속 시간을 가질 수 있다. 아래 의 표 1은 n-1번째 프레임 이전의 터치 입력 신호들로부터 1개 내지 3개의 프레임 앞의 정보를 예측한 경우, 실 제 터치 입력과의 오차를 나타낸다. 표 1 예측의 기간 n-1번째 프레임의 실제 입력 좌표(xn-1) 및 n번째 프레임의 실제 입력 좌표(xn) 사이의 직선거리 (b)n번째 프레임의 실제 입력 좌표(xn) 및 n번째 프레임의 예측 좌표(pn) 사이의 직선 거리 (a)오차율 (a/b) 1개의 프레임(16.6 ms)0.6085mm 0.0728mm 11.96% 2개의 프레임(33.3 ms)1.3059mm 0.2433mm 18.63% 3개의 프레임(50m s)1.9412mm 0.4901mm 25.25% 일 실험예에서, 1개의 프레임 앞의 정보를 예측한 경우에는 해당 프레임의 실제 터치 입력에 비해 11.96%의 오 차를 보였으며, 2개의 프레임 앞의 정보를 예측한 경우에는 해당 프레임의 실제 터치 입력에 비해 18.63%의 오 차를, 3개의 프레임 앞의 정보를 예측한 경우에는 해당 프레임의 실제 터치 입력에 비해 25.25%의 오차를 보였 다. 도 10은 본 개시의 일 실시예에 따른 디바이스가 예측한 예측 좌표(pn)와 실제 입력 좌표(xn)의 차이(α)에 대한 실험 결과를 나타내는 도면이다. 도 10은 단위 프레임 당 16.6ms의 지속 시간을 가지는 디스플레이 디바이스에서, 1150만번의 터치 이벤트로부터 예측 좌표를 생성하는 실험을 수행한 경우의 오차각(α)의 분포를 도시한다. 도 10을 참조하면, 실제 입력된 터 치 이벤트 시리즈(Series)로부터 1개의 프레임 이후의 정보를 예측한 경우(a)가 2개의 프레임 이후의 정보를 예 측한 경우(b)나 3개의 프레임 이후의 정보를 예측한 경우(c)보다 높은 정확도를 가지는 것을 알 수 있다. 다만, 1개의 프레임 내지 3개의 프레임 이후의 정보를 예측한 경우 모두 α=0에 근접하는 결과값이 과반수이며, 따라 서, 적어도 하나의 프레임 이후의 터치 이벤트를 예측하는 동작에 상당한 정확도를 가지는 것을 볼 수 있다. 도 11은 본 개시의 일 실시예에 따른 디바이스가 출력 이미지를 표시하는 동작에 있어서 라인레이싱(Line- racing) 기법을 설명하기 위한 도면이다. 디스플레이가 버퍼에 새로운 이미지를 그리는 동작을 렌더링(Rendering)이라고 하며, 버퍼에 저장된 새로운 이 미지를 화면에 표시하는 동작을 스캐닝(Scanning)이라고 한다. 렌더링 및 스캐닝은 픽셀의 왼쪽에서 오른쪽으로, 위에서 아래로 선형 순서로 이루어질 수 있다. 일 실시예에서, 60Hz의 스크린 업데이트 레이트를 가지는 디스플레이의 한 프레임의 스캐닝에 소요되는 시간은 약 15 내지 16ms일 수 있다. 일 실시예에서, 프로세서는 출력 이미지를 디스플레이가 스캐닝 중인 버퍼에 직접 렌더링할 수 있다. 스 캐닝이 이루어지고 있는 버퍼에 직접 렌더링을 할 경우, 각각의 픽셀이 스캔 아웃 라인에 도달하기 전에 렌더링 을 마쳐야 하므로, 렌더링 및 스캐닝 타이밍을 신중하게 제한하여야 한다. 도 11을 참조하면, 프로세서는 패널(EP)에 렌더링 라인(RL)에 따라 출력 이미지를 렌더링 하여 렌더링된 패널 (RP)을 생성할 수 있다. 렌더링 라인(RL)은 스캐닝 라인(SL)보다 앞설 수 있다. 스캐닝 라인(SL)은 렌더링 라인 (RL)이 지나간 후의 렌더링된 패널(RP)을 스캔하여 디스플레이 상 출력할 수 있다. 이와 같이, 라인레이싱 기법 을 적용할 경우, 단일한 버퍼에서, 렌더링의 진행과 동시에 스캐닝을 진행할 수 있으므로, 렌더링이 종료될 때까지 스캐닝을 대기하지 않아도 되고, 버퍼 교체 과정이 생략될 수 있어, 전체적인 디스플레이 출력에 소요되는 시간이 감축될 수 있다. 도 12는 본 개시의 일 실시예에 따른 디바이스가 출력 이미지를 표시하는 동작에 있어서 드로우 패드(Draw-pad) 동기화 기법을 설명하기 위한 도면이다. 드로우 패드 동기화 기법에서는, 스크린 영역(MS) 상에 투명한 드로우 패드(Dp)를 형성하고, 드로우 패드(Dp)에 새로운 이미지(Dn)를 그린 후, 드로우 패드(Dp)와 스크린 영역(MS)을 동기화 함으로써, 새로운 이미지(Dn)를 기 존의 이미지(Do)에 추가로 표시할 수 있다. 이는 기존의 스크린 영역(MS)의 이미지(Do)를 그대로 둔 채, 새로운 이미지(Dn)를 추가로 표시하는 방법으로서, 그림을 그리거나 글씨를 쓰는 작업에 적용될 수 있다. 예를 들어, 드로우 패드(Dp)와 스크린 영역(MS)의 동기화는, 스크린 영역(MS)의 기존 이미지(Do)를 드로우 패드 (Dp)상으로 옮기거나, 스크린 영역(MS)을 캡쳐하여 캡쳐된 이미지를 드로우 패드(Dp)의 배경으로 옮기거나, 드 로우 패드(Dp)의 새로운 이미지(Dn)를 스크린 영역(MS)으로 옮김으로써 이루어질 수 있다. 도 13은 본 개시의 일 실시예에 따른 디바이스에서 메모리의 블록도이다. 도 13을 참조하면, 메모리는 디바이스의 동작을 제어하기 위해 후술할 프로세서에 의해 실행될 프로그램 을 저장할 수 있고, 저장된 프로그램들은 그 기능에 따라 복수 개의 모듈들로 분류할 수 있다. 예를 들어, 메모 리는, 입력 수신 모듈, 입력 특성 획득 모듈, 예측 모듈 및 출력 좌표 획득 모듈 을 포함하는 지연 보상부및 렌더링 모듈을 포함하는 지연 감소부를 포함할 수 있다. 또한, 메모리는 RNN(순환 신경망), 데이터베이스 및 다중 버퍼를 포함할 수 있다. 메 모리에 포함된 각각의 모듈들에 대해서는, 전술한 도 2에서 구체적으로 설명하였으므로, 상세한 설명은 생략하기로 한다. 일 실시예에서, 메모리는 더블 버퍼(Double Buffer) 또는 트리플 버퍼(Triple Buffer)의 다중 버퍼 를 포함할 수 있다. 예를 들어, 더블 버퍼(Double Buffer)를 이용해 렌더링 하는 경우, 하나의 버퍼는 스 캐닝이 이루어지고있는 버퍼(프론트 버퍼)이고, 다른 하나는 다음 프레임의 새로운 이미지가 렌더링 되고있는 버퍼(백 버퍼)일 수 있다. 프론트 버퍼의 스캐닝이 완료되면, 두 개의 버퍼가 서로 바뀌어 다음 프레임의 이미 지를 스크린에 스캐닝하게 된다. 더블 버퍼를 이용하는 경우, 각 프레임이 렌더링 이후 스캐닝 되기 전에 몇 ms 동안 버퍼에 대기할 수 있기 때문에 지연 시간이 증가할 수 있다. 일 실시예에서, 프로세서는 출력 이미지를 디스플레이가 스캐닝 중인 프론트 버퍼에 직접 렌더링할 수 있다. 프론트 버퍼에 직접 렌더링하기 위해, 프론트 버퍼는 렌더링 레이어를 포함할 수 있다. 일 실시예에서, 메모리가 다중 버퍼를 포함하는 경우에도, 프론트 버퍼에만 출력 이미 지의 렌더링이 이루어질 경우, 프론트 버퍼는 도 2의 버퍼와 동일하게 동작할 수 있고, 디바이스는 도 2 에 도시된 디바이스와 유사하게 동작할 수 있다. 도 14는 본 개시의 일 실시예에 따른 디바이스가 더블 버퍼(Double Buffer)를 이용하는 경우, 렌더링 및 버퍼 교체 동작을 설명하기 위한 도면이다. 일 실시예에 따른 디바이스가 더블 버퍼를 이용하는 경우, 터치 이벤트의 스크린 상 입력 좌표에 따라 프론트 버퍼 또는 백 버퍼에 출력 이미지를 렌더링할 수 있다. 일 실시예에서, 렌더링 속도가 스캐닝 속도보다 늦은 경 우가 있을 수 있다. 이 경우, 도 11을 다시 참조하면, 특정 시점에서 스캐닝 라인(SL)이 렌더링 라인(RL)을 추 월하게 된다. 따라서, 스캐닝 라인(SL)이 렌더링 라인(RL)을 추월하기 이전에는 새로운 출력 이미지로 렌더링된 패널(RP)이 디스플레이로 스캐닝 되지만, 스캐닝 라인(SL)이 렌더링 라인(RL)을 추월한 이후에는 렌더링 되기 이전의 패널(EP)이 디스플레이로 스캐닝 되어, 출력 이미지의 테어링(Tearing)이 발생할 수 있다. 이러한 문제점을 해결하기 위해, 터치 이벤트의 스크린 상 입력 좌표에 따라 렌더링이 이루어질 버퍼를 선택할 수 있다. 예를 들어, 입력 좌표가 스크린의 상반부에 위치하는 경우, 스캐닝 라인(SL)이 렌더링 라인(RL)을 추 월하기 이전에 상반부에 위치하는 패널이 렌더링될 수 있고, 하반부의 데이터는 이전 프레임과 대비하여 변화가 없으므로, 렌더링 이전의 패널(EL)이 스캐닝되어도 출력 이미지의 테어링이 발생하지 않을 수 있다. 입력 좌표 가 스크린의 하반부에 위치하는 경우, 새로운 출력 이미지가 렌더링 되기 이전에, 이전 프레임의 정보로 스캐닝 이 이루어질 수 있어, 새로운 터치 이벤트가 디스플레이 출력 상 반영되지 않을 수 있다. 따라서, 입력 좌표가 스크린의 하반부에 위치하는 경우, 출력 이미지를 백 버퍼에 렌더링하고, 프론트 버퍼의 스캐닝 종료 후 프론트 버퍼와 백 버퍼를 교체하여 새로운 이미지를 스캐닝 할 수 있다.도 14를 참조하면, 일 실시예에서, n-3번째 프레임, n-2번째 프레임, 및 n번째 프레임에서는 터치 이벤트가 스 크린의 상반부에 위치하고, n-1번째 프레임에서는 터치 이벤트가 스크린의 하반부에 위치할 수 있다. 이 경우, n-3번째 프레임, n-2번째 프레임에서는 디스플레이 상 스캐닝 되고있는 프론트 버퍼에 렌더링하여 터치 입력에 따른 출력 이미지를 신속하게 표시할 수 있다. 이후, 스크린의 하반부에 터치 이벤트가 존재하는 n-1번째 프레 임에서는, 백 버퍼에 n-1번째 프레임의 정보를 렌더링 할 수 있다. n-1번째 프레임의 정보의 렌더링이 완료되면, 프론트 버퍼와 백 버퍼를 교체하여 n-1번째 프레임의 정보를 출력할 수 있다. 이후 n번째 프레임에서 다시 스크린의 상반부에 터치 이벤트가 존재하면, 교체 후의 프론트 버퍼(교체 전 백 버퍼)에 렌더링하여 터치 입력에 따른 출력 이미지를 디스플레이상 표시할 수 있다. 본 개시의 일 실시예는 컴퓨터에 의해 실행되는 프로그램 모듈과 같은 컴퓨터에 의해 실행 가능한 명령어를 포 함하는 기록 매체의 형태로도 구현될 수 있다. 컴퓨터 판독 가능 매체는 컴퓨터에 의해 액세스될 수 있는 임의 의 가용 매체일 수 있고, 휘발성 및 비휘발성 매체, 분리형 및 비분리형 매체를 모두 포함한다. 또한, 컴퓨터 판독가능 매체는 컴퓨터 저장 매체 및 통신 매체를 포함할 수 있다. 컴퓨터 저장 매체는 컴퓨터 판독가능 명령 어, 데이터 구조, 프로그램 모듈 또는 기타 데이터와 같은 정보의 저장을 위한 임의의 방법 또는 기술로 구현된 휘발성 및 비휘발성, 분리형 및 비분리형 매체를 모두 포함한다. 통신 매체는 전형적으로 컴퓨터 판독가능 명령 어, 데이터 구조, 또는 프로그램 모듈과 같은 변조된 데이터 신호의 기타 데이터를 포함할 수 있다. 또한, 컴퓨터에 의해 읽을 수 있는 저장매체는, 비일시적(non-transitory) 저장매체의 형태로 제공될 수 있다. 여기서, ‘비일시적 저장매체'는 실재(tangible)하는 장치이고, 신호(signal)(예: 전자기파)를 포함하지 않는다 는 것을 의미할 뿐이며, 이 용어는 데이터가 저장매체에 반영구적으로 저장되는 경우와 임시적으로 저장되는 경 우를 구분하지 않는다. 예로, '비일시적 저장매체'는 데이터가 임시적으로 저장되는 버퍼를 포함할 수 있다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory (CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두개의 사용자 장치들(예: 스 마트폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품(예: 다운로더블 앱(downloadable app))의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 또한, 본 명세서에서, “부”는 프로세서 또는 회로와 같은 하드웨어 구성(hardware component), 및/또는 프로 세서와 같은 하드웨어 구성에 의해 실행되는 소프트웨어 구성(software component)일 수 있다. 본 개시에 따른 인공지능과 관련된 기능은 프로세서와 메모리를 통해 동작된다. 프로세서는 하나 또는 복수의 프로세서로 구성될 수 있다. 이때, 하나 또는 복수의 프로세서는 CPU, AP, DSP(Digital Signal Processor) 등 과 같은 범용 프로세서, GPU, VPU(Vision Processing Unit)와 같은 그래픽 전용 프로세서 또는 NPU와 같은 인 공지능 전용 프로세서일 수 있다. 하나 또는 복수의 프로세서는, 메모리에 저장된 기 정의된 동작 규칙 또는 인 공지능 모델에 따라, 입력 데이터를 처리하도록 제어한다. 또는, 하나 또는 복수의 프로세서가 인공지능 전용 프로세서인 경우, 인공지능 전용 프로세서는, 특정 인공지능 모델의 처리에 특화된 하드웨어 구조로 설계될 수 있다. 기 정의된 동작 규칙 또는 인공지능 모델은 학습을 통해 만들어진 것을 특징으로 한다. 여기서, 학습을 통해 만 들어진다는 것은, 기본 인공지능 모델이 학습 알고리즘에 의하여 다수의 학습 데이터들을 이용하여 학습됨으로 써, 원하는 특성(또는, 목적)을 수행하도록 설정된 기 정의된 동작 규칙 또는 인공지능 모델이 만들어짐을 의미 한다. 이러한 학습은 본 개시에 따른 인공지능이 수행되는 기기 자체에서 이루어질 수도 있고, 별도의 서버 및/ 또는 시스템을 통해 이루어 질 수도 있다. 학습 알고리즘의 예로는, 지도형 학습(supervised learning), 비지도 형 학습(unsupervised learning), 준지도형 학습(semi-supervised learning) 또는 강화 학습(reinforcement learning)이 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은, 복수의 신경망 레이어들로 구성될 수 있다. 복수의 신경망 레이어들 각각은 복수의 가중치들 (weight values)을 갖고 있으며, 이전(previous) 레이어의 연산 결과와 복수의 가중치들 간의 연산을 통해 신경 망 연산을 수행한다. 복수의 신경망 레이어들이 갖고 있는 복수의 가중치들은 인공지능 모델의 학습 결과에 의 해 최적화될 수 있다. 예를 들어, 학습 과정 동안 인공지능 모델에서 획득한 로스(loss) 값 또는 코스트(cost) 값이 감소 또는 최소화되도록 복수의 가중치들이 갱신될 수 있다. 인공 신경망은 심층 신경망(DNN:Deep NeuralNetwork)를 포함할 수 있으며, 예를 들어, CNN(Convolutional Neural Network), DNN(Deep Neural Network), RNN(Recurrent Neural Network), RBM(Restricted Boltzmann Machine), DBN(Deep Belief Network), BRDNN(Bidirectional Recurrent Deep Neural Network) 또는 심층 Q-네트워크(Deep Q-Networks) 등이 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 학습을 통해 만들어 질 수 있다. 여기서, 학습을 통해 만들어진다는 것은, 기본 인공지능 모델 이 학습 알고리즘에 의하여 다수의 학습 데이터들을 이용하여 학습됨으로써, 원하는 특성(또는, 목적)을 수행하 도록 설정된 기 정의된 동작 규칙 또는 인공지능 모델이 만들어짐을 의미한다. 인공지능 모델은, 복수의 신경망 레이어들로 구성될 수 있다. 복수의 신경망 레이어들 각각은 복수의 가중치들(weight values)을 갖고 있으며, 이전(previous) 레이어의 연산 결과와 복수의 가중치들 간의 연산을 통해 신경망 연산을 수행한다."}
{"patent_id": "10-2020-0082301", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "전술한 본 개시의 설명은 예시를 위한 것이며, 본 개시가 속하는 기술분야의 통상의 지식을 가진 자는 본 개시 의 기술적 사상이나 필수적인 특징을 변경하지 않고서 다른 구체적인 형태로 쉽게 변형이 가능하다는 것을 이해 할 수 있을 것이다. 그러므로 이상에서 기술한 실시예들은 모든 면에서 예시적인 것이며 한정적이 아닌 것으로 이해해야만 한다. 예를 들어, 단일형으로 설명되어 있는 각 구성 요소는 분산되어 실시될 수도 있으며, 마찬가 지로 분산된 것으로 설명되어 있는 구성 요소들도 결합된 형태로 실시될 수 있다. 본 개시의 범위는 상기 상세한 설명보다는 후술하는 특허청구범위에 의하여 나타내어지며, 특허청구범위의 의미 및 범위 그리고 그 균등 개념으로부터 도출되는 모든 변경 또는 변형된 형태가 본 개시의 범위에 포함되는 것으 로 해석되어야 한다."}
{"patent_id": "10-2020-0082301", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시예에 따른 디바이스가 터치 입력의 디스플레이 출력 지연을 줄이는 방법의 개요도이다. 도 2는 본 개시의 일 실시예에 따른 디바이스의 블록도이다. 도 3은 본 개시의 일 실시예에 따른 터치 입력의 디스플레이 출력 지연을 줄이는 방법의 흐름도이다. 도 4는 본 개시의 일 실시예에 따른 디바이스가 터치 입력으로부터 입력 좌표 및 터치 특성값을 획득하는 동작을 설명하기 위한 도면이다. 도 5는 본 개시의 일 실시예에 따른 디바이스가 터치 입력으로부터 입력 좌표 및 터치 특성값을 획득하는 동작 을 설명하기 위한 도면이다. 도 6은 본 개시의 일 실시예에 따른 디바이스가 입력 좌표 및 터치 특성값으로부터 예측 좌표를 획득하는 동작 을 설명하기 위한 도면이다. 도 7은 본 개시의 일 실시예에 따른 디바이스가 터치 입력에 따라 디스플레이에 이미지를 출력하는 예시를 나타 내는 도면이다. 도 8은 본 개시의 일 실시예에 따른 디바이스가 미래의 터치 이벤트를 예측하고, 예측된 터치 이벤트 정보로 출 력 이미지를 생성하는 예시를 나타내는 도면이다. 도 9는 본 개시의 일 실시예에 따른 디바이스가 예측한 예측 좌표와 실제 입력 좌표의 차이를 설명하기 위한 도 면이다. 도 10은 본 개시의 일 실시예에 따른 디바이스가 예측한 예측 좌표와 실제 입력 좌표의 차이에 대한 실험 결과 를 나타내는 도면이다. 도 11은 본 개시의 일 실시예에 따른 디바이스가 출력 이미지를 표시하는 동작에 있어서 라인레이싱(Line- racing) 기법을 설명하기 위한 도면이다. 도 12는 본 개시의 일 실시예에 따른 디바이스가 출력 이미지를 표시하는 동작에 있어서 드로우 패드(Draw-pad) 동기화 기법을 설명하기 위한 도면이다. 도 13은 본 개시의 일 실시예에 따른 디바이스에서 메모리의 블록도이다. 도 14는 본 개시의 일 실시예에 따른 디바이스가 더블 버퍼(Double Buffer)를 이용하는 경우, 렌더링 및 버퍼 교체 동작을 설명하기 위한 도면이다."}
