{"patent_id": "10-2021-0159283", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0070984", "출원번호": "10-2021-0159283", "발명의 명칭": "어플리케이션의 실행 성능을 개선하는 전자 장치 및 그 동작 방법", "출원인": "삼성전자주식회사", "발명자": "김중섭"}}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서, 통신 모듈;디스플레이;메모리; 및상기 통신 모듈, 상기 디스플레이, 및 상기 메모리와 작동적으로 연결되는 적어도 하나의 프로세서를 포함하고,상기 적어도 하나의 프로세서는,어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상기 어플리케이션을 실행하고,상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 수집하고,상기 성능 데이터를 상기 통신 모듈을 통해 서버로 보고하고,상기 성능 데이터 중 상기 어플리케이션의 인플레이 구간에 대응하는 인플레이 데이터를 기반으로 생성된 제2성능 파라미터를 상기 통신 모듈을 통해 상기 서버로부터 수신하고, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하도록 구성되는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서, 상기 성능 데이터는,상기 어플리케이션의 실행 화면이 상기 디스플레이에 표시되는 동안의 FPS(frame per second), 표면 온도, 프로세서 부하, 네트워크 입출력, 상기 디스플레이의 해상도, 상기 디스플레이의 주사율 또는 재생율, 상기 디스플레이의 화면 밝기, 또는 상기 전자 장치가 접속중인 네트워크의 종류 중 적어도 하나를 포함하는 것을 특징으로하는 전자 장치."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서, 상기 제2 성능 파라미터는,상기 어플리케이션이 실행된 이후 미리 정해지는 길이의 시간 구간과, 상기 어플리케이션이 종료되기 이전 미리정해지는 길이의 시간 구간을 제외한 나머지 시간 구간에서 수집된 상기 성능 데이터의 제1 요소를 기반으로 생성되거나,상기 성능 데이터의 제2 요소의 현재값과 상기 어플리케이션에 관련된 세션 도중 상기 제2 요소의 최소값 간의차이에 따라 상기 인플레이 구간에 대응하는 것으로 식별된 상기 현재값을 기반으로 생성되거나, 상기 어플리케이션과 관련된 세션 도중 상기 성능 데이터의 제3 요소의 변화에 따라 상기 인플레이 구간에 대응되는 것으로 식별된 상기 성능 데이터의 제4 요소를 기반으로 생성되거나, 또는상기 성능 데이터 중 상기 인플레이 구간의 판단과 관련된 중요도가 상대적으로 높은 적어도 하나의 제5 요소를기반으로 생성되는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "서버에 있어서, 통신 모듈;메모리; 및공개특허 10-2023-0070984-3-상기 통신 모듈 및 상기 메모리와 작동적으로 연결되는 적어도 하나의 프로세서를 포함하고, 상기 적어도 하나의 프로세서는,상기 통신 모듈을 통해 전자 장치로부터 어플리케이션의 메타데이터 요청을 수신하고,상기 어플리케이션을 위한 제1 성능 파라미터를 포함하는 메타데이터를 상기 통신 모듈을 통해 상기 전자 장치로 전송하고,상기 전자 장치에서 상기 어플리케이션이 실행되는 동안 상기 통신 모듈을 통해 상기 어플리케이션의 실행과 연관된 성능 데이터를 수신하고,상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간을 식별하고,상기 식별된 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터를 산출하고,상기 제2 성능 파라미터를 상기 통신 모듈을 통해 상기 전자 장치로 전송하도록 구성되는 것을 특징으로 하는서버."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 4 항에 있어서, 상기 성능 데이터는,상기 어플리케이션과 관련된 FPS(frame per second), 표면 온도, 프로세서 부하, 네트워크 입출력, 디스플레이해상도, 디스플레이 주사율 또는 재생율, 디스플레이 화면 밝기, 또는 상기 전자 장치가 접속중인 네트워크의종류 중 적어도 하나를 포함하는 것을 특징으로 하는 서버."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 4 항에 있어서, 상기 적어도 하나의 프로세서는,상기 어플리케이션이 실행된 이후 미리 정해지는 길이의 시간 구간과, 상기 어플리케이션이 종료되기 이전 미리정해지는 길이의 시간 구간을 낫-인플레이 구간으로 판단하고,상기 낫-인플레이 구간을 제외한 나머지 시간 구간을 상기 인플레이 구간으로 판단하며,상기 인플레이 구간에서 수집된 상기 성능 데이터의 제1 요소를 기반으로 상기 제2 성능 파라미터를 생성하도록구성되는 것을 특징으로 하는 서버."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 4 항에 있어서, 상기 적어도 하나의 프로세서는,상기 성능 데이터의 제2 요소의 현재값과 상기 어플리케이션에 관련된 세션 도중 상기 제2 요소의 최소값 간의차이에 따라 상기 현재값이 상기 인플레이 구간에 속하는지를 판단하고,상기 현재값이 상기 인플레이 구간에 대응하는 것으로 식별된 경우 상기 현재값을 기반으로 상기 제2 성능 파라미터를 생성하도록 구성되는 것을 특징으로 하는 서버."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 4 항에 있어서, 상기 적어도 하나의 프로세서는,상기 어플리케이션과 관련된 세션 도중 상기 성능 데이터의 제3 요소의 변화가 감지되는 시점에서 상기 인플레이 구간의 시작 또는 종료를 판정하고, 상기 판정 결과에 따라 상기 인플레이 구간을 식별하고,상기 식별된 인플레이 구간에 대응되는 상기 성능 데이터의 제4 요소를 기반으로 상기 제2 성능 파라미터를 생성하도록 구성되는 것을 특징으로 하는 서버."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "공개특허 10-2023-0070984-4-제 4 항에 있어서, 상기 적어도 하나의 프로세서는,상기 성능 데이터 중 상기 어플리케이션의 세션 동안 제1 시점에서 상기 전자 장치에서 네트워크를 통해 전송된업로드 데이터 양이 제1 임계값을 초과하는 경우 상기 업로드 데이터 양을 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하거나,상기 세션 동안 상기 전자 장치의 최대 배터리 퍼센트와 제2 시점의 현재 배터리 퍼센트 간의 차이가 제2 임계값을 초과하는 경우 상기 현재 배터리 퍼센트를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하거나,상기 세션 동안 상기 전자 장치의 최소 표면 온도와 제3 시점의 현재 표면 온도 간의 차이가 제3 임계값을 초과하는 경우 상기 현재 표면 온도를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하거나, 또는상기 세션 동안 제4 시점의 FPS(frame per second)가 제4 임계값보다 작은 경우 상기 FPS를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하도록 구성되는 것을 특징으로 하는 서버."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "전자 장치에 있어서, 통신 모듈;디스플레이;메모리; 및상기 통신 모듈, 상기 디스플레이, 및 상기 메모리와 작동적으로 연결되는 적어도 하나의 프로세서를 포함하고,상기 적어도 하나의 프로세서는,어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상기 어플리케이션을 실행하고,상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 수집하고,상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 결정하고,상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터를 획득하고,상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하도록 구성되는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "전자 장치의 동작 방법에 있어서, 어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작과,상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 수집하는 동작과,상기 성능 데이터를 서버로 보고하는 동작과,상기 성능 데이터 중 상기 어플리케이션의 인플레이 구간에 대응하는 인플레이 데이터를 기반으로 생성된 제2성능 파라미터를 상기 서버로부터 수신하는 동작과, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작을 포함하는 것을 특징으로 하는 방법."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서, 상기 성능 데이터는,상기 어플리케이션의 실행 화면이 디스플레이에 노출되는 동안의 FPS(frame per second), 표면 온도, 프로세서부하, 네트워크 입출력, 상기 디스플레이의 해상도, 상기 디스플레이의 주사율 또는 재생율, 상기 디스플레이의화면 밝기, 또는 상기 전자 장치가 접속중인 네트워크의 종류 중 적어도 하나를 포함하는 것을 특징으로 하는방법.공개특허 10-2023-0070984-5-청구항 13 제 11 항에 있어서, 상기 제2 성능 파라미터는,상기 어플리케이션이 실행된 이후 미리 정해지는 길이의 시간 구간과, 상기 어플리케이션이 종료되기 이전 미리정해지는 길이의 시간 구간을 제외한 나머지 시간 구간에서 수집된 상기 성능 데이터의 제1 요소를 기반으로 생성되거나,상기 성능 데이터의 제2 요소의 현재값과 상기 어플리케이션에 관련된 세션 도중 상기 제2 요소의 최소값 간의차이에 따라 상기 인플레이 구간에 대응하는 것으로 식별된 상기 현재값을 기반으로 생성되거나, 상기 어플리케이션과 관련된 세션 도중 상기 성능 데이터의 제3 요소의 변화에 따라 상기 인플레이 구간에 대응되는 것으로 식별된 상기 성능 데이터의 제4 요소를 기반으로 생성되거나, 또는상기 성능 데이터 중 상기 인플레이 구간의 판단과 관련된 중요도가 상대적으로 높은 적어도 하나의 제5 요소를기반으로 생성되는 것을 특징으로 하는 방법."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "서버의 동작 방법에 있어서, 전자 장치로부터 어플리케이션의 메타데이터 요청을 수신하는 동작과,상기 어플리케이션을 위한 제1 성능 파라미터를 포함하는 메타데이터를 상기 전자 장치로 전송하는 동작과,상기 전자 장치에서 상기 어플리케이션이 실행되는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 상기 전자 장치로부터 수신하는 동작과,상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간을 식별하는 동작과,상기 식별된 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터를 산출하는 동작과,상기 제2 성능 파라미터를 상기 전자 장치로 전송하는 동작을 포함하는 것을 특징으로 하는 방법."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 14 항에 있어서, 상기 성능 데이터는,상기 어플리케이션의 실행 화면이 디스플레이에 노출되는 동안의 FPS(frame per second), 표면 온도, 프로세서부하, 네트워크 입출력, 상기 디스플레이의 해상도, 상기 디스플레이의 주사율 또는 재생율, 상기 디스플레이의화면 밝기, 또는 상기 전자 장치가 접속중인 네트워크의 종류 중 적어도 하나를 포함하는 것을 특징으로 하는방법."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 14 항에 있어서, 상기 제2 성능 파라미터를 산출하는 동작은,상기 어플리케이션이 실행된 이후 미리 정해지는 길이의 시간 구간과, 상기 어플리케이션이 종료되기 이전 미리정해지는 길이의 시간 구간을 낫-인플레이 구간으로 판단하는 동작과,상기 낫-인플레이 구간을 제외한 나머지 시간 구간을 상기 인플레이 구간으로 판단하는 동작과,상기 인플레이 구간에서 수집된 상기 성능 데이터의 제1 요소를 기반으로 상기 제2 성능 파라미터를 생성하는동작을 포함하는 것을 특징으로 하는 방법."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 14 항에 있어서, 상기 제2 성능 파라미터를 산출하는 동작은,상기 성능 데이터의 제2 요소의 현재값과 상기 어플리케이션에 관련된 세션 도중 상기 제2 요소의 최소값 간의차이에 따라 상기 현재값이 상기 인플레이 구간에 속하는지를 판단하는 동작과,공개특허 10-2023-0070984-6-상기 현재값이 상기 인플레이 구간에 대응하는 것으로 식별된 경우 상기 현재값을 기반으로 상기 제2 성능 파라미터를 생성하는 동작을 포함하는 것을 특징으로 하는 방법."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 14 항에 있어서, 상기 제2 성능 파라미터를 산출하는 동작은,상기 어플리케이션과 관련된 세션 도중 상기 성능 데이터의 제3 요소의 변화가 감지되는 시점에서 상기 인플레이 구간의 시작 또는 종료를 판정하는 동작과, 상기 판정 결과에 따라 식별된 상기 인플레이 구간에 대응되는 상기 성능 데이터의 제4 요소를 기반으로 상기제2 성능 파라미터를 생성하는 동작을 포함하는 것을 특징으로 하는 방법."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 14 항에 있어서, 상기 제2 성능 파라미터를 산출하는 동작은,상기 성능 데이터 중 상기 어플리케이션의 세션 동안 제1 시점에서 상기 전자 장치에서 네트워크를 통해 전송된업로드 데이터 양이 제1 임계값을 초과하는 경우 상기 업로드 데이터 양을 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하는 동작,상기 세션 동안 상기 전자 장치의 최대 배터리 퍼센트와 제2 시점의 현재 배터리 퍼센트 간의 차이가 제2 임계값을 초과하는 경우 상기 현재 배터리 퍼센트를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하는 동작,상기 세션 동안 상기 전자 장치의 최소 표면 온도와 제3 시점의 현재 표면 온도 간의 차이가 제3 임계값을 초과하는 경우 상기 현재 표면 온도를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하는 동작, 또는상기 세션 동안 제4 시점의 FPS(frame per second)가 제4 임계값보다 작은 경우 상기 FPS를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하는 동작 중 적어도 하나를 포함하는 것을 특징으로 하는 방법."}
{"patent_id": "10-2021-0159283", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "전자 장치의 동작 방법에 있어서, 어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작과,상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 수집하는 동작과,상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 결정하는 동작과,상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터를 획득하는 동작과,상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작을 포함하는 것을 특징으로 하는 방법."}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예에 따른 서버는, 통신 모듈, 메모리, 및 상기 통신 모듈 및 상기 메모리와 작동적으로 연결되는 적 어도 하나의 프로세서를 포함할 수 있다. 상기 적어도 하나의 프로세서는, 상기 통신 모듈을 통해 전자 장치로부 터 어플리케이션의 메타데이터 요청을 수신하고, 상기 어플리케이션을 위한 제1 성능 파라미터를 포함하는 메타 (뒷면에 계속)"}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 다양한 실시예들은 전자 장치에서 어플리케이션의 실행 성능을 개선하는 방법에 관한 것이다."}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "전자, 정보, 통신 기술이 발달하면서, 하나의 휴대용 통신 장치 또는 전자 장치에 다양한 기능이 통합되고 있다. 예를 들어, 스마트 폰은 통신 기능과 아울러, 음향 재생 기기, 촬상 기기 또는 전자 수첩의 기능을 포함 하고 있으며, 다양한 어플리케이션들의 설치 및 실행을 통해 더욱 다양한 기능이 스마트 폰에서 구현될 수 있다. 또한 전자 장치는 다양한 성능(또는 사양)으로 구현되고 있으며, 전자 장치에서 실행되는 어플리케이션"}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "(예: 게임 어플리케이션)이 요구하는 성능 수준도 높아지고 있다.발명의 내용"}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "어플리케이션이 원활히 실행되기 위해 요구되는 성능은 높은 반면 어플리케이션이 실행될 전자 장치의 성능이 낮은 경우 어플리케이션 실행 시 성능 개선이 필요할 수 있다. 예를 들면, 동일한 게임 어플리케이션에 대해 고 성능 전자 장치에서는 게임 어플리케이션이 원활하게 실행(또는 구동)되는 반면, 상대적으로 저성능 전자 장치 에서는 게임 어플리케이션의 실행 중 반응 속도가 저하되거나 화면 프레임이 끊기거나, 데이터 처리량 부하로 인해 예를 들어 발열과 같은 문제가 발생할 수 있다. 어플리케이션이 전자 장치에서 원활히 실행될 수 있도록 하기 위해서는 어플리케이션을 위한 전자 장치 상에서의 최적 성능 파라미터들을 찾는 것이 중요할 수 있다. 본 개시의 다양한 실시예에 따르면, 전자 장치에서 어플리케이션의 원활한 실행을 위한 성능 파라미터를 획득하 고, 상기 성능 파라미터에 기반하여 어플리케이션을 실행할 수 있는 전자 장치 및 전자 장치에서 어플리케이션 의 실행 성능을 개선하는 방법을 제공하고자 한다. 본 개시의 다양한 실시예에 따르면, 전자 장치에서 게임 어플리케이션 실행 시 게임이 실제로 플레이되는 인플 레이 구간을 식별하고 인플레이 구간에서 성능 파라미터의 최적화에 필요한 성능 데이터를 수집함으로써 보다 정확한 성능 개선을 수행할 수 있고, 보다 정확하게 최적화된 성능 파라미터에 기반하여 어플리케이션을 실행할 수 있는 전자 장치 및 전자 장치에서 어플리케이션의 실행 성능을 개선하는 방법을 제공하고자 한다."}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 전자 장치는 통신 모듈, 디스플레이, 메모리, 및 상기 통신 모듈, 상기 디스플레이, 및 상기 메모리와 작동적으로 연결되는 적어도 하나의 프로세서를 포함할 수 있고, 상기 적어도 하나의 프로세서는, 어 플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상기 어플리케이션을 실행하고, 상기 어플리 케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 수집하고, 상기 성능 데이터를 상기 통신 모듈을 통해 서버로 보고하고, 상기 성능 데이터 중 상기 어플리케이션의 인플레이 구간에 대응하는 인플 레이 데이터를 기반으로 생성된 제2 성능 파라미터를 상기 통신 모듈을 통해 상기 서버로부터 수신하고, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하도록 구성될 수 있다. 일 실시예에 따른 서버는, 통신 모듈, 메모리, 및 상기 통신 모듈 및 상기 메모리와 작동적으로 연결되는 적어 도 하나의 프로세서를 포함할 수 있고, 상기 적어도 하나의 프로세서는, 상기 통신 모듈을 통해 전자 장치로부 터 어플리케이션의 메타데이터 요청을 수신하고, 상기 어플리케이션을 위한 제1 성능 파라미터를 포함하는 메타 데이터를 상기 통신 모듈을 통해 상기 전자 장치로 전송하고, 상기 전자 장치에서 상기 어플리케이션이 실행되 는 동안 상기 통신 모듈을 통해 상기 어플리케이션의 실행과 연관된 성능 데이터를 수신하고, 상기 성능 데이터 로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간을 식별 하고, 상기 식별된 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리 케이션의 성능을 개선하기 위한 제2 성능 파라미터를 산출하고, 상기 제2 성능 파라미터를 상기 통신 모듈을 통 해 상기 전자 장치로 전송하도록 구성될 수 있다. 일 실시예에 따른 전자 장치는, 통신 모듈, 디스플레이, 메모리, 및 상기 통신 모듈, 상기 디스플레이, 및 상기 메모리와 작동적으로 연결되는 적어도 하나의 프로세서를 포함할 수 있고, 상기 적어도 하나의 프로세서는, 어 플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상기 어플리케이션을 실행하고, 상기 어플리 케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 수집하고, 상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간에 대응하는 상 기 성능 데이터 및/또는 상기 특징값들을 결정하고, 상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터를 획득하고, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하도록 구성될 수 있다. 일 실시예에 따른 전자 장치의 동작 방법은, 어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하 여 상기 어플리케이션을 실행하는 동작과, 상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연 관된 성능 데이터를 수집하는 동작과, 상기 성능 데이터를 서버로 보고하는 동작과, 상기 성능 데이터 중 상기 어플리케이션의 인플레이 구간에 대응하는 인플레이 데이터를 기반으로 생성된 제2 성능 파라미터를 상기 서버 로부터 수신하는 동작과, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작을 포함할 수 있다.일 실시예에 따른 서버의 동작 방법은, 전자 장치로부터 어플리케이션의 메타데이터 요청을 수신하는 동작과, 상기 어플리케이션을 위한 제1 성능 파라미터를 포함하는 메타데이터를 상기 전자 장치로 전송하는 동작과, 상 기 전자 장치에서 상기 어플리케이션이 실행되는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 상기 전자 장치로부터 수신하는 동작과, 상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련 되는 특징값들을 기반으로 상기 인플레이 구간을 식별하는 동작과, 상기 식별된 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터 를 산출하는 동작과, 상기 제2 성능 파라미터를 상기 전자 장치로 전송하는 동작을 포함할 수 있다. 일 실시예에 따른 전자 장치의 동작 방법은, 어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하 여 상기 어플리케이션을 실행하는 동작과, 상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연 관된 성능 데이터를 수집하는 동작과, 상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관 련되는 특징값들을 기반으로 상기 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 결정하 는 동작과, 상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제 2 성능 파라미터를 획득하는 동작과, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 다양한 실시예에 따른 전자 장치는 어플리케이션의 원활한 실행을 위한 성능 파라미터를 획득하고, 성능 파라미터에 기반하여 어플리케이션을 실행함으로써 어플리케이션의 체감 실행 성능을 향상시킬 수 있다. 본 개시의 다양한 실시예에 따르면, 전자 장치에서 어플리케이션 실행 시 실제로 게임이 플레이되는 인플레이 구간에서 실행 성능의 개선에 필요한 데이터를 수집함으로써 보다 정확한 성능 파라미터를 획득할 수 있고, 보 다 정확한 성능 파라미터에 기반하여 어플리케이션을 실행하도록 함으로써, 부정확한 성능 파라미터로 인한 성 능 저하 또는 발열 발생을 줄일 수 있다. 본 개시에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 않으며, 언급하지 않은 또 다른 효과들은 아래의 기재로부터 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면들을 참조하여 다양한 실시예에 따른 전자 장치에 대해서 살펴본다. 다양한 실시예에서 이용 되는 사용자라는 용어는 전자 장치를 사용하는 사람 또는 전자 장치를 사용하는 장치(예를 들어, 인공지능 전자 장치)를 지칭할 수 있다. 본 문서에서 사용된 용어들은 단지 특정한 실시예를 설명하기 위해 사용된 것으로, 다른 실시예의 범위를 한정 하려는 의도가 아닐 수 있다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함할 수 있다. 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 본 발명의 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가질 수 있다. 일반적으로 사용되는 사전에 정 의된 용어들은 관련 기술의 문맥상 가지는 의미와 동일 또는 유사한 의미를 가지는 것으로 해석될 수 있으며, 본 문서에서 명백하게 정의되지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 경우에 따 라서, 본 문서에서 정의된 용어일지라도 본 발명의 실시예들을 배제하도록 해석될 수 없다. 도 1은 일 실시예에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장치와 통신하거나, 또는 제2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일 실시예에 따르면, 전자 장치(10 1)는 서버를 통하여 전자 장치와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 프로세서 , 메모리, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서 는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈 , 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일 실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세 서는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치또는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또 는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로 세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능 에 특화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일 실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일 실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일 실시 예에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일 실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일 실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일 실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일 실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일 실시예에 따르면, 카메라 모듈은 하나 이 상의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일 실시예에 따르면, 전력 관리 모 듈은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일 실시예에 따르면, 배터 리는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일 실시예에 따르면, 통 신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일 실시예에 따르면, 무선 통신 모듈은 1eMBB 실현을 위한 Peak data rate(예: 20Gbps 이상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운 링크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일 실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일 실시예에 따르면, 안테나 모듈은 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통 신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통 신 모듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품(예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일 실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일 실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일 실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버 는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일 실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 일 실시예에 따른 전자 장치와 서버의 구성을 설명하기 위한 블록도이다. 도 2를 참조하면, 전자 장치(예: 도 1의 전자 장치)는 적어도 하나의 프로세서(이하, 프로세서라고도 함), 메모리, 디스플레이, 오디오 모듈, 및/또는 통신 모듈을 포함하여 구성될 수 있 다. 전자 장치는 이에 한정되지 않고 다양한 구성 요소들을 더 포함하여 구성되거나 또는 상기 구성들 중 일부를 제외하여 구성될 수 있다. 일 실시예에 따른 전자 장치는 도 1에 도시된 전자 장치의 전체 또 는 일부를 포함할 수 있다. 프로세서는 통신 모듈을 이용하여 서버(예: 도 1의 서버)로부터 어플리케이션의 실행 패키 지를 다운로드 받아 상기 어플리케이션을 설치 및 실행하거나 기 다운로드되거나 전자 장치에 기 저장된 어플리케이션을 실행할 수 있다. 프로세서는 어플리케이션에 대한 실행 요청(예: 사용자 입력 또는 지정된 조건에 따른 자동 실행 요청)에 기반하여 서버에게, 상기 어플리케이션이 지정된 종류인지 여부를 문의할 수 있다. 예를 들면, 상기 지정 된 종류는 성능 파라미터들의 최적화가 요구되는 어플리케이션일 수 있다. 예를 들면 상기 지정된 종류는 게임 어플리케이션 또는 고성능이 요구되는 어플리케이션일 수 있다. 프로세서는 서버로부터 제공된 메타 데이터를 기반으로 상기 실행 요청된 어플리케이션이 상기 지정된 종류(예: 게임 어플리케이션, 또는 성능 최적 화가 필요한 어플리케이션, 또는 고성능이 요구되는 어플리케이션)임을 확인할 수 있고, 상기 어플리케이션의 실행과 연관된 로우 데이터(raw data)를 획득할 수 있다. 일 실시예에서 프로세서는 어플리케이션의 실행 과 연관된 로우 데이터를 기반으로 성능 데이터(performance data)를 획득할 수 있다.일 실시예에서, 상기 성능 데이터는 어플리케이션의 실행과 연관된 복수의 요소들을 포함할 수 있다. 상기 복수 의 요소들은 어플리케이션의 실행 데이터(예를 들어 실행 화면)가 디스플레이에 노출되는 동안(예: 포그라 운드(foreground) 동안)의 상기 어플리케이션의 FPS(frame per second), 전자 장치의 온도(예: CPU(central processing unit) 온도, GPU(graphic processing unit) 온도 및/또는 표면 온도), 프로세서 (예: CPU 또는 GPU)의 부하, 네트워크 입출력(input/output: I/O), 디스플레이의 해상도, 디스플레이 의 주사율(scan rate) 또는 재생율(refresh rate), 디스플레이의 화면 밝기, 및/또는 전자 장치 가 접속중인 네트워크(예: 모바일 네트워크)의 종류 중 적어도 하나를 포함할 수 있다. 예를 들면, 어플리케이션은 전자 장치에서 실행 시 포그라운드 상태이거나 백그라운드 상태일 수 있으며, 세션은 포그라운드 상태를 의미할 수 있다. 예를 들면, 어플리케이션이 포그라운드(예: 제1 포그라운드)에서 백 그라운드로 실행되다가 다시 포그라운드(예: 제2 포그라운드)로 실행되는 경우 제1 포그라운드 기간이 제1 세션 일 수 있고, 제2 포그라운드 기간이 제2 세션일 수 있다. 일 실시예에 따른 프로세서는 각 세션(예: 제1"}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "세션, 제2 세션 또는 다른 세션)에 대응된 로우 데이터의 요약(또는 가공) 정보(예: 복수의 요소들 각각의 통계 값, 및/또는 복수의 요소들 각각의 부분값)를 성능 데이터로서 획득할 수 있다. 일 실시예에 따른 프로세서는 상기 어플리케이션의 실행에 관련된 상기 성능 데이터를 서버에 전송할 수 있고, 서버로부터 상기 성능 데이터의 분석에 기반한 적어도 하나의 성능 파라미터(예를 들어 CPU/GPU 의 클럭 및/또는 사용량 제한(usage limit))를 수신할 수 있다. 일 실시예에 따른 프로세서는 상기 성능 데이터를 분석하여 적어도 하나의 성능 파라미터를 직접 산출하거나, 상기 성능 데이터의 분석에 기반한 분석 정보를 서버로부터 수신하고 상기 분석 정보를 이용하여 성능 파라미터를 산출할 수 있다. 본 개시에서 성 능 파라미터의 획득이라 함은 서버로부터의 수신 및/또는 전자 장치에서의 계산을 포함할 수 있다. 프로세서는 상기 성능 파라미터에 기반하여 상기 어플리케이션을 실행할 수 있다. 예를 들어 프로세서 는 지정된 성능 파라미터(예를 들어 제1 성능 파라미터)에 기반하여 어플리케이션을 실행하는 도중 제2 성 능 파라미터의 획득 시 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행할 수 있다. 예를 들어 프 로세서는 제2 성능 파라미터에 기반하여 어플리케이션을 실행하는 도중 제3 성능 파라미터의 획득 시 제3 성능 파라미터에 기반하여 상기 어플리케이션을 실행할 수 있다. 일 실시예에서 프로세서는 어플리케이션 런처(application launcher) , 성능 튜너(performance tuner), 및/또는 에이전트를 포함할 수 있다. 예를 들어, 어플리케이션 런처, 성능 튜너, 및/또는 에이전트는 프로세서에 의해 실행되는 소프트웨어 또는 펌웨어일 수 있다. 또는, 어플리케이 션 런처, 성능 튜너, 및/또는 에이전트는 프로세서에 포함되거나 또는 독립적으로 존재하 는 하드웨어 모듈일 수 있다. 에이전트는 전자 장치에 신규로 설치되는 어플리케이션이 지정된 종류(예를 들어 게임 어플리케이션, 성능 최적화가 필요한 어플리케이션, 또는 고성능이 요구되는 어플리케이션))인지를 판단할 수 있다. 상기 어플 리케이션의 종류를 식별할 수 없다면 에이전트는 메타데이터 요청을 통해 서버에 질의하여 상기 어플 리케이션이 상기 지정된 종류인지에 대한 정보(예를 들어 메타데이터)를 수신하고, 상기 메타데이터를 기반으로 상기 어플리케이션이 상기 지정된 종류임을 확인할 수 있다. 어플리케이션 런처는 어플리케이션의 실행 요청에 기반하여, 주어진 성능 파라미터(예를 들어 제1 성능 파 라미터 또는 제2 성능 파라미터)에 기반하여 상기 어플리케이션을 실행할 수 있다. 일 실시예에서 어플리케이션 런처는 성능 튜너로부터 제공받은 성능 파라미터를 상기 어플리케이션의 실행에 적용할 수 있다. 성능 튜너는 어플리케이션이 실행중인 동안(예를 들어 전체 게임 세션 동안, 또는 어플리케이션의 실행 데 이터가 디스플레이에 노출되는 동안) 어플리케이션의 실행과 연관된 성능 데이터를 수집하여 메모리 (예를 들어 성능 데이터베이스(database: DB))에 저장하거나, 에이전트에 전달할 수 있다. 예를 들면, 성능 데이터는 어플리케이션의 실행과 관련된 복수의 요소들을 포함할 수 있다. 상기 복수의 요소들은 어 플리케이션의 실행 화면이 디스플레이에 노출되는 동안(예: 포그라운드(foreground) 동안)의 상기 어플리 케이션의 FPS, 전자 장치의 온도(예: CPU/GPU 온도 또는 표면 온도), 프로세서(예: CPU 또는 GPU)의 부하, 네트워크 입출력(I/O), 디스플레이의 해상도, 디스플레이의 주사율 또는 재생율, 디스플레이 의 화면 밝기, 및/또는 전자 장치가 접속중인 네트워크의 종류 중 적어도 하나를 포함할 수 있다. 성능 튜너는 어플리케이션의 실행과 연관된 성능 데이터의 전달에 대한 응답으로 에이전트를 통해 서 버로부터 적어도 하나의 성능 파라미터, 예를 들어 프로세서(예: CPU 또는 GPU)의 클럭 또는 사용량 제한을 수신할 수 있다. 일 실시예에 따른 성능 튜너는 상기 수신된 성능 파라미터에 기반하여 상기 어플리케이션이 실행되도록 어플리케이션 런처로 상기 성능 파라미터를 제공할 수 있다. 에이전트는 실행중인 어플리케이션에 관련된 성능 데이터를 통신 모듈을 통해 주기적으로 서버 로 전달할 수 있다. 일 실시예에서 에이전트는 주어진 주기에 따라 주기적으로 메모리(예를 들어 성 능 데이터베이스)로부터 성능 데이터를 읽어내고 상기 성능 데이터를 통신 모듈을 통해 서버로 보고할 수 있다. 일 실시예에서 에이전트는 상기 어플리케이션이 사용자에 의해 실제로 플레이되고 있는 인플레이(in-play) 구간에 대응하는 성능 데이터의 분석을 통해 산출된 성능 파라미터를 서버로부터 수신 하고, 상기 성능 파라미터를 성능 튜너로 전달할 수 있다. 상기 성능 파라미터는 상기 성능 데이터의 분석을 통해 전자 장치에서의 어플리케이션의 실행 성능을 개선하도록 서버에 의해 산출된 것일 수 있다. 일 실시예에서 에이전트는 성능 튜너에 의해 수집된 성능 데이터를, 인플레이 구간(in-play period) 에 대응하는 데이터(예: 인플레이 데이터)와 인플레이 구간에 대응하지 않는 데이터(예: 낫-인플레이 데이터)로 분류할 수 있다. 상기 어플리케이션과 관련된 세션이 진행되는 전체 시간 구간 중 인플레이 구간이 아닌 나머지 시간 구간은 낫-인플레이 구간이라 칭할 수 있다. 일 실시예에 따른 에이전트는 분류 결과 지정된 조건을 만족하는 인플레이 데이터를 서버로 보고할 수 있다. 일 실시예에 따른 에이전트는 서버로부터 인플레이 데이터의 분석을 기반으로 획득된 성능 파라미터를 수신하여 성능 튜너에 전달할 수 있다. 일 실 시예에 따른 에이전트는 인플레이 데이터를 분석하여 성능 파라미터를 획득하고 상기 성능 파라미터를 성 능 튜너에게 전달할 수 있다. 일 실시예에 따른 메모리는 어플리케이션 패키지를 저장할 수 있고, 상기 어플리케이션의 실행과 연관된 데이터 및/또는 정보를 저장할 수 있다. 예를 들면, 어플리케이션 패키지는 통신 모듈을 통해 서버 또는 다른 서버로부터 다운로드되고 전자 장치에 설치 및/또는 메모리에 저장될 수 있다. 메모리 는 성능 데이터베이스를 포함할 수 있고, 성능 데이터베이스는 상기 어플리케이션의 실행과 연 관되어 성능 튜너에 의해 수집되는 성능 데이터를 성능 튜너로부터 제공받아 저장할 수 있다. 일 실 시예에서 성능 데이터베이스는 프로세서의 내부 메모리(도시하지 않음)에 포함될 수 있다. 메모리는 기능 동작에 사용되는 프로그램(예: 도 1의 프로그램)을 비롯하여, 프로그램의 실행 중에 발생되는 다양한 데이터를 저장할 수 있다. 메모리는 크게 프로그램 영역과 데이터 영역(미도시)을 포함할 수 있다. 상기 프로그램 영역은 전자 장치를 부팅시키는 운영체제(OS)(예: 도 1의 운영 체제)와 같은 전자 장치의 구동을 위한 관련된 프로그램 정보들을 저장할 수 있다. 상기 데 이터 영역(미도시)은 다양한 실시예에 따라 송신 및/또는 수신된 데이터 및 생성된 데이터를 저장할 수 있다. 또한, 메모리는 플래시 메모리(flash memory), 하드디스크(hard disk), 멀티미디어 카드 마이크로 (multimedia card micro) 타입의 메모리(예를 들어, secure digital(SD) 또는 extreme digital(XD) 메모리), 램(RAM), 롬(ROM) 중의 적어도 하나의 저장매체를 포함하여 구성될 수 있다. 일 실시예에 따른 디스플레이는 프로세서의 제어에 기반하여 각종 데이터 및/또는 정보를 표시할 수 있다. 예를 들면, 디스플레이는 어플리케이션의 실행 데이터(예를 들어 실행 화면), 홈 화면, 및/또는 전 자 장치의 각종 기능 또는 동작과 연관된 화면을 포함하는 사용자 인터페이스를 표시할 수 있다. 일 실시 예에 따르면, 디스플레이는 터치 스크린의 형태로 구현될 수 있다. 디스플레이는 터치 스크린 형태로 입력 모듈과 함께 구현되는 경우, 사용자의 터치 동작에 따라 발생되는 다양한 정보들을 표시할 수 있다. 일 실 시예에 따르면, 디스플레이는 LCD(liquid crystal display), TFT-LCD(thin film transistor LCD), OLED(organic light emitting diodes), 발광다이오드(LED), AMOLED(active matrix organic LED), 마이크로 (micro) LED, 미니(mini) LED, 플렉시블 디스플레이(flexible display) 및 3차원 디스플레이(3 dimension display) 중 적어도 하나 이상으로 구성될 수 있다. 또한, 이들 중 일부 디스플레이는 그를 통해 외부를 볼 수 있도록 투명형 또는 광투과형으로 구성될 수 있다. 이는 TOLED(transparent OLED)를 포함하는 투명 디스플레이 형태로 구성될 수 있다. 다른 실시예에 따르면, 전자 장치는 디스플레이 외에 장착된 다른 디스플레 이 모듈(예를 들어, 확장 디스플레이 또는 플렉시블 디스플레이)을 더 포함할 수 있다. 일 실시예에 따른 오디오 모듈은 프로세서의 제어에 기반하여 각종 데이터 및/또는 정보를 표시할 수 있다. 예를 들면, 오디오 모듈은 어플리케이션의 실행과 연관된 오디오 신호를 스피커를 통해 출력하거나, 마이크를 통해 어플리케이션 실행과 연관된 오디오 신호를 입력 받을 수 있다. 일 실시예에 따른 통신 모듈은 네트워크를 통해 서버와 통신할 수 있다. 예를 들어, 통신 모듈 은 서버로부터 어플리케이션과 관련된 메타데이터를 수신할 수 있고, 성능 파라미터를 수신할 수 있다. 일 실시예에 따르면, 통신 모듈은 셀룰러 모듈, Wi-Fi(wireless-fidelity) 모듈, 블루투스 모듈 또는 NFC(near field communication) 모듈을 포함할 수 있다. 이 외에 서버와 통신 가능한 다른 모듈을 더 포 함할 수 있다. 일 실시예에 따르면, 전자 장치는 도 2에 도시된 구성에 한정되지 않고 다양한 구성 요소들을 더 포함하여 구성될 수 있다. 일 실시예에 따르면, 전자 장치는 이미지 처리 모듈(미도시)을 더 포함할 수 있다. 이미 지 처리 모듈은 프로세서의 제어에 기반하여 2D 또는 3D 이미지 처리 및/또는 렌더링 동작을 수행할 수 있 다. 일 실시예에 따른 서버(예: 도 1의 서버)는 적어도 하나의 프로세서(이하, 프로세서라고도 함), 메모리, 및 통신 모듈을 포함하여 구성될 수 있다. 서버는 이에 한정되지 않고 다양한 구성 요 소들을 더 포함하여 구성 또는 상기 구성들 중 일부를 제외하여 구성될 수 있다. 프로세서는 통신 모듈을 통한 전자 장치로부터 어플리케이션의 여부 문의에 기반하여 지정된 어 플리케이션에 대응된 메타데이터를 제공할 수 있다. 프로세서는 다수의 전자 장치들로부터 지정된 어플리 케이션을 실행할 경우의 성능 데이터를 수집하고, 수집된 성능 데이터를 세션(예를 들어 제1 세션, 제2 세션 또 는 다른 세션)별로 세그멘테이션하여 세션별 세그먼트들 각각의 특징값들을 추출하고 세션별 세그먼트들 각각의 특징값들을 기계 학습(machine learning) 모델에 의해 학습하여 성능 데이터를 분석할 수 있다. 일 실시예에 따"}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "른 프로세서는 성능 데이터의 요약(또는 가공) 정보(예: 복수의 요소들 각각의 통계값, 및/또는 복수의 요 소들 각각의 부분값)를 상기 성능 데이터와 관련된 추출값으로서 획득할 수 있다. 일 실시예에 따른 프로세서는 전자 장치로부터 지정된 조건(예를 들어 인플레이 구간 내)의 성능 데 이터를 수신할 수 있다. 일 실시예에 따른 프로세서는 지정된 조건의 성능 데이터를 분석하여 지정된 어플 리케이션에 대한 성능 파라미터를 획득하고 상기 성능 파라미터를 통신 모듈를 통해 전자 장치에 제 공할 수 있다. 일 실시예에 따른 프로세서는 성능 데이터 수집(performance data collector) 모듈, 데이터 분류 (data classifier) 모듈, 및/또는 성능 분석(performance analyzer) 모듈을 포함할 수 있다. 예를 들어, 성능 데이터 수집 모듈, 데이터 분류 모듈, 및/또는 성능 분석 모듈는 프로세서에 의해 실행되는 소프트웨어 또는 펌웨어일 수 있다. 또는, 성능 데이터 수집 모듈, 데이터 분류 모듈, 및/또는 성능 분석 모듈는 프로세서에 포함되거나 또는 독립적으로 존재하는 하드웨어일 수 있다. 일 실시예에 따른 성능 데이터 수집 모듈은 지정된 수집 기간 동안 지정된 다수의 전자 장치들로부터 지정 된 성능 파라미터로 지정된 어플리케이션을 실행할 경우의 성능 데이터를 수집하고, 상기 수집된 성능 데이터를 메모리(예를 들어 성능 데이터베이스)에 저장할 수 있다. 일 실시예에 따른 상기 성능 데이터는 데이 터 분류 모듈에 의한 기계 학습에 이용될 수 있다. 일 실시예에서 성능 데이터베이스는 장면(scene) 정보가 라벨링된 성능 데이터를 저장할 수 있다. 상기 장면 정보는 게임 소스 코드에 포함되어 있을 수 있다. 일 실시예에 따른 데이터 분류 모듈은 성능 데이터베이스로부터 성능 데이터(예를 들어 장면 정보가 라벨링된 성능 데이터)를 읽어내어 상기 성능 데이터의 세션별 특징값들을 식별하고, 상기 세션별 특징값들을 기계 학습 모델에 의해 학습하여 각 성능 데이터가 전자 장치에서 어플리케이션이 실제로 사용자에 의해 플레이되는 인플레이 구간에서 수집된 것인지의 여부를 판별하고, 상기 성능 데이터를 인플레이 구간에 관련된 인플레이 데이터와 인플레이 구간에 관련되지 않는 낫-인플레이 데이터로 분류할 수 있다. 일 실시예에 따른 성능 분석 모듈은 전자 장치로부터 수집되고 데이터 분류 모듈에 의해 분류된 상기 인플레이 데이터를 분석하여, 지정된 어플리케이션에 대해 전자 장치의 성능을 개선할 수 있는 성능 파라미터를 산출하고, 상기 산출된 성능 파라미터를 파라미터 데이터베이스에 저장하거나 또는 통신 모듈 을 통해 전자 장치에 전송할 수 있다. 일 실시예에 따른 메모리는 메타데이터 데이터베이스, 성능 데이터베이스 및 파라미터 데이터베 이스를 포함할 수 있고, 다수의 전자 장치들로부터 수집된 성능 데이터 및 성능 데이터들을 기반으로 획득 된 성능 파라미터들을 저장할 수 있다. 일 실시예에 따른 메타데이터 데이터베이스는 외부의 서버(예: 앱 스토어TM 또는 플레이 스토어TM)로부터 수 집된 어플리케이션(예: 게임 어플리케이션)의 정보를 기반으로 생성되는 적어도 하나의 어플리케이션 정보(예: 메타데이터)를 저장할 수 있다. 예를 들면, 메타데이터는 \"apk 이름\", \"게임여부\" 및/또는 \"게임이름\"을 포함할수 있다. 예를 들면, 메타데이터는 상기 어플리케이션에 대해 지정된 성능 파라미터의 기본값(default values) 을 포함할 수 있다. 일 실시예에 따른 서버는 메타데이터 데이터베이스에 저장된 어플리케이션 정보(예: 메타데이터)를 기반으로 전자 장치에 포함된(저장된 또는 설치된) 어플리케이션의 정보를 확인하여, 전자 장치에 포 함된 어플리케이션이 지정된 종류(예: 게임 어플리케이션)인지 여부를 식별하며, 만일 상기 지정된 종류인 경우 전자 장치에 포함된 어플리케이션이 지정된 종류(예: 게임 어플리케이션)임을 나타내는 정보를 포함하는 상기 메타데이터를 통신 모듈을 통해 전자 장치에게 제공할 수 있다. 일 실시예에서 메타데이터 데이터베이스, 성능 데이터베이스, 또는 파라미터 데이터베이스 중 적어도 하나는 프로세서의 내부 메모리(도시하지 않음)에 포함될 수 있다. 일 실시예에 따른 서버는 파라미터 데이터베이스에 저장된 성능 파라미터를 전자 장치의 요청에 따라, 또는 지정된 조건(예를 들어 어플리케이션의 설치 또는 실행, 또는 주어진 주기)에 따라 통신 모듈 을 통해 전자 장치에게 전달할 수 있다. 일 실시예에 따른 통신 모듈은 네트워크를 통해 전자 장치와 통신할 수 있다. 예를 들어, 통신 모듈은 전자 장치에 메타데이터를 전송할 수 있고, 전자 장치로부터 성능 데이터 및/또는 지정 된 조건의 성능 데이터(예를 들어 인플레이 데이터)를 수신할 수 있다. 상술한 실시예들에서는 도 2의 전자 장치 및 서버를 통해 주요 구성 요소에 대해 설명하였다. 그러나 다양한 실시예에서는 도 2를 통해 도시된 구성 요소가 모두 필수 구성 요소인 것은 아니며, 도시된 구성 요소보 다 많은 구성 요소에 의해 전자 장치 및/또는 서버가 구현될 수도 있고, 그 보다 적은 구성 요소에 의해 전자 장치 및/또는 서버가 구현될 수도 있다. 일 실시예에 따르면 전자 장치에 의해 수집되는 성능 데이터는 어플리케이션의 실행 데이터(예를 들어 실 행 화면)이 디스플레이에 노출되는 모든 시간 동안 지정된 시간 단위(예: 1초 단위)로 수집된 데이터를 포 함할 수 있다. 이러한 성능 데이터는 어플리케이션의 성능 파라미터를 최적화 하는데 불필요한 데이터(예를 들 어 인플레이 구간 이외에서 수집된 성능 데이터)를 포함할 수 있다. 도 3a, 도 3b, 도 3c, 도 3d, 도 3e, 및 도 3f(이하 도 3이라 통칭함)는 게임 어플레이션의 다양한 실행 화면들 을 예시한 것이다. 도 3a에 도시된 제1 화면은 전자 장치에서 어플리케이션(예: 게임)이 로딩되고 있는 도중에 표시되는 장면들을 포함할 수 있으며 이하 로딩 화면이라 칭할 수 있다. 도 3b에 도시된 제2 화면은 어플리케이션의 실행 중 튜토리얼(tutorial)을 위해 제공되는 장면들을 포함할 수 있으며, 이하 튜토리얼 화면이라 칭할 수 있 다. 도 3c에 도시된 제3 화면은 어플리케이션 내에서 게임 플레이(예를 들어 전투)가 시작되기 전 대기실 을 나타내는 장면들을 제공할 수 있으며 이하 대기실 화면이라 칭할 수 있다. 도 3d에 도시된 제4 화면은 어플리케이션의 실행 중 전투가 시작될 때 제공되는 장면들을 포함할 수 있으며 이하 전투 시작(start battle) 화면이라 칭할 수 있다. 도 3e에 도시된 제5 화면은 어플리케이션의 실행 중 전투가 진행중일 때 제공되는 장면들을 포함할 수 있으며 이하 전투 중(in battle) 화면이라 칭할 수 있다. 도 3f에 도시된 제6 화면은 어플리케이션의 실행 중 전투가 종료될 때 제공되는 장면들을 포함할 수 있으며 이하 대결 종료(end battle) 화 면이라 칭할 수 있다. 도 3을 참조하면, 낫-인플레이 화면들(예를 들어 로딩 화면, 튜토리얼 화면, 및/또는 대기실 화면)에 서의 성능 데이터는 프로세서의 비교적 낮은 성능을 요구하며, 어플리케이션의 성능 측정에 불필요하거나, 인플레이 화면들(예를 들어 전투 시작 화면, 전투중 화면 및/또는 전투 종료 화면)에 비해 상대 적으로 덜 중요할 수 있다. 일 실시예에서 낫-인플레이 화면들 동안의 성능 데이터는 전자 장치에서 어플리케이션의 실행 성능을 개선 하는데 방해 요소로 작용할 수 있고, 이로 인해 서버 또는 전자 장치는 최적의 성능 파라미터를 찾지 못하거나 혹은 잘못된 성능 파라미터를 결정하게 될 수 있다. 도 4는 게임 어플리케이션의 실행 도중에 수집된 성능 데이터의 변화를 설명하기 위한 도면이다. 도 4를 참조하면, 참조번호 404는 게임 어플리케이션의 실행 도중에 측정된 성능 데이터의 하나인 FPS의 변화를 나타낸 것이며, 참조번호 404는 게임 어플리케이션에 대해 지정된 타겟 FPS를 나타낸 것이고, 참조번호 406은 게임 어플리케이션의 실행 도중에 측정된 성능 데이터의 하나인 PST(predicted surface temperature)를 나타낸것이다. 도 5는 게임 어플리케이션의 실행 도중에 수집된 성능 데이터의 안정도를 비교하기 위한 도면이다. 도 5를 참조하면, 참조번호 502는 전체 게임 세션의 평균 FPS(\"Total avg FPS\")와 인플레이 구간에서의 평균 FPS(\"In play Avg FPS\")를 비교한 것이며, 참조번호 504는 전체 게임 세션의 FPS 안정도(\"Total FPS stability\")와 인플레이 구간에서의 FPS 안정도(\"In play FPS stability\")를 비교한 것이고, 참조번호 506은 전체 게임 세션의 타겟 FPS 안정도(\"Total target FPS stability\")와 인플레이 구간에서의 타겟 FPS 안정도 (\"In play target FPS stability\")를 비교한 것이다. 도 4 및 도 5를 참조하면 타겟 FPS는 40이고, 게임 어플리케이션이 진행중인 게임 세션 중의 절반 정도의 시간은 대기 화면(예를 들어 대기실 화면)에서 경과되었다. FPS는 음영으로 표시된 인플레이 구간(예 를 들어 전투 중 화면)에서 비교적 안정적임임을 알 수 있다. 참조번호 504에 따르면, 전체 게임 세션의 FPS 안정도(stability)(total target FPS stability\")는 52.8%로, 게임 성능에 문제가 있는 것을 나타내지만, 인플레이 구간의 FPS 안정도(In play target FPS stability)는 96.68%로 실제 게임 성능은 문제가 없는 것을 알 수 있다. 후술되는 실시예들은 어플리케이션의 성능 측정에 필요한 성능 데이터를 어플리케이션의 실제 플레이 도중에 수 집된 데이터(즉 인플레이 데이터)와 나머지 데이터(즉 낫-인플레이 데이터)로 분류하고, 인플레이 데이터를 분 석하여 보다 효과적으로 어플리케이션을 실행하기 위한 성능 파라미터를 결정할 수 있다. 도 6은 일 실시예에 따른 전자 장치와 서버 간의 데이터 흐름을 설명하기 위한 도면이다. 다양한 실 시예들에서 전자 장치의 프로세서와 서버의 프로세서는 후술되는 동작들 중 적어도 하나를 실행하도록 구성될 수 있다. 도 6을 참조하면, 동작 602에서 전자 장치의 프로세서는 어플리케이션(예: 게임 어플리케이션)의 소 스 코드를 이용하여 어플리케이션을 식별하고, 상기 소스 코드에 포함된 장면 정보를 획득할 수 있다. 장면 정 보는 어플리케이션의 각 장면에 대한 의미를 나타낼 수 있으며, 상기 장면 정보는 전자 장치에서 실행중인 어플리케이션의 현재 실행 데이터(예를 들어 실행 화면)이 인플레이 화면(예를 들어 전투 시작 화면, 전투 중 화면 또는 전투 종료 화면)에 대응하는지 혹은 낫-인플레이 화면(예를 들어 로딩 화면, 튜토 리얼 화면, 또는 대기실 화면)에 대응하는지를 식별하는데 사용될 수 있다. 일 실시예에서 장면 정보는 하기의 <표 1>과 같은 장면 식별자(scene_id)를 포함할 수 있다. 표 1 Scene_Id Meaning 0 Default scene 1 Game is starting 2 Game is updating 3 User is signing in 4 Game in in room 5 Game scene is loading(User is loading) 6 Game scene is loading(Other user is loading) 7001 Game is playing (Scene No 1. Talk with NPCs while performing quests ) 7002 Game is playing (Scene No 2. The ongoing battle with the henchmen ) 7003 Game is playing (Scene No 3. Battle with monsters in dungeons ) ... ... 8 Game is in watching mode 9 End of the game 일 실시예에서 scene_id=0~6은 로딩 화면을 의미할 수 있다. 일 실시예에서 scene_id=7xxx는 인플레이 화 면들(예를 들어 전투 시작 화면, 전투중 화면 및/또는 전투 종료 화면)을 의미할 수 있다. 동작 604에서 프로세서(예를 들어 에이전트)는 서버에게 상기 어플리케이션에 대한 메타데이터 요청을 전송하고 서버의 메타데이터 데이터베이스로부터 상기 어플리케이션에 대한 메타데이터를 수신할 수 있다. 상기 메타데이터는 상기 어플리케이션의 게임여부, 및 성능 파라미터의 기본값(예를 들어 제1 성 능 파라미터)을 포함할 수 있다. 동작 606에서 프로세서(예를 들어 에이전트)는 상기 메타데이터로부터 획득한 제1 성능 파라미터를 성능 튜너에게 전달함으로써, 성능 튜너가 상기 제1 성능 파라미터를 상기 어플리케이션의 실행에 적 용할 수 있도록 한다. 프로세서(예를 들어 성능 튜너)는 상기 제1 성능 파라미터를 기반으로 상기 어 플리케이션이 실행되는 동안(예를 들어 상기 어플리케이션의 세션이 유지되는 동안), 상기 어플리케이션의 실행 과 관련된 성능 데이터를 주기적으로(예를 들어 초단위) 수집하여 전자 장치 내의 저장소(예를 들어 성능 데이터베이스)에 저장할 수 있다. 일 실시예에서 상기 성능 데이터는 상기 어플리케이션의 FPS, 표면 온도 (예를 들어 PST(predicted surface temperature)), GPU 부하, CPU 부하, 네트워크 I/O, 디스플레이 해상도, 주 사율 또는 재생율, 화면 밝기, 또는 모바일 네트워크의 종류 중 적어도 하나를 포함할 수 있다. 일 실시예에서 프로세서(예를 들어 성능 튜너는 상기 어플리케이션이 실행되고 있는 세션별로 세그멘 테이션된 성능 데이터(예를 들어 세그먼트 데이터)를 수집할 수 있다. 일 실시예에서 프로세서(예를 들어 성능 튜너)는 전자 장치에서 상기 어플리케이션이 실행되는 동안 상기 성능 데이터에 따라 전자 장치 의 성능을 조정(tune)할 수 있다. 동작 608a에서 프로세서(예를 들어 성능 튜너는 에이전트를 통해 서버에게, 상기 성능 데 이터(예를 들어 세그먼트 데이터)를 전송할 수 있다. 상기 성능 데이터는 서버의 프로세서(예를 들어 성능 데이터 수집 모듈)에 의해 수신될 수 있다. 동작 608b에서 프로세서(예를 들어 성능 데이터 수 집 모듈는 상기 성능 데이터를 서버의 메모리(예를 들어 성능 데이터베이스)에 저장할 수 있다. 일 실시예에서 프로세서는 동일한 어플리케이션을 실행하는 다수의 전자 장치들(예를 들어 전자 장 치 및 다른 전자 장치를 포함함)로부터 수신되는 성능 데이터를 성능 데이터베이스에 저장할 수 있다. 일 실시예에서 다수의 전자 장치들은 상기 어플리케이션을 실행하는 동안 수집된 성능 데이터를 주기적 (예를 들어 초단위)으로 서버에게 보고할 수 있다. 하기 <표 2>는 서버의 성능 데이터베이스에 저장되는 성능 데이터의 예시를 나타낸 것이다. 표 2 No. Uuidreporting_ timedurati onavg_ fpsmedian _fpsfps_ stabilit ytarget_ fps_ stabilit yplay_ avg_ fpsplay_ median_ fpsplay_ fps_ stabili ty 0~5d12e4e~77562883351.846076.5986.8858.56096.22 1~150da6a~86897464352.525981.7580.7547.8659.564.44 2~be64e44~156586220731.373084.0184.0430.33099.85 3~d618a9a~58476489727.033085.8385.9230.273099.79 4~f55a3d0~046929105126.713087.4587.5830.293099.74 5~72c7f5d~00347588730.223090.4390.5230.273099.81 6~485e6cc~610497143928.73091.9392.0629.663096.44 7~f5f3756~05398491128.493091.9992.0730.293099.69 8~5f5df53~61982177956.046092.0392.6358.726098.24 9~deab9ba~852920199957 6092.292.2959.736099.79 <표 2>의 예에서 성능 데이터는 전자 장치(예를 들어 전자 장치) 또는 사용자를 식별하는 Uuid(universally unique identifier), 보고 시간을 나타내는 reporting_time, 데이터 수집 기간을 나타내는 duration 및 어플리케이션의 실행과 연관된 복수의 요소들을 포함할 수 있다. 일 실시예에서 상기 요소들은 하기의 값들 중 적어도 하나를 포함할 수 있으며 본 문서에 언급되지 않은 다양한 값들을 더 포함할 수 있다. - duration: 데이터 수집 기간 - avg_fps: 평균 FPS - median_fps: FPS의 중위값 - fps_stability: FPS 안정도 - target_fps_stability: FPS 안정도에 대한 타겟값 - play_avg_fps: 플레이되는 동안의 평균 FPS - play_median_fps: 플레이되는 동안의 FPS 중위값 - play_fps_stability : 플레이되는 동안의 FPS 안정도 - play_target_fps_stability: 플레이되는 동안의 FPS 안정도에 대한 타겟값 동작 610에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터베이스로부터 성능 데이터를 읽어낼 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 주어진 조건(예를 들어 주 기적, 사용자/운영자의 요청, 또는 어플리케이션의 설치/실행/종료)에 따라 성능 데이터의 분류가 필요하다고 판단되는 시점에서 상기 어플리케이션과 관련된 상기 성능 데이터를 읽어낼 수 있다. 일 실시예에서 프로세서 (예를 들어 데이터 분류 모듈)는 상기 성능 데이터가 전자 장치에서의 인플레이 구간에 대응하 는지의 여부를 판단하고, 만일 인플레이 구간에 대응하는 경우 인플레이 데이터로 판별하고, 그렇지 않은 경우 낫-인플레이 데이터로 판별할 수 있다. 하기의 <표 3>은 서버의 성능 데이터베이스에 저장되는 성능 데이터 중 특정 사용자(예를 들어 전자 장치)로보터 보고된 성능 데이터의 예시를 나타낸 것이다. 표 3 No. Uuid scene_ target_ fpsscene_ idscene_ descscene_original_data 0~be64e44 NaN NaN NaN ~41792:initSdk() 1~be64e44 NaN 1game is starting~42412:updateGameInfo() {\"sceneId\":1, \"fps\":29, \"0\":\"0\"} 2~be64e44 NaN NaN NaN ~42429:SsrmControl.setPerformanceLevel() {\"perfLevel\":3} 3~be64e44 NaN 2game is updating~44454:updateGameInfo() {\"sceneId\":2} 4~be64e44 NaN 3game landing and loading~49291:updateGameInfo() {\"sceneId\":3} 5~be64e44 60 NaN NaN ~54970:updateGameInfo(){\"7\":\"60\"} 6~be64e44 NaN 4 game hall~55976:updateGameInfo() {\"1\":\"1.35.1\",\"2\":\"11\",\"sceneId\":4, \"8\":\"9\",\"9\":\"2\",\"51\":\"19939\",\"쪋} 7~be64e44 NaN NaN NaN ~59295:SsrmControl.setPerformanceLevel() {\"perfLevel\":3} 8~be64e44 NaN 5scene loading (own player side)~66680:updateGameInfo() {sceneId\":5} 9~be64e44 NaN NaN NaN ~66692:SsrmControl.setPerformanceLevel() {\"perfLevel\":3} 10~be64e44 NaN NaN NaN ~76682:SsrmControl.setPerformanceLevel() {\"perfLevel\":3} 11~be64e44 NaN 6scene loading (waiting other player side)~89276:updateGameInfo() {sceneId\":6} 12~be64e44 NaN 7playing game~16477:updateGameInfo() {sceneId\":7} 여기서 NaN은 숫자가 아님(Not a Number)을 의미한다. 일 실시예에서 전자 장치에 의해 보고된 성능 데이 터는 Uuid, reporting_time, 또는 scene_id 중 적어도 하나를 키(key)로 사용하여 성능 데이터베이스에 저장될 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터의 각 특징값(예를 들어 scene_id, 또는 scene_original_data)을 기반으로 인플레이 데이터 또는 낫-인플레이 데이터를 분류할 수 있다. 프로세서(예를 들어 데이터 분류 모듈)의 데이터 분류에 대한 예시적인 실시예들은 도 11 내지 도 27 을 참조하여 후술될 것이다. 일 실시예에서 데이터 분류 모듈은 특징값 추출 모듈과 분류 모듈을 포함할 수 있다. 프로세서 (예를 들어 특징값 추출 모듈)는 성능 데이터베이스로부터 읽어낸 성능 데이터로부터 인플레이 구간의 식별에 필요한 특징값들을 추출할 수 있다. 상기 특징값들은 성능 데이터에 포함되는 복수의 요소들로부"}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "터 얻어낼 수 있는 것으로서, 일 예로 상기 요소들 중 적어도 하나에 대한 요약(또는 가공) 정보일 수 있다. 프 로세서(예를 들어 분류 모듈)은 기계 학습 모델에 의해 상기 특징값들을 해석하고 상기 특징값들에 근거하여 상기 성능 데이터가 인플레이 구간에 대응하는지의 여부를 판단할 수 있다. 동작 612에서 프로세서(예를 들어 성능 분석 모듈)은 성능 데이터베이스로부터 성능 데이터를 읽어낼 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 주어진 조건(예를 들어 주 기적, 사용자/운영자의 요청 또는 상기 어플리케이션의 실행/업데이트/종료)에 따라 성능 데이터의 분석 및/또 는 성능 파라미터의 최적화가 요구된다고 판단되는 시점에서 상기 어플리케이션과 관련된 상기 성능 데이터를 읽어낼 수 있다. 동작 614에서 프로세서(예를 들어 데이터 분류 모듈)는 상기 분류 동작의 결과 판별된 인플레이 구간 에 대응하는 성능 데이터(예를 들어 인플레이 데이터)를 성능 분석 모듈로 전달할 수 있다. 프로세서 (예를 들어 성능 분석 모듈)는 주어진 조건(예를 들어 주기적 또는 사용자/운영자의 요청)에 따라, 데이터 분류 모듈로부터 제공된 인플레이 데이터 및/또는 성능 데이터베이스로부터 읽어낸 전체 성능 데이터를 분석하고 전자 장치를 위해 최적화된 성능 파라미터를 산출할 수 있다. 일 실시예에서 성능 분석 모듈은 분석 모듈 및 파라미터 생성 모듈을 포함할 수 있다. 프로세서 (예를 들어 분석 모듈)은 어플리케이션의 각 세션에 대응된 인플레이 데이터 및/또는 성능 데이터를 분석할 수 있고, 프로세서(예를 들어 파라미터 생성 모듈)는 전자 장치에서 어플리케이션의 실 행 성능을 높일 수 있는 값을 가지는 성능 파라미터(예를 들어 제2 성능 파라미터)을 계산할 수 있다. 일 실시 예에서 프로세서(예를 들어 파라미터 생성 모듈)는 데이터 분석에 따라 어플리케이션의 실행 성능을 높일 수 있는 CPU 클럭 또는 GPU 클럭의 값 및/또는 프로세서 사용량 제한을 포함하는 제2 성능 파라미터를 결 정할 수 있다. 동작 616에서 프로세서(예를 들어 파라미터 생성 모듈)는 상기 결정된 제2 성능 파라미터를 파라미터 데이터베이스에 저장할 수 있다. 동작 618에서 프로세서는 주어진 조건(예를 들어 전자 장치에서 어플리케이션의 설치/실행/종료, 사 용자/운영자의 요청, 또는 주기적)에 따라 파라미터 데이터베이스에 저장된 성능 파라미터(예를 들어 제2 성능 파라미터)를 전자 장치로 제공(예를 들어 배포)할 수 있다. 일 실시예에서 전자 장치의 프로세 서(예를 들어 성능 튜너)는 상기 제2 성능 파라미터를 서버로부터 수신하고 상기 제2 성능 파라 미터를 상기 어플리케이션의 실행에 적용할 수 있다. 일 실시예에서 프로세서(예를 들어 성능 튜너) 는 상기 어플리케이션이 실행되는 동안 상기 제2 성능 파라미터에 의해 지정되는 클럭 및/또는 사용량 제한에 따라 동작할 수 있다. 도 7은 일 실시예에 따라 전자 장치의 성능 개선을 위한 절차를 설명하기 위한 신호 흐름도이다. 여기에서 는 전자 장치의 프로세서와 서버의 프로세서에 포함되는 모듈들 간의 신호 흐름을 예시하 였다. 도 7을 참조하면, 동작 702에서 전자 장치의 프로세서(예를 들어 성능 튜너)는 어플리케이션(예: 게임 어플리케이션)을 설치하면서 상기 어플리케이션의 소스 코드에 포함된 장면 정보를 획득 할 수 있다. 동작 704에서 프로세서(예를 들어 에이전트)는 상기 설치된 어플리케이션에 대한 질의를 위해 메타데이터 요청을 서버로 전송하고, 상기 질의에 대한 응답으로 서버(예를 들어 메타데이터 데 이터베이스)로부터 상기 어플리케이션과 관련된 메타데이터를 수신할 수 있다. 일 실시예에서 상기 메타데 이터는 상기 어플리케이션의 실행 성능을 개선하기 위한 데이터 수집이 필요함을 나타내는 정보(예를 들어 게임임을 나타내는 정보)와, 상기 어플리케이션의 실행에 적용될 성능 파라미터의 기본값(예를 들어 제1 성능 파라 미터)을 포함할 수 있다. 동작 706에서 프로세서(예를 들어 에이전트)는 상기 제1 성능 파라미터를 성능 튜너로 전달하여 상기 어플리케이션의 실행에 적용하도록 할 수 있다. 프로세서(예를 들어 성능 튜너)는 상기 제1 성 능 파라미터를 적용하여 상기 어플리케이션을 실행할 수 있다. 일 실시예에서 프로세서(예를 들어 에이전 트)는 상기 제1 성능 파라미터를 메타데이터로부터 획득하는 대신, 상기 어플리케이션의 실행 이전에 서버 (예를 들어 성능 데이터베이스)로부터 제공받을 수 있다. 동작 708a에서 프로세서(예를 들어 성능 튜너)는 상기 어플리케이션이 상기 제1 성능 파라미터에 근 거하여 실행되는 동안 상기 어플리케이션의 실행과 관련된 성능 데이터를 수집할 수 있다. 일 실시예에서 프로 세서(예를 들어 성능 튜너)는 상기 어플리케이션이 실행되는 동안 상기 어플리케이션의 실행과 관련"}
{"patent_id": "10-2021-0159283", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "된 로우 데이터를 수집하고, 상기 로우 데이터의 요약 또는 가공을 통해 상기 성능 데이터를 구성할 수 있다. 일 실시예에서 상기 성능 데이터는 예를 들어 주기적으로 수집될 수 있다. 동작 710a에서 프로세서(예를 들어 성능 튜너)는 상기 성능 데이터(예를 들어 제1 성능 데이터)를 에이전트를 통해 서버로 보 고할 수 있다. 서버의 프로세서(예를 들어 성능 데이터 수집 모듈)는 상기 성능 데이터를 성능 데이터베이스에 저장할 수 있다. 동작 708b에서 프로세서(예를 들어 성능 튜너)는 상기 어플리케이션이 상기 제1 성능 파라미터에 근 거하여 실행되는 동안 상기 어플리케이션의 실행과 관련된 성능 데이터를 수집할 수 있다. 동작 710b에서 프로 세서(예를 들어 성능 튜너)는 상기 성능 데이터(예를 들어 제2 성능 데이터)를 에이전트를 통해 서버로 보고할 수 있다. 일 실시예에서 동작 708a와 동작 710a 및/또는 동작 708b와 동작 710b에 따른 상 기 성능 데이터의 수집 및 보고는 상기 어플리케이션이 실행되는 동안(예를 들어 상기 어플리케이션의 세션이 유지되는 동안) 주기적으로 반복될 수 있다. 동작 712에서 서버의 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터베이스로부터 성능 데이터를 읽어낼 수 있다. 동작 714에서 프로세서(예를 들어 데이터 분류 모듈)는 상기 성능 데 이터를 기반으로 상기 성능 데이터가 인플레이 구간에 대응하는지의 여부를 판단할 수 있다. 일 실시예에서 프 로세서(예를 들어 데이터 분류 모듈)는 상기 성능 데이터로부터 인플레이 구간의 판별에 사용되기 위 한 특징값들을 추출하고, 상기 특징값들을 기반으로 상기 성능 데이터가 인플레이 구간에 대응하는 인플레이 데 이터인지를 판단할 수 있다. 상기 특징값들의 예시들에 대한 설명은 도 11 내지 도 27을 참조하여 후술될 것이다. 동작 716에서 프로세서(예를 들어 성능 분석 모듈)는 상기 어플리케이션의 성능을 향상시키기 위한 분석 동작을 수행하기 위해 성능 데이터베이스에 저장된 성능 데이터를 읽어낼 수 있다. 일 예로서 상기 성능 데이터베이스로부터 제공되는 성능 데이터는 전자 장치에서 상기 어플리케이션이 실행되는 세션 의 전체 구간 동안에 수집된 것일 수 있다. 동작 718에서 프로세서(예를 들어 성능 분석 모듈)는 상기 어플리케이션의 성능을 향상시키기 위한 분석 동작을 수행하기 위해 데이터 분류 모듈에 의해 판단된 인플레이 데이터를 제공받을 수 있다. 상기 인플레이 데이터는 전체 세션 도중에 수집된 성능 데이터 중, 전자 장치에서 어플리케이션이 실제로 플레 이되는 구간(인플레이 구간)에 수집된 것에 해당할 수 있다. 동작 720에서 프로세서(예를 들어 성능 분석 모듈)는 상기 동작 716의 성능 데이터 및/또는 상기 동 작 718의 인플레이 데이터를 기반으로 분석 동작을 수행하여 전자 장치에서 상기 어플리케이션의 실행 성 능을 향상시킬 수 있는 성능 파라미터(예를 들어 제2 성능 파라미터)를 계산 및 생성할 수 있다. 동작 722에서 프로세서(예를 들어 성능 분석 모듈)는 상기 제2 성능 파라미터를 메모리(예를 들 어 파라미터 데이터베이스)에 저장할 수 있다. 동작 722에서 프로세서(예를 들어 성능 분석 모듈)는 상기 제2 성능 파라미터를 메모리(예를 들 어 파라미터 데이터베이스)로부터 읽어내어 전자 장치로 전달할 수 있다. 상기 제2 성능 파라미터는 전자 장치의 에이전트를 통해 성능 튜너로 제공될 수 있으며, 프로세서(예를 들어 성능 튜 너)는 상기 제2 성능 파라미터를 적용하여 상기 어플리케이션을 실행할 수 있다. 또는 프로세서(예를 들어 성능 튜너)는 현재 실행중인 상기 어플리케이션에 상기 제2 성능 파라미터를 적용할 수 있다. 도 8은 일 실시예에 따라 전자 장치에서 성능 데이터를 보고하는 절차를 설명하기 위한 흐름도이다. 후술 되는 동작들 중 적어도 하나는 전자 장치의 프로세서에 의해 실행될 수 있다. 도 8을 참조하면, 동작 802에서 프로세서는 어플리케이션의 실행 요청(예를 들어 사용자 입력 또는 지정된 조건에 따른 자동 실행 요청)을 수신할 수 있다. 예를 들어 상기 어플리케이션은 게임 어플리케이션 또는 성능 데이터의 수집과 성능 최적화가 요구되는 어플리케이션일 수 있다. 동작 804에서 프로세서는 상기 실행 요청에 응답하여 통신 모듈을 통해 서버에게 상기 어플리케 이션이 지정된 종류(예를 들어 게임 어플리케이션)인지를 확인하기 위한 질의를 포함하는 메타데이터 요청을 전 송하고 상기 메타데이터 요청에 따라 서버로부터 상기 어플리케이션과 관련된 메타데이터를 수신할 수 있 다. 일 실시예에서 프로세서는 상기 어플리케이션의 실행 요청에 따라 또는 상기 어플리케이션의 설치시에 상기 메타데이터를 서버로부터 획득할 수 있다. 동작 806에서 프로세서는 상기 메타데이터를 기반으로 상기 어플리케이션이 지정된 종류, 즉 게임 어플리 케이션인지를 판단할 수 있다. 만일 게임 어플리케이션이 아니면 동작 820에서 프로세서는 통상의 방식에 따라 상기 어플리케이션을 실행할 수 있다. 반면 게임 어플리케이션이면 프로세서는 동작 808로 진행할 수 있다. 동작 808에서 프로세서는 상기 메타데이터에 포함된 제1 성능 파라미터를 식별하고 상기 제1 성능 파라미 터에 기반하여 상기 어플리케이션을 실행할 수 있다. 일 예로서 상기 제1 성능 파라미터는 프로세서 클럭(예를 들어 CPU 클럭 및/또는 GPU 클럭)을 포함할 수 있다. 동작 810에서 프로세서는 상기 제1 성능 파라미터에 기반하여 상기 어플리케이션이 실행되는 동안 주어진 조건(예를 들어 주기적으로)에 따라 상기 어플리케이션의 실행과 관련된 성능 데이터를 수집할 수 있다. 상기 성능 데이터는 상기 어플리케이션의 FPS, 전자 장치의 온도(예: CPU/GPU 온도 또는 표면 온도), 프로세서 (예: CPU 또는 GPU)의 부하, 네트워크 입출력(I/O), 디스플레이의 해상도, 디스플레이의 주사율 또는 재생율, 디스플레이의 화면 밝기, 및/또는 전자 장치가 접속중인 네트워크의 종류 중 적어도 하 나를 포함할 수 있다. 동작 812에서 프로세서는 주어진 조건(예를 들어 주기적으로)에 따라 상기 성능 데이터를 서버로 보 고할 수 있다. 일 실시예에서 동작 810 및 동작 812는 상기 어플리케이션이 실행중인 동안 적어도 한번 반복적 으로 수행될 수 있다. 동작 814에서 프로세서는 상기 보고된 성능 데이터 중 인플레이 구간의 성능 데이터(예를 들어 인플레이 데이터)에 기반하여 산출된 제2 성능 파라미터를 획득할 수 있다. 일 실시예에서 프로세서는 상기 어플리 케이션이 실행중인 동안 상기 성능 데이터를 수집하고 보고하는 주기보다 더 긴 주기에 따라 또는 주어진 조건 에 따라 상기 제2 성능 파라미터를 서버로부터 수신할 수 있다. 일 실시예에서 프로세서는 상기 어플 리케이션의 종료시, 또는 다음 실행시에 상기 제2 성능 파라미터를 서버로부터 수신할 수 있다. 일 실시예 에서 프로세서는 상기 어플리케이션이 실행중인 동안 보고된 상기 성능 데이터를 기반으로 하여 상기 제2 성능 파라미터를 직접 또는 서버의 도움을 받아 획득할 수 있다. 동작 816에서 프로세서는 상기 제2 성능 파라미터를 적용하여 상기 어플리케이션을 실행할 수 있다. 일 실 시예에서 프로세서는 상기 제2 성능 파라미터에 포함된 프로세서 클럭(예를 들어 CPU 클럭 및/또는 GPU 클 럭)에 따라 동작하면서 상기 어플리케이션을 실행할 수 있다. 일 실시예에서 프로세서는 상기 어플리케이 션을 실행하는 동안 상기 제2 성능 파라미터를 획득하고 상기 제2 성능 파라미터를 적용할 수 있다. 일 실시예 에서 프로세서는 상기 어플리케이션의 다음 실행시 상기 제2 성능 파라미터를 적용할 수 있다. 동작 818에서 프로세서는 상기 어플리케이션의 종료 요청(예를 들어 사용자 입력 또는 지정된 조건에 따른 자동 종료 요청)이 수신되는지를 판단할 수 있다. 만일 상기 어플리케이션이 종료되지 않는 경우 프로세서(21 0)는 동작 810으로 복귀하여 이후 동작들(예를 들어 동작 810, 812, 814, 및 816)을 반복할 수 있다. 반면 상기 어플리케이션의 종료 요청이 수신된 경우 프로세서는 상기 어플리케이션의 실행을 종료할 수 있다. 일 실 시예에서 프로세서는 상기 어플리케이션의 종료시 상기 제2 성능 파라미터에 따른 성능 데이터를 서버 로 보고할 수 있다. 도 9는 일 실시예에 따라 서버에서 인플레이 구간을 식별하는 절차를 설명하기 위한 흐름도이다. 후술되는 동작들 중 적어도 하나는 서버의 프로세서에 의해 실행될 수 있다. 도 9를 참조하면, 동작 902에서 프로세서는 전자 장치로부터 어플리케이션에 대한 질의를 포함하는 메타데이터 요청을 수신할 수 있다. 상기 메타데이터 요청에 응답하여 프로세서는 상기 어플리케이션이 게 임 어플리케이션임을 나타내는 정보와 상기 어플리케이션을 위한 성능 파라미터의 기본값(예를 들어 제1 성능 파라미터)을 포함하는 메타데이터를 전자 장치로 전달할 수 있다. 동작 904에서 프로세서는 전자 장치로부터 상기 어플리케이션의 실행과 관련된 성능 데이터를 수신할 수 있다. 일 실시예에서 상기 성능 데이터는 전자 장치에서 상기 어플리케이션이 실행되는 동안(예를 들어 상기 어플리케이션의 세션이 유지되는 동안) 주기적(예를 들어 초단위)으로 전자 장치로부터 수신될 수 있 다. 동작 906에서 프로세서는 주어진 조건(예를 들어 주기적, 사용자/운영자의 요청, 또는 상기 어플리케이션 의 실행/업데이트/종료)에 따라 성능 데이터의 분석 및/또는 성능 파라미터의 최적화가 요구된다고 판단되는 시 점에서 상기 성능 데이터를 분석하여 특징값들을 추출하고, 상기 특징값들에 기반하여 전자 장치에서 상기 어플리케이션이 실제로 플레이되는 인플레이 구간을 식별할 수 있다. 프로세서는 상기 식별된 인플레이 구 간에 대응하는 성능 데이터(또는 상기 특징값들)를 인플레이 데이터로서 판단할 수 있다. 일 실시예에서 프로세서는 상기 어플리케이션(예를 들어 게임 어플리케이션)이 실행된 이후 미리 정해지는 길이의 시간 구간을, 게임 로딩 및 대기실 진입과 같은 동작들이 수행되는 낫-인플레이 구간(not in-play period)으로 판단할 수 있다. 또한 게임이 종료되기 이전 미리 정해지는 길이의 시간 구간은 엔딩 화면의 제공 과 같은 동작이 수행되므로 낫-인플레이 구간으로 판단될 수 있다. 프로세서는 성능 데이터의 보고 시간이 상기 판단된 낫-인플레이 구간에 속하는 경우 상기 성능 데이터를 낫-인플레이 데이터로 판단할 수 있다. 프로 세서는 상기 판단된 낫-인플레이 구간을 제외한 나머지 시간 구간에서 수집된 성능 데이터를 인플레이 데 이터로 판단할 수 있다. 일 실시예에서 프로세서는 성능 데이터에 포함되는 요소별로 수집된 값들의 통계값(예를 들어 최소값, 최 대값, 평균값, 표준편차, 또는 비대칭도)을 계산하고, 상기 통계값과 현재 수집된 값 간의 차이에 따라 상기 현 재 수집된 값이 인플레이 구간에 대응하는지의 여부를 판단할 수 있다. 일 예로서 프로세서는 성능 데이터 중 현재 표면 온도와 최소 표면 온도 간의 차이를 나타내는 특징값을 계산하고 상기 특징값이 주어진 임계값을 초과하는 경우 상기 특징값을 인플레이 구간에 대응하는 인플레이 데이터로 분류할 수 있다. 일 실시예에서 프로세서는 성능 데이터의 시계열 데이터 값을 시간 순서대로 추적하고, 상기 시계열 데이 터 값이 현저하게 달라지는 시점에서 인플레이 구간과 낫-인플레이 구간 간의 전환이 이루어지는 것으로 판단할 수 있다. 프로세서는 특정 시점 전후의 타임 윈도우들 별로 각각의 통계값들을 계산하고, 상기 통계값들을 비교하여 상기 특정 시점 전후의 데이터 변경이 일어났는지를 판단할 수 있다. 일 예로서 프로세서는 특정 시점과 5초 이후의 FPS 차이값을 구하고, 현재 시점으로부터 30초 이후까지의 타임 윈도우 내에서 30개의 FPS 차이값들 중 최대값을 계산할 수 있다. 상기 최대값이 주어진 임계값보다 작은 경우 프로세서는 상기 FPS 차이값들의 최대값을 인플레이 데이터로 결정할 수 있다. 동작 906에 대한 다양한 예시적인 실시예들은 도 11 내지 도 27을 참조하여 후술될 것이다. 동작 908에서 프로세서는 상기 식별된 인플레이 구간의 성능 데이터(예를 들어 인플레이 데이터) 및/또는 그와 관련된 특징값들에 기반하여 상기 어플리케이션의 실행 성능을 개선하기 위한 제2 성능 파라미터를 산출할 수 있다. 동작 910에서 프로세서는 주어진 조건(예를 들어 전자 장치에서 어플리케이션의 설치/실행/종료, 사 용자/운영자의 요청, 또는 주기적)에 따라 상기 제2 성능 파라미터를 전자 장치로 전달(예를 들어 배포)할 수 있다. 이상의 실시예들에서는 전자 장치가 성능 데이터를 보고하고 서버에서 인플레이 구간을 식별하는 것으로 설명하였으나, 다른 실시예에서 전자 장치는 수집된 성능 데이터를 기반으로 인플레이 구간을 식별하 도록 동작할 수 있다. 도 10은 일 실시예에 따라 전자 장치에서 인플레이 구간을 식별하는 절차를 설명하기 위한 흐름도이다. 후 술되는 동작들 중 적어도 하나는 전자 장치의 프로세서에 의해 실행될 수 있다. 도 10을 참조하면, 동작 1002에서 프로세서는 어플리케이션의 실행 요청(예를 들어 사용자 입력 또는 지정 된 조건에 따른 자동 실행 요청)을 수신할 수 있다. 예를 들어 상기 어플리케이션은 게임 어플리케이션 또는 성 능 데이터의 수집과 성능 최적화가 요구되는 어플리케이션일 수 있다.동작 1004에서 프로세서는 상기 실행 요청에 응답하여 통신 모듈을 통해 서버에게 상기 어플리 케이션이 지정된 종류(예를 들어 게임 어플리케이션)인지를 확인하기 위한 메타데이터 요청을 전송하고 상기 메 타데이터 요청에 따라 서버로부터 상기 어플리케이션과 관련된 메타데이터를 수신할 수 있다. 일 실시예에 서 프로세서는 상기 어플리케이션의 실행 요청에 따라 또는 상기 어플리케이션의 설치시에 상기 메타데이 터를 서버로부터 획득할 수 있다. 동작 1006에서 프로세서는 상기 메타데이터를 기반으로 상기 어플리케이션이 지정된 종류, 즉 게임 어플리 케이션인지를 판단할 수 있다. 만일 게임 어플리케이션이 아니면 동작 1022에서 프로세서는 통상의 방식에 따라 상기 어플리케이션을 실행할 수 있다. 반면 게임 어플리케이션이면 프로세서는 동작 1008로 진행할 수 있다. 동작 1008에서 프로세서는 상기 메타데이터에 포함된 제1 성능 파라미터를 식별하고 상기 제1 성능 파라미 터에 기반하여 상기 어플리케이션을 실행할 수 있다. 일 예로서 상기 제1 성능 파라미터는 프로세서 클럭(예를 들어 CPU 클럭 및/또는 GPU 클럭)을 포함할 수 있다. 동작 1010에서 프로세서는 상기 제1 성능 파라미터에 기반하여 상기 어플리케이션이 실행되는 동안 주어진 조건(예를 들어 주기적으로)에 따라 상기 어플리케이션의 실행과 관련된 성능 데이터를 수집할 수 있다. 상기 수집된 성능 데이터는 전자 장치의 메모리(예를 들어 성능 데이터베이스)에 저장될 수 있다. 동작 1012에서 프로세서는 주어진 조건(예를 들어 주기적, 사용자/운영자의 요청, 또는 상기 어플리케이션 의 실행/업데이트/종료)에 따라 성능 데이터의 분석 및/또는 성능 파라미터의 최적화가 요구된다고 판단되는 시 점에서 상기 성능 데이터를 분석하여 특징값들을 추출하고, 상기 특징값들에 기반하여 상기 어플리케이션이 실 제로 플레이되는 인플레이 구간을 식별할 수 있다. 동작 1014에서 프로세서는 상기 식별된 인플레이 구간 에 대응하는 성능 데이터(및/또는 특징값들)를 인플레이 데이터로서 판단할 수 있다. 동작 1016에서 프로세서는 상기 보고된 성능 데이터 중 인플레이 구간의 성능 데이터(예를 들어 인플레이 데이터)에 기반하여 산출된 제2 성능 파라미터를 획득할 수 있다. 일 실시예에서 프로세서는 동작 1014에 서 선별된 인플레이 구간의 성능 데이터(예를 들어 인플레이 데이터)를 기반으로 상기 제2 성능 파라미터를 직 접 산출할 수 있다. 일 실시예에서 프로세서는 동작 1014에서 선별된 인플레이 구간의 성능 데이터(예를 들어 인플레이 데이터)를 서버로 보고하고, 상기 인플레이 데이터를 기반으로 산출된 제2 성능 파라미터를 서버로부터 수신할 수 있다. 일 실시예에서 프로세서는 상기 어플리케이션이 실행중인 동안 상기 성능 데이터를 수집하고 보고하는 주 기보다 더 긴 주기에 따라 또는 주어진 조건에 따라 상기 제2 성능 파라미터를 획득할 수 있다. 일 실시예에서 프로세서는 상기 어플리케이션의 종료시, 또는 다음 실행시에 상기 제2 성능 파라미터를 획득할 수 있다. 동작 1018에서 프로세서는 상기 제2 성능 파라미터를 적용하여 상기 어플리케이션을 실행할 수 있다. 일 실시예에서 프로세서는 상기 제2 성능 파라미터에 포함된 프로세서 클럭(예를 들어 CPU 클럭 및/또는 GPU 클럭)에 따라 동작하면서 상기 어플리케이션을 실행할 수 있다. 일 실시예에서 프로세서는 상기 어플리케 이션을 실행하는 동안 상기 제2 성능 파라미터를 획득하고 상기 제2 성능 파라미터를 적용할 수 있다. 일 실시 예에서 프로세서는 상기 어플리케이션의 다음 실행시 상기 제2 성능 파라미터를 적용할 수 있다. 동작 1020에서 프로세서는 상기 어플리케이션의 종료 요청(예를 들어 사용자 입력 또는 지정된 조건에 따 른 자동 종료 요청)이 수신되는지를 판단할 수 있다. 만일 상기 어플리케이션이 종료되지 않는 경우 프로세서 는 동작 1010으로 복귀하여 이후 동작들(예를 들어 동작 1010, 1012, 1014, 1016, 및 1018)을 반복할 수 있다. 반면 상기 어플리케이션의 종료 요청이 수신된 경우 프로세서는 상기 어플리케이션의 실행을 종료할 수 있다. 일 실시예에서 프로세서는 상기 어플리케이션의 종료시 상기 제2 성능 파라미터에 따른 성능 데 이터를 서버로 보고할 수 있다. 하기에서는 전자 장치에서 어플리케이션의 실행과 관련된 성능 데이터로부터 추출한 특징값들을 기반으로 인플레이 구간을 식별하는 다양한 실시예들을 설명할 것이다. 하기에서는 설명의 편의를 위해 서버의 프로 세서에 의해 수행되는 동작들을 설명할 것이나, 변형된 실시예에서 후술되는 동작들은 전자 장치의 프로세서에 의해 실행될 수 있으며, 이에 제한되지 않는다. 일 실시예에서 전자 장치에서 어플리케이션이 실행중인 동안 수집되는 성능 데이터로부터 하기와 같은 특 징값들 중 적어도 하나가 서버의 프로세서(예를 들어 데이터 분류 모듈의 특징값 추출 모듈)에 의해 추출될 수 있다. - upload_bytes: 게임 세션이 유지되는 동안 네트워크(예를 들어 네트워크를 통해 게임 서버로 업로드된 데이터 양을 나타낸다. - max_battery_pct_minus_battery_pct: 게임 세션 동안 최대 배터리 퍼센트와 특정 시점(예를 들어 해당 성능 데이터(즉 배터리 퍼센트)가 수집되는 현재 시점)의 배터리 퍼센트 간의 차이를 나타낸다. - pst_minus_min_pst: 특정 시점에서 전자 장치의 표면 온도와 게임 세션 동안 최소 표면 온도간의 차이를 나타낸다. - fps_stability: 게임 세션 동안 FPS가 얼마나 변동(variability)이 있었는지를 나타내는 FPS의 안정도이다. 이 값이 높을수록 FPS가 변화없이 안정적임을 의미할 수 있다. 0과 100 사이의 값일 수 있다. - time_since_played: 게임 어플리케이션을 얼마나 오래 플레이했는지를 나타낸다. 게임 세션이 시작된 이후로 부터의 시간을 초 단위로 나타낼 수 있다. - max_pst_minus_pst: 게임 세션 동안의 최대 표면 온도와 특정 시점에서 전자 장치의 표면 온도 간의 퍼 센트 차이를 나타낸다. - battery_pct: 전자 장치의 배터리 퍼센트를 나타낸다. - reverse_time_since_played: 게임 세션이 시작된 이후로부터의 시간을 역순으로 계산한 초 단위의 값이다. - cpu_limit_agg_std: 게임 세션 동안의 CPU 최대 주파수(max frequency)에 대한 표준 편차를 나타낸다. - cpu_usage: 게임 세션 동안의 CPU 사용량의 평균을 나타낸다. - pst_agg_skew: 게임 세션 동안 전자 장치의 표면 온도에 대한 비대칭도(skewness)를 나타낼 수 있다. - pst_diff_-30: 특정 시점의 표면 온도와 30초 이후의 표면 온도 간의 차이를 나타낸다. - cur_fps_variability_pct_chg_-5_next_10_max: 특정 시점의 FPS 변동성(예를 들어 fps_variability)과 5초 이후의 FPS 변동성 간 퍼센트 변화 값을 나타내는 10개의 값들 중 최대값을 나타낸다. - fps_pct_chg_-5_next_30_max: 특정 시점의 FPS와 5초 이후의 FPS 간 퍼센트 변화 값을 나타내는 30개의 값들 중 최대값을 나타낸다. - fps_diff_-5_next_30_max: 특정 시점의 FPS와 5초 이후의 FPS 간 차이를 나타내는 30개의 값들 중 최대값을 나타낸다. - max_cur_fps_variability_minus_cur_fps_variability: 게임 세션 동안의 최대 FPS 변동성과 현재 시점의 FPS 변동성 간의 차이를 나타낸다. - cur_fps_stability_agg_mean: 게임 세션 동안 FPS 안정도의 평균을 나타낸다. - cur_fps_variability_pct_chg_-5_next_20_max: 특정 시점의 FPS 변동성 퍼센트과 5초 이후의 변동성 퍼센트 간 차이를 나타내는 20개의 값들 중 최대값을 나타낸다. - fps_prev_30_min: 특정 시점의 FPS와 이전 30개 중 최소값을 나타낸다. - fps_agg_skew: 게임 세션 동안의 FPS의 비대칭도를 나타낸다. - mean_battery_pct_minus_battery_pct: 게임 세션 동안의 평균 배터리 퍼센트와 특정 시점의 배터리 퍼센트 간의 차이를 나타낸다. 후술되는 도 11 내지 도 27에서는 서버의 프로세서에 의해 특징값들을 추출하고 인플레이 구간의 데 이터를 식별하는 동작(예를 들어 동작 906))의 예시들을 설명할 것이나, 후술되는 동작들은 전자 장치의 프로세서에 의해 수행될 수 있으며(예를 들어 동작 1012 및 1014), 하기된 설명에 의해 한정되지 않는다. 도 11은 일 실시예에 따라 업로드 데이터와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 upload_bytes를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE(kernel density estimation))을 나타낼 수 있다. 도 11을 참조하면, 전자 장치의 프로세서(예를 들어 성능 튜너)에서 어플리케이션이 실행됨에 따라 게임 세션 동안 성능 데이터의 값들이 시간 순서대로(또는 실시간으로) 수집되어 서버의 프로세서(예를 들어 성능 데이터 수집 모듈)로 보고될 수 있다. 서버의 프로세서(예를 들어 데이터 분류 모듈)는 상기 성능 데이터로부터 추출된 특징값들(예를 들어 upload_bytes)을 이용하여 인플레이 구 간의 분포도와 낫-인플레이 구간의 분포도를 획득할 수 있고, 인플레이 구간의 분포도를 가 지는 성능 데이터의 값들을 성능 분석에 이용하도록 결정할 수 있다. 서버의 프로세서(예를 들어 데 이터 분류 모듈)는 어플리케이션이 시작되고 소정 시점 이후부터는 인플레이 구간의 upload_bytes 분포도 가 낫-인플레이 구간에 비해 더 큰 값들을 가짐을 식별할 수 있다. 따라서 서버의 프로세서(예 를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 업로드 데이터의 양을 upload_bytes로 저장하고 상기 upload_bytes가 주어진 임계값을 초과하는 경우 상기 upload_bytes를 인플 레이 구간의 데이터(즉 인플레이 데이터)로 분류할 수 있다. 도 12는 일 실시예에 따라 배터리 퍼센트와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 max_battery_pct_minus_battery_pct를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 12를 참조하면, 전자 장치(예를 들어 성능 튜너)에서 어플리케이션이 실행됨에 따라 게임 세션 동 안 성능 데이터의 값들이 시간 순서대로(또는 실시간으로) 수집되어 서버의 프로세서(예를 들어 성능 데이터 수집 모듈)로 보고될 수 있다. 프로세서(예를 들어 데이터 분류 모듈)는 상기 성능 데이 터로부터 추출된 특징값들(예를 들어 max_battery_pct_minus_battery_pct)을 이용하여 인플레이 구간의 분포도 와 낫-인플레이 구간의 분포도를 획득할 수 있고, 인플레이 구간의 분포도를 가지는 성능 데 이터의 값들을 성능 분석에 이용하도록 결정할 수 있다. 서버의 프로세서(예를 들어 데이터 분류 모 듈)는 인플레이 구간의 max_battery_pct_minus_battery_pct 분포도가 낫-인플레이 구간에 비해 더 큰 값들을 가짐을 식별할 수 있다. 따라서 서버의 프로세서(예를 들어 데이터 분류 모듈)는 성 능 데이터를 기반으로 계산된 특정 시점(예를 들어 현재 시점)의 max_battery_pct_minus_battery_pct가 주어진 임계값을 초과하는 경우 상기 max_battery_pct_minus_battery_pct를 인플레이 데이터로 분류할 수 있다. 도 13은 일 실시예에 따라 표면 온도와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 pst_minus_min_pst를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 13을 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 pst_minus_min_pst)을 이용하여 인플레이 구간의 pst_minus_min_pst 분포도가 낫-인플레이 구간의 분포도에 비해 큰 값들을 가짐을 식별할 수 있다. 서버의 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 표면 온도와, 게임 세션 동안의 최소 표면 온도 간의 차이를 계산하여 pst_minus_min_pst로 저장 하고, 상기 pst_minus_min_pst가 주어진 임계값을 초과하는 경우 상기 pst_minus_min_pst를 인플레이 데이터로 분류할 수 있다. 도 14는 일 실시예에 따라 FPS와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 fps_stability를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 14를 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 fps_stability)을 이용하여 인플레이 구간의 fps_stability 분포도가 낫-인플레이 구간의 분포도에 비해 작은 값들을 가짐을 식별할 수 있다. 일 실시예에서 서버의 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 FPS 안정도를 fps_stability로 저장하고, 상기 fps_stability가 주어진 임계값보다 작은 경우 상 기 fps_stability를 인플레이 데이터로 분류할 수 있다. 도 15는 일 실시예에 따라 게임 플레이 시간과 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축 은 time_since_played를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 15를 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 time_since_played)을 이용하여 인플레이 구간의 time_since_played 분포도가 낫-인플레이 구간의 분포도에 비해 큰 값들을 가짐을 식별할 수 있다. 일 실시예에서 서버의 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 time_since_played를 계산하고, 상기 time_since_played가 주어진 임계값을 초과 하는 경우 상기 특정 시점을 인플레이 구간으로 분류하여, 상기 특정 시점에서 수집된 성능 데이터를 인플레이 데이터로 판단할 수 있다.도 16은 일 실시예에 따라 표면 온도의 변화와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축 은 max_pst_minus_pst를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 16을 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 max_pst_minus_pst)을 이용하여 인플레이 구간의 max_pst_minus_pst 분포도가 낫-인플레이 구간의 분포도에 비해 대체적으로 작은 값들을 가짐을 식 별할 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 max_pst_minus_pst를 계산하고, 상기 max_pst_minus_pst가 주어진 임계값보다 작 은 경우 상기 max_pst_minus_pst를 인플레이 데이터로 판단할 수 있다. 도 17은 일 실시예에 따라 배터리 퍼센트와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 battery_pct를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 17을 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 battery_pct)을 이용하여 인플레이 구간의 battery_pct 분포 도가 낫-인플레이 구간의 분포도에 비해 대체적으로 작은 값들을 가짐을 식별할 수 있다. 일 실시 예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 battery_pct를 계산하고, 상기 battery_pct가 주어진 임계값보다 작은 경우 상기 battery_pct를 인플 레이 데이터로 판단할 수 있다. 도 18은 일 실시예에 따라 게임 플레이 시간과 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축 은 reverse_time_since_played를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 18을 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 reverse_time_since_played)을 이용하여 인플레이 구간의 reverse_time_since_played 분포도가 낫-인플레이 구간의 분포도에 비해 대체적으로 큰 값들을 가 짐을 식별할 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으 로 특정 시점(예를 들어 현재 시점)의 reverse_time_since_played를 계산하고, 상기 reverse_time_since_played가 주어진 임계값보다 큰 경우 상기 특정 시점을 인플레이 구간으로 분류하여, 상기 특정 시점에서 수집된 성능 데이터를 인플레이 데이터로 판단할 수 있다. 도 19는 일 실시예에 따라 프로세서 주파수와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 cpu_limit_agg_std를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 19를 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 cpu_limit_agg_std)을 이용하여 인플레이 구간의 cpu_limit_agg_std 분포도가 낫-인플레이 구간의 분포도에 비해 대체적으로 큰 값들을 가짐을 식별 할 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 cpu_limit_agg_std를 계산하고, 상기 cpu_limit_agg_std가 주어진 임계값보다 큰 경우 상기 cpu_limit_agg_std를 인플레이 데이터로 판단할 수 있다. 도 20은 일 실시예에 따라 프로세서 사용량과 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 cpu_usage를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 20을 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 cpu_usage)을 이용하여 인플레이 구간의 cpu_usage 분포도 가 낫-인플레이 구간의 분포도에 비해 대체적으로 큰 값들을 가짐을 식별할 수 있다. 일 실시예에 서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 cpu_usage를 획득하고, 상기 cpu_usage가 주어진 임계값보다 큰 경우 상기 cpu_usage를 인플레이 데이 터로 판단할 수 있다. 도 21은 일 실시예에 따라 표면 온도의 비대칭도와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 pst_agg_skew를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 21을 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 pst_agg_skew)을 이용하여 인플레이 구간의 pst_agg_skew 분 포도가 낫-인플레이 구간의 분포도에 비해 대체적으로 작은 값들을 가짐을 식별할 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현 재 시점)의 pst_agg_skew를 계산하고, 상기 pst_agg_skew가 주어진 임계값보다 작은 경우 상기 pst_agg_skew를 인플레이 데이터로 판단할 수 있다. 도 22는 일 실시예에 따라 FPS 변동성과 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 cur_fps_variability_pct_chg_-5_next_10_max 를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 22를 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 cur_fps_variability_pct_chg_-5_next_10_max)을 이용하여 인플레이 구간의 cur_fps_variability_pct_chg_-5_next_10_max 분포도가 낫-인플레이 구간의 분포도 에 비해 대체적으로 작은 값들을 가짐을 식별할 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점(예를 들어 현재 시점)의 cur_fps_variability_pct_chg_- 5_next_10_max를 계산하고, 상기 cur_fps_variability_pct_chg_-5_next_10_max가 주어진 임계값보다 작은 경우 상기 cur_fps_variability_pct_chg_-5_next_10_max를 인플레이 데이터로 판단할 수 있다. 도 23은 일 실시예에 따라 FPS 변화와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 fps_diff_-5_next_30_max를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 23을 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 fps_diff_-5_next_30_max)을 이용하여 인플레이 구간의 fps_diff_-5_next_30_max 분포도가 낫-인플레이 구간의 분포도에 비해 대체적으로 작은 값들을 가 짐을 식별할 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으 로 특정 시점(예를 들어 현재 시점)의 fps_diff_-5_next_30_max를 계산하고, 상기 fps_diff_-5_next_30_max가 주어진 임계값보다 작은 경우 상기 fps_diff_-5_next_30_max를 인플레이 데이터로 판단할 수 있다. 도 24는 일 실시예에 따라 FPS와 관련된 특징값의 분포를 나타낸 것이다. 도시된 그래프에서 X축은 fps_prev_30_min를 나타낼 수 있고, Y축은 분포도(예를 들어 KDE)을 나타낼 수 있다. 도 24를 참조하면, 서버의 프로세서(예를 들어 데이터 분류 모듈)는 전자 장치로부터 보고 된 성능 데이터로부터 추출된 특징값들(예를 들어 fps_prev_30_min)을 이용하여 인플레이 구간의 fps_prev_30_min 분포도가 낫-인플레이 구간의 분포도에 비해 대체적으로 큰 값들을 가짐을 식별할 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는 성능 데이터를 기반으로 특정 시점 (예를 들어 현재 시점)의 fps_prev_30_min를 계산하고, 상기 fps_prev_30_min가 주어진 임계값보다 큰 경우 상 기 fps_prev_30_min를 인플레이 데이터로 판단할 수 있다. 도 25a 및 도 25b는 일 실시예에 따라 FPS 데이터와 관련된 특징값들을 시간 순서대로 나타낸 차트들이다. 도 25a를 참조하면, 차트는 게임 세션 동안 성능 데이터의 보고시간을 나타내는 data_timestamp에 따른 특징값들, 예를 들어 fps, fps_next_10_min, 및 fps_prev_10_min의 변화를 나타낸 것이다. 여기서 fps는 특정 시점의 FPS를 나타내고, fps_next_10_min는 이후 10개의 FPS 값들 중 최소값을 나타내며, fps_prev_10_min는 이전 10개의 FPS 값들 중 최소값을 나타낸다. 도시한 바와 같이 인플레이 구간과 낫-인플레이 구간이 전환되는 시점에서 상기 특징값들이 현저하게 변화되는 것을 확인할 수 있다. 서버의 프로세서(예를 들어 데이 터 분류 모듈)는 상기 특징값들, 예를 들어 fps, fps_next_10_min, 및 fps_prev_10_min의 변화를 추적하 여 상기 특징값들의 변화가 감지되는 시점에서 인플레이 구간의 시작 또는 종료를 판정하고, 인플레이 구간 내 에서 수집된 성능 데이터를 인플레이 데이터로 결정할 수 있다. 도 25b를 참조하면, 차트는 게임 세션 동안 data_timestamp에 따른 특징값들, 예를 들어 fps, fps_diff_5_prev_10_mean, 및 fps_diff_-5_next_10_mean의 변화를 나타낸 것이다. 여기서 fps_diff_5_prev_10_mean은 특정 시점의 FPS와 5초 이전의 FPS 간 차이를 나타내는 10개의 값들에 대한 평균값 을 나타내며, fps_diff_-5_next_10_mean는 특정 시점의 FPS와 5초 이후의 FPS 간 차이를 나타내는 10개의 값들 에 대한 평균값을 나타낸다. 도시한 바와 같이 인플레이 구간과 낫-인플레이 구간이 전환되는 시점에서 상기 특 징값들이 현저하게 변화되는 것을 확인할 수 있다. 서버의 프로세서(예를 들어 데이터 분류 모듈 )는 상기 특징값들, 예를 들어 fps, fps_diff_5_prev_10_mean, 및 fps_diff_-5_next_10_mean의 변화를 추 적하여 상기 특징값들의 변화가 감지되는 시점에서 인플레이 구간의 시작 또는 종료를 판정하고, 인플레이 구간 내에서 수집된 성능 데이터를 인플레이 데이터로 결정할 수 있다.도 26은 일 실시예에 따라 인플레이 구간의 판단과 관련되는 특징값들의 중요도를 나타낸 것이다. 도 26을 참조하면, upload_bytes와 20개의 특징값들에 대한 정규화 중요도(normalized importance)가 도시되어 있다. 서버의 프로세서(예를 들어 데이터 분류 모듈)는 tabular 형식의 데이터에서 높은 성능을 낼 수 있는 부스팅 트리 기반의 기계 학습 모델을 사용하여 성능 데이터를 분석할 수 있다. 부스팅 트리 기반의 기계 학습 모델은 특징값들의 중요도를 계산하고 상기 중요도를 이용하여 모델링 성능을 개선하거나 의사 결정 에 사용될 수 있다. 프로세서(예를 들어 데이터 분류 모듈)는 상기 계산된 중요도에 따라 상대적으로 중요도가 높은 소정 개수의 특징값들을 사용하여 인플레이 구간을 식별할 수 있다. 도 27은 일 실시예에 따라 인플레이 구간의 판단과 관련되는 특징값들의 상관관계(correlation)를 나타내는 열 지도(heatmap)를 도시한 것이다. 도 27을 참조하면, 열지도는 서버의 프로세서(예를 들어 데이터 분류 모듈)에서 인플레이 구간의 판단에 사용하기 위해 추출할 수 있는 특징값들 간의 상관관계를 나타낼 수 있다. 일 실시예에서 프로세 서(예를 들어 데이터 분류 모듈)는, 인플레이 구간의 판단을 나타내는 파라미터인 in_play와 양의 상 관관계를 가지는 특징값들(예를 들어 upload_bytes, max_battery_pct_minus_battery_pct, 또는 pst_minus_min_pst)은 그 값이 높을수록(예를 들어 주어진 임계값을 초과하는 경우) 인플레이 데이터일 확률이 높다고 판단할 수 있다. 일 실시예에서 프로세서(예를 들어 데이터 분류 모듈)는, in_play와 음의 상 관관계를 가지는 특징값들(예를 들어 fps_stability, max_pst_minus_pst, battery_pct, 또는 pst_agg_skew)은 그 값이 낮을수록(예를 들어 주어진 임계값보다 작은 경우) 인플레이 데이터일 확률이 높다고 판단할 수 있다. 상술한 실시예들에서 설명한 바와 같이 서버의 프로세서(예를 들어 데이터 분류 모듈)는 인플레 이 구간에 속하는 성능 데이터(예를 들어 인플레이 데이터)를 식별할 수 있고, 프로세서(예를 들어 성능 분석 모듈)은 상기 인플레이 데이터를 기반으로 전자 장치를 위한 성능 파라미터를 결정할 수 있다. 다양한 실시예들에 따른 전자 장치는, 통신 모듈, 디스플레이, 메모리, 및 상기 통신 모듈, 상기 디스플레이, 및 상기 메모리와 작동적으로 연결되는 적어도 하나의 프로세서를 포함할 수 있고, 상기 적어도 하나의 프로세서는, 어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상 기 어플리케이션을 실행하고, 상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데 이터를 수집하고, 상기 성능 데이터를 상기 통신 모듈을 통해 서버로 보고하고, 상기 성능 데이터 중 상기 어플리케이션의 인플레이 구간에 대응하는 인플레이 데이터를 기반으로 생성된 제2 성능 파라미터를 상기 서버 로부터 수신하고, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하도록 구성될 수 있다. 일 실시예에서 상기 성능 데이터는, 상기 어플리케이션의 실행 화면이 상기 디스플레이에 표시되는 동안의 FPS(frame per second), 표면 온도, 프로세서 부하, 네트워크 입출력, 상기 디스플레이의 해상도, 상기 디스플 레이의 주사율 또는 재생율, 상기 디스플레이의 화면 밝기, 또는 상기 전자 장치가 접속중인 네트워크의 종류 중 적어도 하나를 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터는, 상기 어플리케이션이 실행된 이후 미리 정해지는 길이의 시간 구간과, 상기 어플리케이션이 종료되기 이전 미리 정해지는 길이의 시간 구간을 제외한 나머지 시간 구간에서 수집된 상기 성능 데이터의 제1 요소를 기반으로 생성될 수 있다. 일 실시예에서 상기 제2 성능 파라미터는, 상기 성능 데이터의 제2 요소의 현재값과 상기 어플리케이션에 관련 된 세션 도중 상기 제2 요소의 최소값 간의 차이에 따라 상기 인플레이 구간에 대응하는 것으로 식별된 상기 현 재값을 기반으로 생성될 수 있다. 일 실시예에서 상기 제2 성능 파라미터는, 상기 어플리케이션과 관련된 세션 도중 상기 성능 데이터의 제3 요소 의 변화에 따라 상기 인플레이 구간에 대응되는 것으로 식별된 상기 성능 데이터의 제4 요소를 기반으로 생성될 수 있다. 일 실시예에서 상기 제2 성능 파라미터는, 상기 성능 데이터 중 상기 인플레이 구간의 판단과 관련된 중요도가 상대적으로 높은 적어도 하나의 제5 요소를 기반으로 생성될 수 있다. 다양한 실시예들에 따른 서버는, 통신 모듈, 메모리, 및 상기 통신 모듈 및 상기 메모리와 작동 적으로 연결되는 적어도 하나의 프로세서를 포함할 수 있고, 상기 적어도 하나의 프로세서는, 상기 통신 모듈을 통해 전자 장치로부터 어플리케이션의 메타데이터 요청을 수신하고, 상기 어플리케이션을 위한 제1 성능 파라미터를 포함하는 메타데이터를 상기 통신 모듈을 통해 상기 전자 장치로 전송하고, 상기 전자 장치에서 상기 어플리케이션이 실행되는 동안 상기 통신 모듈을 통해 상기 어플리케이션의 실행과 연관된 성능 데이터를 수 신하고, 상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간을 식별하고, 상기 식별된 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값 들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터를 산출하고, 상기 제2 성능 파라 미터를 상기 통신 모듈을 통해 상기 전자 장치로 전송하도록 구성될 수 있다. 일 실시예에서 상기 성능 데이터는, 상기 어플리케이션과 관련된 FPS(frame per second), 표면 온도, 프로세서 부하, 네트워크 입출력, 상기 디스플레이의 해상도, 상기 디스플레이의 주사율 또는 재생율, 상기 디스플레이의 화면 밝기, 또는 상기 전자 장치가 접속중인 네트워크의 종류 중 적어도 하나를 포함할 수 있다. 일 실시예에서 상기 적어도 하나의 프로세서는, 상기 어플리케이션이 실행된 이후 미리 정해지는 길이의 시간 구간과, 상기 어플리케이션이 종료되기 이전 미리 정해지는 길이의 시간 구간을 낫-인플레이 구간으로 판단하고, 상기 낫-인플레이 구간을 제외한 나머지 시간 구간을 상기 인플레이 구간으로 판단하며, 상기 인플레 이 구간에서 수집된 상기 성능 데이터의 제1 요소를 기반으로 상기 제2 성능 파라미터를 생성하도록 구성될 수 있다. 일 실시예에서 상기 적어도 하나의 프로세서는, 상기 성능 데이터의 제2 요소의 현재값과 상기 어플리케이션에 관련된 세션 도중 상기 제2 요소의 최소값 간의 차이에 따라 상기 현재값이 상기 인플레이 구간에 속하는지를 판단하고, 상기 현재값이 상기 인플레이 구간에 대응하는 것으로 식별된 경우 상기 현재값을 기반으로 상기 제2 성능 파라미터를 생성하도록 구성될 수 있다. 일 실시예에서 상기 적어도 하나의 프로세서는, 상기 어플리케이션과 관련된 세션 도중 상기 성능 데이터의 제3 요소의 변화가 감지되는 시점에서 상기 인플레이 구간의 시작 또는 종료를 판정하고, 상기 판정 결과에 따라 상 기 인플레이 구간을 식별하고, 상기 식별된 인플레이 구간에 대응되는 상기 성능 데이터의 제4 요소를 기반으로 상기 제2 성능 파라미터를 생성하도록 구성될 수 있다. 일 실시예에서 상기 적어도 하나의 프로세서는, 상기 성능 데이터 중 상기 어플리케이션의 세션 동안 제1 시점 에서 상기 전자 장치에서 네트워크를 통해 전송된 업로드 데이터 양이 제1 임계값을 초과하는 경우 상기 업로드 데이터 양을 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하도록 구성될 수 있다. 일 실시예에서 상기 적어도 하나의 프로세서는, 상기 세션 동안 상기 전자 장치의 최대 배터리 퍼센트와 제2 시 점의 현재 배터리 퍼센트 간의 차이가 제2 임계값을 초과하는 경우 상기 현재 배터리 퍼센트를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하도록 구성될 수 있다. 일 실시예에서 상기 적어도 하나의 프로세서는, 상기 세션 동안 상기 전자 장치의 최소 표면 온도와 제3 시점의 현재 표면 온도 간의 차이가 제3 임계값을 초과하는 경우 상기 현재 표면 온도를 상기 인플레이 구간에 대응하 는 인플레이 데이터로 판단하도록 구성될 수 있다. 일 실시예에서 상기 적어도 하나의 프로세서는, 상기 세션 동안 제4 시점의 FPS(frame per second)가 제4 임계 값보다 작은 경우 상기 FPS를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하도록 구성될 수 있다. 다양한 실시예들에 따른 전자 장치는, 통신 모듈, 디스플레이, 메모리, 및 상기 통신 모듈, 상기 디스플레이, 및 상기 메모리와 작동적으로 연결되는 적어도 하나의 프로세서를 포함할 수 있고, 상기 적어도 하나의 프로세서는, 어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상 기 어플리케이션을 실행하고, 상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데 이터를 수집하고, 상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 결정하고, 상기 성능 데이 터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터를 획득하 고, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하도록 구성될 수 있다. 다양한 실시예들에 따른 전자 장치의 동작 방법은, 어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작과, 상기 어플리케이션을 실행하는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 수집하는 동작과, 상기 성능 데이터를 서버로 보고하는 동작과, 상기 성능 데이터 중 상기 어플리케이션의 인플레이 구간에 대응하는 인플레이 데이터를 기반으로 생성된 제2 성능 파라미터를 상기 통신 모듈을 통해 상기 서버로부터 수신하는 동작과, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작을 포함할 수 있다.일 실시예에서 상기 성능 데이터는, 상기 어플리케이션의 실행 화면이 상기 디스플레이에 표시되는 동안의 FPS(frame per second), 표면 온도, 프로세서 부하, 네트워크 입출력, 상기 디스플레이의 해상도, 상기 디스플 레이의 주사율 또는 재생율, 상기 디스플레이의 화면 밝기, 또는 상기 전자 장치가 접속중인 네트워크의 종류 중 적어도 하나를 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터는, 상기 어플리케이션이 실행된 이후 미리 정해지는 길이의 시간 구간과, 상기 어플리케이션이 종료되기 이전 미리 정해지는 길이의 시간 구간을 제외한 나머지 시간 구간에서 수집된 상기 성능 데이터의 제1 요소를 기반으로 생성될 수 있다. 일 실시예에서 상기 제2 성능 파라미터는, 상기 성능 데이터의 제2 요소의 현재값과 상기 어플리케이션에 관련 된 세션 도중 상기 제2 요소의 최소값 간의 차이에 따라 상기 인플레이 구간에 대응하는 것으로 식별된 상기 현 재값을 기반으로 생성될 수 있다. 일 실시예에서 상기 제2 성능 파라미터는, 상기 어플리케이션과 관련된 세션 도중 상기 성능 데이터의 제3 요소 의 변화에 따라 상기 인플레이 구간에 대응되는 것으로 식별된 상기 성능 데이터의 제4 요소를 기반으로 생성될 수 있다. 일 실시예에서 상기 제2 성능 파라미터는, 상기 성능 데이터 중 상기 인플레이 구간의 판단과 관련된 중요도가 상대적으로 높은 적어도 하나의 제5 요소를 기반으로 생성될 수 있다. 다양한 실시예들에 따른 서버의 동작 방법은, 전자 장치로부터 어플리케이션의 메타데이터 요청을 수신하는 동 작과, 상기 어플리케이션을 위한 제1 성능 파라미터를 포함하는 메타데이터를 상기 전자 장치로 전송하는 동작과, 상기 전자 장치에서 상기 어플리케이션이 실행되는 동안 상기 어플리케이션의 실행과 연관된 성능 데이터를 상기 전자 장치로부터 수신하는 동작과, 상기 성능 데이터로부터 추출된 상기 어플리케이션의 인 플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간을 식별하는 동작과, 상기 식별된 인플레 이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이션의 성능을 개선하기 위한 제2 성능 파라미터를 산출하는 동작과, 상기 제2 성능 파라미터를 상기 전자 장치로 전송하는 동작 을 포함할 수 있다. 일 실시예에서 상기 성능 데이터는, 상기 어플리케이션과 관련된 FPS(frame per second), 표면 온도, 프로세서 부하, 네트워크 입출력, 상기 디스플레이의 해상도, 상기 디스플레이의 주사율 또는 재생율, 상기 디스플레이의 화면 밝기, 또는 상기 전자 장치가 접속중인 네트워크의 종류 중 적어도 하나를 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터를 산출하는 동작은, 상기 어플리케이션이 실행된 이후 미리 정해지는 길 이의 시간 구간과, 상기 어플리케이션이 종료되기 이전 미리 정해지는 길이의 시간 구간을 낫-인플레이 구간으 로 판단하는 동작과, 상기 낫-인플레이 구간을 제외한 나머지 시간 구간을 상기 인플레이 구간으로 판단하는 동 작과, 상기 인플레이 구간에서 수집된 상기 성능 데이터의 제1 요소를 기반으로 상기 제2 성능 파라미터를 생성 하는 동작을 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터를 산출하는 동작은, 상기 성능 데이터의 제2 요소의 현재값과 상기 어플 리케이션에 관련된 세션 도중 상기 제2 요소의 최소값 간의 차이에 따라 상기 현재값이 상기 인플레이 구간에 속하는지를 판단하는 동작과, 상기 현재값이 상기 인플레이 구간에 대응하는 것으로 식별된 경우 상기 현재값을 기반으로 상기 제2 성능 파라미터를 생성하는 동작을 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터를 산출하는 동작은, 상기 어플리케이션과 관련된 세션 도중 상기 성능 데이터의 제3 요소의 변화가 감지되는 시점에서 상기 인플레이 구간의 시작 또는 종료를 판정하는 동작과, 상기 판정 결과에 따라 식별된 상기 인플레이 구간에 대응되는 상기 성능 데이터의 제4 요소를 기반으로 상기 제2 성 능 파라미터를 생성하는 동작을 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터를 산출하는 동작은, 상기 성능 데이터 중 상기 어플리케이션의 세션 동 안 제1 시점에서 상기 전자 장치에서 네트워크를 통해 전송된 업로드 데이터 양이 제1 임계값을 초과하는 경우 상기 업로드 데이터 양을 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하는 동작을 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터를 산출하는 동작은, 상기 세션 동안 상기 전자 장치의 최대 배터리 퍼센 트와 제2 시점의 현재 배터리 퍼센트 간의 차이가 제2 임계값을 초과하는 경우 상기 현재 배터리 퍼센트를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하는 동작을 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터를 산출하는 동작은, 상기 세션 동안 상기 전자 장치의 최소 표면 온도와 제3 시점의 현재 표면 온도 간의 차이가 제3 임계값을 초과하는 경우 상기 현재 표면 온도를 상기 인플레이 구 간에 대응하는 인플레이 데이터로 판단하는 동작을 포함할 수 있다. 일 실시예에서 상기 제2 성능 파라미터를 산출하는 동작은, 상기 세션 동안 제4 시점의 FPS(frame per second) 가 제4 임계값보다 작은 경우 상기 FPS를 상기 인플레이 구간에 대응하는 인플레이 데이터로 판단하는 동작을 포함할 수 있다. 다양한 실시예들에 따른 전자 장치의 동작 방법은, 어플리케이션의 실행 요청에 응답하여 제1 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작과, 상기 어플리케이션을 실행하는 동안 상기 어플리케이션 의 실행과 연관된 성능 데이터를 수집하는 동작과, 상기 성능 데이터로부터 추출된 상기 어플리케이션의 인플레이 구간과 관련되는 특징값들을 기반으로 상기 인플레이 구간에 대응하는 상기 성능 데이터 및/또는 상기 특징값들을 결정하는 동작(1012,1014)과, 상기 성능 데이터 및/또는 상기 특징값들을 기반으로 상기 어플리케이 션의 성능을 개선하기 위한 제2 성능 파라미터를 획득하는 동작과, 상기 제2 성능 파라미터에 기반하여 상기 어플리케이션을 실행하는 동작을 포함할 수 있다. 본 문서에 개시된 다양한 실시예에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들 면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨어 러블 장치, 또는 가전 장치를 포함할 수 있다. 본 개시의 실시예에 따른 전자 장치는 전술한 기기들에 한정되지 않는다. 본 개시의 다양한 실시예 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한정 하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도 면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개 를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\",\"A 또는 B 중 적어도 하나,\"\"A, B 또는 C,\" \"A, B 및 C 중 적어도 하나,\"및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하 는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위해 사 용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구 성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로 등의 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부가 될 수 있다. 예를 들 면, 일 실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형태로 구현될 수 있다. 본 개시의 다양한 실시예는 기기(machine)(예: 전자 장치)에 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장매체 는, 비일시적(non-transitory) 저장매체의 형태 로 제공될 수 있다. 여기서, ‘비일시적’은 저장매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전자 기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장매체에 반영구적으로 저장되는 경우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory (CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복 수의 개체를 포함할 수 있다. 다양한 실시예에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또 는 동작들이 생략되거나, 또는 하나 이상의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통 합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수 의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다. 다양한 실시예에 따르면, 명령들을 저장하고 있는 비휘발성 저장 매체에 있어서, 상기 명령들은 적어도 하나의 프로세서에 의하여 실행될 때에 상기 적어도 하나의 프로세서로 하여금 본 개시에 설명된 실시예들에 따른 적어 도 하나의 동작을 수행하도록 설정된 것일 수 있다. 그리고 본 명세서와 도면에 발명된 본 발명의 실시예들은 본 발명의 실시예에 따른 기술 내용을 쉽게 설명하고 본 발명의 실시예의 이해를 돕기 위해 특정 예를 제시한 것일 뿐이며, 본 발명의 실시예의 범위를 한정하고자 하는 것은 아니다. 따라서 본 발명의 다양한 실시예의 범위는 여기에 발명된 실시예들 이외에도 본 발명의 다양 한 실시예의 기술적 사상을 바탕으로 도출되는 모든 변경 또는 변형된 형태가 본 발명의 다양한 실시예의 범위 에 포함되는 것으로 해석되어야 한다.도면 도면1 도면2 도면3a 도면3b 도면3c 도면3d 도면3e 도면3f 도면4 도면5 도면6 도면7 도면8 도면9 도면10 도면11 도면12 도면13 도면14 도면15 도면16 도면17 도면18 도면19 도면20 도면21 도면22 도면23 도면24 도면25a 도면25b 도면26 도면27"}
{"patent_id": "10-2021-0159283", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시예에 따른 네트워크 환경을 나타내는 도면이다. 도 2는 일 실시예에 따른 전자 장치와 서버의 구성을 설명하기 위한 블록도이다. 도 3a, 도 3b, 도 3c, 도 3d, 도 3e, 및 도 3f(이하 도 3이라 통칭함)는 게임 어플레이션의 다양한 실행 화면들 을 예시한 것이다. 도 4는 게임 어플리케이션의 실행 도중에 수집된 성능 데이터의 변화를 설명하기 위한 도면이다. 도 5는 게임 어플리케이션의 실행 도중에 수집된 성능 데이터의 안정도를 비교하기 위한 도면이다. 도 6은 일 실시예에 따른 전자 장치와 서버 간의 데이터 흐름을 설명하기 위한 도면이다. 도 7은 일 실시예에 따라 전자 장치의 성능 개선을 위한 절차를 설명하기 위한 신호 흐름도이다. 도 8은 일 실시예에 따라 전자 장치에서 성능 데이터를 보고하는 절차를 설명하기 위한 흐름도이다. 도 9는 일 실시예에 따라 서버에서 인플레이 구간을 식별하는 절차를 설명하기 위한 흐름도이다. 도 10은 일 실시예에 따라 전자 장치에서 인플레이 구간을 식별하는 절차를 설명하기 위한 흐름도이다. 도 11은 일 실시예에 따라 업로드 데이터와 관련된 특징값의 분포를 나타낸 것이다. 도 12는 일 실시예에 따라 배터리 퍼센트와 관련된 특징값의 분포를 나타낸 것이다. 도 13은 일 실시예에 따라 표면 온도와 관련된 특징값의 분포를 나타낸 것이다. 도 14는 일 실시예에 따라 FPS와 관련된 특징값의 분포를 나타낸 것이다. 도 15는 일 실시예에 따라 게임 플레이 시간과 관련된 특징값의 분포를 나타낸 것이다.도 16은 일 실시예에 따라 표면 온도의 변화와 관련된 특징값의 분포를 나타낸 것이다. 도 17은 일 실시예에 따라 배터리 퍼센트와 관련된 특징값의 분포를 나타낸 것이다. 도 18은 일 실시예에 따라 게임 플레이 시간과 관련된 특징값의 분포를 나타낸 것이다. 도 19는 일 실시예에 따라 프로세서 주파수와 관련된 특징값의 분포를 나타낸 것이다. 도 20은 일 실시예에 따라 프로세서 사용량과 관련된 특징값의 분포를 나타낸 것이다. 도 21은 일 실시예에 따라 표면 온도의 비대칭도와 관련된 특징값의 분포를 나타낸 것이다. 도 22는 일 실시예에 따라 FPS 안정도와 관련된 특징값의 분포를 나타낸 것이다. 도 23은 일 실시예에 따라 FPS 변화와 관련된 특징값의 분포를 나타낸 것이다. 도 24는 일 실시예에 따라 FPS와 관련된 특징값의 분포를 나타낸 것이다. 도 25a 및 도 25b는 일 실시예에 따라 FPS 데이터와 관련된 특징값들을 시간 순서대로 나타낸 차트들이다. 도 26은 일 실시예에 따라 인플레이 구간의 판단과 관련되는 특징값들의 중요도를 나타낸 것이다. 도 27은 일 실시예에 따라 인플레이 구간의 판단과 관련되는 특징값들의 상관관계(correlation)를 나타내는 열 지도(heatmap)를 도시한 것이다. 도면의 설명과 관련하여, 동일 또는 유사한 구성요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있다."}
