{"patent_id": "10-2021-0112911", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0095091", "출원번호": "10-2021-0112911", "발명의 명칭": "데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법 및 장치", "출원인": "한양대학교 산학협력단", "발명자": "최정욱"}}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "센서로부터 취득한 3차원 공간에 존재하는 객체에 대한 포인트 클라우드(point cloud) 데이터에 대해 복셀화(voxelization)를 수행하여 제1복셀 데이터를 생성하는 제1복셀 데이터 생성 단계;상기 복셀 데이터에 포함되어 있는 포인트들에 대한 특징 정보를 추출하여 상기 포인트들에 대한 특징 정보를포함하고 있는 제2복셀 데이터를 생성하는 제2복셀 데이터 생성 단계;커널(kernel)을 이용하여 상기 제2복셀 데이터에 대해 컨볼루션 연산을 수행하여 특징 맵을 추출하는 컨볼루션연산 단계; 및상기 특징 맵에서 추출된 정보를 기초로 상기 객체에 대한 위치 정보 및 종류 정보를 추출하는 객체 정보 추출단계;를 포함하고, 상기 컨볼루션 연산 단계는, 상기 커널과 컨볼루션 연산을 수행하는 상기 제2복셀 데이터의 인풋 포인트의 위치 정보, 상기 커널의 크기 정보 및 상기 커널의 스트라이드 정보를 기초로 상기 커널의 오프셋(offset)들의 컨볼루션 연산 순서를 결정하는단계를 포함하는,데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서,상기 컨볼루션 연산 단계는,상기 인풋 포인트 중 상기 커널의 오프셋들과 유효하게 컨볼루션 연산을 수행하는 유효 인풋 포인트를 산출한후, 상기 유효 인풋 포인트에 기초하여 상기 커널의 오프셋의 컨볼루션 연산 순서를 결정하는,데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 컨볼루션 연산 단계는,상기 커널의 오프셋들의 컨볼루션 연산 순서가, 전 단계에서의 상기 유효 인풋 포인트들과 다음 단계에서의 상기 유효 인풋 포인트들이 중복되는 인풋 포인트들이 존재하도록, 상기 커널의 오프셋들의 컨볼루션 연산 순서를결정하는 단계를 포함하는,데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,상기 컨볼루션 연산 단계는,인접하는 커널의 오프셋들 사이의 거리가 상기 커널의 스트라이드 값과 일치하도록, 상기 커널의 오프셋들의 컨볼루션 연산 순서를 결정하는 단계를 포함하는, 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2022-0095091-3-제 3항에 있어서,상기 커널은 3x3 또는 3x3x3행렬의 커널을 포함하며, 상기 커널의 스트라이드는 2인,데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5항에 있어서,상기 커널의 오프셋들의 컨볼루션 연산 순서는, 제1패턴, 제2패턴, 제3패턴, 제4패턴, 제5패턴 및 제6패턴 중 적어도 하나를 포함하고,제 1패턴은, 인접하는 오프셋들의 간격이 2가 되도록 0번 오프셋, 2번 오프셋, 6번 오프셋, 8번 오프셋, 18번오프셋, 20번 오프셋, 24번 오프셋 및 26번 오프셋을 배열한 패턴을 포함하는, 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6항에 있어서,상기 제2패턴은, 인접하는 오프셋들의 간격이 2가 되도록 3번 오프셋, 5번 오프셋, 21번 오프셋, 23번 오프셋을배열하는 패턴을 포함하고, 제 3배열은, 인접하는 오프셋들의 간격이 2가 되도록 1번 오프셋, 7번 오프셋, 25번 오프셋, 19번 오프셋을 배열하는 패턴을 포함하며, 제 4배열은, 인접하는 오프셋들의 간격이 2가 되도록 1번 오프셋, 7번 오프셋, 25번 오프셋, 19번 오프셋을 배열하는 패턴을 포함하는, 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 6항에 있어서,상기 제5패턴은, 인접하는 오프셋들의 간격이 2가 되도록 12번 오프셋 및 14번 오프셋을 배열하는 패턴을 포함하고,제 6배열은, 인접하는 오프셋들의 간격이 2가 되도록 10번 오프셋, 16번 오프셋을 배열하는 패턴을 포함하는, 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 3항에 있어서,상기 커널은 2x2 또는 2x2x2의 행렬의 커널을 포함하며, 상기 커널의 스트라이드는 1인, 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "센서로부터 취득한 3차원 공간에 존재하는 객체에 대한 포인트 클라우드(point cloud) 데이터에 대해 복셀화(voxelization)를 수행하여 제1복셀 데이터를 생성하는 제1복셀 데이터 생성 모듈;상기 복셀 데이터에 포함되어 있는 포인트들에 대한 특징 정보를 추출하여 상기 포인트들에 대한 특징 정보를포함하고 있는 제2복셀 데이터를 생성하는 제2복셀 데이터 생성 모듈; 및상기 제2복셀 데이터를 입력 정보로 하고, 커널(kernel)을 이용하여 상기 제2복셀 데이터에 대해 컨볼루션 연산을 수행하여 특징 맵을 추출한 후, 상기 특징 맵에서 추출된 정보를 기초로 상기 객체에 대한 위치 정보 및 종류 정보를 출력 정보로 하는, 기 학습된 컨볼루션 인공신경망 모듈;을 포함하고, 공개특허 10-2022-0095091-4-상기 컨볼루션 인공신경망 모듈은,상기 커널과 컨볼루션 연산을 수행하는 상기 제2복셀 데이터의 인풋 포인트의 위치 정보, 상기 커널의 크기 정보 및 상기 커널의 스트라이드 정보를 기초로 상기 커널의 오프셋(offset)들의 컨볼루션 연산 순서를 결정하는,데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 10항에 있어서,상기 컨볼루션 연산 단계는,상기 인풋 포인트 중 상기 커널의 오프셋들과 유효하게 컨볼루션 연산을 수행하는 유효 인풋 포인트를 산출한후, 상기 유효 인풋 포인트에 기초하여 상기 커널의 오프셋의 컨볼루션 연산 순서를 결정하는,데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 컨볼루션 연산 단계는,상기 커널의 오프셋들의 컨볼루션 연산 순서가, 전 단계에서의 상기 유효 인풋 포인트들과 다음 단계에서의 상기 유효 인풋 포인트들이 중복되는 인풋 포인트들이 존재하도록, 상기 커널의 오프셋들의 컨볼루션 연산 순서를결정하는 단계를 포함하는,데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서,상기 컨볼루션 연산 단계는,인접하는 커널의 오프셋들 사이의 거리가 상기 커널의 스트라이드의 값과 일치하도록, 상기 커널의 오프셋들의컨볼루션 연산 순서를 결정하는 단계를 포함하는, 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 12항에 있어서,상기 커널은 3x3 또는 3x3x3의 행렬의 커널을 포함하며, 상기 커널의 스트라이드는 2인, 데이터 재사용을 통해컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치."}
{"patent_id": "10-2021-0112911", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "센서로부터 취득한 3차원 공간에 존재하는 객체에 대한 포인트 클라우드(point cloud) 데이터에 대해 복셀화(voxelization)를 수행하여 제1복셀 데이터를 생성하는 제1복셀 데이터 생성 모듈;상기 복셀 데이터에 포함되어 있는 포인트들에 대한 특징 정보를 추출하여 상기 포인트들에 대한 특징 정보를포함하고 있는 제2복셀 데이터를 생성하는 제2복셀 데이터 생성 모듈; 및상기 제2복셀 데이터를 입력 정보로 하고, 커널(kernel)을 이용하여 상기 제2복셀 데이터에 대해 컨볼루션 연산을 수행하여 특징 맵(특징 맵)을 추출한 후, 상기 특징 맵에서 추출된 정보를 기초로 상기 객체에 대한 위치 정보 및 종류 정보를 출력 정보로 하는, 기 학습된 컨볼루션 인공신경망 모듈;을 포함하고, 상기 컨볼루션 인공신경망 모듈은,상기 커널과 컨볼루션 연산을 수행하는 상기 제2복셀 데이터의 인풋 포인트의 위치 정보, 상기 커널의 크기 정보 및 상기 커널의 스트라이드 정보를 기초로 상기 커널의 오프셋(offset)들의 컨볼루션 연산 순서를 결정하는,공개특허 10-2022-0095091-5-데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 인공신경망을 이용한 컨볼루션 연산 서버."}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법은, 센서로부터 취 득한 3차원 공간에 존재하는 객체에 대한 포인트 클라우드(point cloud) 데이터에 대해 복셀화(voxelization)를 수행하여 제1복셀 데이터를 생성하는 제1복셀 데이터 생성 단계, 상기 복셀 데이터에 포함되어 있는 포인트들에 (뒷면에 계속)"}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법 및 장치에 관한 발명으 로서, 보다 구체적으로는 인공신경망을 이용하여 3차원 공간에 존재하는 객체를 인식하기 위해 컨볼루션 연산을 수행하는 경우, 중복되는 연산에 대한 데이터를 재활용하는 방법으로, 컨볼루션 연산의 효율성을 높일 수 있는 기술에 관한 발명이다."}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 지능(Artificial Intelligence, AI) 기술은, 인간의 학습능력과 추론능력, 지각능력, 자연언어의 이해능력 등을 컴퓨터 프로그램으로 실현한 기술을 의미하며, 종래의 룰(Rule) 기반 스마트 시스템과 달리 기계가 스스로 학습하고 판단하며 똑똑해지는 시스템을 의미한다. 인공지능 기술은 기계학습(딥 러닝) 및 기계학습을 활용한 요소 기술들로 구성된다. 기계학습은 입력 데이터들 의 특징을 스스로 분류/학습하는 알고리즘 기술이며, 요소기술은 딥 러닝 등의 기계학습 알고리즘을 활용하여 인간 두뇌의 인지, 판단 등의 기능을 모사하는 기술로서, 언어적 이해, 시각적 이해, 추론/예측, 지식 표현, 동 작 제어 등의 기술 분야로 구성된다. 인공지능 기술은 다양한 분야에 적용되어 활용되는데, 사람의 언어/문자를 인식하고 응용/처리하는 언어 이해 분야, 사물을 인간의 시각처럼 인식하여 객체 추적, 사람 인식, 공간 이해, 장면 이해 등을 처리하는 시각적 이 해 분야, 정보를 판단하여 논리적으로 추론하고 예측하는 추론/예측 분야 등이 존재한다. 인공지능의 기술의 발달에 따라, 자율주행 분야에서도 주행중인 차량 주변에 존재하는 객체를 인식하는 분야에 도 인공지능 기술이 적용되고 있다. 구체적으로, Lidar/RGB-D 센서 기반의 3차원 객체 인식 방법이 주를 이루고 있는데, Lidar/RGB-D 센서 기반의 3차원 객체 인식 방법은 점 구름(Point Cloud) 형태의 3차원 데이터를 활용해 차량 주변에 존재하는 객체의 위치와 종류를 분별하며, 점 구름 데이터는 3차원 컨볼루션(Convolution, 합성곱) 연산을 여러 레이어에 걸쳐 대해 반복적으로 수행함으로써, 해당 데이터의 객체를 분류할 수 있는 특징을 추출 한다. 그러나, 3차원 공간에서 객체를 인식하는 경우 그 특성상, 점 구름 데이터가 3차원 공간에 희박하게(Sparse) 존 재하기 때문에 컨볼루션 연산 또한 희박하게 존재하는 데이터들에 대해 이루어진다. 따라서, 레이어 별로 추출 하는 특징(Feature)이 불규칙적으로 메모리에 저장되고, 이로 인해 컨볼루션 연산에 사용되는 특징 데이터를 메 모리로부터 불러오기 위해 불규칙적인 접근을 할 수 밖에 없다. 따라서, 종래 기술에 따라 컨볼루션 연산을 수 행하는 경우, 전 과정을 마치기 위해 필요한 시간이 크게 증가하는 문제점이 존재한다. 선행기술문헌 특허문헌 (특허문헌 0001) 대한민국 등록특허허공보 10-2012828 B1 - 볼륨 랜더링 장치 및 방법(2018.12.26.)"}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치는 상기 설명한 문제점을 해결하기 위해 고안된 발명으로서, 3차원 공간에서 커널을 이용하여 컨볼루션 연산을 수행함에 있어서 컨볼루션 연산을 패턴을 파악하고 이를 기초로 중복되는 연산을 재사용함으로써, 컨볼루션 연산을 속도를 높일 수 있는 방법 및 장치를 제공하는데 그 목적이 있다. 보다 구체적으로 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치 는, 입력되는 데이터에 커널을 이용하여 컨볼루션 연산을 수행함에 있어서, 커널의 사이즈 및 크기와 커널의 스트라이드 값에 기초하여 커널의 오프셋 순서를 변경하여, 인접하는 커널의 오프셋 사이들에서는 재사용되는 데 이터를 늘리는 방법으로 컨볼루션 연산을 속도를 높이는데 그 목적이 있다."}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법은, 센서로부터 취득한 3차원 공간에 존재하는 객체에 대한 포인트 클라우드(point cloud) 데이터에 대해 복셀화(voxelizatio n)를 수행하여 제1복셀 데이터를 생성하는 제1복셀 데이터 생성 단계, 상기 복셀 데이터에 포함되어 있는 포인 트들에 대한 특징 정보를 추출하여 상기 포인트들에 대한 특징 정보를 포함하고 있는 제2복셀 데이터를 생성하 는 제2복셀 데이터 생성 단계, 커널(kernel)을 이용하여 상기 제2복셀 데이터에 대해 컨볼루션 연산을 수행하여 특징 맵(특징 맵)을 추출하는 컨볼루션 연산 단계 및 상기 특징 맵에서 추출된 정보를 기초로 상기 객체에 대한 위치 정보 및 종류 정보를 추출하는 객체 정보 추출 단계를 포함하고, 상기 컨볼루션 연산 단계는, 상기 커널과 컨볼루션 연산을 수행하는 상기 제2복셀 데이터의 인풋 포인트의 위치 정보, 상기 커널의 크기 정보 및 상기 커 널의 스트라이드 정보를 기초로 상기 커널의 오프셋(offset)들의 컨볼루션 연산 순서를 결정하는 단계를 포함할 수 있다. 상기 컨볼루션 연산단계는, 상기 인풋 포인트 중 상기 커널의 오프셋들과 유효하게 컨볼루션 연산을 수행하는 유효 인풋 포인트를 산출한 후, 상기 유효 인풋 포인트에 기초하여 상기 커널의 오프셋의 컨볼루션 연산 순서를 결정할 수 있다. 상기 컨볼루션 연산 단계는, 상기 커널의 오프셋들의 컨볼루션 연산 순서가, 전 단계에서의 상기 유효 인풋 포 인트들과 다음 단계에서의 상기 유효 인풋 포인트들이 중복되는 인풋 포인트들이 존재하도록, 상기 커널의 오프 셋들의 컨볼루션 연산 순서를 결정하는 단계를 포함할 수 있다. 상기 컨볼루션 연산 단계는, 인접하는 커널의 오프셋들 사이의 거리가 상기 커널의 스트라이드 값과 일치하도록, 상기 커널의 오프셋들의 컨볼루션 연산 순서를 결정하는 단계를 포함할 수 있다. 상기 커널은 3x3 행렬의 커널을 포함하며, 상기 커널의 스트라이드는 2일 수 있다. 상기 커널의 오프셋들의 컨볼루션 연산 순서는, 제1패턴, 제2패턴, 제3패턴, 제4패턴, 제5패턴 및 제6패턴 중 적어도 하나를 포함하고, 제 1패턴은, 인접하는 오프셋들의 간격이 2가 되도록 0번 오프셋, 2번 오프셋, 6번 오 프셋, 8번 오프셋, 18번 오프셋, 20번 오프셋, 24번 오프셋 및 26번 오프셋을 배열한 패턴을 포함할 수 있다. 상기 제2패턴은, 인접하는 오프셋들의 간격이 2가 되도록 3번 오프셋, 5번 오프셋, 21번 오프셋, 23번 오프셋을 배열하는 패턴을 포함하고, 상기 제 3배열은, 인접하는 오프셋들의 간격이 2가 되도록 1번 오프셋, 7번 오프셋, 25번 오프셋, 19번 오프셋을 배열하는 패턴을 포함하며, 상기 제 4배열은, 인접하는 오프셋들의 간격이 2가 되 도록 1번 오프셋, 7번 오프셋, 25번 오프셋, 19번 오프셋을 배열하는 패턴을 포함할 수 있다. 상기 제5패턴은, 인접하는 오프셋들의 간격이 2가 되도록 12번 오프셋 및 14번 오프셋을 배열하는 패턴을 포함 하고, 상기 제 6배열은, 인접하는 오프셋들의 간격이 2가 되도록 10번 오프셋, 16번 오프셋을 배열하는 패턴을 포함할 수 있다. 상기 커널은 2x2 행렬의 커널을 포함하며, 상기 커널의 스트라이드는 1일 수 있다. 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치는, 센서로부터 취득한 3차원 공간에 존재하는 객체에 대한 포인트 클라우드(point cloud) 데이터에 대해 복셀화(voxelizatio n)를 수행하여 제1복셀 데이터를 생성하는 제1복셀 데이터 생성 모듈, 상기 복셀 데이터에 포함되어 있는 포인 트들에 대한 특징 정보를 추출하여 상기 포인트들에 대한 특징 정보를 포함하고 있는 제2복셀 데이터를 생성하 는 제2복셀 데이터 생성 모듈 및 상기 제2복셀 데이터를 입력 정보로 하고, 커널(kernel)을 이용하여 상기 제2 복셀 데이터에 대해 컨볼루션 연산을 수행하여 특징 맵을 추출한 후, 상기 특징 맵에서 추출된 정보를 기초로 상기 객체에 대한 위치 정보 및 종류 정보를 출력 정보로 하는, 기 학습된 컨볼루션 인공신경망 모듈을 포함하 고, 상기 컨볼루션 인공신경망 모듈은, 상기 커널과 컨볼루션 연산을 수행하는 상기 제2복셀 데이터의 인풋 포 인트의 위치 정보, 상기 커널의 크기 정보 및 상기 커널의 스트라이드 정보를 기초로 상기 커널의 오프셋 (offset)들의 컨볼루션 연산 순서를 결정할 수 있다. 상기 컨볼루션 연산 단계는, 상기 인풋 포인트 중 상기 커널의 오프셋들과 유효하게 컨볼루션 연산을 수행하는 유효 인풋 포인트를 산출한 후, 상기 유효 인풋 포인트에 기초하여 상기 커널의 오프셋의 컨볼루션 연산 순서를결정할 수 있다. 상기 컨볼루션 연산 단계는, 상기 커널의 오프셋들의 컨볼루션 연산 순서가, 전 단계에서의 상기 유효 인풋 포 인트들과 다음 단계에서의 상기 유효 인풋 포인트들이 중복되는 인풋 포인트들이 존재하도록, 상기 커널의 오프 셋들의 컨볼루션 연산 순서를 결정하는 단계를 포함할 수 있다. 상기 컨볼루션 연산 단계는, 인접하는 커널의 오프셋들 사이의 거리가 상기 커널의 스트라이드의 값과 일치하도 록, 상기 커널의 오프셋들의 컨볼루션 연산 순서를 결정하는 단계를 포함할 수 있다. 상기 커널은 3x3 행렬의 커널을 포함하며, 상기 커널의 스트라이드는 2일 수 있다. 일 실시예에 따른 데이터 컨볼루션 연산 서버는, 기록매체 저장되는 프로그램 코드는, 센서로부터 취득한 3차원 공간에 존재하는 객체에 대한 포인트 클라우드(point cloud) 데이터에 대해 복셀화(voxelization)를 수행하여 제1복셀 데이터를 생성하는 제1복셀 데이터 생성 모듈, 상기 복셀 데이터에 포함되어 있는 포인트들에 대한 특 징 정보를 추출하여 상기 포인트들에 대한 특징 정보를 포함하고 있는 제2복셀 데이터를 생성하는 제2복셀 데이 터 생성 모듈 및 상기 제2복셀 데이터를 입력 정보로 하고, 커널(kernel)을 이용하여 상기 제2복셀 데이터에 대 해 컨볼루션 연산을 수행하여 특징 맵(특징 맵)을 추출한 후, 상기 특징 맵에서 추출된 정보를 기초로 상기 객 체에 대한 위치 정보 및 종류 정보를 출력 정보로 하는, 기 학습된 컨볼루션 인공신경망 모듈;을 포함하고, 상 기 컨볼루션 인공신경망 모듈은, 상기 커널과 컨볼루션 연산을 수행하는 상기 제2복셀 데이터의 인풋 포인트의 위치 정보, 상기 커널의 크기 정보 및 상기 커널의 스트라이드 정보를 기초로 상기 커널의 오프셋(offset)들의 컨볼루션 연산 순서를 결정할 수 있다."}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치는 컨볼루션 연산 을 수행함에 있어서, 컨볼루션의 연산 패턴에 기초하여 기 사용되었던 데이터를 재사용 하므로, 특징 데이터를 메모리로부터 불러오기 위해 프로세서가 디램으로 접근하는 횟수가 줄어들어, 컨볼루션 연산 속도가 종래 기술 보다 빨라지는 장점이 존재한다. 또한, 이러한 특징으로 인해 3차원 공간에 존재하는 객체 인식의 속도를 증가시킬 수 있는바, 고차원 자율 주 행에 필수적인 고속 전방 장애물 인식을 효율적으로 수행할 수 있고, 빠르고 정확한 로봇 네비게이션을 위한 RGB-D 기반 고속 위치 추정도 효율적으로 수행할 수 있는 장점이 존재한다."}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에 기재된 실시 예와 도면에 도시된 구성은 개시된 발명의 바람직한 일 예이며, 본 출원의 출원 시점 에 있어서 본 명세서의 실시 예와 도면을 대체할 수 있는 다양한 변형 예들이 있을 수 있다. 또한, 본 명세서에서 사용한 용어는 실시 예를 설명하기 위해 사용된 것으로, 개시된 발명을 제한 및/또는 한정 하려는 의도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\", \"구비하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 작동, 구성요소, 부품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들 이나 숫자, 단계, 작동, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않 는다. 또한, 본 명세서에서 사용한 \"제 1\", \"제 2\" 등과 같이 서수를 포함하는 용어는 다양한 구성 요소들을 설명하는 데 사용될 수 있지만, 상기 구성 요소들은 상기 용어들에 의해 한정되지는 않는다. 아래에서는 첨부한 도면을 참고하여 본 발명의 실시예에 대하여 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그리고 도면에서 본 발명을 명확하게 설명하기 위해서 설명과 관계없는 부분은 생략한다. 도 1은 인공신경망을 이용하여 점 구름 기반의 3차원 객체를 인식하는 알고리즘을 설명하기 위한 도면이다. 도 2는 도 1에 따라 3차원 객체를 인식하는 경우, 각각의 알고리즘이 전제 알고리즘에서 차지하는 비율을 표시한 그래프이다. 점 구름 기반의 3차원 객체 인식은 Lidar 혹은 RGB-D 센서 같은 점구름 형태의 3차원 데이터에 대해 3차원 컨볼 루션 연산을 중첩적으로 수행함으로써, 3차원 공간에 존재하는 객체의 위치와 종류를 분별하는 기술을 의미한 다. 도 1을 참고하면, LiDAR를 통해 얻은 3차원 공간에 존재해는 객체(object)에 대한 포인트 클라우드(point cloud, 20)는 도면에 도시된 바와 같이 밀도가 희박한(Sparse)한 정보를 가지고 있다. 그리고, 이러한 포인트들 은 4차원(batch, x, y, z)에서의 위치 정보와 C차원(channel 갯수)의 특징(feature) 정보를 가지고 있으며, 이러한 정보를 3D 격자 구조의 Voxel로 균등하게 나누는 과정을 Voxelization 작업이라 부른다. (S20) Voxelization 작업이 완료되면 각 복셀(Voxel) 안의 포인트들의 특징을 추출 하는 (일반적으로 단순 평균값 계 산)하는 VFE(Voxel Feature Extractor, S30)를 진행하여, 특징이 추출된 Voxel 데이터를 추출한 후(S30), 특징 이 추출된 Voxel 데이터들은 DNN과 같은 인공신경망에 입력되어(S40) 복수 개의 컨볼루션(Convolution layer)들 을 통과하면서 특징이 추출되고(S50), 특징이 추출된 정보들을 RPN(Region Proposal Network)을 통해 최종적으 로 3차원 공간 내에서의 객체의 종류와 위치 정보를 획득하게 된다.(S60) 그러나 인공신경망에 입력되는 포인트들에 대한 정보를 가지고 있는 복셀 데이터는3차원 공간 내에서 매우 드문 드문 존재하기 때문에, 복셀 데이터에 대해 컨볼루션 연산을 수행함에 있어서 커널(또는 필터)를 모든 구간에 대해 컨볼루션 연산을 수행해야 하는 슬라이딩 윈도우(sliding window)와 같은 방법으로 컨볼루션 연산을 하게 되면, 불필요한 연산을 위해 프로세서가 메모리 접근을 많이 하기 때문에 매우 비효율적으로 연산이 진행된다. 따라서, 3차원 공간에서 객체를 효율적으로 인식하기 위해서는 각 복셀의 위치 정보를 고려한 방법인 스페어스 컨볼루션(sparse convolution)을 사용한다. 이하 설명의 편의를 위해 스페어스 컨볼루션을 제1컨볼루션이라 지 칭하여 설명하도록 한다. 도 2를 통해 제1컨볼루션이 이루어지는 구체적인 과정을 살펴보면, 도 2의 (a)에 도시된 바와 같이 인공신경망 의 전체 프로세스 시간 중에 RPN 시간은 전체 시간의 약 21% 정도 밖에 차지하지 않으나, 컨볼루션이 이루어지 는 시간은 전체 시간의 약 79%시간을 차지할 정도로 전체 연산 시간 중에 대다수의 시간을 차지하고 있다. 일반적으로, 특징 점들이 밀집하게 모여 있는 공간에서의 컨볼루션은 행렬 연산이 이루어지는 gemm 시간이 절대 다수 시간을 차지하나, 제1컨볼루션은 앞서 언급한 바와 같이 특징 맵이 넓은 범위에 걸쳐 희박하게 펼쳐져 있 기 때문에 의미 있는 특징만 모아서 연산을 한 후 다시 재분배하는 gather-gemm-scatter방식을 사용한다. 그리고 각각의 연산은 도 2의 (b)에 도시된 바와 같이, scatter 시간이 전체 컨볼루션 연산 시간의 약 29%, gatter 는 28%, 실제 행렬 연산을 수행하는 gemm 시간은 28%를 차지하는 것을 알 수 있다. 또한, 프로세서가 gather와 scatter 프로세스를 수행하기 위해서는 gather 와 scatter 가 되는 포인트 들에 대 한 위치 정보를 알고 있어야 하고, 이러한 위치 정보를 계산하는 것이 룰(rule)이라 하는데, 이러한 룰을 생성 하고, 생성된 룰을 gather하고 scatter하는데에도 전체 시간의 약 9.5%의 시간이 사용된다. 따라서, 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법 및 장치 는, 컨볼루션 연산을 수행함에 있어서, 컨볼루션 연산이 이루어지는 계산 과정의 패턴을 분석하고, 중복되는 패 턴에 기초하여 이미 연산에 이루어진 결과를 재사용하는 방법으로 컨볼루션 연산의 전체 속도를 향상시킬 수 있 는 기술을 제공하기 위함이다. 이하 도면을 통해 본 발명의 구성 및 프로세스에 대해 자세히 알아보도록 한다. 도 3은 본 발명의 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장 치의 일부 구성 요소를 도시한 블럭도이고, 도 4는 본 발명의 일 실시예에 따른 컨볼루션 인공신경망 모듈의 입 력 정보 및 출력 정보를 도시한 도면이고, 도 5는 본 발명의 일 실시예에 다른 컨볼루션 인공신경망 모듈이 수 행하는 컨볼루션 연산 과정을 도시한 도면이다. 본 발명의 명칭은 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치로 지칭하였으나, 이하 명세서에서는 설명의 편의를 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치 는 3차원 객체 인식 장치로 지칭하여 설명하도록 한다. 또한, 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치는 별도의 독립된 장치로 구현될 수 있으나, 이에 한정된 것은 아니 고 카메라로부터 촬영된 영상을 기초로 본 발명의 알고리즘을 수행하는 서버(server)로 구현되거나, 사용자 단 말기에 설치된 프로세서를 통해 클라이언트 단에서 본 발명의 특징을 구현할 수 도 있다. 도 3을 참고하면, 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장 치는 제1복셀 데이터 생성 모듈, 제2복셀 데이터 생성 모듈, 프로세서 및 메모리 모듈 을 포함할 수 있으며, 프로세서는 컨볼루션 인공신경망 모듈, 규칙 생성 모듈 및 어드레스 생성 모듈을 포함할 수 있다. 도 3에서는 제1복셀 데이터 생성 모듈, 제2복셀 데이터 생성 모듈 및 프로세서를 별개의 모듈로 기재하였으나, 이는 설명의 편의를 위해 나눈 것일 뿐, 본 발명의 실시 예가 이로 한정되는 것은 아니고 프로세 서가 제1복셀 데이터 생성 모듈 및 제2복셀 데이터 생성 모듈이 하는 역할을 같이 수행하도록 구현될 수 있다. 또한, 규칙 생성 모듈 및 어드레스 생성 모듈도 컨볼루션 인공신경망 모듈의 일 구성요소로 구현될 수 도 있다. 제1복셀 데이터 생성 모듈은 센서(미도시)로부터 취득한 3차원 공간에 존재하는 객체에 대한 포인트 클라 우드(point cloud) 정보에 대해 복셀화(Voxelization) 작업을 수행하여, 제1복셀 데이터를 생성하고, 생성된 제 1복셀 데이터를 제2복셀 데이터 생성 모듈로 송신한다. 복셀화 작업은 여러 공간에 펼쳐져 있는 포인트들 에 대해 위치 정보를 산정하는 작업으로서, 각각의 포인트 들에 대해 4차원(batch, x, y, z)에서의 위치 정보와 C차원(channel 갯수)의 정보를 산출하고, 이러한 정보를 3D 격자 구조의 복셀(Voxel)로 균등하게 나누는 작업을 수행한다. 제1복셀 데이터가 생성되면, 제2복셀 데이터 생성 모듈은 제1복셀 데이터를 기초로, 제1복셀 데이터에 포 함되어 있는 포인트들의 특징을 추출 하는 VFE(Voxel Feature Extractor) 작업을 수행하여, 포인트들의 특징 정 보를 포함하고 제2복셀 데이터를 생성하고, 생성된 제2복셀 데이터는 프로세서로 송신되어 컨볼루션 인공 신경망 모듈의 입력 정보로 활용된다. 컨볼루션 인공신경망 모듈은 실질적인 컨볼루션 연산을 수행하는 모듈로서, 컨볼루션 연산에서 가장 중요 한 역할을 하는 GEMM 연산을 수행하는 모듈을 의미하며, 인공신경망 모듈로 구현될 수 있다. 구체적으로 컨볼루션 인공신경망 모듈은 제2복셀 데이터 생성 모듈이 송신한 제2복셀 데이터를 입력 정보로 하고, 3차원 공간에 존재하는 객체의 종류 정보와 객체의 위치 정보를 출력 정보 및 이들 에 대한 신뢰도 정보를 출력 정보로 하는 인공신경망 모듈로서, 컨볼루션 인공신경망 모듈은 상기 입 력 정보와 출력 정보를 기초로 학습을 수행하는 학습 세션(미도시)과, 입력 정보를 기초로 출력 정보를 추론하 는 추론 세션(미도시)을 포함할 수 있다. 컨볼루션 인공신경망 모듈의 학습 세션은 입력 정보와 출력 정보들(20,30)을 기초로 학습을 수행할 수 있는 세션이며, 추론 세션은 학습된 컨볼루션 인공신경망 모듈을 이용하여 실시간으로 입력되는 제2복 셀 데이터를 분석하여, 3차원 공간에 존재하는 객체의 종류 정보와 위치 정보를 및 이에 대한 신뢰 도 정보를 출력할 수 있다. 한편 도 4에서는, 컨볼루션 인공신경망 모듈의 출력 정보가 객체의 종류 정보 및 객체의 위치 정보 가 함께 출력되는 것으로 도시하였으나, 본 발명의 실시예가 이로 한정되는 것은 아니고, 컨볼루션 인공신 경망 모듈의 출력 정보는 3차원 공간에 존재하는 객체의 종류 정보 또는 객체의 위치 정보만이 출 력되도록 인공신경망 모듈을 구현할 수 있다. 규칙 생성 모듈과 어드레스 생성 모듈은 컨볼루션 인공신경망 모듈이 컨볼루션 연산을 보조하는 역할을 하는 모듈로서, 규칙 생성 모듈은 제2복셀 데이터에서의 인풋 유효 포인트와 제2복셀 데이터에 대 해 컨볼루션 연산을 수행하는 커널의 스트라이드 및 커널의 사이즈 등을 기초로 컨볼루션 연산 데이터의 재사용 이 극대화되는 방향으로 커널의 오프셋 순서에 대한 규칙을 생성하는 모듈을 의미한다. 이러한 특징에 비추어 규칙 생성 모듈은 룰 제너레이터(rule generator)로 지칭될 수 있다. 어드레스 생성 모듈은 컨볼루션 연산에서 연산 과정에 필요한 데이터를 gather하고 scatter 하는 모듈로서, 후술할 본 발명의 데이터의 재사용 방법을 고려하여 메모리 모듈에 접근해야 하는 요청 정보를 생성할 수 있다. 구체적으로, 어드레스 생성 모듈은 규칙 생성 모듈에서 생성한 규칙을 기초로 gather 연산을 하는 경우 DRAM에 접근하는 요청을 발생시키고, scatter 연산을 하는 경우 AccuBuffer에 접근하 는 요청을 발생시킬 수 있다. 메모리 모듈은 프로세서에서 생성한 각종 정보를 저장하고, 프로세서의 연산 과정에 맞춰 필요 한 정보를 프로세서로 전송하는 역할을 수행할 수 있다. 메모리 모듈은 on-chip buffer형태로 구현되는 저장 모듈로서, 구체적으로 인덱스 버퍼(index buffer)와 룰 버퍼(rule buffer)를 포함할 수 있다. 인덱스 버퍼는 컨볼루션 인공신경망 모듈이 컨볼루션 연산을 수행함에 있어서, 입력되는 입력 데이터들에 대한 특징 정보를 저장할 수 있다. 일 예로 특징 정보는 제2복셀 데이터에 대한 크기 정보 및 제2복셀 데이터에 포함되어 있는 인풋 유효 포인트들에 대한 좌표 정보 등을 포함할 수 있다. 룰 버퍼는 규칙 생성 모듈 및 어드레스 생성 모듈이 생성한 정보를 저장할 수 있다. 즉, 규칙 생성 모듈이 생성한 커널의 오프셋들의 배열 순서에 대한 정보가 저장될 수 있으며, 이에 기초하여 재사용되는 데이터들이 저장될 수 있다. 이하 도 5를 통해 본 발명에 따른 컨볼루션 인공신경망 모듈에 대표적으로 적용되는 CNN 네트워크의 구조 에 대해 설명하도록 한다. 도 5는 본 발명의 일 실시예에 따라 CNN에 입력되는 입력 정보가 출력 정보로 변환되 는 과정을 설명하기 위한 도면이다. CNN(Convolutional neural network)은 시각적 이미지를 분석하는데 사용되는 피드-포워드적인 심층신경망(DNN: Deep Neural Network)의 한 종류로 하나 또는 여러 개의 콘볼루션 계층(convolutional layer)과 통합 계층 (pooling layer), 완전하게 연결된 계층(fully connected layer)들로 구성된 신경망을 의미한다. 한국어로는 합성곱 신경망으로 지칭되며, 역전달(Backpropagation algorithm)을 통해 훈련될 수 있다 CNN 과정은 크게 입력된 데이터에 대해 특징을 추출하고 크기를 최소화 한 후 분류 작업이 이루어지는 과정을 여러 차례 반복하면서, local feature으로부터 전체 이미지를 대표할 수 있는 global feature을 얻을 수 있다. 이를 본 발명에 적용하여 도 5를 기준으로 설명하면, 제2복셀 데이터 생성 모듈에서 송신한 제2복셀 데이 터가 컨볼루션 인공신경망 모듈의 입력 정보로 입력되면 컨볼루션 인공신경망 모듈은 입력된 제2 복셀 데이터에 대해 커널(kernel)를 적용하여 제1 특징 맵을 생성한다. 커널을 적용한다는 의미는 특정 한 계수를 가지고 있는 필터를 이용하여 입력된 이미지에 대해 순차적으로 컨볼루션 연산을 수행하는 것을 의미 한다. 커널의 크기는 입력된 컨볼루션 연산이 수행되는 이미지의 크기에 따라 달라지나, 3차원 공간에서 객체 인식을 위한 커널의 경우 3X3 행렬, 3X3X3 해령, 2X2 행렬 또는 2X2X2행렬의 모형을 가지는 커널이 주로 이용되 며, 컨볼루션 연산을 수행함에 있어서 적용되는 스트라이드(stride)는 1 또는 2가 주로 적용된다. 구체적으로, 컨볼루션 인공신경망 모듈은 도 5에 도시된 바와 같이 입력된 이미지에 대해 특정 커널을 이 용하여 컨볼루션 연산을 수행하여 제1 특징 맵을 생성하며, 제1특징 맵이 생성되면 제1특징 맵에 서브샘플링(subsampling)을 적용하여 이미지의 크기를 줄인다. 서브샘플링 과정을 거치면 local feature을 가지는 제 2 특징 맵이 생성된다. 그리고 다시 컨볼루션 인공신경망 모듈은 제2 특징 맵에 다시 다른 특징을 가지고 있는 커널을 이용하여 컨볼루션 연산을 수행하여 또 다른 특징 맵을 생성하고, 생성된 특징 맵에 대해 서브샘플링을 하는 과정을 반복적으로 수행한다. 이러한 과정들을 계속 반복적으로 수행하면 최종적으로 global feature 을 가지고 있는 최종 특징 맵이 생 성될 수 있다. 이렇게 얻어진 최종 특징 맵은 fully connected network의 입력으로 연결이 되어, 출력 층을 통해 출력 정보가 생성될 수 있다. 본 발명의 경우 입력된 제2복셀 데이터에 대해 컨볼루션 인공신경 망 모듈이 상기 설명한 방법으로 최종 특징 맵을 생성하고 최종 특징 맵은 fully connected network의 입력으로 연결되며, 출력층의 엑티베이션 함수를 거쳐 최종 출력 정보인 차로 예측 정보 및 이에 대한 신뢰도 정보가 출력될 수 있다. 앞서 설명한 바와 같이CNN 인공신경망의 경우 동일한 계수를 가지는 필터를 전체 영상에 반복적으로 적용함으로 써, 변수의 수를 획기적으로 줄이기 때문에, topology 변화에 무관한 항상성(invariance)을 얻을 수 있는 효과 가 존재하며, 이러한 효과는 본 발명과 같이 입력되는 이미지를 기초로 차로를 판단함에 있어서, 정확성을 향상 시킬 수 있는 효과가 존재한다. 본 발명에 따른 컨볼루션 연산 방법은 3차원 공간에서의 포인터들의 특징을 고려해 보다 효율적으로 3차원 공간 에서 컨볼루션 연산을 수행하는 것에 특징이 있는 발명으로서, 크게 도 5에서 설명한 컨볼루션 연산을 변형한 2 가지의 방법으로 컨볼루션 연산을 수행할 수 있다. 구체적으로 컨볼루션 연산에서 커널을 적용함에 있어서, 일 반적으로 적용되는 슬라이딩 윈도우 방법이 아닌 복셀 데이터의 위치 정보를 고려하여 커널을 적용하여 컨볼루 션 연산을 하는 방법과, 복셀 데이터의 인풋 유효 포인트를 기초로 컨볼루션 연산을 수행하는 방법이 존재한다. 이하 설명의 편의를 위해 2가지 방법의 컨볼루션 연산 방법 중 전자를 제1컨볼루션, 후자를 제2컨볼루션으로 지 칭하여 설명하도록 한다. 도 6은 본 발명의 일 실시예에 따른 제1컨볼루션과 제2컨볼루션을 설명하기 위한 도면으로서, 도 6의 (a)는 인 풋 이미지에 커널을 이용하여 제1컨볼루션 연산을 하였을 때 출력되는 제1특징맵을 도시한 도면이 고, 도 6의 (b)는 인풋 이미지에 커널을 이용하여 제2컨볼루션 연산을 하였을 때, 출력되는 제1특징맵 을 설명하기 위한 도면이다. 설명의 통일을 위해 제1컨볼루션 연산과 제2컨볼루션 연산을 수행함에 있어서 입력되는 인풋 이미지는 5x5 이미지이며, 커널의 크기는 3x3X3을 기준으로 하여 설명하도록 한다. 또한, 본 명세서에서 설명되는 커널의 오프셋(offset)은 커널이 인풋 이미지에 대해 컨볼루션 연산을 수행함에 있어서 스트라이드를 기준으로 이동할 때마다의 커널을 의미한다. 즉, 컨볼루션 연산을 수행함에 있어서 가장 첫번째 연산이 시작되는 위치에서의 커널을 제0커널 오프셋이라 정하고, 스트라이드에 맞춰 옆으로 이동한 커널 을 제1커널 오프셋이라 정해진다. 따라서, 커널 오프셋의 숫자는 입력되는 이미지의 크기 및 커널의 스트라이드 수에 따라 달라질 수 있다. 일 예로, 5x5이미지에 3x3x3 커널이 적용되는 경우 오프셋의 수는 0번부터 26번까지 총 27개의 커널 오프셋이 정해진다. 또한, 3차원 공간에서는 일반적으로 객체가 밀도 있게 모여있지 않고, 희박하게(spare) 펼쳐져 있기 때문에, 인 풋 이미지에서 실제 커널과 컨볼루션 연산을 수행하는 유효 인풋 포인트(인풋이미지에서 왼쪽 위에 첨자로 표시한 숫자)는 도면에 도시된 바와 같이 총 3개의 유효 인풋 포인트(제0유효 인풋 포인트, 제1유효 인풋 포인 트, 제2유효 인풋 포인트)를 기준으로 설명하며, 커널의 3x3x3에 해당하는 모든 포인트는 유효 포인트가 존재하 는 것을 기준으로 설명한다. 도 5의 왼쪽을 참고하여, 본 발명에 따른 제1컨볼루션 연산에 대해 설명하면, 3x3 인풋 이미지에 대해 3x3x3커널을 적용하여 컨볼루션 연산을 하면, 도 5의 (a)에 보이는 것과 같이 연산을 하게 된다. 구체적으로, 제0커널 오프셋이 인풋 이미지에 대해 컨볼루션 연산을 수행하면, 인풋 포인트 중 제0유효 인풋 포인트에 대한 컨볼루션 연산 결과는 아웃풋 포인트 11로 출력되며, 인풋 포인트 중 제1유효 인풋 포인트에 대한 컨볼루 션 연산 결과는 아웃풋 포인트 12로 출력이 됨을 알 수 있다. 또한, 제1커널 오프셋이 인풋 이미지에 대해 컨볼루션 연산을 수행하면, 인풋 포인트 중 제0인풋 유효 포인 트에 대한 컨볼루션 연산 결과는 아웃풋 포인트 10으로 출력되며, 인풋 포인트 중 제1인풋 유효 포인트에 대한 컨볼루션 연산 결과는 아웃풋 포인트 11로 출력이 되고, 인풋 포인트 중 제2인풋 유효 포인트에 대한 컨볼루션 연산 결과는 아웃풋 포인트 15로 출력이 된다. 3차원 공간에서 객체들에 대한 포인트들이 밀집하게 모여 있으면, 모든 포인트들에 대해 연산을 해야 하므로 제 1컨볼루션과 같은 방법으로 연산을 수행해야 하지만, 일반적으로 3차원 공간에서는 포인트들이 희박하게 모여있으므로 제1컨볼루션과 같은 방법으로 연산을 수행하게 되면 컨볼루션 레이어에서 이전 레이어에서 연산한 후, 다름 레이어에서 연산할 유효 포인트의 개수가 늘어나는 딜레이션(dilation) 현상이 발생하여 전체 컨볼루션 연 산을 증가하는 문제가 발생하게 된다. 따라서, 일 실시예에 따른 컨볼루션 인공신경망 모듈은 3차원 공간에 존재하는 객체들의 포인트의 밀집의 정도가 높은 경우에는 제1컨볼루션 연산을 수행함으로써 정확도를 높이고, 포인트의 밀집의 정도가 낮은 경우에 는 컨볼루션 연산의 효율성을 높일 수 있는 제2컨볼루션으로 전체 컨볼루션 연산의 효율성을 증가시킬 수 있다. 제2컨볼루션의 경우 인풋 유효 포인트가 커널의 영역 내에 존재하는 경우 연산을 하는 것이 아니라, 인풋 유효 포인트가 커널의 중앙에 위치했을 때만 컨볼루션 연산을 수행하는 것을 특징으로 한다. 이러한 방법으로 컨볼루 션 연산을 수행하게 되면 아웃풋 유효 포인트는 인풋의 유표 포인트의 개수와 동일하게 되고, 위치 정보도 그대 로 존재하게 되므로, 연산의 정확도는 유지한 채, 컨볼루션 연산의 속도를 향상시킬 수 있다. 제2컨볼루션 연산을 수행하는 경우, 인풋 유효 포인트가 커널의 중앙에 위치하지 않는 경우에 컨볼루션 연산을 수행하지 않기 때문에, 전체 컨볼루션 연산 과정에서 상당 부분을 생략할 수 있어, 컨볼루션 연산의 전체 속도 를 상당히 증가시킬 수 있는 장점이 존재한다. 비록, 제2컨볼루션의 경우 정확도면에서 제1컨볼루션 연산에 비 해 떨어질 수 있으나, 인풋 유효 포인트가 커널의 중앙에 위치하지 않는 경우에 결과 값은 전체 결과 값에 큰 비중을 차지하지 않기 때문에, 연산 속도는 높이면서 정확도면에서도 상당히 높은 결과를 도출해 낼 수 있으며, 인풋 유효 포인트가 커널의 중앙에만 있을 때 컨볼루션 연산을 수행하는 특성상, 제2컨볼루션 연산을 거치게 되 면 특징 맵의 사이즈는 작아지게 된다. 도 7은 본 발명의 일 실시예에 따라, 제2컨볼루션 연산을 수행함에 있어서 적용되는 규칙을 설명하기 위한 도면 이고, 도 8은 본 발명의 일 실시예에 따라 제2컨볼루션 연산을 수행함에 있어서 스트라이드의 값에 맞추어 이동 하는 커널의 모습을 도시한 도면이다. 제2컨볼루션 연산을 수행하는 경우, 일반적인 컨볼루션 연산에서 사용되는 슬라이딩 윈도우(sliding window) 방 식으로 컨볼루션 연산을 수행하게 되면 인풋 포인트 중 유효 인풋 포인트가 아닌 빈 부분에 대한 쓸모 없는 연 산을 많이 할 수 있기 때문에, 유효 인풋 포인트와 커널의 사이즈 정보 및 스트라이드 정보 등을 기초로 아웃풋 포인트의 여러 위치에 어떤 인풋 유효 포인트가 위치하는지 먼저 룰(rule)을 정한 후에, gather-gemm-scatter방 식으로 컨볼루션 연산을 수행하여, 컨볼루션 연산의 효율을 향상시킨다. 즉, 본 발명에서의 룰(rule)은 컨볼루 션 인공신경망 모듈이 gemm을 하기 전에 특정 커널의 오픗셋과 연산될 인풋 유효 포인트의 정보와, 인풋 유효 포인트가 특정 커널과 연산을 하여 출력되는 결과의 아웃풋 포인트가 특징 맵에서 어디에 위치하는지 알려 주는 규칙을 의미한다. 도 7을 통해 구체적으로 설명하면, 3X3X3 행렬의 커널을 3개의 인풋 유효 포인트(제0유효 인풋 포인트, 제1유효 인풋 포인트, 제2유효 인풋 포인트)를 가지고 있는 5X5 이미지에 대해(채널 개수 C) 컨볼루션 연산을 수행하게 되면, 커널의 오프셋의 수(K) 총 27개가 되며, 제0인풋 유효 포인트는 제0번 커널 오프셋에 의해 컨볼루션 연산 을 수행하게 되면 제11아웃풋 포인트에 연산 결과가 저장된다. 이러한 경우 본 발명에 따른 룰(Rule)은 \"제0번 커널 오프셋에 의해 제1커널 오프셋에 의해 제0인풋 유효 포인트의 연산 결과는 제11 아웃풋 포인트로 이동한다 는\"의 정보를 산출하며, 이러한 정보는 도 7에 도시된 바와 같이 일렬의 테이블 형태로 산출된 후, 메모리 모듈 에 저장될 수 있다. 테이블 형태로 룰이 산출되면, 컨볼루션 인공신경망 모듈은 컨볼루션 연산을 수행하게 되는데, 구체적으로 제0번 커널 오프셋과 연산 되는 인풋 포인트들을 수집(gather)한 뒤(이 경우 제0유효 인풋 포인트 및 제1유효 인풋 포인트가 gather 대상이 된다) 제0번 커널 오프셋의 weight와 gemm 연산을 수행하여 연산 결과를 룰에 따 라 결정된 아웃풋 포인트에 저장해 두며(이 경우 아웃풋 포인트는 제11 아웃풋 포인트와 제12아우풋 포인트가 된다), 이러한 연산을 커널의 오프셋 수만큼(이 경우 총 27개) 진행하게 되면 컨볼루션 연산 과정이 종료된다. 본 발명에 따른 제2컨볼루션 연산의 경우, 인풋 포인트들을 수집하는 방법에 있어서 컨볼루션 연산 결과를 재활 용하여 연산 과정을 효율성을 증가시킬 수 있는 것에 특징이 존재한다. 종래 기술에 따라 컨볼루션 연산을 수행하는 경우, 커널의 오프셋 순서를 연산 결과를 고려하지 않고 일률적으 로 증가하는 방향(예를 들어 커널의 오픗셋 수가 총 27개이면 0에서 27까지 순차적으로 증가)으로 컨볼루션 연 산을 수행하다 보니, 인접하게 배열된 커널의 오프셋 사이들끼리는 중복되는 인풋 유효 포인트들이 존재하지 않 아, 컨볼루션 연산에 많은 비중을 차지하는 gather, scatter 등의 정보를 취득하고자 프로세서가 이에 대한 정보가 저장되어 있는 디램(DRAM)에 많은 접근을 하였고, 이에 따라 전체 연산 시간이 증가하는 문제가 존재하였 다. 그러나, 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 방법 및 장치 는 인풋 유효 포인트들을 기초로 커널의 오프셋 배열의 순서를 종래 기술과 다르게 인접하게 배열되어 있는 커 널의 오프셋들끼리는 중복되는 연산 결과가 존재하도록 배치하여, 데이터를 재사용하는 방법으로 컨볼루션 연산 의 전체 속도를 증가시킬 수 있다. 즉, 프로세서는 중복되는 인풋 유효 포인트들에 대한 정보를 재활용할 수 있 기 때문에 컨볼루션 연산을 함에 있어서 디램(DRAM)에 접근하는 횟수를 줄여 연산을 효율성을 높일 수 있다. 일 예로, 도 8과 같은 상태에서, 인풋 유효 포인트는 제0번 커널 오프셋에 대해서 연산이 필요하기 때문에 프로 세서는 디램(DRAM)으로부터 데이터를 가져와 gather를 해야 하지만, 그 다음 커널 오프셋에 해당하는 제1번 커 널 오프셋에 대해서는 동일한 인풋 유효 포인트가 사용 되지 않기 때문에 이 경우 프로세서는 1번 커널 오 프셋에 대해 디램으로부터 gather대상을 제외한다. 반면, 커널의 스트라이드가 2이기 때문에, 제0번 커널 오프셋과 제2번 커널 오프셋은 동일한 인풋 유효 포인트 를 gather 대상으로 삼게 된다. 따라서, 이러한 경우 프로세서는 제2번 커널 오프셋에 대한 연산을 수행함 에 있어서 제0번 커널 오프셋이 실제 연산을 수행한 인풋 유효 포인트와의 연산 결과를 재사용한다. 즉, 본 발명에 따른 프로세서는 커널의 오픗셋들의 배열 순서를 중복되는 데이터의 재사용을 증가시키는 방법으로 배치하였기 때문에, 인접하는 커널의 오프셋들에 대한 연산을 수행함에 있어서, 중복되는 인풋 유효 포인트에 대한 접근을 늘릴 수 있다. 따라서, 프로세서는 컨볼루션 연산을 함에 있어서 캐싱된 데이터를 활용할 수 있어, 종래 기술보다 인풋 유효 포인트들을 gather 하기 위해 디램으로 접근하는 횟수를 줄어들기 때 문에 전체 프로세서의 연산 속도를 높일 수 있는 장점이 있다. 이하 도면을 통해, 커널의 오프셋 배열 순서에 대해 구체적으로 알아본다. 도 9 내지 도 11은 스트라이드가 2이고 커널의 사이즈가 3X3X3인 커널을 기준으로, 본 발명에 따른 커널의 오프 셋 배열 순서를 도시한 도면이다. 종래 기술에 따른 커널의 오프셋 순서는 앞서 설명한 바와 같이 커널의 오프셋의 가장 낮은 번호(도 9에서는 제 0번 커널 오프셋)에서부터 순차적으로 1씩 증가하는 순서로 배열이 되었는바, 중복되는 인풋 유효 포인트들에 대한 정보를 재활용하지 못하는 단점이 존재하였다. 그러나, 본 발명의 경우 스트라이드의 수를 고려하여 커널 의 오프셋 순서를 배열하였기 때문에 데이터 재사용을 통한 연산의 효율성을 증가시킬 수 있다. 구체적으로, 도 9 내지 도 11에 도시된 바와 같이 27개의 오프셋을 데이터의 재사용이 가능하도록 총 6개의 패 턴을 가진 그룹으로 분류한 후, 각 그룹별로 컨볼루션 연산을 수행한다. 즉, 1번 패턴에 대한 연산을 마치면 2 번 패턴에 대한 연산을 수행한 후, 그 다음 3번 패턴, 4번 패턴, 5번 패턴, 6번 패턴 순서로 컨볼루션 연산을 수행할 수 있다. 그러나 본 발명의 실시예가 이로 한정되는 것은 아니고, 패턴들 사이의 순서는 랜덤으로 배치 될 수 있다. 즉, 1번 패턴에 대한 연산을 수행한 후, 2번 패턴에 대한 연산을 수행하지 않고 바로 3번 패턴을 수행할 수 있다. 각각의 패턴의 특징에 대해 알아보면, 제1패턴의 경우 도 9의 (a)에 도시된 바와 같이 커널의 오프셋을 제0번 오프셋, 제 2번 오프셋, 제 6번 오프셋, 제 8번 오프셋, 제 18번 오프셋, 제 20번 오프셋, 제 24번 오프셋 및 제 26번 오프셋 순서로 배열할 수 있다. 즉, 커널의 스트라이드 2인 경우에는, 오프셋 번호가 바로 인접한 커널 의 오프셋들보다 3차원 공간에서 거리가 2가되는 커널의 오프셋끼리는 컨볼루션 연산에서 동일한 인풋 유효 포 인트에 대한 데이터가 재사용되는 경우가 높으므로 제1패턴은 제 0번 커널 오프셋을 기준으로 배열되는 커널의 오프셋들의 간격이 순차적으로 3차원 공간에서 거리가 2가 되도록 배열을 한 것이다. 따라서, 제 0번 커널 오프 셋에서 오른쪽으로 거리가 2가 되는 2번 커널의 오프셋 순서로 컨볼루션 연산을 수행하면, 0번 커널 오프셋에서 컨볼루션 연산이 된 인풋 유효 포인트와 제 2번 커널 오프셋에서 컨볼루션 연산이 된 인풋 유효 포인트들에 대 한 데이터 재사용 비율이 높아진다. 그 후 제 2번 커널 오프셋에 대한 연산을 마치면 제 2번 커널 오프셋과 수 평 간격으로 2 만큼 간격이 있는 제 8번 커널 오프셋에 대한 연산을 수행할 수 있으며, 이 경우 또한 2번 커널 오프셋과 제 8번 커널 오프셋은 2만큼 간격이 존재하므로 제 2번 커널 오프셋에서 컨볼루션 연산이 된 인풋 유 효 포인트와 제 8번 커널 오프셋에서 컨볼루션 연산이 된 인풋 유효 포인트들에 대한 데이터 재사용 비율이 높 아진다. 제 8번 커널 오프셋에 대한 연산을 마치면, 제 8번 커널 오프셋과 수평 간격으로 2만큼 간격이 있는 제 6번 커널 오프셋에 대한 연산을 수행할 수 있으며, 제 8번 커널 오프셋에 대한 연산을 마치면, 제 8번 커널 오 프셋과 수직 간격으로 2만큼 간격이 있는 제 24번 커널 오프셋에 대한 연산을 수행할 수 있다. 그 후 순차적으로 제 26번 커널 오프셋, 제 20번 커널 오프셋 및 제 18번 커널 오프셋에 대한 연산을 수행할 수 있다. 즉, 도 9의 (a)에 도시된 바와 같이 커널의 오프셋 순서를 스타라이드의 값에 맞추어, 오프셋 순서를 배열하는 경우 인접하는 커널의 오프셋들 끼리는 컨볼루션 연산에 사용되는 데이터의 재사용 비율을 높일 수 있다. 따라 서, 본 발명의 원리는 커널의 오프셋 배열의 순서가 스트라이드 값에 맞추어 배열되는 경우 모든 경우에 대해 적용될 수 있으므로, 제1패턴은 0번 -> 6번 -> 24번 -> 18번 -> 20번 -> 26번 -> 8번 -> 2번 순서로 커널의 오 프셋이 정해질 수 있다. 그리고 이러한 제1패턴에 기초하여 컨볼루션 연산을 수행하는 경우 실험 결과 실제로 데이터의 재사용이 93.6%~100%에 해당하는 것으로 측정되었는바, 그만큼 컨볼루션 연산의 속도를 높일 수 있다. 제2패턴의 경우 도 9의 (b)에 도시된 바와 같이 커널의 오프셋을 제 3번 커널 오프셋을 기준으로 커널의 스트라 이드 값에 기초하여 커널의 오프셋들을 배열한 것으로서, 일 예로 제 3번 오프셋, 제 5번 오프셋, 제 21번 오프 셋, 제 23번 오프셋 순서로 커널의 오프셋이 배열될 수 있다. 제2패턴 또한 도면에 도시한 순서로 한정되는 것 은 아니고, 커널의 오프셋 배열의 순서가 스트라이드 값에 맞추어 배열되는 모든 경우에 대해 본 발명에 대한 원리가 적용될 수 있으므로, 제2패턴은 3번 -> 21번 -> 23번 -> 5번 순서로 커널의 오프셋들이 배열될 수 도 있다. 그리고 이러한 제2패턴에 기초하여 컨볼루션 연산을 수행하는 경우 실험 결과 실제로 데이터의 재사용이 93.7%~100%에 해당하는 것으로 측정되었다. 제3패턴의 경우 도 10의 (a)에 도시된 바와 같이 제 1번 커널 오프셋을 기준으로 커널의 스트라이드 값에 기초 하여 커널의 오프셋들을 배열한 것으로서, 일 예로 제 1번 오프셋, 제 7번 오프셋, 제 25번 오프셋, 제 19번 오 프셋 순서로 커널의 오프셋 순서를 배열할 수 있다. 제3패턴 또한 도면에 도시한 순서로 한정되는 것은 아니고, 커널의 오프셋 배열의 순서가 스트라이드 값에 맞추어 배열되는 모든 경우에 대해 본 발명에 대한 원리가 적용 될 수 있으므로, 제3패턴은 7번 -> 1번 -> 19번 -> 25번 순서로 커널의 오프셋들이 배열될 수 도 있다. 그리고 이러한 제3패턴에 기초하여 컨볼루션 연산을 수행하는 경우 실험 결과 실제로 데이터의 재사용이 93.6%~100%에 해당하는 것으로 측정되었다. 제4패턴의 경우 도 10의 (b)에 도시된 바와 같이 제 9번 커널 오프셋을 기준으로 커널의 스트라이드 값에 기초 하여 커널의 오프셋들을 배열한 것으로서, 일 예로 제 9번 오프셋, 제 15번 오프셋, 제 17번 오프셋, 제 11번 오프셋 순서로 커널의 오프셋 순서를 배열할 수 있다. 제4패턴 또한 도면에 도시한 순서로 한정되는 것은 아니 고, 커널의 오프셋 배열의 순서가 스트라이드 값에 맞추어 배열되는 모든 경우에 대해 본 발명에 대한 원리가 적용될 수 있으므로, 제4패턴은 17 -> 15번 -> 99번 -> 11번 순서로도 커널의 오프셋들이 배열될 수 도 있다. 그리고 이러한 제4패턴에 기초하여 컨볼루션 연산을 수행하는 경우 실험 결과 실제로 데이터의 재사용이 99.9%~100%에 해당하는 것으로 측정되었다. 제5패턴의 경우 도 11의 (a)에 도시된 바와 같이 제 12번 커널 오프셋을 기준으로 커널의 스트라이드 값에 기초 하여 커널의 오프셋들을 배열한 것으로서, 일 예로 제 12번 오프셋, 제 14번 오프셋 순서로 커널의 오프셋 순서 를 배열할 수 있다. 제5패턴 또한 도면에 도시한 순서로 한정되는 것은 아니고, 커널의 오프셋 배열의 순서가 스트라이드 값에 맞추어 배열되는 모든 경우에 대해 본 발명에 대한 원리가 적용될 수 있으므로, 제5패턴은 14 번 -> 12번 순서로 커널의 오프셋들이 배열될 수 도 있다. 그리고 이러한 제5패턴에 기초하여 컨볼루션 연산을 수행하는 경우 실험 결과 실제로 데이터의 재사용이 99.9%~100%에 해당하는 것으로 측정되었다. 제6패턴의 경우 도 11의 (b)에 도시된 바와 같이 10번 커널 오프셋을 기준으로 커널의 스트라이드 값에 기초하 여 커널의 오프셋들을 배열한 것으로서, 일 예로 제 10번 오프셋, 제 16번 오프셋 순서로 커널의 오프셋 순서를 배열할 수 있다. 제6패턴 또한 도면에 도시한 순서로 한정되는 것은 아니고, 커널의 오프셋 배열의 순서가 스트 라이드 값에 맞추어 배열되는 모든 경우에 대해 본 발명에 대한 원리가 적용될 수 있으므로, 제6패턴은 16번 -> 10번 순서로 커널의 오프셋들이 배열될 수 도 있다. 그리고 이러한 제6패턴에 기초하여 컨볼루션 연산을 수행하 는 경우 실험 결과 실제로 데이터의 재사용이 100%에 해당하는 것으로 측정되었다. 도 12 및 도 13은 본 발명에 따른 제1컨볼루션 연산을 수행함에 있어서, 제 0번 커널 오프셋을 기준으로 각각 의 커널 오프셋과 아웃풋 데이터가 재사용되는 결과를 도시한 도면이다. 구체적으로 도 12의 (a)는 제 0번 커널 오프셋과 제 2번 커널 오프셋의 데이터 공유 비율을 특정 레이어 별로 도시한 도면이고, 도 12의 (b)는 제 0번 커널 오프셋과 제 6번 커널 오프셋의 데이터 공유 비율을 특정 레이어 별로 도시한 도면이다. 도 13의 (a)는 0번 커널 오프셋과 제 2번 커널 오프셋의 데이터 공유 비율을 특정 레이 어 별로 도시한 도면이고, 도 13의 (b)는 0번 커널 오프셋과 제 26번 커널 오프셋의 데이터 공유 비율을 특정 레이어 별로 도시한 도면이다.본 발명에 따른 제2컨볼루션 연산을 수행하는 경우, 앞선 도면에서 알아 보았듯이 각각의 포인트들에 대한 연산 결과를 아웃풋 포인트에서 partial sum을 화는 과정에서도 재활용하여 컨불루션 연산을 효율성을 극대화시키는 것에 특징이 있다. 즉, 서로 다른 커널 오프셋에 대한 연산이라 하더라도 아웃풋 포인트에 컨볼루션 연산 결과 가 저장되는 경우, output partial sum을 로드(load)하고 더하는 과정이 필요한데, 이 과정에서 아웃풋 포인트 결과에 대한 재사용 비율이 증가하면 프로세서는 메모리 모듈에 해당하는on-chip buffer를 활용해 연 산을 하면 되므로, 프로세서가 디램(DRAM)에 접근하는 횟수를 감소시켜 컨볼루션 연산의 전체 속도를 증가 시킬 수 있는 장점이 존재한다. 즉, 도 12 및 도 13에 도시된 바와 같이 커널 오프셋의 배열 패턴에 따라 데이 터 재사용의 비율은 최대 54%까지 가져올 수 있어, 컨볼루션 연산의 속도를 증가시킬 수 있다. 도 12 및 도 13의 결과에 비추어, 컨볼루션 연산을 시행한 경우 아웃풋 포인트들 간의 데이터 재사용 비율은 서 로 인접한 커널 오프셋들기리의 데이터 재사용 비율이 거리가 먼 커널 오프셋들에 비해 데이터의 재사용 비율이 높은 것을 알 수 있으며, 컨볼루션 연산을 수행함에 있어서 더 하위 계층의 레이어로 갈수록 특징 맵이 더 밀집 해지므로, 더 높은 데이터 재사용 비율을 얻을 수 있는 것을 확인할 수 있다. 도 14 및 도 15은 본 발명에 따른 제2 컨볼루션 연산을 수행함에 있어서, 0번 커널 오프셋을 기준으로 인풋 포 인트와 아웃풋 포인트의 데이터 재활용 비율을 도시한 도면이다. 구체적으로 도 14의 (a)는 0번 커널 오프셋과 제 1번 커널 오프셋의 인풋 포인트와 아웃풋 포인트의 데이터 재 활용 비율을 특정 레이어별로 도시한 도면이고, 도 14의 (b)는 제 0번 커널 오프셋과 제 6번 커널 오프셋의 인 풋 포인트와 아웃풋 포인트의 데이터 재활용 비율을 특정 레이어별로 도시한 도면이다. 도 15의 (a)는 제 0번 커널 오프셋과 제 2번 커널 오프셋의 인풋 포인트와 아웃풋 포인트의 데이터 재활용 비율을 특정 레이어 별로 도시한 도면이고, 도 15의 (b)는 제 0번 커널 오프셋과 제 26번 커널 오프셋의 인풋 포인트와 아웃풋 포인트의 데이터 재활용 비율을 특정 레이어별로 도시한 도면이다. 도 14 및 도 15를 참조하면, 제 0번 커널 오프셋을 기준으로 상대적으로 인접한 제 1번 커널 오프셋, 제 3번 커널 오프셋 및 제 9번 커널 오프셋이 인풋 포인트와 아웃풋 포인트의 재사용 비율이 높은 것을 알 수 있다. 즉, 도면에 도시된 바와 같이 80~94%으로 데이터가 공유될 수 있는바, 이러한 특징을 활용하면 프로세서는 컨볼루션 연산을 수행함에 있어서 디램에 접근하는 횟수를 많이 줄일 수 있어, 전체 프로세스의 연산 속도를 증 가시킬 수 있다. 도 14 및 도 15의 결과에 비추어, 컨볼루션 연산을 시행한 경우 인풋 포인트와 아웃풋 포인트의 데이터 재사용 비율은 서로 인접한 커널 오프셋들기리의 데이터 재사용 비율이 거리가 먼 커널 오프셋들에 비해 데이터의 재사 용 비율이 높은 것을 알 수 있으며, 컨볼루션 연산을 수행함에 있어서 더 하위 계층의 레이어로 갈수록 특징 맵 이 더 밀집해지므로, 더 높은 데이터 재사용 비율을 얻을 수 있는 것을 확인할 수 있다. 이러한 경우 프로세서 는 on-chip buffer에 해당하는 메모리 모듈에 인풋/아웃풋의 특징을 저장하게 되면 최대 94%의 데이 터를 재사용할 수 있어, 프로세서가 인풋/아웃풋의 데이터를 취득하기 위해 디램으로 접근해야 하는 횟수 를 줄여, 전체 연산 속도를 증가시킬 수 있는 장점이 존재한다. 도 16은 종래 기술에 따른 컨볼루션 연산과 본 발명에 따른 컨볼루션 연산의 효율을 실험결과로 비교한 도면이 다. 도 16을 참고하면, 도 16에 도시된 바와 같이 종래 기술에 따라 컨볼루션 연산을 수행하는 경우 프로세서가 디 램에 접근해야 하는 횟수가 167,640회가 필요하였으나, 본 발명에 따른 프로세서의 경우 프로세서가 디램에 접근하는 횟수가 76,896회로서 종래 기술에 비해 디램에 대한 접근이 50프로 이상 줄어드는 것을 알 수 있다. 이로 인해, 본 발명에 따른 프로세서는 종래 기술에 따른 컨볼루션 연산보다 더 효율적으로 빠르게 컨볼루션 연산을 수행할 수 있는 것을 알 수 있다. 지금까지 도면을 통해 본 발명의 구성 및 프로세스에 대해 자세히 알아보았다. 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장치는 컨볼루션 연산 을 수행함에 있어서, 컨볼루션의 연산 패턴에 기초하여 기 사용되었던 데이터를 재사용 하므로, 특징 데이터를 메모리로부터 불러오기 위한 메모리 접근의 횟수가 줄어들어, 컨볼루션 연산 자체의 속도가 종래 기술보다 빨라 지는 장점이 존재한다. 또한, 이러한 특징으로 인해 3차원 공간에 존재하는 객체 인식의 속도를 증가시킬 수 있는바, 고차원 자율 주 행에 필수적인 고속 전방 장애물 인식을 효율적으로 수행할 수 있고, 빠르고 정확한 로봇 네비게이션을 위한RGB-D 기반 고속 위치 추정도 효율적으로 수행할 수 있는 장점이 존재한다. 이상에서 설명된 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치 및 구성요소는, 예를 들어, 프로세 서, 컨트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨 터, FPA(field programmable array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 운영 체제 상에서 수행되는 하나 이상의 소 프트웨어 애플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경"}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처 리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치에 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터 는 하나 이상의 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 상기 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단독으로 또는 조합하여 포함할 수 있다. 상기 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계 되고 구성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가 능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD- ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체 (magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도 록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다."}
{"patent_id": "10-2021-0112911", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범 위에 속한다."}
{"patent_id": "10-2021-0112911", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 인공신경망을 이용하여 점 구름 기반의 3차원 객체를 인식하는 알고리즘을 설명하기 위한 도면이다. 도 2는 도 1에 따라 3차원 객체를 인식하는 경우, 각각의 알고리즘이 전제 알고리즘에서 차지하는 비율을 표시 한 그래프이다. 도 3은 본 발명의 일 실시예에 따른 데이터 재사용을 통해 컨볼루션 연산 속도를 향상시킨 3차원 객체 인식 장 치의 일부 구성 요소를 도시한 블럭도이다. 도 4는 본 발명의 일 실시예에 따른 컨볼루션 인공신경망 모듈의 입력 정보 및 출력 정보를 도시한 도면이다. 도 5는 본 발명의 일 실시예에 다른 컨볼루션 인공신경망 모듈이 수행하는 컨볼루션 연산 과정을 도시한 도면이 다. 도 6은 본 발명의 일 실시예에 따른 제1컨볼루션과 제2컨볼루션을 설명하기 위한 도면이다. 도 7은 본 발명의 일 실시예에 따라, 제2컨볼루션 연산을 수행함에 있어서 적용되는 규칙을 설명하기 위한 도면 이다. 도 8은 본 발명의 일 실시예에 따라 제2컨볼루션 연산을 수행함에 있어서 스트라이드의 값에 맞추어 이동하는 커널의 모습을 도시한 도면이다. 도 9 내지 도 11은 스트라이드가 2이고 커널의 사이즈가 3X3X3인 커널을 기준으로, 본 발명에 따른 커널의 오프 셋 배열 순서를 도시한 도면이다. 도 12 내지 도 15는 본 발명에 따라 컨볼루션 연산을 수행함에 있어서, 0번 커널 오프셋을 기준으로 각각의 커널 오프셋과 아웃풋 데이터가 재사용되는 결과를 도시한 도면이다. 도 16은 종래 기술에 따른 컨볼루션 연산과 본 발명에 따른 컨볼루션 연산의 효율을 실험결과로 비교한 도면이 다."}
