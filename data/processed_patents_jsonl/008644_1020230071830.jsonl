{"patent_id": "10-2023-0071830", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0126383", "출원번호": "10-2023-0071830", "발명의 명칭": "메모리 접근 방법 및 상기 방법을 수행하는 전자 장치", "출원인": "삼성전자주식회사", "발명자": "로이, 아르납"}}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,프로세서; 및상기 프로세서와 전기적으로 연결되는 메모리를 포함하고,상기 프로세서는,상기 메모리의 복수의 뱅크 그룹을 포함하는 랭크를 결정하고;결정된 상기 랭크에 포함된 복수의 뱅크 중에서 접근할 메모리 주소와 관련된 뱅크를 결정하고;상기 메모리 주소와 대응하는 결정된 상기 뱅크의 복수의 행 및 복수의 열 중에서, 행 및 하나 이상의 열을 결정하고;결정된 상기 랭크, 결정된 상기 뱅크, 결정된 상기 행 및 결정된 상기 하나 이상의 열에 따른 주소 매핑 방식에기초하여, 상기 메모리에 접근하기 위한 상기 메모리 주소를 생성하는,전자 장치."}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 프로세서는,상기 메모리에 연결된 복수의 채널들 중에서, 상기 메모리에 포함된 NMA(near memory accelerator)에 접근하기위한 채널을 선택하는,전자 장치."}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 프로세서는,결정된 상기 하나 이상의 열에 대응하여, 열 식별자(column identity)를 생성하고,상기 열 식별자는,폭이 설정된 바이트 오프셋의 폭보다 크고, 설정된 랩 어라운드 윈도우(wrap around window) 내에서 반복되지않도록 설정되는,전자 장치."}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,공개특허 10-2024-0126383-3-결정된 상기 행은,모든 쓰기 주소에 대하여 히트된 행에 대응하는,전자 장치."}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 프로세서는,결정된 상기 랭크에 포함된 복수의 뱅크 그룹 중에서 서로 다른 뱅크 그룹으로부터 복수의 뱅크를 결정하는,전자 장치."}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "메모리의 복수의 뱅크 그룹을 포함하는 랭크를 결정하는 동작;결정된 상기 랭크에 포함된 복수의 뱅크 중에서 접근할 메모리 주소와 관련된 뱅크를 결정하는 동작;상기 메모리 주소와 대응하는 결정된 상기 뱅크의 복수의 행 및 복수의 열 중에서, 행 및 하나 이상의 열을 결정하는 동작; 및결정된 상기 랭크, 결정된 상기 뱅크, 결정된 상기 행 및 결정된 상기 하나 이상의 열에 따른 주소 매핑 방식에기초하여, 상기 메모리에 접근하기 위한 상기 메모리 주소를 생성하는 동작을 포함하는,메모리 접근 방법."}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 메모리에 연결된 복수의 채널들 중에서, 상기 메모리에 포함된 NMA(near memory accelerator)에 접근하기위한 채널을 선택하는 동작을 더 포함하는,메모리 접근 방법."}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,결정된 상기 하나 이상의 열에 대응하여, 열 식별자(column identity)를 생성하는 동작을 더 포함하고,상기 열 식별자는,폭이 설정된 바이트 오프셋의 폭보다 크고, 설정된 랩 어라운드 윈도우(wrap around window) 내에서 반복되지않도록 설정되는,메모리 접근 방법.공개특허 10-2024-0126383-4-청구항 9 제6항에 있어서,결정된 상기 행은,모든 쓰기 주소에 대하여 히트된 행에 대응하는,메모리 접근 방법."}
{"patent_id": "10-2023-0071830", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 뱅크를 결정하는 동작은,결정된 상기 랭크에 포함된 복수의 뱅크 그룹 중에서 서로 다른 뱅크 그룹으로부터 복수의 뱅크를 결정하는 동작을 포함하는,메모리 접근 방법."}
{"patent_id": "10-2023-0071830", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "메모리 접근 방법 및 상기 방법을 수행하는 전자 장치가 개시된다. 일 실시예에 따른 전자 장치는 프로세서 및 상기 프로세서와 전기적으로 연결되는 메모리를 포함하고, 상기 프로세서는, 상기 메모리의 복수의 뱅크 그룹을 포함하는 랭크를 결정하고, 결정된 상기 랭크에 포함된 복수의 뱅크 중에서 접근할 메모리 주소와 관련된 뱅크를 결정하고, 상기 메모리 주소와 대응하는 결정된 상기 뱅크의 복수의 행 및 복수의 열 중에서, 행 및 하나 이상의 열을 결정하고, 결정된 상기 랭크, 결정된 상기 뱅크, 결정된 상기 행 및 결정된 상기 하나 이상의 열에 따른 주 소 매핑 방식에 기초하여, 상기 메모리에 접근하기 위한 상기 메모리 주소를 생성할 수 있다."}
{"patent_id": "10-2023-0071830", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래의 개시는 메모리 접근 방법 및 상기 방법을 수행하는 전자 장치에 관한 것이다."}
{"patent_id": "10-2023-0071830", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능(AI)/머신러닝(ML), 빅데이터 등과 같은 다양한 응용 분야에서 메모리 집약적인 워크로드가 다수 사용 되고 있다. 방대한 양의 DRAM 액세스를 수행하기 위해서는 프로세서(중앙처리장치(CPU) 등)와 메모리(동적 랜 덤 액세스 메모리(DRAM) 등) 간 빈번한 통신이 필요하며, 또한 프로세서와 메모리 하위 시스템 간에 데이터를 전송하려면 높은 대역폭이 필요하다. 이러한 유형의 액세스는 시스템 성능을 저하시키고 시스템 전력 소비를 증가시킨다. 또한, 일반적인 서버 기반의 복잡한 처리 로직은 연산 집약적인 워크로드에 대해 높은 처리량을 달성할 수 있지 만, 메모리 집약적인 워크로드에 대해서는 높은 메모리 용량 또는 대역폭 요구로 인해 성능이 저하될 수 있다."}
{"patent_id": "10-2023-0071830", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시예들에 따른 전자 장치는 프로세서 및 상기 프로세서와 전기적으로 연결되는 메모리를 포함하고, 상 기 프로세서는, 상기 메모리의 복수의 뱅크 그룹을 포함하는 랭크를 결정하고, 결정된 상기 랭크에 포함된 복수 의 뱅크 중에서 접근할 메모리 주소와 관련된 뱅크를 결정하고, 상기 메모리 주소와 대응하는 결정된 상기 뱅크 의 복수의 행 및 복수의 열 중에서, 행 및 하나 이상의 열을 결정하고, 결정된 상기 랭크, 결정된 상기 뱅크, 결정된 상기 행 및 결정된 상기 하나 이상의 열에 따른 주소 매핑 방식에 기초하여, 상기 메모리에 접근하기 위 한 상기 메모리 주소를 생성할 수 있다. 상기 프로세서는, 상기 메모리에 연결된 복수의 채널들 중에서, 상기 메모리에 포함된 NMA(near memory accelerator)에 접근하기 위한 채널을 선택할 수 있다. 상기 프로세서는, 결정된 상기 하나 이상의 열에 대응하여, 열 식별자(column identity)를 생성하고, 상기 열 식별자는, 폭이 설정된 바이트 오프셋의 폭보다 크고, 설정된 랩 어라운드 윈도우(wrap around window) 내에서 반복되지 않도록 설정될 수 있다.결정된 상기 행은, 모든 쓰기 주소에 대하여 히트된 행에 대응할 수 있다. 상기 프로세서는, 결정된 상기 랭크에 포함된 복수의 뱅크 그룹 중에서 서로 다른 뱅크 그룹으로부터 복수의 뱅 크를 결정할 수 있다. 다양한 실시예들에 따른 메모리 접근 방법은 메모리의 복수의 뱅크 그룹을 포함하는 랭크를 결정하는 동작, 결 정된 상기 랭크에 포함된 복수의 뱅크 중에서 접근할 메모리 주소와 관련된 뱅크를 결정하는 동작, 상기 메모리 주소와 대응하는 결정된 상기 뱅크의 복수의 행 및 복수의 열 중에서, 행 및 하나 이상의 열을 결정하는 동작 및 결정된 상기 랭크, 결정된 상기 뱅크, 결정된 상기 행 및 결정된 상기 하나 이상의 열에 따른 주소 매핑 방 식에 기초하여, 상기 메모리에 접근하기 위한 상기 메모리 주소를 생성하는 동작을 포함할 수 있다. 상기 메모리 접근 방법은 상기 메모리에 연결된 복수의 채널들 중에서, 상기 메모리에 포함된 NMA(near memory accelerator)에 접근하기 위한 채널을 선택하는 동작을 더 포함할 수 있다. 상기 메모리 접근 방법은 결정된 상기 하나 이상의 열에 대응하여, 열 식별자(column identity)를 생성하는 동 작을 더 포함하고, 상기 열 식별자는, 폭이 설정된 바이트 오프셋의 폭보다 크고, 설정된 랩 어라운드 윈도우 (wrap around window) 내에서 반복되지 않도록 설정될 수 있다. 결정된 상기 행은, 모든 쓰기 주소에 대하여 히트된 행에 대응할 수 있다. 상기 뱅크를 결정하는 동작은, 결정된 상기 랭크에 포함된 복수의 뱅크 그룹 중에서 서로 다른 뱅크 그룹으로부 터 복수의 뱅크를 결정하는 동작을 포함할 수 있다."}
{"patent_id": "10-2023-0071830", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "실시예들에 대한 특정한 구조적 또는 기능적 설명들은 단지 예시를 위한 목적으로 개시된 것으로서, 다양한 형 태로 변경되어 구현될 수 있다. 따라서, 실제 구현되는 형태는 개시된 특정 실시예로만 한정되는 것이 아니며, 본 명세서의 범위는 실시예들로 설명한 기술적 사상에 포함되는 변경, 균등물, 또는 대체물을 포함한다. 제1 또는 제2 등의 용어를 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 해석되어야 한다. 예를 들어, 제1 구성요소는 제2 구성요소로 명 명될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이해되어야 할 것이다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 설명된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함 으로 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들 을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되 는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로해석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 메모리 집약적인 워크로드에서 성능을 향상시키기 위해서 처리 로직을 오프칩 메모리 근처에 배치하는 방법이 사용될 수 있다. 처리 로직을 오프칩 메모리 근처에 배치하는 방법으로, 처리 로직이 디지털 회로로 구성되고 메모리 블록 외부에 배치되는 메모리 근처 가속기(NMA, near memory accelerator) 등을 이용하는 메모리 외부 처리 방법, 처리 로직이 아날로그 또는 혼합 회로일 수 있으며 메모리 블록 내부에 배치되는 메모리 내 처리 방 법이 있다. 이 두 가지 기술은 오프칩 메모리의 더 높은 대역폭을 활용하고, DIMM(dual inline memory module)과 같은 최신 메모리 시스템의 제한된 핀 수로 인한 메모리 대역폭 문제를 해결할 수 있다. NMA는 메모 리 용량 문제를 완화할 수 있고, 메모리 블록의 내부 회로는 변경되지 않을 수 있다. NMA는 DRAM의 내부 대역폭을 활용하여 시스템 성능을 향상시키지만, 입력 워크로드의 주소 지정에 특정 제약 조 건을 추가하면 성능을 더욱 크게 향상시킬 수 있다. 이러한 주소 지정에 대한 제약은 호스트 CPU의 메모리 컨 트롤러(MC) 로직을 수정하여 유지할 수 있다. 그러나 메모리 컨트롤러 로직의 수정은 NMA 지원 DRAM 장치에만 유용하기 때문에, 수정이 바람직하지 않을 수 있다. 또한, NMA 기술에서는 전체 시스템 설계를 단순하게 유지하기 위해 호스트 프로세서 또는 시스템 온 칩(CPU SOC)에서 상당한 양의 수정이 필요할 수 있다. 그러나 호스트 메모리 컨트롤러(MC)는 호스트 CPU SOC 내부에서 복잡한 모듈 중 하나이기 때문에 호스트 MC의 로직 또는 설계를 수정하기가 용이하지 않을 수 있다. 따라서 호 스트 CPU에 구애받지 않는 시스템 설계를 위해, 일반적으로 호스트 CPU는 메모리 시스템 내부에 NMA의 존재를 인식하지 못하도록 설계될 수 있다. 도 1은 NMA(near memory accelerator)를 이용하는 메모리 접근 방법의 개략적인 블록도이다. 도 1과 같이, 호스트는 호스트 프로세서 및 호스트 MC(memory controller)를 포함할 수 있다. 호스트는 DIMM(dual inline memory module)에 연결될 수 있다. DIMM은 DIMM PHY, 주소 디코더 및 요청 전달 로직, NMA(near memory accelerator), 경로 결정 로직 및 DDR PHY 및 물 리적 DRAM을 포함할 수 있다. 호스트 MC는 호스트 프로세서의 메모리 접근 요청을 DIMM PHY로 전송할 수 있다. 호스트 MC는 Cmd bus, Address bus를 통해 명령어, 메모리 주소를 전송할 수 있다. 호스트 MC는 (메모리 접근 요청이 쓰기 명령을 포함하는 경우) Data bus를 통해 DIMM PHY로 메모리에 쓰기 위한 데이터를 전송 하거나, 또는 (메모리 접근 요청이 읽기 명령을 포함하는 경우) DIMM PHY로부터 메모리에서 읽은 데이터를 수신할 수 있다. DIMM PHY는 주소 디코더 및 요청 전달 로직로 메모리 접근 요청을 전송할 수 있다. DIMM PHY 는 명령어, 메모리 주소를 주소 디코더 및 요청 전달 로직로 전송할 수 있다. 메모리 접근 명령에 따라, DIMM PHY는 주소 디코더 및 요청 전달 로직으로 데이터를 전송하거나, 또는 주소 디코더 및 요청 전 달 로직로부터 데이터를 수신할 수 있다. 주소 디코더 및 요청 전달 로직는 메모리 접근 요청을 (NMA 요청인 경우) NMA 경로를 통해 NMA로 전 송하거나, 또는 바이패스 경로(Host의 요청인 경우)를 통해 DDR PHY 및 물리적 DRAM로 전송할 수 있다. NMA는 NMA MC(memory controller) 및 처리 엔진(processing engine)을 포함할 수 있다. NMA MC는 NMA 요청을 처리할 수 있다. NMA 요청은 NMA에 대한 로드(load)/저장(store) 지시 (instruction)를 포함할 수 있다. 처리 엔진은 DRAM으로부터 수신된 데이터를 처리하기 위한 데이터 경로 를 포함할 수 있다. 처리 엔진은 DRAM의 높은 내부 대역폭을 활용하여 데이터 처리를 가속화할 수 있다. 호스트는 WR 주소(또는 쓰기 주소, write address)가 예약된 주소인 WR 명령(또는 쓰기 명령, write command)으로 NMA 명령을 호스트 MC를 통해 NMA로 전송할 수 있다. NMA 명령은 WR 데이터(또는 쓰기 데이터, write data)에 패킹될 수 있다. 도 2는 NMA의 개략적인 블록도이다. 도 2와 같이, NMA MC는 글로벌 버퍼(GB, global buffer)/지시 버퍼(instruction buffer) 및 스케쥴 링 로직을 포함할 수 있다. 글로벌 버퍼/지시 버퍼는 NMA 로드(load)/저장(store) 지시에 대한 스토리지(storage)를 제공할 수 있다. 스케쥴링 로직은 예를 들어, 유한 상태 머신(finite state machine, FSM), 중재 로직(arbitration logic) 및 NMA 명령을 위한 스토리지를 포함할 수 있다. 스케쥴링 로직은 글로벌 버퍼/지시 버퍼로부터 NMA 명령을 가져올 수 있다. 스케쥴링 로직은 NMA 명령을 적절한 DRAM 명령으로 변환하여, 생성된 DRAM 명령 을 스케쥴링할 수 있다. NMA MC의 스루풋(throughput)은 호스트 MC에서 글로벌 버퍼/지시 버퍼로 NMA 명령을 전달하는 속도, 글로벌 버퍼/지시 버퍼에서 NMA 명령을 처리하는 속도에 따라 결정될 수 있다. 글로벌 버퍼/지시 버퍼에서 NMA 명령을 처리하는 속도는 행 버퍼 지역성(row buffer locality)에 따라 결 정될 수 있다. 행 버퍼 지역성을 이용하는 경우, 글로벌 버퍼/지시 버퍼는 DRAM 행을 열린 상태로 유지하 면서 열린 행에서 다중 읽기 및 쓰기를 수행하도록 NMA 명령을 처리할 수 있다. DRAM 행을 열린 상태로 유지하 면서 열린 행에서 다중 읽기 및 쓰기를 수행하는 경우, DRAM 행을 열고 닫는데 사용되는 활성화(ACT, activate) 및 사전 충전(PRE, precharge) 명령의 일부 오버헤드가 제거되어, NMA MC의 스루풋이 향상될 수 있다. NMA MC의 스루풋은 행 버퍼 지역성과 관련한 두가지 요인에 영향을 받을 수 있다. 예를 들어, 행 버퍼 지 역성과 관련한 두가지 요인은 NMA 명령 중 행 버퍼 지역성, 사용 가능한 행 버퍼 지역성을 활용하는 NMA MC의 효율성을 포함할 수 있다. NMA 명령 중 행 버퍼 지역성은 글로벌 버퍼/지시 버퍼의 NMA 명령 시퀀스에서 사용 가능한 행 버퍼 지역성 의 정도를 나타낼 수 있다. NMA MC의 효율성은 스케쥴링 로직이 행 버퍼 지역성을 얼마나 효율적으 로 활용하는지에 따라 결정될 수 있다. NMA MC의 스루풋에 영향을 미치는 다른 요인으로는, 사용 가능한 뱅크 병렬 처리, 뱅크 병렬 처리를 활용 하는 NMA MC의 효율성 등을 포함할 수 있다. 행 버퍼 지역성은 행 히트(row hit)를 초래할 수 있다. 행 히트에 따라 메모리에 접근할 때, 메모리는 뱅크의 행을 닫고 열 필요가 없다. 따라서, DRAM의 스루풋이 향상될 수 있다. 호스트 MC는 행 버퍼 지역성을 활 용하기 위해, 지능형 스케쥴링 로직을 포함할 수 있다. 호스트 MC는 지능형 스케쥴링 로직에 따라 처리하 는 요청을 셔플링(shuffling)할 수 있다. 호스트 MC는 DIMM 내부에 NMA이 존재한다는 것을 인지하거나, 고려하지 않기 때문에, 호스트 MC의 스케쥴링 로직은 NMA의 성능에 부정적인 영향을 미칠 수 있다. 셔플링 전의 NMA 명령 시퀀스의 행 버퍼 지역성이 높은 경우, 호스트 MC는 행 버퍼 지역성이 감소되는 불리한 방향으로 NMA 명령을 셔플링 하지 않는 것이 바람직할 수 있다. 또한, 호스트 MC의 스케쥴링 알고리즘은 일반적으로 오프칩 메모리(예: DRAM)의 성능 향상을 위하여 최적 화될 수 있다. 스케쥴링 알고리즘은 NMA의 메모리 접근 트래픽에 대한 지식이 부족하기 때문에, 셔플링에 따라 성능이 저하될 수 있다. NMA의 실제 트래픽(예: 호스트 프로세서에 의해 생성된 NMA 요청의 원래 시퀀스)을 보존하기 위해서 는, 호스트 MC의 스케쥴링 알고리즘에 따른 셔플링이 수행되지 않아야 한다. 도 3은 호스트 MC(memory controller)가 NMA 명령(instruction)을 셔플링하는 예를 나타낸 도면이다. NMA 명령은 메모리 접근 요청으로 호칭될 수 있다. 도 3에서 메모리 접근 요청들(301, 302, 303, 304, 305, 306, 307)은 제1 메모리 접근 요청, 제2 메모리 접근 요청, 제3 메모리 접근 요청, 제4 메모리 접근 요청, 제5 메모리 접근 요청, 제6 메 모리 접근 요청, 제7 메모리 접근 요청 순서로 호스트 MC에 도착할 수 있다. 도 3에서, 제1 메모리 접근 요청은 뱅크 그룹(BG) 2, 뱅크(BA) 1, 행(RO) 아이디 37, 열(CO) 아이디 56에 대한 요청을 나 타낼 수 있고, 제2 내지 제7 메모리 접근 요청(302 내지 307)에도 실질적으로 동일한 설명이 적용될 수 있다. 호스트 MC는 메모리 접근 요청들(301, 302, 303, 304, 305, 306, 307)을 셔플링하고, 셔플링된 순서로 메 모리 접근 요청들(301, 302, 303, 304, 305, 306, 307)을 DIMM으로 전송할 수 있다. 호스트 MC는 제1 메모리 접근 요청, 제2 메모리 접근 요청, 제4 메모리 접근 요청, 제6 메모리 접근 요청 , 제7 메모리 접근 요청, 제3 메모리 접근 요청, 제5 메모리 접근 요청 순서로 DIMM(10 3)으로 전송할 수 있다. 제1 메모리 접근 요청 및 제2 메모리 접근 요청는 호스트 MC에 도착한 순서와 동일하게 DIMM으로 전송될 수 있다. 제3 메모리 접근 요청은 제4 메모리 접근 요청보다 빨리 호스트 MC에 도착하고, 제2 메모리 접근 요청와 동일한 뱅크 그룹을 가지므로, 호스트 MC는 스케쥴링 알고리즘에 따라 제3 메모리 접근 요청 대신 다른 뱅크 그룹에 속하는 제4 메모리 접근 요청를 전송 할 수 있다. 제5 메모리 접근 요청, 제6 메모리 접근 요청, 제7 메모리 접근 요청이 도착하면, 제4 메모리 접근 요청, 제5 메모리 접근 요청, 제7 메모리 접근 요청이 동일한 뱅크 그룹 아이디를 가지기 때문에, 호스트 MC는 제3 메모리 접근 요청 또는 제6 메모리 접근 요청을 선택할 수 있다. 도 3은 호스트 MC가 제6 메모리 접근 요청을 4번째로 전송하는 예를 나타낸다. 제4 메모리 접근 요청와 제7 메모리 접근 요청은 뱅크 그룹 1의 뱅크 2의 동일한 행 27에 속하기 때 문에, 호스트 MC는 행 히트를 활용하기 위하여 제7 메모리 접근 요청을 5번째로 전송할 수 있다. 제 3 메모리 접근 요청과 제5 메모리 접근 요청가 서로 다른 뱅크 그룹에 속하기 때문에, 호스트 MC는 제3 메모리 접근 요청을 제5 메모리 접근 요청 보다 먼저 전송하고, 제5 메모리 접근 요청 를 7번째로 전송할 수 있다. 도 3과 같이, 호스트 MC는 스케쥴링 알고리즘을 이용하여 NMA 명령들을 셔플링할 수 있다. 즉, 호스트 MC는 NMA 명령들을 셔플링하여, 호스트 MC에 도착하는 NMA 명령들의 순서와 호스트 MC에서 전송 되는 NMA 명령들의 순서가 달라질 수 있다. 도 4는 다양한 실시예들에 따른 전자 장치가 메모리 접근 방법을 수행하는 동작을 나타낸 도면이다. 도 4를 참조하면, 전자 장치는 동작에서 메모리의 복수의 뱅크 그룹을 포함하는 랭크를 결정할 수 있다. 랭크는 복수의 뱅크 그룹을 포함할 수 있다. 복수의 뱅크 그룹 각각은 복수의 뱅크들을 포함할 수 있다. 예를 들어, 전자 장치는 랭크 결정 로직(rank selection logic)에 따라 랭크를 결정할 수 있다. 예를 들어, 메모리가 DRAM(dynamic random access memory)인 경우, 메모리는 복수의 랭크를 포함하고, 복수의 랭크들 각각은 복수의 뱅크들을 포함할 수 있다. 예를 들어, DRAM은 랭크 0과 랭크 1을 가질 수 있다. 메모리에 접근할 메모리 주소를 결정함에 있어서, 각 메모리 주소에 대응하는 랭크를 임의로 선택하는 경우, 호 스트 MC는 메모리 접근 요청의 순서를 셔플링할 수 있다. 따라서, 각 메모리 주소에 대응하는 랭크를 임의로 선택하는 경우, 메모리 접근 요청 순서에 따른 메모리 주소의 순서가 뒤섞일 수 있다. 또한, 선택된 랭크는 복수의 뱅크 그룹(예: 뱅크 그룹 1(BG 1), 뱅크 그룹 2(BG 2), 뱅크 그룹 3(BG 3), 뱅크 그룹 4(BG 4) 등)을 포함할 수 있다. 각 뱅크 그룹은 복수의 뱅크 또는 뱅크 어레이(bank array)(예: 뱅크 1(BA 1), 뱅크 2(BA 2), 뱅크 3(BA 3), 뱅크 4(BA 4) 등)를 포함할 수 있다. 일 실시 예에 따르면, 전자 장치는 메모리(예: DRAM)에 연결된 복수의 채널들 중에서 채널을 선택할 수 있다. 전자 장치는 랭크를 선택하기 전에 복수의 채널들 중에서 채널을 선택할 수 있다. 일례로, 메모리는 DIMM PHY(예: 도 1의 DIMM PHY), 주소 디코더 및 요청 전달 로직(예: 도 1의 주소 디코 더 및 요청 전달 로직), NMA(예: 도 1, 도 2의 NMA), 경로 결정 로직(예: 도 1의 경로 결정 로직 ), DDR PHY 및 physical DRAM(예: 도 1의 DDR PHY 및 physical DRAM)을 포함할 수 있다. NMA는 결 정된 채널을 통해 접속될 수 있다. 예를 들어, 전자 장치는 채널 결정 로직(channel selection logic)에 따라 복수의 채널들 중에서 채널을 결정할 수 있다. 전자 장치는 동작에서 결정된 랭크에 포함된 복수의 뱅크 중에서 접근할 메모리 주소와 관련된 뱅크를 결 정할 수 있다. 일례로, 전자 장치는 복수의 뱅크 중에서 하나 이상의 뱅크를 선택할 수 있다. 뱅크 및/또는 뱅크 어레이 각각은 대응하는 메모리 주소에 대한 복수의 행 및 복수의 열을 포함할 수 있다. 예를 들어, 전자 장치는 뱅크 그룹 및 뱅크 선택 로직(bank group and bank selection logic)에 따라 복수의 뱅크 그룹에 포함된 복수의 뱅크 중에서 뱅크를 결정할 수 있다. 전자 장치는 동작에서 메모리 주소에 대응하는 결정된 뱅크의 복수의 행 및 복수의 열 중에서 행 및 하나 이상의 열을 결정할 수 있다. 예를 들어, 뱅크 1(BA 1)은 복수의 행(예: 행 0(RO 0), 행 1(RO 1), 행 2(RO 2), 행 3(RO 3) 등)을 포함할 수 있다. 예를 들어, 뱅크 1(BA 1)은 복수의 열(예: 열 0(CO 0), 열 1(CO 1), 열 2(CO 2), 열 3(CO 3) 등)을 포 함할 수 있다. 전자 장치는 뱅크의 복수의 행 중에서 하나의 행을 선택하고, 복수의 열 중에서 하나 이상의 열을 선택할 수 있 다. 예를 들어, 전자 장치는 제1 메모리 접근 요청의 행을 RO 37, 열을 CO 27로 결정하고, 제2 메모리 접근 요청의 행을 RO 37, 열을 CO 27, 제3 메모리 접근 요청의 행을 RO 37, 열을 CO 45로 결정할 수 있다. 위와 같이, 전자 장치는 모든 메모리 접근 요청(예: 쓰기 요청 또는 읽기 요청)의 메모리 주소들이 히트된 행 주소에 대응하도록 메모리 접근 요청의 행을 결정할 수 있다. 예를 들어, 전자 장치는 어레이 선택 로직(array selection logic)에 따라 복수의 행 중에서 하나의 행을 선택 하고, 복수의 열 중에서 하나 이상의 열을 선택할 수 있다. 예를 들어, 전자 장치는 행 선택 로직(row selection logic)에 따라 복수의 행 중에서 하나의 행을 선택할 수 있다. 전자 장치는 열 선택 로직(column selection logic)에 따라 복수의 열 중에서 하나 이상의 열을 선택할 수 있다. 전자 장치는 동작에서 결정된 랭크, 결정된 뱅크, 결정된 행 및 결정된 하나 이상의 열에 따른 주소 매핑 방식에 기초하여, 메모리에 접근하기 위한 메모리 주소를 생성할 수 있다. 예를 들어, 전자 장치는 <뱅크 그룹, 뱅크, 행, 열>을 포함하는 메모리 주소를 생성할 수 있다. 전자 장치는 <2, 1, 37, 27>, <2, 1, 37, 45>, <2, 1, 37, 16>, <2, 1, 37, 5>, <2, 1, 37, 23>, <2, 1, 37, 57>, <2, 1, 37, 12>와 같은 메모리 주소를 생성할 수 있다. 메모리 주소들은 동일한 랭크, 뱅크 그룹, 뱅크 및 행을 포함 할 수 있다. 메모리 주소들은 동일한 랭크, 뱅크 그룹, 뱅크 및 행을 포함하기 때문에, 메모리 접근 요청에 따 라 메모리에 접근할 때 행 히트가 발생할 수 있다. 호스트 MC에 도착하는 메모리 접근 요청에 포함된 메모리 주소의 뱅크가 하나인 경우, 호스트 MC가 메모리 접근 요청을 연속적으로 DIMM으로 전송하는 동안 타이밍 파라미터(예: tCCDl, 선택된 뱅크 그룹 접근 후 동일 뱅크 그룹에 접근하기까지 지연되는 시간)이 발생할 수 있다. 일 실시 예에 따르면, 전자 장치는 서로 다른 뱅크 그룹으로부터 두 개 이상의 뱅크를 선택할 수 있다. 두 개 의 서로 다른 뱅크 그룹에 대한 연속 쓰기 사이의 열 간 지연은 동일한 뱅크 그룹에 대한 두 개의 연속 쓰기 사 이의 열 간 지연보다 작을 수 있다. 서로 다른 뱅크 그룹으로부터 두 개 이상의 뱅크가 선택되는 경우, 연속되 는 메모리 접근 요청을 처리할 때 동일한 뱅크 그룹에 대한 접근 요청에 의한 지연(예: tCCDl)보다 짧은 지연 (예: tCCD, 서로 다른 뱅크 그룹을 번갈아 접근할 때 발생하는 지연)이 발생할 수 있다. 예를 들어, 전자 장치가 두 개의 뱅크 그룹으로부터 각각 뱅크를 결정하는 경우, 생성된 메모리 접근 요청에 따 라 각 뱅크 그룹의 뱅크의 행을 고정된 상태로 유지하면서, 전자 장치는 두 개 이상의 뱅크에 번갈아 접근할 수 있다. 일 실시 예에 따르면, 전자 장치는 쓰기 병합(write coalescing)이 발생하지 않도록, 하나 이상의 열을 선택할 수 있다. 호스트 MC는 DIMM과의 통신의 빈도, 데이터 등을 줄이기 위해 쓰기 병합 방법으로 쓰기(저장) 연산을 최적화할 수 있다. 쓰기 병합 방법을 사용하면, 호스트 MC는 연속된 열 위치 또는 바이트 오프셋(byte offse t)에 속하는 복수의 쓰기 요청/주소를 단일 요청으로 통합할 수 있다. NMA 연산을 위한 명령어는 메모리(예:DRAM) 쓰기 데이터 내에 포함되어 있기 때문에, 쓰기 병합 방법을 사용하는 경우 NMA 명령의 패킷이 손실될 수 있다. NMA 명령의 패킷이 손실되는 경우, NMA 동작의 기능적 정확성 등에 영향을 미칠 수 있다. 따라서, NMA를 위한 쓰기 주소를 생성할 때, 열 식별자(예: column_ID), 즉 적어도 하나의 열을 적절하게 선택 하여, 쓰기 병합에 따른 NMA 명령의 패킷 손실을 예방할 수 있다. 일 실시 예에 따르면, 전자 장치는 적어도 하나의 열에 대응하는 열 식별자(예: col_ID)를 생성할 때, 열 식별 자의 폭(width)이 바이트 오프셋의 폭(width)보다 크고, 랩 어라운드 윈도우(wrap around window) 내에서 반복 되지 않는 열 식별자를 생성할 수 있다. 예를 들어, 전자 장치는 증가하는 열 식별자의 증분을 temp_col_id++와 같이 생성할 수 있고, 실제 열 식별자 col_id=temp_col_id<<log2(byte_offset)으로 생성할 수 있다. 위와 같은 방법으로, 생성되는 열 식별자는 항상 적어도 바이트 오프셋(즉, 쓰기 병합 윈도우(write coalescing window))만큼 떨어져 있을 수 있다. 또한, 쓰기 버퍼 내의 동일한 열 식별자를 가지는 메모리(예: DRAM) 쓰기 주소에서 충돌을 피하기 위해 동일한 열 식별자에 대한 랩 어라운드(또는, 랩 어라운드 길이(wrap around length))가 중요할 수 있다. 랩 어라운드 길이는 (열의 길이(column length)-log2(byte_offset))으로 결정될 수 있다. 예를 들어, 바이트 오프셋이 8인 경우, log2(byte_offset)은 3(A[2:0])이고, 열의 길이가 10인 경우, 랩 어라운드 길이는 2(10- 3)=128일 수 있다. 위의 예와 같이, 열의 길이가 더 큰 메모리(예: DRAM)의 경우, 더 큰 랩 어라운드 길이를 가질 수 있다. 예를 들어, 두 개의 뱅크가 선택되는 경우, 랩 어라운드 길이는 각 뱅크에 독립적으로 적용될 수 있다. 따라서, 유효 랩 어라운드 길이는 원래 랩 어라운드 길의 두배가 될 수 있다. 전자 장치는 메모리 접근 요청의 메모리 주소를 생성하여, 호스트 MC의 메모리 접근 요청의 셔플링을 감소시키 고, NMA에 의한 행 히트의 수를 증가시킬 수 있다. 행 히트 수가 증가하면, 메모리 접근 시간이 크게 감소시킬 수 있다. 따라서, 다양한 실시예들에 따라 메모리 접근 요청의 메모리 주소를 생성하여, 전자 장치의 하드웨어 설계 또는 구성을 변경하지 않고 NMA의 성능을 향상시킬 수 있다. 또한, 다양한 실시예들에 따라 메모리 접근 요청의 메모리 주소를 생성하는 방법은 각 시스템에 대하여 제약이 적으며, 쉽게 적용될 수 있다. 도 5는 다양한 실시예들에 따른 전자 장치의 개략적인 블록도이다. 도 5를 참조하면, 전자 장치는 프로세서, 메모리 컨트롤러 및 메모리를 포함할 수 있다. 예를 들어, 메모리는 DIMM(예: 도 1의 DIMM)을 포함할 수 있다. 프로세서는 메모리 컨트롤러 를 통해 DIMM에 포함된 NMA와 연결될 수 있다. 프로세서는 NMA를 통해 메모리(예: DRA M)과 연결되어, 메모리와 통신을 수행할 수 있다. 프로세서는 단일 처리 로직 또는 복수의 로직일 수 있으며, 복수의 컴퓨팅 로직을 포함할 수 있다. 프로 세서는 하나 이상의 마이크로프로세서, 마이크로 컴퓨터, 마이크로 컨트롤러, 디지털 신호 프로세서 , 중앙 처리 로직, 상태 머신, 논리 회로 및/또는 동작 명령에 기초하여 신호를 조작하는 임의의 전자 장 치로 구현될 수 있다. 프로세서는 메모리에 저장된 컴퓨터 판독 가능한 명령어 및 데이터를 가져와 서 실행할 수 있다. 전자 장치는 랭크 결정 로직(rank selection logic), 뱅크 그룹 및 뱅크 결정 로직(bank group and bank selection logic), 채널 결정 로직(channel selection logic), 어레이 결정 로직(array selection logic), 주 소 생성 로직(address generation logic)을 포함할 수 있다. 어레이 결정 로직은 행 결정 로직(row selection logic) 및 열 결정 로직(column selection logic)을 포함할 수 있다. 로직은 특정 작업을 수행하거나, 데이터 유형을 구현하는 루틴, 프로그램, 객체, 컴포넌트, 데이터 구조 등을 포함할 수 있다. 또한, 로직은 신호, 프로세서, 상태 머신, 논리 회로 및/또는 동작 명령에 기초하여 신 호를 조작하는 임의의 다른 전자 장치 또는 구성 요소로 구현될 수 있다. 또한, 로직은 하드웨어, 처리 로직(processing logic)에 의해 실행되는 명령어, 또는 이들의 조합에 의해 구현 될 수 있다. 처리 로직은 컴퓨터, 프로세서, 상태 머신, 논리 어레이 또는 명령을 처리할 수 있는 다른 적합한 전자 장치를 포함할 수 있다. 처리 로직은 범용 프로세서가 필요한 작업을 수행하도록 하는 명령을 실 행하는 범용 프로세서일 수 있으며, 또는 처리 로직은 필요한 기능을 수행하기 위해 전용될 수 있다. 로직은 프로세서/처리 로직에 의해 실행될 때, 설명된 기능 중 임의의 기능을 수행하는 기계 판독 가능한 명령어(또는 소프트웨어)일 수 있다. 로직들은 서로 통신할 수 있다. 예를 들어, 로직들은 프로세서의 일부일 수 있다. 일례로, 프로세서 는 로직의 기능들을 수행할 수 있다. 메모리 컨트롤러는 로직들, 프로세서, 메모리 등에 의해 처리, 수신 및 생성된 데이터를 저장하 기 위한 저장소로 동작할 수 있다. 도 6 및 도 7은 다양한 실시예들에 따른 전자 장치가 NMA 명령어의 랭크를 선택하는 예를 나타낸 도면이다. NMA 명령어는 메모리 접근 요청으로 호칭될 수 있다. 도 6은 전자 장치가 메모리 주소에 대응하는 메모리(예: DRAM)의 랭크를 랭크 0 또는 랭크 1 중에서 임의로 선택하는 경우, 프로세서가 메모리 컨트롤러로 전송하는 요청 전송 순서, 메모리 컨트롤 러가 메모리(예: DIMM)으로 전송하는 요청 전송 순서를 나타낸 도면이다. 도 7은 전자 장치가 메모리 주소에 대응하는 메모리(예: DRAM)의 랭크를 랭크 0 또는 랭크 1 중에서 하나로 선택하는 경우, 프로세서가 메모리 컨트롤러로 전송하는 요청 전송 순서, 메모리 컨트롤 러가 메모리(예: DIMM)으로 전송하는 요청 전송 순서를 나타낸 도면이다. 도 6과 같이, 프로세서가 랭크를 임의로 선택하는 경우, 메모리 컨트롤러가 메모리로 전송하는 요청 전송 순서는 프로세서가 메모리 컨트롤러로 전송하는 요청 전송 순서와 다른 것을 확 인할 수 있다. 메모리 컨트롤러는, 예를 들어 스케쥴링 알고리즘에 따라 요청 전송 순서을 셔플링하 여, 요청 전송 순서와 같이 메모리 접근 요청들을 메모리으로 전송할 수 있다. 도 7과 같이, 프로세서가 랭크를 하나로 선택하는 경우(도 7의 경우 랭크 0), 메모리 컨트롤러가 메 모리로 전송하는 요청 전송 순서는 프로세서가 메모리 컨트롤러로 전송하는 요청 전송 순 서와 동일한 것을 확인할 수 있다. 메모리 컨트롤러는, 예를 들어 요청 전송 순서를 셔플링하 지 않고, 요청 전송 순서과 동일한 순서인 요청 전송 순서와 같이 메모리 접근 요청들을 메모리(50 6)으로 전송할 수 있다. 도 7과 같이, 전자 장치가 복수의 랭크 중에서 하나의 랭크를 선택하는 경우, 랭크 리프레쉬 딜레이(rank refresh delay)에 의하여 다소의 시간이 낭비될 수 있다. 예를 들어, 랭크 0 또는 랭크 1 중에서 랭크 0이 선 택되는 경우, 랭크 0을 리프레쉬하는 동안 랭크 0에 대한 메모리 접근이 수행될 수 없다. 즉, 랭크 0에 대한 리프레쉬 윈도우 시간 동안 랭크 0에 대한 메모리 접근이 정지되거나, 랭크 0에 대한 메모리 접근이 수행되지 않을 수 있다. 그러나, 메모리 접근 요청들의 랭크가 0으로 고정된 경우(랭크 1이 사용되지 않는 경우), 메모리 접근 요청들이 셔플되지 않는다. 또한, 메모리 컨트롤러(예: 도 1 내지 도 3의 호스트 MC)로부터 글로벌 버퍼/지시 버퍼로 모든 메모리 접근 요청이 전송되는 시간에 비하여 소요 시간(예: 랭크 0 리프레쉬 윈도우 시간) 또 는 유휴 사이클(idle cycle)은 매우 작다. 따라서, 전자 장치가 랭크를 선택함으로써 메모리 컨트롤러 는 메모리 접근 요청들을 셔플링하지 않고, 프로세서가 생성한 메모리 접근 요청들의 행 버퍼 지역성 이 유지되어, 전체적인 메모리 접근 요청을 수행하기 위한 시간이 감소되거나 또는 개선될 수 있다. 도 8 및 도 9는 다양한 실시예들에 따른 전자 장치가 NMA를 이용하여 메모리에 접근하는 동작을 나타 낸 도면이다. 도 8에서, 전자 장치는 결정된 랭크, 결정된 뱅크, 결정된 행 및 결정된 하나 이상의 열을 이용하여, 메모 리 접근 명령의 메모리 주소들을 생성할 수 있다. 예를 들어, 전자 장치는 도 8과 같이 제1 메모리 접근 요청, 제2 메모리 접근 요청, 제3 메모리 접근 요청, 제4 메모리 접근 요청, 제5 메모리 접근 요청, 제6 메모리 접근 요청, 제7 메모리 접근 요청를 생성할 수 있다. 제1 메모리 접근요청 내지 제7 메모리 접근 요청(801~807)에 각각 포함된 메모리 주소는 <2, 1, 37, 27>, <2, 1, 37, 45>, <2, 1, 37, 16>, <2, 1, 37, 5>, <2, 1, 37, 23>, <2, 1, 37, 57>, <2, 1, 37, 12>이다. 메모리 주소는 <(뱅크 그 룹), (뱅크), (행), (열)>을 나타낸다. 메모리 컨트롤러는 제1 메모리 접근 요청, 제2 메모리 접근 요청, 제3 메모리 접근 요청, 제4 메모리 접근 요청, 제5 메모리 접근 요청, 제6 메모리 접근 요청, 제7 메모리 접근 요청 순서로 메모리 접근 요청을 수신할 수 있다. 제1 메모리 접근 요청 내지 제7 메모리 접근 요청(801~807)은 결정된 랭크, 결정된 뱅크, 결정된 행에 따라 메 모리 주소가 결정되기 때문에, 메모리 컨트롤러는 수신한 순서와 동일하게 제1 메모리 접근 요청 내지 제7 메모리 접근 요청(801~807)를 메모리로 전송할 수 있다. 또한, 메모리 주소의 뱅크 그룹, 뱅크 및 행이 모두 동일하므로, NMA가 메모리(예: DRAM)에 접근할 때, 행 히트가 발생할 수 있다. 도 8과 같이, 전자 장치는 메모리 컨트롤러에 전송되는 메모리 접근 요청의 메모리 주소(예: 쓰기 주 소 또는 읽기 주소)에 대해, 히트된 행에 대응하는 방식으로 행을 결정할 수 있다. 특히, 모든 메모리 접근 요 청이 행 히트에 대응하도록, 전자 장치는 각각의 메모리 접근 요청에 대한 행 식별자(예: row_ID)를 생성 할 수 있다. 도 9는 전자 장치가 결정된 랭크에 포함된 복수의 뱅크 그룹 중에서 서로 다른 뱅크 그룹으로부터 복수의 뱅크를 결정하였을 때 생성한 메모리 접근 요청을 나타낸다. 도 9는 전자 장치가 뱅크 그룹 2(BG 2)의 뱅 크 1(BA 1)과 뱅크 그룹 3(BG 3)의 뱅크 0(BA 0)을 선택한 예를 나타낸다. 전자 장치는 뱅크 그룹 2, 뱅크 1에 대한 행을 행 37(RO 37)으로 결정하고, 뱅크 그룹 3, 뱅크 0에 대한 행을 행 56(RO 56)으로 결정할 수 있다. 제1 메모리 접근 요청은 뱅크 그룹 2에 대응하고, 제2 메모리 접 근 요청는 뱅크 그룹 3에 대응할 수 있다. 제1 메모리 접근 요청과 제2 메모리 접근 요청는 서로 다른 뱅크 그룹, 뱅크 및 행에 대응하기 때문 에, 행 히트가 발생하지 않는다. 그러나, 제1 메모리 접근 요청은 제3 메모리 접근 요청, 제5 메모 리 접근 요청, 제7 메모리 접근 요청과 동일한 뱅크 그룹, 뱅크 및 행에 대응할 수 있다. 또한, 제2 메모리 접근 요청은 제4 메모리 접근 요청, 제6 메모리 접근 요청과 동일한 뱅크 그룹, 뱅크 및 행에 대응할 수 있다. 따라서, 제1 메모리 접근 요청과 제2 메모리 접근 요청 각각에 후속하는 메모 리 접근 요청들에 의하여 행 히트가 발생할 수 있다. 메모리 컨트롤러는 스케쥴링 알고리즘에 따라, 메모리 컨트롤러에 입력된 메모리 접근 요청의 순서대 로 메모리 접근 요청들을 메모리로 전송할 수 있다. 예를 들어, 메모리 컨트롤러는 제1 메모리 접근 요청, 제2 메모리 접근 요청, 제3 메모리 접근 요청, 제4 메모리 접근 요청, 제5 메모리 접근 요청, 제6 메모리 접근 요청, 제7 메모리 접근 요청 순서로 메모리 접근 요청을 수신할 수 있다. 메모리 컨트롤러는 수신한 순서와 동일하게 제1 메모리 접근 요청 내지 제7 메모리 접근 요청 (901~907)를 메모리로 전송할 수 있다. 즉, 메모리 컨트롤러는 메모리 접근 요청들을 셔플링하지 않 고, 수신한 순서와 동일한 순서로 메모리로 전송할 수 있다. 도 9는 전자 장치가 서로 다른 두 개의 뱅크 그룹으로부터 두 개의 뱅크를 결정하는 예를 나타내고 있으나, 전자 장치는 이에 한정되지 않고 4개의 서로 다른 뱅크 그룹으로부터 4개의 뱅크를 결정하는 등과 같이, 다양한 방법으로 복수의 뱅크를 결정할 수 있다. 이상에서 설명된 실시예들은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨 어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치, 방법 및 구성요소는, 예를 들 어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로 프로세서, 또는 명령(instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 범용 컴퓨터 또 는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행 되는 소프트웨어 애플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를"}
{"patent_id": "10-2023-0071830", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소 (processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치 는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프 로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파(signal wave)에 영구적으로, 또는 일시적으로 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단 독으로 또는 조합하여 저장할 수 있으며 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구 성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다. 위에서 설명한 하드웨어 장치는 실시예의 동작을 수행하기 위해 하나 또는 복수의 소프트웨어 모듈로서 작동하 도록 구성될 수 있으며, 그 역도 마찬가지이다."}
{"patent_id": "10-2023-0071830", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가진 자라면 이를 기초로 다양한 기술적 수정 및 변형을 적용할 수 있다. 예를 들어, 설명된 기술들이 설명된 방법과 다른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9"}
{"patent_id": "10-2023-0071830", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 NMA(near memory accelerator)를 이용하는 메모리 접근 방법의 개략적인 블록도이다. 도 2는 NMA의 개략적인 블록도이다. 도 3은 호스트 MC(memory controller)가 NMA 명령(instruction)을 셔플링하는 예를 나타낸 도면이다. 도 4는 다양한 실시예들에 따른 전자 장치가 메모리 접근 방법을 수행하는 동작을 나타낸 도면이다. 도 5는 다양한 실시예들에 따른 전자 장치의 개략적인 블록도이다. 도 6 및 도 7은 다양한 실시예들에 따른 전자 장치가 NMA 명령어의 랭크를 선택하는 예를 나타낸 도면이다. 도 8 및 도 9는 다양한 실시예들에 따른 전자 장치가 NMA를 이용하여 메모리에 접근하는 동작을 나타낸 도면이 다."}
