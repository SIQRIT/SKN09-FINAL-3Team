{"patent_id": "10-2023-7028022", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0128567", "출원번호": "10-2023-7028022", "발명의 명칭": "딥러닝 프레임워크의 연산자 처리 방법, 장치, 전자 기기, 저장 매체 및 컴퓨터 프로그램", "출원인": "베이징 바이두 넷컴 사이언스 테크놀로지 컴퍼니", "발명자": "첸 웨이항"}}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "딥러닝 프레임워크의 연산자 처리 방법으로서,연산자 커널 함수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함하는 처리 대상 연산자를 획득하는것;상기 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 상기 입력 정보를 이용하여 상기 템플릿 매개변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻는 것; 및복수의 완전한 템플릿 매개 변수에 따라 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할수 있는 사용 가능 연산자를 얻는 것을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 상기 입력 정보를 이용하여 상기 템플릿 매개 변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻는 것은,매크로를 이용하여 가변 매개 변수 리스트를 생성하는 것; 및상기 가변 매개 변수 리스트에 기반하여 상기 템플릿 매개 변수를 반복하여 해석하는 것을 포함하되, 상기 입력 정보를 상기 매크로의 매크로 매개 변수로 하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 가변 매개 변수 리스트는,처리 대상 연산자의 이름;상기 연산자 커널 함수의 이름;상기 연산자 커널 함수의 데이터 레이아웃;상기 딥러닝 프레임워크를 구현하기 위한 기기 유형; 및 상기 딥러닝 프레임워크를 구현하기 위한 데이터 유형을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,상기 가변 매개 변수 리스트에 기반하여 상기 템플릿 매개 변수를 반복하여 해석하는 것은,상기 매크로에 포함되는 매개 변수 수를 결정하는 것;상기 매개 변수 수에 따라 반복 종료 위치를 결정하는 것; 및 가변 매개 변수 리스트를 이용하여 상기 반복 종료 위치에 따라 상기 입력 정보를 반복하여 처리하는 것을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법.공개특허 10-2023-0128567-3-청구항 5 제2항 내지 제4항 중 어느 한 항에 있어서,가변 매개 변수 리스트에 기반하여 상기 템플릿 매개 변수를 반복하여 해석하는 것은,상기 가변 매개 변수 리스트를 이용하여 상기 템플릿 매개 변수를 반복하여 해석하여 복수의 내부 템플릿 매개변수를 얻는 것; 및상기 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 상기 복수의 완전한 템플릿 매개 변수를 얻는 것을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 복수의 내부 템플릿 매개 변수는 복수의 문자열을 포함하며, 상기 복수의 내부 템플릿 매개 변수를 맞춰조합하여 복수의 완전한 템플릿 매개 변수를 얻는 것은,상기 입력 정보에 따라 상기 복수의 문자열을 맞춰 조합하여 상기 처리 대상 연산자에 대한 복수의 완전한 템플릿 매개 변수를 얻는 것을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5항에 있어서,복수의 완전한 템플릿 매개 변수에 따라 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할수 있는 사용 가능 연산자를 얻는 것은,상기 복수의 완전한 템플릿 매개 변수에 대해 명시적 인스턴스화를 진행하는 것을 통해, 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 복수의 완전한 템플릿 매개 변수 각각은 템플릿 함수의 설명 정보와 템플릿 함수 정보를 포함하며, 복수의완전한 템플릿 매개 변수에 대해 명시적 인스턴스화를 진행하는 것을 통해 상기 연산자 커널 함수를 처리하여상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것은,상기 템플릿 함수의 설명 정보를 헤더 파일로 인스턴스화하는 것; 및상기 템플릿 함수 정보를 소스 코드 파일로 인스턴스화하는 것을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제5항에 있어서,상기 복수의 완전한 템플릿 매개 변수에 따라 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것은,상기 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해,해당 완전한 템플릿 매개 변수의 함수 매개 변수 유형을 결정하는 것;상기 함수 매개 변수 유형에 따라 상기 완전한 템플릿 매개 변수의 입력 정보를 대응하는 매개 변수 정보로 변환하는 것; 및상기 대응하는 매개 변수 정보를 기록하는 것을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법.공개특허 10-2023-0128567-4-청구항 10 제5항에 있어서,상기 복수의 완전한 템플릿 매개 변수에 따라 상기 딥러닝 프레임워크에 기반한 등록 대상 연산자를 생성하는것; 및상기 등록 대상 연산자를 상기 딥러닝 프레임워크 내부의 글로벌 연산자 테이블에 등록하는 것을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 등록 대상 연산자는 등록 대상 연산자의 설명 정보, 및 정규화된 입력 정보와 정규화된 함수 포인터를 포함하는 등록 대상 연산자 커널 함수를 포함하고, 상기 복수의 완전한 내부 템플릿 함수에 따라 상기 딥러닝 프레임워크에 기반한 등록 대상 연산자를 생성하는 것은, 상기 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해, 상기 완전한 템플릿 매개 변수에 대응하는, 정규화된 형태를 갖는 정적 함수를 포함하는 구조체를 결정하는 것; 상기 정적 함수의 입력 정보를 상기 정규화된 입력 정보로 하는 것; 및 상기 정적 함수의 함수 포인터를 상기 정규화된 함수 포인터로 하는 것을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 정적 함수의 입력 정보는 입력 텐서 리스트를 포함하는 입력 정보 리스트를 구성하고, 상기 구조체는 각각이 대응하는 데이터 유형을 가지는 적어도 하나의 특수 서브 구조체를 포함하는, 딥러닝 프레임워크의 연산자처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제10항에 있어서,상기 글로벌 연산자 테이블은,연산자 커널 팩토리 클래스; 연산자 커널 이름 클래스와 커널 키 값 클래스; 및 연산자 커널 클래스를 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 연산자 커널 클래스는,상기 연산자 커널 함수의 포인터;연산자 커널 함수 입력 매개 변수의 설명 정보; 및연산자 커널 함수 출력 매개 변수의 설명 정보중 적어도 하나를 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "공개특허 10-2023-0128567-5-제1항에 있어서,상기 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 상기 처리 대상 연산자를 배포하기 위한 것이고, 상기 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 상기 딥러닝 프레임워크의 구현 기기 및 상기 딥러닝 프레임워크의 데이터 유형과 모두 무관한 템플릿 매개 변수를 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제1항에 있어서,상기 사용 가능 연산자에 대한 호출 명령에 응답하여 상기 사용 가능 연산자를 호출하는 것; 및 호출된 상기 사용 가능 연산자를 컴파일하여 상기 사용 가능 연산자에 대응하는 함수 기능을 수행하는 것을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 방법."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "딥러닝 프레임워크의 연산자 처리 장치로서,연산자 커널 함수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함하는 처리 대상 연산자를 획득하기위한 획득 모듈;상기 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 상기 입력 정보를 이용하여 상기 템플릿 매개변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻기 위한 해석 모듈; 및복수의 완전한 템플릿 매개 변수에 따라 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할수 있는 사용 가능 연산자를 얻기 위한 처리 모듈을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,상기 해석 모듈은,매크로를 이용하여 가변 매개 변수 리스트를 생성하기 위한 생성 서브 모듈; 및상기 가변 매개 변수 리스트에 기반하여 상기 템플릿 매개 변수를 반복하여 해석하기 위한 해석 서브 모듈을 포함하되, 상기 입력 정보를 상기 매크로의 매크로 매개 변수로 하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서,상기 가변 매개 변수 리스트는,처리 대상 연산자의 이름;상기 연산자 커널 함수의 이름;상기 연산자 커널 함수의 데이터 레이아웃;상기 딥러닝 프레임워크를 구현하기 위한 기기 유형, 및상기 딥러닝 프레임워크를 구현하기 위한 데이터 유형을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제18항에 있어서,공개특허 10-2023-0128567-6-상기 해석 서브 모듈은,상기 매크로에 포함되는 매개 변수 수를 결정하기 위한 제1 결정 유닛;상기 매개 변수 수에 따라 반복 종료 위치를 결정하기 위한 제2 결정 유닛; 및가변 매개 변수 리스트를 이용하여 상기 반복 종료 위치에 따라 상기 입력 정보를 반복하여 처리하기 위한 처리유닛을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제18항 내지 제20항 중 어느 한 항에 있어서,상기 해석 서브 모듈은,상기 가변 매개 변수 리스트를 이용하여 상기 템플릿 매개 변수를 반복하여 해석하여 복수의 내부 템플릿 매개변수를 얻기 위한 해석 유닛; 및상기 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 상기 복수의 완전한 템플릿 매개 변수를 얻기 위한 맞춰조합 유닛을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제21항에 있어서,상기 복수의 내부 템플릿 매개 변수는 복수의 문자열을 포함하며, 상기 맞춰 조합 유닛은, 상기 입력 정보에 따라 상기 복수의 문자열을 맞춰 조합하여 상기 처리 대상 연산자에 대한 복수의 완전한 템플릿 매개 변수를 얻기 위한 맞춰 조합 서브 유닛을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제21항에 있어서,상기 처리 모듈은,상기 복수의 완전한 템플릿 매개 변수에 대해 명시적 인스턴스화를 진행하는 것을 통해 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻기 위한 명시적 인스턴스화 서브모듈을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제23항에 있어서,상기 복수의 완전한 템플릿 매개 변수는 각각 템플릿 함수의 설명 정보와 템플릿 함수 정보를 포함하며, 상기명시적 인스턴스화 서브 모듈은,상기 템플릿 함수의 설명 정보를 헤더 파일로 인스턴스화하기 위한 제1 인스턴스화 유닛; 및상기 템플릿 함수 정보를 소스 코드 파일로 인스턴스화하기 위한 제2 인스턴스화 유닛을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_25", "content": "제21항에 있어서,상기 처리 모듈은,상기 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해 해당 완전한 템플릿 매개 변수의 함수 매개 변수 유형을 결정하기 위한 제1 결정 서브 모듈;공개특허 10-2023-0128567-7-상기 함수 매개 변수 유형에 따라 상기 완전한 템플릿 매개 변수의 입력 정보를 대응하는 매개 변수 정보로 변환하기 위한 변환 서브 모듈; 및상기 대응하는 매개 변수 정보를 기록하기 위한 기록 서브 모듈을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_26", "content": "제21항에 있어서,상기 복수의 완전한 템플릿 매개 변수에 따라 상기 딥러닝 프레임워크에 기반한 등록 대상 연산자를 생성하기위한 생성 모듈; 및등록 대상 연산자를 상기 딥러닝 프레임워크 내부의 글로벌 연산자 테이블에 등록하기 위한 등록 모듈을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_27", "content": "제26항에 있어서,상기 등록 대상 연산자는 등록 대상 연산자의 설명 정보, 및 정규화된 입력 정보와 정규화된 함수 포인터를 포함하는 등록 대상 연산자 커널 함수를 포함하고, 상기 생성 모듈은,상기 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해, 상기 완전한 템플릿 매개 변수에 대응하는, 정규화된 형태를 갖는 정적 함수를 포함하는 구조체를 결정하기 위한 제2 결정 서브 모듈;상기 정적 함수의 입력 정보를 상기 정규화된 입력 정보로 하기 위한 제1 정규화 서브 모듈; 및상기 정적 함수의 함수 포인터를 상기 정규화된 함수 포인터로 하기 위한 제2 정규화 모듈을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_28", "content": "제27항에 있어서,상기 정적 함수의 입력 정보는 입력 텐서 리스트를 포함하는 입력 정보 리스트를 구성하고, 상기 구조체는 각각이 대응하는 데이터 유형을 가지는 적어도 하나의 특수 서브 구조체를 포함하는, 딥러닝 프레임워크의 연산자처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_29", "content": "제25항에 있어서,상기 글로벌 연산자 테이블은,연산자 커널 팩토리 클래스;연산자 커널 이름 클래스와 커널 키 값 클래스; 및연산자 커널 클래스를 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_30", "content": "제29항에 있어서,상기 연산자 커널 클래스는,상기 연산자 커널 함수의 포인터;연산자 커널 함수 입력 매개 변수의 설명 정보; 및공개특허 10-2023-0128567-8-연산자 커널 함수 출력 매개 변수의 설명 정보중 적어도 하나를 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_31", "content": "제17항에 있어서,상기 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 상기 처리 대상 연산자를 배포하기 위한 것이고, 상기 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 상기 딥러닝 프레임워크의 구현 기기 및 상기 딥러닝 프레임워크의 데이터 유형과 모두 무관한 템플릿 매개 변수를 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_32", "content": "제17항에 있어서,상기 사용 가능 연산자에 대한 호출 명령에 응답하여 상기 사용 가능 연산자를 호출하기 위한 호출 모듈; 및호출된 상기 사용 가능 연산자를 컴파일하여 상기 사용 가능 연산자에 대응하는 함수 기능을 수행하기 위한 수행 모듈을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 장치."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_33", "content": "전자 기기로서,적어도 하나의 프로세서; 및상기 적어도 하나의 프로세서와 통신 연결된 메모리를 포함하되, 상기 메모리에는 적어도 하나의 프로세서에 의해 실행 가능한 명령어가 저장되어 있고, 상기 명령어는 적어도 하나의 프로세서에 의해 실행되어, 상기 적어도 하나의 프로세서로 하여금 제1항 내지 제16항 중어느 한 항의 딥러닝 프레임워크의 연산자 처리 방법을 실행할 수 있게 하는, 전자 기기."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_34", "content": "컴퓨터로 하여금 제1항 내지 제16항 중 어느 한 항의 딥러닝 프레임워크의 연산자 처리 방법을 실행하게 하기위한 컴퓨터 명령어가 저장되어 있는 비휘발성 컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2023-7028022", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_35", "content": "프로세서에 의해 실행될 시에 제1항 내지 제16항 중 어느 한 항의 딥러닝 프레임워크의 연산자 처리 방법을 구현하는 컴퓨터 프로그램을 포함하는 컴퓨터 프로그램 제품."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시는 딥러닝 프레임워크의 연산자 처리 방법을 제공하며, 컴퓨터"}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": ", 특히 덥러닝 등 인공 지능 기 술 분야에 관한 것이다. 구체적인 구현 방안은, 연산자 커널 함수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함하는 처리 대상 연산자를 획득하는 것; 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 입력 정보를 이용하여 템플릿 매개 변수를 해석하여 딥러닝 프레임워크과 관련된 복수의 완전한 템플릿 매개 변 수를 얻는 것; 및 복수의 완전한 템플릿 매개 변수에 따라 연산자 커널 함수를 처리하여 딥러닝 프레임워크에 사 용할 수 있는 사용 가능 연산자를 얻는 것이다. 본 개시는 또한 딥러닝 프레임워크의 연산자 처리 장치, 전자 기 기 및 저장 매체를 제공한다. 대 표 도 - 도1"}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 2, "content": "공개특허10-2023-0128567 발명자 장 윈페이 중국 베이징 하이디엔 디스트릭트 샹디 10번가 넘 버 10 바이두캠퍼스 2층 위엔 리셩 중국 베이징 하이디엔 디스트릭트 샹디 10번가 넘 버 10 바이두캠퍼스 2층 첸 티엔위 중국 베이징 하이디엔 디스트릭트 샹디 10번가 넘 버 10 바이두캠퍼스 2층 리우 홍위 중국 베이징 하이디엔 디스트릭트 샹디 10번가 넘 버 10 바이두캠퍼스 2층후 샤오광 중국 베이징 하이디엔 디스트릭트 샹디 10번가 넘 버 10 바이두캠퍼스 2층 위 디엔하이 중국 베이징 하이디엔 디스트릭트 샹디 10번가 넘 버 10 바이두캠퍼스 2층 마 얀쥔 중국 베이징 하이디엔 디스트릭트 샹디 10번가 넘 버 10 바이두캠퍼스 2층명 세 서 청구범위 청구항 1 딥러닝 프레임워크의 연산자 처리 방법으로서, 연산자 커널 함수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함하는 처리 대상 연산자를 획득하는 것; 상기 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 상기 입력 정보를 이용하여 상기 템플릿 매개 변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻는 것; 및 복수의 완전한 템플릿 매개 변수에 따라 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것 을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 2 제1항에 있어서, 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 상기 입력 정보를 이용하여 상기 템플릿 매개 변수 를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻는 것은, 매크로를 이용하여 가변 매개 변수 리스트를 생성하는 것; 및 상기 가변 매개 변수 리스트에 기반하여 상기 템플릿 매개 변수를 반복하여 해석하는 것 을 포함하되, 상기 입력 정보를 상기 매크로의 매크로 매개 변수로 하는, 딥러닝 프레임워크의 연산자 처리 방 법. 청구항 3 제2항에 있어서, 상기 가변 매개 변수 리스트는, 처리 대상 연산자의 이름; 상기 연산자 커널 함수의 이름; 상기 연산자 커널 함수의 데이터 레이아웃; 상기 딥러닝 프레임워크를 구현하기 위한 기기 유형; 및 상기 딥러닝 프레임워크를 구현하기 위한 데이터 유형 을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 4 제2항에 있어서, 상기 가변 매개 변수 리스트에 기반하여 상기 템플릿 매개 변수를 반복하여 해석하는 것은, 상기 매크로에 포함되는 매개 변수 수를 결정하는 것; 상기 매개 변수 수에 따라 반복 종료 위치를 결정하는 것; 및 가변 매개 변수 리스트를 이용하여 상기 반복 종료 위치에 따라 상기 입력 정보를 반복하여 처리하는 것 을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법.청구항 5 제2항 내지 제4항 중 어느 한 항에 있어서, 가변 매개 변수 리스트에 기반하여 상기 템플릿 매개 변수를 반복하여 해석하는 것은, 상기 가변 매개 변수 리스트를 이용하여 상기 템플릿 매개 변수를 반복하여 해석하여 복수의 내부 템플릿 매개 변수를 얻는 것; 및 상기 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 상기 복수의 완전한 템플릿 매개 변수를 얻는 것 을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 6 제5항에 있어서, 상기 복수의 내부 템플릿 매개 변수는 복수의 문자열을 포함하며, 상기 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 복수의 완전한 템플릿 매개 변수를 얻는 것은, 상기 입력 정보에 따라 상기 복수의 문자열을 맞춰 조합하여 상기 처리 대상 연산자에 대한 복수의 완전한 템플 릿 매개 변수를 얻는 것을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 7 제5항에 있어서, 복수의 완전한 템플릿 매개 변수에 따라 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것은, 상기 복수의 완전한 템플릿 매개 변수에 대해 명시적 인스턴스화를 진행하는 것을 통해, 상기 연산자 커널 함수 를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것을 포함하는, 딥러닝 프레임 워크의 연산자 처리 방법. 청구항 8 제7항에 있어서, 상기 복수의 완전한 템플릿 매개 변수 각각은 템플릿 함수의 설명 정보와 템플릿 함수 정보를 포함하며, 복수의 완전한 템플릿 매개 변수에 대해 명시적 인스턴스화를 진행하는 것을 통해 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것은, 상기 템플릿 함수의 설명 정보를 헤더 파일로 인스턴스화하는 것; 및 상기 템플릿 함수 정보를 소스 코드 파일로 인스턴스화하는 것 을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 9 제5항에 있어서, 상기 복수의 완전한 템플릿 매개 변수에 따라 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사 용할 수 있는 사용 가능 연산자를 얻는 것은, 상기 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해, 해당 완전한 템플릿 매개 변수의 함수 매개 변수 유형을 결정하는 것; 상기 함수 매개 변수 유형에 따라 상기 완전한 템플릿 매개 변수의 입력 정보를 대응하는 매개 변수 정보로 변 환하는 것; 및 상기 대응하는 매개 변수 정보를 기록하는 것 을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법.청구항 10 제5항에 있어서, 상기 복수의 완전한 템플릿 매개 변수에 따라 상기 딥러닝 프레임워크에 기반한 등록 대상 연산자를 생성하는 것; 및 상기 등록 대상 연산자를 상기 딥러닝 프레임워크 내부의 글로벌 연산자 테이블에 등록하는 것 을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 11 제10항에 있어서, 상기 등록 대상 연산자는 등록 대상 연산자의 설명 정보, 및 정규화된 입력 정보와 정규화된 함수 포인터를 포 함하는 등록 대상 연산자 커널 함수를 포함하고, 상기 복수의 완전한 내부 템플릿 함수에 따라 상기 딥러닝 프 레임워크에 기반한 등록 대상 연산자를 생성하는 것은, 상기 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해, 상기 완전한 템플릿 매개 변수 에 대응하는, 정규화된 형태를 갖는 정적 함수를 포함하는 구조체를 결정하는 것; 상기 정적 함수의 입력 정보를 상기 정규화된 입력 정보로 하는 것; 및 상기 정적 함수의 함수 포인터를 상기 정규화된 함수 포인터로 하는 것 을 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 12 제11항에 있어서, 상기 정적 함수의 입력 정보는 입력 텐서 리스트를 포함하는 입력 정보 리스트를 구성하고, 상기 구조체는 각각 이 대응하는 데이터 유형을 가지는 적어도 하나의 특수 서브 구조체를 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 13 제10항에 있어서, 상기 글로벌 연산자 테이블은, 연산자 커널 팩토리 클래스; 연산자 커널 이름 클래스와 커널 키 값 클래스; 및 연산자 커널 클래스 를 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 14 제13항에 있어서, 상기 연산자 커널 클래스는, 상기 연산자 커널 함수의 포인터; 연산자 커널 함수 입력 매개 변수의 설명 정보; 및 연산자 커널 함수 출력 매개 변수의 설명 정보 중 적어도 하나를 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 15 제1항에 있어서, 상기 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 상기 처리 대상 연산자를 배포하기 위한 것이고, 상기 딥 러닝 프레임워크와 무관한 템플릿 매개 변수는 상기 딥러닝 프레임워크의 구현 기기 및 상기 딥러닝 프레임워크 의 데이터 유형과 모두 무관한 템플릿 매개 변수를 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 16 제1항에 있어서, 상기 사용 가능 연산자에 대한 호출 명령에 응답하여 상기 사용 가능 연산자를 호출하는 것; 및 호출된 상기 사용 가능 연산자를 컴파일하여 상기 사용 가능 연산자에 대응하는 함수 기능을 수행하는 것 을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 방법. 청구항 17 딥러닝 프레임워크의 연산자 처리 장치로서, 연산자 커널 함수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함하는 처리 대상 연산자를 획득하기 위한 획득 모듈; 상기 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 상기 입력 정보를 이용하여 상기 템플릿 매개 변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻기 위한 해석 모듈; 및 복수의 완전한 템플릿 매개 변수에 따라 상기 연산자 커널 함수를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻기 위한 처리 모듈 을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 18 제17항에 있어서, 상기 해석 모듈은, 매크로를 이용하여 가변 매개 변수 리스트를 생성하기 위한 생성 서브 모듈; 및 상기 가변 매개 변수 리스트에 기반하여 상기 템플릿 매개 변수를 반복하여 해석하기 위한 해석 서브 모듈 을 포함하되, 상기 입력 정보를 상기 매크로의 매크로 매개 변수로 하는, 딥러닝 프레임워크의 연산자 처리 장 치. 청구항 19 제18항에 있어서, 상기 가변 매개 변수 리스트는, 처리 대상 연산자의 이름; 상기 연산자 커널 함수의 이름; 상기 연산자 커널 함수의 데이터 레이아웃; 상기 딥러닝 프레임워크를 구현하기 위한 기기 유형, 및 상기 딥러닝 프레임워크를 구현하기 위한 데이터 유형 을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 20 제18항에 있어서,상기 해석 서브 모듈은, 상기 매크로에 포함되는 매개 변수 수를 결정하기 위한 제1 결정 유닛; 상기 매개 변수 수에 따라 반복 종료 위치를 결정하기 위한 제2 결정 유닛; 및 가변 매개 변수 리스트를 이용하여 상기 반복 종료 위치에 따라 상기 입력 정보를 반복하여 처리하기 위한 처리 유닛 을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 21 제18항 내지 제20항 중 어느 한 항에 있어서, 상기 해석 서브 모듈은, 상기 가변 매개 변수 리스트를 이용하여 상기 템플릿 매개 변수를 반복하여 해석하여 복수의 내부 템플릿 매개 변수를 얻기 위한 해석 유닛; 및 상기 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 상기 복수의 완전한 템플릿 매개 변수를 얻기 위한 맞춰 조합 유닛 을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 22 제21항에 있어서, 상기 복수의 내부 템플릿 매개 변수는 복수의 문자열을 포함하며, 상기 맞춰 조합 유닛은, 상기 입력 정보에 따라 상기 복수의 문자열을 맞춰 조합하여 상기 처리 대상 연산자에 대한 복수의 완전한 템플 릿 매개 변수를 얻기 위한 맞춰 조합 서브 유닛을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 23 제21항에 있어서, 상기 처리 모듈은, 상기 복수의 완전한 템플릿 매개 변수에 대해 명시적 인스턴스화를 진행하는 것을 통해 상기 연산자 커널 함수 를 처리하여 상기 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻기 위한 명시적 인스턴스화 서브 모듈을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 24 제23항에 있어서, 상기 복수의 완전한 템플릿 매개 변수는 각각 템플릿 함수의 설명 정보와 템플릿 함수 정보를 포함하며, 상기 명시적 인스턴스화 서브 모듈은, 상기 템플릿 함수의 설명 정보를 헤더 파일로 인스턴스화하기 위한 제1 인스턴스화 유닛; 및 상기 템플릿 함수 정보를 소스 코드 파일로 인스턴스화하기 위한 제2 인스턴스화 유닛 을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 25 제21항에 있어서, 상기 처리 모듈은, 상기 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해 해당 완전한 템플릿 매개 변수 의 함수 매개 변수 유형을 결정하기 위한 제1 결정 서브 모듈;상기 함수 매개 변수 유형에 따라 상기 완전한 템플릿 매개 변수의 입력 정보를 대응하는 매개 변수 정보로 변 환하기 위한 변환 서브 모듈; 및 상기 대응하는 매개 변수 정보를 기록하기 위한 기록 서브 모듈 을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 26 제21항에 있어서, 상기 복수의 완전한 템플릿 매개 변수에 따라 상기 딥러닝 프레임워크에 기반한 등록 대상 연산자를 생성하기 위한 생성 모듈; 및 등록 대상 연산자를 상기 딥러닝 프레임워크 내부의 글로벌 연산자 테이블에 등록하기 위한 등록 모듈 을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 27 제26항에 있어서, 상기 등록 대상 연산자는 등록 대상 연산자의 설명 정보, 및 정규화된 입력 정보와 정규화된 함수 포인터를 포 함하는 등록 대상 연산자 커널 함수를 포함하고, 상기 생성 모듈은, 상기 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해, 상기 완전한 템플릿 매개 변수 에 대응하는, 정규화된 형태를 갖는 정적 함수를 포함하는 구조체를 결정하기 위한 제2 결정 서브 모듈; 상기 정적 함수의 입력 정보를 상기 정규화된 입력 정보로 하기 위한 제1 정규화 서브 모듈; 및 상기 정적 함수의 함수 포인터를 상기 정규화된 함수 포인터로 하기 위한 제2 정규화 모듈 을 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 28 제27항에 있어서, 상기 정적 함수의 입력 정보는 입력 텐서 리스트를 포함하는 입력 정보 리스트를 구성하고, 상기 구조체는 각각 이 대응하는 데이터 유형을 가지는 적어도 하나의 특수 서브 구조체를 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 29 제25항에 있어서, 상기 글로벌 연산자 테이블은, 연산자 커널 팩토리 클래스; 연산자 커널 이름 클래스와 커널 키 값 클래스; 및 연산자 커널 클래스 를 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 30 제29항에 있어서, 상기 연산자 커널 클래스는, 상기 연산자 커널 함수의 포인터; 연산자 커널 함수 입력 매개 변수의 설명 정보; 및연산자 커널 함수 출력 매개 변수의 설명 정보 중 적어도 하나를 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 31 제17항에 있어서, 상기 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 상기 처리 대상 연산자를 배포하기 위한 것이고, 상기 딥 러닝 프레임워크와 무관한 템플릿 매개 변수는 상기 딥러닝 프레임워크의 구현 기기 및 상기 딥러닝 프레임워크 의 데이터 유형과 모두 무관한 템플릿 매개 변수를 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 32 제17항에 있어서, 상기 사용 가능 연산자에 대한 호출 명령에 응답하여 상기 사용 가능 연산자를 호출하기 위한 호출 모듈; 및 호출된 상기 사용 가능 연산자를 컴파일하여 상기 사용 가능 연산자에 대응하는 함수 기능을 수행하기 위한 수 행 모듈 을 더 포함하는, 딥러닝 프레임워크의 연산자 처리 장치. 청구항 33 전자 기기로서, 적어도 하나의 프로세서; 및 상기 적어도 하나의 프로세서와 통신 연결된 메모리 를 포함하되, 상기 메모리에는 적어도 하나의 프로세서에 의해 실행 가능한 명령어가 저장되어 있고, 상기 명령 어는 적어도 하나의 프로세서에 의해 실행되어, 상기 적어도 하나의 프로세서로 하여금 제1항 내지 제16항 중 어느 한 항의 딥러닝 프레임워크의 연산자 처리 방법을 실행할 수 있게 하는, 전자 기기. 청구항 34 컴퓨터로 하여금 제1항 내지 제16항 중 어느 한 항의 딥러닝 프레임워크의 연산자 처리 방법을 실행하게 하기 위한 컴퓨터 명령어가 저장되어 있는 비휘발성 컴퓨터 판독 가능 저장 매체. 청구항 35 프로세서에 의해 실행될 시에 제1항 내지 제16항 중 어느 한 항의 딥러닝 프레임워크의 연산자 처리 방법을 구 현하는 컴퓨터 프로그램을 포함하는 컴퓨터 프로그램 제품. 발명의 설명 기 술 분 야 본 출원은 2022년 5월 19일에 제출된 중국 특허 출원 제202210560831.9호의 우선권을 요구하며, 그 내용은 전체 적으로 여기에서 참고로 한다. 본 개시는 컴퓨터 기술 분야, 특히 덥러닝 등 인공 지능 기술 분야에 관한 것이다. 보다 구체적으로는, 본 개시 는 딥러닝 프레임워크의 연산자 처리 방법, 장치, 전자 기기 및 저장 매체를 제공한다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 지능 기술의 발전에 따라 딥러닝 프레임워크는 점차 더 많은 관심을 받고 있다. 딥러닝 프레임워크의 평가 지표에는 프레임워크의 확장성이 포함된다. 본 개시는 딥러닝 프레임워크의 연산자 처리 방법, 장치, 기기 및 저장 매체를 제공한다. 본 개시의 일 측면에 따르면, 딥러닝 프레임워크의 연산자 처리 방법을 제공하며, 해당 방법은, 연산자 커널 함 수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함하는 처리 대상 연산자를 획득하는 것; 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여, 입력 정보를 이용하여 템플릿 매개 변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻는 것; 및 복수의 완전한 템플릿 매개 변수에 따라 연 산자 커널 함수를 처리하여 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것을 포함한다. 본 개시의 다른 측면에 따르면, 딥러닝 프레임워크의 연산자 처리 장치를 제공하며, 해당 장치는, 연산자 커널 함수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함하는 처리 대상 연산자를 획득하기 위한 획득 모 듈; 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여, 입력 정보를 이용하여 템플릿 매개 변수를 해 석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻기 위한 해석 모듈; 및 복수의 완전한 템플릿 매개 변수에 따라 연산자 커널 함수를 처리하여 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자 를 얻기 위한 처리 모듈을 포함한다. 본 개시의 다른 측면에 따르면, 적어도 하나의 프로세서; 및 적어도 하나의 프로세서와 통신 연결된 메모리를 포함하며, 여기서, 메모리에는 적어도 하나의 프로세서에 의해 실행 가능한 명령어가 저장되어 있고, 명령어는 적어도 하나의 프로세서에 의해 실행되어, 적어도 하나의 프로세서로 하여금 본 개시에 따라 제공된 방법을 실 행할 수 있게 하는 전자 기기. 본 개시의 다른 측면에 따르면, 컴퓨터로 하여금 본 개시가 제공한 방법을 실행하게 하기 위한 컴퓨터 명령어가 저장되어 있는 비휘발성 컴퓨터 판독 가능 저장 매체를 제공한다. 본 개시의 다른 측면에 따르면, 프로세서에 의해 실행될 시에 본 개시가 제공한 방법을 구현하는 컴퓨터 프로그 램을 포함하는 컴퓨터 프로그램 제품을 제공한다. 이 부분에서 설명한 내용은 본 개시의 실시예의 핵심 또는 중요한 특징들을 나타내기 위한 것이 아니며, 본 개 시의 범위를 한정하는 데 사용하지 않는다는 것을 이해해야 한다. 본 개시의 기타 특징은 아래의 명세서를 통해 쉽게 이해할 수 있게 될 것이다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 발명의 예시적인 실시예를 상세히 설명하기로 한다. 이해를 돕기 위하여 그 중에는 본 출원의 실시예의 다양한 세부사항이 포함되어 있으며, 이들을 단지 예시적인 것으로 간주해야 한다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "따라서, 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자는 본 출원의 범위 및 사상을 벗어나는 것이 없 이 여기서 설명된 실시예에 대해 다양한 변경 및 수정을 진행할 수 있음을 인식해야 한다. 마찬가지로, 명확하 고 간결하기 위하여, 아래 설명 중에는 공지 기능 또는 구성에 대한 설명은 생략하도록 한다. 딥러닝 프레임워크는 인공지능 분야의 인프라로 비교적 성숙한 발전 단계에 진입했다. 상위 확장 및 2차 개발을 보다 효율적이고 편리하게 지원할 수 있는지 여부는 딥러닝 프레임워크 제품이 \"인프라\"로 할 수 있는지, 인공 지능 산업의 정착을 구현할 수 있는지 및 분야 확장을 수행할 수 있는지 여부를 평가하는 중요한 지표이다.딥러닝 프레임워크는 PaddlePaddle(패들패들) 프레임워크, PyTorch 프레임워크, TensorFlow 프레임워크, MindSpore 프레임워크 및 기타 여러 소규모 프레임워크를 포함한다. 이러한 프레임워크는 유사한 기능을 제공할 수 있다. 그러나 인공지능 시대 생태 구축의 \"초석\"으로서 딥러닝 프레임워크는 더 많은 상류 개발자들을 가입 하도록 끌어들여 프레임워크가 더욱 가공되고 개조되도록 해야 한다. 이를 위해, 딥러닝 프레임워크는 상류 개 발자들이 프레임워크 생태계를 공동으로 구축하는 비용을 낮추기 위해, 설계가 명확하고 유지 보수가 용이하고 이해가 쉬우며 맞춤형 확장 및 개발이 용이한 것과 같은 특징을 가져야 한다. 연산자 체계는 하나의 프레임워크 의 절반 이상의 코드를 차지할 수 있으며, 딥러닝 프레임워크의 주체로 할 수 있다. 저렴한 비용으로 연산자 체 계의 확장 및 신규 추가를 할 수 있는지 여부는 프레임워크 생태계를 공동으로 구축하는 비용을 줄이는 관건적 인 일환이다. 연산자는 딥러닝 프레임워크의 텐서 계산 단위이다. 연산자는 특정 텐서의 조합을 입력으로 할 수 있고, 특정된 계산 논리를 완성하고 계산 결과를 반환할 수 있다. 딥러닝 프레임워크를 사용하여 모델을 구축하는 과정은 서 로 다른 연산자를 조합하여 특정 계산 논리를 충족시키는 과정일 수 있다. 연산자의 다양성과 풍부성은 딥러닝 프레임워크를 평가하는 중요한 지표로 할 수 있다. 딥러닝 프레임워크 중의 연산자는 지속적이고 동적으로 신규 추가된 것일 수 있다. 서로 다른 연산자 사이에는 연관될 수도 있고 차이를 가질 수도 있다. 복잡한 연산자는 일반적으로 간단한 연산자 조합을 통해 구현될 수 있다. 딥러닝 프레임워크가 이러한 연산자 조합의 구현 모식을 지원하면, 비용 절감 및 효율성 향상에 도움이 되고 외부 개발자가 해당 프 레임워크의 2차 개발을 수행하도록 끌어들이는 데도 도움이 된다. 함수는 프로그래밍 언어의 기본 범식이다. 함수 간에 서로 호출할 수 있다. 딥러닝 프레임워크가 편리한 연산자 조합 개발 능력을 갖도록 하기 위해 함수형 연산자 체계에 기반하여 딥러닝 프레임워크를 구축할 수 있다. 함수형 연산자 체계의 적용은 적다. 함수와 연산자 사이에는 모순이 존재한다. 예를 들어, 함수 자체가 너무 간 단하고 정보와 특징을 나르는 능력을 갖추지 않는다. 또한， 함수가 너무 유연하고 형태가 다양하며 매개 변수 가 다양하고 규범화하기가 어렵다. 연산자는 특징적인 설명을 가지는 비교적 복잡한 개념이며 다양한 기기에 적 응시켜야 한다. 또한, 연산자는 프레임워크의 통합 스케줄링 단위로서 글로벌 스케줄링에 적응하기 위해 일관된 형태를 추상화해야 한다. 현실적인 고려에서 딥러닝 프레임워크 제품은 종종 절충된 설계를 하고, 함수형 법식을 포기하고, \"구조체 + 내 부 계산 방법\"의 형식을 사용하며, 조합 재사용 편리성을 희생하여 연산자 법식의 통일성을 유지한다. 그러나 이러한 절충된 설계는 프레임 유지 보수 비용과 확장 비용을 증가시킨다. 일부 딥러닝 프레임워크 제품은 최상위 연산자 함수를 캡슐화하여 연산자 다양성을 차단할 수 있다. 이러한 딥 러닝 프레임워크 제품은 함수 내부에서 배포 선택을 하는 방식을 이용하여 연산자 간의 재사용을 구현할 수 있 다. 연산자 간의 재사용시에 이러한 딥러닝 프레임워크 제품은 배포 선택의 스케줄링 오버헤드를 발생하여 성능 이 저하될 수 있다. 이러한 딥러닝 프레임워크 제품은 연산자 조합 재사용의 편리성을 보유하지만 일부 성능이 희생되어 있다. 연산자를 조합하지 않으면 성능을 향상시킬 수 있으며, 연산자 재사용 방식을 포기하고 복수의 연산자 코어의 코드를 직접 함께 배치하여 성능을 향상시킬 수 있다. 따라서, 함수형 연산자 간의 재사용 성능 문제를 해결하면 함수형 연산자의 장점을 지속적으로 발휘할 수 있다. \"함수형\"과 \"고성능 재사용\"을 겸하는 연산자 체계를 형성하기 위해서는 형태가 단순하고 유연하며 유연하고 다 양한 \"함수\"를 형태가 통일되고 설명 특징을 가지는 연산자로 자동으로 캡술화하여 \"함수형\" 개발을 달성하고, 함수형 연산자를 재사용할 때 추가적으로 스케줄링 배포 오버헤드가 도입되지 않도록 보장하여 \"고성능 재사 용\"을 달성해야 한다. 함수형 연산자 체계를 구현하기 위해서는 함수형 연산자 법식 설계와 함수형 연산자 해석 및 등록이 필요하다. 함수형 연산자 법식 설계이란, 즉 함수의 쓰기 방법을 사용하여 연산자의 계산 커널을 구현하는 것이다. 함수에 서 일반적으로 C++ 프로그래밍 언어를 사용하여 연산자의 핵심 계산 논리 작성을 완료한다. 함수형 연산자는 자 연적으로 연산자 간의 상호 재사용을 지원한다. 함수형 연산자의 해석 및 등록이란, 즉 프레임워크에 통합된 스 케줄링을 제공하기 위해, 핵심 구성 요소를 설계하고, 형태가 간단하고 유연하고 다양한 함수를 형태가 통일되 고 설명 특징을 가지는 연산자로 자동으로 캡술화하는 것이다. 또한, 재사용 가능한 함수형 연산자 체계를 구현하기 위해서는 함수형 연산자 간에 기기와 무관한 재사용도 지 원해야 한다. 동일한 연산자가 서로 다른 기기에 적용될 때, 서로 다른 커널 함수가 필요하다. 예를 들어, 연산자가 CPU(Central Processing Unit, 중앙 처리 장치)에 적용될 때, CPU의 연산자 커널이 필요하며, GPU(Graphics Processing Unit, 그래픽 처리 장치)에는 GPU의 연산자 커널이 있으며, 함수형 연산자의 경우에도 그 두 커널은 서로 다른 함수가 필요하다. 연산자를 새로 개발하고 기타 연산자의 조합을 재사용할 때, 재사용 된 연산자는 기기와 무관해야 하며, 그렇지 않으면 중복 개발이 발생할 수 있다. 간단한 예를 들어 설명하면, 다음과 같다. 두 개의 연산자가 있다고 가정한다. - 연산자 A: - 연산자 A CPU 커널: A_CPU() - 연산자 A GPU 커널: A_GPU() - 연산자 B: - 연산자 B CPU 커널:B_CPU() - 연산자 B GPU 커널:B_GPU() 예를 들어, 연산자 A와 연산자 B에 기반하여 하나의 새로운 연산자를 구현한다. 한 가지 구현 방식은 다음과 같다. - 연산자 C (연산자 A와 B를 재사용함여 구현): - 연산자 C CPU 커널:C_CPU(){ A_CPU(; B_CPU(; }) - 연산자 C GPU 커널:C_GPU(){ A_GPU(; B_GPU(; }) 이 구현 방법은 합리적인 함수형 연산자 체계가 아니며, 중복 코드가 많고 유지 보수 비용이 높다. 또한, 이러 한 방식에 기반한 재사용 연산자는 기기별로만 재사용될 수 있으며, 각 기기의 연산자 C 커널의 구현 코드는 거 의 동일하다는 것을 쉽게 알 수 있다. 함수형 연산자 체계는 연산자 재사용의 효율를 향상시키고 유지 보수 비 용을 절감하며 확장 및 개발을 용이하게 하기 위한 것이다. 각 기기의 커널이 모두 커널을 거의 다 복사해야 하 는 구현 방식은, 엄격한 함수형 연산자 체계가 아니다. 위에서 설명한 바와 같이, 다양한 딥러닝 프레임워크는 예를 들어 Pytorch 프레임워크, TensorFlow 프레임워크 및 MindSpore 프레임워크를 포함할 수 있다. Pytorch 프레임워크에서 연산자는 결국 하나의 함수형 인터페이스로 캡슐화되며, 함수형 연산자 간에도 재사용 될 수 있으며, Pytorch의 하나의 연산자는 여러 계층으로 구분되어 구현되며, 상위 계층이 하위 계층을 호출할 때, 하위 계층의 연산자를 검색하여 구현할 필요가 있다. PyTorch 프레임워크에서 연산자 간의 재사용 및 연산 자 내의 재사용 시. 연산자 커널 매핑 테이블를 검색하고 대응하는 커널 선택하는 방식을 적용한다. 이러한 방 식의 오버헤드는 비교적 심하고, 하나의 연산자의 실행 과정에서는 여러 번의 연산자 검색이 필요할 수 있다. TensorFlow 프레임워크에서 연산자는 여전히 구조체 연산자이고, 함수형 연산자가 아니다. 구조체 형태의 연산 자 커널 구현은 충분히 직관적이지 않고 별도의 개념이 추가되며 연산자 간의 재사용은 더 복잡한 쓰기 방법과 더 큰 스케줄링 오버헤드를 도입해야 하며， 설계상 자연적으로 새로운 연산자 조합 개발에 적합하지 않은 형식 에 속한다. 일반적으로 구조체 형식의 연산자 체계에서 연산자 커널 함수를 구현할 때 상이한 연산자가 해당 연산자 커널 함수를 재사용할 수 있도록 추가적으로 함수를 정의해야 한다. 이러한 방식은 어느 정도의 일반화를 구현할 수 있지만, 유지 보수 비용이 높고 규범화된 관리가 어렵기 때문에 프레임워크가 장기적으로 발전하면 여러 곳의 중복 코드가 생성되고 유지 보수 비용이 점점 커진다. TensorFlow 프레임워크의 파생 제품인 tensorflow/runtime 프레임워크에서 연산자는 함수형 연산자일 수 있다. 그러나 tensorflow/runtime 프레임워크는 실험적 제품일 뿐이며 연산자의 수가 비교적 적고 아직 체계적이지 않 다. 또한, 연산자 매개 변수 리스트는 비교적 혼란스럽고 규범성이 좋지 않으며 고성능 재사용을 구현할 수 없 다. MindSpore 프레임의 연산자는 TensorFlow 프레임과 유사하며 다시 설명하지 않는다. 도 1는 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 1에 도시된 바와 같이, 해당 방법은 동작 S110 내지 동작 S130을 포함할 수 있다. 동작 S110에서, 처리 대상 연산자를 획득한다. 예를 들어, 처리 대상 연산자는 연산자 커널 함수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함한 다. 예를 들어, 획득한 처리 대상 연산자는 예를 들어 Scale(스케일) 연산자일 수 있다. Scale 연산자는 연산자 커 널 함수scale_kernel(스케일 연산자 커널 함수) 및 템플릿 매개 변수를 포함할 수 있다. scale_kernel은 scale 연산을 수행할 수 있다. 예를 들어, 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 예를 들어 딥러닝 프레임워크의 구현 기기와 무관 한 템플릿 매개 변수를 포함할 수 있고, 딥러닝 프레임워크의 데이터 유형과 무관한 템플릿 매개 변수를 포함할 수도 있다. 예를 들어, 구현 기기는 CPU 또는 GPU일 수 있다. 또 예를 들어, 데이터 유형은 예를 들어 Float(부동 소수점) 유형, Int(정수) 유형일 수 있다. 예를 들어, Scale 연산자를 처리 대상 연산자로 하는 경우, 처리 대상 연산자는 예를 들어 ScaleKernel<T, Context>()로 나타낼 수 있다. 동작 S120에서, 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여, 입력 정보를 이용하여 템플릿 매 개 변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻는다. 예를 들어, 완전한 템플릿 매개 변수는 <Float, CPUContext>일 수 있다. Float은 데이터 유형이고 CPU Context 는 기기 유형이다. 동작 S130에서, 복수의 완전한 템플릿 매개 변수에 따라 연산자 커널 함수를 처리하여 딥러닝 프레임워크에 사 용할 수 있는 사용 가능 연산자를 얻는다. 예를 들어, 처리 대상 연산자를 획득한 후, 해석을 통해 특정 딥러닝 프레임워크의 사용 가능 연산자를 얻고, 해당 딥러닝 프레임워크에 해당 사용 가능 연산자를 등록하여 딥러닝 프레임워크 중의 다른 루틴 또는 태스크가 실제 딥러닝 응용에 따라 해당 사용 가능 연산자를 호출하여, 대응하는 알고리즘 또는 기능, 예를 들어 스케일 링, 컨볼루션 등을 수행하도록 할 수 있다. 예를 들어, 완전한 템플릿 매개 변수 <Float, CPUContext>에 따라 연산자 커널 함수 scale_kernel을 처리하면 사용 가능 연산자를 얻을 수 있다. 사용 가능 연산자는 예를 들어 ScaleKernel <Float, CPUContext>()로 나타 낼 수 있다. 본 개시의 실시예를 통해 연산자가 재사용될 때 스케줄링 오버헤드가 없고 고성능 재사용을 구현할 수 있다. 일부 실시예에서, 방법은, 사용 가능 연산자에 대한 호출 명령에 응답하여 사용 가능 연산자를 호출하고, 호출된 사용 가능 연산자를 컴파일하는 것을 통해, 사용 가능 연산자에 대응하는 함수 기능을 수행하는 것을 더 포함할 수 있다. 예를 들어, 사용 가능 연산자 ScaleKernel <float, CPUContext>( )에 대한 호출 명령에 응답하여 사용 가능 연 산자 ScaleKernel <float, CPUContext>( )를 호출하고, 호출된 사용 가능 연산자 ScaleKernel <float, CPUContext>( )을 컴파일하는 것을 통해 scale 함수를 실행하는 기능이다. 일부 실시예에서, 딥러닝 프레임워크의 구현 기기와 무관한 연산자 커널 함수의 선언은 예를 들어 다음과 같을 수 있다. Temlate는 템플릿이다. typename T는 딥러닝 프레임워크의 데이터 유형과 무관한 템플릿 매개 변수이다. typename Context는 딥러닝 프레임워크의 구현 기기와 무관한 템플릿 매개 변수이다. typename T와 typename Context는 구체적인 구현 기기와 연동되지 않을 수 있다. 또 다른 예로, 기본 연산을 재사용할 수 있는 연산자 Calc는 예를 들어 다음과 같을 수 있다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "연산자 Calc가 호출하는 연산자는 연산자 ScaleKernel<T, Context>()이다. 연산자 ScaleKernel<T, Context>( )는 구현 기기와 무관한 연산자이다. 컴파일 시, 템플릿 매개 변수 T와 Context를 획득하여 컴파일러에 의해 구체적인 데이터 유형 및 구현 기기로 변환한다. 하나의 예시에서, 연산자 ScaleKernel<T, Context>( )는 ScaleKernel <float, CPUContext>()로 변환될 수 있다. 실행 시, 연산자 Calc는 scale 연산의 float 유형, CPU 기기에 기반한 명령 세트를 호출할 수 있으며, 다른 논리로 판단 및 선택할 필요가 없으며, 스케줄링된 오버헤 드가 없는 재사용을 달성하고 고성능 재사용을 구현할 수 있다. 일부 실시예에서, 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 입력 정보를 이용하여 템플릿 매 개 변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻는 것은, 매크로를 이용하 여 가변 매개 변수 리스트를 생성하며, 가변 매개 변수 리스트에 기반하여 템플릿 매개 변수를 반복하여 해석하 는 것을 포함하며, 여기서, 입력 정보를 매크로의 매크로 매개 변수로 한다. 예를 들어, 매크로는 C 언어의 메커니즘으로, 중복 코드를 단순화하는 데 사용할 수 있으며, 컴파일 전처리 시 에 실행을 위해 해당 매크로를 상응하는 코드 세그먼트로 대체한다. 예를 들어, 위에서 설명한 처리 대상 연산자 ScaleKernel <T, Context>( )의 경우, 입력 정보에 따라 가변 매개 변수 리스트를 결정할 수 있다. 매크로는 가변 매개 변수 리스트에 기반하여 반복적으로 해석된다. 하나의 예시 에서, 매크로 PD_REGISTER_KERNEL은 가변 매개 변수 리스트를 해석할 수 있다. 일부 실시예에서, 가변 매개 변수 리스트에는, 처리 대상 연산자의 이름; 연산자 커널 함수의 이름; 연산자 커 널 함수의 데이터 레이아웃; 딥러닝 프레임워크를 구현하기 위한 기기 유형; 및 딥러닝 프레임워크를 구현하기 위한 데이터 유형이 포함된다. 예를 들어, 위에서 설명한 Scale 연산자의 경우, 매크로를 이용하여 생성된 매개 변수 리스트에서, scale은 연 산자 이름이고, CPU는 딥러닝 프레임워크를 구현하기 위한 기기 유형이며, ALL_LAYOUT는 연산자 커널 함수 ScaleKernel이 모든 데이터 레이아웃에 적응 가능함을 나타내고, ScaleKernel은 등록 및 해석될 연산자 커널 함 수 이름을 나타내고, float, double, bfloat16, uint8_t, int16_t, int, int64_t는 딥러닝 프레임워크가 지원 하는 데이터 유형을 표시한다. 일부 실시예에서, 가변 매개 변수 리스트에 기반하여 템플릿 매개 변수를 반복하여 해석하는 것은, 매크로에 포 함되는 매개 변수 수를 결정하며, 매개 변수 수에 따라 반복 종료 위치를 결정하며, 가변 매개 변수 리스트를 이용하여 반복 종료 위치에 따라 입력 정보를 반복하여 처리하는 것을 포함한다. 예를 들어, 위에서 설명한 처리 대상 연산자 ScaleKernel <T, Context>( )의 경우, 매크로 PD_REGISTER_KERNEL 을 이용하여 매개 변수 리스트를 해석할 때, 다른 매크로 PD_NARGS를 이용하여 매크로 PD_REGISTER_KERNEL에 포 함되는 매개변수 수를 결정할 수 있다. 또 다른 예로, 매개 변수 수를 결정한 후, 매개 변수 수를 매크로의 접미사로 하여 하위 매크로 방법을 조합한 다음, 매크로 방법을 호출하여 해석할 수 있다. 예를 들어, 매크로 PD_NARGS는 예를 들어 다음과 같을 수 있다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "예를 들어, PD_NARGS(...)의 경우, \"...\"는 위에서 설명한 가변 매개 변수 리스트일 수 있다. 본 개시의 실시예 를 통해, 매크로에 몇 개의 매개 변수가 존재하는지를 결정하고, 대응하는 매개 변수 개수 위치로부터 매크로 매개 변수를 반복하여 해석하고 반복 종료 위치를 결정할 수 있다.다른 일부 실시예에서, 매크로 PD_NARGS를 가변 매개 변수 매크로_VA_ARGS 외부에 내포하여 매크로 PD_NARGS가 관련 처리를 수행하도록 할 수 있다. 예를 들어, 다음과 같은 방식을 통해 매크로 PD_NARGS를 가변 매개 변수 매크로 VA_ARGS 외부에 내포할 수 있다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "반복 종료 위치를 결정한 후, 가변 매개 변수 리스트에 기반하여 템플릿 매개 변수를 반복하여 해석할 수 있다. 일부 실시예에서, 가변 매개 변수 리스트에 기반하여 템플릿 매개 변수를 반복하여 해석하는 것은, 가변 매개 변수 리스트를 이용하여 입력 정보에 기반하여 템플릿 매개 변수를 반복하여 해석하여 복수의 내부 템플릿 매개 변수를 얻으며, 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 복수의 완전한 템플릿 매개 변수를 얻는 것을 더 포함할 수 있다. 이하 도 2와 결합하여 상세히 설명하기로 한다. 도 2는 본 개시의 다른 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 2에 도시된 바와 같이, 방법은 가변 매개 변수 리스트에 기반하여 템플릿 매개 변수를 반복하여 해석하 며, 이하 동작 S2211 및 동작 S2212를 결합하여 상세히 설명하기로 한다. 동작 S2211에서, 가변 매개 변수 리스트를 이용하여 템플릿 매개 변수를 반복하여 해석하여 복수의 내부 템플릿 매개 변수를 얻는다. 예를 들어, 매크로 VA_ARGS를 이용하여 매크로 매개 변수를 반복하여 가변 매개 변수 리스트에 기반하여 템플릿 매개 변수를 반복하여 해석할 수 있도록 한다. 예를 들어, 가변 매개 변수 리스트를 이용하여 다음과 같은 방식을 통해 반복하여 해석을 수행하여 템플릿 매개 변수를 얻을 수 있다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "매크로 PD_KERNEL_REGISTRAR_INIT_4의 경우, 매크로 매개 변수\"...\"는 위에서 설명한 가변 매개 변수 리스트일 수 있다. 하나의 예시에서, 매크로 매개 변수에는 예를 들어 float, double, bfloat16, uint8_t, int8_t, int16_t, int, int64_t가 포함된다. 매크로 PD_KERNEL_REGISTRAR_INIT_4는 매크로 PD_KERNEL_REGISTRAR_INIT_3를 내부에서 호출할 수 있다. 매크로 PD_KERNEL_REGISTRAR_INIT_3은 매크로 VA_ARGS 외부에 내포되어 가변 매개 변수 리스트를 전체로 반복하 는 데 사용될 수 있다. 매크로 PD_KERNEL_REGISTRAR_INIT_3은 가변 매개 변수 리스트의 첫 번째 매개 변수, 예 를 들어 float를 해석해 낼 수 있다. 이 경우, cpp_dtype은 float일 수 있으며, 매크로 PD_KERNEL_REGISTRAR_INIT_4의 매크로 매개 변수 \"...\"에는 double, bfloat16, uint8_t, int8_t, int16_t, int64_t가 포함될 수 있다. 다음 반복에서 double은 가변 매개 변수 리스트의 첫 번째 매개 변수이다. 동작 S2212에서, 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 복수의 완전한 템플릿 매개 변수를 얻는다. 본 개시의 실시예에서, 복수의 내부 템플릿 매개 변수는 복수의 문자열을 포함한다. 본 개시의 실시예에서, 복수의 내부 템플릿 매개 변수를 맞춰 조합하고 복수의 완전한 템플릿 매개 변수를 얻는 것은, 입력 정보에 따라 복수의 문자열을 맞춰 조합하여 처리 대상 연산자에 대한 복수의 완전한 템플릿 매개 변수를 얻는 것을 포함한다. 예를 들어, 해석된 내부 템플릿 매개 변수는 문자열이다. 복수의 문자열에는 예를 들어 문자열 Float 및 문자열 CPUContext가 포함된다. 이 두 문자열을 맞춰 조합하면 완전한 템플릿 매개 변수 <Float, CPUContext>를 얻을 수 있다. 일부 실시예에서, 복수의 완전한 템플릿 매개 변수에 따라 연산자 커널 함수를 처리하여 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것은, 복수의 완전한 템플릿 매개 변수의 각 완전한 템플릿 매개 변수 에 대해 해당 완전한 템플릿 매개 변수의 함수 매개 변수 유형을 결정하며, 함수 매개 변수 유형에 따라 완전한 템플릿 매개 변수의 입력 정보를 대응하는 매개 변수 정보로 변환하며, 및 대응하는 매개 변수 정보를 기록하는 것을 포함할 수 있다. 이하 도 3와 결합하여 상세히 설명하기로 한다. 도 3는 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 3에 도시된 바와 같이, 방법은 예를 들어 I개의 완전한 템플릿 매개 변수를 순회하고, i번째 완전한 템 플릿 매개변수에 대해 동작 S331 내지 동작 S335를 포함하는 동작을 실행하여 완전한 템플릿 매개 변수의 입력 정보를 대응하는 매개 변수 정보로 변환하도록 할 수 있다. I는 1보다 크거나 같은 정수이고, i는 I보다 작거나 같은 정수이다. 동작 S331에서, i번째 완전한 템플릿 매개 변수의 함수 매개 변수 유형을 결정한다. 예를 들어, i번째 완전한 템플릿 매개 변수에 따라 일부 함수 매개 변수의 유형을 결정하여 함수 매개 변수 유 형으로 할 수 있다. 동작 S332에서, 함수 매개 변수 유형에 따라 i번째 완전한 템플릿 매개 변수의 입력 정보를 i번째 세트의 매개 변수 정보로 변환한다. 예를 들어, 서로 다른 함수 매개 변수 유형은 서로 다른 변환 방식에 대응할 수 있다. 함수 매개 변수 유형과 변환 방식 사이의 대응 관계는 미리 설정된 것일 수 있다. 또 다른 예로, 위에서 설명한 처리 대상 연산자에 대한 입력 정보에는 i번째 완전한 템플릿 매개 변수에 대응하 는 i번째 입력 정보가 포함될 수 있다. i번째 입력 정보에는 복수의 함수 매개 변수가 포함될 수 있다. 대응하 는 함수 매개 변수 유형에 따라 입력 정보를 대응하는 i번째 세트의 매개 변수 정보로 변환할 수 있다. 동작 S333에서, i번째 세트의 매개 변수 정보를 기록한다. 예를 들어, i번째 세트의 매개 변수 정보를 메모리에 기록할 수 있다. 동작 S334에서, i가 I와 같은지 여부를 결정한다. i=I의 경우, 동작S335을 수행하고 프로세스를 종료한다. i=I일 때, 이미 I개의 완전한 템플릿 매개 변수를 순회 하였고, 프로세스를 종료할 수 있다. i가 I 보다 작은 경우, 동작 S331로 돌아가서 i+1번째의 완전한 템플릿 매개 변수에 대해 동작 S331 내지 동작 S334를 수행한다. 하나의 예시에서, 데이터 유형이 8가지이고 기기 유형이 2가지인 경우, 반복하여 순회하는 방식을 통해 16세트 의 매개 변수 정보를 얻어 다양한 장치 유형 및 데이터 유형의 조합을 지원할 수 있다. 하나의 예시에서, 위에서 설명한 i번째 함수의 입력 정보에 대해 i번째 함수의 함수 매개 변수 유형을 결정하고 해당 유형 및 관련된 필요 정보를 기록할 수 있다. 예를 들어 C++ 템플릿 메타프로그래밍 기술을 이용하여 컴파 일 기간의 계산, 판단, 변환, 쿼리 등 기능을 구현할 수 있다. 일부 실시예에서, 예를 들어 위에서 설명한 방법은, 복수의 완전한 템플릿 매개 변수에 따라 딥러닝 프레 임워크에 기반한 등록 대상 연산자를 생성하며, 등록 대상 연산자를 딥러닝 프레임워크 내부의 글로벌 연산자 테이블에 등록하는 것을 더 포함할 수 있다. 딥러닝 프레임워크 내부에서 통일된 스케줄링을 실현하기 위해 딥러닝 프레임워크 내부의 연산자에 대응하는 함 수 쓰기는 정규화될 수 있으며, 해당 정규화된 쓰기는 사용자의 자체 정의 연산자의 계산 함수의 작성 방식과 비교적 큰 차이가 있다.예를 들어, 다른 시나리오에서, 다른 사용자의 계산 함수의 쓰는 방식은 다를 수 있으며, 예를 들어 하나의 텐 서를 입력으로 할 때, 함수의 쓰는 방식은, Tensor 리스트 연산자 계산 함수 이름을 반환(입력 Tensor 1){...} 만약 두 개의 입력 텐서가 있다면, 함수의 쓰기 방식은, Tensor 리스트 연산자 계산 함수 이름을 반환(입력 Tensor 1, 입력 Tensor 2) {...} 더 많은 입력이 있을 때 더 많은 함수 선언도 있을 것이다. C++ 프로그래밍 언어에서 서로 다른 함수 선언은 서 로 다른 함수 포인터 유형, 즉 서로 다른 데이터 유형을 의미하며, 프레임워크는 사용자가 작성할 가능성이 있 는 함수 포인터 유형을 저장하고 프레임워크 최하위 계층에서 호출할 수 있어야 한다. 이러한 유연성이 매우 강 한 쓰기 법식은 C++ 프로그래밍 언어에서 간결하고 범용되는 형태로 저장할 수 없다. 전체의 간결성을 구현하기 위해서는 사용자가 작성한 다양한 계산 함수의 정규화도 필요하다. 예를 들어, 하나의 자체 정의 계산 함수의 함수 형태는, Tensor 리스트 연산자 계산 함수 이름을 반환(입력 Tensor 1){...} 또 다른 자체 정의 계산 함수의 함수 형태는, Tensor 리스트 연산자 계산 함수 이름을 반환(입력 Tensor 1,입력 Tensor 2) {...} 상기 두개의 자체 정의 계산 함수의 함수 형태는 통일되지 않으며, 본 실시예에서는 딥러닝 프레임워크 내부에 서 통일된 스케줄링을 용이하게 하기 위해 서로 다른 자체 정의 계산 함수를 정규화해야 한다. 본 개시의 실시예에서, 등록 대상 연산자는 등록 대상 연산자의 설명 정보 및 정규화된 입력 정보와 정규화된 함수 포인터를 포함하는 등록 대상 연산자 커널 함수를 포함하고, 복수의 완전한 내부 템플릿 함수에 따라 딥러 닝 프레임워크에 기반한 등록 대상 연산자를 생성하는 것은, 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해, 완전한 템플릿 매개 변수에 대응하는, 정규화된 형태를 갖는 정적 함수를 포함하는 구조체를 결정하며, 정적 함수의 입력 정보를 정규화된 입력 정보로 하며, 정적 함수의 함수 포인터를 정규화된 함수 포인터로 하는 것을 포함한다. 예를 들어， 딥러닝 프레임워크 내의 다양한 연산자는 OpKernel 클래스를 계승하고 채움으로써 자체의 계산 함 수(Compute)를 구현할 수 있다. 연산자의 대응하는 입출력 텐서는 실행 컨텍스트(Execution Context)에 저장할 수 있으며, 실행 컨텍스트의 Input 및 Output 기능의 실행을 통해 획득할 수 있다. 하나의 예시에서, 등록 대상 연산자 커널 함수를 구성할 때, 정규화된 형태의 함수에 기반하여 구성할 수 있다. 이 정규화된 형태는 완전한 템플릿 매개 변수에 대응하는 구조체의 정적 함수일 수 있다. 또 예로 들면, 등록 대상 연산자 커널 함수를 구성할 때, 상기 정적 함수의 입력 정보를 생성하는 것; 상기 정 적 함수의 함수 포인터를 생성하는 것; 및 context에서 입력 정보를 획득하고 inputs 변수에 넣는 것과 같은 기 타 일부 표준 처리를 생성하는 것을 포함할 수 있다. 등록 대상 연산자 커널 함수를 구성할 때 통일된 형태를 가진 정적 함수를 적용하는 것을 통해 자체 정의 계산 함수를 통일하여 딥러닝 프레임워크의 통일된 스케줄링을 할 수 있다. 또한, 일부 실시예에서 정적 함수의 입력 정보는 입력 텐서 리스트를 포함하는 입력 정보 리스트를 구성하고, 구조체는 각각이 대응하는 데이터 유형을 가지는 적어도 하나의 특수 서브 구조체를 포함한다. 데이터 유형은 텐서 및 비텐서를 포함한다. 예를 들어, 정규화 형태의 정적 함수의 입력은 입력 정보 리스트일 수 있으며, 더 나아가 입력 정보 리스트에는 입력 텐서 리스트과 속성 리스트가 포함될 수 있고, 속성 리스트는 기타 데이터 유형의 입력 변수를 저장하기 위한 것이다. 하나의 예시에서, 입력 변수의 데이터 유형에는 텐서(tensor)형, 정수형(int), 부동 소수점형 (float)이 포함되며, tensor1, tensor2, int, float로 나타낸다. 정적 함수의 입력 정보 리스트에는 텐서 리스 트(tensor1、tensor2) 및 속성 리스트(int、float)이 포함될 수 있다. 예를 들어, 입력 정보 리스트는 C++의 템플릿 매개 변수 도출 메커니즘을 적용하여 획득할 수 있다. 이하 도 4와 결합하여 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법을 상세히 설명하기로 한다.도 4는 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 4에 도시된 바와 같이, 방법은 연산자 커널 함수의 입력 정보와 함수 포인터의 정규화를 구현할 수 있 다. 이하 동작 S4411 내지 동작 S4415를 결합하여 상세히 설명하기로 한다. 동작 S4411에서, 등록 대상 연산자를 획득한다. 예를 들어, 등록 대상 연산자는 등록 대상 연산자 설명 정보와 등록 대상 연산자 커널 함수를 포함한다. 등록 대상 연산자 설명 정보는 등록 대상 연산자 입력 정보와 등록 대상 연산자 출력 정보를 포함한다. 등록 대상 연 산자 커널 함수는 해당 연산자의 주요 계산 논리를 설명하기 위한 것일 수 있다. 동작 S4412에서, 등록 대상 연산자의 완전한 템플릿 매개 변수에 대응하는 구조체에 따라 적어도 하나의 서브 구조체를 결정한다. 예를 들어, 등록 대상 연산자는 복수의 완전한 템플릿 매개 변수에 따라 생성된 것일 수 있다. 각 완전한 템플 릿 매개 변수는 하나의 구조체에 대응할 수 있다. 구조체는 예를 들어 미리 설정된 것일 수 있다. 구조체는 함 수 반환 값, 가변 함수 매개 변수 리스트 및 하나의 함수 포인터를 템플릿 매개 변수로 할 수 있으며, 여기서 함수 포인터의 반환 값 유형은 매개 변수 리스트 및 템플릿 매개 변수의 유형과 매칭하다. 해당 구조체는 계산 을 위한 하나의 정적 함수를 포함한다. 해당 정적 함수는 정규화된 형태를 가진다. 또 다른 예로, 해당 구조체는 예를 들어 적어도 하나의 특수 서브 구조체를 포함할 수 있다. 특수 서브 구조체 는 템플릿 매개 변수를 도출하기 위한 것이다. 동작 S4413에서, 하나의 특수 서브 구조체를 등록 대상 연산자의 입력 정보와 매칭시켜 구조체의 정적 함수의 입력 서브 정보를 얻는다. 예를 들어, 특정 데이터 유형의 구조체를 매칭하기 위해, 각 특수 서브 구조체의 특수 구현을 미리 설정할 수 있다. 각 서브 구조체의 특수 구현은 모두 해당 구조체와 매칭되는 데이터 유형을 첫 번째 템플릿 매개 변수로 하고, 그 다음은 나머지 템플릿 매개 변수 리스트이다. 또 다른 예로, 적어도 하나의 특수 서브 구조체는 종료 식별자를 갖는 특수 서브 구조체를 포함한다. 해당 종료 식별자를 갖는 특수 서브 구조체는 종료 식별자를 템플릿 매개 변수로 할 수 있다. 또 다른 예로, 특수 서브 구조체는 하위 정적 함수를 포함할 수 있다. 하위 정적 함수는 매개 변수 인덱스를 템 플릿 매개 변수로 하고, 현재 몇 번째 매개 변수까지 매칭하고 있는지를 나타내는 데 사용할 수 있다. 동작 S4414에서, 종료 식별자까지 매칭하고 있는지 여부를 결정한다. 종료 식별자까지 매칭한 경우, 동작 S4415를 수행하고 프로세스를 종료한다. 종료 식별자까지 매칭하지 않는 경우, 동작 S4413으로 돌아가 다음 서브 구조체에 따라 매칭시킨다. 예를 들어, 컴파일 과정에서 컴파일러는 연산자 커널 함수의 입력 정보를 하나씩 해석한다. 현재 분석되는 입력 정보가 앞에서 정의한 서브 구조체의 특정 특수 구현의 첫 번째 템하여 되어 현재 매개 변수의 해석을 완료한다. 그 다음, 계속해서 나머지 입력 정보를 다른 특수 서브 구조체와 매칭시켜 다음 입력 정보를 해석하 고, 종료 식별자를 템플릿 매개 변수로 하는 특수 서브 구조체까지 매칭되면 매칭가 완료된다. 더 나아가, 일부 실시예에서, 정규화된 형태를 가진 함수 형태는 다음과 같을 수 있다. Tensor 리스트 연산자 계산 함수 이름을 반환(입력Tensor 리스트){...} 도 5는 본 개시의 다른 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 동작 S510에서, 처리 대상 연산자를 획득한다. 예를 들어, 처리 대상 연산자는 연산자 커널 함수와 템플릿 매개 변수를 포함한다. 해당 템플릿 함수는 딥러닝 프레임워크와 무관하며, 처리 대상 연산자를 배포하기 위한 것일 수 있다. 그 다음, 방법은 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 입력 정보를 이용하여 템플 릿 매개 변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻을 수 있다. 이하 동 작 S521 내지 동작 S523를 결합하여 상세히 설명하기로 한다. 동작 S521에서, 매크로를 이용하여 가변 매개 변수 리스트를 생성한다. 동작 S522에서, 가변 매개 변수 리스트를 이용하여 템플릿 매개 변수를 반복하여 해석하여 복수의 내부 템플릿 매개 변수를 얻는다. 동작 S523에서, 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 복수의 완전한 템플릿 매개 변수를 얻는다. 동작 S522 및 동작 S523에 대한 상세한 설명은 위에서 설명한 동작 S2211 및 동작 S2212를 참조할 수 있으며, 본 개시는 여기서는 다시 설명하지 않는다는 것을 이해할 수 있다. 그 다음, 방법은 복수의 완전한 템플릿 매개 변수에 따라 연산자 커널 함수를 처리하여 딥러닝 프레임워크 에 사용할 수 있는 사용 가능 연산자를 얻을 수 있다. 이하 동작 S531, 동작 S523 및 S533을 결합하여 상세히 설명하기로 한다. 동작 S531에서, 복수의 완전한 템플릿 매개 변수를 명시적으로 인스턴스화한다. 본 개시의 실시예에서, 복수의 완전한 템플릿 매개 변수는 각각 템플릿 함수의 설명 정보와 템플릿 함수 정보를 포함한다. 예를 들어, 템플릿 함수의 설명 정보를 헤더 파일로 인스턴스화한다. 템플릿 함수의 설명 정보는 템플릿 함수 선언일 수 있다. 헤더 파일은 예를 들어 \".h\" 파일일 수 있다. 예를 들어, 템플릿 함수 정보를 소스 코드 파일로 인스턴스화한다. 템플릿 함수 정보는 템플릿 함수 구현일 수 있다. 소스 코드 파일은 예를 들어 \".cc\" 파일일 수 있다. C++ 프로그래밍 언어에서 템플릿 함수를 적용하는 커널 형태에는 몇 가지 제한이 있다. 컴파일할 때, 템플릿 함 수는 실제 템플릿 매개 변수 유형에 따라 인스턴스화되어야 하며, 템플릿 함수의 구현도 대응하는 호출 위치로 전개되어야 한다. 템플릿 함수의 설명 정보를 헤더 파일로 인스턴스화하고, 소스 코드 파일을 소스 코드 파일로 인스턴스화하면 컴파일 중에 대량의 템플릿 함수 코드 전개가 도입되어 컴파일 효율성에 영향을 미치는 것을 방 지할 수 있다. 동작 S532에서, 완전한 템플릿 매개 변수의 입력 정보를 대응하는 매개 변수 정보로 변환한다. 이해할 수 있는 것은, 동작 S532에 대한 상세한 설명은 위에서 설명한 방법을 참조할 수 있으며, 본 개시 는 여기서는 다시 설명하지 않는다. 동작 S533에서, 등록 대상 연산자 커널 함수의 입력 정보와 함수 포인터의 정규화를 구현한다. 이해할 수 있는 것은, 동작 S533에 대한 상세한 설명은 위에서 설명한 방법을 참조할 수 있으며, 본 개시 는 여기서는 다시 설명하지 않는다. 동작 S540에서, 연산자를 딥러닝 프레임워크 내부의 글로벌 연산자 테이블에 등록한다. 예를 들어, 동작 S532 또는 동작 S533을 수행한 후, 연산자를 글로벌 연산자 테이블에 등록하는 정보를 획득할 수 있다. 이러한 정보에는 예를 들어 연산자 커널 함수의 대응하는 매개 변수 정보 및/또는 정규화된 함수 포인 터가 포함될 수 있다. 동작 S550에서, 글로벌 연산자 테이블에 따라 사용 가능 연산자를 호출한다. 일부 실시예에서, 위에서 설명한 소스 코드 파일에서 템플릿 함수를 명시적으로 인스턴스화할 수 있다. 예를 들어, 헤더 파일에서 템플릿 함수의 설명 정보는 예를 들어 다음과 같을 수 있다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "또 다른 예로, 소스 코드 파일에서 명시적으로 인스턴스화된 함수 ScaleKernel<float, CPUContext>는 예로 들어 다음과 같을 수 있다."}
{"patent_id": "10-2023-7028022", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "데이터 유형이 8가지이고 기기 유형이 2가지인 경우, 명시적으로 인스턴스화된 함수에 대응하는 코드는 16세트 를 포함할 수 있다. 다른 일부 실시예에서, 복수의 완전한 템플릿 매개 변수에 따라 다음과 같은 복수의 인스턴스화된 선언문을 생 성할 수 있다. Template decltype( ＼ 커널 함수 이름<데이터 유형, 기기 컨텍스트 유형>); 여기서 decltype은 함수 유형을 자동으로 해석하는 방법이다. 이렇게 하면 컴파일의 효율성을 향상시키면서 쓰 기의 간접성을 향상시켜 이 명시적 인스턴스화 프로세스를 자동으로 완성할 수 있다. 일부 실시예에서, 전역 연산자 테이블은, 연산자 커널 팩토리 클래스(kernal factory class); 연산자 커널 이름 클래스(kernal name class)와 커널 키 값 클래스(kernal key-value class); 및 연산자 커널 클래스를 포함한다. 예를 들어, 연산자 커널 클래스는 연산자 커널 함수의 포인터, 연산자 커널 함수 입력 매개 변수의 설명 정보, 및 연산자 커널 함수 출력 매개 변수의 설명 정보 중 적어도 하나를 포함한다. 이하 도 6와 결합하여 글로벌 연산자 테이블에 대해 상세히 설명하기로 한다. 도 6은 본 개시의 일 실시예에 따른 글로벌 연산자 테이블의 예시적 개략도이다. 도 6에 도시된 바와 같이, 전역 연산자 테이블의 데이터 구조는 제1 레벨의 연산자 커널 팩토리 클래스 , 제2 레벨의 연산자 커널 이름 클래스, 커널 키 값 클래스 및 연산자 커널 클래스를 포함 할 수 있다. 도 6의 예시에서, 연산자 커널 클래스는 제3 레벨의 연산자 커널 함수의 포인터 및 연산자 커널 함수 매개 변수의 설명 정보를 포함할 수 있다. 연산자 커널 함수 매개 변수의 설명 정보는 예로 들어 연 산자 커널 함수 입력 매개 변수의 설명 정보 및 연산자 커널 함수 출력 매개 변수의 설명 정보를 포함할 수 있 다. 일부 실시예에서, 복수의 완전한 템플릿 매개 변수에 따라 연산자 커널 함수를 처리하여 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것은, 복수의 완전한 템플릿 매개 변수를 명시적으로 인스턴스화하는 것을 통해 연산자 커널 함수를 처리하여 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것을 포 함한다. 일부 실시예에서, 복수의 완전한 템플릿 매개 변수 각각에는 템플릿 함수의 설명 정보와 템플릿 함수 정보가 포 함되어 있으며, 복수의 완전한 템플릿 매개 변수를 명시적으로 인스턴스화하고 연산자 커널 함수를 처리하여 딥 러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻는 것은, 템플릿 함수의 설명 정보를 헤더 파일로 인 스턴스화하는 것; 및 템플릿 함수 정보를 소스 코드 파일로 인스턴스화하는 것을 포함한다. 도 7은 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 장치의 블록도이다. 도 7에 도시된 바와 같이, 해당 장치는 획득 모듈, 해석 모듈 및 처리 모듈을 포함할 수 있다. 획득 모듈은 처리 대상 연산자를 획득하기 위한 것이다. 예를 들어, 처리 대상 연산자는 연산자 커널 함수, 및 딥러닝 프레임워크와 무관한 템플릿 매개 변수를 포함한다. 해석 모듈은 처리 대상 연산자에 대한 입력 정보를 수신한 것에 응답하여 입력 정보를 이용하여 템플릿 매 개 변수를 해석하여 딥러닝 프레임워크에 관한 복수의 완전한 템플릿 매개 변수를 얻기 위한 것이다. 처리 모듈은 복수의 완전한 템플릿 매개 변수에 따라 연산자 커널 함수를 처리하여 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻기 위한 것이다. 일부 실시예에서, 해석 모듈은, 매크로를 이용하여 가변 매개 변수 리스트를 생성하기 위한 생성 서브 모듈; 및 가변 매개 변수 리스트에 기반하여 템플릿 매개 변수를 반복하여 해석하기 위한 해석 서브 모듈을 포함하며, 여 기서, 입력 정보를 매크로의 매크로 매개 변수로 한다. 일부 실시예에서, 가변 매개 변수 리스트에는, 처리 대상 연산자의 이름; 연산자 커널 함수의 이름; 연산자 커 널 함수의 데이터 레이아웃; 딥러닝 프레임워크를 구현하기 위한 기기 유형; 및 딥러닝 프레임워크를 구현하기 위한 데이터 유형이 포함된다. 일부 실시예에서, 해석 서브 모듈은, 매크로에 포함되는 매개 변수 수를 결정하기 위한 제1 결정 유닛; 매개 변 수 수에 따라 반복 종료 위치를 결정하기 위한 제2 결정 유닛; 및 가변 매개 변수 리스트를 이용하여 반복 종료 위치에 따라 입력 정보를 반복하여 처리하기 위한 처리 유닛을 포함한다. 일부 실시예에서, 해석 서브 모듈은, 가변 매개 변수 리스트를 이용하여 모듈 매개 변수를 반복하여 해석하여 복수의 내부 템플릿 매개 변수를 얻기 위한 해석 유닛; 및 복수의 내부 템플릿 매개 변수를 맞춰 조합하여 복수 의 완전한 템플릿 매개 변수를 얻기 위한 맞춰 조합 유닛을 더 포함한다. 일부 실시예에서, 복수의 내부 템플릿 매개 변수는 복수의 문자열을 포함하고, 맞춰 조합 유닛은 입력 정보에 따라 복수의 문자열을 맞춰 조합하여 처리 대상 연산자에 대한 복수의 완전한 템플릿 매개 변수를 얻기 위한 맞 춰 조합 서브 유닛을 포함한다. 일부 실시예에서, 처리 모듈은, 복수의 완전한 템플릿 매개 변수에 대해 명시적 인스턴스화를 진행하는 것을 통 해, 연산자 커널 함수를 처리하여 딥러닝 프레임워크에 사용할 수 있는 사용 가능 연산자를 얻기 위한 명시적 인스턴스화 서브 모듈을 포함한다. 일부 실시예에서, 복수의 완전한 템플릿 매개 변수는 각각 템플릿 함수의 설명 정보와 템플릿 함수 정보를 포함 하며, 명시적 인스턴스화 서브 모듈은, 템플릿 함수의 설명 정보를 헤더 파일로 인스턴스화하기 위한 제1 인스 턴스화 유닛; 및 템플릿 함수 정보를 소스 코드 파일로 인스턴스화하기 위한 제2 인스턴스화 유닛을 포함한다. 일부 실시예에서, 처리 모듈은, 복수의 완전한 템플릿 매개 변수 중의 각 완전한 템플릿 매개 변수에 대해 해당 완전한 템플릿 매개 변수의 함수 매개 변수 유형을 결정하기 위한 제1 결정 서브 모듈; 함수 매개 변수 유형에 따라 완전한 템플릿 매개 변수의 입력 정보를 대응하는 매개 변수 정보로 변환하기 위한 변환 서브 모듈; 및 대 응하는 매개 변수 정보를 기록하기 위한 기록 서브 모듈을 포함한다. 일부 실시예에서, 장치는, 복수의 완전한 템플릿 매개 변수에 따라 딥러닝 프레임워크에 기반한 등록 대상 연산자를 생성하기 위한 생성 모듈; 및 등록 대상 연산자를 딥러닝 프레임워크 내부의 글로벌 연산자 테이블에 등록하기 위한 등록 모듈을 더 포함할 수 있다. 일부 실시예에서, 등록 대상 연산자는 등록 대상 연산자의 설명 정보, 및 정규화된 입력 정보와 정규화된 함수 포인터를 포함하는 등록 대상 연산자 커널 함수를 포함하고, 생성 모듈은, 복수의 완전한 템플릿 매개 변수 중 의 각 완전한 템플릿 매개 변수에 대해, 완전한 템플릿 매개 변수에 대응하는, 정규화된 형태를 갖는 정적 함수 를 포함하는 구조체를 결정하기 위한 제2 결정 서브 모듈; 정적 함수의 입력 정보를 정규화된 입력 정보로 하기 위한 제1 정규화 서브 모듈; 및 정적 함수의 함수 포인터를 정규화된 함수 포인터로 하기 위한 제2 정규화 모듈 을 포함한다. 일부 실시예에서, 정적 함수의 입력 정보는 입력 텐서 리스트를 포함하는 입력 정보 리스트를 구성하고, 구조체 는 각각이 대응하는 데이터 유형을 가지는 적어도 하나의 특수 서브 구조체를 포함하여, 데이터 유형은 텐서 및 비텐서를 포함한다. 일부 실시예에서, 전역 연산자 테이블은, 연산자 커널 팩토리 클래스; 연산자 커널 이름 클래스 및 커널 키 값 클래스; 및 연산자 커널 클래스를 포함한다. 일부 실시예에서, 연산자 커널 클래스는 연산자 커널 함수의 포인터, 연산자 커널 함수 입력 매개 변수의 설명 정보, 및 연산자 커널 함수 출력 매개 변수의 설명 정보 중 적어도 하나를 포함한다.일부 실시예에서, 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 처리 대상 연산자를 배포하기 위한 것이고, 딥러닝 프레임워크와 무관한 템플릿 매개 변수는 딥러닝 프레임워크의 구현 기기 및 딥러닝 프레임워크의 데이 터 유형과 모두 무관한 템플릿 매개 변수를 포함한다. 일부 실시예에서, 장치는, 사용 가능 연산자에 대한 호출 명령에 응답하여 사용 가능 연산자를 호출하기 위한 호출 모듈; 및 호출된 사용 가능 연산자를 컴파일하는 것을 통해 사용 가능 연산자에 대응하는 함수 기능 을 수행하기 위한 수행 모듈을 더 포함한다. 본 개시의 기술 방안에서 언급된 사용자 개인 정보의 수집, 저장, 사용, 가공, 전송, 제공, 공개와 적용 등 처 리는 모두 관련 법률과 법규의 규정에 부합되고, 필요한 비밀 유지 조치를 취했으며, 공서 양속을 위반하지 않 는다. 본 개시의 기술방안에서, 사용자의 개인 정보를 획득하거나 수집하기 전에 모두 사용자의 권한 부여 또는 동의를 획득하였다. 본 개시의 실시예에 따르면, 본 개시는 또한 전자 기기와 판독 가능 저장 매체와 컴퓨터 프로그램 제품을 제공 한다. 도 8은 본 개시의 실시예를 실시하는데 사용될 수 있는 예시적인 전자기기 의 개략적인 블록도이다. 전자 기기는 랩톱 컴퓨터, 데스크톱 컴퓨터, 워크스테이션, 개인 휴대 정보 단말기, 서버, 블레이드 서버, 메인 프레 임 컴퓨터 및 기타 적합한 컴퓨터와 같은 다양한 형태의 디지털 컴퓨터를 말한다. 전자 기기는 개인 휴대 정보 단말기, 셀룰러 전화, 스마트 폰, 웨어러블 디바이스 및 기타 유사한 컴퓨팅 장치와 같은 다양한 형태의 모바일 장치를 말할 수도 있다. 본 명세서에서 나타낸 부품, 이들의 연결 및 관계, 및 이들의 기능은 단지 예시일 뿐이 며, 본 명세서에서의 설명 및/또는 요구하는 본 출원의 구현을 한정하려 하는 것이 아니다. 도 8에 도시된 바와 같이, 기기는 읽기 전용 기억 장치(ROM)에 저장된 컴퓨터 프로그램 또는 저장 유 닛에서 랜덤 액세스 메모리(RAM)로 로드된 컴퓨터 프로그램에 따라 다양한 적절한 동작 및 처리를 실 행할 수 있는 컴퓨팅 유닛을 포함한다. RAM에는 저장 기기의 동작에 필요한 다양한 프로그램 및 데이터가 저장될 수 있다. 컴퓨팅 유닛, ROM 및 RAM은 버스를 통해 서로 연결된다. 입력/ 출력(I/O)인터페이스도 버스에 연결된다. 기기 중의 복수의 부품은 I/O인터페이스와 연결되며, 예를 들면 키보드, 마우스 등과 같은 입력 유닛 ; 예를 들면 다양한 유형의 디스플레이, 스피커 등과 같은 출력 유닛; 예를 들면 자기 디스크, CD롬 등과 같은 저장 유닛 및 예를 들면 랜 카드, 모뎀, 무선 통신 송수신기 등과 같은 통신 유닛을 포함 한다. 통신 유닛은 기기가 인터넷과 같은 컴퓨터 네트워크 및/또는 다양한 통신 네트워크와 기타 장 치를 통하여 정보/데이터를 교환할 수 있도록 허용한다. 컴퓨팅 유닛은 처리 및 컴퓨팅 능력을 갖는 다양한 범용 및/또는 전용 처리 유닛일 수 있다. 컴퓨팅 유닛 의 일부 예는 중앙 처리 유닛(CPU), 그래픽 처리 유닛(GPU), 다양한 전용 인공 지능(AI) 컴퓨팅 칩, 머신 러닝 모델 알고리즘을 실행하는 다양한 컴퓨팅 유닛, 디지털 신호 처리 장치(DSP) 및 임의의 적절한 프로세서, 컨트롤러, 마이크로 컨트롤러 등을 포함하지만 이에 한정되지 않는다. 컴퓨팅 유닛은 예를 들면 딥러닝 프 레임워크의 연산자 처리 방법과 같은 상술한 다양한 방법과 처리를 실행한다. 예를 들면, 일부 실시예에서는 딥 러닝 프레임워크의 연산자 처리 방법은 컴퓨터 소프트웨어 프로그램으로 구현될 수 있으며, 이는 예를 들면 유 형적으로 저장 유닛과 같은 기계 판독 가능 매체에 포함된다. 일부 실시예에서 퓨터 프로그램의 일부 또는 전부는 ROM 및/또는 통신 유닛을 통해 기기에 로드 및/또는 설치될 수 있다. 컴퓨터 프로그램이 RAM에 로딩되고 컴퓨팅 유닛에 의해 실행될 경우, 상술한 딥러닝 프레임워크의 연산자 처리 방법 중 의 하나 또는 복수의 동작을 실행할 수 있다. 선택적으로, 다른 실시예에서, 컴퓨팅 유닛은 기타 임의의 적절한 방식(예를 들면, 펌웨어에 의해)으로 딥러닝 프레임워크의 연산자 처리 방법을 실행하도록 배치될 수 있 다. 본 명세서의 상술한 시스템 및 기술의 다양한 구현 방식은 디지털 전자 회로 시스템, 집적 회로 시스템, 필드 프로그램 가능 게이트 어레이(FPGA), 전용 집적 회로(ASIC), 특정 용도 표준 제품(ASSP), 시스템 온칩(SOC), 복 합 프로그램 가능 논리 장치(CPLD), 컴퓨터 하드웨어, 펌웨어, 소프트웨어 및/또는 이들의 조합에서 구현될 수 있다. 이러한 다양한 실시방식은 아래와 같은 것을 포함할 수 있다. 하나 또는 복수의 컴퓨터 프로그램에서 실 시될 수 있으며, 해당 하나 또는 복수의 컴퓨터 프로그램은 적어도 하나의 프로그램 가능 프로세서를 포함하는 프로그램 가능 시스템에서 실행 및/또는 해석될 수 있으며, 프로그램 가능 프로세서는 전용 또는 범용 프로그램 가능 프로세서일 수 있으며, 저장 시스템, 적어도 하나의 입력 장치 및 적어도 하나의 출력 장치로부터 데이터및 명령어를 수신하고, 데이터 및 명령어를 해당 저장 시스템, 적어도 하나의 입력 장치 및 적어도 하나의 출력 장치에 전송할 수 있다. 본 개시의 방법을 실행하기 위한 프로그램 코드는 하나 또는 복수의 프로그래밍 언어의 임의의 조합으로 작성될 수 있다. 이러한 프로그램 코드는 범용 컴퓨터, 전용 컴퓨터 또는 기타 프로그램 가능 데이터 처리 장치의 프로 세서 또는 컨트롤러에 제공하여, 프로그램 코드가 프로세서 또는 컨트롤러에 의해 실행될 때 흐름도 및/또는 블 록도에서 규정한 기능/동작이 실시되도록 할 수 있다. 프로그램 코드는 완전히 기계에서 실행되거나, 부분적으 로 기계에서 실행되거나, 독립적인 소프트웨어 패키지로서 부분적으로 기계에서 실행되면서 부분적으로 원격 기 계에서 실행되거나, 완전히 원격 기계 또는 서버에서 실행될 수 있다. 본 개시 내용의 맥락에서, 기계 판독 가능 매체는 명령어 실행 시스템, 장치 또는 설비에 의해 사용되거나, 명 령어 실행 시스템, 장치 또는 설비와 결합하여 사용되도록 제공하는 프로그램을 포함하거나 저장할 수 있는 매 체일 수 있다. 기계 판독 가능 매체는 기계 판독 가능 신호 매체 또는 기계 판독 가능 저장 매체일 수 있다. 기 계 판독 가능 매체는 전자, 자기, 광학, 전자기, 적외선 또는 반도체 시스템, 장치 또는 기기, 또는 이들의 임 의의 적절한 조합을 포함할 수 있지만 이에 한정되지 않는다. 기계 판독 가능 저장 매체의 보다 구체적인 예에 는 하나 또는 복수의 전선에 기반한 전기 연결, 휴대용 컴퓨터 디스크, 하드 디스크, 임의기억장치 (RAM), 읽기 전용 기억 장치 (ROM), 소거 가능 프로그램 가능 읽기 전용 기억 장치 (EPROM 또는 플래시 메모리), 광섬유, 휴 대용 컴팩트 디스크 읽기 전용 기억 장치 (CD-ROM), 광학 저장 장치, 자기 저장 장치 또는 이들의 임의의 적절 한 조합을 포함할 수 있다. 사용자와의 인터랙션을 제공하기 위하여, 여기에 설명된 시스템 및 기술을 컴퓨터에서 실시할 수 있다. 이 컴퓨 터는 사용자에게 정보를 표시하는 디스플레이 장치(예: CRT(음극선관) 또는 LCD(액정 디스플레이) 모니터) 및 사용자가 컴퓨터에 입력을 제공할 수 있는 키보드 및 위치 결정 장치(예를 들면, 마우스 또는 트랙볼)를 구비한 다. 다른 유형의 장치도 사용자와의 인터랙션을 제공하기 위해 사용될 수 있다. 예를 들면, 사용자에게 제공되 는 피드백은 모든 형태의 감지 피드백(예를 들면, 시각 피드백, 청각 피드백 또는 촉각 피드백) 일 수 있고, 모 든 형태(소리 입력, 음성 입력 또는 촉각 입력을 포함)를 이용하여 사용자로부터의 입력을 접수할 수 있다. 여기에 설명된 시스템 및 기술을 백그라운드 부품을 포함하는 컴퓨팅 시스템(예를 들면, 데이터 서버로 함) 또 는 미들웨어 부품을 포함하는 컴퓨팅 시스템(예를 들면, 애플리케이션 서버) 또는 프론트 엔드 부품을 포함하는 컴퓨팅 시스템(예를 들면, 그래픽 유저 인터페이스 또는 웹 브라우저를 가지고 있는 사용자 컴퓨터이며, 사용자 가 상기 그래픽 유저 인터페이스 또는 웹 브라우저를 통하여 여기에 설명된 시스템 및 기술의 실시형태와 인터 랙션할 수 있다) 또는 이러한 백그라운드 부품, 미들웨어 부품, 또는 프런트 엔드 부품의 모든 조합을 포함하는 컴퓨팅 시스템에서 실시할 수 있다. 임의의 형식 또는 매체의 디지털 데이터 통신(예를 들면, 통신 네트워크)을 통해 시스템의 부품을 서로 연결할 수 있다. 통신 네트워크의 예로는 근거리 통신망(LAN), 광역 통신망(WAN) 및 인터넷을 포함한다. 통신 네트워크의 예로는 근거리 통신망(LAN), 광역 통신망(WAN) 및 인터넷을 포함한다. 통 신 네트워크의 예로는 근거리 통신망(LAN), 광역 통신망(WAN) 및 인터넷을 포함한다. 컴퓨터 시스템은 클라이언트와 서버를 포함할 수 있다. 클라이언트와 서버는 일반적으로 서로 멀리 떨어져 있으 며, 일반적으로 통신 네트워크를 통해 인터랙션한다. 클라이언트와 서버간의 관계는 해당 컴퓨터에서 실행되고 서로 클라이언트-서버 관계를 갖는 컴퓨터 프로그램에 의해 생성된다. 서버는 클라우드 서버일수 있고, 분산 시 스템의 서버일 수도 있고, 또는 블록체인과 결합된 서버일 수도 있다. 위에 나타낸 다양한 형태의 흐름을 사용하여 동작을 다시 순서 배열, 추가 또는 삭제할 수 있음을 이해해야 한 다. 예를 들면, 본 출원에 기재된 각 동작은 본 개시에서 개시하는 기술 방안이 기대하는 결과를 구현할 수 있 는 한, 병행하여 실행하거나 순차적으로 실행하거나 다른 순서로 실행할 수도 있으며, 본 명세서에서는 여기에 대해서 제한을 하지 않는다. 상술한 구체적인 실시방식은 본 출원의 청구범위에 대한 제한을 구성하지 않는다. 해당 발명이 속하는 기술 분 야에서 통상의 지식을 가진 자라면 설계 요구 및 기타 요소에 따라 다양한 수정, 조합, 서브 조합 및 대체를 진 행할 수 있음을 이해해야 한다. 본 출원의 정신과 원칙내에서 이루어진 모든 수정, 동등한 대체 및 개선 등은 본 출원의 청구범위내에 포함되어야 한다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8"}
{"patent_id": "10-2023-7028022", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면은 본 방안을 보다 잘 이해하는 데 사용되며, 본 출원에 대한 한정이 되지 않는다. 그중에, 도 1은 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 2는 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 3은 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 4는 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 5는 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법의 흐름도이다. 도 6은 본 개시의 일 실시예에 따른 글로벌 연산자 테이블의 예시적 개략도이다. 도 7은 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 장치의 블록도이다. 도 8은 본 개시의 일 실시예에 따른 딥러닝 프레임워크의 연산자 처리 방법을 적용할 수 있는 전자 기기의 블록 도이다."}
