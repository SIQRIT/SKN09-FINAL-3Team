{"patent_id": "10-2016-0055985", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2017-0108737", "출원번호": "10-2016-0055985", "발명의 명칭": "시간 위치를 이용한 소프트웨어 복잡도 경감 장치 및 방법", "출원인": "유홍준", "발명자": "유홍준"}}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "소프트웨어 복잡도를 경감하는 장치에 있어서,소프트웨어의 제어 흐름을 분석하여 시간 위치를 인식하는 시간 위치 인식부;정상적인 시간 위치와 비정상적인 시간 위치를 분류하는 문제 유형 분류부;동일한 문제 해결 목표를 가진 제어 흐름을 융합하고 그렇지 않은 제어 흐름을 분리하는 동일 목표 융합부;동일한 문제 해결 목표에 속하는 정상 및 비정상 제어 흐름의 시간 속성을 문제 해결에 특화시켜 조정 작업을해주는 문제 특화 조정부;소프트웨어에 대해 통합적인 시각의 복잡도 경감 처리를 하는 복잡도 경감 제어부;를 포함하는 인간이 이해 및 통제하기 용이한 형태로 소프트웨어 복잡도를 제어하여 개선하는 소프트웨어 복잡도 경감 장치."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서, 상기 시간 위치 인식부는,소프트웨어의 제어 흐름을 분석할 때, 제어 흐름에 따른 시간 위치 속성을 인식하는 것을 특징으로 하는 소프트웨어 복잡도 경감 장치."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서, 상기 문제 유형 분류부는,시간 위치 속성의 구분에 따라 제어 흐름을 정상, 역방향 비정상, 순방향 비정상의 세 가지 유형으로 분류해주는 것을 특징으로 하는 소프트웨어 복잡도 경감 장치."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서, 상기 동일 목표 융합부는,동일한 소단위 목표를 가진 제어 흐름의 영역을 융합하고 다른 소단위 목표를 가진 제어 흐름의 영역을 분리하는 것을 특징으로 하는 소프트웨어 복잡도 경감 장치."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서, 상기 문제 특화 조정부는,동일한 소단위 목표를 가진 제어 흐름 중에서 역방향 비정상 특징을 가진 제어 흐름을 정상 특징을 가진 제어흐름으로 특화시켜 조정하고, 정상과 순방향 비정상, 또는 정상과 정상의 제어 흐름을 인간이 이해하기 용이한형태로 특화시켜 조정하는 것을 특징으로 하는 소프트웨어 복잡도 경감 장치."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서, 상기 복잡도 경감 제어부는,소프트웨어 전체와 소단위 목표별 복잡도를 경감, 검증, 최적화해주는 것을 특징으로 하는 소프트웨어 복잡도경감 장치."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 1 항에 있어서, 상기 소프트웨어 복잡도 경감 장치에서의 복잡도 계산은,공개특허 10-2017-0108737-3-복잡도 처리 전 과정에서 시간 위치를 이용한 복잡도 공식을 적용하는 소프트웨어 복잡도 경감 장치."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1 항에 있어서, 상기 소프트웨어 복잡도 경감 장치의 각 부분은 필요에 따라 통합하거나, 분리하거나, 순서를 바꾸는 것이 가능한 것을 특징으로 하는 소프트웨어 복잡도 경감 장치."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "소프트웨어 복잡도 경감 장치가 상기 소프트웨어 복잡도를 경감하는 방법에 있어서,(a) 소프트웨어를 구성하는 프로그램의 제어 흐름을 분석하여 시간 위치 속성을 인식하는 단계;(b) 정상적인 시간 위치와 비정상적인 시간 위치를 분류하는 단계;(c) 동일한 문제 해결 소단위 목표를 가진 제어 흐름은 하나의 통합된 제어 흐름 구획으로 융합하고, 상이한 문제 해결 소단위 목표를 가진 제어 흐름은 다른 문제 해결 제어 흐름 구획으로 분리하는 형태로 문제 해결 제어흐름의 절차 단위를 분류하는 단계;(d) 동일한 문제 해결 소단위 목표를 가진 단위 영역 내에서 비정상적인 문제 해결 시간 위치 속성 중 역방향의비정상 시간 위치 속성을 가진 제어 흐름을 정상의 시간 위치 속성을 가지도록 특화시켜 조정해주고, 정상과 순방향 비정상, 또는 정상과 정상의 제어 흐름을 인간이 이해하기 용이한 형태로 특화시켜 조정해주는 단계;(e) 제어 흐름의 복잡도를 통합적인 시각으로 경감 처리해주는 작업을 수행하는 단계;를 포함하는 인간이 이해 및 통제하기 용이한 형태로 소프트웨어 복잡도를 제어하여 개선하는 소프트웨어 복잡도 경감 방법."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 9 항에 있어서, 상기 소프트웨어 복잡도 경감 방법은,상기 단계 (a)부터 단계 (e)까지의 전 과정에 걸쳐서 제어 흐름의 파악에 순차, 선택, 반복의 입구 하나 출구하나 형태의 기본 구조화 제어 구조를 정상 제어 흐름의 시간 위치 속성을 가지는 것으로 인식하는 것을 특징으로 하는 소프트웨어 복잡도 경감 방법."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 9 항에 있어서, 상기 소프트웨어 복잡도 경감 방법은, 상기 단계 (a)부터 단계 (e)까지의 전 과정에 걸쳐서 제어 흐름의 파악에 순차, 선택, 반복의 기본 제어 구조의특징인 입구 하나 출구 하나의 원칙을 훼손하는 역방향의 비정상 분기를 역방향 시간 위치 속성을 가지는 것으로 인식하는 것을 특징으로 하는 소프트웨어 복잡도 경감 방법."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 9 항에 있어서, 상기 소프트웨어 복잡도 경감 방법은, 상기 단계 (a)부터 단계 (e)까지의 전 과정에 걸쳐서 제어 흐름의 파악에 순차, 선택, 반복의 기본 제어 구조의특징인 입구 하나 출구 하나의 원칙을 훼손하는 순방향의 비정상 분기를 순방향 시간 위치 속성을 가지는 것으로 인식하는 것을 특징으로 하는 소프트웨어 복잡도 경감 방법."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 9 항에 있어서, 상기 소프트웨어 복잡도 경감 방법은,상기 단계 (a)부터 단계 (e)까지의 전 과정에 걸쳐서 역방향 비정상 시간 위치 속성과 순방향 비정상 시간 위치속성을 전체적으로 또는 부분적으로 복잡도 계산에 포함하는 것을 특징으로 하는 소프트웨어 복잡도 경감 방법."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 9 항에 있어서, 상기 소프트웨어 복잡도 경감 방법은,공개특허 10-2017-0108737-4-『시간 위치(TP: Time Position)』의 의미를 용어 자체를 다르게 쓰더라도 순차, 선택, 반복의 입구 하나 출구하나로 구성되는 구조화 프로그래밍의 기본 제어 구조에 해당하는 정상 상황, 입구 하나 출구 하나의 원칙을 훼손하는 역방향의 비정상적인 분기에 해당하는 역방향 비정상 상황, 입구 하나 출구 하나의 원칙을 훼손하는 순방향의 비정상적인 분기에 해당하는 순방향 비정상 상황을 구분하기 위한 것임을 뜻하는 것을 특징으로 하는 소프트웨어 복잡도 경감 방법."}
{"patent_id": "10-2016-0055985", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 9 항에 있어서, 상기 소프트웨어 복잡도 경감 방법은, 상기 단계 (a)부터 단계(e)까지의 전체 또는 부분 과정을 필요에 따라 통합하거나, 분리하거나, 순서를 바꾸는것이 가능한 것을 특징으로 하는 소프트웨어 복잡도 경감 방법."}
{"patent_id": "10-2016-0055985", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은, 시간 위치를 이용하여 소프트웨어의 복잡도를 경감시키는 작업을 수행함에 있어서 정상과 비정상 제 어 흐름에 대해 통합적인 시각에서 시간 위치 속성을 인식하여 이를 기반으로 복잡도를 경감시킴으로써, 소프트 웨어를 구성하는 프로그램의 내용을 쉽게 이해하는 능력과 유지 보수 능력을 향상시키기 위한 소프트웨어 복잡도 경감 장치와 방법에 관한 것이다. 본 발명을 이용하면 소프트웨어의 복잡도 경감을 위한 제어를 자동화하여 시간, 노력, 비용을 획기적으로 절약함과 동시에 고품질의 소프트웨어를 안정적이게 개발 및 개선할 수 있게 된 다. 또한, 인공지능, 머신 러닝을 비롯하여 급속히 복잡화하는 소프트웨어의 안정적 개발 및 개선을 용이하게 하 여 실사회의 문제 해결을 효율적이고 효과적으로 지원할 수 있다."}
{"patent_id": "10-2016-0055985", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은, 시간 위치를 이용한 소프트웨어 복잡도 경감 장치 및 방법에 관한 것이다. 더욱 상세하게는 제어 흐 름의 방향에 따른 시간 위치(TP: Time Position) 속성을 이용하여 복잡도를 측정하고 이를 기반으로 소프트웨어 제어 구조를 시간 위치 기반 정규화를 통해 조정함으로써 소프트웨어의 복잡도를 경감시키는 장치 및 방법에 관 한 것이다."}
{"patent_id": "10-2016-0055985", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "소프트웨어를 구성하는 프로그램의 복잡도는 오류 발생 확률과 상관관계가 있다. 즉, 복잡도의 수준이 올라갈수 록 새로운 오류가 출현할 가능성이 증가한다. 이러한 복잡도를 측정하기 위해 크게 4가지 접근 방법의 척도가 연구를 통해 소개되었다. 첫 번째, Halstead가 소개한 Software Science로 대표되는 프로그램의 크기에 중점을 둔 척도, 두 번째, McCabe의 Cyclomatic Complexity 척도, Woodward의 Knot 수, Chen의 척도로 대표되는 프로 그램의 제어구조에 중점을 둔 척도, 세 번째, Henry의 INFO 척도, Chapine의 Q척도로 대표되는 프로그램의 데이 터 구조나 데이터 흐름에 중점을 둔 척도, 네 번째, Umesh Tiwari의 컴포넌트 내부의 응집도와 컴포넌트간의 결 합도 척도로 대표되는 컴포넌트나 모듈 간의 관계에 중점을 둔 척도 등이다. 이들의 기존 기술들은 주로 소프트웨어를 구성하는 프로그램의 내부 구조나 흐름을 각 측정 기준에 맞게 파악하 여 소프트웨어의 복잡도를 측정하고 개선의 필요성을 제시하기는 하였다. 하지만, 정상적인 상황과 비정상적인 상황을 모두 고려한 상태에서의 복잡도 측정과 경감 방법에 대해서는 기술적인 해법을 제시하지 못하였다. 현재 의 실사회에서 정상적인 상황과 비정상적인 상황에의 대응을 통합적인 시각에서 하지 못할 경우 개발 및 유지 보수를 용이하게 하는 안정적이고 안전한 소프트웨어에 대한 복잡도 제어에 한계를 초래하게 된다. 따라서, 정 상과 비정상 상황에 대한 통합적인 고려를 통해 복잡도를 용이하게 측정하고 경감시키는 기술의 개발이 시급한 실정이다. 선행기술문헌 특허문헌 (특허문헌 0001) 등록번호 10-1500636-0000 (2015. 03. 03) (특허문헌 0002) 출원번호 10-2001-0071766 (2001. 11. 19) 비특허문헌 (비특허문헌 0001) Rong Jiang, “Research and Measurement of Software Complexity Based on Wuli, Shili, Renli (WSR) and Information Entropy”, Entropy, Vol. 17 Issue 4, pp. 2094-2116, 2015. (비특허문헌 0002) Yahya Tashtoush, Mohammed Al-Maolegi, Bassam Arkok, “The Correlation among Software Complexity Metrics with Case Study”, International Journal of Advanced Computer Research,Vol. 4, No. 2, pp. 414-420, Jun. 2014. (비특허문헌 0003) Mohammed A. Shehab, Yahya M. Tashtoush, Wegdan A. Hussien, Mohammed N. Alandoli, and Yaser Jararweh, “An Accumulated Cognitive Approach to Measure Software Complexity”, Journal of Advances in Information Technology, Vol. 6, No. 1, Feb. 2015. (비특허문헌 0004) Geoffrey K. Gill and Chris F. Kemerer, “Cyclomatic Complexity Density and Software Maintenance Productivity”, IEEE Transaction on Software Engineering, Vol. 17, No. 12, pp. 1284-1288, Dec. 1991. (비특허문헌 0005) Amir M. Ben-Amram and Lars Kristiansen, “On The Edge of Decidability In Complexity Analysis of Loop Programs”, International Journal of Foundations of Computer Science, Vol 23, No. 7, pp. 1451-1464, 2012. (비특허문헌 0006) Thomas Ball and Susan Horwitz, “Slicing Programs with Arbitrary Control Flow”, Proc. First Int’l Workshop Automated and Algorithmic Debugging, Lecture Notes in Computer Science 749, pp. 206222. Springer-Verlag, 1993. (비특허문헌 0007) Sebastian Danic, Richard W. Barraclough, Mark Harman, John D. Howroyd, Akos Kiss, and Michael R. Laurence, “A unifying theory of control dependence and its application to arbitrary program structures”, Theoretical Computer Science, Vol. 412 Issue 49, pp. 6809-6842, Nov. 2011. (비특허문헌 0008) Mike Barnett and K. Rustan M. Leino, “Weakest-Precondition of Unstructured Programs”, PASTE '05 Proceedings of the 6th ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering, pp. 82-87, 2005. (비특허문헌 0009) Halstead, Maurice H., “Elements of Software Science”, Amsterdam: Elsevier North- Holland, Inc., New York, 1977. (비특허문헌 0010) T. J. Mccabe, “A Complexity Measure”, IEEE Transactions on Software Engineering, Vol. 2, No. 4, pp.308 320, 1976. (비특허문헌 0011) M. R. Woodward, M. A. Hennel and D. Hedley, “A measure of control flow comlexity in program text”, IEEE Trans. Software Eng., SE-4, 1, pp. 45-50, Jan. 1979. (비특허문헌 0012) E. T. Chen, “Program complexity and programmer productivity”, IEEE Trans. Software Eng., SE-4, 3, pp.187-194, May, 1978. (비특허문헌 0013) Albert L. Baker and Stuart H. Zweben, “A Comparison of Measures of Control Flow Complexity”, IEEE Transactions on Software Engineering, Vol. SE-6, No. 6, pp. 506-512, Nov. 1980. (비특허문헌 0014) S. Henry and D. Kafura, “Software structure metrics based on information flow”, IEEE Trans. Software Eng., SE-7, 5, pp. 510-519, June 1981. (비특허문헌 0015) N. Chapine, “A measure of software complexity”, Proc. NCC, pp. 995-1002, 1979. (비특허문헌 0016) Umesh Tiwari and Santosh Kumar, “Cyclomatic Complexity Metric for Component Based Software”, ACM SIGSOFT Software Engineering Notes , Vol. 39, No. 1, pp. 1-6, Jan. 2014 (비특허문헌 0017) Haesool YANG, Yoshihiro TSUJINO, and Nobuki TOKURA, “The Complexity Measure of Program Based on the Inter-Module Dependency”, IEICE, D-I, Vol. J73-D-I, No. 11, pp. 882-890, Nov. 1990. (비특허문헌 0018) Ankita Garg, “An approach for improving the concept of Cyclomatic Complexity for Object-Oriented Programming”, Cornell University Library, http://arxiv.org/abs/1412.6216, Dec. 2014. (비특허문헌 0019) Eric S. Roberts, “Loop Exits and Structured Programming: Reopening the Debate”, Standford University, Department of Computer Science, 1995. (비특허문헌 0020) Bogdan Korel, “Computation of Dynamic Program Slices for Unstructured Programs”, IEEE Transaction on Software Engineering, Vol. 23, No. 1, pp. 17-34, Jan. 1997. (비특허문헌 0021) EDSGER W. DIJKSTRA, “Letters to the Editor(Go To Statement Considered Harmful)”, Communications of the ACM, Vol. 11, No. 3, pp. 147-148, Mar. 1968. (비특허문헌 0022) D. E. Knuth, “Structured programming with GOTO statements”, Computing Surveys, vol. 6, pp. 261-301, Dec. 1974. (비특허문헌 0023) Frank Rubin, “”GOTO Considered Harmful” Considered Harmful”, Communications of the ACM, Vol. 30, pp. 195-196, Mar. 1987. (비특허문헌 0024) Carol A. Ziegler, “Programming System Methodologies”, Prentice-Hall, Englewood. Cliffs, NJ, 1983. (비특허문헌 0025) Stephen R. Schach, “Object-Oriented and Classical Software Engineering, Eighth Eddition”, McGraw-Hill, pp. 509, 2011. (비특허문헌 0026) W. Douglas Maurer, “ATTITUDES TOWARD THE GO-TO STATEMENT (OR, HYDROGEN CONSIDERED HARMFUL)”, Computer Educ., Vol 26, No. 4, pp. 207-213, 1996. (비특허문헌 0027) Edward Ashcroft and Zohar Manna, “THE TRANSLATION OF ‘GO TO’ PROGRAMS TO ‘ WHILE’ PROGRAMS”, Standford University, Computer Science Department, Jan. 1971. (비특허문헌 0028) Hiralal Agrawal, “On Slicing Programs with Jump Statements”, ACM SIGPLAN Notices, Vol 29 Issue 6, pp. 302-312, 1994. (비특허문헌 0029) Mccabe Cyclomatic Complexity, Klockwork Developer Network Klockwork Inc ,” http://www.klocwork.com/products/documentation/current/McCabe_Cyclomatic_Complexity”, 2013 (비특허문헌 0030) Software Metrics의 코드 순환 복잡도 개선을 통한 소스 코드 품질 향상 방안 연구, 2013 년 한국컴퓨터종합학술대회 논문집"}
{"patent_id": "10-2016-0055985", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "전술한 요구에 부응하기 위해 본 발명은, 정상적인 제어 흐름과 비정상적인 제어 흐름을 통합적으로 인식하여 소프트웨어 복잡도를 측정하고, 이를 기반으로 보다 현실에 맞도록 소프트웨어의 복잡도를 경감시켜줌으로써 소 프트웨어의 이해 용이성과 유지 보수성을 제고해주는데 그 목적이 있다."}
{"patent_id": "10-2016-0055985", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "전술한 목적을 달성하기 위해 본 발명은, 소프트웨어 복잡도를 경감하는 장치에 있어서, 소프트웨어에서 시간 위치 속성을 인식하는 시간 위치 인식부; 및 제어 흐름이 비정상 역방향 분기로 나타나는 부분을 예외적 역 시 간 위치 기반 제어 흐름으로, 제어 흐름이 비정상 순방향 분기로 나타나는 부분을 예외적 순 시간 위치 기반 제 어 흐름으로, 제어 흐름이 순차, 선택, 반복의 입구 하나 출구 하나의 형태로 나타나는 부분을 정상적 시간 위 치 기반의 제어 흐름으로 분류하는 문제 유형 분류부; 및 제어 흐름을 구조적인 소단위 문제 해결 목표의 시각 에서 분석하여 동일한 소단위 목표를 가진 제어 흐름은 하나의 통합된 문제 해결 제어 흐름 구획으로 융합하고, 상이한 소단위 목표를 가진 제어 흐름은 다른 문제 해결 제어 흐름 구획으로 분리하는 형태로 문제 해결 제어 흐름의 절차 단위를 분류하는 동일 목표 융합부; 및 동일한 소단위 문제 해결 목표를 가진 절차 단위 영역 내에 서 비정상적인 문제 해결 시간 속성 중 역방향의 예외적 분기로 나타나는 예외적 역 시간 위치 속성을 가진 제 어 흐름을 정상 시간 위치 속성을 가지도록 특화시켜 조정해주고 순방향의 예외적 분기로 나타나는 예외적 순 시간 속성을 가진 제어 흐름의 경우에는 문제 해결 원리에 따라 그대로 놔두거나 정상 시간 위치 속성을 가지도 록 특화시켜 조정해주는 문제 특화 조정부; 및 소프트웨어의 제어 흐름을 통합적으로 분석하여 복잡도를 경감시 켜주는 복잡도 경감 제어부를 포함하는 것을 특징으로 하는 시간 위치 속성을 이용한 소프트웨어 복잡도 경감 장치를 제공한다.또한, 본 발명의 또 다른 목적에 의하면, 소프트웨어 복잡도 경감 장치가 소프트웨어 복잡도를 측정하고 경감시 키는 방법에 있어서, (a) 소프트웨어를 읽어들여 시간 위치 속성을 인식하는 단계; (b) 시간 위치 속성을 점검 하여 시간 위치 속성이 순차, 선택, 반복의 기본 제어 구조의 입구 하나 출구 하나의 원칙에 부합하는 부분은 정상적인 문제 해결 제어 흐름, 시간 위치 속성이 입구 하나 출구 하나의 원칙을 훼손하는 예외적인 역방향 분 기 형태로 나타나거나 예외적인 순방향 분기 형태로 나타나는 부분은 비정상적인 문제 해결 제어 흐름으로 각각 분류하는 단계; (c) 제어 흐름을 구조적인 소단위 문제 해결 목표의 시각에서 분석하여 동일한 소단위 목표를 가진 제어 흐름은 하나의 통합된 문제 해결 제어 흐름 구획으로 융합하고, 상이한 소단위 목표를 가진 제어 흐 름은 다른 문제 해결 제어 흐름 구획으로 분리하는 형태로 문제 해결 제어 흐름의 절차 단위를 분류하는 단계; (d) 동일한 소단위 문제 해결 목표를 가진 절차 단위 영역 내에서 비정상적인 문제 해결 시간 속성 중 역방향의 비정상 시간 위치 속성을 가진 제어 흐름의 경우 정상 시간 위치 속성을 가지도록 특화시켜 조정해주고, 순방향 의 비정상 시간 위치 속성을 가진 제어 흐름의 경우에는 문제 해결 원리에 입각하여 통합적인 시각의 문제 해결 을 정상 제어 흐름과 같이 도모할 경우에는 그대로 두고 그렇지 않을 경우에는 정상 시간 위치 속성을 가지도록 특화시켜 조정해주는 단계; (e) 소프트웨어를 통합적으로 분석하여 복잡도를 경감시켜주는 단계를 포함하는 것 을 특징으로 하는 시간 위치 속성을 이용한 소프트웨어 복잡도 경감 방법을 제공한다."}
{"patent_id": "10-2016-0055985", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "이상에서 설명한 바와 같이 본 발명에 의하면, 소프트웨어의 복잡도 측정을 수행함에 있어 정상적인 제어 흐름 과 비정상적인 제어 흐름을 모두 고려한 통합적인 시각의 계산을 행할 수 있다. 그뿐만 아니라, 소프트웨어 복 잡도를 경감하는 작업을 통해 단순화하고 체계화함으로써 이해용이성과 유지 보수성을 증대시킬 수 있다. 특히, 소프트웨어를 개발하고 유지 보수하는 작업을 수행할 때 시간과 노력과 비용의 손실을 극소화할 수 있다. 또한, 급속히 복잡도가 증대하는 소프트웨어의 관리 능력을 정밀하게 확대하여 비정상적인 제어 흐름에의 대처 능력을 강화시킴으로써 소프트웨어의 안전성과 안정성을 확보하고 품질 제고를 지원하여 산업 경쟁력을 향상시키는 결 정적인 효과를 창출할 수 있다."}
{"patent_id": "10-2016-0055985", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 발명의 바람직한 실시 예를 첨부된 도면들을 참조하여 상세히 설명한다. 도1은 본 발명의 실시를 위한 소프트웨어 복잡도 경감 장치의 전자적인 구성을 나타낸 블록 구성도이다. 본 발명의 실시에 따른 소프트웨어 복잡도 경감 장치는 복잡도 제어 전 소프트웨어 저장부, 복잡도 제어 후 소프트웨어 저장부, 시간 위치 인식부, 문제 유형 분류부, 동일 목표 융합부, 문제 특 화 조정부, 복잡도 경감 제어부 및 복잡도 제어 작업 표시부를 포함하여 구성한다. 도1의 『소프트웨어 복잡도 경감 장치』의 전체적인 동작 원리를 설명하자면, 도1의 101의 『복잡도 제어 전 소 프트웨어 저장부』에 아직 복잡도 제어가 이루어지지 않은 소프트웨어가 담겨 있다고 하자. 도1의 201의 『시간 위치 인식부』에서 해당 소프트웨어를 읽어들여 제어 흐름을 파악한다[A100]. 그런 후 각 제어 흐름에서 시간 위치(TP: Time Position)를 인식한다[A200]. 시간 위치를 인식함에 있어서, 제어 흐름이 goto문 등의 사용을 통 한 역방향의 임의의 분기 형태로 파악될 경우에는[A210] TPminus나 TPbackward 등과 같이 시간 위치가 역방향 위치임 을 표시하는 값을 갖도록 한다[A220]. 제어 흐름이 goto문이나 break문 등의 사용을 통한 순방향의 임의적인 분 기 형태로 파악될 경우에는[A230] TPplus나 TPforward 등과 같이 시간 위치가 순방향 위치임을 표시하는 값을 갖도 록 한다[A240]. 제어 흐름에서 임의적인 분기가 발생되지 않는 형태로 파악되는 기존의 구조화 프로그래밍 요건 을 충족하는 기타의 경우에는[A250] TPnormal이나 TPzero 등과 같이 시간 위치가 정상 위치임을 표시하는 값을 갖도 록 한다[A260]. 이때, 시간 위치는 개념만 동일하다면 다른 용어나 기호를 사용하여도 상관이 없다. 흐름을 분 석하는 방법은 특정 k 위치의 노드를 nk라고 할 때, 기존의 순차(Sequence), 선택(Selection) 및 반복(Loop, Iteration)의 3가지 기본 제어 구조의 조건이 충족된 부분에 대해서는 도2와 같은 공식을 적용하여 제어 구조 C(Control Structure)를 Cseq, Csel, Cloop의 3가지 유형 중의 하나로 구분하여 필요에 따라 더욱 세분화 하여 인 식한다. 이처럼 기존의 구조화 프로그래밍의 원칙이 완벽하게 적용되는 경우에는 시간 위치를 TPnormal 과 같이 정상으로 인식한다 [A250]. 또한, goto문이나 break문 등과 같은 또 다른 분기를 사용함으로써 기존의 구조화 프로그래밍에서 지향하는 제어 구조에 대한 입구 하나 출구 하나의 원칙을 위배하거나, while, for, do-while, repeat-until 등과 같은 반복 제어 구조문을 사용하지 않고 goto문을 사용하여 흐름을 역으로 되돌리는 부분에 대해서는, 도3에 나타낸 프로그램의 예제와 같은 다양한 경우에 대해 비정상적인 분기를 행하는 노드를 위해 화 살표를 표시하는 방법을 사용하여 도3~도5 및 도7에 나타낸 바와 같은 다양한 경우에 대해 비정상적인 시간 위 치를 갖고 있음을 표시해준다. 이 때, 도3~도5의 Pex1부터 Pex5까지의 프로그램 예제에서 알 수 있는 바와 같이, 노드가 역방향 분기를 통해 노드 기호 nk위에 역방향 화살표가 표시되는 식으로 시간 위치가 역방향일 경우 TPminus[A220]; 노드가 순방향 분기를 통해 노드 기호 nk위에 순방향 화살표가 표시되는 식으로 시간 위치가 순방 향일 경우 TPplus[A240]; 노드 기호 위에 역방향 또는 순방향의 시간 위치를 나타내는 화살표가 없는 경우 [A250], TPnormal [A260]로 인식한다. 이때, TPminus나 TPplus는 예를 들기 위해 상징적으로 나타낸 기호이며, 실무 에서는 의미만 동일하다면 기호는 다르게 써도 상관이 없다. 또한, 도1의 201의 『시간 위치 인식부』에서 시간 위치를 인식하는 작업이 완료된 내역을 가지고, 도1의 202의 『문제 유형 분류부』에서 시간 위치가 TPnormal[A310]로 인식된 부분은 정상적인 시간 위치를 가진 문제 유형으 로 분류하고[A320], 시간 위치가 TPminus[A330]나 TPplus[[A350]로 인식된 부분은 각각 문제 유형을 역방향 비정상 [A340] 및 순방향 비정상[A360]으로 분류해주는 형태로 정상 제어 흐름과 비정상 제어 흐름을 구분한다. 또한, 도1의 202의 『문제 유형 분류부』에서 인식된 문제 유형에 따라 정상 제어 흐름과 비정상 제어 흐름으로 분류하는 작업이 완료된 내역을 가지고, 도1의 203의 『동일 목표 융합부』에서 제어 흐름을 구조적인 소단위 문제 해결 목표의 시각에서 분석하여 동일한 소단위 목표를 가진 제어 흐름은 하나의 통합된 문제 해결 제어 흐 름 구획으로 융합한다[A400]. 동일한 소단위 목표를 가진 흐름을 융합함에 있어서, 전체 소프트웨어를 구성하는 각 프로그램의 목표를 달성하기 위해 프로그램 내의 작업 절차별 소단위 목표가 동일한지 여부를 점검[A410]하 여 동일한 문제 해결의 소단위 목표를 가진 정상 및 비정상 제어 흐름은 하나의 통합된 문제 해결 제어 흐름 구 획으로 융합하고[A420], 상이한 소단위 목표를 가진 정상 및 비정상 제어 흐름[A430]은 다른 문제 해결 제어 흐 름 구획으로 분리[A440]하는 형태로 작업을 수행한다. 또한, 도1의 203의 『동일 목표 융합부』에서 소단위 문제 해결 목표 별로 융합 또는 분리하는 작업이 완료된 내역을 가지고 도1의 204의 『문제 특화 조정부』에서 동일한 문제 해결 소단위 목표를 가진 단위 영역 내에서 비정상적인 문제 해결 시간 위치 속성 중 역방향의 비정상 시간 위치 속성을 가진 제어 흐름을 정상의 시간 위 치 속성을 가지도록 특화시켜 조정한다[A500]. 이러한 특화 조정 작업을 수행함에 있어서, 동일한 소단위 문제 해결 목표를 달성하는 프로그램 그룹 영역 내에서 시간 위치 기반의 정규화 작업이 완료되지 않았다면[A510] 비 정상 유형에 따라 도7에 나타낸 바와 같은 RM(Rotary Mirroring), AB(Abstract Blocking), PR(Path Replicating), RS(Role Separating) 등의 시간 위치 기반의 정규화 작업을 통해 문제를 특화시켜 조정한다 [A520]. 이 경우에도 개념만 동일하다면, RM, AB, PR, RS 등의 용어 및 기호를 다르게 사용하여도 상관이 없다. 또한, 도1의 204의 『문제 특화 조정부』에서 조정 작업이 완료된 내역을 가지고 도1의 205의 『복잡도 경감 제 어부』에서 복잡도 경감 처리를 한다[A600]. 또한, 도1의 『소프트웨어 복잡도 경감 장치』에서 복잡도 제어를 수행하는 과정 또는 결과는 도1의 102의 『복 잡도 제어 후 소프트웨어 저장부』에 저장하여 이용할 수 있도록 함과 동시에 필요시 복구가 가능하도록 대응한 다. 또한 도1의 301의 『복잡도 제어 작업 표시부』에서는 복잡도 처리 전 과정을 모니터링 하는 작업을 수행한다. 이를 통해 소프트웨어에 대한 복잡도 통제를 용이하게 할 수 있으며, 결과적으로 급속히 복잡화되는 소프트웨어 를 구성하는 프로그램의 알고리즘을 개발하고, 개선하는 것을 용이하게 할 수 있으며, 이를 통해 고품질의 이해 가 용이하고 유지 보수가 쉬운 소프트웨어를 안정적으로 개발 및 개선하는 것이 가능해진다. 산업상 이용가능성 최근에는 전 산업에 걸쳐서 소프트웨어의 복잡도가 급속히 증대하고 있으며, 인공지능을 비롯하여 실사회의 문 제를 해결하는데 중추적인 역할을 하게 되었다. 또한, 각종 사물에 소프트웨어가 내장되는 임베디드 시스템이 급속히 증가하고, 복잡한 소프트웨어 기술이 로봇, 자동차, 선박, 항공기에 이르기까지 인간의 생명과 재산의 안전에 직접적인 영향을 주는 비율이 전 산업 분야에 걸쳐서 확산되고 있다. 따라서, 본 발명에서 지향하는 시 간 위치를 이용한 소프트웨어 복잡도 경감 장치 및 방법을 산업에 이용하면 시간, 노력, 비용을 획기적으로 절 약함과 동시에 고품질의 소프트웨어를 안정적으로 개발 및 개선하여 산업 발전에 이바지하는데 핵심적인 기여를 할 것으로 예상된다."}
{"patent_id": "10-2016-0055985", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도1은 본 발명의 핵심장치인 소프트웨어 복잡도 경감 장치의 블록도이다. 도1의 101은 복잡도 제어를 수행하기 위한 대상이 되는 소프트웨어를 저장해 놓은 복잡도 제어 전 소프트웨어 저장부이다. 도1의 102는 복잡도 제어를 통한 경감 작업이 완료된 소프트웨어를 저장하는 복잡도 제어 후 소프트웨어 저장부 이다. 도1의 201은 소프트웨어의 제어 흐름을 분석하여 시간 위치를 인식하는 시간 위치 인식부이다. 도1의 202는 시간 위치를 인식한 결과를 가지고 문제를 해결하기 위한 관점에서 정상적인 시간 위치를 가진 문 제 해결 제어 흐름인지, 비정상적인 시간 위치를 가진 문제 해결 제어 흐름인지를 분류하는 작업을 수행하는 문 제 유형 분류부이다. 도1의 203은 정상과 비정상 문제 해결 제어 흐름 유형을 분류한 내역을 분석하여 동일한 문제 해결 소단위 목표 를 가진 모든 제어 흐름은 하나의 통합된 문제 해결 제어 흐름 구획으로 융합하고, 상이한 소단위 목표를 가진 제어 흐름은 다른 문제 해결 제어 흐름 구획으로 분리하는 형태로 문제 해결 제어 흐름의 절차 단위를 분류하는 작업을 수행하는 동일 목표 융합부이다. 도1의 204는 동일한 문제 해결 목표를 가진 단위 영역 내에서 비정상적인 문제 해결 시간 위치 속성 중 역방향 의 비정상 시간 위치 속성을 가진 제어 흐름을 정상의 시간 위치 속성을 가지도록 특화시켜 조정해주고, 순방향 의 비정상 시간 위치 속성을 가진 제어 흐름의 경우에는 문제 해결 원리에 입각하여 통합적인 시각의 문제 해결 을 정상 제어 흐름에 비해 시간적으로 촉진하는 형태로 도모할 경우에는 그대로 두고 그렇지 않을 경우에는 정 상 시간 위치 속성을 가지도록 특화시켜 조정해주는 작업을 수행하는 문제 특화 조정부이다. 도1의 205는 동일한 소단위 목표의 부분적인 문제 해결에 있어서 정상과 비정상의 양면적인 접근을 통해 통합적 으로 분석하여 복잡도를 경감시켜주는 복잡도 경감 제어부이다.도2는 순차(sequence), 선택(selection), 반복(loop, iteration)의 3가지 기본 제어 구조를 기반으로 입구 하 나 출구 하나의 원칙을 준수하는 범위 내에서 세분화하여 제어 흐름을 파악하는 공식의 사례를 나타낸 것이다. 도3은 둘 이상의 역방향 분기가 겹치거나 순방향 분기와 역방향 분기가 겹치는 형태의 제어 흐름에 대해 RM(Rotary Mirroring) 방법을 사용하여 하나는 정상적인 반복 제어 구조 또는 선택 제어 구조로 처리하고 나머 지는 반복 제어 구조를 역방향으로 벗어나는 노드에 해당하거나 순차 선택 제어 구조로 역방향으로 진입하는 노 드에 해당하는 부분을 역방향 비정상 분기가 시작하는 위치 뒤로 거울 형태로 복사 추가해줌으로써 로타리와 같 은 모습을 구성시켜주어 역방향 비정상 시간 속성을 정상 시간 속성으로 조정해줌으로써, 이후에는 단계적으로 AB(Abstract Blocking) 방법을 사용하여 복잡도를 최소화 해주는 것이 가능한 수준으로 정규화해주는 사례를 나 타낸 것이다. 도4는 선택 또는 반복의 기본 제어 구조에서 순방향의 비정상 분기가 발생하는 형태의 제어 흐름에 대해 AB(Abstract Blocking) 방법을 사용하여 이를 정상 제어 흐름과 동일한 목표를 촉진하는 형태의 비정상 제어 흐 름과 통합적으로 추상화하여 블록화 처리하는 방식으로 조정해줌으로써, 이후에는 단계적으로 AB(Abstract Blocking) 방법을 사용하여 복잡도를 최소한도로 경감시켜주는 것이 가능한 수준으로 정규화해주는 사례를 나타 낸 것이다. 도5는 특정 선택 제어 구조의 내부로 들어오는 순방향의 비정상 분기가 존재하는 형태의 제어 흐름에 대해 PR(Path Replication) 방법을 사용하여 해당 특정 선택 제어 구조 내부의 노드를 복제하여 해당 내역을 순방향 의 비정상 분기 경로에 붙여주는 방식으로 조정해줌으로써, 이후에는 단계적으로 AB(Abstract Blocking) 방법을 사용하여 복잡도를 최소화 해주는 것이 가능한 수준으로 정규화해주는 사례를 나타낸 것이다. 도6은 특정 노드에서 역방향 및 순방향 분기가 모두 발생하는 형태의 제어 흐름에 대해 RS(Role Separation) 방 법을 사용하여 이를 정상 시간 속성으로 조정해줌으로써, 이후에는 단계적으로 AB(Abstract Blocking) 방법을 사용하여 복잡도를 최소한도로 경감시켜주는 것이 가능한 수준으로 정규화해주는 사례를 나타낸 것이다. 도7은 복잡도 경감 사례로서 특정 프로그램에 대해 정규화 작업을 완료한 후 이를 단계적으로 AB(Abstract Block) 방법을 사용하여 복잡도를 최소한도로 경감시켜주는 사례를 입체적으로 나타낸 것이다. 도8은 시간 위치를 기반으로 정규화할 때 적용할 수 있는 방법을 분기의 형태에 따라 RM(Rotary Mirroring), AB(Abstract Blocking), PR(Path Replicating) 및 RS(Role Separating)의 4가지를 단독적으로, 선택적으로 또 는 복합적으로 적용하는 형태로 나타낸 것이다. 이처럼 4가지의 시간 위치 종속적인 정규화 방법을 제어 흐름의 비정상적 구성 유형에 맞춰서 적용하면 정규화 작업을 완료할 수 있다. 또한 정규화 작업이 일단 완료되면 그 다음부터는 AB(Abstract Blocking) 방법만을 사용하여 복잡도를 단계적으로 경감시켜 최소한도의 복잡도를 유지 할 수 있도록 처리해줄 수 있다. 도9는 시간 위치를 기반으로 복잡도를 구할 때 적용하는 복잡도 공식의 사례를 나타낸 것이다. 예를 들어, NTPminus를 시간 위치 속성이 역방향 분기 형태로 나타나는 TPminus 속성을 가진 제어 흐름의 수, NTPplus를 시간 위 치 속성이 순방향 분기 형태로 나타나는 TPplus 속성을 가진 제어 흐름의 수, R을 영역의 수, M을 서브 모듈 연 결 수라고 할 때, 융합 순환 복잡도 CCC(Convergence Cyclomatic Complexity) 공식의 사례를 나타낸 것이다. 복잡도를 구할 때에는 공식이 달라진다 하더라도 반드시 시간 위치 속성을 부여하여 공식을 만들어야 한다는 것 을 이 사례를 통해서 알 수 있다. 도10은 소프트웨어 복잡도 경감 방법을 TTAK.KO-11.0196 소프트웨어 논리 구조 표기 지침에 의거하여 절차적으 로 나타낸 것이다."}
