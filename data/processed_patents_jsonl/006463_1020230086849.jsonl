{"patent_id": "10-2023-0086849", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0093307", "출원번호": "10-2023-0086849", "발명의 명칭": "인공 지능 처리 장치, 인공 지능 프로세서를 위한 데이터 프리패칭 장치 및 방법", "출원인": "한국전자통신연구원", "발명자": "김현미"}}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "오프칩 메모리;인공 지능 프로그램을 실행하는 메인 컨트롤 프로세싱 유닛; 및적어도 하나의 인공 지능 프로세서를 포함하되,적어도 하나의 인공 지능 프로세서 각각은, 프로세싱 코어;온칩 메모리; 및오프칩 메모리의 데이터를 온칩 메모리로 로딩하는 프리패처를 포함하는, 인공 지능 처리 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1 항에 있어서, 프로세싱 코어는, 행렬 연산을 수행하는 부동 소수점 연산 기반의 텐서 프로세싱 유닛; 및일반 연산을 수행하는 컨트롤 프로세싱 유닛이 쌍으로 구성되는, 인공 지능 처리 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2 항에 있어서, 온칩 메모리는, 인공 지능 프로그램의 명령어를 저장하는 인스트럭션 캐시; 및인공 지능 프로그램의 연산 데이터를 저장하는 데이터 캐시를 포함하는, 인공 지능 처리 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3 항에 있어서, 프리패처는, 행렬 연산 데이터의 주소값 및 전체 데이터 양을 포함하는 정보를 저장하는 적어도 하나의 제어 상태 레지스터를 포함하는, 인공 지능 처리 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4 항에 있어서, 메인 컨트롤 제어 유닛은, 인공 지능 프로그램을 최적화하여 머신코드로 생성하는 컴파일러; 및생성된 머신코드를 실행하는 런타임 소프트웨어를 실행하되, 컴파일러 및 런타임 소프트웨어에 의해 추출된 정보를 적어도 하나의 제어 상태 레지스터에 기록하는, 인공 지능 프로세싱 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5 항에 있어서, 메인 컨트롤 제어 유닛은, 컴파일러 및 런타임 소프트웨어 의해 추출된 정보를 APB(Advanced Peripheral Bus) 인터페이스를 통해 제어 상태 레지스터에 기록되는, 인공 지능 프로세싱 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5 항에 있어서, 컴파일러는, 공개특허 10-2024-0093307-3-인공지능 프로그램에서 중첩 루프(nested loop)로 표현되는 행렬 연산을 추출하는 단계; 추출된 행렬 연산 데이터를 복수의 프로세싱 코어들 각각에서 할당하는 타일링을 수행하는 단계;타일링한 결과를 기반으로 행렬 연산 명령어를 생성하는 단계;행렬 연산 명령어를 복수의 프로세싱 코어 전용의 머신 코드로 생성하는 단계를 수행하는, 인공 지능 프로세싱장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제5 항에 있어서, 런타임 소프트웨어는, 인공 지능 프로그램을 디코딩하여 커널 프로그램을 분리하는 단계;동적 메모리를 할당하는 단계;행렬 연산 데이터 주소를 할당하는 단계; 및행렬 연산 데이터 주소를 제어 상태 레지스터에 설정하는 단계를 수행하는, 인공 지능 프로세싱 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제4 항에 있어서, 프리패처는, 커널 프로그램이 실행됨에 따라, 인스트럭션 캐시로부터 공급된 명령어 중에서 행렬 연산 명령어를 추출하는 단계;행렬 연산 명령어 추출 결과를 기반으로 프리패칭의 인에이블 여부를 결정하는 단계; 프리패칭이 인에이블됨에 따라 프리패칭이 요구되는 블록 수를 결정하는 단계;결정된 블록 수에 상응하는 버스 버스트(Burst) 값을 결정하여 버스 인터페이스를 통해 데이터 요청 신호로 전송하는 단계를 수행하는, 인공 지능 프로세싱 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9 항에 있어서, 프리패처는, 컨트롤 프로세싱 유닛의 프로그램 카운터(Program Counter, PC)값을 입력받아, 인스트럭션 캐시로부터 인공 지능 프로그램의 주소값과 프로그램 카운터 값이 일정 거리(distance) 이상이 되지 않도록 조정하는 단계를 더 수행하는, 인공 지능 프로세싱 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9 항에 있어서, 프리패처는, 프리패칭의 인에이블 여부를 결정함에 있어, 첫 번째 행렬 연산 명령어가 추출될 경우에만 프리패칭 인에이블로결정하는, 인공 지능 프로세싱 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제9 항에 있어서, 프리패처는,블록 수를 결정함에 있어, 제어 상태 레지스터에 저장된 행렬 연산 데이터의 주소값과 전체 데이터 양을 기반으로 결정하는, 인공 지능 프로세싱 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제9 항에 있어서, 프리패처는,버스 버스트(Burst) 값을 결정함에 있어, 데이터 캐시의 하나의 블록의 크기 및 버스 인터페이스의 데이터 대역폭을 기반으로 결정하는, 인공 지능 프로세싱 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "공개특허 10-2024-0093307-4-인공 지능 프로세서 내에서 외부의 오프칩 메모리에 저장된 데이터를 내부의 온칩 메모리로 프리패칭하되, 행렬 연산 데이터의 주소값 및 전체 데이터 양을 포함하는 정보를 저장하는 적어도 하나의 제어 상태 레지스터; 커널 프로그램이 실행됨에 따라, 오프칩 메모리의 인스트럭션 캐시로부터 공급된 명령어 중에서 행렬 연산 명령어를 추출하는 행렬 연산 판별부;행렬 연산 명령어 추출 결과를 기반으로 프리패칭의 인에이블 여부를 결정하는 프리패칭 여부 결정부;프리패칭이 인에이블됨에 따라 적어도 하나의 제어 상태 레지스터에 저장된 정보를 기반으로 프리패칭이 요구되는 블록 수를 결정하는 프리패칭 블록수 결정부; 및결정된 블록 수에 상응하는 버스 버스트(Burst) 값을 결정하여 버스 인터페이스를 통해 데이터 요청 신호로 전송하는 요청 신호 생성부를 포함하는, 인공 지능 프로세서를 위한 프리패칭 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14 항에 있어서, 행렬 연산 판별부는, 인공 지능 프로세서의 컨트롤 프로세싱 유닛의 프로그램 카운터(Program Counter, PC)값을 입력받아, 인스트럭션 캐시로부터 인공 지능 프로그램의 주소값과 프로그램 카운터 값이 일정 거리(distance) 이상이 되지 않도록조정하는, 인공 지능 프로세서를 위한 프리패칭 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14 항에 있어서, 프리패칭 여부 결정부는,첫 번째 행렬 연산 명령어가 추출될 경우에만 프리패칭 인에이블로 결정하는, 인공 지능 프로세서를 위한 프리패칭 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제14 항에 있어서, 프리패칭 블록수 결정부는, 제어 상태 레지스터에 저장된 행렬 연산 데이터의 주소값과 전체 데이터 양을 기반으로 결정하는, 인공 지능 프로세서를 위한 프리패칭 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제9 항에 있어서, 요청 신호 생성부는,오프칩 메모리의 데이터 캐시의 하나의 블록의 크기 및 버스 인터페이스의 데이터 대역폭을 기반으로 결정하는,인공 지능 프로세서를 위한 프리패칭 장치."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "인공 지능 프로세서 내에서 외부의 오프칩 메모리에 저장된 데이터를 내부의 온칩 메모리로 프리패칭하되, 행렬 연산 데이터의 주소값 및 전체 데이터 양을 포함하는 정보를 저장하는 적어도 하나의 제어 상태 레지스터에 설정되는 단계;커널 프로그램이 실행됨에 따라, 오프칩 메모리의 인스트럭션 캐시로부터 공급된 명령어 중에서 행렬 연산 명령어를 추출하는 단계;행렬 연산 명령어 추출 결과를 기반으로 프리패칭의 인에이블 여부를 결정하는 단계;프리패칭이 인에이블됨에 따라 적어도 하나의 제어 상태 레지스터에 저장된 정보를 기반으로 프리패칭이 요구되는 블록 수를 결정하는 단계; 및결정된 블록 수에 상응하는 버스 버스트(Burst) 값을 결정하여 버스 인터페이스를 통해 데이터 요청 신호로 전송하는 단계를 포함하는, 인공 지능 프로세서를 위한 프리패칭 방법."}
{"patent_id": "10-2023-0086849", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "공개특허 10-2024-0093307-5-제19 항에 있어서, 프리패칭 블록수 결정하는 단계에서, 제어 상태 레지스터에 저장된 행렬 연산 데이터의 주소값과 전체 데이터 양을 기반으로 결정하고, 데이터 요청 신호로 전송하는 단계에서, 오프칩 메모리의 데이터 캐시의 하나의 블록의 크기 및 버스 인터페이스의 데이터 대역폭을 기반으로 결정하는,인공 지능 프로세서를 위한 프리패칭 방법."}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "인공 지능 프로세서를 위한 프리패칭 장치 및 방법이 개시된다. 실시예에 따른 인공 지능 프로세서를 위한 프리 패칭 방법은, 인공 지능 프로세서 내에서 외부의 오프칩 메모리에 저장된 데이터를 내부의 온칩 메모리로 프리패 칭하되, 행렬 연산 데이터의 주소값 및 전체 데이터 양을 포함하는 정보를 저장하는 적어도 하나의 제어 상태 레 지스터에 설정되는 단계, 커널 프로그램이 실행됨에 따라, 오프칩 메모리의 인스트럭션 캐시로부터 공급된 명령 어 중에서 행렬 연산 명령어를 추출하는 단계, 행렬 연산 명령어 추출 결과를 기반으로 프리패칭의 인에이블 여 부를 결정하는 단계, 프리패칭이 인에이블됨에 따라 적어도 하나의 제어 상태 레지스터에 저장된 정보를 기반으 로 프리패칭이 요구되는 블록 수를 결정하는 단계, 및 결정된 블록 수에 상응하는 버스 버스트(Burst) 값을 결정 하여 버스 인터페이스를 통해 데이터 요청 신호로 전송하는 단계를 포함할 수 있다."}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "기재된 실시예는 고성능 인공 지능 반도체의 필수 구성 요소인 메모리 장치의 프리패칭 기술에 관한 것이다."}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 지능 프로세서를 구성하는 회로 중 고성능 연산기 만큼이나 데이터를 빠른 속도로 효율적으로 액세스 (access)하기 위한 메모리 장치는 필수적이다. 인공 지능 알고리즘의 개발 속도에 따라 다양해지는 프로그램을 위해 인공 지능 프로세서를 구성하는 메모리 구 조 또한 범용 프로세서 또는 그래픽 프로세서에서 주로 사용되는 계층적 캐시(Cache) 구조를 채택하여 온칩(on- chip) 메모리로 사용한다. 캐시 구조 기반 메모리 장치에서 데이터의 재사용율을 높여 성능 향상 및 효율적인 저전력 소모를 이끄는 것은 핵심 기술 중 하나가 된다. 한편, 메모리는 속도는 느리지만 대용량의 데이터를 저장할 수 있는 오프칩 메모리와 속도는 빠르지만 칩의 크 기 및 제조 비용 등의 이유로 용량을 크게 키울 수 없는 온칩 메모리로 나눠 사용한다. 인공 지능 알고리즘을 전용 프로세서를 사용하여 처리할 때, 우선 오프칩 메모리에서 온칩 메모리로 데이터를 이동시키는 제1 단계, 전용 프로세서에서 온칩 메모리의 데이터를 사용하여 연산한 결과를 다시 온칩 메모리에 저장하는 제2 단계, 마지막으로 온칩 메모리의 데이터를 오프칩 메모리에 저장하는 제3 단계의 동작을 수행하게 된다. 인공 지능 프로세서의 성능을 높이는 다양한 기술 중 프리패처(prefetcher)를 정확하게 효율적으로 설계하는 것 은 온칩 메모리와 오프칩 메모리 간의 데이터 이동 시간과 연산기에서의 연산 시간의 중첩(overlapping)을 가능 하게 하고, 온칩 메모리에서의 데이터 재 사용률을 향상시켜 인공 지능 프로세서의 성능 향상에 크게 기여할 수 있다. 그런데, 인공 지능 알고리즘을 위한 프로그램은 크게 일반 연산과 행렬 연산으로 나뉠 수 있고, 인공 지능 반도 체는 대용량 데이터의 처리가 필요하여 연산 처리 시간 중 가장 큰 부분을 차지하는 행렬 연산의 처리 속도를 향상시키는 구조를 채택하면서 발전해왔다. 이러한 행렬 연산의 처리 속도를 높이는 고성능 연산기와 함께 행렬 연산에 필요한 데이터들을 연산기와 최근접 위치의 온칩 메모리로 미리 이동시키기 위한 효율적인 프리패처는 필수적이다."}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "기재된 실시예는 오프칩 메모리에서 고성능 인공 지능 프로세서와 근접한 온칩 메모리로 신속히 데이터를 프리 패칭(prefetching)하는 데 그 목적이 있다. 기재된 실시예는 온칩 메모리와 오프칩 메모리 간의 데이터 이동 시간과 연산기에서의 연산 시간의 중첩 (overlapping)을 가능하게 하여 연산 속도를 향상시키는데 그 목적이 있다."}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "실시예에 따른 인공 지능 처리 장치는, 오프칩 메모리, 인공 지능 프로그램을 실행하는 메인 컨트롤 프로세싱 유닛, 및 적어도 하나의 인공 지능 프로세서를 포함하되, 적어도 하나의 인공 지능 프로세서 각각은, 프로세싱 코어, 온칩 메모리, 및 오프칩 메모리의 데이터를 온칩 메모리로 로딩하는 프리패처를 포함할 수 있다. 이때, 프로세싱 코어는, 행렬 연산을 수행하는 부동 소수점 연산 기반의 텐서 프로세싱 유닛, 및 일반 연산을 수행하는 컨트롤 프로세싱 유닛이 쌍으로 구성될 수 있다. 이때, 온칩 메모리는, 인공 지능 프로그램의 명령어를 저장하는 인스트럭션 캐시, 및 인공 지능 프로그램의 연 산 데이터를 저장하는 데이터 캐시를 포함할 수 있다. 이때, 프리패처는, 행렬 연산 데이터의 주소값 및 전체 데이터 양을 포함하는 정보를 저장하는 적어도 하나의 제어 상태 레지스터를 포함할 수 있다. 이때, 메인 컨트롤 제어 유닛은, 인공 지능 프로그램을 최적화하여 머신 코드로 생성하는 컴파일러, 및 생성된 머신 코드를 실행하는 런타임 소프트웨어를 실행하되, 컴파일러 및 런타임 소프트웨어에 의해 추출된 정보를 적 어도 하나의 제어 상태 레지스터에 기록할 수 있다. 이때, 메인 컨트롤 제어 유닛은, 컴파일러 및 런타임 소프트웨어 의해 추출된 정보를 APB(Advanced Peripheral Bus) 인터페이스를 통해 제어 상태 레지스터에 기록될 수 있다. 이때, 컴파일러는, 인공 지능 프로그램에서 중첩 루프(nested loop)로 표현되는 행렬 연산을 추출하는 단계, 추 출된 행렬 연산 데이터를 복수의 프로세싱 코어들 각각에서 할당하는 타일링을 수행하는 단계, 타일링한 결과를 기반으로 행렬 연산 명령어를 생성하는 단계, 행렬 연산 명령어를 복수의 프로세싱 코어 전용의 머신 코드로 생 성하는 단계를 수행할 수 있다. 이때, 런타임 소프트웨어는, 인공 지능 프로그램을 디코딩하여 커널 프로그램을 분리하는 단계, 동적 메모리를 할당하는 단계, 행렬 연산 데이터 주소를 할당하는 단계, 및 행렬 연산 데이터 주소를 제어 상태 레지스터에 설 정하는 단계를 수행할 수 있다. 이때, 프리패처는, 커널 프로그램이 실행됨에 따라, 인스트럭션 캐시로부터 공급된 명령어 중에서 행렬 연산 명 령어를 추출하는 단계, 행렬 연산 명령어 추출 결과를 기반으로 프리패칭의 인에이블 여부를 결정하는 단계, 프 리패칭이 인에이블됨에 따라 프리패칭이 요구되는 블록 수를 결정하는 단계, 결정된 블록 수에 상응하는 버스 버스트(Burst) 값을 결정하여 버스 인터페이스를 통해 데이터 요청 신호로 전송하는 단계를 수행할 수 있다. 이때, 프리패처는, 컨트롤 프로세싱 유닛의 프로그램 카운터(Program Counter, PC)값을 입력받아, 인스트럭션 캐시로부터 인공 지능 프로그램의 주소값과 프로그램 카운터 값이 소정 임계치 이상이 되지 않도록 조정하는 단 계를 더 수행할 수 있다. 이때, 프리패처는, 프리패칭의 인에이블 여부를 결정함에 있어, 첫 번째 행렬 연산 명령어가 추출될 경우에만 프리패칭 인에이블로 결정할 수 있다. 이때, 프리패처는, 블록 수를 결정함에 있어, 제어 상태 레지스터에 저장된 행렬 연산 데이터의 주소값과 전체 데이터 양을 기반으로 결정할 수 있다. 이때, 프리패처는, 버스 버스트(Burst) 값을 결정함에 있어, 데이터 캐시의 하나의 블록의 크기 및 버스 인터페 이스의 데이터 대역폭을 기반으로 결정할 수 있다. 실시예에 따른 인공 지능 프로세서를 위한 프리패칭 장치는, 인공 지능 프로세서 내에서 외부의 오프칩 메모리 에 저장된 데이터를 내부의 온칩 메모리로 프리패칭하되, 행렬 연산 데이터의 주소값 및 전체 데이터 양을 포함 하는 정보를 저장하는 적어도 하나의 제어 상태 레지스터, 커널 프로그램이 실행됨에 따라, 오프칩 메모리의 인 스트럭션 캐시로부터 공급된 명령어 중에서 행렬 연산 명령어를 추출하는 행렬 연산 판별부, 행렬 연산 명령어 추출 결과를 기반으로 프리패칭의 인에이블 여부를 결정하는 프리패칭 여부 결정부, 프리패칭이 인에이블됨에 따라 적어도 하나의 제어 상태 레지스터에 저장된 정보를 기반으로 프리패칭이 요구되는 블록 수를 결정하는 프 리패칭 블록수 결정부, 및 결정된 블록 수에 상응하는 버스 버스트(Burst) 값을 결정하여 버스 인터페이스를 통 해 데이터 요청 신호로 전송하는 요청 신호 생성부를 포함할 수 있다. 이때, 행렬 연산 판별부는, 인공 지능 프로세서의 컨트롤 프로세싱 유닛의 프로그램 카운터(Program Counter, PC)값을 입력받아, 인스트럭션 캐시로부터 인공 지능 프로그램의 주소값과 프로그램 카운터 값이 일정 거리 (distance) 이상이 되지 않도록 조정할 수 있다. 이때, 프리패칭 여부 결정부는, 첫 번째 행렬 연산 명령어가 추출될 경우에만 프리패칭 인에이블로 결정할 수 있다. 이때, 프리패칭 블록수 결정부는, 제어 상태 레지스터에 저장된 행렬 연산 데이터의 주소값과 전체 데이터 양을 기반으로 결정할 수 있다. 이때, 요청 신호 생성부는, 오프칩 메모리의 데이터 캐시의 하나의 블록의 크기 및 버스 인터페이스의 데이터 대역폭을 기반으로 결정할 수 있다. 실시예에 따른 인공 지능 프로세서를 위한 프리패칭 방법은, 인공 지능 프로세서 내에서 외부의 오프칩 메모리 에 저장된 데이터를 내부의 온칩 메모리로 프리패칭하되, 행렬 연산 데이터의 주소값 및 전체 데이터 양을 포함 하는 정보를 저장하는 적어도 하나의 제어 상태 레지스터에 설정되는 단계, 커널 프로그램이 실행됨에 따라, 오 프칩 메모리의 인스트럭션 캐시로부터 공급된 명령어 중에서 행렬 연산 명령어를 추출하는 단계, 행렬 연산 명 령어 추출 결과를 기반으로 프리패칭의 인에이블 여부를 결정하는 단계, 프리패칭이 인에이블됨에 따라 적어도 하나의 제어 상태 레지스터에 저장된 정보를 기반으로 프리패칭이 요구되는 블록 수를 결정하는 단계, 및 결정 된 블록 수에 상응하는 버스 버스트(Burst) 값을 결정하여 버스 인터페이스를 통해 데이터 요청 신호로 전송하 는 단계를 포함할 수 있다. 이때, 프리패칭 블록수 결정하는 단계에서, 제어 상태 레지스터에 저장된 행렬 연산 데이터의 주소값과 전체 데 이터 양을 기반으로 결정하고, 데이터 요청 신호로 전송하는 단계에서, 오프칩 메모리의 데이터 캐시의 하나의 블록의 크기 및 버스 인터페이스의 데이터 대역폭을 기반으로 결정할 수 있다."}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "기재된 실시예는 오프칩 메모리에서 고성능 인공 지능 프로세서와 근접한 온칩 메모리로 신속히 데이터를 프리 패칭(prefetching)할 수 있도록 한다. 기재된 실시예는 온칩 메모리와 오프칩 메모리 간의 데이터 이동 시간과 연산기에서의 연산 시간의 중첩 (overlapping)을 가능하게 하여 연산 속도를 향상시킨다."}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 상세하게 후술되어 있는 실시 예들을 참조하면 명확해질 것이다. 그러나 본 발명은 이하에서 개시되는 실시예들에 한정되는 것이 아니라 서로 다른 다양한 형태로 구현될 것이며, 단지 본 실시예들은 본 발명의 개시가 완전하도록 하며, 본 발명이 속하는"}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "기술분야에서 통상의 지식을 가진 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것이며, 본 발명은 청구항의 범주에 의해 정의될 뿐이다. 명세서 전체에 걸쳐 동일 참조 부호는 동일 구성 요소를 지칭한다. 비록 \"제1\" 또는 \"제2\" 등이 다양한 구성요소를 서술하기 위해서 사용되나, 이러한 구성요소는 상기와 같은 용 어에 의해 제한되지 않는다. 상기와 같은 용어는 단지 하나의 구성요소를 다른 구성요소와 구별하기 위하여 사 용될 수 있다. 따라서, 이하에서 언급되는 제1 구성요소는 본 발명의 기술적 사상 내에서 제2 구성요소일 수도 있다. 본 명세서에서 사용된 용어는 실시예를 설명하기 위한 것이며 본 발명을 제한하고자 하는 것은 아니다. 본 명세 서에서, 단수형은 문구에서 특별히 언급하지 않는 한 복수형도 포함한다. 명세서에서 사용되는 \"포함한다 (comprises)\" 또는 \"포함하는(comprising)\"은 언급된 구성요소 또는 단계가 하나 이상의 다른 구성요소 또는 단"}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "계의 존재 또는 추가를 배제하지 않는다는 의미를 내포한다.다른 정의가 없다면, 본 명세서에서 사용되는 모든 용어는 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자에게 공통적으로 이해될 수 있는 의미로 해석될 수 있다. 또한, 일반적으로 사용되는 사전에 정의되어 있는 용어들은 명백하게 특별히 정의되어 있지 않는 한 이상적으로 또는 과도하게 해석되지 않는다. 도 1은 실시예에 따른 인공 지능 처리 장치의 개략적인 블록 구성도이고, 도 2는 인공 지능 프로세서의 내부 구 성 블록도이다. 도 1을 참조하면, 실시예에 따른 인공 지능 처리 장치는, 오프칩 메모리(Off-Chip Memory), 메인 컨트롤 프 로세싱 유닛(Main Control Processing Unit, CPU), 적어도 하나의 인공 지능 프로세서(AI Processor)(30- 1, 30-2,...., 30-N) 및 주변 장치들(Peripherals)이 버스(BUS)를 통해 인터페이스되는 구조를 갖는다. 오프칩 메모리는, 대용량의 데이터를 저장할 수 있는 메모리이다. 예컨대, DDR 또는 HBM 등일 수 있다. 메인 CPU는, 인공 지능 프로그램을 실행할 수 있다. 이때, 인공 지능 프로그램은, 크게 일반 연산과 행렬 연산을 포함할 수 있는데, 인공 지능 프로그램의 처리 속도 향상을 위해 행렬 연산은 적어도 하나의 적어도 하 나의 인공 지능 프로세서(30-1, 30-2,...., 30-N)에 할당되어 병렬 연산 처리될 수 있다. 적어도 하나의 인공 지능 프로세서(30-1, 30-2,...., 30-N) 각각은, 병렬 연산 처리 기반 멀티 인공 지능 전용 프로세싱 코어들로, 주변 장치들과 버스를 통해 이뤄지는 계층적 온칩 메모리를 포함할 수 있다. 도 2를 참조하면, 적어도 하나의 인공 지능 프로세서(30-1, 30-2,...., 30-N) 각각은, 프로세싱 코어, 온칩 메모리(32, 33), 프리패처 및 버스 인터페이스를 포함할 수 있다. 프로세싱 코어는, 행렬 연산을 수행하는 부동 소수점(Floating Point) 연산 기반의 텐서 프로세싱 유닛 (Tensor Processing Unit, TPU)(31-1) 및 일반 연산을 수행하는 컨트롤 프로세싱 유닛(Control Processing Unit, CPU)(31-2)이 쌍으로 구성될 수 있다. 온칩 메모리(32, 33)는, 인공 지능 프로그램의 명령어를 저장하는 인스트럭션 캐시(Instruction Cache, I$) 및 인공 지능 프로그램의 연산 데이터를 저장하는 데이터 캐시(Data Cache, D$)를 포함할 수 있다. 따라서, 프로세싱 코어는 인스트럭션 캐시로부터 명령어를 제공받고, 데이터 캐시으로부터 연산 데이터를 제공받을 수 있다. 한편, 텐서 프로세싱 유닛(Tensor Processing Unit, TPU)(31-1) 및 컨트롤 프로세싱 유닛(Control Processing Unit, CPU)(31-2)의 쌍(Pair)이 복수일 경우, 데이터 캐시는 데이터 공유에 유리하도록 공유(Shared) 캐시 로 설계될 수 있다. 이때, 병목 현상을 감소시키기 위해 메모리를 멀티 뱅크(Multi-banks)로 나누고 non- blocking 캐시로 구현될 수 있다. 프리패처는, 버스 인터페이스(Bus I/F)를 통해 오프칩 메모리의 데이터를 프로세싱 코어와 근 접한 온칩 메모리(32, 33)으로 미리 가져다 저장시킬 수 있다. 도 3은 실시예에 따른 프리패처의 개략적인 내부 구성 블록도이다. 도 3을 참조하면, 실시예에 따른 프리패처는, 적어도 하나의 제어 상태 레지스터(Control and Status Register, CSR), 행렬 연산 판별부, 프리패칭 여부 결정부, 프리패칭 블록수 결정부 및 요청 신호 생성부를 포함할 수 있다. 적어도 하나의 제어 상태 레지스터는, 프로세싱 코어에 필요한 파라미터를 저장하는데, 행렬 연산을 위한 입력 데이터의 주소값 및 복수의 프로세싱 코어에 할당되는 전체 데이터 양을 포함하는 정보를 저장한 다. 이와 같이 적어도 하나의 제어 상태 레지스터에 저장되는 정보들은 추후 프리패칭 여부 및 프리패칭 블록(block) 수를 결정하는 데 사용될 수 있다. 이러한 적어도 하나의 제어 상태 레지스터에 저장되는 정보들은 메인 CPU에 의해 실행된 컴파일러 및 런타임 소프트웨어에 의해 추출된 것일 수 있다. 즉, 커널 프로그램을 실행하기 전, 메인 CPU는 인공 지능 프로그램을 디코딩하여 프로세싱 코어에 필요한 파라미터를 제어 상태 레지스터에 설정한다. 이에 대한 상세한 설명은 도 4 및 도 5를 참조하여 후술하기로 한다. 이때, 메인 CPU는, 컴파일러 및 런타임 소프트웨어 의해 추출된 정보를 APB(Advanced Peripheral Bus) 인 터페이스를 통해 제어 상태 레지스터에 기록할 수 있다. 행렬 연산 판별부는, 인스트럭션 캐시로부터 공급된 명령어 중에서 행렬 연산 관련 명령어를 추출한다. 프리패칭 여부 결정부는, 행렬 연산 판별부에 의해 행렬 연산 관련 명령어의 추출 결과를 기반으로 프리패칭 여부를 결정한다. 즉, 행렬 연산 관련 명령어가 추출되면 프리패칭이 인에이블(enable)될 수 있다. 프리패칭 블록수 결정부는, 프리패칭이 인에이블됨에 따라 프리패칭이 필요한 데이터 양을 결정한다. 이때, 제어 상태 레지스터에 기록된 행렬 연산 데이터의 주소값과 데이터 양을 기반으로 프리패칭이 요구 되는 블록 수를 결정한다. 요청 신호 생성부는, 데이터 캐시의 하나의 블록의 크기 및 버스 인터페이스의 데이터 대역폭을 기반으로 버스트(Burst) 값을 생성하여 버스 인터페이스를 통해 데이터 요청 신호로 전송한다. 즉, 이러한 데이터 요청 신호에 대한 응답으로 오프칩 메모리애 저장된 데이터를 온칩 메모리(32, 33)로 프리패칭 되도 록 할 수 있다. 도 4는 실시예에 따른 컴파일러의 동작을 설명하기 위한 순서도이다. 도 4를 참조하면, 컴파일러는, 인공 지능 프로그램을 최적화(S210~S220)한 후, 머신 코드로 생성(S230~S240)할 수 있다. 즉, 컴파일러는, 인공지능 프로그램에서 중첩 루프(nested loop)로 표현되는 행렬 연산을 추출한다(S210). 그런 후, 추출된 행렬 연산 데이터를 멀티 코어들 각각에 할당하는 타일링(Tiling)을 수행한다(S220). 즉, 어떤 영역 의 얼만큼의 행렬 연산 데이터가 수행되는지 결정될 수 있다. 다음으로, 컴파일러는, 타일링한 결과를 기반으로 행렬 연산 명령어를 생성(S230)하고, 행렬 연산 데이터 정보 를 프로세싱 코어에서 사용할 수 있는 전용 명령어로 생성한다(S240). 도 5는 실시예에 따른 런타임 소프트웨어의 동작을 설명하기 위한 순서도이다. 도 5를 참조하면, 런타임 소프트웨어는, 인공 지능 프로그램을 디코딩하여 커널 프로그램을 분리(S310)한 후, 동적 메모리를 할당한다(S320). 그리고, 런타임 소프트웨어는, 행렬 연산 데이터 주소를 할당(S330)하고, 행렬 연산 데이터 주소를 제어 상태 레지스터에 설정 명령한다(S340). 도 6은 실시예에 따른 인공 지능 프로세서를 위한 데이터 프리패칭 방법을 설명하기 위한 순서도이다. 도 6을 참조하면, 프리패처는, 커널 프로그램이 실행됨에 따라, 인스트럭션 캐시로부터 명령어를 읽어들인 다(S410). 이때, 프리패처는, CPU(31-1)의 프로그램 카운터(Program Counter, PC) 값을 같이 입력받아, 인스트럭션 캐시로부터 읽은 프로그램의 주소값(Inst.Address)과 CPU(31-1)의 PC 값이 소정 임계치(Threshold) 이상인 지를 확인(S420)하여, 소정 임계치를 넘지 않도록 조정한다(S425). 그런 후, 프리패처는, 인스트럭션 캐시로부터 읽어들인 명령어를 디코딩(S430)하고, 행렬 연산 명령어인지 를 확인한다(S440). 이때, 첫 번째 행렬 연산 명령어인지를 확인하는데, 이는 첫 번째 행렬 연산 명령어가 추출되면 제어 상태 레지 스터에 저장된 파라미터를 기반으로 행렬 연산을 위한 입력 데이터의 주소값에 상응하는 오프칩 메모리 로부터 복수의 프로세싱 코어에 할당되는 전체 데이터 양을 모두 미리 프리패칭하기 때문이다. 즉, 두 번째 행렬 연산 명령어를 실행하는데 필요한 데이터는 이미 프리패칭되어 있는 상태이기 때문에 프리패칭이 다 시 수행될 필요가 없다. S440의 확인 결과 행렬 연산 명령어가 아니거나 또는 첫번째 행렬 연산 명령어가 아닐 경우, 프리패처는 프리패칭 디스에이블(Disable)로 결정(S450)하고 S410으로 진행한다. 반면, S440의 확인 결과 첫번째 행렬 연산 명령어일 경우, 프리패처는 프리패칭 인에이블(Enable)로 결정 한다(S460). 그러면, 프리패처는, 제어 상태 레지스터에 저장된 행렬 연산 데이터의 주소값과 데이터 양을 참조하 여 프리패칭이 요구되는 블록 수를 결정한다(S470). 그런 후, 프리패처는, 데이터 캐시의 하나의 블록의 크기 및 버스 인터페이스의 데이터 대역폭 (Bus Bandwidth)을 기반으로 버스트(Burst) 값을 결정(S480)하고, 버스 인터페이스를 통해 데이터 요청 신 호(Data Request)를 전송하여 프리패칭을 시작한다(S490). 이러한 프리패칭 동작이 완료(S500)되면, S410으로 진행한다. 도 7은 실시예에 따른 컴퓨터 시스템 구성을 나타낸 도면이다. 실시예에 따른 실시예에 따른 장치는 컴퓨터로 읽을 수 있는 기록매체와 같은 컴퓨터 시스템에서 구현될 수 있다. 컴퓨터 시스템은 버스를 통하여 서로 통신하는 하나 이상의 프로세서, 메모리, 사용자 인터페이스 입력 장치, 사용자 인터페이스 출력 장치 및 스토리지를 포함할 수 있다. 또한, 컴퓨터 시스템은 네트워크에 연결되는 네트워크 인터페이스를 더 포함할 수 있다. 프로세서 는 중앙 처리 장치 또는 메모리나 스토리지에 저장된 프로그램 또는 프로세싱 인스트럭션들 을 실행하는 반도체 장치일 수 있다. 메모리 및 스토리지는 휘발성 매체, 비휘발성 매체, 분리형 매체, 비분리형 매체, 통신 매체, 또는 정보 전달 매체 중에서 적어도 하나 이상을 포함하는 저장 매체일 수 있 다. 예를 들어, 메모리는 ROM이나 RAM을 포함할 수 있다."}
{"patent_id": "10-2023-0086849", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "이상에서 첨부된 도면을 참조하여 본 발명의 실시예들을 설명하였지만, 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자는 본 발명이 그 기술적 사상이나 필수적인 특징을 변경하지 않고서 다른 구체적인 형태로 실시 될 수 있다는 것을 이해할 수 있을 것이다. 그러므로 이상에서 기술한 실시예들은 모든 면에서 예시적인 것이며 한정적이 아닌 것으로 이해해야만 한다."}
{"patent_id": "10-2023-0086849", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 실시예에 따른 인공 지능 처리 장치의 개략적인 블록 구성도이다. 도 2는 인공 지능 프로세서의 내부 구성 블록도이다. 도 3은 실시예에 따른 프리패처의 개략적인 내부 구성 블록도이다. 도 4는 실시예에 따른 컴파일러의 동작을 설명하기 위한 순서도이다. 도 5는 실시예에 따른 런타임 소프트웨어의 동작을 설명하기 위한 순서도이다. 도 6은 실시예에 따른 프리패처의 동작을 설명하기 위한 순서도이다. 도 7은 실시예에 따른 컴퓨터 시스템 구성을 나타낸 도면이다."}
