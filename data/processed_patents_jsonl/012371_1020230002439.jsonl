{"patent_id": "10-2023-0002439", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0110397", "출원번호": "10-2023-0002439", "발명의 명칭": "메모리 접근 장치 및 그의 동작 방법", "출원인": "주식회사 사피온코리아", "발명자": "백승철"}}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "메모리 접근 장치의 동작 방법으로서,제1 커맨드(command)에 기초하여 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트(processingelement)의 접근을 허용하는 단계;상기 복수의 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수를 확인하는 단계; 및상기 복수의 데이터라인 중 제1 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 상기 제1 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용하는 단계를 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 복수의 데이터라인 중 제2 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 상기 제2 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용하는 단계를 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 메모리는,상기 복수의 데이터라인; 및상기 복수의 데이터라인 각각에 대응하는 제1 태그 영역 및 제2 태그 영역을 포함하고,상기 제1 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근에 대한 허용 여부를 나타내는 정보를 저장하고,상기 제2 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근 횟수를 나타내는 정보를 저장하고,상기 제1 프로세싱 엘리먼트의 접근을 허용하는 단계는,상기 제1 태그 영역의 정보를 변경하여, 상기 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트(processingelement)의 접근을 허용하는 단계를 포함하고,상기 확인하는 단계는,상기 제2 태그 영역을 모니터링하여 상기 복수의 데이터라인 각각에 대한 상기 제1 프로세싱 엘리먼트의 접근횟수를 확인하는 단계를 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,외부 메모리의 제1 데이터 중 제1-1 데이터를 상기 메모리의 상기 복수의 데이터라인 중 기 설정된 개수의 데이터라인에 저장하는 단계;상기 기 설정된 개수의 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허용하는 단계;상기 기 설정된 개수의 데이터라인에 대한 상기 프로세싱 엘리먼트의 접근 횟수를 확인하는 단계; 및상기 기 설정된 개수의 데이터라인 각각에 대한 상기 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 횟수에공개특허 10-2024-0110397-3-도달하는 경우, 상기 제1 데이터 중 제1-2 데이터를 상기 기 설정된 개수의 데이터라인에 저장하고, 상기 기 설정된 개수의 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허용하는 단계를 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 메모리의 상기 복수의 데이터라인에 저장된 제1 데이터 중 제1-1데이터를 외부 메모리의 복수의 데이터라인 중 기 설정된 개수의 데이터라인에 저장하는 단계; 및상기 기 설정된 개수의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 횟수에 도달하는 경우, 상기 제1 데이터 중 제1-2 데이터를 상기 기 설정된 개수의 데이터라인에 저장하는 단계를 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 제1 프로세싱 엘리먼트의 접근을 허용하는 단계는,상기 제1 커맨드에 기초하여 외부 메모리의 제1 데이터를 상기 복수의 데이터라인에 저장하는 단계; 및상기 제1 데이터를 저장하는 상기 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근을 허용하는 단계를포함하고,상기 제2 프로세싱 엘리먼트의 접근을 허용하는 단계는,상기 복수의 데이터라인 중 제1 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 상기 제2 커맨드에 기초하여 상기 외부 메모리의 제2 데이터 중 일부 데이터를 상기 제1 데이터라인에 저장하는 단계; 및상기 일부 데이터를 저장하는 제1 데이터라인에 대한 상기 제2 프로세싱 엘리먼트의 접근을 허용하는 단계를 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 제2 프로세싱 엘리먼트의 접근을 허용하는 단계는,상기 복수의 데이터라인 중 제2 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 상기 제2 커맨드에 기초하여 상기 외부 메모리의 제2 데이터 중 다른 일부 데이터를 상기 제2 데이터라인에 저장하는 단계; 및상기 다른 일부 데이터를 저장하는 제2 데이터라인에 대한 상기 제2 프로세싱 엘리먼트의 접근을 허용하는 단계를 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 제1 프로세싱 엘리먼트의 접근을 허용하는 단계는,상기 외부 메모리의 제1 데이터 중 제1-1 데이터를 상기 메모리의 상기 복수의 데이터라인 중 기 설정된 개수의데이터라인에 저장하는 단계;상기 기 설정된 개수의 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근을 허용하는 단계;상기 기 설정된 개수의 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수를 확인하는 단계; 및상기 기 설정된 개수의 데이터라인 각각에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 횟수에 도달하는 경우, 상기 제1 데이터 중 제1-2 데이터를 상기 기 설정된 개수의 데이터라인에 저장하고, 상기기 설정된 개수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근을 허용하는 단계를 포함하는, 동작 방법.공개특허 10-2024-0110397-4-청구항 9 제1항에 있어서,제3 커맨드에 기초하여, 상기 메모리의 상기 복수의 데이터라인에 대한 프로세싱 엘리먼트(processing element)의 접근을 허용하는 단계;상기 복수의 데이터라인에 대한 상기 프로세싱 엘리먼트의 접근 횟수를 확인하는 단계; 및상기 복수의 데이터라인 중 제1 데이터라인에 대한 상기 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 상기 제1 데이터라인에 저장된 데이터를 외부 메모리에 저장하는 단계를 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 복수의 데이터라인 중 제2 데이터라인에 대한 상기 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 상기 제2 데이터라인에 저장된 데이터를 외부 메모리에 저장하는 단계를 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1항에 있어서,상기 메모리는 스크래치패드 메모리(scratchpad memory)를 포함하는, 동작 방법."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항의 동작 방법을 컴퓨터에서 실행시키기 위한 프로그램을 기록한 컴퓨터로 읽을 수 있는 비일시적기록매체."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "메모리 접근 장치로서,제1 커맨드 및 제2 커맨드를 저장하는 버퍼; 및상기 제1 커맨드에 기초하여 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트(processing element)의접근을 허용하고, 상기 복수의 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수를 확인하고, 상기복수의 데이터라인 중 제1 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 상기 제1 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용하는 컨트롤러를 포함하는, 메모리 접근 장치."}
{"patent_id": "10-2023-0002439", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "가속기(accelerator)로서,메모리;제1 프로세싱 엘리먼트; 제2 프로세싱 엘리먼트; 및제1 커맨드에 기초하여 상기 메모리의 복수의 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근을 허용하고, 상기 복수의 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수를 확인하고, 상기 복수의 데이터라인 중 제1 데이터라인에 대한 상기 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우,제2 커맨드에 기초하여 상기 제1 데이터라인에 대한 상기 제2 프로세싱 엘리먼트의 접근을 허용하는 메모리 접근 장치를 포함하는, 가속기."}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "제1 커맨드(command)에 기초하여 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트(processing element)의 접근을 허용하는 단계; 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인하는 단 계; 및 복수의 데이터라인 중 제1 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도 달하는 경우, 제2 커맨드에 기초하여 제1 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용하는 단계를 포함하는, 메모리 접근 장치의 동작 방법을 제공한다."}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 메모리 접근 장치 및 그의 동작 방법에 관한 것이다."}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "CPU 또는 GPU 아키텍처에서 오프-칩(off-chip) 데이터 접근에 따른 레이턴시(latency)를 줄이거나 하이딩 (hiding)하기 위해 스크래치패드 메모리(scratchpad memory) 또는 캐시 메모리(cache memory)가 사용되고 있다. 스크래치패드 메모리의 경우, 메모리 용량이 제한적이기 때문에 프로세싱 엘리먼트에서 요구하는 데이터 를 효율적으로 관리하기 방법들이 연구되고 있다. 또한, 최근 인공지능 기술은 이미지 인식, 음성 인식, 자연어 처리 등의 다양한 분야에서 비약적인 성능 향상을 보이고 있으며, 이에 따라 인공지능만을 위한 독자적인 하드웨어가 개발되고 있다. 예를 들어, 계산 집약적인 (compute-intensive) CNN 연산, 거기에 더해 큰 메모리 데이터 접근을 요구하는 메모리 집약적인(memory- intensive) 트랜스포머(Transformer) 계열의 매우 큰 자연어 처리 모델을 효율적으로 가속하기 위한 장치가 개 발되고 있다."}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "개시된 실시 예들은 메모리 접근 장치 및 그의 동작 방법을 개시하고자 한다. 본 실시 예가 이루고자 하는 기술 적 과제는 상기된 바와 같은 기술적 과제들로 한정되지 않으며, 이하의 실시 예들로부터 또 다른 기술적 과제들 이 유추될 수 있다."}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "제1 실시 예에 따라, 메모리 접근 장치의 동작 방법은, 제1 커맨드(command)에 기초하여 메모리의 복수의 데이 터라인에 대한 제1 프로세싱 엘리먼트(processing element)의 접근을 허용하는 단계; 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인하는 단계; 및 복수의 데이터라인 중 제1 데이터라인에 대한 제1 프 로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제1 데이터라인에 대 한 제2 프로세싱 엘리먼트의 접근을 허용하는 단계를 포함할 수 있다. 제2 실시 예에 따라, 메모리 접근 장치는, 제1 커맨드 및 제2 커맨드를 저장하는 버퍼; 및 제1 커맨드에 기초하 여, 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트(processing element)의 접근을 허용하고, 복수 의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인하고, 복수의 데이터라인 중 제1 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제1 데이 터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용하는 컨트롤러를 포함할 수 있다. 컨트롤러는, 복수의 데이터라인 중 제2 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟 수에 도달하는 경우, 제2 커맨드에 기초하여 제2 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 메모리는, 복수의 데이터라인들; 및 복수의 데이터라인들 각각에 대응하는 제1 태그 영역 및 제2 태그 영역을 포함할 수 있고, 제1 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근에 대한 허용 여부를 나타내는 정 보를 저장할 수 있고, 제2 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근 횟수를 나타내는 정보를 저 장할 수 있다. 컨트롤러는, 제1 태그 영역의 정보를 변경하여, 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트(processing element)의 접근을 허용할 수 있고, 제2 태그 영역을 모니터링하여 복수의 데이터라인 각각에 대한 제1 프로세 싱 엘리먼트의 접근 횟수를 확인할 수 있다. 컨트롤러는, 외부 메모리의 제1 데이터 중 제1-1 데이터를 메모리의 복수의 데이터라인들 중 기 설정된 개수의 데이터라인에 저장할 수 있고, 기 설정된 개수의 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허용할 수 있 고, 기 설정된 개수의 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있고, 기 설정된 개수의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 횟수에 도달하는 경우, 제1 데이터 중 제1-2 데이터를 기 설정된 개수의 데이터라인에 저장하고, 기 설정된 개수의 데이터라인에 대한 프로세싱 엘 리먼트의 접근을 허용할 수 있다.컨트롤러는, 메모리의 복수의 데이터라인에 저장된 제1 데이터 중 제1-1데이터를 외부 메모리의 복수의 데이터 라인 중 기 설정된 개수의 데이터라인에 저장하고, 기 설정된 개수의 데이터라인 각각에 대한 프로세싱 엘리먼 트의 접근 횟수가 모두 기 설정된 횟수에 도달하는 경우, 제1 데이터 중 제1-2 데이터를 기 설정된 개수의 데이 터라인에 저장할 수 있다. 컨트롤러는, 제1 커맨드에 기초하여 외부 메모리의 제1 데이터를 복수의 데이터라인에 저장하고, 제1 데이터를 저장하는 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근을 허용할 수 있다. 컨트롤러는, 복수의 데이 터라인 중 제1 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 외부 메모리의 제2 데이터 중 일부 데이터를 제1 데이터라인에 저장하고, 일부 데이터를 저 장하는 제1 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 컨트롤러는, 복수의 데이터라인 중 제2 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟 수에 도달하는 경우, 제2 커맨드에 기초하여 외부 메모리의 제2 데이터 중 다른 일부 데이터를 제2 데이터라인 에 저장하고, 다른 일부 데이터를 저장하는 제2 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 컨트롤러는, 외부 메모리의 제1 데이터 중 제1-1 데이터를 메모리의 복수의 데이터라인들 중 기 설정된 개수의 데이터라인에 저장하고, 기 설정된 개수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근을 허용하고, 기 설 정된 개수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인하고, 기 설정된 개수의 데이터라인 각각에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 횟수에 도달하는 경우, 제1 데이터 중 제1-2 데이터를 기 설정된 개수의 데이터라인에 저장하고, 기 설정된 개수의 데이터라인에 대한 제1 프로세싱 엘리먼 트의 접근을 허용할 수 있다. 컨트롤러는, 제3 커맨드에 기초하여, 메모리의 복수의 데이터라인에 대한 프로세싱 엘리먼트(processing element)의 접근을 허용하고, 복수의 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수를 확인하고, 복수의 데 이터라인 중 제1 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제1 데 이터라인에 저장된 데이터를 외부 메모리에 저장할 수 있다. 컨트롤러는, 복수의 데이터라인 중 제2 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 데이터라인에 저장된 데이터를 외부 메모리에 저장할 수 있다. 제3 실시예에 따라, 가속기(accelerator)는, 메모리; 제1 프로세싱 엘리먼트; 제2 프로세싱 엘리먼트; 및 제1 커맨드에 기초하여 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근을 허용하고, 복수의 데이 터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인하고, 복수의 데이터라인 중 제1 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제1 데이터라인 에 대한 제2 프로세싱 엘리먼트의 접근을 허용하는 메모리 접근 장치를 포함할 수 있다. 제4 실시예에 따라, 컴퓨터로 읽을 수 있는 기록매체는 상술한 방법을 컴퓨터에서 실행시키기 위한 프로그램을 기록한 비휘발성 기록매체를 포함한다. 기타 실시 예들의 구체적인 사항들은 상세한 설명 및 도면들에 포함되어 있다."}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시에 따르면, 제1 프로세싱 엘리먼트의 복수의 데이터라인 모두에 대한 접근이 완료되지 않았음에도, 제2 프로세싱 엘리먼트의 데이터라인에 대한 접근이 이루어질 수 있으므로, 빠른 데이터 전송(data transfer) 또는 레이턴시 하이딩(latency hiding)과 같은 효과가 있다. 또한, 본 개시에 따르면, 복수의 데이터라인 모두에 대해 데이터 로딩(data loading) 또는 데이터 스토링(data storing)이 필요한 경우, 복수의 데이터라인 중 일부 데이터라인만을 사용하여 데이터 로딩 또는 데이터 스토링 이 수행될 수 있으므로, 메모리 영역을 더 적게 사용할 수 있는 효과가 있다."}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "발명의 효과는 이상에서 언급한 효과로 제한되지 않으며, 언급되지 않은 또 다른 효과들은 청구범위의 기재로부 터 당해 기술 분야의 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "실시 예들에서 사용되는 용어는 본 개시에서의 기능을 고려하면서 가능한 현재 널리 사용되는 일반적인 용어들 을 선택하였으나, 이는 당 분야에 종사하는 기술자의 의도 또는 판례, 새로운 기술의 출현 등에 따라 달라질 수 있다. 또한, 특정한 경우는 출원인이 임의로 선정한 용어도 있으며, 이 경우 해당되는 설명 부분에서 상세히 그 의미를 기재할 것이다. 따라서 본 개시에서 사용되는 용어는 단순한 용어의 명칭이 아닌, 그 용어가 가지는 의 미와 본 개시의 전반에 걸친 내용을 토대로 정의되어야 한다. 명세서 전체에서 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있음을 의미한다. 또한, 명세서에 기재된 \".. 부\", \"..모듈\" 등의 용어는 적어도 하나의 기능이나 동작을 처리하는 단위를 의미하며, 이는 하드웨어 또는 소 프트웨어로 구현되거나 하드웨어와 소프트웨어의 결합으로 구현될 수 있다. 아래에서는 첨부한 도면을 참고하여 본 개시의 실시 예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지식 을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 개시는 여러 가지 상이한 형태로 구현될 수 있으며 여기에서 설명하는 실시 예에 한정되지 않는다. 이하에서는 도면을 참조하여 본 개시의 실시 예들을 상세히 설명한다. 본 개시에서, 메모리에 대한 접근은 메모리로부터 데이터를 읽어오거나 데이터를 쓰는(또는 저장하는) 것을 의 미할 수 있다. 또한, 내부 메모리는 온-칩(on-chip) 메모리를 의미할 수 있고, 외부 메모리는 내부 메모리를 제 외한 온-칩 메모리 또는 오프-칩(off-chip) 메모리를 의미할 수 있다. 도 1은 일 실시예에 따른 가속기(accelerator)를 나타낸다. 가속기는 메모리 접근 장치, 프로세싱 엘리먼트, 및 메모리를 포함할 수 있다. 일 실시예에 따라, 가속기는 뉴럴 네트워크에서 자주 사용되는 연산을 신속하게 처리하기 위한 뉴럴 네트워크 전용 하드 웨어일 수 있다. 예를 들어, 가속기는 뉴럴 네트워크에서 컨볼루션(convolution), 활성화(activation), 풀 링(pooling), 정규화(normalization) 등의 연산을 빠르게 처리할 수 있다. 일 실시예에 따라, 가속기는 뉴 럴 네트워크 구동을 위한 전용 모듈인 NPU(neural processing unit), TPU(Tensor Processing Unit), Neural Engine 등과 같은 하드웨어 가속기일 수 있으나, 이에 제한되지 않는다. 도 1에 도시된 가속기은 본 실시예 와 관련된 구성요소들만이 도시되어 있다. 따라서, 도 1에 도시된 구성요소들 외에 다른 범용적인 구성요소들이"}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "더 포함될 수 있음을 본 실시예와 관련된 기술분야에서 통상의 지식을 가진 자라면 이해할 수 있다. 메모리는 프로세싱 엘리먼트가 직접적으로 접근 가능한 메모리로서, 온-칩(on-chip) 메모리를 포함 할 수 있다. 일 실시예에 따라, 메모리는 스크래치패드 메모리(scratchpad memory)를 포함할 수 있고, 다 른 실시예에 따라, 캐시 메모리를 포함할 수 있다. 예를 들어, 메모리는 SRAM(Static Random Access Memory)를 포함할 수 있다. 메모리는 복수의 데이터라인들(또는 복수의 엔트리들)을 포함할 수 있고, 복수 의 데이터라인들 각각은 데이터를 저장할 수 있다. 프로세싱 엘리먼트(processing element)는 메모리에 접근하여 연산을 수행할 수 있다. 프로세싱 엘리 먼트는 메모리로부터 데이터를 읽어오거나 메모리에 데이터를 쓸 수 있고, 메모리의 데이 터를 기반으로 연산을 수행할 수 있다. 예를 들어, 프로세싱 엘리먼트는 NVP(Neural Vector Processor),MAC(multiply and accumulation) 어레이, ALU(arithmetic and logical unit), 및 MXC(Matrix Multiplication Convolution)을 위한 연산 유닛 등을 포함할 수 있다. 프로세싱 엘리먼트는 복수의 프로세싱 엘리먼트들로 구성될 수 있다. 예를 들어, 프로세싱 엘리먼트는 제1연산을 위한 제1 프로세싱 엘리먼트와 제2연산을 위 한 제2 프로세싱 엘리먼트를 포함할 수 있다. 프로세싱 엘리먼트는 입력되는 커맨드(command)에 기초하여 동작할 수 있다. 예를 들어, 프로세싱 엘리먼 트는 제1 커맨드에 기초하여 메모리의 적어도 하나의 데이터라인에 저장된 제1데이터를 읽어내어 제1 컨볼루션 연산을 수행할 수 있고, 제2 커맨드에 기초하여 메모리의 적어도 하나의 데이터라인에 저장된 제 2데이터를 읽어내어 제2 컨볼루션 연산을 수행할 수 있다. 또한, 프로세싱 엘리먼트는 순차적인 접근 패턴 (sequential access pattern)(또는 선형 접근 패턴(linear access pattern))에 따라 메모리의 복수의 데 이터라인에 접근할 수 있다. 구체적으로, 프로세싱 엘리먼트는 하나의 데이터라인마다, 또는 소정 개수의 데이터라인마다 메모리의 복수의 데이터라인에 순차적으로 접근할 수 있다. 일 예에 따라, 복수의 데이터 라인이 제1 데이터라인 내지 제512 데이터라인을 포함하는 경우, 프로세싱 엘리먼트는 제1 데이터라인부터 제512 데이터라인까지 하나의 데이터라인마다 순차적으로 접근할 수 있다. 다른 예에 따라, 프로세싱 엘리먼트 는 16개의 데이터라인마다 복수의 데이터라인에 접근할 수 있으므로, 제1 데이터라인부터 제16 데이터라인 에 대해 접근한 후, 제17 내지 제32 데이터라인에 접근할 수 있다. 메모리 접근 장치는 메모리의 적어도 하나의 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허 용하거나 허용하지 않을 수 있다. 다시 말해, 메모리 접근 장치는 메모리의 적어도 하나의 데이터라 인에 대한 프로세싱 엘리먼트의 접근이 가능 또는 가능하지 않도록 제어할 수 있다. 일 실시예에 따라, 메 모리 접근 장치는 적어도 하나의 데이터라인에 대응하는 태그 영역의 정보 또는 값을 변경하여, 프로세싱 엘리먼트가 적어도 하나의 데이터라인에 저장된 데이터를 읽어오는 것, 또는 프로세싱 엘리먼트가 적 어도 하나의 데이터라인에 데이터를 쓰는 것을 허용하거나 허용하지 않을 수 있다. 또한, 메모리 접근 장치 는 프로세싱 엘리먼트의 연산 과정에서 필요한 외부 메모리의 데이터를 메모리의 적어도 하나의 데이터라인에 로딩할 수 있다. 일 실시예에 따라, 메모리 접근 장치는 DMA(Direct Memory Access) 엔진을 포함할 수 있다. 메모리 접근 장치는 입력되는 커맨드에 기초하여 동작할 수 있다. 커맨드는 프로세싱 엘리먼트가 메 모리의 데이터라인에 접근하는 것에 대한 모니터링을 요청(또는 지시)하는 커맨드, 프로세싱 엘리먼트 가 연산을 수행하기 위해 필요한 데이터에 대한 로딩(loading)을 요청하는 커맨드, 및 메모리의 데이 터라인에 저장된 프로세싱 엘리먼트의 연산 결과 데이터의 스토링(storing)을 요청하는 커맨드 중 적어도 하나를 포함할 수 있다. 커맨드는 메모리 접근 장치의 동작에 필요한 정보들을 포함할 수 있다. 커맨드는 복수의 필드로 구성된 코드를 포함할 수 있으며, 각 필드마다 메모리 접근 장치의 동작에 필요한 정보를 포함할 수 있다. 아래 표 1은 커맨드가 포함하는 정보의 일 예시를 나타낸다. 표 1 필드 비트-길이 설명 cmd_type 1 0=일반 DMA, 1=AMA cmd_id 9 코어들의 개수와 제1테이블 개수에 따라 결정됨. 예를 들어, 64 코어 각각에서 제1테이블이 8개인 경우, 8*64 -> 9비트 request_type 2 4가지 유형. 0=읽기만을 위한 모니터링, 1=쓰기만을 위한 모니터 링, 2=(읽기를 위한) 로딩 및 모니터링, 3=(읽기/쓰기를 위한) 모니터링 및 스토링 reuse_cnt 5 메모리 접근 모니터링을 위한 5비트 make_invalid 1 이 플래그가 설정될 때, 재사용(reuse) 후 데이터라인을 무효 (invalid)로 만듦. num_fold_spm 5 0=하나의 베이스 주소만을 사용, 1=일반(normal), 2~=이하 수식 에 따라 주소를 생성 (Addr = addr_base + addr_offset % num_fold_spm) num_fold_mem 5 0=하나의 베이스 주소만을 사용, 1=일반(normal), 2~=이하 수식 에 따라 주소를 생성 (Addr = addr_base + addr_offset % num_fold_mem) mem_addr_base 40 데이터 로딩과 스토링 요청을 위한 외부 메모리의 베이스 주소 mem_addr_offset 17 데이터 로딩과 스토링 요청을 위한 외부 메모리의 오프셋 주소 spm_addr_base 40 데이터 로딩과 스토링 요청을 위한 내부 메모리의 베이스 주소 spm_addr_offset 17 데이터 로딩과 스토링 요청을 위한 내부 메모리의 오프셋 주소표 1에서, 'cmd_type'은 커맨드의 유형에 관한 정보를 나타내고,'cmd_id'는 커맨드의 ID 정보를 나타내고, 'request_type'은 커맨드가 요청하는 내용에 관한 정보를 나타내고, 'reuse_cnt'는 데이터라인에 대한 기 설정 된 접근 횟수에 관한 정보를 나타내고, 'make_invalid'는 데이터라인에 접근 횟수가 기 설정된 접근 횟수에 도 달하는 경우 해당 데이터라인에 대한 접근이 불가하다는 정보를 나타내고, 'num_fold_spm'은 메모리에서 중복적으로 사용하고자 데이터라인의 개수에 관한 정보를 나타내고, 'num_fold_mem'은 외부 메모리에서 중복적 으로 사용하고자 데이터라인의 개수에 관한 정보를 나타내고, 'mem_addr_base' 및 'mem_addr_offset'는 데이터 로딩 또는 데이터 스토링을 위한 외부 메모리의 베이스 주소 정보와 외부 메모리의 오프셋 주소 정보를 나타내 고, 'spm_addr_base' 및 'spm_addr_offset'는 데이터 로딩 또는 데이터 스토링을 위한 메모리의 베이스 주소 정보와 메모리의 오프셋 주소 정보를 나타낸다. 일 실시예에 따라, 'num_fold_spm'이 0이면, 메모리 에서 중복적으로 사용하고자 하는 데이터라인의 개수가 1개임을 의미할 수 있고, 'num_fold_spm'이 1이면 메모리에서 중복적으로 사용하는 데이터라인이 없음을 의미할 수 있다. 마찬가지로, 'num_fold_mem'이 0이 면, 외부 메모리에서 중복적으로 사용하고자 하는 데이터라인의 개수가 1개임을 의미할 수 있고, 'num_fold_mem'이 1이면 외부 메모리에서 중복적으로 사용하는 데이터라인이 없음을 의미할 수 있다. 커맨드는, AMA(Asynchronous Memory Access) 커맨드 또는 DMA(Direct Memory Access) 커맨드와 같은 유형으로 구분될 수 있다. 또한, AMA 커맨드는, 프로세싱 엘리먼트의 읽기(read) 또는 쓰기(write)를 위한 모니터링을 요청하는 커 맨드, 프로세싱 엘리먼트의 읽기(read)를 위한 데이터 로딩 및 모니터링을 요청하는 커맨드, 및 프로세싱 엘리 먼트의 읽기(read) 또는 쓰기(write)를 위한 모니터링 및 데이터 스토링을 요청하는 커맨드와 같이 구분될 수 있다. DMA 커맨드는 데이터 로딩 또는 데이터 스토링을 요청하는 커맨드를 의미할 수 있다. 커맨드는 컴파일러 에 의해 생성된 코드를 포함할 수 있으며, 애플리케이션 또는 워크로드(workload)에 기초하여 생성될 수 있다. 예를 들어, 메모리 접근 장치는 제1 커맨드에 기초하여 메모리의 적어도 하나의 데이터라인에 제1 데 이터를 로딩하여 프로세싱 엘리먼트가 제1 데이터를 읽어내도록 할 수 있고, 제2 커맨드에 기초하여 메모 리의 적어도 하나의 데이터라인에 제2데이터를 로딩하여 프로세싱 엘리먼트가 제2 데이터를 읽어내도 록 할 수 있다. 메모리 접근 장치는 메모리의 적어도 하나의 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수 를 확인할 수 있다. 일 실시예에 따라, 적어도 하나의 데이터라인에 대응하는 태그 영역은 적어도 하나의 데이 터라인에 대한 프로세싱 엘리먼트의 접근 횟수에 관한 정보를 저장할 수 있고, 메모리 접근 장치는 태그 영역을 모니터링하여 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 메모리 접근 장치는 제1 커맨드에 기초하여 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘리먼 트의 접근을 허용할 수 있다. 이어서, 메모리 접근 장치는 복수의 데이터라인에 대한 제1 프로세싱 엘리먼 트의 접근 횟수를 확인할 수 있다. 메모리 접근 장치는 복수의 데이터라인 중 제1 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제1 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 다시 말해, 메모리 접근 장치는 제1 데이터라인 이 외의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근이 진행 중임에도, 제1 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 또한, 메모리 접근 장치는 복수의 데이터라인 중 제2 데이터라인에 대 한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제2 데이터 라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 따라서, 메모리 접근 장치는, 제1 프로세싱 엘리먼트의 복수의 데이터라인 모두에 대한 접근이 완료되지 않았음에도, 제2 프로세싱 엘리먼트의 데이터라인에 대한 접근이 이루어질 수 있으므로, 빠른 데이터 전송(data transfer) 또는 레이턴시 하이딩(latency hiding)과 같은 효과를 나타낼 수 있다. 즉, 본 개시에 따르면, 메모 리 접근 장치 또는 프로세싱 엘리먼트가 커맨드 단위로 동작하지 않고 데이터라인 단위로 동작할 수 있으 므로(다시 말해, 커맨드 단위의 디펜던시(dependency)가 아닌 데이터라인 단위의 디펜던시를 가지므로), 데이터 전송을 보다 가속화시킬 수 있다. 도 2는 다른 실시예에 따른 가속기를 나타낸다. 메모리 접근 장치는 버퍼 및 컨트롤러를 포함할 수 있다. 버퍼는 입력되는 적어도 하나의 커맨드를 저장할 수 있다. 일 실시예에 따라, 버퍼는 선입선출(FIFO) 구조의 큐(Queue)를 포함할 수 있다. 컨트롤러는 메모리 접근 장치의 전반적인 동작을 제어할 수 있다. 컨트롤러는 제1 커맨드에 기 초하여 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근을 허용할 수 있다. 이어서, 컨 트롤러는 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 컨트롤러(12 0)는 복수의 데이터라인 중 제1 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도 달하는 경우, 제2 커맨드에 기초하여 제1 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 또한, 컨트롤러는 복수의 데이터라인 중 제2 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제2 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 메모리는 복수의 데이터라인 및 복수의 데이터라인 각각에 대응하는 제1 태그 영역과 제2 태그 영역을 포함할 수 있다. 예를 들어, 메모리는 제1 데이터라인에 대응하는 제1 태그 영역 및 제2 태그 영역과, 제2 데이터라인에 대응하는 제1 태그 영역 및 제2 태그 영역을 포함할 수 있다. 제1 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근에 대한 허용 여부를 나타내는 정보를 저장할 수 있다. 구체적으로, 제1 태그 영역은 1비트의 정보를 저장할 수 있으며, 0(Invalid) 또는 1(Valid)의 값 을 가질 수 있다. 예를 들어, 제1 태그 영역이 0의 값을 갖는 경우, 대응하는 데이터라인에 대한 프로세싱 엘리 먼트의 접근이 허용되지 않을 수 있고, 제1 태그 영역이 1의 값을 갖는 경우, 대응하는 데이터라인에 대한 프로 세싱 엘리먼트의 접근이 허용될 수 있다. 컨트롤러는 제1 태그 영역의 정보를 변경하여 대응하는 데이터라인에 대한 프로세싱 엘리먼트의 접 근을 허용하거나 허용하지 않을 수 있다. 예를 들어, 컨트롤러는 제1 데이터라인에 대응하는 제1 태그 영 역의 값을 0에서 1로 변경하여, 제1 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허용할 수 있다. 다시 말해, 컨트롤러에 의해 제1 태그 영역의 값이 0에서 1로 변경되어, 프로세싱 엘리먼트가 제1 데이터라인에 접근할 수 있다. 또한, 컨트롤러는 제1 데이터라인에 대응하는 제1 태그 영역의 값을 1에서 0으로 변경하 여, 제1 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허용하지 않을 수 있다. 다시 말해, 컨트롤러에 의해 제1 태그 영역의 값이 1에서 0으로 변경되어, 프로세싱 엘리먼트는 제1 데이터라인에 접근할 수 없다. 제2 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근 횟수를 나타내는 정보를 포함할 수 있다. 구 체적으로, 제2 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근 횟수를 카운트하기 위한 카운터를 포함할 수 있다. 예를 들어, 제2 태그 영역은 복수의 데이터라인 각각에 대응하는 5비트의 이진 카운터를 포함할 수 있다. 컨트롤러는 제2 태그 영역을 모니터링하여 복수의 데이터라인들 각각에 대한 프로세싱 엘리먼트의 접 근 횟수를 확인할 수 있다. 도 2에서는 제1 태그 영역과 제2 태그 영역이 메모리에 포함되는 것으로 도시되었지만 이는 일 예시일 뿐 제1 태그 영역과 제2 태그 영역은 메모리에 포함되지 않을 수 있다. 예를 들어, 제1 태그 영역과 제2 태그 영역은 메모리 접근 장치에 포함될 수 있다. 도 3은 메모리 접근 장치가 동작하는 제1 실시예를 나타낸다. 메모리 접근 장치는 제1 AMA 커맨드 및 제2 AMA 커맨드를 순차적으로 입력 받을 수 있고, 순차적으로 제1 AMA 커맨드 및 제2 AMA 커맨드에 기초하여 동작할 수 있다. 제1 AMA 커맨드는, 제1 프로세싱 엘리먼트가 제1 PE(Processing Element) 커맨드에 따라 메모리의 복수의 데이터라인에 접근하는 것에 대한 모니터링을 요청하는 커맨드일 수 있고, 제2 AMA 커맨드는 제2 프로세싱 엘리먼트가 제2 PE 커맨드에 따라 메모리 의 복수의 데이터라인에 접근하는 것에 대한 모니터링을 요청하는 커맨드일 수 있다. 예를 들어, 제1 PE 커맨드는 뉴럴 네트워크의 풀링(Pooling) 연산에 관한 커맨드를 나타낼 수 있고, 제2 PE 커맨드는 제1 PE 커맨 드에 따른 풀링 연산에 이어서 수행되는 컨볼루션 연산에 관한 커맨드를 나타낼 수 있다. 일 실시예에 따라, 제 1 프로세싱 엘리먼트 및 제2 프로세싱 엘리먼트는 도 1 내지 2의 프로세싱 엘리먼트에 포함될 수 있다. 메모리 접근 장치는 제1 AMA 커맨드에 기초하여 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘 리먼트의 접근을 허용할 수 있다. 그 결과, 제1 프로세싱 엘리먼트는 메모리의 복수의 데이터라인에 접근하여 제1 PE 커맨드에 따른 연산 결과 데이터를 복수의 데이터라인에 쓸 수 있다. 메모리 접근 장치는 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 구체적으로, 메모리 접근 장치는 제1 프로세싱 엘리먼트가 복수의 데이터라인 각각에 연산 결 과 데이터를 쓰는 횟수를 확인할 수 있다. 예를 들어, 메모리 접근 장치는 메모리의 제1 태그 영역 을 모니터링하여 복수의 데이터라인 각각에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있 다. 메모리 접근 장치는 복수의 데이터라인 중 제1데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수 가 기 설정된 접근 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제1 데이터라인에 대한 제2 프로세싱 엘리먼 트의 접근을 허용할 수 있다. 예를 들어, 제1 프로세싱 엘리먼트가 연산 결과 데이터를 기 설정된 횟 수(예를 들어, 4회)만큼 제1데이터라인에 쓰는 경우, 메모리 접근 장치는 제2 커맨드에 기초하여 제2 프로 세싱 엘리먼트가 제1데이터라인에 접근하는 것을 허용할 수 있고, 그 결과 제2 프로세싱 엘리먼트는 제1데이터라인에 저장된 데이터(예를 들어, 제1 프로세싱 엘리먼트에 의해 제1데이터라인에 쓰여진 데이터)를 읽어낼 수 있다. 마찬가지로, 메모리 접근 장치는 복수의 데이터라인 중 제2데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제2 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 따라서, 본 개시에 따르면, 제1 프로세싱 엘리먼트가 제1 PE 커맨드에 따른 동작을 완료한 후 제2 프로세 싱 엘리먼트가 제2 PE 커맨드에 따른 동작을 수행하는 것이 아니라, 제1 프로세싱 엘리먼트가 제1 PE 커맨드에 따른 동작을 수행하는 동안에 제2 프로세싱 엘리먼트가 제2 PE 커맨드에 따른 동작을 수행하므로, 빠른 데이터 전송(data transfer) 또는 레이턴시 하이딩과 같은 효과를 나타날 수 있다. 다시 말해, 본 개시에 따르면, 제1 프로세싱 엘리먼트 및 제2 프로세싱 엘리먼트가 커맨드 단위로 동작하 지 않고 데이터라인 단위로 동작할 수 있으므로(다시 말해, 커맨드 단위의 디펜던시(dependency)가 아닌 데이터 라인 단위의 디펜던시를 가지므로), 데이터 전송을 보다 가속화시킬 수 있다. 도 4는 메모리 접근 장치가 동작하는 제2 실시예를 나타낸다. 메모리 접근 장치는 제1 AMA 커맨드 및 제2 AMA 커맨드를 순차적으로 입력 받을 수 있고, 순차적으로 제1 AMA 커맨드 및 제2 AMA 커맨드에 따라 동작할 수 있다. 제1 AMA 커맨드는, 제1 프로세싱 엘리먼트가 제1 PE 커맨드에 따른 연산을 수행하기 위해 필요한 데이터에 대한 로딩과, 제1 프로세싱 엘리먼트가 복수의 데이터라인에 접근하는 것에 대한 모니터링을 요청하는 커맨드일 수 있다. 제2 AMA 커맨드는, 제2 프로세싱 엘 리먼트가 제2 PE 커맨드에 따른 연산을 수행하기 위해 필요한 데이터에 대한 로딩과, 제2 프로세싱 엘리먼 트가 복수의 데이터라인에 접근하는 것에 대한 모니터링을 요청하는 커맨드일 수 있다. 제1 AMA 커맨드와 제2 AMA 커맨드는 메모리의 동일한 메모리 영역에 대해 데이터 로딩 및 모니터링을 요청하는 커맨드일 수 있다. 일 실시예에 따라, 제1 프로세싱 엘리먼트 및 제2 프로세싱 엘리먼트는 도 1 및 2의 프로세싱 엘리먼트에 포함될 수 있다. 외부 메모리는 오프-칩(off-chip) 메모리를 포함할 수 있다. 또한, 외부 메모리는 메모리를 포함하는 가속기와는 다른 가속기에 포함된 메모리일 수 있다. 메모리 접근 장치는 제1 AMA 커맨드에 기초하여 테이블을 설정할 수 있다. 예를 들어, 테이블은 메모리 의 복수의 데이터라인의 개수의 비트(bit)를 포함할 수 있으며, 각 비트는 1의 값을 갖는 것으로 초기화될 수 있다. 여기서 비트가 1의 값을 갖는 것은 해당 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정 된 접근 횟수에 도달하지 않았다는 것을 의미하고, 비트가 0의 값을 갖는 것은 해당 데이터라인에 대한 프로세 싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달하였다는 것을 의미할 수 있다. 마찬가지로 메모리 접근 장치는 제2 AMA 커맨드에 기초하여 테이블을 설정할 수 있다. 또한, 제1 AMA 커맨드에 대응하는 테이블과 제2 AMA 커맨드에 대응하는 테이블 간에는 디펜던스(dependency)가 형성될 수 있다. 예를 들어, 제1 AMA 커맨드 에 대응하는 테이블은, 후속적으로 실행될 커맨드에 대응하는 테이블을 제2 AMA 커맨드에 대응하는 테이블로 확 인하는 정보를 포함할 수 있다. 메모리 접근 장치는 제1 AMA 커맨드에 기초하여 외부 메모리의 데이터를 메모리의 복수의 데이 터라인에 저장할 수 있다. 구체적으로, 메모리 접근 장치는 제1 프로세싱 엘리먼트가 제1 PE 커맨드 에 따른 연산을 수행하기 위해 필요한 외부 메모리의 데이터를 로딩하기 위해, 외부 메모리의 데이터 를 복수의 데이터라인에 저장할 수 있다. 일 실시예에 따라, 메모리 접근 장치는 제1 AMA 커맨드에 포함된메모리의 주소 정보와 외부 메모리의 주소 정보를 이용하여, 외부 메모리의 데이터를 메모리 의 복수의 데이터라인에 저장할 수 있다. 이어서, 메모리 접근 장치는 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근을 허용할 수 있다. 그 결과, 제1 프로세싱 엘리먼트는 복수의 데이터라인에 접근하여 데이터를 읽어낼 수 있고, 제1 PE 커맨드에 따른 연산을 수행할 수 있다. 메모리 접근 장치는 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 구체적으로, 메모리 접근 장치는 제1 프로세싱 엘리먼트가 복수의 데이터라인 각각에서 데이터 를 읽는 횟수를 확인할 수 있다. 예를 들어, 메모리 접근 장치는 메모리의 제1 태그 영역을 모 니터링하여 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 메모리 접근 장치는 복수의 데이터라인 중 제1데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달하는 경우, 제2 AMA 커맨드에 기초하여 외부 메모리의 데이터를 복수의 데이터 라인 중 제1데이터라인에 저장할 수 있다. 구체적으로, 메모리 접근 장치는 제2 프로세싱 엘리먼트가 제2 PE 커맨드에 따른 연산을 수행하기 위해 필요한 외부 메모리의 데이터를 로딩하기 위해, 외부 메모리 의 데이터를 제1데이터라인에 저장할 수 있다. 예를 들어, 메모리 접근 장치는 제1 AMA 커맨드에 포 함된 테이블에 저장된 기 설정된 접근 횟수에 관한 정보를 확인할 수 있고, 제1데이터라인에 대한 프로세싱 엘 리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달하는 경우, 테이블에 포함된 제1데이터라인에 대응하는 비트의 값을 1에서 0으로 변경할 수 있다. 그 결과, 제1 AMA 커맨드에 대응하는 테이블과 제2 AMA 커맨드에 대 응하는 테이블 간의 디펜던시(dependency)에 따라, 메모리 접근 장치는 제2 AMA 커맨드에 기초하여, 외부 메모리의 데이터를 복수의 데이터라인 중 제1데이터라인에 저장할 수 있다. 이어서, 메모리 접근 장치는 제1데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 그 결과, 제2 프로세싱 엘리먼트는 제1데이터라인에 접근하여 데이터를 읽어낼 수 있고, 제2 PE 커맨드에 따른 연산을 수행할 수 있다. 마찬가지로, 메모리 접근 장치는 복수의 데이터라인 중 제2데이터라인에 대한 제1 프로세싱 엘리먼트(21 0)의 접근 횟수가 기 설정된 접근 횟수에 도달하는 경우, 제2 커맨드에 기초하여 외부 메모리의 데이터를 복수의 데이터라인 중 제2데이터라인에 저장할 수 있고, 제2데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 그 결과, 제2 프로세싱 엘리먼트는 제2데이터라인에 접근하여 데이터를 읽어낼 수 있고, 제2 PE 커맨드에 따른 연산을 수행할 수 있다. 따라서, 본 개시에 따르면, 제1 AMA 커맨드에 따라 복수의 데이터라인에 대해 데이터 로딩이 수행된 이후, 제1 프로세싱 엘리먼트의 접근이 완료된 데이터라인에 대해 제2 AMA 커맨드에 따른 데이터 로딩이 수행될 수 있다. 따라서, 제1 프로세싱 엘리먼트가 제1 PE 커맨드에 따른 동작을 수행하는 동안에 제2 프로세싱 엘리 먼트가 제2 PE 커맨드에 따른 동작을 수행하므로, 보다 효과적인 레이턴시 하이딩을 구현할 수 있다. 일 실시예에 따라, 메모리 접근 장치는 외부 메모리의 데이터를 메모리에 저장하는 경우, 메모 리의 기 설정된 개수의 데이터라인을 중복적으로 사용하여, 데이터를 메모리에 저장할 수 있다. 보다 구체적인 실시예는 이하 도 6에서 살펴보기로 한다. 도 5은 메모리 접근 장치가 동작하는 제3 실시예를 나타낸다. 메모리 접근 장치는 입력 받은 AMA 커맨드에 기초하여 동작할 수 있다. AMA 커맨드는, 프로세싱 엘리먼트 가 PE 커맨드에 따라 메모리의 복수의 데이터라인에 접근하는 것에 대한 모니터링과, 복수의 데이터 라인에 저장된 프로세싱 엘리먼트의 연산 결과 데이터의 스토링을 요청하는 커맨드일 수 있다. 메모리 접근 장치는 AMA 커맨드에 기초하여 메모리의 복수의 데이터라인에 대한 프로세싱 엘리먼트 의 접근을 허용할 수 있다. 그 결과, 프로세싱 엘리먼트는 메모리의 복수의 데이터라인에 접근 하여, PE 커맨드에 따른 연산 결과 데이터를 복수의 데이터라인에 쓰거나, PE 커맨드에 따른 연산을 위해 복수 의 데이터라인에 저장된 데이터를 읽어낼 수 있다. 메모리 접근 장치는 복수의 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 구 체적으로, 메모리 접근 장치는 프로세싱 엘리먼트가 복수의 데이터라인 각각에 연산 결과 데이터를 쓰는 횟수, 또는 프로세싱 엘리먼트가 복수의 데이터라인 각각에 저장된 데이터를 읽는 횟수를 확인할 수있다. 예를 들어, 메모리 접근 장치는 메모리의 제1 태그 영역을 모니터링하여 복수의 데이터라 인 각각에 대한 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 메모리 접근 장치는 복수의 데이터라인 중 제1데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달하는 경우, 제1 데이터라인에 저장된 데이터를 외부 메모리에 저장할 수 있다. 이어서, 메모리 접근 장치는 복수의 데이터라인 중 제2데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달하는 경우, 제2데이터라인에 저장된 데이터를 외부 메모리에 저장할 수 있다. 일 실시예에 따라, 메모리 접근 장치는 AMA 커맨드에 기초하여, 메모리의 복수의 데이터라인에 저장 된 데이터를 복수의 외부 메모리 각각에 저장할 수 있다. 다시 말해, 메모리 접근 장치는 메모리의 데이터를 제1 외부 메모리와 제2외부 메모리 각각에 전달할 수 있고, 제1 외부 메모리와 제2 외부 메모리는 전 달된 데이터를 저장할 수 있다. 따라서, 본 개시에 따르면, 프로세싱 엘리먼트가 PE 커맨드에 따른 동작을 완료한 후 데이터 스토링을 수 행하는 것이 아니라, 프로세싱 엘리먼트가 PE 커맨드에 따른 동작을 수행하는 동안에 순차적으로 데이터라 인 별로 데이터 스토링이 수행될 수 있으므로, 보다 빠른 데이터 전송이 가능해질 수 있다. 일 실시예에 따라, 메모리 접근 장치는 메모리의 복수의 데이터라인에 저장된 데이터를 외부 메모리 에 저장하는 경우, 외부 메모리의 기 설정된 개수의 데이터라인을 중복적으로 사용하여, 데이터를 외 부 메모리에 저장할 수 있다. 보다 구체적인 실시예는 이하 도 7에서 살펴보기로 한다. 도 6은 메모리 접근 장치가 동작하는 제4 실시예를 나타낸다. 메모리 접근 장치는 AMA 커맨드에 기초하여 동작할 수 있다. AMA 커맨드는, 프로세싱 엘리먼트가 PE 커맨드에 따른 연산을 수행하기 위해 필요한 데이터에 대한 로딩과, 프로세싱 엘리먼트가 메모리의 데이터라인에 접근하는 것에 대한 모니터링을 요청하는 커맨드일 수 있다. 메모리 접근 장치는 AMA 커맨드에 기초하여 외부 메모리의 제1데이터 중 일부 데이터인 제1-1데이터 를 메모리의 복수의 데이터라인 중 기 설정된 개수의 데이터라인에 저장할 수 있다. 구체적으로, 외부 메모리의 제1데이터 모두를 로딩하기 위해서는 메모리의 복수의 데이터라인이 필요하지만, 메모리 접근 장치는 제1데이터 중 제1-1데이터를 메모리의 기 설정된 개수의 데이터라인 에 저장할 수 있다. 이어서, 메모리 접근 장치는 기 설정된 개수의 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허용할 수 있다. 그 결과, 프로세싱 엘리먼트는 기 설정된 개수의 데이터라인에 접근하여 데이터를 읽어낼 수 있고, PE 커맨드에 따른 연산을 수행할 수 있다. 메모리 접근 장치는 기 설정된 개수의 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수를 확 인할 수 있다. 메모리 접근 장치는 기 설정된 개수의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수 가 모두 기 설정된 접근 횟수에 도달하는 경우, 제1데이터 중 다른 일부 데이터인 제1-2데이터를 복수의 데이터 라인 중 기 설정된 개수의 데이터라인에 저장할 수 있다. 이어서, 메모리 접근 장치는 기 설정 된 개수의 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허용할 수 있다. 그 결과, 프로세싱 엘리 먼트는 기 설정된 개수의 데이터라인에 접근하여 데이터를 읽어낼 수 있고, PE 커맨드에 따른 연산을 수행할 수 있다. 마찬가지로, 기 설정된 개수의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수가 모두 기 설 정된 접근 횟수에 도달하고 제1데이터가 제1-1데이터와 제1-2데이터 외의 다른 데이터를 더 포함한다면, 메모리 접근 장치는 기 설정된 개수의 데이터라인의 수용 가능한 데이터량을 기준으로, 다른 데이터 또는 다 른 데이터 중 일부 데이터를 기 설정된 개수의 데이터라인에 저장할 수 있고, 기 설정된 개수의 데이터라 인에 대한 프로세싱 엘리먼트의 접근을 허용할 수 있다. 결과적으로, 제1데이터 모두가 로딩되고 프 로세싱 엘리먼트에 의해 처리될 수 있다. 예를 들어, 외부 메모리의 10개의 데이터라인(즉, 제1 데이터라인 내지 제10데이터라인)에 저장된 제1데이 터를 로딩하기 위해, 먼저 메모리 접근 장치는 3개의 데이터라인(즉, 제1 데이터라인 내지 제3 데이터라인)에 저장된 제1-1데이터를 메모리의 3개의 데이터라인에 저장할 수 있다. 이어서, 3개의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수가 모두 4에 도달하는 경우, 메모리 접근 장 치는 외부 메모리의 3개의 데이터라인(즉, 제4 데이터라인 내지 제6데이터라인)에 저장된 제1-2데이 터를 메모리의 3개의 데이터라인에 저장할 수 있다. 이어서, 3개의 데이터라인 각각에 대한 프 로세싱 엘리먼트의 접근 횟수가 모두 4에 도달하는 경우, 메모리 접근 장치는 외부 메모리의 3 개의 데이터라인(즉, 제7 데이터라인 내지 제9데이터라인)에 저장된 제1-3데이터를 메모리의 3개의 데이터 라인에 저장할 수 있다. 이어서, 3개의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수 가 모두 4에 도달하는 경우, 메모리 접근 장치는 외부 메모리의 1개의 데이터라인(즉, 제10 데이터라 인)에 저장된 제1-4데이터를 메모리의 3개의 데이터라인 중 하나의 데이터라인에 저장할 수 있다. 일 실시예에 따라, 메모리 접근 장치는 아래 수학식 1을 기초로, 외부 메모리의 데이터를 기 설정된 개수의 데이터라인만을 이용하여 메모리에 저장할 수 있다. [수학식 1] Addr = addr_base + addr_offset % num_fold_spm 수학식 1에서, Addr은 외부 메모리의 데이터가 저장될 메모리의 주소 정보를 나타내고, addr_base는 데이터가 저장될 메모리의 베이스 주소 정보를 나타내고, addr_offset은 데이터가 저장된 메모리의 오프셋 주소 정보를 나타내고, num_fold_spm은 기 설정된 개수를 나타내고, % 연산자는 나머지를 계산하기 위한 연산자를 나타낸다. 예를 들어, 외부 메모리의 5개의 데이터를 메모리에 저장하는 경우, 베이스 주소 가 0이고 5개의 데이터의 오프셋 주소가 1씩 증가하고 기 설정된 개수가 3이라고 가정할 때, 제1 데이터부터 제 3 데이터까지의 주소가 0, 1, 2이고, 제4 데이터와 제5 데이터의 주소는 0, 1일 수 있다. 따라서, 본 개시에 따르면, 복수의 데이터라인 모두에 대해 데이터 로딩이 필요한 경우, 복수의 데이터라인 중 일부 데이터라인만을 사용하여 데이터 로딩이 수행될 수 있으므로, 메모리의 메모리 영역을 더 적게 사용 할 수 있는 효과가 있다. 다시 말해, 본 개시에 따르면, 메모리의 주소 공간을 더 적게 소비할 수 있다. 도 6에서 데이터라인의 개수가 3개로 도시되었지만 이는 일 예시일 뿐 다른 개수 또한 가능할 수 있다. 도 7은 메모리 접근 장치가 동작하는 제5 실시예를 나타낸다. 메모리 접근 장치는 AMA 커맨드에 기초하여 동작할 수 있다. AMA 커맨드는, 프로세싱 엘리먼트가 PE 커맨드에 따라 메모리의 복수의 데이터라인에 접근하는 것에 대한 모니터링과, 복수의 데이터라인에 저장 된 프로세싱 엘리먼트의 연산 결과 데이터의 스토링을 요청하는 커맨드일 수 있다. 메모리 접근 장치는 메모리의 복수의 데이터라인에 저장된 제1데이터 중 일부 데이터인 제1-1데이터 를 외부 메모리의 복수의 데이터라인 중 기 설정된 개수의 데이터라인에 저장할 수 있다. 구체 적으로, 메모리의 제1데이터 모두를 스토링하기 위해서는 외부 메모리의 복수의 데이터라인이 필요하지만, 메모리 접근 장치는 제1데이터 중 제1-1데이터를 외부 메모리의 기 설정된 개수의 데이 터라인에 저장할 수 있다. 메모리 접근 장치는, 기 설정된 개수의 데이터라인 각각에 대한 소정의 프로세싱 엘리먼트의 접근 횟 수가 모두 기 설정된 접근 횟수에 도달하는 경우, 제1데이터 중 다른 일부 데이터인 제1-2데이터를 복수의 데이 터라인 중 기 설정된 데이터라인에 저장할 수 있다. 예를 들어, 메모리 접근 장치는 기 설정된 개수의 데이터라인 각각에 대한 소정의 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 접근 횟수에 도 달하는지 여부를 확인할 수 있다. 마찬가지로, 기 설정된 개수의 데이터라인 각각에 대한 소정의 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 접근 횟수에 도달하고 제1데이터가 제1-1데이터와 제1-2데이터 외의 다른 데이터를 더 포함한다면, 메모 리 접근 장치는 기 설정된 개수의 데이터라인의 수용 가능한 데이터량을 기준으로, 다른 데이터 또는 다른 데이터 중 일부 데이터를 기 설정된 개수의 데이터라인에 저장할 수 있다. 예를 들어, 메모리의 10개의 데이터라인(즉, 제1 데이터라인 내지 제10데이터라인)에 저장된 제1데이터를 스토링하기 위해, 먼저 메모리 접근 장치는 3개의 데이터라인(즉, 제1 데이터라인 내지 제3 데이터라인)에저장된 제1-1데이터를 외부 메모리의 3개의 데이터라인에 저장할 수 있다. 이어서, 3개의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수가 모두 2에 도달하는 경우, 메모리 접근 장치는 메모리 의 3개의 데이터라인(즉, 제4 데이터라인 내지 제6데이터라인)에 저장된 제1-2데이터를 외부 메모리 의 3개의 데이터라인에 저장할 수 있다. 이어서, 3개의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수가 모두 2에 도달하는 경우, 메모리 접근 장치는 메모리의 3개의 데이터라인(즉, 제7 데이 터라인 내지 제9데이터라인)에 저장된 제1-3데이터를 외부 메모리의 3개의 데이터라인에 저장할 수 있다. 이어서, 3개의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수가 모두 2에 도달하는 경우, 메모리 접근 장치는 메모리의 1개의 데이터라인(즉, 제10 데이터라인)에 저장된 제1-4데이터를 외부 메모리의 3개의 데이터라인 중 하나의 데이터라인에 저장할 수 있다. 일 실시예에 따라, 메모리 접근 장치는 아래 수학식 2를 기초로, 메모리의 데이터를 외부 메모리 의 기 설정된 개수의 데이터라인만을 이용하여 외부 메모리에 저장할 수 있다. [수학식 2] Addr = addr_base + addr_offset % num_fold_mem 수학식 2에서, Addr은 메모리의 데이터가 저장될 외부 메모리의 주소 정보를 나타내고, addr_base는 데이터가 저장될 외부 메모리의 베이스 주소 정보를 나타내고, addr_offset은 데이터가 저장된 외부 메모 리의 오프셋 주소 정보를 나타내고, num_fold_mem은 기 설정된 개수를 나타내고, % 연산자는 나머지를 계 산하기 위한 연산자를 나타낸다. 따라서, 본 개시에 따르면, 복수의 데이터라인 모두에 대해 데이터 스토링이 필요한 경우, 복수의 데이터라인 중 일부 데이터라인만을 사용하여 데이터 스토링이 수행될 수 있으므로, 외부 메모리의 메모리 영역을 더 적게 사용할 수 있는 효과가 있다. 다시 말해, 본 개시에 따르면, 외부 메모리의 주소 공간을 더 적게 소 비할 수 있다. 도 8은 또 다른 실시예에 따른 가속기를 나타낸다. 가속기는 메모리 접근 장치, 프로세싱 엘리먼트, 및 메모리를 포함할 수 있다. 메모리 접근 장치는 도 1 내지 7의 메모리 접근 장치를 포함할 수 있고, 프로세싱 엘리먼트는 도 1 및 2의 프로세싱 엘리먼트를 포함할 수 있고, 메모리는 도 1 내지 7의 메모리를 포함할 수 있는바, 중 복되는 내용에 대해서는 설명을 생략한다. 메모리 접근 장치는 SFR(Special Function Register), 커맨드 큐(command queue), 스케줄러 , 제1테이블, 주소 생성기, 및 요청 큐를 포함할 수 있다. 메모리는 인 요청 큐 , 데이터 버퍼, 제2테이블, 태그 영역, 데이터 영역, 및 아웃 요청 큐을 포함 할 수 있다. 일 실시예에 따라, 메모리 접근 장치는 컨트롤러를 포함할 수 있고, 컨트롤러는 메모리 접근 장치의 각 구성요소의 동작을 제어할 수 있다. 또한, 메모리는 컨트롤러를 포함할 수 있고, 컨트롤러 는 메모리의 각 구성요소의 동작을 제어할 수 있다. SFR은 커맨드 세팅에 대한 정보를 입력 받을 수 있고, 커맨드 세팅에 대한 정보에 기초하여 커맨드에 대한 정보를 변경 또는 설정할 수 있다. 예를 들어, SFR은 런 타임(run time) 중에 커맨드에 대한 정보를 변경 또는 설정할 수 있다. 커맨드 큐는 메모리 접근 장치로 입력되는 적어도 하나의 커맨드를 저장할 수 있다. 스케줄러는 커맨드 큐에 저장된 적어도 하나의 커맨드를 순차적으로 처리할 수 있다. 스케줄러 는 커맨드의 유형에 따라 커맨드 큐에 저장된 적어도 하나의 커맨드를 다르게 처리할 수 있다. 일 실시예 에 따라, 스케줄러는 적어도 하나의 데이터라인에 대한 모니터링을 요청하는 AMA 커맨드의 경우, 해당 커 맨드에 대응하는 제1테이블을 설정할 수 있고, 데이터 로딩 또는 스토링을 요청하는 DMA 커맨드의 경우, DMA 커맨드에 따라 데이터 로딩 또는 스토링을 위한 주소 생성을 주소 생성기에 요청할 수 있다. 일 실시예에 따라, 적어도 하나의 커맨드에 기초하여, 적어도 하나의 커맨드 각각에 대응하는 적어도 하나의 제 1테이블이 설정될 수 있다. 제1테이블은 레지스터(register)로 구성될 수 있으며, 메모리 접근 장치 의 동작에 필요한 정보를 포함할 수 있다. 아래 표 2는 제1테이블이 포함하는 정보의 일 예시를 나타낸다. 표 2 필드 비트-길이 설명 status 2 0=무효(invalid), 1=대기(wait), 2=런(run), 3=라인 릴리즈 (line-released) art_id 3 ART(Async Region Table) IDs. 8 ea. line_dep_art_id 3 라인 디펜던스로 인한 다음 ART ID를 나타냄. 예를 들어, num_fold_spm이 2보다 큰 경우에만, 2개의 async region이 잠김 단계 방식(lock step manner)으로 동작할 수 있도록 서로를 가리키는 2개의 ART의 상태를 '대기'와 '런'으 로 변경함. folding_cnt 10 현재의 폴딩 카운트 line_release_table 1024내부 메모리의 엔트리 개수. 128B 라인 크기의 128KB 메모리를 위한 1024 비트 Request_type이 MAS(monitoring and storing)인 경우, mem_addr과 함께 스토링 요청을 생성하도록 라인 디펜던시를 릴리즈. 또한, 어느 라인 디펜던스가 릴리즈될 때, “라인 디펜딩 ART ”가 있다면, 해당 art_id를 나타내는 제1테이블의 ART 상태 를 '런'으로 변경함. 표 2에서, 'status'는 제1테이블의 상태에 관한 정보를 나타내고, 'art_id'는 제1테이블의 ID 정보를 나타내고, 'line_dep_art_id'는 제1테이블이 관리하는 복수의 데이터라인들 중 적어도 하나의 데이터라인 이 릴리즈될 때(또는, 적어도 하나의 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수 에 도달할 때) 후속적으로 실행될 커맨드에 대응하는 제1테이블의 ID 정보를 나타내고, 'folding_cnt'는 기 설 정된 개수의 데이터라인이 중복적으로 사용된 횟수에 관한 정보를 나타내고, 'line_release_table'은 데이터라 인 별로 프로세싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달하였는지 여부를 나타내는 정보를 나타낼 수 있다.주소 생성기는 커맨드 또는 커맨드에 대응하는 제1테이블을 기초로 데이터 로딩(data loading) 또는 데이터 스토링(data storing)을 위한 메모리 주소 정보를 생성할 수 있다. 예를 들어, 외부 메모 리로부터 내부 메모리(즉, 메모리)로 데이터를 전달하는 데이터 로딩의 경우, 주소 생성기는 외부 메 모리 주소와 내부 메모리 주소에 관한 정보를 생성할 수 있고, 내부 메모리로부터 외부 메모리로 데이터를 전달 하는 데이터 스토링의 경우, 주소 생성기는 외부 메모리 주소와 내부 메모리 주소에 관한 정보를 생성할 수 있다. 주소 생성기에서 생성된 주소에 관한 정보는 요청 큐에 저장될 수 있고, 메모리의 아웃 요청 큐 에 전달될 수 있다. 따라서, 메모리는 아웃 요청 큐에 전달되는 주소에 관한 정보를 기초로 데 이터 로딩 및 데이터 스토링을 수행할 수 있다. 제2테이블은 제1테이블 또는 커맨드에 기초하여 설정될 수 있다. 일 실시예에 따라, 메모리는 메모리 접근 장치로부터 제1테이블 또는 커맨드에 관한 정보를 받을 수 있고, 제2테이블을 설정 할 수 있다. 제2테이블은 레지스터(register)로 구성될 수 있으며, 메모리의 동작에 필요한 정보를 포함할 수 있다. 또한, 제2테이블은 복수개 존재할 수 있으며, 각 커맨드에 대응하는 제2테이블이 존 재할 수 있다. 아래 표 3는 제2테이블이 포함하는 정보의 일 예시를 나타낸다. 표 3 필드 비트-길이 설명 status 2 0=무효(invalid), 1=대기(wait), 2=런(run), 3=라인 릴리즈 (line-released) request_type 2 4가지 유형. 0=읽기만을 위한 모니터링, 1=쓰기만을 위한 모 니터링, 2=(읽기를 위한) 로딩 및 모니터링, 3=(읽기/쓰기를 위한) 모니터링 및 스토링 reuse_cnt 5 모니터링을 위한 5비트num_fold_spm 5 0=하나의 베이스 주소만을 사용, 1=일반(normal), 2~=이하 수 식에 따라 주소를 생성 (Addr = addr_base + addr_offset % num_fold_spm) make_invalid 1 이 플래그가 설정될 때, 재사용(reuse) 후 데이터라인을 무효 (invalid)로 만듦. 표 3에서, 'status'는 제1테이블 또는 제2테이블의 상태에 관한 정보를 나타내고, 'request_type'은 커맨드가 요청하는 내용에 관한 정보를 나타내고, 'reuse_cnt'는 데이터라인에 대한 기 설정된 접근 횟수에 관 한 정보를 나타내고, num_fold_spm'은 메모리에서 중복적으로 사용하고자 데이터라인의 개수에 관한 정보 를 나타내고, 'make_invalid'는 데이터라인에 접근 횟수가 기 설정된 접근 횟수에 도달하는 경우 해당 데이터라 인에 대한 접근이 불가하다는 정보를 나타낼 수 있다.데이터 영역은 복수의 데이터라인을 포함할 수 있다. 태그 영역은 복수의 데이터라인 각각에 대응하는 제1 태그 영역 및 제 2 태그 영역을 포함할 수 있다. 제1 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근에 대한 허용 여부를 나타내는 정보를 포함할 수 있고, 제2 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근 횟수를 나타내는 정보를 포함할 수 있다. 예를 들 어, 태그 영역은 도 2의 제1 태그 영역 및 제2 태그 영역을 포함할 수 있다. 데이터 버퍼는 메모리에서 처리될 데이터를 임시로 저장할 수 있다. 예를 들어, 데이터 버퍼는 데이터 영역에 저장될 데이터를 임시로 저장할 수 있다. 인 요청 큐는 메모리 영역의 적어도 하나의 데이터라인에 대한 프로세싱 엘리먼트의 접근 요청 을 획득할 수 있다. 인 요청 큐는 제1 태그 영역에 기초하여 프로세싱 엘리먼트의 접근 요청에 대응 할 수 있다. 구체적으로, 제1 태그 영역이 0(invalid)의 값을 갖는 경우, 인 요청 큐는 프로세싱 엘리먼트 가 데이터라인에 접근하여 읽기 또는 쓰기를 못하도록 할 수 있다. 또한, 제1 태그 영역이 1(valid)의 값 을 갖는 경우, 인 요청 큐는 프로세싱 엘리먼트가 데이터라인에 접근하여 읽기 또는 쓰기를 하도록 할 수 있다. 일 실시예에 따라, 메모리 접근 장치는 도 4의 제1 AMA 커맨드 및 제2 AMA 커맨드를 순차적으로 입력 받을 수 있고, 순차적으로 제1 AMA 커맨드 및 제2 AMA 커맨드에 기초하여 동작할 수 있다. 또한, 프로세싱 엘리먼트 에 포함된 제1 프로세싱 엘리먼트는 도 4의 제1 PE 커맨드에 기초하여 동작할 수 있고, 프로세싱 엘리먼트 에 포함된 제2 프로세싱 엘리먼트는 도 4의 제2 PE 커맨드에 기초하여 동작할 수 있다. 먼저, 제1 AMA 커맨드에 기초하여 제1테이블(이하, ART0)이 설정될 수 있고, ART0의 'status'가 런(run) 으로 변경될 수 있다. 또한, ART0에 기초하여 제2테이블(이하, AMT0)이 설정될 수 있다. 또한, ART0의 'line_release_table'이 초기화될 수 있다. 예를 들어, 'line_release_table'의 각 비트가 1로 세팅될 수 있다. ART0는, 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달한 경우, 해당 데이터라인의 주소 정보를 AMT0로부터 전달 받아 'line_release_table'의 해당 데이터라인의 비트를 0으로 변경 할 수 있다. ART0의 'line_release_table'이 초기화될 때 제1 AMA 커맨드의 'spm_addr_base' 및 'spm_addr_offset'가 이용될 수 있다. 이어서, 메모리 접근 장치는 제1 AMA 커맨드에 포함된 메모리의 주소 정보와 외부 메모리의 주소 정 보, 및 ART0의 'art_id'에 기초하여 메모리 요청 패킷을 생성하고, 메모리 요청 패킷을 아웃 요청 큐에 전 달할 수 있다. 이 때, 메모리 요청 패킷에 포함된 메모리의 주소 정보는 제1 AMA 커맨드에 포함된 'num_fold_spm'에 따라 조정될 수 있다. 예를 들어, 수학식 1에 따라 메모리의 주소 정보가 조정될 수 있 다. 아웃 요청 큐에 의해 메모리 요청 패킷이 외부 메모리에 전달된 후, 외부 메모리로부터 응답(데이터 패 킷)이 메모리에 전달될 수 있고, 해당 데이터라인이 무효(invalid)이면 데이터 패킷의 ART0의 'art_id'를 기초로 'reuse_cnt'가 확인될 수 있다. 데이터 패킷이 데이터라인에 저장되면 해당 데이터라인의 상태가 무효 (invalid)에서 유효(valid)로 변경될 수 있다. 예를 들어, 제1 태그 영역의 값이 변경될 수 있다. 제1 프로세싱 엘리먼트는 데이터라인이 유효인 경우에만 해당 데이터라인에 접근할 수 있고, 이러한 과정은 인 요청 큐 에서 스케줄링될 수 있다. 데이터라인이 제1 프로세싱 엘리먼트에 의해 기 설정된 횟수만큼 접근된 경우, AMT0는 해당 데이터라인의 주소 정보를 ART0로 전달할 수 있고, 이 때 'make_invalid'에 따라 AMT0는 해당 데이터라인의 상태를 무효(invali d)로 변경할 수 있다. 또한, ART0의 'folding_cnt'가 0이 아닌 경우, 메모리 접근 장치는 메모리 요청 패킷을 생성하여 메모리에 전달할 수 있다. 데이터라인이 하나라도 릴리즈되는 경우, ART0의 'status'는 라 인 릴리즈로 변경될 수 있고, ART0의 'line_dep_art_id'가 있다면 해당 'art_id'를 갖는 제1테이블의 'status'가 런으로 변경될 수 있다. 다음으로, 제2 AMA 커맨드에 기초하여 제1테이블(이하, ART1)이 설정될 수 있고, ART0의 메모리의 주 소와 ART1의 주소가 겹친 경우, ART0의 'status'가 런이면, ART1의 'status'가 대기로 설정되고, ART0의 'line_dep_art_id'가 ART1의 ID로 설정될 수 있다. ART0의 'status'가 라인 릴리즈로 변경되면, ART1의 'status'가 런으로 변경될 수 있다. ART1의 'status'가 런인 경우, 메모리 접근 장치는 ART1의 'art_id'와 함께 메모리 요청 패킷을 생성하여 메모리에 전달할 수 있다. 메모리는 메모리 요청 패킷에 대응하는 응답(데이터 패킷)을 수신하고, 해 당 데이터라인의 상태가 무효이면 데이터 패킷의 ART1의 'art_id'를 기초로 'reuse_cnt'가 확인될 수 있다. 그 리고 데이터라인의 상태가 무효에서 유효로 변경되어, 제2 프로세싱 엘리먼트의 해당 데이터라인으로의 접근이 가능해질 수 있다. 해당 데이터라인의 상태가 유효이면, 해당 데이터라인에 대한 제1 AMA 커맨드에서의 사용이 끝나면 해당 데이터라인의 상태가 무효가 되고 이에 따라 데이터 패킷이 해당 데이터라인에 저장될 수 있다. ART1의 'line_release_table'의 모든 데이터라인에 대한 AMT1에서의 응답이 ART1으로 전달되면, ART1의 'status'는 무효로 변경될 수 있다. 다른 실시예에 따라, 메모리 접근 장치는 도 5의 AMA 커맨드에 기초하여 동작할 수 있고, 프로세싱 엘리먼 트는 도 5의 PE 커맨드에 기초하여 동작할 수 있다. 먼저, AMA 커맨드에 기초하여 제1테이블(이하, ART0)가 설정될 수 있고, ART0의 'status'가 런으로 변경될 수 있다. 또한, ART0에 기초하여 제2테이블(이하, AMT0)이 설정될 수 있다. AMA 커맨드의 'reques_type' 이 로딩 및 모니터링이 아니면, 데이터 영역의 적어도 일부를 유효(valid)로 변경하여 프로세싱 엘리먼트 가 적어도 일부에 접근하게 할 수 있다. 또한, ART0의 'line_release_table'이 초기화될 수 있다. 예를 들어, 'line_release_table'의 각 비트가 1로 세팅될 수 있다. ART0는, 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 접근 횟수에 도달한 경우, 해당 데이터라인의 주소 정보를 AMT0로부터 전달 받아 'line_release_table'의 해당 데이터라인의 비트를 0으로 변경할 수 있다. 이어서, 데이터라인이 제1 프로세싱 엘리먼트에 의해 기 설정된 횟수만큼 접근된 경우, AMT0는 해당 데이터라인 의 주소 정보를 ART0로 전달할 수 있고, 이 때 'make_invalid'에 따라 AMT0는 해당 데이터라인의 상태를 무효 (invalid)로 변경할 수 있다. 또한, ART0는, AMA 커맨드의 'request_type'이 모니터링 및 스토링이므로, 해당 데이터라인의 주소를 전달받을 수 있고, ART0의 'line_release_table'의 해당 주소에 대응하는 비트를 0으로 변 경할 수 있고, 해당 데이터라인의 메모리 쓰기 요청을 메모리에 전달할 수 있다. 이 때, AMA 커맨드의 'num_fold_mem'에 기초하여 외부 메모리의 주소 정보가 조정될 수 있다. 예를 들어, 수학식 2에 기초하여 외부 메모리의 주소 정보가 조정될 수 있다. ART0의 'line_release_table'의 모든 데이터라인에 대한 AMT0에서의 응 답이 ART0으로 전달되면, ART0의 'status'는 무효로 변경될 수 있다. 도 9는 전자 장치의 일 실시예를 나타낸다. 전자 장치는 PC(personal computer), 서버 디바이스, 모바일 디바이스, 임베디드 디바이스 등의 다양한 종류 의 디바이스들로 구현될 수 있다. 일 실시예에 따라, 전자 장치는 뉴럴 네트워크를 이용한 음성 인식, 영상 인식, 영상 분류 등을 수행하는 스마트폰, 태플릿 디바이스, AR(Augmented Reality) 디바이스, IoT(Internet of Things) 디바이스, 자율주행 자동차, 로보틱스, 의료기기 등에 해당될 수 있으나, 이에 제한되지 않는다. 전자 장치는 프로세서, 가속기, 및 메모리을 포함할 수 있다. 프로세서, 가속기, 및 메모리는 버스(Bus), NoC(Network on a Chip), PCIe(Peripheral Component Interconnect Express) 등 을 통하여 서로 통신할 수 있다. 도 9에 도시된 전자 장치는 본 실시예와 관련된 구성요소들만이 도시되어 있다. 따라서, 도 1에 도시된 구성요소들 외에 다른 범용적인 구성요소들이 더 포함될 수 있음을 본 실시예와"}
{"patent_id": "10-2023-0002439", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "관련된 기술분야에서 통상의 지식을 가진 자라면 이해할 수 있다. 프로세서는 전자 장치를 실행하기 위한 전반적인 기능들을 제어하는 역할을 한다. 예를 들어, 프로세서 는 전자 장치 내의 메모리에 저장된 하나 이상의 명령어 또는 적어도 하나의 프로그램을 실행함으 로써, 전자 장치를 전반적으로 제어한다. 프로세서는 전자 장치 내에 구비된 CPU(central processing unit), GPU(graphics processing unit), AP(application processor) 등으로 구현될 수 있으나, 이에 제한되지 않는다. 메모리는 전자 장치 내에서 처리되는 각종 데이터들을 저장하는 하드웨어로서, 예를 들어, 메모리(93 0)는 전자 장치에서 처리된 데이터들 및 처리될 데이터들을 저장할 수 있다. 또한, 메모리는 전자 장치 에 의해 구동될 애플리케이션들, 드라이버들 등을 저장할 수 있다. 또한, 메모리는 가속기에서 실 행할 커맨드, 뉴럴 네트워크의 파라미터들, 추론하고자 하는 입력 데이터 등을 저장할 수 있다. 메모리는 DRAM(dynamic random access memory), SRAM(static random access memory) 등과 같은 RAM(random access memory), ROM(read-only memory), EEPROM(electrically erasable programmable read-only memory), CD-ROM, 블루레이 또는 다른 광학 디스크 스토리지, HDD(hard disk drive), SSD(solid state drive), 또는 플래시 메모 리를 포함할 수 있다. 일 실시예에 따라, 메모리는 오프-칩 메모리일 수 있다. 가속기는 도 1 및 2의 가속기와 도 8의 가속기를 포함할 수 있다. 일 실시예에 따라, 가속기(92 0)는 복수의 가속기를 포함할 수 있다. 일 실시예에 따라, 프로세서는 뉴럴 네트워크에 기반한 추론 작업을 가속기에서 처리하기 위한 요청 을 수신하고, 이러한 요청에 응답하여 커맨드를 가속기로 전달할 수 있다. 가속기는 전달되는 커맨드 에 기초하여 뉴럴 네트워크를 실행하여 입력되는 데이터를 추론할 수 있다. 도 10은 일 실시예에 따른 메모리 접근 장치의 동작 방법을 나타낸다. 도 10의 동작 방법의 각 단계는 도 1 및 2의 메모리 접근 장치에 의해 수행될 수 있으므로, 도 1 및 2와 중복되는 내용에 대해서는 설명을 생략한다. 단계 S1010에서, 메모리 접근 장치는 제1 커맨드(command)에 기초하여 메모리의 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트(processing element)의 접근을 허용할 수 있다. 메모리는, 복수의 데이터라인들; 및 복 수의 데이터라인들 각각에 대응하는 제1 태그 영역 및 제2 태그 영역을 포함하고, 제1 태그 영역은 데이터라인 별로 프로세싱 엘리먼트의 접근에 대한 허용 여부를 나타내는 정보를 저장하고, 제2 태그 영역은 데이터라인 별 로 프로세싱 엘리먼트의 접근 횟수를 나타내는 정보를 저장할 수 있다. 메모리 접근 장치는 제1 태그 영역 의 정보를 변경하여, 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트(processing element)의 접근을 허용할 수 있다. 단계 S1020에서, 메모리 접근 장치는 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수를 확 인할 수 있다. 메모리 접근 장치는 제2 태그 영역을 모니터링하여 복수의 데이터라인 각각에 대한 제1 프 로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 단계 S1030에서, 메모리 접근 장치는 복수의 데이터라인 중 제1 데이터라인에 대한 제1 프로세싱 엘리먼트 의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제1 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 메모리 접근 장치는 복수의 데이터라인 중 제2 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 제2 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근 을 허용할 수 있다. 메모리 접근 장치는 외부 메모리의 제1 데이터 중 제1-1 데이터를 메모리의 복수의 데이터라인들 중 기 설 정된 개수의 데이터라인에 저장할 수 있다. 메모리 접근 장치는 기 설정된 개수의 데이터라인에 대한 프로 세싱 엘리먼트의 접근을 허용할 수 있다. 메모리 접근 장치는 기 설정된 개수의 데이터라인에 대한 프로세 싱 엘리먼트의 접근 횟수를 확인할 수 있다. 메모리 접근 장치는 기 설정된 개수의 데이터라인 각각에 대 한 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 횟수에 도달하는 경우, 제1 데이터 중 제1-2 데이터를 기 설정된 개수의 데이터라인에 저장하고, 기 설정된 개수의 데이터라인에 대한 프로세싱 엘리먼트의 접근을 허용 할 수 있다. 메모리 접근 장치는 메모리의 복수의 데이터라인에 저장된 제1 데이터 중 제1-1데이터를 외부 메모리의 복 수의 데이터라인 중 기 설정된 개수의 데이터라인에 저장할 수 있다. 메모리 접근 장치는 기 설정된 개수 의 데이터라인 각각에 대한 프로세싱 엘리먼트의 접근 횟수가 모두 기 설정된 횟수에 도달하는 경우, 제1 데이 터 중 제1-2 데이터를 기 설정된 개수의 데이터라인에 저장할 수 있다.메모리 접근 장치는 제1 커맨드에 기초하여 외부 메모리의 제1 데이터를 복수의 데이터라인에 저장할 수 있다. 메모리 접근 장치는 제1 데이터를 저장하는 복수의 데이터라인에 대한 제1 프로세싱 엘리먼트의 접 근을 허용할 수 있다. 메모리 접근 장치는 복수의 데이터라인 중 제1 데이터라인에 대한 제1 프로세싱 엘 리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 외부 메모리의 제2 데이터 중 일부 데이터를 제1 데이터라인에 저장할 수 있다. 메모리 접근 장치는 일부 데이터를 저장하는 제1 데이터 라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있다. 메모리 접근 장치는 복수의 데이터라인 중 제2 데이터라인에 대한 제1 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 커맨드에 기초하여 외부 메모리의 제2 데이터 중 다른 일부 데이터를 제2 데이터라인에 저장할 수 있다. 메모리 접근 장 치는 다른 일부 데이터를 저장하는 제2 데이터라인에 대한 제2 프로세싱 엘리먼트의 접근을 허용할 수 있 다. 메모리 접근 장치는 제3 커맨드에 기초하여, 메모리의 복수의 데이터라인에 대한 프로세싱 엘리먼트 (processing element)의 접근을 허용할 수 있다. 메모리 접근 장치는 복수의 데이터라인에 대한 프로세싱 엘리먼트의 접근 횟수를 확인할 수 있다. 메모리 접근 장치는 복수의 데이터라인 중 제1 데이터라인에 대 한 프로세싱 엘리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제1 데이터라인에 저장된 데이터를 외부 메모리에 저장할 수 있다. 메모리 접근 장치는 복수의 데이터라인 중 제2 데이터라인에 대한 프로세싱 엘 리먼트의 접근 횟수가 기 설정된 횟수에 도달하는 경우, 제2 데이터라인에 저장된 데이터를 외부 메모리에 저장 할 수 있다. 전술한 실시예들에 따른 장치는 프로세서, 프로그램 데이터를 저장하고 실행하는 메모리, 디스크 드라이브와 같 은 영구 저장부(permanent storage), 외부 장치와 통신하는 통신 포트, 터치 패널, 키(key), 버튼 등과 같은 사 용자 인터페이스 장치 등을 포함할 수 있다. 소프트웨어 모듈 또는 알고리즘으로 구현되는 방법들은 프로세서 상에서 실행 가능한 컴퓨터가 읽을 수 있는 코드들 또는 프로그램 명령들로서 컴퓨터가 읽을 수 있는 기록 매체 상에 저장될 수 있다. 여기서 컴퓨터가 읽을 수 있는 기록 매체로 마그네틱 저장 매체(예컨대, ROM(read-only memory), RAM(random-Access memory), 플로피 디스크, 하드 디스크 등) 및 광학적 판독 매체(예컨대, 시디롬 (CD-ROM), 디브이디(DVD: Digital Versatile Disc)) 등이 있다. 컴퓨터가 읽을 수 있는 기록 매체는 네트워크 로 연결된 컴퓨터 시스템들에 분산되어, 분산 방식으로 컴퓨터가 판독 가능한 코드가 저장되고 실행될 수 있다. 매체는 컴퓨터에 의해 판독가능하며, 메모리에 저장되고, 프로세서에서 실행될 수 있다. 본 실시 예는 기능적인 블록 구성들 및 다양한 처리 단계들로 나타내어질 수 있다. 이러한 기능 블록들은 특정 기능들을 실행하는 다양한 개수의 하드웨어 또는/및 소프트웨어 구성들로 구현될 수 있다. 예를 들어, 실시 예 는 하나 이상의 마이크로프로세서들의 제어 또는 다른 제어 장치들에 의해서 다양한 기능들을 실행할 수 있는, 메모리, 프로세싱, 로직(logic), 룩 업 테이블(look-up table) 등과 같은 직접 회로 구성들을 채용할 수 있다. 구성 요소들이 소프트웨어 프로그래밍 또는 소프트웨어 요소들로 실행될 수 있는 것과 유사하게, 본 실시 예는 데이터 구조, 프로세스들, 루틴들 또는 다른 프로그래밍 구성들의 조합으로 구현되는 다양한 알고리즘을 포함하 여, C, C++, 자바(Java), 어셈블러(assembler) 등과 같은 프로그래밍 또는 스크립팅 언어로 구현될 수 있다. 기능적인 측면들은 하나 이상의 프로세서들에서 실행되는 알고리즘으로 구현될 수 있다. 또한, 본 실시 예는 전자적인 환경 설정, 신호 처리, 및/또는 데이터 처리 등을 위하여 종래 기술을 채용할 수 있다. “매커니즘”, “요소”, “수단”, “구성”과 같은 용어는 넓게 사용될 수 있으며, 기계적이고 물리적인 구성 들로서 한정되는 것은 아니다. 상기 용어는 프로세서 등과 연계하여 소프트웨어의 일련의 처리들(routines)의 의미를 포함할 수 있다. 전술한 실시예들은 일 예시일 뿐 후술하는 청구항들의 범위 내에서 다른 실시예들이 구현될 수 있다. 도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10"}
{"patent_id": "10-2023-0002439", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시예에 따른 가속기를 나타낸다. 도 2는 다른 실시예에 따른 가속기를 나타낸다. 도 3은 메모리 접근 장치가 동작하는 제1 실시예를 나타낸다. 도 4는 메모리 접근 장치가 동작하는 제2 실시예를 나타낸다. 도 5은 메모리 접근 장치가 동작하는 제3 실시예를 나타낸다. 도 6은 메모리 접근 장치가 동작하는 제4 실시예를 나타낸다. 도 7은 메모리 접근 장치가 동작하는 제5 실시예를 나타낸다. 도 8은 또 다른 실시예에 따른 가속기를 나타낸다. 도 9는 전자 장치의 일 실시예를 나타낸다. 도 10은 일 실시예에 따른 메모리 접근 장치의 동작 방법을 나타낸다."}
