{"patent_id": "10-2020-0096333", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0015813", "출원번호": "10-2020-0096333", "발명의 명칭": "딥러닝 연산 수행 방법 및 장치", "출원인": "삼성전자주식회사", "발명자": "권형달"}}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "딥 러닝 연산을 수행하는 전자 장치에 있어서,복수의 연산 모드를 지원하는 프로세서를 포함하고,상기 프로세서는복수의 MAC(multiplier accumulator) 유닛들을 포함하는 시스톨릭 어레이; 및상기 복수의 연산 모드에 대응하여, 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들의 동작 및 상기 시스톨릭어레이에 포함된 상기 MAC 유닛들 사이의 데이터 이동을 제어하는 제어회로를 포함하는 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 제어회로는상기 복수의 연산 모드에 대응하여, 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들의 누산기(accumulator)의동작을 제어하는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 복수의 연산 모드는가산기 트리(adder tree) 모드, SIMD 모드, 시스톨릭 가산기 트리 모드 및 시스톨릭 모드 중 적어도 하나를 포함하는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,뎁스와이즈 컨볼루션(depthwise convolution) 연산은 상기 SIMD 모드로 수행되는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 제어회로는가산기 트리 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들중 어느 하나의 MAC 유닛의 누산기만 동작하도록 상기 MAC 유닛들의 동작을 제어하는, 딥 러닝 연산 수행 장치.공개특허 10-2022-0015813-3-청구항 6 제5항에 있어서,상기 제어회로는SIMD 모드 또는 시스톨릭 모드에 대응하여, 상기 어느 하나의 MAC 유닛에서 사용되지 않는 가산기가 동작하지않도록 상기 MAC 유닛들의 동작을 제어하는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 제어회로는SIMD 모드 또는 시스톨릭 모드에 대응하여 상기 시스톨릭 어레이에 포함된 모든 MAC 유닛들의 누산기를 동작하도록 상기 MAC 유닛들의 동작을 제어하는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 제어회로는가산기 트리 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 인접한 MAC 유닛으로부터 연산 결과를 수신하도록 상기 MAC 유닛들 사이의 상기 데이터 이동을 제어하는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,상기 시스톨릭 어레이는하나 이상의 로우(row)와 하나 이상의 컬럼(column)에 대응하는 위치에 상기 복수의 MAC 유닛들을 배치할 수 있도록 구성되는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 제어회로는시스톨릭 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 상기 시스톨릭 어레이의 입력 데이터를 상기 로우또는 상기 컬럼을 따라 상기 MAC 유닛들에 전달하도록 상기 MAC 유닛들 사이의 상기 데이터 이동을 제어하는,딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1항에 있어서,상기 제어회로는상기 MAC 유닛들 중 적어도 하나에 배치되어, 상기 MAC 유닛들 중 적어도 하나에 포함된 가산기의 입력을 결정하는 멀티플렉서공개특허 10-2022-0015813-4-를 포함하는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항에 있어서,상기 제어회로는상기 MAC 유닛들의 곱셈기의 출력을 입력 받는 가산기 트리 회로를 포함하는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,상기 가산기 트리 회로는상기 가산기 트리 회로를 구성하는 가산기들 사이에 플립플롭(flip-flop)이 삽입되는, 딥 러닝 연산 수행 장치."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제1 누산기(accumulator)의 출력 또는 이웃한 프로세싱 엘리먼트의 출력 중 어느 하나를 제1 가산기(adder)의입력으로 결정하는 제1 멀티플렉서(multiplexer)를 포함하는 제1 프로세싱 엘리먼트;미리 정해진 값 또는 제2 곱셈기의 출력 중 어느 하나를 제2 가산기의 입력으로 결정하는 제2 멀티플렉서를 포함하는 제2 프로세싱 엘리먼트; 및프로세싱 엘리먼트들의 출력과 제3 가산기의 출력의 합 또는 상기 제3 가산기의 출력 중 어느 하나를 제3 누산기의 입력으로 결정하는 제3 멀티플렉서를 포함하는 제3 프로세싱 엘리먼트중 적어도 하나로 구성되는 어레이."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,가산기 트리 모드에 대응하여,상기 제1 프로세싱 엘리먼트의 상기 제1 멀티플렉서는상기 이웃한 프로세싱 엘리먼트의 출력을 상기 제1 가산기의 입력으로 결정하고,상기 제2 프로세싱 엘리먼트의 상기 제2 멀티플렉서는상기 제2 곱셈기의 출력을 상기 제2 가산기의 입력으로 결정하고,상기 제3 프로세싱 엘리먼트의 상기 제3 멀티플렉서는상기 이웃한 프로세싱 엘리먼트들의 출력과 상기 제3 가산기의 출력의 합을 상기 제3 누산기의 입력으로 결정하는, 어레이."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서,상기 가산기 트리 모드에 대응하여,공개특허 10-2022-0015813-5-상기 제2 프로세싱 엘리먼트의 제2 누산기 및 상기 제3 프로세싱 엘리먼트의 상기 제3 누산기는 동작하지 않는,어레이."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제14항에 있어서,SIMD 모드에 대응하여상기 제1 프로세싱 엘리먼트의 상기 제1 멀티플렉서는상기 제1 누산기의 출력 을 상기 제1 가산기의 입력으로 결정하고,상기 제2 프로세싱 엘리먼트의 상기 제2 멀티플렉서는상기 미리 정해진 값을 상기 제2 가산기의 입력으로 결정하고,상기 제3 프로세싱 엘리먼트의 상기 제3 멀티플렉서는상기 제3 가산기의 출력을 상기 제3 누산기의 입력으로 결정하는, 어레이."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제14항에 있어서,상기 제3 프로세싱 엘리먼트는상기 이웃한 프로세싱 엘리먼트들의 출력을 더하는 제4 가산기; 및상기 제3 가산기의 출력과 상기 제4 가산기의 출력을 더하는 제5 가산기를 더 포함하는, 어레이."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서,SIMD 모드에 대응하여,상기 제3 프로세싱 엘리먼트의 상기 제4 가산기 및 상기 제3 프로세싱 엘리먼트의 상기 제5 가산기는 동작하지않는, 어레이."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "연산 모드 및 입력 데이터를 수신하는 단계;상기 연산 모드에 대응하여 시스톨릭 어레이에 포함된 MAC 유닛들의 동작 및 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들 사이의 데이터 이동을 제어하는 단계를 포함하는 딥 러닝 연산 수행 방법."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제20항에 있어서,상기 제어하는 단계는공개특허 10-2022-0015813-6-상기 연산 모드에 대응하여 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들의 누산기의 사용을 제어하는 단계를 포함하는, 딥 러닝 연산 수행 방법."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제20항에 있어서,상기 제어하는 단계는가산기 트리 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들중 어느 하나의 MAC 유닛의 누산기만 사용하도록 상기 MAC 유닛들의 동작을 제어하는 단계를 포함하는, 딥 러닝 연산 수행 방법."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제22항에 있어서,상기 제어하는 단계는SIMD 모드 또는 시스톨릭 모드에 대응하여, 상기 어느 하나의 MAC 유닛에서 사용되지 않는 가산기가 동작하지않도록 상기 MAC 유닛들의 동작을 제어하는 단계를 포함하는, 딥 러닝 연산 수행 방법."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제20항에 있어서,상기 제어하는 단계는SIMD 모드 또는 시스톨릭 모드에 대응하여 상기 시스톨릭 어레이에 포함된 모든 MAC 유닛들의 누산기를 동작하도록 상기 MAC 유닛들의 동작을 제어하는 단계를 포함하는, 딥 러닝 연산 수행 방법."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_25", "content": "제20항에 있어서,상기 제어하는 단계는가산기 트리 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 인접한 MAC 유닛으로부터 연산 결과를 수신하도록 상기 MAC 유닛들 사이의 상기 데이터 이동을 제어하는 단계를 포함하는, 딥 러닝 연산 수행 방법."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_26", "content": "제20항에 있어서,상기 제어하는 단계는시스톨릭 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 상기 시스톨릭 어레이의 입력 데이터를 로우 또는컬럼을 따라 상기 MAC 유닛들에 전달하도록 상기 MAC 유닛들 사이의 상기 데이터 이동을 제어하는 단계공개특허 10-2022-0015813-7-를 포함하는, 딥 러닝 연산 수행 방법."}
{"patent_id": "10-2020-0096333", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_27", "content": "하드웨어와 결합되어 제20항 내지 제26항 중 어느 하나의 항의 방법을 실행시키기 위하여 매체에 저장된 컴퓨터프로그램."}
{"patent_id": "10-2020-0096333", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "딥러닝 연산 수행 방법 및 장치가 개시된다. 딥러닝 연산 수행 장치는 복수의 연산 모드를 지원하는 프로세서를 포함하고, 프로세서는 복수의 MAC(multiplier accumulator) 유닛들을 포함하는 시스톨릭 어레이 및 복수의 연산 모드에 대응하여, 시스톨릭 어레이에 포함된 MAC 유닛들의 동작 및 시스톨릭 어레이에 포함된 MAC 유닛들 사이의 데이터 이동을 제어하는 제어회로를 포함한다."}
{"patent_id": "10-2020-0096333", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래 실시예들은 딥러닝 연산 수행 방법 및 장치에 관한 것으로, 구체적으로는 가산기 트리 기능을 포함한 시스 톨릭 어레이(Systolic Array)를 이용하여 여러 종류의 딥러닝 연산에서 MAC(multiplier accumulator)의 이용 효율을 높이는 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2020-0096333", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 애플리케이션은 서버와 클라이언트 사이의 네트워크 연결에 의한 정교하지만 반응이 느린 서비스가 대 부분이다. 이는 딥 러닝의 핵심 알고리즘인 인공 신경망의 컴퓨팅이 일반적인 AP(application processor)에 비 해 1000배 이상의 수준의 컴퓨팅을 요구하기 때문이다. 이러한 높은 계산적 요구를 에너지 효율적으로 구현하기 위한 아키텍처(architecture)를 개시한다."}
{"patent_id": "10-2020-0096333", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 딥러닝 연산 수행 장치는 복수의 연산 모드를 지원하는 프로세서를 포함하고, 상기 프로세서 는 복수의 MAC(multiplier accumulator) 유닛들을 포함하는 시스톨릭 어레이; 및 상기 복수의 연산 모드에 대응 하여, 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들의 동작 및 상기 시스톨릭 어레이에 포함된 상기 MAC 유 닛들 사이의 데이터 이동을 제어하는 제어회로를 포함한다. 상기 제어회로는 상기 복수의 연산 모드에 대응하여, 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들의 누산기 (accumulator)의 동작을 제어할 수 있다. 상기 복수의 연산 모드는 가산기 트리(adder tree) 모드, SIMD 모드, 시스톨릭 가산기 트리 모드 및 시스톨릭 모드 및 중 적어도 하나를 포함할 수 있다. 뎁스와이즈 컨볼루션(depthwise convolution) 연산은 상기 SIMD 모드로 수행될 수 있다. 상기 제어회로는 가산기 트리 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들 중 어느 하나의 MAC 유닛의 누산기만 동작하도록 상기 MAC 유닛들의 동작을 제어할 수 있다. 상기 제어회로는 SIMD 모드 또는 시스톨릭 모드에 대응하여, 상기 어느 하나의 MAC 유닛에서 사용되지 않는 가 산기가 동작하지 않도록 상기 MAC 유닛들의 동작을 제어할 수 있다. 상기 제어회로는 SIMD 모드 또는 시스톨릭 모드에 대응하여 상기 시스톨릭 어레이에 포함된 모든 MAC 유닛들의 누산기를 동작하도록 상기 MAC 유닛들의 동작을 제어할 수 있다. 상기 제어회로는 가산기 트리 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 인접한 MAC 유닛으로부터 연산 결과를 수신하도록 상기 MAC 유닛들 사이의 상기 데이터 이동을 제어할 수 있다.상기 시스톨릭 어레이는 하나 이상의 로우(row)와 하나 이상의 컬럼(column)에 대응하는 위치에 상기 복수의 MAC 유닛들을 배치할 수 있도록 구성될 수 있다. 상기 제어회로는 시스톨릭 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 상기 시스톨릭 어레이의 입력 데이 터를 상기 로우 또는 상기 컬럼을 따라 상기 MAC 유닛들에 전달하도록 상기 MAC 유닛들 사이의 상기 데이터 이 동을 제어할 수 있다. 상기 제어회로는 상기 MAC 유닛들 중 적어도 하나에 배치되어, 상기 MAC 유닛들 중 적어도 하나에 포함된 가산 기의 입력을 결정하는 멀티플렉서를 포함할 수 있다. 상기 제어회로는 상기 MAC 유닛들의 곱셈기의 출력을 입력 받는 가산기 트리 회로를 포함할 수 있다. 상기 가산기 트리 회로는 상기 가산기 트리 회로를 구성하는 가산기들 사이에 플립플롭(flip-flop)이 삽입될 수 있다. 일 실시예에 따른 어레이는 제1 누산기(accumulator)의 출력 또는 이웃한 프로세싱 엘리먼트의 출력 중 어느 하 나를 제1 가산기(adder)의 입력으로 결정하는 제1 멀티플렉서(multiplexer)를 포함하는 제1 프로세싱 엘리먼트; 미리 정해진 값 또는 제2 곱셈기의 출력 중 어느 하나를 제2 가산기의 입력으로 결정하는 제2 멀티플렉서를 포 함하는 제2 프로세싱 엘리먼트; 및 프로세싱 엘리먼트들의 출력과 제3 가산기의 출력의 합 또는 상기 제3 가산 기의 출력 중 어느 하나를 제3 누산기의 입력으로 결정하는 제3 멀티플렉서를 포함하는 제3 프로세싱 엘리먼트 중 적어도 하나로 구성될 수 있다. 가산기 트리 모드에 대응하여, 상기 제1 프로세싱 엘리먼트의 상기 제1 멀티플렉서는 상기 이웃한 프로세싱 엘 리먼트의 출력을 상기 제1 가산기의 입력으로 결정하고, 상기 제2 프로세싱 엘리먼트 의 상기 제2 멀티플렉서는 상기 제2 곱셈기의 출력을 상기 제2 가산기의 입력으로 결정하고, 상기 제3 프로세싱 엘리먼트의 상기 제3 멀티 플렉서는 상기 이웃한 프로세싱 엘리먼트들의 출력과 상기 제3 가산기의 출력의 합을 상기 제3 누산기의 입력으 로 결정할 수 있다. 상기 가산기 트리 모드에 대응하여, 상기 제2 프로세싱 엘리먼트의 제2 누산기 및 상기 제3 프로세싱 엘리먼트 의 상기 제3 누산기는 동작하지 않을 수 있다. SIMD 모드에 대응하여 상기 제1 프로세싱 엘리먼트의 상기 제1 멀티플렉서는 상기 제1 누산기의 출력 을 상기 제1 가산기의 입력으로 결정하고, 상기 제2 프로세싱 엘리먼트의 상기 제2 멀티플렉서는 상기 미리 정해진 값을 상기 제2 가산기의 입력으로 결정하고, 상기 제3 프로세싱 엘리먼트의 상기 제3 멀티플렉서는 상기 제3 가산기 의 출력을 상기 제3 누산기의 입력으로 결정할 수 있다. 상기 제3 프로세싱 엘리먼트는 상기 이웃한 프로세싱 엘리먼트들의 출력을 더하는 제4 가산기; 및 상기 제3 가 산기의 출력과 상기 제4 가산기의 출력을 더하는 제5 가산기를 더 포함할 수 있다. SIMD 모드에 대응하여, 상기 제3 프로세싱 엘리먼트의 상기 제4 가산기 및 상기 제3 프로세싱 엘리먼트의 상기 제5 가산기는 동작하지 않을 수 있다. 일 실시예에 따른 딥 러닝 연산 수행 방법은 연산 모드 및 입력 데이터를 수신하는 단계; 상기 연산 모드에 대 응하여 시스톨릭 어레이에 포함된 MAC 유닛들의 동작 및 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들 사이 의 데이터 이동을 제어하는 단계를 포함한다. 상기 제어하는 단계는 상기 연산 모드에 대응하여 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들의 누산기의 사용을 제어하는 단계를 포함할 수 있다. 상기 제어하는 단계는 가산기 트리 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 상기 시스톨릭 어레이에 포함된 상기 MAC 유닛들 중 어느 하나의 MAC 유닛의 누산기만 사용하도록 상기 MAC 유닛들의 동작을 제어하는 단계를 포함할 수 있다. 상기 제어하는 단계는 SIMD 모드 또는 시스톨릭 모드에 대응하여, 상기 어느 하나의 MAC 유닛에서 사용되지 않 는 가산기가 동작하지 않도록 상기 MAC 유닛들의 동작을 제어하는 단계를 포함 포함할 수 있다. 상기 제어하는 단계는 SIMD 모드 또는 시스톨릭 모드에 대응하여 상기 시스톨릭 어레이에 포함된 모든 MAC 유닛 들의 누산기를 동작하도록 상기 MAC 유닛들의 동작을 제어하는 단계를 포함할 수 있다. 상기 제어하는 단계는 가산기 트리 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 인접한 MAC 유닛으로부터 연산 결과를 수신하도록 상기 MAC 유닛들 사이의 상기 데이터 이동을 제어하는 단계를 포함할 수 있다. 상기 제어하는 단계는 시스톨릭 모드 또는 시스톨릭 가산기 트리 모드에 대응하여 상기 시스톨릭 어레이의 입력 데이터를 로우 또는 컬럼을 따라 상기 MAC 유닛들에 전달하도록 상기 MAC 유닛들 사이의 상기 데이터 이동을 제 어하는 단계를 포함할 수 있다."}
{"patent_id": "10-2020-0096333", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에서 개시되어 있는 특정한 구조적 또는 기능적 내용들은 단지 기술적 개념에 따른 실시예들을 설명하 기 위한 목적으로 예시된 것으로서, 다양한 다른 형태로 실시될 수 있으며 설명된 구조 또는 기능에 한정되지 않는다. 제1 또는 제2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 이해되어야 한다. 예를 들어 제1 구성요소는 제2 구성요소로 명명 될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이 해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있 다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 구성요소들 간의 관계를 설명하는 표현들, 예를 들어 \"~간의에\"와 \"바로~간의에\" 또는 \"~에 이웃하는\"과 \"~에 직접 이웃하는\" 등 도 마찬가지로 해석되어야 한다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 설시된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되 는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로 해석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 실시예들은 데이터 센터, 서버, 퍼스널 컴퓨터, 랩톱 컴퓨터, 태블릿 컴퓨터, 스마트 폰, 텔레비전, 스마트 가 전 기기, 지능형 자동차, 키오스크, 웨어러블 장치 등 다양한 형태의 제품으로 구현될 수 있다. 이하, 실시예 들을 첨부된 도면을 참조하여 상세하게 설명한다. 각 도면에 제시된 동일한 참조 부호는 동일한 부재를 나타낸 다. 도 1a는 인공 신경망(Artificial Neural Network) 모델을 설명하기 위한 도면이고, 도 1b는 가산기 트리(adder tree) 구조를 이용한 딥 러닝 연산 방법을 설명하기 위한 도면이며, 도 1c는 복수의 MAC 유닛들을 포함하는 SIMD 구조를 이용한 딥 러닝 연산 방법을 설명하기 위한 도면이다. 딥 러닝(Deep Learning) 기법을 포함하는 인공지능(AI) 알고리즘은 인공 신경망(Artificial Neural Network)에 입력 데이터를 입력시키고, 컨볼루션 등의 연산을 통해 출력 데이터를 학습하고, 학습된 인공 신경망을 이용하 여 특징을 추출할 수 있다. 인공 신경망은 생물학적 뇌를 모델링한 컴퓨터 과학적 아키텍쳐(Computational Architecture)를 의미할 수 있다. 인공 신경망 내에서, 뇌의 뉴런들에 해당되는 노드들은 서로 연결되어 있고, 입력 데이터를 처리하기 위하여 집합적으로 동작한다. 다양한 종류의 인공 신경망들을 예로 들면, 컨볼루션 뉴 럴 네트워크(CNN; Convolutional Neural Network), 회귀 뉴럴 네트워크(RNN; Recurrent Neural Network), 딥 빌리프 네트워크(DBN; Deep Belief Network), 제한된 볼츠만 기계(Restricted Boltzman Machine, RBM) 방식 등 이 있고, 이에 제한되지 않는다. 피드-포워드(feed-forward) 인공 신경망에서, 인공 신경망의 뉴런들은 다른 뉴런들과의 연결들(links)을 갖는다. 이와 같은 연결들은 인공 신경망을 통해, 한방향으로, 예를 들어 순방향 (forward direction)으로 확장될 수 있다. 여러 종류의 인공 신경망들 중에서, 컨볼루션 신경망은 입력 데이터로부터 특징들(features)을 추출하기 위해 이용될 수 있다. 일 예로, 컨볼루션 신경망은 입력 영상으로부터 테두리, 선 색 등과 같은 시각적 특징들을 추 출할 수 있다. 컨볼루션 신경망은 복수의 레이어를 포함할 수 있으며, 각각의 레이어는 입력 데이터를 수신하 고 처리하여 해당 레이어에서 출력되는 데이터를 생성할 수 있다. 레이어에서 출력되는 데이터는, 컨볼루션 신 경망에 입력된 이미지 또는 입력된 특징 맵(Feature Map)을 필터(filter)의 웨이트(weight) 값과 컨볼루션 연산 하여 생성한 특징 맵 일 수 있다. 컨볼루션 신경망의 초기 레이어들은 입력으로부터 에지들 또는 그레디언트들 과 같은 단순한 특징들을 추출하고, 컨볼루션 신경망의 후속 레이어들은 이미지 내의 눈, 코 등과 같은 점진적 으로 더 복잡한 특징들을 추출할 수 있다. 도 1a의 도면을 참조하면, 일 실시예에 따른 컨볼루션 연산은 (8, 8) 크기를 갖고 3개의 입력 채널로 구성 된 입력 특징 맵과 (3, 3) 크기를 갖고 3개의 채널로 구성된 필터와의 곱셈 및 덧셈 연산을 하여 (6, 6) 크기를 갖고 1개의 채널로 구성된 출력 특징 맵을 생성하는 과정을 포함할 수 있다. 실시예에서, 데이 터의 크기는 (폭, 높이) 및 채널의 수로 정의될 수 있다, 도면을 참조하면, 뎁스와이즈(depthwise) 컨볼루션 연산은 동일 채널 내에서만 컨볼루션 연산을 수행하며, 이를 통해 각 채널의 공간적 특징(spatial feature)을 추출할 수 있다. 뎁스와이즈 컨볼루션 연산은 (8, 8) 크 기를 갖고 3개의 입력 채널로 구성된 입력 특징 맵과 (3, 3) 크기를 갖는 3개의 필터(124, 125, 126)를 각 입력 채널 별로 컨볼루션 연산을 수행하여, 각 입력 채널에 대응하는 출력 값(127, 128, 129)을 포함하는 (6, 6) 크기를 갖고 3개의 출력 채널(127, 128, 129)로 구성된 출력 특징 맵을 생성하는 과정을 포함할 수 있 다. 예를 들어, 제1 입력 채널의 입력 특징맵과 제1 필터와의 곱셈 및 덧셈 연산을 하여 1 출력 채 널의 출력 특징맵이 생성되고, 마찬가지로 제2 입력 채널의 입력 특징맵 및 제 3 입력 채널의 입력 특징맵과 각각 제2 필터 및 제3 필터 과의 곱셈 및 덧셈 연산을 하여 대응하는 출력 채널의 출 력 특징맵(128, 129)이 생성될 수 있다.도 1b를 참조하면, 딥 러닝 연산 수행 장치는 컨볼루션 연산 수행에 있어서, 저전력 구동을 위하여 가산기 트리 (adder tree) 구조를 사용할 수 있다. 가산기 트리 구조는 두 데이터의 곱을 계산하는 복수의 곱셈기, 인접한 두 곱셈기의 출력의 합 또는 인접한 두 가산기의 합을 계산하는 가산기 및 최종 출력 데이터를 누적 합산하는 하나의 누산기(accumulator)를 포함할 수 있다. 가산기 트리 구조는 적은 수의 누산기(예를 들어, 하나의 누산 기)만을 사용하기 때문에, 저전력으로 컨볼루션 연산을 수행할 수 있다. 예를 들어, 가산기 트리 구조는 (5, 5) 크기를 갖고 4개의 입력 채널로 구성된 입력 특징 맵에서, 제1 입 력 채널의 입력 특징 맵의 9개 데이터(0, 1, 2, 5, 6, 7, 10, 11, 12)와 (3, 3) 크기를 갖는 4개의 필터 들에서, 제1 필터의 웨이트 값(weight)(0 내지 8) 사이의 컨볼루션 연산을 수행할 수 있다. 가산기 트리 구조의 곱셈기는 제1 입력 채널의 입력 특징 맵의 각 데이터와 제1 필터의 각 웨이트 값의 곱을 계산하고, 트리 구조의 가산기는 곱셈기의 출력 값들, 즉 0*0, 1*1, 2*2, 5*3, 6*4, 7*5, 10*6, 11*7, 12*8을 누적하여 합산할 수 있다. 일반적인 컨볼루션 연산은 각 입력 채널의 입력 특징맵들의 출력 값을 누적하여 합산하여 계산하기 때문에, 입 력 특징 맵과 필터의 컨볼루션 연산에 사용되지 않는 곱셈기들을 이용하여 다른 입력 채널의 입 력 특징맵에 대한 컨볼루션 연산을 수행할 수 있다. 그러나, 뎁스와이즈 컨볼루션 연산은 각 입력 채널의 입력 특징맵 별로 컨볼루션 연산을 수행하기 때문에, 가산기 트리 구조를 이용하여 뎁스와이즈 컨볼루션 연산을 수행 하는 경우 곱셈기들은 사용되지 않게 되어 자원 이용 효율(resource utilization)이 낮아질 수 있다. 또한, 가산기 트리 구조를 이용한 컨볼루션 연산은 긴 데이터 경로(data path)로 인하여 딥 러닝 연산 수행 장 치가 낮은 클럭 주파수(clock frequency)에서 동작할 수 있다. 따라서, 가산기 트리 구조는 일반적인 컨볼루션 연산 수행에는 적합하나 뎁스와이즈 컨볼루션 연산과 같이 데이터의 병렬 처리 연산에는 적합하지 않을 수 있다. 나아가, 가산기 트리 구조를 이용하여 7x1, 1x7, 3x1, 1x3 등 비대칭 필터를 이용한 비대칭 컨볼루션 연 산을 수행하는 경우에도 자원 이용 효율이 낮아질 수 있다. 도 1c를 참조하면, 딥 러닝 연산 수행 장치는 복수의 MAC 유닛들을 포함하는 SIMD(Single Instruction Multiple Data) 구조를 이용하여 뎁스와이즈 컨볼루션 연산을 수행할 수 있다. SIMD 구조는 동일한 동작을 하는 많은 프로세싱 엘리먼트(PE; Processing Element)들(191, 192, 193, 194)로 이루어져 있으며, 각 프로세싱 엘리먼트에 입력 데이터를 입력함으로써 동시에 많은 연산을 할 수 있다. SIMD 구조의 각 프로세싱 엘리먼트는 ACC = ACC + (A x B) 연산을 수행하는 MAC(multiplier accumulator) 유닛으로 구성될 수 있다. SIMD 구조에서 MAC 유닛마다 누산기가 있기 때문에, 각 채널 별로 컨볼루션 연산을 수행하는 뎁스와이즈 컨볼루 션 연산 수행에 적합할 수 있다. 예를 들어, SIMD 구조의 프로세싱 엘리먼트들(191, 192, 193, 194) 각각은 (5, 5) 크기를 갖고 4개의 입력 채널로 구성된 입력 특징 맵들(171, 172, 173, 174)과 (3, 3) 크기를 갖는 필 터들(181, 182, 183, 184) 사이의 뎁스와이즈 컨볼루션 연산을 수행할 수 있다. 구체적으로 프로세싱 엘리먼트 는 입력 특징 맵과 필터 사이의 컨볼루션 연산을, 프로세싱 엘리먼트는 입력 특징 맵(17 2)과 필터 사이의 컨볼루션 연산을, 프로세싱 엘리먼트는 입력 특징 맵과 필터 사이의 컨 볼루션 연산을, 프로세싱 엘리먼트는 입력 특징 맵과 필터 사이의 컨볼루션 연산을 수행할 수 있다. 또한, SIMD 구조는 연산의 데이터 경로가 짧기 때문에 높은 클럭 주파수에서 동작할 수 있다 그러나, SIMD 구조는 모든 MAC 유닛에서 누산기를 필요로 하기 때문에 전력 소모가 많을 수 있다. 예를 들어, 가산기 트리 구조를 이용하여 일반적인 컨볼루션 연산을 수행하는 경우에는 하나의 누산기만 있으면 충분하지만, SIMD 구조를 이용하여 일반적인 컨볼루션 연산을 수행하는 경우에는 모든 누산기가 동작하게 되어 전력 효율이 떨어질 수 있다. 따라서, SIMD 구조는 뎁스와이즈 컨볼루션 연산과 같이 데이터의 병렬 처리 연산 에는 적합하나 일반적인 컨볼루션 연산 수행에는 적합하지 않을 수 있다. 전술한 바와 같이, 가산기 트리 구조는 일반적인 컨볼루션 연산 수행에는 적합하나 비대칭 필터를 이용한 비대 칭 컨볼루션 연산 및 뎁스와이즈 컨볼루션 연산과 같은 데이터의 병렬 처리 연산에는 적합하지 않을 수 있고, 반대로 SIMD 구조는 뎁스와이즈 컨볼루션 연산과 같이 데이터의 병렬 처리 연산에는 적합하나 일반적인 컨볼루 션 연산 수행에는 적합하지 않을 수 있다. 아래에서 상세히 설명하겠지만, 일 실시예에 따른 딥 러닝 연산 수행 장치는 인접한 MAC 유닛들의 입력 및/또는 출력이 파이프라이닝 되는 구조의 시스톨릭 어레이를 이용하여 복수의 연산 모드를 지원할 수 있다. 이로 인하 여, 딥 러닝 연산 수행 장치는 연산 처리 속도 및 전력 효율을 동시에 달성하는 기술을 제공할 수 있다. 도 2는 일 실시예에 따른 딥 러닝 연산 수행 방법을 설명하기 위한 순서도이다. 도 2를 참조하면, 일 실시예에 따른 단계들(210 내지 220)은 전술한 딥 러닝 연산 수행 장치에 의해 수행될 수 있다. 일 실시예에 따른 딥 러닝 연산 수행 장치는 하나 또는 그 이상의 하드웨어 모듈, 하나 또는 그 이상의 소프트웨어 모듈, 또는 이들의 다양한 조합에 의하여 구현될 수 있다. 단계에서, 딥 러닝 연산 수행 장치는 연산 모드 및 입력 데이터를 수신한다. 딥 러닝 연산 수행 장치는 연산 모드를 선택할 수 있도록 구현될 수 있으며, 연산 모드는 가산기 트리 모드, 시스톨릭 가산기 트리 모드, SIMD 모드 및/또는 시스톨릭 모드를 포함할 수 있다. 단계에서, 딥 러닝 연산 수행 장치는 연산 모드에 대응하여 시스톨릭 어레이에 포함된 MAC 유닛들의 동작 및 MAC 유닛들 사이의 데이터 이동을 제어한다. 딥 러닝 연산 수행 장치는 수신한 연산 모드에 대응하는 연산 을 할 수 있다. 예를 들어, 딥 러닝 연산 수행 장치는 가산기 트리 모드로 동작하여 일반적인 컨볼루션 연산을 수행할 수 있고, 또는 SIMD 모드로 동작하여 뎁스와이즈 컨볼루션 연산을 수행할 수도 있다. 보다 구체적으로, 딥 러닝 연산 수행 장치는 특정 연산에 가장 적합한 모드로 동작할 수 있도록 시스톨릭 어레 이에 포함된 MAC 유닛들의 동작을 제어할 수 있다. 예를 들어, 가산기 트리 모드로 동작하는 딥 러닝 연산 수 행 장치는 시스톨릭 어레이에 포함된 MAC 유닛들 중 어느 하나의 MAC 유닛의 누산기만 사용하도록 MAC 유닛들의 동작을 제어하여 일반적인 컨볼루션 연산을 수행할 수 있다. SIMD 모드로 동작하는 딥 러닝 연산 수행 장치는 시스톨릭 어레이에 포함된 모든 MAC 유닛들의 누산기를 사용하도록 MAC 유닛들의 동작을 제어하여 뎁스와이즈 컨볼루션 연산과 같은 데이터의 병렬 처리 연산을 수행할 수 있다. 또한, 딥 러닝 연산 수행 장치는 시스톨릭 어레이에 포함된 MAC 유닛들 사이의 데이터 이동을 제어할 수 있다. 예를 들어, 가산기 트리 모드로 동작하는 딥 러닝 연산 수행 장치는 인접한 MAC 유닛으로부터 연산 결과를 수신 하도록 MAC 유닛들 사이의 데이터 이동을 제어할 수 있다. 아래에서 상세하게 설명하겠으나, 시스톨릭 가산기 트리 모드로 동작하는 딥러닝 연산 수행 장치는 가산기 트리 모드의 동작을 수행하면서, 시스톨릭 어레이의 입력 데이터를 컬럼을 따라 배치된 MAC 유닛들에 파이프라이닝 방식으로 전달하도록 MAC 유닛들 사이의 데이터 이동을 제어할 수 있다. 또한, 시스톨릭 모드로 동작하는 딥 러닝 연산 수행 장치는 시스톨릭 어레이의 입력 데이터를 로우 또는 컬럼을 따라 MAC 유닛들에 전달하도록 MAC 유닛들 사이의 데이터 이동을 제어할 수 있다. 전술한 바와 같이, 딥 러닝 연산 수행 장치는 복수의 연산 모드를 지원하고, 해당 연산 모드에 맞는 연산을 수 행할 수 있다. 아래에서, 딥 러닝 연산 수행 장치의 구체적인 구조를 설명한다. 도 3은 일 실시예에 따른 딥 러닝 연산 수행 장치의 구조를 설명하기 위한 도면이다. 도 3을 참조하면, 일 실시예에 따른 딥 러닝 연산 수행 장치는 복수의 연산 모드를 지원하는 프로세서를 포함한다. 프로세서는 복수의 프로세싱 엘리먼트들을 포함하며, 프로세싱 엘리먼트들은 MAC 유닛들 로 구성될 수 있다. 프로세서는 MAC 유닛들에 대응하는 셀들이 어레이 구조로 배열된 셀 어레이 구 조를 가질 수 있으며, 특히 인접한 MAC 유닛들이 서로 연결되는 시스톨릭 어레이 구조를 가질 수 있다. 프로세서는 시스톨릭 어레이에 포함된 MAC 유닛들의 동작 및 복수의 연산 모드에 대응하여 시스톨릭 어레이에 포함된 MAC 유닛들 사이의 데이터 이동을 제어하는 제어회로를 포함할 수 있다. 제어회로 는 컨트롤 경로(control path)를 통하여 MAC 유닛들을 제어할 수 있다. 다만, 도 3에 도시된 딥 러닝 연 산 수행 장치는 예시적인 사항일 뿐, MAC 유닛의 수나 컨트롤 경로 등 구체적인 구조들은 변경될 수 있다. 딥 러닝 연산 수행 장치는 제어회로를 이용하여 복수의 연산 모드를 지원할 수 있다. 제어회로는 복 수의 연산 모드에 대응하여, 시스톨릭 어레이에 포함된 MAC 유닛들의 누산기의 동작을 제어할 수 있다. 예를 들어, 제어회로는 가산기 트리 모드에 대응하여 시스톨릭 어레이에 포함된 MAC 유닛들 중 어느 하나의 MAC 유닛의 누산기만 동작하도록 MAC 유닛들의 동작을 제어할 수 있다. 가산기 트리 모드로 동작하는 딥러닝 연산 수행 장치의 구체적인 동작은 아래에서 도 4a의 딥 러닝 연산 수행 장치을 참조하여 설명된다. 또한, 제어회로는 SIMD 모드에 대응하여 시스톨릭 어레이에 포함된 모든 MAC 유닛들의 누산기를 동작하도록 MAC 유 닛들의 동작을 제어할 수 있다. SIMD 모드로 동작하는 딥러닝 연산 수행 장치의 구체적인 동작은 아래에서 도 4a의 딥 러닝 연산 수행 장치을 참조하여 설명된다. 도 4a 내지 도 4c는 일 실시예에 따른 가산기 트리 모드 및 SIMD 모드를 제공하는 딥 러닝 연산 수행 장치의 구 체적인 예시를 설명하기 위한 도면이다. 도 4a를 참조하면, 딥 러닝 연산 수행 장치는 가산기 트리 모드 또는 SIMD 모드로 동작할 수 있다. 예를 들어, 딥 러닝 연산 수행 장치는 제어신호 '0'이 입력되는 경우는 가산기 트리 모드로, 제어신호 '1'이 입 력되는 경우는 SIMD 모드로 동작할 수 있다. 제어회로는 MAC 유닛들에 배치되어, 가산기의 입력을 결정하는 멀티플렉서(MUX)를 포함할 수 있다. 딥 러닝 연 산 수행 장치는 멀티플렉서를 이용하여 MAC 유닛들 사이의 데이터 이동을 제어할 수 있다. 예를 들어, 멀 티플렉서는 MAC 유닛들 각각에 배치될 수도 있고, 일부의 MAC 유닛에만 배치될 수도 있다. 멀티플렉서가 일부 의 MAC 유닛에만 배치되는 경우, 특정 멀티플렉서는 복수의 MAC 유닛을 함께 제어할 수도 있다. 도 4a의 딥 러닝 연산 수행 장치는 복수의 프로세싱 엘리먼트들(401 내지 408)로 구성될 수 있다. 프로세 싱 엘리먼트들(401 내지 408) 각각은 MAC 유닛과 제어회로로 구성될 수 있고, 프로세싱 엘리먼트의 종류에 따라 각기 다른 제어회로로 구성될 수 있다. 복수의 모드에 따른 딥러닝 수행장치의 동작을 설명하기에 앞서, 도 4b 를 참조하여 도 4a의 어레이를 구성하는 프로세싱 어레이의 종류를 설명한다. 도 4b를 참조하면, 일 실시예에 따른 딥 러닝 연산 수행 장치는 제1 프로세싱 엘리먼트, 제2 프로세 싱 엘리먼트 및/또는 제3 프로세싱 엘리먼트의 조합으로 구성될 수 있다. 제1 프로세싱 엘리먼트는 MAC 유닛을 구성하는 제1 곱셈기, 제1 가산기 및 제1 누산기와 제어회로를 구성하는 제1 멀티플렉서, 제1 AND 게이트를 포함하여 구성될 수 있다. 제1 멀티플렉서는 제1 누산기의 출력 또는 이웃한 프로세싱 엘리먼트의 출력 중 어느 하나를 제1 가 산기의 입력으로 결정할 수 있다. 가산기 트리 모드로 동작하는 경우(예를 들어, 제어신호 '0'이 입력되 는 경우) 제1 멀티플렉서는 이웃한 프로세싱 엘리먼트의 출력을 제1 가산기의 입력으로 결정하고, SIMD 모드로 동작하는 경우(예를 들어, 제어신호 '1'이 입력되는 경우) 제1 멀티플렉서는 1 누산기의 출력을 제1 가산기의 입력으로 결정할 수 있다. 제2 프로세싱 엘리먼트는 가장자리에 위치한 프로세싱 엘리먼트로, MAC 유닛을 구성하는 제2 곱셈기, 제2 가산기 및 제2 누산기와 제어회로를 구성하는 제2 멀티플렉서 및 제2 AND 게이트를 포 함하여 구성될 수 있다. 제2 멀티플렉서는 미리 정해진 값(예를 들어, '0') 또는 제2 곱셈기의 출력 중 어느 하나를 제2 가산 기의 입력으로 결정할 수 있다. 가산기 트리 모드로 동작하는 경우(예를 들어, 제어신호 '0'이 입력되는 경우) 제2 멀티플렉서는 미리 정해진 값(예를 들어, '0')을 제2 가산기의 입력으로 결정하고, SIMD 모드로 동작하는 경우(예를 들어, 제어신호 '1'이 입력되는 경우) 제2 멀티플렉서는 제2 곱셈기의 출 력을 제2 가산기의 입력으로 결정할 수 있다. 제3 프로세싱 엘리먼트는 가산기 트리 모드에서 최종 출력 값을 출력하는 프로세싱 엘리먼트로, MAC 유닛 을 구성하는 제3 곱셈기, 제3 가산기 및 제3 누산기와 제어회로를 구성하는 제4 가산기, 제3 멀티플렉서, 제4 멀티플렉서, 제3 AND 게이트, 제5 가산기 및 제5 멀티플렉서를 포함하여 구성될 수 있다. 제5 멀티플렉서는 이웃한 프로세싱 엘리먼트들의 출력들과 제3 가산기의 출력의 합 또는 제3 가산기 의 출력 중 어느 하나를 제3 누산기의 입력으로 결정할 수 있다. 가산기 트리 모드로 동작하는 경우(예를 들어, 제어신호 '0'이 입력되는 경우) 제3 멀티플렉서와 제4 멀티 플렉서를 통하여 이웃한 프로세싱 엘리먼트들의 출력들이 입력되고, 제4 가산기는 이웃한 프로세싱 엘리먼트들의 출력들을 합산할 수 있다. 또한, 제3 가산기는 제3 곱셈기의 출력과 제3 누산기 의 출력을 합산할 수 있다. 제5 멀티플렉서는 제3 가산기의 출력과 제4 가산기의 출력을 합산 하는 제5 가산기의 출력을 제3 누산기의 입력으로 결정할 수 있다. SIMD 모드로 동작하는 경우(예를들어, 제어신호 '1'이 입력되는 경우) 제5 멀티플렉서는 제3 가산기의 출력을 제3 누산기의 입 력으로 결정할 수 있다. 다시 도 4a를 참조하면, 딥 러닝 연산 수행 장치의 프로세싱 엘리먼트(401, 408)는 도 4b의 제2 프로세싱 엘리먼트의 구조를 가질 수 있고, 프로세싱 엘리먼트(402, 403, 405, 406, 407)는 도 4b의 제1 프로세싱 엘리먼트의 구조를 가질 수 있으며, 프로세싱 엘리먼트는 도 4b의 제3 프로세싱 엘리먼트의 구 조를 가질 수 있다. 딥 러닝 연산 수행 장치는 제어신호 '0'이 입력되어 가산기 트기 모드로 동작하는 예를 보여준다. 전술한 바와 같이 제어신호 '0'이 입력되는 경우, 프로세싱 엘리먼트에 포함된 MAC 유닛의 누산기만 동작하고 나 머지 프로세싱 엘리먼트에 포함된 MAC 유닛들의 누산기는 동작하지 않을 수 있다. 프로세싱 엘리먼트(401, 408)에 포함된 MAC 유닛의 가산기 또한 동작하지 않을 수 있다. 이처럼 누산기 및 가산기들의 동작을 제한함으 로써 가산기 트리 모드는 전력 소모를 줄일 수 있다. 또한, 프로세싱 엘리먼트(402 내지 407)의 제어회로에 포 함된 멀티플렉서는 이웃하는 MAC 유닛으로부터 데이터를 수신하여, 가산기 트리의 동작을 수행할 수 있다. 가 산기 트리 모드로 동작하는 딥 러닝 연산 수행 장치는 도 4c의 가산기 트리와 동일한 연산을 수행함을 알 수 있다. 딥 러닝 연산 수행 장치는 제어신호 '1'이 입력되어 SIMD 모드로 동작하는 예를 보여준다. 전술한 바와 같이 제어신호 '1'이 입력되는 경우, 모든 프로세싱 엘리먼트들(401 내지 408)에 포함된 MAC 유닛들의 누산기가 동작할 수 있다. 한편, 프로세싱 엘리먼트에 포함된 제어회로의 가산기들은 동작하지 않을 수 있다. 예 를 들어, 사용되지 않는 가산기들의 입력에 연결된 멀티플렉서의 출력값이 0의 값이 되도록하여 사용되지 않는 가산기들의 동작을 제한함으로써 전력 소모를 줄일 수 있다. 도 5a 내지 도 5c는 일 실시예에 따른 딥 러닝 연산 수행 장치의 다른 예시를 설명하기 위한 도면이다. 도 4a 내지 도 4c에서 전술한 딥 러닝 연산 수행 장치는 가산기 트리 모드로 동작하는 경우 가장자리에 있는 프 로세싱 엘리먼트(401, 408)와 프로세싱 엘리먼트 사이의 거리가 멀고, 많은 가산기와 멀티플렉서를 지나는 데이터 패스를 갖는 바 원하는 타이밍을 달성하기 어려울 수 있다. 도 5a 내지 도 5c에 도시된 다른 실시예에 따른 딥 러닝 연산 수행 장치는 가산기 트리를 별도로 설계하여 멀티 플렉서를 지나지 않게 함으로써 고속으로 가산기 트리 모드 연산을 수행할 수 있다. 예를 들어, 도 5a의 딥 러닝 연산 수행 장치는 시스톨릭 어레이 및 시스톨릭 어레이에 포함된 MAC 유닛들의 곱 셈기를 공유하는 가산기 트리를 포함할 수 있다. 설명의 편의를 위하여, 복수의 프로세싱 엘리먼트들 중에서 프로세싱 엘리먼트의 동작을 기준으로 설명하 면, 제어신호 ‘0’이 입력되는 경우 곱셈기의 출력은 제1 멀티플렉서를 통해 MAC 유닛의 가산기 로 전달되지 않고, 제2 멀티플렉서를 통해 가산기 트리의 가산기로 전달될 수 있다. 이를 통해, 제어신호 ‘0’이 입력되는 경우 딥 러닝 연산 수행 장치는 가산기 트리 모드로 동작할 수 있다. 만약 제어신호 ‘1’이 입력되는 경우 곱셈기의 출력은 제1 멀티플렉서를 통해 MAC 유닛의 가산기 로 전달되고, 제2 멀티플렉서를 통해 가산기 트리의 가산기로 전달되지는 않는다. 이를 통해, 제어신호 ‘1’이 입력되는 경우 딥 러닝 연산 수행 장치는 SIMD 모드로 동작할 수 있다. 도 5b를 참조하면, 또 다른 실시예에 따른 딥 러닝 연산 수행 장치는 시스톨릭 어레이, 시스톨릭 어레이에 포함 된 MAC 유닛들의 곱셈기 및 누산기를 공유하는 가산기 트리를 포함할 수 있다. 설명의 편의를 위하여, 복수의 프로세싱 엘리먼트들 중에서 프로세싱 엘리먼트의 동작을 기준으로 설명하 면, 제어신호 ‘0’이 입력되는 경우 곱셈기의 출력은 제1 멀티플렉서를 통해 MAC 유닛의 가산기 로 전달되지 않고, 제2 멀티플렉서를 통해 가산기 트리의 가산기로 전달될 수 있다. 가산 기 트리의 최종 출력은 프로세싱 엘리먼트의 제1 멀티플렉서를 통해 MAC 유닛의 누산기로 전달될 수 있다. 이를 통해, 제어신호 ‘0’이 입력되는 경우 딥 러닝 연산 수행 장치는 가산기 트리 모드로 동작할 수 있다. 만약 제어신호 ‘1’이 입력되는 경우 곱셈기의 출력은 제1 멀티플렉서를 통해 MAC 유닛의 가산기 로 전달되고, 제2 멀티플렉서를 통해 가산기 트리의 가산기로 전달되지는 않는다. 이를통해, 제어신호 ‘1’이 입력되는 경우 딥 러닝 연산 수행 장치는 SIMD 모드로 동작할 수 있다. 도 5c를 참조하면, 또 다른 실시예에 따른 딥 러닝 연산 수행 장치는 가산기 트리의 구조에 플립플롭(flip- flop)(560, 565)을 더 포함할 수 있다. 플립플롭(560, 565)은 시스톨릭 어레이에 포함된 곱셈기와 가산기 트리 를 위한 누산기 사이에 배치될 수 있다. 딥 러닝 연산 수행 장치는 플립플롭(flip-flop)(560, 565)을 추가하여 동기 회로를 구성함으로써, 가산기 트리 모드에서 동작 주파수를 높일 수 있다. 플립플롭은 클럭 신호의 엣지 (예를 들어, 라이징 엣지 혹은 폴링 엣지)에 입력되는 정보를 다음 번 클럭 신호의 엣지까지 지속적으로 출력한 다. 플립플롭들에 동일한 클럭 신호를 인가하는 경우, 딥 러닝 연산 수행 장치는 해당 클럭 신호에 동기화되어 동작할 수 있다. 일반적으로 동기 회로는 비동기 회로에 비하여 전달 지연이나 회로 지연에 강인하기 때문에, 더 높은 동작 주파수에서 동작할 수 있다. 도 6a 및 도 6b는 일 실시예에 따른 시스톨릭 가산기 트리 모드 및 SIMD 모드를 제공하는 딥 러닝 연산 수행 장 치의 구체적인 예시를 설명하기 위한 도면이다. 도 1 내지 5c를 통하여 전술한 설명은 이후 도면들에도 적용 가능하므로, 중복되는 내용의 설명은 생략한다. 도 6a를 참조하면, 일 실시예에 따른 딥 러닝 연산 수행 장치는 시스톨릭 가산기 트리 모드 또는 SIMD 모드로 동작할 수 있다. 예를 들어, 딥 러닝 연산 수행 장치는 제어신호 '0'이 입력되는 경우 시스톨릭 가산기 트리 모드로, 제어신호 '1'이 입력되는 경우 SIMD 모드로 동작할 수 있다. 도 6a에 도시된 딥 러닝 연산 수행 장치는 도 4a에 도시된 딥 러닝 연산 수행 장치를 기준으로 특정 구성을 더 포함한 것으로, 부가된 구성을 통해 딥 러닝 연산 수행 장치는 시스톨릭 가산기 트리 모드를 제공할 수 있다. 제어회로는 시스톨릭 가산기 트리 모드로 동작하여 윗단 시스톨릭 어레이의 입력 데이터를 아랫단 시스톨 릭 어레이로 전달하기 위한 복수의 멀티플렉서들(611, 621) 및 데이터 경로(data path)들을 더 포함 할 수 있다. 제어회로는 복수의 연산 모드에 대응하여, 시스톨릭 어레이에 포함된 MAC 유닛들의 누산기의 동작 및 MAC 유닛들 사이의 데이터 이동을 제어할 수 있다. 예를 들어, 제어회로는 시스톨릭 가산기 트리 모드에 대 응하여 시스톨릭 어레이에 포함된 MAC 유닛들 중 어느 하나의 MAC 유닛의 누산기만 동작하도록 MAC 유닛들의 동 작을 제어할 수 있다. 또한, 실시예에 따라 딥 러닝 연산 수행 장치는 누산기들의 출력을 멀티플렉싱하여 시프 트 레지스터(SFT)를 통하여 출력할 수 있다. 이러한 구조를 통하여 출력 포트의 수를 줄일 수 있다. 시스톨릭 가산기 트리 모드는 가산기 트리 모드와 동일한 동작을 수행하나, 데이터 입력 방법에서 차이가 있다. 시스톨릭 가산기 트리 모드에서는 시스톨릭 어레이가 2D 어레이 형태로 배치되어 윗단 시스톨릭 어레이의 입력 데이터(예를 들어, 웨이트 값)가 컬럼을 따라 아랫단 시스톨릭 어레이에 전달될 수 있다. 설명의 편의를 위하 여, 복수의 프로세싱 엘리먼트들 중에서 프로세싱 엘리먼트(610, 620)를 기준으로 설명하면, 프로세싱 엘리먼트 는 도 4a의 프로세싱 엘리먼트에 비해 멀티플렉서를 더 포함할 수 있다. 제어신호 '0'이 입력 되는 경우 프로세싱 엘리먼트의 입력 데이터 B가 데이터 경로를 통해 프로세싱 엘리먼트로 전달 되고, 멀티플렉서는 데이터 경로를 통해 전달받은 입력 데이터 B를 곱셈기로 인가할 수 있다. 프로 세싱 엘리먼트(610, 620) 뿐만 아니라, 다른 프로세싱 엘리먼트들도 전술한 바와 같이 동작할 수 있다. 예를 들어, 시스톨릭 가산기 트리 모드에서 딥 러닝 연산 수행 장치는 도 6b 구조로 동작하는 것으로 이해될 수 있다. 도 6b를 참조하면, 제어신호 '0'이 입력되는 경우 윗단 시스톨릭 어레이의 입력 데이터가 아랫단 시스톨릭 어레이로 전달됨을 알 수 있다. 반면에, 제어신호 '1'이 입력되는 경우 프로세싱 엘리먼트의 멀티플렉서는 데이터 경로를 통해 전달받은 입력 데이터를 입력으로 선택하지 않고 별도의 입력 데이터를 선택하기 때문에, 프로세싱 엘리먼트 의 입력 데이터 B가 프로세싱 엘리먼트에 전달되지 않는다. 따라서, 딥 러닝 연산 수행 장치는 제어 신호 '1'이 입력되는 경우 시스톨릭 어레이 사이에서 데이터 이동이 없는 SIMD 모드로 동작할 수 있다. 프로세 싱 엘리먼트(610, 620) 뿐만 아니라, 다른 프로세싱 엘리먼트들도 전술한 바와 같이 동작할 수 있다. 도 7a 및 도 7b는 시스톨릭 가산기 트리 모드 및 시스톨릭 모드를 제공하는 딥 러닝 연산 수행 장치의 구체적인 예시를 설명하기 위한 도면이다. 도 1 내지 6b의 설명은 이후 도면들에도 적용 가능하므로, 중복되는 내용의 설명은 생략한다. 도 7a의 딥 러닝 연산 수행 장치는 시스톨릭 가산기 트리 모드 또는 시스톨릭 모드로 동작할 수 있다. 예를 들 어, 딥 러닝 연산 수행 장치는 제어신호 '0'이 입력되는 경우 시스톨릭 가산기 트리 모드로, 제어신호 '1'이 입 력되는 경우 시스톨릭 모드로 동작할 수 있다. 도 7a에 도시된 딥 러닝 연산 수행 장치는 도 6a에 도시된 딥 러닝 연산 수행 장치를 기준으로 특정 구성을 더 포함한 것으로, 부가된 구성을 통해 시스톨릭 모드를 제공할 수 있다. 제어회로는 시스톨릭 모드로 동작하여 시스톨릭 어레이의 입력 데이터를 행(row) 방향으로 전달하기 위한 복수의 멀티플렉서들 및 데이터 경로들을 더 포함할 수 있다. 제어회로는 복수의 연산 모드에 대응하여, 시스톨릭 어레이에 포함된 MAC 유닛들의 누산기의 동작 및 MAC 유닛 들 사이의 데이터 이동을 제어할 수 있다. 예를 들어, 제어회로는 시스톨릭 모드에 대응하여 시스톨릭 어레이 에 포함된 모든 MAC 유닛들의 누산기를 동작하도록 MAC 유닛들의 동작을 제어할 수 있다. 또한, 실시예에 따라 딥 러닝 연산 수행 장치는 누산기들의 출력을 멀티플렉싱하여 시프트 레지스터(SFT)를 통하여 출력할 수 있다. 이러한 구조를 통하여 출력 포트의 수를 줄일 수 있다. 시스톨릭 모드는 SIMD 모드와 데이터 입력 방법에서 차이가 있다. 시스톨릭 모드에서는 시스톨릭 어레이의 입 력 데이터가 행(row) 및/또는 열(column)을 따라 MAC 유닛들에 전달될 수 있다. 예를 들어, 시스톨릭 어레이가 2D 어레이 형태로 배치되는 경우, 제1 입력 데이터(예를 들어, 웨이트 값)는 칼럼을 따라 윗단 시스톨릭 어레이 에서 아랫단 시스톨릭 어레이로 전달될 수 있고, 제2 입력 데이터(예를 들어, 입력 특징 맵의 데이터 값)는 로 우를 따라 각 단 시스톨릭 어레이의 이웃하는 MAC 유닛들로 전달될 수 있다. 설명의 편의를 위하여, 복수의 프 로세싱 엘리먼트들 중에서 프로세싱 엘리먼트(710, 720)를 기준으로 설명하면, 프로세싱 엘리먼트는 도 6a 의 프로세싱 엘리먼트에 비해 멀티플렉서를 더 포함할 수 있다. 제어신호 '1'이 입력되는 경우 프로 세싱 엘리먼트의 입력 데이터 A가 데이터 경로를 통해 프로세싱 엘리먼트로 전달되고, 멀티플렉 서는 데이터 경로를 통해 전달받은 입력 데이터 A를 곱셈기의 입력으로 인가할 수 있다. 프로세싱 엘리먼트(710, 720) 뿐만 아니라, 다른 프로세싱 엘리먼트들도 전술한 바와 같이 동작할 수 있다. 도 7b를 참조하면, 딥 러닝 연산 수행 장치는 시스톨릭 모드를 이용하여 행렬-벡터 곱 연산을 수행할 수 있다. 예를 들어, 시스톨릭 모드에서 각각의 MAC 유닛들은 'B' 입력단을 통해 도시된 타이밍(예를 들어, t1 내지 t8) 에 행렬 데이터를 입력 받을 수 있다. 또한, 제어회로는 시스톨릭 모드에 대응하여, 도시된 타이밍(예를 들어, t1 내지 t8)에 벡터 데이터를 로우를 따라 각 단 시스톨릭 어레이의 이웃하는 MAC 유닛들로 전달하 도록 제어할 수 있다. 이를 통해 각각의 MAC 유닛들은 'A' 입력단을 통해 도시된 타이밍(예를 들어, t1 내지 t8)에 벡터 데이터를 입력 받을 수 있다. 제어회로는 시스톨릭 모드에 대응하여 시스톨릭 어레이에 포함된 모든 MAC 유닛들의 누산기를 동작하도록 MAC 유닛들의 동작을 제어할 수 있다. 이를 통해, 각각의 MAC 유닛들은 매 시간에 해당하는 행렬 데이터와 벡 터 데이터의 곱을 누적하여 행렬-벡터 곱 연산을 수행할 수 있다. 도 8은 시스톨릭 가산기 트리 모드, SIMD 모드 및 시스톨릭 모드를 제공하는 딥 러닝 연산 수행 장치의 구체적 인 예시를 설명하기 위한 도면이다. 도 1 내지 7b의 설명은 이후 도면들에도 적용 가능하므로, 중복되는 내용 의 설명은 생략한다. 도 8의 딥 러닝 연산 수행 장치는 시스톨릭 가산기 트리 모드. SIMD 모드 및 시스톨릭 모드 중 어느 하나로 동 작할 수 있다. 예를 들어, 딥 러닝 연산 수행 장치는 제어신호 '0'이 입력되는 경우 시스톨릭 가산기 트리 모 드로, 제어신호 '1'이 입력되는 경우 SIMD 모드로, 제어신호 '2'가 입력되는 경우 시스톨릭 모드로 동작할 수 있다. 설명의 편의를 위하여, 복수의 프로세싱 엘리먼트들 중에서 프로세싱 엘리먼트(810, 820, 830)를 기준으로 설명 한다. 제어신호 '0'이 입력되는 경우 프로세싱 엘리먼트의 입력단 'B'를 통해 들어온 입력 데이터가 데이 터 경로를 통해 프로세싱 엘리먼트로 전달되고, 프로세싱 엘리먼트의 멀티플렉서는 데이터 경로를 통해 전달받은 입력 데이터를 입력단 'B'의 입력으로 선택할 수 있다. 제어신호 '0'이 입력되는 경우 프로세싱 엘리먼트의 멀티플렉서는 곱셈기의 출력을 멀티플렉서의 덧셈기로 전달하지 않기 때문에, 시스톨릭 모드로 동작하지 않는다. 따라서, 딥 러닝 연산 수행 장치는 제어신호 '0'이 입력되는 경우 윗단 시스톨릭 어레이의 입력 데이터(예를 들어, 웨이트 값)가 컬럼을 따라 아랫단 시스톨릭 어레이에 전달되는 시스톨릭 가산기 트리 모드로 동작할 수 있다. 프로세싱 엘리먼트(810, 830) 뿐만 아니라, 다른 프로세싱 엘리 먼트들도 전술한 바와 같이 동작할 수 있다.제어신호 '2'가 입력되는 경우 프로세싱 엘리먼트의 입력 데이터가 데이터 경로를 통해 프로세싱 엘 리먼트로 전달되고, 프로세싱 엘리먼트의 멀티플렉서는 데이터 경로를 통해 전달받은 입력 데이터를 입력단 'A'의 입력으로 선택할 수 있다. 따라서, 딥 러닝 연산 수행 장치는 제어신호 '2'가 입력되는 경우 시스톨릭 모드로 동작할 수 있다. 반면에, 제어신호 '1'이 입력되는 경우 프로세싱 엘리먼트의 멀티플렉서는 데이터 경로를 통해 전달받은 입력 데이터를 입력으로 선택하지 않고 별도의 입력 데이터를 선택하기 때문에, 프로세싱 엘리먼트 의 입력 데이터가 프로세싱 엘리먼트에 전달되지 않는다. 따라서, 딥 러닝 연산 수행 장치는 제어신 호 '1'이 입력되는 경우 시스톨릭 어레이 사이에서 데이터 이동이 없는 SIMD 모드로 동작할 수 있다. 프로세싱 엘리먼트(810, 820) 뿐만 아니라, 다른 프로세싱 엘리먼트들도 전술한 바와 같이 동작할 수 있다. 도 9a 및 도 9b는 시스톨릭 가산기 트리 모드 및 복수의 SIMD 모드를 제공하는 딥 러닝 연산 수행 장치의 구체 적인 예시를 설명하기 위한 도면이다. 도 1 내지 8의 설명은 이후 도면들에도 적용 가능하므로, 중복되는 내용 의 설명은 생략한다. 도 9a의 딥 러닝 연산 수행 장치는 시스톨릭 가산기 트리 모드 및 복수의 SIMD 모드 중 어느 하나로 동작할 수 있다. 예를 들어, 딥 러닝 연산 수행 장치는 제어신호 '0'이 입력되는 경우 시스톨릭 가산기 트리 모드로, 제 어신호 '1'이 입력되는 경우 요소 합(elementwise add) 연산을 수행하는 SIMD 모드로, 제어신호 '2'이 입력되는 경우 행렬-벡터 곱 연산을 수행하는 SIMD 모드로, 제어신호 '3'이 입력되는 경우 뎁스와이즈 컨볼루션 연산을 수행하는 SIMD 모드로 동작할 수 있다. 도 9a에 도시된 딥 러닝 연산 수행 장치는 도 6a에 도시된 딥 러닝 연산 수행 장치를 기준으로 특정 구성을 더 포함한 것으로, 부가된 구성을 통해 딥 러닝 연산 수행 장치는 단일 SIMD 모드 대신 복수의 SIMD 모드를 제공할 수 있다. 제어신호 '2'가 입력되는 경우 딥 러닝 연산 수행 장치는 도 9b와 같이 행렬-벡터 곱 연산을 수행할 수 있다. 딥 러닝 연산 수행 장치는 행렬-벡터 연산이 자주 쓰이는 순환 신경망(RNN; Recurrent Neural Network)에도 적 합하며, 배치 사이즈(batch size)가 증가해도 시간 지연(time delay)를 최소화하면서 처리할 수 있다. 멀티플렉서는 가중치 및 다른 행의 시스톨릭 어레이로부터 입력 받은 가중치 중 하나를 출력할 수 있다. 멀티플렉서는 제어 신호에 응답하여 0, 곱셈기의 출력 및 'B' 입력단을 통해 수신한 입력 데이터 중 하나 를 선택적으로 출력할 수 있다. 멀티플렉서는 'B' 입력단을 통해 수신한 입력 데이터를 가산기로 출력함 으로써 입력 데이터의 엘리먼트와이즈 합 연산을 수행하도록 동작할 수 있다. 멀티플렉서는 제어 신호에 응답하여 'A' 입력단을 통해 수신한 입력 데이터, 0, 누산기의 출력 중 하나를 선택적으로 출력할 수 있다. 멀 티플렉서는 제어 신호에 응답하여 누산기의 출력, 가산기의 출력 및 곱셈기의 도 10은 시스톨릭 가산기 트리 모드, 복수의 SIMD 모드 및 시스톨릭 모드를 제공하는 딥 러닝 연산 수행 장치의 구체적인 예시를 설명하기 위한 도면이다. 도 1 내지 9b의 설명은 이후 도면들에도 적용 가능하므로, 중복되는 내용의 설명은 생략한다. 도 10의 딥 러닝 연산 수행 장치는 시스톨릭 가산기 트리 모드, 복수의 SIMD 모드 및 시스톨릭 모드 중 어느 하 나로 동작할 수 있다. 예를 들어, 딥 러닝 연산 수행 장치는 제어신호 '0'이 입력되는 경우 시스톨릭 가산기 트리 모드로, 제어신호 '1'이 입력되는 경우 요소 합(elementwise add) 연산을 수행하는 SIMD 모드로, 제어신호 '2'가 입력되는 경우 행렬-벡터 곱 연산을 수행하는 SIMD 모드로, 제어신호 '3'이 입력되는 경우 뎁스와이즈 컨 볼루션 연산을 수행하는 SIMD 모드로, 제어신호 '4'가 입력되는 경우 시스톨릭 모드로 동작할 수 있다. 도 10에 도시된 딥 러닝 연산 수행 장치는 도 9a에 도시된 딥 러닝 연산 수행 장치를 기준으로 특정 구성을 더 포함한 것으로, 부가된 구성을 통해 딥 러닝 연산 수행 장치는 시스톨릭 모드를 더 제공할 수 있다. 일 실시예에 따른 딥 러닝 연산 수행 장치는 출력의 쉬프트 레지스터(shift register)를 줄이기 위해 멀티플렉 서를 사용할 수 있다. 예를 들어, 요소 합 연산 모드 및 행렬-벡터 곱 연산 모드의 경우 1 싸이클(cycle)에 1 개의 출력을 뽑아야 할 수 있다. 쉬프트 레지스터에 인가되는 클락 주파수(clock frequency)를 MAC 유닛에 인가되는 주파수의 N배로 증가시키고, N:1 멀티플렉서를 이용하는 경우, 1 싸이클(cycle)에 1개의 출력을 이동시 킬 수 있다. 입력-고정(input-stationary), 가중치-고정(weight-stationary), 출력-고정(output-stationary), 또는 이들의 다양한 조합을 요구하는 어플리케이션에 시스톨릭 모드가 이용될 수 있다. 시스톨릭 모드에서 뎁스와이즈 컨볼 루션 연산이 처리되는 경우, 높은 MAC 이용 효율을 달성할 수 있다. 시스톨릭 가산기 트리 모드는 시스톨릭 모드 대비 저전력으로 구동될 수 있다. 또한, SIMD 모드는 시스톨릭 모 드 대비 MAC 이용 효율이 높으며, 뎁스와이즈 컨볼루션 연산에서 높은 MAC 이용 효율을 달성할 수 있다. 필터의 크기(예를 들어, 폭(w)*높이(h)*채널의 수(c))가 MAC 유닛의 가로/세로 길이보다 큰 경우에는 시스톨릭 모드로 동작하는 것이 효과적일 수 있다. 반면에, 쉬프트 레지스터로 출력을 이동시킨다면 h*w*c*2의 시간이 소모되므로 MAC 유닛의 크기가 큰 경우에는 효과적이지 않을 수 있다. 따라서, 도 10에 도시된 딥 러닝 연산 수행 장치는 신경망의 첫 번째 레이어에서는 시스톨릭 모드로 동작하는 것이 효과적일 수 있으나, 나머지 레이 어에서는 MAC 어레이의 높은 전력 소모로 인해 전력 효율이 오히려 떨어질 수 있다. 도 9a에 도시된 딥 러닝 연산 수행장치는 도 10에 도시된 딥 러닝 연산 수행장치 보다 전력 효율이 좋을 수 있 다. 도 9a에 도시된 딥 러닝 연산 수행장치는 요소 합 및 행렬-벡터 곱 연산을 MAC 유닛에서 처리할 수 있기 때문에 전체적인 처리 속도가 빠를 수 있다. 그러나, 요소 합 연산은 높은 대역폭(bandwidth)을 요구하므로, 출력을 추출하는데 높은 클락 주파수를 사용해야하며, 요소 합 연산을 위해 추가적인 멀티플렉서를 삽입해야 할 수 있 다. 따라서, 도 9a에 도시된 딥 러닝 연산 수행 장치는 멀티플렉서를 삽입으로 인해 전력 소모가 증가될 수 있 다. 도 7a에 도시된 딥 러닝 연산 수행장치는 도 9a에 도시된 딥 러닝 연산 수행장치에서 복수의 SIMD 모드를 제공 하기 위한 구성이 생략되었기 때문에 도 9a에 도시된 딥 러닝 연산 수행장치 보다 전력 효율이 좋을 수 있다. 도 7a에 도시된 딥 러닝 연산 수행장치는 각 MAC 유닛 마다 입력 데이터를 다르게 받을 수 있어서 순수 가산기 트리 구조 대비 MAC 이용 효율이 높을 수 있다. 또한, 도 7a에 도시된 딥 러닝 연산 수행장치는 시스톨릭 모드 대비 MAC 유닛에 데이터를 채우는 시간이 절약되어 MAC 이용 효율이 높을 수 있다. 도 11a는 3D 어레이 형태로 배치된 시스톨릭 어레이를 도시한 도면이고, 도 11b는 컨볼루션 연산 및 행렬-벡터 곱 연산, 행렬-행렬 곱 연산을 수행할 수 있는 딥 러닝 연산 수행 장치를 도시한 도면이다. 도 11a 내지 도 11b에서, 입력 특징맵(또는, Activation, ACT, IFM) 메모리와 웨이트 값 메모리의 위치는 변경될 수 있다. 도 11a의 딥 러닝 연산 수행 장치는 시스톨릭 어레이를 3차원 형태로 배치하여 컨볼루션 연산 및 행렬-벡터 곱 연산, 행렬-행렬 곱 연산의 처리 속도를 향상시킬 수도 있다. 도 11b의 딥 러닝 연산 수행 장치는 DMA(Direct Memory Access), 제어기, SRAM 클러스터 및 NLF(Normalized Lattice Filter)를 더 포함할 수 있다. 딥 러닝 연산 수행 장치는 DMA 혹은 CPU 등, 데이터 이동을 할 수 있는 장치를 이용해서 데이터를 원하는 행 또는 열에 인가하고, 출력 결과를 읽어올 수도 있다. 나아가, 딥 러닝 연산 수행 장치는 여러 행 또는 열의 결과 값을 더하거나 누적할 수 있도록 2개 이상의 행 또는 열의 출력을 연결할 수 있다. 이상에서 설명된 실시예들은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨 어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치, 방법 및 구성요소는, 프로세 서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨 터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 운영 체제 상에서 수행되는 하나 이상의 소 프트웨어 애플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근,"}
{"patent_id": "10-2020-0096333", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파(signal wave)에 영구적으로, 또는 일시적으로 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 하나 이상의 컴퓨터 판독 가능 기록 매 체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단 독으로 또는 조합하여 포함할 수 있다. 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구 성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다."}
{"patent_id": "10-2020-0096333", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가진 자라면 상기를 기초로 다양한 기술적 수정 및 변형을 적용할 수 있다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다.도면 도면1a 도면1b 도면1c 도면2 도면3 도면4a 도면4b 도면4c 도면5a 도면5b 도면5c 도면6a 도면6b 도면7a 도면7b 도면8 도면9a 도면9b 도면10 도면11a 도면11b"}
{"patent_id": "10-2020-0096333", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1a는 인공 신경망(Artificial Neural Network) 모델을 설명하기 위한 도면이고, 도 1b는 가산기 트리(adder tree) 구조를 이용한 딥 러닝 연산 방법을 설명하기 위한 도면이며, 도 1c는 복수의 MAC 유닛들을 포함하는 SIMD 구조를 이용한 딥 러닝 연산 방법을 설명하기 위한 도면이다. 도 2는 일 실시예에 따른 딥 러닝 연산 수행 방법을 설명하기 위한 순서도이다. 도 3은 일 실시예에 따른 딥 러닝 연산 수행 장치의 구조를 설명하기 위한 도면이다. 도 4a 내지 도 4c는 일 실시예에 따른 가산기 트리 모드 및 SIMD 모드를 제공하는 딥 러닝 연산 수행 장치의 구 체적인 예시를 설명하기 위한 도면이다. 도 5a 내지 도 5c는 일 실시예에 따른 딥 러닝 연산 수행 장치의 다른 예시를 설명하기 위한 도면이다. 도 6a 및 도 6b는 일 실시예에 따른 시스톨릭 가산기 트리 모드 및 SIMD 모드를 제공하는 딥 러닝 연산 수행 장 치의 구체적인 예시를 설명하기 위한 도면이다. 도 7a 및 도 7b는 일 실시예에 따른 시스톨릭 가산기 트리 모드 및 시스톨릭 모드를 제공하는 딥 러닝 연산 수 행 장치의 구체적인 예시를 설명하기 위한 도면이다. 도 8은 시스톨릭 가산기 트리 모드, SIMD 모드 및 시스톨릭 모드를 제공하는 딥 러닝 연산 수행 장치의 구체적 인 예시를 설명하기 위한 도면이다. 도 9a 및 도 9b는 시스톨릭 가산기 트리 모드 및 복수의 SIMD 모드를 제공하는 딥 러닝 연산 수행 장치의 구체 적인 예시를 설명하기 위한 도면이다. 도 10은 시스톨릭 가산기 트리 모드, 복수의 SIMD 모드 및 시스톨릭 모드를 제공하는 딥 러닝 연산 수행 장치의 구체적인 예시를 설명하기 위한 도면이다. 도 1 내지 9b의 설명은 이후 도면들에도 적용 가능하므로, 중복되는 내용의 설명은 생략한다. 도 11a는 3D 어레이 형태로 배치된 시스톨릭 어레이를 도시한 도면이고, 도 11b는 컨볼루션 연산 및 행렬-벡터 곱 연산, 행렬-행렬 곱 연산을 수행할 수 있는 딥 러닝 연산 수행 장치를 도시한 도면이다."}
