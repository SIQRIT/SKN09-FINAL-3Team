{"patent_id": "10-2021-0075716", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0166675", "출원번호": "10-2021-0075716", "발명의 명칭": "보안을 위한 메모리 관리 방법 및 이를 위한 전자 장치", "출원인": "삼성전자주식회사", "발명자": "황보람"}}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,적어도 하나의 프로세서; 및상기 적어도 하나의 프로세서와 작동적으로 연결된 메모리를 포함하며,상기 메모리는, 실행 시에, 상기 적어도 하나의 프로세서가,커널로부터 상기 커널을 통해서 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득하고, 하이퍼바이저를 통해서 접근 가능한 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하며, 상기 커널로부터 커널 스택에 저장된 어드레스 획득 시 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기획득된 어드레스의 결함 여부를 식별하며, 상기 어드레스의 결함을 식별한 것에 대응하여, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 커널로부터 상기 하이퍼바이저로 상기 제1 메모리 영역에 대한 상기 적어도 하나의 어드레스를 전달하기위한 호출 명령어를 통해 상기 적어도 하나의 어드레스를 획득하도록 설정된, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 적어도 하나의 어드레스의 획득에 대응하여, 상기 적어도 하나의 어드레스가 상기 커널과 관련한 어드레스영역에 포함되는지를 식별하고, 상기 적어도 하나의 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는 경우 상기 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하도록 설정된, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 커널로부터 상기 하이퍼바이저로 상기 어드레스를 전달하기 위한 호출 명령어를 통해, 상기 획득된 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는지를 식별하고, 상기 획득된 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는 경우 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별하도록 설정된, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 공개특허 10-2022-0166675-3-상기 호출 명령어를 통해 상기 커널 스택에 저장된 어드레스를 획득할 때마다 상기 획득되는 어드레스의 결함여부를 식별하도록 설정된, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4항에 있어서, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 호출 명령어를 통해 상기 커널 스택에 저장된 어드레스를 획득될 때마다 상기 획득되는 어드레스를 상기하이퍼바이저를 통해서 접근 가능한 제3 메모리 영역에 저장하고, 상기 제3 메모리 영역에 저장되는 어드레스를 일정 수의 리스트 형태로 관리하며, 상기 어드레스 리스트에 대해결함 여부를 식별하도록 설정된, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 어드레스 리스트 중에서 이웃한 어드레스들끼리 비교 후, 상기 이웃한 어드레스들이 동일하다면 상기 이웃한 어드레스들을 삭제하여, 상기 삭제 후 남은 어드레스에 대해 결함 여부를 식별하도록 설정된, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제4항에 있어서, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 저장된 적어도 하나의 어드레스와 상기 획득된 어드레스를 비교하여, 비교 결과가 일치하지 않는 경우 상기 획득된 어드레스의 결함을 식별하도록 설정된, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가,상기 비교 결과가 일치하지 않는 횟수를 카운트하고, 상기 카운트한 횟수가 미리 설정된 임계값 이상일 경우, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구하도록 설정된, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제6항에 있어서, 상기 제2 메모리 영역 및 상기 제3 메모리 영역 각각은, 상기 하이퍼바이저를 통해 접근 가능하며, 상기 커널을 통해서는 접근 불가능한 영역인, 전자 장치."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "전자 장치에서 보안을 위한 메모리 관리 방법에 있어서,커널로부터 상기 커널을 통해서 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득하는 동작;하이퍼바이저를 통해서 접근 가능한 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하는 동작;상기 커널로부터 커널 스택에 저장된 어드레스 획득 시 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기획득된 어드레스의 결함 여부를 식별하는 동작; 및 상기 획득된 어드레스의 결함을 식별한 것에 대응하여, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스공개특허 10-2022-0166675-4-를 이용하여 상기 결함이 발생한 어드레스를 복구하는 동작을 포함하는, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 상기 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득하는 동작은,상기 커널로부터 상기 하이퍼바이저로 상기 제1 메모리 영역에 대한 상기 적어도 하나의 어드레스를 전달하기위한 호출 명령어를 통해 상기 적어도 하나의 어드레스를 획득하는 동작을 포함하는, 보안을 위한 메모리 관리방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서, 상기 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하는 동작은,상기 적어도 하나의 어드레스의 획득에 대응하여, 상기 적어도 하나의 어드레스가 상기 커널과 관련한 어드레스영역에 포함되는지를 식별하는 동작; 및 상기 적어도 하나의 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는 경우 상기 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하는 동작을 포함하는, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제11항에 있어서, 상기 획득된 어드레스의 결함 여부를 식별하는 동작은,상기 커널로부터 상기 하이퍼바이저로 상기 어드레스를 전달하기 위한 호출 명령어를 통해 상기 커널 스택에 저장된 어드레스를 획득하는 동작;상기 획득된 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는지를 식별하는 동작; 및 상기 획득된 어드레스 정보가 상기 커널과 관련한 어드레스 영역에 포함되는 경우 상기 저장된 적어도 하나의어드레스에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별하는 동작을 포함하는, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서, 상기 획득된 어드레스의 결함 여부를 식별하는 동작은,상기 호출 명령어를 통해 상기 커널 스택에 저장된 어드레스를 획득할 때마다 상기 획득되는 어드레스의 결함여부를 식별하는 동작을 포함하는, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에 있어서, 상기 획득된 어드레스의 결함 여부를 식별하는 동작은,상기 호출 명령어를 통해 상기 커널 스택에 저장된 어드레스를 획득할 때마다 상기 획득되는 어드레스를 상기하이퍼바이저를 통해서 접근 가능한 제3 메모리 영역에 저장하는 동작; 및상기 제3 메모리 영역에 저장되는 어드레스를 일정 수의 리스트 형태로 관리하며, 상기 어드레스 리스트에 대해결함 여부를 식별하는 동작을 포함하는, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "공개특허 10-2022-0166675-5-제16항에 있어서, 상기 어드레스 리스트에 대해 결함 여부를 식별하는 동작은,상기 어드레스 리스트 중에서 이웃한 어드레스들끼리 비교 후, 상기 이웃한 어드레스들이 동일하다면 상기 이웃한 어드레스들을 삭제하는 동작; 및 상기 삭제 후 남은 어드레스에 대해 결함 여부를 식별하는 동작을 포함하는, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제14항에 있어서, 상기 획득된 어드레스의 결함 여부를 식별하는 동작은,상기 저장된 적어도 하나의 어드레스와 상기 획득된 어드레스를 비교하는 동작; 및비교 결과가 일치하지 않는 경우 상기 획득된 어드레스의 결함을 식별하는 동작을 포함하는, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제14항에 있어서, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구하는 동작은,상기 비교 결과가 일치하지 않는 횟수를 카운트하는 동작; 및 상기 카운트한 횟수가 미리 설정된 임계값 이상일 경우, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구하는 동작을 포함하는, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제16항에 있어서, 상기 제2 메모리 영역 및 상기 제3 메모리 영역 각각은, 상기 하이퍼바이저를 통해 접근 가능하며, 상기 커널을 통해서는 접근 불가능한 영역인, 보안을 위한 메모리 관리 방법."}
{"patent_id": "10-2021-0075716", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시 예에 따르면, 전자 장치는 적어도 하나의 프로세서 및 상기 적어도 하나의 프로세서와 작동적으로 연결된 메모리를 포함하며, 상기 메모리는, 실행 시에, 상기 적어도 하나의 프로세서가, 커널로부터 상기 커널을 통해서 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득하고, 하이퍼바이저를 통해서 접근 가능한 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하며, 상기 커널로부터 커널 스택에 저장된 어드 레스 획득 시 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별하며, 상기 어드레스의 결함을 식별한 것에 대응하여, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용 하여 상기 결함이 발생한 어드레스를 복구하도록 하는 인스트럭션들을 저장할 수 있다. 그 밖에 다양한 실시 예 가 제공될 수 있다."}
{"patent_id": "10-2021-0075716", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "다양한 실시 예는 보안을 위한 메모리 관리 방법 및 이를 위한 전자 장치에 관한 것이다."}
{"patent_id": "10-2021-0075716", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "전자 장치, 예를 들어, 스마트 폰과 같은 휴대용 전자 장치를 통해 제공되는 다양한 서비스 및 부가 기능들이 점차 증가하고 있다. 이러한 전자 장치의 효용 가치를 높이고, 다양한 사용자들의 욕구를 만족시키기 위해서 통 신 서비스 제공자 또는 전자 장치 제조사들은 다양한 기능들을 제공하고 다른 업체와의 차별화를 위해 전자 장 치를 경쟁적으로 개발하고 있다. 이에 따라, 전자 장치를 통해서 제공되는 다양한 기능들도 점점 고도화 되고 있다. 이와 같이 전자 장치의 사용자들은 다양한 서비스들을 이용할 수 있게 되었지만 이와 동시에 다양한 보안 이슈들이 대두되고 있다."}
{"patent_id": "10-2021-0075716", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "전자 장치는 메모리에 저장된 소프트웨어 명령들에 따라 어플리케이션 및 시스템 프로세스들을 실행할 수 있다. 하지만, 이들 프로세스들은 악의적인 소프트웨어에 의해 변경될 수 있다. 예를 들어, 악의적인 코드가 삽입된응용 프로그램을 실행할 경우, 상기 악성 코드가 실행됨으로 인해 메모리의 데이터가 손상되거나 포인터 또는 리턴 어드레스를 손상시켜 다른 곳을 가리키도록 함으로써 시스템이 더 느리게 동작하도록 하거나 시스템 고장 을 일으킬 수 있다. 예를 들어, 리턴-지향-프로그래밍(ROP: return-oriented programming)은 공격자들이 컴퓨터 시스템들 또는 기타 전자 장치에 대한 제어를 얻는데 악용될 수 있으며, 리턴 어드레스를 조작함으로써 시스템은 정상 동작을 하지 못하고 공격자가 원하는 동작을 수행할 수 있다. 상기한 바와 같이 소프트웨어 보안 분야에서 특정 메모리 영역에 대해 공격자가 권한을 상승할 수 있는 메모리 손상 취약성(memory corruption vulnerabilities)이 존재할 수 있다. 특정 메모리 영역에 억세스될 수 없도록 커널 측에서 보안성을 제공하도록 하는 것이 일반적이나, 커널이 공격당할 여러가지 방법이 제시되고 있어 메모 리에서의 취약성에 대한 보안을 보다 개선시킬 수 있도록 하는 메모리 보안 기법이 필요할 수 있다. 본 개시의 다양한 실시 예에 따르면, 신뢰성 있는 방식으로 보안성을 보장하도록 보안을 위한 메모리 관리 방법 및 이를 위한 전자 장치를 제공하고자 한다. 본 개시에서 이루고자 하는 기술적 과제는 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또"}
{"patent_id": "10-2021-0075716", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 2, "content": "다른 기술적 과제들은 아래의 기재로부터 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2021-0075716", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시 예에 따르면, 전자 장치는 적어도 하나의 프로세서 및 상기 적어도 하나의 프로세서와 작동적으로 연결된 메모리를 포함하며, 상기 메모리는, 실행 시에, 상기 적어도 하나의 프로세서가, 커널로부터 상기 커널 을 통해서 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득하고, 하이퍼바이저를 통해서 접 근 가능한 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하며, 상기 커널로부터 커널 스택에 저장된 어드레스 획득 시 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별 하며, 상기 어드레스의 결함을 식별한 것에 대응하여, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스 를 이용하여 상기 결함이 발생한 어드레스를 복구하도록 하는 인스트럭션들을 저장할 수 있다. 다양한 실시 예에 따르면, 전자 장치에서 보안을 위한 메모리 관리 방법에 있어서, 커널로부터 상기 커널을 통 해서 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득하는 동작, 하이퍼바이저를 통해서 접 근 가능한 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하는 동작, 상기 커널로부터 커널 스택에 저 장된 어드레스 획득 시 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별하는 동작 및 상기 획득된 어드레스의 결함을 식별한 것에 대응하여, 상기 제2 메모리 영역에 저장된 적어 도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0075716", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "다양한 실시 예에 따르면, 커널보다 높은 권한 레벨을 가지는 하이퍼바이저를 이용하여 메모리에서의 취약성에 대한 보안을 향상시킬 수 있다. 다양한 실시 예에 따르면, 하이퍼바이저를 통해 리턴 어드레스를 안전하게 보호하고 추가적인 키나 복잡한 연산 없이도 ROP 공격을 효율적으로 감지할 수 있다. 다양한 실시 예에 따르면, 커널보다 권한 레벨이 높은 하이퍼바이저를 이용하여, 리턴 어드레스에 결함이 발생 하더라도 이를 복구함으로써 신뢰성 있는 방식으로 보안성을 보장할 수 있다. 다양한 실시 예에 따르면, 하이퍼바이저를 이용하여, 어드레스 결함 발생 여부에 대한 식별을 일정한 데이터가 모이면 한 번에 처리함으로써 성능 향상을 기대할 수 있다. 본 개시에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 않으며, 언급하지 않은 또 다른 효과들은 아래의 기재로부터 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2021-0075716", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터,SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴 퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 다양한 실시 예에 따른 전자 장치에서의 프로세서 아키텍처(architecture)에서의 예외 레벨(exception level)을 나타낸 개념도이다. 도 2에 도시된 바와 같이, 소프트웨어 관점에서 전자 장치(예: 도 1의 전자 장치)는 크게 보안 세계 (secure world)과 비보안 세계(normal world)로 구분될 수 있다. 또한, 이는, 사용자 모드, 슈퍼바이저 모드(또 는 커널 모드), 하이퍼바이저 모드 및 보안 모드로 구분될 수 있다. 또한, 아키텍처의 예외 레벨에서는 도 2에 도시된 바와 같이 특권 레벨(privilege level)의 계층으로도 구분될 수 있다. 예를 들어, 특권 레벨의 계층은 권한 레벨(또는 예외 레벨(exception level) EL0부터 EL3 로 구분될 수 있다. 사용자 모드(예: EL0)에서는 어플리케이션이 구동되며, 슈퍼바이저 모드(supervisor mode)(예: EL1)(22 0)에서는 커널 코드가 실행되며, 하이퍼바이저 모드(예: EL2)에서는 하이퍼바이저(hypervisor)를 통해 게 스트 OS를 제어할 수 있으며, 보안 모드(예: EL3)에서는 보안 모니터(secure monitor)가 동작함으로써 트 러스트존(trust zone)이 실행될 수 있다. 도 2에 도시된 바와 같이, EL0→EL1→EL2→EL3의 순서로 특권 레벨(privilege level)이 높아지며, 메모리 영역의 자원에 접근할 수 있는 권한 레벨도 높기 때문에 예를 들어, EL1 보다 EL2 의 보안 수준이 높을 수 있다. 도 3은 커널 영역을 통한 보안을 위한 메모리 관리 방법을 설명하기 위한 도면이며, 도 4는 커널 영역에서 ROP 공격의 일 예를 설명하기 위한 도면이다. 도 3에 도시된 바와 같이, ROP 공격은 커널의 스택 상에 저장된 리턴 어드레스에 대해 오버플로우를 발생시켜 LR(link register)에 로드될 리턴 어드레스를 변경하거나 이를 방지하기 위해 추가된 키(key) 또 는 다른 알고리즘을 공격하여 공격자가 원하는 코드를 실행하는 것일 수 있다. 이에 따라 LR에는 조 작에 의해 훼손된 리턴 어드레스(damaged return address)가 저장될 수 있다. ROP 공격을 구체적으로 설명하기 위해 도 4를 참조하면, 커널에 의해 커널 코드(또는 프로세스)의 실행이 시작되면, 해당 어드레스의 명령을 순차적으로 실행할 수 있다. 예를 들어, 0x14 번지의 A 함수(예:'bl A')가 실행되면, 커널은 A 함수 실행을 위한 어드레스로 이동하며, 현재 어드레스(예: 0x14)의 다음어드레스(예: 0x18)로 돌아올 수 있도록 리턴 어드레스(예: 0x18)를 커널 스택에 저장할 수 있다. 여기서, 커널 스택에 저장되는 리턴 어드레스는 현재 어드레스 값에 4를 더한 어드레스 값인 0x18 번지일 수 있다. 이때, 스택 오버플로우 공격이 발생하여 커널 스택에 저장된 리턴 어드레스(예: 0x18)가 악의적인 리턴 어 드레스(예: 0x08)로 조작된 경우, 커널은 A 함수 동작을 마치고 리턴하기 전 ldr 명령어를 통해 커널 스택에 있는 리턴 어드레스를 LR에 저장할 수 있다. 이에 따라 LR에도 조작된 리턴 어드레스(예: 0x08)가 저장될 수 있다. 커널 스택에 저장된 리턴 어드레스는 악의적인 조작에 의해 변경된 리턴 어드레스이기 때문에, 리턴 어드레스(예: 0x18)에 해당하는 어드레스로 점핑하는 것이 아닌이 조작된 리턴 어드레스(예: 0x08)로 점핑하게 될 수 있다. 이와 같이 커널의 동작이 ret 명령어에 이르게 될 경우, 의도하지 않 은 코드가 실행됨으로 인해 ROP 공격이 시작될 수 있다. 한편, 상기와 같은 ROP 공격을 막기 위해 예를 들어, 메모리에 어드레스와 메타 데이터를 저장하는 방법, 리턴 어드레스를 암호화(crypto)하는 방법, 키를 XOR 연산하는 방법, 해시(hash)값을 구하는 방법, 유효 어드레스 (valid address)에 대한 테이블을 생성하는 방법, 가젯(gaget)을 체크하는 방법과 같이 다양한 방법들이 있다. 하지만, 도 3에 도시된 바와 같이 ROP 공격을 막기 위한 다양한 방법들은 커널에서 동작하며, 커널 코드는 오픈 소스이기 때문에 커널에 취약점이 발생했을 때 상기 방법들은 정상 동작이 어려울 수 있다. 따라서 커널보다 높은 권한 레벨을 가지는 하이퍼바이저를 이용하여 메모리에서의 취약성에 대한 보안을 향상시 킬 방법을 고려할 필요가 있다. 이하, 커널보다 권한 레벨이 높은 하이퍼바이저를 통해 메모리에서의 취약성에 대한 보안을 향상시키기 위한 메 모리 관리 방법과 이를 위한 전자 장치의 동작들을 도면들을 참고하여 자세히 설명하기로 한다. 도 5는 다양한 실시 예에 따른 하이퍼바이저를 통한 보안을 위한 메모리 관리 방법을 설명하기 위한 도면이다. 도 5를 참조하면, 도 5에서는 권한 레벨 각각에 대응하는 구조만을 예시하나, 다른 모듈(또는 컴포넌트)들을 포 함할 수 있다. 예를 들어, 특권 레벨의 계층은 권한 레벨(또는 예외 레벨(exception level) EL0부터 EL3로 구분되는데, 사용자 모드는 EL0, 슈퍼바이저 모드는 EL1, 하이퍼바이저 모드는 EL2, 보안 모드는 EL3라고 칭할 수 있다. 커널은 운영체제의 구성으로, 슈퍼바이저 모드에서 실행되며 어플리케이션과 하이퍼바이저 사이 에서 제어 동작을 수행할 수 있다. 커널은 프로그램의 실행, 인터럽트, 멀티태스킹, 메모리 관리, 파일 시 스템 및 장치 드라이버를 포함할 수 있다. 커널은 컴퓨터 운영체계의 가장 중요한 핵심으로서, 운영체계의 다른 모든 부분에 여러 가지 기본적인 서 비스를 제공한다. 일반적으로, 커널에는 종료된 입출력 연산 등의 커널의 서비스를 경쟁적으로 요구하는 모든 요청들을 처리하는 인터럽트 처리기와 어떤 프로그램들이 어떤 순서로 커널의 처리시간을 공유할 것인지를 결정 하는 스케줄러 및 스케줄이 끝나면 실제로 각 프로세스들에게 컴퓨터의 사용권을 부여하는 수퍼바이저 등이 포 함되어 있다. 또한, 커널은 메모리나 저장 장치 내에서 운영체계의 어드레스 공간을 관리하고, 이들을 모든 주변장치들 과 커널의 서비스들을 사용하는 다른 사용자들에게 고루 나누어주는 메모리 관리자를 가지고 있다. 커널의 서비스는 운영체계의 다른 부분이나 시스템 호출이라고 알려진 일련의 프로그램 인터페이스들을 통해 요청될 수 있다. 커널을 유지하기 위한 코드는 지속적으로 사용되기 때문에, 커널은 자주 사용되지 않는 운영체 계의 나머지 부분에 의해 덮어씌워져 훼손되지 않도록, 보호된 메모리 영역에 적재될 수 있다. 여기서, 커널은 디바이스 하드웨어의 물리적 구성 요소들과 운영 체제의 개별 미들웨어 사이의 상호 작용 을 연결 및 관리함으로써 전자 장치의 리소스들을 각각 할당할 수 있다. 예를 들어, 디바이스 하드웨어는 다양한 하드웨어 디바이스를 포함할 수 있으며, 다양한 함수와 연산을 수행하도록 구성되는 프로세서(예: 도 1 의 프로세서)에 결합된 디바이스들일 수 있다. 예를 들어, 디바이스 하드웨어는 프로세서(예: 도 1의 프로세서)와 결합된 메모리를 포함할 수 있는데, 메 모리(예: 도 1의 메모리)는 보안을 위한 메모리 관리 방법과 관련된 다양한 기능 및 동작들을 수행하도록 구성된 컴퓨터 실행 가능한 인스트럭션들을 저장할 수 있다. 하이퍼바이저(hypervisor)는 메모리, CPU와 같은 시스템 자원에 서로 다른 운영체제의 접근을 허용함으로써, 다 수의 운영체제를 동시에 실행하기 위한 논리적 플랫폼일 수 있다. 다양한 실시 예에 따르면, 커널에서 동작하는 커널 코드에 대한 조작이 계속해서 시도되더라도, 하이퍼바 이저에서는 이를 감지하여 원래 상태로 복구할 수 있다. 예를 들어, 커널의 스택에 저장되는 리 턴 어드레스를 조작하는 공격이 발생하더라도 하이퍼바이저에서 어드레스 결함의 검출 및 복구을 수 행하여 LR에 훼손되지 않은 리턴 어드레스를 로드 하도록 할 수 있다. 또한 다양한 실시 예에 따르면, 하 이퍼바이저에서는 어드레스 결함의 검출 횟수가 임계 횟수를 초과하는지를 식별하여, 상기 임계 횟수를 초 과하는 상황이 발생하는 경우 지속적인 조작 시도라고 판단하여 상기 조작 시도로 인한 추가적인 메모리 손상을 막기 위해 시스템을 종료할 수도 있다. 따라서 다양한 실시 예에 따르면, 커널보다 권한 레벨이 높은 하이퍼바이저를 이용하여, 리턴 어드레스에 결함 이 발생하더라도 이를 복구할 수 있어 신뢰성 있는 방식으로 보안성을 보장할 수 있다. 도 6a는 다양한 실시 예에 따른 전자 장치의 내부 블록 구성도이다. 도 6a의 전자 장치는 하이퍼바이저 기반으로 메모리 보안 동작을 처리하는 장치일 수 있다. 도 6a를 참조 하면, 다양한 실시 예에 따른 하이퍼바이저 기반 전자 장치는 적어도 하나의 프로세서, 적어도 하나 의 프로세서와 작동적으로 연결된 메모리, 어드레스 결함 검출부 및 어드레스 정정부를 포 함할 수 있다. 일 실시 예에 따르면, 도 6a에서는 어드레스 결함 검출부 및 어드레스 정정부를 예시 하나, 어드레스 결함 검출부 및 어드레스 정정부에서의 동작은 하이퍼바이저 모드(예: EL2)로 동작하 는 프로세서에 의해 수행될 수 있다. 따라서, 어드레스 결함 검출부 및 어드레스 정정부는 하이 퍼바이저 모드에서 동작하는 구성부들로 소프트웨어 모듈 및/또는 하드웨어로 구현될 수 있다. 다양한 실시 예에 따르면, 전자 장치는 EL2 레지스터를 더 포함할 수 있으며, EL2 레지스터는 하이퍼바이저를 통해서만 접근 가능한 메모리 영역으로, 커널과 관련된 리턴 어드레스를 저장하는데 이용될 수 있다. 예를 들어, 프로세서 상에 있는 하이퍼바이저 모드의 레지스터(또는 메모리 영역)를 EL2 레지스터라고 칭할 수 있다. 즉, 하이퍼바이저 모드(예: EL2)에서 사용할 수 있는 레지스터가 EL2 레지스터일 수 있으며, 상기 EL2 레지스터는 슈퍼바이저 모드(예: EL1)에서는 접근 및 수정이 불가능한 레지스터일 수 있다. 일 실시 예에 따르면, 프로세서는 커널 및 하이퍼바이저 각각에서 접근할 수 있는 독립적인 하 드웨어 레지스터를 포함할 수 있으며, 하이퍼바이저가 접근 가능한 레지스터인 EL2 레지스터만이 도 시되어 있으나, 이는 단지 예시일 뿐, EL1 혹은 EL0에서 접근이 불가능하고 EL2에서 접근이 가능한 다른 레지스 터도 포함할 수 있다. 한편, 커널에서 동작하는 커널 코드에 대한 조작으로 인해 어드레스 결함이 발생하 는 경우를 방지하기 위해 프로세서는 커널 대신 하이퍼바이저를 통해 어드레스 결함 여부를 식 별하여 결함이 발생한 어드레스를 복구할 수 있다. 다양한 실시 예에 따른 프로세서는 슈퍼바이저 모드에서의 동작을 하이퍼바이저 모드로 변경하여 동작할 수 있다. 일 실시 예에 따르면, EL1에서 동작하는 모드는 프로세서의 슈퍼바이저 모드이며, EL2에서 동작 하는 모드는 프로세서의 하이퍼바이저 모드일 수 있다. 다양한 실시 예에 따르면, 오리지널 코드는 컴파일러에 의해 메모리 공격을 방어하는 코드로 컴 파일될 수 있다. 여기서, 메모리 공격을 방어하는 코드의 일 예로, ROP 공격을 방어하는 코드를 들 수 있다. 일 실시 예에 따르면, 컴파일을 통한 메모리 공격을 방어하는 코드(예: ROP 공격을 방어하는 코드)는 슈퍼바 이저 모드에서 동작하는 오리지널 코드에서 하이퍼바이저 모드를 호출할 수 있도록 수정된 코드이다. 예를 들어, ROP 공격을 방어하는 코드는 ROP 공격을 막기 위해 수정된 실행 코드(또는 실행 파일)일 수 있다. 다양한 실시 예에 따르면, 컴파일러와는 다른 컴파일러가 ROP 공격을 막기 위해 하이퍼바이저 모드에서 어 드레스 결함을 식별하는 코드를 생성할 수 있다. 다양한 실시 예에 따르면, 컴파일러는 시스템이 시작되면 커널에서 하이퍼바이저를 호출할 수 있는 명령어를 오리지널 코드(또는 실행 파일)에 추가할 수 있다. 일 실시 예에 따르면, 상기 하이퍼바이저를 호출하는 호출 명령은 하이퍼바이저콜(hypervisor call, hvc) 일 수 있다. 컴파일러를 구체적으로 살펴보기 위해 도 6b를 참조할 수 있다. 도 6b는 다양한 실시 예에 따 른 컴파일러의 일 예를 나타낸 도면이다. 예를 들어, 도 6b를 참조하면, 컴파일러는 오리지널 코드(또는 오리지널 함수)(예: 실행 파일)에 브 랜치(branch) 명령어(또는 인스트럭션(instruction)) 전에 되돌아올 리턴 어드레스를 계산하는 명령어와 하이퍼바이저콜(611, 612)을 통해 커널로부터 하이퍼바이저로 어드레스를 전달하는 명령어를 추가할 수 있 다. 또한, 컴파일러는 오리지널 함수의 에필로그에 ret 명령어 전에 커널 내의 스택에 있는 리턴 어드레 스를 가져오기(또는 로드(load)) 위한 명령어와 상기 커널 스택의 리턴 어드레스를 확인하기 위해 하이퍼바이저 모드로 변환하는 하이퍼바이저콜(613, 614) 명령어를 추가할 수 있다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드에 의해 실행될 수 있는 코드를 포함할 수 있다. 이에 따라 전자 장치의 프로세서는 하나 이상의 명령어들 중 적어도 하나의 명령어를 호출하고, 이를 실행할 수 있으며, 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행할 수 있다. 다양한 실시 예에 따르면, 어드레스 결함 검출부 및 어드레스 정정부는 슈퍼바이저 모드에서의 권한 레벨(EL1)보다 높은 권한 레벨(EL2)에 해당하는 하이퍼바이저 모드에서 동작하는 구성부일 수 있다. 예를 들어, 어드레스 결함 검출부는 ROP 체크 모듈(ROP check module)이라고 칭할 수 있으며, 어드레스 정정 모듈 (address correction module)은 어드레스 복구 모듈이라고도 칭할 수 있다. 다양한 실시 예에 따르면, 어드레스 결함 검출부의 동작은 크게 커널을 통해 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어드레스를 저장하는 동작 및 저장된 어드레스를 이용하여 어드레스 결함 여부를 식 별하는 동작으로 구분될 수 있고, 어드레스 정정부에서 결함이 발생한 어드레스를 복구하는 동작으로 구분 될 수 있다. 먼저, 다양한 실시 예에 따라 어드레스 결함 여부를 식별하는데 이용되는 어드레스를 저장하는 동작을 살펴보면, 어드레스 결함 검출부는 커널로부터 하이퍼바이저로 커널 내의 제1 메모리 영역 에 대한 적어도 하나의 어드레스(예: 제1 어드레스)를 전달하기 위한 호출 명령어를 수신할 수 있다. 예를 들어, 상기 제1 어드레스는 caller의 리턴 어드레스 또는 함수의 리턴 어드레스일 수 있다. 예를 들어, 상기 리 턴 어드레스는 커널에 의해 전달될 수 있다. 다양한 실시 예에 따르면, 어드레스 결함 검출부는 상기 호출 명령어를 통해 상기 제1 어드레스를 획득할 수 있으며, 상기 획득된 제1 어드레스에 대한 인증을 수행할 수 있다. 예를 들어, 어드레스 결함 검출부는 상기 획득된 제1 어드레스가 실제로 커널에서 관리하는(또는 접근 가능한) 메모리 어드레스 공간에 해당하 는 것인지를 식별할 수 있다. 만일 획득된 어드레스가 커널에서 관리하는 어드레스 영역에 포함되는 경우, 어드레스 결함 검출부는 상기 획득된 제1 어드레스가 커널이 접근 가능한 영역에 속하는 정상적인 어드레 스라고 간주하여 하이퍼바이저를 통해 접근 가능한 제2 메모리 영역(예: EL2 레지스터)에 저장할 수 있다. 만약 커널이 접근할 수 없는 영역의 어드레스라면 어드레스가 훼손되었다고 판단할 수 있다. 한편, 상기 EL2 레지스터에 저장된 제1 어드레스는 커널과 관련한 메모리 영역에 대한 손상 여부를 판단하는데 이용될 수 있다. 예를 들어, 어드레스 결함 검출부는 커널에 대한 ROP 공격 여부를 확인 하기 위해 상기 EL2 레지스터에 저장된 어드레스를 이용할 수 있다. 다양한 실시 예에 따르면, 호출된 함수의 동작이 모두 끝나고 이전 함수로 리턴(return) 하기 전 복귀하는 어드 레스를 검증해야 하는데, 이를 위해 현재 커널 스택에 저장된 리턴 어드레스(return address)를 하이퍼바이저콜 (hvc call)을 통해 하이퍼바이저측으로 전송한다. 이때, 전송되는 어드레스를 제 2 어드레스라 명한다. 다양한 실시 예에 따라 결함이 발생한 어드레스를 복구하는 동작을 살펴보면, 어드레스 결함 검출부는 상 기 커널로부터 제2 어드레스를 전달하기 위한 호출 명령어를 수신할 수 있다. 예를 들어, 하나의 프로세스 를 예로 들 경우, 해당 프로세스 내의 함수들을 순차적으로 실행함에 따라 어드레스 결함 검출부는 상기 커널로부터 커널 내의 스택에 저장되는 어드레스를 매번 전달받을 수 있다. 일 실시 예에 따르면, 어 드레스 결함 검출부는 호출된 함수가 동작을 마치고 이전 함수로 되돌아가기 전 호출 명령어를 통해 제2 어드레스를 획득할 수 있다. 상기 커널로부터 하이퍼바이저로 전달되는 어드레스는 커널 스택에 저장 되어 있는 리턴 어드레스(return address)이다. 다양한 실시 예에 따르면, 어드레스 결함 검출부는 상기 호출 명령어를 통해 상기 제2 어드레스를 획득할 수 있으며, 상기 획득된 제2 어드레스에 대한 인증을 수행할 수 있다. 만일 인증이 성공적일 경우, 예를 들어, 상기 획득된 제2 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는 경우, 어드레스 결함 검출부 는 EL2 레지스터에 저장된 적어도 하나의 제1 어드레스에 기반하여, 상기 획득된 제2 어드레스의 결 함 여부를 식별할 수 있다. 다양한 실시 예에 따르면, 어드레스 결함 검출부는 EL2 레지스터에 저장된 제1 어드레스와, 상기 호 출 명령어를 통해 획득된 제2 어드레스를 비교함으로써 상기 제2 어드레스에 대한 결함 여부를 식별할 수 있다. 일 실시 예에 따르면, 어드레스 결함 검출부는 EL2 레지스터에 저장된 어드레스와, 호출 명령어를 통 해 획득되는 어드레스를 XOR 연산함으로써 결함 여부를 식별할 수 있다. 일 실시 예에 따르면, 어드레스 결함이 발생하지 않은 경우 어드레스 결함 검출부는 커널로 돌아갈 수 있다. 예를 들어, 프로세서는 ROP 공격에 의한 결함을 판단하기 위해 하이퍼바이저 모드로 동작하다가 상기 결함 판단 동작을 완료한 후에는 슈퍼바이저 모드로 전환(또는 복귀)하여 동작할 수 있다. 반면, 일 실시 예에 따르면, 어드레스 결함이 발생한 경우 어드레스 결함 검출부는 어드레스 정정부 에 결함 발생을 알릴 수 있다. 예를 들어, 어드레스 결함 발생에 대응하여 어드레스 결함 검출부는 어드레 스 정정부를 호출할 수 있다. 이에 따라 어드레스 정정부는 결함이 발생한 제2 어드레스를 복구하기 위해 EL2 레지스터에 저장된 제1 어드레스를 가져와서 커널 스택을 가리키는 SP_EL1 레지스터를 통해 커널 의 스택에 훼손된 리턴 어드레스를 EL2에서 저장하고 있던 어드레스로 복구시켜줄 수 있다. 이에 따라 커 널의 스택에 훼손된 어드레스가 저장되어 있었더라도, 훼손된 어드레스는 훼손되지 않은 어드레스(예: 제1 어드레스)로 복구되기 때문에, 메모리 손상 및 공격에 의한 동작 흐름 변경을 방지할 수 있다. 다양한 실시 예에 따르면, 어드레스 정정부는 결함 검출 횟수를 카운트할 수 있다. 예를 들어, 어드레스 정정부는 어드레스 결함이 검출됨에 따른 횟수를 1씩 증가시킬 수 있으며, 임계 횟수를 초과할 경우에는 지속적인 조작 시도라고 판단하여 상기 조작 시도로 인한 추가적인 메모리 손상을 막기 위해 시스템을 종료할 수도 있다. 반면, 상기 임계 횟수를 초과하지 않은 상태에서는 어드레스 정정부는 어드레스 결함의 검출에 대응하여 EL2 레지스터에 저장해놓은 어드레스를 커널의 스택에 복원함으로써 결함이 발생한 어드레 스를 결함 발생 이전의 원래 어드레스로 복원할 수 있다. 한편, 전술한 바에서는 리턴 어드레스를 하이퍼바이저로 전달하기 위한 호출 명령어가 수신될 때마다 어드 레스 결함 검출부에서 상기 호출 명령어를 통해 획득되는 어드레스의 결함 여부를 식별하는 경우를 설명하 였으나, 다른 실시 예에 따르면 어드레스 결함 검출부에서 상기 호출 명령어를 통해 획득되는 어드레스를 일정 단위로 모아서 일괄적으로 결함 여부를 식별할 수도 있다. 다양한 실시 예에 따르면, 어드레스 결함 검출부는 상기 호출 명령어가 수신될 때마다 상기 호출 명령어를 통해 획득되는 어드레스를 상기 하이퍼바이저를 통해서 접근 가능한 제3 메모리 영역에 임시로 저장할 수 있다. 여기서, 제3 메모리 영역은 메모리에 할당된 영역일 수 있으며, 예를 들어, DRAM 영역일 수 있다. 이러한 제3 메모리 영역은 커널을 통해서는 접근 불가능한 영역인데 반해, 하이퍼바이저를 통해서만 접근 가능한 영역이다. 다양한 실시 예에 따르면, 어드레스 결함 검출부는 상기 제3 메모리 영역에 어드레스를 리스트 형태로 저 장한 후, 일정한 양의 데이터 예를 들어, 리스트에 포함되는 어드레스가 일정 개수에 도달하면, 어드레스 리스 트에 대해 결함 여부를 한 번에 식별할 수 있다. 다양한 실시 예에 따르면, 어드레스 결함 검출부는, 어드레스 리스트에 대한 결함 여부를 식별하기 위해, 상기 어드레스 리스트 중에서 이웃한 어드레스들끼리 비교 후 삭제하고, 삭제 후 남은 어드레스에 대해 결함 여 부를 식별할 수 있다. 이러한 어드레스 결함 검출 방식을 비동기식 방식이라고 칭할 수 있으며, 이에 대한 구체 적인 설명은 도 12 내지 도 15에서 후술하기로 한다. 상기한 바와 같이, 다양한 실시 예에 따르면, 일정 개수의 리스트 단위로 어드레스 결함 여부를 식별할 경우 프로세스 실행 속도가 향상될 수 있다. 한편, 전술한 바와 같은 커널 및 하이퍼바이저에서의 동작은, 전자 장치 내의 적어도 하나의 프 로세서와 연결된 메모리에 저장된 인스트럭션(또는 하나 이상의 명령어)에 따라 수행될 수 있다. 일 실시 예에 따르면, 상기 하이퍼바이저에서의 동작에 해당하는 인스트럭션은 하이퍼바이저에서 동작하 는 코드들로 구성될 수 있으며, 상기 코드들은 모듈이라고 칭할 수 있다. 예를 들어, 하이퍼바이저에서 동 작하는 모듈에 의해 커널 스택에 저장되어 있던 훼손된 어드레스를 하이퍼바이저에서 접근 가능한 메모리 영역에 저장된 적어도 하나의 어드레스 정보로 복구하는 동작이 수행될 수 있다. 다양한 실시 예에 따르면, 전자 장치는 적어도 하나의 프로세서 및 상기 적어도 하나의 프로세서 와 작동적으로 연결된 메모리를 포함하며, 상기 메모리는, 실행 시에, 상기 적어도 하나의 프로 세서가, 커널로부터 상기 커널을 통해서 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어 드레스를 획득하고, 하이퍼바이저를 통해서 접근 가능한 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하며, 상기 커널로부터 커널 스택에 저장된 어드레스 획득 시 상기 저장된 적어도 하나의 어드레스 에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별하며, 상기 어드레스의 결함을 식별한 것에 대응하여, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구하도록 하는 인스트럭션들을 저장할 수 있다. 다양한 실시 예에 따르면, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 커널로부터 상기 하이퍼 바이저로 상기 제1 메모리 영역에 대한 상기 적어도 하나의 어드레스를 전달하기 위한 호출 명령어를 통해 상기 적어도 하나의 어드레스를 획득하도록 설정될 수 있다. 다양한 실시 예에 따르면, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 적어도 하나의 어드레스 의 획득에 대응하여, 상기 적어도 하나의 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는지를 식별하 고, 상기 적어도 하나의 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는 경우 상기 제2 메모리 영역 에 상기 적어도 하나의 어드레스를 저장하도록 설정될 수 있다. 다양한 실시 예에 따르면, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 커널로부터 상기 하이퍼 바이저로 상기 어드레스를 전달하기 위한 호출 명령어를 통해, 상기 획득된 어드레스가 상기 커널과 관련한 어 드레스 영역에 포함되는지를 식별하고, 상기 획득된 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는 경우 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별하도록 설정될 수 있다. 다양한 실시 예에 따르면, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 호출 명령어를 통해 상 기 커널 스택에 저장된 어드레스를 획득할 때마다 상기 획득되는 어드레스의 결함 여부를 식별하도록 설정될 수 있다. 다양한 실시 예에 따르면, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 호출 명령어를 통해 상 기 커널 스택에 저장된 어드레스를 획득할 때마다 상기 획득되는 어드레스를 상기 하이퍼바이저를 통해서 접근 가능한 제3 메모리 영역에 저장하고, 상기 제3 메모리 영역에 저장되는 어드레스를 일정 수의 리스트 형태로 관 리하며, 상기 어드레스 리스트에 대해 결함 여부를 식별하도록 설정될 수 있다. 다양한 실시 예에 따르면, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 어드레스 리스트 중에서 이웃한 어드레스들끼리 비교 후 상기 이웃한 어드레스들이 동일하다면 상기 이웃한 어드레스들을 삭제하여, 상 기 삭제 후 남은 어드레스에 대해 결함 여부를 식별하도록 설정될 수 있다. 다양한 실시 예에 따르면, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 저장된 적어도 하나의 어드레스와 상기 획득된 어드레스를 비교하여, 비교 결과가 일치하지 않는 경우 상기 획득된 어드레스의 결함을 식별하도록 설정될 수 있다. 다양한 실시 예에 따르면, 상기 인스트럭션들은, 상기 적어도 하나의 프로세서가, 상기 비교 결과가 일치하지 않는 횟수를 카운트하고, 상기 카운트한 횟수가 미리 설정된 임계값 이상일 경우, 상기 결함이 발생한 상기 어 드레스를 복구하기 위해 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생 한 어드레스를 복구하도록 설정될 수 있다. 다양한 실시 예에 따르면, 상기 제2 메모리 영역 및 상기 제3 메모리 영역 각각은, 상기 하이퍼바이저를 통해 접근 가능하며, 상기 커널을 통해서는 접근 불가능한 영역이다. 한편, 전술한 바에서는 전자 장치 내의 각 구성부들의 동작을 설명하였으나, 상기 각 구성부에서의 동작은 시스템 온 칩(system on chip, 이하 SoC) 칩셋(chipset)을 이용하여 구현될 수 있다. 일 실시 예에 따르면, SoC 칩셋에는 프로세서 및 메모리 인터페이스(미도시) 같은 다양한 기능 블록들을 포함할 수 있다. 예를 들어, 전자 장치의 응용 프로세서(application processor, AP)는 전자 장치에서 필요한 OS, 어플리 케이션들을 구동시키며, 도 6a의 블록들을 포함하는 SoC 칩셋의 범주에 포함될 수 있다. 다양한 실시 예에 따르면, 프로세서를 포함하는 SoC 칩셋은, 일반 모드 및 하이퍼바이저 모드를 지원할 수 있다. 일 실시 예에 따르면, 일반 모드를 슈퍼바이저 모드를 포함할 수 있다. 다양한 실시 예에 따르면, 상기 SoC 칩셋은, 상기 일반 모드로 동작 중에, 커널로부터 상기 커널을 통해서 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득하고, 상기 하이퍼바이저 모드로 전환하여 하이 퍼바이저를 통해서 접근 가능한 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하며, 상기 커널로부터 커널 스택에 저장된 어드레스(예: 리턴 어드레스) 획득 시 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별하며, 상기 어드레스의 결함을 식별한 것에 대응하여, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구하도록 하는 동작을 제 어할 수 있다. 일 실시 예에 따르면, 상기 SoC 칩셋은, 상기 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장한 후에 일반 모드로 다시 동작할 수 있으며, 하이퍼바이저콜을 통해 상기 커널 스택에 저장된 어드레스 획득 시에는 하 이퍼바이저 모드로 전환할 수 있다. 또한, 상기 SoC 칩셋은, 상기 결함이 발생한 어드레스를 복구한 이후에는 다시 일반 모드로 전환할 수 있다. 도 7은 다양한 실시 예에 따른 전자 장치에서 보안을 위한 메모리 관리 동작 흐름도이다. 도 7을 참조하면, 동작 방법은 705 동작 내지 725 동작을 포함할 수 있다. 도 7의 동작 방법의 각 단계/동작은, 전자 장치(예: 도 1의 전자 장치, 도 6a의 전자 장치), 전자 장치의 적어도 하나의 프로세서(예: 도 1의 프로세서 또는 도 6a의 프로세서) 중 적어도 하나)에 의해 수행될 수 있다. 한 실시 예에서, 705 동 작 내지 725 동작들 중 적어도 하나가 생략되거나, 일부 동작들의 순서가 바뀌거나, 다른 동작이 추가될 수 있 다. 이하, 도 7의 동작을 구체적으로 설명하기 위해 도 8을 참조하기로 한다. 도 8은 다양한 실시 예에 따른 하 이퍼바이저를 통한 상세 동작을 설명하기 위한 도면이다. 도 7을 참조하면, 전자 장치는 705 동작에서 커널로부터 상기 커널을 통해서 접근 가능한 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득할 수 있다. 다양한 실시 예에 따르면, 상기 제1 메모리 영 역에 대한 적어도 하나의 어드레스를 획득하는 동작은, 상기 커널로부터 상기 하이퍼바이저로 상기 제1 메모리 영역에 대한 상기 적어도 하나의 어드레스를 전달하기 위한 호출 명령어를 통해 상기 적어도 하나의 어드레스를 획득하는 동작을 포함할 수 있다. 하이퍼바이저가 제1 메모리 영역에 대한 적어도 하나의 어드레스를 획득하는 동작을 도 8을 참조하여 설명 하면 다음과 같다. 도 8에 도시된 바와 같이, EL1에서 커널 코드의 실행 시 A 함수가 시작되면, B 함수를 호출하기 전에 A 함수 내의 리턴 어드레스를 하이퍼바이저콜을 통해 하이퍼바이저에 전달할 수 있다. 이때, B 함수를 호출하기 전에 리턴 어드레스는 EL1에 해당하는 슈퍼바이저 모드에서 산출될 수 있으며, 상기 하이퍼바이저콜을 통해 어드레스를 전달하는 동작은 커널에서 하이퍼바이저 모드로 수행될 수 있다. 일 실시 예에 따르면, 커널을 통해 어드레스를 전달하기 위한 호출 명령어에 의해 전자 장치는 슈퍼 바이저 모드에서 하이퍼바이저 모드로 전환하여 동작할 수 있다. 예를 들어, EL1의 커널 보다 높은 권한 레벨인 EL2의 하이퍼바이저에 의해 ROP 방어를 위한 동작이 수행될 수 있다. 710 동작에서 전자 장치는 하이퍼바이저를 통해서 접근 가능한 제2 메모리 영역에 상기 적어도 하나 의 어드레스를 저장할 수 있다. 다양한 실시 예에 따르면, 상기 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하는 동작은, 상기 적어 도 하나의 어드레스의 획득에 대응하여, 상기 적어도 하나의 어드레스가 상기 커널과 관련한 어드레스 영 역에 포함되는지를 식별하는 동작 및 상기 적어도 하나의 어드레스가 상기 커널과 관련한 어드레스 영역에 포함되는 경우 상기 제2 메모리 영역에 상기 적어도 하나의 어드레스를 저장하는 동작을 포함할 수 있다. 일 실시 예에 따르면, 도 8에 도시된 바와 같이 EL2에서 동작하는 어드레스 결함 검출부에 상기 적어 도 하나의 어드레스가 전달되며, 어드레스 결함 검출부는 상기 전달된 어드레스를 EL2 레지스터에 저 장할 수 있다. 예를 들어, 하이퍼바이저를 통해서 접근 가능한 제2 메모리 영역을 EL2 레지스터라고 할 경우, 상기 EL2 레지스터에 저장된 어드레스를 제1 어드레스라고 칭할 수 있다. 다양한 실시 예에 따르면, 도 8에 도시된 바와 같이 어드레스 결함 검출부의 동작은 크게 EL2 레지스터 에 상기 전달된 어드레스를 저장하는 동작 및 EL2 레지스터에 저장된 어드레스를 이용하여 어드레스 결함 여부를 식별하는 동작으로 구분될 수 있다. 반면, 다양한 실시 예에 따르면, 어드레스 정정부에서의 동작은 결함 발생 시 시스템을 종료하거나 결함이 발생한 어드레스를 복구하는 동작으로 구분될 수 있다. 715 동작에서 전자 장치는 상기 커널로부터 커널 스택에 저장된 어드레스를 획득할 수 있으며, 720 동작에서 전자 장치는 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기 획득된 어드레스의 결함 여 부를 식별할 수 있다. 예를 들어, 전자 장치는 상기 커널로부터 상기 하이퍼바이저로 상기 커널 스택에 저장된 어드레스(예: 리턴 어드레스)를 전달하기 위한 호출 명령어를 통해 상기 커널 스택에 저장된 어 드레스를 획득할 수 있다. 이에 따라 전자 장치는 EL2 레지스터에 저장된 어드레스를 이용하여, 상기획득된 어드레스(예: 리턴 어드레스)의 결함 여부를 식별할 수 있다. 상기 획득된 어드레스의 결함을 식별한 것에 대응하여, 725 동작에서 전자 장치는 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구할 수 있다. 예를 들어, 결함 발생 시 전자 장치는 EL2 레지스터에 저장된 어드레스를 이용하여 결함 발생 이전의 원래 어드레스로 복원할 수 있다. 일 실시 예에 따르면, 도 8에 도시된 바와 같이 다음 함수(예: B 함수)가 시작되고 이전 함수(예: A 함수)로 돌 아가기 전, EL1에 해당하는 슈퍼바이저 모드의 스택에 저장된 리턴 어드레스를 하이퍼바이저 콜을 통 해 하이퍼바이저에 전달한다. 상기 하이퍼바이저콜에 대응하여, 어드레스 결함 검출부는 EL2 레지스터에 저장해놓은 어드레스 를 읽어올 수 있다. 이어, 어드레스 결함 검출부는 저장해놓은 어드레스와 하이퍼바이저콜을 통해 획 득된 어드레스를 비교할 수 있다. 일 실시 예에 따르면, 비교 결과 결함이 발생한 경우, 어드레스 결함 검출부 는 결함 발생을 어드레스 정정부에게 알릴 수 있다. 예를 들어, 어드레스 결함 발생에 대응하여 어드레스 결함 검출부는 어드레스 정정부를 호출할 수 있다. 한편, 전술한 바에서는 어드레스들 간의 비교 동작이 어드레스 결함 검출부에서 수행되는 경우를 예로 들 어 설명하였으나, 다르게는 어드레스들 간의 비교 동작은 어드레스 정정부에서 수행될 수도 있다. 따라서 어드레스 정정부는 커널에서 전달받은 리턴 어드레스와 EL2 레지스터에서 읽은 어드레스를 비교 하며, 비교 결과에 기반하여 시스템을 종료하거나 결함이 발생한 어드레스를 복구한 후 커널로 복귀할 수 있다. 다양한 실시 예에 따르면, 상기 획득된 어드레스의 결함 여부를 식별하는 동작은, 상기 커널로부터 상기 하이퍼 바이저로 상기 어드레스를 전달하기 위한 호출 명령어를 통해, 상기 획득된 어드레스가 상기 커널과 관련한 어 드레스 영역에 포함되는지를 식별하는 동작 및 상기 획득된 어드레스가 상기 커널과 관련한 어드레스 영역에 포 함되는 경우 상기 저장된 적어도 하나의 어드레스에 기반하여, 상기 획득된 어드레스의 결함 여부를 식별하는 동작을 포함할 수 있다. 다양한 실시 예에 따르면, 상기 획득된 어드레스의 결함 여부를 식별하는 동작은, 상기 호출 명령어를 통해 상 기 커널 스택에 저장된 어드레스를 획득할 때마다 상기 획득되는 어드레스의 결함 여부를 식별하는 동작을 포함 할 수 있다. 다양한 실시 예에 따르면, 상기 획득된 어드레스의 결함 여부를 식별하는 동작은, 상기 호출 명령어를 통해 상 기 커널 스택에 저장된 어드레스를 획득할 때마다 상기 획득되는 어드레스를 상기 하이퍼바이저를 통해서 접근 가능한 제3 메모리 영역에 저장하는 동작 및 상기 제3 메모리 영역에 저장되는 어드레스를 일정 수의 리스트 형 태로 관리하며, 상기 어드레스 리스트에 대해 결함 여부를 식별하는 동작을 포함할 수 있다. 다양한 실시 예에 따르면, 상기 어드레스 리스트에 대해 결함 여부를 식별하는 동작은, 상기 어드레스 리스트 중에서 이웃한 어드레스 들끼리 비교 후 상기 이웃한 어드레스들이 동일하다면 상기 이웃한 어드레스들을 삭제 하는 동작 및 상기 삭제 후 남은 어드레스에 대해 결함 여부를 식별하는 동작을 포함할 수 있다. 다양한 실시 예에 따르면, 상기 획득된 어드레스의 결함 여부를 식별하는 동작은, 상기 저장된 적어도 하나의 어드레스와 상기 획득된 어드레스를 비교하는 동작 및 비교 결과가 일치하지 않는 경우 상기 획득된 어드레스의 결함을 식별하는 동작을 포함할 수 있다. 다양한 실시 예에 따르면, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스 정보를 이용하여 상기 결함 이 발생한 어드레스를 복구 동작은, 상기 비교 결과가 일치하지 않는 횟수를 카운트하는 동작 및 상기 카운트한 횟수가 미리 설정된 임계값 이상일 경우, 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스를 이용하여 상기 결함이 발생한 어드레스를 복구하는 동작을 포함할 수 있다. 예를 들어, 커널 스택에 저장되어 있던 훼손 된 어드레스를 상기 제2 메모리 영역에 저장된 적어도 하나의 어드레스 정보로 복구시킬 수 있다. 다양한 실시 예에 따르면, 상기 제2 메모리 영역 및 상기 제3 메모리 영역 각각은, 상기 하이퍼바이저를 통해 접근 가능하며, 상기 커널을 통해서는 접근 불가능한 영역일 수 있다. 상기한 바와 같이, 전자 장치는 커널보다 권한 레벨이 높은 하이퍼바이저를 이용하여, 리턴 어드레스에 결 함이 발생하더라도 이를 복구함으로써 신뢰성 있는 방식으로 보안성을 보장할 수 있다. 또한, 다양한 실시 예에 따르면, 어드레스 결함 발생 여부에 대한 식별 여부를 일정한 데이터가 모이면 한 번에 처리함으로써 성능 향상을 기대할 수 있다. 도 9는 다양한 실시 예에 따른 하이퍼바이저와 커널 내에서의 동작 상세 흐름도이며, 도 10은 도 9에 이어지는 동작 상세 흐름도이다. 이하, 다양한 실시 예에 따른 커널 영역에서 호출 명령에 따른 하이퍼바이저에서의 동작 을 구체적으로 설명하기 위해 도 11을 참조할 수 있다. 도 9를 참조하면, 905 동작에서 전자 장치는 caller 함수를 시작할 수 있다. 여기서, caller 함수(예: A 함수)는 다른 함수를 부르는 함수를 의미하며, 불리는 함수를 callee 함수(예: B 함수)라고 칭할 수 있다. 일 실시 예에 따르면, caller 함수와 callee 함수는 프로세서의 슈퍼바이저 모드에서 실행될 수 있다. 910 동작에서 전자 장치는 callee 함수 호출 전 리턴 어드레스 정보를 계산할 수 있다. 예를 들어, 전자 장치에서 인스트럭션(instruction)(또는 명령어)이 저장되는 크기를 이용하여 현재 실행되는 인스트럭션 (instruction)의 어드레스에서 리턴(return)이후 실행될 인스트럭션(instruction)의 어드레스를 계산할 수 있다. 이를 통해 caller 함수에서 callee 함수로 브랜치하기 전에 되돌아올 위치를 계산할 수 있다. 여기서, LR 의 어드레스(또는 LR값)는 하이퍼바이저에서의 동작이 완료된 후 커널을 통해 접근 가능한 제1 메모 리 영역에 대해 현재 실행 중인 프로세스에 해당하는 메모리 영역으로 되돌아가기 위한 레지스터일 수 있다. 이어, 전자 장치는 915 동작에서 하이퍼바이저콜을 수행할 수 있다. 예를 들어, 커널에서는 하이퍼바 이저를 호출하는 호출 명령인 하이퍼바이저콜을 이용하여 하이퍼바이저에게 요청을 보낼 수 있다. 예를 들어, 도 11에 도시된 바와 같이, EL1에서 커널 코드에 대한 실행 요청에 대응하여, 커 널 코드 내의 caller 함수가 시작될 수 있다. caller 함수가 시작됨에 따라 순차적으로 어드레스에 해당 하는 명령어를 실행하게 되는데, Ox14 번지의 callee 함수를 호출하기 전에 리턴 어드레스를 Ox0c 번지에서 계 산 할 수 있다. 예를 들어, OxOc 번지에 저장되어 있는 명령어가 수행되면서 상기 명령어에 의해 상기 리턴 어 드레스가 계산될 수 있다. 다음 차례의 Ox10 번지의 하이퍼바이저콜을 통해 EL2의 어드레스 결함 검출부 로 상기 callee 함수를 호출하기 전에 되돌아올 상기 계산한 어드레스를 전달할 수 있다. 상기 하이퍼바이저콜을 통해 전달되는 어드레스에 기반하여, 전자 장치는 920 동작에서 커널과 관련한 어 드레스 영역에 포함되는지를 식별할 수 있다. 예를 들어, 도 11에서와 같이 전자 장치의 어드레스 결함 검 출부는 하이퍼바이저콜을 통해 전달되는 어드레스에 대한 인증을 수행할 수 있다. 만일 상기 하이퍼바이저콜을 통해 전달되는 어드레스가 커널과 관련한 어드레스 영역에 포함되지 않는 경우, 비 정상적인 어드레스라고 간주하여 930 동작에서 시스템을 종료할 수 있다. 반면, 상기 하이퍼바이저콜을 통해 전 달되는 어드레스가 커널과 관련한 어드레스 영역에 포함되는 경우, 전자 장치는 925 동작에서 하이퍼바이 저를 통해서 접근 가능한 영역(예: 제2 메모리 영역)(예: EL2 레지스터)에 상기 어드레스를 저장 후 커널 로 리턴(또는 복귀)할 수 있다. 한편, 도 9의 925 동작은 도 10의 935 동작에 이어질 수 있다. 예를 들어, 도 11에서와 같이 전자 장치의 어드레스 결함 검출부는 하이퍼바이저콜을 통해 전 달되는 커널의 어드레스에 대한 인증이 성공적일 경우 상기 전달된 어드레스를 EL2 레지스터에 저장 한 후, 0x04 번지의 ret 명령에 따라 커널로 리턴할 수 있다. 상기 리턴에 대응하여, 전자 장치는 EL1에 해당하는 슈퍼바이저 모드로 다시 동작하며. 0x14 번지의 callee 함수로의 브랜치 명령에 대응하여 0x2c 번지의 callee 함수로 점프할 수 있다. 도 10을 참조하면, 전자 장치는 935 동작에서 callee 함수가 시작되면 상기 어드레스를 커널의 스택에 저 장할 수 있다. 여기서, 커널 스택은 프로세서로 하여금 호출된 함수들이 완료하는 때에 이전 함수로 점핑하게 하기 위한 리턴 어드레스들을 포함할 수 있다. 예를 들어, 도 11에 도시된 바와 같이 0x2c 번지의 callee 함수 가 시작되면 0x30 번지에 해당하는 동작은 커널 스택에 되돌아갈 어드레스(Ox18)를 저장하는 동작일 수 있다. 상기한 바와 같이 전자 장치는 callee 함수 동작을 수행할 수 있으며, callee 함수 동작 후 caller 함수로 돌아가기 전에 945 동작에서 하이퍼바이저를 호출하는 호출 명령인 하이퍼바이저콜(hypervisor call)을 이용하 여 하이퍼바이저에게 요청을 보낼 수 있다. 예를 들어, 도 11에 도시된 바와 같이 전자 장치의 어드 레스 결함 검출부는 하이퍼바이저콜을 통해 전달되는 어드레스에 대한 인증을 수행할 수 있다. 950 동작에서 전자 장치는 920 동작에서와 동일하게 하이퍼바이저콜을 통해 전달되는 어드레스에 기반하여, 커널과 관련한 어드레스 영역에 포함되는지를 식별할 수 있다. 만일 상기 하이퍼바이저콜을 통해 전달되는 어드레스가 커널과 관련한 어드레스 영역에 포함되지 않는 경우, 비 정상적인 어드레스라고 간주하여 955 동작에서 시스템을 종료할 수 있다. 반면, 상기 하이퍼바이저콜을 통해 전 달되는 커널 스택에 저장된 어드레스가 커널과 관련한 어드레스 영역에 포함되는 경우, 전자 장치는 960 동작에서 하이퍼바이저를 통해서 접근 가능한 영역에 저장된 어드레스와, 상기 전달된 커널 스택에 저장된 어드레스를 비교할 수 있다. 예를 들어, 도 11에서와 같이 전자 장치의 어드레스 결함 검출부는 하이퍼바이저콜을 통해 전 달되는 어드레스에 대한 인증이 성공적일 경우 상기 전달된 어드레스와, EL2 레지스터에 저장된 어 드레스를 가져와서 비교할 수 있다. 도 11의 Ox08 번지부터 0x20 번지의 동작은 어드레스 결함 검 출 동작에 해당할 수 있다. 965 동작에서 전자 장치는 비교 결과가 일치하는지를 식별할 수 있다. 일 실시 예에 따르면, 상기 비교 동 작은 XOR(exclusive or) 연산 동작일 수 있다. 만일 비교 결과가 일치하는 경우, 예를 들어, XOR 연산 결과가 '0'인 경우 970 동작에서 커널로 리턴 후 다음 함수 동작을 수행할 수 있다. 예를 들어, 하이퍼바이저 모드에서 비교 결과에 기반한 ROP 공격에 대한 검사를 완료한 후에는 슈퍼바이저 모드로 복귀할 수 있다. 반면, 비교 결과가 일치하지 않는 경우 예를 들어, XOR 연산 결과가 '0'이 아닌 경우 커널 스택에 저장된 어드 레스가 조작에 의해 손상된 것일 수 있다. 이에 따라 전자 장치는 상기 하이퍼바이저콜을 통해 전달되는 커널 스택 내의 어드레스가 결함이 발생한 어드레스라고 간주하여, 975 동작에서 결함 발생 횟수를 카운트할 수 있다. 980 동작에서 전자 장치는 상기 결함 발생을 카운트한 횟수가 임계값 이상인지를 식별할 수 있다. 만일 결 함 발생을 카운트한 횟수가 임계값 이상인 경우 전자 장치는 985 동작에서 시스템을 종료할 수 있다. 예를 들어, 상기 임계 횟수를 초과하는 상황이 발생하는 경우 지속적인 조작 시도라고 판단하여 상기 조작 시도로 인 한 추가적인 메모리 손상을 막기 위해 시스템을 종료할 수도 있다. 반면, 임계값 이내의 결함 발생일 경우 990 동작에서 하이퍼바이저를 통해서 접근 가능한 영역(예: EL2 레지스터)에 저장된 어드레스를 이용하여 커널 스택에 훼손된 어드레스를 복구할 수 있다. 예를 들어, 도 11에서와 같이 XOR 연산을 통한 비교 결과가'0'일 경우 두 어드레스가 동일한 것이므로, Ox20 번 지의 ret 명령어에 따라 커널로 리턴할 수 있다. 반면, XOR 연산을 통한 비교 결과가'0'이 아닐 경 우 어드레스 결함이라고 간주하여 어드레스 정정부에 해당하는 Ox20 번지로 점프할 수 있다. 어드레 스 정정부에서는 Ox20 번지의 결함 발생 횟수를 카운트한 후, Ox24 번지의 카운트한 결함 발생 횟수 와 임계 횟수를 비교할 수 있다. 일 실시 예에 따르면, 상기 결함 발생 횟수를 카운트하기 위한 'count' 값은 시스템 시작 시 0으로 초기화되며, 상기 임계 횟수는 구현에 따라 다양한 값으로 설정될 수 있다. 상기 비 교 결과 결함 발생 횟수가 임계 횟수에 도달하지 않은 경우에는 0x30 번지의 ret 명령어에 따라 어드레스 결함 검출부의 동작에 해당하는 Ox1c로 리턴한 후, 결함이 발생한 어드레스를 복구하기 위해 커널 의 스택에 저장된 훼손된 어드레스를 EL2 레지 레지스터에 저장된 어드레스 정보로 대체 할 수 있다. 이에 따라 0x20 번지의 ret 명령어에 따라 커널로 리턴할 수 있다. 이와 같이 하이퍼바이저 모드에서의 비교 결과에 기반한 어드레스 결함 검출 및 복구 동작이 완료되면 슈퍼바이저 모드로 전환될 수 있 다. 예를 들어, 어드레스 복구 동작은, 하이퍼바이저에서 하이퍼바이저콜을 통해 커널 스택의 어드레스를 알 수 있을 뿐만 아니라, 커널 스택에 저장된 리턴 어드레스값에 접근할 수 있기 때문에 커널 스택에 직접 접근 하여 어드레스를 바꿔치기 하는 것으로 이해될 수 있을 것이다. 이때, 커널 스택에 접근하기 위해 SP_EL1이 사 용될 수 있다. 이후, 슈퍼바이저 모드에서 커널 스택에 복구된 어드레스를 0x3c 번지에서 LR에 넣어 ret 명령어에 이르 게 될 경우, 훼손되지 않은 어드레스로 이동할 수 있다. 도 12는 다양한 실시 예에 따른 비동기 방식의 어드레스 결함 검출 방법을 설명하기 위한 도면이다. 이하, 도 12를 참조하여, 호출 명령어가 수신될 때마다 어드레스의 결함 여부를 식별하지 않고 호출 명령어를 통해 획득되는 어드레스를 일정 단위로 모아서 일괄적으로 결함 여부를 식별하는 방법을 설명하기로 한다. 도 12를 참조하면, 커널 코드는 A 함수를 caller 함수라고 할 경우 calllee 함수인 B 함수 및 C 함수와, B 함수가 caller 함수가 되어 B 함수의 실행 시 호출되는 calllee 함수인 D 함수가 포함된 경우를 예시하고 있 다. 각 함수들 실행 시 어드레스 정보를 하이퍼바이저로 전달하기 위한 하이퍼바이저콜을 통해 어드레스 결함 검출 동작 및 복구 동작이 수행될 수 있다. 도 12에 도시된 바와 같이 B 함수를 호출하기 전에 어드레스가 하이퍼바 이저콜을 통해 하이퍼바이저로 전달될 수 있다. 일 실시 예에 따르면, 하이퍼바이저 모드로 동작하는 프로세서는 상기 어드레스들을 일정 단위로 모은 어 드레스 리스트를 관리할 수 있으며, 리스트 단위로 어드레스들에 대한 결함 여부를 한 번에 식별하기 위한 변수 들을 설정할 수 있다. 예를 들어, 하이퍼바이저 모드로 동작하는 프로세서는 동작하는 일정 개수의 어드레 스들을 모으기 위한 임계값, caller 함수에서 어드레스를 하이퍼바이저콜을 통해 전달했을 때의 호출한 횟수(예: caller_count), call 함수에서 어드레스를 하이퍼바이저콜을 통해 전달했을 때의 호출된 횟수(예: callee_count)를 관리할 수 있다. 여기서, 리스트 단위로 어드레스 결함의 식별 동작은 프로세서에서 수행 되는 것으로 설명하였으나, 어드레스 결함 검출부에 의해 수행될 수도 있다. 일 실시 예에 따르면, 프로세서는 하이퍼바이저콜이 수신될 때마다 상기 하이퍼바이저콜을 통해 전달되는 어드레스를 하이퍼바이저를 통해서만 접근 가능한 제3 메모리 영역에 리스트 형태로 저장하여 관리할 수 있으며, 리스트 형태의 어드레스들에 대해 결함 여부를 식별할 수 있다. 여기서, 제3 메모리 영역은 메모리 에 할당된 영역일 수 있으며, 예를 들어, DRAM 영역일 수 있다. 이러한 제3 메모리 영역은 커널을 통 해서는 접근 불가능한 영역인데 반해, 하이퍼바이저를 통해서만 접근 가능한 영역일 수 있다. 도 12에서는 하이퍼바이저콜이 수신될 때마다 각각의 하이퍼바이저콜을 통해 전달되는 어드레스는 예를 들어, OxOc, Ox24, Ox24, OxOc, Ox14, Ox14의 순서로 생성되며, 호출한 횟수(예: caller_count) 및 호출된 횟수(예: callee_count)는 3인 경우를 예시하고 있다. 다양한 실시 예에 따르면, 상기 제3 메모리 영역에 어드레스 정보를 리스트 형태로 저장한 후, 일정한 양의 데 이터 예를 들어, 리스트에 포함되는 어드레스 정보가 일정 개수에 도달하면, 어드레스 정보 리스트에 대해 결함 여부를 한 번에 식별할 수 있다. 이를 구체적으로 설명하기 위해 도 13 내지 도 15를 참조할 수 있다. 도 13 내 지 도 15는 일 실시 예에 따른 어드레스 리스트를 이용한 어드레스 결함 검출 방법을 설명하기 위한 도면이다. 먼저, 도 13에 도시된 바와 같이 프로세서는 어드레스 리스트 중에서 이웃한 어드레스들끼리 삭제할 수 있다. 예를 들어, 프로세서는 인접한 두 어드레스가 동일하면 즉, 동일한 어드레스 값을 가지면, 동일한 어드레스 값을 가지는 이웃하는 두 어드레스를 리스트에서 삭제할 수 있다. 이와 같은 방식으로 어드레스 리스트 내에 남아있는 인접한 두 어드레스를 비교하여, 동일한 경우 삭제하고, 다시 남겨진 인 접한 두 어드레스를 비교하여 삭제할 수 있다. 위 동작이 반복된 이후 어드레스 리스트 내에 남아 있는 어드레스가 없는 경우에는 결함이 발생하지 않았다고 식별할 수 있다. 일 실시 예에 따르면, 상기 인접한 두 어드레스를 삭제한 이후에 어드레스 리스트 내에 어드레스 정보가 남아있 을 때 호출한 횟수(예: caller_count)에서 호출된 횟수(예: callee_count)를 뺀 수와 남아있는 어드레스의 수가 일치하다면 결함이 발생하지 않았다고 간주할 수 있다. 예를 들어, 호출한 횟수(예: caller_count)가 3이고, 호출된 횟수(예: callee_count)가 2라고 할 경우, 프로세 서는 도 14에 도시된 바와 같이 어드레스 리스트 중에서 이웃한 어드레스들(1410, 1420)끼리 삭제 후 남은 어드레스에 대해 결함 여부를 식별할 수 있다. 도 14에서는 호출한 횟수(예: caller_count) 3에서 호출된 횟수 (예: callee_count) 2를 빼고 남은 어드레스의 수가 1개이며 어드레스 리스트에 인접한 두 어드레스가 같 은 경우 삭제하고 남은 어드레스가 1개로 동일함으로, 프로세서는 어드레스 리스트 내의 모든 어드레스에 대한 검증이 완료되었다고 판단할 수 있다. 반면, 도 15에서는 어드레스에 대한 조작에 의해 리턴 어드레스가 변조되어, 어드레스 리스트 내의 맨 처음 어 드레스가 0xOc였으나, 0xOa로 변조된 경우를 예시하고 있다. 도 15를 참조하면, 프로세서는 어드레스 리스 트 중에서 이웃한 어드레스들(1510, 1520)끼리 삭제 후 리스트 내의 남은 어드레스들(1500, 1530)에 대해 호출 한 횟수(예: caller_count)와 호출된 횟수(예: callee_count)의 차이와 비교하여 결함 여부를 식별할 수 있다. 예를 들어, 호출한 횟수(예: caller_count) 및 호출된 횟수(예: callee_count)가 각각 3이라고 할 경우, 호출 한 횟수(예: caller_count) 3에서 호출된 횟수(예: callee_count) 3을 빼고 남은 어드레스의 수는 0이어야 한 다. 하지만, 도 15에 도시된 바와 같이 2개의 삭제되지 않는 어드레스들이 리스트 내에 남겨진 경우에는 어드레 스에 대한 조작이 발생하였다고 판단할 수 있다. 이에 따라 프로세서는 어드레스 조작 시도로 인한 추가적인 메모리 손상을 막기 위해 시스템을 종료할 수도 있다. 예를 들어, 프로세서는 시스템을 리셋할 수도 있 다. 다양한 실시 예에 따르면, 어드레스 결함 발생 여부에 대한 식별 여부를 일정한 데이터가 모이면 한 번에 처리함으로써 성능 향상을 기대할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다."}
{"patent_id": "10-2021-0075716", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시 예에 따른 네트워크 환경 내의 전자 장치의 블럭도이다. 도 2는 전자 장치에서의 프로세서 아키텍처(architecture)에서의 예외 레벨 (exception level)을 나타낸 개념도 이다. 도 3은 커널 영역을 통한 보안을 위한 메모리 관리 방법을 설명하기 위한 도면이다. 도 4는 커널 영역에서 ROP 공격의 일 예를 설명하기 위한 도면이다. 도 5는 다양한 실시 예에 따른 하이퍼바이저를 통한 보안을 위한 메모리 관리 방법을 설명하기 위한 도면이다. 도 6a는 다양한 실시 예에 따른 전자 장치의 내부 블록 구성도이다. 도 6b는 다양한 실시 예에 따른 컴파일러의 일 예를 나타낸 도면이다. 도 7은 다양한 실시 예에 따른 전자 장치의 보안을 위한 메모리 관리 동작 흐름도이다. 도 8은 다양한 실시 예에 따른 하이퍼바이저를 통한 상세 동작을 설명하기 위한 도면이다. 도 9는 다양한 실시 예에 따른 하이퍼바이저와 커널 내에서의 동작 상세 흐름도이다. 도 10은 상기 도 9에 이어지는 동작 상세 흐름도이다. 도 11은 다양한 실시 예에 따른 커널 영역에서 호출 명령에 따른 하이퍼바이저에서의 동작을 설명하기 위한 도 면이다. 도 12는 다양한 실시 예에 따른 비동기 방식의 어드레스 결함 검출 방법을 설명하기 위한 도면이다. 도 13 내지 도 15는 일 실시 예에 따른 어드레스 리스트를 이용한 어드레스 결함 검출 방법을 설명하기 위한 도 면이다. 도면의 설명과 관련하여, 동일 또는 유사한 구성 요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있 다."}
