{"patent_id": "10-2023-0075646", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0175560", "출원번호": "10-2023-0075646", "발명의 명칭": "블록체인 트랜잭션 번들링 장치 및 방법", "출원인": "삼성에스디에스 주식회사", "발명자": "하조슈아"}}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컴퓨팅 장치에서 수행되는 트랜잭션 번들링 방법에 있어서,클라이언트 단말로부터 수신된 트랜잭션 요청들을 번들링 모델에 입력하는 단계;상기 번들링 모델로부터 출력된 각 요청의 처리 우선순위를 이용하여, 동일한 처리 우선순위를 갖는 트랜잭션요청들을 번들링하는 단계;상기 번들링을 통해 생성된 복수의 트랜잭션 번들의 처리 우선순위에 따라, 상기 각 트랜잭션 번들의 자원 할당량을 결정하는 단계;상기 자원 할당량을 반영하여 상기 복수의 트랜잭션 번들을 처리하도록 블록체인 네트워크의 복수의 블록체인노드를 제어하는 단계; 및상기 복수의 트랜잭션 번들 각각의 처리 상태를 상기 클라이언트 단말로 회신하는 단계를 포함하는,트랜잭션 번들링 방법."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 각 트랜잭션 번들의 자원 할당량을 결정하는 단계는:상기 처리 우선순위 별로 자원 할당량을 생성하는 단계;상기 생성된 자원 할당량을 대응하는 트랜잭션 번들에 맵핑할 것을 요청하는 단계; 및상기 맵핑 요청에 응답하여, 상기 생성된 자원 할당량을 상기 대응하는 트랜잭션 번들에 맵핑하는 단계를 포함하는,트랜잭션 번들링 방법."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 복수의 트랜잭션 번들을 처리하는 단계는:상기 복수의 트랜잭션 번들의 처리 요청에 응답하여, 상기 자원 할당량에 따라 상기 각 블록체인 노드로 상기블록체인 네트워크의 자원을 배분하는 단계; 및상기 배분된 자원에 따라 상기 각 블록체인 노드가 상기 복수의 트랜잭션 번들을 처리하도록 제어하는 단계를포함하는,트랜잭션 번들링 방법."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,상기 복수의 트랜잭션 번들 각각의 처리 상태는 상기 각 트랜잭션 번들의 처리가 완료된 상태 또는 상기 각 트랜잭션 번들의 처리가 완료되지 않은 상태 중 하나인,트랜잭션 번들링 방법."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2024-0175560-3-제 1 항에 있어서,상기 번들링 모델은,상기 각 블록체인 트랜잭션의 트랜잭션 요청 ID, 트랜잭션 유형, 거래 우선순위를 특징으로서 이용하여 상기 처리 우선순위를 예측하는,트랜잭션 번들링 방법."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "트랜잭션 번들링을 수행하는 장치에 있어서,하나 이상의 인스트럭션들(instructions)을 저장하는 메모리;블록체인 네트워크와 통신하는 통신 인터페이스; 및상기 하나 이상의 인스트럭션들을 실행함으로써,클라이언트 단말로부터 수신된 트랜잭션 요청들을 번들링 모델에 입력하고, 상기 번들링 모델로부터 출력된 각요청의 처리 우선순위를 이용하여 동일한 처리 우선순위를 갖는 트랜잭션 요청들을 번들링하고, 상기 번들링을통해 생성된 복수의 트랜잭션 번들의 처리 우선순위에 따라, 상기 각 트랜잭션 번들의 자원 할당량을 결정하고,그리고 상기 자원 할당량을 반영하여 상기 복수의 트랜잭션 번들을 처리하도록 블록체인 네트워크의 복수의 블록체인 노드를 제어하는 프로세서를 포함하는,번들링 장치."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6 항에 있어서,상기 프로세서는 상기 자원 할당량에 따라 상기 각 블록체인 노드로 상기 블록체인 네트워크의 자원을배분하고, 상기 배분된 자원에 따라 상기 각 블록체인 노드가 상기 복수의 트랜잭션 번들을 처리하도록 제어하는,번들링 장치."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 6 항에 있어서,상기 번들링 모델은,상기 각 블록체인 트랜잭션의 트랜잭션 요청 ID, 트랜잭션 유형, 거래 우선순위를 특징으로서 이용하여 상기 처리 우선순위를 예측하는,번들링 장치."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "컴퓨팅 장치에서 수행되는 트랜잭션 번들링 방법에 있어서,트랜잭션 요청 ID, 트랜잭션 유형, 거래 유형, 거래 우선순위, 거래 금액, 거래 수수료, 트랜잭션 타임스탬프,트랜잭션 입력, 트랜잭션 출력, 거래 규모를 포함하는 블록체인 트랜잭션 데이터를 전처리하는 단계;상기 전처리된 데이터로부터, 상기 블록체인 트랜잭션 데이터에 대응하는 트랜잭션 요청의 처리 우선순위를 예측하기 위한 특징을 추출하는 단계;상기 블록체인 트랜잭션 데이터 및 상기 추출된 특징을 사용하여, 클라이언트 단말로부터 수신된 트랜잭션 요청들의 처리 우선순위를 예측하기 위한 번들링 모델을 학습시키는 단계;상기 번들링 모델의 예측 정확도를 평가하는 단계;상기 평가 결과를 반영하여 상기 번들링 모델의 파라미터들을 최적화하는 단계;공개특허 10-2024-0175560-4-상기 클라이언트 단말로부터 수신된 트랜잭션 요청들을 번들링 모델에 입력하여 출력된 각 요청의 처리 우선순위를 이용하여, 동일한 처리 우선순위를 갖는 트랜잭션 요청들을 번들링하는 단계를 포함하는,트랜잭션 번들링 방법."}
{"patent_id": "10-2023-0075646", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 9 항에 있어서,상기 특징을 추출하는 단계는:상기 트랜잭션 요청 ID, 상기 트랜잭션 유형, 상기 거래 우선순위를 상기 처리 우선순위를 예측하기 위한 특징으로서 추출하는 단계를 포함하는,트랜잭션 번들링 방법."}
{"patent_id": "10-2023-0075646", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 실시 예에 따른 트랜잭션 번들링 방법은 컴퓨팅 장치에서 수행되고, 클라이언트 단말로부터 수신된 트 랜잭션 요청들을 번들링 모델에 입력하는 단계, 상기 번들링 모델로부터 출력된 각 요청의 처리 우선순위를 이용 하여, 동일한 처리 우선순위를 갖는 트랜잭션 요청들을 번들링하는 단계, 상기 번들링을 통해 생성된 복수의 트 랜잭션 번들의 처리 우선순위에 따라, 상기 각 트랜잭션 번들의 자원 할당량을 결정하는 단계, 상기 자원 할당량 을 반영하여 상기 복수의 트랜잭션 번들을 처리하도록 블록체인 네트워크의 복수의 블록체인 노드를 제어하는 단 계, 및 상기 복수의 트랜잭션 번들 각각의 처리 상태를 상기 클라이언트 단말로 회신하는 단계를 포함할 수 있다."}
{"patent_id": "10-2023-0075646", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 블록체인 트랜잭션 번들링 장치 및 방법에 관한 것으로, 좀 더 상세하게는 블록체인 시스템에서 인공 지능에 기반하여 블록체인 트랜잭션 요청을 우선순위 별로 번들링하고, 우선순위에 따라 블록체인 네트워크의 자원을 다르게 할당함으로써 블록체인 트랜잭션의 처리 성능을 높이기 위한 장치 및 방법에 관한 것이다."}
{"patent_id": "10-2023-0075646", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "블록체인(blockchain)은 지속적으로 증가하는 데이터를 특정 단위의 블록에 기록하고, P2P(peer-to-peer) 네트 워크를 구성하는 각각의 블록체인 노드들이 블록을 체인 형태의 자료 구조로 관리하는 데이터 관리 기술을 의미 한다. 블록체인은 네트워크에 속한 모든 블록체인 노드가 모든 트랜잭션을 기록하고 검증하는 합의(consensus) 프로세스를 통해 트랜잭션의 무결성 및 보안성을 보장한다. 그러나, 블록체인의 합의 프로세스는 블록체인 기반 시스템의 처리 능력을 단일 노드의 처리 능력으로 제한하기 때문에, 블록체인 기반 시스템의 트랜잭션 처리 성능을 저하시키는 주된 요인이기도 하다. 트랜잭션 처리 성능 을 향상시키기 위해 복수의 트랜잭션을 종합하여 처리하는 배치 프로세싱 기술이 존재하나, 이러한 배치 프로세 싱은 미리 정해진 규칙에 의해 처리되므로 유연성이 떨어질 수 있고, 블록체인 네트워크 자원의 비효율적인 사 용이 강제될 수 있다. 따라서, 여러 트랜잭션을 한 번에 처리하면서도 블록체인 네트워크 자원을 효율적으로 사 용할 수 있도록 하는 방법이 요구된다. 선행기술문헌 특허문헌 (특허문헌 0001) 등록특허공보 제10-2444425호 (등록일자 2022.09.14)"}
{"patent_id": "10-2023-0075646", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시의 실시 예를 통해 해결하고자 하는 기술적 과제는, 인공지능을 이용하여 트랜잭션 유형, 혼잡도, 시간 대, 거래 간 의존성, 금액, 발신자 및 수신자 주소, 거래 시간, 거래 해시, 거래 수수료 등과 같은 변수에 따라 블록체인 트랜잭션의 처리 우선순위를 결정하고, 결정된 우선순위 별로 트랜잭션 요청을 번들링하고, 높은 우선 순위를 갖는 트랜잭션 번들의 처리에 블록체인 네트워크의 자원을 더 많이 할당함으로써 블록체인 트랜잭션의 처리 속도를 향상시킬 수 있는 방법을 제공하는 것이다."}
{"patent_id": "10-2023-0075646", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 실시 예에 따른 트랜잭션 번들링 방법은 컴퓨팅 장치에서 수행되고, 클라이언트 단말로부터 수신된 트랜잭션 요청들을 번들링 모델에 입력하는 단계, 상기 번들링 모델로부터 출력된 각 요청의 처리 우선순위를이용하여, 동일한 처리 우선순위를 갖는 트랜잭션 요청들을 번들링하는 단계, 상기 번들링을 통해 생성된 복수 의 트랜잭션 번들의 처리 우선순위에 따라, 상기 각 트랜잭션 번들의 자원 할당량을 결정하는 단계, 상기 자원 할당량을 반영하여 상기 복수의 트랜잭션 번들을 처리하도록 블록체인 네트워크의 복수의 블록체인 노드를 제어 하는 단계, 및 상기 복수의 트랜잭션 번들 각각의 처리 상태를 상기 클라이언트 단말로 회신하는 단계를 포함할 수 있다. 일 실시 예에서, 상기 각 트랜잭션 번들의 자원 할당량을 결정하는 단계는, 상기 처리 우선순위 별로 자원 할당 량을 생성하는 단계, 상기 생성된 자원 할당량을 대응하는 트랜잭션 번들에 맵핑할 것을 요청하는 단계, 및 상 기 요청에 응답하여, 상기 생성된 자원 할당량을 상기 대응하는 트랜잭션 번들에 맵핑하는 단계를 포함할 수 있 다. 일 실시 예에서, 상기 복수의 트랜잭션 번들을 처리하는 단계는, 상기 복수의 트랜잭션 번들의 처리 요청에 응 답하여, 상기 자원 할당량에 따라 상기 각 블록체인 노드로 상기 블록체인 네트워크의 자원을 배분하는 단계, 및 상기 배분된 자원에 따라 상기 각 블록체인 노드가 상기 복수의 트랜잭션 번들을 처리하도록 제어하는 단계 를 포함할 수 있다. 일 실시 예에서, 상기 복수의 트랜잭션 번들 각각의 처리 상태는 상기 각 트랜잭션 번들의 처리가 완료된 상태 또는 상기 각 트랜잭션 번들의 처리가 완료되지 않은 상태 중 하나일 수 있다. 일 실시 예에서, 상기 번들링 모델은, 상기 각 블록체인 트랜잭션의 트랜잭션 요청 ID, 트랜잭션 유형, 거래 우 선순위를 특징으로서 이용하여 상기 처리 우선순위를 예측할 수 있다. 본 개시의 다른 실시 예에 따른 트랜잭션 번들링을 수행하는 장치는 하나 이상의 인스트럭션들(instructions)을 저장하는 메모리, 블록체인 네트워크와 통신하는 통신 인터페이스, 및 상기 하나 이상의 인스트럭션들을 실행함 으로써, 클라이언트 단말로부터 수신된 트랜잭션 요청들을 번들링 모델에 입력하고, 상기 번들링 모델로부터 출 력된 각 요청의 처리 우선순위를 이용하여 동일한 처리 우선순위를 갖는 트랜잭션 요청들을 번들링하고, 상기 번들링을 통해 생성된 복수의 트랜잭션 번들의 처리 우선순위에 따라, 상기 각 트랜잭션 번들의 자원 할당량을 결정하고, 그리고 상기 자원 할당량을 반영하여 상기 복수의 트랜잭션 번들을 처리하도록 블록체인 네트워크의 복수의 블록체인 노드를 제어하는 프로세서를 포함할 수 있다. 일 실시 예에서, 상기 프로세서는 상기 자원 할당량에 따라 상기 각 블록체인 노드로 상기 블록체인 네트워크의 자원을 배분하고, 상기 배분된 자원에 따라 상기 각 블록체인 노드가 상기 복수의 트랜잭션 번들을 처리하도록 제어할 수 있다. 일 실시 예에서, 상기 번들링 모델은, 상기 각 블록체인 트랜잭션의 트랜잭션 요청 ID, 트랜잭션 유형, 거래 우 선순위를 특징으로서 이용하여 상기 처리 우선순위를 예측할 수 있다. 본 개시의 또 다른 실시 예에 따른 트랜잭션 번들링 방법은 컴퓨팅 장치에서 수행되고, 트랜잭션 요청 ID, 트랜 잭션 유형, 거래 유형, 거래 우선순위, 거래 금액, 거래 수수료, 트랜잭션 타임스탬프, 트랜잭션 입력, 트랜잭 션 출력, 거래 규모를 포함하는 블록체인 트랜잭션 데이터를 전처리하는 단계, 상기 전처리된 데이터로부터, 상 기 블록체인 트랜잭션 데이터에 대응하는 트랜잭션 요청의 처리 우선순위를 예측하기 위한 특징을 추출하는 단 계, 상기 블록체인 트랜잭션 데이터 및 상기 추출된 특징을 사용하여, 클라이언트 단말로부터 수신된 트랜잭션 요청들의 처리 우선순위를 예측하기 위한 번들링 모델을 학습시키는 단계, 상기 번들링 모델의 예측 정확도를 평가하는 단계, 상기 평가 결과를 반영하여 상기 번들링 모델의 파라미터들을 최적화하는 단계, 상기 클라이언 트 단말로부터 수신된 트랜잭션 요청들을 번들링 모델에 입력하여 출력된 각 요청의 처리 우선순위를 이용하여, 동일한 처리 우선순위를 갖는 트랜잭션 요청들을 번들링하는 단계를 포함할 수 있다. 일 실시 예에서, 상기 특징을 추출하는 단계는 상기 트랜잭션 요청 ID, 상기 트랜잭션 유형, 상기 거래 우선순 위를 상기 처리 우선순위를 예측하기 위한 특징으로서 추출하는 단계를 포함할 수 있다."}
{"patent_id": "10-2023-0075646", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 개시의 바람직한 실시 예들을 상세히 설명한다. 본 개시의 이점 및 특징, 그 리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 상세하게 후술되어 있는 실시 예들을 참조하면 명확해질 것이다. 그러나 본 개시는 이하에서 설명되는 실시 예들에 한정되는 것이 아니라 서로 다른 다양한 형태로 구현 될 수 있으며, 단지 본 실시 예들은 본 개시가 완전하도록 하고, 본 개시가 속하는 기술 분야에서 통상의 지식 을 가진 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것이며, 본 개시는 청구항의 범주에 의해 정의 될 뿐이다. 각 도면의 구성 요소들에 참조 부호를 부가함에 있어서, 동일한 구성 요소들에 대해서는 비록 다른 도면상에 표 시되더라도 가능한 한 동일한 부호를 가지도록 하고 있음에 유의해야 한다. 또한, 본 개시를 설명함에 있어, 관 련된 공지 구성 또는 기능에 대한 구체적인 설명이 본 개시의 요지를 흐릴 수 있다고 판단되는 경우에는 그 상 세한 설명은 생략한다. 다른 정의가 없다면, 본 명세서에서 사용되는 모든 용어(기술 및 과학적 용어를 포함)는 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자에게 공통적으로 이해될 수 있는 의미로 사용될 수 있다. 또 일반적으로 사용되 는 사전에 정의되어 있는 용어들은 명백하게 특별히 정의되어 있지 않는 한 이상적으로 또는 과도하게 해석되지 않는다. 본 명세서에서 사용된 용어는 실시 예들을 설명하기 위한 것이며 본 발명을 제한하고자 하는 것은 아니 다. 본 명세서에서, 단수형은 문구에서 특별히 언급하지 않는 한 복수형도 포함한다. 또한, 본 개시의 구성 요소를 설명하는 데 있어서, 제 1, 제 2, A, B, (a), (b) 등의 용어를 사용할 수 있다. 이러한 용어는 그 구성 요소를 다른 구성 요소와 구별하기 위한 것일 뿐, 그 용어에 의해 해당 구성 요소의 본 질이나 차례 또는 순서 등이 한정되지 않는다. 어떤 구성 요소가 다른 구성요소에 \"연결\", \"결합\" 또는 \"접속\" 된다고 기재된 경우, 그 구성 요소는 그 다른 구성요소에 직접적으로 연결되거나 또는 접속될 수 있지만, 각 구 성 요소 사이에 또 다른 구성 요소가 \"연결\", \"결합\" 또는 \"접속\"될 수도 있다고 이해되어야 할 것이다. 명세서에서 사용되는 \"포함한다 (comprises)\" 및/또는 \"포함하는 (comprising)\"은 언급된 구성 요소, 단계, 동 작 및/또는 소자는 하나 이상의 다른 구성 요소, 단계, 동작 및/또는 소자의 존재 또는 추가를 배제하지 않는다. 본 명세서에서, 블록체인 또는 블록체인 데이터란 블록체인 네트워크를 구성하는 각각의 블록체인 노드가 유지 하는 데이터로, 적어도 하나의 블록이 체인 형태의 자료 구조로 구성되는 데이터를 가리킨다. 블록체인 기반 시 스템에서, 모든 블록체인 노드는 동일한 블록체인 데이터를 유지한다. 단, 멀티 채널(multi-channel) 기능을 지 원하는 블록체인 기반 시스템(예를 들어, 하이퍼레저 패브릭)에서는, 동일한 채널에 속한 블록체인 노드들끼리 만 동일한 블록체인 데이터를 유지하게 된다. 본 명세서에서, 블록체인 네트워크란, 블록체인 알고리즘(또는 프로토콜)에 따라 동작하는 복수의 블록체인 노 드로 구성된 P2P(peer-to-peer) 구조의 네트워크를 의미한다. 본 명세서에서, 블록체인 노드란, 블록체인 네트워크를 구성하고 블록체인 알고리즘(또는 프로토콜)에 따라 동 작하는 컴퓨팅 노드를 의미한다. 상기 컴퓨팅 노드는 물리적 장치로 구현될 수 있으나, 가상 머신(virtual machine)과 같이 논리적 장치로 구현될 수도 있다. 상기 컴퓨팅 노드가 가상 머신으로 구현되는 경우, 하나의 물리적 장치에 복수의 블록체인 노드가 포함될 수도 있다. 본 명세서에서, 트랜잭션(transaction) 또는 블록체인 트랜잭션(blockchain transaction)이란, 블록체인 환경 에서 상태 변화(예를 들어, 잔고의 증감, 자산의 이전)를 일으키는 모든 행위, 블록체인에 기록된 상태(state) 데이터를 조회하는 모든 행위, 또는 그 행위들을 가리키는 데이터를 의미할 수 있다. 예를 들어, 상기 트랜잭션 은 블록체인에 특정 데이터를 쓰는 행위, 블록체인에 기록된 특정 데이터를 읽는 행위 등을 모두 포괄할 수 있 다. 상기 트랜잭션은 쓰기 유형의 트랜잭션(예를 들어, 상태 데이터를 추가, 수정, 삭제하는 등의 트랜잭션)과 읽기 유형의 트랜잭션(예를 들어, 상태 데이터를 조회하는 트랜잭션)으로 구분될 수 있다. 물론, 블록체인 플랫 폼에 따라 읽기 및 쓰기 유형 외에도 다양한 유형(예를 들어, 실행)의 트랜잭션이 존재할 수 있고, 그와 같은 경우 상기 트랜잭션은 다양한 유형의 트랜잭션을 모두 포함할 수 있다. 본 명세서에서, 인스트럭션(instruction)이란, 기능을 기준으로 묶인 일련의 명령어들로서 컴퓨터 프로그램의 구성 요소이자 프로세서(processor)에 의해 실행되는 것을 가리킨다. 도 1은 본 개시의 실시 예에 따른 블록체인 기반 트랜잭션 처리 시스템의 구성을 나타내는 블록도이다. 도 1을 참조하면, 트랜잭션 처리 시스템은 복수의 트랜잭션을 번들링하기 위한 번들링 장치 및 블록체인 네트워크를 구성하는 복수의 블록체인 노드를 포함할 수 있다. 단, 이는 본 개시의 목적을 달성하기 위한 하나의 실시 예일 뿐이며, 필요에 따라 일부 구성 요소가 추가되거나 삭제될 수 있다. 또한, 도 1에 도시 된 각각의 장치들은 기능적으로 구분되는 기능 요소들을 나타낸 것으로서, 적어도 하나의 장치들이 실제 물리적 환경에서는 서로 통합되는 형태로 구현될 수도 있음에 유의한다. 예를 들어, 번들링 장치, 클라이언트 단 말, 및/또는 블록체인 노드는 동일한 물리적 컴퓨팅 장치 내에서 서로 다른 로직(logic)의 형태로 구 현될 수도 있다. 즉, 번들링 장치는 블록체인 노드로 동작할 수 있고, 트랜잭션 요청을 번들링하는 기능은 클라이언트 단말 측에서 구현될 수도 있다. 도 1의 트랜잭션 처리 시스템에서, 번들링 장치는 인공지능 모델을 사용하여 클라이언트 단말로부터 요청된 복수의 트랜잭션을 번들링함으로써 복수의 트랜잭션 번들을 생성할 수 있고, 블록체인 네트워크와 연동하여 생성된 복수의 트랜잭션 번들에 대한 처리 서비스를 제공하는 컴퓨팅 장치이다. 예를 들어, 컴퓨팅 장 치는 노트북, 데스크톱(desktop), 랩탑(laptop) 등이 될 수 있으나, 본 개시는 이에 한정되지 않으며, 컴퓨팅 장치는 연산 수단 및 통신 수단이 구비된 모든 종류의 장치를 포함할 수 있다. 예를 들어, 대량의 트랜잭션 처 리가 요청되는 환경이라면, 번들링 장치는 고성능의 서버급 컴퓨팅 장치로 구현될 수 있다. 번들링 장치는 다수의 클라이언트 단말이 요청한 복수의 트랜잭션을 번들링하여 복수의 트랜잭션 번 들을 생성하고 처리할 수 있다. 구체적으로, 번들링 장치는 클라이언트 단말로부터 획득된 복수의 트 랜잭션을 인공지능 모델을 통해 처리 우선순위 별로 번들링하여 복수의 트랜잭션 번들을 생성할 수 있다. 그 후, 번들링 장치는 생성된 트랜잭션 번들의 우선순위에 따라 블록체인 네트워크의 자원을 서로 다르 게 할당하고, 우선순위가 높은 트랜잭션 번들부터 순차적으로 처리하며, 트랜잭션의 처리 결과를 각각의 클라이 언트 단말로 제공할 수 있다. 여기서 블록체인 네트워크의 자원은, 트랜잭션을 처리하기 위해(예를 들어, 합의 프로세스를 수행하기 위 해) 블록체인 네트워크를 구성하는 각 블록체인 노드로 할당되는 자원을 나타내며, 이하에서 네트워 크 자원이라고 지칭하기로 한다. 또한, 번들링 장치는 상술한 인공지능 모델의 학습, 평가, 및 최적화 동작을 수행할 수도 있다. 번들링 장 치의 구성 및 동작에 대한 보다 자세한 설명은 도 2 이하의 도면을 참조하여 상세하게 설명하도록 한다. 도 1의 트랜잭션 처리 시스템은 하나의 번들링 장치를 포함하는 것으로 나타나 있으나, 본 개시는 이에 한 정되지 않으며, 상술한 트랜잭션 처리 시스템은 복수의 번들링 장치를 포함할 수도 있다. 이 경우, 복수의 번들 링 장치 각각은 블록체인 네트워크의 일부 블록체인 노드와 연동될 수 있다. 또한, 이 경우 트랜잭션 처리 시스템은 클라이언트 단말로 번들링 장치의 목록을 제공하기 위한 소정의 장치를 추가적으로 포함할 수도 있다. 블록체인 노드는 트랜잭션 번들에 대한 처리로서 일괄 합의 프로세스를 수행할 수 있다. 구체적으로, 블록 체인 노드는 트랜잭션 번들의 처리 우선순위에 따라, 트랜잭션 번들에 포함된 개별 트랜잭션에 대한 스마 트 컨트랙트를 실행하고, 스마트 컨트랙트의 실행 결과에 대하여 서명을 하며, 서명과 실행 결과를 블록에 기록하고 전파하는 등 일련의 합의 프로세스를 일괄적으로 수행할 수 있다. 이와 같은 합의 프로세스의 구체적인 과 정은 블록체인 기반 시스템의 구현 방식에 따라 달라질 수 있다. 블록체인 노드는 P2P 구조의 블록체인 네트워크를 구성하고, 블록체인 프로토콜에 따라 동작하는 노 드이다. 블록체인 노드는 블록체인을 통해 각종 스마트 컨트랙트(smart contract), 트랜잭션 데이터를 공 유할 수 있고, 합의 프로세스를 통해 트랜잭션의 무결성 및 보안성을 보장할 수 있다. 한편, 블록체인 네트워크를 구성하는 블록체인 노드 별로, 트랜잭션 처리 성능은 서로 다를 수 있다. 예를 들어, 블록체인 노드의 트랜잭션 처리 성능은 블록체인 노드의 코어 개수에 따라 달라질 수 있 다. 트랙잭션 처리 성능에 따라, 블록체인 노드로 네트워크 자원이 서로 다르게 할당될 수 있다. 예를 들 어, 트랜잭션 처리 성능이 높은(코어 개수가 많은) 블록체인 노드는 트랜잭션 처리 성능이 낮은 블록체인 노드 에 비해 더 많은 네트워크 자원을 필요로 할 수 있다. 또한, 동일한 트랜잭션 처리 성능을 갖는 블록체인 노드라 할지라도, 트랜잭션 처리를 위해 할당된 최대 자원의 양(예를 들어, 트랜잭션 처리를 위한 가상 컨테이너에 할당된 최대 자원의 양)은 서로 다를 수 있다. 이와 같은 네트워크 자원 할당은 상술한 번들링 장치에 의해 수행될 수 있으며, 이를 위해 번들링 장치는 블록 체인 노드의 트랜잭션 처리 성능에 대한 정보를 보유할 수 있다. 클라이언트 단말은 트랜잭션에 대한 처리 서비스를 제공받는 단말이다. 클라이언트 단말은 트랜잭션 요청을 생성하고, 생성된 트랜잭션 요청을 번들링 장치 및/또는 블록체인 네트워크로 전송하며, 번들 링 장치 및/또는 블록체인 네트워크로부터 요청한 트랜잭션에 대한 처리 결과를 제공받을 수 있다. 클라이언트 단말, 번들링 장치 및 블록체인 노드는 네트워크를 통해 통신할 수 있다. 예를 들어, 네트워크는 근거리 통신망(Local Area Network; LAN), 광역 통신망(Wide Area Network; WAN), 이동 통신 망(mobile radio communication network), Wibro(Wireless Broadband Internet) 등과 같은 모든 종류의 유/무 선 네트워크로 구현될 수 있다. 도 2는 본 개시의 실시 예에 따른 번들링 장치의 구성을 나타내는 블록도이다. 도 1을 참조하여 설명한 바 와 같이, 번들링 장치는 인공지능 모델을 사용하여 처리 우선순위를 예측하고, 동일한 처리 우선순위를 갖 는 트랜잭션 요청을 번들링하여 트랜잭션 번들을 생성하고, 처리 우선순위에 따라 각 트랜잭션 번들에 대한 네 트워크 자원 할당량을 다르게 결정하여, 우선순위가 높은 트랜잭션 번들부터 순차적으로 처리할 수 있다. 또한, 번들링 장치는 트랜잭션의 처리 우선순위를 예측하기 위한 인공지능 모델을 학습시키고, 평가하고, 최적화하고, 배포할 수 있다. 이하 명확한 설명을 위해, 트랜잭션의 처리 우선순위를 예측하기 위한 인공지능 모델은 번들링 모델이라고 지칭하기로 한다. 도 2를 참조하면, 번들링 장치는 번들링 학습부, 번들링 처리부, 및 자원 제어부를 포함할 수 있다. 도 2에 도시된 번들링 학습부, 번들링 처리부, 및 자원 제어부 각각의 구성 요소들(모 듈들)은 기능적으로 구분되는 기능 요소들을 나타낸 것으로서, 적어도 하나의 구성 요소(모듈)가 실제 물리적 환경에서는 서로 통합되는 형태로 구현될 수도 있음에 유의한다. 이하 도 2와 함께, 도 1을 참조하여 설명한다. 번들링 학습부는 다양한 블록체인 트랜잭션 데이터를 수집하여, 번들링 모델을 학습시키고 최적화하여 배 포할 수 있다. 여기서 다양한 블록체인 트랜잭션 데이터는 기존에 생성되었던 트랜잭션 데이터일 수도 있고, 또 는 클라이언트 단말로부터 실시간으로 요청된 트랜잭션 데이터일 수도 있다. 구체적으로, 번들링 학습부는 수집한 블록체인 트랜잭션 데이터를 전처리하고, 처리 우선순위를 예측하는 데 사용되는 특징을 추출하여 적합한 인공지능 알고리즘을 선택하기 위한 모델 생성 모듈 및 선택된 인공 지능 알고리즘을 통해 번들링 모델을 학습시키기 위한 모델 학습 모듈을 포함할 수 있다. 예를 들어, 처리 우선순위를 예측하는 데 사용되는 특징은 블록체인 트랜잭션의 트랜잭션 요청 ID, 트랜잭션 유 형, 거래 유형, 거래 우선순위, 거래 금액, 거래 수수료, 트랜잭션 타임스탬프, 트랜잭션 입력, 트랜잭션 출력, 거래 규모 중 하나 이상을 포함할 수 있다. 또한, 인공지능 알고리즘은 선형 회귀 알고리즘, 디시전 트리 (decision tree), 랜덤 포레스트(random forest) 중 어느 하나일 수 있으나, 본 개시는 이에 한정되지 않는다. 나아가, 번들링 학습부는 학습된 번들링 모델의 예측 정확도를 평가하고, 모델의 파라미터들을 최적화시키 기 위한 모델 평가 모듈, 및 최적화된 모델을 배포하기 위한 모델 배포 모듈을 포함할 수 있다. 예를 들어, 번들링 모델의 예측 정확도를 평가하기 위한 척도는 평균 제곱 오차(MSE) 또는 R-제곱 점수 중 어느 하나일 수 있다. 번들링 학습부를 통해 수행되는 일련의 동작들은 도 3을 통해 상세히 설명된다. 번들링 처리부는 복수의 블록체인 트랜잭션 요청을 수집하여, 번들링 학습부에서 배포된 번들링 모델 을 통해 각 트랜잭션 요청의 처리 우선순위를 예측하고, 예측된 우선순위가 동일한 트랜잭션 요청끼리 번들링하 여 복수의 트랜잭션 번들을 생성한 후, 블록체인 노드로 트랜잭션 번들의 처리를 요청할 수 있다. 이 때, 각 블록체인 노드에 할당되는 네트워크 자원은 생성된 트랜잭션 번들의 처리 우선순위에 따라 자원 제어부 에 의해 결정될 수 있다. 구체적으로, 번들링 처리부는 클라이언트 단말로부터 트랜잭션 요청을 수집하기 위한 트랜잭션 수집 모듈, 배포된 번들링 모델을 적용하여 트랜잭션 번들을 생성하기 위한 트랜잭션 번들 생성 모듈, 처 리 우선순위에 따라 적절한 자원을 할당받고, 블록체인 노드로 트랜잭션 번들의 처리를 요청하기 위한 트 랜잭션 번들 전송 모듈, 및 트랜잭션 번들의 처리 상태(예를 들어, 처리 완료 또는 처리 미완료)를 클라이 언트 단말로 회신하기 위한 트랜잭션 응답 전송 모듈을 포함할 수 있다. 자원 제어부는 생성된 트랜잭션 번들의 처리 우선순위에 따라 각 블록체인 노드로 트랜잭션 처리를 위한 네트워크 자원을 할당하고, 번들링 처리부의 처리 요청에 응답하여 블록체인 노드가 트랜잭션 번들을 처리하도록 제어할 수 있다. 구체적으로, 자원 제어부는 생성된 트랜잭션 번들의 우선 순위에 따른 자원 할당량을 결정하는 우선 순위 제어 모듈, 트랜잭션 번들의 처리 요청에 응답하여, 번들 별 자원 할당 량에 따라, 블록체인 노드로 네트워크 자원을 배분하는 서버 자원 제어 모듈, 및 배분된 네트워크 자 원에 따라 블록체인 노드가 트랜잭션 번들을 처리하도록 제어하는 트랜잭션 처리 모듈을 포함할 수 있다. 번들링 처리부 및 자원 제어부를 통해 수행되는 일련의 동작들은 도 6 내지 도 7을 통해 상세 히 설명된다. 도 3은 본 개시의 실시 예에 따른 번들링 모델을 학습시키는 방법을 나타내는 흐름도이다. 이하 도 3과 함께, 도 1 내지 도 2를 참조하여 설명한다. 단계 S110에서, 번들링 학습부는 다양한 소스로부터 블록체인 트랜잭션 데이터를 수집할 수 있다. 예를 들 어, 블록체인 트랜잭션 데이터는 트랜잭션 요청 ID, 범주형 변수로서 트랜잭션 유형, 거래 유형, 숫자 변수로서 거래 우선순위, 거래 금액, 거래 수수료, 트랜잭션 타임스탬프, 트랜잭션 입력, 트랜잭션 출력, 거래 규모 등을 포함할 수 있다. 단계 S120에서, 번들링 학습부는 수집한 블록체인 트랜잭션 데이터를 전처리할 수 있다. 구체적으로, 번들 링 학습부는 전처리로서 누락된 값을 제거하고, 원-핫 인코딩 또는 레이블 인코딩을 사용하여 트랜잭션 유 형이나 거래 유형과 같은 범주형 변수를 인코딩할 수 있다. 단계 S130에서, 번들링 학습부는 전처리된 데 이터 중에서 처리 우선순위를 예측하는 데 사용할 특징들을 추출할 수 있다. 단계 S140에서, 번들링 학습부는 처리 우선순위를 예측하는 데 사용될 인공지능 알고리즘을 선택하고, 학 습 세트를 사용하여 번들링 모델을 학습시킬 수 있다. 예를 들어, 인공지능 알고리즘은 선형 회귀 알고리즘, 디 시전 트리(decision tree), 랜덤 포레스트(random forest) 중 어느 하나일 수 있다. 선형 회귀 알고리즘을 사용 하는 예시적인 소스 코드는 도 4를 참조하여 설명된다. 단계 S150에서, 번들링 학습부는 수집된 트랜잭션 데이터 중 학습 세트를 제외한 테스트 세트를 사용하여, 학습된 번들링 모델의 예측 정확도를 평가할 수 있다. 예를 들어, 예측 정확도를 평가하기 위한 척도로서 평균 제곱 오차(MSE) 및 R-제곱 점수가 사용될 수 있다. 평균 제곱 오차 및 R-제곱 점수를 평가 척도로서 사용하는 예시적인 소스 코드는 도 5를 참조하여 설명된다. 그리고, 단계 S140 내지 단계 S150에서, 수집된 전체 블록체인 트랜잭션 데이터를 학습 세트 및 테스트 세트로 분할하기 위해, 수집된 데이터의 80%는 학습 세트로서 사용하고 20%는 테스트 세트로서 사용하는 80-20 분할 방 법이 사용될 수 있다. 단계 S160에서, 번들링 학습부는 평가 결과를 반영하여 번들링 모델의 파라미터들을 최적화할 수 있다. 예 를 들어, 최적화 대상이 되는 파라미터는 학습률, 규제강도(L1/L2), 학습 반복 횟수 등을 포함할 수 있으며, 파 라미터의 미세 조정(fine tuning)을 통해 인공지능 모델의 성능(즉, 예측 정확도)이 향상될 수 있다. 또한, 번 들링 모델의 성능 향상을 위해 다른 인공지능 알고리즘을 사용하는 것도 고려될 수 있다. 예를 들어, 선형 회귀 알고리즘을 사용하여 구축된 번들링 모델의 성능이 파라미터의 미세 조정을 통해서도 크게 향상되지 않는 것으 로 확인되는 경우, 디시전 트리 또는 랜덤 포레스트 알고리즘이 사용될 수 있다.단계 S170에서, 번들링 학습부는 번들링 모델을 배포할 수 있고, 배포된 번들링 모델은 번들링 처리부 에서 트랜잭션 번들을 생성하는 데 사용될 수 있다. 도 4는 도 3의 학습 세트를 사용하여 번들링 모델을 학습시키는 단계(S140)에서 사용되는 소스 코드를 예시 적으로 나타낸다. 도 4의 소스 코드를 참조하면, 전처리된 블록체인 트랜잭션 데이터를 독립변수(X)와 종속변수(Y)로 분류하 는 과정이 나타나 있는데, 독립변수(X)로서 트랜잭션 요청 ID, 트랜잭션 유형, 및 거래 우선순위 (transaction priority)가 기재되어 있고, 종속변수(Y)로서 번들의 처리 우선순위(bundle priority)가 기재되 어 있다. 이로써, 트랜잭션 요청 ID, 트랜잭션 유형, 및 거래 우선순위를 통해 처리 우선순위가 예측될 수 있고, 처리 우선순위가 동일한 트랜잭션 요청끼리 같은 트랜잭션 번들로 분류될 수 있다. 즉, 본 개시의 실시 예에 따르면 단순히 동일한 유형을 갖는 트랜잭션 요청을 번들링하여 트랜잭션 번들을 생성 하는 대신, 처리 우선순위에 따라 트랜잭션 요청을 번들링하여 트랜잭션 번들을 생성할 수 있다. 또한, 소스 코 드를 참조하면 인공지능 알고리즘으로서 선형 회귀 알고리즘이 선택되었음이 나타나 있다. 도 5는 도 3의 테스트 세트를 사용하여 학습된 번들링 모델의 예측 정확도를 평가하는 단계(S150)에서 사용되는 소스 코드를 예시적으로 나타낸다. 도 5의 소스 코드를 참조하면, 테스트 세트(X_test)를 도 4에서 선형 회귀 알고리즘을 사용하여 학습된 모 델(model=LinearRegression())에 입력시킨 후, 평균 제곱 오차(mse) 및 R-제곱 점수(r2)를 계산하는 과정이 나 타나 있다. 예를 들어, 평균 제곱 오차가 작을수록, 그리고 R-제곱 점수가 클수록 번들링 모델의 예측 정확 도는 높은 것으로 평가될 수 있다. 도 6은 본 개시의 실시 예에 따른 블록체인 트랜잭션 번들링 방법을 나타내는 흐름도이다. 이하 도 6과 함께, 도 1 내지 도 2를 참조하여 설명한다. 단계 S210에서, 번들링 처리부는 클라이언트 단말로부터 수신한 블록체인 트랜잭션 요청을 번들링 모 델에 입력시킬 수 있고, 단계 S220에서, 번들링 처리부는 번들링 모델로부터 출력된 처리 우선순위에 따라 트랜잭션 요청을 번들링하여 트랜잭션 번들을 생성할 수 있다. 구체적으로, 번들링 처리부의 트랜잭션 번 들 생성 모듈은 번들링 학습부로부터 배포된 번들링 모델을 사용하여 각 블록체인 트랜잭션 요청의 처리 우선순위를 예측하고, 예측된 처리 우선순위가 동일한 요청들을 번들링하여 트랜잭션 번들을 생성할 수 있 다. 단계 S230에서, 자원 제어부는 생성된 트랜잭션 번들의 처리 우선순위에 따라 자원 할당량을 결정할 수 있 다. 예를 들어, 단계 S210 내지 단계 S220에서 제 1 우선순위를 갖는 제 1 번들, 제 2 우선순위를 갖는 제 2 번 들, 및 제 3 우선순위를 갖는 제 3 번들이 생성된 경우(제 1 우선순위>제 2 우선순위>제 3 우선순위인 것으로 가정), 자원 제어부는 제 1 번들에 가장 많은 제 1 자원을 할당하기로 결정하고, 제 2 번들에 제 1 자원보 다 적은 제 2 자원을 할당하기로 결정하고, 제 3 번들에 제 2 번들보다 적은 제 3 자원을 할당하기로 결정할 수 있다. 단계 S240에서, 자원 제어부는 단계 S230에서 결정된 자원 할당량을 반영하여 트랜잭션 번들을 처리하도록 블록체인 노드를 제어할 수 있다. 구체적으로, 자원 제어부는 결정된 자원 할당량에 따라 각 블록체 인 노드 네트워크 자원을 배분할 수 있고, 배분된 네트워크 자원에 따라 블록체인 노드가 트랜잭션 번들을 처리하도록 제어할 수 있다. 단계 S230 및 단계 S240에서 수행되는 일련의 동작들은 도 7을 참조하여 더 상세히 설명된다. 단계 S250에서, 번들링 처리부는 트랜잭션 번들의 처리 상태를 클라이언트 단말로 회신할 수 있다. 예를 들어, 단계 S240에서 트랜잭션 번들 처리가 완료된 경우, 번들링 처리부의 트랜잭션 응답 처리 모듈 은 클라이언트 단말로 처리가 완료되었음을 회신할 수 있다. 반대로, 단계 S240에서 트랜잭션 번들 처리가 미완료된 경우, 트랜잭션 응답 처리 모듈은 클라이언트 단말로 처리가 아직 완료되지 않았음 을 회신할 수 있다. 도 7은 도 6의 처리 우선순위에 따라 자원 할당량을 결정하는 단계(S230) 및 트랜잭션 번들을 처리하는 단계 (S240)를 예시적으로 나타내는 흐름도이다. 단계 S231에서, 자원 제어부는 트랜잭션 번들의 처리 우선순위 별로 자원 할당량을 생성할 수 있다. 단계 S232에서, 자원 제어부는 각 트랜잭션 번들로 생성된 자원 할당량을 맵핑할 것을 번들링 처리부로 요청할 수 있고, 단계 S233에서, 번들링 처리부는 각 트랜잭션 번들로 결정된 자원 할당량을 맵핑할 수 있다. 이를 통해 각 트랜잭션 번들로 얼마의 네트워크 자원이 할당될 것인지 맵핑될 수 있다. 단계 S241에서, 번들링 처리부는 자원 제어부로 트랜잭션 번들의 처리를 요청할 수 있고, 단계 S242 에서, 자원 제어부의 자원 제어 모듈은 트랜잭션 번들에 맵핑된 자원 할당량에 따라 블록체인 네트워 크의 자원을 배분할 수 있다. 단계 S243에서, 자원 제어부의 트랜잭션 처리 모듈은 배분된 네트 워크 자원에 따라 트랜잭션 번들을 처리하도록 블록체인 노드를 제어할 수 있다. 예를 들어, 제 1 우선순위를 갖는 제 1 번들, 제 1 우선순위보다 낮은 제 2 우선순위를 갖는 제 2 번들, 제 2 우선순위보다 낮은 제 3 우선순위를 갖는 제 3 번들이 있다고 가정하면, 트랜잭션 처리 모듈은 트랜잭션 처리 성능이 가장 높은 제 1 블록체인 노드가 제 1 번들을 처리하고, 제 1 블록체인 노드보다 트랜잭션 처리 성 능이 낮은 제 2 블록체인 노드가 제 2 번들을 처리하고, 트랜잭션 처리 성능이 가장 낮은 제 3 블록체인 노드가 제 3 번들을 처리하도록 제어할 수 있다. 이 때, 제 1 내지 제 3 블록체인 노드에는 단계 S242에서 배분된 네트 워크 자원이 각각 할당될 수 있으며, 제 1 블록체인 노드에 가장 많은 양의 자원이, 제 3 블록체인 노드에 가장 적은 양의 자원이 할당될 수 있다. 다른 실시 예에서, 제 1 내지 제 3 블록체인 노드의 트랜잭션 처리 성능이 같은 경우를 가정하면, 트랜잭션 처 리 모듈은 제 1 블록체인 노드의 가상 컨테이너에 가장 많은 양의 자원이 할당되고, 제 3 블록체인 노드의 가상 컨테이너에 가장 적은 양의 자원이 할당되도록 하여, 제 1 내지 제 3 블록체인 노드가 각각 제 1 내지 제 3 번들을 처리하도록 제어할 수 있다. 단계 S244에서, 블록체인 노드는 트랜잭션 번들을 처리할 수 있고, 단계 S245에서, 블록체인 노드는 자원 제어부를 통해 번들링 처리부로 트랜잭션 처리 상태(예를 들어, 완료 또는 미완료)를 클라이언 트 단말로 회신할 것을 요청할 수 있다. 도 8은 복수의 블록체인 트랜잭션(TX1~TX9)이 순차적으로 처리되는 실시 예를 나타내고, 도 9는 복수의 블록체 인 트랜잭션(TX1~TX9)이 병렬로 처리되는 실시 예를 나타내고, 도 10은 복수의 블록체인 트랜잭션(TX1~TX9)이 트랜잭션 번들의 우선순위 순서대로 처리되는 실시 예를 나타낸다. 여기서, 본 개시의 실시 예에 따른 효과를 검토하기 위해, 각 실시 예에서 복수의 트랜잭션 중 트랜잭션 9(TX9)가 처리되는 데 소요되는 시간을 비교해보 기로 한다. 명확한 비교를 위해, 도 8 내지 도 10에서 트랜잭션 9(TX9)는 회색 빗금으로 표시된다. 도 8을 참조하면 각 트랜잭션을 처리하는 데 1초가 소요되고, 모든 트랜잭션의 처리가 완료되는 데 9초가 소요 되어, 트랜잭션 9(TX9)가 처리되는 데 9초가 소요될 수 있다. 도 9를 참조하면 모든 트랜잭션을 병렬로 처리하 는 데 9초가 소요되어, 도 8과 마찬가지로 트랜잭션 9(Tx9)가 처리되는 데 9초가 소요될 수 있다. 즉, 도 8 및 도 9의 실시 예들에 따르면, 복수의 트랜잭션(TX1~TX9)이 처리될 때 처리 우선순위는 고려되지 않는다. 반면 도 9를 참조하면, 복수의 트랜잭션(TX1~TX9)은 각 트랜잭션의 처리 우선순위에 따라 번들 1, 번들 2, 및 번들 3 중 어느 하나에 속한다. 예를 들어, 트랜잭션 3, 트랜잭션 6, 트랜잭션 9(TX3, TX6, TX9)는 번들 1에 속 하며 우선순위 1을 갖고, 트랜잭션 2, 트랜잭션 4, 트랜잭션 8(TX2, TX4, TX8)은 번들 2에 속하며 우선순위 1보 다 낮은 우선순위 2를 갖고, 트랜잭션 1, 트랜잭션 5, 트랜잭션 7(TX1, TX5, TX7)은 번들 3에 속하며 우선순위 2보다 낮은 우선순위 3을 갖는다. 상술한 바와 같이, 각 번들의 처리 우선순위는 각 트랜잭션(TX1~TX9)을 인공 지능 모델에 입력시켰을 때 예측되는 값이다. 도 10을 참조하면, 우선순위 1을 갖는 번들 1에는 50%의 네트워크 자원이 배분되어 있고, 우선순위 2를 갖는 번 들 2에는 30%의 네트워크 자원이 배분되어 있고, 우선순위 3을 갖는 번들 3에는 20%의 네트워크 자원이 배분되 어 있다. 네트워크 자원이 많이 배분될수록 트랜잭션 번들의 처리 속도는 빨라질 수 있다. 예를 들어, 도 9에 나타난 바와 같이 번들 1의 처리에는 6초(트랜잭션 당 2초), 번들 2의 처리에는 10초(트랜잭션 당 3.3초), 그리 고 번들 3의 처리에는 15초(트랜잭션 당 5초)가 소요될 수 있으며, 번들 1, 번들 2, 번들 3의 순서로 처리될 수 있다. 따라서, 트랜잭션 별로 처리에 소요되는 시간 및 트랜잭션 전체를 처리하는 데 소요되는 시간은 도 10의 경우가 도 8 또는 도 9의 경우보다 길다. 그러나, 도 10의 번들 1은 번들 2 및 번들 3보다 먼저 처리되고, 6초가 소요 되므로 트랜잭션 9(TX9)가 처리되는 데 6초가 소요될 수 있다. 즉, 도 10과 같이 처리 우선순위 별로 번들링된 트랜잭션 번들을 처리하는 경우 트랜잭션 3, 트랜잭션 6, 트랜잭션 9(TX3, TX6, TX9)와 같이 처리 우선순위가 높은 트랜잭션은 도 8의 순차적 처리 또는 도 9의 병렬 처리에 비해 더 빠르게 처리될 수 있다. 따라서, 본 개 시의 실시 예에 따르면 높은 처리 우선순위를 갖는 블록체인 트랜잭션 및 트랜잭션 번들에 대해 더 많은 네트워크 자원을 할당하여 처리 속도의 향상을 도모할 수 있다. 나아가, 도 10의 실시 예에서 번들 1, 번들 2, 번들 3 외에 새로운 번들 4가 생성된다고 가정해도 번들 1, 번들 2, 번들 3에 부여된 우선순위는 달라지지 않으며, 생성된 번들 4의 우선순위에 따라 자원 할당량(즉, 배분되는 네트워크 자원의 양)은 동적으로 변화할 수 있다. 예를 들어, 새로 생성된 번들 4의 우선순위가 번들 1과 동일 한 경우를 가정하면, 번들 4가 번들 1 직후에 처리됨으로써 번들 2, 번들 3의 처리에 소요되는 시간은 상대적으 로 더 길어질 수 있다. 도 11은 본 개시의 실시 예에 따른 블록체인 트랜잭션 번들링 및 트랜잭션 번들 처리를 수행하기 위한 컴퓨팅 장치의 하드웨어 구성을 나타내는 블록도이다. 도 11을 참조하면, 컴퓨팅 장치는 하나 이상의 프로세서, 버스, 통신 인터페이스, 프로세 서에 의하여 수행되는 컴퓨터 프로그램을 로드(load)하는 메모리와, 컴퓨터 프로그램을 저장하 는 스토리지를 포함할 수 있다. 다만, 도 11에는 본 개시의 실시 예와 관련 있는 구성 요소들만이 도시되 어 있다. 따라서, 본 개시가 속한 기술 분야의 통상의 기술자라면 도 11에 도시된 구성요소들 외에 다른 범용적 인 구성 요소들이 더 포함될 수 있음을 알 수 있다. 즉, 컴퓨팅 장치에는, 도 11에 도시된 구성 요소 이외 에도 다양한 구성 요소가 더 포함될 수 있다. 또한, 경우에 따라, 도 11에 도시된 구성요소들 중 일부가 생략된 형태로 컴퓨팅 장치가 구성될 수도 있다. 이하, 컴퓨팅 장치의 각 구성 요소에 대하여 설명한다. 프로세서는 컴퓨팅 장치의 각 구성의 전반적인 동작을 제어할 수 있다. 프로세서는 CPU(Central Processing Unit), MPU(Micro Processor Unit), MCU(Micro Controller Unit), GPU(Graphic Processing Unit) 또는 본 개시의 기술 분야에 잘 알려진 임의의 형태의 프로세서 중 적어도 하나를 포함하여 구성될 수 있다. 또 한, 프로세서는 본 개시의 실시 예들에 따른 동작/방법을 실행하기 위한 적어도 하나의 애플리케이션 또는 프로그램에 대한 연산을 수행할 수 있다. 컴퓨팅 장치는 하나 이상의 프로세서를 구비할 수 있다. 다음으로, 메모리는 각종 데이터, 명령 및/또는 정보를 저장할 수 있다. 메모리는 본 개시의 실시 예 들에 따른 동작/방법을 실행하기 위하여 스토리지로부터 컴퓨터 프로그램을 로드할 수 있다. 메모리 는 RAM과 같은 휘발성 메모리로 구현될 수 있을 것이나, 본 개시는 이에 한정되지 않는다. 다음으로, 버스는 컴퓨팅 장치의 구성 요소 간 통신 기능을 제공할 수 있다. 버스는 주소 버스 (Address Bus), 데이터 버스(Data Bus) 및 제어 버스(Control Bus) 등 다양한 형태의 버스로 구현될 수 있다. 다음으로, 통신 인터페이스는 컴퓨팅 장치의 유무선 인터넷 통신을 지원할 수 있다. 또한, 통신 인터 페이스는 인터넷 통신 외의 다양한 통신 방식을 지원할 수도 있다. 이를 위해, 통신 인터페이스는 본 개시의 기술 분야에 잘 알려진 통신 모듈을 포함하여 구성될 수 있다. 다음으로, 스토리지는 하나 이상의 컴퓨터 프로그램을 비임시적으로 저장할 수 있다. 스토리지 는 ROM(Read Only Memory), EPROM(Erasable Programmable ROM), EEPROM(Electrically Erasable Programmable ROM), 플래시 메모리 등과 같은 비휘발성 메모리, 하드 디스크, 착탈형 디스크, 또는 본 개시가 속하는 기술 분 야에서 잘 알려진 임의의 형태의 컴퓨터로 읽을 수 있는 기록 매체를 포함하여 구성될 수 있다. 다음으로, 컴퓨터 프로그램은 메모리에 로드될 때 프로세서로 하여금 본 개시의 다양한 실시 예 들에 따른 동작/방법을 수행하도록 하는 하나 이상의 인스트럭션을 포함할 수 있다. 즉, 프로세서는 로드 된 하나 이상의 인스트럭션을 실행함으로써, 본 개시의 다양한 실시 예들에 따른 동작/방법을 수행할 수 있다. 예를 들어, 컴퓨터 프로그램은 수신한 블록체인 트랜잭션 요청을 번들링 모델에 입력시켜 출력된 처리 우 선순위에 따라 트랜잭션 번들을 생성하고, 생성된 트랜잭션 번들의 처리 우선순위에 따라 자원 할당량을 결정하 고, 결정된 자원 할당량에 따라 컴퓨팅 장치의 시스템 자원을 배분하여 우선순위 순서대로 트랜잭션 번들 을 처리하고, 트랜잭션 번들의 처리 상태를 클라이언트 단말로 회신하는 동작을 수행하도록 하는 인스트럭션들 을 포함할 수 있다. 본 개시의 실시 예에 따르면, 번들링 모델을 사용하여 처리 우선순위에 따라 블록체인 트랜잭션을 번들링하고, 트랜잭션 번들의 처리 우선순위에 따라 자원 할당량을 결정하고, 결정된 자원 할당량에 따라 네트워크 자원을 배분할 수 있다. 따라서, 물리적으로 시스템 자원을 증가시키지 않고도 트랜잭션의 처리 우선순위에 따라 동적 으로 네트워크 자원을 할당함으로써, 처리 우선순위가 높은 블록체인 트랜잭션이 보다 더 빨리 처리될 수 있도 록 할 수 있다. 지금까지 도 1 내지 도 11을 참조하여 본 개시의 다양한 실시 예들 및 그 실시 예들에 따른 효과들을 언급하였 다. 본 개시의 기술적 사상에 따른 효과들은 이상에서 언급한 효과들로 제한되지 않으며, 언급되지 않은 또 다 른 효과들은 아래의 기재로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다. 이상에서, 본 개시의 실시 예를 구성하는 모든 구성 요소들이 하나로 결합되거나 결합되어 동작하는 것으로 설 명되었다고 해서, 본 개시가 반드시 이러한 실시 예에 한정되는 것은 아니다. 즉, 본 개시의 목적 범위 안에서 라면, 그 모든 구성 요소들이 하나 이상으로 선택적으로 결합하여 동작할 수도 있다. 도면에서 동작들이 특정한 순서로 도시되어 있지만, 반드시 동작들이 도시된 특정한 순서로 또는 순차적 순서로 실행되어야만 하거나 또는 모든 도시 된 동작들이 실행되어야만 원하는 결과를 얻을 수 있는 것으로 이해되어서 는 안 된다. 특정 상황에서는, 멀티태스킹 및 병렬 처리가 유리할 수도 있다. 더욱이, 위에 설명한 실시 예들에 서 다양한 구성들의 분리는 그러한 분리가 반드시 필요한 것으로 이해되어서는 안 되고, 설명된 프로그램 컴포 넌트들 및 시스템들은 일반적으로 단일 소프트웨어 제품으로 함께 통합되거나 다수의 소프트웨어 제품으로 패키 지 될 수 있음을 이해하여야 한다."}
{"patent_id": "10-2023-0075646", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "이상 첨부된 도면을 참조하여 본 개시의 실시 예들을 설명하였지만, 본 개시가 속하는 기술분야에서 통상의 지 식을 가진 자는 본 개시가 그 기술적 사상이나 필수적인 특징을 변경하지 않고서 다른 구체적인 형태로 실시될 수 있다는 것을 이해할 수 있다. 그러므로 이상에서 기술한 실시 예들은 모든 면에서 예시적인 것이며 한정적인 것이 아닌 것으로 이해해야만 한다. 본 개시의 보호 범위는 아래의 청구범위에 의하여 해석되어야 하며, 그와 동등한 범위 내에 있는 모든 기술 사상은 본 개시의 권리범위에 포함되는 것으로 해석되어야 할 것이다."}
{"patent_id": "10-2023-0075646", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 실시 예에 따른 블록체인 기반 트랜잭션 처리 시스템의 구성을 나타내는 블록도이다. 도 2는 본 개시의 실시 예에 따른 번들링 장치의 구성을 나타내는 블록도이다. 도 3은 본 개시의 실시 예에 따른 블록체인 트랜잭션 번들링을 위한 인공지능 모델을 학습시키는 방법을 나타내 는 흐름도이다.도 4는 도 3의 학습 세트를 사용하여 인공지능 모델을 학습시키는 단계에서 사용되는 소스 코드를 예시적으로 나타낸다. 도 5는 도 3의 테스트 세트를 사용하여 학습된 인공지능 모델의 예측 정확도를 평가하는 단계에서 사용되는 소 스 코드를 예시적으로 나타낸다. 도 6은 본 개시의 실시 예에 따른 블록체인 트랜잭션 번들링 방법을 나타내는 흐름도이다. 도 7은 도 6의 처리 우선순위에 따라 네트워크 자원을 할당하는 단계 및 트랜잭션 번들을 처리하는 단계를 예시 적으로 나타내는 흐름도이다. 도 8은 복수의 블록체인 트랜잭션이 순차적으로 처리되는 실시 예를 나타낸다. 도 9는 복수의 블록체인 트랜잭션이 병렬로 처리되는 실시 예를 나타낸다. 도 10은 복수의 블록체인 트랜잭션이 트랜잭션 번들의 우선순위 순서대로 처리되는 실시 예를 나타낸다. 도 11은 본 개시의 실시 예에 따른 블록체인 트랜잭션 번들링 및 트랜잭션 번들 처리를 수행하기 위한 컴퓨팅 장치의 하드웨어 구성을 나타내는 블록도이다."}
