{"patent_id": "10-2023-0086208", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0059525", "출원번호": "10-2023-0086208", "발명의 명칭": "분산 클라우드 시스템, 분산 클라우드 시스템의 데이터 처리 방법 및 저장매체", "출원인": "한국전자통신연구원", "발명자": "김대원"}}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "분산 클라우드 시스템의 데이터 처리 방법에 있어서,사용자 기기에 의해 요청된 에지 컴퓨터 시스템의 애플리케이션을 실행하는 단계;상기 애플리케이션의 스냅샷 이미지를 생성하는 단계; 및상기 생성한 스냅샷 이미지를 저장하고 마이그레이션(migration) 시 상기 저장하는 이미지를 전송하는 단계;를포함하는 분산 클라우드 시스템의 데이터 처리 방법."}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서,상기 애플리케이션은, 상기 사용자 기기와 무중단 서비스 연결이 유지되는 분산 클라우드 시스템의 데이터 처리방법."}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1항에 있어서,상기 애플리케이션의 현재 상태를 상기 스냅샷 이미지로 저장하는 것을 포함하는, 분산 클라우드 시스템의 데이터 처리 방법."}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1항에 있어서,마이그레이션(migration)된 경우, 상기 스냅샷 이미지를 복원하는 것을 포함하는, 분산 클라우드 시스템의 데이터 처리 방법."}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "스토리지;프로세서; 및컴퓨터 시스템과 연결되는 네트워크 시스템을 포함하고,상기 프로세서는,외부 기기에 의해 요청된 에지 컴퓨터 시스템의 애플리케이션을 실행하고,상기 애플리케이션의 스냅샷 이미지를 생성하고; 및상기 생성한 스냅샷 이미지를 상기 스토리지에 저장하고 마이그레이션(migration) 시 상기 저장하는 이미지를전송하는 것을 포함하는, 분산 클라우드 시스템."}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5항에 있어서,상기 애플리케이션은, 상기 외부 기기와 무중단 서비스 연결이 유지되는, 분산 클라우드 시스템."}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 5항에 있어서,공개특허 10-2024-0059525-3-상기 애플리케이션의 현재 상태를 상기 스냅샷 이미지로 저장하는 것을 포함하는, 분산 클라우드 시스템."}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 5항에 있어서,마이그레이션(migration)된 경우, 상기 스냅샷 이미지를 복원하는 것을 포함하는, 분산 클라우드 시스템."}
{"patent_id": "10-2023-0086208", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "사용자 기기에 의해 요청된 에지 컴퓨터 시스템의 애플리케이션을 실행하고;상기 애플리케이션의 스냅샷 이미지를 생성하고; 및상기 생성한 스냅샷 이미지를 저장하고 마이그레이션(migration) 시 상기 저장하는 이미지를 전송하는, 컴퓨터로 실행 가능한 프로그램을 저장하는 저장매체."}
{"patent_id": "10-2023-0086208", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "분산 클라우드 시스템, 분산 클라우드 시스템의 데이터 처리 방법 및 저장매체가 개시된다. 본 발명의 일실시예 에 따른 분산 클라우드 시스템의 데이터 처리 방법은 사용자 기기에 의해 요청된 에지 컴퓨터 시스템의 애플리케 이션을 실행하는 단계; 상기 애플리케이션의 스냅샷 이미지를 생성하는 단계; 및 상기 생성한 스냅샷 이미지를 저장하고 마이그레이션(migration) 시 상기 저장하는 이미지를 전송하는 단계를 포함한다."}
{"patent_id": "10-2023-0086208", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 분산 클라우드 기술에 관한 것으로, 보다 상세하게는 분산 클라우드 환경의 에지 컴퓨팅을 위한 데이 터 처리 및 서비스 마이그레이션 기술에 관한 것이다."}
{"patent_id": "10-2023-0086208", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "분산 클라우드에서 서비스 이관을 위한 마이그레이션 기능은 실시간으로 서비스가 재배치되는 클라우드 환경에 서 끊임없는 서비스를 유지하기 위하여 제공된다. 마이그레이션은 리소스 부족, 장애 발생 및 비용 효율적인 측 면을 고려하여 엣지 클라우드 간 혹은 에지 클라우드와 다른 클라우드 간에 이루어 진다. 그리고, 엣지 클라우드의 근접 서비스는 이동 서비스의 지원을 위해 무중단 서비스가 필요하다. 그러므로, 서비 스 이관 관리의 핵심 기능은 컨테이너 혹은 가상머신 기반의 응용을 마이그레이션하는 기능이 분산 클라우드의 장애 극복 방안으로 제시된다. 현재 사용자가 원하는 대규모 단말들이 생성하는 폭증 데이터의 중앙 클라우드 집중화로 인한, 처리 및 전송 지 연 극복을 위해, 단말 근접 위치에서 데이터를 처리하는 지능형 클라우드 엣지 서비스를 제공하는 기술 개발 및 관련 서비스 시스템들이 출시되고 있다. 그 중 단일 클러스터로 운영되는 쿠버네티스(Kubernetes)의 경우 OCI 기반의 컨테이너 환경을 오케스트레이션 및 통합 운영하도록 설계된 도구로서 현재 가장 많이 사용되는 도구이 다. 분산되어 있는 클라우드 엣지와 코어 클라우드를 연계하여 서비스하기 위하여서는 다양한 방법들이 연구되고 있 다. 이를 위하여 L7 레이어 기반의 서비스 메쉬 기술로 오픈소스 진영의 Istio가 활발히 진행되고 있다. 서비스 메시는 마이크로 서비스 간의 연계를 위하여 개발된 프로그램이다. 이 방법은 다중 네트워크 상에서 제어 플레 인을 공유하고 게이트웨이를 통하여 클러스터간 통신하므로 두개의 네트워크가 직접 연결되지 않아도 된다. 또 한 L3 네트워크 레벨의 IPsec 터널링을 활용한 다중 네트워크 연결 기능을 가지는 소프트웨어들도 활발히 개발 진행 중에 있다. 이렇게 엣지 컴퓨팅은 대규모 엣지 단말들이 생성하는 방대한 데이터의 클라우드 집중화로 인한 처리 및 전송 지연 극복을 위해 단말 근접 위치에서 데이터를 처리하고 클라우드-엣지-단말 간 분산 협업을 수행하는 역할이 필요하다. 분산 협업은 단순 클러스트를 통한 배치에 의존하지 않고 엣지 컴퓨팅의 저지연 단말 근첩처리등의 요구사항을 만족하기 위하여 실시간으로 데이터 및 응용소프트웨어가 이동하여야 하고 이는 이동체 (자율주행) 서비스를 위 하여 더욱 필요한 요구사항이 되었다. 그러나, 기존 엣지 시스템은 다중 클러스트를 감안한 관리 방법이 미흡하다. 또한, 기존 엣지 시스템은 베어메탈, 컨테이너, FaaS 서비스등에 최적화되지 않은 형태로 서비스 제공되고 있다.또한, 기존 엣지 시스템은 여유 자원 부족 시 성능 보장을 위한 자원 추가 방법이 제공되지 않고 있다. 또한, 기존 엣지 시스템은 수직적/수평적 협업을 위한 응용프로그램 수준에서 설계가 필요하다. 또한, 기존 엣지 시스템은 다중 클러스터를 고속으로 연결하기 위한 네트워크 구조가 미흡하다. 또한, 기존 엣지 시스템은 Kubernetes에 사용되는 OCI의 성능이 부족한 문제가 있다(응답 속도에 민감한 서비스 의 지연 발생). 또한, 기존 엣지 시스템은 완벽한 협업 솔루션을 위한 아키텍처 상의 기술이 부재되어 있다. 한편, 한국공개특허 제 10-2023-0024416 호“클라우드 플랫폼 간 가상 머신 마이그레이션 방법, 장치, 저장 매 체 및 전자 장치”는 타깃 클라우드 플랫폼의 타깃 가상 머신의 디스크 스토리지 라이브러리로 하나씩 마이그레 이션하는 장치 및 방법에 관하여 개시하고 있다."}
{"patent_id": "10-2023-0086208", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 클러스터 간의 효율적인 협업을 위한 서비스 마이그레이션을 제공하는 것을 목적으로 한다. 또한, 본 발명은 협업 서비스를 위한 다중 클러스터 간의 고속 네트워크 연결을 제공하는 것을 목적으로 한다. 또한, 본 발명은 연계된 네트워크 상에서 클러스터 간의 협업을 위한 최적 관리를 제공하는 것을 목적으로 한다."}
{"patent_id": "10-2023-0086208", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 분산 클라우드 시스템의 데이터 처리 방법은 사용자 기기에 의해 요청된 에지 컴퓨터 시스템의 애플리케이션을 실행하는 단계; 상기 애플리케이션의 스냅샷 이미지 를 생성하는 단계; 및 상기 생성한 스냅샷 이미지를 저장하고 마이그레이션(migration) 시 상기 저장하는 이미 지를 전송하는 단계;를 포함한다. 이 때, 상기 애플리케이션은, 상기 사용자 기기와 무중단 서비스 연결이 유지될 수 있다. 이 때, 상기 애플리케이션의 현재 상태를 상기 스냅샷 이미지로 저장하는 것을 포함할 수 있다. 마이그레이션(migration)된 경우, 상기 스냅샷 이미지를 복원하는 것을 포함할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 분산 클라우드 시스템은 스토리지; 프로세서; 및 컴퓨터 시스템과 연결되는 네트워크 시스템을 포함하고, 상기 프로세서는, 외부 기기에 의해 요청된 에지 컴 퓨터 시스템의 애플리케이션을 실행하고, 상기 애플리케이션의 스냅샷 이미지를 생성하고; 및 상기 생성한 스냅 샷 이미지를 상기 스토리지에 저장하고 마이그레이션(migration) 시 상기 저장하는 이미지를 전송하는 것을 포 함한다. 이 때, 상기 애플리케이션은, 상기 외부 기기와 무중단 서비스 연결이 유지될 수 있다. 이 때, 상기 애플리케이션의 현재 상태를 상기 스냅샷 이미지로 저장하는 것을 포함할 수 있다. 이 때, 마이그레이션(migration)된 경우, 상기 스냅샷 이미지를 복원하는 것을 포함할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 분산 클라우드 시스템의 저장매체는 사용자 기 기에 의해 요청된 에지 컴퓨터 시스템의 애플리케이션을 실행하고; 상기 애플리케이션의 스냅샷 이미지를 생성 하고; 및 상기 생성한 스냅샷 이미지를 저장하고 마이그레이션(migration) 시 상기 저장하는 이미지를 전송한다."}
{"patent_id": "10-2023-0086208", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명은 클러스터 간의 효율적인 협업을 위한 서비스 마이그레이션을 제공할 수 있다. 또한, 본 발명은 협업 서비스를 위한 다중 클러스터 간의 고속 네트워크 연결을 제공할 수 있다. 또한, 본 발명은 연계된 네트워크 상에서 클러스터 간의 협업을 위한 최적 관리를 제공할 수 있다."}
{"patent_id": "10-2023-0086208", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명을 첨부된 도면을 참조하여 상세히 설명하면 다음과 같다. 여기서, 반복되는 설명, 본 발명의 요지를 불 필요하게 흐릴 수 있는 공지 기능, 및 구성에 대한 상세한 설명은 생략한다. 본 발명의 실시형태는 당 업계에서 평균적인 지식을 가진 자에게 본 발명을 보다 완전하게 설명하기 위해서 제공되는 것이다. 따라서, 도면에서의 요소들의 형상 및 크기 등은 보다 명확한 설명을 위해 과장될 수 있다. 명세서 전체에서, 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다 른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 이하, 본 발명에 따른 바람직한 실시예를 첨부된 도면을 참조하여 상세하게 설명한다. 도 1은 본 발명의 일실시예에 따른 엣지 서비스 시스템을 나타낸 도면이다. 도 1을 참조하면, 본 발명의 일실시예에 따른 엣지 서비스 시스템을 나타낸 것을 알 수 있다. 본 발명의 일실시예에 따른 엣지 서비스 시스템은 분산 클라우드 시스템에 상응할 수 있다. 엣지 컴퓨팅은 사용자와 가까운 위치에서 서비스가 수행되거나 혹은 사용자의 가까운 위치에 데이터를 배치시키 는 등의 작업이 필수적이다. 그러므로 엣지 컴퓨팅은 서로 다른 위치에 있는 클라우드-에지-사용자 단말이 서로 네트워크로 연결되어야 하고, 엣지 간에도 서로 연결이 되어야 한다. 이렇게 연결된 시스템은 분산되어 있고 분 산된 시스템 위에서 구동되는 응용의 경우 필요에 따라 분산 배치되는 것을 알 수 있다. 그러므로 분산 배치된 응용은 서비스가 진행됨에 따라 사용자의 이동 상태 혹은 네트워크 및 시스템의 부하에 따라 목적에 맞게 이동 되어 진다. 또한, 이동된 서비스가 지속적으로 끊임없는 서비스를 위하여 응용의 이동과 함께 서비스 연결이 유 지되어야 한다. 엣지 서비스 시스템에서 수직 협업을 위한 코어 클라우드- 엣지 간의 협업을 상응하고, 수평 협업은 엣지 들 간 의 협업 구조에 상응할 수 있다. 도 1에 도시된 바와 같이 엣지 서비스 시스템은 각 협업을 위해서 네트워크 연 결이 필요하다. 이를 위해, 엣지 서비스 시스템은 터널링 기반 고속 네트워크가 구성되고, 이들 간에는 서로 간 의 클러스터를 연계하기 위한 공유된 스토리지 및 저장소를 포함할 수 있다. 도 2는 본 발명의 일실시예에 따른 마이그레이션을 포함한 협업을 위한 다중 클러스터 구조를 나타낸 도면이다. 도 2를 참조하면, 엣지 서비스 시스템은 전체 관리를 담당하는 글로벌 스케줄러에 의해서 구동되고 관리될 수 있다. 엣지 서비스 시스템은 다중 클러스터 상에서 마이그레이션을 위한 클러스터는 다중 클러스터를 기반으로 클러스 터(클라우드 포함)를 연결하여 다양한 서비스를 지원할 수 있다. 이 때, 클러스터는 다중 클러스터 상에서 고속 데이터 전송을 위하여 클러스터 간의 게이트웨이 연결 기능과 라 우팅 기능을 원할히 제공하기 위한 관리 기능을 포함하고, 플랫폼 관리 기능과 연동될 수 있다. 마이그레이션은 애플리케이션 마이그레이션 및 관련 데이터 마이그레이션 프로세스로 구성되며 애플리케이션 상 태를 실시간으로 전송 가능한 형식으로 캡처하고 이를 스냅샷 형태로 안정적이고 효율적으로 저장할 수 있다. 또한, 클러스터는 사용자의 서비스와 대용량 데이터를 클러스터 상에서 마이그레이션하기 위해서는 연동 인터페 이스 및 데이터 이동 편의성을 제공하는 기능을 포함할 수 있다. 이를 위하여, 클러스터는 클러스터 간 데이터 고속 이동을 위한 글로벌 저장소를 포함할 수 잇다. 클러스터는 수직 혹은 수평 협업을 위한 오프로딩을 위해 각 플랫폼 혹은 분산된 클라우드에서 구동되어야 할 서비스의 이관(Migration)은 마스터에 마이그레이션 기능을 제공하기 위한 인에이블러가 구동되고 각 노드 혹은 클러스터에 오퍼레이션을 위한 에이전트를 통하여 수행되고 관리될 수 있다. 또한, 클러스터는 가장 중요한 모빌리티 서비스를 지원하기 위한 엣지 컴퓨팅의 근접 서비스의 무중단 서비스를 제공할 수 있다. 따라서, 클러스터는 협업 작업을 위한 장애 조치를 지원하는 TCP 기반 프록시를 통해 고가용성 서비스를 제공할 수 있다. 엣지 컴퓨팅은 엣지 컴퓨팅 서비스의 원활한 제공을 위하여 대용량 데이터의 처리 및 분산 환경의 효율성을 극 대화할 수 있다. 이 때, 엣지 컴퓨팅은 클라우드 엣지간의 수평적인 분산 환경 및 클라우드 엣지와 코어 클라우드간 수직 분산 환경을 고려할 수 있다 이 때, 엣지 컴퓨팅은 상기 고려 사항을 통해 엣지 컴퓨팅의 협업 기능을 제공할 수 있다. 엣지 컴퓨팅은 분산 환경에 적용되는 서비스가 클러스터뿐 만 아니라 지역적인 분산 배치 및 고속 네트워크의 연결을 위하여, 클러스터 간의 상호 연결 및 고속 분산 배치를 제공할 수 있다. 이 때, 엣지 컴퓨팅은 클라우드 엣지 시스템의 다중 클러스터 노드 상 네트워크 연결 기능과 이에 대한 인터페 이스를 고려하여 설계될 수 있다.그리고, 엣지 컴퓨팅은 네트워크 연결 기능과 함께 빠른 데이터 이동 및 저장소를 연동하기 위한 기능을 포함할 수 있다. 클러스터는 서비스의 이동 작업은 크게 응용 서비스 이동(Service Migration)과 관련 데이터 이동(Data Migration)의 과정을 처리할 수 있다. 또한, 클러스터는 오프로딩 수행을 위해 GS 구성 노드들 간의 빠른 데이터 이동 작업을 지원할 수 있다. 클러스 터는 다중 클라우드 간에 데이터 이동 및 서비스 이동을 수행하기 위한 다중 클러스터 연동을 위한 추가 관리 기능을 제공할 수 있다. 또한, 클러스터는 각 클러스터에 수행되고 있는 서비스의 상태를 모니터링하고 이를 이동하기 위한 클러스터 선 택 및 배포 작업을 수행할 수 있도록 글로벌 스케쥴러와 연동될 수 있다. 이를 위하여, 클러스터는 각 클러스터 에 구성되어 있는 모니터링 정보를 관리하기 위한 저장소(Repository)와 이를 관리하는 기능을 포함할 수 있다. 또한, 클러스터는 각 클러스터에 구성되어 있는 정보를 클러스터 별로 분리가능한 네트워크 분리 및 자원 분리 기능을 수행할 수 있다. 수행되는 마이그레이션 기능은 글로벌 스케쥴러 자원 부하 모니터링 및 네트워크 모니 터링을 통한 리소스 집약적인 계산 작업을 하드웨어 가속기와 같은 별도의 프로세서 혹은 클러스트 혹은 클라우 드와 같은 외부 장치로 역할을 수행하는 것을 포함할 수 있다. 또한, 글로벌 스케쥴링 기능과 글로벌자원 관리 기능을 가지는 분산 클라우드 상에서도 도 2에 도시된 구조가 적용되고, 클라우드는 코어 클라우드 및 지역(regional )클라우드를 포함할 수 있다. 또한, 클라우드의 구조는 하이브리드클라우드 형태로 구성될 수도 있다. 도 3은 본 발명의 일실시예에 따른 협업 서비스를 위한 클러스터 간의 서비스 연결 구조를 나타낸 도면이다. 도 3를 참조하면, 엣지 컴퓨팅은 엣지 컴퓨팅 서비스를 원활하게 제공하고, 대용량 데이터의 처리 및 분산 환경 의 효율성을 극대화할 수 있다. 이를 위하여, 엣지 컴퓨팅은 클라우드 엣지 간의 수평적인 분산 환경 및 클라우드 엣지와 코어 클라우드간 수직 분산 환경에 대한 고려 사항이 엣지 컴퓨팅의 협업 기능을 제공하기 위한 필수적인 요구사항이 될 수 있다. 엣지 컴퓨팅은 분산 환경에 적용되는 서비스가 클러스터를 넘어 지역적인 분산 배치 및 고속 네트워크의 연결을 위하여서는 클러스터 간의 상호 연결 및 고속 분산 배치 기술이 필수적이다. 그러므로, 엣지 컴퓨팅은 클라우드 엣지 시스템의 다중 클러스터 노드 상 네트워크 연결 기능과 이에 대한 인터페이스를 포함할 수 있다. 그리고, 엣지 컴퓨팅은 네트워크 연결 기능과 함께 빠른 데이터 이동 및 저장소를 연동하기 위한 기능을 포함할 수 있다. 도 3에 도시된 바와 같이, 서비스 연결 구조는 코어-엣지, 엣지-엣지 간 연계하기 위하여 다중 클러스터 상의 네트워크 연결 기능을 나타낸 것을 알 수 있다. 네트워크 연결 기능은 클라우드 엣지의 이동형 서비스에 따른 근접 엣지의 사용 및 무중단 서비스를 위하여 서 로 다른 네트워크를 연계할 수 있다. 본 발명의 클러스터는 다중 클러스터를 네트워크로 연계하기 위하여 고속의 게이트웨이(Gateway Engine) 기능과 클러스터 내부에 인식을 위한 기본 라우팅(Route engine) 기능을 제공할 수 있다. 게이트웨이 및 라우터는 클러 스터 상의 관리 기능으로 글로벌 스케쥴러를 통하여 지역적으로 배포가 가능하다 고속의 게이트웨이는 다중 클러스터를 고속으로 연계 운용하기 위한 네트워크 연결 방식으로 두 네트워크간의 터널링을 이용하여 연계할 수 있다. 터널링의 효과는 페이로드를 터널링 구간에서 캡슐화 되고 특정 프로토콜을 사용하여 신뢰성 있는 데이터 전송 을 보장할 수 있다. 터널링은 인터넷의 7 계층(Layer)에서 L7, L3, L2 계층에 적용될 수 있다. 저수준의 계층의 터널링을 지원할수록 상위 레이어에서 사용하는 많은 프로토콜을 그대로 사용할 수 있고 성능 또한 빠르다. 본 발명에서는 L3의 터널링을 이용하여 두 클러스터를 연계할 수 있다. 그리고 이렇게 연결된 터널링에 사용되는 프로토콜은 처리 속도를 향상시키기 위하여 커널 바이패스를 위한 사용자 수준의 네트워크 드라이버(DPDK(Data Plane Development Kit))를 사용하여 터널링 네트워크와 연결할 수 있다. 그리고 마스터 노드와 워커 노드 간의 인터페이스는 터널링 인터페이스와 브리지를 통하여 연결되고 기존의 오버레이 네트워크로 구성된 네트워크와 연결될 수 있다.고속 게이트 웨이 엔진 기능은 사용자 수준의 네트워크 드라이버를 활용한 L3 계층의 다중 클러스터 터널링 기 능을 수행할 수 있다. 글로벌 공유 캐쉬 기능은 메모리 기반 저장소를 활용한 네트워크 기반 스토리지 시스템을 활용하여 고속의 공유 스토리지를 만든 후 로컬 공유 캐쉬와 연계하여 데이터를 공유할 수 있다. 이 때, 글로벌 공유 캐쉬 기능은 마 스터 노드에 있는 스토리지를 네트워크 기반 공유 스토리지로 활용할 수 있다. 커널 바이패스 지원 네트워크 스택 구성 기능은 커널 바이패스를 위한 라이브러리, 장치 관리 및 구성 관리 기 능(예: DPDK 하드웨어 지원 스택)을 포함할 수 있다. 사용자 수준 네트워크 드라이버 관리 기능은 사용자 수준의 네트워크 드라이버를 배포, 연결 및 관리하기 위한 CLI 기능(응용단에서 제공되는 네트워크 드라이버, 예: Cisco FD.io 등)을 포함할 수 있다. 라우터 에이전트 기능은 모든 노드에서 실행되고 다른 클러스터에서 동기화된 Endpoint resources를 사용하여 경로를 구성하고 전체 클러스터 간 연결을 활성화할 수 있다. 이 때, 라우터 에이전트 기능은 Iptable의 규칙을 설정할 수 있다. 이는 게이트웨이 엔진과 연결되어 통신하기 위하여 게이트웨이 엔진의 라우팅 테이블을 가지게 될 수 있다. 도 4 및 도 5는 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지를 나타낸 블록도이다. 도 4 및 도 5를 참조하면, 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지는 인메모리 컨테이너 스토리지부, 인메모리 컨테이너 스토리지 엔진부 및 인메모리 컨테이너 스토리지 관리부를 포함 한다. 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지는 상기에서 설명한 각 클러스터에 구성되어 있는 모니터링 정보를 관리하기 위한 저장소(Repository)에 상응할 수 있다. 인메모리 컨테이너 스토리지부는 복수의 컨테이너들로부터 컨테이너 이미지들을 생성하여 컨테이너 스토리 지 볼륨을 생성할 수 있다. 이 때, 인메모리 컨테이너 스토리지부는 비휘발성 특성을 가지는 메인 메모리상의 스토리지를 포함할 수 있다. 이 때, 인메모리 컨테이너 스토리지부는 컨테이너가 수행되는 파일 시스템(docker의 예는 /var/lib/docker) 볼륨을 생성하고, 동작시킬 수 있다. 인메모리 컨테이너 스토리지 엔진부는 메인 메모리, 디스크 스토리지 및 원격 스토리지를 통합하여 하나의 스토리지 형상인 컨테이너 스토리지 볼륨으로 구성된 인메모리 컨테이너 스토리지를 인메모리 컨테이너 스토리 지부에 생성할 수 있다. 이 때, 인메모리 컨테이너 스토리지 엔진부는 애플리케이션 가상화를 제공하는 컨테이너를 저장하는 컨테 이너 파일 시스템을 포함하고, 상기 컨테이너 파일 시스템은 통합 접근 계층, 컨테이너 계층 및 이미지 계층을 포함할 수 있다. 이 때, 상기 컨테이너 스토리지 볼륨은 통합 접근 영역, 컨테이너 계층 및 이미지 계층을 포함하고, 파일 시스 템 통합(Unifying File System) 기능을 이용하여 각 계층들의 통합 처리가 수행되는 컨테이너 파일시스템으로 구성될 수 있다. 이 때, 컨테이너 파일 시스템은 파일 시스템 통합(Unifying File System) 기능을 이용하여 상기 계층들의 통합 처리를 수행할 수 있다. 이 때, 상기 파일 시스템 통합(Unifying File System) 기능은 상기 컨테이너 파일 시스템의 상기 계층들에 포함 된 사용자 디렉토리와 관련 디렉토리들을 마운트하고, 상기 사용자 디렉토리와 상기 관련 디렉토리들에 대한 통 합 처리를 수행할 수 있다. 이 때, 상기 이미지 계층은 상기 링크 정보가 저장된 하부 디렉토리를 포함할 수 있다. 이 때, 상기 컨테이너 계층은 상기 사용자의 접근에 따라 상기 이미지 계층의 수정 내역에 대한 차분 정보를 저 장할 수 있다 이 때, 상기 통합 계층 영역은 상기 컨테이너 계층을 통해 상기 이미지 계층의 링크 정보에 접근하여 상기 사용 자가 파일 공유를 요청한 파일을 공유 받는 사용자 디렉토리를 포함할 수 있다. 이 때, 인메모리 컨테이너 스토리지부는 표준 블록 스토리지 인터페이스를 제공하여 기존의 가상 수정없이 운영할 수 있다. 인메모리 컨테이너 스토리지부는 컨테이너에서 발생한 컨테이너 접근 명령을 전달받을 수 있다. 인메모리 컨테이너 스토리지 엔진부는 메인 메모리, 디스크 스토리지 및 원격 스토리지를 통합하여 단일 형상의 인메모리 컨테이너 스토리지를 생성할 수 있다. 인메모리 컨테이너 스토리지 엔진부는 메인 메모리와 디스크 스토리지 및 원격 스토리지를 통합 사용하여 디스크 접근 명령을 처리할 수 있다. 인메모리 컨테이너 스토리지 엔진부는 스토리지 인터페이스 모듈, 스토리지 접근 분산 모듈, 스토리지 제 어 모듈을 포함할 수 있다. 스토리지 인터페이스 모듈은 표준 블록 스토리지 형식의 인터페이스를 제공하며, 컨테이너에서 발생한 디스크 접근 명령을 수신할 수 있다. 수신된 명령어는 스토리지 접근 분산 모듈로 전달될 수 있다. 스토리지 접근 분산 모듈은 디스크 접근 명령의 특징에 따라서 메인 메모리 스토리지, 디스크 스토리지 혹은 원 격 스토리지를 사용하여 서비스를 수행할지 결정하고, 메인 메모리 제어 모듈, 디스크 스토리지 제어 모듈 및 원격 스토리지 제어 모듈로 접근 명령을 전달할 수 있다. 메인 메모리 제어 모듈은 메인 메모리를 사용하여 디스크 접근 명령을 처리하며 이는 고속의 접근 속도를 제공 할 수 있다. 메인 메모리 디스크 생성 모듈은 블록 단위로 전송된 디스크 접근 명령어들을 주소 단위로 접근 가능한 메인 메 모리상에 실제 읽기/쓰기 동작을 수행할 수 있다. 이를 통하여 메인 메모리 디스크 생성 모듈은 메인 메모리상 에 가상 디스크의 데이타를 저장할 수 있다. 디스크 스토리지 제어 모듈은 디스크 스토리지를 사용하여 가상 데스크 접근 명령을 처리할 수 있다. 인메모리 컨테이너 스토리지 관리부는 사용자에게 공유 데이터를 제공할 수 있다. 이 때, 인메모리 컨테이너 스토리지 관리부는 컨테이너 파일 시스템 계층 관리 모듈을 통하여 공유 스토리 지의 공유 관리 기능을 제공하고 사용자에게 파일 공유를 위한 영역을 개별적으로 구성하여 제공할 수 있다. 이 때, 인메모리 컨테이너 스토리지 관리부는 상기 사용자의 요청에 따라 상기 컨테이너 계층과 상기 이미 지 계층 내의 파일들의 링크 정보를 애플리케이션에 제공하고 상기 애플리케이션이 상기 파일들에 접근하도록 허용할 수 있다. 도 6은 본 발명의 일실시예에 따른 컨테이너 인메모리 스토리지 생성 과정을 나타낸 도면이다. 도 6을 참조하면, 메인 메모리 스토리지와 디스크 스토리지를 통합하여 단일 하이브리드 형태의 인메모리 스토 리지를 생성하는 과정을 나타낸 것을 알 수 있다. 인메모리 컨테이너 스토리지는 표준 블록 스토리지 형식을 제 공하며, 스토리지의 앞부분에 메인 메모리 스토리지 영역을 매핑하고, 뒷 부분에 디스크 스토리지 영역을 매핑 하는 것을 알 수 있다. 메인 메모리 스토리지의 블록ID 1 ~ N 은 인메모리 컨테이너 스토리지의 블록ID 1 ~ N에 매핑된다. 디스크 스토 리지의 블록 ID 1 ~ M은 인메모리 컨테이너 스토리지의 블록 ID N+1 ~ N+M으로 매핑된다. 그리고 컨테이너 인메 모리 스토리지 블록 ID N과 N+1 사이에 스토리지 경계가 설정된다 도 7은 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 도면이다. 도 7을 참조하면, 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 것을 알 수 있다. 본 발명의 일실시예에 따른 스케줄러들은 동적으로 정책 설정이 가능한 스케줄러, 로그 데이터 분석을 통한 지 능형 스케줄러, 스케줄링 정책 변경에 따른 비용 최소화, 대기 및 연 시간 최소화된 스케줄러들을 포함할 수 있 다. 본 발명의 일실시에에 따른 스케줄러의 작업 대상은 모놀리틱 응용이나 마이크로 서비스를 실행하기 위한 상주 형 컨테이너와 서비스형 함수(FaaS)의 실행을 위한 비상주형 컨테이너를 포함할 수 있다.본 발명의 일실시예에 따른 스케줄러들은 도 13에 도시된 바와 같이 상기에서 언급한 3 Locations에 해당하는 글로벌 엣지 스케줄러와 3가지 스케줄러들(112, 113, 114)과 글로벌 엣지 스케줄러를 포함한 4가지 스케줄 러들로 구성될 수 있다. 글로벌 엣지 스케줄러는 마스터 엣지 스케줄러, 이웃 엣지 스케줄러 및 클라우드 스케줄러(11 4)를 연동하기 위한 스케줄러에 상응할 수 있으며 지능형 스케줄링 장치에 포함된 글로벌 스케줄러에 상응할 수도 있다. 마스터 엣지 스케줄러는 주요 서비스가 실행되는 엣지(마스터 엣지) 시스템에 포함된 스케줄러에 상응 할 수 있다. 이웃 엣지 스케줄러는 마스터 엣지 주변에 존재하는 이웃 엣지 시스템에 포함된 스케줄러에 상응할 수 있다. 클라우드 스케줄러는 공용/개인용 클라우드에 포함된 스케줄러에 상응할 수 있다. 도 8은 도 7에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러로 구성한 일 예를 나타낸 도면이다. 본 발명의 일실시예에 따른 스케줄러들의 구성 엣지 서비스에서 수평적/수직적 협업을 시스템 수준에서 적용할 수 있다. 이를 위해, 본 발명의 일실시예에 따른 스케줄러들은 LEVELED 스케줄러와 같은 직렬적 연결 구성과 SHARED 스케줄러와 같은 병렬적 연결 구성을 제공할 수 있다. LEVELED 스케줄러는 스케줄러들의 순차적 처리를 위한 직렬적 연결 구성이고, SHARED 스케줄러는 스케줄러들이 서로 경쟁하여 최적의 조건을 찾는 병렬적 연결 구성일 수 있다. 도 8을 참조하면, LEVELED 스케줄러 구성의 일 예를 나타낸 것을 알 수 있고, 마스터 엣지 스케줄러, 이웃 엣지 스케줄러 및 클라우드 스케줄러 순으로 직렬적 연결 구성인 3 LEVELED 스케줄러를 나타낸 것을 알 수 있다. 예를 들어, 글로벌 엣지 스케줄러는 1 Level인 첫번째 마스터 엣지 스케줄러를 통하여 자원 할당이 성공하면 2, 3 Level 스케줄러의 실행은 생략할 수 있다. 그러나, 글로벌 엣지 스케줄러는 1 Level인 첫번 째 마스터 엣지 스케줄러에서 자원 할당이 실패한다면, 순차적으로 다음 단계인 2 Level 스케줄러인 이웃 엣지 스케줄러 또는 3 Level 인 클라우드 스케줄러로 작업을 순차적으로 전달할 수 있다. 서비스 개 발자는 이러한 LEVELED 스케줄러를 사용하여 시스템 레벨에서 엣지 서비스의 부하 분산과 서비스 간 협업을 적 용할 수 있다. 도 9는 도 7에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러와 SHARED 스케줄러를 결합한 복합 적 구성의 일 예를 세부적으로 나타낸 도면이다. 도 9를 참조하면, LEVELD 스케줄러와 SHARED 스케줄러가 결합된 복합적 구성을 나타낸 것을 알 수 있다. 이 때, 2 Level로 구성된 LEVELED 스케줄러이면서 2 Level에서 이웃 엣지 스케줄러와 클라우드 스케줄러 간에 SHARED 스케줄러로 구성한 것을 알 수 있다. SHARED 스케줄러는 2개 이상의 스케줄러에 작업을 동시에 요청하여 각 스케줄러로부터 후보들을 받아서 그 중에 가장 적합한 스케줄러를 선택할 수 있다. 예를 들어, 1 Level인 첫 번째 마스터 엣지 스케줄러에서 자원 할당이 실패한다면, 글로벌 엣지 스케줄러 는 2 Level 스케줄러에서 이웃 엣지 스케줄러와 클라우드 스케줄러가 경쟁모드로 작업을 동시에 요청하고, 각 스케줄러들로부터 후보들을 받아서 가장 적합한 스케줄러를 선택할 수 있다. 도 10은 본 발명의 일실시예에 따른 지능형 스케줄러의 처리 흐름을 나타낸 블록도이다. 도 11은 도 10에 도시 된 지능형 스케줄러의 처리 흐름에서 이어진 엣지, 이웃 엣지 및 클라우드에서의 처리 흐름을 나타낸 블록도이 다. 도 10을 참조하면, 먼저 클라이언트로부터 요청받은 컨테이너를 워커 노드에 생성 및 실행하는 것을 알 수 있다(S410). 즉, 단계(S410)는 클라이언트가 컨테이너 생성에 해당하는 REST API를 글로벌 스케줄러(110a)에 호출할 수 있다.또한, 단계(S420)는 글로벌 스케줄러(110a)가, 호출된 REST API에 해당하는 글로벌 스케줄러 핸들러(120a)를 실 행시킬 수 있다. 또한, 단계(S430)는 글로벌 스케줄러 핸들러(120a)가 요청된 데이터를 요청 큐 관리기(130a)에 송신할 수 있다. 또한, 단계(S440)는 요청 큐 관리기(130a)가 요청된 데이터를 요청 큐에 저장할 수 있다. 또한, 단계(S450)는 글로벌 스케줄러 제어기(140a)가, 요청 큐로부터 우선 순위를 고려하여 처리할 데이터 를 가져올 수 있다. 또한, 단계(S460)는 글로벌 스케줄러 제어기(140a)가, 글로벌 스케줄러 작업 쓰레드(150a)에 복수의 작업 쓰레 드들을 생성하고, 글로벌 스케줄러 작업 쓰레드(150a)에 처리할 데이터를 전달하여 작업 큐 스케줄링 작업을 실 행할 수 있다. 또한, 단계(S470)는 글로벌 스케줄러 작업 쓰레드(150a)가, 요청된 작업을 분석하고 해당하는 클러스터(10, 20, 30)에 요청할 메시지를 작업 메시지 큐 관리기(160a)에 전달할 수 있다. 또한, 단계(S480)는 작업 메시지 큐 관리기(160a)가, 전달된 메시지를 작업 메시지 큐에 저장할 수 있다. 도 11을 참조하면, 단계(S490)는 글로벌 스케줄러 에이전트가 작업 메시지 큐로부터 엣지 시스템 또는 이웃 엣지 시스템에 해당하는 메시지가 있는지 체크하고, 해당되는 메시지를 가져올 수 있다. 또한, 단계(S491)는 글로벌 스케줄러 에이전트가. 가져온 메시지를 분석하여 자신의 엣지 API 서버에게 해당 API 호출할 수 있다. 또한, 단계(S492) 및 단계(S493)는 엣지 스케줄러가 워커 노드들에 있는 워커 에이전트들을 통하여 요청한 컨테 이너를 생성 및 실행할 수 있다. 도 12는 도 11에 도시된 작업 큐 스케줄링 단계의 일 예를 세부적으로 나타낸 동작흐름도이다. 도 12를 참조하면, 도 11에 도시된 상기 단계(S460) 내지 단계(S480)에서 작업 큐 스케줄링 단계에서, 작업 큐 에서 작업에 대한 스케줄링이 요청됐지만, 반복적으로 실패한 요청에 대한 작업을 우선적으로 처리하고, 우선순위 옵션을 갖는 요청이 기본 스케줄링 요청보다 우선으로 처리하기 위해 작업 큐를 3단계로 나누어 처리하는 세부적인 단계를 나타낸 것을 알 수 있다. 3단계 작업 큐는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이 스 큐(Base Queue)를 포함할 수 있다. 첫 번째 프런트 큐(First Front Queue)는 반복적으로 실패한 요청에 대한 우선으로 처리하기 위한 큐이다. 두 번째 프런트 큐(Second Front Queue)는 기본 스케줄링 요청보다 우선으로 처리하는 큐이다. 엣지 스케줄러 정책 실행기의 3단계 작업 큐의 처리는 아래와 같은 규칙으로 처리한다. 먼저, 단계(S410a)는 요청된 데이터에 우선순위 옵션(FAST Option)이 있는지 조사하고, 우선순위 옵션이 존재하 는 경우, 두 번째 프런트 큐에 데이터를 저장하고(S420a), 우선순위 옵션이 존재하지 않는 경우, 베이스 큐에 저장할 수 있다(S430a). 단계(S440a)는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이스 큐 (Base Queue)에 저장된 데이터를 작업 큐에 저장할 수 있다. 단계(S450a)는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이스 큐 (Base Queue)의 순으로 큐에 데이터가 있는지 조사하여 각 큐로부터 기설정된 개수(N*)씩 순서대로 스케줄링 작 업 큐에 생성하여 스케줄링 작업을 처리할 수 있다. 단계(S460a)는 스케줄링이 성공한 경우, 작업 큐 처리 절차를 종료하고, 스케줄링이 실패한 경우, 각 요청의 실 패한 횟수(Fail_Num)를 1 증가시키고(S470a), 실패한 횟수가 기설정된 실패 횟수(K*) 이상인지 판단하고 (S480a), 기설정된 실패 횟수(K*) 이상인 경우, 첫번째 프런트 큐(First Front Queue)에 저장할 수 있다 (S500a). 이 때, 단계(S480a)는 기설정된 실패 횟수(K*) 미만이고, 우선순위 옵션이 존재하는 경우에는 두 번째 프런트 큐(Second Front Queue)에 데이터를 저장하고(S420a), 우선순위 옵션이 존재하지 않는 경우에는 베이스 큐에 데이터를 저장할 수 있다(S430a). 도 12에 도시된 작업 큐의 스케줄링 단계는 3단계 작업 큐에 모든 요청 데이터가 없을 때까지 반복하고 데이터 가 없으면 대기할 수 있다. 도 13은 본 발명의 일실시예에 따른 지능형 스케줄러에 기반한 서비스의 분산 협업을 위한 동적 배치를 나타낸 도면이다. 도 13을 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄러의 스케줄러들은 고정적 스케줄러가 아닌 지능형 스케줄러로 제공될 수 있다. 본 발명의 일실시예에 따른 지능형 스케줄러는 클라우드, 엣지 시스템 및 이웃 엣지 시스템에 대한 실시간 모니터링 데이터 및 로그를 수집하고 수집된 데이터를 딥 러닝과 같은 AI 분석을 통하여 다양한 서 비스를 지능형 스케줄러로 동적 배치하는 지능형 분석기를 더 포함할 수 있다. 지능형 분석기는 인공지능 트레이닝을 통하여 지능형 스케줄러 정책을 도출할 때 많은 히스토리 데이터가 필요할 수 있다. 이 때, 지능형 분석기는 엣지 서비스 시스템을 구축하고 바로 인공지능 트레이닝은 불가능하지만, 일정 기 간 히스토리 데이터를 수집한 후에는 엣지 스케줄러 정책을 트레이닝할 수 있다. 도 14는 본 발명의 일실시예에 따른 지능형 분석기를 포함하는 지능형 스케줄러를 나타낸 블록도이다. 도 14를 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄러에 포함되는 지능형 분석기를 세부적으로 나타낸 것을 알 수 있다. 지능형 분석기는 엣지 응용별 정보 수집기, 엣지 클러스터 정보 수집기, 엣지 스케줄러 정책 실행기, 엣지 스케줄러 정책 플랜너, 엣지 스케줄러 정책 평가기, 엣지 스케줄러 정책 로그 기 및 엣지 스케줄러 정책 트레이너를 포함할 수 있다. 지능형 분석기는 엣지 스케줄러 정책 메타데이터 저장소 및 엣지 스케줄러 정책 로그 데이터 저장소 에 메타데이터 및 스케줄러 정책 로그를 저장할 수 있다. 엣지 스케줄러 정책(Edge Scheduler Policy) 메타데이터 저장소는 엣지 스케줄러 정책(ESP)을 저장할 수 있다. 엣지 스케줄러 정책 로그 데이터 저장소는 엣지 스케줄러 정책 로그기를 통하여 엣지 스케줄러 정책을 적 용한 결과를 저장할 수 있다. 엣지 응용별 정보 수집기는 엣지에서 구동되는 응용별로 응답속도, CPU 실사용률, 메모리 실사용률, 기타 자원사용 상태 등의 리소스 정보를 수집할 수 있다. 엣지 클러스터 정보 수집기는 클러스터를 구성하는 물리적 노드별 CPU 실사용률, 메모리 실사용률 등의 리소스 정보를 수집할 수 있다. 엣지 스케줄러 정책 실행기는 여러 엣지 스케줄러 정책을 적용한 후 최적화 정도에 따른 평가하여 가장 좋은 정책을 실행할 수 있다. 엣지 스케줄러 정책 플랜너는 엣지 응용별 정보 수집기와 엣지 클러스터 정보 수집기로부터 수집한 정보를 기반으로 정책을 계획을 수립할 수 있다. 엣지 스케줄러 정책 평가기는 엣지 스케줄러 정책을 적용한 후 최적화 정도에 따른 스케줄러 정책을 평가 할 수 있다. 엣지 스케줄러 정책 로그기는 실행된 스케줄러 정책과 그 결과를 로그로 저장할 수 있다. 엣지 스케줄러 정책 트레이너는 엣지 스케줄러 정책 로그 데이터 저장소로부터 히스토리 데이터를 가져와 스케줄러 정책을 트레이닝 할 수 있다. 도 15는 본 발명의 일실시예에 따른 지능형 스케줄러의 최적화 흐름을 나타낸 블록도이다. 도 15를 참조하면, 지능형 스케줄링의 핵심은 최소비용으로 최적화하는 방법과 최대한 빠른 속도로 최적화하는 방법을 모두 제공할 수 있다.먼저, 단계(S510a)는 엣지 응용별 정보 수집기와 엣지 클러스터 정보 수집기를 통하여 컨테이너 플 렛폼의 정보를 수집할 수 있다. 단계(S520a)는 엣지 스케줄러 정책 플랜너가 단계(S510)에서 수집된 정보를 바탕으로 엣지 스케줄러 정책 메타데이터 저장소로부터 정책을 선정할 수 있다. 단계(S530a)는 컨테이너 플렛폼의 부하 정도와 같은 리소스 정보에 기반하여 ESP 적용 비용 최소화 타입, ESP 적용 최적화 타입 중 하나를 선택할 수 있다. 단계(S531)는 ESP 적용 비용 최소화 타입으로, 엣지 스케줄러 정책 실행기를 통하여 컨테이너들을 할당할 수 있다. 단계(S533)는 ESP 적용 최적화 타입으로, 엣지 스케줄러 정책을 적용전과 적용한 후에 대한 상대 비교를 통하여 스케줄러 정책을 평가할 수 있다. 단계(S532)는 ESP 적용 최적화 타입으로, 엣지 스케줄러 정책 실행기를 통하여 컨테이너들을 할당할 수 있다. 단계(S534)는 ESP 적용 비용 최소화 타입으로, 엣지 스케줄러 정책을 적용전과 적용한 후에 대한 상대 비교를 통하여 스케줄러 정책을 평가할 수 있다. 단계(S560)는 최종적으로 선택된 엣지 스케줄러 정책을 비적용 부분이 없도록 스케줄러들 전체에 적용할 수 있 다. 단계(S570)는 엣지 스케줄러 정책 로그기를 통하여 스케줄러 정책 평가 결과를 엣지 스케줄러 정책 로그 데이터 저장소에 저장할 수 있다. 단계(S580)는 엣지 스케줄러 정책 트레이너가, 엣지 스케줄러 정책 로그데이터 저장소에 저장된 엣 지 스케줄러 정책 로그데이터를 수집할 수 있다. 단계(S590)는 엣지 스케줄러 정책 트레이너가, 스케줄러 정책 트레이닝을 수행하여 최적화된 지능형 스케 줄러 정책을 생성할 수 있다. 도 16은 본 발명의 일실시예에 따른 분산 클라우드 시스템에서 리스크 관리를 위한 서비스 마이그레이션을 나타 낸 도면이다. 도 16을 참조하면, 실시간으로 서비스를 재배포하고 지속적인 서비스를 유지하기 위해 분산 클라우드 시스템에 서의 마이그레이션 서비스를 제공할 수 있다. 리소스 희소성, 장애 및 비용 효율성을 고려하여 엣지 클라우드 간 또는 엣지 클라우드와 다른 클라우드 간 마이그레이션을 수행할 수 있다. 분산 클라우드 시스템은 에지 클라우드에 대한 사용자 요청을 수신하여 분산 클라우드 시스템을 제어하도록 할 수 있다. 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함할 수 있다. 이 때, 분산 클라우드 시스템은 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업 이 상기 처리된 작업의 결과를 취합할 수 있다. 이 때, 분산 클라우드 시스템은 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 것을 포함하는 명령 어들을 수행할 수 있다. 여기서, 상기 명령어들은 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행할 수 있다. 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함할 수 있다. 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장할 수 있다. 이 때, 분산 클라우드 시스템은 상기 메모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 분산 클라우드 시스템은 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포 인트 저장소에 저장하는 마이그레이션을 수행할 수 있다. 그리고, 엣지 클라우드는 가장 중요한 모빌리티 서비스를 지원하기 위한 엣지 클라우드의 근접 서비스에도 무중 단 서비스를 제공할 수 있다. 따라서, 분산 클라우드 시스템 및 분산 클라우드 시스템의 데이터 처리 방법은 분 산 클라우드의 장애 극복 방안으로 컨테이너 또는 가상머신 기반 애플리케이션 마이그레이션 기능을 제공할 수 있다. 분산 클라우드의 클라우드 컴퓨팅 제공자(CC-DCMP)는 글로벌 스케줄링 기능과 글로벌 리소스 관리 기능을 제공할 수 있다. 클라우드 컴퓨팅 제공자는 마이그레이션 기능을 수행하기 위해서 단일 클러스터뿐만 아니라 여러 클러스터 간의 서비스 이전을 위해 클러스터 간 마이그레이션과 서로 다른 클라우드 간의 마이그레이션 기능을 관리할 수 있다. 이는 Service Broker에서 수행되며 각 서비스의 상태가 대상 응용 프로그램으로 전송될 수 있다. 이 때, 서비스 마이그레이션 제공 장치인 엣지 컴퓨팅 시스템(520, 530)은 전송 가능한 형식으로 애플리케이션 의 상태를 실시간으로 캡처하고 이를 스냅샷 형태로 저장할 수 있다. 기본적으로 분산 클라우드 글로벌 관리에서는 DCMP에 의해 스케줄러가 애플리케이션을 노드에 할당하고 컨트롤 러가 게이트웨이를 통해 노드와 통신하여 애플리케이션을 생성, 삭제 또는 업데이트할 수 있다. 이 때, 게이트 웨이는 클러스터 간 네트워크를 연결하는 제어 기능을 담당할 수 있다. 각 노드에서 애플리케이션을 유지 관리하고 컨테이너 또는 가상 머신을 생성하는 제어 작업만 대상 노드 자체에 상주하는 개별 에이전트에 의해 수행될 수 있다. 엣지 컴퓨팅 시스템(520, 530)은 마이그레이션 컨트롤러를 통해 전반적인 마이그레이션 기능을 제공할 수 있다. 엣지 컴퓨팅 시스템(520, 530)은 애플리케이션의 상태를 유지하는 스냅샷(체크포인트 이미지)이 있는 경우 노드 간에 스냅샷을 전송할 수 있다. 이를 위해서, 엣지 컴퓨팅 시스템(520, 530)은 빠른 데이터 공유 기능을 포함한 저장 기능을 제공할 수 있다. 따라서, 엣지 컴퓨팅 시스템(520, 530)은 노드와 포드 간의 데이터 전송을 줄이기 위해 공유 고속 스토리지 메 커니즘을 활용하고 오케스트레이션 계층에서 고속 네트워크 연결을 활용할 수 있다. 시스템 장애에 대한 마이그레이션은 클라우드 서비스 제공(Cloud Service Provider, CSP)자에 의해 제공될 수 있다. 마이그레이션은 서비스 마이그레이션과 애플리케이션 마이그레이션이 포함될 수 있다. 애플리케이션 마이그레이션은 EC에서 애플리케이션 상태 확인, 대상 노드의 네트워크 확인, 애플리케이션의 현 재 상태를 스냅샷 이미지로 저장, 복원할 위치에서 이미지를 복원하는 제어 프로세스가 포함될 수 있다. 서비스 마이그레이션은 프록시 서비스를 통해 이전 노드 및 IP에서 이동한 노드 및 IP 주소와 연결하는 기능이 포함될 수 있다. CSP는 서비스 마이그레이션을 위해 다른 클라우드 리소스를 사용하여 네트워크 연결을 제공할 수 있다. 네트워크 연결은 분산 클라우드 간 연결을 위한 게이트웨이를 통한 고속 연결 방식을 포함할 수 있다. 고속 연결 방법은 IPsec 터널링과 같은 터널링을 사용하는 전용 및 직접 네트워크 연결 또는 네트워크 프록시를 통한 경로 우회가 포함될 수 있다. 각 클라우드는 단일 클러스터 또는 다중 클러스터로 구성될 수 있다. CSP에서 서비스 마이그레이션을 위한 데이터 관리를 제공할 수 있다. 서비스 마이그레이션을 위한 데이터 관리는 공유 고속 스토리지 또는 캐시 메커니즘을 활용하여 노드 간 스냅샷 (예: 체크포인트) 전송을 줄일 수 있다. 서비스 마이그레이션을 위한 데이터 관리는 마이크로 서비스 및 가상 머신을 사용한 데이터 관리와 데이터 스토 리지 배포가 포함될 수 있다. 로드 밸런싱, 시스템 장애 및 클라우드 서비스 고객(Cloud Service Customer, CSC) 정책의 경우 DCMP가 CSC의 애플리케이션 및 데이터를 검색하여 분산 클라우드의 사용 가능한 리소스로 마이그레이션 할 수 있다.도 17은 본 발명의 일실시예에 따른 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 장치를 나타낸 블록 도이다. 도 17을 참조하면, 본 발명의 일실시예에 따른 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 장치 는 안정적으로 컨테이너 상태를 전송 가능한 형식으로 실시간 캡처할 수 있다. 포드는 단일 컨테이너 일수도 있고 다중 컨테이너로 구성될 수 있다. 이러한 각 컨테이너의 상태는 소스 포드에 서 대상 포드로 전송될 수 있다. 클라우드 서비스 마이그레이션 장치는 컨테이너 마이그레이션 인터페이스로서 CRIU(Checkpoint Restore in Userspace)를 이용하여 컨테이너 기반의 API를 작성하여 통합할 수 있다. CRIU는 리눅스 운영 체제용 소프트웨어 도구이다. 이 도구를 사용하면 실행 중인 애플리케이션을 멈추고 이를 영구적인 스토리지로 파일들의 모임으로서 체크포인트시킬 수 있다. 기본적으로 컨테이너 기반 플랫폼(K8s)에서 포드는 노드의 프로세스에 의해 조정된다. 그러므로, 클라우드 서비스 마이그레이션 장치는 노드에 포드를 할당하고 복제 컨트롤러는 적절한 노 드와 통신하여 포드를 생성, 삭제 또는 업데이트 할 수 있다. 노드는 마이그레이션 에이전트에 의해, 포드를 유지 관리하고 컨테이너를 만드는 제어 작업을 수행할 수 있다. 클라우드 서비스 마이그레이션 장치는 사전에 마이그레이션 기능이 정의된 K8S CRD(CustomResourceDefinitions)를 통하여 마이그레이션을 수행할 수 있다 (EC capability Enabler - Migration Manager). CRD는 K8S의 관리 기능과 연계되어 마이그레이션을 관리하는 제어기능을 담당한다. 도 17에 도시된 바와 같이, 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 장치는 K8S의 API를 통 하여 노드에 상주하는 오프로딩 제어기(EC Capability operation - Migration agent)를 호출할 수 있다. 포드의 컨테이너 체크 포인트 이미지가 있으면 노드 간에 이 데이터를 전송하기 위한 메커니즘도 필요하다. 현 재 Kubernetes 내에서 노드 간 데이터 통신의 유일한 현재 예는 포드 템플릿과 같은 구성 데이터의 전송으로 재 배치하는 작업만 가능하다. 또한, 노드는 현재 오케스트레이션 계층에서 서로 통신하지 않는다. 이는 실시 간 무중단 서비스를 위한 데이터 및 서비스 마이그레이션의 큰 걸림돌이 된다. 그러므로, 클라우드 서비스 마이 그레이션 장치는 노드 및 포드 간의 데이터 전송을 줄이기 위하여 공유된 스토리지의 메커니즘을 활용하고 오케스트레이션 계층에서 네트워크 연결 기능을 활용한다. 공유 스토리지를 활용한 서비스 마이그레이션을 위하여, 클라우드 서비스 마이그레이션 장치는 오프로딩 제어기를 통해 엣지 클라우드 상에서 마이그레이션의 대상 노드의 포드 상태를 검사하고, 포드 상태를 추 출할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 소스 포드/노드 내에서 컨테이너 간 종속성의 순서를 고려하 여 모든 컨테이너들의 상태를 검사할 수 있다. 클라우드 서비스 마이그레이션 장치는 체크 포인트 생성 호출 기능을 제공할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 상기 포드에 포함된 컨테이너들의 라이브 상태의 이미지 파 일을 덤프하여 스냅샷을 생성할 수 있다. 클라우드 서비스 마이그레이션 장치는 체크 포인트 이미지 및 포드 상태 전송 기능을 제공할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 상기 엣지 클라우드의 공유 스토리지에 상응하는 체크 포인 트 저장소에 스냅샷을 전송할 수 있다. 체크 포인트 저장소는 쉽게 파일을 찾고 처리하기 위해 추가적인 관리 기능을 제공할 수 있다(데이터 관리 및 배치 관리 기능과 연계). 클라우드 서비스 마이그레이션 장치는 원격 대상 노드와 네트워크 연결을 확인할 수 있다. 클라우드 서비스 마이그레이션 장치는 체크 포인트 상태 확인 및 모니터링 기능을 제공할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 체크 포인트 저장소의 상태 정보를 모니터링할 수 있다. 클라우드 서비스 마이그레이션 장치는 체크 포인트 시점 복원 호출 기능을 제공할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 스냅샷 및 컨테이너 상태 파일로부터 컨테이너들의 종속성 순서를 고려하여 각 컨테이너의 복원 함수를 호출할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 에지 컴퓨팅 시스템(분산 클라우드 환경 포함)의 마이그레이 션을 위하여 에지에서 응용 상태의 검사, 이동가능한 노드의 네트워크 검사, 응용의 현재 상태를 스냅샷 이미지 로 저장, 복원할 위치에서 이미지 복원을 수행할 수 있다. 각 클라우드는 클러스터로 구성이 가능하며 고속 연결은 가상화에서 터널링을 위한 전용 네트워크 연결 방법 혹 은 네트워크 프록시를 통한 경로 우회 방안 등을 포함할 수 있다. 클라우드 서비스 마이그레이션 장치는 기정의된 프록시 서비스를 통하여 상기 스냅샷이 추출된 노드와 상 기 스냅샷이 마이그레이션될 노드의 IP 주소를 연결결시킬 수 있다. 도 18은 본 발명의 일실시예에 따른 분산 클라우드 시스템의 서비스 이동에 따른 무중단 서비스를 나타낸 도면 이다. 도 18을 참조하면, 본 발명의 일실시예에 따른 분산 클라우드 시스템의 데이터 처리 방법은 사용자의 이동에 따 른 응용 및 데이터의 마이그레이션을 수행할 수 있다. 특히, 에지 컴퓨팅과 같은 분산 클라우드 시스템에서 서 비스 협업을 위한 기능으로 사용자의 가까운 곳에 응용이 배치되고 서비스될 수 있다. 이에 따라, 단순히 하나 의 응용이 이동되는 것이 아니라 많은 여러 서버에서 수행되고 있는 응용이 동시에 마이그레이션 되어야 한다. 이 때, 에지 컴퓨팅은 서비스의 이동에 따라 지연이 발생할 수도 있고 서비스가 중단될 수도 있다. 분산 클라우드 시스템은 이런 서비스 중단이 발생하지 않도록 Fail-over를 수행하고, 다중 클러스터에서의 서비 스 배치 시 부하 분산을 수행할 수 있다. 도 18에 도시된 바와 같이, 분산 클라우드 시스템은 멀티 클러스터 간 터널링 (예: IPsec)을 통해서 이종 클러 스터 간 네트워크 연결성을 제공할 수 있다. 분산 클라우드 시스템은 Cluster1 클러스터에서 cluster2 클러스터로 서비스를 내보낼 수 있으며(service export), cluster1 클러스터에 배포된 pod(응용)에서는 해당 네트워크를 통해서 접근할 수 있다. Route agent는 Service Discovery를 지원하여 서비스를 내보낸(export) Cluster 2의 DNS server에 접근하여 해 당 서비스의 도메인 정보(도메인 이름 및 IP 주소)를 레지스트리에 업데이트하고 Cluster 2에 배포된 모든 응용 은 Cluster 2의 질의를 통하여 cluster 1에서 내보낸 서비스의 접근 IP 주소를 얻을 수 있다. 그러므로, Service export는 서로 다른 클러스터에 있는 서비스를 각 클러스터의 DNS 서버를 통하여 획득할 수 있다. Service export는 서로 다른 클러스터간 서비스 접근 경로를 알려 주는 것으로 Export된 서비스는 Route Agents에 의해 수행될 수 있다. 이 때, 다른 클러스터로 노출된 서비스는 마이그레이션이나 혹은 부하 분산등으로 타 클러스터에 있는 서비스와 끊김없이 연동될 수 있다. 그러므로, 분산 클라우드 시스템은 에지 컴퓨팅과 HA를 위한 프록시 서버나 로드 밸 런싱을 이용하여 서비스를 끊김없이 연결을 유지할 수 있다. 대부분의 클러스터의 접근 IP의 경우 보안상의 문제로 외부로 노출이 되지 않는 경우가 많다. 그러므로, 분산 클라우드 시스템은 접근 IP를 프록시 서버로 작성하여 내부 연결 IP와 연결하고, 이를 서비스가 필요한 곳에 쉽 게 배포가 가능하도록 할 수 있다. HA Proxy는 DNS 서버와 연계하여 링크에 대한 health check 및 fail-over를 지원하며, 동시에 서비스 이동에 따른 접근 기능을 지원할 수 있다. 도 19 내지 도 21은 본 발명의 일실시예에 따른 분산 클라우드 시스템의 무중단 서비스 과정에서 동영상 응용 서비스에 대한 마이그레이션을 수행하는 과정을 나타낸 도면이다. 도 19 내지 도 21을 참조하면, 본 발명의 일실시예에 따른 분산 클라우드 시스템의 데이터 처리 방법은 무중단 서비스 과정에서 동영상 응용 서비스에 대한 마이그레이션을 수행하는 것을 알 수 있다. 도 19를 참조하면, North 클러스터에 미디어 제공 응용 및 서비스 배포(vlc-http)되는 것을 알 수 있다. 이 때, North 클러스터에 Fail-over를 지원할 수 있는 TCP 기반 proxy pod 및 서비스 배포(proxy-vlc-http)되 는 것을 알 수 있다.proxy 서비스는 클러스터 외부 클라이언트에서 NodePort(예: 31001)로 클라이언트 연결(frontend)을 지원하며, 도메인 이름으로 vlc-http 서비스 연결(backend) 연결을 지원할 수 있다. North 클러스터는 vlc-http의 도메인 접근 링크 상태를 주기적으로 검사하여 DOWN LINK에서 UP LINK로의 자동 fail-over를 지원할 수 있다. client는 응용 클라이언트 이용하여 vlc-http 서버에 접속하고 동영상 스트리밍을 재생할 수 있다. 도 20을 참조하면, vlc-http 응용의 서비스의 South 클러스터 이동을 위하여 실시간 컨테이너 checkpoint 생성 하고, 이를 연계된 공유 저장소에 저장하고 South 클러스터에서 복원을 수행하는 것을 알 수 있다. South 클러스터에서 복원이 진행된 이후 서비스 내보내기 하면 North 클러스터에서 vlc-http 응용 및 서비스 링 크 활성화되는 것을 알 수 있다. 도 21을 참조하면, South 클러스터에서 이동이 완료되면 North 클러스터에서 응용 및 이에 대한 서비스가 삭제 되는 것을 알 수 있다. 이렇게 North 클러스터에서 서비스가 삭제되면 동시에 로컬 클러스터 (North 클러스터)의 도메인 링크는 사라지 게 되고, 실행 중인 Porxy 서버를 통해 South 클러스터의 링크가 자동 활동화 되고 이를 연결하여 서비스를 지 속 제공할 수 있다. 분산 클라우드 시스템은 보안상 노출되지 않는 서비스 연결에 대한 서비스 내보내기(export service)를 지원하 지 않기에 클러스터 외부로 응용 IP에 대한 노출을 위한 proxy를 제공할 수 있다. 분산 클라우드 시스템은 클러스터 외부로 응용 IP에 대한 노출을 위한 proxy를 DNS 서버(도메인 이름 서버)에 질의하여 서비스 이름을 가져올 수 있다. 분산 클라우드 시스템은 동시에 서비스 도메인 이름으로 맵핑된 IP 주소의 연결 상태를 주기적으로 체크하여 LINK DOWN 시 활성화된 서비스로 네트워크 연결을 제공할 수 있다. 도 22는 본 발명의 일실시에에 따른 에지 컴퓨팅 협업을 나타낸 도면이다. 도 22를 참조하면, EC에서는 서로 다른 위치에 있는 데이터 센터(클라우드 컴퓨팅), EC 어플라이언스 및 ECC가 네트워크를 통해 연결되고 에지 어플라이언스가 서로 연결될 수 있다. EC 애플리케이션은 분산 형태 또는 클러 스터인 EC 어플라이언스에서 실행될 수 있다. 따라서 EC에서의 협력에는 워크로드 오프로드 및 서비스 마이그레 이션을 통해 분산 리소스의 효율성을 극대화하는 기능이 포함될 수 있다. 도 22에 도시된 바와 같이 협력 역량에는 데이터 센터(클라우드 컴퓨팅), EC 어플라이언스와 수직적 협업을 위 한 ECC 간의 협업, EC 어플라이언스 간의 수평적 협업이 포함될 수 있다. 도 22과 같이 EC 협력을 위해서는 EC 어플라이언스 간의 네트워크 연결이 필요하다. 마이그레이션은 애플리케이 션 마이그레이션 및 관련 데이터 마이그레이션의 과정으로 구성되며, 애플리케이션의 상태를 실시간으로 전송 가능한 형식으로 캡처하고 실행 중인 애플리케이션의 상태를 유지하는 스냅샷을 저장할 수 있는 안정적이고 효 율적인 방법이 필요하다. 오프로드는 리소스 부하 모니터링 및 글로벌 스케줄러의 네트워크 모니터링을 통해 리 소스 집약적인 계산 작업의 역할을 하드웨어 가속기와 같은 별도의 프로세서 어플라이언스 또는 클라우드 데이 터 센터와 같은 외부 장치로 이전하는 것을 포함할 수 있다. 워크로드 오프로드 및 마이그레이션을 위해 각 EC 어플라이언스에서 실행될 EC 애플리케이션의 마이그레이션 및 오프로드는 마이그레이션을 위한 관리 소프트웨어와 EC 어플라이언스에서 마이그레이션 실행을 위한 에이전트를 제공하는 기능 인에이블러(소프트웨어)에 의해 주도될 수 있다. 또한 EC 애플리케이션과 대용량 데이터를 마이그레이션하기 위해 EC는 데이터 이동의 편의를 위한 스토리지 인 터페이스와 EC 어플라이언스 간의 고속 네트워크를 위한 글로벌 샤드 스토리지를 제공할 수 있다. EC는 기능 인에이블러(capability enabler)를 제공할 수 있다. 기능 인에이블러는 EC 기능을 수행하기 위한 소프트웨어 또는 하드웨어를 구현한 것일 수 있다. EC는 가상 기술을 사용할 때 EC 기능을 신속하게 제공하기 위해 컨테이너 또는 가상 머신에 내장된 기능 인에이 블러를 배포할 수 있다.EC는 분산된 자원에 대한 효율성을 극대화하기 위해 EC 어플라이언스 간의 협력을 제공할 수 있다. EC의 협력에는 작업 부하 오프로드 및 서비스 마이그레이션이 포함될 수 있다. 마이그레이션은 애플리케이션 마이그레이션 및 관련 데이터 마이그레이션 프로세스로 구성될 수 있다. 애플리케이션 마이그레이션에는 EC 애플리케이션 상태 확인, EC 기기의 대상 확인, EC 애플리케이션의 현재 상 태를 스냅샷 이미지로 저장, 복원할 대상에서 이미지 복원이 포함된 제어 프로세스가 포함될 수 있다. 원격 및 분리된 클러스터가 있는 EC 기기의 마이그레이션의 경우 마이그레이션은 고속 네트워크(예: 커널 바이 패스 네트워크)가 있는 공유 또는 연합 스토리지를 사용하여 실제 실행 중인 애플리케이션 상태의 스냅샷을 저 장 및 복원할 수 있다. 오프로드에는 마이그레이션 또는 복제를 사용하여 리소스 집약적인 계산 작업의 역할을 하드웨어 가속기와 같은 다른 EC 기기 또는 클라우드 데이터 센터와 같은 외부 장치로 이전하는 것이 포함될 수 있다. 도 23은 본 발명의 일실시예에 따른 엣지 컴퓨팅의 하이퍼 연결 사용 사례를 나타낸 도면이다. 도 23을 참조하면, 이 사용 사례는 에지 컴퓨팅에서 사용자에게 지속적인 서비스를 가능하게 하는 네트워크 연 결을 의미하는 하이퍼 연결의 예를 나타낸 것을 알 수 있다. 엣지 컴퓨팅의 기능 중 하나로 제시되는 하이퍼 연결은 엣지 컴퓨팅에서 사용자와 애플리케이션의 움직임에 따 라 지속적인 서비스를 가능하게 할 수 있다. 도 23에 도시된 바와 같이 클라우드 컴퓨팅을 사용하는 각 어플라이언스와 데이터 센터는 서로 다른 IP 주소로 원격으로 개별적으로 작동할 수 있다. EC(Edge Computing)) 어플라이언스로 구성된 에지 컴퓨팅 인프라는 사용자의 근접성 및 데이터 친화도로 인해 사용자의 요청에 따라 네트워크와 연결될 수 있다. EC 어플라이언스가 이미 네트워크에 연결되어 있는 경우 연결된 네트워크를 통해 서비스를 사용할 수 있다. 그 렇지 않으면 EC 어플라이언스의 공용 인터페이스(IP 주소 또는 URL)를 통해서만 네트워크가 연결될 수 있다. 또한 EC 어플라이언스가 클라우드 컴퓨팅을 포함한 클러스터 또는 데이터 센터로 구성되는 경우 애플리케이션에 액세스하기 위한 인터페이스가 보호되고 외부에 노출되지 않는다. 따라서 네트워크 연결은 보안 터널링 기반 네트워크 또는 애플리케이션 계층을 사용하는 네트워크 프록시 기반 라우팅 규칙과 같은 네트워크 계층 간의 게이트웨이와 클러스터 내부 인식을 위한 기본 라우팅을 활용할 수 있 다. 또한 서비스 중단을 방지하고 서비스 배포 시 로드 밸런싱을 수행하기 위해 장애 조치를 수행하려면 EC 어플라 이언스에 하이퍼 연결 기능이 필요하다. 도 23에 도시된 서비스 정보(IP, 도메인 이름 또는 url)는 접근할 수 있도록 서비스 이동을 위해 왼쪽과 오른쪽 에 있는 클러스터에 노출될 수 있다. 이 때, EC는 고가용성 프록시 서버나 로드밸런서를 사용하여 두 클러스터의 서비스 이동에 따른 중단 없는 서비 스를 지원할 수 있다. HA 프록시 서버 또는 로드 밸런서는 실시간으로 연결을 확인하고 연결이 끊긴 경우 서비스 노출을 사용하여 새 로운 연결로 페일오버를 수행할 수 있다. EC 어플라이언스(클라우드 컴퓨팅 포함)는 새로 생성된 서비스 또는 사용자의 네트워크 연결 요청을 지원해야 하므로 게이트웨이, 라우터 및 하이퍼 연결을 위한 서비스 노출은 컨테이너 또는 가상 머신에 의해 구현되고 ECC:AM을 통해 EC 어플라이언스에서 활성화될 수 있다. EC는 EC 어플라이언스의 가용성을 제공할 수 있다. 사용자 근접성을 위해 EC는 사용 가능한 리소스에 대해 빠른 네트워크 연결 및 서비스를 수행할 수 있다. EC 어플라이언스의 초연결성으로 EC는 EC 어플라이언스 간의 네트워크 연결을 제공해야 할 수 있다. EC 기기 간의 네트워크 연결에는 IPsec 터널링 또는 응용 프로그램 계층 간의 라우팅 규칙 기반 프록시와 같은 네트워크 계층 간의 게이트웨이가 포함될 수 있다. 클러스터가 있는 EC 기기의 경우 네트워크 연결은 클러스터 내부의 인식을 위해 라우터를 사용할 수 있다. 라우터 및 게이트웨이는 하이퍼 연결 기능을 활성화하기 위해 컨테이너 또는 가상 머신으로 구성된 하드웨어 장 치 또는 소프트웨어를 포함할 수 있다. 본 발명은 고가용성을 위한 초연결성을 위해 EC는 사용자와 EC 애플리케이션 간의 원활한 네트워크 연결을 제공 할 수 있다. EC는 각 기기 및 해당 EC 애플리케이션에 액세스할 수 있는 EC 애플리케이션 인터페이스(IP, 도메인 이름 또는 URL)를 검색할 수 있도록 각 기기에 서비스를 노출할 수 있다. EC는 서비스 이동에 따른 중단 없는 서비스를 지원하기 위해 로드밸런서 또는 고가용성 프록시 서버를 제공할 수 있다 HA 프록시 서버 또는 로드 밸런서는 연결을 확인하고 연결이 끊긴 경우 서비스 노출을 사용하여 새 연결로 장애 조치를 수행할 수 있다. 도 24는 본 발명의 일실시예에 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 방법을 나타낸 동작흐름 도이다. 도 24를 참조하면, 본 발명의 일실시예에 분산 클라우드 시스템의 데이터 처리 방법에 포함되는 클라우드 서비 스 마이그레이션 방법은 먼저 컨테이너 상태를 검사할 수 있다(S710). 즉, 단계(S710)는 클라우드 서비스 마이그레이션 장치가 오프로딩 제어기를 통해 엣지 클라우드 상에서 마 이그레이션의 대상 노드의 포드 상태를 검사하고, 포드 상태를 추출할 수 있다. 이 때, 단계(S710)는 분산 클라우드 시스템이 에지 클라우드에 대한 사용자 요청을 수신하여 분산 클라우드 시 스템을 제어하도록 할 수 있다. 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함할 수 있다. 이 때, 단계(S710)는 분산 클라우드 시스템이, 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분 하고 상기 작업이 상기 처리된 작업의 결과를 취합할 수 있다. 포드는 단일 컨테이너 일수도 있고 다중 컨테이너로 구성될 수 있다. 이러한 각 컨테이너의 상태는 소스 포드에 서 대상 포드로 전송될 수 있다. 이 때, 단계(S710)는 소스 포드/노드 내에서 컨테이너 간 종속성의 순서를 고려하여 모든 컨테이너들의 상태를 검사할 수 있다. 본 발명의 일실시예에 클라우드 서비스 마이그레이션 방법은 스냅샷을 생성할 수 있다(S720). 즉, 단계(S720)는 컨테이너의 라이브 상태의 이미지 파일을 덤프하여 스냅샷을 생성할 수 있다. 이 때, 단계(S720)는 분산 클라우드 시스템이 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 것을 포함하는 명령어들을 수행할 수 있다. 여기서, 상기 명령어들은 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행할 수 있다. 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함할 수 있다. 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장할 수 있다. 또한, 본 발명의 일실시예에 클라우드 서비스 마이그레이션 방법은 마이그레이션을 수행할 수 있다(S730). 즉, 단계(S730)는 체크 포인트 저장소에 스냅샷을 전송할 수 있다. 체크 포인트 저장소는 쉽게 파일을 찾고 처 리하기 위해 추가적인 관리 기능을 제공할 수 있다(데이터 관리 및 배치 관리 기능과 연계). 이 때, 단계(S730)는 분산 클라우드 시스템이 상기 메모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달 을 감소시킬 수 있다.이 때, 단계(S730)는 분산 클라우드 시스템이 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상 응하는 체크 포인트 저장소에 저장하는 마이그레이션을 수행할 수 있다. 이 때, 단계(S730)는 원격 대상 노드와 네트워크 연결을 확인할 수 있다. 이 때, 단계(S730)는 사전에 마이그레이션 기능이 정의된 K8S CRD(CustomResourceDefinitions)를 통하여 마이 그레이션을 수행할 수 있다 (EC capability Enabler - Migration Manager). 이 때, 단계(S730)는 체크 포인트 이미지 및 포드 상태를 전송할 수 있다. 이 때, 단계(S730)는 체크 포인트 저장소의 상태 정보를 모니터링할 수 있다. 이 때, 단계(S730)는 체크 포인트 시점 복원 호출 기능을 제공할 수 있다. 이 때, 단계(S730)는 체크포인트 저장소에 저장된 스냅샷 및 컨테이너 상태 파일로부터 종속성 순서를 고려하여 각 컨테이너를 복원 함수를 호출할 수 있다. 이 때, 단계(S730)는 기정의된 프록시 서비스를 통하여 상기 스냅샷이 추출된 노드와 상기 스냅샷이 마이그레이 션될 노드의 IP 주소를 연결시킬 수 있다. 도 25는 본 발명의 일실시예에 따른 분산 클라우드 시스템의 무중단 서비스 방법을 나타낸 동작흐름도이다. 도 25를 참조하면, 본 발명의 일실시예에 분산 클라우드 시스템의 데이터 처리 방법에 포함되는 무중단 서비스 방법은 먼저 에이전트를 배포할 수 있다(S810). 즉, 단계(S810)는 멀티 클러스터 간 터널링 (예: IPsec)을 통해서 이종 클러스터 간 네트워크 연결을 수행할 수 있다. 이 때, 단계(S810)는 연결 후 각 클러스터 간 연결을 위한 에이전트를 (Route Agent)를 배포할 수 있다. 또한, 본 발명의 일실시예에 따른 분산 클라우드 시스템의 무중단 서비스 방법은 응용 및 서비스를 배포할 수 있다(S820). 즉, 단계(S820)는 클러스터에 응용과 서비스를 생성하여 배포할 수 있다. 또한, 본 발명의 일실시예에 따른 분산 클라우드 시스템의 무중단 서비스 방법은 프록시 서버를 배포할 수 있다 (S830). 즉, 단계(S830)는 Fail-over를 지원하는 HA 프록시 서버 및 이에 대한 서비스를 생성하여 배포할 수 있다. 이 때, 배포된 프록시 서버는 보안상 노출되지 않는 IP와 연결하여 사용자의 서비스를 제공하고 클러스터 내부 는 도메인 이름을 통하여 각 노드와 연결될 수 있다. 또한, 본 발명의 일실시예에 따른 분산 클라우드 시스템의 무중단 서비스 방법은 Fail-over를 수행할 수 있다 (S840). 즉, 단계(S840)는 연결 이후 도메인 접근을 위한 연결 상태를 주기적으로 검사할 수 있다. 이 때, 단계(S840)는 만약에 연결이 끊어 진 경우, 사전에 등록된 새로운 연결로 Fail-over를 수행할 수 있다. 도 26은 본 발명의 일실시예에 따른 컴퓨터 시스템을 나타낸 블록도이다. 도 26을 참조하면, 본 발명의 일실시예에 따른 분산 클라우드 시스템 및 분산 클라우드 시스템 및 저장매체는 컴퓨터로 읽을 수 있는 기록매체와 같은 컴퓨터 시스템에서 구현될 수 있다. 도 26에 도시된 바와 같이, 컴퓨터 시스템은 버스를 통하여 서로 통신하는 하나 이상의 프로세서, 메모리, 사용자 인터페이스 입력 장치, 사용자 인터페이스 출력 장치 및 스토리지를 포함할 수 있다. 또한, 컴퓨터 시스템은 네트워크에 연결되는 네트워크 인터페이스를 더 포함할 수 있다. 프로세서 는 중앙 처리 장치 또는 메모리나 스토리지에 저장된 프로세싱 인스트럭션들을 실행하는 반 도체 장치일 수 있다. 메모리 및 스토리지는 다양한 형태의 휘발성 또는 비휘발성 저장 매체일 수 있다. 예를 들어, 메모리는 ROM이나 RAM을 포함할 수 있다. 본 발명의 일실시예에 따른 병렬연산작업 오프로딩 장치는 하나 이상의 프로세서; 및 상기 하나 이상의 프로세서에 의해 실행되는 적어도 하나 이상의 프로그램을 저장하는 메모리를 포함하고, 상기 프로세서는, 에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하도록 하고, 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고; 상기 프 로세서는, 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업이 상기 처리된 작업 의 결과를 취합하고, 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하도록 하는; 프로세스들을 수행하 고, 여기서, 상기 프로세서는, 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행한다. 이 때, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하 고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 상기 메 모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 상기 프로세서는 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트 저 장소에 저장하는 마이그레이션을 수행할 수 있다. 또한, 상기 프로세서는 외부 기기에 의해 요청된 에지 컴퓨터 시스템의 애플리케이션을 실행하고, 상기 애플리 케이션의 스냅샷 이미지를 생성하고; 및 상기 생성한 스냅샷 이미지를 상기 스토리지에 저장하고 마이그레이션 (migration) 시 상기 저장하는 이미지를 전송하는 것을 포함한다. 이 때, 상기 애플리케이션은, 상기 외부 기기와 무중단 서비스 연결이 유지될 수 있다. 이 때, 상기 애플리케이션의 현재 상태를 상기 스냅샷 이미지로 저장하는 것을 포함할 수 있다. 이 때, 마이그레이션(migration)된 경우, 상기 스냅샷 이미지를 복원하는 것을 포함할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 컴퓨터로 수행 가능한 프로그램을 저장하는 저 장매체인 스토리지는 에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하도록 하고, 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고; 상 기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업이 상기 처리된 작업의 결과를 취 합하고, 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 것을 포함하는 명령어들을 수행하고, 여기 서, 상기 명령어들은 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행하는 것을 포함한다. 이 때, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하 고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 상기 메 모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 상기 프로그램은 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트 저 장소에 저장하는 마이그레이션을 수행할 수 있다. 또한, 상기 스토리지는 사용자 기기에 의해 요청된 에지 컴퓨터 시스템의 애플리케이션을 실행하고; 상기 애플리케이션의 스냅샷 이미지를 생성하고; 및 상기 생성한 스냅샷 이미지를 저장하고 마이그레이션(migration) 시 상기 저장하는 이미지를 전송한다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 엣지 컴퓨팅의 서비스를 위하여 다양한 환경의 분산 컴퓨팅 환경을 원활히 지원할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 클러스터 간의 효율적인 협업을 위한 고성능 아키텍처를 제 공할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 컨테이너의 효율성을 높이기 위한 메모리 기반 저장장치를 활용하여 고성능 컨테이너 및 컨테이너 간 데이터 연계를 위한 글로벌 캐쉬를 구성할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 협업 서비스를 위한 클러스터 간의 고속 네트워크 연결을 제공할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 클러스터 간의 협업 서비스를 위하여 터널링 기반의 고속 네트워크를 구성할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 연계된 네트워크 상에서 클러스터 간의 협업을 위한 관리 기술을 제공할 수 있다.본 발명의 일실시예에 따른 분산 클라우드 시스템은 제안하는 클라우드와 엣지 간 수직 및 수평적 협업 최적화 를 위한 시스템의 구조 및 지능형 스케줄링 방법을 통하여, 응용프로그램 개발자는 엣지-엣지 단말 간 수직적 협업과 엣지-클라우드 엣지간 수평적 협업을 연동하는 엣지 플랫폼 기반 분산 협업이 시스템 레벨에서 적용을 구체화할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 분산된 클러스터 상에서 사용자와 가까운 곳에 서비스 배치 를 위한 서비스 이동방법 및 마이그레이션 방법을 제공한다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 서비스 이동을 서비스 프록시 서버를 통하여 제공하고 사용 자가 이동시 서비스를 끊 없이 사용할 수 있도록 기능을 제공할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 메모리의 제약 사항 해결하며, 메모리의 크기 제약은 본 발 명에 구성된 확장형 스토리지 구조로 해결하고, 휘발성 특성의 경우 실시간 스냅샷 백업 환경을 통한 백업/리스 토어 기능으로 해결할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 커널 병합된 손쉬운 사용으로 모듈이 리눅스 상에 포함되어 손쉽게 시스템을 구성하고 사용할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 L3 레벨의 다중 클러스터의 사용자 레벨 네트워크 터널링 연결을 제공하여 다중 클러스터 네트워크의 연결을 고속으로 수행하기 위하여 커널 바이패스 네트워크 스택을 활용한 터널링 기법을 적용하여 고속 네트워크를 구성할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 협업을 위한 최적화된 지능형 스케쥴러 기능을 제공할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 저지연 서비스에 적합한 스케줄링을 제공할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 수직적 수평적인 통합적인 협업을 제공할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 시스템 레벨에서 협업을 적용할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 지능형 오프로딩 기반의 협업을 제공할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 끊김이 없는 서비스 연계를 제공할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 클라우드/엣지/이웃 엣지 포함한 통합적인 분산처리를 제공 할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 로그나 통계 정보를 기반으로 효율적인 지능형 스케줄러 정 책을 생성할 수 있다. 본 발명의 일실시예에 따른 분산 클라우드 시스템은 고성능 컴퓨팅 환경을 통한 공유 저장 캐시 기능으로 클러 스터간 마이그레이션을 제공할 수 있다. 이상에서와 같이 본 발명의 일실시예에 따른 분산 클라우드 시스템, 분산 클라우드 시스템의 데이터 처리 방법 및 저장매체는 상기한 바와 같이 설명된 실시예들의 구성과 방법이 한정되게 적용될 수 있는 것이 아니라, 상기 실시예들은 다양한 변형이 이루어질 수 있도록 각 실시예들의 전부 또는 일부가 선택적으로 조합되어 구성될 수 도 있다."}
{"patent_id": "10-2023-0086208", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일실시예에 따른 엣지 서비스 시스템을 나타낸 도면이다. 도 2는 본 발명의 일실시예에 따른 마이그레이션을 포함한 협업을 위한 다중 클러스터 구조를 나타낸 도면이다. 도 3은 본 발명의 일실시예에 따른 협업 서비스를 위한 클러스터 간의 서비스 연결 구조를 나타낸 도면이다. 도 4 및 도 5는 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지를 나타낸 블록도이다. 도 6은 본 발명의 일실시예에 따른 컨테이너 인메모리 스토리지 생성 과정을 나타낸 도면이다. 도 7은 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 도면이다. 도 8은 도 7에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러로 구성한 일 예를 나타낸 도면이다. 도 9는 도 7에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러와 SHARED 스케줄러를 결합한 복합 적 구성의 일 예를 세부적으로 나타낸 도면이다. 도 10은 본 발명의 일실시예에 따른 지능형 스케줄러의 처리 흐름을 나타낸 블록도이다. 도 11은 도 10에 도시된 지능형 스케줄러의 처리 흐름에서 이어진 엣지, 이웃 엣지 및 클라우드에서의 처리 흐 름을 나타낸 블록도이다. 도 12는 도 11에 도시된 작업 큐의 스케줄링 단계의 일 예를 세부적으로 나타낸 동작흐름도이다. 도 13은 본 발명의 일실시예에 따른 지능형 스케줄러에 기반한 서비스의 분산 협업을 위한 동적 배치를 나타낸 도면이다. 도 14는 본 발명의 일실시예에 따른 지능형 분석기를 포함하는 지능형 스케줄러를 나타낸 블록도이다. 도 15는 본 발명의 일실시예에 따른 지능형 스케줄러의 최적화 흐름을 나타낸 블록도이다. 도 16은 본 발명의 일실시예에 따른 분산 클라우드 시스템에서 리스크 관리를 위한 서비스 마이그레이션을 나타 낸 도면이다. 도 17은 본 발명의 일실시예에 따른 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 장치를 나타낸 블록 도이다. 도 18은 본 발명의 일실시예에 따른 분산 클라우드 시스템의 서비스 이동에 따른 무중단 서비스를 나타낸 도면 이다. 도 19 내지 도 21은 본 발명의 일실시예에 따른 분산 클라우드 시스템의 무중단 서비스 과정에서 동영상 응용 서비스에 대한 마이그레이션을 수행하는 과정을 나타낸 도면이다. 도 22는 본 발명의 일실시에에 따른 에지 컴퓨팅 협업을 나타낸 도면이다. 도 23은 본 발명의 일실시예에 따른 엣지 컴퓨팅의 하이퍼 연결 사용 사례를 나타낸 도면이다. 도 24는 본 발명의 일실시예에 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 방법을 나타낸 동작흐름 도이다. 도 25는 본 발명의 일실시예에 따른 분산 클라우드 시스템의 무중단 서비스 방법을 나타낸 동작흐름도이다. 도 26은 본 발명의 일실시예에 따른 컴퓨터 시스템을 나타낸 도면이다."}
