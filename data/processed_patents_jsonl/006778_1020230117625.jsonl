{"patent_id": "10-2023-0117625", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0035230", "출원번호": "10-2023-0117625", "발명의 명칭": "펑춰링 옵션을 지원하는 메모리 장치 및 그것의 동작 방법", "출원인": "삼성전자주식회사", "발명자": "김호연"}}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "제 1 쓰기 동작시 제 1 크기의 제 1 에러 정정 코드를 저장하는 제 1 메모리 장치;제 2 쓰기 동작시 상기 제 1 크기보다 큰 제 2 크기의 제 2 에러 정정 코드를 저장하는 제 2 메모리 장치; 및상기 제 1 메모리 장치 및 상기 제 2 메모리 장치를 제어하는 제어 로직 회로를 포함하고,상기 제어 로직 회로는 펑춰링 옵션(puncturing option) 정보에 따라 쓰기 데이터에 대하여 상기 제 1 에러 정정 코드 및 상기 제 2 에러 정정 코드 중에서 어느 하나를 생성하는 에러 정정 회로를 포함하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 제 1 메모리 장치는 펑춰드 에러 정정 코드를 적용하는 메모리 장치이고,상기 제 2 메모리 장치는 오리지널 에러 정정 코드를 적용하는 메모리 장치인 것을 특징으로 하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 제 1 메모리 장치는 휘발성 메모리 장치이고,상기 제 2 메모리 장치는 비휘발성 메모리 장치인 것을 특징으로 하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,상기 제 1 크기는 에러율에 따라 가변적이고,상기 제 2 크기는 상기 에러율과 상관없이 고정된 것을 특징으로 하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 펑춰링 옵션 정보는 초기화 동작에서 레지스터에 설정되는 것을 특징으로 하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 펑춰링 옵션 정보는 실시간으로 변경되는 것을 특징으로 하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 1 항에 있어서,상기 펑춰링 옵션 정보는 읽힌 데이터의 에러율에 따라 가변되는 것으로 특징으로 하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7 항에 있어서,상기 에러율의 범위에 따라 복수의 펑춰링 옵션들이 존재하는 것을 특징으로 하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "공개특허 10-2025-0035230-3-제 1 메모리 장치;제 2 메모리 장치; 및상기 제 1 메모리 장치 및 상기 제 2 메모리 장치를 제어하는 제어 로직 회로를 포함하고,상기 제어 로직 회로는,펑춰링 옵션 정보에 따라 상기 제 1 메모리 장치를 위한 펑춰드 에러 정정 코드를 생성하거나, 상기 제 2 메모리 장치를 위한 오리지널 에러 정정 코드를 생성하는 에러 정정 회로; 및상기 제 1 메모리 장치 혹은 상기 제 2 메모리 장치로부터 읽힌 데이터의 에러율을 추적하는 트래킹 로직을 포함하고,상기 에러율에 따라 상기 펑춰링 옵션 정보가 변경되는 것을 특징으로 하는 메모리 장치."}
{"patent_id": "10-2023-0117625", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "메모리 장치의 동작 방법에 있어서,쓰기 데이터를 수신하는 단계;펑춰링 옵션 정보에 따라 에러 정정 코드 레벨을 설정하는 단계;상기 에러 정정 코드 레벨에 따라 상기 쓰기 데이터에 대한 에러 정정 코드를 생성하는 단계; 및상기 쓰기 데이터 및 상기 에러 정정 코드를 상기 에러 정정 코드 레벨에 대응하는 메모리 장치에 저장하는 단계를 포함하는 방법."}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명에 따른 메모리 장치는, 제 1 쓰기 동작시 제 1 크기의 제 1 에러 정정 코드를 저장하는 제 1 메모리 장 치, 제 2 쓰기 동작시 상기 제 1 크기보다 큰 제 2 크기의 제 2 에러 정정 코드를 저장하는 제 2 메모리 장치, 및 상기 제 1 메모리 장치 및 상기 제 2 메모리 장치를 제어하는 제어 로직 회로를 포함하고, 상기 제어 로직 회 로는 펑춰링 옵션(puncturing option) 정보에 따라 쓰기 데이터에 대하여 상기 제 1 에러 정정 코드 및 상기 제 2 에러 정정 코드 중에서 어느 하나를 생성하는 에러 정정 회로를 포함할 수 있다."}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 펑춰링 옵션을 지원하는 메모리 장치, 및 그것의 동작 방법에 관한 것이다."}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "일반적으로, CXL(Compute Express Link)은 오픈 스탠다드 기반의 고성능 인터커넥트 프로토콜로써, 주로 데이터 서버 시스템 환경의 CPU(Central Processing Unit), 메모리, 및 가속기 사이의 빠른 데이터 전송을 목표로 한다. CXL은 높은 대역폭, 낮은 지연성, 메모리 공유 기능, PCI Express(PCIe)와의 호환성 등의 장점을 제공하 며, AI(Artificial Intelligence)와 빅 데이터와 같은 고성능 컴퓨팅 작업에 있어서의 효율적인 데이터 교환을 가능하게 한다."}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 목적은 리던던시 감소를 위하여 차별적인 ECC(Error Correction Code)을 적용하는 메모리 장치, 및 그것의 동작 방법은 제공하는데 있다."}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 실시 예에 따른 메모리 장치는, 제 1 쓰기 동작시 제 1 크기의 제 1 에러 정정 코드를 저장하는 제 1 메모리 장치; 제 2 쓰기 동작시 상기 제 1 크기보다 큰 제 2 크기의 제 2 에러 정정 코드를 저장하는 제 2 메모 리 장치; 및 상기 제 1 메모리 장치 및 상기 제 2 메모리 장치를 제어하는 제어 로직 회로를 포함하고, 상기 제 어 로직 회로는 펑춰링 옵션(puncturing option) 정보에 따라 쓰기 데이터에 대하여 상기 제 1 에러 정정 코드 및 상기 제 2 에러 정정 코드 중에서 어느 하나를 생성하는 에러 정정 회로를 포함할 수 있다. 본 발명의 다른 실시 예에 따른 메모리 장치는, 제 1 메모리 장치; 제 2 메모리 장치; 및 상기 제 1 메모리 장 치 및 상기 제 2 메모리 장치를 제어하는 제어 로직 회로를 포함하고, 상기 제어 로직 회로는, 펑춰링 옵션 정보에 따라 상기 제 1 메모리 장치를 위한 펑춰드 에러 정정 코드를 생성하거나, 상기 제 2 메모리 장치를 위한 오리지널 에러 정정 코드를 생성하는 에러 정정 회로; 및 상기 제 1 메모리 장치 혹은 상기 제 2 메모리 장치로 부터 읽힌 데이터의 에러율을 추적하는 트래킹 로직을 포함하고, 상기 에러율에 따라 상기 펑춰링 옵션 정보가 변경되는 것을 특징으로 한다. 본 발명의 실시 예에 따른 메모리 장치의 동작 방법은, 쓰기 데이터를 수신하는 단계; 펑춰링 옵션 정보에 따라 에러 정정 코드 레벨을 설정하는 단계; 상기 에러 정정 코드 레벨에 따라 상기 쓰기 데이터에 대한 에러 정정 코드를 생성하는 단계; 및 상기 쓰기 데이터 및 상기 에러 정정 코드를 상기 에러 정정 코드 레벨에 대응하는 메모리 장치에 저장하는 단계를 포함할 수 있다. 본 발명의 실시 예에 따른 컴퓨팅 시스템은, 시스템 버스; 상기 시스템 버스에 연결된 적어도 하나의 이종 메모 리 장치; 및 상기 시스템 버스에 연결된 적어도 하나의 프로세서를 포함하고, 상기 적어도 하나의 이종 메모리 장치는 펑춰링 옵션(puncturing option) 정보에 따라 에러 정정 코드의 레벨을 변경하는 것을 특징으로 한다. 본 발명의 실시 예에 따른 이종 메모리의 동작 방법은, 저신뢰 메모리 장치로부터 데이터를 읽는 단계; 상기 읽 힌 데이터에 대한 에러 정정 동작을 수행하는 단계; 상기 에러 정정 동작에 따른 CE(Codeword Error) 카운트를 추적하는 단계; 및 상기 CE 카운트 값이 기준값 이상일 때, 상기 저신뢰 메모리 장치의 상기 데이터를 고신뢰 메모리 장치로 이동시키는 단계를 포함할 수 있다."}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시 예에 따른 메모리 장치 및 그것의 동작 방법은, 쓰기 동작시 펑춰링 옵션에 따라 에러 정정 코 드를 발생함으로써, 불필요한 메모리 사용을 줄이면서 전체적인 시스템 향상을 기대할 수 있다."}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "아래에서는 도면들을 이용하여 본 발명의 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시 할 수 있을 정"}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "도로 본 발명의 내용을 명확하고 상세하게 기재할 것이다. 일반적으로 하이브리드 메모리(예를 들어, 휘발성 메모리와 비휘발성 메모리 구조)가 CXL(Compute Express Link) 환경에서 사용되면, 상대적으로 신뢰도가 낮은 비휘발성 메모리를 보상하고자 고신뢰 ECC(Error Correction Code)를 사용하고 있다. 이러한 고신뢰 ECC를 상대적으로 신뢰도가 높은 휘발성 메모리에 동시 적용하는 것은 자원 낭비이다. 예를 들어, 낸드 플래시 메모리를 위한 long-length RS 코드를 DRAM(Dynamic Random Access Memory)에 적용하는 것은 오버헤드(overhead)가 매우 크다. 이러한 문제점을 개선하기 위하여 본 발명의 실시 예에 따른 메모리 장치는 서로 다른 메모리의 신뢰도 특성을 고려하는 ECC를 적용하여 구현될 수 있다. 본 발명의 실시 예에 따른 메모리 장치, 및 그것의 동작 방법은, 이종 메모리(티어드(tiered) 메모리, 하이브리 드 메모리 등)에 대해 신뢰도에 따라 펑춰드(punctured) ECC(Error Correction Code)을 적용함으로써, 리던던 시(redundancy)를 줄이고, 시스템 성능 향상을 기대할 수 있다. 여기서 펑춰드 ECC는 특정 환경에서 에러 정정 코드의 일부를 제거하는 것을 의미한다. 즉, 오리지널 ECC(다른 말로, 마스터 ECC)는 모든 비트 위치에 대한 체 크 비트를 갖지만, 펑춰드 ECC(다른 말로, 슬레이브 ECC)는 일부가 제거된 체크 비트를 갖는다.본 발명의 메모 리 장치는 비휘발성/저속-접근(non-volatile/slow-access) 메모리를 위한 오리지널 ECC를 적용하고, 복수의 펑 춰링(puncturing) 옵션들을 구비하고 QoS(Quality of Service) 요구 수준에 따라 휘발성/고속-접근 (volatile/fast-access) 메모리에 펑춰드 ECC를 적용할 수 있다. 특히, 본 발명의 메모리 장치는 하나의 ECC 블 록 구성으로 복수의 이종 메모리에 대한 맞춤 ECC를 적용할 수 있다. 본 발명의 메모리 장치, 및 그것의 동작 방법은, 하이브리드/타이어드 메모리를 위한 저비용(low-cost) ECC 구성하고, 시스템 요구에 따른 복수의 펑춰 링 옵션들을 구성할 수 있다. 도 1은 본 발명의 실시 예에 따른 메모리 장치를 예시적으로 보여주는 도면이다. 도 1을 참조하면, 메모리 장치는 제 1 메모리 장치, 제 2 메모리 장치, 및 제어 로직 회로를 포함할 수 있다. 여기 서 메모리 장치는 이종 메모리 장치일 수 있다. 예를 들어, 메모리 장치는 CXL(Compute Express Link) 하이브리드 메모리 장치일 수 있다. 제 1 메모리 장치는 휘발성/고속-접근(volatile/fast-access) 메모리 장치일 수 있다. 예를 들어, 제 1 메모리 장치는 DRAM으로 구현될 수 있다. 실시 예에 있어서, 제 1 메모리 장치는 제 1 쓰기 동작시 제 1 크기를 갖는 제 1 ECC을 적용할 수 있다. 여기서 제 1 ECC는 펑춰드(punctured) ECC(다른 말로, 슬레이브 ECC)일 수 있다. 실시 예에 있어서, 펑춰드 ECC는 코드 펑춰링(code puncturing)을 통해서 패리티 비트(parity bit)의 길이를 줄인 optional ECC일 수 있다. 실시 예에 있어서, 펑춰드 ECC는 복수의 레벨들 중에서 어느 하나 로 선택된 레벨의 ECC 일 수 있다. 실시 예에 있어서, 제 1 크기는 에러율에 따라 가변적일 수 있다. 실시 예에 있어서, 제 1 ECC는 정정 능력이 상대적으로 약한 1-비트 ECC(예를 들어, 해밍 코드)일 수 있다. 일반적으로 머신러닝 시스템의 학습 중인 신경망 계층(neural network layer)의 가중치(weight) 값이 DRAM에 저장/업데이트 될 때, 가중치 값의 significant 부분만 정확하다면, 학습의 진행에 지장이 없다. Optional ECC는 MSB- protection code로 구현될 수 있다. 제 2 메모리 장치는 비휘발성/저속-접근(non-volatile/slow-access) 메모 장치일 수 있다. 예를 들어, 제 2 메모리 장치는 NVM(Non-volatile Memory)/SCM(Storage Class Memory)로 구현될 수 있다. 실시 예에 있 어서, 제 2 메모리 장치는 제 2 쓰기 동작시 제 1 크기 보다 큰 제 2 크기를 갖는 제 2 ECC를 적용할 수 있다. 여기서 제 2 ECC는 오리지널 ECC(다른 말로, 마스터 ECC)일 수 있다. 실시 예에 있어서, 제 2 ECC는 정정 능력이 상대적으로 강한 심볼 ECC(예를 들어, RS(Reed-Solomon) 코드, LDPC(Low-Density Parity Check) 코드 등)로 구현 될 수 있다. 실시 예에 있어서, 제 2 크기는 에러율과 상관없이 고정된 값일 수 있다. 제어 로직 회로는 제 1 메모리 장치 및 제 2 메모리 장치을 제어하도록 구현될 수 있다. 제어 로직 회로는 에러 정정 회로를 포함할 수 있다. 에러 정정 회로는 펑춰링 옵션(puncturing option) 정보를 통해 인코더/디코더를 설정하도록 구현될 수 있 다. 즉, 에러 정정 회로는 메모리 장치에 사용될 수 있는 ECC의 종류 (e.g., RS 코드, LDPC 코드, 해밍 코드 등) 및 H 매트릭스 등을 변경하는 동작을 수행할 수 있다. 실시 예에 있어서, 에러 정정 회로는 제 1 메모리 장치에 제 1 펑춰드 옵션이 적용된 ECC를 적용할 수 있다. 실시 예에 있어서, 에러 정정 회로(13 1)는 제 2 메모리 장치에 제 2 펑춰드 옵션이 적용된 ECC를 적용할 수 있다. 실시 예에 있어서, 에러 정정 회로는 메모리 데이터 읽기 동작시 에러 발생률(다른 말로, 에러율)에 따라 펑춰링 옵션을 변경할 수 있다. 다른 실시 예에 있어서, 펑춰링 옵션 정보는 고정된 값일 수 있다. 실시 예에 있어서, 펑춰링 옵션 정보는 초기화 동작에서 레지스터에 설정될 수 있다. 실시 예에 있어서, 펑춰링 옵션 정보는 실시간으로 변경될 수 있다. 실시 예에 있어서, 펑춰링 옵션 정보는 읽힌 데이터의 에러율에 따라 가변 될 수 있다. 실시 예에 있어서, 에러율의 범위에 따라 복수의 펑춰링 옵션들이 존재할 수 있다. 실시 예에 있어서, 에러 정정 회로는 펑춰링 옵션 정보에 따라 인코더/디코더의 설정을 변경할 수 있다. 실시 예에 있어서, 신뢰도가 동작 속도 보다 우선할 때 펑춰드 에러 정정 코드의 크기는 동작 속도가 신뢰도보다 우선할때의 펑춰드 에러 정정 코드의 크기 보다 클 수 있다. 또한, 제어 로직 회로는 데이터 속성에 따라 이종 메모리(hybrid/tiered 메모리) 내 저장 위치를 선택할 수 있다. 제어 로직 회로는 저신뢰 메모리에서(read 되어) 에러를 발생시키는 데이터를 추적함으로써(CE count 이용), 스크러빙(scrubbing) 시 에러 가능 데이터를 고신뢰 메모리로 이동시킬 수도 있다. 본 발명의 실시 예에 따른 메모리 장치는 쓰기 데이터에 ECC 인코딩을 적용할 때 메모리 특성에 따라 패리 티 펑춰링(parity puncturing)을 수행함으로써, 불필요한 고성능 ECC를 제한하고, 이에 따라 메모리 오버헤드를 감소시킬 수 있다. 이로써 본 발명의 메모리 장치는 전체적인 성능 향상을 기대할 수 있다. 도 2a 및 도 2b는 본 발명의 실시 예에 따른 ECC의 parity puncturing을 개념적으로 보여주는 도면들이다. 도 2a는 마스터 ECC를 예시적으로 보여주고, 도 2b는 마스터 ECC에서 code puncturing을 통하여 parity 비트의 길 이를 줄인 optional ECC를 보여주고 있다. 여기서 optional ECC는 low-latency code 구성을 목적으로 한다. 도 2a 및 도 2b에는 ECC puncturing을 통한 2-way ECC 구성이 도시되고 있다. 일반적으로 ECC는 전송 중인 데이터에 오류가 발생할 때 이를 검출/정정한다. H-매트릭스는 많은 ECC에서 사용 되는 체크 매트릭스이다. 에러 검출 동작에서, H-매트릭스는 수신된 데이터가 무결한지 여부를 판별할 수 있다. H-매트릭스와 수신된 데이터를 곱했을 때 결과가 0이 아니면 에러가 발생한 것으로 판단한다. 에러 정정 동작에 서, 일부 ECC는 H-매트릭스를 사용하여 발생한 에러의 위치를 판별하고 해당 에러를 정정할 수 있다. 특정 상황 에서는 모든 패리티 비트가 필요하지 않을 수 있다. 이 경우, 필요하지 않은 패리티 비트를 제거하거나 펑춰링 (puncturing)할 수 있다. 도 3a 및 도 3b는 본 발명의 실시 예에 따른 optional ECC 펑춰링을 예시적으로 보여주는 도면들이다. 도 3a에 도시된 바와 같이, 4-비트 리던던시를 갖는 H 매트릭스(H1bit)는 4-비트 데이터 중에서 랜덤 1-비트 정정을 보장 할 수 있다. 도 3b에 도시된 바와 같이, 3-비트 리던던시를 갖는 H 매트릭스(H1MSB)는 4-비트 데이터 중에서 MSB(Most Significant Bit) 1-비트 정정을 보장할 수 있다. 여기서 H 매트릭스(H1MSB)는 H 매트릭스(H1bit)에서 패리티 펑춰링으로 변경된 매트릭스일 수 있다. 에러 정정 회로는 메모리에서 제공하는 패리티 비트용 리 던던시 수준에 따라 ECC 펑춰링을 구성할 수 있다. 이종 메모리로 구성된 메모리 장치는 쓰기 데이터에 ECC 인코딩이 적용될 때, 메모리 특성에 따라 패리티 펑춰링을 이용할 수 있다. 메모리 내부에서 ECC 적용할 때, 메모리 신뢰성에 따라 ECC 패리티의 길이를 조절함으로써, 불필요한 고성능 ECC가 적용되는 제한될 수 있다. 이로 인하여, 고신뢰 메모리에 저장되는 데이터에 대한 parity(= 메모리 overhead)의 감소로 인한 성능이 향상될 수 있다. 일반적으로 신경망 어플리케이션에서 사용하는 ECC는 low-overhead Significant-bit Protection Code일 수 있 다. 신경망 계층의 가중치 값이 DRAM에 저장/업데이트 될 때, 가중치 값의 중요 값(significant value)만 정확 하다면 학습의 진행에 무리가 없다. 추론 과정에서 활성화 값(activation value)도 적용될 수 있다. 신경망 가 중치의 데이터 정밀도는 32-비트, 16-비트, 8-비트 중 어느 하나 일 수 있다. 데이터 정밀도에 따라 코드가 변 경될 수 있다. 예를 들어, (136,128)-DRAM ECC는 4Х(32+n1, 32)-ECC 혹은 8Х(16+n2, 16)-ECC으로 변경될 수 있다. DRAM 내부의 온-다이(on-die) ECC는 SEC(Single Error Correction), S2EC(Single 2-symbol Error Correction), SECDED(Single Error Correction, Double Error Detection) 수준을 지원할 수 있다. 임의 위치의 1-비트 에러 정정을 위해, 128-비트 데이터 기준 약 8-비트의 리던던시 패리티 비트(redundant parity bit)이 필요 하다. (128+8)-비트 데이터에 4개의 신경망 계층 가중치 값이 저장될 때, 온-다이ECC는 4개의 가중치 중에 서 1개 만을 정정할 수 있다. 4개의 블록으로 분리하면, 각 가중치 값의 MSB 1-비트의 값을 정정할 수 있는 코 드 설계가 가능하다. 즉, (136,128)-SEC는 (34,32)-1MSB repetition code Х 4로 변경될 수 있다. 이로 인하여 4개의 가중치 값에 대한 significant value 보장이 될 수 있다. 도 4는 본 발명의 실시 예에 따른 에러 정정 회로을 예시적으로 보여주는 도면이다. 도 4를 참조하면, 에 러 정정 회로는 인코더/디코더(131-1)를 포함할 수 있다. 에러 정정 회로는 사전에 지정한 펑춰링 옵션을 통해 optional ECC 생성 방법을 변경할 수 있다. 여기서 Puncturing option = H-matrix editing option(어느 로우/컬럼(row/column을) 제외할 것인가; Option 1)이거나, 선택된 펑춰링 옵션에 의해 인코더/디코더(131-1)의 구성 변경(Option 2)일 수 있다. 이때, 인코더의 puncturing option/pattern은 디코더에 공유될 수 있다.실시 예에 있어서, 패리티 펑춰링은 ECC 인코딩의 결과물인 parity/check-비트의 일부를 삭제할 수 있다. 이러 한 패리티 펑춰링은 에러 커버리지(error coverage)는 감소시키지만 인코딩/디코딩(encoding/decoding) 지연을 감소시키고, 메모리 사용량을 감소시킬 수 있다. 실시 예에 있어서, 에러 정정 회로는 펑춰링 레벨을 조절 할 수 있다. 복수의 옵션들(Puncturing Option 1, Puncturing Option 2 등)을 배치해서 사용자 요구 및 메모리 사양이 반영 가능하다. 실시 예에 있어서, 에러 정정 회로는 플래그/어드레스 등으로 목적지(destinatio n)을 확인하고, 전용의 펑춰드 옵션(punctured option)을 적용할 수 있다. 도 5a 및 도 5b는 optional ECC의 구성을 예시적으로 보여주는 도면들이다. 도 5a에 도시된 펑춰드 ECC 구성은 신뢰도가 동작 속도보다 중요하다고 판단될 때 적용될 수 있다. 도 5b에 도시된 펑춰드 ECC 구성은 동작 속도 가가 신뢰도보다 중요하다고 판단될 때 적용될 수 있다. 도 6은 본 발명의 실시 예에 따른 에러율에 따른 펑춰링 옵션/패턴 테이블을 예시적으로 보여주는 도면이다. 도 6을 참조하면, 에러율의 발생 범위에 따라 펑춰링 옵션/패턴의 값이 달라질 수 있다. 예를 들어, 에러율(r)이 0 이상이고 a0보다 낮을 때, 1-비트 펑춰링 옵션이 적용될 수 있다. 에러율(r)이 a0 이상이고 a1보다 낮을 때, 2- 비트 펑춰링 옵션이 적용될 수 있다. 에러율(r)이 an-1 이상이고 an보다 낮을 때, n-비트 펑춰링 옵션이 적용될 수 있다. 에러율(r)이 an 이상이고 1보다 낮을 때, 시스템 페일 경고(system failure alert)가 출력될 수 있다. 실시 예에 있어서, 초기화 동작에서 DRAM 트레이닝/테스트 할 때, 에러율이 측정될 수 있다. 측정된 에러율에 따라 펑춰링 옵션이 생성 및 적용될 수 있다. 다른 실시 예에 있어서, 메모리 시스템에 새롭게 티어드 메모리가 연결될 때, 내부 제어기는 적용될 ECC 구성(configuration)을 결정할 수 있다. 도 6에 도시된 바와 같이, 에러율이 구분된 구역 (e.g., die/chip 등)에 대해 각각 적용되는 펑춰링 옵션이 제 어 로직 회로(130, 제어기)의 내부 레지스터에 저장될 수 있다. 한편, 본 발명의 실시 예에 따른 메모리 장치는 실시간으로 읽힌 데이터의 에러율을 추적하고, 추적된 에러율에 따라 펑춰링 옵션을 변경할 수 있다. 도 7은 본 발명의 다른 실시 예에 따른 메모리 장치(100a)를 예시적으로 보여주는 도면이다. 도 7를 참조하면, 메모리 장치(100a)는 고신뢰 메모리 장치(110a), 저신뢰 메모리 장치(120a), 및 제어 로직 회로(130a)를 포함할 수 있다. 여기서 메모리 장치(100a)는 CXL(Compute Express Link) 인터페이스를 이용하여 외부 장치와 통신할 수 있다. 고신뢰 메모리 장치(110a)는 쓰기 동작시 펑춰드 에러 정정 코드와 함께 데이터를 저장하도록 구현될 수 있다. 실시 예에 있어서, 펑춰드 에러 정정 코드는 해밍 코드를 포함할 수 있다. 저신뢰 메모리 장치(120a)는 쓰기 동작시 오리지널 에러 정정 코드와 함께 데이터를 저장하도록 구현될 수 있다. 실시 예에 있어서, 오리지널 에러 정정 코드는 RS 코드 일 수 있다. 제어 로직 회로(130a)는 에러 정정 회로(131a) 및 트래킹 로직을 포함할 수 있다. 실시 예에 있어서, 제어 로직 회로(130a)는 에러율에 따라 저신뢰 메모리 장치(120a)의 에러 가능 데이터를 고신뢰 메모리 장치(110a)로 이동시킬 수 있다. 에러 정정 회로(131a)는 메모리 에러율에 따라 각 메모리 계층에 따라 적용될 수 있는 펑춰링 옵션/레벨을 실시 간에서 변경하도록 구현될 수 있다. 실시 예에 있어서, 에러율이 기준값 이상이면, 펑춰링 레벨이 감소될 수 있 다. 다른 실시 예에 있어서, 에러율이 기준 값 아래이면, 펑춰링 레벨이 증가 될 수 있다. 실시 예에 있어서, 에러 정정 회로(131a)는 펑춰링 옵션 정보에 대응하는 패리티 펑춰링을 통하여 H 매트릭스를 변경할 수 있다. 실시 예에 있어서, 에러 정정 회로(131a)는 에러율이 기준값 이상일 때 펑춰링 레벨을 감소시키고, 에러율이 기 준값 미만일 때 펑춰링 레벨을 증가시킬 수 있다. 트래킹 로직은 메모리 에러율(예를 들어, CE(codeword error) count 등으로 측정)에 트래킹 할 수 있다. 실시 예에 있어서, 트래킹 로직은 patrol scrub 동작에서 활성화 될 수 있다. patrol scrub 동작에서 트래 킹 로직가 활성화됨으로써, 추가적으로 발생하는 오버헤드가 최소화 될 수 있다. 한편, 본 발명은 메모리 노화(memory aging) 문제에 대한 대응 솔루션으로 이용 가능하다. 또한, CE 카운트 트 래킹에 의해 에러 가능 데이터(erroneous data)가 이동될 수 있다. 도 7에 도시된 바와 같이 저신뢰 메모리 장 치(120a)에서 에러 가능 데이터는 고신뢰 메모리 장치(110a)로 이동될 수 있다. 예를 들어, 제어 로직 회로(130a)는 트래킹 로직에서 이벤트(예, CE count > threshold) 발생 시, 저신뢰 메모리 장치에서 읽 힌 에러 가능 데이터를 고신뢰 장치(110a)로 이동할 수 있다. 즉, 이종 메모리 장치의 동작 방법은, 저신뢰 메 모리 장치로부터 데이터를 읽는 단계; 상기 읽힌 데이터에 대한 에러 정정 동작을 수행하는 단계; 상기 에러 정 정 동작에 따른 CE(Codeword Error) 카운트를 추적하는 단계; 및 상기 CE 카운트 값이 기준값 이상일 때, 상기 저신뢰 메모리 장치의 상기 데이터를 고신뢰 메모리 장치로 이동시키는 단계를 포함할 수 있다. 실시 예에 있어서, 상기 에러 정정 동작은 심볼 코드로 수행되는 것을 특징으로 한다. 실시 에에 있어서, 상기 저신뢰 메모리 장치는 쓰기 동작시 심볼 코드를 적용하고, 상기 고신뢰 메모리 장치는 쓰기 동작시 에러율에 따 라 가변하는 해밍 코드를 적용하는 것을 특징으로 한다. 추가로, 메모리 장치(100a)는 고신뢰 메모리 장치로 이동 시키기 전에, 호스트에 알리고 해당 영역을 제어 로직 회로(130a) 내 레지스터/캐쉬에 저장할 수 있다. 메모리 장치(100a)는 host driven RAS(Reliability, Availability, and Serviceability)에 이용하여 해당 영역을 제어 로직 회로(130a)의 내부에 저장할 수 있다. 이후에, 실시 예에 있어서, 이벤트 발생 시, 메모리 장치(100a)는 demand data scrubbing 동작을 통해 남는 고 신뢰 메모리 영역으로 데이터를 이동시킬 수 있다. 여기서 demand data scrubbing은 메모리에서 읽힌 데이터를 체크하고 필요한 경우 ECC를 사용하여 정정하는 동작이다. 본 발명의 실시 예에 따른 메모리 장치(100a)는 에러 가능한 핫 데이터를 미리 고신뢰 메모리로 이동시킴으로써, 시스템 성능 저하를 방지하고 잠재적 실패(probable failure)을 예방할 수 있다. 도 8은 본 발명의 실시 예에 따른 메모리 장치의 동작을 예시적으로 보여주는 흐름도이다. 도 1 내지 도 8를 참 조하면, 메모리 장치는 다음과 같이 쓰기 데이터를 저장할 수 있다. 메모리 장치는 호스트 장치로부터 쓰기 데이터를 수신할 수 있다(S110). 쓰기 데이터에 포함된 플래그/어드레스 를 이용하여 펑춰링 옵션 정보에 대응하는 ECC 레벨이 설정될 수 있다(S120). 설정된 ECC 레벨에 따라 ECC 코드 가 생성될 수 있다(S130). 쓰기 데이터 및 ECC 코드가 대응하는 메모리 장치에 저장될 수 있다(S140). 실시 예에 있어서, 초기화 동작에서 펑춰링 옵션 정보를 레지스터에 설정될 수 있다. 실시 예에 있어서, 서로 다른 메모리 장치들에서 읽힌 데이터에 에러율을 추적하고, 추적된 에러율에 따라 펑춰링 옵션 정보가 변경될 수 있다. 실시 예에 있어서, 에러율이 사전에 결정된 값보다 클 때, 시스템에 실패 알람 정보가 출력될 수 있다. 실시 예에 있어서, 제 1 메모리 장치에서 읽힌 데이터의 에러율이 기준값 이상일 때, 에러 가능 데이터는 제 1 메모리 장치와 다른 제 2 메모리 장치로 내부적으로(시스템 개입없이) 이동될 수 있다. 이후에 메모리 장 치는 시스템에 데이터 이동에 관련된 정보를 알릴 수 있다. 도 9는 본 발명의 다른 실시 예에 따른 메모리 장치의 동작을 예시적으로 보여주는 도면이다. 도 9를 참조하면, 메모리 장치는 다음과 같이 읽기 데이터를 출력할 수 있다. 메모리 장치는 어드레스에 응답하여 대응하는 제 1 메모리 장치 및 제 2 메모리 장치 중에서 어느 하나로부터 데이터 및 ECC 코드를 읽을 수 있다(S210). 메모리 장치는 선택된 메모리 장치에 대응하는 설정된 ECC 레벨에 따라 에러 정정 동작을 수행할 수 있다. 메모리 장치 는 에러 정정된 데이터를 호스트로 출력할 수 있다(S230). 실시 예에 있어서, 읽힌 데이터의 에러율에 따라, 설 정된 ECC 레벨이 변경될 수 있다. 실시 예에 있어서, 읽힌 데이터의 에러율에 따라, 데이터 이동이 발생할 수 있다. 한편, 본 발명은 하이브리드 메모리 시스템 및 SCM(Storage Class Memory)를 위한 ECC에 적용 가능하다. 또한, 본 발명은 머신러닝 전용 메모리 및 PIM(Processing-In-Memory) 기술과 결합 가능하다. 본 발명은 1개의 ECC 구성으로 하이브리드 메모리 구성을 지원하므로, 인공지능 학습을 위한 가속기 구성에 활용될 수 있다. 한편, 본 발명은 컴퓨팅 시스템에 적용 가능하다. 도 10은 본 발명의 실시 예에 따른 컴퓨팅 시스템을 예시적으로 보여주는 도면이다. 도 10을 참조하면, 호스트 장치와 복수의 CXL 장치(220a, 220b, …, 220h)는 CXL 스위치를 통해 서로 통신할 수 있다. CXL 스 위치는 CXL 인터페이스에 포함된 구성요소일 수 있다. CXL 스위치는 호스트 장치와 CXL 장치 사이의 통신을 중재하도록 구성될 수 있다. 예를 들어, 호스트 장치 및 CXL 장치가 서로 통신 하는 경우, CXL 스위치는 호스트 장치 혹은 CXL 장치로부터 전달된 요청, 데이터, 응답, 혹은 신호 등과 같은 정보를 CXL 장치 혹은 호스트 장치로 전달하도록 구성될 수 있다. CXL 장치들(220a, 220b, …, 220h)이 서로 통신하는 경우, CXL 스위치는 CXL 장치들(220a, 220b, …, 220h) 사이에서 요청, 데이터, 응답, 혹은 신호 등과 같은 정보를 전달하도록 구성될 수 있다.호스트 장치는 CXL 제어기를 포함할 수 있다. CXL 제어기는 CXL 스위치를 통해, CXL 장치 와 통신할 수 있다. CXL 제어기는 메모리 제어기 및 관련된 메모리에 연결될 수 있다. CXL 스위치는 연결된 CXL 장치들(220a, 220b, …, 220h) 사이에서 일대다(one-to-many) 및 다대일(many- to-one) 스위칭을 통해 메모리 클러스터를 구현하는 데 사용될 수 있다(예를 들어, (i) CXL 스위치는 다수 의 루트 포트들을 하나의 엔드포인트에 연결하고 (ii) 하나의 루트 포트를 다수의 엔드포인트들에 연결하고 혹 은 (iii) 다수의 루트 포트들을 다수의 엔드포인트들에 연결할 수 있다). CXL 패킷에 대한 패킷-스위칭 기능을 제공하는 것 외에도, CXL 스위치는 CXL 장치들(220a, 220b, …, 220h)을 하나 이상의 호스트 장치에 연결하는 데 사용될 수 있다. CXL 스위치는 (i) CXL 장치들 (220a, 220b, …, 220h)이 서로 다른 특성들을 갖는 다양한 타입의 메모리를 포함할 수 있도록 하며, (ii) CXL 장치들(220a, 220b, …, 220h)의 메모리들을 가상화하고 다른 특성(예를 들어, 액세스 주파수)의 데이터를 적절 한 타입의 메모리에 저장할 수 있도록 하며, (iii) RDMA(remote direct memory access)를 지원한다. 여기서, 메모리를 \"가상화\"한다는 것은 처리 회로와 메모리 사이에서 메모리 주소 변환을 수행하는 것을 의미한다. CXL 장치(220a)는 CXL 제어기, 프로세서, 메모리 제어기, 및 메모리 장치를 포함할 수 있 다. 다른 CXL 장치들(220b, …, 220h)도 CXL 장치(220a)와 동일 내지 유사한 구성요소를 포함할 수 있다. CXL 제어기는 CXL 스위치와 연결될 수 있다. CXL 제어기는 CXL 스위치를 통해, 호스트 장 치 혹은 다른 CXL 장치들과 통신할 수 있다. CXL 제어기는 CXL.io 경로를 위한 PCIe 5.0 (혹은 다른 버전) 아키텍처를 포함할 수 있고, CXL에 특정한 CXL.cache 및 CXL.mem 경로를 추가할 수 있다. 다른 실시예에 서, CXL 제어기는 CXL 1.1과 같은 이전 캐시-일관성 프로토콜과 역 호환되도록 구성될 수 있다. CXL 제어 기는 CXL.io, CXL.mem 및 CXL.cache 프로토콜 혹은 다른 적절한 캐시-일관성 프로토콜을 구현하도록 구성 될 수 있다. CXL 제어기는 타입 1, 타입 2, 혹은 타입 3 CXL 장치와 같은 상이한 CXL 장치 타입들을 지원 하도록 구성될 수 있다. CXL 제어기는 PCIe 5.0 프로토콜과 같은 PCIe 프로토콜을 지원하도록 구성될 수 있다. CXL 제어기는 임의의 적절한 PIPE 인터페이스 폭(예를 들어, 8-비트, 16-비트, 32-비트, 64-비트 및 128-비트 구성가능한 PIPE 인터페이스 폭)을 사용하여 PIPE 5.x 프로토콜을 지원하도록 구성될 수 있다. 프로세서는 CXL 장치(220a)의 제반 동작을 제어하도록 구성될 수 있다. 프로세서는 메모리 장치(22 4)에 저장된 데이터의 연산을 수행할 수 있다. 프로세서는 메모리 장치에 저장된 데이터에 대한 필터 링을 수행할 수 있다. 메모리 제어기는 메모리 장치에 데이터가 저장되거나 혹은 메모리 장치로부터 데이터가 읽히도 록, 메모리 장치를 제어할 수 있다. 실시 예에 있어서, 메모리 제어기는 DDR 인터페이스, LPDDR 인터 페이스 등과 같은 표준 규약을 준수하도록 구현될 수 있다. 메모리 장치는 메모리 제어기의 제어에 따라 데이터를 저장하거나 혹은 저장된 데이터를 출력할 수 있다. 메모리 제어기는 메모리 장치를 관리하도록 구성될 수 있다. 실시 예에 있어서, 메모리 제어기 는 메모리 장치의 일부 영역을 캐시 버퍼로 할당할 수 있다. 메모리 제어기는 캐시 버퍼를 다른 장치(예를 들어, 호스트, 다른 CXL 장치들)에 할당할 수 있다. 실시 예에 있어서, CXL 장치(220a)의 메모리 장치의 영역 중 적어도 일부는 CXL 장치(220a)를 위한 전용 영역(dedicated area)으로 할당될 수 있고, 나머지 영역은 호스트 장치 혹은 다른 CXL 장치들(220b, …, 220h)에 의해 액세스 가능한 영역으로 사용될 수 있다. 실시 예에 있어서, 메모리 제어기는 캐시 버퍼에 할당된 캐시 교체 정책에 따라 캐시 버퍼에 캐 시된 데이터 중 폐기할 데이터 블록을 선정할 수 있다. 캐시 교체 정책으로서, LRU(least recently used) 교체 정책, LFU(least frequently used) 교체 정책, RRIP(re-reference interval prediction) 교체 정책 등이 사용 될 수 있다. 그러나, LRU 교체 정책 외에도 최신성(recency)에 따라 캐시를 교체하는 다른 캐시 교체 정책이 사 용될 수 있고, LFU 교체 정책 외에도 빈도(frequency)에 따라 캐시를 교체하는 다른 캐시 교체 정책이 사용될 수 있다. 도 11은 본 발명의 실시 예에 따른 컴퓨팅 시스템을 예시적으로 보여주는 도면이다. 도 11을 참조하면, 컴퓨팅 시스템은 제 1 CPU(1010a), 제 2 CPU(1010b), GPU, NPU, CXL 스위치, CXL 메 모리, CXL 스토리지, PCIe 장치, 및 가속기(CXL 장치)를 포함할 수 있다. 제 1 CPU(1010a), 제 2 CPU(1010b), GPU, NPU, CXL 메모리, CXL 스토리지, PCIe 장치 , 및 가속기는 CXL 스위치에 공통으로 연결될 수 있으며, 각각은 CXL 스위치를 통해 서로 통신할 수 있다. 실시 예에 있어서, 제 1 CPU(1010a), 제 2 CPU(1010b), GPU, 및 NPU 각각은 호스트 장치 일 수 있고, 각각은 개별적인 메모리들(1020a, 1020b, 1020c, 1020d, 1020e)과 직접 연결될 수 있 다. 실시 예에 있어서, CXL 메모리 및 CXL 스토리지는 도 1 내지 도 10에서 설명된 바와 같이 펑춰링 옵션을 지원하는 메모리 장치로 구현될 수 있다 제 1 CPU(1010a), 제 2 CPU(1010b), GPU, 및 NPU 중 어느 하나 혹은 그 이상에 의해, CXL 메모리 및 CXL 스토리지의 메모리들(1060a, 1060b)의 적어도 일부 영역은 제 1 CPU(1010a), 제 2 CPU(1010b), GPU, NPU, CXL 메모리, CXL 스토리지, PCIe 장치, 및 가속기 중 적어도 하나의 캐시 버퍼로 할당될 수 있다. 실시 예에 있어서, CXL 스위치는 다양한 기능을 지원하도록 구성된 PCIe 장치 혹은 가속기와 연결될 수 있으며, PCIe 장치 혹은 가속기는 CXL 스위치를 통해 제 1 CPU(1010a), 제 2 CPU(1010b), GPU, 및 NPU 각각과 통신하거나 혹은, CXL 메모리 및 CXL 스토리지를 액 세스할 수 있다. 실시 예에 있어서, CXL 스위치는 외부 네트워크 혹은 패브릭(Fabric)과 연결될 수 있으며, 외부 네트워크 혹은 패브릭을 통해 외부 서버와 통신하도록 구성될 수 있다. 한편, 본 발명은 데이터 서버 시스템에 적용 가능하다. 도 12는 본 발명의 실시 에에 따른 데이터 서버 시스템을 예시적으로 보여주는 도면이다. 도 12을 참조하 면, 데이터 서버 시스템는 다양한 데이터를 모아두고 서비스를 제공하는 시설로서, 데이터 스토리지 센터 라고 지칭될 수도 있다. 데이터 서버 시스템는 검색 엔진 및 데이터 베이스 운용을 위한 시스템일 수 있 으며, 은행 등의 기업 혹은 정부기관에서 사용되는 컴퓨팅 시스템일 수 있다. 데이터 서버 시스템는 애플 리케이션 서버들(1110a, …, 1110h) 및 스토리지 서버들(1120a, …, 1120h)을 포함할 수 있다. 애플리케이션 서 버들의 개수 및 스토리지 서버들의 개수는 실시예에 따라 다양하게 선택될 수 있고, 애플리케이션 서버들의 개 수 및 스토리지 서버들의 개수는 서로 다를 수 있다. 아래에서는 제 1 스토리지 서버(1120a)의 구성이 중점으로 설명된다. 애플리케이션 서버들(1110a, …, 1110h) 및 스토리지 서버들(1120a, …, 1120h) 각각은 서로 유사한 구조를 가질 수 있으며, 애플리케이션 서버들 (1110a, …, 1110h) 및 스토리지 서버들(1120a, …, 1120h)은 네트워크(NT)를 통해, 서로 통신할 수 있다. 제 1 스토리지 서버(1120a)는 프로세서, 메모리, 스위치, 스토리지, CXL 메모리 , 및 네트워크 인터페이스 카드(NIC)를 포함할 수 있다. 프로세서는 제 1 스토리지 서버 (1120a)의 전반적인 동작을 제어할 수 있고, 메모리를 액세스하여, 메모리에 로딩된 명령어를 실행 하거나 혹은 데이터를 처리할 수 있다. 프로세서 및 메모리는 직접 연결될 수 있으며, 하나의 스토 리지 서버(1120a)에 포함된 프로세서의 개수 및 메모리의 개수는 다양하게 선택될 수 있다. 실시 예에 있어서, 프로세서와 메모리는 프로세서-메모리 페어를 제공할 수 있다. 실시 예에 있어 서, 프로세서와 메모리의 개수는 서로 다를 수도 있다. 프로세서는 단일 코어 프로세서 혹은 다중 코어 프로세서를 포함할 수 있다. 스토리지 서버에 대한 상술한 설명은, 애플리케이션 서버들 (1110a, …, 1110h) 각각에도 유사하게 적용될 수 있다. 스위치는 제 1 스토리지 서버(1120a)에 포함된 다양한 구성 요소들 사이의 통신을 중재 혹은 라우팅하도 록 구성될 수 있다. 실시 예에 있어서, 스위치는 도 2 및 도 10 등에서 설명된 CXL 스위치일 수 있다. 즉, 스위치는 CXL 프로토콜을 기반으로 구현된 스위치일 수 있다. CXL 메모리와 스토리지 장치는 도 1 내지 도 10에서 설명된 바와 같이 펑춰링 옵션에 따른 ECC 설 정 가능한 CXL 장치일 수 있다. CXL 메모리는 스위치와 연결될 수 있다. 스토리지 장치는 CXL 인터페이스 회로(CXL_IF), 제어기(CTRL), 및 낸드 플래시(NAND)를 포함할 수 있다. 스토리지 장치는 프로세서의 요청에 따라 데이터를 저장하거나 혹은 저장된 데이터를 출력할 수 있다. 애플리케이션 서버 들(1110a, …, 1110h)은 스토리지를 포함하지 않을 수도 있다. 네트워크 인터페이스 카드(NIC; network interface card)는 CXL 스위치와 연결될 수 있다. NIC는 네트워크(NT)를 통해, 다른 스토리지 서버들(1120a, …, 1120h) 혹은 다른 애플리케이션 서버들 (1110a, …, 1110h)과 통신할 수 있다. 실시 예에 있어서 NIC는 네트워크 인터페이스 카드, 네트워크 어댑터 등을 포함할 수 있다. NIC는 유선 인터페이스, 무선 인터페이스, 블루투스 인터페이스, 광학 인터페 이스 등에 의해 네트워크(NT)에 연결될 수 있다. NIC는 내부 메모리, DSP(Digital Signal Processor), 호스트 버스 인터페이스 등을 포함할 수 있으며, 호스트 버스 인터페이스를 통해 프로세서 혹은 스위치 등과 연결될 수 있다. 실시 예에 있어서, NIC는 프로세서, 스위치, 스토리지 장치 중 적어도 하나와 통합될 수도 있다. 실시 예에 있어서, 네트워크(NT)는 FC(Fibric Channel) 혹은 이더넷(Ethernet) 등을 이용하여 구현될 수 있다. 이 때, FC는 상대적으로 고속의 데이터 전송에 사용되는 매체이며, 고성능/고가용성을 제공하는 광 스위치를 사 용할 수 있다. 네트워크(NT)의 액세스 방식에 따라 스토리지 서버들은 파일 스토리지, 블록 스토리지, 혹은 오 브젝트 스토리지로서 제공될 수 있다. 실시 예에 있어서, 네트워크(NT)는 SAN(Storage Area Network)와 같은 스토리지 전용 네트워크일 수 있다. 예를 들어, SAN은 FC 네트워크를 이용하고 FCP(FC Protocol)에 따라 구현된 FC-SAN일 수 있다. 다른 예를 들어, SAN 은 TCP/IP 네트워크를 이용하고 iSCSI(SCSI over TCP/IP 혹은 Internet SCSI) 프로토콜에 따라 구현된 IP- SAN일 수 있다. 실시 예에 있어서, 네트워크(NT)는 TCP/IP 네트워크와 같은 일반 네트워크일 수 있다. 예를 들 어, 네트워크(NT)는 FCoE(FC over Ethernet), NAS(Network Attached Storage), NVMe-oF(NVMe over Fabrics) 등의 프로토콜에 따라 구현될 수 있다. 실시 예에 있어서, 애플리케이션 서버들(1110a, …, 1110h) 중 적어도 하나는 사용자 혹은 클라이언트가 저장 요청한 데이터를 네트워크(NT)를 통해 스토리지 서버들(1120a, …, 1120h) 중 하나에 저장할 수 있다. 애플리케 이션 서버들1110a, …, 1110h) 중 적어도 하나는 사용자 혹은 클라이언트가 독출 요청한 데이터를 스토리지 서 버들(1120a, …, 1120h) 중 하나로부터 네트워크(NT)를 통해 획득할 수 있다. 예를 들어, 애플리케이션 서버들 (1110a, …, 1110h) 중 적어도 하나는 웹 서버 혹은 DBMS(Database Management System) 등으로 구현될 수 있다. 실시 예에 있어서, 애플리케이션 서버들(1110a, …, 1110h) 중 적어도 하나는 네트워크(NT)를 통해 다른 애플리 케이션 서버에 포함된 메모리, CXL 메모리, 혹은 스토리지 장치에 액세스할 수 있고, 혹은 네트워크(NT)를 통해 스토리지 서버들(1120a, …, 1120h)에 포함된 메모리들, CXL 메모리들, 혹은 스토리지 장치들에 액세스할 수 있 다. 이로써, 애플리케이션 서버들(1110a, …, 1110h) 중 적어도 하나는 다른 애플리케이션 서버들 혹은 스토리 지 서버들에 저장된 데이터에 대해 다양한 동작들을 수행할 수 있다. 예를 들어, 애플리케이션 서버들(1110a, …, 1110h) 중 적어도 하나는 다른 애플리케이션 서버들 혹은 스토리지 서버들 사이에서 데이터를 이동 혹은 카 피(copy)하기 위한 명령어를 실행할 수 있다. 이 때 데이터는 스토리지 서버들의 스토리지 장치로부터 스토리지 서버들의 메모리들 혹은 CXL 메모리들을 거쳐서, 혹은 바로 애플리케이션 서버들의 메모리 혹은 CXL 메모리로 이동될 수 있다. 네트워크를 통해 이동하는 데이터는 보안 혹은 프라이버시를 위해 암호화된 데이터일 수 있다. 실시 예에 있어서, 도 1 내지 도 12를 참고로 하여 설명한 각 구성요소 혹은 둘 이상의 구성요소의 조합은 디지 털 회로, 프로그램 가능한 혹은 프로그램 할 수 없는 로직 장치 혹은 어레이, 응용 주문형 집적 회로 (application specific integrated circuit, ASIC) 등으로 구현될 수 있다. 이상에서 설명된 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 혹은 하드웨어 구성요소 및 소프트웨어 구성 요소의 조합으로 구현될 수 있다. 예를 들어, 실시 예에서 설명된 장치 및 구성요소는, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 혹은 명령(instruction)을 실행 하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 혹은 특수 목적 컴퓨터를 이용하여 구 현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 하나 이상의 소프트웨어 어플리 케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경우도 있지만, 해당"}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 혹은 복수 유형 의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 혹은 하나의 프로세 서 및 하나의 제어기를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성 (processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 혹은 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 혹은 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 혹은 데이터는, 처리 장치에 의하여 해석되거나 처리장치에 명령 혹은 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상장치 (virtual equipment), 컴퓨터 저장 매체 혹은 장치에 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결 된 컴퓨팅 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 하 나 이상의 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 본 발명의 메모리 장치는 독립적인 ECC를 구성하는 것이 아닌, ECC puncturing을 이용하여 1개의 ECC 회로 구성 으로 hybrid 메모리 시스템을 지원할 수 있다. Puncturing 수준을 조절함으로써, 본 발명의 메모리 장치는 volatile-fast 메모리에 대한 ECC 수준을 조절할 수 있다."}
{"patent_id": "10-2023-0117625", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "한편, 상술된 본 발명의 내용은 발명을 실시하기 위한 구체적인 실시 예들에 불과하다. 본 발명은 구체적이고 실제로 이용할 수 있는 수단 자체뿐 아니라, 장차 기술로 활용할 수 있는 추상적이고 개념적인 아이디어인 기술 적 사상을 포함 할 것이다."}
{"patent_id": "10-2023-0117625", "section": "도면", "subsection": "도면설명", "item": 1, "content": "이하에 첨부되는 도면들은 본 실시 예에 관한 이해를 돕기 위한 것으로, 상세한 설명과 함께 실시 예들을 제공 한다. 도 1은 본 발명의 실시 예에 따른 메모리 장치를 예시적으로 보여주는 도면이다. 도 2a 및 도 2b는 본 발명의 실시 예에 따른 ECC의 parity puncturing을 개념적으로 보여주는 도면들이다. 도 3a 및 도 3b는 본 발명의 실시 예에 따른 optional ECC puncturing을 예시적으로 보여주는 도면들이다. 도 4는 본 발명의 실시 예에 따른 에러 정정 회로을 예시적으로 보여주는 도면이다. 도 5a 및 도 5b는 optional ECC의 구성을 예시적으로 보여주는 도면들이다. 도 6은 본 발명의 실시 예에 따른 에러율에 따른 puncturing option/pattern 테이블을 예시적으로 보여주는 도 면이다. 도 7은 본 발명의 다른 실시 예에 따른 메모리 장치(100a)를 예시적으로 보여주는 도면이다. 도 8은 본 발명의 실시 예에 따른 메모리 장치의 동작을 예시적으로 보여주는 흐름도이다. 도 9는 본 발명의 다른 실시 예에 따른 메모리 장치의 동작을 예시적으로 보여주는 도면이다. 도 10은 실시 예에 따른 컴퓨팅 시스템을 예시적으로 보여주는 도면이다. 도 11은 다른 실시 예에 따른 컴퓨팅 시스템을 예시적으로 보여주는 도면이다. 도 12는 본 발명의 실시 에에 따른 서버 시스템을 예시적으로 보여주는 도면이다."}
