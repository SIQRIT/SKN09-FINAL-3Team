{"patent_id": "10-2022-0189359", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0106483", "출원번호": "10-2022-0189359", "발명의 명칭": "쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치", "출원인": "소프트온넷", "발명자": "김성용"}}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "외부 장치와 데이터를 주고받도록 구성되는 통신부;복수의 명령어들을 저장하는 저장부; 및상기 저장부에 저장된 복수의 명령어들을 실행함으로써, 복수의 동작들을 수행하도록 구성되는 프로세서;를 포함하되,상기 복수의 동작들은,스토리지 공간에 복수의 런타임 환경 각각에 대응하는 복수의 볼륨들을 정의하는 단계;애플리케이션과 연관된 가상 실행 환경의 실행에 대한 요청을 수신하는 단계;상기 요청에 응답하여, 상기 복수의 볼륨들 중에서 상기 애플리케이션의 실행에 필요한 타겟 런타임 환경을 갖는 타겟 볼륨을 결정하는 단계; 및상기 타겟 볼륨이 매핑된 상기 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계;를 포함하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 가상 실행 환경의 실행에 대한 요청은,상기 애플리케이션의 실행에 요구되는 런타임 환경에 대한 정보를 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 복수의 런타임 환경은, CUDA(Compute Unified Device Architecture), cuDNN(Cuda Deep Neural Network Library), Tensorflow, Torch,Caffe, MNX, TensorRT 및 Pytorch 중 적어도 하나를 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서, 상기 타겟 볼륨을 결정하는 단계는,상기 요청에 포함된 상기 애플리케이션의 실행에 요구되는 런타임 환경에 대한 정보에 기초하여 상기 타겟 볼륨을 결정하는 단계;를 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 상기 타겟 볼륨을 결정하는 단계는,공개특허 10-2024-0106483-3-상기 결정된 타겟 볼륨을 식별하기 위한 타겟 볼륨 클레임을 결정하는 단계;를 더 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서, 상기 타겟 볼륨이 매핑된 상기 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계는,상기 타겟 볼륨 클레임을 이용하여 상기 가상 실행 환경에 상기 타겟 볼륨을매핑하는 단계;를 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서, 상기 타겟 볼륨이 매핑된 상기 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계는,상기 가상 실행 환경의 실행에 대한 요청과 상기 타겟 볼륨 클레임을 이용하여, 상기 타겟 볼륨이 매핑된 상기가상 실행 환경을 생성하는 단계; 및상기 생성된 가상 실행 환경을 실행하는 단계를 더 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서, 상기 타겟 볼륨을 상기 가상 실행 환경에 매핑하는 단계는,상기 가상 실행 환경의 실행에 대한 요청에 응답하여 상기 가상 실행 환경을생성 및 실행하는 단계;상기 가상 실행 환경의 속성과 연관된 명세에 상기 결정된 타겟 볼륨 클레임을 반영하는 단계; 및상기 가상 실행 환경을 실행하는 단계;를 더 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 타겟 볼륨이 매핑된 상기 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계는,상기 쿠버네티스에서 제공되는 명령어들 중 상기 가상 실행 환경의 기본 명령어 실행 이전에 실행되는 사전 명세에 상기 결정된 타겟 볼륨 클레임을 반영하는 단계; 및상기 가상 실행 환경을 실행하는 단계;를 더 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서, 상기 복수의 동작들은,상기 실행된 가상 실행 환경에서 호출되는 시스템 콜을 모니터링하는 단계;공개특허 10-2024-0106483-4-상기 시스템 콜의 성공 여부를 판단하는 단계; 및상기 시스템 콜의 성공 여부에 따라, 상기 가상 실행 환경에 매핑된 타겟 볼륨을 수정하는 단계;를 더 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서, 상기 가상 실행 환경에 매핑된 타겟 볼륨을 수정하는 단계는,상기 시스템 콜이 성공하지 못한 경우, 상기 시스템 콜이 성공하기 위해 요구되는 런타임 환경을 재 식별하는단계;상기 복수의 볼륨들 중에서 재 식별된 런타임 환경에 대응하는 추가 타겟 볼륨을 결정하는 단계; 및상기 가상 실행 환경에 상기 추가 타겟 볼륨을 추가적으로 매핑하는 단계;를 더 포함하는 것을 특징으로 하는 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치."}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치에 관한 것으로, 외 부 장치와 데이터를 주고받도록 구성되는 통신부, 복수의 명령어들을 저장하는 저장부 및 저장부에 저장된 복수 의 명령어들을 실행함으로써, 복수의 동작들을 수행하도록 구성되는 프로세서를 포함하되, 복수의 동작들은, 스 토리지 공간에 복수의 런타임 환경 각각에 대응하는 복수의 볼륨들을 정의하는 단계; 애플리케이션과 연관된 가 상 실행 환경의 실행에 대한 요청을 수신하는 단계; 요청에 응답하여, 복수의 볼륨들 중에서 애플리케이션의 실 행에 필요한 타겟 런타임 환경을 갖는 타겟 볼륨을 결정하는 단계; 및 타겟 볼륨이 매핑된 가상 실행 환경을 쿠 버네티스 상에서 실행하는 단계;를 포함한다."}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치에 관한 것으로, 더욱 상세하게는, 쿠버네티스 상에서 실행되는 애플리케이션에 적합한(또는 필요한) 컨테이너 환경을 제공할 수 있는 장치에 관한 것이다."}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "애플리케이션, 즉, 프로그램을 실행하기 위해서는 소정의 환경이 필요하다. 예를 들어, 당연하게도 컴퓨팅 장치 가 준비되어야 하고, 컴퓨팅 장치에 전체적인 실행 환경을 제공하는 운영 체제(operating system) 및 애플리케 이션을 실행을 지원하는 라이브러리와 같은 보조 프로그램들이 설치되어야 한다. 쿠버네티스(Kubernetes)는 이러한 애플리케이션을 실행하기 위한 개별 환경들을 관리하는 일종의 시스템으로서, 애플리케이션 각각을 실행하기 위한 개별적인 컨테이너(container)를 제공, 관리, 운영하는 전반적인 시스템을 의미한다. 이러한 쿠버네티스 환경에서 각 애플리케이션 마다 컨테이너가 제공되어, 컨테이너 단위로 배포 (deployment) 된다. 한편, 애플리케이션 마다 요구되는 환경이 다르기 때문에 각 애플리케이션 실행을 위한 라이브러리가 별도로 필 요하게 된다. 각 라이브러리를 지원하기 위해서는 별도의 컨테이너가 제공되어야 하므로, 결과적으로, 다양한 애플리케이션의 실행을 지원하기 위해서는 쿠버네티스 환경에 수십 또는 수백개의 컨테이너가 요구되는 문제가 있다. 선행기술문헌 특허문헌 (특허문헌 0001) 대한민국공개특허 제10-2022-0019924호(2022.02.18. 공개)"}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "발명의 내용"}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "전술한 문제점을 해소함에 있어, 본 발명의 목적은 스토리지 공간에 사전에 정의된 볼륨에 미리 구축된 런타임 환경들을 컨테이너에 매핑시킴으로써 애플리케이션이 요구하는 런타임 환경을 갖는 가상 실행 환경을 동적으로 제공할 수 있는 장치를 제공하는 것에 있다. 본 발명이 해결하고자 하는 과제는 이상에서 언급한 것에 한정되지 않으며, 언급되지 아니한 다른 해결하고자"}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 2, "content": "하는 과제는 이하의 기재로부터 본 발명이 속하는 기술분야에서 통상의 기술을 가지는 사람에 의하여 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 실시예에 따른 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치는, 외부 장치와 데이터를 주고받도록 구성되는 통신부, 복수의 명령어들을 저장하는 저장부 및 저장부에 저장된 복 수의 명령어들을 실행함으로써, 복수의 동작들을 수행하도록 구성되는 프로세서;를 포함하되, 복수의 동작들은: 스토리지 공간에 복수의 런타임 환경 각각에 대응하는 복수의 볼륨들을 정의하는 단계; 애플리케이션과 연관된 가상 실행 환경의 실행에 대한 요청을 수신하는 단계; 요청에 응답하여, 복수의 볼륨들 중에서 애플리케이션의 실행에 필요한 타겟 런타임 환경을 갖는 타겟 볼륨을 결정하는 단계; 및 타겟 볼륨이 매핑된 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계;를 포함한다. 또한, 본 발명의 일 실시예에 따르면, 가상 실행 환경의 실행에 대한 요청은, 애플리케이션의 실행에 요구되는 런타임 환경에 대한 정보를 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 복수의 런타임 환경은, CUDA(Compute Unified Device Architecture), cuDNN(Cuda Deep Neural Network Library), Tensorflow, Torch, Caffe, MNX, TensorRT 및 Pytorch 중 적어도 하나를 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 타겟 볼륨을 결정하는 단계는, 요청에 포함된 애플리케이션의 실행에 요 구되는 런타임 환경에 대한 정보에 기초하여 타겟 볼륨을 결정하는 단계;를 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 타겟 볼륨을 결정하는 단계는, 결정된 타겟 볼륨을 식별하기 위한 타겟 볼륨 클레임을 결정하는 단계;를 더 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 타겟 볼륨이 매핑된 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계 는, 타겟 볼륨 클레임을 이용하여 가상 실행 환경에 타겟 볼륨을 매핑하는 단계를 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 타겟 볼륨이 매핑된 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계 는, 가상 실행 환경의 실행에 대한 요청과 타겟 볼륨 클레임을 이용하여, 타겟 볼륨이 매핑된 가상 실행 환경을 생성하는 단계; 및 생성된 가상 실행 환경을 실행하는 단계;를 더 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 타겟 볼륨을 가상 실행 환경에 매핑하는 단계는, 가상 실행 환경의 실행 에 대한 요청에 응답하여 가상 실행 환경을생성 및 실행하는 단계; 가상 실행 환경의 속성과 연관된 명세에 결 정된 타겟 볼륨 클레임을 반영하는 단계; 및 가상 실행 환경을 실행하는 단계;를 더 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 타겟 볼륨이 매핑된 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계 는, 가상 실행 환경의 실행에 대한 요청과 타겟 볼륨 클레임을 이용하여, 타겟 볼륨이 매핑된 가상 실행 환경을 생성하는 단계; 및 생성된 가상 실행 환경을 실행하는 단계를 더 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 타겟 볼륨을 가상 실행 환경에 매핑하는 단계는, 가상 실행 환경의 실행 에 대한 요청에 응답하여 가상 실행 환경을생성 및 실행하는 단계; 가상 실행 환경의 속성과 연관된 명세에 결 정된 타겟 볼륨 클레임을 반영하는 단계; 및 가상 실행 환경을 실행하는 단계를 더 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 타겟 볼륨이 매핑된 가상 실행 환경을 쿠버네티스 상에서 실행하는 단계 는, 쿠버네티스에서 제공되는 명령어들 중 가상 실행 환경의 기본 명령어 실행 이전에 실행되는 사전 명세에 결 정된 타겟 볼륨 클레임을 반영하는 단계; 및 가상 실행 환경을 실행하는 단계를 더 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 복수의 동작들은, 실행된 가상 실행 환경에서 호출되는 시스템 콜을 모니 터링하는 단계; 시스템 콜의 성공 여부를 판단하는 단계; 및 시스템 콜의 성공 여부에 따라, 가상 실행 환경에 매핑된 타겟 볼륨을 수정하는 단계를 더 포함할 수 있다. 또한, 본 발명의 일 실시예에 따르면, 가상 실행 환경에 매핑된 타겟 볼륨을 수정하는 단계는, 시스템 콜이 성 공하지 못한 경우, 시스템 콜이 성공하기 위해 요구되는 런타임 환경을 재 식별하는 단계; 복수의 볼륨들 중에 서 재 식별된 런타임 환경에 대응하는 추가 타겟 볼륨을 결정하는 단계; 및 가상 실행 환경에 추가 타겟 볼륨을 추가적으로 매핑하는 단계;를 더 포함할 수 있다. 본 발명의 실시예에 따른 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치의 동작은 비일시적인 저장 매체에 저장된 프로그램으로 제공될 수 있다."}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "상술한 바와 같이, 본 발명에 의한 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위 한 장치는 스토리지 공간에 사전에 정의된 볼륨에 미리 구축된 런타임 환경들을 컨테이너에 매핑시킴으로써 애 플리케이션이 요구하는 런타임 환경을 갖는 가상 실행 환경을 동적으로 제공한다. 이에 따라, 개별 애플리케이션에 적합한 런타임 환경을 구축하기 위해 각 런타임 환경을 구축하기 위한 이미지 를 개별적으로 다운로드 혹은 설치할 필요없이, 다양한 유형의 애플리케이션을 실행하기 위한 컨테이너를 개별 적으로 구축해놓지 않을 수 있는 효과가 있다."}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "본 발명의 효과는 이상에서 언급한 것에 한정되지 않으며, 언급되지 아니한 다른 효과는 이하의 기재로부터 본"}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 3, "content": "발명이 속하는 기술분야에서 통상의 기술을 가지는 사람에 의하여 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명에 있어 첨부된 도면은 종래 기술과의 차별성 및 명료성, 그리고 기술 파악의 편의를 위해 과장된 표현 으로 도시되어 있을 수 있다. 또한, 후술되는 용어들은 본 발명에서의 기능을 고려하여 정의된 용어로서, 사용 자, 운용자의 의도 또는 관례에 따라 달라질 수 있으므로, 이러한 용어들에 대한 정의는 본 명세서 전반에 걸친 기술적 내용을 토대로 내려져야 할 것이다. 한편, 실시예는 본 발명의 청구범위에 제시된 구성요소의 예시적 사 항에 불과하고, 본 발명의 권리범위를 한정하는 것이 아니며, 권리범위는 본 발명의 명세서 전반에 걸친 기술적 사상을 토대로 해석되어야 한다. 명세서 전체에서, 어떤 구성이 어떤 구성을 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한, 그 외 다른 구성을 제외하는 것이 아니라 다른 구성들을 더 포함할 수도 있음을 의미한다. 또한, 어떤 구성이 다른 구성에 \"연결\", \"접속\" 또는 \"결합\"되어 있다고 할 때, 이는 '직접적으로 연결', '직접 적으로 접속' 또는 '직접적으로 결합'되어 있는 경우 만이 아니라, '그 중간에 다른 구성을 개재한 채로 연결', '그 중간에 다른 구성을 개재한 채로 접속' 또는 '그 중간에 다른 구성을 개재한 채로 결합'되는 경우도 있을 수 있음을 의미한다. 반면에, 어떤 구성이 다른 구성에 \"직접 연결\", \"직접 접속\" 또는 \"직접 결합\"되어 있다고 할 때는, 중간에 다른 구성이 존재하지 않는 것으로 이해되어야 할 것이다."}
{"patent_id": "10-2022-0189359", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "본 발명의 실시예의 특징을 보다 명확히 설명하기 위하여, 이하의 실시예가 속하는 기술분야에서 통상의 지식을 가지는 사람에게 널리 알려져 있는 사항들에 관해서 자세한 설명은 생략하기로 한다. 그리고, 도면에서 실시예 의 설명과 관계없는 부분에 대한 자세한 설명은 생략하기로 한다. 이하, 첨부된 도면을 참조하여 본 발명의 실시예에 대하여 상세히 설명한다. 도 1은 본 발명의 실시예들에 따른 쿠버네티스 환경을 설명하기 위한 도면이다. 도 1을 참조하면, 쿠버네티스 환경은 애플리케이션을 실행하도록 형성된 별도 공간인 컨테이너, 컨테이너 를 포함하는 파드, 파드를 관리하는 레플리카셋 그리고 레플리카셋을 관리하는 디플로이먼트 를 포함할 수 있다. 컨테이너는 애플리케이션(1a)을 독자적으로 실행할 수 있는 가상의 실행 환경을 의미한다. 예를 들어, 컨테 이너는 애플리케이션(1a) 및 애플리케이션(1a)의 실행에 필요한 런타임 환경(1b)이 실행되는 가상의 공간일 수 있다. 다시 말하면, 런타임 환경(1b)을 통해 독자적으로 실행되는 애플리케이션(1a) 자체가 컨테이너로 이해될 수 있다. 여기서, 런타임 환경(1b)는 애플리케이션(1a)의 실행에 필요한 라이브러리, 프레임워크, 레지 스트리 등을 의미할 수 있으나, 이에 한정되는 것은 아니며, 애플리케이션(1a)의 실행을 지원하기 위한 모든 환 경을 의미한다. 컨테이너는 컨테이너 이미지에 의해 생성될 수 있다. 예를 들어, 호스트는 클라이언트로부터의 컨테이너 생 성 요청을 수신하면, 저장된 컨테이너 이미지를 로드함으로써 컨테이너를 생성(즉, 실행)할 수 있다. 파드(Pod, 2)는 적어도 하나의 컨테이너를 포함하는 공간을 의미하는 것으로서, 쿠버네티스 환경에서 배포되 는 가장 작은 단위의 객체를 의미할 수 있다. 파드는 복수의 컨테이너 및 볼륨을 포함할 수 있다. 레플리카셋은 복수의 파드를 관리하는 것으로서, 복수의 파드를 생성하고 실행할 수 있다. 실시예들에 따라, 레플리카셋은 쿠버네티스 환경에서 파드의 개수를 유지하는 기능을 담당할 수 있다. 호스트는 레플리 카셋을 호출함으로써 파드들을 관리할 수 있다. 디플로이먼트는 쿠버네티스 환경을 제어하는 기능을 담당한다. 예를 들어, 디플로이먼트는 레플리카셋 , 그리고 파드를 제어할 수 있다. 즉, 호스트는 디플로이먼트를 실행함으로써 레플리카셋을 관리하 고, 결과적으로 파드를 배포할 수 있다. 이로써, 디플로이먼트는 쿠버네티스 환경을 전반적으로 제어하는 기능을 담당할 수 있다. 본 발명의 실시예들에 따른 전자 장치는 이러한 쿠버네티스 환경에서 각 애플리케이션(1a)에 적합한 가상 실행 환경(즉, 컨테이너 또는 파드)를 제공할 수 있다. 이에 대해서는 후술하도록 한다. 도 2는 본 발명의 실시예들에 따른 전자 장치를 개념적으로 나타내는 도면이다. 도 2를 참조하면, 전자 장치는 통신부, 제어부 및 저장부를 포함할 수 있다. 통신부는 외부 장치와 데이터를 주고받을 수 있다. 예컨대, 통신부는 유선 통신 방식 또는 무선 통신 방식에 따라 외부 장치와 데이터를 주고받을 수 있다. 제어부는 전자 장치의 전반적인 동작을 제어할 수 있다. 예를 들어, 제어부는 적어도 하나의 프 로세서를 포함할 수 있고, 상기 적어도 하나의 프로세서는 CPU(central processing unit), MCU(micro controller unit), GPU(graphical processing unit), ASIC(application specified integrated circuit) 또는 FPGA(field programmable gate array)일 수 있으나 본 발명의 실시예들이 이에 한정되는 것은 아니다. 제어부는 레플리카셋 또는 디플로이먼트를 호출(또는 실행)함으로써, 애플리케이션(1a)이 실행될 수 있는 가상 실행 공간인 컨테이너를 실행(즉, 생성)할 수 있다. 이하, 별도의 설명이 없더라도, 본 명세서에 서 설명되는 전자 장치의 동작은 제어부의 제어에 따라 수행되는 것으로 이해될 수 있다. 저장부는 전자 장치의 동작에 필요한 데이터를 저장할 수 있다. 예를 들어, 저장부는 비휘발성 메모리 또는 휘발성 메모리를 포함하는 스토리지일 수 있으나, 이에 한정되는 것은 아니다. 실시예들에 따라, 저장부는 전자 장치의 동작을 제어하기 위한 복수의 명령어들을 저장할 수 있다. 제어부는 저장부에 저장된 상기 명령어들을 로드(load)함으로써, 전자 장치에 대한 제어를 수행할 수 있다. 또한, 저장부는 컨테이너를 생성하기 위한 컨테이너 이미지를 저장할 수 있다. 또는, 저장부는 애 플리케이션을 실행하기 위한 런타임 환경에 대한 데이터를 저장할 수 있다. 도 3은 본 발명의 실시예들에 따른 전자 장치의 동작을 설명하기 위한 도면이다. 도 3을 참조하면, 전자 장치는 스토리지 공간에 복수의 볼륨들(210a, 210b)을 생성할 수 있다. 여기 서, 스토리지 공간은 전자 장치 내의 저장 공간(즉, 저장부)일 수 있으나, 이에 한정되는 것은 아니며, 전자 장치의 외부에 있는 저장 공간(예컨대, 네트워크 스토리지)일 수도 있다. 예컨대, 스토리지 공간은 NFS(Network File System)등의 파일 스토리지와 클라우드 서비스 사업자가 제공 혹은 자체적으로 구축한 오브젝트 스토리지일 수 있다. 실시예들에 따라, 볼륨들(210a, 210b)은 CephFS 볼륨 유형의 Cephfs, Fibre Channel 스토리지인 fc, 노드에 마운트된 경로를 사용할 수 있는 local, 네트워크 파일시스템 스토리지 nfs 등으로 구현될 수 있으나, 이에 한 정되는 것은 아니다. 볼륨들(210a, 210b)은 파드와 별도로 존재하는 저장 공간으로서, 쿠버네티스 클러스터에 포함된 워커 노드가 공통적으로 접근할 수 있다. 즉, 임의의 파드는 볼륨들(210a, 210b)에 접근할 수 있다. 볼륨들(210a, 210b) 각각은 런타임 환경들(220a, 220b)을 갖는다. 실시예들에 따라, 볼륨들(210a, 210b)은 쿠 버네티스 환경에서 제공되는 영속성 볼륨(persistent volume)일 수 있다. 예를 들어, 전자 장치는 관리자 의 요청에 따라, 관리자로부터 지정된 스토리지 유형에 대응하는 영속성 볼륨을 생성할 수 있다. 한편, 도 3에는 각 볼륨(210a, 210b)이 하나의 런타임 환경(220a, 220b)만을 갖는 것으로 도시되어 있으나, 실 시예들에 따라, 하나의 볼륨이 복수의 런타임 환경을 포함할 수도 있다. 런타임 환경들(220a, 220b)은 애플리케이션의 실행에 필요한 라이브러리, 프레임워크, 레지스트리 등을 포함하 는 자원을 의미할 수 있으나, 이에 한정되는 것은 아니며, 애플리케이션의 실행을 지원하기 위한 임의의 자원들 을 의미한다. 예를 들어, 런타임 환경들(220a, 220b) 각각은 CUDA(Compute Unified Device Architecture), cuDNN(Cuda Deep Neural Network Library), Tensorflow, Torch, Caffe, MNX, TensorRT 및 Pytorch 중 적어도 하나를 포함할 수 있다. CUDA는 NVIDIA 사의 GPU 하드웨어의 고성능 연산기능을 활성화 하기 위한 라이브러리이 고, cuDNN은 러닝 프레임워크 내 연산들이 GPU 하드웨어 가속화를 가능하도록 지원하는 라이브러리이다. TensorRT 라이브러리는 딥러닝 학습을 통해 생성된 인공지능 네트워크 모델이 GPU 하드웨어에 최적화 되도록 한 다. 이처럼, 각종 애플리케이션을 실행하기 위한 런타임 환경은 다양한 라이브러리로 구성되어 있을 뿐만 아니라, 이들 라이브러리의 버전 또한 시시 각각 업데이트 되기 때문에, 특정 앱의 실행 마다 해당 특정 앱에 적합한 런 타임 환경을 갖추는 것이 필수적이다. 그러나, 이러한 런타임 환경의 용량은 적지 않고, 이를 구축하는데 많은 시간 및 자원이 소요될 뿐만 아니라, 이미 구축된 환경을 다른 환경으로 이식하기가 쉽지 않은 문제가 있다. 이에, 본 발명은 쿠버네티스 상에서 제공되는 여러가지 런타임 환경을 미리 구축해두고, 사용자로부터 특정 앱 의 실행을 위한 컨테이너 생성이 요청되는 경우, 해당 특정 앱에 적합한 런타임 환경을 매핑된 컨테이너를 제공 할 수 있다. 특히, 본 발명은 각 런타임 환경에 대응하는 영속성 볼륨을 사전에 구성하고, 이러한 영속성 볼륨 을 해당 컨테이너에 매핑하여 제공할 수 있다. 전자 장치는 사용자로부터 디플로이먼트 명세(deployment specification)를 수신할 수 있다. 실시예들에 따라, 전자 장치는 애플리케이션을 실행하기 위한 실행 환경, 즉, 컨테이너(또는 이를 포함하는 파드)를 생성하기 위한 디플로이먼트 명세 작성 요청을 사용자로 전송할 수 있고, 사용자는 해당 요청에 응답하여 디플 로이먼트 명세를 작성하여 전자 장치로 전달할 수 있다. 디플로이먼트 명세는 해당 애플리케이션의 실행 환경, 즉, 컨테이너(또는 이를 포함하는 파드)의 속성과 연관된 데이터로서, 디플로이먼트 명세는 애플리케이션의 실행에 필요한 런타임 환경에 대한 정보를 포함할 수 있다. 예컨대, 실행 대상이 되는 애플리케이션이 인공지능 서비스 용 애플리케이션인 경우, 디플로이먼트 명세는 인공 지능 서비스를 지원하는 런타임 환경에 대한 정보를 포함할 수 있다. 한편, 디플로이먼트 명세에 포함된 애플리케이션의 실행 환경에 대한 정보는 사용자에 의해 작성되어 생성되거 나, 또는, 전자 장치에 의해 생성될 수도 있다. 예컨대, 전자 장치는 디플로이먼트 명세에 포함된 애 플리케이션에 대한 정보를 이용하여, 애플리케이션에 적합한 런타임 환경을 결정하고, 결정된 런타임 환경과 연 관된 정보를 생성할 수 있다. 전자 장치는 사용자로부터 제공된 디플로이먼트 명세에 대응하는 타겟 볼륨을 결정할 수 있다. 즉, 전자 장치는 스토리지 공간에 생성된 볼륨들(210a, 210b) 중에서, 사용자가 실행할 애플리케이션의 실행 환경(즉, 런타임 환경)에 대응하는 런타임 환경을 갖는 타겟 볼륨을 결정할 수 있다. 예를 들어, 사용자가 실행 할 애플리케이션(1a)이 제1런타임 환경(220a)을 요구하는 경우, 전자 장치는 볼륨들(210a, 210b) 중에서 제1런타임 환경(220a)을 갖는 제1볼륨(210a)을 타겟 볼륨으로서 결정할 수 있다. 실시예들에 따라, 전자 장치는 타겟 볼륨에 대한 정보를 획득할 수 있다. 여기서, 타겟 볼륨에 대한 정보 는 타겟 볼륨의 이름, 타겟 볼륨의 용량, 타겟 볼륨의 경로 등을 포함할 수 있으나, 이에 한정되는 것은 아니며, 타겟 볼륨에 접근할 수 있는 모든 형태의 정보를 의미한다. 전자 장치는 사용자의 디플로이먼트 명세에 대응하는 컨테이너를 생성할 수 있다. 실시예들에 따라, 디플 로이먼트 명세는 생성될 컨테이너 또는 파드에 대한 정보를 포함할 수 있고, 전자 장치는 사용자의 디 플로이먼트 명세에 포함된 정보들을 이용하여 애플리케이션(1a) 및 애플리케이션(1a)이 실행될 수 있는 런타임 환경(1b)을 갖는 컨테이너를 생성할 수 있다. 한편, 이 때, 전자 장치는 해당 컨테이너에 대응하는 컨테이너 이미지를 이용하여 컨테이너를 생성 할 수 있는데, 컨테이너 이미지에는 런타임 환경(1b)에 대한 정보가 포함되지 않을 수 있다. 본 발명의 실시예들에 따른 전자 장치는, 애플리케이션(1a)에 대응하는 컨테이너를 생성하고, 해당 컨 테이너에 기 결정된 타겟 볼륨을 매핑할 수 있다. 사용자의 디플로이먼트 명세에 대응하는 컨테이너에 타 겟 볼륨을 매핑하는 것은, 컨테이너의 생성과 함께 이루어지거나 또는 컨테이너의 생성 이후에 이루어질 수 있다. 한편, 쿠버네티스 환경에서 컨테이너와 볼륨(210a, 210b)을 직접 매핑시키지 않고, 볼륨 클레임이라는 오브 젝트를 이용하여 컨테이너와 볼륨(210a, 210b)을 간접적으로 매핑시킬 수 있다. 볼륨 클레임은 볼륨(210a, 210b)에 접근할 수 있는 정보를 포함하는 것으로서, 예를 들어, 볼륨(210a, 210b)의 이름(식별자), 크기, 타입 등에 대한 정보를 포함할 수 있다. 볼륨 클레임은 사용자의 디플로이먼트 명세 내에 기입될 수 있고, 전자 장치 는 디플로이먼트 명세 내에 포함된 볼륨 클레임을 통해 컨테이너와 볼륨(210a, 210b)을 서로 매핑시킬 수 있다. 전자 장치는 볼륨(210a, 210b)의 생성 시 대응하는 볼륨 클레임을 생성해두고, 이후 타겟 볼륨이 결정되면 기 생성된 볼륨들(210a, 210b)의 볼륨 클레임들 중에서 타겟 볼륨에 대응하는 타겟 볼륨 클레임을 이용하여 컨 테이너와 타겟 볼륨을 매핑시킬 수 있다. 또한, 대안적으로, 전자 장치는 타겟 볼륨이 결정되면 타겟 볼륨에 대한 볼륨 클레임, 즉, 타겟 볼륨 클레임을 생성하여 컨테이너와 타겟 볼륨을 매핑시킬 수 있다. 컨테이너와 타겟 볼륨이 매핑되는 과정은 다양하게 이루어질 수 있다. 예를 들어, 전자 장치는 디플로이먼트 명세 내의 컨테이너에 대한 정보에, 컨테이너에 마운트될 타 겟 볼륨에 대한 정보(경로, 이름 등)를 입력하고, 입력된 디플로이먼트 명세를 통해 컨테이너를 생성하며 타 겟 볼륨을 매핑시킬 수 있다. 또한, 대안적으로, 전자 장치는 기 생성된 컨테이너의 디플로이먼트 명세를 수정하여 컨테이너에 타 겟 볼륨을 사후적으로 매핑할 수 있다. 이 때, 전자 장치는 쿠버네티스 클러스터에서 제공되는 다양한 명 령어들을 이용하여 컨테이너의 마운트될 볼륨에 대한 정보에, 타겟 볼륨에 대한 정보를 입력할 수 있다. 예를 들어, 전자 장치는 쿠버네티스 클러스터의 서브패스(subPath) 명령어를 활용하여 컨테이너에 타겟 볼륨의 경로를 마운트 할 수 있다. 이 때, 타겟 볼륨의 경로는 타겟 볼륨 자체의 경로이거나, 또는 타겟 볼륨 내의 특정 런타임 환경에 대응하는 하위 경로일 수 있다. 또는, 전자 장치는 디플로이먼트의 환경변수를 선언하는 env 항목을 수정함으로써, 실행될 컨테이너가 참조할 타겟 볼륨의 런타임 환경의 경로를 지정할 수 있다. 또는, 전자 장치는 컨테이너가 실행될 때 기본 명령어 실행 이전에 실행되는 사전 명세(예컨대, args)에 타겟 볼륨의 마운트과 연관된 명령어를 기재함으로써, 컨테이너의 기본 명령어 실행 전에 타겟 볼륨 이 마운트되도록 할 수도 있다. 따라서, 본 발명의 실시예들에 따르면, 애플리케이션(1a)이 실행될 컨테이너에 애플리케이션(1a)이 요구하는 런타임 환경(1b)을 구축할 수 있을 뿐만 아니라, 이러한 런타임 환경(1b)을 구축할 때 각 런타임 환경(1b)을 구 축하기 위한 이미지를 개별적으로 다운로드 혹은 설치할 필요없이, 스토리지 공간에 사전에 정의된 볼륨 (210a, 210b)에 미리 구축된 런타임 환경들(220a, 220b)을 컨테이너에 매핑시킴으로써 애플리케이션(1a)이 요구하는 런타임 환경(1b)을 구축할 수 있는 효과가 있다. 이를 통해, 다양한 유형의 애플리케이션을 실행하기 위한 컨테이너를 개별적으로 구축해놓지 않을 수 있다. 컨테이너와 타겟 볼륨이 매핑된 후 쿠버네티스 상에서 컨테이너가 실행되면 컨테이너에 매핑된(즉, 마 운트된) 타겟 볼륨이 이식된다. 이 때, 타겟 볼륨은 컨테이너 또는 컨테이너를 포함하는 파드에 디렉토리 구조로 매핑된다. 이 때의 디렉토리 경로는 명세파일에서 사용자가 직접 지정할 수 있다. 이를 통해, 컨테이너 가 타겟 볼륨에 구축된 런타임 환경(타겟 런타임 환경)의 경로를 확인하고, 이렇게 제공되는 런타임 환경(예 컨대, 라이브러리)의 명령어를 사용할 수 있게 된다. 다시 말하면, 해당 런타임 환경을 제공하는 컨테이너 구축을 위한 컨테이너 이미지 없이, 기본적인 환경만 제공 되는 컨테이너 이미지를 사용하여 컨테이너를 생성하더라도, 타겟 볼륨을 동적으로 마운트함으로써 타겟 볼륨에 구축된 런타임 환경을 인식할 수 있어, 해당 이미지에 포함되어 있지 않은 런타임 환경(예컨대, 파이썬 인터프 리터 등). 예를 들어, 전자 장치는 LD_LIBRARY_PATH 환경변수 등을 통해, 딥러닝 프레임워크를 포함하지 않는 이미지 로부터 생성된 컨테이너를 타겟 볼륨의 딥러닝 프레임워크와 연결될 수 있다. 컨테이너는 해당 명세에 포 함된 타겟 볼륨의 디렉토리 정보를 통해, 딥러닝 프레임워크의 경로를 인식하고 해당 라이브러리를 활용하여 인 공지능 서비스의 개발, 딥러닝 네트워크의 학습, 추론 시 노드에 장착되어 있는 GPU 하드웨어 자원들을 사용하 여 딥러닝 프레임워크가 제공하는 연산들에 대해 가속화 기능을 이용할 수 있는 효과가 있다. 도 4는 본 발명의 실시예들에 따른 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위 한 방법을 설명하기 위한 플로우 차트이다. 도 4를 참조하여 설명되는 방법은 전자 장치에 의해 수행될 수 있다. 도 4를 참조하면, 전자 장치는 런타임 환경들을 포함하는 볼륨을 생성한다(S110). 실시예들에 따라, 전자 장치는 쿠버네티스 클러스터에서 제공되는 다양한 타입의 볼륨들을 생성할 수 있고, 이 때, 각 볼륨들은 적어도 하나의 런타임 환경을 구축할 수 있다. 예를 들어, 전자 장치는 쿠버네티스 클러스터의 영속성 볼 륨(persistent volume)을 이용하여 런타임 환경들을 포함하는 볼륨을 생성할 수 있다. 전자 장치는 사용자, 즉 클라이언트, 로부터 컨테이너 실행 요청을 수신할 수 있다(S120). 실시예들에 따 라, 전자 장치는 컨테이너 실행에 대한 전반적인 정보를 포함하는 디플로이먼트 명세와 함께 컨테이너 실 행 요청을 수신할 수 있다. 한편, 컨테이너 실행 요청은 컨테이너를 포함하는 파드, 레플리카셋, 디플로이먼트 의 실행 요청을 모두 포함한다. 전자 장치는 사용자에 의해 실행이 요청된 컨테이너에 대응하는 타겟 볼륨을 결정할 수 있다(S130). 실시 예들에 따라, 전자 장치는 기 구축된 런타임 환경들에 대응하는 복수의 볼륨들 중에서, 실행될 컨테이너에 대응하는 타겟 볼륨을 결정할 수 있다. 타겟 볼륨은 해당 컨테이너의 실행에 필요한 런타임 환경을 갖는 볼륨일 수 있다. 전자 장치는 컨테이너와 타겟 볼륨을 매핑시킬 수 있다(S140). 실시예들에 따라, 전자 장치는 컨테이 너 생성 시 타겟 볼륨을 매핑하여 컨테이너를 생성하거나, 또는, 기 생성된 컨테이너의 정보를 변경함으로써 사 후적으로 타겟 볼륨을 매핑시킬 수 있으나, 이에 한정되는 것은 아니다. 도 5는 본 발명의 실시예들에 따른 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위 한 방법을 설명하기 위한 플로우 차트이다. 도 5를 참조하여 설명되는 방법은 전자 장치에 의해 수행될 수 있다. 도 5를 참조하면, 컨테이너와 타겟 볼륨의 매핑(S140) 이후, 전자 장치는 실행된 컨테이너에서 이루어지는 시스템 콜을 모니터링할 수 있다(S210). 실시예들에 따라, 전자 장치는 실행 중인 컨테이너에서 요청되는 시스템 콜을 모니터링하고, 시스템 콜의 성공 여부, 또는, 시스템 콜의 유효성 여부를 판단할 수 있다. 또는,컨테이너의 시스템 콜은 전자 장치로 전송될 수 있고, 전자 장치는 컨테이너의 실행 환경을 고 려하여 시스템 콜의 유효성, 또는 성공 여부를 판단할 수 있다. 전자 장치는 시스템 콜의 성공 여부를 판단할 수 있다(S220). 실시예들에 따라, 전자 장치는 시스템 콜의 모니터링 결과를 통해, 시스템 콜이 해당 컨테이너에서 성공하는지 여부를 판단할 수 있다. 시스템 콜이 성공하지 못한 경우(S220의 N), 전자 장치는 컨테이너의 실행 시 요구되는 런타임 환경을 재 식별할 수 있다(S230). 시스템 콜이 성공하지 못한 경우, 컨테이너의 실행 환경이 해당 시스템 콜을 지원하지 않는 경우일 수 있다. 전자 장치는 시스템 콜, 또는, 시스템 콜의 응답을 이용하여 해당 시스템 콜이 성공 적으로 처리되기 위해서 필요한 런타임 환경을 재 식별할 수 있다. 전자 장치는 재 식별된 런타임 환경에 대응하는 추가 타겟 볼륨을 결정하고(S240), 결정된 추가 타겟 볼륨 을 컨테이너에 추가로 매핑시킬 수 있다(S250). 실시예들에 따라, 전자 장치는 컨테이너의 정보를 수정함 으로써, 결정된 추가 타겟 볼륨을 컨테이너에 추가로 매핑시킬 수 있다. 본 발명의 실시예에 따른 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 방법들 은, 다양한 컴퓨터 수단을 통해 실행하기 위한 명령어들을 포함되는 프로그램이 저장된 컴퓨터 판독 가능한 저 장 매체에 기록될 수 있다. 컴퓨터 판독 가능한 저장 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단독으로 또는 조합하여 포함 할 수 있다. 이 경우, 저장 매체에 기록되는 프로그램 명령어는 본 발명을 위해 특별히 설계되고 구성된 것들이 거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 매체의 예에는 롬(ROM), 램(RAM), 플래시 메모리(flash memory) 등과 같이 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함될 수 있다. 프로그램 명령의 예에는 컴파일러 (compiler)에 의해 만들어지는 것과 같은 기계어 코드 뿐만 아니라 인터프리터(interpreter) 등을 사용해서 컴 퓨터에 의해 실행될 수 있는 고급 언어 코드를 포함할 수 있다. 상술한 하드웨어 장치는 본 발명의 동작을 수행 하기 위해 적어도 하나의 소프트웨어 모듈로 작동하도록 구성될 수 있으며, 그 역도 마찬가지이다. 또한, 상술 한 방법 또는 장치는 그 구성이나 기능의 전부 또는 일부가 결합되어 구현되거나, 분리되어 구현될 수 있다. 이상에서와 같이, 본 발명에 의한 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치에 의하면, 애플리케이션이 실행될 컨테이너에 애플리케이션이 요구하는 런타임 환경을 적절히 구축할 수 있다. 특히, 스토리지 공간에 사전에 정의된 볼륨에 미리 구축된 런타임 환경들을 컨테이너에 매핑시킴으로써 애플리케이션이 요구하는 런타임 환경을 구축할 수 있는 효과가 있다. 이에 따라, 개별 애플리케이션에 적합한 런타임 환경을 구축하기 위해 각 런타임 환경을 구축하기 위한 이미지 를 개별적으로 다운로드 혹은 설치할 필요없이 다양한 유형의 애플리케이션을 실행하기 위한 컨테이너를 개별적 으로 구축해놓지 않을 수 있다. 상술한 바와 같이, 본 발명은 도면에 도시된 실시예를 참고로 하여 설명되었으나 이는 예시적인 것에 불과하며, 당해 기술이 속하는 분야에서 통상의 지식을 기초로 다양한 변형 및 균등한 다른 실시예가 가능하다는 점을 이 해해야 한다. 따라서 본 발명의 진정한 기술적 보호범위는 이하 기술할 청구범위에 의하며, 상술한 발명의 구체 적 내용을 토대로 정해져야 할 것이다. 산업상 이용가능성 본 발명은 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위한 장치에 관한 것으로, 쿠버네티스를 이용한 소프트웨어 개발 분야에 이용 가능하다."}
{"patent_id": "10-2022-0189359", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 실시예들에 따른 쿠버네티스 환경을 설명하기 위한 도면이다. 도 2는 본 발명의 실시예들에 따른 전자 장치를 개념적으로 나타내는 도면이다. 도 3은 본 발명의 실시예들에 따른 전자 장치의 동작을 설명하기 위한 도면이다. 도 4는 본 발명의 실시예들에 따른 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위 한 방법을 설명하기 위한 플로우 차트이다. 도 5는 본 발명의 실시예들에 따른 쿠버네티스 상에서 애플리케이션에 대응하는 가상 실행 환경을 제공하기 위 한 방법을 설명하기 위한 플로우 차트이다."}
