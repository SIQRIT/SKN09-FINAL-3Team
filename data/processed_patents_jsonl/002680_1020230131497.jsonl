{"patent_id": "10-2023-0131497", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0133519", "출원번호": "10-2023-0131497", "발명의 명칭": "인공지능 기반의 모델의 벤치마크 결과를 제공하기 위한 방법 및 디바이스", "출원인": "주식회사 노타", "발명자": "박상건"}}
{"patent_id": "10-2023-0131497", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컴퓨팅 디바이스에 의해 수행되는, 벤치마크(benchmark) 결과를 제공하기 위한 방법."}
{"patent_id": "10-2023-0131497", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "컴퓨팅 디바이스에 의해 수행되는, 벤치마크(benchmark) 결과를 제공하기 위한 방법이 개시된다. 상기 방법은, 추론(inference) 태스크 및 데이터셋을 포함하는 제 1 입력 데이터를 획득하는 단계, 상기 추론 태스크에 대한 벤치마크의 대상이 되는 타겟 모델(target model) 및 상기 타겟 모델의 상기 추론 태스크가 실행될 적어도 하나 의 타겟 노드(target node)를 결정하는 단계 - 결정된 상기 타겟 모델은, 상기 데이터셋을 기반으로 상기 적어도 하나의 타겟 노드에서 상기 추론 태스크에 대한 벤치마크가 수행되는 인공지능 기반의 모델에 대응됨 -, 및 상기 타겟 모델을 상기 적어도 하나의 타겟 노드에서 실행함에 따라 획득되는 벤치마크 결과를 제공하는 단계를 포함 할 수 있다."}
{"patent_id": "10-2023-0131497", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시내용은 인공지능 기술에 관한 것으로 보다 구체적으로 인공지능 기반의 모델에 대한 벤치마크 기술에 관 한 것이다."}
{"patent_id": "10-2023-0131497", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 기술의 발전으로 인해, 다양한 형태의 인공지능 기반의 모델이 개발되고 있다. 다양한 인공지능 기반 의 모델들을 처리하기 위한 연산 자원에 대한 요구 또한 증가하고 있으며, 관련 산업 내에서도 새로운 능력을 가지는 하드웨어들의 개발이 지속적으로 이루어지고 있다. 개인용 컴퓨터, 스마트폰, 자동차, 웨어러블 장치 및 로봇 등과 같은 네트워크 상에서의 단말들에서 직접적인 연산이 이루어질 수 있는 엣지(edge) 인공지능에 대한 수요가 증가함에 따라, 하드웨어 리소스를 고려한 인공지 능 기반의 모델에 대한 연구가 이루어지고 있다. 이처럼 엣지 인공지능 기술의 발전과 함께 인공지능 기술 분야에서 하드웨어에 대한 중요성이 커짐에 따라, 인 공지능 기반 솔루션을 개발하고 런칭하기 위해서는, 인공지능 기반의 모델 뿐만 아니라 인공지능 기반의 모델이 실행될 다양한 하드웨어에 대한 충분한 지식 또한 함께 요구된다. 예를 들어, 특정 도메인에서 뛰어난 성능을 가지는 모델이 존재하더라도, 이러한 모델에 대한 추론 성능이 모델이 실행될 하드웨어 별로 상이할 수 있다. 특정 도메인에서 최적의 성능을 보유한 모델이 서비스가 제공될 특정 하드웨어에서 지원되지 않는 상황 또한 존 재할 수 있다. 이에 따라, 제공하고자 하는 서비스에 적합한 인공지능 기반의 모델과 인공지능 기반의 모델에 적합한 하드웨어를 함께 결정하기 위해서는 인공지능 기술과 하드웨어 기술에 대한 높은 수준의 배경 지식과 방 대한 양의 리소스가 요구될 수 있다. 선행기술문헌 특허문헌 (특허문헌 0001) 미국 특허공개 번호 제2022-0121927호"}
{"patent_id": "10-2023-0131497", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시내용은 전술한 배경기술에 대응하여 안출된 것으로, 특정 노드에서 특정 모델의 벤치마크 결과를 효율적 으로 제공하기 위함이다. 본 개시내용의 기술적 과제들은 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술 적 과제들은 아래의 기재로부터 당업자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2023-0131497", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시내용의 일 실시예에 따라, 컴퓨팅 디바이스에 의해 수행되는, 벤치마크(benchmark) 결과를 제공하기 위 한 방법이 개시된다. 상기 방법은, 추론(inference) 태스크 및 데이터셋을 포함하는 제 1 입력 데이터를 획득하 는 단계, 상기 추론 태스크에 대한 벤치마크의 대상이 되는 타겟 모델(target model) 및 상기 타겟 모델의 상기 추론 태스크가 실행될 적어도 하나의 타겟 노드(target node)를 결정하는 단계 - 결정된 상기 타겟 모델은, 상 기 데이터셋을 기반으로 상기 적어도 하나의 타겟 노드에서 상기 추론 태스크에 대한 벤치마크가 수행되는 인공 지능 기반의 모델에 대응됨 -, 및 상기 타겟 모델을 상기 적어도 하나의 타겟 노드에서 실행함에 따라 획득되는 벤치마크 결과를 제공하는 단계를 포함할 수 있다. 일 실시예에서, 상기 적어도 하나의 타겟 노드를 결정하는 단계는: 상기 추론 태스크에 대한 벤치마크를 위해 추천되는 후보(candidate) 노드들을 포함하는 후보 노드 리스트를 제공하는 단계, 및 상기 후보 노드 리스트 중 상기 적어도 하나의 타겟 노드를 선택하는 제 2 입력 데이터에 기초하여 상기 적어도 하나의 타겟 노드를 결정 하는 단계를 포함할 수 있다. 일 실시예에서, 상기 후보 노드 리스트는, 상기 후보 노드들 각각에 대한 식별 정보, 및 상기 타겟 모델이 실행 되는 경우 상기 후보 노드들 각각에 대한 예상 레이턴시(estimated latency) 정보를 포함할 수 있다. 일 실시예에서, 상기 후보 노드 리스트에 포함되는 후보 노드들의 정렬 순서는, 상기 예상 레이턴시 정보의 크 기에 기초하여 결정될 수 있다. 일 실시예에서, 상기 후보 노드들 중 제 1 후보 노드와 제 2 후보 노드 간의 상기 예상 레이턴시 정보의 크기의 차이가 사전 결정된 임계 범위 내에 포함되는 경우, 상기 제 1 후보 노드와 상기 제 2 후보 노드의 메모리 사용 량 및 CPU 점유율에 기초하여 상기 제 1 후보 노드와 상기 제 2 후보 노드 간의 정렬 순서가 결정될 수 있다. 일 실시예에서, 상기 후보 노드 리스트는: 상기 후보 노드들 중 적어도 일부의 노드에 대한 CPU 코어의 사용량 을 나타내는 파워 모드(power mode) 정보, 및 상기 후보 노드들 중 적어도 일부의 노드에 대한 Fan 사용량을 나 타내는 Fan 모드 정보를 포함할 수 있다. 일 실시예에서, 상기 후보 노드 리스트는: 상기 후보 노드들 각각에서 지원 가능한 적어도 하나의 모델에 대한 정보, 상기 후보 노드들 각각에서 지원 가능한 적어도 하나의 모델이 설치되는데 필요한 라이브러리 정보, 및 상기 후보 노드들에 연결된 전력 측정 센서로부터 획득되는 전력 사용량을 나타내는 전력 사용량 정보를 포함할 수 있다. 일 실시예에서, 상기 제 1 입력 데이터의 상기 데이터셋의 크기에 기반하여 모델 크기가 결정되며, 그리고 상기 후보 노드 리스트는, 결정된 상기 모델 크기를 초과하는 메모리 공간을 가지고 있는 후보 노드들을 포함할 수 있다. 일 실시예에서, 상기 후보 노드 리스트를 제공하는 단계는, 입력된 소스(source) 모델에 포함된 제 1 연산자 (operator)를 지원하는 실행 환경을 가지고 있는 제 1 노드들을 상기 후보 노드들로서 상기 후보 노드 리스트에 포함시키는 단계를 포함할 수 있다. 일 실시예에서, 상기 후보 노드 리스트를 제공하는 단계는, 입력된 소스 모델에 포함된 제 1 연산자를 지원하지 는 않지만 상기 제 1 연산자를 대체할 수 있는 상기 제 1 연산자와 상이한 제 2 연산자를 지원하는 실행 환경을 가지고 있는 제 2 노드들을 상기 후보 노드들로서 상기 후보 노드 리스트에 포함시키는 단계를 포함할 수 있다. 일 실시예에서, 상기 벤치마크 결과는: 상기 적어도 하나의 타겟 노드에서 상기 타겟 모델의 추론의 전처리를 위해 소요되는 전처리(preprocessing) 시간 정보, 상기 적어도 하나의 타겟 노드에서 상기 타겟 모델을 추론하 는데 소요되는 추론 시간 정보, 상기 적어도 하나의 타겟 노드에서 상기 타겟 모델의 추론의 전처리를 위해 사 용되는 전처리 메모리 사용량 정보, 및 상기 적어도 하나의 타겟 노드에서 상기 타겟 모델을 추론하는데 사용되 는 추론 메모리 사용량 정보를 포함할 수 있다. 일 실시예에서, 상기 벤치마크 결과는: 상기 적어도 하나의 타겟 노드에서 상기 타겟 모델을 사전 결정된 횟수 만큼 반복하여 추론함에 따라 획득되는, 추론 시간과 관련된 정량 정보, 및 상기 적어도 하나의 타겟 노드에서 상기 타겟 모델을 추론함에 따라 획득되는, NPU, CPU 및 GPU 각각에 대한 메모리 사용과 관련된 정량 정보를 포 함할 수 있다. 일 실시예에서, 상기 타겟 모델을 상기 적어도 하나의 타겟 노드에서 실행함에 따라 획득되는 상기 벤치마크 결 과를 제공하는 단계는: 상기 적어도 하나의 타겟 노드에서 무선 통신이 가능한 노드와 상기 무선 통신이 불가능 한 노드를 구분하는 단계, 및 상기 무선 통신이 가능한 노드가 직렬(serial) 통신을 이용하여 상기 무선 통신이 불가능한 노드에 연결할 수 있도록, 상기 무선 통신이 불가능한 노드에서의 벤치마크 결과를 획득하기 위하여,상기 무선 통신이 불가능한 노드에 대응되는 상기 무선 통신이 가능한 노드로 벤치마크 태스크를 전송하는 단계 를 포함할 수 있다. 일 실시예에서, 외부에서 확인이 불가능한 제 3 노드가 상기 적어도 하나의 타겟 노드에 포함되는 경우, 상기 벤치마크 결과를 제공하는 단계는: 상기 제 3 노드로부터 제 1 저전력 무선 신호를 수신하는 것에 대한 응답으 로, 상기 타겟 모델을 상기 제 3 노드에서 벤치마크하기 위한 벤치마크 태스크를 포함하는 제 1 응답 메시지 (acknowledgment message)를 상기 제 3 노드로 전송하는 단계, 및 상기 제 3 노드에 의해 생성된 벤치마크 결과 를 포함하는 제 2 저전력 무선 신호를 상기 제 3 노드로부터 수신하는 단계를 포함할 수 있다. 일 실시예에서, 상기 외부에서 확인이 불가능한 제 3 노드가 상기 적어도 하나의 타겟 노드에 포함되는 경우, 상기 벤치마크 결과를 제공하는 단계는, 상기 제 2 저전력 무선 신호가 사전결정된 임계 대기 시간 동안 수신되 지 않는 경우, 상기 제 3 노드에서의 상기 벤치마크 태스크가 실패하였다고 결정하고 그리고 상기 제 3 노드를 비활성(inactive) 상태로 설정하는 단계, 및 상기 비활성 상태로 설정된 상기 제 3 노드로부터 제 3 저전력 무 선 신호를 수신하는 것에 응답하여, 상기 제 3 노드의 상태를 활성(active) 상태로 설정하는 단계를 더 포함할 수 있다. 일 실시예에서, 상기 제 1 저전력 무선 신호는, 상기 제 3 노드가 벤치마크를 수행하고 있는지 여부, 상기 제 3 노드의 메모리 사용량 및 상기 제 3 노드의 하드웨어 식별 정보를 포함할 수 있다. 일 실시예에서, 상기 제 1 응답 메시지에 포함된 상기 벤치마크 태스크는, 상기 제 3 노드가 다운로드 받을 수 있는 타겟 모델 정보 및 상기 제 3 노드가 다운로드 받은 상기 타겟 모델을 변환하는데 사용되는 노드 구성 (configuration) 정보를 포함하며, 그리고 상기 제 3 노드에 의해 생성된 벤치마크 결과는, 상기 노드 구성 정 보 및 상기 타겟 모델 정보에 기초하여 상기 제 3 노드의 실행 환경 상에서 상기 타겟 모델을 실행함에 따라 획 득되는 결과를 포함할 수 있다. 일 실시예에서, 상기 제 2 입력 데이터에 기초하여, 상기 제 2 입력 데이터에 포함된 적어도 하나의 타겟 노드 에서 지원가능한 타겟 모델의 정보가 자동으로 제공될 수 있다. 일 실시예에서, 상기 타겟 모델의 정보는, 상기 적어도 하나의 타겟 노드에서 지원가능한 타겟 모델에 대응되는 식별 정보 및 상기 적어도 하나의 타겟 노드에서 지원가능한 타겟 모델의 소프트웨어 버전 정보를 포함할 수 있 다. 일 실시예에서, 컴퓨터 판독가능 저장 매체에 저장되는 컴퓨터 프로그램이 개시된다. 상기 컴퓨터 프로그램은 컴퓨팅 디바이스에 의해 실행 시 상기 컴퓨팅 디바이스로 하여금 벤치마크 결과를 제공하기 위하여 이하의 동작 들을 수행하도록 하며, 상기 동작들은: 추론 태스크 및 데이터셋을 포함하는 제 1 입력 데이터를 획득하는 동작, 상기 추론 태스크에 대한 벤치마크의 대상이 되는 타겟 모델 및 상기 타겟 모델의 상기 추론 태스크가 실 행될 적어도 하나의 타겟 노드를 결정하는 동작 - 결정된 상기 타겟 모델은, 상기 데이터셋을 기반으로 상기 적 어도 하나의 타겟 노드에서 상기 추론 태스크에 대한 벤치마크가 수행되는 인공지능 기반의 모델에 대응됨 -, 및 상기 타겟 모델을 상기 적어도 하나의 타겟 노드에서 실행함에 따라 획득되는 벤치마크 결과를 제공하는 동 작을 포함할 수 있다. 일 실시예에서, 벤치마크 결과를 생성하기 위한 컴퓨팅 디바이스가 개시된다. 상기 컴퓨팅 디바이스는, 적어도 하나의 프로세서, 및 메모리를 포함할 수 있다. 상기 적어도 하나의 프로세서는: 추론 태스크 및 데이터셋을 포 함하는 제 1 입력 데이터를 획득하고, 상기 추론 태스크에 대한 벤치마크의 대상이 되는 타겟 모델 및 상기 타 겟 모델의 상기 추론 태스크가 실행될 적어도 하나의 타겟 노드를 결정하고 - 결정된 상기 타겟 모델은, 상기 데이터셋을 기반으로 상기 적어도 하나의 타겟 노드에서 상기 추론 태스크에 대한 벤치마크가 수행되는 인공지 능 기반의 모델에 대응됨 -, 그리고 상기 타겟 모델을 상기 적어도 하나의 타겟 노드에서 실행함에 따라 획득되 는, 상기 타겟 모델의 벤치마크 결과를 제공할 수 있다."}
{"patent_id": "10-2023-0131497", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시내용의 일 실시예에 따른 기법은, 특정 노드에서 특정 모델의 벤치마크 결과를 효율적일 방식으로 제공 할 수 있다."}
{"patent_id": "10-2023-0131497", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "다양한 실시예들이 도면을 참조하여 설명된다. 본 명세서에서, 다양한 설명들이 본 개시내용의 이해를 제공하기 위해서 제시된다. 본 개시내용의 실시를 위한 구체적인 내용을 설명하기에 앞서, 본 개시내용의 기술적 요지와 직접적 관련이 없는 구성에 대해서는 본 발명의 기술적 요지를 흩뜨리지 않는 범위 내에서 생략하였음에 유의하 여야 할 것이다. 또한, 본 명세서 및 청구범위에 사용된 용어 또는 단어는 발명자가 자신의 발명을 최선의 방법 으로 설명하기 위해 적절한 용어의 개념을 정의할 수 있다는 원칙에 입각하여 본 발명의 기술적 사상에 부합하 는 의미와 개념으로 해석되어야 할 것이다. 본 명세서에서 사용되는 용어 \"모듈\", \"시스템\" 등은, 컴퓨터-관련 엔티티, 하드웨어, 펌웨어, 소프트웨어, 소 프트웨어 및 하드웨어의 조합, 또는 소프트웨어의 실행을 지칭하며 그리고 상호 교환 가능하게 사용될 수 있다. 예를 들어, 모듈은 프로세서상에서 실행되는 처리과정(procedure), 프로세서, 객체, 실행 스레드, 프로그램, 애 플리케이션 및/또는 컴퓨팅 디바이스일 수 있지만, 이들로 제한되는 것은 아니다. 하나 이상의 모듈은 프로세서 및/또는 실행 스레드 내에 상주할 수 있다. 모듈은 하나의 컴퓨터 내에 로컬화 될 수 있다. 하나의 모듈이 2개 이상의 컴퓨터들 사이에 분배될 수 있다. 또한, 이러한 모듈들은 그 내부에 저장된 다양한 데이터 구조들을 갖 는 다양한 컴퓨터 판독가능한 매체로부터 실행할 수 있다. 모듈들은 예를 들어 하나 이상의 데이터 패킷들을 갖 는 신호(예를 들면, 로컬 시스템, 분산 시스템에서 다른 컴포넌트와 상호작용하는 하나의 컴포넌트로부터의 데 이터 및/또는 신호를 통해 다른 시스템과 인터넷과 같은 네트워크를 통해 전송되는 데이터)에 따라 로컬 및/또 는 원격 처리들을 통해 통신할 수 있다. 더불어, 용어 \"또는\"은 배타적 \"또는\"이 아니라 내포적 \"또는\"을 의미하는 것으로 의도된다. 즉, 달리 특정되지 않거나 문맥상 명확하지 않은 경우에, \"X는 A 또는 B를 이용한다\"는 자연적인 내포적 치환 중 하나를 의미하는 것으로 의도된다. 즉, X가 A를 이용하거나; X가 B를 이용하거나; 또는 X가 A 및 B 모두를 이용하는 경우, \"X는A 또는 B를 이용한다\"가 이들 경우들 어느 것으로도 적용될 수 있다. 또한, 본 명세서에 사용된 \"및/또는\" 그리 고 “적어도 하나” 라는 용어는 열거된 관련 아이템들 중 하나 이상의 아이템의 가능한 모든 조합을 지칭하고 포함하는 것으로 이해되어야 한다. 예를 들어, \"A 또는 B 중 적어도 하나\" 또는 “A 및 B 중 적어도 하나” 라 는 용어는, \"A만을 포함하는 경우\", \"B 만을 포함하는 경우\", \"A와 B의 구성으로 조합된 경우\"를 의미하는 것으 로 해석되어야 한다. 또한, \"포함한다\" 및/또는 \"포함하는\"이라는 용어는, 해당 특징 및/또는 구성요소가 존재함을 의미하는 것으로 이해되어야 한다. 다만, \"포함한다\" 및/또는 \"포함하는\"이라는 용어는, 하나 이상의 다른 특징, 구성요소 및/또 는 이들의 그룹의 존재 또는 추가를 배제하지 않는 것으로 이해되어야 한다. 또한, 달리 특정되지 않거나 단수 형태를 지시하는 것으로 문맥상 명확하지 않은 경우에, 본 명세서와 청구범위에서 단수는 일반적으로 \"하나 또 는 그 이상\"을 의미하는 것으로 해석되어야 한다. 당업자들은 추가적으로 여기서 개시된 실시예들과 관련되어 설명된 다양한 예시적인 논리적 구성요소들, 블록들, 모듈들, 회로들, 수단들, 로직들, 및 알고리즘들이 전자 하드웨어, 컴퓨터 소프트웨어, 또는 양쪽 모두 의 조합들로 구현될 수 있음을 인식해야 한다. 하드웨어 및 소프트웨어의 상호교환성을 명백하게 예시하기 위해, 다양한 예시적인 구성요소들, 블록들, 수단들, 로직들, 모듈들, 회로들, 및 단계들은 그들의 기능성 측면 에서 일반적으로 위에서 설명되었다. 그러한 기능성이 하드웨어로 또는 소프트웨어로서 구현되는지 여부는 전반 적인 컴퓨팅 디바이스에 부과된 특정 어플리케이션(application) 및 설계 제한들에 달려 있다. 제시된 실시예들에 대한 설명은 본 개시의 기술 분야에서 통상의 지식을 가진 자가 본 발명을 이용하거나 또는 실시할 수 있도록 제공된다. 이러한 실시예들에 대한 다양한 변형들은 본 개시의 기술 분야에서 통상의 지식을 가진 자에게 명백할 것이다. 여기에 정의된 일반적인 원리들은 본 개시의 범위를 벗어남이 없이 다른 실시예들 에 적용될 수 있다. 그리하여, 본 발명은 여기에 제시된 실시예 들로 한정되는 것이 아니다. 본 발명은 여기에 제시된 원리들 및 신규한 특징들과 일관되는 최광의의 범위에서 해석되어야 할 것이다. 본 개시내용에서의 제 1, 제 2, 또는 제 3 과 같이 제 N 으로 표현되는 용어들은 적어도 하나의 엔티티들을 구 분하기 위해 사용된다. 예를 들어, 제 1 과 제 2로 표현된 엔티티들은 서로 동일하거나 또는 상이할 수 있다. 또한, 제 1-1, 제 1-2, 제 1-N 등으로 표현되는 용어들 또한 이들을 서로 구분하기 위하여 사용될 수 있다. 본 개시내용에서 사용되는 용어 \"벤치마크(benchmark)\"는 모델을 노드에서 실행하는 또는 테스트하는 동작, 또 는 모델의 노드에 대한 성능을 측정하는 동작을 의미할 수 있다. 본 개시내용에서의, 벤치마크 결과 또는 벤치 마크 결과 정보는 벤치마크에 따라 획득되는 정보 또는 벤치마크에 따라 획득되는 정보를 가공한 정보를 포함할 수 있다. 본 개시내용에서 사용되는 용어 \"인공지능 기반의 모델\"은 인공지능 모델, 연산 모델, 신경망, 네트워크 함수, 뉴럴 네트워크(neural network) 및 모델과 상호 교환 가능하게 사용될 수 있다. 본 개시내용에서의 모델은 모델 파일 및/또는 모델 타입 정보를 포괄하는 의미로 사용될 수 있다. 일 실시예에서, 모델 타입 정보는 모델의 실 행환경 또는 프레임워크 또는 타입을 식별하기 위한 정보를 의미할 수 있다. 예를 들어, TensorRT, Tflite 및 Onnxruntime이 모델 타입 정보에 포함될 수 있다. 본 개시내용에서 사용되는 용어 \"노드\"는 모델에 대한 벤치마크의 대상이 되는 하드웨어 정보에 대응될 수 있다. 이러한 하드웨어 정보는 물리적 하드웨어, 가상 하드웨어, 외부에서 네트워크 접근이 불가능한 하드웨어, 외부에서 확인이 불가능한 하드웨어 및/또는 클라우드 내에서 확인되는 하드웨어를 포괄하는 의미로 사용될 수 있다. 예를 들어, 본 개시내용에서의 노드는 RaspberryPi, Coral, Jetson-Nano, AVH RasberryPi 및 Mobile 등 과 같은 다양한 형태의 하드웨어를 포함할 수 있다. 본 개시내용에서 인공지능 기반의 모델 내에서의 노드는 신경망을 구성하는 컴포넌트를 의미하도록 사용될 수 있으며, 예를 들어 신경망 내에서의 노드는 뉴런과 대응될 수 있다. 도 1은 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스의 블록 구성도를 개략적으로 도시한다. 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스는 프로세서 및 메모리를 포함할 수 있다. 도 1에 도시된 컴퓨팅 디바이스의 구성은 간략화 하여 나타낸 예시일 뿐이다. 본 개시의 일 실시예에서 컴 퓨팅 디바이스는 컴퓨팅 디바이스의 컴퓨팅 환경을 수행하기 위한 다른 구성들이 포함될 수 있고, 개 시된 구성들 중 일부만이 컴퓨팅 디바이스를 구성할 수도 있다. 본 개시내용에서의 컴퓨팅 디바이스는 컴퓨팅 장치와 상호 교환 가능하게 사용될 수 있으며, 컴퓨팅 디바 이스는 임의의 형태의 서버 및 임의의 형태의 단말을 포괄하는 의미로 사용될 수 있다. 본 개시내용에서의 컴퓨팅 디바이스는 본 개시내용의 실시예들을 구현하기 위한 시스템을 구성하는 임의의 형태의 컴포넌트를 의미할 수 있다. 컴퓨팅 디바이스는 임의의 형태의 사용자 단말 또는 임의의 형태의 서버를 의미할 수 있다. 전술한 컴퓨팅 디바이스의 컴포넌트들은 예시적인 것으로 일부가 제외될 수 있거나 또는 추가 컴포넌트가 포함될 수도 있 다. 일례로, 전술한 컴퓨팅 디바이스가 사용자 단말을 포함하는 경우, 출력부(미도시) 및 입력부(미도시) 가 상기 컴퓨팅 디바이스의 범위 내에 포함될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 복수의 노드들과 통신하여 특정된 인공지능 기반의 모델의 복수의 노드 들에 대한 벤치마크를 관리 및/또는 수행하는 장치를 의미할 수 있다. 예를 들어, 컴퓨팅 디바이스는 Device Farm으로 지칭될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 사용자와 상호작용하여 학습 모델을 생성하고, 압축된 모델을 생성하고 그리고 모델의 디플로이를 위한 다운로드 데이터를 생성하는 장치를 의미할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 인공지능 기반의 모델의 복수의 노드들에 대한 벤치마크를 관 리 및/또는 수행하고, 사용자와 상호작용하여 학습 모델을 생성하고, 압축된 모델을 생성하고 그리고 모델의 디 플로이를 위한 다운로드 데이터를 생성하는 장치를 의미할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 입력된 데이터셋에 대한 모델링을 통해 학습 모델을 생성하고, 입력된 모델에 대한 압축을 통해 경량화 모델을 생성하고 그리고/또는 입력된 모델이 특정 노드에서 디플로이될 수 있 도록 다운로드 데이터를 생성하는 장치를 의미할 수도 있다. 본 개시내용에서, 디플로이(deploy) 또는 디플로이 먼트(deployment)는 소프트웨어(예컨대, 모델)를 이용 가능하게 하는 임의의 종류의 활동을 의미할 수 있다. 예 를 들어, 디플로이 또는 디플로이먼트는 모델 또는 노드의 특정 요구사항이나 특성에 따라 커스터마이징되는 전 반적인 과정으로 해석될 수 있다. 이러한 디플로이 또는 디플로이먼트에 대한 예시로, 릴리즈, 설치 및 활성화, 비활성화, 제거, 업데이트, 빌트인 업데이트, 각색 및/또는 버전 추적 등이 존재할 수 있다. 본 개시내용에서의 컴퓨팅 디바이스는 후술될 본 개시내용의 실시예들에 따른 기술적 특징들을 수행할 수 있다. 예를 들어, 컴퓨팅 디바이스는 벤치마크를 위해 입력된 인공지능 기반의 모델의 모델 타입 정보 및 벤치마 크의 대상이 되는 모델 타입을 식별하기 위한 타겟 타입 정보에 기초하여, 인공지능 기반의 모델을 컨버팅할지 여부를 결정하고, 상기 타겟 타입 정보에 기초하여 결정된 후보 노드들을 포함하는 후보 노드 리스트를 제공하 고, 상기 후보 노드 리스트 중 적어도 하나의 타겟 노드를 선택하는 입력 데이터에 기초하여, 상기 적어도 하나 의 타겟 노드를 결정하고, 그리고 상기 인공지능 기반의 모델의 컨버팅 여부에 따라 획득되는 타겟 모델을 상기 적어도 하나의 타겟 노드에서 실행함에 따라 획득되는 벤치마크 결과를 제공할 수 있다. 예를 들어, 컴퓨팅 디바이스는 추론(inference) 태스크 및 데이터셋을 포함하는 제 1 입력 데이터를 획득 하고, 추론 태스크에 대한 벤치마크의 대상이 되는 타겟 모델 및 상기 타겟 모델의 상기 추론 태스크가 실행될 적어도 하나의 타겟 노드를 결정하고 그리고 타겟 모델을 상기 적어도 하나의 타겟 노드에서 실행함에 따라 획 득되는 벤치마크 결과를 제공할 수 있다. 예를 들어, 컴퓨팅 디바이스는 인공지능 기반의 모델과 관련된 상이한 동작들을 수행하는 복수의 모듈들을 포함하는 다른 컴퓨팅 디바이스로부터, 다른 컴퓨팅 디바이스의 복수의 모듈들 중 어떤 모듈이 상기 컴퓨팅 디 바이스의 벤치마크 동작을 트리거링하는지를 나타내는 모듈 식별 정보를 수신하고, 그리고 상기 모듈 식별 정보에 기초하여 벤치마크 결과를 상기 다른 컴퓨팅 디바이스로 제공할 수 있다. 여기서 상기 모듈 식별 정보에 따라서 상기 다른 컴퓨팅 디바이스로 제공되는 상기 벤치마크 결과가 상이할 수 있다. 본 개시내용의 다른 실시예에서, 컴퓨팅 디바이스는 벤치마크를 수행한 결과를 다른 컴퓨팅 디바이스 또는 외부 엔티티로부터 획득할 수도 있다. 본 개시내용의 다른 실시예에서, 컴퓨팅 디바이스는 컨버팅을 수행 한 결과를 다른 컴퓨팅 디바이스 또는 외부 엔티티(예컨대, 컨버팅 디바이스)로부터 획득할 수도 있다. 일 실시예에서, 프로세서는 적어도 하나의 코어로 구성될 수 있으며, 컴퓨팅 디바이스의 중앙 처리 장치(CPU: central processing unit), 범용 그래픽 처리 장치 (GPGPU: general purpose graphics processing unit), 텐서 처리 장치(TPU: tensor processing unit) 등의 데이터 분석 및/또는 처리를 위한 프로세서를 포함 할 수 있다. 프로세서는 메모리에 저장된 컴퓨터 프로그램을 판독하여 본 개시내용의 일 실시예에 따라, 벤치마크 결과를 제공할 수 있다. 본 개시의 일 실시예에 따라 프로세서는 신경망의 학습을 위한 연산을 수행할 수도 있다. 프로세서는 딥러닝(DL: deep learning)에서 학습을 위한 입력 데이터의 처리, 입력 데이터에서의 피쳐 추출, 오차 계산, 역 전파(backpropagation)를 이용한 신경망의 가중치 업데이트 등의 신경망의 학습을 위한 계산을 수행할 수 있다. 프로세서의 CPU, GPGPU, 및 TPU 중 적어도 하나가 네트워크 함수의 학습을 처리할 수 있다. 예를 들어, CPU 와 GPGPU가 함께 네트워크 함수의 학습, 네트워크 함수를 이용한 데이터 분류를 처리할 수 있다. 또한, 본 개시의 일 실시예에서 복수의 컴퓨팅 디바이스들의 프로세서들을 함께 사용하여 네트워크 함수의 학습, 네트워 크 함수를 이용한 데이터 분류를 처리할 수도 있다. 또한, 본 개시의 일 실시예에 따른 컴퓨팅 디바이스에 서 수행되는 컴퓨터 프로그램은 CPU, GPGPU 또는 TPU 실행가능 프로그램일 수 있다. 추가적으로, 프로세서는 통상적으로 컴퓨팅 디바이스의 전반적인 동작을 처리할 수 있다. 예를 들어, 프로세서는 컴퓨팅 디바이스에 포함된 구성요소들을 통해 입력 또는 출력되는 데이터, 정보, 또는 신 호 등을 처리하거나 저장부에 저장된 응용 프로그램을 구동함으로써, 사용자에게 적절한 정보 또는 기능을 제공 할 수 있다. 본 개시의 일 실시예에 따르면, 메모리는 프로세서가 생성하거나 결정한 임의의 형태의 정보 및 컴퓨 팅 디바이스가 수신한 임의의 형태의 정보를 저장할 수 있다. 본 개시의 일 실시예에 따르면, 메모리(13 0)는 프로세서가 본 개시내용의 실시예들에 따른 동작을 수행하도록 하는 컴퓨터 소프트웨어를 저장하는 저장매체 일 수 있다. 따라서, 메모리는 본 개시내용에 실시예들을 수행하는 데 필요한 소프트웨어 코드, 코드의 실행 대상이 되는 데이터, 코드의 실행 결과를 저장하기 위한 컴퓨터 판독 매체들을 의미할 수 있다. 본 개시의 일 실시예에 따르면, 메모리는 임의의 타입의 저장 매체를 의미할 수 있다 예를 들어, 메모리 는 플래시 메모리 타입(flash memory type), 하드디스크 타입(hard disk type), 멀티미디어 카드 마이크 로 타입(multimedia card micro type), 카드 타입의 메모리(예를 들어 SD 또는 XD 메모리 등), 램(Random Access Memory, RAM), SRAM(Static Random Access Memory), 롬(Read-Only Memory, ROM), EEPROM(Electrically Erasable Programmable Read-Only Memory), PROM(Programmable Read-Only Memory), 자기 메모리, 자기 디스크, 광디스크 중 적어도 하나의 타입의 저장매체를 포함할 수 있다. 컴퓨팅 디바이스는 인터넷 (internet) 상에서 상기 메모리의 저장 기능을 수행하는 웹 스토리지(web storage)와 관련되어 동작할 수 도 있다. 전술한 메모리에 대한 기재는 예시일 뿐, 본 개시내용에서 사용되는 메모리는 전술한 예시들로 제한되지 않는다. 본 개시내용에서의 통신부(미도시)는 유선 및 무선 등과 같은 그 통신 양태를 가리지 않고 구성될 수 있으며, 단거리 통신망(PAN: Personal Area Network), 근거리 통신망(WAN: Wide Area Network) 등 다양한 통신망으로 구성될 수 있다. 또한, 상기 네트워크부 공지의 월드와이드웹(WWW: World Wide Web) 기반으로 동작할 수 있으며, 적외선(IrDA: Infrared Data Association) 또는 블루투스(Bluetooth)와 같이 단거리 통신에 이용되는 무선 전송 기술을 이용할 수도 있다. 본 개시내용에서의 컴퓨팅 디바이스는 임의의 형태의 사용자 단말 및/또는 임의의 형태의 서버를 포함할 수 있다. 따라서, 본 개시내용의 실시예들은 서버 및/또는 사용자 단말에 의해 수행될 수 있다. 일 실시예에서, 사용자 단말은, 서버 또는 다른 컴퓨팅 디바이스와 상호작용 가능한 임의의 형태의 단말을 포함 할 수 있다. 사용자 단말은 예를 들어, 휴대폰, 스마트 폰(smart phone), 노트북 컴퓨터(laptop computer), PDA(personal digital assistants), 슬레이트 PC(slate PC), 태블릿 PC(tablet PC) 및 울트라북(ultrabook)을 포함할 수 있다. 일 실시예에서, 서버는 예를 들어, 마이크로프로세서, 메인프레임 컴퓨터, 디지털 프로세서, 휴대용 디바이스 및 디바이스 제어기 등과 같은 임의의 타입의 컴퓨팅 시스템 또는 컴퓨팅 디바이스를 포함할 수 있다. 일 실시예에서, 서버는 벤치마크 결과, 후보 노드 리스트, 노드들의 성능 정보, 노드와 모델 간의 레이턴시 정 보 및/또는 컨버팅 결과 정보 등을 저장 및 관리할 수 있다. 서버는 벤치마크 결과, 후보 노드 리스트, 노드들 의 성능 정보, 노드와 모델 간의 레이턴시 정보 및/또는 컨버팅 결과 정보 등을 저장하기 위한 저장부(미도시) 를 포함할 수 있다. 이러한 저장부는 서버내에 포함되거나 혹은 서버의 관리 하에 존재할 수 있다. 다른 예시로, 저장부는 서버 외부에 존재하여 서버와 통신가능한 형태로 구현될 수도 있다. 이 경우 서버와는 상이한 다른 외부 서버에 의해 저장부가 관리 및 제어될 수 있다. 다른 예시로, 저장부는 서버 외부에 존재하여 서버와 통신가능한 형태로 구현될 수도 있다. 이 경우 서버와는 상이한 다른 외부 서버에 의해 저장부가 관리 및 제어될 수 있다. 도 2는 본 개시내용의 일 실시예에 따른 인공지능 기반의 모델의 예시적인 구조를 도시한다. 본 개시내용에 걸쳐, 모델, 인공지능 모델, 인공지능 기반의 모델, 연산 모델, 신경망, 네트워크 함수, 뉴럴 네 트워크(neural network)는 상호 교환 가능하게 사용될 수 있다. 본 개시내용에서의 인공지능 기반의 모델은 객체 세그멘테이션, 객체 검출 및/또는 객체 분류 등의 이미지 처리 를 위한 모델, 데이터 예측, 텍스트 의미 추론 및/또는 데이터 분류 등의 텍스트 처리를 위한 모델 등 다양한 도메인에서 활용 가능한 모델을 포함할 수 있다. 신경망은 일반적으로 노드라 지칭될 수 있는 상호 연결된 계산 단위들의 집합으로 구성될 수 있다. 이러한 노드 들은 뉴런(neuron)들로 지칭될 수도 있다. 신경망은 적어도 하나 이상의 노드들을 포함하여 구성된다. 신경망들 을 구성하는 노드(또는 뉴런)들은 하나 이상의 링크에 의해 상호 연결될 수 있다. 인공지능 기반의 모델 내에서의 노드는 신경망을 구성하는 컴포넌트를 의미하도록 사용될 수 있으며, 예를 들어 신경망 내에서의 노드는 뉴런과 대응될 수 있다. 신경망 내에서, 링크를 통해 연결된 하나 이상의 노드들은 상대적으로 입력 노드 및 출력 노드의 관계를 형성할 수 있다. 입력 노드 및 출력 노드의 개념은 상대적인 것으로서, 하나의 노드에 대하여 출력 노드 관계에 있는 임의의 노드는 다른 노드와의 관계에서 입력 노드 관계에 있을 수 있으며, 그 역도 성립할 수 있다. 상술한 바 와 같이, 입력 노드 대 출력 노드 관계는 링크를 중심으로 생성될 수 있다. 하나의 입력 노드에 하나 이상의 출 력 노드가 링크를 통해 연결될 수 있으며, 그 역도 성립할 수 있다. 하나의 링크를 통해 연결된 입력 노드 및 출력 노드 관계에서, 출력 노드의 데이터는 입력 노드에 입력된 데이 터에 기초하여 그 값이 결정될 수 있다. 여기서 입력 노드와 출력 노드를 상호 연결하는 링크는 가중치(weigh t)를 가질 수 있다. 가중치는 가변적일 수 있으며, 신경망이 원하는 기능을 수행하기 위해, 사용자 또는 알고리 즘에 의해 가변 될 수 있다. 예를 들어, 하나의 출력 노드에 하나 이상의 입력 노드가 각각의 링크에 의해 상호 연결된 경우, 출력 노드는 상기 출력 노드와 연결된 입력 노드들에 입력된 값들 및 각각의 입력 노드들에 대응 하는 링크에 설정된 가중치에 기초하여 출력 노드 값을 결정할 수 있다. 상술한 바와 같이, 신경망은 하나 이상의 노드들이 하나 이상의 링크를 통해 상호 연결되어 신경망 내에서 입력 노드 및 출력 노드 관계를 형성한다. 신경망 내에서 노드들과 링크들의 개수 및 노드들과 링크들 사이의 연관관 계, 링크들 각각에 부여된 가중치의 값에 따라, 신경망의 특성이 결정될 수 있다. 예를 들어, 동일한 개수의 노 드 및 링크들이 존재하고, 링크들의 가중치 값이 상이한 두 신경망이 존재하는 경우, 두 개의 신경망들은 서로 상이한 것으로 인식될 수 있다. 신경망은 하나 이상의 노드들의 집합으로 구성될 수 있다. 신경망을 구성하는 노드들의 부분 집합은 레이어 (layer)를 구성할 수 있다. 신경망을 구성하는 노드들 중 일부는, 최초 입력 노드로부터의 거리들에 기초하여, 하나의 레이어(layer)를 구성할 수 있다. 예를 들어, 최초 입력 노드로부터 거리가 n인 노드들의 집합은, n 레 이어를 구성할 수 있다. 최초 입력 노드로부터 거리는, 최초 입력 노드로부터 해당 노드까지 도달하기 위해 거 쳐야 하는 링크들의 최소 개수에 의해 정의될 수 있다. 그러나, 이러한 레이어의 정의는 설명을 위한 임의적인 것으로서, 신경망 내에서 레이어의 차수는 상술한 것과 상이한 방법으로 정의될 수 있다. 예를 들어, 노드들의 레이어는 최종 출력 노드로부터 거리에 의해 정의될 수도 있다. 본 개시내용의 일 실시예에서, 뉴런들 또는 노드들의 집합은 레이어라는 표현으로 정의될 수 있다. 최초 입력 노드는 신경망 내의 노드들 중 다른 노드들과의 관계에서 링크를 거치지 않고 데이터가 직접 입력되 는 하나 이상의 노드들을 의미할 수 있다. 또는, 신경망 네트워크 내에서, 링크를 기준으로 한 노드 간의 관계 에 있어서, 링크로 연결된 다른 입력 노드들을 가지지 않는 노드들을 의미할 수 있다. 이와 유사하게, 최종 출 력 노드는 신경망 내의 노드들 중 다른 노드들과의 관계에서, 출력 노드를 가지지 않는 하나 이상의 노드들을 의미할 수 있다. 또한, 히든 노드는 최초 입력 노드 및 최후 출력 노드가 아닌 신경망을 구성하는 노드들을 의 미할 수 있다. 본 개시의 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수와 동일할 수 있 으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 감소하다가 다시 증가하는 형태의 신경망일 수 있다. 또한, 본 개시의 다른 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수 보다 적을 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 감소하는 형태의 신경망일 수 있다. 또한, 본 개시의 또 다른 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수보다 많을 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 증가하는 형태의 신경망일 수 있다. 본 개시의 또 다른 일 실시예에 따른 신경망은 상술한 신경망들의 조합된 형태의 신경망일 수 있다. 딥 뉴럴 네트워크(DNN: deep neural network, 심층신경망)는 입력 레이어와 출력 레이어 외에 복수의 히든 레이 어를 포함하는 신경망을 의미할 수 있다. 딥 뉴럴 네트워크를 이용하면 데이터의 잠재적인 구조(latent structures)를 파악할 수 있다. 즉, 사진, 글, 비디오, 음성, 단백질 시퀀스 구조, 유전자 시퀀스 구조, 펩타이 드 서열의 구조, 음악의 잠재적인 구조(예를 들어, 어떤 물체가 사진에 있는지, 글의 내용과 감정이 무엇인지, 음성의 내용과 감정이 무엇인지 등), 및/또는 펩타이드와 MHC 간의 결합 친화도를 파악할 수 있다. 딥 뉴럴 네 트워크는 컨볼루션 뉴럴 네트워크(CNN: convolutional neural network), 리커런트 뉴럴 네트워크(RNN: recurrent neural network), 오토 인코더(auto encoder), GAN(Generative Adversarial Networks), 제한 볼츠 만 머신(RBM: restricted boltzmann machine), 심층 신뢰 네트워크(DBN: deep belief network), Q 네트워크, U 네트워크, 샴 네트워크, 적대적 생성 네트워크(GAN: Generative Adversarial Network) 등을 포함할 수 있다. 전술한 딥 뉴럴 네트워크의 기재는 예시일 뿐이며 본 개시는 이에 제한되지 않는다. 본 개시내용의 인공지능 기반의 모델은 입력 레이어, 히든 레이어 및 출력 레이어를 포함하는 전술한 임의의 구 조의 네트워크 구조에 의해 표현될 수 있다. 본 개시내용의 클러스터링 모델에서 사용될 수 있는 뉴럴 네트워크는 지도 학습(supervised learning), 비지도 학습(unsupervised learning), 반지도학습(semi supervised learning), 또는 강화학습(reinforcement learning) 중 적어도 하나의 방식으로 학습될 수 있다. 뉴럴 네트워크의 학습은 뉴럴 네트워크가 특정한 동작을 수행하기 위한 지식을 뉴럴 네트워크에 적용하는 과정일 수 있다. 뉴럴 네트워크는 출력의 오류를 최소화하는 방향으로 학습될 수 있다. 뉴럴 네트워크의 학습에서 반복적으로 학 습 데이터를 뉴럴 네트워크에 입력시키고 학습 데이터에 대한 뉴럴 네트워크의 출력과 타겟의 에러를 계산하고, 에러를 줄이기 위한 방향으로 뉴럴 네트워크의 에러를 뉴럴 네트워크의 출력 레이어에서부터 입력 레이어 방향 으로 역전파(backpropagation)하여 뉴럴 네트워크의 각 노드의 가중치를 업데이트 하는 과정이다. 지도 학습의 경우 각각의 학습 데이터에 정답이 라벨링되어있는 학습 데이터를 사용하며(즉, 라벨링된 학습 데이터), 비지도 학습의 경우는 각각의 학습 데이터에 정답이 라벨링되어 있지 않을 수 있다. 즉, 예를 들어 데이터 분류에 관한 지도 학습의 경우의 학습 데이터는 학습 데이터 각각에 카테고리가 라벨링 된 데이터 일 수 있다. 라벨링된 학 습 데이터가 뉴럴 네트워크에 입력되고, 뉴럴 네트워크의 출력(카테고리)과 학습 데이터의 라벨을 비교함으로써 오류(error)가 계산될 수 있다. 다른 예로, 데이터 분류에 관한 비지도 학습의 경우 입력인 학습 데이터가 뉴럴 네트워크 출력과 비교됨으로써 오류가 계산될 수 있다. 계산된 오류는 뉴럴 네트워크에서 역방향(즉, 출력 레이 어에서 입력 레이어 방향)으로 역전파 되며, 역전파에 따라 뉴럴 네트워크의 각 레이어의 각 노드들의 연결 가 중치가 업데이트 될 수 있다. 업데이트 되는 각 노드의 연결 가중치는 학습률(learning rate)에 따라 변화량이 결정될 수 있다. 입력 데이터에 대한 뉴럴 네트워크의 계산과 에러의 역전파는 학습 사이클(epoch)을 구성할 수 있다. 학습률은 뉴럴 네트워크의 학습 사이클의 반복 횟수에 따라 상이하게 적용될 수 있다. 예를 들어, 뉴럴 네트워크의 학습 초기에는 높은 학습률을 사용하여 뉴럴 네트워크가 빠르게 일정 수준의 성능을 확보하도록 하 여 효율성을 높이고, 학습 후기에는 낮은 학습률을 사용하여 정확도를 높일 수 있다. 뉴럴 네트워크의 학습에서 일반적으로 학습 데이터는 실제 데이터(즉, 학습된 뉴럴 네트워크를 이용하여 처리하 고자 하는 데이터)의 부분집합일 수 있으며, 따라서, 학습 데이터에 대한 오류는 감소하나 실제 데이터에 대해 서는 오류가 증가하는 학습 사이클이 존재할 수 있다. 과적합(overfitting)은 이와 같이 학습 데이터에 과하게 학습하여 실제 데이터에 대한 오류가 증가하는 현상이다. 예를 들어, 노란색 고양이를 보여 고양이를 학습한 뉴 럴 네트워크가 노란색 이외의 고양이를 보고는 고양이임을 인식하지 못하는 현상이 과적합의 일종일 수 있다. 과적합은 머신러닝 알고리즘의 오류를 증가시키는 원인으로 작용할 수 있다. 이러한 과적합을 막기 위하여 다양 한 최적화 방법이 사용될 수 있다. 과적합을 막기 위해서는 학습 데이터를 증가시키거나, 레귤라리제이션 (regularization), 학습의 과정에서 네트워크의 노드 일부를 비활성화하는 드롭아웃(dropout), 배치 정규화 레 이어(batch normalization layer)의 활용 등의 방법이 적용될 수 있다. 본 개시의 일 실시예에 따라 벤치마크 결과 및/또는 인공지능 기반의 모델을 포함하는 데이터 구조를 저장한 컴 퓨터 판독가능 매체가 개시된다. 전술한 데이터 구조는 본 개시내용에서의 저장부(미도시)에 저장될 수 있으며, 프로세서에 의해 실행될 수 있으며 그리고 통신부(미도시)에 의해 송수신될 수 있다.데이터 구조는 데이터에 효율적인 접근 및 수정을 가능하게 하는 데이터의 조직, 관리, 저장을 의미할 수 있다. 데이터 구조는 특정 문제(예를 들어, 최단 시간으로 데이터 검색, 데이터 저장, 데이터 수정) 해결을 위한 데이 터의 조직을 의미할 수 있다. 데이터 구조는 특정한 데이터 처리 기능을 지원하도록 설계된, 데이터 요소들 간 의 물리적이거나 논리적인 관계로 정의될 수도 있다. 데이터 요소들 간의 논리적인 관계는 사용자 정의 데이터 요소들 간의 연결관계를 포함할 수 있다. 데이터 요소들 간의 물리적인 관계는 컴퓨터 판독가능 저장매체(예를 들어, 영구 저장 장치)에 물리적으로 저장되어 있는 데이터 요소들 간의 실제 관계를 포함할 수 있다. 데이터 구조는 구체적으로 데이터의 집합, 데이터 간의 관계, 데이터에 적용할 수 있는 함수 또는 명령어를 포함할 수 있다. 효과적으로 설계된 데이터 구조를 통해 컴퓨팅 디바이스는 컴퓨팅 디바이스의 자원을 최소한으로 사용하 면서 연산을 수행할 수 있다. 구체적으로 컴퓨팅 디바이스는 효과적으로 설계된 데이터 구조를 통해 연산, 읽기, 삽입, 삭제, 비교, 교환, 검색의 효율성을 높일 수 있다. 데이터 구조는 데이터 구조의 형태에 따라 선형 데이터 구조와 비선형 데이터 구조로 구분될 수 있다. 선형 데 이터 구조는 하나의 데이터 뒤에 하나의 데이터만이 연결되는 구조일 수 있다. 선형 데이터 구조는 리스트 (List), 스택(Stack), 큐(Queue), 데크(Deque)를 포함할 수 있다. 리스트는 내부적으로 순서가 존재하는 일련의 데이터 집합을 의미할 수 있다. 리스트는 연결 리스트(Linked List)를 포함할 수 있다. 연결 리스트는 각각의 데이터가 포인터를 가지고 한 줄로 연결되어 있는 방식으로 데이터가 연결된 데이터 구조일 수 있다. 연결 리스 트에서 포인터는 다음이나 이전 데이터와의 연결 정보를 포함할 수 있다. 연결 리스트는 형태에 따라 단일 연결 리스트, 이중 연결 리스트, 원형 연결 리스트로 표현될 수 있다. 스택은 제한적으로 데이터에 접근할 수 있는 데이터 나열 구조일 수 있다. 스택은 데이터 구조의 한 쪽 끝에서만 데이터를 처리(예를 들어, 삽입 또는 삭 제)할 수 있는 선형 데이터 구조일 수 있다. 스택에 저장된 데이터는 늦게 들어갈수록 빨리 나오는 데이터 구조 (LIFO-Last in First Out)일 수 있다. 큐는 제한적으로 데이터에 접근할 수 있는 데이터 나열 구조로서, 스택과 달리 늦게 저장된 데이터일수록 늦게 나오는 데이터 구조(FIFO-First in First Out)일 수 있다. 데크는 데이터 구조의 양 쪽 끝에서 데이터를 처리할 수 있는 데이터 구조일 수 있다. 비선형 데이터 구조는 하나의 데이터 뒤에 복수개의 데이터가 연결되는 구조일 수 있다. 비선형 데이터 구조는 그래프(Graph) 데이터 구조를 포함할 수 있다. 그래프 데이터 구조는 정점(Vertex)과 간선(Edge)으로 정의될 수 있으며 간선은 서로 다른 두개의 정점을 연결하는 선을 포함할 수 있다. 그래프 데이터 구조 트리(Tree) 데이터 구조를 포함할 수 있다. 트리 데이터 구조는 트리에 포함된 복수개의 정점 중에서 서로 다른 두개의 정점을 연 결시키는 경로가 하나인 데이터 구조일 수 있다. 즉 그래프 데이터 구조에서 루프(loop)를 형성하지 않는 데이 터 구조일 수 있다. 데이터 구조는 신경망을 포함할 수 있다. 그리고 신경망을 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장 될 수 있다. 신경망을 포함한 데이터 구조는 또한 신경망에 의한 처리를 위하여 전처리된 데이터, 신경망에 입 력되는 데이터, 신경망의 가중치, 신경망의 하이퍼 파라미터, 신경망으로부터 획득한 데이터, 신경망의 각 노드 또는 레이어와 연관된 활성 함수, 신경망의 학습을 위한 손실 함수 등을 포함할 수 있다. 신경망을 포함한 데이 터 구조는 상기 개시된 구성들 중 임의의 구성 요소들을 포함할 수 있다. 즉 신경망을 포함한 데이터 구조는 신 경망에 의한 처리를 위하여 전처리된 데이터, 신경망에 입력되는 데이터, 신경망의 가중치, 신경망의 하이퍼 파 라미터, 신경망으로부터 획득한 데이터, 신경망의 각 노드 또는 레이어와 연관된 활성 함수, 신경망의 학습을 위한 손실 함수 등 전부 또는 이들의 임의의 조합을 포함하여 구성될 수 있다. 전술한 구성들 이외에도, 신경망 을 포함한 데이터 구조는 신경망의 특성을 결정하는 임의의 다른 정보를 포함할 수 있다. 또한, 데이터 구조는 신경망의 연산 과정에 사용되거나 발생되는 모든 형태의 데이터를 포함할 수 있으며 전술한 사항에 제한되는 것 은 아니다. 컴퓨터 판독가능 매체는 컴퓨터 판독가능 기록 매체 및/또는 컴퓨터 판독가능 전송 매체를 포함할 수 있다. 신경망은 일반적으로 노드라 지칭될 수 있는 상호 연결된 계산 단위들의 집합으로 구성될 수 있다. 이 러한 노드들은 뉴런(neuron)들로 지칭될 수도 있다. 신경망은 적어도 하나 이상의 노드들을 포함하여 구성된다. 데이터 구조는 신경망에 입력되는 데이터를 포함할 수 있다. 신경망에 입력되는 데이터를 포함하는 데이터 구조 는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망에 입력되는 데이터는 신경망 학습 과정에서 입력되는 학습 데이터 및/또는 학습이 완료된 신경망에 입력되는 입력 데이터를 포함할 수 있다. 신경망에 입력되는 데이터는 전처리(pre-processing)를 거친 데이터 및/또는 전처리 대상이 되는 데이터를 포함할 수 있다. 전처리는 데이터 를 신경망에 입력시키기 위한 데이터 처리 과정을 포함할 수 있다. 따라서 데이터 구조는 전처리 대상이 되는 데이터 및 전처리로 발생되는 데이터를 포함할 수 있다. 전술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한 되지 않는다. 데이터 구조는 신경망의 가중치를 포함할 수 있다. (본 명세서에서 가중치, 파라미터는 동일한 의미로 사용될 수 있다.) 그리고 신경망의 가중치를 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망은 복수개의 가중치를 포함할 수 있다. 가중치는 가변적일 수 있으며, 신경망이 원하는 기능을 수행하기 위해, 사 용자 또는 알고리즘에 의해 가변 될 수 있다. 예를 들어, 하나의 출력 노드에 하나 이상의 입력 노드가 각각의 링크에 의해 상호 연결된 경우, 출력 노드는 상기 출력 노드와 연결된 입력 노드들에 입력된 값들 및 각각의 입 력 노드들에 대응하는 링크에 설정된 가중치에 기초하여 출력 노드에서 출력되는 데이터 값을 결정할 수 있다. 전술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한되지 않는다. 제한이 아닌 예로서, 가중치는 신경망 학습 과정에서 가변되는 가중치 및/또는 신경망 학습이 완료된 가중치를 포함할 수 있다. 신경망 학습 과정에서 가변되는 가중치는 학습 사이클이 시작되는 시점의 가중치 및/또는 학습 사이클 동안 가변되는 가중치를 포함할 수 있다. 신경망 학습이 완료된 가중치는 학습 사이클이 완료된 가중치 를 포함할 수 있다. 따라서 신경망의 가중치를 포함한 데이터 구조는 신경망 학습 과정에서 가변되는 가중치 및 /또는 신경망 학습이 완료된 가중치를 포함한 데이터 구조를 포함할 수 있다. 그러므로 상술한 가중치 및/또는 각 가중치의 조합은 신경망의 가중치를 포함한 데이터 구조에 포함되는 것으로 한다. 전술한 데이터 구조는 예 시일 뿐 본 개시는 이에 제한되지 않는다. 신경망의 가중치를 포함한 데이터 구조는 직렬화(serialization) 과정을 거친 후 컴퓨터 판독가능 저장 매체(예 를 들어, 메모리, 하드 디스크)에 저장될 수 있다. 직렬화는 데이터 구조를 동일하거나 다른 컴퓨팅 디바이스에 저장하고 나중에 다시 재구성하여 사용할 수 있는 형태로 변환하는 과정일 수 있다. 컴퓨팅 디바이스는 데이터 구조를 직렬화하여 네트워크를 통해 데이터를 송수신할 수 있다. 직렬화된 신경망의 가중치를 포함한 데이터 구 조는 역직렬화(deserialization)를 통해 동일한 컴퓨팅 디바이스 또는 다른 컴퓨팅 디바이스에서 재구성될 수 있다. 신경망의 가중치를 포함한 데이터 구조는 직렬화에 한정되는 것은 아니다. 나아가 신경망의 가중치를 포 함한 데이터 구조는 컴퓨팅 디바이스의 자원을 최소한으로 사용하면서 연산의 효율을 높이기 위한 데이터 구조 (예를 들어, 비선형 데이터 구조에서 B-Tree, R-Tree, Trie, m-way search tree, AVL tree, Red-Black Tree)를 포함할 수 있다. 전술한 사항은 예시일 뿐 본 개시는 이에 제한되지 않는다. 데이터 구조는 신경망의 하이퍼 파라미터(Hyper-parameter)를 포함할 수 있다. 그리고 신경망의 하이퍼 파라미 터를 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 하이퍼 파라미터는 사용자에 의해 가변되 는 변수일 수 있다. 하이퍼 파라미터는 예를 들어, 학습률(learning rate), 비용 함수(cost function), 학습 사이클 반복 횟수, 가중치 초기화(Weight initialization)(예를 들어, 가중치 초기화 대상이 되는 가중치 값의 범위 설정), Hidden Unit 개수(예를 들어, 히든 레이어의 개수, 히든 레이어의 노드 수)를 포함할 수 있다. 전 술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한되지 않는다. 도 3은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 시스템에 대한 예시적인 개략도를 도시한다. 일 실시예에서, 제 2 컴퓨팅 디바이스는 인공지능 기반의 모델과 관련된 상이한 동작들을 수행하는 복수의 모듈들을 포함할 수 있다. 예를 들어, 제 2 컴퓨팅 디바이스는 제 1 모듈, 제 2 모듈 및 제 3 모듈을 포함할 수 있다. 일 실시예에서, 제 1 모듈은 입력된 데이터셋을 기초로 하여 학습 모델을 생 성할 수 있다. 제 2 모듈은 입력된 모델을 압축함으로써 경량화 모델을 생성할 수 있다. 제 3 모듈은 입력된 모델을 적어도 하나의 타겟 노드에 디플로이하기 위한 다운로드 데이터를 생성할 수 있다. 도 3의 예시 에서는 3개의 모듈들을 예로 들었으나, 구현의 양태에 따라 다양한 개수의 모듈들이 제 2 컴퓨팅 디바이스(32 0)에 포함될 수 있다는 점은 당업자에 의해 이해될 것이다. 일 실시예에서, 제 1 컴퓨팅 디바이스 및 제 2 컴퓨팅 디바이스는 상호작용하여 사용자에게 벤치마크 결과를 제공할 수 있다. 예를 들어, 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스의 요청에 응답하 여 제 2 컴퓨팅 디바이스의 동작에 필요한 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 일 실시예에서, 도 3에서는 제 1 컴퓨팅 디바이스가 제 2 컴퓨팅 디바이스의 외부에 있는 별도의 엔 티티로서 표현되었지만, 구현 양태에 따라서 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스의 통합된 형태의 모듈로서 동작될 수도 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스이외의 다른 엔티티로부터의 벤치마크 와 관련된 요청을 수신하고 이에 응답하여 벤치마크 결과를 제공할 수도 있다. 예를 들어, 제 1 컴퓨팅 디바이 스는 사용자에 의해 준비된 인공지능 기반의 모델(예컨대, 사용자에 의해 제작된 학습 모델 또는 압축 모 델)의 벤치마크를 위한 결과를 제공할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스의 복수의 모듈들 중 어떤 모듈이 제 1 컴퓨팅 디바이스의 벤치마크 동작을 트리거링하는지를 나타내는 모듈 식별 정보를 수신하고 그리고 상기 모듈 식별 정보에 기초하여 벤치마크 결과를 상기 제 2 컴퓨팅 디바이스로 제공할 수 있다. 모듈 식별 정 보에 따라서 제 2 컴퓨팅 디바이스로 제공되는 상기 벤치마크 결과가 상이할 수 있다. 예를 들어, 제 1 컴 퓨팅 디바이스는 모듈 식별 정보가 제 1 모듈을 나타내는 경우, 입력된 모델 전체를 대상으로 한 성 능 정보를 제 2 컴퓨팅 디바이스로 제공하고, 모듈 식별 정보가 제 2 모듈을 나타내는 경우, 입력된 모델 전체를 대상으로 한 성능 정보를 제 2 컴퓨팅 디바이스로 제공하고 그리고 상기 입력된 모델의 블록 단위로 성능 정보를 제공할 수 있다. 다른 예시로, 제 1 컴퓨팅 디바이스는 모듈 식별 정보가 제 1 모듈 을 나타내는 경우, 입력된 데이터셋에 대응되는 학습 모델 또는 컨버팅된 학습 모델을 실행시킬 타겟 노드 를 결정하기 위한 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공하고 그리고 모듈 식별 정보가 제 2 모듈 을 나타내는 경우, 입력된 모델에 대응되는 경량화 모델을 생성하기 위해 사용되는 압축 설정 데이터를 포 함하는 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 복수의 노드들을 관리하는 엔티티에 대응될 수 있다. 제 1 컴퓨팅 디바이스는 제 1 노드, 제 2 노드… 및 제 N 노드를 포함하는 노드 리스트에 포함된 노드 들에 대한 벤치마크를 수행할 수 있다. 도 3에서는 제 1 노드, 제 2 노드… 및 제 N 노드가 제 1 컴퓨팅 디바이스에 포함되는 것으로 예시되었으나, 구현 양태에 따라 제 1 노드, 제 2 노드… 및 제 N 노드는 제 1 컴퓨팅 디바이스 외부에 존재하여 제 1 컴퓨팅 디바이스와의 통신을 통해 상호작용 가능할 수도 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 사용자로부터의 요청 및/또는 제 2 컴퓨팅 디바이스로부터의 요청에 응답하여, 복수의 노드들에 대한 벤치마크 결과를 생성할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이 스는 사용자로부터의 요청 및/또는 제 2 컴퓨팅 디바이스로부터의 요청에 응답하여, 컨버팅 디바이스 와 상호작용함으로써, 복수의 노드들에 대한 벤치마크 결과를 생성할 수 있다. 일 실시예에서, 컨버팅 디바이스는 제 1 모델을 제 2 모델로 변환하기 위한 디바이스이다. 도 3에서 예시 되는 바와 같이, 컨버팅 디바이스는 제 1 컴퓨팅 디바이스 및 제 2 컴퓨팅 디바이스와 별도의 엔티티로 존재할 수 있거나 또는 제 1 컴퓨팅 디바이스 및/또는 제 2 컴퓨팅 디바이스에 포함된 형태 로 동작할 수도 있다. 일 실시예에서, 벤치마크 결과는 인공지능 모델을 타겟 노드에서 실행(예컨대, 추론)한 결과를 포함할 수 있다. 일례로, 벤치마크 결과는 인공지능 모델이 타겟 노드에서 실행되었을 때의 성능 측정 결과를 포함할 수 있다. 다른 예시로, 벤치마크 결과는 컨버팅된 인공지능 모델이 타겟 노드에서 실행되었을 때의 성능 측정 결과를 포 함할 수 있다. 일 실시예에서, 벤치마크 결과는 다양한 목적을 가지고 다양한 형태로 사용될 수 있다. 예를 들어, 벤치마크 결 과는 준비된 모델이 실행될 타겟 노드를 결정하는데 사용될 수 있다. 예를 들어, 벤치마크 결과는 입력된 모델 에 대응되는 후보 노드 리스트를 생성하는데 사용될 수 있다. 예를 들어, 벤치마크 결과는 준비된 모델에 대한 최적화 또는 압축을 위해 사용될 수 있다. 예를 들어, 벤치마크 결과는 준비된 모델을 타겟 노드에서 디플로이 하기위해 사용될 수 있다. 도 4는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 순서도를 예시적으로 도시한다. 일 실시예에서, 도 4에서 도시되는 방법은 컴퓨팅 디바이스에서 수행될 수 있다. 일례로, 도 4에서 도시되 는 방법은 제 1 컴퓨팅 디바이스에 의해 수행될 수 있다. 다른 예시로, 도 4에서 도시되는 방법은 제 1 컴 퓨팅 디바이스 및 제 2 컴퓨팅 디바이스를 포괄하는 컴퓨팅 디바이스에 의해 수행될 수 있다. 아래에서는 도 4의 단계들이 컴퓨팅 디바이스에 의해 수행되는 예시를 구체적으로 설명하기로 한다. 구현 양태에 따라서 도 4에서 도시되는 단계들 중 일부가 생략되거나 추가적인 단계가 포함될 수 있다는 점은 당업자 에 의해 이해될 것이다. 일 실시예에서, 컴퓨팅 디바이스는 벤치마크를 위해 입력된 인공지능 기반의 모델의 모델 타입 정보 및 벤 치마크의 대상이 되는 모델 타입을 식별하기 위한 타겟 타입 정보를 획득할 수 있다. 컴퓨팅 디바이스는 특정 모델을 벤치마크하고자 하는 모델과 관련된 정보를 포함하는 입력 데이터를 수신 할 수 있다. 예를 들어, 상기 입력 데이터는 모델링이 이루어진 모델 파일 및 벤치마크를 하고자 하는 모델 타입에 대한 정보를 포함할 수 있다. 다른 예시로, 상기 입력 데이터는 모델링이 이루어진 모델 파일, 모델 파일 에 대응되는 모델 타입 정보를 포함할 수 있다. 다른 예시로, 상기 입력 데이터는 모델링이 이루어진 모델 파일, 모델 파일에 대응되는 모델 타입 정보 및 벤치마크를 하고자 하는 타겟 타입에 대한 정보를 포함할 수 있 다. 컴퓨팅 디바이스는 입력 데이터에 응답하여 모델의 벤치마크가 이루어질 노드를 선택하기 위한 정보를 제공할 수 있다. 일 실시예에서, 모델 타입 정보는 입력된 인공지능 기반의 모델을 식별하기 위한 임의의 형태의 정보를 포함할 수 있다. 예를 들어, 모델 타입 정보는 Tflite, Onnxruntime 및 Tensorrt 등과 같이 모델의 실행 환경을 나타내 는 정보를 포함할 수 있다. 예를 들어, 모델 타입 정보는 모델의 실행환경에 대한 라이브러리 정보 또는 소프트 웨어 버전 정보를 포함할 수도 있다. 이러한 예시에서 모델 타입 정보는 Tflite의 Python 3.7.3 및 pillow 5.4.1로 표현될 수 있다. 일 실시예에서, 벤치마크의 대상이 되는 타겟 타입 정보는 벤치마크를 수행하기 위한 인공지능 기반의 모델을 식별하기 위한 임의의 형태의 정보를 포함할 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 입력된 인공지능 모델로부터 대응되는 모델 타입 정보를 추출할 수 있다. 컴퓨팅 디바이스는 입력된 인공지능 모델(예컨대, 모델 파일)을 파싱(parsing)함으로써 모델의 실행환경 및/또는 라이브러리 정보를 획득할 수 있다. 컴퓨팅 디바이스는 추출된 모델 타입 정보 및 입력 된 타겟 타입 정보를 비교함으로써, 모델의 컨버팅 여부를 결정할 수 있다. 이러한 실시예에서, 입력된 인공지 능 기반의 모델의 모델 타입 정보는 모델 타입 정보를 정의하는 사용자 입력 없이, 상기 입력된 인공지능 기반 의 모델로부터 결정될 수 있다. 일 예시에서, 타겟 타입 정보는 입력된 인공지능 기반의 모델의 모델 타입 정보와 상이할 수 있다. 이러한 경우, 컴퓨팅 디바이스는 입력된 인공지능 기반의 모델이 타겟 타입 정보를 가질 수 있도록 컨버팅된 컨버 팅 결과를 획득할 수 있다. 타겟 타입 정보와 입력된 모델의 모델 타입 정보가 상이하다는 것은 모델의 실행환 경에 대한 정보 및/또는 실행환경에 대한 라이브러리 정보가 상이하다는 것을 의미할 수 있다. 일례로, 컨버팅 은 입력된 모델에 포함된 연산자를 타겟 타입 정보에 대응되도록 대체하는 것을 포함할 수 있다. 일례로, 컨버 팅은 입력된 모델의 라이브러리 정보 또는 소프트웨어 버전을 타겟 타입 정보에 대응되도록 변경하는 것을 포함 할 수 있다. 일례로, 컨버팅은 입력된 모델의 실행환경을 타겟 타입 정보에 대응되는 실행환경으로 변경하는 것 을 포함할 수 있다. 다른 예시로, 입력된 인공지능 기반의 모델의 모델 타입 정보와 타겟 타입 정보가 동일한 경우, 컴퓨팅 디바이 스는 컨버팅 동작을 수행하지 않고 입력된 인공지능 기반의 모델에 대한 벤치마크 결과를 생성할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 모델 타입 정보 및 타겟 타입 정보에 기초하여, 인공지능 기반의 모델 을 컨버팅할지 여부를 결정할 수 있다. 컴퓨팅 디바이스는 입력된 모델의 모델 타입 정보 및 타겟 타입 정보를 비교함으로써 인공지능 기반의 모 델을 컨버팅할지 여부를 결정할 수 있다. 컴퓨팅 디바이스는 입력된 인공지능 기반의 모델 타입 정보와 입 력된 타겟 타입 정보가 일치하는지 여부를 판단할 수 있다. 입력된 인공지능 기반의 모델 타입 정보와 입력된 타겟 타입 정보가 일치하지 않는 경우, 컴퓨팅 디바이스는 컨버팅 결과에 기반하여 벤치마크 결과를 생성 할 수 있다. 입력된 인공지능 기반의 모델 타입 정보와 입력된 타겟 타입 정보가 일치하는 경우, 컴퓨팅 디바이 스는 입력된 인공지능 기반의 모델을 타겟 노드에 실행시킴으로써 벤치마크 결과를 생성할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 모델 타입 정보와 타겟 타입 정보가 서로 상이한 경우, 인공지능 기반 의 모델을 타겟 타입 정보에 대응되도록 컨버팅할 것으로 결정하고 그리고 모델 타입 정보와 타겟 타입 정보가 서로 대응되는 경우, 인공지능 기반의 모델을 컨버팅 하지 않고 인공지능 기반의 모델을 벤치마크의 대상이 되 는 타겟 모델로 사용할 것으로 결정할 수 있다. 일 실시예에서, 컨버팅 여부에 대한 결정은, 모델에 대응되는 모델 타입 정보 및 타겟 타입 정보가 입력되는 것 에 응답하여 결정될 수 있다. 이에 따라 후보 노드 리스트를 생성 또는 획득할 때 컨버팅 여부에 대한 결정에 따라 컨버팅된 모델(또는 연산자)과 후보 노드들 각각에 대한 예상 성능 정보가 생성될 수 있다. 일 실시예에서, 예상 성능 정보는 과거 측정된 후보 노드들 각각에 대한 모델 또는 연산자 별 성능 정보를 기반으 로 결정된 성능과 관련된 예상 정보를 의미할 수 있다. 일례로, 예상 성능 정보는 예상 레이턴시 정보를 포함할 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 모델과 관련된 정보(예컨대, 모델 파일, 모델 파일에 대응되는 모델 타입 정보, 및/또는 타겟 타입 정보) 및 선택된 노드 정보에 기초하여 모델에 대한 컨버팅 여부를 결정할 수도 있다. 예를 들어, 컴퓨팅 디바이스는 결정된 모델이 선택된 노드에서 지원되는지 여부 또는 결정된 모델에 포함된 연산자가 선택된 노드에서 지원되는지 여부에 기초하여 컨버팅 여부를 결정할 수 있다. 예를 들 어, 결정된 모델이 선택된 노드에서 지원되지 않을 수 있다. 이러한 경우, 컴퓨팅 디바이스는 결정된 모델 에 대한 컨버팅 여부를 결정하거나 또는 결정된 모델에 포함된 연산자들 중 적어도 일부에 대한 컨버팅 여부를 결정할 수 있다. 다른 예시로, 제 1 컴퓨팅 디바이스(1000c)는 결정된 모델이 선택된 노드에서 지원되지 않는 경우, 결정된 모델에 대한 컨버팅이 필요하다고 결정하거나 또는 선택된 노드를 다른 노드로 변경할 것을 결정 할 수도 있다. 일 실시예에서, 컴퓨팅 디바이스는 타겟 타입 정보에 기초하여 결정된 후보 노드들을 포함하는 후보 노드 리스트를 제공할 수 있다. 일 실시예에서 후보 노드는 복수의 노드들 중 모델의 벤치마크의 대상이 되는 타겟 노드를 결정하기 위해 사용 될 수 있다. 후보 노드 리스트에 포함된 후보 노드들 중 입력 데이터에 기반하여 벤치마크가 이루어질 타겟 노 드가 결정될 수 있다. 본 개시내용의 일 실시예에 따라 후보 노드는 다양한 방식으로 결정될 수 있다. 일 실시예에서, 후보 노드는 컨 버팅 여부에 대한 결정 결과, 인공지능 기반의 모델(또는 모델 타입 정보) 및 타겟 타입 정보에 기초하여 결정 될 수 있다. 예를 들어, 컴퓨팅 디바이스의 관리 하에 놓여 있는 노드들 중에서, 입력된 인공지능 기반의 모델을 지원 할 수 있는 노드들이 후보 노드로 결정될 수 있다. 예를 들어, 컴퓨팅 디바이스의 관리 하에 놓여 있는 노 드들 중에서, 타겟 타입 정보에 대응되는 실행 환경을 지원할 수 있는 노드들이 후보 노드로 결정될 수 있다. 예를 들어, 타겟 타입 정보에 대응되는 실행 환경을 지원할 수 있는 노드들 중에서 인공지능 기반의 모델에 포 함된 제 1 연산자를 지원하는 실행 환경을 가지고 있는 제 1 노드들이 상기 후보 노드들로 결정될 수 있다. 일 례로, 컴퓨팅 디바이스는 입력받은 인공지능 기반의 모델에 포함된 연산자들을 추출할 수 있다. 타겟 타입 정보에 매칭되는 런타임을 가진 노드들 중에서 런타임은 매칭되지만 노드가 지원하는 런타임의 버전에서는 상기 추출된 연산자를 지원하지 않는 경우, 해당 런타임의 버전이 설치되어 있는 노드는 후보 노드에서 제외될 수 있 다. 예를 들어, 타겟 타입 정보에 대응되는 실행 환경을 가지는 노드들 중에서 인공지능 기반의 모델에 포함된 제 1 연산자를 지원하지는 않지만 상기 제 1 연산자를 대체할 수 있는 상기 제 1 연산자와 상이한 제 2 연산자를 지 원하는 실행 환경을 가지고 있는 제 2 노드들이 후보 노드들로 결정될 수 있다. 일례로, 컴퓨팅 디바이스 는 지원하지 않는 연산자를 대체할 수 있는 연산자가 존재하는 경우, 사용자에게 연산자의 대체 또는 변경을 요 청할 수 있으며, 사용자로부터 연산자 대체를 요청 받는 경우 컴퓨팅 디바이스는 해당 노드를 후보 노드에 포함시키고 그렇지 않은 경우 해당 노드를 후보 노드에서 제외시킬 수 있다. 예를 들어, 인공지능 기반의 모델의 크기를 초과하는 메모리 공간을 가지고 있는 제 3 노드들이 후보 노드들로 결정될 수 있다. 컴퓨팅 디바이스는 전술한 다양한 예시들에서 설명되는 후보 노드 결정 방식들을 조합함으로써, 후보 노드 리스트를 생성할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트를 벤치마크를 요청한 컴퓨팅 디바이스로 전달할 수 있다. 후보 노드 리스트 상에서의 사용자 선택에 따라서 벤치마크가 이루어질 타겟 노드가 결정될 수 있다. 일 실시예에서, 후보 노드 리스트는 후보 노드들 각각에 대한 식별 정보, 및 타겟 모델이 실행되는 경우 상기 후보 노드들 각각에 대한 예상 레이턴시 정보를 포함할 수 있다. 일 실시예에서, 예상 레이턴시 정보는 각 노드의 각 모델 별 예상되는 추론 시간을 포함할 수 있다. 예상 레이 턴시 정보의 값이 작을수록 추론의 시간이 짧을 수 있다는 점을 나타낼 수 있다. 따라서, 예상 레이턴시의 값이 인공지능 기반의 모델 및 노드의 조합에 대한 성능 지표로 해석될 수 있기 때문에, 컴퓨팅 디바이스는 예 상 레이턴시 정보의 크기를 기준으로 정렬된 후보 노드 리스트를 제공할 수 있다. 이러한 예시에서, 레이턴시 정보의 크기가 작은 순서대로 정렬된 후보 노드 리스트가 제공될 수 있다. 일 실시예에서, 후보 노드에 대한 식별 정보는 후보 노드에 대응되는 하드웨어 정보를 포함할 수 있다. 예를 들 어, 식별 정보는 하드웨어에 대응되는 제품명 뿐만 아니라, 설치된 실행환경 정보, 실행환경에 대한 라이브러리정보, 파워 모드(power mode) 정보, Fan 모드 정보, 현재 보드의 온도 정보 및/또는 현재 보드의 전력 사용량 정보를 포함할 수 있다. 일 실시예에서, 파워 모드 정보는 CPU 코어를 얼마나 사용하는지를 기준으로 결정될 수 있다. 예를 들어, CPU 코어를 전부 사용하는 경우 파워 모드 정보는 MAX로 결정될 것이고, 30W, 20W, 15W 및 10W 등과 같이 사용량을 정량적으로 표현하는 방식으로 결정될 수도 있다. 예를 들어, 파워 모드 정보의 정량적인 양이 클수록 레이턴시 가 적게 나올 수 있다. 다른 예시로 파워 모드가 MAX인 경우 파워 모드를 사용하지 않는 다른 노드에 비해 레이 턴시가 적게 나올 수 있다. 일 실시예에서, Fan 모드 정보는 Null, Quite 및 Cool 등과 같이 Fan의 강도를 나타내는 정보의 형태로 표현될 수 있다. 일례로, Fan 모드가 Quite인 경우, Fan 모드가 Null인 경우 보다 보드의 온도를 더 낮춰줄 수 있기 때 문에, 레이턴시가 적게 나올 가능성이 높다. 일례로, Fan 모드가 Cool 모드인 경우 다른 모드에 비해 보드의 온 도를 더 낮춰줄 수 있기 때문에, 레이턴시가 적게 나올 가능성이 높다. 일 실시예에서, 라이브러리 정보는 특정 노드에 설치된 실행 환경(예컨대 런타임) 정보가 설치되는데 필요한 라 이브러리 정보를 나타낼 수 있다. 노드의 특성에 따라 복수의 실행 환경들이 포함될 수 있으며, 이에 따라 라이 브러리 정보 또한 복수의 실행 환경들과 호환될 수 있다. 일 실시예에서, 현재 보드의 전력 사용량은 노드들에 연결된 전력 측정 센서로부터 획득되는 전력 사용량을 나 타낼 수 있다. 현재 보드의 전력 사용량의 값이 작을수록 해당 노드의 사용가능성이 높아진다는 것으로 해석될 수 있다. 일 실시예에서, 후보 노드 리스트에 포함되는 후보 노드들의 정렬 순서는, 상기 예상 레이턴시 정보의 크기에 기초하여 결정될 수 있다. 컴퓨팅 디바이스는 예상 레이턴시 정보의 크기를 기준으로 정렬된 후보 노드 리 스트를 제공할 수 있다. 이러한 예시에서, 레이턴시 정보의 크기가 작은 순서대로 정렬된 후보 노드 리스트가 제공될 수 있다. 추가적인 실시예에서, 후보 노드들의 정렬 순서는 메모리 사용량 및 CPU 점유율와 같은 인자를 기준으로 결정될 수 있다. 예를 들어, 후보 노드들의 정렬 순서는 예상 레이턴시 정보뿐만 아니라 메모리 사용량 및 CPU 점유율 에 추가적으로 기초하여 결정될 수 있다. 이러한 예시에서, 후보 노드들 중 제 1 후보 노드와 제 2 후보 노드 간의 예상 레이턴시 정보의 크기의 차이가 사전 결정된 임계 범위 내에 포함되는 경우, 제 1 후보 노드와 제 2 후보 노드의 메모리 사용량 및 CPU 점유율에 기초하여 제 1 후보 노드와 상기 제 2 후보 노드 간의 정렬 순서가 결정될 수 있다. 일례로, 예상 레이턴시가 동일한 경우 현재 메모리(예컨대 RAM) 사용량과 CPU 점유율을 기준으 로 추가적인 정렬이 수행될 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 Jetson 계열과 같은 특정 노드의 경우, 추가적인 인자를 고려하 여 정렬을 수행할 수 있다. 예를 들어, Jetson 계열 등과 같은 특정한 타입의 노드들에 대해서는 해당 노드들에 대한 별도의 정렬을 추가로 진행할 수 있다. 다른 예시로, 컴퓨팅 디바이스는 특정한 타입의 노드들에 대 해서는 다른 타입의 노드들과의 정렬의 경우 예상 레이턴시를 기준으로 정렬하되 해당 타입에 대응되는 노드들 이 유사한 범위 내의 예상 레이턴시 값을 가지는 경우, Power 필드 및/또는 Fan 필드를 추가로 고려하여 정렬을 수행할 수 있다. 일례로, 컴퓨팅 디바이스는 Power 필드에 대응되는 인자를 추가로 고려하여 Power 필드가 많은 순서대로 정렬을 수행할 수 있다. 일례로, 컴퓨팅 디바이스는 Jetson 계열과 같은 특정 노드에 대해 서 Power 필드가 동일한 경우 또는 사전 결정된 임계 범위 내에 있는 경우 Fan의 동작의 크기 또는 강도를 기준 으로 Fan의 동작 크기가 큰 순서대로 노드들에 대한 추가적인 정렬을 수행할 수 있다. 전술한 바와 같이, 예상 레이턴시 정보에 있어서 큰 차이가 없는 노드들에 대해서는 추가적인 인자들을 고려하 여 후보 노드들의 정렬 순서가 결정될 수 있다. 이처럼 후보 노드 리스트를 제공하는데 있어서, 사용자가 직관 적으로 예상 성능을 확인할 수 있는 형태로 후보 노드들이 정렬되기 때문에, 사용자는 보다 용이하고 효율적으 로 후보 노드 리스트 상의 노드들의 예상 성능을 확인하고 타겟 노드를 보다 효율적으로 결정할 수 있게 된다. 일 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트를 생성하는 과정에서 컨버팅 동작을 연계시킬 수 있 다. 예를 들어, 컴퓨팅 디바이스는 인공지능 기반의 모델을 타겟 타입 정보에 대응되도록 컨버팅된 타겟 모델 을 획득할 수 있다. 추가적인 예시에서, 컴퓨팅 디바이스는 컴퓨팅 디바이스에 의해 컨버팅을 수행할 수 있거나 또는 외부의 컨버팅 디바이스를 통해 타겟 타입으로 변경된 타겟 모델을 획득할 수 있다. 컴퓨팅 디 바이스는 타겟 모델에 포함되는 복수의 연산자들 각각에 대응되는 서브 레이턴시(sub latency) 정보를 획득할 수 있다. 예컨대, 하나의 연산자는 하나의 서브 레이턴시에 대응될 수 있다. 여기서, 서브 레이턴시 정보 는 상기 후보 노드들 각각에 대해서 계산될 수 있다. 모델 내에 복수의 연산자들이 존재할 수 있으며, 컴퓨팅 디바이스는 연산자 별로 특정 타겟 노드에서 실행되는 경우 발생되는 서브 레이턴시를 측정 또는 결정할 수 있다. 컴퓨팅 디바이스는 복수의 연산자들의 서브 레이턴시 정보에 기초하여, 후보 노드들 각각에 대한 상기 타겟 모델의 예상 레이턴시 정보를 생성할 수 있다. 예를 들어, 컴퓨팅 디바이스는 모델 내에 포함된 연산자들 각각에 대응되는 서브 레이턴시들을 합산함으로써 모델에 대응되는 예상 레이턴시 정보를 획득할 수 있다. 컴퓨팅 디바이스는 예상 레이턴시 정보 및 후보 노드들의 식별 정보를 포함하는 후보 노드 리스트를 제공할 수 있다. 일 실시예에서, 인공지능 기반의 모델 내에는 복수의 연산자들이 포함될 수 있다. 연산자는 인공지능 기반의 모 델의 동작에 대응될 수 있다. 모델 내에서의 서로 상이한 연산은 상이한 연산자로 표현될 수 있다. 일례로 2D 이미지에 대한 컨볼루셔널 연산을 나타내는 Conv2D에 대응되는 연산자가 모델에 포함될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 모델 별 복수의 연산자들과 노드들 각각을 매칭시키는 레이턴시 테이블 을 이용하여 후보 노드 리스트를 생성할 수도 있다. 일 실시예에서, 컴퓨팅 디바이스는 레이턴시 테이블이 존재하는 경우 후보 노드 리스트를 생성하는 과정에 서 후보 노드들 각각에 대한 성능을 측정하지 않고 레이턴시 테이블을 이용하여 후보 노드들 각각에 대한 예상 성능 정보를 획득할 수 있다. 컴퓨팅 디바이스는 레이턴시 테이블이 존재하지 않는 경우, 후보 노드 리스 트를 생성하는 과정에서 후보 노드들 각각에 대한 성능을 측정하고 그리고 측정된 성능을 포함하는 후보 노드 리스트를 생성할 수 있다. 일례로, 하나의 모델에 대해서 하나의 레이턴시 테이블이 획득될 수 있다. 일 실시예에서, 레이턴시 테이블은 사전 저장된 연산자들 각각을 사전 저장된 노드들에서 실행시킴으로써 획득되는 서브 레이턴시 정보를 포함할 수 있다. 레이턴시 테이블의 행과 열 중 하나에 연산자에 대한 정보가 포함되며, 다른 하나에 노드에 대한 정보 가 포함되며 그리고 엘리먼트의 값은 서브 레이턴시로 표현될 수 있다. 레이턴시 테이블이 최초로 컴퓨팅 디바 이스에서의 측정을 통해 생성된 이후에는, 추가적인 측정 또는 실행 절차를 거치지 않고, 사전 준비된 레 이턴시 테이블을 이용하여 후보 노드 리스트의 예상 성능이 빠르게 획득될 수 있다. 전술한 바와 같이, 컴퓨팅 디바이스는 사전 생성된 레이턴시 테이블을 이용하여 타겟 모델에 포함되는 복 수의 연산자들 각각에 대응되는 서브 레이턴시 정보를 획득하고, 복수의 연산자들의 서브 레이턴시 정보에 기초 하여, 후보 노드들 각각에 대한 타겟 모델의 예상 레이턴시 정보를 생성할 수 있다. 이러한 방식으로 예상 레이 턴시 정보 및 후보 노드들의 식별 정보를 포함하는 후보 노드 리스트가 제공될 수 있다. 컴퓨팅 디바이스 는 입력된 모델에 대응되는 레이턴시 테이블을 결정하고, 결정된 레이턴시 테이블에 포함된 복수의 연산자들의 노드 별 서브 레이턴시 정보에 기초하여, 후보 노드들 각각에 대한 모델의 예상 레이턴시 정보를 생성할 수 있 다. 이러한 모델의 예상 레이턴시 정보는 복수의 연산자들 각각의 서브 레이턴시 정보를 합산함으로써 생성될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 컨버팅 매칭 테이블을 이용하여, 후보 노드 리스트를 생성할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 입력된 정보를 기반으로 어떤 타입(예컨대, Type A)의 모델로부터 어떤 타입의 모델(예컨대, Type B)로 컨버팅될 것인지 결정할 수 있다. 만약, Type A로부터 Type B로 컨버팅된 이력 이 존재한다면, Type A에서 Type B로의 컨버팅에 대응되는 컨버팅 매칭 테이블이 별도로 존재할 수 있다. 이러 한 경우, 컴퓨팅 디바이스는 Type A에 대응되는 모델의 분석만으로도 레이턴시가 발생되는 연산자를 추출 하고 그리고 추출된 연산자가 Type B로 컨버팅되었을 때의 레이턴시를 기준으로 예상 성능 정보를 계산할 수 있 다. 일 실시예에서, Type A로부터 Type B로 컨버팅된 이력이 존재하지 않는다면, 컴퓨팅 디바이스는 Type A에 대응되는 모델(또는 연산자)를 Type B로 컨버팅한 후에 컨버팅된 모델을 분석하여 연산자를 추출하고 그리고 추 출된 연산자에 대한 레이턴시를 계산 또는 측정하여 예상 성능 정보를 계산할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 사전 결정된 컨버팅 타입들에 대해서 그리고/또는 컨버팅에 소요되는 시간이 사전 결정된 임계 시간 이상 소요되는 컨버팅 타입들(또는 모델들)에 대해서 전술한 컨버팅 매칭 테이블 을 사전 생성할 수 있다. 일 실시예에서, 컨버팅 매칭 테이블은, 모델 타입 정보에 대응되는 인공지능 기반의 모델로부터 추출된 연산자 가 타겟 타입 정보에 대응되도록 컨버팅되었을 때, 컨버팅된 연산자에 대응되는 서브 레이턴시 정보를 포함할수 있다. 예를 들어, 컨버팅 매칭 테이블의 행과 열 중 하나는 컨버팅 이전의 모델 타입 정보에 대응되는 연산 자들을 포함하고 그리고 다른 하나는 컨버팅 이후의 타겟 타입 정보에 대응되는 연산자들을 포함하고 그리고 컨 버팅 매칭 테이블 내의 엘리먼트는 컨버팅되었을 때의 컨버팅된 연산자에 대응되는 서브 레이턴시 정보를 포함 할 수 있다. 일 예시에서, 컨버팅 매칭 테이블은 노드 별로 생성될 수 있다. 이러한 예시에서 하나의 노드에 하 나의 컨버팅 매칭 테이블이 대응될 수 있다. 일 예시에서, 컨버팅 매칭 테이블은 노드 별 그리고 모델들의 조합 별로 생성될 수 있다. 이러한 예시에서 제 1 모델로부터 변환된 제 2 모델의 제 1 노드에서의 연산자별 서브 레 이턴시 정보가 하나의 테이블로 표현될 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 특정 모델의 특정 연산자가 다른 모델의 다른 연산자로 변환되는 연산자들 간의 변환 정보를 포함하는 컨버팅 매칭 테이블을 이용할 수 있다. 이러한 예시에서, 컨버팅 매칭 테 이블은 모델들 간의 변환이 일어나는 경우, 모델 내에서 연산자들이 어떻게 변환되는지를 나타내는 정보를 포함 할 수 있다. 일례로, 컨버팅 매칭 테이블에서의 행과 열 중 하나는 컨버팅 이전의 모델의 연산자들을 포함하며 그리고 나머지 하나는 컨버팅 이후의 모델의 연산자들을 포함할 수 있다. 전술한 컨버팅 매칭 테이블을 이용하 여, 연산자들이 컨버팅에 따라 어떻게 변경되는지가 확인될 수 있다. 이러한 실시예에서, 컴퓨팅 디바이스(10 0)는 컨버팅 매칭 테이블을 이용하여 컨버팅된 모델의 연산자들을 식별하고 그리고 상술된 레이턴시 테이블을 이용하여 컨버팅된 모델의 연산자들 각각에 대한 노드 별 서브 레이턴시를 획득할 수 있다. 서브 레이턴시의 합 산을 통해 컨버팅된 모델에 대한 노드 별 예상 성능 정보가 획득될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 인공지능 기반의 모델을 컨버팅할 것으로 결정되는 경우, 모델 타입 정 보와 타겟 타입 정보를 매칭시키기 위한 컨버팅 매칭 테이블이 존재하는지 여부를 결정하고, 컨버팅 매칭 테이 블이 존재하는 경우, 상기 인공지능 기반의 모델에 포함되는 연산자 및 상기 컨버팅 매칭 테이블에 기초하여, 상기 후보 노드들 각각에 대한 상기 타겟 모델의 예상 레이턴시 정보를 생성할 수 있다. 컴퓨팅 디바이스 는 상기 예상 레이턴시 정보 및 상기 후보 노드들의 식별 정보를 포함하는 상기 후보 노드 리스트를 제공할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 레이턴시 테이블 및 컨버팅 매칭 테이블을 조합하여, 컨버팅된 모델의 연산자들 각각에 대한 서브 레이턴시를 결정하고 그리고 결정된 서브 레이턴시들을 합산함으로써 컨버팅된 모델 에 대한 예상 레이턴시 정보를 생성할 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 연산자 단위가 아닌 모델 단위로 노드 별 레이턴시 측정 결과가 포함된 레이턴시 테이블 및/또는 연산자 단위가 아닌 모델 단위로 노드 별 컨버팅에 따른 레이턴시 측정 결과가 포함된 컨버팅 매칭 테이블을 조합함으로써 후보 노드들 각각에 대한 타겟 모델의 예상 레이턴시 정보를 생성할 수도 있다. 본 개시내용의 일 실시예에서, 컴퓨팅 디바이스는 입력된 모델에 대응되는 모델 타입 정보와 입력된 타겟 타입 정보 간의 비교에 기초하여 컨버팅이 수행될지 여부를 결정할 수 있다. 컨버팅이 수행될 것으로 결정된 경 우, 컴퓨팅 디바이스는 입력된 모델에 포함된 연산자들을 추출하여, 타겟 타입 정보에 매칭되는 실행 환경 을 가지는 노드들 중에서 후보 노드 리스트에 포함될 후보 노드를 결정할 수 있다. 일 실시예에서, 특정 노드가 타겟 타입 정보에 매칭되는 실행 환경을 가지지만 입력된 모델에 포함된 연산자를 해당 실행 환경에서 지원하지 않는 경우에는 컴퓨팅 디바이스는 해당 실행 환경이 설치된 상기 특정 노드 를 후보 노드 리스트에 포함시키지 않을 것으로 결정할 수 있다. 예를 들어, 해당 노드에서 지원하는 런타임은 입력된 모델에 포함된 연산자와 매칭이 되지만 입력된 모델에 포함된 연산자를 해당 노드의 런타임 버전에서 지 원하지 않는 경우, 해당 런타임 버전이 설치된 노드는 후보 노드에서 제외될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는, 특정 노드가 입력된 모델에 포함된 연산자를 해당 실행 환경에서 지원 하지 않지만 해당 연산자를 대체할 수 있는 연산자가 존재하는 경우, 연산자의 대체를 진행할지 여부를 결정하 기 위한 요청을 전달할 수 있다. 사용자로부터 연산자의 대체를 원하는 입력을 수신하는 경우, 상기 특정 노드 를 후보 노드 리스트에 포함시키고, 그리고 사용자로부터 연산자의 대체를 원하지 않는다는 입력을 수신하는 경 우, 특정 노드를 후보 노드 리스트에 포함시키지 않을 수 있다. 예를 들어, 해당 노드에서 지원하는 런타임은 입력된 모델에 포함된 연산자와 매칭이 되지만 입력된 모델에 포함된 연산자를 해당 노드의 런타임 버전에서 지 원하지 않는 경우 그리고 해당 연산자를 대체할 수 있는 연산자가 해당 노드의 런타임 버전에서 지원되는 경우, 연산자에 대한 대체 요청을 통해 후보 노드를 결정할 수 있다. 연산자에 대한 대체 입력이 수신되는 경우, 해당 노드가 후보 노드로 결정되며 그렇지 않은 경우 해당 노드는 후보 노드에서 제외될 수 있다.일 실시예에서, 후보 노드 리스트는 예를 들어 테이블 형태의 자료 구조를 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트 중 적어도 하나의 타겟 노드를 선택하는 입력 데이터 에 기초하여, 적어도 하나의 타겟 노드를 결정할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트 중 특정한 노드를 선택하는 사용자 입력 데이터를 수 신할 수 있다. 컴퓨팅 디바이스는 사용자 입력 데이터에 포함된 선택된 노드들을 타겟 노드로 결정할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트 중에서 하나의 타겟 노드를 선택하는 사용자 입력 데 이터를 수신할 수 있다. 다른 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트 중에서 복수의 타겟 노드 들을 선택하는 사용자 입력 데이터를 수신할 수 있다. 다른 실시예에서, 컴퓨팅 디바이스는 후보 노드 리 스트에서 특정한 인자(예컨대, 레이턴시)를 기준으로 가장 높은 성능을 가지는 노드를 타겟 노드로 사용자 입력 없이 자동으로 선택할 수도 있다. 일 실시예에서, 컴퓨팅 디바이스는 인공지능 기반의 모델의 컨버팅 여부에 따라 획득되는 타겟 모델을 적 어도 하나의 타겟 노드에서 실행함에 따라 획득되는 벤치마크 결과를 제공할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 타겟 모델을 타겟 노드에서 추론한 결과를 포함하는 벤치마크 결과를 생성할 수 있다. 일 실시예에서, 하나의 노드가 타겟 노드로 결정된 경우, 해당 노드에 벤치마크 요청 정보가 전송될 수 있다. 일 실시예에서, 복수의 노드들이 타겟 노드로 결정된 경우, 복수의 노드들 각각에 벤치마크 요청 정보가 전송될 수 있다. 벤치마크 요청 정보는 벤치마크의 대상이 되는 타겟 모델에 대한 정보를 포함할 수 있다. 타겟 모델에 대한 정보는 예를 들어 모델과 관련된 파일 또는 링크, 및/또는 모델의 타겟 타입 정보를 포함할 수 있다. 일 실시예에서, 벤치마크 결과는 컴퓨팅 디바이스에 의해 생성되거나 또는 컴퓨팅 디바이스의 관리 하에 있는 다른 서버(예컨대, 복수의 노드들을 포함하는 서버)에 의해 수행될 수 있다. 일 실시예에서, 벤치마크 결과는 타겟 모델의 타겟 노드에서의 성능 정보를 포함할 수 있다. 일 실시예에서, 벤치마크 결과는 컴퓨팅 디바이스의 벤치마크 동작을 트리거링 또는 요청한 다른 컴퓨팅 디바이스의 모듈이 무엇인지에 따라 상이할 수 있다. 추가적인 실시예에서, 벤치마크 동작은 컴퓨팅 디바이스 의 벤치마크 동작을 트리거링 또는 요청한 다른 컴퓨팅 디바이스의 모듈이 무엇인지에 따라 상이할 수 있 다. 예를 들어, 컴퓨팅 디바이스의 벤치마크 동작을 트리거링한 모듈이 제 1 모듈인 경우, 컴퓨팅 디바이 스는 입력된 모델 전체를 대상으로 한 성능 정보를 제공하며 그리고 컴퓨팅 디바이스의 벤치마크 동 작을 트리거링한 모듈이 제 2 모듈인 경우, 컴퓨팅 디바이스는 입력된 모델 전체를 대상으로 한 성능 정보 를 제공하는 것과 함께 입력된 모델의 블록 단위의 성능 정보를 추가로 제공할 수 있다. 다른 예시로, 컴퓨팅 디바이스의 벤치마크 동작을 트리거링한 모듈이 제 1 모듈인 경우 컴퓨팅 디바이스는 입력된 데이터 셋에 대응되는 학습 모델 또는 컨버팅된 학습 모델을 실행시킬 타겟 노드를 결정하기 위한 벤치마크 결과를 제 공하며, 그리고 컴퓨팅 디바이스의 벤치마크 동작을 트리거링한 모듈이 제 2 모듈인 경우 컴퓨팅 디바이스 는 입력된 모델에 대응되는 경량화 모델을 생성하기 위해 사용되는 압축 설정 데이터를 포함하는 벤치마크 결과를 제공할 수 있다. 제한이 아닌 예시로, 컴퓨팅 디바이스의 벤치마크 동작을 트리거링하는 복수의 모듈들은: 입력된 데이터셋 을 기초로 하여 학습 모델을 생성하는 제 1 모듈, 입력된 모델을 압축함으로써 경량화 모델을 생성하는 제 2 모 듈, 및 입력된 모델을 적어도 하나의 타겟 노드에 디플로이하기 위한 다운로드 데이터를 생성하는 제 3 모듈을 포함할 수 있다. 일 실시예에서, 벤치마크 요청 정보는 모델에 대한 컨버팅 여부에 대한 정보를 포함할 수 있다. 벤치마크 요청 정보에 포함된 컨버팅 여부에 기초하여, 입력된 모델에 대한 컨버팅이 수행될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 인공지능 기반의 모델을 타겟 타입 정보에 대응되도록 컨버팅할 것으로 결정한 경우, 입력된 모델과 관련된 정보를 이용하여 복수의 컨버터들 중 특정 컨버터를 결정할 수 있다. 예를 들어, 컴퓨팅 디바이스는 입력된 모델의 모델 타입 정보와 타겟 타입 정보의 조합에 대응되는 컨버터 식별 정보를 결정할 수 있다. 결정된 컨버팅 식별 정보에 대응되는 컨버터가 결정되고 결정된 컨버터에 의해 컨버팅 동작이 수행될 수 있다. 예를 들어, 컴퓨팅 디바이스는 인공지능 기반의 모델에 대응되는 모델 파일, 및 모델 타입 정보와 타겟 타입 정보의 조합에 대응되는 컨버터 식별 정보를 이용하여, 상기 인공지능 기반의 모델이 컨버팅된 타겟 모델을 획득할 수 있다. 전술한 바와 같이, 컨버팅이 수행되는 것으로 결정된 경우, 컨버팅 대상의 모델 파일 및 컨버팅을 수행할 컨버터를 식별하기 위한 정보(예컨대, 컨버팅 이전의 모델 타입과 컨버팅 이후의 모델 타입의 조합을 식별하기 위한 식별자)를 이용하여 컨버팅이 수행될 수 있다. 일례로, 전술한 컨버 팅은 컨버팅 디바이스(예컨대, 컨버팅 서버)에 의해 수행될 수 있다. 다른 예시로, 구현 양태에 따라서 전술한 컨버팅은 컴퓨팅 디바이스에 의해 수행될 수도 있다. 이러한 예 시에서, 컴퓨팅 디바이스는 프로젝트의 결과에 따른 모델 파일이 특정 타입(예컨대 tensorrt)에 대응되는 실행 환경이 아닌 다른 타입(예컨대, onnxruntime)에 대응되는 실행 환경인 경우, 컴퓨팅 디바이스는 컨버 팅 기능을 이용하여 다른 타입(예컨대 onnxruntime)의 모델을 특정 타입(예컨대 tensorrt)의 모델로 변환하여 컨버팅 결과에 따른 모델 파일을 제공할 수 있다. 일 실시예에서, 가상화된 운영 체제(virtual operating system) 상에서 컨버터 식별 정보에 대응되는 컨버터의 도커 이미지(docker image)를 이용하여 인공지능 기반의 모델이 타겟 모델로 컨버팅될 수 있다. 예를 들어, 컨 버팅을 수행하는 엔티티(예컨대, 컨버팅 서버 등)에서는 입력된 컨버터 식별 정보에 대응되는 Docker 이미지를 획득하고 그리고 Docker 내에서 컨버터의 sh 파일을 실행시킴으로써 모델의 컨버팅을 수행할 수 있다. 여기서의 sh 파일은 Docker 내에서 실행할 명령어들을 포함하는 파일을 나타낼 수 있다. 일 실시예에서, 벤치마크 결과는 시간과 관련된 제 1 타입의 정량 정보 및 메모리 사용과 관련된 제 2 타입의 정량 정보를 포함할 수 있다. 일 실시예에서, 타겟 모델을 적어도 하나의 타겟 노드에서 실행함에 따라 획득되는 벤치마크 결과는, 적어도 하 나의 타겟 노드에서 타겟 모델의 추론의 전처리를 위해 소요되는 전처리 시간 정보, 적어도 하나의 타겟 노드에 서 타겟 모델을 추론하는데 소요되는 추론 시간 정보, 적어도 하나의 타겟 노드에서 타겟 모델의 추론의 전처리 를 위해 사용되는 전처리 메모리 사용량 정보, 적어도 하나의 타겟 노드에서 타겟 모델을 추론하는데 사용되는 추론 메모리 사용량 정보, 적어도 하나의 타겟 노드에서 타겟 모델을 사전 결정된 횟수만큼 반복하여 추론함에 따라 획득되는, 추론 시간과 관련된 정량 정보, 및/또는 적어도 하나의 타겟 노드에서 타겟 모델을 추론함에 따 라 획득되는, NPU, CPU 및 GPU 각각에 대한 메모리 사용과 관련된 정량 정보를 포함할 수 있다. 일 실시예에서, 전처리 시간 정보는 예를 들어 모델을 불러오는 등과 같이 추론 동작이 수행되기 이전인 전처리 를 위해 소요되는 시간 정보를 포함할 수 있다. 추가적으로 전처리 시간 정보는, 추론에 대한 값을 측정하기 이 전에 GPU 등의 활성화를 위해 사전 추론을 사전 결정된 횟수만큼 반복하였을 때의 사전 추론에 소요되는 시간과 관련된 정량 정보(예컨대, 사전 추론에 소요되는 시간의 최소값, 최대값 및/또는 평균값)를 포함할 수도 있다. 일 실시예에서, 추론 시간 정보는, 추론 과정에서 소요되는 시간 정보로서 예를 들어, 모델에 대한 최초 추론 동작에 소요되는 시간 정보 및/또는 사전 결정된 횟수만큼 반복하여 추론하였을 때의 추론 시간 정보 중 최소 시간 정보, 최대 시간 정보, 평균(average) 시간 정보 및/또는 중간(median) 시간 정보를 포괄하도록 사용될 수 있다. 추가적으로, 예를 들어, NPU에서 처리할 수 없는 연산을 CPU가 받아서 처리하는 상황에서 NPU가 유휴 (idle) 상태가 되는데, 추론 시간 정보는 NPU가 유휴 상태가 되었을 때의 제 1 사이클 값을 포함할 수 있다. 추 가적으로, 추론 시간 정보는 NPU에서 추론을 수행할 때의 제 2 사이클 값, 및/또는 제 1 사이클 값과 제 2 사이 클 값을 합산한 제 3 사이클 값을 포함할 수도 있다. 일 실시예에서, 벤치마크 결과 정보는 상기 전처리 메모리 사용량 정보와 상기 추론 시간과 관련된 정량 정보를 합산한 총 시간 정보 또한 포함할 수 있다. 일 실시예에서, 벤치마크 결과 정보는 RAM 사용량, ROM 사용량, 메모리 전체 사용량 및/또는 NPU에서 사용하는 SRAM 영역에 대한 정량값 등을 추가로 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 다수의 노드들이 타겟 노드로 선택됨에 따라 복수개의 벤치마크 결과가 생성되는 경우, 레이턴시를 기준으로 복수의 벤치마크 결과를 정렬할 수 있다. 예를 들어, 레이턴시가 가장 적 은 순서대로 벤치마크 결과가 정렬 및 출력될 수 있다. 추가적인 실시예에서, 레이턴시가 사전 결정된 유사 범 위 내에 있거나 혹은 동일한 복수의 노드들 각각에 대응되는 벤치마크 결과가 존재하는 경우, 메모리 사용량 및 /또는 CPU 점유율에 추가로 기초하여 벤치마크 결과들에 대한 정렬이 수행될 수 있다. 벤치마크 결과들에 대한 정렬은 후보 노드 리스트 상에서의 정렬과 관련된 특징을 포함할 수 있다. 일 실시예에서, 벤치마크 결과는 예를 들어 테이블 형태의 자료 구조를 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 연결된 복수의 노드들의 무선 통신의 가능 여부에 따라 벤치마크 요청 정보를 상이한 방식으로 전송할 수 있다. 무선 통신은 일례로 HTTP 통신을 포함할 수 있다. 예를 들어, 무선 통 신이 가능한 독립적인 노드에 벤치마크 요청을 전달하는 경우, 컴퓨팅 디바이스는 해당 노드 또는 해당 노 드와 관련된 서버에 벤치마크 요청 정보를 전송할 수 있다. 예를 들어, 무선 통신이 불가능한 노드에 벤치마크 요청을 전달하고자 하는 경우, 컴퓨팅 디바이스는 무선 통신이 불가능한 노드가 USB/GPIO로 등을 통해 연 결되어 있는 무선 통신이 가능한 노드(예컨대, Rpi4)에 벤치마크 요청 정보를 전송할 수 있다. 벤치마크 요청 정보를 수신한 해당 노드(예컨대, HTTP 통신이 가능한 노드)는 USB/GPIO 연결을 통한 Serial 통신을 이용하여 연결된 벤치마크 대상이 되는 노드(즉, HTTP 통신이 불가능한 노드)에 프로그램을 실행하는 방식으로 벤치마크 결과가 획득될 수 있다. 실행하고자 하는 타겟 모델 타입에 해당하는 실행 환경을 무선 통신이 가능한 독립적인 노드에서 실행시키는 방식으로 사용 예상 메모리가 측정될 수 있다. 측정된 사용 예상 메모리와 벤치마크 요청 정보를 이용하여 벤치마크의 대상이 되는 무선 통신이 불가능한 노드에서 구동될 벤치마크 프로그램이 제작 및 컴파일될 수 있다. 제작 및 컴파일된 프로그램은 Serial 통신을 통해 벤치마크의 대상이 되는 무선 통신이 불가 능한 노드에 플래시(Flash)될 수 있다. 이러한 방식으로 무선 통신이 불가능한 노드에서의 벤치마크 결과가 획 득될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 외부에서 확인이 불가능한 노드(예컨대, 가상 노드 등)가 타겟 노드에 포함되는 경우 아래와 같은 방법을 통해 벤치마크 결과를 획득할 수 있다. 컴퓨팅 디바이스는 외부에서 확인이 불가능한 노드로부터 제 1 저전력 무선 신호를 수신하는 것에 대한 응 답으로, 타겟 모델을 상기 노드에서 벤치마크하기 위한 벤치마크 태스크를 포함하는 제 1 응답 메시지 (acknowledgment message)를 노드로 전송할 수 있다. 예를 들어, 제 1 저전력 무선 신호는 비콘 신호를 포함할 수 있다. 예를 들어, 제 1 저전력 무선 신호는 상기 노드가 벤치마크를 수행하고 있는지 여부, 상기 노드의 메 모리 사용량 및 상기 노드의 하드웨어 식별 정보를 포함할 수 있다. 컴퓨팅 디바이스는 상기 노드에 의해 생성된 벤치마크 결과를 포함하는 제 2 저전력 무선 신호(예컨대, 콜 백(callback) 신호)를 상기 노드로부터 수신할 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 콜백 신 호가 사전 결정된 임계 대기 시간 동안 수신되지 않는 경우, 상기 노드에서의 벤치마크 태스크가 실패하였다고 결정하고 그리고 상기 노드를 비활성(inactive) 상태로 설정할 수 있다. 컴퓨팅 디바이스는 비활성 상태로 설정된 노드로부터 제 3 저전력 무선 신호(예컨대, 비콘 신호)를 수신하는 것에 응답하여, 노드의 상태를 활성 (active) 상태로 설정할 수 있다. 여기서 상기 제 1 응답 메시지에 포함된 상기 벤치마크 태스크는, 노드가 다 운로드 받을 수 있는 타겟 모델 정보 및 노드가 다운로드 받은 상기 타겟 모델을 변환하는데 사용되는 노드 구 성(configuration) 정보를 포함할 수 있다. 또한, 노드에 의해 생성된 벤치마크 결과는, 노드 구성 정보 및 타 겟 모델 정보에 기초하여 상기 노드의 실행 환경 상에서 상기 타겟 모델을 실행함에 따라 획득되는 결과를 포함 할 수 있다. 도 5는 본 개시내용의 일 실시예에 따른 후보 노드 리스트를 생성하는데 사용되는 테이블 형태의 자료 구조 를 예시적으로 도시한다. 도 5에서의 자료 구조는 설명의 목적으로 예시되었으며, 구현 양태에 따라 노드들의 개수, 연산자들의 개 수, 성능 정보의 종류 및/또는 모델들의 개수가 다양하게 적용된 자료 구조 또한 본 개시내용의 범위 내에 포함 될 수 있다. 도 5에서 예시되는 자료 구조는 모델 별 복수의 연산자들과 노드들 각각을 매칭시킬 수 있다. 자료 구조 상에서의 행(또는 열)은 노드에 대한 식별정보를 나타내고 그리고 열(또는 행)은 특정 모델에 포함된 연산자에 대한 식별정보를 나타낸다. 일 실시예에서, 자료 구조에 포함된 엘리먼트들의 값은 특정 노드에서 특정 모델의 특정 연산자가 실행(예 컨대, 추론)되었을 때의 성능 정보를 나타낼 수 있다. 예를 들어, 도 5에서 예시되는 바와 같이, 성능 정보는 레이턴시와 관련된 정보를 포함할 수 있다. 여기서의 성능 정보는 일례로 연산자 별 성능 정보를 나타낼 수 있 다. 일례로 여기서의 성능 정보는 도 4에서의 서브 레이턴시 정보를 나타낼 수 있다. 도 5에서의 예시에서는 엘리먼트의 값이 작을수록(즉, 레이턴시 값이 작을수록) 성능이 양호하다는 것으로 해석 될 수 있다. 예를 들어, 제 1 연산자는 제 3 노드, 제 1 노드, 제 2 노드 그리고 제 4 노드의 순서대로 양호한 성능을 가질 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 하나 이상의 자료 구조를 이용하여, 후보 노드 리스트를 생성하는 데 필요한 모델과 노드 간의 조합에 대한 예상 성능 정보를 생성할 수 있다. 자료 구조는 각 노드 별 연산자들의 성능 정보를 합산한 값을 더 포함할 수 있다. 이러한 실시예에서, 제 1 노드는 특정 모델에 대해서 3ms + 4ms + 5ms + 7ms = 19ms의 예상 성능 정보를 가질 수 있으며, 제 2 노드는 34ms의 예상 성능 정보를 가질 수 있으며, 제 3 노드는 22ms의 예상 성능 정보를 가질 수 있으며, 그리고 제 4 노드는 32ms의 예상 성능 정보를 가질 수 있다. 예를 들어, 후보 노드 리스트에서 성능이 양호한 순서대로 노드들이 정렬될 수 있다. 이러한 예 시에서, 후보 노드 리스트에서 제 1 노드, 제 3 노드, 제 4 노드 및 제 2 노드의 순서로 후보 노드들이 정렬될 수 있다. 일 실시예에서, 자료 구조는 모델 별로 생성될 수 있다. 이러한 실시예에서, 하나의 모델은 하나의 자료 구조와 대응될 수 있지만, 구현 양태에 따라서, 복수의 모델들에 대응되는 하나의 자료 구조가 생성 될 수도 있다. 일 실시예에서, 자료 구조는 모델 별 복수의 연산자들과 노드들 각각을 매칭시키는 레이턴시 테이블과 대 응될 수 있다. 컴퓨팅 디바이스는 이러한 레이턴시 테이블을 이용하여 후보 노드 리스트를 생성할 수 있다. 일 실시예에서, 레이턴시 테이블은 사전 저장된 연산자들 각각을 사전 저장된 노드들에서 실행시킴으로써 획득 되는 서브 레이턴시 정보를 포함할 수 있다. 레이턴시 테이블의 행과 열 중 하나에 연산자에 대한 정보가 포함 되며, 다른 하나에 노드에 대한 정보가 포함되며 그리고 엘리먼트의 값은 서브 레이턴시로 표현될 수 있다. 레 이턴시 테이블이 최초로 컴퓨팅 디바이스에서의 측정을 통해 생성된 이후에는, 추가적인 측정 또는 실행 절차를 거치지 않고, 사용자 입력에 응답하여 사전 생성된 레이턴시 테이블을 이용하여 후보 노드 리스트가 빠 르게 생성 또는 획득될 수 있다. 전술한 바와 같이, 컴퓨팅 디바이스는 사전 생성된 레이턴시 테이블을 이용하여 타겟 모델에 포함되는 복 수의 연산자들 각각에 대응되는 서브 레이턴시 정보를 획득하고, 그리고 복수의 연산자들의 서브 레이턴시 정보 에 기초하여, 후보 노드들 각각에 대한 타겟 모델의 예상 레이턴시 정보를 생성할 수 있다. 컴퓨팅 디바이스 는 입력된 모델에 대응되는 레이턴시 테이블을 결정하고, 결정된 레이턴시 테이블에 포함된 복수의 연산자 들의 노드 별 서브 레이턴시 정보에 기초하여, 후보 노드들 각각에 대한 모델의 예상 레이턴시 정보를 생성할 수 있다. 이러한 모델의 예상 레이턴시 정보는 복수의 연산자들 각각의 서브 레이턴시 정보를 합산함으로써 생 성될 수 있다. 일 실시예에서 자료 구조는 모델의 업데이트, 신규 노드의 추가 및/또는 신규 모델의 추가와 관련된 변경 이벤트에 따라서 컴퓨팅 디바이스에 의해 업데이트될 수 있다. 변경 이벤트가 존재하지 않는 경우, 컴퓨팅 디바이스에 의한 별도의 실행 또는 측정 없이 해당 자료 구조는 사용자 입력에 응답하여 후보 노드 리스트를 생성하는데 활용될 수 있다. 도 6은 본 개시내용의 일 실시예에 따른 후보 노드 리스트를 생성하는데 사용되는 테이블 형태의 자료 구조 를 예시적으로 도시한다. 도 6에서의 자료 구조는 모델이 컨버팅되는 경우, 컨버팅 이전의 모델(예컨대, 소스 모델)의 소스 연산자 들 및 컨버팅 이후의 모델(예컨대, 타겟 모델)의 타겟 연산자들을 나타내는 테이블 형태의 자료 구조 이다. 자료 구조의 엘리먼트들의 값은 소스 연산자가 타겟 연산자로 컨버팅되었을 때, 타 겟 연산자에서의 특정 노드에 대한 예상 성능(예컨대, 서브 레이턴시)을 나타낼 수 있다. 일 실시예에서, 자료 구조는 모델들의 조합 별 그리고 노드 별로 생성될 수 있다. 예를 들어, 하나의 자료 구조는 제 1 모델에서 제 2 모델로 컨버팅되는 되고 그리고 컨버팅된 제 2 모델이 제 1 타겟 노드에서 실 행되는 경우를 커버할 수 있다. 이러한 예시에서, 제 2 모델로부터 제 1 모델로 컨버팅되는 경우에는 다른 자료 구조를 통해 커버될 수 있다. 구현 양태에 따라서, 하나의 자료 구조에 의해 커버되는 범위는 가변적일 수 있으며, 예컨대 하나의 자료 구조가 복수의 노드들에서의 컨버팅된 연산자들의 서브 레이턴시를 포함할 수 도 있다. 다른 예시에서, 자료 구조는 노드 별로 생성될 수 있다. 즉, 소스 모델에서 타겟 모델로 컨버팅되는 경우, 소스 모델에서의 어떤 소스 연산자들이 타겟 모델에서의 어떤 타겟 연산자들로 변경될 것인지가 결정될 수 있다. 이러한 경우, 컴퓨팅 디바이스는 자료 구조를 참고하여 컨버팅과 관련된 소스 연산자들과 타겟 연산자들 간의 서브 레이턴시 정보를 획득하고 이에 따라 컨버팅된 타겟 모델 또는 컨버팅된 타겟 연산자와 관 련된 예상 성능 정보를 획득할 수 있다. 일 실시예에서, 자료 구조는 컨버팅 매칭 테이블에 대응될 수 있다. 컴퓨팅 디바이스는 인공지능 기 반의 모델을 컨버팅할 것으로 결정되는 경우, 컨버팅 매칭 테이블이 존재하는지 여부를 결정하고, 컨버팅 매칭 테이블이 존재하는 경우, 인공지능 기반의 모델에 포함되는 연산자 및 상기 컨버팅 매칭 테이블에 기초하여, 후 보 노드들 각각에 대한 타겟 모델의 예상 레이턴시 정보를 생성할 수 있다. 컴퓨팅 디바이스는 예상 레이 턴시 정보 및 후보 노드들의 식별 정보를 포함하는 상기 후보 노드 리스트를 제공할 수 있다. 일 실시예에서, 컨버팅 매칭 테이블은, 모델 타입 정보에 대응되는 인공지능 기반의 모델로부터 추출된 연산자 가 타겟 타입 정보에 대응되도록 컨버팅되었을 때, 컨버팅된 연산자에 대응되는 서브 레이턴시 정보를 포함할 수 있다. 컨버팅 매칭 테이블은 연산자들 간의 컨버팅이 일어나는 경우 컨버팅된 연산자가 특정 노드에서 어떠 한 성능을 가지는지를 정리한 테이블 형태의 자료 구조이다. 예를 들어, 컨버팅 매칭 테이블의 행과 열 중 하나는 컨버팅 이전의 모델 타입 정보에 대응되는 연산자들을 포함하고 그리고 다른 하나는 컨버팅 이후의 타겟 타입 정보에 대응되는 연산자들을 포함하고 그리고 컨버팅 매칭 테이블 내의 엘리먼트는 컨버팅되 었을 때의 컨버팅된 연산자에 대응되는 서브 레이턴시 정보를 포함할 수 있다. 일 예시에서, 컨버팅 매칭 테이블은 노드 별로 생성될 수 있다. 이러한 예시에서 하나의 노드에 하나의 컨버팅 매칭 테이블이 대응될 수 있다. 일 예시에서, 컨버팅 매칭 테이블은 노드 별 그리고 모델들(또는 연산자들)의 조합 별로 생성될 수 있다. 이러한 예시에서 제 1 모델로부터 변환된 제 2 모델의 제 1 노드에서의 연산자별 서 브 레이턴시 정보가 하나의 테이블로 표현될 수 있다. 이러한 예시에서 소스 연산자들은 소스 모델에 포함 된 전체 연산자들 중 타겟 모델로 컨버팅 과정에서 변경이 존재하는 연산자들을 포함할 수 있다. 일 실시예에서 자료 구조는 모델의 업데이트, 신규 노드의 추가 및/또는 신규 모델의 추가와 관련된 변경 이벤트에 따라서 컴퓨팅 디바이스에 의해 업데이트될 수 있다. 변경 이벤트가 존재하지 않는 경우, 컴퓨팅 디바이스에 의한 별도의 실행 또는 측정 없이 해당 자료 구조는 사용자 입력에 응답하여 후보 노드 리스트를 생성하는데 활용될 수 있다. 도 7은 본 개시내용의 일 실시예에 따른 후보 노드 리스트를 생성하는데 사용되는 테이블 형태의 자료 구조를 예시적으로 도시한다. 일 실시예에서, 자료 구조는 컨버팅 이전의 모델의 연산자들과 컨버팅 이후의 모델의 연산자들 간의 변환 관계를 나타낼 수 있다. 도 7에서의 열은 컨버팅 이전의 모델에 대응되는 제 1 모델에서 컨버팅 대상이 되 는 연산자들을 나타낸다. 도 7에서의 행은 컨버팅 이후의 모델들 각각에 포함된 컨버팅된 연산자들을 나타 낸다. 예를 들어, 자료 구조 상에서의 컨버팅 이전의 모델의 제 1-1 연산자는, 제 2 모델로 컨버팅되는 경우 제 1-1 연산자로 변경이 일어나지 않으며, 제 3 모델로 컨버팅되는 경우 제 1-3 연산자로 변경되며, 제 4 모델로 컨버팅되는 경우 제 1-3 연산자로 변경되며, 그리고 제 5 모델로 컨버팅되는 경우 제1-1 연산자로 변경이 일어 나지 않는다. 일 실시예에서, 자료 구조는 후보 노드 리스트를 생성할 때 자료 구조 및/또는 자료 구조과 함 께 사용될 수 있다. 예를 들어, 컴퓨팅 디바이스는 입력된 모델의 모델 타입 정보와 입력된 타겟 타입 정 보를 비교함으로써, 입력된 모델에 대한 컨버팅 여부를 결정할 수 있다. 컨버팅이 필요하다고 결정되는 경우, 컴퓨팅 디바이스는 컨버팅 이전의 모델과 컨버팅 이후의 모델을 식별하고 그리고 식별된 모델들에 대응되 는 자료 구조를 결정할 수 있다. 결정된 자료 구조를 기반으로 컴퓨팅 디바이스는 컨버팅 이전 의 모델들의 어떤 연산자들이 컨버팅 이후의 모델에서 어떤 연산자들로 변경되는지 확인할 수 있다. 컴퓨팅 디 바이스는 자료 구조 및/또는 자료 구조을 이용하여 변경된 연산자들이 특정 노드에 대해서 어떠 한 성능(예컨대, 서브 레이턴시)을 가지는지 결정할 수 있다. 위와 같은 방식으로 컴퓨팅 디바이스는 후보 노드 리스트를 생성할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 특정 모델의 특정 연산자가 다른 모델의 다른 연산자로 변환되는 연산 자들 간의 변환 정보를 포함하는 컨버팅 매칭 테이블을 이용할 수 있다. 자료 구조은 컨버팅 매칭 테이블 에 대응될 수 있다. 이러한 예시에서, 컨버팅 매칭 테이블은 모델들 간의 변환이 일어나는 경우, 모델 내에서 연산자들이 어떻게 변환되는지를 나타내는 정보를 포함할 수 있다. 일례로, 컨버팅 매칭 테이블에서의 행과 열 중 하나는 컨버팅 이전의 모델의 연산자들을 포함하며 그리고 나머지 하나는 컨버팅 이후의 모델의 연산자들을 포함할 수 있다. 전술한 컨버팅 매칭 테이블을 이용하여, 연산자들이 컨버팅에 따라 어떻게 변경되 는지가 확인될 수 있다. 이러한 실시예에서, 컴퓨팅 디바이스는 컨버팅 매칭 테이블을 이용하여 컨버팅된 모델의 연산자들을 식별하고 그리고 상술된 레이턴시 테이블을 이용하여 컨버팅된 모델의 연산자들 각각에 대한노드 별 서브 레이턴시를 획득할 수 있다. 서브 레이턴시의 합산을 통해 컨버팅된 모델에 대한 노드 별 예상 성 능 정보가 획득될 수 있다. 도 8은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 일 실시예에서, 도 8에서 도시되는 방법은 컴퓨팅 디바이스에서 수행될 수 있다. 일례로, 도 8에서 도시되 는 방법은 제 1 컴퓨팅 디바이스에 의해 수행될 수 있다. 다른 예시로, 도 8에서 도시되는 방법은 제 1 컴 퓨팅 디바이스 및 제 2 컴퓨팅 디바이스를 포괄하는 컴퓨팅 디바이스에 의해 수행될 수 있다. 아래에서는 도 8의 단계들이 컴퓨팅 디바이스에 의해 수행되는 예시를 구체적으로 설명하기로 한다. 구현 양태에 따라서 도 8에서 도시되는 단계들 중 일부가 생략되거나 추가적인 단계가 포함될 수 있다는 점은 당업자 에 의해 이해될 것이다. 일 실시예에서, 컴퓨팅 디바이스는, 추론 태스크 및 데이터셋을 포함하는 입력 데이터를 획득할 수 있다 . 일 실시예에서, 컴퓨팅 디바이스는 인공지능 기반의 모델의 추론의 종류 및/또는 목적을 포함하는 추론 태 스크 및 인공지능 기반의 모델을 학습, 검증 및/또는 테스트를 위한 데이터셋을 포함하는 입력 데이터를 수신할 수 있다. 예를 들어, 추론 태스크는 객체 분류, 객체 검출, 객체 세그멘테이션, 클러스터링, 시퀀스 예측, 시퀀 스 결정, 이상(anomaly) 탐지 및/또는 자연어 처리 등과 같이 인공지능 모델의 추론을 통해 달성하고자 하는 다 양한 형태의 목적을 포함할 수 있다. 예를 들어, 데이터셋은 인공지능 기반의 모델의 학습에 이용하는 학습 데 이터, 인공지능 기반의 모델의 학습 과정에서의 학습 성능을 평가하기 위한 검증 데이터, 및/또는 학습이 완료 된 인공지능 기반의 모델의 성능을 평가하기 위한 테스트 데이터를 포함할 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 학습이 완료된 인공지능 기반의 모델에 대한 정보(예컨대, 모델 파일 등)를 수신할 수도 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 인공지능 기반의 모델에 대한 정보 및 벤치마크하고자 하는 모델 타입인 타겟 타입 정보를 수신할 수도 있다. 여기서, 인공지능 기반의 모델에 대한 정보는 모델 파일, 모델 파 일을 다운로드 받기 위한 링크 및/또는 모델에 대응되는 모델 타입 정보를 포함할 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 데이터셋이 제공되지 않는 경우 데이터셋을 생성할 수 있다. 예 를 들어, 컴퓨팅 디바이스는 데이터셋을 랜덤으로 생성할 수 있다. 예를 들어, 컴퓨팅 디바이스는 사 용자로부터 입력된 태스크와 관련된 정보에 기초하여 데이터셋을 생성할 수 있다. 예를 들어, 컴퓨팅 디바이스 는 GAN과 같은 생성 모델을 이용하여 모델링을 수행하기 위한 데이터셋을 생성할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는, 추론 태스크에 대한 벤치마크의 대상이 되는 타겟 모델 및 타겟 모델 의 추론 태스크가 실행될 적어도 하나의 타겟 노드를 결정할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는, 추론 태스크에 대한 벤치마크를 위해 추천되는 후보 노드들을 포함하 는 후보 노드 리스트를 제공하고 그리고 후보 노드 리스트 상에서 적어도 하나의 타겟 노드를 선택하는 입력 데 이터를 수신함으로써, 추론 태스크가 실행될 타겟 노드를 결정할 수 있다. 일 실시예에서, 후보 노드는 벤치마크를 수행할 준비가 된 노드 및/또는 타겟 모델을 지원할 수 있는 노드를 포 괄하는 의미로 사용될 수 있다. 일 실시예에서, 후보 노드 리스트는 예를 들어 테이블 형태의 자료 구조를 포함 할 수 있다. 일 실시예에서 후보 노드는 복수의 노드들 중 모델의 벤치마크의 대상이 되는 타겟 노드를 결정하기 위해 사용 될 수 있다. 후보 노드 리스트에 포함된 후보 노드들 중 입력 데이터에 기반하여 벤치마크가 이루어질 타겟 노 드가 결정될 수 있다. 이러한 실시예에서, 후보 노드는 예컨대, 타겟 모델을 지원할 수 있는 노드에 대응될 수 있다. 일 실시예에서, 후보 노드 리스트는 복수의 노드들 중 벤치마크의 대상이 되는 타겟 노드 및 벤치마크의 대상이 되는 타겟 모델을 결정하는데 사용될 수 있다. 예를 들어, 후보 노드 리스트는 복수의 노드들 중에서 벤치마크 태스크를 수행할 준비가 된(즉, 스탠바이 상태의) 후보 노드들을 포함할 수 있다. 이러한 실시예에서, 후보 노 드는 벤치마크를 수행할 준비가 된 노드에 대응될 수 있다. 이러한 후보 노드 리스트 상에서 벤치마크의 대상이 되는 노드를 선택하는 사용자 입력에 따라서 벤치마크가 이루어질 타겟 노드가 결정될 수 있다. 전술한 예시에 서 후보 노드 리스트 상에서의 입력 데이터에 기초하여 타겟 노드가 결정되는 경우, 결정된 타겟 노드에 의해지원될 수 있는 실행 환경(예컨대, 런타임 등)을 가지는 타겟 모델과 관련된 정보가 제공될 수 있다. 여기서 타 겟 모델과 관련된 정보는 결정된 타겟 노드에 의해 지원 가능한 복수의 모델들에 대한 식별 정보를 포함할 수 있다. 일례로, 후보 노드 리스트 상에서 사용자 입력에 따라 타겟 노드가 결정되는 경우, 타겟 노드에 의해 지 원 가능한 타겟 모델에 대한 추천 정보가 생성될 수 있다. 이러한 추천 정보는 하나 이상의 타겟 모델들과 관련 된 정보를 포함할 수 있다. 추천 정보 상에서의 사용자 입력에 응답하여, 타겟 모델이 결정될 수 있다. 여기서 의 타겟 모델은 타겟 모델의 프레임워크를 나타내는 타겟 모델의 제 1 정보 및 타겟 모델의 소프트웨어 버전을 나타내는 타겟 모델의 제 2 정보를 포함할 수 있다. 일 실시예에서, 후보 노드 리스트 상에서의 입력 데이터에 포함된 적어도 하나의 타겟 노드에서 지원가능한 타겟 모델의 정보가 별도의 사용자 입력 없이도 자동으로 제공 될 수 있다. 일 실시예에서, 사용자는 타겟 모델에 대한 추천 정보 상에서 원하는 타겟 모델의 프레임워크 및 원하는 타겟 모델의 소프트웨어 버전을 선택할 수 있다. 전술한 바와 같이, 컴퓨팅 디바이스는 타겟 노드 에 대한 선택 입력에 응답하여 자동으로 타겟 노드가 지원할 수 있는 타겟 모델들의 추천 정보를 제공함으로써, 사용자가 인공지능 분야에 대한 풍부한 지식을 보유하고 있지 않더라도, 벤치마크하고자 하는 노드에 대응되는 모델들에 대한 용이한 선택이 가능하게 된다. 일 실시예에서, 컴퓨팅 디바이스는 추론 태스크에 대한 벤치마크를 위해 추천되는 후보 노드들을 포함하는 후보 노드 리스트를 제공할 수 있다. 예를 들어, 후보 노드 리스트는, 후보 노드들 각각에 대한 식별 정보 및 타겟 모델이 실행되는 경우 후보 노드들 각각에 대한 예상 레이턴시 정보를 포함할 수 있다. 일례로, 후보 노드 리스트에 포함되는 후보 노드들의 정렬 순서는, 상기 예상 레이턴시 정보의 크기에 기초하여 결정될 수 있다. 예상 레이턴시가 작은 경우 해당 노드에서 추론이 수행될 때 상대적으로 짧은 시간이 소요될 수 있기 때문에, 컴퓨팅 디바이스는 예상 레이턴시의 크기가 작은 순서대로(즉, 성능이 양호한 순서대로) 후보 노드 리스트 를 제공할 수 있다. 이에 따라 사용자는 직관적으로 후보 노드들 각각의 예상 성능을 확인하고 보다 효율적인 방식으로 후보 노드 리스트 내에서의 타겟 노드를 선택할 수 있다. 일 실시예에서, 후보 노드 리스트 상에서의 정렬 순서는 다양한 인자들을 고려하여 결정될 수 있다. 일 실시예에서, 후보 노드 리스트 상에서의 정렬 순서는 예상 레이턴시의 크기에 기초하여 결정될 수 있다. 일 례로, 예상 레이턴시의 크기가 작은 순서대로 정렬될 수 있다. 일 실시예에서, 후보 노드 리스트 상에서의 정렬 순서는 CPU 점유율의 크기에 기초하여 결정될 수 있다. 일례로, CPU 점유율의 크기가 작은 순서대로 정렬될 수 있다. 현재 CPU 점유율이 높으면 추론과 관련된 벤치마 크를 수행할 때의 하드웨어 리소스가 제한적일 수 있기 때문에, CPU 점유율이 낮은 순서대로 후보 노드 리스트 상의 후보 노드들이 정렬될 수 있다. 일 실시예에서, 후보 노드 리스트 상에서의 정렬 순서는 메모리 사용량의 크기에 기초하여 결정될 수 있다. 일 례로, 메모리 사용량의 크기가 작은 순서대로 정렬될 수 있다. 현재 메모리 사용량이 높으면 추론과 관련된 벤 치마크를 수행할 때의 하드웨어 리소스가 제한적일 수 있기 때문에, 메모리 사용량이 낮은 순서대로 후보 노드 리스트 상의 후보 노드들이 정렬될 수 있다. 일 실시예에서, 후보 노드 리스트 상에서의 후보 노드들의 정렬 순서는 복수의 인자들에 대한 우선순위에 기초 하여 결정될 수 있다. 예를 들어, 예상 레이턴시가 대한 우선순위가 CPU 점유율 및/또는 메모리 사용량에 대한 우선순위 보다 높을 수 있다. 이러한 예시에서, 후보 노드들 중 제 1 후보 노드와 제 2 후보 노드 간의 예상 레 이턴시 정보의 크기의 차이가 사전 결정된 임계 범위 내에 포함되는 경우 또는 예상 레이턴시 정보의 크기가 동 일한 경우, 상기 제 1 후보 노드와 상기 제 2 후보 노드의 메모리 사용량 및/또는 CPU 점유율에 기초하여 상기 제 1 후보 노드와 상기 제 2 후보 노드 간의 정렬 순서가 결정될 수 있다. 이러한 예시에서, 예상 레이턴시의 크기가 유사 범위 내에 속해 있는 후보 노드들은, 메모리 사용량 및/또는 CPU 점유율이 적은 순서대로 정렬될 수 있다. 일 실시예에서, 후보 노드 리스트 후보 노드들 각각의 식별 정보 뿐만 아니라 사용자가 후보 노드 리스트 상에 서 타겟 노드를 결정하는데 도움이 될 수 있는 성능 정보를 포함할 수 있다. 예를 들어, 후보 노드 리스트는, 후보 노드들 중 적어도 일부의 노드에 대한 CPU 코어의 사용량을 나타내는 파워 모드(power mode) 정보, 및/또 는 후보 노드들 중 적어도 일부의 노드에 대한 Fan 사용량을 나타내는 Fan 모드 정보를 포함할 수 있다. 예를 들어, 후보 노드 리스트는: 후보 노드들 각각에서 지원 가능한 적어도 하나의 모델에 대한 정보, 후보 노드들 각각에서 지원 가능한 적어도 하나의 모델이 설치되는데 필요한 라이브러리 정보, 및/또는 후보 노드들에 연결 된 전력 측정 센서로부터 획득되는 전력 사용량을 나타내는 전력 사용량 정보를 포함할 수 있다.일 실시예에서, 후보 노드에 대한 식별 정보는 후보 노드를 식별할 수 있는 하드웨어 정보를 포함할 수 있다. 예를 들어, 식별 정보는 하드웨어에 대응되는 제품명 뿐만 아니라, 설치된 실행환경 정보, 실행환경에 대한 라 이브러리 정보, 파워 모드(power mode) 정보, Fan 모드 정보, 현재 보드의 온도 정보 및/또는 현재 보드의 전력 사용량 정보를 포함할 수 있다. 일 실시예에서, 파워 모드 정보는 CPU 코어를 얼마나 사용하는지를 기준으로 결정될 수 있다. 예를 들어, CPU 코어를 전부 사용하는 경우 파워 모드 정보는 MAX로 결정될 것이고, 40W, 30W, 20W 및 10W 등과 같이 파워의 사 용량을 정량적으로 표현하는 방식으로 결정될 수도 있다. 예를 들어, 파워 모드 정보의 정량적인 양이 클수록 레이턴시가 적게 나올 수 있다. 다른 예시로 파워 모드가 MAX인 경우 파워 모드를 사용하지 않는 다른 노드에 비해 레이턴시가 적게 나올 수 있다. 일 실시예에서, Fan 모드 정보는 Null, Quite, Cool 및/또는 Max 등과 같이 Fan의 강도를 나타내는 정보의 형태 로 표현될 수 있다. 일례로, Fan 모드가 Quite인 경우, Fan 모드가 Null인 경우 보다 보드의 온도를 더 낮춰줄 수 있기 때문에, 레이턴시가 적게 나올 가능성이 높다. 일례로, Fan 모드가 Cool 모드인 경우 다른 모드에 비해 보드의 온도를 더 낮춰줄 수 있기 때문에, 레이턴시가 적게 나올 가능성이 높다. 일 실시예에서, 라이브러리 정보는 특정 노드에 설치된 실행 환경(예컨대 런타임) 정보가 설치되는데 필요한 라 이브러리 정보를 나타낼 수 있다. 노드의 특성에 따라 복수의 실행 환경들이 포함될 수 있으며, 이에 따라 라이 브러리 정보 또한 복수의 실행 환경들과 호환될 수 있다. 일 실시예에서, 현재 보드의 전력 사용량은 노드들에 연결된 전력 측정 센서로부터 획득되는 전력 사용량을 나 타낼 수 있다. 현재 보드의 전력 사용량의 값이 작을수록 해당 노드의 사용가능성이 높아진다는 것으로 해석될 수 있다. 일 실시예에서, 후보 노드 리스트에 포함되는 후보 노드를 결정하기 위한 다양한 방법론들이 존재할 수 있다. 본 개시내용의 일 실시예에 따른 후보 노드 결정 방식은 아래의 다양한 방법론들의 임의의 형태의 조합을 통해 구현될 수 있다. 예를 들어, 컴퓨팅 디바이스는 현재 벤치마크를 수행하지 않고 있거나 혹은 현재 벤치마크를 수행할 준비 가 된 노드들의 리스트를 후보 노드로 결정할 수 있다. 예를 들어, 컴퓨팅 디바이스는 결정된 타겟 모델(또는 결정된 타겟 모델 정보)을 지원할 수 있는 노드들을 후보 노드로 결정할 수 있다. 컴퓨팅 디바이스의 관리 하에 놓여 있는 노드들 중에서, 입력된 인공지능 기 반의 모델을 지원할 수 있는 노드들이 후보 노드로 결정될 수 있다. 예를 들어, 컴퓨팅 디바이스는 타겟 타입 정보에 대응되는 실행 환경을 지원할 수 있는 노드들 중에서 인 공지능 기반의 모델에 포함된 제 1 연산자를 지원하는 실행 환경을 가지고 있는 제 1 노드들을 후보 노드들로 결정할 수 있다. 예를 들어, 컴퓨팅 디바이스는 타겟 타입 정보에 대응되는 실행 환경을 가지는 노드들 중에서 인공지능 기 반의 모델에 포함된 제 1 연산자를 지원하지는 않지만 상기 제 1 연산자를 대체할 수 있는 상기 제 1 연산자와 상이한 제 2 연산자를 지원하는 실행 환경을 가지고 있는 제 2 노드들을 후보 노드들로 결정할 수 있다. 예를 들어, 컴퓨팅 디바이스는 인공지능 기반의 모델의 크기를 초과하는 메모리 공간을 가지고 있는 노드 들을 후보 노드들로 결정할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 특정 노드(예컨대, Jetson 계열의 하드웨어)가 후보 노드 리스트에 포 함되는 경우, 추가적인 인자를 고려하여 해당 노드에 대한 정렬을 수행할 수 있다. 예를 들어, Jetson 계열 등 과 같은 특정한 타입의 노드들에 대해서는 다른 타입의 노드들과는 구분되는 형태로 해당 노드들에 대한 별도의 정렬이 추가로 진행될 수 있다. 다른 예시로, 컴퓨팅 디바이스는 특정한 타입의 노드들에 대해서는 다른 타입의 노드들과의 정렬의 경우 예상 레이턴시를 기준으로 정렬하되 해당 타입에 대응되는 노드들이 유사한 범 위 내의 예상 레이턴시 값을 가지는 경우, Power 필드 및/또는 Fan 필드를 추가로 고려하여 정렬을 수행할 수 있다. 일례로, 컴퓨팅 디바이스는 Power 필드에 대응되는 인자를 추가로 고려하여 Power 필드가 많은 순서 대로 정렬을 수행할 수 있다. 일례로, 컴퓨팅 디바이스는 Jetson 계열과 같은 특정 노드에 대해서 Power 필드가 동일한 경우 또는 사전 결정된 임계 범위 내에 있는 경우 Fan의 동작의 크기 또는 강도를 기준으로 Fan 의 동작 크기가 큰 순서대로 노드들에 대한 추가적인 정렬을 수행할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트 중 특정한 노드를 선택하는 사용자 입력 데이터를 수 신할 수 있다. 컴퓨팅 디바이스는 사용자 입력 데이터에 포함된 선택된 노드들을 타겟 노드로 결정할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트 중에서 하나의 타겟 노드를 선택하는 사용자 입력 데 이터를 수신할 수 있다. 다른 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트 중에서 복수의 타겟 노드 들을 선택하는 사용자 입력 데이터를 수신할 수 있다. 다른 실시예에서, 컴퓨팅 디바이스는 후보 노드 리 스트에서 특정한 인자(예컨대, 레이턴시)를 기준으로 가장 높은 성능을 가지는 노드를 타겟 노드로 사용자 입력 없이 자동으로 선택할 수도 있다. 일 실시예에서, 컴퓨팅 디바이스는 타겟 모델을 상기 적어도 하나의 타겟 노드에서 실행함에 따라 획득되 는 벤치마크 결과를 제공할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 타겟 모델을 타겟 노드에서 추론한 결과를 포함하는 벤치마크 결과를 생성할 수 있다. 일 실시예에서, 하나의 노드가 타겟 노드로 결정된 경우, 해당 노드에 벤치마크 요청 정보가 전송될 수 있다. 일 실시예에서, 복수의 노드들이 타겟 노드로 결정된 경우, 복수의 노드들 각각에 벤치마크 요청 정보가 전송될 수 있다. 벤치마크 요청 정보는 벤치마크의 대상이 되는 타겟 모델에 대한 정보를 포함할 수 있다. 타겟 모델에 대한 정보는 예를 들어 모델과 관련된 파일 또는 링크, 및/또는 모델의 타겟 타입 정보를 포함할 수 있다. 일 실시예에서, 벤치마크 결과는 컴퓨팅 디바이스에 의해 생성되거나 또는 컴퓨팅 디바이스의 관리 하에 있는 다른 서버(예컨대, 복수의 노드들을 포함하는 서버)에 의해 수행될 수 있다. 일 실시예에서, 벤치마크 결과는 타겟 모델의 타겟 노드에서의 성능 정보를 포함할 수 있다. 일 실시예에서, 벤치마크 결과는 컴퓨팅 디바이스의 벤치마크 동작을 트리거링 또는 요청한 다른 컴퓨팅 디바이스의 모듈이 무엇인지에 따라 상이할 수 있다. 추가적인 실시예에서, 벤치마크 동작은 컴퓨팅 디바이스 의 벤치마크 동작을 트리거링 또는 요청한 다른 컴퓨팅 디바이스의 모듈이 무엇인지에 따라 상이할 수 있 다. 예를 들어, 컴퓨팅 디바이스의 벤치마크 동작을 트리거링한 모듈이 제 1 모듈인 경우, 컴퓨팅 디바이 스는 입력된 모델 전체를 대상으로 한 성능 정보를 제공하며 그리고 컴퓨팅 디바이스의 벤치마크 동 작을 트리거링한 모듈이 제 2 모듈인 경우, 컴퓨팅 디바이스는 입력된 모델 전체를 대상으로 한 성능 정보 를 제공하는 것과 함께 입력된 모델의 블록 단위의 성능 정보를 추가로 제공할 수 있다. 다른 예시로, 컴퓨팅 디바이스의 벤치마크 동작을 트리거링한 모듈이 제 1 모듈인 경우 컴퓨팅 디바이스는 입력된 데이터 셋에 대응되는 학습 모델 또는 컨버팅된 학습 모델을 실행시킬 타겟 노드를 결정하기 위한 벤치마크 결과를 제 공하며, 그리고 컴퓨팅 디바이스의 벤치마크 동작을 트리거링한 모듈이 제 2 모듈인 경우 컴퓨팅 디바이스 는 입력된 모델에 대응되는 경량화 모델을 생성하기 위해 사용되는 압축 설정 데이터를 포함하는 벤치마크 결과를 제공할 수 있다. 제한이 아닌 예시로, 컴퓨팅 디바이스의 벤치마크 동작을 트리거링하는 복수의 모듈들은: 입력된 데이터셋 을 기초로 하여 학습 모델을 생성하는 제 1 모듈, 입력된 모델을 압축함으로써 경량화 모델을 생성하는 제 2 모 듈, 및 입력된 모델을 적어도 하나의 타겟 노드에 디플로이하기 위한 다운로드 데이터를 생성하는 제 3 모듈을 포함할 수 있다. 일 실시예에서, 벤치마크 요청 정보는 모델에 대한 컨버팅 여부에 대한 정보를 포함할 수 있다. 벤치마크 요청 정보에 포함된 컨버팅 여부에 기초하여, 입력된 모델에 대한 컨버팅이 수행될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 인공지능 기반의 모델을 타겟 타입 정보에 대응되도록 컨버팅할 것으로 결정한 경우, 입력된 모델과 관련된 정보를 이용하여 복수의 컨버터들 중 특정 컨버터를 결정할 수 있다. 예를 들어, 컴퓨팅 디바이스는 입력된 모델의 모델 타입 정보와 타겟 타입 정보의 조합에 대응되는 컨버터 식별 정보를 결정할 수 있다. 결정된 컨버팅 식별 정보에 대응되는 컨버터가 결정되고 결정된 컨버터에 의해 컨버팅 동작이 수행될 수 있다. 예를 들어, 컴퓨팅 디바이스는 인공지능 기반의 모델에 대응되는 모델 파일, 및 모델 타입 정보와 타겟 타입 정보의 조합에 대응되는 컨버터 식별 정보를 이용하여, 상기 인공지능 기반의 모델 이 컨버팅된 타겟 모델을 획득할 수 있다. 전술한 바와 같이, 컨버팅이 수행되는 것으로 결정된 경우, 컨버팅 대상의 모델 파일 및 컨버팅을 수행할 컨버터를 식별하기 위한 정보(예컨대, 컨버팅 이전의 모델 타입과 컨버팅 이후의 모델 타입의 조합을 식별하기 위한 식별자)를 이용하여 컨버팅이 수행될 수 있다. 일례로, 전술한 컨버 팅은 컨버팅 디바이스(예컨대, 컨버팅 서버)에 의해 수행될 수 있다. 다른 예시로, 구현 양태에 따라서 전술한 컨버팅은 컴퓨팅 디바이스에 의해 수행될 수도 있다. 이러한 예 시에서, 컴퓨팅 디바이스는 프로젝트의 결과에 따른 모델 파일이 특정 타입(예컨대 Tensorrt)의 실행 환경 이 아닌 다른 타입(예컨대, Onnxruntime)의 실행 환경인 경우, 컴퓨팅 디바이스는 컨버팅 기능을 이용하여 다른 타입(예컨대 Onnxruntime)의 모델을 특정 타입(예컨대 Tensorrt)의 모델로 변환하여 컨버팅 결과에 따른 모델 파일을 제공할 수 있다. 일 실시예에서, 가상화된 운영 체제(virtual operating system) 상에서 컨버터 식별 정보에 대응되는 컨버터의 도커 이미지(docker image)를 이용하여 인공지능 기반의 모델이 타겟 모델로 컨버팅될 수 있다. 예를 들어, 컨 버팅을 수행하는 엔티티(예컨대, 컨버팅 서버 등)에서는 입력된 컨버터 식별 정보에 대응되는 Docker 이미지를 획득하고 그리고 Docker 내에서 컨버터의 sh 파일을 실행시킴으로써 모델의 컨버팅을 수행할 수 있다. 여기서의 sh 파일은 Docker 내에서 실행할 명령어들을 포함하는 파일을 나타낼 수 있다. 일 실시예에서, 벤치마크 결과는 시간과 관련된 제 1 타입의 정량 정보 및 메모리 사용과 관련된 제 2 타입의 정량 정보를 포함할 수 있다. 일 실시예에서, 타겟 모델을 적어도 하나의 타겟 노드에서 실행함에 따라 획득되는 벤치마크 결과는, 적어도 하 나의 타겟 노드에서 타겟 모델의 추론의 전처리를 위해 소요되는 전처리 시간 정보, 적어도 하나의 타겟 노드에 서 타겟 모델을 추론하는데 소요되는 추론 시간 정보, 적어도 하나의 타겟 노드에서 타겟 모델의 추론의 전처리 를 위해 사용되는 전처리 메모리 사용량 정보, 적어도 하나의 타겟 노드에서 타겟 모델을 추론하는데 사용되는 추론 메모리 사용량 정보, 적어도 하나의 타겟 노드에서 타겟 모델을 사전 결정된 횟수만큼 반복하여 추론함에 따라 획득되는, 추론 시간과 관련된 정량 정보, 및/또는 적어도 하나의 타겟 노드에서 타겟 모델을 추론함에 따 라 획득되는, NPU, CPU 및 GPU 각각에 대한 메모리 사용과 관련된 정량 정보를 포함할 수 있다. 일 실시예에서, 전처리 시간 정보는 예를 들어 모델을 불러오는 등과 같이 추론 동작이 수행되기 이전인 전처리 를 위해 소요되는 시간 정보를 포함할 수 있다. 추가적으로 전처리 시간 정보는, 추론에 대한 값을 측정하기 이 전에 GPU 등의 활성화를 위해 사전 추론을 사전 결정된 횟수 만큼 반복하였을 때의 사전 추론에 소요되는 시간 과 관련된 정량 정보(예컨대, 사전 추론에 소요되는 시간의 최소값, 최대값 및/또는 평균값)를 포함할 수도 있 다. 일 실시예에서, 추론 시간 정보는, 추론 과정에서 소요되는 시간 정보로서 예를 들어, 모델에 대한 최초 추론 동작에 소요되는 시간 정보 및/또는 사전결정된 횟수 만큼 반복하여 추론하였을 때의 추론 시간 정보 중 최소 시간 정보, 최대 시간 정보, 평균(average) 시간 정보 및/또는 중간(median) 시간 정보를 포괄하도록 사용될 수 있다. 추가적으로, 예를 들어, NPU에서 처리할 수 없는 연산을 CPU가 받아서 처리하는 상황에서 NPU가 유휴 (idle) 상태가 되는데, 추론 시간 정보는 NPU가 유휴 상태가 되었을 때의 제 1 사이클 값을 포함할 수 있다. 추 가적으로, 추론 시간 정보는 NPU에서 추론을 수행할 때의 제 2 사이클 값, 및/또는 제 1 사이클 값과 제 2 사이 클 값을 합산한 제 3 사이클 값을 포함할 수도 있다. 일 실시예에서, 벤치마크 결과 정보는 상기 전처리 메모리 사용량 정보와 상기 추론 시간과 관련된 정량 정보를 합산한 총 시간 정보 또한 포함할 수 있다. 일 실시예에서, 벤치마크 결과 정보는 RAM 사용량, ROM 사용량, 메모리 전체 사용량 및/또는 NPU에서 사용하는 SRAM 영역에 대한 정량값 등을 추가로 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 다수의 노드들이 타겟 노드로 선택됨에 따라 복수개의 벤치마크 결과가 생성되는 경우, 레이턴시를 기준으로 복수의 벤치마크 결과를 정렬할 수 있다. 예를 들어, 레이턴시가 가장 적 은 순서대로 벤치마크 결과가 정렬 및 출력될 수 있다. 추가적인 실시예에서, 레이턴시가 사전 결정된 유사 범 위 내에 있거나 혹은 동일한 복수의 노드들 각각에 대응되는 벤치마크 결과가 존재하는 경우, 메모리 사용량 및 /또는 CPU 점유율에 추가로 기초하여 벤치마크 결과들에 대한 정렬이 수행될 수 있다. 벤치마크 결과들에 대한 정렬은 후보 노드 리스트 상에서의 정렬과 관련된 특징을 포함할 수 있다. 일 실시예에서, 벤치마크 결과는 예를 들어 테이블 형태의 자료 구조를 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 연결된 복수의 노드들의 무선 통신의 가능 여부에 따라 벤치마크 요청 정보를 상이한 방식으로 전송할 수 있다. 무선 통신은 일례로 HTTP 통신을 포함할 수 있다. 예를 들어, 무선 통 신이 가능한 독립적인 노드에 벤치마크 요청을 전달하는 경우, 컴퓨팅 디바이스는 해당 노드 또는 해당 노 드와 관련된 서버에 벤치마크 요청 정보를 전송할 수 있다. 예를 들어, 무선 통신이 불가능한 노드에 벤치마크요청을 전달하고자 하는 경우, 컴퓨팅 디바이스는 무선 통신이 불가능한 노드가 USB/GPIO로 등을 통해 연 결되어 있는 무선 통신이 가능한 노드(예컨대, Rpi4)에 벤치마크 요청 정보를 전송할 수 있다. 벤치마크 요청 정보를 수신한 해당 노드(예컨대, HTTP 통신이 가능한 노드)는 USB/GPIO 연결을 통한 Serial 통신을 이용하여 연결된 벤치마크 대상이 되는 노드(즉, HTTP 통신이 불가능한 노드)에 프로그램을 실행하는 방식으로 벤치마크 결과가 획득될 수 있다. 실행하고자 하는 타겟 모델 타입에 해당하는 실행 환경을 무선 통신이 가능한 독립적인 노드에서 실행시키는 방식으로 사용 예상 메모리가 측정될 수 있다. 측정된 사용 예상 메모리와 벤치마크 요청 정보를 이용하여 벤치마크의 대상이 되는 무선 통신이 불가능한 노드에서 구동될 벤치마크 프로그램이 제작 및 컴파일될 수 있다. 제작 및 컴파일된 프로그램은 Serial 통신을 통해 벤치마크의 대상이 되는 무선 통신이 불가 능한 노드에 플래시(Flash)될 수 있다. 이러한 방식으로 무선 통신이 불가능한 노드에서의 벤치마크 결과가 획 득될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 외부에서 확인이 불가능한 노드(예컨대, 가상 노드 등)가 타겟 노드에 포함되는 경우 아래와 같은 방법을 통해 벤치마크 결과를 획득할 수 있다. 컴퓨팅 디바이스는 외부에서 확인이 불가능한 노드로부터 제 1 저전력 무선 신호를 수신하는 것에 대한 응 답으로, 타겟 모델을 상기 노드에서 벤치마크하기 위한 벤치마크 태스크를 포함하는 제 1 응답 메시지 (acknowledgment message)를 노드로 전송할 수 있다. 예를 들어, 제 1 저전력 무선 신호는 비콘 신호를 포함할 수 있다. 예를 들어, 제 1 저전력 무선 신호는 상기 노드가 벤치마크를 수행하고 있는지 여부, 상기 노드의 메 모리 사용량 및 상기 노드의 하드웨어 식별 정보를 포함할 수 있다. 컴퓨팅 디바이스는 상기 노드에 의해 생성된 벤치마크 결과를 포함하는 제 2 저전력 무선 신호(예컨대, 콜 백(callback) 신호)를 상기 노드로부터 수신할 수 있다. 추가적인 실시예에서, 컴퓨팅 디바이스는 콜백 신 호가 사전 결정된 임계 대기 시간 동안 수신되지 않는 경우, 상기 노드에서의 벤치마크 태스크가 실패하였다고 결정하고 그리고 상기 노드를 비활성(inactive) 상태로 설정할 수 있다. 컴퓨팅 디바이스는 비활성 상태로 설정된 노드로부터 제 3 저전력 무선 신호(예컨대, 비콘 신호)를 수신하는 것에 응답하여, 노드의 상태를 활성 (active) 상태로 설정할 수 있다. 여기서 상기 제 1 응답 메시지에 포함된 상기 벤치마크 태스크는, 노드가 다 운로드 받을 수 있는 타겟 모델 정보 및 노드가 다운로드 받은 상기 타겟 모델을 변환하는데 사용되는 노드 구 성(configuration) 정보를 포함할 수 있다. 또한, 노드에 의해 생성된 벤치마크 결과는, 노드 구성 정보 및 타 겟 모델 정보에 기초하여 상기 노드의 실행 환경 상에서 상기 타겟 모델을 실행함에 따라 획득되는 결과를 포함 할 수 있다. 도 9는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 9에서 도시되는 방법은 제 1 컴퓨팅 디바이스, 제 2 컴퓨팅 디바이스 및/또는 컴퓨팅 디바이스 에 의해 수행될 수 있다. 설명의 편의를 위해 이하에서 도 9의 방법이 컴퓨팅 디바이스에 의해 수행 되는 것으로 예시된다. 일 실시예에서, 컴퓨팅 디바이스는 사용자의 접속을 확인할 수 있다. 컴퓨팅 디바이스가 제공하 는 프로젝트, 플랫폼, 웹페이지 및/또는 모바일 페이지 등에서 사용자에 의한 접속이 가능하며, 컴퓨팅 디바이 스는 접속된 사용자로부터 입력된 데이터셋을 통해 학습 모델을 생성하고, 학습 모델을 압축하여 경량화 모델을 생성하고 그리고/또는 모델이 노드에 디플로이될 수 있도록 다운로드 데이터를 생성할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 모델 리스트를 제공할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 사용자로부터 모델 리스트를 요청하는 입력을 수신할 수 있으며, 이러 한 입력에 응답하여 사용자에게 제공될 모델 리스트를 생성할 수 있다. 일 실시예에서, 모델 리스트는 예를 들어, 벤치마크를 수행할 수 있는 모델들의 리스트, 데이터셋에 대한 학습 이 가능한 모델들의 리스트, 압축이 가능한 모델들의 리스트, 특정 인공지능 태스크에 적합한 모델들의 리스트, 사용자에게 추천되는 모델들의 리스트, 및/또는 사용자의 입력을 요청하는 모델들의 리스트를 포함할 수 있다. 일례로, 모델들의 리스트는 모델이 허용하는 입력 데이터의 크기 및/또는 모델 별 레이턴시 정보를 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 벤치마크 결과를 획득하고자 하는 모델에 대한 업로드를 요청할 수 있 다. 일례로 컴퓨팅 디바이스는 모델 파일, 데이터셋, 추론 태스크, 모델 파일에 대응되는 모델 타입 정보, 및/또는 벤치마크의 대상이 되는 타겟 타입 정보에 대한 입력 또는 업로드를 요청할 수 있다.일 실시예에서, 컴퓨팅 디바이스는 벤치마크를 수행하는데 있어서(예컨대, 후보 노드 리스트를 생성하는데 있어서 그리고/또는 벤치마크 결과를 획득하는데 있어서), 컨버팅이 필요한지 여부를 결정할 수 있다. 예 를 들어, 업로드된 모델의 타입 정보와 벤치마크의 대상이되는 타겟 타입 정보 간의 차이가 존재하면, 컨버팅이 필요하다고 결정될 수 있다. 다른 예시로, 컨버팅을 요청하는 사용자 입력이 존재하는 경우, 컴퓨팅 디바이스 는 컨버팅이 수행될 것으로 결정할 수 있다. 일 실시예에서, 컨버팅이 필요없다고 결정되는 경우, 모델에 대한 업로드와 함께 세부 정보에 대한 입력을 요청 할 수 있다. 예를 들어, 컴퓨팅 디바이스는 추론 태스크, 사용될 인공지능 기반의 모델의 포맷, 업로 드된 데이터셋의 저장 장소(예컨대, 로컬 저장소 및 클라우드 저장소), 학습 방식, 데이터셋의 용도(예컨대, 학습 용도, 검증 용도 및 테스트 용도), 타겟 레이턴시 및/또는 프로젝트의 명칭 등과 같은 세부 정보에 대한 입력을 요청할 수 있다. 일 실시예에서, 컨버팅이 필요하다고 결정되는 경우 모델에 대한 업로드와 함께 세부 정보에 대한 입력을 요청 하고 그리고 컨버팅 옵션을 제공할 수 있다. 예를 들어, 컨버팅 옵션은 사용자가 업로드한 모델이 다른 타 입의 모델로 컨버팅될 것을 알리거나 또는 컨버팅될 모델들 중 특정 모델을 선택하도록 유도하거나 또는 컨버팅 될 모델들 각각의 성능 정보를 제공하거나 또는 사용자로부터 컨버팅을 진행할 것을 확인하는 입력을 요청하는 것을 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 사용자로부터의 모델 선택 입력을 수신할 수 있다. 사용자로부터 의 모델 선택 입력은 복수의 추천되는 모델들 중 사용자로부터 선택된 모델에 대한 정보, 사용자로부터 선택된 컨버팅될 모델에 대한 정보 및/또는 사용자로부터 선택된 벤치마크의 대상이 되는 모델에 대한 정보를 포함할 수 있다. 다른 예시로, 모델 선택 입력은 타겟 모델 및 타겟 노드를 선택하는 입력을 포함할 수도 있다. 일 실시예에서, 컴퓨팅 디바이스는 벤치마크 요청을 수신할 수 있다. 예를 들어, 벤치마크 요청은 결 정된 타겟 모델에 대한 벤치마크를 진행하고자 하는 입력을 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 벤치마크 요청에 응답하여 타겟 노드에 대한 선택을 위해 후보 노드 리 스트를 제공할 수 있다. 후보 노드 리스트는 컴퓨팅 디바이스에 의해 생성되거나, 또는 컴퓨팅 디바 이스와 연결된 다른 컴퓨팅 디바이스에 의해 생성되어 컴퓨팅 디바이스에 저장된 데이터일 수 있다. 후보 노드 리스트에 대한 구체적인 설명은 상술된 도 4 및 도 8에 대한 설명으로 대체하기로 한다. 일 실시예에서, 컴퓨팅 디바이스는 후보 노드 리스트 상에서 타겟 노드를 선택하는 사용자 입력 및 벤치마 크 설정과 관련된 입력을 수신할 수 있다. 예를 들어, 후보 노드 리스트 상에서 적어도 하나의 타겟 노드 에 대한 선택이 허용될 수 있다. 예를 들어, 벤치마크 설정과 관련된 입력은, 벤치마크 결과에 포함될 정보, 추 론 과정에서의 배치(batch) 크기, 타겟 모델의 식별 정보, 타겟 모델의 소프트웨어 버전 정보, 타겟 디바이스의 하드웨어 식별 정보, 타겟 모델의 출력 데이터 타입(예컨대, FP32, FP16, INT8, INT4 등), 학습 과정에서의 모 델에 타겟 레이턴시, 학습 과정에서의 모델의 이미지 크기 및/또는 학습 에폭(epoch) 등을 포함할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 벤치마크 수행 요청을 수신할 수 있다. 벤치마크 수행 요청에 응 답하여, 컴퓨팅 디바이스는 타겟 모델을 타겟 디바이스에서 벤치마크 설정에 따라 실행함으로써 벤치마크 결과 정보를 생성할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 선택된 모델로 수행된 벤치마크 태스크들의 리스트를 제공할 수 있다 . 일 실시예에서, 단계 960은 단계 935에 응답하여 수행될 수 있거나 또는 단계 955에 응답하여 수행될 수 있다. 예를 들어, 단계 960에서의 벤치마크 태스크들의 리스트는 특정 모델을 기준으로 수행된 벤치마크 태스크 들의 벤치마크 결과 정보를 포함할 수 있다. 일례로, 특정 모델에 대해서 상이한 노드들에서 그리고/또는 상이 한 시점에 벤치마크가 이루어진 벤치마크 결과 정보의 리스트가 단계 960에서의 벤치마크 태스크들의 리스트에 대응될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 선택된 노드로 수행된 벤치마크 태스크들의 리스트를 제공할 수 있다 . 예를 들어, 단계 965에서의 벤치마크 태스크들의 리스트는 특정 노드를 기준으로 수행된 벤치마크 태스 크들의 벤치마크 결과 정보들을 포함할 수 있다. 일례로, 특정 노드에 대해서 상이한 모델들에 대하여 그리고/ 또는 상이한 시점에 벤치마크가 이루어진 벤치마크 결과 정보의 리스트가 단계 965에서의 벤치마크 태스크들의 리스트에 대응될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 벤치마크 결과 정보를 제공할 수 있다. 벤치마크 결과 정보에 대 한 구체적인 설명은 도 4 및 도 8에서 상술된 내용으로 대체하기로 한다. 도 10은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 10에서 도시되는 엔티티들(1000a, 1000b, 1000c, 1000d 및 1000e)는 설명의 목적으로 예시된 것으로서, 구 현 양태에 따라 추가적인 엔티티들이 벤치마크 결과를 제공하기 위한 방법을 구현하는데 사용될 수 있거나 상기 엔티티들 중 일부가 제외 또는 통합될 수도 있다. 예를 들어, 제 2 컴퓨팅 디바이스(1000b), 제 1 컴퓨팅 디바 이스(1000c), 컨버팅 디바이스(1000d) 및 노드(1000e) 중 적어도 두개의 엔티티들은 하나의 엔티티로 통합될 수 잇다. 다른 예시로, 제 2 컴퓨팅 디바이스(1000b) 및 제 1 컴퓨팅 디바이스(1000c) 중 적어도 하나는 복수의 컴 퓨팅 디바이스로 분할되어 동작될 수 있다. 일 실시예에서, 사용자(1000a)는 유무선 통신이 가능한 단말 등과 같은 컴퓨팅 디바이스를 통해 제 2 컴퓨팅 디 바이스(1000b)에 액세스하는 엔티티를 포함할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)와 상호작용 가능한 엔티티를 포함할 수 있다. 예 를 들어, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)가 제 2 컴퓨팅 디바이스(1000b), 제 1 컴퓨팅 디바이스 (1000c) 컨버팅 디바이스(1000d) 및 노드(1000e) 중 적어도 하나와 관련된 프로젝트를 선택 및 향유할 수 있도 록 사용자 인터페이스를 제공할 수 있다. 예를 들어, 제 2 컴퓨팅 디바이스(1000b)의 사용자 인터페이스를 통해 사용자(1000a)로부터의 모델 선택, 노드 선택, 벤치마크 설정, 압축 방식 설정 및/또는 학습 방식 선택 등과 같 은 다양한 입력들이 수신될 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)에게 인공지 능 기반의 모델에 대한 모델링 프로젝트, 압축 프로젝트, 모델의 디플로이를 위한 다운로드 데이터 생성 프로젝 트 및/또는 벤치마크 프로젝트 등과 같은 다양한 프로젝트를 제공할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 제 1 컴퓨팅 디바이스(1000c)의 동작을 트리거링하도록 구성될 수 있다. 이에 따라, 제 2 컴퓨팅 디바이스(1000b)로부터의 신호에 응답하여 제 1 컴퓨팅 디바이스(1000c)의 벤 치마크와 관련된 동작이 수행될 수 있다. 추가적인 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 컨버팅 디바이 스(1000d) 및 노드(1000e)와 상호작용 할 수도 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 도 3에서 의 제 2 컴퓨팅 디바이스와 대응될 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스(1000c)는 벤치마크 결과를 제 2 컴퓨팅 디바이스(1000b) 및/또는 사용자 (1000a)에 제공할 수 있다. 제 1 컴퓨팅 디바이스(1000c)는 컨버팅 디바이스(1000d) 및/또는 노드(1000e)와의 상호작용을 통해 사용자(1000a)가 원하는 모델 및 노드에 대한 벤치마크 결과를 획득할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스(1000c)는 선택된 노드 정보 및 선택된 모델 정보에 기반하여 대응되는 벤치 마크 결과를 획득할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스(1000c)는 도 3에서의 제 1 컴퓨팅 디바이스 와 대응될 수 있다. 일 실시예에서, 컨버팅 디바이스(1000d)는 모델에 대한 컨버팅 동작을 수행할 수 있다. 구현 양태에 따라 컨버 팅 디바이스(1000d)는 별도로 존재하거나, 또는 제 2 컴퓨팅 디바이스(1000b) 및/또는 제 1 컴퓨팅 디바이스 (1000c) 중 적어도 하나에 통합된 형태로 존재할 수도 있다. 일 실시예에서, 컨버팅 디바이스(1000d)는 도 3에 서의 컨버팅 디바이스와 대응될 수 있다. 일 실시예에서, 노드(1000e)는 하나 이상의 노드들을 포함할 수 있다. 노드(1000e)는 선택된 모델이 벤치마크되 는 대상을 나타낼 수 있다. 일 실시예에서, 노드(1000e)는 제 1 컴퓨팅 디바이스(1000c) 및/또는 제 2 컴퓨팅 디바이스(1000b)의 관리 하에 놓여질 수 있다. 이러한 경우, 제 1 컴퓨팅 디바이스(1000c) 및/또는 제 2 컴퓨팅 디바이스(1000b)로부터의 벤치마크 요청에 응답하여, 대응되는 노드에서의 벤치마크가 실행되고 그리고 노드 (1000e)는 벤치마크 결과 정보를 제 1 컴퓨팅 디바이스(1000c) 및/또는 제 2 컴퓨팅 디바이스(1000b) 중 적어도 하나로 전송할 수 있다. 일 실시예에서, 노드(1000e)는 제 1 컴퓨팅 디바이스(1000c) 및/또는 제 2 컴퓨팅 디바 이스(1000b)에 포함된 형태로 동작 가능하다. 일 실시예에서, 사용자(1000a)는 제 2 컴퓨팅 디바이스(1000b)에 접속하여 제 2 컴퓨팅 디바이스(1000b)가 제공 하는 사용자 인터페이스를 통해 모델을 업로드할 수 있다. 일례로, 모델을 업로드한다는 것은 데이터셋을 업로드하거나 또는 데이터셋을 다운로드받을 수 있는 링크를 전달하는 것을 포함할 수 있다. 일례로, 모델을 업 로드한다는 것은 모델링된 모델 파일 또는 모델링된 모델 파일을 다운로드받을 수 있는 링크를 전달하는 것을 포함할 수 있다. 일례로, 모델을 업로드한다는 것은 추론 태스크 정보, 벤치마크의 대상이 되는 타겟 모델 정보 및/또는 업로드된 모델에 대응되는 모델 타입 정보를 전달하는 것 또한 포함할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)로부터 모델 리스트 요청을 수신할 수 있다 (1010a). 모델 리스트는 모델링이 가능한 또는 벤치마크 수행이 가능한 복수의 모델들에 대한 정보를 포함할 수 있다. 일례로, 모델 리스트에 포함되는 모델들에 대한 정보는 사용자(1000a)에 의해 입력된 벤치마크 태스크 및 /또는 데이터셋에 기초하여 결정될 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 모델링이 가능한 또는 벤치마크 수행이 가능한 복수의 모델들에 대한 정보를 포함하는 모델 리스트를 제공할 수 있다(1010b). 예를 들어, 복수의 모델들에 대한 정보는, 모델의 식별자, 모델에 입력가능한 데이터의 크기, 모델의 추론 방식, 모델의 학습 방식, 모델의 신경망 구조, 모델의 특징, 모델의 성능과 관련된 정량 정보 및/또는 모델에 적합한 노드 정보를 포함할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)로부터 모델 리스트 상에서 적어도 하나의 모델을 선택하는 사용자 입력을 수신할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 모델을 선택하는 사용자 입력에 응답하여 선택된 모델 정보 를 저장할 수 있다. 예를 들어, 선택된 모델 정보은 벤치마크하고자 하는 모델 타입, 학습시키고자 하는 모델 타입, 압축시키고자 하는 모델 타입, 디플로이하고자 하는 모델 타입, 모델 파일, 모델 식별자, 및/ 또는 데이터셋에 대응되는 모델 타입을 포함할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 모델을 선택하는 사용자 입력에 응답하여 선택된 모델 정보 에 대응되는 후보 노드 리스트를 제공할 수도 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 모델 을 선택하는 사용자 입력에 응답하여 선택된 모델 정보를 제 1 컴퓨팅 디바이스(1000c)로 전달할 수도 있 다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)로부터 노드 리스트 요청을 수신할 수 있다 (1025a). 제 2 컴퓨팅 디바이스(1000b)는 제 1 컴퓨팅 디바이스(1000c)로 노드 리스트 요청을 전송할 수 있다 (1025b). 제 1 컴퓨팅 디바이스(1000c)는 제 2 컴퓨팅 디바이스(1000b)로 노드 리스트를 제공할 수 있다 (1025c). 제 2 컴퓨팅 디바이스(1000c)는 사용자(1000c)로 노드 리스트를 제공할 수 있다(1025d). 일 실시예에 서, 노드 리스트는 복수의 노드들 중 벤치마크를 수행할 준비가 된 노드들의 리스트를 포함할 수 있다. 일 실시 예에서, 노드 리스트는 복수의 노드들 중 선택된 모델 정보에 대응되는 후보 노드들의 리스트를 포함할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)로부터 노드 선택 입력을 수신할 수 있다. 노드 선택 입력은 제공받은 노드 리스트 상에서 적어도 하나의 노드(예컨대, 적어도 하나의 타겟 노드)를 선택 하는 입력을 의미할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 노드를 선택하는 사용자 입력에 응답하여 선택된 노드 정보 를 저장할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 노드를 선택하는 사용자 입력에 응답 하여 선택된 노드 정보를 제 1 컴퓨팅 디바이스(1000c)로 전달할 수도 있다. 일 실시예에서, 노드 리스트 상에서 사용자(1000a)가 선택하고자 하는 타겟 노드가 존재하지 않을 수 있거나, 또는 사용자(1000a)가 특정한 노드를 새롭게 등록하고자 하거나, 또는 사용자(1000a)가 선택된 노드 정보 이외의 추가 노드에 대한 벤치마크를 하고자 하는 상황이 존재할 수 있다. 제 2 컴퓨팅 디바이스(1000b)는 사용 자(1000a)로부터 노드 등록 요청을 수신할 수 있다(1040a). 제 2 컴퓨팅 디바이스(1000b)는 제 1 컴퓨팅 디바이 스(1000c)로 노드 등록 요청을 전송할 수 있다(1040b). 제 1 컴퓨팅 디바이스(1000c)는 노드 등록 요청에 응답 하여 대응되는 노드에 관한 정보를 디바이스들과 관련된 DB에 등록 또는 저장할 수 있다. 제 1 컴퓨팅 디바이스 (1000c)는 등록 또는 저장된 노드를 포함하는 노드 리스트를 제 2 컴퓨팅 디바이스(1000b)로 제공할 수 있다. 제 2 컴퓨팅 디바이스(1000b)는 수신된 노드 리스트를 사용자(1000a)로 제공할 수 있다. 일 실시예에서, 노드 리스트는 복수의 노드들 중 벤치마크를 수행할 준비가 된 노드들의 리스트를 포함할 수 있다. 일 실시예에서, 노드 리스트는 복수의 노드들 중 선택된 모델 정보에 대응되는 후보 노드들의 리스트를 포함할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)로부터 노드 선택 입력을 수신할 수 있다. 노드 선택 입력은 제공받은 노드 리스트 상에서 적어도 하나의 노드(예컨대, 적어도 하나의 타겟 노드)를 선택 하는 입력을 의미할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 노드를 선택하는 사용자 입력에 응답하여 선택된 노드 정보를 저장할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 노드를 선 택하는 사용자 입력에 응답하여 선택된 노드 정보를 제 1 컴퓨팅 디바이스(1000c)로 전달할 수도 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 사용자(1000a)로부터 선택된 정보로 벤치마크를 진행하고자 하 는 요청을 수신할 수 있다. 일 실시예에서, 선택된 정보는 선택된 모델 정보, 선택된 노드 정보, 및/또는 선택된 노드 정보을 포함할 수 있다. 예를 들어, 단계 1055에서의 벤치마크 요청은 하나 의 선택된 모델을 복수의 선택된 노드들(1035 및 1050)에서 벤치마크하고자 하는 요청을 포함할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 선택된 모델을 제 1 컴퓨팅 디바이스(1000c)로 전송할 수 있다 . 일 실시예에서, 제 1 컴퓨팅 디바이스(1000c)는 수신된 모델을 저장할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스(1000b)는 선택된 노드에 대한 벤치마크 요청을 제 1 컴퓨팅 디바이스(1000c)로 전송할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스(1000c)는 수신된 모델에 대한 컨버팅 여부를 결정할 수 있다. 제 1 컴퓨팅 디바이스(1000c)는 수신된 모델 정보 및 선택된 노드 정보에 기초하여 모델에 대한 컨버팅 여부를 결정 할 수 있다. 예를 들어, 제 1 컴퓨팅 디바이스(1000c)는 수신된 모델이 선택된 노드에서 지원되는지 여부 또는 수신된 모델에 포함된 연산자가 선택된 노드에서 지원되는지 여부에 기초하여 컨버팅 여부를 결정할 수 있다. 예를 들어, 수신된 모델이 선택된 노드에서 지원되지 않을 수 있다. 이러한 경우, 제 1 컴퓨팅 디바이스(1000 c)는 수신된 모델에 대한 컨버팅 여부 또는 수신된 모델에 포함된 연산자들 중 적어도 일부에 대한 컨버팅 여부 를 결정할 수 있다. 다른 예시로, 제 1 컴퓨팅 디바이스(1000c)는 수신된 모델이 선택된 노드에서 지원되지 않 는 경우, 수신된 모델에 대한 컨버팅이 필요하다고 결정하거나 또는 선택된 노드를 다른 노드로 변경할 것을 결 정할 수도 있다. 일 실시예에서, 컨버팅이 필요한 것으로 결정된 경우, 제 1 컴퓨팅 디바이스(1000c)는 컨버팅 디바이스(1000d) 로 모델 컨버팅을 요청할 수 있다. 예를 들어, 모델 컨버팅 요청에는 컨버팅의 대상이 되는 모델의 타입 과 컨버팅 이후의 모델의 타입 간의 조합을 나타내는 컨버팅 식별 정보를 포함할 수 있다. 일 실시예에서, 컨버팅 디바이스(1000d)는 모델 컨버팅 요청에 응답하여, 모델을 컨버팅할 수 있다. 예를 들어, 컨버팅 디바이스(1000d)는 복수의 컨버터들 중에서 모델 컨버팅 요청에 포함된 컨버팅 식별 정보에 대응 되는 컨버터를 결정하고 그리고 결정된 컨버터를 이용하여 모델에 대한 컨버팅을 수행할 수 있다. 컨버팅 디바 이스(1000d)는 컨버팅된 모델을 생성할 수 있다. 일 실시예에서, 컨버팅 디바이스(1000d)는 컨버팅된 모델을 제 1 컴퓨팅 디바이스(1000c)로 전송할 수 있다. 제 1 컴퓨팅 디바이스(1000c)는 컨버팅된 모델로부터 타겟 노드를 결정하거나 또는 명확화 또는 구체화 하고 그리 고 타겟 노드에 대한 가용성을 체크할 수 있다. 예를 들어, 만약 결정된 타겟 노드가 현재 다른 벤치마크 태스크를 실행하고 있거나 또는 타겟 노드의 가용 메모리 또는 가용 CPU가 사전 결정된 양만큼 존재하지 않는 경우, 제 1 컴퓨팅 디바이스(1000c)는 벤치마크 요청을 큐(queue)에 넣어두고, 타겟 노드가 가용화될 때 벤치마 크 요청을 발행할 수 있다. 일 실시예에서, 결정된 타겟 노드가 가용한 상태에 있는 경우, 제 1 컴퓨팅 디바이스(1000c)는 벤치마크 요청을 노드(1000e)로 전송할 수 있다. 예를 들어, 벤치마크 요청은 타겟 모델 및 타겟 노드에 대한 정보를 포함할 수 있다. 일 실시예에서, 노드(1000e)는 벤치마크 요청에 포함된 정보에 기초하여 타겟 모델에 대한 벤치마크를 수행하고 벤치마크 결과를 생성할 수 있다. 벤치마크 결과에 대한 구체적인 설명은 도 4 및 도 8에 기재된 내용으로 대체 하기로 한다. 노드(1000e)는 벤치마크 결과를 제 1 컴퓨팅 디바이스(1000c)로 제공할 수 있다. 제 1 컴퓨 팅 디바이스(1000c)는 벤치마크 결과를 제 2 컴퓨팅 디바이스(1000b)로 제공할 수 있다. 제 2 컴퓨팅 디 바이스(1000b)는 벤치마크 결과를 사용자(1000a)에게 제공할 수 있다. 도 11은 본 개시내용의 일 실시예에 따라 외부에서 확인되지 않는 노드에 대한 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 11에서 도시되는 실시예들은 예컨대 가상 노드 등과 같이 외부에서 확인되지 않는 노드이 타겟 노드로 서 벤치마크를 수행하게 되는 경우 제 1 컴퓨팅 디바이스, 제 2 컴퓨팅 디바이스 및 노드 간 의 상호작용을 나타낸다. 도 11에서의 설명들 중 도 3 내지 도 10와 중복되는 내용에 대해서는 설명의 중복을 피하기 위하여 설명을 생략 하고 상술된 설명들로 대체하기로 한다. 일 실시예에서, 벤치마크 결과를 제공하기 위한 시스템은 제 1 컴퓨팅 디바이스 및 노드를 포함할 수 있다. 다른 예시로, 벤치마크 결과를 제공하기 위한 시스템은 제 2 컴퓨팅 디바이스, 제 1 컴퓨팅 디바이스 및 노드를 포함할 수도 있다. 다른 예시로, 벤치마크 결과를 제공하기 위한 시스템는 제 1 컴퓨팅 디바이스를 포함하고 제 2 컴퓨팅 디바이스(1130 및 노드는 시스템 의 외부에 존재할 수도 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 수신된 벤치마크 요청에 포함된 타겟 노드의 식별 정보를 기반으 로 타겟 노드가 외부에서 확인이 불가능한 노드인지 또는 타겟 노드가 외부에서 확인이 가능한 노드인지 또는 타겟 노드가 무선 통신(예컨대 HTTP 통신 등)이 가능한 노드인지 결정할 수 있다. 만약, 타겟 노드가 외부에서 확인이 불가능한 노드로 결정되는 경우, 본 개시내용의 일 실시예에 따른 기법은 도 11에 따른 예시적인 방법에 의해 구현될 수 있다. 여기서의 “외부”는 예를 들어 노드가 접속하고 있는 네트워크의 외부를 의미할 수 있다. 예를 들어, 외 부에서 확인되지 않는 노드는, 네트워크 외부에서 네트워크 내부의 기기들에 접속할 수 없는 상태에 있는 노드, 외부에서 네트워크 접근이 불가능한 노드, 또는 외부에서는 볼 수 없고 비콘 신호를 통해 확인이 가능한 노드, 또는 외부에서 네트워크 접근이 불가능하여 노드에 의해 발신되는 비콘 신호를 통해 확인이 가능한 노드, 또는 가상 노드를 포괄하는 의미로 사용될 수 있다. 일 실시예에서, 노드는 주기적으로 비콘 신호와 같은 저전력 신호를 외부(예컨대, 제 1 컴퓨팅 디바이스 )로 전송할 수 있다. 제한이 아닌 예시로, 노드에 의해 전송되는 비콘 신호의 전송 주기는 3분, 2 분, 1분, 30초 및/또는 20초 등으로 다양한 값을 가질 수 있다. 제 1 컴퓨팅 디바이스는 노드와 이 러한 저전력 신호를 전송하고 수신하는 방식으로 노드와 상호작용 가능하며, 저전력 신호 내에 특정한 데 이터(예컨대, 벤치마크 결과 정보, 벤치마크 할당을 위한 정보, 벤치마크 수행의 가능 여부를 나타내는 정보, 노드 등록 정보 등)를 포함시키는 방식으로 노드와의 벤치마크 동작이 수행될 수 있다. 도 11에서 도시되는 엔티티들(1110, 1120 및 1130)는 설명의 목적으로 예시된 것으로서, 구현 양태에 따라 추가 적인 엔티티들이 외부에서 확인되지 않는 노드에 대한 벤치마크 결과를 제공하기 위한 방법을 구현하는데 사용 될 수 있거나 상기 엔티티들 중 일부가 제외 또는 통합될 수도 있다. 예를 들어, 제 2 컴퓨팅 디바이스, 제 1 컴퓨팅 디바이스, 및 노드 중 적어도 두개의 엔티티들은 하나의 엔티티로 통합될 수 잇다. 다 른 예시로, 제 2 컴퓨팅 디바이스 및 제 1 컴퓨팅 디바이스 중 적어도 하나는 복수의 컴퓨팅 디바 이스로 분할되어 동작될 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스는 사용자 및 제 1 컴퓨팅 디바이스와 상호작용 가능한 엔티 티를 포함할 수 있다. 예를 들어, 제 2 컴퓨팅 디바이스는 사용자가 프로젝트를 선택 및 향유할 수 있도 록 사용자 인터페이스를 제공할 수 있다. 예를 들어, 제 2 컴퓨팅 디바이스의 사용자 인터페이스를 통해 사용자로부터의 모델 선택, 노드 선택, 벤치마크 설정, 압축 방식 설정 및/또는 학습 방식 선택 등과 같은 다양 한 입력들이 수신될 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스는 사용자에게 인공지능 기반의 모델 에 대한 모델링 프로젝트, 압축 프로젝트, 모델의 디플로이를 위한 다운로드 데이터 생성 프로젝트 및/또는 벤 치마크 프로젝트 등과 같은 다양한 프로젝트를 제공할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스는 제 1 컴퓨팅 디바이스의 동작을 트리거링하도록 구성될 수 있다. 이에 따라, 제 2 컴퓨팅 디바이스로부터의 신호에 응답하여 제 1 컴퓨팅 디바이스의 벤치마 크와 관련된 동작이 수행될 수 있다. 추가적인 실시예에서, 제 2 컴퓨팅 디바이스는 노드와 상호작 용 할 수도 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스는 도 3에서의 제 2 컴퓨팅 디바이스 및/또 는 도 10에서의 제 2 컴퓨팅 디바이스(1000b)와 대응될 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 벤치마크 결과를 제 2 컴퓨팅 디바이스 및/또는 사용자에 제공할 수 있다. 제 1 컴퓨팅 디바이스는 노드와의 상호작용을 통해 제 2 컴퓨팅 디바이스으 로부터 수신된 모델 및 노드에 대한 벤치마크 결과를 획득할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스 는 선택된 노드 정보 및 선택된 모델 정보에 기반하여 대응되는 벤치마크 결과를 획득할 수 있다. 일 실 시예에서, 제 1 컴퓨팅 디바이스는 도 3에서의 제 1 컴퓨팅 디바이스 및/또는 도 10에서의 제 1 컴 퓨팅 디바이스(1000c)와 대응될 수 있다. 일 실시예에서, 노드는 하나 이상의 노드들을 포함할 수 있다. 노드는 제 1 컴퓨팅 디바이스(111 0)에 포함된 형태로 동작 가능할 수 있다. 노드는 선택된 모델이 벤치마크되는 대상을 나타낼 수 있다. 일 실시예에서, 노드는 제 1 컴퓨팅 디바이스 및/또는 제 2 컴퓨팅 디바이스의 관리 하에 놓 여질 수 있다. 이러한 경우, 제 1 컴퓨팅 디바이스 및/또는 제 2 컴퓨팅 디바이스로부터의 벤치마 크 요청에 응답하여, 대응되는 노드에서의 벤치마크가 실행되고 그리고 노드는 벤치마크 결과 정보를 제1 컴퓨팅 디바이스 및/또는 제 2 컴퓨팅 디바이스 중 적어도 하나로 전송할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 노드로부터 저전력 신호를 수신할 수 있다. 예를 들어, 저 전력 신호는 비콘 신호를 포함할 수 있다. 예를 들어, 여기서의 저전력 신호는 노드의 식별 정보를 포함 할 수 있다. 다른 예시로, 저전력 신호는 해당 노드를 제 1 컴퓨팅 디바이스 상에 등록하고자 하는 등록 요청을 포함할 수 있다. 제 1 컴퓨팅 디바이스는 노드로부터 수신된 저전력 신호에 응답하여 해당 노드를 저장 또는 등록할 수 있다. 예를 들어, 제 1 컴퓨팅 디바이스는 노드로부터 수 신된 저전력 신호에 포함된 노드의 식별 정보가 자신의 DB에 등록되어 있는지 여부를 결정할 수 있다. 만 약 노드의 식별 정보가 자신의 DB에 등록되지 않는 경우, 컴퓨팅 디바이스는 해당 노드를 DB 에 저장 및 등록시킬 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 저전력 신호에 응답하여 응답 메시지를 노드로 전송할 수 있다. 제 1 컴퓨팅 디바이스는 저전력 신호에 대응되는 노드를 활성 상태로 설정할 수 있다. 예를 들어, 활성 상태는 벤치마크 동작이 가능한 상태를 의미할 수 있다. 예를 들어, 활성 상태는 벤치마크 동작을 위한 통신이 가능한 상태를 의미할 수 있다. 예를 들어, 활성 상태는 CPU 점유율 및/또는 메모리 사용량 등을 고려하여 현재 벤치마크 태스크를 수행할 수 있는 상태를 의미할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스는 제 1 컴퓨팅 디바이스로 제 1 벤치마크 요청을 전송할 수 있다. 예를 들어, 제 1 벤치마크 요청은 벤치마크하고자 하는 모델 및 노드와 관련된 정보를 포함할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 제 1 벤치마크 요청에 포함된 노드 정보에 기초하여 복수 의 노드들 중 어떤 노드로 제 1 벤치마크 요청을 전송할지 결정할 수 있다. 예를 들어, 제 1 벤치마크 요청에 포함된 노드가 외부에서 확인이 불가능한 노드인 경우, 제 1 컴퓨팅 디바이스는 제 1 벤치마크 요 청에 대해서 도 11에서 예시되는 방법을 통해 노드와 상호작용할 것으로 결정할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 제 1 벤치마크 요청을 분석함으로써 제 1 벤치마크 요청에 포함 된 모델에 대한 컨버팅 여부를 결정할 수 있다. 컨버팅할 필요가 있다고 결정되는 경우 제 1 컴퓨팅 디바이스 는 제 1 벤치마크 요청에 포함된 모델에 대한 컨버팅 결과를 획득할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 제 1 벤치마크 요청에 응답하여, 제 1 벤치마크 요청 에 대응되는 벤치마크 결과를 획득하기 위하여 노드와 상호작용할 수 있다. 다른 실시예에서, 제 1 컴퓨팅 디바이스는 제 1 벤치마크 요청에 응답하여, 제 1 벤치마크 요청에 대응되는 후보 노 드 리스트를 획득하기 위하여 노드와 상호작용할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 노드로부터 저전력 신호가 수신될 때 까지 제 1 벤치마크 요청에 대응되는 벤치마크 동작을 대기할 수 있다. 전술한 바와 같이, 노드는 외부에서 확인 이 되지 않고 예컨대 비콘 신호 등을 통해 통신이 가능한 노드이기 때문에, 제 1 컴퓨팅 디바이스는 노드 로부터 후속적인 저전력 신호를 수신할 때 까지 벤치마크에 대한 추가 동작을 대기할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 노드로부터 후속적인 저전력 신호를 수신할 수 있다 . 단계 1145에서 수신된 저전력 신호는 예를 들어, 노드에 의해 주기적으로 또는 반복적으로 발송 되는 비콘 신호를 포함할 수 있다. 이러한 비콘 신호에는 노드가 현재 벤치마크를 수행하고 있는지 여부, 노드의 메모리 사용량, 노드의 CPU 점유율 및/또는 노드의 식별 정보가 포함될 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 저전력 신호에 대한 응답으로, 대기중인 제 1 벤치마크 요청에 대응되는 벤치마크 태스크를 할당하기 위한 응답 메지시를 생성할 수 있다. 이러한 응답 메시지는 상기 저전력 신호에 포함된 노드의 식별 정보에 기초하여 제 1 컴퓨팅 디바이스에서 노드로 전달 될 수 있다. 예를 들어, 응답 메시지에 포함된 벤치마크 태스크는, 노드가 다운로드 받을 수 있는 타겟 모델 정보 및 노드가 다운로드 받은 타겟 모델을 변환하는데 사용되는 노드 구성(configuration) 정보를 포함할 수 있다. 일 실시예에서, 노드는 제 1 벤치마크 요청에 대응되는 제 1 벤치마크를 실행할 수 있다. 노드 는 제 1 벤치마크를 실행함에 따라 획득되는 제 1 벤치마크 결과를 저전력 신호(예컨대, 콜백 신호)를 통 해 제 1 컴퓨팅 디바이스로 전달할 수 있다. 제 1 벤치마크 결과는, 노드 구성 정보 및 타겟 모델 정보에 기초하여 노드의 실행 환경 상에서 타겟 모델을 실행함에 따라 획득되는 결과를 포함할 수 있다. 예를 들어, 콜백 신호 또한 비콘 신호의 형태를 가질 수 있다. 콜백 신호(저전력 신호)에는 노드에 의해 수행된 벤치마크 결과 정보가 포함될 수 있다. 저전력 신호는 벤치마크를 수행한 결과를 포함할 수 있다. 벤치마크 결과 정보에 대한 구체적인 내용은 설명의 중복을 피하기 위해 도 4 및 도 8에서의 설명으로 대체하기로 한다. 제 1 벤치마크 결과는 제 1 컴퓨팅 디바이스로부터 제 2 컴퓨팅 디바이스로 전달될 수 있다 . 일 실시예에서, 제 2 컴퓨팅 디바이스는 제 2 벤치마크 요청을 제 1 컴퓨팅 디바이스로 전달할 수 있다. 예를 들어, 제 2 컴퓨팅 디바이스는 복수의 사용자들로부터의 벤치마크 요청을 제 1 컴퓨팅 디바이스에게 순차적으로 전달할 수 있다. 이러한 예시에서 제 1 벤치마크 요청은 제 1 사용자에 대응되는 벤치마크 요청이며, 그리고 제 2 벤치마크 요청은 제 2 사용자에 대응되는 벤치마크 요청일 수 있다. 다른 예시로, 제 2 컴퓨팅 디바이스는 하나의 사용자로부터의 복수의 벤치마크 요청들을 제 1 컴퓨 팅 디바이스에게 순차적으로 전달할 수 있다. 도 11의 예시에서는 제 1 벤치마크 요청에 대응되는 벤치마크 결과 정보가 제 2 컴퓨팅 디바이스로 전달되기 전에 제 2 벤치마크 요청이 제 1 컴퓨팅 디바이스로 전송될 수 있다. 제 1 컴퓨팅 디바이스는 제 2 벤치마크 요청에 응답하여 저전력 신호가 수신될 때까지 벤치마크를 대기할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 노드 로부터 수신된 저전력 신호에 대한 응답으로 제 2 벤치마크 요청에 대응되는 벤치마크 태스크를 노 드에 할당하기 위한 응답 메시지를 노드로 전송할 수 있다. 일례로, 제 2 컴퓨팅 디바이스 로 제 1 벤치마크 결과가 전송되기 이전에 제 2 벤치마크 요청을 할당하기 위한 응답 메시지가 노 드로 전달될 수 있다. 이러한 예시에서, 제 1 벤치마크 요청에 대응되는 제 1 벤치마크 결과가 포함된 저 전력 신호에 대응되는 응답 메시지를 통해 상기 노드로 제 2 벤치마크 요청이 전달될 수 있다 . 전술한 예시에서 기재되는 바와 같이, 제 1 벤치마크 결과를 포함하는 저전력 신호(예컨대, 비콘 신 호)에 대한 응답 메시지를 통해 새로운 벤치마크 태스크가 노드로 할당될 수 있다. 제 1 컴퓨팅 디바이스 는 제 1 벤치마크 결과를 획득하면서 제 2 벤치마크 요청을 노드로 전송할 수 있다. 이에 따라, 제 1 컴퓨팅 디바이스와 노드 간의 저전력 신호와 응답 메시지 통신 리소스가 효율적으로 사용될 수 있다. 일 실시예에서, 노드는 제 2 벤치마크 요청에 대응되는 제 2 벤치마크를 실행할 수 있다. 제 2 벤 치마크의 실행 결과, 노드는 제 2 벤치마크 결과를 포함하는 저전력 신호(예컨대, 콜백 신호)를 제 1 컴 퓨팅 디바이스로 전송할 수 있다. 제 1 컴퓨팅 디바이스는 제 2 벤치마크 결과를 제 2 컴퓨 팅 디바이스로 전송할 수 있다. 일 실시예에서, 제 2 컴퓨팅 디바이스는 제 3 벤치마크 요청을 제 1 컴퓨팅 디바이스로 전송할 수 있다. 제 1 컴퓨팅 디바이스는 대응되는 노드로부터의 저전력 신호가 수신될 때 까지 벤치마크를 대기하고 그리고 만약 대응되는 노드로부터의 저전력 신호가 수신되지 않는 경우 제 3 벤치마크 요청에 대응되 는 벤치마크가 실패한 것으로 결정할 수 있다. 제 1 컴퓨팅 디바이스는 제 3 벤치마크 요청에 대응 되는 제 3 벤치마크가 실패되었다고 제 2 컴퓨팅 디바이스에 전달할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 저전력 무선 신호가 사전 결정된 임계 대기 시간 동안 수신되지 않는 경우, 해당 노드 에서의 벤치마크 태스크가 실패하였다고 결정하고 그리고 해당 노드를 비활성 상태로 설정할 수 있다. 일 실시 예에서, 비활성 상태로 설정된 노드로부터 후속적으로 저전력 무선 신호를 수신하는 것에 응답하여, 제 1 컴퓨 팅 디바이스는 해당 노드의 상태를 활성 상태로 설정할 수 있다. 일례로, 비활성 상태로 설정된 노드를 지정하는 벤치마크 요청이 후속적으로 수신되는 경우, 제 1 컴퓨팅 디바이스는 해당 노드가 현재 벤치마 크를 수행할 수 없다는 결과 및/또는 후보 노드에서 해당 노드를 제외한 후보 노드 리스트를 제 2 컴퓨팅 디바 이스로 전달할 수 있다. 추가적인 실시예에서, 제 1 컴퓨팅 디바이스는 제 3 벤치마크 요청을 노드로 전송하고, 노드(112 0)로부터 사전 결정된 임계 대기 시간 동안 저전력 무선 신호(예컨대, 벤치마크 결과를 포함하는 콜백 신호)를 수신하지 못하는 경우, 해당 노드에서의 벤치마크 태스크가 실패하였다고 결정하고 그리고 해당 노드를 비활성 상태로 설정할 수 있다. 제 1 컴퓨팅 디바이스는 제 3 벤치마크 요청에 대응되는 제 3 벤치마크가 실패되 었다고 제 2 컴퓨팅 디바이스에 전달할 수 있다. 본 개시내용의 실시예들에 따른 기법은, 후보 노드 리스트를 생성할 때 그리고/또는 벤치마크 결과를 생성할 때 외부에서 확인되지 않는 노드를 고려할 수 있기 때문에, 벤치마크의 대상이 되는 노드들의 범위가 넓어질 수 있 다. 도 12는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 일 실시예에서, 도 12에서 도시되는 방법은 제 1 컴퓨팅 디바이스에 의해 수행될 수 있다. 다른 예시로, 도 12에서 도시되는 방법은 제 1 컴퓨팅 디바이스 및 제 2 컴퓨팅 디바이스를 포괄하는 컴퓨팅 디바 이스에 의해 수행될 수 있다. 아래에서는 도 12의 단계들이 제 1 컴퓨팅 디바이스에 의해 수행되는 예시를 구체적으로 설명하기로 한다. 구현 양태에 따라서 도 12에서 도시되는 단계들 중 일부가 생략되거나 추가적인 단계가 포함될 수 있다는 점은 당업 자에 의해 이해될 것이다. 일 실시예에서, 도 12에서의 제 1 컴퓨팅 디바이스는 도 3에서의 제 1 컴퓨팅 디바이스에 대응될 수 있으 며, 제 2 컴퓨팅 디바이스는 도 3에서의 제 2 컴퓨팅 디바이스에 대응될 수 있다. 일 실시예에서 도 12에 서의 제 1 컴퓨팅 디바이스는 도 4 내지 도 11에서의 제 1 컴퓨팅 디바이스와 대응될 수 있으며, 제 2 컴퓨팅 디바이스는 도 4 내지 도 11에서의 제 2 컴퓨팅 디바이스와 대응될 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 인공지능 기반의 모델과 관련된 상이한 동작들을 수행하는 복수의 모듈 들을 포함하는 제 2 컴퓨팅 디바이스로부터, 제 2 컴퓨팅 디바이스의 복수의 모듈들 중 어떤 모듈이 제 1 컴퓨 팅 디바이스의 벤치마크 동작을 트리거링하는지를 나타내는 모듈 식별 정보를 수신할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 자신에게 벤치마크 요청을 전송한 주체가 무엇인지에 따라 상이한 벤치 마크 결과를 제공할 수 있다. 예를 들어, 제 2 컴퓨팅 디바이스는 제 1 컴퓨팅 디바이스로 노드 및 모델을 포함 하는 벤치마크 요청을 전송할 수 있다. 제 1 컴퓨팅 디바이스는 벤치마크 요청을 전송한 송신자를 식별하고 식 별된 송신자에 따라서 상이한 벤치마크 결과를 생성할 수 있다. 다른 예시로, 제 2 컴퓨팅 디바이스는 제 1 컴 퓨팅 디바이스로 벤치마크 결과에 포함될 벤치마크 태스크를 포함하는 벤치마크 요청을 전송할 수도 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스의 모듈들 각각과 상호작용 가능하며, 모듈들 각 각과 상호작용시 어떤 모듈과의 상호작용인지에 따라 상이한 방식으로 벤치마크를 수행하거나 그리고/또는 상이 한 벤치마크 결과를 획득할 수 있다. 일 실시예에서, 모듈 식별 정보는 제 2 컴퓨팅 디바이스에 포함된 복수의 모듈들 중 특정한 모듈(들)을 식별하 기 위한 정보를 포함할 수 있다. 예를 들어, 복수의 모듈들은 제 2 컴퓨팅 디바이스 상에서 서로 상이한 동작을 수행하는 모듈들을 의미할 수 있다. 다른 예시로, 복수의 모듈들은 제 2 컴퓨팅 디바이스 및 제 1 컴퓨팅 디바 이스 중 적어도 하나에 존재하여 서로 상이한 동작을 수행하도록 구성될 수 있다. 또 다른 예시로, 복수의 모듈 들은 제 2 컴퓨팅 디바이스 외부에 별도로 존재하여 서로 상이한 동작을 수행하도록 구성될 수 있다. 일 실시예에서, 모듈 식별 정보는 제 2 컴퓨팅 디바이스에 포함된 복수의 모듈들 중 특정한 모듈을 식별하기 위 한 정보 및 벤치마크 태스크 정보를 포함할 수 있다. 벤치마크 태스크 정보는 벤치마크의 대상이 되는 노드 및/ 또는 모델과 관련된 정보를 포함할 수 있다. 벤치마크 태스크 정보는 벤치마크를 수행하기 위한 성능 목표 정보 (예컨대, 타겟 레이턴시 등)를 포함할 수 있다. 벤치마크 태스크 정보는 벤치마크를 수행하는 과정에서 컨버팅 이 필요한지 여부 그리고/또는 컨버터 식별 정보를 포함할 수 있다. 벤치마크 태스크 정보는 벤치마크 결과에 포함될 정보를 기술할 수 있다. 벤치마크 태스크 정보는 수행될 벤치마크 방식을 포함할 수 있다. 일 실시예에서, 복수의 모듈들은 벤치마크 결과를 상이한 방식으로 활용하여 모듈들 각각의 출력을 생성할 수 있다. 예를 들어, 제 1 모듈은 입력된 데이터셋을 기초로 하여 학습 모델을 생성할 수 있다. 제 1 모듈은 학습 모델을 벤치마크할 타겟 노드를 결정하는데 벤치마크 결과를 사용할 수 있다. 제 1 모듈은 학습 모델을 타겟 노드에서 실행하였을 때의 성능을 확인하기 위하여 벤치마크 결과를 사용할 수 있다. 제 1 모듈은 학습 모델 또는 재학습 모델을 생성하는데 벤치마크 결과를 사용할 수 있다. 제 1 모듈은 데이터셋에 대응되는, 학습 모델 또는 재학습 모델의 타입을 결정하는데 벤치마크 결과를 사용할 수 있다. 제 1 모듈로부터 출력되는 학습 모델의 성능을 평 가하기 위한 용도로 벤치마크 결과가 사용될 수 있다. 제 1 모듈로부터 출력되는 학습 모델의 성능은 메모리 풋 프린트(footprint), 레이턴시, 전력소비량 및/또는 노드 정보(노드의 실행환경, 프로세서 및/또는 RAM 사이즈 등)을 포함할 수 있다. 예를 들어, 제 2 모듈은 입력된 모델을 압축함으로써 경량화 모델을 생성할 수 있다. 제 2 모듈은 입력된 모듈 에 대한 압축 설정 데이터를 결정하기 위하여 벤치마크 결과를 사용할 수 있다. 예를 들어, 제 3 모듈은 입력된 모델을 적어도 하나의 타겟 노드에 디플로이하기 위한 다운로드 데이터를 생성 할 수 있다. 제 3 모듈은 다운로드 데이터를 생성하는데 또는 타겟 노드가 지원하는 데이터 타입으로 데이터를 변환하는데 벤치마크 결과를 사용할 수 있다. 제 3 모듈은 입력된 모델이 사용자가 원하는 노드의 스펙과 최대한 비슷한 노드에서 어느 정도 성능이 나오는지 체크하는 데 벤치마크 결과를 사용할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 모듈 식별 정보에 기초하여 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 모듈 식별 정보에 따라서 상이한 벤치마크 결과를 제 2 컴퓨팅 디바이 스로 제공할 수 있다. 일례로, 제 1 컴퓨팅 디바이스는 모듈 식별 정보가 상이한 경우 동일한 방식으로 벤치마 크를 수행하고 상이한 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 다른 예시로, 제 1 컴퓨팅 디 바이스는 모듈 식별 정보가 상이한 경우 상이한 방식으로 벤치마크를 수행하고 상이한 벤치마크 결과를 제 2 컴 퓨팅 디바이스로 제공할 수 있다. 일 실시예에서, 모듈 식별 정보가 제 1 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 입력된 데이터셋에 대응 되는 학습 모델 또는 컨버팅된 학습 모델을 실행시킬 타겟 노드를 결정하기 위한 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 모듈 식별 정보가 제 2 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 입력된 모 델에 대응되는 경량화 모델을 생성하기 위해 사용되는 압축 설정 데이터를 포함하는 벤치마크 결과를 제 2 컴퓨 팅 디바이스로 제공할 수 있다. 일 실시예에서, 모듈 식별 정보가 제 1 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 입력된 모델 전체를 대 상으로 한 성능 정보를 제공하고 그리고 모듈 식별 정보가 제 2 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 입력된 모델 전체를 대상으로 한 성능 정보 및/또는 입력된 모델의 블록 단위로 성능 정보를 제공할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 모듈 식별 정보에 따라서 상이한 방식으로 벤치마크를 수행할 수 있다. 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 모듈 식별 정보가 제 1 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 제 1 벤치마크 방식으로 사전 결정된 타겟 모델을 사전 결정된 적어도 하나의 타겟 노 드에서 실행하는 것에 기초하여 생성되는 제 1 벤치마크 결과를 상기 제 2 컴퓨팅 디바이스로 제공하고, 그리고 모듈 식별 정보가 상기 제 1 모듈과 상이한 제 2 모듈을 나타내는 경우, 상기 제 1 벤치마크 방식으로 상기 타 겟 모델을 상기 적어도 하나의 타겟 노드에서 실행하는 것에 기초하여 생성되는 제 2 벤치마크 결과를 상기 제 2 컴퓨팅 디바이스로 제공할 수 있다. 여기서 제 1 벤치마크 결과와 제 2 벤치마크 결과는 상이할 수 있다. 제한이 아닌 예시로, 벤치마크 방식은, 입력된 모델이 타겟 노드에서 실행될 때, 입력된 모델 전체를 대상으로 성능 정보를 측정하는 제 1 벤치마크 방식을 포함할 수 있다. 벤치마크 방식은 입력된 모델이 타겟 노드에서 실 행될 때, 상기 입력된 모델의 연산자 단위로 성능 정보를 측정하는 제 2 벤치마크 방식을 포함할 수 있다. 벤치 마크 방식은 입력된 모델이 타겟 노드에서 실행될 때, 상기 입력된 모델의 블록 단위로 성능 정보를 측정하는 제 3 벤치마크 방식을 포함할 수 있다. 일 실시예에 따라, 제 1 컴퓨팅 디바이스는 복수의 벤치마크 방식들을 조합함으로써 벤치마크 결과를 생성할 수 있다. 일 실시예에서, 모듈 식별 정보가 학습 모델을 생성하는 동작을 수행하는 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 복수의 인공지능 기반의 모델들 각각을 복수의 노드들 각각에서 실행시킴으로써 획득되는 제 1 벤치 마크 성능 정보를 포함하는 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 예를 들어, 제 1 벤치마 크 성능 정보는, 복수의 인공지능 기반의 모델들과 상기 복수의 노드들 간의 매칭에 따른 레이턴시를 표현하는 테이블 형태의 자료 구조에 대응될 수 있다. 제한이 아닌 예시로, 도 5에서 예시되는 자료 구조가 레이턴 시를 표현하는 테이블 형태의 자료 구조에 대응될 수 있다. 일 실시예에서, 제 1 벤치마크 성능 정보는 레이턴시 뿐만 아니라 모델이 노드에서 실행되었을 때의 임의의 형 태의 성능 정보를 포함할 수 있다. 예를 들어, 제 1 벤치마크 성능 정보는, 파워 모드 정보, Fan 모드 정보, 현 재 보드의 온도 정보 및/또는 현재 보드의 전력 사용량 정보를 포함할 수도 있다. 파워 모드 정보는 CPU 코어를 얼마나 사용하는지를 기준으로 결정될 수 있다. 예를 들어, CPU 코어를 전부 사용하는 경우 파워 모드 정보는 MAX로 결정될 것이고, 30W, 20W, 15W 및 10W 등과 같이 사용량을 정량적으로 표현하는 방식으로 결정될 수도 있 다. 예를 들어, 파워 모드 정보의 정량적인 양이 클수록 레이턴시가 적게 나올 수 있다. 다른 예시로 파워 모드 가 MAX인 경우 파워 모드를 사용하지 않는 다른 노드에 비해 레이턴시가 적게 나올 수 있다. Fan 모드 정보는 Null, Quite, Cool 및 Max 등과 같이 Fan의 강도를 나타내는 정보의 형태로 표현될 수 있다. 일례로, Fan 모드 가 Quite인 경우, Fan 모드가 Null인 경우 보다 보드의 온도를 더 낮춰줄 수 있기 때문에, 레이턴시가 적게 나 올 가능성이 높다. 일례로, Fan 모드가 Cool 모드인 경우 다른 모드에 비해 보드의 온도를 더 낮춰줄 수 있기 때문에, 레이턴시가 적게 나올 가능성이 높다. 현재 보드의 전력 사용량은 노드들에 연결된 전력 측정 센서로부 터 획득되는 전력 사용량을 나타낼 수 있다. 현재 보드의 전력 사용량의 값이 작을수록 해당 노드의 사용가능성이 높아진다는 것으로 해석될 수 있다. 일 실시예에서, 제 1 벤치마크 성능 정보는, 학습 모델의 실행 환경을 지원할 수 있는 후보 노드들의 성능 예상 정보를 제 2 컴퓨팅 디바이스가 생성하는데 사용될 수 있다. 예를 들어, 사용자와 상호작용하는 제 2 컴퓨팅 디 바이스는 사용자의 입력으로부터 획득된 모델을 지원할 수 있는 혹은 벤치마크를 수행할 준비가 된 후보 노드들 을 포함하는 후보 노드 리스트를 사용자 인터페이스를 통해 제공할 수 있다. 이러한 후보 노드 리스트를 생성할 때, 제 1 컴퓨팅 디바이스 및/또는 벤치마크를 수행할 노드와의 상호 작용 없이 사전 준비된 성능 테이블을 이 용할 수 있다. 이러한 성능 테이블은 복수의 모델들 각각을 복수의 노드들 각각에 실행시킴으로써 획득되는 성 능 정보들을 저장하는 자료 구조이다. 따라서, 제 2 컴퓨팅 디바이스는 사전 준비된 성능 테이블을 이용하여 사 용자에게 보다 빠르고 효율적으로 입력된 데이터셋 또는 입력된 모델과 관련된 후보 노드들에 대한 정보 및 후 보 노드들 각각의 성능 정보를 제공할 수 있다. 일 실시예에서, 제 1 벤치마크 성능 정보는, 인공지능 기반의 신규 모델이 추가되는 경우, 신규 노드가 추가되 는 경우, 및/또는 노드에 의해 지원가능한 실행 환경이 업데이트되는 경우, 제 1 컴퓨팅 디바이스에 의해 업데 이트될 수 있다. 위와 같은 상황에서 제 1 컴퓨팅 디바이스에 의해, 추가되는 신규 모델, 추가되는 신규 노드 및/또는 업데이트되는 실행 환경에 대응되는 모델 및/또는 노드에 대한 성능 측정이 수행되고, 수행된 성능 측 정에 기초하여 성능 테이블에 대한 업데이트가 이루어질 수 있다. 이에 따라, 특정한 상황에 대해서만 후보 노 드 리스트를 제공하는 과정에서 제 1 컴퓨팅 디바이스가 개입하기 때문에, 제 2 컴퓨팅 디바이스는 리소스-효율 적인 방식으로 사용자에게 후보 노드들에 대한 정보와 함께 후보 노드들 각각의 성능 예상 정보를 제공할 수 있 다. 일 실시예에서, 모듈 식별 정보가 학습 모델을 생성하는 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는, 제 2 컴퓨팅 디바이스로부터 획득되는 학습 모델 및 벤치마크의 대상이 되는 타겟 타입 정보에 기초하여, 타겟 타입 정보에 대응되는 실행 환경을 지원하는 노드들 중에서 학습 모델에 포함된 제 1 연산자를 지원하는 실행 환경을 지원하는 제 1 노드들을 포함하는 후보 노드 리스트를 생성하고 그리고 상기 후보 노드 리스트를 포함하는 벤치 마크 결과를 상기 제 2 컴퓨팅 디바이스로 제공할 수 있다. 제 1 컴퓨팅 디바이스는 벤치마크의 대상이 되는 타 겟 타입 정보에 적합한 노드들 중에서 학습 모델에 포함된 연산자들을 지원할 수 있는 노드들을 후보 노드로 결 정함으로써 사용자에게 벤치마크를 수행할 노드들에 대한 보다 정확한 정보를 제공할 수 있다. 예를 들어, 사용 자가 벤치마크하고자 하는 타겟 타입 정보가 사용자로부터 입력된 학습 모델(또는 데이터셋)과 관련된 모델 타 입 정보와 상이한 경우, 입력된 학습 모델을 타겟 타입 정보에 대응되는 타겟 모델로 컨버팅하는 동작이 수행되 어야 한다. 후보 노드들이 입력된 학습 모델로부터 타겟 모델로 컨버팅된 이후에 벤치마크가 수행되는 경우, 사 전에 제시된 후보 노드들 중에서 컨버팅된 타겟 모델을 지원하지 않는 경우가 발생될 수 있다. 이에 따라, 타겟 타입 정보에 대응되는 실행 환경을 지원할 수 있는 노드들 중에서 학습 모델에 포함된 제 1 연산자를 지원하는 실행 환경을 가지고 있는 제 1 노드들이 상기 후보 노드들로 결정될 수 있다. 일례로, 제 1 컴퓨팅 디바이스는 입력받은 학습 모델에 포함된 연산자들을 추출할 수 있다. 타겟 타입 정보에 매칭되는 런타임을 가진 노드들 중 에서 런타임은 매칭되지만 노드가 지원하는 런타임의 버전에서는 상기 추출된 연산자를 지원하지 않는 경우, 해 당 런타임의 버전이 설치되어 있는 노드는 후보 노드에서 제외될 수 있다. 또한, 타겟 타입 정보에 대응되는 실행 환경을 가지는 노드들 중에서 학습 모델에 포함된 제 1 연산자를 지원하 지는 않지만 상기 제 1 연산자를 대체할 수 있는 상기 제 1 연산자와 상이한 제 2 연산자를 지원하는 실행 환경 을 가지고 있는 제 2 노드들이 후보 노드들로 결정될 수 있다. 일례로, 제 1 컴퓨팅 디바이스는 지원하지 않는 연산자를 대체할 수 있는 연산자가 존재하는 경우, 사용자에게 연산자의 대체 또는 변경을 요청할 수 있으며, 사용자로부터 연산자 대체를 요청 받는 경우 제 1 컴퓨팅 디바이스는 해당 노드를 후보 노드에 포함시키고 그렇 지 않은 경우 해당 노드를 후보 노드에서 제외시킬 수 있다. 일 실시예에서, 모듈 식별 정보가 학습 모델을 생성하는 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스로부터 획득된 적어도 하나의 타겟 노드에서 학습 모델을 실행함으로써, 학습 모델의 적어도 하 나의 타겟 노드에서의 제 2 벤치마크 성능 정보를 생성하고 그리고 제 2 벤치마크 성능 정보를 포함하는 벤치마 크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 일 실시예에서, 모듈 식별 정보가 학습 모델을 생성하는 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스로부터 획득되는 학습 모델에 대응되는 모델 타입 정보 및 벤치마 크의 대상이 되는 타겟 타입 정보에 기초하여 학습 모델을 컨버팅할지 여부를 결정하고, 그리고 학습 모델이 컨 버팅될 것으로 결정된 경우, 상기 학습 모델에 대응되는 모델 타입 정보 및 타겟 타입 정보를 이용하여 학습 모델을 타겟 타입 정보에 대응되도록 컨버팅한 타겟 모델을 획득할 수 있다. 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스로부터 획득된 적어도 하나의 타겟 노드에서 상기 타겟 모델을 실행함으로써, 타겟 모델의 적어도 하나 의 타겟 노드에서의 제 2 벤치마크 성능 정보를 생성할 수 있다. 예를 들어, 제 1 컴퓨팅 디바이스는 입력된 학 습 모델에 대응되는 모델 타입이 무엇인지 결정하고, 입력된 타겟 타입 정보와 결정된 모델 타입 정보를 비교하 여, 상이한 경우 컨버팅이 필요하다고 결정할 수 있다. 제 1 컴퓨팅 디바이스는 컨버팅된 모델을 타겟 노드에서 실행시키는 방식으로 벤치마크를 수행할 수 있다. 이러한 예시에서 기재되는 바와 같이, 제 1 컴퓨팅 디바이스 는 학습 모델을 생성하는 모듈로부터 벤치마크가 트리거링되는 경우 컨버팅 여부를 결정하고 컨버팅 여부의 결 과에 따른 모델을 이용하는 방식으로 벤치마크를 수행할 수 있다. 이러한 예시에서 기재되는 바와 같이, 제 1 컴퓨팅 디바이스는 학습 모델을 생성하는 모듈로부터 벤치마크가 트리거링되는 경우 컨버팅 여부를 결정하고 컨 버팅 여부의 결과에 따른 모델의 벤치마크 결과를 제공할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 제 2 벤치마크 성능 정보를 포함하는 벤치마크 결과를 상기 제 2 컴퓨 팅 디바이스로 제공할 수 있다. 일 실시예에서, 전술한 제 2 벤치마크 성능 정보는 시간과 관련된 제 1 타입의 정량 정보 및 메모리 사용과 관 련된 제 2 타입의 정량 정보를 포함할 수 있다. 일 실시예에서, 타겟 모델을 적어도 하나의 타겟 노드에서 실행함에 따라 획득되는 제 2 벤치마크 성능 정보는, 적어도 하나의 타겟 노드에서 타겟 모델의 추론의 전처리를 위해 소요되는 전처리 시간 정보, 적어도 하나의 타 겟 노드에서 타겟 모델을 추론하는데 소요되는 추론 시간 정보, 적어도 하나의 타겟 노드에서 타겟 모델의 추론 의 전처리를 위해 사용되는 전처리 메모리 사용량 정보, 적어도 하나의 타겟 노드에서 타겟 모델을 추론하는데 사용되는 추론 메모리 사용량 정보, 적어도 하나의 타겟 노드에서 타겟 모델을 사전 결정된 횟수만큼 반복하여 추론함에 따라 획득되는, 추론 시간과 관련된 정량 정보, 및/또는 적어도 하나의 타겟 노드에서 타겟 모델을 추 론함에 따라 획득되는, NPU, CPU 및 GPU 각각에 대한 메모리 사용과 관련된 정량 정보를 포함할 수 있다. 일 실시예에서, 전처리 시간 정보는 예를 들어 모델을 불러오는 등과 같이 추론 동작이 수행되기 이전인 전처리 를 위해 소요되는 시간 정보를 포함할 수 있다. 추가적으로 전처리 시간 정보는, 추론에 대한 값을 측정하기 이 전에 GPU 등의 활성화를 위해 사전 추론을 사전 결정된 횟수만큼 반복하였을 때의 사전 추론에 소요되는 시간과 관련된 정량 정보(예컨대, 사전 추론에 소요되는 시간의 최소값, 최대값 및/또는 평균값)를 포함할 수도 있다. 일 실시예에서, 추론 시간 정보는, 추론 과정에서 소요되는 시간 정보로서 예를 들어, 모델에 대한 최초 추론 동작에 소요되는 시간 정보 및/또는 사전 결정된 횟수만큼 반복하여 추론하였을 때의 추론 시간 정보 중 최소 시간 정보, 최대 시간 정보, 평균 시간 정보 및/또는 중간 시간 정보를 포괄하도록 사용될 수 있다. 추가적으로, 예를 들어, NPU에서 처리할 수 없는 연산을 CPU가 받아서 처리하는 상황에서 NPU가 유휴 상태가 되 는데, 추론 시간 정보는 NPU가 유휴 상태가 되었을 때의 제 1 사이클 값을 포함할 수 있다. 추가적으로, 추론 시간 정보는 NPU에서 추론을 수행할 때의 제 2 사이클 값, 및/또는 제 1 사이클 값과 제 2 사이클 값을 합산한 제 3 사이클 값을 포함할 수도 있다. 일 실시예에서, 제 2 벤치마크 성능 정보는 전처리 메모리 사용량 정보와 추론 시간과 관련된 정량 정보를 합산 한 총 시간 정보 또한 포함할 수 있다. 일 실시예에서, 제 2 벤치마크 성능 정보는 RAM 사용량, ROM 사용량, 메모리 전체 사용량 및/또는 NPU에서 사용 하는 SRAM 영역에 대한 정량값 등을 추가로 포함할 수 있다. 일 실시예에서, 제 2 벤치마크 성능 정보는 예를 들어 테이블 형태의 자료 구조를 포함할 수 있다. 일 실시예에서, 모듈 식별 정보가 경량화 모델을 생성하는 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 입력 된 모델에 대응되는 경량화 모델을 생성하기 위해 사용되는 압축 설정 데이터를 포함하는 벤치마크 결과를 상기 제 2 컴퓨팅 디바이스로 제공할 수 있다. 전술한 바와 같이, 모델 식별 정보가 경량화 모델을 생성하는 모델에 대응되는 경우, 제 1 컴퓨팅 디바이스는 다른 모듈에 대한 벤치마크 결과와 상이한 벤치마크 결과를 제공할 수 있다. 이러한 벤치마크 결과는 모델의 압축과 관련된 벤치마크 결과를 포함할 수 있다. 이러한 벤치마크 결과는 모델 단위로 벤치마크를 수행하는 방식 그리고/또는 블록 단위로 벤치마크를 수행하는 방식을 통해 획득될 수 있다. 여기서 상기 압축 설정 데이터는, 압축 모드, 압축 알고리즘, 압축 대상 및 압축률 중 적어도 하나를 포 함할 수 있다. 예를 들어, 압축 모드는 입력된 모델 전체에 대한 압축을 수행하는 제 1 압축 모드 및/또는 입력된 모델에 포함 된 블록 단위의 압축을 수행하는 제 2 압축 모드를 포함할 수 있다. 본 명세서에서의 블록은 모델을 구성하는컴포넌트를 의미할 수 있다. 예를 들어, 블록은 컨볼루션 레이어, 활성화 함수, 정규화 함수 및/또는 사칙 연산 에 대응될 수 있다. 예를 들어, 신경망에서의 적어도 하나의 레이어에 대응될 수 있다. 예를 들어, 압축 알고리즘은 LAMP(Layer-Adaptive Sparsity for Magnitude-based Pruning) 및/또는 VBMF(Variational Bayesian Matrix Factorization) 등과 같은 공지된 다양한 압축 알고리즘을 포함할 수 있다. 다른 예시로, 압축 알고리즘은 모델의 구조를 변경하는 경량화 알고리즘, 채널을 분리시켜 연산량과 변수의 개 수를 줄이는 경량화 알고리즘, 결과에 영향을 미치는 파라미터를 제외한 나머지 파라미터를 0 등으로 설정하는 가중치 프루닝(weight pruning) 알고리즘, 부동소수점으로 표현되는 파라미터들을 특정한 비트 수로 줄이는 양 자화(quantization) 방식을 수행하는 경량화 알고리즘, 및/또는 파라미터들을 이진화하는 경량화 알고리즘 등을 포함할 수 있다. 예를 들어, 압축 대상은 모델에 포함된 블록들 중 압축이 수행될 블록을 나타내기 위해 사용된다. 예를 들어, 압축률은 모델 압축 또는 블록 압축을 위한 압축 비율과 관련된 정량 정보를 나타낼 수 있다. 일 실시예에서, 모듈 식별 정보가 경량화 모델을 나타내는 모듈을 나타내는 경우, 제 1 컴퓨팅 디바이스는 제 2 컴퓨팅 디바이스로부터 획득된 적어도 하나의 타겟 노드에서 입력된 모델을 블록 단위로 실행함으로써, 입력된 모델의 블록 단위의 성능을 나타내는 제 3 벤치마크 성능 정보를 생성할 수 있다. 제 1 컴퓨팅 디바이스는 제 3 벤치마크 성능 정보를 포함하는 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 일 실시예에서, 제 3 벤치마크 성능 정보는 모델의 블록 단위의 레이턴시를 포함할 수 있다. 일 실시예에서, 제 3 벤치마크 성능 정 보는 모델의 블록 단위의 시간과 관련된 제 1 타입의 정량 정보 및 메모리 사용과 관련된 제 2 타입의 정량 정 보를 포함할 수 있다. 제 1 타입의 정량 정보 및 제 2 타입의 정량 정보의 구체적인 내용은 상술된 제 2 벤치마 크 성능 정보의 기재 내용으로 대체하기로 한다. 본 명세서에서의 경량화 모델은 압축이 이루어진 모델을 의미할 수 있다. 전술한 바와 같이, 제 1 컴퓨팅 디바이스는 압축을 수행하는 모델로부터 트리거링되는 경우, 모델 전체의 벤치 마크 결과 및/또는 블록 단위의 벤치마크 결과를 획득하는 벤치마크 수행 방식을 통해 효율적인 압축을 위한 벤 치마크 결과를 제공할 수 있다. 본 개시내용의 일 실시예에 따른 기법은 벤치마크 결과를 이용하여 입력된 모델(예컨대, 제 1 모듈에 의해 생성 된 학습 모델 등)에 대해서 효율적이고 정확한 방식으로 압축이 이루어질 수 있다. 이에 따라 모델을 압축하는 제 2 모듈은 벤치마크 결과를 이용하여 보다 효율적이고 정확한 방식으로 경량화 모델을 획득할 수 있다. 일 실시예에서 제 3 모듈은 입력된 모델의 데이터 타입과는 상이한(예컨대, 32비트 실수형) 타겟 디바이스가 지 원하는 데이터 타입(예컨대, 8비트 정수형)으로 변경시킬 수 있다. 일 실시예에서, 제 3 모듈은 양자화 간격을 조절하고 조절된 양자화 간격을 기초로 양자화를 수행할 수도 있다. 입력된 모델이 양자화됨에 따라 모델의 파 라미터 값(예컨대, 가중치)가 변경될 수 있다. 제 3 모듈은 사용자가 노드에 설치할 수 있는 다운로드 데이터를 제공할 수 있다. 이러한 다운로드 데이터는 다운로드 파일, 다운로드 파일에 대한 링크, 및/또는 다운로드 패키 지를 포함할 수 있다. 이러한 다운로드 파일을 타겟 노드에서 설치하게 되면, 타겟 노드에 최적화된 인공지능 기반의 모델이 설치될 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 모듈 식별 정보가 제 3 모듈을 나타내는 경우, 입력된 모델이 타겟 노 드에 디플로이되도록 하는 다운로드 데이터를 생성하기 위한 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 모듈 식별 정보가 제 3 모듈을 나타내는 경우, 입력된 모델의 데이터 타입을 타겟 노드가 지원하는 데이터 타입으로 변환하기 위한 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 일 실시예에서, 제 1 컴퓨팅 디바이스는 모듈 식별 정보가 제 3 모듈을 나타내는 경우, 입력된 모델의 양자화 간격을 조절하기 위한 벤치마크 결과를 제 2 컴퓨팅 디바이스로 제공할 수 있다. 예를 들어, 모델의 양자화는 가중치 및/또는 활성화 출력의 표현에 사용되는 비트의 수를 줄임으로써 모델의 크기를 줄이는 것을 포함할 수 있다. 학습 모델에 대한 양자화에 의해 모델의 추론 시간이 단축될 수 있다. 예를 들어 양자화 간격은 16bit, 8bit, 4bit, 2bit, 1bit 등과 같이 비트 단위로 결정될 수 있다. 도 13, 도 14, 도 15, 도 16, 및 도 17은 벤치마크 결과를 제공하는 본 개시내용의 다양한 실시예들을 예시적으 로 나타낸다. 예를 들어, 컴퓨팅 디바이스는 외부 디바이스로부터의 벤치마크 요청에 응답하여 벤치마크결과를 획득할 수 있다. 다른 예시로, 컴퓨팅 디바이스는, Standalone 형태로 동작하는 방식, 사용자와 상 호작용하는 다른 컴퓨팅 디바이스에 종속적으로 동작하는 방식, 컨버팅을 직접 수행하는 방식, 다른 컨버팅 디 바이스로부터의 컨버팅 결과를 획득하는 방식, 벤치마크 결과를 직접 생성하는 방식, 및/또는 벤치마크 결과를 외부의 컴퓨팅 디바이스로부터 수신하는 방식 등과 같이 다양한 방식으로 동작 가능하다. 중복되는 설명을 피하기 위하여, 도 13, 도 14, 도 15, 도 16, 및 도 17의 구체적인 내용은 도 3 내지 도 12에 서의 대응되는 설명으로 대체하기로 한다. 도 13은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 컴퓨팅 디바이스는 타겟 모델 정보 및 타겟 노드 정보를 수신할 수 있다. 일 실시예에서, 타겟 모델 정보는 벤치마크의 대상이 되는 모델과 관련된 정보를 포함할 수 있다. 예를 들어, 타겟 모델 정보는 데이터셋, 모델 파일, 모델 파일에 대한 링크, 모델 파일과 모델 타입, 및/또는 모델 파일과 타겟 타입 정보를 포함할 수 있다. 일 실시예에서, 타겟 노드 정보는 타겟 노드를 식별하기 위한 임의의 형태의 정보를 포함할 수 있다. 예 를 들어, 타겟 노드 정보는 타겟 노드의 식별자, 타겟 노드가 무선 통신이 가능한지 여부, 타겟 노드가 외부에 서 확인이 가능한지 여부 및/또는 타겟 노드의 개수를 포함할 수 있다. 컴퓨팅 디바이스는 타겟 모델을 타겟 노드에서 실행시킴으로써 벤치마크 결과를 생성할 수 있다. 도 14는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 컴퓨팅 디바이스는 타겟 모델 정보를 수신할 수 있다. 타겟 모델 정보는 벤치마크의 대상이 되는 모 델과 관련된 정보를 포함할 수 있다. 예를 들어, 타겟 모델 정보는 데이터셋, 모델 파일, 모델 파일에 대한 링 크, 모델 파일과 모델 타입, 및/또는 모델 파일과 타겟 타입 정보를 포함할 수 있다. 컴퓨팅 디바이스는 후보 노드 리스트를 획득할 수 있다. 후보 노드 리스트는 타겟 모델 정보에 기반 하여 결정될 수 있다. 후보 노드 리스트는 복수의 노드들 중 타겟 모델 정보와 관련된 후보 노드들을 포함할 수 있다. 후보 노드 리스트 상에서의 선택 입력에 따라서 벤치마크의 대상이 되는 적어도 하나의 타겟 노드가 결정 될 수 있다. 컴퓨팅 디바이스는 타겟 노드 정보를 수신할 수 있다. 일 실시예에서, 타겟 노드 정보는 타겟 노드 를 식별하기 위한 임의의 형태의 정보를 포함할 수 있다. 예를 들어, 타겟 노드 정보는 타겟 노드의 식별자, 타 겟 노드가 무선 통신이 가능한지 여부, 타겟 노드가 외부에서 확인이 가능한지 여부 및/또는 타겟 노드의 개수 를 포함할 수 있다. 타겟 노드 정보는 후보 노드 리스트 상에서의 선택 입력에 기초하여 결정될 수 있다. 컴퓨팅 디바이스는 타겟 모델을 타겟 노드에서 실행시킴으로써 벤치마크 결과를 생성할 수 있다. 도 15는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 컴퓨팅 디바이스는 입력된 모델 및 타겟 모델 정보를 수신할 수 있다. 일 실시예에서, 입력된 모델 은 모델과 관련된 임의의 형태의 정보를 포함할 수 있다. 예를 들어, 입력된 모델은, 데이터셋, 학습 모델, 경 량화 모델, 모델의 학습과 관련된 정보, 모델의 압축과 관련된 정보, 모델에 포함되는 연산자들에 대한 정보 및 /또는 모델에 대응되는 모델 타입 정보를 포함할 수 있다. 타겟 모델 정보는 벤치마크의 대상이 되는 모델과 관 련된 임의의 형태의 정보를 포함할 수 있다. 예를 들어, 타겟 모델 정보는, 타겟 타입 정보 및/또는 컨버팅될 모델을 식별하기 위한 정보를 포함할 수 있다. 컴퓨팅 디바이스는 타겟 모델 정보에 대응되는 후보 노드 리스트를 획득할 수 있다. 일 실시예에서, 후보 노드 리스트는 후보 노드 리스트는 복수의 노드들 중 타겟 모델 정보 및/또는 입력된 모델과 관련된 후보 노드들을 포함할 수 있다. 예를 들어, 후보 노드들은 타겟 모델 정보에 대응되는 실행 환경을 지원하는 노드들, 입력된 모델의 연산자들을 지원하는 노드들 및/또는 입력된 모델이 타겟 모델 정보에 따라 컨버팅된 타겟 모델 을 지원하는 노드들을 포함할 수 있다. 컴퓨팅 디바이스는 타겟 노드 정보를 수신할 수 있다. 일 실시예에서, 후보 노드 리스트 상에서의 선택 입력에 따라서 벤치마크의 대상이 되는 적어도 하나의 타겟 노드가 결정될 수 있다. 일 실시예에서, 후보 노드 리스트 상에서 성능 정보를 기준으로 가장 양호한 성능을 가지는 후보 노드가 타겟 노드로 자동으로 결정 될 수도 있다. 컴퓨팅 디바이스는 입력된 모델을 타겟 모델 정보에 대응되도록 컨버팅할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 입력된 모델을 식별하기 위한 제 1 정보와 타겟 모델 정보에 대응되는 제 2 정보를 조합함으로써 컨버팅 방식 또는 컨버터의 식별 정보를 결정할 수 있다. 컴퓨팅 디바이스는 입력된 모델의 연 산자들을 타겟 모델 정보에 대응되도록 컨버팅함으로써 컨버팅된 타겟 모델을 생성할 수 있다. 컴퓨팅 디바이스는 컨버팅된 타겟 모델을 타겟 노드에서 실행시킴으로써 벤치마크 결과를 생성할 수 있다 . 도 16은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 컴퓨팅 디바이스는 입력된 모델 및 타겟 모델 정보를 수신할 수 있다. 일 실시예에서, 입력된 모델 은 모델과 관련된 임의의 형태의 정보를 포함할 수 있다. 예를 들어, 입력된 모델은, 데이터셋, 학습 모델, 경 량화 모델, 모델의 학습과 관련된 정보, 모델의 압축과 관련된 정보, 모델에 포함되는 연산자들에 대한 정보 및 /또는 모델에 대응되는 모델 타입 정보를 포함할 수 있다. 타겟 모델 정보는 벤치마크의 대상이 되는 모델과 관 련된 임의의 형태의 정보를 포함할 수 있다. 예를 들어, 타겟 모델 정보는, 타겟 타입 정보 및/또는 컨버팅될 모델을 식별하기 위한 정보를 포함할 수 있다. 컴퓨팅 디바이스는 타겟 모델 정보에 대응되는 후보 노드 리스트를 획득할 수 있다. 일 실시예에서, 후보 노드 리스트는 후보 노드 리스트는 복수의 노드들 중 타겟 모델 정보 및/또는 입력된 모델과 관련된 후보 노드들을 포함할 수 있다. 예를 들어, 후보 노드들은 타겟 모델 정보에 대응되는 실행 환경을 지원하는 노드들, 입력된 모델의 연산자들을 지원하는 노드들 및/또는 입력된 모델이 타겟 모델 정보에 따라 컨버팅된 타겟 모델 을 지원하는 노드들을 포함할 수 있다. 컴퓨팅 디바이스는 타겟 노드 정보를 수신할 수 있다. 일 실시예에서, 후보 노드 리스트 상에서의 선택 입력에 따라서 벤치마크의 대상이 되는 적어도 하나의 타겟 노드가 결정될 수 있다. 일 실시예에서, 후보 노드 리스트 상에서 성능 정보를 기준으로 가장 양호한 성능을 가지는 후보 노드가 타겟 노드로 자동으로 결정 될 수도 있다. 컴퓨팅 디바이스는 입력된 모델을 타겟 모델 정보에 대응되도록 컨버팅하기 위한 컨버팅 요청을 전송할 수 있다. 일 실시예에서, 컨버팅 요청은 컴퓨팅 디바이스의 외부에 위치한 컨버팅 디바이스로 전송될 수 있다. 예를 들어, 제 1 컴퓨팅 디바이스는 컨버팅의 대상이 되는 모델 파일과 컨버터의 UUID를 포함하는 컨 버팅 요청을 컨버팅 디바이스로 전송할 수 있다. 여기서 UUID는 컨버팅 이전의 모델의 타입과 컨버팅 이후의 모 델의 타입의 조합에 의해 식별되는 식별자이다. 컨버팅 디바이스는 UUID에 대응되는 컨버터의 도커 이미지를 획 득하고 그리고 도커 상에서의 대응되는 컨버터의 sh 파일을 실행시키는 방식으로 입력된 모델을 컨버팅할 수 있 다. 컴퓨팅 디바이스는 컨버팅된 타겟 모델을 수신할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 컨버팅 디바이스로부터 컨버팅 결과를 수신할 수 있으며, 여기서의 컨버팅 결과는 컨버팅된 타겟 모델에 대응될 수 있다. 컴퓨팅 디바이스는 컨버팅된 타겟 모델을 타겟 노드에서 실행시킴으로써 벤치마크 결과를 생성할 수 있다 . 도 17은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 컴퓨팅 디바이스는 추론 태스크 및 데이터셋을 포함하는 입력 데이터를 획득할 수 있다. 일 실시예 에서, 추론 태스크는 이미지 분류, 객체 검출, 시멘틱 세그멘테이션, 텍스트 예측 및/또는 클러스터링 등과 같 이 인공지능 기반의 모델의 추론을 통해 달성하고자 하는 목적 또는 결과를 포함할 수 있다. 일 실시예에서, 데 이터셋은 인공지능 기반의 모델에서 사용되는 임의의 형태의 데이터를 포함할 수 있다. 예를 들어, 데이터셋은 데이터에 대한 전처리가 완료된 데이터들의 집합을 의미할 수 있다. 예를 들어, 데이터셋은 지도학습의 경우 라 벨링이 완료된 데이터들의 집합을 의미할 수 있다. 예를 들어, 데이터셋은 인공지능 기반의 모델의 학습에 이용 되거나, 학습 과정에서의 성능 평가에 이용되거나 그리고/또는 학습 완료 이후에 성능 평가에 이용될 수 있다. 컴퓨팅 디바이스는 입력 데이터의 획득에 응답하여, 벤치마크가 수행될 준비가 된 노드들을 포함하는 노드 들의 리스트를 획득할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 벤치마크를 현재 수행하고 있지 않거나, 벤치마크 태스크를 수행할 수 있는 메모리 공간을 가지고 있거나, 또는 벤치마크 태스크를 수행할 수 있는 CPU를 보유하고 있는 등과 같이 벤치마크를 위해 준비된 노드들을 포함하는 리스트를 획득할 수 있다. 이 러한 리스트에 포함된 노드들은 노드들과의 통신을 통해 현재 노드들의 상태를 판단하는 과정에 의해 결정될 수 있다.컴퓨팅 디바이스는 노드들의 리스트 상에서 적어도 하나의 노드를 선택하는 입력 데이터에 기초하여 타겟 모델 및 타겟 노드를 결정할 수 있다. 일 실시예에서, 노드들의 리스트 상에서 특정한 노드가 타겟 노드 로서 선택되는 경우, 선택된 노드에 의해 지원 가능한 모델들의 리스트가 출력될 수 있다. 모델들의 리스트 상 에서의 특정 모델을 선택하는 입력에 응답하여, 벤치마크의 대상이 될 타겟 모델이 결정될 수 있다. 예를 들어, 모델들의 리스트는 모델들 각각에 대한 프레임워크 및 소프트웨어 버전을 나타낼 수 있다. 예를 들어, 모델들의 리스트는 모델들 각각에 대한 식별 정보를 포함할 수 있다. 예를 들어, 모델들의 리스트는 모델들 각각에 대한 식별 정보 및 모델들 각각이 타겟 노드 상에서 실행되었을 때의 성능 정보를 포함할 수 있다. 일 실시예에서, 상기 리스트 상에서의 모델들의 정렬 순서는, 모델들의 성능을 기준으로 또는 과거 사용자들의 선택 정보를 기 준으로 결정될 수 있다. 일 실시예에서, 노드들의 리스트 상에서 특정한 노드가 타겟 노드로서 선택되는 경우, 선택된 노드에 의해 지원 가능한 모델이 사용자 입력 없이 자동으로 결정될 수도 있다. 컴퓨팅 디바이스는 타겟 모델을 타겟 노드에서 실행시킴으로써 벤치마크 결과를 생성할 수 있다. 도 18은 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스의 컴퓨팅 환경의 개략도이다. 본 개시내용에서의 컴포넌트, 모듈 또는 부(unit)는 특정의 태스크를 수행하거나 특정의 추상 데이터 유형을 구 현하는 루틴, 프로시져, 프로그램, 컴포넌트, 데이터 구조 등을 포함한다. 또한, 당업자라면 본 개시내용에서 제시되는 방법들이 단일-프로세서 또는 멀티프로세서 컴퓨팅 디바이스, 미니컴퓨터, 메인프레임 컴퓨터는 물론 퍼스널 컴퓨터, 핸드헬드 컴퓨팅 디바이스, 마이크로프로세서-기반 또는 프로그램가능 가전 제품, 기타 등등(이 들 각각은 하나 이상의 연관된 장치와 연결되어 동작할 수 있음)을 비롯한 다른 컴퓨터 시스템 구성으로 실시될 수 있다는 것을 충분히 인식할 것이다. 본 개시내용에서 설명된 실시예들은 또한 어떤 태스크들이 통신 네트워크를 통해 연결되어 있는 원격 처리 장치 들에 의해 수행되는 분산 컴퓨팅 환경에서 실시될 수 있다. 분산 컴퓨팅 환경에서, 프로그램 모듈은 로컬 및 원 격 메모리 저장 장치 둘 다에 위치할 수 있다. 컴퓨팅 디바이스는 통상적으로 다양한 컴퓨터 판독가능 매체를 포함한다. 컴퓨터에 의해 액세스 가능한 매체는 그 어떤 것이든지 컴퓨터 판독가능 매체가 될 수 있고, 이러한 컴퓨터 판독가능 매체는 휘발성 및 비휘발성 매 체, 일시적(transitory) 및 비일시적(non-transitory) 매체, 이동식 및 비-이동식 매체를 포함한다. 제한이 아 닌 예로서, 컴퓨터 판독가능 매체는 컴퓨터 판독가능 저장 매체 및 컴퓨터 판독가능 전송 매체를 포함할 수 있 다. 컴퓨터 판독가능 저장 매체는 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터와 같은 정보를 저장하는 임의의 방법 또는 기술로 구현되는 휘발성 및 비휘발성 매체, 일시적 및 비-일시적 매체, 이동 식 및 비이동식 매체를 포함한다. 컴퓨터 판독가능 저장 매체는 RAM, ROM, EEPROM, 플래시 메모리 또는 기타 메 모리 기술, CD-ROM, DVD(digital video disk) 또는 기타 광 디스크 저장 장치, 자기 카세트, 자기 테이프, 자 기 디스크 저장 장치 또는 기타 자기 저장 장치, 또는 컴퓨터에 의해 액세스될 수 있고 원하는 정보를 저장하는 데 사용될 수 있는 임의의 기타 매체를 포함하지만, 이에 한정되지 않는다. 컴퓨터 판독가능 전송 매체는 통상적으로 반송파(carrier wave) 또는 기타 전송 메커니즘(transport mechanis m)과 같은 피변조 데이터 신호(modulated data signal)에 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터 등을 구현하고 모든 정보 전달 매체를 포함한다. 피변조 데이터 신호라는 용어는 신호 내에 정보를 인코딩하도록 그 신호의 특성들 중 하나 이상을 설정 또는 변경시킨 신호를 의미한다. 제한이 아닌 예로 서, 컴퓨터 판독가능 전송 매체는 유선 네트워크 또는 직접 배선 접속(direct-wired connection)과 같은 유선 매체, 그리고 음향, RF, 적외선, 기타 무선 매체와 같은 무선 매체를 포함한다. 상술된 매체들 중 임의의 것의 조합도 역시 컴퓨터 판독가능 전송 매체의 범위 안에 포함되는 것으로 한다. 컴퓨터를 포함하는 본 발명의 여러가지 측면들을 구현하는 예시적인 환경이 나타내어져 있으며, 컴 퓨터는 처리 장치, 시스템 메모리 및 시스템 버스를 포함한다. 본 명세서에서의 컴퓨 터는 컴퓨팅 디바이스와 상호 호환 가능하게 사용될 수 있다. 시스템 버스는 시스템 메모리 (이에 한정되지 않음)를 비롯한 시스템 컴포넌트들을 처리 장치에 연결시킨다. 처리 장치는 다양한 상용 프로세서들 중 임의의 프로세서일 수 있다. 듀얼 프로세서 및 기타 멀티프로세서 아키텍처도 역시 처리 장치로서 이용될 수 있다. 시스템 버스는 메모리 버스, 주변장치 버스, 및 다양한 상용 버스 아키텍처 중 임의의 것을 사용하는 로 컬 버스에 추가적으로 상호 연결될 수 있는 몇가지 유형의 버스 구조 중 임의의 것일 수 있다. 시스템 메모리는 판독 전용 메모리(ROM) 및 랜덤 액세스 메모리(RAM)를 포함한다. 기본 입/출력 시스템 (BIOS)은 ROM, EPROM, EEPROM 등의 비휘발성 메모리에 저장되며, 이 BIOS는 시동 중과 같은 때에 컴퓨터 내의 구성요소들 간에 정보를 전송하는 일을 돕는 기본적인 루틴을 포함한다. RAM은 또한 데이터 를 캐싱하기 위한 정적 RAM 등의 고속 RAM을 포함할 수 있다. 컴퓨터는 또한 내장형 하드 디스크 드라이브(HDD)(예를 들어, EIDE, SATA), 자기 플로피 디스크 드 라이브(FDD)(예를 들어, 이동식 디스켓으로부터 판독을 하거나 그에 기록을 하기 위한 것임), SSD 및 광 디스크 드라이브(예를 들어, CD-ROM 디스크를 판독하거나 DVD 등의 기타 고용량 광 매체로부 터 판독을 하거나 그에 기록을 하기 위한 것임)를 포함한다. 하드 디스크 드라이브, 자기 디스크 드라이 브 및 광 디스크 드라이브는 각각 하드 디스크 드라이브 인터페이스, 자기 디스크 드라이브 인터페이스 및 광 드라이브 인터페이스에 의해 시스템 버스에 연결될 수 있다. 외장형 드라 이브 구현을 위한 인터페이스는 예를 들어, USB(Universal Serial Bus) 및 IEEE 1394 인터페이스 기술 중 적어도 하나 또는 그 둘 다를 포함한다. 이들 드라이브 및 그와 연관된 컴퓨터 판독가능 매체는 데이터, 데이터 구조, 컴퓨터 실행가능 명령어, 기타 등 등의 비휘발성 저장을 제공한다. 컴퓨터의 경우, 드라이브 및 매체는 임의의 데이터를 적당한 디지털 형 식으로 저장하는 것에 대응한다. 상기에서의 컴퓨터 판독가능 저장 매체에 대한 설명이 HDD, 이동식 자기 디스 크, 및 CD 또는 DVD 등의 이동식 광 매체를 언급하고 있지만, 당업자라면 집 드라이브(zip drive), 자기 카세트, 플래쉬 메모리 카드, 카트리지, 기타 등등의 컴퓨터에 의해 판독가능한 다른 유형의 저장 매체도 역시 예시적인 운영 환경에서 사용될 수 있으며 또 임의의 이러한 매체가 본 발명의 방법들을 수행하기 위한 컴퓨터 실행가능 명령어를 포함할 수 있다는 것을 잘 알 것이다. 운영 체제, 하나 이상의 어플리케이션 프로그램, 기타 프로그램 모듈 및 프로그램 데이터 를 비롯한 다수의 프로그램 모듈이 드라이브 및 RAM에 저장될 수 있다. 운영 체제, 어플리케이션, 모듈 및/또는 데이터의 전부 또는 그 일부분이 또한 RAM에 캐싱될 수 있다. 본 발명이 여러가지 상업적으 로 이용가능한 운영 체제 또는 운영 체제들의 조합에서 구현될 수 있다는 것을 잘 알 것이다. 사용자는 하나 이상의 유선/무선 입력 장치, 예를 들어, 키보드 및 마우스 등의 포인팅 장치를 통 해 컴퓨터에 명령 및 정보를 입력할 수 있다. 기타 입력 장치(도시 생략)로는 마이크, IR 리모콘, 조이스 틱, 게임 패드, 스타일러스 펜, 터치 스크린, 기타 등등이 있을 수 있다. 이들 및 기타 입력 장치가 종종 시스 템 버스에 연결되어 있는 입력 장치 인터페이스를 통해 처리 장치에 연결되지만, 병렬 포트, IEEE 1394 직렬 포트, 게임 포트, USB 포트, IR 인터페이스, 기타 등등의 기타 인터페이스에 의해 연결될 수 있 다. 모니터 또는 다른 유형의 디스플레이 장치도 역시 비디오 어댑터 등의 인터페이스를 통해 시스템 버스에 연결된다. 모니터에 부가하여, 컴퓨터는 일반적으로 스피커, 프린터, 기타 등등의 기타 주 변 출력 장치(도시 생략)를 포함한다. 컴퓨터는 유선 및/또는 무선 통신을 통한 원격 컴퓨터(들) 등의 하나 이상의 원격 컴퓨터로의 논리 적 연결을 사용하여 네트워크화된 환경에서 동작할 수 있다. 원격 컴퓨터(들)는 워크스테이션, 서버 컴퓨 터, 라우터, 퍼스널 컴퓨터, 휴대용 컴퓨터, 마이크로프로세서-기반 오락 기기, 피어 장치 또는 기타 통상의 네 트워크 노드일 수 있으며, 일반적으로 컴퓨터에 대해 기술된 구성요소들 중 다수 또는 그 전부를 포함하 지만, 간략함을 위해, 메모리 저장 장치만이 도시되어 있다. 도시되어 있는 논리적 연결은 근거리 통신망 (LAN) 및/또는 더 큰 네트워크, 예를 들어, 원거리 통신망(WAN)에의 유선/무선 연결을 포함한다. 이러한 LAN 및 WAN 네트워킹 환경은 사무실 및 회사에서 일반적인 것이며, 인트라넷 등의 전사적 컴퓨터 네트워 크(enterprise-wide computer network)를 용이하게 해주며, 이들 모두는 전세계 컴퓨터 네트워크, 예를 들어, 인터넷에 연결될 수 있다. LAN 네트워킹 환경에서 사용될 때, 컴퓨터는 유선 및/또는 무선 통신 네트워크 인터페이스 또는 어댑터 를 통해 로컬 네트워크에 연결된다. 어댑터는 LAN에의 유선 또는 무선 통신을 용이하 게 해줄 수 있으며, 이 LAN은 또한 무선 어댑터와 통신하기 위해 그에 설치되어 있는 무선 액세스 포인트를 포함하고 있다. WAN 네트워킹 환경에서 사용될 때, 컴퓨터는 모뎀을 포함할 수 있거나, WAN 상의 통신 서버에 연결되거나, 또는 인터넷을 통하는 등, WAN을 통해 통신을 정하는 기타 수단 을 갖는다. 내장형 또는 외장형 및 유선 또는 무선 장치일 수 있는 모뎀은 직렬 포트 인터페이스를 통해 시스템 버스에 연결된다. 네트워크화된 환경에서, 컴퓨터에 대해 설명된 프로그램 모듈들 또는 그의 일부분이 원격 메모리/저장 장치에 저장될 수 있다. 도시된 네트워크 연결이 예시적인 것이며 컴 퓨터들 사이에 통신 링크를 설정하는 기타 수단이 사용될 수 있다는 것을 잘 알 것이다. 컴퓨터는 무선 통신으로 배치되어 동작하는 임의의 무선 장치 또는 개체, 예를 들어, 프린터, 스캐너, 데 스크톱 및/또는 휴대용 컴퓨터, PDA(portable data assistant), 통신 위성, 무선 검출가능 태그와 연관된 임의 의 장비 또는 장소, 및 전화와 통신을 하는 동작을 한다. 이것은 적어도 Wi-Fi 및 블루투스 무선 기술을 포함한 다. 따라서, 통신은 종래의 네트워크에서와 같이 미리 정의된 구조이거나 단순하게 적어도 2개의 장치 사이의 애드혹 통신(ad hoc communication)일 수 있다. 제시된 프로세스들에 있는 단계들의 특정한 순서 또는 계층 구조는 예시적인 접근들의 일례임을 이해하도록 한 다. 설계 우선순위들에 기반하여, 본 개시내용의 범위 내에서 프로세스들에 있는 단계들의 특정한 순서 또는 계 층 구조가 재배열될 수 있다는 것을 이해하도록 한다. 본 개시내용의 방법 청구항들은 샘플 순서로 다양한 단계 들의 엘리먼트들을 제공하지만 제시된 특정한 순서 또는 계층 구조에 한정되는 것을 의미하지는 않는다."}
{"patent_id": "10-2023-0131497", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스의 블록 구성도를 개략적으로 도시한다. 도 2는 본 개시내용의 일 실시예에 따른 실시예에 따른 인공지능 기반의 모델의 예시적인 구조를 도시한다. 도 3은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 시스템에 대한 예시적인 개략도를 도시 한다. 도 4는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 5는 본 개시내용의 일 실시예에 따른 후보 노드 리스트를 생성하는데 사용되는 테이블 형태의 자료 구조를 예시적으로 도시한다. 도 6은 본 개시내용의 일 실시예에 따른 후보 노드 리스트를 생성하는데 사용되는 테이블 형태의 자료 구조를 예시적으로 도시한다. 도 7은 본 개시내용의 일 실시예에 따른 후보 노드 리스트를 생성하는데 사용되는 테이블 형태의 자료 구조를 예시적으로 도시한다. 도 8은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 9는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 10은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 11은 본 개시내용의 일 실시예에 따라 외부에서 확인되지 않는 노드에 대한 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 12는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 13은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 14는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 15는 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 16은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 17은 본 개시내용의 일 실시예에 따른 벤치마크 결과를 제공하기 위한 방법을 예시적으로 도시한다. 도 18은 본 개시내용의 일 실시예에 따른 컴퓨팅 환경의 개략도이다."}
