{"patent_id": "10-2024-7039087", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0004330", "출원번호": "10-2024-7039087", "발명의 명칭": "인공 지능", "출원인": "시놉시스, 인크.", "발명자": "분스트라, 요하네스"}}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "활성화 함수를 근사(approximate)시키는 방법으로서,상기 활성화 함수의 입력 값을 수신하는 단계;상기 입력 값이 범위 내에 있다는 것을 결정하는 단계 - 상기 범위는 비균일 간격들의 세트를 포함함 -;상기 입력 값을 포함하는 비균일 간격들의 세트 중에서 선택된 간격을 결정하는 단계;하드웨어 가속기에 의해, 상기 활성화 함수의 타입과 연관된 룩업 테이블(look-up table)(LUT)로부터, 상기 선택된 간격과 연관된 하나 이상의 2차 내삽 파라미터(quadratic interpolation parameter)의 값들을 검색하는단계;상기 하나 이상의 2차 내삽 파라미터의 값들을 사용하여 상기 입력 값을 근사시키기 위해 상기 입력 값에 대해2차 내삽을 수행하는 단계; 및상기 입력 값에 대해 수행된 2차 내삽의 결과에 기초하여 상기 활성화 함수의 제1 근사된 출력을 결정하는 단계를 포함하는, 방법."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 비균일 간격들의 세트의 비균일 분포를 결정하기 위해 레메즈 미니맥스 알고리즘(Remez minimaxalgorithm)이 사용되는, 방법."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항 또는 제2항에 있어서,상기 비균일 간격들의 세트로부터 선택된 간격을 결정하는 것은, 상기 입력 값 및 2의 보수 인코딩된 입력 값(two's complement encoded input value)의 최상위 비트(most significant bit)(MSB)들 중 하나 이상에 기초하는, 방법."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 활성화 함수와 연관된 LUT는, 상기 비균일 간격들의 세트 중에서 각각의 간격에 대한 하나 이상의 2차 내삽 파라미터의 값들을 포함하는, 방법."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항 또는 제4항에 있어서,상기 하드웨어 가속기는, 복수의 활성화 함수들의 2차 내삽 범위들과 연관된 파라미터들을 포함하는 복수의 LUT들을 저장하는, 방법."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 복수의 LUT들은 상기 하드웨어 가속기에서 플립플롭들로서 구현되는, 방법."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "공개특허 10-2025-0004330-3-제1항에 있어서,상기 하드웨어 가속기에 의해, 상기 입력 값이 하나 이상의 선형 외삽 범위(linear extrapolation range) 내에있다는 것을 결정하는 단계 - 상기 하나 이상의 선형 외삽 범위는 상기 범위와 오버랩되지 않음 -;상기 하드웨어 가속기에 의해, 상기 하나 이상의 선형 외삽 범위 각각에 대한 상기 활성화 함수의 기울기들 및오프셋 값들을 결정하는 단계;상기 하드웨어 가속기에 의해, 상기 하나 이상의 선형 외삽 범위 각각에 대한 상기 활성화 함수의 기울기들 및오프셋 값들을 사용하여 상기 입력 값을 근사시키기 위해 상기 입력 값에 대해 선형 외삽을 수행하는 단계; 및상기 하드웨어 가속기에 의해, 상기 입력 값에 대해 수행된 선형 외삽의 결과에 기초하여 상기 활성화 함수의제2 근사된 출력을 결정하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 입력 값은 상기 활성화 함수의 제2 근사된 출력의 고정 소수점 표현에서 표현가능한 값들의 범위 내에서 2의 거듭제곱 인자들만큼 시프트되는, 방법."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "활성화 함수를 근사시키기 위한 시스템으로서,상기 시스템은:상기 활성화 함수의 입력 값을 수신하고 상기 입력 값에 대해 시프트 연산을 수행하여 상기 입력 값의 최상위비트(MSB)들을 컴퓨팅하도록 구성되는 비트 시프터;상기 입력 값이, 비균일 간격들의 세트를 포함하는 범위 내에 있는지를 결정하고, 상기 입력 값의 MSB들에 기초하여 상기 입력 값을 포함하는 비균일 간격들의 세트 중에서 선택된 간격을 결정하도록 구성되는 제1 디바이스;상기 활성화 함수와 연관된 룩업 테이블(LUT)로부터, 상기 선택된 간격과 연관된 하나 이상의 2차 내삽 파라미터의 값들을 검색하도록 구성되는 제2 디바이스;상기 하나 이상의 2차 내삽 파라미터의 값들을 사용하여 상기 입력 값을 근사시키기 위해 상기 입력 값에 대해2차 내삽을 수행하고, 상기 입력 값에 대해 수행된 2차 내삽의 결과에 기초하여 상기 활성화 함수의 제1 근사된출력을 결정하도록 구성되는 하나 이상의 곱셈-누적-스케일 회로(multiply-accumulate-scale circuit)를 포함하는, 시스템."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 시스템은, 하드 매크로 지적 재산(intellectual property)(IP)에 의해 구성되는 전자 회로 및/또는 하드웨어 가속기를 포함하는, 시스템."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 하드웨어 가속기는, 복수의 활성화 함수들의 2차 내삽 범위들과 연관된 파라미터들을 포함하는 복수의 LUT들을 저장하는, 시스템."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 복수의 LUT들은 상기 하드웨어 가속기에서 플립플롭들로서 구현되는, 시스템.공개특허 10-2025-0004330-4-청구항 13 제9항에 있어서,상기 비균일 간격들의 세트의 비균일 분포를 결정하기 위해 레메즈 미니맥스 알고리즘이 사용되는, 시스템."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제9항 또는 제13항에 있어서,상기 비균일 간격들의 세트 중에서 선택된 간격을 결정하는 것은, 상기 입력 값 및 2의 보수 인코딩된 입력 값의 최상위 비트(MSB)들 중 하나 이상에 기초하는, 시스템."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제9항에 있어서,상기 활성화 함수와 연관된 LUT는, 상기 비균일 간격들의 세트 중에서 각각의 간격에 대한 하나 이상의 2차 내삽 파라미터의 값들을 포함하는, 시스템."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제9항에 있어서,상기 제1 디바이스가 상기 입력 값이 하나 이상의 선형 외삽 범위 내에 있다고 결정하는 것에 기초하여 상기 하나 이상의 선형 외삽 범위 각각에 대한 상기 활성화 함수의 기울기들 및 오프셋 값들을 결정하도록 구성되는 제3 디바이스를 더 포함하고,상기 하나 이상의 선형 외삽 범위는 상기 범위와 오버랩되지 않고, 상기 하나 이상의 곱셈-누적-스케일 회로는추가로, 상기 하나 이상의 선형 외삽 범위 각각에 대한 상기 활성화 함수의 기울기들 및 오프셋 값들을 사용하여 상기 입력 값을 근사시키기 위해 상기 입력 값에 대해 선형 외삽을 수행하고, 상기 입력 값에 대해 수행된선형 외삽의 결과에 기초하여 상기 활성화 함수의 제2 근사된 출력을 결정하도록 구성되는, 시스템."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서,상기 입력 값은 상기 활성화 함수의 제2 근사된 출력의 고정 소수점 표현에서 표현가능한 값들의 범위 내에서 2의 거듭제곱 인자들만큼 시프트되는, 시스템."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "비일시적 컴퓨터 판독가능 매체로서,상기 비일시적 컴퓨터 판독가능 매체는, 프로세서에 의해 합성될 때, 상기 프로세서로 하여금 전자 회로의 구조체를 합성하게 하는 가속기 회로의 저장된 표현을 포함하고, 상기 전자 회로는:활성화 함수의 입력 값을 수신하고;상기 입력 값이 범위 내에 있다는 것을 결정하고 - 상기 범위는 비균일 간격들의 세트를 포함함 -;상기 입력 값을 포함하는 비균일 간격들의 세트 중에서 선택된 간격을 결정하고;상기 활성화 함수와 연관된 룩업 테이블(LUT)로부터, 상기 선택된 간격과 연관된 하나 이상의 2차 내삽 파라미터의 값들을 검색하고;상기 하나 이상의 2차 내삽 파라미터의 값들을 사용하여 상기 입력 값을 근사시키기 위해 상기 입력 값에 대해2차 내삽을 수행하고;상기 입력 값에 대해 수행된 2차 내삽의 결과에 기초하여 상기 활성화 함수의 제1 근사된 출력을 결정하도록구성되는, 비일시적 컴퓨터 판독가능 매체.공개특허 10-2025-0004330-5-청구항 19 제18항에 있어서,상기 입력 값은 상기 활성화 함수의 제1 근사된 출력의 고정 소수점 표현에서 표현가능한 값들의 범위 내에서 2의 거듭제곱 인자들만큼 시프트되는, 비일시적 컴퓨터 판독가능 매체."}
{"patent_id": "10-2024-7039087", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제18항에 있어서,상기 전자 회로는 추가로:상기 입력 값이 하나 이상의 선형 외삽 범위 내에 있다는 것을 결정하고 - 상기 하나 이상의 선형 외삽 범위는상기 범위와 오버랩되지 않음 -;상기 하나 이상의 선형 외삽 범위 각각에 대한 상기 활성화 함수의 기울기들 및 오프셋 값들을 결정하고;상기 하나 이상의 선형 외삽 범위 각각에 대한 상기 활성화 함수의 기울기들 및 오프셋 값들을 사용하여 상기입력 값을 근사시키기 위해 상기 입력 값에 대해 선형 외삽을 수행하고;상기 입력 값에 대해 수행된 선형 외삽의 결과에 기초하여 상기 활성화 함수의 제2 근사된 출력을 결정하도록구성되는, 비일시적 컴퓨터 판독가능 매체."}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "활성화 함수를 근사시키는 방법으로서, 이 방법은: 활성화 함수의 입력 값을 수신하는 단계; 입력 값이 범위 내 에 있다는 것을 결정하는 단계 - 범위는 비균일 간격들의 세트를 포함함 -; 입력 값을 포함하는 비균일 간격들의 세트 중에서 선택된 간격을 결정하는 단계; 하드웨어 가속기에 의해, 활성화 함수의 타입과 연관된 룩업 테이블 (LUT)로부터, 선택된 간격과 연관된 하나 이상의 2차 내삽 파라미터의 값들을 검색하는 단계; 하나 이상의 2차 내삽 파라미터의 값들을 사용하여 입력 값을 근사시키기 위해 입력 값에 대해 2차 내삽을 수행하는 단계; 및 입 력 값에 대해 수행된 2차 내삽의 결과에 기초하여 활성화 함수의 제1 근사된 출력을 결정하는 단계를 포함한다."}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "발명자들: Johannes (Joep) Boonstra"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 2, "content": "기술분야 본 출원은 일반적으로 인공 지능(artificial intelligence)(AI) 가속기 시스템에 관한 것이다. 더 구체적으로 는, 본 개시내용은 AI 가속기에 대한 효율적인 룩업 테이블 기반 함수를 제공하기 위한 시스템 및 방법에 관한 것이다."}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 지능(AI) 및/또는 머신 러닝(machine learning)(ML) 가속기는, 뉴럴 네트워크들과 같은 AI 워크로드들의 효율적인 프로세싱을 위해 특수하게 설계되는 고성능 병렬 컴퓨테이션 머신이다. 프로세싱 속도와 확장성이 AI 적용예들로부터의 2개의 핵심적인 요구사항이라는 것을 고려하여, AI 가속기들(예를 들어, 뉴럴 네트워크 프로 세싱 유닛)은, 이들 적용예들을 가치있게 만드는 거의 즉각적인 결과들을 전달하는 데 중요한 역할을 한다."}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "배경기술 섹션에서의 상기의 정보는 단지 기술의 배경의 이해의 향상을 위한 것일 뿐이고 그에 따라 선행 기술 의 존재 또는 관련성의 인정으로서 해석되어서는 안 된다."}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 3, "content": "이 발명의 내용은, 상세한 설명에서 아래에 추가로 설명되는 본 개시내용의 실시예들의 피처들 및 개념들의 선"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 4, "content": "택을 소개하기 위해 제공된다. 이 발명의 내용은 청구된 대상물의 핵심적인 또는 필수적인 피처들을 식별하도 록 의도된 것도 아니고, 청구된 대상물의 범주를 제한함에 있어서 사용되도록 의도된 것도 아니다. 설명된 피 처들 중 하나 이상이 하나 이상의 다른 설명된 피처와 조합되어 실행가능한 디바이스를 제공할 수도 있다. 하나 이상의 실시예에서, 활성화 함수를 근사(approximate)시키는 방법은: 활성화 함수의 입력 값을 수신하는 단계; 입력 값이 범위 내에 있다는 것을 결정하는 단계 - 범위는 비균일 간격들의 세트를 포함함 -; 입력 값을 포함하는 비균일 간격들의 세트 중에서 선택된 간격을 결정하는 단계; 하드웨어 가속기에 의해, 활성화 함수의 타입과 연관된 룩업 테이블(look-up table)(LUT)로부터, 선택된 간격과 연관된 하나 이상의 2차 내삽 파라미터 (quadratic interpolation parameter)의 값들을 검색하는 단계; 하나 이상의 2차 내삽 파라미터의 값들을 사용하여 입력 값을 근사시키기 위해 입력 값에 대해 2차 내삽을 수행하는 단계; 및 입력 값에 대해 수행된 2차 내 삽의 결과에 기초하여 활성화 함수의 제1 근사된 출력을 결정하는 단계를 포함한다. 하나 이상의 실시예에서, 비균일 간격들의 세트의 비균일 분포를 결정하기 위해 레메즈 미니맥스 알고리즘 (Remez minimax algorithm)이 사용된다. 하나 이상의 실시예에서, 비균일 간격들의 세트 중에서 선택된 간격을 결정하는 것은, 입력 값 및/또는 2의 보수 인코딩된 입력 값(two's complement encoded input value)의 최상위 비트(most significant bit)(MSB)들 중 하나 이상에 기초한다. 하나 이상의 실시예에서, 활성화 함수와 연관된 LUT는, 비균일 간격들의 세트 중에서 각각의 간격에 대한 하나 이상의 2차 내삽 파라미터의 값들을 포함한다. 하나 이상의 실시예에서, 하드웨어 가속기는, 복수의 활성화 함수들의 2차 내삽 범위들과 연관된 파라미터들을 포함하는 복수의 LUT들을 저장한다. 하나 이상의 실시예에서, 복수의 LUT들은 하드웨어 가속기에서 플립플롭들로서 구현된다. 하나 이상의 실시예 에서, 방법은: 하드웨어 가속기에 의해, 입력 값이 하나 이상의 선형 외삽 범위(linear extrapolation range) 내에 있다는 것을 결정하는 단계 - 하나 이상의 선형 외삽 범위는 범위와 오버랩되지 않음 -; 하드웨어 가속기 에 의해, 하나 이상의 선형 외삽 범위 각각에 대한 활성화 함수의 기울기들 및 오프셋 값들을 결정하는 단계; 하드웨어 가속기에 의해, 하나 이상의 선형 외삽 범위 각각에 대한 활성화 함수의 기울기들 및 오프셋 값들을 사용하여 입력 값을 근사시키기 위해 입력 값에 대해 선형 외삽을 수행하는 단계; 및 하드웨어 가속기에 의해, 입력 값에 대해 수행된 선형 외삽의 결과에 기초하여 활성화 함수의 제2 근사된 출력을 결정하는 단계를 더 포 함한다. 하나 이상의 실시예에서, 입력 값은 활성화 함수의 제2 근사된 출력의 고정 소수점 표현에서 표현가능 한 값들의 범위 내에서 2의 거듭제곱 인자들만큼 시프트된다. 하나 이상의 실시예에서, 활성화 함수를 근사시키기 위한 시스템은: 활성화 함수의 입력 값을 수신하고 입력 값 에 대해 시프트 연산을 수행하여 입력 값의 최상위 비트(MSB)들을 컴퓨팅하도록 구성되는 비트 시프터; 입력 값 이, 비균일 간격들의 세트를 포함하는 범위 내에 있는지를 결정하고, 입력 값의 MSB들에 기초하여 입력 값을 포 함하는 비균일 간격들의 세트 중에서 선택된 간격을 결정하도록 구성되는 제1 디바이스; 활성화 함수와 연관된 룩업 테이블(LUT)로부터, 선택된 간격과 연관된 하나 이상의 2차 내삽 파라미터의 값들을 검색하도록 구성되는 제2 디바이스; 하나 이상의 2차 내삽 파라미터의 값들을 사용하여 입력 값을 근사시키기 위해 입력 값에 대해 2 차 내삽을 수행하고, 입력 값에 대해 수행된 2차 내삽의 결과에 기초하여 활성화 함수의 제1 근사된 출력을 결 정하도록 구성되는 하나 이상의 곱셈-누적-스케일 회로(multiply-accumulate-scale circuit)를 포함한다. 하나 이상의 실시예에서, 시스템은, 하드 매크로 지적 재산(intellectual property)(IP)에 의해 구성되는 전자 회로 및/또는 하드웨어 가속기를 포함한다. 하나 이상의 실시예에서, 하드웨어 가속기는, 복수의 활성화 함수 들의 2차 내삽 범위들과 연관된 파라미터들을 포함하는 복수의 LUT들을 저장한다. 하나 이상의 실시예에서, 복 수의 LUT들은 하드웨어 가속기에서 플립플롭들로서 구현된다. 하나 이상의 실시예에서, 비균일 간격들의 세트 의 비균일 분포를 결정하기 위해 레메즈 미니맥스 알고리즘이 사용된다. 하나 이상의 실시예에서, 비균일 간격들의 세트로부터 선택된 간격을 결정하는 것은, 입력 값 및 2의 보수 인코 딩된 입력 값의 최상위 비트(MSB)들 중 하나 이상에 기초한다. 하나 이상의 실시예에서, 활성화 함수와 연관된 LUT는, 비균일 간격들의 세트 중에서 각각의 간격에 대한 하나 이상의 2차 내삽 파라미터의 값들을 포함한다. 하나 이상의 실시예에서, 시스템은: 제1 디바이스가 입력 값이 하나 이상의 선형 외삽 범위 내에 있다고 결정하 는 것에 기초하여 하나 이상의 선형 외삽 범위 각각에 대한 활성화 함수의 기울기들 및 오프셋 값들을 결정하도 록 구성되는 제3 디바이스를 더 포함하고, 하나 이상의 선형 외삽 범위는 범위와 오버랩되지 않고, 여기서 하나 이상의 곱셈-누적-스케일 회로는 추가로, 하나 이상의 선형 외삽 범위 각각에 대한 활성화 함수의 기울기들 및 오프셋 값들을 사용하여 입력 값을 근사시키기 위해 입력 값에 대해 선형 외삽을 수행하고, 입력 값에 대해 수 행된 선형 외삽의 결과에 기초하여 활성화 함수의 제2 근사된 출력을 결정하도록 구성된다. 하나 이상의 실시 예에서, 입력 값은 활성화 함수의 제2 근사된 출력의 고정 소수점 표현에서 표현가능한 값들의 범위 내에서 2의 거듭제곱 인자들만큼 시프트된다. 하나 이상의 실시예에서, 비일시적 컴퓨터 판독가능 매체로서, 비일시적 컴퓨터 판독가능 매체는, 프로세서에 의해 합성될 때, 프로세서로 하여금 전자 회로의 구조체를 합성하게 하는 가속기 회로의 저장된 표현을 포함하 고, 전자 회로는: 활성화 함수의 입력 값을 수신하고; 입력 값이 범위 내에 있다는 것을 결정하고 - 범위는 비 균일 간격들의 세트를 포함함 -; 입력 값을 포함하는 비균일 간격들의 세트 중에서 선택된 간격을 결정하고; 활 성화 함수와 연관된 룩업 테이블(LUT)로부터, 선택된 간격과 연관된 하나 이상의 2차 내삽 파라미터의 값들을 검색하고; 하나 이상의 2차 내삽 파라미터의 값들을 사용하여 입력 값을 근사시키기 위해 입력 값에 대해 2차내삽을 수행하고; 입력 값에 대해 수행된 2차 내삽의 결과에 기초하여 활성화 함수의 제1 근사된 출력을 결정하 도록 구성된다. 하나 이상의 실시예에서, 입력 값은 활성화 함수의 제1 근사된 출력의 고정 소수점 표현에서 표현가능한 값들의 범위 내에서 2의 거듭제곱 인자들만큼 시프트된다. 하나 이상의 실시예에서, 전자 회로는 추가로: 입력 값이 하나 이상의 선형 외삽 범위 내에 있다는 것을 결정하고 - 하나 이상의 선형 외삽 범위는 범위와 오버랩되지 않 음 -; 하나 이상의 선형 외삽 범위 각각에 대한 활성화 함수의 기울기들 및 오프셋 값들을 결정하고; 하나 이상 의 선형 외삽 범위 각각에 대한 활성화 함수의 기울기들 및 오프셋 값들을 사용하여 입력 값을 근사시키기 위해 입력 값에 대해 선형 외삽을 수행하고; 입력 값에 대해 수행된 선형 외삽의 결과에 기초하여 활성화 함수의 제2 근사된 출력을 결정하도록 구성된다."}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 개시내용의 양태들은 인공 지능(AI) 가속기에 대한 효율적인 룩업 테이블 기반 함수들을 제공하기 위한 시스 템 및 방법에 관련된다. 인공 지능(AI) 및/또는 머신 러닝(ML) 가속기(예를 들어, 뉴럴 네트워크 프로세싱 유닛)는, 뉴럴 네트워크들과 같은 AI 워크로드들의 효율적인 프로세싱을 위해 특수하게 설계되는 고성능 병렬 컴퓨테이션 머신이다. 프로세 싱 속도와 확장성이 AI 적용예들로부터의 2개의 핵심적인 요구사항이라는 것을 고려하여, AI 가속기들은, 이들 적용예들을 가치있게 만드는 거의 즉각적인 결과들을 전달하는 데 중요한 역할을 한다. AI 가속기들은 범용 컴 퓨트 머신들보다 100배 내지 1,000배 더 효율적일 수 있다. AI 가속기들이 제공하는 데이터를 컴퓨팅함에 있어 서의 높은 속도 때문에, AI 가속기들은, 답을 제시하는 데 걸리는 시간의 레이턴시(latency)를 낮춘다. 이 낮 은 레이턴시는, 매초가 중요한 고급 드라이버 보조 시스템(advanced driver assistance systems)(ADAS)과 같은 안전에 중요한 적용예들에서 특히 중요하다. AI 가속기들은, 수반된 코어들의 수와 거의 동일할 수 있는 레벨 의 성능 속도 향상을 달성할 수 있게 한다. AI 가속기의 이기종 아키텍처는 특정 태스크들을 지원하기 위해 다 수의 특수화된 프로세서들을 수용하여, AI 적용예들이 요구하는 컴퓨테이션 성능을 제공한다. 현재는 2개의 구별되는 AI 가속기 공간, 즉, 데이터 센터 및 에지가 있다. 데이터 센터들, 특히 하이퍼스케일 데이터 센터들은, 대규모로 확장가능한 컴퓨트 아키텍처들을 요구한다. 더 많은 컴퓨트, 메모리, 및 통신 대역 폭을 전달함으로써, 데이터 센터들에서의 AI 가속기는 다른 아키텍처들에 비해 극적으로 더 빠른 속도 및 확장 성으로 AI 연구를 지원할 수 있다. 에지는 스펙트럼의 다른 단부를 표현한다. 여기서, 에너지 효율성이 핵심 이고 실면적(real estate)이 제한되는데, 이는 지능이, 더 중앙집중화된 위치보다는 오히려 네트워크의 에지에분산되기 때문이다. AI 가속기 지적 재산(IP)은, 아무리 작더라도, 예를 들어, 스마트폰들 상에서 실행되는 대 화형 프로그램들에 대해 또는 산업용 로보틱스에 대해 필요한 거의 즉각적인 결과들을 전달하는 에지 시스템-온 -칩(system-on-chip)(SoC) 디바이스들 내에 통합된다. 최첨단 인공 지능(AI) 및/또는 머신 러닝(ML) 적용예들은 다양한 타입들의 비선형 활성화 함수들(예를 들어, ReLU, Sigmoid, Tanh, Swish, 및 이와 유사한 것)에 의존한다. 뉴럴 네트워크에서, 활성화 함수가 뉴럴 네트워 크의 뉴런이 활성화되어야 하는지를 결정하도록 구성될 수도 있다. 예를 들어, 뉴럴 네트워크의 활성화 함수는 뉴럴 네트워크에 대한 뉴런의 입력이 뉴럴 네트워크에 의해 연산을 위해 요구되는지 여부를 결정할 수도 있다. 예를 들어, 활성화 함수는, 뉴럴 네트워크의 노드(또는 계층)에 공급되는 입력 값들의 세트로부터의 출력을 도 출할 수도 있다. 일부 경우들에서, 이들 비선형 활성화 함수들은 제한된 범위에서는 비선형 거동을 그리고 제 한된 범위 외측에서는 선형 거동을 나타낸다. 예를 들어, -8 미만의 입력 값들의 경우, tanh 함수는, -1에 가 까운 (예를 들어, 아마도 양자화된) 값들을 리턴하고, +8보다 더 큰 입력 값들의 경우, tanh 함수는, +1에 가까 운 (예를 들어, 아마도 양자화된) 값들을 리턴한다. 그러나, 범위 [-8,8]에서의 입력 값들의 경우, tanh 함수 는 비선형 거동을 나타내는데, 이는 0 주위에서 가장 강하다. 그에 따라, tanh는 -8 미만의 입력 값들 및 +8 초과의 입력 값들의 경우 선형일 수도 있지만, [-8,8] 사이의 제한된 범위의 입력 값들의 경우, tanh는 비선형 일 수도 있다. 예를 들어, 도 1은 제한된 범위에서는 비선형 거동을 그리고 제한된 범위 외측에서는 선형 거동을 나타내는 AI 또는 ML에서 사용되는 상이한 타입들의 비선형 활성화 함수들(예를 들어, Mish, Tanh, ReLU, Sigmoid, Leaky ReLU, SoftPlus, Bent Identity, 및 Swish)을 예시한다. 활성화 함수들의 선형 및 비선형 부분들(예를 들어, Mish, Tanh, ReLU, Sigmoid, Leaky ReLU, SoftPlus, Bent Identity, 및 Swish)이 또한 도 1에서 식별된다. 도 1에 도시된 바와 같이, 도 1에 도시된 비선형 활성화 함수들(예를 들어, Mish, Tanh, ReLU, Sigmoid, Leaky ReLU, SoftPlus, Bent Identity, 및 Swish)은 제한된 범위의 경우 비선형 거동을 나타내고, 활성화 함수들의 비선형 거동은 0 교차점 주위에서 가장 강할 수도 있다. 그러나, 도 1에 도시된 비선형 활성화 함수들(예를 들 어, Mish, Tanh, ReLU, Sigmoid, Leaky ReLU, SoftPlus, Bent Identity, 및 Swish)은, 이들이 비선형 거동을 나타내는 제한된 범위 외측에서 음의 무한대와 양의 무한대를 향해 선형 거동을 나타낸다. AI에서의 활성화 함수들의 세트는, 도 1에 도시된 세트로 제한되지 않으며 시간이 지남에 따라 증가될 것이다. 이들 활성화 함수 모두는, 도 1의 좌측 타원과 우측 타원에 의해 예시된 바와 같이, 큰 음의 값들과 양의 값들 에 대해 선형 함수를 근사시킨다. 예를 들어, tanh(x)는 큰 양의 입력 값들의 경우 +1로 그리고 음의 무한대를 향한 음의 입력 값들의 경우 -1로 수렴할 것이다; swish(x) 함수는 큰 양의 값들의 경우 a*x(예를 들어, \"x\"는 입력이고 \"a\"는 상수(예를 들어, 실수 또는 복소수)이다)로 그리고 -무한대를 향한 음의 입력 값들의 경우 0으 로 수렴할 것이다. 그러나, 입력 값 0(또는 일부 다른 입력 값) 주위에서, 이들 함수들은, 다이어그램에서의 가운데 타원에 의해 도시된 바와 같이, 비선형 거동을 나타낸다. 이들 함수들의 비선형성은 일부 간격들에서 다른 간격들에서보다 더 강할 수도 있다. AI 및/또는 ML 간섭 하드웨어 가속기들은 높은 정확도 및 동작 주파수를 유지하면서, 실리콘 면적을 절약하기 위해, 제한된 범위에서는 비선형 거동을 그리고 제한된 범위 외측에서는 선형 거동을 나타내는 비선형 활성화 함수들의 효율적인 근사를 요구한다. AI 및/또는 ML 적용예들에서, AI 가속기는 적용예에 기초하여 상이한 활 성화 함수들을 사용할 수도 있다. AI 또는 ML 적용예들에서 사용되는 활성화 함수들은, 트레이닝 데이터에 기 초하여 AI 또는 ML 모델들의 파라미터들을 컴퓨팅하기 위한 경사 하강 트레이닝 접근법(gradient descent training approach)들을 가능하게 하기 위한 미분가능한 활성화 함수들일 수도 있다. 시간이 지남에 따라 나타 나는 새로운 활성화 함수들의 사용을 행하도록 AI 가속기 아키텍처의 유연성이 요구될 수도 있다. 미분가능한 활성화 함수들은 또한 AI 가속기들에서 높은 스루풋을 가질 수 있게 할 수도 있다(예를 들어, 이는 미분가능한 활성화 함수들을 사용할 때 경사 하강이 수행하기가 더 쉽기 때문이다). 본 개시내용의 하나 이상의 실시예는 재프로그래밍가능한 비균일 구간별 2차 및 선형 근사의 조합을 사용하여 AI/ML 적용예들에 대한 활성화 함수들을 근사시킨다. 다시 말해, 본 개시내용의 하나 이상의 실시예는 AI/ML에 대한 활성화 함수들의 구간별 근사 방법을 설명한다. 본 근사 방법에서, 비선형 거동을 나타내는 활성화 함수 의 영역 또는 간격(예를 들어, 비선형 간격)을 근사시키기 위해 2차 내삽이 사용되고, 가장 작은 간격 경계 미 만의 입력 값들의 경우 그리고 가장 큰 간격 경계보다 더 큰 입력 값들의 경우 선형 외삽이 사용된다. 본 근사 방법에서, 빠르고 효율적인 계산을 위해 2차 내삽이 룩업 테이블(LUT)과 함께 사용된다. 2차 내삽을 수행하여 활성화 함수의 비선형 영역을 근사시키기 위해, 활성화 함수의 비선형 간격이 비균일 간격들로 분할되어 제한된 룩업 테이블 사이즈들 및 효율적인 소프트웨어 및 하드웨어 구현을 보장하는데, 이는 LUT가 비균일 간격들의 한계 값들 각각에 대한 내삽 계수 값들을 저장할 수도 있기 때문이다. 본 개시내용의 하나 이상의 실시예에서, 구간별 근사 기법은 반도체 지적 재산 코어(SIP 코어) 또는 IP 코어에 서 또는 하드 매크로 IP 또는 넷리스트 IP로서의 하드웨어에서 구현될 수도 있고, 여기서 2차 내삽을 위한 간격 들 및 내삽 계수들은 룩업 테이블(LUT)에 저장될 수도 있고, 여기서 LUT는, 다수의 상이한 함수들에 대응하는 간격들 및 내삽 계수들을 저장할 수도 있고, 단일 하드웨어 구현을 공유하면서 다수의 부가적인 함수들을 지원 하도록 또한 재프로그래밍될 수도 있다. 그러한 경우에, 양자화된 입력들 및 출력들에 대해 높은 정확도가 달 성되고, IP 코어 또는 하드 매크로 IP 또는 넷리스트 IP의 하드웨어에 고정된 통상적으로 사용되는 테이블들에 의해 재프로그래밍가능한 테이블들이 보완될 수도 있다. 예를 들어, AI 가속기는, AI 및/또는 ML에 대한 활성 화 함수들의 비선형 영역을 근사시키기 위해 본 구간별 근사 기법을 포함하는 IP 코어 또는 하드 매크로 IP로 구성될 수도 있다. 하나 이상의 실시예에서, 본 개시내용의 구간별 근사 방법은, 비선형 거동을 나타내는 활성화 함수의 영역 또는 간격에서 2차 내삽을 수행하고 다른 곳에서 선형 외삽을 사용함으로써, 전통적인 근사 방법들에서 요구되는 계 산량을 감소시킴으로써 AI/ML에서 사용되는 활성화 함수들의 전통적인 근사 방법들에 대한 효율적인 솔루션을 제공할 수도 있다. 본 개시내용의 구간별 근사 방법은 하드 매크로 IP 또는 넷리스트 IP로서의 하드웨어에서(예를 들어, 에지 추론 엔진들에서) 구현될 수도 있고, 작은 실리콘 면적을 차지하고 높은 스루풋을 제공할 수도 있다. 본 개시내용의 구간별 근사 방법에서 2차 내삽을 위해 사용되는 LUT들은 사이즈가 작고, 그에 따라 플립플롭들로서 구현되어, 활성화 함수 컴퓨테이션의 단일 명령어, 다중 데이터(single instruction, multiple data)(SIMD) 실행을 가능 하게 할 수도 있다. 본 개시내용의 구간별 근사 방법의 구현은 유연할 수도 있는데, 이는 LUT들이 소프트웨어 를 사용하여 재프로그래밍가능할 수도 있기 때문이다. 추가로, 활성화 함수에 의해 요구되는 경우, 구간별 2차 내삽을 사용함으로써 1차 도함수의 연속성이 보증될 수 있고, 따라서, AI/ML의 경사 하강 트레이닝이 가능할 수 도 있다. 또한, 본 구간별 근사 방법에서 사용되는 내삽 간격들의 비균일 분포는 활성화 함수 출력의 높은 정 확도를 보장할 수도 있다. 더욱이, 본 개시내용의 구간별 근사 방법은 뉴럴 네트워크의 활성화 함수들 이외의 함수들을 근사시키는 데 사용될 수도 있다. 도 2는 본 개시내용의 하나의 실시예에 따른, AI 가속기에 대한 뉴럴 네트워크의 활성화 함수들의 구간별 근사 방법을 예시한다. 도 2의 방법에서, 210에서, 입력 값 x가 수신된다. 다음으로 215에서, 본 구간별 근사 방법을 포함하는 하드 매크로 IP(예를 들어, 하드 매크로(IP)에 의해 구성되는 전자 회로) 또는 AI 가속기(예를 들어, 하드웨어 가속기)는 입력 값 x가 2차 내삽 범위 내에 있는지를 결정할 수도 있다. 다시 말해, 215에서, 본 구간별 근사 방법을 포함하는 하드 매크로 IP 또는 AI 가속기 는, 입력 값 x가, 활성화 함수가 비선형 거동을 나타내는 간격들의 세트 I의 경계들 내에 있는지를 결정할 수도 있다. 예를 들어, 활성화 함수의 입력 x에 대해, 간격들의 세트 I 및 연관된 한계 값들의 세트 L :{l0, l1, ..., lN}이 있다고 가정되는 경우, 다음의 경우에 간격 i에서 2차 내삽이 수행될 것이다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "다시 말해, 입력 값 x가, 우측 경계를 제외한, 간격들의 세트 I의 경계들 내에 있는 경우(예를 들어, l0 ≤ x < lN-1), 간격 i의 파라미터들을 사용하여 입력 x를 근사시키기 위해 2차 내삽이 수행된다(예를 들어, 각각의 비균 일 간격의 경우, 우측 경계는 다음 간격에 포함되지만, 입력 값은 2개의 간격에 포함될 수 없다). 그렇지 않으 면, 선형 내삽이 수행되어 입력 x를 근사시킨다(예를 들어, x < l0인 경우 그리고 x ≥ lN-1인 경우). 하나 이상의 실시예에서, 간격들의 세트 I는, 활성화 함수가 비선형 거동을 나타내는 간격들일 수도 있다. 하 나 이상의 실시예에서, 간격들의 세트 I는 비균일 간격들의 세트를 포함한다고 가정될 수도 있고, 여기서 i는 간격들의 세트 I에서의 한 간격을 표현한다. 하나 이상의 실시예에서, 간격들의 세트 I를 결정하기 위해, 활성화 함수의 선형 및 비선형 영역들이 식별될 수 도 있고, 활성화 함수의 선형 및 비선형 영역들에 대한 연관된 한계 값들이 정의된다. 215에서, 입력 값 x가, 우측 경계를 제외한, 간격들의 세트 I의 경계들 내에 있다고 결정되는 경우, 220에서, AI 가속기 또는 하드 매크로 IP는, 입력 x의 값을 포함하는 간격들의 세트 I 중에서 간격 i를 결정할 수도 있다. 간격들의 세트 I에서의 한 간격 i에 대해, 입력 x의 2차 내삽은 다음의 표현식에 기초한다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "다시 말해, 간격 i에서의 2차 내삽은 파라미터들 ai, bi, ci로 특성화된다. 다음으로, 225에서, 입력 x(또는 입력 키 x)를 포함하는 간격 i와 연관된 파라미터들 ai, bi, ci의 값이, 입력 활성화 함수와 연관된 LUT(예를 들어, 입력 활성화 함수의 타입과 연관된 LUT)로부터 검색된다. 입력 활성화 함수의 타입과 연관된 LUT는, 간격들의 세트 I에서의 각각의 간격 i에 대한 파라미터들 ai, bi, ci의 값을 포함 한다. LUT에서, i는 또한 LUT의 인덱스를 표시할 수도 있는데, 예를 들어, i = lookup(x)이다. 활성화 함수와 연관된 LUT는 AI 가속기 또는 하드 매크로 IP에 저장될 수도 있다. 하나 이상의 실시예에서, AI 가속기 또는 하드 매크로 IP에서의 하나 이상의 메모리 디바이스가, 상이한 활성화 함수들의 비선형 영역들에 대한 2차 내삽을 위한 계수들을 포함하는 복수의 LUT들을 저장할 수도 있다. 하나 이상의 실시예에서, 상이한 활성화 함수들의 비선형 영역들에 대한 2차 내삽을 위한 계수들을 포함하는 복수의 LUT들이 (예를 들어, 수동으로 함수들의 인간 분석에 의해 또는 프로세서에 의해) 결정될 수도 있고 활성화 함 수가 근사되기 전에 LUT에 저장될 수도 있다. LUT에 저장된 값들은 고정될(예를 들어, 하드 매크로에 하드코딩 될) 수도 있거나 또는 매크로가 프로그래밍가능한 LUT를 정의할 수도 있어서, 사용자가 추후에 다른 함수들을 근사시키기 위한 한계들 및 계수들로 LUT를 프로그래밍할 수 있다. LUT를 결정하기 위해, 활성화 함수가 비선형 거동을 나타내는 간격(예를 들어, 간격들의 세트 I)이 비균일 간격 들로 분할된다. 예를 들어, 간격들의 세트 I는 비균일 간격들의 세트를 포함하고, 여기서 i는 간격들의 세트 I 에서의 한 간격을 표현한다. 내삽 간격들의 비균일 분포를 사용하면 활성화 함수 출력의 균일한 정확도를 보장 한다. 예를 들어, 하나 이상의 실시예에서, 내삽 간격들의 비균일 분포를 결정하여 근사 오차를 최소화시키고 정확도를 개선시키기 위해 레메즈 미니맥스 알고리즘이 사용될 수도 있다. 하나 이상의 실시예에서, 간격들의 비균일 분포는 양자화된 입력, 예를 들어, 2의 보수 인코딩된 입력 값의 최 상위 비트(MSB)들에 기초할 수도 있다. 예를 들어, 6개의 최상위 입력 비트가 16개의 비균일 간격의 경계들을 정의하는 데 사용될 수 있다. 하나 이상의 실시예에서, 각각의 간격은 좌측 및 우측 한계로 특성화된다. N개 의 간격을 사용하는 근사가 N+1개의 한계 값의 정의를 요구한다. 본 개시내용의 하나 이상의 실시예는 LUT 사이즈를 제한하기 위해 활성화 함수의 비선형 영역 내에서만 단지 2 차 내삽을 수행하는 것을 설명한다. LUT의 제한된 사이즈는, 예를 들어, SIMD를 사용하여, 본 구간별 근사 기 법의 고속 하드웨어 구현을 가능하게 하고, LUT를 저장하기 위한 실리콘 면적을 제한하며, 소프트웨어 재구성 테이블들의 오버헤드를 낮출 수도 있다. 2차 내삽의 사용은 결과적인 근사가 미분가능하다는 것을 또한 보장할 수도 있는데, 이는 AI/ML에서 경사 하강 트레이닝 접근법들에 도움이 된다. 그에 따라, 식 를 사용하여 입력 x에 대해 2차 내삽이 수행된다. 내삽 범위 I에서 근사 오차를 감소시키기 위해, 2차 체비세프 다항식(second-order Chebyshev polynomial)들을 사용하여 식 에 표현된 바와 같이 함수를 근사시키기 위해 레메즈와 같은 미니맥스 알고리즘이 사용될 수도 있다. 식 의 표현식은 내삽 간격 oi의 시작과 관련하여 다시 쓰여질 수 있다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "식 에 표현되는 식 의 다시 쓰여진 형태는, 양자화되는 적용예들에서 곱셈들에 있어서의 비트들의 수를 감소시킬 수도 있다. 하나 이상의 실시예에서, oi는, 간격, 즉, 2차 내삽이 수행되는 간격 i의 좌측편(예를 들 어, 좌측 경계)이다.하나 이상의 실시예에서, ; 그리고"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "식 은 정확도를 개선시키기 위해 호너 급수(Horner's series)로서 다시 쓰여질 수도 있다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "d = (x-oi)인 것으로 가정되는 경우, 식 가 다음과 같이 다시 쓰여질 수도 있다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "상기의 식 의 양자화된 버전은, (예를 들어, 중간 및 최종 값들이 오버플로(overflow)되지 않고 원하는 양자 화로 된다는 것을 보장하기 위해) 활성화 함수의 근사된 출력의 고정 소수점 표현에서 표현가능한 값들의 범위 내에서 2의 거듭제곱 인자들로 표현되는 시프트 연산들을 포함할 수도 있다. 예를 들어, 입력 x 및 출력 y는 중간 및 최종 값들이 오버플로되지 않고 원하는 양자화로 된다는 것을 보장하기 위해 2의 거듭제곱 인자들만큼 시프트된다. 이들 2의 거듭제곱들(ni 및 mi)은 양자화 간격에 따라 달라질 수도 있고, 양자화 프로세스에 의해 결정될 수도 있다. 2의 거듭제곱들의 인자들(ni 및 mi)로 표현되는 시프트 연산들을 고려하면, 식 가 다음과 같이 다시 쓰여질 수도 있다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "식 내지 식 에서, 2차 내삽 범위들(예를 들어, 간격들의 세트 I)은: 1) 내삽 간격들 각각의 좌측 및 우 측 경계들을 특정하는 I+1개의 간격 한계 값(oi), 2) I개의 오프셋 값(ai), 3) I개의 1차 도함수 값(bi), 4) I개 의 2차 도함수 값(ci), 5) 임의로 (mi)에 대한 I개의 1차 시프트 값, 그리고 6) 임의로 (ni)에 대한 I개의 2차 시프트 값으로 특성화될 수도 있다. 다음으로, 230에서, 식 을 사용하여 입력 x에 대해 2차 내삽이 수행된다. 215에서, 입력 값 x가 2차 내삽 범위들(예를 들어, 간격들의 세트 I) 외측에 있다고 결정되는 경우, 예를 들어, 입력 값 x가 범위 [-∞, l0) 또는 [lN, ∞]에 있는 경우, 235에서, 범위들 [-∞, l0) 및 [lN, ∞]에 대한 오프셋 값들 amin 및 amax, 그리고 범위들 [-∞, l0) 및 [lN, ∞]에 대한 활성화 함수의 경사 또는 기울기들 bmin 및 bmax가 각각 결정될 수도 있다. 다음으로, 240에서, 다음의 식들을 사용하여, 입력 x를 근사시키기 위해 입력 x에 대해 선형 외삽이 수행될 수 도 있다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "식 및 식 에서, min 및 max는 좌측 및 우측 범위들을 표현한다. 예를 들어, 식 은, x가 [-∞, l0) 사이에 있는 경우, x를 근사시키는 데 사용될 수도 있고, 식 은, x가 [lN, ∞] 사이에 있는 경우, x를 근사 시키는 데 사용될 수도 있다. 하나 이상의 실시예에서, min이 가장 좌측의 2차 내삽 간격(예를 들어, i0)의 좌 측과 일치하고, max가 가장 우측의 2차 내삽 간격들(예를 들어, iN)의 우측과 일치한다고 가정하면, 식 및 식 은 다음과 같이 다시 쓰여질 수 있다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "여기서, o0은 가장 좌측의 2차 내삽 간격(예를 들어, i0)의 좌측 한계이고, ol은 가장 우측의 2차 내삽 간격(예 를 들어, iN)의 우측 한계이다.상기의 식들의 양자화된 버전은 다음과 같이 표현될 수도 있다:"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 11, "content": "상기의 식 및 식 의 양자화된 버전은, 중간 및 최종 값들이 오버플로되지 않고 원하는 양자화로 된다 는 것을 보장하기 위해 2의 거듭제곱 인자들로 표현되는 시프트 연산들(예를 들어, nmin, nmax)을 포함할 수도 있 다. 좌측 및 우측 선형 외삽 범위들은: 1) 좌측 오프셋 값들(amin) 및 1차 도함수(bmin), 2) 우측 오프셋 값들 (amax) 및 1차 도함수(bmax), 3) 임의로 (nmin)에 대한 좌측 시프트 값, 그리고 4) 임의로 (nmax)에 대한 우측 시프 트 값에 의해 특성화될 수도 있다. 하나 이상의 실시예에서, amin 및 amax는 각각 입력 x의 범위들 [-∞, l0) 및 [lN, ∞]에 대한 오프셋 값들을 표현 할 수도 있고, bmin 및 bmax는 범위들 [-∞, l0) 및 [lN, ∞]에 대한 활성화 함수의 경사 또는 기울기들을 표현할 수도 있다. 245에서, 활성화 함수의 근사된 출력 y는 식 을 사용하여 입력 x에 대한 2차 내삽을 수행하거나 또는 식 및 식 를 사용하여 입력 x에 대한 선형 외삽을 수행함으로써 결정된다. 하나 이상의 실시예에서, 입 력 x 및 출력 y는 중간 및 최종 값들이 오버플로되지 않고 원하는 양자화로 된다는 것을 보장하기 위해 2의 거 듭제곱 인자들만큼 시프트된다. 도 3a 및 도 3b는 도 2와 관련하여 논의된 본 구간별 근사 방법을 수행하기 위한 IP 코어 또는 AI 가속기를 예 시한다. 예를 들어, 도 3a 및 도 3b는 도 2와 관련하여 논의된 본 구간별 근사 방법을 수행하기 위한 AI 가속 기(예를 들어, 뉴럴 네트워크 프로세싱 유닛)의 기능을 예시한다. 예를 들어, AI 가속기 또는 IP 코어는, 비트 시프터, 입력 값이 속하는 간격을 식별하기 위한 디바이 스, 선형 내삽을 위한 특정 간격들에서 입력 활성화 함수의 기울기를 결정하기 위한 디바이스, 하나 이상의 활성화 함수와 연관된 LUT들을 저장하기 위한 디바이스, 멀티플렉서, 및 2개의 곱셈-누적-스 케일 디바이스(335 및 340)를 포함한다. 본 개시내용의 범주로부터 벗어남이 없이, 디바이스들(315, 325, 및 320)은 다양한 조합들로 함께 조합될 수도 있다는 것이 인식된다. 도 3의 AI 가속기 또는 IP 코어에서, 입력 x가 수신될 때, 입력 x에 대해 비트 시프트 연산이 수행된다. 도 2와 관련하여 논의된 바와 같이, 시프트 연산은 중간 및 최종 값들이 오버플로되지 않고 원하는 양자화로 된 다는 것을 보장하기 위해 수행될 수도 있다. 시프트 연산은 식 에 나타낸 바와 같이 2의 거듭제곱 인자들로 표현될 수도 있다. 이들 2의 거듭제곱들(식 의 ni 및 mi)은 양자화 간격에 따라 달라질 수도 있다. 디바이스는, 식 과 관련하여 논의된 바와 같이, 입력 값 x가, 우측 경계를 제외한 간격들의 세트 I의 경계들 내에 있는지를 결정할 수도 있다. 간격들의 세트 I는, 활성화 함수가 비선형 거동을 나타내는 간격들일 수도 있다. 하나 이상의 실시예에서, 간격들의 세트 I는 비균일 간격들의 세트를 포함한다고 가정될 수도 있고, 여기서 i는 간격들의 세트에서의 한 간격을 표현한다. 하나 이상의 실시예에서, 입력 x의 MSB들의 서브 세트가 디바이스에 입력되는데, 이는 간격들의 비균일 분포가, 양자화된 입력(예를 들어, x_msb), 2의 보 수 인코딩된 입력 값의 최상위 비트들에 기초할 수도 있기 때문이다. 예를 들어, 6개의 최상위 입력 비트가 16 개의 비균일 간격의 경계들을 정의하는 데 사용될 수 있다. 모듈이 입력 x가 간격들의 세트 I의 경계들 내에 있다고 결정하는 경우, 간격들의 세트 I에서의 한 간격을 표현하는 간격 i의 파라미터들을 사용하여 입력 x를 근사시키기 위해 2차 내삽이 수행된다. 디바이스는, 입력 x의 값을 포함하는 간격들의 세트 I 중에서 간격 i를 또한 결정한다. 다음으로, 디바이스로부터, 입력 x(또는 입력 키 x)를 포함하는 간격 i와 연관된 파라미터들 ai, bi, ci의 값이 식 또는 식 에 기초하여 입력 x의 2차 내삽을 수행하기 위해 LUT로부터 검색된다. 활성화 함수와 연관된 LUT는 AI 가속기 또는 하드 매크로 IP의 다른 메모리 또는 저장 유닛에 또는 디바이스에 저장 될 수도 있다. 일단 입력 x의 2차 내삽을 수행하기 위한 파라미터들 ai, bi, ci가 LUT로부터 검색되면, 멀티플렉서는, 모 듈의 출력에 연결되는 멀티플렉서의 입력을 선택할 수도 있다(예를 들어, 2차 내삽이 수행될 때, 모듈로부터 어떠한 출력도 없을 수도 있다). 멀티플렉서는 모듈로부터 파라미터들 ai, bi, ci를 출력하고, 곱셈-누적-스케일 모듈들(335 및 340)은 식 및 식 에 기초하여 입력 x의 2차 내삽을 수행한다. 예를 들어, 하나 이상의 실시예에서, 곱셈-누적-스케일 모듈은, 식 에 나타낸 바와 같이 연 산(bi' + ci d)을 수행할 수도 있고, 곱셈-누적-스케일 모듈은 곱셈-누적-스케일 모듈로부터의 출력을 \"d\"와 곱한 후에 결과에 파라미터 ai의 값을 더함으로써 출력 y의 값을 결정할 수도 있다. 하나 이상의 실시예에서, 출력 y는 중간 및 최종 값들이 오버플로되지 않고 원하는 양자화로 된다는 것을 보장 하기 위해 시프트될 수도 있다(예를 들어, 식 참조). 그러나, 모듈이 입력 x가 간격들의 세트 I의 경계들 내에 없다고 결정하는 경우, 예를 들어, 입력 값 x가 2차 내삽 범위들 외측에 있는 경우, 즉, x가 범위들 [-∞, l0) 및 [lN, ∞]에 있는 경우, 식 및 식 을 사용하여, 입력 x를 근사시키기 위해 선형 외삽이 사용된다. 그러한 경우에, 디바이스는 입력 x의 범위들 [-∞, l0) 및 [lN+1, ∞]에 대한 오프셋 값들 amin 및 amax를 각 각 결정하고, 범위들 [-∞, l0) 및 [lN+1, ∞]에 대한 활성화 함수의 경사 또는 기울기들 bmin 및 bmax를 각각 결 정한다. 일단 파라미터들 amin 또는 amax 및 bmin 또는 bmax가 결정되면, 멀티플렉서는 파라미터들 amin 또는 amax 및 bmin 또는 bmax를 출력하고, 곱셈-누적-스케일 모듈들(335 및 340)은 식 및 식 에 기초하여 입력 x의 선 형 내삽을 수행한다. 예를 들어, 하나 이상의 실시예에서, 곱셈-누적-스케일 모듈은 식 에 나타낸 바 와 같은 연산(bmin' (x-o0)) 또는 식 에 나타낸 바와 같은 연산(bmax' (x-oI))을 수행할 수도 있고, 곱셈-누 적-스케일 모듈은 곱셈-누적-스케일 모듈로부터의 출력에 \"amin'\" 또는 \"amax'\"를 더함으로써 출력 y의 값을 결정할 수도 있다. 하나 이상의 실시예에서, 출력 y는 중간 및 최종 값들이 오버플로되지 않고 원하는 양자화로 된다는 것을 보장 하기 위해 시프트될 수도 있다(예를 들어, 식 및 식 참조). 도 3b는 제2 곱셈-누적-스케일 모듈을 제외한, 도 3a의 모든 컴포넌트들을 포함한다. 도 3b에서, 곱셈-누 적-스케일 모듈은, 도 3a의 곱셈-누적-스케일 모듈들(335 및 340)에 의해, 예를 들어, 2개의 스테이지에서 수행된 모든 계산들을 수행한다. 예를 들어, 도 3b의 시스템에서, 제1 라운드의 계산 동안, 곱셈-누적-스케일 모듈은, 도 3a의 곱셈-누적-스케일 모듈에 의해 수행된 계산들을 수행할 수도 있다. 곱셈-누적-스케 일 모듈에 의해 수행된 제1 라운드의 계산들의 출력은 디멀티플렉서를 통해 곱셈-누적-스케일 모듈 로 피드백되고, 제2 라운드의 연산들 동안, 곱셈-누적-스케일 모듈은, 도 3a의 곱셈-누적-스케일 모 듈에 의해 수행된 계산들을 수행할 수도 있다. 다시 말해, 도 3a에 도시된 바와 같이, 2개의 곱셈-누적-스케일 모듈들(335 및 340)을 갖는 대신에, 곱셈-누적- 스케일 모듈들(335 및 340) 중 단지 하나만이 입력 x의 근사를 위한 모든 계산을 수행하는 데 재사용될 수도 있 다. 예를 들어, 도 3b의 실시예에서, 곱셈-누적-스케일 모듈에 의해 제1 곱셈-누적-스케일 연산들을 수행 한 후에, 제1 결과가 디멀티플렉서를 통해 입력으로서 곱셈-누적-스케일 모듈로 피드백된다. 그 후 에, 제2 곱셈-누적-스케일 연산이 제1 결과에 기초하여 모듈에 의해 수행되고, 제2 곱셈-누적-스케일 연산 의 결과가 디멀티플렉서를 통해 제2 결과로서 출력될 수도 있는데, 이는 입력 x의 근사의 최종 결과일 수 도 있다. 하나 이상의 실시예에서, 디멀티플렉서는, 곱셈-누적-스케일 모듈의 입력에 연결되는 제1 출력 포트를 선택하여 제1 결과를 출력할 수도 있고, 디멀티플렉서는, 곱셈-누적-스케일 모듈의 입력 에 연결되는 제2 출력 포트를 선택하여 입력 x의 근사의 최종 결과 또는 제2 결과를 출력할 수도 있다. 예를 들어, 도 4에서, 도 2와 관련하여 논의된 방법을 사용하여 간격 [-8, 8) 동안 활성화 함수 tanh를 근사시 키기 위해 2차 내삽이 사용된다(여기서 tanh는 비선형 거동을 나타낸다). 예를 들어, 간격 [-8, 8)이 복수의 비균일 간격들(예를 들어, 간격들의 세트 I)로 분할될 수도 있고, 식 내지 식 을 사용하여 간격들의 세 트 I의 각각의 간격 i에 대한 파라미터들의 값들을 포함하는 LUT를 사용하여 입력 x가 근사될 수도 있다. 그러 나, 식 내지 식 를 사용하여 간격들 [-∞, -8) 및 [8, ∞]에 대한 활성화 함수 tanh를 근사시키기 위해 선형 외삽이 사용된다. 이 경우에, amin'의 값은 -1이고 amax'의 값은 +1이다. 그러나, bmin'와 bmax' 양측 모두 의 값들은 제로일 수도 있다.예를 들어, 도 5에서, 도 2와 관련하여 논의된 방법을 사용하여 간격 [-16, 16) 동안 활성화 함수 sigmoid를 근 사시키기 위해 2차 내삽이 사용된다(여기서 sigmoid는 비선형 거동을 나타낸다). 예를 들어, 간격 [-16, 16)이 복수의 비균일 간격들(예를 들어, 간격들의 세트 I)로 분할될 수도 있고, 식 내지 식 을 사용하여 간격 들의 세트 I의 각각의 간격 i에 대한 파라미터들의 값들을 포함하는 LUT를 사용하여 입력 x가 근사될 수도 있다. 그러나, 식 내지 식 를 사용하여 간격들 [-∞, -16) 및 [16, ∞]에 대한 활성화 함수 sigmoid 를 근사시키기 위해 선형 외삽이 사용된다. 이 경우에, amin'의 값은 -1이고 amax'의 값은 +1이다. 그러나, bmin'와 bmax' 양측 모두의 값들은 제로일 수도 있다. 예를 들어, 도 6에서, 도 2와 관련하여 논의된 방법을 사용하여 간격 [-5, 3) 동안 활성화 함수 swish를 근사시 키기 위해 2차 내삽이 사용된다(여기서 swish는 비선형 거동을 나타낸다). 예를 들어, 간격 [-5, 3)이 복수의 비균일 간격들(예를 들어, 간격들의 세트 I)로 분할될 수도 있고, 식 내지 식 을 사용하여 간격들의 세 트 I의 각각의 간격 i에 대한 파라미터들의 값들을 포함하는 LUT를 사용하여 입력 x가 근사될 수도 있다. 그러 나, 식 내지 식 를 사용하여 간격들 [-∞, -5) 및 [3, ∞]에 대한 활성화 함수 swish를 근사시키기 위 해 선형 외삽이 사용된다. 이 경우에, amin'의 값은 0이고, amax'의 값은 0이며, bmin'의 값은 또한 0이다. 그러 나, bmax'의 값은 간격 [3, ∞]에서 가변적이다. 본 개시내용의 하나 이상의 실시예는 AI/ML에 대한 활성화 함수들의 구간별 근사 방법을 설명한다. 본 개시내 용의 근사 방법에서, 비선형 거동을 나타내는 활성화 함수의 영역 또는 간격(예를 들어, 비선형 간격)을 근사시 키기 위해 2차 내삽이 사용되고, 가장 작은 간격 경계 미만의 입력 값들의 경우 그리고 가장 큰 간격 경계보다 더 큰 입력 값들의 경우 선형 외삽이 사용된다. 본 개시내용의 근사 방법에서, 빠르고 효율적인 계산을 위해 2 차 내삽이 룩업 테이블(LUT)과 함께 사용된다. 2차 내삽을 수행하여 활성화 함수의 비선형 영역을 근사시키기 위해, 활성화 함수의 비선형 간격이 비균일 간격들로 분할되어 제한된 룩업 테이블 사이즈들 및 효율적인 소프 트웨어 및 하드웨어 구현을 보장하는데, 이는 LUT가 비균일 간격들의 한계 값들 각각에 대한 내삽 계수 값들을 저장할 수도 있기 때문이다. 도 7은 집적 회로를 표현하는 설계 데이터 및 명령어들을 변환 및 검증하기 위해 집적 회로와 같은 제조 물품의 설계, 검증, 및 제작 동안 사용되는 예시적인 세트의 프로세스들을 예시한다. 이들 프로세스들 각각은 다 수의 모듈들 또는 동작들로서 구조화 및 인에이블될 수 있다. 'EDA'라는 용어는 '전자 설계 자동화(Electronic Design Automation)'라는 용어를 의미한다. 이들 프로세스들은, 설계자에 의해 공급되는 정보, 즉, 한 세트의 EDA 프로세스들을 사용하는 제조 물품을 생성하도록 변환되는 정보로 제품 아이디어를 생성하는 것으 로 시작한다. 설계가 완결될 때, 설계가 테이프 아웃(tape-out)되는데, 이는 집적 회로에 대한 아트워크 (예를 들어, 지오메트릭 패턴들)가 마스크 세트를 제조하기 위한 제작 설비 - 이는 그 후에 집적 회로를 제조하 는 데 사용된다 - 로 전송될 때이다. 테이프 아웃 후에, 반도체 다이가 제작되고 패키징 및 조립 프로세 스들이 수행되어 완성된 집적 회로를 생성한다. 회로 또는 전자 구조체에 대한 사양들은 저레벨 트랜지스터 재료 레이아웃들로부터 고레벨 설명 언어들에 이르 기까지 다양할 수도 있다. 고레벨의 표현은 VHDL, Verilog, SystemVerilog, SystemC, MyHDL 또는 OpenVera와 같은 하드웨어 설명 언어(hardware description language)('HDL')를 사용하여, 회로들 및 시스템들을 설계하는 데 사용될 수도 있다. HDL 설명은 로직-레벨 레지스터 전송 레벨(register transfer level)('RTL') 설명, 게 이트-레벨 설명, 레이아웃-레벨 설명, 또는 마스크-레벨 설명으로 변환될 수 있다. 더 상세한 설명인 각각의 하위 표현 레벨이 설계 설명에 더 유용한 세부사항, 예를 들어, 설명을 포함하는 모듈들에 대한 더 많은 세부사 항들을 부가한다. 더 상세한 설명들인 하위 표현 레벨들은 컴퓨터에 의해 생성되거나, 설계 라이브러리로부터 도출되거나, 또는 다른 설계 자동화 프로세스에 의해 생성될 수 있다. 더 상세한 설명들을 특정하기 위한 표현 언어의 하위 레벨에 있는 사양 언어의 일 예는, 많은 아날로그 컴포넌트들을 갖는 회로들의 상세한 설명들을 위 해 사용되는 SPICE이다. 각각의 표현 레벨에서의 설명들은, 그 계층의 대응하는 시스템들(예를 들어, 공식 검 증 시스템)에 의한 사용을 위해 인에이블된다. 설계 프로세스가 도 7에 도시된 시퀀스를 사용할 수도 있다. 설명된 프로세스들은 EDA 제품들(또는 EDA 시스템들)에 의해 인에이블된다. 시스템 설계 동안, 제조될 집적 회로의 기능성이 특정된다. 설계는 전력 소비, 성능, 면적(물리적 및/또 는 라인들의 코드), 및 비용들의 감소 등과 같은 원하는 특성들에 대해 최적화될 수도 있다. 설계를 상이한 타 입들의 모듈들 또는 컴포넌트들로 파티셔닝하는 것이 이 스테이지에서 발생할 수 있다. 로직 설계 및 기능적 검증 동안, 회로에서의 모듈들 또는 컴포넌트들은 하나 이상의 설명 언어로 특정되고 사양이 기능적 정확성을 위해 체크된다. 예를 들어, 회로의 컴포넌트들은, 설계되는 회로 또는 시스템의 사양 의 요건들과 매칭되는 출력들을 생성하도록 검증될 수도 있다. 기능적 검증은 시뮬레이터들 및 다른 프로그램 들 예컨대 테스트벤치 생성기들, 정적 HDL 체커들, 및 공식 검증기들을 사용할 수도 있다. 일부 실시예들에서, 기능적 검증을 가속화하기 위해 '에뮬레이터들' 또는 '프로토타이핑 시스템들'이라고 지칭되는 컴포넌트들의 특 수 시스템들이 사용된다. 테스트를 위한 합성 및 설계 동안, HDL 코드가 넷리스트(netlist)로 변환된다. 일부 실시예들에서, 넷리 스트는 그래프 구조일 수도 있고, 여기서 그래프 구조의 에지들은 회로의 컴포넌트들을 표현하고, 여기서 그래 프 구조의 노드들은, 컴포넌트들이 상호연결되는 방법을 표현한다. HDL 코드와 넷리스트 양측 모두는, 집적 회 로가, 제조될 때, 특정된 설계에 따라 수행하는지를 검증하기 위해 EDA 제품에 의해 사용될 수 있는 계층적 제 조 물품들이다. 넷리스트는 타깃 반도체 제조 기술에 대해 최적화될 수 있다. 부가적으로, 완성된 집적 회로 가 테스트되어, 집적 회로가 사양의 요건들을 만족시키는지를 검증할 수도 있다. 넷리스트 검증 동안, 넷리스트는 타이밍 제약들에의 준수에 대해 그리고 HDL 코드와의 대응에 대해 체크된 다. 설계 계획 동안, 집적 회로에 대한 전체 평면도가 구축되고 타이밍 및 상위-레벨 라우팅에 대해 분석 된다. 레이아웃 또는 물리적 구현 동안, 물리적 배치(트랜지스터들 또는 커패시터들과 같은 회로 컴포넌트들의 포지셔닝) 및 라우팅(다수의 전도체들에 의한 회로 컴포넌트들의 연결)이 발생하고, 특정 로직 기능들을 인에이 블시키기 위한 라이브러리로부터의 셀들의 선택이 수행될 수 있다. 본 명세서에서 사용되는 바와 같이, '셀'이 라는 용어는, 부울 로직 함수(Boolean logic function)(예를 들어, AND, OR, NOT, XOR) 또는 저장 함수(예컨대, 플립플롭 또는 래치)를 제공하는 한 세트의 트랜지스터들, 다른 컴포넌트들, 및 상호연결들을 특 정할 수도 있다. 본 명세서에서 사용되는 바와 같이, 회로 '블록'은 2개 이상의 셀을 지칭할 수도 있다. 셀과 회로 블록 양측 모두가 모듈 또는 컴포넌트라고 지칭될 수 있고, 시뮬레이션들에서 그리고 물리적 구조체들로서 모두 인에이블된다. 사이즈와 같은 파라미터들이, 선택된 셀들('표준 셀들'에 기초함)에 대해 특정되고, EDA 제품들에 의한 사용을 위해 데이터베이스에서 액세스가능해진다. 분석 및 추출 동안, 회로 기능은, 레이아웃 설계의 정밀화를 허용하는 레이아웃 레벨에서 검증된다. 물리 적 검증 동안, 레이아웃 설계는 DRC 제약들, 전기적 제약들, 리소그래피 제약들과 같은 제조 제약들이 올 바르다는 것, 그리고 회로부 기능이 HDL 설계 사양과 매칭된다는 것을 보장하기 위해 체크된다. 분해능 향상 동안, 회로 설계가 제조되는 방법을 개선시키기 위해 레이아웃의 지오메트리가 변형된다. 테이프 아웃 동안, 리소그래피 마스크들의 생성을 위해 (적절한 경우 리소그래피 향상들이 적용된 후에) 사용될 데이터가 생성된다. 마스크 데이터 준비 동안, 완성된 집적 회로들을 생성하는 데 사용되는 리소그래피 마스크들을 생성하기 위해 '테이프 아웃' 데이터가 사용된다. (도 8의 컴퓨터 시스템과 같은) 컴퓨터 시스템의 저장 서브시스템이, 라이브러리에 대한 그리고 라이브러 리를 사용하는 물리적 및 논리적 설계에 대한 셀들의 개발을 위해 사용되는 제품들, 및 본 명세서에서 설명되는 EDA 제품들의 일부 또는 전부에 의해 사용되는 프로그램들 및 데이터 구조들을 저장하는 데 사용될 수도 있다. 도 8은 컴퓨터 시스템의 예시적인 머신을 예시하고, 그 컴퓨터 시스템 내에서는 머신으로 하여금 본 명세 서에서 논의된 방법론들 중 임의의 하나 이상을 수행하게 하기 위한 한 세트의 명령어들이 실행될 수도 있다. 대안적인 구현들에서, 머신은 LAN, 인트라넷, 엑스트라넷, 및/또는 인터넷에서 다른 머신들에 연결(예를 들어, 네트워킹)될 수도 있다. 머신은 클라이언트-서버 네트워크 환경에서의 서버 또는 클라이언트 머신의 능력으로, 피어-투-피어(또는 분산형) 네트워크 환경에서의 피어 머신으로서, 또는 클라우드 컴퓨팅 인프라스트럭처 또는 환경에서의 서버 또는 클라이언트 머신으로서 동작할 수도 있다. 머신은, 퍼스널 컴퓨터(personal computer)(PC), 태블릿 PC, 셋톱 박스(set-top box)(STB), 퍼스널 디지털 어 시스턴스(Personal Digital Assistant)(PDA), 셀룰러 전화기, 웹 어플라이언스, 서버, 네트워크 라우터, 스위 치 또는 브리지, 또는 임의의 머신에 의해 취해질 액션들을 특정하는 한 세트의 명령어들을 실행(순차적 또는 다르게)하는 것이 가능한 그 임의의 머신일 수도 있다. 추가로, 단일 머신이 예시되어 있지만, \"머신\"이라는 용어는, 본 명세서에서 논의된 방법론들 중 임의의 하나 이상을 수행하기 위해 한 세트(또는 다수의 세트들)의 명령어들을 개별적으로 또는 공동으로 실행하는 머신들의 임의의 콜렉션을 포함하는 것으로 또한 간주되어야 한 다. 예시적인 컴퓨터 시스템은, 프로세싱 디바이스, 메인 메모리(예를 들어, 판독 전용 메모리 (read-only memory)(ROM), 플래시 메모리, 동적 랜덤 액세스 메모리(dynamic random access memory)(DRAM) 예 컨대 동기식 DRAM(synchronous DRAM)(SDRAM), 정적 메모리(예를 들어, 플래시 메모리, 정적 랜덤 액세스 메모리(static random access memory)(SRAM) 등), 및 데이터 저장 디바이스를 포함하는데, 이들은 버스 를 통해 서로 통신한다. 프로세싱 디바이스는 마이크로프로세서, 중앙 프로세싱 유닛, 또는 이와 유사한 것과 같은 하나 이상의 프 로세서를 표현한다. 더 구체적으로는, 프로세싱 디바이스는 복합 명령어 세트 컴퓨팅(complex instruction set computing)(CISC) 마이크로프로세서, 축소 명령어 세트 컴퓨팅(reduced instruction set computing)(RISC) 마 이크로프로세서, 매우 긴 명령어 워드(very long instruction word)(VLIW) 마이크로프로세서, 또는 다른 명령어 세트들을 구현하는 프로세서, 또는 명령어 세트들의 조합을 구현하는 프로세서들일 수도 있다. 프로세싱 디바 이스는 또한, 주문형 집적 회로(application specific integrated circuit)(ASIC), 필드 프로그래밍가능 게이트 어레이(field programmable gate array)(FPGA), 디지털 신호 프로세서(digital signal processor)(DSP), 네트워크 프로세서, 또는 이와 유사한 것과 같은 하나 이상의 특수 목적 프로세싱 디바이스일 수도 있다. 프로세싱 디바이스는, 본 명세서에서 설명되는 동작들 및 단계들을 수행하기 위해 명령어들 을 실행하도록 구성될 수도 있다. 컴퓨터 시스템은, 네트워크를 통해 통신하기 위한 네트워크 인터페이스 디바이스를 더 포함할 수도 있다. 컴퓨터 시스템은, 비디오 디스플레이 유닛(예를 들어, 액정 디스플레이(liquid crystal display)(LCD) 또는 음극선관(cathode ray tube)(CRT)), 영숫자 입력 디바이스(예를 들어, 키보드), 커서 제어 디바이스(예를 들어, 마우스), 그래픽 프로세싱 유닛, 신호 생성 디바이스(예를 들어, 스 피커), 그래픽 프로세싱 유닛, 비디오 프로세싱 유닛, 및 오디오 프로세싱 유닛을 또한 포함할 수도 있다. 하나 이상의 실시예에서, 컴퓨터 시스템은 또한 뉴럴 네트워크 프로세싱 유닛을 포함할 수도 있다. 하나 이상의 실시예에서, 도 7의 프로세스는 뉴럴 네트워크 프로세싱 유닛에서 수행될 수도 있고, 뉴럴 네트워크 프로세싱 유닛은 도 3a 및 도 3b의 AI 가속기를 포함할 수도 있다. 데이터 저장 디바이스는, 본 명세서에서 설명되는 방법론들 또는 기능들 중 임의의 하나 이상을 구체화하 는 하나 이상의 세트의 명령어들 또는 소프트웨어가 저장되는 머신 판독가능 저장 매체(비일시적 컴 퓨터 판독가능 매체라고도 또한 알려져 있음)를 포함할 수도 있다. 명령어들은 또한, 컴퓨터 시스템(80 0)에 의한 실행 동안 메인 메모리 내에 그리고/또는 프로세싱 디바이스 내에 완전히 또는 적어도 부 분적으로 상주할 수도 있고, 메인 메모리 및 프로세싱 디바이스는 또한 머신 판독가능 저장 매체들을 구축한다. 일부 구현들에서, 명령어들은, 본 개시내용에 대응하는 기능성을 구현하기 위한 명령어들을 포함한다. 머 신 판독가능 저장 매체가 예시적인 구현에서 단일 매체인 것으로 도시되어 있지만, \"머신 판독가능 저장 매체\"라는 용어는, 하나 이상의 세트의 명령어들을 저장하는 단일 매체 또는 다수의 매체들(예를 들어, 중앙집 중형 또는 분산형 데이터베이스, 및/또는 연관된 캐시들 및 서버들)을 포함하는 것으로 간주되어야 한다. \"머 신 판독가능 저장 매체\"라는 용어는, 머신에 의한 실행을 위해 한 세트의 명령어들을 저장 또는 인코딩하는 것 이 가능하고, 머신 및 프로세싱 디바이스로 하여금 본 개시내용의 방법론들 중 임의의 하나 이상을 수행하 게 하는 임의의 매체를 포함하는 것으로 또한 간주되어야 한다. 이에 따라, \"머신 판독가능 저장 매체\"라는 용 어는 솔리드 스테이트 메모리들, 광학 매체들, 및 자기 매체들을 포함하지만 이에 제한되지 않는 것으로 간주되 어야 한다. 선행하는 상세한 설명들의 일부 부분들은 컴퓨터 메모리 내의 데이터 비트들에 대한 동작들의 상징적 표현들 및 알고리즘들의 관점에서 제시되었다. 이들 알고리즘적 설명들 및 표현들은, 데이터 프로세싱 분야들의 통상의"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "기술자들에 의해 사용되어 이들의 작업의 본질을 본 기술분야의 다른 통상의 기술자들에게 가장 효과적으로 전 달하는 방식들이다. 알고리즘은, 원하는 결과로 이어지는 동작들의 시퀀스일 수도 있다. 동작들은 물리적인 양들의 물리적인 조작들을 요구하는 것들이다. 그러한 양들은 저장, 조합, 비교, 그리고 이와 달리 조작되는 것이 가능한 전기적 또는 자기적 신호들의 형태를 취할 수도 있다. 그러한 신호들은 비트들, 값들, 요소들, 심 볼들, 문자들, 항들, 숫자들, 또는 이와 유사한 것으로 지칭될 수도 있다. 그러나, 이들 그리고 유사한 용어들 모두는 적절한 물리적인 양들과 연관되어야 하고, 단지 이들 양들에 적용되 는 편리한 레이블들일 뿐이라는 것을 염두에 두어야 한다. 본 개시내용으로부터 명백한 바와 같이 구체적으로 달리 언급되지 않는 한, 설명 전반에 걸쳐, 특정 용어들은, 컴퓨터 시스템의 레지스터들 및 메모리들 내의 물리 적(전자) 양들로서 표현되는 데이터를, 컴퓨터 시스템 메모리들 또는 레지스터들 또는 다른 그러한 정보 저장디바이스들 내의 물리적 양들로서 유사하게 표현되는 다른 데이터로 조작 및 변환하는 컴퓨터 시스템, 또는 유 사한 전자 컴퓨팅 디바이스의 액션 및 프로세스들을 지칭한다는 것이 인식된다. 본 개시내용은 또한 본 명세서의 동작들을 수행하기 위한 장치에 관한 것이다. 이 장치는 의도된 목적들을 위 해 특수하게 구축될 수도 있거나, 또는 그것은, 컴퓨터에 저장된 컴퓨터 프로그램에 의해 선택적으로 활성화 또 는 재구성되는 컴퓨터를 포함할 수도 있다. 그러한 컴퓨터 프로그램은, 플로피 디스크들, 광학 디스크들, CD- ROM들, 및 자기-광학 디스크들을 포함하는 임의의 타입의 디스크, 판독 전용 메모리(ROM)들, 랜덤 액세스 메모 리(RAM)들, EPROM들, EEPROM들, 자기 또는 광학 카드들, 또는 전자 명령어들을 저장하기에 적합한 임의의 타입 의 매체들과 같은 - 그러나 이에 제한되지 않음 - 컴퓨터 판독가능 저장 매체에 저장될 수도 있는데, 이들 각각 은 컴퓨터 시스템 버스에 커플링된다. 본 명세서에 제시된 알고리즘들 및 디스플레이들은 본질적으로 임의의 특정 컴퓨터 또는 다른 장치에 관련되지 않는다. 다양한 다른 시스템들이 본 명세서의 교시들에 따라 프로그램들과 함께 사용될 수도 있거나, 또는 그 것은 방법을 수행하기 위해 더 특수화된 장치를 구축하는 것이 편리하다는 것을 입증할 수도 있다. 부가적으로, 본 개시내용은 임의의 특정 프로그래밍 언어를 참조하여 설명되지 않는다. 다양한 프로그래밍 언 어들이 본 명세서에서 설명되는 바와 같은 본 개시내용의 교시들을 구현하는 데 사용될 수도 있다는 것이 인식 될 것이다. 본 개시내용은 본 개시내용에 따른 프로세스를 수행하도록 컴퓨터 시스템(또는 다른 전자 디바이스들)을 프로그 래밍하는 데 사용될 수도 있는 명령어들이 저장되는 머신 판독가능 매체를 포함할 수도 있는 컴퓨터 프로그램 제품 또는 소프트웨어로서 제공될 수도 있다. 머신 판독가능 매체는, 머신(예를 들어, 컴퓨터)에 의해 판독가 능한 형식으로 정보를 저장하기 위한 임의의 메커니즘을 포함한다. 예를 들어, 머신 판독가능(예를 들어, 컴퓨 터 판독가능) 매체는 머신(예를 들어, 컴퓨터) 판독가능 저장 매체 예컨대 판독 전용 메모리(\"ROM\"), 랜덤 액세 스 메모리(\"RAM\"), 자기 디스크 저장 매체들, 광학 저장 매체들, 플래시 메모리 디바이스들 등을 포함한다. 첨부된 도면들과 관련하여 아래에 제시된 상세한 설명은, 본 개시내용에 따라 제공된 AI 가속기에 대한 효율적 인 룩업 테이블 기반 함수들을 위한 시스템 및 방법의 일부 예시적인 실시예들의 설명으로서 의도된 것이고, 본 개시내용이 구축 또는 활용될 수도 있는 유일한 형태들을 표현하도록 의도된 것이 아니다. 이 설명은 예시된 실시예들과 관련하여 본 개시내용의 피처들을 제시한다. 그러나, 본 개시내용의 범주 내에 포괄되도록 또한 의 도된 상이한 실시예들에 의해 동일한 또는 등가의 기능들 또는 구조체들이 달성될 수도 있다는 것이 이해되어야 한다. 본 명세서의 다른 곳에 나타낸 바와 같이, 동일한 요소 번호들은 동일한 요소들 또는 피처들을 표시하도 록 의도된다. \"제1\", \"제2\", \"제3\" 등의 용어들이 다양한 요소들, 컴포넌트들, 영역들, 층들 및/또는 섹션들을 설명하기 위해 본 명세서에서 사용될 수도 있지만, 이들 요소들, 컴포넌트들, 영역들, 층들 및/또는 섹션들은 이들 용어들에 의해 제한되어서는 안 된다는 것이 이해될 것이다. 이들 용어들은 하나의 요소, 컴포넌트, 영역, 층 또는 섹션 을 다른 요소, 컴포넌트, 영역, 층 또는 섹션으로부터 구별하기 위해 단지 사용된다. 따라서, 본 명세서에서 논의된 제1 요소, 컴포넌트, 영역, 층 또는 섹션은 본 개시내용의 범주로부터 벗어남이 없이 제2 요소, 컴포넌 트, 영역, 층 또는 섹션으로 불릴 수 있다. 본 명세서에서 사용되는 전문용어는 단지 특정 실시예들을 설명할 목적을 위한 것이며 본 개시내용을 제한하려 는 것으로 의도되지 않는다. 본 명세서에서 사용되는 바와 같이, 용어들 \"실질적으로(substantially)\", \"약 (about)\", 그리고 이와 유사한 용어들은 근사의 용어들로서 사용되고 정도의 용어들로서 사용되지 않으며, 본"}
{"patent_id": "10-2024-7039087", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 13, "content": "기술분야의 통상의 기술자들에 의해 인지되는 측정된 또는 계산된 값들의 내재적 편차들을 고려하도록 의도된다. 본 명세서에서 사용되는 바와 같이, 문맥상 명확히 달리 표시하지 않는 한, 단수형들 \"a\" 및 \"an\"은 복수형들도 또한 포함하도록 의도된다. \"포함하다(comprises)\" 및/또는 \"포함하는(comprising)\"이라는 용어들은, 본 명세 서에서 사용될 때, 언급된 피처들, 정수들, 단계들, 동작들, 요소들, 및/또는 컴포넌트들의 존재를 특정하지만, 하나 이상의 다른 피처, 정수, 단계, 동작, 요소, 컴포넌트, 및/또는 이들의 그룹의 존재 또는 부가를 배제시키 지 않는다는 것이 추가로 이해될 것이다. 본 명세서에서 사용되는 바와 같이, \"및/또는(and/or)\"이라는 용어는 연관된 리스팅된 아이템들 중 하나 이상의 아이템의 임의의 그리고 모든 조합들을 포함한다. \"~중 적어도 하나 (at least one of)\"와 같은 표현들은, 요소들의 리스트에 선행할 때, 요소들의 전체 리스트를 수정하고 리스트 의 개별 요소들을 수정하지 않는다. 추가로, 본 개시내용의 실시예들을 설명할 때 \"할 수도 있다(may)\"의 사용 은 \"본 개시내용의 하나 이상의 실시예\"를 지칭한다. 또한, \"예시적인(exemplary)\"이라는 용어는 예 또는 예시를 지칭하는 것으로 의도된다. 본 명세서에서 사용되는 바와 같이, \"사용하다(use)\", \"사용하는(using)\", 및 \"사용되는(used)\"이라는 용어들은 각각 \"활용하다(utilize)\", \"활용하는(utilizing)\", 및 \"활용되는 (utilized)\"이라는 용어들과 동의어로 간주될 수도 있다. 전술한 개시내용에서, 본 개시내용의 구현들은 그의 특정 예시적인 구현들을 참조하여 설명되었다. 다음의 청 구범위에 제시된 바와 같은 본 개시내용의 구현들의 더 넓은 사상 및 범주로부터 벗어남이 없이 다양한 수정들 이 이루어질 수도 있다는 것이 명백할 것이다. 본 개시내용이 단수 시제로 일부 요소들을 지칭하는 경우, 하나 초과의 요소가 도면들에 도시될 수 있고 동일한 요소들은 동일한 수치들로 레이블링된다. 이에 따라, 본 개시 내용 및 도면들은 제약적인 의미보다는 오히려 예시적인 의미로 간주되어야 한다."}
{"patent_id": "10-2024-7039087", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 개시내용은 아래에 주어진 상세한 설명으로부터 그리고 본 개시내용의 실시예들의 첨부 도면들로부터 더 완 전히 이해될 것이다. 도면들은 본 개시내용의 실시예들의 지식 및 이해를 제공하기 위해 사용되고 본 개시내용 의 범주를 이들 특정 실시예들로 제한하지 않는다. 게다가, 도면들은 반드시 일정한 비율로 그려진 것은 아니 다. 도 1은 AI 또는 ML에서 사용되는 상이한 비선형 활성화 함수들을 예시한다. 도 2는 본 개시내용의 하나의 실시예에 따른 AI 가속기에 대한 활성화 함수들의 구간별 근사 방법(piece-wise approximation method)을 예시한다. 도 3a 및 도 3b는 본 개시내용의 하나의 실시예에 따른 도 2와 관련하여 논의된 본 구간별 근사 방법을 수행하 기 위한 IP 코어 또는 AI 가속기를 예시한다. 예를 들어, 도 3a 및 도 3b는 도 2와 관련하여 논의된 본 구간별 근사 방법을 수행하기 위한 AI 가속기(예를 들어, 뉴럴 네트워크 프로세싱 유닛)의 기능을 예시한다. 도 4 내지 도 6은 본 개시내용의 일부 실시예들에 따른 도 2와 관련하여 논의된 구간별 근사 방법의 예시적인 적용예들을 예시한다. 도 7은 본 개시내용의 일부 실시예들에 따른 집적 회로의 설계 및 제조 동안 사용되는 다양한 프로세스들의 흐 름도를 도시한다. 도 8은 본 개시내용의 실시예들이 동작할 수도 있는 예시적인 컴퓨터 시스템의 다이어그램을 도시한다. 예를 들어, 하나 이상의 실시예에서, 도 7의 프로세스는 도 8의 뉴럴 네트워크 프로세싱 유닛에서 수행될 수도 있고, 도 8의 뉴럴 네트워크 프로세싱 유닛은 도 3a 및 도 3b의 AI 가속기를 포함한다."}
