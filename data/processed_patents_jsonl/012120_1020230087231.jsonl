{"patent_id": "10-2023-0087231", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0007288", "출원번호": "10-2023-0087231", "발명의 명칭": "뉴럴 네트워크 연산 방법, 장치 및 뉴럴 네트워크 연산을 이용한 키워드 식별 방법", "출원인": "삼성전자주식회사", "발명자": "창동진"}}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "복수의 채널을 포함하는 입력 벡터를 수신하는 단계; 상기 입력 벡터를 나눈 제1 청크들(chunks)을 복수의 제1 인- 메모리 컴퓨팅 매크로에 할당하여 제1 컨볼루션연산을 수행하는 단계; 및 상기 제1 컨볼루션 연산의 결과를 나눈 제2 청크들을 복수의 제2 인- 메모리 컴퓨팅 매크로에 할당하여 제2 컨볼루션 연산을 수행하는 단계를 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 제1 컨볼루션 연산을 수행하는 단계는상기 입력 벡터를 상기 복수의 제1 인- 메모리 컴퓨팅 매크로의 구조에 매칭되도록 상기 입력 벡터의 채널 방향으로 상기 제1 청크들로 나누는 단계를 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서, 상기 제1 청크들로 나누는 단계는상기 입력 벡터의 각 채널의 사이즈가 상기 복수의 제1 인- 메모리 컴퓨팅 매크로의 행(row)의 개수 보다 작거나 같아지도록 상기 입력 벡터를 상기 제1 청크들로 나누는 단계를 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 제1 컨볼루션 연산을 수행하는 단계는 상기 제1 청크들에 대해 시간 방향으로 상기 제1 컨볼루션 연산을 수행하는 단계를 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서, 상기 제1 컨볼루션 연산을 수행하는 단계는 상기 제1 청크들이 할당되는 상기 복수의 제1 인- 메모리 컴퓨팅 매크로 별로 서로 다른 활성화 함수를 적용하여 상기 제1 컨볼루션 연산을 수행하는 단계를 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 공개특허 10-2025-0007288-3-상기 제1 컨볼루션 연산을 수행하는 단계는 상기 제1 컨볼루션 연산의 결과에 기초하여 배치 정규화(batch normalization) 연산을 수행하는 단계; 및상기 배치 정규화 연산의 결과에 기초하여 제1 활성화 연산을 수행하는 단계를 더 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서, 상기 제1 활성화 연산을 수행하는 단계는상기 배치 정규화 연산의 결과에 기초하여 ReLU(Rectified Linear Unit) 8 함수에 기반한 H-swish 8 활성화 연산을 수행하는 단계를 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서, 상기 제2 컨볼루션 연산을 수행하는 단계는상기 제1 컨볼루션 연산의 결과를 연결하는 단계;상기 연결된 제1 컨볼루션 연산의 결과를 상기 제2 청크들로 나누는 단계; 및 상기 제2 청크들을 상기 복수의 제2 인- 메모리 컴퓨팅 매크로에 할당하여 상기 제2 컨볼루션 연산을 수행하는단계를 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 제2 청크들로 나누는 단계는상기 연결된 제1 컨볼루션 연산의 결과의 각 채널의 사이즈가 상기 복수의 제2 인- 메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아지도록 상기 연결된 제1 컨볼루션 연산의 결과를 상기 제2 청크들로 나누는 단계를 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서, 상기 제2 컨볼루션 연산의 결과의 사이즈를 상기 입력 벡터의 사이즈와 일치시키는 단계; 및 상기 입력 벡터의 사이즈에 일치시킨 상기 제2 컨볼루션 연산의 결과와 상기 제1 컨볼루션 연산의 입력값 간의합 연산을 수행하는 단계를 더 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서, 상기 합 연산의 결과에 기초하여 풀링(pooling) 연산을 수행하는 단계; 및상기 풀링 연산의 결과에 기초하여 완전 연결(fully connected) 연산을 수행하는 단계를 더 포함하는 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "공개특허 10-2025-0007288-4-제1항에 있어서, 상기 복수의 제1 인-메모리 컴퓨팅 매크로 및 상기 복수의 제2 인-메모리컴퓨팅 매크로 중 적어도 하나는 프레임 별 증분 연산(Frame-wise incremental computation)을 수행하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항에 있어서, 상기 입력 벡터는 순차적으로 입력되는 오디오 스트림(audio stream)의 적어도 일부에 대응되는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제1항에 있어서, 상기 제1 컨볼루션 연산 및 상기 제2 컨볼루션 연산은1-D 컨볼루션 연산을 포함하는, 뉴럴 네트워크 연산 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "뉴럴 네트워크 연산에 기반한 키워드 식별 방법에 있어서, 오디오 스트림을 수신하는 단계;상기 오디오 스트림에 기초한 복수의 채널을 포함하는 입력 벡터를 나눈 제1 청크들에 대해 제1 컨볼루션 연산을 수행하는 단계; 상기 제1 컨볼루션 연산의 결과를 나눈 제2 청크들에 대해 제2 컨볼루션 연산을 수행하는 단계; 및 상기 제2 컨볼루션 연산의 결과에 기초하여 상기 오디오 스트림에 포함된 키워드(keyword)를 식별하는 단계를 포함하는, 키워드 식별 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서, 상기 제1 컨볼루션 연산을 수행하는 단계는상기 입력 벡터의 각 채널의 사이즈가 복수의 제1 인- 메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아지도록 상기 입력 벡터를 상기 제1 청크들로 나누는 단계; 및 상기 제1 청크들을 상기 복수의 제1 인- 메모리 컴퓨팅 매크로에 할당하여 상기 제1 컨볼루션 연산을 수행하는단계를 포함하는, 키워드 식별 방법."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제15항에 있어서, 상기 제2 컨볼루션 연산을 수행하는 단계는상기 제1 컨볼루션 연산의 결과를 연결하는 단계;상기 연결된 제1 컨볼루션 연산의 결과의 각 채널의 사이즈가 복수의 제2 인- 메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아지도록 상기 연결된 제1 컨볼루션 연산의 결과를 상기 제2 청크들로 나누는 단계; 및 상기 제2 청크들을 상기 복수의 제2 인- 메모리 컴퓨팅 매크로에 할당하여 상기 제2 컨볼루션 연산을 수행하는단계를 포함하는, 키워드 식별 방법.공개특허 10-2025-0007288-5-청구항 18 하드웨어와 결합되어 제1항 내지 제17항 중 어느 한 항의 방법을 실행시키기 위하여 컴퓨터로 판독 가능한 저장매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "복수의 채널을 포함하는 입력 벡터를 수신하는 수신기; 상기 입력 벡터를 제1 청크들로 나누고, 상기 제1 청크들을 복수의 제1 인- 메모리 컴퓨팅 매크로에 할당하여제1 컨볼루션 연산을 수행하고, 상기 제1 컨볼루션 연산의 결과를 연결하고, 상기 연결된 제1 컨볼루션 연산의결과를 제2 청크들로 나누고, 상기 제2 청크들을 복수의 제2 인- 메모리 컴퓨팅 매크로에 할당하여 제2 컨볼루션 연산을 수행하는 프로세서; 및 상기 복수의 제1 인- 메모리 컴퓨팅 매크로 및 상기 복수의 제2 -인 메모리 컴퓨팅 매크로 중 적어도 하나를 포함하는 메모리 장치를 포함하는, 뉴럴 네트워크 연산 장치."}
{"patent_id": "10-2023-0087231", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19항에 있어서, 상기 프로세서는 상기 입력 벡터의 채널 방향의 사이즈가 상기 복수의 제1 인- 메모리 컴퓨팅 매크로의 행(row)의 개수 보다 작거나 같아지도록 상기 입력 벡터를 상기 제1 청크들로 나누는, 뉴럴 네트워크 연산 장치."}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "뉴럴 네트워크 연산 방법, 장치 및 뉴럴 네트워크 연산을 이용한 키워드 식별 방법이 개시된다. 일 실시예에 따 른 뉴럴 네트워크 연산 방법 및 장치는 복수의 채널을 포함하는 입력 벡터를 수신하고, 입력 벡터를 나눈 제1 청 크들을 복수의 제1 인-메모리 컴퓨팅 매크로에 할당하여 제1 컨볼루션 연산을 수행하고, 제1 컨볼루션 연산의 결 과를 나눈 제2 청크들을 복수의 제2 인-메모리 컴퓨팅 매크로에 할당하여 제2 컨볼루션 연산을 수행한다."}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래의 실시예들은 뉴럴 네트워크 연산 방법, 장치 및 뉴럴 네트워크 연산을 이용한 키워드 식별 방법에 관한 것이다."}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "심층 신경망(Deep Neural Network; DNN)의 활용은 AI(Artificial Intelligence)를 기반으로 한 산업 혁명으로 이어지고 있다. 심층 신경망 중 하나인 컨볼루션 신경망(Convolution Neural Network; CNN)은 예를 들어, 인 간의 시신경을 모방한 영상 및 신호 처리, 객체 인식, 컴퓨터 비전 등과 같은 다양한 응용 분야들에서 폭넓게 사용되고 있다. 컨볼루션 신경망은 매우 많은 수의 행렬을 이용하여 곱셈과 덧셈을 반복하는 MAC 연산 (Multiple and Accumulation)을 수행하도록 구성될 수 있다. 예를 들어, 범용의 프로세서들을 사용하여 컨볼루션 신경망의 애플리케이션을 실행하는 경우, 두 벡터들을 내적 하고 그 값들을 누적 합산하는 곱셈 누적(Multiplication and Accumulation; MAC) 연산과 같은 복잡하지 않으 나 연산량은 많은 연산이 인-메모리 컴퓨팅(In-Memory Computing; IMC)을 통해 수행될 수 있다."}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따르면, 뉴럴 네트워크 연산 방법은 복수의 채널을 포함하는 입력 벡터를 수신하는 단계; 상기 입 력 벡터를 나눈 제1 청크들(chunks)을 복수의 제1 인-메모리 컴퓨팅 매크로에 할당하여 제1 컨볼루션 연산을 수 행하는 단계; 및 상기 제1 컨볼루션 연산의 결과를 나눈 제2 청크들을 복수의 제2 인-메모리 컴퓨팅 매크로에 할당하여 제2 컨볼루션 연산을 수행하는 단계를 포함한다. 상기 제1 컨볼루션 연산을 수행하는 단계는 상기 입력 벡터를 상기 복수의 제1 인-메모리 컴퓨팅 매크로의 구조 에 매칭되도록 상기 입력 벡터의 채널 방향으로 상기 제1 청크들로 나누는 단계를 포함할 수 있다. 상기 제1 청크들로 나누는 단계는 상기 입력 벡터의 각 채널의 사이즈가 상기 복수의 제1 인-메모리 컴퓨팅 매 크로의 행(row)의 개수 보다 작거나 같아지도록 상기 입력 벡터를 상기 제1 청크들로 나누는 단계를 포함할 수 있다. 상기 제1 컨볼루션 연산을 수행하는 단계는 상기 제1 청크들에 대해 시간 방향으로 상기 제1 컨볼루션 연산을 수행하는 단계를 포함할 수 있다. 상기 제1 컨볼루션 연산을 수행하는 단계는 상기 제1 청크들이 할당되는 상기 복수의 제1 인-메모리 컴퓨팅 매 크로 별로 서로 다른 활성화 함수를 적용하여 상기 제1 컨볼루션 연산을 수행하는 단계를 포함할 수 있다. 상기 제1 컨볼루션 연산을 수행하는 단계는 상기 제1 컨볼루션 연산의 결과에 기초하여 배치 정규화(batch normalization) 연산을 수행하는 단계; 및 상기 배치 정규화 연산의 결과에 기초하여 제1 활성화 연산을 수행하 는 단계를 더 포함할 수 있다. 상기 제1 활성화 연산을 수행하는 단계는 상기 배치 정규화 연산의 결과에 기초하여 ReLU(Rectified Linear Unit) 8 함수에 기반한 H-swish 8 활성화 연산을 수행하는 단계를 포함할 수 있다. 상기 제2 컨볼루션 연산을 수행하는 단계는 상기 제1 컨볼루션 연산의 결과를 연결하는 단계; 상기 연결된 제1 컨볼루션 연산의 결과를 상기 제2 청크들로 나누는 단계; 및 상기 제2 청크들을 상기 복수의 제2 인-메모리 컴 퓨팅 매크로에 할당하여 상기 제2 컨볼루션 연산을 수행하는 단계를 포함할 수 있다. 상기 제2 청크들로 나누는 단계는 상기 연결된 제1 컨볼루션 연산의 결과의 각 채널의 사이즈가 상기 복수의 제 2 인-메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아지도록 상기 연결된 제1 컨볼루션 연산의 결과를 상기 제2 청크들로 나누는 단계를 포함할 수 있다. 상기 뉴럴 네트워크 연산 방법은 상기 제2 컨볼루션 연산의 결과의 사이즈를 상기 입력 벡터의 사이즈와 일치시 키는 단계; 및 상기 입력 벡터의 사이즈에 일치시킨 상기 제2 컨볼루션 연산의 결과와 상기 제1 컨볼루션 연산 의 입력값 간의 합 연산을 수행하는 단계를 더 포함할 수 있다. 상기 뉴럴 네트워크 연산 방법은 상기 합 연산의 결과에 기초하여 풀링(pooling) 연산을 수행하는 단계; 및 상 기 풀링 연산의 결과에 기초하여 완전 연결(fully connected) 연산을 수행하는 단계를 더 포함할 수 있다. 상기 복수의 제1 인-메모리 컴퓨팅 매크로 및 상기 복수의 제2 인-메모리 컴퓨팅 매크로 중 적어도 하나는 프레 임 별 증분 연산(Frame-wise incremental computation)을 수행할 수 있다. 상기 입력 벡터는 순차적으로 입력되는 오디오 스트림(audio stream)의 적어도 일부에 대응될 수 있다. 상기 제1 컨볼루션 연산 및 상기 제2 컨볼루션 연산은 1-D 컨볼루션 연산을 포함할 수 있다. 일 실시예에 따르면, 뉴럴 네트워크 연산에 기반한 키워드 식별 방법은 오디오 스트림을 수신하는 단계; 상기 오디오 스트림에 기초한 복수의 채널을 포함하는 입력 벡터를 나눈 제1 청크들에 대해 제1 컨볼루션 연산을 수 행하는 단계; 상기 제1 컨볼루션 연산의 결과를 나눈 제2 청크들에 대해 제2 컨볼루션 연산을 수행하는 단계; 및 상기 제2 컨볼루션 연산의 결과에 기초하여 상기 오디오 스트림에 포함된 키워드(keyword)를 식별하는 단계 를 포함한다. 상기 제1 컨볼루션 연산을 수행하는 단계는 상기 입력 벡터의 각 채널의 사이즈가 복수의 제1 인-메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아지도록 상기 입력 벡터를 상기 제1 청크들로 나누는 단계; 및 상기 제1 청 크들을 상기 복수의 제1 인-메모리 컴퓨팅 매크로에 할당하여 상기 제1 컨볼루션 연산을 수행하는 단계를 포함 할 수 있다. 상기 제2 컨볼루션 연산을 수행하는 단계는 상기 제1 컨볼루션 연산의 결과를 연결하는 단계; 상기 연결된 제1 컨볼루션 연산의 결과의 각 채널의 사이즈가 수의 제2 인-메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아 지도록 상기 연결된 제1 컨볼루션 연산의 결과를 상기 제2 청크들로 나누는 단계; 및 상기 제2 청크들을 상기 복수의 제2 인-메모리 컴퓨팅 매크로에 할당하여 상기 제2 컨볼루션 연산을 수행하는 단계를 포함할 수 있다. 일 실시예에 따르면, 뉴럴 네트워크 연산 장치는 복수의 채널을 포함하는 입력 벡터를 수신하는 수신기; 상기 입력 벡터를 제1 청크들로 나누고, 상기 제1 청크들을 복수의 제1 인-메모리 컴퓨팅 매크로에 할당하여 제1 컨 볼루션 연산을 수행하고, 상기 제1 컨볼루션 연산의 결과를 연결하고, 상기 연결된 제1 컨볼루션 연산의 결과를 제2 청크들로 나누고, 상기 제2 청크들을 복수의 제2 인-메모리 컴퓨팅 매크로에 할당하여 제2 컨볼루션 연산을 수행하는 프로세서; 및 상기 복수의 제1 인-메모리 컴퓨팅 매크로 및 상기 복수의 제2 -인 메모리 컴퓨팅 매크로 중 적어도 하나를 포함하는 메모리 장치를 포함한다. 상기 프로세서는 상기 입력 벡터의 채널 방향의 사이즈가 상기 복수의 제1 인-메모리 컴퓨팅 매크로의 행(row) 의 개수 보다 작거나 같아지도록 상기 입력 벡터를 상기 제1 청크들로 나눌 수 있다."}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "실시예들에 대한 특정한 구조적 또는 기능적 설명들은 단지 예시를 위한 목적으로 개시된 것으로서, 다양한 형 태로 변경되어 구현될 수 있다. 따라서, 실제 구현되는 형태는 개시된 특정 실시예로만 한정되는 것이 아니며, 본 명세서의 범위는 실시예들로 설명한 기술적 사상에 포함되는 변경, 균등물, 또는 대체물을 포함한다. 제1 또는 제2 등의 용어를 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 해석되어야 한다. 예를 들어, 제1 구성요소는 제2 구성요소로 명 명될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이해되어야 할 것이다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 설명된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함 으로 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들 을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되 는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로 해석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 도 1은 일 실시예에 따른 뉴럴 네트워크의 곱셈 누적(MAC) 연산을 수행하는 인-메모리 컴퓨팅 시스템의 구현 예 시를 도시한다. 인-메모리 컴퓨팅(IMC)은 데이터가 저장된 메모리 내부에서 직접 연산을 수행하는 컴퓨터 아키텍쳐로서, 프로세 서와 메모리 장치 간의 데이터 이동이 감소되고, 전력 효율이 증가될 수 있다. 일 실시예에 따른 인 -메모리 컴퓨팅 시스템의 프로세서가 연산되어야 하는 데이터를 메모리 장치에 입력하면, 메모 리 장치가 자체적으로 연산을 수행할 수 있다. 프로세서는 메모리 장치로부터 연산의 결과를 읽어 옴으로써 연산 과정 동안의 데이터의 이동을 최소화할 수 있다. 예를 들어, 인-메모리 컴퓨팅 시스템은 다양한 연산 중 인공지능(artificial intelligence; AI) 알고리즘 에서 빈번하게 사용되는 곱셈 누적(multiplication and accumulation; MAC) 연산을 수행할 수 있다. 뉴럴 네트워크는 시냅스의 결합으로 네트워크를 형성한 인공 뉴런(노드)이 학습을 통해 시냅스의 결합 세 기를 변화시켜, 문제 해결 능력을 가지는 모델 전반을 의미할 수 있다. 뉴럴 네트워크는 하나 이상의 뉴 런 또는 노드로 구성된 하나 이상의 레이어(layer)를 포함할 수 있다. 뉴럴 네트워크의 뉴런은 가중치 (weight) 또는 바이어스(bias)의 조합을 포함할 수 있다. 뉴럴 네트워크는 뉴런의 가중치를 학습을 통해 변화시킴으로써 임의의 입력으로부터 예측하고자 하는 결과를 추론할 수 있다. 도 1에 도시된 바와 같이, 뉴럴 네트워크에서 레이어들 간의 연산은 입력 노드들의 입력 값들의 각각에 가중치를 곱한 결과들을 합산하는 곱셈 누적(MAC) 연산을 포함할 수 있다. 뉴럴 네트워크는 심층 뉴럴 네트워크(Deep Neural Network)를 포함할 수 있다. 뉴럴 네트워크는 예 를 들어, CNN(Convolutional Neural Network), RNN(Recurrent Neural Network), 퍼셉트론(perceptron), 다층 퍼셉트론(multilayer perceptron), FF(Feed Forward), RBF(Radial Basis Network), DFF(Deep Feed Forward), LSTM(Long Short Term Memory), GRU(Gated Recurrent Unit), AE(Auto Encoder), VAE(Variational Auto Encoder), DAE(Denoising Auto Encoder), SAE(Sparse Auto Encoder), MC(Markov Chain), HN(Hopfield Network), BM(Boltzmann Machine), RBM(Restricted Boltzmann Machine), DBN(Depp Belief Network), DCN(Deep Convolutional Network), DN(Deconvolutional Network), DCIGN(Deep Convolutional Inverse Graphics Network), GAN(Generative Adversarial Network), LSM(Liquid State Machine), ELM(Extreme Learning Machine), ESN(Echo State Network), DRN(Deep Residual Network), DNC(Differentiable Neural Computer), NTM(Neural Turning Machine), CN(Capsule Network), KN(Kohonen Network) 및 AN(Attention Network) 중 적어 도 하나를 포함할 수 있다. 곱셈 누적(MAC) 연산은 예시적으로 하기 수학식 1과 같이 표현될 수 있다. 수학식 1"}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "전술한 수학식 1에서 Ot는 t번째 노드로의 출력, Im는 m번째 입력, Wt,m는 t번째 노드에 입력되는 m번째 입력에 대해 적용되는 가중치를 나타낼 수 있다. 여기서, Ot은 노드의 출력 또는 노드 값으로서 입력 Im와 가중치 Wt,m 의 가중합(weighted sum)으로서 산출될 수 있다. 여기서, m은 0 이상 M-1 이하의 정수, t는 0이상 T-1 이하의 정수, M, T는 정수일 수 있다. M은 연산의 대상이 되는 현재 레이어의 한 노드에 연결된 이전 레이어의 노드들 의 개수일 수 있고, T는 현재 레이어의 노드들의 개수일 수 있다. 일 실시예에 따른 인-메모리 컴퓨팅 시스템의 메모리 장치는 전술한 곱셈 누적(MAC) 연산을 수행할 수 있다. 메모리 장치는 전술한 곱셈 누적(MAC) 연산을 수행하는 인-메모리 컴퓨팅 매크로들을 포함할 수 있다. 메모리 장치는 '메모리 어레이', 또는 '인-메모리 컴퓨팅(IMC) 장치'라고 불릴 수도 있다. 메모리 장치가 곱셈 누적(MAC) 연산 이외에도 메모리의 저장 및 곱셈 연산을 포함하는 알고리즘을 구동하 기 위해 사용될 수도 있다. 메모리 장치는 데이터의 이동 없이 메모리 안에서 직접 연산을 수행함으로써 데이터 이동을 줄이는 한편, 면적 효율성 또한 향상시킬 수 있다. 도 2는 일 실시예에 따른 뉴럴 네트워크 연산 장치의 개략적인 블록도를 나타낸다. 도 2를 참조하면, 일 실시예 에 따른 뉴럴 네트워크 연산 장치는 입력 데이터에 기초하여 뉴럴 네트워크 연산을 수행할 수 있다. 입력 데이터는 복수의 채널을 포함하는 입력 벡터 또는 입력 벡터의 시퀀스를 포함할 수 있다. 입력 벡터 는 예를 들어, 순차적으로 입력되는 음성 신호 또는 오디오 스트림(audio stream)의 적어도 일부에 대응될 수 있으나, 반드시 이에 한정되지는 않는다. 입력 데이터는 실시간으로 입력될 수 있다. 입력 데이터는 매 시간마다 전체 입력 데이터가 아닌 입 력 데이터의 일부만이 변경될 수 있다. 뉴럴 네트워크 연산 장치는 입력 데이터를 처리하여 뉴럴 네트워크 연산 결과를 출력할 수 있다. 뉴럴 네트워크 연산 장치는 수신기 및 프로세서를 포함한다. 뉴럴 네트워크 연산 장치는 메모리(예: 도 1의 메모리 장치)를 더 포함할 수 있다. 수신기는 수신 인터페이스를 포함할 수 있다. 수신기는 입력 데이터를 수신할 수 있다. 수신기(21 0)는 예를 들어, 복수의 채널을 포함하는 입력 벡터를 수신할 수 있다. 이때, 입력 벡터는 입력 벡터의 시퀀스 (sequence) 중 일정 시점에 대응할 수 있다. 수신기는 수신한 입력 데이터를 프로세서로 출력할 수 있다. 프로세서는 메모리에 저장된 데이터를 처리할 수 있다. 프로세서는 메모리에 저장된 컴퓨 터로 읽을 수 있는 코드(예를 들어, 소프트웨어) 및 프로세서에 의해 유발된 인스트럭션(instruction)들을 실행할 수 있다. 프로세서는 목적하는 동작들(desired operations)을 실행시키기 위한 물리적인 구조를 갖는 회로를 가지는 하드웨어로 구현된 데이터 처리 장치일 수 있다. 예를 들어, 목적하는 동작들은 프로그램에 포함된 코드(code) 또는 인스트럭션들(instructions)을 포함할 수 있다. 예를 들어, 하드웨어로 구현된 데이터 처리 장치는 마이크로프로세서(microprocessor), 중앙 처리 장치(central processing unit), 프로세서 코어(processor core), 멀티-코어 프로세서(multi-core processor), 멀티프로세서 (multiprocessor), NPU(Neural Processing Unit), ASIC(Application-Specific Integrated Circuit), FPGA(Field Programmable Gate Array)를 포함할 수 있다. 프로세서는 뉴럴 네트워크(예: 도 1의 뉴럴 프로세서)를 학습시킬 수 있다. 프로세서는 입력 데이터에 기초하여 뉴럴 네트워크를 학습시키고, 학습된 뉴럴 네트워크에 기초하여 뉴럴 네트워크 연산을 수행할 수 있다. 프로세서는 입력 데이터(예: 입력 벡터)를 청크들로 나누어 인-메모리 컴퓨팅 매크로들에 할당함으로 써 컨볼루션 연산을 수행할 수 있다. 본 명세서에서 '청크(들)(chunk(s))'은 입력 데이터를 인-메모리 컴 퓨팅 매크로의 행의 개수에 맞게 작은 사이즈로 나눈 일부 또는 부분에 해당할 수 있다. 또한, 본 명세서에서 입력 데이터 또는 연산 결과를 청크들(예: 제1 청크들 및 제2 청크들)로 '나눈다'는 것은 입력 데이터 또는 연 산 결과를 청크들로 쪼갠다(split) 또는 분리하다(separate)는 의미로 이해될 수 있다. 나누어진 청크들을 하 나로 연결(concatenate)하는 경우, 입력 벡터와 같은 사이즈의 하나의 벡터가 될 수 있다. 프로세서는 입력 벡터를 제1 청크들로 나누고, 제1 청크들을 메모리에 포함된 복수의 제1 인-메모리 컴퓨팅 매크로에 할당하여 제1 컨볼루션 연산을 수행한다. 프로세서는 입력 벡터를 복수의 제1 인-메모리 컴퓨팅 매크로의 구조에 매칭되도록 입력 벡터의 채널 방향으로 제1 청크들로 나눌 수 있다. 프로세서는 입력 벡터의 각 채널의 사이즈가 복수의 제1 인-메모리 컴퓨팅 매크로의 행(row)의 개수 보다 작거나 같아지도 록 입력 벡터를 제1 청크들로 나눌 수 있다. 프로세서는 제1 청크들에 대해 시간 방향으로 제1 컨볼루션 연산을 수행할 수 있다. 프로세서는 제1 청크들이 할당되는 복수의 제1 인-메모리 컴퓨팅 매크로 별로 서 로 다른 활성화 함수를 적용하여 제1 컨볼루션 연산을 수행할 수 있다. 프로세서는 제1 컨볼루션 연산의 결과에 기초하여 배치 정규화(batch normalization) 연산을 수행할 수 있 다. 프로세서는 배치 정규화 연산의 결과에 기초하여 제1 활성화 연산을 수행할 수 있다. 프로세서(23 0)는 예를 들어, 배치 정규화 연산의 결과에 기초하여 ReLU(Rectified Linear Unit) 8 함수에 기반한 H-swish8 활성화 연산을 수행할 수 있다. 프로세서는 제1 컨볼루션 연산의 결과를 연결하고, 연결된 제1 컨볼루션 연산의 결과를 제2 청크들로 나눈 다. 프로세서는 연결된 제1 컨볼루션 연산의 결과의 각 채널의 사이즈가 복수의 제2 인-메모리 컴퓨팅 매 크로의 행의 개수 보다 작거나 같아지도록 연결된 제1 컨볼루션 연산의 결과를 제2 청크들로 나눌 수 있다. 프 로세서는 제2 청크들을 메모리에 포함된 복수의 제2 인-메모리 컴퓨팅 매크로에 할당하여 제2 컨볼루 션 연산을 수행한다. 프로세서는 제2 컨볼루션 연산 결과를 뉴럴 네트워크 연산 결과로서 출력할 수 있다. 제1 컨볼루션 연산 및 제2 컨볼루션 연산은 1-D 컨볼루션 연산을 포함할 수 있다. 일 실시예에서는 1-D 컨볼루 션 연산을 수행함으로써 같은 수의 파라미터(parameter) 대비 입력 활성화(input activation)의 사이즈를 낮추 는 한편, 연산량을 감소시킬 수 있다. 실시예에 따라서, 프로세서는 제2 컨볼루션 연산의 결과의 사이즈를 입력 벡터의 사이즈와 일치시킬 수 있 다. 프로세서는 입력 벡터의 사이즈에 일치시킨 제2 컨볼루션 연산의 결과와 제1 컨볼루션 연산의 입력값 간의 합 연산을 수행할 수 있다. 프로세서는 합 연산의 결과에 기초하여 풀링(pooling) 연산을 수행할 수 있다. 풀링 연산은 입력 데이터 중에서 커널(kernel) 사이즈에 대응하는 영역 중에서 일부 성분만을 추출하는 연산을 의미할 수 있다. 풀링 연 산은 예를 들어, 맥스 풀(max pool), 애버리지 풀(average pool) 및 썸 풀(sum pool) 연산을 포함할 수 있다. 프로세서는 풀링 연산의 결과에 기초하여 완전 연결(fully connected) 연산을 수행할 수 있다. 완전 연결 연산은 이전 레이어의 모든 노드가 다음 레이어의 모든 노드에 연결되는 완전 연결 레이어에 의해 수행되는 연 산을 의미할 수 있다. 프로세서는 완전 연결 연산의 수행 결과를 뉴럴 네트워크 연산 결과로서 출력 할 수 있다. 메모리는 복수의 제1 인-메모리 컴퓨팅 매크로 및 복수의 제2 -인 메모리 컴퓨팅 매크로 중 적어도 하나를 포함할 수 있다. 또한, 메모리는 뉴럴 네트워크 모델 또는 뉴럴 네트워크 모델의 파라미터를 저장할 수 있다. 메모리는 프로세서에 의해 실행 가능한 인스트럭션들(또는 프로그램)을 저장할 수 있다. 예 를 들어, 인스트럭션들은 프로세서의 동작 및/또는 프로세서의 각 구성의 동작을 실행하기 위한 인스 트럭션들을 포함할 수 있다. 메모리는 휘발성 메모리 장치 또는 불휘발성 메모리 장치로 구현될 수 있다. 휘발성 메모리 장치는 DRAM(dynamic random access memory), SRAM(static random access memory), T-RAM(thyristor RAM), Z- RAM(zero capacitor RAM), 또는 TTRAM(Twin Transistor RAM)으로 구현될 수 있다. 불휘발성 메모리 장치는 EEPROM(Electrically Erasable Programmable Read-Only Memory), 플래시(flash) 메모리, MRAM(Magnetic RAM), 스핀전달토크 MRAM(Spin-Transfer Torque(STT)-MRAM), Conductive Bridging RAM(CBRAM), FeRAM(Ferroelectric RAM), PRAM(Phase change RAM), 저항 메모리(Resistive RAM(RRAM)), 나노 튜브 RRAM(Nanotube RRAM), 폴리머 RAM(Polymer RAM(PoRAM)), 나노 부유 게이트 메모리(Nano Floating Gate Memory(NFGM)), 홀로그래픽 메모리 (holographic memory), 분자 전자 메모리 소자(Molecular Electronic Memory Device), 또는 절연 저항 변화 메 모리(Insulator Resistance Change Memory)로 구현될 수 있다. 도 3은 일 실시예에 따른 키워드 식별 장치의 개략적인 블록도를 나타낸다. 도 3을 참조하면, 일 실시예에 따른 키워드 식별 장치는 오디오 스트림로부터 키워드를 식별 및/또는 검출할 수 있다. 키워드 식별 장치 는 뉴럴 네트워크(예: 도 1의 뉴럴 네트워크)를 이용하여 오디오 스트림을 처리함으로써 키워드 를 식별 및/또는 검출할 수 있다. 키워드 식별 장치는 마더보드(motherboard)와 같은 인쇄 회로 기판(printed circuit board(PCB)), 집적 회로(intergrated circuit(IC)), 또는 SoC(system on chip)로 구현될 수 있다. 예를 들어, 키워드 식별 장치 는 애플리케이션 프로세서(application processor)로 구현될 수 있다. 또한, 키워드 식별 장치는 PC(personal computer), 데이터 서버, 또는 휴대용 장치 내에 구현될 수 있다. 휴대용 장치는 랩탑(laptop) 컴퓨터, 이동 전화기, 스마트 폰(smart phone), 태블릿(tablet) PC, 모바일 인터넷 디바이스(mobile internet device(MID)), PDA(personal digital assistant), EDA(enterprise digital assistant), 디지털 스틸 카메라 (digital still camera), 디지털 비디오 카메라(digital video camera), PMP(portable multimedia player), PND(personal navigation device 또는 portable navigation device), 휴대용 게임 콘솔(handheld gameconsole), e-북(e-book), 또는 스마트 디바이스(smart device)로 구현될 수 있다. 스마트 디바이스는 스마트 와치(smart watch), 스마트 밴드(smart band), 스마트 글래스(smart glass), 및/또는 스마트 링(smart ring)으 로 구현될 수 있다. 키워드 식별 장치는 도 2의 뉴럴 네트워크 연산 장치를 이용하여 키워드 식별을 수행할 수 있다. 또 는, 키워드 식별 장치는 별도의 하드웨어를 이용하여 키워드 검출을 수행할 수 있다. 키워드 식별 장치는 수신기 및 프로세서를 포함한다. 키워드 식별 장치는 메모리를 더 포함할 수 있다. 수신기는 오디오 스트림을 수신할 수 있다. 오디오 스트림은 자연어(natural language)를 포함 하는 사람의 음성 뿐만 아니라 기계음, 전자음, 자연의 소리, 악기 소리 등과 같은 다양한 소리들을 포함할 수 있다. 수신기는 수신 인터페이스를 포함할 수 있다. 수신기는 수신한 오디오 스트림을 프로 세서로 출력할 수 있다. 프로세서는 오디오 스트림으로부터 특징을 추출함으로써 입력 벡터의 시퀀스를 생성할 수 있다. 입 력 벡터의 시퀀스는 복수의 채널을 포함할 수 있다. 프로세서는 오디오 스트림에 기초한 복수의 채 널을 포함하는 입력 벡터의 시퀀스 중 일부의 입력 벡터를 제1 청크들로 나누고, 제1 청크들에 대해 제1 컨볼루 션 연산을 수행할 수 있다. 프로세서는 제1 컨볼루션 연산의 결과를 연결한 후 다시 나눈 제2 청크들에 대해 제2 컨볼루션 연산을 수 행할 수 있다. 프로세서는 제2 컨볼루션 연산의 결과에 기초하여 오디오 스트림에 포함된 키워드 (keyword)를 식별 및/또는 검출할 수 있다. 프로세서는 식별 및/는 검출된 키워드를 출력할 수 있다. 프로세서는 도 2에 도시된 프로세서와 동일하게 제1 컨볼루션 및 제2 컨볼루션을 수행할 수 있다. 그 밖의 프로세서의 동작은 도 2의 프로세서의 동작과 동일하므로 도 2의 프로세서에 대한 설명 을 참고하기로 한다. 마찬가지로, 메모리는 도 2의 메모리와 동일하게 동작하므로 도 2의 메모리 에 대한 설명을 참고하기로 한다. 도 4a는 도 2에 도시된 뉴럴 네트워크 연산 장치가 사용하는 뉴럴 네트워크의 구조 일 예시를 도시한 도면이다. 도 4a를 참조하면, 일 실시예에 따라 그룹핑된(Grouped) 인-메모리 컴퓨팅 매크로들에 의해 1-D 컨볼루션 연산 을 수행하는 뉴럴 네트워크의 구조가 도시된다. 입력 데이터는 뉴럴 네트워크로 실시간으로 입력될 수 있다. 입력 데이터는 예를 들어, 일정 시점에 입력 된 음성의 주파수 특성에 대응하는 입력 벡터일 수 있다. 입력 벡터는 예를 들어, MFCC(mel- frequency cepstral coefficient)일 수 있으나, 반드시 이에 한정되지는 않는다. MFCC는 음성 인식과 관련하 여 불필요한 정보는 버리고, 중요한 특질만을 남긴 특징(feature)에 해당할 수 있다. 입력 벡터에서 x축 은 시간(t)을 나타내고, y축은 주파수(f)성분을 나타낼 수 있다. 도 4a에서 f x t 형태의 2-D(dimension)의 입 력 데이터가 입력되지만, 실시간으로는 주파수 방향의 1-D의 입력 벡터가 뉴럴 네트워크로 인가될 수 있다. 뉴럴 네트워크는 2차원의 입력 데이터에 대해 학습되지만, 뉴럴 네트워크 연산 장치는 입력 데이터 중 일정 시점에 입력된 사운드(예: 음성)의 주파수 특성에 대응하는 1-D의 입력 벡터를 실시간으로 처리할 수 있다. 입력 데이터는 매 시간마다 전체 입력 데이터가 아닌 입력 데이터의 일부가 변경될 수 있다. 뉴럴 네트워크는 매시간 하드웨어가 동작하는 연산량과 저장 공간을 최소화 하기 위해 적은 수준의 필터 (filter)를 사용하여 시간(time) 방향의 1-D 컨볼루션 연산을 수행하도록 구성될 수 있다. 뉴럴 네트워크 연산 장치는 뉴럴 네트워크의 각 레이어에서 특징(feature)을 담당하는 입력 벡터의 채널(channel) 방향의 사이즈를 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1, K1)의 행(row)의 개수(예: n개)에 맞 게 구성한 모듈을 기본 단위로 설정할 수 있다. 뉴럴 네트워크 연산 장치는 입력 벡터를, 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1)의 구조에 매칭되도 록 입력 벡터의 채널 방향으로 제1 청크들로 나눌 수 있다. 뉴럴 네트워크 연산 장치는 입력 벡터 의 각 채널의 사이즈가 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1)의 행의 개수보다 작거나 같아지도록 입력 벡터를 청크들('제1 청크들')로 나눌 수 있다. 다시 말해, 뉴럴 네트워크 연산 장치는 입력 벡터를 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1)의 행(row)의 개수(n)의 배수에 해당하는 k1개의 제1 청 크들로 나눌 수 있다. 이때, 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1) 각각의 입력 채널의 사이즈는 n 이고, 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1)의 개수는 k1 개일 수 있다. 뉴럴 네트워크 연산 장치는 입력 벡터를 k1 개의 제1 청크들로 나눔으로써 k1 개의 인-메모리 컴퓨팅 매크로의 그룹(group)을 통 해서 입력 벡터에 대한 제1 컨볼루션 연산을 수행할 수 있다. 여기서, \"입력 벡터를 청크들('제1 청 크들')로 나눈다\"는 표현의 회로적인 의미는 입력 벡터의 데이터를 메모리 어드레스에 맵핑(mappin g)하는 과정으로 이해될 수 있다. 뉴럴 네트워크 연산 장치는 넓은 채널을 가진 입력 벡터를 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1)의 행의 개수(n)에 맞게 k1 개의 제1 청크들로 나눠 연산함으로써 작은 사이즈의 인-메모리 컴퓨팅 매크로들 을 통해 큰 사이즈의 특징 맵(feature map)을 연산할 수 있다. 뉴럴 네트워크 연산 장치는 입력 벡터를 k1 개의 제1 청크들로 나눠 연산함으로써 인-메모리 컴퓨팅 매크로들이 예를 들어, 도 7a의 도면 또는 도 7b의 도면와 같이 파이프라인(pipeline)되도록 하여 데이터 이동을 최소화할 수 있다. 뉴럴 네트워크 연산 장치는 복수 개의 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1)의 그룹(group)을 통해 k1 개의 제1 청크들 에 대한 연산(예: 컨볼루션 연산)을 수행함으로써 메모리 액세스(memory access) 횟수 뿐만 아니라, 뉴럴 네트워크의 파라미터의 수 및 연산량을 감소시킬 수 있다. 뉴럴 네트워크 연산 장치는 제1 청크들에 대해 시간 방향으로 컨볼루션 연산('제1 컨볼루션 연산')을 수행 할 수 있다. 이때, 뉴럴 네트워크 연산 장치는 제1 청크들이 할당되는 제1 인-메모리 컴퓨팅 매크로 (IMC1,1, IMC1,K1) 별로 서로 다른 활성화 함수를 적용하여 제1 컨볼루션 연산을 수행할 수 있다. 제1 컨볼루션 연산은 뎁스 와이즈 컨볼루션(depth-wise convolution) 연산이 아닌 1-D 컨볼루션 연산일 수 있다. 제1 컨볼루 션 연산은 예를 들어, 1 x k의 사이즈를 갖는 컨볼루션 레이어에 의해 수행될 수 있다. 제1 컨볼루션 연산을 통해 제1 청크들의 사이즈가 (k2/k1)*n가 될 수 있고, 이에 따라 제1 인-메모리 컴퓨 팅 매크로(IMC1,1, IMC1,K1)의 가로 사이즈 또한, (k2/k1)*n 가 될 수 있다. 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1)의 (k2/k1)*n 개의 컬럼에서 입력(예: 제1 청크들)이 병렬 처리될 수 있다. 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1)는 제1 청크들의 값에 대해 요소 별(element-wise)로 덧셈 및/또는 곱셈 연산을 수 행할 수 있게 한다. 뉴럴 네트워크 연산 장치는 제1 컨볼루션 연산의 결과에 기초하여 배치 정규화(batch normalization; BN) 연산 ('제1 배치 정규화 연산')을 수행할 수 있다. 뉴럴 네트워크가 트레이닝(training) 없이 추론(inferenc e)만을 수행하는 경우, 배치 정규화 연산의 수행은 생략될 수 있다. 뉴럴 네트워크의 각 컨볼루션 블록의 입력 채널의 수와 출력 채널의 수는 다를 수 있다. 또한, 더 많은 특징들을 표현 또는 생성하기 위해 제1 컨볼루션 연산의 결과에 해당하는 출력 채널의 개수는 각 컨볼루션 연산 의 필터의 개수와 같을 수 있다. 뉴럴 네트워크 연산 장치는 제1 배치 정규화 연산(BN)의 결과에 기초하여 제1 활성화 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장치는 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1) 별로 할당된 제1 청크들에 대해 서로 다른 활성화 함수를 적용할 수 있다. 뉴럴 네트워크 연산 장치는 예를 들어, 제1 배치 정규화 연산(BN)의 결과에 기초하여 ReLU(Rectified Linear Unit) 8에 기반한 H(Hard)-swish8 활성화 함수에 의해 제1 활성화 연산을 수행할 수도 있고, 또는 ReLU에 의해 제1 활성화 연산을 수행할 수도 있다. Hard swish는 Swish를 기반으로 하는 일종의 활성화 함수이지만 계산 비 용이 많이 드는 시그모이드(sigmoid)를 조각 별 선형 아날로그(piecewise linear analogue)로 대체한 것일 수 있다. H(Hard)-swish8 활성화 함수는 아래의 수학식 2와 같이 나타낼 수 있다. 수학식 2"}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "H-swish 활성화 함수가 6이라는 숫자를 사용한 반면, H-swish8 활성화 함수는 2의 세제곱인 8을 사용함으로써 2 진법으로 구현된 디지털 회로에서 나눗셈을 비트-쉬프팅(bit-shifting)과 같은 기법으로 대체할 수 있어 하드웨 어 구현을 용이하게 할 수 있다. 뉴럴 네트워크 연산 장치는 ReLU8(=max{0, min(x, 8)}) 함수를 사용함으로써 양자화(quantization)에 효율적인 H-swish 활성화 연산에 필요했던 복잡한 나눗셈을 비트-쉬프터(bit-shifter)와 같은 간단한 하드웨어를 통해 구 현할 수 있다. 전술한 제1 배치 정규화 연산(BN) 및 제1 활성화 연산은 선택적으로 수행될 수 있다. 뉴럴 네트워크 연산 장치는 제1 컨볼루션 연산의 결과를 하나로 연결(concatenate)할 수 있다. 뉴럴 네트워크 연산 장치는 하나로 연결된 제1 컨볼루션 연산의 결과를 다시 k2개의 제2 청크들로 나 눌 수 있다. 뉴럴 네트워크 연산 장치는 연결된 제1 컨볼루션 연산의 결과의 각 채널의 사이즈가 복수의 제2 인-메모리 컴퓨팅 매크로(IMC2,1, IMC2,K2)의 행의 개수 보다 작거나 같아지도록 제2 청크들로 나눌 수 있다. 뉴럴 네트워크 연산 장치는 k2개의 제2 청크들을 복수의 제2 인-메모리 컴퓨팅 매크로(IMC2,1, IMC2,K2)에 할 당하여 제2 컨볼루션 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장치는 제2 청크들에 대해 시간 방향으 로 제2 컨볼루션 연산을 수행할 수 있다. 제2 컨볼루션 연산은 1-D 컨볼루션 연산일 수 있다. 뉴럴 네트워크 연산 장치는 k2개의 제2 청크들이 할당되는 복수의 제2 인-메모리 컴퓨팅 매크로(IMC2,1, IMC2,K2) 별로 서로 다른 활성화 함수를 적용하여 제2 컨볼루션 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장 치는 제2 컨볼루션 연산의 결과에 기초하여 제2 배치 정규화 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장치는 제2 배치 정규화 연산의 결과에 기초하여 제2 활성화 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장치 는 제2 배치 정규화 연산의 결과에 기초하여 ReLU 8함수에 기반한 H-swish 8 활성화 연산을 수행할 수 있다. 실시예에 따라서, 뉴럴 네트워크 연산 장치는 도 4b와 같이 제2 컨볼루션 연산의 결과와 제1 컨볼루션 연 산의 입력값 간의 합 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장치는 제2 컨볼루션 연산의 결과의 사이즈를 입력 벡터의 사이즈와 일치시킬 수 있다. 뉴럴 네트워크 연산 장치는 제2 컨볼루션 연산의 결과의 사이즈를 입력 벡터(또는 제1 컨볼루 션 레이어의 입력값)의 사이즈와 일치시킨 후 잔차 연결(Residual connection)을 설정할 수 있다. '잔차 연결'은 데이터가 뉴럴 네트워크 구조의 후반부에 도달하도록 하는 또 다른 경로를 제공하기 위한 것으로서 뉴럴 네트워크의 하위 층에서 학습된 정보가 데이터 처리 과정에서 손실되는 그래디언트 문제를 방 지할 수 있다. 제2 컨볼루션 연산의 결과의 사이즈를 입력 벡터(또는 제1 컨볼루션 레이어의 입력 값)의 사이즈와 동일하게 일치시키는 과정은 예를 들어, 후술하는 인-메모리 컴퓨팅 매크로들의 파이프라인을 위해 수행될 수 있으나, 반드시 이에 한정되지는 않는다. 실시예에 따라서, 뉴럴 네트워크 연산 장치는 잔차 연결에, 제1 컨볼루션 레이어를 통과하기 전의 입력값 인 제1 컨볼루션 연산의 입력값을 삽입해 최종 합산을 위한 벡터의 사이즈를 조절할 수 있다. 뉴럴 네트워크 연산 장치는 입력 벡터의 사이즈에 일치시킨 제2 컨볼루션 연산의 결과와 제1 컨볼루션 연산의 입력 값 간의 합 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장치는 합 연산의 결과에 기초하여 풀링(pooling) 연산을 수행할 수 있다. 뉴럴 네트 워크 연산 장치는 풀링 연산의 결과에 기초하여 완전 연결(fully connected) 연산을 수행할 수 있다. 도 4a 및 도 4b에 도시된 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1) 및 제2 인-메모리 컴퓨팅 매크로(IMC2,1, IMC2,K2) 중 적어도 하나는 프레임 별 증분 연산(Frame-wise incremental computation)을 수행할 수 있다. 프레임 별 증분 연산은 뉴럴 네트워크의 각 레이어(layer)의 모든 입력 전체에 대한 연산(예: 컨볼루션 연산) 을 수행하는 것이 아니라, 실시간으로 들어오는 입력에 대해서 연산을 진행할 수 있다. 인-메모리 컴퓨팅 매크 로(예: 제1 인-메모리 컴퓨팅 매크로(IMC1,1, IMC1,K1) 및/또는 제2 인-메모리 컴퓨팅 매크로(IMC2,1, IMC2,K2))가 프레임 별 증분 연산을 수행하는 경우, 뉴럴 네트워크 연산 장치는 실시간으로 연산되는 부분만을 버퍼(buffe r)에 저장하면 되므로 중간 데이터(Intermediate data)의 저장에 사용되는 버퍼, 다시 말해 활성화 버퍼 (activation buffer)의 사이즈를 줄일 수 있다. 뉴럴 네트워크 연산 장치는 입력 벡터를 실시간으로 연산함으로써 활성화 함수의 저장에 사용되는 메모리 의 사이즈를 감소시킬 수 있다. 도 5는 일 실시예에 따른 뉴럴 네트워크의 구성 일 예시를 도시한 도면이다. 전술한 프로세서(230, 330)는 도 5에 도시된 구조의 뉴럴 네트워크를 이용하여 뉴럴 네트워크 연산을 수행할 수 있다. 도 5를 참조하면, 일 실시예에 따른 뉴럴 네트워크는 특징 추출 레이어, 컨볼루션 레이어(Conv 0), 컨볼루션 블록(530 내지 550), 풀링 레이어, 및 완전 연결 레이어를 포함할 수 있다. 뉴럴 네트워크는 컨볼루션 블록(530 내지 550)을 기본 구성 단위로 포함할 수 있다. 특징 추출 레이어는 입력 데이터(예: 음성 신호 또는 오디오 스트림)로부터 특징 추출을 수행할 수 있다. 음성 신호는 시간에 따라 변화하는 사이즈(magnitude)를 가질 수 있다. 특징 추출 레이어는 음성 신호 또 는 오디오 스트림에 기초하여 음성 특징을 추출할 수 있다. 특징 추출 레이어는 음성 신호 또는 오디오 스트림을 주파수에 기초하여 처리함으로써 음성 특징을 추출할 수 있다. 음성 특징은 시간에 따라 변화하는 주 파수 특징을 나타낼 수 있다. 프로세서(230, 330)는 특징 추출 레이어를 이용하여 입력 데이터의 주파수에 관련된 특징을 추출할 수 있 다. 특징 추출 레이어는 예를 들어, 필터-뱅크 에너지(filter-bank energy), 스펙트로그램(spectrogram) 또는 LPC(Linear Predictive Coding)을 이용하여 입력 데이터의 주파수에 관련된 특징을 추출할 수 있다. 예를 들어, 입력 데이터가 자연어로 구성된 음성(speech) 신호인 경우, 특징 추출 레이어는 음성 신호로부터 특 징을 추출할 수 있다. 특징은 벡터의 형태를 가질 수 있다. 프로세서(230, 330)는 예를 들어, 입력되는 음성 신호를 30ms 길이의 윈도우(window)를 이용하여 10ms 간격의 프레임(frame)으로 나눈 후, 각 프레임에서 40 차 원의 MFCC(Mel-Frequency Cepstral Coefficients)를 추출할 수 있다. 전술한 입력 벡터(예: 도 4a의 입력 벡 터)는 음성 신호로부터 추출된 MFCC 벡터의 형태를 가질 수 있다. 컨볼루션 레이어(Conv 0)는 앞서 추출한 특징(예: MFCC)에 기초한 컨볼루션 연산을 수행할 수 있다. 프 로세서(230, 330)는 컨볼루션 레이어를 통해 특징(예: MFCC)에 대하여 컨텍스트의 길이 방향으로 컨볼루션 연산을 수행할 수 있다. 프로세서(230, 330)는 컨볼루션 레이어의 출력을 컨볼루션 블록(530 내지 550)을 이용하여 처리할 수 있다. 컨볼루션 블록은 예를 들어, 제1 컨볼루션 레이어(Conv1-2-1)(5 x 1), 제2 컨볼루션 레이어 (Conv1-2-2)(5 x 1) 및 1 x 1 컨볼루션 레이어(Conv1-1)를 포함할 수 있으나, 반드시 이에 한정되 지는 않는다. 제1 컨볼루션 레이어는 입력 벡터를 나눈 제1 청크들(예: 도 4a 및 도 4b의 제1 청크들)에 대해 제1 컨볼루션 연산을 수행할 수 있다. 제2 컨볼루션 레이어는 제1 컨볼루션 연산의 결과를 연결(concatenat e)한 후 다시 나눈 제2 청크들(예: 도 4a 및 도 4b의 제2 청크들)에 대해 제2 컨볼루션 연산을 수행할 수 있다. 1 x 1 컨볼루션 레이어는 제2 컨볼루션 연산의 결과를 입력 벡터의 사이즈에 일치시킬 수 있다. 컨볼루션 블록의 구성에 대하여는 아래의 도 6을 참조하여 보다 구체적으로 설명한다. 컨볼루션 블록의 제1 컨볼루션 레이어는 1개의 인-메모리 컴퓨팅 매크로의 그룹으로 구성되고, 컨볼 루션 블록의 제2 컨볼루션 레이어는 2개의 인-메모리 컴퓨팅 매크로의 그룹으로 구성될 수 있다. 컨볼루션 블록의 제1 컨볼루션 레이어 및 제2 컨볼루션 레이어는 각각 2개의 인-메모리 컴퓨팅 매크로의 그룹으로 구성될 수 있다. 컨볼루션 블록의 제1 컨볼루션 레이어는 2개의 인-메모리 컴퓨팅 매크로의 그룹으로 구성되고, 제2 컨볼루션 레이어는 3개의 인-메모리 컴퓨팅 매크로의 그룹으로 구성될 수 있다. 컨볼루션 블록(530 내지550)의 각 레이어는 도 5에 도시된 것과 같이 다양한 개수의 인-메모리 컴퓨팅 매크로의 그룹으로 구성될 수 있 으나, 반드시 이에 한정되지는 않는다. 프로세서(230, 330)는 컨볼루션 블록을 풀링 레이어에 입력하여 풀링 연산을 수행할 수 있다. 프로 세서(230, 330)는 풀링 연산 결과를 완전 연결 레이어에 입력할 수 있다. 실시예에 따라서, 프로세서(230, 330)는 완전 연결 레이어의 출력에 대하여 소프트맥스 함수(미도시)를 적용할 수도 있다. 도 6은 도 5에 도시된 컨볼루션 블록의 구성 일 예시를 도시한 도면이다. 도 6을 참조하면, 일 실시예에 따른 컨볼루션 블록은 제1 컨볼루션 레이어(예: 도 5의 제1 컨볼루션 레이어), 제1 배치 정규화 레이 어, 제1 활성화 레이어, 제2 컨볼루션 레이어(예: 도 5의 제2 컨볼루션 레이어), 제2 배치 정규화 레이어, 제2 활성화 레이어 및 1Х1 컨볼루션 레이어(예: 도 5의 1x1 컨볼루션 레이어 )를 포함할 수 있다. 제1 컨볼루션 레이어는 입력 벡터를 나눈 제1 청크들에 대해 제1 컨볼루션 연산을 수행할 수 있다. 제1 배 치 정규화 레이어는 전체적인 뉴럴 네트워크(예: 도 4a의 뉴럴 네트워크)의 성능을 향상시키기 위하 여 제1 컨볼루션 레이어의 연산 결과에 대해 배치 정규화(BN) 연산을 수행할 수 있다. 프로세서(230, 330)는 제1 컨볼루션 레이어와 제1 활성화 레이어 사이에 배치되는 제1 배치 정규화 레이어를 통해 제1 배치 정규화 연산을 수행할 수 있다. 이 때, 제1 배치 정규화 연산은 다른 정규화 연산으로 대체될 수 있다. 제1 활성화 레이어는 제1 배치 정규화 레이어의 연산 결과에 기초하여 H-swish 8 활성화 연산을 수행 할 수 있다. 제2 컨볼루션 레이어는 제1 활성화 레이어의 출력을 연결(concatenate)한 후 다시 나눈 제2 청크들에 대해 제2 컨볼루션 연산을 수행할 수 있다. 제2 배치 정규화 레이어는 배치 정규화 연산을 통해 제2 컨볼루션 레이어에서의 제2 컨볼루션 연산의 결과를 정규화할 수 있다. 1 x 1 컨볼루션 레이어는 제2 컨볼루션 연산의 결과를 입력 벡터(또는 제1 컨볼루션 레이어의 입력) 의 사이즈에 일치시킬 수 있다. 이 때, 프로세서(230, 330)는 잔차(residual) 구조를 위하여 1×1 컨볼루션 레이어를 통과한 제1 컨볼루션 레이어의 입력과 제2 배치 정규화 레이어의 출력 간의 합 연산을 수행한 결과에 대해 제2 활성화 레 이어를 통해 제2 활성화 연산을 수행할 수 있다. 프로세서(230, 330)는 잔차 연결(residual connection)(예: 도 4b의 잔차 연결)을 추가함으로써 뉴럴 네트워크의 가중치에 대한 손실의 그래디 언트(gradient)가 지나치게 작아지는 것을 방지할 수 있다. 도 7a 및 도 7b는 일 실시예에 따른 인-메모리 컴퓨팅 매크로들을 이용하여 도 5에 도시된 컨볼루션 블록의 연 산을 처리하는 방법을 설명하기 위한 도면이다. 도 7a를 참조하면, 일 실시예에 따른 제1 컨볼루션 레이어와 제2 컨볼루션 레이어 각각에 대응하는 인-메모리 컴퓨팅 매크로의 그룹의 사이즈가 G = 2로 동일한 경우에 컨볼루션 블록이 연산을 처리하는 방법을 나타낸 도면들(701, 703)이 도시된다. 도면은 쓰루풋(Throughput)을 위한 처리 방법을 나타내고, 도면은 면 적(Area)을 위한 처리 방법을 나타낼 수 있다. 전술한 것과 같이, 뉴럴 네트워크 연산 장치는 넓은 채널을 가진 입력 벡터를 인-메모리 컴퓨팅 매크로의 행의 개수에 맞게 복수 개의 청크들로 나눠 연산함으로써 작은 사이즈의 인-메모리 컴퓨팅 매크로들을 통해 큰 사이 즈의 특징 맵(feature map)을 연산할 수 있다. 인-메모리 컴퓨팅 매크로의 그룹(group)의 개수가 G=2로 동일한 경우, 뉴럴 네트워크 연산 장치는 도면과 같이 두 개의 인-메모리 컴퓨팅 매크로들(MC1,1, IMC1,2)을 파이프라인시켜 제1 컨볼루션 연산 및 제2 컨볼루션 연산을 수행함으로써 쓰루풋을 향상시킬 수 있다. 또는, 뉴럴 네트워크 연산 장치는 도면과 같이 두 개의 인-메모리 컴퓨팅 매크로들(MC1,1, IMC1,2)을 연속적 으로 활용하여 구현 면적을 감소시킬 수 있다. 도 7b를 참조하면, 일 실시예에 따른 제1 컨볼루션 레이어와 제2 컨볼루션 레이어 각각에 대응하는 인-메모리 컴퓨팅 매크로의 그룹의 사이즈가 G = 2 및 G = 3으로 서로 상이한 경우에 컨볼루션 블록이 연산을 처리하 는 방법을 나타낸 도면들(705, 707)이 도시된다. 도면은 쓰루풋(Throughput)을 위한 처리 방법을 나타내고, 도면은 면적(Area)을 위한 처리 방법을 나 타낼 수 있다. 제1 인-메모리 컴퓨팅 매크로의 그룹(group)의 개수가 G = 2이고, 제2 인-메모리 컴퓨팅 매크로의 그룹의 개수 가 G = 3으로 상이한 경우, 뉴럴 네트워크 연산 장치는 도면와 같이 두 개의 제1 인-메모리 컴퓨팅 매크로 들(MC1,1, IMC1,2)에서의 제1 컨볼루션 연산의 결과를 세 개의 제2 인-메모리 컴퓨팅 매크로들(MC2,1, IMC2,2, MC2, 3)에 나누어 제2 컨볼루션 연산을 수행함으로써 쓰루풋을 향상시킬 수 있다. 뉴럴 네트워크 연산 장치는 제1 인 -메모리 컴퓨팅 매크로(MC1,1)의 연산 결과(제1 컨볼루션 연산의 결과) 중 일부를 제2 인-메모리 컴퓨팅 매크로 들(IMC2,2)로 전송할 수 있다. 뉴럴 네트워크 연산 장치는 제1 인-메모리 컴퓨팅 매크로(MC1,2)의 연산 결과 중 일부 또한, 제2 인-메모리 컴퓨팅 매크로들(IMC2,2)로 전송할 수 있다. 뉴럴 네트워크 연산 장치는 제1 인-메모 리 컴퓨팅 매크로(MC1,1)의 연산 결과 중 일부와 제1 인-메모리 컴퓨팅 매크로(MC1,2)의 연산 결과 중 일부를 하 나로 연결한 후, 연결한 결과를 다시 제2 청크들로 나누어 제2 인-메모리 컴퓨팅 매크로(IMC2,2)에 할당할 수 있 다. 또는, 뉴럴 네트워크 연산 장치는 제1 인-메모리 컴퓨팅 매크로의 그룹(group)의 개수(G = 2)와 제2 인-메모리 컴퓨팅 매크로의 그룹의 개수(G = 3)가 상이한 경우, 그룹의 개수가 큰 제2 인-메모리 컴퓨팅 매크로를 이용하 여 컨볼루션 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장치는 도면과 같이 세 개의 제2 인-메모리 컴 퓨팅 매크로들(MC2,1, IMC2,2, MC2,3)을 연속적으로 활용하여 구현 면적을 감소시킬 수 있다. 뉴럴 네트워크 연산 장치는 도 7a 및 도 7b에서 제1 인-메모리 컴퓨팅 매크로의 출력을 제2 인-메모리 컴퓨팅 매크로로 전달함으로써 SRAM에 대한 액세스를 줄일 수 있다. 도 8는 일 실시예에 따른 뉴럴 네트워크 연산 방법을 나타낸 흐름도이다. 도 8을 참조하면, 일 실시예에 따른 뉴럴 네트워크 연산 장치는 단계 내지 단계을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 복수의 채널을 포함하는 입력 벡터를 수신한다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수신한 입력 벡터를 나눈 제1 청크들(chunks)을 복수 의 제1 인-메모리 컴퓨팅 매크로에 할당하여 제1 컨볼루션 연산을 수행한다. 뉴럴 네트워크 연산 장치는 입력 벡터를 복수의 제1 인- 메모리 컴퓨팅 매크로의 구조에 매칭되도록 입력 벡터의 채널 방향으로 제1 청크들로 나 눌 수 있다. 뉴럴 네트워크 연산 장치는 입력 벡터의 각 채널의 사이즈가 복수의 제1 인- 메모리 컴퓨팅 매크 로의 행(row)의 개수 보다 작거나 같아지도록 입력 벡터를 제1 청크들로 나눌 수 있다. 뉴럴 네트워크 연산 장 치는 제1 청크들에 대해 시간 방향으로 상기 제1 컨볼루션 연산을 수행할 수 있다. 다시 말해, 뉴럴 네트워크 연산 장치는 제1 청크들에 대해 미리 결정된 시간 축 상의 길이를 갖는 필터와의 시간 컨볼루션(temporal convolution)을 수행할 수 있다. 뉴럴 네트워크 연산 장치는 제1 청크들이 할당되는 복수의 제1 인- 메모리 컴퓨팅 매크로 별로 서로 다른 활성 화 함수를 적용하여 제1 컨볼루션 연산을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서의 제1 컨볼루션 연산의 결과를 나눈 제2 청크들을 복 수의 제2 인-메모리 컴퓨팅 매크로에 할당하여 제2 컨볼루션 연산을 수행한다. 뉴럴 네트워크 연산 장치는 제1 청크들에서 나누어서 처리된 제1 컨볼루션 연산의 결과를 하나로 연결하고, 연결된 제1 컨볼루션 연산의 결과를 다시 제2 청크들로 나눌 수 있다. 뉴럴 네트워크 연산 장치는 제2 청크들을 복수의 제2 인- 메모리 컴퓨팅 매 크로에 할당하여 제2 컨볼루션 연산을 수행할 수 있다. 뉴럴 네트워크 연산 장치는 예를 들어, 연결된 제1 컨 볼루션 연산의 결과의 각 채널의 사이즈가 복수의 제2 인- 메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아 지도록 연결된 제1 컨볼루션 연산의 결과를 제2 청크들로 나눌 수 있다. 도 9는 일 실시예에 따른 뉴럴 네트워크 연산 방법을 나타낸 흐름도이다. 도 9를 참조하면, 일 실시예에 따른 뉴럴 네트워크 연산 장치는 단계 내지 단계을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 복수의 채널을 포함하는 입력 벡터를 수신할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수신한 입력 벡터를 제1 청크들(chunks)로 나눌 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 나눈 제1 청크들을 복수의 인-메모리 컴퓨팅 매크로 (예: 복수의 제1 인-메모리 컴퓨팅 매크로)에 할당하여 제1 컨볼루션 연산을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수행한 제1 컨볼루션 연산의 결과에 기초하여 배치 정규화 연산을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수행한 배치 정규화 연산의 결과에 기초하여 제1 활 성화 연산을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수행한 제1 활성화 연산 결과를 제2 청크들로 나눌 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 나눈 제2 청크들을 복수의 인-메모리 컴퓨팅 매크로 (예: 복수의 제2 인-메모리 컴퓨팅 매크로)에 할당하여 제2 컨볼루션 연산을 수행할 수 있다. 도 10은 일 실시예에 따른 뉴럴 네트워크 연산 방법을 나타낸 흐름도이다. 도 10을 참조하면, 일 실시예에 따 른 뉴럴 네트워크 연산 장치는 단계 내지 단계를 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 복수의 채널을 포함하는 입력 벡터를 수신할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수신한 입력 벡터를 제1 청크들로 나눌 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 나눈 제1 청크들을 복수의 인-메모리 컴퓨팅 매크 로(예: 복수의 제1 인-메모리 컴퓨팅 매크로)에 할당하여 제1 컨볼루션 연산을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수행한 제1 컨볼루션 연산의 결과를 연결할 수 있 다. 뉴럴 네트워크 연산 장치는 제1 컨볼루션 연산의 결과를 하나의 벡터 형태로 연결할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 연결된 제1 컨볼루션 연산의 결과를 제2 청크들로 나눌 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 나눈 제2 청크들을 복수의 인-메모리 컴퓨팅 매크 로(예: 복수의 제2 인-메모리 컴퓨팅 매크로)에 할당하여 제2 컨볼루션 연산을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수행한 제2 컨볼루션 연산의 결과의 사이즈를 입력 벡터의 사이즈와 일치시킬 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 입력 벡터의 사이즈에 일치시킨 제2 컨볼루션 연산 의 결과와 제1 컨볼루션 연산의 입력값 간의 합 연산을 수행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수행한 합 연산의 결과에 기초하여 풀링 연산을 수 행할 수 있다. 단계에서, 뉴럴 네트워크 연산 장치는 단계에서 수행한 풀링 연산의 결과에 기초하여 완전 연결 연 산을 수행할 수 있다. 도 11은 일 실시예에 따른 뉴럴 네트워크 연산에 기반한 키워드 식별 방법을 나타낸 흐름도이다. 도 11을 참조 하면, 일 실시예에 따른 키워드 식별 장치는 단계 내지 단계를 통해 오디오 스트림으로부터 키워드 를 식별하여 추출할 수 있다. 단계에서, 키워드 식별 장치는 오디오 스트림을 수신한다. 단계에서, 키워드 식별 장치는 단계에서 수신한 오디오 스트림에 기초한 복수의 채널을 포함하는 입력 벡터를 나눈 제1 청크들에 대해 제1 컨볼루션 연산을 수행한다. 키워드 식별 장치는 예를 들어, 입력 벡 터의 각 채널의 사이즈가 복수의 제1 인-메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아지도록 입력 벡터 를 제1 청크들로 나눌 수 있다. 키워드 식별 장치는 제1 청크들을 복수의 제1 인-메모리 컴퓨팅 매크로에 할당 하여 제1 컨볼루션 연산을 수행할 수 있다. 단계에서, 키워드 식별 장치는 단계에서 수행한 제1 컨볼루션 연산의 결과를 나눈 제2 청크들에 대 해 제2 컨볼루션 연산을 수행한다. 키워드 식별 장치는 단계에서 수행한 제1 컨볼루션 연산의 결과를 하 나의 벡터로 연결할 수 있다. 키워드 식별 장치는 연결된 제1 컨볼루션 연산의 결과의 각 채널의 사이즈가 복 수의 제2 인-메모리 컴퓨팅 매크로의 행의 개수 보다 작거나 같아지도록 연결된 제1 컨볼루션 연산의 결과를 제 2 청크들로 나눌 수 있다. 키워드 식별 장치는 제2 청크들을 복수의 제2 인-메모리 컴퓨팅 매크로에 할당하여 제2 컨볼루션 연산을 수행할 수 있다. 단계에서, 키워드 식별 장치는 단계에서 수행한 제2 컨볼루션 연산의 결과에 기초하여 오디오 스트 림에 포함된 키워드(keyword)를 식별할 수 있다. 키워드 식별 장치는 식별한 키워드를 추출할 수 있다. 이상에서 설명된 실시예들은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨 어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치, 방법 및 구성요소는, 예를 들 어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마 이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령(instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 소프트웨어 애플리 케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처 리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경우도 있지만,"}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하 나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치에 저장될 수 있다. 소프트웨어는 네트워크로 연결된 컴 퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단 독으로 또는 조합하여 포함할 수 있으며 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구 성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다. 위에서 설명한 하드웨어 장치는 실시예의 동작을 수행하기 위해 하나 또는 복수의 소프트웨어 모듈로서 작동하 도록 구성될 수 있으며, 그 역도 마찬가지이다."}
{"patent_id": "10-2023-0087231", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "이상과 같이 실시예들이 비록 한정된 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가진 자라면 이를 기초로 다양한 기술적 수정 및 변형을 적용할 수 있다. 예를 들어, 설명된 기술들이 설명된 방법과 다른순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위 에 속한다."}
{"patent_id": "10-2023-0087231", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시예에 따른 뉴럴 네트워크의 곱셈 누적(MAC) 연산을 수행하는 인-메모리 컴퓨팅 시스템의 구현 예 시를 도시한다. 도 2는 일 실시예에 따른 뉴럴 네트워크 연산 장치의 개략적인 블록도를 나타낸다. 도 3은 일 실시예에 따른 키워드 식별 장치의 개략적인 블록도를 나타낸다. 도 4a및 도 4b는 도 2에 도시된 뉴럴 네트워크 연산 장치가 사용하는 뉴럴 네트워크의 구조 일 예시를 도시한 도면이다. 도 5는 일 실시예에 따른 뉴럴 네트워크의 구성 일 예시를 도시한 도면이다. 도 6은 도 5에 도시된 컨볼루션 블록의 구성 일 예시를 도시한 도면이다. 도 7a 및 도 7b는 도 5에 도시된 컨볼루션 블록이 인-메모리 컴퓨팅 매크로들에 할당되는 방법을 설명하기 위한 도면이다. 도 8는 일 실시예에 따른 뉴럴 네트워크 연산 방법을 나타낸 흐름도이다. 도 9는 일 실시예에 따른 뉴럴 네트워크 연산 방법을 나타낸 흐름도이다 도 10은 일 실시예에 따른 뉴럴 네트워크 연산 방법을 나타낸 흐름도이다. 도 11은 일 실시예에 따른 뉴럴 네트워크 연산에 기반한 키워드 식별 방법을 나타낸 흐름도이다."}
