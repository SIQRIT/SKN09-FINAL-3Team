{"patent_id": "10-2022-0030139", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0133066", "출원번호": "10-2022-0030139", "발명의 명칭": "뉴럴 프로세싱 장치", "출원인": "리벨리온 주식회사", "발명자": "강민후"}}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "제1 및 제2 인풋 액티베이션이 저장되는 액티베이션 버퍼;상기 제1 및 제2 인풋 액티베이션을 이용하여, 제1 압축 인풋 액티베이션을 생성하는 액티베이션 컴프레서; 및상기 제1 압축 인풋 액티베이션을 이용하여, 2차원 연산을 수행하는 텐서 유닛을 포함하고,상기 제1 압축 인풋 액티베이션은 상기 제1 인풋 액티베이션의 적어도 일부와 상기 제2 인풋 액티베이션의 적어도 일부를 포함하는 제1 인풋 로우 데이터와, 상기 제1 인풋 로우 데이터와 대응되는 제1 메타 데이터를 포함하는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1 항에 있어서,상기 제1 메타 데이터는 상기 제1 인풋 로우 데이터의 출처에 대한 정보를 포함하는 제1 소스 인덱스를 포함하는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2 항에 있어서,상기 제1 인풋 로우 데이터는 제1 데이터 엘리먼트를 포함하고,상기 제1 소스 인덱스는 상기 제1 데이터 엘리먼트와 대응되는 제1 소스 엘리먼트를 포함하고,상기 제1 소스 엘리먼트는 상기 제1 및 제2 인풋 액티베이션 중 어느 하나와 대응되는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2 항에 있어서,상기 제1 메타 데이터는 상기 제1 인풋 로우 데이터와 연산되는 웨이트(weight)에 대한 정보를 포함하는 제1 오퍼레이션 인덱스를 더 포함하는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1 항에 있어서,상기 제1 인풋 액티베이션은 유효 엘리먼트인 제1 인풋 엘리먼트와, 비유효 엘리먼트인 제2 인풋 엘리먼트를 포함하고,상기 제2 인풋 액티베이션은 유효 엘리먼트인 제3 인풋 엘리먼트를 포함하고, 공개특허 10-2023-0133066-3-상기 액티베이션 컴프레서는 상기 제2 인풋 엘리먼트에 상기 제3 인풋 엘리먼트를 푸시(push)하여, 상기 제1 인풋 로우 데이터를 생성하고,상기 제1 인풋 로우 데이터는 상기 제1 인풋 엘리먼트와 대응되는 제1 데이터 엘리먼트 및 상기 제3 인풋 엘리먼트와 대응되는 제2 데이터 엘리먼트를 포함하는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5 항에 있어서,상기 제1 메타 데이터는 상기 제1 인풋 엘리먼트와 대응되는 제1 소스 엘리먼트와, 상기 제2 인풋 엘리먼트와대응되는 제2 소스 엘리먼트를 포함하고, 상기 제1 소스 엘리먼트 및 상기 제2 소스 엘리먼트는 서로 다른 값을 갖는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5 항에 있어서,상기 제2 인풋 엘리먼트의 위치와, 상기 제3 인풋 엘리먼트의 위치는 서로 대응되는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제5 항에 있어서,상기 제2 인풋 엘리먼트의 위치와, 상기 제3 인풋 엘리먼트의 위치는 서로 비대응되는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8 항에 있어서,상기 제1 메타 데이터는 상기 제1 인풋 로우 데이터에 포함된 데이터 엘리먼트 각각이 연산되는 웨이트에 대한정보를 포함하는 제1 오퍼레이션 인덱스를 포함하는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제5 항에 있어서,상기 액티베이션 컴프레서는 상기 제2 데이터 엘리먼트에 상기 제3 데이터 엘리먼트를 순차적으로 푸쉬하여 상기 제1 인풋 로우 데이터를 생성하는, 뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "공개특허 10-2023-0133066-4-제1 항에 있어서,상기 액티베이션 버퍼는 제3 및 제4 인풋 액티베이션을 더 저장하고,상기 액티베이션 컴프레서는,상기 제1 및 제2 인풋 액티베이션을 이용하여, 상기 제1 인풋 로우 데이터와 제1 예비 인풋 로우 데이터를 생성하고, 상기 제3 및 제4 인풋 액티베이션을 이용하여, 제2 인풋 로우 데이터와 제2 예비 인풋 로우데이터를 생성하고, 상기 제1 및 제2 예비 인풋 로우 데이터를 이용하여, 제3 인풋 로우 데이터를 생성하는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11 항에 있어서,상기 제1 및 제2 예비 인풋 로우데이터는 상기 액티베이션 버퍼에 일시적으로 저장되는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1 항에 있어서,제1 및 제2 웨이트 행렬이 저장되는 웨이트 버퍼; 및상기 제1 및 제2 웨이트 행렬을 이용하여, 제1 압축 웨이트 행렬을 생성하는 웨이트 컴프레서를 더 포함하고, 상기 제1 압축 웨이트 행렬은 상기 제1 웨이트 행렬의 적어도 일부와 상기 제2 웨이트 행렬의 적어도 일부를 포함하는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제1 항에 있어서,1차원 연산을 수행하는 벡터 유닛을 더 포함하고, 상기 액티베이션 컴프레서는 상기 제1 압축 인풋 액티베이션을 이용하여, 제1 및 제2 부분합을 생성하고, 상기 제1 부분합은 상기 벡터 유닛의 제1 레지스터에 제공되고, 상기 제2 부분합은 상기 벡터 유닛의 제2 레지스터에 제공되는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "비유효 엘리먼트인 제1 인풋 엘리먼트를 포함하는 제1 인풋 액티베이션과, 유효 엘리먼트인 제2 인풋 엘리먼트를 포함하는 제2 인풋 액티베이션이 저장되는 액티베이션 버퍼;상기 제2 인풋 엘리먼트를 상기 제1 인풋 엘리먼트에 푸시(push)하여 제1 인풋 로우 데이터를 생성하고, 상기제1 인풋 로우 데이터와 대응되는 제1 소스 인덱스를 생성하는 액티베이션 컴프레서; 및상기 제1 인풋 로우 데이터 및 상기 제1 소스 인덱스를 이용하여, 2차원 연산을 수행하는 텐서 유닛을포함하는,공개특허 10-2023-0133066-5-뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15 항에 있어서,상기 제1 인풋 로우 데이터는 상기 제2 인풋 엘리먼트와 대응되는 제1 데이터 엘리먼트를 포함하고, 상기 제1 소스 인덱스는 상기 제1 데이터 엘리먼트와 대응되는 제1 소스 엘리먼트를 포함하는,뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16 항에 있어서,상기 제1 소스 엘리먼트는 상기 제1 데이터 엘리먼트가 상기 제2 인풋 액티베이션으로부터 기인된 것이라는 정보를 포함하는, 뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제15 항에 있어서,상기 액티베이션 컴프레서는 상기 제1 인풋 로우 데이터가 연산될 웨이트에 대한 정보를 포함하는 제1 오퍼레이션 인덱스를 생성하는, 뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제1 부분합 데이터를 저장하는 로컬 메모리;제1 및 제2 데이터가 저장되는 버퍼;상기 제1 및 제2 데이터를 이용하여, 제1 압축 데이터 및 상기 제1 압축 데이터와 연관된 메타 데이터를 생성하는 컴프레서;상기 제1 압축 데이터 및 상기 메타 데이터를 이용하여, 제2 부분합 데이터를 생성하는 텐서 유닛; 및상기 로컬 메모리에서 상기 제1 부분합 데이터를 제공받고, 상기 텐서 유닛에서 상기 제2 부분합 데이터를 제공받고, 상기 제1 및 제2 부분합 데이터를 이용하여, 출력 액티베이션을 생성하는 벡터 유닛을 포함하고,상기 제1 압축 데이터는 상기 제1 데이터의 적어도 일부와 상기 제2 데이터의 적어도 일부를 포함하고, 상기 메타 데이터는 상기 제1 압축 데이터의 출처에 관한 정보를 포함하는, 뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19 항에 있어서,상기 메타 데이터는 상기 제1 압축 데이터의 연산에 대한 정보를 더 포함하는, 공개특허 10-2023-0133066-6-뉴럴 프로세싱 장치."}
{"patent_id": "10-2022-0030139", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 뉴럴 프로세싱 장치를 개시한다. 상기 뉴럴 프로세싱 장치는, 제1 및 제2 인풋 액티베이션이 저장되는 액티베이션 버퍼, 제1 및 제2 인풋 액티베이션을 이용하여, 제1 압축 인풋 액티베이션을 생성하는 액티베이션 컴 프레서, 및 제1 압축 인풋 액티베이션을 이용하여, 2차원 연산을 수행하는 텐서 유닛을 포함하고, 제1 압축 인풋 액티베이션은 제1 인풋 액티베이션의 적어도 일부와 제2 인풋 액티베이션의 적어도 일부를 포함하는 제1 인풋 로 우 데이터와, 제1 인풋 로우 데이터와 대응되는 제1 메타 데이터를 포함한다."}
{"patent_id": "10-2022-0030139", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 뉴럴 프로세싱 장치에 관한 것이다. 구체적으로, 본 발명은 리소스 낭비를 방지하고 레이턴시를 최소 화한 뉴럴 프로세싱 장치에 관한 것이다."}
{"patent_id": "10-2022-0030139", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "지난 몇년간, 인공지능(Artificial Intelligence) 기술은 4차 산업혁명의 핵심 기술로 전세계적으로 가장 유망 한 기술로 거론되고 있다. 이러한 인공지능 기술의 가장 큰 문제는 컴퓨팅 성능이다. 인간의 학습능력과 추론능 력, 지각능력, 자연언어의 이행능력 등을 실현해내는 인공지능 기술은 많은 데이터를 빠르게 처리하는 것이 가 장 중요하다. 초기 인공지능의 딥러닝 학습과 추론에는 기성 컴퓨터의 중앙처리장치(CPU; Central processing unit)나 그래픽 처리장치(GPU; Graphics Processing Unit)가 쓰였지만, 높은 워크 로드를 가지는 딥러닝 학습 및 추론의 작업에 는 한계가 있어 구조적으로 딥러닝 작업에 특화된 신경망 처리 장치(NPU; Neural Processing Unit)가 각광받고 있다. 딥러닝 학습 및 추론을 위해서는 곱셈 연산이 반복적으로 수행될 필요가 있다. 곱셈 연산은 내부의 텐서 유닛 (Tensor Unit)에서 수행되며, 텐서 유닛은 복수의 입력 데이터를 수신하여 이를 병렬적으로 연산하는 어레이 (Array)의 형태로 구현될 수 있다. 인공지능 장치는 레이턴시(latency)를 감소시키기 위해, 액티베이션 함수(예를 들어, ReLu 함수) 또는 프루닝을 통해, 텐서 유닛에 제공되는 복수의 입력 데이터를 최적화할 수 있다. 최적화된 입력 데이터는 적어도 일부가 0 의 값을 가질 수 있다. 최적화된 입력 데이터 중 일부가 0의 값을 갖더라도, 텐서 유닛은 여전히 곱셈 연산을 수행하며, 이는 리소스의 낭비를 야기한다."}
{"patent_id": "10-2022-0030139", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 과제는, 리소스의 낭비를 최소화하고, 레이턴시를 최소화한 뉴럴 프로세싱 장치를 제공하는 것이다. 본 발명의 목적들은 이상에서 언급한 목적으로 제한되지 않으며, 언급되지 않은 본 발명의 다른 목적 및 장점들 은 하기의 설명에 의해서 이해될 수 있고, 본 발명의 실시예에 의해 보다 분명하게 이해될 것이다. 또한, 본 발 명의 목적 및 장점들은 특허 청구 범위에 나타낸 수단 및 그 조합에 의해 실현될 수 있음을 쉽게 알 수 있을 것 이다."}
{"patent_id": "10-2022-0030139", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 과제를 해결하기 위한 본 발명의 몇몇 실시예에 따른 뉴럴 프로세싱 장치는 제1 및 제2 인풋 액티베이션이 저장되는 액티베이션 버퍼, 제1 및 제2 인풋 액티베이션을 이용하여, 제1 압축 인풋 액티베이션을 생성하는 액 티베이션 컴프레서 및 제1 압축 인풋 액티베이션을 이용하여, 2차원 연산을 수행하는 텐서 유닛을 포함하고, 제 1 압축 인풋 액티베이션은 제1 인풋 액티베이션의 적어도 일부와 제2 인풋 액티베이션의 적어도 일부를 포함하 는 제1 인풋 로우 데이터와, 제1 인풋 로우 데이터와 대응되는 제1 메타 데이터를 포함한다. 또한, 제1 메타 데이터는 제1 인풋 로우 데이터의 출처에 대한 정보를 포함하는 제1 소스 인덱스를 포함할 수 있다.또한, 제1 인풋 로우 데이터는 제1 데이터 엘리먼트를 포함하고, 제1 소스 인덱스는 제1 데이터 엘리먼트와 대 응되는 제1 소스 엘리먼트를 포함하고, 제1 소스 엘리먼트는 제1 및 제2 인풋 액티베이션 중 어느 하나와 대응 될 수 있다. 또한, 제1 메타 데이터는 제1 인풋 로우 데이터와 연산되는 웨이트(weight)에 대한 정보를 포함하는 제1 오퍼레 이션 인덱스를 더 포함할 수 있다. 또한, 제1 인풋 액티베이션은 유효 엘리먼트인 제1 인풋 엘리먼트와, 비유효 엘리먼트인 제2 인풋 엘리먼트를 포함하고, 제2 인풋 액티베이션은 유효 엘리먼트인 제3 인풋 엘리먼트를 포함하고, 액티베이션 컴프레서는 제2 인풋 엘리먼트에 제3 인풋 엘리먼트를 푸시(push)하여, 제1 인풋 로우 데이터를 생성하고, 제1 인풋 로우 데이 터는 제1 인풋 엘리먼트와 대응되는 제1 데이터 엘리먼트 및 제3 인풋 엘리먼트와 대응되는 제2 데이터 엘리먼 트를 포함할 수 있다. 또한, 제1 메타 데이터는 제1 인풋 엘리먼트와 대응되는 제1 소스 엘리먼트와, 제2 인풋 엘리먼트와 대응되는 제2 소스 엘리먼트를 포함하고, 제1 소스 엘리먼트 및 제2 소스 엘리먼트는 서로 다른 값을 가질 수 있다. 또한, 제2 인풋 엘리먼트의 위치와, 제3 인풋 엘리먼트의 위치는 서로 대응될 수 있다. 또한, 제2 인풋 엘리먼트의 위치와, 제3 인풋 엘리먼트의 위치는 서로 비대응될 수 있다. 또한, 제1 메타 데이터는 제1 인풋 로우 데이터에 포함된 데이터 엘리먼트 각각이 연산되는 웨이트에 대한 정보 를 포함하는 제1 오퍼레이션 인덱스를 포함할 수 있다. 또한, 액티베이션 컴프레서는 제2 데이터 엘리먼트에 제3 데이터 엘리먼트를 순차적으로 푸쉬하여 제1 인풋 로 우 데이터를 생성할 수 있다. 또한, 액티베이션 버퍼는 제3 및 제4 인풋 액티베이션을 더 저장하고, 액티베이션 컴프레서는, 제1 및 제2 인풋 액티베이션을 이용하여, 제1 인풋 로우 데이터와 제1 예비 인풋 로우 데이터를 생성하고, 제3 및 제4 인풋 액티 베이션을 이용하여, 제2 인풋 로우 데이터와 제2 예비 인풋 로우데이터를 생성하고, 제1 및 제2 예비 인풋 로우 데이터를 이용하여, 제3 인풋 로우 데이터를 생성할 수 있다. 또한, 제1 및 제2 예비 인풋 로우데이터는 액티베이션 버퍼에 일시적으로 저장될 수 있다. 또한, 제1 및 제2 웨이트 행렬이 저장되는 웨이트 버퍼 및 제1 및 제2 웨이트 행렬을 이용하여, 제1 압축 웨이 트 행렬을 생성하는 웨이트 컴프레서를 더 포함하고, 제1 압축 웨이트 행렬은 제1 웨이트 행렬의 적어도 일부와 제2 웨이트 행렬의 적어도 일부를 포함할 수 있다. 또한, 1차원 연산을 수행하는 벡터 유닛을 더 포함하고, 액티베이션 컴프레서는 제1 압축 인풋 액티베이션을 이 용하여, 제1 및 제2 부분합을 생성하고, 제1 부분합은 벡터 유닛의 제1 레지스터에 제공되고, 제2 부분합은 벡 터 유닛의 제2 레지스터에 제공될 수 있다. 상기 과제를 해결하기 위한 본 발명의 몇몇 실시예에 따른 뉴럴 프로세싱 장치는 비유효 엘리먼트인 제1 인풋 엘리먼트를 포함하는 제1 인풋 액티베이션과, 유효 엘리먼트인 제2 인풋 엘리먼트를 포함하는 제2 인풋 액티베 이션이 저장되는 액티베이션 버퍼, 제2 인풋 엘리먼트를 제1 인풋 엘리먼트에 푸시(push)하여 제1 인풋 로우 데 이터를 생성하고, 제1 인풋 로우 데이터와 대응되는 제1 소스 인덱스를 생성하는 액티베이션 컴프레서 및 제1 인풋 로우 데이터 및 제1 소스 인덱스를 이용하여, 2차원 연산을 수행하는 텐서 유닛을 포함한다. 또한, 제1 인풋 로우 데이터는 제2 인풋 엘리먼트와 대응되는 제1 데이터 엘리먼트를 포함하고, 제1 소스 인덱 스는 제1 데이터 엘리먼트와 대응되는 제1 소스 엘리먼트를 포함할 수 있다. 또한, 제1 소스 엘리먼트는 제1 데이터 엘리먼트가 제2 인풋 액티베이션으로부터 기인된 것이라는 정보를 포함 할 수 있다. 또한, 액티베이션 컴프레서는 제1 인풋 로우 데이터가 연산될 웨이트에 대한 정보를 포함하는 제1 오퍼레이션 인덱스를 생성할 수 있다. 상기 과제를 해결하기 위한 본 발명의 몇몇 실시예에 따른 뉴럴 프로세싱 장치는 제1 부분합 데이터를 저장하는 로컬 메모리, 제1 및 제2 데이터가 저장되는 버퍼, 제1 및 제2 데이터를 이용하여, 제1 압축 데이터 및 제1 압 축 데이터와 연관된 메타 데이터를 생성하는 컴프레서, 제1 압축 데이터 및 메타 데이터를 이용하여, 제2 부분 합 데이터를 생성하는 텐서 유닛 및 로컬 메모리에서 제1 부분합 데이터를 제공받고, 텐서 유닛에서 제2 부분합데이터를 제공받고, 제1 및 제2 부분합 데이터를 이용하여, 출력 액티베이션을 생성하는 벡터 유닛을 포함하고, 제1 압축 데이터는 제1 데이터의 적어도 일부와 제2 데이터의 적어도 일부를 포함하고, 메타 데이터는 제1 압축 데이터의 출처에 관한 정보를 포함한다. 또한, 메타 데이터는 제1 압축 데이터의 연산에 대한 정보를 더 포함할 수 있다."}
{"patent_id": "10-2022-0030139", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 뉴럴 프로세싱 장치는, 입력 데이터에 대해 압축을 수행하여, 불필요한 연산을 최소화하기 때문에 뉴 럴 프로세싱 장치의 리소스 낭비를 방지하고, 레이턴시를 최소화할 수 있다. 본 발명의 뉴럴 프로세싱 장치는, 텐서 유닛에 입력되는 인풋 액티베이션 및/또는 웨이트 행렬에 대한 압축을 수행함으로써, 연산 횟수를 감소시킬 수 있어 텐서 유닛의 리소스 낭비를 방지하고, 레이턴시를 최소화할 수 있 다. 상술한 내용과 더불어 본 발명의 구체적인 효과는 이하"}
{"patent_id": "10-2022-0030139", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서 및 특허청구범위에서 사용된 용어나 단어는 일반적이거나 사전적인 의미로 한정하여 해석되어서는 아 니된다. 발명자가 그 자신의 발명을 최선의 방법으로 설명하기 위해 용어나 단어의 개념을 정의할 수 있다는 원 칙에 따라, 본 발명의 기술적 사상과 부합하는 의미와 개념으로 해석되어야 한다. 또한, 본 명세서에 기재된 실 시예와 도면에 도시된 구성은 본 발명이 실현되는 하나의 실시예에 불과하고, 본 발명의 기술적 사상을 전부 대 변하는 것이 아니므로, 본 출원시점에 있어서 이들을 대체할 수 있는 다양한 균등물과 변형 및 응용 가능한 예 들이 있을 수 있음을 이해하여야 한다. 본 명세서 및 특허청구범위에서 사용된 제1, 제2, A, B 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 상기 구성요소들은 상기 용어들에 의해 한정되어서는 안 된다. 상기 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용된다. 예를 들어, 본 발명의 권리 범위를 벗어나지 않으면서 제1 구성 요소는 제2 구성요소로 명명될 수 있고, 유사하게 제2 구성요소도 제1 구성요소로 명명될 수 있다. '및/또는' 이라는 용어는 복수의 관련된 기재된 항목들의 조합 또는 복수의 관련된 기재된 항목들 중의 어느 항목을 포함 한다. 본 명세서 및 특허청구범위에서 사용된 용어는 단지 특정한 실시 예를 설명하기 위해 사용된 것으로, 본 발명을 한정하려는 의도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 출원에서 \"포함하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부 품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자에 의해서 일반적으로 이해되는 것과 동일한 의미를 가지고 있다. 일반적으로 사용되는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의 미를 가지는 것으로 해석되어야 하며, 본 출원에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적 인 의미로 해석되지 않는다. 또한, 본 발명의 각 실시예에 포함된 각 구성, 과정, 공정 또는 방법 등은 기술적으로 상호 간 모순되지 않는 범위 내에서 공유될 수 있다. 이하, 도 1 내지 도 26을 참조하여, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치를 설명한다. 도 1은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템을 설명하기 위한 블록도이다. 도 1을 참조하면, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템(NPS)은 제1 뉴럴 프로세싱 장치, 제2 뉴럴 프로세싱 장치 및 외부 인터페이스를 포함할 수 있다. 제1 뉴럴 프로세싱 장치는 인공 신경망을 이용하여 연산을 수행하는 장치일 수 있다. 제1 뉴럴 프로세싱 장 치는 예를 들어, 딥 러닝(deep learning) 연산 작업을 수행하는 것에 특화된 장치일 수 있다. 단, 본 실시예 가 이에 제한되는 것은 아니다. 제2 뉴럴 프로세싱 장치는 제1 뉴럴 프로세싱 장치와 동일 내지 유사한 구성을 가지는 장치일 수 있다. 제1 뉴럴 프로세싱 장치 및 제2 뉴럴 프로세싱 장치는 서로 외부 인터페이스를 통해서 연결되어 데이 터 및 제어 신호를 공유할 수 있다. 도 1에서는 2개의 뉴럴 프로세싱 장치를 도시하였지만, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템 (NPS)이 이에 제한되는 것은 아니다. 즉, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템(NPS)은 3개 이 상의 뉴럴 프로세싱 장치가 외부 인터페이스를 통해서 서로 연결될 수도 있다. 또한, 반대로, 본 발명의 몇 몇 실시예들에 따른 뉴럴 프로세싱 시스템(NPS)은 하나의 뉴럴 프로세싱 장치만을 포함할 수도 있다. 도 2는 도 1의 뉴럴 프로세싱 장치를 세부적으로 설명하기 위한 블록도이다. 도 2를 참조하면, 제1 뉴럴 프로세싱 장치는 뉴럴 코어 SoC, CPU, 오프 칩 메모리, 제1 비휘발 성 메모리 인터페이스, 제1 휘발성 메모리 인터페이스, 제2 비휘발성 메모리 인터페이스 및 제2 휘 발성 메모리 인터페이스를 포함할 수 있다. 뉴럴 코어 SoC는 시스템 온 칩(System on Chip) 장치일 수 있다. 뉴럴 코어 SoC는 인공지능 연산 장치 로 가속기(Accelerator)일 수 있다. 뉴럴 코어 SoC는 예를 들어, GPU(graphics processing unit), FPGA(field programmable gate array) 및 ASIC(application-specific integrated circuit) 중 어느 하나일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 뉴럴 코어 SoC는 외부 인터페이스를 통해서 다른 외부의 연산 장치들과 데이터를 교환할 수 있다. 또한, 뉴럴 코어 SoC는 제1 비휘발성 메모리 인터페이스 및 제1 휘발성 메모리 인터페이스를 통해서 각각 비휘발성 메모리 및 휘발성 메모리와 연결될 수 있다. CPU는 제1 뉴럴 프로세싱 장치의 시스템을 통제하고 프로그램의 연산을 실행하는 제어장치일 수 있다. CPU는 범용 연산 장치로서 딥러닝에 많이 사용되는 병렬 단순 연산을 수행하기에는 효율이 낮을 수 있다. 따라서, 뉴럴 코어 SoC가 딥러닝 추론 및 학습 작업에 연산을 수행하여 높은 효율을 가질 수 있다. CPU는 외부 인터페이스를 통해서 다른 외부의 연산 장치들과 데이터를 교환할 수 있다. 또한, CPU는 제2 비휘발성 메모리 인터페이스 및 제2 휘발성 메모리 인터페이스를 통해서 각각 비휘발성 메모리 및 휘발성 메모리와 연결될 수 있다. 오프 칩 메모리는 뉴럴 코어 SoC의 칩 외부에 배치된 메모리일 수 있다. 오프 칩 메모리는 비휘발 성 메모리 및 휘발성 메모리를 포함할 수 있다. 비휘발성 메모리는 전원이 공급되지 않아도 저장된 정보를 계속 유지하는 메모리일 수 있다. 비휘발성 메모 리는 예를 들어, ROM(Read-Only Memory), PROM(Programmable Read-Only Memory), EAROM(Erasable Alterable ROM), EPROM(Erasable Programmable Read-Only Memory), EEPROM(Electrically Erasable Programmable Read-Only Memory)(예를 들어, 낸드 플래시 메모리(NAND Flash memory), 노어 플래시 메모리(NOR Flash memory)), UVEPROM(Ultra-Violet Erasable Programmable Read-Only Memory), FeRAM(Ferroelectric Random Access Memory), MRAM(Magnetoresistive Random Access Memory), PRAM(Phase-change Random Access Memory), SONOS(silicon-oxide-nitride-oxide-silicon), RRAM(Resistive Random Access Memory), NRAM(Nanotube Random Access Memory), 마그네틱 컴퓨터 기억 장치(예를 들면, 하드 디스크, 디스켓 드라이브, 마그네틱 테이프), 광디스크 드라이브 및 3D 크로스포인트 메모리(3D XPoint memory) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 휘발성 메모리는 비휘발성 메모리와 달리, 저장된 정보를 유지하기 위해서 전력을 지속적으로 필요로 하는 메모리일 수 있다. 휘발성 메모리는 예를 들어, DRAM(Dynamic Random Access Memory), SRAM(StaticRandom Access Memory), SDRAM(Synchronous Dynamic Random Access Memory) 및 DDR SDRAM(Double Data Rate SDRAM) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 제1 비휘발성 메모리 인터페이스 및 제2 비휘발성 메모리 인터페이스는 각각 예를 들어, PATA(Parallel Advanced Technology Attachment), SCSI(Small Computer System Interface), SAS(Serial Attached SCSI), SATA(Serial Advanced Technology Attachment) 및 PCIe(PCI Express) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 제1 휘발성 메모리 인터페이스 및 제2 휘발성 메모리 인터페이스는 각각 예를 들어, SDR(Single Data Rate), DDR(Double Data Rate), QDR(Quad Data Rate), 및 XDR(eXtreme Data Rate, Octal Data Rate) 중 적어 도 하나일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 도 3은 도 2의 뉴럴 코어 SoC를 세부적으로 설명하기 위한 블록도이다. 도 2 및 도 3을 참조하면, 뉴럴 코어 SoC는 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA(Direct Memory Access), 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤러 및 글로벌 인터커넥션을 포함할 수 있다. 뉴럴 프로세서는 연산 작업을 직접 수행하는 연산 장치일 수 있다. 뉴럴 프로세서가 복수인 경우 연산 작업은 각각의 뉴럴 프로세서로 할당될 수 있다. 각각의 뉴럴 프로세서는 글로벌 인터커넥션 을 통해서 서로 연결될 수 있다. 공유 메모리는 여러 뉴럴 프로세서에 의해서 공유되는 메모리일 수 있다. 공유 메모리는 각 각의 뉴럴 프로세서의 데이터를 저장할 수 있다. 또한, 공유 메모리는 오프 칩 메모리로부터 데이터를 수신하여 일시적으로 저장하고 각각의 뉴럴 프로세서로 전달할 수 있다. 반대로, 공유 메모리 는 뉴럴 프로세서로부터 데이터를 수신하여 일시적으로 저장하고 도 2의 오프 칩 메모리로 전 달할 수도 있다. 공유 메모리는 상대적으로 속도가 빠른 메모리가 필요할 수 있다. 이에 따라서, 공유 메모리는 예 를 들어, SRAM을 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 즉, 공유 메모리는 DRAM 을 포함할 수도 있다. 공유 메모리는 SoC 레벨 즉, L3(level 3)에 해당하는 메모리일 수 있다. 따라서, 공유 메모리는 L3 공유 메모리라 정의할 수도 있다. DMA는 뉴럴 프로세서가 데이터의 입출력을 제어할 필요없이 직접 데이터의 이동을 제어할 수 있다. 이에 따라서, DMA가 메모리 사이의 데이터 이동을 제어하여 뉴럴 프로세서의 인터럽트의 횟수를 최 소화시킬 수 있다. DMA는 공유 메모리와 오프 칩 메모리 사이의 데이터 이동을 제어할 수 있다. DMA의 권한 을 통해서 비휘발성 메모리 컨트롤러 및 휘발성 메모리 컨트롤러가 데이터를 이동을 수행할 수 있 다. 비휘발성 메모리 컨트롤러는 비휘발성 메모리에 리드(read) 또는 라이트(Write) 작업을 제어할 수 있 다. 비휘발성 메모리 컨트롤러는 제1 비휘발성 메모리 인터페이스를 통해서 비휘발성 메모리를 제어할 수 있다. 휘발성 메모리 컨트롤러는 휘발성 메모리에 리드 또는 라이트 작업을 제어할 수 있다. 또한, 휘발성 메모리 컨트롤러는 휘발성 메모리의 리프레쉬 작업을 수행할 수 있다. 휘발성 메모리 컨트롤러(500 0)는 제1 휘발성 메모리 인터페이스를 통해서 비휘발성 메모리를 제어할 수 있다. 글로벌 인터커넥션은 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모 리 컨트롤러 및 휘발성 메모리 컨트롤러를 서로 연결할 수 있다. 또한, 외부 인터페이스도 글로 벌 인터커넥션에 연결될 수 있다. 글로벌 인터커넥션은 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤러 및 외부 인터페이스 사이의 데이터가 이동하는 경로일 수 있다. 글로벌 인터커넥션은 데이터뿐만 아니라 제어 신호의 전송 및 동기화를 위한 신호를 전송할 수 있다. 즉, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 별도의 제어 프로세서가 동기화의 신호를 관리하는 것이아니라 각각의 뉴럴 프로세서가 직접 동기화 신호를 전송하고 수신할 수 있다. 이에 따라서, 제어 프로세 서에 의해서 발생하는 동기화 신호의 레이턴시를 차단할 수 있다. 즉, 뉴럴 프로세서가 복수일 때, 어느 뉴럴 프로세서의 작업이 종료되어야 다음 뉴럴 프로세서 가 새로운 작업을 시작할 수 있는 개별 작업의 디펜던시가 존재할 수 있다. 이러한 개별 작업의 종료와 시작은 동기화 신호를 통해서 확인할 수 있는데, 기존의 기술은 이러한 동기화 신호의 수신과 새로운 작업의 시 작 지시를 제어 프로세서가 수행하였다. 그러나, 뉴럴 프로세서의 숫자가 늘어나고, 작업의 디펜던시가 복잡하게 설계됨에 따라 이러한 동기화 작 업의 요청 및 지시의 수는 기하급수적으로 늘어나게 되었다. 따라서, 각각의 요청 및 지시에 따른 레이턴시는 작업의 효율을 크게 낮출 수 있다. 따라서, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 제어 프로세서 대신 각각의 뉴럴 프로세서 가 직접 동기화 신호를 작업의 디펜던시에 따라 다른 뉴럴 프로세서로 전송할 수 있다. 이 경우 제 어 프로세서에 의해서 관리되는 방식에 비해서 병렬적으로 여러 뉴럴 프로세서가 동기화 작업을 수행할 수 있어 동기화에 따른 레이턴시를 최소화할 수 있다. 또한, 제어 프로세서가 작업 디펜던시에 따른 뉴럴 프로세서들의 작업 스케쥴링을 수행해야 하는데 이러 한 스케쥴링의 오버헤드도 뉴럴 프로세서의 개수가 늘어나면 늘어날수록 크게 늘어날 수 있다. 따라서, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 스케쥴링 작업도 개별 뉴럴 프로세서에 의해서 진 행되어 그에 따른 스케쥴링 부담도 없어 장치의 성능이 향상될 수 있다. 도 4는 도 3의 글로벌 인터커넥션을 세부적으로 설명하기 위한 구조도이다. 도 4를 참조하면, 글로벌 인터커넥션은 데이터 채널, 컨트롤 채널 및 L3 싱크 채널을 포함할 수 있다. 데이터 채널은 데이터를 전송하는 전용 채널일 수 있다. 데이터 채널을 통해서 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤러 및 외부 인터페이스가 서로 데이터를 교환할 수 있다. 컨트롤 채널은 제어 신호를 전송하는 전용 채널일 수 있다. 컨트롤 채널을 통해서 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤 러 및 외부 인터페이스가 서로 제어 신호를 교환할 수 있다. L3 싱크 채널은 동기화 신호를 전송하는 전용 채널일 수 있다. L3 싱크 채널을 통해서 적어도 하나 의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트 롤러 및 외부 인터페이스가 서로 동기화 신호를 교환할 수 있다. L3 싱크 채널은 글로벌 인터커넥션 내부에 전용 채널로 설정되어 다른 채널과 겹치지 않고 동기화 신호를 빠르게 전송할 수 있다. 이에 따라서, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 새로운 와 이어링 작업이 필요하지 않고 기존에 사용되는 글로벌 인터커넥션을 이용하여 동기화 작업을 원활하게 진 행할 수 있다. 도 5는 도 3의 뉴럴 프로세서를 세부적으로 설명하기 위한 블록도이다. 도 3 내지 도 5를 참조하면, 뉴럴 프로세서는 적어도 하나의 뉴럴 코어, L2 공유 메모리, 로컬 인터커넥션 및 L2 싱크 패스를 포함할 수 있다. 적어도 하나의 뉴럴 코어는 뉴럴 프로세서의 작업을 분담하여 수행할 수 있다. 뉴럴 코어는 예 를 들어, 8개일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 도 4 및 도 5에서는 여러 개의 뉴럴 코 어가 뉴럴 프로세서에 포함되는 것으로 도시하였지만, 본 실시예가 이에 제한되는 것은 아니다. 즉, 뉴럴 코어 1개만으로 뉴럴 프로세서가 구성될 수 있다. L2 공유 메모리는 뉴럴 프로세서 내에서 각각의 뉴럴 코어들이 공유하는 메모리일 수 있다. L2 공유 메모리는 각각의 뉴럴 코어의 데이터를 저장할 수 있다. 또한, L2 공유 메모리는 도 3의 공유 메모리로부터 데이터를 수신하여 일시적으로 저장하고 각각의 뉴럴 코어로 전달할 수 있다. 반 대로, L2 공유 메모리는 뉴럴 코어로부터 데이터를 수신하여 일시적으로 저장하고 도 3의 공유 메모 리로 전달할 수도 있다. L2 공유 메모리는 뉴럴 프로세서 레벨, 즉, L2(level 2)에 해당하는 메모리일 수 있다. L3 공유 메모리 즉, 공유 메모리는 뉴럴 프로세서에 의해서 공유되고, L2 공유 메모리는 뉴럴 코어에 의 해서 공유될 수 있다. 로컬 인터커넥션은 적어도 하나의 뉴럴 코어 및 L2 공유 메모리를 서로 연결할 수 있다. 로컬 인터커넥션은 적어도 하나의 뉴럴 코어 및 L2 공유 메모리 사이의 데이터가 이동하는 경로일 수 있다. 로컬 인터커넥션은 도 3의 글로벌 인터커넥션과 연결되어 데이터를 전송할 수 있다. L2 싱크 패스는 적어도 하나의 뉴럴 코어 및 L2 공유 메모리를 서로 연결할 수 있다. L2 싱크 패스는 적어도 하나의 뉴럴 코어 및 L2 공유 메모리의 동기화 신호가 이동하는 경로일 수 있다. L2 싱크 패스는 로컬 인터커넥션과 물리적으로 별도로 형성될 수 있다. 로컬 인터커넥션의 경우 글로벌 인터커넥션과 달리 내부에 충분한 채널이 형성되지 않을 수 있다. 이러한 경우에는 L2 싱크 패스 가 별도의 형성되어 동기화 신호의 전송을 빠르고 지체없이 수행할 수 있다. L2 싱크 패스는 글로벌 인터커넥션의 L3 싱크 채널에 비해서 한단계 낮은 레벨에서 수행되는 동기화에 사용될 수 있다. 도 6은 도 5의 뉴럴 코어를 세부적으로 설명하기 위한 블록도이다. 도 6을 참조하면, 뉴럴 코어는 LSU(Load/Store Unit), 로컬 메모리, 웨이트 버퍼, 액티베 이션 LSU, 액티베이션 버퍼, 프로세싱 유닛 및 액티베이션 컴프레서를 포함할 수 있다. LSU은 로컬 인터커넥션 및 L2 싱크 패스를 통해서 외부에서 데이터, 제어 신호 및 동기화 신호 중 적어도 하나를 수신할 수 있다. LSU은 로컬 메모리로 수신한 데이터, 제어 신호 및 동기화 신호 중 적어도 하나를 전송할 수 있다. 유사하게 LSU은 로컬 인터커넥션 및 L2 싱크 패스를 통해서 데이터, 제어 신호 및 동기화 신호 중 적어도 하나를 외부로 전달 수 있다. 도 7은 도 6의 LSU을 세부적으로 설명하기 위한 블록도이다. 도 7을 참조하면, LSU은 로컬 메모리 로드 유닛(111a), 로컬 메모리 스토어 유닛(111b), 뉴럴 코어 로드 유닛(112a), 뉴럴 코어 스토어 유닛(112b), 로드 버퍼(LB), 스토어 버퍼(SB), 로드 엔진(113a), 스토어 엔진 (113b) 및 변환 색인 버퍼를 포함할 수 있다. 로컬 메모리 로드 유닛(111a)은 로컬 메모리에 대한 로드 인스트럭션을 페치(fetch)하고, 로드 인스트럭션 을 이슈(issue)할 수 있다. 로컬 메모리 로드 유닛(111a)이 이슈된 로드 인스트럭션을 로드 버퍼(LB)에 제공하 면 로드 버퍼(LB)가 입력된 순서에 따라서 순차적으로 로드 엔진(113a)으로 메모리 액세스 요청을 전송할 수 있 다. 또한, 로컬 메모리 스토어 유닛(111b)은 로컬 메모리에 대한 스토어 인스트럭션을 페치하고, 스토어 인스 트럭션을 이슈할 수 있다. 로컬 메모리 스토어 유닛(111b)이 이슈된 스토어 인스트럭션을 스토어 버퍼(SB)에 제 공하면 스토어 버퍼(SB)가 입력된 순서에 따라서 순차적으로 스토어 엔진(113b)으로 메모리 액세스 요청을 전송 할 수 있다. 뉴럴 코어 로드 유닛(112a)은 뉴럴 코어에 대한 로드 인스트럭션을 페치하고, 로드 인스트럭션을 이슈할 수 있다. 뉴럴 코어 로드 유닛(112a)이 이슈된 로드 인스트럭션을 로드 버퍼(LB)에 제공하면 로드 버퍼(LB)가 입력된 순서에 따라서 순차적으로 로드 엔진(113a)으로 메모리 액세스 요청을 전송할 수 있다. 또한, 뉴럴 코어 스토어 유닛(112b)은 뉴럴 코어에 대한 스토어 인스트럭션을 페치하고, 스토어 인스트럭 션을 이슈할 수 있다. 뉴럴 코어 스토어 유닛(112b)이 이슈된 스토어 인스트럭션을 스토어 버퍼(SB)에 제공하면 스토어 버퍼(SB)가 입력된 순서에 따라서 순차적으로 스토어 엔진(113b)으로 메모리 액세스 요청을 전송할 수 있다. 로드 엔진(113a)은 메모리 액세스 요청을 수신하여 로컬 인터커넥션을 통해서 데이터를 불러올 수 있다. 이때, 로드 엔진(113a)은 변환 색인 버퍼에서 최근에 사용된 가상 주소와 물리 주소의 변환 테이블을 이용 하여 빠르게 데이터를 찾을 수 있다. 로드 엔진(113a)의 가상 주소가 변환 색인 버퍼에 없는 경우에는 다 른 메모리에서 주소 변환 정보를 찾을 수 있다. 스토어 엔진(113b)은 메모리 액세스 요청을 수신하여 로컬 인터커넥션를 통해서 데이터를 불러올 수 있다. 이때, 스토어 엔진(113b)은 변환 색인 버퍼에서 최근에 사용된 가상 주소와 물리 주소의 변환 테이블을 이 용하여 빠르게 데이터를 찾을 수 있다. 스토어 엔진(113b)의 가상 주소가 변환 색인 버퍼에 없는 경우에는다른 메모리에서 주소 변환 정보를 찾을 수 있다. 로드 엔진(113a) 및 스토어 엔진(113b)은 L2 싱크 패스로 동기화 신호를 보낼 수 있다. 이때, 동기화 신호 는 작업이 종료되었다는 의미를 가질 수 있다. 다시, 도 6을 참조하면, 로컬 메모리는 뉴럴 코어 내부에 위치한 메모리로서, 뉴럴 코어가 작업 에 필요한 모든 입력 데이터를 외부로부터 수신하여 임시로 저장할 수 있다. 또한, 로컬 메모리는 뉴럴 코 어에 의해서 연산된 출력 데이터를 외부로 전송하기 위해서 일시적으로 저장할 수 있다. 로컬 메모리(12 0)는 뉴럴 코어의 캐시 메모리 역할을 수행할 수 있다. 로컬 메모리는 액티베이션 LSU에 의해서 인풋 액티베이션(Act_In)을 액티베이션 버퍼로 전송하 고, 아웃풋 액티베이션(Act_Out)을 수신할 수 있다. 로컬 메모리는 액티베이션 LSU 외에도, 프로세싱 유닛과 직접 데이터를 송수신할 수 있다. 즉, 로컬 메모리는 텐서 유닛 및 벡터 유닛 각각 과 데이터를 주고받을 수 있다. 로컬 메모리는 뉴럴 코어 레벨 즉, L1(level 1)에 해당하는 메모리일 수 있다. 따라서, 로컬 메모리 는 L1 메모리라 정의할 수도 있다. 단, L1 메모리는 L2 공유 메모리 및 L3 공유 메모리, 즉 공유 메모리 와는 달리 공유되지 않고 뉴럴 코어의 전용(private) 메모리일 수 있다. 로컬 메모리는 데이터 패스(Data Path)를 통해 액티베이션이나 웨이트 같은 데이터를 전송할 수 있다. 로 컬 메모리는 별도의 전용 패스인 L1 싱크 패스(L1 Sync Path)를 통해서 동기화 신호를 주고받을 수 있다. 로컬 메모리는 예를 들어, LSU, 웨이트 버퍼, 액티베이션 LSU 및 프로세싱 유닛과 L1 싱크 패스(L1 Sync Path)를 통해서 동기화 신호를 주고받을 수 있다. 웨이트 버퍼는 웨이트(Weight)를 로컬 메모리로부터 수신할 수 있다. 웨이트 버퍼는 웨이트 (Weight)를 프로세싱 유닛으로 전달할 수 있다. 웨이트 버퍼는 웨이트(Weight)를 전달하기 전에 일시 적으로 웨이트(Weight)를 저장할 수 있다. 인풋 액티베이션(Act_In) 및 아웃풋 액티베이션(Act_Out)은 신경망 네트워크의 레이어의 입력값과 출력값을 의 미할 수 있다. 이때, 신경망 네트워크의 레이어가 복수인 경우 이전 레이어의 출력값이 다음 레이어의 입력값이 되므로 이전 레이어의 아웃풋 액티베이션(Act_Out)이 다음 레이어의 인풋 액티베이션(Act_In)으로 활용될 수 있 다. 웨이트(Weight)는 각 레이어에서 입력되는 입력 액티베이션(Act_In)과 곱해지는 파라미터를 의미할 수 있다. 웨 이트(Weight)는 딥 러닝 학습 단계에서 조절되어 확정되고, 추론 단계에서는 고정된 값을 통해서 아웃풋 액티베 이션(Act_Out)을 도출하기 위해서 사용될 수 있다. 액티베이션 LSU은 로컬 메모리로부터 인풋 액티베이션(Act_In)을 액티베이션 버퍼로 전달하고, 액티베이션 버퍼로부터 아웃풋 액티베이션(Act_Out)을 상기 온 칩 버퍼로 전달할 수 있다. 즉, 액티베이션 LSU은 액티베이션의 로드 작업과 스토어 작업을 모두 수행할 수 있다. 액티베이션 버퍼는 액티베이션 컴프레서를 통해 프로세싱 유닛으로 인풋 액티베이션(Act_In)을 제공할 수 있다. 다시 말해서, 액티베이션 버퍼는 인풋 액티베이션(Act_In)을 액티베이션 컴프레서에 제공하고, 액티베이션 컴프레서는 인풋 액티베이션(Act_In)을 이용하여 압축 인풋 액티베이션을 생성할 수 있다. 압축 인풋 액티베이션은 프로세싱 유닛에 제공될 수 있다. 압축 인풋 액티베이션은 복수의 인풋 액 티베이션의 적어도 일부를 포함할 수 있다. 이에 대한 구체적인 설명은 후술한다. 액티베이션 버퍼는 프로세싱 유닛으로부터 아웃풋 액티베이션(Act_Out)을 수신할 수 있다. 액티베이 션 버퍼는 인풋 액티베이션(Act_In)과 아웃풋 액티베이션(Act_Out)을 일시적으로 저장할 수 있다. 액티베이션 버퍼는 연산량이 많은 프로세싱 유닛, 특히, 텐서 유닛에 빠르게 액티베이션을 제공 하고, 빠르게 액티베이션을 수신하여 뉴럴 코어의 연산 속도를 높일 수 있다. 프로세싱 유닛은 연산을 수행하는 모듈일 수 있다. 프로세싱 유닛은 1차원 연산뿐만 아니라 2차원 매 트릭스 연산 즉, 컨볼루션 연산을 수행할 수 있다. 프로세싱 유닛은 압축 인풋 액티베이션을 수신하여 웨 이트(Weight)와 곱한 뒤 이를 더하여 아웃풋 액티베이션(Act_Out)을 생성할 수 있다. 액티베이션 컴프레서는 인풋 액티베이션(Act_In)을 압축하여, 연산 효율이 증가된 압축 인풋 액티베이션을 생성할 수 있다. 압축 인풋 액티베이션은 인풋 액티베이션(Act_In) 보다 엘리먼트의 밀도가 상대적으로 높을 수있다. 엘리먼트의 밀도가 상대적으로 높다는 것은 0이 아닌 값을 갖는 엘리먼트가 상대적으로 많다는 것을 의미 한다. 액티베이션 컴프레서에 대한 구체적인 설명은 후술한다. 도 8은 도 6의 프로세싱 유닛을 세부적으로 설명하기 위한 블록도이다. 도 6 및 도 8을 참조하면, 프로세싱 유닛은 텐서 유닛, 벡터 유닛, 컬럼 레지스터 및 로우 레지스터를 포함할 수 있다. 텐서 유닛은 압축 인풋 액티베이션 및 웨이트(Weight)를 수신하여 곱셈을 수행할 수 있다. 이때, 압축 인 풋 액티베이션과 웨이트(Weight)는 각각 매트릭스 형태로 컨볼루션을 통해서 연산될 수 있다. 이를 통해서, 텐 서 유닛은 아웃풋 액티베이션(Act_Out)을 생성할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 텐서 유닛은 아웃풋 액티베이션(Act_Out)외의 다른 종류의 출력도 얼마든지 생성할 수 있다. 텐서 유닛은 적어도 하나의 프로세싱 엘리먼트(PE)를 포함할 수 있다. 프로세싱 엘리먼트(PE)는 서로 정렬 되어 각각 하나의 압축 인풋 액티베이션의 엘리먼트와 하나의 웨이트(Weight)의 엘리먼트에 대한 곱셈을 수행할 수 있다. 텐서 유닛은 각각의 곱셈에 대한 값을 합한 부분합을 생성할 수 있다. 이러한 부분합은 아웃풋 액티베이션 (Act_Out)으로 활용될 수 있다. 텐서 유닛은 이차원 매트릭스 곱셈을 수행하므로 이차원 매트릭스 연산 유 닛(2D matrix compute unit)으로 지칭될 수도 있다. 벡터 유닛은 주로 1차원 연산을 수행할 수 있다. 벡터 유닛은 텐서 유닛와 함께 딥러닝 연산을 수행할 수 있다. 이를 통해서 프로세싱 유닛은 필요한 연산에 특화될 수 있다. 즉, 뉴럴 코어는 대량 의 2차원 매트릭스 곱셈과 1차원 연산을 수행하는 연산 모듈이 각각 있어 효율적으로 딥러닝 작업을 수행할 수 있다. 컬럼 레지스터는 제1 입력(I1)을 수신할 수 있다. 컬럼 레지스터는 제1 입력(I1)을 수신하고 이를 분 할하여 프로세싱 엘리먼트(PE)의 각 열(column)에 제공할 수 있다. 로우 레지스터는 제2 입력(I2)을 수신할 수 있다. 로우 레지스터는 제2 입력(I2)을 수신하고 이를 분 할하여 프로세싱 엘리먼트(PE)의 각 행(row)에 제공할 수 있다. 제1 입력(I1)은 압축 인풋 액티베이션 또는 웨이트(Weight)일 수 있다. 제2 입력(I2)은 압축 인풋 액티베이션 또는 웨이트(Weight) 중 제1 입력(I1)이 아닌 값일 수 있다. 또는, 제1 입력(I1) 및 제2 입력(I2)은 압축 인풋 액티베이션 및 웨이트(Weight) 외의 값이 될 수도 있다. 도 9는 도 6의 로컬 메모리를 세부적으로 설명하기 위한 블록도이다. 도 9를 참조하면, 로컬 메모리는 스케쥴러 및 적어도 하나의 로컬 메모리 뱅크를 포함할 수 있 다. 데이터가 로컬 메모리로 저장될 때, 스케쥴러는 로드 엔진(113a)으로부터 데이터를 수신할 수 있다. 이때, 데이터는 라운드 로빈(round robin) 방식으로 로컬 메모리 뱅크를 할당 받을 수 있다. 이에 따라서, 데이터는 적어도 하나의 로컬 메모리 뱅크 중 어느 하나에 저장될 수 있다. 반대로, 데이터가 로컬 메모리에서 로드될 때, 스케쥴러는 로컬 메모리 뱅크로부터 데이터를 수 신하여 스토어 엔진(113b)으로 전달될 수 있다. 스토어 엔진(113b)은 로컬 인터커넥션을 통해서 외부로 데 이터를 저장시킬 수 있다. 도 10은 도 9의 로컬 메모리 뱅크를 세부적으로 설명하기 위한 블록도이다. 도 10을 참조하면, 로컬 메모리 뱅크는 로컬 메모리 뱅크 컨트롤러(122_1) 및 로컬 메모리 뱅크 셀 어레이 (122_2)를 포함할 수 있다. 로컬 메모리 뱅크 컨트롤러(122_1)는 로컬 메모리 뱅크에 저장되는 데이터의 어드레스를 통해서 리드 및 라이트 동작을 관리할 수 있다. 즉, 로컬 메모리 뱅크 컨트롤러(122_1)는 데이터의 입출력을 전체적으로 관리할 수 있다. 로컬 메모리 뱅크 셀 어레이(122_2)는 데이터가 직접 저장되는 셀이 행과 열을 맞춰 정렬된 구조일 수 있다. 로 컬 메모리 뱅크 셀 어레이(122_2)는 로컬 메모리 뱅크 컨트롤러(122_1)에 의해서 제어될 수 있다.도 11은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템의 메모리 재구성을 설명하기 위한 블록도이다. 도 11을 참조하면, 뉴럴 코어 SoC은 제1 내지 제8 프로세싱 유닛(160a~160h) 및 온 칩 메모리(OCM)를 포함 할 수 있다. 도 11에서는 예시적으로 8개의 프로세싱 유닛을 도시하였으나, 이는 예시에 불과하고 프로세싱 유 닛의 개수는 얼마든지 달라질 수 있다. 온 칩 메모리(OCM)는 제1 내지 제8 로컬 메모리(120a~120h) 및 공유 메모리를 포함할 수 있다. 제1 내지 제8 로컬 메모리(120a~120h)는 각각 제1 내지 제8 프로세싱 유닛(160a~160h)의 전용 메모리로 사용될 수 있다. 즉, 제1 내지 제8 프로세싱 유닛(160a~160h)과 제1 내지 제8 로컬 메모리(120a~120h)는 서로 1:1로 대응될 수 있다. 공유 메모리는 제1 내지 제8 메모리 유닛(2100a~2100h)을 포함할 수 있다. 제1 내지 제8 메모리 유닛 (2100a~2100h)은 제1 내지 제8 프로세싱 유닛(160a~160h) 및 제1 내지 제8 로컬 메모리(120a~120h)에 각각 대 응할 수 있다. 즉, 메모리 유닛의 개수는 뉴럴 코어 및 로컬 메모리의 개수와 동일한 8개일 수 있다. 공유 메모리는 2가지 종류의 온 칩 메모리 형식 중 어느 하나로 동작할 수 있다. 즉, 공유 메모리 는 로컬 메모리 형식 또는 글로벌 메모리 형식 중 어느 하나로 동작할 수 있다. 즉, 공유 메모리는 하나 의 하드웨어로 2가지의 논리적인(logical) 메모리를 구현할 수 있다. 공유 메모리가 로컬 메모리 형식으로 구현되는 경우, 공유 메모리는 제1 내지 제8 로컬 메모리 (120a~120h)와 같이 제1 내지 제8 프로세싱 유닛(160a~160h) 각각의 전용 메모리(private memory)로 동작할 수 있다. 로컬 메모리는 글로벌 메모리에 비해서 상대적으로 고속의 클럭으로 동작할 수 있고, 공유 메모리 도 로컬 메모리 형식으로 동작할 때 상대적으로 더 빠른 클럭을 사용할 수 있다. 공유 메모리가 글로벌 메모리 형식으로 구현되는 경우, 공유 메모리는 제1 프로세싱 유닛(160a) 및 제2 프로세싱 유닛(160b)가 서로 같이 사용하는 공용 메모리(common memory)로 동작할 수 있다. 이때, 공유 메 모리는 제1 내지 제8 프로세싱 유닛(160a~160h)뿐만 아니라 제1 내지 제8 로컬 메모리(120a~120h)에 의해 서도 공유될 수 있다. 글로벌 메모리는 일반적으로 로컬 메모리에 비해서 낮은 클럭을 사용할 수 있으나, 이에 제한되는 것은 아니다. 공유 메모리가 글로벌 메모리 형식으로 동작할 때는, 제1 내지 제8 프로세싱 유닛(160a~160h)이 공유 메 모리를 공유할 수 있다. 이때, 공유 메모리는 도 2의 휘발성 메모리와 글로벌 인터커넥션 을 통해서 연결되고, 휘발성 메모리의 버퍼로 동작할 수도 있다. 공유 메모리는 적어도 일부가 로컬 메모리 형식으로 동작하고, 나머지가 글로벌 메모리 형식으로 동작할 수 있다. 즉, 공유 메모리 전체가 로컬 메모리 형식으로 동작할 수도 있고, 공유 메모리 전체가 글 로벌 메모리 형식으로 동작할 수도 있다. 또는, 공유 메모리의 일부가 로컬 메모리 형식으로 동작하고, 나머지 일부가 글로벌 메모리 형식으로 동작할 수 있다. 도 12는 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템의 메모리 재구성의 예시를 나타낸 블록도이다. 도 11 및 도 12를 참조하면, 제1, 제3, 제5 및 제7 프로세싱 유닛(160a, 160c, 160e, 160g) 각각의 제1, 제3, 제5 및 제7 전용 영역(AE1, AE3, AE5, AE7)은 각각 제1, 제3, 제5 및 제7 로컬 메모리(120a, 120c, 120e, 120g)만을 포함할 수 있다. 또한, 제2, 제4, 제6 및 제8 프로세싱 유닛(160b, 160d, 160f, 160h) 각각의 제2, 제4, 제6 및 제8 전용 영역(AE2, AE4, AE6, AE8)은 각각 제2, 제4, 제6 및 제8 로컬 메모리(120b, 120d, 120f, 120h)를 포함할 수 있다. 또한, 제2, 제4, 제6 및 제8 전용 영역(AE2, AE4, AE6, AE8)은 제2, 제4, 제6 및 제8 메모리 유닛(2100b, 2100d, 2100f, 2100h)을 포함할 수 있다. 공유 메모리의 제1, 제3, 제5 및 제7 메모 리 유닛(2100a, 2100c, 2100e, 2100g)은 공용 영역(AC)으로 활용될 수 있다. 공용 영역(AC)은 제1 내지 제8 프로세싱 유닛(160a~160h)에 의해서 공유되는 메모리일 수 있다. 제2 전용 영역 (AE2)은 제2 로컬 메모리(120b)와 제2 메모리 유닛(2100b)을 포함할 수 있다. 제2 전용 영역(AE2)은 하드웨어적 으로 분리된 제2 로컬 메모리(120b)와 제2 메모리 유닛(210b)이 같은 방식으로 동작하여 논리적으로 하나의 로 컬 메모리로 동작하는 영역일 수 있다. 제4, 제6 및 제8 전용 영역(AE4, AE6, AE8)도 제2 전용 영역(AE2)과 같 은 방식으로 동작할 수 있다. 본 실시예에 따른 공유 메모리는 각 프로세싱 유닛에 대응하는 영역을 최적화된 비율의 논리적인 로컬 메 모리와 논리적인 글로벌 메모리로 전환하여 사용할 수 있다. 공유 메모리는 이러한 비율의 조정을 런 타임(Run time)에서 수행할 수 있다. 즉, 각 프로세싱 유닛은 서로 동일한 작업을 하는 경우도 있지만, 서로 상이한 작업을 하는 경우도 있을 수 있 다. 이 경우 각 프로세싱 유닛이 하는 작업에 필요한 로컬 메모리의 용량과 글로벌 메모리의 용량은 매번 다를 수밖에 없다. 이에 따라서, 기존의 온 칩 메모리와 같이 로컬 메모리와 공유 메모리의 구성 비율이 고정적으로 설정되는 경우에는 각 프로세싱 유닛에게 할당되는 연산 작업에 따른 비효율이 발생할 수 있다. 따라서, 본 실시예에 따른 뉴럴 프로세싱 장치의 공유 메모리는 런 타임 중에 연산 작업에 따라서 최적의 로컬 메모리 및 글로벌 메모리의 비율을 설정할 수 있고, 연산의 효율성 및 속도를 향상시킬 수 있다. 도 13은 도 11의 A부분을 확대한 블록도이다. 도 11 및 도 13을 참조하면, 공유 메모리는 제1 로컬 메모리 컨트롤러(122_1a), 제2 로컬 메모리 컨트롤 러(122_1b), 제5 로컬 메모리 컨트롤러(122_1e), 제6 로컬 메모리 컨트롤러(122_1f), 제1 내지 제8 메모리 유닛 (2100a~2100h) 및 글로벌 컨트롤러를 포함할 수 있다. 도시되지 않은 다른 로컬 메모리 컨트롤러도 본 실 시예에 포함될 수 있으나 편의상 설명을 생략한다. 제1 로컬 메모리 컨트롤러(122_1a)는 제1 로컬 메모리(120a)를 제어할 수 있다. 또한, 제1 로컬 메모리 컨트롤 러(122_1a)는 제1 메모리 유닛(2100a)을 제어할 수 있다. 구체적으로, 제1 메모리 유닛(2100a)이 논리적인 로컬 메모리 형식으로 구현될 때, 제1 로컬 메모리 컨트롤러(122_1a)에 의한 제어가 제1 메모리 유닛(2100a)에 수행 될 수 있다. 제2 로컬 메모리 컨트롤러(122_1b)는 제2 로컬 메모리(120b)를 제어할 수 있다. 또한, 제2 로컬 메모리 컨트롤 러(122_1b)는 제2 메모리 유닛(2100b)을 제어할 수 있다. 즉, 제2 메모리 유닛(2100b)이 논리적인 로컬 메모리 형식으로 구현될 때, 제1 로컬 메모리 컨트롤러(122_1a)에 의한 제어가 제2 메모리 유닛(2100b)에 수행될 수 있 다. 제5 로컬 메모리 컨트롤러(122_1e)는 제5 로컬 메모리(120e)를 제어할 수 있다. 또한, 제5 로컬 메모리 컨트롤 러(122_1e)는 제5 메모리 유닛(2100e)을 제어할 수 있다. 즉, 제5 메모리 유닛(2100e)이 논리적인 로컬 메모리 형식으로 구현될 때, 제5 로컬 메모리 컨트롤러(122_1e)에 의한 제어가 제5 메모리 유닛(2100e)에 수행될 수 있 다. 제6 로컬 메모리 컨트롤러(122_1f)는 제6 로컬 메모리(120f)를 제어할 수 있다. 또한, 제6 로컬 메모리 컨트롤 러(122_1f)는 제6 메모리 유닛(2100f)을 제어할 수 있다. 즉, 제6 메모리 유닛(2100f)이 논리적인 로컬 메모리 형식으로 구현될 때, 제6 로컬 메모리 컨트롤러(122_1f)에 의한 제어가 제6 메모리 유닛(2100f)에 수행될 수 있 다. 글로벌 컨트롤러는 제1 내지 제8 메모리 유닛(2100a~2100h)을 모두 제어할 수 있다. 구체적으로, 글로벌 컨트롤러는 제1 내지 제8 메모리 유닛(2100a~2100h)이 각각 논리적으로 글로벌 메모리 형식으로 동작할 때(즉, 논리적으로 로컬 메모리 형식으로 동작하지 않을 때), 제1 메모리 유닛(2100a) 내지 제8 메모리 유닛 (2100h)을 제어할 수 있다. 즉, 제1 내지 제8 메모리 유닛(2100a~2100h)은 논리적으로 어떤 형식의 메모리로 구현되느냐에 따라서 제1 내지 제8 로컬 메모리 컨트롤러(122_1a~122_1h)에 의해 각각 제어되거나 글로벌 컨트롤러에 의해서 제어될 수 있다. 제1, 제2, 제5 및 제6 로컬 메모리 컨트롤러(122_1a, 122_1b, 122_1e, 122_1f)를 포함하는 로컬 메모리 컨트롤 러가 각각 제1 내지 제8 메모리 유닛(2100a~2100h)을 제어하는 경우, 제1 내지 제8 로컬 메모리 컨트롤러 (122_1a~141h)는 제1 내지 제8 메모리 유닛(2100a~2100h)을 제1 내지 제8 로컬 메모리(120a~120h)와 동일하게 제어하므로, 제1 내지 제8 프로세싱 유닛(160a~160h)의 전용 메모리로 제어할 수 있다. 이에 따라서, 제1 내지 제8 메모리 유닛(2100a~2100h)은 제1 내지 제8 프로세싱 유닛(160a~160h)의 클럭 주파수와 대응하는 클럭 주파 수로 동작할 수 있다. 제1 로컬 메모리 컨트롤러(122_1a), 제2 로컬 메모리 컨트롤러(122_1b), 제5 로컬 메모리 컨트롤러(122_1e) 및 제6 로컬 메모리 컨트롤러(122_1f)를 포함하는 로컬 메모리 컨트롤러는 각각 도 6의 LSU을 포함할 수 있다. 글로벌 컨트롤러가 제1 내지 제8 메모리 유닛(2100a~2100h) 중 적어도 하나를 각각 제어하는 경우, 글로 벌 컨트롤러는 제1 내지 제8 메모리 유닛(2100a~2100h)을 각각 제1 내지 제8 프로세싱 유닛(160a~160h) 의 글로벌 메모리로 제어할 수 있다. 이에 따라서, 제1 내지 제8 메모리 유닛(2100a~2100h) 중 적어도 하나는 각각 제1 내지 제8 프로세싱 유닛(160a~160h)의 클럭 주파수와는 무관한 클럭 주파수로 동작할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 글로벌 컨트롤러는 제1 내지 제8 메모리 유닛(2100a~2100h)을 도 3의 글로벌 인터커넥션과 연결할 수 있다. 제1 내지 제8 메모리 유닛(2100a~2100h)은 글로벌 컨트롤러에 의해서 도 1의 오프 칩 메모리 와 데이터를 교환하거나, 제1 내지 제8 로컬 메모리(120a~120h) 와 각각 데이터를 교환할 수 있다. 제1 내지 제8 메모리 유닛(2100a~2100h)은 각각 적어도 하나의 메모리 뱅크를 포함할 수 있다. 제1 메모리 유닛 (2100a)은 적어도 하나의 제1 메모리 뱅크(2110a)를 포함할 수 있다. 제1 메모리 뱅크(2110a)는 제1 메모리 유 닛(2100a)을 특정한 크기로 나눈 영역일 수 있다. 각각의 제1 메모리 뱅크(2110a)는 모두 동일한 크기의 메모리 소자일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 도 13에서는 4개의 메모리 뱅크가 하나의 메모리 유닛에 포함되는 것으로 도시되었다. 유사하게 제2, 제5 및 제6 메모리 유닛(2100b, 2100e, 2100f)는 각각 적어도 하나의 제2, 제5 및 제6 메모리 뱅 크(2110b, 2110e, 2110f)를 포함할 수 있다. 이하 제1 메모리 뱅크(2110a) 및 제5 메모리 뱅크(2110e)를 기준으로 설명하고, 이는 제2 및 제6 메모리 뱅크 (2110b, 2110f)를 포함한 다른 메모리 뱅크와 동일할 수 있다. 제1 메모리 뱅크(2110a)는 각각 논리적으로 로컬 메모리 형식으로 동작하거나 논리적으로 글로벌 메모리 형식으 로 동작할 수 있다. 이때, 제1 메모리 뱅크(2110a)는 제1 메모리 유닛(2100a) 내의 다른 메모리 뱅크와 독립적 으로 동작할 수도 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 각 메모리 뱅크별로 독립적으로 동작하는 경우, 제1 메모리 유닛(2100a)은 제1 로컬 메모리(120a)와 동일한 방 식으로 동작하는 제1 영역과, 제1 로컬 메모리(120a)와 다른 방식으로 동작하는 제2 영역을 포함할 수 있다. 이 때, 제1 영역과 제2 영역이 반드시 병존하는 것은 아니고 어느 하나의 영역이 전체 제1 메모리 유닛(2100a)의 전체를 차지할 수도 있다. 마찬가지로, 제2 메모리 유닛(2100b)은 제2 로컬 메모리(120b)와 동일한 방식으로 동작하는 제3 영역과, 제2 로 컬 메모리(120b)와 다른 방식으로 동작하는 제4 영역을 포함할 수 있다. 이때, 제3 영역과 제4 영역이 반드시 병존하는 것은 아니고 어느 하나의 영역이 전체 제1 메모리 유닛(2100a)의 전체를 차지할 수도 있다. 이때, 제1 영역과 제2 영역의 비율은 제3 영역과 제4 영역의 비율과 상이할 수 있다. 단, 본 실시예가 이에 제 한되는 것은 아니다. 따라서, 제1 영역과 제2 영역의 비율은 제3 영역과 제4 영역의 비율과 동일할 수도 있다. 즉, 각 메모리 유닛에서의 메모리 구성 비율을 얼마든지 달라질 수 있다. 일반적으로 기존의 시스템 온 칩의 경우에는 고속의 로컬 메모리를 제외한 온 칩 메모리를 고밀도 저전력 SRAM 으로 구성하는 경우가 많았다. 이는 필요한 용량 대비 칩의 면적과 사용 전력에서 SRAM이 높은 효율을 가지기 때문이다. 그러나, 기존의 온 칩 메모리는 미리 결정된 로컬 메모리의 용량보다 더 많은 데이터가 빠르게 필요 한 작업의 경우에는 처리 속도가 크게 느려질 수밖에 없었고, 글로벌 메모리의 필요가 크지 않은 경우에도 남아 있는 글로벌 메모리를 활용할 방안이 전혀 없어 비효율이 발생하였다. 이에 반해서, 본 발명의 몇몇 실시예에 따른 공유 메모리는 경우에 따라서 각각 2개의 컨트롤러 중 어느 하나에 의해서 선택적으로 제어될 수 있다. 이때, 공유 메모리가 전체적으로 2개의 컨트롤러 중 정해진 어느 하나에 의해서만 제어되는 것은 아니고, 메모리 유닛 단위 또는 메모리 뱅크 단위로 독립적으로 제어될 수 있다. 이를 통해서, 본 실시예에 따른 공유 메모리는 연산 작업에 따른 최적의 메모리 구성 비율을 런 타임 중 에 획득하여 더 빠르고 효율적인 연산작업을 수행할 수 있다. 인공지능에 특화된 프로세싱 유닛의 경우 특정 어 플리케이션 단위로 로컬 메모리와 글로벌 메모리의 필요한 크기가 달라질 수 있다. 나아가, 동일한 어플리케이 션이라도 딥러닝 네트워크를 사용하는 경우 각 레이어 별로 로컬 메모리와 글로벌 메모리의 필요한 크기가 달라 질 수 있다. 본 실시예에 따른 공유 메모리는 각 레이어에 따른 연산 단계의 변화에도 메모리의 구성 비 율이 런 타임 중에 변화될 수 있어 빠르고 효율적인 딥러닝 작업이 가능할 수 있다. 도 14는 도 13의 제1 뱅크를 세부적으로 설명하기 위한 도면이다. 도 14는 제1 메모리 뱅크(2110a)에 대해서 도 시하였지만, 다른 메모리 뱅크도 제1 메모리 뱅크(2110a)와 동일한 구조일 수 있다. 도 14를 참조하면, 제1 메모리 뱅크(2110a)는 셀 어레이(Ca), 뱅크 컨트롤러(Bc), 제1 경로 유닛(P1) 및 제2 경 로 유닛(P2)을 포함할 수 있다. 셀 어레이(Ca)는 내부에 복수의 메모리 소자(Cell)를 포함할 수 있다. 셀 어레이(Ca)는 복수의 메모리 소자가 격자 구조로 정렬되어 배치될 수 있다. 셀 어레이(Ca)는 예를 들어, SRAM(Static Random Access Memory) 셀 어 레이일 수 있다. 뱅크 컨트롤러(Bc)는 셀 어레이(Ca)를 제어할 수 있다. 뱅크 컨트롤러(Bc)는 셀 어레이(Ca)가 로컬 메모리 형식 으로 동작할지, 아니면 글로벌 메모리 형식으로 동작할 지를 결정하고 그에 따라 셀 어레이(Ca)를 제어할 수 있 다. 구체적으로, 뱅크 컨트롤러(Bc)는 런 타임 중에 제1 경로 유닛(P1) 방향으로 데이터를 송수신할지, 제2 경로 유 닛(P2) 방향으로 데이터를 송수신할지를 결정할 수 있다. 뱅크 컨트롤러(Bc)는 경로 컨트롤 신호(Spc)에 따라 데이터의 송수신 방향을 결정할 수 있다. 경로 컨트롤 신호(Spc)는 미리 설계된 장치 드라이버나 컴파일러에 의해서 생성될 수 있다. 경로 컨트롤 신호 (Spc)는 연산 작업의 특성에 따라서 생성될 수 있다. 또는, 경로 컨트롤 신호(Spc)는 사용자로부터 수신된 입력 에 의해서 생성될 수 있다. 즉, 사용자가 가장 최적의 메모리 구성 비율을 선택하기 위해서 경로 컨트롤 신호 (Spc)에 대한 입력을 직접 인가할 수 있다. 뱅크 컨트롤러(Bc)는 경로 컨트롤 신호(Spc)를 통해서 셀 어레이(Ca)에 저장된 데이터들의 송수신되는 경로를 결정할 수 있다. 뱅크 컨트롤러(Bc)가 데이터들이 송수신되는 경로를 결정하는 것에 따라 데이터들의 교환 인터 페이스가 달라질 수 있다. 즉, 뱅크 컨트롤러(Bc)가 제1 경로 유닛(P1)과 데이터를 교환하는 경우 제1 인터페이 스를 이용할 수 있고, 제2 경로 유닛(P2)과 데이터를 교환하는 경우 제2 인터페이스를 이용할 수 있다. 이때, 제1 인터페이스와 제2 인터페이스는 서로 다를 수 있다. 또한, 데이터가 저장되는 어드레스 체계도 달라질 수 있다. 즉, 특정 인터페이스를 선택하면 그에 대응하는 어 드레스 체계로 리드 및 라이트 동작이 수행될 수 있다. 뱅크 컨트롤러(Bc)는 특정 클럭 주파수로 동작할 수 있다. 예를 들어, 셀 어레이(Ca)가 SRAM 셀 어레이인 경우 에는 일반적인 SRAM의 동작 클럭 주파수로 뱅크 컨트롤러(Bc)가 동작할 수 있다. 제1 경로 유닛(P1)은 뱅크 컨트롤러(Bc)와 연결될 수 있다. 제1 경로 유닛(P1)은 셀 어레이(Ca)의 데이터를 제1 프로세싱 유닛(160a)과 직접 교환할 수 있다. 이때, “직접”이란 글로벌 인터커넥션을 거치지 않고 서로 교환됨을 의미할 수 있다. 즉, 제1 프로세싱 유닛(160a)은 제1 로컬 메모리(120a)와 직접 데이터를 교환할 수 있고, 제1 프로세싱 유닛(160a)은 공유 메모리가 논리적으로 로컬 메모리 형식으로 구현되었을 때 제1 경 로 유닛(P1)을 통해서 데이터를 교환할 수 있다. 제1 경로 유닛(P1)은 도 13의 제1 로컬 메모리 컨트롤러 (122_1a) 및 제2 로컬 메모리 컨트롤러(122_1b)를 포함한 로컬 메모리 컨트롤러를 포함할 수 있다. 제1 경로 유닛(P1)은 멀티 사이클 싱크 패스(Multi-Cycle Sync-Path)를 구성할 수 있다. 즉, 제1 경로 유닛 (P1)의 동작 클럭 주파수는 제1 프로세싱 유닛(160a)의 동작 클럭 주파수와 동일할 수 있다. 제1 로컬 메모리 (120a)는 제1 프로세싱 유닛(160a)의 동작과 같은 속도로 빠르게 데이터를 교환하기 위해서 제1 프로세싱 유닛 (160a)의 동작 클럭 주파수와 동일한 클럭 주파수로 빠르게 데이터를 교환할 수 있다. 제1 경로 유닛(P1)도 동 일하게 제1 프로세싱 유닛(160a)의 동작 클럭 주파수와 동일한 클럭 주파수로 동작할 수 있다. 이때, 제1 경로 유닛(P1)의 동작 클럭 주파수는 뱅크 컨트롤러(Bc)의 동작 클럭 주파수의 배수(倍數)일 수 있다. 이 경우, 뱅크 컨트롤러(Bc)와 제1 경로 유닛(P1) 사이에 클럭의 동기화를 위한 CDC(Clock Domain Crossing) 작업이 따로 필요하지 않고, 이에 따라서 데이터 전송의 지연(delay)이 발생하지 않을 수 있다. 이에 따라서, 더 빠르고 효율적인 데이터 교환이 가능할 수 있다. 도 14에서는 예시적으로, 제1 경로 유닛(P1)의 동작 클럭 주파수는 1.5GHz일 수 있다. 이는 뱅크 컨트롤러(Bc) 의 750MHz의 2배의 주파수일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니고 뱅크 컨트롤러(Bc)의 클럭 주파수의 정수배로 제1 경로 유닛(P1)이 동작하는 경우라면 얼마든지 가능할 수 있다. 제2 경로 유닛(P2)은 뱅크 컨트롤러(Bc)와 연결될 수 있다. 제2 경로 유닛(P2)은 셀 어레이(Ca)의 데이터를 제1 프로세싱 유닛(160a)과 직접 교환하지 않고, 글로벌 인터커넥션를 통해서 교환할 수 있다. 즉, 제1 프로세싱 유닛(160a)은 글로벌 인터커넥션 및 제2 경로 유닛(P2)을 통해서 셀 어레이(Ca)와 데이터를 교환할 수 있다. 이때, 셀 어레이(Ca)는 단순히 제1 프로세싱 유닛(160a)뿐만 아니라 다른 뉴럴 코어와도 데이터를 교 환할 수 있다. 즉, 제2 경로 유닛(P2)은 제1 메모리 뱅크(2110a)가 논리적으로 글로벌 메모리 형식으로 구현되었을 때 셀 어레 이(Ca)와 모든 뉴럴 코어와의 데이터 교환 경로일 수 있다. 제2 경로 유닛(P2)은 도 13의 글로벌 컨트롤러 를 포함할 수 있다. 제2 경로 유닛(P2)은 어싱크 패스(Async-Path)를 구성할 수 있다. 제2 경로 유닛(P2)의 동작 클럭 주파수는 글 로벌 인터커넥션의 동작 클럭 주파수와 동일할 수 있다. 제2 경로 유닛(P2)도 동일하게 글로벌 인터커넥 션의 동작 클럭 주파수와 동일한 클럭 주파수로 동작할 수 있다. 이때, 제2 경로 유닛(P2)의 동작 클럭 주파수는 뱅크 컨트롤러(Bc)의 동작 클럭 주파수와 서로 동기화되지 않을 수 있다. 이 경우, 뱅크 컨트롤러(Bc)와 제2 경로 유닛(P2) 사이에 클럭의 동기화를 위한 CDC(Clock Domain Crossing) 작업이 필요할 수 있다. 뱅크 컨트롤러(Bc)의 동작 클럭 주파수와 제2 경로 유닛(P2)의 동작 클럭 주 파수를 서로 동기화 시키지 않는 경우에는 클럭 도메인의 설계의 자유도가 높아질 수 있다. 따라서, 하드웨어 설계의 난이도가 낮아져 더욱 용이하게 하드웨어 동작을 도출할 수 있다. 뱅크 컨트롤러(Bc)는 제1 경로 유닛(P1)을 통해서 데이터를 교환하는 경우와 제2 경로 유닛(P2)을 통해서 데이 터를 교환하는 경우에 서로 다른 어드레스 체계를 이용할 수 있다. 즉, 뱅크 컨트롤러(Bc)는 제1 경로 유닛(P 1)을 통해서는 제1 어드레스 체계를 이용하고, 제2 경로 유닛(P2)을 통해서는 제2 어드레스 체계를 이용할 수 있다. 이때, 제1 어드레스 체계와 제2 어드레스 체계는 서로 다를 수 있다. 뱅크 컨트롤러(Bc)는 반드시 메모리 뱅크별로 존재할 필요는 없다. 즉, 뱅크 컨트롤러(Bc)는 스케쥴링을 위한 부분이 아니라 신호를 전달하는 역할을 하므로, 2개의 포트를 가지는 각각의 메모리 뱅크에 필수적인 부분은 아 니다. 따라서, 하나의 뱅크 컨트롤러(Bc)가 여러 메모리 뱅크를 제어할 수 있다. 여러 메모리 뱅크는 뱅크 컨트 롤러(Bc)에 의해 제어되더라도 독립적으로 동작할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 물론, 뱅크 컨트롤러(Bc)는 각 메모리 뱅크별로 존재할 수도 있다. 이 경우, 뱅크 컨트롤러(Bc)가 각각의 메모 리 뱅크를 개별적으로 제어할 수 있다. 도 13 및 도 14를 참조하면, 제1 메모리 유닛(210a)이 제1 경로 유닛(P1)을 통해서 데이터를 교환하는 경우 제1 어드레스 체계를 사용하고, 제2 경로 유닛(P2)을 통해서 데이터를 교환하는 경우 제2 어드레스 체계를 사용할 수 있다. 유사하게, 제2 메모리 유닛(210b)이 제1 경로 유닛(P1)을 통해서 데이터를 교환하는 경우 제3 어드레 스 체계를 사용하고, 제2 경로 유닛(P2)을 통해서 데이터를 교환하는 경우 제2 어드레스 체계를 사용할 수 있다. 이때, 제1 어드레스 체계와 제3 어드레스 체계는 서로 동일할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 제1 어드레스 체계와 제3 어드레스 체계는 각각 제1 프로세싱 유닛(160a) 및 제2 프로세싱 유닛(160b)에 각각 전용으로 사용될 수 있다. 제2 어드레스 체계는 제1 프로세싱 유닛 (160a) 및 제2 프로세싱 유닛(160b)에 공용 으로 적용될 수 있다. 도 14에서는 예시적으로, 제2 경로 유닛(P2)의 동작 클럭 주파수는 1GHz로 동작할 수 있다. 이는 뱅크 컨트롤러 (Bc)의 750MHz의 동작 클럭 주파수와 동기화 되지 않은 주파수일 수 있다. 즉, 제2 경로 유닛(P2)의 동작 클럭 주파수는 뱅크 컨트롤러(Bc)의 동작 클럭 주파수에 전혀 종속되지 않고 자유롭게 설정될 수 있다. 일반적인 글로벌 메모리는 느린 SRAM(예를 들어, 750MHz)과 그보다 빠른 글로벌 인터커넥션(예를 들어, 1GHz)를 이용하여 CDC 작업에 따른 지연이 발생할 수밖에 없었다. 이에 반해서, 본 발명의 몇몇 실시예들에 따른 공유 메모리는 제2 경로 유닛(P2) 외에도 제1 경로 유닛(P1)을 이용할 여지가 있어 CDC 작업에 따른 지연을 회 피할 수 있다. 또한, 일반적인 글로벌 메모리는 복수의 뉴럴 코어가 하나의 글로벌 인터커넥션를 이용하므로 데이터 전 송량이 동시에 발생하였을 때 전체적인 처리 속도의 저하가 쉽게 발생할 수 있다. 이에 반해서, 본 발명의 몇몇 실시예들에 따른 공유 메모리는 제2 경로 유닛(P2) 외에도 제1 경로 유닛(P1)을 이용할 여지가 있어 글로 벌 컨트롤러에 몰리는 데이터 처리량을 적절하게 분산하는 효과도 얻을 수 있다. 도 15는 액티베이션 컴프레서가 없는 환경에서의 텐서 유닛의 연산 과정을 간략히 설명하기 위한 도면이다. 도 6 및 도 15를 참조하면, 프로세싱 유닛은 액티베이션 버퍼로부터 제1 인풋 액티베이션(Act_In_1) 을 수신할 수 있다. 제1 인풋 액티베이션(Act_In_1)은 제1-1 인풋 엘리먼트(i11) 내지 제1-8 인풋 엘리먼트 (i18)를 포함할 수 있다. 다시 말해서, 제1 인풋 액티베이션(Act_In_1)은 8개의 엘리먼트를 포함할 수 있다. 그 러나, 실시예들이 이에 제한되는 것은 아니고, 인풋 액티베이션(Act_In)은 8개 이외의 다른 개수의 엘리먼트를 포함할 수 있음은 물론이다. 다시 말해서, 인풋 액티베이션(Act_In)의 형태는 프로세싱 유닛의 설계에 따 라 다양한 변형이 가능하며, 본 발명의 기술 분야에서 통상의 지식을 가진 자는 본 발명의 범위를 벗어나지 않 고, 프로세싱 유닛의 설계에 따라 다양한 형태의 인풋 액티베이션(Act_In)을 적용할 수 있을 것이다. 예를 들어, 인풋 액티베이션(Act_In)은 64개의 엘리먼트를 포함하고, 8개의 엘리먼트마다 엘리먼트 그룹을 형성할 수 있다. 다시 말해서, 인풋 액티베이션(Act_In)은 8개의 엘리먼트 그룹을 포함하고, 각 엘리먼트 그룹은 8개의 엘 리먼트를 포함할 수 있다. 이하에서는 인풋 액티베이션(Act_In) 각각은 8개 또는 64개의 엘리먼트를 포함하는 것으로 설명하나, 이는 설명의 편의를 위한 것일 뿐 본 발명의 범위를 제한하는 것은 아니다. 제1-1 인풋 엘리먼트(i11), 제1-2 인풋 엘리먼트(i12), 제1-4 인풋 엘리먼트(i14), 제1-5 인풋 엘리먼트(i15) 및 제1-6 인풋 엘리먼트(i16)는 각각 0이 아닌 값을 가질 수 있다. 한편, 제1-3 인풋 엘리먼트(i13), 제1-7 인 풋 엘리먼트(i17) 및 제1-8 인풋 엘리먼트(i18)는 각각 0을 값으로 가질 수 있다. 이하에서는 설명의 편의를 위 해, 0이 아닌 값을 갖는 엘리먼트를 '유효 엘리먼트'라 정의하고, 0인 값을 갖는 엘리먼트를 '비유효 엘리먼 트'라 정의한다. 달리 표현하면, '유효 엘리먼트'는 논-제로 엘리먼트(non-zero element)로도 지칭될 수 있고, '비유효 엘리먼트'는 제로 엘리먼트(zero element)로도 지칭될 수 있다. 이하에서는, 설명의 편의를 위해 유효 엘리먼트를 해칭으로, 비유효 엘리먼트를 블랭크(blank)로 도시한다. 프로세싱 유닛은 웨이트 버퍼로부터 웨이트 행렬(Weight)을 수신하고, 웨이트 행렬(Weight)과 제1 인 풋 액티베이션(Act_In_1)을 연산할 수 있다. 제1 인풋 액티베이션(Act_In_1)이 1X8 행렬 구조이고, 웨이트 행렬 (Weight)이 8X8 행렬 구조인 것으로 가정하면, 프로세싱 유닛은 1X8 행렬과 8X8 행렬에 대한 2차원 매트릭 스 연산을 수행하여, 제1 아웃풋 액티베이션(Act_Out_1)을 생성할 수 있다. 제1 아웃풋 액티베이션(Act_Out_1) 은 제1 아웃풋 엘리먼트(ou1) 내지 제8 아웃풋 엘리먼트(ou8)를 포함할 수 있다. 설명의 편의를 위해, 제1 아웃 풋 엘리먼트(ou1)를 연산하는 과정에 대해서만 설명한다. 이때, 웨이트 행렬(Weight)의 1열의 값을 제1-1 웨이 트 엘리먼트(w11) 내지 제8-1 웨이트 엘리먼트(w81)로 표현하며, 제1-1 웨이트 엘리먼트(w11) 내지 제8-1 웨이 트 엘리먼트(w81)는 각각 0이 아닌 값을 갖는 것으로 가정한다. 프로세싱 유닛은 제1 인풋 액티베이션(Act_In_1)과 웨이트 행렬(Weight)의 1열을 연산하여, 제1 아웃풋 엘 리먼트(ou1)를 계산할 수 있다. 이를 수학식으로 표현하면 아래와 같다. [수학식 1]"}
{"patent_id": "10-2022-0030139", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "수학식 1에서 표현되는 바와 같이, 프로세싱 유닛은 제1-1 인풋 엘리먼트(i11) 내지 제1-8 인풋 엘리먼트 (i18)와, 이들 각각의 엘리먼트와 대응되는 제1-1 웨이트 엘리먼트(w11) 내지 제8-1 웨이트 엘리먼트(w81)에 대 해 곱셈 및 덧셈 연산을 수행할 수 있다. 이때, 제1-1 인풋 엘리먼트(i11), 제1-2 인풋 엘리먼트(i12), 제1-4 인풋 엘리먼트(i14), 제1-5 인풋 엘리먼트(i15) 및 제1-6 인풋 엘리먼트(i16)는 각각 유효 엘리먼트이며, 유효 엘리먼트에 대한 곱셈 및 덧셈 연산은, 제1 아웃풋 엘리먼트(ou1) 을 결정하기 위한 유효 연산(Eff_op)이 될 수 있다. 다시 말해서, 는 연산 결과가 0이 아닌 값 을 갖는 유효 연산(Eff_op)이 될 수 있다. 한편, 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1- 8 인풋 엘리먼트(i18)는 비유효 엘리먼트이므로, 이와 대응되는 웨이트 엘리먼트와의 곱셈 및 덧셈 연산, 즉 은 연산 결과가 0의 값을 갖는 비유효 연산(Ineff_op)이 된다. 이러한 비유 효 연산(Ineff_op)은 제1 아웃풋 엘리먼트(ou1)를 결정하는데 아무런 영향을 미치지 않으나, 여전히 연산은 수 행되므로, 비유효 연산(Ineff_op)으로 인해 프로세싱 유닛의 리소스가 불필요하게 소비될 수 있다. 몇몇 실시예에 따르면, 인풋 액티베이션(Act_In)에 비유효 엘리먼트가 많을수록 비유효 연산(Ineff_op)은 증가 되고, 이에 따라 프로세싱 유닛의 리소스는 더 낭비될 수 있다. 이하 도 16 내지 도 34를 이용하여, 프로 세싱 유닛의 리소스의 불필요한 소비와 레이턴시를 감소시키기 위한 액티베이션 컴프레서 및 웨이트 컴프레서의 동작에 대해 설명한다. 도 16은 본 발명의 몇몇 실시예에 따른 뉴럴 코어의 구조를 구체적으로 설명하기 위한 도면이다. 도 16을 참조하면, 뉴럴 코어는 로컬 메모리, 액티베이션 버퍼, 프로세싱 유닛, 액티베이 션 컴프레서, 액티베이션 버퍼 스토어 유닛, 액티베이션 버퍼 로드 유닛, 로컬 메모리 로드 유 닛(111a) 및 로컬 메모리 스토어 유닛(111b)을 포함할 수 있다. 또한, 프로세싱 유닛은 텐서 유닛 및 벡터 유닛을 포함할 수 있다. 로컬 메모리, 액티베이션 버퍼, 프로세싱 유닛, 로컬 메모리 로드 유닛(111a) 및 로컬 메모리 스토어 유닛(111b)에 대한 설명은 전술하였으므로 구체적인 설명은 생략한다. 액티베이션 버퍼 스토어 유닛 및 액티베이션 버퍼 로드 유닛은 액티베이션 LSU에 포함된 구성일 수 있다. 액티베이션 버퍼 스토어 유닛은 액티베이션 버퍼에 대한 스토어 인스트럭션을 페치하고, 스 토어 인스트럭션을 이슈할 수 있다. 다시 말해서, 액티베이션 버퍼 스토어 유닛은 인풋 액티베이션 (Act_In)을 액티베이션 버퍼에 제공하고, 액티베이션 버퍼가 인풋 액티베이션(Act_In)을 저장하도록 제어할 수 있다. 예를 들어, 액티베이션 버퍼 스토어 유닛은 제1 인풋 액티베이션(Act_In_1)을 액티베이션 버퍼에 제공하고, 이를 저장하도록 제어할 수 있다. 또한, 액티베이션 버퍼 로드 유닛은 액티베이션 버퍼에 대한 로드 인스트럭션을 페치하고, 로드 인스 트럭션을 이슈할 수 있다. 다시 말해서, 액티베이션 버퍼 로드 유닛은 액티베이션 버퍼에 저장된 인 풋 액티베이션(Act_In)을 로드하여 액티베이션 컴프레서에 제공하도록 제어할 수 있다. 또한, 액티베이션 버퍼 로드 유닛은 액티베이션 컴프레서에서 생성된 압축 인풋 액티베이션을 프로세싱 유닛에 제 공하도록 제어할 수 있다. 액티베이션 컴프레서는 액티베이션 버퍼로부터 인풋 액티베이션(Act_In)을 제공받을 수 있다. 액티베 이션 컴프레서는 인풋 액티베이션(Act_In)을 이용하여 압축 인풋 액티베이션을 생성할 수 있다. 몇몇 실시 예에 따르면, 액티베이션 컴프레서는 인풋 액티베이션(Act_In)의 비유효 엘리먼트를, 다른 인풋 액티베이 션(Act_In)의 유효 엘리먼트로 치환함으로써 압축 인풋 액티베이션을 생성할 수 있다. 이에 대한 다양한 실시예 들을 설명하기 위해, 도 17 내지 도 32를 참조하여 설명한다. 도 17은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 도 17을 참조하면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1)과 제2 인풋 액티베이션 (Act_In_2)을 제공받을 수 있다. 제1 인풋 액티베이션(Act_In_1)은 유효 엘리먼트인 제1-1 인풋 엘리먼트(i11), 제1-2 인풋 엘리먼트(i12), 제1-4 인풋 엘리먼트(i14), 제1-5 인풋 엘리먼트(i15) 및 제1-6 인풋 엘리먼트 (i16)를 포함하고, 비유효 엘리먼트인 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1-8 인풋 엘 리먼트(i18)를 포함할 수 있다. 또한, 제2 인풋 액티베이션(Act_In_2)은 유효 엘리먼트인 제2-3 인풋 엘리먼트 (i23), 제2-7 인풋 엘리먼트(i27) 및 제2-8 인풋 엘리먼트(i28)를 포함하고, 비유효 엘리먼트인 제2-1 인풋 엘 리먼트(i21), 제2-2 인풋 엘리먼트(i22), 제2-4 인풋 엘리먼트(i24), 제2-5 인풋 엘리먼트(i25) 및 제2-6 인풋 엘리먼트(i26)를 포함할 수 있다. 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1)과 제2 인풋 액티베이션(Act_In_2)을 이용하여, 제1 압축 인풋 액티베이션(Cact_In_1)을 생성할 수 있다. 제1 압축 인풋 액티베이션(Cact_In_1)은 제1 인풋 로우 데이터(Cdata_row_1)와 제1 소스 인덱스 (Index_source_1)를 포함할 수 있다. 제1 인풋 로우 데이터(Cdata_row_1)는 제1 인풋 액티베이션(Act_In_1)의 적어도 일부와, 제2 인풋 액티베이션 (Act_In_2)의 적어도 일부를 포함할 수 있다. 몇몇 실시예에 따르면, 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트의 위치와, 제2 인풋 액티베이션(Act_In_2)의 유효 엘리먼트의 위치가 서로 대응되는 경우, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트에, 제1 인풋 액티베이션(Act_In_1)의 비유 효 엘리먼트의 위치와 대응되는 제2 인풋 액티베이션(Act_In_2)의 유효 엘리먼트를 푸시(push)하여, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 이때, 제1 엘리먼트를 제2 엘리먼트에 푸쉬한다는 것은, 제2 엘리 먼트를 제1 엘리먼트의 값으로 채우고, 제1 엘리먼트는 0 값으로 채우는 것을 의미한다. 예를 들어, 액티베이션 컴프레서는 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1-8 인풋 엘리먼트(i18)에 각각 제2-3 인풋 엘리먼트(i23), 제2-7 인풋 엘리먼트(i27) 및 제2-8 인풋 엘리먼트(i28)를 푸 시함으로써, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 다시 말해서, 제1 인풋 로우 데이터 (Cdata_row_1)의 제1-1 데이터 엘리먼트(d11), 제1-2 데이터 엘리먼트(d12), 제1-4 데이터 엘리먼트(d14), 제 1-5 데이터 엘리먼트(d15) 및 제1-6 데이터 엘리먼트(d16)는 각각 제1 인풋 액티베이션(Act_In_1)의 제1-1 인풋 엘리먼트(i11), 제1-2 인풋 엘리먼트(i12), 제1-4 인풋 엘리먼트(i14), 제1-5 인풋 엘리먼트(i15) 및 제1-6 인 풋 엘리먼트(i16)의 값과 동일할 수 있다. 또한, 제1 인풋 로우 데이터(Cdata_row_1)의 제1-3 데이터 엘리먼트 (d13), 제1-7 데이터 엘리먼트(d17) 및 제1-8 데이터 엘리먼트(d18)는 각각 제2 인풋 액티베이션(Act_In_2)의 제2-3 인풋 엘리먼트(i23), 제2-7 인풋 엘리먼트(i27) 및 제2-8 인풋 엘리먼트(i28)의 값과 동일할 수 있다. 몇몇 실시예에 따르면, 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트와 제2 인풋 액티베이션(Act_In_2)의 유효 엘리먼트의 위치는 서로 대응될 수 있다. 다시 말해서, 액티베이션 컴프레서는 제2 인풋 액티베이션 (Act_In_2)의 유효 엘리먼트를, 이와 대응되는 위치의 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트에 푸 시하여, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 예를 들어, 비유효 엘리먼트인 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1-8 인풋 엘리먼트 (i18)는 각각 제1 인풋 액티베이션(Act_In_1)의 3번째, 7번째, 8번째 엘리먼트이고, 유효 엘리먼트인 제2-3 인 풋 엘리먼트(i23), 제2-7 인풋 엘리먼트(i27) 및 제2-8 인풋 엘리먼트(i28)는 각각 제2 인풋 액티베이션 (Act_In_2)의 3번째, 7번째, 8번째 엘리먼트일 수 있다. 제1 소스 인덱스(Index_source_1)는 제1 인풋 로우 데이터(Cdata_row_1)의 각 엘리먼트의 출처에 대한 정보를 포함할 수 있다. 즉, 제1 소스 인덱스(Index_source_1)는 제1 인풋 로우 데이터(Cdata_row_1)의 각 엘리먼트들 이 어느 인풋 액티베이션(Act_In)의 값인지 나타내는 인덱스를 포함할 수 있다. 예를 들어, 제1 소스 인덱스(Index_source_1)는 제1-1 소스 엘리먼트(s11) 내지 제1-8 소스 엘리먼트(s18)를 포함할 수 있다. 제1-1 소스 엘리먼트(s11)는 제1-1 데이터 엘리먼트(d11)와 대응되고, 제1-2 소스 엘리먼트 (s12)는 제1-2 데이터 엘리먼트(d12)와 대응되고, 제1-3 소스 엘리먼트(s13)는 제1-3 데이터 엘리먼트(d13)와 대응되고, 제1-4 소스 엘리먼트(s14)는 제1-4 데이터 엘리먼트(d14)와 대응되고, 제1-5 소스 엘리먼트(s15)는 제1-5 데이터 엘리먼트(d15)와 대응되고, 제1-6 소스 엘리먼트(s16)는 제1-6 데이터 엘리먼트(d16)와 대응되고, 제1-7 소스 엘리먼트(s17)는 제1-7 데이터 엘리먼트(d17)와 대응되고, 제1-8 소스 엘리먼트(s18)는 제1-8 데이 터 엘리먼트(d18)와 대응될 수 있다. 제1-1 소스 엘리먼트(s11) 내지 제1-8 소스 엘리먼트(s18)는 각각 제1-1 데이터 엘리먼트(d11) 내지 제1-8 데이 터 엘리먼트(d18)의 출처에 대한 정보를 포함할 수 있다. 즉, 제1-1 소스 엘리먼트(s11)는 0으로 인덱싱되어, 제1-1 데이터 엘리먼트(d11)가 제1 인풋 액티베이션(Act_In_1)으로부터 기인한 것이라는 정보를 나타낼 수 있다. 마찬가지로, 제1-2 소스 엘리먼트(s12), 제1-4 소스 엘리먼트(s14), 제1-5 소스 엘리먼트(s15) 및 제1-6 소스 엘리먼트(s16)는 각각 0으로 인덱싱되어, 제1-2 데이터 엘리먼트(d12), 제1-4 데이터 엘리먼트(d14), 제1- 5 데이터 엘리먼트(d15) 및 제1-6 데이터 엘리먼트(d16)가 각각 제1 인풋 액티베이션(Act_In_1)으로부터 기인한 것이라는 정보를 나타낼 수 있다. 한편, 제1-3 소스 엘리먼트(s13), 제1-7 소스 엘리먼트(s17) 및 제1-8 소스 엘리먼트(s18)는 각각 1으로 인덱싱되어, 제1-3 데이터 엘리먼트(d13), 제1-7 데이터 엘리먼트(d17) 및 제1-8 데이터 엘리먼트(d18)가 각각 제2 인풋 액티베이션(Act_In_2)으로부터 기인한 것이라는 정보를 나타낼 수 있다. 다시 말해서, 제1 소스 인덱스(Index_source_1)는 제1 인풋 로우 데이터(Cdata_row_1)의 메타 데이터 (metadata)일 수 있다. 도 18을 더 참조하여, 프로세싱 유닛의 동작에 대해 설명한다. 도 18은 본 발명의 몇몇 실시예에 따른 프로세싱 유닛의 동작을 설명하기 위한 도면이다. 도 18을 더 참조하면, 액티베이션 버퍼 스토어 유닛은 액티베이션 버퍼에 제1 인풋 액티베이션 (Act_In_1) 및 제2 인풋 액티베이션(Act_In_2)을 저장할 수 있다. 액티베이션 버퍼 로드 유닛은 액티베이 션 버퍼에 저장된 제1 인풋 액티베이션(Act_In_1) 및 제2 인풋 액티베이션(Act_In_2)을 액티베이션 컴프레 서에 제공할 수 있다. 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 및 제2 인풋 액티베이 션(Act_In_2)을 이용하여 제1 압축 인풋 액티베이션(Cact_In_1)을 생성할 수 있다. 전술한 바와 같이, 제1 압축 인풋 액티베이션(Cact_In_1)은 제1 인풋 로우 데이터(Cdata_row_1)와 제1 소스 인덱스(Index_source_1)를 포함 할 수 있다. 액티베이션 버퍼 로드 유닛은 액티베이션 컴프레서에서 생성된 제1 압축 인풋 액티베이 션(Cact_In_1)을 프로세싱 유닛에 제공할 수 있다. 프로세싱 유닛의 텐서 유닛은 제1 인풋 로우 데이터(Cdata_row_1)와 제1 소스 인덱스 (Index_source_1)를 이용하여 2차원 연산을 수행할 수 있다. 예를 들어, 텐서 유닛은 제1 인풋 로우 데이 터(Cdata_row_1)와 웨이트 행렬(weight matrix)에 대한 행렬 연산을 수행할 수 있다. 텐서 유닛이 제1 인 풋 로우 데이터(Cdata_row_1)와 웨이트 행렬(weight matrix)에 대한 행렬 연산을 수행할 때, 텐서 유닛은 제1 소스 인덱스(Index_source_1)를 참고할 수 있다. 다시 말해서, 텐서 유닛은 제1 소스 인덱스 (Index_source_1)를 참고하여, 부분합(partial sum)을 수행할 엘리먼트들을 분리하여 벡터 유닛에 제공할 수 있다. 예를 들어, 텐서 유닛은 제1 소스 인덱스(Index_source_1)를 참고하여, 제1-1 데이터 엘리먼트(d11), 제 1-2 데이터 엘리먼트(d12), 제1-4 데이터 엘리먼트(d14), 제1-5 데이터 엘리먼트(d15) 및 제1-6 데이터 엘리먼 트(d16)와, 웨이트 행렬의 1, 2, 4, 5, 6번째 행을 연산하고 그 결과를 부분합하여, 벡터 유닛의 제1 레지 스터에 제공할 수 있다. 제1-1 데이터 엘리먼트(d11), 제1-2 데이터 엘리먼트(d12), 제1-4 데이터 엘리먼트 (d14), 제1-5 데이터 엘리먼트(d15) 및 제1-6 데이터 엘리먼트(d16)와, 웨이트 행렬의 1, 2, 4, 5, 6번째 행에 대한 연산 결과의 부분합을 편의상 제1 부분합으로 명명한다. 또한, 텐서 유닛은 제1 소스 인덱스 (Index_source_1)를 참고하여, 제1-3 데이터 엘리먼트(d13), 제1-7 데이터 엘리먼트(d17) 및 제1-8 데이터 엘 리먼트(d18)와, 웨이트 행렬의 3, 7, 8번째 행을 연산하고 그 결과를 부분합하여, 벡터 유닛의 제2 레지스 터에 제공할 수 있다. 제1-3 데이터 엘리먼트(d13), 제1-7 데이터 엘리먼트(d17) 및 제1-8 데이터 엘리먼트 (d18)와, 웨이트 행렬의 3, 7, 8번째 행에 대한 연산 결과의 부분합을 편의상 제2 부분합으로 명명한다. 벡터 유닛은 로컬 메모리 로드 유닛(111a)을 통해 제1 아웃풋 부분합(PS_Out_1)과 제2 아웃풋 부분합 (PS_Out_2)을 제공받을 수 있다. 제1 아웃풋 부분합(PS_Out_1)은 벡터 유닛의 제1 레지스터에 제공되고, 제2 아웃풋 부분합(PS_Out_2)은 벡터 유닛의 제2 레지스터에 제공될 수 있다. 제1 아웃풋 부분합 (PS_Out_1) 및 제2 아웃풋 부분합(PS_Out_2)은 각각 로컬 메모리에 저장되어 있던 값일 수 있다. 제1 아웃 풋 부분합(PS_Out_1) 및 제2 아웃풋 부분합(PS_Out_2)은 각각 이전 사이클(cycle)의 연산 결과일 수도 있고, 다 른 뉴럴 코어에서 제공받은 연산 결과일 수도 있다. 벡터 유닛은 제1 아웃풋 부분합(PS_Out_1)과 제1 부분합을 연산하여, 제1 아웃풋 액티베이션(Act_Out_1)을 생성할 수 있다. 또한, 벡터 유닛은 제2 아웃풋 부분합(PS_Out_2)과 제2 부분합을 연산하여, 제2 아웃풋 액티베이션(Act_Out_2)을 생성할 수 있다. 제1 아웃풋 액티베이션(Act_Out_1)과 제2 아웃풋 액티베이션(Act_Out_2)은 로컬 메모리 스토어 유닛(111b)을 통해 순차적으 로 로컬 메모리에 제공될 수 있다. 도 17 및 도 18은 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트의 위치와, 제2 인풋 액티베이션(Act_In_2)의 유효 엘리먼트의 위치가 각각 대응되고, 제1 인풋 액티베이션 (Act_In_1)의 비유효 엘리먼트의 개수가 제2 인풋 액티베이션(Act_In_2)의 유효 엘리먼트의 개수보다 많거나 같 은 경우를 도시한다. 이하에서 제1 인풋 액티베이션(Act_In_1)과 제2 인풋 액티베이션(Act_In_2)의 형태에 따라 변형가능한 다양한 실시예들을 설명한다. 도 19는 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 이하에서는 설 명의 편의를 위해, 전술한 내용과 동일하거나 유사한 내용은 생략하거나 간단히 설명한다. 도 19를 참조하면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션 (Act_In_3)을 제공받을 수 있다. 제1 인풋 액티베이션(Act_In_1)은 유효 엘리먼트인 제1-1 인풋 엘리먼트(i11), 제1-2 인풋 엘리먼트(i12), 제1-4 인풋 엘리먼트(i14), 제1-5 인풋 엘리먼트(i15) 및 제1-6 인풋 엘리먼트 (i16)를 포함하고, 비유효 엘리먼트인 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1-8 인풋 엘 리먼트(i18)를 포함할 수 있다. 또한, 제2 인풋 액티베이션(Act_In_2)은 유효 엘리먼트인 제2-2 인풋 엘리먼트 (i22), 제2-3 인풋 엘리먼트(i23), 제2-6 인풋 엘리먼트(i26), 제2-7 인풋 엘리먼트(i27) 및 제2-8 인풋 엘리 먼트(i28)를 포함하고, 비유효 엘리먼트인 제2-1 인풋 엘리먼트(i21), 제2-4 인풋 엘리먼트(i24) 및 제2-5 인풋 엘리먼트(i25)를 포함할 수 있다. 또한, 제3 인풋 액티베이션(Act_In_3)은 유효 엘리먼트인 제3-3 인풋 엘리먼 트(i33), 제3-4 인풋 엘리먼트(i34) 및 제3-7 인풋 엘리먼트(i37)를 포함하고, 비유효 엘리먼트인 제3-1 인풋 엘리먼트(i31), 제3-2 인풋 엘리먼트(i32), 제3-5 인풋 엘리먼트(i35), 제3-6 인풋 엘리먼트(i36) 및 제3-8 인 풋 엘리먼트(i38)를 포함할 수 있다. 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)을 이용하여, 제1 압축 인풋 액티베이션(Cact_In_1) 및 제2 압축 인풋 액티베이션(Cact_In_2)을 생성할 수 있다. 제1 압축 인 풋 액티베이션(Cact_In_1)은 제1 인풋 로우 데이터(Cdata_row_1)와 제1 소스 인덱스(Index_source_1)를 포함하 고, 제2 압축 인풋 액티베이션(Cact_In_2)은 제2 인풋 로우 데이터(Cdata_row_2)와 제2 소스 인덱스(Index_source_2)를 포함할 수 있다. 제1 인풋 로우 데이터(Cdata_row_1)는 제1 인풋 액티베이션(Act_In_1)의 적어도 일부와, 제2 인풋 액티베이션 (Act_In_2)의 적어도 일부를 포함할 수 있다. 또한, 제2 인풋 로우 데이터(Cdata_row_2)는 제2 인풋 액티베이션 (Act_In_2)의 적어도 일부와 제3 인풋 액티베이션(Act_In_3)의 적어도 일부를 포함할 수 있다. 몇몇 실시예에 따르면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트에, 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트의 위치와 대응되는 제2 인풋 액티베이션(Act_In_2)의 유효 엘리 먼트를 푸시함으로써, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 이어서, 액티베이션 컴프레서 는 푸시된 제2 인풋 액티베이션의 비유효 엘리먼트에, 해당 비유효 엘리먼트의 위치와 대응되는 제3 인풋 액티베이션(Act_In_3)의 유효 엘리먼트를 푸시함으로써, 제2 인풋 로우 데이터(Cdata_row_2)를 생성할 수 있다. 이때, 푸시된 인풋 액티베이션은 인풋 액티베이션의 인풋 엘리먼트의 적어도 일부가 다른 인풋 액티베이션으로 푸시된 상태의 인풋 액티베이션을 의미한다. 예를 들어, 액티베이션 컴프레서는 제2-3 인풋 엘리먼트(i23), 제2-7 인풋 엘리먼트(i27) 및 제2-8 인풋 엘리먼트(i28)를 각각 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1-8 인풋 엘리먼트(i18)에 푸 시함으로써, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 또한, 액티베이션 컴프레서는 제3-3 인풋 엘리먼트(i33), 제3-4 인풋 엘리먼트(i34) 및 제3-7 인풋 엘리먼트(i37)를 각각 제2-3 인풋 엘리먼트 (i23), 제2-4 인풋 엘리먼트(i24) 및 제2-7 인풋 엘리먼트(i27)에 푸시함으로써, 제2 인풋 로우 데이터 (Cdata_row_2)를 생성할 수 있다. 제1 소스 인덱스(Index_source_1)는 제1 인풋 로우 데이터(Cdata_row_1)의 각 엘리먼트의 출처에 대한 정보를 포함하고, 제2 소스 인덱스(Index_source_2)는 제2 인풋 로우 데이터(Cdata_row_2)의 각 엘리먼트의 출처에 대 한 정보를 포함할 수 있다. 예를 들어, 제1-1 소스 엘리먼트(s11), 제1-2 소스 엘리먼트(s12), 제1-4 소스 엘리먼트(s14), 제1-5 소스 엘리 먼트(s15) 및 제1-6 소스 엘리먼트(s16)는 0으로 인덱싱되어, 제1-1 데이터 엘리먼트(d11), 제1-2 데이터 엘리 먼트(d12), 제1-4 데이터 엘리먼트(d14), 제1-5 데이터 엘리먼트(d15) 및 제1-6 데이터 엘리먼트(d16)가 제1 인 풋 액티베이션(Act_In_1)으로부터 기인한 것이라는 정보를 나타낼 수 있다. 또한, 제1-3 소스 엘리먼트(s13), 제1-7 소스 엘리먼트(s17) 및 제1-8 소스 엘리먼트(s18)는 각각 1으로 인덱싱되어, 제1-3 데이터 엘리먼트 (d13), 제1-7 데이터 엘리먼트(d17) 및 제1-8 데이터 엘리먼트(d18)가 각각 제2 인풋 액티베이션(Act_In_2)으로 부터 기인한 것이라는 정보를 나타낼 수 있다. 또한, 제2-2 소스 엘리먼트(s22) 및 제2-6 소스 엘리먼트(s26)는 각각 0으로 인덱싱되어, 제2-2 데이터 엘리먼트(d22) 및 제2-6 데이터 엘리먼트(d26)가 제2 인풋 액티베이션 (Act_In_2)으로부터 기인한 것이라는 정보를 나타낼 수 있다. 또한, 제2-3 소스 엘리먼트(s23), 제2-4 소스 엘 리먼트(s24) 및 제2-7 소스 엘리먼트(s27)는 각각 1로 인덱싱되어, 제2-3 데이터 엘리먼트(d23), 제2-4 데이터 엘리먼트(d24) 및 제2-7 데이터 엘리먼트(d27)가 제3 인풋 액티베이션(Act_In_3)으로부터 기인한 것이라는 정보 를 나타낼 수 있다. 이때, 제2-1 소스 엘리먼트(s21), 제2-5 소스 엘리먼트(s25) 및 제2-8 소스 엘리먼트(s28) 는 1로 인덱싱 되어 있으나, 실시예들이 이에 제한되지는 않는다. 제2-1 데이터 엘리먼트(d21), 제2-5 데이터 엘리먼트(d25) 및 제2-8 데이터 엘리먼트(d28)가 비유효 엘리먼트이므로(연산 결과 0이므로), 제2-1 소스 엘리 먼트(s21), 제2-5 소스 엘리먼트(s25) 및 제2-8 소스 엘리먼트(s28)의 인덱싱은 중요하지 않을 수 있다. 제1 소스 인덱스(Index_source_1) 및 제2 소스 인덱스(Index_source_2)는 각각 제1 인풋 로우 데이터 (Cdata_row_1) 및 제2 인풋 로우 데이터(Cdata_row_2)의 메타 데이터(metadata)일 수 있다. 도 20을 더 참조하 여, 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 압축 과정을 순차적으로 설명한다. 도 20은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 압축 과정을 설명하기 위한 도면이다. 도 20을 더 참조하면, 액티베이션 컴프레서의 메인 로우(Main_row)에 제1 인풋 액티베이션(Act_In_1)이 제 공되고, 서브 로우(Sub_row)에 제2 인풋 액티베이션(Act_In_2)이 제공될 수 있다. 메인 로우(Main_row)는 압축 인풋 액티베이션의 베이스가 되는 인풋 액티베이션이 제공되고, 서브 로우(Sub_row)는 메인 로우(Main_row)로 푸시할 인풋 엘리먼트를 포함하는 인풋 액티베이션이 제공될 수 있다. 다시 말해서, 액티베이션 컴프레서 는 서브 로우(Sub_row)의 유효 엘리먼트를 메인 로우(Main_row)의 비유효 엘리먼트에 푸쉬하여 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 액티베이션 컴프레서는 제1 인풋 로우 데이터(Cdata_row_1)의 데이터 엘리먼트 각각에 대한 출처 정보를 포함하는 제1 소스 인덱스(Index_source_1)를 생성할 수 있다. 액티베이션 컴프레서는 제1 인풋 로우 데이터(Cdata_row_1)와 제1 소스 인덱스(Index_source_1)를 포함하는 제1 압축 인풋 액티베이션(Cact_In_1)을 프로 세싱 유닛에 제공할 수 있다. 제1 압축 인풋 액티베이션(Cact_In_1)이 프로세싱 유닛에 제공되면, 액티베이션 컴프레서는 서브 로 우(Sub_row)의 데이터 엘리먼트를 메인 로우(Main_row)에 푸시할 수 있다. 이어서, 서브 로우(Sub_row)에는 제3 인풋 액티베이션(Act_In_3)이 제공될 수 있다. 앞서 설명한 것과 유사하게, 액티베이션 컴프레서는 메인 로우(Main_row)의 데이터 엘리먼트와 서브 로우(Sub_row)의 데이터 엘리먼트를 결합하여, 제2 인풋 로우 데이터 (Cdata_row_2)를 생성하고, 제2 인풋 로우 데이터(Cdata_row_2)에 대한 메타 데이터인 제2 소스 인덱스 (Index_source_2)를 생성할 수 있다. 도 21 및 도 22는 본 발명의 몇몇 실시예에 따른 프로세싱 유닛의 동작을 설명하기 위한 도면이다. 도 21을 더 참조하면, 액티베이션 버퍼 스토어 유닛은 액티베이션 버퍼에 제1 인풋 액티베이션 (Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)을 저장할 수 있다. 액티베이션 버퍼 로드 유닛은 액티베 이션 버퍼에 저장된 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)을 액티베이션 컴 프레서에 제공할 수 있다. 액티베이션 컴프레서는 우선 제1 인풋 액티베이션(Act_In_1) 및 제2 인풋 액티베이션(Act_In_2)을 이용하 여 제1 압축 인풋 액티베이션(Cact_In_1)을 생성할 수 있다. 프로세싱 유닛의 텐서 유닛은 제1 인풋 로우 데이터(Cdata_row_1)와 제1 소스 인덱스 (Index_source_1)를 이용하여 2차원 연산을 수행할 수 있다. 예를 들어, 텐서 유닛은 제1 소스 인덱스 (Index_source_1)를 참고하여, 제1-1 데이터 엘리먼트(d11), 제1-2 데이터 엘리먼트(d12), 제1-4 데이터 엘리 먼트(d14), 제1-5 데이터 엘리먼트(d15) 및 제1-6 데이터 엘리먼트(d16)에 대한 연산 결과를 벡터 유닛의 제1 레지스터에 제공할 수 있다. 또한, 텐서 유닛은 제1 소스 인덱스(Index_source_1)를 참고하여, 제1-3 데이터 엘리먼트(d13), 제1-7 데이터 엘리먼트(d17) 및 제1-8 데이터 엘리먼트(d18)에 대한 연산 결과를 벡터 유닛의 제2 레지스터에 제공할 수 있다. 벡터 유닛은 로컬 메모리 로드 유닛(111a)을 통해 제1 아웃풋 부분합(PS_Out_1)과 제2 아웃풋 부분합 (PS_Out_2)을 제공받을 수 있다. 제1 아웃풋 부분합(PS_Out_1)은 벡터 유닛의 제1 레지스터에 제공되고, 제2 아웃풋 부분합(PS_Out_2)은 벡터 유닛의 제2 레지스터에 제공될 수 있다. 벡터 유닛은 제1 레지 스터에 제공된 데이터 엘리먼트에 대한 연산 결과와 제1 아웃풋 부분합(PS_Out_1)을 연산하여, 제1 아웃풋 액티 베이션(Act_Out_1)을 생성할 수 있다. 로컬 메모리 스토어 유닛(111b)은 생성된 제1 아웃풋 액티베이션 (Act_Out_1)을 로컬 메모리에 제공할 수 있다. 이어서, 벡터 유닛은 제2 레지스터에 제공된 데이터 엘리먼트에 대한 연산 결과와 제2 아웃풋 부분합(PS_Out_2)을 연산하고, 이를 제1 레지스터로 제공(푸시)할 수 있다. 이때, 연산 결과를 제1 레지스터로 제공하는 것은 설명의 편의를 위한 것이며, 실시예들이 이에 제한되는 것은 아니다. 본 발명의 기술 분야에서 통상의 지식을 가진 자는 본 발명의 범위를 벗어나지 않고 다양한 변형 예를 구현할 수 있을 것이다. 도 22를 더 참조하면, 액티베이션 컴프레서는 제2 인풋 액티베이션(Act_In_2)의 적어도 일부와, 제3 인풋 액티베이션(Act_In_3)을 이용하여 제2 압축 인풋 액티베이션(Cact_In_2)을 생성할 수 있다. 프로세싱 유닛의 텐서 유닛은 제2 인풋 로우 데이터(Cdata_row_2)와 제2 소스 인덱스 (Index_source_2)를 이용하여 2차원 연산을 수행할 수 있다. 예를 들어, 텐서 유닛은 제2 소스 인덱스 (Index_source_2)를 참고하여, 제2-2 데이터 엘리먼트(d22) 및 제2-6 데이터 엘리먼트(d26)에 대한 연산 결과를 벡터 유닛의 제1 레지스터에 제공할 수 있다. 또한, 텐서 유닛은 제2 소스 인덱스(Index_source_2)를 참고하여, 제2-1 데이터 엘리먼트(d21), 제2-3 데이터 엘리먼트(d23), 제2-4 데이터 엘리먼트(d24), 제2-5 데이 터 엘리먼트(d25), 제2-7 데이터 엘리먼트(d27) 및 제2-8 데이터 엘리먼트(d28)에 대한 연산 결과를 벡터 유닛 의 제2 레지스터에 제공할 수 있다. 벡터 유닛은 로컬 메모리 로드 유닛(111a)을 통해 제3 아웃풋 부분합(PS_Out_3)을 제공받을 수 있다. 제3 아웃풋 부분합(PS_Out_3)은 벡터 유닛의 제2 레지스터에 제공될 수 있다. 벡터 유닛은 제1 레지스터 에 저장되어 있던 연산 결과와, 제2-2 데이터 엘리먼트(d22) 및 제2-6 데이터 엘리먼트(d26)에 대한 연산 결과 를 연산하여, 제2 아웃풋 액티베이션(Act_Out_2)을 생성할 수 있다. 로컬 메모리 스토어 유닛(111b)은 생성된 제2 아웃풋 액티베이션(Act_Out_2)을 로컬 메모리에 제공할 수 있다. 이어서, 벡터 유닛은 제2 레지 스터에 제공된 데이터 엘리먼트에 대한 연산 결과와, 제3 아웃풋 부분합(PS_Out_3)을 연산하고, 이를 제1 레지스터로 푸시할 수 있다. 상기 과정들은 인풋 액티베이션(Act_In)이 모두 연산될 때까지 반복될 수 있다. 도 23은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서에서 병목 현상이 발생되는 예시를 설명하기 위한 도면이다. 도 23을 더 참조하면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션 (Act_In_3)을 제공받을 수 있다. 제1 인풋 액티베이션(Act_In_1)은 유효 엘리먼트인 제1-1 인풋 엘리먼트(i11), 제1-2 인풋 엘리먼트(i12), 제1-4 인풋 엘리먼트(i14), 제1-5 인풋 엘리먼트(i15) 및 제1-6 인풋 엘리먼트 (i16)를 포함하고, 비유효 엘리먼트인 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1-8 인풋 엘 리먼트(i18)를 포함할 수 있다. 또한, 제2 인풋 액티베이션(Act_In_2)은 유효 엘리먼트인 제2-2 인풋 엘리먼트 (i22), 제2-3 인풋 엘리먼트(i23), 제2-6 인풋 엘리먼트(i26), 제2-7 인풋 엘리먼트(i27) 및 제2-8 인풋 엘리 먼트(i28)를 포함하고, 비유효 엘리먼트인 제2-1 인풋 엘리먼트(i21), 제2-4 인풋 엘리먼트(i24) 및 제2-5 인풋 엘리먼트(i25)를 포함할 수 있다. 또한, 제3 인풋 액티베이션(Act_In_3)은 유효 엘리먼트인 제3-2 인풋 엘리먼 트(i32), 제3-3 인풋 엘리먼트(i33), 제3-4 인풋 엘리먼트(i34), 제3-6 인풋 엘리먼트(i36) 및 제3-7 인풋 엘 리먼트(i37)를 포함하고, 비유효 엘리먼트인 제3-1 인풋 엘리먼트(i31), 제3-5 인풋 엘리먼트(i35) 및 제3-8 인 풋 엘리먼트(i38)를 포함할 수 있다. 액티베이션 컴프레서는 전술한 인풋 액티베이션 압축 동작 과정을 통해, 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)을 압축함으로써, 제1 인풋 로우 데이터(Cdata_row_1) 내지 제3 인풋 로우 데이터(Cdata_row_3)를 생성할 수 있다. 예를 들어, 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트와 제2 인풋 액티베이션(Act_In_2)의 유효 엘리먼트의 위치가 서로 대응되는 경우, 액티베이션 컴프레서는 제2 인 풋 액티베이션(Act_In_2)의 유효 엘리먼트를 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트에 푸시함으로써, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 한편, 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)의 특정 위치의 엘리먼트가 모두 유 효 엘리먼트인 경우, 액티베이션 컴프레서는 특정 위치의 엘리먼트를 다른 인풋 액티베이션의 엘리먼트에 푸시할 수 없는 경우가 발생될 수 있다. 다시 말해서, 액티베이션 컴프레서가 압축 동작을 통해 생성한 압 축 인풋 액티베이션의 개수가, 액티베이션 컴프레서에 제공된 인풋 액티베이션의 개수와 동일한 경우가 발 생될 수 있다. 예를 들어, 제1-2 인풋 엘리먼트(i12), 제2-2 인풋 엘리먼트(i22), 제3-2 인풋 엘리먼트(i32), 제1-6 인풋 엘리 먼트(i16), 제2-6 인풋 엘리먼트(i26) 및 제3-6 인풋 엘리먼트(i36)는 모두 유효 엘리먼트일 수 있다. 액티베이 션 컴프레서는 제1 인풋 액티베이션(Act_In_1)과 제2 인풋 액티베이션(Act_In_2)을 이용하여, 제1 인풋 로 우 데이터(Cdata_row_1)를 생성할 수 있으나, 제2-2 인풋 엘리먼트(i22) 및 제2-6 인풋 엘리먼트(i26)는 각각 제1-2 인풋 엘리먼트(i12) 및 제1-6 인풋 엘리먼트(i16)에 푸시될 수 없다. 따라서, 제2-2 인풋 엘리먼트(i22) 와 제2-6 인풋 엘리먼트(i26)는 제2 인풋 로우 데이터(Cdata_row_2)에 포함되게 된다. 마찬가지로, 액티베이션 컴프레서는 제3-2 인풋 엘리먼트(i32)와 제3-6 인풋 엘리먼트(i36)를 각각 제2-2 인풋 엘리먼트(i22)와 제 2-6 인풋 엘리먼트(i26)에 푸시할 수 없다. 따라서, 제3-2 인풋 엘리먼트(i32)와 제3-6 인풋 엘리먼트(i36)는 제3 인풋 로우 데이터(Cdata_row_3)에 포함되게 된다. 이와 같이, 액티베이션 컴프레서를 통해 압축 동작 을 수행하였음에도 불구하고, 액티베이션 컴프레서에 제공되는 인풋 액티베이션의 개수와 액티베이션 컴프 레서에서 출력되는 압축 인풋 액티베이션의 개수는 3개로 동일한 결과가 발생될 수 있다. 이는 결국, 액티 베이션 컴프레서가 인풋 액티베이션(Act_In)을 압축하지 못한 비효율이 발생됨을 의미하며, 이러한 문제를 해결하기 위한 몇몇 실시예에 대해 아래에서 설명한다. 도 24는 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 도 24를 더 참조하면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션 (Act_In_3)을 제공받을 수 있다. 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)은 도 23 에서 설명한 것과 동일하다고 가정한다. 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)을 이용하여, 제1 압축 인풋 액티베이션(Cact_In_1) 및 제2 압축 인풋 액티베이션(Cact_In_2)을 생성할 수 있다. 제1 압축 인풋 액티베이션(Cact_In_1)은 제1 인풋 로우 데이터(Cdata_row_1), 제1 소스 인덱스 (Index_source_1) 및 제1 오퍼레이션 인덱스(Index_op_1)를 포함할 수 있다. 제1 오퍼레이션 인덱스 (Index_op_1)는 제1 인풋 로우 데이터(Cdata_row_1)의 연산에 대한 정보를 포함할 수 있다. 다시 말해서, 제1오퍼레이션 인덱스(Index_op_1)는 제1 인풋 로우 데이터(Cdata_row_1)에 포함된 데이터 엘리먼트 각각이 연산될 웨이트에 대한 정보를 포함할 수 있다. 즉, 제1 오퍼레이션 인덱스(Index_op_1)는 제1 인풋 로우 데이터 (Cdata_row_1)에 포함된 데이터 엘리먼트 각각이 몇번째 웨이트와 연산되어야 하는지에 대한 정보를 포함할 수 있다. 제2 압축 인풋 액티베이션(Cact_In_2)은 제2 인풋 로우 데이터(Cdata_row_2), 제2 소스 인덱스 (Index_source_2) 및 제2 오퍼레이션 인덱스(Index_op_2)를 포함할 수 있다. 마찬가지로, 제2 오퍼레이션 인덱 스(Index_op_2)는 제2 인풋 로우 데이터(Cdata_row_2)의 연산에 대한 정보를 포함할 수 있다. 즉, 제2 오퍼레이 션 인덱스(Index_op_2)는 제2 인풋 로우 데이터(Cdata_row_2)에 포함된 데이터 엘리먼트 각각이 연산될 웨이트 에 대한 정보를 포함할 수 있다. 몇몇 실시예에 따르면, 제1 오퍼레이션 인덱스(Index_op_1)는 제1-1 오퍼레이션 엘리먼트(o11) 내지 제1-8 오퍼 레이션 엘리먼트(o18)를 포함할 수 있다. 제1-1 오퍼레이션 엘리먼트(o11) 내지 제1-8 오퍼레이션 엘리먼트 (o18)는 각각 제1-1 데이터 엘리먼트(d11) 내지 제1-8 데이터 엘리먼트(d18)가 연산될 웨이트의 위치를 나타낼 수 있다. 예를 들어, 제1-1 오퍼레이션 엘리먼트(o11)가 0인 경우, 프로세싱 유닛은 제1-1 데이터 엘리먼 트(d11)를 웨이트 행렬의 첫번째 행의 웨이트와 연산할 수 있다. 몇몇 실시예에 따르면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트에, 해당 비유효 엘리먼트의 위치와 대응되는 제2 인풋 액티베이션(Act_In_2)의 유효 엘리먼트를 푸시함으로써, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 액티베이션 컴프레서는 푸시된 제2 인풋 액티베이션의 비유효 엘리먼트에, 해당 비유효 엘리먼트의 위치와 대응되는 제3 인풋 액티베이션(Act_In_3)의 유효 엘리먼트를 푸시할 수 있다. 만약, 제3 인풋 액티베이션 (Act_In_3)에 여전히 푸시되지 않은 유효 엘리먼트가 존재하는 경우, 액티베이션 컴프레서는 푸시된 제2 인풋 액티베이션에 비유효 엘리먼트가 존재하는지 판단한 후, 제3 인풋 액티베이션(Act_In_3)의 유효 엘리먼트 를 해당 비유효 엘리먼트에 푸시할 수 있다. 예를 들어, 액티베이션 컴프레서는 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1-8 인풋 엘리먼트(i18)에 각각 제2-3 인풋 엘리먼트(i23), 제2-7 인풋 엘리먼트(i27) 및 제2-8 인풋 엘리먼트(i28)를 푸 시함으로써, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 또한, 액티베이션 컴프레서는 제2-3 인풋 엘리먼트(i23), 제2-4 인풋 엘리먼트(i24) 및 제2-7 인풋 엘리먼트(i27)에 각각 제3-3 인풋 엘리먼트 (i33), 제3-4 인풋 엘리먼트(i34) 및 제3-7 인풋 엘리먼트(i37)를 푸시하고, 제2-1 인풋 엘리먼트(i21)에 제3- 2 인풋 엘리먼트(i32)를 푸시하고, 제2-5 인풋 엘리먼트(i25)에 제3-6 인풋 엘리먼트(i36)를 푸시하여 제2 인풋 로우 데이터(Cdata_row_2)를 생성할 수 있다. 액티베이션 컴프레서는 제1 인풋 로우 데이터(Cdata_row_1) 및 제2 인풋 로우 데이터(Cdata_row_2)를 생성 할 때, 제1 소스 인덱스(Index_source_1), 제2 소스 인덱스(Index_source_2), 제1 오퍼레이션 인덱스 (Index_op_1) 및 제2 오퍼레이션 인덱스(Index_op_2)를 생성할 수 있다. 프로세싱 유닛은 제1 오퍼레이션 인덱스(Index_op_1) 및 제2 오퍼레이션 인덱스(Index_op_2)를 참조하여, 제1 인풋 로우 데이터(Cdata_row_1) 및 제2 인풋 로우 데이터(Cdata_row_2)를 연산하기 때문에, 푸시되는 유효 엘리먼트의 위치가 변하더라도, 연산 결과에는 차이가 없을 수 있다. 제1 소스 인덱스(Index_source_1) 및 제1 오퍼레이션 인덱스(Index_op_1)는 제1 인풋 로우 데이터 (Cdata_row_1)의 메타 데이터(metadata)일 수 있다. 마찬가지로, 제2 소스 인덱스(Index_source_2) 및 제2 오 퍼레이션 인덱스(Index_op_2)는 제2 인풋 로우 데이터(Cdata_row_2)의 메타 데이터(metadata)일 수 있다. 도 25를 더 참조하여, 본 발명의 몇몇 실시예에 따른 프로세싱 유닛의 동작에 대해 설명한다. 도 25는 본 발명의 몇몇 실시예에 따른 프로세싱 유닛의 동작을 설명하기 위한 도면이다. 설명의 편의상 제1 압 축 인풋 액티베이션을 연산하는 과정은 생략한다. 도 25를 더 참조하면, 액티베이션 컴프레서는 제2 인풋 액티베이션(Act_In_2)의 적어도 일부와, 제3 인풋 액티베이션(Act_In_3)을 이용하여 제2 압축 인풋 액티베이션(Cact_In_2)을 생성할 수 있다. 프로세싱 유닛의 텐서 유닛은 제2 인풋 로우 데이터(Cdata_row_2), 제2 소스 인덱스 (Index_source_2) 및 제2 오퍼레이션 인덱스(Index_op_2)를 이용하여 2차원 연산을 수행할 수 있다. 예를 들어, 텐서 유닛은 제2 소스 인덱스(Index_source_2) 및 제2 오퍼레이션 인덱스(Index_op_2)를 참고하여, 제2-2 데이터 엘리먼트(d22)를 웨이트 행렬의 두번째 행의 웨이트와 연산하고, 제2-6 데이터 엘리먼트(d26)를 웨이트행렬의 여섯번째 행의 웨이트와 연산하여 그 연산 결과들을 부분합하여 벡터 유닛의 제1 레지스터에 제공 할 수 있다. 또한, 텐서 유닛은 제2 소스 인덱스(Index_source_2) 및 제2 오퍼레이션 인덱스(Index_op_2)를 참고하여, 제2-1 데이터 엘리먼트(d21)를 웨이트 행렬의 두번째 행의 웨이트와 연산하고, 제2-3 데이터 엘리먼트(d23)를 웨이트 행렬의 세번째 행의 웨이트와 연산하고, 제2-4 데이터 엘리먼트(d24)를 웨이트 행렬의 네번째 행의 웨이 트와 연산하고, 제2-5 데이터 엘리먼트(d25)를 웨이트 행렬의 여섯번째 행의 웨이트와 연산하고, 제2-7 데이터 엘리먼트(d27)를 웨이트 행렬의 일곱번째 행의 웨이트와 연산하고, 제2-8 데이터 엘리먼트(d28)를 웨이트 행렬 의 여덟번째 행의 웨이트와 연산하고, 그 연산 결과들을 부분합하여 벡터 유닛의 제2 레지스터에 제공할 수 있다. 벡터 유닛은 제1 레지스터에 저장되어 있던 연산 결과와, 제2-2 데이터 엘리먼트(d22) 및 제2-6 데이터 엘 리먼트(d26)에 대한 연산 결과를 연산하여, 제2 아웃풋 액티베이션(Act_Out_2)을 생성할 수 있다. 로컬 메모리 스토어 유닛(111b)은 생성된 제2 아웃풋 액티베이션(Act_Out_2)을 로컬 메모리에 제공할 수 있다. 이어서, 벡터 유닛은 제2 레지스터에 제공된 데이터 엘리먼트에 대한 연산 결과와, 제3 아웃풋 부분합(PS_Out_3)을 연산하고, 이를 제1 레지스터로 푸시할 수 있다. 상기 과정들은 인풋 액티베이션(Act_In)이 모두 연산될 때까지 반복될 수 있다. 도 26은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 도 26을 참조하면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션 (Act_In_3)을 제공받을 수 있다. 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)은 도 23 에서 설명한 것과 동일하다고 가정한다. 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 내지 제3 인풋 액티베이션(Act_In_3)을 이용하여, 제1 압축 인풋 액티베이션(Cact_In_1) 및 제2 압축 인풋 액티베이션(Cact_In_2)을 생성할 수 있다. 제1 압축 인 풋 액티베이션(Cact_In_1)은 제1 인풋 로우 데이터(Cdata_row_1), 제1 소스 인덱스(Index_source_1) 및 제1 오 퍼레이션 인덱스(Index_op_1)를 포함하고, 제2 압축 인풋 액티베이션(Cact_In_2)은 제2 인풋 로우 데이터 (Cdata_row_2), 제2 소스 인덱스(Index_source_2) 및 제2 오퍼레이션 인덱스(Index_op_2)를 포함할 수 있다. 몇몇 실시예에 따르면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1)의 비유효 엘리먼트에, 제2 인풋 액티베이션(Act_In_2)의 유효 엘리먼트를 순차적으로 푸시함으로써, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 이와 유사하게, 액티베이션 컴프레서는 푸시된 제2 인풋 액티베이션의 비유효 엘리먼트에, 제3 인풋 액티 베이션(Act_In_3)의 유효 엘리먼트를 순차적으로 푸시하여, 제2 인풋 로우 데이터(Cdata_row_2)를 생성할 수 있 다. 예를 들어, 액티베이션 컴프레서는 제1-3 인풋 엘리먼트(i13), 제1-7 인풋 엘리먼트(i17) 및 제1-8 인풋 엘리먼트(i18)에 각각 제2-2 인풋 엘리먼트(i22), 제2-3 인풋 엘리먼트(i23) 및 제2-6 인풋 엘리먼트(i26)를 순 차적으로 푸시함으로써, 제1 인풋 로우 데이터(Cdata_row_1)를 생성할 수 있다. 또한, 액티베이션 컴프레서 는 제2-1 인풋 엘리먼트(i21) 내지 제2-5 인풋 엘리먼트(i25)에 각각 제3-2 인풋 엘리먼트(i32), 제3-3 인풋 엘리먼트(i33), 제3-4 인풋 엘리먼트(i34), 제3-6 인풋 엘리먼트(i36) 및 제3-7 인풋 엘리먼트(i37)를 순 차적으로 푸시하여, 제2 인풋 로우 데이터(Cdata_row_2)를 생성할 수 있다. 액티베이션 컴프레서는 제1 인풋 로우 데이터(Cdata_row_1) 및 제2 인풋 로우 데이터(Cdata_row_2)를 생성 할 때, 제1 소스 인덱스(Index_source_1), 제2 소스 인덱스(Index_source_2), 제1 오퍼레이션 인덱스 (Index_op_1) 및 제2 오퍼레이션 인덱스(Index_op_2)를 생성할 수 있다. 도 27은 본 발명의 몇몇 실시예에 대응되는 엘리먼트 그룹 내에서만 인풋 엘리먼트를 푸시하는 실시예를 설명하 기 위한 도면이다. 도 27을 참조하여, 제1 인풋 액티베이션(Act_In_1) 및 제2 인풋 액티베이션(Act_In_2)이 각각 64개의 엘리먼트 를 포함하는 경우를 가정하여 설명한다. 제1 인풋 액티베이션(Act_In_1)은 복수개의 엘리먼트 그룹을 포함할 수 있다. 예를 들어, 제1 인풋 액티베이션(Act_In_1)은 제1-1 엘리먼트 그룹(EG_11) 내지 제1-8 엘리먼트 그룹 (EG_18)을 포함할 수 있다. 엘리먼트 그룹 각각은 복수의 인풋 엘리먼트를 포함할 수 있다. 예를 들어, 제1-1 엘리먼트 그룹(EG_11)은 제1-1 인풋 엘리먼트(i11) 내지 제1-8 인풋 엘리먼트(i18)를 포함하고, 제1-2 엘리먼트그룹(EG_12)은 제1-9 인풋 엘리먼트(i19) 내지 제1-16 인풋 엘리먼트(i116)를 포함하고, 제1-8 엘리먼트 그룹 (EG_18)은 제1-57 인풋 엘리먼트(i157) 내지 제1-64 인풋 엘리먼트(i164)를 포함할 수 있다. 즉, 각 엘리먼트 그룹은 각각 8개의 인풋 엘리먼트를 포함할 수 있다. 몇몇 실시예에 따르면 각 엘리먼트 그룹의 크기는 텐서 유 닛에 입력되는 데이터의 크기와 대응될 수 있다. 다시 말해서, 제1 인풋 액티베이션(Act_In_1)은 텐서 유 닛에 입력되는 데이터의 크기에 따라, 인풋 엘리먼트들을 그룹핑하여, 엘리먼트 그룹을 형성할 수 있다. 마찬가지로, 제2 인풋 액티베이션(Act_In_2)은 복수개의 엘리먼트 그룹을 포함할 수 있다. 예를 들어, 제2 인풋 액티베이션(Act_In_2)은 제2-1 엘리먼트 그룹(EG_21) 내지 제2-8 엘리먼트 그룹(EG_28)을 포함할 수 있다. 제2- 1 엘리먼트 그룹(EG_21)은 제2-1 인풋 엘리먼트(i21) 내지 제2-8 인풋 엘리먼트(i28)를 포함하고, 제2-2 엘리먼 트 그룹(EG_22)은 제2-9 인풋 엘리먼트(i29) 내지 제2-16 인풋 엘리먼트(i216)를 포함하고, 제2-8 엘리먼트 그 룹(EG_28)은 제2-57 인풋 엘리먼트(i257) 내지 제2-64 인풋 엘리먼트(i264)를 포함할 수 있다. 이때, 제1-1 엘 리먼트 그룹(EG_11)은 제2-1 엘리먼트 그룹(EG_21)과 대응되고, 제1-2 엘리먼트 그룹(EG_12)은 제2-2 엘리먼트 그룹(EG_22)과 대응될 수 있다. 마찬가지로, 제1-8 엘리먼트 그룹(EG_18)과 제2-8 엘리먼트 그룹(EG_28)은 서로 대응될 수 있다. 몇몇 실시예에 따르면, 제1 인풋 액티베이션(Act_In_1)과 제2 인풋 액티베이션(Act_In_2)을 압축할 때, 제2 인 풋 액티베이션(Act_In_2)의 인풋 엘리먼트는, 해당 인풋 엘리먼트의 엘리먼트 그룹과 대응되는 엘리먼트 그룹으 로만 푸시될 수 있다. 예를 들어, 제2-1 엘리먼트 그룹(EG_21)에 포함된 제2-1 인풋 엘리먼트(i21) 내지 제2-8 인풋 엘리먼트(i28)는 제1-1 엘리먼트 그룹(EG_11)에 포함된 제1-1 인풋 엘리먼트(i11) 내지 제1-8 인풋 엘리먼 트(i18)로만 푸시될 수 있다. 예를 들어, 제2-1 엘리먼트 그룹(EG_21)에 속한 제2-4 인풋 엘리먼트(i24)는, 제2-1 엘리먼트 그룹(EG_21)과 대 응되는 제1-1 엘리먼트 그룹(EG_11)에 속한 제1-3 인풋 엘리먼트(i13)에 푸시될 수 있다. 마찬가지로, 제2-7 인 풋 엘리먼트(i27)는 제1-7 인풋 엘리먼트(i17)에 푸시될 수 있다. 그러나, 제2-1 엘리먼트 그룹(EG_21)과 제1-2 엘리먼트 그룹(EG_12)은 서로 대응되지 않기 때문에, 제2-1 엘리 먼트 그룹(EG_21)에 포함된 제2-8 인풋 엘리먼트(i28)는 제1-2 엘리먼트 그룹(EG_12)에 포함된 제1-9 인풋 엘리 먼트(i19)에 푸시될 수 없다. 마찬가지로, 제2-2 엘리먼트 그룹(EG_22)과 제1-8 엘리먼트 그룹(EG_18)은 서로 대응되지 않기 때문에, 제2-2 엘리먼트 그룹(EG_22)에 포함된 제2-16 인풋 엘리먼트(i216)는, 제1-8 엘리먼트 그룹(EG_18)에 포함된 제1-57 인풋 엘리먼트(i157)에 푸시될 수 없다. 다만, 이러한 설명은 하나의 실시예에 불 과하며, 본 발명이 이에 제한되는 것은 아니다. 도 28은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 도 28을 더 참조하면, 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1), 제2 인풋 액티베이션 (Act_In_2), 제3 인풋 액티베이션(Act_In_3) 및 제4 인풋 액티베이션(Act_In_4)을 제공받을 수 있다. 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 및 제2 인풋 액티베이션(Act_In_2)을 이용하여, 제 1 압축 인풋 액티베이션(Cact_In_1)을 생성할 수 있다. 또한, 액티베이션 컴프레서는 제3 인풋 액티베이션 (Act_In_3) 및 제4 인풋 액티베이션(Act_In_4)을 이용하여, 제2 압축 인풋 액티베이션(Cact_In_2)을 생성할 수 있다. 또한, 액티베이션 컴프레서는 푸시된 제2 인풋 액티베이션 및 푸시된 제4 인풋 액티베이션을 이용하 여, 제3 압축 인풋 액티베이션(Cact_In_3)을 생성할 수 있다. 몇몇 실시예에 따르면, 푸시된 제2 인풋 액티베이션 및 푸시된 제4 인풋 액티베이션 각각은 적어도 일부 인풋 엘리먼트가 제1 압축 인풋 액티베이션(Cact_In_1) 및 제2 압축 인풋 액티베이션(Cact_In_2)을 생성하는데 이용 된 상태일 수 있다. 따라서, 푸시된 제2 인풋 액티베이션 및 푸시된 제4 인풋 액티베이션은 유효 엘리먼트가 상 대적으로 스파스(sparse)하게 분포할 수 있다. 따라서, 푸시된 제2 인풋 액티베이션과 푸시된 제4 인풋 액티베 이션을 압축하여, 제3 압축 인풋 액티베이션(Cact_In_3)을 생성하는 것은 상대적으로 용이할 수 있다. 다시 말 해서, 푸시된 인풋 액티베이션들을 따로 선별하고, 푸시된 인풋 액티베이션만을 이용하여 압축 인풋 액티베이션 을 생성하는 경우, 별도의 오퍼레이션 인덱스가 필요하지 않을 수 있다. 도 29 내지 도 31을 이용하여, 몇몇 실 시예에 따른 뉴럴 프로세싱 장치의 동작에 대해 순차적으로 설명한다. 도 29 내지 도 31은 본 발명의 몇몇 실시예에 따른 뉴럴 프로세싱 장치의 동작을 순차적으로 설명하기 위한 도 면이다. 도 29를 더 참조하면, 액티베이션 버퍼 스토어 유닛은 제1 인풋 액티베이션(Act_In_1) 및 제2 인풋 액티베 이션(Act_In_2)을 액티베이션 버퍼에 저장할 수 있다. 액티베이션 버퍼 로드 유닛은 액티베이션 버퍼에 저장된 제1 인풋 액티베이션(Act_In_1) 및 제2 인풋 액티베이션(Act_In_2)을 로드하여, 액티베이션 컴 프레서에 제공할 수 있다. 액티베이션 컴프레서는 제1 인풋 액티베이션(Act_In_1) 및 제2 인풋 액티 베이션(Act_In_2)을 이용하여, 제1 압축 인풋 액티베이션(Cact_In_1)과, 제1 예비 인풋 액티베이션(Pact_In_ 1)을 생성할 수 있다. 제1 예비 인풋 액티베이션(Pact_In_1)은 푸시된 제2 인풋 액티베이션일 수 있다. 액티베이션 버퍼 로드 유닛은 액티베이션 컴프레서에서 생성된 제1 압축 인풋 액티베이션(Cact_In_ 1)을 로드하여, 프로세싱 유닛에 제공할 수 있다. 프로세싱 유닛은 제1 압축 인풋 액티베이션 (Cact_In_1)을 이용하여 연산을 수행할 수 있다. 한편, 액티베이션 버퍼 스토어 유닛은 액티베이션 컴프레서에서 생성된 제1 예비 인풋 액티베이션 (Pact_In_1)을 액티베이션 버퍼에 제공할 수 있다. 제1 예비 인풋 액티베이션(Pact_In_1)은 일시적으로 액 티베이션 버퍼에 저장될 수 있다. 이어서, 도 30을 더 참조하면, 액티베이션 버퍼 스토어 유닛은 제3 인풋 액티베이션(Act_In_3) 및 제4 인 풋 액티베이션(Act_In_4)을 액티베이션 버퍼에 저장할 수 있다. 액티베이션 버퍼 로드 유닛은 액티베 이션 버퍼에 저장된 제3 인풋 액티베이션(Act_In_3) 및 제4 인풋 액티베이션(Act_In_4)을 이용하여, 제2 압축 인풋 액티베이션(Cact_In_2)과 제2 예비 인풋 액티베이션(Pact_In_2)을 생성할 수 있다. 제2 예비 인풋 액 티베이션(Pact_In_2)은 푸시된 제4 인풋 액티베이션일 수 있다. 액티베이션 버퍼 로드 유닛은 액티베이션 컴프레서에서 생성된 제2 압축 인풋 액티베이션(Cact_In_ 2)을 로드하여, 프로세싱 유닛에 제공할 수 있다. 프로세싱 유닛은 제2 압축 인풋 액티베이션 (Cact_In_2)을 이용하여 연산을 수행할 수 있다. 한편, 액티베이션 버퍼 스토어 유닛은 액티베이션 컴프레서에서 생성된 제2 예비 인풋 액티베이션 (Pact_In_2)을 액티베이션 버퍼에 제공할 수 있다. 제2 예비 인풋 액티베이션(Pact_In_2)은 일시적으로 액 티베이션 버퍼에 저장될 수 있다. 이어서, 도 31을 참조하면, 액티베이션 버퍼 로드 유닛은 액티베이션 버퍼에 저장된 제1 예비 인풋 액티베이션(Pact_In_1)과, 제2 예비 인풋 액티베이션(Pact_In_2)을 로드하여, 액티베이션 컴프레서에 제공 할 수 있다. 액티베이션 컴프레서는 제1 예비 인풋 액티베이션(Pact_In_1)과 제2 예비 인풋 액티베이션(Pact_In_2)을 이용하여, 제3 압축 인풋 액티베이션(Cact_In_3)을 생성할 수 있다. 액티베이션 버퍼 로드 유닛은 액티베이션 컴프레서에서 생성된 제3 압축 인풋 액티베이션(Cact_In_ 3)을 프로세싱 유닛에 제공할 수 있다. 프로세싱 유닛은 제3 압축 인풋 액티베이션(Cact_In_3)을 이 용하여 연산을 수행할 수 있다. 도 32는 본 발명의 몇몇 실시예에 따른 뉴럴 코어의 구조를 구체적으로 설명하기 위한 도면이다. 도 32를 참조하면, 뉴럴 코어는 웨이트 버퍼 스토어 유닛(110a), 웨이트 버퍼 로드 유닛(110b), 로컬 메모 리 로드 유닛(111a), 로컬 메모리 스토어 유닛(111b), 로컬 메모리, 웨이트 버퍼, 프로세싱 유닛 및 웨이트 컴프레서를 포함할 수 있다. 웨이트 버퍼 스토어 유닛(110a)은 프로세싱 유닛에서 연산될 웨이트 행렬을 웨이트 버퍼에 제공할 수 있다. 웨이트 버퍼는 웨이트 행렬을 일시적으로 저장할 수 있다. 웨이트 버퍼 로드 유닛(110b)은 웨이트 버퍼에 저장된 웨이트 행렬을 로드하여, 웨이트 컴프레서에 제공할 수 있다. 웨이트 컴프레서는 웨이트 행렬을 이용하여 압축 웨이트 행렬을 생성할 수 있다. 웨이트 버퍼 로드 유닛(110b)은 웨이트 컴프레서에서 생성된 압축 웨이트 행렬을 프로세싱 유닛에 제공할 수 있다. 프로세싱 유닛은 압축 웨이트 행렬을 이용하여 연산을 수행할 수 있다. 웨이트 컴프레서는 전술한 액티베이션 컴프레서와 유사한 방법으로 압축 웨이트 행렬을 생성할 수 있 다. 다만, 웨이트 컴프레서는 2차원의 웨이트 행렬을 압축한다는 것에서, 1차원의 인풋 액티베이션을 압축 하는 액티베이션 컴프레서와 차이가 있다. 웨이트 컴프레서는 액티베이션 컴프레서에서 수행하 는 압축 동작을 행 또는 열 별 반복적으로 수행하여 압축 웨이트 행렬을 생성할 수 있다. 예시적인 설명을 위해 도 33을 더 참조한다. 도 33은 본 발명의 몇몇 실시예에 따른 웨이트 컴프레서의 동작을 설명하기 위한 도면이다. 도 33을 더 참조하면, 웨이트 컴프레서는 웨이트 버퍼로부터 제1 웨이트 행렬(Weight_1), 제2 웨이트 행렬(Weight_2) 및 제3 웨이트 행렬(Weight_3)을 제공받을 수 있다. 웨이트 컴프레서는 제1 웨이트 행렬 (Weight_1)과 제2 웨이트 행렬(Weight_2)을 이용하여 제1 압축 웨이트 행렬(Cweight_1)을 생성하고, 제2 웨이 트 행렬(Weight_2)의 적어도 일부와 제3 웨이트 행렬(Weight_3)을 이용하여 제2 압축 웨이트 행렬(Cweight_2)을 생성할 수 있다. 이는 도 17을 이용하여 설명한 액티베이션 컴프레서의 동작과 유사할 수 있다. 단, 도 33은 예시적인 설명을 위한 것일 뿐, 웨이트 컴프레서의 동작에 관한 실시예가 이에 제한되는 것은 아니다. 전술한 바와 같이, 웨이트 컴프레서는 도 33에 도시된 실시예 외에도, 전술한 액티베이션 컴프레 서의 동작을 반복적으로 수행하여 압축 웨이트 행렬을 생성할 수 있다. 또한, 설명의 편의를 위해, 소스 인덱스 행렬 및 오퍼레이션 인덱스 행렬에 대한 설명은 생략한다. 소스 인덱스 행렬은 전술한 소스 인덱스와 유 사하고, 오퍼레이션 인덱스 행렬은 전술한 오퍼레이션 인덱스와 유사할 수 있다. 또한, 이상 도 15 내지 도 33을 이용하여, 본 발명의 몇몇 실시예에 따른 인풋 액티베이션(Act_In) 및 웨이트 행렬의 압축 과정을 설명하였으나, 이는 몇몇 실시예를 설명한 것일 뿐 본 발명이 이에 제한되는 것은 아니다. 이상에서 설명한 압축 과정은 인풋 액티베이션(Act_In) 및 웨이트 행렬 외에도, 특정 배열을 갖는 데이터를 압 축하기 위해 확장하여 적용될 수 있다. 도 34는 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치의 소프트웨어 계층 구조를 설명하기 위한 블록도 이다. 도 34를 참조하면, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치의 소프트웨어 계층 구조는 DL 프레임워 크, 컴파일러 스택 및 백엔드 모듈을 포함할 수 있다. DL 프레임워크는 사용자가 사용하는 딥러닝 모델 네트워크에 대한 프레임워크를 의미할 수 있다. 예를 들어, 텐서플로우나 파이토치와 같은 프로그램을 이용하여 학습이 완료된 뉴럴 네트워크가 생성될 수 있다. 컴파일러 스택은 어댑테이션 레이어, 컴퓨트 라이브러리, 프론트엔드 컴파일러, 백엔드 컴파일러 및 런타임 드라이버를 포함할 수 있다. 어댑테이션 레이어는 DL 프레임워크에 접하는 레이어일 수 있다. 어댑테이션 레이어는 DL 프레임워크에서 생성된 유저의 신경망 모델을 양자화시키고 그래프 수정을 할 수 있다. 또한, 어댑테이 션 레이어는 모델의 타입을 필요한 타입으로 변환시킬 수 있다. 프론트엔드 컴파일러는 어댑테이션 레이어에서 전달받은 다양한 신경망 모델 및 그래프를 일정한 중간 표현(intermediate representation, IR)으로 변환해줄 수 있다. 변환된 IR은 추후 백엔드 컴파일러 에서 다루기 쉬운 미리 설정된 표현일 수 있다. 이러한, 프론트엔드 컴파일러의 IR은 그래프 차원에서 미리 할 수 있는 최적화가 수행될 수 있다. 또한, 프론트엔드 컴파일러는 하드웨어에 최적화된 레이아웃으로 변환시키는 작업을 통해서 최종적으로 IR을 생성할 수 있다. 벡엔드 컴파일러는 프론트엔드 컴파일러에서 변환된 IR을 최적화하고 바이너리 파일로 변환하여 런타임 드라이버가 사용할 수 있게 한다. 백엔드 컴파일러는 하드웨어의 세부 사항에 맞는 스케일로 잡 (job)을 분할하여 최적화된 코드를 생성할 수 있다. 컴퓨트 라이브러리는 여러가지 오퍼레이션 중에 하드웨어에 적합한 형태로 설계된 템플릿 오퍼레이션을 저장할 수 있다. 컴퓨트 라이브러리는 하드웨어가 필요한 여러 템플릿 오퍼레이션을 벡엔드 컴파일러 에 제공하여 최적화된 코드가 생성될 수 있게 한다. 런타임 드라이버는 구동 중에 계속해서 모니터링을 수행하여 본 발명의 몇몇 실시예들에 따른 뉴럴 네트 워크 장치의 구동을 수행할 수 있다. 구체적으로, 뉴럴 네트워크 장치의 인터페이스의 실행을 담당할 수 있다. 백엔드 모듈는 ASIC(Application Specific Integrated Circuit), FPGA(Field programmable gate array) 및 C-model을 포함할 수 있다. ASIC은 미리 결정된 설계 방식에 따라 결정 되는 하드웨어 칩을 의미할 수 있다. FPGA는 프로그래밍이 가능한 하드웨어 칩일 수 있다. C- model은 소프트웨어 상에 하드웨어를 모사하여 구현한 모델을 의미할 수 있다. 백엔드 모듈은 컴파일러 스택을 통해서 생성된 바이너리 코드를 이용하여 다양한 작업을 수행하 고 결과를 도출할 수 있다. 도 35는 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치가 수행하는 딥 러닝 연산을 설명하기 위한 개념도 이다. 도 35를 참조하면, 인공신경망 모델은, 기계학습 모델의 일 예로서, 기계학습(Machine Learning) 기술과 인지과학에서, 생물학적 신경망의 구조에 기초하여 구현된 통계학적 학습 알고리즘 또는 그 알고리즘을 실행하 는 구조이다. 인공신경망 모델은, 생물학적 신경망에서와 같이 시냅스의 결합으로 네트워크를 형성한 인공 뉴런인 노 드(Node)들이 시냅스의 웨이트를 반복적으로 조정하여, 특정 입력에 대응한 올바른 출력과 추론된 출력 사이의 오차가 감소되도록 학습함으로써, 문제 해결 능력을 가지는 기계학습 모델을 나타낼 수 있다. 예를 들어, 인공 신경망 모델은 기계 학습, 딥러닝 등의 인공지능 학습법에 사용되는 임의의 확률 모델, 뉴럴 네트워크 모델 등을 포함할 수 있다. 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 이러한 인공신경망 모델의 형태를 구현하여 연산 을 수행할 수 있다. 예를 들어, 인공신경망 모델은 입력 영상을 수신하고, 입력 영상에 포함된 대상의 적어도 일부에 대한 정보를 출력할 수 있다. 인공신경망 모델은 다층의 노드들과 이들 사이의 연결로 구성된 다층 퍼셉트론(MLP: multilayer perceptron)으로 구현된다. 본 실시예에 따른 인공신경망 모델은 MLP를 포함하는 다양한 인공신경망 모 델 구조들 중의 하나를 이용하여 구현될 수 있다. 도 25에 도시된 바와 같이, 인공신경망 모델은, 외부 로부터 입력 신호 또는 데이터를 수신하는 입력층, 입력 데이터에 대응한 출력 신호 또는 데이터 를 출력하는 출력층, 입력층과 출력층 사이에 위치하며 입력층으로부터 신 호를 받아 특성을 추출하여 출력층으로 전달하는 n개(여기서, n은 양의 정수)의 은닉층(42000 내지 43000)으로 구성된다. 여기서, 출력층은 은닉층(42000 내지 43000)으로부터 신호를 받아 외부로 출력한 다. 인공신경망 모델의 학습 방법에는, 교사 신호(정답)의 입력에 의해서 문제의 해결에 최적화되도록 학습 하는 지도 학습(Supervised Learning) 방법과, 교사 신호를 필요로 하지 않는 비지도 학습(Unsupervised Learning) 방법이 있다. 뉴럴 프로세싱 장치는 인공신경망 모델을 학습시키기 위한 학습 데이터를 시뮬레이션을 통해 직접 생성 할 수 있다. 이와 같이, 인공신경망 모델의 입력층과 출력층에 복수의 입력변수와 대응되 는 복수의 출력변수가 각각 매칭되고, 입력층, 은닉층(42000 내지 43000) 및 출력층에 포함된 노 드들 사이의 시냅스 값이 조정됨으로써, 특정 입력에 대응한 올바른 출력이 추출될 수 있도록 학습될 수 있다. 이러한 학습 과정을 통해, 인공신경망 모델의 입력변수에 숨겨져 있는 특성을 파악할 수 있고, 입력변수 에 기초하여 계산된 출력변수와 목표 출력 간의 오차가 줄어들도록 인공신경망 모델의 노드들 사이의 시 냅스 값(또는 웨이트)을 조정할 수 있다. 도 36은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치의 뉴럴 네트워크의 학습 및 추론 동작을 설명하기 위한 개념도이다. 도 36을 참조하면, 학습 과정(Training Phase)에서는 다수의 학습 자료(TD)들이 인공신경망 모델(NN)로 포워딩 되고, 다시 백워딩되는 과정을 거칠 수 있다. 이를 통해서 인공신경망 모델(NN)의 각 노드의 웨이트와 바이어스 들이 조율되고 이를 통해서 점점 더욱 정확한 결과를 도출할 수 있게 학습이 수행될 수 있다. 이렇게 학습 과정 (Training Phase)을 통해서 인공신경망 모델(NN)은 학습된 신경망 모델(NN_T)로 변환될 수 있다. 추론 과정(Inference Phase)에서는 새로운 데이터(ND)가 다시 학습된 신경망 모델(NN_T)로 입력될 수 있다. 학 습된 신경망 모델(NN_T)은 새로운 데이터(ND)를 입력으로 하여 이미 학습된 웨이트와 바이어스를 통해서 결과 데이터(RD)를 도출할 수 있다. 이러한 결과 데이터(RD)는 학습 과정(Training Phase)에서 어떤 학습 자료(TD)로 학습하였는지와, 얼마나 많은 학습 자료(TD)를 이용하였는지가 중요할 수 있다. 이상의 설명은 본 실시예의 기술 사상을 예시적으로 설명한 것에 불과한 것으로서, 본 실시예가 속하는 기술 분 야에서 통상의 지식을 가진 자라면 본 실시예의 본질적인 특성에서 벗어나지 않는 범위에서 다양한 수정 및 변 형이 가능할 것이다. 따라서, 본 실시예들은 본 실시예의 기술 사상을 한정하기 위한 것이 아니라 설명하기 위 한 것이고, 이러한 실시예에 의하여 본 실시예의 기술 사상의 범위가 한정되는 것은 아니다. 본 실시예의 보호범위는 아래의 청구범위에 의하여 해석되어야 하며, 그와 동등한 범위 내에 있는 모든 기술 사상은 본 실시예의 권리범위에 포함되는 것으로 해석되어야 할 것이다."}
{"patent_id": "10-2022-0030139", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템을 설명하기 위한 블록도이다. 도 2는 도 1의 뉴럴 프로세싱 장치를 세부적으로 설명하기 위한 블록도이다. 도 3은 도 2의 뉴럴 코어 SoC를 세부적으로 설명하기 위한 블록도이다. 도 4는 도 3의 글로벌 인터커넥션을 세부적으로 설명하기 위한 구조도이다. 도 5는 도 3의 뉴럴 프로세서를 세부적으로 설명하기 위한 블록도이다. 도 6은 도 5의 뉴럴 코어를 세부적으로 설명하기 위한 블록도이다. 도 7은 도 6의 LSU을 세부적으로 설명하기 위한 블록도이다. 도 8은 도 6의 프로세싱 유닛을 세부적으로 설명하기 위한 블록도이다. 도 9는 도 6의 로컬 메모리를 세부적으로 설명하기 위한 블록도이다. 도 10은 도 9의 로컬 메모리 뱅크를 세부적으로 설명하기 위한 블록도이다. 도 11은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템의 메모리 재구성을 설명하기 위한 블록도이다. 도 12는 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템의 메모리 재구성의 예시를 나타낸 블록도이다. 도 13은 도 11의 A부분을 확대한 블록도이다. 도 14는 도 13의 제1 뱅크를 세부적으로 설명하기 위한 도면이다. 도 15는 액티베이션 컴프레서가 없는 환경에서의 텐서 유닛의 연산 과정을 간략히 설명하기 위한 도면이다. 도 16은 본 발명의 몇몇 실시예에 따른 뉴럴 코어의 구조를 구체적으로 설명하기 위한 도면이다. 도 17은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 도 18은 본 발명의 몇몇 실시예에 따른 프로세싱 유닛의 동작을 설명하기 위한 도면이다. 도 19는 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 도 20은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 압축 과정을 설명하기 위한 도면이다. 도 21 및 도 22는 본 발명의 몇몇 실시예에 따른 프로세싱 유닛의 동작을 설명하기 위한 도면이다. 도 23은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서에서 병목 현상이 발생되는 예시를 설명하기 위한도면이다. 도 24는 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 도 25는 본 발명의 몇몇 실시예에 따른 프로세싱 유닛의 동작을 설명하기 위한 도면이다. 도 26은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이다. 도 27은 본 발명의 몇몇 실시예에 대응되는 엘리먼트 그룹 내에서만 인풋 엘리먼트를 푸시하는 실시예를 설명하 기 위한 도면이다. 도 28은 본 발명의 몇몇 실시예에 따른 액티베이션 컴프레서의 동작을 설명하기 위한 도면이 다. 도 29 내지 도 31은 본 발명의 몇몇 실시예에 따른 뉴럴 프로세싱 장치의 동작을 순차적으로 설명하기 위한 도 면이다. 도 32는 본 발명의 몇몇 실시예에 따른 뉴럴 코어의 구조를 구체적으로 설명하기 위한 도면이다. 도 33은 본 발명의 몇몇 실시예에 따른 웨이트 컴프레서의 동작을 설명하기 위한 도면이다. 도 34는 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치의 소프트웨어 계층 구조를 설명하기 위한 블록도 이다. 도 35는 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치가 수행하는 딥 러닝 연산을 설명하기 위한 개념도 이다. 도 36은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치의 뉴럴 네트워크의 학습 및 추론 동작을 설명하기 위한 개념도이다."}
