{"patent_id": "10-2020-0178442", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0087922", "출원번호": "10-2020-0178442", "발명의 명칭": "메모리 시스템 및 그 동작 방법", "출원인": "에스케이하이닉스 주식회사", "발명자": "이명현"}}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임베딩 테이블을 분할한 부분 데이터들을 저장하는 복수의 메모리 장치들; 및호스트로부터 수신한 쿼리에 응답하여, 상기 복수의 메모리 장치들 각각으로부터 상기 부분 데이터들 중 상기쿼리에 대응되는 데이터들을 획득하고, 상기 획득한 데이터들을 이용하여 임베딩 데이터를 생성하는 풀링 연산을 수행하고, 상기 임베딩 데이터를 상기 호스트로 제공하는 메모리 컨트롤러;를 포함하되,상기 쿼리는,상기 풀링 연산의 요청, 상기 임베딩 데이터를 수신할 호스트 메모리의 어드레스 및 상기 복수의 메모리 장치들의 물리 어드레스에 대응되는 논리 어드레스를 포함하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 메모리 컨트롤러는,상기 쿼리의 논리 어드레스를 상기 복수의 메모리 장치들의 상기 물리 어드레스로 변환하고, 상기 복수의 메모리 장치들 각각으로부터 상기 물리 어드레스에 대응되는 데이터들을 리드하도록 상기 복수의 메모리 장치들을제어하는 리드 동작 제어부; 및상기 획득한 데이터들을 압축하여 상기 임베딩 데이터를 생성하는 상기 풀링 연산을 수행하는 연산부;를 포함하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 연산부는,상기 획득한 데이터들의 벡터 정보를 원소별 합산 연산(element-wise sum operation)을 수행하여 상기 임베딩데이터를 생성하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 임베딩 데이터는,상기 획득한 데이터들의 벡터 정보를 포함하는 임베딩 벡터인 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 임베딩 테이블은,상기 아이템들을 카테고리에 따라 분류하고, 상기 분류된 아이템들 간의 유사성을 기초로 수치화한 상기 벡터공개특허 10-2022-0087922-3-정보들을 포함하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 부분 데이터들 각각은,상기 임베딩 테이블을 상기 벡터 정보들의 디멘션 단위로 분할한 데이터이고,상기 복수의 메모리 장치들 각각은,적어도 하나의 디멘션에 대응되는 부분 데이터를 저장하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임베딩 테이블을 분할한 부분 데이터들을 저장하는 복수의 메모리 장치들; 및호스트로부터 수신한 쿼리 및 임베딩 데이터에 응답하여, 상기 임베딩 데이터를 이용하여 분할 데이터들을 생성하는 언풀링 연산을 수행하고, 상기 복수의 메모리 장치들 각각에서 상기 분할 데이터들에 대응되는 부분 데이터를 업데이트하도록 상기 복수의 메모리 장치들을 제어하는 메모리 컨트롤러;를 포함하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 메모리 컨트롤러는,상기 임베딩 데이터를 상기 분할 데이터들로 분할하는 상기 언풀링 연산을 수행하는 연산부; 및상기 복수의 메모리 장치들 각각에서 상기 분할 데이터들에 대응되는 상기 부분 데이터의 웨이트를 업데이트하도록 상기 복수의 메모리 장치들을 제어하는 웨이트 갱신부;를 포함하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 연산부는,상기 임베딩 데이터의 벡터 정보를 원소별 합산 연산(element-wise sum operation)하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제7항에 있어서,상기 쿼리는,상기 언풀링 연산의 요청, 상기 임베딩 데이터에 대응되는 호스트 메모리의 어드레스 및 상기 복수의 메모리 장치들의 물리 어드레스에 대응되는 논리 어드레스를 포함하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제7항에 있어서,공개특허 10-2022-0087922-4-상기 임베딩 테이블은,상기 아이템들을 카테고리에 따라 분류하고, 상기 분류된 아이템들 간의 유사성을 기초로 수치화한 상기 벡터정보들을 포함하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제7항에 있어서,상기 부분 데이터들 각각은,상기 임베딩 테이블을 상기 벡터 정보들의 디멘션 단위로 분할한 데이터이고,상기 복수의 메모리 장치들 각각은,적어도 하나의 디멘션에 대응되는 부분 데이터를 저장하는 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "호스트 장치; 및 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임베딩 테이블을 분할한 부분 데이터들을 저장하는 복수의 서브 메모리 시스템;을 포함하되,상기 호스트 장치는,상기 복수의 서브 메모리 시스템으로 제1 쿼리를 브로드 캐스트하고, 상기 제1 쿼리를 이용하여, 상기 복수의 서브 메모리 시스템 각각으로부터 상기 부분 데이터들 중 상기 제1 쿼리에 대응되는 데이터들을 획득하고, 상기 획득한 데이터들을 이용하여 임베딩 데이터를 생성하는 풀링 연산을수행하고, 상기 임베딩 데이터를 상기 호스트 장치로 제공하도록 상기 복수의 서브 메모리 시스템을 제어하는풀드 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 복수의 서브 메모리 시스템 각각은,기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임베딩 테이블을 분할한 부분 데이터들을 저장하는 복수의 메모리 장치들; 및상기 제1 쿼리의 논리 어드레스를 물리 어드레스로 변환하고, 상기 복수의 메모리 장치들 각각으로부터 상기 물리 어드레스에 대응되는 데이터들을 리드하도록 상기 복수의 메모리 장치들을 제어하는 리드 동작 제어부; 및상기 획득한 데이터들을 압축하여 상기 임베딩 데이터를 생성하는 상기 풀링 연산을 수행하는 연산부;를 포함하는 풀드 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 연산부는,상기 획득한 데이터들의 벡터 정보를 원소별 연산(element-wise operation)하는 풀드 메모리 시스템.공개특허 10-2022-0087922-5-청구항 16 제14항에 있어서,상기 호스트 장치는,상기 풀링 연산의 요청, 상기 임베딩 데이터를 수신할 호스트 메모리 장치의 어드레스 및 상기 복수의 메모리장치들의 물리 어드레스에 대응되는 논리 어드레스를 포함하는 상기 제1 쿼리를 이용하여 상기 복수의 서브 메모리 시스템을 제어하는 풀드 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제13항에 있어서,상기 임베딩 테이블은,상기 아이템들을 카테고리에 따라 분류하고, 상기 분류된 아이템들 간의 유사성을 기초로 수치화한 상기 벡터정보들을 포함하는 풀드 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제13항에 있어서,상기 부분 데이터들 각각은,상기 임베딩 테이블을 상기 벡터 정보들의 디멘션 단위로 분할한 데이터이고,상기 복수의 서브 메모리 시스템 각각은,적어도 하나의 디멘션에 대응되는 부분 데이터를 저장하는 풀드 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제13항에 있어서,상기 호스트 장치는,상기 복수의 서브 메모리 시스템 각각으로부터 수신한 상기 임베딩 데이터를 기초로 상기 임베딩 테이블을 업데이트하기 위한 학습 데이터를 생성하는 풀드 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19항에 있어서,상기 호스트 장치는,상기 복수의 서브 메모리 시스템으로 제2 쿼리 및 상기 학습 데이터를 브로드 캐스트하고,상기 복수의 서브 메모리 시스템 각각은,상기 호스트 장치로부터 수신한 상기 제2 쿼리 및 상기 학습 데이터에 응답하여, 상기 학습 데이터를 이용하여분할 데이터들을 생성하는 언풀링 연산을 수행하고, 상기 복수의 서브 메모리 시스템 각각에서 상기 분할 데이터들에 대응되는 부분 데이터를 업데이트하는 풀드 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "공개특허 10-2022-0087922-6-제20항에 있어서,상기 복수의 서브 메모리 시스템 각각은,상기 학습 데이터를 상기 분할 데이터들로 분할하는 상기 언풀링 연산을 수행하는 연산부; 및상기 분할 데이터들에 대응되는 부분 데이터의 웨이트를 업데이트하는 웨이트 갱신부;를 포함하는 풀드 메모리시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제20항에 있어서,상기 호스트 장치는,상기 언풀링 연산의 요청, 상기 학습 데이터에 대응되는 호스트 메모리 장치의 어드레스 및 상기 복수의 서브메모리 시스템의 물리 어드레스에 대응되는 논리 어드레스를 포함하는 상기 제2 쿼리를 이용하여 상기 복수의서브 메모리 시스템을 제어하는 풀드 메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임베딩 테이블을 분할한 부분 데이터들을 저장하는 메모리 장치 및 임베딩 데이터들을 생성하는 풀링 연산 및 학습 데이터를 분할하는 언풀링 연산을 수행하는 메모리 컨트롤러를 각각 포함하는 복수의 서브 메모리 시스템; 및상기 복수의 서브 메모리 시스템으로부터 수신한 상기 임베딩 데이터들을 이용하여 상기 학습 데이터를 생성하고, 상기 학습 데이터를 학습하도록 상기 복수의 서브 메모리 시스템을 제어하는 호스트 장치;를 포함하는 풀드메모리 시스템."}
{"patent_id": "10-2020-0178442", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 기술은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임베딩 테이블을 분할한 부분 데이터 들을 저장하는 복수의 메모리 장치들 및 호스트로부터 수신한 쿼리에 응답하여, 복수의 메모리 장치들 각각으로 부터 부분 데이터들 중 쿼리에 대응되는 데이터들을 획득하고, 획득한 데이터들을 이용하여 임베딩 데이터를 생 성하는 풀링 연산을 수행하고, 임베딩 데이터를 호스트로 제공하는 메모리 컨트롤러를 포함한다."}
{"patent_id": "10-2020-0178442", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 전자 장치에 관한 것으로, 보다 구체적으로는 메모리 시스템 및 그 동작 방법에 관한 것이다."}
{"patent_id": "10-2020-0178442", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "메모리 시스템은 컴퓨터나 스마트폰 등과 같은 호스트 장치의 제어에 따라 데이터를 저장하는 장치이다. 메모리 시스템은 데이터가 저장되는 메모리 장치와 메모리 장치를 제어하는 메모리 컨트롤러를 포함할 수 있다. 메모리 장치는 휘발성 메모리 장치 (Volatile Memory)와 비휘발성 메모리 장치 (Non Volatile Memory)로 구분된다. 휘발성 메모리 장치는 전원이 공급된 경우에만 데이터를 저장하고, 전원 공급이 차단되면 저장된 데이터가 소멸 되는 메모리 장치이다. 휘발성 메모리 장치는 정적 랜덤 액세스 메모리 (Static Random Access Memory; SRAM), 동적 랜덤 액세스 메모리 (Dynamic Random Access Memory; DRAM) 등이 있다. 비휘발성 메모리 장치는 전원이 차단되어도 데이터가 소멸되지 않는 메모리 장치로서, 롬(Read Only Memory; ROM), PROM (Programmable ROM), EPROM (Electrically Programmable ROM), EEPROM (Electrically Erasable and Programmable ROM) 및 플래시 메모리(Flash Memory) 등이 있다."}
{"patent_id": "10-2020-0178442", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 실시 예는 NDP(Near Data Processing)를 수행하는 향상된 복수의 서브 메모리 시스템 및 이를 포함하 는 풀드 메모리 시스템을 제공한다."}
{"patent_id": "10-2020-0178442", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 실시 예에 따른 메모리 시스템은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임 베딩 테이블을 분할한 부분 데이터들을 저장하는 복수의 메모리 장치들 및 호스트로부터 수신한 쿼리에 응답하 여, 상기 복수의 메모리 장치들 각각으로부터 상기 부분 데이터들 중 상기 쿼리에 대응되는 데이터들을 획득하 고, 상기 획득한 데이터들을 이용하여 임베딩 데이터를 생성하는 풀링 연산을 수행하고, 상기 임베딩 데이터를 상기 호스트로 제공하는 메모리 컨트롤러를 포함하되, 상기 쿼리는 상기 풀링 연산의 요청, 상기 임베딩 데이터 를 수신할 호스트 메모리의 어드레스 및 상기 복수의 메모리 장치들의 물리 어드레스에 대응되는 논리 어드레스 를 포함할 수 있다. 본 발명의 실시 예에 따른 메모리 시스템은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임 베딩 테이블을 분할한 부분 데이터들을 저장하는 복수의 메모리 장치들 및 호스트로부터 수신한 쿼리 및 임베딩 데이터에 응답하여, 상기 임베딩 데이터를 이용하여 분할 데이터들을 생성하는 언풀링 연산을 수행하고, 상기 복수의 메모리 장치들 각각에서 상기 분할 데이터들에 대응되는 부분 데이터를 업데이트하도록 상기 복수의 메 모리 장치들을 제어하는 메모리 컨트롤러를 포함할 수 있다. 본 발명의 실시 예에 따른 풀드 메모리 시스템은 호스트 장치 및 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임베딩 테이블을 분할한 부분 데이터들을 저장하는 복수의 서브 메모리 시스템을 포함하되, 상기 호스트 장치는 상기 복수의 서브 메모리 시스템으로 제1 쿼리를 브로드 캐스트하고, 상기 제1 쿼리를 이용 하여, 상기 복수의 서브 메모리 시스템 각각으로부터 상기 부분 데이터들 중 상기 제1 쿼리에 대응되는 데이터 들을 획득하고, 상기 획득한 데이터들을 이용하여 임베딩 데이터를 생성하는 풀링 연산을 수행하고, 상기 임베 딩 데이터를 상기 호스트 장치로 제공하도록 상기 복수의 서브 메모리 시스템을 제어할 수 있다. 본 발명의 실시 예에 따른 풀드 메모리 시스템은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하 는 임베딩 테이블을 분할한 부분 데이터들을 저장하는 메모리 장치 및 임베딩 데이터들을 생성하는 풀링 연산 및 학습 데이터를 분할하는 언풀링 연산을 수행하는 메모리 컨트롤러를 각각 포함하는 복수의 서브 메모리 시스 템 및 상기 복수의 서브 메모리 시스템으로부터 수신한 상기 임베딩 데이터들을 이용하여 상기 학습 데이터를 생성하고, 상기 학습 데이터를 학습하도록 상기 복수의 서브 메모리 시스템을 제어하는 호스트 장치를 포함할 수 있다."}
{"patent_id": "10-2020-0178442", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 기술에 따르면, NDP(Near Data Processing)를 수행하는 향상된 복수의 서브 메모리 시스템 및 이를 포함하는 풀드 메모리 시스템이 제공된다."}
{"patent_id": "10-2020-0178442", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서 또는 출원에 개시되어 있는 본 발명의 개념에 따른 실시 예들에 대해서 특정한 구조적 내지 기능적 설명들은 단지 본 발명의 개념에 따른 실시 예를 설명하기 위한 목적으로 예시된 것으로, 본 발명의 개념에 따 른 실시 예들은 다양한 형태로 실시될 수 있으며 본 명세서 또는 출원에 설명된 실시 예들에 한정되는 것으로 해석되어서는 아니 된다. 본 발명의 개념에 따른 실시 예는 다양한 변경을 가할 수 있고 여러 가지 형태를 가질 수 있으므로 특정 실시 예들을 도면에 예시하고 본 명세서 또는 출원에 상세하게 설명하고자 한다. 그러나, 이는 본 발명의 개념에 따 른 실시 예를 특정한 개시 형태에 대해 한정하려는 것이 아니며, 본 발명의 사상 및 기술 범위에 포함되는 모든 변경, 균등물 내지 대체물을 포함하는 것으로 이해되어야 한다. 실시 예를 설명함에 있어서 본 발명이 속하는 기술 분야에 익히 알려져 있고 본 발명과 직접적으로 관련이 없는 기술 내용에 대해서는 설명을 생략한다. 이는 불필요한 설명을 생략함으로써 본 발명의 요지를 흐리지 않고 더욱 명확히 전달하기 위함이다. 이하, 첨부한 도면을 참조하여 본 발명의 바람직한 실시 예를 설명함으로써, 본 발명을 상세히 설명한다. 이하, 본 발명의 실시 예를 첨부된 도면을 참조하여 상세하게 설명한다. 도 1은 본 발명의 일 실시 예에 따른 풀드 메모리 시스템을 설명하기 위한 블록도이다. 도 1을 참조하면, 풀드 메모리 시스템은 복수의 서브 메모리 시스템 및 호스트 장치를 포함 할 수 있다. 풀드 메모리 시스템은 추천 시스템 서비스를 제공하는 장치일 수 있다. 여기서, 추천 시스템 서비스는 정보 필터링을 이용하여 사용자에게 맞춤형 정보를 제공하는 서비스를 의미할 수 있다. 풀드 메모리 시스템 은 사용자의 개인 정보, 관심 분야 선호도 등을 질의하여 사용자의 정보 프로파일을 획득하고, 이를 기 초로 사용자의 선호도 정보에 알맞은 정보 및 아이템을 추천하거나 제공할 수 있다. 추천 시스템 서비스는 증가하는 많은 양의 서비스 데이터를 효과적으로 이용하거나, 제공하기 위하여 높은 성능 으로 학습(training) 및 추론(inference)을 위한 딥 러닝(deep learning) 베이스의 알고리즘으로 구현될 수 있 다. 다만, 딥 러닝(deep learning) 베이스의 추천 시스템은 호스트 장치를 중심으로 임베딩 연산 등이 수행되므 로, 대역폭(bandwidth) 문제를 발생시킬 수 있고, 많은 양의 서비스 데이터가 요구되므로 메모리 용량이 부족한 문제가 발생할 수 있다. 본 발명의 일 실시 예에 따르면, 풀드 메모리 시스템은 메모리 용량을 추가할 수 있는 풀드 메모리 구조 를 통하여 메모리 용량를 해결하고, NDP(Near Data Processing)이 수행되도록 구성하여 대역폭 문제를 해결한 추천 시스템 서비스를 제공할 수 있다. 구체적으로, 풀드 메모리 시스템은 다량의 메모리 장치가 병렬적 으로 연결되는 복수의 서브 메모리 시스템을 포함하는 풀드 메모리 구조로 구현될 수 있다. 그리고, 풀드 메모리 시스템은 임베딩과 관련된 간단한 연산을 수행하도록 복수의 서브 메모리 시스템을 제어할 수 있다. 한편, 풀드 메모리 시스템에 포함된 복수의 서브 메모리 시스템 및 호스트 장치는 인터커넥 트로 연결된 형태로 구현될 수 있다. 그리고, 복수의 서브 메모리 시스템은 호스트 장치의 제어에 따라 추론 동작 및 학습 동작을 수행할 수 있다. 이를 위해, 복수의 서브 메모리 시스템은 기학습된 학습 모델에 대한 데이터를 저장할 수 있다. 구체적으로, 복수의 서브 메모리 시스템은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 저장할 수 있다. 학습 모델은 인공지능 모델을 의미할 수 있고, 인공지능 모델 은 학습을 통해 만들어진 것을 특징으로 할 수 있다. 여기서, 학습을 통해 만들어진다는 것은, 기본 인공지능 모델이 학습 알고리즘에 의하여 다수의 학습 데이터들을 이용하여 학습됨으로써, 원하는 특성을 수행하도록 설정된 기정의된 동작 규칙 또는 인공지능 모델이 만들어짐을 의미할 수 있다. 이러한 학습은 본 발명에 따른 풀 드 메모리 시스템에서 이루어질 수도 있고, 별도의 서버 및/또는 시스템을 통해 이루어질 수 있다. 학습 알고리즘의 예는 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습 (semi-supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있고, 특히, 지도형 학습 (supervised learning)일 수 있다. 학습 모델은 인간의 신경망의 뉴런(neuron)을 모의하는, 가중치를 가지는 복수의 네트워크 노드들을 포함할 수 있다. 복수의 네트워크 노드들은 뉴런이 시냅스(synapse)를 통하여 신호를 주고 받는 시냅틱(synaptic) 활동을 모의하도록 각각 연결 관계를 형성할 수 있다. 일 예로, 인공지능 모델은 신경망 모델, 또는 신경망 모델에서 발전한 딥러닝 모델을 포함할 수 있다. 딥러닝 모델에서 복수의 네트워크 노드들은 서로 다른 깊이(또는, 레이 어)에 위치하면서 컨볼루션(convolution) 연결 관계에 따라 데이터를 주고 받을 수 있다. 예컨대, DNN(Deep Neural Network), RNN(Recurrent Neural Network), BRDNN(Bidirectional Recurrent Deep Neural Network)과 같은 모델이 데이터 인식 모델로서 사용될 수 있으나, 이에 한정되지 않는다. 본 발명의 일 실시 예에 따른 풀드 메모리 시스템의 추천 시스템 서비스와 관련된 기능은 호스트 장치 의 제어에 따라 동작할 수 있다. 구체적으로, 호스트 장치는 호스트 프로세서 및 호스트 메모리를 포함할 수 있다. 호스트 프로세서는 CPU, AP, DSP(Digital Signal Processor) 등과 같은 범용 프로세서, GPU, VPU(Vision Processing Unit)와 같은 그래픽 전용 프로세서 또는 NPU와 같은 인공지능 전용 프로세서일 수 있다. 그리고, 호스트 메모리는 추천 시스템 서비스를 제공하기 위한 운영 체제 또는 응용 프로그램을 저장할 수 있다. 그리고, 호스트 장치는 복수의 서브 메모리 시스템으로 쿼리를 브로드 캐스트할 수 있다. 그리고, 호스트 장치는 쿼리를 이용하여, 복수의 서브 메모리 시스템 각각으로부터 부분 데이터들 중 쿼리 에 대응되는 데이터들을 획득하도록 복수의 서브 메모리 시스템을 제어할 수 있다. 그리고, 호스트 장치 는 획득한 데이터들을 이용하여 임베딩 데이터를 생성하는 풀링 연산을 수행하고, 임베딩 데이터를 호스 트 장치로 제공하도록 복수의 서브 메모리 시스템을 제어할 수 있다. 호스트 장치는 복수의 서브 메모리 시스템 각각으로부터 수신한 데이터를 기초로 임베딩 테이블을 업데이 트하기 위한 학습 데이터를 생성할 수 있다. 그리고, 호스트 장치는 학습 데이터를 쿼리와 함께 브로드 캐스트할 수 있다. 호스트 장치는 학습 데이터와 함께 브로드 캐스트된 쿼리를 이용하여, 학습 데이터를 분할하여 분할 데이터들을 생성하는 언풀링 연산을 수행하고, 복수의 서브 메모리 시스템 각각에서 분할 데이터 들에 대응되는 부분 데이터를 업데이트하도록 복수의 서브 메모리 시스템을 제어할 수 있다. 도 2는 본 발명의 일 실시 예에 따른 서브 메모리 시스템을 설명하기 위한 블록도이다. 도 2를 참조하면, 복수의 서브 메모리 시스템 중 어느 하나의 서브 메모리 시스템(1000a)이 도시되어 있 다. 서브 메모리 시스템(1000a)은 호스트 장치와의 통신 방식인 호스트 인터페이스에 따라서 다양한 종류의 메모리 시스템 중 어느 하나로 구현될 수 있다. 예를 들면, 서브 메모리 시스템(1000a)은 SSD, MMC, eMMC, RS- MMC, micro-MMC 형태의 멀티 미디어 카드(multi-media Card), SD, mini-SD, micro-SD 형태의 시큐어 디지털 (secure digital) 카드, USB(Universal Serial Bus) 메모리 시스템, UFS(Universal Flash Storage) 장치, PCMCIA(Personal Computer Memory Card International Association) 카드 형태의 메모리 시스템, PCI(Peripheral Component Interconnection)) 카드 형태의 메모리 시스템, PCI-E(PCI Express) 카드 형태의 메 모리 시스템, CF(Compact Flash) 카드, 스마트 미디어(Smart Media) 카드 메모리 스틱(Memory Stick) 등과 같 은 다양한 종류의 메모리 시스템 중 어느 하나로 구현될 수 있다. 서브 메모리 시스템(1000a)은 다양한 종류의 패키지(package) 형태들 중 어느 하나로 구현될 수 있다. 예를 들 면, 서브 메모리 시스템(1000a)은 POP(package on package), SIP(system in package), SOC(system on chip), MCP(multi-chip package), COB(chip on board), WFP(wafer-level fabricated package), WSP(wafer-level stack package) 등과 같은 다양한 종류의 패키지 형태들 중 어느 하나로 구현될 수 있다. 그리고, 서브 메모리 시스템(1000a)은 메모리 장치 및 메모리 컨트롤러를 포함할 수 있다. 메모리 장치는 데이터를 저장하거나 저장된 데이터를 이용할 수 있다. 구체적으로, 메모리 장치는 메 모리 컨트롤러의 제어에 응답하여 동작할 수 있다. 그리고, 메모리 장치는 데이터를 저장하는 복수의 뱅크들을 포함할 수 있다. 복수의 뱅크들은 각각 복수의 메모리 셀들을 포함하는 메모리 셀 어레이를 포함할 수 있다. 메모리 셀들은 각각 하나의 데이터 비트를 저장하는 싱글 레벨 셀(Single Level Cell; SLC), 두 개의 데이터 비 트들을 저장하는 멀티 레벨 셀(Multi Level Cell; MLC), 세 개의 데이터 비트들을 저장하는 트리플 레벨 셀 (Triple Level Cell; TLC) 또는 네 개의 데이터 비트를 저장할 수 있는 쿼드 레벨 셀(Quad Level Cell; QLC)로 구성될 수 있다. 메모리 셀 어레이는 복수의 메모리 블록들을 포함할 수 있다. 각 메모리 블록은 복수의 메모리 셀들을 포함할 수 있다. 하나의 메모리 블록은 복수의 페이지들을 포함할 수 있다. 실시 예에서, 페이지는 메모리 장치에 데이터를 저장하거나, 메모리 장치에 저장된 데이터를 리드하는 단위일 수 있다. 메모리 블록은 데이터를 지우는 단위일 수 있다. 메모리 장치은 DRAM(Dynamic Random Access Memory), SDRAM, DDR SDRAM, DDR2 SDRAM, DDR3 SDRAM, LPDDR SDARM, LPDDR2 SDRAM, LPDDR3 SDRAM 등과 같은 휘발성 랜덤 액세스 메모리일 수 있다. 본 명세서에서는 설명의 편의를 위해, 메모리 장치가 DRAM인 경우를 가정하여 설명한다. 메모리 장치는 메모리 컨트롤러로부터 커맨드 및 어드레스를 수신할 수 있다. 메모리 장치는 메 모리 셀 어레이 중 수신된 어드레스에 의해 선택된 영역을 액세스하도록 구성될 수 있다. 선택된 영역을 엑세스 한다는 것은 선택된 영역에 대해서 수신된 커맨드에 해당하는 동작을 수행함을 의미할 수 있다. 예를 들면, 메 모리 장치는 쓰기 동작(프로그램 동작), 리드 동작 및 이레이즈 동작을 수행할 수 있다. 여기서, 프로그램 동작은 메모리 장치가 어드레스에 의해 선택된 영역에 데이터를 기록하는 동작일 수 있다. 리드 동작은 메 모리 장치가 어드레스에 의해 선택된 영역으로부터 데이터를 읽는 동작을 의미할 수 있다. 이레이즈 동작 은 메모리 장치가 어드레스에 의해 선택된 영역에 저장된 데이터를 이레이즈하는 동작을 의미할 수 있다. 본 발명의 일 실시 예에 따르면, 메모리 장치는 임베딩 테이블을 저장하는 임베딩 테이블 저장부를 포함할 수 있다. 여기서, 임베딩 테이블은 기학습된 학습 모델의 아이템들에 대한 벡터 정보를 포함하는 테이블 일 수 있다. 구체적으로, 메모리 장치는 임베딩 테이블을 분할한 부분 데이터들을 저장할 수 있다. 부분 데이터들은 임베딩 테이블을 벡터 정보들의 디멘션 단위로 분할한 데이터일 수 있고, 메모리 장치는 적어 도 하나의 디멘션에 대응되는 부분 데이터를 저장할 수 있다. 중복된 설명을 방지하기 위하여, 임베딩 테이블 및 부분 데이터에 대한 상세한 설명은 도 3 내지 도 6을 참조하여 설명하도록 한다. 메모리 컨트롤러는 서브 메모리 시스템(1000a)의 전반적인 동작을 제어할 수 있다. 메모리 컨트롤러는 서브 메모리 시스템(1000a)에 전원이 인가되면 펌웨어(FW: firmware)를 실행할 수 있다. 펌웨어(FW)는 호스트 장치로부터 입력된 요청을 수신하거나 호스트 장치로 응답을 출력하는 호스트 인터페이스 레이어(HIL: Host Interface Layer), 호스트 장치의 인터페이스와 메모리 장치 의 인터페이스 사이의 동작의 관리하는 플래시 변환 레이어(FTL: Flash Translation Layer) 및 메모리 장치 에 커맨드를 제공하거나, 메모리 장치로부터 응답을 수신하는 플래시 인터페이스 레이어(FIL: Flash Interface Layer)를 포함할 수 있다. 메모리 컨트롤러는 호스트 장치로부터 데이터와 논리 어드레스(LA: Logical Address)를 입력 받고, 논리 어드레스를 메모리 장치에 포함된 데이터가 저장될 메모리 셀들의 주소를 나타내는 물리 어드레스 (PA: Physical Address)로 변환할 수 있다. 논리 어드레스는 논리 블록 어드레스(LBA: Logical Block Addres s)일 수 있고, 물리 어드레스는 물리 블록 어드레스(PBA: Physical Block Address)일 수 있다. 메모리 컨트롤러는 호스트 장치의 요청에 따라 프로그램 동작, 리드 동작 또는 이레이즈 동작 등을 수행하도록 메모리 장치를 제어할 수 있다. 프로그램 동작 시, 메모리 컨트롤러는 프로그램 커맨드, 물리 블록 어드레스 및 데이터를 메모리 장치에 제공할 수 있다. 리드 동작 시, 메모리 컨트롤러는 리드 커맨드 및 물리 블록 어드레스를 메모리 장치에 제공할 수 있다. 이레이즈 동작 시, 메모리 컨트롤러 는 이레이즈 커맨드 및 물리 블록 어드레스를 메모리 장치에 제공할 수 있다. 본 발명의 일 실시 예에 따르면, 메모리 컨트롤러는 리드 동작 제어부, 웨이트 갱신부 및 연산 부를 포함할 수 있다. 리드 동작 제어부는 호스트 장치로부터 수신한 쿼리의 논리 어드레스를 물리 어드레스로 변환하고, 메모리 장치로부터 물리 어드레스에 대응되는 데이터들을 리드하도록 메모리 장치를 제어할 수 있다. 호스트 장치로부터 수신한 쿼리에 응답하여, 메모리 컨트롤러의 리드 동작 제어부는 메모리 장 치로부터 부분 데이터들 중 쿼리에 대응되는 데이터들을 획득할 수 있다. 웨이트 갱신부는 호스트 장치로부터 수신한 데이터에 기초하여 메모리 장치에 저장된 부분 데 이터들의 가중치(weight)를 업데이트하도록 메모리 장치를 제어할 수 있다. 구체적으로, 웨이트 갱신부 는 호스트 장치로부터 수신한 쿼리 및 임베딩 데이터를 분할한 분할 데이터에 대응되는 부분 데이터 들을 업데이트하도록 메모리 장치를 제어할 수 있다. 웨이트 갱신부는 분할 데이터를 메모리 장치 에 저장하도록 메모리 장치를 제어하는 구성일 수 있다. 연산부는 임베딩 데이터를 생성하는 풀링 연산을 수행하거나, 분할 데이터들을 생성하는 언풀링 연산을 수 행할 수 있다. 구체적으로, 연산부는 호스트 장치로부터 수신한 쿼리에 응답하여, 메모리 장치로부터 쿼리에 대응되는 데이터들을 획득할 수 있다. 그리고, 연산부는 쿼리에 대응되는 데이터들을 이용하여 임베딩 데 이터를 생성하는 풀링 연산을 수행할 수 있다. 구체적으로, 연산부는 쿼리에 대응되는 데이터들을 압축하 는 폴링 연산을 통해 임베딩 데이터를 생성할 수 있다. 여기서, 폴링 연산은 데이터들의 벡터 정보를 상호간 원 소별 연산(element-wise operation)하는 동작일 수 있다. 예를 들어, 폴링 연산은 벡터 정보의 원소를 상호간 합산(sum)할 수 있다. 즉, 폴링 연산은 읽어온 복수의 벡터들을 하나의 벡터로 만드는 과정일 수 있다. 풀드 메 모리 시스템은 풀링 연산을 이용하여 데이터의 크기를 줄일 수 있고, 풀드 메모리 시스템은 호스 트 장치로 송신하는 데이터의 이동량을 줄일 수 있다. 그리고, 연산부는 호스트 장치로부터 수신한 쿼리 및 임베딩 데이터에 응답하여, 분할 데이터들을 생성하는 언풀링 연산을 수행할 수 있다. 구체적으 로, 연산부는 임베딩 데이터를 복수의 분할 데이터들로 분할하는 언풀링 연산을 수행할 수 있다. 도 3은 본 발명의 일 실시 예에 따른 임베딩 테이블을 설명하기 위한 도면이다. 도 3을 참조하면, 복수의 서브 메모리 시스템에 저장되는 임베딩 테이블이 도시되어 있다. 임베딩 테이블은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함할 수 있다. 여기서, 학습 모델은 인공지능 모델을 의미할 수 있고, 인공지능 모델은 학습을 통해 만들어진 것을 특징으로 할 수 있다. 구체적으 로, 임베딩 테이블은 카테고리로 분류 가능한 범주형 데이터 및 그에 대응되는 임베딩 벡터쌍의 모음일 수 있고, 학습 모델의 아이템들은 각각 범주형 데이터일 수 있다. 범주형 데이터들은 임베딩 알고리즘을 이용하여 자연어를 상호 유사성을 가지는 벡터 형태로 수치화될 수 있다. 예를 들어, 벡터는 '(3, 5)', '(0.1, -0.5, 2, 1.2)' 와 같이 여러 개의 정수 혹은 부동 소수로 이루어진 수집합일 수 있다. 즉, 임베딩 테이블은 카테고리 별 로 분류되도록 학습된 학습 모델의 범주형 데이터들 및 범주형 데이터의 벡터 정보들의 집합을 의미할 수 있다. 한편, 임베딩 벡터의 기울기 및 임베팅 벡터의 형태 등의 벡터 값이 유사할 수록 의미론적으로 유사한 의미의 단어일 수 있다. 본 발명의 일 실시 예에 따르면, 임베딩 테이블은 3차원으로 구성될 수 있다. 구체적으로, 도 3을 참조하면, 임 베딩 테이블은 'Table sizes', '# of features' 및 'dimension'을 포함하는 3차원으로 구성될 수 있다. 여기서, 'Table sizes'는 범주에 포함되는 아이템들의 개수를 의미할 수 있다. 예를 들어, <영화이름>이라는 카 테고리에 '해리포터' 및 '슈렉'이 포함되는 경우, 아이템이 2개일 수 있다. 그리고, '# of features'는 카테고 리 종류의 개수를 의미할 수 있다. 예를 들어, 임베딩 테이블이 <영화이름> 및 <영화장르>를 포함하는 경우, 카 테고리 종류의 개수는 2개일 수 있다. 마지막으로, 'dimension'는 임베딩 벡터의 차원을 의미할 수 있다. 즉, 벡터에 포함되는 수의 개수를 의미할 수 있다. '(0.1, -0.5, 2, 1.2)'는 4개의 수를 포함하므로, 4개의 차원일 수 있다. 도 4는 본 발명의 일 실시 예에 따른 부분 데이터들을 저장하는 방법을 설명하기 위한 도면이다. 도 4를 참조하면, 복수의 서브 메모리 시스템 각각에 저장되는 임베딩 테이블이 도시되어 있다. 임베딩 테이블은 부분 데이터들로 구성될 수 있다. 구체적으로, 부분 데이터들 각각은 임베딩 테이블을 벡터 정 보들의 디멘션 단위로 분할한 데이터일 수 있다. 복수의 서브 메모리 시스템 각각은 적어도 하나의 디멘션에 대 응되는 부분 데이터를 저장할 수 있다. 풀드 메모리 시스템은 임베딩 테이블들을 최대한 병렬적으로 배치함으로써, 복수의 서브 메모리 시스템에서 임베딩과 관련된 연산이 성능 저하 없이 수행될 수 있다. 도 5는 본 발명의 일 실시 예에 따른 부분 데이터들을 저장하는 방법을 설명하기 위한 도면이다. 도 5를 참조하면, 복수의 서브 메모리 시스템 각각에 저장되는 부분 데이터들이 도시되어 있다. 복수의 서브 메모리 시스템은 도 5의 임베딩 테이블에서 디멘션 방향으로 'k' 길이로 분할한 부분 데이터를 각각 저장할 수 있다. 예를 들어, 제1 서브 메모리 시스템은 벡터 정보의 디멘션이 'n'에서 'n+k-1'까지 디멘션 방향 으로 'k' 길이만큼 임베딩 테이블을 분할한 부분 데이터를 저장할 수 있다. 제2 서브 메모리 시스템은 벡터 정 보의 디멘션이 'n+k'에서 'n+2k-1'까지 'k' 길이만큼 임베딩 테이블을 분할한 부분 데이터를 저장할 수 있다. 이와 같은 방법으로, 풀드 메모리 시스템은 복수의 서브 메모리 시스템에 임베딩 테이블을 저장할 수 있다. 복수의 서브 메모리 시스템에 저장되는 부분 데이터들은 각각 디멘션 방향으로 동일한 길이로 분할된 임 베딩 테이블이 저장되는 것으로 설명하였으나, 이는 일 실시 예에 불과하다. 구현시에는 복수의 서브 메모리 시 스템 각각에 디멘션 방향으로 임의의 길이로 분할된 임베딩 테이블이 저장될 수도 있다. 도 6은 본 발명의 일 실시 예에 따른 부분 데이터들을 저장하는 방법을 설명하기 위한 도면이다. 도 6을 참조하면, 복수의 메모리 장치에 각각 저장되는 부분 데이터들이 도시되어 있다. 도 5에서 설명한 바와 같이, 서브 메모리 시스템은 임베딩 테이블을 디멘션 단위로 분할한 부분 데이터를 저장 할 수 있다. 구체적으로, 각각의 서브 메모리 시스템은 임베딩 테이블을 디멘션 방향으로 'k' 길이만큼 분할한 부분 데이터를 저장할 수 있다. 그리고, 서브 메모리 시스템은 복수의 메모리 장치들에 부분 데이터를 저장할 수 있다. 서브 메모리 시스템은 복수의 메모리 장치를 포함할 수 있고, 복수의 메모리 장치 각각은 적어도 하나의 디멘션에 대응되는 부분 데이 터를 저장할 수 있다. 예를 들어, 제i 서브 메모리 시스템은 제1 메모리 장치(MD1) 내지 제n 메모리 장치(MDn)를 포함할 수 있고, 각 각의 메모리 장치는 적어도 하나의 디멘션에 대응되는 부분 데이터를 저장할 수 있다. 도 7은 본 발명의 일 실시 예에 따른 룩업 동작 및 풀링 동작을 설명하기 위한 도면이다. 도 7을 참조하면, 임베딩 테이블로부터 벡터 정보들을 찾는 룩업 동작 및 벡터 정보들을 압축하는 풀링 동작이 도시되어 있다. 호스트 장치로부터 쿼리를 수신하면, 호스트 장치와 연결된 복수의 서브 메모리 시스템 각각 은 쿼리에 대응되는 데이터들을 획득하는 룩업 동작을 수행할 수 있다. 구체적으로, 룩업 동작은 복수의 서브 메모리 시스템 각각에서 병렬적으로 수행될 수 있다. 각 서브 메모 리 시스템은 복수의 메모리 장치를 포함하고, 복수의 메모리 장치는 각각 저장된 부분 데이터에서 쿼 리에 대응되는 데이터들을 획득하는 룩업 동작을 수행할 수 있다. 즉, 복수의 메모리 장치가 병렬적으로 룩업 동작을 수행하므로, 복수의 서브 메모리 시스템은 룩업 동작을 동시에 수행할 수 있다. 그리고, 복수의 서브 메모리 시스템 각각은 룩업 동작을 통해 획득한 데이터들을 이용하여 임베딩 데이터 를 생성하는 풀링 동작을 수행할 수 있다. 구체적으로, 풀링 동작은 복수의 서브 메모리 시스템 각각에서 병렬적으로 수행될 수 있다. 각 서브 메모 리 시스템은 메모리 컨트롤러를 포함하고, 메모리 컨트롤러는 룩업 동작을 통해 획득한 데이터들을 압축하여 임베딩 데이터를 생성하는 풀링 동작을 수행할 수 있다. 본 발명의 일 실시 예에 따르면, 메모리 컨트 롤러는 복수의 메모리 장치로부터 획득한 데이터들의 벡터 정보를 원소별 연산(element-wise operation)할 수 있다. 구체적으로, 메모리 컨트롤러는 벡터 정보를 원소별 연산하여 하나의 벡터 정보를 생성할 수 있다. 풀드 메모리 시스템은 복수의 서브 메모리 시스템 각각에서 풀링 연산을 수행하여 복수의 서브 메모리시스템으로부터 호스트 장치로의 데이터 이동량을 감소시킬 수 있다. 도 8은 본 발명의 일 실시 예에 따른 추론 동작을 설명하기 위한 도면이다. 도 8을 참조하면, 복수의 서브 메모리 시스템 각각에서 임베딩 테이블로부터 획득한 벡터 정보들을 압축 하는 폴링 연산을 수행하고, 생성된 임베딩 데이터를 호스트 장치로 제공하는 추론 동작이 도시되어 있다. 구체적으로, 각 서브 메모리 시스템은 임베딩 테이블을 분할한 부분 데이터들을 복수의 메모리 장치에 저 장할 수 있다. 여기서, 임베딩 테이블은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 테이블 일 수 있다. 복수의 메모리 장치는 벡터 정보들의 디멘션 단위로 분할한 부분 데이터들을 저장할 수 있다. 예를 들어, 각 부분 데이터들은 16 내지 1024개의 디멘션 단위로 분할된 부분 데이터들을 포함할 수 있다. 그리 고, 각 서브 메모리 시스템에 포함된 메모리 컨트롤러는 복수의 메모리 장치 각각으로부터 부분 데이 터들 중 호스트 장치로부터 수신한 쿼리에 대응되는 데이터들을 획득할 수 있다. 각 서브 메모리 시스템에 포함된 메모리 컨트롤러는 획득한 데이터들을 이용하여 임베딩 데이터를 생성하 는 풀링 연산을 수행할 수 있다. 예를 들어, 메모리 컨트롤러는 복수의 메모리 장치로부터 1 내지 80 개의 데이터들을 획득하고, 획득한 데이터들의 벡터 정보들을 원소별 연산(element-wise operation)하여 임베딩 데이터를 생성할 수 있다. 여기서, 폴링 연산은 데이터들의 벡터 정보를 상호간 원소별 연산(element-wise operation)하는 동작일 수 있다. 예를 들어, 폴링 연산은 벡터 정보의 원소를 상호간 합산(sum)할 수 있다. 즉, 폴링 연산은 읽어온 복수의 벡터들을 하나의 벡터로 만드는 과정일 수 있다. 각 서브 메모리 시스템에 포함된 메모리 컨트롤러는 생성된 임베딩 데이터를 호스트 장치로 제공할 수 있다. 구체적으로, 메모리 컨트롤러는 임베딩 데이터들을 축적하여 배치(batch)를 생성할 수 있다. 그 리고, 메모리 컨트롤러는 생성된 배치(batch)를 호스트 장치로 제공할 수 있다. 여기서, 배치 (batch)는 임베딩 데이터의 묶음 또는 모음 데이터일 수 있고, 하나의 배치(batch)에는 128 내지 1024개의 임베 딩 데이터들을 포함할 수 있다. 도 9는 본 발명의 일 실시 예에 따른 학습 동작을 설명하기 위한 도면이다. 도 9를 참조하면, 복수의 서브 메모리 시스템 각각에서 호스트 장치로부터 수신한 그라디언트 (gradient)를 분할하는 언풀링 연산을 수행하고, 분할된 그라디언트(gradient)를 이용하여 임베딩 테이블을 업 데이트하는 학습 동작이 도시되어 있다. 여기서, 그라디언트는 임베딩 테이블을 업데이트하기 위한 데이터로, 가중치(weight)를 포함하는 임베딩 데이터일 수 있다. 각 서브 메모리 시스템은 임베딩 테이블을 분할한 부분 데이터들을 복수의 메모리 장치에 저장할 수 있다. 여기서, 임베딩 테이블은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 테이블일 수 있다. 복 수의 메모리 장치는 벡터 정보들의 디멘션 단위로 분할한 부분 데이터들을 저장할 수 있다. 예를 들어, 각 부분 데이터들은 16 내지 1024개의 디멘션 단위로 분할된 부분 데이터들을 포함할 수 있다. 각 서브 메모리 시스템에 포함된 메모리 컨트롤러는 호스트 장치로부터 임베딩 테이블에 대한 업데 이트를 요청하는 쿼리 및 임베딩 데이터를 수신할 수 있다. 여기서, 호스트 장치로부터 수신하는 임베딩 데이터는 배치(batch) 단위로 수신할 수 있다. 그리고, 메모리 컨트롤러는 호스트 장치로부터 수신 한 임베딩 데이터를 이용하여 분할 데이터들을 생성하는 언풀링 연산을 수행할 수 있다. 예를 들어, 메모리 컨 트롤러는 호스트 장치로부터 가중치(weight)를 포함하는 임베딩 데이터들의 묶음을 수신할 수 있다. 그리고, 메모리 컨트롤러는 호스트 장치로부터 수신한 임베딩 데이터들을 이용하여 분할 데이터들을 생성할 수 있다. 메모리 컨트롤러는 임베딩 테이블을 업데이트하기 용이하도록 임베딩 데이터를 분할 데이 터들로 분할하는 언풀링 연산을 수행할 수 있다. 여기서, 언풀링 연산은 데이터들의 벡터 정보를 상호간 원소별 연산(element-wise operation)하는 동작일 수 있다. 그리고, 각 서브 메모리 시스템에 포함된 메모리 컨트롤러는 복수의 메모리 장치 각각에서 분할 데이 터들에 대응되는 부분 데이터를 업데이트하도록 복수의 메모리 장치를 제어할 수 있다. 풀드 메모리 시스템은 복수의 서브 메모리 시스템으로 업데이트를 요청하는 쿼리 및 가중치 (weight)가 포함된 임베딩 데이터를 브로드 캐스트하고, 각 서브 메모리 시스템에서 부분 데이터를 업데이트하 도록 제어할 수 있다. 즉, 풀드 메모리 시스템은 쿼리 및 임베딩 데이터를 이용하여 각 서브 메모리 시 스템에 저장된 학습 모델을 학습(training)시킬 수 있다. 도 10은 본 발명의 일 실시 예에 따른 호스트 장치와 서브 메모리 시스템의 통신 패킷을 설명하기 위한 도면이 다. 도 10을 참조하면, 호스트 장치 및 복수의 서브 메모리 시스템 간의 통신 패킷이 도시되어 있다. 구체적으로, 제1 통신 패킷은 호스트 장치에서 복수의 서브 메모리 시스템로 전송되는 메세지 일 수 있다. 그리고, 제1 통신 패킷은 'Task ID', 'Opcode', 'Source Address', 'Source Size' 및 'Destination Address'를 포함할 수 있다. 제1 통신 패킷은 총 91 bit로 구성될 수 있으며, 'Task ID'에는 4 비트(bit)가 할당될 수 있다. 'Task I D'는 호스트 장치의 동작 상태를 나타낼 수 있다. 예컨대, 'Task ID'는 호스트 장치의 동작이 수행 중(running)인지 또는 종료(terminated)인지를 나타낼 수 있다. 호스트 장치는 'Task ID'를 이용하여 서 브 메모리 시스템의 동작을 재정렬할 수 있다. 그리고, 'Opcode'에는 3 비트(bit)가 할당되고, 복수의 임베딩 동작들을 구분하기 위한 데이터가 포함될 수 있 다. 구체적으로, 호스트 장치는 임베딩 테이블의 초기 설정(initialization), 추론 동작 및 학습 동작을 구분하기 위해 'Opcode'를 이용할 수 있다. 그리고, 'Source Address'에는 32 비트(bit)가 할당되고, 서브 메모리 시스템이 쿼리 또는 그라디언트의 소스 주소에 대한 데이터를 포함할 수 있다. 구체적으로, 호스트 장치는 'Source Address'를 이용하여 서브 메 모리 시스템이 호스트 메모리로부터 가져가야할 쿼리 또는 그라디언트의 어드레스에 대한 데이터를 포함할 수 있다. 여기서, 그라디언트는 임베딩 테이블을 업데이트하기 위한 데이터로, 가중치(weight)를 포함하는 임베딩 데이터일 수 있다. 그리고, 'Source Size'에는 20 비트(bit)가 할당되고, 쿼리 또는 그라디언트의 크기에 대한 데이터를 포함할 수 있다. 그리고, 'Destination Address'에는 서브 메모리 시스템이 내부 동작을 수행한 결과를 수신할 호스트 메 모리의 어드레스를 포함할 수 있다. 호스트 장치는 제1 통신 패킷을 이용하여 복수의 서브 메모리 시스템과 통신할 수 있다. 그리 고, 복수의 서브 메모리 시스템은 호스트 장치로부터 제1 통신 패킷을 수신하면 응답 메시지인 제2 통신 패킷을 전송할 수 있다. 여기서, 제2 통신 패킷은 'Task ID' 및 'Opcode'를 포함할 수 있다. 도 11은 본 발명의 일 실시 예에 따른 추론 동작 및 학습 동작을 설명하기 위한 도면이다. 도 11을 참조하면, 복수의 서브 메모리 시스템 및 호스트 장치를 포함하는 풀드 메모리 시스템 에서 추론 동작 및 학습 동작을 수행하는 도면이 도시되어 있다. 서브 메모리 시스템은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 임베딩 테이블을 분할한 부분 데이터들을 메모리 장치에 저장할 수 있다. 여기서, 임베딩 테이블은 기학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함하는 테이블일 수 있다. 그리고, 호스트 장치는 임베딩 데이터들을 생성하는 풀링 연산을 수행하도록 서브 메모리 시스템을 제어할 수 있다. 여기서, 풀링 연산은 데이터들의 벡터 정보를 상호간 원소별 연산(element-wise operation)하 여 하나의 벡터 정보를 생성하는 동작일 수 있다. 그리고 서브 메모리 시스템은 생성된 임베딩 데이터들 을 호스트 장치로 제공할 수 있다. 호스트 장치는 서브 메모리 시스템으로부터 수신한 임베딩 데이터들을 이용하여 학습 데이터를 생 성할 수 있다. 구체적으로, 호스트 장치는 임베딩 데이터들의 특징을 비교할 수 있다. 임베딩 데이터들 은 임베딩 벡터로 구성될 수 있고, 호스트 장치는 임베딩 벡터의 기울기, 형태, 크기 등의 벡터 값을 비 교할 수 있다. 여기서, 임베딩 벡터의 기울기 및 임베팅 벡터의 형태 등의 벡터 값이 유사할 수록 의미론적으로 유사한 의미의 단어일 수 있다. 호스트 장치는 서브 메모리 시스템으로부터 수신한 임베딩 데이터 들의 점수를 계산하고, 계산된 점수를 바탕으로 학습 데이터를 생성할 수 있다. 여기서, 학습 데이터는 임베딩테이블을 업데이트하기 위한 데이터로, 가중치(weight)가 보정된 임베딩 데이터일 수 있다. 그리고, 호스트 장치는 서브 메모리 시스템이 학습 데이터를 학습하도록 서브 메모리 시스템(100 0)을 제어할 수 있다. 서브 메모리 시스템은 호스트 장치로부터 수신한 학습 데이터를 분할하는 언 풀링 연산을 수행하고, 임베딩 테이블의 가중치(weight)를 업데이트할 수 있다. 도 12는 본 발명의 다른 실시 예에 따른 메모리 컨트롤러의 구성을 설명하기 위한 블록도이다. 도 12를 참조하면, 메모리 컨트롤러는 프로세서, RAM, 에러 정정 회로, ROM, 호스트 인터페이스, 및 메모리 인터페이스를 포함할 수 있다. 도 12에 도시된 메모리 컨트롤러 는 도 1 및 도 2에 도시된 메모리 컨트롤러의 일 실시 예일 수 있다. 프로세서는 호스트 인터페이스를 이용하여 호스트 장치와 통신하고, 메모리 컨트롤러 의 동작을 제어하기 위해 논리 연산을 수행할 수 있다. 예를 들면, 프로세서는 호스트 장치 또는 외부 장치로부터 수신한 요청에 기초하여 프로그램 명령, 데이터 파일, 데이터 구조 등을 로드하고, 각종 연산 을 수행하거나 커맨드 및 어드레스를 생성할 수 있다. 예를 들어, 프로세서는 프로그램 동작, 리드 동작, 소거 동작, 서스펜드 동작 및 파라미터 셋팅 동작에 필요한 다양한 커맨드들(commands)을 생성할 수 있다. 그리고, 프로세서는 플래시 변환 계층(FTL)의 기능을 수행할 수 있다. 프로세서는 플래시 변환 계 층(FTL)을 통해 호스트 장치가 제공한 논리 블록 어드레스(Logical Block Address, LBA)를 물리 블록 어 드레스(Physical Block Address, PBA)로 변환할 수 있다. 플래시 변환 계층(FTL)은 맵핑 테이블을 이용하여 논 리 블록 어드레스(LBA)를 입력 받아, 물리 블록 어드레스(PBA)로 변환시킬 수 있다. 플래시 변환 계층(FTL)의 주소 맵핑 방법에는 맵핑 단위에 따라 여러 가지가 있다. 대표적인 어드레스 맵핑 방법에는 페이지 맵핑 방법 (Page mapping method), 블록 맵핑 방법(Block mapping method), 그리고 혼합 맵핑 방법(Hybrid mapping method)이 있다. 그리고, 프로세서는 호스트 장치의 요청 없이 커맨드를 생성할 수 있다. 예를 들면, 프로세서 는 메모리 장치의 리프레쉬 동작(refresh operation)을 위한 동작들과 같은 배경(background) 동작 들을 위해 커맨드를 생성할 수 있다. RAM은 프로세서의 버퍼 메모리, 동작 메모리 또는 캐시 메모리로 사용될 수 있다. 그리고, RAM은 프로세서가 실행하는 코드들 및 커맨드들을 저장할 수 있다. RAM은 프로세서에 의해 처리되는 데이터를 저장할 수 있다. 그리고, RAM은 구현시에 SRAM(Static RAM) 또는 DRAM(Dynamic RAM)을 포함하여 구현될 수 있다. 에러 정정 회로는 프로그램 동작 또는 리드 동작시 에러를 검출하고 검출된 에러를 정정할 수 있다. 구체 적으로, 에러 정정 회로는 에러 정정 코드(Error Correction Code, ECC)에 따라 에러 정정 동작을 수행 할 수 있다. 그리고, 에러 정정 회로는 메모리 장치에 기입될 데이터에 기반하여 에러 정정 인코딩 (ECC encoding)을 수행할 수 있다. 에러 정정 인코딩이 수행된 데이터는 메모리 인터페이스를 통해 메모 리 장치로 전달될 수 있다. 또한, 에러 정정 회로는 메모리 장치로부터 메모리 인터페이스 를 통해 수신되는 데이터에 대해 에러 정정 디코딩(ECC decoding)을 수행할 수 있다. ROM은 메모리 컨트롤러의 동작에 필요한 다양한 정보들을 저장하는 저장부(storage unit)로서 사용 될 수 있다. 구체적으로, ROM는 맵 테이블(map table)을 포함할 수 있고, 맵 테이블에는 물리-논리 어드 레스 정보와 논리-물리 어드레스 정보가 저장될 수 있다. 그리고, ROM은 프로세서에 의해 제어될 수 있다. 호스트 인터페이스는 호스트 장치 및 메모리 컨트롤러 사이의 데이터 교환을 수행하기 위한 프로토콜을 포함할 수 있다. 구체적으로, 호스트 인터페이스는 USB (Universal Serial Bus) 프로토콜, MMC (multimedia card) 프로토콜, PCI (peripheral component interconnection) 프로토콜, PCI-E (PCI- express) 프로토콜, ATA (Advanced Technology Attachment) 프로토콜, Serial-ATA 프로토콜, Parallel-ATA 프 로토콜, SCSI (small computer small interface) 프로토콜, ESDI (enhanced small disk interface) 프로토콜, 그리고 IDE (Integrated Drive Electronics) 프로토콜, 사유(private) 프로토콜 등과 같은 다양한 인터페이스 프로토콜들 중 적어도 하나를 통해 호스트 장치와 통신하도록 구성될 수 있다. 메모리 인터페이스는 프로세서의 제어에 따라 통신 프로토콜을 이용하여 메모리 장치와 통신 을 수행할 수 있다. 구체적으로, 메모리 인터페이스는 채널을 통해 커맨드, 어드레스 및 데이터를 메모리 장치와 통신할 수 있다."}
{"patent_id": "10-2020-0178442", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시 예에 따른 풀드 메모리 시스템을 설명하기 위한 블록도이다. 도 2는 본 발명의 일 실시 예에 따른 서브 메모리 시스템을 설명하기 위한 블록도이다. 도 3은 본 발명의 일 실시 예에 따른 임베딩 테이블을 설명하기 위한 도면이다. 도 4는 본 발명의 일 실시 예에 따른 부분 데이터들을 저장하는 방법을 설명하기 위한 도면이다. 도 5는 본 발명의 일 실시 예에 따른 부분 데이터들을 저장하는 방법을 설명하기 위한 도면이다. 도 6은 본 발명의 일 실시 예에 따른 부분 데이터들을 저장하는 방법을 설명하기 위한 도면이다. 도 7은 본 발명의 일 실시 예에 따른 룩업 동작 및 풀링 동작을 설명하기 위한 도면이다. 도 8은 본 발명의 일 실시 예에 따른 추론 동작을 설명하기 위한 도면이다.도 9는 본 발명의 일 실시 예에 따른 학습 동작을 설명하기 위한 도면이다. 도 10은 본 발명의 일 실시 예에 따른 호스트 장치와 서브 메모리 시스템의 통신 패킷을 설명하기 위한 도면이 다. 도 11은 본 발명의 일 실시 예에 따른 추론 동작 및 학습 동작을 설명하기 위한 도면이다. 도 12는 본 발명의 다른 실시 예에 따른 메모리 컨트롤러의 구성을 설명하기 위한 블록도이다."}
