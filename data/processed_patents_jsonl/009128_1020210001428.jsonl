{"patent_id": "10-2021-0001428", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0099322", "출원번호": "10-2021-0001428", "발명의 명칭": "전자 장치 및 이를 이용한 메모리 관리 방법", "출원인": "삼성전자주식회사", "발명자": "정관희"}}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,메모리;상기 메모리와 작동적으로 연결된 프로세서를 포함하며,상기 프로세서는,상기 메모리의 잔여 용량을 확인하고, 및상기 메모리의 잔여 용량이 지정된 비율 미만으로 확인되는 것에 기반하여, 어플리케이션의 프로파일을 이용한컴파일 수행을 차단하거나, 또는 어플리케이션의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출물을 삭제하도록 설정된 전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 지정된 비율은, 제1 지정된 비율, 제2 지정된 비율, 및 제3 지정된 비율을 포함하며,상기 프로세서는,상기 메모리의 잔여 용량이 상기 제1 지정된 비율 미만으로 확인되는 것에 기반하여, 자주 사용된 어플리케이션의 메소드(method)에 대한 프로파일을 확인하고, 및상기 자주 사용된 어플리케이션의 메소드(method)에 대한 프로파일을 이용한 컴파일 수행을 차단하도록 설정된전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2 항에 있어서,상기 프로세서는,상기 메모리의 잔여 용량이 상기 제1 지정된 비율보다 작은 상기 제2 지정된 비율 미만으로 확인되는 것에 기반하여, 업데이트 수행으로 사용하지 않는 시스템 패키지의 경로를 확인하고, 및상기 확인된 경로에 위치하는 상기 시스템 패키지의 컴파일 수행을 통해서 생성된 산출물을 삭제하도록 설정된전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서,상기 프로세서는,상기 메모리의 잔여 용량이 상기 제2 지정된 비율보다 작은 상기 제3 지정된 비율 미만으로 확인되는 것에 기반하여, 상기 전자 장치에 설치된 어플리케이션들의 패키지의 리스트를 획득하고,상기 획득한 리스트로부터 지정된 기간 동안 미사용 중인 적어도 하나의 어플리케이션의 패키지를 확인하고,상기 지정된 기간 동안 미사용 중인 적어도 하나의 어플리케이션의 패키지의 설치 경로 및/또는 명령어 집합 구조의 정보를 포함하는 정보를 확인하고,상기 획득한 어플리케이션의 패키지의 설치 경로 및/또는 상기 명령어 집합 구조의 정보에 기반하여, 상기 미사용 중인 적어도 하나의 어플리케이션의 패키지의 산출물이 위치하는 경로를 확인하고, 및공개특허 10-2022-0099322-3-상기 경로에 위치하는 상기 산출물을 삭제하도록 설정된 전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 4 항에 있어서,상기 프로세서는,상기 리스트에 포함된 어플리케이션들 각각의 아이콘이 존재하는지 여부를 확인하고,상기 어플리케이션들 각각의 아이콘이 존재하면, 각 어플리케이션의 실행 이벤트, 상기 각 어플리케이션을 이용한 공유 이벤트, 상기 각 어플리케이션의 팝업 메시지 이벤트, 상기 각 어플리케이션의 위젯을 설치하는 이벤트의 발생 여부, 및 상기 각 어플리케이션이 특정 기능으로 설정되었는지 여부에 기반하여, 상기 각 어플리케이션의 미사용 기간을 확인하고, 및상기 미사용 기간이 지정된 기간을 초과하는 적어도 하나의 어플리케이션을 산출물을 삭제할 리스트에 추가하도록 설정된 전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5 항에 있어서,상기 프로세서는,상기 어플리케이션들 각각의 아이콘이 존재하지 않으면, 상기 각 어플리케이션의 패키지를 구성하는 어플리케이션 컴포넌트가 마지막으로 사용된 시점을 확인하고,상기 어플리케이션 컴포넌트가 마지막으로 사용된 시점에 기반하여, 상기 어플리케이션 컴포넌트의 미사용 기간을 확인하고, 및상기 미사용 기간이 지정된 기간을 초과하는 적어도 하나의 어플리케이션 컴포넌트를 상기 산출물을 삭제할 리스트에 추가하도록 설정된 전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 4 항에 있어서,상기 프로세서는,상기 산출물을 삭제한 후, 상기 메모리의 잔여 용량이 상기 제3 지정된 비율 이상으로 확인되는 것에 기반하여,상기 산출물이 삭제된 패키지의 컴파일을 수행하도록 설정된 전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 4 항에 있어서,상기 프로세서는,상기 산출물을 삭제한 후, 상기 메모리의 잔여 용량이 상기 제2 지정된 비율 이상으로 확인되는 것에 기반하여,상기 어플리케이션의 프로파일을 이용한 재 컴파일을 통해 상기 삭제된 산출물을 복원하도록 설정된 전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8 항에 있어서,상기 프로세서는,상기 메모리의 잔여 용량이 상기 제2 지정된 비율 이상으로 확인되는 것에 기반하여, 자바코드 파일 및 상기 어플리케이션의 프로파일에 기반하여, 상기 재 컴파일을 수행하도록 설정된 전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 4 항에 있어서,상기 산출물을 삭제한 후, 상기 메모리의 잔여 용량이 상기 제3 지정된 비율 이상으로 확인되는 것에 기반하여,공개특허 10-2022-0099322-4-자바코드 파일을 기반으로 컴파일을 수행하여, 어플리케이션의 기본적인 기능을 복구하고, 및상기 메모리의 잔여 용량이 제3 지정된 비율보다 큰 상기 제2 지정된 비율 이상으로 확인되는 것에 기반하여,상기 어플리케이션의 프로파일 기반으로 컴파일을 수행하여, 상기 어플리케이션의 사용 시점으로 복구하도록 설정된 전자 장치."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "전자 장치의 메모리 관리 방법에 있어서,메모리의 잔여 용량을 확인하는 동작; 및상기 메모리의 잔여 용량이 지정된 비율 미만으로 확인되는 것에 기반하여, 어플리케이션의 프로파일을 이용한컴파일 수행을 차단하거나, 또는 어플리케이션의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출물을 삭제하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서,상기 지정된 비율은, 제1 지정된 비율, 제2 지정된 비율, 및 제3 지정된 비율을 포함하며,상기 산출물을 삭제하는 동작은,상기 메모리의 잔여 용량이 상기 제1 지정된 비율 미만으로 확인되는 것에 기반하여, 자주 사용된 어플리케이션의 메소드(method)에 대한 프로파일을 확인하는 동작; 및상기 자주 사용된 어플리케이션의 메소드(method)에 대한 프로파일을 이용한 컴파일 수행을 차단하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 12 항에 있어서,상기 산출물을 삭제하는 동작은,상기 메모리의 잔여 용량이 상기 제1 지정된 비율보다 작은 상기 제2 지정된 비율 미만으로 확인되는 것에 기반하여, 업데이트 수행으로 사용하지 않는 시스템 패키지의 경로를 확인하는 동작; 및상기 확인된 경로에 위치하는 상기 시스템 패키지의 컴파일 수행을 통해서 생성된 산출물을 삭제하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 13 항에 있어서,상기 산출물을 삭제하는 동작은,상기 메모리의 잔여 용량이 상기 제2 지정된 비율보다 작은 상기 제3 지정된 비율 미만으로 확인되는 것에 기반하여, 상기 전자 장치에 설치된 어플리케이션들의 패키지의 리스트를 획득하는 동작;상기 획득한 리스트로부터 지정된 기간 동안 미사용 중인 적어도 하나의 어플리케이션의 패키지를 확인하는 동작;상기 지정된 기간 동안 미사용 중인 적어도 하나의 어플리케이션의 패키지의 설치 경로 및/또는 명령어 집합 구조의 정보를 포함하는 정보를 확인하는 동작;상기 획득한 어플리케이션의 패키지의 설치 경로 및/또는 상기 명령어 집합 구조의 정보에 기반하여, 상기 미사용 중인 적어도 하나의 어플리케이션의 패키지의 산출물이 위치하는 경로를 확인하는 동작; 및상기 경로에 위치하는 상기 산출물을 삭제하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "공개특허 10-2022-0099322-5-제 14 항에 있어서,상기 미사용 중인 적어도 하나의 어플리케이션의 패키지를 확인하는 동작은,상기 리스트에 포함된 어플리케이션들 각각의 아이콘이 존재하는지 여부를 확인하는 동작;상기 어플리케이션들 각각의 아이콘이 존재하면, 각 어플리케이션의 실행 이벤트, 상기 각 어플리케이션을 이용한 공유 이벤트, 상기 각 어플리케이션의 팝업 메시지 이벤트, 상기 각 어플리케이션의 위젯을 설치하는 이벤트의 발생 여부, 및 상기 각 어플리케이션이 특정 기능으로 설정되었는지 여부에 기반하여, 상기 각 어플리케이션의 미사용 기간을 확인하는 동작; 및상기 미사용 기간이 지정된 기간을 초과하는 적어도 하나의 어플리케이션을 산출물을 삭제할 리스트에 추가하는동작을 포함하는 방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 15 항에 있어서,상기 어플리케이션들 각각의 아이콘이 존재하지 않으면, 상기 각 어플리케이션의 패키지를 구성하는 어플리케이션 컴포넌트가 마지막으로 사용된 시점을 확인하는 동작;상기 어플리케이션 컴포넌트가 마지막으로 사용된 시점에 기반하여, 상기 어플리케이션 컴포넌트의 미사용 기간을 확인하는 동작; 및상기 미사용 기간이 지정된 기간을 초과하는 적어도 하나의 어플리케이션 컴포넌트를 상기 산출물을 삭제할 리스트에 추가하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 14 항에 있어서,상기 산출물을 삭제한 후, 상기 메모리의 잔여 용량이 상기 제3 지정된 비율 이상으로 확인되는 것에 기반하여,상기 산출물이 삭제된 패키지의 컴파일을 수행하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 14 항에 있어서,상기 산출물을 삭제한 후, 상기 메모리의 잔여 용량이 상기 제2 지정된 비율 이상으로 확인되는 것에 기반하여,상기 어플리케이션의 프로파일을 이용한 재 컴파일을 통해 상기 삭제된 산출물을 복원하는 동작을 더 포함하는방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 18 항에 있어서,상기 재 컴파일을 통해 상기 삭제된 산출물을 복원하는 동작은,상기 메모리의 잔여 용량이 상기 제2 지정된 비율 이상으로 확인되는 것에 기반하여, 자바코드 파일 및 상기 어플리케이션의 프로파일에 기반하여, 상기 재 컴파일을 수행하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0001428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 14 항에 있어서,상기 산출물을 삭제한 후, 상기 메모리의 잔여 용량이 상기 제3 지정된 비율 이상으로 확인되는 것에 기반하여,자바코드 파일을 기반으로 컴파일을 수행하여, 어플리케이션의 기본적인 기능을 복구하는 동작; 및상기 메모리의 잔여 용량이 제3 지정된 비율보다 큰 상기 제2 지정된 비율 이상으로 확인되는 것에 기반하여,상기 어플리케이션의 프로파일 기반으로 컴파일을 수행하여, 상기 어플리케이션의 사용 시점으로 복구하는 동작을 더 포함하는 방법.공개특허 10-2022-0099322-6-"}
{"patent_id": "10-2021-0001428", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 다양한 실시예들에 따르면, 전자 장치는, 메모리, 상기 메모리와 작동적으로 연결된 프로세서를 포함 하며, 상기 프로세서는, 상기 메모리의 잔여 용량을 확인하고, 및 상기 메모리의 잔여 용량이 지정된 비율 미만 으로 확인되는 것에 기반하여, 어플리케이션의 프로파일을 이용한 컴파일 수행을 차단하거나, 또는 어플리케이션 의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출물을 삭제하도록 설정될 수 있다. 본 문서에 개시된 다양한 실시예들 이외의 다른 다양한 실시예가 가능하다."}
{"patent_id": "10-2021-0001428", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 다양한 실시예들은 전자 장치 및 이를 이용한 메모리 관리 방법에 관한 것이다."}
{"patent_id": "10-2021-0001428", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "전자 장치는 한정된 메모리 용량 내에서 많은 기능을 수행함에 의해, 메모리 용량이 부족한 상황이 발생할 수 있다. 예컨대, 전자 장치는 메모리의 잔여 용량이 지정된 용량 이하가 되는 경우, 메모리의 가용 공간 확보의 필요성에 대한 알림을 제공할 수 있다. 메모리의 가용 공간을 확보하기 위해, 사용자는 전자 장치에 저장된 파 일, 패키지 삭제, 패키지의 데이터, 및/또는 캐시 파일을 삭제할 수 있다."}
{"patent_id": "10-2021-0001428", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "어플리케이션의 패키지를 설치함에 따라 산출물들(artifacts)이 생성될 수 있으며, 산출물들의 경우, 오랜 기간 동안 사용되지 않음에도 불구하고, 이를 삭제할 수 있는 방법은 제공되지 않고 있다. 또한, 메모리의 잔여 용량 이 지정된 용량 이하일 경우에만, 메모리의 가용 공간 확보의 필요성에 대한 알림을 제공할 수 있다. 메모리 가 용 공간을 확보하기 위한 차등적인 동작을 제공하지 못함에 따라, 입출력 처리가 늦어질 뿐만 아니라 전자 장치 의 사용성 또한 저하될 수 있다. 본 개시의 다양한 실시예들에 따른 전자 장치는, 메모리의 잔여 용량이 지정된 비율 미만인 것에 기반하여, 어 플리케이션의 프로파일을 이용한 컴파일 수행을 차단하거나, 또는 컴파일 수행을 통해서 생성된 산출물을 선택 적으로 삭제할 수 있다. 본 개시의 다양한 실시예들에 따른 전자 장치는, 메모리의 잔여 용량이 지정된 용량 이상으로 확보되는 경우, 산출물이 삭제된 패키지의 컴파일을 수행하거나, 또는 어플리케이션의 프로파일을 이용한 재 컴파일을 통해 삭 제된 산출물을 복원할 수 있다."}
{"patent_id": "10-2021-0001428", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 다양한 실시예들에 따른 전자 장치는, 메모리, 상기 메모리와 작동적으로 연결된 프로세서를 포함하 며, 상기 프로세서는, 상기 메모리의 잔여 용량을 확인하고, 및 상기 메모리의 잔여 용량이 지정된 비율 미만으 로 확인되는 것에 기반하여, 어플리케이션의 프로파일을 이용한 컴파일 수행을 차단하거나, 또는 어플리케이션 의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출물을 삭제하도록 설정될 수 있다. 본 개시의 다양한 실시예들에 따른 전자 장치의 메모리를 관리하는 방법은, 메모리의 잔여 용량을 확인하는 동 작, 및 상기 메모리의 잔여 용량이 지정된 비율 미만으로 확인되는 것에 기반하여, 어플리케이션의 프로파일을 이용한 컴파일 수행을 차단하거나, 또는 어플리케이션의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출 물을 삭제하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0001428", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 다양한 실시예들에 따른 전자 장치는, 메모리의 잔여 용량에 기반하여 어플리케이션의 프로파일을 이 용한 컴파일 수행을 차단하거나, 또는 컴파일 수행을 통해서 생성된 산출물을 선택적으로 삭제하도록 제공함에 따라, 메모리의 가용 공간을 체계적으로 확보할 수 있을 뿐만 아니라, 메모리의 가용 공간의 한계로 인해 발생 할 수 있는 입출력 성능 열화를 방지할 수 있다. 본 개시의 다양한 실시예들에 따른 전자 장치는, 메모리의 잔여 용량이 지정된 용량 이상으로 확보되는 경우, 산출물이 삭제된 패키지의 컴파일을 수행하거나, 또는 어플리케이션의 프로파일을 이용한 재 컴파일을 통해 삭 제된 산출물을 복원하도록 제공함에 따라, 어플리케이션을 사용함에 있어서 성능 저하가 발생하지 않도록 할 수 있다."}
{"patent_id": "10-2021-0001428", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워 크)를 통하여 전자 장치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하 여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 서버를 통하여 전자 장치와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈 , 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리 , 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성 요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일 실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세 서는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또 는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로 세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능 에 특화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일 실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일 실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일 실시 예에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일 실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일 실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일 실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일 실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일 실시예에 따르면, 카메라 모듈은 하나 이 상의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일 실시예에 따르면, 전력 관리 모 듈은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일 실시예에 따르면, 배터 리는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일 실시예에 따르면, 통 신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일 실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일 실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일 실시예에 따르면, 안테나 모듈은 복수의 안테나 들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통 신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통 신 모듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품(예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일 실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일 실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치 간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일 실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴 퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일 실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는, 다양한 실시예들에 따른, 전자 장치를 도시한 블록도이다. 도 2를 참조하면, 전자 장치(예: 도 1의 전자 장치)는 통신 회로(예: 도 1의 통신 모듈), 메모리(예: 도 1의 메모리), 터치스크린 디스플레이(예: 도 1의 디스플레이 모듈), 및/또 는 프로세서(예: 도 1의 프로세서)를 포함할 수 있다. 본 개시의 다양한 실시예들에 따르면, 통신 회로(예: 도 1의 통신 모듈)는 외부 전자 장치(예: 도 1 의 전자 장치(102, 104), 서버)와 통신 채널을 설립하고, 외부 전자 장치와 다양한 데이터를 송수신하도록 지원할 수 있다. 일 실시예에서, 통신 회로는 프로세서의 제어 하에 서버(예: 앱스토어)로부터 업데이트 파일(예: 설 치 파일(예: apk(android application package) 파일))을 수신(또는 다운로드)할 수 있다. 본 개시의 다양한 실시예들에 따르면, 메모리(예: 도 1의 메모리)는 메모리의 잔여 용량에 기반 하여 차등적으로 메모리의 가용 공간을 확보하기 위한 상이한 동작을 수행하도록 하는 인스트럭션들 (instructions)을 저장할 수 있다. 메모리는 메모리의 잔여 용량이 지정된 비율 이상으로 확보되는 경우, 차등적으로 삭제된 산출물을 복원하기 위한 상이한 동작을 수행하도록 하는 인스트럭션들을 저장할 수 있 다. 본 개시의 다양한 실시예들에 따르면, 터치스크린 디스플레이(예: 도 1의 디스플레이 모듈)는 디스플 레이와 터치패널을 포함하는 일체형으로 구성될 수 있다. 일 실시예에서, 터치스크린 디스플레이는 프로세서의 제어 하에, 메모리의 가용 공간의 확보를 알리기 위한 알림을 포함하는 사용자 인터페이스를 표시할 수 있다. 본 개시의 다양한 실시예들에 따르면, 프로세서(예: 도 1의 프로세서)는 예를 들어, 마이크로 컨트롤 러 유닛(MCU, micro controller unit)을 포함할 수 있고, 운영 체제(OS) 또는 임베디드 소프트웨어 프로그램을 구동하여 프로세서에 연결된 다수의 하드웨어 구성 요소들을 제어할 수 있다. 프로세서는, 예를 들어, 메모리에 저장된 인스트럭션들(instructions)(예: 도 1의 프로그램)에 따라 다수의 하드웨어 구성 요소들을 제어할 수 있다. 일 실시예에서, 프로세서는 메모리의 잔여 용량을 확인할 수 있다. 예컨대, 프로세서는 스토리 지 매니저를 통해 메모리의 사용 가능한 용량의 비율에 대응하는 용량 정보를 수신할 수 있다. 일 실시예에서, 프로세서는 지정된 시간 간격 또는 산출물(artifact)을 삭제하는 요청을 검출하는 것에 기 반하여, 메모리의 잔여 용량을 확인할 수 있다. 산출물은, *.vdex, *.odex, 및/또는 *.oat와 같은 네이티 브 파일(native file)(또는 네이티브 코드(native code))과 *.art와 같은 어플리케이션 클래스(class) 정보에 대한 초기화 이미지를 포함할 수 있다. 일 실시예에서, 프로세서는 메모리의 잔여 용량이 지정된 비율 미만인지 여부를 확인할 수 있다. 지 정된 비율은 메모리의 전체 용량 중 사용 가능한 용량의 비율을 포함할 수 있다. 지정된 비율은 복수의 지 정된 비율로 정의될 수 있다. 복수의 지정된 비율은 제1 지정된 비율, 제2 지정된 비율, 및 제3 지정된 비율을 포함할 수 있다. 하지만, 이에 한정하는 것은 아니다. 일 실시예에서, 프로세서는 메모리의 잔여 용량이 지정된 비율 미만으로 확인되는 것에 기반하여, 어 플리케이션의 프로파일을 이용한 컴파일 수행을 차단하거나, 또는 어플리케이션의 프로파일을 이용한 컴파일 수 행을 통해서 생성된 산출물을 삭제할 수 있다. 예컨대, 메모리의 잔여 용량이 제1 지정된 비율 미만으로확인되면, 프로세서는 백그라운드 매니저를 통해 수행되는 어플리케이션의 프로파일을 이용한 컴파일 을 차단할 수 있다. 메모리의 잔여 용량이 제2 지정된 비율 미만으로 확인되면, 프로세서는 업데이트 가 완료됨에 따라 사용되지 않는 시스템 패키지에 의해 생성된 산출물이 위치하는 경로를 패키지 매니저를 통해 확인하고, 경로에 위치하는 산출물을 삭제할 수 있다. 메모리의 잔여 용량이 제3 지정된 비율 미만으 로 확인되면, 프로세서는 패키지 매니저를 통해 전자 장치에 설치된 어플리케이션들의 패키지의 리스트를 확인할 수 있다. 프로세서는 액티비티 매니저를 통해 지정된 기간 동안 미사용 중인 어플리 케이션의 패키지를 확인할 수 있다. 프로세서는 지정된 기간 동안 미사용 중인 어플리케이션의 패키지의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출물을 삭제할 수 있다. 일 실시예에서, 프로세서는 메모리의 잔여 용량이 지정된 비율 이상인지 여부를 확인하고, 지정된 비 율 이상으로 확인되는 것에 기반하여, 산출물이 삭제된 패키지의 컴파일을 수행하거나, 또는 어플리케이션의 프 로파일을 이용한 재 컴파일을 통해 삭제된 산출물을 복원할 수 있다. 예컨대, 메모리의 잔여 용량이 제3 지정된 비율 이상으로 확인되면, 프로세서는 산출물이 삭제된 패키지의 컴파일을 수행할 수 있다. 메모리 의 잔여 용량이 제2 지정된 비율 이상으로 확인되면, 프로세서는 어플리케이션의 프로파일을 이용한 재 컴파일을 통해 삭제된 산출물을 복원할 수 있다. 도 3은, 다양한 실시예들에 따른, 메모리의 잔여 용량에 기반하여, 메모리를 관리하는 방법을 설명하 기 위한 흐름도이다. 도 3을 참조하면, 전자 장치(예: 도 2의 전자 장치)의 프로세서(예: 도 2의 프로세서)는 305동작에서, 메모리(예: 도 2의 메모리)의 잔여 용량을 확인할 수 있다. 다양한 실시예들에 따른 전술한 305동작의 메모리의 잔여 용량을 확인하는 동작은, 지정된 시간 간격으로 수행될 수 있다. 하지만 이에 한정하는 것은 아니다. 예컨대, 어플리케이션의 프로파일(profile)을 이용한 컴파 일(compile) 수행을 통해서 생성된 산출물(artifact)의 삭제를 요청하는 입력(예: 산출물을 삭제하기 위한 서비 스의 실행을 요청하는 입력)을 검출하는 것에 기반하여, 프로세서는 전술한 305동작의 메모리의 잔여 용량을 확인하는 동작을 수행할 수 있다. 다양한 실시예들에서, 산출물은, *.vdex, *.odex, 및/또는 *.oat와 같은 네이티브 파일(native file)(또는 네 이티브 코드(native code))과 *.art와 같은 어플리케이션 클래스(class) 정보에 대한 초기화 이미지를 포함할 수 있다. 일 실시예에서, 프로세서는 어플리케이션 업데이트에 기반하여, 통신 회로(예: 도 2의 통신 회로)를 통해, 서버(예: 앱스토어)로부터 업데이트 파일(예: 설치 파일(예: apk(android application package) 파일)) 을 수신(또는 다운로드)할 수 있다. 예컨대, 어플리케이션은 특정 프로그래밍 언어(예: 자바 언어)로 개발될 수 있으며, SDK(software development kit)에 의해 리소스 파일(예: 자바 소스코드, 레이아웃 xml 파일, 이미지 파일, 오디오 파일, 애니메이션, 메뉴, 스타일, 및/또는 컬러)을 업데이트 파일(예: apk 파일)로 생성할 수 있 다. 업데이트 파일은 안드로이드 패키지(android package)를 나타내며, 확장자는 “.apk”로 나타낼 수 있다. 예컨대, 하나의 apk 파일은 하나의 어플리케이션을 나타낼 수 있으며, 전자 장치에 설치되는 파일일 수 있 다. 일 실시예에서, *.vdex는 전술한 어플리케이션의 업데이트 파일(예: apk(android application package))의 압 축되지 않은 바이트코드(예: dex 코드)를 포함할 수 있다. *.odex 및/또는 .oat는 전술한 어플리케이션의 업데 이트 파일(예: 설치 파일(예: .apk))의 실행 파일(예: .dex)에 정의된 메소드(method)에 대한 컴파일(예: AOT(ahead of time) 컴파일)된 코드를 포함할 수 있다. *.art는 전술한 어플리케이션의 업데이트 파일(예: apk) 내 실행 파일(예: .dex)에 나열된 일부 문자열과 클래스의 ART(android runtime) 내부 표현을 포함할 수 있다. 일 실시예에서, 프로세서는 310동작에서, 메모리의 잔여 용량이 지정된 비율 미만인지 여부를 확인할 수 있다. 예컨대, 프로세서는 스토리지 매니저(예: 도 2의 스토리지 매니저)에 지정된 비율을 파라미 터로서 전달할 수 있다. 스토리지 매니저는 지정된 비율에 대응하는 메모리의 용량 정보를 프로세서 에 전달할 수 있다. 프로세서는 메모리의 잔여 용량이 스토리지 매니저로부터 수신한 지정 된 비율에 대응하는 메모리의 용량 미만인지 여부를 확인할 수 있다. 다양한 실시예들에서, 지정된 비율은 메모리의 전체 용량 중 사용 가능한 용량의 비율을 포함할 수 있다. 지정된 비율은 복수의 지정된 비율로 정의될 수 있다. 복수의 지정된 비율은 제1 지정된 비율, 제2 지정된 비율, 및 제3 지정된 비율을 포함할 수 있다. 하지만 이에 한정하는 것은 아니다.다양한 실시예들에서, 제1 지정된 비율은 제2 지정된 비율보다 크도록 정의할 수 있으며, 제2 지정된 비율은 제 3 지정된 비율보다 크도록 정의할 수 있다. 예컨대, 제1 지정된 비율은 메모리의 전체 용량 중에서 사용 가능한 용량이 8%인 경우를 나타낼 수 있다. 제2 지정된 비율은 메모리의 전체 용량 중에서 사용 가능한 용량이 5%인 경우를 나타낼 수 있다. 제3 지정된 비율은 메모리의 전체 용량 중에서 사용 가능한 용량이 1%인 경우를 나타낼 수 있다. 하지만 이에 한정하는 것은 아니다. 다양한 실시예들에서, 제1 지정된 비율 내지 제3 지정된 비율은 제조사에 의해서 미리 정해질 수 있다. 다양한 실시예들에서, 제1 지정된 비율 내지 제3 지정된 비율의 수치는, 설명을 용이하게 하기 위한 것으로, 전 술한 비율의 수치에 한정하는 것은 아니다. 일 실시예에서, 프로세서는 315동작에서, 메모리의 잔여 용량이 지정된 비율 미만으로 확인되는 것에 기반하여, 어플리케이션의 프로파일을 이용한 컴파일 수행을 차단하거나, 또는 어플리케이션의 프로파일을 이용 한 컴파일 수행을 통해서 생성된 산출물을 삭제할 수 있다. 예컨대, 메모리의 잔여 용량이 제1 지정된 비율(예: 8%) 미만으로 확인되면, 프로세서는 어플리케이 션의 프로파일을 이용한 컴파일 수행을 차단할 수 있다. 어플리케이션의 프로파일을 이용한 컴파일 수행을 차단 함에 따라, 산출물이 생성되지 않도록 할 수 있다. 다른 예를 들어, 메모리의 잔여 용량이 제2 지정된 비율(예: 5%) 미만으로 확인되면, 프로세서는 어 플리케이션의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출물을 삭제할 수 있다. 예컨대, 어플리케이션 의 업데이트 수행으로 산출물이 생성될 수 있으며, 업데이트가 완료됨에 따라 어플리케이션 업데이트를 위한 시 스템 패키지는 사용되지 않을 수 있다. 프로세서는 업데이트가 완료됨에 따라 사용되지 않는 시스템 패키 지에 의해 생성된 산출물을 삭제할 수 있다. 또 다른 예를 들어, 메모리의 잔여 용량이 제3 지정된 비율(예: 1%) 미만으로 확인되면, 프로세서는 전자 장치에 설치된 어플리케이션들의 패키지의 리스트를 획득할 수 있다. 프로세서는 획득한 리스트 로부터 지정된 조건을 만족하는 어플리케이션의 패키지의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출 물을 삭제할 수 있다. 예컨대, 지정된 조건을 만족하는 어플리케이션은, 어플리케이션 아이콘이 존재하는지 여 부, 어플리케이션의 사용과 관련된 이벤트의 발생 여부, 및/또는 어플리케이션이 지원하는 기능의 활성화 여부 에 기반하여 결정된 지정된 기간 동안 사용하지 않은 어플리케이션을 포함할 수 있다. 다양한 실시예들에 따른 전술한 도 3의 315동작과 관련하여, 후술하는 도 4에서 다양한 실시예들이 설명될 것이다. 도 4는, 다양한 실시예들에 따른, 도 3의 315동작을 설명하기 위한 흐름도이다. 도 4를 참조하면, 전자 장치(예: 도 2의 전자 장치)의 프로세서(예: 도 2의 프로세서)는 405동작에서, 메모리의 잔여 용량이 제1 지정된 비율 미만인지 여부를 결정할 수 있다. 다양한 실시예들에 따른, 제1 지정된 비율은 메모리의 전체 용량 중에서 사용 가능한 용량이 8%인 경우를 포함할 수 있다. 하 지만 이에 한정하는 것은 아니다. 일 실시예에서, 메모리의 잔여 용량이 제1 지정된 비율 미만인 경우(예: 405동작의 YES), 프로세서는 410동작에서, 자주 사용된 어플리케이션의 메소드(method)에 대한 프로파일을 확인할 수 있다. 예컨대, 프로세 서는 백그라운드 매니저(예: 도 2의 백그라운드 매니저)를 통해 자주 사용된 어플리케이션의 메소드 에 대한 프로파일을 확인할 수 있다. 일 실시예에서, 프로세서는 415동작에서, 자주 사용된 어플리케이션의 프로파일을 이용한 컴파일 수행을 차단할 수 있다. 다양한 실시예들에 따른 컴파일 수행을 차단하는 동작은, 업데이트된 프로파일을 기반으로 하는 컴파일 수행을 차단하는 동작을 포함할 수 있다. 예컨대, 프로세서의 백그라운드 매니저는 사용자가 전자 장치(20 1)를 사용하면서 생성된 프로파일을 기반으로 어플리케이션의 패키지 내에 존재하는 실행 파일(예: .dex 파일) 을 백그라운드(background)에서 지정된 컨버터 툴(tool)(예: dex2oat 툴)을 이용하여 컴파일 할 수 있다. 컴파 일에 의해 산출물, 예컨대, .oat 및/또는 .art 파일이 재 생성될 수 있으며, 컴파일된 메소드 및/또는 클래스에 따라 어플리케이션의 성능이 달라질 수 있다. 예컨대, 백그라운드 덱스 최적화(background dex optimization)는, jobscheduler에서 지정된 조건(예: 충전 중, 아이들 상태(idle state), 또는 하루에 한번)을 만족하는 경우, 최적화된 새로운 .oat 및/또는 .art 파일을 생성할 수 있다. 프로세서는 런타임을 통해,새로운 프로파일에 대해 지정된 컴파일 방식(예: AOT(ahead of time) 컴파일)을 사용하여 네이티브 코드(예: *.odex 및/또는 *.oat), 및 어플리케이션 클래스 정보에 대한 초기화 이미지(예: *.art)를 생성할 수 있다. 일 실시예에서, 네이티브 코드는, 바이트 코드에 대한 컴파일된 코드를 나타낼 수 있으며, 컴파일된 머신코드 (machine code)를 포함할 수 있다. 다양한 실시예들에서, 프로세서는 전술한 백그라운드 매니저에 의해 수행될 수 있는 어플리케이션의 프로파일을 기반으로 하는 컴파일 수행을 차단할 수 있다. 전술한 어플리케이션의 프로파일을 이용한 컴파일 수 행을 차단함에 따라, 컴파일에 의한 산출물이 생성되지 않을 수 있다. 컴파일에 의한 산출물이 생성되지 않음에 따라, 메모리의 가용 공간이 확보될 수 있다. 이에 한정하는 것은 아니며, 컴파일 수행을 차단하는 동작은, 전자 장치가 재부팅되는 경우, 삭제된 어플 리케이션의 패키지에 대해 컴파일이 수행되지 않도록 차단하는 동작을 포함할 수 있다. 예컨대, 프로세서 는 전자 장치가 재부팅 시, 백그라운드 매니저를 통해 수행될 수 있는 프로파일을 기반으로 하는 컴 파일을 차단할 수 있다. 어플리케이션의 프로파일을 이용한 컴파일 수행을 차단함에 따라, 산출물이 생성되지 않도록 할 수 있다. 다양한 실시예들에서, 어플리케이션을 설치하는 경우, 지정된 용량(예: 500MB)까지 어플리케이션의 프로파일을 이용한 컴파일 수행으로 산출물이 생성 가능하도록 설정할 수 있다. 일 실시예에서, 메모리의 잔여 용량이 제1 지정된 비율 미만이 아닌 경우(예: 405동작의 NO), 프로세서 는 420동작에서, 메모리의 잔여 용량이 제2 지정된 비율 미만인지 여부를 결정할 수 있다. 다양한 실 시예들에 따른, 제2 지정된 비율은 메모리의 전체 용량 중에서 사용 가능한 용량이 5%인 경우를 포함할 수 있다. 하지만 이에 한정하는 것은 아니다. 일 실시예에서, 메모리의 잔여 용량이 제2 지정된 비율 미만인 경우(예: 420동작의 YES), 프로세서는 425동작에서, 업데이트 수행으로 사용하지 않는 시스템 패키지의 경로를 확인할 수 있다. 프로세서는 업데 이트가 완료된 시스템 패키지에 기반하여 생성된 산출물을 삭제하기 위해, 업데이트가 완료된 시스템 패키지의 설치 경로(예: /data/dalvik-cache)를 패키지 매니저(예: 도 2의 패키지 매니저)를 통해 확인할 수 있다. 일 실시예에서, 프로세서는 430동작에서, 확인된 경로에 위치하는 시스템 패키지의 컴파일 수행을 통해서 생성된 산출물을 삭제할 수 있다. 예컨대, 프로세서는 패키지 매니저를 통해 확인한 설치 경로(예: /data/dalvik-cache)에 위치하는 산출물(예: odex, vdex, 및/또는 art)을 삭제할 수 있다. 다양한 실시예들에서, 업데이트가 완료됨에 따라 어플리케이션 업데이트를 위한 시스템 패키지는 사용되지 않을 수 있으며, 사용되지 않는 시스템 패키지에 의해 생성된 산출물을 삭제함으로써, 메모리의 가용 공간을 확 보할 수 있다. 일 실시예에서, 메모리의 잔여 용량이 제2 지정된 비율 미만이 아닌 경우(예: 420동작의 NO), 프로세서 는 435동작에서, 메모리의 잔여 용량이 제3 지정된 비율 미만인지 여부를 결정할 수 있다. 다양한 실 시예들에 따른, 제3 지정된 비율은 메모리의 전체 용량 중에서 사용 가능한 용량이 1%인 경우를 포함할 수 있다. 하지만 이에 한정하는 것은 아니다. 일 실시예에서, 메모리의 잔여 용량이 제3 지정된 비율 미만인 경우(예: 435동작의 YES), 프로세서는 440동작에서, 전자 장치에 설치된 어플리케이션들의 패키지의 리스트에 기반하여, 지정된 기간 동안 미사 용 중인 적어도 하나의 어플리케이션의 패키지를 확인할 수 있다. 일 실시예에서, 프로세서는 패키지 매니저를 통해 전자 장치에 설치된 어플리케이션들의 패키지 들에 대한 리스트를 수신할 수 있다. 프로세서는 어플리케이션들의 패키지들에 대한 리스트로부터 지정된 조건을 만족하는 어플리케이션을 확인할 수 있다. 예컨대, 지정된 조건을 만족하는 어플리케이션은, 어플리케이 션 아이콘이 존재(예: 홈 화면 및/또는 메뉴 화면에 어플리케이션이 실행 가능한 아이콘이 존재)하는지 여부, 어플리케이션의 사용과 관련된 이벤트의 발생 여부, 및/또는 어플리케이션이 특정 기능으로 설정되었는지 여부 에 기반하여 결정된 지정된 기간(예: 32일) 동안 사용하지 않은 어플리케이션을 포함할 수 있다. 일 실시예에서, 어플리케이션 아이콘이 존재하는 경우, 프로세서는 어플리케이션의 사용과 관련된 이벤트 의 발생 여부를 확인할 수 있다. 예컨대, 액티비티 매니저(예: 도 2의 액티비티 매니저)를 통해 어플리케 이션의 사용과 관련된 이벤트의 발생이 검출되면, 프로세서는 어플리케이션의 사용 시간을 기록할 수 있다. 프로세서는 기록된 어플리케이션의 사용 시간에 기반하여, 어플리케이션의 사용 시간을 확인할 수있다. 일 실시예에서, 어플리케이션 아이콘이 존재하는 경우, 프로세서는 어플리케이션이 특정 기능으로 설정되 었는지 여부를 확인할 수 있다. 예컨대, 프로세서는 옵저버(observer)를 등록하여, 어플리케이션이 특정 기능으로 설정된 경우, 이를 기록하여, 어플리케이션의 사용 시간을 확인할 수 있다. 예컨대, 어플리케이션이 모바일 장치 관리(mobile device management, MDM) 기능, 장애인용 특수 기능(accessibility service), 디폴트 어플리케이션으로 설정된 경우, 프로세서는 어플리케이션이 특정 기능으로 설정된 것으로 결정할 수 있다. 이에 한정하는 것은 아니며, 어플리케이션이 월 페이퍼(wallpaper) 기능, 및/또는 런처(launcher) 기능으로 설 정된 경우, 프로세서는 어플리케이션이 특정 기능으로 설정된 것으로 결정할 수 있다. 일 실시예에서, 프로세서는 전술한 어플리케이션들의 패키지들에 대한 리스트로부터 지정된 조건을 만족하 는 어플리케이션 예컨대, 어플리케이션의 사용과 관련된 이벤트가 지정된 기간 동안 발생하지 않고, 및 어플리 케이션이 특정 기능으로 설정되지 않은 상태가 지정된 기간 동안 유지되는 경우, 프로세서는 해당 어플리 케이션을 미사용 중인 어플리케이션으로 결정할 수 있다. 일 실시예에서, 어플리케이션 아이콘이 존재하지 않는 경우, 프로세서는 패키지 매니저에 기록된 어 플리케이션 컴포넌트(application component)의 마지막으로 사용된 시간을 확인할 수 있다. 프로세서는 마 지막으로 사용된 시간에 기반하여 지정된 기간(예: 32일) 동안 사용되지 않는 어플리케이션을 미사용 중인 어플 리케이션으로서 결정할 수 있다. 다양한 실시예들에 따른 전술한 도 4의 440동작과 관련하여, 후술하는 도 5에서 다양한 실시예들이 설명될 것이다. 일 실시예에서, 프로세서는 445동작에서, 지정된 기간 동안 미사용 중인 적어도 하나의 어플리케이션의 패 키지의 정보를 확인할 수 있다. 어플리케이션의 패키지의 정보는, 어플리케이션의 패키지의 설치 경로 및/또는 명령어 집합 구조(instruction set architecture)의 정보(예: 32비트, 64비트)를 포함할 수 있다. 일 실시예에서, 프로세서는 450동작에서, 지정된 기간 동안 미사용 중인 적어도 하나의 어플리케이션의 패 키지의 정보에 기반하여, 미사용 중인 적어도 하나의 어플리케이션의 패키지를 이용한 컴파일 수행을 통해서 생 성된 산출물을 삭제할 수 있다. 예컨대, 프로세서는 어플리케이션의 패키지의 설치 경로와 명령어 집합 구 조의 정보에 기반하여, 해당 경로에 위치하는 산출물(예: odex, vdex, 및/또는 art)을 삭제할 수 있다. 다양한 실시예들에서, 미도시 되었으나, 프로세서는 블록 리스트(block list)에 포함된 어플리케이션의 패 키지의 산출물이 삭제되지 않도록 할 수 있다. 예컨대, 블록 리스트는 시스템 공간에 위치할 수 있으며, 프리로 드 어플리케이션(preload application)을 포함할 수 있다. 다양한 실시예들에서, 미도시 되었으나, 프로세서는 전자 장치를 사용함에 있어서, 성능적으로 영향 을 미치는 어플리케이션을 포함하는 리스트를 생성하고, 리스트에 포함된 어플리케이션의 패키지의 산출물이 삭 제되지 않도록 할 수 있다. 다양한 실시예들에서, 메모리의 잔여 용량에 기반하여 차등적으로 메모리의 가용 공간을 확보하기 위 한 상이한 동작, 예컨대, 어플리케이션의 프로파일을 이용한 컴파일 수행을 차단하는 동작을 수행하거나, 또는 어플리케이션의 프로파일을 이용한 컴파일 수행을 통해서 생성된 산출물을 삭제하는 동작을 수행함으로써, 체계 적으로 메모리의 가용 공간을 확보할 수 있다. 도 5는, 다양한 실시예들에 따른, 도 4의 440동작을 설명하기 위한 흐름도이다. 도 5를 참조하면, 전자 장치(예: 도 2의 전자 장치)의 프로세서(예: 도 2의 프로세서)는 505동작에서, 어플리케이션 아이콘이 존재하는지 여부를 결정할 수 있다. 예컨대, 프로세서는 어플리케이 션 아이콘이 전자 장치의 홈 화면 및/또는 메뉴 화면에 존재하는지 여부를 확인할 수 있다. 일 실시예에서, 어플리케이션 아이콘이 존재하면(예: 505동작의 YES), 프로세서는 510동작에서, 어플리케 이션의 미사용 기간을 확인할 수 있다. 예컨대, 프로세서는 어플리케이션의 사용과 관련된 이벤트가 발생하는지 여부를 확인할 수 있다. 예컨대, 어플리케이션의 사용과 관련된 이벤트는, 어플리케이션의 실행 이벤트(예: 어플리케이션 아이콘을 선택하는 입 력에 기반하여 어플리케이션이 실행되는 이벤트), 어플리케이션을 이용한 공유 이벤트(예: 공유 버튼을 선택하 는 입력에 기반하여 어플리케이션을 통해 컨텐츠를 공유하는 이벤트), 팝업 메시지 이벤트(예: 토스트 메시지(toast message)를 통해 알림 및/또는 메시지를 출력하는 이벤트), 및 어플리케이션의 위젯을 설치하는 이벤트 를 포함할 수 있다. 프로세서는 어플리케이션의 사용과 관련된 이벤트의 발생 여부에 기반하여, 어플리케 이션의 미사용 기간을 확인할 수 있다. 일 실시예에서, 프로세서는 어플리케이션이 특정 기능으로 설정되었는지 여부를 확인할 수 있다. 예컨대, 어플리케이션이 모바일 장치 관리(mobile device management, MDM) 기능, 장애인용 특수 기능(accessibility service), 디폴트 어플리케이션으로 설정된 경우, 프로세서는 어플리케이션이 특정 기능으로 설정된 것으 로 결정할 수 있다. 이에 한정하는 것은 아니며, 어플리케이션이 월 페이퍼(wallpaper) 기능, 및/또는 런처 (launcher) 기능으로 설정된 경우, 프로세서는 어플리케이션이 특정 기능으로 설정된 것으로 결정할 수 있 다. 프로세서는 어플리케이션이 특정 기능으로 설정되었는지 여부에 기반하여, 어플리케이션의 미사용 기 간을 확인할 수 있다. 일 실시예에서, 프로세서는 515동작에서, 어플리케이션의 미사용 기간이 지정된 기간(예: 32일)을 초과하 는지 여부를 확인할 수 있다. 예컨대, 프로세서는 어플리케이션의 사용과 관련된 이벤트가 발생하지 않은 기간이 지정된 기간 초과하는지 여부, 및 어플리케이션이 특정 기능으로 설정되지 않은 기간이 지정된 기간 초 과하는지 여부를 확인할 수 있다. 일 실시예에서, 어플리케이션의 미사용 기간이 지정된 기간을 초과하는 경우(예: 515동작의 YES), 프로세서 는 520동작에서, 어플리케이션을 산출물을 삭제할 리스트에 추가할 수 있다. 예컨대, 프로세서는 지 정된 기간 동안 미사용 중인 어플리케이션을 산출물을 삭제할 리스트에 추가하고, 전술한 도 4의 445동작 및 450동작의 지정된 기간 동안 미사용 중인 적어도 하나의 어플리케이션의 패키지의 정보에 기반하여, 미사용 중 인 적어도 하나의 어플리케이션의 패키지를 이용한 컴파일 수행을 통해서 생성된 산출물을 삭제할 수 있다. 일 실시예에서, 어플리케이션의 미사용 기간이 지정된 기간을 초과하지 않는 경우(예: 515동작의 NO), 프로세서 는 어플리케이션의 미사용 기간을 확인하는 510동작을 수행할 수 있다. 일 실시예에서, 어플리케이션 아이콘이 존재하지 않으면(예: 505동작의 NO), 프로세서는 525동작에서, 어 플리케이션의 패키지를 구성하는 어플리케이션 컴포넌트가 마지막으로 사용된 시점을 확인할 수 있다. 예컨대, 아이콘이 존재하지 않는 어플리케이션의 경우, 다른 어플리케이션에 의해 실행되거나, 및/또는 특정 기능을 사 용할 때 비명시적으로 실행될 수 있다. 이 경우, 프로세서는 패키지 매니저(예: 도 2의 패키지 매니저 )에 기록된 어플리케이션 컴포넌트(예: 패키지를 구성하는 빌딩 블록(building block))가 마지막으로 사용 된 시점을 확인할 수 있다. 일 실시예에서, 프로세서는 530동작에서, 어플리케이션 컴포넌트가 마지막으로 사용된 시점에 기반하여, 어플리케이션 컴포넌트의 미사용 기간을 확인할 수 있다. 프로세서는 535동작에서, 어플리케이션 컴포넌트 의 미사용 기간이 지정된 기간을 초과하는지 여부를 확인할 수 있다. 일 실시예에서, 어플리케이션 컴포넌트의 미사용 기간이 지정된 기간을 초과하는 경우(예: 535동작의 YES), 프 로세서는 520동작에서 어플리케이션을 산출물을 삭제할 리스트에 추가할 수 있다. 일 실시예에서, 어플리케이션 컴포넌트의 미사용 기간이 지정된 기간을 초과하지 않는 경우(예: 535동작의 NO), 프로세서는 어플리케이션 컴포넌트의 사용 시점에 기반하여 어플리케이션 컴포넌트의 미사용 기간을 확인 하는 530동작을 수행할 수 있다. 도 6은, 다양한 실시예들에 따른, 메모리의 잔여 용량에 기반하여, 메모리를 관리하는 방법을 설명하 기 위한 흐름도이다. 다양한 실시예들에 따른 도 6의 동작들은, 전술한 도 4의 450동작의 추가적인 동작일 수 있다. 도 6을 참조하면, 전자 장치(예: 도 2의 전자 장치)의 프로세서(예: 도 2의 프로세서)는 605동작에서, 메모리(예: 도 2의 메모리)의 잔여 용량을 확인하고, 610동작에서, 메모리의 잔여 용량 이 지정된 비율 이상인지 여부를 확인할 수 있다. 다양한 실시예들에서, 도 3에서 살펴본 바와 같이, 지정된 비율은 메모리의 전체 용량 중 사용 가능한 용 량의 비율을 포함할 수 있다. 지정된 비율은 복수의 지정된 비율, 예컨대, 제1 지정된 비율(예: 8%), 제2 지정 된 비율(예: 5%), 및 제3 지정된 비율(예: 1%)을 포함할 수 있다. 하지만 이에 한정하는 것은 아니다. 일 실시예에서, 프로세서는 615동작에서, 메모리의 잔여 용량이 지정된 비율 이상으로 확인되는 것에 기반하여, 산출물이 삭제된 패키지의 컴파일을 수행하거나, 또는 어플리케이션의 프로파일을 이용한 재 컴파일 을 통해 삭제된 산출물을 복원할 수 있다. 예컨대, 메모리의 잔여 용량이 제3 지정된 비율 이상으로 확인되면, 프로세서는 산출물이 삭제된 패 키지의 컴파일을 수행할 수 있다. 컴파일 패키지의 산출물이 생성될 수 있다. 다양한 실시예들에서, 메모리 의 잔여 용량이 제3 지정된 비율 이상으로 확보되는 경우, 산출물이 삭제된 패키지의 컴파일을 즉각적으로 수행할 수 있도록 지원하여, 어플리케이션을 사용함에 있어서 성능 저하가 발생하지 않도록 할 수 있다. 다른 예를 들어, 메모리의 잔여 용량이 제2 지정된 비율 이상으로 확인되면, 프로세서는 어플리케이 션의 프로파일을 이용한 재 컴파일을 통해 삭제된 산출물을 복원할 수 있다. 예컨대, 프로세서는 자바코드 파일 및 어플리케이션의 프로파일에 기반하여, 재 컴파일을 수행할 수 있다. 프로세서는 재 컴파일을 수행 하여 삭제된 산출물을 복원할 수 있다. 이 경우, 프로세서는 어플리케이션의 사용 시점으로 복구할 수 있 다. 다양한 실시예들에서, 어플리케이션의 프로파일이 존재하지 않는 경우, 프로세서는 자바코드 파일을 이용 하여 어플리케이션이 설치된 시점으로 복구할 수 있다. 다른 실시예에서, 메모리의 잔여 용량이 제3 지정된 비율 이상으로 확인되면, 프로세서는 자바코드 파일에 기반하여 컴파일을 수행하여, 어플리케이션의 기본적인 기능만을 복구할 수 있다. 메모리의 잔여 용량이 제3 지정된 비율보다 큰 제2 지정된 비율 이상으로 확인되면, 프로세서는 어플리케이션의 프로파일 기반으로 컴파일을 수행하여, 어플리케이션의 사용 시점으로 복구할 수 있다. 다양한 실시예들에서, 메모리의 잔여 용량이 지정된 비율 이상으로 확보되는 경우, 프로세서는 차등 적으로 삭제된 산출물을 복원하기 위한 동작을 수행, 예컨대, 산출물이 삭제된 패키지의 컴파일을 수행하거나, 또는 어플리케이션의 프로파일을 이용한 재 컴파일을 수행하여, 어플리케이션의 성능 열화를 방지할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일 실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다."}
{"patent_id": "10-2021-0001428", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는, 다양한 실시예들에 따른, 전자 장치를 도시한 블록도이다. 도 3은, 다양한 실시예들에 따른, 메모리의 잔여 용량에 기반하여, 메모리를 관리하는 방법을 설명하기 위한 흐 름도이다. 도 4는, 다양한 실시예들에 따른, 도 3의 315동작을 설명하기 위한 흐름도이다. 도 5는, 다양한 실시예들에 따른, 도 4의 440동작을 설명하기 위한 흐름도이다. 도 6은, 다양한 실시예들에 따른, 메모리의 잔여 용량에 기반하여, 메모리를 관리하는 방법을 설명하기 위한 흐 름도이다."}
