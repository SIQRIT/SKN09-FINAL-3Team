{"patent_id": "10-2024-0058180", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0170407", "출원번호": "10-2024-0058180", "발명의 명칭": "데이터 처리 효율을 향상시킬 수 있는 TOE 기반 네트워크 인터페이스 장치, 이의 동작 방법", "출원인": "망고부스트코리아 주식회사", "발명자": "정유진"}}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "네트워크로 전송하고자 하는 제1 요청의 제1 데이터를 저장하는 TCP 데이터 버퍼 및 상기 제1 데이터에 대한 제1 시퀀스 넘버(sequence number)를 포함하는 상기 제1 요청의 제1 파라미터를 저장하는 제1 커맨드 큐(commandqueue)를 포함하는 호스트 장치; 및 상기 제1 커맨드 큐로부터 상기 제1 파라미터를 수신하고, 상기 TCP 데이터 버퍼 중 상기 제1 시퀀스 넘버에 대응되는 영역으로부터 상기 제1 데이터를 페치(fetch)하여, 상기 제1 요청에 대한 제1 TCP 패킷으로 생성하는 네트워크 인터페이스 장치;를 포함하는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서, 상기 네트워크 인터페이스 장치는, 상기 제1 파라미터에 대한 TCP 연산을 수행하여 제1 헤더 정보를 출력하는 TCP 컨트롤러; 제1 액세스 신호에 응답하여, 상기 TCP 데이터 버퍼에서 상기 제1 데이터를 DMA(Direct Memory Access) 수신하는 호스트 인터페이스; 및상기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하고, 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신하여, 상기 제1 TCP 패킷을 생성하는 패킷 생성기;를 포함하는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 2에 있어서, 상기 제1 데이터는,버퍼링(buffering) 또는 복제(copy)되지 아니하는 상태로 상기 호스트 인터페이스로부터 상기 패킷 생성기에 전달되는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 2에 있어서, 상기 네트워크 인터페이스 장치는, 네트워크로부터 수신되는 제2 TCP 패킷으로부터 제2 헤더 정보 및 제2 데이터를 추출하고, 상기 제2 데이터를버퍼링 또는 복제되지 아니하는 상태로 상기 호스트 인터페이스로 전송하는 수신 파서(RX parser);를 더 포함하는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 4에 있어서, 상기 호스트 인터페이스는, 상기 TCP 데이터 버퍼 중 상기 제2 데이터에 대한 제2 시퀀스 넘버에 대응되는 영역으로 상기 제2 데이터를 DMA전송하는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 5에 있어서,상기 호스트 장치는, 공개특허 10-2024-0170407-3-상기 제1 시퀀스 넘버 및 상기 제2 시퀀스 넘버에 대응되고 각각의 TCP 세션(TCP session)에 대한 상기 TCP 데이터 버퍼의 상태를 나타내는, 한 쌍의 전송 오프셋(TX offset) 및 한 쌍의 수신 오프셋(RX offset)을 저장하는TCP 세션 테이블(TCP session table);을 더 포함하는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 6에 있어서,상기 한 쌍의 전송 오프셋 중 하나는,상기 제1 데이터의 전송이 ACK (acknowledgement) 처리되는 때에 업데이트 되고, 상기 한 쌍의 수신 오프셋 중 하나는,상기 제2 데이터의 수신이 ACK 처리되는 때에 업데이트되는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 4에 있어서, 상기 호스트 장치는, 상기 네트워크 인터페이스 장치로부터 상기 제2 헤더 정보에 대응되는 상기 제2 파라미터를 수신하여 저장하는제2 커맨드 큐;를 더 포함하는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 2에 있어서, 상기 제1 시퀀스 넘버는,상기 제1 TCP 패킷의 TCP 헤더(TCP header)의 시퀀스 넘버와 상이한 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "청구항 1에 있어서,상기 TCP 데이터 버퍼는, 상기 제1 시퀀스 넘버 중 상기 TCP 데이터 버퍼의 크기에 대응되는 개수의 하위 비트로 어드레싱(addressing)되는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "청구항 1에 있어서,상기 TCP 데이터 버퍼는, 각각의 TCP 세션에 대응되는 서브 버퍼 영역(sub-buffer region);을 포함하는 서버 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "수신되는 제1 요청에 대한 TCP 연산을 수행하여 제1 헤더 정보를 생성하는 TCP 컨트롤러; 상기 제1 데이터에 대한 시퀀스 넘버에 대응되는 정보를 포함하는 제1 액세스 신호에 응답하여, 외부로부터 상기 제1 요청에 대응되는 제1 데이터를 수신하는 호스트 인터페이스; 및상기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하고, 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신하여, 상기 제1 요청에 대응되는 제1 패킷을 생성하는 패킷 생성기;를 포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "청구항 12에 있어서, 상기 호스트 인터페이스는, 공개특허 10-2024-0170407-4-상기 제1 데이터를 DMA 전송하는 DMA 컨트롤러(DMA controller);를 포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "청구항 12에 있어서, 상기 제1 데이터는,버퍼링 또는 복제되지 아니하는 상태로 상기 호스트 인터페이스로부터 상기 패킷 생성기에 전달되는 네트워크인터페이스 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "청구항 12에 있어서, 상기 패킷 생성기는, 상기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하는 제1 헤더 큐; 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신하는 제1 데이터 큐;상기 제1 헤어 큐로부터 상기 제1 헤더 정보를 수신하여 상기 제1 TCP 패킷의 TCP 헤더를 생성하는 헤더생성기; 상기 제1 데이터 큐로부터 상기 제1 데이터를 수신하여 상기 제1 TCP 패킷의 페이로드(payload)로 처리하는 페이로드 생성기; 및 상기 TCP 헤더와 상기 페이로드를 결합하여 상기 제1 TCP 패킷으로 출력하는 결합기;를 포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "청구항 12에 있어서, 네트워크로부터 수신되는 제2 TCP 패킷으로부터 제2 헤더 정보 및 제2 데이터를 추출하고, 상기 제2 데이터를버퍼링 또는 복제되지 아니하는 상태로 상기 호스트 인터페이스로 전송하는 수신 파서;를 더 포함하는 네트워크인터페이스 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "청구항 16에 있어서, 상기 패킷 생성기가 상기 제1 TCP 패킷을 외부로 전송하거나 상기 호스트 인터페이스가 상기 제2 데이터를 외부로 전송하면, 내부에 상기 제1 데이터 또는 상기 제2 데이터가 존재하지 아니하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "청구항 16에 있어서, 상기 제1 데이터의 전송 또는 상기 제2 데이터의 수신에 대응되는 ACK 처리가 완료되기 전까지 상기 제1 데이터또는 상기 제2 데이터를 버퍼링하기 위한 내부 버퍼를 포함하지 아니하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "청구항 12에 있어서, 상기 제1 액세스 신호는, 상기 제1 헤더 정보의 생성과 동시에 또는 상기 제1 헤더 정보가 생성된 후에 상기 TCP 컨트롤러로부터 출력되는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058180", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "청구항 12의 네트워크 인터페이스 장치의 동작 방법에 있어서, 공개특허 10-2024-0170407-5-상기 호스트 인터페이스가, 외부로부터 상기 제1 요청을 수신하는 동작;상기 TCP 컨트롤러가, 상기 제1 요청에 대한 TCP 연산을 수행하여 상기 제1 헤더 정보를 생성하는 동작;상기 호스트 인터페이스가, 제1 액세스 신호에 응답하여, 외부로부터 상기 제1 데이터를 DMA 수신하는 동작; 및상기 패킷 생성기가, 상기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하고, 버퍼링 또는 복제되지 아니하는상태로 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신하여, 상기 제1 TCP 패킷을 생성하는 동작;을 포함하는 네트워크 인터페이스 장치의 동작 방법."}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 실시예에 따른 서버 장치는, 네트워크로 전송하고자 하는 제1 요청의 제1 데이터를 저장하는 TCP 데이 터 버퍼 및 상기 제1 데이터에 대한 제1 시퀀스 넘버를 포함하는 상기 제1 요청의 제1 파라미터를 저장하는 제1 커맨드 큐를 포함하는 호스트 장치; 및 상기 제1 커맨드 큐로부터 상기 제1 파라미터를 수신하고, 상기 TCP 데이 터 버퍼 중 상기 제1 시퀀스 넘버에 대응되는 영역으로부터 상기 제1 데이터를 페치(fetch)하여, 상기 제1 요청 에 대한 제1 TCP 패킷으로 생성하는 네트워크 인터페이스 장치;를 포함한다."}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 네트워크 인터페이스에 관한 것으로, 특히 데이터 처리 효율을 향상시킬 수 있는 TOE(TCP/IP Offload Engine) 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장치에 관한 것이다."}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "빅데이터 또는 인공지능 적용 분야가 확대되고 OTT(Over-The-Top) 서비스 이용이 일상화되고 있다. 이에, 사용 자 단말, 웹 서버(web server), 웹 애플리케이션 서버(Web Application Server: WAS), 스토리지 서버(storage server), 데이터베이스 서버(database server) 등 네트워크를 통해 연결되는 다양한 장치의 데이터 처리 양 및 처리 속도 등에 있어 성능 향상이 급격히 요구되고 있다. 특히, 네트워크 장치는 초고속 네트워크 환경에서 TCP/IP 프로토콜(Transmission Control Protocol/Internet Protocol) 기반으로 데이터 통신을 수행함에 있어, 막대한 시스템 자원이 요구될 수 있다. 예를 들어, 웹 서버 가 네트워크를 통해 다수의 사용자 단말과 데이터 통신을 수행하는 경우, 웹 서버의 중앙 처리 장치(CPU: Central Processing Unit)가 TCP/IP 연산을 수행하는데 상당한 부하가 야기될 수 있다. 이는 웹 서버 전체의 성 능 저하 및 통신 지연을 야기할 수 있다. 이에, 네트워크 장치에서 CPU의 부하(load)를 분산시키는 다양한 기술이 등장하였는데, 이 중 TOE(TCP/IP Offload Engine) 기술은 기존의 TCP/IP에서 소프트웨어로 구현되었던 전송 계층(Transport layer)과 네트워크 계층(Network layer)을 별도의 하드웨어(예. Network Interface Card)로 구현함으로써 CPU 부하를 오프로드 (offload)하는 기술이다. 고속 네트워크 환경을 구현하기 위한 TOE 기술은 고성능, 다수 연결 지원 등 효율적이 고 유연한 하드웨어 또는 소프트웨어의 설계가 요구된다."}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 고속 네트워크 환경에서 시스템 자원을 효율적으로 제어하고 사용하여 데이터 처리 효율을 향상시킬 수 있는 고성능의 TOE 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장치를 제공하고 자 한다."}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 일 실시예에 따른 서버 장치는 네트워크로 전송하고자 하는 제1 요청의 제1 데이터를 저장하는 TCP 데이터 버퍼 및 상기 제1 데이터에 대한 제1 시퀀스 넘버를 포함하는 상기 제1 요청의 제1 파라미터를 저장하는 제1 커맨드 큐를 포함하는 호스트 장치; 및 상기 제1 커맨드 큐로부터 상기 제1 파라미터를 수신하고, 상기 TCP 데이터 버퍼 중 상기 제1 시퀀스 넘버에 대응되는 영역으로부터 상기 제1 데이터를 페치(fetch)하여, 상기 제1 요청에 대한 제1 TCP 패킷으로 생성하는 네트워크 인터페이스 장치;를 포함한다. 본 개시의 일 실시예에 따른 네트워크 인터페이스 장치는, 수신되는 제1 요청에 대한 TCP 연산을 수행하여 제1 헤더 정보를 생성하는 TCP 컨트롤러; 상기 제1 데이터에 대한 시퀀스 넘버에 대응되는 정보를 포함하는 제1 액 세스 신호에 응답하여, 외부로부터 상기 제1 요청에 대응되는 제1 데이터를 수신하는 호스트 인터페이스; 및 상 기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하고, 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신 하여, 상기 제1 요청에 대응되는 제1 패킷을 생성하는 패킷 생성기;를 포함한다. 본 개시의 일 실시예에 따른 상기 네트워크 인터페이스 장치의 동작 방법은, 상기 호스트 인터페이스가, 외부로 부터 상기 제1 요청을 수신하는 동작; 상기 TCP 컨트롤러가, 상기 제1 요청에 대한 TCP 연산을 수행하여 상기 제1 헤더 정보를 생성하는 동작; 상기 호스트 인터페이스가, 제1 액세스 신호에 응답하여, 외부로부터 상기 제1 데이터를 DMA 수신하는 동작; 및 상기 패킷 생성기가, 상기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하고, 버퍼링 또는 복제되지 아니하는 상태로 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신하여, 상기 제1 TCP 패킷을 생성하는 동작;을 포함한다."}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 실시예에 따른 TOE 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장치에 의하면, 데이터의 시퀀스 넘버로 TCP 데이터 버퍼를 어드레싱함으로써, 데이터 처리의 효율을 향상시킬 수 있다. 또는, 본 개시의 실시예에 따른 TOE 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장 치에 의하면, TCP 데이터가 호스트 장치에서 버퍼링 되고 네트워크 인터페이스 장치 내에서 추가적인 버퍼링 또 는 복제를 수행하지 아니함으로써, 메모리 사용량을 대폭 감소시키고, 데이터 처리의 효율을 향상시킬 수 있다. 본 개시의 예시적 실시예들에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 아니하며, 언급되지"}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "아니한 다른 효과들은 이하의 기재로부터 본 개시의 예시적 실시예들이 속하는 기술분야에서 통상의 지식을 가 진 자에게 명확하게 도출되고 이해될 수 있다. 즉, 본 개시의 예시적 실시예들을 실시함에 따른 의도하지 아니"}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 3, "content": "한 효과들 역시 본 개시의 예시적 실시예들로부터 당해 기술분야의 통상의 지식을 가진 자에 의해 도출될 수 있 다."}
{"patent_id": "10-2024-0058180", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 도면을 참조하여 본 개시의 실시예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 개시는 여러 가지 상이한 형태로 구현될 수 있으 며 여기에서 설명하는 실시예에 한정되지 않는다. 도면의 설명과 관련하여, 동일하거나 유사한 구성요소에 대해 서는 동일하거나 유사한 참조 부호가 사용될 수 있다. 또한, 도면 및 관련된 설명에서는, 잘 알려진 기능 및 구 성에 대한 설명이 명확성과 간결성을 위해 생략될 수 있다. 도 1은 본 개시의 실시예에 따른 서버 장치를 나타내는 도면이다. 도 1을 참조하면, 본 개시의 실시예에 따른 서버 장치는 호스트 장치 및 TOE 기반의 네트워크 인터페 이스 장치를 포함하고, TCP 데이터의 시퀀스 넘버(sequence number)로 버퍼에 대한 어드레싱(addressin g)을 하거나, 네트워크 인터페이스 장치에서 별도의 내부 버퍼 없이 호스트 장치에 저장된 TCP 데이 터를 직접 처리하는 등, 효율적으로 TCP 동작을 수행할 수 있다. 이를 위해, 호스트 장치는 호스트 프로세 서(host processor, 122), 애플리케이션(application, 121), TCP 데이터 버퍼(TCP data buffer, TBF), 제1 커 맨드 큐(command queue, CQ1) 및 제2 커맨드 큐(CQ2)를 포함할 수 있다. 호스트 프로세서는 호스트 장치에서 제1 요청(REQ1) 및 제2 요청(REQ2)의 처리에 대한 전반적인 동작 과 리소스(resource)를 제어할 수 있다. 호스트 프로세서는 호스트 CPU(host Central Processing Unit)일 수 있다. 본 개시에서 호스트 프로세서는 호스트 CPU와 함께 제1 요청(REQ1) 및 제2 요청(REQ2)의 처리를 위해 동작하는 OS(Operating System)를 포함하는 개념으로 이해될 수 있다. 애플리케이션은 제1 요청(REQ1)의 제1 데이터(DTA1) 및 제2 요청(REQ2)의 제2 데이터(DTA2)를 통해 사용자 의 요청을 수행할 수 있다. TCP 데이터 버퍼(TBF)는 제1 요청(REQ1)의 제1 데이터(DTA1)를 저장하거나 제2 요청(REQ2)에 대한 제2 데이터 (DTA2)를 저장할 수 있다. 제1 커맨드 큐(CQ1)는 제1 파라미터(PAR1)를 포함하는 제1 요청(REQ1)저장할 수 있고, 제2 커맨드 큐(CQ2)는 제2 요청(REQ2)과 관련된 정보 및 커맨드(command)를 저장할 수 있다. 제2 요청 (REQ2)과 관련된 정보 및 커맨드는 네트워크 인터페이스 장치로부터 전달되는데, 예를 들어 네트워크로부 터 수신된 TCP 패킷에 대한 헤더 정보의 TCP 연산 결과 및 관련된 커맨드일 수 있다. 본 개시에서는 설명의 편 의를 위해 제2 요청(REQ2)과 관련되어 제2 커맨드 큐(CQ2)에 저장되는 정보 또한 제2 파라미터(PAR2)로 지칭될 수 있다. 제1 커맨드 큐(CQ1) 및 제2 커맨드 큐(CQ2)는 각각 커맨드 링(command ring)의 형태로 구현될 수 있다. 서버 장치와 리모트 장치(remote device, 200)는 네트워크 상에 TCP 세션(TCP session)으로 연결되어 통 신을 수행할 수 있다. TCP 세션은 네트워크를 통해 연결되는 서버 장치와 리모트 장치 사이에서 IP 주소 및 포트 넘버(port number)로 특정되고 플로우 ID(flow ID)로 식별되는 통신 경로를 의미할 수 있다. 본 개시에서 TCP 세션은 TCP 연결과 동일한 의미로 이해될 수 있다. 제1 요청(REQ1)은 애플리케이션이 리모트 장치로 전송하고자 하는 TCP 소켓(TCP socket)으로, 예를 들어 \"send()\"일 수 있다. 제2 요청(REQ2)은 애플리케이션이 리모트 장치로부터 수신하고자 하는 TCP 소켓으로, 예를 들어 \"recv()\"일 수 있다. 제1 요청(REQ1)은 커맨드 (예를 들어, \"send\"), 플로우 ID 및 제1 데이터(DTA1)에 대한 제1 파라미터(PAR1)가 패킹(packing)된 형태로 구현될 수 있다. 제2 요청(REQ2)은 커맨드 (예를 들어, \"recv\"), 플로우 ID 및 제2 데이터(DTA2)에 대한 제2 파라미터(PAR2)가 패킹된 형태로 구현될 수 있다. 이때, 정확한 의미 상, 제2 요청 \"recv()\"의 커맨드 \"recv\"는 애플리케이션이 수신하고자 하는 제2 데이터 (DTA2)를 TCP 데이터 버퍼(TBF)로부터 독출하고 그 독출 동작이 완료되었음을 알리는 커맨드(command)일 수 있 다. 다만, 설명의 편의를 위해, 본 개시에서는 달리 언급하지 아니하는 한, 제2 요청(REQ2)과 관련한 사항은, 네트워크 인터페이스 장치가 리모트 장치로부터 TCP 패킷을 수신한 이후 애플리케이션이 제2 데 이터(DTA2)를 획득하는 수신 패스 상의 커맨드 또는 이벤트를 포함하는 개념으로 이해되어야 할 것이다. 이에 따라, 전술된 바와 같이 제2 커맨트 큐(CQ2)로 전달되는 정보를 제2 파라미터(PAR2)로 지칭할 수 있는 것 과 같이, 본 개시에서 네트워크 인터페이스 장치가 호스트 장치로 전달하는 데이터 또한 제2 데이터 (DTA2)로 기술될 수 있다. 또한, 본 개시에서 제1 요청(REQ1) 또는 제2 요청(REQ2)을 포함하여 \"요청\"은 필요에 따라 \"커맨드\", \"이벤트\", \"함수\"와 동일한 의미로 이해될 수 있다. 제1 데이터(DTA1) 및 제2 데이터(DTA2)는 TCP 규약에 부합하여 단일 바이트(byte)에서 수천 바이트까지 임의의 크기를 가질 수 있는데, 각 바이트마다 시퀀스 넘버가 부여될 수 있다. 예를 들어, 제1 데이터(DTA1) 및 제2 데 이터(DTA2)의 마지막 시퀀스 넘버는 해당 데이터 크기와 이전 데이터의 시퀀스 넘버를 통해 연산될 수 있다. 제 1 데이터(DTA1)는 네트워크 인터페이스 장치에 전달되기 전에 먼저 TCP 데이터 버퍼(TBF)에 저장될 수 있 다. 제2 데이터(DTA2)는 애플리케이션에 전달되기 전에 먼저 TCP 데이터 버퍼(TBF)에 저장될 수 있다. 제1 파라미터(PAR1) 및 제2 파라미터(PAR2)는 각각의 TCP 세션을 식별하는 플로우 ID 등 TCP 세션에 대한 정보, 및 제1 데이터(DTA1)와 제2 데이터(DTA2)에 대한 시퀀스 넘버 등을 포함할 수 있다. 제1 파라미터(PAR1)는 제1 데이터(DTA1)의 첫 번째 시퀀스 넘버 및 마지막 시퀀스 넘버를 포함하거나, 제1 데이터(DTA1)의 첫 번째 시퀀스 넘버와 제1 데이터(DTA1)의 길이를 포함하는 등, 다양한 방식으로 제1 데이터(DTA1) 전체의 시퀀스 넘버에 대한 정보를 포함할 수 있다. 제2 파라미터(PAR2) 또한 마찬가지이다. 본 개시의 실시예에 따른 TCP 데이터 버퍼(TBF)는 제1 데이터(DTA1) 및 제2 데이터(DTA2)의 시퀀스 넘버에 대응 되는 구조로 구비되고 동작하여, TCP 데이터 버퍼(TBF)에 대한 기입 및 독출이 간단하고 효율적으로 수행되고, 추가적인 제1 데이터(DTA1) 및 제2 데이터(DTA2)의 복제 동작을 수행하지 아니하고도 통신의 신뢰성이 보장되고, 네트워크 인터페이스 장치의 메모리 사용량이 대폭 감소될 수 있으며, 호스트 장치 및 네트워크 인터페이스 장치 사이의 제1 데이터(DTA1) 및 제2 데이터(DTA2)의 송수신 성능이 향상될 수 있다. 이에 대하여 자세히 설명한다. 도 2는 본 개시의 실시예에 따른 TCP 데이터 버퍼(TBF)를 나타내는 도면이다. 도 1 및 도 2를 참조하면, 본 개시의 실시예에 따른 TCP 데이터 버퍼(TBF)는 전송 버퍼(TXB) 및 수신 버퍼(RX B)를 포함할 수 있다. 전송 버퍼(TXB)는 제1 요청(REQ1)에 의해 애플리케이션이 전송하고자 하는 제1 데이 터(DTA1)를 저장하는 버퍼일 수 있다. 수신 버퍼(RXB)는 제2 요청(REQ2)에 의해 애플리케이션이 수신하고 자 하는 제2 데이터(DTA2)를 저장하는 버퍼일 수 있다. 전송 버퍼(TXB) 및 수신 버퍼(RXB)는 각각, 고유의 TCP 세션에 대해 별도로 할당된 서브 버퍼 영역(sub-buffer region, SRG)들을 포함할 수 있다. 도 2는 전송 버퍼(TXB) 및 수신 버퍼(RXB)가 각각 제1 TCP 세션(SID1) 내지 제3 TCP 세션(SID3)에 대한 서브 버퍼 영역(SRG)을 포함하는 예를 도시하고 있다. 이때, 서로 다른 TCP 세션을 특정하는 식별자 \"SID1\", \"SID2\" 및 \"SID3\"는 전술된 플로우 ID일 수 있다. 새로운 TCP 세션이 생성될 경우, TCP 데이터 버퍼(TBF)에는 제1 TCP 세션(SID1) 내지 제3 TCP 세션(SID3) 이외에 추가 된 TCP 세션에 대한 서브 버퍼 영역(SRG)을 할당할 수 있다. 또한, TCP 데이터 버퍼(TBF)는 제1 TCP 세션(SID1) 내지 제3 TCP 세션(SID3) 중 종료된 TCP 세션에 대해서는 해당 TCP 세션에 할당된 서브 버퍼 영역(SRG)은 회수 될 수 있다. 도 3은 본 개시의 실시예에 따른 TCP 데이터 버퍼(TBF)를 나타내는 도면이다. 도 1 내지 도 3을 참조하면, 각각의 서브 버퍼 영역(SRG)은 도 2와 같이 그 크기가 고정될 수 있다. 또는 전부 또는 일부 서브 버퍼 영역(SRG)의 크기는 가변될 수 있다. 전자의 경우 TCP 데이터 버퍼(TBF)에 대한 동작 제어 가 용이할 수 있고, 후자의 경우 서버 장치의 설계 또는 동작의 유연성을 향상시킬 수 있다. 나아가, 각각의 서브 버퍼 영역(SRG)은 그 크기는 고정되면서 적어도 둘 이상의 TCP 세션에 대한 서브 버퍼 영 역(SRG)의 크기가 상이할 수 있다. 도 3의 예에서, 제1 TCP 세션(SID1)에 제2 TCP 세션(SID3) 및 제3 TCP 세션 (SID3)보다 큰 서브 버퍼 영역(SRG)이 할당된다. 이렇듯, OTT나 AI 연산 등 데이터 처리량이 많은 TCP 세션에는 다른 TCP 세션의 경우보다 상대적으로 큰 서브 버퍼 영역(SRG)을 할당하는 등, TCP 세션의 특성에 적응적으로 서브 버퍼 영역(SRG)을 할당함으로써, 본 개시의 실시예에 따른 서버 장치는 TCP 데이터 버퍼(TBF)의 제한 된 크기에도 불구하고 데이터 처리 성능을 향상시킬 수 있다. 다시 도 1 및 도 2를 참조하면, TCP 데이터 버퍼(TBF)는 제1 데이터(DTA1) 또는 제2 데이터(DTA2)의 시퀀스 넘 버에 대응되어 어드레싱 될 수 있다. 예를 들어, 제1 데이터(DTA1) 또는 제2 데이터(DTA2)의 시퀀스 넘버 중 하 위 비트(least significant bits)의 값으로 TCP 데이터 버퍼(TBF)의 주소가 설정될 수 있다. TCP 데이터 버퍼 (TBF)에 사용되는 시퀀스 넘버의 하위 비트의 수는 TCP 데이터 버퍼(TBF)의 서브 버퍼 영역(SRG)의 크기에 대응 될 수 있다. 예를 들어, 제1 TCP 세션(SID1)에 대한 서브 버퍼 영역(SRG)의 크기가 64 kB인 경우, 시퀀스 넘버 중 하위 16개의 비트로 TCP 데이터 버퍼(TBF)의 주소가 설정될 수 있다. 다시 말해, 본 개시에 따른 제1 데이터(DTA1) 및 제2 데이터(DTA2)는 TCP 데이터 버퍼(TBF) 중 자신의 시퀀스 넘버에 대응되는 영역에 저장될 수 있다. 예를 들어, 제1 데이터(DTA1)는 제1 TCP 세션(SID1)에 대한 제1 요청 \"send()\"를 통해 전송하고자 하는 데이터 이고, 제1 데이터(DTA1)의 마지막 시퀀스 넘버가 \"0x11112000\"라고 하자. 그리고, TCP 데이터 버퍼(TBF) 중 전 송 버퍼(TXB)의 제1 TCP 세션(SID1)에 대한 서브 버퍼 영역(SRG)에는 마지막 시퀀스 넘버가 \"0x11111000\"인 데 이터가 기입되어 있다고 하자. 전술된 바와 같이, TCP 데이터 버퍼(TBF)의 주소가 제1 데이터(DTA1)의 하위 16 비트로 설정되는 경우, 호스트 장치의 호스트 프로세서는 해당 서브 버퍼 영역(SRG)의 \"0x1001\"부터 \"0x2000\"까지의 영역에 제1 데이터(DTA1)를 기입할 수 있다. 예를 들어, 제2 데이터(DTA2)는 제3 TCP 세션(SID3)에 대한 제2 요청 \"recv()\"을 통해 수신하고자 하는 데이터 이고, 제2 데이터(DTA2)의 마지막 시퀀스 넘버가 \"0x12342300\"라고 하자. 그리고, TCP 데이터 버퍼(TBF) 중 수 신 버퍼(RXB)의 제3 TCP 세션(SID3)에 대한 서브 버퍼 영역(SRG)에는 마지막 시퀀스 넘버가 \"0x12341500\"까지 데이터가 독출되어 있다고 하자. 전술된 바와 같이, TCP 데이터 버퍼(TBF)의 주소가 제2 데이터(DTA2)의 하위 16 비트로 설정되는 경우, 해당 서브 버퍼 영역(SRG)의 \"0x1501\"부터 \"0x2300\"까지의 영역에 제2 데이터(DTA2) 가 기입될 수 있다. 수신 버퍼(RXB)에 제2 데이터(DTA2)를 기입하는 동작은 네트워크 인터페이스 장치의 DMA(Direct Memory Access) 동작으로 수행될 수 있다. 이에 대한 더 자세한 설명은 후술된다. 이때, 특정 TCP 세션에 대한 TCP 데이터 버퍼(TBF)의 유효 영역, 즉 데이터가 기입된 영역은 한 쌍의 전송 오프 셋(TX offset, TX_APP, TX_ACK) 또는 한 쌍의 수신 오프셋(RX offset, RX_APP, RX_RCV)으로 확인 또는 설정될 수 있다. 도 2의 예에서, 한 쌍의 전송 오프셋(TX_APP, TX_ACK) 중 제1 전송 오프셋(TX_APP)은 애플리케이션이 가장 최근에 전송 요청한 제1 데이터(DTA1)의 마지막 시퀀스 넘버에 대응되고, 제2 전송 오프셋(TX_ACK)은 애플리케 이션의 기존 데이터 전송 요청에 대해 가장 최근에 ACK(acknowledgement) 처리된 제1 데이터(DTA1)의 마지 막 시퀀스 넘버에 대응될 수 있다. 다시 말해, 제2 전송 오프셋(TX_ACK)에 대응되는 마지막 시퀀스 넘버를 가진 제1 데이터(DTA1)까지 ACK 처리된 것일 수 있다. 한 쌍의 수신 오프셋(RX_APP, RX_RCV) 중 제1 수신 오프셋(RX_APP)은 애플리케이션이 가장 최근에 독출한 제2 데이터(DTA2)의 마지막 시퀀스 넘버에 대응되고, 제2 수신 오프셋(RX_RCV)은 네트워크 인터페이스 장치 로부터 가장 최근에 수신된 제2 데이터(DTA2)의 마지막 시퀀스 넘버에 대응될 수 있다. 전송 오프셋(TX_APP, TX_ACK) 및 수신 오프셋(RX_APP, RX_RCV)을 정의함에 있어서 기 처리된 제1 데이터(DTA1) 및 제2 데이터(DTA1)를 기준으로 하였으나, 이에 한정되는 것은 아니다. 전송 오프셋(TX_APP, TX_ACK) 및 수신 오프셋(RX_APP, RX_RCV)은 새로이 처리하고자 하는 제1 데이터(DTA1) 및 제2 데이터(DTA1)를 기준으로 정의될 수도 있다. 예를 들어, 제1 전송 오프셋(TX_APP)은 애플리케이션이 다음에 전송할 제1 데이터(DTA1)의 첫 번째 시퀀스 넘버에 대응될 수 있고, 제2 전송 오프셋(TX_ACK)은 다음 순서로 ACK 처리되어야 하는 제1 데이터 (DTA1)의 첫 번째 시퀀스 넘버에 대응될 수 있다. 마찬가지로, 제1 수신 오프셋(RX_APP)은 애플리케이션이 다음에 독출할 제2 데이터(DTA2)의 첫 번째 시퀀스 넘버에 대응되고, 제2 수신 오프셋(RX_RCV)은 다음 순서로 ACK 처리되어야 하는 제2 데이터(DTA2)의 첫 번째 시퀀스 넘버에 대응될 수 있다. 다만, 설명의 편의를 위해, 후술되는 전송 오프셋(TX_APP, TX_ACK) 및 수신 오프셋(RX_APP, RX_RCV)에 관한 예의 경우, 기 처리된 제1 데 이터(DTA1) 및 제2 데이터(DTA1)를 기준으로 기술될 것이다. 이렇듯, 제2 전송 오프셋(TX_ACK) 및 제1 수신 오프셋(RX_APP)은 각각 제1 데이터(DTA1)의 전송 및 제2 데이터 (DTA2)의 수신에 대한 ACK 처리 후에 업데이트될 수 있다. 이는 제1 데이터(DTA1) 또는 제2 데이터(DTA2)는 그 전송 또는 수신에 대한 동작이 완료되기 전까지, 즉 ACK 처리 전까지 TCP 데이터 버퍼(TBF)에 저장됨을 의미한 다. 도 4는 본 개시의 실시예에 따른 서버 장치에서 호스트 장치가 네트워크 인터페이스 장치로 제1 데이터(DTA1)를 전송하는 동작을 개념적으로 나타내는 도면이고, 도 5는 본 개시의 실시예에 따른 서버 장치 에서 호스트 장치가 네트워크 인터페이스 장치로부터 제2 데이터(DTA2)를 수신하는 동작을 개념 적으로 나타내는 도면이다. 먼저 도 2 및 도 4를 참조하면, 본 개시의 실시예에 따른 서버 장치는 TOE 제어 모듈(TOE control module, TCM), DMA 영역(Direct Memory Access space, DSP) 및 TOE 엔진(TOE engine, TEN)을 포함할 수 있다. TOE 제어 모듈(TCM) 및 DMA 영역(DSP)은 도 1의 호스트 장치에 포함될 수 있다. TOE 제어 모듈(TCM)은 TOE 매니징(TOE managing)을 수행하는 소프트웨어 스택(software stack)으로 구현될 수 있다. TOE 제어 모듈 (TCM)은 도 1의 호스트 프로세서가 제1 요청(REQ1) 또는 제2 요청(REQ2)의 처리에 실행하는 소프트웨어 로 직을 포함할 수 있다. DMA 영역(DSP)은 거대 페이지(huge page)로 구현되고, 제1 커맨드 큐(CQ1), 제2 커맨드 큐(CQ2) 및 TCP 데이터 버퍼(TBF)를 포함할 수 있다. TOE 제어 모듈(TCM)은 초기화 단계에서 DMA 영역(DSP)에 제1 커맨드 큐(CQ1), 제2 커맨드 큐(CQ2) 및 TCP 데이터 버퍼(TBF)를 생성할 수 있다. TOE 엔진(TEN)은 도 1의 네트워크 인터페이스 장치이거나 도 1의 네트워크 인터페이스 장치에 포함될 수 있다. 전술된 예와 같이, 제1 TCP 세션(SID1)에 대해 마지막 시퀀스 넘버가 \"0x11112000\"인 제1 데이터(DTA1)를 전송 하고자 하는 제1 요청(REQ1)이 생성되고, TCP 데이터 버퍼(TBF)의 전송 버퍼(TXB) 중 제1 TCP 세션(SID1)에 대 한 서브 버퍼 영역(SRG)에 \"0x1000\"까지 데이터가 저장되어 있는 경우, TOE 제어 모듈(TCM)은 먼저 제1 데이터 (DTA1)를 해당 서브 버퍼 영역(SRG)의 \"0x1001\"부터 \"0x2000\"까지의 위치에 저장할 수 있다(1-↘). 일 실시예에 의하면, 해당 서브 버퍼 영역(SRG)의 \"0x1000\"까지 데이터가 반드시 저장된 상태일 필요는 없고, 새로이 제1 데 이터(DTA1)를 기입하기 전에, 가장 최근까지 사용된 서브 버퍼 영역(SRG)의 위치에 대해 제2 전송 오프셋 (TX_ACK)이 지칭하고 있기만 하면 될 것이다.TOE 제어 모듈(TCM)은 제1 데이터(DTA1)의 시퀀스 넘버를 제1 파라미터(PAR1) 중 하나로 포함하는 제1 요청 (REQ1)을 제1 커맨드 큐(CQ1)에 기입할 수 있다(1-♭). 제1 데이터(DTA1)를 TCP 데이터 버퍼(TBF)에 저장하는 동작(1-↘)이 수행된 후에 제1 요청(REQ1)을 제1 커맨드 큐(CQ1)에 기입하는 동작(1-♭)이 수행될 수 있다. 다 만, 이에 한정되는 것은 아니고 필요에 따라 그 순서가 바뀌어 수행되거나 동시에 수행될 수도 있다. TOE 제어 모듈(TCM)은 제1 커맨드 큐(CQ1)에 제1 요청(REQ1)이 기입되면,MMIO(Memory-Mapped I/O) 등을 통해 TOE 엔진(TEN)으로 제1 요청(REQ1)의 발생을 알릴 수 있다. 이후, TOE 엔진(TEN)은 제1 커맨드 큐(CQ1)로부터 제1 요청(REQ1)을 수신할 수 있다(1-♩). TOE 엔진(TEN)은 제1 파라미터(PAR1)로부터 제1 데이터(DTA1)에 대한 시퀀스 넘버를 확인하고, 해당 시퀀스 넘버에 대응되는 주소로 TCP 데이터 버퍼(TBF)에 액세스하여 제1 데이터 (DTA1)를 페치(fetch)할 수 있다(1-♪). 전술된 바와 같이, 제1 데이터(DTA1)에 대한 시퀀스 넘버만으로 TCP 데 이터 버퍼(TBF)에 제1 데이터(DTA1)가 저장된 위치, 즉 서브 버퍼 영역(SRG)의 주소 \"0x1001\"내지\"0x2000\"가 확인될 수 있다. 다음으로 도 2 및 도 5를 참조하면, 전술된 예와 같이, 제3 TCP 세션(SID3)에 대해 마지막 시퀀스 넘버가 \"0x12342300\"인 제2 데이터(DTA2)가 네트워크로부터 TOE 엔진(TEN)으로 수신되고, TCP 데이터 버퍼(TBF)의 수 신 버퍼(RXB) 중 제3 TCP 세션(SID3)에 대한 서브 버퍼 영역(SRG)에 \"0x1500\"까지 데이터가 저장되어 있는 경우, TOE 엔진(TEN)은 먼저 그 시퀀스 넘버를 참조하여 제2 데이터(DTA2)를 해당 서브 버퍼 영역(SRG)의 \"0x1501\"부터 \"0x2300\"까지의 위치에 저장할 수 있다(2-↘). 전술된 도 4의 경우와 마찬가지로, 해당 서브 버퍼 영역(SRG)의 \"0x1500\"까지 데이터가 반드시 저장된 상태일 필요는 없고, 제1 수신 오프셋(RX_APP)이 해당 위치 를 지칭하는 것으로도 정상적으로 동작이 수행될 수 있다. 다음으로, TOE 엔진(TEN)은 제2 데이터(DTA2)의 시퀀스 넘버를 포함하는 제2 파라미터(PAR2)를 제2 커맨드 큐 (CQ2)로 전송할 수 있다(2-♭). 다만, 이에 한정되는 것은 아니고, TOE 엔진(TEN)은 제2 데이터(DTA2)를 TCP 데 이터 버퍼(TBF)에 저장하는 동작(2-↘)보다 먼저 또는 동시에 제2 파라미터(PAR2)를 제2 커맨드 큐(CQ2)로 전송 하는 동작(2-♭)을 수행할 수 있다. 제2 데이터(DTA2)를 TCP 데이터 버퍼(TBF)에 저장하는 동작이 완료되면, 또는 제2 데이터(DTA2)를 TCP 데이터 버퍼(TBF)에 저장하는 동작 및 제2 파라미터(PAR2)를 제2 커맨드 큐(CQ2)로 전송하는 동작이 모두 완료되면, TOE 엔진(TEN)은 TCP 패킷의 수신과 관련된 제2 데이터(DTA2) 및/또는 제2 파라미터(PAR2)가 전송되었음을 TOE 제어 모듈(TCM)에 알릴 수 있다. TOE 제어 모듈(TCM)은 제2 커맨드 큐(CQ2)로 제2 파라미터(PAR2)에 포함된 시 퀀스 넘버를 참조하여(2-♩), TCP 데이터 버퍼(TBF)로부터 제2 데이터(DTA2)를 독출할 수 있다(2-♪). 본 개시의 실시예에 따른 서버 장치 및 이의 동작 방법에 의하면, 호스트 장치와 네트워크 인터페이 스 장치 간의 통신에 있어서, 제1 데이터(DTA1) 또는 제2 데이터(DTA2)의 시퀀스 넘버만 공유하더라도 TCP 데이터 버퍼(TBF)의 어디를 액세스해야 하지는 알 수 있어, 효율적으로 동작할 수 있다. 나아가, 본 개시의 실시예에 따른 서버 장치 및 이의 동작 방법에 의하면, 제1 커맨드 큐(CQ1)로부터 제1 요청(REQ1)을 수신하는 동작(1-♩)과 TCP 데이터 버퍼(TBF)로부터 제1 데이터(DTA1)를 페치하는 동작(1-♪)을 수행함에 있어, DMA 영역(DSP)에 대한 DMA 방식을 적용함으로써, TOE 엔진(TEN)은 TOE 제어 모듈(TCM)과 독립적 이고 비동기적으로 TCP 동작을 수행할 수 있다. 마찬가지로, TCP 데이터 버퍼(TBF)에 제2 데이터(DTA2)를 저장 하는 동작(2-↘)과 제2 커맨드 큐(CQ2)로 제2 파라미터(PAR2)를 전송하는 동작(2-♭)을 수행함에 있어, DMA 영 역(DSP)에 대한 DMA 방식을 적용함으로써, TOE 엔진(TEN)은 TOE 제어 모듈(TCM)과 독립적이고 비동기적으로 TCP 동작을 수행할 수 있다. TCP 데이터 버퍼(TBF)의 제1 데이터(DTA1) 또는 제2 데이터(DTA2)는 ACK 처리되거나 애 플리케이션에 전달되기 전까지 그 저장 상태가 유지되므로, 통신 과정에서 제1 데이터(DTA1) 또는 제2 데이터 (DTA2)가 유실되어 서버 장치가 재전송(retransmission)을 수행하게 되는 경우에도 같은 효과를 발휘할 수 있다. 따라서, 본 개시의 실시예에 따른 서버 장치 및 이의 동작 방법에 의하면, 호스트 CPU의 부담을 최소화하 면서 고성능의 TOE 동작이 지원될 수 있다. 상기의 동작을 수행함에 있어 TCP 데이터 버퍼(TBF)의 상태를 나타내는 한 쌍의 전송 오프셋(TX_APP, TX_ACK) 및 한 쌍의 수신 오프셋(RX_APP, RX_RCV)은 TOE 제어 모듈(TCM) 또는 호스트 프로세서가 TCP 데이터 버퍼 (TBF)를 제어하는데 사용될 수 있다. 이에 대하여 설명한다. 도 6은 본 개시의 실시예에 따른 TCP 세션 테이블(TTB)을 나타내는 도면이고, 도 7은 본 개시의 실시예에 따른 서버 장치를 나타내는 도면이다. 도 2, 도 6 및 도 7을 참조하면, 본 개시의 실시예에 따른 서버 장치의 호스트 장치는 TCP 세션 테이 블(TTB)을 더 포함할 수 있다. TCP 세션 테이블(TTB)은 TCP 데이터 버퍼(TBF) 및 커맨드 큐들(CQ1, CQ2)과 함 께, 호스트 장치에 구현되는 거대 페이지에 포함될 수 있다. 본 개시의 실시예에 따른 TCP 세션 테이블(TTB)은 각 TCP 세션(SID1~SID3)에 대한 제1 전송 오프셋(TX_APP), 제2 전송 오프셋(TX_ACK), 제1 수신 오프셋(RX_APP) 및 제2 수신 오프셋(RX_RCV)를 통해 TCP 데이터 버퍼(TB F)의 상태를 나타낼 수 있다. 먼저, 제1 전송 오프셋(TX_APP)과 제2 전송 오프셋(TX_ACK)의 차이는 전송 버퍼(TXB)에 저장된 해당 TCP 세션의 제1 데이터(DTA1)의 크기에 대응될 수 있다. 전술된 바와 같이 TCP 데이터 버퍼(TBF)의 주소가 제1 데이터 (DTA1)의 하위 16 비트로 설정되는 경우, 도 2의 예에서, 현재 전송 버퍼(TXB)에 저장된 제1 TCP 세션(SID1)의 제1 데이터(DTA1)의 크기는, 제1 전송 오프셋(TX_APP) \"0x2000\"과 제2 전송 오프셋(TX_ACK) \"0x1000\"의 차이에 해당하는 \"0x1000\"로 확인될 수 있다. 마찬가지로, 제1 수신 오프셋(RX_APP)과 제2 수신 오프셋(RX_RCV)의 차이는 수신 버퍼(RXB)에 저장된 해당 TCP 세션의 제2 데이터(DTA2)의 크기에 대응될 수 있다. 전술된 바와 같이 TCP 데이터 버퍼(TBF)의 주소가 제2 데이 터(DTA2)의 하위 16 비트로 설정되는 경우, 도 2의 예에서, 현재 수신 버퍼(RXB)에 저장된 제3 TCP 세션(SID3) 의 제2 데이터(DTA2)의 크기가, 제1 수신 오프셋(RX_APP) \"0x1500\"과 제2 수신 오프셋(RX_RCV) \"0x2300\"의 차 이에 해당하는 \"0xE00\"으로 확인될 수 있다. 또한, 제1 전송 오프셋(TX_APP), 제2 전송 오프셋(TX_ACK), 제1 수신 오프셋(RX_APP) 및 제2 수신 오프셋 (RX_RCV)은 TCP 데이터 버퍼(TBF)에 대한 제1 데이터(DTA1) 또는 제2 데이터(DTA2)의 기입 또는 독출이 수행되 는 경우, 그 값이 변경되어 TCP 데이터 버퍼(TBF)의 업데이트 상태가 확인될 수 있다. 호스트 장치에 의해 TCP 데이터 버퍼(TBF)에 대해 제1 데이터(DTA1)가 기입되거나 제2 데이터(DTA2)가 독 출되면, 제1 전송 오프셋(TX_APP) 또는 제1 수신 오프셋(RX_APP)이 증가할 수 있다. 이와 달리, TCP 데이터 버 퍼(TBF)의 제1 데이터(DTA1)에 대해 ACK 처리되거나 네트워크 인터페이스 장치에 의해 제2 데이터(DTA2)가 TCP 데이터 버퍼(TBF)에 기입되면, 제2 전송 오프셋(TX_ACK) 또는 제2 수신 오프셋(RX_RCV)이 증가할 수 있다. 예를 들어, 제1 TCP 세션(SID1)에 대해 마지막 시퀀스 넘버가 \"0x11113000\"인 제1 데이터(DTA1)가 새로이 전송 버퍼(TXB)에 저장되면, 제1 전송 오프셋(TX_APP)은 \"0x3000\"으로 증가될 수 있다. 또는, 제3 TCP 세션(SID3)에 대해 마지막 시퀀스 넘버가 \"0x12343000\"인 제2 데이터(DTA2)가 새로이 수신 버퍼(RXB)에 저장되면, 제2 수신 오프셋(RX_RCV)은 \"0x3000\"으로 증가될 수 있다.이러한 제1 전송 오프셋(TX_APP), 제2 전송 오프셋(TX_ACK), 제1 수신 오프셋(RX_APP) 및 제2 수신 오프셋(RX_RCV)의 변동에 대응되어 TCP 세션 테이블(TTB)이 업데이트될 수 있다. 나아가, TCP 세션 테이블(TTB)은 TCP 데이터 버퍼(TBF)의 상태에 대한 정보와 함께, TCP 세션 테이블(TTB)은 각 각의 TCP 세션(SID1~SID3)의 상태에 대한 정보도 함께 저장할 수 있다. 도 6의 예에서, TCP 세션 테이블(TTB)의 첫 번째 엔트리에는 제1 TCP 세션(SID1)의 상태 \"Ready\"가 저장되고, 두 번째 엔트리에는 제2 TCP 세션(SID2)에 대한 상태 \"Closed\"가 저장될 수 있다. 그리고, TCP 세션 테이블 (TTB)의 세 번째 엔트리에는 제3 TCP 세션(SID3)에 대한 상태 \"Ready\"가 저장될 수 있다. \"Ready\"는 해당 TCP 세션에서 새로운 이벤트의 발생에 대한 준비 상태를, \"Closed\"는 해당 TCP 세션의 종료 상태를 의미한다. \"Closed\" 상태인 경우, 해당 TCP 세션에 대한 정보는 삭제될 수 있다. 호스트 프로세서는 TCP 세션 테이블(TTB)을 참조하면, TCP 데이터 버퍼(TBF)로의 제1 데이터(DTA1) 및 제2 데이터(DTA2)의 기입 동작 또는 TCP 데이터 버퍼(TBF)로부터의 제1 데이터(DTA1) 및 제2 데이터(DTA2)의 독출 동작을 제어할 수 있다. 예를 들어, 호스트 프로세서는 제1 TCP 세션(SID1)에 대한 제1 요청(REQ1)의 처리 를 위해 제1 데이터(DTA1)를 TCP 데이터 버퍼(TBF)에 저장하기 전에, TCP 세션 테이블(TTB)을 참조하여 제1 TCP 세션(SID1)에 대한 서브 버퍼 영역(SRG)에 제1 데이터(DTA1)가 저장될 수 있는 충분한 공간이 존재하는지를 확 인할 수 있다. 예를 들어, TCP 세션 테이블(TTB)의 제1 전송 오프셋(TX_APP) 및 제2 전송 오프셋(TX_ACK)의 차 이로부터 해당 서브 버퍼 영역(SRG)의 유효 영역을 확인할 수 있다. 해당 서브 버퍼 영역(SRG)에서 유효 영역을 제외하면 저장 가능한 공간의 크기가 산출될 수 있고, 호스트 프로세서는 저장 가능한 공간과 제1 데이터 (DTA1)의 크기와 비교할 수 있다. 제1 TCP 세션(SID1)에 대한 서브 버퍼 영역(SRG)에 제1 데이터(DTA1)가 저장될 수 있는 충분한 공간이 존재하지 아니한다면, 호스트 프로세서는 일정 시간 대기하거나, 제1 요청(REQ1)에 대해 바로 에러로 처리할 수 있 다. 도시되지는 아니하였으나, 네트워크 인터페이스 장치에도 호스트 장치의 TCP 세션 테이블(TTB)과 같은 TCP 데이터 버퍼(TBF)에 대한 오프셋을 저장하는 테이블을 구비하여 DMA 전송 또는 수신 동작 시 참조할 수 있다. 도 8은 본 개시의 실시예에 따른 네트워크 인터페이스 장치를 나타내는 도면이다. 도 1 및 도 8을 참조하면, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 호스트 장치로부터 제1 요청(REQ1) 및 제1 데이터(DTA1)를 수신하여 TCP 패킷(TCP packet, PKT)을 생성하거나, 네트워크로부터 TCP 패킷(TPK)을 수신하여 제2 요청(REQ2) 및 제2 데이터(DTA2)를 호스트 장치에 전달할 수 있다. 본 개시 의 실시예에 따른 네트워크 인터페이스 장치는 FPGA(Field-Programmable Gate Array), ASIC(Application- Specific Integrated Circuit) 또는 SoC(System on Chip) 기반의 스마트 네트워크 인터페이스 카드(Smart Network Interface Card)일 수 있다. 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 호스트 인터페이스(host interface, 141), TCP 컨트 롤러(TCP controller, 142), 패킷 생성기(packet generator, 143) 및 수신 파서(Rx Parser, 144)를 구비할 수 있다. 호스트 인터페이스는 호스트 장치와의 인터페이스를 수행할 수 있다. 구체적으로, 호스트 인터페이스 는 호스트 장치로부터 제1 요청(REQ1) 및 제1 데이터(DTA1)를 수신하고, 호스트 장치로 제2 요 청(REQ2) 및 제2 데이터(DTA2)를 전송할 수 있다. 이때, 호스트 인터페이스는 DMA 컨트롤러(DMA controller)를 포함하여 호스트 장치와의 파라미터 및 데이터의 송수신을 DMA 방식으로 수행할 수 있다. TCP 컨트롤러는 호스트 장치로부터 수신된 제1 요청(REQ1)에 대해 TCP 연산을 수행하여 제1 헤더 정 보(HIF1)를 생성하고, 네트워크로부터 수신된 TCP 패킷(TPK)로부터 추출된 제2 헤더 정보(HIF2)에 대해 TCP 연 산을 수행하여 제2 요청(REQ2)을 생성할 수 있다. 패킷 생성기는 TCP 컨트롤러로부터 제공되는 제1 헤더 정보(HIF1)에 대응되는 TCP 헤더 및 제1 데이터(DTA1)에 대응되는 페이로드를 결합하여 TCP 패킷(TPK)을 생성할 수 있다. 수신 파서는 네트워크로부터 수신되는 TCP 패킷(TPK)을 파싱하여 TCP 헤더에 대응되는 제 2 헤더 정보(HIF2)는 TCP 컨트롤러에 전달하고, 호스트 인터페이스를 통해 페이로드는 제2 데이터 (DTA2)로 호스트 장치에 전달할 수 있다. 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 전술된 바와 같이, 호스트 장치와 제1 데이터 (DTA1) 또는 제2 데이터(DTA2)의 시퀀스 넘버만 공유하더라도 TCP 데이터 버퍼(TBF)의 어디를 액세스해야 하지 는 알 수 있어, 효율적으로 동작할 수 있다. 또한, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 제1 데이터(DTA1) 또는 제2 데이터(DTA2) 등을 DMA 방식으로 수신 또는 전송하므로, 호스트 장치와 독립적 이고 비동기적으로 TCP 동작을 수행할 수 있다. 따라서, 본 개시의 실시예에 네트워크 인터페이스 장치에 의하면, 호스트 CPU의 부담을 최소화하면서 고성능의 TOE 동작이 지원될 수 있다. 나아가, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 호스트 장치는 제1 데이터(DTA1) 또는 제2 데이터(DTA2)의 버퍼링(buffering)을 위한 내부 버퍼를 구비 또는 사용하지 않을 수 있다. 네트워크에서 TCP 패킷(TPK)이 유실되거나 TCP 패킷(TPK)의 순서가 변경되는 등이 발생하는 경우라도 TCP 통신의 신뢰성을 보 장하기 위해 도 1의 서버 장치 또는 리모트 장치가 TCP 패킷(TPK)의 수신을 ACK 처리하기 전까지는 TCP 패킷(TPK)의 전송한 장치가 전송한 데이터를 버퍼링하고 있어야 한다. 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 호스트 장치의 TCP 데이터 버퍼(TBF)에 저장된 제1 데이터(DTA1) 또는 제2 데이터(DTA2)를 이용하여 TCP 동작을 수행할 수 있다. 이때, 전술된 바와 같이 제1 전송 오프셋(TX_APP) 및 제2 수신 오프셋(RX_RCV) 이후부터 제1 데이터(DTA1) 또는 제2 데이터(DTA2)가 기입되 므로, 제1 데이터(DTA1) 또는 제2 데이터(DTA2)는 ACK 처리될 때까지 TCP 데이터 버퍼(TBF)에 저장될 수 있다. 따라서, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 TCP 데이터 버퍼(TBF)의 제1 데이터(DTA1) 또는 제2 데이터(DTA2)를 다시 내부의 버퍼에 복제하지 아니하고 TCP 동작을 수행할 수 있다. 이에 대해 자세히 기술한다. 호스트 인터페이스는 제1 파라미터(PAR1)를 포함하는 제1 요청 \"send()\"를 수신하여(S1-1), TCP 컨트롤러 에 전달할 수 있다(S1-2). TCP 컨트롤러는 TCP 연산을 수행하여 제1 헤더 정보(HIF1)를 패킷 생성기 로 전달할 수 있다(S1-3). 이와 함께 제1 액세스 신호(XAC1)가 호스트 인터페이스로 전달되고, 호스트 인터페이스는 제1 액세스 신호(XAC1)에 응답하여 TCP 데이터 버퍼(TBF)로 DMA 수신(독출)을 수행할 수 있다(S1-4). 제1 액세스 신호 (XAC1)는 제1 데이터(DTA1)의 시퀀스 넘버 또는 제1 데이터(DTA1)의 시퀀스 넘버에 대응되는 TCP 데이터 버퍼 (TBF)의 주소를 포함할 수 있다. 도 8은 수동적으로 동작하는 패킷 생성기가 제1 헤더 정보(HIF1)에 대응되는 TCP 헤더 및 제1 데이터 (DTA1)에 대응되는 페이로드의 결합을 용이하고 간단하게 수행할 수 있도록, TCP 컨트롤러가 제1 액세스 신호(XAC1)를 제1 헤더 정보(HIF1)의 생성과 동시에 또는 제1 헤더 정보(HIF1)가 생성된 후에 출력하는 예를 도 시하고 있다. 다만, 이에 한정되는 것은 아니다. 본 개시의 실시예에 따르면, 패킷 생성기가 제1 헤더 정 보(HIF1)를 수신한 후 제1 액세스 신호(XAC1)를 호스트 인터페이스에 전달할 수도 있다. 호스트 인터페이스는 TCP 데이터 버퍼(TBF) 중 제1 액세스 신호에 대응되는 영역에 저장된 제1 데이터 (DTA1)를 DMA 수신할 수 있다(S1-5). 호스트 인터페이스로 수신된 제1 데이터(DTA)는 네트워크 인터페이스 장치의 내부에서 추가적으로 복제되지 아니하고 패킷 생성기로 전달될 수 있다(S1-6). 도 9는 본 개시의 실시예에 따른 패킷 생성기를 나타내는 도면이다. 도 1, 도 8 및 도 9를 참조하면, 본 개시의 실시예에 따른 패킷 생성기는 제1 헤더 큐(header queue, HQ1), 제1 데이터 큐(data queue, DQ1), 헤더 생성기(header generator, HGT), 데이터 생성기(data generator, DGT) 및 결합기(CMB)를 포함할 수 있다. 제1 헤더 큐(HQ)는 TCP 컨트롤러로부터 제1 헤더 정보(HIF1)를 수신할 수 있다. 제1 데이터 큐(DQ)는 호스 트 인터페이스로부터 제1 데이터(DTA1)를 수신할 수 있다. 전술된 바와 같이, TCP 컨트롤러가 제1 헤 더 정보(HIF1)의 생성 및 제1 액세스 신호(XAC1)의 출력을 조율함으로써, 별도의 제어를 수행하지 아니하고도 제1 헤더 정보(HIF1) 및 제1 데이터(DTA1)는 제1 헤더 큐(HQ) 및 제1 데이터 큐(DQ)의 동일 위치(동일 인덱스) 상에 위치할 수 있다. 헤더 생성기(HGT)는 TCP 규약에 근거하여 제1 헤더 정보(HIF1)에 대응되는 TCP 헤더를 생성할 수 있다. 페이로 드 생성기(PGT)는 제1 데이터(DTA1)에 대응되는 페이로드를 생성할 수 있다. 이때, 전술된 제1 파라미터(PAR1) 에 포함되는 제1 데이터(DTA1)에 대한 시퀀스 넘버는 TCP 패킷(PKT)의 TCP 헤더(TCP header) 상의 시퀀스 넘버 와 동일하거나 상이할 수 있다. 마찬가지로, 제1 데이터(DTA1)의 크기와 페이로드의 크기는 동일하거나 상이할 수 있다 예를 들어, 네트워크 인터페이스 장치는 시스템 자원이나 네트워크 상태 등에 따라 페이로드의 크 기를 제1 요청(REQ1)의 제1 데이터(DTA1)와 달리하여 TCP 패킷(TPK)을 생성할 수 있고, 이 경우 TCP 헤더 상의 시퀀스 넘버는 제1 파라미터(PAR1) 상의 시퀀스 넘버와 상이하게 설정될 수 있다. 결합기(CMB)는 TCP 헤더와 페이로드를 결합하여 TCP 패킷(TPK)을 생성할 수 있다. 이렇듯, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 호스트 인터페이스로 수신된 제1 데이 터(DTA1)에 대한 추가적인 버퍼링 동작을 수행하지 아니하고 직접 패킷 생성기로 전달하여 TCP 패킷(TPK) 으로 처리할 수 있다. 따라서, 네트워크 인터페이스 장치에서의 메모리 사용량이 대대적으로 감소될 수 있 다. 다시 도 1 및 도 8을 참조하면, 제1 데이터(DTA1)는 네트워크 인터페이스 장치의 내부에서 복제되지 아니 하므로, 패킷 생성기를 통해 생성된 TCP 패킷(TPK)이 네트워크로 전송되면, 네트워크 인터페이스 장치 에는 제1 데이터(DTA1)가 더이상 존재하지 아니하게 된다. 이때, \"존재하지 아니한다\"의 의미는 네트워크 인터페이스 장치가 해당 TCP 패킷(TPK)의 전송 후에도 임의의 처리 또는 목적을 위해 해당 TCP 패킷(TPK) 의 제1 데이터(DTA1)를 내부에 의도적으로 저장 또는 버퍼링하지 아니함을 의미하는 것으로, 대부분의 컴퓨팅 시스템에서 발생 가능한 비의도적 저장 상태까지 포함하는 것은 아니다. 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 상기의 동작을 통해 TCP 패킷(PKT)을 생성할 수 있 다. 또한, 본 개시의 실시예에 따른 네트워크 인터페이스 장치에서 네트워크를 통해 수신된 TCP 패킷(PK T)을 다음과 같이 처리할 수 있다. 수신 파서는 네트워크로부터 TCP 패킷(PKT)을 수신하는 경우(S2-1), TCP 패킷(PKT)의 페이로드에 대응되는 제2 데이터(DTA2)를 호스트 인터페이스로 전달하여(S2-2), TCP 데이터 버퍼(TBF)로 DMA 전송(기입)을 수행 할 수 있다(S2-3). 이때, 제2 데이터(DTA2)는 TCP 데이터 버퍼(TBF) 중 패킷 데이터(PDT)의 시퀀스 넘버에 대응 되는 영역에 저장될 수 있다. 전술된 제1 데이터(DTA1)와 페이로드의 관계와 마찬가지로, 제2 데이터(DTA2)는페이로드와 다른 크기로 생성될 수 있다. 이와 동시에, 수신 파서는 수신된 TCP 패킷(PKT)의 제2 헤더 정보(HIF2)를 TCP 컨트롤러에 전달하고 (S2-4), TCP 컨트롤러는 이에 대한 TCP 연산을 수행하여 제2 파라미터(PAR2)를 포함하는 제2 요청(REQ2)을 생성할 수 있다. 이후 호스트 장치로부터 제2 데이터(DTA2)의 수신에 대한 요청, 예를 들어, 도어벨 (doorbell, XDB) 신호가 수신되면(S2-5), 제2 파라미터(PAR2)를 포함하는 제2 요청(REQ2)이 호스트 장치 로 전달될 수 있다(S2-6, S2-7). 이때, 전술된 바와 같이, TCP 컨트롤러는 도어벨 신호(XDB)를 수신하기 전에 제2 요청(REQ2)을 먼저 호스트 인터페이스에 전달할 수도 있다(S2-6). 패킷 생성기를 통해 생성된 TCP 패킷(TPK)이 네트워크로 전송되면, 네트워크 인터페이스 장치에는 제 1 데이터(DTA1)가 더이상 존재하지 아니하게 되는 것과 마찬가지로, 호스트 인터페이스를 통해 제2 데이터 (DTA2)가 호스트 장치로 전송되면, 네트워크 인터페이스 장치에는 제2 데이터(DTA2)가 더이상 존재하 지 아니하게 된다. 여기서 \"존재하지 아니한다\"의 의미 또한 전술된 바와 같다. 이렇듯, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 수신 파서에 의해 처리된 제2 데이터 (DTA2)에 대한 추가적인 버퍼링 동작을 수행하지 아니하고 직접 호스트 인터페이스로 전달하여 TCP 패킷 (TPK)을 처리할 수 있다. 따라서, 네트워크 인터페이스 장치에서의 메모리 사용량이 대대적으로 감소될 수 있다. 도시되지는 아니하였으나, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 스케쥴러(scheduler), 내 부 메모리 등을 더 포함할 수 있다. 또한, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 TCP/IP 외의 ICMP(Internet Control Message Protocol), ARP(Address Resolution Protocol) 등 다른 네트워크 프로토 콜을 지원하기 위한 별도의 모듈을 더 포함할 수 있고, 해당 처리 모듈을 통해 연결 계층 라우팅(link layer routing) 등을 수행할 수 있다. 본 개시의 실시예에 따르면, 서버 장치는, 네트워크로 전송하고자 하는 제1 요청의 제1 데이터를 저장하는 TCP 데이터 버퍼 및 상기 제1 데이터에 대한 제1 시퀀스 넘버를 포함하는 상기 제1 요청의 제1 파라미터를 저장하는 제1 커맨드 큐를 포함하는 호스트 장치; 및 상기 제1 커맨드 큐로부터 상기 제1 파라미터를 수신하고, 상기 TCP 데이터 버퍼 중 상기 제1 시퀀스 넘버에 대응되는 영역으로부터 상기 제1 데이터를 페치하여, 상기 제1 요청에 대한 제1 TCP 패킷으로 생성하는 네트워크 인터페이스 장치;를 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 상기 제1 파라미터에 대한 TCP 연산을 수행하여 제1 헤더 정보를 출력하는 TCP 컨트롤러; 제1 액세스 신호에 응답하여, 상기 TCP 데이터 버퍼에서 상기 제1 데 이터를 DMA 수신하는 호스트 인터페이스; 및 상기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하고, 상기 호 스트 인터페이스로부터 상기 제1 데이터를 수신하여, 상기 제1 TCP 패킷을 생성하는 패킷 생성기;를 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 제1 데이터는, 버퍼링 또는 복제되지 아니하는 상태로 상기 호스트 인터페이 스로부터 상기 패킷 생성기에 전달될 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 네트워크로부터 수신되는 제2 TCP 패킷으로부터 제2 헤더 정보 및 제2 데이터를 추출하고, 상기 제2 데이터를 버퍼링 또는 복제되지 아니하는 상태로 상기 호스 트 인터페이스로 전송하는 수신 파서;를 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 호스트 인터페이스는, 상기 TCP 데이터 버퍼 중 상기 제2 데이터에 대한 제2 시퀀스 넘버에 대응되는 영역으로 상기 제2 데이터를 DMA 전송할 수 있다. 본 개시의 실시예에 따르면, 상기 호스트 장치는, 상기 제1 시퀀스 넘버 및 상기 제2 시퀀스 넘버에 대응되고 각각의 TCP 세션에 대한 상기 TCP 데이터 버퍼의 상태를 나타내는, 한 쌍의 전송 오프셋 및 한 쌍의 수신 오프 셋을 저장하는 TCP 세션 테이블;을 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 한 쌍의 전송 오프셋 중 하나는, 상기 제1 데이터의 전송이 ACK 처리되는 때 에 업데이트 되고, 상기 한 쌍의 수신 오프셋 중 하나는, 상기 제2 데이터의 수신이 ACK 처리되는 때에 업데이 트될 수 있다. 본 개시의 실시예에 따르면, 상기 호스트 장치는, 상기 네트워크 인터페이스 장치로부터 상기 제2 헤더 정보에 대응되는 상기 제2 파라미터를 수신하여 저장하는 제2 커맨드 큐;를 더 포함할 수 있다.본 개시의 실시예에 따르면, 상기 제1 시퀀스 넘버는, 상기 제1 TCP 패킷의 TCP 헤더의 시퀀스 넘버와 상이할 수 있다. 본 개시의 실시예에 따르면, 상기 TCP 데이터 버퍼는, 상기 제1 시퀀스 넘버 중 상기 TCP 데이터 버퍼의 크기에 대응되는 개수의 하위 비트로 어드레싱될 수 있다. 본 개시의 실시예에 따르면, 상기 TCP 데이터 버퍼는, 각각의 TCP 세션에 대응되는 서브 버퍼 영역;을 포함할 수 있다. 본 개시의 실시예에 따르면, 네트워크 인터페이스 장치는, 수신되는 제1 요청에 대한 TCP 연산을 수행하여 제1 헤더 정보를 생성하는 TCP 컨트롤러; 상기 제1 데이터에 대한 시퀀스 넘버에 대응되는 정보를 포함하는 제1 액 세스 신호에 응답하여, 외부로부터 상기 제1 요청에 대응되는 제1 데이터를 수신하는 호스트 인터페이스; 및 상 기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하고, 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신 하여, 상기 제1 요청에 대응되는 제1 패킷을 생성하는 패킷 생성기;를 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 호스트 인터페이스는, 상기 제1 데이터를 DMA 전송하는 DMA 컨트롤러;를 포함 할 수 있다. 본 개시의 실시예에 따르면, 상기 제1 데이터는, 버퍼링 또는 복제되지 아니하는 상태로 상기 호스트 인터페이 스로부터 상기 패킷 생성기에 전달될 수 있다. 본 개시의 실시예에 따르면, 상기 패킷 생성기는, 상기 TCP 컨트롤러로부터 상기 제1 헤더 정보를 수신하는 제1 헤더 큐; 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신하는 제1 데이터 큐; 상기 제1 헤어 큐로부터 상기 제1 헤더 정보를 수신하여 상기 제1 TCP 패킷의 TCP 헤더를 생성하는 헤더 생성기; 상기 제1 데이터 큐로 부터 상기 제1 데이터를 수신하여 상기 제1 TCP 패킷의 페이로드로 처리하는 페이로드 생성기; 및 상기 TCP 헤 더와 상기 페이로드를 결합하여 상기 제1 TCP 패킷으로 출력하는 결합기;를 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 네트워크로부터 수신되는 제2 TCP 패킷으로부터 제2 헤더 정보 및 제2 데이터를 추출하고, 상기 제2 데이터를 버퍼링 또는 복제되지 아니하는 상태로 상기 호스 트 인터페이스로 전송하는 수신 파서;를 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 상기 패킷 생성기가 상기 제1 TCP 패킷을 외부 로 전송하거나 상기 호스트 인터페이스가 상기 제2 데이터를 외부로 전송하면, 내부에 상기 제1 데이터 또는 상 기 제2 데이터가 존재하지 아니할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 상기 제1 데이터의 전송 또는 상기 제2 데이터 의 수신에 대응되는 ACK 처리가 완료되기 전까지 상기 제1 데이터 또는 상기 제2 데이터를 버퍼링하기 위한 내 부 버퍼를 포함하지 아니할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 상기 제1 액세스 신호는, 상기 제1 헤더 정보의 생성과 동시에 또는 상기 제1 헤더 정보가 생성된 후에 상기 TCP 컨트롤러로부터 출력될 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치의 네트워크 인터페이스 장치의 동작 방법은, 상기 호스트 인터페이스가, 외부로부터 상기 제1 요청을 수신하는 동작; 상기 TCP 컨트롤러가, 상기 제1 요청에 대한 TCP 연산을 수행하여 상기 제1 헤더 정보를 생성하는 동작; 상기 호스트 인터페이스가, 제1 액세스 신호에 응답 하여, 외부로부터 상기 제1 데이터를 DMA 수신하는 동작; 및 상기 패킷 생성기가, 상기 TCP 컨트롤러로부터 상 기 제1 헤더 정보를 수신하고, 버퍼링 또는 복제되지 아니하는 상태로 상기 호스트 인터페이스로부터 상기 제1 데이터를 수신하여, 상기 제1 TCP 패킷을 생성하는 동작;을 포함할 수 있다. 본 개시의 다양한 실시예들 및 이에 사용된 용어들은 본 개시에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 예를 들면, 단수로 표현된 구성요소는 문맥상 명백하게 단수만을 의미하지 않는다면 복수의 구성요소를 포함하 는 개념으로 이해되어야 한다. 본 개시에서 사용되는 '및/또는'이라는 용어는, 열거되는 항목들 중 하나 이상의 항목에 의한 임의의 가능한 모든 조합들을 포괄하는 것임이 이해되어야 한다. 본 개시에서 사용되는 '포함하 다,' '가지다,' '구성되다' 등의 용어는 본 개시 상에 기재된 특징, 구성 요소, 부분품 또는 이들을 조합한 것 이 존재함을 지정하려는 것일 뿐이고, 이러한 용어의 사용에 의해 하나 또는 그 이상의 다른 특징들이나 구성 요소, 부분품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 배제하려는 것은 아니다. 본 개시에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\",및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 본 개시의 다양한 실시예들에서 사용된 용어 \"~부\", \"~ 블록\" 또는 \"~모듈\"은 하드웨어, 소프트웨어 또는 펌웨 어로 구현된 유닛을 포함할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환 적으로 사용될 수 있다. \"~부\", \"~ 블록\" 또는 \"~모듈\"은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능 을 수행하는, 상기 부품의 최소 단위 또는 그 일부가 될 수 있다. 예를 들면, 일 실시예에 따르면, \"~부\", \"~ 블록\" 또는 \"~모듈\"은 ASIC(application-specific integrated circuit)의 형태로 구현될 수 있다. 본 개시의 다양한 실시예들에서 사용된 용어 “~할 경우”는 문맥에 따라 “~할 때”, 또는 “~할 시” 또는 “ 결정하는 것에 응답하여” 또는 “검출하는 것에 응답하여”를 의미하는 것으로 해석될 수 있다. 유사하게, “~ 라고 결정되는 경우” 또는 “~이 검출되는 경우”는 문맥에 따라 “결정 시” 또는 “결정하는 것에 응답하여 ”, 또는 “검출 시” 또는 “검출하는 것에 응답하여”를 의미하는 것으로 해석될 수 있다. 본 개시를 통해 설명된 TOE 기반의 네트워크 인터페이스 장치 및 서버 장치에서 실행되는 프로그램은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현 될 수 있다. 프로그램은 컴퓨터로 읽을 수 있는 명령어들을 수행할 수 있는 모든 시스템에 의해 수행될 수 있다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령어(instruction), 또는 이들 중 하나 이상 의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어는, 컴퓨터로 읽을 수 있는 저장 매체(computer- readable storage media)에 저장된 명령어를 포함하는 컴퓨터 프로그램으로 구현될 수 있다. 컴퓨터가 읽을 수 있는 저장 매체로는, 예를 들어 마그네틱 저장 매체(예컨대, ROM(Read-Only Memory), RAM(Random-Access Memory), 플로피 디스크, 하드 디스크 등) 및 광학적 판독 매체(예컨대, 시디롬(CD-ROM), 디브이디(DVD: Digital Versatile Disc)) 등이 있다. 컴퓨터가 읽을 수 있는 저장 매체는 네트워크로 연결된 컴퓨터 시스템들 에 분산되어, 분산 방식으로 컴퓨터가 판독 가능한 코드가 저장되고 실행될 수 있다. 컴퓨터 프로그램은 어플리 케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인 으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부 는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매 체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 본 개시의 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또 는 하나 이상의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소 들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요 소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9"}
{"patent_id": "10-2024-0058180", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 실시예에 따른 네트워크 인터페이스 장치를 나타내는 도면이다. 도 2 및 도 3은 각각 본 개시의 실시예에 따른 TCP 데이터 버퍼를 나타내는 도면이다. 도 4는 본 개시의 실시예에 따른 서버 장치에서 호스트 장치가 네트워크 인터페이스 장치로 제1 데이터를 전송 하는 동작을 개념적으로 나타내는 도면이다. 도 5는 본 개시의 실시예에 따른 서버 장치에서 호스트 장치가 네트워크 인터페이스 장치로부터 제2 데이터를 수신하는 동작을 개념적으로 나타내는 도면이다. 도 6은 본 개시의 실시예에 따른 TCP 세션 테이블을 나타내는 도면이다. 도 7은 본 개시의 실시예에 따른 서버 장치를 나타내는 도면이다. 도 8은 본 개시의 실시예에 따른 네트워크 인터페이스 장치를 나타내는 도면이다. 도 9는 본 개시의 실시예에 따른 패킷 생성기를 나타내는 도면이다."}
