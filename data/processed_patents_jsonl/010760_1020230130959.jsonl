{"patent_id": "10-2023-0130959", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0046901", "출원번호": "10-2023-0130959", "발명의 명칭": "인공 지능 기반의 데이터 처리 장치 및 방법", "출원인": "주식회사 엘지유플러스", "발명자": "이종현"}}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "사용자의 질문을 벡터화하는 제1 벡터 변환부;상기 벡터화된 질문과 사용자가 등록한 문서 컨텐츠의 벡터화된 조각들 간의 제1 유사도를 측정하여 벡터화된N(N은 1 이상)개의 조각들을 추출하는 제1 유사도 검색부;상기 벡터화된 질문과 상기 제1 유사도 검색부에서 추출되는 벡터화된 N개의 조각들과의 제2 유사도를 측정하여제2 유사도 값을 획득하는 제2 유사도 검색부;상기 문서 컨텐츠의 조각 크기 정보를 기반으로 보정 정보를 산출하고, 산출된 보정 정보를 기반으로 상기 제2유사도 값을 보정하는 유사도 보정부;상기 유사도 보정부에서 보정된 제2 유사도 값을 기 설정된 임계값과 비교하여 사용자의 질문이 상기 문서 컨텐츠와 관련이 있는지를 판별하는 비교부; 및상기 비교부에서 사용자의 질문이 상기 문서 컨텐츠와 관련이 있다고 판별되면 사용자의 질문에 대한 프롬프트를 재구성하는 프롬프트 재구성부를 포함하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,사용자가 업로드하는 문서 컨텐츠로부터 텍스트를 추출하는 텍스트 추출부;상기 텍스트 추출부에서 추출된 텍스트를 일정 크기의 조각들로 분할하는 텍스트 분할부; 상기 분할된 문서 컨텐츠의 조각들을 벡터화하는 제2 벡터 변환부; 및상기 제2 벡터 변환부에서 벡터화된 문서 컨텐츠의 조각들과 상기 문서 컨텐츠의 조각 크기 정보를 저장하는 저장부를 더 포함하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2 항에 있어서, 상기 제1 벡터 변환부와 상기 제2 벡터 변환부는 동일 단어 임베딩 알고리즘을 사용하여 사용자의 질문과 상기문서 컨텐츠의 조각들을 각각 벡터화하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서, 상기 제1 유사도 검색부는코사인 유사도를 기반으로 상기 벡터화된 질문과 상기 벡터화된 문서 컨텐츠의 조각들 간의 제1 유사도를 측정하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서, 상기 제2 유사도 검색부는자카드 유사도를 기반으로 상기 벡터화된 질문과 상기 벡터화된 N개의 조각들과의 유사도를 측정하여 제2 유사도 값을 획득하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서, 상기 제2 유사도 검색부는제1 집합과 제2 집합의 교집합의 크기를 상기 제1 집합과 상기 제2 집합의 합집합의 크기로 나누어 제2 유사도공개특허 10-2025-0046901-3-값을 획득하며,상기 제1 집합은 상기 벡터화된 질문에 포함된 단어들로 구성되고, 상기 제2 집합은 상기 벡터화된 N개의 조각들의 합집합에 포함된 단어들로 구성되는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6 항에 있어서, 상기 유사도 보정부는상기 제1 집합에 속하는 단어들의 개수와 상기 제2 집합에 속하는 단어들의 개수를 기반으로 보정 정보를 산출하며, 상기 제2 집합에 포함되는 단어들의 개수는 상기 문서 컨텐츠의 조각 크기와 상기 벡터화된 N개의 조각들의 합집합의 결과에 따라 달라지는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7 항에 있어서, 상기 유사도 보정부는상기 제2 집합에 속하는 단어들의 개수를 상기 제1 집합에 속하는 단어들의 개수를 나눈 값으로 보정 정보를 산출하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8 항에 있어서, 상기 유사도 보정부는상기 제2 유사도 값에 상기 보정 정보를 곱하여 상기 제2 유사도 값을 보정하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 6 항에 있어서, 상기 문서 컨텐츠가 한국어이면, 상기 제2 집합을 위해 상기 벡터화된 N개의 조각들에 포함된 단어로부터 조사를 제거하는 전처리부를 더 포함하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 1항에 있어서,상기 재구성된 프롬프트를 기반으로 AI(Artificial Intelligence) 서버에 답변을 요청하고, 상기 AI 서버에서적어도 상기 문서 컨텐츠 또는 기 학습된 적어도 하나의 문서 컨텐츠를 참조하여 생성한 답변을 제공받아 표시하는 표시부를 더 포함하는 AI 기반의 데이터 처리 장치."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "사용자의 질문을 벡터화하는 단계;상기 벡터화된 질문과 사용자가 등록한 문서 컨텐츠의 벡터화된 조각들 간의 제1 유사도를 측정하여 벡터화된N(N은 1 이상)개의 조각들을 추출하는 단계;상기 벡터화된 질문과 상기 벡터화된 N개의 조각들과의 제2 유사도를 측정하여 제2 유사도 값을 획득하는 단계;상기 문서 컨텐츠의 조각 크기 정보를 기반으로 보정 정보를 산출하고, 산출된 보정 정보를 기반으로 상기 제2유사도 값을 보정하는 단계;상기 보정된 제2 유사도 값을 기 설정된 임계값과 비교하여 사용자의 질문이 상기 문서 컨텐츠와 관련이 있는지를 판별하는 단계; 및사용자의 질문이 상기 문서 컨텐츠와 관련이 있다고 판별되면 사용자의 질문에 대한 프롬프트를 재구성하는 단계를 포함하는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "공개특허 10-2025-0046901-4-제 12 항에 있어서,사용자가 업로드하는 문서 컨텐츠로부터 텍스트를 추출하는 단계;상기 추출된 텍스트를 일정 크기의 조각들로 분할하는 단계; 상기 분할된 문서 컨텐츠의 조각들을 벡터화하는 단계; 및상기 벡터화된 문서 컨텐츠의 조각들과 상기 문서 컨텐츠의 조각 크기 정보를 저장부에 저장하는 단계를 더 포함하는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 13 항에 있어서, 사용자의 질문과 상기 문서 컨텐츠의 조각들은 동일 단어 임베딩 알고리즘이사용되어 각각 벡터화되는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 12 항에 있어서, 상기 제1 유사도를 측정하여 N개의 조각들을 추출하는 단계는코사인 유사도를 기반으로 상기 벡터화된 질문과 상기 벡터화된 문서 컨텐츠의 조각들 간의 제1 유사도를 측정하는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 12 항에 있어서, 상기 제2 유사도를 측정하는 단계는자카드 유사도를 기반으로 상기 벡터화된 질문과 상기 벡터화된 N개의 조각들과의 유사도를 측정하여 제2 유사도 값을 획득하는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 12 항에 있어서, 상기 제2 유사도를 측정하는 단계는 제1 집합과 제2 집합의 교집합의 크기를 상기 제1 집합과 상기 제2 집합의 합집합의 크기로 나누어 제2 유사도값을 획득하며,상기 제1 집합은 상기 벡터화된 질문에 포함된 단어들로 구성되고, 상기 제2 집합은 상기 벡터화된 N개의 조각들의 합집합에 포함된 단어들로 구성되는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 17 항에 있어서, 상기 제2 유사도 값을 보정하는 단계는상기 제1 집합에 속하는 단어들의 개수와 상기 제2 집합에 속하는 단어들의 개수를 기반으로 보정 정보를 산출하며, 상기 제2 집합에 포함되는 단어들의 개수는 상기 문서 컨텐츠의 조각 크기와 상기 벡터화된 N개의 조각들의 합집합의 결과에 따라 달라지는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 18 항에 있어서, 상기 제2 유사도 값을 보정하는 단계는 상기 제2 집합에 속하는 단어들의 개수를 상기 제1 집합에 속하는 단어들의 개수를 나눈 값으로 보정 정보를 산출하는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 19 항에 있어서, 상기 제2 유사도 값을 보정하는 단계는 공개특허 10-2025-0046901-5-상기 제2 유사도 값에 상기 보정 정보를 곱하여 상기 제2 유사도 값을 보정하는 AI 기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제 12항에 있어서,상기 재구성된 프롬프트를 기반으로 AI 서버에 답변을 요청하고, 상기 AI 서버에서 적어도 상기 문서 컨텐츠 또는 기 학습된 적어도 하나의 문서 컨텐츠를 참조하여 생성한 답변을 제공받아 표시하는 단계를 더 포함하는 AI기반의 데이터 처리 방법."}
{"patent_id": "10-2023-0130959", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "하드웨어인 컴퓨터와 결합되어, 제 12 항의 방법을 수행할 수 있도록 컴퓨터에서 판독 가능한 기록매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2023-0130959", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "AI 기반의 데이터 처리 장치 및 방법이 개시된다. AI 기반의 데이터 처리 장치는 벡터화된 사용자의 질문과 사용 자가 등록한 문서 컨텐츠의 벡터화된 조각들 간의 제1 유사도를 측정하여 벡터화된 N(N은 1 이상)개의 조각들을 추출하는 제1 유사도 검색부, 상기 벡터화된 질문과 상기 벡터화된 N개의 조각들과의 제2 유사도를 측정하여 제2 (뒷면에 계속)"}
{"patent_id": "10-2023-0130959", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 인공 지능(Artificial Intelligence, AI)을 활용하여 사용자로부터 수신된 질문을 처리하고, 사용자 의 질문에 대한 답변을 제공하는 AI 기반의 데이터 처리 장치 및 방법에 관한 것이다."}
{"patent_id": "10-2023-0130959", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "AI는 다양한 분야와 기술을 포함하는 개념으로, 여러 가지 다른 유형의 AI가 존재한다. 이 중 생성형 AI(Generative AI)는 주어진 데이터나 정보를 활용하여 새로운 데이터나 컨텐츠를 생성하는 기술 을 의미한다. 예를 들어, 생성형 AI는 주로 딥 러닝 기술과 자연어 처리 기술을 사용하여 텍스트, 이미지, 음성 등 다양한 형태의 데이터를 생성할 수 있다. 그리고, 생성형 AI 모델에 따라 주어진 데이터를 기반으로 새로운 데이터나 컨텐츠를 생성하는 방법이 달라질 수 있다. 본 개시에서 생성형 AI는 생성형 AI 모델이라 칭할 수 있 다. 이러한 생성형 AI를 이용하여 컨텐츠를 생성하고 각자의 목적에 맞게 활용하기 위한 다양한 방법들이 제시되고 있다. 특히, 생성형 AI는 사용자가 질문을 입력하면, 입력된 질문을 이해하고 적절한 답변을 생성하는 과정에서 훈련 된 모델과 언어 이해 능력을 기반으로 작동한다. 이때, 사용자의 질문을 처리하기 위해, 사용자의 질문을 벡터화한 후, 데이터베이스에 저장된 데이터와의 유사 도를 검색(또는 측정)한다. 그리고, 유사도가 높은 상위 N개의 내용을 반환해준다. 그러나, 이러한 방법은 수치 적으로는 근사하지만 질문과 검색된 내용의 상관 관계가 높지 않을 수 있으며, 또한 질문과 무관한 내용이 검색 될 수 있다. 즉, 일정한 알고리즘을 통해 벡터화 된 내용은 숫자화 되어 있고, 유사도가 가장 높은 것을 벡터 기준으로 찾아주기 때문에 실질적인 상관관계가 어느 정도인지 구분이 어려운 문제가 있다. 다시 말해, 사용자 의 질문에 대한 답변의 정확도가 떨어지는 문제가 발생한다."}
{"patent_id": "10-2023-0130959", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 전술한 문제점 및 이와 연관된 다양한 문제점을 해결하기 위해 제안되는 것으로서, 본 개시의 목적은 생성형 AI를 활용할 때, 유사도 검색을 개선함으로써, 정확한 답변을 얻을 수 있도록 하는 AI 기반의 데이터 처 리 장치 및 방법을 제공함에 있다. 다만, 전술한 기술적 과제만으로 제한되는 것은 아니고, 본 문서 전체 내용에 기초하여 당업자가 유추할 수 있 는 다른 기술적 과제로 실시예들의 권리범위가 확장될 수 있다."}
{"patent_id": "10-2023-0130959", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상술한 목적 및 다른 이점을 달성하기 위해서 AI 기반의 데이터 처리 장치는 사용자의 질문을 벡터화하는 제1 벡터 변환부, 상기 벡터화된 질문과 사용자가 등록한 문서 컨텐츠의 벡터화된 조각들 간의 제1 유사도를 측정하 여 벡터화된 N(N은 1 이상)개의 조각들을 추출하는 제1 유사도 검색부, 상기 벡터화된 질문과 상기 제1 유사도 검색부에서 추출되는 벡터화된 N개의 조각들과의 제2 유사도를 측정하여 제2 유사도 값을 획득하는 제2 유사도 검색부, 상기 문서 컨텐츠의 조각 크기 정보를 기반으로 보정 정보를 산출하고, 산출된 보정 정보를 기반으로 상기 제2 유사도 값을 보정하는 유사도 보정부, 상기 유사도 보정부에서 보정된 제2 유사도 값을 기 설정된 임 계값과 비교하여 사용자의 질문이 상기 문서 컨텐츠와 관련이 있는지를 판별하는 비교부, 및 상기 비교부에서 사용자의 질문이 상기 문서 컨텐츠와 관련이 있다고 판별되면 사용자의 질문에 대한 프롬프트를 재구성하는 프 롬프트 재구성부를 포함할 수 있다. 실시예들에 따르면, AI 기반의 데이터 처리 장치는 상기 재구성된 프롬프트를 기반으로 AI 서버에 답변을 요청 하고, 상기 AI 서버에서 적어도 상기 문서 컨텐츠 또는 기 학습된 적어도 하나의 문서 컨텐츠를 참조하여 생성 한 답변을 제공받아 표시하는 표시부를 더 포함할 수 있다. 실시예들에 따르면, AI 기반의 데이터 처리 장치는 사용자가 업로드하는 문서 컨텐츠로부터 텍스트를 추출하는 텍스트 추출부, 상기 텍스트 추출부에서 추출된 텍스트를 일정 크기의 조각들로 분할하는 텍스트 분할부, 상기 분할된 문서 컨텐츠의 조각들을 벡터화하는 제2 벡터 변환부, 및 상기 제2 벡터 변환부에서 벡터화된 문서 컨텐 츠의 조각들과 상기 문서 컨텐츠의 조각 크기 정보를 저장하는 저장부를 더 포함할 수 있다. 실시예들에 따르면, 상기 제1 벡터 변환부와 상기 제2 벡터 변환부는 동일 단어 임베딩 알고리즘을 사용하여 사 용자의 질문과 상기 문서 컨텐츠의 조각들을 각각 벡터화할 수 있다. 실시예들에 따르면, 상기 제1 유사도 검색부는 코사인 유사도를 기반으로 상기 벡터화된 질문과 상기 벡터화된 문서 컨텐츠의 조각들 간의 제1 유사도를 측정할 수 있다. 실시예들에 따르면, 상기 제2 유사도 검색부는 자카드 유사도를 기반으로 상기 벡터화된 질문과 상기 벡터화된 N개의 조각들과의 유사도를 측정하여 제2 유사도 값을 획득할 수 있다. 실시예들에 따르면, 상기 제2 유사도 검색부는 제1 집합과 제2 집합의 교집합의 크기를 상기 제1 집합과 상기 제2 집합의 합집합의 크기로 나누어 제2 유사도 값을 획득하며, 상기 제1 집합은 상기 벡터화된 질문에 포함된 단어들로 구성되고, 상기 제2 집합은 상기 벡터화된 N개의 조각들의 합집합에 포함된 단어들로 구성될 수 있다. 실시예들에 따르면, 상기 유사도 보정부는 상기 제1 집합에 속하는 단어들의 개수와 상기 제2 집합에 속하는 단 어들의 개수를 기반으로 보정 정보를 산출하며, 상기 제2 집합에 포함되는 단어들의 개수는 상기 문서 컨텐츠의 조각 크기와 상기 벡터화된 N개의 조각들의 합집합의 결과에 따라 달라질 수 있다. 실시예들에 따르면, 상기 유사도 보정부는 상기 제2 집합에 속하는 단어들의 개수를 상기 제1 집합에 속하는 단 어들의 개수를 나눈 값으로 보정 정보를 산출할 수 있다. 실시예들에 따르면, 상기 유사도 보정부는 상기 제2 유사도 값에 상기 보정 정보를 곱하여 상기 제2 유사도 값 을 보정할 수 있다. 실시예들에 따르면, AI 기반의 데이터 처리 장치는 상기 문서 컨텐츠가 한국어이면, 상기 제2 집합을 위해 상기 벡터화된 N개의 조각들에 포함된 단어로부터 조사를 제거하는 전처리부를 더 포함할 수 있다. 실시예들에 따르면, AI 기반의 데이터 처리 방법은 사용자의 질문을 벡터화하는 단계, 상기 벡터화된 질문과 사 용자가 등록한 문서 컨텐츠의 벡터화된 조각들 간의 제1 유사도를 측정하여 벡터화된 N(N은 1 이상)개의 조각들 을 추출하는 단계, 상기 벡터화된 질문과 상기 벡터화된 N개의 조각들과의 제2 유사도를 측정하여 제2 유사도 값을 획득하는 단계, 상기 문서 컨텐츠의 조각 크기 정보를 기반으로 보정 정보를 산출하고, 산출된 보정 정보 를 기반으로 상기 제2 유사도 값을 보정하는 단계, 상기 보정된 제2 유사도 값을 기 설정된 임계값과 비교하여 사용자의 질문이 상기 문서 컨텐츠와 관련이 있는지를 판별하는 단계, 및 사용자의 질문이 상기 문서 컨텐츠와 관련이 있다고 판별되면 사용자의 질문에 대한 프롬프트를 재구성하는 단계를 포함할 수 있다. 실시예들에 따르면, AI 기반의 데이터 처리 방법은 상기 재구성된 프롬프트를 기반으로 AI 서버에 답변을 요청 하고, 상기 AI 서버에서 적어도 상기 문서 컨텐츠 또는 기 학습된 적어도 하나의 문서 컨텐츠를 참조하여 생성 한 답변을 제공받아 표시부를 통해 표시하는 단계를 더 포함할 수 있다. 실시예들에 따르면, AI 기반의 데이터 처리 방법은 사용자가 업로드하는 문서 컨텐츠로부터 텍스트를 추출하는 단계, 상기 추출된 텍스트를 일정 크기의 조각들로 분할하는 단계, 상기 분할된 문서 컨텐츠의 조각들을 벡터화하는 단계, 및 상기 벡터화된 문서 컨텐츠의 조각들과 상기 문서 컨텐츠의 조각 크기 정보를 저장부에 저장하는 단계를 더 포함할 수 있다. 실시예들에 따르면, 사용자의 질문과 상기 문서 컨텐츠의 조각들은 동일 단어 임베딩 알고리즘이 사용되어 각각 벡터화될 수 있다. 실시예들에 따르면, 상기 제1 유사도를 측정하여 N개의 조각들을 추출하는 단계는 코사인 유사도를 기반으로 상 기 벡터화된 질문과 상기 벡터화된 문서 컨텐츠의 조각들 간의 제1 유사도를 측정할 수 있다. 실시예들에 따르면, 상기 제2 유사도를 측정하는 단계는 자카드 유사도를 기반으로 상기 벡터화된 질문과 상기 벡터화된 N개의 조각들과의 유사도를 측정하여 제2 유사도 값을 획득할 수 있다. 실시예들에 따르면, 상기 제2 유사도를 측정하는 단계는 제1 집합과 제2 집합의 교집합의 크기를 상기 제1 집합 과 상기 제2 집합의 합집합의 크기로 나누어 제2 유사도 값을 획득하며, 상기 제1 집합은 상기 벡터화된 질문에 포함된 단어들로 구성되고, 상기 제2 집합은 상기 벡터화된 N개의 조각들의 합집합에 포함된 단어들로 구성될 수 있다. 실시예들에 따르면, 상기 제2 유사도 값을 보정하는 단계는 상기 제1 집합에 속하는 단어들의 개수와 상기 제2 집합에 속하는 단어들의 개수를 기반으로 보정 정보를 산출하며, 상기 제2 집합에 포함되는 단어들의 개수는 상 기 문서 컨텐츠의 조각 크기와 상기 벡터화된 N개의 조각들의 합집합의 결과에 따라 달라질 수 있다. 실시예들에 따르면, 상기 제2 유사도 값을 보정하는 단계는 상기 제2 집합에 속하는 단어들의 개수를 상기 제1 집합에 속하는 단어들의 개수를 나눈 값으로 보정 정보를 산출할 수 있다. 실시예들에 따르면, 상기 제2 유사도 값을 보정하는 단계는 상기 제2 유사도 값에 상기 보정 정보를 곱하여 상 기 제2 유사도 값을 보정할 수 있다. 실시예들에 따르면, 컴퓨터에서 판독 가능한 기록매체에 저장된 컴퓨터 프로그램은 하드웨어인 컴퓨터와 결합되 어, 위의 방법을 수행할 수 있다. 전술한 해결 수단들은 본 명세서의 다양한 실시예들 중 일부에 불과하며, 본 명세서의 기술적 특징들이 반영된"}
{"patent_id": "10-2023-0130959", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 2, "content": "변형 실시예들도, 본 명세서에 기재된 전반적인 취지를 통해 본 명세서가 속하는 기술분야에서 통상의 지식을 가진 자들이 추론할 수 있다."}
{"patent_id": "10-2023-0130959", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "실시예들에 따른 AI 기반의 데이터 처리 장치 및 방법은 사용자의 질문과 사용자가 등록한 문서 컨텐츠의 조각 들에 대해 1차적으로 유사도를 검색하여 상위 N개의 조각들을 추출하고, 추출된 상위 N개의 조각들에 대해 2차 적으로 자카드 유사도를 검색한 후, 검색된 자카드 유사도 값에 대해 문서 컨텐츠의 조각 크기 정보를 기반으로 보정을 수행함으로써, 사용자가 등록한 문서 컨텐츠의 조각 크기 정보에 상관없이 균일한 자카드 유사도 값을 얻을 수 있고, 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있는지 여부를 정확하게 판별할 수 있으 며, 비용/트랙픽 리소스가 최적화된 프롬프트를 생성할 수 있다. 따라서, 생성형 AI 활용시에 정확하고 신뢰성 높은 답변을 얻을 수 있다. 위에서 명시적으로 언급한 기술적 효과 이외에, 본 명세서 전체 기재를 통해 당업자에게 자명한 효과도 추론할 수 있다."}
{"patent_id": "10-2023-0130959", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 명세서에 개시된 실시예를 상세히 설명하되, 도면 부호에 관계없이 동일하거 나 유사한 구성요소는 동일한 참조 번호를 부여하고 이에 대한 중복되는 설명은 생략하기로 한다. 하기의 실시 예들은 본 개시를 구체화하기 위한 것일 뿐 본 개시의 권리 범위를 제한하거나 한정하는 것이 아님은 물론이다. 본 개시의 상세한 설명 및 실시예들로부터 본 개시가 속하는 기술 분야의 전문가가 용이하게 유추할 수 있는 것 은 본 문서의 권리 범위에 속하는 것으로 해석된다. 본 문서의 상세한 설명은 모든 면에서 제한적으로 해석되어서는 안되며, 예시적인 것으로 고려되어야 한다. 본 문서의 범위는 첨부된 청구항의 합리적 해석에 의해 결정되어야 하고, 본 문서의 등가적 범위 내에서의 모든 변 경은 본 문서의 범위에 포함된다. 한편, 첨부된 블록도의 블록들이나 흐름도의 단계들은 하드웨어로 직접 구현되거나, 하드웨어에 의해 실행되는 소프트웨어 모듈로 구현되거나, 또는 이들의 결합에 의해 구현될 수 있다. 또한, 첨부된 블록도의 블록들이나 흐름도의 단계들은 범용 컴퓨터, 특수용 컴퓨터, 휴대용 노트북 컴퓨터, 네트워크 컴퓨터 등 데이터 프로세싱이 가능한 장비의 프로세서나 메모리에 탑재되어 지정된 기능들을 수행하는 컴퓨터 프로그램 명령들(instruction s)을 의미하는 것으로 해석될 수 있다. 이들 컴퓨터 프로그램 명령들은 컴퓨터 장치에 구비된 메모리 또는 컴퓨 터에서 판독 가능한 메모리에 저장될 수 있기 때문에, 블록도의 블록들 또는 흐름도의 단계들에서 설명된 기능 들은 이를 수행하는 명령 수단을 내포하는 제조물로 생산될 수도 있다. 아울러, 각 블록 또는 각 단계는 특정된 논리적 기능(들)을 실행하기 위한 하나 이상의 실행 가능한 명령들을 포함하는 모듈, 세그먼트 또는 코드의 일 부를 나타낼 수 있다. 또한, 몇 가지 대체 가능한 실시예들에서는 블록들 또는 단계들에서 언급된 기능들이 정 해진 순서와 달리 실행되는 것도 가능하다. 예를 들어, 연속적으로 도시되어 있는 두 개의 블록들 또는 단계들 은 실질적으로 동시에 수행되거나, 역순으로 수행될 수 있으며, 경우에 따라 일부 블록들 또는 단계들이 생략된 채로 수행될 수도 있다. 본 개시는 생성형 AI 모델이 가지고 있는 지식의 범주에서 답변이 이루어 지지 않고, 사용자가 가진 지식을 주 입 시켜서 사용하기 위해, AI 모델에 추가 데이터(예, 문서 컨텐츠)를 넣어서 추가 학습(파인튜닝)을 하거나 프 롬프트 엔지니어링을 수행할 수 있다. 본 개시에서 파인 튜닝은 사전 훈련된 모델을 특정 작업이나 도메인에 맞게 조정하는 과정이다. 특히, 파인 튜 닝에서는 특정 작업을 위한 데이터를 추가로 사용하고, 작업에 특화된 목적 함수를 최적화하여 모델을 미세 조 정한다. 그리고, 프롬프트 엔지니어링은 생성형 AI 모델을 사용할 때 모델에 제공되는 입력 문장 또는 \"프롬프트\"를 설 계하는 과정을 의미한다. 즉, 프롬프트는 모델에게 사용자의 의도나 원하는 작업을 명시적으로 전달하기 위한 문장 또는 키워드의 조합이며, 프롬프트 엔지니어링에서는 올바른 프롬프트를 사용하면 모델의 출력을 원하는 방향으로 유도할 수 있다. 이와 같이, 파인 튜닝 등을 이용하여 추가 학습을 하기 위해서는 AI 모델에 대한 이해도가 높아야 하지만, 프롬 프트 엔지니어링은 AI에 대한 지식이 없어도 수행할 수 있고, 대규모 컴퓨팅 자원을 사용하지 않고 저렴한 리소 스로 수행할 수 있는 장점이 있다. 특히, 본 개시에서 프롬프트 엔지니어링 시, 사용자는 답변에 도움이 되는 문서 컨텐츠를 추가하고 질문을 생성 하여 생성형 AI에게 필요한 답변을 이끌어 내는 방법을 사용할 수 있다. 이때 필요한 문서의 분량이 크다면, 사용하지 않는 컨텐츠의 전달에 사용되는 트래픽에 따라 AI 모델의 이용 요 금(Token 사용량)이 불필요하게 많이 나올 수 있으며, 시스템의 안정성 측면에서 1회 보낼 수 있는 최대 Token 용량에 제약 사항을 둘 수 있다. 이를 해소하기 위해서, 본 개시는 사용자가 등록한 문서 컨텐츠로부터 사용자의 질문과 유사도가 가장 높은 내 용을 검색한 후, 검색된 내용을 기반으로 답변을 AI가 생성하도록 하며, 특히 생성형 AI에 넣는 데이터를 최적 화한다. 특히, 본 개시에서 자연어로 된 질문은 유사도를 판단하는 기준이 모호하기 때문에 일정한 알고리즘을 통해 질 문을 벡터화할 수 있다. 이를 벡터 임베딩(vector embedding)이라고 한다. 즉, 벡터 임베딩은 텍스트 데이터를 수치적인 벡터로 표현(또는 변환)하는 기술이다. 본 개시에서 벡터 임베딩을 지원하는 알고리즘 또는 모델로는 word2vec(구글), GloVe(스탠포드), ELMo (앨런 인 스티튜트/워싱턴대학교), BERT(구글), fastText(페이스북), Ada v2(OpenAI) 등이 있다. 실시예들에 따르면, Word2Vec은 단어를 고정 길이의 밀집 벡터(dense vector)로 표현하며, 분포 가설 (distributional hypothesis)에 기반한다. GloVe(단어 임베딩 벡터의 길이)는 Word2Vec과 유사한 밀집 벡터 기 반의 단어 임베딩 모델이다. 이 모델은 단어의 동시 등장 통계 정보를 활용하여 단어 간 의미 관계를 학습한다. ELMo(Embeddings from Language Models)는 양방향 LSTM(Long Short-Term Memory) 네트워크를 사용하여 단어 표 현을 학습하는 모델이다. BERT(Bidirectional Encoder Representations from Transformers)는 양방향 Transformer 모델을 사용하여 사전 훈련된 단어 임베딩을 생성하는 모델이다. fastText는 Word2Vec과 유사하게 단어 임베딩을 학습하는 모델이지만, 문자 단위 n-그램(n-grams)을 사용하여 단어 임베딩을 학습한다. OpenAI의 Ada v2 모델은 높은 품질의 텍스트 생성을 위한 생성형 AI 모델이다. 위에서 설명한 벡터 임베딩 모델 또는 알고리즘의 예시들은 본 개시의 이해를 돕기 위한 것들이며, 벡터 임베딩 을 수행하는 알고리즘은 어느 것이나 본 개시에 적용될 수 있다. 실시예들에 따르면, 본 개시는 벡터 임베딩 과정을 통해서 사용자가 입력하는 문서 컨텐츠로부터 텍스트를 추출 하고, 추출된 텍스트를 일정한 단위의 조각(Chunk)들로 나누며, 각 조각을 벡터로 변환한 후 저장한다. 그리고 질문이 들어오면 저장된 문서 컨텐츠로부터 유사도가 높은 하나 이상의 조각들을 찾는 과정을 수행한다. 즉, 본 개시는 사용자가 등록을 위해 입력하는 문서 컨텐츠를 일정 크기의 조각(chunk)들로 분할한 후 각 조각(chunk) 에 벡터 임베딩 알고리즘을 적용하여 벡터화할 수 있다. 본 개시에서 문서 컨텐츠는 파일 형태이며, 문서 또는 컨텐츠 또는 문서 파일 등으로 호칭될 수 있다. 본 개시에서 조각화는 문서 컨텐츠를 일정 크기의 작은 조각들로 분할하는 과정이다. 이때, 각 조각의 크기는 사용 사례와 문서의 특성에 따라 다를 수 있다. 또한, 조각의 단위는 문단(또는 단락), 문장, 또는 단어들의 그 룹(또는 집합)이 될 수 있다. 따라서, 조각의 크기에 따라 그 조각에 포함되는 단어들의 개수가 달라질 수 있다. 본 개시에서 '단어(word)'는 적어도 하나의 문자열로 구성되는, 자립적으로 사용되거나, 또는 문법적 기능을 나 타내는 언어의 기본 단위이다. '문자열'이란, 문자들의 배열(sequence)을 의미하고, '문자'는 인간의 언어를 눈 에 볼 수 있는 형태로 나타내어 적는데 사용하는 기호를 의미한다. 예를 들어, 문자에는 한글, 알파벳, 한자, 숫자, 발음 부호, 문장 부호 및 기타 기호가 포함될 수 있다. 본 개시에서 문서 컨텐츠는 동일한 크기(또는 균일한 크기)의 조각들로 분할되는 것을 일 실시예로 한다. 즉, 하나의 문서 컨텐츠에서 분할된 조각들의 크기는 동일하다. 그리고, 문서 컨텐츠 별로 문서 컨텐츠의 특징에 따 라 조각의 크기가 달라질 수 있다. 실시예들에 따르면, 본 개시는 문서 컨텐츠를 조각화할 때, 조각의 크기를 식별하기 위한 크기 정보를 저장한다. 도 1은 실시예들에 따른 AI 기반의 데이터 처리 장치의 일 예시를 보인 구성 블록도이다. 도 1의 AI 기반의 데이터 처리 장치는 입력부, 출력부, 제1 저장부, 프로세서, 네트워크 , AI 서버, 및 제2 저장부를 포함할 수 있다. 도 1에서, 입력부, 출력부, 제1 저장부, 및 프로세서를 통합하여 사용자 디바이스라 칭할 수 있다. 실시예들에 따르면, 사용자 디바이스는 사용자로부터 질문을 입력받고, 입력된 질문에 대한 답변을 출력(또는 표시)하는 장치이다. 또한, 사용자 디바이스는 등록을 원하는 문서 컨텐츠를 업로드할 수 있는 장치이다. 본 개 시에서 사용자 디바이스는 예를 들어, 스마트폰, 태블릿 PC, 노트북, 데스크탑 PC, 웨어러블 장치 등이 될 수 있다. 그러나, 사용자 디바이스가 전술한 예시로 한정되는 것은 아니다. 실시예들에 따르면, 본 개시의 AI 서비스 관련 애플리케이션 혹은 프로그램(이하, '애플리케이션'으로 통칭함) 은 사용자 디바이스에 탑재되어 있거나 다운로드를 통해 사용자 디바이스에 설치 가능하고, 해당 애플리케이션 을 실행시킬 수 있는 운영체제가 사용자 디바이스에 탑재된 것을 일 실시예로 한다. 실시예들에 따르면, 입력부는 사용자로부터 질문을 텍스트 또는 음성으로 입력 받을 수 있다. 입력부(11 1)는 음성으로 입력되는 사용자의 질문을 텍스트 형태로 변환하는 기능을 포함할 수 있다. 또한, 사용자는 입력부를 통해 등록할 문서 컨텐츠(또는 문서 파일)를 업로드하거나 텍스트, 이미지 등을 입력할 수 있다. 실 시예들에 따르면, 입력부는 예를 들어, 키보드, 마우스, 펜, 음성 입력 디바이스, 터치 입력 디바이스, 적 외선 카메라, 비디오 입력 디바이스, 또는 임의의 다른 입력 디바이스 등이 될 수 있다. 실시예들에 따르면, 출력부는 사용자의 질문에 대한 답변(또는 대답 또는 응답이라 함)을 텍스트, 이미지 또는 음성으로 표현할 수 있다. 실시예들에 따르면, 출력부는 예를 들어, 하나 이상의 디스플레이, 스피커, 프린터 또는 임의의 다른 출력 디바이스 등이 될 수 있다. 실시예들에 따르면, 제1 저장부는 메모리 또는 데이터베이스로 호칭될 수 있으며, 사용자 디바이스에 관한 적어도 하나의 인스트럭션(instruction)이 저장될 수 있다. 그리고, 제1 저장부에는 사용자 디바이스를 구 동시키기 위한 O/S(Operating System)가 저장될 수 있다. 또한, 제1 저장부에는 본 개시의 다양한 실시 예 들에 따라 사용자 디바이스가 동작하기 위한 각종 소프트웨어 프로그램이나 애플리케이션이 저장될 수도 있다. 그리고, 제1 저장부는 플래시 메모리(Flash Memory) 등과 같은 반도체 메모리나 하드디스크(Hard Disk) 등 과 같은 자기 저장 매체 등을 포함할 수 있다. 또한, 본 개시에서 제1 저장부라는 용어는 메모리, 프로세 서 내 롬(미도시), 램(미도시) 또는 사용자 디바이스에 장착되는 메모리 카드(미도시)(예를 들어, micro SD 카드, 메모리 스틱)를 포함하는 의미로 사용될 수 있다. 특히, 본 개시에 따른 다양한 실시예들에 있어서, 제1 저장부에는 사용자가 등록한 문서 컨텐츠 및/또는 문서 컨텐츠와 관련된 정보(또는 조각과 관련된 정보 또는 분할 정보라 칭함)가 저장될 수 있다. 제1 저장부 는 도 2의 벡터 데이터베이스(DB) 및/또는 도 3의 벡터 DB에 해당될 수 있다. 좀 더 구체적으로, 제1 저장부는 프로세서의 제어에 따라 프로세서에서 처리된 문서 컨텐츠, 메 타데이터, 및/또는 시스템 정보를 저장할 수 있다. 메타데이터에는 데이터의 작성 날짜, 작성자, 주제, 태그, 카테고리 등의 정보가 포함될 수 있다. 실시예들에 따르면, 제1 저장부에 저장되는 문서 컨텐츠는 벡터화된 데이터(또는 조각)일 수 있다. 이 벡 터화된 데이터(또는 조각)는 단어 임베딩, TF-IDF 벡터, 문서 벡터 등과 같은 형태일 수 있다. 또한, 제1 저장부는 프로세서에서 텍스트를 일정 크기의 조각들로 분할할 때, 프로세서의 제어 에 따라 그 조각의 크기를 식별할 수 있는 조각 크기 정보를 저장할 수 있다. 본 개시에서 조각 크기 정보는 조각과 관련된 정보(또는 문서 컨텐츠와 관련된 정보 또는 분할 정보라 함)에 포 함될 수 있다. 실시예들에 따르면, 제1 저장부에 저장된 문서 컨텐츠는 사용자의 질문과 유사한 조각들을 추출하기 위한 유사도 검색에 이용될 수 있다. 실시예들에 따르면, 사용자가 업로드한 문서 컨텐츠는 AI 서버에서 사용자 질문에 대한 적절한 대답을 생 성할 때 참조하기 위해 제2 저장부에 저장될 수 있다. 실시예들에 따르면, 프로세서는 예를 들어, 중앙처리장치(CPU), 그래픽처리장치(GPU), 마이크로프로세서, 주문형 반도체(Application Specific Integrated Circuit, ASIC), Field Programmable Gate Arrays(FPGA) 등 을 포함할 수 있으며, 복수의 코어를 가질 수 있다. 이때, 프로세서는 하드웨어 소프트웨어 또는 이들의 조합에 따라 컴퓨터나 이와 유사한 장치로 구현될 수 있다. 하드웨어적으로 프로세서는 전기적인 신호를 처리하 여 제어 기능을 수행하는 전자 회로 형태로 제공될 수 있으며, 소프트웨어적으로는 하드웨어적인 프로세서를 구 동시키는 프로그램 형태로 제공될 수 있다. 실시예들에 따르면, 사용자는 컨텐츠를 등록하거나 또는 질문을 하기 위해 입력부 및/또는 프로세서 를 통해 AI 서비스 관련 애플리케이션을 실행시키고, 실행된 애플리케이션에 로그인할 수 있다. 이는 사용자 식 별과 컨텐츠 관리를 위한 단계일 수 있다. 실시예들에 따르면, 프로세서는 사용자가 업로드한 문서 컨텐츠를 처리하여 제1 저장부에 저장하고, 사용자의 질문에 대한 유사도 검색 후 그 결과를 기반으로 사용자의 질문(또는 재구성된 프롬프트)를 AI 서버 로 전송하며, 또한, 사용자의 질문(또는 재구성된 프롬프트)에 대한 답변을 AI 서버로부터 수신하여 출력부로 제공할 수 있다. 이때, 전술한 바와 같이 사용자가 업로드한 문서 컨텐츠로부터 추출된 텍스트는 조각화 및 벡터화된 후 제1 저장부에 저장될 수 있다. 예를 들어, 프로세서는 사용자가 입력부를 통해 AI 서비스 관련 애플리케이션을 실행시키고, 그 애플 리케이션을 통해 업로드한 문서 컨텐츠로부터 텍스트를 추출하고, 추출된 텍스트를 조각 단위로 분할하며, 분할 된 각 조각을 벡터화한 후 제1 저장부에 저장할 수도 있다. 이때, 사용자가 업로드한 문서 컨텐츠는 파일 형태일 수 있다. 또한, 프로세서는 추출된 텍스트를 일정 크기의 조각들로 분할할 때, 조각 크기 정보도 제1 저장부에 저장하는 것을 일 실시예로 한다. 이때, 벡터화된 문서 컨텐츠의 조각들과 조각 크기 정보는 같이 저장되거나, 또는 따로 저장되고 서로 링크될 수 있다. 본 개시에서 조각 크기 정보는 자카드 유사도 검사 시 보정 계수 산출에 이용되는 것을 일 실시예로 한다. 상세 내용은 도 2 내지 도 5를 참조하여 뒤에서 설명하 기로 한다. 또한, 프로세서는 사용자가 입력부를 통해 입력하는 질문을 벡터화하고, 제1 유사도 검색 및 제2 유 사도 검색을 수행한 후, 유사도 검색 결과를 기반으로 질문에 대응하는 프롬프트를 재구성하고, 재구성된 프롬 프트를 기반으로 AI 서버에 답변을 요청할 수 있다. 이때, AI 서버는 질문에 대응하는 적절한 답변을 생성한 후 프로세서로 제공할 수 있다. 상세 내용은 도 3 내지 도 5를 참조하여 뒤에서 설명하기로 한다. 실시예들에 따르면, 프로세서와 AI 서버는 네트워크를 통해 연결될 수 있다. 실시예들에 따르면, 네트워크는 단말들 및 AI 서버들과 같은 각각의 노드 상호 간에 정보 교환이 가능한 연결 구조를 의미하는 것으로, 근거리 통신망(LAN: Local Area Network), 광역 통신망(WAN: Wide Area Network), 인터넷 (WWW: World Wide Web), 유무선 데이터 통신망, 전화망, 유무선 텔레비전 통신망 등을 포함할 수 있다. 무선 데이터 통신망의 일례에는 3G, 4G, 5G, 3GPP(3rd Generation Partnership Project), LTE(Long Term Evolution), WIMAX(World Interoperability for Microwave Access), 와이파이(Wi-Fi), 블루투스 통신, 적 외선 통신, 초음파 통신, 가시광 통신(VLC: Visible Light Communication), 라이파이(LiFi) 등이 포함되나 이 에 한정되지는 않는다. 실시예들에 따르면, AI 서버는 AI 모델을 실행하여 사용자가 입력한 질문(또는 재구성된 프롬프트)을 처리 하여 답변을 생성하고, 생성된 답변을 네트워크를 통해 사용자 디바이스로 제공할 수 있다. 본 개시에서 AI 서버는 사용자가 등록한 문서 컨텐츠를 참조하여 답변을 생성할 수 있다. 이를 위해, 사용 자가 등록한 문서 컨텐츠는 제2 저장부에 저장될 수 있다. 실시예들에 따르면, 제2 저장부는 AI 서버에 구비된 저장 장치(또는 데이터베이스)일 수도 있고, 또 는 외부 데이터베이스일 수도 있다. 실시예들에 따르면, 제2 저장부는 다양한 출처에서 수집된 데이터를 포함할 수 있다. 예를 들어, AI 서버는 사용자가 입력한 질문(또는 재구성된 프롬프트)을 분석하고, 분석 결과를 기반으로 질문과 관련된 정보(또는 데이터)를 데이터베이스에서 검색하여 답변을 생성한다. 이때, 데이터베이스는 제1 저 장부 및/또는 제2 저장부가 될 수 있다. 또한, 사용자가 등록한 문서 컨텐츠는 데이터베이스에 저장 되어 있으며, 질문에 대응하는 답변을 생성하기 위한 검색에 이용되는 것을 일 실시예로 한다. 도 2는 실시예들에 따른 컨텐츠 등록을 위한 등록 처리 모듈의 예시를 보인 구성 블록도이다. 도 2의 각 구성요 소는 하드웨어, 소프트웨어, 프로세서, 및/또는 그것들의 조합에 대응한다. 또한, 도 2에서 각 블록의 수행 순 서는 변경될 수 있으며, 일부 블록은 생략될 수 있고, 일부 블록은 새로 추가될 수 있다. 도 2에서 컨텐츠 등록을 위한 등록 처리 모듈은 문서 파일 등록부, 텍스트 추출부, 텍스트 분할부 , 및 벡터 변환부를 포함할 수 있다. 도 2의 등록 처리 모듈의 일부 또는 전체 블록들은 사용자 디바 이스에 포함될 수도 있고, 또는 AI 서버에 포함될 수도 있다. 실시예들에 따르면, 문서 파일 등록부, 텍스트 추출부, 텍스트 분할부, 및 벡터 변환부 중 적어도 하나는 도 1의 프로세서에 포함 될 수 있다. 도 2에서 벡터 데이터베이스(DB)는 사용자의 계정 또는 플랫폼의 데이터베이스일 수 있고 또는 제1 저장부 에 해당할 수 있다. 다음은 문서의 등록 처리 과정을 설명한다. 실시예들에 따르면, 사용자가 문서 파일 등록부를 통해 문서 파일(예, 파일 형태의 문서 컨텐츠)를 업로드 (또는 등록)하면, 텍스트 추출부는 문서 파일로부터 텍스트를 추출하여 텍스트 분할부로 출력한다. 실시예들에 따르면, 텍스트 분할부는 입력되는 텍스트를 하나 이상의 조각들로 분할할 수 있다. 이때, 조 각의 크기는 하나의 문서에서 동일할 수도 있고, 또는 다를 수도 있다. 본 개시에서는 하나의 문서에서 분할되는 조각들의 크기가 동일한 것을 일 실시예로 하다. 그리고, 조각의 크기에 따라 그 조각에 포함되는 단어들의 개수가 달라질 수 있다. 본 개시에서 텍스트를 하나 이상의 조각들로 분할하는 것은 벡터화된 데이터의 유사도 검색이 잘 되도록 하기 위해서이다. 본 개시는 조각과 관련된 정보를 벡터 DB 또는 별도의 저장부에 저장될 수 있다. 본 개시에서 조각과 관련 된 정보는 그 조각의 크기를 식별할 수 있는 조각 크기 정보를 포함할 수 있다. 본 개시에서 조각과 관련된 정 보는 그 조각의 위치, 문법적 특성, 주제와의 관련성, 오버랩 여부 등의 정보를 더 포함할 수 있다. 본 개시에서 텍스트 분할부는 조각 크기, 오버랩 여부, 특정 문자열 등에 대한 정보를 기반으로 입력되는 텍스트를 조각들로 분할할 수 있다. 이때, 조각 크기, 오버랩 여부, 특정 문자열 등에 대한 정보는 사용자로부 터 입력될 수도 있고, 문서의 특성에 따라 결정될 수도 있다. 예를 들어, 텍스트를 문장 단위로 나누면 각 문장 이 하나의 조각이 되고, 단락 단위로 나누면 각 단락이 하나의 조각이 되며, 단어들의 개수로 나누면 특정 개수 의 단어들의 집합이 하나의 조각이 된다. 본 개시에서는 유사도 검색(또는 측정)시 균일하게 평가하기 위해서 하나의 문서로부터 추출된 텍스트는 일정한 크기(또는 균일한 크기)의 조각(chunk)들로 분할되는 것을 일 실시예로 한다. 즉, 하나의 문서에서 분할된 조각 들의 크기는 동일하다. 그리고, 각각의 문서는 문서 특성에 따라 조각의 단위(즉, 크기)를 다르게 함으로써, 정 확도를 높일 수 있다. 이때, 문서 조각이 너무 작으면 내용에 대한 누락이 발생할 수 있고, 너무 크면 터무니 없이 낭비가 될 수 있으므로, 이를 고려하여 각 문서에서 조각의 크기를 정할 수 있다. 본 개시에서는 문서를 조각화할 때, 문서 조각의 크기는 문단을 단위로 할 지, 조각 크기 및 오버랩을 지정할 지를 정책적으로 정하고, 문서에서 읽어서 조각화를 수행하는 방법을 통해 산출할 수 있다. 이렇게 다이나믹 하게 나온 각 문서 조각의 크기는 자카드 유사도 계산 시에 두 집합의 개수 차이를 보수로 넣어 균일한 기준을 산출하는데 사용될 수 있다. 본 개시는 텍스트를 조각들로 분할하기 위해, 먼저 토큰화를 수행할 수 있다. 토큰은 텍스트를 작은 단위로 분 리하는 과정이며, 주로 단어 또는 서브워드(subword) 수준으로 텍스트를 분할하는 과정이다. 실시예들에 따르면, 벡터 변환부는 특정 벡터 임베딩 모델 또는 알고리즘을 적용하여 각각의 조각을 벡터 (예, 숫자로 된 배열)로 변환(또는 표현)한다. 즉, 각 조각이 단어 임베딩 기반의 벡터화 과정을 거치면, 각 조 각 내 단어들은 수치로 된 벡터 형태로 표현된다. 예를 들어, 본 개시는 조각들의 벡터화에 Word2Vec, GloVe, FastText, Ada V2와 같은 단어 임베딩 모델을 적용할 수 있다. 위에 열거된 모델들은 본 개시의 이해를 돕기 위 한 것이며, 본 개시에서는 벡터 변환을 수행하는 단어 임베딩 모델은 무엇이든 활용하여 각 조각에 대한 벡터 변환을 수행할 수 있다. 실시예들에 따르면, 벡터 변환부에서 벡터화된 조각들은 벡터 DB에 저장될 수 있고, 또는 파일 시스 템이나 분산 스토리지 시스템과 같은 데이터 저장 장치에 저장될 수도 있다. 이렇게 저장된 벡터화된 조각들은 질문과의 유사도 비교 및 검색에 사용될 수 있다. 도 3은 실시예들에 따른 질문 처리 모듈의 예시를 보인 구성 블록도이다. 도 3의 각 구성요소는 하드웨어, 소프 트웨어, 프로세서, 및/또는 그것들의 조합에 대응한다. 또한, 도 3에서 각 블록의 수행 순서는 변경될 수 있으 며, 일부 블록은 생략될 수 있고, 일부 블록은 새로 추가될 수 있다. 도 3에서 질문 처리 모듈은 질문 입력부, 벡터 변환부, 제1 유사도 검색부, 전처리부, 제2 유사도 검색부, 유사도 보정부, 및 답변 처리부를 포함할 수 있다. 도 3의 질문 처리 모듈의 일 부 또는 전체 블록들은 사용자 디바이스에 포함될 수도 있고, 또는 AI 서버에 포함될 수도 있다. 실시예들 에 따르면, 질문 입력부, 벡터 변환부, 제1 유사도 검색부, 전처리부, 제2 유사도 검색부 , 유사도 보정부, 및 답변 처리부 중 적어도 하나는 도 1의 프로세서에 포함될 수 있다. 도 3에서 벡터 데이터베이스(DB)는 사용자의 계정 또는 플랫폼의 데이터베이스일 수 있고 또는 제1 저장부 에 해당할 수 있다. 도 3의 벡터 DB와 도 2의 벡터 DB는 동일한 DB인 것을 일 실시예로 한다. 즉, 벡터 DB에는 도 2의 등록 처리 과정을 거쳐 조각화 및 벡터화된 문서 컨텐츠의 조각들이 저장되어 있다고 가정한다. 다음은 질문 처리 과정을 설명한다. 실시예들에 따르면, 질문 입력부를 통해 입력되는 사용자의 질문은 벡터 변환부에서 특정 벡터 임베 딩 모델 또는 알고리즘이 적용되어 벡터(예, 숫자로 된 배열)로 변환(또는 표현)된다. 즉, 사용자의 질문이 벡터화 과정을 거치면, 사용자의 질문은 수치로 된 벡터 형태로 표현된다. 예를 들어, Word2Vec, GloVe, FastText, Ada V2와 같은 단어 임베딩 모델이 사용자 질문의 벡터화에 적용될 수 있다. 위에 열거된 모델들은 본 개시의 이해를 돕기 위한 것이며, 본 개시에서는 벡터 변환을 수행하는 단어 임베딩 모델은 무엇이든 활용하 여 사용자 질문에 대한 벡터 변환을 수행할 수 있다. 본 개시에서 도 2의 벡터 변환부와 도 3의 벡터 변환부는 동일 단어 임베딩 알고리즘을 적용하여 문 서 컨텐츠의 조각들 및 사용자 질문을 벡터로 변환하는 것을 일 실시예로 한다. 실시예들에 따르면, 제1 유사도 검색부는 벡터 변환부에서 벡터로 변환된 사용자 질문과 벡터 DB에 저장되어 있는 벡터화된 조각들과의 유사도를 검색하여 유사도가 높은 N(N은 1 이상)개의 조각들을 벡터 DB로부터 추출한다. 실시예들에 따르면, 데이터(예, 벡터) 유사도를 판별하여 유사도가 높은 상위 N개의 조각들을 추출하는 알고리 즘으로는 KNN(K-Nearest Neighbor), ANN(approximate nearest neighbor search) 등이 있다. 그리고, KNN, ANN 등에서 데이터(예, 벡터) 간 유사성을 측정하기 위해 코사인 유사도(Cosine Similarity)나 유클리디안 거리 (Euclidean Distance) 등이 사용될 수 있다. 본 개시에서 KNN 알고리즘은 주어진 데이터 포인트에서 가장 가까운 N개의 이웃들을 정확하게 찾기 위한 알고리 즘이며, 코사인 유사도나 유클리디언 거리는 KNN 알고리즘에서 데이터 포인트 간의 유사성을 측정하는 데 사용 될 수 있다. 예를 들어, 코사인 유사도를 사용하여 벡터화된 사용자 질문과 벡터 DB에 저장된 벡터화된 조 각들과의 유사성을 측정하고, 이를 기반으로 벡터 DB에 저장된 벡터화된 조각들 중 N개의 가장 유사한 조 각들을 추출할 수 있다. 또한, ANN 알고리즘은 대용량 데이터베이스에서 가장 가까운 N개의 이웃들을 근사적으로 찾기 위한 알고리즘이 며, 코사인 유사도나 유클리디언 거리는 ANN 알고리즘에서 벡터 간의 유사성을 측정하는 데 사용될 수 있다. ANN은 정확한 결과를 보장하지 않지만, 속도를 향상시키기 위해 근사치를 계산한다. 예를 들어, 코사인 유사도 를 사용하여 벡터화된 사용자 질문과 벡터 DB에 저장된 벡터화된 조각들과의 유사성을 측정하고, 이를 기 반으로 벡터 DB에 저장된 조각들 중 N개의 가장 유사한 조각들을 추출할 수 있다. 본 개시에서 코사인 유사도는 두 벡터 간의 각도에 기반하여 유사성을 측정하는 방법이다. 즉, 벡터 내적을 사 용하여 계산되며, 결과는 -1에서 1까지의 값으로 나타난다. 만일 두 벡터가 정확히 같은 방향을 향하면 1에 가 까워지고, 반대 방향이면 -1에 가까워지며, 0은 직교하는 경우를 나타낸다. 본 개시에서 유클리디안 거리는 두 벡터 간의 점과 점 사이의 거리를 측정하는 방법 중 하나이다. 즉, 유클리디 안 거리는 두 벡터의 각 요소 간의 차이를 제곱하고 합한 후 제곱근을 취한 값이다. 특히, 유클리디안 거리는 공간에서 직선 거리를 나타낸다. 본 개시에서 KNN, ANN 등은 코사인 유사도나 유클리디언 거리에 기반하여, 사용자 질문과 가장 가까운 N개의 조 각들을 벡터 DB에서 찾을 수 있다. 이때, 코사인 유사도나 유클리디언 거리는 벡터간 유사도를 수치화하여 제공할 수 있다. 이와 같이, 일정한 벡터 임베딩 알고리즘을 통해 벡터화 된 내용은 숫자화 되어 있고, 제1 유사도 검색부 에서는 유사도가 가장 높은 N개의 조각들을 벡터 기준으로 찾아주기 때문에, 질문과 N개의 조각들 간의 실질적 인 상관관계가 어느 정도인지 구분이 어렵다. 예를 들어, 요금제 정보가 가득한 문서(또는 문서 컨텐츠)가 조각 화 및 벡터화되어 데이터베이스에 저장되었을 때, 세종대왕이 누구인지를 질문한다면, 질문과 문서 컨텐츠 간에 유사도가 없는데도 알고리즘 상 무조건 N개의 조각들을 추출하기 때문이다. 즉, 제1 유사도 검색부에서 유사도 판별 알고리즘은 근접한 벡터 성분을 찾아 내고 요청한 상위 N개의 내 용(즉, 조각)을 반환해준다. 따라서, 수치적으로는 근사하지만 질문과 검색된 내용의 상관 관계가 100%라고 할 수 없다. 다시 말해, 제1 유사도 검색부에서 유사도 검색을 통해 유사도 순으로 상위 N개의 조각들을 추출 하는 경우, 질문과 무관한 내용(또는 조각들)이 검색될 수 있다. 본 개시는 이를 보완하기 위해, 제2 유사도 검색부에서 자카드 유사도를 적용하여 벡터화된 사용자의 질문 과 제1 유사도 검색부에서 추출된 N개의 벡터화된 조각들과의 유사도를 검색(또는 측정)한다. 자카드 유사 도는 실제 내용을 기준으로 두 집합 간의 유사성을 비교하는 방식이다. 이를 위해, 벡터 변환부에서 벡터화된 사용자 질문과 제1 유사도 검색부에서 추출된 N개의 벡터화된 조각들은 제2 유사도 검색부에서 각각 집합으로 표현될 수 있다. 설명의 편의를 위해 제1 유사도 검색부에서 추출된 N개의 조각들을 검색 1, ..., 검색 N이라고 칭하기로 한다. 예를 들어, 본 개시에서는 벡터화된 질문을 집합 A라고 정의하고, 벡터화된 N개의 조각들(검색 1, ..., 검색 N)의 합집합(검색1 ∪…∪ 검색N)을 집합 B라고 정의할 수 있다. 즉, 집합 B는 벡터화된 N개의 조각들(검색 1, ..., 검색 N)에 포함된 단어(또는 벡터화된 단어)들 중 겹치지 않는 단어들의 개수의 합(summation)으로 정의할 수 있다. 예를 들어, 검색 1에 대응하는 조각은 \"나는 보라색 꽃을 좋아한다\"이고, 검색 2에 대응하는 조각은 \"나는 또한 노란색 꽃을 좋아한다\"라고 가정한다면, 검색1과 검색 2의 합집합인 집합 B의 원소수는 5개(즉, 전 체 9개의 단어들 중 겹치는 단어 4개를 뺌)가 된다. 이때, 각 집합에 포함되는 원소들은 실제 단어들일 수도 있 고 또는 단어 임베딩 기반으로 벡터화된 단어들일 수도 있다. 또한, 집합 B에 원소들의 개수(즉, 단어들의 개수)는 상기 문서 컨텐츠의 조각 크기와 상기 벡터화된 N개의 조각들의 합집합의 결과에 따라 달라질 수 있다. 이와 같이 집합 A와 집합 B가 정의되면, 하기의 수학식 1과 같이 자카드 유사도는 집합 A와 집합 B의 교집합의 크기를 집합 A와 집합 B의 합집합의 크기로 나누어 구할 수 있다. [수학식 1] 자카드 유사도 = (집합 A ∩ 집합 B)/(집합 A ∪ 집합 B) = (질문 ∩ (검색1 ∪…∪ 검색N)) / (질문 ∪ (검색 1 ∪…∪ 검색N))) 다시 말해, 자카드 유사도는 두 집합 간의 유사성을 측정하는 방법 중 하나로서, 집합에 포함된 원소들의 공통 성을 비교하여 유사도를 평가한다. 이때, 자카드 유사도의 측정 결과는 0부터 1까지의 값을 가지며, 값이 클수 록 두 집합이 더 유사하다고 판단한다. 본 개시에서 자카드 유사도의 측정 결과는 자카드 유사도 점수 또는 자 카드 유사도 값이라 칭할 수 있다. 또 다른 예로, 하기와 같이 두 개의 집합 A와 B가 있다고 가정하자. A = {1, 2, 3, 4} B = {3, 4, 5, 6} 즉, 집합 A에 속하는 원소수는 4개이고, 집합 B에 속하는 원소수도 4개이며, 집합 A와 집합 B에 모두 속하는 원 소수는 2개이다. 본 개시에서 원소 수는 샘플 수 또는 단어들의 개수라 칭하기도 한다. 이때, 집합 A와 집합 B의 자카드 유사도 J(A,B)는 하기의 수학식 2와 같이 계산된다. [수학식 2] J(A,B) = (A ∩ B) / (A ∪ B) = 2 / 6 0.3333 (약 33.33%) 위의 예제 및 수학식 2에서, A ∩ B = {3, 4} (A와 B에 모두 속하는 원소들), A ∪ B = {1, 2, 3, 4, 5, 6} (A와 B에 속하는 모든 원소들)이다. 즉, 수학식 2에서 집합 A와 집합 B는 약 33.33%의 유사도를 가진다. 이와 같이 자카드 유사도 방법은 두 집합이 공통된 원소를 많이 가질수록 유사도는 더 큰 값을 가지며, 완전히 동일할 경우에는 1의 값을 가진다. 반대로, 공통된 원소를 갖지 않을 경우에는 0의 값을 가진다. 그리고, 집합 A와 집합 B의 자카드 유사도가 균일하게 나오기 위해서는 집합 A와 집합 B의 비율이 일정해야 한 다. 예를 들어, 사용자의 질문 내용과 제1 유사도 검색부에서 유사도가 높은 순으로 추출된 N개의 검색 결 과(예, 검색 1, ...,검색 N)를 기반으로 자카드 유사도를 계산할 때, 동일한 질문에 대해 자카드 유사도가 균일 하게 나오기 위해서는 질문을 포함하는 집합 A와 N개의 조각들을 포함하는 집합 B의 비율이 일정해야 한다. 하지만, 전술한 바와 같이 문서에 따라 조각 크기가 달라질 수 있다. 예를 들어, 문서 A에서 조각 크기는 100이 지만, 문서 B에서 조각 크기는 500이 될 수 있으며, 이 경우 각 조각에 포함되는 단어들의 개수도 조각의 크기 에 비례하여 달라진다. 예를 들어, 조각 크기가 100인 조각에 포함되는 단어의 수가 20이라면, 조각 크기가 500 인 조각에 포함되는 단어의 수는 100이 될 수 있다. 이와 같이 문서마다 조각 크기가 달라지기 때문에, 집합 A 와 집합 B의 비율이 일정하지 않고 이로 인해 자카드 유사도가 균일하게 나오지 않는다. 예를 들어, 앞의 수학식 2의 예제에서 집합 C(= {3, 4, 5, 6, 7, 8, 9, 10, 11, 12})를 추가할 경우, 집합 A와 집합 C의 자카드 유사도 J(A,C)는 하기의 수학식 3과 같이 계산된다. [수학식 3] 자카드 유사도 J(A,C) = (A ∩ C)/(A ∪ C) = 2 / 12 0.1666 (약 16.66%) 이와 같이, 집합 B의 원소수와 다른 집합 C와 집합 A의 자카드 유사도를 계산하면, 자카드 유사도 결과(즉, 자 카드 유사도 점수)는 앞의 수학식 1의 예제의 결과와 다르게 된다. 즉, 두 집합에 속한 원소들의 비율이 일정하 지 않으면, 자카드 유사도를 통해 일관성 있는 평가를 하기 어려운 문제가 생긴다. 즉, 동일한 질문과 동일한 문서 컨텐츠이지만, 문서 컨텐츠의 조각 크기에 따라 자카드 유사도(또는 자카드 유사도 점수 또는 자카드 유사 도 수치)가 달라진다. 수학식 2와 수학식 3을 예로 들면, 동일한 질문(예, 집합 A)에 대해 수학식 2의 자카드 유사도는 약 33.33%인데 반해, 수학식 3의 자카드 유사도는 약 16.66%이다. 다시 말해, 동일한 질문과 동일한 문서 컨텐츠이지만, 두 집합에 포함되는 원소들의 비율에 따라 자카드 유사도(또는 자카드 유사도 점수 또는 자 카드 유사도 수치)가 달라진다. 이를 해소하기 위해, 본 개시의 유사도 보정부에서는 보정 계수를 산출하고, 산출된 보정 계수를 자카드 유사도 점수에 반영하여 자카드 유사도 점수를 보정할 수 있다. 이는 동일한 질문과 동일한 문서 컨텐츠에 대해 서는 문서 컨텐츠의 조각 크기 및/또는 두 집합에 속한 원소들의 비율에 상관없이 균일한 자카드 유사도 점수를 얻기 위해서이다. 본 개시에서 보정 계수와 보정 정보는 동일한 의미로 사용될 수 있다. 여기서, 보정 계수는 추출된 N개의 조각들의 조각 크기(예, 조각에 포함된 단어들의 개수)를 기반으로 결정(또 는 산출)되는 것을 일 실시예로 한다. 이는 조각의 크기 정보에 따라 해당 집합에 포함되는 원소들의 수가 결정 되기 때문이다. 이를 위해, 도 2의 텍스트 분할부에서 텍스트를 조각들로 분할할 때 조각의 크기 정보는 벡터 DB 또는 별도의 저장부에 저장된다. 본 개시에서 벡터 DB는 제1 저장부에 해당될 수 있다. 실시예들에 따르면, 본 개시에서 보정 계수는 집합 B에 속하는 원소들의 개수(즉, B 수량)를 집합 A에 속하는 원소들의 개수(즉, A 수량)로 나눈 값으로 결정될 수 있다. 이를 본 개시에 적용할 경우, 보정 계수는 벡터화된 N개의 조각들의 합집합에 속하는 원소들의 개수를 벡터화된 질문에 속하는 원소들의 개수로 나눈 값으로 결정될 수 있다. 만일, 집합 B에 속하는 원소들의 개수(즉, B 수량)가 집합 A에 속하는 원소들의 개수(즉, A 수량)보다 작다면, 보정 계수는 집합 A에 속하는 원소들의 개수(즉, A 수량)를 집합 B에 속하는 원소들의 개수(즉, B 수량)로 나눈 값으로 결정될 수 있다. 그리고, 본 개시에서 자카드 유사도 보정은 자카드 유사도 점수에 보정 계수를 곱하여 이루어지는 것을 일 실시예로 한다. 수학식 2의 예제를 예로 들 경우, 보정 계수=(B 수량)/(A 수량)=4/4=1로 결정된다. 그러므로, 수학식 2에서 측 정된 자카드 유사도 점수에 보정 계수를 적용시켜도, 집합 A와 집합 B의 자카드 유사도 점수는 변경되지 않는다. 즉, 두 집합의 원소 수가 같을 경우, 보정 계수를 적용하여도 자카드 유사도 점수는 변경되지 않는다. 수학식 3의 예제를 예로 들 경우, 보정 계수=(C 수량)/(A 수량)=10/4로 결정된다. 이렇게 구한 보정 계수를 수 학식 3에서 측정된 자카드 유사도 점수에 적용시키면, 집합 A와 집합 C의 자카드 유사도 점수는 하기의 수학식 4에서와 같이 16.66%에서 41.66%로 변경된다. [수학식 4] (C 수량/A 수량) * ((A ∩ C)/ (A ∪ C)) = (10/4) * (2/12) 0.4166(약 41.66%) 즉, 수학식 4와 같이 두 집합의 원소 수가 다른 경우(예, 수학식 2의 집합 B에 비해 원소 수가 6개 차이나는 경 우)에 자카드 유사도 점수에 보정 계수를 적용하면, 집합 A와 집합 C는 약 41.66%의 유사도를 가진다. 다시 말 해, 보정 계수를 적용하지 않았을 때는 자카드 유사도가 약 16.66%였는데, 보정 계수를 적용할 경우, 자카드 유 사도는 약 41.66%가 됨을 알 수 있다. 또 다른 예를 들어, 앞의 수학식 2의 예제에서 집합 D(= {3, ..., 100, 101, 102})를 추가할 경우, 집합 A와 집합 D의 자카드 유사도 J(A,D)는 하기의 수학식 5과 같이 계산된다. 즉, 동일 질문임에도 불구하고, 조각 크기 가 커질수록(즉, 원수 수가 증가할 수록) 자카드 유사도 점수는 더욱 낮아진다. [수학식 5] 자카드 유사도 J(A,D) = (A ∩ D)/(A ∪ D) = 2 /102 0.0196 (약 1.96%) 수학식 5의 예제를 예로 들 경우, 보정 계수=(D 수량)/(A 수량)=100/4로 결정된다. 이렇게 구한 보정 계수를 수 학식 5에서 측정된 자카드 유사도 점수에 적용시키면, 집합 A와 집합 D의 자카드 유사도 점수는 하기의 수학식6에서와 같이 1.96%에서 49.01%로 변경된다. [수학식 6] (D 수량/A 수량) * ((A ∩ D)/(A ∪ D)) = (100/4) * (2/102) 0.4901 (약 49.01%) 다른 실시예로, 본 개시에서 보정 계수는 집합 B에 속하는 원소들의 개수와 집합 A에 속하는 원소들의 개수와의 차이로 결정할 수 있다. 이를 본 개시에 적용할 경우, 보정 계수는 벡터화된 N개의 조각들의 합집합에 해당하는 집합의 원소들의 개수와 벡터화된 질문에 해당하는 집합의 원소들의 개수와의 차이 값으로 결정될 수 있다. 이와 같이, 본 개시에서 보정 계수는 벡터화된 질문에 해당하는 집합에 속하는 원소들의 개수와 벡터화된 N개의 조각들의 합집합에 해당하는 집합에 속하는 원소들의 개수를 기반으로 결정된다. 그러므로, 동일 질문이라도 사 용자가 등록한 문서 컨텐츠의 조각 크기에 따라 보정 계수도 달라진다. 그리고, 이러한 보정 계수를 자카드 유 사도 점수에 반영하면, 문서 컨텐츠의 조각 크기에 상관없이 동일 질문에 대해서는 균일한 자카드 유사도 점수 를 얻을 수 있다. 한편, 사용자의 질문 및/또는 사용자가 등록한 문서 컨텐츠가 한국어라면, 조사에 의한 영향을 최소화하기 위해 전처리 과정을 추가할 수 있다. 이를 위해 전처리부가 제1 유사도 검색부와 제2 유사도 검색부 사이에 구비될 수 있다. 이는 일 실시예이며, 전처리부는 벡터 변환부 앞에 위치할 수도 있다. 또한, 전처리부는 도 2의 벡터 변환부 전단에 위치할 수도 있다. 즉, 한국어의 경우, 동일 의미의 단어(예, 명사)이더라도 단어 뒤에 붙는 조사에 따라 다른 수치의 벡터로 변환 될 수 있다. 예를 들어, \"사람이\"와 \"사람은\"은 명사만 보면 동일 의미이지만 다른 수치의 벡터로 변환될 수 있 다. 이때, 자카드 유사도는 두 집합의 교집합 크기를 두 집합의 합집합 크기로 나눈 값으로 결정되므로, 동일 명사에 붙는 조사는 자카드 유사도 점수에 영향을 준다. 따라서, 전처리부에서는 한국어의 경우, 각 명사에 붙는 조사를 제거할 수 있다. 예를 들어, 전처리부가 제1 유사도 검색부와 제2 유사도 검색부 사이에 구비되는 경우, 질문에 해당하는 집합에 속한 원소들과 N개의 조각들의 합집합에 속하는 집합에 속한 원소들은 조사가 제거된 벡터화된 단어들로 구성될 수 있다. 다른 예로, 전처리부가 벡터 변환부(312 및/또는 214) 앞에 구비되는 경우, 사 용자의 질문 및/또는 사용자가 업로드한 문서 컨텐츠의 조각들을 단어 임베딩 모델을 적용하여 벡터화할 때, 조 사가 제거된 단어들을 벡터화할 수 있다. 이와 같이, 본 개시는 자카드 유사도 측정 및 보정 계수 반영시 조사에 의한 영향도를 최소화함으로써, 자카드 유사도 측정의 정확성을 높일 수 있다. 이에 더하여, 전처리부는 사용자의 질문 및/또는 사용자가 업로드하는문서 컨텐츠에서 문장부호 제거, 특 수 문자 제거, 대소문자 통합, 불용어(stop words) 제거 등을 수행할 수 있다. 한편, 유사도 보정부에서 보정 계수가 반영된 자카드 유사도 점수는 답변 처리부로 출력된다. 실시예들에 따르면, 답변 처리부는 입력되는 자카드 유사도 점수와 기 설정된 임계값을 비교하여 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있는지 여부를 결정하고, 결정 결과에 따라 답변 처리를 다르게 할 수 있다. 예를 들어, 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 없다고 결정되면, \"답변을 할 수 없습니 다\"와 같은 메시지를 출력부를 통해 표시할 수 있다. 다른 예로, 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있다고 결정되면, 질문과 관련된 프롬프트 를 재구성하고, 재구성된 프롬프트를 기반으로 AI 서버에 질문에 따른 답변을 요청할 수 있다. 이 경우, AI 서버는 학습된 데이터 또는 데이터베이스에 저장된 데이터 뿐만 아니라, 사용자가 등록한 문서 컨텐츠 를 참조하여 답변을 생성할 수 있다. 그리고, AI 서버에서 생성된 답변은 네트워크를 통해 사용자 디 바이스로 제공되고, 사용자의 디바이스의 출력부를 통해 표시될 수 있다. 도 4는 실시예들에 따른 도 3의 답변 처리부의 일 예시를 보인 상세 구성 블록도이다. 도 4의 각 구성요소는 하 드웨어, 소프트웨어, 프로세서, 및/또는 그것들의 조합에 대응한다. 또한, 도 4에서 각 블록의 수행 순서는 변 경될 수 있으며, 일부 블록은 생략될 수 있고, 일부 블록은 새로 추가될 수 있다. 도 4에서 답변 처리부는 비교부, 답변 출력부, 프롬프트 재구성부, 및 질문 처리부를 포함 할 수 있다. 도 4에서 AI 서버는 네트워크를 통해 질문 처리부와 연결되는 것을 일 실시예로 한다. 실시예들에 따르면, 비교부는 입력되는 자카드 유사도 점수와 기 설정된 임계값을 비교하여 사용자의 질문 이 사용자가 등록한 문서 컨텐츠와 관련이 있는지 여부를 결정하고, 결정 결과에 따라 답변 처리를 다르게 할 수 있다. 이때, 입력되는 자카드 유사도 점수는 보정 계수가 반영된 자카드 유사도 점수인 것을 일 실시예로 한 다. 예를 들어, 임계값을 0.2로 설정하였다고 가정하면, 비교부는 보정 계수가 반영된 자카드 유사도 점수가 0.2보다 크면(또는 크거나 같으면), 그 질문은 사용자가 등록한 문서 컨텐츠와 관련이 있다고 결정하고, 그렇지 않으면 그 질문은 사용자가 등록한 문서 컨텐츠와 관련이 없다고 결정할 수 있다. 위의 예에서, 집합 A와 집합 B의 자카드 유사도 점수와 보정 계수가 반영된 자카드 유사도 점수는 0.3333이었고, 모두 임계값(예, 0.2)보다 크므로, 이 경우 사용자의 질문은 사용자가 등록한 문서 컨텐츠와 관 련이 있다고 결정한다. 다른 예로, 집합 A와 집합 C의 자카드 유사도 점수는 0.1666이었고, 보정 계수가 반영된 자카드 유사도 점수는 0.4166이었다. 이 경우, 보정 계수가 적용되지 않은 자카드 유사도 점수는 임계값보다 작으므로 사용자의 질문 은 사용자가 등록한 문서 컨텐츠와 관련이 없다고 결정하고, 보정 계수가 적용된 자카드 유사도 점수는 임계값 보다 크므로 사용자의 질문은 사용자가 등록한 문서 컨텐츠와 관련이 있다고 결정한다. 또 다른 예로, 집합 A와 집합 D의 자카드 유사도 점수는 0.0196이었고, 보정 계수가 반영된 자카드 유사도 점수 는 0.4901이었다. 이 경우, 보정 계수가 적용되지 않은 자카드 유사도 점수는 임계값보다 작으므로 사용자의 질 문은 사용자가 등록한 문서 컨텐츠와 관련이 없다고 결정하고, 보정 계수가 적용된 자카드 유사도 점수는 임계 값보다 크므로 사용자의 질문은 사용자가 등록한 문서 컨텐츠와 관련이 있다고 결정한다. 위의 예시들을 보면, 보정 계수가 적용되지 않은 자카드 유사도 점수는 문서컨텐츠의 조각 크기에 따라 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있다고 결정될 수도 있고 또는 관련이 없다고 결정될 수도 있다. 즉, 동 일 질문임에도 불구하고 문서 컨텐츠의 조각 크기에 따라 결정이 달라질 수 있다. 따라서, 이 경우 동일 질문에 대해서 동일한 결정(즉, 균일한 성능)을 얻기 위해서는 동일 질문임에도 불구하고 문서 컨텐츠의 조각 크기에 따라 임계값이 변해야 하는 문제가 발생한다. 이에 반해, 보정 계수가 적용된 자카드 유사도 점수는 사용자가 등록한 문서 컨텐츠의 조각 크기에 상관없이 동 일한 결정(즉, 균일한 성능)을 얻는다. 위의 예시들에서는 동일 질문에 대해 사용자가 등록한 문서 컨텐츠의 조 각 크기가 달라도 모두 사용자가 등록한 문서 컨텐츠와 관련이 있다는 결정을 얻고 있다. 즉, 동일 질문에 대해 서 고정된 임계값을 사용하더라도, 사용자가 등록한 문서 컨텐츠의 조각 크기에 상관없이 균일한 성능을 얻을 수 있다. 본 개시에서 임계값은 시스템이 허용할 범위를 정하여 사전에 미리 설정할 수 있다. 실시예들에 따르면, 비교부는 비교 결과에 따른 제어 신호(또는 결정된결과)를 답변 출력부로 출력하 거나 또는 프롬프트 재구성부로 출력한다. 즉, 비교부는 자카드 유사도 산정 결과를 기반으로 필터링 처리를 수행할 수 있다. 예를 들어, 자카드 유사도 결과(즉, 자카드 유사도 점수)가 낮으면(즉, 문서 컨텐츠와 관련 없는 질문이면 보정 계수가 반영된 자카드 유사도는 0에 가까움), 비교부는 질문을 AI를 활용해 처리 하지 않고 지정된 범위의 질문을 해달라는 방식으로 사용자를 유도할 수 있다. 즉, 비교부의 비교 결과에 따라 안내 메시지를 출력하기 위해 답변 출력부가 동작하거나 또는 AI를 활용한 답변을 생성하기 위해 프롬프트 재구성부가 동작할 수 있다. 예를 들어, 비교부에서 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 없다고 결정되면, 답변 출 력부는 \"답변을 할 수 없습니다\"와 같은 안내 메시지를 출력부로 제공하고, 출력부는 해당 안내 메시지를 텍스트, 이미지, 음성 중 적어도 하나를 이용하여 표출하여 사용자가 인지할 수 있도록 한다. 다른 예로, 비교부에서 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있다고 결정되면, 프롬프 트 재구성부는 AI 활용을 위해 질문과 관련된 프롬프트를 재구성한다. 프롬프트는 사용자의 질문이나 요청 을 텍스트로 표현한 것이다. 예를 들어, \"세종대왕의 업적에 대해 알려주세요\" 라는 질문을 하기 위한 프롬프트 는 \"세종대왕의 업적\"이라고 할 수 있다. 이는 본 개시를 이해를 돕기 위한 예시이며, 재구성된 프롬프트는 사용자가 입력한 질문과 동일할 수도 있고, 또는 AI에 적합하게 변형된 형태일 수도 있다. 예를 들어, 재구성된 프롬프트에는 답변 생성시에 사용자가 등록한 문서 컨텐츠도 참조할 수 있도록 하기 위한 내용이 포함될 수 있 다. 따라서, 프롬프트 재구성부는 자카드 유사도 결과를 기반으로 비용/트래픽 리소스가 최적화 된 프롬프 트를 재구성할 수 있다. 실시예들에 따르면, 질문 처리부는 재구성된 프롬프트를 기반으로 AI 서버에 질문에 따른 답변을 요 청하거나 또는 AI 서버에서 생성된 답변을 수신하여 답변 출력부로 출력할 수 있다. 답변 출력부 는 AI를 활용하여 생성된 답변을 출력부로 제공하고, 출력부는 해당 답변을 텍스트, 이미지, 음 성 중 적어도 하나를 이용하여 표출하여 사용자가 인지할 수 있도록 한다. 실시예들에 따르면, AI 서버는 학습된 데이터(또는 학습된 문서 컨텐츠들) 및/또는 제2 저장부와 같 은 데이터베이스에 저장된 데이터(또는 문서 컨텐츠들) 뿐만 아니라, 사용자가 등록한 문서 컨텐츠를 참조하여 답변을 생성할 수 있다. 즉, AI 서버는 사용자가 등록한 문서 컨텐츠가 학습이 안되어 있더라도 답변 생성 시에 해당 문서 컨텐츠를 참조하여 답변을 생성할 수 있다. 그리고, AI 서버에서 생성된 답변은 네트워크를 통해 사용자 디바이스의 질문 처리부로 제공되 고, 사용자의 디바이스의 출력부를 통해 답변이 표시될 수 있다. 실시예들에 따르면, AI 서버는 답변 생성을 위해 openAI를 활용할 수도 있다. 이는 본 개시의 이해를 돕기 위한 일 실시예이며, 본 개시는 이에 한 정되지 않는다. 이와 같이 본 개시는 보정 계수가 반영된 자카드 유사도 점수가 기 설정된 임계값보다 높아, 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있다고 확인되면, 비용/트래픽 리소스가 최적화 된 프롬프트를 생성하고, 적어도 하나의 학습된 문서 컨텐츠와 사용자가 등록한 문서 컨텐츠를 참조하여 답변을 생성하도록 한 다. 따라서, 본 개시는 생성형 AI활용 시 정확한 답변을 얻을 수 있는 구조를 제공할 수 있다. 도 5는 실시예들에 따른 AI 기반의 답변 처리 방법의 일 예시를 보인 흐름도이다. 도 5의 각 단계는 사용자 디 바이스 및/또는 AI 서버에 의해 수행될 수 있다. 도 5에서는 도 2의 등록 처리 과정을 거쳐 사용자가 업로드한 문서 컨텐츠의텍스트가 조각들로 분할된 후 벡터 화되고, 벡터화된 조각들이 DB(즉, 도 1의 저장부, 도 2의 벡터 DB, 또는 도 3의 벡터 DB)에 저장되어 있다고 가정한다. 따라서, 사용자의 질문이 입력되면(S511), 사용자의의 질문은 특정 벡터 임베딩 모델 또는 알고리즘이 적용되어 벡터(예, 숫자로 된 배열)로 변환(또는 표현)된다(S512). 즉, 사용자의 질문이 단어 임베딩 모델 기반의 벡터화 과정을 거치면, 사용자의 질문은 수치로 된 벡터 형태로 표현된다. 다시 말해, 다시 말해, 본 개시에서 벡터 유 사도 검색을 위해 수치화된 벡터로의 변환이 필요하다. 예를 들어, Word2Vec, GloVe, FastText, Ada V2와 같은 단어 임베딩 모델이 사용자 질문의 벡터화에 적용될 수 있다. 단계 S512에서 사용자의 질문이 벡터화되면, 제1 유사도 측정 알고리즘이 실행되어 벡터화된 사용자 질문과 DB 에 저장되어 있는 벡터화된 조각들과의 유사도를 측정하고, 이 중 유사도가 높은 순으로 N(N은 1 이상)개의 조 각들을 추출한다(S513). 본 개시에서는 데이터(예, 벡터) 유사도를 판별하여 유사도가 높은 상위 N개의 조각들을 추출하는 알고리즘으로, KNN, ANN 등이 이용될 수 있고, KNN, ANN 등에서 데이터(예, 벡터) 간 유사성을 측정하기 위해 코사인 유사도나 유클리디안 거리 등이 사용될 수 있다. 예를 들어, 제1 유사도 측정 알고리즘은 코사인 유사도 를 사용하여 벡터화된 사용자 질문과 DB에 저장된 벡터화된 조각들 간의 유사성을 측정할 수 있다. 본 개시에서 코사인 유사도는 두 벡터 간의 각도에 기반하여 유사성을 측정하는 방법이다. 즉, 벡터 내적을 사용하여 계산되 며, 결과는 -1에서 1까지의 값으로 나타난다. 만일 두 벡터가 정확히 같은 방향을 향하면 1에 가까워지고, 반대 방향이면 -1에 가까워지며, 0은 직교하는 경우를 나타낸다. 단계 S513에서 유사도가 높은 순으로 N개의 조각들이 추출되면, 제2 유사도 측정 알고리즘이 실행되어 벡터화된 사용자 질문과 벡터화된 N개의 조각들 간의 유사도를 측정한다(S514). 본 개시에서 제2 유사도 측정 알고리즘은 자카드 유사도를 기반으로 벡터화된 사용자 질문과 벡터화된 N개의 조각들 간의 유사도를 측정하는 것을 일 실 시예로 한다. 이를 위해, 벡터화된 사용자 질문과 벡터화된 N개의 조각들은 각각 집합으로 표현될 수 있다. 설명의 편의를 위 해 벡터화된 N개의 조각들을 검색 1, ..., 검색 N이라고 칭하기로 한다. 또한, 본 개시에서는 벡터화된 질문을집합 A라고 정의하고, 벡터화된 N개의 조각들(검색 1, ..., 검색 N)의 합집합(검색1 ∪…∪ 검색N)을 집합 B라 고 정의할 수 있다. 즉, 집합 B는 벡터화된 N개의 조각들(검색 1, ..., 검색 N)에 포함된 단어(또는 벡터화된 단어)들 중 겹치지 않는 단어들의 개수의 합(summation)으로 정의할 수 있다. 이때, 각 집합에 포함되는 원소들 은 실제 단어들일 수도 있고 또는 단어 임베딩 기반으로 벡터화된 단어들일 수도 있다. 이와 같이 집합 A와 집합 B가 정의되면, 전술한 수학식 1과 같이 자카드 유사도는 집합 A와 집합 B의 교집합의 크기를 집합 A와 집합 B의 합집합의 크기로 나누어 구할 수 있다. 이때, 자카드 유사도의 측정 결과는 0부터 1 까지의 값을 가지며, 값이 클수록 두 집합이 더 유사하다고 판단한다. 본 개시에서 자카드 유사도의 측정 결과 는 자카드 유사도 점수 또는 자카드 유사도 값이라 칭할 수 있다. 그런데, 단계 S514에서 구한 자카드 유사도 점수는 동일 질문이더라도 문서 컨텐츠의 조각 크기에 따라 및/또는 두 집합에 포함되는 원소들의 비율에 따라 비균일한 값이 산출되는 문제가 있다. 이는 문서 컨텐츠의 조각들로 부터 추출된 N개의 조각들로 구성되는 집합에 포함되는 원소들의 개수는 그 문서 컨텐츠의 조각 크기에 따라 달 라지기 때문이다. 본 개시는 이를 해소하기 위해, 벡터화된 질문에 해당하는 집합에 속하는 원소들의 개수(즉, 단어들의 개수)와 벡터화된 N개의 조각들의 합집합에 해당하는 집합에 속하는 원소들의 개수(즉, 단어들의 개수)를 기반으로 보정 계수를 산출한다(S515). 예를 들어, 보정 계수는 집합 B에 속하는 원소들의 개수(즉, B 수량)를 집합 A에 속하 는 원소들의 개수(즉, A 수량)로 나눈 값으로 결정될 수 있다. 이를 본 개시에 적용할 경우, 보정 계수는 벡터 화된 N개의 조각들의 합집합에 속하는 원소들의 개수를 벡터화된 질문에 속하는 원소들의 개수로 나눈 값으로 결정될 수 있다. 만일, 집합 B에 속하는 원소들의 개수(즉, B 수량)가 집합 A에 속하는 원소들의 개수(즉, A 수 량)보다 작다면, 보정 계수는 집합 A에 속하는 원소들의 개수(즉, A 수량)를 집합 B에 속하는 원소들의 개수(즉, B 수량)로 나눈 값으로 결정될 수 있다. 단계 S514에서 측정된 자카드 유사도 점수에 단계 S515에서 산출된 보정 계수를 반영함으로써, 자카드 유사도를 보정할 수 있다(S516). 예를 들어, 자카드 유사도 보정은 단계 S514에서 구한 자카드 유사도 점수에 단계 S515 에서 구한 보정 계수를 곱하여 이루어질 수 있다. 이와 같이 본 개시는 보정 계수를 자카드 유사도 점수에 반영하면, 문서 컨텐츠의 조각 크기에 상관없이 동일 질문에 대해서는 균일한 자카드 유사도 점수를 얻을 수 있다. 본 개시에서는 단계 S513과 단계 S514 사이에 전처리 단계를 더 포함할 수 있다. 실시예들에 따르면, 전처리 단계는 사용자의 질문 및/또는 사용자가 등록한 문서 컨텐츠가 한국어라면, 조사에 의한 영향을 최소화하기 위해 각 명사에 붙는 조사를 제거할 수 있다. 그리고 나서, 제2 유사도 측정 및 측정된 제2 유사도에 보정 계수를 반영할수 있다. 그리고, 보정 계수가 반영된 제2 유사도 즉, 보정 계수가 반영된 자카드 유사도 점수를 기 설정된 임계값과 비 교한다(S517). 본 개시에서 임계값은 시스템이 허용할 범위를 정하여 사전에 미리 설정할 수 있다. 단계 S517에서 보정 계수가 반영된 자카드 유사도 점수가 임계값보다 작으면 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 없다고 결정하고 단계 S518로 진행하여 안내 메시지를 출력한다. 예를 들어, \"답변을 할 수 없습니다\"와 같은 안내 메시지를 출력부를 통해 표시할 수 있다. 단계 S517에서 보정 계수가 반영된 자카드 유사도 점수가 임계값보다 작지 않으면, 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있다고 결정하고, 단계 S519로 진행하여 AI에 활용할 프롬프트를 재구성한다. 그리고, 재구성된 프롬프트로 AI 서버에 질문을 하고, 답변을 확인한다(S520). AI 서버는 학습된 데 이터 또는 데이터베이스에 저장된 데이터 뿐만 아니라, 사용자가 등록한 문서 컨텐츠를 참조하여 답변을 생성할 수 있다. 즉, AI 서버는 사용자가 등록한 문서 컨텐츠가 학습이 안되어 있더라도 답변 생성시에 해당 문서 컨텐츠를 참조하여 답변을 생성한다. 다시 말해, AI 서버는 재구성된 프롬프트를 기반으로 적어도 사용자 가 등록한 문서 컨텐츠 또는 기 학습된 적어도 하나의 문서 컨텐츠를 참조하여 답변을 생성할 수 있다. 단계 S520에서 확인된 답변은 출력부를 통해 표시될 수 있다. 도 5에서 설명되지 않거나 생략되는 부분은 도 1 내지 도 4의 설명을 참조하기로 한다. 이상에서와 같이 AI 기반의 데이터 처리 장치 및 방법은 1차적으로 사용자의 질문과 사용자가 등록한 문서 컨텐 츠의 조각들과의 유사도를 측정하여 유사도가 높은 순서로 N개의 조각들을 추출한다. 그리고 2차적으로 사용자 의 질문과 N개의 조각들과의 자카드 유사도를 측정한다. 이에 더하여, 사용자가 등록한 문서 컨텐츠의 조각 크 기 정보를 기반으로 보정 계수를 산출하고, 산출된 보정 계수를 기반으로 자카드 유사도 값을 보정한 후, 보정 된 자카드 유사도 값을 기반으로 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있는지 여부를 최종 확인한다. 그리고, 최종 확인 결과에 따라 프롬프트를 재구성하고, 재구성된 프롬프트를 기반으로 AI 서버에서 는 기 학습된 데이터 뿐만 아니라 사용자가 등록한 문서 컨텐츠를 참조하여 사용자 질문에 대한 답변을 생성한 다. 이렇게 함으로써, 본 개시는 사용자가 등록한 문서 컨텐츠의 조각 크기 정보에 상관없이 균일한 자카드 유사도 값을 얻을 수 있고, 사용자의 질문이 사용자가 등록한 문서 컨텐츠와 관련이 있는지 여부를 정확하게 판별할 수 있으며, 비용/트랙픽 리소스가 최적화된 프롬프트를 생성할 수 있다. 따라서, 생성형 AI 활용시에 정확하고 신 뢰성 높은 답변을 얻을 수 있다. 전술한 각각의 파트, 모듈 또는 유닛은 메모리(또는 저장 유닛)에 저장된 연속된 수행과정들을 실행하는 소프트 웨어, 프로세서, 하드웨어 파트일 수 있다. 전술한 실시예에 기술된 각 단계들은 프로세서, 소프트웨어, 하드웨 어 파트들에 의해 수행될 수 있다. 전술한 실시예에 기술된 각 모듈/블락/유닛들은 프로세서, 소프트웨어, 하드 웨어로서 동작할 수 있다. 또한, 실시예들이 제시하는 방법들은 코드로서 실행될 수 있다. 이 코드는 프로세서 가 읽을 수 있는 저장매체에 쓰여질 수 있고, 따라서 장치(apparatus)가 제공하는 프로세서에 의해 읽혀질 수 있다. 본 명세서는 설명의 편의를 위하여 각 도면을 나누어 설명하였으나, 각 도면에 서술되어 있는 실시 예들을 병합 하여 새로운 실시 예를 구현하도록 설계하는 것도 가능하다. 그리고, 통상의 기술자의 필요에 따라, 이전에 설 명된 실시 예들을 실행하기 위한 프로그램이 기록되어 있는 컴퓨터에서 판독 가능한 기록 매체를 설계하는 것도 본 개시의 권리범위에 속한다. 본 개시에 따른 장치 및 방법은 상술한 바와 같이 설명된 실시 예들의 구성과 방법이 한정되게 적용될 수 있는 것이 아니라, 실시 예들은 다양한 변형이 이루어질 수 있도록 각 실시 예들의 전부 또는 일부가 선택적으로 조 합되어 구성될 수도 있다. 본 개시에서 제1, 제2 등과 같은 용어는 본 개시의 다양한 구성요소들을 설명하기 위해 사용될 수 있다. 하지만 본 개시에 따른 다양한 구성요소들은 위 용어들에 의해 해석이 제한되어서는 안 된다. 이러한 용어는 하나의 구 성요소를 다른 구성요소와 구별하기 위해 사용되는 것에 불과하다. 예를 들어, 제1 사용자 인풋 시그널은 제2 사용자 인풋 시그널로 지칭될 수 있다. 이와 유사하게, 제2 사용자 인풋 시그널은 제1 사용자 인풋 시그널로 지 칭될 수 있다. 이러한 용어의 사용은 다양한 실시예들의 범위 내에서 벗어나지 않는 것으로 해석되어야만 한다. 제1 사용자 인풋 시그널 및 제2 사용자 인풋 시그널은 모두 사용자 인풋 시그널들이지만, 문맥 상 명확하게 나 타내지 않는 한 동일한 사용자 인풋 시그널들을 의미하지 않는다. 본 개시를 설명하기 위해 사용된 용어는 특정 실시예들을 설명하기 위한 목적으로 사용되고, 실시예들을 제한하 기 위해서 의도되지 않는다. 실시예들의 설명 및 청구항에서 사용된 바와 같이, 문맥 상 명확하게 지칭하지 않 는 한 단수는 복수를 포함하는 것으로 의도된다. 그리고, \"및/또는\" 표현은 용어 간의 모든 가능한 결합을 포함 하는 의미로 사용된다. \"포함한다\" 표현은 특징들, 수들, 단계들, 엘리먼트들, 및/또는 컴포넌트들이 존재하는 것을 설명하고, 추가적인 특징들, 수들, 단계들, 엘리먼트들, 및/또는 컴포넌트들을 포함하지 않는 것을 의미하 지 않는다. 본 개시를 설명하기 위해 사용되는, ~인 경우, ~때 등의 조건 표현은 선택적인 경우로만 제한 해석 되지 않는다. 특정 조건을 만족하는 때, 특정 조건에 대응하여 관련 동작을 수행하거나, 관련 정의가 해석되도 록 의도되었다."}
{"patent_id": "10-2023-0130959", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면은 실시예들을 더욱 이해하기 위해서 포함되며, 도면은 실시예들에 관련된 설명과 함께 실시예들을 나타낸 다. 도 1은 실시예들에 따른 AI 기반의 데이터 처리 장치의 일 예시를 보인 구성 블록도이다. 도 2는 실시예들에 따른 등록 처리 모듈의 일 예시를 보인 구성 블록도이다. 도 3은 실시예들에 따른 질문 처리 모듈의 일 예시를 보인 구성 블록도이다. 도 4는 실시예들에 따른 답변 처리 모듈의 일 예시를 보인 구성 블록도이다. 도 5는 실시예들에 따른 AI 기반의 데이터 처리 방법의 일 예시를 보인 흐름도이다."}
