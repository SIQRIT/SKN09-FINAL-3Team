{"patent_id": "10-2021-0176692", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0083186", "출원번호": "10-2021-0176692", "발명의 명칭": "복수의 코어를 사용하여 운영체제를 부팅하는 전자 장치 및 그의 동작 방법", "출원인": "삼성전자주식회사", "발명자": "김명재"}}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,복수의 코어들을 포함하는 프로세서; 및상기 프로세서와 전기적으로 연결되고, 인스트럭션들을 저장하는 메모리;를 포함하고, 상기 인스트럭션들은, 실행 시에:디스패처(dispatcher)가 상기 전자 장치의 운영 체제(operating system)의 부팅(booting)을 위한 복수의 모듈들의 로딩이 완료되었는지 여부를 판단하고,상기 복수의 모듈들 중에서 로딩이 미완료된 모듈이 존재함을 판단함에 따라, 상기 디스패처가, 상기 메모리에저장되어 있는 모듈 정보 테이블을 기반으로 의존성이 해소(clear)된 적어도 하나의 모듈을 식별하며,상기 적어도 하나의 모듈이 식별됨에 따라, 상기 디스패처가, 상기 메모리에 저장되어 있는 코어 정보 테이블을기반으로 상기 복수의 코어들 중에서 2이상의 코어들에 각각 할당된 모듈 로더(module loder)의 상태(state) 정보와 우선 순위(priority) 정보 중 적어도 하나를 식별하고,상기 식별한 정보를 기반으로, 상기 디스패처가 상기 코어들이 각각할당된 2 이상의 모듈 로더들 중 적어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서, 상기 메모리는, 실행 시에,상기 디스패처가, 상기 적어도 하나의 모듈 로더로부터 로딩 완료 이벤트를 수신함에 따라, 상기 모듈 정보 테이블을 업데이트 하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 1에 있어서, 상기 메모리는, 실행 시에,상기 모듈 로더들 중 아이들(idle) 상태인 적어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 3에 있어서, 상기 메모리는, 실행 시에,상기 모듈 로더들 중 상기 아이들 상태인 복수의 모듈 로더들이 식별되는 경우, 상기 복수의 모듈 로더들 중 상기 우선 순위가 높은 순서대로 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 1에 있어서, 상기 메모리는, 실행 시에,상기 디스패처가, 상기 상태 정보를 기반으로 상기 모듈 로더들이 아이들 상태인지 여부를 우선적으로고려하고, 다음으로 상기 우선 순위 정보를 기반으로 우선 순위가 높은지 여부를 고려하여 상기 적어도 하나의모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "공개특허 10-2023-0083186-3-청구항 5에 있어서, 상기 메모리는, 실행 시에,상기 아이들 상태인 제1 모듈 로더가, 모듈 로더의 큐에 적재되어 로딩 대기 중인 모듈도 있고 로딩 실행 중인모듈도 있는 제2 활동 상태인 제2 모듈 로더를 식별하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 6에 있어서, 상기 메모리는, 실행 시에,상기 제2 모듈 로더가 식별됨에 따라, 상기 제1 모듈 로더가 상기 제2 모듈 로더의 큐에 적재되어 있는 모듈을상기 제1 모듈 로더의 큐로 가져오도록(pulling), 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는,전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 6에 있어서, 상기 메모리는, 실행 시에,상기 제2 모듈 로더가 식별되지 않음에 따라, 상기 제1 모듈 로더가 모듈 로더의 큐에 적재된 모듈은 없이 로딩을 실행 중이 모듈만 있는 제1 활동 상태인 제3 모듈 로더를 식별하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 8에 있어서, 상기 메모리는, 실행 시에,상기 제3 모듈 로더가 식별됨에 따라, 상기 제1 모듈 로더가, 상기 제3 모듈 로더의 우선 순위가 상기 제1 모듈로더의 우선 순위보다 낮은지 여부를 판단하며,상기 제3 모듈 로더의 우선 순위가 상기 제1 모듈 로더의 우선 순위보다 낮음을 식별함에 따라, 상기 제1 모듈로더가 상기 제3 모듈 로더가 로딩 중인 모듈을 상기 제1 모듈 로더의 큐로 가져오도록(pulling), 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "청구항 1에 있어서, 상기 메모리는, 실행 시에,상기 디스패처가, 상기 모듈 로더들의 누적 워크로드(workload)를 고려하여, 각 모듈 로더의 누적 워크로드 간의 차이가 최소화되도록 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "복수의 코어들을 포함하는 프로세서를 포함하는 전자 장치의 동작 방법에 있어서,디스패처(dispatcher)가 상기 전자 장치의 운영 체제(operating system)의 부팅(booting)을 위한 복수의 모듈들의 로딩이 완료되었는지 여부를 판단하고;상기 복수의 모듈들 중에서 로딩이 미완료된 모듈이 존재함을 판단함에 따라, 상기 디스패처가, 상기 전자 장치의 메모리에 저장되어 있는 모듈 정보 테이블을 기반으로 의존성이 해소(clear)된 적어도 하나의 모듈을 식별하며;상기 적어도 하나의 모듈이 식별됨에 따라, 상기 디스패처가, 상기 메모리에 저장되어 있는 코어 정보 테이블을기반으로 상기 복수의 코어들 중에서 2이상의 코어들에 각각 할당된 모듈 로더(module loder)의 상태(state) 정보와 우선 순위(priority) 정보 중 적어도 하나를 식별하고;상기 식별한 정보를 기반으로, 상기 디스패처가 상기 코어들이 각각할당된 2 이상의 모듈 로더들 중 적어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록; 상기 프로세서를 제어하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "공개특허 10-2023-0083186-4-청구항 11에 있어서, 상기 디스패처가, 상기 적어도 하나의 모듈 로더로부터 로딩 완료 이벤트를 수신함에 따라, 상기 모듈 정보 테이블을 업데이트 하도록, 상기 프로세서를 제어하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "청구항 11에 있어서, 상기 모듈 로더들 중 아이들(idle) 상태인 적어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서를 제어하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "청구항 13에 있어서, 상기 모듈 로더들 중 상기 아이들 상태인 복수의 모듈 로더들이 식별되는 경우, 상기 복수의 모듈 로더들 중 상기 우선 순위가 높은 순서대로 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서를 제어하는, 전자 장치의동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "청구항 11에 있어서, 상기 디스패처가, 상기 상태 정보를 기반으로 상기 모듈 로더들이 아이들 상태인지 여부를 우선적으로고려하고, 다음으로 상기 우선 순위 정보를 기반으로 우선 순위가 높은지 여부를 고려하여 상기 적어도 하나의모듈을 분배하도록, 상기 프로세서를 제어하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "청구항 15에 있어서, 상기 아이들 상태인 제1 모듈 로더가, 모듈 로더의 큐에 적재되어 로딩 대기 중인 모듈도 있고 로딩 실행 중인모듈도 있는 제2 활동 상태인 제2 모듈 로더를 식별하도록, 상기 프로세서를 제어하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "청구항 16에 있어서, 상기 제2 모듈 로더가 식별됨에 따라, 상기 제1 모듈 로더가 상기 제2 모듈 로더의 큐에 적재되어 있는 모듈을상기 제1 모듈 로더의 큐로 가져오도록(pulling), 상기 프로세서를 제어하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "청구항 16에 있어서, 상기 제2 모듈 로더가 식별되지 않음에 따라, 상기 제1 모듈 로더가 모듈 로더의 큐에 적재된 모듈은 없이 로딩을 실행 중이 모듈만 있는 제1 활동 상태인 제3 모듈 로더를 식별하도록, 상기 프로세서를 제어하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "청구항 18에 있어서, 상기 제3 모듈 로더가 식별됨에 따라, 상기 제1 모듈 로더가, 상기 제3 모듈 로더의 우선 순위가 상기 제1 모듈로더의 우선 순위보다 낮은지 여부를 판단하며,상기 제3 모듈 로더의 우선 순위가 상기 제1 모듈 로더의 우선 순위보다 낮음을 식별함에 따라, 상기 제1 모듈로더가 상기 제3 모듈 로더가 로딩 중인 모듈을 상기 제1 모듈 로더의 큐로 가져오도록(pulling), 상기 프로세서를 제어하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0176692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "공개특허 10-2023-0083186-5-청구항 11에 있어서, 상기 디스패처가, 상기 모듈 로더들의 누적 워크로드(workload)를 고려하여, 각 모듈 로더의 누적 워크로드 간의 차이가 최소화되도록 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서를 제어하는, 전자 장치의 동작방법."}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 문서에 개시되는 일 실시 예에 따른 전자 장치는, 복수의 코어들을 포함하는 프로세서, 및 상기 프로세서와 전기적으로 연결되고, 인스트럭션들을 저장하는 메모리를 포함하고, 상기 인스트럭션들은, 실행 시에, 디스패처 (dispatcher)가 상기 전자 장치의 운영 체제(operating system)의 부팅(booting)을 위한 복수의 모듈들의 로딩 (뒷면에 계속)"}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 문서에서 개시되는 실시 예들은, 복수의 코어를 사용하여 운영체제를 부팅하는 전자 장치 및 그의 동작 방법 에 관한 것이다."}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "안드로이드(Android) 운영체제(Operating System, OS)는 커널(kernel) 부팅 단계에서 모듈(module) 형태로 빌 드된 디바이스 드라이버(device driver)를 로딩(loading)할 경우, 이를 직렬화된 형태로 순차적으로 실행하는 구조를 가질 수 있다. 안드로이드 운영체제(OS)가 멀티 코어(multicore) CPU(central processing unit)상에서 동작하고, 복수의 모듈을 로딩 해야 할 경우, init이라는 이름의 프로세스가 전체 모듈 로딩을 단독적으로 수행 함에 따라 한 개의 코어(core)에서만 모듈 로딩이 순차적으로 실행될 수 있다. 직렬화된 구조로 모듈 로딩을 실행하는 이유는 로딩 되는 모듈 간에 의존성이 존재하기 때문일 수 있다. 예를 들어, 모듈 a가 모듈 b에 대해 의존성을 가지고 있는 경우, 선행해야 하는 모듈 b가 로딩되었는지 여부를 확인 하고, 모듈 b가 로딩된 후에 동일 코어에서 모듈 a의 로딩을 진행할 수 있는 구조일 수 있다. 따라서 모든 모듈 로딩의 순서가 의존성에 문제가 없는 순서로서 하나의 코어에서만 진행될 수 있다. 그러나, 멀티 코어 CPU가 탑재된 전자 장치에서 직렬화된 실행 구조는 멀티 코어를 가진 하드웨어 자원을 충분 히 활용하지 못하는 문제점이 있으며, 부팅 시간의 지연 등으로 이어져 전자 장치의 성능 저하를 가져오는 요인 중 하나가 될 수 있다."}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시의 다양한 실시예는, 서로간 의존성을 가지고 있는 복수의 모듈들을 로딩함에 있어, 멀티 코어 CPU의 하 드웨어 자원을 최적으로 활용하여, 병렬성의 이점을 극대하면서도 모듈 간 의존관계를 문제 없이 충족시켜서, 모듈 로딩의 성능을 최적화한 전자 장치 및 그의 동작 방법을 제공하고자 한다."}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 문서에 개시되는 일 실시 예에 따른 전자 장치는, 복수의 코어들을 포함하는 프로세서, 및 상기 프로세서와 전기적으로 연결되고, 인스트럭션들을 저장하는 메모리를 포함하고, 상기 인스트럭션들은, 실행 시에, 디스패처 (dispatcher)가 상기 전자 장치의 운영 체제(operating system)의 부팅(booting)을 위한 복수의 모듈들의 로딩 이 완료되었는지 여부를 판단하고, 상기 복수의 모듈들 중에서 로딩이 미완료된 모듈이 존재함을 판단함에 따라, 상기 디스패처가, 상기 메모리에 저장되어 있는 모듈 정보 테이블을 기반으로 의존성이 해소(clear)된 적 어도 하나의 모듈을 식별하며, 상기 적어도 하나의 모듈이 식별됨에 따라, 상기 디스패처가, 상기 메모리에 저 장되어 있는 코어 정보 테이블을 기반으로 상기 복수의 코어들 중에서 2이상의 코어들에 각각 할당된 모듈 로더 (module loder)의 상태(state) 정보와 우선 순위(priority) 정보 중 적어도 하나를 식별하고, 상기 식별한 정보 를 기반으로, 상기 디스패처가 상기 코어들이 각각할당된 2 이상의 모듈 로더들 중 적어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장한다. 또한, 본 문서에 개시되는 일 실시 예에 따른 복수의 코어들을 포함하는 프로세서를 포함하는 전자 장치의 동작 방법은, 디스패처(dispatcher)가 상기 전자 장치의 운영 체제(operating system)의 부팅(booting)을 위한 복수 의 모듈들의 로딩이 완료되었는지 여부를 판단하고, 상기 복수의 모듈들 중에서 로딩이 미완료된 모듈이 존재함 을 판단함에 따라, 상기 디스패처가, 상기 전자 장치의 메모리에 저장되어 있는 모듈 정보 테이블을 기반으로 의존성이 해소(clear)된 적어도 하나의 모듈을 식별하며, 상기 적어도 하나의 모듈이 식별됨에 따라, 상기 디스 패처가, 상기 메모리에 저장되어 있는 코어 정보 테이블을 기반으로 상기 복수의 코어들 중에서 2이상의 코어들에 각각 할당된 모듈 로더(module loder)의 상태(state) 정보와 우선 순위(priority) 정보 중 적어도 하나를 식 별하고, 상기 식별한 정보를 기반으로, 상기 디스패처가 상기 코어들이 각각할당된 2 이상의 모듈 로더들 중 적 어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록; 상기 프로세서를 제어한다."}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 다양한 실시예에 따르면, 서로간 의존성을 가지고 있는 복수의 모듈들을 로딩함에 있어, 멀티 코어 CPU의 하드웨어 자원을 최적으로 활용하여, 병렬성의 이점을 극대하면서도 모듈 간 의존관계를 문제 없이 충족 시켜서, 모듈 로딩의 성능을 최적화한 전자 장치 및 그의 동작 방법이 제공될 수 있다. 이 외에, 본 문서를 통해 직접적 또는 간접적으로 파악되는 다양한 효과들이 제공될 수 있다."}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 발명의 다양한 실시 예가 첨부된 도면을 참조하여 기재된다. 그러나, 이는 본 발명을 특정한 실시 형 태에 대해 한정하려는 것이 아니며, 본 발명의 실시 예의 다양한 변경(modification), 균등물(equivalent), 및/ 또는 대체물(alternative)을 포함하는 것으로 이해되어야 한다. 도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈, 음향 출 력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입자 식별 모듈 , 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에 서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성 요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능이 수행되는 전자 장치 자 체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi-supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않는다. 인공 지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워 크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지 능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어™)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다. 이하, 도 2, 도 3, 및 도 4를 참고하여, 일 실시예에 따른 전자 장치의 동작에 대하여 설명한다. 도 2는 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 도면이다. 도 3은 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 순서도이다. 도 4는 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 순서도 이다. 이하, 전자 장치의 동작은 전자 장치의 프로세서에 의해 수행될 수 있다. 도 2를 참조하면, 전자 장치(예: 도 1의 전자 장치)의 프로세서(예: 도 1의 프로세서)는 2개 이상의 코어(core)를 가진 멀티코어(Multicore)(이하, 복수의 코어들)를 포함할 수 있다. 전자 장치의 메모리(예: 도 1 의 메모리)은 복수의 모듈 로더(module loder)들(210, 220, 230)을 저장할 수 있다. 복수의 코어들은 각각 하나의 모듈 로더(210, 220, 230)에 대응될 수 있다. 예를 들어, 전자 장치의 프로세서가 N+1개의 코어를 포함하는 경우, 제0번 코어는 모듈 로더/0에 대응되고, 제1번 코어는 모듈 로더/1에 대응되고, …, 제N번 코어는 모듈 로더/N에 대응될 수 있다. 또는 일 실시예에 따라 모듈 로딩에 사용하기 로 결정된 코어에만 모듈 로더가 대응될 수도 있다. 각 모듈 로더는 모듈을 적재할 수 있는 큐(queue)(211, 221, 231)를 포함할 수 있다. 전자 장치의 메모리는 디스패처(dispatcher)를 저장할 수 있다. 디스패처는 로딩 준비가 된 모듈을 적재할 수 있는 큐(queue)를 포함할 수 있다. 디스패처는 큐를 이용하여 모듈을 복수의 모듈 로더들 (210, 220, 230)에 분배하는 동작을 수행할 수 있다. 디스패처는 모듈 로더(210, 220, 230)과 별도의 코 어에 대응될 수도 있으나, 어느 하나의 모듈 로더와 같은 코어에 대응될 수도 있다. 어느 하나의 모듈 로더가 디스패처와 같은 코어에 대응되는 경우, 해당 모듈 로더에서 모듈을 로딩하는 중에는 디스패처는 슬 립(sleep) 상태일 수 있다.이하, 도 3의 순서도을 더 참조하여 디스패처의 동작에 대하여 설명한다. 도 2 및 도 3을 참조하면, 디스패처는 동작 301에서, 전자 장치의 운영 체제(예: 도 1의 운영 체제) 의 부팅(booting)을 위한 모든 모듈의 로딩이 완료되었는지 판단할 수 있다. 전자 장치의 메모리에 저장된 운영 체제는 안드로이드(Android) 운영체제(Operating System, OS)일 수 있으며, 안드로이드 운영 체제는 커널 (kernel) 부팅 단계에서 모듈(module) 형태로 빌드된 디바이스 드라이버(device driver)를 로딩(loading)할 수 있다. 디스패처는 동작 301에서 모든 모듈의 로딩이 완료되었다고 판단되는 경우, 동작 317에서 모듈 로더들 (210, 220, 230)의 큐(211, 221, 231)에 종료 시그널을 인큐할 수 있다. 디스패처는 동작 301에서 모든 모듈의 로딩이 완료되었다고 판단되지 않는 경우, 동작 303에서, 의존성 (dependency) 항목이 모두 해소(clear)된 모듈을 식별하여 디스패처의 큐에 인큐(enqueue)할 수 있 다. 디스패처는 의존성이 원래 없거나 다른 모듈이 실행 완료됨으로써 의존성이 모두 해소(clear)된 모듈 들을 로딩 실행이 준비된 모듈로 판단할 수 있다. 디스패처는 로딩 실행이 준비된 모듈을 모두 식별하여 디스패처의 큐에 인큐할 수 있다. 동작 305에서, 디스패처는 디스패처의 큐가 비어있는 상태인지 여부를 판단할 수 있다. 동작 303에서 로딩 실행이 준비된 모듈을 디스패처의 큐에 인큐하였다면, 디스패처의 큐는 비어 있지 않은 상태일 수 있다. 동작 307에서, 디스패처는 동작 305에서 디스패처의 큐가 비어있지 않다고 판단함에 따라 아이 들(idle) 상태의 모듈 로더(modue loder)가 존재하는지 여부를 판단할 수 있다. 일 실시예에 따라 아이들 상태 란, 모듈 로더가 모듈을 로딩하고 있지 않으며, 모듈 로더의 큐가 비어있는 상태를 의미할 수 있다. 동작 309에서, 디스패처는 동작 307에서 아이들 상태인 모듈 로더가 적어도 하나 존재한다고 판단함에 따 라, 디스패처의 큐에서 모듈 한 개를 디큐(dequeue)하여 아이들 상태인 적어도 하나의 모듈 로더 중 우선순위(priority)가 가장 높은 모듈 로더의 큐에 인큐할 수 있다. 디스패처은 동작 309를 수행한 후에 다시 동작 305로 돌아갈 수 있다. 동작 305에서 디스패처가 디스패처의 큐가 비어있다고 판단하거나, 동작 307에서 디스패처가 아 이들 상태인 모듈 로더를 식별하지 못한 경우, 동작 311에서 디스패처는 모듈 로더(210, 220, 230)의 로딩 완료 이벤트를 대기할 수 있다. 디스패처가 로딩 완료 이벤트를 대기하는 중에는 슬립(sleep) 상태일 수 있으며, 다른 모듈 로더의 실행에 거의 영향을 주지 않을 수 있다. 동작 313에서 디스패처는 적어도 하나의 모듈 로더로부터 모듈 로딩 완료 이벤트를 수신할 수 있다. 동작 315에서 디스패처는 메모리에 저장된 모듈 정보 테이블을 업데이트할 수 있다. 디스패처는 모듈 정보 테이블에서, 완료된 모듈의 상태를 로딩 완료 상태로 변경하고, 로딩 완료된 모듈에 대하여 의존성을 가지 고 있는 모듈의 의존성 리스트에서 로딩 완료된 모듈에 대한 의존성을 해소(clear)된 상태로 변경함으로써 모듈 정보 테이블을 업데이트할 수 있다. 일 실시예에 따라 전자 장치의 메모리는 프로세서를 통하여 모듈 정보 테이 블을 저장할 수 있으며, 모듈 정보 테이블의 형태는 다양할 수 있으며 적어도 모듈의 로딩 상태와 의존성에 대 한 정보를 포함할 수 있다. 동작 315를 완료한 후, 디스패처는 다시 동작 301로 돌아갈 수 있다. 동작 301에서 디스패처는 모든 모듈의 로딩이 완료되었는지 여부를 판단하여, 모든 모듈의 로딩이 완료되었다고 판단되는 경우, 동작 317에서 모듈 로더들(210, 220, 230)의 큐(211, 221, 231)에 종료 시그널을 인큐할 수 있다. 이하, 도 4의 순서도을 참조하여 모듈 로더(210, 220, 230)의 동작에 대하여 설명한다. 도 4의 순서도 는 도 2의 복수의 모듈 로더(210, 220, 230) 중 어느 하나의 모듈 로더의 동작을 나타낸 순서도일 수 있다. 도 2 및 도 4를 참조하면, 동작 401에서, 모듈 로더(210, 220, 230)은 디스패처로부터 모듈이 전달되어 큐 (211, 221, 231)에 인큐되기를 대기할 수 있다. 이때, 모듈 로더(210, 220, 230)은 아이들(idle) 상태일 수 있 다. 동작 403에서, 모듈 로더(210, 220, 230)는 모듈 로더의 큐(211, 221, 231)에 인큐가 발생함에 따라, 로딩 종 료 시그널이 인큐되었는지 판단할 수 있다. 로딩 종료 시그널이란 모든 모듈이 로딩 완료되었을 때 디스 패처가 모듈 로더(210, 220, 230)에게 전달하는 시그널일 수 있다. 모듈 로더(210, 220, 230)는 로딩 종료 시그널이 인큐되었음을 식별함에 따라 프로세스를 종료할 수 있다. 모듈 로더(210, 220, 230)는 로딩 종료 시그널이 인큐된 것이 아님을 식별함에 따라, 동작 405에서, 모듈 로더 (210, 220, 230)의 큐(211, 221, 231)가 비어있는지 여부를 판단할 수 있다. 모듈 로더(210, 220, 230)는 큐 (211, 221, 231)이 비었다고 판단됨에 따라 동작 401로 돌아가서 모듈이 전달되기를 대기할 수 있다. 모듈 로더(210, 220, 230)는 큐(211, 221, 231)이 비어있지 않고 모듈이 적재되어 있음을 식별함에 따라, 동작 407에서 모듈의 로딩을 수행할 수 있다. 동작 409에서, 모듈 로더(210, 220, 230)는 모듈의 로딩을 완료한 후, 디스패처에게 로딩 완료 이벤트를 전달할 수 있다. 로딩 완료 이벤트를 전달한 모듈 로더(210, 220, 230)는 다시 동작 405로 돌아가 큐(211, 221, 231)이 비어있는지 여부를 판단할 수 있다. 모듈 로더(210, 220, 230)는 동작 405에서 큐가 비어있음을 식별하고, 동작 401에서 인큐가 발생하기를 대기하 다가, 동작 403에서 로딩 종료 시그널이 인큐되었음을 식별함에 따라 부팅 프로세스를 종료할 수 있다. 이하, 도 5를 참고하여, 일 실시예에 따른 전자 장치의 동작에 대하여 예를 들어 자세히 설명한다. 도 5는 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 도면이다. 도 5는 전자 장치의 부팅(booting) 프로 세스에서 모듈 로더의 동작을 타임라인에 따라 나타낸 도면일 수 있다. 도 5의 제1 표 및 제2 표의 가로축은 시간의 흐름을 의미할 수 있다. 도 5를 참조하여 설명할 실시예에서는, 2개 이상의 복수의 코어(core)들을 가진 프로세서(예: 도 1의 프로세서 )를 포함하는 전자 장치(예: 도 1의 전자 장치)에 있어서, 2개의 코어들 각각에 모듈 로더가 할당된 경우를 가정한다. 예를 들어, 전자 장치의 프로세서가 0~7번까지 8개의 코어를 포함하고, 0번 코어에 모듈 로더 /0이 할당되고, 4번 코어에 모듈 로더/1가 할당된 경우일 수 있다. 이때, 코어 정보 테이블은 하기 [표 1]과 같 을 수 있다. 표 1"}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "0번 코어에 할당된 모듈 로더/0과 4번 코어에 할당된 모듈 로더/1의 우선 순위(priority)는 동일한 것으로 가정 한다. 부팅 프로세스를 시작하기 전의 모듈 로더/0과 모듈 로더/1는 아이들(idle) 상태일 수 있다. 전자 장치의 메모리는 하기 [표 2]와 같은 모듈 정보 테이블을 저장할 수 있다. 표 2"}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "일 실시예에 따라 모듈 정보 테이블은 부팅 단계에서 로딩이 필요한 모든 모듈의 상태(state) 정보 및 의존성 (dependency) 정보를 적어도 포함할 수 있다. 일 실시예에 따라 모듈 정보 테이블은 모듈의 이름(module name), 및 워크로드(workload) 중 적어도 하나를 더 포함할 수 있다. 일 실시예에 따라 모듈 정보 테이블에서 모듈의 상태(state)는 T, N, 또는 L중의 어느 하나로 나타내어질 수 있 다. 모듈 상태가 T(terminated)인 경우는, 모듈의 로딩이 완료된 상태를 의미할 수 있다. 모듈 상태가 N(not loaded)인 경우는, 모듈의 로딩이 시작되지 않은 상태를 의미할 수 있다. 모듈의 상태가 L(loading)인 경우는, 디스패처의 큐에 적재된 상태이거나, 모듈 로더가 로딩을 실행 중인 상태를 의미할 수 있다. 일 실시예에 따라 모듈 정보 테이블의 각 모듈의 초기 상태는 N이며, 프로세서는 모듈이 디스패처의 큐에 적재 된 후 로딩이 완료되기 전까지는 모듈 정보 테이블에서 모듈의 상태를 L으로 유지하고, 로딩이 완료된 모듈의 상태는 T로 변경할 수 있다. 모든 모듈이 T 상태인 경우 부팅 프로세스는 종료될 수 있다. 일 실시예에 따라 모듈 정보 테이블에서 워크로드(workload)는 모듈의 로딩에 필요한 일의 양을 상대적인 개념 의 숫자로 나타낸 정보일 수 있다. 일 실시예에 따라 모듈 정보 테이블에서 의존성 리스트(dependency list)는 해당 모듈이 의존하고 있는 모듈의 이름을 나타낸 정보일 수 있다. 모듈에 따라 의존성이 없을 수도 있고, 적어도 하나의 다른 모듈에 대하여 의존 성을 가질 수도 있다. 모듈이 다른 모듈에 대하여 의존성을 갖는다는 것은 다른 모듈이 선행되어 로딩이 완료된 경우에만 해당 모듈이 로딩이 가능하다는 의미일 수 있다. 예를 들어, [표 2]의 모듈 b는 모듈 a에 대하여 의존 성을 가지며, 모듈 b는 모듈 a가 먼저 로딩된 후에만 로딩이 가능할 수 있다. 일 실시예에 따라 부팅 프로세스가 시작되면, 디스패처는 모듈 정보 테이블에서 상태가 N이면서 의존성이 모두 해소(clear)된 모듈을 식별할 수 있다. 디스패처는 모듈 a와 모듈 c가 식별됨에 따라 이를 디스패처의 큐에 적 재할 수 있다. 디스패처는 모듈 a와 모듈 c를 디스패처의 큐에 적재한 후 모듈 정보 테이블에서 모듈 a와 모듈 c의 상태를 L로 변경할 수 있다. 디스패처는 아이들 상태인 모듈 로더/0과 모듈 로더/1에 디스패처 큐에 적재된 모듈 a, 모듈 c를 분배할 수 있 다. 모듈 로더/0과 모듈 로더/1은 우선 순위가 동일하므로 디스패처는 임의로, 또는 순서대로 하나씩 모듈을 분 배할 수 있다. 예를 들어, 디스패처는 모듈 로더/0에게 모듈 a를 분배하고, 모듈 로더/1에게 모듈 c를 분배할 수 있다. 디스피처의 큐에 적재된 모든 모듈의 분배를 완료한 디스패처는 모듈 로딩 완료 이벤트를 대기할 수 있다. 도 5를 참조하면, t=0에서 모듈을 분배받은 모듈 로더/0 및 모듈 로더/1은 각각 로딩을 시작할 수 있다. 모듈 a의 워크로드 만큼 경과한 t=3 시점에서, 모듈 a의 로딩이 완료되면, 모듈 로더/0는 디스패처에게 모듈 로 딩 완료 이벤트를 전달하고, 아이들 상태로 변경될 수 있다. 디스패처는 모듈 정보 테이블에서 모듈 a의 상태를 T로 갱신하고, 의존성 리스트에서 모듈 a에 대한 의존성이 해소(clear)되었음을 표시할 수 있다. 모듈 a에 대한 의존성이 해소된 후 모듈 정보 테이블은 [표 3]과 같을 수 있다. 표 3"}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "일 실시예에 따라 [표 3]에서 표시 “v”는 의존성이 해소(clear)되었음을 나타내는 플래그(flag) 표시일 수 있 다. 디스패처는 모든 모듈의 로딩이 완료되었는지 판단할 수 있다. 디스패처는 로딩이 완료되지 않은 모듈이 남아있 음을 식별함에 따라, 상태가 N(not loaded)이면서, 의존성이 모두 해소된 모듈을 검색할 수 있다. 디스패처는 모듈 b, 및 모듈 d를 식별하여, 디스패처의 큐에 인큐할 수 있다. 디스패처는 모듈 b 및 모듈 d 를 디스패처의 큐에 인큐한 후, 모듈 b 및 모듈 d의 상태를 L로 변경할 수 있다. 디스패처는 아이들 상태의 모듈 로더를 검색할 수 있다. 디스패처는 모듈 로더/0이 아이들 상태임을 식별함에 따라 모듈 b를 디스패처의 큐에서 꺼내어 모듈 로더/0에게 전할 수 있다. 디스패처는 모듈 로더/0 및 모듈 로더/1이 모두 동작 중인 상태이므로, 모듈의 전달을 중단하고 모듈 로더로 부 터의 모듈 로딩 완료 이벤트를 대기할 수 있다. 디스패처의 큐에는 모듈 d가 적재된 상태일 수 있다. 모듈 로더/0은 t=3 시점에 모듈 b를 전달 받아, 모듈 로더/0의 큐에 적재하고 모듈 b의 로딩을 시작할 수 있다. t=3으로부터 모듈 b의 워크로드 만큼 경과한 t=6 시점에서, 모듈 b의 로딩이 완료되면, 모듈 로더/0는 디스패처 에게 모듈 로딩 완료 이벤트를 전달하고, 아이들 상태로 변경될 수 있다. 디스패처는 모듈 정보 테이블에서 모듈 b의 상태를 T로 갱신하고, 의존성 리스트에서 모듈 b에 대한 의존성이 해소(clear)되었음을 표시할 수 있다. 이때 모듈 정보 테이블은 [표 4]와 같을 수 있다.표 4"}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "디스패처는 모든 모듈의 로딩이 완료되었는지 판단할 수 있다. 디스패처는 로딩이 완료되지 않은 모듈이 남아있 음을 식별함에 따라, 상태가 N(not loaded)이면서, 의존성이 모두 해소된 모듈을 검색할 수 있다. 검색 결과가 없음에 따라 모듈의 적재는 이루어지지 않을 수 있다. 그러나, 디스패처의 큐에는 모듈 d가 적재되어 있는 상태이므로 디스패처는 아이들 상태의 모듈 로더를 검색할 수 있다. 디스패처는 모듈 로더/0이 아이들 상태임을 식별함에 따라 모듈 d를 디스패처의 큐에서 꺼내어 모듈 로더/0에게 전할 수 있다. 디스패처의 큐는 비어있는 상태이므로 모듈 로더로 부터의 모듈 로딩 완료 이벤트를 대기할 수 있다. 모듈 로더/0은 t=6 시점에 모듈 d를 전달 받아, 모듈 로더/0의 큐에 적재하고 모듈 d의 로딩을 시작할 수 있다. 모듈 c의 워크로드 만큼 경과한 t=7 시점에서 모듈 c의 로딩이 완료되면, 모듈 로더/1는 디스패처에게 모듈 로 딩 완료 이벤트를 전달하고, 아이들 상태로 변경될 수 있다. 디스패처는 모듈 정보 테이블에서 모듈 c의 상태를 T로 갱신하고, 의존성 리스트에서 모듈 c에 대한 의존성이 해소(clear)되었음을 표시할 수 있다. 이때 모듈 정보 테이블은 [표 5]와 같을 수 있다. 표 5"}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "디스패처는 모든 모듈의 로딩이 완료되었는지 판단할 수 있다. 디스패처는 로딩이 완료되지 않은 모듈이 남아있 음을 식별함에 따라, 상태가 N(not loaded)이면서, 의존성이 모두 해소된 모듈을 검색할 수 있다. 디스패처는 모듈 f를 식별하여, 디스패처의 큐에 인큐할 수 있다. 디스패처는 모듈 f를 디스패처의 큐에 인큐한 후, 모듈 f 의 상태를 L로 변경할 수 있다. 디스패처는 아이들 상태의 모듈 로더를 검색할 수 있다. 디스패처는 모듈 로더/1이 아이들 상태임을 식별함에 따라 모듈 f를 디스패처의 큐에서 꺼내어 모듈 로더/1에게 전할 수 있다. 디스패처의 큐는 비어있는 상태이므로 디스패처는 모듈 로더로 부터의 모듈 로딩 완료 이벤트를 대기할 수 있다. 모듈 로더/1은 t=7 시점에 모듈 f를 전달 받아, 모듈 로더/1의 큐에 적재하고 모듈 f의 로딩을 시작할 수 있다. t=7으로부터 모듈 c의 워크로드 만큼 경과한 시간이자 t=6으로부터 모듈 d의 워크로드 만큼 경과한 시간인 t=11 시점에서, 모듈 c 및 모듈 d의 로딩이 완료되면, 모듈 로더/0 및 모듈 로더/1은 디스패처에게 모듈 로딩 완료 이벤트를 전달하고, 아이들 상태로 변경될 수 있다. 디스패처는 모듈 정보 테이블에서 모듈 c 및 모듈 d의 상태를 T로 갱신하고, 의존성 리스트에서 모듈 c 및 모듈 d에 대한 의존성이 해소(clear)되었음을 표시할 수 있다. 디스패처는 모든 모듈의 로딩이 완료된 상태(T 상태)가 되었음을 확인함에 따라 전체 모듈 로더들에게 로딩 완 료 이벤트를 전달하고 디스패처의 동작을 종료할 수 있다. 모듈 로더/0 및 모듈 로더/1도 로딩 완료 이벤트를 수신함에 따라 동작을 종료할 수 있고, 부팅 프로세는 종료될 수 있다. 앞서 도 5에서는 모듈 로더가 할당되도록 선택된 모든 코어의 우선 순위가 동일한 경우를 가정하여 설명하였다. 그러나 일 실시예에 따라 전자 장치에 포함된 복수의 코어들은 연산 능력이 각각 상이할 수 있다. 이 경우, 연 산 능력이 보다 우수한 코어에 모듈 분배 우선 순위를 부여함에 따라 로딩 효율을 극대화할 수 있다. 전자 장치에 포함된 복수의 코어들은 연산 능력이 각각 상이한 경우, 코어 정보 테이블을 사용할 수 있다. 일 실시예에 따라 전자 장치가 하기 [표 6]과 같은 코어 정보 테이블을 갖는 경우를 가정하여 설명한다. 예를 들어, [표 6]은 전자 장치의 프로세서가 0~7번까지 8개의 코어를 포함하고, 0번 코어에 모듈 로더/0이 할당되고, 1번 코어에 모듈 로더/1가 할당되고, 4번 코어에 모듈 로더/2가 할당되고, 5번 코어에 모듈 로더/3가 할당된 경우일 수 있다. 표 6"}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "[표 6]에서 'Loader #'는 모듈 로더의 번호를 나타낼 수 있으며, 'Core #'는 해당 모듈 로더를 배치할 코어의 번호를 나타낼 수 있다. 또한 [표 6]에서 'Priority'는 모듈 로더의 우선 순위를 나타낼 수 있다. 'Priority'의 값이 낮은 값일수록 코어의 성능이 우수한 높은 선순위를 나타낼 수 있다. 일 실시예에 따라 'Priority' 값이 높은 값일수록 선순위를 나타낼 수도 있다. 또한 [표 6]에서 'State'는 해당 모듈 로더가 현재 로딩을 수행 중 인지 여부를 나타낼 수 있으며, '# of pending module'은 해당 모듈 로더에서 현재 로딩을 수행하고 있는 모듈 을 제외하고 아직 로딩을 수행하지 못한채로 모듈 로더의 큐에 적재되어 있는 모듈의 개수를 나타낼 수 있다. 디스패처는 다음 두 개의 조건을 모두 만족하도록 모듈을 모듈 로더에게 분배할 수 있다. 두 개의 조건은 1)아 이들 상태의 모듈 로더가 최대한 없도록 모듈을 분배할 것, 2) 우선 순위가 높은 모듈 로더부터 분배할 것, 일 수 있다. 이때 조건 1)을 조건 2)보다 우선적으로 만족 시켜야 할 수 있다. 예를 들어 전체 모듈로더가 두 개 있고, 그 중 한 개의 모듈 로더가 로딩 수행 중이고, 로딩을 수행 중인 모듈 로더가 다른 모듈 로더보다 우선 순위가 더 높은 경우, 디스패처에 의해 신규로 전달되는 모듈은 로딩을 수행 중인 모듈 로더가 아닌 아이들 상 태의 다른 모듈 로더에 전달될 수 있다. 만약 두 개의 모듈 로더가 모두 로딩 수행 중일 경우 디스패처에 의해신규로 전달되는 모듈은 두 개의 모듈 로더들 중 우선 순위가 더 높은 모듈 로더 순으로 전달 될 수 있다. 코어 정보 테이블이 상기 [표 6]과 같을 때, 디스패처가 1개의 분배 가능한 하나의 모듈을 식별하여 디스패처의 큐에 적재한 상태인 경우, 디스패처가 선택할 수 있는 모듈 로더는 아이들 상태인 모듈 로더/0과 모듈 로더/2일 수 있다. 이때, 모듈 로더/2의 우선 순위가 모듈 로더/0보다 높으므로 디스패처는 디스패처의 큐에 적재되어 있 는 모듈을 모듈 로더/0에게 분배할 수 있다. 이하, 도 2, 도 6, 및 도 7을 참고하여, 일 실시예에 따른 전자 장치의 동작에 대하여 설명한다. 도 6은 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 순서도이다. 도 7은 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 순서도이다. 이하, 전자 장치의 동작은 전자 장치의 프로세서에 의해 수행될 수 있다. 도 2 및 도 6을 참조하면, 디스패처는 동작 601에서, 전자 장치의 운영 체제(예: 도 1의 운영 체제) 의 부팅(booting)을 위한 모든 모듈의 로딩이 완료되었는지 판단할 수 있다. 전자 장치의 메모리에 저장된 운영 체제는 안드로이드(Android) 운영체제(Operating System, OS)일 수 있으며, 안드로이드 운영 체제는 커널 (kernel) 부팅 단계에서 모듈(module) 형태로 빌드된 디바이스 드라이버(device driver)를 로딩(loading)할 수 있다. 디스패처는 동작 601에서 모든 모듈의 로딩이 완료되었다고 판단되는 경우, 동작 615에서 모듈 로더들 (210, 220, 230)의 큐(211, 221, 231)에 종료 시그널을 인큐할 수 있다. 디스패처는 동작 601에서 모든 모듈의 로딩이 완료되었다고 판단되지 않는 경우, 동작 603에서, 의존성 (dependency) 항목이 모두 해소(clear)된 모듈을 식별하여 디스패처의 큐에 인큐(enqueue)할 수 있 다. 디스패처는 의존성이 원래 없거나 다른 모듈이 실행 완료됨으로써 의존성이 모두 해소(clear)된 모듈 들을 로딩 실행이 준비된 모듈로 판단할 수 있다. 디스패처는 로딩 실행이 준비된 모듈을 모두 식별하여 디스패처의 큐에 인큐할 수 있다. 동작 605에서, 디스패처는 디스패처의 큐가 비어있는 상태인지 여부를 판단할 수 있다. 동작 603에서 로딩 실행이 준비된 모듈을 디스패처의 큐에 인큐하였다면, 디스패처의 큐는 비어 있지 않은 상태일 수 있다. 동작 607에서, 디스패처는 동작 605에서 디스패처의 큐가 비어있지 않다고 판단함에 따라, 디스 패처의 큐에 적재되어 있는 모든 모듈을 모듈 로더에 분배할 수 있다. 동작 607에서 디스패처가 디스패처의 큐에 적재되어 있는 모든 모듈을 모듈 로더에 분배할 때, 다음과 같은 조건에 따라 분배할 수 있다. 아이들(idle) 상태인 모듈 로더가 적어도 하나 존재하는 경우, 디스패처는 상기 적어도 하나의 아이들 상 태인 모듈 로더 중 우선 순위가 높은 순서대로 모듈을 1개씩 분배할 수 있다. 여기서 모듈 로더의 우선 순위는 앞서 [표 6]을 참조하여 설명한 실시예의 우선 순위와 동일하게 설명될 수 있다. 만약 상기 적어도 하나의 아이 들 상태인 모듈 로더의 우선 순위가 모두 동일한 경우 디스패처는 랜덤한 순서로 모듈을 1개씩 분배할 수 있다. 모듈의 분배가 완료되지 않은 상태에서 이미 아이들 상태인 모듈 로더가 남아있지 않게 되거나, 모듈의 분배시부터 아이들 상태인 모듈 로더가 존재하지 않는 경우, 디스패처는 전체 모듈 로더 중 우선 순위가 가장 높은 모듈 로더 순으로 라운드 로빈(Round-robin) 방식으로 모듈을 분배할 수 있다. 디스패처는 아이들 상태인 모듈 로더가 존재하지 않는 경우에도 상기 방식으로 디스패처의 큐에 적재되어 있는 모든 모듈의 분배를 완료할 수 있다. 디스패처은 동작 607을 수행한 후에 다시 동작 605로 돌아갈 수 있다. 동작 605에서 디스패처가 디스패처의 큐가 비어있다고 판단한 경우, 동작 609에서 디스패처는 모듈 로더(210, 220, 230)의 로딩 완료 이벤트를 대기할 수 있다. 디스패처가 로딩 완료 이벤트를 대기하 는 중에는 슬립(sleep) 상태일 수 있으며, 다른 모듈 로더의 실행에 거의 영향을 주지 않을 수 있다. 동작 611에서 디스패처는 적어도 하나의 모듈 로더로부터 모듈 로딩 완료 이벤트를 수신할 수 있다. 동작 613에서 디스패처는 메모리에 저장된 모듈 정보 테이블을 업데이트할 수 있다. 디스패처는 모듈 정보 테이블에서, 완료된 모듈의 상태를 로딩 완료 상태로 변경하고, 로딩 완료된 모듈에 대하여 의존성을 가지 고 있는 모듈의 의존성 리스트에서 로딩 완료된 모듈에 대한 의존성을 해소(clear)된 상태로 변경함으로써 모듈 정보 테이블을 업데이트할 수 있다. 일 실시예에 따라 전자 장치의 메모리는 모듈 정보 테이블을 저장할 수 있 으며, 모듈 정보 테이블의 형태는 다양할 수 있으며 적어도 모듈의 로딩 상태와 의존성에 대한 정보를 포함할 수 있다. 동작 613를 완료한 후, 디스패처는 다시 동작 601로 돌아갈 수 있다. 동작 601에서 디스패처는 모든 모듈의 로딩이 완료되었는지 여부를 판단하여, 모든 모듈의 로딩이 완료되었다고 판단되는 경우, 동작 615에서 모듈 로더들(210, 220, 230)의 큐(211, 221, 231)에 종료 시그널을 인큐할 수 있다. 이하, 도 7의 순서도을 참조하여 모듈 로더(210, 220, 230)의 동작에 대하여 설명한다. 도 7의 순서도 는 도 2의 복수의 모듈 로더(210, 220, 230) 중 어느 하나의 모듈 로더의 동작을 나타낸 순서도일 수 있다. 이하, 설명의 편의를 위해 도 7의 순서도가 제1 모듈 로더(예: 도 2의 모듈 로더/0)의 동작임 을 가정하여 설명한다. 도 2 및 도 7을 참조하면, 동작 701에서, 제1 모듈 로더는 디스패처로부터 모듈이 전달되어 큐에 인큐되기 를 대기할 수 있다. 이때, 제1 모듈 로더는 아이들(idle) 상태일 수 있다. 동작 703에서, 제1 모듈 로더는 모듈 로더의 큐에 인큐가 발생함에 따라, 로딩 종료 시그널이 인큐되었는지 판 단할 수 있다. 로딩 종료 시그널이란 모든 모듈이 로딩 완료되었을 때 디스 패처가 모든 모듈 로더들에게 전달하는 시그널일 수 있다. 제1 모듈 로더는 동작 703에서 로딩 종료 시그널이 인큐되었음을 식별함에 따라 프로세스를 종료할 수 있다. 제1 모듈 로더는 동작 703에서 로딩 종료 시그널이 인큐된 것이 아님을 식별함에 따라, 동작 705에서, 제1 모듈 로더의 큐가 비어있는지 여부를 판단할 수 있다. 제1 모듈 로더는 동작 705에서 큐이 비어있지 않고 모듈이 적재되어 있음을 식별함에 따라, 동작 707에서 모듈 의 로딩을 수행할 수 있다. 동작 709에서, 제1 모듈 로더는 모듈의 로딩을 완료한 후, 디스패처에게 로딩 완료 이벤트를 전달할 수 있 다. 로딩 완료 이벤트를 전달한 제1 모듈 로더는 다시 동작 705로 돌아가 큐가 비어있는지 여부를 판단할 수 있 다. 제1 모듈 로더는 동작 705에서 큐가 비어있음을 식별함에 따라, 동작 711에서 제1 모듈 로더는 제2 활동 상태인 다른 모듈 로더(예: 도 2의 모듈 로더/1 및/또는 모듈 로더/N)가 있는지 판단할 수 있다. 일 실시예 에 따라 모듈 로더의 상태는 다음 [표 7]과 같이 구분할 수 있다. 일 실시예에 따라 제1 모듈 로더는, 모듈 로 더의 큐에 적재되어 로딩 대기 중인 모듈도 있고 로딩 실행 중인 모듈도 있는 제2 모듈 로더를 제2 활동 상태인 모듈 로더라고 식별할 수 있다. 일 실시예에 따라 동작 711을 수행하는 제1 모듈 로더는 모듈 로더의 큐에도 모 듈이 적재되어 있지 않고, 로딩 수행 중인 모듈도 없는 제1 휴식 상태일 수 있다. 표 7 제1 모듈 로더은 제2 활동 상태인 제2 모듈 로더가 존재 함을 식별함에 따라, 동작 713에서, 제1 모듈 로더는 제2 모듈 로더의 큐에 적재되어 있는 모듈을 자신의 큐로 가져올(pulling) 수 있다. 실시예들에 따라 제1 모듈 로더는 제2 모듈 로더의 큐에 적재되어 있는 모든 모듈을 자신의 큐로 가져올 수도 있고, 하나의 모듈만 자신의 큐로 가져올 수도 있다. 일 실시예에 따라 제2 활동 상태인 모듈 로더가 둘 이상 존재하는 경우, 제1 모듈 로더는 제2 활동 상태인 복수 의 모듈 로더들 중 우선 순위가 가장 낮은 모듈 로더의 모듈을 가져올 수 있다. 동작 711에서 제1 모듈 로더가 제2 활동 상태인 다른 모듈 로더가 없다고 판단함에 따라, 동작 715에서 제1 활 동 상태인 모듈 로더가 있는지 판단할 수 있다. 일 실시예에 따라 제1 모듈 로더는 모듈 로더의 큐에 적재된 모 듈은 없이 로딩을 실행 중이 모듈만 있는 모듈 로더를 제1 활동 상태의 모듈 로더로 식별할 수 있다. 동작 715에서 제1 활동 상태인 모듈 로더가 없다고 판단함에 따라, 제1 모듈 로더는 동작 701로 돌아가 디스패 처로부터 모듈이 전달되어 큐에 인큐되기를 대기할 수 있다. 동작 715에서 제1 모듈 로더가 제1 활동 상태인 모듈 로더를 적어도 하나 식별함에 따라, 동작 717에서 제1 모 듈 로더는 제1 활동 상태인 적어도 하나의 모듈 로더 중 가장 우선 순위가 낮은 제3 모듈 로더를 식별할 수 있 다. 동작 719에서, 제1 모듈 로더는 제3 모듈 로더의 우선 순위가 자기의 우선 순위 보다 낮은지 판단할 수 있다. 동작 719에서 제1 모듈 로더가 제3 모듈 로더의 우선 순위가 자기의 우선 순위보다 높거나 같다고 판단함에 따 라, 제1 모듈 로더는 동작 701로 돌아가 디스패처로부터 모듈이 전달되어 큐에 인큐되기를 대기할 수 있다. 동작 719에서 제1 모듈 로더가 제3 모듈 로더의 우선 순위가 자기의 우선 순위보다 낮다고 판단함에 따라, 동작 721에서 제1 모듈 로더는 제3 모듈 로더가 로딩 중인 모듈을 가져와서 자신이 로딩을 수행할 수 있다. 앞서 도 6 및 도 7을 참조하여 설명한 실시예는 모듈 로더의 판단으로 모듈 로더가 직접 다른 모듈 로더의 모듈 을 가져오는 점(재분배하는 점)에서 도 3 및 도 4를 참조하여 설명한 실시예와 차이가 있다. 재분배를 시도하는 모듈 로더는 제1 휴식 상태일 수 있으며, 제1 휴식 상태의 모듈 로더는 모듈 로더의 큐에 모듈이 적재되었으나 아직 모듈의 로딩 실행 전인 상태인 제2 휴식 상태의 모듈 로더를 대상으로는 아무런 동작을 수행하지 않을 수 있다. 본 개시의 일 실시예에 따른 전자 장치는, 모듈 로더들의 성능(우선 순위) 및 현재 상태(휴식 상태/활동 상태) 를 고려하여 모듈을 분배 및 재분배함으로써, 의존성을 가진 복수의 모듈들을 의존성에 문제가 없으면서도 병렬 적으로 로딩을 수행하여 로딩 시간을 단축하고 하드웨어 자원을 최적으로 활용하여 모듈 로딩의 성능을 극대화 할 수 있다. 이하, 도 8을 참고하여, 일 실시예에 따른 전자 장치의 동작에 대하여 예를 들어 자세히 설명한다. 도 8은 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 도면이다. 도 8은 전자 장치의 부팅(booting) 프로 세스에서 모듈 로더의 동작을 타임 라인에 따라 나타낸 도면일 수 있다. 도 8의 제1 표 및 제2 표의 가로축은 시간의 흐름을 의미할 수 있다. 도 8을 참조하여 설명할 실시예에서는, 2개 이상의 복수의 코어(core)들을 가진 프로세서(예: 도 1의 프로세서 )를 포함하는 전자 장치(예: 도 1의 전자 장치)에 있어서, 선택된 2개의 코어들 각각에 모듈 로더/0 과 모듈 로더/1이 할당된 경우를 가정하여 설명한다. 전자 장치의 메모리는 하기 [표 8]와 같은 모듈 정보 테이블을 저장할 수 있다. 실시예들에 따라 하기 [표 8]에 서 워크로드(workload)는 전자 장치가 미리 측정하여 저장하고 있는 정보일 수도 있고, 이전 모듈 로딩을 수행 하면서 측정하여 저장하고 있는 정보일 수도 있다. 표 8"}
{"patent_id": "10-2021-0176692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 8, "content": "도 8을 참조하면, t=0에서 디스패처는 의존성이 해소된 모듈 a 및 모듈 c를 디스패처의 큐에 적재할 수 있다. 디스패처는 모듈 로더들의 워크로드의 불균형이 가장 적은 조합을 판단하여 디스패처의 큐에 적재된 모듈들을 모듈 로더들에게 분배할 수 있다. 일 실시예에 따라 워크로드 불균형을 판단할 때, 모듈 로더들의 우선 순위가 다른 경우 우선 순위도 고려하여 판단할 수 있다. 이하의 설명에서는 모듈 로더들의 우선 순위가 동일한 경우를 가정하여 설명한다. 모듈 로더/0 및 모듈 로더/1의 누적 워크로드는 모두 0이므로, 디스패처는 임의의 순서대로 모듈 로더/0에게 모 듈 a를, 모듈 로더/1에에 모듈 c를 분배할 수 있다. 모듈 a를 분배받은 모듈 로더/0의 누적 워크로드는 3이되고, 모듈 c를 분배받은 모듈 로더/1의 누적 워크로드는 7이될 수 있다. 모듈 a의 워크로드만큼 경과한 t=3시점에서, 모듈 로더/0이 모듈 a의 로딩을 완료할 수 있다. 디스패처는 모듈 정보 테이블에서 모듈 a의 상태를 T로 갱신하고, 의존성 리스트에서 모듈 a에 대한 의존성이 해소(clear)되었음 을 표시할 수 있다. 이하, 앞서 설명한 실시예와 동일한 구성에 대한 설명은 생략한다. 디스패처는 모듈 a에 대한 의존성이 모두 해소된 모듈 b 및 모듈 d를 디스패처의 큐에 적재할 수 있다. 모듈 b 의 워크로드는 3이고, 모듈 d의 워크로드는 5일 수 있다. 디스패처는 모듈 로더들의 워크로더의 불균형이 가장 적은 조합을 판단할 수 있다. 모듈 로더/0의 누적 워크로 드는 3이고 모듈 로더/1의 누적 워크로드는 5이므로, 디스패처는 워크로드가 3인 모듈 b를 모듈 로더/1에 분배 하고, 워크로드가 5인 모듈 d를 모듈 로더/0에 분배할 수 있다. 모듈 d를 분배받은 모듈 로더/0의 누적 워크로드는 8이되고, 모듈 b를 분배받은 모듈 로더/1의 누적 워크로드는 10이될 수 있다. t=0으로부터 모듈 c의 워크로드만큼 경과한 t=7시점에서, 모듈 로더/1의 모듈 c에 대한 로딩이 완료될 수 있다. 디스패처는 모듈 정보 테이블에서 모듈 c의 상태를 T로 갱신하고, 의존성 리스트에서 모듈 c에 대한 의존성이 해소되었음을 표시할 수 있다. 디스패처는 모듈 c에 대한 의존성이 모두 해소된 모듈 f를 디스패처의 큐에 적재할 수 있다. 모듈 f의 워크로드 는 4일 수 있다. 디스패처는 모듈 로더들의 워크로더의 불균형이 가장 적은 조합을 판단할 수 있다. 모듈 로더/0의 누적 워크로 드는 8이고 모듈 로더/1의 누적 워크로드는 10이므로, 디스패처는 모듈 f를 누적 워크로드가 더 작은 모듈 로더 /0에 분배할 수 있다. 모듈 f를 분배받은 모듈 로더/0의 누적 워크로드는 12가 되고, 모듈 로더/1의 누적 워크로드는 그대로 10일 수 있다. t=10 시점에 모듈 b의 로딩이 종료되고, t=12시점에 모듈 f의 로딩이 종료될 수 있다. 디스패처는 모든 모듈의 로딩이 완료된 상태가 되었음을 확인함에 따라 전체 모듈 로더들에게 로딩 완료 이벤트를 전달하고 디스패처의 동작을 종료할 수 있다. 모듈 로더/0 및 모듈 로더/1도 로딩 완료 이벤트를 수신함에 따라 동작을 종료할 수 있 고, 부팅 프로세는 종료될 수 있다. 앞서 도 8을 참조하여 설명한 실시예는, 의존성이 해소되어 디스패처의 큐에 적재된 모듈을 디스패처가 분배함 에 있어, 모듈의 워크로드를 고려하여 모듈 로더들 간의 누적 워크로드(워크로드의 총 합)의 불균형을 최소화하 는 조합으로 모듈을 분배하는 점에서 도 3 및 도 4를 참조하여 설명한 실시예와 차이가 있다. 본 개시의 일 실시예에 따른 전자 장치는, 모듈 로더들의 누적 워크로드의 불균형을 최소화하는 조합으로 모듈 을 분배함으로써, 의존성을 가진 복수의 모듈들을 의존성에 문제가 없으면서도 병렬적으로 로딩을 수행하여 로 딩 시간을 단축하고 하드웨어 자원을 최적으로 활용하여 모듈 로딩의 성능을 극대화할 수 있다. 본 문서에 개시되는 일 실시 예에 따른 전자 장치는, 복수의 코어들을 포함하는 프로세서, 및 상기 프로세서와 전기적으로 연결되고, 인스트럭션들을 저장하는 메모리를 포함하고, 상기 인스트럭션들은, 실행 시에, 디스패처 (dispatcher)가 상기 전자 장치의 운영 체제(operating system)의 부팅(booting)을 위한 복수의 모듈들의 로딩 이 완료되었는지 여부를 판단하고, 상기 복수의 모듈들 중에서 로딩이 미완료된 모듈이 존재함을 판단함에 따라, 상기 디스패처가, 상기 메모리에 저장되어 있는 모듈 정보 테이블을 기반으로 의존성이 해소(clear)된 적 어도 하나의 모듈을 식별하며, 상기 적어도 하나의 모듈이 식별됨에 따라, 상기 디스패처가, 상기 메모리에 저 장되어 있는 코어 정보 테이블을 기반으로 상기 복수의 코어들 중에서 2이상의 코어들에 각각 할당된 모듈 로더 (module loder)의 상태(state) 정보와 우선 순위(priority) 정보 중 적어도 하나를 식별하고, 상기 식별한 정보 를 기반으로, 상기 디스패처가 상기 코어들이 각각할당된 2 이상의 모듈 로더들 중 적어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장한다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 디스패처가, 상기 적어도 하나의 모듈 로더로부터 로딩 완료 이벤트를 수신함에 따라, 상기 모듈 정보 테이블을 업데이트 하도록, 상기 프로세서가 제어하도록 하 는 인스트럭션들을 저장할 수 있다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 모듈 로더들 중 아이들(idle) 상태인 적어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들 을 저장할 수 있다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 모듈 로더들 중 상기 아이들 상태인 복수의 모듈 로 더들이 식별되는 경우, 상기 복수의 모듈 로더들 중 상기 우선 순위가 높은 순서대로 상기 적어도 하나의 모듈 을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장할 수 있다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 디스패처가, 상기 상태 정보를 기반으로 상기 모듈 로더들이 아이들 상태인지 여부를 우선적으로 고려하고, 다음으로 상기 우선 순위 정보를 기반으로 우선 순위가 높은지 여부를 고려하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션 들을 저장할 수 있다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 아이들 상태인 제1 모듈 로더가, 모듈 로더의 큐에 적재되어 로딩 대기 중인 모듈도 있고 로딩 실행 중인 모듈도 있는 제2 활동 상태인 제2 모듈 로더를 식별하도 록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장할 수 있다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 제2 모듈 로더가 식별됨에 따라, 상기 제1 모듈 로 더가 상기 제2 모듈 로더의 큐에 적재되어 있는 모듈을 상기 제1 모듈 로더의 큐로 가져오도록(pulling), 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장할 수 있다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 제2 모듈 로더가 식별되지 않음에 따라, 상기 제1 모듈 로더가 모듈 로더의 큐에 적재된 모듈은 없이 로딩을 실행 중이 모듈만 있는 제1 활동 상태인 제3 모듈 로 더를 식별하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장할 수 있다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 제3 모듈 로더가 식별됨에 따라, 상기 제1 모듈 로 더가, 상기 제3 모듈 로더의 우선 순위가 상기 제1 모듈 로더의 우선 순위보다 낮은지 여부를 판단하며, 상기 제3 모듈 로더의 우선 순위가 상기 제1 모듈 로더의 우선 순위보다 낮음을 식별함에 따라, 상기 제1 모듈 로더 가 상기 제3 모듈 로더가 로딩 중인 모듈을 상기 제1 모듈 로더의 큐로 가져오도록(pulling), 상기 프로세서가제어하도록 하는 인스트럭션들을 저장할 수 있다. 본 문서에 개시에 따르면, 상기 메모리는, 실행 시에, 상기 디스패처가, 상기 모듈 로더들의 누적 워크로드 (workload)를 고려하여, 각 모듈 로더의 누적 워크로드 간의 차이가 최소화되도록 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서가 제어하도록 하는 인스트럭션들을 저장할 수 있다. 본 문서에 개시되는 일 실시 예에 따른 복수의 코어들을 포함하는 프로세서를 포함하는 전자 장치의 동작 방법 은, 디스패처(dispatcher)가 상기 전자 장치의 운영 체제(operating system)의 부팅(booting)을 위한 복수의 모듈들의 로딩이 완료되었는지 여부를 판단하고, 상기 복수의 모듈들 중에서 로딩이 미완료된 모듈이 존재함을 판단함에 따라, 상기 디스패처가, 상기 전자 장치의 메모리에 저장되어 있는 모듈 정보 테이블을 기반으로 의존 성이 해소(clear)된 적어도 하나의 모듈을 식별하며, 상기 적어도 하나의 모듈이 식별됨에 따라, 상기 디스패처 가, 상기 메모리에 저장되어 있는 코어 정보 테이블을 기반으로 상기 복수의 코어들 중에서 2이상의 코어들에 각각 할당된 모듈 로더(module loder)의 상태(state) 정보와 우선 순위(priority) 정보 중 적어도 하나를 식별 하고, 상기 식별한 정보를 기반으로, 상기 디스패처가 상기 코어들이 각각할당된 2 이상의 모듈 로더들 중 적어 도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록; 상기 프로세서를 제어한다. 본 문서에 개시에 따르면, 상기 디스패처가, 상기 적어도 하나의 모듈 로더로부터 로딩 완료 이벤트를 수신함에 따라, 상기 모듈 정보 테이블을 업데이트 하도록, 상기 프로세서를 제어할 수 있다. 본 문서에 개시에 따르면, 상기 모듈 로더들 중 아이들(idle) 상태인 적어도 하나의 모듈 로더를 선택하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서를 제어할 수 있다. 본 문서에 개시에 따르면, 상기 모듈 로더들 중 상기 아이들 상태인 복수의 모듈 로더들이 식별되는 경우, 상기 복수의 모듈 로더들 중 상기 우선 순위가 높은 순서대로 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서 를 제어할 수 있다. 본 문서에 개시에 따르면, 상기 디스패처가, 상기 상태 정보를 기반으로 상기 모듈 로더들이 아이들 상태인지 여부를 우선적으로 고려하고, 다음으로 상기 우선 순위 정보를 기반으로 우선 순위가 높은지 여부를 고려하여 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서를 제어할 수 있다. 본 문서에 개시에 따르면, 상기 아이들 상태인 제1 모듈 로더가, 모듈 로더의 큐에 적재되어 로딩 대기 중인 모 듈도 있고 로딩 실행 중인 모듈도 있는 제2 활동 상태인 제2 모듈 로더를 식별하도록, 상기 프로세서를 제어할 수 있다. 본 문서에 개시에 따르면, 상기 제2 모듈 로더가 식별됨에 따라, 상기 제1 모듈 로더가 상기 제2 모듈 로더의 큐에 적재되어 있는 모듈을 상기 제1 모듈 로더의 큐로 가져오도록(pulling), 상기 프로세서를 제어할 수 있다. 본 문서에 개시에 따르면, 상기 제2 모듈 로더가 식별되지 않음에 따라, 상기 제1 모듈 로더가 모듈 로더의 큐 에 적재된 모듈은 없이 로딩을 실행 중이 모듈만 있는 제1 활동 상태인 제3 모듈 로더를 식별하도록, 상기 프로 세서를 제어할 수 있다. 본 문서에 개시에 따르면, 상기 제3 모듈 로더가 식별됨에 따라, 상기 제1 모듈 로더가, 상기 제3 모듈 로더의 우선 순위가 상기 제1 모듈 로더의 우선 순위보다 낮은지 여부를 판단하며, 상기 제3 모듈 로더의 우선 순위가 상기 제1 모듈 로더의 우선 순위보다 낮음을 식별함에 따라, 상기 제1 모듈 로더가 상기 제3 모듈 로더가 로딩 중인 모듈을 상기 제1 모듈 로더의 큐로 가져오도록(pulling), 상기 프로세서를 제어할 수 있다. 본 문서에 개시에 따르면, 상기 디스패처가, 상기 모듈 로더들의 누적 워크로드(workload)를 고려하여, 각 모듈 로더의 누적 워크로드 간의 차이가 최소화되도록 상기 적어도 하나의 모듈을 분배하도록, 상기 프로세서를 제어 할 수 있다. 도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8"}
{"patent_id": "10-2021-0176692", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은, 다양한 실시 예들에 따른, 네트워크 환경 내의 전자 장치의 블럭도이다. 도 2는 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 도면이다. 도 3은 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 순서도이다. 도 4는 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 순서도이다. 도 5는 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 도면이다. 도 6은 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 순서도이다. 도 7은 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 순서도이다. 도 8은 일 실시예에 따른 전자 장치의 동작을 설명하기 위한 도면이다. 도면의 설명과 관련하여, 동일 또는 유사한 구성요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있다."}
