{"patent_id": "10-2022-7041221", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0003042", "출원번호": "10-2022-7041221", "발명의 명칭": "디지털 양식들을 동적으로 정의하기 위한 시스템 및 방법", "출원인": "미라타 소프트웨어, 엘엘씨", "발명자": "파둘라, 리차드"}}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "선언적 정의 언어를 이용해서 프레젠테이션 렌더러를 구동하여 양식을 렌더링하기 위한 방법으로서,선언적 정의 언어를 이용하여 양식을 정의하는 단계 - 상기 선언적 정의 언어는 상기 양식을 그것의 필드들 및그것의 프레젠테이션에 관하여 정의함 -;상기 선언적 정의 언어로부터 런-타임 객체를 생성하는 단계;양식 데이터를 입력하는 단계;상기 양식 데이터에 대한 계산을 평가하고 결과를 반환하는 단계; 및프레젠테이션 렌더러를 이용하여 상기 양식을 렌더링하는 단계 - 상기 프레젠테이션 렌더러는 상기 런-타임 객체 및 상기 양식 데이터를 이용함 -를 포함하는, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 필드들은 스칼라 필드들인, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 필드들은 그룹 필드들인, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 필드들은 어레이 필드들인, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 선언적 정의 언어를 로딩하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,변경 브로드캐스터로 상기 양식 데이터를 모니터링하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,양식 컨트롤들의 레이아웃을 관리하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,양식의 외관을 관리하는 단계를 더 포함하는, 방법.공개특허 10-2023-0003042-3-청구항 9 제1항에 있어서,계산 학습 엔진으로 로직 패러다임들을 생성하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 선언적 정의 언어를 이용하여 작업흐름을 정의하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "선언적 정의 언어를 이용해서 프레젠테이션 렌더러를 구동하여 양식을 렌더링하기 위한 시스템으로서,선언적 정의 언어를 이용하여 양식을 정의하기 위한 명령어들을 실행하기 위한 프로세서 - 상기 선언적 정의 언어는 상기 양식을 필드 및 프레젠테이션에 관하여 정의하고, 상기 프로세서는 상기 선언적 정의 언어로부터 런-타임 객체를 생성함 -;양식 데이터를 입력하기 위한 사용자 인터페이스 툴 - 상기 프로세서는 상기 양식 데이터에 대한 계산을 평가하고 결과를 반환하기 위한 명령어들을 실행함 -; 및상기 양식을 렌더링하기 위한 프레젠테이션 렌더러 - 상기 프레젠테이션 렌더러는 상기 런-타임 객체 및 상기양식 데이터를 이용함 -를 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 필드는 스칼라 필드인, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서,상기 필드는 그룹 필드인, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제11항에 있어서,상기 필드는 어레이 필드인, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서,상기 프로세서는 상기 선언적 정의 언어를 로딩하기 위한 명령어들을 실행하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서,상기 양식 데이터를 모니터링하기 위한 변경 브로드캐스터 수단을 더 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제11항에 있어서,레이아웃 관리 툴을 더 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "공개특허 10-2023-0003042-4-제11항에 있어서,스타일 관리 툴을 더 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제11항에 있어서,계산 학습 엔진을 더 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제11항에 있어서,상기 선언적 정의 언어를 이용하여 작업흐름을 정의하기 위한 작업흐름 정의 수단을 더 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "양식들 및 작업흐름들을 동적으로 정의 및 생성하기 위한 시스템으로서,양식을 동적으로 정의하기 위한 사용자로부터의 명령어들을 수신하기 위한 제1 입력 수단;상기 명령어들을 수신하기 위해 상기 제1 입력 수단에 결합되어, 상기 명령어들에 기초하여 선언적 정의 언어를이용하여 상기 양식을 정의하기 위한 양식 정의 수단 - 상기 선언적 정의 언어는 상기 양식의 필드 및 프레젠테이션을 정의함 -;상기 양식 정의 수단에 결합되어, 상기 선언적 정의 언어로부터 런-타임 객체를 생성하기 위한 생성기; 및상기 양식을 저장하기 위한 저장 디바이스를 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제21항에 있어서,네트워크를 통해 상기 저장 디바이스로부터 상기 양식을 검색하기 위한 휴대용 디바이스;상기 휴대용 디바이스에 결합되어, 제1 사용자가 상기 양식에 데이터를 입력할 수 있게 하는 제2 입력 수단;상기 양식에 입력된 상기 데이터에 응답하여, 미리 정의된 계산들을 수행하고, 상기 양식 데이터를 평가하고,결과를 반환하기 위한 계산 수단; 및상기 양식을 렌더링하기 위한 프레젠테이션 렌더러 - 상기 프레젠테이션 렌더러는 상기 휴대용 디바이스 상에상기 양식을 제시하고, 상기 런-타임 객체 및 상기 양식 데이터를 이용함 -를 더 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제22항에 있어서,상기 제1 입력 수단으로부터의 명령어들에 기초하여 작업흐름을 정의하기 위한 작업흐름 정의 수단을 더 포함하는, 시스템."}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "사용자의 입력 및 설계에 기초하여 양식들 및 작업흐름들을 동적으로 생성하고, 정의하고, 커스터마이즈하기 위 한, 그리고 다양한 필드-포스 산업들 등에 걸쳐 실시간 인공 지능 및 머신 학습 처리를 통해 콘텐츠 관리를 용이 하게 하기 위한 시스템 및 방법. 시스템 및 방법은 웹 브라우저들, 모바일 디바이스들, 스마트폰들 및 태블릿들 을 포함하는 매우 다양한 물리적 디바이스들 상에서 이용될 수 있고, 소프트웨어 애플리케이션들에 임베딩될 수 있다. 예시적인 시스템 및 방법은 백엔드 시스템들을 업데이트하기 위해 양식을 설계, 라우팅, 작성, 및 기록하 는 것을 가능하게 하고, 복잡한 프로세스들을 위한 복잡한 기업급 양식들 및 작업흐름들을 설계할 수 있는 사용 자의 수를 극적으로 확장함으로써, 비용을 낮추고 채택을 가속한다."}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 특허 출원은 2020년 4월 28일자로 출원된 미국 가출원 제63/016,587호의 이익을 주장하며, 이 가출원은 본 명세서에 참고로 포함된다. 본 발명의 분야는 일반적으로, 실시간으로 데이터를 수집 및 입력하는 것, 데이터를 처리 및 분석하는 것, 웹 브라우저들 및 모바일 디바이스들을 포함하는 매우 다양한 디바이스들 상에서 데이터를 동화(assimilating) 및 디스플레이하는 것, 및 이들 방법들 및 시스템들을 다른 소프트웨어 애플리케이션들에 임베딩하는 것을 포함하는 콘텐츠 관리를 용이하게 하기 위해, 사용자의 입력에 기초하여 양식들 및 작업흐름들을 동적으로 정의 및 생 성하는 방법들 및 시스템들에 관한 것이다. 더욱이, 본 발명은 다양한 목적들을 효율적으로 달성하기 위해 인 공 지능 처리를 통해 데이터 콘텐츠를 관리 및 동화하기 위한 시스템들 및 방법들에 관한 것이다."}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "오늘날, 필드 포스 산업들(field force industries)(예를 들어, 필드 세일즈(field sales), 필드 서비스들 (field services), 검사 및 보고 등)에서의 대부분의 데이터는 종이-기반 양식들(paper-based forms)로 배포 및 캡처되며, 그 다음, 종이-기반 양식들은 사무실들 및 필드들 둘 다의 다양한 이해 관계자들(stakeholders) 사이에서 물리적으로 라우팅되고, 백엔드 시스템들(back-end systems)에 대한 업데이트들은 수동 프로세스이다. 이러한 양식들을 디지털화하고, 이러한 양식들을 이해 관계자들 사이에서 자동으로 전자적으로 라우팅하고, 백 엔드 시스템들을 자동으로 업데이트하는 것에 상당한 비즈니스 이익이 있다. 그러한 양식들을 개발하려는 많은 시도들이 있었지만, 현재의 접근법들은 수동의 복잡한 코딩에 의지하기 전에 행해질 수 있는 것과 관련하여 제 한된다. 현재의 접근법들은 또한 사용자의 요구들보다는 브라우저(예를 들어, 웹 브라우저)의 기술적 특징들에 기초하여 설계된다. 이러한 접근법들은 하이퍼텍스트 마크업 언어(hypertext markup language)(HTML)와 같은 확장가능 마크업 언어(extensible-mark-up-language)와 캐스케이딩 스타일 시트(cascading style sheets)(CS S)와 같은 스타일 시트 언어(style sheet language)의 조합을 이용하며, 복잡한 논리들이 관련될 때, 이러한 복 잡한 논리들을 자바스크립트(JavaScript)로 코딩해야 하며, 이는 추가적인 기술들을 필요로 하고, 따라서 누가 양식들을 생성하고 설계할 수 있는지를 제한한다. 예를 들어, 종래의 접근법들이 모바일 디바이스들에 배포하기 위한 모바일-양식 애플리케이션들을 커스터마이즈 하기 위한 시스템들 및 방법들을 기술하는 미국 특허 제9,836,446호, 제10,394,948호 및 제10,585,982호에 기술 되어 있다. 이들 참조문헌들은 본 기술 분야에서 잘 알려져 있고 종래의 것이지만 제한되어 있고 유연성이 없 는 디지털 양식들과 함께 이용하기 위한 XML(extensible markup language) 스키마의 이용을 기술하고 있다. 특 히, 이러한 참조문헌들은 디지털 양식들의 생성을 위해 XForms - 계산들을 위해 XPath를 이용함 - 를 이용하는 것을 기술한다. 불행하게도, XForms는 데이터 양식들과 함께 이용되도록 설계되지 않고, 또한, 이 참조문헌들 에 개시된 데이터 양식들은 전문화된 계산 엔진을 특징으로 하지 않고 동적 스타일링에 대한 지원을 갖지 않는 다. 이러한 종래의 접근법들은 또한 컨트롤들의 기본 그룹화 이외에 양식의 레이아웃에 대한 미세 조정된 컨트 롤을 제공하지 않는다. HTML 및 CSS의 조합을 이용하여 양식의 레이아웃을 파악하기 위해 브라우저에 의존하는 대신에, 열(column) 및 행(row) 섹션들, 필드 높이 및 폭, 마진들(margins), 및 탭들(tabs) 및 접을 수 있는 영역들과 같은 다른 동적 특징들을 포함하는, 레이아웃 컨트롤을 위한 특징들의 더 풍부한 세트에 대한 필요성 이 존재한다. XForms가 XML-기반 데이터와 함께 작업하지만, 대부분의 현대의 웹 API들은 JSON을 이용하는데, 그 이유는 그것이 더 콤팩트하고, 파싱하기 더 쉽고, 페이로드 전달에서 가능하기 때문이다. 따라서, XForms 설계는 그의 적응성을 심각하게 제한한다. 따라서, JSON 및 XML을 포함하는 다양한 포맷팅에 걸쳐 작업하고, 본 명세서에서 추가로 설명되는 바와 같이 동적 양식들의 생성을 허용하도록 설계자들을 형성하기 위해 상당한 유연성을 제공할 필요가 있다. 따라서, 다수의 컴퓨팅 플랫폼들 - 백엔드 시스템들을 업데이트하기 위해 그러한 양식들의 데이터를 이용할 능 력을 가짐 - 에 걸쳐 디지털 양식들을 설계, 라우팅, 작성(filling out) 및 기록(recording)하기 위한 시스템 및 방법을 갖는 것이 바람직할 것이며, 이는 코딩에 숙련되지 않은 자에 의해 만들어진 양식들이 그럼에도 불구 하고 개개의 요구에 맞게 특별히 설계된 정교한 논리로 양식들을 설계할 수 있게 한다. 복잡한 프로세스들을 위한 복잡한 기업급 디지털 양식들(enterprise-grade digital forms) 및 작업흐름을 설계할 수 있는 사용자들의 수를 극적으로 확장하여, 비용을 낮추고 채택을 가속화하는 것이 더 바람직하다."}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "요약하면, 본 발명은 일반적으로, 실시간으로 데이터를 수집 및 입력하는 것, 데이터를 처리 및 분석하는 것, 웹 브라우저들 및 모바일 디바이스들을 포함하는 다양한 디바이스들 상에서 데이터를 동화 및 디스플레이하는 것, 및 이들 방법들 및 시스템들을 다른 소프트웨어 애플리케이션들에 임베딩하는 것을 포함하는 콘텐츠 관리를 용이하게 하기 위해, 사용자의 입력에 기초하여 양식들 및 작업흐름들을 동적으로 생성하는 방법들 및 시스템들 에 관한 것이다. 또한, 본 발명은 다양한 목적들을 효율적으로 달성하기 위해 인공 지능 처리를 통해 데이터 콘텐츠를 관리 및 동화하기 위한 시스템들 및 방법들에 관한 것이다. 본 발명의 추가의 목적은 선언적 정의 언어(declarative definition language)를 이용해서 프레젠테이션 렌더러 (presentation renderer)를 구동하여 양식을 렌더링하기 위한 방법을 제공하는 것이다. 방법은 선언적 정의 언 어를 이용하여 양식을 정의하는 단계 - 선언적 정의 언어는 양식을 그것의 필드들 및 그것의 프레젠테이션에 관 하여 정의함 -, 선언적 정의 언어로부터 런-타임 객체(run-time object)를 생성하는 단계, 양식 데이터를 입력 하는 단계, 양식 데이터에 대한 계산을 평가하고 결과를 반환하는 단계, 및 프레젠테이션 렌더러를 이용하여 양 식을 렌더링하는 단계 - 프레젠테이션 렌더러는 런-타임 객체 및 양식 데이터를 이용함 - 를 포함한다. 본 발명의 또 다른 목적은 선언적 정의 언어를 이용해서 프레젠테이션 렌더러를 구동하여 양식을 렌더링하기 위 한 시스템을 제공하는 것이다. 시스템은 선언적 정의 언어를 이용하여 정의된 양식 - 선언적 정의 언어는 양식 을 그것의 필드들 및 그것의 프레젠테이션에 관하여 정의함 -, 선언적 정의 언어로부터 생성된 런-타임 객체, 양식 데이터, 양식 데이터에 대해 평가된 계산으로부터의 반환된 결과, 및 양식을 렌더링하기 위한 프레젠테이 션 렌더러 - 프레젠테이션 렌더러는 런-타임 객체 및 양식 데이터를 이용함 - 를 포함한다. 본 명세서에 개시된 시스템들 및/또는 방법들의 이들 및 다른 목적들, 특징들 및 특성들은 물론, 동작의 방법들 및 구조의 관련 요소들의 기능들 및 부품들의 조합 및 제조의 경제성들은 첨부 도면들을 참조하여 아래의 설명 및 첨부된 청구항들을 고려할 때 더 명백해질 것이며, 이들 모두는 본 명세서의 일부를 형성하고, 참조 번호들 은 도면들에서 대응하는 부분들을 지정한다. 그러나, 도면들은 예시 및 설명의 목적을 위한 것일 뿐이며, 본 발명을 특정 실시예들로 제한하는 것을 의도하지 않는다는 것을 명확히 이해해야 한다. 본 명세서에서 이용될 때, 단수 형태(\"a\", \"an\" 및 \"the\")는 문맥상 명확하게 달리 지시하지 않는 한 복수의 지시 대상을 포함한다."}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명은 선언적 정의 언어를 이용하여 양식들을 동적으로 생성 및 저장하고, 양식들을 사용자에게 렌더링하고, 사용자가 양식들과 상호작용(예를 들어, 데이터를 입력)하는 것을 허용하고, 데이터가 도출 또는 검색되는 것을 허용하고, 데이터가 저장 및 분석되는 것을 허용하기 위한 시스템들 및 방법들에 관한 것이다. 본 명세서에서 설명되는 구현들은 이러한 특정 상세들 없이 또는 균등한 배열로 실시될 수 있다는 것을 본 기술 분야의 통상의 기술자들은 알 것이다. 다른 경우들에서, 본 발명의 구현들을 불필요하게 불명확하게 하지 않도 록, 잘 알려진 구조들 및 디바이스들은 블록도 형태로 도시된다. 도 1a는 컴퓨팅 디바이스가 네트워크를 통해 서버 상의 디지털 양식에 액세스할 수 있는, 본 발명의 실시예에 따른 시스템의 도면을 도시한다. 본 발명의 일 실시예에 따르면, 기업 시스템들(0a)은 네트워크(0d)를 통해 서버(0b)에 접속되어 있다. 이러한"}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "네트워크(0d)는, 인터넷을 통하는 것을 포함하여, 본 기술분야에 알려진 임의의 방식의 유선 또는 무선 접속일 수 있다는 것을 알 수 있다. 더욱이, 서버(0b)는 또한 네트워크(0e)를 통해, 본 발명의 시스템 및 방법을 구현 하기 위한 애플리케이션, 소프트웨어, 프로그램, 또는 다른 처리 디바이스들을 포함하는 컴퓨팅 디바이스들(0 c)에 접속된다. 일부 실시예들에서, 네트워크(0d) 및 네트워크(0e)는 동일한 네트워크이고, 기업 시스템들(0 a)은 서버(0b)의 일부이거나 서버(0b) 내의 컴포넌트일 수 있다. 서버(0b)는 4개의 별도의 컴포넌트들: 양식 처리 모듈(0f), 양식 저장 디바이스(0g), 양식 설계자 모듈(0i), 및 양식 보관소(0h)를 포함한다. 컴포넌트의 양식 처리(0f)는 선언적 정의 언어를 로딩하는 것, 백엔드 시스템들 을 업데이트하는 것, 및 인공 지능 또는 머신 학습 처리를 위한 동작들을 포함하지만 이에 제한되지 않는, 본 발명의 동작에 필요한 처리의 일부 또는 전부를 실행하는 하나 이상의 디바이스를 지칭한다. 양식 저장 디바이 스(0b) 컴포넌트는 본 발명에서 이용하기 위한 처리 명령어들, 선언적 정의 언어, 및 양식 데이터를 저장하는 하나 이상의 디바이스를 지칭한다. 양식 설계자 모듈(0i) 컴포넌트는 양식을 설계하는 사람이 어떠한 기본 프 로그래밍 언어도 알 필요가 없도록 양식 및/또는 작업흐름을 설계하여, 사람이 양식의 WYSIWYG 버전을 프리뷰 (preview)하고 편집하는 것을 허용하기 위한 것이다. 마지막으로, 양식 보관소(0h)는 본 시스템 및 방법에 의 해 이용하기 위한 데이터 및 정의들의 전부를 저장하는 클라우드-기반(cloud-based) 또는 구내(on-premises) 보 관소이다. 도 1b는 본 발명의 일 실시예의 다양한 모듈들의 도면을 제공한다. 또한, 본 발명의 일 실시예에 따르면, 양식 보관소 모듈(0j)은 시스템 및 방법에 의해 이용하기 위한 데이터 및 정의들 전부를 포함하고, 액세스를 허용하기 위해 REST-ful API를 노출시키는 클라우드-기반 또는 구내 보관소 이다. 양식 보관소 모듈(0j)은 양식 설계자 모듈(0k)에 접속되고, 양식 설계자 모듈(0k)은 REST-ful API를 이 용하여 양식 보관소 모듈(0j)에 액세스한다. 양식 보관소 모듈(0j)에 대한 모든 호출(call)들은 사용자 인증 및 허가를 통과한다. 양식 보관소 모듈(0j)은 어느 양식들이 어느 사용자들에게 할당되는지, 그에 따라, 어느 양식들을 사용자가 볼 것이고 작업할 것으로 예상되는지를 또한 제어한다. 양식 보관소 모듈(0j)은 양식들을 제로, 하나, 또는 더 많은 개별적인 사용자들뿐만 아니라, 제로, 하나, 또는 더 많은 사용자 그룹들에 할당할 수 있다. 감독관 사용자들(supervisor users)에게는 뷰잉(viewing) 또는 편집을 위해 그들이 감독하는 작업자 들에게 할당된 양식들에 대한 액세스가 주어질 수 있다. 양식 보관소 모듈(0j)은 또한, 빈번하게 판독되지만 덜 자주 기입될 것으로 예상되는 정의-관련 항목들을 포함한다. 양식 설계자 모듈(0k)은 양식 보관소 모듈(0j), 선언적 정의 모듈(0l), 선언적 정의 작업흐름 모듈(0m), 및 계 산 엔진 모듈(0n)에 접속되고, 양식 보관소 모듈(0j)에 액세스하기 위하여 REST-ful API를 이용한다. 양식 설 계자 모듈(0j)은, 양식을 설계하는 사람이 어떠한 기본 프로그래밍 언어도 알 필요가 없기 때문에, 그녀의 비지 니스의 동작들 및 프로세스들에 친숙한 사람이 양식들을 생성하도록 사용자-친화적으로 만들어진다. 양식 설계 자 모듈(0k)은 양식의 what-you-see-is-what-you-get 뷰를 제시하는 양식 편집기를 제공한다. 사용자는 필드들 을 추가 및 제거하고, 그들의 속성들을 변경할 수 있다. 일부 실시예들에서, 양식 설계자 모듈(0k)은 또한 작업흐름들을 이해 및 변경하기에 용이하도록 작업흐름들을 흐름도 또는 \"스윔-레인(swim-lane)\" 스타일 프로세스 로서 제시하는 그래픽 작업흐름 편집기를 제공한다. 양식 설계자 모듈(0k)은 또한 사용자가 다양한 스크린 크 기들 상에 나타나는 양식을 보고, 올바른 기능을 보장하기 위해 테스트 데이터를 입력하고, 작업흐름을 연습하 게 할 수 있다. 선언적 정의 모듈(0l)은 양식 설계자 모듈(0k), 계산 엔진 모듈(0n), 및 선언적 정의 로딩 모듈(0o)에 접속되고, 양식과 연관된 필드들(즉, 데이터 필드들)을 정의하고, 필드들이 다양한 컴퓨팅 디바이스들의 스크린 들 상에서 어떻게 디스플레이되어야 하는지를 정의한다. 예를 들어, 선언적 정의 모듈(0l)은 모바일 디바이스 의 스크린 또는 컴퓨터의 스크린 상에 양식과 연관된 필드들을 디스플레이하기 위한 명령어들을 포함한다. 양 식이 컴퓨팅 디바이스(예를 들어, 스마트폰, 태블릿, 랩톱, 또는 데스크톱) 상에 로딩될 때, 런타임 객체들이 생성되고 인스턴스 특정 데이터로 채워진다. 일부 실시예들에서, 양식은 필드들의 자동 채움(automatic population), 필드들의 가시성 및 외관의 제어, 필드들의 인에이블링 및 디스에이블링 등과 같은 계산들 및 조 건부 로직을 포함한다. 선언적 정의 모듈(0l)은 양식과 연관된 필드들 및 프레젠테이션에 기초하여 양식에 대 한 데이터 구조를 정의한다. 그러한 데이터 구조는 사용자에 대한 양식의 필드들 및 외관과 연관된 데이터가 별도로 핸들링되는 것을 허용함으로써, 규칙들 또는 코드가 기입되는 것을 요구하지 않으면서, 양식이 상이한 스크린 크기들 및 능력들, 종이 크기들, 포맷들 등으로 렌더링되는 것을 가능하게 한다. 선언적 정의 모듈(0 l)은 JSON 및 XML을 포함한 다양한 데이터 포맷들로 이용되도록 유연성이 있다. 선언적 정의 작업흐름 모듈(0m)은 양식 설계자 모듈(0k), 계산 엔진 모듈(0n), 및 선언적 정의 로딩 모듈(0o)에 접속되고, 그녀의 비즈니스의 동작들 및 프로세스들에 친숙한 사람이 작업흐름들을 생성하도록 사용자-친화적으 로 만들어진다. 작업흐름을 설계하는 사람은 어떠한 기본 프로그래밍 언어도 알 필요가 없다. 선언적 정의 작 업흐름 모듈(0m)은 작업흐름들을 이해 및 변경하기에 용이하도록 작업흐름들을 흐름도 또는 \"스윔-레인\" 스타일 프로세스로서 제시한다. 계산 엔진 모듈(0n)은 양식 설계자 모듈(0k), 선언적 정의 모듈(0l), 및 선언적 정의 작업흐름 모듈(0m)에 접속 된다. 일부 실시예들에서, 계산 엔진 모듈(0n)은 계산들로 작업할 때 사용자를 돕고, 공통 이용 패턴들을 인식 하고 그들을 제안하는 학습 특징을 갖는다. 학습 특징은 시스템에서의 모든 양식들 상의 모든 필드들에 걸쳐 공통 패턴들을 식별하고, 필드의 컨텍스트 내에서 적절한 계산들 또는 계산 인수들(calculation arguments)을 제안하기 위해 머신 학습을 이용한다. 머신 학습 양태는, 더 많은 계산이 입력되거나 업데이트되고 더 많은 양 식들이 시스템에 추가됨에 따라 계산 엔진 모듈(0n)이 시간에 걸쳐 진화하는 것을 허용한다. 따라서, 학습 특 징은 보다 빠르고 보다 효율적인 동작을 야기하고 양식 설계자의 경험을 향상시킨다. 일부 실시예들에서, 선언적 정의 로딩 모듈(0o)은 선언적 정의 모듈(0l)에 접속되고, 서버, 로컬 또는 네트워킹 된 저장소, 로컬 캐시로부터 선언적 정의 모듈(0l)로부터 데이터를 다운로딩 또는 로딩하고, 로컬 데이터베이스"}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "로부터 로딩되고, 원격 데이터베이스로부터 로딩되거나, 또는 본 기술분야에 알려진 임의의 다른 저장 시스템 또는 아키텍처로부터 로딩된다. 본 발명의 예시적인 실시예에서, JSON은 저장된 언어 텍스트에서 기본 텍스트 기반 표현으로서 이용되지만, YAML, XML, 이진 표현 커스텀/독점 포맷들 등과 같은 다른 포맷들이 이용될 수 있 다는 것을 알 수 있다. 일부 실시예들에서, 저장된 언어 텍스트는 초기에 JSON(또는 다른 것)으로부터 기본 키 -및-값 네스팅된 사전 구조(basic keys-and-values nested dictionary structure)로 파싱된다. 그 다음, 키- 및-값 네스팅된 사전 구조는 JSON 데이터 구조가 예상된 구조와 매칭되는 것을 보장하기 위해 스키마(schema)에 대해 검증되고, 만약 그렇다면, 검증된 구조들을 야기한다. 일단 JSON 데이터 구조들이 검증되면, 런-타임 객 체 생성 모듈(0p)은 런-타임 객체들 및 방법들을 생성하여, 그것들은 그 후 프레젠테이션 렌더러 모듈(0p) 및 계산 엔진 모듈(0n)과 같은 시스템의 다른 컴포넌트들에 의해 직접 이용될 수 있다. 프레젠테이션 렌더러 모듈(0q)은 계산 엔진 모듈(0n)로부터의 임의의 계산들을 포함하는 선언적 정의 모듈(0l) 의 명령어들을, 웹 브라우저를 위한 HTML과 같은, 사용자 인터페이스 툴이 이용하는 명령어들로 변환한다. 프 레젠테이션 렌더러 모듈(0q)은 양식이 웹 브라우저, 모바일 앱, 데스크톱 앱, 제3자 애플리케이션에 설치된 플 러그인(따라서 양식 능력을 제3자 시스템에 추가), 또는 인쇄된 페이지에 디스플레이될 수 있도록 한다. 인쇄 된 페이지는 Adobe PDF 포맷의 인쇄를 포함하는 임의의 형태의 물리적 또는 디지털 인쇄일 수 있다는 것을 알 수 있다. 도 1c는 선언적 정의 언어를 이용해서 프레젠테이션 렌더러를 구동하여 양식을 렌더링하기 위한 시스템의 도면 을 제공한다. 본 발명의 제1 실시예에서, 선언적 정의 언어에 기초하여 양식이 정의된다. 선언적 정의 언어는 양식과 연관된 필드들(즉, 데이터 필드들)을 정의하고, 필드들이 다양한 컴퓨팅 디바이스들의 스크린들 상에 어떻게 디 스플레이될지를 정의한다. 예를 들어, 선언적 정의 언어는 모바일 디바이스의 스크린 또는 컴퓨터의 스크린 상에 양식과 연관된 필드들을 디스플레이하기 위한 명령어들을 포함한다. 양식이 컴퓨팅 디바이스 상에 로딩될 때, 런-타임 객체들이 생성되고 인스턴스 특정 데이터로 채워진다. 일부 실시예들에서, 양식은 계산들, 및 필드들의 자동 채움, 필드들의 가시성 및 외관의 제어, 필드들의 인에이블링 및 디스에이블링 등과 같은 조건부 로직을 포함한다. 실시예에 따르면, 프레젠테이션 렌더러는 임의의 계산들을 포함하는 선언적 정의 언어의 명령어들을, 웹 브라우저를 위한 HTML과 같은, 사용자 인터페이스 툴(1a)이 이용하는 명령어들로 변환한다. 양식은 웹 브라우저, 모바일 앱, 데스크톱 앱, 제3자 애플리케이션에 설치된 플러그인(따라서, 양식 능력을 제3자 시스템에 추가) 또는 인쇄된 페이지에 디스플레이될 수 있다. 인쇄된 페이지는 Adobe PDF 포맷의 인쇄를 포함하는 임의의 형태의 물리적 또는 디지털 인쇄일 수 있다는 것을 알 수 있다. 사용자 인터페이스 툴(1a)에 접속된 프로세서(1c), 전자 저장소(1d) 및 이미지 캡처링 디바이스(1e)를 포함하는, 도 1c의 시스템(1b)의 상이한 컴포넌트들 사이의 상호작용들을 용이하게 하기 위해 임의의 통신 매체 가 이용될 수 있다는 것을 이해해야 한다. 시스템(1b)의 하나 이상의 컴포넌트는 하드-와이어드 통신, 무선 통신, 또는 둘 다를 통해 서로 통신할 수 있다. 예를 들어, 시스템의 하나 이상의 컴포넌트들은 네트워크를 통 해 서로 통신할 수 있다. 예를 들어, 프로세서(1c)는 전자 저장소(1d)와 무선으로 통신할 수 있다. 비제한적 인 예로서, 무선 통신은 라디오 통신, 블루투스 통신, Wi-Fi 통신, 셀룰러 통신, 적외선 통신, 또는 다른 무선 통신 중 하나 이상을 포함할 수 있다. 다른 타입들의 통신들이 본 개시내용에 의해 고려되며, 배제되지 않는다. 일부 구현들에서, 프로세서(1c)는 복수의 처리 유닛들을 포함한다. 이러한 처리 유닛들은 동일한 디바이스 내 에 물리적으로 위치할 수 있거나, 협력하여 동작하는 복수의 디바이스들일 수 있다. 프로세서(1c)는 소프트웨 어; 하드웨어; 펌웨어; 소프트웨어, 하드웨어, 및/또는 펌웨어의 일부 조합; 및/또는 처리 능력들을 구성하기 위한 다른 메커니즘들에 의해 하나 이상의 컴포넌트를 실행하도록 구성될 수 있다. 더욱이, 도 1c에서는, 다양한 명령어들이 단일 처리 유닛 내에 함께 위치되는 것으로서 예시되지만, 그것은 다 른 명령어들로부터 원격으로 실행될 수 있는 하나 이상의 명령어를 갖는 다수의 처리 유닛들을 포함하도록 구현 될 수도 있음을 이해해야 한다. 본 명세서에 설명된 상이한 컴퓨터 판독가능 명령어들에 의해 제공되는 기능의 설명은 예시의 목적들을 위한 것 이며, 제한적인 것으로 의도되지 않는데, 왜냐하면, 명령어들 중 임의의 것이 설명된 것보다 더 많거나 더 적은 기능을 제공할 수 있기 때문이다. 예를 들어, 명령어들 중 하나 이상이 제거될 수 있고, 그 기능의 일부 또는 전부가 명령어들 중 다른 것들에 의해 제공될 수 있다. 다른 예로서, 프로세서(들)(1c)는 컴퓨터 판독가능 명 령어들 중 하나에 기인하는 기능의 일부 또는 전부를 수행할 수 있는 하나 이상의 추가적인 명령어에 의해 프로 그래밍될 수 있다. 도 2를 참조하면, 본 발명의 실시예에 따른, 양식을 정의하는 것을 지원하는 선언적 정의 언어의 도면이 도시되 어 있다. 선언적 정의 언어는 양식과 연관된 필드들 및 프레젠테이션에 기초하여 양식에 대한 데이터 구조를 정의한다. 그러한 데이터 구조는 필드들과 연관된 데이터 및 사용자에 대한 양식의 외관이 별도로 핸들링 되는 것을 허용함으로써, 규칙들 또는 코드가 기입되는 것을 요구하지 않으면서, 양식이 상이한 스크린 크기들 및 능력들, 종이 크기들, 포맷들 등으로 렌더링되는 것을 가능하게 한다. 다른 실시예들에서, 필드들은 (텍스트, 숫자들, 이미지들 등과 같은) 스칼라 필드, 그룹 필드들, 및/또는 어레이 필드들을 포함한다. 양식은 스케일링가능하여, 필요에 따라 새로운 필드 타입들이 추가될 수 있게 한다. 선언적 정의 언어는 JSON 및 XML을 포함한 다양한 데이터 포맷들로 이용되도록 유연성이 있 다. 스칼라 필드들은 텍스트, 숫자 또는 날짜와 같은 하나의 정보를 포함하는 필드 타입들을 지칭한다. 이 타 입들은 사용자에게 제시되는 전형적인 방법을 가질 것이지만, 양식의 필요성들에 따라 또 다른 방식으로 제시될 수도 있다. 예를 들어, 숫자들은 수천 개의 구분 기호들(쉼표들)과 함께 또는 그러한 구분 기호들 없이 제시될 수 있고, 긴 텍스트는 사용자가 긴 텍스트를 더 많이 보기 위해 누르는 것을 허용하도록 생략 부호(ellipsis)로 잘릴 수 있고, 날짜들은 임의의 수의 포맷들로 보여질 수 있다.그룹 필드들은 일련의 필드들(그 자체가 스칼라, 어레이 또는 그룹들임)가 논리적으로 함께 처리될 수 있게 한다. 예를 들어, 주소는 거리 주소, 도시, 주, 및 우편 번호에 대한 텍스트 필드들로 이루어진 그룹일 수 있다. 주소 그룹에 대한 하나의 인에이블 계산은 그 내부의 모든 필드들을 제어할 수 있다. 더욱이, 그룹 은 배경 컬러(이 예에서, 이것은 배송 및 청구서 발송 주소들을 구분하는데 이용될 수 있음)와 같은 공유 속성 들을 제시받을 수 있거나, 사용자가 열거나 닫을 수 있는 섹션 내에 그룹을 삽입할 수 있거나, 어쩌면 스크린 영역을 저장할 수 있거나, 사용자가 전환할 수 있는 탭들로 데이터를 그룹화할 수 있거나, 데이터를 제시하는 다른 방식들일 수 있다. 어레이 필드들은 인보이스 상의 라인 항목들과 같은 반복 그룹들을 허용한다. 어레이에 대한 프레젠테이션 은 각각의 항목에 대한 레이아웃, 수평 대 수직 배열들, 또는 어레이로부터의 데이터를 그래프 또는 차트로 디 스플레이하는 것과 같은 옵션들을 포함할 수 있다. 어레이에서의 데이터는 또한 프레젠테이션을 위해 필터링될 수 있다. 일부 실시예에서, 스칼라 필드들은 데이터와 연관된 속성, 초기 값들, 필드에 대해 수행될 계산들(예컨대, 다른 필드에 대한 값이 변경될 때 필드에 대한 값이 업데이트될 수 있게 하는 것), 및 시행될 수 있는 검증들 (예컨대, 최소 값들)을 지정한다. 스칼라 필드들은 또한 스칼라 필드들에 대한 레이아웃, 스타일들, 및/또는 라벨들에 관한 프레젠테이션 정보를 포함한다. 일부 실시예들에서, 그룹 필드들은 데이터의 무한 네스팅(indefinite nesting)을 가능하게 하고, 추가적인 프레젠테이션 정보가 추가될 수 있게 한다. 그룹 필드들은 양식의 데이터 구조를 전체적으로 반복하고, 그의 프레젠테이션 블록은 양식에 대해서와 동일한 유연성을 가능하게 한다. 일부 실시예들에서, 어레이 필드들은 동종 또는 이종이며, 어레이 전체는 물론, 어레이 내에 포함된 그룹 필드들에 대한 프레젠테이션 정보를 포함한다. 도 3을 참조하면, 본 발명의 실시예에 따른, 선언적 정의 언어에 대한 로딩 프로세스의 도면이 도시되어 있다. 선언적 정의 언어는 서버로부터 다운로딩되거나, 로컬 또는 네트워킹된 저장소로부터 로딩되거나, 로컬 캐시로부터 로딩되거나, 로컬 데이터베이스로부터 로딩(23a)되거나, 원격 데이터베이스로부터 로딩"}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "(23b)되거나, 본 기술분야에 알려진 임의의 다른 저장 시스템 또는 아키텍처로부터 로딩된다. 본 발명의 예시 적인 실시예에서, JSON은 저장된 언어 텍스트에서 기본 텍스트 기반 표현으로서 이용되지만, YAML, XML, 이 진 표현 커스텀/독점 포맷들 등과 같은 다른 포맷들이 이용될 수 있다는 것을 알 수 있다. 저장된 언어 텍스트는 JSON(또는 다른 것)으로부터 기본 키-및-값 네스팅된 사전 구조로 초기에 파싱된 다. 키-및-값 네스팅된 사전 구조는 그 후 JSON 데이터 구조가 예상된 구조와 매칭되는 것을 보장하기 위해 스키마에 대해 검증되고, 만약 그렇다면, 검증된 구조들을 야기한다. 일단 JSON 데이터 구조들이 검증되면, 런-타임 객체들 및 방법들은 이들이 프레젠테이션 렌더러(30a) 및 계산 평가기(30b)와 같은 시스 템의 다른 컴포넌트들에 의해 직접 이용될 수 있도록 생성된다. 본 명세서에 제시된 로딩 프로세스의 동작들은 예시적인 것으로 의도되고, 따라서, 제한하는 것으로 간주되어서 는 안 된다. 일부 구현들에서, 로딩 프로세스는 설명되지 않은 하나 이상의 추가 동작으로, 및/또는 논의된 동 작들 중 하나 이상 없이 달성된다. 일부 구현들에서, 동작들 중 2개 이상은 실질적으로 동시에 발생한다. 설 명된 동작들은 위에서 상세히 설명된 시스템 컴포넌트들의 일부 또는 전부를 이용하여 달성될 수 있다. 일부 구현들에서, 로딩 프로세스는 하나 이상의 처리 디바이스(예를 들어, 디지털 프로세서, 아날로그 프로세서, 정보를 처리하도록 설계된 디지털 회로, 중앙 처리 유닛, 그래픽 처리 유닛, 마이크로제어기, 정보를 처리하도록 설계된 아날로그 회로, 상태 머신, 및/또는 정보를 전자적으로 처리하기 위한 다른 메커니즘들)에서 구현된다. 하나 이상의 처리 디바이스는 하나 이상의 전자 저장 매체에 전자적으로 저장된 명령어들에 응답하 여 로딩 프로세스의 동작들의 일부 또는 전부를 실행하는 하나 이상의 디바이스를 포함한다. 하나 이상의 처리 디바이스는 로딩 프로세스의 동작들 중 하나 이상의 실행을 위해 특별히 설계되도록 하드웨어, 펌웨어 및/또는 소프트웨어를 통해 구성된 하나 이상의 디바이스를 포함할 수 있다. 도 4에 도시된 바와 같이, 본 발명의 일 실시예에 따른 계산 엔진의 도면이다. 선언적 정의 언어가 이용되더라도, 본 발명의 다른 실시예들은 작성될 계산을 제공한다. 그러한 경우에, 계산 평가기의 런-타임은 양식 데이터에 대해 인수를 평가하고 결과를 반환한다. 계산 은 상수, 양식 데이터 값들의 검색, 큰 데이터 세트들의 변환을 위한 맵/필터/축소(36a), 문자열조작(36b), 산술(36c), 및 논리 연산(36d)을 이용한 계산들을 포함한다. 계산은 데이터 양식을 염두에 두 고 설계되고, 시스템의 나머지와 동일한 컨트롤 하에 있으며, 새로운 기능이 쉽게 추가될 수 있게 한다. 일부 실시예들에서, 계산을 평가할 때, 제1 인수들이 평가되어야 한다. 제1 인수들의 타입들 및 의미들은 계산의 세부사항에 종속된다. 대부분의 경우에, 제1 인수들은 그 자체가 계산을 위한 추가적 인 계산들일 수 있다. 계산이 양식 데이터를 참조할 때, 양식 데이터와 연관된 참조가 수집되고, 계산의 의도에 관한 정보와 함께 변경 브로드캐스터에 등록된다. 예를 들어, 사용자가 날짜 범위를 입 력하도록 허용될 경우, 사용자는 시작 날짜를 입력할 수 있고, 종료 날짜 또는 날짜들의 수를 편집하도록 허용 될 수 있고, 종료 날짜에 대한 변경은 날짜들의 수를 변경하고, 그 반대도 마찬가지이다. 그러한 기능은 사용 자가 편리하고 효율적으로 양식 필드들을 편집할 수 있게 한다. 일부 실시예들에서, 변경 브로드캐스터는 양식 데이터를 모니터링하여, 필드의 값이 (사용자 입력, 계 산, 또는 다른 임의의 것을 통해) 변경될 때, 영향을 받는 계산과 연관된 호출자는 필드의 값이 변경되었을 수 있다는 것을 통지받을 것이다. 도 5는 본 발명의 일 실시예에 따른 프레젠테이션 렌더러의 도면을 도시한다. 프레젠테이션 렌더러는 선언적 정의 언어에 의해 제공되는 프레젠테이션 정보와 양식 데이터를 결합하여, 렌더링된 사용자 인터페이스에 대한 레이아웃 및 스타일링 명령어들을 생성한다. 본 발명의 일 양태에 따르면, 선언적 정의들은 선언적 정의 런-타임 객체들을 포함한다. 레이아웃 관리는 탭들 및 접을 수 있는 영역들(collapsible areas)과 같은 동적 특징들을 포함하는 컨트롤 들의 배치 및 크기조정(sizing)을 제공하기 위해 정보를 처리하는 한편, 스타일 관리는 폰트들, 컬러들, 열 및 행 섹션들, 필드 높이 및 폭, 마진들 등과 같은 양식의 외관과 관련된다. 레이아웃 관리는 또한, 청구 서 발송 주소가 배송 주소와 동일한 때와 같이, 동적으로 컨트롤들을 보여주고 숨기는 능력을 포함할 수 있다. 또한, 그러한 동적 숨김 및 보여줌이 달성될 수 있는 많은 다른 실세계 시나리오가 있다는 것을 알 것이다. 일부 실시예들에서, 양식 데이터는 렌더링된 사용자 인터페이스를 통해 사용자에 의해 직접 입력되거나, 카메라, 마이크로폰, 블루투스 온도계 등을 통하는 것과 같은 다른 수단에 의해 검색된다. 이 양 식 데이터는 이어서 다시 입력 라우팅을 통해 양식으로 라우팅된다. 일부 실시예들에서, 계산 평가기에서의 계산 평가들 때문에 직접 또는 간접적으로 변경 브로드캐스터에 의해 기록된 양식의 변경들은, 사용자가 항상 현재 데이터를 보도록 필요에 따라 레이아웃 관리, 스타일 관 리 및/또는 렌더링된 사용자 인터페이스로 다시 브로드캐스트된다. 이것은 또한 자동으로 동기화된 채 로 있으면서 단일의 데이터 필드가 하나보다 많은 방식으로 렌더링될 수 있게 한다. 예를 들어, 본 발명의 일"}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "양태에 따르면, \"레이팅(rating)\" 필드가 숫자 값, 슬라이더, 별들의 세트 레이팅, 또는 본 기술분야에 알려진 이들 및 다른 필드 타입들의 임의의 조합으로서 도시되고 변경될 수 있다. 필드의 프레젠테이션들은 필드가 어 떻게 렌더링되는지에 관계없이 항상 동일한 값을 나타낼 것이다. 렌더링된 사용자 인터페이스는 가장 흔하게는 HTML과 함께 동작하는 임베디드 컨트롤 또는 브라우저에서의 디스플레이를 위해 HTML로 렌더링되지만, 그것은 많은 상이한 방식들로 렌더링될 수 있다는 것을 알 수 있다. 일 실시예에서, 렌더링된 사용자 인터페이스는 인쇄 또는 PDF 문서에의 저장을 위해 포스트스크립트 (Postscript)로 렌더링된다. 다른 실시예에서, 렌더링된 사용자 인터페이스는, iOS를 위한 Cocoa Touch 또 는 Windows를 위한 WPF와 같은, 네이티브 사용자 인터페이스를 위한 일련의 커맨드들로 렌더링된다. 도 6에 도시된 바와 같이, 본 발명의 실시예에 따른, 작업흐름을 정의하는 것을 지원하는 선언적 정의 언어의 도면이 있다. 선언적 정의 언어는 작업흐름을 트랜지션들(transitions)의 모음으로서 정의한다. 각각의 트랜지션은 필드들 및 프레젠테이션들, 양식 업데이트들, 할당 변경들, 및 백엔드 업데이트들을 포함 할 수 있다. 일부 실시예들에서, 트랜지션들의 필드들은 양식에서의 필드와 동일한 방식을 정의한다. 종종, 트랜지 션들의 필드들은 양식의 필드들로부터 값들을 복사함으로써 초기화된다. 트랜지션들과 연관된 프레젠테이션들은 선택적이고, 대화 요소들, 사용자에 대한 프롬프트들, 및 \"OK\" 및 \"취소(Cancel)\" 버튼들에 대한 텍스트의 추가들과 함께, 양식과 연관된 프레젠테이션과 동일한 방식으로 정의된다. 프레젠테이션이 없는 트랜지션은 완료하기 위해 사용자 상호작용을 필요로 하지 않는다. 일부 실시예들에서, 양식 업데이트들은 트랜지션들의 필드들을 양식의 필드들에 맵핑하고, 트랜지 션들로부터의 값들을 양식에 복사하거나, 새로운 그룹을 양식과 연관된 어레이에 첨부한다. 이것은 트랜지 션들이 사용자가 통상적으로 변경하도록 허용되지 않는 값들을 수정할 수 있게 하며, 이는 데이터 일관성을 강제하는데 이용될 수 있다. 일부 실시예들에서, 할당 변경들은 사용자들 또는 그룹들의 모음에 대한 양식의 할당을 설정하거나, 기존의 할당으로부터 사용자들 및 그룹들을 선택적으로 추가하고 제거한다. 계산이 이 프로세스에서 이용될 수 있 다. 일부 실시예들에서, 트랜지션들은 백엔드 시스템들에 대한 백엔드 업데이트들을 트리거한다. 트랜지션 정의는 다수의 업데이트를 포함한다. 각각의 업데이트는 백엔드 시스템들로 내보내질 필드들을 지정하고, 양식 을 PDF 또는 다른 렌더링으로서 내보내며, 콘텐츠 어레이 필드들에 기초하여 다수의 호출을 행한다. 본 발명의 일 양태에서, 이러한 필드들은 필터링된다. 도 7을 참조하면, 본 발명의 실시예에 따른, 작업흐름을 설계하기 위한 설계자 툴의 도면이 도시된다. 설계자 툴은 그녀의 비즈니스의 동작들 및 프로세스들에 친숙한 사람이 양식들을 생성하기에 용이하도록 만들어진다. 양식을 설계하는 사람은 어떠한 기본 프로그래밍 언어도 알 필요가 없다. 일부 실시예들에서, 설계자 툴은 양식 편집기를 제공한다. 양식 편집기는 양식의 what-you-see-is- what-you-get 뷰를 제시한다. 사용자는 필드들을 추가 및 제거하고, 그들의 속성들을 변경할 수 있다. 일부 실시예들에서, 설계자 툴은 그래픽 작업흐름 편집기를 제공한다. 그래픽 작업흐름 편집기(10 5)는 작업흐름들을 이해 및 변경하기에 용이하도록 작업흐름들을 흐름도 또는 \"스윔-레인\" 스타일 프로세스로서 제시한다. 일부 실시예들에서, 설계자 툴은 프리뷰어/테스터를 제공한다. 프리뷰어/테스터는 사용자가 다양한 스크린 크기들 상에 나타날 양식을 보고, 정확한 기능을 보장하기 위해 테스트 데이터를 입력하고, 작업흐름을 연습할 수 있게 한다. 일부 실시예들에서, 설계자 툴은 특수 계산 편집기를 제공한다. 특수 계산 편집기는 계산들로 작업 할 때 사용자를 돕는다. 특수 계산 편집기는 공통 이용 패턴들을 인식하고 그들을 제안하는 학습 특징을 갖는다. 학습 특징은 시스템에서의 모든 양식들 상의 모든 필드들에 걸쳐 공통 패턴들을 식별하고, 필드의 컨 텍스트 내에서 적절한 계산들 또는 계산 인수들을 제안하기 위해 머신 학습을 이용한다. 머신 학습 양태는, 더 많은 계산들이 입력되거나 업데이트되고 더 많은 양식들이 시스템에 추가됨에 따라 시간에 걸쳐 진화하는 것을 허용한다. 따라서, 학습 특징은 특수 계산 편집기의 보다 빠르고 보다 효율적인 동작을 야기하고 양식 설 계자의 경험을 향상시킨다. 도 8에는, 본 발명의 실시예에 따른 양식 보관소의 도면이 있다. 시스템에 의해 이용하기 위한 데이터 및 정의들 전부는 클라우드-기반 또는 구내 보관소에 저장되며, 이는 액세 스를 허용하기 위해 REST-ful API를 노출시킨다. 양식 앱(브라우저-기반, 모바일, 데스크톱, 또는 임베디 드 제3자 애플리케이션들을 포함함), 관리 툴들(administrative tools), 및 양식 설계자 툴 모두는 이 API를 이용하여 보관소에 액세스한다. 모든 호출들은 사용자 인증 및 허가 처리를 통과해야 한다. 할당 관리는 어느 양식들이 어느 사용자들에게 할당되는지, 따라서 어느 양식들을 사용자가 보고 작업할 것으로 예상되는지를 제어한다. 양식들은 제로, 하나, 또는 더 많은 개별적인 사용자들뿐만 아니라, 제로, 하나, 또는 더 많은 사용자 그룹들에 할당될 수 있다. 감독관 사용자들에게는 뷰잉 또는 편집을 위해 그들이 감독하 는 작업자들에게 할당된 양식들에 대한 액세스가 주어질 수 있다. 정의들 및 정의-관련 항목들은 빈번하게 판독되지만 덜 자주 기입될 것으로 예상하면서 정의 저장소에 함 께 저장된다. 일부 실시예들에서, 양식 앱은 양식 데이터 저장소에서의 양식 데이터를 판독하고 업데이트한다. 양식 데이터 저장소에 대한 업데이트들은 백엔드 통신을 통해, 예컨대, 이메일 또는 메시징 시스템들, 데이 터베이스 시스템들, 또는 다른 비즈니스 시스템들을 통해, 다른 백엔드 시스템에의 호출들을 트리거할 수 있다. 양식 렌더러는 완전히 클라우드에서 실행되어, 양식들이 업데이트되고 심지어 재-렌더링되는 것을 허용한다. 도 9에는, 본 발명의 실시예에 따른, 계산 학습 엔진의 도면이 도시되어 있다. 계산 학습 엔진은 양식 설계자에 의해 양식들에 대해 정의된 계산 인수들을 입수하고, 패턴들 및 잠재적인 확장들에 대하여 그것들을 검사하고, 그 다음으로, 다른 양식들 및 필드들에 대해 양식 설계자 에서 계산 인수들을 생성할 때에 이용될 수 있는 로직 패러다임들을 생성한다. 계산 학습 엔진(11 8)은 양식 솔루션을 이용하여 모든 양식 설계자들에 기초하여 새로운 로직 패러다임들을 계속적으로 업데이트 및 해제하고 있다. 계산들 및 계산 인수들은, 많은 프로그래밍 패러다임들처럼, 패턴-기반 이다. 이러한 패턴들은, 명백하지는 않지만, 데이터 타입, 다른 필드들에 대한 상대적 위치, 다른 필드들에 대 한 관계, 필드 명명 패턴들, 다른 양식들 상의 필드들, 주어진 산업 내의 양식들 등을 포함하는(그러나 이에 제 한되지 않는) 특성들에 기초한다. 머신 학습을 이용하여 이 특성들을 연속적으로 분석함으로써, 계산 학습 엔 진은 시간에 걸쳐 개선되고, 계산들 및 계산 인수들을 제안할 수 있고, 양식 설계자가 계산을 입력하기 시 작할 때에 계산 및 계산 인수들을 완료할 수 있다. 그 결과들은 문장들을 당신의 타입으로서 완성하는 옵션들 을 제공하기 위해 문법 및 컨텍스트를 분석하는 단어 처리 툴들의 결과들과 유사하다. 따라서, 계산 학습 엔진 은 보다 빠르고 보다 효율적인 동작을 야기하고 양식 설계자의 경험을 향상시킨다. 도 10a는 본 발명의 실시예에 따른, 디지털 포맷으로 설계되고 생성될 수 있는 예시적인 종이 양식의 제1 페이 지를 도시한다. 도 10b는 본 발명의 실시예에 따른, 디지털 포맷으로 설계되고 생성될 수 있는 예시적인 종이 양식의 제2 페이 지를 도시한다. 도 10a 및 도 10b는 본 발명의 예시적인 실시예에 의해 디지털화되고 대체될 종류의 전형적인 종이 양식을 도시 한다. 인프라스트럭처 검사와 같은 필드 포스 산업들에서 일상적인 바와 같이, 종이 양식은 사용자에 의한 편 집 및 입력을 위한 많은 상이한 필드들 및 많은 상이한 타입들의 필드들을 포함한다(이 경우, 누수 검사기). 예로서, 도 10a 및 도 10b에 도시된 누수 보고는, 다른 것들 중에서, 누출의 주소, 검사 날짜, 누출 특성들에 대한 체크박스들, 추가적인 사용자 입력 및 코멘트를 위한 영역, 및 누출을 스케치하고 그리기 위한 영역에 대 한 상이한 필드들을 포함한다. 사용자에 의한 편집 후에, 도 10a 및 도 10b에 도시된 것들과 같은 필드 포스 산업들에서의 종이 양식들은 다양 한 이해 관계자들을 통해 수동으로 전달되거나 라우팅된다. 이러한 라우팅은 수동 처리의 필요성으로 인해 수 시간 내지 수 일 또는 심지어 수 주가 걸릴 수 있다. 또한, 그러한 양식들에 대한 변경들은 모든 사용자들에 걸쳐 순간적으로 전개될 수 없어서, 오래된 양식들의 핸들링을 초래하고, 처리에서의 비효율성들에 추가로 기여 한다. 추가적으로, 복수의 상이한 종이 양식들에 걸친 기본 데이터의 분석 또는 처리가 부담스러울 수 있고, 필요한 데이터를 수집하기 위해 모든 관련 양식을 검색하고 검토할 것을 요구한다. 도 11a는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따라 생성된 디지털 양식의 제1 예를 도시한다. 도 11b는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따라 생성된 디지털 양식의 제2 예를 도시한다. 도 11c는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따른 시스템에 의해 생성된 디지털 양 식의 제3 예를 제공한다. 도 11d는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따른 시스템에 의해 생성된 디지털 양 식의 제4 예를 제공한다. 도 11e는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따라 생성된 디지털 양식의 제5 예를 도시한다. 도 11a, 도 11b, 도 11c, 도 11d, 및 도 11e는 본 명세서에 개시된 시스템 및 프로세스를 이용하여 도 10a 및 도 10b의 종이 양식으로부터 생성된 디지털 양식들의 상이한 예들을 도시한다. 도 11a 내지 도 11e에서 생성된 디지털 양식들은 웹, 모바일, 및 데스크탑 애플리케이션들을 포함하는 다양한 상이한 사용자 인터페이스들에 걸 쳐 일관되게 디스플레이될 수 있다는 것을 알 수 있다. 또한, 다른 것들 중에서, 누출의 주소, 검사 날짜, 누 출 특성들에 대한 체크박스들, 추가적인 사용자 입력 및 코멘트를 위한 영역, 및 누출을 스케치하고 그리기 위 한 영역을 포함하는, 도 10a 및 도 10b의 종이 양식을 이용하여 수동으로 어드레싱될 많은 상이한 필드들 및 많은 상이한 타입들의 필드들이 본 발명의 시스템 및 방법을 이용하여 설계되고 생성될 수 있음이 이해될 수 있다. 비즈니스 사용자들 또는 양식 설계자들은 대응하는 종이 양식들로부터 그러한 디지털 양식들을 쉽게 생 성할 수 있고, 코드를 작성하는 것에 숙련될 필요가 없다. 그러한 디지털 양식들의 이용은 관련된 다양한 이해 관계자들에 의한 빠르고 효율적인 처리를 가능하게 하며, 또한 기본 데이터의 정교한 분석을 가능하게 한다. 예를 들어, 어떤 날에 또는 수도 본관(water main)의 크기 및 재료에 의해 일어난 모든 누수 검사 보고를 쉽게 검색할 수 있다. 또한, 양식 자체에 대한 임의의 업데이트들은 수동 업데이트에 대한 필요성 없이 모든 사용자 들에게 즉시 전개된다. 본 발명의 일 실시예에 따르면, 사용자는 양식 설계자 툴을 동작하기 위해 컴퓨팅 디바이스 또는 서버 상에서 설치된 애플리케이션, 소프트웨어, 또는 다른 프로그램을 이용함으로써 양식을 설계하기 시작한다. 이 사용자 는 이 툴을 동작하기 위해 어떠한 기본 프로그래밍 언어도 알 필요가 없다. 양식 설계자 툴은 사용자에게 양식 의 WYSIWYG 뷰를 제시하는 양식 편집기를 특징으로 하며, 이는 사용자가 필드들을 쉽게 추가하거나 제거하고, 그것들의 속성들, 위치 및 배향은 물론 허용된 입력 인수들을 변경할 수 있게 한다. 머신 학습 처리는 또한 더 많은 계산들이 입력되거나 업데이트되고 더 많은 양식들이 시스템에 추가됨에 따라 적절한 계산들 또는 계산 인 수들을 사용자에게 제안할 것이다. 이러한 처리는 이러한 양식들이 더 효율적이고 신속하게 설계되게 한다. 예를 들어, 도시의 수도국(city's water department)에 있는 감독관은 누출의 주소, 검사 날짜, 누출 특성들에 대한 체크박스들, 추가적인 사용자 입력 및 코멘트를 위한 영역, 및 누출을 스케치하고 그리기 위한 영역을 포 함할 누수 검사들을 위한 양식을 설계하기를 원할 수 있다. 시스템에 이미 다른 양식들이 있었다면, 머신 학습 처리는, 예를 들어, 감독관이 양식을 편집하고 설계할 때, 감독관에게 추가적인 날짜 또는 체크박스 필드들을 제안할 수 있다. 사용자는 또한 양식들이 더욱 신속하고 효율적으로 설계되고 검토될 수 있도록, 양식 설계, 관리, 및/또는 프로세스들을 자동화하는 그래픽 작업흐름 편집기를 동작할 수 있다. 양식이 설계된 후에, 양식 설계자 또는 추가적인 사용자들은 양식의 설계에 의해 결정된 바와 같이, 데이터를 그 양식에 입력 및 편집할 수 있다. 예를 들어, 누수 검사자는 누출의 주소를 입력하기 위해 필드를 편집할 수 있다. 이 검사자는 임의의 방식의 이동 또는 고정 컴퓨팅 디바이스들 상에서 이 양식들에 입력 및 편집할 수 있을 것이고, 양식들은 그 디바이스들 상에서의 적절한 디스플레이를 위하여 자동으로 조절 및 스케일링될 것임 을 것을 알 수 있다. 따라서, 검사자는 잡 사이트(job site) 상에서, 집에서, 직장에서, 또는 다양한 위치들의 임의의 조합에서 그리고 필요에 따라 상이한 시간들에서 편리한 방식으로 양식을 편집할 수 있다. 편집의 결말 에서, 완성된 양식은 이후 검사의 상세들을 검토할 필요가 있을 다양한 이해 관계자들에게 자동으로 라우팅될 것이다. 예를 들어, 수리를 위한 추정치를 제공하기 위해 양식이 계약자들에게 자동으로 라우팅될 수 있다. 완성된 양식이 저장된 후에, 그것은 또한 지역 수도국의 감독관이 특정 거리(street) 또는 도시 블록에 대한 모 든 그러한 보고들을 검색하여 물 라인들(water lines)의 더 주요한 수리들 또는 교체에 대한 필요성을 평가하게 할 것이다. 본 개시내용의 구현들은 하드웨어, 펌웨어, 소프트웨어, 또는 이들의 임의의 적절한 조합으로 이루어질 수 있다. 본 개시내용의 양태들은 하나 이상의 프로세서에 의해 판독되고 실행될 수 있는 머신 판독가능 매체 상 에 저장된 명령어들로서 구현될 수 있다. 머신 판독가능 매체는 머신(예를 들어, 컴퓨팅 디바이스)에 의해 판 독가능한 형태로 정보를 저장 또는 송신하기 위한 임의의 메커니즘을 포함할 수 있다. 예를 들어, 유형의 컴퓨 터 판독가능 저장 매체는 판독 전용 메모리, 랜덤 액세스 메모리, 자기 디스크 저장 매체들, 광학 저장 매체들, 플래시 메모리 디바이스들 등을 포함할 수 있고, 머신 판독가능 송신 매체는 반송파들, 적외선 신호들, 디지털 신호들 등과 같은 전파 신호들의 형태들을 포함할 수 있다. 펌웨어, 소프트웨어, 루틴들, 또는 명령어들은 본 개시내용의 특정 예시적인 양태들 및 구현들, 및 특정 액션들의 수행의 견지에서 본 명세서에 설명될 수 있다. 설명의 목적들을 위해, 설명의 철저한 이해를 제공하기 위해 다수의 특정 상세들이 개시된다. 그러나, 본 기술 분야의 통상의 기술자에게는 본 개시내용의 구현들이 이러한 특정 상세들 없이도 실시될 수 있다는 것이 명백할 것이다. 일부 경우들에서, 모듈들, 구조들, 프로세스들, 특징들, 및 디바이스들은 설명을 모호하게 하는 것을 피하기 위해 블록도 형태로 도시된다. 다른 경우들에서, 기능 블록도들 및 흐름도들은 데이터 및 논리 흐름들 을 나타내기 위해 도시된다. 블록도들 및 흐름도들의 컴포넌트들(예를 들어, 모듈들, 블록들, 구조들, 디바이 스들, 특징들 등)은 본 명세서에 명시적으로 설명되고 도시된 것과 다른 방식으로 다양하게 조합, 분리, 제거, 재정렬, 및 대체될 수 있다. 본 명세서에서 \"하나의 구현\", \"구현\", \"일부 구현들\", \"다양한 구현들\", \"특정 구현들\", \"다른 구현들\", \"일련 의 구현들\" 등에 대한 참조는 그 구현과 관련하여 설명된 특정한 특징, 설계, 구조, 또는 특성이 본 개시내용의 적어도 하나의 구현에 포함된다는 것을 의미한다. 예를 들어, 본 명세서의 다양한 곳에서의 \"하나의 구현에서\"또는 \"구현에서\"라는 문구의 출현은 반드시 모두 동일한 구현을 지칭하지는 않으며, 다른 구현들과 상호 배타적 인 별개의 또는 대안적인 구현들도 아니다. 더욱이, \"구현\" 등에 대한 명시적인 참조가 존재하는지에 관계없이, 다양한 특징들이 설명되며, 이들은 일부 구현들에서 다양하게 조합되고 포함될 수 있지만, 다른 구현 들에서는 또한 다양하게 생략된다. 유사하게, 일부 구현들에 대해서는 선호도들 또는 요건들일 수 있지만, 다 른 구현들에 대해서는 그렇지 않을 수 있는 다양한 특징들이 설명된다. 본 명세서에서 이용된 언어는 주로 가독성 및 교육 목적들을 위해 선택되었으며, 본 발명의 주제를 기술하거나 제한하기 위해 선택되지 않았을 수 있다. 본 발명의 다른 구현들, 이용들 및 이점들은 본 명세서에 개시된 본"}
{"patent_id": "10-2022-7041221", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "발명의 명세서 및 실시의 고려로부터 본 기술분야의 통상의 기술자에게 명백할 것이다. 본 명세서는 단지 예시 적인 것으로 간주되어야 하며, 따라서 본 발명의 범위는 청구항들에 의해서만 한정되는 것으로 의도된다."}
{"patent_id": "10-2022-7041221", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 발명의 상기의 및/또는 다른 양태들은 첨부 도면들을 참조하여 본 발명의 예시적인 실시예들을 상세히 설명 함으로써 더 명백해질 것이다. 도 1a는 컴퓨팅 디바이스가 네트워크를 통해 서버 상의 디지털 양식에 액세스할 수 있는, 본 발명의 실시예에 따른 시스템의 도면을 도시한다. 도 1b는 본 발명의 일 실시예의 다양한 모듈들의 도면을 제공한다. 도 1c는 선언적 정의 언어를 이용해서 프레젠테이션 렌더러를 구동하여 양식을 렌더링하기 위한 시스템의 도면 을 제공한다. 도 2는 본 발명의 실시예에 따른, 양식을 정의하는 것을 지원하는 선언적 정의 언어의 도면을 제공한다. 도 3은 본 발명의 실시예에 따른, 선언적 정의 언어에 대한 로딩 프로세스의 도면을 제공한다. 도 4는 본 발명의 실시예에 따른, 계산 엔진의 도면을 제공한다. 도 5는 본 발명의 일 실시예에 따른, 프레젠테이션 렌더러의 도면을 제공한다. 도 6은 본 발명의 실시예에 따른, 작업흐름을 정의하는 것을 지원하는 선언적 정의 언어의 도면을 제공한다. 도 7은 본 발명의 실시예에 따른, 작업흐름을 설계하기 위한 설계자 툴의 도면을 제공한다. 도 8은 본 발명의 실시예에 따른, 양식 보관소(forms repository)의 도면을 제공한다. 도 9는 본 발명의 실시예에 따른, 계산 학습 엔진의 도면을 제공한다. 도 10a는 본 발명의 실시예에 따른, 디지털 포맷으로 설계되고 생성될 수 있는 예시적인 종이 양식의 제1 페이 지를 도시한다. 도 10b는 본 발명의 실시예에 따른, 디지털 포맷으로 설계되고 생성될 수 있는 예시적인 종이 양식의 제2 페이 지를 도시한다. 도 11a는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따라 생성된 디지털 양식의 제1 예를 도시한다. 도 11b는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따라 생성된 디지털 양식의 제2 예를 도시한다. 도 11c는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따른 시스템에 의해 생성된 디지털 양 식의 제3 예를 제공한다.도 11d는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따른 시스템에 의해 생성된 디지털 양 식의 제4 예를 제공한다. 도 11e는 도 10a 및 도 10b에서의 종이 양식으로부터 본 발명의 실시예에 따라 생성된 디지털 양식의 제5 예를 도시한다."}
