{"patent_id": "10-2024-0095405", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0015974", "출원번호": "10-2024-0095405", "발명의 명칭": "AI 아바타를 이용한 키오스크 장치 및 그의 동작 방법, 및 키오스크를 제어하는 장치 및 방법", "출원인": "주식회사 굳갱랩스", "발명자": "안두경"}}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "아바타(avatar) 기반의 키오스크를 제어하는 서버 장치에 있어서,상기 키오스크로부터 사용자의 입력을 수신하는 입력 수신부;상기 사용자의 입력에 대응하여 아바타가 키오스크의 기능을 수행하도록 하기 위한 아바타 에이전트(avataragent)의 실행을 제어하는 프로세서; 및상기 아바타 에이전트에 의해 생성된 아바타의 출력 데이터를 상기 키오스크로 제공하는 출력 제공부를 포함하되,상기 키오스크의 기능은 상품 주문을 처리하는 기능을 포함하고,상기 아바타의 출력 데이터는 상품 주문을 처리하기 위한 상기 아바타의 표정, 립싱크, 바디제스쳐 및 음성 중적어도 둘에 대한 데이터를 포함하는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서, 상기 아바타 에이전트는 AI 기반의 상기 아바타가 키오스크의 기능을 수행하도록 하기 위한 AI 아바타 에이전트인, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서, 상기 프로세서는,상기 사용자의 입력에 대응하여 상기 상품 주문을 처리하는 인공지능 모델에 기반한 출력 텍스트를 생성하고,상기 출력 텍스트를 기반으로 상기 아바타의 출력 데이터를 생성하는, 아바타 기반의 키오스크를 제어하는 서버장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서,상기 인공지능 모델은, 상기 상품 주문 처리를 구성하는 적어도 하나의 세부 기능을 수행하는 함수를 호출하기위한 함수 호출(function call) 인공지능 모델, 상기 사용자와의 대화를 처리하기 위한 대화(conversation) 인공지능 모델, 임베딩 모델(embedding model) 및 상기 출력 텍스트를 음성으로 변환하기 위한 TTS(Text-to-Speech) 모델 중 적어도 하나를 포함하는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 3 항에 있어서, 상기 프로세서에 의해 수행되는 상기 상품 주문의 처리는, (i) 메뉴를 선택하는 제 1 프로세스;(ii) 상기 제 1 프로세스에 의해 선택된 적어도 하나의 메뉴에 대한 옵션을 구분하는 제 2 프로세스;(iii) 상기 제 2 프로세스에 의해 구분된 적어도 하나의 옵션에 대한 옵션값을 결정하는 제 3 프로세스; 및(iv) 상기 제 1 내지 제 3 프로세스의 결과를 기반으로 상기 상품 주문을 완성하는 제 4 프로세스를 포함하는,아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5 항에 있어서, 공개특허 10-2025-0015974-3-상기 메뉴는 판매 대상 상품의 최소 구분으로 미리 정의되고,상기 옵션은 상기 메뉴에 부여되는 추가사항 및 변경사항 중 적어도 하나에 대한 분류로 미리 정의되는, 아바타기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6 항에 있어서,상기 옵션은 복수의 옵션 카테고리들로 구성되고,하나의 옵션 카테고리는 하나의 옵션값만을 갖도록 구성되는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 5 항에 있어서, 상기 프로세서는, 상기 제 1 프로세스, 상기 제 2 프로세스, 상기 제 3 프로세스 및 상기 제 4 프로세스가 순차적으로 수행되도록 제어하되,상기 제 1 프로세스, 상기 제 2 프로세스, 상기 제 3 프로세스 및 상기 제 4 프로세스는 각각 유효성 검증이 서로 다르게 미리 정의되어 있으며,상기 프로세서는, 각 프로세스별 유효성 검증이 이루어짐에 응답하여 다음 프로세스로의 진행이 가능하도록 제어하는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8 항에 있어서, 상기 프로세서는, 상기 각 프로세스별 유효성 검증에 실패했음에 응답하여 실패 메시지를 생성하되,상기 실패 메시지가 상가 아바타와 함께 표현되도록 제어하는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 1 항에 있어서,상기 프로세서는, 동의어 데이터베이스를 이용하여 상기 사용자의 입력에 대한 동의어를 처리하는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 1 항에 있어서, 상기 프로세서는, 인공지능 모델을 이용하여 상기 사용자의 입력으로부터 발화 의도를 구분하되,상기 의도는 상품 주문, 정보 문의 및 일반 대화 중 하나로 구분하는, 아바타 기반의 키오스크를 제어하는 서버장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서, 상기 프로세서는, 상기 3가지 의도 중 주문임에 응답하여, 상기 사용자의 입력을 미리 저장된 정규표현식 패턴과 매칭하고,상기 매칭된 정규표현식 패턴을 기반으로 상기 상품 주문을 처리하는, 아바타 기반의 키오스크를 제어하는 서버장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 12 항에 있어서,상기 정규표현식 패턴은, 상품 카테고리, 상품 식별자, 옵션 카테고리 및 옵셕 식별자 중 적어도 둘과 연관된것인, 아바타 기반의 키오스크를 제어하는 서버 장치.공개특허 10-2025-0015974-4-청구항 14 제 1 항에 있어서, 상기 프로세서는, 상기 아바타가 렌더링되는 제 1 영역 및 상기 상품 주문과 관련된 사용자의 입력 및 그에 대응하는 상기 키오스크의 출력을 텍스트로 표시하는 제 2 영역을 포함하는 그래픽 사용자 인터페이스(GUI)를 상기 키오스크로 제공하도록 제어하는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 14 항에 있어서,상기 그래픽 사용자 인터페이스는 상기 상품 주문과 연관된 상태를 표시하는 제 3 영역을 더 포함하는, 아바타기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 15 항에 있어서,상기 제 3 영역의 상기 상품 주문과 연관된 상태는 상기 사용자의 입력이 연속하여 처리됨에 의해업데이트되는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 1 항에 있어서,상기 아바타는 상기 상품 주문을 처리하는 화면 상에 오버레이되어 렌더링되는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 1 항에 있어서,상기 아바타의 출력 데이터는 상기 아바타의 이펙트(effect), 배경음 및 상기 아바타와 연관된 배경에 대한 데이터를 더 포함하는, 아바타 기반의 키오스크를 제어하는 서버 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "아바타(avatar) 기반의 키오스크를 제어하는 방법에 있어서,상기 키오스크로부터 사용자의 입력을 수신하는 단계;상기 사용자의 입력에 대응하여 아바타가 키오스크 기능을 수행하도록 하기 위한 아바타 에이전트(avataragent)의 실행을 제어하는 단계; 및상기 아바타 에이전트에 의해 생성된 아바타의 출력 데이터를 상기 키오스크로 제공하는 단계를 포함하되,상기 키오스크 기능은 상품 주문을 처리하는 기능을 포함하고,상기 아바타의 출력 데이터는 상품 주문을 처리하기 위한 상기 아바타의 표정, 립싱크, 바디제스쳐 및 음성 중적어도 둘에 대한 데이터를 포함하는, 아바타 기반의 키오스크를 제어하는 방법."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "아바타(avatar) 기반의 키오스크 장치에 있어서,사용자의 입력을 획득하는 입력부;아바타가 키오스크 기능을 수행하도록 하기 위한 아바타 에이전트(avatar agent)를 로딩하고, 상기 로딩된 아바타 에이전트를 통해 생성된 아바타가 상기 사용자의 입력에 대응하여 상기 키오스크의 기능을 수행하는 아바타관련 출력을 제어하는 프로세서; 및상기 프로세서에 의해 상기 아바타 관련 출력을 출력하는 출력부를 포함하되,공개특허 10-2025-0015974-5-상기 키오스크 기능은 상품 주문을 처리하는 기능을 포함하고,상기 아바타의 출력은 상품 주문을 처리하기 위한 상기 아바타의 표정, 립싱크, 바디제스쳐 및 음성 중 적어도둘을 포함하는, 아바타 기반의 키오스크 장치."}
{"patent_id": "10-2024-0095405", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "아바타(avatar) 기반의 키오스크 장치에 있어서,사용자의 입력을 획득하는 입력부;상기 사용자의 입력에 대응하여 아바타가 키오스크의 기능을 수행하도록 하기 위한 아바타 에이전트(avataragent)의 실행을 제어하는 프로세서; 및상기 프로세서에 의해 생성된 아바타의 출력 데이터를 출력하는 출력부를 포함하되,상기 키오스크 기능은 상품 주문을 처리하는 기능을 포함하고,상기 아바타의 출력 데이터는 상품 주문을 처리하기 위한 상기 아바타의 표정, 립싱크, 바디제스쳐 및 음성 중적어도 둘을 포함하는, 아바타 기반의 키오스크 장치."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 일 양태는 아바타(avatar) 기반의 키오스크를 제어하는 서버 장치를 개시하고 있다. 상기 장치는, 상 기 키오스크로부터 사용자의 입력을 수신하는 입력 수신부, 상기 사용자의 입력에 대응하여 아바타가 키오스크의 기능을 수행하도록 하기 위한 아바타 에이전트(avatar agent)의 실행을 제어하는 프로세서 및 상기 아바타 에이 전트에 의해 생성된 아바타의 출력 데이터를 상기 키오스크로 제공하는 출력 제공부를 포함하되, 상기 키오스크 의 기능은 상품 주문을 처리하는 기능을 포함하고, 상기 아바타의 출력 데이터는 상품 주문을 처리하기 위한 상 기 아바타의 표정, 립싱크, 바디제스쳐 및 음성 중 적어도 둘에 대한 데이터를 포함한다."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 아바타 기반의 키오스크에 관한 것으로, 보다 상세하게는, AI를 이용하여 아바타를 실시하는 키오스 크 장치 및 그것의 동작 방법, 그리고 이를 제어하는 서버 장치 및 그의 동작 방법에 관한 것이다."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 점차 사람들이 사용하는 시스템들이 무인화되면서 비대면 시장의 요구사항이 커지고 있다. 특히, 무인화에 대처하는 솔루션은 전통적인 ARS(Automatic Response System) 방식, 오프 라인에서는 키오스크나 패드용 앱 , 온라인에서는 모바일 앱이나 PC 앱 등의 소프트웨어가 존재한다. 이러한 여러 커뮤니케이션 미디어 기술을 이용 하여 기존의 대면 서비스를 무인화하고 있지만, 아직까지는 사람처럼 비정형적 요구상황에 대처하는 대면 응대 방식을 실시간으로 지원하는 솔루션이 많이 없는 형편이다. 한편, 최근 인공지능 기술의 발달로, LLM(Large Language Model)을 이용하여 사람과 AI(Artificial Intelligence)가 대화를 할 수 있는 시대가 도래하였지만, 아직까지는 텍스트나 보이스(voice)로만 커뮤니케이 션하는 수준에 머물고 있다. 사람의 커뮤니케이션은 언어 이외의 비언어적 요소(예를 들어, 표정, 몸짓, 목소리 톤 등)에서 문맥을 파악하고 만족감을 얻는데, 텍스트 및 보이스로만 이뤄지는 커뮤니케이션 방식은 자연스러운 만족감을 얻지 못하는 문제점이 존재한다. 이를 보완하기 위해, 최근 2D 영상 아바타를 이용하여 실시간 커뮤니케이션을 진행하고 있지만, 실사 이미지가 주는 부담감 및 세밀한 얼굴 표정 및 바디 제스쳐를 실시간으로 표현하는 데에는 기술적 한계가 존재하고 있고, 고해상도 영상을 스트리밍해야 하는 구조적인 문제점이 존재한다. 즉, 무인화에 대응하는 AI 서비스를 구축하는 데에는, LLM, 네트워크 구조 설계, 비즈니스 로직 설계, 아바타 실시간 대응 기술, 및 실시간 아바타 표현 등의 기술들을 모두 하나의 서비스에서 구현해야 하는 어려움이 있고, 각 분야마다 구축하는 노하우가 다르기에, 이를 구현하는 데에는 많은 어려움이 존재한다."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "상술한 문제점을 해결하기 위한 본 발명의 일 양태에 따른 목적은, AI 아바타를 통해 상품 주문을 처리하는 키 오스크 기능의 하위 기능들(예를 들어, LLM 구성 기능, 비즈니스 로직 구성 기능, 아바타 실시간 커뮤니케이션 기능 및 표현 기능)을 사용자가 쉽게 생성하고 사용자의 니즈에 맞게 커스터마이징하여 자체적으로 서비스 형태 로 운영할 수 있도록 하는 AI 아바타를 이용한 키오스크 장치 및 그의 동작 방법을 제공하는 것이다. 본 발명의 다른 양태에 따른 목적은, 현재까지 이러한 기술 및 서비스 표준이 정립되지 않고 있었는데, 위와 같 이 설정한 비즈니스 로직대로 사용자와 대화 가능한 AI 아바타 기반의 키오스크 기술을 체계화하고, 이를 API(Application Program Interface)화하여 SaaS(Software as a Service) 플랫폼의 형태로 제공하는 것이다. 본 발명의 또 다른 양태에 따른 목적은, 상기한 키오스크 기능을 수행하는 AI 아바타 어플리케이션의 기능을 온 디바이스 AI를 통해 제공하는 것이다."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기한 목적을 달성하기 위한 본 발명의 일 양태에 따른, 아바타(avatar) 기반의 키오스크를 제어하는 서버 장 치는, 상기 키오스크로부터 사용자의 입력을 수신하는 입력 수신부, 상기 사용자의 입력에 대응하여 아바타가 키오스크의 기능을 수행하도록 하기 위한 아바타 에이전트(avatar agent)의 실행을 제어하는 프로세서 및 상기 아바타 에이전트에 의해 생성된 아바타의 출력 데이터를 상기 키오스크로 제공하는 출력 제공부를 포함하되, 상 기 키오스크의 기능은 상품 주문을 처리하는 기능을 포함하고, 상기 아바타의 출력 데이터는 상품 주문을 처리 하기 위한 상기 아바타의 표정, 립싱크, 바디제스쳐 및 음성 중 적어도 둘에 대한 데이터를 포함할 수 있다. 상기 아바타의 출력 데이터는 상기 아바타의 이펙트(effect), 배경음 및 상기 아바타와 연관된 배경에 대한 데 이터를 더 포함할 수 있다. 상기 아바타 에이전트는 AI 기반의 상기 아바타가 키오스크의 기능을 수행하도록 하기 위한 AI 아바타 에이전트 일 수 있다. 상기 프로세서는, 상기 사용자의 입력에 대응하여 상기 상품 주문을 처리하는 인공지능 모델에 기반한 출력 텍 스트를 생성하고, 상기 출력 텍스트를 기반으로 상기 아바타의 출력 데이터를 생성할 수 있다. 상기 인공지능 모델은, 상기 상품 주문 처리를 구성하는 적어도 하나의 세부 기능을 수행하는 함수를 호출하기 위한 함수 호출(function call) 인공지능 모델, 상기 사용자와의 대화를 처리하기 위한 대화(conversation) 인 공지능 모델, 임베딩 모델(embedding model) 및 상기 출력 텍스트를 음성으로 변환하기 위한 TTS(Text-to- Speech) 모델 중 적어도 하나를 포함할 수 있다. 상기 프로세서에 의해 수행되는 상기 상품 주문의 처리는, (i) 메뉴를 선택하는 제 1 프로세스, (ii) 상기 제 1 프로세스에 의해 선택된 적어도 하나의 메뉴에 대한 옵션을 구분하는 제 2 프로세스, (iii) 상기 제 2 프로세스 에 의해 구분된 적어도 하나의 옵션에 대한 옵션값을 결정하는 제 3 프로세스 및 (iv) 상기 제 1 내지 제 3 프 로세스의 결과를 기반으로 상기 상품 주문을 완성하는 제 4 프로세스를 포함할 수 있다. 상기 메뉴는 판매 대상 상품의 최소 구분으로 미리 정의되고, 상기 옵션은 상기 메뉴에 부여되는 추가사항 및 변경사항 중 적어도 하나에 대한 분류로 미리 정의될 수 있다. 상기 옵션은 복수의 옵션 카테고리들로 구성되고, 하나의 옵션 카테고리는 하나의 옵션값만을 갖도록 구성될 수 있다. 상기 프로세서는, 상기 제 1 프로세스, 상기 제 2 프로세스, 상기 제 3 프로세스 및 상기 제 4 프로세스가 순차 적으로 수행되도록 제어하되, 상기 제 1 프로세스, 상기 제 2 프로세스, 상기 제 3 프로세스 및 상기 제 4 프로 세스는 각각 유효성 검증이 서로 다르게 미리 정의되어 있으며, 상기 프로세서는, 각 프로세스별 유효성 검증이 이루어짐에 응답하여 다음 프로세스로의 진행이 가능하도록 제어할 수 있다. 상기 프로세서는, 상기 각 프로세스별 유효성 검증에 실패했음에 응답하여 실패 메시지를 생성하되, 상기 실패 메시지가 상가 아바타의 출력과 함께 표현되도록 제어할 수 있다. 상기 프로세서는, 동의어 데이터베이스를 이용하여 상기 사용자의 입력에 대한 동의어를 처리할 수 있다. 상기 프로세서는, 인공지능 모델을 이용하여 상기 사용자의 입력으로부터 발화 의도를 구분하되, 상기 의도는 상품 주문, 정보 문의 및 일반 대화 중 하나로 구분할 수 있다. 상기 프로세서는, 상기 3가지 의도 중 주문임에 응답하여, 상기 사용자의 입력을 미리 저장된 정규표현식 패턴 과 매칭하고, 상기 매칭된 정규표현식 패턴을 기반으로 상기 상품 주문을 처리할 수 있다. 상기 정규표현식 패턴은, 상품 카테고리, 상품 식별자, 옵션 카테고리 및 옵셕 식별자 중 적어도 둘과 연관된 것일 수 있다.상기 프로세서는, 상기 아바타가 렌더링되는 제 1 영역 및 상기 상품 주문과 관련된 사용자의 입력 및 그에 대 응하는 상기 키오스크의 출력을 텍스트로 표시하는 제 2 영역을 포함하는 그래픽 사용자 인터페이스(GUI)를 상 기 키오스크로 제공하도록 제어할 수 있다. 상기 그래픽 사용자 인터페이스는 상기 상품 주문과 연관된 상태를 표시하는 제 3 영역을 더 포함할 수 있다. 상기 제 3 영역의 상기 상품 주문과 연관된 상태는 상기 사용자의 입력이 연속하여 처리됨에 의해 업데이트될 수 있다. 상기 아바타는 상기 상품 주문을 처리하는 화면 상에 오버레이되어 렌더링될 수 있다. 상기한 목적을 달성하기 위한 본 발명의 다른 양태에 따른, 아바타(avatar) 기반의 키오스크를 제어하는 방법은, 상기 키오스크로부터 사용자의 입력을 수신하는 단계, 상기 사용자의 입력에 대응하여 아바타가 키오스 크 기능을 수행하도록 하기 위한 아바타 에이전트(avatar agent)의 실행을 제어하는 단계 및 상기 아바타 에이 전트에 의해 생성된 아바타의 출력 데이터를 상기 키오스크로 제공하는 단계를 포함하되, 상기 키오스크 기능은 상품 주문을 처리하는 기능을 포함하고, 상기 아바타의 출력 데이터는 상품 주문을 처리하기 위한 상기 아바타 의 표정, 립싱크, 바디제스쳐 및 음성 중 적어도 둘에 대한 데이터를 포함할 수 있다. 상기한 목적을 달성하기 위한 본 발명의 또 다른 양태에 따른, 아바타(avatar) 기반의 키오스크 장치는, 사용자 의 입력을 획득하는 입력부, 아바타가 키오스크 기능을 수행하도록 하기 위한 아바타 에이전트(avatar agent)를 로딩하고, 상기 로딩된 아바타 에이전트를 통해 생성된 아바타가 상기 사용자의 입력에 대응하여 상기 키오스크 의 기능을 수행하는 아바타 관련 출력을 제어하는 프로세서 및 상기 프로세서에 의해 상기 아바타 관련 출력을 출력하는 출력부를 포함하되, 상기 키오스크 기능은 상품 주문을 처리하는 기능을 포함하고, 상기 아바타의 출 력은 상품 주문을 처리하기 위한 상기 아바타의 표정, 립싱크, 바디제스쳐 및 음성 중 적어도 둘을 포함할 수 있다. 상기한 목적을 달성하기 위한 본 발명의 다른 양태에 따른, 아바타(avatar) 기반의 키오스크 장치는, 사용자의 입력을 획득하는 입력부, 상기 사용자의 입력에 대응하여 아바타가 키오스크의 기능을 수행하도록 하기 위한 아 바타 에이전트(avatar agent)의 실행을 제어하는 프로세서 및 상기 프로세서에 의해 생성된 아바타의 출력 데이 터를 출력하는 출력부를 포함하되, 상기 키오스크 기능은 상품 주문을 처리하는 기능을 포함하고, 상기 아바타 의 출력 데이터는 상품 주문을 처리하기 위한 상기 아바타의 표정, 립싱크, 바디제스쳐 및 음성 중 적어도 둘을 포함할 수 있다."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 AI 아바타 기반의 키오스크 장치 및 그것의 동작 방법에 따르면, 키오스크에서 처리되는 다양한 기능 을 모듈화하여 구성하고 사용자가 이를 용이하게 조합하도록 함으로써, 아바타를 기반으로 키오스크 기능을 효 율적으로 사용할 수 있도록 하는 효과가 있다."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명은 다양한 변경을 가할 수 있고 여러 가지 실시예를 가질 수 있는 바, 특정 실시예들을 도면에 예시하고 상세하게 설명하고자 한다. 그러나, 이는 본 발명을 특정한 실시 형태에 대해 한정하려는 것이 아니며, 본 발명의 사상 및 기술 범위에 포 함되는 모든 변경, 균등물 내지 대체물을 포함하는 것으로 이해되어야 한다. 제 1, 제 2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 상기 구성요소들은 상기 용어들에 의해 한정되어서는 안 된다. 상기 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용 된다. 예를 들어, 본 발명의 권리 범위를 벗어나지 않으면서 제 1 구성요소는 제 2 구성요소로 명명될 수 있고, 유사하게 제 2 구성요소도 제 1 구성요소로 명명될 수 있다. 및/또는 이라는 용어는 복수의 관련된 기재된 항목 들의 조합 또는 복수의 관련된 기재된 항목들 중의 어느 항목을 포함한다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이 해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있 다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 본 출원에서 사용한 용어는 단지 특정한 실시예를 설명하기 위해 사용된 것으로, 본 발명을 한정하려는 의도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 출원에서, \"포함 하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조 합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부 품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가지고 있다. 일 반적으로 사용되는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미 를 가진 것으로 해석되어야 하며, 본 출원에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의 미로 해석되지 않는다. 이하, 첨부한 도면들을 참조하여, 본 발명의 바람직한 실시예를 보다 상세하게 설명하고자 한다. 본 발명을 설 명함에 있어 전체적인 이해를 용이하게 하기 위하여 도면상의 동일한 구성요소에 대해서는 동일한 참조부호를 사용하고 동일한 구성요소에 대해서 중복된 설명은 생략한다. 도 1은 본 발명의 일 실시예에 따른 AI 아바타 에이전트(AI Avatar Agent)가 적용되는 시스템을 나타낸 개념도 이다. 도 1에 도시된 바와 같이, 본 발명의 일 실시예에 따른 AI 아바타 에이전트를 실행하는 시스템은 사용자 장치(110-1~110-N) 및 서버를 포함할 수 있다. 도 1을 참조하면, 사용자 장치(110-1~110-N)는 서버에 접속하여 AI 아바타 에이전트(AI Avatar Agent)를 로딩할 수 있다. 그리고, 로딩된 AI 아바타 에이전트를 실행하여 아바타를 통해 특정 목적에 맞는 기능을 수행 하는 장치이다. 사용자 장치(110-1~110-N)는 서버에서 제공하는 AI 아바타 에이전트를 로딩하고, 이를 실 행하여 아바타를 표시할 수 있다. AI 아바타 에이전트는 서버를 통해 SaaS 형태로 제공되는 아바타 실행 앱(application)일 수 있다. 여기서, AI와 연관된 기능 부분을 생략하고 동작할 수도 있다. 이는 아바타 에이전트라고 부를 수 있다. 본 명세서 상에서, AI 아바타 에이전트라고 기재된 부분에 AI와 연관된 딥러닝 모델이 사 용될 수도 있고, 그렇지 않을 수 있다. 따라서, AI 아바타 에이전트라고 기재된 부분에, AI 기능 없이, 단순 아"}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "바타를 통해 어플리케이션의 기능을 수행하는 아바타 에이전트가 대체될 수 있음은 본 발명이 속하는 기술분야 의 통상의 기술자에게는 자명한 것일 것이다. 한편, 사용자 장치(110-1~110-N)는 AI 아바타 에이전트를 통해 아바타를 생성할 수 있다. 생성된 아바타는 LLM(Large Language Model) 또는 SLM(Small Language Model)을 기반으로 동작한다. LLM은 거대언어모델로, 인 공신경망으로 구성되는 언어모델이다. SLM은 소형 언어모델로, LLM에 비해 크기(파라미터 수)가 적으면서 LLM과 유사한 성능을 내는 언어모델을 의미한다. 본 명세서 상에서, LLM이 사용되는 부분에 SLM 또는 그와 유사한 자 연어 처리 모델(NLP: Natural Language Processing) 및/또는 다른 인공지는 모델(예를 들어, CNN, RNN, Bi-GRU"}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "및 그들의 조합)이 사용될 수 있음은 본 발명이 속하는 기술분야의 통상의 기술자에게는 자명한 것일 것이다. 한편, LLM 기반으로 동작하는 아바타를 AI 아바타라 부를 수 있다. 사용자 장치(110-1~110-N)는 AI 아바타를 생 성하여, 사용자와 AI가 음성 및 텍스트 등을 통해 인터랙션(interaction)하도록 지원할 수 있다. 사용자 장치 (110-1~110-N)는 AI 아바타 에이전트를 통해, 사용자와 인터랙션하면서, 사용자의 입력에 대응하는 출력을 생성 하여 표시할 수 있다. AI 아바타 에이전트는 문맥 기반 딥러닝 모델(context-based deep learning model)을 이 용하여 아바타의 표정, 립싱크(lip sync), 바디제스쳐(body gesture) 및 음성 중 적어도 일부를 생성할 수 있다. 특히, 상기 데이터 종류들 중 둘 이상의 것을 생성하도록 제어하여, 사용자의 입력에 대응한 최적의 아바 타 출력이 생성될 수 있도록 할 수 있다. 추가적으로, AI 아바타 에이전트는 아바타의 이펙트(effect) 및 아바 타와 연관된 배경에 대한 데이터를 생성할 수 있다. 여기서, 이펙트는 조명, 말풍선 등의 부가적인 시각적 효과 및 효과음에 대한 것일 수 있다. 배경은 아바타 주변의 이미지 및 배경음악 등에 대한 것을 포함할 수 있다. LLM을 기반으로 사용자의 질의가 있을 때, 그에 맞는 답변을 준비하여 아바타를 통해 표시한다. 이때, 답변에 맞는 표정 및/또는 바디제스쳐가 함께 표현되도록 제어할 수 있다. 또한, 음성을 출력함과 동시에, 음성에 맞는 립싱크가 이루어지도록 제어할 수 있다. 사용자 장치(110-1~110-N)는 다양한 기능을 지원하는 어플리케이션을 실행하는 장치일 수 있다. 예를 들어, 상 품 주문을 처리하는 장치, 특정 장소 안내를 하는 장치, 수학/영어 등 교육 서비스를 제공하는 장치, 게임 기능 을 제공하는 장치, 결제를 수행하는 장치, 특정 웹 사이트의 정보를 학습하는 장치, 특정 상황을 구현하는 AR/VR(Augmented Reality/Virtual Reality) 장치 등 다양한 기능을 수행하는 장치로 구현될 수 있다. AI 아바 타 에이전트는 위와 같이 다양한 기능을 아바타를 이용하여 지원하도록 설계될 수 있고, 사용자 장치(110- 1~110-N)는 이와 같이 목적에 맞게 커스터마이징된 AI 아바타 에이전트를 로딩하여 실행시킴으로써, 관련 기능 을 적용할 수 있다. 사용자 장치(110-1~110-N)는 다양한 형태의 하드웨어 장치로 구현될 수 있다. 이는 단말 또는 장치라고 부를 수 도 있다. 특히, 본 명세서의 뒤에 나오는 내용을 기반으로 할 때, 키오스크 장치, 홈페이지 안내 장치 등으로 부를 수 있다. 이에 대응하여, 서버 또한, 키오스크 기능 제어 장치, 홈페이지를 안내하도록 제어하는 장 치 등으로 부를 수 있다. 사용자 장치는, 예를 들어, 이동국(MS), 사용자 장비(UE; User Equipment), 사용자 터미널(UT; User Terminal), 무선 터미널, 액세스 터미널(AT), 터미널, 고정 또는 이동 가입자 유닛(Subscriber Unit), 가입자 스테이션(SS; Subscriber Station), 셀룰러 전화, 무선 기기(wireless device), 무선 통신 디바이스, 무선송수 신유닛(WTRU; Wireless Transmit/Receive Unit), 이동 노드, 모바일, 모바일국, 개인 휴대 정보 단말(personal digital assistant; PDA), 스마트폰, 랩톱, 넷북, 개인용 컴퓨터, 무선 센서, 키오스크 장치, 소비자 전자기기 (CE) 또는 다른 용어들로서 지칭될 수 있다. 사용자 장치(110-1~110-N)의 다양한 실시예들은 셀룰러 전화기, 무 선 통신 기능을 가지는 스마트 폰, 무선 통신 기능을 가지는 개인 휴대용 단말기(PDA), 무선 모뎀, 무선 통신 기능을 가지는 휴대용 컴퓨터, 무선 통신 기능을 가지는 디지털 카메라와 같은 촬영장치, 무선 통신 기능을 가 지는 게이밍 장치, 무선 통신 기능을 가지는 음악저장 및 재생 가전제품, 키오스크 장치, 무선 인터넷 접속 및 브라우징이 가능한 인터넷 가전제품뿐만 아니라 그러한 기능들의 조합들을 통합하고 있는 휴대형 유닛 또는 단 말기들을 포함할 수 있으나, 이에 한정되는 것은 아니다. 서버는 AI 아바타 에이전트를 생성 및 서비스하는 장치일 수 있다. 서버는 무선 및/또는 무선 네트워 크를 통해 다양한 사용자 장치(110-1~110-N)와 통신하면서, 사용자 장치(110-1~110-N)에 AI 아바타 에이전트를 배포할 수 있다. 전술한 바와 같이, AI 아바타 에이전트는 SaaS 플랫폼으로 사용가능하게 제공될 수 있다. 서버 는 URL 주소, 링크 주소 등을 통해, 웹 브라우저뿐만 아니라 앱을 이용하여, AI 아바타 에이전트를 배포할수 있다. 또는, 외부 장치를 통해 접속가능한 링크를 제공하여, 이를 통해 AI 아바타 에이전트를 배포할 수 있 다. 서버를 통해 배포되는 SaaS 플랫폼은 다음의 주요 기능을 제공할 수 있다. 1) AI 아바타 등록 - 아바타 설정 (아바타 외형에 해당되는 3D 아바타 선택) - 보이스 설정 (아바타의 음성을 선택) - LLM 워크플로우 설정 (아바타의 두뇌에 해당되는 LLM 및 기타 비즈니스 로직과 DB 설정) - 캐릭터 설정 (아바타의 행동 양식 및 캐릭터성 설정하여 추후 아바타 애니메이션의 특성을 결정) - 아바타 모션 설정 (아바타의 제스쳐의 특성을 결정) - 아바타 이펙트 및 배경 설정 (아바타에게 적용가능한 시각적/청각적 이펙트 및 배경화면, 배경음에 대한 특성 을 결정) 2) AI 아바타 플레이 그라운드(Playground) - 등록된 AI 아바타를 테스트 및 수정할 수 있는 웹 화면 - AI 아바타 에이전트를 실행할 수 있는 웹 URL 배포 - AI 아바타 에이전트를 액세스 및 컨트롤할 수 있는 API end-point 배포 3) AI 아바타 페이지 제공 - AI 아바타 에이전트는 설정된 LLM 비즈니스 로직에 기반하여 사용자와 실시간으로 커뮤니케이션 할 수 있는 API 및 싱글 웹 페이지(Single web page) 제공 - 보이스 및 비주얼 아바타를 사용하여 실제 음성으로 AI 아바타와 대화하는 인터페이스를 제공할 수 있음 한편, 위와 같은 AI 아바타 에이전트 기능을 제공하는 서버는 LLM 기반의 다양한 워크플로우(LLM workflow)(WF라고 부를 수 있음)를 정의하고 이를 실행할 수 있는 프레임워크(framework)를 보유하고 있을 수 있다. LLM 워크플로우는 SLM 워크플로우 또는 워크플로우 등으로 불릴 수 있다. 특히, 서버는 AI 아바타 에이전트의 대화 내용을 제어하는 기능을 아바타 생성시 비즈니스 로직으로 설정할 수 있도록 허여한다. 이러한 기능을 제공하여 특별한 프로그램 개발 지식 없는 사용자들도 여러 케이스의 비즈니스 로직을 AI 아바타 에이전 트로 설정할 수 있다. 또한, 이러한 AI 아바타 에이전트가 웹 페이지 형태로 제공될 수 있도록 하여 별도의 하 드웨어 및 OS에 의존적이지 않도록 할 수 있다. 이와 같이, 사용자 장치(110-1~110-N)는 서버의 AI 아바타 에이전트 설계 사용자 인터페이스를 이용하여 사용자의 목적에 맞는 AI 아바타 에이전트를 설계할 수 있다. 이 렇게 커스터마이징되어 설계되는 각 응용 케이스별 AI 아바타 에이전트는, 서비스 적용 권리 보호 기능을 통해 특정 사용자만 사용할 수 있도록 제어될 수 있다. 한편, 서버 장치는 대용량 컴퓨팅 장치로 구현될 수 있다. 다만, 반드시 대용량으로 구현되어야 하는 것은 아니고, 일반적인 컴퓨팅 장치로 구현될 수도 있다. 다른 예에서, 서버의 기능은 사용자 장치(110-1~110-N)에서 온 디바이스 AI에 의해 실행될 수 있다. 이때, 사용자 장치(110-1~110-N)는 사용자 입력을 획득하여, 서버와의 연계동작 없이, 자체적으로 AI 아바타 에이전트 를 실행할 수 있고, 실행 결과로 아바타 출력 데이터를 생성하여 직접 사용자에게 출력할 수 있다. 도 2는 본 발명의 일 실시예에 따른 AI 아바타 에이전트와 LLM 워크플로우(LLM workflow)의 연동 방법을 개략적 으로 나타낸 개념도이다. 도 2를 참조하면, 사용자는 사용자 단말에 입력 정보를 제공할 수 있다. 이때, 입력정보는 일반적으 로, 음성 신호가 될 수 있다. 경우에 따라서는, 텍스트 입력 등도 가능하다. 음성 신호가 입력되면, 사용자 단 말은 STT 모듈을 이용하여 음성 신호를 텍스트 신호로 변환할 수 있다. 이러한 STT 모듈은 AI 아바타 에이 전트와 연동을 위해 제공되는 AI 아바타 SDK에 의해 동작할 수 있다. 다만, STT 모듈에 따른 음성-텍스트 변환 이 반드시 단말 측에서 수행되어야만 하는 것은 아니고, 경우에 따라 서버 측에서도 수행될 수 있다. 텍스트로 입력될 경우, STT 모듈은 동작하지 않아도 된다. 단말에서 변환된 텍스트 정보는 웹 소켓(web socket) 등을 통해 실시간으로 AI 아바타 에이전트로 제 공된다. 앞서 설명한 바와 같이, AI 아바타 에이전트는 웹 브라우저를 통해 특정 URL에 접속하여 실행될 수도 있고, 앱(APP)을 통해 접속가능한 딥 링크(deep link) 및 외부 장치에서 접속 가능한 링크 등을 이용하여 실행될 수 있다. AI 아바타 에이전트는 별도의 앱 설치 과정 없이 이용 가능하도록 제공될 수 있다. 다른 예에서는, 앱 설치를 통해 이용가능하도록 제공될 수도 있다. 텍스트 입력이 들어오면, AI 아바타 에이전트 는 이를 LLM 워크플로우로 제공하여, 입력에 대한 적절한 답변을 획득할 수 있다. 여기서, AI 아바타 에이전트, LLM 워크플로우 장치, TTS 모듈 및 AUDIO2AVATAR 모듈은 서버 측의 컴퓨팅 장 치이다. 이는 하나의 서버 장치로 구현될 수도 있고, 기능별로 서로 다르게 조합되어 서로 다른 복수의 컴퓨팅 장치로 구현될 수도 있다. 즉, AI 아바타 에이전트 및 LLM 워크플로우 장치가 제 1 서버 장치를 구성 하고, TTS 모듈이 제 2 서버 장치를 구성하며, AUDIO2AVATAR 모듈이 제 3 서버 장치를 구성할 수 있 다. 한편, AI 아바타 에이전트로 들어온 사용자의 입력에 대해, LLM 워크플로우는 답변을 생성하고, 생성 된 답변은 TTS 모듈로 제공되어, 음성으로 변환될 수 있다. TTS 모듈에서 생성된 음성 출력은 직접 AI 아바타 에이전트로 제공될 수 있다. 또한, 상기 음성 출력은 AUDIO2AVATAR 모듈로 제공될 수 있다. AUDIO2AVATAR 모듈은 상기 음성 출력을 수신하여, 이를 아바타에 적합한 데이터로 변환한다. 이는, 음성- 아바타 변환 모듈이라 부를 수 있다. 또한, 이는 Audio to Speech and Motion Avatar로 표현될 수 있다. 일 예 로, 상기 음성 출력에 대응하여 적합한 아바타의 표정으로 데이터를 변환할 수 있다. 또한, 음성 출력에 대응하 여 적합한 아바타의 바디 제스처로 변환할 수도 있다. 이렇게 변환된 아바타의 표정 및/또는 바디 제스처 출력 정보는 출력 플로우로 AI 아바타 에이전트에 전달된다. AUDIO2AVATAR 모듈에 대한 설명은 도 3을 통 해 보다 상세히 설명한다. AI 아바타 에이전트는 TTS 모듈 및 AUDIO2AVATAR 모듈로부터 음성 출력 및 그에 대응하는 아바 타의 동작들(표정 및/또는 바디 제스처)에 대한 정보를 획득하고, 이를 웹 소켓 등을 통해 실시간 스트리밍하여 사용자 단말에서 렌더링될 수 있도록 허여한다. 즉, 사용자 입력에 대응하는 답변을 아바타가 자연스럽게 표현할 수 있도록 사용자 단말로 아바타 출력 데이터를 전송하는데, 이때, 전송되는 아바타 출력 데이터에 는 음성, 표정, 립싱크, 바디제스쳐 및 텍스트 중 적어도 둘이 포함될 수 있다. 또한, 비주얼 이펙트, 배경 및 효과음과 연관된 데이터를 더 포함할 수 있다. 사용자 단말은 AI 아바타 에이전트를 통해 사용자 단 말로 제공되는 아바타 출력 데이터를 수신하여, 사용자에게 음성 출력과 아바타의 애니메이션 렌더링 출력 을 함께 제공한다. 부가적으로, 상기 음성 출력에 대응하는 텍스트도 출력되도록 할 수 있다. 도 3은 도 2의 AUDIO2AVATAR 모듈의 동작을 보다 구체적으로 설명하기 위한 개념도이다. 도 3을 참조하면, AUDIO2AVATAR 모듈은 제 1 추론 서버 및 제 2 추론 서버와 연동할 수 있다. AUDIO2AVATAR 모듈이 음성 출력 정보(사용자 입력에 대한 답변)를 전달하면, 제 1 추론 서버는 이를 기반 으로 아바타의 표정에 대한 출력 정보(즉, 페이셜 블렌드쉐이프(facial blendshape))를 생성한다. 이는 딥러닝 기반의 출력 워커(deep-learning inference worker)를 통해 이루어질 수 있다. 이를 통해, 음성 출력에 대한 문맥 기반의 자연스러운 얼굴 표정과 립싱크에 대한 출력 정보가 생성될 수 있다. 그리고, 이것이 아바타에 입 혀지면, 연출 기반의 생성 애니매이션이 지원될 수 있다. 이와 마찬가지로, AUDIO2AVATAR 모듈이 음성 출력 정보를 전달하면, 제 2 추론 서버는 이를 기반으로 아바 타의 바디 제스쳐(모션)에 대한 출력 정보를 생성한다. 이 역시 딥러닝 기반의 출력 워커를 통해 이루어질 수 있다. 이를 통해, 음성 출력에 대한 문맥 기반의 자연스러운 바디 애니메이션에 대한 출력 정보가 생성될 수 있 다. 그리고, 이것이 아바타에 입혀지면, 연출 기반의 생성 애니매이션이 지원될 수 있다. 제 1 추론 서버와 제 2 추론 서버를 통해 생성된 얼굴 표정, 립싱크에 대한 출력 정보 및 바디 제스 쳐에 대한 출력 정보는 도 2의 AUDIO2AVATAR 모듈로 제공될 수 있다. 추가적으로, 제 3 추론 서버(미도시)는 음성 출력 정보에 대응하여, 그와 연관된 비주얼 이펙트, 배경 및 효과 음에 대한 정보를 생성할 수 있다. 그리고는, 이 정보를 AUDIO2AVATAR 모듈로 제공할 수 있다. 도 4는 본 발명의 일 실시예에 따른 LLM 워크플로우(LLM workflow)를 실행하는 모듈의 구성을 나타낸 블록도이 다. 도 4에 도시된 바와 같이, 본 발명의 일 실시예에 따른 LLM 워크플로우는 적어도 하나의 분류기(410: classifier), 툴(420: tool), RAG(Retrieval Augmented Generation) 모듈 및 LLM을 포함할 수 있다. 도 4를 참조하면, 서버에서 제공하는 AI 아바타 에이전트는 다양한 LLM 워크플로우(WF)의 조합으로 구현될 수 있다. 즉, 하나의 AI 아바타 에이전트는 다수의 LLM 워크플로우로 구성될 수 있다. 다만, 하나의 LLM 워크플로우로 구성되는 것도 가능하다. LLM 환경은 특정 비즈니스 목적을 수행할 수 있는 비즈니스 로직이 세팅되어 있을 수 있다. 이러한 LLM 환경 설 정 블록을 LLM 워크플로우라고 부를 수 있다. LLM 워크플로우는 일반적인 LLM이 처리할 수 없는 룰 베이스 혹은 정형화된 비즈니스 로직을 LLM을 통해 대화형으로 처리할 수 있도록 설정한 것이다. 이는 실행 환경을 제공하는 하나의 소프트웨어 라이브러리 블록 집합체인 프레임워크로 구성될 수 있다. 일반적으로, LLM이 대화 단위의 턴제(turn by turn) 방식의 대화는 가능하지만, 비즈니스 로직에 맞게 대화하고 로직을 실행하도록 하는 방식으로는 동작하지는 않는다. 이에, 본 발명의 일 실시예에 따른 LLM 워크플로우는 위와 같은 방식을 지원하기 위한 것으로 설계되는 것이 바람직하다. 예를 들어, 일반적인 LLM에서는, 회사 데이 터에 접속하고, 나아가 이에 기반한 지식을 제공하는 기능, 혹은 특정 기능 수행 후 대화를 이어나가는 등의 기 능은 제공하지 않고 있으며, 이러한 부분은 개발자들이 케이스 별로 개발해야 했다. 하지만, 본 발명의 일 실시 예에 따른 LLM 워크플로우는 개발 지식이 없는 사용자가 서비스의 설정에 대한 입력을 수행함에 의해, 쉽게 원 하는 기능을 제공할 수 있게 구성된다. 한편, 이러한 기능을 수행하도록 하기 위한 LLM 워크플로우 실행 모듈은, 앞서 설명한 바와 같이, 분류기, 툴, RAG 모듈 및 LLM을 포함할 수 있다. 먼저, LLM은 LLM 서비스 API(LLM service API)와 연동하여 인공지능 기반으로, 사용자 입력에 대응하는 답 변을 제공한다. 앞서 설명한 바와 같이, LLM은 SLM 등 다른 인공지능 모델로 대체되어도 무방하다. RAG 모듈 은 프롬프트 라이터(prompt writer)로써 기능한다. 즉, LLM에 제공되는 증강된 답변 요청 메시지를 생성하는 기능을 수행한다. LLM과 RAG 모듈에 대한 설명은 이하 도 5에서 보다 상세히 설명한다. 분류기는 LLM 워크플로우가 제공하고자 하는 단위 기능에 도달하기 위해 사용자 입력의 의도를 분류하는 기능을 수행한다. 분류기는 사용자의 입력에 대한 정보(text_message)를 텍스트 형태로 제공받는다. 플러 스, 분류기에는 현재 상태에 대한 정보가 제공될 수 있다. 분류기는 수신된 정보들을 기반으로 사용 자의 입력(텍스트)이 어떠한 의도인지 분류한다. 본 발명의 일 실시예에 있어서, 분류기는 툴과 연동하여 LLM에 입력되는 사용자의 입력(질문)을 증강할 수 있다. 즉, 사용자의 입력 정보를, 적어도 하나의 툴을 사용하여 가공한 후 LLM에 입력할지, 아니면 툴을 사용하지 않고 직접 LLM에 입력할지 결정한다. 사용자 입력의 처리가 비교적 간단하여 별도의 가공작업 없이 LLM에서 처리가 가능하다고 판단되면, 분류기는 LLM으로 사용자 입력을 직접 전달한다. 그렇지 않은 경우, LLM은 툴을 호출하여 LLM에 입력되기 전에 이에 대한 전처리가 이루어지도록 한다. 다시 말해, 분류기는 사용자 입력에 대응하여, 정확한 기능 호출(툴의 호출)이 필요한지, 그리고 이 때, 어떤 기능을 호출할지를 결정할 수 있다. 전술한 바와 같이, 특별히 툴의 호출이 필요하지 않다고 판 단되면, 직접 사용자의 입력에 대한 정보를 LLM에 입력한다. 또는, 툴을 거치지 않고, RAG 모듈(43 0)에 사용자의 입력을 전달하여, RAG 모듈에서 증강된 답변 요청 메시지가 LLM에 제공될 수 있도록 할 수 있다. 분류기는 다수의 툴들 중 정확히 필요한 기능의 툴 API를 호출하는 기능을 수행한다. 툴 호출을 위해, 툴 실행 명령을 툴에게 제공한다. 분류기는 툴을 호출할지, 그리고 호출될 툴을 최 적으로 구분하기 위해, LLM 기반으로 자연어 해석이 가능한 모듈로 구현될 수 있다. 기능을 호출한다는 측면에 서, 분류기는 기능/함수 호출 LLM(function call LLM)이라고 부를 수 있다. 즉, 함수 호출 LLM과 같이 동 작할 수 있다. 즉, 분류기는 함수 호출을 사용하여, 사용자의 질문에 적합한 애플리케이션 함수와 매개변 수를 추천받을 수 있다. LLM과 같이, 분류기도 용도에 맞게 학습이 가능하다. 분류기는 특정 의도에 대응하는 툴의 사용 여부를 결정할 수 있고, 툴 분류 뿐만 아니라, 개별 툴의 tool_args 값들도 파싱(parsing)하는 기능을 수행한다. 이를 통해, 애플리케이션 함수와 매개별수를 특정하여, 적절한 툴을 호출할 수 있다. 본 발명의 일 실시예에 따르면, 분류기는 멀티-레이어드된 분류기(multi-layered classifier)로 구현될 수 있다. 예를 들어, \"아이스 아메리카노 한잔 주세요\"와 같이 간단한 사용자 요청을 분류할 수 있는 정규표현식 (regex) 기반의 분류기를 최상위 분류기로 두고, 상위 분류기에서 분류되지 않으면(unclassfied), 점점 더 복잡한 하위 분류기를 사용하는 구조를 가지도록 구성할 수 있다. 즉, 위에서 아래로 내려갈수록 리콜(recall) 이 올라가는 구조를 가질 수 있다. 하위 분류기에서의 분류 결과가 상위 또는 최상위 분류기에 누적 저장되도록함으로써, 시간이 지날수록, 하위 분류기에 의해, 최상위 분류기를 위한 정답 데이터가 쌓이도록 할 수 있다. 이를 기반으로 상위 레이어의 분류기를 주기적으로 튜닝(tuning)해나갈 수 있다. 그리고, 시간이 지남에 따라, 분류 품질이 나아지도록 할 수 있다. 이를 통해, 분류 속도 및 비용의 개선을 달성할 수 있다. 한편, 분류기가 사용자의 의도를 분류하고 나면, 분류기은 이러한 의도를 구체화하는 값(arguments) 을 결정할 수 있다. 이때, arguments 값은 함수 호출에 제공되는 매개변수(또는 인수) 값일 수 있다. 즉, 함수 를 정의하는 값일 수 있다. 그리고, 이를 기반으로 생성된 툴 실행명령(tool_args)을 툴로 제공한다. 이는 벡터 값으로 표현될 수 있다. 예를 들어, 사용자의 입력 \"아이스 아메리카노 주세요\"라는 텍스트에 대응하여 분 류기는 \"특정 메뉴\"를 장바구니에 추가하고 싶다는 의도를 분류한다. 이때, \"특정 메뉴\"는 \"아이스 아메리 카노\"가 된다. 또한, 사용자 장치로의 출력으로 \"아이스 아메리카노 한잔을 추가했어요. 얼음은 어떤걸로 해드 릴까요?\"를 내보냄에 응답하여, 사용자 입력으로 \"작은 걸로 해줘\"라는 텍스트가 입력됐을 때, 분류기는 \"특정 메뉴\"의 \"옵션 카테고리\"를 \"옵션값\"으로 변경하고 싶다는 의도를 추출할 수 있다. 이때, \"특정 메뉴\"는 \"아이스 아메리카노\"가 되고, \"옵션 카테고리\"는 \"얼음 종류\"가 되며, \"옵션값\"이 \"작은 얼음\"이 된다. 상태 (state)의 측면에서 보면, 현재 상태가 (아이스 아메리카노, 한 잔)이 되고, 다음 상태는 옵션 카테고리와 옵션 값으로, (얼음 종류, 작은 얼음)이 된다. 이와 같이, 툴에도 현재 상태에 대한 정보가 입력되고, 툴 실행 결과를 기반으로, 다음 상태에 대한 정보가 출력되도록 할 수 있다. 이러한 출력은 RAG 모듈로 제공된다. 또한, LLM에 질의하기 위한 답변 요청 메시지(next_message) 또는 그의 기초 메시지(message(guideline to llm))가 툴로부터 RAG 모듈로 제공될 수 있다. 한편, RAG 모듈은 사용자의 의도가 담긴 문의에 대한 적절한 답변을 생성한다. 이때, 적절한 답변을 만들 기 위해서는, 외부 시스템으로부터 필요한 정보를 얻어올 필요가 있을 수 있다. 리트리버(Retriever)(미도시)가 이러한 기능을 수행한다. 현재 재고가 있는지를 확인하고, 주문된 메뉴의 옵션 정보를 확인할 수 있다. 그리고, 얻어온 정보를 기반으로 정보성 있는 텍스트를 생성한다. 예를 들어, \"현재 아이스 아메리카노가 다 떨어져서 주문하실 수 없어요.\"라는 텍스트를 생성할 수 있다. 상기 텍스트가 RAG 모듈에서 생성되면, 사용자 프롬 프트와 함께 LLM에 전달되어 적절한 응답을 받을 수 있다. LLM 워크플로우의 기능을 보다 구체적으로 살펴보면, 툴은 분류된 의도에 대응하여 LLM 워크플로우의 단위 기능에 도달하도록 세부기능을 처리하는 구성요소이다. 세부기능은 단위 기능보다 작은 단위의 기능일 수 있다. 이 역시, 하나 또는 다수 개의 조합으로 구성될 수 있다. 일 예로, 상품 주문을 처리하는 에이전트에 있어서, 툴은 메뉴 추가, 메뉴 취소, 옵션 추가, 옵션 취소, 옵션 값 결정, 옵션 값 변경, 결제, 상품 품절 여부 확인, 필수 옵션이 없는지 확인, 개별 기능 진행 중 오류에 대한 안내 메시지 출력 등의 세부 기능을 수행하는 구성요소일 수 있다. 분류기는 위의 다양한 툴의 기능을 미리 알고 있고, 사용자의 입력에 대응하여 적절한 툴을 호출한다. LLM 워크플로우와 툴은 다음의 변수들로 정의될 수 있다."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "여기서, 하나의 LLM 워크플로우 W는 하나의 단편적인 목적성을 가질 수 있다. 예를 들어, \"장바구니를 완성한다.\" 등의 단위 목적을 가질 수 있다. 이는 W(T,S,c,R)로 정의될 수 있다. 이는 워크플로우 W가 툴(420: T), 데이터 모델(S), 분류기(410: c) 및 리트리버(R)(미도시)에 의해 정의될 수 있음을 의미한다. 여기서, T은 W의 목적에 도달되기 위한 \"사용자의 발화 의도\"(분류기에 의해 분류된 것일 수 있음)를 처리 하는 도구들의 집합을 나타낸다. - 툴 디스크립션(Tool Description): 툴이 처리하는 사용자의 의도에 대한 명세 (예: 장바구니에 음료 추 가) - 툴 파라미터 시그니쳐(Tool Parameter Signature): 사용자의 의도를 구체화하기 위해 필요한 변수들의 타입 명세 - next_message: 사용자 질문에 대한 답변 메시지를 만들어내는 함수 - next_state: 사용자 질문으로 변하게 될 상태(state)를 정의하는 함수 - is_ok_to_proceed : 사용자의 요청이 다음 상태(state)로 넘어갈 수 있는지를 판별하는 함수 툴은 위의 함수들을 처리하여, 사용자의 의도를 처리한다. 한편, next_state 및 next_message의 시그니쳐 및 입력 스페이스(input space)는 분류기가 출력하는 툴 요청(tool_args 또는 toolcalls)의 출력과 동일한 것을 사용할 수 있다. 즉, product_id와 같은 객체는 상태 (state)를 정제해주기 위한 중간 내부 데이터 같이 취급될 수 있다. 데이터 모델(S)는 사용자와 아바타 기반의 챗봇 사이에서의 대화를 주고받으면서 점점 구체화되어지게 될 데이 터 모델을 나타낸다. 주로 W의 목적에 부합하는 데이터 모델이 될 수 있다. 일 예로, \"아이스 아메리카노 주세 요\"라는 사용자 입력에 대해, 데이터 모델(S)는 장바구니 데이터가 된다. 그리고, 이때, 툴은 데이터 모델 (S)인 장바구니 데이터를 채우는 기능을 수행하는 도구가 된다. 즉, W는 S(데이터 모델, 스테이터스(status))를 채우는 과정이라고 볼 수 있다. 예를 들어, 장바구니 완성이라는 워크플로우는 비어있는 장바구니(S에 대응)를 생성한 후, 이를 채우는 과정으로 정의된다. 이때, c(분류기)는 T를 호출할지 바로 LLM으로 질의할지를 결정하 고, T는 데이터를 채우기 위해 필요한 세부기능들(함수)을 정의한 것이 된다. 앞서 설명한 바와 같이, c 및 T는 다수 개로 정의가 가능하다. c와 T는 서로 연동한다. c와 T는 하나의 그룹과 같이 동작할 수 있다. 한편, 리트 리버는 T에서 필요할 수도 있고, 아닐 수도 있다. 이 역시 다수 개로 정의 가능하다. c(분류기)는 사용자의 요청 텍스트가 어떤 Ti의 의도에 해당하는지를 분류하는 구성요소이다. 앞서 설명한 바와 같이, c는 T를 분류만 하는 것이 아니라 해당 Ti의 tool_args 값들을 파싱해서 분석된 의도에 적절한 Ti를 불러 내는 역할을 수행한다. 마지막으로 W를 구성하는 R(리트리버(retriever))은 외부로부터 데이터를 읽어오는 역할을 하는 검색 구현체(들)이다. T의 함수들이나 c의 구현체에서 사용될 수 있다. 분류기(c)에서의 리트리버는 tool args를 판 별하는데 사용될 수 있다. 이는 자연어로 추출된 arg를 id 체계로 변환하는 동작으로 구현될 수 있다. 본 발명의 LLM 워크플로우와 연관된 제 1 실시예에 있어서, 사용자 장치가 키오스크라고 가정할 때, 장바구니를 완성하는 AI 아바타 에이전트의 LLM 워크플로우는 다음과 같이 동작할 수 있다. 이를 장바구니 완성 API(cart completion API)라고 부를 수 있다. 이를 add_menu라고 정의할 수 있다. 먼저, W의 목표는 \"사용자가 원하는 음료 구성이 담긴 장바구니를 완성하고자 한다\"로 정의될 수 있다. 이때, 데이터 모델(S)은 장바구니 데이터 모델 ('Cart')로 결정될 수 있다. 데이터의 특이점은 각 메뉴마다 부여될 수 있는 옵션들이 있는데, 그 중 몇몇 옵션은 반드시 정해져야만 해당 메뉴를 주문할 수 있다는 것일 수 있다. 즉, 필수옵션으로 구분된 것으로, 선택옵션과 다른 것이다. 위와 같은, 워크플로우를 파이선 코드로 나타내면, 다음과 같이 정의된다. 표 1 class CartProductOption(BaseModel): option_category_id: str option_id: Optional[str]"}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "class CartItem(BaseModel): category_id: str product_id: str options: List[CartProductOption] count: int"}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "Cart = List[CartItem] 이를 Json 코드로 나타내면, 다음과 같이 정의될 수 있다. 표 2 [ { \"categoryId\": \"MC00220\", \"productId\": \"MP01426\", \"options\": [ { \"optionCategoryId\": \"OC00307\", \"optionId\": null, }, { \"optionCategoryId\": \"OC00307\", \"optionId\": null, }, ], \"count\": 1, } ] T는 장바구니를 변경하는 사용자의 요청들일 수 있다. 이는 다음의 하위 Ti들의 조합으로 구현될 수 있다. T1 : 장바구니에 새로운 메뉴를 추가하고 싶어요. (Tool Description) - (menu_id: str, menu_count: int) → (추가하고자 하는 메뉴, 장바구니에 추가할 수량) (Tool Signature) - next_message(menu_id, menu_count, cart) → new message - 장바구니에 아이스 아메리카노를 2잔 추가하였습니다! - 아이스 아메리카노의 원두를 골라주세요! 다크원두, 파란원두, 녹색원두가 있습니다. - 장바구니에 아이스 아메리카노를 2잔 추가하여, 총 3잔이 되었습니다! - 현재 재고가 부족해서 아이스아메리카노를 주문하실 수 없어요. - next_state(menu_id, menu_count, cart) → new cart - (추가될 수 있는 상황이었다면) 기존 카트에서 메뉴가 추가된 카트를 리턴(return) - is_ok_to_proceed(menu_id, menu_count, cart) → true or false - 메뉴가 수량만큼 재고가 있는지를 확인해서 없으면 false (R1을 사용) - 만약 menu_count가 30개 이상이면 실수일 것 같으니까 false T2: 장바구니의 메뉴의 옵션카테고리를 이 옵션값으로 추가/변경하고 싶어요. (Tool Description) - (menu_id: str, option_category_id: str, option_id: str) → (메뉴, 옵션카테고리, 옵션) (Tool Signature) - next_message(menu_id, option_category_id, option_id, cart) → new message - 아이스 아메리카노의 원두를 다크원두로 변경했습니다! - 이제 아이스 아메리카노의 얼음크기를 골라주세요. - 더 필요한게 있으실까요? 휘핑크림을 추가하실 수도 있어요. - next_state(menu_id, option_category_id, option_id, cart) → new cart - (추가될 수 있는 상황이었다면) 기존 카트에서 메뉴가 추가된 카트를 리턴(return) T5: 결제하고 싶어요. (Tool Description) - 별도의 tool_args가 없음 - is_ok_to_proceed(cart) → true or false - 장바구니가 비어있으면 false - 장바구니에 담긴 메뉴 중에 필수 옵션이 지정되지 않은 경우가 하나라도 있으면 false 그리고, 다시 장바구니 완성 W로 돌아가서, c는 (장바구니, 최근대화내용)이 어느 장바구니 변경 의도에 해당되 는가에 대한 분류기로 구현될 수 있다. R(리트리버)은 다음과 같이 다수의 리트리버들(Ri)로 구현될 수 있다. - R1: menu_id의 현재 주문 가능 재고 수량을 파악하는 외부 API - R2: option_id의 현재 주문 가능 재고 수량을 파악하는 외부 API - R3: menu_id가 어떤 옵션카테고리를 갖고 있으며 각 옵션들이 뭐가 있는지를 가져오는 기능 - R4: 아이스아메리카노랑 잘 어울리는 음료 가져오기 등으로 구현 위와 같은 메뉴 장바구니에 담기 기능을 위한 LLM 워크플로우(add_menu)의 생성에 있어서, 파라미터 시그니쳐는 상품 식별자와 수량(product_id: str, quantity: int)이 될 수 있다. 그리고, 위의 파라미터에 따른 분류기 의 출력은 add_menu(\"MPO1345\", 1), 즉, MP01345 상품을 1개 추가하라는 것이 될 수 있다. 위 내용을 기 반으로 next_message를 정의하면, (state: Cart, product_id, quantity)로 정의할 수 있다. 이는, product_id 에 어떤 option_category_id들이 들어있는지 리트리빙(retrieve)하라는 메시지이다. 이에 적절한 안내메시지가 리턴될 수 있다. 다음으로, next_state 역시, (state: Cart, product_id, quantity)로 정의되며, 이는 장바구 니에 product_id를 quantity만큼 추가한 상태가 된다. 이에 따라 \"새로운 state; (장바구니)\"가 리턴될 수 있다. 다른 예에서, 메뉴 장바구니에 담기 기능을 위한 LLM 워크플로우(add_menu)는 다음의 툴과 분류기의 동작으로 구성될 수 있다. 이때, 파라미터 시그니쳐는 상품이름과 수량(product_name: str, quantity_expr: str)이 될 수 있다. 이는, 위의 실시예와 유사하나, 상품 정의가 상품 식별자에서 상품 이름으로 그 파라미터가 변경되었고, 수량 표현에 있어서도, int에서 str으로 그 형식이 변경될 수 있음을 나타낸다. 분류기의 출력은 add_menu(\"아이스아메리카노\", \"한잔\"), add_menu(\"시원한아메리카노\", \"1개\") 등이 될 수 있다. 위 내용을 기 반으로 next_message를 정의하면, 이는 (state: Cart, product_name: str, quantity_expr: str)로 정의할 수 있다. 이는, product_name이 어떤 product_id에 해당되는지 변환하는 리트리버, quantity_expr이 실제 어떤 숫 자에 해당되는지 변환하는 리트리버, 및 변환된 product_id에 어떤 option_category_id들이 있는지 리트리빙하라는 메시지가 포함된다. 이에 적절한 안내메시지가 리턴될 수 있다. 다음으로, next_state 역시, (state: Cart, product_name: str, quantity_expr: str)로 정의되며, 이는 product_name이 어떤 product_id에 해당되는 지 변환하는 리트리버, quantity_expr이 실제 어떤 숫자에 해당되는지 변환하는 리트리버에, 플러스 장바구니에 product_id를 quantity만큼 추가한 상태가 된다. 이에 따라 \"새로운 state; (장바구니)\"가 리턴될 수 있다. 한편, AI 아바타 에이전트는 사용자의 정확한 입력을 해석하기 위해, 동의어 데이터베이스를 활용할 수 있다. 즉, 사용자가 \"따뜻한 아메리카노\"를 \"따아\"라고 입력했을 때, 증강된 해석기(ArgInterpreter)를 이용하여 따뜻 한 아메리카노라고 정확히 해석할 수 있다. 증강된 해석기는 동의어, 유의어뿐만 아니라 줄임말, 신조어 등에 대한 사전, 데이터베이스를 미리 보유하고 있을 수 있다. 증강된 해석기는 W(T,S,c,R) 스택의 리트리버일 수 있 다. 본 발명의 LLM 워크플로우와 연관된 제 2 실시예에 있어서, 사용자 장치가 주차 키오스크라고 가정할 때, 주차 키오스크에서 실행되는 AI 아바타 에이전트의 LLM 워크플로우는 다음과 같이 동작할 수 있다. LLM 워크플로우(W)의 목표는 \"사용자는 본인의 차를 찾아서 출차등록을 하고 싶다.\"가 될 수 있다. 이때, 데이 터 모델(S)은 차량번호(plate_no: str)가 될 수 있다. T는 출차에 필요한 사용자의 요청들이 될 수 있다. T1은 \"내 2345 차 어디에 있어요?\"를 처리하는 툴이 되고, T2는 \"지금 차 주차비가 얼마나 나왔어요?\"를 처리하는 툴 이 되며, T3는 \"출차할게요\"를 처리하는 툴이 될 수 있다. R은 차량 위치 확인, 주차비 확인과 같은 동작으로 구현될 수 있다. 한편, 툴은, 분류기를 통해 분류된 의도와 현재 상태에 대한 정보를 기반으로, 툴에 부여된 기 능에 대응하는 동작을 수행하여 수행 결과를 RAG 모듈에 전달한다. RAG 모듈은 툴로부터 획득된 정보들을 이용하여 LLM에 대한 프롬프트(next_message)를 증강한다. 프롬프트는 RAG 모듈에 의해, 사용자 의 입력과 함께, LLM에 전달되어 그에 대응하는 답변을 획득하는데 사용된다. 본 발명의 또 다른 실시예에 따르면, 사용자 입력 메시지가 한 번에 모든 상태값에 대한 정보(변경 요청)를 포 함하고 있을 때, LLM 워크플로우는 하나 또는 복수 개의 분류기를 이용하여 복수 개의 툴을 호출하도 록 제어한다. 다수 개의 요청을 포함하는 사용자 입력에 대응하여, LLM 워크플로우는 해당 요청들이 결제에 관 한 것인지, 옵션 변경 등을 포함하는 장바구니 담기에 관한 것인지로 구분한다. 위 두가지 요소를 모두 포함하 고 있으면, 분류기는 add_menu에 관한 것과 pay에 관한 것 두 개가 선택되고, 이들은 각각 장바구니 담기 및 결제와 관련된 두 개의 툴을 호출하여 위 사용자 요청을 처리한다. 이때, 위 두 개의 툴은 동시에 호출되어 병렬로 세부기능을 처리할 수 있다. 만약, 사용자의 제 1 입력 메시지는 장바구니 담기에 관한 것이고 이에 대응하여 LLM 워크플로우가 답변한 후, 사용자의 제 2 입력 메시지가 결제에 관한 것일 때, LLM 워크플로우는, 사용자의 제 1 입력 메시지에 응답하여, 제 1 분류기를 통해 장바구니 담기와 관련된 툴을 호출하고, 이를 통해 장바구니 담기를 수행함에 의 해 답변한다. 그리고는, 사용자의 제 2 입력 메시지에 응답하여 제 2 분류기를 통해 결제와 관련된 툴 을 호출하고 이를 통해 결제를 수행함에 의해 답변한다. 즉, 하나의 사용자 입력 메시지가 하나의 분류기 및 하나의 툴에 대응하고, 둘 이상의 사용자 입력에 대해 순차적으로 둘 이상의 분류기 및 둘 이상의 툴을 대응시켜 동작할 수 있도록 제어한다. 도 5는 도 4의 LLM과 RAG 모듈을 보다 상세히 설명하기 위한 개념도이다. 도 5를 참조하면, LLM은 LLM 서비스 API로 구현될 수 있다. 이는, 외부 서버로 구현될 수 있다. 일 예로, LLM 서버스 API는 OpenAIGPT(chatGPT), Google Gemini, Meta LLama, Antropic Claude, Naver Clova-X 등으로 구현될 수 있다. 다른 예에 따르면, 서버 자체 LLM 모듈(Embeding LLM)로 구현될 수도 있다. RAG 모듈은 검색 모델과 생성 모델을 결합한 고급 자연어 처리 모듈일 수 있다. 그리고, 응용 기능 정보는 비즈니스 로직을 정의하기 위한 정보를 포함할 수 있다. RAG 모듈은, 인터넷과 연결되어 외부로부터 비즈 니스 로직과 연관된 정보를 획득하는 외부 데이터 패치 모듈(external data fetch module) 및 비즈니스 로 직과 연관된 초기 검색 단계에서 연관된 벡터 표현을 인덱싱하고 쿼리하기 위한 필수 벡터가 저장되어 있는 벡 터 DB(vector DB)를 포함할 수 있다. 본 발명의 실시예에 따르면, 사용자 단말의 사용자는 어떤 상황에서 어떤 LLM 워크플로우를 선택해서 사용할지 결정할 수 있다. 서버는 이러한 선택을 지원하는 사용자 인터페이스를 사용자 장치로 제공할 수 있다. 이 역시, URL, 딥링크 또는 다른 형태의 링크를 통해 제공될 수 있다. 도 6은 본 발명의 일 실시예에 따른 AI 아바타 에이전트를 생성하는 방법을 나타낸 흐름도이다. 도 6을 참조하면, AI 아바타 에이전트를 생성하기 위해, 서버는 개별 LLM 워크플로우를 정의하고 있을 수 있다 (S610). 앞서 설명한 바와 같이, LLM 워크플로우는 LLM 등 특정 기능에 종속되지 않는 기능별 모듈러 형태의 설 계 방식에 의해 설계된 기능블록일 수 있다. 이는 특정 목적을 수행하는 최소 단위의 비즈니스 로직으로 구성된 다. 정의된 비즈니스 로직 내용으로 아바타가 대화 및 목적 결과를 수행할 수 있도록 구성될 수 있다. 다시 말 해, LLM 워크플로우는 대화 기반으로 특정 목적을 수행하기 위한 단위 목적별 프로세스들의 상관 관계 및 플로 우로 정의한 구현체라고 할 수 있다. 이는, 하나의 목적 작업들을 수행할 수 있도록 프로세스 간의 연결 관계 및 순서를 정의한 것일 수 있다. 일 예로, LLM 워크플로우는 문서를 지식화 하여 대답하는 프로세스(Runnable)로 구현될 수 있다. 또는, 홈페이 지 정보를 지식화하여 대답하는 프로세스(Runnable), 두 개의 프로세스(Runnable)에 각각 필요한 문서를 업로드 하거나 혹은 홈페이지 URL을 설정하는 프로세스로 구현될 수 있다. 다른 예에서, LLM 워크플로우는, 공항 안내 서비스에 맞는 프로세스(Runnable) 플로우를 정의한 것이 될 수 있다. 또는, 대화 성격 정의를 위한 LLM 프롬프 트를 정의한 것이 될 수도 있다. 서버는, 위 내용들을 하나의 LLM 워크플로우로 패키징할 수도 있다. 이와 같이, LLM 워크플로우가 정의된 상태에서, 서버는 복수의 워크플로우를 조합하여 하나의 에이전트를 생성 할 수 있다(S620). 서버가 워크플로우를 조합할 때, 서버의 관리자가 직접 이를 수행할 수도 있지만, 이는 사용 자 장치로부터의 입력 정보(예를 들어, 특정 LLM 워크플로우를 선택 및 조합하는 명령)에 의해 수행될 수도 있 다. 이때, 에이전트는 단위 목적을 수행하는 수행 구현체를 의미할 수 있다. 이는 하나의 앱 역할을 수행한다. 즉, 최소 목적 단위의 워크플로우들을 조합하여 그룹으로 묶어 조금 더 큰 목적을 수행하는 에이전트로 만들 수 있 는 것이다. 이는 도 7을 통해 보다 상세히 설명한다. 도 7은 도 2의 LLM 워크플로우(WF)를 조합하여 AI 아바타 에이전트를 생성하는 과정을 설명하기 위한 개념도이 다. 도 7을 참조하면, 서버는 다수의 워크플로우들(WF1~WFN)을 정의하고 있을 수 있다. 그리고, 서버는, 사용자 장 치로부터의 선택을 받아, 워크플로우 1(WF1), 워크플로우 2(WF2) 및 워크플로우(WF5)를 조합하여 하나의 에이전 트(Agent 1)를 정의할 수 있다. 다른 예로, 워크플로우 2(WF2), 워크플로우 3(WF 4) 및 워크플로우 N(WF N)을 조합하여 다른 하나의 에이전트(Agent 2)를 생성할 수도 있다. 즉, 복수 개의 워크플로우의 조합을 다양하게, 그리고 사용자가 취사 선택할 수 있도록 함으로써, 사용자에게 커스터마이징된 에이전트를 용이하게 생성할 수 있도록 허여할 수 있다. 일 예로, 특정 홈페이지(또는 서버)의 상품 정보를 가져오는 워크플로우(WF1), 결제 기능을 수행하는 워크플로 우(WF2)를 조합하여 특정 홈페이지(또는 서버)에서의 상품을 소개하고, 이에 대한 결제 기능을 제공하는 에이전 트를 생성할 수 있다. 또한, 특정 홈페이지의 상품 정보(예를 들어, KTX)를 가져오는 워크플로우(WF1)와 티켓 예매 기능을 수행하는 워크플로우(WF3)를 조합하여 KTX 티켓을 예매하는 에이전트를 생성할 수도 있다. 이와 같 은 에이전트는 날씨 정보를 가져오는 에이전트, 공항 정보를 안내하는 에이전트 등 다양한 형태로 구현될 수 있 다. 다시 도 6으로 돌아가서, 에이전트를 생성하고 나면, 서버는, 사용자에 의해 커스터마이징되어 미리 생성된 AI 아바타에, 단계(S620)에서 생성된 에이전트를 장착하여 AI 아바타 에이전트를 생성할 수 있다(S630). 이때, AI 아바타와 특정 에이전트의 장착을 위한 제어명령은 사용자 장치로부터 수신된 것일 수 있다. AI 아바타 에이전 트란 AI 아바타에 대화 기반의 목적 수행을 지원하는 에이전트를 장착한 것을 의미할 수 있다. 이는 일반적인 프롬프트 기반의 대화만 지원하는 아바타에서, 대화 기반으로, 아바타를 이용하여 정의된 목적을 수행하는 기능 까지 제공하도록 한 것일 수 있다. 도 7을 참조하면, 하나의 에이전트에 아바타를 적용하여 AI 아바타 에이전트를 생성할 수 있다. 또는, 복수의 에이전트들(Agent 1, Agent 2)의 기능을 조합한 후, 조합된 에이전트에 아바타를 적용하여 AI 아바타 에이전트 를 생성할 수도 있다. 이와 같이 생성된 AI 아바타 에이전트는, 전술한 바와 같이, 사용자 장치에 로딩될 수 있 고, 이를 로딩한 사용자 장치는 아바타에 의해 특정 기능을 수행하는 어플리케이션 장치로 동작할 수 있다. 도 8은 본 발명의 일 실시예에 따라 사용자 장치에서 AI 아바타 에이전트를 로딩하는 방법을 나타낸 흐름도이다. 도 8을 참조하면, 사용자 장치는 먼저, 아바타 등록 플랫폼을 이용하여 아바타를 생성 및 등록할 수 있다 (S810). 앞서, 도 1에 대한 설명으로 언급한 바와 같이, 아바타 등록 플랫폼을 통해, 아바타 외형, 음성, 배경 페이지, 및 캐릭터(기본 아바타 성격 관련 프롬프트 정의)를 설정함에 의해 아바타를 등록할 수 있다. 그리고, 아바타 플레이 그라운드(playground)를 이용하여 등록된 아바타를 테스트 및 수정할 수 있다. 이를 통해, 자신 에게 커스터마이징된 아바타를 최종적으로 확정할 수 있다. 아바타를 등록하고 나서, 사용자는 사용자 단말을 이용해 실행시키고자 하는 에이전트를 선택할 수 있다(S820). 에이전트를 취사 선택하는 것은 LLM 워크플로우의 조합을 선택하는 것일 수 있다. 예를 들어, 공항 안내 기능을 제공하는 에이전트, 결제 기능을 제공하는 에이전트 등 중 적어도 하나를 사용자 선호에 맞게 선택할 수 있다. 아바타 등록과 특정 기능을 제공하는 에이전트(들)의 선택이 완료되면, 사용자는 위 정보를 기반으로 생성된 AI 아바타 에이전트를 로딩할 수 있다(S830). 로딩은 앞서 설명한 바와 같이, AI 아바타 에이전트 URL에 접속하여 웹 브라우저를 통해 로딩함에 의해 이루어질 수 있다. 만약, 사용자 장치가 키오스크인 경우, 인터넷만 연결되 어 있으면, 키오스크의 브라우저로 AI 아바타 에이전트 URL에 접속하여 등록된 아바타가 공항 안내 기능을 제공 하는 에이전트 기능을 수행하도록 할 수 있다. 이를 통해, 사용자 입장에서는 별도의 프로그램 개발 없이 아주 용이하게 공항 안내 기능을 하는 키오스크로써 동작하도록 할 수 있다. 도 9는 본 발명의 일 실시예에 따라 AI 아바타 에이전트를 실행하는 AI 아바타 어플리케이션 기능을 제공하는 서버 장치의 구성을 개략적으로 나타낸 블록도이다. 도 9에 도시된 바와 같이, 본 발명의 일 실시예에 따른 서 버 장치는 입력 수신부, 프로세서, 메모리, 출력 제공부 및 사용자 인터페이스를 포 함할 수 있다. 도 9를 참조하면, 입력 수신부는 유무선 네트워크를 통해, 사용자 장치로부터 사용자 입력을 수신하는 구 성요소이다. 사용자 입력은 기본적으로 텍스트 형태일 수 있다. 다른 예에서, 음성 신호가 직접 입력으로 수신 될 수 있다. 이때, 입력 수신부를 통해 수신된 음성 신호는 프로세서의 STT 변환 모듈(미도시)에서, 텍스트 형태로 변환해서 처리할 수 있다. 한편, 입력 수신부는 경우에 따라 다른 종류의 입력 정보 및 사 용자 장치가 아닌 다른 외부 장치(외부 서버 등)로부터의 데이터를 수신할 수도 있다. 예를 들어, 사용자 장치 의 위치 정보, QR 또는 NFC 기반의 코드 정보 등도 수신할 수 있다. 입력 수신부는 유선 또는 무선 네트워 크와 연관된 통신 장치를 포함한다. 입력 수신부는 안테나를 포함할 수 있다. 프로세서는 입력수신부를 통해 사용자 단말로부터 수신되는 사용자 입력 정보를 기반으로, AI 아바타 에이전트를 실행하여 사용자 입력에 대응하는 출력 데이터를 생성한다. 프로세서는 사용자 입력을 통해 아 바타를 생성할 수 있다. 프로세서는 LLM 워크플로우를 실행하여, 사용자 입력에 대응하는 아바타의 답변을 생성할 수 있다. 그리고는, TTS 모듈, 음성-아바타 변환 모듈을 통해, LLM 워크플로우를 통해 생성된 답변에 대 응하는 아바타 출력 데이터를 생성할 수 있다. 상기 아바타 출력 데이터는 아바타의 음성뿐만 아니라, 그에 대 응하는 표정, 립싱크 및 바디 제스쳐 중 적어도 둘을 포함한다. 추가적으로, 아바타 출력 데이터는 비쥬얼 이펙 트, 배경 및/또는 효과음에 대한 데이터를 더 포함할 수 있다. 프로세서는 메모리와 신호선을 통해 연결되어 있으며, 메모리에 저장된 프로그램을 실행한다. 메모리는 프로세서에서 수행해야 할 프로그램들과 연관된 명령어들을 저장하고 있으며, 프로세서 에서 요구하는 각종 데이터를 저장하고 있는 저장장치이다. 메모리는 AI 아바타 에이전트와 연관된 SaaS 플랫폼의 회원 정보 및 각 회원들의 LLM 워크플로우 생성 이력, 아바타 등록 이력 등에 대한 정보를 저장 하고 있을 수 있다. 메모리는 장치 내부의 로컬 메모리 또는 외부의 대용량 데이터베이스로써 구현될 수 있다. 출력 제공부는 프로세서를 통해 생성된 아바차 출력 데이터를 사용자 장치로 제공한다. 이는 실시간 스트리밍 방식으로 제공될 수 있다. 이에 따라, 사용자 장치의 출력부를 통해 아바타가 실시간 렌더링되도록 허 여할 수 있다. 출력 제공부는 유선 또는 무선 네트워크와 연관된 통신 장치를 포함한다. 출력 제공부(94 0)는 안테나를 포함할 수 있다. 입력 수신부와 출력 제공부는 하나의 모듈(예를 들어, 통신 프로세서)로 구현될 수 있다. 사용자 인터페이스는 키보드, 마우스와 같은 정보 입력 수단 및 모니터, TV, 터치스크린과 같은 정보 출력 수단을 포함한다. 사용자 인터페이스는 아바타 등록, 테스트, LLM 워크플로우 생성, 프롬프트 생성, AI 아 바타 에이전트 소프트웨어의 업데이트와 관련된 각종 설정값들을 변경하고 관련된 내용을 표시하는데 사용된다. 도 10은 본 발명의 일 실시예에 따라 AI 아바타 에이전트를 실행하는 AI 아바타 어플리케이션 장치(사용자 장치)의 구성을 개략적으로 나타낸 블록도이다. 도 10에 도시된 바와 같이, 본 발명의 일 실시예에 따른 사용자 장치는 통신부, 프로세서, 메모리, 입력부 및 출력부를 포함할 수 있다. 도 10을 참조하면, 통신부는 유선 또는 무선 네트워크를 통해 서버 장치 또는 기타 외부 장치와 정보를 주고받기 위한 구성요소이다. 통신부는 유선 또는 무선 네트워크와 연관된 통신 장치를 포함한다. 통신부 는 안테나를 포함할 수 있다. 통신부를 통해 사용자 입력 및 QR, NFC 등의 코드 정보 및 GPS 등을 포함하는 위치 정보를 서버로 전송할 수 있고, 서버로부터 아바타 출력 데이터를 수신할 수 있다. 프로세서는 통신부를 통해 AI 아바타 에이전트를 로딩할 수 있다. 그리고는, 로딩된 AI 아바타 에 이전트를 실행하여 사용자 입력과 연관된 정보를 서버로 전달하도록 제어한다. 이때, 프로세서는, 사용자 입력과 연관된 정보가 텍스트인 경우, 텍스트 형태로 전달하고, 음성인 경우, STT 모듈을 통해 텍스트 형태로 변환한 후 서버로 전달하도록 제어할 수 있다. 그리고, AI 아바타 에이전트를 실행하여 아바타와 대화하는 기능 을 실행시킬 수 있다. 그리고, 서버로부터 수신되는 아바타 출력 데이터를 수신하여 출력부를 통해 출력 될 수 있도록 제어한다. 이때, 아바타 출력 데이터는 실시간 스트리밍 방식으로 수신될 수 있으며, 이에 따라 프로세서는 출력부 상에서 아바타가 실시간으로 렌더링되도록 제어할 수 있다. 프로세서는 메모리와 신호선을 통해 연결되어 있으며, 메모리에 저장된 프로그램을 실행한다. 한편, 다른 예에서, 프로세서는 서버로부터 AI 아바타 에이전트를 로딩하지 않고, 직접 메모리에 온-디바이스 형태로 저장된 AI 아바타 에이전트를 실행하여, 위의 기능을 수행할 수 있다. 즉, 입력부로 부터 획득된 사용자 입력에 대응하여 아바타 출력 데이터를 직접 생성할 수 있다. 메모리는 프로세서 에서 수행해야 할 프로그램들과 연관된 명령어들을 저장하고 있으며, 프로세서에서 요구하는 각종 데이터를 저장하고 있는 저장장치이다. 메모리는 장치 내부의 로컬 메모리 또는 외부의 데이터베이스로 구현될 수 있다. 입력부는 키보드, 마우스, 마이크와 같은 정보 입력 수단을 포함한다. 그리고, 출력부는 모니터, TV, 터치스크린과 같은 정보 출력 수단을 포함한다. 입력부를 통해, 사용자 입력을 입력받을 수 있다. 일 예로, 키보드, 마우스, 터치스크린을 통해 텍스트 형태의 입력을 수신할 수 있다. 다른 예에서, 마이크를 통해 음성 형태의 입력을 수신할 수도 있다. 출력부는 프로세서의 제어에 의해, 서버로부터의 아바타 출 력 데이터를 렌더링하는데 사용된다. 도 11은 본 발명의 일 실시예에 따라 생성된 키오스크 기능을 갖는 AI 아바타 에이전트를 예시적으로 나타낸 도 면이다. 도 11을 참조하면, 사용자 장치가 키오스크 하드웨어 장치일 때, AI 아바타 에이전트의 기능을 키오스크 기능으 로 설정하여 키오스크 장치에서 실행될 수 있도록 할 수 있다. AI 아바타 에이전트를 실행하는 키오스크 장치에 따르면, 장치는 아바타를 출력할 수 있고, 아바타와 연동하는 챗봇 기능을 실행시킬 수 있다. 챗봇 기능을 실행할 때, 마이크를 통해 사용자의 음성 입력을 수신할 수 있고, 음성 입력에 대한 답변은 음성 또는 텍스트로 출력될 수 있다. 그리고, 음성 또는 텍스트 출력에 맞게 아바타가 표정, 립싱크 및 바디 제스쳐를 실행하도록 제어할 수 있다. 키오스크의 화면이 터치스크린인 경우, 버튼 입력 식의 사용자 입력도 가능하도록 구성될 수 있다. 이때, 화면에 표시되는 그래픽 사용자 인터페이스(GUI)의 입력 아이콘은 챗봇 재생성, 장바구니 생성, 장바구니에 상품 추가, 주문완료, 결제실행 등과 연관된 것일 수 있다. 아이콘을 클릭하면, 키오스크 장치는 그에 대응하는 입력(예를 들어, 장바구니 생성 요청, 장바구니에 특정 상 품 추가 요청)을 획득하고 이를 서버측으로 전달한다. 서버는 AI 아바타 에이전트를 통해 그에 대응하는 아바타 출력 데이터를 생성하여 키오스크 장치로 반환한다. 키오스크 장치는 해당 입력에 대응하는 아바타 출력을 키오 스크의 화면 상에 표시할 수 있다. 음성 지원이 된다면, 음성 출력도 함께 표현될 수 있다. 키오스크 기능을 수행할 때, 각각의 툴은 다음과 같이 동작할 수 있다. 첫 번째 툴은 어떤 카테고리의 음료를 마실것인지 선택하도록 하는 기능을 수행한다. 예를 들어, 커피, 주스, 물 등 중에 하나를 고르는 것을 요청할 수 있다. 커피를 선택하면, 두번째 툴은 어떤 커피를 마실것인지 선택하도록 요청하는 기능을 수행할 수 있다. 아이스 아메리카노, 라떼 중 하나를 선택할 수 있다. 세번째 툴은 얼음 선택 기능을 제공하고, 네번째 툴은 원 두 선택 기능을 제공할 수 있다. 이와 같이, 음료 선택과 관련된 툴의 실행이 완료되면, 다음 상태로 넘어갈 수 있다. 이때, 음료의 갯수를 선택하는 기능이 실행될 수 있고, 그 다음으로 음료 포장 여부 선택 기능, 그리고 마지막으로 결제 처리 기능이 실행될 수 있다. 위와 같은 흐름으로, 기능이 실행되면서 그에 대응하는 아바타의 출력이 표현되도록 할 수 있다. 이를 통해, 사용자 인터랙션이 강화된 키오스크의 기능을 AI 아바타 에이전트를기반으로 실행시킬 수 있다. 다만, 툴의 흐름은 반드시 위에서 설명한 실시예와 동일한 순서를 가질 필요는 없다. 첫 번째 툴의 출력에 대해 \"커피\"라고 입력이 있을 때, 네번째 툴인 원두 선택 기능이 두번째 툴로 실행되어도 무방하다. 이는 LLM 워크플 로우의 설정 부분에서 매장 관리자에 의해 쉽게 변경할 수 있는 부분이다. 도 12 및 도 13은 본 발명의 일 실시예에 따른 AI 아바타 에이전트 기반의 키오스크 장치의 동작 방법을 예시적 으로 나타낸 도면이다. 도 12 및 도 13을 참조하면, AI 아바타 에이전트를 이용하는 어플리케이션 장치는 키오스크 기능을 가질 수 있 다. 이때, 키오스크 장치는 사용자에게 인사를 하면서 상품 주문과 관련된 프로세스를 개시할 수 있다(S1210). 도 12 및 도 13에서, 굵은 선으로 표시된 블록은 키오스크 장치의 출력을, 일반 선으로 표시된 블록은 아바타 에이전트에서의 처리 프로세스를, 얇은 선으로 표시된 블록은 사용자 입력을 각각 나타낸다. 키오스크 장치의 인사에 대응하여, 사용자는 \"아이스 아메리카노요\"라고 입력 정보를 제공하면서, 메뉴 주문을 할 수 있다(S1220). 장치는 이러한 사용자의 음성 입력을 해석하여 상품, 특히, 음료와 연관된 장바구니를 추가 하는 처리를 수행하라는 것으로 이해하고, add_menu 워크플로우 기능을 실행할 수 있다. 이때, 장바구니 담기 기능의 처리를 위해 AI 아바타 에이전트는 메뉴, 옵션, 옵션 값, 완성품 및 주문을 정의하는 툴의 실행을 고려 할 수 있다. 본 발명의 일 실시예에 따르면, 위의 툴의 실행을 위해, 메뉴, 옵션, 옵션 값, 완성품 및 주문이라 는 용어들은 다음과 같이 정의될 수 있다. 메뉴(product)는 판매되는 제품의 최소구분으로 정의할 수 있다. 이는, 메뉴판에서 표현되는 하나의 단위라고 할 수 있다. 예를 들어, 연유라떼, 아인슈페터, 콜드브루, 콜드브루라떼 등이 일 예이다. 이 구분은 소비자의 관점보다는 관리자, 생산자, 판매자의 편의에 의해 결정될 수 있다. 이때, 사용자 입력에 의해 인식되는 메뉴이 름(예를 들어, 카라멜 마키아또)은 장치가 인식할 때, 메뉴코드로 변경되어 입력될 수 있다. 메뉴코드는 MP01422, MP01423 등으로 표현될 수 있다. 장치는 메뉴 DB를 통해, 각 메뉴이름에 매칭되는 메뉴코드를 미리 저 장하고 있을 수 있다. 이는 룩업 테이블로 구현될 수 있다. 룩업 테이블을 형성할 때, 장치는 상품 카테고리 ID, 상품 카테고리명, 상품 코드(메뉴코드), 상품 이름, 상품 상세설명, 상품 수량 및 해당 상품에 대응하는 옵 션 카테고리(필수/선택 옵션 구분 가능)에 대한 정보를 매칭하여 형성한다. 또한, 장치는 메뉴를 식별할 때, 메 뉴 이름의 표현명을 string 정규화시키는 것이 바람직하다. 그리고는, 증강된 해석기(ArgInterpreter)를 이용하 여 동의어 사전 형태로, 최대한 다양한 표현명을 만들어 사용자의 다양한 표현에 적절한 메뉴코드를 대응시킬 수 있도록 한다. 특히, 메뉴이름과 메뉴코드를 매핑할 때, 매장 및 브랜드 별로 벡터 데이터베이스를 별도로 두 는 방식을 이용하여 더 스케일러블(scalable)한 구조를 만들 수 있다. 사용자 쿼리(따아, 따뜻한 아메리카노, 뜨거운 커피) 등의 임베딩을 추출한 후, 데이터베이스에서 가까운 임베딩을 추론한다. 그리고는, 추론된 임베딩 의 메뉴(공식 명칭)와 매칭된 메뉴코드를 가져온다. 그리고, 옵션(option category)은 메뉴에 부여될 수 있는 추가/변경 사항에 대한 분류이다. 예를 들어, 얼음의 양, 휘핑의 유무 및 원두의 종류 등이 그것이다. 이는 음료 재료(ingredient)에 국한되는 것이 아니라 컨텍스트 (예를 들어, 용기의 종류, 포장 여부 등)에 대한 것도 포함될 수 있다. 하나의 옵션은 하나의 상품에만 귀속되 는 것이 바람직하다. 옵션은 필수 옵션과 선택 옵션으로 구분될 수 있다. 이는 사용자에 의해 설정될 수 있다. 다음으로, 옵션 값(option value)은 하나의 옵션에서 결정되어질 수 있는 선택값을 나타낸다. 예를 들어, 얼음 의 양에 대한 옵션에 대해서는, \"얼음 많이\", \"얼음 적게\", \"얼음 없애기\" 등으로 옵션값이 결정될 수 있다. 음 료가 완성되기 위해서는, 음료가 속한 메뉴가 가진 모든 옵션들에 특정 옵션값들이 정해져야 한다. 하나의 옵션 카테고리는 단 하나의 옵션값만 갖는 것이 바람직하다. 하지만 2개 이상의 중복 옵션 선택도 가능할 수 있다. 완성품, 또는 음료(item)라고 부르는 용어는 사용자가 마실 수 있는 형태로 제조가 완료된 것을 의미한다. 완성 품은 메뉴 + {옵션: 옵션값, 옵션: 옵션값, 옵션: 옵션값, ...}의 형태로 정의될 수 있다. 예를 들어, 사용자 1 이 결정한 음료로, 카라멜 마까아또 + {온도: 아이스, 얼음양: 얼음많이, 휘핑크림: 더많이}로 정의될 수 있다. 주문(order)는 완성품들의 수량/목록으로 구성될 수 있다. 이것이 결제의 대상이 된다. 주문은 {완성품: 수량, 완성품:수량, ...}의 형태로 정의될 수 있다. 다시 도 12로 돌아가서, 메뉴 주문이 완료되면, 장치는 메뉴에서 정해지지 않은 옵션값에 대한 질문을 출력한다 (S1230). 예를 들어, \"아메리카노에 샷 추가를 하시겠어요?\"라고 질의할 수 있다. 이를 아바타의 표현과 함께 출력할 수 있다. 이에 대해, 사용자가 다음과 같이 답변할 수 있다. 그리고, 사용자의 답변에 따라 장치에서의처리 프로세스가 분기할 수 있다. 먼저, 사용자는 현재 메뉴를 취소하는 의도로 답변할 수 있다(S1240). 예를 들어, \"아메리카노 말고, 카페라떼 로 주문할게요.\"라고 이야기할 수 있다. 장치는 이를 분석하여 이전 주문을 삭제하는 것(delete_menu)으로 그 의도를 파악하고, 주문 삭제 툴을 실행시킬 수 있다. 그리고는, 그 결과로 메뉴 취소에 대한 안내메시지를 출력 할 수 있다(S1242). 단계(S1240)과 다르게, 사용자는 옵션값을 선택하는 의도로 답변할 수 있다. 예를 들어, \"네, 샷 추가 할게 요.\"라고 답변할 수 있다. 또는, 단계(S1240, 1242)와 다르게, 사용자는 다른 메뉴 또는 옵션에 대한 변경을 의 도하는 답변을 할 수 있다(S1246). 예를 들어, \"얼음 양을 \"적당히\"로 변경해줘.\"라고 답변할 수 있다. 단계 (S1242, S1244)의 답변에 응답하여, 장치는 사용자의 의도를 메뉴의 옵션값을 결정하는 것 (set_menu_option_value)으로 파악하고, 이후 옵션 지정에 성공했는지 판단하는 단계로 넘어간다(S1250). 옵션 지정의 성공 여부는 장치가 특정 음료(예를 들어, MP01422)에 정의되어져야하는 필수 옵션 정보를 취득하여 해 당 옵션 및 그 옵션값이 유효한지를 판단함에 의해 이루어질 수 있다. 예를 들어, 카라멜 마끼아또의 경우, 휘 핑크림을 올릴지에 대한 옵션이 제 1 옵션(O1)이 되고, 이에 대해, 휘핑크림 넣기는 제 1-1 옵션값(OV1), 휘핑 크림 빼기는 제 1-2 옵션값(OV2)으로 정의될 수 있다. 즉, 카라멜 마끼아또가 주문되면, 그에 따라 O1에 대한 옵션값이 OV1과 OV2 중 하나로 정해져야 한다. 이들이 정해지지 않거나, 특정 옵션에 대해 정해진 옵션값을 벗 어나게 되면(예를 들어, OV3), 장치는 옵션 또는 옵션값이 유효하지 않다고 판단할 수 있다. 장치가 옵션 지정에 성공하지 못했다고 판단하면, 그 실패사유를 안내하는 메시지를 출력하고(S1252), 단계 (S1230)로 돌아간다. 만약, 옵션 지정에 성공했다고 판단하면, 장치는 아직 정하지 않은 필수옵션이 더 있는지 판단한다(S1254). 필수옵션이 더 남았다고 판단되면, 단계(S1230)로 돌아간다. 만약, 필수옵션이 더 없다고 판 단하면, 완성품 주문을 완료한다. 즉, 여기까지의 과정이 하나의 음료를 완성해나가는 과정이 된다. 도 13을 참조하면, 장치는, 하나의 음료 주문을 완성하고 나서, 더 필요한 것이 있는지 질의하는 메시지를 출력 할 수 있다(S1310). 이때, 추가적으로 필요한 것의 예시는, 추가 메뉴 주문, 장바구니 컨텐츠 변경 및 결제 프 로세스 진행 요청 등이 될 수 있다. 사용자는 다음의 의도를 가지고 답변을 할 수 있다. 만약, 사용자가 새로운 메뉴를 추가하고자 한다면(S1320), 새로운 메뉴를 추가하기 위해, 다시 도 12의 단계(S1220)로 넘어간다. 만약, 사용자가 이전에 작성했던 장바구 니의 정보를 수정하고자 한다면(S1322), 사용자는 장바구니에 담긴 특정 음료의 옵션을 변경하고 싶은지(S1330) 또는 장바구니의 음료 수량을 조정하고 싶은지(S1332) 등을 결정할 수 있다. 단계(S1330)의 의사에 따라 사용자 가 특정 옵션 변경을 요청하는 답변(예를 들어, \"아이스 카라멜 마끼아또에 얼음은 많이 주는 걸로 변경해줘\") 을 했을 때(S1334), 장치는 이를 메뉴 옵션값을 결정하는 의도(set_menu_option_value)로 판단하고, 옵션값 지 정에 성공했는지 판단하여, 성공했다면, 옵션 변경이 완료되었음을 알릴 수 있다(S1338). 그리고, 다시 단계 (S1310)로 돌아갈 수 있다. 만약, 단계(S1338)에서 옵션값 지정에 실패했다면, 실패사유에 대해 알리고 다시 단 계(S1310)로 돌아갈 수 있다. 그리고, 단계(S1332)의 의사에 따라 사용자가 특정 음료 추가를 요청하는 답변(예 를 들어, \"아이스 카라멜 마끼아또 하나 추가해줘 또는 하나 취소해줘\")을 했을 때(S1336), 장치는 이를 메뉴 수량값을 변경하는 의도(set_menu_count)로 판단하고, 음료 수량이 변경되었음을 알릴 수 있다(S1340). 그리고, 다시 단계(S1310)로 돌아갈 수 있다. 만약, 사용자가 결제로 넘어가길 원하는 경우(S1324), 사용자는 추가 요청 없음을 확인하는 답변(예를 들어, \" 더 필요한 것 없어요\")을 할 수 있다(S1350). 장치는 위와 같은 답변을 듣고, 주문이 완료되었음(done)을 인지 할 수 있다. 그리고는, 주문 완료 안내 메시지(예를 들어, \"결제로 넘어갑니다\")를 출력할 수 있다(S1352). 그 리고는, 결제 단계로 전환하여 주문 프로세스를 완료할 수 있다(S1354). 단계들(S1320, S1322, S1330, S1332, S1324)은 사용자 내심의 의사를 결정하는 것으로, 시스템적으로 드러나는 프로세스는 아닐 수 있다. 한편, 위의 도 12 및 도 13의 어떠한 단계 중간에서도, 사용자는 키오스크의 답변과 관계없이, 장바구니 초기화, 사용자의 이탈(예를 들어, \"나 여기서 주문 안 할래요\"와 같은 답변), 화장실 질의 등의 돌발 답변을 수행할 수 있다. 장바구니 초기화를 요청하는 사용자 입력에, 장치는 주문 초기화 안내 메시지를 출력하고 단계 (S1210)으로 돌아간다. 사용자의 이탈에 응답하여, 장치는 끝인사 메시지를 출력하고 단계(S1210)으로 돌아간다. 만약, 일정 시간 이상 사용자의 답변이 없을 때도 사용자가 이탈했다고 판단할 수 있다. 화장실이 어 딘지 묻는 등의 주문 목적이 아닌 다른 목적의 사용자의 질의에 대해서, 장치는 그에 대한 적절한 답변을 출력하고, 최근 주문 관련하여 수행 중이었던 단계로 돌아간다. 추가적으로, 키오스크 장치를 위한 AI 아바타 에이전트는 다음의 주요 모듈을 포함할 수 있다. STT 모듈, 함수 호출 LLM, 대화 LLM(conversation LLM), 임베딩 모델(embedding model) 및 TTS 모듈 중 적어도 하나를 포함할 수 있다. 이들을 이용하여 셀프 서빙(self serving)의 속도를 최적화할 수 있다. 함수 호출 LLM은 AI 아바타 에이전트의 단위 기능을 호출하는 LLM이다. 대화 LLM은 사용자와의 대화를 자연스럽 게 수행하기 위한 LLM이다. 임베딩 모델은 텍스트를 벡터 형태로 표현한 결과 데이터일 수 있다. 본 발명에 있 어서, 임베딩 모델을 이용하여 검색, 클러스터링 및 분류 등의 기능을 수행할 수 있다. 특히, 사용자 입력으로 부터 메뉴와 메뉴코드(product_id)를 매칭할 때 또는 문장의 의도를 빠르게 분류할 때 상기 임베딩 모델을 사용 할 수 있다. 에이전트는 위 다양한 모듈들 중 가장 적절한 하나 또는 그 이상의 모듈들을 사용하여 사용자 입력 에 최적의 답변을 생성한다. 본 발명의 일 실시예에 있어서, 키오스크 기능을 수행하는 AI 아바타 에이전트는 사용자와의 대화를 3가지 의도 중 적어도 하나로 구분한다. 이는 주문, 정보 문의 및 일반 대화이다. 장치는 3개의 의도 중 임베딩 서치 기반 의 대분류를 진행한다. 이를 위해, 먼저 3가지 의도에 대한 임베딩을 DB에 저장해 놓고 있을 수 있다. 그리고는, 의도를 분류하는 지시어(instruction)을 부여하여 사용자의 입력 메시지에 대한 임베딩 서치를 수행 한다. 특히, 3개의 의도는 1차적으로 주문과 나머지 의도들(정보 문의 및 일반 대화 포함)로 구분한다. 이때는, 정규표현식(regex)를 사용하는 것이 효과적이다. 의도를 분류하고 나면, 분류된 의도에 맞게 답변을 생성한다. 특히, 정보 전달과 일반 대화의 케이스는 LLM을 이용하여 비교적 쉽게 위와 같은 과정을 구현할 수 있다. 반면, 주문의 경우, 2차 분류를 진행하는 것이 바람직 하다. 특히, 주문은 메뉴가 여럿일 수도 있고, 옵션 복잡도가 높을 수도 있으며, 여기에 오타, 줄임말, 신조어, 유사 표현 등이 다양하게 사용될 수 있기에, 2차 분류를 진행하여 처리한다. 이는 도 4의 분류기를 계층별로 복 수 개 사용하는 것이라고 볼 수 있다. 특히, 2차 분류를 진행함에 있어서, 다양한 세부 기능을 사용해야 할 경 우가 있기에, 함수 호출 기능을 사용하여 다양한 툴을 적절히 활용하는 것이 바람직하다. 물론 임베딩 모델을 이용한 서치가 더 적절할 때도 있다. 한편, 장치는 상품 주문을 처리함에 있어서, 정규표현식 기반의 패턴 분류를 사용할 수 있다. 정식 메뉴와 일치 하는 경우, 메뉴이름을 그대로 써서 제품/가격 사전 데이터베이스에서 메뉴코드(product_id)와 가격 정보를 가 져와서 사용한다. 정식 메뉴와 일치하지 않으면, 증강된 해석기를 이용하여 이를 조정한다. 그 다음 메뉴 이름 NLP 서치를 수행해서 정식 메뉴이름으로 변경하고, 이후 동일하게 제품/가격 사전에서 메뉴코드 및 가격을 가져 온다. 옵션 및 수량에 대한 정보도 정규표현식으로 추출할 수 있다. 도 14 내지 도 16은 도 12 내지 도 13의 단계를 수행하는 키오스크 장치의 사용자 인터페이스 화면의 일 예를 나타낸 도면이다. 도 14를 참조하면, 장치는 화면의 제 1 영역(에를 들어, 화면 상단)에 사용자의 음성 입력을 수신하여 이를 화 면에 텍스트 형태로 표시할 수 있다. 그리고, 장치는, 화면의 제 2 영역(예를 들어, 중간 영역)에는 아바타의 표현이 렌더링되도록 그래픽 사용자 인터페이스를 구성할 수 있다. 그리고, 화면의 하단에는, 주문내역이 표시 되도록 할 수 있다. 다른 예에서, 아바타가 상품 주문을 처리하는 화면 상에 오버레이되어 렌더링될 수도 있다. 상품 주문을 개시하기 이전에, 키오스크는 AI 아바타 에이전트의 URL에 접속하여 키오스크 기능을 실행할 수 있 도록 준비한다. 이때, 로그인 등의 인증을 통해, 특정 매장의 고유 ID에 대응하는 URL에 접속하여 키오스크 기 능을 이용하도록 할 수 있다. 특정 매장의 ID로 로그인이 되면, 로그인된 매장에 대한 정보가 화면에 표시되도 록 그래픽 사용자 인터페이스(GUI)를 구성할 수 있다. 이는 해당 매장의 관리자가 필요한 기능을 수행하는 AI 아바타 에이전트를 적절히 취사 선택하고, 매장과 관련된 정보를 벡터 데이터베이스 등을 통해 AI 아바타 에이 전트에 적절히 입력함에 의해, 미리 설정되어 있는 것일 수 있다. 장치는 로그인 이후, 아바타가 인사하는 화면을 구성할 수 있다. 그리고는, 응대 화면(예를 들어, \"어떤 음료를 주문하시겠습니까?\"라고 질의)이 표시되도록 할 수 있다. 그리고는, 도 14의 좌측 도면과 같이, 사용자의 입력을 획득하여 표시하는 화면을 생성할 수 있다. 이때, 아바 타는, 사용자 입력이 획득되는 동안 듣는 동작을 수행하도록 할 수 있고, 사용자 입력을 분석하여 답변을 생성 하는 동안 생각하는 동작이 렌더링되도록 할 수 있다. 즉, 개별 세부 기능이 진행되는 동안, 아바타가 수행해야 할 동작을 구분하여 적절히 해당 동작이 렌더링되도록 제어할 수 있다. 도 14의 중간 도면과 같이, 특정 메뉴에 대한 사용자 주문에 응답하여, 해당 주문을 확인하고 그에 대응하는 옵 션에 대한 질의하는 화면을 생성할 수 있다. 이때, 주문 상태에 대한 메모가 화면의 일 영역에 표시될 수 있다. 주문 상태는 status로 제품 메뉴, 그리고, 옵션, 옵션값 등이 표시될 수 있다. 도 14의 중간 도면의 실시예에 따르면, 장치는, 제품으로 아이스 카라멜 마끼아또를 생성하고, 얼음과 휘핑크림의 양을 어떻게 할지에 대한 옵 션을 생성할 수 있다. 도 14의 우측 도면을 참조하면, 도 14의 중간 도면의 아바타의 질의에 응답하여 사용자가 옵션값(예를 들어, \" 적당히\")을 선택할 수 있다. 도 15의 좌측 도면을 참조하면, 도 14의 우측 도면의 사용자의 옵션값 선택에 대응하여, 상태 메모에 얼음 옵션 의 옵션값을 \"적당히\"로 결정할 수 있다. 그리고, 도 15의 중간 및 우측 도면의 실시예에 따라, 휘핑 크림을 올 려달라는 옵션값까지 결정할 수 있다. 그리고, 장치는 추가 주문이 있는지 질의한다. 도 16을 참조하면, 추가 주문에 대한 질의에 응답하여 아이스 아메리카노를 추가할 수 있다. 이를 기반으로 상 태 메모를 업데이트할 수 있다. 추가 주문이 없음을 확인하면, 장치는 결제 진행 안내 메시지를 출력할 수 있다. 결제 진행시 최종 상태(status)에 대한 정보를 결제 관련 모듈로 전달하여 최종 완성된 주문에 대한 결제 액이 적절히 결제가 이루어질 수 있도록 한다. 이상에서 설명된 시스템 또는 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 시스템, 장치 및 구성요소는, 예를 들어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨터, FPA(field programmable array), PLU(programmable logic unit), 마이크 로프로세서, 또는 명령(instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에 서 수행되는 하나 이상의 소프트웨어 애플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가"}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "사용되는 것으로 설명된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처 리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세 서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처 리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파(signal wave)에 영구적으로, 또는 일시적으로 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 하나 이상의 컴퓨터 판독 가능 기록 매 체에 저장될 수 있다. 실시예들에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판독 가능 매체에 기록될 수 있다. 상기 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등 을 단독으로 또는 조합하여 포함할 수 있다. 상기 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설 계되고 구성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto- optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드 뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다. 상기된 하 드웨어 장치는 실시예의 동작을 수행하기 위해 하나 이상의 소프트웨어 모듈로서 작동하도록 구성될 수 있으며, 그 역도 마찬가지이다."}
{"patent_id": "10-2024-0095405", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다."}
{"patent_id": "10-2024-0095405", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 AI 아바타 에이전트(AI Avatar Agent)가 적용되는 시스템을 나타낸 개념도, 도 2는 본 발명의 일 실시예에 따른 AI 아바타 에이전트와 LLM 워크플로우(LLM workflow)의 연동 방법을 개략적 으로 나타낸 개념도, 도 3은 도 2의 AUDIO2AVATAR 모듈의 동작을 보다 구체적으로 설명하기 위한 개념도, 도 4는 본 발명의 일 실시예에 따른 LLM 워크플로우(LLM workflow)를 실행하는 모듈의 구성을 나타낸 블록도, 도 5는 도 4의 LLM과 RAG 모듈을 보다 상세히 설명하기 위한 개념도, 도 6은 본 발명의 일 실시예에 따른 AI 아바타 에이전트를 생성하는 방법을 나타낸 흐름도, 도 7은 도 2의 LLM 워크플로우(WF)를 조합하여 AI 아바타 에이전트를 생성하는 과정을 설명하기 위한 개념도, 도 8은 본 발명의 일 실시예에 따라 사용자 장치에서 AI 아바타 에이전트를 로딩하는 방법을 나타낸 흐름도, 도 9는 본 발명의 일 실시예에 따라 AI 아바타 에이전트를 실행하는 AI 아바타 어플리케이션 기능을 제공하는 서버 장치의 구성을 개략적으로 나타낸 블록도,도 10은 본 발명의 일 실시예에 따라 AI 아바타 에이전트를 실행하는 AI 아바타 어플리케이션 장치(사용자 장치)의 구성을 개략적으로 나타낸 블록도, 도 11은 본 발명의 일 실시예에 따라 생성된 키오스크 기능을 갖는 AI 아바타 에이전트를 예시적으로 나타낸 도 면, 도 12 및 도 13은 본 발명의 일 실시예에 따른 AI 아바타 에이전트 기반의 키오스크 장치의 동작 방법을 예시적 으로 나타낸 도면, 도 14 내지 도 16은 도 12 내지 도 13의 단계를 수행하는 키오스크 장치의 사용자 인터페이스 화면의 일 예를 나타낸 도면이다."}
