{"patent_id": "10-2023-0100649", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0019482", "출원번호": "10-2023-0100649", "발명의 명칭": "가속기, 이를 포함하는 전자 장치 및 그 동작 방법", "출원인": "삼성전자주식회사", "발명자": "김봉준"}}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치의 동작 방법에 있어서, 상기 전자 장치에 포함된 가속기에 의해 수행되는 타겟 연산에 상기 가속기의 메모리를 이용한 PIM 연산이 포함되는지 여부를 판단하는 동작;상기 타겟 연산에 상기 PIM 연산이 포함되는 경우, 상기 PIM 연산의 입력 데이터가 상기 PIM 연산의 특성에 따라 상기 메모리에 배치되어 있는지 여부를 판단하는 동작; 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있는 경우, 상기 PIM 연산의 연산 종류에 대한 정보를 상기 PIM 연산을 위한 레지스터에 입력하는 동작; 및 상기 가속기에 대한 명령어 집합 중 상기 PIM 연산을 실행하도록 하는 PIM 연산 실행 명령어를 이용하여 상기메모리로 하여금 상기 입력 데이터를 이용하여 상기 정보에 따른 PIM 연산을 수행하도록 제어하는 동작을 포함하는, 동작 방법."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 PIM 연산을 수행하도록 제어하는 동작은,상기 PIM 연산 실행 명령어의 비트 필드에 기반하여 상기 메모리에 포함되는 복수의 메모리 뱅크들 중 일부에대해서 상기 PIM 연산을 수행하도록 제어하는,동작 방법."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 PIM 연산을 수행하도록 제어하는 동작은, 상기 메모리가 상기 PIM 연산을 실행하는 동안 상기 가속기에 대한 명령어 집합에 포함되는 임의의 명령어에 의한 상기 메모리에 대한 접근을 제한하는, 동작 방법."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 PIM 연산을 수행하도록 제어하는 동작은,상기 PIM 연산의 상태를 상기 PIM 연산을 위한 레지스터에 기록하는 동작을 더 포함하고, 상기 PIM 연산의 상태는, 상기 PIM 연산의 연산 중 상태 및 상기 PIM 연산의 종료 상태를 포함하고,공개특허 10-2025-0019482-3-상기 PIM 연산의 종료 상태는,상기 PIM 연산의 성공 여부에 대한 상태를 포함하는,동작 방법."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 PIM 연산을 위한 레지스터에 기록된 상기 PIM 연산의 상태를 확인하고, 상기 PIM 연산의 상태에 기반하여상기 PIM 연산에 따른 결과를 제외하거나 상기 PIM 연산에 따른 결과에 대한 후처리가 필요한지 여부를 판단하는 동작을 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있지 않은 경우, 상기 가속기에 대한 명령어 집합중 상기 메모리에 접근하는 로드/스토어 명령어를 이용하여 상기 입력 데이터를 상기 PIM 연산의 특성에 따라재배치하는 동작을 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 가속기에 대한 명령어 집합은,상기 PIM 연산을 수행할 수 있는 상기 메모리를 포함하는 상기 가속기에 대한 명령어 집합으로, 상기 메모리로하여금 상기 PIM 연산을 수행하도록 하는 상기 PIM 연산 실행 명령어를 포함하는, 동작 방법."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서, 상기 PIM 연산에 따른 결과를 상기 가속기의 다른 구성요소가 이용할 수 있도록 상기 메모리에 접근하는 로드/스토어 명령어를 이용하여 재배치하는 동작을 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항 내지 제8항 중에서 어느 하나의 방법을 실행시키기 위한 프로그램이 기록된 컴퓨터 판독 가능한 저장 매체."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "전자 장치에 있어서,가속기로 하여금 타겟 연산을 수행하도록 제어하는 호스트 프로세서; 및 상기 타겟 연산을 수행하는 가속기를 포함하고,공개특허 10-2025-0019482-4-상기 가속기는, PIM 연산을 수행할 수 있는 메모리; 상기 PIM 연산에 이용되는 레지스터; 및상기 가속기에 의해 수행되는 타겟 연산에 상기 메모리를 이용한 상기 PIM 연산이 포함되는지 여부를 판단하고,상기 타겟 연산이 상기 PIM 연산에 포함되는 경우, 상기 PIM 연산의 입력 데이터가 상기 PIM 연산의 특성에 따라 상기 메모리에 배치되어 있는지 여부를 판단하고, 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있는 경우, 상기 PIM 연산의 연산 종류에 대한 정보를 상기 레지스터에 입력하고, 상기 가속기에 대한 명령어 집합 중 상기 PIM 연산을 실행하도록 하는 PIM 연산 실행 명령어를 이용하여 상기 메모리로 하여금 상기 입력 데이터를 이용하여 상기 정보에 따른 PIM 연산을 수행하도록 제어하는 실행 유닛을 포함하는, 전자 장치."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 실행 유닛은,상기 PIM 연산 실행 명령어의 비트 필드에 기반하여 상기 메모리에 포함되는 복수의 메모리 뱅크들 중 일부에대해서 상기 PIM 연산을 수행하도록 제어하는,전자 장치."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제10항에 있어서,상기 실행 유닛은,상기 메모리가 상기 PIM 연산을 실행하는 동안 상기 가속기에 대한 명령어 집합에 포함되는 임의의 명령어에 의한 상기 메모리에 대한 접근을 제한하는, 전자 장치."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제10항에 있어서,상기 실행 유닛은,상기 PIM 연산의 상태를 상기 레지스터에 기록하고, 상기 PIM 연산의 상태는, 상기 PIM 연산의 연산 중 상태 및 상기 PIM 연산의 종료 상태를 포함하고,상기 PIM 연산의 종료 상태는,상기 PIM 연산의 성공 여부에 대한 상태를 포함하는,전자 장치."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "공개특허 10-2025-0019482-5-제13항에 있어서, 상기 실행 유닛은, 상기 레지스터에 기록된 상기 PIM 연산의 상태를 확인하고, 상기 PIM 연산의 상태에 기반하여 상기 PIM 연산에따른 결과를 제외하거나 상기 PIM 연산에 따른 결과에 대한 후처리가 필요한지 여부를 판단하는, 전자 장치."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제10항에 있어서,상기 실행 유닛은,상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있지 않은 경우, 상기 가속기에 대한 명령어 집합중 상기 메모리에 접근하는 로드/스토어 명령어를 이용하여 상기 입력 데이터를 상기 PIM 연산의 특성에 따라재배치하는, 전자 장치."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제10항에 있어서,상기 가속기에 대한 명령어 집합은,상기 PIM 연산을 수행할 수 있는 상기 메모리를 포함하는 상기 가속기에 대한 명령어 집합으로, 상기 메모리로하여금 상기 PIM 연산을 수행하도록 하는 상기 PIM 연산 실행 명령어를 포함하는, 전자 장치."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제10항에 있어서, 상기 실행 유닛은,상기 PIM 연산에 따른 결과를 상기 가속기의 다른 구성요소가 이용할 수 있도록 상기 메모리에 접근하는 로드/스토어 명령어를 이용하여 재배치하는, 전자 장치."}
{"patent_id": "10-2023-0100649", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "가속기에 있어서,PIM 연산을 수행할 수 있는 메모리; 상기 PIM 연산에 이용되는 레지스터; 및상기 가속기에 의해 수행되는 타겟 연산에 상기 메모리를 이용한 상기 PIM 연산이 포함되는지 여부를 판단하고,상기 타겟 연산에 상기 PIM 연산이 포함되는 경우, 상기 PIM 연산의 입력 데이터가 상기 PIM 연산의 특성에 따라 상기 메모리에 배치되어 있는지 여부를 판단하고, 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있는 경우, 상기 PIM 연산의 연산 종류에 대한 정보를 상기 레지스터에 입력하고, 상기 가속기에 대한 명령어 집합 중 상기 PIM 연산을 실행하도록 하는 PIM 연산 실행 명령어를 이용하여 상기 메모리로 하여금 상기 입력 데이터를 이용하여 상기 정보에 따른 PIM 연산을 수행하도록 제어하는 실행 유닛을 포함하는, 가속기."}
{"patent_id": "10-2023-0100649", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시는 가속기, 이를 포함하는 전자 장치 및 그 동작 방법에 관한 것이다. 본 개시의 일 실시예에 따른 전자 장치의 동작 방법은, 상기 전자 장치에 포함된 가속기에 의해 수행되는 타겟 연산에 상기 가속기의 메모리를 이 용한 PIM 연산이 포함되는지 여부를 판단하는 동작, 상기 타겟 연산에 상기 PIM 연산이 포함되는 경우, 상기 PIM 연산의 입력 데이터가 상기 PIM 연산의 특성에 따라 상기 메모리에 배치되어 있는지 여부를 판단하는 동작, 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있는 경우, 상기 PIM 연산의 연산 종류에 대한 정보를 상 기 PIM 연산을 위한 레지스터에 입력하는 동작, 및 상기 가속기에 대한 명령어 집합 중 상기 PIM 연산을 실행하 도록 하는 PIM 연산 실행 명령어를 이용하여 상기 메모리로 하여금 상기 입력 데이터를 이용하여 상기 정보에 따 른 PIM 연산을 수행하도록 제어하는 동작을 포함할 수 있다."}
{"patent_id": "10-2023-0100649", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 가속기, 이를 포함하는 전자 장치 및 그 동작 방법에 관한 것이다."}
{"patent_id": "10-2023-0100649", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "가속기는 컴퓨팅 환경에서 특정 작업을 빠르고 효율적으로 수행하기 위해 설계된 하드웨어 장치일 수 있다. 가 속기는 호스트 프로세서와 별도로 동작할 수 있다. 가속기는 특정 작업을 처리하기 위해 최적화될 수 있다. 가 속기는 다양한 형태로 존재할 수 있으며, 가장 흔히 알려진 가속기는 그래픽 처리 유닛(graphics processing unit, GPU)일 수 있다. GPU는 그래픽 관련 작업을 위한 가속기일 수 있다. 인공지능과 기계 학습 알고리즘을 처 리하기 위해 신경망 처리에 특화된 NPU(neural processing unit)가 이용될 수 있다."}
{"patent_id": "10-2023-0100649", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 일 실시예에 따른 전자 장치의 동작 방법은, 상기 전자 장치에 포함된 가속기에 의해 수행되는 타겟 연산에 상기 가속기의 메모리를 이용한 PIM 연산이 포함되는지 여부를 판단하는 동작, 상기 타겟 연산에 상기 PIM 연산이 포함되는 경우, 상기 PIM 연산의 입력 데이터가 상기 PIM 연산의 특성에 따라 상기 메모리에 배치되 어 있는지 여부를 판단하는 동작, 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있는 경우, 상기 PIM 연산의 연산 종류에 대한 정보를 상기 PIM 연산을 위한 레지스터에 입력하는 동작, 및 상기 가속기에 대한 명령어 집합 중 상기 PIM 연산을 실행하도록 하는 PIM 연산 실행 명령어를 이용하여 상기 메모리로 하여금 상기 입력 데이터를 이용하여 상기 정보에 따른 PIM 연산을 수행하도록 제어하는 동작을 포함할 수 있다. 상기 PIM 연산을 수행하도록 제어하는 동작은, 상기 PIM 연산 실행 명령어의 비트 필드에 기반하여 상기 메모리 에 포함되는 복수의 메모리 뱅크들 중 일부에 대해서 상기 PIM 연산을 수행하도록 제어할 수 있다. 상기 PIM 연산을 수행하도록 제어하는 동작은, 상기 메모리가 상기 PIM 연산을 실행하는 동안 상기 가속기에 대 한 명령어 집합에 포함되는 임의의 명령어에 의한 상기 메모리에 대한 접근을 제한할 수 있다. 상기 PIM 연산을 수행하도록 제어하는 동작은, 상기 PIM 연산의 상태를 상기 PIM 연산을 위한 레지스터에 기록 하는 동작을 더 포함하고, 상기 PIM 연산의 상태는, 상기 PIM 연산의 연산 중 상태 및 상기 PIM 연산의 종료 상 태를 포함하고, 상기 PIM 연산의 종료 상태는, 상기 PIM 연산의 성공 여부에 대한 상태를 포함할 수 있다. 상기 PIM 연산을 위한 레지스터에 기록된 상기 PIM 연산의 상태를 확인하고, 상기 PIM 연산의 상태에 기반하여 상기 PIM 연산에 따른 결과를 제외하거나 상기 PIM 연산에 따른 결과에 대한 후처리가 필요한지 여부를 판단하 는 동작을 더 포함할 수 있다. 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있지 않은 경우, 상기 가속기에 대한 명령어 집합 중 상기 메모리에 접근하는 로드/스토어 명령어를 이용하여 상기 입력 데이터를 상기 PIM 연산의 특성에 따라 재배치하는 동작을 더 포함할 수 있다. 상기 가속기에 대한 명령어 집합은, 상기 PIM 연산을 수행할 수 있는 상기 메모리를 포함하는 상기 가속기에 대 한 명령어 집합으로, 상기 메모리로 하여금 상기 PIM 연산을 수행하도록 하는 상기 PIM 연산 실행 명령어를 포 함할 수 있다. 상기 PIM 연산에 따른 결과를 상기 가속기의 다른 구성요소가 이용할 수 있도록 상기 메모리에 접근하는 로드/ 스토어 명령어를 이용하여 재배치하는 동작을 더 포함할 수 있다. 본 개시의 일 실시예에 따른 컴퓨터 판독 가능 저장 매체는 상술한 어느 하나의 방법을 실행시키기 위한 프로그 램이 기록될 수 있다. 본 개시의 일 실시예에 따른 전자 장치는, 가속기로 하여금 타겟 연산을 수행하도록 제어하는 호스트 프로세서, 및 상기 타겟 연산을 수행하는 가속기를 포함하고, 상기 가속기는, PIM 연산을 수행할 수 있는 메모리, 상기 PIM 연산에 이용되는 레지스터, 및 상기 가속기에 의해 수행되는 타겟 연산에 상기 메모리를 이용한 상기 PIM 연산이 포함되는지 여부를 판단하고, 상기 타겟 연산이 상기 PIM 연산에 포함되는 경우, 상기 PIM 연산의 입력 데이터가 상기 PIM 연산의 특성에 따라 상기 메모리에 배치되어 있는지 여부를 판단하고, 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있는 경우, 상기 PIM 연산의 연산 종류에 대한 정보를 상기 레지스터에입력하고, 상기 가속기에 대한 명령어 집합 중 상기 PIM 연산을 실행하도록 하는 PIM 연산 실행 명령어를 이용 하여 상기 메모리로 하여금 상기 입력 데이터를 이용하여 상기 정보에 따른 PIM 연산을 수행하도록 제어하는 실 행 유닛을 포함할 수 있다. 상기 실행 유닛은, 상기 PIM 연산 실행 명령어의 비트 필드에 기반하여 상기 메모리에 포함되는 복수의 메모리 뱅크들 중 일부에 대해서 상기 PIM 연산을 수행하도록 제어할 수 있다. 상기 실행 유닛은, 상기 메모리가 상기 PIM 연산을 실행하는 동안 상기 가속기에 대한 명령어 집합에 포함되는 임의의 명령어에 의한 상기 메모리에 대한 접근을 제한할 수 있다. 상기 실행 유닛은, 상기 PIM 연산의 상태를 상기 레지스터에 기록하고, 상기 PIM 연산의 상태는, 상기 PIM 연산 의 연산 중 상태 및 상기 PIM 연산의 종료 상태를 포함하고, 상기 PIM 연산의 종료 상태는, 상기 PIM 연산의 성 공 여부에 대한 상태를 포함할 수 있다. 상기 실행 유닛은, 상기 레지스터에 기록된 상기 PIM 연산의 상태를 확인하고, 상기 PIM 연산의 상태에 기반하 여 상기 PIM 연산에 따른 결과를 제외하거나 상기 PIM 연산에 따른 결과에 대한 후처리가 필요한지 여부를 판단 할 수 있다. 상기 실행 유닛은, 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있지 않은 경우, 상기 가속기에 대한 명령어 집합 중 상기 메모리에 접근하는 로드/스토어 명령어를 이용하여 상기 입력 데이터를 상기 PIM 연 산의 특성에 따라 재배치할 수 있다. 상기 가속기에 대한 명령어 집합은, 상기 PIM 연산을 수행할 수 있는 상기 메모리를 포함하는 상기 가속기에 대 한 명령어 집합으로, 상기 메모리로 하여금 상기 PIM 연산을 수행하도록 하는 상기 PIM 연산 실행 명령어를 포 함할 수 있다. 상기 실행 유닛은, 상기 PIM 연산에 따른 결과를 상기 가속기의 다른 구성요소가 이용할 수 있도록 상기 메모리 에 접근하는 로드/스토어 명령어를 이용하여 재배치할 수 있다. 본 개시의 일 실시예에 따른 가속기는, PIM 연산을 수행할 수 있는 메모리, 상기 PIM 연산에 이용되는 레지스 터, 및 상기 가속기에 의해 수행되는 타겟 연산에 상기 메모리를 이용한 상기 PIM 연산이 포함되는지 여부를 판 단하고, 상기 타겟 연산에 상기 PIM 연산이 포함되는 경우, 상기 PIM 연산의 입력 데이터가 상기 PIM 연산의 특 성에 따라 상기 메모리에 배치되어 있는지 여부를 판단하고, 상기 입력 데이터가 상기 PIM 연산의 특성에 따라 배치되어 있는 경우, 상기 PIM 연산의 연산 종류에 대한 정보를 상기 레지스터에 입력하고, 상기 가속기에 대한 명령어 집합 중 상기 PIM 연산을 실행하도록 하는 PIM 연산 실행 명령어를 이용하여 상기 메모리로 하여금 상기 입력 데이터를 이용하여 상기 정보에 따른 PIM 연산을 수행하도록 제어하는 실행 유닛을 포함할 수 있다."}
{"patent_id": "10-2023-0100649", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "실시예들에 대한 특정한 구조적 또는 기능적 설명들은 단지 예시를 위한 목적으로 개시된 것으로서, 다양한 형 태로 변경되어 구현될 수 있다. 따라서, 실제 구현되는 형태는 개시된 특정 실시예로만 한정되는 것이 아니며, 본 명세서의 범위는 실시예들로 설명한 기술적 사상에 포함되는 변경, 균등물, 또는 대체물을 포함한다. 제1 또는 제2 등의 용어를 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 해석되어야 한다. 예를 들어, 제1 구성요소는 제2 구성요소로 명 명될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다.어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이해되어야 할 것이다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 설명된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함 으로 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들 을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되 는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로 해석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 도 1은 본 개시의 일 실시예에 따른 전자 장치를 설명하기 위한 도면이다. 도 1을 참조하면, 전자 장치는 호스트 프로세서(host processor) 및 메모리 및 가속기 (accelerator)를 포함할 수 있다. 호스트 프로세서, 메모리 및 가속기는 버스(bus), NoC(Network on a Chip), PCIe(Peripheral Component Interconnect Express) 등을 통하여 서로 통신할 수 있다. 도 1에 도시된 전자 장치에는 본 실시예들와 관련된 구성요소들만이 도시되어 있다. 따라서, 전자 장치는 도 1에 도시된 구성요소들 외에 다른 범용적인 구성요소들이 더 포함될 수 있음은 당업자에게 자명 하다. 호스트 프로세서는 전자 장치를 제어하기 위한 전반적인 기능을 수행하는 역할을 할 수 있다. 호스 트 프로세서는 메모리에 저장된 프로그램들 및/또는 명령어들을 실행함으로써, 전자 장치를 전 반적으로 제어할 수 있다. 호스트 프로세서는 전자 장치 내에 구비된 CPU(central processing unit), GPU(graphics processing unit), AP(application processor) 등으로 구현될 수 있으나, 이에 제한되지 않는다. 메모리는 전자 장치 내에서 처리된 데이터들 및 처리될 데이터들을 저장하는 하드웨어일 수 있다. 또한, 메모리는 전자 장치에 의해 구동될 애플리케이션, 드라이버 등을 저장할 수 있다. 메모리 는 DRAM(dynamic random access memory)과 같은 휘발성 메모리(volatile memory) 및/또는 불휘발성 메모 리(nonvolatile memory)를 포함할 수 있다. 전자 장치는 연산을 위한 가속기를 포함할 수 있다. 가속기는 연산의 특성 상 범용의 호스트 프로세서에서 처리되기 보다는 별도의 전용 프로세서, 다시 말해 가속기에서 처리되는 것이 보다 효 율적인 작업들을 처리할 수 있다. 이때 가속기에 포함된 하나 이상의 프로세싱 엘리먼트들(PEs; processing elements)이 활용될 수 있다. 가속기는 예를 들어, 뉴럴 네트워크에 따른 연산을 수행하는 NPU(neural processing unit), TPU(tensor processing unit), DSP(digital signal processor), GPU, Neural Engine 등에 해당될 수 있다. 가속기의 명령어 집합 구조(instruction set architecture, ISA)는, 호스트 프로세서의 ISA와 다를 수 있다. 호스트 프로세서의 ISA는 일반적인 범용 명령어들이 포함될 수 있다. 다만, 가속기의 ISA는 특정 작업에 대해 최적화된 명령어들을 포함할 수 있다. 따라서, 가속기는 특정 작업에 대해 효율적으로 동작할 수 있다. 예를 들어, NPU의 ISA는 인공지능 작업을 가속화하기 위한 명령어들을 포함할 수 있다. 이러한 가속기는 필요에 따라서 메모리와 다른 별도의 메모리를 포함할 수 있다. 가속기가 별도 의 메모리를 포함하는 경우, 가속기가 데이터를 읽고 쓰는 시간을 줄이고 전체적인 성능이 향상될 수 있다. 특히, 가속기에 포함되는 별도의 메모리가 PIM(processing-in-memory, PIM) 연산을 수행할 수 있는 경우, 일부 연산을 별도의 메모리에서 수행하여 연산 속도가 추가로 향상될 수 있다. 다만, PIM 연산을 수행할 수 있는 메모리를 효율적으로 동작하게 하는 명령어를 포함하는 가속기의 ISA가 필요할 수 있다. 이하에서는, PIM 연산 실행 명령어를 포함하는 명령어 집합을 통해 가속기가 메모리를 이용하여 PIM 연산 을 수행하는 방법에 대해서 설명하도록 하겠다. 이하에서는, 설명의 편의를 위해 PIM 연산을 수행할 수 있는 메 모리를 포함하는 가속기는 NPU로 가정하겠다. 다만, 이하의 설명이 PIM 연산을 수행할 수 있는 메모리를 포함하는 다양한 종류의 가속기에도 적용될 수 있음은 당업자에게 자명하다. 도 2는 본 개시의 일 실시예에 따른 가속기를 설명하기 위한 도면이다. 도 2를 참조하면, NPU이 도시된다. 도 2 에는 본 실시예들와 관련된 구성요소들만이 도시되어 있다. 따라 서, NPU는 도 2에 도시된 구성요소들 외에 다른 범용적인 구성요소들이 더 포함될 수 있음은 당업자에게 자명하다. NPU는 실행 유닛, 메모리, 레지스터(register), PIM 컨트롤러(PIM controller), 스 칼라 레지스터(scalar register) 및 벡터/행렬 스크래치패드 메모리(vector/matrix scratchpad memory)를 포함할 수 있다. 여기서, 실행 유닛, 스칼라 레지스터, 벡터/행렬 스크래치패드 메모리 및 메모 리는 일반적인 NPU의 구성요소일 수 있다. 다만, 본 개시에서 메모리는 PIM 연산을 수행할 수 있으므 로, NPU는 추가로 레지스터 및 PIM 컨트롤러이 더 필요할 수 있다. 레지스터은 PIM 컨트롤 러과 연결될 수 있다. PIM 컨트롤러은 연결된 레지스터을 제어할 수 있다. 실행 유닛은 NPU의 ISA에 포함되는 명령어들로 만들어진 바이너리 코드(binary code)를 실행할 수 있 다. 바이너리 코드는 NPU 코드(NPU code)로, NPU에 대한 명령어들이 시리얼(serial)하게 작성된 코드일 수 있다. 실행 유닛은 시리얼하게 작성된 명령어들을 읽고, 해당 명령어들에 대응하는 타겟 연산들을 수행할 수 있다. 따라서, 실행 유닛은 바이너리 코드에 따라 복수의 타겟 연산을 시리얼하게 수행할 수 있다. 실행 유닛은 바이너리 코드에 포함되는 명령어를 읽고, 해당 명령어에 대한 타겟 연산을 수행할 수 있다. 이때, 실행 유닛은 스스로 타겟 연산을 수행할 수도 있고, 다른 구성요소로 하여금 타겟 연산을 수행하도 록 제어할 수 있다. 다시 말해, 실행 유닛은 명령어를 읽고, 해당 명령어에 따라 타겟 연산을 수행할 수 있다. 또는, 실행 유 닛은 명령어에 따라서 다른 구성요소들(예: 메모리)을 제어할 수도 있다. 예를 들어, 실행 유닛(21 0)은 메모리로 하여금 PIM 연산을 수행하도록 제어할 수 있다. 타겟 연산이 PIM 연산을 포함하는 경우, 실행 유닛은 메모리로 하여금 PIM 연산을 수행하도록 제어할 수 있다. 메모리로 하여금 PIM 연산을 수행하도록 제어하기 전에 실행 유닛은 레지스터에 PIM 연산의 연산 종류에 대한 정보를 입력할 수 있다. 메모리는 레지스터에 입력된 PIM 연산의 연산 종류 에 대한 정보에 따라 PIM 연산을 수행할 수 있다. 예를 들어, 메모리는 레지스터에 입력된 곱셈을 수 행하라는 정보에 따라 곱셈을 수행할 수 있다. 레지스터는 PIM 연산에 이용되는 레지스터로 스칼라 레지스터과 구분하기 위해 특수 목적 레지스터 (special register)라고 할 수 있다. 실행 유닛은 PIM 연산이 끝나면 로드/스토어 명령어(load/store instructions)를 이용하여 PIM 연산에 대한 결과를 읽을 수 있다. 타겟 연산이 PIM 연산을 포함하지 않고 일반적인 산술 연산을 포함하는 경우, 실행 유닛은 벡터/행렬 스크 래치패드 메모리 및/또는 스칼라 레지스터에서 피연산자를 읽고 벡터/행렬 스크래치패드 메모리 및/또는 스칼라 레지스터에 결과를 쓸 수 있다. 다시 말해서, 레지스터은 PIM 연산에만 이용될 수 있 고, 벡터/행렬 스크래치패드 메모리 및 스칼라 레지스터은 PIM 연산을 제외한 연산에 이용될 수 있다. 즉, 역할이 서로 다를 수 있다. 또한, 실행 유닛은 로드/스토어 명령어를 이용하여 별도의 연산 없이 데이터를 스크래치패드 메모리 및/또는 스칼라 레지스터로 가져올 수 있다. 벡터/행렬 스크래치패드 메모리은 벡터나 행렬 타입을 구분하여 저장하지 않을 수 있다. 따라서, 벡터/행 렬 스크래치패드 메모리에 저장된 벡터는 추후 행렬 연산에 사용될 수도 있고, 행렬 연산에 따른 결과 행 렬도 벡터 단위로 저장될 수 있다. 일 실시예에 따르면, 벡터 스크래치패드 메모리 및 행렬 스크래치패드 메모 리가 각각 존재할 수도 있다. 일 실시예에 따르면, NPU은 PIM 연산 실행 명령어를 실행하기 위한 별도의 PIM 로드/스토어 유닛을 포함할 수 있다. NPU은 벡터/행렬 스크래치패드 메모리 및/또는 스칼라 레지스터로 데이터를 가져오는 별도의 일반 로드/스토어 유닛을 포함할 수 있다. NPU가 별도의 PIM 로드/스토어 유닛을 포함하는 경우, PIM 연산 실행 명령어를 별도의 PIM 로드/스토어 유닛을 통해 실행하므로 다른 메모리 명령어들과 다른 패스 (path)로 동작시킬 수 있다. 따라서, 데이터 의존성(data dependency)이 없는 명령어들과 비동기적 (asynchronous)하게 동작할 수 있다. 이하에서는 상술한 가속기를 포함하는 전자 장치의 동작 방법에 대해서 설명하도록 하겠다. 도 3은 본 개시의 일 실시예에 따른 가속기의 동작 방법을 설명하기 위한 플로우차트이다. 이하 실시예에서 각 동작들은 순차적으로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 동작들의 순서가 변경될 수도 있으며, 적어도 두 동작들이 병렬적으로 수행될 수도 있다. 동작에서, 가속기는 바이너리 코드를 실행할 수 있다. 바이너리 코드는 복수의 명령어들이 시리얼하게 작성된 코드일 수 있다. 따라서, 가속기는 바이너리 코드를 실 행함으로써 복수의 명령어들에 대응하는 복수의 타겟 연산을 수행할 수 있다. 다시 말해, 가속기는 복수의 타겟 연산을 순서대로 수행할 수 있다. 예를 들어, 가속기는 바이너리 코드를 실행함으로써 제1 타겟 연산, 제2 타겟 연산 및 제3 타겟 연산을 수행할 수 있다. 가속기는 제1 타겟 연산, 제2 타겟 연산 및 제3 타겟 연산을 순서대로 수행할 수 있다. 동작에서, 가속기는 타겟 연산이 PIM 연산을 포함하는지 여부를 판단할 수 있다. 타겟 연산이 PIM 연산을 포함하지 않는 경우 동작가 수행될 수 있다. 즉, 동작에서, 가속기는 타겟 연산을 수행할 수 있다. 다시 말해, 타겟 연산이 PIM 연산을 포함하지 않으면, 해당 타겟 연산은 일반 연산만을 포함하므로 실행 유닛이 타겟 연산을 수행할 수 있다. 이때, 동작가 수행되면 해당 타겟 연산은 종료되고, 다음 타겟 연산이 수행될 수 있다. 반면에, 타겟 연산이 PIM 연산을 포함하는 경우 동작이 수행될 수 있다. 즉, 가속기는 PIM 연산을 수행하 기 위한 준비를 수행할 수 있다. 예를 들어, 제1 타겟 연산은 PIM 연산을 포함하지 않고, 제2 타겟 연산은 PIM 연산을 포함할 수 있다. 이때, 가 속기는 제1 타겟 연산과 제2 타겟 연산을 순서대로 수행할 수 있다. 따라서, 제1 타겟 연산은 PIM 연산을 포함 하지 않으므로 실행 유닛에서 제1 타겟 연산을 수행하고, 제1 타겟 연산은 종료할 수 있다. 그러고 나서, 다음 타겟 연산인 제2 타겟 연산이 수행되고, 제2 타겟 연산은 PIM 연산을 포함하므로 동작이 수행될 수 있다. 동작에서, 가속기는 입력 데이터가 PIM 연산에 사용되기 적절하게 메모리에 배치되어 있는지 여부를 판단 할 수 있다. 다시 말해, 가속기는 입력 데이터가 PIM 연산의 특성에 따라 메모리에 배치되어 있는지 여부를 판단할 수 있다. 메모리는 독립적으로 동작하는 복수의 메모리 뱅크들을 포함할 수 있다. 각 메모리 뱅크는 PIM 연산을 할 수 있 는 유닛과 연결될 수 있다. 해당 유닛은 해당 유닛과 연결된 메모리 뱅크에 저장되어 있는 데이터를 이용하여 PIM 연산을 수행할 수 있다. 따라서, 효율적인 PIM 연산을 위해서는 각 메모리 뱅크에서 PIM 연산이 동시에 (즉, 병렬적으로) 수행되어야 할 수 있고, 이를 위해서는 입력 데이터가 복수의 메모리 뱅크들에 균등하게 배치 되어야 할 수 있다. 따라서, PIM 연산의 특성은 PIM 연산을 수행하는 메모리 뱅크들의 병렬 연산을 위한 특성일 수 있다. 동작에서, 입력 데이터들이 PIM 연산에 사용되기 적절하게 메모리에 배치되지 않은 경우, 가속기는 입력 데이터를 재배치할 수 있다. 예를 들어, 입력 데이터가 특정 메모리 뱅크들에 집중되어 있는 경우, 각 메모리 뱅크에서 PIM 연산의 병렬적인 수행이 어려울 수 있다. 따라서, 입력 데이터들이 PIM 연산에 사용되기 적절하게 메모리에 배치되었다고 볼 수 없다. 따라서, 가속기는 가속기에 대한 명령어 집합 중 메모리에 접근하는 로드/스토어 명령어를 이용하여 입력 데이 터를 PIM 연산의 특성에 따라 재배치할 수 있다. 다시 말해, 가속기는 로드/스토어 명령어를 이용하여 입력 데 이터를 각 메모리 뱅크에 균등하게 분배할 수 있다. 이때, 로드/스토어 명령어는 도 2에서 설명한 바에 따라 별도의 연산 없이 데이터를 벡터/행렬 스크래치패드 메모리 또는 스칼라 레지스터로 가져오는 명령어로, PIM 연산 의 특성에 따라 입력 데이터를 재배치하는데도 이용될 수 있다. 일실시예에 따르면, 메모리는 복수의 뱅크들 중 짝수 뱅크들끼리 병렬적으로 PIM 연산을 수행하고, 복수의 뱅크 들 중 홀수 뱅크들끼리 병렬적으로 PIM 연산을 수행할 수 있다. 이때, 입력 데이터가 복수의 뱅크들에 연속적으 로 배치되어 있다면, 입력 데이터는 두 뱅크 단위로 인터리브(interleave)하게 재배치되어야 할 수 있다. 동작에서, 입력 데이터가 PIM 연산에 사용되기 적절하게 메모리에 배치되어 있는 경우, 가속기는 PIM 연산 의 연산 종류에 대한 정보를 레지스터에 입력할 수 있다. 여기서, 레지스터는 특수 목적 레지스터로 PIM을 위한 레지스터일 수 있다. PIM 연산의 연산 종류는 예를 들어, 곱셈, 뺄셈 및 덧셈 등과 같은 산술 연산뿐만 아니라, AND, OR 및 NOT 등과 같은 논리 연산도 포함할 수 있다. 동작에서, 가속기는 PIM 연산 실행 명령어를 이용하여 PIM 연산을 수행할 수 있다. PIM 연산 실행 명령어는 메모리로 하여금 PIM 연산을 입력 데이터를 이용하여 PIM 연산을 수행하도록 하는 명령 어일 수 있다. PIM 연산 실행 명령어는 메모리로 하여금 PIM 연산을 실행하도록 하는 명령어이지만 가속기에 대 한 명령어 집합에 포함될 수 있다. 가속기는 PIM 연산 실행 명령어를 이용하여 메모리로 하여금 레지스터에 저 장된 정보에 따른 PIM 연산을 수행하도록 제어할 수 있다. 다시 말해, 메모리는 PIM 연산 실행 명령어에 따라 PIM 연산의 특성에 따라 배치된 입력 데이터를 이용하여 레 지스터에 저장된 정보에 따른 연산을 수행할 수 있다. PIM 연산 실행 명령어에 대해서는 도 4에서 더 설명하도 록 하겠다. 가속기는 PIM 연산의 상태를 레지스터에 기록하는 동작을 더 포함할 수 있다. PIM 연산의 상태는 PIM 연산의 연 산 중 상태 및 PIM 연산의 종료 상태를 포함할 수 있다. PIM 연산의 종료 상태는 PIM 연산의 성공 여부에 대한 상태를 포함할 수 있다. 다시 말해, 가속기는 PIM 연산의 상태를 레지스터에 업데이트하는 동작을 더 포함할 수 있다. 가속기는 PIM 연 산이 종료된 경우, PIM 연산의 연산 중 상태에서 PIM 연산의 종료 상태로 레지스터를 업데이트할 수 있다. 가속 기는 PIM 연산이 종료했을 때, PIM 연산의 성공 여부에 대한 상태를 레지스터에 업데이트할 수 있다. 동작에서, 가속기는 PIM 연산의 상태를 레지스터를 통해 확인할 수 있다. 가속기는 레지스터에 기록된 PIM 연산의 상태를 확인하고, PIM 연산 상태에 기반한 동작을 수행할 수 있다. 가 속기는 PIM 연산의 상태가 PIM 연산이 진행 중인 상태인 경우, PIM 연산이 종료하기를 기다릴 수 있다. 가속기 는 PIM 연산의 상태가 종료 상태이고 PIM 연산이 실패한 경우, 동작에 따라 PIM 연산에 따른 결과를 제외 할 수 있다. 메모리 뱅크들은 독립적으로 동작하고 뱅크간 데이터 통신을 할 수 없다. 따라서, PIM 연산에 따른 결과를 이용 하는 후처리가 필요할 수 있다. 따라서, 가속기는 PIM 연산의 상태가 종료 상태이고 PIM 연산이 성공하였으며, 후처리(post-processing)가 필요한 경우 동작에 따라 별도의 후처리를 수행할 수 있다. 가속기는 PIM 연산의 상태가 종료 상태이고 PIM 연산이 성공하였으며, 후처리가 필요하지 않은 경우, 동작(32 1)에 따라 가속기의 다른 구성요소가 이용할 수 있도록 PIM 연산의 결과를 재배치할 수 있다. 이때, 메모리에 접근하는 로드/스토어 명령어가 이용될 수 있다. 이로써, PIM 연산을 포함하는 타겟 연산은 종료되고, 가속기는 다음 타겟 연산에 대해서 다시 동작 부터 수행될 수 있다. 이하에서는, PIM 연산을 실행하도록 하는 PIM 연산 실행 명령어에 대해서 설명하겠다. 도 4는 본 개시의 일 실시예에 따른 PIM 연산 실행 명령어를 설명하기 위한 도면이다. 도 4를 참고하면, PIM 연산 실행 명령어의 비트 필드가 도시된다. PIM 연산 실행 명령어는 총 64비트로 8 비트의 opcode, 7 비트의 PIM Status RegID, 7 비트의 value, 7 비트의 Mask Base RegID 및 32 비트의 Mask Offset Immediate Value를 포함할 수 있 다.opcode은 명령 코드로, 가속기의 실행 유닛은 opcode을 확인하여 명령어가 PIM 연산 실행 명령어인지 를 판단할 수 있다. 다시 말해, 명령어마다 opcode에 입력되는 비트들이 다를 수 있고, 실행 유닛은 opcode을 확인하여 명령어가 PIM 연산 실행 명령어인지를 판단할 수 있다. PIM Status RegID은 PIM 연산의 상태를 기록하는 레지스터의 주소를 지정할 수 있다. 예를 들어, PIM Status RegID은 PIM 연산의 연산 중 상태 및 PIM 연산의 종료 상태를 기록하는 레지스터의 주소를 지정할 수 있다. value은 메모리 공간의 주소에 대한 부분 비트들(partial bits)을 지정할 수 있다. 부분 비트들은 PIM 연 산을 수행 중인 메모리 공간(즉, 메모리 뱅크)에 대한 다른 명령어들(예: 일반 로드/스토어 명령어 등)의 접근 을 차단하는데 이용될 수 있다. 예를 들어, 다른 명령어가 접근하고자 하는 메모리 공간의 주소를 마스크로 마 스킹한 값과 부분 비트들이 동일한 경우, 다른 명령어의 메모리 공간에 대한 접근이 차단될 수 있다. Mask Base RegID 및 Mask Offset Immediate Value는 PIM 연산을 수행할 메모리 뱅크들의 범위를 지 정해줄 수 있다. Mask Base RegID는 PIM 연산을 수행할 메모리 뱅크의 시작 지점을 지정할 수 있다. Mask Offset Immediate Value는 PIM 연산을 수행할 메모리 뱅크의 종료 지점을 지정할 수 있다. 다시 말해서, 메모리는 독립적으로 동작할 수 있는 복수의 메모리 뱅크들을 포함할 수 있다. 따라서, Mask Base RegID 및 Mask Offset Immediate Value는 복수의 메모리 뱅크들 중 PIM 연산을 수행할 메모리 뱅크들을 지정할 수 있다. 따라서, 가속기는 PIM 연산 실행 명령어의 비트 필드에 기반하여 메모리에 포함되는 복수의 메모리 뱅크들 중 일부에 대해서 PIM 연산을 수행하도록 제어할 수 있다. 또한, 가속기는 Mask Base RegID 및 Mask Offset Immediate Value에 따라 PIM 연산을 수행 중인 메 모리 뱅크에 대한 접근을 제한할 수 있다. 즉, 가속기는 메모리가 PIM 연산을 실행하는 동안 가속기에 대한 명 령어 집합에 포함되는 임의의 명령어에 의한 메모리에 대한 접근을 제한할 수 있다. 예를 들어, 가속기는 메모 리에 접근하는 로드/스토어 명령어에 포함된 주소가 PIM 연산을 수행 중인 메모리 뱅크의 주소와 일치하는 경우, 로드/스토어 명령어의 메모리 접근을 제한할 수 있다. PIM 연산 실행 명령어는 가속기에 대한 명령어 집합에 포함될 수 있다. 명령어 집합은 PIM 연산 실행 명령어를 포함할 뿐만 아니라 메모리 제조사마다 상이한 연산 정확도(arithmetic precision)을 지원하기 위해 다양한 비 트 길이(bit width)(예를 들어, 8 비트, 16비트 및 32비트)에 대한 연산을 지원할 수 있다. 또한, 벡터 스크래 치패드 메모리 및 행렬 스크래치 패드 메모리가 벡터/행렬 스크래치패드 메모리로 통합되었으므로, 가속기에 대 한 명령어 집합은 벡터/행렬 스크래치 패드 메모리에 대한 벡터 연산 명령어 및 행렬 연산 명령어를 포함할 수 있다. 이때, 벡터 연산 명령어 및 행렬 연산 명령어의 입력 주소와 출력 주소는 동일한 메모리 공간(memory space)에 있을 수 있다. 가속기에 대한 명령어 집합은 다양한 뉴럴 네트워크 연산을 지원하기 위해 초월 함수를 지원하는 산술 연산 명령어를 포함할 수 있다. 도 5는 본 개시의 일 실시예에 따른 가속기를 포함하는 전자 장치의 동작을 설명하기 위한 플로우차트이다. 이하 실시예에서 각 동작들은 순차적으로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 동작들의 순서가 변경될 수도 있으며, 적어도 두 동작들이 병렬적으로 수행될 수도 있다. 동작에서, 전자 장치는 전자 장치에 포함된 가속기에 의해 수행되는 타겟 연산이 가속기의 메모리를 이용 한 PIM 연산을 포함하는지 여부를 판단할 수 있다. 동작에서, 전자 장치는 타겟 연산에 PIM 연산을 포함하는 경우, 타겟 연산의 입력 데이터가 타겟 연산의 특성에 따라 메모리에 배치되어 있는지 여부를 판단할 수 있다. 동작에서, 전자 장치는 입력 데이터가 타겟 연산의 특성에 따라 배치되어 있는 경우, 타겟 연산의 연산 종 류에 대한 정보를 PIM 연산을 위한 레지스터에 입할 수 있다. 동작에서, 전자 장치는 가속기에 대한 명령어 집합 중 PIM 연산을 실행하도록 하는 PIM 연산 실행 명령어 를 이용하여 메모리로 하여금 입력 데이터를 이용하여 정보에 따른 PIM 연산을 수행하도록 제어할 수 있다. 도 5에 도시된 각 동작들에는 도 1 내지 도 4를 통해 전술한 사항들이 그대로 적용되므로, 보다 상세한 설명은 생략하겠다. 도 6 및 도 7은 본 개시의 일실시예에 따른 전자 장치의 예시들을 설명하기 위한 도면이다. 서버는 사용자에 의해 제어되는 사용자 단말과 구분되는 별도의 장치로서, 유선 및/또는 무선 네트워크를 통해 하나 이상의 사용자 단말과 통신을 수행할 수 있다. 서버는 다수의 사용자들이 각자 자신의 단말을 통해 동시다발적으로 전송하는 요청들을 수신할 수 있다. 서버는 호스트 프로세서 및 가속기을 포함할 수 있다. 서버는 앞서 설명한 PIM을 수행할 수 있는 메모리를 포함하는 가속기를 이용하여 타 겟 연산을 수행할 수 있다. 가속기은 타겟 연산이 PIM 연산을 수행하는 경우 PIM 연산 실행 명령어에 따라 메모리로 하여금 PIM 연산을 수행하도록 할 수 있다. 그리고, 서버는 타겟 연산의 결과들을 각각 대응하는 사용자 단말로 리턴할 수 있다. 예를 들어, 사용자 단말은 스마트폰, 태블릿, 랩탑, 퍼스널 컴퓨터 등 다양한 컴퓨팅 장치, 스마트 시계, 스마트 안경 등 다양한 웨어러블 기기, 스마트 스피커, 스마트 TV, 스마트 냉장고 등 다양한 가전장치, 스마트 자동차, 스마트 키오스크, IoT(Internet of Things) 기기 등을 포함할 수 있다. 도 7을 참조하면, 일실시예에 따른 전자 장치는 사용자 단말로 구현될 수 있다. 도 7에서는 설명의 편의 를 위해 사용자 단말이 스마트 폰으로 도시되었지만, 이외에도 사용자에 의해 제어되는 기기라면 제한 없 이 적용될 수 있다. 사용자 단말은 호스트 프로세서 및 가속기을 포함할 수 있다. 사용자 단말 은 가속기을 통해 타겟 연산을 수행할 수 있다. 타겟 연산이 PIM 연산을 포함하는 경우, 가속기(72 0)는 가속기에 포함되는 메모리로 하여금 PIM 연산을 수행하게 할 수 있다. 이상에서 설명된 실시예들은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨 어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치, 방법 및 구성요소는, 예를 들 어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마 이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령(instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 소프트웨어 애플리 케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처 리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경우도 있지만,"}
{"patent_id": "10-2023-0100649", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하 나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치에 저장될 수 있다. 소프트웨어는 네트워크로 연결된 컴 퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단 독으로 또는 조합하여 저장할 수 있으며 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구 성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다. 위에서 설명한 하드웨어 장치는 실시예의 동작을 수행하기 위해 하나 또는 복수의 소프트웨어 모듈로서 작동하 도록 구성될 수 있으며, 그 역도 마찬가지이다."}
{"patent_id": "10-2023-0100649", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가진 자라면 이를 기초로 다양한 기술적 수정 및 변형을 적용할 수 있다. 예를 들어, 설명된 기술들이 설명된 방법과 다른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다."}
{"patent_id": "10-2023-0100649", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시예에 따른 전자 장치를 설명하기 위한 도면이다. 도 2는 본 개시의 일 실시예에 따른 가속기를 설명하기 위한 도면이다. 도 3은 본 개시의 일 실시예에 따른 가속기의 동작 방법을 설명하기 위한 플로우차트이다. 도 4는 본 개시의 일 실시예에 따른 PIM 연산 실행 명령어를 설명하기 위한 도면이다. 도 5는 본 개시의 일 실시예에 따른 가속기를 포함하는 전자 장치의 동작을 설명하기 위한 플로우차트이다. 도 6 및 도 7은 본 개시의 일실시예에 따른 전자 장치의 예시들을 설명하기 위한 도면이다."}
