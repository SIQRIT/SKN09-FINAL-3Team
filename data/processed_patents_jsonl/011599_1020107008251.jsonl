{"patent_id": "10-2010-7008251", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2010-0072256", "출원번호": "10-2010-7008251", "출원인": "마이크로소프트 코포레이션", "발명자": "데 소자 사나, 기셀리 파논티니"}}
{"patent_id": "10-2010-7008251", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "웹 애플리케이션에서의 가상 목록 뷰는 웹과 관련된 고유 대기 시간에도 불구하고, 사용자가 표시된 데이터를 끊 어짐 없이 액세스하고 관리할 수 있도록 동적으로 갱신된다. 가상 목록 뷰와 관련된 데이터는 청크들로 다운로 드되고, 사용자가 스크롤함에 따라 뷰가 갱신된다. 사용자의 스크롤링과 다운로드될 데이터의 특정 청크를 결부 시킴으로써, 시스템 자원은 효율적인 방식으로 이용된다. 사용자 인터페이스를 위한 추가 사용자 인터페이스 컨 트롤은 데이터 부분들로의 신속하고 효율적인 액세스를 위해 이용되어, 지연 및 시스템 자원 점유를 최소화한다."}
{"patent_id": "10-2010-7008251", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "웹 브라우징 애플리케이션은 일반적으로 목록 뷰(list view)로 사용자에게 데이터를 표시한다. 예를 들어, 데 이터의 페이지들은 키보드, 마우스 등과 같은 다양한 컨트롤을 사용한 스크롤 업 또는 다운에 의해 보여질 수 있다. 볼 수 있는 데이터는 텍스트, 그래픽, 이 둘의 조합 등을 포함할 수 있고, 실제 목록 형식(표, 글머리 기호 항목(bulleted item) 등등)으로 또는 자유 형식으로 포맷될 수 있다. 어느 경우든, 웹 브라우징 애플리케 이션은 임의로 큰 항목 목록을 사용자에게 표시할 수 있다. 실제 환경에서, 웹 애플리케이션은 사용자에 의한 데이터로의 링크의 선택시에 그 사용자 인터페이스에서 데이 터를 표시하기 전에 전체 데이터를 다운로드 하려고 시도할 수 있다. 이 방법은 데이터가 크거나, 사용 가능한 대역폭이 작거나, 또는 그외 다른 시스템 자원이 웹 서버로부터의 데이터 다운로딩 시에 제한을 일으키는 경우 에, 사용자에게 데이터 프레젠테이션시에 용납할 수 없는 지연을 야기함으로써 실행 불가능할 수 있다. 다른 대안적인 방법은 데이터를 그룹을 지어 다운로드하고, 데이터가 다운로드됨에 따라 사용자 인터페이스를 갱신하 는 것이다. 그러나, 이 방법은 또한 시스템의 \"불편함(clunkiness)\"을 초래할 수 있는데, 이 경우에, 표시된 웹페이지가 조각조각 나누어져 나타날 수 있고, 지연으로 인해 사용자를 귀찮게 할 수 있으며, 사용자가 데이터 의 특정 부분에만 관심이 있을 때 시스템 자원이 불필요하게 전체 데이터의 다운로드에 사용될 수 있다. <발명의 개요>"}
{"patent_id": "10-2010-7008251", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "이 요약은 아래의 상세한 설명에서 더욱 설명되는 개념들 중의 선택된 개념을 단순화된 형태로 소개하기 위해"}
{"patent_id": "10-2010-7008251", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 3, "content": "제공된다. 이 요약은 청구된 주제의 중요한 특징이나 본질적인 특징을 식별하고자 하는 것도 아니고, 청구된 주제의 범위를 판정하는데 도움을 주고자 하는 것도 아니다. 실시예는 웹과 관련된 고유 대기 시간에도 불구하고, 사용자가 표시된 데이터를 끊어짐 없이 액세스하고 관리할 수 있도록 웹 애플리케이션에서 가상 목록 뷰를 동적으로 갱신하는 것에 관한 것이다. 가상 목록 뷰와 관련된 데이터는 청크들로 다운로드될 수 있고, 사용자가 스크롤함에 따라 뷰가 갱신될 수 있다. 사용자의 스크롤링과 다운로드될 데이터의 특정 청크를 결부시킴으로써, 시스템 자원은 효율적인 방식으로 이용될 수 있다. 추가 사 용자 인터페이스 컨트롤은 데이터 부분들로의 신속하고 효율적인 액세스를 위해 이용되어, 지연 및 시스템 자원 점유를 최소화할 수 있다. 이들 및 그외 다른 특징과 장점은 다음의 상세한 설명을 읽어보고 관련된 도면을 검토해보면 명백히 알 수 있을 것이다. 상기 개략적인 설명 및 다음의 상세한 설명은 단지 예시적인 것일 뿐이고, 주장된 대로 실시양상을 제 한하는 것이 아니라는 것을 이해할 것이다."}
{"patent_id": "10-2010-7008251", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "위에서 간략하게 설명된 바와 같이, 웹 애플리케이션에서의 가상 목록 뷰는 사용자가 표시된 데이터를 끊어짐 없이 액세스하고 관리할 수 있도록, 사용자의 스크롤링 행동을 데이터 청크의 다운로드와 조정함으로써 동적으 로 갱신될 수 있다. 다음의 상세한 설명에서, 그 일부를 이루고, 예시적으로 특정 실시예 또는 예가 도시된 첨 부 도면이 참조된다. 이들 실시양상은 결합될 수 있고, 그외 다른 실시양상이 이용될 수 있으며, 본 발명의 정 신 또는 범위를 벗어나지 않고서 구조적 변경이 이루어질 수 있다. 그러므로, 다음의 상세한 설명은 제한적인 의미로 해석되어서는 안 되고, 본 발명의 범위는 첨부된 청구범위 및 그 등가물에 의해 정의된다. 실시예는 개인용 컴퓨터상의 운영 체제에서 실행되는 애플리케이션 프로그램과 관련하여 실행되는 프로그램 모 듈과 일반적으로 관련하여 설명되지만, 본 분야에 숙련된 기술자들은 실시양상이 또한 그외 다른 프로그램 모듈 과 관련하여 구현될 수 있다는 것을 인식할 것이다. 일반적으로, 프로그램 모듈은 특정 작업을 수행하거나 특정 추상 데이터 유형을 구현하는 루틴, 프로그램, 컴포 넌트, 데이터 구조 및 기타 유형의 구조를 포함한다. 게다가, 본 분야에 숙련된 기술자들은 실시예가 핸드헬드 장치, 멀티프로세서 시스템, 마이크로프로세서 기반 또는 프로그램가능 소비자 전자제품, 미니컴퓨터, 메인프레 임 컴퓨터 등을 포함하여 기타 컴퓨터 시스템 구성에서 실시될 수 있다는 것을 알 수 있을 것이다. 실시예는 또한 통신 네트워크를 통해 연결되는 원격 처리 장치에 의해 작업이 수행되는 분산 컴퓨팅 환경에서 실시될 수 있다. 분산 컴퓨팅 환경에서, 프로그램 모듈은 로컬 및 원격 메모리 저장 장치 둘 다에 위치할 수 있다. 실시예는 컴퓨터 프로세스(방법), 컴퓨팅 시스템, 또는 컴퓨터 프로그램 제품 또는 컴퓨터 판독가능 매체와 같 은 제조품으로서 구현될 수 있다. 컴퓨터 프로그램 제품은 컴퓨터 시스템에 의해 판독 가능하고, 컴퓨터 프로 세스를 실행하는 명령어의 컴퓨터 프로그램을 인코딩한 컴퓨터 저장 매체일 수 있다. 도 1과 관련하여, 서버와 클라이언트 사이의 웹 애플리케이션에서의 데이터 프레젠테이션에 대한 개념도가 도시 된다. 웹 애플리케이션은 통상적으로 클라이언트 장치/애플리케이션 내에 사용자 인터페이스를 갖고, 서 버와 같은 데이터 소스와 데이터를 교환하는 광범위한 애플리케이션을 포함한다. 애플리케이션을 위한 실 제 데이터는 하나 이상의 데이터 저장소 내에 존재하고, 서버에 의해 관리될 수 있다. 웹 애플리케이션의 사용자 인터페이스는 사용자가 데이터를 볼 수 있게 하고, 그 데이터에 동작을 실행할 수 있게 하며, 데이터 소스로 다시 보내질 데이터를 변경하는 입력을 제공할 수 있게 한다. 사용자 인터페이스 에 의해 표시된 데이터는 텍스트 데이터, 그래픽 데이터 또는 이 둘의 조합을 다양한 포맷으로 포함할 수 있다. 예를 들어, 데이터는 다양한 형태의 목록, 표, 자유 형식 텍스트, 페이지로서 표시되고, 그외 다른 포맷으로 표 시될 수 있다. 아래에 설명된 실시예는 위에서 설명된 것과 같은 웹 애플리케이션에 관한 것으로, 이들 실시예는 웹 애플리케 이션에 제한되지 않는다. 시스템 자원 및 교환된 데이터의 양이 제한되는 네트워크를 통해 데이터를 교환하고, 목록 뷰 포맷으로 사용자에게 데이터를 표시하는 임의의 애플리케이션은 실시예에 따른 동적 갱신 방법을 구현 할 수 있다. 이러한 애플리케이션의 예로는 수신된 전자 메일의 목록(예를 들어, 제목 줄 및 송신자)을 사용자 에게 제공하는 클라이언트 장치상의 전자 메일 애플리케이션이 있는데, 전자 메일 내용은 주로 서버상에 존재한 다. 이러한 전자 메일 애플리케이션은 웹 애플리케이션일 필요는 없다. 이것은 인트라넷 애플리케이션일 수 있고, 상이한 네트워크 프로토콜(반드시 HTTP일 필요는 없음)을 사용할 수 있지만, 여전히 여기에 설명된 실시 예를 구현할 수 있다. 가상 목록 뷰의 동적 갱신이 구현될 수 있는 그외 다른 예시적인 애플리케이션은 인스턴트 메시징 애플리케이션, 검색 엔진 결과 프레젠테이션 등을 포함하는데, 이에 제한되는 것은 아니다. 이러한 애플리케이 션은 또한 HTML(Hyper Text Markup Language)로 구현되는 것으로 제한되지 않는다. 브라우징 애플리케이션을 위한 임의의 유형의 프로그래밍 언어가 사용될 수 있다. 더욱이, 가상 목록 뷰의 폭 및 높이는 데이터 블록 내 의 행의 수, 스크롤 속도 및 그외 다른 것과 같은 속성에 기초하여 동적으로 변할 수 있다. 도 2는 가상 목록 뷰를 갖는 예시적인 웹페이지의 스크린 샷을 도시한 것이다. 위에서 설명된 바와 같이, 동적 으로 갱신된 가상 목록 뷰는 교환된 데이터를 목록 형태로 사용자에게 표시하는 임의의 사용자 인터페이스에서 구현될 수 있다. 예시적인 웹페이지는 전형적인 웹 브라우저 사용자 인터페이스에 의해 표시된다. 사용자 인터페이스는 표 시된 웹페이지의 URL(Uniform Resource Locator), 메뉴 명령 및 작동 아이콘을 포함한다. 주 요 내용은 목록 뷰 내에 표시된다. 예시적인 웹페이지는 미국 특허청 웹사이트의 특허법 부문이다. 알 수 있는 바와 같이, 웹페이지는 미국 법률(U.S. Code)의 긴 목록을 포함하는데, 각각의 줄은 법률의 특정 부문 으로의 링크를 표시한다. 사용자 인터페이스는 완전한 목록의 제한된 부분만을 표시할 수 있다. 목록 뷰의 표 시된 부분은 뷰 포트라 칭해진다. 스크롤 바는 사용자가 목록 위에서 스크롤 업 및 다운하여 목록의 상이 한 부분을 볼 수 있게 한다. 예시적인 목록은 간단한 줄들을 포함하여, 클라이언트로의 전체 목록의 다운로드에 그리 오래 걸리지 않을 수 있지만, 많은 경우에, 완전한 목록 뷰는 너무 길어서 한 번의 빠른 동작으로는 다운로드할 수 없거나, 또는 개 별 행들은 다운로드 동작이 사용자의 스크롤링 행동과 보조를 맞출 수 없을 정도로 많은 데이터를 포함하고 있 어서 프레젠테이션의 지연 또는 시스템 자원 소모를 초래할 수 있다. 도 3은 몇몇 실시예에 따라 뷰 포트에 표시된 청크에 비해 데이터의 이전 청크 및 다음 청크를 갖는 도 2의 예 시적인 가상 목록 뷰를 도시한 것이다. 실시예에 따른 웹 브라우징 애플리케이션에서, 가상 목록 뷰는 2개의 주요 부분: 스크롤바 및 뷰 포트 로 이루어진다. 이들 2개의 요소는 스크롤바로부터의 이벤트가 캡처되어 원하는 대로 처리되거나 폐 기될 수 있도록 분리된다. 뷰 포트는 행의 \"청크\"를 포함한다(예를 들어: HTML과 관련하여, 청크는 행들 및 소 정의 추가 메타데이터의 표를 포함하는 분할자(divider) 요소 \"DIV\"일 수 있다). 청크는 (미리 정의된 기준에 대한) 위치 특성이 주어지고, 그 스타일 속성을 수정함으로써, 임의의 범위의 행들을 (이들 행이 클라이언트에 서 사용가능한 한) 뷰 포트 내에 보이도록 위치시킬 수 있다. 사용자가 스크롤할 때, 청크는 현재 뷰 포트 내에 보이는 것의 위와 아래에 추가 행을 유지하기 위해 뷰에 추가되거나 뷰에서 제거된다. 클라이언트와 데이터 소스 사이에서 교환된 데이터를 줄임으로써 시스템 자원(통신 대역폭, 메모리 등)의 소모 를 최소화하기 위해, 데이터는 사용자가 미리 정의된 임계치보다 빨리 스크롤하는 경우에 로드되지 않을 수 있 다. 임계치는 한 실시예에 따라, '스크롤 위치가 바로 전의 M 밀리초 내에 N개보다 많은 행만큼 변경되었다면, 사용자가 빨리 스크롤하고 있다'는 것으로 정의될 수 있다. 이 경우에, 뷰 포트는 스크롤링이 느려질 때까지 그대로 유지될 수 있는데, 이때 데이터는 단지 스크롤바의 최종 위치에 대해서만 로드된다. 뷰잉을 위한 행(들)의 선택은 행 ID(들)에 관한 해시로서 클라이언트 상에서 유지될 수 있다. 이것은 행이 선 택되었는지 알기 위해 빠른 조회를 가능하게 하고, 선택된 항목들의 집합을 얻기 위해 열거될 수 있다. 선택된 개별 항목은 또한, 행 ID가 미리 클라이언트 상에 표시되기 때문에 행 선택에 추가될 수 있다. 선택된 항목은 단순히 해시에 추가될 수 있다. 넓은 범위의 선택을 위해, 행들의 일부는 클라이언트 상에 존재하지 않을 수 있다. 그 경우에, 뷰를 재구성하고, 그 범위에 포함된 행 ID들의 집합을 반환하도록 서버(데이터 소스)에 동기 호출이 이루어질 수 있다. 물론, 행 ID를 유지 관리하는 그외 다른 방법이 또한 여기에 설명된 원리를 벗어나 지 않고서 구현될 수 있다. 실제 네트워크 환경에서, 목록의 내용은 데이터 소스 내에서 변경될 수 있다. 클라이언트 상의 웹 애플리케이 션의 사용자 인터페이스는 이것을 반영하기 위해 동적으로 갱신될 필요가 있다. 실행 불가능할 수 있는 전체 데이터 집합을 미리 로드하는 대신에, 실시예에 따른 애플리케이션은 사용자가 현재 보고 있는 데이터 영역만을 로드할 수 있고, 게다가 사용자가 잠시 스크롤하는 경우에 빨리 클라이언트를 갱신할 수 있을 정도로 로드할 수 있다. 갱신은 데이터 소스가 변경될 때, 행마다 클라이언트에게 전달될 수 있다. 서버는 행이 삽입되었는지, 제거되 었는지, 또는 변경되었는지의 여부에 의존하여, 뷰를 갱신하기 위한 최소 데이터를 클라이언트에게 보낼 수 있 다. 그 데이터는 영향을 받은 행의 ID, 그 행에 대한 새로운 마크업(mark-up), 및 (이전 행의 ID에 의해 표시된) 목록 내의 그 행의 위치를 포함할 수 있다. 그 다음, 클라이언트는 이들 갱신을 적용할 수 있다. 다른 실시예에 따르면, 클라이언트 상의 뷰가 서버와의 동기를 벗어날 수 있기 때문에, 워터마크가 각각의 갱신 배치(batch)와 함께 포함될 수 있다. 워터마크는 임의의 가상 목록 동작(예를 들어, 삭제, 이동)으로 다시 보 내져서, 서버상의 현재의 워터마크와 비교될 수 있다. 워터마크가 일치하지 않는 경우에, 이것은 갱신시에, 몇 몇 갱신이 도중에 이루어져야 했고, 알려지지 않았다는 것을 의미한다. 이 경우에, 서버는 클라이언트에게 그 러한 갱신이 적용된 후에 동작을 다시 시도하라고 통지할 수 있다. 도 4는 실시예에 따라 가상 목록 뷰를 동적으로 갱신하기 위해 청크들로 다운로드될 수 있는 데이터 블록의 도 면이다. 위에서 설명된 바와 같이, 가상 목록 뷰 내의 데이터는 다운로드되어, 뷰 포트 내에 블록으로 표시될 수 있다. 한 실시예에 따르면, 한 데이터 블록 및 그 앞의 한 데이터 블록(둘 다 미리 정의된 수의 행을 포함함) 은 현재 뷰잉된 데이터 블록 이외에 다운로드될 수 있다(예를 들어, 블록 N-1, N 및 N+1). 사용자가 미리 정의된 임계치보다 빨리 스크롤하는 경우에, 스크롤링이 임계치보다 낮은 레벨로 느려질 때까지 임의의 후속 블 록들이 스킵될 수 있고, 사용자 자신이 현재 선택한 데이터 행을 표시하기 위해 3개의 순차적인 블록이 다시 다 운로드될 수 있다. 그러나, 실시예는 3개의 순차적인 데이터 블록의 다운로드에 제한되지 않는다. 현재 뷰잉된 블록의 앞과 뒤에 오는 임의의 수의 블록은 사용 가능한 통신 대역폭, 데이터 유형, 사용자 선호도, 스크롤링 속도, 뷰 포트의 크 기, 사용 가능 메모리 등과 같은 여러 요인에 기초하여 클라이언트에게 다운로드될 수 있다. 이런 식으로, 전 체 데이터의 일부는 클라이언트와 데이터 소스 사이의 왕복 트래픽 없이 뷰잉하기 위해 사용 가능하다. 더욱이, 알고리즘은 몇 개의 데이터 블록이 다운로드되었고, 이들 데이터 블록이 사용자에 의해 어떻게 사용되 었는지에 관한 과거의 정보에 기초하여 인공 지능을 사용함으로써 우선적으로 다운로드하기 위한 데이터 블록의 수를 예측하기 위해 구현될 수 있다. 앞에서 설명된 바와 같이, 소스에서의 데이터는 사용자가 클라이언트 상에서 일부를 보고 있는 동안에 변경될 수 있다. 선택시에 몇몇 행이 존재하고 그외 다른 행이 없는 경우에, 선택이 유지되도록 누락된 행을 검색하기 위해 데이터 소스에 호출이 이루어질 수 있다. 새로운 행이 생성되거나 갱신되는 경우에, 이들 행은 다시 선택 을 유지하기 위해, 선택에서 삭제되지 않는다. 도 5는 데이터의 부분들을 효율적으로 액세스하기 위해 추가 사용자 인터페이스 컨트롤을 갖는 도 2의 예시적인 목록 뷰의 다른 스크린 샷이다. 몇몇 제어 기능은 사용자 경험 및 데이터로의 액세스 용이성을 향상시키도록 가상 목록 뷰를 동적으로 갱신하기 위해 사용자 인터페이스 내에 제공될 수 있다. 예시적인 웹 브라우저 사용자 인터페이스에서, URL, 작동 아이콘 및 스크롤 바와 같은 표준 요소가 가상 목록 뷰의 부분과 함께 도시된다. 한가지 향상된 제어 기능은 스크롤 마킹(scroll-marking)이다. 사용자는 데이터와의 자신의 상호작용을 통해 가상 목록 뷰의 특정 부분으로 되돌아가고 싶어할 수 있다. 아이콘과 같은 스크롤 마킹 아이콘은 사용자 가 지시하면(예를 들어, 포인터 장치상의 우측 클릭시, 메뉴 바 항목의 선택시 등등에) 스크롤 바를 따라 위치 를 나타내기 위해 사용될 수 있다. 더욱 향상된 스크롤 마킹 기능에서, 각각의 스크롤 마킹 아이콘은 그 위치"}
{"patent_id": "10-2010-7008251", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "에 대응하는 행과 관련될 수 있고, 그 행에 대한 요약 정보는 뷰잉 경험을 방해하지 않고 사용자에게 (예를 들 어, 사용자가 스크롤 마킹 아이콘 위에서 호버링(hovering)하고 있을 때 팝-업 상자 내에) 표시될 수 있다. 데이터를 다운로드하는 상이한 방식이 앞에서 설명되었는데, 이 방식에서, 청크는 스크롤링 속도에 기초하여 다 운로드된다. 사용자가 임계치보다 느리게 스크롤하는 경우에, 뷰는 연속적으로 갱신된다. 스크롤링 속도가 임 계치를 초과하면, 스크롤링이 다시 느려져서, 데이터의 새로운 청크들이 뷰잉을 위해 다운로드될 때까지, 뷰가 정지(frozen)될 수 있다. 임계치는 미리 설정되거나, 또는 시스템의 선택 속성에 기초하여 동적으로 결정될 수 있다. 다른 향상된 제어 기능은 사용자가 데이터 행들을 빠르게 지나쳐 스크롤하고 있는 동안에 지나간 데이터 행들의 미리보기를 사용자에게 표시하는 것을 포함할 수 있다. 미리보기는 행 그룹에 기초할 수 있고, 타이틀, 헤딩, 날짜 등과 같은 사용자 정의(또는 선택) 파라미터에 기초하여 분류될 수 있다. 예를 들어, 사용자가 미 국 법률(타이틀 35)을 빠르게 지나쳐 스크롤하고 있는 경우에, 미리보기 상자는 챕터 15 \"식물 특허\", 챕 터 17 \"디자인\" 등과 같은 개별 챕터를 표시하여, 사용자가 실수로 사용자 자신이 보고 싶어하는 행들을 지나쳐 서 스크롤하지 않게 할 수 있다. 미리보기 기능은 사용자에 의해 선택가능한 임의의 방식으로 또는 기본(default) 파라미터에 기초하여 구축될 수 있다. 파라미터는 그룹화 유형, 메타데이터 유형 및 정렬 스타일(알파벳순, 데이터, 타이틀 등)을 포함할 수 있다. 더욱 향상된 제어 기능은 점프 투(jump-to) 컨트롤이라 칭해진다. 이 기능은 사용자가 전체 목록 뷰를 로 드할 필요없이 큰 목록 내의 특정 부분을 검색할 수 있게 한다. 예를 들어, 행들의 알파벳순 선택은 도면에 도 시된 바와 같이 사용자가 그 위치로 스크롤 다운하는 대신에 특정 행으로 점프할 수 있게 할 수 있다. 미리보 기 기능에서처럼, 점프 투 컨트롤은 알파벳순, 연대순, 사용자 정의 등과 같은 다수의 기준에 기초할 수 있다. 한 실시예에 따르면, 점프 투 컨트롤은 정렬 기준에 적절한 드롭다운 메뉴로서 제공될 수 있다. 예를 들어, 목 록이 알파벳순으로 정렬되는 경우에, 메뉴는 알파벳 문자들을 표시할 수 있고, 또는 날짜에 의해 정렬되는 경우 에, 메뉴는 날짜 선택도구(date picker)를 표시할 수 있다. 그 다음, 드롭다운 메뉴 내에서의 값의 선택은 목 록이 그 선택된 값과 동일하거나 그 선택된 값 다음에 오는 제1 행으로 찾아가게 한다. 실시예에 따른 동적으로 갱신된 가상 목록 뷰는 예시적인 애플리케이션과 관련하여 위에서 설명된 것들보다 더 많거나 더 적은 컴포넌트 및 기능으로 구현될 수 있다. 이러한 목록 뷰를 구현하는 애플리케이션은 하나 이상 의 컴퓨팅 장치에서 로컬 방식으로 또는 네트워크화 방식으로 실행될 수 있다. 데이터는 하나 이상의 서버 또 는 데이터 저장소에 저장될 수 있다. 데이터는 구조화 또는 비구조화, 암호화 또는 비암호화될 수 있다. 더욱 이, 추가 방법은 예시적인 향상된 제어 기능 대신에 또는 그러한 제어 기능 이외에 동작을 최적화하기 위해 이 용될 수 있다. 도 6은 실시예가 구현될 수 있는 예시적인 네트워크 환경이다. 가상 목록 뷰의 동적 갱신은 다수의 실제 및 가 상 클라이언트 및 서버를 통해 분산 방식으로 구성된 하나 이상의 컴퓨팅 장치상에서 실행되는 로컬 또는 분산 애플리케이션에서 구현될 수 있다. 이것은 또한 하나 이상의 네트워크(예를 들어, 네트워크(들))를 통해 통신하는 다수의 노드를 이용하는 비클러스터화 시스템 또는 클러스터화 시스템에서 구현될 수 있다. 이러한 시스템은 서버, 클라이언트, 인터넷 서비스 제공자 및 통신 매체의 임의의 토폴로지를 포함할 수 있다. 또한, 시스템은 정적 또는 동적 토폴로지를 가질 수 있는데, 시스템의 계층구조 내의 서버와 클라이언트의 역할 및 그들의 상호관계는 관리자에 의해 정적으로 정의되거나, 또는 장치의 사용 가능성, 로드 균형 조정 등에 기 초하여 동적으로 정의될 수 있다. \"클라이언트\"라는 용어는 클라이언트 애플리케이션 또는 클라이언트 장치를 나타낼 수 있다. 동적으로 갱신된 가상 목록 뷰를 구현하는 네트워크 시스템이 다수의 더 많은 컴포넌트를 포 함할 수 있지만, 관련된 컴포넌트들은 이 도면과 관련하여 설명된다. 위에서 설명된 바와 같이, 웹 애플리케이션(또는 목록 뷰 갱신을 구현하는 임의의 애플리케이션)은 클라이언트 장치(654-656) 또는 서버 상에서 실행될 수 있고, 클라이언트 장치에 의해 액세스될 수 있다. 사용 자는 웹 서버로부터 네트워크(들)를 통해 가상 목록 뷰 내에 표시된 데이터를 액세스할 수 있다. 웹 서버는 데이터 저장소를 사용하여 데이터 자체를 관리하고 저장할 수 있으며, 또는 데이터 저장소 를 관리하는 데이터베이스 서버와 통신할 수 있다. 네트워크(들)는 기업 네트워크와 같은 보안 네트워크, 무선 개방 네트워크와 같은 비보안 네트워크, 또는 인터넷을 포함할 수 있다. 네트워크(들)는 여기에 설명된 노드들 사이의 통신을 제공한다. 예시적이고 비제한적으로, 네트워크(들)는 유선 네트워크 또는 직접 배선 접속과 같은 유선 매체, 및 음향, RF, 적외 선 및 기타 무선 매체와 같은 무선 매체를 포함할 수 있다. 컴퓨팅 장치, 애플리케이션, 데이터 소스, 데이터 배포 시스템의 그외 다른 많은 구성은 데이터 범주에 기초하 여 공동 서버(collaboration server)들을 위한 분산 데이터 저장 장치를 구현하기 위해 이용될 수 있다. 더욱 이, 도 6에서 설명된 네트워크 환경은 단지 예시를 위한 것일 뿐이다. 실시예는 예시적인 애플리케이션, 모듈 또는 프로세스에 제한되지 않는다. 도 7 및 관련된 설명은 실시예가 구현될 수 있는 적합한 컴퓨팅 환경의 간략한 일반적인 설명을 제공하기 위한 것이다. 도 7과 관련하여, 컴퓨팅 장치와 같은 예시적인 운영 환경의 블록도가 도시된다. 기본 구성에서, 컴퓨팅 장치는 클라이언트 장치일 수 있다. 컴퓨팅 장치는 통상적으로 최소한 하나의 처 리 장치 및 시스템 메모리를 포함할 수 있다. 컴퓨팅 장치는 또한 프로그램 실행시에 협력하는 다수의 처리 장치를 포함할 수 있다. 컴퓨팅 장치의 정확한 구성 및 유형에 의존하여, 시스템 메모리는 (RAM과 같은) 휘발성, (ROM, 플래시 메모리 등과 같은) 비휘발성 또는 이 둘의 소정의 조합일 수 있다. 시스템 메모리는 통상적으로, 워싱톤 레드몬드에 위치한 마이크로소프트사로부터의 WINDOWS 운영 체제와 같은, 네트워크화된 개인용 컴퓨터의 동작을 제어하기 적합한 운영 체제를 포함한다. 시스템 메모리는 또한 프로그램 모듈, 클라이언트 애플리케이션, 뷰 모듈 및 데이터 검색 모듈과 같은 하나 이상의 소프트웨어 애플리케이션을 포함할 수 있다. 클라이언트 애플리케이션은 웹 브라우징 애플리케이션과 같이, 다른 소스로부터의 데이터를 가상 목록 뷰 로 사용자에게 표시하는 임의의 애플리케이션일 수 있다. 데이터 검색 모듈은 웹 서버와 같은 원격 데이 터 소스로부터 프레젠테이션을 위한 데이터를 검색할 수 있다. 앞에서 설명된 바와 같이, 전체 가상 목록 뷰의 다운로드는 시스템 자원 한계로 인해 비현실적이거나 실행 불가능할 수 있다. 뷰 모듈은 사용자의 스크롤 링을 대응하는 데이터 청크와 조정할 수 있고, 데이터 검색 모듈이 사용자에 의한 즉시 뷰잉을 위해 필요 한 그러한 데이터 청크만을 검색할 수 있게 할 수 있다. 뷰 모듈은 또한 도 5와 관련하여 위에서 설명된 향상된 제어 기능을 제공할 수 있다. 이 기본 구성은 도 7에서 점선 내의 그러한 컴포넌트들로 도시된다. 클라이언트 애플리케이션의 기능은 여기에서 설명된 바와 같이 2개의 별개의 모듈에 할당될 필요는 없다. 상기 개시된 기능은 더 많거나 더 적은 모듈에 의해 실행되거나, 동일한 애플리케이션에 의해 모두 실행될 수 있다. 컴퓨팅 장치는 추가 특징 또는 기능을 가질 수 있다. 예를 들어, 컴퓨팅 장치는 또한, 예를 들어 자 기 디스크, 광 디스크 또는 테이프와 같은 추가 데이터 저장 장치(이동식 및/또는 비이동식)을 포함할 수 있다. 이러한 추가 저장 장치는 도 7에서 이동식 저장장치 및 비이동식 저장장치로 도시된다. 컴퓨터 저장 매체는 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터와 같은 정보의 저장을 위해 임 의의 방법 또는 기술로 구현된 휘발성 및 비휘발성, 이동식 및 비이동식 매체를 포함할 수 있다. 시스템 메모 리, 이동식 저장장치 및 비이동식 저장장치는 모두 컴퓨터 저장 매체의 예이다. 컴퓨터 저장 매체는 RAM, ROM, EEPROM, 플래시 메모리 또는 기타 메모리 기술, CD-ROM, DVD(digital versatile disks) 또는 기타 광 저장장치, 자기 카세트, 자기 테이프, 자기 디스크 저장장치 또는 기타 자기 저장 장치, 또는 원하는 정보를 저장하기 위해 사용될 수 있고 컴퓨팅 장치에 의해 액세스될 수 있는 임의의 기타 매체를 포함하는 데, 이에 제한되는 것은 아니다. 임의의 이러한 컴퓨터 저장 매체는 장치의 일부일 수 있다. 컴퓨팅 장 치는 또한 키보드, 마우스, 펜, 음성 입력 장치, 터치 입력 장치 등과 같은 입력 장치(들)를 가질 수 있다. 디스플레이, 스피커, 프린터 등과 같은 출력 장치(들)가 또한 포함될 수 있다. 이들 장치는 본 분 야에 잘 알려져 있으므로, 여기에서 더 이상 설명될 필요가 없다. 컴퓨팅 장치는 또한 장치가, 이를테면 분산 컴퓨팅 환경 내의 무선 네트워크, 예를 들어 인트라넷 또는 인 터넷을 통해, 그외 다른 컴퓨팅 장치와 통신할 수 있게 하는 통신 접속을 포함할 수 있다. 그외 다 른 컴퓨팅 장치는 웹 서버, 데이터베이스 서버, 파일 서버, 제공자 서버 등을 포함할 수 있다. 통신 접속 은 통신 매체의 한 예이다. 통신 매체는 통상적으로 반송파 또는 기타 전송 메커니즘과 같은 피변조 데이 터 신호 내의 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터에 의해 구현될 수 있고, 모든 정보 전달 매체를 포함한다. \"피변조 데이터 신호\"라는 용어는, 신호 내에 정보를 인코딩하는 방식으로 그 신호의 특성들 중 하나 이상을 설정 또는 변경시킨 신호를 의미한다. 예시적이고 비제한적으로, 통신 매체 는 유선 네트워크 또는 직접 배선 접속과 같은 유선 매체, 및 음향, RF, 적외선 및 기타 무선 매체와 같은 무선 매체를 포함한다. 청구된 주제는 또한 동작 방법을 포함한다. 이들 방법은 이 문서에서 설명된 구조를 포함하여 임의의 수의 방 식으로 구현될 수 있다. 한가지 이러한 방식은 이 문서에 설명된 유형의 장치의 머신 동작에 의한 것이다. 다른 선택적인 방식은 방법의 개별 동작 중의 하나 이상이, 어떤 동작을 실행하는 한 명 이상의 인간 운영자와 관련하여 실행되는 것이다. 이들 인간 운영자는 서로 협력해야 하는 것이 아니라, 각각이 프로그램의 일부를 실행하는 머신만 갖고 있으면 된다. 도 8은 실시예에 따라 가상 목록 뷰를 동적으로 갱신하는 예시적인 프로세스의 논리 흐름도를 도시한 것이다. 프로세스는 임의의 웹 애플리케이션 환경에서 구현될 수 있다. 프로세스는 동작에서 시작되는데, 이 동작에서는 사용자에게 프레젠테이션하기 위한 초기 데이 터 블록, 이를테면 웹 브라우저 애플리케이션 내의 웹 페이지의 제1 뷰가 데이터 소스로부터 수신된다. 처리는 동작에서 동작으로 계속된다. 동작에서, 수신된 초기 데이터 블록(들)은 웹 애플리케이션에 의해 사용자에게 표시된다. 처리는 동작 에서 동작으로 진행한다. 동작에서, 가상 목록 뷰를 통한 사용자의 스크롤링 동작이 검출된다. 위에서 설명된 바와 같이, 사용자는 애플리케이션이 스크롤되어 지나가는 데이터를 동시에 다운로드하고 표시하기에 적당한 속도보다 느리거나 빠르 게 스크롤할 수 있다. 처리는 동작에서 판정 동작으로 진행한다. 판정 동작에서, 스크롤링이 미리 결정된 임계치보다 빠른지의 여부에 대해 판정이 이루어진다. 스크롤링 이 임계치보다 빠르지 않으면, 처리는 동작으로 진행하는데, 이 동작에서는, 데이터 교환이 시스템 자원을 압도할 수 있는 것이 아니기 때문에, 뷰가 연속적으로 갱신된다. 스크롤링이 임계치보다 빠르면, 처리는 판정 동작에서 동작으로 계속되는데, 동작에서는, 스크 롤되어 지나간 데이터 블록이 스킵된다(클라이언트에게 다운로드되지 않는다). 뷰는 그 시간 프레임 동안에 정 지될 수 있고, 미리보기 기능과 같은 추가적인 향상된 제어 기능이 제공될 수 있다. 처리는 동작에서 판 정 동작으로 진행한다. 판정 동작에서, 스크롤링이 미리 정의된 임계치 미만으로 느려졌는지의 여부에 대해 판정이 이루어진다. 스크롤링이 여전히 임계치보다 높으면, 처리는 스크롤되어 지나가는 데이터를 계속 스킵하기 위해 동작으 로 되돌아간다. 스크롤링이 느려졌으면, 처리는 동작으로 진행한다. 동작에서, 뷰 포트 내에 표시될 데이터 블록, 및 표시된 블록의 앞과 뒤에 오는 미리 설정된 수의 데이터 블록을 포함하는 데이터 블록의 범위가 클라이언트에게 다운로드된다. 처리는 동작에서 동작으로 진 행한다. 동작에서, 데이터는 데이터 소스에서 어떤 변경이 있는 경우에 갱신된다. 처리는 동작에서 동작 으로 계속된다. 동작에서, 다운로드된 데이터 블록은 느린 스크롤 모드로 사용자에게 표시된다. 동작 후, 처리는 추 가 동작을 위해 호출 프로세스로 이동한다. 프로세스에 포함된 동작은 예시를 위한 것이다. 웹 애플리케이션 내의 가상 목록 뷰를 동적으로 갱신하는 것은 여기에 설명된 원리를 사용하는 동작들의 상이한 순서로뿐만 아니라, 더 적거나 많은 단계로 유사한 프로 세스에 의해 구현될 수 있다. 상기 명세서, 예 및 데이터는 실시예 구성의 제조 및 사용에 관한 완전한 설명을 제공한다. 주제가 구조적 특 징 및/또는 방법적 동작에 특정된 언어로 설명되었지만, 첨부된 청구범위에 정의된 주제는 반드시 상기 설명된 특정 특징 또는 동작에 제한되는 것은 아니라는 것을 이해할 것이다. 오히려, 상기 설명된 특정 특징 및 동작 은 청구범위 및 실시예를 구현하는 예시적인 형태로 개시된다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8"}
{"patent_id": "10-2010-7008251", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 서버와 클라이언트 사이의 웹 애플리케이션에서의 데이터의 프레젠테이션을 도시한 개념도. 도 2는 가상 목록 뷰를 갖는 예시적인 웹페이지의 스크린 샷을 도시한 도면. 도 3은 몇몇 실시예에 따라 뷰 포트(view port)에 표시된 청크에 비해 데이터의 이전 청크 및 다음 청크를 갖는 도 2의 예시적인 가상 목록 뷰를 도시한 도면.도 4는 실시예에 따라 가상 목록 뷰를 동적으로 갱신하기 위해 청크들로 다운로드될 수 있는 데이터 블록의 도 면. 도 5는 데이터 부분들을 효율적으로 액세스하기 위해 추가 사용자 인터페이스 컨트롤을 갖는 도 2의 예시적인 목록 뷰의 다른 스크린 샷. 도 6은 실시예가 구현될 수 있는 네트워크 환경을 도시한 도면. 도 7은 실시예가 구현될 수 있는 예시적인 컴퓨팅 운영 환경의 블록도. 도 8은 실시예에 따라 가상 목록 뷰를 동적으로 갱신하기 위한 예시적인 프로세스의 논리 흐름도를 도시한 도면."}
