{"patent_id": "10-2023-0103692", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0163498", "출원번호": "10-2023-0103692", "발명의 명칭": "컴퓨팅 시스템 및 그 동작 방법", "출원인": "매크로닉스 인터내셔널 컴퍼니 리미티드", "발명자": "쳉, 포-하오"}}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컴퓨팅 시스템에 있어서,복수의 메모리들을 포함하고, 상기 메모리들은 각기각각의 감지 증폭기에 연결되는 각각의 매치 라인,각각의 소스 라인, 그리고 (a) 상기 각각의 매치 라인 및 (b) 상기 각각의 소스 라인에 각기 연결되는 각각의 복수의 메모리 스트링들을포함하며, 각 메모리 스트링은 각기 (c) 각각의 설정된 상태 및 (d) 각각의 컨트롤 입력을 가지고, 반응하는 각각의 복수의 직렬 연결된 플로팅-게이트 트랜지스터들을 구비하고;각각의 상기 직렬 연결된 플로팅-게이트 트랜지스터들의 상기 각각의 컨트롤 입력들 중의 각각의 것에 각기 연결되는 복수의 워드 라인들을 포함하며;검색을 수신하고, 검색 인코딩에 따라 상기 워드 라인들을 구동시킬 수 있는 검색 인코더를 포함하고;(e) 각 메모리 스트링은 상기 각각의 메모리 스트링이 상기 메모리 스트링의 상기 직렬 연결된 플로팅-게이트트랜지스터들의 컨트롤 입력들과 정확하게 매치되는 상기 메모리 스트링의 설정된 상태에 상응하는 매치-발견(match-found) 임피던스를 통해 연결되는 상기 각각의 매치 라인들 및 소스 라인들에 연결되며, (f) 각 감지 증폭기는 이에 연결되는 상기 매치 라인이 상기 매치-발견 임피던스를 통해 상기 소스 라인에 연결되는 지의 각각의 표시를 생성하게 할 수 있고,(g) 각 메모리 스트링은 상기 메모리 스트링이 상기 메모리 스트링의 상기 직렬 연결된 플로팅-게이트 트랜지스터들의 컨트롤 입력들과 정확하게 매치되지 않는 상기 메모리 스트링의 설정된 상태들에 상응하여 매치-미발견(no-match-found) 임피던스를 통해 연결되는 상기 각각의 매치 라인 및 소스 라인에 더 연결될 수 있으며,(h) 각 감지 증폭기는 이에 연결되는 상기 매치 라인이 상기 매치-미발견 임피던스를 통해 상기 소스 라인에 연결되는 지의 각각의 표시를 더 발생시킬 수 있는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 워드 라인들은 상기 검색 인코딩에 따라 쌍들로 동작되며, 상기 설정된 상태들은 특징 인코딩(feature encoding)에 따라 쌍들로 관리되는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 각각의 상기 설정된 상태들은 각각의 임계 전압에 대응되는 것을 특징으로 하는 컴퓨팅시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서, 각각의 상기 컨트롤 입력들은 상기 직렬 연결된 플로팅-게이트 트랜지스터들 중의 하나 또는그 이상의 각각의 게이트에 연결되는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제3항에 있어서, 상기 임계 전압들은 하나 또는 그 이상의 프로그래밍 동작들을 통해 설정될 수 있는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 각각의 상기 메모리 스트링들은 선택적으로 상기 워드 라인들의 상기 각각의 메모리 스트링을공개특허 10-2024-0163498-3-독립적으로 사용 가능 또는 사용 불능으로 되게 하기 위해 각각의 메모리 스트링을 사용 가능으로 하는 컨트롤입력에 상응하여 각각의 메모리 스트링을 사용 가능으로 하는 장치를 포함하는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "컴퓨팅 방법에 있어서,하나 또는 그 이상의 검색 파라미터들을 수신하는 단계를 포함하고;워드 라인 전압들의 쌍들을 생성하도록 복수의 검색 인코딩들 중의 특정한 것에 따라 상기 검색 파라미터들을인코딩하는 단계를 포함하며, 상기 특정한 검색 인코딩은 복수의 특징 인코딩들 중의 특정한 것에 따라 플로팅-게이트 트랜지스터들의 쌍 내에 저장된 특징과 매치되기 위해 검색을 사용 가능하게 하고, 상기 특정한 검색 인코딩 및 상기 특정한 특징 인코딩은 일, 영 및 일 또는 영의 표시를 사용 가능하게 하며;상기 생성된 워드 라인 전압들에 따라 상기 플로팅-게이트 트랜지스터들의 쌍 중의 복수의 직렬 연결된 예들의워드 라인들의 쌍들을 구동시키는 단계를 포함하고, 상기 직렬 연결된 예들은 복수의 공유되는 매치 라인들에영향을 미치도록 병렬로 동작할 수 있는 각각의 복수의 메모리 스트링들로서 조직화되며, 각각의 공유되는 매치라인은 상기 메모리 스트링들 중의 둘 또는 그 이상에 연결되고, 워드 라인들의 각 쌍은 상기 한 쌍의 플로팅-게이트 트랜지스터들의 상기 예들 중의 적어도 둘에 연결되며;상기 공유되는 매치 라인들이 소정의 감지 임계보다 큰 전압 변화를 가지는 것을 결정하기 위해 상기 공유되는매치 라인들 상의 전압 변화들을 감지하는 단계를 포함하고;상기 검색 파라미터들과 상기 저장된 특징들 사이의 상대적인 매치의 표시들로서 상기 결정하는 단계의 결과들을 제공하는 단계를 포함하는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 복수의 검색 인코딩들 중의 적어도 하나 또는 상기 복수의 특징 인코딩들 중의 적어도 하나는 확장 인코딩(expansion encoding) 및 원-핫 인코딩(one-hot encoding) 중의 적어도 하나를 따르는 것을특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제7항에 있어서, 상기 복수의 검색 인코딩들 중의 적어도 하나 또는 상기 복수의 특징 인코딩들 중의 적어도 하나는 역확장 인코딩(reverse expansion encoding)을 따르는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제7항에 있어서, 상기 저장된 특징들 중의 적어도 하나는 원-핫 인코딩을 이용하여 저장된 범위에 대응되는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제7항에 있어서, 상기 워드 라인 전압들의 쌍들 중의 적어도 하나는 원-핫 인코딩으로 인코딩된 범위에 따르는것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제7항에 있어서, 상기 복수의 검색 인코딩들 중의 적어도 하나 또는 상기 복수의 특징 인코딩들 중의 적어도 하나는 로우 이펙트 인코딩(low effect encoding)을 따르는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "컴퓨팅 시스템에 있어서,검색을 제공하고, 상기 검색의 하나 또는 그 이상의 결과들을 수신하기 위해 호스트 에이전트를 사용 가능하게하는 인터페이스 회로부를 포함하고;메모리 스트링들의 복수의 블록들을 포함하며, 각 블록은 각기 상기 검색에 상응하여 결정될 수 있는 전압들을공개특허 10-2024-0163498-4-가지는 워드 라인들의 동일한 세트들을 수신하고;각각의 상기 블록들로부터의 상기 메모리 스트링들 중의 대응되는 것에 각기 연결되는 복수의 감지 증폭기들을포함하며;상기 감지 증폭기들로부터 매치 표시들을 수신하도록 사용될 수 있는 우선순위 인코더 회로부(priority encodercircuitry)를 포함하고,상기 감지 증폭기들은, (1) 상기 감지 증폭기에 연결되는 상기 메모리 스트링들 내에 저장된 특징 정보 및 (2)상기 감지 증폭기에 연결되는 상기 메모리 스트링들에 의해 수신되는 상기 워드 라인들 사이의 매치들에대하여, (3) 매치들이 존재하지 않는 것 및 (4) 적어도 하나의 매치가 존재하는 것을 결정하도록 사용될 수 있으며,상기 우선순위 인코더 회로부는, 상기 감지 증폭기들의 결정들에 기초하여, 상기 감지 증폭기들에 의해 확인되는 임의의 매치들 중의 가장 높은 우선순위 매치로서 상기 결과들의 적어도 일부를 표시하도록 사용될 수 있는것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서, 상기 호스트 에이전트를 더 포함하는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제13항에 있어서, 상기 우선순위 인코더 회로부는, 상기 감지 증폭기들의 결정들에 기초하여, 상기 감지 증폭기들에 의해 확인되는 임의의 매치들 중의 제2의 가장 높은 우선순위 매치로서 상기 결과들의 적어도 일부를 표시하도록 사용될 수 있는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제13항에 있어서, 상기 특징 정보는 상기 메모리 스트링들의 플로팅-게이트 트랜지스터들의 임계 전압들을 설정하여 상기 메모리 스트링들 내에 저장되는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제13항에 있어서, 상기 블록들 중의 둘 또는 그 이상이 동시에 동작될 수 있는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제13항에 있어서, 특징 인코딩이 상기 특징 정보 중의 적어도 일부를 인코딩하도록 이용되며, 검색 인코딩이 상기 검색의 적어도 일부를 인코딩하도록 이용되는 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서, 상기 특징 인코딩은 확장 인코딩, 역확장 인코딩, 원-핫 인코딩 및 로우 이펙트 인코딩 중의적어도 하나인 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제13항에 있어서, 상기 컴퓨팅 시스템은 시스템-온-칩(SOC)의 일부인 것을 특징으로 하는 컴퓨팅 시스템."}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "3D 검색 엔진은 불휘발성 메모리 어레이의 워드 라인들에 대한 적용을 위한 검색들을 수신한다. 상기 엔진은 검 색들의 정보의 비트 당 둘의 워드 라인들 및 검색에 대해 저장된 특징의 비트 당 둘의 메모리 장치들을 이용하며, 선택적으로 무정의 및/또는 와일드카드 인코딩을 가능하게 한다. 상기 엔진은 검색을 위한 각각의 매 (뒷면에 계속)"}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 3D-NAND 메모리를 이용하여 구현될 수 있고, 빅 데이터 및/또는 인공지능(AI) 처리에 적용될 수 있는 3D 인-메모리 검색(IMS)에 관한 것이다."}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "빅 데이터 및 AI(AI 하드웨어 가속기들과 같은)의 성장은 검색, 비교 및/또는 데이터 분류의 중요성을 증가시키 고 있다. 종래의 시스템들은 터너리 콘텐트 접근 가능 메모리(TCAM) 기술을 이용하여 동시 검색을 수행한다. 종래의 TCAM 기술은 정적 임의 접근 가능 메모리(SRAM) 기술들을 이용하여 수행될 수 있으며, 이에 따라 상대적 으로 낮은 메모리 밀도(단일의 TCAM 셀을 형성하기 위한 16개의 트랜지스터들과 같이) 및 상대적으로 높은 전력 사용을 가진다. 최근에 제시된 TCAM 기술은 2개의 트랜지스터-2개의 트랜지스터(2T2R) 기술들 및 2개의 강자성 전계 효과 트랜 지스터(2FeFET) 기술들을 기반으로 하는 것과 같은 비휘발성 메모리 기술들을 이용하여 구현될 수 있다. 그러나, 상기 비휘발성으로 구현되는 TCAM 기술들은 단일의 TCAM 셀에 대해 쌍으로 된 메모리(또는 하나의 검색 비트 또는 하나의 데이터 비트를 구현하기 위한 쌍으로 된 메모리 셀들)을 요구하며, 이에 따라 검색 및 데이터 저장의 효율이 제한된다. 정확 매칭 및 근접 매칭 동작들을 수행하게 될 수 있는 NAND-플래시 기반의 IMS 기능들을 이용한 예시적인 기술 들이 P. H. Tseng 등의 “In-Memory-Searching Architecture Based on 3D-NAND Technology with Ultra-high Parallelism”(2020, IEDM) 및 P. H. Tseng 등의 “In-Memory Approximate Computing Architecture Based on 3D-NAND Flash Memories”(2022, VLSI)에 기재되어 있다."}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "이에 따라, 빅 데이터 및/또는 AI 처리와 관련되는 바와 같은 고성능의 검색, 비교 및/또는 분류를 가능하게 할 수 있는 기술들이 요구된다."}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "하나 또는 그 이상의 컴퓨터들의 시스템은 동작 시에 상기 시스템이 작용들을 수행하게 하는 소프트웨어, 펌웨 어, 하드웨어, 또는 상기 시스템 상에 설치되는 이들의 결합을 가지는 것에 의해 특정한 동작들이나 작용들을 수행하도록 구성될 수 있다. 하나 또는 그 이상의 컴퓨터 프로그램들은 데이터 처리 장치에 의해 실행될 때에 장치들이 작용들을 수행하게 하는 명령들을 포함하는 것에 의해 특정한 동작들이나 작용들을 수행하도록 구성될 수 있다. 제1 측면은 복수의 메모리들을 가지는 컴퓨팅 시스템(computing system)을 포함한다. 각각의 메모리는 선택적으 로 각각의 감지 증폭기, 각각의 소스 라인 및 각각의 복수의 메모리 스트링(memory string)들에 연결되는 각각 의 매치 라인(match line)을 포함하며, 각각의 메모리 스트링은 (a) 상기 각각의 매치 라인 및 (b) 상기 각각의 소스 라인에 연결되고, 각각의 메모리 스트링은 선택적으로는 각각의 복수의 쌍들의 직렬 연결된 플로팅-게이트 트랜지스터들을 포함하며, 각각의 트랜지스터들은 (c) 각각의 설정된 상태 및 (d) 각각의 컨트롤 입력을 가지고, 이들에 반응한다. 또한, 상기 엔진은 각각의 상기 직렬 연결된 플로팅-게이트 트랜지스터들의 각각의 컨트롤 입력 중의 각각의 것에 각기 연결되는 복수의 워드 라인들; 및 검색을 수신하고, 검색 인코딩(search encoding)에 따라 상기 워드 라인들을 구동시키도록 사용될 수 있는 검색 인코더(search encoder)를 포함하며, 여기서 (e) 각 메모리 스트링은 상기 각각의 메모리 스트링이 상기 메모리 스트링의 상기 직렬 연결된 플로팅- 게이트 트랜지스터들의 컨트롤 입력들과 정확하게 매치되는 상기 메모리 스트링의 설정된 상태에 상응하는 매치 -발견(match-found) 임피던스를 통해 연결되는 상기 각각의 매치 라인들 및 소스 라인들에 연결되고, (f) 각 감 지 증폭기는 이에 연결되는 상기 매치 라인이 상기 매치-발견 임피던스를 통해 상기 소스 라인에 연결되는 지의 각각의 표시를 생성하게 할 수 있으며, (g) 각 메모리 스트링은 상기 메모리 스트링이 상기 메모리 스트링의 상 기 직렬 연결된 플로팅-게이트 트랜지스터들의 컨트롤 입력들과 정확하게 매치되지 않는 상기 메모리 스트링의 설정된 상태들에 상응하여 매치-미발견(no-match-found) 임피던스를 통해 연결되는 상기 각각의 매치 라인 및 소스 라인에 더 연결될 수 있고, (h) 각 감지 증폭기는 이에 연결되는 상기 매치 라인이 상기 매치-미발견 임피 던스를 통해 상기 소스 라인에 연결되는 지의 각각의 표시를 더 발생시킬 수 있다. 상술한 제1 측면의 다른 실시예들은 각기 상기 방법들의 동작들을 수행하도록 구성되는 대응되는 컴퓨터 시스템, 장치 및 하나 또는 그 이상의 컴퓨터 저장 장치들 상에 기록되는 컴퓨터 프로그램들을 포함한다. 일부 컴퓨팅 시스템들은 다음의 특징들 중에서 하나 또는 그 이상을 선택적으로 포함한다. 상기 컴퓨팅 시스템 에서 상기 워드 라인들은 상기 검색 인코딩에 따라 쌍들로 동작되며, 상기 설정된 상태들은 특징 인코딩 (feature encoding)에 따라 쌍들로 관리된다. 각각의 상기 설정된 상태들은 각각의 임계 전압에 대응된다. 각각의 상기 컨트롤 입력들은 상기 직렬 연결된 플로팅-게이트 트랜지스터들 중의 하나 또는 그 이상의 각각의 게이 트에 연결된다. 상기 임계 전압들은 하나 또는 그 이상의 프로그래밍 동작들을 통해 설정될 수 있다. 각각의 상 기 메모리 스트링들은 선택적으로 상기 워드 라인들의 상기 각각의 메모리 스트링을 독립적으로 사용 가능 또는 사용 불능으로 되게 하기 위해 각각의 메모리 스트링을 사용 가능으로 하는 컨트롤 입력에 상응하여 각각의 메 모리 스트링을 사용 가능으로 하는 장치를 포함한다. 설명되는 기술의 구현 예들은 선택적으로는 하드웨어, 방 법이나 프로세스, 또는 컴퓨터 접근 가능 매체 상의 컴퓨터 소프트웨어를 포함한다. 제2 측면은 방법을 포함하며, 상기 방법은 하나 또는 그 이상의 검색 파라미터들을 수신하는 단계를 포함하고; 워드 라인 전압들의 쌍들을 생성하도록 복수의 검색 인코딩들 중의 특정한 것에 따라 상기 검색 파라미터들을 인코딩하는 단계를 포함하며, 상기 특정한 검색 인코딩은 복수의 특징 인코딩들 중의 특정한 것에 따라 플로팅- 게이트 트랜지스터들의 쌍 내에 저장된 특징과 매치되기 위해 검색을 사용 가능하게 하고, 상기 특정한 검색 인 코딩 및 상기 특정한 특징 인코딩은 일, 영 및 일 또는 영의 표시를 사용 가능하게 하며; 상기 생성된 워드 라 인 전압들에 따라 상기 플로팅-게이트 트랜지스터들의 쌍 중의 복수의 직렬 연결된 예들의 워드 라인들의 쌍들 을 구동시키는 단계를 포함하고, 상기 직렬 연결된 예들은 복수의 공유되는 매치 라인들에 영향을 미치도록 병 렬로 동작할 수 있는 각각의 복수의 메모리 스트링들로서 조직화되며, 각각의 공유되는 매치 라인은 상기 메모 리 스트링들 중의 둘 또는 그 이상에 연결되고, 워드 라인들의 각 쌍은 상기 한 쌍의 플로팅-게이트 트랜지스터 들의 상기 예들 중의 적어도 둘에 연결되며; 상기 공유되는 매치 라인들이 소정의 감지 임계보다 큰 전압 변화 를 가지는 것을 결정하기 위해 상기 공유되는 매치 라인들 상의 전압 변화들을 감지하는 단계를 포함하고; 상기 검색 파라미터들과 상기 저장된 특징들 사이의 상대적인 매치의 표시들로서 상기 결정하는 단계의 결과들을 제 공하는 단계를 포함한다. 상기 제2 측면의 다른 실시예들은 상기 방법들의 동작들을 수행하도록 구성되는 대응 되는 컴퓨터 시스템들, 장치들 및 하나 또는 그 이상의 컴퓨터 저장 장치들 상에 기록되는 컴퓨터 프로그램들을 포함한다. 일부 방법들은 선택적으로 다음의 특징들 중의 하나 또는 그 이상을 포함한다. 상기 방법에서, 상기 복수의 검 색 인코딩들 중의 적어도 하나 또는 상기 복수의 특징 인코딩들 중의 적어도 하나는 확장 인코딩(expansion encoding) 및 원-핫 인코딩(one-hot encoding) 중의 적어도 하나를 따른다. 상기 복수의 검색 인코딩들 중의 적 어도 하나 또는 상기 복수의 특징 인코딩들 중의 적어도 하나는 역확장 인코딩(reverse expansion encoding)을 따른다. 상기 저장된 특징들 중의 적어도 하나는 원-핫 인코딩을 이용하여 저장된 범위와 대응된다. 상기 워드 라인 전압들의 쌍들 중의 적어도 하나는 원-핫 인코딩으로 인코딩된 범위에 따른다. 상기 복수의 검색 인코딩들 중의 적어도 하나 또는 상기 복수의 특징 인코딩들 중의 적어도 하나는 로우 이펙트 인코딩(low effect encoding)을 따른다. 설명되는 기술들의 구현 예들은 선택적으로 하드웨어, 방법이나 프로세스, 또는 컴퓨터 접 근 가능 매체 상의 컴퓨터 소프트웨어를 포함한다. 제3 측면은 컴퓨팅 시스템을 포함하며, 상기 컴퓨팅 시스템은 검색을 제공하고, 상기 검색의 하나 또는 그 이상 의 결과들을 수신하기 위해 호스트 에이전트를 사용 가능하게 하는 인터페이스 회로부를 포함하고; 메모리 스트 링들의 복수의 블록들을 포함하며, 각 블록은 각기 상기 검색에 상응하여 결정될 수 있는 전압들을 가지는 워드 라인들의 동일한 세트들을 수신하고; 각각의 상기 블록들로부터의 상기 메모리 스트링들 중의 대응되는 것에 각 기 연결되는 복수의 감지 증폭기들을 포함하며; 상기 감지 증폭기들로부터 매치 표시들을 수신하도록 사용될 수 있는 우선순위 인코더 회로부(priority encoder circuitry)를 포함하고, 상기 감지 증폭기들은, 상기 감지 증폭기에 연결되는 상기 메모리 스트링들 내에 저장된 특징 정보 및 상기 감지 증폭기에 연결되는 상기 메 모리 스트링들에 의해 수신되는 상기 워드 라인들 사이의 매치들에 대하여, 매치들이 존재하지 않는 것 및 적어도 하나의 매치가 존재하는 것을 결정하도록 사용될 수 있으며, 상기 우선순위 인코더 회로부는, 상기 감지 증폭기들의 결정들에 기초하여, 상기 감지 증폭기들에 의해 확인되는 임의의 매치들 중의 가장 높은 우선 순위 매치로서 상기 결과들의 적어도 일부를 표시하도록 사용될 수 있다. 구현 예들은 다음의 특징들 중의 하나 또는 그 이상을 선택적으로 포함한다. 상기 컴퓨팅 시스템은 선택적으로 상기 호스트 에이전트를 포함한다. 상기 우선순위 인코더 회로부는, 상기 감지 증폭기들의 결정들에 기초하여, 상기 감지 증폭기들에 의해 확인되는 임의의 매치들 중의 제2의 가장 높은 우선순위 매치로서 상기 결과들의 적 어도 일부를 표시하도록 사용될 수 있다. 상기 특징 정보는 상기 메모리 스트링들의 플로팅-게이트 트랜지스터 들의 임계 전압들을 설정하여 상기 메모리 스트링들 내에 저장된다. 상기 블록들 중의 둘 또는 그 이상이 동시 에 동작될 수 있다. 특징 인코딩이 상기 특징 정보 중의 적어도 일부를 인코딩하도록 이용되며, 검색 인코딩이 상기 검색의 적어도 일부를 인코딩하도록 이용된다. 상기 특징 인코딩은 확장 인코딩, 역확장 인코딩, 원-핫 인 코딩 및 로우 이펙트 인코딩 중의 적어도 하나이다. 상기 컴퓨팅 시스템은 시스템-온-칩(SOC)의 일부이다. 설명되는 기술들의 구현 예들은 하드웨어, 방법이나 프로세스, 또는 컴퓨터 접근 가능한 매체 상의 컴퓨터 소프트웨 어를 포함한다."}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시예들에 따르면, 범위 매칭이 가능할 수 있도록 원-핫 인코딩을 이용하여, 특징들이 프로그램되면 대용량의 데이터베이스들 사이의 검색들이 전체적으로 이루어질 수 있다. 근접 매칭이 가능할 수 있도록 역확장 인코딩을 이용하여, 특징들이 프로그램되면 대용량의 AI 데이터 세트들 사이의 비교들이 전체적으로 이루어질 수 있다. 확장 및/또는 원-핫 인코딩을 이용하여, 특징들이 프로그램되면 대용량의 데이터 세트들을 분류하는 것이 전체적으로 이루어질 수 있다."}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "3D 검색 엔진(search engine)을 위한 아키텍쳐와 관련되는 기술들의 상세한 설명이 도 1a-도 10을 참조하여 제 공된다. 하나 또는 그 이상의 흐름도들이 여기에 설명된다. 상기 흐름도들에 의해 설명되는 처리는 컴퓨터 시스템들에 접근 가능한 메모리 내에 저장되는 컴퓨터 프로그램들을 이용하여 프로그램된 프로세서들을 사용하여 구현 가능 하거나 및/또는 유도될 수 있으며, 전용 로직 하드웨어(필드 프로그램 가능 집적 회로들을 포함)를 이용하고, 전용 로직 하드웨어(필드 프로그램 가능 집적 회로들을 포함)를 이용하며, 이들의 다양한 결합들을 이용하여 상 기 프로세서들에 의해 실행될 수 있다. 다양한 동작들이 결합될 수 있거나, 병렬로 수행될 수 있거나 및/또는 구현되는 처리에 영향을 미치지 않고 다른 순서로 수행될 수 있다. 일부 경우들에서, 동작들의 재배열은 특정한다른 변화들도 만들어질 경우에 이상적인 결과들을 구현한다. 다른 경우들에서, 동작들의 재배열은 특정한 조건 들이 만족될 경우에만 이상적인 결과들을 구현한다. 또한, 명확성을 위해, 여기서의 흐름도들의 일부에서 개시 되는 기술들을 이해하기 위해 필수적이 아닌 특정한 일부 동작들이 생략된다. 다양한 추가적인 동작들이 예시되 는 동작들 이전에, 이후에 및/또는 그 사이에 수행될 수 있다. 본문에서 사용되는 선택되는 약어들, 연상 기호들 및 생략 부호들의 예들은 다음과 같다. [표]"}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "메모리 스트링의 예는 직렬 연결된 복수의 메모리 장치들이다. 메모리 장치의 예는 상기 메모리 장치의 적어도 둘의 상호 배타적인 상태들 중의 하나를 나타내는 정보는 저장하기 위해 이용될 수 있는 요소이다. 상기 상태들 은 상기 메모리 장치의 프로그래밍을 통해 설정될 수 있고, 상기 메모리 장치의 컨트롤 입력을 활성화시켜 판독 될 수 있다. 일부 유형들의 메모리 장치들에서, 상기 프로그래밍은 상기 메모리 장치의 임계 전압(threshold voltage)을 설정하는 것을 통해 이루어진다. 상기 설정은 때때로 상기 메모리 장치를 프로그램하는 것(예를 들 어, 일 또는 영으로)으로 지칭된다. 때때로 상기 설정은 간단히 상기 값(예를 들어, 일 또는 영)을 저장하는 것으로 언급된다. 3D(검색) 엔진 개념들 빅 데이터 및/또는 AI 프로세싱과 관련되는 바와 같이 고성능의 검색, 비교 및/또는 분류를 가능하게 하는 3D- NAND 메모리를 이용하여 구현될 수 있는 새로운 3D 검색 엔진 아키텍쳐(architecture)가 여기에 개시된다. 상기 아키텍쳐는 적은 대기 시간, 높은 해상도, 높은 콘텐츠 밀도, 다중 블록 기능성 및 높은 신뢰성을 제공한다. 상 기 아키텍쳐는 빅-데이터 검색, AI 하드웨어 가속기들 및/또는 분류기들, 근접 컴퓨팅, 연상 메모리, 퓨샷 러닝 (few-shot learning), SSD 데이터 관리, DNA 매칭, 데이터 필터링, 초고차원 컴퓨팅뿐만 아니라 긴 검색 단어들 및 대용량의 데이터 능력들을 가능하게 하는 IMS로부터 유익한 응용들과 같은 다양한 분야들에 적용될 수 있다. 상기 아키텍쳐가 고성능의 비교와 분류뿐만 아니라 검색이 가능할 수 있기 때문에, “검색(search)”이라는 표 현은 “3D(검색) 엔진”에서 뿐만 아니라 “2D(검색) 엔진”에서와 같은 삽입 표현으로 된다. 새로운 3D(검색) 엔진은 불휘발성 메모리 어레이의 워드 라인들에 대한 적용을 위해 검색들을 수신한다. 상기 3D(검색) 엔진은 상기 검색들의 정보의 비트 당 둘의 워드 라인들을 이용한다. 상기 3D(검색) 엔진은 검색을 위 한 각각의 매칭 라인들로서 상기 불휘발성 메모리 어레이의 각각의 비트 라인들을 이용한다. 상기 불휘발성 메 모리 어레이의 각각의 메모리 스트링들(예를 들어, NAND 메모리 스트링들)은, 예를 들면, 검색되는 특징들에 대응하는 각각의 데이터 워드들을 저장하는 데 이용될 수 있다. 각각의 복수의 상기 메모리 스트링들은 각각의 공 유되는 비트 라인들에 병렬로 연결된다. 일부 사용 시나리오들에서, 3D(검색) 엔진의 판독 대기 시간은 다중의 블록들을 동시에 동작시킴에 의해 감소된 다(일시적인 상대적으로 큰 전류의 잠재적인 소모에서). 상기 동시 동작은 복수의 활성화 컨트롤들, 예를 들면, 스트링 선택 라인(SSL)들을 통하는 것이 된다. 일부 사용 시나리오들에서, 3D(검색) 엔진은, 예를 들면, 선택적인 범위 검색 능력을 가능하게 하는 확장 인코 딩(expansion encoding) 및/또는 원-핫 인코딩(one-hot encoding)을 구비하여 사용된다. 3D(검색) 엔진은 다양한 검색, 비교 및/또는 분류 동작들을 위한 것과 같이 빅 데이터 및/또는 AI에 특별한 적 응성을 가진다. 호스트 에이전트(host agent)는 상기 3D(검색) 엔진 내의 특징들의 저장을 지향하며, 이후에 상 기 저장된 특징들에 대한 매치들을 결정하기 위해 상기 3D(검색) 엔진에 검색들을 제공한다. 상기 매치들의 표 시는 상기 호스트 에이전트로 돌아간다. 3D(검색) 엔진은 상기 2D(검색) 엔진에 걸쳐 동작들을 동시에 수행하기 위해 복수의 2D(검색) 엔진들을 이용하 며, “검색 큐브(Search Cube)” 또는 간단히 “큐브”로 지칭될 수 있다. 상기 3D(검색) 엔진은 복수의 저장된 특징들에 걸쳐 복수의 검색 파라미터들을 이용하여 복수의 검색들을 동시에 수행하게 될 수 있다. 일부 사용 상 황들에서, 상기 동시 검색은 2D(검색) 엔진마다이다. 예를 들면, 각 2D(검색) 엔진에는 고유 검색 동작이 주어 진다. 일부 사용 상황들에서, 상기 동시 검색은 특정한 2D(검색) 엔진 내이다. 예를 들면, 상기 특정한 2D(검색) 엔진의 다른 부분들은 고유한 검색 동작에 주어진다. 일부 사용 상황들에서, 상기 동시 검색은 복수의 2D(검색) 엔진들에 걸쳐 상기 2D(검색) 엔진들 중의 하나 또는 그 이상 내에서 병행된다. 상기 검색 파라미터들 및 상기 저장된 특징들 사이의 매치들의 표시들은 처리를 위해 상기 2D(검색) 엔진들에 의해 제공된다. 상기 처 리는, 예를 들면, 상기 검색 파라미터들과 상기 저장된 특징들 사이의 전체적인 유사성을 결정하는 것 및/또는 예를 들어, 버퍼링(buffering), 캐싱(caching) 및/또는 우선순위 인코딩(priority encoding)(회로부) 중의 하 나 또는 그 이상을 통해 상기 검색 파라미터들과 유사하게 비교되는 하나 또는 그 이상의 저장된 특징들을 확인 하는 것을 포함한다. 상기 3D(검색) 엔진에 의해 이용되는 각 2D(검색) 엔진은 상기 2D(검색) 엔진들로 제공되는 검색 정보(search information)와 상기 2D(검색) 엔진들 내에 저장된 상기 검색 파라미터들 및 특징들 사이에 매치가 존재하는 지 를 검출하기 위해 복수의 메모리 장치들을 포함한다. 상기 2D(검색) 엔진은 상기 검출에 상응하여 매치 표시들 을 생성하며, 버퍼링, 캐싱, 우선순위 인코딩 및 시스템 내의 이용을 위한 출력에 대한 매치 표시를 제공한다. 상기 특징들은 특징 저장 인코딩에 따라 저장된다. 상기 검색 정보는 검색 인코딩에 따라 인코딩된다. 상기 저 장된 특징들의 인코딩들의 예들은 확장 인코딩, 원-핫 인코딩, 로우 이펙트 인코딩(low effect encoding) 및 역 확장 인코딩을 포함한다. 상기 3D(검색) 엔진은 저장 및/또는 특징 인코딩에 따르는 것과 같이 정확 및 근접 매 칭을 수행하게 될 수 있다. 정확 매치는 검색 파라미터 매칭의 모든 비트들과 메모리 스트링 내에 저장된 값의 모든 비트들과 같이 모든 비트들의 매칭에 대응된다. 근접 매칭은 하나를 제외한 모든 비트의 매칭, 둘을 제외 한 모든 비트들의 매칭, 또는 선택적으로는 상기 비트들의 매칭의 90%(예를 들어, 10의 비트들의 매칭에서의 9) 같은 비트들의 매칭의 부분과 같이 보다 적은 모든 비트들의 매칭에 대응된다. 상기 3D(검색) 엔진의 컨트롤 에이전트(control agent)는 선택적으로 상기 2D(검색) 엔진들을 동시에 동작시킨 다. 상기 동시 동작은 동시에 동작하는 상기 2D(검색) 엔진들에 제공되는 동일한 세트의 검색 정보에 대한 동시 매치 결정들을 가능하게 한다. 각 2D(검색) 엔진은 상기 검색 정보 및 상기 2D(검색) 엔진 내에 저장된 특징들 에 따라 매치 표시를 생성한다. 상기 3D(검색) 엔진의 우선순위 인코더는 상기 2D(검색) 엔진들 및/또는 상기 2D(검색) 엔진들 중의 하나 또는 그 이상 내의 상대적인 매칭을 결정하기 위해 매치 표시들을 처리한다. 2D(검색) 엔진은 동시에 동작하는 다수의 메모리 스트링들을 가진다. 상기 2D(검색) 엔진의 메모리 스트링들은 상기 2D(검색) 엔진의 매치 라인(match line)과 소스 라인 사이에 병렬로 연결된다. 각각의 상기 메모리 스트링 들은 각각의 특징을 저장하기 위해 사용될 수 있으며, 각 특징은 복수의 비트들을 가지고, 상기 특징 인코딩들 중의 선택되는 것에 따라 저장된다. 각각의 상기 메모리 스트링들은 (인코딩된)검색 입력을 상기 메모리 스트링 내에 저장된 (인코딩된)특징과 비교하기 위해 이용될 수 있다. 검색 이전에, 상기 컨트롤 에이전트는 상기 선택 된 특징 인코딩에 따라 상기 메모리 장치들 내로 상기 특징들의 페어-와이즈 프로그래밍(pair-wise programming)을 수행한다. 상기 페어-와이즈 프로그래밍은 특징의 각 비트에 대해 직렬 연결된 쌍의 상기 메모 리 장치들의 이용하는 따르는 것이다. 검색을 위해, 상기 컨트롤 에이전트는 상기 검색 정보에 따르고 상기 선 택된 검색 인코딩에 따라 상기 컨트롤 입력들을 쌍들로 구동시킨다. 상기 검색 정보는 범위들에 따라 검색을 가능하게 하는 인코딩들 내의 이용을 위해 검색 패턴과 광학 마스크 및/또는 범위 정보를 포함한다. 상기 검색의 결과들은 이후에 버퍼링되거나, 캐시되거나 및/또는 우선순위 인코딩되는 복수의 매치 표시들로서 제공된다. 예시적 3D(검색) 엔진 구현 예 예시적인 3D(검색) 엔진 구현 예는 메모리 장치들로서 플로팅-게이트 트랜지스터들을 사용한다. 플로팅-게이트 트랜지스터들은 NAND 직렬연결 메모리 스트링들 내에 실체화된다. 따라서, 상기 3D(검색) 엔진은 때때로 3D NAND 검색 엔진으로, 또는 보다 폭넓게는 검색 시스템으로나 선택적으로는 컴퓨팅 시스템(computing system)으 로 지칭된다. 상기 메모리 스트링들은 결과적으로 공유되는 비트 라인과 공유되는 소스 라인 사이에 병렬로 실 체화된다. 상기 공유되는 비트 라인에 연결되는 메모리 스트링들은 때때로 2D(검색) 엔진 또는 보다 폭넓게는 메모리로 지칭된다. 상기 플로팅-게이트 트랜지스터들은 적어도 둘의 상호 배타적인 상태들에 따라 특징들의 비트들을 저장하도록 프로그래밍된다. 상기 프로그래밍은 상기 플로팅-게이트 트랜지스터들의 임계 전압을 설정한다. 상기 프로그램 된 플로팅-게이트 트랜지스터들은 저장된 특징과 상기 플로팅-게이트 트랜지스터들의 컨트롤 게이트들에 연결되 는 워드 라인들 상에 제공되는 검색 사이의 매치를 표시하도록 조건적으로 반응한다(예를 들어, 임피던스 변화 를 통해). 상기 워드 라인들은 상기 메모리 스트링들의 플로팅-게이트 소자들 내로 프로그램되었던 상기 저장된 정보들 사 이에서의 검색을 위해 하나 또는 그 이상의 검색 입력들을 제공하는 데 이용될 수 있다. 각 메모리 스트링은 상 기 메모리 스트링에 연결되는 워드 라인들을 통해 제공되는 검색 값을 상기 메모리 스트링 내로 프로그램되었던 저장된 특징과 비교하기 위해 이용될 수 있다. 각 공유되는 비트 라인은 공유되는 비트 라인 및 상기 각각의 메모리 스트링들의 저장된 특징들에 연결되는 각 메모리 스트링에 각기 제공되는 하나 또는 그 이상의 검색 입력들 사이의 영, 일, 또는 그 이상의 매치들을 표 시하기 위해 매치 라인으로 이용될 수 있다. 공유되는 비트 라인들에 의해 제공되는 매치 표시들은 우선순위 인코딩되며(예를 들어, 소정의 우선순위 계획에 따라), 하나 또는 그 이상의 매칭 결과들이 시스템의 하나 또는 그 이상의 다른 에이전트들에 표시된다. 따라서, 복수의 2D(검색) 결과들이 하나 또는 그 이상의 3D(검색) 결과들 내로 결합된다. 도 1a-도 1c는 3D 엔진으로서 NAND 기반의 3D(검색) 엔진과 같은 예시적인 3D(검색) 엔진의 다양한 측면 들을 총괄적으로 도시한다. 도 1a는 예시적인 3D(검색) 엔진의 개괄을 도시하고, 도 1b는 도 1a의 예시적인 3D(검색) 엔진의 일부 측면들을 상세하게 도시하며, 도 1c는 도 1a의 예시적인 3D(검색) 엔진의 일부 측면들을 보다 상세하게 도시한다. 도 1a를 참조하면, 명확성을 위해 도면은 단순화된다. 3D 엔진은 2D 엔진들로서 복수(예를 들어, 128K)의 동일한(또는 선택적으로는 실질적으로 유사한) 2D(검색) 엔진들을 포함한다. 명확성을 위해, 상기 2D(검색) 엔진들 중의 하나를 제외하고 모두의 임의의 세부 사항들은 생략된다. 2D 엔진들 중의 각각의 상기 2D(검색) 엔진들은 3D 엔진에 제공되는 특징 정보(feature information)를 저장하기 위해 메모리 스트링들로 개념적으로 나타낸 복수의 메모리 스트링들을 가진다. 저장되는 특징들은 개념적으로 저장된 특징들로 나타낸다. 메모리 스트링들도 매치 라인들 중의 각각의 매치 라인들에 조건적으로 영향을 미쳐 3D 엔진에 제공되는 상기 저장된 특징 정보 및 검색 정보 사이의 매치들을 결정하는 데 이용된다. 예를 들면, 상기 조건적으로 영향을 미치는 것은 상기 검색 입력 들의 일부와 상기 저장된 특징들의 일부 사이의 매치에 기초하여 매치 라인의 프리차지된 값(precharged valu e)을 방출하는 것을 포함한다. 특징 인코더(Feature Encoder)는 3D 엔진에 제공되는 특징들(예를 들어, 호스트 에이전트에 의해 생성되는)을 수신한다. 이에 대응하여, 특징 인코더가 저장된 특징들의 부분들로서 저장하도 록 상기 2D(검색) 엔진들의 메모리 스트링들에 대한 적용을 위해 적합한 특징 입력들을 선택된 특징 인코 딩을 통해 생성한다. 각 2D(검색) 엔진의 각 메모리 스트링은 고유한 특징들을 저장하는 것이 가능하며, 이에 따라 특징 입력들은 상기 2D 엔진들 중의 각각의 2D(검색) 엔진들에 대해 고유 커플링(coupling)들 을 가지는 것으로 나타난다. 상기 고유 커플링은 별도의 신호들을 통해 각각의 상기 2D(검색) 엔진들, 공유되는 신호들의 공유 시분할 다중화 세트(예를 들어, 버스), 또는 각각의 상기 2D(검색) 엔진들의 각각의 상기 메모리스트링들이 고유 특징들을 저장하게 할 수 있는 임의의 다른 적합한 통신 메커니즘에 대해 구현될 수 있다. 검색 인코더(Search Encoder)는 상기 3D 엔진에 제공되는 검색들(예를 들어, 상기 호스트 에이전트에 의해 생성되는)을 수신한다. 이에 대응하여, 검색 인코더는 검색 입력들과 저장된 특징 들 사이의 매치들(필요할 경우에)을 결정하도록 상기 2D 엔진들 중의 상기 2D(검색) 엔진들의 메모 리 스트링들에 대한 적용을 위해 적합한 검색 입력들을 선택된 검색 인코딩을 통해 생성한다. 각 2D(검색) 엔진은 동일한 검색 정보를 수신하며, 이에 따라 검색 입력들은 각각의 상기 2D(검색) 엔진들에 대해 병렬 커플링들을 가지는 것으로 나타난다. 이는 특징 정보의 분배를 위해 이용되는 상기 고유 커플링과는 대조적이다. 상기 병렬 커플링들은 별도로 버퍼링된 신호들을 통해 각각의 상기 2D(검색) 엔진들, 연결된 신호 들의 단일의 세트(예를 들어, 버스), 또는 각각의 상기 2D(검색) 엔진들이 동일한 검색 정보를 수신하게 할 수 있는 임의의 다른 적합한 통신 메커니즘에 대해 구현될 수 있다. 특정 2D(검색) 엔진의 각 메모리 스트링의 각 메모리 장치는 WL들로서 예시한 워드 라인들의 샘플링(sampling)으로서 도 1a에 개념적으로 예시한 바와 같은 고유 워드 라인(검색 입력들을 통해 제공되는 바와 같은)을 수신한다. 각 2D(검색) 엔진은 동일한 검색 정보를 수신하는 동안, 2D(검색) 엔진 내의 각각의 상기 메모리 스트링들은 고유한 검색 정보를 수신한다. 검색 입력들에 응답하고, 각각의 상기 2D(검색) 엔진들의 저장된 특징들에 기초하여, 각 2D(검색) 엔진 비트 라인(예를 들어, 각각의 매치 라인들)은 각각의 상기 2D(검색) 엔진들에 대한 매치 표시를 결 정하기 위해 SA들의 각각의 감지 증폭기(sense amplifier)에 각각의 매치 정보를 제공한다. 상기 매치 표 시들은 이후에 페이지 버퍼(page buffer), 캐시(cache), 우선순위 인코더에 의해 처리되고, 출력 매칭 결 과(들)로 제공되며, 예를 들면, 결과(들)로서 상기 호스트 에이전트로 전송된다. 도 1b를 다시 참조하면, 도 1a의 예시적인 3D(검색) 엔진의 일부 측면들이 보다 상세하게 예시된다. 동일한 요 소 식별자들을 가지는 도 1b 및 도 1a의 요소들은 동일한 요소들이다. 도 1a에서와 같이, 명확성을 위해, 도 1b 는 단순화된다. 상기 2D(검색) 엔진들 중의 셋(2D(검색) 엔진_0, 2D(검색) 엔진_128K-2 및 2D(검색) 엔진_128K-"}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "1)이 각기 동시에 동작 가능한 메모리 스트링들을 가지는 것으로 예시된다. 도 1a에 대하여 요약되는 바와 같이, 3D 엔진은 감지 증폭기 회로를 포함한다. 각 2D(검색) 엔진에 대해 하나의 감지 증폭기, 총괄적으 로 SA들이 존재한다. 명확성을 위해, 상기 감지 증폭기들 중의 셋이 예시되며, 각기 예시한 2D(검색) 엔 진들 중의 각각의 것에 연결된다. 3D 엔진은 포스트-센싱 회로부(post-sensing circuitry), 총괄적으로 출력 매칭 결과(들)로서 매칭 검색들의 결과들을 생성하기 위해 SA들의 각각의 상기 감지 증폭기들 의 출력(들)을 처리하도록 페이지 버퍼, 캐시, 우선순위 인코더를 더 포함한다. 각각의 상기 2D(검색) 엔진들은 X 및 Z 치수들로 예시된다. 일부 변형들에서, 플레이너 프로세스(planar process)에 기초하여 집적 회로로 구성된 상기 집적 회로의 층들이 Z 치수로 구성된다. 상기 2D(검색) 엔진들은 상기 Y 치수로 정렬된다. 도 1c를 이제 참조하면, 도 1a 및 도 1b의 예시적인 3D(검색) 엔진의 일부 측면들이 보다 상세하게 예시된다. 동일한 요소 식별자들을 가지는 도 1c, 도 1b 및 도 1a의 요소들은 동일한 요소들이다. 도 1a 및 도 1b에서와 같이, 명확성을 위해, 도 1c는 단순화된다. 각각의 상기 2D(검색) 엔진들은 각기 비트 라인을 포함한다. 특히, 2D(검색) 엔진_0, 2D(검색) 엔진_128K- 2 및 2D(검색) 엔진_128K-1은 각기 BL_0, BL_128K-2 및 BL_128K-1을 포함한다. 도 1a에서, 각 비트 라인이 검색 및 저장된 정보 사이의 매치를 표시하는 데 이용될 수 있으므로 상기 비트 라인들 은 집합적으로 매치 라인들로 지칭되는 점에 유의한다. 각 2D(검색) 엔진은 복수의 메모리 스트링들(예를 들어, 512의 메모리 스트링들)을 포함한다. 명확성을 위해, 상기 메모리 스트링들 중의 넷이 예시된다. 각 메모 리 스트링은 각각의 SSL 입력에 의해 제어되는 트랜지스터를 통해 상기 2D(검색) 엔진의 비트라인에 선택적으로 연결된다. 상기 트랜지스터 및 상기 SSL 입력은 집합적으로 상기 SSL 입력의 활성화(비활성화)에 기초하여 상기 메모리 스트링을 선택적으로 이용 가능(이용 불능)으로 할 수 있다. 각 SSL 입력은 각각의 상기 2D(검색) 엔진 들의 메모리 스트링에 연결된다. 따라서, 각 SSL 입력은 상기 SSL 입력의 활성화(비활성화)에 기초하여 상기 메 모리 스트링들의 블록을 사용 가능(사용 불능)으로 만들 수 있다. 예를 들면, SSL0은 각기 각각의 트랜지스터를 통해 선택적으로 2D(검색) 엔진_0을 BL_0의 첫 번 째 메모리 스트링에 연결하고, 2D(검색) 엔진_128K-2의 첫 번째 메모리 스트링을 BL_128K-2에 연결하 며, 2D(검색) 엔진_128K-1의 첫 번째 메모리 스트링을 BL_128K-1에 연결하게 될 수 있다. SSL0은 또한 선택적으로 2D(검색) 엔진_0 및 2D(검색) 엔진_128K-2 사이의 상기 2D(검색) 엔진들의 128K-3 첫 번째 메모리 스트링들(예시되지 않음)을 각각의 트랜지스터들을 통해 상기 비트 라인들에 각기 연결 하게 될 수 있다. 다른 예를 위해, SSL511은 각기 각각의 트랜지스터를 통해 선택적으로 2D(검색) 엔진_0의 512번째 메 모리 스트링을 BL_0에 연결하고, 2D(검색) 엔진_128K-2의 512번째 메모리 스트링을 BL_128K- 2에 연결하며, 2D(검색) 엔진_128K-1의 512번째 메모리 스트링을 BL_128K-1에 연결하게 될 수 있다. SSL511은 또한 2D(검색) 엔진_0 및 2D(검색) 엔진_128K-2 사이의 상기 2D(검색) 엔진들 의 128K-3 512번째 메모리 스트링들(예시되지 않음)을 각각의 트랜지스터들을 통해 각기 내부의 상기 비트 라인 들에 연결하게 될 수 있다. 상기 비트 라인들과 유사하게, 각각의 상기 2D(검색) 엔진들은 각각의 소스 라인(예시되지만 명확성을 위해 식 별되지는 않음)을 포함한다. 각 메모리 스트링은 각각의 GSL 입력에 의해 제어되는 트랜지스터를 통해 상기 2D (검색) 엔진의 소스 라인에 선택적으로 연결된다. 다시 상기 비트 라인들과 유사하게, 예를 들면, GSL0이 각기 각각의 트랜지스터를 통해 선택적으로 상기 2D(검색) 엔진_0의 첫 번째 메모리 스트링을 상기 2D(검색) 엔진_0의 소스 라인에 연결하고, 상기 2D(검색) 엔진_128K-2의 첫 번째 메모리 스트링을 상기 2D(검색) 엔진_128K-2의 소스 라인에 연결하 며, 상기 2D(검색) 엔진_128K-1의 첫 번째 메모리 스트링을 상기 2D(검색) 엔진_128K-1의 소스 라인 에 연결하게 될 수 있다. GSL0은 또한 선택적으로 2D(검색) 엔진_0 및 2D(검색) 엔진_128K-2 사이의 상기 2D(검색) 엔진들의 128K-3 첫 번째 메모리 스트링들(예시되지 않음)을 각각의 트랜지스터들을 통해 내부의 소스 라인들에 각기 연결하게 될 수 있다. 다시 상기 비트 라인들과 유사하게, 다른 예를 위해, GSL511은 각각의 트랜지스터를 통해 선택적으로 상기 2D(검색) 엔진_0의 512번째 메모리 스트링을 2D(검색) 엔진_0의 소스 라인에 연결하고, 2D(검색) 엔 진_128K-2의 512번째 메모리 스트링을 2D(검색) 엔진_128K-2의 소스 라인에 연결하며, 2D(검색) 엔 진_128K-1의 512번째 메모리 스트링을 2D(검색) 엔진_128K-1의 소스 라인에 연결하게 될 수 있다. GSL511은 또한 각각의 트랜지스터들을 통해 선택적으로 2D(검색) 엔진_0과 2D(검색) 엔진_128K- 2 사이의 상기 2D(검색) 엔진들의 128K-3 512번째 메모리 스트링들(예시되지 않음)을 내부의 상기 소스 라 인들에 각기 연결하게 될 수 있다. 상기 SSL 및 GSL 입력들은 각각의 상기 2D(검색) 엔진들 내의 각각의 대응되는 메모리 스트링 내에서 대응되는 트랜지스터들에 병렬로 연결된다. 각각의 상기 2D(검색) 엔진들 내에 512의 메모리 스트링들이 존재하므로, 512 의 SSL 입력들 및 512의 GSL 입력들이 있다. 도 1c에서, 비록 GSL0의 점선의 연장이 예시되지만, GSL0과 2D(검색) 엔진_128K-1의 트랜지스터 사이의 커플링이 명확성을 위해 생략되는 점에 유의한다. 3D 엔진에서, 각각의 상기 메모리 스트링들은 동일한 길이의 128의 플로팅-게이트 트랜지스터들(각 메모 리 스트링을 비트 라인 및 소스 라인에 연결하는 트랜지스터들은 제외)이다. 3D 엔진의 평면 집적 회로 프로세스 구현에서, 특정한 숫자의 층들이 상기 메모리 스트링들을 구현하는 데 이용된다. 상기 메모리 스트링 들의 길이가 증가되면서, 상기 메모리 스트링들을 구현하는 데 이용도는 층들의 숫자가 증가된다. 따라서, 상기 메모리 스트링들의 길이를 두 배로 하는 것은 상기 메모리 스트링들을 구현하기 위해 이용되는 층들을 두 배로 만든다. 이제 워드 라인들을 참조하면, 개념적으로 각 2D(검색) 엔진은 워드 라인들의 동일한 2D 어레이에 연결된다. 상 기 X 치수에서, 각각의 상기 512 메모리 스트링들과 일대일로 대응하는 워드 라인들의 512의 칼럼들이 존재한다. 상기 Z 치수에서, 각각의 상기 메모리 스트링들의 플로팅-게이트 트랜지스터들과 일대일로 대응하여 워드 라인들의 128의 로우들이 존재한다. 따라서, 상기 워드 라인들의 2D 어레이는 512의 칼럼들 곱하기 128의 로우들 또는 512 * 128 개개의 워드 라인들이 된다. 각 워드 라인은 각각의 상기 2D(검색) 엔진들 내의 단일의 메모리 스트링의 단일의 플로팅-게이트 트랜지스터에 연결된다. 도 1c에서, 비록 WL0_0의 점선의 연장이 예시되지만, WL0_0 및 2D(검색) 엔진_128K-1의 플로팅-게이트 트랜지스터 사이의 커플링이 명확성을 위해 생략되는 점에 유의한다. 예를 들면, WL0_0은 2D(검색) 엔진_0의 첫 번째 메모리 스트링의 플로팅-게이트 트랜지스터, 2D(검색) 엔진_128K-2의 첫 번째 메모리 스트링의 플로팅-게이트 트랜지스터, 그리고 2D(검색) 엔진_128K- 1의 첫 번째 메모리 스트링의 플로팅-게이트 트랜지스터에 연결된다. WL0_0은 또한 2D(검색) 엔진_0 및 2D(검색) 엔진_128K-2 사이의 상기 2D(검색) 엔진들의 각각의 상기 128K-3의 첫 번째 메모리 스트링들(예시되지 않음) 내의 플로팅-게이트 트랜지스터에 연결된다. 다른 예를 위해, WL0_511은 상기 2D(검색) 엔진_0의 512번째 메모리 스트링의 플로팅-게이트 트랜지 스터, 상기 2D(검색) 엔진_128K-2의 512번째 메모리 스트링의 플로팅-게이트 트랜지스터, 그리고 상기 2D (검색) 엔진_128K-1의 512번째 메모리 스트링의 플로팅-게이트 트랜지스터에 연결된다. WL0_511은 또 한 2D(검색) 엔진_0 및 2D(검색) 엔진_128K-2 사이의 상기 2D(검색) 엔진들의 각각의 상기 128K-3 512번째 메모리 스트링들(예시되지 않음) 내의 플로팅-게이트 트랜지스터에 연결된다. 이러한 설명에서, 워드 라인들은 때때로 블록 숫자 및 층 숫자에 의한 2D 구성 내에 있는 것으로 지칭된다. 개 념적으로, 블록은 상기 Y 및 Z 치수들로 존재하고, 층은 상기 X 및 Y 치수들로 존재한다. 개념적으로, 상기 블 록 숫자는 상기 칼럼 숫자에 대응되고, 상기 층 숫자는 상기 로우 숫자에 대응된다. 블록은 각각의 상기 2D(검색) 엔진들로부터의 메모리 스트링들에 대응된다. 특정한 예로서, GSL511과 SSL511 사이에 연결되는 상기 메모리 스트링들은 블록 숫자 511에 대응된다. 다른 특정한 예로서, GSL0과 SSL0 사이에 연결되는 상기 메모리 스트링들은 블록 숫자 0에 대응된다. 층은 모든 상기 2D(검색) 엔진들의 각각의 상기 메모리 스트링들로부터의 플로팅-게이트 트랜지스터들에 대응된 다. 특정한 예로서, WL0_511과 WL0_0에 연결되는 플로팅-게이트 트랜지스터들은 층 숫자 0의 일부이 다. 다른 특정한 예로서, WL1_511에 연결되는 플로팅-게이트 트랜지스터들은 층 숫자 1의 일부이다. 유사 하게, WL2_511, WL126_0 및 WL127_0에 각기 연결되는 플로팅-게이트 트랜지스터들은 각기 층 숫자들 2, 3, 126 및 127의 일부이다. 층들도 비록 플로팅-게이트 트랜지스터들의 층이 하나 또는 그 이상의 평 면 집적 회로 프로세스 층들에 대응되지만, 평면 집적회로 프로세스에 관하여 층들에 대응된다. 이에 따라, 워드 라인들은 각기 “WL”, “<층 숫자>” 및 “<블록 숫자>”로서 상기 Z 및 X 치수들로 인식될 수 있다. 따라서, WL0_0은 층 숫자 0 및 블록 숫자 0이 된다. WL0_511은 층 숫자 0 및 블록 숫자 511이 된다. 도 1d는 도 1a 및 도 1b의 일부들의 구성으로 2D(검색) 엔진_0을 예시한다. 다수의 워드 라인들이 예시되 며, WL6_511 부근의 아이콘에 의해 예시되는 바와 같이 앞서 언급한 “WL”, “<층 숫자>” 및 “<블록 숫자>” 계획으로 확인된다. 2D(검색) 엔진_0은 512의 메모리 스트링들을 포함한다. 명확성을 위해, 상기 메모리 스트링들 중에서 네 개(MemStr0, MemStr1, MemStr510 및 MemStr511)가 예시된다. 각각의 상기 메모리 스트링들의 플로팅-게이트 트랜지스터들이 배열되며, 쌍들로 동작한다. 상기 쌍들 중에서 하나의 예는 IMS 데이터 비트이다. 다른 예는 IMS 데이터 비트이다. 개념적으로, 각각의 짝수의 숫자의 워드 라인들은 상기 쌍들 중의 플로팅-게이트 트랜지스터들의 하나에 연결된다. 예를 들어, 층 0의 WL0_0, WL0_1,…, WL0_510 및 WL0_511은 각기 상기 쌍들 중의 각각의 것에 연결되며, 층 2의 WL2_0,…, WL2_511 등등으로부터 층 126의 WL126_0,…, WL126_511까지 그렇게 된다. 또한, 각각의 홀수의 숫자의 워드 라인들은 상기 쌍들의 플로팅 -게이트 트랜지스터들 중의 다른 것들에 연결된다. 예를 들어, 층 1의 WL1_0, WL1_1,…, WL1_510 및 WL1_511은 각기 상기 쌍들 중의 다른 플로팅-게이트 트랜지스터들에 연결되며, 층 0의 WL0_0, WL0_1,…, WL0_510 및 WL0_511도 각기 그렇게 된다. 도 1d도 2D(검색) 엔진의 특정한 사용 예를 예시한다. 각 메모리 스트링은 특징을 저장하기 위해 사용될 수 있다. 따라서, 상기 2D(검색) 엔진_0의 512의 메모리 스트링들이 집합적으로 512까지의 특징들을 저장하기 위해 사용될 수 있다. 명확성을 위해, 상기 특징들 중의 하나가 특징 0으로 예시된다. 각각의 상기 플로팅-게이트 트랜지스터들의 쌍들은 상기 특징들 중의 하나 의 단일 비트를 저장하기 위해 사용될 수 있다. 각각의 상기 메모리 스트링들 내에 64의 쌍들의 플로팅-게이트 트랜지스터들이 존재한다. 따라서, 각각의 상기 메모리 스트링들은 64의 비트들까지의 특징을 저장하기 위해 사 용될 수 있다. 각 메모리 스트링은 내부에 저장된 특징을 상기 메모리 스트링에 연결되는 상기 워드 라인들을 통해 공급되는 검색 입력과 비교하도록 사용될 수 있다. 상기 메모리 스트링의 각 플로팅-게이트 트랜지스터는 상기 플로팅-게 이트 트랜지스터에 의해 저장되는 특징 비트에 따른 워드 라인 전압(예를 들어, 프로그래밍으로 구성되는 상기 플로팅-게이트 트랜지스터의 임계 전압)에 반응한다. 예를 들면, 쌍들로의 동작 시에, 한 쌍의 플로팅-게이트 트랜지스터들은 매치-발견(match-found) 임피던스(예를 들어, 상대적으로 낮은 임피던스)를 통해 워드 라인들의 쌍을 거쳐 상기 한 쌍의 플로팅-게이트 트랜지스터들에 제공되는 검색 입력에 대한 매치를 표시한다. 상기 쌍은매치-미발견(no-match-found) 임피던스(예를 들어, 상대적으로 높은 임피던스)를 통해 매치의 결손을 표시한다. 따라서, 모두의 메모리 스트링에 걸쳐, 워드 라인들의 대응되는 쌍들을 통해 제공되는 바와 같은 다중 비트의 검색 입력과 매치되는 특성 비트들을 저장한 모든 쌍들의 플로팅-게이트 트랜지스터들에 상응하여, 모두의 상기 메모리 스트링이 대응되는 메모리 스트링 매치-발견 임피던스를 표시한다. 모두보다는 적은 쌍들의 매칭에 상응 하여, 모든 상기 메모리 스트링들은 상기 메모리 스트링 매치-발견 임피던스보다 큰 대응되는 메모리 스트링 임 피던스를 표시한다. 쌍들의 매칭이 없는 것에 상응하여, 모든 상기 메모리 스트링이 대응되는 메모리 스트링 매 치-미발견 임피던스를 표시한다. 모든 비트들이 매치되는 것과 비트들의 매치가 없는 극한들 사이에서, 상기 메 모리 스트링은 인가되는 워드 라인 입력들과 비트 당 비트로 비교되는 대응되는 보다 많은(보다 적은) 저장된 특징 비트들로서 단조적으로 감소(증가)되는 대응되는 메모리 스트링 임피던스를 표시한다. 스트링 전류(136D) 는 상기 표시되는 메모리 스트링 임피던스에 기초하는 바와 같이 상기 메모리 스트링 내의 전류 흐름을 표시한 다. 예를 들면, MemStr0은 SSL0의 활성화를 통해 BL_0에 연결되고, GSL0를 통해 CSL에 연결된다. MemStr0 내에 저장된 특징 0은 상기 IMS 데이터 비트의 플로팅-게이트 트랜지스터 쌍 내의 단 일의 일 비트를 제외하면 모두 영의 비트들로 프로그램된다. 예로써, 모두 영의 비트들에 대한 검색을 쌍들로 표시하는 MemStr0(WL0_0, WL1_0,…, WL126_0 및 WL127_0)에 연결된 모든 워드 라인 쌍들로서 제1 동작 시나리오가 고려된다. 이에 대응하여, IMS 데이터 비트 의 쌍을 제외하고 MemStr0의 모든 플로팅-게이트 트랜지스터 쌍들은 상기 매치-미발견 임피던스를 표 시한다. 상기 IMS 데이터 비트의 쌍은 상기 매치-미발견 임피던스를 표시한다(상기 워드 라인 검색 입력과 상기 저장된 특징 비트들 사이에 매치가 존재하지 않기 때문에). 따라서, MemStr0은 전체적으로 상기 메모 리 스트링 매치-발견 임피던스보다 큰 임피던스를 표시한다. SA는 상기 임피던스가 상기 메모리 스트링 매 치-발견 임피던스보다 큰 것을 감지하며, 감지 출력을 통해 상기 워드 라인 쌍들과 특징 0 사이에 매치가 존재하지 않는 것을 표시한다. 예로써, 일 비트에 대한 검색을 나타내는 IMS 데이터 비트(WL2_0 및 WL3_0)에 연결되는 상기 워드 라인 쌍 및 영의 비트들에 대한 검색을 쌍들로 표시하는 MemStr0(WL0_0, WL1_0, WL4_0, WL5_0,…, WL126_0 및 WL127_0)에 연결되는 상기 워드 라인 쌍들의 나머지로써 제2 동작 시나리오가 고려된다. 이에 대응하여, 상기 IMS 데이터 비트의 쌍을 포함하여 MemStr0의 모든 플로팅-게이트 트랜지스터 쌍들은 상기 매치-발견 임피던스를 표시한다. 따라서, MemStr0은 전체적으로 상기 메모리 스트링 매치-발견 임피던스와 동일한 임 피던스를 표시한다. SA는 상기 임피던스가 상기 메모리 스트링 매치-발견 임피던스인 것을 감지하며, 감지 출력을 통해 상기 워드 라인 쌍들과 특징 0 사이에 매치가 존재하는 것을 표시한다. SA는 상기 감지를 수행하고, 예를 들어, 감지 시간 간격 이내에서 BL_0 상의 소정의 감지 임계보다 큰(또는 보다 작은) 전압 변화를 검출함에 의해 감지 출력을 생성한다. 일부 변형들에서, 상기 전압 변화 는 상기 표시되는 메모리 스트링 임피던스에 따른 BL_0 상의 프리차지 값을 방출하는 MemStr0에 기인 한다. 상기 임피던스가 상기 메모리 스트링 매치-발견 임피던스보다 큰 상기 제1 동작 시나리오에 상응하여, 상 기 임피던스가 상기 메모리 스트링 매치-발견 임피던스와 동일한 상기 제2 동작 시나리오와 비교하여 BL_0(14 0)은 보다 느리게 MemStr0에 의해 방출된다. 감지 임계 값 및/또는 감지 시간 간격은 감지 속도(예를 들어, 엔진 대역폭 및/또는 대기 시간) 및 잡음 여유도(noise immunity)(예를 들어, 엔진 탄성)를 기초로 하여 상기 매치-발견과 이외의 상기 매치-발견 임피던스 사이의 구별이 가능하도록 설정된다. 상기 제1 또는 상기 제2 동작 사나리오들에 대해 도 1a, 도 1b 및 도 1c의 사항들을 계속 참조하면, 감지 입력 은 다른 2D 엔진들의 대응되는 감지 증폭기 정보와 함께 페이지 버퍼, 캐시, 우선순위 인코더로 제 공된다. 페이지 버퍼, 캐시, 우선순위 인코더 버퍼들, 캐시들 및/또는 우선순위는 상기 2D 엔진 감지 출 력들 전체의 구성들 내의 감지 출력을 인코딩한다. 일부 응용들에서, 컨트롤러는 다중의 블록들을 동시에 검색하는 것이 가능하도록 2D(검색) 엔진들의 다중의 블 록들을 활성화시킨다. 예를 들면, 복수의 SSL 입력들이 상기 동일한 검색 동작 동안에 다중의 블록들을 검색하 기 위해 동일한 검색 동작으로 활성화된다. 예를 들면, 상기 컨트롤러는 각각의 상기 128K 2D(검색) 엔진들, 2D(검색) 엔진_0,…, 2D(검색) 엔진 _128K-2, 그리고 2D(검색) 엔진_128K-1 내의 둘의 블록들을 동시에 검색하는 것이 가능하도록 동일한 검색 동작으로 SSL_511 및 SSL_510을 활성화시킨다. 따라서, 상기 컨트롤러는 3D 엔진이 2*128K 블록들을 동시에 검색하게 할 수 있다. 선택적으로, 상기 컨트롤러는 임의의 둘의 블록들을 동시에 검색하는 것이 가능하도록 동일한 검색 동작으로 임의의 둘의 SLL 입력들을 활성화시킨다. 다른 예들을 위해, 상기 컨트롤러는 대응 되는 다중의 블록들을 동시에 검색하는 것이 가능하도록 동일한 검색 동작으로 임의의 넷, 여섯, 8, 32, 64, 128, 256, 또는 512의 SSL 입력들을 활성화시킨다. 예를 들면, 상기 컨트롤러는 동일한 검색 동작으로 모두 512 의 SSL 입력들을 활성화시킨다. 따라서, 상기 컨트롤러는 3D 엔진이 512 * 128K 메모리 스트링들을 포함 하는 512의 블록들을 동시에 검색하게 할 수 있다. 선택적으로는, 상기 컨트롤러는 어떤 크기의 다중의 블록들 이 동시에 검색되는 경우 및 이에 특정되는 컨트롤 레지스터(control register)에 반응한다. 도 1a, 도 1b 및 도 1c는 특정한 숫자의 2D(검색) 엔진들을 가지는 것으로 예시적인 3D(검색) 엔진을 도시하며, 이들 각각은 특정한 숫자의 메모리 스트링들을 가지고, 이들 각각은 특정한 숫자의 IMS 데이터 비트들(각기 플 로팅-게이트 트랜지스터들의 각각의 쌍으로서)을 가진다. 상세하게는, 3D 엔진은 128K 2D(검색) 엔진들 (2D(검색) 엔진_0,…, 2D(검색) 엔진_128K-1)을 가지지만, 일부 변형들은 보다 적거나 많은 2D(검색) 엔진들을 가진다. 각 2D(검색) 엔진은 512의 메모리 스트링들(예를 들어, MemStr0,…, MemStr511)을 가지지만, 일부 변형들은 보다 적거나 보다 많은 메모리 스트링들을 가진다. 각 메모리 스트 링은 64의 IMS 데이터 비트들(예를 들어, 워드 라인 쌍들인 WL0_1 및 WL1_0,…, WL126_0 및 WL127_0에 연결되 는)을 가지지만, 일부 변형들은 메모리 스트링 당 보다 적거나 많은 IMS 데이터 비트들을 가진다. 2D(검색) 엔진 및 연관된 감지 증폭기의 일부 변형들은 단일의 비트의 감지 증폭기 분별(예를 들어, 매치/매치 없음)을 가능하게 할 수 있다. 일부 변형들은 복수의 비트들의 감지 증폭기 분별(예를 들어, 매치들이 없음, 하 나의 매치, 혹은 둘 또는 그 이상의 매치들을 인코딩하도록)을 가능하게 할 수 있다. 일부 변형들은 디지털보다 는 아날로그인 감지 증폭기 표시들을 가능하게 할 수 있다. 예를 들면, 감지 증폭기 출력은 메모리 스트링 전류 에 기초하여 단조적으로 증가하는 함수이며, 상기 메모리 스트링 전류는 검색 입력들과 저장된 특징들 사이의 유사성의 단조적으로 증가하는(또는 감소하는) 표시자이다. 3D(검색) 엔진들의 일부 변형들은 검색을 위한 매칭으로서 최대한 하나의 특징(단일의 메모리 스트링 내에 저장 됨)을 확인하는 것이 가능할 수 있다. 일부 변형들은 검색을 위한 매칭으로서 최대한으로 복수의 특징들(복수의 메모리 스트링들 내에 저장됨)을 동시에 확인하는 것이 가능할 수 있다. 일부 변형들은 검색을 위한 매칭으로서 내부에 저장되는 하나 또는 그 이상의 특징들을 가지는 최대한으로 하나의 2D(검색) 엔진을 동시에 확인하는 것 이 가능할 수 있다. 일부 변형들은 검색을 위한 매칭으로서 내부에 저장되는 하나 또는 그 이상의 특징들을 가 지는 복수의 2D(검색) 엔진들을 동시에 확인하는 것이 가능할 수 있다. 3D(검색) 엔진들의 일부 변형들은 소정의 2D(검색) 엔진 우선순위(예를 들어, 소정의 2D(검색) 엔진이 가장 낮 은 우선순위이고, 또 다른 소정의 2D(검색) 엔진이 가장 높은 우선순위임)에 따라 매치 표시들을 우선순위 인코 딩하는 것이 가능할 수 있다. 따라서, 상기 소정의 가장 높은 우선순위 2D(검색) 엔진으로부터의 매치 표시는 가장 높은 우선순위 매치에 대응된다. 또한, 소정의 제2의 가장 높은 우선순위 2D(검색) 엔진으로부터의 매치 표시는 제2의 가장 높은 우선순위 매치에 대응된다. 일부 변형들은 얼마나 많은 메모리 스트링 내의 저장된 특 징 비트들이 각각의 검색 입력 비트들과 매치되는 지(예를 들어, 영의 매치, 하나의 매치, 둘의 매치, 또는 셋 또는 그 이상의 매치)에 따라 우선순위 인코딩을 가능하게 할 수 있다. 따라서, 가장 높은 우선순위 매치는 각 각의 검색 입력 비트들과 매치되는 메모리 스트링 내의 가장 많은 숫자의 저장된 특징 비트들에 대응되며, 제2 의 가장 높은 우선순위 매치는 각각의 검색 입력 비트들과 매치되는 메모리 스트링 내의 제2의 가장 많은 숫자 의 저장된 특징 비트들에 대응된다. 일부 변형들은 얼마나 많은 특정한 2D(검색) 엔진 내의 메모리 스트링들이 매치되는 지(예를 들어, 영의 매치, 하나의 매치, 둘의 매치, 또는 셋 또는 그 이상의 매치)에 따라 우선순위 인코딩을 가능하게 할 수 있다. 따라서, 가장 높은 우선순위 매치는 특정한 2D(검색) 엔진 내의 가장 많은 숫자 의 메모리 스트링들의 매칭에 대응되며, 제2의 가장 높은 우선순위 매치는 특정한 2D(검색) 엔진 내의 제2의 가 장 많은 숫자의 메모리 스트링들의 매칭에 대응된다. 일부 변형들은 단일 매칭의 저장된 특징을 확인하는 우선순위 인코딩을 가능하게 할 수 있다. 일부 변형들은 복 수의 매칭의 저장된 특징들을 확인하는 우선순위 인코딩을 가능하게 할 수 있다. 일부 변형들은, 예를 들어, 검 색과 매치되는 가장 많은 숫자의 저장된 특징 비트들을 가지는 단일의 \"가장 우수한 매칭\"의 저장된 특징들을 확인하고, 상기 가장 많은 숫자가 최대의 저장된 특징 길이보다 작은 우선순위 인코딩을 가능하게 할 수 있다. 일부 변형들은, 예를 들어, 각각의 복수의 저장된 특징들에 대한 검색과 매치되는 저장된 특징 비트들의 숫자에 따라 순위개 매겨지는 복수의 \"가장 우수한 매칭\"의 저장된 특징들을 확인하는 우선순위 인코딩을 가능하게 할 수 있다. 다양한 사용 시나리오들에서(예를 들어, 상기 2D(검색) 엔진들 내로 프로그램되는 특징들, 제공되는 검색 정보 및/또는 이들의 인코딩들로 인하여), 3D(검색) 엔진의 다양한 숫자의 2D(검색) 엔진들이 상기 2D(검색) 엔진들 및 상기 3D(검색) 엔진의 2D(검색) 엔진들에 제공되는 상기 검색 정보의 상기 메모리 스트링들 중의 하나 또는 그 이상에 저장되는 하나 또는 그 이상의 특징들 사이의 매치를 검출한다. 일부 사용 시나리오들에서, 2D(검색) 엔진의 영, 일, 또는 그 이상의 메모리 스트링들이 매치들을 검출하며, 감 지 증폭기 회로부는 복수의 비트들로서 매칭 결과들을 인코딩한다. 예를 들면, 상기 감지 증폭기 회로부는 영의 메모리 스트링들의 매칭, 하나의 메모리 스트링의 매칭, 둘의 메모리 스트링들의 매칭, 그리고 넷의 상호 배타 적인 인코딩들로서 둘보다 많은 메모리 스트링들의 매칭을 인코딩한다. 일부 변형들은 2D(검색) 엔진 우선순위, 매칭 저장 특징 비트들의 숫자, 메모리 스트링들(예를 들어, 특징들)의 숫자와 같은 하나 또는 그 이상의 인자 들에 따른 우선순위 인코딩을 가능하게 할 수 있다. 예를 들면, 2D(검색) 엔진_0,…, 2D(검색) 엔진_128K-1 중의 임의의 것으로부터 매치가 없는 것에 상 응하여, SA들은 페이지 버퍼, 캐시, 우선순위 인코더에 대해 모두 영의 벡터(vector)를 제공한다. 이에 대응하여, 페이지 버퍼, 캐시, 우선순위 인코더는 상기 모든 영의 벡터들을 영의 매치들을 표시하는 바이너리 값으로 인코딩하며, 출력 매칭 결과(들)을 통해 상기 바이너리 값을 제공한다. 상기 예를 계속 참조하면, 매치를 검출하는 2D(검색) 엔진_0의 단일의 메모리 스트링에 상응하여, SA들 은 일로서 및 영으로서 모든 다른 비트들 2D(검색) 엔진_0에 대응되는 LSB를 가지는 벡터를 제공한 다. 이에 대응하여, 페이지 버퍼, 캐시, 우선순위 인코더는 상기 벡터를 상기 매칭 메모리 스트링을 가지 는 것으로 2D(검색) 엔진_0을 확인하는 영이 아닌 바이너리 값으로 인코딩한다. 상기 예를 계속 참조하면, 매치들을 검출하는 2D(검색) 엔진_0의 복수의 메모리 스트링들뿐만 아니라 매치 를 검출하는 2D(검색) 엔진_128K-2의 단일의 메모리 스트링에 상응하여, SA들은 2D(검색) 엔진 _128K-2에 대응되는 일의 또 다른 비트로서 및 일과 영의 모든 다른 비트들로서 2D(검색) 엔진_0 대 응되는 비트를 가지는 벡터를 제공한다. 이에 대응하여, 페이지 버퍼, 캐시, 우선순위 인코더는 상기 벡 터를 가장 높은 우선순위 매칭 메모리 스트링을 가지는 것으로 2D(검색) 엔진_128K-2를 확인하는 영이 아 닌 바이너리 값으로 인코딩한다. 3D(검색) 엔진 인코딩 3D(검색) 엔진에 의해 수행되는 바와 같은 검색, 비교 및/또는 분류는 선택된 특징 인코딩(상기 3D(검색) 엔진 의 메모리 스트링들의 특징 저장을 위한) 및 선택된 검색 인코딩(상기 메모리 스트링들에 의해 수행되는 검색을 위한)을 따른다. 상기 특징 및 검색 인코딩들은 상기 메모리 스트링들에 의해 수행되는 매칭이 상기 특징 저장 을 위해 선택되는 인코딩의 구성 내에 있기 때문에 서로 함께 선택된다. 특징들을 저장하거나 및/또는 검색들을 수행하기 위해 3D(검색) 엔진들 내에 이용될 수 있는 예시적인 인코딩들 은 확장 인코딩, 원-핫 인코딩, 로우 이펙트 인코딩(개념적으로, 감소된 패턴 및 바디 효과들을 가능하게 할 수 있는 확장 인코딩의 변형), 그리고 역 확장 인코딩을 포함한다. 간단한 도입으로서, 도 1e 및 도 1f는 각기 도 1d에서와 유사한 양식으로 2D(검색) 엔진_0의 구성 내의 확 장 인코딩 및 원-핫 인코딩 사용 예들을 도시한다. 상응하여, 도 2 및 도 3은 각기 확장 인코딩 및 원-핫 인코 딩 예들을 도시한다. 3D(검색) 엔진 확장 인코딩 먼저 확장 인코딩을 참조하면, N-비트 바이너리 값(특징이나 검색)이 2^N 비트 필드 내에 인코딩된다. 상기 인 코딩은 비트들의 둘의 인접하는 필드들을 생성한다. 각각의 상기 인접하는 필드들은 일이나 영의 반복이다. 따 라서, 2^N-1은 단일의 전치 영(leading zero) 및 나머지의 모든 일들로서 인코딩된다. 일들의 숫자는 상기 인코 딩되는 값과 동일하다. 특별한 경우로서, 영이 모두 영들로서 인코딩된다. 따라서, 최상위의 비트는 항상 영이 다. 이에 따라, 일부 변형들에서, 상기 최상위의 비트는 구현되지 않는다. 도 2는 3D(검색) 엔진을 위한 예시적인 확장 인코딩을 예시한다. 표에는 둘의 칼럼들이 존재한다. 상기 제1 칼 럼, 값 251은 확장 인코딩에 따라 인코딩되는 6-비트 바이너리 값이다. 상기 제2 칼럼인, 확장 인코딩 252는 상 기 제1 칼럼으로부터의 대응되는 바이너리 값의 64-비트 바이너리 확장 인코딩이다. 가독성을 위해, 상기 64-비 트 값들은 넷의 비트들마다 밑줄 친(\"_\") 문자로 분리된다. 간결성을 위해, 상기 표에서 일부 값들이 생략된다. 도 1e는 D(검색) 엔진의 2D(검색) 엔진, 구체적으로는 도 1d의 2D(검색) 엔진_0의 확장 인코딩 사용 예를 도시한다. 동일한 요소 식별자들을 가지는 도 1e 및 도 1d의 요소들은 동일한 요소들이다."}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 4, "content": "도 2의 확장 인코딩에 따라 인코딩되는 넷의 예시적인 특징들은 도 1e의 왼쪽 부분의 표에 요약되어 있다. 특히, MemStr0이 1의 확장 인코딩(단일의 일 비트 및 63의 영 비트들)으로 특징 0(1000E)을 저장하도록 프 로그램된다. 각 특징 비트는 메모리 장치들의 일련의 쌍들 내에 저장된다. 상기 특징 확장 인코딩은 도 1a의 특 징 인코더에 프로그램된다. MemStr1은 4의 확장 인코딩(넷의 일 비트들 및 60의 영 비트들)으로 특 징 1(1001E)을 저장하도록 프로그램된다. 특징 2-특징 509는 여기에 구체적으로 논의되지는 않는 다양한 값들의 확장 인코딩들을 저장하기 위해 프로그램된다. MemStr510은 5의 확장 인코딩(다섯의 일 비트들, 예시된 것 중의 넷 및 59의 영 비트들)으로 특징 510(1510E)을 저장하도록 프로그램된다. MemStr511은 63의 확장 인 코딩(63의 일 비트들 및 단일의 영 비트)로 특징 511(1511E)을 저장하기 위해 프로그램된다. 예시한 사용 시나리오에서, 검색들 또한 도 2의 확장 인코딩에 따라 인코딩된다. 상기 검색 확장 인코딩은 도 1a의 검색 인코더에 의해 수행된다. 값 1에 대한 검색은 단일의 일 비트 및 63의 영 비트들에 대한 검색 으로서 워드 라인들의 쌍들에 대해 인코딩된다. 상기 검색이 블록 0 내에 있는 것으로 가정하면, 상기 검색을 위해 이용되는 워드 라인들의 쌍들은 WL0_0, WL1_0,…, WL126_0 및 WL127_0이다. 상기 블록 영의 워드 라인들 상에 제시되는 상기 63의 확장 인코딩에 상응하여, MemStr0은 스트링 전류(136E)로 나타내는 바와 같이 전 류를 흐르게 할 수 있다. 상기 전류 흐름은 SA에 의해 감지되고, 다른 처리를 위해 감지 출력 상에 제시되는 매치를 표시한다. 대응되는 검색 입력들 중의 임의의 것과 매치되는 상기 저장된 특징들이 없는 것에 상응하여, 상기 전류 흐름은 SA에 의해 감지되고, 다른 처리를 위해 감지 출력 상에 제시되는 매치 없음을 표시한다. 확장 인코딩은 검색들과 저장된 특징들 사이의 근접 매칭을 가능하게 한다. 가장 우수한 매치(예를 들어, 높은 유사성)는 가장 높은 메모리 스트링 전류(예를 들어, 가장 낮은 임피던스)를 가진다. 가장 나쁜 매치(예를 들어, 낮은 유사성)는 가장 낮은 메모리 스트링 전류(예를 들어, 가장 높은 임피던스)를 가진다. 매치되는(또는 미스-매치되는) 비트들의 숫자는 메모리 스트링 전류 및/또는 임피던스의 측정에 의해 결정될 수 있다. 예시적인 검색 확장 인코딩 해상도들은 32의 3D-NAND 층들을 이용하여 구현되는 4의 비트들, 64의 3D-NAND 층들 을 이용하여 구현되는 5의 비트들, 128의 3D-NAND 층들을 이용하여 구현되는 6의 비트들, 256의 3D-NAND 층들을 이용하여 구현되는 7의 비트들, 그리고 512의 3D-NAND 층들을 이용하여 구현되는 8의 비트들을 포함한다. 따라 서, 해상도는 3D-NAND 층들의 숫자가 두 배가 되면서 일 비트로 증가된다. 3D(검색) 엔진 원-핫 인코딩 다음으로 원-핫 인코딩을 참조하면, N-비트 바이너리 값(특징 또는 검색)이 2^N 필드 내에 인코딩된다. 상기 인 코딩은 영인 모든 다른 비트들과 함께 단일의 일 비트로 진행된다. 상기 단일의 일 비트는 인코딩되는 값에 대 응되는 비트 위치 내에 있다. 도 3은 표로서 3D(검색) 엔진을 위한 예시적인 원-핫 인코딩을 예시한다. 상기 표에는 둘의 칼럼들이 존재한다. 상기 제1 칼럼인 값 351은 원-핫 인코딩에 따라 인코딩되는 6-비트 바이너리 값이다. 상기 제2 칼럼인 원-핫 인 코딩 352는 상기 제1 칼럼으로부터의 대응되는 바이너리 값의 64-비트 바이너리 원-핫 인코딩이다. 가독성을 위 해, 상기 64-비트 값들은 밑줄 친(\"_\") 문자에 의해 넷의 비트들마다 분리된다. 간결성을 위해, 상기 표에서 일 부 값들이 생략된다. 도 1f는 3D(검색) 엔진의 2D(검색) 엔진, 구체적으로 도 1d의 2D(검색) 엔진_0의 원-핫 인코딩 사용 예를 도시한다. 동일한 요소 식별자들을 가지는 도 1f 및 도 1d의 요소들은 동일한 요소들이다."}
{"patent_id": "10-2023-0103692", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 5, "content": "도 3의 원-핫 인코딩에 따라 인코딩되는 넷의 예시적인 특징들이 도 1f의 왼쪽 부분의 표에 요약되어 있다. 특 히, MemStr0은 1의 원-핫 인코딩(비트 위치 1 내의 단일의 일 비트 및 그 밖의 63의 영 비트들)으로 특징 0(1000F)을 저장하도록 프로그램된다. 각 특징 비트는 일련의 메모리 장치들 내에 저장된다. 상기 특징 원-핫 인코딩은 도 1a의 특징 인코더에 의해 수행된다. MemStr1은 3의 원-핫 인코딩(비트 위치 3 내의 단 일의 일 비트 및 그 밖의 63의 영 비트들)으로 특징 1(1001F)을 저장하기 위해 프로그램된다. 특징 2-특징 509 는 구체적으로 논의되지는 않는 다양한 값들의 원-핫 인코딩들을 저장하기 위해 프로그램된다. MemStr510 은 4의 원-핫 인코딩(비트 위치 3 내의 단일의 일 비트 및 그 밖의 63의 영 비트들)으로 특징 510(1510F)을 저 장하도록 프로그램된다. MemStr511은 63의 원-핫 인코딩(비트 위치 63 내의 단일의 일 비트, 최상위 비트 및 그 밖의 63의 영 비트들)으로 특징 511(1511F)을 저장하도록 프로그램된다.예시한 사용 시나리오에서, 검색들 또한 도 3의 원-핫 인코딩에 따라 인코딩된다. 상기 검색 원-핫 인코딩은 도 1a의 검색 인코더에 의해 수행된다. 값 1에 대한 검색은 비트 위치 1 내의 단일의 일 비트 및 63의 영 비 트들에 대한 검색으로서 워드 라인들의 쌍들에 대해 인코딩된다. 상기 검색이 블록 0 내에 있는 것으로 가정하 면, 상기 검색을 위해 이용되는 워드 라인들의 쌍들은 WL0_0, WL1_0,…, WL126_0 및 WL127_0이다. 상기 블록 영 의 워드 라인들 상에 제시되는 상기 1의 원-핫 인코딩에 상응하여, MemStr0은 스트링 전류(136F)로 나타내 는 바와 같이 전류를 흐르게 할 수 있다. 상기 전류 흐름은 SA에 의해 감지되고, 다른 처리를 위해 감지 출력 상에 제시되는 매치를 표시한다. 대응되는 검색 입력들 중의 임의의 것과 매치되는 상기 저장된 특징들이 없는 것에 상응하여, 상기 전류 흐름은 SA에 의해 감지되고, 다른 처리를 위해 감지 출력 상에 제시되는 매치 없음을 표시한다. 3D(검색) 엔진 로우 이펙트 인코딩 다음으로 로우 이펙트 인코딩을 참조하면, 상기 인코딩은 메모리 스트링들 내의 상기 플로팅-게이트 트랜지스터 들의 감소된 패턴 효과들 및 감소된 바디 효과들을 가능하게 할 수 있는 확장 인코딩에 대한 변형이다. 개념적 으로, 동일한 문턱 전압에서 프로그램된 플로팅-게이트 트랜지스터들이 메모리 스트링 내에서 서로 인접하는 경 향을 가지도록 플로팅-게이트 트랜지스터들 및 대응되는 워드 라인들이 재배열된다. 이는 실제로 트랜지스터들 을 주위로 이동시키지 않고 상기 확장 인코딩만을 변경시켜 이루어진다. 도 4a는 예시적인 확장 인코딩 및 대응되는 예시적인 로우 이펙트 인코딩을 도시한다. 간결성을 위해, 상기 예 들은 16개의 플로팅-게이트 트랜지스터들의 메모리 스트링들 및 대응되는 16의 워드 라인들에 대한 것들이다. 표로 나타내는 배열되는 방식으로 배열되는 셋의 칼럼들이 존재한다. 상기 제1 칼럼인 값 461은 인코딩되는 바 이너리 값이다. 상기 제2 칼럼인 확장 인코딩462는 상기 제1 칼럼으로부터의 값의 8-비트 확장 인코딩이다. 상 기 제3 칼럼인 로우 이펙트 인코딩 463은 상기 제1 칼럼으로부터의 값의 8-비트 로우 이펙트 인코딩이다. 상기 표는 로우들의 셋의 섹션들을 가진다. 검색 입력들은 3의 동일한 값의 각각의 인코딩들을 나타내는 단일의 로우이다. 제2 섹션인 저장된 특징은 각기 상기 확장 인코딩 또는 상기 로우 이펙트 인코딩 중의 하나에 따른 각각의 저장된 특징 값을 나타내는 아홉의 로우들을 가진다. 제3 섹션인 메모리 스트링들은 각기 비트 라인 \"BL\"로부터 시작되어 스트링 선택 라인 \"SSL\"을 통하고, 복수의 워드 라인들 \"WL,…, WL\"을 통 하며, 접지 선택 라인 \"GSL\"을 통하고, 전류 소스 라인 \"CSL\"에서 종료되는 왼쪽부터 오른쪽까지 진행되는 메모 리 스트링들을 나타낸다. 확장 인코딩 내의 \"HL\"은 엔트리들은 일의 데이터 비트에 대응되고, \"LH\" 엔트리들은 영의 데이터 비트에 대응된다. 각 \"H\" 또는 \"L\"의 문자는 플로팅-게이트 트랜지스터의 임계 전압에 대응된다. 저장된 특징들 내의 \"H\" 엔트리들은 \"높은\" 임계 전압에 대응되며, \"L\" 엔트리들은 \"낮은\" 임계 전압에 대응된다. 검색 입력들 내의 H2 및 H1 엔트리들은 둘의 각각의 워드 라인 전압들에 대응된다. 특정한 검색 입력이 3으로 예시된 다. 확장 인코딩 및 로우 이펙트 인코딩 내의 밑줄은 상기 플로팅-게이트 트랜지스터들의 개념적인 재배열 및 대응되는 워드 라인들을 표시하도록 기능한다. 도 4b는 1의 입력과 비교되는 해밍 거리(Hamming distance)들을 가지는 예시적인 확장 인코딩을 도시한다. 상기 1의 입력은 1의 검색 입력에 대응되며, 입력으로서 확장 인코딩에 따라 인코딩되는 것으로 예시된다. 상기 예시적인 인코딩은 도 2의 경우이다. 표에는 셋의 칼럼들이 존재한다. 상기 제1 칼럼인 값은 확장 인코딩 에 따라 인코딩되는 6-비트 바이너리 값이다. 상기 제2 칼럼인 확장 인코딩은 상기 제1 칼럼으로부터의 대 응되는 바이너리 값의 64-비트 바이너리 확장 인코딩이다. 상기 제3 칼럼인 HD는 상기 각각의 확장 인코딩 과 상기 1의 입력의 확장 인코딩(입력) 사이의 해밍 거리이다. 상기 해밍 거리는 상기 입력이 상기 저장된 값과 매치될 때에 최소이다. 상기 해밍 거리는 상기 입력이 상기 저장된 값과 미스-매치될 때에 최대이 다. 가독성을 위해, 상기 64-비트 값들은 밑줄 친(\"_\") 문자에 의해 넷의 비트들마다 분리된다. 간결성을 위해, 상기 표에서 일부 값들이 생략된다. 도 4c는 일들, 영들 및 무정의(don't care)들의 비교를 가능하게 하는 예시적인 임계 전압들 및 워드 라인 전압 들을 도시한다. 도면의 왼쪽 부분은 메모리 상태 \"1\"로서 메모리 상태 \"1\" 셀들을 나타낸다. 도면의 오른 쪽 부분은 메모리 상태 \"0\"으로서 메모리 상태 \"0\" 셀들을 나타낸다. 상기 도면은 플로팅-게이트 트랜지스 터들 내에 특징들을 저장하는 것과 상기 플로팅-게이트 트랜지스터들의 컨트롤 게이트들을 제어하기 위해 워드 라인들에 대해 검색 정보를 구동시키는 것에 대한 임계 전압들과 워드 라인 전압들 사이의 두 세트들의 관계들 을 나타낸다. 각 세트는 사용 시나리오에 따라 이용될 수 있다.상기 제1 세트는 V2의 값을 가지는 제1 워드 라인 전압(VH1) 및 V3의 값을 가지는 제2 워드 라인 전 압(VH2)에 대응된다. 따라서, 메모리 상태 \"1\"에서 프로그램되어야 하는 플로팅-게이트 트랜지스터들에 관 하여, VH1(상기 값 V2를 가지는)의 인가 또는 VH2(상기 값 V3을 가지는)의 인가는 하이 게이트 오버 드라이브(gate overdrive)를 야기한다. 메모리 상태 \"0\"에서 프로그램되어야 하는 플로팅-게이트 트랜지스 터들에 대하여, VH2(상기 값 V3을 가지는)의 인가는 하이 게이트 오버드라이브를 야기한다. 그러나, VH1 (상기 값 V2를 가지는)의 인가는 이들 플로팅-게이트 트랜지스터들의 로우 게이트 오버 드라이브를 야기한 다. 상기 제2 세트는 V1의 값을 가지는 제1 워드 라인 전압(VL) 및 V3의 값을 가지는 제2 워드 라인 전압 (VH)에 대응된다. 따라서, 메모리 상태 \"1\"에서 프로그램되어야 하는 플로팅-게이트 트랜지스터들에 대하 여, VL(상기 값 V1을 가지는)의 인가는 하이 게이트 오버드라이브를 가져온다. 또한,메모리 상태 \"0\"(47 0)에서 프로그램되어야 하는 플로팅-게이트 트랜지스터들에 관하여, VL(상기 값 V1을 가지는)의 인가는 게 이트 오버드라이브를 야기하지 않는다. 메모리 상태 \"1\" 또는 메모리 상태 \"0\"에서 프로그램되어야 하는 플로팅-게이트 트랜지스터들에 대하여, V3의 값을 가지는 VH의 인가는 하이 게이트 오버드라이브를 가져온다. 도 4d는 낮은 및 높은 게이트 오버드라이브 대 개념적으로 높은 및 낮은 셀 전류 용량들에 대응되는 낮은 및 높 은 플로팅-게이트 트랜지스터 및 셀 임피던스들과 관련되는 아이콘들을 도시한다. 높은 게이트 오버드라이브 는 상대적으로 두꺼운 화살표로 높은 게이트 오버드라이브를 나타낸다. 낮은 게이트 오버드라이브는 상대적으로 얇은 화살표로 낮은 게이트 오버드라이브를 나타낸다. 높은 셀 전류는 둘의 상대적으로 두꺼운 화살표들로 상대적으로 높은 셀 전류 용량(예를 들어, 상대적으로 낮은 임피던스)을 표시한다. 낮은 셀 전류 및 낮은 셀 전류는 하나의 상대적으로 두꺼운 화살표로 상대적으로 낮은 셀 전류 용량(예를 들어, 상대적으로 높은 임피던스)을 표시한다. 도 4e는 검색 정보 대 저장된 데이터의 함수로서 플로팅-게이트 트랜지스터 전류 용량(예를 들어, 임피던스)을 도시한다. 저장된 데이터 값들은 넷의 칼럼들인 0 저장, 1 저장, 무정의 저장 및 무효 저 장을 가진다. 입력 검색 정보는 셋의 로우들인 0 검색, 1 검색 및 와일드카드 (Wildcard)를 가진다. 상기 표 내의 셀은 도 4d에 예시한 아이콘들에 따른 각 플로팅-게이트 트랜지스터의 임피던스뿐만 아니라 도 4d에 예시한 아이콘들에 따른 각 셀 내에 도시된 상기 한 쌍의 플로팅-게이트 트랜지스 터들의 유효 임피던스도 나타낸다. 셀들(4900, 4902, 4911, 4912, 4920, 4921, 4922, 4932)은 쌍으로 플로팅- 게이트 트랜지스터들 모두의 게이트 오버드라이브를 나타내며, 상대적으로 보다 낮은 임피던스를 야기한다. 셀 들(4901, 4910, 4930, 4931)은 쌍들 내의 단지 하나의 플로팅-게이트 트랜지스터의 게이트 오버드라이브를 나타 내며, 상대적으로 보다 높은 임피던스를 가져온다. 상기 상대적으로 보다 낮은 임피던스는 검색과 데이터 사이 의 매치를 나타내며, 상기 상대적으로 보다 높은 임피던스는 그렇지 않은 경우를 나타낸다. 특정한 예로서, 임계 전압들 및 워드 라인 전압들(VH1)(상기 값 V2를 가지는) 및 VH2(상기 값 V3을 가지는) 사이의 관계의 제1 세트 사용 시나리오에서 셀이 고려된다. Vy는 VH2와 동일하며, Vx는 VH1과 동 일하다. 따라서, Vy(VH2와 동일)에 의해 제어되는 상부 플로팅-게이트 트랜지스터는 높은 게이트 오버드라이브 및 이에 따른 낮은 임피던스에 대응되는 높은 셀 전류 용량을 가진다. Vx(VH1과 동일)에 의해 컨트롤되는 상기 하부 플로팅-게이트 트랜지스터는 높은 게이트 오버드라이브 및 이에 따른 낮은 임피던스에 대응되는 높은 전류 용량을 가진다. 이에 따라, 전체적으로 셀은 낮은 임피던스에 대응되는 높은 전류 용량을 가진다. 다른 특정한 예로서, 임계 전압들과 워드 라인 전압들(VL)(상기 값 V1을 가지는) 및 제2 워드 라인 전압 (VH)(상기 값 V3을 가지는)의 관계들의 제2 세트의 사용 시나리오에서 셀이 고려된다. Vy는 VH와 동 일하며, Vx는 VL과 동일하다. 따라서, Vy(VH와 동일)에 의해 제어되는 상기 상부 플로팅-게이트 트랜지스터는 높은 게이트 오버드라이브 및 이에 따른 낮은 임피던스에 대응되는 높은 전류 용량을 가진다. Vx(VL과 동일)에 의해 컨트롤되는 상기 하부 플로팅-게이트 트랜지스터도 높은 게이트 오버드라이브 및 이에 따른 낮은 임피던스 에 대응되는 높은 전류 용량을 가진다. 이에 따라, 전체적으로 셀은 낮은 임피던스에 대응되는 높은 전류 용량을 가진다. 3D(검색) 엔진 역확장 인코딩 다음으로 역확장 인코딩을 참조하면, 상기 인코딩은 개념적으로는 확장 인코딩의 논리적 역전이지만, 특징들 보 다는 검색 입력들에만 적용된다. 역확장 인코딩은 근접 매칭에 적용 가능하다.도 5a는 표로서 저장된 특징들에 대한 예시적인(비-역전) 확장 인코딩과 함께 3D(검색) 엔진의 검색 입력들의 검색 입력들에 대한 예시적인 역확장 인코딩을 도시한다. 상기 표는 셋의 섹션들로 구조화된다. 상부 섹션에는 워드 라인들에 대한 검색 입력들을 발생시키기 위해 검색 값들에 인가되는 바와 같은 역확장 인코딩이 기재된다. 중간 섹션에는 역확장 인코딩되는 예시적인 입력에 기재 된다. 하부 섹션에는 확장 인코딩되는 저장된 값 및 예시적인 입력에 대한 해밍 거리들이 기재된다. 상기 상부 섹션 내의 제1 칼럼인 검색 값은 역확장 인코딩에 따라 인코딩되는 6-비트 바이너리 검색 값이 다. 상기 제2 칼럼인 역확장 인코딩은 상기 제1 칼럼으로부터의 대응되는 바이너리 값의 64-비트 바이너리 역확장 인코딩이다. 확장 인코딩과 유사하게 64-비트 바이너리 값에 대한 역확장 인코딩에서, 최상위 비트는 항 상 일인 점에 유의한다. 이에 따라, 일부 변형들에서, 상기 최상위 비트는 구현되지 않는다. 상기 중간 섹션은 검색 값 예로서 검색 값 일의 역확장 인코딩이다. 상기 하부 섹션 내의 제1 칼럼인 저장된 값은 메모리 스트링들 내의 저장을 위한 확장 인코딩에 따라 인코 딩되는 6-비트 바이너리 특징이다. 상기 제2 칼럼인 확장 인코딩은 상기 제1 칼럼으로부터의 대응되는 바 이너리 값의 64-비트 바이너리 확장 인코딩이다. 상기 제3 칼럼인 HD는 상기 각각의 확장 인코딩을 가지는 저장된 값과 상기 1의 검색 입력(검색 값 예) 사이의 해밍 거리이다. 64-비트 바이너리 확장 인코딩에서 최상위 비트가 항상 영인 점 및 64-비트 바이너리 역확장 인코딩에서 최상위 비트가 항상 일인 점을 상기한다. 이에 따라, 상기 64-비트 바이너리 확장 인코딩에 따라 인코딩되는 특정한 값을 상기 64-비트 바이너리 역확장 인코딩에 따라 인코딩되는 상기 특정한 값과 비교하는 것은 항상 최상위 비트에서 미스-매치된다. 이에 따라, HD는 최상위 비트를 무시한다. 상기 해밍 거리는 상기 저장된 값이 상기 역확장 인코딩 내의 상기 검색 값 에 가장 가까울 때(최상위 비트를 무시할 때)에 최소이다. 상기 해밍 거리는 상기 저장된 값이 상기 역확장 인코딩 내의 상기 검색 값에 멀어질 때(최상위 비트를 무시할 때)에 최대이다. 가독성을 위해, 상기 표 내의 64-비트 값들은 밑줄 친(\"_\") 문자로 넷의 비트들마다 분리된다. 간결성을 위해, 상기 표에서 일부 값들이 생략된다. 도 5b는 저장된 데이터 값들(저장된 데이터 값) 및 검색 입력 값들(검색 입력 값)의 함수로서 역확장 인코딩을 위한 예시적인 해밍 거리들(HD들)을 그래픽으로 도시한다. 도 6은 저장된 데이터 값들(저장된 데이터 값) 및 검색 입력 값들(검색 입력 값)의 함수로서 확장 인 코딩을 위한 예시적인 해밍 거리들(HD들)을 그래픽으로 도시한다. 도 6은 도 5b와 비교하여 확장 인코딩에 대해 역확장 인코딩이 어떻게 \"역전\"되는 지를 도시한다. 도 5b 및 도 6에 대하여, 상대적으로 보다 낮은 HD들은 상대적으로 보다 어두운 음영들로 도시되는 상대적으로 보다 높은 HD들과 비교하여 상대적으로 보다 밝은 음영들로 도시된다. 가장 낮은 HD는 0(동등을 표시함)이며, 가장 밝은 음영들로 도시된다. 가장 높은 HD는 63(63의 비트들의 미스-매치를 표시함)이며, 가장 어두운 음영으 로 도시된다. 도 5b(역확장 인코딩)에서, HD들은 사선을 따라 0이다. 이에 비하여, 도 6(확장 인코딩)에서는 사선을 따른 HD 들은 63이다. 또한, 도 5b(역확장 인코딩)에서는 HD들은 왼쪽 하부 및 오른쪽 상부 모서리들에서 63이다. 이에 비하여, 도 6(확장 인코딩)에서는 왼쪽 하부 및 오른쪽 상부 모서리들 내의 HD들은 0이다. 이에 따라, 도 5b의 HD들은 도 6의 경우들의 \"역전\"이다. 역확장 인코딩은 검색들 및 저장된 특징들 사이의 근접 매칭을 위해 이용될 수 있다. 가장 우수한 매치(예를 들 어, 높은 유사성)는 가장 낮은 메모리 스트링 전류(예를 들어, 가장 높은 임피던스)를 가진다. 가장 나쁜 매치 (예를 들어, 낮은 유사성)는 가장 높은 메모리 스트링 전류(예를 들어, 가장 낮은 임피던스)를 가진다. 매치되 는(또는 미스-매치되는) 비트들의 숫자는 메모리 스트링 전류 및/또는 임피던스의 측정에 의해 결정될 수 있다. 저장 및 입력 범위들을 원-핫 인코딩하는 3D(검색) 엔진 도 7a는 여러 부분의 표로서 저장된 범위들로의 원-핫 인코딩의 예를 도시한다. 상기 표는 둘의 섹션들로 구조 화된다. 상부 섹션에는 입력으로서 원-핫 인코딩되는 바와 같은 예시적인 입력(상기 값 2)이 기재된다. 하 부 섹션에는 상기 예시적인 입력에 대해 원-핫 인코딩되고 저장된 범위들 및 매치 정보가 기재된다. 상기 하부 섹션 내의 제1 칼럼인 값 범위는 검색 입력들에 대해 매치되는 특징들로서 인코딩되고 저장되는 6-비트 특징들의 각각의 범위들의 리스트이다. 예를 들면, 0-2는 0-2(0, 1, 또는 2)로부터의 검색 입력과 매치되는 저장된 특징을 나타낸다. 제2 칼럼인 범위로의 원-핫 인코딩은 상기 제1 칼럼으로부터의 범위에 대한 64-비트 바이너리 원-핫 인코딩이다. 문자 \"X\"는 대응되는 쌍의 플로팅-게이트 트랜지스터 소자들이 일 또는 영 의 검색 입력과 매치되도록 예를 들면, 무정의 설정되는 것을 표시한다. 제3 칼럼인 매치 는 2의 예시적인 입력(범위들로의 원-핫 인코딩)이 대응되는 저장된 범위 특징과 매치되는 지이다. 상기 2의 예시적인 입력 은 상기 표 내의 제1의 셋의 원-핫 인코딩된 범위들과 매치된다. 범위들이 없는 원-핫 인코딩(예를 들어, 도 3 의 확장 인코딩)만이 2의 예시적인 입력을 2의 저장된 특징 값과 매치시키는 점에 유의한다. 가독성을 위해, 상기 표 내의 64-비트 값들은 밑줄 친(\"_\") 문자로 넷의 비트들마다 분리된다. 간결성을 위해, 상기 표에서 일부 값들이 생략된다. 도 7b는 여러 부분의 표로서 입력 범위 예에 대한 원-핫 인코딩을 도시한다. 상기 표는 둘의 섹션들로 조직화된 다. 상부 섹션에는 입력 범위 예에 대한 원-핫 인코딩으로서 원-핫 인코딩되는 바와 같은 예시적인 입력 범위(0-4)가 기재된다. 문자 \"X\"는 대응되는 검색 입력이 임의의 대응되는 저장된 특징 비트와 매치되는 와일드 카드인 것을 표시한다. 하부 섹션에는 원-핫 인코딩된 저장된 값들 및 입력 범위 예에 대한 매치 정보가 기재된 다. 상기 하부 섹션 내의 제1 칼럼인 값은 원-핫 인코딩에 따라 인코딩되는 6-비트 바이너리 값이다. 제2 칼럼 인 원-핫 인코딩은 상기 제1 칼럼으로부터의 대응되는 바이너리 값의 64-비트 바이너리 원-핫 인코딩이다. 제3 칼럼인 매치 는 0-4의 예시적인 입력 범위가 대응되는 저장된 특징과 매치되는 지이다. 상기 0-4의 예 시적인 입력 범위는 상기 표 내의 제1의 셋의 원-핫 인코딩된 특징들에 매치된다. 가독성을 위해, 상기 64-비트 값들은 밑줄 친(\"_\") 문자로 넷의 비트들마다 분리된다. 간결성을 위해, 상기 표 에서 일부 값들이 생략된다. 원-핫 인코딩은 검색들 및 저장된 특징들 사이의 정확 매칭을 위해 이용될 수 있다. 저장된 범위들로의 원-핫 인코딩은 근접 매칭 검색들을 위해 이용될 수 있다. 보다 많은 무정의들로 저장된 특징을 프로그래밍하는 것은 상기 저장된 특징 매치들에 대한 상기 검색 입력들의 범위를 증가시킨다. 입력 범위들의 원-핫 인코딩은 근접 매칭 검색들에 대해 이용될 수 있다. 와일드카드들인 비트들을 변경하는 것은 매치되는 검색 입력들의 범위를 이동시킨다. 예를 들면, XX1XX000,…, 00의 저장된 특징은 0 내지 4의 검색 입력들과 매치되고, 0XX1XX000,…, 00의 저장된 특징은 1 내지 5의 검색 입력들과 매치된다. 3D(검색) 엔진 동작 도 8은 엔진 흐름으로서 3D(검색) 엔진(도 1a의 3D 엔진과 같은)을 위한 예시적인 동작을 도시한다. 흐름은 특징 및 검색 인코딩들의 선택에서 시작된다. 일부 사용 시나리오들에서, 동일한 인코딩들이 특징 들 및 검색들을 위해 이용된다. 일부 사용 시나리오들에서, 예를 들어, 역확장 인코딩과 같은 다른 인코딩들이 특징들 대 검색들을 위해 이용된다. 흐름은 이후에 특징들의 프로그램으로 진행된다. 대응하여 검색되는 상기 특징들은 상기 선택된 특징 인코딩에 따라 프로그램된다. 흐름은 이후에 검색의 인코딩으로 진행된다. 상기 검색은 상기 선택된 검색 인코딩에 따라 인코딩된다. 일부 응용들에서, 검색은 선택적으로 마스 크 및/또는 범위 정보를 포함하는 하나 또는 그 이상의 파라미터들에 기초하여 수행된다. 흐름은 이후에 워드 라인들의 구동으로 진행된다. 상기 워드 라인들은 상기 검색 인코딩에 따라 구동된다. 흐름은 이후에 비트 라인들의 감지로 진행된다. 상기 비트 라인 감지는 감지 증폭기들에 의해 수행된다. 흐름은 이후에 매치들 의 우선순위 인코딩으로 진행된다. 상기 감지 증폭기들에 의해 제공되는 바와 같은 매치 표시들은 우선순 위가 매겨진 매치 정보(예를 들어, 도 1a의 페이지 버퍼, 캐시, 우선순위 인코더에 의해 수행되는 바와 같은)를 결정하도록 처리된다. 흐름은 이후에 결과들의 제공으로 진행된다. 상기 결과들은, 예를 들면, 호 스트 에이전트(예를 들어, 도 1a의 출력 매칭 결과(들)로서)로 제공된다. 흐름은 이후에 선택적으로 다음 의 검색의 인코딩(검색의 인코딩)으로 돌아간다. 3D(검색) 엔진 장치 및 어플라이언스 도 9는 각기 3D 엔진 어플라이언스 및 3D 엔진 장치로서 예시적인 3D 엔진 장치를 포함하는 예시적인 3D 엔진 어플라이언스를 도시한다. 3D 엔진 어플라이언스는 명확성을 위해 단일의 장치로 도시된 3D 엔진 장치들 중의 하나 또는 그 이상의 예들뿐만 아니라 어플라이언스 인터페이스를 포함한다. 3D 엔진 장치는 3D 엔진(예를 들어, 도 1a-도 1c에 예시하고, 이들 도면들에 대해 설명한 바와 같은)을 포함한다. 3D 엔진 장치는 컨트롤러, 엔진 인터페이스 및 아날로그 소스(analog source)를 더 포함한다. 개념적으로, 3D 엔진 장치 및/또는 3D 엔진 어플라이언스(3D 엔진 이외의)의 요소들은 3D 엔진에 호스트로부터의 특징들 및 검색들을 제공하고, 상기 호스트 결과(들)로 돌아가도록 기능한다. 컨트롤러는 3D 엔진 장치의 다양한 하드웨어 블록들 사이의 동작들의 제어를 제공하게 될 수 있다. 예를 들면, 컨트롤러는 3D 엔진과 엔진 인터페이스의 동작을 조정한다. 다른 예를 위해, 컨트 롤러는 구성 정보에 대해 아날로그 소스의 동작을 조정한다. 또 다른 예를 위해, 컨트롤러는 선 택적으로는 특징 및/또는 검색 인코딩뿐만 아니라 엔진 인터페이스를 통해 안내되고, 3D 엔진에 적 용 가능한 바와 같은 특징 프로그래밍을 조정한다. 또 다른 예들을 위해, 컨트롤러는 다양한 구성들에서 도 8의 동작들(801-807) 중에서 임의의 하나 또는 그 이상과 관련된 동작들을 수행하게 될 수 있다. 엔진 인터페이스는 3D 엔진을 이용하도록 3D 엔진 장치에 대해 외부인 에이전트(어플라이언스 인터페이스 및 호스트/버스 커플링을 통한 호스트와 같은)에 접속하게 될 수 있다. 예시적은 사용들 은 명령들과 데이터를 수신하는 것뿐만 아니라 특징 및/또는 검색 인코딩 특징 프로그래밍 및/또는 검색 요구와 관련된 상태들로 돌아가는 것이다. 아날로그 소스는, 예를 들면, 상기 3D(검색) 엔진 메모리 어레이들의 메모리 어레이들, 비트 라인 회로부, 감지 증폭기 회로부 및/또는 워드 라인 회로부로 하나 또는 그 이상의 아날로그 출력들을 발생시키거나 및/또는 제공하게 될 수 있다. 상기 아날로그 출력들은, 예를 들면, 하나 또는 그 이상의 바이어스 회로들에 의해 생성 되는 바와 같은 영 또는 그 이상의 전압 및/또는 전류 소스들(참조 소스들로서)을 포함한다. 동작 시에, 호스트는, 예를 들면, 호스트/버스 커플링 및 어플라이언스 인터페이스를 통해 특징 및/ 또는 검색 인코딩의 선택을 위한 명령들을 제공한다. 어플라이언스 인터페이스는 이후에 엔진 인터페이스 로 명령들을 제공하며, 상기 명령들은 컨트롤러에 의해 지시되는 바와 같이 3D 엔진에 의해 처 리된다. 다른 유사하게 진행되는 명령들의 예들은 상기 선택된 특징 인코딩에 따른 특징 프로그래밍 및 상기 선 택된 검색 인코딩에 따른 검색 수행을 포함한다. 상태나 처리된 명령들뿐만 아니라 검색들의 결과들이 컨트롤러 및/또는 엔진 인터페이스를 통해 3D 엔진에 의해 제공되는 바와 같이 호스트/버스 커플링 및 어플라이언스 인터페이스를 통하여 상기 호스트로 돌아간다. 3D 엔진 장치의 일부 변형들에 서, 컨트롤러는 3D 엔진 중의 하나 또는 그 이상의 2D(검색) 엔진들을 동시에 동작시키기 위해 사용 될 수 있다. 동작 시에, 3D 엔진 어플라이언스에 대해 외부인 호스트가 3D 엔진 내로 프로그램되도록 3D 엔진 장 치를 위한 특징 정보를 제공한다. 후속하여, 상기 호스트는 어플라이언스 인터페이스를 통해 하나 또 는 그 이상의 검색 파라미터들을 3D 엔진 어플라이언스로 제공한다. 비록 도 9에는 순차적으로 3D 엔진 장치 내에서와 3D 엔진 어플라이언스 내에 사용되는 3D 엔진 을 예시하지만, 다른 사용 시나리오들도 가능하다. 예를 들면, 다양한 요소들(예를 들어, 집적 회로들, 시스템-온-칩 및/또는 패키지된 다이의 하나 또는 그 이상의 다이)이 3D 엔진과 동일하거나, 실질적으로 유사하거나, 이를 기초로 하는 하나 또는 그 이상의 3D 엔진 요소들을 포함한다. 도면들에 예시되는 요소들의 다른 분할들, 요소들 사이의 커플링 그리고 요소들의 능력들 및/또는 용량들뿐만 아니라 사용 요구 사항들에 따른 추가적인 요소들이 고려된다. 3D(검색) 엔진 시스템 도 10은 3D 엔진 시스템으로서 3D(검색) 엔진을 가지는 예시적인 하드웨어 시스템을 도시한다. 상기 시스 템은 하드웨어 블록 CPU, GPU, RAM, 3D 엔진 어플라이언스(도 9 참조), SSD, HDD, 그리고 하드웨어 블록 버스(들)/인터페이스(들)에 의해 연결되는 I/O를 포함한다. CPU는 프로그램된 명령들, 마이크로프로세서들, 단일 프로세서들, AI 프로세서들 및 이들과 유사한 것들 을 실행 가능하게 하는 하드웨어 유닛들의 임의의 결합들과 같은 하나 또는 그 이상의 처리 유닛들을 포함한다. GPU는 그래픽 처리, 신호 처리 및/또는 AI 처리와 같은 상대적으로 높은 병렬 처리가 수행되는 처리를 위 해 처리를 가속할 수 있는 유닛들의 임의의 결합과 같은 하나 또는 그 이상의 처리 유닛들을 포함한다. RAM은 CPU 및/또는 GPU에 내부인 저장보다 큰 용량들로 명령들 및/또는 데이터의 저장을 위 해 하나 또는 그 이상의 저장 요소들을 포함한다. RAM은, 예를 들면, DRAM들 및/또는 SRAM들과 같은 휘발 성 메모리 요소들을 통해 구현 가능하다.SSD는 명령들 및/또는 HDD와 비교하여 감소된 대기 시간으로 선택적으로 접근 가능한 데이터의 저 장을 위해 플래시 기반의 저장 요소들과 같은 하나 또는 그 이상의 저장 요소들을 포함한다. HDD는 저장을 위해 사용될 수 있는 SSD 보다 큰 용량들로 명령들 및/또는 데이터의 저장을 위한 회 전 기반의 자성 및/또는 광학적 비휘발성 저장 요소들(예를 들어, 디스크들)과 같은 하나 또는 그 이상의 저장 요소들을 포함한다. I/O는 CPU, GPU, RAM, 3D 엔진 어플라이언스, SSD 및/또는 HDD의 임의의 결합을 3D 엔진 시스템에 대해 외부인 요소들에 접속시키기 위한 요소들을 포함한다. 예시적인 외 부 요소들은 대용량 기억 장치들, 근거리 및 광역 통신망들(인터넷과 같은), 인간 인터페이스 구성 요소들(키보 드들, 마우스들 및/또는 모니터들과 같은), 그리고 그렇지 않고 3D 엔진 시스템에 의해 제공되지는 않는 능력들을 확장 및/또는 증가시키기 위한 능력들을 제공하는 다른 요소들을 포함한다. I/O는 다양하게 하 나 또는 그 이상의 직렬 및/또는 병렬 통신 채널들뿐만 아니라 선택적인 프로토콜 변환 및/또는 이에 연결되는 요소들 사이의 통신을 가능하기 하는 적응 능력들을 포함한다. 버스(들)/인터페이스(들)는 이에 연결되는 요소들(예를 들어, CPU, GPU, RAM, 3D 엔 진 어플라이언스, SSD, HDD 및/또는 I/O) 사이의 통신을 가능하게 한다. 버스(들)/인 터페이스(들)는 다양하게 하나 또는 그 이상의 직렬 및/또는 병렬 통신 채널들뿐만 아니라 선택적인 프로 토콜 변환 및/또는 이에 연결되는 요소들 사이의 통신을 가능하게 하는 적응 능력들을 포함한다. 도면들에 예시되는 요소들의 다른 분할들, 요소들 사이의 커플링, 그리고 요소들의 능력들 및/또는 용량들뿐만 아니라 사용 요구 사항들에 따른 추가적인 요소들도 고려된다. 일부 상황들에서, 3D 엔진 어플라이언스는 처리 부하(예를 들어, CPU 및/또는 GPU에 대한)의 감소 및/또는 국소적으로 처리를 수행함에 의한 버스(들)/인터페이스(들) 상의 트래픽의 감소를 가능하게 한다. 예를 들면, 범위 매칭이 가능할 수 있도록 원-핫 인코딩(예를 들어, 저장된 특징들을 위한 및/또는 검색 입력 범위들을 위한)을 이용하여, 특징들이 프로그램되면 대용량의 데이터베이스들 사이의 검색들이 3D 엔진 어플라 이언스 내에서 전체적으로 이루어진다. 다른 예를 들면, 근접 매칭이 가능할 수 있도록 역확장 인코딩을 이용하여, 특징들이 프로그램되면 대용량의 AI 데이터 세트들 사이의 비교들이 전체적으로 이루어질 수 있다. 또 다른 예를 들면, 확장 및/또는 원-핫 인코딩을 이용하여, 특징들이 프로그램되면 대용량의 데이터 세트들을 분류하는 것이 3D 엔진 어플라이언스 내에서 전체적으로 이루어질 수 있다. 3D(검색) 엔진 추가 정보 여기에 개시되는 바와 같은 3D(검색) 엔진들의 메모리 어레이들에 적용 가능한 예시적인 메모리 기술들은 플로 팅-게이트, 스플릿-게이트(split-gate), SONOS, 플로팅 도트(floating dot), DRAM, DRAM-유사(예를 들어, 2T0C), FeFET, 그리고 워드 라인들 및 비트 라인들을 통한 검색과 양립될 수 있는 임의의 메모리 기술을 포함한 다. 예시적인 SONOS 메모리 기술(때때로 전하 트랩 메모리로 지칭됨)은 채널로부터 주입되는 바와 같은 전하를 포집하고 유지하는 트랩들을 가지는 절연층(예를 들어, 실리콘 질화물의)을 이용한다. 예시적인 플로팅 도트 메 모리 기술은 개념적으로 플로팅 게이트를 플로팅 실리콘 나노도트로 대체하거나, 폴리실리콘 게이트 내에 플로 팅 실리콘 나노도트들을 매립시킨다. 예시적인 2T0C 메모리 기술은 분명한 저장 커패시터보다는 전하를 저장하 기 위해 판독 트랜지스터의 기생 용량을 이용한다. 예시적인 FeFET 메모리 기술은 정보를 저장하기 위해 게이트 및 소스-게이트 도전 영역 사이에 매립되는 강유전체 물질의 영구적인 전기장 극성을 이용한다. 3D(검색) 엔진 들의 메모리 어레이들에 적용 가능한 예시적인 메모리 구조들은 2D 구조들(예를 들어, 2D 플래시 구조들) 및 3D 구조들(예를 들어, 3D 플래시 구조들)을 포함한다. 3D(검색) 엔진들의 메모리 어레이들에 적용 가능한 예시적인 어레이 아키텍쳐들은 NOR/OR형 어레이 아키텍쳐들 및 AND/NAND형 어레이 아키텍쳐들을 포함한다. 앞서의 설명들에서 구현 예들, 변화들, 실시예들 및 여러 예들이 한정적인 의미로 보다는 예시적인 의미로 의도 되는 점이 이해될 것이다. 변형들 및 결합들도 본 발명의 사상 및 다음의 특허 청구 범위의 범주 이내인 것으로 인지될 수 있는 점도 고려된다."}
{"patent_id": "10-2023-0103692", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1a, 도 1b 및 도 1c는 예시적인 3D(검색) 엔진의 다양한 측면들을 총괄적으로 예시한다. 도 1d는 예시적인 2D(검색) 엔진 및 그 이용을 예시한다. 도 1e는 3D(검색) 중의 엔진의 2D(검색) 엔진의 확장 인코딩 사용 예를 도시한다. 도 1f는 3D(검색) 엔진 중의 2D(검색) 엔진의 원-핫 인코딩 사용 예를 도시한다. 도 2는 3D(검색) 엔진을 위한 예시적인 확장 인코딩을 도시한다. 도 3은 3D(검색) 엔진을 위한 예시적인 원-핫 인코딩을 도시한다. 도 4a는 예시적인 확장 인코딩 및 대응되는 예시적인 로우 이펙트 인코딩을 도시한다. 도 4b는 1의 입력과 비교한 해밍 거리들로의 예시적인 확장 인코딩을 도시한다. 도 4c는 일들, 영들 및 무정의들의 비교를 가능하게 하는 예시적인 임계 전압 및 워드 라인 전압들을 도시한다. 도 4d는 높은 및 낮은 셀 전류 용량에 대한 높은 및 낮은 게이트 오버드라이브와 관련된 아이콘들을 도시한다. 도 4e는 검색 정보 대 저장된 데이터의 함수로서 플로팅-게이트 트랜지스터 임피던스를 도시한다. 도 5a는 3D(검색) 엔진의 검색 입력들을 위한 예시적인 역확장 인코딩을 도시한다. 도 5b는 역확장 인코딩을 위한 저장된 데이터 및 검색 입력 값들의 함수로서 예시적인 해밍 거리들을 그래픽으 로 도시한다. 도 6은 확장 인코딩을 위한 저장된 데이터 값들 및 검색 입력 값들의 함수로서 예시적인 해밍 거리들을 그래픽 으로 도시한다. 도 7a는 저장된 범위들로의 원-핫 인코딩의 예를 도시한다. 도 7b는 입력 범위 예에 대한 원-핫 인코딩을 도시한다. 도 8은 3D(검색) 엔진을 위한 예시적인 동작 흐름을 도시한다. 도 9는 예시적인 3D 엔진 장치를 포함하는 예시적인 3D 엔진 어플라이언스를 도시한다. 도 10은 3D(검색) 엔진을 가지는 예시적인 하드웨어 시스템을 도시한다."}
