{"patent_id": "10-2023-0013954", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0121108", "출원번호": "10-2023-0013954", "발명의 명칭": "런타임 무결성 체크 방법 및 시스템", "출원인": "리벨리온 주식회사", "발명자": "최명훈"}}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "적어도 하나의 프로세서를 포함하는 시큐리티 코어에 의해 수행되는, 런타임 무결성(integrity) 체크 방법에 있어서,단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 상기 시큐리티 코어에서 접근 가능한 암호화 키 매니저에의해 관리되는 제1 암호화 키를 기초로 생성된 제1 출력 값을 상기 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계;상기 단방향 암호화 알고리즘을 이용하여, 상기 제1 데이터 및 상기 제1 암호화 키를 기초로 상기 제1 데이터에대한 제2 출력 값을 생성하는 단계; 및상기 제1 출력 값과 상기 생성된 제2 출력 값을 비교함으로써, 상기 메인 메모리에 저장된 상기 제1 데이터의변조 여부를 체크하는 단계를 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 제1 데이터는, 펌웨어(firmware), 페이지 테이블 또는 학습된 기계학습 모델의 파라미터 중 적어도 하나와연관된 데이터인, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 단방향 암호화 알고리즘을 이용하여, 상기 제1 데이터 및 상기 암호화 키 매니저에 의해 관리되는 제2 암호화 키를 기초로 제3 출력 값을 생성하는 단계; 및상기 제3 출력 값을 상기 제1 데이터와 연관시켜 상기 메인 메모리에 저장하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 제1 출력 값을 상기 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계 이전에,상기 단방향 암호화 알고리즘을 이용하여, 상기 시큐리티 코어에서 접근 가능한 비휘발성 메모리에 저장된 상기제1 데이터 및 상기 제1 암호화 키를 기초로, 제4 출력 값을 생성하는 단계; 및상기 비휘발성 메모리에 상기 제1 데이터와 연관되어 저장된 상기 제1 출력 값을 상기 생성된 제4 출력 값과 비교함으로써, 상기 비휘발성 메모리에 저장된 상기 제1 데이터의 변조 여부를 체크하는 단계를 더 포함하고,상기 제1 출력 값을 상기 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계는,상기 비휘발성 메모리에 저장된 상기 제1 데이터가 변조되지 않았다고 판단되는 경우, 상기 제1 데이터 및 상기공개특허 10-2024-0121108-3-제1 출력 값을 연관시켜 상기 메인 메모리에 저장하는 단계를 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 제1 출력 값을 상기 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계 이전에,상기 단방향 암호화 알고리즘을 이용하여, 상기 시큐리티 코어에서 접근 가능한 비휘발성 메모리에 저장된 상기제1 데이터 및 상기 암호화 키 매니저에 의해 관리되는 제3 암호화 키를 기초로, 제5 출력 값을 생성하는 단계;상기 비휘발성 메모리에 상기 제1 데이터와 연관되어 저장된 제6 출력 값을 상기 생성된 제5 출력 값과 비교함으로써, 상기 비휘발성 메모리에 저장된 상기 제1 데이터의 변조 여부를 체크하는 단계; 및상기 비휘발성 메모리에 저장된 상기 제1 데이터가 변조되지 않았다고 판단되는 경우, 상기 제1 암호화 키를 상기 제1 데이터에 대한 새로운 암호화 키로 결정하고, 상기 단방향 암호화 알고리즘을 이용하여, 상기 제1 데이터 및 상기 제1 암호화 키를 기초로 상기 제1 데이터에 대한 상기 제1 출력 값을 생성하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 제1 출력 값을 상기 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계 이전에,호스트 장치로 별도의 채널을 통해 상기 제1 암호화 키를 전송하는 단계;상기 호스트 장치로부터 상기 제1 데이터 및 상기 제1 출력 값을 수신하는 단계;상기 단방향 암호화 알고리즘을 이용하여, 상기 제1 데이터 및 상기 제1 암호화 키를 기초로, 제7 출력 값을 생성하는 단계; 및상기 수신된 제1 출력 값과 상기 생성된 제7 출력 값을 비교함으로써, 상기 수신된 제1 데이터의 변조 여부를체크하는 단계를 더 포함하고,상기 제1 출력 값을 상기 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계는,상기 수신된 제1 데이터가 변조되지 않았다고 판단되는 경우, 상기 제1 데이터 및 상기 제1 출력 값을 연관시켜상기 메인 메모리에 저장하는 단계를 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 제1 출력 값을 상기 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계 이전에,호스트 장치로 별도의 채널을 통해 상기 암호화 키 매니저에 의해 관리되는 제4 암호화 키를 전송하는 단계;상기 호스트 장치로부터 상기 제1 데이터 및 상기 제1 데이터와 연관된 제8 출력 값을 수신하는 단계;상기 단방향 암호화 알고리즘을 이용하여, 상기 제1 데이터 및 상기 제4 암호화 키를 기초로, 제9 출력 값을 생성하는 단계;상기 수신된 제8 출력 값과 상기 생성된 제9 출력 값을 비교함으로써, 상기 수신된 제1 데이터의 변조 여부를공개특허 10-2024-0121108-4-체크하는 단계; 및상기 수신된 제1 데이터가 변조되지 않았다고 판단되는 경우, 상기 제1 암호화 키를 상기 제1 데이터에 대한 새로운 암호화 키로 결정하고, 상기 단방향 암호화 알고리즘을 이용하여, 상기 제1 데이터 및 상기 제1 암호화 키를 기초로 상기 제1 데이터에 대한 상기 제1 출력 값을 생성하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 제1 데이터는 호스트 장치로부터 수신된 데이터이거나, 상기 메인 메모리에 저장된 데이터를 로드하여 구동 또는 처리를 수행하는 메인 코어에 의해 생성된 데이터인, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,상기 메인 메모리에 저장된 상기 제1 데이터가 변조되었다고 판단되는 경우, 상기 메인 메모리에 저장된 데이터를 로드하여 구동 또는 처리를 수행하는 메인 코어의 동작을 중지시키는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 메인 메모리 중 상기 제1 데이터와 연관된 영역을 미리 지정된 값으로 저장하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서,상기 메인 메모리 중 상기 제1 데이터와 연관된 영역을 제외한 영역의 데이터를 상기 시큐리티 코어에서 접근가능한 별도의 메모리의 미리 지정된 영역에 복사하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제9항에 있어서,상기 시큐리티 코어에서 접근 가능한 비휘발성 메모리에 저장된 리커버리 데이터 및 상기 리커버리 데이터와 연관되어 저장된 출력 값에 기초하여, 상기 리커버리 데이터에 대한 변조 여부를 판단하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,공개특허 10-2024-0121108-5-상기 리커버리 데이터가 변조되었다고 판단되는 경우, 호스트로 리커버리의 실패를 알리고, 상기 호스트의 명령수신을 위해 대기하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 호스트의 명령 수신을 위한 대기 중에, 상기 호스트의 접근을 감지한 경우, 상기 호스트와 연관된 암호화키를 이용하여 상기 호스트에 대한 인증을 수행하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제12항에 있어서,상기 리커버리 데이터가 변조되지 않았다고 판단되는 경우, 상기 리커버리 데이터를 상기 메인 메모리에 저장하는 단계; 및상기 메인 코어의 동작을 재개시키는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서,상기 리커버리 데이터를 상기 메인 메모리에 저장하는 단계는,상기 리커버리 데이터를 상기 메인 메모리 중 상기 제1 데이터와 연관된 영역과 상이한 영역에 저장하는 단계를포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제15항에 있어서,상기 메인 코어의 동작을 재개시키는 단계 이후에,상기 메인 메모리에 저장된 적어도 일부 데이터에 대한 변조가 감지되는 경우, 상기 메인 코어의 동작을 재중지시키는 단계; 및호스트로 리커버리 실패를 알리고, 상기 호스트의 명령 수신을 위해 대기하는 단계를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,상기 호스트의 명령 수신을 위한 대기 중에, 상기 호스트의 접근을 감지한 경우, 상기 호스트와 연관된 암호화키를 이용하여 상기 호스트에 대한 인증을 수행하는 단계공개특허 10-2024-0121108-6-를 더 포함하는, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제1항에 있어서,상기 암호화 키 매니저는, 상기 시큐리티 코어에서만 접근 가능한, 런타임 무결성 체크 방법."}
{"patent_id": "10-2023-0013954", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "컴퓨팅 장치로서,휘발성 메모리인 메인 메모리;상기 메인 메모리에 저장된 적어도 일부의 데이터를 로드하여 구동 또는 처리를 수행하도록 구성된 메인 코어;및단방향 암호화 알고리즘을 이용하여 제1 데이터 및 암호화 키 매니저에 의해 관리되는 제1 암호화 키를 기초로생성된 제1 출력 값을 상기 제1 데이터와 연관시켜 상기 메인 메모리에 저장하고, 상기 단방향 암호화 알고리즘을 이용하여, 상기 제1 데이터 및 상기 제1 암호화 키를 기초로 상기 제1 데이터에 대한 제2 출력 값을 생성하고, 상기 제1 출력 값과 상기 생성된 제2 출력 값을 비교함으로써, 상기 메인 메모리에 저장된 상기 제1 데이터의 변조 여부를 체크하도록 구성된 시큐리티 코어를 포함하고,상기 암호화 키 매니저는, 상기 시큐리티 코어에서 접근 가능한컴퓨팅 장치."}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 적어도 하나의 프로세서를 포함하는 시큐리티 코어에 의해 수행되는, 런타임 무결성 체크 방법에 관한 것이다. 런타임 무결성 체크 방법은, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 시큐리티 코어에서 접 근 가능한 암호화 키 매니저에 의해 관리되는 제1 암호화 키를 기초로 생성된 제1 출력 값을 제1 데이터와 연관 시켜 휘발성 메모리인 메인 메모리에 저장하는 단계, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제1 암 호화 키를 기초로 제1 데이터에 대한 제2 출력 값을 생성하는 단계 및 제1 출력 값과 생성된 제2 출력 값을 비교 함으로써, 메인 메모리에 저장된 제1 데이터의 변조 여부를 체크하는 단계를 포함한다."}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 런타임 무결성 체크 방법 및 시스템에 관한 것으로, 구체적으로, 메인 메모리에 저장되어 사용 중인 데이터(Data in use)에 대한 무결성 체크 방법 및 시스템에 관한 것이다."}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "무결성 체크(Integrity Check)는 데이터가 악의적인 공격에 의해 변조되었는지 여부를 확인하는 절차이다. 종 래 기술에 따르면, 무결성 체크는 주로 비휘발성 메모리에 저장된 데이터를 대상으로 수행된다. 전원의 공급이 없더라도 저장된 데이터를 유지하는 비휘발성 메모리의 특성으로 인해, 비휘발성 메모리에는 주로 재사용되는 데이터가 저장되기 때문이다. 반면, 휘발성 메모리인 메인 메모리는 전원의 공급이 없으면 저장된 데이터가 휘 발되는 특성이 있어, 무결성 체크의 대상이 되지 않는 것이 일반적이다. 다만, 휘발성 메모리인 메인 메모리에도 자주 업데이트되지 않으며 주로 재사용되는 데이터, 즉, read-only 특 성을 갖는 데이터가 저장될 수 있다. 메인 메모리에 저장된 read-only 특성을 갖는 데이터가 악의적인 공격에 의해 변조되는 경우, 연산의 출력 값이 잘못 도출되거나, 시스템이 위험에 노출될 수 있다는 문제점이 있다."}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상기와 같은 문제점을 해결하기 위한 런타임 무결성 체크 방법, 기록매체에 저장된 컴퓨터 프로그램 및 장치(시스템)를 제공한다."}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시는 방법, 장치(시스템) 또는 판독 가능 저장 매체에 저장된 컴퓨터 프로그램을 포함한 다양한 방식으로 구현될 수 있다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서를 포함하는 시큐리티 코어에 의해 수행되는, 런타임 무 결성(integrity) 체크 방법은, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 시큐리티 코어에서 접근 가 능한 암호화 키 매니저에 의해 관리되는 제1 암호화 키를 기초로 생성된 제1 출력 값을 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제1 암호화 키를 기초로 제1 데이터에 대한 제2 출력 값을 생성하는 단계 및 제1 출력 값과 생성된 제2 출력 값을 비교함으 로써, 메인 메모리에 저장된 제1 데이터의 변조 여부를 체크하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 제1 데이터는, 펌웨어(firmware), 페이지 테이블 또는 학습된 기계학습 모델의 파라미터 중 적어도 하나와 연관된 데이터이다. 본 개시의 일 실시예에 따르면, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 암호화 키 매니저에 의해 관리되는 제2 암호화 키를 기초로 제3 출력 값을 생성하는 단계 및 제3 출력 값을 제1 데이터와 연관시켜 메인 메모리에 저장하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 제1 출력 값을 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계 이전에, 단방향 암호화 알고리즘을 이용하여, 시큐리티 코어에서 접근 가능한 비휘발성 메모리에 저장된 제1 데이터 및 제1 암호화 키를 기초로, 제4 출력 값을 생성하는 단계 및 비휘발성 메모리에 제1 데이터와 연관 되어 저장된 제1 출력 값을 생성된 제4 출력 값과 비교함으로써, 비휘발성 메모리에 저장된 제1 데이터의 변조 여부를 체크하는 단계를 더 포함하고, 제1 출력 값을 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저 장하는 단계는, 비휘발성 메모리에 저장된 제1 데이터가 변조되지 않았다고 판단되는 경우, 제1 데이터 및 제1 출력 값을 연관시켜 메인 메모리에 저장하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 제1 출력 값을 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계 이전에, 단방향 암호화 알고리즘을 이용하여, 시큐리티 코어에서 접근 가능한 비휘발성 메모리에 저장된 제1 데이터 및 암호화 키 매니저에 의해 관리되는 제3 암호화 키를 기초로, 제5 출력 값을 생성하는 단계, 비휘 발성 메모리에 제1 데이터와 연관되어 저장된 제6 출력 값을 생성된 제5 출력 값과 비교함으로써, 비휘발성 메 모리에 저장된 제1 데이터의 변조 여부를 체크하는 단계 및 비휘발성 메모리에 저장된 제1 데이터가 변조되지 않았다고 판단되는 경우, 제1 암호화 키를 제1 데이터에 대한 새로운 암호화 키로 결정하고, 단방향 암호화 알 고리즘을 이용하여, 제1 데이터 및 제1 암호화 키를 기초로 제1 데이터에 대한 제1 출력 값을 생성하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 제1 출력 값을 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계 이전에, 호스트 장치로 별도의 채널을 통해 제1 암호화 키를 전송하는 단계, 호스트 장치로부터 제1 데이 터 및 제1 출력 값을 수신하는 단계, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제1 암호화 키를 기초 로, 제7 출력 값을 생성하는 단계, 수신된 제1 출력 값과 생성된 제7 출력 값을 비교함으로써, 수신된 제1 데이 터의 변조 여부를 체크하는 단계를 더 포함하고, 제1 출력 값을 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계는, 수신된 제1 데이터가 변조되지 않았다고 판단되는 경우, 제1 데이터 및 제1 출력 값 을 연관시켜 메인 메모리에 저장하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 제1 출력 값을 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장하는 단계 이전에, 호스트 장치로 별도의 채널을 통해 암호화 키 매니저에 의해 관리되는 제4 암호화 키를 전송하는 단계, 호스트 장치로부터 제1 데이터 및 제1 데이터와 연관된 제8 출력 값을 수신하는 단계, 단방향 암호화 알 고리즘을 이용하여, 제1 데이터 및 제4 암호화 키를 기초로, 제9 출력 값을 생성하는 단계, 수신된 제8 출력 값 과 생성된 제9 출력 값을 비교함으로써, 수신된 제1 데이터의 변조 여부를 체크하는 단계 및 수신된 제1 데이터 가 변조되지 않았다고 판단되는 경우, 제1 암호화 키를 제1 데이터에 대한 새로운 암호화 키로 결정하고, 단방 향 암호화 알고리즘을 이용하여, 제1 데이터 및 제1 암호화 키를 기초로 제1 데이터에 대한 제1 출력 값을 생성 하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 제1 데이터는 호스트 장치로부터 수신된 데이터이거나, 메인 메모리에 저장된 데이터를 로드하여 구동 또는 처리를 수행하는 메인 코어에 의해 생성된 데이터이다.본 개시의 일 실시예에 따르면, 메인 메모리에 저장된 제1 데이터가 변조되었다고 판단되는 경우, 메인 메모리 에 저장된 데이터를 로드하여 구동 또는 처리를 수행하는 메인 코어의 동작을 중지시키는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 메인 메모리 중 제1 데이터와 연관된 영역을 미리 지정된 값으로 저장하는 단계 를 더 포함한다. 본 개시의 일 실시예에 따르면, 메인 메모리 중 제1 데이터와 연관된 영역을 제외한 영역의 데이터를 시큐리티 코어에서 접근 가능한 별도의 메모리의 미리 지정된 영역에 복사하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 시큐리티 코어에서 접근 가능한 비휘발성 메모리에 저장된 리커버리 데이터 및 리커버리 데이터와 연관되어 저장된 출력 값에 기초하여, 리커버리 데이터에 대한 변조 여부를 판단하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 리커버리 데이터가 변조되었다고 판단되는 경우, 호스트로 리커버리의 실패를 알리고, 호스트의 명령 수신을 위해 대기하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 호스트의 명령 수신을 위한 대기 중에, 호스트의 접근을 감지한 경우, 호스트와 연관된 암호화 키를 이용하여 호스트에 대한 인증을 수행하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 리커버리 데이터가 변조되지 않았다고 판단되는 경우, 리커버리 데이터를 메인 메모리에 저장하는 단계 및 메인 코어의 동작을 재개시키는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 리커버리 데이터를 메인 메모리에 저장하는 단계는, 리커버리 데이터를 메인 메 모리 중 제1 데이터와 연관된 영역과 상이한 영역에 저장하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 메인 코어의 동작을 재개시키는 단계 이후에, 메인 메모리에 저장된 적어도 일 부 데이터에 대한 변조가 감지되는 경우, 메인 코어의 동작을 재중지시키는 단계 및 호스트로 리커버리 실패를 알리고, 호스트의 명령 수신을 위해 대기하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 호스트의 명령 수신을 위한 대기 중에, 호스트의 접근을 감지한 경우, 호스트와 연관된 암호화 키를 이용하여 호스트에 대한 인증을 수행하는 단계를 더 포함한다. 본 개시의 일 실시예에 따르면, 암호화 키 매니저는, 시큐리티 코어에서만 접근 가능하다. 본 개시의 일 실시예에 따른 컴퓨팅 장치는, 휘발성 메모리인 메인 메모리, 메인 메모리에 저장된 적어도 일부 의 데이터를 로드하여 구동 또는 처리를 수행하도록 구성된 메인 코어 및 단방향 암호화 알고리즘을 이용하여 제1 데이터 및 암호화 키 매니저에 의해 관리되는 제1 암호화 키를 기초로 생성된 제1 출력 값을 제1 데이터와 연관시켜 메인 메모리에 저장하고, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제1 암호화 키를 기초로 제1 데이터에 대한 제2 출력 값을 생성하고, 제1 출력 값과 생성된 제2 출력 값을 비교함으로써, 메인 메모리에 저장된 제1 데이터의 변조 여부를 체크하도록 구성된 시큐리티 코어를 포함하고, 암호화 키 매니저는 시큐리티 코어에서 접근 가능하다."}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 일부 실시예에 따르면, 시큐리티 코어는 메인 메모리에 저장된 사용 중인 데이터(data in use)에 대 한 무결성 체크를 수행함으로써, 메인 메모리에 저장된 재사용될 가능성이 있는 데이터의 변조를 감지할 수 있 다. 본 개시의 일부 실시예에 따르면, 데이터의 변조가 감지된 경우, 시큐리티 코어는 시스템 보호 과정 및/또는 리 커버리 과정을 수행함으로써, 시스템을 보호하고 안전하게 재가동할 수 있다. 본 개시의 효과는 이상에서 언급한 효과로 제한되지 않으며, 언급되지 않은 다른 효과들은 청구범위의 기재로부"}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "터 본 개시가 속하는 기술분야에서 통상의 지식을 가진 자(“통상의 기술자”라 함)에게 명확하게 이해될 수 있 을 것이다."}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 개시의 실시를 위한 구체적인 내용을 첨부된 도면을 참조하여 상세히 설명한다. 다만, 이하의 설명에 서는 본 개시의 요지를 불필요하게 흐릴 우려가 있는 경우, 널리 알려진 기능이나 구성에 관한 구체적 설명은 생략하기로 한다. 첨부된 도면에서, 동일하거나 대응하는 구성요소에는 동일한 참조부호가 부여되어 있다. 또한, 이하의 실시예 들의 설명에 있어서, 동일하거나 대응되는 구성요소를 중복하여 기술하는 것이 생략될 수 있다. 그러나, 구성 요소에 관한 기술이 생략되어도, 그러한 구성요소가 어떤 실시예에 포함되지 않는 것으로 의도되지는 않는다. 개시된 실시예의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 후술되어 있는 실시예 들을 참조하면 명확해질 것이다. 그러나, 본 개시는 이하에서 개시되는 실시예들에 한정되는 것이 아니라 서로 다른 다양한 형태로 구현될 수 있으며, 단지 본 실시예들은 본 개시가 완전하도록 하고, 본 개시가 통상의 기술 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것일 뿐이다. 본 명세서에서 사용되는 용어에 대해 간략히 설명하고, 개시된 실시예에 대해 구체적으로 설명하기로 한다. 본 명세서에서 사용되는 용어는 본 개시에서의 기능을 고려하면서 가능한 현재 널리 사용되는 일반적인 용어들을 선택하였으나, 이는 관련 분야에 종사하는 기술자의 의도 또는 판례, 새로운 기술의 출현 등에 따라 달라질 수 있다. 또한, 특정한 경우는 출원인이 임의로 선정한 용어도 있으며, 이 경우 해당되는 발명의 설명 부분에서 상세히 그 의미를 기재할 것이다. 따라서, 본 개시에서 사용되는 용어는 단순한 용어의 명칭이 아닌, 그 용어 가 가지는 의미와 본 개시의 전반에 걸친 내용을 토대로 정의되어야 한다. 본 명세서에서의 단수의 표현은 문맥상 명백하게 단수인 것으로 특정하지 않는 한, 복수의 표현을 포함한다. 또한, 복수의 표현은 문맥상 명백하게 복수인 것으로 특정하지 않는 한, 단수의 표현을 포함한다. 명세서 전체 에서 어떤 부분이 어떤 구성요소를 포함한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있음을 의미한다.또한, 명세서에서 사용되는 '모듈' 또는 '부'라는 용어는 소프트웨어 또는 하드웨어 구성요소를 의미하며, '모 듈' 또는 '부'는 어떤 역할들을 수행한다. 그렇지만, '모듈' 또는 '부'는 소프트웨어 또는 하드웨어에 한정되 는 의미는 아니다. '모듈' 또는 '부'는 어드레싱할 수 있는 저장 매체에 있도록 구성될 수도 있고 하나 또는 그 이상의 프로세서들을 재생시키도록 구성될 수도 있다. 따라서, 일 예로서, '모듈' 또는 '부'는 소프트웨어 구성요소들, 객체지향 소프트웨어 구성요소들, 클래스 구성요소들 및 태스크 구성요소들과 같은 구성요소들과, 프로세스들, 함수들, 속성들, 프로시저들, 서브루틴들, 프로그램 코드의 세그먼트들, 드라이버들, 펌웨어, 마이 크로 코드, 회로, 데이터, 데이터베이스, 데이터 구조들, 테이블들, 어레이들 또는 변수들 중 적어도 하나를 포 함할 수 있다. 구성요소들과 '모듈' 또는 '부'들은 안에서 제공되는 기능은 더 작은 수의 구성요소들 및 '모듈' 또는 '부'들로 결합되거나 추가적인 구성요소들과 '모듈' 또는 '부'들로 더 분리될 수 있다. 본 개시의 일 실시예에 따르면, '모듈' 또는 '부'는 프로세서 및 메모리로 구현될 수 있다. '프로세서'는 범용 프로세서, 중앙 처리 장치(CPU), 마이크로프로세서, 디지털 신호 프로세서(DSP), 제어기, 마이크로제어기, 상태 머신 등을 포함하도록 넓게 해석되어야 한다. 몇몇 환경에서, '프로세서'는 주문형 반도체(ASIC), 프로그램가 능 로직 디바이스(PLD), 필드 프로그램가능 게이트 어레이(FPGA) 등을 지칭할 수도 있다. '프로세서'는, 예를 들어, DSP와 마이크로프로세서의 조합, 복수의 마이크로프로세서들의 조합, DSP 코어와 결합한 하나 이상의 마 이크로프로세서들의 조합, 또는 임의의 다른 그러한 구성들의 조합과 같은 처리 디바이스들의 조합을 지칭할 수 도 있다. 또한, '메모리'는 전자 정보를 저장 가능한 임의의 전자 컴포넌트를 포함하도록 넓게 해석되어야 한 다. '메모리'는 임의 액세스 메모리(RAM), 판독-전용 메모리(ROM), 비-휘발성 임의 액세스 메모리(NVRAM), 프 로그램가능 판독-전용 메모리(PROM), 소거-프로그램가능 판독 전용 메모리(EPROM), 전기적으로 소거가능 PROM(EEPROM), 플래쉬 메모리, 자기 또는 광학 데이터 저장장치, 레지스터들 등과 같은 프로세서-판독가능 매체 의 다양한 유형들을 지칭할 수도 있다. 프로세서가 메모리로부터 정보를 판독하고/하거나 메모리에 정보를 기 록할 수 있다면 메모리는 프로세서와 전자 통신 상태에 있다고 불린다. 프로세서에 집적된 메모리는 프로세서 와 전자 통신 상태에 있다. 본 개시에서, '시스템'은 서버 장치와 클라우드 장치 중 적어도 하나의 장치를 포함할 수 있으나, 이에 한정되 는 것은 아니다. 예를 들어, 시스템은 하나 이상의 서버 장치로 구성될 수 있다. 다른 예로서, 시스템은 하나 이상의 클라우드 장치로 구성될 수 있다. 또 다른 예로서, 시스템은 서버 장치와 클라우드 장치가 함께 구성되 어 동작될 수 있다. 본 개시에서, '복수의 A의 각각' 또는 '복수의 A 각각'은 복수의 A에 포함된 모든 구성 요소의 각각을 지칭하거 나, 복수의 A에 포함된 일부 구성 요소의 각각을 지칭할 수 있다. 본 명세서 및 특허청구범위에서 사용된 제1, 제2, A, B 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 상기 구성요소들은 상기 용어들에 의해 한정되어서는 안 된다. 상기 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용된다. 또한, 각 도면에서 사용된 제1, 제2 등의 용어는 하나의 도면 내에서 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용될 뿐, 상기 구성요소들은 상기 용어 들에 의해 한정되어서는 안 된다. 예를 들어, 동일한 도면에 기재된 제1 구성요소와 제2 구성요소는 동일할 수 도 있고, 상이할 수도 있다. 다른 예로, 도 3에 기재된 제1 구성요소와 도 5에 기재된 제1 구성요소는 동일할 수도 있고, 상이할 수도 있다. 도 1은 본 개시의 일 실시예에 따른 컴퓨팅 시스템의 예시를 나타내는 블록도이다. 일 실시예에 따른 컴퓨팅 시스템은 메인 코어 도메인 및 시큐리티 코어 도메인으로 구분될 수 있다. 메인 코어 도메인 에는 메인 코어 및 메인 메모리가 포함될 수 있고, 시큐리티 코어 도메인에는 시큐리티 코 어 및 암호화 키 매니저가 포함될 수 있다. 도 1은 컴퓨팅 시스템의 일 예시일 뿐, 컴퓨팅 시 스템의 필수적 구성만을 도시한 것이 아니며, 컴퓨팅 시스템의 모든 구성을 도시한 것이 아니므로, 도시된 구성 중 적어도 일부가 생략되고/되거나, 다른 구성이 더 포함될 수 있다. 메인 코어는 연산 작업을 수행하는 코어(core)일 수 있다. 추가적으로 또는 이와 달리, 메인 코어는 연산 작업을 수행하는 코어를 관리하거나 작업을 분배하는 코어일 수도 있다. 예를 들어, 메인 코어는 메 인 메모리에 저장된 데이터를 로드하여 데이터를 처리(예를 들어, 연산) 또는 구동할 수 있다. 단, 본 실 시예가 이에 제한되는 것은 아니다. 메인 메모리는 메인 코어 도메인에 속하는 휘발성 메모리(전원이 없으면 내부의 데이터가 휘발되는 특성을 가진 메모리)일 수 있다. 메인 메모리는 메인 코어 및 시큐리티 코어의 동작 중 데이터 및/또는 소프트웨어를 저장 및/또는 사용하기 위한 메모리일 수 있다. 즉, 메인 메모리에는 사용 중인 데이터(data in use)가 저장될 수 있다. 메인 코어 도메인은 메인 코어와, 메인 코어의 연산 작업에 주로 이용되는 하드웨어 및/또는 소 프트웨어 영역을 포함할 수 있다. 예를 들어, 메인 코어 도메인은 메인 메모리를 포함할 수 있다. 시큐리티 코어는 보안 목적의 연산 작업을 수행하는 코어일 수 있다. 추가적으로 또는 이와 달리, 시큐리 티 코어는 보안 목적의 연산 작업을 수행하는 코어를 관리하거나 작업을 분배하는 코어일 수도 있다. 예 를 들어, 시큐리티 코어는 주기적으로 또는 비주기적으로, 메인 메모리에 저장된 적어도 일부의 데이 터에 대한 무결성 체크를 수행할 수 있다. 또한, 시큐리티 코어는 보안 관련 문제가 발생한 경우, 시큐리 티 코어를 제외한 모든 시스템의 동작을 중지시킬 수 있어야 하므로, 컴퓨팅 시스템의 코어 중 우선 순위(priority)가 가장 높을 수 있다. 이러한 구성 하에서, 시큐리티 코어는 컴퓨팅 시스템의 모든 구성에 접근 가능할 수 있다. 일 실시예에 따르면, 시큐리티 코어는 메인 메모리에 접근할 때, 데이터 트래픽을 가속하기 위해 시 큐리티 코어 전용의 DMA(Direct Memory Access)를 사용할 수 있다. 암호화 키 매니저는 시큐리티 코어에 의해 수행되는 암호화 연산 및/또는 복호화 연산과 연관된 암호 화 키를 관리하는 하드웨어 및/또는 소프트웨어일 수 있다. 예를 들어, 암호화 키 매니저는 암호화 키의 생성 및 관리를 담당하는 블록일 수 있다. 일 실시예에 따르면, 암호화 키는 암호화 키 매니저 블록 내부 의 전용 코어(예를 들어, 키 유도 코어(Key Derivation Core))를 통해 생성될 수 있다. 암호화 키 매니저(12 4)는 개별 암호화 키에 대한 정보(예를 들어, 데이터와 암호화 키의 매칭 관계, 호스트 장치와 암호화 키의 매 칭 관계, 테넌트와 암호화 키의 매칭 관계, 사용자와 암호화 키의 매칭 관계 등)를 관리할 수 있다. 도시되지는 않았지만, 일 실시예에 따르면, 시큐리티 코어 도메인 내에는 별도의 메모리가 존재할 수 있다. 시큐리티 코어 도메인 내의 메모리에는 암호화 키(예를 들어, 암호화 키 매니저에서 생성된 키 또는 시스템 외부로부터 전달된 키)와 개별 암호화 키 정보를 저장하기 위한 영역이 존재할 수 있다. 이 영 역에 대한 접근은 암호화 키 매니저만 가능할 수 있다. 추가적으로 또는 대안적으로, 암호화 키 매니저 블록 내부에 암호화 키 매니저 전용의 메모리를 포함할 수도 있으며, 해당 메모리에 암호화 키 및 개별 암호화 키 정보를 저장할 수도 있다. 도 1에서 암호화 키 매니저는 시큐리티 코어와 별개의 구 성인 것처럼 도시되어 있으나, 이는 설명의 편의를 위한 것일 뿐 이에 한정되지 않는다. 일 실시예에 따르면, 암호화 키 매니저의 적어도 일부 구성은 시큐리티 코어에 포함될 수 있다. 시큐리티 코어 도메인은 시큐리티 코어와, 시큐리티 코어의 연산 작업에 이용되는 하드웨어 및/ 또는 소프트웨어 영역을 포함할 수 있다. 시큐리티 코어 도메인은 암호화 키 매니저를 포함할 수 있 다. 시큐리티 코어 도메인은 보안 관련 작업이 수행되는 영역이므로, 시큐리티 코어를 제외한 시스 템 내부/외부의 다른 구성은 암호화된 데이터에 대해 접근 요청을 보내는 등의 제한된 목적으로만 시큐리티 코 어 에 접근할 수 있으며, 이를 제외한 시큐리티 코어 도메인에 대한 접근은 제한될 수 있다. 시큐리티 메인 인터커넥션은 시큐리티 코어와 메인 코어 사이의 데이터 및 제어 신호를 전달할 수 있다. 이때, 시큐리티 코어는 메인 코어보다 우선 순위가 높을 수 있다. 이에 따라, 시큐리티 코어는 메인 코어의 모든 부분에 접근할 수 있고, 메인 코어의 동작 여부도 지시할 수 있다. 이에 따라, 보안 관련 문제가 발생한 경우, 시큐리티 코어가 메인 코어의 동작을 멈추고, 전체 시스 템에 대한 제어 권한을 가질 수 있다. 이를 통해, 무결성 체크 과정에서 데이터의 변조가 감지된 경우, 시큐리 티 코어가 시스템 보호 및 리커버리 과정을 원활하게 수행할 수 있다. 메인 시큐리티 인터커넥션은 메인 코어와 시큐리티 코어 사이의 데이터 및 제어 신호를 전달할 수 있다. 이때, 메인 코어는 메인 시큐리티 인터커넥션을 통해 시큐리티 코어의 전체가 아닌 제한된 부분만을 접근할 수 있다. 이에 따라, 보안을 담당하는 시큐리티 코어의 보안이 유지될 수 있으며, 컴퓨팅 시스템의 변조 위험이 방지될 수 있다. 도 2는 본 개시의 일 실시예에 따른 시큐리티 코어의 내부 구성의 예시를 나타내는 블록도이다. 도 2는 시큐리티 코어의 내부 구성의 일 예시일 뿐, 시큐리티 코어의 필수적 구성만을 도시한 것이 아니며, 시큐리티 코어의 모든 내부 구성을 도시한 것이 아니므로, 도시된 구성 중 적어도 일부가 생략되고/되거나, 다른 구성이 더 포함될 수 있다. 일 실시예에 따르면, 시큐리티 코어는 크립토 엑셀러레이터, 메인-시큐리티 인 터페이스, 시큐리티-메인 인터페이스를 포함할 수 있다. 크립토 엑셀러레이터는 크립토(crypto) 연산(예를 들어, 암호화 및/또는 복호화 연산)을 수행할 수 있다. 크립토 연산은 예를 들어, AES(Advanced Encryption Standard) 알고리즘, Hash 알고리즘, 퍼블릭/프라이빗 (Public/Private) 키 알고리즘, 참난수 생성기(True Random Number Generator) 중 적어도 하나를 이용한 연산 을 포함할 수 있다. 크립토 엑셀러레이터는 시큐리티 코어가 크립토 연산을 원활하게 수행할 수 있도록 크립토 연산에 특 화된 하드웨어일 수 있다. 이러한 구성 하에서, 시큐리티 코어는 무결성 체크를 수행할 때, 암호화 연산 의 정확성과 연산 속도가 더욱 향상될 수 있다. 메인-시큐리티 인터페이스 및 시큐리티-메인 인터페이스는 메인 코어와 시큐리티 코어 사이에서 동작할 수 있다. 메인-시큐리티 인터페이스는 메인 시큐리티 인터커넥션과 연결될 수 있다. 메인-시큐리티 인터페이스 는 메인 시큐리티 인터커넥션과 함께, 메인 코어가 시큐리티 코어에 접근할 때 보안 영역이 아닌 영 역만을 제한적으로 접근할 수 있도록 제어할 수 있다. 시큐리티-메인 인터페이스는 시큐리티 메인 인터커넥션과 연결될 수 있다. 시큐리티-메인 인터페이스(23 0)는 시큐리티 메인 인터커넥션과 함께, 시큐리티 코어가 메인 코어에 접근할 때 사용될 수 있다. 이때, 메인 코어가 시큐리티 코어에 접근할 수 있는 영역은 시큐리티 코어가 메인 코어에 접근할 수 있는 영역보다 작을 수 있다. 이러한 비대칭성을 통해, 시큐리티 코어의 보안이 강화될 수 있으며, 시스템의 변조 위험에 대비할 수 있다. 이러한 구성을 더욱 효과적으로 구현하기 위하여, 메인-시큐리티 인터페이스 및 시큐리티-메인 인터페이스는 서로 물리적으로 분리될 수 있다. 도 3은 본 개시의 일 실시예에 따른 런타임 무결성 체크 방법의 예시를 나타내는 도면이다. 시큐리티 코어는 메인 메모리에 저장된 데이터에 대해 런타임 무결성 체크를 주기적으로 또는 비주기적으로 수행할 수 있다. 무결성 체크를 위해 사용되는 암호화 키는 시큐리티 코어에서 접근 가능한 시큐리티 코어 도메인 내의 암호화 키 매니저에 의해 관리될 수 있다. 일 실시예에 따르면, 암호화 키 매니저는 시큐리티 코어에서만 접근 가능할 수 있으며, 시큐리티 코어를 제외한 시스템 내/외부의 다른 구성에서는 접근이 불가할 수 있다. 일 실시예에 따르면, 시큐리티 코어는 메인 메모리에 저장된 데이터 중 일부 데이터에 대해서만 런타임 무 결성 체크를 수행할 수 있다. 예를 들어, 시큐리티 코어는, 자주 업데이트되지 않으며 주로 재사용되는 데이터, 즉, read-only 특성을 가진 데이터에 대해 런타임 무결성 체크를 수행할 수 있다. 구체적 예로, read- only 특성을 가진 데이터는 펌웨어(Firmware), 페이지 테이블 및/또는 학습된 기계학습 모델의 파라미터(예를 들어, 학습된 뉴럴 네트워크의 커널 데이터) 등을 포함할 수 있으나, 이에 한정되지 않는다. 시큐리티 코어는 무결성 체크를 위해, 단방향 암호화 알고리즘을 이용할 수 있다. 단방향 암호화 알고리즘은 입력 값이 바뀌는 경우 출력 값이 바뀌는 것이 보장되고, 또한, 출력 값으로부터 입력 값을 도출하는 역연산이 매우 어렵거나 불가능한 알고리즘일 수 있다. 해당 기술 분야에서 알려진 임의의 단방향 암호화 알고리즘이 무 결성 체크를 위해 사용될 수 있다. 예를 들어, 단방향 암호화 알고리즘에는 CRC, MD5, RIPEMD160, SHA-1, SHA-256, SHA-512 등과 같은 해시 알고리즘(hash algorithm) 등이 포함될 수 있으나, 이에 한정되지 않는다. 이하에서, '출력 값'은 단방향 암호화 알고리즘에 데이터 및 암호화 키를 입력하여 출력된 암호화 알고리즘의 출력 값을 지칭할 수 있다. 도 3에는 메인 메모리에 저장된 제1 데이터에 대해 런타임 무결성 체크가 수행되는 예시가 도시되어 있다. 도시된 예에서, 제1 데이터는 단방향 암호화 알고리즘을 이용하여 암호화 키 매니저에 의해 관리되는 제1 암호화 키를 기초로 생성된 제1 출력 값과 연관되어 메인 메모리에 저장되어 있다. 예를 들어, 제1 출력 값은 해시 알고리즘에 제1 데이터 및 제1 암호화 키를 입력하여 출 력된 해시 값(hash value)일 수 있다. 제1 데이터와 제1 암호화 키가 연관된다는 매칭 정보는 시큐 리티 코어 도메인 내의 암호화 키 매니저에 의해 관리될 수 있다. 메인 메모리에 저장된 제1 데이터의 출처는 다양할 수 있다. 예를 들어, 제1 데이터는 시큐리 티 코어에서 접근 가능한 비휘발성 메모리로부터 로딩된 데이터이거나, 메인 코어에 의해 처리되어 생성된 데이 터이거나, 호스트 장치에 의해 수신된 데이터일 수 있다. 일 실시예에 따르면, 제1 데이터의 출처에 따라, 제1 데이터가 메인 메모리에 저장되는 과정은 달라질 수 있다. 일부 실시예에서, 제1 데이터 가 시큐리티 코어에서 접근 가능한 비휘발성 메모리로부터 로드되는 경우 또는 제1 데이터가 호스트 장치에서 수신되는 경우, 시큐리티 코어는 먼저 제1 데이터에 대한 사전 무결성 체크를 수행한 뒤, 제1 데이터를 메인 메모리에 저장할 수 있다. 제1 데이터의 출처에 따라 제1 데이터가 메인 메 모리에 저장되는 과정은 도 4a 내지 도 6을 참조하여 상세히 후술된다. 런타임 무결성 체크를 위해 먼저, 시큐리티 코어는 단방향 암호화 알고리즘을 이용하여, 메인 메모리에 저 장된 제1 데이터 및 제1 암호화 키를 기초로 제1 데이터에 대한 제3 출력 값을 생성할 수 있다. 예를 들어, 시큐리티 코어가 해시 알고리즘에 제1 데이터 및 제1 암호화 키를 입력함으로써 출력된 해시 값이 제1 출력 값일 수 있다. 일 실시예에 따르면, 시큐리티 코어는 메인 메모리로부터 데이터를 로드하거나, 메인 메모리에 데이터를 저장할 때, 데이터 트래픽을 가속하기 위해, 시큐리티 코어 전용의 DMA(Direct Memory Access)를 사용할 수 있다. 그런 다음, 시큐리티 코어는 저장된 제1 출력 값과 생성된 제3 출력 값을 비교함으로써, 메인 메모리 에 저장된 제1 데이터의 변조 여부를 체크할 수 있다. 시큐리티 코어는 이와 같은 무결성 체크를 주 기적으로 또는 비주기적으로 수행할 수 있다. 변조 여부 체크 결과, 제1 출력 값과 제3 출력 값이 일치하지 않는 경우, 메인 메모리에 저장된 제1 데이터는 변조된 것으로 판단될 수 있다. 제1 데이터가 변조된 것으로 판단되는 경우, 시큐리티 코어는 시스템 보호 과정 및 리커버리 과정을 수행할 수 있다. 시큐리티 코어가 시스템 보호 과정 및 리커버리 과정을 수행하는 방법과 관련하여서는, 도 7 및 도 8을 참조하여 상세히 후술된다. 제1 출력 값과 제3 출 력 값이 일치하는 경우, 메인 메모리에 저장된 제1 데이터의 무결성이 확인될 수 있다. 무결성 체크에 동일한 키를 지속적으로 사용하는 경우, 보안 위험에 노출될 가능성이 있다. 일 실시예에 따르 면, 이러한 보안 위험에 노출되는 것을 방지하기 위해, 시큐리티 코어는 주기적으로 암호화 키를 변경하고 출력 값을 재생성하여 저장할 수 있다. 예를 들어, 시큐리티 코어는 단방향 암호화 알고리즘을 이용하여, 제1 데이 터 및 암호화 키 매니저에 의해 관리되는 제2 암호화 키를 기초로 새 출력 값을 생성할 수 있으며, 새 출력 값을 제1 데이터와 연관시켜 메인 메모리에 저장할 수 있다. 도 4a는 본 개시의 일 실시예에 따라 비휘발성 메모리에 저장된 데이터가 메인 메모리에 저장되는 과 정의 예시를 나타내는 도면이다. 일 실시예에 따르면, 비휘발성 메모리에 저장된 제1 데이터가 메인 메모리에 로드되어 저장될 수 있다. 이 경우, 시큐리티 코어는 비휘발성 메모리에 제1 데이터 와 연관되어 저장된 제1 출력 값을 이용하여, 제1 데이터에 대한 사전 무결성 체크를 수행한 뒤 메인 메모리에 제1 데이터를 저장할 수 있다. 도 4a에서, 비휘발성 메모리에 저장된 제1 출력 값은 제1 암호화 키를 이용하여 출력 값이다. 이러한 데이터와 암호화 키의 매칭 정보는 시큐리티 코어 도메인 내의 암호화 키 매니저에 의해 관리 될 수 있다. 제1 데이터에 대한 사전 무결성 체크를 위해, 시큐리티 코어는 단방향 암호화 알고리즘을 이용하여, 비휘 발성 메모리에 저장된 제1 데이터 및 제1 암호화 키를 기초로, 제3 출력 값을 생성할 수 있다. 그런 다음, 비휘발성 메모리에 제1 데이터와 연관되어 저장된 제1 출력 값을, 생성된 제3 출력 값과 비교함으로써, 비휘발성 메모리에 저장된 제1 데이터의 변조 여부가 체크될 수 있다. 변조 여부의 체크 결과, 비휘발성 메모리에 저장된 제1 데이터가 변조되지 않았다고 판단되는 경우, 시큐리티 코어는 제1 데이터 및 제1 출력 값을 연관시켜 메인 메모리에 저장할 수 있다. 이에 반해, 비휘발성 메모리에 저장된 제1 데이터가 변조되었다고 판단되는 경우, 시큐리티 코어는 제1 데 이터를 메인 메모리에 저장하지 않는 것을 결정할 수 있다. 이후, 시큐리티 코어는 메인 메모리에 저장된 제1 데이터 및 제1 출력 값을 이용하여, 도 3을 참조하여 상술한 런타임 무결성 체크를 주기적으로 또는 비주기적으로 수행할 수 있다. 도 4b는 본 개시의 일 실시예에 따라 비휘발성 메모리에 저장된 데이터가 메인 메모리에 저장되는 과 정의 예시를 나타내는 도면이다. 상술한 바와 같이, 비휘발성 메모리에 저장된 제1 데이터에 대한 사전 무결성 체크 결과 제1 데이터가 변조되지 않았다고 판단한 시큐리티 코어는 도 4a에서와 같이 제1 데 이터 및 제1 출력 값을 그대로 메인 메모리에 저장하는 대신, 암호화 키를 새로운 암호화 키로 변경하고, 출력 값을 재생성하여 메인 메모리에 저장할 수 있다. 예를 들어, 비휘발성 메모리에 저장된 제1 데이터에 대한 무결성 체크를 완료한 시큐리티 코어는 제2 암호화 키를 제1 데이터에 대한 새로운 암호화 키로 결정하고, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제2 암호화 키를 기초로 제1 데이터에 대한 제4 출력 값을 생성할 수 있다. 그런 다음, 시큐리티 코어는 제4 출력 값을 제1 데이터와 연관시켜 메인 메모리에 저장할 수 있 다. 메인 메모리에 저장된 제1 데이터가 제1 암호화 키가 아닌 제2 암호화 키와 연관되는 것으로 암호화 키의 매칭 정보가 업데이트될 수 있다. 이후, 시큐리티 코어는 메인 메모리에 저장된 제1 데이터 및 제4 출력 값을 이용하여, 도 3을 참조하여 상술한 런타임 무결성 체크를 주기적으로 또는 비주기적으로 수행할 수 있다. 도 5는 본 개시의 일 실시예에 따라 메인 코어에 의해 처리된 데이터가 메인 메모리에 저장되는 과정 의 예시를 나타내는 도면이다. 일 실시예에 따르면, 제1 데이터는 메인 코어에 의해 처리되어 생성 된 데이터일 수 있다. 이 경우, 시큐리티 코어는 별도의 사전 무결성 체크 없이, 단방향 암호화 알고리즘을 이 용하여, 제1 데이터 및 암호화 키 매니저에 의해 관리되는 제1 암호화 키를 기초로, 제1 출력 값을 생성할 수 있다. 그런 다음, 시큐리티 코어는 제1 데이터 및 제1 출력 값을 연관시켜 메 인 메모리에 저장할 수 있다. 또한, 시큐리티 코어는 암호화 키의 매칭 정보가 저장되는 영역에, 메인 메 모리에 저장된 제1 데이터가 제1 암호화 키와 연관되는 것으로 저장할 수 있다. 이후, 시큐리티 코어는 메인 메모리에 저장된 제1 데이터 및 제1 출력 값을 이용하여, 도 3을 참조하여 상술한 런타임 무결성 체크를 주기적으로 또는 비주기적으로 수행할 수 있다. 도 5를 참조하여 상술한 과정은 제1 데이터가 메인 코어에 의해 처리되어 생성된 데이터가 아닌 호스 트 장치로부터 수신된 데이터인 경우에도 유사하게 적용될 수 있다. 예를 들어, 호스트 장치로부터 별도의 출 력 값 없이, 제1 데이터만 수신된 경우, 도 5를 참조하여 상술한 과정과 같이, 시큐리티 코어는 제1 출력 값을 생성하고, 수신된 제1 데이터와 생성된 제1 출력 값을 연관시켜 메인 메모리에 저장 할 수 있다. 이와 달리, 시큐리티 코어가 호스트 장치와 별도의 보안 채널을 통해 암호화 키를 사전 교환한 뒤, 호스트 장치로부터 데이터와 출력 값을 함께 수신한 경우, 도 6을 참조하여 후술되는 바와 같이, 사전 무결 성 체크가 수행될 수 있다. 도 6은 본 개시의 일 실시예에 따라 호스트 장치로부터 수신된 데이터가 메인 메모리에 저장되는 과 정의 예시를 나타내는 도면이다. 일 실시예에 따르면, 시큐리티 코어는 호스트 장치와 별도의 보안 채널 을 통해 암호화 키를 교환할 수 있다. 예를 들어, 시큐리티 코어와 호스트 장치 사이의 별도의 보안 채널 이 생성될 수 있다. 시큐리티 코어는 별도의 보안 채널을 통해, 암호화 키 교환 알고리즘(예를 들어, ECDH 알 고리즘)을 이용하여, 제1 암호화 키를 전송할 수 있다. 또한, 호스트 장치에 의해 수신되는 데이터 와 제1 암호화 키가 연관된다는 매칭 정보가, 시큐리티 코어 도메인 내의 암호화 키 매니저에 의해 관리되는 메모리 영역에 저장될 수 있다. 이후, 시큐리티 코어는 호스트 장치로부터 제1 데이터 및 제1 출력 값을 수신할 수 있다. 이 경우, 시큐리티 코어는 제1 데이터에 대한 사전 무결성 체크를 수행할 수 있다. 먼저, 시큐리티 코어는 단방향 암호화 알고리즘을 이용하여, 수신된 제1 데이터 및 제1 암호화 키를 기초로, 제3 출력 값 을 생성할 수 있다. 그런 다음, 수신된 제1 출력 값을, 생성된 제3 출력 값과 비교함으로써, 호스트 장치로부터 수신된 제1 데이터의 변조 여부를 체크할 수 있다. 변조 여부의 체크 결과, 수신된 제1 데이터가 변조되지 않았다고 판단되는 경우, 시큐리티 코어는 제1 데 이터 및 제1 출력 값을 연관시켜 메인 메모리에 저장할 수 있다. 이에 반해, 수신된 제1 데이 터가 변조되었다고 판단되는 경우, 시큐리티 코어는 제1 데이터를 메인 메모리에 저장하지 않는 것을 결정할 수 있다. 이후, 시큐리티 코어는 메인 메모리에 저장된 제1 데이터 및 제1 출력 값을 이용하여, 도 3을 참조하여 상술한 런타임 무결성 체크를 주기적으로 또는 비주기적으로 수행할 수 있다. 대안적으로, 수신된 제1 데이터가 변조되지 않았다고 판단한 시큐리티 코어는, 제1 데이터 및 제1 출 력 값을 그대로 메인 메모리에 저장하는 대신, 도 4b를 참조하여 상술한 바와 유사하게, 암호화 키를 새로운 암호화 키로 변경하고, 출력 값을 재생성하여 메인 메모리에 저장할 수 있다. 도 7은 본 개시의 일 실시예에 따른 시스템 보호 과정의 예시를 나타내는 도면이다. 일 실시예에 따르면, 런타임 무결성 체크 결과, 메인 메모리에 저장된 제1 데이터가 변조되었다고 판단되는 경우, 시큐리티 코어는 메인 코어를 포함한 전체 시스템의 동작을 즉각적으로 중지시킴으로써 시스템 보호 과정을 개시할 수 있다(S710). 메인 코어는 시큐리티 코어로부터 동작 재개 명령이 오기 전까지 동작 중지 상태를 유지(wait for interrupt)할 수 있다. 이러한 과정에서, 시큐리티 코어의 동작은 중지되지 않을 수 있다. 그런 다음, 시큐리티 코어는 런타임 무결성 체크를 실패했다는 로그를 기록할 수 있다(S720). 예를 들어, 시큐 리티 코어는 문제 상황을 분석하기 위해 필요한 로그 정보를 시큐리티 코어 도메인 내의 별도의 메모리(시큐리 티 코어에서만 접근 가능한 메모리)에 저장할 수 있다. 그런 다음, 시큐리티 코어는 메인 메모리의 데이터를 복사하고/하거나 메인 메모리에 미리 지정된 값을 저장 (rewrite)할 수 있다(S730). 예를 들어, 시큐리티 코어는 메인 메모리의 전체 영역 또는 메인 메모리 중 변조 가 감지된 제1 데이터와 연관된 영역을 미리 지정된 값(예를 들어, 0)으로 저장할 수 있다. 일 실시예에 따르 면, 시큐리티 코어는 메인 메모리의 전체 영역을 미리 지정된 값으로 저장하기 전에, 메인 메모리 중 변조가 감 지된 제1 데이터와 연관된 영역을 제외한 영역의 데이터를 시큐리티 코어에서 접근 가능한 별도의 메모리의 미 리 지정된 영역에 복사할 수 있다. 그런 다음, 시큐리티 코어는 호스트에게 인터럽트를 사용하여 런타임 무결성 체크에 실패했음을 알림으로써, 시 스템 보호 과정을 종료할 수 있다(S740). 이후, 시큐리티 코어는 시스템 재구동을 위한 리커버리 과정을 수행 할 수 있다. 도 8은 본 개시의 일 실시예에 따른 리커버리 과정의 예시를 나타내는 도면이다. 일 실시예에 따르면, 시 큐리티 코어는 전술한 시스템 보호 과정을 수행한 뒤, 시스템 재구동을 위한 리커버리 과정을 수행할 수 있다. 이와 달리, 시스템 보호 과정의 적어도 일부와 리커버리 과정의 적어도 일부는 병렬적으로 수행될 수 있다. 먼저, 시큐리티 코어는 리커버리 데이터의 무결성을 체크할 수 있다(S810). 예를 들어, 시큐리티 코어는 시큐 리티 코어에서 접근 가능한 비휘발성 메모리에 별도로 저장된 신뢰할 수 있는 리커버리 데이터(예를 들어, 펌웨 어, 페이지 테이블 등) 및 리커버리 데이터와 연관되어 저장된 출력 값(예를 들어, 해시 값)에 기초하여, 리커 버리 데이터에 대한 변조 여부를 판단할 수 있다. 변조 여부의 판단은 도 3을 참조하여 상술한 무결성 체크 과 정과 동일/유사하게 수행될 수 있다. 일 실시예에서, 단계 S810의 수행 결과, 리커버리 데이터가 변조되지 않았다고 판단되는 경우, 시큐리티 코어는 리커버리 데이터를 메인 메모리에 로드하고(S820), 메인 코어의 동작을 재가동시킬 수 있다(S830). 예를 들어, 시큐리티 코어는 메인 메모리 중 변조가 감지된 제1 데이터와 연관된 영역과 상이한 영역에 리커버리 데이터를 저장할 수 있다. 일 실시예에 따르면, 시스템이 재가동된 뒤, 시큐리티 코어는 도 3을 참조하여 상술한 무결성 체크 과정을 일시 적으로, 주기적으로, 비주기적으로 및/또는 미리 지정된 기간 동안 수행할 수 있다(S840). 일 실시예에서, 런 타임 무결성 체크 결과, 아무런 이상이 없는 경우, 리커버리 과정은 종료될 수 있다. 이와 달리, 런타임 무결 성 체크 과정 중, 메인 메모리에 저장된 적어도 일부의 데이터가 변조되었다고 판단되는 경우, 시큐리티 코어는 전술한 시스템 보호 과정을 재수행할 수 있다(S850). 일 실시예서, 단계 S810의 수행 결과, 리커버리 데이터가 변조되었다고 판단되는 경우, 또는, 일 실시예에서, 단계 S850의 시스템 보호 과정의 재수행이 완료된 경우, 시큐리티 코어는 인터럽트를 사용하여, 호스트에 게 리커버리의 실패를 알리고(S860), 호스트의 명령을 기다릴 수 있다(S870). 일 실시예에 따르면, 시큐리티 코어는 호스트의 명령 수신을 위한 대기 중에 호스트의 시스템 접근을 감지한 경 우, 호스트가 악의적인 공격을 당한 경우를 가정하여, 호스트의 시스템 접근에 대한 인증을 수행할 수 있다. 예를 들어, 인증 과정은 암호화 키 매니저가 관리하는 호스트와 연관된 암호화 키를 이용하여 진행될 수 있다. 또한, 인증은 기밀성을 위해, 양방향 암호화 알고리즘(예를 들어, AES, SEED 등과 같은 대칭키 암호화 알고리즘 또는 RSA, DSA 등과 같은 비대칭키 암호화 알고리즘)을 이용하여 수행될 수 있다. 도 9는 본 개시의 일부 실시예들에 따른 뉴럴 프로세싱 시스템을 설명하기 위한 블록도이다. 도 9를 참조하면, 본 개시의 일부 실시예에 따른 뉴럴 프로세싱 시스템(NPS)은 제1 뉴럴 프로세싱 장치, 제2 뉴럴 프로세싱 장 치 및 외부 인터페이스를 포함할 수 있다. 제1 뉴럴 프로세싱 장치는 인공 신경망을 이용하여 연산을 수행하는 장치일 수 있다. 제1 뉴럴 프로세싱 장 치는 예를 들어, 딥 러닝(deep learning) 연산 작업을 수행하는 것에 특화된 장치일 수 있다. 단, 본 실시예 가 이에 제한되는 것은 아니다.제2 뉴럴 프로세싱 장치는 제1 뉴럴 프로세싱 장치와 동일 내지 유사한 구성을 가지는 장치일 수 있다. 제1 뉴럴 프로세싱 장치 및 제2 뉴럴 프로세싱 장치는 서로 외부 인터페이스를 통해서 연결되어 데이 터 및 제어 신호를 공유할 수 있다. 도 9에서는 2개의 뉴럴 프로세싱 장치를 도시하였지만, 본 발명의 일부 실시예에 따른 뉴럴 프로세싱 시스템 (NPS)이 이에 제한되는 것은 아니다. 즉, 본 발명의 일부 실시예에 따른 뉴럴 프로세싱 시스템(NPS)은 3개 이상 의 뉴럴 프로세싱 장치가 외부 인터페이스를 통해서 서로 연결될 수도 있다. 또한, 반대로, 본 발명의 일부 실시예들에 따른 뉴럴 프로세싱 시스템(NPS)은 하나의 뉴럴 프로세싱 장치만을 포함할 수도 있다. 이때, 제1 뉴럴 프로세싱 장치 및 제2 뉴럴 프로세싱 장치는 각각 뉴럴 프로세싱 장치가 아닌 다른 프로 세싱 장치일 수도 있다. 즉, 제1 뉴럴 프로세싱 장치 및 제2 뉴럴 프로세싱 장치는 각각 그래픽 프로세싱 장치(GPU, graphics processing unit), 중앙 처리 장치(CPU, central processing unit) 및 그 외의 다른 종류 의 프로세싱 장치일 수도 있다. 이하에서는 편의상 제1 뉴럴 프로세싱 장치 및 제2 뉴럴 프로세싱 장치가 뉴럴 프로세싱 장치인 것으로 설명한다. 도 10는 도 9의 뉴럴 프로세싱 장치를 세부적으로 설명하기 위한 블록도이다. 도 10을 참조하면, 제1 뉴럴 프 로세싱 장치는 뉴럴 코어 SoC, CPU, 오프 칩 메모리, 제1 비휘발성 메모리 인터페이스, 제1 휘발성 메모리 인터페이스, 제2 비휘발성 메모리 인터페이스, 제2 휘발성 메모리 인터페이스 및 컨 트롤 인터페이스(CIF)를 포함할 수 있다. 뉴럴 코어 SoC는 시스템 온 칩(System on Chip) 장치일 수 있다. 뉴럴 코어 SoC는 인공지능 연산 유 닛으로 가속기(Accelerator)일 수 있다. 뉴럴 코어 SoC는 예를 들어, GPU(graphics processing unit), FPGA(field programmable gate array) 또는 ASIC(application-specific integrated circuit) 중 어느 하나일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 뉴럴 코어 SoC는 외부 인터페이스를 통해서 다른 외부의 연산 유닛들과 데이터를 교환할 수 있다. 또한, 뉴럴 코어 SoC는 제1 비휘발성 메모리 인터페이스 및 제1 휘발성 메모리 인터페이스를 통해 서 각각 비휘발성 메모리 및 휘발성 메모리와 연결될 수 있다. CPU는 제1 뉴럴 프로세싱 장치의 시스템을 통제하고 프로그램의 연산을 실행하는 제어장치일 수 있다. CPU는 범용 연산 유닛으로서 딥러닝에 많이 사용되는 병렬 단순 연산을 수행하기에는 효율이 낮을 수 있다. 따라서, 뉴럴 코어 SoC가 딥러닝 추론 및 학습 작업에 연산을 수행하여 높은 효율을 가질 수 있다. CPU는 외부 인터페이스를 통해서 다른 외부의 연산 유닛들과 데이터를 교환할 수 있다. 또한, CPU 는 제2 비휘발성 메모리 인터페이스 및 제2 휘발성 메모리 인터페이스를 통해서 각각 비휘발성 메모리 및 휘발성 메모리와 연결될 수 있다. CPU는 또한, 커맨드를 통해서 뉴럴 코어 SoC에 태스크를 전달할 수 있다. 이때, CPU는 뉴럴 코어 SoC에 지시를 주는 일종의 호스트(Host)일 수 있다. 즉, 뉴럴 코어 SoC는 CPU의 지시에 따라서 딥 러닝 작업 등 병렬 연산 작업을 효율적으로 수행할 수 있다. 또한, CPU는 외부 호스트로부터 커맨드 또는 태스크를 전달받을 수 있고, 전달된 커맨드 또는 태스크를 기 초로 제1 뉴럴 프로세싱 장치를 제어하고 프로그램의 연산을 실행하도록 할 수도 있다. 그리고 다양한 실시 예에 따르면 CPU는 CPU가 포함된 제1 뉴럴 프로세싱 장치가 아닌 다른 뉴럴 프로세싱 장치를 제어하 고 프로그램의 연산을 실행하도록 할 수도 있다. 오프 칩 메모리는 뉴럴 코어 SoC의 칩 외부에 배치된 메모리일 수 있다. 오프 칩 메모리는 비휘발 성 메모리 및 휘발성 메모리를 포함할 수 있다. 비휘발성 메모리는 전원이 공급되지 않아도 저장된 정보를 계속 유지하는 메모리일 수 있다. 비휘발성 메 모리는 예를 들어, ROM(Read-Only Memory), PROM(Programmable Read-Only Memory), EAROM(Erasable Alterable ROM), EPROM(Erasable Programmable Read-Only Memory), EEPROM(Electrically Erasable Programmable Read-Only Memory)(예를 들어, 낸드 플래시 메모리(NAND Flash memory), 노어 플래시 메모리(NOR Flash memory)), UVEPROM(Ultra-Violet Erasable Programmable Read-Only Memory), FeRAM(Ferroelectric Random Access Memory), MRAM(Magnetoresistive Random Access Memory), PRAM(Phase-change Random Access Memory), SONOS(silicon-oxide-nitride-oxide-silicon), RRAM(Resistive Random Access Memory), NRAM(Nanotube Random Access Memory), 마그네틱 컴퓨터 기억 장치(예를 들면, 하드 디스크, 디스켓 드라이브,마그네틱 테이프), 광디스크 드라이브 및 3D 크로스포인트 메모리(3D XPoint memory) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 휘발성 메모리는 비휘발성 메모리와 달리, 저장된 정보를 유지하기 위해서 전력을 지속적으로 필요로 하는 메모리일 수 있다. 휘발성 메모리는 예를 들어, DRAM(Dynamic Random Access Memory), SRAM(Static Random Access Memory), SDRAM(Synchronous Dynamic Random Access Memory) 및 DDR SDRAM(Double Data Rate SDRAM) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 제1 비휘발성 메모리 인터페이스 및 제2 비휘발성 메모리 인터페이스는 각각 예를 들어, PATA(Parallel Advanced Technology Attachment), SCSI(Small Computer System Interface), SAS(Serial Attached SCSI), SATA(Serial Advanced Technology Attachment) 및 PCIe(PCI Express) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 제1 휘발성 메모리 인터페이스 및 제2 휘발성 메모리 인터페이스는 각각 예를 들어, SDR(Single Data Rate), DDR(Double Data Rate), QDR(Quad Data Rate), 및 XDR(eXtreme Data Rate, Octal Data Rate) 중 적어 도 하나일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 컨트롤 인터페이스는 CPU와 뉴럴 코어 SoC 사이의 제어 신호를 전달하기 위한 인터페이스일 수 있 다. 컨트롤 인터페이스는 CPU의 커맨드를 전송하고, 이에 대한 뉴럴 코어 SoC의 응답을 전송할 수 있다. 컨트롤 인터페이스는 예를 들어, PCIe(PCI Express)일 수 있으나, 이에 제한되는 것은 아니다. 도 11는 도 10의 뉴럴 코어 SoC를 세부적으로 설명하기 위한 블록도이다. 도 10 및 도 11을 참조하면, 뉴럴 코 어 SoC는 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA(Direct Memory Access), 비 휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤러, 메인 코어, 시큐리티 코어 및 글로 벌 인터커넥션을 포함할 수 있다. 뉴럴 프로세서는 연산 작업을 직접 수행하는 연산 유닛일 수 있다. 뉴럴 프로세서가 복수인 경우 연산 작업은 각각의 뉴럴 프로세서로 할당될 수 있다. 각각의 뉴럴 프로세서는 글로벌 인터커넥션 을 통해서 서로 연결될 수 있다. 공유 메모리는 여러 뉴럴 프로세서에 의해서 공유되는 메모리일 수 있다. 공유 메모리는 각 각의 뉴럴 프로세서의 데이터를 저장할 수 있다. 또한, 공유 메모리는 오프 칩 메모리로부터 데이터를 수신하여 일시적으로 저장하고 각각의 뉴럴 프로세서로 전달할 수 있다. 반대로, 공유 메모리 는 뉴럴 프로세서로부터 데이터를 수신하여 일시적으로 저장하고 도 10의 오프 칩 메모리로 전 달할 수도 있다. 공유 메모리는 상대적으로 속도가 빠른 메모리가 필요할 수 있다. 이에 따라서, 공유 메모리는 예 를 들어, SRAM을 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 즉, 공유 메모리는 DRAM 을 포함할 수도 있다. 공유 메모리는 SoC 레벨 즉, L2(level 2)에 해당하는 메모리일 수 있다. 따라서, 공유 메모리는 L2 공유 메모리라 정의할 수도 있다. DMA는 CPU 또는 뉴럴 프로세서가 데이터의 입출력을 제어할 필요없이 직접 데이터의 이동을 제 어할 수 있다. 이에 따라서, DMA가 메모리 사이의 데이터 이동을 제어하여 CPU 또는 뉴럴 프로세서 의 인터럽트의 횟수를 최소화시킬 수 있다. DMA는 공유 메모리와 오프 칩 메모리 사이의 데이터 이동을 제어할 수 있다. DMA의 권한 을 통해서 비휘발성 메모리 컨트롤러 및 휘발성 메모리 컨트롤러가 데이터를 이동을 수행할 수 있 다. 비휘발성 메모리 컨트롤러는 비휘발성 메모리에 리드(read) 또는 라이트(write) 작업을 제어할 수 있 다. 비휘발성 메모리 컨트롤러는 제1 비휘발성 메모리 인터페이스를 통해서 비휘발성 메모리를 제어할 수 있다. 휘발성 메모리 컨트롤러는 휘발성 메모리에 리드 또는 라이트 작업을 제어할 수 있다. 또한, 휘발성 메모리 컨트롤러는 휘발성 메모리의 리프레쉬 작업을 수행할 수 있다. 휘발성 메모리 컨트롤러 는 제1 휘발성 메모리 인터페이스를 통해서 휘발성 메모리를 제어할 수 있다.메인 코어는 컨트롤 인터페이스와 연결될 수 있다. 메인 코어는 컨트롤 인터페이스를 통해 서 CPU로부터 제어 신호를 수신할 수 있다. 메인 코어는 CPU로부터 받은 제어 신호를 통해서 태 스크를 생성하고, 이를 각각의 뉴럴 프로세서로 전달할 수 있다. 또한, 메인 코어는 각각의 뉴럴 프로세서로부터 태스크에 대한 완료 리포트를 수신할 수 있다. 메인 코어는 커맨드 프로세서 (command processor)라고 명명될 수도 있다. 글로벌 인터커넥션은 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모 리 컨트롤러, 메인 코어 및 휘발성 메모리 컨트롤러를 서로 연결할 수 있다. 또한, 외부 인 터페이스도 글로벌 인터커넥션에 연결될 수 있다. 글로벌 인터커넥션은 적어도 하나의 뉴럴 프 로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤러 , 메인 코어 및 외부 인터페이스 사이의 데이터가 이동하는 경로일 수 있다. 글로벌 인터커넥션은 데이터뿐만 아니라 제어 신호 및 동기화를 위한 신호를 전송할 수 있다. 시큐리티 코어는 무결성 체크를 수행하기 위한 장치일 수 있다. 도 11의 메인 코어 및 시큐리티 코 어는 각각 도 1의 메인 코어 및 시큐리티 코어에 대응될 수 있다. 도 12는 도 11의 글로벌 인터커넥션을 세부적으로 설명하기 위한 구조도이다. 도 12를 참조하면, 글로벌 인터 커넥션은 데이터 채널, 컨트롤 채널 및 L2 싱크 채널을 포함할 수 있다. 데이터 채널은 데이터를 전송하는 전용 채널일 수 있다. 데이터 채널을 통해서 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤러 및 외부 인터페이스가 서로 데이터를 교환할 수 있다. 컨트롤 채널은 제어 신호를 전송하는 전용 채널일 수 있다. 컨트롤 채널을 통해서 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤 러, 메인 코어 및 외부 인터페이스가 서로 제어 신호를 교환할 수 있다. 특히, 메인 코어(700 0)는 각각의 뉴럴 프로세서로 여러가지 제어 신호를 전달할 수 있다. L2 싱크 채널은 동기화 신호를 전송하는 전용 채널일 수 있다. L2 싱크 채널을 통해서 적어도 하나 의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트 롤러, 메인 코어 및 외부 인터페이스가 서로 동기화 신호를 교환할 수 있다. L2 싱크 채널은 글로벌 인터커넥션 내부에 전용 채널로 설정되어 다른 채널과 겹치지 않고 동기화 신호를 빠르게 전송할 수 있다. 이에 따라서, 본 발명의 일부 실시예에 따른 뉴럴 프로세싱 장치는 새로운 와이 어링 작업이 필요하지 않고 기존에 사용되는 글로벌 인터커넥션을 이용하여 동기화 작업을 원활하게 진행 할 수 있다. 도 13은 본 개시의 일 실시예에 따른 런타임 무결성 체크 방법의 예시를 나타내는 흐름도이다. 일 실시 예에 따르면, 방법은 적어도 하나의 프로세서를 포함하는 시큐리티 코어에 의해 수행될 수 있다. 시큐리티 코어는 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 시큐리티 코어에서 접근 가능한 암호화 키 매니저에 의해 관리되는 제1 암호화 키를 기초로 생성된 제1 출력 값을 제1 데이터와 연관시켜 휘발성 메모리인 메인 메모리에 저장할 수 있다(S1310). 일 실시예에 따르면, 암호화 키를 관리하는 암호화 키 매니저는 시큐리 티 코어에서만 접근 가능할 수 있으며, 시큐리티 코어를 제외한 시스템 내부의 다른 구성 또는 시스템 외부에서 는 접근이 불가할 수 있다. 메인 메모리에 저장된 제1 데이터는 무결성 체크의 대상이 될 수 있다. 일 실시예에 따르면, 메인 메모리에 저 장된 데이터 중 무결성 체크의 대상이 되는 제1 데이터는 자주 업데이트되지 않으며, 주로 재사용되는 데이터 (즉, read-only 특성을 가진 데이터)일 수 있다. 예를 들어, 제1 데이터는, 펌웨어(Firmware), 페이지 테이블 또는 학습된 기계학습 모델의 파라미터(예를 들어, 학습된 뉴럴 네트워크의 커널 데이터) 중 적어도 하나와 연 관된 데이터일 수 있다. 메인 메모리에 저장된 제1 데이터의 출처는 다양할 수 있다. 예를 들어, 제1 데이터는 시큐리티 코어에서 접근 가능한 비휘발성 메모리로부터 로드되거나, 메인 코어에 의해 처리된 데이터이거나, 호스트 장치에 의해 수신된 데이터일 수 있다. 일 실시예에서, 제1 데이터가 시큐리티 코어에서 접근 가능한 비휘발성 메모리로부터 로드 되는 경우 또는 제1 데이터가 호스트 장치에서 수신되는 경우, 시큐리티 코어는 먼저 제1 데이터의 무결성 체크를 수행한 뒤, 제1 데이터를 메인 메모리에 저장할 수 있다. 예를 들어, 제1 데이터가 비휘발성 메모리로부터 로드되는 경우, 시큐리티 코어는 단방향 암호화 알고리즘을 이 용하여, 비휘발성 메모리에 저장된 제1 데이터 및 제1 암호화 키를 기초로, 제4 출력 값을 생성할 수 있다. 그 런 다음, 비휘발성 메모리에 제1 데이터와 연관되어 저장된 제1 출력 값을 생성된 제4 출력 값과 비교함으로써, 비휘발성 메모리에 저장된 제1 데이터의 변조 여부를 체크할 수 있다. 변조 여부의 체크 결과, 비휘발성 메모 리에 저장된 제1 데이터가 변조되지 않았다고 판단되는 경우에만, 시큐리티 코어는 제1 데이터 및 제1 출력 값 을 연관시켜 메인 메모리에 저장할 수 있다. 대안적으로, 시큐리티 코어는 비휘발성 메모리에 저장된 출력 값과 연관된 암호화 키를 새로운 암호화 키로 변 경하고, 출력 값을 재생성하여 메인 메모리에 저장할 수 있다. 예를 들어, 비휘발성 메모리에는 제1 데이터 및 암호화 키 매니저에 의해 관리되는 제3 암호화 키를 기초로 생성된 출력 값이 제1 데이터와 연관되어 저장되어 있을 수 있다. 시큐리티 코어는 비휘발성 메모리에 저장된 제1 데이터 및 제3 암호화 키를 기초로, 제5 출력 값을 생성할 수 있다. 그런 다음, 시큐리티 코어는 비휘발성 메모리에 제1 데이터와 연관되어 저장된 제6 출력 값을 생성된 제5 출력 값과 비교함으로써, 비휘발성 메모리에 저장된 제1 데이터의 변조 여부를 체크할 수 있다. 비휘발성 메모리에 저장된 제1 데이터가 변조되지 않았다고 판단되는 경우, 시큐리티 코어는 제1 암호화 키를 제1 데이터에 대한 새로운 암호화 키로 결정하고, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제1 암호화 키를 기초로 제1 데이터에 대한 제1 출력 값을 생성할 수 있다. 그런 다음, 시큐리티 코어는 제1 출력 값을 제1 데이터와 연관시켜 메인 메모리에 저장할 수 있다. 다른 예로, 제1 데이터는 호스트 장치로부터 수신될 수 있다. 일 실시예에서, 호스트 장치로부터 제1 데이터만 수신한 경우, 시큐리티 코어는 사전 무결성 체크 과정 없이, 메인 메모리에 제1 데이터를 제1 출력 값과 연관시 켜 저장할 수 있다. 이와 달리, 호스트 장치로부터 제1 데이터와 출력 값을 함께 수신할 수도 있다. 이는 사 전에 호스트 장치로 별도의 보안 채널을 통해 암호화 키를 전송한 상태임을 전제한다. 구체적 예로, 시큐리티 코어는 사전에 제1 암호화 키를 별도의 보안 채널을 통해 호스트 장치로 전송할 수 있다. 그런 다음, 시큐리티 코어는 호스트 장치로부터 제1 데이터 및 제1 출력 값을 수신할 수 있다. 이 경우, 시큐리티 코어는 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제1 암호화 키를 기초로, 제7 출력 값을 생성하고, 수신된 제1 출력 값과 생성된 제7 출력 값을 비교함으로써, 수신된 제1 데이터의 변조 여부를 체크할 수 있다. 수신된 제1 데이터가 변조되지 않았다고 판단되는 경우, 시큐리티 코어는 제1 데이터 및 제1 출력 값을 연관시켜 메인 메모리에 저장할 수 있다. 대안적으로, 시큐리티 코어는 암호화 키를 호스트 장치로 전송한 암호화 키와 상이한 키로 변경하고, 출력 값을 재생성하여 메인 메모리에 저장할 수 있다. 예를 들어, 시큐리티 코어는 사전에 호스트 장치로 별도의 보안 채 널을 통해 암호화 키 매니저에 의해 관리되는 제4 암호화 키를 전송할 수 있다. 그런 다음, 시큐리티 코어는 호스트 장치로부터 제1 데이터 및 제1 데이터와 연관된 제8 출력 값을 수신할 수 있다. 이 경우, 시큐리티 코 어는 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제4 암호화 키를 기초로, 제9 출력 값을 생성하고, 수 신된 제8 출력 값과 생성된 제9 출력 값을 비교함으로써, 수신된 제1 데이터의 변조 여부를 체크할 수 있다. 시큐리티 코어는 수신된 제1 데이터가 변조되지 않았다고 판단되는 경우, 제1 암호화 키를 제1 데이터에 대한 새로운 암호화 키로 결정하고, 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 제1 암호화 키를 기초로 제1 데이터에 대한 제1 출력 값을 생성할 수 있다. 그런 다음, 시큐리티 코어는 제1 출력 값을 제1 데이터와 연관 시켜 메인 메모리에 저장할 수 있다. 시큐리티 코어는 메인 메모리에 저장된 제1 데이터에 대해 런타임 무결성 체크를 주기적으로 또는 비주기적으로 수행할 수 있다. 이를 위해 먼저, 시큐리티 코어는 단방향 암호화 알고리즘을 이용하여, 메인 메모리에 저장된 제1 데이터 및 제1 암호화 키를 기초로 제1 데이터에 대한 제2 출력 값을 생성할 수 있다(S1320). 그런 다음, 시큐리티 코어는 제1 출력 값과 생성된 제2 출력 값을 비교함으로써, 메인 메모리에 저장된 제1 데이터의 변조 여부를 체크할 수 있다(S1330). 변조 여부 체크 결과, 제1 출력 값과 제2 출력 값이 일치하지 않는 경우, 메인 메모리에 저장된 제1 데이터는 변조된 것으로 판단될 수 있으며, 이후 시큐리티 코어는 도 7 및 도 8을 참조하여 전술한 시스템 보호 과정 및 리커버리 과정을 수행할 수 있다. 일 실시예에 따르면, 동일한 키를 지속적으로 사용함에 따른 보안 취약화를 방지하기 위해, 시큐리티 코어는 주 기적으로 암호화 키를 변경하여 출력 값을 재생성하여 저장할 수 있다. 예를 들어, 시큐리티 코어는 단방향 암호화 알고리즘을 이용하여, 제1 데이터 및 암호화 키 매니저에 의해 관리되는 제2 암호화 키를 기초로 제3 출력 값을 생성할 수 있으며, 제3 출력 값을 제1 데이터와 연관시켜 메인 메모리에 저장할 수 있다. 상술한 방법은 컴퓨터에서 실행하기 위해 컴퓨터 판독 가능한 기록매체에 저장된 컴퓨터 프로그램으로 제공될 수 있다. 매체는 컴퓨터로 실행 가능한 프로그램을 계속 저장하거나, 실행 또는 다운로드를 위해 임시 저장하 는 것일수도 있다. 또한, 매체는 단일 또는 수개 하드웨어가 결합된 형태의 다양한 기록 수단 또는 저장수단일 수 있는데, 어떤 컴퓨터 시스템에 직접 접속되는 매체에 한정되지 않고, 네트워크 상에 분산 존재하는 것일 수 도 있다. 매체의 예시로는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD-ROM 및 DVD 와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto optical medium), 및 ROM, RAM, 플래시 메모리 등을 포함하여 프로그램 명령어가 저장되도록 구성된 것이 있을 수 있다. 또한, 다른 매체 의 예시로, 애플리케이션을 유통하는 앱 스토어나 기타 다양한 소프트웨어를 공급 내지 유통하는 사이트, 서버 등에서 관리하는 기록매체 내지 저장매체도 들 수 있다. 본 개시의 방법, 동작 또는 기법들은 다양한 수단에 의해 구현될 수도 있다. 예를 들어, 이러한 기법들은 하드 웨어, 펌웨어, 소프트웨어, 또는 이들의 조합으로 구현될 수도 있다. 본원의 개시와 연계하여 설명된 다양한 예시적인 논리적 블록들, 모듈들, 회로들, 및 알고리즘 단계들은 전자 하드웨어, 컴퓨터 소프트웨어, 또는 양자 의 조합들로 구현될 수도 있음을 통상의 기술자들은 이해할 것이다. 하드웨어 및 소프트웨어의 이러한 상호 대 체를 명확하게 설명하기 위해, 다양한 예시적인 구성요소들, 블록들, 모듈들, 회로들, 및 단계들이 그들의 기능 적 관점에서 일반적으로 위에서 설명되었다. 그러한 기능이 하드웨어로서 구현되는지 또는 소프트웨어로서 구 현되는 지의 여부는, 특정 애플리케이션 및 전체 시스템에 부과되는 설계 요구사항들에 따라 달라진다. 통상의 기술자들은 각각의 특정 애플리케이션을 위해 다양한 방식들로 설명된 기능을 구현할 수도 있으나, 그러한 구현 들은 본 개시의 범위로부터 벗어나게 하는 것으로 해석되어서는 안된다. 하드웨어 구현에서, 기법들을 수행하는 데 이용되는 프로세싱 유닛들은, 하나 이상의 ASIC들, DSP들, 디지털 신 호 프로세싱 디바이스들(digital signal processing devices; DSPD들), 프로그램가능 논리 디바이스들 (programmable logic devices; PLD들), 필드 프로그램가능 게이트 어레이들(field programmable gate arrays; FPGA들), 프로세서들, 제어기들, 마이크로제어기들, 마이크로프로세서들, 전자 디바이스들, 본 개시에 설명된 기능들을 수행하도록 설계된 다른 전자 유닛들, 컴퓨터, 또는 이들의 조합 내에서 구현될 수도 있다. 따라서, 본 개시와 연계하여 설명된 다양한 예시적인 논리 블록들, 모듈들, 및 회로들은 범용 프로세서, DSP, ASIC, FPGA나 다른 프로그램 가능 논리 디바이스, 이산 게이트나 트랜지스터 로직, 이산 하드웨어 컴포넌트들, 또는 본원에 설명된 기능들을 수행하도록 설계된 것들의 임의의 조합으로 구현되거나 수행될 수도 있다. 범용 프로세서는 마이크로프로세서일 수도 있지만, 대안으로, 프로세서는 임의의 종래의 프로세서, 제어기, 마이크로 제어기, 또는 상태 머신일 수도 있다. 프로세서는 또한, 컴퓨팅 디바이스들의 조합, 예를 들면, DSP와 마이크 로프로세서, 복수의 마이크로프로세서들, DSP 코어와 연계한 하나 이상의 마이크로프로세서들, 또는 임의의 다 른 구성의 조합으로서 구현될 수도 있다. 펌웨어 및/또는 소프트웨어 구현에 있어서, 기법들은 랜덤 액세스 메모리(random access memory; RAM), 판독 전 용 메모리(read-only memory; ROM), 비휘발성 RAM(non-volatile random access memory; NVRAM), PROM(programmable read-only memory), EPROM(erasable programmable read-only memory), EEPROM(electrically erasable PROM), 플래시 메모리, 컴팩트 디스크(compact disc; CD), 자기 또는 광학 데이 터 스토리지 디바이스 등과 같은 컴퓨터 판독가능 매체 상에 저장된 명령들로서 구현될 수도 있다. 명령들은 하나 이상의 프로세서들에 의해 실행 가능할 수도 있고, 프로세서(들)로 하여금 본 개시에 설명된 기능의 특정 양태들을 수행하게 할 수도 있다. 소프트웨어로 구현되는 경우, 상기 기법들은 하나 이상의 명령들 또는 코드로서 컴퓨터 판독 가능한 매체 상에 저장되거나 또는 컴퓨터 판독 가능한 매체를 통해 전송될 수도 있다. 컴퓨터 판독가능 매체들은 한 장소에서 다른 장소로 컴퓨터 프로그램의 전송을 용이하게 하는 임의의 매체를 포함하여 컴퓨터 저장 매체들 및 통신 매 체들 양자를 포함한다. 저장 매체들은 컴퓨터에 의해 액세스될 수 있는 임의의 이용 가능한 매체들일 수도 있 다. 비제한적인 예로서, 이러한 컴퓨터 판독가능 매체는 RAM, ROM, EEPROM, CD-ROM 또는 다른 광학 디스크 스 토리지, 자기 디스크 스토리지 또는 다른 자기 스토리지 디바이스들, 또는 소망의 프로그램 코드를 명령들 또는 데이터 구조들의 형태로 이송 또는 저장하기 위해 사용될 수 있으며 컴퓨터에 의해 액세스될 수 있는 임의의 다 른 매체를 포함할 수 있다. 또한, 임의의 접속이 컴퓨터 판독가능 매체로 적절히 칭해진다. 예를 들어, 소프트웨어가 동축 케이블, 광섬유 케이블, 연선, 디지털 가입자 회선 (DSL), 또는 적외선, 무선, 및 마이크로파와 같은 무선 기술들을 사용하여 웹사이트, 서버, 또는 다른 원격 소스로부터 전송되면, 동축 케 이블, 광섬유 케이블, 연선, 디지털 가입자 회선, 또는 적외선, 무선, 및 마이크로파와 같은 무선 기술들은 매 체의 정의 내에 포함된다. 본원에서 사용된 디스크(disk) 와 디스크(disc)는, CD, 레이저 디스크, 광 디스크, DVD(digital versatile disc), 플로피디스크, 및 블루레이 디스크를 포함하며, 여기서 디스크들(disks)은 보통 자기적으로 데이터를 재생하고, 반면 디스크들(discs) 은 레이저를 이용하여 광학적으로 데이터를 재생한다. 위의 조합들도 컴퓨터 판독가능 매체들의 범위 내에 포함되어야 한다. 소프트웨어 모듈은, RAM 메모리, 플래시 메모리, ROM 메모리, EPROM 메모리, EEPROM 메모리, 레지스터들, 하드 디스크, 이동식 디스크, CD-ROM, 또는 공지된 임의의 다른 형태의 저장 매체 내에 상주할 수도 있다. 예시적인 저장 매체는, 프로세가 저장 매체로부터 정보를 판독하거나 저장 매체에 정보를 기록할 수 있도록, 프로세서에 연결될 수 있다. 대안으로, 저장 매체는 프로세서에 통합될 수도 있다. 프로세서와 저장 매체는 ASIC 내에 존 재할 수도 있다. ASIC은 유저 단말 내에 존재할 수도 있다. 대안으로, 프로세서와 저장 매체는 유저 단말에서 개별 구성요소들로서 존재할 수도 있다. 이상 설명된 실시예들이 하나 이상의 독립형 컴퓨터 시스템에서 현재 개시된 주제의 양태들을 활용하는 것으로 기술되었으나, 본 개시는 이에 한정되지 않고, 네트워크나 분산 컴퓨팅 환경과 같은 임의의 컴퓨팅 환경과 연계 하여 구현될 수도 있다. 또 나아가, 본 개시에서 주제의 양상들은 복수의 프로세싱 칩들이나 장치들에서 구현 될 수도 있고, 스토리지는 복수의 장치들에 걸쳐 유사하게 영향을 받게 될 수도 있다. 이러한 장치들은 PC들, 네트워크 서버들, 및 휴대용 장치들을 포함할 수도 있다."}
{"patent_id": "10-2023-0013954", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "본 명세서에서는 본 개시가 일부 실시예들과 관련하여 설명되었지만, 본 개시의 발명이 속하는 기술분야의 통상 의 기술자가 이해할 수 있는 본 개시의 범위를 벗어나지 않는 범위에서 다양한 변형 및 변경이 이루어질 수 있 다. 또한, 그러한 변형 및 변경은 본 명세서에 첨부된 특허청구의 범위 내에 속하는 것으로 생각되어야 한다."}
{"patent_id": "10-2023-0013954", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 개시의 실시예들은, 이하 설명하는 첨부 도면들을 참조하여 설명될 것이며, 여기서 유사한 참조 번호는 유사 한 요소들을 나타내지만, 이에 한정되지는 않는다. 도 1은 본 개시의 일 실시예에 따른 컴퓨팅 시스템의 예시를 나타내는 블록도이다. 도 2는 본 개시의 일 실시예에 따른 시큐리티 코어의 구성의 예시를 나타내는 블록도이다. 도 3은 본 개시의 일 실시예에 따른 런타임 무결성 체크 방법의 예시를 나타내는 도면이다. 도 4a는 본 개시의 일 실시예에 따라 비휘발성 메모리에 저장된 데이터가 메인 메모리에 저장되는 과정의 예시 를 나타내는 도면이다. 도 4b는 본 개시의 일 실시예에 따라 비휘발성 메모리에 저장된 데이터가 메인 메모리에 저장되는 과정의 예시 를 나타내는 도면이다. 도 5는 본 개시의 일 실시예에 따라 메인 코어에 의해 처리된 데이터가 메인 메모리에 저장되는 과정의 예시를 나타내는 도면이다. 도 6은 본 개시의 일 실시예에 따라 호스트 장치로부터 수신된 데이터가 메인 메모리에 저장되는 과정의 예시를 나타내는 도면이다. 도 7은 본 개시의 일 실시예에 따른 시스템 보호 과정의 예시를 나타내는 도면이다. 도 8은 본 개시의 일 실시예에 따른 리커버리 과정의 예시를 나타내는 도면이다. 도 9는 본 개시의 일부 실시예들에 따른 뉴럴 프로세싱 시스템을 설명하기 위한 블록도이다. 도 10은 도 9의 뉴럴 프로세싱 장치를 세부적으로 설명하기 위한 블록도이다. 도 11은 도 10의 뉴럴 코어 SoC를 세부적으로 설명하기 위한 블록도이다. 도 12는 도 11의 글로벌 인터커넥션을 세부적으로 설명하기 위한 구조도이다. 도 13은 본 개시의 일 실시예에 따른 런타임 무결성 체크 방법의 예시를 나타내는 흐름도이다."}
