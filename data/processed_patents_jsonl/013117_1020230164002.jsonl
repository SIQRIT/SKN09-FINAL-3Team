{"patent_id": "10-2023-0164002", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0038564", "출원번호": "10-2023-0164002", "발명의 명칭": "인코더 및 디코더를 포함하는 신경망 모델을 제공하기 위한 방법 및 디바이스", "출원인": "주식회사 노타", "발명자": "염슬기"}}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "복수의 인코더 레이어(encoder layer)들을 포함하는 인코더 신경망, 및 복수의 디코더 레이어(decoder layer)들을 포함하는 디코더 신경망을 포함하는 신경망 모델(neural network model)을 구현(implement)하여 입력 데이터를 처리하기 위한 방법으로서,상기 입력 데이터를 수신하는 단계;상기 수신된 입력 데이터에 기초하여, 상기 인코더 신경망에 의해, 상기 인코더 레이어들 각각으로부터의 인코딩 피쳐(feature)들을 생성하는 단계 - 하나의 인코더 레이어로부터 하나의 인코딩 피쳐가 생성됨 -; 및상기 인코딩 피쳐들에 기초하여, 상기 디코더 신경망에 의해, 상기 디코더 레이어들 각각으로부터의 디코딩 피쳐들을 생성하는 단계 - 하나의 디코더 레이어로부터 하나의 디코딩 피쳐가 생성됨 -;를 포함하며, 그리고상기 디코더 레이어들 중 최초(initial) 디코더 레이어로부터의 최초 디코딩 피쳐는, 상기 인코딩 피쳐들이 통합된(incorporated) 인코딩 통합 결과 및 상기 인코더 레이어들 중 마지막 인코더 레이어에 의해 생성되는 마지막 인코딩 피쳐를 이용하여 생성되는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 신경망 모델은 후처리 모듈(post processing module)을 더 포함하고,상기 방법은, 상기 후처리 모듈에 의해, 연접 연산(concatenation operation)을 이용하여 상기 디코딩 피쳐들을 처리함으로써상기 입력 데이터에 대한 처리 결과를 포함하는 출력 데이터를 생성하는 단계;를 더 포함하는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 신경망 모델은 후처리 모듈을 더 포함하고,상기 방법은 상기 후처리 모듈에 의해:상기 디코더 레이어들 중 마지막(last) 디코더 레이어를 제외한 나머지 디코더 레이어들 각각으로부터 생성되는디코딩 피쳐들을 업샘플링(upsampling)하는 단계; 및상기 업샘플링된 디코딩 피쳐들 및 상기 마지막 디코더 레이어로부터 생성된 마지막 디코딩 피쳐를 이용하여,상기 입력 데이터에 대한 처리 결과를 포함하는 출력 데이터를 생성하는 단계;를 더 포함하는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,공개특허 10-2025-0038564-3-상기 디코더 신경망 내에서 직렬 연결을 통해 연결되는 상기 디코더 레이어들 중에서 이전(previous) 디코더 레이어에 의해 생성되는 이전 디코딩 피쳐는, 업샘플링 없이 다음(next) 디코더 레이어로 전달되는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 신경망 모델은 상기 디코딩 피쳐들에 기초하여, 상기 입력 데이터에 대한 처리 결과를 포함하는 출력 데이터를 생성하는 후처리 모듈을 더 포함하고, 그리고상기 디코더 레이어들 중 제 1 디코더 레이어에 의해 생성되는 제 1 디코딩 피쳐는, 상기 제 1 디코더 레이어와직렬 연결을 통해 연결되는 제 2 디코더 레이어 및 상기 후처리 모듈로 양방향으로 전달되는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 최초 디코딩 피쳐는, 상기 마지막 인코딩 피쳐가 쿼리(query)로 사용되고 그리고 상기 인코딩 통합 결과가 키(key)와 값(value)으로사용되는 혼합 어텐션 알고리즘(mix-attention algorithm)을 이용하여 생성되는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 1 항에 있어서,상기 인코딩 통합 결과는, 적어도 일부가 변경되면서 이전(previous) 디코더 레이어로부터 다음(next) 디코더레이어로 순차적으로 전달되며, 그리고상기 이전 디코더 레이어로부터 상기 다음 디코더 레이어로 상기 인코딩 통합 결과가 전달될 때, 상기 이전 디코더 레이어와 측면 연결을 통해 연결되는 측면 인코더 레이어에 의해 생성된 측면 인코딩 피쳐가 상기 인코딩통합 결과로부터 제외되고 그리고 상기 이전 디코더 레이어에 의해 생성된 이전 디코딩 피쳐가 상기 인코딩 통합 결과에 추가되는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1 항에 있어서,상기 디코더 레이어들 중 마지막 디코더 레이어로부터의 마지막 디코딩 피쳐는,상기 마지막 디코더 레이어의 선행(precedent) 디코더 레이어들 각각으로부터 생성되는 선행 디코딩 피쳐들 및상기 인코더 레이어들 중 최초 인코더 레이어에 의해 생성되는 최초 인코딩 피쳐에 기초하여 생성되는, 방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8 항에 있어서,상기 마지막 디코딩 피쳐는 혼합 어텐션 알고리즘을 이용하여 생성되며,상기 혼합 어텐션 알고리즘은,상기 최초 인코딩 피쳐를 쿼리로서 사용하고 그리고 상기 최초 인코딩 피쳐와 상기 선행 디코딩 피쳐들이 통합된 디코딩 통합 결과를 키와 값으로서 사용하는,공개특허 10-2025-0038564-4-방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 1 항에 있어서,상기 디코딩 피쳐들 각각은, 혼합 어텐션 알고리즘을 이용하여 생성되며, 그리고상기 혼합 어텐션 알고리즘은, 복수의 소스(source)들 각각로부터 획득된 피쳐들이 통합된(integrated) 통합 결과를 키(key)와 값(value)으로서 사용하고, 그리고 단일(single) 소스로부터 획득된 피쳐를 쿼리(query)로서 사용하는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 1 항에 있어서,상기 디코딩 피쳐들 각각은, 혼합 어텐션 알고리즘을 이용하여 생성되며, 그리고상기 혼합 어텐션 알고리즘은, 상기 신경망 모델 내에서 서로 상이한 계층(hierarchy)의 복수의 레이어들로부터의 피쳐들을 이용하여 상기 디코딩 피쳐들 각각을 생성하는 어텐션 알고리즘인,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 1 항에 있어서,상기 디코딩 피쳐들 각각은, 혼합 어텐션 알고리즘을 이용하여 생성되며, 그리고상기 혼합 어텐션 알고리즘은, 상기 인코딩 피쳐들이 통합된 인코딩 통합 결과 내에서, 이전(previous) 디코더레이어에 의해 생성되는 이전 디코딩 피쳐와 대응되는 크기를 가지는 인코딩 피쳐를 상기 이전 디코딩 피쳐로대체하는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 1 항에 있어서,상기 디코더 레이어들 중 제 2 디코더 레이어는 혼합 어텐션 알고리즘을 이용하여 제 2 디코딩 피쳐를생성하며, 그리고상기 혼합 어텐션 알고리즘은:상기 디코더 신경망에서 상기 제 2 디코더 레이어와 직렬 연결을 통해 연결되는 제 1 디코더 레이어에 의해 생성되는 제 1 디코딩 피쳐; 및 상기 인코더 신경망에서 상기 제 2 디코더 레이어와 측면 연결을 통해 연결되는 제 2 측면 인코더 레이어로부터생성되는 제 2 측면 인코딩 피쳐;를 사용하는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 1 항에 있어서,상기 디코더 레이어들 중 제 2 디코더 레이어는 혼합 어텐션 알고리즘을 이용하여 제 2 디코딩 피쳐를생성하며, 그리고상기 혼합 어텐션 알고리즘은:공개특허 10-2025-0038564-5-상기 제 2 디코더 레이어의 하나 이상의 선행 디코더 레이어들 각각으로부터 생성되는 선행 디코딩 피쳐들을 포함하는 제 2 디코딩 통합 결과; 및 상기 제 2 디코더 레이어와 측면 연결을 통해 연결되는 제 2 측면 인코더 레이어로부터 생성되는 제 2 측면 인코딩 피쳐;를 사용하는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 14 항에 있어서,상기 제 2 측면 인코딩 피쳐가 상기 혼합 어텐션 알고리즘의 쿼리로 사용되며 그리고 상기 제 2 디코딩 통합 결과에 기초하여 상기 혼합 어텐션 알고리즘의 키와 값이 결정되는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 14 항에 있어서,상기 제 2 디코딩 통합 결과는,상기 인코딩 피쳐들 중 일부를 상기 선행 디코딩 피쳐들로 대체함으로써 생성되는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 14 항에 있어서,상기 제 2 디코딩 통합 결과는,상기 선행 디코더 레이어들 중에서 제 1 디코더 레이어로부터 생성되는 제 1 디코딩 피쳐로, 상기 제 1 디코더레이어와 측면 연결을 통해 연결되는 제 1 측면 인코더 레이어로부터 생성된 제 1 측면 인코딩 피쳐를 대체(replace)함으로써 생성되는,방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 1 항에 있어서,상기 디코더 신경망의 상기 디코더 레이어들은,이전 디코더 레이어로 입력된 이전 인코딩 피쳐를 상기 인코딩 피쳐들이 통합된 인코딩 통합 결과로부터 제외시키고 그리고 상기 제외된 이전 인코딩 피쳐를 상기 이전 디코더 레이어로부터 생성된 이전 디코딩 피쳐로 대체(replace)시키는 누적적인(cumulative) 방식을 이용하는, 방법."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "적어도 하나의 프로세서, 및 명령(instructions)을 포함하는 메모리를 포함하는 컴퓨팅 디바이스로서, 상기 명령들은 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 적어도 하나의 프로세서로 하여금 신경망 모델을 구현(implement)하여 입력 데이터를 처리하도록 하며, 상기 신경망 모델은, 복수의 인코더 레이어들을 포함하는 인코더 신경망 및 복수의 디코더 레이어들을 포함하는디코더 신경망을 포함하며,상기 인코더 신경망은, 수신된 입력 데이터에 기초하여, 상기 인코더 레이어들 각각으로부터의 인코딩 피쳐들을생성하고 - 하나의 인코더 레이어로부터 하나의 인코딩 피쳐가 생성됨 -,공개특허 10-2025-0038564-6-상기 디코더 신경망은, 상기 인코딩 피쳐들에 기초하여, 상기 디코더 레이어들 각각으로부터의 디코딩 피쳐들을생성하고 - 하나의 디코더 레이어로부터 하나의 디코딩 피쳐가 생성됨 -, 그리고상기 디코더 레이어들 중 최초(initial) 디코더 레이어로부터의 최초 디코딩 피쳐는, 상기 인코딩 피쳐들이 통합된(incorporated) 인코딩 통합 결과 및 상기 인코더 레이어들 중 마지막 인코더 레이어에 의해 생성되는 마지막 인코딩 피쳐를 이용하여 생성되는,컴퓨팅 디바이스."}
{"patent_id": "10-2023-0164002", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램으로서, 상기 컴퓨터 프로그램은 적어도 하나의 프로세서에 의해 실행 시, 상기 적어도 하나의 프로세서로 하여금 신경망 모델을 구현(implement)하여 입력 데이터를 처리하기 위한 동작들을 수행하도록 하며, 상기 신경망 모델은, 복수의 인코더 레이어들을 포함하는 인코더 신경망 및 복수의 디코더 레이어들을 포함하는디코더 신경망을 포함하며,상기 동작들은:수신된 입력 데이터에 기초하여, 상기 인코더 레이어들 각각으로부터의 인코딩 피쳐들을 생성하는 동작 - 하나의 인코더 레이어로부터 하나의 인코딩 피쳐가 생성됨 -; 및상기 인코딩 피쳐들에 기초하여, 상기 디코더 레이어들 각각으로부터의 디코딩 피쳐들을 생성하는 동작 - 하나의 디코더 레이어로부터 하나의 디코딩 피쳐가 생성됨 -;을 포함하며, 그리고상기 디코더 레이어들 중 최초(initial) 디코더 레이어로부터의 최초 디코딩 피쳐는, 상기 인코딩 피쳐들이 통합된(incorporated) 인코딩 통합 결과 및 상기 인코더 레이어들 중 마지막 인코더 레이어에 의해 생성되는 마지막 인코딩 피쳐를 이용하여 생성되는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "컴퓨팅 디바이스에 의해 수행되는, 복수의 인코더 레이어(encoder layer)들을 포함하는 인코더 신경망, 및 복수 의 디코더 레이어(decoder layer)들을 포함하는 디코더 신경망을 포함하는 신경망 모델(neural network model) 을 구현(implement)하여 입력 데이터를 처리하기 위한 방법이 개시된다. 상기 방법은: 상기 입력 데이터를 수신 (뒷면에 계속)"}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시내용은 인공지능 기술에 관한 것으로 보다 구체적으로 인코더 및 디코더를 포함하는 신경망 모델에 관한 것이다."}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 기술의 발전으로 인해, 다양한 형태의 인공지능 기반의 모델이 개발되고 있다. 이러한 인공지능 기술 의 발전에 따라서 이미지 처리 기술 분야에 대한 새로운 기법들이 제안되고 있다. 예를 들어, 시멘틱 세그멘테 이션(Semantic Segmentation)이란, 이미지를 픽셀별(pixel-wise)로 분류하는 것이다. 이러한 시멘틱 세그멘테이 션은 컨볼루션 신경망(CNN)과 트랜스포머(Transformer)를 이용하여 발전되어 왔다. 컨볼루션 신경망(CNN)은 합성곱(Convolution) 모듈을 이용하여 이미지 내의 패턴을 지역적으로 학습할 수 있다. CNN은 인공지능 기술의 초기 단계에서 시멘틱 세그멘테이션 분야에서의 우수한 성능을 보여줬으나, 광범위한 특 징 및 컨텍스트 정보를 효율적으로 학습할 수 없다는 한계가 존재한다. CNN과 관련된 연구로는 Fully- convolutional network (FCN) (Long et al., CVPR 2015), SegNet (Badrinarayanan et al., TPAMI 2017), DeepLab (Chen et al., TPAMI 2018) 등이 있다. 트랜스포머(Transformer)는 딥러닝 분야에서의 새로운 트렌드로 발돋움하기 시작하였다. 트랜스포머는 구조적으 로 특징을 계층화는 인코더 및 객체를 분류 또는 인식하기 위한 디코더로 구성될 수 있다. 자연어처리 분야에 트랜스포머가 처음 적용된 이래로, 컴퓨터 비전 분야에도 비전 트랜스포머(Vision Transformer)라는 변형 형태 의 새로운 트랜스포머가 개발되었다. 하지만, 트랜스포머는 입력 토큰 간의 관계를 학습하는 과정에서 전역(global) 특징을 효과적으로 학습할 수 있다. 하지만, 최종적인 세그멘테이션이 이뤄지는 후반 단계(즉, 디코더 단계)에서 인코더로부터 정보를 전달받는 과정은, CNN 기반의 디코더를 통해 구현되고 있다. 트랜스포머와 관련 된 연구로는 DETR (Carion et al., ECCV 2020), Segmenter (Strudel et al., ICCV 2021), SETR (Zheng et al., CVPR 2021), SegFormer (Xie et al., NeurIPS 2021), MaskFormer (Cheng et al., NeurIPS 2021), Mask2Former (Cheng et al., CVPR 2022), FeedFormer (Shim et al., AAAI 2023) 등이 있다."}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시내용은 전술한 배경기술에 대응하여 안출된 것으로, U-NET 혼합형 트랜스포머 구조의 신경망 모델을 제 공하기 위함이다. 본 개시내용의 일 실시예는 혼합 어텐션을 이용하는 신경망 모델을 제공하기 위함이다. 본 개시내용의 일 실시예는 우수한 이미지 처리 성능을 가진 인공지능 기반의 신경망 모델을 제공하기 위함이다. 본 개시내용의 기술적 과제들은 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술 적 과제들은 아래의 기재로부터 당업자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시내용의 일 실시예에 따라 컴퓨팅 디바이스에 의해 수행되는, 복수의 인코더 레이어(encoder layer)들을 포함하는 인코더 신경망, 및 복수의 디코더 레이어(decoder layer)들을 포함하는 디코더 신경망을 포함하는 신 경망 모델(neural network model)을 구현(implement)하여 입력 데이터를 처리하기 위한 방법이 개시된다. 상기 방법은: 상기 입력 데이터를 수신하는 단계; 상기 수신된 입력 데이터에 기초하여, 상기 인코더 신경망에 의해, 상기 인코더 레이어들 각각으로부터의 인코딩 피쳐(feature)들을 생성하는 단계 - 하나의 인코더 레이어로부터 하나의 인코딩 피쳐가 생성됨 -; 및 상기 인코딩 피쳐들에 기초하여, 상기 디코더 신경망에 의해, 상기 디코더 레이어들 각각으로부터의 디코딩 피쳐들을 생성하는 단계 - 하나의 디코더 레이어로부터 하나의 디코딩 피쳐가 생성됨 -;를 포할 수 있다. 상기 디코더 레이어들 중 최초(initial) 디코더 레이어로부터의 최초 디코딩 피쳐는, 상기 인코딩 피쳐들이 통합된(incorporated) 인코딩 통합 결과 및 상기 인코더 레이어들 중 마지막 인 코더 레이어에 의해 생성되는 마지막 인코딩 피쳐를 이용하여 생성될 수 있다. 일 실시예에서, 상기 신경망 모델은 후처리 모듈(post processing module)을 더 포함하고, 상기 방법은, 상기 후처리 모듈에 의해, 연접 연산(concatenation operation)을 이용하여 상기 디코딩 피쳐들을 처리함으로써 상기 입력 데이터에 대한 처리 결과를 포함하는 출력 데이터를 생성하는 단계를 더 포함할 수 있다. 일 실시예에서, 상기 신경망 모델은 후처리 모듈을 더 포함하고, 상기 방법은 상기 후처리 모듈에 의해: 상기 디코더 레이어들 중 마지막(last) 디코더 레이어를 제외한 나머지 디코더 레이어들 각각으로부터 생성되는 디코 딩 피쳐들을 업샘플링(upsampling)하는 단계; 및 상기 업샘플링된 디코딩 피쳐들 및 상기 마지막 디코더 레이어 로부터 생성된 마지막 디코딩 피쳐를 이용하여, 상기 입력 데이터에 대한 처리 결과를 포함하는 출력 데이터를 생성하는 단계를 더 포함할 수 있다. 일 실시예에서, 상기 디코더 신경망 내에서 직렬 연결을 통해 연결되는 상기 디코더 레이어들 중에서 이전 (previous) 디코더 레이어에 의해 생성되는 이전 디코딩 피쳐는, 업샘플링 없이 다음(next) 디코더 레이어로 전 달될 수 있다. 일 실시예에서, 상기 신경망 모델은 상기 디코딩 피쳐들에 기초하여, 상기 입력 데이터에 대한 처리 결과를 포 함하는 출력 데이터를 생성하는 후처리 모듈을 더 포함할 수 있다. 그리고 상기 디코더 레이어들 중 제 1 디코 더 레이어에 의해 생성되는 제 1 디코딩 피쳐는, 상기 제 1 디코더 레이어와 직렬 연결을 통해 연결되는 제 2 디코더 레이어 및 상기 후처리 모듈로 양방향으로 전달될 수 있다. 일 실시예에서, 상기 최초 디코딩 피쳐는, 상기 마지막 인코딩 피쳐가 쿼리(query)로 사용되고 그리고 상기 인 코딩 통합 결과가 키(key)와 값(value)으로 사용되는 혼합 어텐션 알고리즘(mix-attention algorithm)을 이용 하여 생성될 수 있다. 일 실시예에서, 상기 인코딩 통합 결과는, 적어도 일부가 변경되면서 이전(previous) 디코더 레이어로부터 다음 (next) 디코더 레이어로 순차적으로 전달될 수 있다. 그리고 상기 이전 디코더 레이어로부터 상기 다음 디코더 레이어로 상기 인코딩 통합 결과가 전달될 때, 상기 이전 디코더 레이어와 측면 연결을 통해 연결되는 측면 인 코더 레이어에 의해 생성된 측면 인코딩 피쳐가 상기 인코딩 통합 결과로부터 제외되고 그리고 상기 이전 디코 더 레이어에 의해 생성된 이전 디코딩 피쳐가 상기 인코딩 통합 결과에 추가될 수 있다. 일 실시예에서, 상기 디코더 레이어들 중 마지막 디코더 레이어로부터의 마지막 디코딩 피쳐는, 상기 마지막 디 코더 레이어의 선행(precedent) 디코더 레이어들 각각으로부터 생성되는 선행 디코딩 피쳐들 및 상기 인코더 레 이어들 중 최초 인코더 레이어에 의해 생성되는 최초 인코딩 피쳐에 기초하여 생성될 수 있다. 일 실시예에서, 상기 마지막 디코딩 피쳐는 혼합 어텐션 알고리즘을 이용하여 생성되며, 상기 혼합 어텐션 알고 리즘은, 상기 최초 인코딩 피쳐를 쿼리로서 사용하고 그리고 상기 최초 인코딩 피쳐와 상기 선행 디코딩 피쳐들 이 통합된 디코딩 통합 결과를 키와 값으로서 사용할 수 있다. 일 실시예에서, 상기 디코딩 피쳐들 각각은, 혼합 어텐션 알고리즘을 이용하여 생성되며, 그리고 상기 혼합 어 텐션 알고리즘은, 복수의 소스(source)들 각각로부터 획득된 피쳐들이 통합된(integrated) 통합 결과를 키(ke y)와 값(value)으로서 사용하고, 그리고 단일(single) 소스로부터 획득된 피쳐를 쿼리(query)로서 사용할 수 있 다. 일 실시예에서, 상기 디코딩 피쳐들 각각은, 혼합 어텐션 알고리즘을 이용하여 생성될 수 있다. 그리고 상기 혼 합 어텐션 알고리즘은, 상기 신경망 모델 내에서 서로 상이한 계층(hierarchy)의 복수의 레이어들로부터의 피쳐 들을 이용하여 상기 디코딩 피쳐들 각각을 생성하는 어텐션 알고리즘이다. 일 실시예에서, 상기 디코딩 피쳐들 각각은, 혼합 어텐션 알고리즘을 이용하여 생성될 수 있다. 상기 혼합 어텐 션 알고리즘은, 상기 인코딩 피쳐들이 통합된 인코딩 통합 결과 내에서, 이전(previous) 디코더 레이어에 의해 생성되는 이전 디코딩 피쳐와 대응되는 크기를 가지는 인코딩 피쳐를 상기 이전 디코딩 피쳐로 대체할 수 있다. 일 실시예에서, 상기 디코더 레이어들 중 제 2 디코더 레이어는 혼합 어텐션 알고리즘을 이용하여 제 2 디코딩 피쳐를 생성할 수 있다. 상기 혼합 어텐션 알고리즘은: 상기 디코더 신경망에서 상기 제 2 디코더 레이어와 직 렬 연결을 통해 연결되는 제 1 디코더 레이어에 의해 생성되는 제 1 디코딩 피쳐; 및 상기 인코더 신경망에서 상기 제 2 디코더 레이어와 측면 연결을 통해 연결되는 제 2 측면 인코더 레이어로부터 생성되는 제 2 측면 인 코딩 피쳐를 사용할 수 있다. 일 실시예에서, 상기 디코더 레이어들 중 제 2 디코더 레이어는 혼합 어텐션 알고리즘을 이용하여 제 2 디코딩 피쳐를 생성할 수 있다. 상기 혼합 어텐션 알고리즘은: 상기 제 2 디코더 레이어의 하나 이상의 선행 디코더 레 이어들 각각으로부터 생성되는 선행 디코딩 피쳐들을 포함하는 제 2 디코딩 통합 결과; 및 상기 제 2 디코더 레이어와 측면 연결을 통해 연결되는 제 2 측면 인코더 레이어로부터 생성되는 제 2 측면 인코딩 피쳐를 사용할 수 있다. 일 실시예에서, 상기 제 2 측면 인코딩 피쳐가 상기 혼합 어텐션 알고리즘의 쿼리로 사용되며 그리고 상기 제 2 디코딩 통합 결과에 기초하여 상기 혼합 어텐션 알고리즘의 키와 값이 결정될 수 있다. 일 실시예에서, 상기 제 2 디코딩 통합 결과는, 상기 인코딩 피쳐들 중 일부를 상기 선행 디코딩 피쳐들로 대체 함으로써 생성될 수 있다. 일 실시예에서, 상기 제 2 디코딩 통합 결과는, 상기 선행 디코더 레이어들 중에서 제 1 디코더 레이어로부터 생성되는 제 1 디코딩 피쳐로, 상기 제 1 디코더 레이어와 측면 연결을 통해 연결되는 제 1 측면 인코더 레이어 로부터 생성된 제 1 측면 인코딩 피쳐를 대체(replace)함으로써 생성될 수 있다. 일 실시예에서, 상기 디코더 신경망의 상기 디코더 레이어들은, 이전 디코더 레이어로 입력된 이전 인코딩 피쳐 를 상기 인코딩 피쳐들이 통합된 인코딩 통합 결과로부터 제외시키고 그리고 상기 제외된 이전 인코딩 피쳐를 상기 이전 디코더 레이어로부터 생성된 이전 디코딩 피쳐로 대체(replace)시키는 누적적인(cumulative) 방식을 이용할 수 있다. 일 실시예에서, 적어도 하나의 프로세서, 및 명령(instructions)을 포함하는 메모리를 포함하는 컴퓨팅 디바이 스가 개시된다. 상기 명령들은 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 적어도 하나의 프로세서로 하여금 신경망 모델을 구현(implement)하여 입력 데이터를 처리하도록 할 수 있다. 상기 신경망 모델은, 복수의 인코더 레이어들을 포함하는 인코더 신경망 및 복수의 디코더 레이어들을 포함하는 디코더 신경망을 포함할 수 있다. 상기 인코더 신경망은, 수신된 입력 데이터에 기초하여, 상기 인코더 레이어들 각각으로부터의 인코딩 피쳐들을 생성하고 - 하나의 인코더 레이어로부터 하나의 인코딩 피쳐가 생성됨 -, 상기 디코더 신경망은, 상기 인코딩 피쳐들에 기초하여, 상기 디코더 레이어들 각각으로부터의 디코딩 피쳐들을 생성하고 - 하나의 디코더 레이어로부터 하나의 디코딩 피쳐가 생성됨 -, 그리고 상기 디코더 레이어들 중 최초(initial) 디코더 레이어로 부터의 최초 디코딩 피쳐는, 상기 인코딩 피쳐들이 통합된(incorporated) 인코딩 통합 결과 및 상기 인코더 레 이어들 중 마지막 인코더 레이어에 의해 생성되는 마지막 인코딩 피쳐를 이용하여 생성될 수 있다. 일 실시예에서, 컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램이 개시된다. 상기 컴퓨터 프로그램은 적 어도 하나의 프로세서에 의해 실행 시, 상기 적어도 하나의 프로세서로 하여금 신경망 모델을 구현(implement) 하여 입력 데이터를 처리하기 위한 동작들을 수행하도록 할 수 있다. 상기 신경망 모델은, 복수의 인코더 레이 어들을 포함하는 인코더 신경망 및 복수의 디코더 레이어들을 포함하는 디코더 신경망을 포함할 수 있다. 상기 동작들은: 수신된 입력 데이터에 기초하여, 상기 인코더 레이어들 각각으로부터의 인코딩 피쳐들을 생성하는 동 작 - 하나의 인코더 레이어로부터 하나의 인코딩 피쳐가 생성됨 -; 및 상기 인코딩 피쳐들에 기초하여, 상기 디 코더 레이어들 각각으로부터의 디코딩 피쳐들을 생성하는 동작 - 하나의 디코더 레이어로부터 하나의 디코딩 피 쳐가 생성됨 -;을 포함할 수 있다. 상기 디코더 레이어들 중 최초(initial) 디코더 레이어로부터의 최초 디코딩 피쳐는, 상기 인코딩 피쳐들이 통합된(incorporated) 인코딩 통합 결과 및 상기 인코더 레이어들 중 마지막 인 코더 레이어에 의해 생성되는 마지막 인코딩 피쳐를 이용하여 생성될 수 있다."}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시내용의 일 실시예에 따른 기법은, U-NET 혼합형 트랜스포머 구조의 신경망 모델을 제공할 수 있다. 본 개시내용의 일 실시예에 따른 기법은, 혼합 어텐션을 이용하는 신경망 모델을 제공할 수 있다. 본 개시내용의 일 실시예에 따른 기법은, 우수한 이미지 처리 성능을 가진 인공지능 기반의 신경망 모델을 제공 할 수 있다."}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "다양한 실시예들이 도면을 참조하여 설명된다. 본 명세서에서, 다양한 설명들이 본 개시내용의 이해를 제공하기 위해서 제시된다. 본 개시내용의 실시를 위한 구체적인 내용을 설명하기에 앞서, 본 개시내용의 기술적 요지와 직접적 관련이 없는 구성에 대해서는 본 발명의 기술적 요지를 흩뜨리지 않는 범위 내에서 생략하였음에 유의하 여야 할 것이다. 또한, 본 명세서 및 청구범위에 사용된 용어 또는 단어는 발명자가 자신의 발명을 최선의 방법 으로 설명하기 위해 적절한 용어의 개념을 정의할 수 있다는 원칙에 입각하여 본 발명의 기술적 사상에 부합하 는 의미와 개념으로 해석되어야 할 것이다. 본 명세서에서 사용되는 용어 \"모델\", \"시스템\" 및/또는 “모듈” 등은, 컴퓨터-관련 엔티티, 하드웨어, 펌웨어, 소프트웨어, 소프트웨어 및 하드웨어의 조합, 또는 소프트웨어의 실행을 지칭하며 그리고 상호 교환 가능하게 사용될 수 있다. 예를 들어, 모듈은 프로세서상에서 실행되는 처리과정(procedure), 프로세서, 객체, 실 행 스레드, 프로그램, 애플리케이션 및/또는 컴퓨팅 디바이스일 수 있지만, 이들로 제한되는 것은 아니다. 하나 이상의 모듈은 프로세서 및/또는 실행 스레드 내에 상주할 수 있다. 모듈은 하나의 컴퓨팅 디바이스 내에 로컬 화 될 수 있다. 하나의 모듈이 2개 이상의 컴퓨팅 디바이스들 사이에 분배될 수 있다. 또한, 이러한 모듈들은 그 내부에 저장된 다양한 데이터 구조들을 갖는 다양한 컴퓨터 판독가능한 매체로부터 실행할 수 있다. 모듈들 은 예를 들어 하나 이상의 데이터 패킷들을 갖는 신호(예를 들면, 로컬 시스템, 분산 시스템에서 다른 컴포넌트 와 상호작용하는 하나의 컴포넌트로부터의 데이터 및/또는 신호를 통해 다른 시스템과 인터넷과 같은 네트워크 를 통해 전송되는 데이터)에 따라 로컬 및/또는 원격 처리들을 통해 통신할 수 있다. 더불어, 용어 \"또는\"은 배타적 \"또는\"이 아니라 내포적 \"또는\"을 의미하는 것으로 의도된다. 즉, 달리 특정되지 않거나 문맥상 명확하지 않은 경우에, \"X는 A 또는 B를 이용한다\"는 자연적인 내포적 치환 중 하나를 의미하는 것으로 의도된다. 즉, X가 A를 이용하거나; X가 B를 이용하거나; 또는 X가 A 및 B 모두를 이용하는 경우, \"X는 A 또는 B를 이용한다\"가 이들 경우들 어느 것으로도 적용될 수 있다. 또한, 본 명세서에 사용된 \"및/또는\" 그리 고 “적어도 하나” 라는 용어는 열거된 관련 아이템들 중 하나 이상의 아이템의 가능한 모든 조합을 지칭하고 포함하는 것으로 이해되어야 한다. 예를 들어, \"A 또는 B 중 적어도 하나\" 또는 “A 및 B 중 적어도 하나” 라 는 용어는, \"A만을 포함하는 경우\", \"B 만을 포함하는 경우\", \"A와 B의 구성으로 조합된 경우\"를 의미하는 것으 로 해석되어야 한다. 또한, \"포함한다\" 및/또는 \"포함하는\"이라는 용어는, 해당 특징 및/또는 구성요소가 존재함을 의미하는 것으로 이해되어야 한다. 다만, \"포함한다\" 및/또는 \"포함하는\"이라는 용어는, 하나 이상의 다른 특징, 구성요소 및/또 는 이들의 그룹의 존재 또는 추가를 배제하지 않는 것으로 이해되어야 한다. 또한, 달리 특정되지 않거나 단수 형태를 지시하는 것으로 문맥상 명확하지 않은 경우에, 본 명세서와 청구범위에서 단수는 일반적으로 \"하나 또 는 그 이상\"을 의미하는 것으로 해석되어야 한다. 당업자들은 추가적으로 여기서 개시된 실시예들과 관련되어 설명된 다양한 예시적인 논리적 구성요소들이 하드 웨어, 컴퓨터 소프트웨어, 또는 양쪽 모두의 조합들로 구현될 수 있음을 인식해야 한다. 제시된 실시예들에 대한 설명은 본 개시의 기술 분야에서 통상의 지식을 가진 자가 본 발명을 이용하거나 또는 실시할 수 있도록 제공된다. 이러한 실시예들에 대한 다양한 변형들은 본 개시의 기술 분야에서 통상의 지식을 가진 자에게 명백할 것이다. 여기에 정의된 일반적인 원리들은 본 개시의 범위를 벗어남이 없이 다른 실시예들 에 적용될 수 있다. 그리하여, 본 발명은 여기에 제시된 실시예 들로 한정되는 것이 아니다. 본 발명은 여기에 제시된 원리들 및 신규한 특징들과 일관되는 최광의의 범위에서 해석되어야 할 것이다. 본 개시내용에서의 제 1, 제 2, 또는 제 3 과 같이 제 N 으로 표현되는 용어들은 적어도 하나의 엔티티들을 구 분하기 위해 사용된다. 예를 들어, 제 1 과 제 2로 표현된 엔티티들은 서로 동일하거나 또는 상이할 수 있다. 본 개시내용에서의 이전(previous) 및 선행(precedent)는 서로 상호 교환가능하게 사용될 수 있다. 본 개시내용 에서의 다음(next) 및 후속(subsequent)는 서로 상호 교환가능하게 사용될 수 있다. 제한이 아닌 예시로, \"이전\"은 직전의 의미를 가질 수 있으며, \"선행\"은 직전인 경우 뿐만 아니라 직전이 아닌 시기적으로 앞선 경우 를 포괄하도록 사용될 수 있다. 제한이 아닌 예시로, \"다음\"은 직후의 의미를 가질 수 있으며, \"후속\"은 직후의 경우 뿐만 아니라 직후가 아닌 시기적으로 늦은 경우를 포괄하도록 사용될 수 있다. 본 개시내용에서 사용되는 용어 \"모델\" 또는 \"신경망 모델\"은 인공지능 기반의 모델, 인공지능 모델, 연산 모델, 신경망(neural network) 및 네트워크 함수를 포괄하는 의미로 사용될 수 있다. 본 개시내용에서의 메커니즘 또는 알고리즘은 서로 상호 교환 가능하게 사용될 수 있다. 예를 들어, 메커니즘 또는 알고리즘은, 컴퓨터 디바이스에 의해 또는 컴퓨터 디바이스의 내부 소프트웨어에 의해 어떠한 동작 또는 기능이 수행되는 원리 또는 방법론을 의미하도록 사용될 수 있다. 도 1은 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스의 블록 구성도를 개략적으로 도시한다. 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스는 프로세서 및 메모리를 포함할 수 있다. 도 1에 도시된 컴퓨팅 디바이스의 구성은 간략화 하여 나타낸 예시일 뿐이다. 본 개시의 일 실시예에서 컴 퓨팅 디바이스는 컴퓨팅 디바이스의 컴퓨팅 환경을 수행하기 위한 다른 구성들이 포함될 수 있고, 개 시된 구성들 중 일부만이 컴퓨팅 디바이스를 구성할 수도 있다. 일례로, 전술한 컴퓨팅 디바이스가 사용자 단말을 포함하는 경우, 출력부(미도시) 및 입력부(미도시)가 상기 컴퓨팅 장치의 범위 내에 포함될수 있다. 본 개시내용에서의 컴퓨팅 디바이스는 임의의 형태의 서버 및 임의의 형태의 단말을 포괄하는 의미로 사용 될 수 있다. 컴퓨팅 디바이스는 컴퓨팅 장치와 상호 교환 가능하게 사용될 수 있다. 본 개시내용에서의 컴퓨팅 디바이스는 본 개시내용의 실시예들을 구현하기 위한 시스템을 구성하는 임의의 형태의 컴포넌트를 의미할 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 본 개시내용의 일 실시예에 따른 신경망 모델을 구현하기 위한 임의의 동작을 수행할 수 있다. 본 개시내용에서의 “구현”은, 신경망 모델의 실행, 신경망 모델의 학습, 신경망 모델 의 조직화 및/또는 신경망 모델의 추론을 포괄하도록 사용될 수 있다. 일 실시예에서, 프로세서는 컴퓨팅 디바이스의 전반적인 동작을 수행할 수 있다. 프로세서는 적 어도 하나의 코어로 구성될 수 있다. 프로세서는 컴퓨팅 디바이스의 중앙 처리 장치(CPU: central processing unit), 범용 그래픽 처리 장치 (GPGPU: general purpose graphics processing unit), 텐서 처리 장 치(TPU: tensor processing unit) 등의 데이터 분석 및/또는 처리를 위한 장치를 포함할 수 있다. 프로세서는 메모리에 저장된 컴퓨터 프로그램을 판독하여 본 개시내용의 일 실시예에 따른 신경망 모 델을 구현할 수 있다. 본 개시의 일 실시예에 따라 프로세서는 신경망의 학습을 위한 연산을 수행할 수도 있다. 프로세서는 딥러닝(DL: deep learning)에서 학습을 위한 입력 데이터의 처리, 입력 데이터에서의 피쳐 추출, 오차 계산, 역 전파(backpropagation)를 이용한 신경망의 가중치 업데이트 등의 신경망의 학습을 위한 계산을 수행할 수 있다. 프로세서의 CPU, GPGPU, 및 TPU 중 적어도 하나가 네트워크 함수의 학습을 처리할 수 있다. 예를 들어, CPU 와 GPGPU가 함께 네트워크 함수의 학습, 네트워크 함수를 이용한 데이터 분류, 그리고/또는 네트워크 함수 를 이용한 이미지 세그멘테이션을 처리할 수 있다. 또한, 본 개시의 일 실시예에서 복수의 컴퓨팅 디바이스들의 프로세서들을 함께 사용하여 네트워크 함수의 학습, 네트워크 함수를 이용한 데이터 분류, 그리고 이미지 세그 멘테이션을 처리할 수도 있다. 또한, 본 개시의 일 실시예에 따른 컴퓨팅 디바이스에서 수행되는 컴퓨터 프로그램은 CPU, GPGPU 또는 TPU 실행가능 프로그램일 수 있다. 추가적으로, 프로세서는 통상적으로 컴퓨팅 디바이스의 전반적인 동작을 처리할 수 있다. 예를 들어, 프로세서는 컴퓨팅 디바이스에 포함된 구성요소들을 통해 입력 또는 출력되는 데이터, 정보, 또는 신 호 등을 처리하거나 저장부에 저장된 응용 프로그램을 구동함으로써, 사용자에게 적절한 정보 또는 기능을 제공 할 수 있다. 본 개시의 일 실시예에 따르면, 메모리는 프로세서가 생성하거나 결정한 임의의 형태의 정보 및 컴퓨 팅 디바이스가 수신한 임의의 형태의 정보를 저장할 수 있다. 본 개시의 일 실시예에 따르면, 메모리(13 0)는 프로세서가 본 개시내용의 실시예들에 따른 동작을 수행하도록 하는 컴퓨터 소프트웨어를 저장하는 저장매체 일 수 있다. 따라서, 메모리는 본 개시내용에 실시예들을 수행하는 데 필요한 소프트웨어 코드, 코드의 실행 대상이 되는 데이터, 코드의 실행 결과를 저장하기 위한 컴퓨터 판독 매체들을 의미할 수 있다. 본 개시의 일 실시예에 따르면, 메모리는 임의의 타입의 저장 매체를 의미할 수 있다 예를 들어, 메모리 는 플래시 메모리 타입(flash memory type), 하드디스크 타입(hard disk type), 멀티미디어 카드 마이크 로 타입(multimedia card micro type), 카드 타입의 메모리(예를 들어 SD 또는 XD 메모리 등), 램(Random Access Memory, RAM), SRAM(Static Random Access Memory), 롬(Read-Only Memory, ROM), EEPROM(Electrically Erasable Programmable Read-Only Memory), PROM(Programmable Read-Only Memory), 자기 메모리, 자기 디스크, 광디스크 중 적어도 하나의 타입의 저장매체를 포함할 수 있다. 컴퓨팅 디바이스는 인터넷 (internet) 상에서 상기 메모리의 저장 기능을 수행하는 웹 스토리지(web storage)와 관련되어 동작할 수 도 있다. 전술한 메모리에 대한 기재는 예시일 뿐, 본 개시내용에서 사용되는 메모리는 전술한 예시들로 제한되지 않는다. 일 실시예에서, 메모리는 본 개시내용에 따라 생성되는 신경망 모델에 대응되는 파일 또 는 자료구조를 저장할 수 있다. 본 개시내용에서의 통신부(미도시)는 유선 및 무선 등과 같은 그 통신 양태를 가리지 않고 구성될 수 있으며, 단거리 통신망(PAN: Personal Area Network), 근거리 통신망(WAN: Wide Area Network) 등 다양한 통신망으로 구성될 수 있다. 또한, 상기 네트워크부 공지의 월드와이드웹(WWW: World Wide Web) 기반으로 동작할 수 있으며, 적외선(IrDA: Infrared Data Association) 또는 블루투스(Bluetooth)와 같이 단거리 통신에 이용되는무선 전송 기술을 이용할 수도 있다. 본 개시내용에서의 컴퓨팅 디바이스는 임의의 형태의 사용자 단말 및/또는 임의의 형태의 서버를 포함할 수 있다. 따라서, 본 개시내용의 실시예들은 서버 및/또는 사용자 단말에 의해 수행될 수 있다. 일 실시예에서, 사용자 단말은, 서버 또는 다른 컴퓨팅 디바이스와 상호작용 가능한 임의의 형태의 단말을 포함 할 수 있다. 사용자 단말은 예를 들어, 휴대폰, 스마트 폰(smart phone), 노트북 컴퓨터(laptop computer), PDA(personal digital assistants), 슬레이트 PC(slate PC), 태블릿 PC(tablet PC) 및 울트라북(ultrabook)을 포함할 수 있다. 일 실시예에서, 서버는 예를 들어, 마이크로프로세서, 메인프레임 컴퓨터, 디지털 프로세서, 휴대용 디바이스 및 디바이스 제어기 등과 같은 임의의 타입의 컴퓨팅 시스템 또는 컴퓨팅 디바이스를 포함할 수 있다. 일 실시예에서, 서버는 인코더 신경망, 디코더 신경망 및 후처리 모듈을 저장 및 관리할 수 있다. 예를 들어, 서버는 전술한 엔티티들을 저장하기 위한 저장부(미도시)를 포함할 수 있다. 이러한 저장부는 서버내에 포함되 거나 혹은 서버의 관리 하에 존재할 수 있다. 다른 예시로, 저장부는 서버 외부에 존재하여 서버와 통신가능한 형태로 구현될 수도 있다. 이 경우 서버와는 상이한 다른 외부 서버에 의해 저장부가 관리 및 제어될 수 있다. 다른 예시로, 저장부는 서버 외부에 존재하여 서버와 통신가능한 형태로 구현될 수도 있다. 이 경우 서버와는 상이한 다른 외부 서버에 의해 저장부가 관리 및 제어될 수 있다. 도 2는 본 개시내용의 일 실시예에 따른 인공지능 기반의 모델의 예시적인 구조를 도시한다. 본 개시내용에 걸쳐, 모델, 신경망 모델, 인공지능 모델, 인공지능 기반의 신경망 모델, 연산 모델, 신경망 및 네트워크 함수는 상호 교환 가능하게 사용될 수 있다. 본 개시내용에서의 인공지능 기반의 신경망 모델은 객체 세그멘테이션, 객체 검출 및/또는 객체 분류 등의 이미 지 처리를 위한 모델, 그리고 데이터 예측, 텍스트 의미 추론 및/또는 데이터 분류 등의 텍스트 처리를 위한 모 델 등 다양한 도메인에서 활용 가능한 모델을 포함할 수 있다. 신경망은 일반적으로 노드라 지칭될 수 있는 상호 연결된 계산 단위들의 집합으로 구성될 수 있다. 이러한 노드 들은 뉴런(neuron)들로 지칭될 수도 있다. 신경망은 적어도 하나 이상의 노드들을 포함하여 구성된다. 신경망들 을 구성하는 노드(또는 뉴런)들은 하나 이상의 링크에 의해 상호 연결될 수 있다. 일례로, 신경망은 인코더 신 경망 및 디코더 신경망을 포괄하도록 사용될 수 있다. 일례로, 인공지능 기반의 모델 내에서의 노드는 신경망을 구성하는 컴포넌트를 의미하도록 사용될 수 있으며, 예를 들어 신경망 내에서의 노드는 뉴런과 대응될 수 있다. 신경망 내에서, 링크를 통해 연결된 하나 이상의 노드들은 상대적으로 입력 노드 및 출력 노드의 관계를 형성할 수 있다. 입력 노드 및 출력 노드의 개념은 상대적인 것으로서, 하나의 노드에 대하여 출력 노드 관계에 있는 임의의 노드는 다른 노드와의 관계에서 입력 노드 관계에 있을 수 있으며, 그 역도 성립할 수 있다. 상술한 바 와 같이, 입력 노드 대 출력 노드 관계는 링크를 중심으로 생성될 수 있다. 하나의 입력 노드에 하나 이상의 출 력 노드가 링크를 통해 연결될 수 있으며, 그 역도 성립할 수 있다. 하나의 링크를 통해 연결된 입력 노드 및 출력 노드 관계에서, 출력 노드의 데이터는 입력 노드에 입력된 데이 터에 기초하여 그 값이 결정될 수 있다. 여기서 입력 노드와 출력 노드를 상호 연결하는 링크는 가중치(weigh t)를 가질 수 있다. 가중치는 가변적일 수 있으며, 신경망이 원하는 기능을 수행하기 위해, 사용자 또는 알고리 즘에 의해 가변 될 수 있다. 예를 들어, 하나의 출력 노드에 하나 이상의 입력 노드가 각각의 링크에 의해 상호 연결된 경우, 출력 노드는 상기 출력 노드와 연결된 입력 노드들에 입력된 값들 및 각각의 입력 노드들에 대응 하는 링크에 설정된 가중치에 기초하여 출력 노드 값을 결정할 수 있다. 상술한 바와 같이, 신경망은 하나 이상의 노드들이 하나 이상의 링크를 통해 상호 연결되어 신경망 내에서 입력 노드 및 출력 노드 관계를 형성한다. 신경망 내에서 노드들과 링크들의 개수 및 노드들과 링크들 사이의 연관관 계, 링크들 각각에 부여된 가중치의 값에 따라, 신경망의 특성이 결정될 수 있다. 예를 들어, 동일한 개수의 노 드 및 링크들이 존재하고, 링크들의 가중치 값이 상이한 두 신경망이 존재하는 경우, 두 개의 신경망들은 서로 상이한 것으로 인식될 수 있다. 신경망은 하나 이상의 노드들의 집합으로 구성될 수 있다. 신경망을 구성하는 노드들의 부분 집합은 레이어 (layer)를 구성할 수 있다. 신경망을 구성하는 노드들 중 일부는, 최초 입력 노드로부터의 거리들에 기초하여,하나의 레이어(layer)를 구성할 수 있다. 예를 들어, 최초 입력 노드로부터 거리가 n인 노드들의 집합은, n 레 이어를 구성할 수 있다. 최초 입력 노드로부터 거리는, 최초 입력 노드로부터 해당 노드까지 도달하기 위해 거 쳐야 하는 링크들의 최소 개수에 의해 정의될 수 있다. 그러나, 이러한 레이어의 정의는 설명을 위한 임의적인 것으로서, 신경망 내에서 레이어의 차수는 상술한 것과 상이한 방법으로 정의될 수 있다. 예를 들어, 노드들의 레이어는 최종 출력 노드로부터 거리에 의해 정의될 수도 있다. 최초 입력 노드는 신경망 내의 노드들 중 다른 노드들과의 관계에서 링크를 거치지 않고 데이터가 직접 입력되 는 하나 이상의 노드들을 의미할 수 있다. 또는, 신경망 네트워크 내에서, 링크를 기준으로 한 노드 간의 관계 에 있어서, 링크로 연결된 다른 입력 노드들을 가지지 않는 노드들을 의미할 수 있다. 이와 유사하게, 최종 출 력 노드는 신경망 내의 노드들 중 다른 노드들과의 관계에서, 출력 노드를 가지지 않는 하나 이상의 노드들을 의미할 수 있다. 또한, 히든 노드는 최초 입력 노드 및 최후 출력 노드가 아닌 신경망을 구성하는 노드들을 의 미할 수 있다. 본 개시의 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수와 동일할 수 있 으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 감소하다가 다시 증가하는 형태의 신경망일 수 있다. 또한, 본 개시의 다른 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수 보다 적을 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 감소하는 형태의 신경망 일 수 있다. 또한, 본 개시의 또 다른 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수보다 많을 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 증가하는 형태의 신경망일 수 있다. 본 개시의 또 다른 일 실시예에 따른 신경망은 상술한 신경망들의 조합된 형태의 신경망일 수 있다. 딥 뉴럴 네트워크(DNN: deep neural network, 심층신경망)는 입력 레이어와 출력 레이어 외에 복수의 히든 레이 어를 포함하는 신경망을 의미할 수 있다. 딥 뉴럴 네트워크를 이용하면 데이터의 잠재적인 구조(latent structures)를 파악할 수 있다. 즉, 사진, 글, 비디오, 음성, 단백질 시퀀스 구조, 유전자 시퀀스 구조, 펩타이 드 서열의 구조 및/또는 음악의 잠재적인 구조(예를 들어, 어떤 물체가 사진에 있는지, 글의 내용과 감정이 무 엇인지, 음성의 내용과 감정이 무엇인지 등)등을 파악할 수 있다. 딥 뉴럴 네트워크는 컨볼루션 뉴럴 네트워크 (CNN: convolutional neural network), 리커런트 뉴럴 네트워크(RNN: recurrent neural network), 오토 인코더 (auto encoder), GAN(Generative Adversarial Networks), 트랜스포머(transformer), 제한 볼츠만 머신(RBM: restricted boltzmann machine), 심층 신뢰 네트워크(DBN: deep belief network), Q 네트워크, U 네트워크, 샴 네트워크, 적대적 생성 네트워크(GAN: Generative Adversarial Network) 등을 포함할 수 있다. 전술한 딥 뉴럴 네트워크의 기재는 예시일 뿐이며 본 개시는 이에 제한되지 않는다. 본 개시내용의 인공지능 기반의 모델은 입력 레이어, 히든 레이어 및 출력 레이어를 포함하는 전술한 임의의 구 조의 네트워크 구조에 의해 표현될 수 있다. 예를 들어, 이러한 인공지능 기반의 모델의 입력 레이어, 히든 레 이어 및 출력 레이어 각각은 노드에 대응될 수 있다. 본 개시내용의 클러스터링 모델에서 사용될 수 있는 뉴럴 네트워크는 지도 학습(supervised learning), 비지도 학습(unsupervised learning), 반지도학습(semi supervised learning), 또는 강화학습(reinforcement learning) 중 적어도 하나의 방식으로 학습될 수 있다. 뉴럴 네트워크의 학습은 뉴럴 네트워크가 특정한 동작을 수행하기 위한 지식을 뉴럴 네트워크에 적용하는 과정일 수 있다. 뉴럴 네트워크는 출력의 오류를 최소화하는 방향으로 학습될 수 있다. 뉴럴 네트워크의 학습에서 반복적으로 학 습 데이터를 뉴럴 네트워크에 입력시키고 학습 데이터에 대한 뉴럴 네트워크의 출력과 타겟의 에러를 계산하고, 에러를 줄이기 위한 방향으로 뉴럴 네트워크의 에러를 뉴럴 네트워크의 출력 레이어에서부터 입력 레이어 방향 으로 역전파(backpropagation)하여 뉴럴 네트워크의 각 노드의 가중치를 업데이트 하는 과정이다. 지도 학습의 경우 각각의 학습 데이터에 정답이 라벨링되어있는 학습 데이터를 사용하며(즉, 라벨링된 학습 데이터), 비지도 학습의 경우는 각각의 학습 데이터에 정답이 라벨링되어 있지 않을 수 있다. 즉, 예를 들어 데이터 분류에 관한 지도 학습의 경우의 학습 데이터는 학습 데이터 각각에 카테고리가 라벨링 된 데이터 일 수 있다. 라벨링된 학 습 데이터가 뉴럴 네트워크에 입력되고, 뉴럴 네트워크의 출력(카테고리)과 학습 데이터의 라벨을 비교함으로써 오류(error)가 계산될 수 있다. 다른 예로, 데이터 분류에 관한 비지도 학습의 경우 입력인 학습 데이터가 뉴럴 네트워크 출력과 비교됨으로써 오류가 계산될 수 있다. 계산된 오류는 뉴럴 네트워크에서 역방향(즉, 출력 레이 어에서 입력 레이어 방향)으로 역전파 되며, 역전파에 따라 뉴럴 네트워크의 각 레이어의 각 노드들의 연결 가 중치가 업데이트 될 수 있다. 업데이트 되는 각 노드의 연결 가중치는 학습률(learning rate)에 따라 변화량이결정될 수 있다. 입력 데이터에 대한 뉴럴 네트워크의 계산과 에러의 역전파는 학습 사이클(epoch)을 구성할 수 있다. 학습률은 뉴럴 네트워크의 학습 사이클의 반복 횟수에 따라 상이하게 적용될 수 있다. 예를 들어, 뉴럴 네트워크의 학습 초기에는 높은 학습률을 사용하여 뉴럴 네트워크가 빠르게 일정 수준의 성능을 확보하도록 하 여 효율성을 높이고, 학습 후기에는 낮은 학습률을 사용하여 정확도를 높일 수 있다. 뉴럴 네트워크의 학습에서 일반적으로 학습 데이터는 실제 데이터(즉, 학습된 뉴럴 네트워크를 이용하여 처리하 고자 하는 데이터)의 부분집합일 수 있으며, 따라서, 학습 데이터에 대한 오류는 감소하나 실제 데이터에 대해 서는 오류가 증가하는 학습 사이클이 존재할 수 있다. 과적합(overfitting)은 이와 같이 학습 데이터에 과하게 학습하여 실제 데이터에 대한 오류가 증가하는 현상이다. 예를 들어, 노란색 고양이를 보여 고양이를 학습한 뉴 럴 네트워크가 노란색 이외의 고양이를 보고는 고양이임을 인식하지 못하는 현상이 과적합의 일종일 수 있다. 과적합은 머신러닝 알고리즘의 오류를 증가시키는 원인으로 작용할 수 있다. 이러한 과적합을 막기 위하여 다양 한 최적화 방법이 사용될 수 있다. 과적합을 막기 위해서는 학습 데이터를 증가시키거나, 레귤라리제이션 (regularization), 학습의 과정에서 네트워크의 노드 일부를 비활성화하는 드롭아웃(dropout), 배치 정규화 레 이어(batch normalization layer)의 활용 등의 방법이 적용될 수 있다. 본 개시의 일 실시예에 따른 신경망 모델을 포함하는 데이터 구조를 저장한 컴퓨터 판독가능 매체가 개시된다. 전술한 데이터 구조는 본 개시내용에서의 메모리에 저장될 수 있으며, 프로세서에 의해 실행될 수 있 으며 그리고 통신부(미도시)에 의해 송수신될 수 있다. 데이터 구조는 데이터에 효율적인 접근 및 수정을 가능하게 하는 데이터의 조직, 관리, 저장을 의미할 수 있다. 데이터 구조는 특정 문제(예를 들어, 최단 시간으로 데이터 검색, 데이터 저장, 데이터 수정) 해결을 위한 데이 터의 조직을 의미할 수 있다. 데이터 구조는 특정한 데이터 처리 기능을 지원하도록 설계된, 데이터 요소들 간 의 물리적이거나 논리적인 관계로 정의될 수도 있다. 데이터 요소들 간의 논리적인 관계는 사용자 정의 데이터 요소들 간의 연결관계를 포함할 수 있다. 데이터 요소들 간의 물리적인 관계는 컴퓨터 판독가능 저장매체(예를 들어, 영구 저장 장치)에 물리적으로 저장되어 있는 데이터 요소들 간의 실제 관계를 포함할 수 있다. 데이터 구조는 구체적으로 데이터의 집합, 데이터 간의 관계, 데이터에 적용할 수 있는 함수 또는 명령어를 포함할 수 있다. 효과적으로 설계된 데이터 구조를 통해 컴퓨팅 디바이스는 컴퓨팅 디바이스의 자원을 최소한으로 사용하 면서 연산을 수행할 수 있다. 구체적으로 컴퓨팅 디바이스는 효과적으로 설계된 데이터 구조를 통해 연산, 읽기, 삽입, 삭제, 비교, 교환, 검색의 효율성을 높일 수 있다. 데이터 구조는 데이터 구조의 형태에 따라 선형 데이터 구조와 비선형 데이터 구조로 구분될 수 있다. 선형 데 이터 구조는 하나의 데이터 뒤에 하나의 데이터만이 연결되는 구조일 수 있다. 선형 데이터 구조는 리스트 (List), 스택(Stack), 큐(Queue), 데크(Deque)를 포함할 수 있다. 리스트는 내부적으로 순서가 존재하는 일련의 데이터 집합을 의미할 수 있다. 리스트는 연결 리스트(Linked List)를 포함할 수 있다. 연결 리스트는 각각의 데이터가 포인터를 가지고 한 줄로 연결되어 있는 방식으로 데이터가 연결된 데이터 구조일 수 있다. 연결 리스 트에서 포인터는 다음이나 이전 데이터와의 연결 정보를 포함할 수 있다. 연결 리스트는 형태에 따라 단일 연결 리스트, 이중 연결 리스트, 원형 연결 리스트로 표현될 수 있다. 스택은 제한적으로 데이터에 접근할 수 있는 데이터 나열 구조일 수 있다. 스택은 데이터 구조의 한 쪽 끝에서만 데이터를 처리(예를 들어, 삽입 또는 삭 제)할 수 있는 선형 데이터 구조일 수 있다. 스택에 저장된 데이터는 늦게 들어갈수록 빨리 나오는 데이터 구조 (LIFO-Last in First Out)일 수 있다. 큐는 제한적으로 데이터에 접근할 수 있는 데이터 나열 구조로서, 스택과 달리 늦게 저장된 데이터일수록 늦게 나오는 데이터 구조(FIFO-First in First Out)일 수 있다. 데크는 데이터 구조의 양 쪽 끝에서 데이터를 처리할 수 있는 데이터 구조일 수 있다. 비선형 데이터 구조는 하나의 데이터 뒤에 복수개의 데이터가 연결되는 구조일 수 있다. 비선형 데이터 구조는 그래프(Graph) 데이터 구조를 포함할 수 있다. 그래프 데이터 구조는 정점(Vertex)과 간선(Edge)으로 정의될 수 있으며 간선은 서로 다른 두개의 정점을 연결하는 선을 포함할 수 있다. 그래프 데이터 구조 트리(Tree) 데이터 구조를 포함할 수 있다. 트리 데이터 구조는 트리에 포함된 복수개의 정점 중에서 서로 다른 두개의 정점을 연 결시키는 경로가 하나인 데이터 구조일 수 있다. 즉 그래프 데이터 구조에서 루프(loop)를 형성하지 않는 데이 터 구조일 수 있다. 데이터 구조는 신경망을 포함할 수 있다. 그리고 신경망을 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장 될 수 있다. 신경망을 포함한 데이터 구조는 또한 신경망에 의한 처리를 위하여 전처리된 데이터, 신경망에 입 력되는 데이터, 신경망의 가중치, 신경망의 하이퍼 파라미터, 신경망으로부터 획득한 데이터, 신경망의 각 노드 또는 레이어와 연관된 활성 함수, 신경망의 학습을 위한 손실 함수 등을 포함할 수 있다. 신경망을 포함한 데이터 구조는 상기 개시된 구성들 중 임의의 구성 요소들을 포함할 수 있다. 즉 신경망을 포함한 데이터 구조는 신 경망에 의한 처리를 위하여 전처리된 데이터, 신경망에 입력되는 데이터, 신경망의 가중치, 신경망의 하이퍼 파 라미터, 신경망으로부터 획득한 데이터, 신경망의 각 노드 또는 레이어와 연관된 활성 함수, 신경망의 학습을 위한 손실 함수 등 전부 또는 이들의 임의의 조합을 포함하여 구성될 수 있다. 전술한 구성들 이외에도, 신경망 을 포함한 데이터 구조는 신경망의 특성을 결정하는 임의의 다른 정보를 포함할 수 있다. 또한, 데이터 구조는 신경망의 연산 과정에 사용되거나 발생되는 모든 형태의 데이터를 포함할 수 있으며 전술한 사항에 제한되는 것 은 아니다. 컴퓨터 판독가능 매체는 컴퓨터 판독가능 기록 매체 및/또는 컴퓨터 판독가능 전송 매체를 포함할 수 있다. 신경망은 일반적으로 노드라 지칭될 수 있는 상호 연결된 계산 단위들의 집합으로 구성될 수 있다. 이 러한 노드들은 뉴런(neuron)들로 지칭될 수도 있다. 신경망은 적어도 하나 이상의 노드들을 포함하여 구성된다. 데이터 구조는 신경망에 입력되는 데이터를 포함할 수 있다. 신경망에 입력되는 데이터를 포함하는 데이터 구조 는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망에 입력되는 데이터는 신경망 학습 과정에서 입력되는 학습 데이터 및/또는 학습이 완료된 신경망에 입력되는 입력 데이터를 포함할 수 있다. 신경망에 입력되는 데이터는 전처리(pre-processing)를 거친 데이터 및/또는 전처리 대상이 되는 데이터를 포함할 수 있다. 전처리는 데이터 를 신경망에 입력시키기 위한 데이터 처리 과정을 포함할 수 있다. 따라서 데이터 구조는 전처리 대상이 되는 데이터 및 전처리로 발생되는 데이터를 포함할 수 있다. 전술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한 되지 않는다. 데이터 구조는 신경망의 가중치를 포함할 수 있다 (본 개시내용에서 가중치, 파라미터는 동일한 의미로 사용될 수 있다), 신경망의 가중치를 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망은 복수개 의 가중치를 포함할 수 있다. 가중치는 가변적일 수 있으며, 신경망이 원하는 기능을 수행하기 위해, 사용자 또 는 알고리즘에 의해 가변 될 수 있다. 예를 들어, 하나의 출력 노드에 하나 이상의 입력 노드가 각각의 링크에 의해 상호 연결된 경우, 출력 노드는 상기 출력 노드와 연결된 입력 노드들에 입력된 값들 및 각각의 입력 노드 들에 대응하는 링크에 설정된 가중치에 기초하여 출력 노드에서 출력되는 데이터 값을 결정할 수 있다. 전술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한되지 않는다. 제한이 아닌 예로서, 가중치는 신경망 학습 과정에서 가변되는 가중치 및/또는 신경망 학습이 완료된 가중치를 포함할 수 있다. 신경망 학습 과정에서 가변되는 가중치는 학습 사이클이 시작되는 시점의 가중치 및/또는 학습 사이클 동안 가변되는 가중치를 포함할 수 있다. 신경망 학습이 완료된 가중치는 학습 사이클이 완료된 가중치 를 포함할 수 있다. 따라서 신경망의 가중치를 포함한 데이터 구조는 신경망 학습 과정에서 가변되는 가중치 및 /또는 신경망 학습이 완료된 가중치를 포함한 데이터 구조를 포함할 수 있다. 그러므로 상술한 가중치 및/또는 각 가중치의 조합은 신경망의 가중치를 포함한 데이터 구조에 포함되는 것으로 한다. 전술한 데이터 구조는 예 시일 뿐 본 개시는 이에 제한되지 않는다. 신경망의 가중치를 포함한 데이터 구조는 직렬화(serialization) 과정을 거친 후 컴퓨터 판독가능 저장 매체(예 를 들어, 메모리, 하드 디스크)에 저장될 수 있다. 직렬화는 데이터 구조를 동일하거나 다른 컴퓨팅 디바이스에 저장하고 나중에 다시 재구성하여 사용할 수 있는 형태로 변환하는 과정일 수 있다. 컴퓨팅 디바이스는 데이터 구조를 직렬화하여 네트워크를 통해 데이터를 송수신할 수 있다. 직렬화된 신경망의 가중치를 포함한 데이터 구 조는 역직렬화(deserialization)를 통해 동일한 컴퓨팅 디바이스 또는 다른 컴퓨팅 디바이스에서 재구성될 수 있다. 신경망의 가중치를 포함한 데이터 구조는 직렬화에 한정되는 것은 아니다. 나아가 신경망의 가중치를 포 함한 데이터 구조는 컴퓨팅 디바이스의 자원을 최소한으로 사용하면서 연산의 효율을 높이기 위한 데이터 구조 (예를 들어, 비선형 데이터 구조에서 B-Tree, R-Tree, Trie, m-way search tree, AVL tree, Red-Black Tree)를 포함할 수 있다. 전술한 사항은 예시일 뿐 본 개시는 이에 제한되지 않는다. 데이터 구조는 신경망의 하이퍼 파라미터(Hyper-parameter)를 포함할 수 있다. 그리고 신경망의 하이퍼 파라미 터를 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 하이퍼 파라미터는 사용자에 의해 가변되 는 변수일 수 있다. 하이퍼 파라미터는 예를 들어, 학습률(learning rate), 비용 함수(cost function), 학습 사이클 반복 횟수, 가중치 초기화(Weight initialization)(예를 들어, 가중치 초기화 대상이 되는 가중치 값의 범위 설정), Hidden Unit 개수(예를 들어, 히든 레이어의 개수, 히든 레이어의 노드 수)를 포함할 수 있다. 전 술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한되지 않는다. 도 3은 본 개시내용의 일 실시예에 따라 신경망 모델을 구현하기 위한 방법을 예시적으로 도시한다. 일례로, 도 3에서의 방법은 컴퓨팅 디바이스에 의해 수행될 수 있다. 일례로, 도 3에서의 방법은 컴퓨팅 디바이스 내의 신경망 모델에 의해 구현될 수 있다. 도 3에서의 단계들은 설명의 목적으로 기재된 것으로, 구현 양태에 따라 추가적인 단계들이 도 3에 포함되거나 또는 도 3에서의 단계들 중 일부가 생략될 수도 있다. 일 실시예에서, 컴퓨팅 디바이스는 입력 데이터를 수신할 수 있다. 예를 들어, 입력 데이터는 객체를 포함하는 이미지를 포함할 수 있다. 예를 들어, 입력 데이터는 텍스트를 포함할 수 있다. 예를 들어, 입력 데이 터는 객체에 대한 세그멘테이션을 수행하기 위한 대상을 나타낼 수 있다. 일 실시예에서, 신경망 모델은 인코더 신경망, 디코더 신경망 및 후처리 모듈을 포함할 수 있다. 여기서 인코더 신경망은 인코더와 상호 교환가능하게 사용될 수 있으며, 디코더 신경망은 디코더와 상호 교환 가능하게 사용될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 수신된 입력 데이터에 기초하여, 인코더 레이어들 각각으로부터의 인코 딩 피쳐들을 생성할 수 있다. 일 실시예에서, 신경망 모델의 인코더 신경망은 복수의 인코더 레이어들을 포함할 수 있으며, 복수의 인코더 레 이어들 각각은 인코딩 피쳐를 생성할 수 있다. 예컨대, 하나의 인코더 레이어는 하나의 인코딩 피쳐를 생성할 수 있다. 여기서의 피쳐는 예를 들어, 피쳐맵을 나타낼 수 있다. 여기서의 피쳐는 예를 들어, N차원의 벡터 표 현을 나타낼 수 있다. 여기서의 N은 2 이상의 자연수를 나타낼 수 있다. 예를 들어, 인코딩 피쳐는 입력 데이터 의 특징들이 추출된 결과 데이터를 포함할 수 있다. 예를 들어, 인코딩 피쳐는 입력 데이터의 특징을 벡터화된 표현으로 나타낸 데이터를 포함할 수 있다. 예를 들어, 인코딩 피쳐는 입력된 데이터에 비해 저차원의 표현 (representation)을 나타낼 수 있으며, 인코더 신경망은 입력된 데이터를 잠재 공간 상에서의 저차원의 표현으 로 압축할 수 있다. 일 실시예에서, 인코더 신경망 내에서 인코더 레이어들은 서로 직렬 연결을 통해 연결될 수 있다. 예를 들어, 인코더 신경망 내에서 인코더 레이어들은 제 1 방향으로 직렬 연결될 수 있다. 본 개시내용의 일 실시예에서, 제 1 방향은 인코더 신경망 내에서의 데이터가 전달되는 방향을 의미할 수 있다. 예를 들어, 인코더 신경망 내에서 제 1 인코더 레이어의 출력은 제 2 인코더 레이어로 입력되고, 제 2 인코더 레이어의 출력은 제 3 인코더 레이어로 입력되고, 그리고 제 3 인코더 레이어의 출력은 제 4 인코더 레이어로 입력될 수 있다. 이러한 예시에서, 제 1 인코더 레이어, 제 2 인코더 레이어, 제 3 인코더 레이어 및 제 4 인코 더 레이어로의 순서가 제 1 방향에 대응될 수 있다. 이러한 예시에서, 제 1 인코더 레이어와 제 2 인코더 레이 어가 직렬 연결을 통해 연결되고, 제 2 인코더 레이어와 제 3 인코더 레이어가 직렬 연결을 통해 연결되고, 그 리고 제 3 인코더 레이어와 제 4 인코더 레이어가 직렬 연결을 통해 연결될 수 있다. 이러한 직렬 연결을 통해, 제 1 인코더 레이어의 출력에 기초하여 제 2 인코더 레이어가 동작 및/또는 학습될 수 있으며, 제 2 인코더 레이어의 출력에 기초하여 제 3 인코더 레이어가 동작 및/또는 학습될 수 있으며, 그리 고 제 3 인코더 레이어의 출력에 기초하여 제 4 인코더 레이어가 동작 및/또는 학습될 수 있다. 본 개시내용에서는 설명의 편의를 위해 4개의 인코더 레이어들을 포함하는 인코더 신경망 및 4개의 디코더 레이 어들을 포함하는 디코더 신경망을 예시로 들어 설명하고자 한다. 당업자는 임의의 개수의 인코더 레이어들 및 디코더 레이어들로 구성되는 신경망 모델 또한 본 개시내용의 권리범위 내에 포함된다는 점을 인식할 것이다. 일 실시예에서, 컴퓨팅 디바이스는 인코더 레이어들 각각으로부터 생성되는 인코딩 피쳐들에 기초하여, 디 코더 레이어들 각각으로부터의 디코딩 피쳐들을 생성할 수 있다. 일 실시예에서, 인코더 레이어들 각각으로부터 생성되는 인코딩 피쳐들을 이용하여, 디코더 신경망은 디코딩 피 쳐들을 출력할 수 있다. 일 실시예에서, 일 실시예에서, 신경망 모델의 디코더 신경망은 복수의 디코더 레이어들을 포함할 수 있으며, 복수의 디코더 레이어들 각각은 디코딩 피쳐를 생성할 수 있다. 예컨대, 하나의 디코더 레이어는 하나의 디코딩 피쳐를 생성할 수 있다. 디코딩 피쳐는 인코딩 피쳐들에 기초하여 생성되도록 학습될 수 있다. 일례로, 디코딩 피쳐는 압축된 표현으로부터 오리지널 데이터를 재구성한 결과를 포함할 수 있다. 본 개시내용에서의 인코딩 피쳐 및/또는 디코딩 피쳐는 인코더 레이어 및/또는 디코더 레이어에 의한 추론 동작 의 결과물을 나타낼 수 있다. 일 실시예에서, 디코더 신경망 내에서 디코더 레이어들은 서로 직렬 연결을 통해 연결될 수 있다. 본 개시내용 의 일 실시예에서, 제 1 방향은 인코더 신경망 내에서의 데이터가 전달되는 방향을 의미할 수 있다. 예를 들어,디코더 신경망 내에서 디코더 레이어들은 제 2 방향으로 직렬 연결될 수 있다. 여기서의 제 2 방향은 인코더 레 이어들이 연결되는 방향인 제 1 방향과 반대 방향 또는 역방향을 의미할 수 있다. 본 개시내용에서의 제 1 방향 및 제 2 방향은 인코더 신경망 및 디코더 신경망 내에서의 데이터가 일방향으로 전달되는 흐름의 방향을 나타낼 수 있다. 예를 들어, 디코더 신경망 내에서 제 1 디코더 레이어의 출력은 제 2 디코더 레이어로 입력되고, 제 2 디코더 레이어의 출력은 제 3 디코더 레이어로 입력되고, 그리고 제 3 디코더 레이어의 출력은 제 4 디코더 레이어로 입력될 수 있다. 이러한 예시에서, 제 1 디코더 레이어, 제 2 디코더 레이어, 제 3 디코더 레이어 및 제 4 디코 더 레이어로의 순서가 제 2 방향에 대응될 수 있다. 이러한 예시에서, 제 1 디코더 레이어와 제 2 디코더 레이 어가 직렬 연결을 통해 연결되고, 제 2 디코더 레이어와 제 3 디코더 레이어가 직렬 연결을 통해 연결되고, 그 리고 제 3 디코더 레이어와 제 4 디코더 레이어가 직렬 연결을 통해 연결될 수 있다. 이러한 직렬 연결을 통해, 제 1 디코더 레이어의 출력에 기초하여 제 2 디코더 레이어가 동작 및/또는 학습될 수 있으며, 제 2 디코더 레이어의 출력에 기초하여 제 3 디코더 레이어가 동작 및/또는 학습될 수 있으며, 그리 고 제 3 디코더 레이어의 출력에 기초하여 제 4 디코더 레이어가 동작 및/또는 학습될 수 있다. 기존의 U-NET의 동작 구조와는 달리 본 개시내용의 일 실시예에 따른 신경망 모델은 디코더들 간의 직렬 연결 과정에서 업샘플링이 수행될 필요가 제거될 수 있다. 기존의 U-NET은 제 1 디코더 레이어의 출력에 대한 업샘플 링 또는 업컨볼루션 등이 수행된 결과가 제 2 디코더 레이어의 입력으로 사용되었다. 이에 따라, 디코더 레이어 들 간에 데이터가 전달되는 과정에서, 정보의 손실이 발생될 가능성이 존재하였다. 본 개시내용의 일 실시예에 따른 기법은, 인코더 신경망 및 디코더 신경망의 연결 구조를 사용하고 그리고 후속적으로 설명될 혼합 어텐션 을 사용함에 따라 제 2 방향으로 디코더 레이어들 간의 데이터의 전달 과정에서 업샘플링이 수행될 필요성을 제 거할 수 있다. 본 개시내용의 일 실시예에서, 디코더 신경망은 인코더 신경망과 측면 결합(lateral connection) 또는 스킵 결 합(skip connection)을 통해 상호 연결될 수 있다. 예를 들어, 제 1 인코더 레이어의 출력은 제 4 디코더 레이 어로 입력되고, 제 2 인코더 레이어의 출력은 제 3 디코더 레이어로 입력되고, 제 3 인코더 레이어의 출력은 제 2 디코더 레이어로 입력되고, 그리고 제 4 인코더 레이어의 출력은 제 1 디코더 레이어로 입력될 수 있다. 이러 한 예시에서, 인코더 신경망의 데이터 흐름의 방향과 디코더 신경망의 데이터 흐름의 방향이 서로 반대되기 때 문에, 제 1 인코더 레이어와 제 4 디코더 레이어가 서로 대응되는 레이어로 고려될 수 있다. 전술한 바와 같이, 본 개시내용의 일 실시예에 따른 디코더 신경망의 디코어 레이어들은 이전 디코더 레이어로부터의 이전 디코딩 피쳐 및 대응되는 계층(hierarchy)의 인코더 레이어로부터의 인코딩 피쳐를 이용하여 디코딩 피쳐를 생성 또는 출력할 수 있다. 이러한 측면 연결 및 직렬 연결이 조합됨에 따라서, 인코더 레이어들 중 제 1 인코더 레이어에 의해 생성되는 제 1 인코딩 피쳐는, 디코더 신경망에서 상기 제 1 인코더 레이어와 측면 연결을 통해 연결되는 제 1 측면 디코 더 레이어 및 상기 제 1 인코더 레이어와 직렬 연결을 통해 연결되는 제 2 인코더 레이어로 양방향으로 전달될 수 있다. 본 개시내용에서의 “측면 디코더 레이어”는 인코더 레이어의 관점에서의 디코더 레이어를 지칭하기 위한 표현 이며, 제 1 측면 디코더 레이어는 제 1 인코더 레이어와 측면 연결을 갖는 디코더 레이어 또는 제 1 인코더 레 이어와 대응되는 디코더 레이어를 나타내기 위해 사용될 수 있다. 예를 들어, 제 1 측면 디코더 레이어는 제 1 인코더 레이어와 대응되는 제 4 디코더 레이어를 의미할 수 있다. 일 실시예에서, 측면 디코더 레이어로부터 획 득되는 피쳐는 측면 디코더 피쳐로 지칭될 수 있다. 본 개시내용에서의 “측면 인코더 레이어”는 디코더 레이어의 관점에서의 인코더 레이어를 지칭하기 위한 표현 이며, 제 1 측면 인코더 레이어는 제 1 디코더 레이어와 측면 연결을 갖는 인코더 레이어 또는 제 1 디코더 레 이어와 대응되는 인코더 레이어를 나타내기 위해 사용될 수 있다. 예를 들어, 제 1 측면 인코더 레이어는 제 1 디코더 레이어와 대응되는 제 4 인코더 레이어를 의미할 수 있다. 일 실시예에서, 측면 인코더 레이어로부터 획 득되는 피쳐는 측면 인코더 피쳐로 지칭될 수 있다. 이러한 측면 연결 및 직렬 연결이 조합됨에 따라서, 디코더 레이어들 중 제 1 디코더 레이어에 의해 생성되는 제 1 디코딩 피쳐는, 상기 제 1 디코더 레이어와 직렬 연결을 통해 연결되는 제 2 디코더 레이어 및 후처리 모 듈로 양방향으로 전달될 수 있다. 예를 들어, 제 1 디코딩 피쳐는, 제 1 디코더 레이어의 다음 레이어에 대응되 는 제 2 디코더 레이어에서, 다른 인코더 레이어들로부터의 인코딩 피쳐들과 함께 사용될 수 있다. 이와 함께,제 1 디코더 레이어로부터 추론된 제 1 디코딩 피쳐는, 후처리 모듈로 전달되어 다른 디코더 레이어들로부터 추 론된 디코딩 피쳐들과 결합(예컨대, 연접)되어, 입력 데이터에 대응되는 출력 데이터(예컨대, 입력 데이터에 대 한 이미지 분석 결과, 객체 세그멘테이션 결과 및/또는 객체 분류 결과 등)를 생성하는데 사용될 수 있다. 일 실시예에서, 컴퓨팅 디바이스는 디코더 레이어들 각각으로부터 생성되는 디코딩 피쳐들에 기초하여 입 력 데이터에 대한 처리 결과를 포함하는 출력 데이터를 생성할 수 있다. 일 실시예에서, 신경망 모델의 후처리 모듈은 디코더 레이어들 각각으로부터 생성되는 디코딩 피쳐들에 기초하 여 입력 데이터에 대한 처리 결과를 포함하는 출력 데이터를 생성할 수 있다. 구현 양태에 따라서, 후처리 모듈 은 디코더 신경망에 포함되도록 구현될 수도 있다. 일 실시예에서, 컴퓨팅 디바이스는 후처리 모듈을 통해 출력 데이터를 생성할 때, 연접 연산 (concatenation operation)을 이용하여 디코딩 피쳐들을 처리할 수 있다. 예를 들어, 후처리 모듈은 디코딩 피 쳐들 중 적어도 일부는 업샘플링되고 그리고 업샘플링된 디코딩 피쳐들을 연접함으로써, 출력 데이터를 생성할 수 있다. 예를 들어, 후처리 모듈은 디코더 레이어들 중 제 2 방향에서의 마지막(last) 디코더 레이어를 제외한 나머지 디코더 레이어들 각각으로부터 생성되는 디코딩 피쳐들을 업샘플링할 수 있다. 일 실시예에서, 마지막 디코더 레이어의 마지막 디코딩 피쳐와 대응되는 크기를 갖기 위한 이러한 업샘플링 연 산이 디코딩 피쳐들에 적용될 수 있다. 후처리 모듈은 업샘플링된 디코딩 피쳐들 및 마지막 디코더 레이어로부 터 생성된 마지막 디코딩 피쳐를 연접함으로써 출력 데이터를 생성할 수 있다. 일 실시예에서, 입력 데이터가 객체를 포함하는 이미지인 경우를 가정한다. 이러한 가정 하에서, 출력 데이터는 이미지 내에서 객체에 대한 세그멘테이션 결과를 포함할 수 있다. 일 실시예에서, 연접 연산이 수행된 디코딩 피쳐들은 다층 퍼셉트론(multi-layer perceptron, MLP)으로 전달되어, 출력 데이터를 생성하는데 사용될 수 있 다. 예를 들어, MLP는 퍼셉트론으로 이루어진 여러 개의 레이어들을 순차적으로 붙여놓은 구조를 포함할 수 있 다. 제한이 아닌 예시로, 이러한 MLP는 정방향 인공신경망(feed-forward deep neural network, FFDNN)으로 지 칭될 수도 있다. 일 실시예에서, 입력 데이터는 H * W * 3의 크기를 가질 수 있다. 여기서 H는 Height를 W는 Width를 나타낼 수 있고, 3은 채널의 개수를 나타낼 수 있다. 일 실시예에서, 제 1 인코더 레이어의 출력(예컨대, 인코딩 피쳐) 맟 상기 제 1 인코더 레이어에 대응되는 제 4 디코더 레이어의 출력(예컨대, 디코딩 피쳐)은 H/4 * W/4 * C1으로 표현될 수 있다. 일 실시예에서, 제 2 인코더 레이어의 출력 및 상기 제 2 인코더 레이어에 대응되는 제 3 디코 더 레이어의 출력은 H/8 * W/8 * C2로 표현될 수 있다. 일 실시예에서, 제 3 인코더 레이어의 출력 및 상기 제 3 인코더 레이어에 대응되는 제 2 디코더 레이어의 출력은 H/16 * W/16 * C3으로 표현될 수 있다. 일 실시예에 서, 제 4 인코더 레이어의 출력 및 상기 제 4 인코더 레이어에 대응되는 제 1 디코더 레이어의 출력은 H/32 * W/32 * C4로 표현될 수 있다. 일 실시예에서, 디코더 신경망 또는 후처리 모듈에 의해 출력되는 출력 데이터는 H/4 * W/4 * Ncls로 표현될 수 있다. 여기서의 C와 N은 채널 또는 채널 임베딩을 나타낼 수 있다. 전술한 예시에서 기재되는 바와 같이, 측면 연결을 가지는 인코더 레이어와 디코더 레이어의 출력들(피쳐들)은 서로 대응되는 크기를 가질 수 있다. 이러한 예시에서, 인코더 레이어들은 데이터의 전달 방향(예컨대, 제 1 방 향)에 따라 후속 인코더 레이어로 이동할 때 마다, 점진적으로 작은 크기의 출력을 생성할 수 있으며, 그리고 디코더 레이어들은 데이터의 전달 방향(예컨대, 제 2 방향)에 따라 후속 디코더 레이어로 이동할 때 마다 점진 적으로 큰 크기의 출력을 생성할 수 있다. 도 4는 본 개시내용의 일 실시예에 따른 신경망 모델의 구조를 예시적으로 도시한다. 도 4에서 도시되는 신경망 모델은, 설명의 목적으로 4개의 인코더 레이어들을 포함하는 인코더 신경망 및 4개의 디코더 레이어들을 포함하는 디코더 신경망을 포함하도록 예시적으로 도시되었다. 구현 양태에 따라, 도 4에서 의 레이어들의 개수 등이 가변될 수 있다는 점은 당업자에 의해 명백할 것이다. 본 개시의 일 실시예에 따른 신경망 모델 또는 네트워크 함수로서 트랜스포머(transformer)가 고려될 수 있다. 일례로, 본 개시내용의 신경망 모델의 인코더 신경망 및/또는 디코더 신경망은 트랜스포머 기반으로 동작될 수 있다. 이러한 인코더 신경망 및/또는 디코더 신경망은 예를 들어 어텐션 알고리즘이 적용된 순환 신경망 또는 어텐션 알고리즘이 적용된 트랜스포머를 사용하여 동작될 수 있다. 일 실시예에서, 트랜스포머는 임베딩된 데이터들을 인코딩하는 인코더(또는 인고터 신경망) 및 인코딩된 데이터 들을 디코딩하는 디코더(또는 디코더 신경망)로 구성될 수 있다. 트랜스포머는 일련의 데이터(a series ofdata)들을 수신하여, 인코딩 및 디코딩 단계를 거처 상이한 타입의 일련의 데이터들을 출력하는 구조를 지닐 수 있다. 일 실시예에서, 일련의 데이터들은 트랜스포머가 연산가능한 형태로 가공될 수 있다. 일련의 데이터들을 트랜스포머가 연산가능한 형태로 가공하는 과정은 임베딩 과정을 포함할 수 있다. 데이터 토큰, 임베딩 벡터 및 임베딩 토큰 등과 같은 표현들은, 트랜스포머가 처리할 수 있는 형태로 임베딩된 데이터들을 지칭하는 것일 수 있다. 트랜스포머가 일련의 데이터들을 인코딩 및 디코딩하기 위하여, 트랜스포머 내의 인코더 및 디코더들을 어텐션 알고리즘을 활용하여 처리할 수 있다. 일례로, 어텐션 알고리즘이란 주어진 쿼리(Query)에 대해, 하나 이상의 키(Key)에 대한 유사도를 구하고, 이렇게 주어진 유사도를, 각각의 키(Key)와 대응하는 값(Value)에 반영한 후, 유사도가 반영된 값(Value)들을 가중합하여 어텐션 값을 계산하는 알고리즘을 의미할 수 있다. 쿼리(Query), 키(Key) 및 값(Value)를 어떻게 설정하느냐에 따라, 다양한 종류의 어텐션 알고리즘이 생성될 수 있다. 예를 들어, 쿼리, 키 및 값을 모두 동일한 입력 계층 (또는 도메인)으로부터 획득하여 어텐션을 구하는 경우, 이는 셀프-어텐션 알고리즘으로 정의될 수 있다. 입력된 일련의 데이터들을 병렬로 처리하기 위해, 임베 딩 벡터를 차원을 축소하여, 각 분할된 임베딩 벡터에 대해 개별적인 어텐션 헤드를 구하여 어텐션을 구하는 경 우, 이는 멀티-헤드(multi-head) 어텐션 알고리즘으로 정의될 수 있다. 일 실시예에서, 트랜스포머는 복수의 멀티-헤드 어텐션 알고리즘 또는 멀티-헤드 인코더-디코더 알고리즘을 수 행하는 모듈들로 구성될 수 있다. 일 실시예에서, 트랜스포머는 혼합 어텐션 알고리즘을 수행하는 모듈들로 구 성될 수 있다. 일 실시예에서, 트랜스포머는 임베딩 레이어, 정규화 레이어, 소프트맥스(softmax) 층 등 어텐션 알고리즘이 아닌 부가적인 구성요소들 또한 포함할 수 있다. 어텐션 알고리즘을 이용하여 트랜스포머를 구성하 는 방법은 Vaswani et al., Attention Is All You Need, 2017 NIPS에 개시된 방법을 포함할 수 있으며, 이는 여기에 참조로서 통합된다. 트랜스포머는 임베딩된 자연어, 임베딩된 시퀀스 정보, 분할된 이미지 데이터, 오디오 파형 등 다양한 데이터 도메인에 적용하여, 일련의 입력 데이터를 일련의 출력 데이터로 변환할 수 있다. 다양한 데이터 도메인을 가진 데이터들을 트랜스포머에 입력가능한 일련의 데이터들로 변환하기 위해, 트랜스포머는 데이터들을 임베딩할 수 있다. 트랜스포머는 일련의 입력 데이터 사이의 상대적 위치관계 또는 위상관계를 표현하는 추가적인 데이터를 처리할 수 있다. 또는 일련의 입력 데이터에 입력 데이터들 사이의 상대적인 위치관계 또는 위상관계를 표현하 는 벡터들이 추가적으로 반영되어 일련의 입력 데이터가 임베딩될 수 있다. 일 예에서, 일련의 입력 데이터 사 이의 상대적 위치관계는, 이미지 내의 객체 간의 위치 관계, 자연어 문장 내에서의 어순, 각각의 분할된 이미지 의 상대적 위치 관계, 분할된 오디오 파형의 시간 순서 등을 포함할 수 있으나, 이에 제한되지 않는다. 일련의 입력 데이터들 사이의 상대적인 위치관계 또는 위상관계를 표현하는 정보를 추가하는 과정은 위치 인코딩 (positional encoding)으로 지칭될 수 있다. 이미지 데이터를 임베딩하여 트랜스포머를 구현하는 방법의 일 예는 Dosovitskiy, et al., AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE에 개시되어 있으며, 해당 문서는 본 개시내용의 참조로 통합된다. 도 4에서 도시되는 신경망 모델은 입력 데이터를 수신하고 그리고 입력 데이터에 대응되는 인코딩 피 쳐들(E1, E2, E3 및 E4)을 생성하도록 구성되는 인코더 신경망(420a, 420b, 420c 및 420d)을 포함할 수 있다. 이러한 인코더 신경망은 제 1 인코더 레이어(420a), 제 2 인코더 레이어(420b), 제 3 인코더 레이어(420c) 및 제 4 인코더 레이어(420d)를 포함할 수 있다. 제 1 인코더 레이어(420a), 제 2 인코더 레이어(420b), 제 3 인코 더 레이어(420c) 및 제 4 인코더 레이어(420d) 각각은 입력된 정보를 이용하여 인코딩 피쳐들(E1, E2, E3 및 E4)을 생성할 수 있다. 본 개시내용에서의 “레이어”는 하나 이상의 레이어들로 구성되는 스테이지(stage)를 포괄하도록 사용될 수 있 다. 하나의 스테이지에는 스테이지의 깊이(depth)에 따라 복수의 레이어들이 포함될 수 있다. 본 개시내용에서의 레이어와 스테이지는 서로 상호 교환 가능하게 사용될 수 있다. 일례로, 본 개시내용의 일 실시예는 스테이지 내의 모든 레이어들의 출력들이 동일하다는 특징을 이용하여 어느 구간에서나 특징을 자유롭 게 뽑을 수 있다는 장점을 가질 수 있다. 도 4에서 도시되는 예시와 같이, 제 1 인코더 레이어(420a), 제 2 인코더 레이어(420b), 제 3 인코더 레이어 (420c) 및 제 4 인코더 레이어(420d)은 제 1 인코더 레이어(420a)로부터 제 4 인코더 레이어(420d)로의 순서로 직렬 연결을 통해 서로 연결될 수 있다. 예를 들어, 제 1 인코더 레이어(420a)의 출력(E1)이 제 2 인코더 레이어(420b)의 입력으로 사용되고, 제 2 인코더 레이어(420b)의 출력(E2)이 제 3 인코더 레이어(420c)의 입력으로 사용되고, 그리고 제 3 인코더 레이어(420c)의 출력(E3)이 제 4 인코더 레이어(420d)의 입력으로 사용될 수 있 다. 도 4에서 도시되는 바와 같이, 인코더 신경망은 복수의 인코더 레이어들을 누적적으로 적층하는 구조를 이 용하여, 입력 데이터에 대응되는 정보(예컨대, 인코딩 피쳐들)을 추출할 수 있다. 본 개시내용의 일 실시예에서, 인코더 신경망과 디코더 신경망에서 서로 대응되는 레이어들은 측면 연결(또는 스킵 연결)을 통해 서로 연결될 수 있다. 예를 들어, 제 1 인코더 레이어(420a)의 출력(E1)은, 직렬 연결을 통 해 연결되는 제 2 인코더 레이어(420b)로 전달되고 그리고 측면 연결을 통해 연결되는 제 4 디코더 레이어 (430d)로 전달될 수 있다. 예를 들어, 제 2 인코더 레이어(420b)의 출력(E2)은, 직렬 연결을 통해 연결되는 제 3 인코더 레이어(420c)로 전달되고 그리고 측면 연결을 통해 연결되는 제 3 디코더 레이어(430c)로 전달될 수 있다. 예를 들어, 제 3 인코더 레이어(420c)의 출력(E3)은, 직렬 연결을 통해 연결되는 제 4 인코더 레이어 (420d)로 전달되고 그리고 측면 연결을 통해 연결되는 제 2 디코더 레이어(430b)로 전달될 수 있다. 예를 들어, 제 4 인코더 레이어(420d)의 출력(E4)은, 측면 연결을 통해 연결되는 제 1 디코더 레이어(430a)로 전달될 수 있 다. 도 4에서 도시되는 바와 같이, 디코더 신경망은 복수의 디코더 레이어들을 누적적으로 적층하는 구조를 이용하 여, 인코딩 피쳐들에 대응되는 정보(예컨대, 디코딩 피쳐들)을 추출할 수 있다. 도 4에서 도시되는 신경망 모델은 디코딩 피쳐들(D1, D2, D3 및 D4)을 생성하고 그리고/또는 입력 데이터 에 대응되는 출력 데이터를 생성하도록 구성되는 디코더 신경망(430a, 430b, 430c 및 430d)을 포함할 수 있다. 이러한 디코더 신경망은 제 1 디코더 레이어(430a), 제 2 디코더 레이어(430b), 제 3 디코더 레이어 (430c) 및 제 4 디코더 레이어(430d)를 포함할 수 있다. 제 1 디코더 레이어(430a), 제 2 디코더 레이어 (430b), 제 3 디코더 레이어(430c) 및 제 4 디코더 레이어(430d) 각각은 입력된 정보를 이용하여 디코딩 피쳐들 (D4, D3, D2 및 D1)을 생성할 수 있다. 도 4에서 도시되는 예시와 같이, 제 1 디코더 레이어(430a), 제 2 디코더 레이어(430b), 제 3 디코더 레이어 (430c) 및 제 4 디코더 레이어(430d)은 제 1 디코더 레이어(430a)로부터 제 4 디코더 레이어(430d)로의 순서로 직렬 연결을 통해 서로 연결될 수 있다. 예를 들어, 제 1 디코더 레이어(430a)의 출력(D4)이 제 2 디코더 레이 어(430b)의 입력으로 사용되고, 제 2 디코더 레이어(430b)의 출력(D3)이 제 3 디코더 레이어(430c)의 입력으로 사용되고, 그리고 제 3 디코더 레이어(430c)의 출력(D2)이 제 4 디코더 레이어(430d)의 입력으로 사용될 수 있 다. 도 4에서 예시되는 바와 같이, 인코더 신경망의 인코더 레이어들(420a, 420b, 420c 및 420d)의 직렬 연결의 방 향과 디코더 신경망의 디코더 레이어들(430a, 430b, 430c 및 430d)의 직렬 연결의 방향은 서로 반대되는 방향일 수 있다. 제한이 아닌 예시로, 본 개시내용에서의 직렬 연결이란 순차적으로 연결된 레이어들 간의 단일 방향 (one-way)의 데이터 전송 흐름을 나타낼 수 있다. 이러한 직렬 연결 구조를 통해, 본 개시내용의 일 실시에에 따른 신경망 모델은 디코더 신경망 및 인코더 신경 망 각각에서 이전 디코더 레이어 또는 이전 인코더 레이어에서 학습된 정보 또는 출력된 정보가 다음 디코더 레 이어 또는 다음 인코더 레이어로 전달될 수 있다. 이러한 측면 연결 구조를 통해, 본 개시내용의 일 실시예에 따른 신경망 모델은, 인코더 레이어들 각각에서 학 습된 정보가 디코더 레이어들 각각에서 활용될 수 있도록 구성될 수 있다. 이러한 직렬 연결 및 측면 연결의 조합 구조를 통해, 본 개시내용의 일 실시예에 따른 신경망 모델은, 서로 다 른 계층(hierarchy)으로부터 얻게 되는 두개의 특징 정보를 입력으로 사용할 수 있다. 본 개시내용에서의 계층 (hierarchy)은 직렬 연결된 레이어들의 선후 관계 및 대응 관계를 나타내기 위해 사용될 수 있다. 예를 들어, 인코더 신경망 및 디코더 신경망 각각은 4개의 레이어들로 이루어진 계층 구조를 가질 수 있다. 제 1 인코더 레이어(420a)의 다음 계층은 제 2 인코더 레이어(420b)로 고려될 수 있으며, 제 1 디코더 레이어 (430a)의 다음 계층은 제 2 디코더 레이어(430b)로 고려될 수 있다. 또한, 이러한 계층 구조에서, 제 1 인코더 레이어(420a)와 제 4 디코더 레이어(430d)는 서로 동일한 계층을 가질 수 있다. 제 2 인코더 레이어(420b)와 제 3 디코더 레이어(430c)는 서로 동일한 계층을 가질 수 있다. 제 3 인코더 레이어(420c)와 제 2 디코더 레이어 (430b)는 서로 동일한 계층을 가질 수 있다. 제 4 인코더 레이어(420d)와 제 1 디코더 레이어(430a)는 서로 동 일한 계층을 가질 수 있다. 또한, 제 2 디코더 레이어(430b)는 제 3 디코더 레이어(430c)의 이전 계층을 의미할 수 있다. 일 실시예에서, 제 1 디코더 레이어(430a)과 제 4 인코더 레이어(420d)는 서로 대응되는 계층으로 고려될 수 있 다. 제 1 디코더 레이어(430a)는 모든 인코더 특징들(E1, E2, E3 및 E4)의 통합 결과(즉, 인코딩 통합 결과)를 이전 계층으로부터 획득되는 정보로서 고려할 수 있다. 또한, 제 2 디코더 레이어(430b)와 제 3 인코더 레이어 (420c)는 서로 대응되는 계층으로 고려될 수 있다. 제 2 디코더 레이어(430b)는 모든 인코더 특징들(E1, E2, E3 및 E4)의 통합 결과(즉, 인코딩 통합 결과)와 이전 계층(즉, 제 1 디코더 레이어)의 출력(D1)을 이전 계층으로 부터 획득되는 정보로서 고려할 수 있다. 또한, 제 3 디코더 레이어(430c)와 제 2 인코더 레이어(420b)는 서로 대응되는 계층으로 고려될 수 있다. 제 3 디코더 레이어(430c)는 모든 인코더 특징들(E1, E2, E3 및 E4)의 통합 결과(즉, 인코딩 통합 결과)와 이전 계층(제 1 디코더 레이어 및 제 2 디코더 레이어)의 출력들(D1 및 D2)을 이 전 계층으로부터 획득되는 정보로 고려할 수 있다. 또한, 제 4 디코더 레이어(430d)와 제 1 인코더 레이어 (420a)는 서로 대응되는 계층으로 고려될 수 있으며, 제 4 디코더 레이어(430d)는, 모든 인코더 특징들(E1, E2, E3 및 E4)의 통합 결과(즉, 인코딩 통합 결과)와 이전 계층(제 1 디코더 레이어, 제 2 디코더 레이어 및 제 3 디코더 레이어)의 출력들(D1, D2 및 D3)을 이전 계층으로부터 획득되는 정보로 고려할 수 있다. 본 개시내용의 일 실시예에 따른 신경망 모델은 이전 계층에서 획득되는 정보들의 통합 결과 및 대응되는 계층 에서 획득되는 정보를 함께 사용함으로써, 신겨망 모델의 성능(예컨대, 이미지 처리 성능, 추론의 정확성, 추론 속도, 추론 리소스 사용량 등)이 비약적으로 상승될 수 있다. 예를 들어, 본 개시내용의 디코더 신경망의 디코 더 레이어들 각각은, 인코더 레이어들 모두로부터 획득된 인코딩 피쳐들(즉, 인코딩 통합 결과(440a)) 중 적어 도 일부를 이전 디코더 레이어의 디코딩 피쳐가 대체하는 형태의 디코딩 통합 결과를 생성하고 그리고 생성된 디코딩 통합 결과를 다음 디코더 레이어에서 활용할 수 있도록 다음 디코더 레이어로 전달할 수 있다. 다음 디 코더 레이어는 이전 디코더 레이어와 동일한 방식으로 디코딩 출력을 생성할 수 있다. 예를 들어, 다음 디코더 레이어는 이전 디코더 레이어의 디코딩 통합 결과에서 이전 디코더 레이어의 이전 디코더 피쳐에 대응되는 인코 더 피쳐를 상기 이전 디코더 피쳐로 대체하는 형식으로 디코딩 피쳐를 생성할 수 있다. 본 개시내용의 일 실시예에 따른 신경망 모델은 디코더 레이어들(430a, 430b, 430c 및 430d) 각각에서 혼합 어 텐션 알고리즘을 이용하여 디코딩 피쳐들(D4, D3, D2, D1)을 생성할 수 있다. 도 4에서 예시되는 바와 같이, 제 1 디코더 레이어(430a)는 인코더 신경망의 인코더 레이어들(420a, 420b, 420c 및 420d) 각각으로부터 획득되는 인코딩 피쳐들(E1, E2, E3 및 E4)이 통합된 인코딩 통합 결과(440a)를 이용할 수 있다. 예를 들어, 인코딩 통합 결과(440a)는 인코딩 피쳐들(E1, E2, E3 및 E4)이 도 4에서의 예시와 같이 결합 또는 통합된 데이터구조를 나타 낼 수 있다. 또한, 제 1 디코더 레이어(430a)는 제 1 디코더 레이어(430a)와 대응되는 제 4 인코더 레이어 (420d)로부터 획득되는 인코딩 피쳐(E4)를 이용할 수 있다. 일 실시예에서, 제 1 디코더 레이어(430a)는, 대응 관계(즉, 측면 연결)를 갖는 인코더 레이어(즉, 제 4 인코더 레이어(420d))로부터의 인코딩 피쳐(E4)를 쿼리 (Xq)로 사용하고 그리고 인코딩 통합 결과(440a)를 키와 값(Xkv)으로 사용하는 혼합 어텐션 알고리즘을 이용할 수 있다. 일 실시예에서, 제 1 디코더 레이어(430a)는, 상기 혼합 어텐션 알고리즘을 이용하여, 제 1 디코더 레 이어(430a)에 대응되는 디코딩 피쳐(D4)를 생성할 수 있다. 본 개시내용에서의 인코딩 통합 결과(440a)는 인코더 신경망의 모든 인코더 레이어들(420a, 420b, 420c 및 420d) 각각으로부터 생성된 인코딩 피쳐들(E1, E2, E3 및 E4)를 합성한 결과를 나타낼 수 있다. 이러한 인코딩 통합 결과(440a)는 디코더 레이어에서 혼합 어텐션 알고리즘이 적용될 때, 키와 값(Xkv)으로 사용될 수 있다. 이 러한 인코딩 통합 결과(440a)의 적어도 일부는 디코더 레이어들 각각으로 전달되는 과정에서 이전 디코더 레이 어의 출력(예컨대, 디코딩 피쳐)으로 대체될 수 있다. 일 실시예에서, 인코더 레이어들(420a, 420b, 420c 및 420d) 각각으로부터 생성된 인코딩 피쳐들(E1, E2, E3 및 E4)의 크기가 서로 상이할 수 있다. 따라서, 인코딩 통합 결과를 생성하기 위한 합성을 수행하는 과정에서, 가 장 작은 토큰 사이즈를 갖는 E4의 크기를 기준으로 인코딩 피쳐들(예컨대, E1, E2 및 E3)에 대한 압축이 이루어 질 수 있다. 이러한 인코딩 통합 결과를 생성하는데 있어서 사용되는 인코딩 피쳐들의 압축은 아래의 수학식 1 에 의해 구현될 수 있다.수학식 1"}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "인코딩 피쳐들의 압축은, 특정 범위의 데이터 집합에서의 평균값을 출력하는 AveragePooling 함수 및 데이터의 관계가 서로 직선 형태를 나타내는 Linear 함수를 이용하여 구현될 수 있다. Fi j는 인코딩 피쳐를 나타낼 수 있 다. Fi j는 피쳐 세트 Fi에서 j번째 엘리먼트를 표시하기 위해 사용된다. prj는 각각의 레이어의 압축률 (compression ratio) 또는 풀링률(pooling ratio)을 나타낼 수 있다. 여기서 가장 작은 사이즈의 피쳐맵을 가 지는 인코딩 피쳐와 정렬될 수 있도록 피쳐들 각각에 대한 압축률 또는 풀링률이 결정될 수 있다. C는 채널을 나타낼 수 있으며, N은 1보다 큰 자연수에 대응될 수 있다. 일례로, AvgPool 함수는 커널 사이즈(kernel size) 및 스트라이드(stride)를 인자로 사용할 수 있으며, Linear 함수는 입력 채널 및 출력 채널을 인자로 사용할 수 있다. 일 실시예에서, 공간적으로 정렬된 피쳐들은 혼합된 피쳐 Xkv를 생성하기 위하여 채널 차원(channel dimension) 을 따라 연접(concatenation)될 수 있다. 이러한 연접 과정 및 혼합된 피쳐(Xkv)를 생성하기 위한 과정은 이하의 수학식 2에서 예시된다. 수학식 2"}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "여기서 Xi kv는 i번째 엘리먼트(예컨대, i번째 디코더 레이어)에서 사용되는 키와 값을 나타낼 수 있다. 혼합 어 텐션 알고리즘에서 사용되는 키와 값(Xi kv)은 수학식 1에 따른 풀링 또는 압축 결과에 연접 연산을 적용한 결과 를 포함할 수 있다. 또한, 여기서 “if i=1”의 표현은, 최초의 디코더 레이어(430a)는 모든 인코더 레이어들(420a, 420b, 420c 및 420d)의 통합된 인코더 특징들(즉, 인코딩 통합 결과)를 이용한다는 것을 나타낼 수 있다. “otherwise”의 표 현은, 인코딩 통합 결과에서, 이전 계층의 디코더 레이어와 대응되는 인코더 레이어의 인코딩 피쳐는 이전 계층 의 디코더 레이어의 디코딩 피쳐로 대체된다는 것을 나타낼 수 있다. 여기서 N은 레이어의 번호를 나타내며, U 는 대체(replacement)의 개념을 나타내며, Ej는 j번째 인코딩 피쳐를 나타내며, 그리고 Dj는 j번째 디코딩 피쳐 를 나타낼 수 있다. 일 실시예에서, 마지막 인코더 레이어(420d)의 인코딩 동작 이후 (즉 i = 4), 디코더 신경망에서는 E4를 어텐션 알고리즘의 쿼리(Xq)로 사용하고 그리고 모든 인코딩 피쳐들(즉, E1, E2, E3 및 E4)를 합성한 결과를 어텐션 알 고리즘의 키&값(Xkv)으로 사용할 수 있다. 도 4의 예시에서, 디코더 신경망에서 최초(initial) 디코더 레이어에 대응되는 제 1 디코더 레이어(430a)는, 최 초 디코딩 피쳐(D4)를 생성하는데 있어서, 인코딩 피쳐들(E1, E2, E3 및 E4)이 통합된 인코딩 통합 결과(440a) 및 인코더 신경망의 마지막 인코더 레이어(420d)에 의해 생성되는 마지막 인코딩 피쳐(E4)를 이용할 수 있다.최초 디코딩 피쳐(D4)는, 마지막 인코딩 피쳐(E4)가 쿼리(Xq)로 사용되고 그리고 인코딩 통합 결과(440a)가 키 와 값(Xkv)으로 사용되는 혼합 어텐션 알고리즘을 이용하여 생성될 수 있다. 본 개시내용의 일 실시예에서, 디코더 레이어들 각각은, 측면 연결로부터 전달되는 인코딩 피쳐를 쿼리(Xq)로서 사용하고, 그리고 이전 디코더 계층(hierarchy)에서 학습된 정보 및 모든 인코딩 피쳐들의 조합이 키와 밸류 (Xkq)로서 사용할 수 있다. 일 실시예에서, 디코더 레이어들(430a, 430b, 430c 및 430d)에서 제 2 방향으로 데이터가 이동 또는 전달되는 과정에서, 인코딩 통합 결과 중 적어도 일부가 디코딩 피쳐로 대체될 수 있다. 이러한 대체는 디코더 레이어들 을 통과함에 따라 누적적으로 이루어질 수 있다. 예를 들어, 인코딩 통합 결과는, 적어도 일부가 변경되면서 상 기 제 2 방향을 따라 이전 디코더 레이어로부터 다음 디코더 레이어로 순차적으로 전달될 수 있다. 이전 디코더 레이어로부터 다음 디코더 레이어로 인코딩 통합 결과가 전달될 때, 이전 디코더 레이어와 측면 연결을 통해 연 결되는 측면 인코더 레이어에 의해 생성된 측면 인코딩 피쳐가 상기 인코딩 통합 결과로부터 제외되고 그리고 상기 이전 디코더 레이어에 의해 생성된 이전 디코딩 피쳐가 상기 인코딩 통합 결과에 추가될 수 있다. 일 실시예에서, 새로운 특징 Xkv을 생성하는 과정에서 이전 디코더 레이어에서 획득되는 새로운 이전 디코딩 피 쳐(D)가 대응되는 계층의 인코딩 피쳐(E)을 대체하게 된다. 이러한 예시에서, 제 2 디코더 레이어(430b)는, 인 코딩 통합 결과(440a)에서 제 4 인코더 레이어(420d)로부터의 인코딩 피쳐(E4)가 제거되고 상기 E4가 제 1 디코 더 레이어(430a)의 출력(D4)으로 대체될 수 있다. 이에 따라, 제 2 디코더 레이어(430b)에서 참조번호 440b가 키와 값(Xkv)으로 사용될 수 있다. 여기서 참조번호 440b는 인코딩 통합 결과(440a)에서 E4가 D4로 대체된 결과 를 나타낼 수 있다. 대응되는 방식으로, 제 3 디코더 레이어(430c)에서는 인코딩 통합 결과(440a)에서 E4가 D4로 대체되고 그리고 E3이 D3으로 대체된 결과를 키와 값(440c)으로 사용할 수 있다. 대응되는 방식으로, 제 4 디코더 레이어(430d)에서는 인코딩 통합 결과(440a)에서 E4가 D4로 대체되고, E3이 D3 으로 대체되고 그리고 E2가 D2로 대체된 결과를 키와 값(440d)으로 사용할 수 있다. 본 개시내용의 일 실시예에서, 마지막 디코더 레이어(430d)로부터의 마지막 디코딩 피쳐(D1)는, 마지막 디코더 레이어(430d)의 선행(precedent) 디코더 레이어들(430a, 430b 및 430c) 각각으로부터 생성되는 선행 디코딩 피 쳐들(D4, D3 및 D2) 및 인코더 레이어들(420a, 420b, 420c 및 420d) 중 최초 인코더 레이어(420a)에 의해 생성 되는 최초 인코딩 피쳐(E1)에 기초하여 생성될 수 있다. 즉, D1은 E1을 쿼리로 사용하고, E1, D2, D3 및 D4의 조합을 키와 값으로 사용하는 혼합 어텐션 알고리즘을 이용하여 생성될 수 있다. 상기 혼합 어텐션 알고리즘은, 상기 최초 인코딩 피쳐(E1)를 쿼리로서 사용하고 그리고 상기 최초 인코딩 피쳐(E1)와 상기 선행 디코딩 피쳐들 (D4, D3 및 D2)이 통합된 디코딩 통합 결과(440d)를 키와 값으로서 사용할 수 있다. 예를 들어, 제 4 디코더 레 이어(430d)에서의 혼합 어텐션 알고리즘의 키와 값은 인코딩 통합 결과(440a)에서 E4가 D4로 대체되고, E3이 D3 으로 대체되고 그리고 E2가 D2로 대체된 결과(440d)에 대응될 수 있다. 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은, 인코더 레이어의 특징(즉, 쿼리)과 대응되는 서로 상 이한 계층(hierarchy)의 디코더(들)로부터의 정보를 비교가능한 특징(즉, 키 및 값)으로 활용하여 새로운 계층 적 디코딩 피쳐를 생성하는 어텐션 알고리즘일 수 있다. 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은, 이전 디코더 레이어로 입력된 이전 인코딩 피쳐를 모 든 인코딩 피쳐들이 통합된 인코딩 통합 결과로부터 제외시키고 그리고 상기 제외된 이전 인코딩 피쳐를 상기 이전 디코더 레이어로부터 생성된 이전 디코딩 피쳐로 대체시키는 누적적인 방식을 이용할 수 있다. 또한, 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은, 통합 인코딩 결과(440a)에서 특정 인코딩 결과 를 특정 디코딩 결과로 대체함으로써 키와 값을 결정하고 그리고 대응되는 인코더 레이어로부터의 인코딩 결과 를 쿼리로 사용할 수 있다. 또한, 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은, 통합 인코딩 결과(440a)에서 이전 디코더 레이 어의 이전 디코딩 피쳐와 대응되는 크기를 갖는 이전 인코딩 피쳐를 상기 이전 디코딩 결과로 대체함으로써 키 와 값을 결정할 수 있다. 혼합 어텐션 알고리즘은, 현재 디코더 레이어와 대응되는(즉, 측면 연결을 갖는) 인코 더 레이어로부터의 인코딩 결과를 쿼리로 사용할 수 있다. 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은, 복수의 소스(source)들 각각로부터 획득된 피쳐들이 통합된 통합 결과를 키(key)와 값(value)으로서 사용하고, 그리고 단일(singe) 소스로부터 획득된 피쳐를 쿼리(query)로서 사용할 수 있다. 예를 들어, 제 3 디코더 레이어(430c)는, 단일 소스에 대응되는 제 2 인코더 레이 어(420b)로부터의 인코딩 피쳐(E2)를 쿼리로 사용할 수 있다. 예를 들어, 제 3 디코더 레이어(430c)는 복수의 소스들에 대응되는 제 1 디코더 레이어(430a), 제 2 디코더 레이어(430b), 제 1 인코더 레이어(420a) 및 제 2 인코더 레이어(420b) 각각으로부터의 피쳐들(D4, D3, E2 및 E1)의 통합 결과(440c)를 키와 값으로 사용할 수 있 다. 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은, 신경망 모델 내에서 서로 상이한 계층(hierarchy)의 디코더 레이어와 인코더 레이어로부터의 피쳐들을 이용하여, 디코딩 피쳐를 생성하는 어텐션 알고리즘을 포함할 수 있다. 전술한 예시에서, 제 3 디코더 레이어(430c)는, 서로 상이한 계층들인 제 1 디코더 레이어(430a), 제 2 디코더 레이어(430b), 제 1 인코더 레이어(420a) 및 제 2 인코더 레이어(420b) 각각의 출력들(예컨대, D4, D3, E2 및 E1)을 이용할 수 있다. 일례로, 제 3 디코더 레이어(430c)는 E1, E2, E3 및 E3로 구성된 인코딩 통 합 결과에서 E4가 D4로 대체되고 그리고 E3가 D3로 대체된 디코딩 통합 결과(440c)를 혼합 어텐션 알고리즘의 키와 값의 쌍으로서 이용하고, 그리고 E2를 혼합 어텐션 알고리즘의 쿼리로서 이용할 수 있다. 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은, 모든 인코딩 피쳐들이 통합된 인코딩 통합 결과 내에 서, 이전(previous) 디코더 레이어에 의해 생성되는 이전 디코딩 피쳐와 대응되는 크기를 가지는 인코딩 피쳐를 상기 이전 디코딩 피쳐로 대체할 수 있다. 일 실시예에서, 제 2 디코더 레이어(430b)에서의 혼합 어텐션 알고리즘은, 제 1 디코더 레이어(440a)에 의해 생 성되는 제 1 디코딩 피쳐(D4), 및 제 2 디코더 레이어(430b)와 측면 연결을 통해 연결되는 제 3 측면 인코더 레 이어(420c)로부터 생성되는 제 3 측면 인코딩 피쳐(E3)을 사용할 수 있다. 예를 들어, 제 2 디코더 레이어 (430b)는 인코딩 통합 결과에서 E4가 D4로 대체된 결과(440b)를 키와 값으로 사용하고 그리고 인코더 신경망에 서 대응되는 계층인 제 3 인코더 레이어(420c)의 출력(E3)을 쿼리로 사용할 수 있다. 일 실시예에서, 제 3 디코더 레이어(430c)에서의 혼합 어텐션 알고리즘은, 상기 제 3 디코더 레이어(430b)의 선 행 디코더 레이어들(430a 및 430b) 각각으로부터 생성되는 선행 디코딩 피쳐들을 포함하는 제 3 디코딩 통합 결 과, 및 상기 제 3 디코더 레이어와(430c) 측면 연결을 통해 연결되는 제 3 측면 인코더 레이어(420b)로부터 생 성되는 제 3 측면 인코딩 피쳐(E2)를 사용할 수 있다. 여기서 제 3 측면 인코딩 피쳐(E2)가 혼합 어텐션 알고리 즘의 쿼리로 사용되며 그리고 제 3 디코딩 통합 결과에 기초하여 상기 혼합 어텐션 알고리즘의 키와 값이 결정 될 수 있다. 예를 들어, 제 3 디코더 레이어(430c)의 혼합 어텐션 알고리즘의 키와 값은 인코딩 통합 결과 (440a)에서 E4가 D4로 대체되고 그리고 E3가 D3로 대체된 결과(440c)에 대응될 수 있다. 전술한 바와 같이, 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은 디코더 레이어들(430a, 430b, 430c 및 430d) 각각에서 사용될 수 있다. 혼합 어텐션 알고리즘은 모든 인코딩 피쳐들이 통합된 통합 인코딩 결과에 서 특정 인코딩 피쳐를 대응되는 디코딩 피쳐로 대체할 수 있다. 혼합 어텐션 알고리즘은 인코딩 피쳐들 중 일 부를 선행 디코딩 피쳐들로 대체할 수 있다. 혼합 어텐션 알고리즘에서의 키와 값은 선행 디코더 레이어들 중에 서 특정 디코더 레이어로부터 생성되는 특정 디코딩 피쳐로, 상기 특정 디코더 레이어와 측면 연결을 통해 연결 되는 특정 측면 인코더 레이어로부터 생성된 특정 측면 인코딩 피쳐를 대체할 수 있다. 디코더 신경망 내에서 직렬 연결을 통해 연결되는 디코더 레이어들(430a, 430b, 430c 및 430d) 중에서 특정 디 코더 레이어의 이전(previous) 디코더 레이어에 의해 생성되는 이전 디코딩 피쳐는, 업샘플링 없이 다음(next) 디코더 레이어(즉, 특정한 디코더 레이어)로 전달될 수 있다. 다음 디코더 레이어로 전달된 이전 디코딩 피쳐는 이전 디코딩 피쳐와 대응되는 이전 인코딩 피쳐를 대체할 수 있다. 이전 인코딩 피쳐가 이전 디코딩 피쳐로 대 체된 인코딩 통합 결과가 특정 디코더 레이어에서의 키와 값으로 사용되고 그리고 특정 디코더 레이어와 대응되 는 특정 인코더 레이어(예컨대, 측면 인코더 레이어)로부터의 특정 인코더 피쳐(예컨대, 측면 인코더 피쳐)가 쿼리로 사용되는 혼합 어텐션 알고리즘이 사용될 수 있다. 도 4에서 “측면 디코더 레이어”는 인코더 레이어의 관점에서의 표현이며, 제 1 측면 디코더 레이어(430d)는 제 1 인코더 레이어(420a)와 측면 연결을 갖는 디코더 레이어 또는 제 1 인코더 레이어(420a)와 계층적으로 대 응되는 디코더 레이어(430d)를 나타내기 위해 사용될 수 있다. 예를 들어, 제 1 측면 디코더 레이어(430d)는 제 1 인코더 레이어(420a)와 대응되는 제 4 디코더 레이어(430d)를 의미할 수 있다. “측면 디코딩 피쳐”는 대응 되는 측면 디코더 레이어의 출력을 의미할 수 있다. 본 개시내용에서의 “측면 인코더 레이어”는 디코더 레이어의 관점에서의 표현이며, 제 1 측면 인코더 레이어 (420d)는 제 1 디코더 레이어(430a)와 측면 연결을 갖는 인코더 레이어 또는 제 1 디코더 레이어(430a)와 계층적으로 대응되는 인코더 레이어(420d)를 나타내기 위해 사용될 수 있다. 예를 들어, 제 1 측면 인코더 레이어 (420d)는 제 1 디코더 레이어(430a)와 대응되는 제 4 인코더 레이어(420d)를 의미할 수 있다. “측면 인코딩 피 쳐”는 대응되는 측면 인코더 레이어의 출력을 의미할 수 있다. 본 개시내용의 일 실시예에서, 디코더 신경망의 각 디코더 레이어들(430a, 430b, 430c 및 430d)에서 획득한 특 징 (즉, D1,D2,D3 및 D4)은 예를 들어, 128로 업샘플링(upsampling) 된 이후 결합(예컨대, 연접)되어 픽셀 단 위 분류(pixel-wise classification)을 수행하는데 사용될 수 있다. 일 실시예에서, 디코더 신경망 또는 후처리 모듈은, 가장 큰 토큰 사이즈를 갖는 D1의 크기를 기준으로 디코딩 피쳐들 업샘플링할 수 있다. 본 개시내용의 신경망 모델은 후처리 모듈을 더 포함할 수 있다. 후처리 모듈은 D1, D2, D3 및 D4에 기초하여 출력 데이터을 생성할 수 있다. 일 실시예에서, 후처리 모듈은 D4, D3 및 D2를 D1의 크기와 대응되는 크기 를 갖도록 업샘플링할 수 있다(440a, 440b 및 440c). 후처리 모듈은 연접 연산(concatenation operation)을 이 용하여 업샘플링한 결과들과 D1을 처리할 수 있다. 이러한 연접 연산의 결과가 MLP로 전달되고, MLP에 의해 출력 데이터가 생성될 수 있다. 일례로, 입력 데이터는 객체를 포함하는 이미지에 대응될 수 있다. 이러한 예시에서, 출력 데이터는 이미지 내에서 특정한 객체에 대한 세그멘테이션(segmentation) 결과를 포함할 수 있다. 본 개시내용의 일 실시예에서, 인코더 신경망과 디코더 신경망 간의 측면 연결들을 통해 그리고 디코더 레이어 에서 대응되는 인코더 레이어의 인코딩 피쳐를 쿼리로 사용함으로써, 디코더 레이어는 디코더 신경망에서 디코 더 레이어들 간의 직렬 연결에서의 업샘플링에 대한 필요성을 제거하면서 공간 해상도(spatial resolution)를 증가시킬 수 있다. 도 5는 본 개시내용의 일 실시예에 따른 디코더 레이어에서 수행되는 동작을 예시적으로 도시한다. 도 5에서 예시되는 디코더 레이어의 구조는 레이어 정규화(Layer Normalization)(LN) 블록들(510, 520 및 540), 혼합 어텐션 블록 및 정방향 신경망(Feed Forward Network)(FFN) 블록을 포함할 수 있다. 도 5에서 도시되는 바와 같이, 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘은 상이한 레이어들로부터 획득된 피쳐들의 통합 결과가 키와 값(Xkv)으로 사용되고, 단일 소스의 인코더 레이어로부터 획득된 인코딩 피 쳐가 쿼리(Xq)로 사용될 수 있다. 쿼리(Xq) 및 키와 값(Xkv)은 각각 대응되는 레이어 정규화(Layer Normalization)(LN) 블록(510 및 520)을 통해 정규화될 수 있다. 정규화된 쿼리(Xq) 및 키와 값(Xkv)이 혼합 어텐션 블록으로 전달되어, 혼합 어텐션 결 과가 생성될 수 있다. 혼합 어텐션 결과는 정규화된 쿼리(Xq)와 결합되어 레이어 정규화(Layer Normalization)(LN) 블록으로 전달될 수 있다. LN 블록의 결과는 정방향 신경망(Feed Forward Network)(FFN) 블록으로 전달되고, FFN 블록의 결과와 LN 블록의 결과가 결합되어, 디코더 레 이어에서의 출력(예컨대, 디코딩 피쳐 또는 출력 데이터)가 생성될 수 있다. 도 5에서 도시되는 혼합 어텐션 알고리즘의 예시적인 동작 및 디코더 레이어의 예시적인 동작은 이하의 수학식 3에 의해 구현될 수 있다. 수학식 3"}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "여기서 MixAtt는 혼합 어텐션 알고리즘을 지칭하며, 디코더 레이어는 Dn-i+1로 표현된다. Xq는 혼합 어텐션 알고 리즘의 쿼리를 나타내며, Xkv는 혼합 어텐션 알고리즘의 키와 값의 쌍을 나타낼 수 있다. Ai는 참조번호 530의 혼합 어텐션 알고리즘의 결과를 나타낼 수 있다. 본 개시내용의 일 실시예에 따른 신경망 모델은, 앞서 언급된 U-Net의 형태를 활용한 U-Net 혼합형 트랜스포머 디코더 신경망을 이용할 수 있다. 이에 따라, U-Net의 특징 중 하나인 측면 연결을 통해 인코더 레이어의 각 계 층에서 학습된 정보를 디코더 레이어가 함께 활용할 수 있다. 또한, 본 개시내용의 일 실시예에 따른 신경망 모 델은 디코더 레이어들 각각의 출력들이 후처리 모듈에서 처리(예컨대, 업샘플링 및/또는 연접)될 수 있기 때문 에, 보다 강건하고 정확한 출력 데이터를 생성할 수 있다는 기술적 효과가 달성될 수 있다. 또한, 서로 다른 계 층으로부터 얻게 되는 복수의 피쳐들이 트랜스포머 디코더(즉, 디코더 레이어)의 입력 특징으로 직접 사용될 수 잇다. 측면 연결로부터 인입된 인코딩 특징이 쿼리(query)로 활용되고, 이전 디코더 계층에서 학습된 정보 및 모든 인코딩 피쳐들이 키(key)와 밸류(value)로 활용될 수 있다. 이러한 쿼리와 키 및 밸류는 혼합 어텐션 알고 리즘에서의 입력으로 이용될 수 있다. 일 실시예에서, 디코더 레이어들 각각에서 복수의 정보 (예컨대, 측면 연결로부터 획득된 피쳐 및 이전 디코더 레이어에서 획득한 피쳐)를 효율적으로 계산하기 위하여, 혼합 어텐션 알고리즘이 제안될 수 있다. 혼합 어텐션 알고리즘은 모든 인코더 레이어들에서 획득한 피쳐들을 모두 활용하되, 새로운 입력 정보 (예컨대, 이전 디코더 레이어에서 획득한 피쳐)를 이용하여 이를 갱신하는 형태를 취할 수 있다. 이러한 혼합 어텐션 알고리즘은 기존 트랜스포머에서 사용되었던 셀프 어텐션(Self-attention)과 크로스 어텐션(cross-attention)에 비해 보다 효과 적으로 동작 가능할 수 있다. 도 6은 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘을 예시적으로 도시한다. 어텐션 알고리즘에 대한 기본적인 설명은 도 4에서 상술되었기 떄문에, 도 6에 대해서는 설명의 중복을 피하기 위하여 혼합 어텐션 알고리즘에 대한 차이점을 중심으로 설명될 것이다. 일 실시예에서, 도 6에서의 Xq는 혼합 어텐션 알고리즘의 쿼리를 나타내며, Xkv는 혼합 어텐션 알고리즘 의 키와 값 쌍을 나타낼 수 있다. 이러한 혼합 어텐션 알고리즘은 신경망 모델의 디코더 레이어에서 사용될 수 있다. 앞서 설명된 바와 같이, 디코더 신경망에서의 디코더 레이어는 대응되는 계층을 가지는 인코더 레이어로부터의 인코딩 피쳐를 쿼리(Xq)로 사용할 수 있다. 또한, 디코더 신경망에서 디코더 레이어는 모든 인코딩 피쳐들이 통 합된 통합 인코딩 결과 및/또는 통합 인코딩 결과를 대체하는 통합 디코딩 결과를 키와 값의 쌍(Xkv)으로 사용할 수 있다. 도 6에서 도시되는 바와 같이, 쿼리(Xq)는 선형 연산 블록(들)으로 입력되고, 그리고 키와 값의 쌍(Xkv)은 선형 연산 블록(들)(520 및 530)으로 입력될 수 있다. 선형 연산 모듈(들)의 출력이 Q(쿼리)로 사용되고, 선형 연산 모듈(들)(520 및 530)의 출력들 각각이 K(키) 및 V(값)로 사용될 수 있다. Q, K 및 V가 혼합 어텐션 블록으로 입력될 수 있다. 혼합 어텐션 블록은 앞서 설명된 혼합 어텐션 알고리즘을 수행하여, 어텐 션 동작을 수행할 수 있다. 일 실시예에서, 셀프 어텐션(Self-attention) 알고리즘은 동일한 피쳐을 쿼리(Query), 키(Key) 및 값(Value)로 활용할 수 있다. 멀티 모달 접근법(multimodal approach)에서 사용될 수 있는 크로스 어텐션(Cross-attention) 알고리즘은, 타겟 쿼리(Target query)와 대응되는 키(Key)와 값(Value)를 쿼리(Query)와 별개의 피쳐로 사용할 수 있다. 크로스 어텐션 알고리즘은 키와 값의 쌍을 단일 소스로부터 획득하는 것이 특징이다. 본 개시내용의 일 실시예에 따른 혼합 어텐션(Mix-attention) 알고리즘은 단일 소스(즉, 대응되는 계층의 인코더 레이어)로부 터의 인코딩 피쳐를 쿼리(Query)로 활용하고 그리고 계층적 피쳐들 모두를 통합하는 새로운 피쳐를 키(Key)와 값(Value)의 쌍으로 활용할 수 있다. 일 실시예에서, 새로운 피쳐에 대응되는 Xkv을 생성하는 과정에서, 인코더 레이어들의 모든 인코딩 피쳐에서 새롭게 획득되는 새로운 디코딩 피쳐(Di)가 대응되는 인코딩 피쳐(Ei)을 대체 할 수 있다. 일 실시예에서, 혼합 어텐션 블록은 예를 들어 아래의 수학식 4에 의해 구현될 수 있다. 수학식 4"}
{"patent_id": "10-2023-0164002", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "여기서 Q는 쿼리, K는 키 그리고 V는 값을 나타낸다. 쿼리, 키 및 값은 선택된 피쳐들의 선형 프로젝션(linear projection)을 통해 획득될 수 있다. 여기서 dk는 키들에 대한 임베딩 차원을 나타낼 수 잇다. 도 7은 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타낸다. 도 7은 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타내는 그래프이다. 참조번호 700에서 도시되는 바와 같이, 본 개시내용의 신경망 모델(예컨대, U-MixFormer)은 SegFormer 및 FeedFormer 등과 같은 다른 신경망 모델에 비해 탁월한 기술적 효과를 발생시킬 수 있다. 본 개시내용의 일 실시예에 따른 신경망 모델은, 기존의 직렬 처리 형태의 신경망 모델에 비해, 측면 연결 방식, 혼합 어텐션 알고리즘 및 연접 연결 방식을 이용함에 따라 예를 들어 이미지 내에서의 2개의 객체들을 구 분하는데 있어서 높은 정확성을 달성할 수 있다. 참조번호 700에서, 이미지 내에서 2개의 객체들을 구분하는 경계가 기존 방식인 SegFormer 및 FeedFormer에 비 해 보다 선명하게 표시된다는 점이 확인될 수 있다. 참조번호 700에서, 이미지 내에서의 객체들의 구분이 기존 방식들에 비해 보다 정확해질 수 있다는 점이 확인될 수 있다. 참조번호 700에서의 세로축은 세그멘테이션 결과를 평가하는 지표로서 세그멘테이션 결과의 정확성을 나타내는 수치로 사용될 수 있다. 참조번호 700에서의 가로축은 컴퓨팅 리소스의 연산 속도 및/또는 사용 수준 등과 같은 연산 능력을 나타낼 수 있다. 참조번호 700는 Cityscapes 및 ADE20K 검증(validation) 세트에 대한 상이한 방 식들의 성능 연산 그래프를 나타낸다. 본 개시내용의 일 실시예에 따른 신경망 모델은, 디코더 신경망과 함께 사용되는 인코더 신경망의 종류가 light-weight, middle-weight 및 heavy weight인 경우 모두에 대해서, 다른 신경망 모델들에 비해 뛰어난 성능 을 달성할 수 있다. 예를 들어, 이러한 성능은 세그멘테이션의 정확도와 관련된 성능을 포함할 수 있다. 도 8은 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타낸다. 도 8은 light weight 인코더 및 middle weight 인코더 신경망과 함께 사용되었을 때, 다른 신경망 모델들과의 성능 비교 표를 나타낸다. 도 8은 Cityscapes 및 ADE20K에 대하여 다른 신경망 모델들과의 성능 비교를 나타낼 수 있다. 도 8에서 도시되는 바와 같이, 성능 연산의 양호한 트레이드오프(trade-off)를 나타내는 FLOP 및 mIoU에 관하여 light 인코더들을 사용한 모든 다른 신경망 모델들에 비해, 본 개시내용의 일 실시예에 따른 신경망 모델이 보 다 뛰어난 성능을 가진다는 점이 확인될 수 있다. 또한, 본 개시내용의 일 실시예에 따른 신경망 모델은, 특히 SegFormer 및 FeedFormer와 비교하였을 때, 3.8% 및 2.0%의 mIoU 성능 개선과 27.3% 및 21.8%의 연산량을 감소 시킨다는 점을 확인할 수 있다. 도 9는 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타낸다. 도 9는 heavy weight 인코더와 함께 사용되었을 때, 다른 신경망 모델들과의 성능 비교 표를 나타낸다. 도 9는 ADE20K에 대하여 다른 신경망 모델들과의 성능 비교를 나타낼 수 있다. 본 개시내용의 일 실시예에 따른 신경망 모델은, MiT-B3/4/5와 같은 heavy 인코더를 사용하였을 때, SegFormer 와 같은 기존 신경망 모델에 비해 뛰어난 성능을 보여주고 있다. 예를 들어, 본 개시내용의 일 실시예에 따른 신경망 모델은, SegFormer-B3 모델에 비해, 0.4%의 mIoU 개선을 달성하였으며 28.1%의 연산 사용량을 줄일 수 있었다. 도 10은 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타낸다. 도 10은 SegFormer 및 FeedFormer와 비교하였을 때의 본 개시내용의 신경망 모델의 기술적 효과를 예시적으로 나타낸다. 도 10은 Cityscaper 검증(validation) 세트의 클린 변형물(clean variants) 및 오염된 변형물(corrupted variants) 모두에 대한 평균 mIoU 값들을 3개의 모델들에 대하여 비교한 결과를 나타낸다. 도 10에서 예시되는 표는 동일한 인코더(예컨대, MiT 인코더)를 사용하였을 때, 5개의 심각성 레벨들 중 초반 3개의 심각성 레벨들 을 고려한 노이즈 오염 카테고리를 제외한 모든 적용가능한 심각성 레벨들에 걸쳐 계산된 mIoU의 평균값을 나타 낸다. 도 10에서 클린 변형물은 blur, noise, digital, weather가 존재하지 않는 상태의 데이터세트이며, blur는 흐 려진 현상이 포함된 데이터세트이며, noise는 영상을 훼손시킬 수 있는 불필요한 정보가 포함된 데이터세트이며, digital은 영상의 밝기, 대비, 채도, JPEG 결함(artifacts)에 따른 오염된 상태의 데이터세트 이며, 그리고 Weather는 특정한 기상 현상이 포함된 데이터세트를 나타낼 수 있다. 본 개시내용의 일 실시예에 따른 신경망 모델은 다른 신경망 모델들에 비해 높은 강건성(robustness)를 나타낸 다는 점이 도 10을 통해 확인될 수 있다. 모든 오염 카테고리들에 대해서 본 개시내용의 일 실시예에 따른 신경 망 모델은 다른 모델들에 비해 뛰어난 성능이 도출될 수 있다는 점이 확인된다. 본 개시내용의 일 실시예에 따 른 신경망 모델은 다른 2개의 모델들에 비해, 특히 샷 노이즈 상황에서의 20.0% 및 33.3%의 성능 차이를 보여주 고 그리고 눈(snowy) 조건 상에서 21.8% 및 19.2%의 성능 차이를 보여준다는 점이 확인될 수 있다. 이러한 도 10의 결과는 안정성과 신뢰도가 중요한 상황에서 본 개시내용의 일 실시예에 따른 신경망 모델이 높은 강건성을 가질 수 있다는 점을 나타낼 수 있다. 도 11는 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스의 컴퓨팅 환경의 개략도이다. 본 개시내용에서의 컴퓨팅 디바이스, 컴퓨팅 장치, 컴퓨터, 시스템, 컴포넌트, 모듈 또는 부(unit)는 특정의 태 스크를 수행하거나 특정의 추상 데이터 유형을 구현하는 루틴, 프로시져, 프로그램, 컴포넌트, 데이터 구조 등 을 포함한다. 또한, 당업자라면 본 개시내용에서 제시되는 방법들이 단일-프로세서 또는 멀티프로세서 컴퓨팅 디바이스, 미니컴퓨터, 메인프레임 컴퓨터는 물론 퍼스널 컴퓨터, 핸드헬드 컴퓨팅 디바이스, 마이크로프로세서 -기반 또는 프로그램가능 가전 제품, 기타 등등(이들 각각은 하나 이상의 연관된 장치와 연결되어 동작할 수 있 음)을 비롯한 다른 컴퓨터 시스템 구성으로 실시될 수 있다는 것을 충분히 인식할 것이다. 본 개시내용에서 설명된 실시예들은 또한 어떤 태스크들이 통신 네트워크를 통해 연결되어 있는 원격 처리 장치 들에 의해 수행되는 분산 컴퓨팅 환경에서 실시될 수 있다. 분산 컴퓨팅 환경에서, 프로그램 모듈은 로컬 및 원 격 메모리 저장 장치 둘 다에 위치할 수 있다. 컴퓨팅 장치는 통상적으로 다양한 컴퓨터 판독가능 매체를 포함한다. 컴퓨터에 의해 액세스 가능한 매체는 그 어떤 것이든지 컴퓨터 판독가능 매체가 될 수 있고, 이러한 컴퓨터 판독가능 매체는 휘발성 및 비휘발성 매체, 일시적(transitory) 및 비일시적(non-transitory) 매체, 이동식 및 비-이동식 매체를 포함한다. 제한이 아닌 예 로서, 컴퓨터 판독가능 매체는 컴퓨터 판독가능 저장 매체 및 컴퓨터 판독가능 전송 매체를 포함할 수 있다. 컴퓨터 판독가능 저장 매체는 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터와 같은 정보를 저장하는 임의의 방법 또는 기술로 구현되는 휘발성 및 비휘발성 매체, 일시적 및 비-일시적 매체, 이동 식 및 비이동식 매체를 포함한다. 컴퓨터 판독가능 저장 매체는 RAM, ROM, EEPROM, 플래시 메모리 또는 기타 메 모리 기술, CD-ROM, DVD(digital video disk) 또는 기타 광 디스크 저장 장치, 자기 카세트, 자기 테이프, 자 기 디스크 저장 장치 또는 기타 자기 저장 장치, 또는 컴퓨터에 의해 액세스될 수 있고 원하는 정보를 저장하는 데 사용될 수 있는 임의의 기타 매체를 포함하지만, 이에 한정되지 않는다. 컴퓨터 판독가능 전송 매체는 통상적으로 반송파(carrier wave) 또는 기타 전송 메커니즘(transport mechanis m)과 같은 피변조 데이터 신호(modulated data signal)에 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터 등을 구현하고 모든 정보 전달 매체를 포함한다. 피변조 데이터 신호라는 용어는 신호 내에 정보를 인코딩하도록 그 신호의 특성들 중 하나 이상을 설정 또는 변경시킨 신호를 의미한다. 제한이 아닌 예로 서, 컴퓨터 판독가능 전송 매체는 유선 네트워크 또는 직접 배선 접속(direct-wired connection)과 같은 유선 매체, 그리고 음향, RF, 적외선, 기타 무선 매체와 같은 무선 매체를 포함한다. 상술된 매체들 중 임의의 것의 조합도 역시 컴퓨터 판독가능 전송 매체의 범위 안에 포함되는 것으로 한다. 컴퓨터를 포함하는 본 발명의 여러가지 측면들을 구현하는 예시적인 환경이 나타내어져 있으며, 컴 퓨터는 처리 장치, 시스템 메모리 및 시스템 버스를 포함한다. 본 명세서에서의 컴퓨 터는 컴퓨팅 디바이스와 상호 호환 가능하게 사용될 수 있다. 시스템 버스는 시스템 메모리 (이에 한정되지 않음)를 비롯한 시스템 컴포넌트들을 처리 장치에 연결시킨다. 처리 장치는 다양한 상용 프로세서들 중 임의의 프로세서일 수 있다. 듀얼 프로세서 및 기타 멀티프로세서 아키텍처도 역시 처리 장치로서 이용될 수 있다. 시스템 버스는 메모리 버스, 주변장치 버스, 및 다양한 상용 버스 아키텍처 중 임의의 것을 사용하는 로 컬 버스에 추가적으로 상호 연결될 수 있는 몇가지 유형의 버스 구조 중 임의의 것일 수 있다. 시스템 메모리 는 판독 전용 메모리(ROM) 및 랜덤 액세스 메모리(RAM)를 포함한다. 기본 입/출력 시스템 (BIOS)은 ROM, EPROM, EEPROM 등의 비휘발성 메모리에 저장되며, 이 BIOS는 시동 중과 같은 때에 컴퓨터 내의 구성요소들 간에 정보를 전송하는 일을 돕는 기본적인 루틴을 포함한다. RAM은 또한 데이터 를 캐싱하기 위한 정적 RAM 등의 고속 RAM을 포함할 수 있다. 컴퓨터는 또한 내장형 하드 디스크 드라이브(HDD)(예를 들어, EIDE, SATA), 자기 플로피 디스크 드 라이브(FDD)(예를 들어, 이동식 디스켓으로부터 판독을 하거나 그에 기록을 하기 위한 것임), SSD 및 광 디스크 드라이브(예를 들어, CD-ROM 디스크를 판독하거나 DVD 등의 기타 고용량 광 매체로부 터 판독을 하거나 그에 기록을 하기 위한 것임)를 포함한다. 하드 디스크 드라이브, 자기 디스크 드라이 브 및 광 디스크 드라이브는 각각 하드 디스크 드라이브 인터페이스, 자기 디스크 드라이브 인터페이스 및 광 드라이브 인터페이스에 의해 시스템 버스에 연결될 수 있다. 외장형 드라 이브 구현을 위한 인터페이스는 예를 들어, USB(Universal Serial Bus) 및 IEEE 1394 인터페이스 기술 중 적어도 하나 또는 그 둘 다를 포함한다. 이들 드라이브 및 그와 연관된 컴퓨터 판독가능 매체는 데이터, 데이터 구조, 컴퓨터 실행가능 명령어, 기타 등 등의 비휘발성 저장을 제공한다. 컴퓨터의 경우, 드라이브 및 매체는 임의의 데이터를 적당한 디지털 형 식으로 저장하는 것에 대응한다. 상기에서의 컴퓨터 판독가능 저장 매체에 대한 설명이 HDD, 이동식 자기 디스 크, 및 CD 또는 DVD 등의 이동식 광 매체를 언급하고 있지만, 당업자라면 집 드라이브(zip drive), 자기 카세트, 플래쉬 메모리 카드, 카트리지, 기타 등등의 컴퓨터에 의해 판독가능한 다른 유형의 저장 매체도 역시 예시적인 운영 환경에서 사용될 수 있으며 또 임의의 이러한 매체가 본 발명의 방법들을 수행하기 위한 컴퓨터 실행가능 명령어를 포함할 수 있다는 것을 잘 알 것이다. 운영 체제, 하나 이상의 어플리케이션 프로그램, 기타 프로그램 모듈 및 프로그램 데이터 를 비롯한 다수의 프로그램 모듈이 드라이브 및 RAM에 저장될 수 있다. 운영 체제, 어플리케이션, 모듈 및/또는 데이터의 전부 또는 그 일부분이 또한 RAM에 캐싱될 수 있다. 본 발명이 여러가지 상업적으 로 이용가능한 운영 체제 또는 운영 체제들의 조합에서 구현될 수 있다는 것을 잘 알 것이다. 사용자는 하나 이상의 유선/무선 입력 장치, 예를 들어, 키보드 및 마우스 등의 포인팅 장치를 통 해 컴퓨터에 명령 및 정보를 입력할 수 있다. 기타 입력 장치(도시 생략)로는 마이크, IR 리모콘, 조이스 틱, 게임 패드, 스타일러스 펜, 터치 스크린, 기타 등등이 있을 수 있다. 이들 및 기타 입력 장치가 종종 시스 템 버스에 연결되어 있는 입력 장치 인터페이스를 통해 처리 장치에 연결되지만, 병렬 포트, IEEE 1394 직렬 포트, 게임 포트, USB 포트, IR 인터페이스, 기타 등등의 기타 인터페이스에 의해 연결될 수 있 다. 모니터 또는 다른 유형의 디스플레이 장치도 역시 비디오 어댑터 등의 인터페이스를 통해 시스템 버스에 연결된다. 모니터에 부가하여, 컴퓨터는 일반적으로 스피커, 프린터, 기타 등등의 기타 주 변 출력 장치(도시 생략)를 포함한다. 컴퓨터는 유선 및/또는 무선 통신을 통한 원격 컴퓨터(들) 등의 하나 이상의 원격 컴퓨터로의 논리 적 연결을 사용하여 네트워크화된 환경에서 동작할 수 있다. 원격 컴퓨터(들)는 워크스테이션, 서버 컴퓨 터, 라우터, 퍼스널 컴퓨터, 휴대용 컴퓨터, 마이크로프로세서-기반 오락 기기, 피어 장치 또는 기타 통상의 네 트워크 노드일 수 있으며, 일반적으로 컴퓨터에 대해 기술된 구성요소들 중 다수 또는 그 전부를 포함하 지만, 간략함을 위해, 메모리 저장 장치만이 도시되어 있다. 도시되어 있는 논리적 연결은 근거리 통신망 (LAN) 및/또는 더 큰 네트워크, 예를 들어, 원거리 통신망(WAN)에의 유선/무선 연결을 포함한다. 이러한 LAN 및 WAN 네트워킹 환경은 사무실 및 회사에서 일반적인 것이며, 인트라넷 등의 전사적 컴퓨터 네트워 크(enterprise-wide computer network)를 용이하게 해주며, 이들 모두는 전세계 컴퓨터 네트워크, 예를 들어, 인터넷에 연결될 수 있다.LAN 네트워킹 환경에서 사용될 때, 컴퓨터는 유선 및/또는 무선 통신 네트워크 인터페이스 또는 어댑터 를 통해 로컬 네트워크에 연결된다. 어댑터는 LAN에의 유선 또는 무선 통신을 용이하 게 해줄 수 있으며, 이 LAN은 또한 무선 어댑터와 통신하기 위해 그에 설치되어 있는 무선 액세스 포인트를 포함하고 있다. WAN 네트워킹 환경에서 사용될 때, 컴퓨터는 모뎀을 포함할 수 있거나, WAN 상의 통신 서버에 연결되거나, 또는 인터넷을 통하는 등, WAN을 통해 통신을 정하는 기타 수단 을 갖는다. 내장형 또는 외장형 및 유선 또는 무선 장치일 수 있는 모뎀은 직렬 포트 인터페이스를 통해 시스템 버스에 연결된다. 네트워크화된 환경에서, 컴퓨터에 대해 설명된 프로그램 모듈들 또 는 그의 일부분이 원격 메모리/저장 장치에 저장될 수 있다. 도시된 네트워크 연결이 예시적인 것이며 컴 퓨터들 사이에 통신 링크를 설정하는 기타 수단이 사용될 수 있다는 것을 잘 알 것이다. 컴퓨터는 무선 통신으로 배치되어 동작하는 임의의 무선 장치 또는 개체, 예를 들어, 프린터, 스캐너, 데 스크톱 및/또는 휴대용 컴퓨터, PDA(portable data assistant), 통신 위성, 무선 검출가능 태그와 연관된 임의 의 장비 또는 장소, 및 전화와 통신을 하는 동작을 한다. 이것은 적어도 Wi-Fi 및 블루투스 무선 기술을 포함한 다. 따라서, 통신은 종래의 네트워크에서와 같이 미리 정의된 구조이거나 단순하게 적어도 2개의 장치 사이의 애드혹 통신(ad hoc communication)일 수 있다. 제시된 프로세스들에 있는 단계들의 특정한 순서 또는 계층 구조는 예시적인 접근들의 일례임을 이해하도록 한 다. 설계 우선순위들에 기반하여, 본 개시내용의 범위 내에서 프로세스들에 있는 단계들의 특정한 순서 또는 계 층 구조가 재배열될 수 있다는 것을 이해하도록 한다. 본 개시내용의 방법 청구항들은 샘플 순서로 다양한 단계 들의 엘리먼트들을 제공하지만 제시된 특정한 순서 또는 계층 구조에 한정되는 것을 의미하지는 않는다."}
{"patent_id": "10-2023-0164002", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스의 블록 구성도를 개략적으로 도시한다. 도 2는 본 개시내용의 일 실시예에 따른 인공지능 기반의 신경망 모델의 예시적인 구조를 도시한다. 도 3은 본 개시내용의 일 실시예에 따라 신경망 모델을 구현하기 위한 방법을 예시적으로 도시한다. 도 4는 본 개시내용의 일 실시예에 따른 신경망 모델의 구조를 예시적으로 도시한다. 도 5는 본 개시내용의 일 실시예에 따른 디코더 레이어에서 수행되는 동작을 예시적으로 도시한다. 도 6은 본 개시내용의 일 실시예에 따른 혼합 어텐션 알고리즘을 예시적으로 도시한다. 도 7은 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타낸다. 도 8은 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타낸다. 도 9는 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타낸다. 도 10은 본 개시내용의 일 실시예에 따른 신경망 모델의 효과를 나타낸다. 도 11은 본 개시내용의 일 실시예에 따른 컴퓨팅 디바이스의 컴퓨팅 환경의 개략도이다."}
