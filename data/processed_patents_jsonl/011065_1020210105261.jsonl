{"patent_id": "10-2021-0105261", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0023281", "출원번호": "10-2021-0105261", "발명의 명칭": "인공 신경망 모델을 포함하는 전자 장치 및 전자 장치의 동작 방법", "출원인": "삼성전자주식회사", "발명자": "이은택"}}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,메모리;타깃 프로세서; 및프로세서;를 포함하고,상기 프로세서는 인공 신경망 모델에 기초한 연산 수행 요청을 획득하고,상기 인공 신경망 모델에 대응되며 상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 상기 메모리에 캐시되었는지 여부를 확인하고,상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않음에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 수행하고,상기 인공 신경망 모델을 컴파일하여 상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널을 생성하는전자 장치."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 프로세서는상기 인공 신경망 모델의 컴파일이 완료됨에 대응하여,상기 컴파일이 완료됨을 알리고,상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널을 상기 메모리에 저장하는전자 장치."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2 항에 있어서,상기 프로세서는상기 인공 신경망 모델의 컴파일이 완료됨에 대응하여,상기 인공 신경망 모델에 기초한 연산을 상기 타깃 프로세서에서 수행하도록 상기 타깃 프로세서를 제어하는전자 장치."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,상기 프로세서는 공개특허 10-2023-0023281-3-상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널이 캐시되어 있음에 대응하여,상기 인공 신경망 모델에 기초한 연산을 상기 타깃 프로세서에서 수행하도록 상기 타깃 프로세서를 제어하는전자 장치."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 프로세서는상기 메모리에 존재하는 커널에 대하여, 상기 커널을 생성한 컴파일러와 현재 설정된 컴파일러가 동일하지 않음에 대응하여,상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인하는전자 장치."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 프로세서는상기 메모리에 존재하는 커널에 대하여, 상기 커널을 생성한 컴파일러의 설정 값과 현재 설정된 컴파일러의 설정 값이 동일하지 않음에 대응하여,상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인하는전자 장치."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 1 항에 있어서,상기 프로세서는상기 메모리에 존재하는 커널에 대하여, 상기 커널이 기초된 인공 신경망의 설정 값과 상기 인공 신경망의 설정값이 동일하지 않음에 대응하여,상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인하는전자 장치."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1 항에 있어서,상기 타깃 프로세서는 GPU(Graphic Processing Unit)인전자 장치."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "전자 장치의 동작 방법에 있어서,공개특허 10-2023-0023281-4-인공 신경망 모델에 기초한 연산 수행 요청을 획득하는 동작;상기 인공 신경망 모델에 대응되며 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 메모리에 캐시되었는지여부를 확인하는 동작;상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않음에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 수행하는 동작; 및상기 인공 신경망 모델을 컴파일하여 상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널을 생성하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 9 항에 있어서,상기 인공 신경망 모델의 컴파일이 완료됨에 대응하여,상기 컴파일이 완료됨을 알리는 동작; 및상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널을 상기 메모리에 저장하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 10 항에 있어서,상기 인공 신경망 모델의 컴파일이 완료됨에 대응하여,상기 인공 신경망 모델에 기초한 연산을 상기 타깃 프로세서에서 수행하도록 상기 타깃 프로세서를 제어하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 9 항에 있어서,상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널이 캐시되어 있음에 대응하여,상기 인공 신경망 모델에 기초한 연산을 상기 타깃 프로세서에서 수행하도록 상기 타깃 프로세서를 제어하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 9 항에 있어서,상기 메모리에 존재하는 커널에 대하여, 상기 커널을 생성한 컴파일러와 현재 설정된 컴파일러가 동일하지 않음에 대응하여,상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인하는 동작을 포함하는공개특허 10-2023-0023281-5-전자 장치의 동작 방법."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 9 항에 있어서,상기 메모리에 존재하는 커널에 대하여, 상기 커널을 생성한 컴파일러의 설정 값과 현재 설정된 컴파일러의 설정 값이 동일하지 않음에 대응하여,상기 타깃 프로세서에서 사용가능 하도록 컴파일된 커널이 캐시되지 않다고 확인하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 9 항에 있어서,상기 메모리에 존재하는 커널에 대하여, 상기 커널이 기초된 인공 신경망의 설정 값과 상기 인공 신경망의 설정값이 동일하지 않음에 대응하여,상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2021-0105261", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 9 항에 있어서,상기 타깃 프로세서는 GPU(Graphic Processing Unit)인전자 장치의 동작 방법."}
{"patent_id": "10-2021-0105261", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예에 따른 전자 장치에서, 전자 장치는, 메모리, 타깃 프로세서, 및 프로세서를 포함하고, 상기 프로 세서는 인공 신경망 모델에 기초한 연산 수행 요청을 획득하고, 상기 인공 신경망 모델에 대응되며 상기 타깃 프 로세서에서 사용가능하도록 컴파일된 커널이 상기 메모리에 캐시되었는지 여부를 확인하고, 상기 타깃 프로세서 에서 사용가능하도록 컴파일된 커널이 캐시되지 않음에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 수행 하고, 상기 인공 신경망 모델을 컴파일하여 상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널을 생성할 수 있다. 이 밖에 다양한 실시예들이 가능하다."}
{"patent_id": "10-2021-0105261", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 문서에 개시된 다양한 실시예들은, 인공 신경망 모델을 포함하는 전자 장치 및 전자 장치의 동작 방법에 관 한 것이다. 구체적으로, 본 문서에 개시된 다양한 실시예들은 인공 신경망 모델에 기초한 연산을 수행하기 위하 여 전자 장치를 제어하는 전자 장치 및 전자 장치의 동작 방법에 관한 것이다."}
{"patent_id": "10-2021-0105261", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 신경망(artificial neural network; ANN)은 생물학적 뇌를 모델링한 컴퓨터 과학적 아키텍쳐 (computational architecture)를 참조한다. 인공 신경망에 기초하여 딥러닝(deep learning) 또는 기계 학습 (machine learning) 등이 구현될 수 있다. 인공 신경망의 예시로서 심층 신경망(deep neural network) 또는 딥 러닝(deep learning)은 복수의 레이어들을 포함하는 멀티 레이어 구조를 가질 수 있다. 또한, 데이터 프로세싱 시스템은 일반적으로 중앙 처리 장치(센트럴 프로세싱 유닛, CPU, central processing unit)으로 알려져 있는 적어도 하나의 프로세서를 가진다. 그러한 데이터 프로세싱 시스템은 또한 다양한 타입 의 특화된 프로세싱을 위해 사용되는 다른 프로세서들, 예를 들어 그래픽 프로세싱 유닛(GPU; graphic processing unit)을 가질 수 있다. 예를 들어, GPU는 특히 그래픽 프로세싱 연산들에 적합하게 되도록 설계된다. GPU는 일반적으로, 데이터-병렬 프로세싱에서와 같이, 병렬 데이터 스트림들 상에서 동일한 명령을 실행하는데에 이상적으로 적합한 복수의 프로세싱 소자들을 포함한다. 일반적으로, CPU는 호스트 또는 제어 프로세서로서 기능하며 그래픽 프로세싱과 같 은 특화된 기능들을 GPU와 같은 다른 프로세서들에 핸드오프(handsoff)한다. 한편, SPIR-V, Vulkan, OpenCL 과 같은 중간 표현(IR, Intermediate Representation)을 이용한 커널을 특정 프 로세서에서 실행 하기 위해서는 해당 중간 표현으로 작성된 코드를 컴파일러를 통해 특정 프로세서에서 실행 가 능한 형태로 변환해야 한다. 따라서, 특정 프로세서에서 인공 신경망 모델에 기초한 연산을 수행하기 위하여는, 중간 표현들이 레이어 및/또 는 오퍼레이션 별로 특정 프로세서에서 사용 가능하도록 컴파일되어 있어야 하고, 컴파일되어있지 않은 경우, 이를 컴파일 한 후 특정 프로세서에서 연산을 수행할 수 있다."}
{"patent_id": "10-2021-0105261", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "특정 프로세서가 인공 신경망 모델에 기초한 연산을 수행하기 위하여는, 인공 신경망 모델이 레이어 및/또는 오 퍼레이션 별로 특정 프로세서에서 수행 가능하도록 컴파일 되어야 한다. 컴파일 시간을 줄이기 위하여, 전자 장 치는 인공 신경망 모델에 대하여 미리 컴파일된 커널을 메모리에 저장할 수 있다. 반면, 인공 신경망 모델은 모델마다 다른 커널을 사용하기 때문에, 전자 장치는 인공 신경망 모델별로 각각 컴 파일을 한 후 커널을 캐시(cache) 하여야 한다. 따라서, 인공 신경망 모델이 변경되는 경우, 변경된 인공 신경망 모델에 대하여 컴파일을 다시 수행하여야 하고, 컴파일하는 라이브러리가 변경되는 경우에도 컴파일을 다시 수행 하여야 한다. 다시 말해, 사전에 미리 컴파일된 커널을 메모리에 저장하였더라도, 인공 신경망 모델에 대하여 다시 컴파일을 수행하여야 하는 경우가 발생할 수 있으며, 이러한 컴파일은 수 초(sec)가 소요될 수 있다. 본 발명이 해결하고자 하는 과제는 상기와 같이 인공 신경망 모델에 대하여 컴파일이 필요한 경우, 중앙 처리 장치나 기타 가용한 처리 장치에서 해당 모델에 기초한 연산을 수행함과 동시에, 해당 모델에 대하여 타깃 프로 세서에서 사용 가능하도록 병렬로 컴파일을 수행함으로써 모델의 초기 수행 시간을 줄일 수 있도록 하는 것이다. 본 문서에서 이루고자 하는 기술적 과제는 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술적 과제들은 아래의 기재로부터 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2021-0105261", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 문서에 개시된 다양한 실시예에 따른 전자 장치는, 메모리, 타깃 프로세서, 및 프로세서를 포함하고, 상기 프로세서는 인공 신경망 모델에 기초한 연산 수행 요청을 획득하고, 상기 인공 신경망 모델에 대응되며 상기 타 깃 프로세서에서 사용가능하도록 컴파일된 커널이 상기 메모리에 캐시되었는지 여부를 확인하고, 상기 타깃 프 로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않음에 대응하여, 상기 인공 신경망 모델에 기초한 연산 을 수행하고, 상기 인공 신경망 모델을 컴파일하여 상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널을 생성할 수 있다. 본 문서에 개시된 다양한 실시예에 따른 전자 장치의 동작 방법은, 인공 신경망 모델에 기초한 연산 수행 요청 을 획득하는 동작, 상기 인공 신경망 모델에 대응되며 상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 상기 메모리에 캐시되었는지 여부를 확인하는 동작, 상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않음에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 수행하는 동작, 및 상기 인공 신경망 모델 을 컴파일하여 상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널을 생성하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0105261", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "예를 들어, 전자 장치는 인공 신경망 모델을 타깃 프로세서에서 사용할 수 있도록 컴파일함과 동시에, 중앙 처 리 장치에서 연산을 수행하여 초기 수행 시간을 줄일 수 있다. 예를 들어, 전자 장치는 컴파일 커널을 미리 캐시하지 않고, 필요 시 인공 신경망 모델을 타깃 프로세서에서 사 용할 수 있도록 컴파일하여, 저장 공간의 낭비를 줄일 수 있다."}
{"patent_id": "10-2021-0105261", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면,모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다.상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 뉴럴 네트워크(NN, Neural network) 구조의 일 예에 관한 도면이다. 도 2를 참고하면, 인공 신경망 모델은 복수의 레이어들(L1 내지 Ln)을 포함할 수 있다. 복수의 레이어들 (L1 내지 Ln) 각각은 선형 레이어 또는 비선형 레이어일 수 있으며, 실시예에 따라, 적어도 하나의 선형 레이어 및 적어도 하나의 비선형 레이어가 결합되어 하나의 레이어로 지칭될 수도 있다. 예를 들어, 선형 레이어는 컨 볼루션 레이어(convolution), 풀리 커넥티드(fully connected) 레이어를 포함할 수 있으며, 비선형 레이어는 샘 플링(sampling) 레이어, 풀링(pooling) 레이어, 활성(activation) 레이어를 포함할 수 있다. 예시적으로, 제1 레이어(L1)는 컨볼루션 레이어이고, 제2 레이어(L2)는 샘플링 레이어일 수 있다. 인공 신경망 모델은 활성(activation) 레이어를 더 포함할 수 있으며, 다른 종류의 연산을 수행하는 레이어를 더 포함 할 수 있다. 복수의 레이어들 각각은 입력되는 이미지 데이터 또는 이전 레이어에서 생성된 피처맵(feature map)을 입력 피 처맵으로서 수신하고, 입력 피처맵을 연산하여 출력 피처맵을 생성할 수 있다. 이때, 피처맵은 입력 데이터의 다양한 특징이 표현된 데이터를 의미한다. 피처맵들(FM1, FM2, FM3)은 예컨대 2차원 매트릭스 또는 3차원 매트 릭스 형태를 가질 수 있다. 피처맵들(FM1 내지 FM3)은 너비(W)(또는 칼럼이라고 함), 높이(H)(또는 로우라고 함) 및 깊이(D)를 가지며, 이는 좌표상의 x축, y축 및 z축에 각각 대응할 수 있다. 이때, 깊이(D)는 채널 수로 지칭될 수 있다. 제1 레이어(L1)는 제1 피처맵(FM1)을 웨이트 맵(WM)과 컨볼루션하여 제2 피처맵(FM2)을 생성할 수 있다. 웨이트 맵(WM)은 제1 피처맵(FM1)을 필터링할 수 있으며, 필터 또는 커널로 지칭될 수 있다. 예컨대, 웨이트 맵(WM)의 깊이, 즉 채널 개수는 제1 피처맵(FM1)의 깊이, 즉 채널 개수와 동일하며, 웨이트 맵(WM)과 제1 피처맵(FM1)의 동일한 채널끼리 컨볼루션될 수 있다. 웨이트 맵(WM)은 제1 피처맵(FM1)을 슬라이딩 윈도우로하여 횡단하는 방 식으로 시프트된다. 시프트되는 양은 \"스트라이드(stride) 길이\" 또는 \"스트라이드\"로 지칭될 수 있다. 각 시프 트동안, 웨이트 맵(WM)에 포함되는 웨이트들 각각이 제1 피처맵(FM1)과 중첩된 영역에서의 모든 피처값과 곱해 지고 더해질 수 있다. 제1 피처맵(FM1)과 웨이트 맵(WM)이 컨볼루션 됨에 따라, 제2 피처맵(FM2)의 하나의 채널 이 생성될 수 있다. 도 2에는 하나의 웨이트 맵(WM)이 표시되었으나, 실질적으로는 복수개의 웨이트 맵이 제1 피처맵(FM1)과 컨볼루션 되어, 제2 피처맵(FM2)의 복수개의 채널이 생성될 수 있다. 다시 말해, 제2 피처맵 (FM2)의 채널의 수는 웨이트 맵의 개수에 대응할 수 있다. 제2 레이어(L2)는 제2 피처맵(FM2)의 공간적 크기(spatial size)를 변경함으로써, 제3 피처맵(FM3)을 생성할 수 있다. 일 예로, 제2 레이어(L2)는 샘플링 레이어일 수 있다. 제2 레이어(L2)는 업-샘플링 또는 다운-샘플링을 수행할 수 있으며, 제2 레이어(L2)는 제2 피처맵(FM2)에 포함된 데이터들 중 일부를 선별할 수 있다. 예컨대, 2차원의 윈도우(WD)가 윈도우(WD)의 사이즈(예컨대, 4 * 4 행렬) 단위로 제2 피처맵(FM2) 상에서 쉬프트되고, 윈 도우(WD)와 중첩되는 영역에서 특정 위치(예컨대, 1행 1열)의 값을 선택할 수 있다. 제2 레이어(L2)는 선택된 데이터를 제3 피처맵(FM3)의 데이터로서 출력할 수 있다. 다른 예로, 제2 레이어(L2)는 풀링 레이어일 수 있다. 이 경우, 제2 레이어(L2)는 제2 피처맵(FM2)에서 윈도우(WD)와 중첩되는 영역의 피처 값들의 최대값(또는 피처 값들의 평균값)이 선택될 수 있다. 제2 레이어(L2)는 선택된 데이터를 제3 피처맵(FM3)의 데이터로서 출력할 수 있다. 이에 따라, 제2 피처맵(FM2)으로부터 공간적 사이즈가 변경된 제3 피처맵(FM3)이 생성될 수 있다. 제3 피처맵 (FM3)의 채널과 제2 피처맵(FM2)의 채널 개수는 동일할 수 있다. 한편, 본 개시의 예시적인 실시예에 따르면, 풀링 레이어보다 샘플링 레이어의 연산 속도가 빠를 수 있고, 샘플링 레이어는 출력 이미지의 퀄리티(예컨대, PSNR(Peak Signal to Noise Ratio) 측면에서)를 개선할 수 있다. 예컨대, 풀링 레이어에 의한 연산은, 최대 값 또는 평균 값을 산출하여야 하므로 샘플링 레이어에 의한 연산보다 연산 시간이 더 클 수 있다. 실시예에 따라, 제2 레이어(L2)는 샘플링 레이어 또는 풀링 레이어에 한정되지 않는다. 즉, 제2 레이어(L2)는 제1 레이어(L1)와 유사한 컨볼루션 레이어가 될 수 있다. 제2 레이어(L2)는 제2 피처맵(FM2)을 웨이트 맵과 컨 볼루션하여 제3 피처맵(FM3)을 생성할 수 있다. 이 경우, 제2 레이어(L2)에서 컨볼루션 연산을 수행한 웨이트 맵은 제1 레이어(L1)에서 컨볼루션 연산을 수행한 웨이트 맵(WM)과 다를 수 있다. 제1 레이어(L1) 및 제2 레이어(L2)를 포함한 복수의 레이어들을 거쳐 제N 레이어에서 제N 피처맵을 생성할 수 있다. 제N 피처맵은 출력 데이터가 출력되는 인공 신경망 모델의 백 엔드(back end)에 위치한 복원 레이어 (reconstruction layer)에 입력될 수 있다. 복원 레이어는 제N 피처맵을 기반으로 출력 이미지를 생성할 수 있 다. 또한, 복원 레이어는 제N 피처맵 뿐만 아니라, 제1 피처맵(FM1) 및 제2 피처맵(FM2) 등 복수의 피처맵들을 수신하고, 복수의 피처맵들에 기초하여 출력 이미지를 생성할 수 있다. 예컨대, 복원 레이어는, 컨볼루션 레이어 또는 디-컨볼루션 레이어일 수 있다. 실시예에 따라서는, 피처맵으로 부터 이미지를 복원할 수 있는 다른 종류의 레이어로 구현될 수도 있다. 도 3은, 다양한 실시예에 따른 전자 장치의 블록도이다. 도 3을 참조하면, 전자 장치 (예 : 도 1의 전자 장치) 는 프로세서(예: 도 1의 프로세서 ), GPU 및/또는 메모리(예: 도 1의 메모리)를 포함할 수 있다. 다양한 실시예에 따른 인공 신경망 모델은 지정된 언어로 작성되어, 복수의 레이어(layer) 및/또는 오퍼레 이션(operation)을 포함하는 인공 신경망 모델(Neural network model)일 수 있다. 일 실시예에 따른 인공 신경 망 모델은 CNN(Convolution Neural Network), R-CNN(Region with Convolution Neural Network), RPN(Region Proposal Network), RNN(Recurrent Neural Network), S-DNN(Stacking-based deep Neural Network), S-SDNN(State-Space Dynamic Neural Network), Deconvolution Network, DBN(Deep Belief Network), RBM(Restricted Boltzman Machine), Fully Convolutional Network, LSTM(Long Short-Term Memory) Network, Classification Network 등 다양한 종류의 네트워크일 수 있다. 일 실시예에 따른 인공 신경망 모델은 지 정된 데이터에 대하여 학습될 수 있고, 입력 데이터를 획득하고, 입력 데이터를 기반으로 연산을 수행하여 출력 데이터를 생성할 수 있다. 일 실시예에 따르면, 인공 신경망 모델은 메모리에 저장되어있을 수 있다. 일 실시예에 따르면, 어플 리케이션(예 : 도 1의 어플리케이션)은 인공 신경망 모델에 기초한 연산을 수행하도록 프로세서(32 0)에 요청할 수 있다. 일 실시예에 따르면, 인공 신경망 모델에 기초한 연산은 중앙 처리 장치(CPU, Central Processing unit)인 프로세서 및/또는 그래픽 처리 장치인 GPU(Graphic processing unit, 350)에 서 수행될 수 있다. 일 실시예에 따르면, 인공 신경망 모델은 SPIR-V, Vulkan, OpenCL과 같은 중간 표현(IR, intermediate representation)으로 작성되었을 수 있다. 다양한 실시예에 따른 프로세서는 중앙 처리 장치(CPU)일 수 있다. 다양한 실시예에 따른 프로세서는 컴파일 관리 모듈, CPU 런타임, 컴파일 헬퍼, IR 런타임 및/또는 컴파일러를 포함할 수 있다. 본 명세서에서 컴파일 관리 모듈, CPU 런타임, 컴파일 헬퍼, IR 런타임 및/또는 컴파일러 와 같은 구성들이 프로세서에 포함되는 것으로 기재되었으나, 상기 구성들은 프로세서에 의하여수행되는 소프트웨어 기능 단위일 수 있다. 본 명세서에서 컴파일 관리 모듈, CPU 런타임, 컴파일 헬퍼, IR 런타임 및/또는 컴파일러 와 같은 구성들이 수행하는 것으로 기재된 각 동작은 프로세서에 의하여 수행될 수 있다. 다양한 실시예예 따른 컴파일 관리 모듈은 인공 신경망 모델에 기초한 연산의 수행 및/또는 컴파일과 관련하여, CPU 런타임, 컴파일 헬퍼 및/또는 IR 런타임에 인공 신경망 모델을 제어할 수 있다. 일 실시예에 따른 컴파일 관리 모듈은, 인공 신경망 모델에 기초한 연산을 수행하는 요청을 획득할 수 있다. 예를 들어, 컴파일 관리 모듈은 어플리케이션(예 : 도 2의 어플리케이션)으로부터 인공 신 경망 모델에 기초한 연산을 수행하는 요청을 획득할 수 있다. 예를 들어, 인공신경망 모델에 기초한 연산 이란, 인공신경망 모델에 입력 데이터를 입력하여 출력 데이터를 획득하는 일련의 컴퓨팅 동작일 수 있다. 일 실시예에 따른 컴파일 관리 모듈은, 컴파일 헬퍼로부터 메모리에 인공 신경망 모델에 대응되는 컴파일된 커널의 캐시(cache) 여부를 확인할 수 있다. 예를 들어, 컴파일된 커널은 GPU에서 실행 가능한 바이너리로 컴파일된 커널일 수 있다. 예를 들어, 컴파일된 커널은 타깃 프로세서(예 : GPU)에서 실행되 는 프로그램에서 선언된 함수일 수 있다. 예를 들어, 캐시 여부란, GPU에서 실행 가능하도록 컴파일된 커 널이 메모리의 RAM 영역에 존재하는지 여부일 수 있다. 일 실시예에 따른 컴파일 관리 모듈은, 컴파일된 커널이 캐시되어있지 않음에 대응하여, CPU 런타임 에 CPU에서 인공 신경망 모델에 기초한 연산을 수행하도록 요청할 수 있다. 일 실시예에 따른 컴파일 관리 모듈은, 컴파일된 커널이 캐시되어있지 않음에 대응하여, 컴파일 헬퍼(32 4)에 인공 신경망 모델을 컴파일 하도록 요청할 수 있다. 일 실시예예 따른 컴파일 관리 모듈은, 컴파일된 커널이 캐시되어있음에 대응하여, IR 런타임에 인공 신경망 모델에 대응되는 컴파일된 커널을 GPU를 통해 연산을 수행하도록 요청할 수 있다. 다양한 실시예에 따른 CPU 런타임은 CPU를 통하여 인공신경망 모델에 기초한 연산을 수행할 수 있다. 일 실시예에 따르면, CPU 런타임은 컴파일 관리 모듈의 연산 수행 요청에 대응하여, CPU에서 입력 데 이터에 대하여 인공 신경망 모델에 기초한 연산을 수행할 수 있다. 예를 들어, CPU 런타임은 어플리 케이션로부터 입력 데이터를 획득하고, 입력 데이터를 인공 신경망 모델에 기초하여 CPU에서 연산을 수행하여 출력 데이터를 출력할 수 있다. 일 실시예에 따르면, CPU 런타임은 컴파일 관리 모듈의 연 산 수행 중단 요청에 대응하여, CPU에서 인공 신경망 모델에 기초한 연산 수행을 중단할 수 있다. 다양한 실시예에 따른 컴파일 헬퍼는 컴파일 관리 모듈의 명령에 대응하여 인공 신경망 모델의 컴파일과 관련된 동작을 수행할 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일 관리 모듈의 요청에 대응하여, 메모리에 인공 신경 망 모델에 대응하는 컴파일된 커널이 캐시되어있는지 여부를 확인할 수 있다. 예를 들어, 컴파일 헬퍼는 인공 신경망 모델에 대응하는 컴파일된 커널이 메모리에 존재하지 않 음에 대응하여, 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 컴파일 헬퍼는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널을 생성한 컴파 일러와 컴파일러가 동일한지 여부를 확인하고, 동일하지 않음에 대응하여 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 컴파일 헬퍼는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널의 오퍼레이션 (operation), 파라미터(parameter) 및/또는 컴파일 옵션이 컴파일러에 설정된 것과 동일한지 여부를 확인 하고, 동일하지 않음에 대응하여 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 컴파일 헬퍼는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널의 오퍼레이션 네임(operation name) 파라미터(parameter), 컴파일러 옵션 및/또는 오퍼레이션 소스 코드의 해시(hash) 값과 인공 신경망 모델 파일의 오퍼레이션 네임(operation name) 파라미터(parameter), 컴파일러 옵션 및/또는 오퍼레이션 소스 코드의 해시(hash) 값이 동일한지 여부를 확인하고, 동일하지 않음에 대응하여 컴파일된 커널 이 캐시되어 있지 않다고 확인할 수 있다.일 실시예에 따르면, 컴파일 헬퍼는 컴파일된 커널의 캐시 여부를 컴파일 관리 모듈에 알릴 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일 관리 모듈의 요청에 대응하여, 컴파일러에 인공 신 경망 모델을 컴파일 하도록 명령할 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일러가 컴파일을 완료함에 대응하여, 컴파일 완료를 컴파일 관리 모듈에 알릴 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일러가 컴파일을 완료함에 대응하여, 컴파일된 커널을 메모 리에 캐시할 수 있다. 다양한 실시예에 따른 IR 런타임은, GPU를 통하여 컴파일된 커널을 이용하여 연산을 수행할 수 있다. 일 실시예예 따른 IR 런타임은 메모리에 캐시된 컴파일된 커널을 이용하여 GPU을 통하여 연산을 수행할 수 있다. 예를 들어, IR 런타임은, 메모리에 컴파일된 커널이 캐시되어 있음에 따른 컴파일 관리 모듈의 명령에 대응하여, 메모리에 캐시된 컴파일된 커널을 획득하여 GPU를 통하여 연산을 수행할 수 있다. 일 실시예에 따른 IR 런타임은 컴파일러가 컴파일한 컴파일된 커널을 이용하여 GPU을 통하여 연 산을 수행할 수 있다. 예를 들어, IR 런타임은, 컴파일러가 컴파일을 완료함에 따른 컴파일 관리 모 듈의 명령에 대응하여, 컴파일된 커널을 이용하여 GPU를 통하여 연산을 수행할 수 있다. 일 실시예에 따른 IR 런타임은 컴파일러가 컴파일하여 메모리에 캐시한 컴파일된 커널을 이용하 여 GPU을 통하여 연산을 수행할 수 있다. 예를 들어, IR 런타임은, 컴파일러가 컴파일을 완료함 에 따른 컴파일 관리 모듈의 명령에 대응하여, 메모리에 저장된 컴파일된 커널을 이용하여 GPU 를 통하여 연산을 수행할 수 있다. 예를 들어, IR 런타임은 어플리케이션로부터 입력 데이터를 획득하고, 입력 데이터를 인공 신경망 모 델에 기초하여 GPU에서 연산을 수행하여 출력 데이터를 출력할 수 있다. 다양한 실시예에 따른 컴파일러는 특정 언어로 작성된 소스 코드를 타깃 프로그램 및/또는타깃 하드웨어에 서 처리할 수 있는 목적 코드로 컴파일(compile)할 수 있다. 일 실시예에 따른 컴파일러는 인공 신경망 모델을 타깃 프로세서에서 사용가능한 바이너리로 컴파일 할 수 있다. 예를 들어, 바이너리는 복수의 커널을 포함할 수 있고, 각 커널은 타깃 프로세서에서 실행될 수 있 다. 예를 들어, 타깃 프로세서는 GPU일 수 있다. 예를 들어, 컴파일러는 중간 표현으로 작성된 인공 신경망 모델을 GPU에서 사용 가능한 바이너리로 컴파일하여 복수의 컴파일된 커널을 생성할 수 있다. 다양한 실시예에 따른 메모리는 데이터를 저장하기 위한 저장 장소로서, OS(Operating System), 각종 프로 그램들, 및 각종 데이터를 저장할 수 있다. 메모리는 휘발성 메모리(volatile memory) 또는 불휘발성 메모리(nonvolatile memory) 중 적어도 하나를 포함할 수 있다. 불휘발성 메모리는 ROM (Read Only Memory), PROM (Programmable ROM), EPROM (Electrically Programmable ROM), EEPROM (Electrically Erasable and Programmable ROM), 플래시 메모리, PRAM (Phase- change RAM), MRAM (Magnetic RAM), RRAM (Resistive RAM), FRAM (Ferroelectric RAM) 등을 포함할 수 있다. 휘발성 메모리는 DRAM (Dynamic RAM), SRAM (Static RAM), SDRAM (Synchronous DRAM), PRAM (Phase-change RAM), MRAM (Magnetic RAM), RRAM (Resistive RAM), FeRAM (Ferroelectric RAM) 등을 포함할 수 있다. 일 실시예에 따르면, 메모리는 인공 신경망 모델 및/또는 컴파일된 커널을 저장할 수 있다. 다양한 실시예에 따른 GPU는 그래픽 처리 장치로, 지정된 기능(예 : 그래픽 처리 및/또는 병렬 데이터 처 리)을 CPU보다 빠른 속도로 수행할 수 있다. 예를 들어, GPU는 지정된 기능을 빠른 속도로 수행함으로써 CPU를 지원할 수 있다. 다양한 실시예에 따른 GPU는 컴파일된 커널을 이용하여 인공 신경망 모델에 기초한 연산을 수행할 수 있다. 도 4는, 다양한 실시예에 따른 프로세서(예 : 도 3 의 프로세서)가 인공신경망 모델(예 : 도 3의 인공 신 경망 모델에 기초하여 연산을 수행하기 위하여 전자 장치를 제어하는 동작을 도시한 흐름도이다.다양한 실시예에 따른 프로세서는, 동작 410에서, 인공 신경망 모델에 기초한 연산을 수행하는 요청 을 획득할 수 있다. 일 실시예에 따른 프로세서는 어플리케이션(예 : 도 2의 어플리케이션)으로부터 인공 신경망 모델(예 : 도 3의 301)에 기초한 연산을 수행하는 요청을 획득할 수 있다. 예를 들어, 인공 신경망 모델에 기초한 연산 이란, 인공신경망 모델에 입력 데이터를 입력하여 출력 데이터를 획득하는 일련의 컴퓨팅 동작일 수 있다. 다양한 실시예예 따른 프로세서는, 동작 420에서, 컴파일된 커널의 캐시 여부를 확인할 수 있다. 일 실시예에 따른 프로세서는, 메모리에 인공 신경망 모델에 대응되는 컴파일된 커널의 캐시 여 부를 확인할 수 있다. 예를 들어, 프로세서는 인공 신경망 모델에 대응하는 컴파일된 커널이 메모리에 존재하지 않음 에 대응하여, 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 프로세서는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널을 생성한 컴파일 러와 현재 설정된 컴파일러가 동일한지 여부를 확인하고, 동일하지 않음에 대응하여 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 프로세서는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널의 오퍼레이션 (operation), 파라미터(parameter) 및/또는 컴파일 옵션이 현재 설정된 컴파일러와 동일한지 여부를 확인하고, 동일하지 않음에 대응하여 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 프로세서는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널의 오퍼레이션 네 임(operation name) 파라미터(parameter), 컴파일러 옵션 및/또는 오퍼레이션 소스 코드의 해시(hash) 값과 인 공 신경망 모델 파일의 오퍼레이션 네임(operation name) 파라미터(parameter), 컴파일러 옵션 및/또는 오 퍼레이션 소스 코드의 해시(hash) 값이 동일한지 여부를 확인하고, 동일하지 않음에 대응하여 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 다양한 실시예에 따른 프로세서는, 동작 460에서, 컴파일된 커널이 캐시되어 있음에 대응하여(예 : 동작 420 - 예), 컴파일된 커널을 이용하여 GPU를 통하여 연산을 수행 수 있다. 일 실시예예 따른 프로세서는, 컴파일된 커널이 메모리에 캐시되어있음에 대응하여, 인공 신경망 모 델에 대응되는 컴파일된 커널을 GPU를 통해 연산을 수행하도록 할 수 있다. 일 실시예예 따른 프로세서는 메모리에 캐시된 컴파일된 커널을 이용하여 GPU을 통하여 연산을 수행할 수 있다. 예를 들어, 프로세서는, 메모리에 컴파일된 커널이 캐시되어 있음에 대응하여, 메모 리에 캐시된 컴파일된 커널을 획득하여 GPU를 통하여 연산을 수행할 수 있다. 다양한 실시예에 따른 GPU는 컴파일된 커널을 이용하여 인공 신경망 모델에 기초한 연산을 수행할 수 있다. 다양한 실시예에 따른 프로세서는, 동작 430에서, 컴파일된 커널이 캐시되어 있지 않음에 대응하여(예 : 동작 420 - 아니오), 인공 신경망 모델에 기초한 연산을 수행할 수 있다. 일 실시예에 따른 프로세서는, 컴파일된 커널이 메모리에 캐시되어있지 않음에 대응하여, CPU에서 인 공 신경망 모델에 기초한 연산을 수행할 수 있다. 다양한 실시에에 따른 프로세서는, 동작 440에서, 인공 신경망 모델을 컴파일할 수 있다. 일 실시예에 따른 프로세서는, 컴파일된 커널이 캐시되어있지 않음에 대응하여, 인공 신경망 모델을 컴파일할 수 있다. 일 실시예에 따른 프로세서는 인공 신경망 모델을 타깃 프로세서에서 사용가능한 바이너리로 컴파일 할 수 있다. 예를 들어, 바이너리는 복수의 커널을 포함할 수 있고, 각 커널은 타깃 프로세서에서 실행될 수 있 다. 예를 들어, 타깃 프로세서는 GPU일 수 있다. 예를 들어, 컴파일러는 중간 표현으로 작성된 인공 신경망 모델을 GPU에서 사용 가능한 바이너리로 컴파일하여 복수의 컴파일된 커널을 생성할 수 있다. 다양한 실시예에 따른 프로세서는, 동작 450에서, 컴파일이 완료되었는지여부를 확인할 수 있다. 일 실시예에 따르면, 프로세서는 컴파일을 완료함에 대응하여, 컴파일된 커널을 메모리에 캐시할 수 있다. 다양한 실시예에 따른 프로세서는, 컴파일이 완료되지 않음에 대응하여(예 : 동작 450 - 아니오), 동작 430을 수행할 수 있다. 예를 들어, 프로세서는, 동작 430에 따라 CPU에서 인공 신경망 모델에 기초한 연산을 수행하고, 동작 440에 따라, 인공 신경망 모델을 컴파일할 수 있다. 다양한 실시예예 따른 프로세서는, 동작 460에서, 컴파일이 완료됨에 대응하여(예 : 동작 450 - 예) GPU을 통하여 컴파일된 커널을 이용하여 연산을 수행할 수 있다. 일 실시예에 따른 프로세서는 컴파일한 컴파일된 커널을 이용하여 GPU을 통하여 인공 신경망 모델 에 기초한 연산을 수행할 수 있다. 도 5는, 다양한 실시예에 따른 프로세서(예 : 도 3 의 프로세서가 인공신경망 모델(예 : 도 3의 인공 신경 망 모델에 기초하여 연산을 수행하기 위하여 전자 장치를 제어하는 동작에 따른 데이터의 흐름을 도 시한 도면이다. 다양한 실시예에 따른 인공 신경망 모델은 지정된 언어로 작성되어, 복수의 레이어(layer) 및/또는 오퍼레 이션(operation)을 포함하는 인공 신경망 모델(Neural network model)일 수 있다. 일 실시예에 따르면, 인공 신경망 모델은 SPIR-V, Vulkan, OpenCL과 같은 중간 표현(IR, intermediate representation)으로 작성되 었을 수 있다. 일 실시예에 따르면, 어플리케이션(예 : 도 1의 어플리케이션)은 인공 신경망 모델에 기초한 연산을 수행하도록 프로세서에 요청할 수 있다. 다양한 실시예예 따른 컴파일 관리 모듈은 인공 신경망 모델에 기초한 연산의 수행 및/또는 컴파일과 관련하여, CPU 런타임, 컴파일 헬퍼 및/또는 IR 런타임에 인공 신경망 모델을 제어할 수 있다. 일 실시예에 따른 컴파일 관리 모듈은, 인공 신경망 모델에 기초한 연산을 수행하는 요청을 획득할 수 있다. 예를 들어, 컴파일 관리 모듈은 어플리케이션으로부터 인공 신경망 모델에 기초한 연 산을 수행하는 요청을 획득할 수 있다. 일 실시예에 따른 컴파일 관리 모듈은, 컴파일 헬퍼로부터 메모리에 인공 신경망 모델에 대응되는 컴파일된 커널의 캐시 여부를 확인할 수 있다. 다양한 실시예에 따른 컴파일 헬퍼는 컴파일 관리 모듈의 명령에 대응하여 인공 신경망 모델의 컴파일과 관련된 동작을 수행할 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일 관리 모듈의 요청에 대응하여, 메모리에 인공 신경 망 모델에 대응하는 컴파일된 커널이 캐시되어있는지 여부를 확인할 수 있다. 예를 들어, 컴파일 헬퍼는 인공 신경망 모델에 대응하는 컴파일된 커널이 메모리에 존재하지 않 음에 대응하여, 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 컴파일 헬퍼는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널을 생성한 컴파 일러와 컴파일러가 동일한지 여부를 확인하고, 동일하지 않음에 대응하여 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 컴파일 헬퍼는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널의 오퍼레이션 (operation), 파라미터(parameter) 및/또는 컴파일 옵션이 컴파일러에 설정된 것과 동일한지 여부를 확인 하고, 동일하지 않음에 대응하여 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 예를 들어, 컴파일 헬퍼는 메모리에 존재하는 컴파일된 커널에 대하여, 컴파일된 커널의 오퍼레이션 네임(operation name) 파라미터(parameter), 컴파일러 옵션 및/또는 오퍼레이션 소스 코드의 해시(hash) 값과 인공 신경망 모델 파일의 오퍼레이션 네임(operation name) 파라미터(parameter), 컴파일러 옵션 및/또는 오퍼레이션 소스 코드의 해시(hash) 값이 동일한지 여부를 확인하고, 동일하지 않음에 대응하여 컴파일된 커널이 캐시되어 있지 않다고 확인할 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일된 커널의 캐시 여부를 컴파일 관리 모듈에 알릴 수 있다. 일 실시예에 따른 컴파일 관리 모듈은, 컴파일된 커널이 캐시되어있지 않음에 대응하여, CPU 런타임 에 CPU에서 인공 신경망 모델에 기초한 연산을 수행하도록 요청할 수 있다. 다양한 실시예에 따른 CPU 런타임은 CPU를 통하여 인공신경망 모델에 기초한 연산을 수행할 수 있다. 일 실시예에 따르면, CPU 런타임은 컴파일 관리 모듈의 연산 수행 요청에 대응하여, CPU에서 입력 데 이터에 대하여 인공 신경망 모델에 기초한 연산을 수행할 수 있다. 예를 들어, CPU 런타임은 어플리 케이션로부터 입력 데이터를 획득하고, 입력 데이터를 인공 신경망 모델에 기초하여 CPU에서 연 산을 수행하여 출력 데이터를 출력할 수 있다. 일 실시예에 따르면, CPU 런타임은 컴파일 관리 모듈 의 연산 수행 중단 요청에 대응하여, CPU에서 인공 신경망 모델에 기초한 연산 수행을 중단할 수 있 다. 일 실시예에 따른 컴파일 관리 모듈은, 컴파일된 커널이 캐시되어있지 않음에 대응하여, 컴파일 헬퍼(32 4)에 인공 신경망 모델을 컴파일 하도록 요청할 수 있다. 일 실시예예 따른 컴파일 관리 모듈은, 컴파일된 커널이 캐시되어있음에 대응하여, IR 런타임에 인공 신경망 모델에 대응되는 컴파일된 커널을 GPU를 통해 연산을 수행하도록 요청할 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일 관리 모듈의 요청에 대응하여, 컴파일러에 인공 신 경망 모델을 컴파일 하도록 명령할 수 있다. 다양한 실시예에 따른 컴파일러는 특정 언어로 작성된 소스 코드를 타깃 프로그램 및/또는타깃 하드웨어에 서 처리할 수 있는 목적 코드로 컴파일(compile)할 수 있다. 일 실시예에 따른 컴파일러는 인공 신경망 모델을 타깃 프로세서에서 사용가능한 바이너리로 컴파일 할 수 있다. 예를 들어, 바이너리는 복수의 커널을 포함할 수 있고, 각 커널은 타깃 프로세서에서 실행될 수 있 다. 예를 들어, 타깃 프로세서는 GPU일 수 있다. 예를 들어, 컴파일러는 중간 표현으로 작성된 인공 신경망 모델을 GPU에서 사용 가능한 바이너리로 컴파일하여 복수의 컴파일된 커널을 생성할 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일러가 컴파일을 완료함에 대응하여, 컴파일 완료를 컴파일 관리 모듈에 알릴 수 있다. 일 실시예에 따르면, 컴파일 헬퍼는 컴파일러가 컴파일을 완료함에 대응하여, 컴파일된 커널을 메모리에 캐시할 수 있다. 다양한 실시예에 따른 IR 런타임은, GPU를 통하여 컴파일된 커널(601,602)을 이용하여 연산을 수행할 수 있다. 일 실시예예 따른 IR 런타임은 메모리에 캐시된 컴파일된 커널을 이용하여 GPU을 통하여 연산을 수행할 수 있다. 예를 들어, IR 런타임은, 메모리에 컴파일된 커널이 캐시되어 있음에 따른 컴파일 관리 모듈의 명령에 대응하여, 메모리에 캐시된 컴파일된 커널을 획득하여 GPU를 통하여 연산을 수행할 수 있다. 일 실시예에 따른 IR 런타임은 컴파일러가 컴파일한 컴파일된 커널을 이용하여 GPU을 통하 여 연산을 수행할 수 있다. 예를 들어, IR 런타임은, 컴파일러가 컴파일을 완료함에 따른 컴파일 관 리 모듈의 명령에 대응하여, 컴파일된 커널을 이용하여 GPU를 통하여 연산을 수행할 수 있다. 예를 들어, IR 런타임은 어플리케이션로부터 입력 데이터를 획득하고, 입력 데이터를 인공 신경망 모 델에 기초하여 GPU에서 연산을 수행하여 출력 데이터를 출력할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치는, 메모리, 타깃 프로세서, 및 프로세서를 포 함하고, 상기 프로세서는 인공 신경망 모델에 기초한 연산 수행 요청을 획득하고, 상기 인공 신경망 모델에 대응되며 상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 상기 메모리에 캐시 되었는지 여부를 확인하고, 상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않음에 대 응하여, 상기 인공 신경망 모델에 기초한 연산을 수행하고, 상기 인공 신경망 모델을 컴파일하여 상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널을 생성할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 인공 신경망 모델의 컴 파일이 완료됨에 대응하여, 상기 컴파일이 완료됨을 알리고, 상기 타깃 프로세서에서 사용 가능하도록 컴 파일된 커널을 상기 메모리에 저장할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 인공 신경망 모델의 컴 파일이 완료됨에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 상기 타깃 프로세서에서 수행하 도록 상기 타깃 프로세서를 제어할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널이 캐시되어 있음에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 상기 타 깃 프로세서에서 수행하도록 상기 타깃 프로세서를 제어할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 메모리에 존재하는 커널 에 대하여, 상기 커널을 생성한 컴파일러와 현재 설정된 컴파일러가 동일하지 않음에 대응하여, 상기 타깃 프로 세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 메모리에 존재하는 커널 에 대하여, 상기 커널을 생성한 컴파일러의 설정 값과 현재 설정된 컴파일러의 설정 값이 동일하지 않음에 대응 하여, 상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 메모리에 존재하는 커널 에 대하여, 상기 커널이 기초된 인공 신경망의 설정 값과 상기 인공 신경망의 설정 값이 동일하지 않음에 대응 하여, 상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치에서, 상기 타깃 프로세서는 GPU(Graphic Processing Unit)일 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치의 동작 방법은, 인공 신경망 모델에 기초한 연산 수행 요 청을 획득하는 동작, 상기 인공 신경망 모델에 대응되며 상기 타깃 프로세서에서 사용가능하도록 컴 파일된 커널이 상기 메모리에 캐시되었는지 여부를 확인하는 동작, 상기 타깃 프로세서에서 사용가능 하도록 컴파일된 커널이 캐시되지 않음에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 수행하는 동 작, 및 상기 인공 신경망 모델을 컴파일하여 상기 타깃 프로세서에서 사용 가능하도록 컴파일된 커널 을 생성하는 동작을 포함할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 인공 신경망 모델의 컴파일이 완 료됨에 대응하여, 상기 컴파일이 완료됨을 알리는 동작, 및 상기 타깃 프로세서에서 사용 가능하도록 컴파 일된 커널을 상기 메모리에 저장하는 동작을 포함할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 인공 신경망 모델의 컴파일이 완 료됨에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 상기 타깃 프로세서에서 수행하도록 상기 타깃 프로세서를 제어하는 동작을 포함할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 타깃 프로세서에서 사용 가능하도 록 컴파일된 커널이 캐시되어 있음에 대응하여, 상기 인공 신경망 모델에 기초한 연산을 상기 타깃 프로세 서에서 수행하도록 상기 타깃 프로세서를 제어하는 동작을 포함할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 메모리에 존재하는 커널에 대하여, 상기 커널을 생성한 컴파일러와 현재 설정된 컴파일러가 동일하지 않음에 대응하여, 상기 타깃 프로세 서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인하는 동작을 포함할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 메모리에 존재하는 커널에 대하여, 상기 커널을 생성한 컴파일러의 설정 값과 현재 설정된 컴파일러의 설정 값이 동일하지 않음에 대응하 여, 상기 타깃 프로세서에서 사용가능 하도록 컴파일된 커널이 캐시되지 않다고 확인하는 동작을 포함할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 메모리에 존재하는 커널에 대하여, 상기 커널이 기초된 인공 신경망의 설정 값과 상기 인공 신경망의 설정 값이 동일하지 않음에대응하여, 상기 타깃 프로세서에서 사용가능하도록 컴파일된 커널이 캐시되지 않다고 확인하는 동작을 포 함할 수 있다. 본 발명의 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 타깃 프로세서는 GPU(Graphic Processing Unit)일 수 있다.본 문서의 다양한 실시 예들 및 이에 사용된 용어들은 본 문서 에 기재된 기술적 특징들을 특정한 실시 예들로 한정하려는 것이 아니며, 해당 실시 예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\",“또는 B 중 적어도 하나,”\"A, B 또는 C,\" \"A, B 및 C 중 적어도 하나,”및 “B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열 된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, “기능적으로” 또는 “통신적으로”라는 용어와 함께 또는 이런 용어 없이, “커플드” 또는 “커넥티드”라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 그리고 본 명세서와 도면에 개시된 본 문서에 개시된 실시예들은 본 문서에 개시된 실시예에 따른 기술 내용을 쉽게 설명하고 본 문서에 개시된 실시예의 이해를 돕기 위해 특정 예를 제시한 것일 뿐이며, 본 문서에 개시된 실시예의 범위를 한정하고자 하는 것은 아니다. 따라서 본 문서에 개시된 다양한 실시예의 범위는 여기에 개시 된 실시예들 이외에도 본 문서에 개시된 다양한 실시예의 기술적 사상을 바탕으로 도출되는 모든 변경 또는 변 형된 형태가 본 문서에 개시된 다양한 실시예의 범위에 포함되는 것으로 해석되어야 한다.도면 도면1 도면2 도면3 도면4 도면5"}
{"patent_id": "10-2021-0105261", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면의 설명과 관련하여, 동일 또는 유사한 구성 요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있 다. 도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블럭도이다. 도 2는 뉴럴 네트워크(NN, Neural network) 구조의 일 예에 관한 도면이다. 도 3은, 다양한 실시예에 따른 전자 장치의 블록도이다. 도 4는, 다양한 실시예에 따른 프로세서가 인공 신경망 모델에 기초하여 연산을 수행하기 위하여 전자 장치를 제어하는 동작을 도시한 흐름도이다. 도 5는, 다양한 실시예에 따른 프로세서가 인공신경망 모델에 기초하여 연산을 수행하기 위하여 전자 장치를 제 어하는 동작에 따른 데이터의 흐름을 도시한 도면이다."}
