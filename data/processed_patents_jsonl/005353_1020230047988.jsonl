{"patent_id": "10-2023-0047988", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0151992", "출원번호": "10-2023-0047988", "발명의 명칭": "사이버 위협 정보 처리 장치, 사이버 위협 정보 처리 방법 및 사이버 위협 정보 처리하는 프", "출원인": "주식회사 샌즈랩", "발명자": "김기홍"}}
{"patent_id": "10-2023-0047988", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "적어도 하나의 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력 받는 단계;상기 수신되거나 상기 입력된 파일 또는 상기 파일에 대한 정보와 관련된 사이버 위협 정보를 처리하는 단계;및상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공하는 단계를 포함하되, 상기 제공되는 사이버 위협 정보는 데이터셋 패키지를 포함하는, 사이버 위협 정보 처리 방법."}
{"patent_id": "10-2023-0047988", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서, 상기 데이터셋 패키지는 실행형 악성 코드 데이터셋 또는 비실행형 악성 코드 데이터셋 중 적어도 하나를 포함하는, 사이버 위협 정보 처리 방법."}
{"patent_id": "10-2023-0047988", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2항에 있어서, 상기 실행형 악성 코드 데이터셋은 실행형 악성 코드 파일을 포함하고, 상기 실행형 악성 코드 파일은 상기 사이버 위협 정보를 처리하는 단계를 통하여 악성 코드로 판단된 실행형 파일을 포함하는, 사이버 위협 정보 처리 방법."}
{"patent_id": "10-2023-0047988", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 2 항에 있어서, 상기 비실행형 악성 코드 데이터셋은 비실행형 악성 코드 파일을 포함하고, 상기 비실행형 악성 코드 파일은 상기 사이버 위협 정보를 처리하는 단계를 통하여 악성 코드로 판단된 비실행형 파일을 포함하는, 사이버 위협 정보 처리 방법."}
{"patent_id": "10-2023-0047988", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "사이버 위협 정보는 데이터베이스; 및프로세서를 포함하는 서버;를 포함하고, 상기 서버는, 적어도 하나의 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력받고,상기 프로세서는, 상기 입력된 파일 또는 상기 파일에 대한 정보와 관련된 사이버 위협 정보를 처리하고,상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에게 제공하되, 상기 제공되는 사이버 위협 정보는 데이터셋 패키지를 포함하는, 사이버 위협 정보 처리 장치."}
{"patent_id": "10-2023-0047988", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5 항에 있어서, 상기 데이터셋 패키지는 실행형 악성 코드 데이터셋 또는 비실행형 악성 코드 데이터셋 중 적어도 하나를 포함하는, 사이버 위협 정보 처리 장치.공개특허 10-2024-0151992-3-청구항 7 제 6 항에 있어서, 상기 실행형 악성 코드 데이터셋은 실행형 악성 코드 파일을 포함하고, 상기 실행형 악성 코드 파일은 상기 사이버 위협 정보를 처리하는 단계를 통하여 악성 코드로 판단된 실행형 파일을 포함하는, 사이버 위협 정보 처리 장치."}
{"patent_id": "10-2023-0047988", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 6 항에 있어서, 상기 비실행형 악성 코드 데이터셋은 비실행형 악성 코드 파일을 포함하고, 상기 비실행형 악성 코드 파일은 상기 사이버 위협 정보를 처리하는 단계를 통하여 악성 코드로 판단된 비실행형 파일을 포함하는, 사이버 위협 정보 처리 장치."}
{"patent_id": "10-2023-0047988", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "적어도 하나의 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력 받고;상기 수신되거나 상기 입력된 파일 또는 상기 파일에 대한 정보와 관련된 사이버 위협 정보를 처리하고; 및상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공하되, 상기 제공되는 사이버 위협 정보는 데이터셋 패키지를 포함하는; 컴퓨터 명령어들을 실행하는 사이버 위협 정보 처리 프로그램을 저장하는 컴퓨터로 판독 가능한 저장 매체."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 적어도 하나의 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력 받는 단계; 상기 수신되거나 상기 입력된 파일 또는 상기 파일에 대한 정보와 관련된 사이버 위협 정보를 처리하는 단계; 및 상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공하는 단계를 포함하되, 상기 제공되는 사이 버 위협 정보는 데이터셋 패키지를 포함하는, 사이버 위협 정보 처리 방법을 제공한다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "개시하는 실시 예들은 사이버 위협 정보 처리 장치, 사이버 위협 정보 처리 방법 및 사이버 위협 정보 처리하는 프로그램을 저장하는 저장매체에 관한 것이다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "신종 또는 변종 등의 악성코드를 중심으로 점차 고도화되고 있는 사이버 보안 위협의 피해가 커지고 있다. 이러 한 피해를 조금이라도 줄이고 조기에 대응하기 위해서 다차원의 패턴 구성 및 각종 복합 분석 등을 통해서 대응 기술에 대한 고도화를 병행해 나가고 있다. 그러나, 최근의 사이버 공격은 제어 범위 내에 적절하게 대응되기 보다는 오히려 나날이 위협이 증가하고 있는 추세이다. 이러한 사이버 공격은 기존 ICT (Information and Communication Technology) 기반 시설을 넘어서 우리 삶에 직접적으로 영향을 끼치는 금융, 교통, 환경, 건강 등에 까지 위협을 가하고 있다. 현존하는 대부분의 사이버 보안 위협을 탐지하고 대응하는 기반 기술 중에 하나는 사이버 공격 또는 악성 코드 에 대한 패턴을 데이터베이스를 사전에 생성하고 데이터 흐름이 필요한 곳에 적절한 모니터링 기술을 활용한다. 기존의 기술은 모니터링된 패턴과 일치하는 데이터 흐름 또는 코드가 탐지되면 위협을 식별하여 대응하는 방식 을 바탕으로 발전되어 왔다. 이와 같은 종래의 기술은 사전에 확보된 패턴과 일치하면 빠르고 정확하게 탐지할 수 있다는 장점이 있지만, 패턴이 확보되지 않거나 우회하는 신종, 변종 위협의 경우 탐지 자체가 불가능하거나 분석하는데 매우 시간이 오래 소요되는 문제점이 있었다. 종래의 기술은 인공지능 분석을 활용하더라도 악성코드 자체를 탐지하고 분석하는 기술을 고도화하는 방법에 초 점이 맞춰져 있다. 그러나 근본적으로 사이버 보안 위협을 대응하기 위한 원천적인 기술은 존재하지 않아 이러 한 방법만으로 신종 악성코드나 그 악성코드의 변종에 대응하기 힘들며 한계가 있다는 문제점이 있다. 예를 들면 이미 발견된 악성 코드 자체를 탐지하고 분석하는 기술만으로는 그 탐지나 분석 시스템을 속이기 위 한 디코이(decoy) 정보나 가짜 정보에 대응하지 못하고 혼선이 발생하는 문제점이 있다. 학습할 데이터가 충분히 있는 대량 생산의 악성코드의 경우는 그 특징 정보를 충분히 확보할 수 있기 때문에 악 성 여부 및 악성코드 종류를 구분할 수 있다. 그러나, 상대적으로 수량이 작게 만들어져 정교하게 공격하는 APT (Advanced Persistent Threat) 공격의 경우는 학습 데이터와 일치하지 않는 경우가 많고 타겟팅(targeting)된 공격이 대다수를 이루고 있기 때문에 기존 기술은 고도화하더라도 한계점이 존재한다. 또한 종래에는 악성 코드, 공격 코드 또는 사이버 위협에 대한 설명을 하는 방법과 표현 기법이 분석가의 입장 이나 분석 시각에 따라 달랐다. 예를 들면 악성 코드와 공격 행위를 기술하는 방식은 전세계적으로 표준이 되지 않아 같은 사건, 같은 악성코드를 탐지하여도 해당 분야의 전문가의 설명이 달라 혼동이 되는 문제점이 있었다. 심지어 악성코드 탐지 명 또한 통일이 되지 않아 같은 악성 파일임에도 불구하고 어떤 공격이 정확하게 수행되 었는지 식별되지 못하거나 다르게 정리되었다. 따라서 식별된 공격 기법을 정규화되고 표준화된 방식으로 설명 하지 못하는 문제점이 있었다. 종래의 악성 코드 탐지 및 분석 방법은 악성코드 자체의 탐지를 중시하여 매우 유사한 악성 행위를 수행하는 악 성 코드의 경우 생성하는 공격자가 다른 경우 공격자들을 식별하지 못하는 문제점이 있었다. 위와 같은 문제점들과 연결되어 종래의 방식은 이러한 개별적인 케이스 집중된 탐지 방법에 의해 추후 가까운 미래에 어떤 사이버 위협 공격이 있을지 예측하기 어려운 문제점이 있었다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "이하에서 개시하는 실시 예의 목적은, 인공 지능으로 학습된 데이터와 정확하게 일치하지 않는 악성 코드라도 탐지하고 대응할 수 있고 악성 코드의 변종에 대응할 수 있는 사이버 위협 정보 처리 장치, 사이버 위협 정보 처리 방법 및 사이버 위협 정보 처리하는 프로그램을 저장하는 저장매체를 제공하는 것이다. 실시 예의 다른 목적은 악성 코드의 변종이라도 매우 빠른 시간 내에 악성 코드, 공격 기법, 공격자와 공격 예 측 방법을 식별할 수 있는 사이버 위협 정보 처리 장치, 사이버 위협 정보 처리 방법 및 사이버 위협 정보 처리 하는 프로그램을 저장하는 저장매체를 제공하는 것이다. 실시 예의 다른 목적은 악성코드 탐지 명 등이 통일되지 않거나 사이버 공격 기법이 정확하게 기술되지 못하는 악성 코드의 정보를 정규화되고 표준화된 방식으로 제공할 수 있는 사이버 위협 정보 처리 장치, 사이버 위협 정보 처리 방법 및 사이버 위협 정보 처리하는 프로그램을 저장하는 저장매체를 제공하는 것이다. 실시 예의 다른 목적은 매우 유사한 악성 행위를 수행하는 악성 코드를 생성하는 다른 공격자들을 식별하고 미 래에 어떤 사이버 위협 공격이 있을지 예측이 가능한 사이버 위협 정보 처리 장치, 사이버 위협 정보 처리 방법 및 사이버 위협 정보 처리하는 프로그램을 저장하는 저장매체를 제공하는 것이다. 실시 예의 다른 목적은, 실행된 파일의 수행 결과는 동일하지만 수행 과정에 차이에 따라 발생하는 공격 기법 또는 공격 그룹의 차이가 실질적으로 다른 공격 기법이거나 또는 다른 공격 그룹에 의해 행해지는 것인지를 더 욱 명확하게 탐지하고 인지할 수 있는 구체적인 예들을 제공하는 것이다. 실시 예의 다른 목적은, 실행 파일이 아닌 비실행 파일인 경우라도 이에 포함된 여러 가지 파일 타입들에 대한 사이버 위협 정보, 공격 기법 및 공격 그룹을 식별할 수 있는 구체적인 예들을 제공하는 것이다. 실시 예의 다른 목적은, 웹페이지(web page)를 모니터링하고 악성 행위나 정보를 포함하는 웹페이지를 식별하고 웹페이지의 구성하는 구성요소가 악성 행위나 정보를 포함하는지 식별할 수 있는 예들을 제공하는 것이다. 실시 예의 다른 목적은, 웹페이지에 포함된 사이버 위협 정보, 공격 기법 및 공격 그룹을 식별할 수 있는 구체 적인 예들을 제공하는 것이다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일 실시 예는 적어도 하나의 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력 받 는 단계; 상기 수신되거나 상기 입력된 파일 또는 상기 파일에 대한 정보와 관련된 사이버 위협 정보를 처리하 는 단계; 및 상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공하는 단계를 포함하되, 상기 제공되는 사이버 위협 정보는 데이터셋 패키지를 포함하는, 사이버 위협 정보 처리 방법을 제공한다. 상기 데이터셋 패키지는 실행형 악성 코드 데이터셋 또는 비실행형 악성 코드 데이터셋 중 적어도 하나를 포함 하는 것을 특징으로 한다. 상기 실행형 악성 코드 데이터셋은 실행형 악성 코드 파일을 포함하고, 상기 실행형 악성 코드 파일은 상기 사 이버 위협 정보를 처리하는 단계를 통하여 악성 코드로 판단된 실행형 파일을 포함하는 것을 특징으로 한다. 상기 비실행형 악성 코드 데이터셋은 비실행형 악성 코드 파일을 포함하고, 상기 비실행형 악성 코드 파일은 상 기 사이버 위협 정보를 처리하는 단계를 통하여 악성 코드로 판단된 비실행형 파일을 포함하는 것을 특징으로 한다. 본 발명의 일 실시 예는 사이버 위협 정보는 데이터베이스; 및 프로세서를 포함하는 서버;를 포함하고, 상기 서 버는, 적어도 하나의 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력받고, 상기 프로세서 는, 상기 입력된 파일 또는 상기 파일에 대한 정보와 관련된 사이버 위협 정보를 처리하고, 상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에게 제공하되, 상기 제공되는 사이버 위협 정보는 데이터셋 패키 지를 포함하는 것을 특징으로 한다. 상기 데이터셋 패키지는 실행형 악성 코드 데이터셋 또는 비실행형 악성 코드 데이터셋 중 적어도 하나를 포함 하는 것을 특징으로 한다. 상기 실행형 악성 코드 데이터셋은 실행형 악성 코드 파일을 포함하고, 상기 실행형 악성 코드 파일은 상기 사 이버 위협 정보를 처리하는 단계를 통하여 악성 코드로 판단된 실행형 파일을 포함하는 것을 특징으로 한다. 상기 비실행형 악성 코드 데이터셋은 비실행형 악성 코드 파일을 포함하고, 상기 비실행형 악성 코드 파일은 상 기 사이버 위협 정보를 처리하는 단계를 통하여 악성 코드로 판단된 비실행형 파일을 포함하는 것을 특징으로 한다. 본 발명의 일 실시 예는 적어도 하나의 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력 받 고; 상기 수신되거나 상기 입력된 파일 또는 상기 파일에 대한 정보와 관련된 사이버 위협 정보를 처리하고; 및 상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공하되, 상기 제공되는 사이버 위협 정 보는 데이터셋 패키지를 포함하는; 컴퓨터 명령어들을 실행하는 사이버 위협 정보 처리 프로그램을 저장하는 컴 퓨터로 판독 가능한 저장 매체를 제공한다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "이하에서 개시하는 실시예에 따르면 머신 러닝으로 학습된 데이터와 정확하게 일치하지 않는 악성 코드라도 탐 지하고 대응할 수 있고 악성 코드의 변종에 대응할 수 있다. 실시예에 따르면 악성 코드의 변종이라도 매우 빠른 시간 내에 악성 코드, 공격 기법 및 공격자를 식별할 수 있 고 나아가 추후의 특정 공격자의 공격 기법을 예측할 수 있다. 실시예에 따르면 이러한 악성 코드 여부, 공격 기법, 공격 식별자 및 공격자를 기반으로 사이버 공격 구현 방식 을 정확히 식별하고 이를 표준화된 모델로 제공할 수 있다. 실시예에 따르면 악성코드 탐지 명 등이 통일되지 않거나 사이버 공격 기법이 정확하게 기술되지 못하는 악성 코드의 정보를 정규화되고 표준화된 방식으로 제공 할 수 있다. 또한 기존에 알려지지 않은 악성 코드를 생성 가능성과 이를 개발할 수 있는 공격자들을 예측하고 미래에 어떤 사이버 위협 공격이 있을지 예측 가능한 수단을 제공할 수 있다. 실시예에 따르면, 실행된 파일의 수행 결과는 동일하더라도 수행 과정에 차이에 따라 발생하는 다른 공격 기법 이거나 또는 다른 공격 그룹을 더욱 명확하게 탐지하고 인지할 수 있다. 실시예에 따르면, 실행 파일이 아닌 비실행 파일인 경우라도 이에 포함된 여러 가지 파일 타입들에 대한 사이버 위협 정보, 공격 기법 및 공격 그룹을 식별할 수 있다. 실시예에 따르면, 웹페이지(web page)를 모니터링하고 악성 행위나 정보를 포함하는 웹페이지를 식별할 수 있고 나아가 웹페이지에 포함된 사이버 위협 정보, 공격 기법 및 공격 그룹을 식별할 수 있다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 첨부한 도면을 참조하여 실시 예를 예시하여 상세히 기술하도록 한다. 실시 예에서 프레임워크, 모 듈, 응용 프로그램 인터페이스 등은 물리 장치 결합된 장치로 구현할 수도 있고 소프트웨어로 구현할 수도 있다. 실시 예가 소프트웨어로 구현될 경우 저장매체에 저장되고 컴퓨터 등에 설치되어 프로세서에 의해 실행될 수 있 다. 사이버 위협 정보 처리 장치 및 사이버 위협 정보 처리 방법의 실시 예들을 상세히 개시하면 다음과 같다. 도 1은 사이버 위협 정보 처리 방법의 일 실시 예를 예시한 도면이다. 사이버 위협 정보 처리 방법의 일 실시 예를 설명하면 다음과 같다. 사이버 위협 정보 처리 장치로 입력된 파일의 전처리를 수행한다(S1000). 파일의 전처리를 통해 파일을 식별할 수 있는 식별 정보를 얻을 수 있다. 파일의 전처리 수행의 일 예는 다음과 같다. 수신한 파일로부터 파일의 출처 정보, 파일을 얻은 수집 정보, 파일의 사용자 정보 등을 포함한 여러 가지 메타 정보를 얻을 수 있다. 예를 들어 파일이 URL (uniform resource locator)을 포함하거나 또는 전자메일에 포함된 경우 파일에 대한 수집 정보를 얻을 수 있다. 사용자 정보는 파일의 생성, 업로드 또는 최종 저장한 사용자 정 보 등을 포함할 수 있다. 전처리 과정에서 파일의 메타 정보로서 IP(internet protocol) 정보, 이에 기반한 국 가 정보, API(Application Programming Interface) key 정보, 예를 들면 분석을 의뢰한 사용자의 API 정보 등 을 얻을 수 있다. 전처리 과정에서 파일의 해쉬(Hash) 값을 추출할 수도 있다. 해쉬 값이 이미 사이버 위협 정보 처리 장치에 알 려진 것이라면 이를 기반으로 파일의 종류나 위험 정도를 식별할 수 있다. 만약 이미 알려진 파일이 아니라면 기 저장된 정보 또는 필요한 경우 외부의 레퍼런스 웹 사이트(reference website)에 해쉬 값과 파일 정보를 조회하여 파일 종류 식별을 위한 분석 정보를 얻을 수 있다. 예를 들어 외부 의 레퍼런스 웹 사이트로서 한국인터넷진흥원에서 운영하는 C-TAS(Cyber Threats Analysis System), CTA(Cyber Threat Alliance)의 운영시스템, VitusTotal 등의 사이트로부터 파일 종류에 따른 정보를 얻을 수 있다. 예를 들면, 파일의 MD5 (Message-Digest algorithm 5), SHA1 (Secure Hash Algorithm 1), SHA 256 등의 해쉬 함수의 해쉬 값을 이용하여 해당 사이트에서 파일을 검색할 수 있다. 그리고 검색 결과를 이용해 상기 파일을 식별할 수 있다. 파일을 분석을 수행하는 일 예로서, 입력된 파일이 모바일 네트워크를 통해 전송될 경우 네트워크 트래픽을 통 해 전송되는 패킷은 네트워크 전송 패킷의 재조합 기술 등을 사용하여 입력된 파일이 모바일 악성 의심 코드인 경우 이를 저장할 수 있다. 패킷의 재조합 기술은 수집된 네트워크 트래픽에서 하나의 실행 코드에 해당하는 일 련의 패킷들을 재 조합하며, 재 조합된 패킷들에 의해 전송되는 파일이 모바일 악성 의심 코드인 경우 이 파일 이 저장된다. 만약 이 단계에서 전송 파일 내에 모바일 악성 의심 코드 추출이 되지 않은 경우 파일 내에 다운로드 URL에 직 접 접속하여 모바일 악성 의심 코드를 다운로드하여 저장할 수도 있다. 상기 입력된 파일과 관련된 악성 행위(malicious activity) 분석 정보를 생성한다(S2000). 입력된 파일과 관련된 악성 행위의 분석 정보는 파일 자체에 대한 정보를 분석하는 정적 분석 정보나 입력된 파 일로부터 얻은 정보를 실행하여 악성 행위 여부를 판별할 수 있는 동적 분석 정보를 포함할 수 있다. 이 단계의 분석 정보는 입력된 파일과 관련된 실행 파일로부터 가공된 정보를 이용하거나 파일과 관련된 메모리 분석을 수행하는 심층 분석 정보를 포함할 수 있다. 심층 분석은 악성 행위를 정확하게 식별할 수 있도록 인공 지능 분석을 포함할 수 있다. 이 단계의 분석 정보는 또한 파일과 관련하여 이미 저장된 분석 정보나 또는 생성된 분석 정보를 서로 연관시켜 공격 행위나 공격자에 대한 연관 관계를 추정할 수 있는 연관관계 분석 정보를 포함할 수 있다. 이 단계에서 다수의 분석 정보는 전체 분석 결과로 제공되기 위해 취합될 수 있다. 예를 들어 하나의 파일에 대한 정적 분석 정보, 동적 분석 정보, 심층 분석 정보, 연관관계 분석 정보 등은 정 확한 공격 기법과 공격자 식별을 위해 통합 분석될 수 있다. 통합 분석은 분석 정보 사이의 중복된 부분을 제거 하고 분석 정보 간 공통의 정보는 정확도를 높이는데 사용될 수 있다. 예를 들어 여러 분석과 경로를 통해 수집된 사이버 위협 침해 정보(indicator of compromise, IoC)들은 정보들 사이에 노멀라이징(normalizing)하거나 인리치먼트(enrichment) 수행을 통해 표준화 작업을 수행할 수 있다. 분석 정보의 획득하는 실시 예에서 반드시 위의 기술된 모든 분석 정보를 순서에 따라 산출할 필요는 없다. 예 를 들어 정적 분석 정보 획득과 동적 분석 정보 획득은 어느 하나만 진행될 수도 있으며 정적 분석 정보 보다 동적 분석 정보를 먼저 수행할 수도 있다. 심층 분석 정보는 반드시 정적 분석 또는 동적 분석을 수행한 후 진행될 필요가 없으며, 연관 관계 분석도 심층 분석 정보 없이 수행될 수도 있다. 따라서 위 분석 정보를 획득하는 처리 순서는 변경될 수도 있으며 선택적으로 이루어질 수도 있다. 또한 위에 기술한 분석 정보의 획득 과정과 예측 정보의 생성 과정은 파일로부터 획득한 정보에 기초하여 병렬적으로 수행 될 수 있다. 예를 들면 동적 분석이 수행이 완료되지 않더라도 연관관계 분석 정보를 생성할 수도 있다. 마찬가 지로 동적 분석 수행이나 심층 분석 수행이 동시에 진행될 수 있다. 이러한 경우 위에서 예시한 전처리 과정(S1000)은 파일의 정보를 얻거나 식별하기 위한 것이므로 정적 분석, 동 적 분석, 심층 분석 또는 연관 분석이 개별적이나 병렬적으로 수행될 경우 각 분석 단계에 일부로서 각각 수행 될 수 있다. 이 단계에 대한 상세한 실시 예는 아래에서 후술한다. 상기 입력된 파일과 관련된 악성 행위의 예측 정보를 생성할 수 있다(S3000). 분석 정확도를 높이기 위해 위의 분석된 여러 가지 정보의 데이터 세트를 이용하여 악성 행위의 발생 여부, 공 격 기법, 공격자 그룹 등에 대한 예측 정보를 생성할 수 있다. 예측 정보의 생성은 이미 분석된 데이터 세트에 대한 인공지능 분석을 통해 수행될 수 있다. 예측 정보의 생성 은 필수적인 단계가 아니며 인공지능 분석을 위해 적절하게 분석된 데이터 세트가 마련되어 조건이 만족될 경우 추후 악성 공격 행위에 대한 예측 정보를 생성할 수 있다. 실시 예는 여러 가지 분석 정보들을 기반으로 인공 지능 기반의 머신 러닝을 수행한다. 실시 예는 분석된 정보 에 대한 데이터 세트를 기반으로 예측 정보를 생성할 수 있다. 예를 들면 인공 지능으로 학습된 데이터를 바탕 으로 추가적인 분석 정보를 생성하고 다시 생성된 분석 정보는 다시 새로운 학습 데이터로서 인공 지능의 입력 데이터로 이용될 수 있다. 여기서 예측 정보는 악성 코드 제작자 정보, 악성 코드 공격 방법 정보, 악성 코드 공격 그룹 예측, 악성 코드 유사도 예측 정보, 및 악성 코드 확산도 예측 정보 등을 포함할 수 있다. 생성된 예측 정보는 악성 코드 자체의 위험도를 예측한 제 1 예측 정보와 악성 코드의 공격자, 공격 그룹, 유사 도, 확산도 등을 예측한 제 2 예측 정보 등을 포함할 수 있다. 이러한 제 1 예측 정보와 제 2 예측 정보를 포함하는 예측 분석 정보는 서버나 데이터 베이스에 저장될 수 있다. 이에 대한 상세한 실시 예는 이하에서 후술한다. 상기의 분석 정보 또는 예측 정보에 대한 후처리 후 상기 입력된 파일과 관련된 사이버 위협 정보를 제공한다 (S4000). 실시 예는 분석 정보 또는 예측 정보에 기초하여 악성 코드 종류 및 악성 코드의 위험도를 결정한다. 그리고 실 시 예는 악성 코드에 대한 프로파일링 정보를 생성한다. 따라서 파일 분석을 통해 파일에 대한 자체 분석을 수 행한 결과나 추가 및 예측 분석을 수행한 결과를 저장할 수 있다. 생성되는 프로파일링 정보는 악성 코드에 대 한 공격 기법이나 공격자에 대한 라벨링을 포함한다. 사이버 위협 정보는 위의 전처리가 수행된 정보, 생성되거나 식별된 분석 정보, 생성된 예측 정보 또는 이 정보 들의 취합 정보나 이 정보들을 기반으로 결정된 정보를 포함할 수 있다. 제공되는 사이버 위협 정보에는 입력된 파일과 관련하여 데이터 베이스에 저장된 분석 정보를 이용하거나 위에 서 분석되거나 예측된 정보가 포함될 수 있다. 실시 예에 따르면 사용자가 입력된 파일에 대한 악성 행위뿐만 아니라 이미 저장된 파일이나 악성 행위에 대해 사이버 위협 정보를 조회할 경우 이에 대한 정보를 제공할 수 있다. 이러한 통합 분석 정보는 해당 파일에 대응하여 서버나 데이터 베이스에 표준화된 포맷으로 저장될 수 있다. 이 러한 통합 분석 정보는 표준화된 포맷으로 저장되어 사이버 위협 정보를 검색 또는 조회에 사용될 수 있다. 사용자의 사이버 위협 정보의 조회에 대항 추가적인 예시는 이하에서 상세히 후술한다. 또한 본 발명의 실시 예에 따라 실시간의 사이버 위협 정보를 제공하는 다양한 사용자 제공 인터페이스의 예를 이하에서 개시한다. 도 2는 사이버 위협 정보 처리 장치의 일 실시 예를 개시한 도면이다. 이 도면의 실시 예는 사이버 위협 정보 처리 장치를 개념적으로 예시하는데 이 도면을 참조하여 사이버 위협 정보 처리 장치의 실시 예를 설명하면 다 음과 같다. 개시하는 사이버 위협 정보 처리 장치는 물리장치인 데이터베이스 및 서버 및 데이터베이스 와 상기 물리장치 상에서 구동되는 응용 프로그래밍 인터페이스 Application Programming Interface, API) 포함하는 플랫폼 을 포함한다. 이하에서 플랫폼은 사이버 위협 인텔리전스 플랫폼(cyber threat intelligence platform; CTIP) 또는 간략하게 인텔리전스 플랫폼으로 호칭한다. 서버는 중앙연산장치(central processing unit, CPU) 나 프로세서와 같은 연산장치를 포함하고 데이터베 이스에 데이터를 저장하거나 읽을 수 있다. 서버는 입력되는 보안 관련 데이터를 연산 및 처리하며 파일을 실행하여 여러 가지 보안 이벤트를 발생시 키고 관련된 데이터를 처리하도록 한다. 그리고 서버는 여러 가지 사이버 보안 관련 데이터의 입출력을 제어하고 인텔리전스 플랫폼에서 처리된 데이터를 데이터베이스에 저장할 수 있다. 서버는 데이터 입력을 위한 네트워크 장치나 네트워크의 보안 장치를 포함할 수 있다. 서버의 중앙 처리장치, 프로세서 또는 연산장치는 이하의 도면에서 예시하는 프레임워크나 해당 프레임 워크 내의 모듈을 수 행할 수 있다. 실시 예에 따른 인텔리전스 플랫폼은 사이버 위협 정보의 처리를 위한 응용 프로그래밍 인터페이스(AP I)를 제공한다. 예를 들어 인텔리전스 플랫폼은, 네트워크와 연결된 네트워크 보안 장치나 악성 행위를 스캔 및 감지하는 사이버 악성 행위 방지 프로그래밍 소프트웨어로부터 파일이나 데이터를 입력받을 수 있다. 예를 들어 실시 예에 따른 인텔리전스 플랫폼은 보안 이벤트를 제공하는 SIEM (Security Information and Event Management) API, 실행 환경에 대한 데이터를 제공하는 EDR (Environmental Data Retrieval) API, 네트워크 트래픽을 정의된 보안 정책에 따라 모니터하고 제어하는 파이어월(firewall) API 등의 기능을 제공할 수 있다. 또한 인텔리전스 플랫폼은 내부와 외부 네트워크 사이에 방화벽과 유사한 역할을 수행하는 IPS (Intrusion Prevention Systems )의 API의 역할도 제공할 수 있다. 실시 예에 따른 인텔리전스 플랫폼의 응용 프로그래밍 인터페이스(API)는 사이버 보안의 공격 행 위를 수행하는 악성 코드를 포함하는 파일들을 여러 클라이언트 기기들 (1010, 1020, 1030) 로부터 수신할 수 있다. 실시 예에 따른 인텔리전스 플랫폼은 전처리부(미도시), 분석 프레임 워크와 예측 프레임 워크 및 AI 엔진 및 후처리부(미도시)을 포함할 수 있다. 인텔리전스 플랫폼의 전처리부는 클라이언트 기기들(1010, 1020, 1030)로부터 수신된 여러 가지 파일들 에 대한 사이버 위협 정보를 분석할 수 있도록 전처리를 수행한다. 예를 들면 전처리부는 수신된 파일을 처리하여 그 파일로부터 파일의 출처 정보, 파일을 얻은 수집 정보, 파일 의 사용자 정보 등을 포함한 여러 가지 메타 정보를 얻을 수 있다. 예를 들어 파일이 URL (uniform resource locator)을 포함하거나 또는 전자메일에 포함된 경우 파일에 대한 수집 정보를 얻을 수 있다. 사용자 정보는 파 일의 생성, 업로드 또는 최종 저장한 사용자 정보 등을 포함할 수 있다. 전처리 과정에서 파일의 메타 정보로서 IP(internet protocol) 정보, 이에 기반한 국가 정보, API(Application Programming Interface) key 정보 등을 얻을 수 있다. 인텔리전스 플랫폼의 전처리부(미도시)는 입력된 파일의 해쉬(Hash) 값을 추출할 수 있다. 해쉬 값이 이 미 사이버 위협 정보 처리 장치에 알려진 것이라면 이를 기반으로 파일의 종류를 식별할 수 있다. 만약 이미 알려진 파일이 아니라면 운영하는 C-TAS(Cyber Threats Analysis System), CTA(Cyber Threat Alliance)의 운영시스템, VitusTotal 등의 사이버 위협 정보의 레퍼런스 인터넷 사이트에 해쉬 값과 파일 정보 를 조회하여 파일 종류 식별을 위한 분석 정보를 얻을 수 있다. 설명한 바와 같이 입력된 파일의 해쉬 값은 MD5 (Message-Digest algorithm 5), SHA1 (Secure Hash Algorithm 1), SHA 256 등의 해쉬 함수의 해쉬 값이 될 수 있다. 프레임 워크는 입력된 파일로부터 악성 코드에 대한 분석 정보를 생성할 수 있다. 프레임 워크는 정적 분석, 동적 분석, 심층 분석, 연관관계 분석 등 사이버 위협 정보를 여러 가지 방식으로 분석할 수 있는 N 개(N은 자연수) 모듈들(1211, 1213, 1215, …., 1219)을 예시적으로 도면에 표시하였다.. 여기서는 이러한 여러 가지 모듈은 입력된 파일에 포함된 사이버 위협 정보에 대한 분석 및 예측을 수행한다. 프레임 워크에 포함되는 모듈들 중 정적 분석 모듈은 입력된 파일과 관련된 악성 행위의 분석 정보는 파 일 자체에 대한 악성 코드 관련 정보를 분석할 수 있다. 동적분석 모듈은 입력된 파일로부터 얻은 여러 가지 정보들을 기반으로 여러 행위를 수행함으로써 악성 코드 관 련 정보를 분석할 수 있다. 심층분석 모듈은 입력된 파일과 관련된 실행 가능한 파일을 가공한 정보를 이용하거나 실행 가능한 파일과 관련 된 메모리 분석을 수행하여 악성 코드 관련 정보를 분석할 수 있다. 심층분석 모듈은 악성 행위를 정확하게 식 별할 수 있도록 인공 지능 분석을 포함할 수 있다. 연관관계분석 모듈은 입력된 파일과 관련하여 이미 저장된 분석 정보들이나 또는 생성된 분석 정보들을 서로 연 관시켜 공격 행위나 공격자에 대한 연관 관계를 추정할 수 있는 연관관계 분석 정보를 포함할 수 있다. 프레임 워크는 정적 분석 모듈, 동적분석 모듈, 심층분석 모듈 및 연관관계분석 모듈로부터 분석된 정보 들을 악성 코드의 특성과 행위에 대한 분석 결과들을 서로 결합하고, 결합된 최종 정보를 사용자에게 제공할 수 있다. 예를 들어 프레임 워크는 하나의 파일에 대한 정적 분석 정보, 동적 분석 정보, 심층 분석 정보, 연관관 계 분석 정보 등은 정확한 공격 기법과 공격자 식별을 위해 통합 분석할 수 있다. 프레임 워크는 분석 정 보들 사이에 중복된 부분을 제거하고 분석 정보들 사이에 공통의 정보는 정확도를 높이는데 사용한다. 프레임 워크는 제공하는 정보를 표준화할 수 있는데, 예를 들면 여러 분석과 경로를 통해 수집된 사이버 위협 침해 정보(indicator of compromise, IoC)들을 노멀라이징(normalizing)하거나 인리치먼트(enrichment) 작업한다. 그리고 최종 표준화된 악성 코드 또는 악성 행위에 대한 분석 정보를 생성할 수 있다. 프레임 워크의 정적 분석 모듈, 동적분석 모듈, 심층분석 모듈 및 연관관계분석 모듈은 분석되는 데이터 의 정확성을 높이기 위해 분석 대상 데이터에 인공지능 분석에 따른 머신 러닝이나 딥 러닝 기법을 수행할 수 있다. AI 엔진은 분석 프레임 워크의 분석 정보 생성을 위해 인공지능 분석 알고리즘을 수행할 수 있다. 이러한 정보는 데이터 베이스에 저장될 수 있고 서버는 사용자나 클라이언트 요청에 따라 데이터 베이스에 저장된 악성 코드 또는 악성 행위에 대한 분석 정보를 사이버 위협 인텔리전스 정보로 제공할 수 있다. 한편, 프레임 워크는 분석 정확도를 높이기 위해 위의 분석된 여러 가지 정보의 데이터 세트를 이용하여 악성 행위의 발생 여부, 공격 기법, 공격자 그룹 등에 대한 예측 정보를 생성할 수 있다. 프레임 워크는 여러 분석 모듈들이 분석한 분석 정보에 대한 데이터 세트를 기반으로 AI 엔진을 이용하여 인공지능 분석 알고리즘을 수행하여 입력된 파일과 관련된 악성 행위에 대한 예측 정보를 생성할 수 있다. AI 엔진은 분석 정보에 대한 데이터 세트에 대해 인공 지능 기반의 머신 러닝으로 학습하여 추가적인 분 석 정보를 생성하고, 추가 생성된 분석 정보는 다시 새로운 학습 데이터로서 인공 지능의 입력 데이터로 이용될 수 있다. 프레임 워크는 가 생성하는 예측 정보는 악성 코드 제작자 정보, 악성 코드 공격 방법 정보, 악성 코드 공격 그룹 예측, 악성 코드 유사도 예측 정보, 및 악성 코드 확산도 예측 정보 등을 포함할 수 있다. 위와 같이 여러 가지 악성 코드나 공격 행위 등에 관련된 예측 정보를 생성한 프레임 워크는 생성한 예 측 정보들을 데이터베이스에 저장할 수 있다. 그리고 사용자의 요청에 따라 또는 공격 징후에 따라 생성한 예측정보를 사용자에게 제공할 수 있다. 서버는 설명한 바와 같이 데이터 베이스에 저장된 분석 정보 또는 예측 정보에 대한 후처리 후 상 기 입력된 파일과 관련된 사이버 위협 정보를 제공할 수 있다. 서버의 프로세서는 생성된 분석 정보 또는 예측 정보에 기초하여 악성 코드 종류 및 악성 코드의 위험도 를 결정하는 작업을 수행한다. 서버의 프로세서는 악성 코드에 대한 프로파일링 정보를 생성할 수 있다. 데이터베이스는 파일 분 석을 통해 파일에 대한 자체 분석을 수행한 결과나 추가 및 예측 분석을 수행한 결과를 저장할 수 있다. 서버에 의해 사용자에게 제공되는 사이버 위협 정보는, 기술된 전처리가 수행된 정보, 생성되거나 식별된 분석 정보, 생성된 예측 정보 또는 이 정보들의 취합 정보나 이 정보들을 기반으로 결정된 정보를 포함할 수 있 다. 제공되는 사이버 위협 정보에는 입력된 파일과 관련하여 데이터 베이스에 저장된 분석 정보를 이용하거나 위에 서 분석되거나 예측된 정보가 포함될 수 있다. 실시 예에 따르면 사용자가 입력된 파일에 대한 악성 행위뿐만 아니라 이미 저장된 파일이나 악성 행위에 대해 사이버 위협 정보를 조회할 경우 이에 대한 정보를 제공할 수 있다. 이러한 통합 분석 정보는 해당 파일에 대응하여 서버나 데이터 베이스에 표준화된 포맷으로 저장될 수 있다. 이 러한 통합 분석 정보는 표준화된 포맷으로 저장되어 사이버 위협 정보를 검색 또는 조회하는데 사용될 수 있다. 실시 예는 입력된 파일을 분석하고 분석된 파일로부터 공격 행위를 식별할 수 있다. 실시 예는 파일의 악성 코 드와 사이버 보안 전문가 집단들이 공통적으로 인정하는 공격 행위 세부 요소들을 매칭하도록 하여 그 파일 내 의 공격행위를 식별할 수 있다. 그리고 실시 예는 파일 내에 포함된 사이버 위협 정보와 공격행위(TTP) 별 매칭 관계를 저장한 데이터베이스에 기반하여 공격행위(TTP)를 식별하도록 할 수 있다. 이러한 보안 전문가 집단의 공격 행위를 저장한 데이터 베이스의 일 예로서 MITRE ATT&CK 등의 정보를 저장한 데이터베이스를 예로 들 수 있다. MITRE ATT&CK은 실제 보안 공격 기법이나 행위에 대한 데이터 베이스의 하나 로서, 특정 보안 공격 기법이나 행위들을 매트릭스 형식의 구성 요소들로 표시함으로써, 공격 기법과 행위들을 일정한 데이터 세트 형식으로 식별할 수 있도록 한다. MITRE ATT&CK는 해커 또는 악성 코드의 공격 기법에 대한 내용을 공격의 단계 별로 분류하여 CVE 코드(Common Vulnerabilities and Exposures Code)의 매트릭스로 표현한다. 실시 예는 파일 내에 포함된 사이버 위협 정보를 분석하여 특정 공격 행위를 식별하되, 식별된 타입의 공격 행 위가 전문가 단체들이 인정하는 실제 수행되는 공격 코드들에 매칭되도록 함으로써 공격 행위 식별이 전문적이 면서 공통으로 인식되는 요소들로 표현되도록 할 수 있다. 이 예에서 서버와 인텔리전스 플랫폼은 실시 예를 설명하기 위한 편의상 다른 구성으로 설명하였 으나, 인텔리전스 플랫폼은 서버 내의 적어도 하나의 프로세서들에 의해 수행될 수 있다. 한편 사이버 위협 정보 처리의 실시 예들 다양한 타입의 고성능 컴퓨팅 서버들이나 분산 클라우드 서버들의 일 부에 하드웨어 또는 소프트웨어로 포함되어 그 서버들의 일부로 기능할 수 있다. 이러한 경우 사용자 클라이언트와 서버들의 통신뿐만 아니라, 개시하는 실시 예들에 따라 서버들의 통신 또는 서버와 소형 단말기, 차량 등의 기기 간 통신에서도 포함되는 데이터나 파일로부터 사이버 위협 정보를 처리하 고 정보를 제공할 수 있다. 아래 개시하는 실시 예들은 소형화된 컴퓨팅 장치나 소프트웨어로 구현이 가능하므로 특정한 위치에 한정되지 않으며 심지어 인공위성 등 우주의 비행체에 포함될 수도 있다. 예를 들어, 인공위성이나 우주 비행체가 수신하 는 데이터나 파일에 어떤 사이버 위협 정보가 있는지 아래 실시 예에 따라 처리하여 그 결과를 제공할 수 있다. 이하의 실시 예에서는 기기나 소프트웨어가 외부에서 수신되는 데이터, 파일, 정보를 수신하는 경우 그 수신된 데이터, 파일, 정보로부터 사이버 위협 정보를 처리하여 사용자에게 그 결과를 제공하는 예를 상세하게 개시한 다.도 3는 사이버 위협 정보 처리 장치의 일 실시 예를 개시한 도면이다. 여기서는 인텔리전스 플랫폼이 파일들을 수신 또는 수집하여 사이버 위협 정보를 분석하고 제공하는 예 를 개시한다. 인텔리전스 플랫폼은 특정 사용자의 클라이언트로부터 실행파일을 입력받을 수 있다. 여기서 실행 파일로서, EXE나 ELF(Executable and Linkable Format), PE(Portable Executable), APK(Android Application Package) 등을 예시하였다. 인텔리전스 플랫폼은 특정 사용자의 클라이언트로부터 비실행파일을 입력받을 수도 있다. 여기서 비 실행 파일이란 직접 실행되는 실행파일을 제외한 문서파일, 스크립트파일, 이메일 등으로서 악성 코드나 실 행파일들을 포함할 수 있는 임베딩 파일들을 총칭한다. 한편, 인텔리전스 플랫폼을 운영하는 서버는 자체적으로 인터넷 연결을 통해 외부의 웹사이트 등 의 여러 가지 실행파일이나 비실행파일들을 직접 수집할 수도 있다. 인텔리전스 플랫폼 또는, 인텔리전스 플랫폼을 운영하는 서버는 사용자로부터 수신하거나 직접 수집한 파일들로부터 사이버 위협 정보를 분석하고 여러 사용자가 사이버 상의 공격들을 효율적으로 인지 할 수 있도록 여러 가지 정보를 제공할 수 있다. 이하에서는 인텔리전스 플랫폼 또는 서버 등의 사이버 위협 정보 처리 장치의 실시 예가 실행파일 을 분석하는 예들, 비실행파일을 분석하는 예들, 이를 기반으로 사용자에게 사이버 위협 정보를 제공하는 실시 예들을 순차적으로 개시한다. 이하에서는 인텔리전스 플랫폼 또는 서버 등의 사이버 위협 정보 처리 장치의 실시 예가 실행파일 을 분석하는 예를 개시한다. 도 4는 개시하는 실시 예에 따라 실행파일의 정적 분석을 수행하는 일 예를 나타낸다. 도면을 참조하여 실시 예 에 따른 정적 분석 방법의 일 예를 설명하며 다음과 같다. 설명한 바와 같이 정적 분석을 수행하기 이전에 전처리 단계나 정적 분석의 초기 단계에서 파일의 종류를 식별 수 있다. 이 도면은 파일의 종류로서 편의상 ELF, EXE, ARK 파일이 식별된 경우를 예시하지만 실시예의 적용은 이에 국한되지 않는다. 악성코드의 정적 분석 또는 탐지는 위와 같은 파일 자체가 가지고 있는 성격과 기존에 확인된 패턴 데이터베이 스와 비교 하는 과정을 기반으로 동작할 수 있다. 정적 정보 추출기는 입력된 파일의 구조를 파싱하여 구조 정보를 얻을 수 있다. 파싱된 파일의 구조 상 패턴(pattern)은 데이터베이스(DB)에 이미 저장된 악성 코드의 패턴과 비교될 수 있다. 파싱된 파일의 구조 특징과 패턴은 상기 파싱된 파일의 메타 정보가 될 수 있다. 위에 개시된 예에서는 표시하지 않았으나 개시하는 실시예의 정적 분석에서도 머신 러닝 엔진이 사용될 수 있다. 데이터베이스는 이미 저장된 악성 코드의 학습된 특징들을 포함하는 데이터 세트를 저장할 수 있다. AI 엔진은 위와 같이 파상된 파일로부터 얻은 메타 정보를 머신 러닝을 통해 학습하고, 데이터베이스에 이미 저장된 데이터 세트를 비교하여 악성코드 여부를 판단할 수 있다. 정적 분석을 통해 악성 코드로 분석된 파일은 파일의 구조적 특징은 악성 코드와 관련된 데이터 세트로 다시 저 장될 수 있다. 도 5는 개시하는 실시 예에 따라 실행파일의 동적 분석을 수행하는 일 예를 나타낸다. 도면을 참조하여 실시 예 에 따른 동적 분석 방법의 일 예를 설명하며 다음과 같다. 설명한 바와 같이 동적 분석을 수행하기 이전에 전처리 단계나 동적 분석의 초기 단계에서 파일의 종류를 식별 수 있다. 마찬가지로 이 예시에서 파일의 종류로서 편의상 ELF, EXE, ARK 파일이 식별된 경우를 예시한다. 전처리를 통해 동적 분석 대상이 되는 파일 종류를 식별할 수 있다. 식별된 파일은 각 파일의 종류와 타입에 따 라 가상 환경에서 실행될 수 있다. 예를 들어 식별된 파일이 ELF 파일인 경우 대기 큐(Que)를 거쳐 리눅스 가상 환경(Virtual Machine, VM)의 운영 체제에서 실행될 수 있다. ELF 파일이 실행될 경우 발생하는 이벤트는 행위 로그(log)에 기록될 수 있다. 이와 같이 각각의 식별 파일의 종류 별로 윈도우, 리눅스, 모바일 운영체제 시스템을 가상으로 구축한 후 가상 시스템의 실행 이벤트를 기록한다. 그리고 데이터베이스에 이미 저장된 악성 코드의 실행 이벤트들과 기록한 실행 이벤트들을 비교할 수 있 다. 위에서 예시하지 않았으나 동적 분석의 경우에도 머신 러닝을 통해 기록한 실행 이벤트들을 학습하고, 학습 된 데이터가 이미 저장된 악성 코드의 실행 이벤트들과 유사한지 판단할 수 있다. 동적 분석의 경우 파일에 따라 가상 환경을 구축해야 하고 이에 따라 분석 및 탐지 시스템의 규모가 커질 수 있 다. 도 6은 심층 분석의 일 예로서 악성 코드를 디스어셈블링하여 악성 행위가 포함된 파일임을 판단하는 예를 개시 한다. 기술한 바와 같이 실행 가능한 파일을 디스어셈블링을 수행하면 어셈블리 언어 형식의 코드의 형식인 OP-CODE 와 ASM-CODE를 얻을 수 있다. 예를 들어 EXE 실행 파일 내에 특정 함수 A는 디스어셈블러(disassembler)를 거치면 OP-CODE를 포함하는 디스어 셈블링된 코드 또는 디스어셈블드 코드(disassembled cocde)로 변환될 수 있다. 만약 EXE 실행 파일이 악성 행위를 유발하는 악성 코드인 경우, 이러한 행위를 유발하는 함수나 코드 부분을 디 스어셈블링하면 악성 행위를 유발하는 디스어셈블드 코드 세트를 얻을 수 있다. 디스어셈블드 코드 세트는 상기 악성 행위 또는 악성 코드에 대응되는 OP-CODE 세트 또는 OP-CODE 와 ASM- CODE가 조합된 세트를 포함할 수 있다. 악성 행위가 동일하더라도 이를 수행하도록 하는 악성 코드의 알고리즘이나 실행 파일의 디스어셈블링 결과가 정확하게 같지 않기 때문에 인공 지능 기반의 유사도 분석을 통해 입력된 악성 코드가 특정 디스어셈블드 코드 세트와 대응되는지를 식별할 수 있다. 이렇게 특정 디스어셈블드 코드 세트와 대응되는 악성 행위를, MITRE ATT&CK와 같은 전문적이고 공용의 공격 방 식 또는 공격 기법에 대응시켜 공격 기법 (TTP)를 식별하는데 사용할 수 있다. 또는 특정 디스어셈블드 코드 내 OP-CODE 세트 또는 OP-CODE 와 ASM-CODE가 조합된 세트를 MITRE ATT&CK에서 정의한 공격 기법 요소들과 대응시켜 공격 기법을 판단하는데 사용할 수 있다. 이 도면은 실행 파일, 해당 실행 파일의 디스어셈블드 코드 세트와 MITRE ATT&CK에서 공격 기법 요소들에 대응 되는 공격 기법을 대응한 예를 나타낸다. 도 7은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하는 흐름을 예시한 도면이다. 이 도면에서 식별된 파일이 ELF, EXE, ARK 의 실행 가능한 바이너리 파일인 경우를 예로 하여 설명한다. 이 단 계의 처리 과정은 위에서 개시한 심층 분석과 관련된다. 먼저 제 1 단계로서 OP-CODE 코드를 포함하는 디스어셈블드 코드를 추출하는 과정의 일 상세한 예를 설명하면 다음과 같다. 소스 코드를 컴파일(complie)하면 실행 파일이 생성된다. 원시 소스 코드는 실행 가능한 각 운영체제(OS) 환경에서 컴파일러에 의해 기계의 처리에 적합한 형태의 새로운 데이터로 생성된다. 새롭게 구성된 바이너리 데이터는 사람이 읽기에는 적합하지 않은 형태로 되어 있어 실행 파일 형태로 만들어진 파일을 인간이 해석해서 그 내부 로직을 파악하는 것은 불가능하다. 그러나 보안 시스템의 취약점 분석과 다양한 목적을 위해서 그 역과정을 수행하여 기계어의 해석이나 분석을 수 행하는데 설명한 바와 같이 디스어셈블 과정이라고 한다. 디스어셈블 과정은 특정 운영체제의 중앙처리장치 (CPU)와 처리 비트 수(32비트, 64비트 등) 에 맞춰서 수행될 수 있다. 예시한 ELF, EXE, ARK 의 실행 파일을 각각 디스어셈블을 수행하면 디스어셈블된 어셈블리 코드를 획득할 수 있 다. 디스어셈블된 코드는 OP-CODE 와 ASM-CODE가 조합된 코드를 포함할 수 있다. 실시 예는 디스어셈블 도구를 기반으로 실행 파일을 분석하여 실행 파일로부터 OP-CODE 와 ASM-CODE을 추출할 수 있다. 개시하는 실시 예는 추출된 OP-CODE 와 ASM-CODE을 그대로 이용하지 않고 각 함수 별로 재구성하여 OP-CODE 배 열을 다시 구성한다. OP-CODE 배열을 재정리할 경우 원본 바이너리 데이터도 함께 포함하여 데이터의 해석을 충 분히 수행할 수 있도록 데이터를 재구성할 수 있다. 이러한 재배열를 통해 OP-CODE 와 ASM-CODE의 새로운 조합 은 공격 기법뿐만 아니라 공격자를 식별할 수 있는 기초 데이터를 제공한다. 제 2 단계로 어셈블리 데이터를 처리하는 과정(ASM)을 상세히 설명하면 다음과 같다. 어셈블리 데이터 처리 과정은 OP-CODE와 필요한 ASM-CODE 만을 분리한 후 인간 또는 컴퓨터가 읽기 좋은 형태로 재구성된 데이터를 기반으로 유사도를 분석하고 정보를 추출하는 과정이다. 이 단계에서 디스어셈블된 어셈블리 데이터는 일정한 데이터 형식으로 변환될 수 있다. 이러한 데이터 형식의 변환은 데이터 처리 속도를 높이고 데이터의 정확한 분석을 위해 아래 기술된 변환 방식 들은 모두 적용될 필요없이 선택적으로 적용될 수 있다. 재배열된 OP-CODE 와 ASM-CODE의 조합의 어셈블리 데이터로부터 여러 가지 함수를 추출할 수 있다. 하나의 실행 파일을 디스어셈블하면 프로그램 크기에 따라 다르지만 평균적으로 약, 7,000~12,000개 정도 되는 함수를 포함할 수 있다. 이 함수들은 프로그래머가 필요에 따라 구현한 함수도 있으며 운영체제에서 기본적으로 제공하는 함수들도 있다. 실제 ASM-CODE를 분석하면 약 87%~91% 정도의 함수가 운영체제에서 기본적으로 제공하는 함수(OS supported)이 고 프로그래머가 프로그램 로직을 위해서 실제 구현한 ASM-CODE는 약 10% 정도이다. 운영체제에서 제공한 함수 는 함수 명과 함께 운영체제 설치 시에 기본적으로 설치되는 각종 DLL, SO 파일 등에 포함되는 함수들(Default function)이다. 이러한 운영체제 제공 함수들은 이미 분석하여 저장하여 분석 대상 데이터로부터 필터링할 수 있다. 이렇게 분석해야 할 코드만 분리하면 이후 처리 속도와 성능을 높일 수 있다. 실시 예는 프로그램의 기능적 분석을 정확하게 수행하기 위해서 OP-CODE를 함수 단위로 분리해서 처리할 수 있 다. 실시 예는 모든 의미적 분석의 최소 단위를 어셈블리 코드에 포함된 함수를 기반하여 수행할 수 있다. 분석 성능과 처리 속도를 높이기 위해 실시 예는 의미가 정확하지 않은 연산자 수준의 함수들은 필터링하고 정 보량이 임계 치 보다 작은 함수들 도 분석 대상에서 제거할 수 있다. 함수들의 필터링의 여부와 정도는 실시 예 에 따라 다르게 설정할 수 있다. 실시 예는 함수에 따라 정리된 OP-CODE 로부터 디스어셈블러가 출력 시 제공하는 주석 데이터를 제거할 수 있다. 그리고 실시 예는 디스어셈블된 코드를 재배열할 수 있다. 예를 들면, 디스어셈블러가 출력하는 디스어셈블된 코드는 [ASM-CODE, OP-CODE, 파라미터]의 순서를 가질 수 있 다. 실시 예는 어셈블리 데이터로부터 파라미터 데이터를 제거하고 위 순서의 디스어셈블된 코드를 [OP-CODE, ASM- CODE] 순서로 재정리 또는 재구성할 수 있다. 이렇게 재정된 디스어셈블된 코드는 정규화 또는 벡터화하여 처리 하기 용이하다. 그리고 처리 속도를 현격하게 높일 수 있다. 특히 [OP-CODE, ASM-CODE] 의 조합을 가지는 디스어셈블된 코드 중 ASM-CODE 부분은 데이터의 길이가 달라 서로 비교하기 용이하지 않다. 따라서 해당 어셈블리 데이터의 고유성을 확인하기 위해서 데이터를 특정 크기의 데이 터 포맷으로 정규화시킬 수 있다. 예를 들면 실시 예는 [OP-CODE, ASM-CODE] 조합의 디스어셈블된 코드의 고유 성을 확인하기 위해서 데이터 부분을 정규화하기 용이한 특정 길이의 데이터 세트, 예를 들면 CRC(cyclic redundancy check) 데이터로 변환시킬 수 있다. 일 예로서 [OP-CODE, ASM-CODE] 조합의 디스어셈블된 코드에서 OP-CODE 부분은 제 1 길이의 CRC 데이터로, ASM-CODE 부분은 제 2 길이의 CRC 데이터로 각각 변환하는 것도 가능하다. OP-CODE와 ASM-CODE 변환된 정규화 데이터는 각각 해당 변환 이전의 각각 코드의 고유성을 유지할 수 있도록 한 다. 고유성을 가지고 변환된 정규화 데이터의 유사도 판단 속도를 빠르게 하기 위해 상기 정규화된 데이터를 벡 터화(Vectorization)를 수행할 수 있다. 설명한 바와 같이 데이터 변환 과정으로서 정규화 또는 벡터화 과정은 데이터 처리 속도를 높이고 데이터의 정 확한 분석을 선택적으로 적용될 수도 있다. 정규화 과정과 벡터화 과정의 상세한 예는 다시 아래에서 상세히 개시한다. 제 3단계로서 디스어셈블드 코드를 분석하는 데이터의 분석과정을 상세히 설명하면 다음과 같다. 이 과정에서도 데이터 처리 속도를 높이고 데이터의 정확한 분석을 위해 여러 가지 데이터 형식의 변환이 사용 될 수 있는데, 아래 개시하는 기술된 변환 방식들은 모두 적용할 필요없이 그 중 일부를 선택적으로 적용할 수 있다. 이러한 변환된 데이터에 기초하여 변환된 디스어셈블드 코드 내의 함수 별 데이터 세트를 기반으로 악성 코드와 유사도를 분석하는 단계이다. 실시 예는 코드 간 유사도를 수행하기 위해 벡터화된 OP-CODE 와 ASM-CODE의 데이터 세트들을 바이트 데이터로 다시 변환할 수 있다. 재변환된 바이트 데이터를 기반으로 블록 단위의 해쉬 값을 추출하고 블록 단위의 고유 값을 기반으로 전체 데 이터의 해쉬 값을 생성할 수 있다. 해쉬 값은 바이트 데이터의 부분인 블록 단위의 비교를 효율적으로 수행하기 위해서 각 블록 단위의 고유 값을 추출하도록 지정된 단위의 해쉬 값을 추출하여 비교할 수 있다. 이와 같이 지정된 단위의 해쉬 값을 추출하고 2개 이상의 데이터의 유사도를 비교하기 위해 퍼지 해쉬(Fuzzy Hashing) 기법이 사용될 수 있다. 예를 들면 실시 예는 퍼지 해쉬(Fuzzy Hashing) 중 CTPH(Context Triggered Piecewise Hashing) 방식을 사용하여 블록 단위로 추출된 해쉬 값과 기 저장된 악성 코드 중 일부 단위의 해쉬 값을 서로 비교하여 유사도를 판단할 수 있다. 정리하면 실시 예는 OP-CODE 및 ASM-CODE의 조합 코드가 특정 기능을 함수 단위로 구현한다는 사실에 기반하여, 각 특정 기능의 고유성을 확인하기 위해서 OP-CODE 와 ASM-CODE의 디스어셈블된 코드의 고유 값을 생성한다. 그 리고 이 고유 값을 기반으로 디스어셈블된 코드의 OP-CODE와 ASM-CODE중 블록 단위의 고유 값을 추출하여 유사 도 연산을 수행할 수 있다. 블록 단위의 해쉬 값을 추출 하는 상세한 예도 아래에서 도면을 참조하여 개시하도록 한다. 설명한 바와 같이 실시 예는 유사도 연산을 수행할 경우 블록 단위 해쉬 값을 이용할 수 있다. 추출된 블록 단위 해쉬 값은 String Data (Byte Data) 로 구성되어 있고 String Data (Byte Data)는 수치화 값 들로 코드 간의 유사도를 비교할 수 있다. 만약 수십억 개의 디스어셈블된 코드 데이터 세트의 바이트 비교를 수행하면 하나의 유사도 결과를 얻는데 엄청난 시간을 소비할 수 있다. 따라서 실시 예는 String Data (Byte Data)는 수치화 값으로 변환할 수 있는데 이러한 수치화 값에 기반하면 인 공지능 기술을 활용해 유사도 분석을 빠르게 수행할 수 있다. 실시 예는 추출된 블록 단위의 해쉬 값의 String Data (Byte Data) 를 N-gram 데이터 기반으로 벡터화시킬 수 있다. 이 도면의 실시 예는 연산 속도를 높이기 위해 블록 단위의 해쉬 값을 2-gram 데이터로 벡터화 수행하는 경우를 예시한다. 그런데 실시 예는 블록 단위의 해쉬 값을 반드시 2-gram 데이터로 변환할 필요는 없으며 3- gram, 4-gram,…N-gram의 데이터로 벡터화 변환하는 것도 가능하다. N-gram의 데이터에서 N이 증가할수록 데이터의 특성을 정확하게 반영할 수 있지만 데이터의 처리 시간의 속도가 증가한다. 기술한 바와 같이 데이터 처리 속도를 높이고 데이터의 정확한 분석을 위해 바이트 변환, 해쉬의 변환 및 아래 의 N-gram 변환은 선택적으로 적용할 수 있다. 예시한 2-gram 변환 데이터는 최대 65,536 차원을 가진다. 학습 데이터의 차원이 높아질수록, 데이터의 분포가 희박해(sparse)지며, 이에 따라 분류 성능에 악영향을 끼칠 수 있다. 그리고 학습 데이터의 차원이 높아지면 데 이터를 학습하기 위한 시간 복잡도와 공간 복잡도가 증가한다. 이러한 문제점을 해결하기 위해 실시 예는 다양한 텍스트 표현 기반의 여러 가지 자연어 처리 알고리즘으로 처 리할 수 있다. 이 실시 예에서는 이러한 알고리즘으로 TF-IDF(Term Frequency-Inversed Document Frequency) 기법을 예로 하여 설명한다. 이 단계의 학습 데이터의 유사도를 처리하기 위한 일 예로서, 고차원 데이터 중에서 공격 식별자 또는 클래스 (T-ID)를 판단할 경우 의미 있는 특징(패턴)을 선택하기 위해 TF-IDF(Term Frequency-Inversed Document Frequency) 기법을 사용할 수 있다. 일반적으로, TF-IDF 기법은 검색 엔진에서 유사도가 높은 문서를 찾기 위해 사용되는데 이를 계산하는 수학식들은 다음과 같다. [수학식 1]"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "여기서 는 특정 문서 에서 특정 단어 의 빈도율을 의미하고 그 단어가 반복적으로 나올수록 높은 값을 갖는다. [수학식 2]"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "는 특정 단어 를 포함하는 문서 의 비율의 역수 값으로, 단어가 여러 문서에서 흔하게 나타날수록 낮은 값을 갖는다. [수학식 3]"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "는 와 를 곱한 값으로, 어떤 단어가 어떤 문 서에 더 적합한지 수치화시킬 수 있다. TF-IDF 방식은 수학식 1에 의한 단어의 빈도와 수학식 2에 의한 역문서빈도 (문서의 빈도에 특정한 역수)를 이 용하여 수학식 3과 같이 문서 단어 행렬 내의 단어의 중요도에 따라 가중치를 반영하는 하는 방식이다. 실시 예에서 블록 단위의 코드 상의 단어의 특징 또는 패턴에 기반하여 해당 단어가 포함된 문서를 공격 식별자 (T-ID)라고 추론할 수 있다. 따라서, 블록 단위의 코드로부터 추출된 패턴에 대해서 TF-IDF를 계산하면, 특정 공격 식별자(T-ID) 내에서 빈번하게 나타나는 패턴을 추출하거나 또는 특정 공격 식별자(T-ID)와 관련 없는 패 턴을 가지는 코드를 제거할 수 있다. 예를 들어, 특정 패턴 A는 모든 공격 식별자(T-ID)들에서 발현되는 패턴이라고 했을 때, 특정 패턴 A에 대한 TF-IDF 값은 낮게 측정될 것이다. 그리고 이러한 패턴은 실제 공격 식별자(T-ID)를 구분하기 위해 불필요한 패 턴임을 판단할 수 있다. TF-IDF와 같은 자연어의 유사도 판단을 위한 알고리즘은 머신 러닝 알고리즘의 학습을 통해 수행될 수도 있다. 실시 예는 이러한 불필요한 패턴을 제거하여 불필요한 연산을 줄이고 추론 시간을 단축시킬 수 있다. 상세하게 실시 예는 변환되어 블록 단위 코드의 데이터에 대해, 여러 가지 자연어 처리의 텍스트 표현에 기초한 유사도 알고리즘을 수행할 수 있다. 유사도 알고리즘을 통해 공격 식별자와 관련이 없는 패턴의 코드는 제거하 여 아래 수행되는 알고리즘 수행과 머신 러닝에 따른 분류 과정의 수행을 크게 단축시킬 수 있다. 실시 예는 블록 단위의 코드 상의 특징 또는 패턴을 기반하여 공격 식별자의 패턴을 분류하기 위해 분류 모델링 을 수행할 수 있다. 실시 예는 벡터화된 블록 단위의 코드 특징 또는 패턴이 알려진 공격 식별자의 패턴인지를 학습하고, 이를 정확한 공격 기법이나 구현방식으로 분류할 수 있다. 실시 예는 악성 코드와 유사한 코드 패턴 이 있다고 판단된 코드에 대해 정확한 공격 구현 방식, 즉 공격 식별자와 공격자를 분류를 위해 여러 가지 앙상 블 머신 러닝 모델들을 이용한다. 앙상블 머신 러닝 모델들은 준비된 데이터를 여러 개의 분류 노드들을 생성하고 각 분류 노드의 대한 노드의 예 측을 결합하여 정확한 예측을 수행하는 기법이다. 위에서 설명한 바와 같이 블록 단위의 코드 상의 단어의 특징 또는 패턴이 어떤 공격 구현 방식인지, 즉 공격 식별자 또는 공격자인지 분류하는 앙상블 머신 러닝 모델들을 수행한다. 앙상블 머신 러닝 모델들을 적용 시에 과탐과 오탐을 방지하기 위해 준비된 데이터의 분류를 위한 임계 값을 설 정할 수 있다. 설정된 탐지 임계 값 이상의 데이터들만 분류하고 설정된 탐지 임계 값에 도달하지 못하는 데이 터는 분류 수행을 하지 않을 수 있다. 기술 바와 같이 데이터 처리 속도를 높이고 데이터의 정확한 분석을 위해 여러 가지 데이터 형식의 변환이 사용 될 수 있다. 위에서 기술한 데이터 변환 방식을 앙상블 머신 러닝 모델들에 적용한 구체적인 실시 예는 이하에 서 상세히 설명한다. 제 4단계로서 공격 기법(TTP)을 식별하여 라벨링을 부여하는 프로파일링 하는 과정을 설명하면 다음과 같다. 이미 분석된 공격 코드 또는 악성 코드에 기반하여 입력된 바이너리 데이터의 OP-CODE와 ASM-CODE를 포함하는 디스어셈블드 코드의 특징 추출을 통해 벡터화시키는 예를 위에서 기술하였다. 이렇게 벡터화된 데이터는 머신 러닝 모델링을 통해 학습된 후 특정 공격 기법으로 분류되고 분류된 코드들은 프로파일링 과정에서 상기 분류된 데이터의 라벨링이 수행된다. 라벨링은 크게 두 부분에 수행될 수 있는데 하나는 표준화된 모델에서 정의한 공격 식별자에 대한 고유 인덱스 를 붙이는 것이고 다른 하나는 공격 코드를 작성한 사용자에 대한 정보를 기입하는 것이다. 라벨링은 표준화된 모델, 예를 들면 MITRE ATT&CK에서 반영된 공격 식별자(T-ID)에 따라 부여하도록 하여 추가 적인 작업 없이 사용자에게 정확한 정보를 전달할 수 있도록 한다. 그리고 라벨링은 공격 식별자뿐만 아니라 해당 공격 식별자를 구현한 공격자를 구별할 수 있도록 부여된다. 따 라서 공격 식별자뿐만 아니라 공격자와 그에 따른 구현 방식을 식별할 수 있도록 제공할 수 있다. 실시 예는 기존에 분류된 디스어셈블된 코드(OP-CODE, ASM-CODE, 또는 그 조합)의 데이터 세트를 학습한 데이터 를 기반으로 고도화된 프로파일링이 가능한다. 실시 예는 위에서 개시한 정적 분석, 동적 분석, 또는 연관 분석 의 데이터도 라벨링을 수행하는 참고 데이터로 활용할 수 있다. 따라서 기존에 분석되지 않은 데이터 세트라고하더라도 정적, 동적, 및 연관 분석의 결과를 함께 고려하면 매우 빠르고 효율적으로 프로파일링 데이터를 확보 할 수 있다. 위에서 3단계의 악성 코드와 유사한 패턴을 가지는 코드를 학습하고 학습된 데이터가 분류되는 과정과 4단계의 분류된 데이터의 프로파일링 과정은 머신 러닝에 알고리즘에 의해 함께 진행될 수 있다. 이에 대한 상세한 예는 아래에서 개시한다. 그리고 프로파일링된 데이터 세트의 실제 예도 아래에서 도면을 참 고하여 예시하도록 한다. 도 8은 개시하는 실시 예의 데이터 변환의 일 예로서 디스어셈블드 코드의 OP-CODE 및 ASM-CODE를 정규화된 코 드로 변환한 값을 예시한 도면이다. 설명한 바와 같이 실행 파일의 디스어셈블링을 수행하면 OP-CODE 및 ASM-CODE가 결합된 데이터가 출력된다. 실시 예는 디스어셈블링된 데이터로부터 함수 별로 출력되는 주석 데이터를 제거하고 처리가 용이하도록 OP- CODE, ASM-CODE, 및 대응 파라미터의 배치 순서를 변경할 수 있다. 재구성된 OP-CODE와 ASM-CODE를 정규화된 코드 데이터로 변경하는데, 이 도면의 예는 정규화된 코드 데이터로 CRC 데이터를 예시한다. 일 예로 OP-CODE는 CRC-16로 변환하고 ASM-CODE로 CRC-32로 변환할 수 있다. 예시한 표의 첫 번째 행에서 OP-CODE의 push함수를 0x45E9의 CRC-16 데이터로 변경하고, ASM-CODE의 55를 0xC9034AF6의 CRC-32 데이터로 변경한 것을 예시한다. 두 번째 행에서는 OP-CODE의 mov함수를 0x10E3의 CRC-16 데이터로 변경하고, ASM-CODE의 8B EC 를 0x3012FD2C 의 CRC-32 데이터로 변경하였다. 세 번째 행에서는 OP-CODE의 lea함수를 0xAACE의 CRC-16 데이터로 변경하고, ASM-CODE의 8D 45 0C를 0x9214A6AA의 CRC-32 데이터로 변경하였다. 네 번째 행에서 OP-CODE의 push함수를 0x45E9의 CRC-16 데이터로 변경하고, ASM-CODE의 50를 0xB969BE79의 CRC-32 데이터로 변경한 것을 예시한다. 이 예와 다르게 CRC 데이터와 다른 다른 정규화 코드 데이터나 길이가 다른 코드 데이터를 사용할 수도 있다. 이렇게 디스어셈블링된 코드를 정규화된 코드로 변경하면 각 코드의 고유성을 확보하면서 이후의 연산, 유사도 산출 및 벡터화 수행을 용이하게 빠르게 수행할 수 있다. 도 9는 개시하는 실시 예의 데이터 변환의 일 예로서 디스어셈블드 코드의 OP-CODE 및 ASM-CODE의 벡터화된 값 을 예시한 도면이다. 이 도면에서는 정규화된 OP-CODE 의 코드(위의 예에 따르면 CRC-16)와 정규화된 ASM-CODE (위의 예에 따르면 CRC-32)를 각각 벡터화시킨 결과를 예시한다. 정규화된 OP-CODE 의 코드를 벡터화한 값(OP-CODE Vector)와 정규화된 ASM-CODE의 코드를 벡터화한 값(ASM- CODE Vector)을 이 도면에 표 형식으로 나타내었다. 이 도면의 각 행의 OP-CODE Vector 값과 ASM-CODE Vector 값은 위에서 예시한 각 행의 OP-CODE의 정규화 값과 ASM- CODE의 정규화 값에 대응된다. 예를 들어, 이 도면의 표의 네 번째 행의 CRC 데이터 0x45E9와 0xB969BE79의 벡터화 값들은 각각 이 도면의 표 의 네 번째 행의 17897와 185 105 121 44이 된다. 이렇게 정규화된 데이터에 대해 벡터화를 수행하면 디스어셈블링된 OP-CODE의 함수와 ASM-CODE가 각각 고유 특 징을 포함하면서 벡터화 값으로 변화된다. 도 10은 개시하는 실시 예의 데이터 변환의 일 예로서 코드의 블록 단위를 해쉬 값으로 변환하는 예를 개시한 도면이다. 유사도 분석을 수행하기 위해서 벡터화된 각 OP-CODE 및 ASM-CODE 의 데이터 세트는 바이트 데이터 형태로 재변 환이 수행된다. 재변환된 바이트 데이터는 블록 단위의 해쉬 값으로 변환될 수 있다. 그리고 다시 블록 단위의해쉬 값들에 기반하여 전체 재변환된 바이트 데이터의 해쉬 값을 생성한다. 실시 예는 재변환된 해쉬 값을 산출하는데 MD5(Message-Digest algorithm 5), SHA1 (Secure Hash Algorithm 1), SHA 256이 등의 해쉬 값을 사용될 수도 있는데, 데이터 사이의 유사도 판단을 위한 퍼지 해쉬(Fuzzy Hash) 함수를 이용할 수 있다. 이 도면의 표에서 첫 번째 행은 데이터에 포함될 수 있는 사람이 가독할 수 있는 character를 나타낸다. 재변환 된 바이트 데이터 중 블록 단위에 포함되는 값은 이와 같은 가독성의 character들을 포함할 수 있다. 각 character들은 두 번째 행의 아스키 값(ascii val)인 97, 98, 99, 100, …., 48, 49에 대응될 수 있다. 첫 번째 행의 character 값들을 포함하는 데이터를 세그먼트하여 아스키 값들의 합산이 가능한 블록으로 분리할 수 있다. 표의 세 번째 행은 4개의 character 를 가지는 블록 단위 내에서 각 character 값에 대응되는 아스키 값의 합산 값을 나타낸다. 첫 번째 블록의 경우 그 블록 내 character 에 대응되는 아스키 값(ascii val) 97, 98, 99, 100의 합(ascii sum)인 394의 값을 가질 수 있다. 그리고 마지막 행은 블록 단위의 아스키 값의 합이 Base 64의 표현으로 변환된 경우를 나타낸다. 문자(letter) K는 첫 번째 블록의 합산이 된다. 이러한 방식으로 해당 데이터에 대해 Kaq6KaU라는 시그니처를 얻을 수 있다. 이러한 시그니처를 기반으로 두 개의 블록 단위 데이터에 대한 유사도를 산출할 수 있다. 이 실시 예는 재변환된 바이트 데이터 중 코드에 포함된 블록 단위들에 대해 유사도 판단을 위한 퍼지 해쉬 함 수로 해쉬 값을 산출하고, 산출된 해쉬 값들을 기반으로 유사도를 판단할 수 있다. 유사도 판단을 위한 퍼지 해 쉬 함수로 CTPH(Context Triggered Piecewise Hashing)를 예시하였으나 데이터의 유사도를 산출할 수 있는 다 른 퍼지 해쉬 함수를 사용하는 것도 가능하다. 도 11은 개시하는 실시 예에 따른 앙상블 머신 러닝 모델의 일 예를 나타낸 도면이다. 실시 예는 앙상블 머신 러닝 모델을 이용하여 악성 코드로 판단되는 파일의 공격 식별자(T-ID)를 정확하게 분류 할 수 있다. String Data (Byte Data)로 구성된 블록 단위를 해쉬 값은 N-gram 특징 정보 기반으로 수치화시킨 후 이것이 공 격 식별자(T-ID) 또는 분류될 클래스인지를 판단하기 위해 TF-IDF 등의 기법으로 유사도를 계산할 수 있다. 불필요한 연산을 줄여 공격 기법 식별의 성능을 높이기 위해 실시 예는 위 해쉬 값 중 유사도를 기반으로 불필 요한 패턴을 제거할 수 있다. 그리고 불필요한 패턴이 제거된 데이터를 앙상블 머신 러닝을 통해 모델링하여 공격 식별자를 분류할 수 있다. 앙상블 머신 러닝 모델의 여러 개의 분류 노드의 학습 결과들을 결합하기는 방식으로 보팅(Voting), 배깅 (Bagging), 부스팅(Booting) 등의 방식이 있다 이러한 방식들을 적절히 조합한 앙상블 머신 러닝 모델은 학습 데이터의 분류 정확도를 높이는데 기여할 수 있다. 여기서는 일 예로서 배깅 방식의 랜덤 포레스트(Random Forest) 방식을 적용하는 경우를 예를 들어 공격 식별자 를 보다 정확하게 분류하는 방법을 설명한다. 랜덤 포레스트(Random Forest) 방식은 많은 수의 디시전 트리(Decision Tree) 생성하여 단일 디시전 트리에 의 한 분류 오류를 낮추고 일반화된 분류 결과를 얻는 방식이다. 실시 예는 준비된 데이터에 대해 적어도 하나 이 상의 디시전 트리(Decision Tree)를 이용한 랜덤 포레스트(Random Forest) 학습 알고리즘을 적용할 수 있다. 여 기서 준비된 데이터는 블록 단위의 퍼지 해쉬 값으로부터 불필요한 패턴이 제거된 데이터를 의미한다. 블록 단위 해쉬 값의 유사도 판단을 위해 적어도 하나 이상의 노드를 가진 디시전 트리(Decision Tree)모델을 수행한다. 디시전 트리(Decision Tree)의 정보 획득(information gain) 정도에 따라 1개 이상의 클래스(공격 식별자; T-ID)를 구분할 수 있는 특징 값(여기서는 블록 단위 해쉬 값을 기초로 한 분류 패턴의 발현 개수)에대해 비교 조건을 최적화할 수 있다. 이를 위해 도면에서 예시한 바와 같은 디시전 트리(Decision Tree)를 생성할 수 있다. 이 도면에서 위 쪽의 사각형(2510, 2520, 2530, 2540)들은 인 터미널 노드로서 클래스를 구분하는 조건을 의미 하고 아래 쪽의 사각형 부분(2610, 2620, 2630)은 터미널 노드로 분류되는 클래스를 의미한다. 예를 들어 랜덤 포레스트(Random Forest) 모델을 앙상블 머신 러닝 모델로 적용할 경우, 1개 이상의 디시전 트 리(Decision Tree)를 이용하여 앙상블 기법을 사용하는 분류 모델이다. 랜덤 포레스트(Random Forest) 모델을 구성하는 디시전 트리(Decision Tree)의 입력 데이터의 특징을 다르게 하여 다양한 디시전 트리(Decision Tre e)를 구성한다. 여러 개 생성된 디시전 트리(Decision Tree) 모델에 대해 분류를 수행하고 다수결 투표 기법을 사용하여 최종 분류 클래스를 결정한다. 각 노드의 테스트는 병렬적으로 진행될 수 있어 계산 효율이 높다. 클래스를 분류할 경우 과탐과 오탐을 방지하기 위해 임계값을 설정하고 하한 임계값 이하의 값은 버리고, 탐지 임계값 이상의 데이터 대상으로 분류를 수행할 수 있다. 도 12는 개시하는 실시 예에 따라 머신 러닝으로 데이터를 학습하고 분류하는 흐름을 예시한 도면이다. 입력 데이터의 프로파일링은 분류 단계(S2610)과 학습 단계(S2620)를 포함할 수 있다. 실시 예에서 학습 단계(S2620)는 (a) 해쉬 값 추출 과정, (b) N-gram 패턴 추출 과정, (c) 자연어 처리 분석 (TF-IDF 분석) 과정, (d) 패턴 선택 과정, (e) 모델 학습 과정 등을 포함할 수 있다. 그리고 실시 예에서 분류 단계(S2610)는, (a) 해쉬 값 추출 과정, (b) N-gram 패턴 추출 과정, (f) 패턴 선택 과정, (g) 벡터화에 의한 분류 과정 등을 포함할 수 있다. 실시 예에 따른 프로파일링 단계 중 분류 단계(S2620)를 먼저 설명하면 다음과 같다. 실행 파일 집합이나 처리된 파일로부터 입력 데이터를 수신한다. 데이터베이스에 저장된 실행 파일 집합들로부터 입력 데이터를 수신하거나 또는 위에서 예시한 처리 과정으로부 터 전달되는 실행 파일이 포함된 입력 데이터를 수신한다. 입력 데이터는 OP-CODE 와 ASM-CODE 코드를 포함하는 디스어셈블된 코드를 변환시킨 데이터로 벡터화시킨 데이터일 수 있다. 입력 데이터인 디스어셈블된 코드로부터 퍼지 해쉬(Fuzzy Hash) 값을 추출(a)하고 특정 함수에 대한 N-gram 패 턴 데이터를 추출한다(b). 이때 기존의 의미 패턴 집합 중 악성 코드와 유사하다고 판단한 패턴을 포함한 2- gram 의 패턴 데이터를 선택할 수 있다(f). 선택한 패턴의 N-gram 데이터를 벡터화 데이터로 변환하고 벡터화 데이터를 의미가 패턴이 결정된 함수로 분류 할 수 있다(g). 실시 예에 따른 프로파일링 단계 중 학습 단계(S2610)는 다음과 같이 수행된다. 만약 입력된 데이터가 새로운 파일이라면 입력 데이터인 디스어셈블된 코드로부터 퍼지 해쉬(Fuzzy Hash) 값을 추출한다(a). 추출된 퍼지 해쉬(Fuzzy Hash) 값을 N-gram 데이터(이 예에서는 2-gram)로 벡터화시킨다(b). 추출된 특정 패턴에 대해 TF-IDF 와 같은 자연어 처리 분석을 수행한다(c) 기존의 공격 식별자(T-ID)와 관련된 패턴을 가지는 데이터 세트 중 유사도가 높은 데이터 세트를 선택하고 나머 지는 필터링한다(d). 이때 기존의 의미 패턴 집합에 저장된 데이터 세트들과 비교하여 공격 식별자(T-ID)와 관 련된 패턴을 가지는 데이터 세트의 일부 또는 전부의 특징을 포함한 샘플 데이터 세트들을 선택할 수 있다. 추출된 샘플 데이터 세트를 기반으로 벡터화한 N-gram 데이터를 학습시킬 수 있다(e). N-gram 의 벡터화 데이터를 분류 모델에 입력하여 공격 식별자(T-ID) 별로 확률을 얻는다. 예를 들어 N-gram 구 조의 벡터화 데이터가 특정 공격 식별자(T-ID) T1027일 확률이 A%이고, 공격 식별자 T1055일 확률이 (100-A)%인 확률 등의 확률을 얻을 수 있다. 분류 모델은 적어도 하나 이상의 디시전 트리를 포함하는 랜덤 포레스트 등의 앙상블 머신 러닝 모델을 이용할 수 있다. 여기서 분류 모델에 기반하여 벡터화한 N-gram 데이터가 어떤 공격 기법 또는 공격자인지 판단할 수 있다. 분류 모델(e)의 분류 결과 또는 기존의 저장된 패턴의 선택(f) 결과에 따라 입력 데이터를 분류하여 라벨링을 수행한다(g). 최종 라벨링이 수행된 결과는 다음의 도면을 참조하여 예시한다. 도 13은 개시하는 실시 예에 따라 입력 데이터를 학습하고 분류하여 공격 식별자와 공격자를 라벨링한 예를 나 타낸 도면이다. 이 도면은 프로파일러의 결과로서 공격 식별자, 공격자 또는 공격 그룹, 어셈블리 코드에 대응되는 퍼지 해쉬 값, 그에 대응되는 N-gram(여기서는 2-gram 데이터로 기재)를 각각 표 형식으로 나타낸 도면이다. 실시 예에 따라 프로파일링이 완료되면 다음과 같은 공격 방법의 구현과 관련하여 분류된 데이터를 얻을 수 있 다. 실시 예에 의한 프로파일링에 따라 공격 식별자(T-ID)와 공격자 또는 공격자 그룹(Attacker or Group)에 각각 라벨링될 수 있다. 여기서 공격 식별자(T-ID)는 설명한 바와 같이 표준화된 모델에 따를 수 있는데 이 예에서는 MITRE ATT&CK®에 서 제공하는 공격 식별자(T-ID)를 부여한 결과를 예시한다. 위에서 기술한 바와 같이 식별된 공격자 또는 공격자 그룹(Attacker or Group)에도 라벨링이 추가될 수 있다. 이 도면은 공격자 또는 공격자 그룹(Attacker or Group)의 라벨링으로 공격자 TA504를 식별한 예를 나타낸다. SHA-256 (size)는 각각의 공격 식별자(T-ID) 또는 공격자 그룹(Attacker or Group)에 대응되는 악성 코드의 퍼 지 해쉬 값과 데이터 사이즈을 나타낸다. 설명한 바와 같이 이러한 악성 코드는 OP-CODE 와 ASM-CODE의 재배치 와 조합에 대응될 수 있다. 그리고 N-gram으로 표시한 섹션의 값은 공격 식별자(T-ID) 또는 공격자 그룹과 악성 코드의 퍼지 해쉬 값에 대 응되는 N-gram 패턴 데이터로서, 이 예에서는 2-gram 데이터의 일부로 표시하였다. 이 도면에서 예시한 바와 같이 악성 코드(OP-CODE 와 ASM-CODE)의 퍼지 해쉬 값과 N-gram 패턴 데이터에 대응되 는 공격 식별자(T-ID) 또는 공격자 그룹이 라벨링되어 저장될 수 있다. 예시한 라벨링된 데이터는 앙상블 머신 러닝의 참조 데이터로 이용될 수 있고, 분류 모델의 참조 데이터로 이용 될 수도 있다. 도 14는 실시 예에 따라 공격 식별자를 식별한 결과를 나타낸 도면이다. 이 도면은 유클리언 디스턴스 매트릭스(Euclidean Distance Matrix)를 예시하는데, 유클리언 디스턴스 매트릭스 (Euclidean Distance Matrix)는 두 데이터 세트 사이의 유사도를 나타낼 수 있다. 이 도면에서 밝은 부분은 두 데이터 세트의 유사도가 낮은 것을 의미하고 어두운 부분은 두 데이터 세트의 유사 도가 높은 것을 의미한다. 이 도면에서 T10XX는 공격 식별자(T-ID)를 의미하고 괄호 안에 character T, K, L은 각각 해당 공격 식별자(T- ID)에 따른 공격 기법을 작성한 공격자 그룹을 의미한다. 즉, 행과 열은 각각의 공격자 그룹들(T, K, L)이 생성한 공격 식별자(T-ID)들을 의미하며 행과 열은 동일한 의 미를 가진다. 예를 들어 T1055(K)는 L 공격자 그룹이 생성한 T1055 공격을 의미하고, T1055(K)는 K 공격자 그룹 이 생성한 동일한 공격 방법 T1055를 의미한다. 각각의 데이터 세트의 샘플들은 자신의 샘플을 포함하기 때문에 다른 샘플들과의 거리를 각각 계산하면 왼쪽 위 에서 오른쪽 아래의 대각선 방향으로 동일성이 높은 분포를 나타낸다. 이 도면을 보면 동일한 공격 식별자(T-ID)의 경우 공격자 그룹이 다르더라도 유사한 특징을 나타내는 것을 확인 할 수 있다. 예를 들어 T1027의 공격 식별자는 공격 그룹이 T 또는 K라고 하더라도 공격 기법이 유사하면 유사 도가 높게 평가될 수 있다. 따라서, 위의 실시 예와 같이 추출한 데이터 세트를 기반으로 학습을 진행하면 동일한 공격자가 구현한 같은 공 격 기법(T-ID)에 대한 특징은 명확하게 식별되고(가장 어두운 부분), 다른 공격자가 구현한 동일한 공격 기법 (T-ID)은 유사도가 높은 것(중간 어두운 부분)을 확인할 수 있다. 따라서, 이와 같이 OP-CODE 와 ASM-CODE 의 조합에 기초한 샘플 데이터를 추출하여 적용해 공격 기법을 분류하 면 공격자가 다른 경우라고 하더라도 특정의 공격 기법 또는 식별자(T-ID)를 확실하게 분류해 낼 수 있다. 반대 로 OP-CODE 와 ASM-CODE 의 조합을 통해 악성 코드 내부에 구현된 특정 코드를 명확하게 식별할 수 있을 뿐만 아니라 공격자, 공격 식별자를 포함함 공격 구현 방식을 식별할 수 있다. 도 15는 개시하는 실시 예에 따라 바이너리 코드에서 추출된 코드들로 공격 기법을 매칭하는 일 예를 나타낸다. 여기에서는 공격 기법을 매칭하는 일 예로 표준화된 모델을 사용하는 예를 개시한다. 여기서 표준화된 모델로 MITRE ATT&CK® Framework를 예시한다. 예를 들어 사이버 보안 상 “악성 행위” 라고 하는 것은 분석가에 따라 해석 방식이 다르고 각자가 가지고 있 는 식견에 따라서 다르게 해석하는 경우가 많았다. 국제적으로 시스템 상에서 발생하는 “악성 행위”를 표준화 하고 모두가 같은 해석을 할 수 있도록 전문가들 사이에 많은 노력을 수행되고 있다. 미국 연방정부의 지원을 받으며 국가안보관련 업무를 수행하던 비영리 연구 개발 단체인 MITRE(https://attack.mitre.org)에서 “악성 행위” 에 대한 정의를 연구하였고 그에 따라 ATT&CK® Framework 이라는 것을 만들고 공표하였다. 이 프레임 워크는 사이버 위협 또는 악성코드에 대해 모두 가 같은 “악성 행위”를 정의 할 수 있도록 정의하였다. MITRE ATT&CK® Framework (이하, MITRE ATT&CK®)는 공격자들의 최신 공격 기술 정보를 정리한 것으로서 Adversarial Tactics, Techniques, and Common Knowledge의 약어이다. MITRE ATT&CK® 은, 실제 사이버 공격 사례를 관찰한 후 공격자의 악의적 행위(Adversary behaviors)에 대해서 공격 방법(Tactics)과 기술 (Techniques)을 분석하여 다양한 공격 그룹들의 공격 기법들에 대한 정보들을 분류하고 목록화한 표준적인 데이 터이다. MITRE ATT&CK® 은 전통적인 사이버 킬체인의 개념과는 약간 관점을 달리하여 지능화된 공격의 탐지를 향상시키 기 위해 위협적인 전술과 기술을 체계화(패턴화)한 것이다. 원래 ATT&CK는 MITRE에서 윈도우 운영체제를 사용 하는 기업 환경에 사용되는 해킹 공격에 대해서 방법(Tactics), 기술(Techniques), 절차(Procedures) 등 TTP를 문서화하는 것으로 시작되었다. 그 이후 ATT&CK은 공격자로부터 발생한 일관된 공격 행동 패턴에 대한 분석을 기반으로 TTP 정보를 매핑하여 공격자의 행위를 식별해 줄 수 있는 프레임워크로 발전하였다. 개시하는 실시 예에서 언급하는 악성 행위는, MITRE ATT&CK® 와 같은 표준화된 모델에 기반하여 악성 코드를 공격 기법에 매칭하여 표현할 수 있는데 표준화된 모델이 어떤 것이든 악성 코드를 요소 별로 식별하고 분류하 여 공격 식별자에 매칭할 수 있다. 이 도면의 예 어떻게 악성 코드의 악성 행위와 MITRE ATT&CK 모델 기반으로 공격 기법이 매칭되는지를 개념적으 로 나타낸다. 실행 파일 EXE는 파일 실행 시에 수행되는 여러 가지 함수들(Function A, B, C, D, E,…, N,…, Z)을 포함할 수 있다. 그 함수들 중 적어도 하나의 함수를 포함하는 함수 그룹은 하나의 공격 방법(tactic)을 수행할 수 있 다. 이 도면의 예에서 함수 A, B, C는 공격 방법(tactic) A에 대응되고, 함수 D, B, F는 공격 방법(tactic) B에 대 응되는 예를 개시한다. 유사하게 함수 Z, R, C는 공격 방법(tactic) C에 대응되고, 함수 K 및 F는 공격 방법 (tactic) D에 대응된다. 실시 예는 각 공격 방법(tactic)에 대응되는 함수들의 집합과 특정 디스어셈블드 코드 의 부분을 대응시킬 수 있다. 데이터베이스는 이미 인공 지능으로 학습된 디스어셈블드 코드들에 대응될 수 있는 의 공격 방법(Tactics), 기술(Techniques), 절차(Procedures) (TTP)의 공격 식별자 (T-ID)를 저장하고 있다. 공격 방법(Tactics), 기술(Techniques), 절차(Procedures) (TTP)의 공격 식별자 (T-ID)는 표준화된 모델을 따 르며 여기 도면의 예시는 사이버 위협 정보의 표준화된 모델로 MITRE ATT&CK®를 예시하였다. 따라서, 실시 예는 바이너리 파일에서 디스어셈블드 코드로부터 추출한 결과 데이터를 표준화된 공격 식별자로 매칭시킬 수 있다. 공격 식별자를 매칭하는 보다 구체적인 방식은 아래에서 개시한다. 도 16은 개시하는 실시 예에 따라 OP-CODE를 포함하는 코드 세트와 공격 기법을 매칭하는 일 예를 나타낸다. 대부분의 인공지능 엔진은 악성 코드의 다양한 특징 정보를 바탕으로 학습된 데이터 셋(data set)을 이용해 악 성 코드를 판별한다. 그러면 악성 코드의 악성 여부는 판단이 되지만 이러한 방식은 악성 코드가 왜 악성 코드 인지에 대한 설명을 하기 힘들었다. 그러나 예시한 바와 같이 표준화된 공격 방법(TTP)의 식별자로 대응시키면 해당 악성 코드가 어떤 위협 요소가 있는지 식별이 가능하다. 따라서, 실시 예는 보안 관리자에게 사이버 위협 정보를 정확하게 전달하도록 하고, 보안 관리자가 사이버 위협 정보를 체계적이고 장기적으로 관리할 수 있도록 할 수 있다. 실시 예는 디스어셈블드 코드를 기반으로 공격 방법(TTP)을 식별하기 위한 인공 지능 학습용 데이터 셋을 생성 할 때 단순히 공격 방법(TTP)의 식별자 또는 라벨링 만을 구분할 뿐만 아니라 공격 방법(TTP)을 어떻게 구현했 는지에 대한 특징을 중요한 요소로 반영할 수 있다. 동일한 공격 방법(TTP)을 구현하는 악성 코드라도 개발자에 따라 동일한 코드로 생성하는 것은 불가능하다. 즉, 공격 방법(TTP)의 기술은 인간 구술 언어 형태로 되어 있으나, 개발자에 따라 이를 구현 방식과 코드 작성 방법 이 동일하지 않다. 이러한 코드 작성의 차이는 개발자의 역량이나 프로그램 로직을 구현하는 방식이나 습관에 따르는데 이러한 차 이는 바이너리 코드 또는 이를 디스어셈블된 OP-CODE 와 ASM-CODE의 차이로 나타낸다. 그래서 단순히 결과적인 공격 방법(TTP)의 타입에 따라 공격 식별자를 부여하거나 대응시키면 악성 코드를 생성 하는 공격자 또는 공격자 그룹까지 정확하게 식별하기 힘들다. 반대로 디스어셈블된 OP-CODE 와 ASM-CODE의 특성을 중요한 변수로 반영시켜서 모델링을 수행하면 특정 악성코 드나 공격 도구를 개발한 개발자 혹은 자동으로 생성하는 도구 자체까지도 식별이 가능하다. 개시하는 실시 예는 디스어셈블된 OP-CODE 와 ASM-CODE 결합 코드의 고유한 특성에 따라 현대의 사이버 전에서 굉장히 중요한 위협 인텔리전스를 생성하도록 할 수 있다. 즉, 이러한 고유 특성에 기초하면 실시 예는 공격 코 드 또는 악성 코드를 어떻게 동작을 하는지, 이것을 누가 어떤 의도로 개발했는지에 대한 내용을 함께 식별할 수 있다. 그리고 추후에 해당 공격자가 계속해서 공격하는 특징 정보를 바탕으로 취약한 시스템을 보완할 수 있고 사이버 보안 위협에 대한 능동적이고 선제적인 대응이 가능하도록 할 수 있다. 이러한 개념 상에서 실시 예는 단순히 OP-CODE 기반으로 공격 결과에 따른 공격 기법을 식별하는 방식과 성능에 서 전혀 다른 결과를 제공한다. 실시 예는 공격 방법(TTP)를 구현하기 위해 사용된 코딩 기법을 정확하게 식별하여 분류하기 위해 디스어셈블된 OP-CODE 와 ASM-CODE을 조합된 특징에 기초한 디스어셈블드 코드의 데이터 세트를 생성할 수 있다. 이렇게 생성 된 데이터 세트로부터 고유한 특성을 식별하도록 모델링하면 공격 방법(TTP)뿐만 아니라 개발자의 특징 정보, 즉 개발자 (또는 자동화된 제작 도구)가 누구인지까지 식별이 가능하다. 이 도면은 위에서 설명한 방식으로 모델링된 OP-CODE 데이터 세트를 공격 식별자에 매칭하는 예를 나타낸다. 이 예에서 제 1 OP-CODE 세트(OP-CODE set #1)는 공격 기법 식별자 T1011에 매칭되고, 제 2 OP-CODE 세트(OP- CODE set #2)는 공격 기법 식별자 T2013에 매칭됨을 나타낸다. 그리고 제 3 OP-CODE 세트(OP-CODE set #3)는 공격 기법 식별자 T1488에 매칭할 수 있고, 제 N번째 OP-CODE 세트(OP-CODE set #N)는 임의의 공격 기법 식별자 T1XXX에 매칭됨을 나타낸다. 표준화된 모델인 MITRE ATT&CK®은 공격 기법의 식별자를 요소 별로 매트릭스 형식 으로 표현하지만, 실시 예는 공격 기법의 식별자 이외에 공격자 또는 공격 도구를 추가로 식별할 수 있다. 이 도면은 편의 상 OP-CODE 데이터 세트로 표시하였으나 OP-CODE 와 ASM-CODE을 포함하는 디스어셈블드 코드의 데이터 세트로 공격 기법을 식별하면 OP-CODE 데이터 세트만으로 공격 기법을 식별하는 것보다 더욱 세분화된 공격 기법을 식별할 수 있다. 실시 예에 따라 디스어셈블드 코드의 데이터 세트의 조합을 분석하면 공격 기법 식별자 뿐만 아니라 공격자 또 는 공격 그룹의 식별할 수도 있다. 따라서, 실시 예는 기존의 기술보다 인텔리전스 정보 획득 차원에서 고도화된 기술을 제공할 수 있을 뿐만 아니 라 종래의 보안 영역에서 해결하지 못한 문제를 해결할 수 있다. 위와 같이 복잡한 환경에서 정확한 인텔리전스 정보를 확보하기 위해 빠른 데이터처리와 알고리즘이 요구된다. 이하에서는 이와 관련된 추가적인 실시 예와 그에 따른 성능에 대해 개시하도록 한다. 따라서 개시한 실시예에 따르면 머신 러닝으로 학습된 데이터와 정확하게 일치하지 않는 악성 코드라도 탐지하 고 대응할 수 있고 악성 코드의 변종에 대응할 수 있다. 실시예에 따르면 악성 코드의 변종이라도 매우 빠른 시간 내에 악성 코드, 공격 기법 및 공격자를 식별할 수 있 고 나아가 추후의 특정 공격자의 공격 기법을 예측할 수 있다. 실시예에 따르면 이러한 악성 코드 여부, 공격 기법, 공격 식별자 및 공격자를 기반으로 사이버 공격 구현 방식 을 정확히 식별하고 이를 표준화된 모델로 제공할 수 있다. 실시예에 따르면 악성코드 탐지 명 등이 통일되지 않거나 사이버 공격 기법이 정확하게 기술되지 못하는 악성 코드의 정보를 정규화되고 표준화된 방식으로 제공 할 수 있다. 또한 기존에 알려지지 않은 악성 코드를 생성 가능성과 이를 개발할 수 있는 공격자들을 예측하고 미래에 어떤 사이버 위협 공격이 있을지 예측 가능한 수단을 제공할 수 있다. 이하에서는 위에서 개시한 사이버 위협 정보 처리 장치 및 그 방법에 대한 다른 실시 예를 개시한다. 위에서 개시한 사이버 위협 정보 처리는 함수 단위의 위협 정보의 특징에 대한 분석이 가능하였다. 그러나 동일 한 결과를 행하는 프로그램이라고 하더라도 함수들을 포함하는 프로그램의 로직(logic)에 따라 또는 프로그램의 로직의 변화가 없더라도 함수들이 분리되는 등 다르게 활용되는 경우 공격기법이나 공격 그룹을 명확하게 식별 하기 어려운 경우가 있다. 도 17은 함수 단위의 공격 기법 및 공격 그룹 식별을 수행하는 예를 설명하기 위한 도면이다. 이 예에서 실행파일(예, EXE)를 디스어셈블(disassemble)하고 그 실행파일에 포함된 함수들을 식별하였다고 가 정한다. 여기서 식별된 함수들을 Function 1, Function 2, Function 3, Function 4로 예시한다. 식별된 함수들 중 Function 2은 함수 연산을 수행하는 인스트럭션(Instruction)들을 포함할 수 있다. 여기서 함 수 Function 2에 포함되는 인스트럭션(Instruction)들을 Instruction 1, Instruction 2, Instruction 3, Instruction 4, Instruction 5, Instruction 6, 및 Instruction 7로 표시하였다. 그런데 프로그램 상에서 하나의 함수는 수행 시에 여러 개의 서브 함수에 따라 분리되어 수행되는 경우가 있다. 이 예에서 Function 2이 2개의 서브 함수로 분리되어 수행된다고 가정한다. 그러면 Function 2에 포함되는 2개 의 서브 함수에 인스트럭션들로 분리될 수 있다. 여기서는 설명의 편의상 Function 2에 포함되는 1개의 서브 함수에 Instruction 1, Instruction 2, 및 Instruction 3이 포함되고, 다른 1개의 서브 함수에 Instruction 4, Instruction 5, Instruction 6, 및 Instruction 7는 경우를 예시하였다. 그러나 프로그램 상에서는 서브 함수들은 하나의 함수 Function 2에 포함되어 있을 수 있다. 함수 단위로 사이버 위협과 관련된 특징 정보를 추출하는 경우 Function 2에 대응되는 1개의 특징 정보(사이버 위협 특징 정보 A, 간단히 특징 정보 A로 표시)가 식별될 수 있다. 위에 개시된 함수 단위의 사이버 위협과 관련된 특징 정보를 위에서 기재한 실시 예에 따라 분석하면 공격 기법 과 공격 그룹을 식별할 수 있다. 도 18는 함수가 분리될 경우의 공격 기법 및 공격 그룹 식별을 수행하는 예를 설명하기 위한 도면이다. 이 실시 예는 위에서 개시한 예와 동일한 결과를 나타내는 실시 예이나, 여기서는 함수들 중 하나의 함수가 명 확하게 프로그램 상 서브 함수로 분리되는 경우를 예시한다. 즉, 실행 파일로부터 식별된 함수들 중 Function 2가 프로그램 상에서 Function 2-1 및 Function 2-2로 분리되 는 경우를 예시한다. 여기서 Function 2가 Function 2-1 및 Function 2-2로 분리되는 경우라도 Function 2의 하나의 함수가 수행되는 경우와 프로그램 상 로직은 변화는 없다. 프로그램 상 로직은 동일하지만 Function 2가 단순히 2개의 함수들(Function 2-1 및 Function 2-2)로 분리되는 경우 각 함수에 대응되는 특징 정보들(특징 정보 B 및 특징 정보 C)이 달라지므로 특징 정보를 기반으로 한 공 격기법과 공격그룹의 식별 결과는 달라질 수 있다. 따라서 이렇게 하나의 함수의 실행과 프로그램 상 동일한 로직을 실행하는 여러 함수를 기반으로 공격기법 또는 공격그룹을 식별하는 경우라도 이하의 실시 예에 따르면 이를 동일한 공격기법과 공격그룹으로 식별할 수 있다. 이하의 실시 예는 프로그램 내의 여러 함수들이 수행하는 인스트럭션들에 따른 제어흐름과 순서를 고려한 특징 정보를 기반으로 공격기법과 공격그룹을 식별하는 실시 예들을 개시한다. 프로그램의 함수들 내의 인스트럭션들의 흐름과 순서를 기반으로 특징 정보를 이용하면 프로그램 내에 함수들이 다르더라도 실질적으로 동일한 로직을 구현하면 특징 정보를 얻을 수 있다. 사이버 위협을 발생시키는 프로그램의 형식이 조금씩 변형되는 경우이거나 변종이라도 하더라도 이러한 특징 정 보를 기반으로 공격기법과 공격그룹을 명확하게 식별할 수 있다. 이하에서 함수 내 인스트럭션들에 따른 제어흐름 프로파일링과 순서들을 식별하는 예를 개시한다. 도 19는 실시 예에 따라 사이버 위협에 관련된 특징 정보를 얻는 예를 개시한다. 여기서 EXE로 표시한 실행 함수를 디스어셈블(Disassemble)하여 여러 가지 함수들을 포함하는 제어블록 (ControlBlock)들을 얻을 수 있다. 얻은 제어블록(ControlBlock)들 내에 인스트럭션들의 관계 상의 제어흐름을 얻은 후에, 그 제어흐름에 따른 제 어블록의 순서를 확인하고 이를 기반으로 인스트럭션 시퀀스를 얻을 수 있다. 그리고 얻은 인스트럭션 시퀀스에 따라 사이버 위협 특징 정보를 식별할 수 있다. 제어블록 또는 이에 대응하는 코드블록을 얻는 상세한 실시 예들을 위에서 이미 개시하였다. 이 예에서 실행 함수(EXE)를 디스어셈블(Disassemble)하여 얻은 제어블록(ControlBlock)들은 ControlBlock1, ControlBlock2, ControlBlock3, … , ControlBlock6으로 표시한다. 여기서 제어블록(ControlBlock)들은 각각 ControlBlock1, ControlBlock2, ControlBlock3, … , ControlBlock6 은 각 인스트럭션 세트(Instruction Set)에 대응될 수 있다. 위에서 설명한 것과 같이 위에서 설명한 인스트럭 션 세트(Instruction Set)은 각각 다르지만 각 인스트럭션 세트 내의 수행 로직은 동일할 할 수도 있다. 따라서, 제어블록(ControlBlock)들이 동일한 로직을 수행하는지를 식별하기 위해 제어블록(ControlBlock)들에 대해 제어흐름을 분석한다. 예를 들어 여기서는 실시 예를 쉽게 설명하기 위해 프로그램 실행에 따른 코드블록들의 제어흐름을 분석한 그래 프를 생성하여 설명한다. 예를 들어 제어블록(ControlBlock)1에 포함되는 인스트럭션 세트 중 실행 순서에 따른 인스트럭션을 C1, C2, C3, …, C6로 표시한다. 조금 더 이해를 쉽게 하기 위해 인스트럭션 세트 중 실행 순서에 따른 인스트럭션을 제 어흐름 그래프(Control Flow Graph, CFG)로 표시하였다. 이 예에 나타난 인스트럭션들의 제어흐름 그래프내에 인스트럭션들의 순서를 얻을 수 있는데 여기서는 얻은 순 서를 깊이 우선 탐색(Depth First Search, DFS) 방식으로 나타내었다. 깊이 우선 탐색(Depth First Search, DFS) 방식은 하나의 탐색 트리에 첨가 노드로 인스트럭션을 선택하고 이 노드에 적용 가능한 인스트럭션을 적용 하고 탐색 트리에 다음 수준의 한 개의 자식 노드로서 인스트럭션을 첨가하는 식으로 반복하는 방식이다. 그러면 제어블록(ControlBlock)에 대응되는 인스트럭션세트 내의 인스트럭션 제어흐름에 따라 적용되는 인스트 럭션 순서를 얻을 수 있다. 이 예에서 ControlBlock1에 대응되는 인스트럭션세트1에 포함되는 인스트럭션들의 제어흐름에 따른 순서는 (C1, C2, C4, C5, C3, C6)가 될 수 있다. ControlBlock2에 대응되는 인스트럭션세트2에 포함되는 인스트럭션들의 제어흐름에 따른 순서는 (C2, C4, C5)가 될 수 있다. ControlBlock3에 대응되는 인스트럭션세트3에 포함되는 인스트럭션들의 제어흐름에 따른 순서는 (C3, C6)가 될 수 있다 그리고 얻은 인스트럭션 순서에 따른 인스트럭션 시퀀스를 생성할 수 있는데, 이렇게 인스트럭션 시퀀스에 따라 사이버 위협에 대한 특징 정보를 구분할 수 있다. 여기서는 ControlBlock1에 대응되는 인스트럭션세트1를 제어흐름에 따른 순서에 따라 분류한 인스트럭션 시퀀스 들이 6개이고, 각 6개의 인스트럭션 시퀀스들마다 하나의 특징 정보가 추출되는 예를 개시하였다. 이와 같이 하면 프로그램 내에 하나의 함수가 분리되거나 실질적으로 동일한 로직으로 수행되는 함수들로 변경 되더라도 동일한 로직에 따른 사이버 위협 정보를 구분해 낼 수 있다. 이하에서는 여러 가지 함수들을 포함하는 제어블록(ControlBlock)들 내에 여러 가지 제어흐름들을 이용하여 인 스트럭션 시퀀스들을 얻는 여러 가지 예들을 개시한다. 먼저 포함하는 제어블록(ControlBlock)들 내에 여러 가지 제어흐름을 얻는 예를 개시한다. 실행 파일로부터 디스어셈블을 수행하여 얻은 제어블록(ControlBlock)들을 얻는다. 제어블록(ControlBlock)들 내부에 인스트럭션들 중 제어블록 내 특정 블록이나 또는 해당 제어블록 밖의 제어블 록을 레퍼런스하는 인스트럭션을 식별할 수 있다. 이렇게 코드 상에 분기하는 인스트럭션을 여기서는 브랜치 인 스트럭션(branch instruction) 타입으로 호칭한다. 브랜치 인스트럭션(branch instruction) 타입의 예로서 Call 함수나 Jump 함수 등이 있을 수 있다. 이 함수들은 그 제어블록 내 특정 블록이나 또는 해당 제어블록 밖의 제어블록을 레퍼런스할 수 있다. 따라서, 이러한 브랜치 인스트럭션(branch instruction)에 따른 레퍼런스 주소를 식별하면 인스트럭션들의 제어 흐름을 얻을 수 있다. 도 20은 실시 예에 따라 브랜치 인스트럭션(branch instruction) 계열을 이용하여 제어흐름을 얻는 과정을 예시 한다. 디스어셈블된 제어블록(cblk1)을 추출하고 추출한 제어블록(cblk1) 내부에서 브랜치 인스트럭션 타입의 인스트 럭션을 식별한다. 코드 상에 분기하는 브랜치 인스트럭션 타입의 인스트럭션 지칭하는 레퍼런스 주소 중 제어블록(cblk1)의 외부 의 위치를 지칭하는 레퍼런스(아웃고잉 레퍼런스, outgoing-ref로 표시)를 확인한다. 이 도면의 왼쪽은 특정한 아웃고잉 레퍼런스 분석의 일 예를 설명하기 위한 예이다. 이 예에서는 아웃고잉 레퍼런스가 아닌 그 제어블록(cblk1)의 내부의 위치를 지칭하는 레퍼런스(Reference A)는 무시할 수도 있다. 즉, 레퍼런스 A는 제어블록(cblk1)의 내부를 가리키기 때문에 제어흐름 생성시 고려하지 않 을 수 있다. 그리고 그 제어블록(cblk1)의 아웃고잉 레퍼런스가 다른 제어블록(cblk2)의 시작 주소 또는 시작 인스트럭션을 가리키는 경우(Reference B)와, 다른 제어블록(cblk3)의 내부 주소 또는 내부 인스트럭션을 가리키는 경우(Reference C)를 나누어 제어흐름을 생성할 수 있다. 이 예에서 레퍼런스 B는 대상 제어블록(cblk2)의 시작 주소 또는 인스트럭션을 가리키므로 대상 제어블록 (cblk2)은 그대로 제어흐름 생성에 포함시킬 수 있다. 한편 레퍼런스 C는 대상 제어블록의 내부 중 인스트럭션 2(instr2)를 가리키므로 제어흐름 생성 시에 해당 제어 블록(cblk3)의 인스트럭션 2(instr2)부터 마지막 인스트럭션까지 포함하는 새로운 제 3 제어블록(cblk3-2)를 제 어흐름 생성에 포함시킬 수 있다. 이 도면의 오른쪽은 위에서 설명한 예시에 따라 특정 제어블록(cblk1)에 대한 제어흐름 생성한 예이다. 왼쪽의 아웃고잉 레퍼런스 분석에 따라 제어블록(cblk1)의 제어흐름을 분석한 결과 제어블록(cblk1)에 대한 제 어흐름이 생성될 수 있다. 이와 같은 예에 따라 생성된 제어흐름은, 제 1 제어블록(cblk1)가 제 2 제어블록(cblk2)의 시작 주소 또는 인스 트럭션을 지칭하는 경우 제 2 제어블록(cblk2)을 제어흐름 내의 버텍스(vertex)로 포함할 수 있다. 그리고 제 1 제어블록(cblk1)가 제 3 제어블록(cblk3)의 내부 또는 중간 위치나 인스트럭션을 가리키는 경우, 생성된 제어흐름은 가리키는 위치의 인스트럭션부터 제 3 제어블록(cblk3)을 분리하고, 가리키는 위치의 인스트 럭션을 시작 인스트럭션으로 하는 새로운 제어블록(cblk3-2)을 버텍스(vertex)로 포함할 수 있다. 실시 예에 따르면, 특정 제어블록의 브랜치 인스트럭션이 아웃고잉 레퍼런스인 경우, 그 아웃고잉 레퍼런스가 지칭하는 위치나 인스트럭션에 따라 제어흐름을 생성할 수 있다. 특정 제어블록에 대해 생성된 제어흐름은 그 아웃고잉 레퍼런스가 제 2 제어블록의 시작 지점을 지칭하는 경우 제 2 제어블록을 버텍스(vertex)로 포함한다. 그리고 생성된 제어흐름은 상기 아웃고잉 레퍼런스가 제 3 제어블 록의 중간 지점을 지칭하는 경우 그 지칭 지점의 인스트럭션을 시작 인스트럭션으로 하는 새로운 제어블록을 버 텍스(vertex)로 포함한다. 이 도면의 예에서 제 1 제어블록(cblk1)의 레퍼선스 A는 제 1 제어블록(cblk1) 내부를 가리키기 레퍼런스이므로 무시하고, 제 1 제어블록(cblk1)의 레퍼런스 B는 제 2 제어블록(cblk2)의 시작 주소를 가리키므로 제 2 제어블 록(cblk2)을 버텍스로 포함한다. 제 1 제어블록(cblk1)의 레퍼런스 C는 제 2 제어블록(cblk2)의 내부를 가리키 므로 제 2 제어블록(cblk2)의 인스트럭션 2로부터 새로운 제어블록을 생성하여 버텍스로 포함할 수 있다. 이 도면의 예는 생성된 제어흐름을 제어흐름 그래프(Control Flow Graph, CFG)로 표시한 예인데, 하위 버텍스 (vertex)들은 제어블록(cblk)의 시작 주소를 기준으로 버텍스들을 오름차순으로 그래프의 왼쪽으로 위치시킨 예 를 나타낸다. 이하에서는 위와 같이 실행파일이 디스어셈블된 제어블록들의 레퍼런스 관계를 탐색하여 생성한 인스트럭션 시 퀀스에 따라 상기 실행 파일의 사이버 위협 특징 정보를 얻는 예를 이하에서 개시한다. 레퍼런스 관계에 따라 생성되는 인스트럭션 시퀀스들은 사이버 위협 정보의 특징을 나타낼 수 있다. 위에서 개시한 제어흐름 생성은 깊이 우선 탐색(DFS) 방식을 이용하면 제어블럭의 인스트럭션들을 특정한 원칙 에 따른 순서에 따라 병합하여 인스트럭션 시퀀스들을 생성할 수 있다. 이하에서는 사이버 위협 정보의 특징을 얻을 수 있는 인스트럭션 시퀀스들을 결합하는 방식을 예시한다. 인스트럭션 시퀀스들을 결합하는 제 1 예로서 제어블럭 내의 인스터력션들의 레퍼런스 관계에 따라 인스트럭션 시퀀스들을 생성할 경우 제어흐름의 의미가 있는 인스트럭션들을 깊이 우선 탐색하여 인스트럭션 시퀀스를 생성 할 수 있다. 여기서 제어흐름의 의미를 가지는 인스트럭션들이란 제어블록 내에 호출되는 인스트럭션들 중 NOP(non- operation) 또는 RET(return) 계열의 함수 또는 JUMP 함수나 CALL 함수 등 브랜치 계열의 함수들을 제거하는 것 을 의미한다. 이러한 계열의 함수들은 제어흐름의 그래프를 생성할 경우 그래프의 에지(EDGE)를 생성하는 뿐 실제 인스트럭션 시퀀스를 구성하지 않는다. 따라서 제어흐름의 그래프 내에 인스트럭션들을 깊이 우선 탐색으로 순서대로 결합 할 경우 이러한 계열의 함수들은 인스트럭션 시퀀스를 생성하는데 기여하지 않는다. 제어블럭 내의 인스터력션들의 레퍼런스 관계에 따라 인스트럭션 시퀀스들을 생성하는 제 1 예는, 실제 인스트 럭션 시퀀스에 포함될 수 있는 의미 있는 인스트럭션들을 결합하는 것으로서 브랜치 또는 단순히 레퍼런스 시키 는 인스트럭션은 결합 시 포함시키지 않는다. 제어흐름 그래프에서 깊이 우선 탐색 방식으로 인스트럭션을 결합하므로 브랜치 계열의 인스트럭션 또는 단순히 레퍼런스 시키는 인스트럭션은 사용하지 않고 인스트럭션 시퀀스를 생성한다. 제어블럭 내의 인스터력션들의 레퍼런스 관계에 따라 인스트럭션 시퀀스들을 생성하는 제 2 예로서, 제어블록 내의 인스트럭션 중 CALL 계열의 함수에 의해서 제어블록이 호출될 경우 스택 프레임이 조정될 수 있다. 스택 프레임(Stack Frame)은 스택 영역에 함수를 구분하기 위해 생성되는 공간을 의미한다. 예를 들어 스택 프 레임은 Parameters, Return Address, Local variables 등을 포함할 수 있는데 함수 호출 시 생성되고 함수가 종료되면서 소멸된다. 일반적으로 스택 프레임은 스택 시작점을 나타내는 스택 포인터(stack pointer, sp)와 스택 상의 특정 데이터를 가리키는 포인터인 베이스 포인터(base pointer, bp)를 포함하는데, 스택 프레임이 변경되는 경우 스택 포인터 (sp)와 베이스 포인터(bp)가 변경될 수 있다. 이와 같은 스택 프레임 상의 포인터와 관련된 인스트럭션들은 제어흐름에서 로직의 잡음으로 역할하기 때문에 깊이 우선 탐색을 사용하는 등 인스트럭션 시퀀스들을 결합하는데 사용되지 않는다. 위에서 예시한 바와 같이 인스트럭션 시퀀스를 결합하는데 브랜치 계열의 인스트럭션을 사용하지 않는 것과 유사하게 스택 프레임과 관련 된 인스트럭션도 사용하지 않은다. 도 21은 제 2 예에 따라 예시한 인스트럭션 결합 원칙에 따라 제어블럭의 인스트럭션들을 결합하여 인스트럭션 시퀀스를 생성하는 경우를 예시한다. CALL 계열의 함수에 의해 제어블록이 호출될 경우 스택 프레임과 관련된 인스트럭션들은 제어흐름에 의한 로직 과 관련이 없어서 인스트럭션들을 결합 시에 사용하지 않고 인스트럭션 시퀀스를 생성할 수 있다. 이 도면은 app1로 표시한 샘플 코드의 제어블럭과 app2로 표시한 샘플 코드의 제어블럭을 예시하였다. 샘플 코 드 app1과 app2는 동일한 결과를 수행하는 코드이나 이 예에서 app1 샘플 코드는 동일한 코드를 반복하는 반면, app2 샘플코드는 동일한 코드를 반복하지 않지만 동일한 수행을 하도록 fool1이라는 함수가 fool2를 호출하도록 하였다. app2 샘플 코드의 제어블록 예로 하여 설명하면 app2 샘플 코드의 제어블록 시작 전에 스택 프레임을 초기화할 수 있다. (0x100003eb0 ~ 0x100003eb4). 여기서 코드 상의 (pushq %rbp)는 베이스 포인터 저장하는 것을 의미하고, (movq %rsp, %rbp)는 베이스 포인터 에 스택 포인터 저장함을 나타낸다. 그리고 코드 상의 (subq %16, %rsp)는 스택 포인터 위치를 스택 최상단으로 이동하는 것을 나타내는데, 스택은 최상단이 베이스보다 작은 주소를 가지게 된다. app2 샘플 코드상의 제어블럭의 리턴 전에 스택 정리할 수 있다 (0x100003ef9 ~ 0x100003efd). 여기 코드 상의 (addq $16, %rsp)는 스택 포인터를 베이스(바닥)으로 이동시키는 것을 의미하는데 그 결과 스택 의 값을 모두 없앤 효과를 발생한다. 그리고, 코드 상의 (popq %rbp)는 저장했던 이전 베이스 포인터를 다시 복원함을 나타낸다. 따라서, 그 이후에 app1을 호출하면 호출에 의해 그 이전의 스택 프레임에 관련된 인스트럭션들은 제어흐름과 관련이 없으므로, 호출에 의해 인스트럭션을 결합하여 인스트럭션 시퀀스 생성 시에 고려하지 않는다. 이와 같이 스택 프레임과 관련된 함수 분리에 의해 스택 프레임이 조정되는 경우, 즉 스택 프레임과 관련된 인 스트럭션들은 제어흐름에 의한 로직과 관련이 없는 경우 인스트럭션 시퀀스를 생성하는데 고려하지 않고 인스트 럭션 시퀀스를 생성을 생성한다. 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 다른 예를 개시 한다. 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성할 경우 제어흐름 분 석에 따른 그래프의 에지 웨이트(edge weight)를 반영하여 인스트럭션 시퀀스들을 생성할 수 있다. 제어흐름 분석에 따른 그래프의 에지 웨이트(edge weight)를 반영한 그래프는 이하에서 도면에서 비교 예시한다. 도 22은 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 다른 예를 설명하기 위한 도면이다. 여기서 동일한 결과를 수행하는 샘플 코드 app1과 app3을 예시하였다 이 예에서는 왼쪽의 app1 샘플 코드가 나타내는 제어블럭은 동일 로직이나 변수만 다른 코드가 2회 반복되는 구 조를 가지고 있다. 오른쪽의 app3 샘플 코드는 동일한 코드를 반복하지 않고 이를 함수로 변경한 후 2회 호출(NET보완-6-110)하는 경우를 예시한다. 이 도면의 두 샘플 코드의 결과는 동일하지만 app3 샘플 코드를 기반으로 인스트럭션 시퀀스를 생성할 경우 2회 호출되는 제어블록(0x100003ef0)의 인스트럭션은 제어흐름을 분석한 그래프에 2번 추가해서 인스트럭션 시퀀스 를 생성할 수 있다. 이와 같이 제어블럭 내의 인스터력션들을 이용하여 인스트럭션 시퀀스들을 생성할 경우 반복해서 호출되는 인스 트럭션은 제어흐름 그래프에서 에지 웨이트(edge weight)를 반영하여 인스트럭션 시퀀스를 생성할 수 있다. 따 라서, 생성된 인스트럭션 시퀀스에서 다수 호출되는 인스트럭션이 웨이트(weight)로 반영될 수 있도록 할 수 있 다. 제어흐름 분석에 따른 그래프의 에지 웨이트(edge weight)를 반영한 그래프는 이하에서 도면에서 비교 예시한다. 도 23는 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 또 다 른 예를 설명하기 위한 도면이다. 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 제 4의 실시 예 는 다음과 같다. 이 도면에서 예시한 샘플 코드 app1, app2, 및 app3는 위에서 설명한 바와 같다. 샘플 코드 app1는 동일한 코드가 반복 수행되는 코드이고, 샘플 코드 app2는 동일한 코드가 반복되지 않지만 동 일한 수행을 하도록 fool1이라는 함수가 fool2를 호출하도록 한 코드이고, 샘플 코드 app3은 함수 fool2를 2회 호출하도록 한 코드이다. 동일한 로직을 수행하는 코드들을 기반으로 인스트럭션 시퀀스를 생성하는 경우라도 파일마다 오프셋이 모두 다 르기 때문에 파일 내의 함수의 오퍼랜드(operand)에 따라 인스트럭션 시퀀스가 달라질 수 있다. 이 도면에서 예시하는 바와 같이 동일한 함수에 대해 함수의 연산자인 오퍼랜드(operand)가 모두 달라진다. 이 도면의 박스들 안에 값인 오퍼랜드 때문에 사이버 위협 정보의 특징을 나타낼 수 있는 인스트럭션 시퀀스가 영향을 받을 수 있다. 따라서, 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성할 경우 함 수의 오퍼랜드는 제거하고 오피코드(OP-code)만을 이용해 인스트럭션 시퀀스를 생성할 수도 있다. 도 24은 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 또 다 른 예를 설명하기 위한 도면이다. 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 제 5의 실시 예 로서 제어블럭 내에 인스트럭션을 기반으로 인스트럭션 시퀀스를 생성할 경우 단순히 파라미터를 전달하는 인스 트럭션들은 로직 흐름에 잡음으로 동작할 수 있다. 이 도면의 예시한 샘플 코드의 제어블록에서 함수 0x100003ef0는 2번 호출되며 각각 파라미터를 전달하는 과정 을 수행한다. 이렇게 단순히 파라미터 전달에만 관련하는 인스트럭션의 경우 제어흐름을 생성할 때 노이즈만 발생시키고 실제 특징 정보 또는 이에 대응되는 인스트럭션 시퀀스에는 의미 있는 기여를 하지 않으므로 제외한다. 이상에서 개시한 바와 같이 실행파일을 디스어셈블하여 어셈블리 코드를 생성할 때 제어블럭 내에 포함된 인스 트럭션들을 기반으로 사이버 위협 정보의 특징 정보에 대응하는 인스트럭션 시퀀스를 생성하는 예들을 개시하였 다. 위에 예시한 예들은 중복적으로 적용될 수 있기 때문에 위에 설명한 5가지의 예들을 적어도 하나 이상의 예에 따라 인스트럭션 시퀀스를 생성할 수 있다. 도 25은 위의 설명한 예들에 따라 인스트럭션 시퀀스를 생성하는 예를 개시한다. 제어블록 내의 인스트럭션들의 특성, 순서, 및 레퍼런스를 고려하여 결합하면 사이버 위협 정보 등의 특성 정보 를 포함하는 인스트럭션 시퀀스를 생성할 수 있다. 이와 같이 인스트럭션 시퀀스를 생성할 경우 일 예는 제어블럭 내의 인스터력션들의 레퍼런스 관계에 따라 JUMP 함수나 CALL 함수 등 코드 상 분기하도록 하는 브랜치 계열의 함수를 제거하고 제어흐름에 따라 인스트럭션 시 퀀스를 생성할 수 있다. 인스트럭션 시퀀스를 생성하는 다른 일 예는 스택 프레임과 관련된 함수 분리에 의해 스택 프레임이 조정되는 경우 제어흐름에 의한 로직과 관련이 없는 인스트럭션을 제거하고 인스트럭션 시퀀스를 생성할 수 있다. 인스트럭션 시퀀스를 생성하는 또 다른 일 예는 인스트럭션의 제어흐름 그래프에서 에지 웨이트(edge weight)를 반영하여 인스트럭션 시퀀스를 생성하는 것이다. 이를 이용해 생성된 인스트럭션 시퀀스에서 다수 호출되는 인 스트럭션에 대해 제어흐름 분석의 그래프상 웨이트(weight)를 반영하여 인스트럭션 시퀀스를 생성할 수 있다. 인스트럭션 시퀀스를 생성하는 또 다른 일 예는 디스어셈블된 코드에서 오퍼랜드에 의해 오프셋이 달라지므로 함수의 오퍼랜드는 제거하고 오피코드(OP-code)만을 이용해 인스트럭션 시퀀스를 생성할 수 있다. 인스트럭션 시퀀스를 생성하는 또 다른 일 예는 단순히 파라미터 전달에만 관련하는 인스트럭션의 경우 인스트 럭션 시퀀스에는 의미 있는 기여를 하지 않으므로 인스트럭션 시퀀스 생성 시에 이를 제외하고 인스트럭션 시퀀 스를 생성할 수 있다. 이러한 예들을 적어도 하나 이상 적용하면 디스어셈블된 제어블록 내의 제어흐름을 기반으로 사이버 위협 정보 의 특징 정보를 포함할 수 있는 인스트럭션 시퀀스를 생성할 수 있다. 위에서 예시한 샘플 코드 app1, app2, 및 app3에 포함되는 메인 코드(0000000100003f60 <_main>)를 기준으로 인스트럭션 시퀀스를 생성할 수 있다. 생성된 인스트럭션 시퀀스의 코드는 위에서 개시한 바와 같이 정규화 및 벡터화를 수행할 수 있다. 그리고 벡터 화된 내용을 해쉬 코드로 변환할 수 있다. 변환된 해쉬 코드는 사이버 위협 정보의 유닉크(unique)한 특징 정보 를 포함할 수 있다. 해쉬 코드에 포함된 사이버 위협 특징 정보는 위에서 개시한 인공 지능 기법을 이용하여 변 환된 해쉬 코드를 공격 기법과 공격 그룹을 식별할 수 있다. 이 도면에서는 CFG에 대응된 행은, 샘플 코드 app1, app2, 및 app3에 대한 제어흐름 분석에 따른 그래프를 각각 나타낸 것이다. 이 예에서 샘플 코드 app1의 제어흐름 분석에 따른 그래프는 0:100003f60 -> 1:100003ed0으로 표현되고, 샘플 코드 app2의 제어흐름 분석에 따른 그래프는 0:100003f60 -> 1:100003f00 -> 2:100003ed0 로 표현된다. 그리고 샘플 코드 app3의 제어흐름 분석에 따른 그래프는 0:100003f60 -> 1:100003f40 -> 2:100003ef0 로 표현 된다. 여기서, 1:100003f40 -> 2:100003ef0의 제어흐름에는 edge weight 2가 반영되었다.각각의 제어흐름 분석에 따른 그래프는 위에서 예시한 5가지의 예 중 적어도 하나를 적용하여 생성한 것이다. Instruction Sequence에 대응된 행은 샘플 코드 app1, app2, 및 app3에 대한 인스트럭션 시퀀스들을 각각 나타 낸 것이다. 따라서, 샘플 코드 app1, app2, 및 app3가 완전히 동일하지 않더라도 동일한 결과를 수행하는 코드 들이기 때문에 위에 예시한 방식들에 따른 인스트럭션 시퀀스들은 모두 동일하게 나타나는 것을 확인할 수 있다. 마지막 행인 Fuzzy Hash에 대응되는 행은 샘플 코드 app1, app2, 및 app3에 대한 인스트럭션 시퀀스들을 해쉬 코드로 변환한 것이다. 각 샘플 코드의 제어블럭의 해쉬 정보는 특징 정보가 될 수 있다. 이 예에서 알 수 있듯이 샘플 코드 app1, app2, 및 app3는 그 코드는 서로 조금씩 다르지만 사이버 위협 정보의 관점에서 동일한 의미를 가진다. 즉, 샘플 코드 app1, app2, 및 app3의 해쉬 코드들은 동일하며 그에 따른 코드 의 특징 정보가 동일함을 알 수 있다. 도 26는 개시한 사이버 위협 정보 처리 장치의 다른 일 실시 예를 예시한 도면이다. 사이버 위협 정보 처리 장치의 다른 일 실시예는 프로세서를 포함하는 서버, 데이터베이스, 및 인 텔리전스 플랫폼을 포함할 수 있다 데이터베이스는 이미 분류된 악성 코드 또는 악성 코드의 패턴 코드를 저장할 수 있다. 서버의 프로세서는 응용 프로그램 인터페이스(Application Programming Interface) 로부터 수신된 실행 파일을 디스어셈블링하여 디스어셈블된 코드를 획득하는 제1 실행모듈의 수행할 수 있다. 그리고 서버의 프로세서는 상기 디스어셈블된 코드 내 인스트럭션들의 관계에 따른 제어흐름에 기반하여 인스트럭션 시퀀스를 생성을 수행하도록 하는 제 2 실행모듈을 수행할 수 있다. 제2 실행모듈의 수행 과정의 예는 도 19 내지 도 25에 예시하였다. 그리고 서버의 프로세서는 상기 생성한 인스트럭션 시퀀스를 사이버 위협 정보와 관련된 특징 데이터 세 트로 변환하는 제 3 실행모듈을 수행할 수 있다. 특징 데이터 세트는 특징 벡터 데이터와 해쉬 함수가 될 수 있다. 서버의 프로세서는 인공지능엔진을 수행하고 상기 변환된 특정 포맷의 데이터 세트에 기초하여 상 기 저장된 악성코드와 유사 여부를 판단하고 상기 판단에 따라 상기 변환된 특정 포맷의 데이터 세트를 적어도 하나 이상의 정형화된 공격 식별자로 분류하는 제 4 실행모듈을 수행할 수 있다. 제4 실행모듈의 수행 과정의 예는 도 19, 도 20, 도 21, 도 25, 도 26등을 참조하여 설명하였다. 도 27은 개시한 사이버 위협 정보 처리 방법의 다른 일 실시 예를 예시한 도면이다. 실행파일을 디스어셈블한 디스어셈블 코드를 얻는다(S4100). 상기 디스어셈블된 코드 내 인스트럭션들의 관계에 따른 제어흐름에 기반하여 인스트럭션 시퀀스를 생성한다 (S4200). 코드 내 인스트럭션들의 관계에 따른 제어흐름에 기반하여 인스트럭션 시퀀스를 얻는 예는 도 19내지 도 25에 상세히 예시하였다. 상기 생성된 인스트럭션 시퀀스를 사이버 위협 정보와 관련된 특징 데이터 세트로 변환한다(S4300). 상기 생성된 인스트럭션 시퀀스들을 특징 벡터 데이터로 변환한 후에 해쉬 함수 값으로 변환할 수 있다. 인스트 럭션 시퀀스를 포함하는 코드블록을 벡터 데이터와 해쉬 함수 값으로 변환하는 예는 위에서 상세히 개시하였다. 예를 들면, 데이터 변환에 관하여 도 21 내지 도 24의 실시 예가 사용될 수 있다. 인스트럭션 시퀀스를 포함하 는 코드블록을 벡터 데이터와 해쉬 함수 값으로 변환하는 예는 이 실시 예를 참조한다. 상기 사이버 위협 정보와 관련된 특징 데이터 세트를 인공 지능 모델로 학습하여 사이버 위협 정보를 획득한다 (S4400). 사이버 위협과 관련된 특징 정보가 포함된 데이터를 인공 지능 모델에 기반하여 학습하여 공격기법 또 는 공격그룹을 분류하는 예를 위에서 상세히 개시하였다. 예를 들면, 학습 모델과 분류 모델에 관하여 도 25 내지 도 28의 실시 예가 적용될 수 있다. 따라서 사이버 위협에만 관여하는 인스트럭션 시퀀스들만을 추출하여 생성한 코드블록으로부터 특정 공격 식별 자에 관련된 패턴을 식별할 수 있다. 또한 선택된 공격 식별자에 따른 데이터에 기초하여 확률에 기반하여 정확 한 공격 식별자가 결정될 수 있다. 위에서 예시한 바에 따라 공격 그룹도 식별이 가능하다 획득한 사이버 위협 정보는 서버에서 사용자에게 다시 제공할 수 있다. 사용자는 API에 실행파일에 대한 정보를 문의하거나 실행파일을 입력함으로써 그 실행파일과 관련된 구체적인 사이버 위협 정보, 예를 들면 상세한 공격 기법 및 공격그룹 등에 대한 정보를 얻을 수 있다. 위에서는 시스템에 대한 실행파일들을 어셈블리어 영역에서 분석하여 사이버 위협 정보를 처리하는 실시예들을 개시하였다. 이하에서는 비실행형 파일로부터 사이버 위협 정보를 식별하고 처리하는 실시예를 개시한다. 최근에 특히 코로 나 19 팬데믹으로 인해 경제, 사회, 교육 등 모든 활동이 비대면 중심으로 변화되면서 온라인 상업 활동, 재택 근무, 원격 교육 등 수만은 온라인 플랫폼이 확대되고 있다. 따라서 온라인에서 공유되는 비실행형 파일의 수가 늘어났으며 공격자들은 이점을 이용하여 다양한 비실행형 파일을 통한 피싱 공격이나 APT (Advanced Persistent Threat) 공격을 수행하는 경우가 늘고 있다. 그러나 아직까지 일반 사용자들에게 비실행형 악성코드에 대한 경각심도 부족하고, 기존의 안티 바이러스 제품 들은 실행형 파일에 맞춰 개발되었기에 비실행형 악성파일을 잘 탐지하지 못한다. 또한 비실행형 악성 파일을 탐지하더라도 탐지 이유에 대한 설명이 부족한 경우가 대부분이다. 따라서 비실행형 악성 파일에 대한 탐지와 그 탐지 근거의 제시가 필요하다. 이러한 점을 고려하여 비실행형 파일로부터 사이버 위협 정보를 식별하고 획 득하는 실시 예를 이하에서 상세하게 개시한다. 참고로 여기서 비실행형 파일은 파일의 외형적 형식이 비실행 파일을 의미하며 그 파일의 실행을 위해서는 별도 의 실행 프로그램이 필요한 파일을 의미한다. 비실행형 파일을 정확하게 설명하기 위해 도면을 참조하여 설명한 다. 도 28는 비실행형 파일 구조와 그 비실행형 파일의 리더 프로그램을 개념적으로 나타낸 도면이다. 파일의 확장자가 PDF나 DOC 등 문서형태 파일로 대표될 수 있는 비실행형 파일들은 이 도면과 같이 그 파일의 내부에 텍스트, 스크립트, 이미지 등 미디어 파일, 그리고 또다른 실행 파일이나 비실행형 파일을 포함 (embedding)할 수 있다. 이 도면의 예시와 같이 비실행형 파일은 스크립트, 텍스트나 미디어를 포함할 수 있다. 비실행 파일이 실행 파 일을 포함하거나 또 다른 비실행형 파일을 포함할 수도 있다. 비실행형 파일은 해당 파일을 읽을 수 있는 실행 파일(비실행형 파일 리더 프로그램)이 실행되면서 비실행형 파 일을 로드하고 그 내용을 확인할 수 있다. 악성 비실행형 파일의 경우, 리더 프로그램에 의해서 로딩되면서(리 더 프로그램 실행 중) 리더 프로그램이 다음과 같은 작업을 하도록 유도할 수 있다. 악성 비실행형 파일이 실행되면 예를 들어 악성 행위가 포함된 스크립트가 실행될 수 있다. 또는 그 스크립트 실행으로 악성코드 유포지 서버와 연결해서 해당 악성코드 다운로드 후 실행하거나 악성 행위가 포함되고 임베 딩(embedding)되어 있는 실행 파일을 추출 후 실행할 수도 있다. 또한 악성 비실행형 파일이 실행되면 악성 행위가 포함되거나 임베딩되어 있는 비실행 파일을 추출 후 열거나 악성 행위가 포함된, 미디어 파일을 추출 후 열 수도 있다. 이하에서는 비실행형 악성파일을 탐지하고 그에 따른 공격 기법 및 공격 그룹을 식별할 수 있는 실시 예들을 개 시한다. 개시하는 실시 예들은 인공 지능 모델을 활용하여 비실행형 파일에 대해 정상 또는 악성을 분류하거나, 비실행형 파일의 공격 그룹을 식별하거나 또는 비실행형 파일의 공격 행위를 식별할 수 있다. 도 29는 비실행형 파일의 사이버 위협 정보를 얻을 수 있는 실시 예의 블록도를 개시한다. 이 실시 예는 파일분석부, 특징처리부(Feature Fusion), 악성탐지부(Malicious Document Detector), 공격기법분류부(Attack Technique Classifier), 및 공격그룹분류부(Attack Group Classifier)을 포함한다. 파일분석부는 비실행형 파일(unknown Document)를 수신하고 비실행형 파일의 여러 가지 사이버 위협 정보 를 분석할 수 있다. 파일분석부는 제1 분석부, 제2 분석부, 및 제3 분석부을 포함할 수 있고, 각 분석부로 부터 입력된 비실행형 파일의 특징 정보를 분석할 수 있다. 특징처리부는 파일분석부가 분석한 특징 정보를 특징 벡터가 추출되고 추출된 벡터가 악성탐지부 에서 악성 여부가 판단될 수 있도록 적절한 형태로 변환된다. 악성탐지부는 인공 지능 기법을 기반으로 입력된 특징 벡터가 변환된 데이터에 악성 행위가 포함되는지 탐지할 수 있다. 악성탐지부가 입력된 데이터에 사이버 위협 정보가 포함되지 않는다고 판단한 경우 정상 적인 파일(Normal document)로 판단한다 공격기법분류부와 공격그룹분류부는 악성탐지부가 악성으로 탐지한 데이터에 대해 인공 지능 기법을 기반으로 사이버 위협 정보 체계에 따른 공격 기법(예, T1204.001)과 공격 그룹(예, G001)을 각각 분류 할 수 있다. 여기서는 사이버 위협 정보 체계에 따라 비실행형 파일에 포함된 공격 행위가 T1204.001이라는 공격 기법과, 그 공격 행위를 생성한 그룹이 G001이라는 공격 그룹이라는 것을 예시한다. 예시한 블록들은 하드웨어로 구현될 수도 있고 소프트웨어로 구현되어 서버의 프로세서로 각각 실행될 수도 있 다. 이하에서는 예시한 블록도의 각 부분의 상세한 예들을 개시한다. 도 30은 파일의 사이버 위협 정보를 얻을 수 있는 예시도 중 파일분석부에 포함되어 파일의 제1 타입의 분석을 실시하는 예를 개시한 도면이다. 제1 분석부는 입력된 파일 자체를 분석하는데 여기서는 편의상 일종의 정적 분석을 수행하는 것으로 표현 한다. 제1 분석부는 비실행형 파일의 문서 내부에 포함되어 있는 악성 페이로드, 스크립트 등을 추출하고 분석 하고 숨겨져 있는 첨부파일이나 다른 파일로 위장한 악성 데이터의 식별하는 등의 정적 분석을 수행한다. 제1 분석부는 정적특징추출단계, 정적특징처리단계, 및 정적특징변환단계를 수행하는데, 제1 분석부 가 하드웨어적으로 구현된 경우 제1 분석부은 정적특징추출부, 정적특징처리부, 및 정 적특징변환부을 포함할 수 있다. 제1 분석부는 정적 분석을 기반으로 비실행형 파일, 예를 들면 문서 내부에 있는 파일을 분리하고, 분리 된 파일을 분석할 수 있다. 제1 분석부는 정적 분석을 기반으로 비실행형 파일 내의 숨겨진 악성 페이로 드, 이를 실행할 수 잇는 스크립트 등을 추출하고 문서의 형태에 대한 정보를 추출할 수 있다. 예를 들어 정적특징추출부는 비실행형 파일 내부의 URI 정보(URIs), 스크립트(Scripts), 임베딩 파일들 (Embedding files), 행위관련정보(actions), 텍스트 내용(textual contents) 및 문서 메타 데이터(document metadata) 등을 추출할 수 있다. 정적특징추출부는, 예를 들어 임베딩 파일들(Embedding files)에 대해서는 이미지 파일(Images)이나 여러 다른 형식의 첨부파일(Attachments)을 추출할 수 있다. 정적특징처리부는 정적특징추출부가 추출한 정적특징 정보(URIs, Scripts, Embedding files, Actions 등)를 가공하여 정적특징 정보에 맞게 추가 분석 및 처리를 수행할 수 있다. 정적특징처리부는 추출된 정보를 세분화하여 처리하여 공격기법과 공격그룹 식별을 구분할 수 있는 특징 정보에 공격자의 의도 정보를 반영하도록 할 수 있다. 예를 들면 정적특징처리부는 URI 파서로 URI를 파싱하여 URI 메타정보를 얻을 수 있는데, 이를 기반으로 공격자가 2차 감염을 위해 악성 파일을 다운로드하도록 유도하거나, 문서로부터 외부 피싱 웹 사이트에 접속하도록 유도하도록 하는 의도(intuition)를 확인할 수 있다. 정적특징처리부는 추출된 스크립트 분석을 통해 스크립트 메타데이터를 얻을 수 있으며, 이를 기반으로 공격자가 취약점 공격 또는 악성 행위를 위해 어떤 언어 스크립트를 선호하는지에 대한 정보를 얻을 수 있다. 정적특징처리부는 임베딩 파일로부터 숨겨진 페이로드 식별자를 확인하고 임베딩 파일의 패이로드 타입을 얻을 수 있는데, 이를 기반으로 공격자가 악성 패이로드를 은닉하기 위해 어떤 기법을 적용하는지에 대한 정보 를 얻을 수 있다. 또한, 정적특징처리부는 임베딩 파일로부터 첨부된 파일의 타입을 확인하여 실제 파일 타입(true file type)을 확인할 수 있는데, 이를 기반으로 공격자가 문서 내부에 첨부 파일로 어떤 데이터를 포함시키고 어떤 것을 위장시켰는지에 대한 정보를 얻을 수 있다 정적특징처리부는 비실행형 파일 내에 포함된 여러 행위(actions)를 분류하고 행위 메타데이터를 얻을 수 있는데, 이를 기반으로 악성 행위 유발을 위해 어떤 행위나 기법을 사용하는지에 대한 정보를 얻을 수 있다. 이와 같이 정적특징처리부는 추출된 여러 가지 정적분석 정보로부터 공격자 의도 정보를 얻을 수 있다. 그리고, 정적특징처리부는 비실행형 파일 내부에 어떤 파일이 비정상적인 형태로 포함되어 있고 그 파일 이 스크립트 형태인지 등에 대한 정보를 얻을 수 있다. 정적특징변환부은 정적특징처리부가 추출한 이러한 정적특징 정보를 변환시킨다. 예를 들어 정적특 징변환부은 특징처리부가 추출한 정적특징 정보를 기반으로 사이버 위협 정보를 처리할 수 있도록 위에서 설명한 바와 같이 정규화 또는 벡터화시키는 과정을 수행한다. 도 31은 파일의 사이버 위협 정보를 얻을 수 있는 예시도 중 파일분석부에 포함되어 파일의 제2 타입의 분석을 수행하는 예를 개시한 도면이다. 제2 분석부는 비실행형 파일을 동적 분석을 기반으로 분석하여 사이버 위협 정보를 추출할 수 있다. 제3 분석부는 비실행형 파일을 리더 프로그램과 같은 대응되는 프로그램에 실행시켜 실제로 실행 시 발생하는 행위 정보를 추출할 수 있다. 이하에서는 편의상 제2 분석부는 동적 분석 단계를 수행한다고 표현한다. 제2 분석부는 비실행형 파일의 동적 분석을 위해 안전하게 분리된 가상 환경을 구축하여 가상 환경에서 비실행형 파일에 맞는 대응 프로그램을 실행한다. 제2 분석부는 비실행형 파일이 대응 프로그램에서 실행될 경우 발생하는 프로세스에서 시스템 콜을 호출 했을 때 어떤 파라미터를 가지고 행위를 수행하는지 분석할 수 있다. 제2 분석부가 실행단계, 동적특징추출단계 특징변환단계를 수행하는데, 제2 분석부가 하드웨어적으 로 구현된 경우 실행부, 동적특징추출부 및 동적특징변환부를 포함할 수 있다. 실행부의 샌드박스리더(Sandbox Document Reader)는 입력된 비실행형 파일을 가상환경에서 대응 프로그램 으로 실행하도록 한다. 실행부의 시스템콜분석부(System Call Hooking)는 실행된 대응 프로그램에서 파생하는 프로세스에서 특정 시스템 콜을 호출하는지 모니터링하고, 이를 통해 어떤 파라미터로 실행 행위를 하는지 분석할 수 있다. 실행부의 시스템콜분석부(System Call Hooking)는 동적분석을 기반으로 모니터링하는 시스템콜과 그에 대 응하여 추출 가능한 파라미터 데이터를 얻을 수 있다. 예를 들면 실행부의 시스템콜분석부(System Call Hooking)는 프로그램이 실행되면서 Send API가 호출된 경우 그에 대응하는 패킷 데이터 등을 분석하고 네트워크를 통해 어떤 패킷 데이터가 어느 정도 전송되는지 등 에 대한 시스템콜의 파라미터 정보를 얻을 수 있다. 실행부의 시스템콜분석부(System Call Hooking)는 비실행형 파일의 리더 프로그램이 실행하는 시스템콜의 스택을 역으로 추적하면서 그 추적 정보를 분석할 수 있다. 이러한 추적 정보는 시스템콜에 따른 함수의 실행순 서와 그 함수들의 사용 변수 정보를 포함한다. 시스템콜분석부(System Call Hooking)에 대한 상세한 실시 예는 이하에서 다시 상세하게 설명한다. 동적특징추출부는 실행부가 가상환경에서 실행한 결과를 추출하고 수집할 수 있다. 예를 들어 동적 특징추출부는 스크립트가 실행되면서 발생하는 여러 가지 명령어 정보, 리더 프로그램이 실행에 따른 네 트워크 연결로 발생하는 통신 타입, IP 주소, 포트 번호 정보 등을 수집할 수 있다. 동적특징추출부는 리더 프로그램이 실행되면서 다운로드하는 여러 가지 패킷 데이터를 수집하거나, 그 패 킷의 패이로드로부터 대상 파일의 경로나 패킷 내용에 대한 정보를 수집할 수 있다. 다른 예로 동적특징추출부는 파일이 실행되거나 열리면서 실행되는 프로그램 및 그 대상 파일에 대한 정 보를 얻을 수도 있다. 동적특징변환부는 동적특징추출부가 수집하거나 추출한 정보를 변환시킨다. 예를 들어 동적특징변 환부는 동적특징변환부가 추출한 특징 정보를 기반으로 사이버 위협 정보를 처리할 수 있도록 정규 화 또는 벡터화시키는 과정을 수행한다. 도 32은 실시 예에 따른 파일에 대한 제2 타입의 분석에 의해 비실행형 파일의 동적 수행에 의해 추출되는 대상 과 추출된 정보를 예시한 도면이다. 비실행형 파일을 리더 프로그램으로 실행할 경우 프로그램 상 여러 가지 액션이 수행될 수 있다. 이 도면은 수 행된 액션의 카테고리로 스크립트 실행/열기, 서버 연결, 다운로드, 파일 추출, 파일 실행/열기 등의 카테고리 를 예시하였으나, 이외에 수많은 다른 액션이 있을 수 있다. 비실행형 파일의 리더 프로그램 실행으로 스크립트가 실행되는 경우 시스템콜API(System Call API)를 통해 WinExec, System 등의 함수가 실행될 수 있다. 이러한 함수들의 실행으로 커맨드라인 명령어가 실행될 수 있는 데 여기서는 powershell.exe가 실행되는 것을 예시하였다. 비실행형 파일의 리더 프로그램 실행으로 다른 서버가 연결되는 경우 시스템콜API(System Call API)를 통해 Socket가 실행될 수 있는데 여기서는 그에 따라 발생하는 통신 타입의 파라미터로 AF_INFT를 예시하였다. 또한 경우 시스템콜API(System Call API)를 통해 Connect가 실행될 경우 포트 번호를 파라미터로 얻을 수도 있다. 그 밖에 예시한 바와 같이 비실행형 파일을 리더 프로그램으로 실행할 경우, 수행된 액션의 카테고리에 따라 시 스템콜API(System Call API)를 통해 Send, SendTo, Recv, RecvFrom, Fopen, Fwirte, CreateFile, WriteFile, CreateProcess, ShellExecute 등의 함수가 실행될 수 있다. 각각의 시스템콜API(System Call API)의 함수들에 따라 추출될 수 있는 파라미터의 예를 오른쪽 섹션에 예시하였다. 도 33는 파일의 사이버 위협 정보를 얻을 수 있는 예시도 중 파일분석부에 포함되어 파일에 대한 제3 타입의 분 석을 실시하는 예를 개시한 도면이다. 제3 분석부는 비실행형 파일에 대해 실행 준비 단계에서 메모리에 저장된 정보를 근거로 사이버 위협 정 보의 특징을 얻는다. 가상 환경에서 동적 실행을 하기 직전의 메모리 상의 데이터를 분석하는 것이므로 이하에 서는 편의상 제3 분석부은 마일드 동적 분석 단계를 수행한다라고 표현한다. 제3 분석부는 마일드 동적 분석 단계를 수행할 때, 파일 실행에 따른 악성 행위 준비 단계에서 메모리에 포함된 OP-code 및 연산자 정보, 또는 난독화가 해제된 악성 페이로드 데이터를 추출하여 분석할 수 있다. 제3 분석부는 위에서 설명한 동적 분석을 실행하면서 발생하는 파라미터들을 추출하는 것이 아니다. 제3 분석부는 가상 환경에서 동적 실행 직전에 악성 행위가 반드시 수반하는 시스템의 주요 함수들에 대해 일 명 API 후킹(hooking)하도록 하여 해당 함수가 호출되는 경우 프로세스를 중지(suspended)상태로 하고, 그때 메 모리에 로딩된 정보를 추출(dump)하는 것을 의미한다. 이를 위해 제3 분석부은 실행준비 단계, 메모리추출단계, 데이터추출단계, 및 특징변환단계를 수행하는데, 제3 분석부가 하드웨어적으로 분리된 경우 제3 분석부는 실행준비부, 메모리추 출부, 데이터추출부, 및 특징변환부을 포함할 수 있다. 제3 분석부는 악성 행위를 준비하는 단계의 정보를 기초로 하여 악성 패이로드의 데이터를 메모리에서 얻 어 분석할 수 있다. 실행준비단계에서 실행준비부는 사용자 영역에서 비실행형 파일(Target file)과 리더 프로그램 (application)을 준비한다. 실행준비부는 커널 영역에서 해당 리더 프로그램인 애플리케이션이 수행될 경우 수행되는 이벤트를 대비하여 여러 가지 파일 시스템, 네트워크 시스템 또는 메모리를 준비할 수 있다. 그리고 실행준비부는 해당 애플리케이션이 실행 직전에 시스템의 주요 함수들에 대해 API 후킹(hooking) 하도록 API 후킹 리스트 정보를 가지고 실행에 대비한다. 상세한 API 후킹 리스트 정보는 이하의 도면에서 예시 하였다. 메모리추출부는 API 후킹 리스트 상에 함수가 호출되면 프로세스를 중지 상태로 하고 그때 메모리에 저장 된 데이터를 덤핑(dumping)하여 정보를 추출한다. 메모리추출부는 함수의 프로세스 실행 직전의 데이터를 사이버 위협 정보가 될 수 있는 분석 정보를 얻을 수 있다. 데이터추출부는 메모리추출부가 메모리 덤핑하여 얻은 데이터로부터 OP-code, 연산자(operand) 데 이터 및 난독화 해제 데이터(deobfuscated data)를 얻을 수 있다. 예를 들어 데이터추출부는 메모리추출부가 메모리 덤핑하여 얻은 데이터를 디스어셈블 (disassemble)하고, 디스어셈블된 데이터로부터 OP-code, 연산자(operand) 데이터 및 난독화 해제 데이터 (deobfuscated data) 등을 분류할 수 있다. 여기의 데이터추출부는 전체 실행파일이 아닌 API 후킹 리스트 상에 함수들에 대응하는 OP-code, 연산자 (operand) 데이터 및 난독화 해제 데이터 등에 대한 변환 데이터로서 분석 대상 데이터를 얻을 수 있다. 특징변환부는 얻은 OP-code, 연산자(operand) 데이터 및 난독화 해제 데이터(deobfuscated data)등을 기 반으로 사이버 위협 정보를 처리할 수 있도록 정규화 또는 벡터화시키는 과정을 수행한다. 도 34은 실시 예에 따라 제3 분석부가 마일드 동적 분석을 수행할 경우 API 후킹 리스트 정보를 예시한 도면이 다. 예시한 API 후킹 리스트 정보는 왼쪽 열에 API의 범주와 오른쪽 열에 각 API 범주에 포함되어 API 후킹 리스트 에 포함될 수 있는 API를 각각 예시한 것이다 API의 범주로 Window OS Native API, HTML DOM Parser API, VBS Script Engine API를 예시하였다. Window OS Native API 범주에 대해서는 API 후킹에 사용될 수 있는 API 등을 예시하였고, HTML DOM Parser API 범주에 대해서는 7개 API를 예시하였고, VBS Script Engine API 범주에 대해서는 11개 API에 대해 예시하였다. 도 35은 비실행형 파일의 사이버 위협 정보를 얻을 수 있는 실시 예 중 특징처리부를 설명하기 위한 도면이다. 개시한 바와 같이 제1 분석부, 및 제2 분석부는 각각 비실행형 파일에 대해 각각 정적특징정보 및 동적특징정보를 획득하고 분석할 수 있다. 한편 제3 분석부는 가상 환경에서 비실행형 파일과 관련되어 실행되는 애플리케이션의 API 후킹(hookin g)함으로써 그때의 메모리 정보로부터 그 비실행형 파일로 사이버 위협 정보를 획득하고 분석할 수 있다. 개시 한 실시 예에서는 제3 분석부의 분석을 마일드 동적 분석이라고 호칭하였다. 특징처리부는 제1 분석부, 제2 분석부 및 제3 분석부가 각각 추출한 정적특징정보, 동 적특징정보 및 마일드 동적특징정보를 선택적으로 취합하고 처리할 수 있다. 악성탐지부은 특징처리부가 처리한 정보를 기반으로 비실행형 파일이 사이버 위협 정보를 포함하고 있는지 결정할 수 있다. 그리고 공격기법분류부는 악성탐지부가 탐지한 사이버 위협 정보의 공격행위 또는 공격기법을 특정 체계에 따라 상세하게 분류할 수 있다. 공격그룹분류부는 악성탐지부가 탐지한 사이버 위협 정보의 공격행위가 누구에 의해 계획 또는 실 행되는지를 분류할 수 있다. 특징처리부는 정적특징정보, 동적특징정보 및 마일드 동적특징정보 중 하나를 이용하거나 적어도 둘 이상 을 결합한 특징정보를 생성할 수 있다. 특징처리부는 각각 추출된 정적특징정보, 동적특징정보 및 마일드 동적특징정보의 특성에 따라 또는 공격 기법 또는 공격그룹의 분류 모델을 고려하여 추출된 정보를 선택적으로 결합하여 특징정보를 생성한다. 예를 들어 추출된 특징 정보 중 공격기법을 분류하기 위한 특징 정보와 공격그룹을 분류하기 위한 특징 정보와 다르거나 각 특징 정보의 중요도를 달리 평가하여 특징 정보를 결합할 수 있다. 이에 대한 설명은 이하의 도면 에서 상세히 예시한다. 따라서, 특징처리부는 추출된 정적특징정보, 동적특징정보 및 마일드 동적특징정보 중 적어도 하나의 정 보를 선택적으로 또는 결합하여 사용할 수 있다. 예를 들어 정적특징정보와 동적특징정보와 다르게 마일드 동적특징정보만 어셈블리 코드 레벨의 정보를 가지고 있다면, 마일드 동적특징정보를 공격그룹 분류 모델에서 사용하지 않을 수도 있다. 이런 경우 악성탐지부나 공격기법분류부가 정적특징정보, 동적특징정보 및 마일드 동적특징정보 중 모든 특징정보를 사용하여 악성을 탐지하거나 공격기법을 분류하고, 공격그룹분류부는 별도로 정적특징정 보와 동적특징정보를 선택적으로 사용하여 공격그룹을 분류할 수 있다. 이와 같이 추출된 특징정보가 모두 다른 중요도와 특성을 가지고 있으므로 그에 따라 선택하거나 결합된 특징정 보에 기반하여 악성탐지, 공격기법분류 및 공격그룹분류를 각각 수행할 수 있다. 한편, 악성탐지부는 비실행형 파일에 악성 여부를 기계 학습 모델을 기반으로 판단한다. 예를 들어 악성 탐지부는 정적특징정보, 동적특징정보 및 마일드 동적특징정보 중 적어도 하나의 특징정보를 특징처리부 가 처리한 경우, 그 특징 정보에 대응하는 특징 벡터 데이터를 기반으로 악성 여부를 탐지할 수 있다. 특징 벡터 데이터를 기반으로 악성 여부를 판단하는 예는 위에서 상세히 설명하였다. 도 36는 개시한 실시 예에 따라 비실행형 파일에서 추출된 특징 정보의 중요도를 비교한 예시도이다. 이 그래프의 예는 가로축이 특징정보에 따른 인덱스, 세로축이 중요도 스코어를 나타내는데 공격그룹 모델 (Group model)에 따른 특징정보의 인덱스와 공격기법 식별지(TID model)에 따른 특징정보의 인덱스는 서로 다른 특징 인덱스에서 피크 값들 가지고 있다. 이는 위에서 설명한 바와 같이 공격기법을 나타내는 특징정보와 공격그룹을 나타내는 특징정보의 특성이 서로 다름을 의미한다. 따라서, 특징처리부는 이러한 특징 정보의 특성에 따라 각각 악성탐지, 공격기법분류 및 공격그룹분류 시 에 각각 정적특징정보, 동적특징정보 및 마일드 동적특징정보를 다르게 선택하거나 선별적으로 결합하여 탐지모 델 또는 분류모델이 수행되도록 할 수 있다. 도 37은 개시한 실시 예에 따라 공격기법분류부의 분류 모델을 설명하기 위한 예시도이다. 이 도면에서 실시 예에 따른 공격기법분류부가 공격기법을 분류하여 출력한 예를 나타낸다. 개시한 바와 같이 공격기법분류부는 비실행형 파일이 사이버 위협 정보를 포함하여 악성으로 판단된 경우, 특징 처리부가 출력하는 사이버 위협에 대한 특징 벡터 데이터를 기반으로 기계 학습 모델을 수행하여 비실행형 파일 의 공격 기법을 분류한다. 공격기법분류부가 기계 학습 모델을 이용하여 공격 기법을 분류할 때 훈련 데이터의 클래스 레이블(Class label)을 정답지로 하고 이를 기준으로 학습할 수 있다. 이러한 훈련 데이터는, 특징 벡터 데이터인 독립 변수 와, 클래스 레이블인 종속 변수를 포함한다. 일반적으로 종속 변수는 클래스 레이블이 하나의 인덱스 번호를 나타내는 정수 값(single label)이 될 수 있다. 그런데 하나의 파일이 여러 개의 공격 기법을 포함할 수 있으므로, 공격기법분류부는 종속 변수를 1개의 정수 값으로 정의하지 않고 T개 벡터로 정의하는 다중 레이블링(multi label) 기법을 사용할 수 있다. 즉, 공격기법분류부는 특징벡터 데이터를 입력받고, 다중 레이블링 분류로서 공격 기법에 대응되는 이진 벡터로 분류할 수 있다. 공격기법분류부는 다중 출력 분류 모델로서 각 클래스 레이블에 대한 이진 분류 모델을 학습하여 분류 가능한 공격 기법 개수인 T개 만큼 분류 모델을 생성할 수 있다. 설명한 바를 간단히 수식으로 표현하면, T차원 벡터인 예측값 y와 i번째 공격기법 분류모델 fi 의 입력 벡터 x 에 대한 예측 값 oi는 다음과 같이 정의될 수 있다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "종속 변수인 클래스 레이블은 단일 레이블로 분류하면 T1059.005로 식별되는 공격기법이나 설명한 다중 레이블 링으로 분류하면 공격기법 식별자 T1059.005, T1564.007, T1204.002에 대해 [1, 1, 0]와 같은 다차원 벡터로 표시될 수 있다. 그리고 공격기법분류부는 이 도면의 하단에 표시한 바와 같이 3개의 공격기법에 대한 확률로 출력할 수 있다. 도 38는 개시한 예에 따라 비실행형 파일에 대해 여러 분석 기법을 선택적 결합하여 식별한 공격기법을 예시한 도면이다. 이 도면에서 각 공격기법의 식별자(기법ID), 공격기법의 명칭 및 각 공격기법의 설명을 예시하였다. 예를 들면 공격기법 식별자 T1059.001의 명칭은 Command and Scripting Interpreter: PowerShell이고, 이 공격 기법은 PowerShell 스크립트를 이용하여 악성행위를 수행하는 비실행형 파일의 공격기법을 의미한다 위에서 예시한 공격기법 식별자 T1059.005의 명칭은 Command and Scripting Interpreter: Visual Basic이고, 이 공격 기법은 Visual Basic 프로그래밍 언어를 이용하여 악성행위를 수행하는 비실행형 파일의 공격기법을 의 미한다. 도 39는 개시한 실시 예에 따라 공격그룹분류부의 분류 모델을 설명하기 위한 예시도이다. 공격그룹분류부는 도 27 내지 도 28에서 예시한 실시예와 다르게 분류 모델에 기반하여 공격그룹을 분류할 수 있다. 공격그룹분류부는 특징처리부가 출력하는 특징벡터 데이터를 기반으로 공격행위를 의도한 공격그룹을 분류할 수 있다. 이러한 클러스터링 일 예로 공격그룹분류부는 특징벡터 데이터에 기초하여 클러스터링 분석을 수행하고 유사한 성격을 포함하는 데이터를 하나의 그룹으로 그룹핑할 수 있다. 공격그룹분류부는 비실행형 파일에서 추출된 문서의 구조, 내용, 공격행위 첨부파일, 악성 데이터의 형태 등에 따라 클러스터링한 그룹들에 대해 클러스터링 식별정보를 각각 부여할 수 있다. 그리고 공격그룹분류부는 부여한 클러스터링 식별정보(또는 그룹핑식별정보)에 따라 학습데이터를 디시전 트리 (Decision Tree) 모델로 학습하고 클러스터링한 그룹들을 분류하도록 할 수 있다. 이 도면의 예는 클러스터링 식별정보(또는 그룹핑식별정보)에 따라 그룹들이 어떤 특징으로 구분되는지 분류하 는 디시전 트리를 예시한다. 가장 위의 박스는 루트 노드를 나타낸다. 클러스터링 식별정도를 가진 루트 노드가 비실행형 또는 실행형 파일 이 포함하는 여러 가지 특징에 따라 디시전 노드에서 서브 노드들로 순차적으로 분리(splitting)되어, 학습된 의사 결정 트리 모델의 트리 구조를 보일 수 있다. 여기서 디시전 노드와 서브 노드들도 각각 박스 형태로 나타내었다. 공격그룹분류부가 공격그룹을 분류할 경우, 클러스터링과 그룹에 따른 그룹프로파일링 정보를 얻을 수 있다. 예 를 들어 공격그룹분류부는 문서 내부의 텍스트의 언어, 문서 내부 컨텐츠의 종류, 문서 내부에 특정 스트립트를 포함하는지, 또는 문서 실행 시 자동을 수행되는 액션이 포함되는지 등의 여러 가지 요건을 포함하는 그룹프로 파일링 분석 정보를 제공할 수 있다. 이 도면의 예는 공격그룹분류부가 트리 구조 기반에 따라 그룹을 분류하는 예를 나타내며 6번째 분기를 통해 마 지막 리프 노드(leaf node)들은 그룹들을 서로 구분할 수 있는 분류 모델을 예시한다. 이 트리 노드의 마지막 리프 노드(leaf node)들은 그룹을 구분하는 그룹 프로파일링 정보가 될 수 있다. 예를 들어 문서의 텍스트가 영어인지, 메타데이터가 포함되고 길이가 어느 것인지, 또는 컨텐츠를 포함하는지 등의 그룹을 구분하는 프로파일링 정보가 될 수 있다. 예를 들면 그룹 프로파일링 정보는 문서 내부에 텍스트가 영어, 문서 내부에 미디어 컨텐츠가 없음, 문서 내부에 자바스크립트가 포함됨, 문서 실행 시 자동으로 수행되는 액션 기능이 있음 등의 정보를 포함할 수 있다. 이하에서는 위에서 개시한 동적분석 중 시스템콜분석부(System Call Hooking)의 상세한 실시 예를 개시한다. 위 에서 개시한 바와 같이 정적분석특징을 기반으로 비실행형 파일의 악성여부를 판단하는 경우가 있을 수 있다. 그러나 정적분석특징만으로는 외 악성 행위를 포함하는 비실행형 파일인지 또는 어떻게 악성 행위가 발생하는지 상세한 설명을 제공하기 힘든 경우가 많다. 따라서, 리더 프로그램을 실행하여 비실행형 파일을 로딩하면 악성 행위가 발생하는 과정을 정확하게 파악하고 그 설명을 제공할 수 있다. 비실행형 파일에 관련된 리더 프로그램이 실행되면 그 리더 프로그램은 운영체제가 제공하는 시스템콜의 조합에 따라 동작을 수행한다. 리더 프로그램이 윈도우 운영체체에서 실행되는 경우 다음과 같은 시스템콜 등이 사용될 수 있다. 도 40은 위에서 설명한 비실행형 파일의 리더 프로그램 실행과 시스템콜을 예시한 도면이다. 비실행형 파일은 스크립트, 미디어파일, 실행파일, 다른 비실행형 파일, 텍스트 등을 포함할 수 있다. 이 비실 행형 파일은 대응되는 리더 프로그램에 의해 실행될 수 있다. 리더 프로그램이 윈도우 운영체제에서 실행된다면 설명한 바와 같이 비실행형 파일의 포함된 파일에 따라 이 도면에서 예시한 여러 가지 시스템콜이 사용될 수 있 다. 예를 들어 비실행형 파일 내에 스크립트가 실행될 경우 WinExec, CreateProcess, ShellExecute의 시스템콜이 사용되고, 서버가 연결될 경우 Socket, connect 등의 시스템콜이 사용된다. 비실행형 파일 실행에 의해 다운로 드 액션이 수행될 경우 send, sendto, recv, recvfrom 등의 시스템콜이 사용될 수 있다. 비실행형 파일 실행에 의해 파일 추출될 경우 fopen, fwrite, CreateFile, WriteFile 등의 시스템콜이, 파일 실행될 경우 WinExec, CreateProcess, system 등의 시스템콜이, 파일 열기 동작이 수행될 경우 ShellExecute, system 등의 시스템콜 이 각각 사용될 수 있다. 그런데 리더 프로그램이 호출하는 이러한 시스템콜들은 그 시스템콜이 호출될 경우 후킹(hooking)(도면상 A 지 점으로 표시)이 가능하다. A 지점에서 시스템콜을 후킹할 경우 각 시스템콜에 전달되는 파라미터 값들이나 메모리 값을 덤핑(dumping)하여 얻을 수 있다. 여기서는 윈도우 운영체제에서만 예시하였으나 모바일 운영체제나 리눅스 운영체제 등 다른 운영체제 상에서도 동일한 실시 예가 적용될 수 있다. 도 41은 실시 예에 따라 프로그램 코드상 시스템콜을 후킹하는 예를 설명하기 위한 도면이다. 이 도면에서 명령어 send의 경우 예시한 바와 같은 함수 시그너처를 포함할 수 있다. 이 프로그램 코드 상에서 위 명령어에 따라 전송하는 정보는 [buf]와 [len]의 메모리 데이터를 덤핑함으로써 확 인할 수 있다. 이와 같이 비실행형 파일의 리더 프로그램이 실행되는 시스템콜에 따라 전달되는 파라미터 값 및 그 메모리 값 을 덤핑하면 악성 행위가 어떤 동작을 유발시키고 어떤 정보가 이용되는지 확인할 수 있다. 도 42은 실시 예에 따라 동적 분석을 통해 사이버 위협 정보를 추적할 수 있는 예를 개시한다. 실시 예는 특정 운영체제 상의 리더 프로그램이 시스템콜을 사용할 경우 그 후킹 시점에서 리더 프로그램의 스 택 트래이스(Stack Trace) 정보를 생성할 수 있다. 이 도면의 예시는 윈도우 운영체제에서 시스템콜 WinExec을 후킹한 후 생성한 스택 트래이스 정보를 통해 악성 행위의 순서와 관련 변수들에 따른 악성 행위 내용을 얻는 과정을 나타낸다. 마지막 단계인 WinExec 시스템콜이 후킹된 시점에서 스택 트래이스를 예시하면 다음과 같다. 생성한 스택 트래 이스 정보에 따르면 WinExec 시스템콜과 관하여 그 이전에 함수 main -> find_lastest_target -> get_script 순으로 호출된 것임을 알 수 있다. 이 도면상의 함수를 포함하는 박스의 오른쪽에 각 함수가 사용하는 지역변수를 나타내었다. 예를 들면, find_lastest_target 함수는 지역변수로 count와 targets을 사용한다. 마지막에 get_script 함수에서 WinExec 시스템콜이 호출되었다. 이에 따라 악성 행위가 발생한 경우 스택 트래 이스 정보를 이용하여 이에 대한 구체적인 메커니즘을 설명할 수 있다. 즉 스택 트래인스 정보 상의 시스템콜과 관련된 호출함수의 역순에 따라 다음과 같은 설명이 제공될 수 있다. 시스템콜 WinExec을 통해 의심스러운 명령어 lpCmdLine을 실행하려고 함 리더 프로그램을 통해 main -> find_lastest_target -> get_script 순으로 함수가 실행됨 각 함수의 지역변수는 다음과 같이 설정되며 지역변수에 대한 설명은 다음과 같음 (a) main: target_list - 지역변수의 설명 (b) find_lastest_target: count - 지역변수의 설명 targets - 지역변수의 설명 (c) get_script: script_src - 지역변수의 설명 cmd - 지역변수의 설명 실시 예에 따르면 비실행형 파일이 리더 프로그램에서 실행되어 악성 행위가 발생될 경우, 리더 프로그램이 운 영체제 상의 시스템콜을 후킹한 후, 해당 시스템콜과 관련된 함수들을 순서와 그 함수들의 변수를 이용하여 악 성 행위에 대한 구체적인 메커니즘을 제공할 수 있다. 도 43는 개시한 사이버 위협 정보 처리 장치의 다른 일 실시 예를 예시한 도면이다. 사이버 위협 정보 처리 장치의 다른 일 실시예는 프로세서를 포함하는 서버, 데이터베이스, 및 인 텔리전스 플랫폼을 포함할 수 있다 데이터베이스는 이미 분류된 악성 코드 또는 악성 코드의 패턴 코드를 저장할 수 있다. 서버의 프로세서는 응용 프로그램 인터페이스(Application Programming Interface) 통해 수신된 비실행형 파일을 수신할 수 있다. 서버의 프로세서는 API를 통해 수신한 비실행형 파일의 사이버 위협과 관련된 정적특징정보를 분석하여 추출하는 제1 특징분석모듈의 수행할 수 있다. 제1 특징분석모듈이 수행하는 정적특징정보의 분석에 대한 상세한 예는 도 30 등에 기술하였다. 서버의 프로세서는 API를 통해 수신한 비실행형 파일의 사이버 위협과 관련된 정적특징정보를 분석하여 추출하는 제2 특징분석모듈의 수행할 수 있다. 제2 특징분석모듈이 수행하는 동적특징정보의 분석에 대한 상세한 예는 도 31, 도 32, 도 40 내지 도 42 에 상세히 개시하였다. 제2 특징분석모듈가 동적특징정보의 분석할 경우, 비실행형 파일의 리더 프로그램이 그 운영체제에 요청 하는 시스템콜을 후킹함으로써, 그때 발생한 메모리 데이터를 덤프하여 사이버 위협 정보를 얻을 수 있다. 제2 특징분석모듈은 시스템콜을 후킹 직전에 호출된 함수의 순서와 그 함수에 대응되는 파라미터로부터 악성 행위에 대한 메커니즘 정보를 얻을 수 있다. 서버의 프로세서는 API를 통해 수신한 비실행형 파일의 사이버 위협과 관련된 마일드 동적특징정보를 분 석하여 추출하는 제3 특징분석모듈의 수행할 수 있다. 제3 특징분석모듈이 수행하는 마일드 동적특징정보의 분석에 대한 상세한 예는 도 33 및 도 34에 상세히 개시하였다. 제3 특징분석모듈은 비실행형 파일을 수행하는 애플리케이션 시스템의 주요 함수들에 대해 API 후킹 (hooking)하도록 하여 해당 함수가 호출되는 경우 프로세스를 중지(suspended)상태로 하고, 그때 메모리에 로딩 된 정보를 추출(dump)할 수 있다. 제3 특징분석모듈는 그 메모리의 데이터를 디스어셈블하여 OP-code, 연산자(operand) 데이터 및 난독화 해제 데이터(deobfuscated data)를 얻고, 얻은 데이터에 기초하여 사이버 위협 정보에 관련된 특징 정보를 얻을 수 있다. 서버의 프로세서는 제1 특징분석모듈, 제2 특징분석모듈, 제3 특징분석모듈이 분석 한 사이버 위협과 관련된 특징 정보들을 선택적으로 결합하여 사이버 위협 정보와 관련된 특징 데이터로 결합하 여 생성하는 특징처리모듈을 수행할 수 있다. 특징처리모듈의 상세한 실시 예는 도 35에 상세히 개시하였다. 서버의 프로세서는 특징처리모듈가 처리한 사이버 위협 정보의 특징 정보에 기반하여 API를 통해 수신한 비실행형 파일에 악성 행위가 포함되는지 탐지하는 악성탐지모듈을 수행할 수 있다. 서버의 프로세서는 악성탐지모듈가 수행한 결과에 따라 비실행형 파일에 악성 행위가 포함된 경우 AI 엔진을 수행하여 악성 행위의 공격기법과 공격그룹을 분류하는 분류모듈를 수행할 수 있다. 분류모듈이 분류하는 비실행형 파일의 공격기법과 공격그룹에 대한 정보를 생성하는 상세한 실히 예는 도 36 내지 도 39에 상세히 개시하였다. 도 44은 개시한 사이버 위협 정보 처리 방법의 다른 일 실시 예를 예시한 도면이다. 비실행형 파일을 입력받고 상기 입력된 비실행형 파일의 사이버 위협과 관련된 적어도 하나의 특징 분석을 수행 한다(S4500) 비실행형 파일의 사이버 위협과 관련된 정적특징정보, 동적특징정보, 마일드 동적특징정보를 각각 수행하는 하 는 예들을 개시하였다. 정적특징정보의 분석에 대한 상세한 예는 도 30에, 동적특징정보의 분석에 대한 상세한 예는 도 31, 도 32, 도 40 내지 도 42에 각각 예시하였다. 그리고 마일드 동적특징정보의 분석에 대한 상세한 예는 도 33 및 도 34에 상세히 개시하였다. 적어도 하나의 특징분석에 따른 분석정보들을 선택적으로 결합한 특징 정보에 기반해 비실행형 파일에 악성 행 위가 포함되는지 탐지할 수 있다(S4600). 비실행형 파일에 악성행위가 포함된 경우 공격기법에 대한 분류정보와 공격그룹 분류 정보를 생성할 수 있다 (S4700). 비실행형 파일의 공격기법과 공격그룹에 대한 정보를 생성하는 상세한 실히 예는 도 36 내지 도 39에 상세히 개시하였다. 위와 같이 분석된 비실행형 파일의 사이버 위협 정보를 사용자에게 제공한다(S4800). 따라서 개시한 실시예에 따르면 동일한 결과를 행하는 프로그램이라고 하더라도 함수들을 포함하는 프로그램의 로직(logic)에 따라 또는 프로그램의 로직의 변화가 없더라도 함수들이 분리되는 등 다르게 활용되는 경우라도 공격기법과 공격그룹에 대한 사이버 위협 정보를 정확하게 제공할 수 있고 악성 코드의 변종에 대응할 수 있다. 실시예에 따르면 비실행형 파일에 악성행위가 포함되는 경우라도 이를 정확히 탐지하고 그에 따른 공격 기법과 공격 그룹에 대한 사이버 위협 정보를 제공할 수 있다. 이하에서는 사이버 위협 정보 처리 장치 및 그 방법의 실시 예에 따라 웹페이지(web page)를 모니터링하고 악성 행위나 정보를 포함하는 웹페이지를 식별하고 웹페이지의 구성하는 구성요소가 악성 행위나 정보를 포함하는지 식별할 수 있는 예들을 개시한다. 도 45은 실시 예에서 웹 페이지를 정보를 입력받거나 수집하고 이를 기반으로 악성 정보를 식별하는 예를 개시 한다. 실시 예에 따른 사이버 위협 정보 처리 장치 또는 그 방법은 월드 와이드 웹(World Wide Web, 이하에서는 간단 히 web page로 기술)을 입력받거나 수집한다. 실시 예는 수집된 웹페이지를 탐색하고 웹페이지가 특정 악성 행 위를 발생시키는지를 분석하고 이를 사용자에 대한 사이버 위협 정보를 제공할 수 있다. 이 도면에서 개시하는 사이버 위협 정보 처리 장치의 실시 예는 데이터수집부 및 분석탐지부를 포 함한다. 사이버 위협 정보 처리 방법의 실시 예로서 기술하면, 실시 예는 데이터 수집 단계 및 분석 및 탐지지 단계를 포함한다. 데이터수집부는 웹수집부(Web Crawler) 및 데이터번들부(Data Bundle)를 포함할 수 있다. 웹수집부(Web Crawler)는 웹 크로링(Web Crawling)을 통해 입력된 웹페이지의 URL과 연관된 정보를 수집 할 수 있다. 웹수집부(Web Crawler)는 웹페이지의 URL과 연관된 모든 정보를 수집하고 빠르게 처리하기 위해 수집하기 위해 페이지의 복사본을 생성하거나 생성된 페이지를 인덱싱한다. 실시 예의 웹수집부(Web Crawler)는 대용량 URL 입력 데이터를 병렬 프로세싱으로 빠르게 처리할 수 있다. 예를 들어 웹수집부(Web Crawler)는 하나의 스레드(thread)에서 입력된 URL과 관련된HTML 정보, 웹페이지 내 자바스크립트(javascript) 정보, 이미지 등 미디어 파일 정보, 웹페이지가 배포하려는 여러 가지 파일 등에 대한 정보를 빠르게 병렬적으로 동시에 처리할 수 있는데 이애 대한 상세한 예는 이하에서 개시한다. 데이터번들부(Data Bundle)는 웹수집부(Web Crawler)가 병렬적으로 처리한 여러 가지 정도들을 묶 어 그룹핑하여 출력할 수 있다. 분석탐지부는 데이터번들부(Data Bundle)가 수집하여 처리한 데이터 묶음에서 악성 행위를 포함한 데이터를 분석하고 탐지할 수 있다. 이를 위해 분석탐지부는 안티바이러스부(AntiVirus), 난독화해 제부(Deobfuscator) , 맬웨어탐지부(YARA) , 데이터파서, AI엔진 및 자료제공부 (Report)를 포함할 수 있다. 예를 들어 안티바이러스부(AntiVirus)는 수집된 웹데이터는 분석하고 수집한 데이터에 대해 안티바이러스 (AntiVirus)기반의 악성코드 식별, 예를 들면 HTML 코드를 식별할 수 있다. 난독화해제부(Deobfuscator) 는 데이터번들부(Data Bundle)가 출력하는 데이터가 난독화된 경우 난독화를 해제할 수 있다. 맬웨어탐지부(YARA) 는 안티바이러스부(AntiVirus)가 분석하여 식별한 악성 코드 또는 난독화해제 부(Deobfuscator) 가 출력하는 데이터에 대해 일정한 규칙에 따른 패턴이나 시그니처를 포함한 맬웨어, 즉 공격 도구나 공격자의 시그니처 패턴이 있는지 탐색할 수 있다. 예를 들면 맬웨어탐지부(YARA) 는 입력받은 데이터에 대해 YARA 등의 규칙에 따라 맬웨어 탐지와 분류할 수 있다. 데이터파서는 난독화해제부(Deobfuscator) 의 난독화 해제에 따라 데이터를 파싱할 수 있다. AI엔진은 기계 학습 모델에 기초하여 맬웨어탐지부(YARA) 나 데이터파서가 출력한 데이터에 대해 악성 또는 정상여부를 판별할 수 있다. 개시하는 실시 예의 웹수집부(Web Crawler)는 병렬적으로 웹페이지와 관련된 데이터를 수집하여 처리할 수 있다. 그리고 분석탐지부는 위와 같이 3개의 탐지 단계(안티바이러스탐지, 시그니처에 기반한 맬웨어 탐지 및 AI 기반의 탐지)에 따른 탐지 엔진을 함께 사용함으로써 웹페이지가 포함하거나 연관된 데이터에 대한 악성 여부를 식별할 수 있다. 따라서, 실시 예는 웹페이지 데이터에 대해 빠르게 모니터링하고 정확하게 악성 여부를 식별할 수 있다. 도 46는 실시 예에 따른 웹수집부(Web Crawler)의 동작을 예시한 도면이다. 이 도면의 예와 같이 웹수집부(Web Crawler)는 하나의 프로세서에서 여러 개의 스레드를 병렬적으로 처리하면서 웹페이지의 데이터를 수집할 수 있다. 이 도면의 예는 웹수집부(Web Crawler)가 4개의 프로세스를 수행하면서 각각 서로 다른 웹페이지들에 관련된 데 이터를 병렬적으로 수집하는 예를 나타낸다. 프로세스 #1, 프로세스 #2 프로세스 #3 , 및 프로세스 #4는 각각 다른 웹페이지의 주소 정보, 예를 들면 URL 정 보를 입력받을 수 있다. 이 도면의 예에서 프로세스 #1이 특정 웹페이지의 주소 정보(이 예에서는 www.kisa.or.kr)를 입력 받은 경우, 프로세스 #1의 제1 수집 및 분석 스레드는 입력된 웹페이지의 주소 정보 및 상기 웹페이지의 하위 뎁스(depth) 들에 따른 웹페이지 주소 정보를 다른 수집 및 분석 스레드에 분배할 수 있다. 이 도면의 예는 100개의 수집 및 분석 스레드들이 동시에 웹페이지와 그 하위 웹페이지 정보를 수집하는 경우를 예시한다. 병렬로 동작하는 복수의 수집 및 분석 스레드들은 해당 스레드 내에서 각 웹페이지 데이터를 수집하 고 분석하는 인메모리 프로세싱(In-memory processing)을 수행할 수 있다. 각 스레드는 예를 들면 원형큐 방식인 dequeue (DeQ)와 enqueue(EnQ) 방식으로 순차적으로 웹페이지와 뎁스에 따른 데이터를 입력받고 처리할 수 있다. 따라서 병렬로 동작하는 복수의 수집 및 분석 스레드들 중 마스터 또는 제 1 스레드는 입력된 웹페이지의 뎁스 정보에 따라 다른 스레드들에 웹페이지의 뎁스 정보에 따라 웹페이지 분석 작업을 할당할 수 있다. 수집 및 분석 스레드의 수집기는 큐 요청에 따른 웹페이지를 즉시 접속하여 인메모리 내 수집기에 웹페이지 데 이터를 로딩하여 그 웹페이지 데이터의 HTTP 요청(request)할 수 있다. 그리고 수집 및 분석 스레드가 해당 웹 페이지 데이터의 HTTP 응답(response)을 수신하면 이를 인메모리 프로세싱 내의 분석기에서 분석할 수 있다. 이 경우 수집 및 분석 스레드의 분석기가 수신한 HTTP 응답에 하위 웹페이지의 정보가 포함된 경우, 하위 웹페 이지의 정보를 다른 스레드에 즉시 분배하여 유사한 웹페이지 데이터 분석이 수행되도록 할 수 있다. 이와 같이 입력된 웹페이지의 URL이 그 내부에 다른 URL을 포함할 수 있으며, 포함된 뎁스 정보에 따라 추가 페 이지를 방문하여 분석을 수행할 수 있다. 이 예에서는 프로세스 #2 프로세스 #3 , 및 프로세스 #4을 예시하였는데 유사하게 다른 프로세스들도 유사한 방 식으로 연산을 수행할 수 있다. 도 47은 개시한 실시 예의 뎁스 정보에 따라 웹페이지 데이터를 저장하고 관리하는 예를 개시한다. 이 도면에서 입력된 URL에 따른 웹페이지와 뎁스에 따라 링크된 웹페이지 관계를 예시한다. 메인 웹페이지와 그 하위 웹 페이지들에 대해 각각 뎁스 레벨(Depth level)는0, 1, 2로 표시하였다. 이 예에서 뎁스 레벨 0인 메인 웹페이지는 그 내부에 여러 가지 링크나 레퍼런스, 또는 스트립트 파일 등을 포함할 수 있 다. 뎁스 레벨 1의 웹 페이지는 메인 웹페이지의 상기 링크와 연결된 HTML 파일이거나 상기 스트립트 파일에 의해 각각 링크된 파일일 수 있다. 이 예에서 뎁스 레벨 1의 HTML 파일은, 상기 메인 웹페이지의 링크와 연결되어 제1자바(JS) 스트립트 파일의 링 크 정보와 이미지 파일(예, logo.png)의 링크 정보를 포함한다. 그리고 이 예에서 뎁스 레벨 1의 자바 스트립트 파일은 메인 웹페이지의 스트립트 파일과 링크된다. 다시 뎁스 레벨 2의 웹페이지는 뎁스 레벨 1의 HTML 파일에 링크된 제1자바(JS) 스트립트 파일과 이미지 파일을 포함한다. 이와 같이 실시 예는 메인 웹페이지의 URL 정보가 입력되면 이와 연결된 링크 회수에 따른 뎁스 정보의 URL 정 보를 저장하고 관리할 수 있다. 이 경우 실시 예는 URL 정보를 정규화할 수 있다. 실시 예는 RFC 3492에 따른 퓨니코드(Punycode) 기법 등을 사용하여 유니코드 문자열의 호스트 이름에서 허용된 문자만으로 인코딩하는 방식으로 웹페이지와 링크된 웹페이지를 링크에 따라 정규화하고 저장하고 관리할 수 있 다. 도 48는 실시 예에 따라 복수의 단계들 또는 레이어들의 분석에 따라 웹페이지 데이터의 악성 여부를 판단하는 예를 개시한다. 실시 예에 따라 웹수집부가 수집한 웹페이지의 데이터는 데이터번들부에서 임시 저장되었다가 분석탐지부 의 여러 단계들 또는 레이어들의 분석에 따라 악성 여부가 판단된다. 이 도면의 예에서 웹수집부(Web Crawler)는 웹페이지 내에 여러 가지 타입의 데이터를 분석하고 수집할 수 있다. 이 예에서는 여러 가지의 파일 타입들 중 HTML 파일, 자바 스크립트(JS) 파일, VB 스크립트(VBS) 파일, EXE실행 파일 등을 수집한 경우를 예시하였다. 웹수집부(Web Crawler)가 수집한 웹페이지 내의 여러 타입의 데이터는 데이터번들부에 저장될 수 있는데 위에서 개시한 예의 데이터번들부의 일종으로 메모리 버퍼를 예시하였다. 메모리 버퍼에 저장된 여러 타입의 데이터는 여러 레이어에서 악성 여부가 판단될 수 있다. 예를 들면, 안티바이러스부(AntiVirus)는 데이터의 패턴을 기반으로 이미 알려진 사이버 위협 정보에 대 해 탐지를 수행할 수 있다. 안티바이러스부(AntiVirus)는 기존에 알려진 안티바이러스 엔진 기반으로 알 려진 웹 데이터, 예를 들면 HTML 악성 코드를 식별할 수 있다. 난독화해제부(Deobfuscator) 는 메모리 버퍼에 저장된 데이터 중 난독화가 된 데이터에 대해서는 난독화 해제를 수행한다. 예를 들어 웹페이지 데이터 내에 난독화된 자바스크립트가 있다면 이를 난독화 해제할 수 있다. 맬웨어탐지부(YARA) 는 메모리 버퍼에 저장되어 난독화가 해제되거나 또는 안티바이러스부 (AntiVirus)로부터 전달받은 데이터에 대해 패턴 기반의 악성 행위 탐지를 수행한다. 맬웨어탐지부(YARA) 는 예를 들어 YARA rule 등에 따라 패턴 기반으로 웹페이지 내 데이터를 탐지하고 그 데이터 내 악성 및 공격 도구를 식별하고, 공격자의 시그니처 패턴을 식별할 수 있다. AI엔진는 AI 기반으로 맬웨어탐지부(YARA) 가 전달하는 데이터에 대해 AI 알고리즘을 기반으로 해 당 데이터가 악성인지 정상인지 판단할 수 있다. 개시한 예와 같이 수집된 웹페이지 내 데이터를 여러 단계와 레이어들에 걸쳐 분석함으로써 웹페이지 데이터에 대해 더 정확한 사이버 보안 위협을 탐지하고 분석할 수 있다. 한편 웹페이지에 포함된 EXE 파일과 같은 실행파일의 경우, 도 16 내지 도 32 또는 도 33 내지 43에서 기술한 바와 같은 방식으로 악성 여부, 공격 기법 및 공격 그룹을 식별할 수 있다. 웹페이지에 포함된 비실행파일의 경우, 도 44 내지 60에서 기술한 바와 같은 방식으로 악성 여부, 공격 기법 및 공격 그룹을 식별할 수 있다. 실시 예는 수집한 웹페이지에 악성 행위가 탐지된 경우, 자료 확보를 위해 해당 웹페이지의 기록 데이터를 사용 자나 관리자에게 제공하고 저장할 수 있다. 예를 들어 실시 예는 특정 웹페이지에 악성인 데이터가 탐지된 경우 그 웹페이지의 HTTP Archive (HAR) format 파일을 저장할 수 있다. 그러면 관리자 또는 보안 담당자는 저장된 웹페이지의 HTTP Archive (HAR) format 파일 로부터 로그데이터 등을 포함한 추가 분석을 수행하고 악성 탐지의 근거 자료를 확보할 수 있다. HTTP Archive (HAR) format 파일에 근거하여 사용자에게 웹페이지의 모니터링 결과를 제공하는 예는 아래에서 예시한다. 도 49는 실시 예에 따라 웹페이지 데이터를 분석하고 탐지한 정보를 제공하는 개념을 예시한다. 위에서 개시한 바에 따라 웹수집부의 웹페이지 크롤링과 분석탐지부의 웹페이지의 데이터 분석 및 악성 탐지가 순차적으로 수행될 수 있다. 웹페이지의 데이터의 악성 탐지 결과 정상으로 판별된 경우, 지속적으로 다른 웹페이지를 크롤링하여 웹페이지 데이터를 수집한다. 그리고 탐지 결과 악성으로 판별된 경우 해당 웹페이지의 재방문을 통해 관련 웹페이지 데 이터를 HTTP Archive (HAR) format 파일을 저장할 수 있다. HTTP Archive (HAR) format 파일은 웹 브라우저와 사이트의 상호작용을 로그데이터를 기록하는 파일이다. 따라 서 HTTP Archive (HAR) format 파일 내에 기록된 데이터 목록에는 그 웹페이지의 각종 리소스 파일, HTTP 요청 및 응답 기록 및 웹페이지와 관련된 스크립트 파일의 기록이 모두 포함된다. 실시 예는 사용자나 사이버 보안 담당자는 웹페이지 모니터링 결과로서 이와 같은 웹페이지에 관련된 트랜잭션 (transaction) 등 기록 정보를 얻을 수 있다. 사용자는 HTTP Archive (HAR) format 파일과 같은 웹페이지 기록 정보를 재생하여 웹페이지의 기록 정보를 확인 하고 악성 행위에 대한 추가 분석하거나 또는 근거 데이터를 얻을 수 있다. 도 50은 위에서 개시한 실시 예가 컴퓨터 상에서 동작하는 일 예를 개시한다. 개시한 바와 같이 데이터수집부와 분석탐지부를 포함하는 사이버 보안 위협 정보 처리 장치는 여러 개의 컴퓨터 노드들에서 병렬적으로 구동될 수 있다. 예시한 도면은 마스터 노드와 복수의 슬레이브 노드들을 포함하는 사이버 위협 정보 처리 장치를 예시한다. 하나의 마스터 노드의 클라우드 시스템의 운영 시스템 상에는 도커 컨테이너(docker container)가 동작할 수 있다. 위에서 예시한 데이터수집부와 분석탐지부가 별도의 하드웨어로 구현될 수도 있으나, 이 도면의 예에 서는 도커 컨테이너(docker container) 상에서 동작할 수도 있다. 그런 경우 각 도커 컨테이너 상에 동작하는 애플리케이션들이 클라우드 시스템의 리소스를 이용하여 위에서 개 시한 실시 예를 수행할 수 있다. 마스터 노드는 위에서 개시한 실시 예를 수행할 수 있는 하나 이상의 도커 컨테이너(docker container)들 과 데이터베이스를 포함할 수 있다. 마스터 노드의 하나의 도커 컨테이너에서 동작할 경우, 특정 도커 컨테이너에서 동작하는 데이터수집부는 마스터 노드 또는 슬레이브 노드들에서 동작하는 다른 도커 컨테이너에 수집된 웹페이지와 관련된 웹페이지 링크 정보를 전달할 수 있다. 또한 마스터 노드(5710는 웹페이지의 악성 탐지 모니터링과 관련된 작업을 슬레이브 노드들에 로드 밸런싱(load balancing)을 고려하여 할당할 수 있다. 예시한 도커 스웜(docker swarm)을 기반으로 여러 대의 호스트에서 동작하는 웹페이지 모니터링 시스템들은 하 나의 마스터-슬레이브 방식의 클러스터 시스템으로 묶어 관리가 가능하다. 이 경우 클러스터 시스템의 마스터 노드는 슬레이브 노드들에 주기적으로 하트 비트 패킷을 전송하 여 서버의 장애 여부를 판단할 수도 있다. 클러스터 시스템의 마스터 노드가 슬레이브 노드들의 상황을 체크하여 서버의 장애가 있는지 판별 할 수 있다. 반대로 클러스터 시스템의 마스터 노드가 웹페이지 모니터링의 처리 능력을 확장하고자 할 경우 새로운 노드에 도커 이미지를 배포하여 클러스터 시스템에 포함시킬 수도 있다. 이와 같이 클러스터 시스템의 마스터 노드는 개시한 예와 같이 클러스터 내의 노드의 등록과 해제를 수행 하여 웹페이지 모니터링 수행에 대해 스케일 아웃(scale-out)을 수행할 수 있다. 도 51은 웹페이지에 포함된 사이버 위협 정보를 처리하는 방법의 일 실시 예를 개시한다. 웹페이지를 수집하고 상기 웹페이지에 포함된 데이터나 링크 뎁스에 따라 링크된 데이터를 분류한다(S5910). 웹 페이지를 수집하고 분류할 경우 여러 컴퓨터 노드에 따라 병렬 프로세스로 처리하고, 상기 컴퓨터 노드들의 스 케일 아웃에 따라 각 노드의 도커 컨테이너 상에서 수행되도록 할 수 있다. 이에 대한 상세한 예는 도 46, 도 47 및 도 50에 개시하였다. 상기 웹페이지에 포함된 데이터 또는 상기 링크된 데이터에 대해 복수의 레이어들 상에서 악성 여부를 탐지한다 (S5920). 상기 웹페이지에 포함된 데이터는 HTML 데이터, 자바 스크립트 데이터, 이미지나 오디오 등 미디어 파일 등 상 기 웹페이지가 배포하는 여러 데이터나 파일을 지칭한다. 상기 웹페이지에 링크된 데이터는 상기 웹페이지와 링 크된 여러 타입의 데이터나 파일을 포함한다. 이에 대한 상세한 예는 도 48에 개시하였다. 예를 들어 제 1 레이어에서는 상기 웹페이지에 포함된 데이터 또는 상기 링크된 데이터에 대해 상기 안티바이러 스 기반의 HTML 데이터 패턴에 따라 사이버 위협 정보를 탐지할 수 있다. 예를 들어 제 2 레이어에서는 상기 웹페이지에 포함된 데이터 또는 상기 링크된 데이터에 대해 일정한 규칙에 따른 패턴이나 시그니처를 포함한 맬웨어, 즉 공격 도구나 공격자의 시그니처 패턴에 따라 사이버 위협 정보를 탐지할 수 있다. 상기 웹페이지에 포함된 데이터 또는 상기 링크된 데이터가 난독화된 경우 난독화 해제를 수행 할 수 있다. 예를 들면 난독화가 적용된 자바 스크립트의 경우 난독화 해제 도구를 적용하고 YARA 룰 등에 따라 시그니처 패턴을 찾을 수 있다. 예를 들어 제3 레이어에서는 상기 웹페이지에 포함된 데이터 또는 상기 링크된 데이터에 대해 인공 지능 알고리 즘에 기반하여 악성 행위 데이터 등의 사이버 위협 정보의 포함여부를 탐지할 수 있다. 상기 웹페이지에 포함된 데이터 또는 상기 링크된 데이터에 대한 3개의 탐지 단계들은 병렬적으로 또는 순차적 으로 진행될 수 있다. 위 탐지 단계들에서 악성으로 탐지된 상기 웹페이지에 포함된 데이터 또는 상기 링크된 데이터의 경우 해당 웹 페이지의 기록 데이터를 제공하거나 저장한다(S5930). 웹페이지의 기록 데이터는 HTTP Archive (HAR) format 파일과 같은 웹페이지 기록 정보를 재생하여 웹페이지의 기록 정보를 포함할 수 있다. 사용자는 기록 데이터에 근거하여 악성 행위에 대한 추가 분석하거나 또는 근거 데이터를 얻을 수 있다. 이하에서는 수집한 웹페이지 데이터가 악성 여부인지 판별하는 더욱 구체적인 실시 예를 개시한다. 웹사이트를 제공하는 레퍼런스 정보, 예를 들면 URL 정보를 획득하면 그 URL의 웹페이지 데이터로부터 HTML (Hypertext Markup Language) 데이터를 얻을 수 있다. 이전의 HTML의 악성 탐지나 분석은 단순히 HTML 데이터 전체를 기계 학습 기반으로 학습하여 HTML 내 특정 태그 수의 빈도 수나 특정 문자의 빈도 수에 따라 악성을 판별하였다. 따라서, HTML 내 어떤 것이 구체적인 악성 행위를 유발하고 누가 유발하는 것인지 확인하기 어려웠다. 개시하는 실시 예는 이러한 문제점을 극복하기 위해 HTML 데이터 내의 구체적인 공격 행위 식별과 심지어 공격 그룹 식별이 가능하다. 웹페이지 데이터는 이를 기술하는 HTML (Hypertext Markup Language) 데이터를 포함하는데, HTML (Hypertext Markup Language) 데이터는 웹페이지를 여러 가지 명령어 집합인 태그(tag)를 이용하여 웹페이지의 내용을 기술 할 수 있다. 예를 들면 HTML 데이터는 그 데이터 내에 각 태그의 열고 닫음을 포함하는 태그의 묶음을 포함하고, 이와 같이 태그 묶음은 HTML 데이터의 부분을 구성할 수 있다. HTML은 웹 브라우저마다 지원하는 태그가 조금씩 다르지만 대체로 비슷한 태그를 지원한다. 따라서, 실시 예는 태그 묶음에 포함되는 기술 내용에 대해 공격자의 공격 행위를 탐지하고 식별할 수 있다. 예를 들어 공격자는 웹페이지의 HTML 태그의 기능을 악용하여 공격 행위를 수행할 수 있다. 공격자가 웹페이지 에서 동일한 공격 기법이 사용한다면 그 웹페이지 HTML의 태그 내 기술 되는 데이터는 사이버 위협 정보의 분석 시 유사하게 나타날 수 있다. 실시 예는 HTML 데이터의 태그 단위의 부분 영역의 유사도를 기반으로 악성 태그 혹은 그 악성 태그와 유사한 악성 태그인지를 식별할 수 있다. 이하에서 이에 대한 상세한 실시 예를 개시한다. 도 52은 사이버 위협 정보를 처리하는 방법의 일 실시 예를 개시한다. 링크 정보에 기반하여 웹페이지 데이터를 획득하고 상기 웹페이지 데이터의 태그 구조 정보를 분석한다(S6110). 웹페이지 데이터의 태그 구조 정보의 일 예로서 이하에서는 돔 트리(Document Object Model(Dom) Tree) 구조를 예시한다. 상기 태그 구조 정보에 따라 상기 웹페이지 데이터의 태그 영역에 포함된 데이터를 태그 특징 데이터로 변환한 다(S6120). 태그 구조 정보에 따라 HTML 데이터 중 공격자가 수정할 수 있는 태그 단위의 데이터를 태그 특징 데이터로 변환할 수 있다. 태그 특징 데이터의 상세한 실시 예는 이하에서 개시한다. 변환된 태그 특징 데이터를 학습하여 상기 태그 영역에 포함된 데이터의 사이버 위협 정보를 획득한다(S6130). 태그 특징 데이터를 인공 지능 알고리즘의 분류 모델로 분류하여 각 태그 부분에 악성 행위에 대한 공격 기법과 공격 그룹을 식별할 수 있다. 도 53는 실시 예에 따른 사이버 위협 정보를 처리하는 방법으로서 HTML 데이터의 태그에 기반한 구조 정보를 예 시한다. HTML 데이터의 태그 단위로 분석이 가능한데 이 도면은 HTML 데이터의 태그 단위의 돔 트리(Document Object Model(Dom) Tree)로 나타낸 예이다. 돔 트리(Dom Tree)는 태그들의 순차적 차례에 따른 깊이와 관련된 되어 태 그 단위로 오브젝트 또는 노드가 될 수 있다. 따라서, HTML 데이터의 돔 트리(Dom Tree)를 얻으면 그 HTML 구조 를 쉽게 파악할 수 있다. 이 도면의 예는 HTML 데이터를 분석한 예로서, 태그들의 위치 및 깊이에 따른 돔 트리 구조를 예시한 것이다. 이 도면의 예에서는 HTML 문서 전체를 둘러싼 태그 부분의 끝을 나타내는 태그</html>, HTML 문서의 명칭 을 나타내는 태그의 끝</title> , HTML 문서 바디를 나타내는 태그 영역의 끝</body>, HTML 문서 중 스트립트를 나타내는 태그 묶음의 끝</script>를 각각의 식별번호와 함께 예시하였다. 그리고 HTML 문서 바디 내에 내용의 제목(heading)을 나타내는 태그 묶음의 끝</h1>, 중첩되는 브라우징 의 내용, 즉 문서 내에 다른 HTML 페이지를 삽입하는 태그의 묶음의 끝 </iframe>, 그리고 하이퍼링크를 생성하는 태그 영역의 끝</a>을 각각 예시하였다. 이와 같이 HTML 데이터를 계층적 구조의 정보로 분석하여 HTML 데이터의 특성을 알 수 있는 태그 단위로 분리할 수 있다.여기서는 HTML 데이터의 특성을 알 수 있는 태그 영역으로 분리하는 예로서 HTML 데이터를 돔 트리(Dom Tree)에 따라 분류하는 예를 개시하였다. 도 54은 실시 예에 따른 사이버 위협 정보를 처리하는 방법으로서 HTML 데이터의 태그에 기반한 구조 정보로부 터 사이버 보안 위협에 관련한 특징 정보를 얻는 예를 개시한다. 먼저 실시 예를 용이하게 하기 위해 위에서 개시한 도면의 태그 구조 정보를 가진 웹페이지를 이용하여 그 웹페 이지 데이터의 사이버 보안 위협에 관련한 특징 정보를 얻는 예를 개시한다. 위에서 개시한 예와 같이 돔 트리(Dom Tree) 분석에 따라 HTML 데이터의 태그 구조 정보를 얻을 수 있다. 여기서 얻은 태그 데이터를 왼쪽 섹션에, 각 태그 데이터에 대응되는 웹페이지 데이터를 오른쪽 섹션에 예시하 였다. 위에 개시한 예에 따르면, HTML 데이터의 태그 구조 정보에 포함되는 태그 영역 또는 태그 데이터로서 <body>, <image>, <iframe>, <a>, <script>나 </script>를 예시하였다. 이 도면 예에서 태그 구조 정보 중 태그 바디<body>에 포함되는 텍스트는 도면에 예시한 바와 같이 다음 과 같다. onload=”teclear();” Background=”ground.gif” Link=”#ff2ff” Text=”#ff0001e” Link=”fff2ff” 그리고 이 예에서 태그 구조 정보 중 태그 이미지<image>영역에 포함하는 내용은 이미지 소스가 제공되는 URL 주소 (이 도면의 예에서 http://analytics.hosting24.com/do.php) 등일 수 있다. 태그 구조 정보에 포함된 각 태그 영역에 대응되는 위와 같은 HTML 데이터에 대해 사용자 또는 공격자가 임의로 수정하거나 사이버 위협 정보를 추가할 수 있다. 따라서, 이러한 경우 수정되거나 공격자가 임의로 수정할 수 있는 데이터는, 사이버 위협 정보는 탐지하거나 분 석을 위한 데이터로 대체할 수 있다. 여기서 사용자나 공격자가 임의로 수정할 수 있는 데이터는 HTML 데이터 중 HTML 문법을 제외하고 사용자가 임 의로 수정할 수 있는 값들을 의미하며 태그 영역 내의 URL 주소나 문자열 값 등을 의미한다. 위의 예에 따르면 HTML 데이터 중 임의로 수정할 수 있는 값은 함수 (이 도면의 예에서 teclear()), URL 주소 (이 도면의 예에서 http://analytics.hosting24.com/do.php), 문자열(이 도면의 예에서 web hosting 등), 변수 명(이 도면의 예에서 weight) 등이 공격자가 수정 가능한 데이터에 해당할 수 있다. 위 예에서 함수, teclear()는 HTML 데이터 중 함수임을 나타내는 데이터(예, <func>)로, URL 주소는 HTML 데이 터 중 URL 주소임을 나타내는 데이터(예, <http><url><ext : php>)로 대체될 수 있다. 또한 위 예에서 문자열(예, web hosting)는 HTML 데이터 중 특정 문자 스트링임을 나타내는 데이터(예, <string> 등)로, 변수명(예, height, width)는 HTML 데이터 중 변수명임을 표시하는 데이터(예, <name>등)로 변환되거나 대체할 수 있다. 이와 같이 HTML 데이터 중 유와 같은 일정한 규칙에 따라 대체가능한 부분이 대체된 경우 변환된 태그 정보는 사이버 위협 정보를 나타내는 정보로서 벡터화 데이터로 변환될 수 있다. 도 55은 위에서 예시한 HTML 문서 중에서 HTML 문법을 제외하고 사이버 위협 정보가 포함될 수 있는 부분을 실 시 예에 처리하여 변환하는 과정을 예시한다. 실시 예에 따라 URL 정보에 따른 HTML 데이터는 태그 구조 정보에 따른 태그 영역 또는 태그 데이터에 따라 분 석될 수 있다. 이 예에서 특정 웹페이지의 HTML 데이터를 태그 구조 정보에 따른 태그 영역 또는 태그 데이터로 분석한 경우 각 태그 데이터가 왼쪽 열에 위치한다. 여기 예에서 각 태그 데이터는 <body>, <image>, <iframe>, <a>, <script>나 </script>로 구분될 수 있 다. HTML 문서 내의 각 태그 데이터에 대응되는 데이터는 위와 같이 일정한 규칙에 따라 처리되는데 여기서는 각 preprocessing 섹션에 나타내었다. 예를 들어 바디 부분의 데이터는 변환 규칙에 따라 아래와 같이 처리된다. onload=”<func>();” Background=”<name>.gif” Link=”<hex>” Text=”<hex>” Link=”<hex>” 위에서 개시한 예와 같이 HTML 데이터 중 태그 영역에 포함되는 함수는 <func>()로, 이미지의 명칭은 <name>, 링크나 텍스트에 포함되는 16진법의 코드는 <hex>로 변환할 수 있다. 그리고 문자열은 <string>, URL 주소는 <http><url>로 각각 변환하고 변수 명칭은 <name> 으로 변환한다. 이와 같이 HTML 문법에 반드시 사용되는 부분을 제외한 부분은 일정한 형식이나 원칙에 따라 변경이 가능하며 여기서 변환되는 규칙은 당업자에게 충분히 변경이 가능하다. preprocessing 섹션의 데이터는 일정한 길이의 정규화 데이터로 변환되고 정규화 데이터는 퍼지 해쉬 값 으로 변환될 수 있다. 이 도면의 예에서 퍼지 해쉬 섹션은 일정한 규칙에 따라 처리된 preprocessing 섹션의 데이터가 퍼 지 해쉬 값으로 변환된 결과를 나타낸다. 즉 HTML 데이터 중 <body> 태그 영역의 데이터로부터 처리된 preprocessing 섹션 내 데이터가 변환된 퍼 지 해쉬 값이 퍼지 해쉬 섹션의 첫 번째 행에 예시된다. HTML 데이터 중 <image> 태그 영역의 데이터로부터 처리된 preprocessing 섹션 내 데이터가 변환된 퍼지 해쉬 값이 퍼지 해쉬 섹션의 두 번째 행에 예시된다. 또한 HTML 데이터 중 <iframe> 태그 영역의 데이터로부터 처리된 preprocessing 섹션 내 데이터가 변환된 퍼지 해쉬 값이 퍼지 해쉬 섹션의 세 번째 행에 예시된다. 이와 같이 HTML 데이터 중 태그 영역의 데이터로부터 처리된 데이터는 정규화된 후 퍼지 기반의 해쉬 함수에 적 용된 해쉬 값으로 각각 변환될 수 있다. 위에서 예시한 바와 같이 추출된 Hash 값은 N-gram 데이터로 변환되어 M 바이트 패턴에 따른 빈도 수를 이용하 여 태그 특징 데이터로 변환될 수 있다. 여기서는 추출된 Hash 값에 2-gram 기법을 적용하여, 2-byte 패 턴에 따른 빈도 수를 이용하여 태그 특징 데이터로 변환한 예를 개시한다. 이하에서는 태그 구조 정보에 따라 각 태그 영역이 변환되어 사이버 위협 정보를 나타낼 수 있는 데이터를 태그 특징 데이터로 호칭한다. 즉, 태그 특징 데이터는 태그 구조 정보에 따라 구분된 태그 단위에 대응되는 사이버 위협 특징 정보가 될 수 있다. 따라서, 태그 벡터 데이터를 기반으로 분류 모델을 학습하면 이에 대한 악성 여부를 판별할 수 있다. 도 56는 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개념적으로 도시한 도면이다. 실시 예는 웹페이지 데이터를 획득하고 그 웹페이지 데이터의 태그 구조 정보에 따라 웹페이지 데이터를 분리하여 처리할 수 있다. 웹페이지 데이터는 URL 정보로 입력받을 수도 있고, 웹크롤링 형태로 수집할 수도 있다. 이 예는 웹페이지 데이터가 입력될 경우 입력된 웹페이지 데이터의 태그 구조 정보로 분석할 결과를 개념 적으로 표시하였다. 설명의 편의상 태그 구조 정보는 위에서 개시한 예와 동일한 예를 사용하였다. 태그 구조 정보에 따라 각 태그 영역 또는 태그 데이터 별로 HTML데이터를 일정한 규칙에 따라 변환하고, 상기 변환된 데이터를 정규화하여 해쉬 값으로 변환할 수 있다. 그리고 상기 해쉬 값으로 변환한 HTML데이터는 N 그램 데이터인 태그 특징 데이터로 변환할 수 있다. 이 예에서는 태그 구조 정보 중 태그 영역 <a>에 대응하는 HTML데이터를 태그 특징 데이터로 변환 한 결과를 예시하였다. 태그 특징 데이터는, HTML에 반드시 필요한 문법을 제외하고, 공격 행위와 관련된 데이터 또는 그 패턴 데이터를 포함할 수 있다. 따라서, 태그 특징 데이터는 사이버 위협 정보 중 공격 행위의 식별자 또는 공 격 그룹을 식별할 수 있는 데이터를 포함할 수 있다. 실시 예는 태그 특징 데이터를 기반으로 트리기반의 분류 모델로 학습하도록 할 수 있다. 예를 들 면, 준비된 태그 특징 데이터 베이스(DB)을 기반으로, 입력된 태그 특징 데이터에 대해 적어도 하 나 이상의 디시전 트리(Decision Tree)를 이용한` 랜덤 포레스트(Random Forest) 학습 알고리즘을 적용 하며 태그 특징 데이터의 악성 여부를 분류할 수 있다. 태그 특징 데이터 베이스(DB)는 웹페이지의 악성 레이블 정보에 따라 HTML 데이터에 포함되는 태그 영역 의 데이터를 악성 또는 정상의 태그 특징 데이터로 저장한다. 즉, 악성 행위가 포함된 HTML 내 태그 영역의 데 이터는 데이터 베이스의 악성 태그 데이터로 저장되고, 정상인 HTML의 태그 영역 데이터는 데이터 베이스의 정 상 태그 데이터로 저장된다. 즉, 실시 예의 트리기반의 분류 모델의 분류 결과에 따라 태그 특징 데이터가 악성인지 여부에 대 해 확률적으로 판단할 수 있다. 여기서는 HTML 문서 내 태그 영역 <a>의 데이터가 악성일 확률이 98%로 판별된 예를 개시한다. 그리고 해당 태그 특징 데이터가 악성인 경우, 그 태그 특징 데이터가 포함하는 공격 기법 식별자 와 공격자 그룹도 식별할 수 있다. 여기서의 예에서는 태그 특징 데이터에 대해 Blackhole로 호칭되는 공 격 기법 식별자와 공격자 그룹 Lazarus를 식별한 예를 개시한다. 따라서 실시 예는 웹페이지 데이터에 포함되는HTML 문서 자체의 악성 여부를 뿐만 아니라 HTML의 어떤 태그 영 역이 악성인지 식별이 가능하다. 또한 단순히 HTML 데이터를 기계 학습 기반으로 악성 탐지 또는 분류하거나 HTML 내 특정 태그 수의 빈도 수나 특정 문자의 빈도 수에 따라 악성을 판별하는 것이 아니라 HTML 데이터의 특 정 태그 데이터의 공격 기법과 공격 그룹을 식별할 수 있으므로 정확한 악성 탐지 및 분석이 가능하다. 도 57은 실시 예에 따라 웹페이지의 태그에 포함된 사이버 위협 정보 처리 장치의 일 예를 개시한 도면이다. 사이버 위협 정보 처리 장치의 다른 일 실시예는 프로세서를 포함하는 서버, 데이터베이스, 및 인 텔리전스 플랫폼을 포함할 수 있다 데이터베이스는 이미 분류된 악성 코드 또는 악성 코드의 패턴 코드를 저장할 수 있다. 서버의 프로세서는 응용 프로그램 인터페이스(Application Programming Interface) 를 통해 웹페 이지의 링크 정보와 같은 위치 정보를 입력 받을 수 있다. 프레임워크의 수신모듈은 서버의 프로세서의 지시에 따라 API를 통해 수신한 웹페이지의 링크 정보를 이용해 상기 웹페이지 데이터를 수신할 수 있다. 분석모듈은 웹페이지의 링크 정보에 기반해 수신된 웹페이지 데이터를 분석하여 상기 웹페이지 데이터에 대한 태그 구조 정보를 얻을 수 있다. 태그 구조 정보의 일 예로서 돔 트리(Document Object Model(Dom) Tree) 구조를 예시하였다. 변환모듈은 웹페이지 데이터의 태그 구조 정보에 따라 상기 웹페이지 데이터의 태그 영역에 포함된 데이 터를 태그 특징 데이터로 변환할 수 있다. 변환모듈은 웹페이지를 구성하도록 하는 필수 구조에 대한 부 분 이외에 사용자가 수정할 수 있는 부분의 데이터에 대해 상기 태그 구조 정보에 따른 태그 단위의 태그 특징데이터로 변환할 수 있다. 학습모듈은 AI 엔진을 이용해 태그 특징 데이터를 분류 모델을 적용하여 태그 구조 정보에 따른 태그 영역에 포함된 데이터의 사이버 위협 정보를 획득한다. 학습모듈은 태그 특징 데이터를 AI 엔진의 알고리즘에 따른 분류 모델로 분류하여 각 태그 부분에 악성 행위에 대한 공격 기법과 공격 그룹을 식별할 수 있다. 학습모듈이 태그 특징 데이터와 같은 특징 데이터를 분류 모델을 적용하여 예는 도 25 내지 도 28 및 도 52 내지 도 55에 상세히 개시하였다. 이하에서는 위와 같이 실시 예들에 따른 인텔리전스 플랫폼이 수집, 판별 또는 검출, 및 예측한 사이버 위협 정 보를 사용자에게 제공하는 실시 예들을 개시한다. 도 58은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 제공하는 일 예를 예시한다. 사이버 위협 정보를 제공하는 일 실시 예는, 사이버 위협 정보와 관련된 파일 또는 그 파일과 관련된 정보를 위 에서 예시한 응용 프로그래밍 인터페이스 Application Programming Interface, API) 포함하는 인텔리전스 플랫 폼을 통해 입력받을 수 있다. 이를 위하여, 인텔리전스 플랫폼은 웹 페이지 상에 파일을 입력 받는 아이콘을 출 력할 수 있다. 또는 사이버 위협 정보는 위에서 예시한 바와 같이 인터넷 상의 웹 페이지의 데이터를 크롤링하 는 방식으로 수집될 수도 있다. 이 도면에서는 사이버 위협 정보를 사용자에게 제공할 수 있는 인텔리전스 플랫폼을 예시하는데, 특히 인텔리전 스 플랫폼이 제공하는 웹 서비스의 페이지를 도시한 것이다. 개시하는 실시 예에 따른 인텔리전스 플랫폼은 사용자로부터 사이버 위협 정보를 포함할 수 있는 파일이나 그 파일에 대한 제1 사이버 위협 정보의 데이터를 입력받을 수 있다. 실시 예에 따른 인텔리전스 플랫폼은 입력된 파일을 위에서 개시한 예들에 따라 처리하여 입력된 파일과 관련된 사이버 위협 정보를 사용자에게 제공할 수 있다. 예를 들어 파일에 대한 사이버 위협 정보는, 입력된 파일과 관련된 사이버 위협 정보가 악성일 가능성, 입력된 파일의 해쉬 값, 입력된 파일과 관련된 tag 값, 입력된 파일의 유형, 입력된 파일의 크기, 입력된 파일로 사이버 위협을 의도하는 공격 그룹, 입력된 파일과 관련된 공격 기법의 식별자, 입력 된 파일과 관련된 위험의 유형, 입력된 파일의 의한 공격 대상 국가, 입력된 파일의 의한 공격 대상 산 업, 및 입력된 파일과 관련된 보안 취약점 정보 등을 포함할 수 있다. 또는 실시 예에 따른 인텔리전스 플랫폼은 입력된 상기 제 1 사이버 위협 정보와 관련된 제 2 사이버 위협 정보 를 사용자에게 제공할 수 있다. 다른 예로서 실시 예에 따른 인텔리전스 플랫폼은 사용자가 예시한 내지 과 같은 제 1 사이버 위협 정 보를 제공하는 경우, 제공된 제 1 사이버 위협 정보와 관련된 제 2 사이버 위협 정보를 제공할 수도 있다. 이 도면의 예에서 인텔리전스 플랫폼은 웹페이지 상에서 특정 파일과 관련된 MD5, SHA-1 또는 SHA-256 형식의 해쉬 값을 입력받을 수 있다. 예를 들면 인텔리전스 플랫폼이 사용자로부터 이와 같은 어떤 파일의 해쉬 값을 입력받으면, 상기 입력된 해쉬 값으로부터 상기 파일과 관련된 아래의 정보를 제공할 수 있다, 입력된 해쉬 값에 대한 파일과 관련된 사이버 위협 정보가 악성일 가능성, 입력된 해쉬 값에 대한 파일과 관련된 tag 값, 입력된 해쉬 값에 대한 파일의 유형, 입력된 해쉬 값에 대한 파일의 크기, 입력된 해쉬 값에 대한 파일을 이용해 사이버 위협을 의도하는 공격 그룹, 입력된 해쉬 값에 대한 파일과 관련된 공격 기법의 식별자, 입력된 해쉬 값에 대한 파일과 관련된 위험의 유형, 입력된 해쉬 값에 대한 파일과 관련된 공격그룹의 기반 국가 또는 그 공격의 대상 국가, 입력된 해쉬 값에 대한 파일의 의한 공격 대상 산업, 입력된 해쉬 값에 대한 파일과 관련된 보안 취약점 정보 등을 제공할 수 있다. 다른 예로서, 플랫폼이 사용자로부터 상기 와 같은 사이버 위협을 의도하는 공격 그룹 또는 공격 그룹의 식 별자를 입력받은 경우, 상기 입력된 공격 그룹과 관련된 아래의 정보를 제공할 수 있다. 입력된 공격 그룹과 관련된 사이버 위협 정보가 악성일 가능성 입력된 공격 그룹과 관련된 파일의 해쉬 값 입력된 공격 그룹과 관련된 tag 값, 입력된 공격 그룹과 관련된 사이버 위협 정보를 포함한 파일의 유형, 입력된 공격 그룹과 관련된 사이버 위협 정보를 포함한 파일의 크기, 입력된 공격 그룹과 관련된 공격 기법의 식별자, 입력된 공격 그룹과 관련된 사이버 위험의 유형, 입력된 공격 그룹으로부터 시작된 공격 국가 또는 그 공격의 대상 국가, 입력된 공격 그룹과 관련된 공격 대상 산업, 및 입력된 공격 그룹과 관련된 사이버 위협 정보를 포함한 파일의 보안 취약점 정보 등을 제공할 수 있다. 이와 같이 예시한 인텔리전스 플랫폼은 파일 또는 그 파일과 관련된 정보를 입력받는 경우 사용자에게 입력된 정보와 관련된 사이버 위협 정보를 제공할 수 있다. 위와 같이 예시한 인텔리전스 플랫폼은 사용자로부터 파일을 입력받거나, 파일과 관련된 제 1 사이버 위협 정보 를 입력받는 경우, 상기 입력된 파일이나 입력된 제 1 사이버 위협 정보 관련된 제 2 사이버 위협 정보를 제공 할 수 있다. 사용자는 예시한 File Search 등의 서치 아이콘이나 상세 서치 버튼 등 선택 아이콘을 이용해 사이 버 위협 정보와 관련된 조건들의 선택과 범위를 세밀하게 설정하여 사이버 위협 정보를 얻을 수 있다. 특히, 본 도면 상에서는 File Search(예를 들어, 해쉬 값 MD5, SHA-1, SHA-256)에 대하여만 도시하였으나, IP 어드레스 및 도메인(domain)을 기준으로 검색할 수 있음은 물론이다. 이때, IP 어드레스를 기준으로 검색을 하는 경우, 인텔리전스 플랫폼은 IP 어드레스와 연관된 캠페인 리스트를 출력할 수 있다. 여기에서, 캠페인 리스트는 해당 캠페인과 관련된 공격 그룹, 공격 대상 국가, 공격 대상 산업 및 해당 캠페인과 관련된 IoC에 대한 정보를 포함 할 수 있다. 이에 대하여는 후술하도록 한다. 예시한 인텔리전스 플랫폼의 인터페이스는 사용자가 사이버 위협 정보를 선택하기 쉽도록 사용자로부터 많이 문 의되는 사이버 위협 정보나 또는 최근이나 특정 기간에 많이 발생하는 사이버 위협 정보를 해쉬 태그(#)와 연결 하여 제공할 수 있다. 예시한 인텔리전스 플랫폼의 인터페이스는 사이버 위협 정보와 관련된 주요 키워드와 해시 태그를 결합하 여 제공할 수 있다. 이 예에서는 인텔리전스 API 플랫폼의 인터페이스가 #banker, #ransomware #trojan, #malware, #downloader, #apt 등의 사이버 위협 정보와 관련된 여러 가지 주요 키워드를 해시 태그와 함께 사용자에게 제공되는 예를 개 시한다. 이 도면의 예는 서치 입력 툴의 하단에 사용자가 현재 또는 일정한 기간에 주요한 공격 그룹(G)에 대한 정보를 얻을 수 있는 수단을 제공한다. 예시한 인텔리전스 API 플랫폼의 인터페이스는 주요 공격 그룹에 대한 상세한 정보를 제공하는 선택 옵션(805 0)을 제공할 수 있다.예를 들어 개시하는 예는 사용자에게 공격 그룹(G) Lazarus, 공격 그룹(G) Wizard spider, 공격 그룹(G) Sandworm Team, 공격 그룹(G) Gamaredon Group, 공격 그룹(G) Kimsuky 등에 대한 정보를 제공하는 선택 옵션을 표시한다. 사용자는 해당 공격 그룹(G)의 옵션을 선택함으로써 선택한 공격 그룹에 대한 상세한 정보를 얻을 수 있다. 이와 같이 개시한 실시 예는 사이버 위협 정보를 서치할 수 있는 서치 수단을 제공하여 사용자로부터 파일 또는 파일에 대한 사이버 위협 정보를 입력받고 입력된 정보와 관련된 사이버 위협 정보를 제공할 수 있다. 개시한 실시 예는 사용자가 여러 가지 사이버 위협 정보에 대한 세부 조건에 따라 관련된 사이버 위협 정보를 서치할 수 있는 상세 서치 아이콘을 제공하여 사용자가 해당 서치 툴 또는 수단을 통해 사이버 위협 정보를 더 욱 정확하고 상세하게 얻을 수 있도록 할 수 있다. 개시한 실시 예는 사용자가 선택할 수 있는 사이버 위협 정보를 해쉬 태그의 형식으로 제공하거나, 선택 옵션으 로 제공하고 사용자가 해당 해쉬 태그의 정보 또는 옵션을 선택한 경우 그와 관련된 상세한 사이버 위협 정보를 제공할 수 있다. 공격이 시작된 국가(origin nation)에 대한 정보와 관련하여, 인텔리전스 API 플랫폼 또는 그 플랫폼을 제공하 는 서버는 실행파일 또는 비실행파일에 포함된 데이터로부터 C&C (Command & Control) 서버의 위치 정보 등으로 부터 얻을 수 있다. 이때, 공격이 시작된 국가는 해당 파일과 관련된 공격 그룹이 활동하는 기반 국가의 정보에 대응할 수 있다. 여기에서, 공격 그룹이 활동하는 기반 국가는 MITRE ATT&CK에서 정의하는 기반 국가를 참조할 수 있다. 예를 들어, “Lazarus”라는 북한의 공격 그룹은 C&C(Command & Control) 서버를 북한에 두지 않고 다 른 나라에 서버를 두고 공격할 수 있다. 인텔리전스 API 플랫폼 또는 그 플랫폼을 제공하는 서버는 악성 코드가 최초 실행했을 때 접속한 IP 주소나 도 메인 정보 등으로부터 공격이 시작된 국가의 정보를 얻을 수도 있다. 예를 들어 인텔리전스 API 플랫폼 또는 그 플랫폼을 제공하는 서버는 특정 IP 주소나 도메인에 대응하는 국가, 또는/그리고 실행파일이나 바이너리 파일 내에 언어 코드로부터 국가 정보를 얻을 수도 있다. 이러한 경우 국가 코드는 유니 코드 형식으로 KR, CN, US 등의 국가 코드가 포함되어 있어서 사이버 위협 정보와 관련된 공격 시 작 국가(origin nation)에 대한 정보를 얻을 수 있다. 공격 대상 국가(target nation)에 대한 정보와 관련하여 예를 들면 인텔리전스 API 플랫폼 또는 그 플랫폼을 제 공하는 서버는 실행파일이나 비실행파일과 관련된 타겟 소프트웨어로부터 분석된 데이터에서 국가 정보를 얻을 수 있다. 이 실행파일이나 비실행파일과 관련된 타겟 소프트웨어에도 언어와 관련된 코드나 위치와 관련된 정보 가 포함될 수 있다. 공격 대상 산업에 대한 정보와 관련하여, 인텔리전스 API 플랫폼 또는 그 플랫폼을 제공하는 서버는 타켓 소프 트웨어와 관련된 각종 산업이 저장된 데이터베이스로부터 관련 공격 대상 산업에 대한 정보를 얻을 수 있다. 실시 예는 사이버 위협 행위와 관련된 실행파일 또는 비실행파일의 바이너리 데이터로부터 공격 대상 산업의 정 보를 얻을 수 있다. 예를 들면 타겟 소프트웨어에 포함된 국가 코드나, 공격의 대상이 되는 도메인 주소에 포함 된 산업 코드(go.kr 또는 or.kr 등)에 따라 공격 대상 산업에 대한 정보를 얻을 수 있다. 이와 같이 인텔리전스 플랫폼은 사용자에게 웹페이지를 통해 사이버 위협 정보와 관련된 데이터를 입력받거나 검색하도록 하는 수단을 제공한다. 도 59는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 제공하는 다른 일 예를 예시한다. 개시하는 실시 예는 사용자에게 어드밴스드 서치 아이콘을 제공하여 사용자가 정확하고 상세한 사이버 위 협 정보를 서치하고 제공받을 수 있도록 할 수 있다. 일 실시 예에서, 인텔리전스 플랫폼은 어드밴스드 서치 아이콘을 통해 쿼리(query) 형식으로 후술하는 여 러 가지 조건들을 사용해 검색 기능을 제공할 수 있다. 예를 들어, 사용자가 어드밴스드 서치 아이콘을 선택하는 경우, 인텔리전스 플랫폼은 검색 기능으로 후술하는 여러 가지 조건을 나열하고, 그에 대한 검색어를 입력받을 수 있다. 이때, 웹 페이지 상에는 후술하는 여러 가지 조건에 대한 설명(description)을 사용자에게 제공할 수 있다. 이 도면에서는 어드밴스드 서치 아이콘 에서 사이버 위협 정보를 얻을 수 있는 여러 가지 조건들을 예시 한다. 여기서는 이러한 조건들을 어드밴스드 서치 가이드로 예시하였다. 어드밴스드 서치 아이콘 에서 설정하는 여러 가지 조건들의 예로서, 악성도 조건(예시한 AI 알고리즘으로 판단한 파일의 악성도 조건의 의미로서 여기서는 AI 로 표시)은 입력된 파일과 관련된 사이버 위협 정보 가 악성일 가능성을 점수 형식으로 표현한 것이다. 이 예에서는 위에서 개시한 AI 알고리즘으로 이용해 관련된 사이버 위협 정보의 악성 여부를 점수로 표시하도록 할 수 있다. 이 예에서 사용자는 어드밴스드 서치 아이콘 에서 AI 알고리즘 등으로 판단한 악성 여부를 나타내는 숫자 가 특정 범위보다 크거나 작은 경우의 조건을 만족하는 사이버 위협 정보를 찾을 수 있다. 어드밴스드 서치 아이콘에서 설정하는 여러 가지 조건들의 다른 예로서 태그 정보는 파일의 특징 정보를 태그 형식으로 나타낸 것이다. 사용자는 어드밴스드서치 아이콘 에서 관련 태그 정보를 입력하거 나 선택함으로써, 사용자가 입력 또는 선택한 태그 정보와 관련된 상세한 사이버 위협 정보를 찾을 수 있다. 어드밴스드 서치 아이콘에서 설정하는 여러 가지 조건들의 다른 예로서 파일 유형 정보는, 입력된 파일의 유형이나 형식을 사용자가 선택하거나 입력하도록 하여 사용자가 설정한 파일 유형과 관련된 상세한 사 이버 위협 정보를 찾을 수 있도록 한다. 예를 들어 사용자는 exe_32bit, pdf, doc, xls 등을 입력하거나 선택하 여 그 파일 형식과 관련된 상세한 사이버 위협 정보를 얻을 수 있다. 어드밴스드 서치 아이콘에서 설정하는 여러 가지 조건들의 다른 예로서 파일 크기 정보는, 입력된 파일의 크기를 선택하거나 사용자가 입력하도록 하여 사용자가 설정한 파일 크기 범위에 대한 상세한 사이버 위 협 정보를 찾을 수 있도록 한다. 예를 들어 사용자는 파일 크기나 범위를 나타내는 숫자를 입력하여 관련된 조 건에 맞는 사이버 위협 정보만 검색할 수 있다. 어드밴스드 서치 아이콘의 설정 조건들 중 공격 그룹 정보는 사용자가 찾기 원하는 공격 그룹을 설 정할 수 있다. 그러면, 사용자가 입력한 공격 그룹과 관련된 상세한 사이버 위협 정보를 서치하여 플랫폼의 인 터페이스를 통해 사용자에게 제공한다. 어드밴스드 서치 아이콘의 설정 조건들 중 공격 기법 식별자 정보는 사용자가 설정한 공격 기법의 식별자 또는 코드와 관련된 상세한 사이버 위협 정보를 서치하도록 한다. 예시한 플랫폼의 인터페이스는 입력된 공격 기법의 식별자 또는 코드와 관련된 상세한 사이버 위협 정보를 사용자에게 제공할 수 있다. 어드밴스드 서치 아이콘의 설정 조건들 중 위협 유형 정보은 악성 행위와 관련된 위협 유형을 입력 받을 수 있다. 예시한 플랫폼은 인터페이스를 통해 사용자가 입력한 위협 유형, 예를 들어 trojan, riskware, downloader, phishing 등에 관련된 상세한 사이버 위협 정보를 제공할 수 있다. 어드밴스드 서치 아이콘의 설정 조건들 중 공격 대상 국가 정보는 사용자가 입력한 국가에서 어떤 사이버 공격이 진행되는지를 서치하도록 할 수 있다. 예시한 플랫폼은 인터페이스를 통해 사용자가 지정한 국가 와 관련된 사이버 위협 정보를 상세하게 제공할 수 있다. 어드밴스드서치 아이콘 의 설정 조건들 중 공격 대상 산업 정보는 사용자가 설정한 산업과 관련된 사이버 위협 정보를 상세하게 제공할 수 있도록 한다. 예를 들어 사용자가 에너지 산업과 관련된 사이버 공격에 대한 정보를 알고 싶은 경우 공격 대상 산업 정보에 에너지(energy) 등과 같은 정보를 입력할 수 있다. 그러면 예시한 플랫폼은 인터페이스를 통해 사용자가 설정한 산업과 관련된 사이버 위협 정보를 상세하게 제공 할 수 있다. 어드밴스드 서치 아이콘의 설정 조건들 중 취약점 정보는 사용자가 설정한 취약점 코드와 관련된 사이버 위협 정보를 서치하도록 설정하는 정보이다. 사용자가 특정 취약점 코드를 입력하면 예시한 플랫폼은 입 력된 취약점 코드와 관련된 사이버 위협 정보를 상세하게 제공할 수 있다. 실시 예는 위와 같이 사용자가 어드밴스드 서치를 할 경우 또는 다른 관점에서 사용자가 원하는 여러 가지 사이 버 위협 정보를 제공할 수 있다. 사용자는 파일 또는 파일과 관련된 어떤 정보를 설정하여도 그 파일과 관련된 사이버 위협 정보를 설정된 정보 의 범위와 조건에 따른 사이버 위협 정보를 얻을 수 있다.이하에서는 인텔리전스 플랫폼의 인터페이스를 통해 이와 같은 사이버 위협 정보를 여러 가지 예들을 개시한다. 도 60은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한다. 이 실시 예는 특정 시간 또는 현재 시간에 지역적 또는 세계적으로 발생하는 사이버 위협 정보를 사용자 에게 시각적으로 제공하는 예를 개시한다. 이때, 인텔리전스 플랫폼은 알려진 공격 그룹과 전체 공격 그룹을 기준으로 사이버 위협 정보를 사용자에게 시 각적으로 제공할 수 있다. 여기에서, 알려진 공격 그룹은 MITRE ATT&CK에 의해 알려진 공격 그룹에 대응하며, 전체 공격 그룹은 알려진 공격 그룹과 알려지지 않은 공격 그룹을 포함한다. 본 도면에는 도시되어 있지 않으나, 인텔리전스 플랫폼은 웹 페이지 상에 알려진 공격 그룹 탭과 전체 공격 그룹 탭을 제공할 수 있다. 이 에 따라, 사용자는 인텔리전스 플랫폼이 제공하는 알려진 공격 그룹 탭 또는 전체 공격 그룹 탭을 선택하여, 알 려진 공격 그룹과 전체 공격 그룹에 포함된 사이버 위협 정보를 제공받을 수 있다. 이에 대하여, 후술하도록 한 다. 이 실시 예는 사이버 위협 정보 중 특정 시간 또는 현재 시간에 지도를 기반으로 특정 지역 또는 전세계 적으로 발생하는 사이버 공격의 현황을 시각적으로 제공한다. 이 예에서 특정 시간 또는 현재 시간은, UTC 기준의 시간(2023-03-10 05:10:06)이거나, 공격 대상 국가 또는 공격 그룹으로부터 공격이 시작되는 국가의 현지 시간 (2023-03-10 14:10:06)을 나타낼 수 있다. 예시한 사이버 위협 정보의 예는, 지도를 기반으로 공격 국가 내의 어떤 공격 그룹이 사이버 공격을 이용해 특 정 공격 대상 국가 내의 특정 시설이나 산업을 공격하고 있음을 나타내는 정보를 제공할 수 있다. 예시하는 사이버 위협 정보는, 공격 국가, 공격 그룹 및 공격 대상 국가를 별도의 정보 영역에 아이콘이 나 이미지로 표현하고 이를 사용자에게 제공한다. 예시한 바와 같이 별도의 정보 영역은 공격 그룹과 공격 대상 국가를 지도에 기반하여 시각적으로 제공하 여 사용자에게 이해하기 쉽도록 사이버 위협 정보를 표시할 수 있다. 예를 들어 이 도면의 예의 정보 영역은, 북한 지역의 공격 그룹(Lazarus)이 EXE 타입의 실행파일을 이용 해 미국을 공격하고 있음을 표시한다. 다른 예로서 이 도면의 예의 정보 영역은 러시아 지역의 공격 그룹(Lorec53)이 PDF 파일을 이용해 브라질 을 공격하고 있음을 표시할 수 있다. 이러한 정보 영역은, 지도 상에서 공격 그룹이 공격하는 방향을 나타내는 화살표와 공격 대상 국가로서 표시되는 사이버 공격 또는 사이버 위협 정보를 사용자가 시각적으로 용이하게 이해하도록 할 수 있다. 도 61은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한다. 개시하는 사이버 위협 정보는 시간 순서에 따라 나타난 사이버 위협 활동을 사용자에게 제공할 수 있다. 이 도면에서 예시되는 사이버 위협 정보는 시간 축상에서 공격 활동이 나타난 시점을 표시할 수 있다. 그 리고 예시한 사이버 위협 정보는 시간 축상에서 공격 활동이 나타난 시점에서 공격을 수행한 공격 그룹, 공격 대상 국가, 또는 공격 대상 산업에 대한 정보를 제공할 수 있다. 이 도면의 예는 2023년 3월 9일에 제 1 공격 그룹(Pusikurac)이 공격한 공격 대상 국가들과, 제 2 고공격 그룹 (Lorec53)이 공격한 공격 대상 산업 및 공격 대상 국가들을 시각적인 아이콘으로 제공한 예를 나타낸다. 공격 대상 산업은 통신, 에너지 분야 등 산업 분야를 지칭할 수 있고, 공격 대상 국가는 국가명이나 국기 등으로 사 용자에게 제공될 수 있다. 사용자가 시간 축상에 다른 시점을 선택한 경우라도 해당 시점에 활동한 공격 그룹을 포함한 사이버 위협 정보 를 표시할 수 있고, 사용자는 화면 상의 시간 축 이외의 시점을 선택하여 최근 사이버 공격 활동이나 과거 시점 에 사어버 공격 활동에 대한 정보를 용이하게 얻을 수 있다.도 62는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한다. 개시하는 실시 예는 사이버 위협 활동의 공격 유형 별 정보를 사용자에게 제공할 수 있다. 이 도면의 실시 예는 특정 시점에서 사이버 위협 활동의 유형을 사용자에게 제공하는 예를 개시한다. 실시 예에 따른 인텔리전스 플랫폼은 특정 시점에서 사이버 위협 활동의 유형 별 분포 정보 나 유형별 상 세 정보를 제공할 수 있다. 사이버 위협 정보 중 특정 시점의 사이버 위협 활동의 유형 별 분포 정보는, 복수의 사이버 공격 유형들, 예를 들어 다운로더(downloader), 트로잔(Trojan), 웜(Worm), 백도어(Backdoor), 스틸러(Stealer) 등 공격의 유형에 따른 분산 정보를 그래프나 백분율 등의 정보로 제공할 수 있다. 따라서, 사용자는 특정 시점의 사이버 위협 유형들이 얼마나 진행되고 있는지 확인할 수 있다. 실시 예에 따른 인텔리전스 플랫폼은 특정 시점에서 사 각 사이버 공격 유형별 상세 정보를 사용자에게 제공할 수 있다. 사용자는 인터페이스 상에서 복수의 사이버 공격 유형들 중 특정 공격 유형을 선택하여 해당 공격 유형 중 특정 시점에 가까운 공격 유형 별 상세 정보를 얻을 수 있다. 이 도면의 예는 사용자가 상기 특정 시점에서 1 공격 유형으로 다운로더(downloader)를 선택한 경우 제공하는 정보를 예시한다. 사이버 공격 유형별 상세 정보는, 상기 특정 시점에서 1 공격 유형(downloader)과 관련된 최초 수집일 (UTC 기준을 예시), AI 판별 악성도(AI), 공격 그룹, 공격 대상 국가, 공격 유형의 해쉬 값, 및 공격 유형에 따 른 파일 유형, 공격 대상 산업 등의 정보를 포함할 수 있다. 이 예에서 공격 수집 일정에 따라 제1 공격 유형(downloader)에 관련된 최초 수집일(2023-02-26 16:03:02), 악 성도 100%, 공격 그룹은 러시아의 Wizard spider, 공격 대상 국가 튀르키예, 그 해쉬 값(F56055C~) ? 파일 유 형 (EXE 파일) 등을 예시하였다. 만약 사용자가 상기 특정 시점에서 제 1 공격 유형으로 트로잔(Trojan)을 선택한다면, 상기 특정 시점과 가까운 트로잔(Trojan) 공격 유형에 대해 최초 수집일(UTC 기준을 예시), AI 판별 악성도(AI), 공격 그룹, 공격 대상 국가, 공격 유형의 해쉬 값, 및 공격 유형에 따른 파일 유형, 공격 대상 산업 등의 정보를 제공할 수 있다. 도 63은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한다. 본 도면의 (a)를 참조하면, 개시하는 실시 예는 사이버 위협 활동에 따른 산업별 공격 기법(Technique ID, T- ID)에 대한 정보를 제공할 수 있다. 보다 상세하게는, 상술한 실시 예의 사이버 위협 정보와 관련된 산업 리스 트(예를 들어, 금융 서비스, 과학 기술, 통신, 제조)를 제공하고, 산업 리스트 내에서 많이 사용된 공격 기법 (T-ID)을 더 출력할 수 있다. 이때, 산업 별로 많이 사용한 공격 기법 별로 통계를 내 백분율(%)로 나타낼 수 있다. 또한, 사용자가 공격 기법(T-ID)을 선택하면, 인텔리전스 플랫폼은 해당 산업과 공격 기법에 대응하는 악 성 코드 리스트를 추가적으로 제공할 수 있다. 본 도면의 (b)를 참조하면, 개시하는 실시 예는 사이버 위협 활동에 따라 공격 대상이 되는 산업에 대한 정보를 제공할 수 있다. 공격 대상 산업 정보의 예는 특정 시점의 공격 대상 산업의 분포 정보와 공격 대상 산업의 상세 정보 를 포함할 수 있다. 인텔리전스 플랫폼에 의해 제공하는 공격 대상 산업 정보 중 공격 대상 산업의 분포 정보는 특정 시점에 발생되는 사이버 공격 행위에 따른 공격 대상 산업들의 분포도를 나타낸다. 이 예에서는 해당 시점에서 통신 산 업(50%), 비영리단체(33%), 정부기관(17%), 및 과학기술(17%)의 분포로 공격 행위들이 진행되고 있음을 예시한 다. 공격 대상 산업 정보 중 공격 대상 산업의 상세 정보는 상기 특정 시점에서 각 공격 대상 산업 분야와 관 련된 공격 행위의 최초 수집일(UTC 기준을 예시), AI 판별 악성도(AI), 공격 그룹, 공격 대상 국가, 공격 유형 의 해쉬 값, 및 공격 유형에 따른 파일 유형 등의 정보를 포함할 수 있다.예를 들어 사용자가 통신 산업 분야에 발생하는 공격 행위를 알고 싶다면, 격 대상 산업의 상세 정보에서 통신 섹터를 선택할 수 있다. 이 예에서는 통신 분야에서 공격 행위가 최초 수집된 일자(2023-02-16 15:52:39, UTC 기준 예시), 악성도 0%, 공격 그룹은 Mummy Spider,공격 대상 국가 프랑스, 그 해쉬 값(4E6A6F~) 및 파일 유형 (unknown) 등을 예시하 였다. 사용자는 예시하는 실시 예로부터 공격 대상이 되는 산업을 기준으로 사이버 위협 활동과 관련된 여러 가지 정 보를 얻을 수 있다. 도 64는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한다. 개시하는 실시 예는 사이버 위협 정보 중 특정 시점의 APT (Advanced Persistent Threat) 공격들 중 가장 높은 빈도에 따른 상위 APT 공격 정보를 제공할 수 있다. 이 예는 상위 APT 공격 정보를 리스트 형식으로 제공한 예를 개시하지만 다른 방식으로 표시할 수도 있다. APT (Advanced Persistent Threat)공격은 파일(F), IP 주소(IP), URL 주소, 인터넷 도메인 (Domain) 등을 다양 한 방식을 통해 이루어질 수 있는데 예시한 상위 APT 공격 정보는 각 공격 행위 마다 공격 그룹을 포함한 상세한 정보를 제공할 수 있다. 이 예에서 상위 APT 공격 정보는 APT 공격 별로 마지막 활동 시간, APT 공격 그룹, APT 공격과 관련된 파 일의 해쉬 값 정보, APT 공격과 관련된 IP 주소 정보 및 국가 정보, APT 공격과 관련된 URL 주소 정보, APT 공 격과 관련된 인터넷도메인 정보, APT 공격의 대상이 된 산업 정보 및 상기 APT 공격에 대한 상세 정보를 포함할 수 있다. 예를 들어 2번째로 빈도가 높은 상위 APT 공격 정보의 경우, APT 공격 그룹인 wizard spider 공격 그룹 이 마지막으로 활동한 시간 정보, 그 공격 그룹의 파일 해쉬 값들과 그 공격 대상 산업 정보 및 그 공격에 대한 상세 정보가 제공된다. 상세 정보는 별도의 선택 수단이나 아이콘을 통해 상세 정보 창으로 표시되거나 상세 정 보 창이 오버랩되어 표시될 수 있다. 사용자는 실시 예에 따른 인텔리전스 플랫폼이 제공하는 상위 APT 공격 정보로부터 시점에 따라 주의해야 할 APT 공격 그룹을 포함하는 공격 정보와 그 상세한 정보를 얻을 수 있다. 도 65는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한다. 개시하는 실시 예는 사이버 위협 정보 중 특정 공격 그룹과 관련된 IoC(Indicators of Compromise) 정보(814 0)를 제공할 수 있다. 이 예에서는 특정 공격 그룹과 관련되어 최신 날짜 상위 IoC 정보를 리스트 형식으로 예시하였는데, 다른 방식으로 제공할 수도 있다. 예를 들어 공격 그룹 Raspite와 관련된 IoC 정보의 경우, 최초 수집일에 따라 AI 알고리즘으로 판단한 공격 행위의 악성도(AI), 공격 행위와 관련된 해쉬 값, 공격 행위와 관련된 파일 유형, 공격 대상 국가, 공격"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "대상 산업 및 공격 행위와 관련된 요약 정보들을 제공할 수 있다. 이 예에서 공격 그룹 Raspite와 관련된 File는 76개, IP 주소는 10개, URL은 0개, 도메인은 7개가 있음을 예시 한다. 따라서, 사용자는 실시 예에 따른 인텔리전스 플랫폼이 제공하는 특정 공격 그룹과 관련된 IoC(Indicators of Compromise) 정보로부터 공격 그룹 중심의 IoC(Indicators of Compromise) 정보들을 시간에 따라 얻을 수 있다. 도 66은 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개시한 도면이다. 적어도 하나의 인터페이스를 통해 수신하거나 사용자로부터 파일 또는 파일에 대한 정보를 입력받는다(S8200). 사용자로부터 파일이나 정보의 예는 도 58 및 도 59에 예시하였다. 입력된 파일이나 정보와 관련된 사이버 위협 정보를 처리한다(S8210). 입력된 파일이나 정보와 관련된 사이버 위협 정보를 처리하는 실시 예는 위의 실시 예들에 개시하였다. 예를 들어 실행 파일에 대한 사이버 위협 정보의 처리하는 예는 도 1 내지 도 16에 예시하였고, 실행 파일 내 인스트럭션들의 논리 구조에 따라 사이버 위협 정보를 처리하는 예는 도 17 내지 도 27에 예시하였다. 입력된 파일이 비실행형 파일이거나 비실행형 파일과 관련된 사이버 위협 정보인 경우, 도 28 내지 도 44에 예 시하였다. 또한 사용자게 웹페이지에 관련된 데이터를 입력하는 경우 도 45 내지 도 57에 그 웹페이지와 관련된 사이버 위협 정보를 처리하는 예를 개시하였다. 이와 같이 실시간 처리되거나 기 처리된 사이버 위협 정보는 인텔리전스 플랫폼의 저장장치에 저장될 수도 있다. 상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공한다(S8230). 사용자에게 제공하는 사이버 위협 정보의 예는 도 60 내지 도 65에 예시하였다. 사용자는 인텔리전스 플랫폼의 인터페이스로부터 여러 가지 사이버 위협 정보를 얻을 수 있다. 인텔리전스 플랫 폼의 인터페이스는 시간 또는 지역별 사이버 위협 정보, 예를 들어 특정 시간 또는 현재 시간에, 지역적 또는 세계적으로 발생하는 사이버 위협 정보를 사용자에게 시각적으로 제공할 수 있다. 인텔리전스 플랫폼의 인터페이스는 시간 순서에 따라 나타난 사이버 위협 활동이나 사이버 위협 활동의 공격 유 형 별 정보를 사용자에게 제공할 수 있다. 인텔리전스 플랫폼의 인터페이스는 특정 시점의 APT (Advanced Persistent Threat) 공격들 중 가장 높은 빈도에 따른 상위 APT 공격 정보나 사이버 위협 정보 중 특정 공격 그룹과 관련된 IoC(Indicators of Compromise) 정보 등을 사용자에게 제공할 수 있다. 도 67은 실시 예에 따라 사이버 위협 정보를 처리하는 장치의 일 예를 개시한 도면이다. 사이버 위협 정보 처리 장치의 일 실시예는 프로세서를 포함하는 서버, 데이터베이스, 및 인텔리전 스 플랫폼을 포함할 수 있다. 서버의 프로세서는 응용 프로그램 인터페이스(Application Programming Interface) 를 통해 여러 가지 파일들 또는 파일들과 관련된 정보를 수신하거나 또는 온라인의 웹 크롤링 등으로 데이터를 수집하여 사이 버 위협 정보를 분석하고 제공할 수 있다. 서버 프로세서는 인텔리전스 플랫폼을 제공할 수 있는 데이터를 처리할 수 있다. 서버 프로 세서 또는 그에 의한 인텔리전스 플랫폼이 데이터를 처리하는 예를 설명하면 다음과 같다. 인텔리전스 플랫폼은 특정 사용자의 클라이언트로부터 파일이나 파일과 관련된 사이버 위협 정보 를 API을 통해 입력받을 수 있다. 예를 들어 사용자는 실행파일이나 비실행파일 또는 그 파일 등의 해쉬 값 등 사이버 위협 정보를 인텔리전스 플랫폼에 입력할 수 있다. 인텔리전스 플랫폼을 운영하는 서버는 자체적으로 인터넷 연결을 통해 외부의 웹사이트 등의 여러 가지 실행파일이나 비실행파일들을 직접 수집할 수도 있다. 인텔리전스 플랫폼 또는, 인텔리전스 플랫폼을 운영하는 서버의 프로세서는 사용자로부터 수신하거나 직접 수집한 파일들로부터 사이버 위협 정보를 분석하고 여러 사용자가 사이버 상의 공격들을 효율 적으로 인지할 수 있도록 여러 가지 정보를 제공하도록 할 수 있다. 입력 파일 또는 그 입력 파일과 관련된 사이버 위협 정보는 서버의 프로세서에서 위에서 개시한 실시 예 에 따라 처리되고, 처리된 사이버 위협 정보는 데이터베이스에 저장된다. 프레임워크 내의 여러 가지 처리 모듈(1211, 1213, 1215,..., 1219)들과 AI 엔진은 입력된 파일들 과 정보들을 여러 가지 실시 예에 따라 처리할 수 있다.예를 들어 실행 파일에 대한 사이버 위협 정보의 처리하는 예는 도 1 내지 도 16에 예시하였고, 실행 파일 내 인스트럭션들의 논리 구조에 따라 사이버 위협 정보를 처리하는 예는 도 17 내지 도 27에 예시하였다. 입력된 파일이 비실행형 파일이거나 비실행형 파일과 관련된 사이버 위협 정보인 경우, 도 28 내지 도 44에 예 시하였다. 또한 사용자에 웹페이지에 관련된 데이터를 입력하는 경우 도 45 내지 도 57에 그 웹페이지와 관련된 사이버 위협 정보를 처리하는 예를 개시하였다. 데이터베이스는 이미 분류된 악성 코드 또는 악성 코드의 패턴 코드 등 분석된 사이버 위협 정보를 저장 할 수 있다. 인텔리전스 플랫폼의 사용자 인터페이스는 위와 같이 처리되거나 저장된 사이버 위협 정보를 사용자에 제공한다. 인텔리전스 플랫폼가 사용자 인터페이스를 통해 제공하는 사이버 위협 정보의 예는 도 60 내지 도 65에 예시하였다. 사용자는 인텔리전스 플랫폼의 사용자 인터페이스로부터 여러 가지 사이버 위협 정보를 얻을 수 있다. 예를 들면 인텔리전스 플랫폼의 인터페이스는, 시간 및 지역별 사이버 위협 정보, 예를 들어 특정 시간 또는 현 재 시간에 지역적 또는 세계적으로 발생하는 사이버 위협 정보를 사용자에게 시각적으로 제공할 수 있다. 인텔리전스 플랫폼의 사용자 인터페이스는 시간 순서에 따라 나타난 사이버 위협 활동이나 사이버 위협 활동의 공격 유형 별 정보를 사용자에게 제공할 수 있다. 인텔리전스 플랫폼의 사용자 인터페이스는 특정 시점의 APT (Advanced Persistent Threat) 공격들 중 가장 높은 빈도에 따른 상위 APT 공격 정보나 사이버 위협 정보 중 특정 공격 그룹과 관련된 IoC(Indicators of Compromise) 정보 등을 사용자에게 제공할 수 있다. 따라서, 사용자는 인텔리전스 플랫폼을 통해 여러 가지 사이버 위협 정보를 실시간으로 또는 비실시간으 로 얻을 수 있다. 사용자는 인텔리전스 플랫폼을 통해 공격 활동에 관련된 상세한 정보나 공격 그룹, 공 격 국가 및 공격 대상 산업 등에 대한 상세한 정보를 얻을 수 있다. 이하에서는, 사이버 위협 정보를 사용자에게 제공할 수 있는 인텔리전스 플랫폼을 예시하는데, 특히 인텔리전스 플랫폼이 제공하는 웹 서비스에 포함되는 실시 예를 설명하도록 한다. 도 68은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 개시하는 실시 예는 사이버 위협 정보 중 특정 시점의 APT(Advanced Persistent Threat) 공격들에 대한 APT 공 격 정보 리스트를 제공할 수 있다. 특히, 실시 예의 APT 공격 정보 리스트는 기 설정된 기간(예를 들어, 상술한 실시 예에 따라 검색된 날짜 로부터 최근 1일, 최근 3일, 최근 7일, 최근 14일 등)의 APT 공격에 직간접적으로 활용된 악성 코드 정보를 포 함할 수 있다. 이때, 기 설정된 기간의 APT 공격 정보 리스트는 최근 APT 공격 리스트로 표시될 수 있다. 상술한 바와 같이 APT (Advanced Persistent Threat)공격은 파일(F), IP 주소(IP), URL 주소, 인터넷 도메인 (Domain) 등 다양한 방식을 통해 이루어질 수 있는데, APT 공격 정보 리스트에 포함된 공격 정보들은 공 격 그룹(공격자)에 기초하여 분류될 수 있다. 보다 상세하게는, 일 실시 예에서, APT 공격 정보 리스트는 알려진 공격 그룹에 포함된 APT 공격 정보 리 스트 또는 알려지지 않은 공격 그룹에 포함된 APT 공격 정보 리스트 중 적어도 하나를 포함할 수 있다. 현재 도 면 상에서, 일 실시 예로 APT 공격 정보 리스트는 알려진 공격 그룹에 포함된 APT 공격 정보 리스트 및 알려지지 않은 공격 그룹에 포함된 APT 공격 정보 리스트를 포함할 수 있다. 상술한 바와 같이 인텔리전스 플랫폼은 다양한 APT 공격에 대한 상세한 정보를 수집할 수 있다. 인텔리전스 플 랫폼은 수집된 APT 공격들을 미리 정해진 규칙에 기초하여 공격 그룹으로 분류할 수 있다. 이때, 공격 그룹명은 문자열 형식으로 정해진다. 이에 따라, 알려진 공격 그룹이란 APT 공격 정보가 수집된 시점에서 인텔리전스 플랫폼을 통해 해당 APT 공격 정보의 공격 그룹이 식별이 가능한 공격 그룹인 것을 특징으로 한다. 특히, 알려진 공격 그룹의 이름은 MITRE ATT&CK을 통하여 결정된 이름을 포함할 수 있다. 일 실시 예에서, 인텔리전스 플랫폼의 인터페이스는 알려진 공격 그룹에 포함된 APT 공격 정보 리스트와 알려지지 않은 공격 그룹에 포함된 APT 공격 정보 리스트를 선택적으로 출력할 수 있다. 이하, 본 도면에 서는 인텔리전스 플랫폼의 인터페이스가 알려진 공격 그룹에 포함된 APT 공격 정보 리스트를 출력 중인 경우를 설명한다. 일 실시 예에서, APT 공격 정보 리스트는 최초 수집일 정보, 공격 그룹 정보, AI 정보, 해쉬 값 정보, 파"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "일 유형 정보, 공격 대상 국가 정보, 공격 대상 산업 정보 및 요약 아이콘 중 적어도 하나를 포함할 수 있다. 특히, APT 공격 정보 리스트에 포함된 내용은 일 실시 예를 예시한 것뿐으로, APT 공격 정보를 나타내기 위한 다른 항목이 추가될 수 있으며, 해당 항목들의 이름은 변경이 가능하며 이름 자체에 한정되지 않음은 물론 이다. 본 도면에서, APT 공격 정보 리스트는 최초 수집일 정보, 공격 그룹 정보, AI 정보,"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "해쉬 값 정보, 파일 유형 정보, 공격대상 국가 정보, 공격대상 산업 정보 및 요약 아 이콘을 포함할 수 있다. 특히, 일 실시 예에서, 공격 그룹 정보, 공격대상 국가 정보 및 공격대상 산업 정보는 하나 의 캠페인으로 묶일 수 있기 때문에 APT 공격 정보 리스트 내에서 동일한 열에 위치할 수 있다. 예를 들 어, 본 도면에서는 공격 그룹 정보, 공격대상 국가 정보 및 공격대상 산업 정보가 각각 제 2 열, 제 5열, 제 6열에 나열된 것으로 도시되었으나, 공격 그룹 정보, 공격대상 국가 정보 및 공격 대상 산업 정보가 제 2 열에 함께 배치될 수 있다. 이에 대하여는 후술하도록 한다. 여기에서, 최초 수집일 정보는 해당하는 APT 공격에 직간접적으로 활용된 악성코드가 최초로 수집된 날짜 및 시간을 포함할 수 있다. 공격 그룹 정보는 상술한 바와 같이 해당하는 APT 공격에 직간접적으로 활용 된 악성코드가 이미 인텔리전스 플랫폼을 통하여 식별되었기 때문에, APT 공격 정보 리스트는 APT 공격에 직간접적으로 활용된 악성코드가 포함된 공격 그룹 정보를 나타낼 수 있다. 또한, AI 정보는 상술한 악성도 조건을 나타낼 수 있다. 보다 상세하게는, 인텔리전스 플랫폼은 APT 공격 에 직간접적으로 활용된 파일을 식별, 수집 및 분석하는 과정에서 해당 APT 공격에 직간접적으로 활용된 파일의 악성 정도를 점수로 판단할 수 있다. 이때, 인텔리전스 플랫폼은 상술한 AI 모듈을 이용하여 APT 공격에 직간접 적으로 활용된 파일의 악성 정도를 점수로 판단할 수 있다. 이를 위하여, AI 모듈은 악성 코드 패턴을 학습할 수 있고, APT 공격에 직간접적으로 활용된 파일이 얼마나 악성코드와 유사한지에 대한 점수를 계산하여 %로 나 타낼 수 있다. 일반적으로 인텔리전스 플랫폼은 악성도 점수가 50점 이상이면 악성 코드로 판단할 수 있다. 예 를 들어, 제 1 파일의 경우, 인텔리전스 플랫폼은 제 1 파일의 악성도 점수를 “”으로 판단할 수 있다. 반면, 제 2 파일의 경우, 인텔리전스 플랫폼은 제 2 파일의 악성도 점수를 “100”으로 판단 할 수 있다. 해쉬 값 정보, 파일 유형 정보, 공격대상 국가 정보 및 공격대상 산업 정보는 상술한 바와 같다. 이에 따라, 사용자는 실시 예에 따른 인텔리전스 플랫폼이 제공하는 APT 공격 정보에 대한 구체적인 내용을 하 나의 테이블(table) 형태로 볼 수 있다는 장점이 있다. 구체적으로, APT 공격 정보 리스트는 기 설정된 기간 내의 특정 APT 공격에 직간접적으로 활용된 악성 코드에 대한 최초 수집일 정보, 공격 그룹 정보 , 해쉬 값 정보, 파일 유형 정보, 공격대상 국가 정보 및 공격대상 산업 정보 를 모두 포함하고 있어 사용자가 한 페이지(page)에서 쉽게 APT 공격 정보를 파악할 수 있다는 장점이 있다. 도 69는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 상술한 실시 예와 달리, 본 도면에서는 알려지지 않은 공격 그룹에 포함된 APT 공격 정보 리스트를 설명 한다. 이외의 상술한 도면과 중복되는 설명은 생략하도록 한다. 일 실시 예에서, 인텔리전스 플랫폼은 해당하는 APT 공격에 직간접적으로 활용된 악성 코드에 대한 정보가 수집, 식별 및 분석 중 어느 하나의 단계에서 알려진 공격 그룹 중 하나로 결정되지 않는 경우, 알려지지 않은공격 그룹에 포함되는 것으로 판단할 수 있다. 이때, 알려지지 않은 공격 그룹의 경우, 공격 그룹의 이름이 아직 결정되지 않은 상태이기 때문에 인텔리전스 플랫폼은 알려지지 않은 공격 그룹의 임시 이름을 설정할 수 있다. 인텔리전스 플랫폼은 알려지지 않은 공격 그룹의 경우에도 임의로 이름을 붙여야 하는데, 자연어 딕셔너리 (natural language dictionary)들을 수집하여 3개의 단어를 조합할 수 있다. 이때, 인텔리전스 플랫폼은 알려지 지 않은 공격 그룹에 대하여 임의의 단어를 조합하는 것이 아니라 상술한 실시 예를 통한 악성 코드 수집 분류 클러스터링을 통하여 클러스터링된 특징을 기준으로 단어를 생성할 수 있다. 일 실시 예에서, 알려지지 않은 공격 그룹의 임시 이름은 제 1 단어, 제 2 단어 및 제 3 단어 중 적어도 하나의 조합으로 결정될 수 있다. 예를 들어, 제 1 단어는 제 1 카테고리에서 결정될 수 있고, 제 2 단어는 제 2 카테 고리에서 결정될 수 있고, 제 3 단어는 3글자의 숫자로 결정될 수 있다. 여기에서, 제 1 카테고리는 감정, 기분, 행위를 나타내는 단어를 예로 들 수 있고, 제 2 카테고리는 동물을 나타내는 단어를 예로 들 수 있다. 이에 따라, 제 3 파일의 알려지지 않은 공격 그룹의 임시 이름은 “Gratifying-Newt-757”로 결정될 수 있다. 마찬가지로, 제 4 파일의 알려지지 않은 공격 그룹의 임시 이름은 “Gratifying-Newt-757”로 결정 될 수 있다. 이는, 인텔리전스 플랫폼을 통하여 아직 제 3 파일과 제 4 파일의 공격 그룹이 결정되 지는 않았으나, 제 3 파일과 제 4 파일이 동일한 공격 그룹에 포함된다는 것을 알 수 있다. 이에 따라, 사용자는 아직 알려지지 않은 공격 그룹에 포함된 APT 공격 정보 리스트를 통하여 알려진 공 격 그룹에 포함된 APT 공격 정보와 마찬가지로 상세한 정보를 확인할 수 있다. 이하에서는, 상술한 실시 예인 알려진 공격 그룹에 포함된 APT 공격 정보 리스트 또는 알려지지 않은 공"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "격 그룹에 포함된 APT 공격 정보 리스트에 포함된 적어도 하나의 파일 중 임의의 파일의 요약 아이콘 을 선택한 경우 인텔리전스 플랫폼이 사용자에게 제공하는 화면을 설명하도록 한다. 도 70은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "APT 공격 정보의 요약 페이지는 팝업 창(pop-up window)으로 출력될 수 있으며, 팝업 창은 APT 공격에 직 간접적으로 활용된 악성 코드에 대한 파일 명, AI 정보, 대표 해쉬 값 정보, 해쉬 태그(#) 정보, 개요 정보, 해 쉬 값 정보, 위협 유형 정보, 패턴 탐지명, 공격 그룹 정보 또는 공격 대상 국가 정보 중 적어도 하나를 포함할"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 11, "content": "수 있다. 이때, APT 공격 정보의 요약 페이지에 포함된 항목은 APT 공격 정보를 나타내기 위하여 변경되 거나 추가될 수 있음은 물론이다. 본 도면에서의 팝업 창은 APT 공격에 직간접적으로 활용된 파일에 대한 AI 정보, 대표 해쉬 값 정보, 해 쉬 태그(#) 정보, 개요 정보, 해쉬 값 정보, 위협 유형 정보, 패턴 탐지명, 공 격 그룹 정보, 공격 대상 국가 정보를 포함할 수 있다. 보다 상세하게는, APT 공격에 직간접적으로 활용된 파일의 AI 정보는 상술한 바와 같으며, 대표 해쉬 값 정보"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "는 MD5 해쉬 값, SHA-1 해쉬 값 또는 SHA-256 해쉬 값 중 하나를 나타낼 수 있다. 이때, 요약 페이지 상에서 최상단에 출력되는 대표 해쉬 값 정보는 인텔리전스 플랫폼의 인터페이스 상에서 사용자가 APT 공격 정보의 검색을 위하여 입력한 해쉬 값에 대응할 수 있다. 또한, 해쉬 태그(#) 정보는 해당 APT 공격에 직간접적으로 활용된 악성 코드와 관련하여 상술한 실시 예 를 통하여 수집된 적어도 하나의 해쉬 태그(#)를 포함할 수 있다. 개요 정보는 APT 공격에 직간접적으로 활용된 악성 코드의 최초 수집된 날짜와 시간, 마지막으로 활동된 날짜와 시간, 파일 유형 및 파일 크기를 나타낼 수 있다. 해쉬 값 정보는 해당 APT 공격에 직간접적으로 활용된 악성 코드의 MD5 해쉬 값, SHA-1 해쉬 값 및 SHA- 256 해쉬 값 정보를 나타낼 수 있다. 위협 유형 정보는 악성 행위와 관련된 위협 유형 정보를 나타낼 수 있다. 예를 들어 trojan, riskware, downloader, phishing 등에 관련된 상세한 사이버 위협 정보를 제공할 수 있다. 패턴 탐지명은 해당 APT 공격에 직간접적으로 활용된 악성 코드의 패턴 이름을 나타낼 수 있다. 패턴 탐 지명은 패턴을 만든 사람이 패턴을 정의하기 위한 각종 정보를 포함하여 파싱(parsing)할 수 있는 형태로구성된다. 예를 들어, Gen:Variant Application.Babar.17593와 같은 패턴 탐지명은 Variant라는 변종 패 턴이며, Babar와 비슷한 패턴으로 17593의 고유 번호를 가지고 있는 것으로 해석될 수 있다. 즉, 패턴 탐지명 의 체계는 매우 다양하고 개인의 성향 또는 수준 중 적어도 하나에 기초하여 다르게 결정될 수 있다. 공격 그룹 정보는 상술한 바와 같이 해당 파일이 수집, 식별 및 분석 중 어느 하나의 단계에서 포함되는 공격 그룹을 나타낼 수 있다. 이때, 공격 그룹 정보는 해당 파일이 포함되는 적어도 하나의 공격 그룹을 나타낼 수 있다. 또한, 일 실시 예에서, 해당 파일은 하나의 공격 그룹이 아닌 적어도 하나 이상의 공격 그룹에 포함될 수 있다. 이 경우, 공격 그룹 정보은 적어도 하나 이상의 공격 그룹에 대한 내용을 포함할 수 있 다. 공격 대상 국가 정보는 해당 APT 공격에 직간접적으로 활용된 악성 코드의 공격 대상(target) 국가가 어 디인지 나타낼 수 있다. 특히, APT 공격에 직간접적으로 활용된 악성 코드가 공격 대상으로 하는 적어도 하나 이상의 국가가 포함될 수 있다. 일 실시 예에서, APT 공격에 직간접적으로 활용된 악성 코드에 대한 적어도 하 나 이상의 국가의 공격 점유율에 기초하여 백분율을 나타낼 수 있다. 예를 들어, 해당 APT 공격에 직간접적으로 활용된 악성 코드가 공격 대상 국가로 미국(US)만을 목표로 하는 경우, “미국 100%”와 같이 나타낼 수 있다. 또한, 일 실시 예에서 문자열이 아닌 세계 지도 상에 아이콘을 통하여 나타낼 수 있다. 도 71은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 일 실시 예에서, 인텔리전스 플랫폼은 APT 공격 정보에 대한 연관 그래프를 제공할 수 있다. APT 공격 정보에 대한 연관 그래프는 상술한 실시 예를 통하여 수집, 식별 및 분석된 하나의 파일에 대한 캠페인, 공격 그룹, 공격 기법, 공격 대상 국가, 공격 대상 산업, CVE 정보(여기에서, CVE 정보는 상술한 취약 점 정보에 대응한다.) 또는 IoC 정보 중 적어도 하나를 그래프 형태로 나타낼 수 있다. 이때, APT 공격 정보를 보다 잘 나타내기 위하여 연관 그래프에 포함되는 항목은 변경되거나 추가될 수 있음은 물론이다. 다만, 설명의 편의를 위하여 본 도면에서 APT 공격 정보에 대한 연관 그래프는 수집, 식별 및 분석된 하 나의 파일에 대한 캠페인, 공격 그룹, 공격 기법, 공격 대상 국가, 공격 대상 산업, CVE 정보(여기에서, CVE 정 보는 상술한 취약점 정보에 대응한다.) 및 IoC 정보를 그래프 형태로 나타낸 것을 예로 들어 설명한다. 여기에서, 캠페인은 공격 그룹의 하위 개념에 대응한다. 인텔리전스 플랫폼은 캠페인을 가장 먼저 식별할 수 있 다. 공격 그룹이 존재하고, 공격 그룹 내에서 공격 그룹이 수행하고 있는 캠페인들이 존재하게 된다. 예를 들어, 공격 그룹이 “kimsuky”라면, C-1(미국을 공격하는 캠페인), C-2(한국을 공격하는 캠페인), C-3(브라질 을 공격하는 캠페인) 등이 공격 그룹에 포함되게 된다. 이때, 캠페인 C-1, 캠페인 C-2 및 캠페인 C-3과 같은 캠 페인들은 개별 캠페인일수도 있고, 하나의 공격 그룹에 묶일 수도 있다. 예를 들어, 캠페인 C-2와 캠페인 C-3의 과거 히스토리를 비교했을 때, 기존의 알려진 공격 그룹과 연관이 되어 있으면, 해당 공격 그룹 하위에 캠페인 으로 포함될 수 있다. 또한, 캠페인 C-1의 캠페인이 개별적일 경우, 캠페인과 공격 그룹은 1:1 개념일수 있다. 즉, 논리적으로 캠페인은 공격 그룹 하위에 존재하며, 인텔리전스 플랫폼의 식별은 캠페인부터 시작된다. 일 실시 예에서, 연관 그래프에 포함된 APT 공격 정보에 대한 캠페인, 공격 그룹, 공격 기법, 공격 대상 국가, 공격 대상 산업, CVE 정보 및 IoC 정보는 아이콘으로 표현될 수 있다. 또한, 연관 그래프에 포함된 APT 공격 정보에 대한 캠페인, 공격 그룹, 공격 기법, 공격 대상 국가, 공격 대상 산업, CVE 정보 및 IoC 정보에 대응하는 아이콘들은 화살표 인디케이터를 사용해 서로 연결될 수 있다. 이 때, 화살표 인디케이터는 각각의 아이콘들 사이의 관계를 나타낼 수 있다. 이를 위하여, 화살표 인디케이터 사 이에는 각각의 아이콘들 사이의 관계를 나타내는 설명이 추가될 수 있다. 예를 들어, APT 공격 정보에 대한 제 1 캠페인이 APT 공격에 직간접적으로 활용된 제 1 파일을 지시(indicator)하는 경우, 연관 그래프는 제 1 캠페인에 대응하는 아이콘으로부터 제 1 파일에 대응하는 아이콘에게 “”라는 문자가 포함된 화살 표를 출력할 수 있다. 또한, 인텔리전스 플랫폼은 사용자가 연관 그래프에 포함된 임의의 아이콘을 선택하는 경우(예를 들어, PC로 연관 그래프를 확인 중인 경우 마우스로 아이콘을 선택하는 경우) 임의의 아이콘에 대응하는 설명 을 출력할 수 있다. 예를 들어, 사용자가 제 2 파일에 대응하는 아이콘을 선택하는 경우, 연관 그 래프는 제 2 파일에 대한 설명(8363, 예를 들어, 제 2 파일의 해쉬 값)을 출력할 수 있다. 또한, 인텔리전스 플랫폼은 APT 공격 정보에 대한 연관 그래프에 UX인터랙션(User experience interaction)을 제공할 수 있다. 보다 상세하게는, 상술한 바와 같이 연관 그래프는 APT 공격 정보에 대 한 캠페인에 대응하는 아이콘, 공격 그룹에 대응하는 아이콘, 공격 기법에 대응하는 아이콘, 공격 대상 국가에 대응하는 아이콘, 공격 대상 산업에 대응하는 아이콘, CVE 정보에 대응하는 아이콘 및 IoC 정보에 대응하는 아 이콘을 각각의 노드(node)로 구현할 수 있다. 이후, 인텔리전스 플랫폼은 연관 그래프 상에 포함된 하나 의 노드를 선택(예를 들어, PC로 연관 그래프를 확인 중인 경우, 마우스로 노드를 클릭한 후 드래그)하는 사용자 입력에 기초하여, 선택된 해당 노드를 중심으로 연관 그래프의 모양을 다르게 전환할 수 있다. 이에 따라, 사용자는 연관 그래프을 통하여 APT 공격 정보에 대한 캠페인, 공격 그룹, 공격 기법, 공격 대상 국가, 공격 대상 산업, CVE 정보 및 IoC 정보의 연관 관계를 한 번에 알아볼 수 있다. 도 72는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 일 실시 예에서, 인텔리전스 플랫폼은 상술한 연관 그래프에 포함된 캠페인 별 APT 공격 정보 테이블(8371, 8372)을 제공할 수 있다. APT 공격 정보 테이블(8371, 8372)은 공격 그룹 정보, 공격 대상 국가 정보, 공격 대 상 산업 정보, 공격 기법 정보, CVE 정보 또는 IoC 정보 중 적어도 하나를 포함할 수 있다. 상술한 바와 마찬가 지로, APT 공격 정보 테이블(8371, 8372)은 APT 공격 정보를 보다 잘 나타내기 위하여 APT 공격 정보 테이블 (8371, 8372)에 포함되는 항목은 변경되거나 추가될 수 있음은 물론이다. 일 실시 예에서, 본 도면에서의 APT 공격 정보 테이블(8371, 8372)은 공격 그룹 정보, 공격 대상 국가 정보, 공 격 대상 산업 정보, 공격 기법 정보, CVE 정보 및 IoC 정보를 포함할 수 있다. 또한, APT 공격 정보 테이블(8371, 8372)은 동일한 공격 그룹 내에서 다른 캠페인을 기준으로 분류될 수 있고, 다른 공격 그룹이 동일한 캠페인을 기준으로 분류될 수 있다. 여기에서, 캠페인에 대한 설명은 상술한 바와 같 다. 예를 들어, 제 1 APT 공격 정보 테이블은 공격 그룹 “PKPLUG MUSTANG PANDA”, 공격 대상 국가 “ KUWAIT”“”“KINGDOM”“”“”“”, 공격 대상 산업 “FINANCIAL-SERVICES”“”“SERVICES”, IoC 정보를 포함할 수 있다. 여기에서, IoC 정보는 해당 공격 그룹과 관련된 파일 정보, IP 정보, URL 정보 및 도메인 정보 를 포함할 수 있다. 또 다른 예를 들어, 제 2 APT 공격 정보 테이블은 공격 그룹 “PKPLUG MUSTANG PANDA”, 공격 대상 국가 “KUWAIT”“”“KINGDOM”“”공격 대상 산업 “FINANCIAL-SERVICES”“”“SERVICES”, IoC 정보를 포함할 수 있다. 상술한 실시 예는 제 1 APT 공격 정보 테이블과 제 2 APT 공격 정보 테이블이 동일한 공격 그룹을 예시하고 있으나, 다른 공격 그룹에 대한 정보를 포함할 수 있음은 물론이다. 하나의 APT 공격에는 여러 파일이 사용될 수 있기 때문에, 인텔리전스 플랫폼은 APT 공격에 직간접적으로 활용 된 파일 중 하나의 파일에 대한 분석 정보와 관련된 APT 공격(캠페인)과 연관된 정보를 제공할 수 있다. 이에 따라, 사용자는 APT 공격에 직간접적으로 활용된 하나의 악성 코드와 연관된 모든 공격 그룹, 공격 대상 국가, 공격 대상 산업, 공격 기법, CVE 정보 및 IoC 정보를 한 번에 볼 수 있다. 특히, 사용자가 APT 공격에 직간접적 으로 활용된 하나의 파일에 대한 정보를 요청하더라도, 인텔리전스 플랫폼은 요청된 APT 공격에 직간접적으로 활용된 파일에 연관된 다른 악성 코드에 대한 정보를 제공할 수 있다. 도 73은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 일 실시 예에서, 인텔리전스 플랫폼은 APT 공격에 직간접적으로 활용된 파일에 대한 코드 정보 테이블을 제공할 수 있다. 이때, 코드 정보 테이블은 시작 오프셋(Start Offset) 부터 종료 오프셋(End Offset)까 지의 정보 또는 공격 기법(Techniques)에 대응하는 정보 중 적어도 하나를 포함할 수 있다. 이때, APT 공격에 직간접적으로 활용된 파일을 보다 잘 나타내기 위하여 코드 정보 테이블에 포함되는 항목은 변경되거나 추가될 수 있음은 물론이다. 일 실시 예에서, 본 도면의 APT 공격에 직간접적으로 활용된 파일에 대한 코드 정보 테이블은 시작 오프 셋(Start Offset) 부터 종료 오프셋(End Offset)까지의 정보 및 공격 기법(Techniques)에 대응하는 정보 를 포함할 수 있다. 일 실시 예에서, 사용자가 코드 정보 테이블에 포함된 제 1 행을 선택(예를 들어, 사용자가 제 1 행의 일 지점을 클릭하는 경우)하는 경우, 인텔리전스 플랫폼은 제 1 행에 대한 구체적인 정보 테 이블을 더 제공할 수 있다. 여기에서, 제 1 행에 대한 구체적인 정보 테이블는 제 1 행 의 시작 오프셋부터 종료 오프셋 내에 포함된 오프셋에 대한 용량(bytes) 정보, 오피코드(OP-CODE) 정보 및 오퍼랜드(operand) 정보를 포함할 수 있다. 또한, 제 1 행에 대한 구체적인 정보 테이블는 시작 오프셋부터 종료 오프셋 내에 포함된 모든 오프셋에 대한 개별적인 정보를 포함하고 있기 때문에 오프셋 개수에 기초하여 스크롤 업 앤 다운(scroll up and down)이 가능하다. 파일마다 오프셋이 모두 다르며, 파일 내의 함수의 연산자인 오퍼랜드 및 오피코드가 모두 다르기 때문에 사용 자는 각각의 공격 기법에 대한 구체적인 정보 테이블를 통하여 오프셋 정보에 대한 용량 정보, 오피코드 정보 및 오퍼랜드 정보를 확인할 수 있다. 또한, 일 실시 예에서, 사용자가 제 1 공격 기법을 선택(예를 들어, 사용자가 제 1 공격 기법 위에 마우스 커서를 올려 놓는 경우)하는 경우, 인텔리전스 플랫폼은 제 1 공격 기법에 대한 정보를 더 출력할 수 있다. 여기에서, 제 1 공격 기법에 대한 정보는 제 1 공격 기법에 대한 명칭을 포 함할 수 있다. 예를 들어, 제 1 공격 기법이 “T1027”인 경우, 제 1 공격 기법에 대한 정보(838 6)는 “Defense Evasion Obfuscated Files or Information”을 포함할 수 있다. 여기에서, 제 1 공격 기법 에 대한 정보는 MITRE ATT&CK에 의해 분류된 14개의 전술(tactics)과 218개의 공격 기법 (Techniques)을 참조할 수 있다. 도 74는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 일 실시 예에서, 인텔리전스 플랫폼은 상술한 APT 공격에 직간접적으로 활용된 파일에 대한 유사 정보 테이블 을 더 제공할 수 있다. 보다 상세하게는, 인텔리전스 플랫폼은 APT 공격에 직간접적으로 활용된 하나의 파일에 대하여 기 설정된 기간(예를 들어, 최근 3개월) 동안 가장 유사한 n개(예를 들어, 5개)의 파일에 대한 정보를 제공할 수 있다. 이때, 인텔리전스 플랫폼은 상술한 악성 코드 분석 방법들을 통하여 APT 공격에 직간접 적으로 활용된 하나의 파일에 대하여 가장 유사한 n 개의 파일을 판단할 수 있다. 일 실시 예에서, 유사 정보 테이블은 APT 공격에 직간접적으로 활용된 파일과 관련하여 가장 유사한 n개 의 파일에 대한 정보를 제공할 수 있다. 여기에서, 유사 정보 테이블은 n개의 APT 공격에 직간접적으로 활용된 파일에 대한 최초 수집일 정보, 공격 그룹 정보, AI 정보, 해쉬 값 정보, 파일 유형 정보, 공격 대상 국가 정보 및 공격 대상 산업 정보를 포함할 수 있다. 이때, 해쉬 값 정보는 해쉬 값 이외에 적어도 하나 이상의 해쉬 태그(#) 및 적어도 하나 이상의 공격 기법에 대한 정보를 포함할 수 있다. 또한, 일 실시 예에서, 유사 정보 테이블은 유사 정보 테이블에 포함된 각각의 파일 정보에 대한"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 13, "content": "요약 페이지를 출력하기 위한 요약 아이콘을 더 출력할 수 있다. 사용자가 유사 정보 테이블에 포"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 14, "content": "함된 제 1 파일에 대한 자세한 내용을 확인하기 위하여 제 1 파일에 대응하는 요약 아이콘을 선택하는 경"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 15, "content": "우, 인텔리전스 플랫폼은 제 1 파일에 대한 요약 페이지를 출력하기 위한 팝업 창을 제공할 수 있다. 이에 대하 여는 상술한 바와 같다. 도 75는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 일 실시 예에서, 인텔리전스 플랫폼은 상술한 APT 공격과 동일한 공격 기법을 사용하는 파일 리스트를 더 제공할 수 있다. 보다 상세하게는, 인텔리전스 플랫폼은 APT 공격에 직간접적으로 활용된 파일에 대하여 기 설 정된 기간(예를 들어, 최근 3개월) 동안 동일한 공격 기법을 사용하는 적어도 n 개의(예를 들어, 5개) 파일을 포함하는 리스트를 제공할 수 있다. 해당 APT 공격에 직간접적으로 활용된 파일과 동일한 공격 기법을 사용하는 파일 리스트는 제 n개의 파일 에 대한 최초 수집일 정보, 공격 그룹 정보, AI 정보, 해쉬 값 정보, 파일 유형 정보, 공격 대상 국가 정보, 공"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 16, "content": "격 대상 산업 정보 또는 요약 아이콘 중 적어도 하나를 포함할 수 있다. 파일 리스트에 포함되는 항목은 APT 공격에 직간접적으로 활용된 파일과 동일한 동일한 공격 기법을 사용하는 파일을 파악하기 위한 것으로, 파 일 리스트에 포함되는 항목은 변경되거나 추가될 수 있음은 물론이다. 일 실시 예에서, 본 도면에서의 APT 공격에 직간접적으로 활용된 파일과 동일한 공격 기법을 사용하는 파일 리 스트는 제 n 개의 파일에 대한 최초 수집일 정보, 공격 그룹 정보, AI 정보, 해쉬 값 정보, 파일 유형 정"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 17, "content": "보, 공격 대상 국가 정보, 공격 대상 산업 정보 및 요약 아이콘을 포함할 수 있다. 이때, APT 공격에 직간접적으로 활용된 파일과 동일한 공격 기법을 사용하는 파일 리스트에 포함된 최초 수집일 정보, 공격 그룹 정보, AI 정보, 해쉬 값 정보, 파일 유형 정보, 공격 대상 국가 정보, 공격 대상 산업"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 18, "content": "정보 및 요약 아이콘에 대한 자세한 설명은 상술한 바와 같다. 즉, 사용자가 APT 공격에 직간접적으로 활용된 파일과 동일한 공격 기법을 사용하는 파일 리스트에 포함"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 19, "content": "된 제 1 파일에 대한 자세한 내용을 확인하기 위하여 제 1 파일에 대응하는 요약 아이콘을 선택하는 경우, 인텔"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 20, "content": "리전스 플랫폼은 제 1 파일에 대한 요약 페이지를 출력하기 위한 팝업 창을 제공할 수 있다. 이에 대하여는 상 술한 바와 같다. 이를 통하여, 사용자는 APT 공격에 직간접적으로 활용된 하나의 파일에 대한 유사 정보 테이블 및 동일한 공격 기법을 사용하는 파일 리스트를 확인함으로써 APT 공격에 직간접적으로 활용된 파일과 관련된 다른 파일에 대하여 미리 확인할 수 있다는 장점이 있다. 도 76은 개시하는 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개시한 도면이다. 사용자 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력받는다(S83000). 사용자로부터 입력받는 파일이나 정보의 예는 도 58 및 도 59에 예시하였다. 입력된 파일이나 정보와 관련된 사이버 위협 정보를 처리한다(S83100). 입력된 파일이나 정보와 관련된 사이버 위협 정보를 처리하는 실시 예는 위의 실시 예들에 개시하였다. 예를 들어 실행 파일에 대한 사이버 위협 정보 의 처리하는 예는 도 1 내지 도 16에 예시하였고, 실행 파일 내 인스트럭션들의 논리 구조에 따라 사이버 위협 정보를 처리하는 예는 도 17 내지 도 27에 예시하였다. 입력된 파일이 비실행형 파일이거나 비실행형 파일과 관 련된 사이버 위협 정보인 경우, 도 28 내지 도 44에 예시하였다. 또한 사용자가 웹페이지에 관련된 데이터를 입 력하는 경우 도 45 내지 도 57에 그 웹페이지와 관련된 사이버 위협 정보를 처리하는 예를 개시하였다. 이와 같 이 실시간 처리되거나 기 처리된 사이버 위협 정보는 인텔리전스 플랫폼의 저장장치에 저장될 수도 있다. 상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공한다(S83200). 사용자에게 제공하는 사이버 위협 정보의 예는 도 58 내지 도 75에 예시하였다. 이에 따라, 사용자는 인텔리전 스 플랫폼의 인터페이스로부터 여러 가지 사이버 위협 정보를 얻을 수 있다. 특히, 인텔리전스 플랫폼의 인터페 이스는 특정 시점의 APT(Advanced Persistent Threat) 공격들에 대한 APT 공격 정보 리스트를 제공할 수 있다. 이때, 인텔리전스 플랫폼의 인터페이스는 해당하는 APT에 사용된 파일에 대한 정보가 수집, 식별 및 분석 중 어 느 하나의 단계에서 알려진 공격 그룹 중 하나로 결정되지 않는 경우, 알려지지 않은 공격 그룹에 포함되는 것으로 판단할 수 있다. 이에 따라, 인텔리전스 플랫폼은 알려진 공격 그룹에 포함된 APT 공격 리스트와 알려지지 않은 공격 그룹에 포함된 APT 공격 리스트를 개별적으로 사용자에게 제공할 수 있다. 또한, 인텔리전스 플랫폼 은 인터페이스를 통하여 APT 공격에 직간접적으로 활용된 파일에 대한 AI 정보, 대표 해쉬 값 정보, 해쉬 태그 (#) 정보, 개요 정보, 해쉬 값 정보, 위협 유형 정보, 패턴 탐지명, 공격 그룹 정보, 공격 대상 국가 정보 등을 제공할 수 있다. 도 77은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하는 장치의 일 예를 개시한 도면이다. 사이버 위협 정보 처리 장치의 일 실시예는 프로세서를 포함하는 서버, 데이터베이스, 및 인텔리전 스 플랫폼을 포함할 수 있다. 서버의 프로세서는 응용 프로그램 인터페이스(Application Programming Interface) 를 통해 여러 가지 파일 또는 관련된 정보를 수신하거나 또는 온라인의 웹 크롤링 등으로 데이터를 수집하여 사이버 위협 정 보를 분석하고 제공할 수 있다. 인텔리전스 플랫폼은 특정 사용자의 클라이언트로부터 파일이나 파일과 관련된 사이버 위협 정보 를 API을 통해 입력받을 수 있다. 예를 들어 사용자는 실행파일이나 비실행파일 또는 그 파일 등의 해쉬 값 등 사이버 위협 정보를 인텔리전스 플랫폼에 입력할 수 있다.인텔리전스 플랫폼을 운영하는 서버는 자체적으로 인터넷 연결을 통해 외부의 웹사이트 등의 여러 가지 실행파일이나 비실행파일들을 직접 수집할 수도 있다. 인텔리전스 플랫폼 또는, 인텔리전스 플랫폼을 운영하는 서버는 사용자로부터 수신하거나 직접 수집한 파일들로부터 사이버 위협 정보를 분석하고 여러 사용자가 사이버 상의 공격들을 효율적으로 인지 할 수 있도록 여러 가지 정보를 제공할 수 있다. 입력 파일 또는 그 입력 파일과 관련된 사이버 위협 정보는 서버의 프로세서에서 위에서 개시한 실시 예 에 따라 처리되고, 처리된 사이버 위협 정보는 데이터베이스에 저장된다. 프레임워크 내의 여러 가지 처리 모듈(1211, 1213, 1215, ..., 1219)들과 AI 엔진은 입력된 파일 들과 정보들을 여러 가지 실시 예에 따라 처리할 수 있다. 예를 들어 실행 파일에 대한 사이버 위협 정보의 처리하는 예는 도 1 내지 도 16에 예시하였고, 실행 파일 내 인스트럭션들의 논리 구조에 따라 사이버 위협 정보를 처리하는 예는 도 17 내지 도 27에 예시하였다. 입력된 파일이 비실행형 파일이거나 비실행형 파일과 관련된 사이버 위협 정보인 경우, 도 28 내지 도 44에 예 시하였다. 또한 사용자에 웹페이지에 관련된 데이터를 입력하는 경우 도 45 내지 도 57에 그 웹페이지와 관련된 사이버 위협 정보를 처리하는 예를 개시하였다. 데이터베이스는 이미 분류된 악성 코드 또는 악성 코드의 패턴 코드 등 분석된 사이버 위협 정보를 저장 할 수 있다. 인텔리전스 플랫폼의 사용자 인터페이스는 위와 같이 처리되거나 저장된 사이버 위협 정보를 사용자에 제공한다. 인텔리전스 플랫폼가 사용자 인터페이스를 통해 제공하는 사이버 위협 정보의 예는 도 58 내지 도 75에 예시하였다. 보다 상세하게는, 사용자는 인텔리전스 플랫폼의 사용자 인터페이스로부터 여러 가지 사이버 위 협 정보를 얻을 수 있다. 예를 들면, 인텔리전스 플랫폼의 사용자 인터페이스는 특정 시점의 APT(Advanced Persistent Threat) 공격들에 대한 APT 공격 정보 리스트를 사용자에게 시각적으로 제공할 수 있 다. 또한, 인텔리전스 플랫폼은 APT 공격에 직간접적으로 활용된 파일에 대한 APT 공격 정보 리스트를 사용 자에게 제공하기 위하여 APT 공격에 직간접적으로 활용된 파일을 공격 그룹에 기초하여 분류할 수 있다. 이때, 인텔리전스 플랫폼은 수집, 식별 및 분석 등 처리된 파일이 알려진 공격 그룹이라면, 알려진 공격 그룹 APT 공 격 리스트 상에 출력하고, 알려지지 않은 공격 그룹이라면, 알려지지 않은 공격 그룹 APT 공격 리스트 상에 출 력할 수 있다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 21, "content": "또한, 인텔리전스 플랫폼은 APT 공격 정보의 요약 페이지를 통하여 사용자에게 APT 공격에 직간접적으로 활용된 파일에 대한 AI 정보, 대표 해쉬 값 정보, 해쉬 태그(#) 정보, 개요 정보, 해쉬 값 정보, 위협 유형 정 보 패턴 탐지명, 공격 그룹 정보, 공격 대상 국가 정보를 제공할 수 있다. 또한, 인텔리전스 플랫폼은 APT 공격 정보에 대한 연관 그래프를 제공할 수 있다. APT 공격 정보에 대한 연관 그래프는 상술한 실시 예를 통하여 수집, 식별 및 분석된 APT 공격에 직간접적으로 활용된 파일에 대한 캠 페인, 공격 그룹, 공격 기법, 공격 대상 국가, 공격 대상 산업, CVE 정보(여기에서, CVE 정보는 상술한 취약점 정보에 대응한다.) 및 IoC 정보를 그래프 형태로 나타낼 수 있다. 인텔리전스 플랫폼은 상술한 연관 그래프에 포함된 캠페인 별 APT 공격 정보 테이블을 제공할 수 있다. 또한, 인텔리전스 플랫폼은 APT 공격에 직간접적으로 활용된 파일에 대한 코드 정보 테이블을 제공할 수 있다. 코드 정보 테이블은 시작 오프셋(Start Offset) 부터 종료 오프셋(End Offset)까지의 정보 및 공격 기법 (Techniques)에 대응하는 정보를 포함할 수 있다. 일 실시 예에서, 인텔리전스 플랫폼은 상술한 APT 공격에 직간접적으로 활용된 파일에 대한 유사 정보 테이블을 더 제공할 수 있다. 여기에서, 유사 정보 테이블은 n개의 파일에 대한 최초 수집일 정보, 공격 그룹 정보, AI 정보, 해쉬 값 정보, 파일 유형 정보, 공격 대상 국가 정보 및 공격 대상 산업 정보를 포함할 수 있다.일 실시 예에서, 인텔리전스 플랫폼은 상술한 APT 공격에 직간접적으로 활용된 파일과 동일한 공격 기법 을 사용하는 파일 리스트를 더 제공할 수 있다. APT 공격에 직간접적으로 활용된 파일과 동일한 공격 기법을 사 용하는 파일 리스트는 제 n개의 파일에 대한 최초 수집일 정보, 공격 그룹 정보, AI 정보, 해쉬 값 정보, 파일"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 22, "content": "유형 정보, 공격 대상 국가 정보, 공격 대상 산업 정보 및 요약 아이콘을 포함할 수 있다. 따라서, 사용자는 인텔리전스 플랫폼을 통해 여러 가지 사이버 위협 정보를 실시간으로 또는 비실시간으 로 얻을 수 있다. 사용자는 인텔리전스 플랫폼을 통해 공격 활동에 관련된 상세한 정보나 공격 그룹, 공 격 국가 및 공격 대상 산업 등에 대한 상세한 정보를 얻을 수 있다. 도 78은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 일 실시 예에서, 인텔리전스 플랫폼은 상술한 실시 예를 통하여 처리된 사이버 위협 정보에 대한 적어도 하나 이상의 공격 그룹 정보를 제공할 수 있다. 여기에서, 공격 그룹 정보는 공격 그룹 명, 유입 경로 정보, 공격 대상 국가 정보, 공격 대상 산업 정보, 제작 도구 또는 프로그램 정보 중 적어도 하나를 포함할 수 있다. 이때, 공격 그룹 정보에 포함된 항목은 공격 그룹을 설명하기 위한 항목들로 항목은 추가 또는 변 경될 수 있음은 물론이다. 본 도면의 공격 그룹 정보는 공격 그룹 명, 유입 경로 정보, 공격 대상 국가 정보, 공격 대상 산업 정보, 제작 도구 및 프로그램 정보를 포함할 수 있다. 제 1 공격 그룹을 예로 들어 설명하면, 인텔리전스 플랫폼이 제공하는 공격 그룹 정보에 따르면, 사용자는 제 1 공격 그룹의 이름은 “APT30”이며, 관련 그룹 명은 “Override Panda”이고, 제 1 공격 그룹에 대한 설명과 제 1 공격 그룹이 목표(target)으로 하는 공격 대상 국가는 말레이시아, 베트 남, 태국, 대한민국, 인도 및 미국 등이며, 공격 대상 산업은 “정부”, “국방”, “미디어” 및 “해양”에 대응하는 것을 알 수 있다. 또한, 제 1 공격 그룹의 발생 국가(예를 들어, 중국)를 아이콘 형태로 표시하 여 사용자는 해당 공격 그룹이 어느 국가로부터 기원(origin)되었는지 한눈에 알 수 있다. 마찬가지로, 제 2 공격 그룹을 예로 들어 설명하면, 인텔리전스 플랫폼이 제공하는 공격 그룹 정보(840 0)에 따르면, 사용자는 제 2 공격 그룹의 이름은 “APT29”이며, 관련 그룹 명은 “IRON RITUAL”“ HEMLOCK”“bleBaron”“Halo”이고, 제 2 공격 그룹에 대한 설명과 제 2 공격 그룹이 목표로 하 는 공격 대상 국가, 공격 대상 산업을 알 수 있다. 또한, 인텔리전스 플랫폼이 적어도 하나 이상의 공격 그룹 정보에 대하여 제공하는 보다 상세한 정보에 대하여는 후술하도록 한다. 보다 자세한 정보를 확인하기 위하여 사용자는 제 1 공격 그룹을 선택할 수 있다. 도 79는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 이하에서는, 사용자가 상술한 적어도 하나 이상의 공격 그룹 정보 중 제 1 공격 그룹을 선택한 실시 예를 설명 하도록 한다. 인텔리전스 플랫폼은 제 1 공격 그룹에 대한 정보를 제공할 수 있다. 제 1 공격 그룹에 대한 정보 는 제 1 공격 그룹의 이름, 발생 국가 정보, 설명, 관련 그룹명, 공격 대상 산업 정보, 유입 경로 정보, 제작 도구 및 프로그램 정보, 관련 사건, 대상 조직 정보 또는 주요 공격 대상 국가 정보 중 적어도 하나를 포함할 수 있다. 이때, 제 1 공격 그룹 정보에 포함된 항목은 공격 그룹을 설명하기 위한 항목들로 항목은 추가 또는 변경될 수 있음은 물론이다. 본 도면에서 설명하는 제 1 공격 그룹에 대한 정보는 제 1 공격 그룹의 이름, 발생 국가 정보, 설명, 관 련 그룹명, 공격 대상 산업 정보, 유입 경로 정보, 제작 도구 및 프로그램 정보, 관련 사건 및 대상 조직 정보, 주요 공격 대상 국가 정보를 포함할 수 있다. 제 1 공격 그룹에 대한 정보에 포함된 내용에 대한 설명은 상술한 바와 같다. 일 실시 예에서, 인텔리전스 플랫폼은 제 1 공격 그룹의 주요 공격 대상 국가 정보를 나타내기 위하여 세계 지 도 상에 제 1 공격 그룹의 기원(origin) 국가의 위치와 공격 대상 국가의 위치를 별개의 아이콘으로 나타낼 수있으며, 기원 국가와 공격 대상 국가를 화살표 인디케이터로 연결하여 그 둘의 관계를 나타낼 수 있다. 또한, 일 실시 예에서, 인텔리전스 플랫폼은 제 1 공격 그룹에 대한 정보와 함께 제 1 공격 그룹에 대응 하는 타임라인 아이콘을 출력할 수 있다. 사용자가 제 1 공격 그룹에 대응하는 타임라인 아이콘을 선택하는 경우, 제 1 공격 그룹에 대한 타임라인을 출력할 수 있다. 이는 후술하도록 한다. 또한, 일 실시 예에서, 인텔리전스 플랫폼이 제공하는 제 1 공격 그룹에 대한 정보는 시각화 그래프를 더 포함할 수 있다. 이는 후술하도록 한다. 도 80은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 일 실시 예에서, 인텔리전스 플랫폼은 공격 그룹에 대한 타임라인을 제공할 수 있다. 이때, 인텔리전스"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 23, "content": "플랫폼은 타임라인 상에 날짜(연, 월, 일 중 적어도 하나) 또는 공격 내용의 요약 중 적어도 하나를 출력 할 수 있다. 상술한 바와 같이, 공격 그룹에 대한 타임라인은 공격 그룹이 시간 순서로 공격을 시도한 히 스토리(history)를 나타낸 것으로 히스토리를 설명하기 위한 다른 항목이 추가 또는 변경될 수 있음은 물론이다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 24, "content": "본 도면의 타임라인은 날짜(연, 월, 일 중 적어도 하나) 및 공격 내용의 요약을 출력할 수 있다. 또한, 일 실시 예에서, 인텔리전스 플랫폼은 공격 그룹에 대한 타임라인을 날짜 중 적어도 하나를 기준으 로 오름차순 또는 내림차순으로 정렬할 수 있다. 공격 그룹에 대한 타임라인은 해당하는 공격 그룹에 대한 사이버 위협 활동을 시간 순서에 따라 나타낸 것이다. 공격 그룹에 대한 타임라인을 살펴보기 위하여, 제 2 공격 그룹을 예로 들어 설명하도록 한다. 인텔리전스 플랫폼은 타임라인 상에 제 2 공격 그룹이 시간 순서에 따라 공격을 시도한 내용을 나 타낼 수 있다. 보다 상세하게는, 타임라인을 살펴보면, 먼저, 제 2 공격 그룹은 2014년 3월 워싱턴 DC에 기반을 둔 사설 연구서에 악성 실행 파일이 포함된 플래시 비디오를 클릭하게끔 유도한 스피어 피싱 공격 을 시도하였으며, 2015년 8월에는 펜타곤 이메일 시스템에 대한 스피어 피싱 공격을 시도하였으며, 2016년에는 미국에 기반을 둔 싱크 탱크와 비정부 기구(NGO)를 대상으로 스피어 피싱 공격을 시도하였다. 또한, 2016년 6월 에는 민주당 전국위원회(DNC)를 대상으로 공격했으며, 2017년 1월에는 국방부, 외무부, 노동당 소속의 개인 이 메일 계정을 대상으로 스피어 피싱 공격을 시도했으며, 2017년 2월에는 네덜란드 정부 부처를 대상으로 비밀 정 부 문서를 탈취하기 위해 공격을 시도했다. 또한, 2020년에는 캐나다, 미국, 영국의 COVID-19 백신 개발과 관련 된 다양한 정보를 탈취하고자 했으며, 2021년에는 미국 국제개발처(USAID)를 사칭해 정부 기관 및 인권 단체를 포함한 여러 조직을 공격했으며, 2022년에는 NATO 국가의 외교 정책 정보에 액세스할 목적으로 마이크로소프트 365 계정을 공격했으며, 2022년 1월에는 HTML smuggling 기술과 스피어 피싱 기법을 이용하여 외교관 및 정부에 대한 공격을 시도했다. 사용자는 인텔리전스 플랫폼이 제공하는 타임라인을 통해 공격 그룹이 시간 순서대로 어떠한 공격을 시도 하였는지 한눈에 파악할 수 있다. 도 81은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 일 실시 예에서, 인텔리전스 플랫폼은 APT 공격 정보에 대한 시각화 그래프를 제공할 수 있다. 이하에서 는, 인텔리전스 플랫폼에 제공하는 시각화 그래프에 대하여 자세히 설명하도록 한다. 특히, 시각화 그래 프는 하나의 공격 그룹을 선택하였을 때, 해당 공격 그룹이 일반적으로 사용하는 공격 기법을 나타낼 수 있다. 보다 상세하게는, 인텔리전스 플랫폼은 해당 공격 그룹과 연관된 악성 코드를 분석해서 나온 공격 기법들 을 통계내서 해당 공격 그룹이 주로 사용하는 공격 기법 정보를 추출할 수 있고, 이를 시각화 그래프에 나타낼 수 있다."}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 25, "content": "또한, 시각화 그래프는 상술한 APT 공격 정보의 요약 페이지 하단에 출력되거나 사용자가 APT 공격 정보를 선택하는 경우 상세화면의 일부로써 또는 공격 그룹에 대한 정보 하단에 출력될 수 있다. 인텔리전스 플랫폼은 상술한 실시 예에 따라 공격 기법에 대해 분석할 수 있다. 이때, 분석 결과에 기초하여 공 격 기법을 출력할 수 있고, 특히, 공격 기법을 MITRE ATT&CK 매트릭스에 대응시켜 출력할 수 있다. 보다 상세하게는, 분석이 완료된 하나의 APT 공격에 사용된 전술과 공격 기법은 MITRE ATT&CK으로 14개의 전술 (tactics)과 218개의 공격 기법(Techniques) 중 적어도 하나로 분류할 수 있다. 이때, 일 실시 예는 분석이 완료된 하나의 APT 공격에 대해 모든 전술과 모든 공격 기법에 대해 나타내는 것은 시각적으로 좋지 않기 때문에, 본 발명은 분석된 APT 공격에 사용된 전술과 공격 기법만을 다르게 나타내는 방 법을 특징으로 한다. 보다 상세하게는, 시각화 그래프는 APT 공격에 사용된 공격 기법에 대응하는 블록(block)을 제 1 색상으 로 음영 처리하여 출력하고, 전술에 대응하는 블록을 제 2 색상으로 음영 처리하여 출력할 수 있다. 예를 들어, APT 공격에 사용된 12개의 공격 기법에 대응하는 블록에 대하여 블록들을 제 1 색상으로 음영 처리 하여 출력하고, 5개의 전술에 대응하는 블록들을 제 2 색상으로 음영 처리하여 출력할 수 있다. 일 실시 예에서, 제 1 색상은 제 2 색상보다 채도가 높은 색상을 특징으로 한다. 예를 들어, 인텔리전스 플랫폼 은 시각화 그래프 상에서 제 2 색상은 연한 빨간색, 제 1 색상은 진한 빨간색으로 출력할 수 있다. 이를 통해, 인텔리전스 플랫폼은 APT 공격에 대하여 사용된 전술에 대응하는 블록은 연한 빨간색으로 음영 처리하여 출력하고, 사용된 공격 기법에 대응하는 블록은 진한 빨간색으로 음영 처리하여 출력할 수 있다. 즉, 분석된 APT 공격에 대하여 사용된 전술에 대응하는 세로 블록들이 연한 빨간색으로 음영 처리되어 출력되고, 이 중 공 격 기법에 대응하는 블록들이 진한 빨간색으로 음영 처리되어 출력될 수 있다. 따라서, 본 발명의 시각화 그래프을 이용하는 사용자는 APT 공격에 사용된 전술과 공격 기법을 한눈에 알 아볼 수 있다는 장점이 있다. 일 실시 예에서, 인텔리전스 플랫폼은 APT 공격에 사용된 공격 기법의 총 개수를 출력할 수 있다. 예를 들어, 인텔리전스 플랫폼은 화면 최상단에 선택된 APT 공격에 사용된 공격 기법의 총 개수가 12개인 것을 출력할 수 있다. 또한, 인텔리전스 플랫폼은 APT 공격에 사용된 전술과 공격 기법을 매트릭스로 표현하는 것 이외에도 시각화 그 래프 밖 일 영역에 표를 통해, 시각화 그래프에 대응하는 전술, T-ID(Technique ID), 공격 기법 및 서브 공격 기법(Sub-Techniques)에 대한 구체적인 이름을 출력할 수 있다. 도 82는 개시하는 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개시한 도면이다. 사용자 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력받는다(S84000). 사용자로부터 입력받는 파일이나 정보의 예는 도 58 및 도 59에 예시하였다. 입력된 파일이나 정보와 관련된 사이버 위협 정보를 처리한다(S84100). 입력된 파일이나 정보와 관련된 사이버 위협 정보를 처리하는 실시 예는 위의 실시 예들에 개시하였다. 예를 들어 실행 파일에 대한 사이버 위협 정보 의 처리하는 예는 도 1 내지 도 16에 예시하였고, 실행 파일 내 인스트럭션들의 논리 구조에 따라 사이버 위협 정보를 처리하는 예는 도 17 내지 도 27에 예시하였다. 입력된 파일이 비실행형 파일이거나 비실행형 파일과 관 련된 사이버 위협 정보인 경우, 도 28 내지 도 44에 예시하였다. 또한 사용자가 웹페이지에 관련된 데이터를 입 력하는 경우 도 45 내지 도 57에 그 웹페이지와 관련된 사이버 위협 정보를 처리하는 예를 개시하였다. 이와 같 이 실시간 처리되거나 기 처리된 사이버 위협 정보는 인텔리전스 플랫폼의 저장장치에 저장될 수도 있다. 상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공한다(S84200). 사용자에게 제공하는 사이버 위협 정보의 예는 도 58 내지 도 81에 예시하였다. 이에 따라, 사용자는 인텔리전 스 플랫폼이 제공하는 인터페이스로부터 여러 가지 사이버 위협 정보를 얻을 수 있다. 특히, 인텔리전스 플랫폼의 인터페이스는 상술한 실시 예를 통하여 처리된 사이버 위협 정보에 대한 적어도 하 나 이상의 공격 그룹 정보를 제공할 수 있다. 여기에서, 공격 그룹 정보는 공격 그룹 명, 유입 경로 정보, 공격 대상 국가 정보, 공격 대상 산업 정보, 제작 도구 및 프로그램 정보를 포함할 수 있다. 또한, 인텔리전스 플랫폼은 제 1 공격 그룹에 대한 정보를 제공할 수 있다. 제 1 공격 그룹에 대한 정보는 제 1 공격 그룹의 이름, 발생 국가 정보, 설명, 관련 그룹명, 공격 대상 산업 정보, 유입 경로 정보, 제작 도구 및프로그램 정보, 관련 사건 및 대상 조직 정보, 주요 공격 대상 국가 정보를 포함할 수 있다. 또한, 인텔리전스 플랫폼은 공격 그룹에 대한 타임라인을 제공할 수 있다. 이때, 인텔리전스 플랫폼은 타임라인"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 26, "content": "상에 날짜(연, 월, 일 중 적어도 하나) 및 공격 내용의 요약을 출력할 수 있다. 또한, 일 실시 예에서, 인텔리 전스 플랫폼은 공격 그룹에 대한 타임라인을 날짜 중 적어도 하나를 기준으로 오름차순 또는 내림차순으로 정렬 할 수 있다. 또한, 인텔리전스 플랫폼은 APT 공격 정보에 대한 시각화 그래프를 제공할 수 있다. 여기에서, 시각화 그래프는 APT 공격에 사용된 공격 기법에 대응하는 블록(block)을 제 1 색상으로 음영 처리하여 출력하고, 전술에 대응하 는 블록을 제 2 색상으로 음영 처리하여 출력할 수 있다. 도 83은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하는 장치의 일 예를 개시한 도면이다. 사이버 위협 정보 처리 장치의 일 실시예는 프로세서를 포함하는 서버, 데이터베이스, 및 인텔리전 스 플랫폼을 포함할 수 있다. 서버의 프로세서는 응용 프로그램 인터페이스(Application Programming Interface) 를 통해 여러 가지 파일 또는 관련된 정보를 수신하거나 또는 온라인의 웹 크롤링 등으로 데이터를 수집하여 사이버 위협 정 보를 분석하고 제공할 수 있다. 인텔리전스 플랫폼은 특정 사용자의 클라이언트로부터 파일이나 파일과 관련된 사이버 위협 정보 를 API을 통해 입력받을 수 있다. 예를 들어 사용자는 실행파일이나 비실행파일 또는 그 파일 등의 해쉬 값 등 사이버 위협 정보를 인텔리전스 플랫폼에 입력할 수 있다. 인텔리전스 플랫폼을 운영하는 서버는 자체적으로 인터넷 연결을 통해 외부의 웹사이트 등의 여러 가지 실행파일이나 비실행파일들을 직접 수집할 수도 있다. 인텔리전스 플랫폼 또는, 인텔리전스 플랫폼을 운영하는 서버는 사용자로부터 수신하거나 직접 수집한 파일들로부터 사이버 위협 정보를 분석하고 여러 사용자가 사이버 상의 공격들을 효율적으로 인지 할 수 있도록 여러 가지 정보를 제공할 수 있다. 입력 파일 또는 그 입력 파일과 관련된 사이버 위협 정보는 서버의 프로세서에서 위에서 개시한 실시 예 에 따라 처리되고, 처리된 사이버 위협 정보는 데이터베이스에 저장된다. 프레임워크 내의 여러 가지 처리 모듈(1211, 1213, 1215, ..., 1219)들과 AI 엔진은 입력된 파일 들과 정보들을 여러 가지 실시 예에 따라 처리할 수 있다. 예를 들어 실행 파일에 대한 사이버 위협 정보의 처리하는 예는 도 1 내지 도 16에 예시하였고, 실행 파일 내 인스트럭션들의 논리 구조에 따라 사이버 위협 정보를 처리하는 예는 도 17 내지 도 27에 예시하였다. 입력된 파일이 비실행형 파일이거나 비실행형 파일과 관련된 사이버 위협 정보인 경우, 도 28 내지 도 44에 예 시하였다. 또한 사용자에 웹페이지에 관련된 데이터를 입력하는 경우 도 45 내지 도 57에 그 웹페이지와 관련된 사이버 위협 정보를 처리하는 예를 개시하였다. 데이터베이스는 이미 분류된 악성 코드 또는 악성 코드의 패턴 코드 등 분석된 사이버 위협 정보를 저장 할 수 있다. 인텔리전스 플랫폼의 사용자 인터페이스는 위와 같이 처리되거나 저장된 사이버 위협 정보를 사용자에 제공한다. 인텔리전스 플랫폼가 사용자 인터페이스를 통해 제공하는 사이버 위협 정보의 예는 도 58 내지 도 81에 예시하였다. 특히, 인텔리전스 플랫폼의 사용자 인터페이스는 상술한 실시 예를 통하여 처리된 사이버 위협 정보에 대한 적어도 하나 이상의 공격 그룹 정보를 제공할 수 있다. 여기에서, 공격 그룹 정보는 공격 그룹 명, 유입 경로 정보, 공격 대상 국가 정보, 공격 대상 산업 정보, 제작 도구 또는 프로그램 정보 중 적어도 하나를 포함할 수 있다. 또한, 인텔리전스 플랫폼은 제 1 공격 그룹에 대한 정보를 제공할 수 있다. 제 1 공격 그룹에 대한 정보 는 제 1 공격 그룹의 이름, 발생 국가 정보, 설명, 관련 그룹 명, 공격 대상 산업 정보, 유입 경로 정보, 제작 도구 및 프로그램 정보, 관련 사건 및 대상 조직 정보, 주요 공격 대상 국가 정보 중 적어도 하나를 포함할 수 있다. 또한, 인텔리전스 플랫폼은 공격 그룹에 대한 타임라인을 제공할 수 있다. 이때, 인텔리전스 플랫폼은"}
{"patent_id": "10-2023-0047988", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 27, "content": "타임라인 상에 날짜(연, 월, 일 중 적어도 하나) 또는 공격 내용의 요약 중 적어도 하나를 출력할 수 있다. 또 한, 일 실시 예에서, 인텔리전스 플랫폼은 공격 그룹에 대한 타임라인을 날짜 중 적어도 하나를 기준으로 오름 차순 또는 내림차순으로 정렬할 수 있다. 또한, 인텔리전스 플랫폼은 APT 공격 정보에 대한 시각화 그래프를 제공할 수 있다. 여기에서, 시각화 그래프는 APT 공격에 사용된 공격 기법에 대응하는 블록(block)을 제 1 색상으로 음영 처리하여 출력하고, 전술 에 대응하는 블록을 제 2 색상으로 음영 처리하여 출력할 수 있다. 따라서, 사용자는 인텔리전스 플랫폼을 통해 여러 가지 사이버 위협 정보를 실시간으로 또는 비실시간으 로 얻을 수 있다. 사용자는 인텔리전스 플랫폼을 통해 공격 활동에 관련된 상세한 정보나 공격 그룹, 공 격 국가 및 공격 대상 산업 등에 대한 상세한 정보를 얻을 수 있다. 악성 코드와 같은 사이버 위협은 나날이 고도화되고 첨단화 되고 있는 실정이다. 이러한 악성 코드에 대응하기 위하여 본 발명의 인텔리전스 플랫폼이 제공하는 API 인터페이스에서는 악성 코드 샘플을 연구용 데이터셋으로 구성하여 제공할 수 있다. 이에 따라, 사용자는 새로운 공격 방법과 우회 기법들이 적용된 악성 코드들에 대하여 미리 방지할 수 있다는 장점이 있다. 또한, 사용자는 최신 데이터셋을 활용하여 악성 코드의 최신 공격 동향 및 글로벌 트렌드 변화에 신속히 대응하고 보안성 강화에 사용할 수 있다. 이하에서는, 상술한 실시 예에 따라 처리된 사이버 위협 정보에 포함된 악성 코드 데이터셋(dataset)을 판매하 기 위한 인터페이스에 대하여 설명하도록 한다. 데이터셋 패키지는 악성 코드에 대한 샘플 파일을 포함할 수 있 으며, 데이터셋 패키지에 포함된 파일은 최근 수집 및 분석된 날짜를 기준으로 한다. 이를 위하여, 인텔리전스 플랫폼은 데이터셋 패키지에 포함된 파일들의 수집기간 및 위협 유형(예를 들어, Trojan, Ransomware, Backdoor 등)을 표시할 수 있다. 도 84은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 인텔리전스 플랫폼은 상술한 실시 예를 통하여 처리된 사이버 위협 정보를 데이터셋으로 생성해 판매하는 인터 페이스를 제공할 수 있다. 여기에서, 사이버 위협 정보는 실행형 악성 코드 및 비실행형 악성 코드를 포함할 수 있다. 일 실시 예에서, 인텔리전스 플랫폼은 인터페이스를 통하여 통합 악성 코드 데이터셋 패키지를 판매할 수 있다. 여기에서, 통합 악성 코드 데이터셋 패키지는 실행형 악성코드 데이터셋 패키지와 비실행형 데이터 셋 패키지를 포함할 수 있다. 이때, 인텔리전스 플랫폼은 통합 악성 코드 데이터셋 패키지에 포함된 실행 형 데이터셋과 비실행형 데이터셋의 비율을 설정할 수 있다. 인텔리전스 플랫폼은 인터페이스를 통하여 통합 악성 코드 데이터셋 패키지에 포함된 악성 코드의 개수에 기초하여 데이터셋 패키지를 다른 금액으로 판매할 수 있다. 이때, 통합 악성 코드 데이터셋 패키지에 포 함되는 악성 코드의 개수는 사용자의 필요에 따라 변경될 수 있다. 예를 들어, 제 1 통합 악성 코드 데이터셋 패키지는 1000개의 악성 코드 원시 파일을 포함하며, 1000개의 파일 중 실행형 파일로 EXE 파일, DLL 파 일, ELF 파일 및 APK 파일을 포함하고, 비실행형 파일로 PDF 파일, DOC(X) 파일, XLS(X) 파일, PPT(X) 파일 및 HWP 파일을 포함한다. 또한, 실행형 파일에 포함되는 파일의 종류 및 비실행형 파일에 포함되는 파일의 종류 역 시 사용자의 필요에 따라 변경될 수 있음은 물론이다. 마찬가지로, 제 2 통합 악성 코드 데이터셋 패키지(850 2)는 3000개의 악성 코드 원시 파일을 포함하며, 제 3 통합 악성 코드 데이터셋 패키지는 5000개의 악성 코드 원시 파일을 포함하며, 제 4 통합 악성 코드 데이터셋 패키지는 10000건의 악성 코드 원시 파일을 포함할 수 있다. 이를 통하여, 사용자는 인텔리전스 플랫폼이 제공하는 인터페이스를 통하여 처리된 사이버 위협 정보를 데이터 셋 패키지 형태로 구매할 수 있다. 특히, 실행형 악성 코드 및 비실행형 악성 코드가 모두 포함된 데이터셋 패 키지를 구매함으로써 사용자는 새로운 공격 방법과 우회 기법들이 적용된 악성 코드들에 대하여 미리 방지할 수 있다. 도 85는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 상술한 실시 예와 달리, 인텔리전스 플랫폼은 실행형 악성 코드 데이터셋 패키지를 판매하는 인터페이스 를 제공할 수 있다. 즉, 인텔리전스 플랫폼은 상술한 바와 같이 실행형 악성 코드 및 비실행형 악성 코드를 모 두 포함하는 통합 악성 코드 데이터셋이 아닌 실행형 파일 악성 코드 데이터셋으로 구성된 패키지를 제공 할 수 있다. 특히, 인텔리전스 플랫폼이 제공하는 실행형 악성 코드 데이터셋은 도 1 내지 도 16에 따라 처리된 사이버 위협 정보인 것을 특징으로 한다. 이때, 실행형 악성 코드 데이터셋은 윈도우 운영체제에서 실행되는 32비트, 64비트 기반의 EXE 파일, DLL 파일과 리눅스 운영체제에서 실행되는 32비트, 64비트 기반의 ELF 파일, SO파일을 포함할 수 있다. 여기에서, 실행형 악성 코드 데이터셋에 포함되는 파일의 종류는 예시에 한정되지 않으며 다른 실행형 악성 코드 파일 역시 포함될 수 있음은 당연하다. 일 실시 예에서, 인텔리전스 플랫폼은 인터페이스를 통하여 실행형 악성 코드 데이터셋 패키지에 포함된 악성 코드의 개수에 기초하여 데이터셋 패키지를 다른 금액으로 판매할 수 있다. 이에 대하여는 상술한 내용을 참고할 수 있다. 이를 통하여, 사용자는 인텔리전스 플랫폼이 제공하는 인터페이스를 통하여 처리된 사이버 위협 정보 중 실행파 일을 포함하는 데이터셋 패키지를 구매할 수 있다. 도 86은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한다. 상술한 실시 예와 달리, 인텔리전스 플랫폼은 비실행형 악성 코드 데이터셋 패키지를 판매하는 인터페이 스를 제공할 수 있다. 즉, 인텔리전스 플랫폼은 상술한 바와 같이 실행형 악성 코드 및 비실행형 악성 코드를 모두 포함하는 통합 악성 코드 데이터셋 또는 실행형 악성 코드 데이터셋이 아닌 비실행형 악성 코드 데이터셋 으로 구성된 패키지를 제공할 수 있다. 여기에서, 비실행형 악성 코드 데이터셋은 한글(HWP), 워드 (DOC(X)), 엑셀(XLS(X)), PDF 문서 파일을 포함한다. 또한, 비실행형 악성 코드 데이터셋에 포함된 파일의 종류 는 예시일 뿐으로 이에 한정되지 않고, 사용자의 필요에 따라 다른 비실행형 악성 코드 파일이 비실행형 악성 코드 데이터셋에 포함될 수 있음은 물론이다. 본 발명은 비실행형 악성 코드 데이터셋 패키지를 수집하기 위하여, 도 28 내지 도 44 와 같이 인텔리전 스 플랫폼은 비실행형 파일로부터 사이버 위협 정보를 식별하고 처리하는 실시 예를 개시하였다. 즉, 비실행형 파일의 경우, 실행형 파일과 달리 해당 파일을 읽을 수 있는 실행 파일(비실행형 파일 리더 프로그램)이 실행되 면서 비실행형 파일을 로드하고 그 내용을 확인할 수 있게 되기 때문에 실행형 파일과는 다른 분석 및 처리 과 정이 요구된다. 이러한 비실행형 파일을 분석하기 위하여, 상술한 실시 예에서는, 정적 분석 및 동적 분석의 과 정을 수행하였다. 이후, 인텔리전스 플랫폼은 정적 분석을 기반으로 비실행형 파일 내의 숨겨진 악성 페이로드, 이를 실행할 수 잇는 스크립트 등을 추출하고 문서의 형태에 대한 정보를 추출할 수 있다. 이를 통하여, 인텔리 전스 플랫폼은 비실행형 파일이 악성 코드에 감염되었는지 여부를 판단할 수 있다. 이에 대한 자세한 설명은 도 28 내지 도 44에 개시하였다. 일 실시 예에서, 인텔리전스 플랫폼은 실행형 파일에 포함된 악성 코드뿐만 아니라 비실행형 파일에 포함된 악 성 코드까지 정확히 탐지하고 그에 따른 공격 기법과 공격 그룹에 대한 사이버 위협 정보를 처리할 수 있다. 이 에 따라, 인텔리전스 플랫폼은 인터페이스를 통하여 처리된 사이버 위협 정보를 포함하는 비실행형 악성 코드 데이터셋 패키지를 사용자에게 판매할 수 있다. 도 87은 개시하는 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개시한 도면이다. 사용자 인터페이스를 통해 사용자로부터 파일 또는 파일에 대한 정보를 입력받는다(S85000). 사용자로부터 입력받는 파일이나 정보의 예는 도 58 및 도 59에 예시하였다. 입력된 파일이나 정보와 관련된 사이버 위협 정보를 처리한다(S85100). 입력된 파일이나 정보와 관련된 사이버 위협 정보를 처리하는 실시 예는 위의 실시 예들에 개시하였다. 예를 들어 실행 파일에 대한 사이버 위협 정보 의 처리하는 예는 도 1 내지 도 16에 예시하였고, 실행 파일 내 인스트럭션들의 논리 구조에 따라 사이버 위협 정보를 처리하는 예는 도 17 내지 도 27에 예시하였다. 입력된 파일이 비실행형 파일이거나 비실행형 파일과 관 련된 사이버 위협 정보인 경우, 도 28 내지 도 44에 예시하였다. 또한 사용자가 웹페이지에 관련된 데이터를 입 력하는 경우 도 45 내지 도 57에 그 웹페이지와 관련된 사이버 위협 정보를 처리하는 예를 개시하였다. 이와 같 이 실시간 처리되거나 기 처리된 사이버 위협 정보는 인텔리전스 플랫폼의 저장장치에 저장될 수도 있다. 상기 처리된 사이버 위협 정보를 사용자 인터페이스를 통해 사용자에 제공한다(S85300). 사용자에게 제공하는 사이버 위협 정보의 예는 도 58 내지 도 83에 예시하였다. 이에 따라, 사용자는 인텔리전 스 플랫폼이 제공하는 인터페이스로부터 여러 가지 사이버 위협 정보를 얻을 수 있다. 일 실시 예에서, 인텔리전스 플랫폼은 사용자 인터페이스를 통하여 통합 악성 코드 데이터셋 패키지를 사용자에 게 판매할 수 있다. 여기에서, 통합 악성 코드 데이터셋 패키지는 실행형 악성코드 데이터셋 패키지와 비실행형 데이터셋 패키지를 포함할 수 있다. 또한, 인텔리전스 플랫폼은 사용자 인터페이스를 통하여 통합 악성 코드 데이터셋 패키지가 아닌, 실행형 악성 코드 데이터셋 패키지와 비실행형 데이터셋 패키지를 별개로 판매할 수 있다. 이때, 실행형 악성 코드 데이터셋 은 윈도우 운영체제에서 실행되는 32비트, 64비트 기반의 EXE 파일, DLL 파일과 리눅스 운영체제에서 실행되는 32비트, 64비트 기반의 ELF 파일, SO파일을 포함하고, 비실행형 악성 코드 데이터셋은 한글(HWP), 워드 (DOC(X)), 엑셀(XLS(X)), PDF 문서 파일을 포함한다. 특히, 비실행형 악성 코드 데이터셋 패키지에 포함된 파일 은 도 28 내지 도 44를 통해 처리된 사이버 위협 정보인 것을 특징으로 한다. 도 88은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하는 장치의 일 예를 개시한 도면이다. 사이버 위협 정보 처리 장치의 일 실시예는 프로세서를 포함하는 서버, 데이터베이스, 및 인텔리전 스 플랫폼을 포함할 수 있다. 서버의 프로세서는 응용 프로그램 인터페이스(Application Programming Interface) 를 통해 여러 가지 파일 또는 관련된 정보를 수신하거나 또는 온라인의 웹 크롤링 등으로 데이터를 수집하여 사이버 위협 정 보를 분석하고 제공할 수 있다. 인텔리전스 플랫폼은 특정 사용자의 클라이언트로부터 파일이나 파일과 관련된 사이버 위협 정보 를 API을 통해 입력받을 수 있다. 예를 들어 사용자는 실행파일이나 비실행파일 또는 그 파일 등의 해쉬 값 등 사이버 위협 정보를 인텔리전스 플랫폼에 입력할 수 있다. 인텔리전스 플랫폼을 운영하는 서버는 자체적으로 인터넷 연결을 통해 외부의 웹사이트 등의 여러 가지 실행파일이나 비실행파일들을 직접 수집할 수도 있다. 인텔리전스 플랫폼 또는, 인텔리전스 플랫폼을 운영하는 서버는 사용자로부터 수신하거나 직접 수집한 파일들로부터 사이버 위협 정보를 분석하고 여러 사용자가 사이버 상의 공격들을 효율적으로 인지 할 수 있도록 여러 가지 정보를 제공할 수 있다. 입력 파일 또는 그 입력 파일과 관련된 사이버 위협 정보는 서버의 프로세서에서 위에서 개시한 실시 예 에 따라 처리되고, 처리된 사이버 위협 정보는 데이터베이스에 저장된다. 프레임워크 내의 여러 가지 처리 모듈(1211, 1213, 1215, ..., 1219)들과 AI 엔진은 입력된 파일 들과 정보들을 여러 가지 실시 예에 따라 처리할 수 있다. 예를 들어 실행 파일에 대한 사이버 위협 정보의 처리하는 예는 도 1 내지 도 16에 예시하였고, 실행 파일 내 인스트럭션들의 논리 구조에 따라 사이버 위협 정보를 처리하는 예는 도 17 내지 도 27에 예시하였다. 입력된 파일이 비실행형 파일이거나 비실행형 파일과 관련된 사이버 위협 정보인 경우, 도 28 내지 도 44에 예 시하였다. 또한 사용자에 웹페이지에 관련된 데이터를 입력하는 경우 도 45 내지 도 57에 그 웹페이지와 관련된 사이버 위협 정보를 처리하는 예를 개시하였다. 데이터베이스는 이미 분류된 악성 코드 또는 악성 코드의 패턴 코드 등 분석된 사이버 위협 정보를 저장 할 수 있다. 인텔리전스 플랫폼의 사용자 인터페이스는 위와 같이 처리되거나 저장된 사이버 위협 정보를 온 라인 웹 사이트 등(예를 들어, malwares.com)을 통하여 사용자에게 제공한다. 인텔리전스 플랫폼가 사용자 인터페이스를 통해 제공하는 사이버 위협 정보의 예는 도 58 내지 도 86에 예시하였다. 이에 따라, 사용자는 인텔리전스 플랫폼이 제공하는 사용자 인터페이스로부 터 여러 가지 사이버 위협 정보를 얻을 수 있다. 일 실시 예에서, 인텔리전스 플랫폼은 사용자 인터페이스를 통하여 통합 악성 코드 데이터셋 패 키지를 판매하는 인터페이스를 사용자에게 제공할 수 있다. 예를 들어, 인텔리전스 플랫폼은 malwares.com과 같은 웹사이트에서 악성 코드 데이터셋 패키지를 판매할 수 있다. 여기에서, 통합 악성 코드 데 이터셋 패키지는 실행형 악성코드 데이터셋 패키지와 비실행형 데이터셋 패키지를 포함할 수 있다. 또한, 인텔리전스 플랫폼은 사용자 인터페이스를 통하여 통합 악성 코드 데이터셋 패키지가 아닌, 실행형 악성코드 데이터셋 패키지와 비실행형 데이터셋 패키지를 별개로 판매할 수 있다. 이때, 실행형 악성 코드 데이터셋은 윈도우 운영체제에서 실행되는 32비트, 64비트 기반의 EXE 파일, DLL 파일과 리눅스 운영 체제에서 실행되는 32비트, 64비트 기반의 ELF 파일, SO파일을 포함하고, 비실행형 악성 코드 데이터셋은 한글 (HWP), 워드(DOC(X)), 엑셀(XLS(X)), PDF 문서 파일을 포함한다. 특히, 비실행형 악성 코드 데이터셋 패키지에 포함된 파일은 도 28 내지 도 44를 통해 처리된 사이버 위협 정보인 것을 특징으로 한다. 이를 통하여, 사용자는 인텔리전스 플랫폼이 제공하는 사용자 인터페이스를 통하여 처리된 사이 버 위협 정보를 데이터셋 패키지 형태로 구매할 수 있어, 새로운 공격 방법과 우회 기법들이 적용된 악성 코드 들에 대하여 미리 방지할 수 있다."}
{"patent_id": "10-2023-0047988", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 사이버 위협 정보 처리 방법의 일 실시 예를 예시한 도면 도 2는 사이버 위협 정보 처리 장치의 일 실시 예를 개시한 도면도 3는 사이버 위협 정보 처리 장치의 일 실시 예를 개시한 도면 도 4는 개시하는 실시 예에 따라 실행파일의 정적 분석을 수행하는 일 예를 나타낸 도면 도 5는 개시하는 실시 예에 따라 실행파일의 동적 분석을 수행하는 일 예를 나타낸 도면 도 6는 심층 분석의 일 예로서 악성 코드를 디스어셈블링하여 악성 행위가 포함된 파일임을 판단하는 예를 개시 한 도면 도 7은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하는 흐름을 예시한 도면 도 8은 개시하는 실시 예에 따라 OP-CODE 및 ASM-CODE를 정규화된 코드로 변환한 값을 예시한 도면 도 9는 개시하는 실시 예에 따라 OP-CODE 및 ASM-CODE의 벡터화된 값을 예시한 도면 도 10은 개시하는 실시 예에 따라 코드의 블록 단위를 해쉬 값으로 변환하는 예를 개시한 도면 도 11은 개시하는 실시 예에 따른 앙상블 머신 러닝 모델의 일 예를 나타낸 도면 도 12는 개시하는 실시 예에 따라 머신 러닝으로 데이터를 학습하고 분류하는 흐름을 예시한 도면 도 13은 개시하는 실시 예에 따라 학습 데이터로 공격 식별자와 공격자를 식별하여 라벨링을 수행한 예를 나타 낸 도면 도 14는 실시 예에 따라 공격 식별자를 식별한 결과를 나타낸 도면 도 15는 개시하는 실시 예에 따라 바이너리 코드에서 추출된 코드들로 공격 기법을 매칭하는 일 예를 나타낸 도 면 도 16은 개시하는 실시 예에 따라 OP-CODE를 포함하는 코드 세트와 공격 기법을 매칭하는 일 예를 나타낸 도면 도 17은 함수 단위의 공격 기법 및 공격 그룹 식별을 수행하는 예를 설명하기 위한 도면 도 18는 함수가 분리될 경우의 공격 기법 및 공격 그룹 식별을 수행하는 예를 설명하기 위한 도면 도 19는 실시 예에 따라 사이버 위협에 관련된 특징 정보를 얻는 예를 개시한 도면 도 20은 실시 예에 따라 브랜치 인스트럭션(branch instruction) 계열을 이용하여 제어흐름을 얻는 과정을 예시 한 도면 도 21은 제 2 예에 따라 예시한 인스트럭션 결합 원칙에 따라 제어블럭의 인스트럭션들을 결합하여 인스트럭션 시퀀스를 생성하는 경우를 예시한 도면 도 22는 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 다른 예를 설명하기 위한 도면 도 23은 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 또 다 른 예를 설명하기 위한 도면 도 24는 제어블럭 내의 인스터력션들을 이용하여 특징 정보를 포함하는 인스트럭션 시퀀스들을 생성하는 또 다 른 예를 설명하기 위한 도면 도 25는 위의 설명한 예들에 따라 인스트럭션 시퀀스를 생성하는 예를 개시한 도면 도 26은 개시한 사이버 위협 정보 처리 장치의 다른 일 실시 예를 예시한 도면 도 27은 개시한 사이버 위협 정보 처리 방법의 다른 일 실시 예를 예시한 도면 도 28은 비실행형 파일 구조와 그 비실행형 파일의 리더 프로그램을 개념적으로 나타낸 도면 도 29는 비실행형 파일의 사이버 위협 정보를 얻을 수 있는 실시 예의 블록도를 개시한 도면 도 30은 파일의 사이버 위협 정보를 얻을 수 있는 예시도 중 파일분석부에 포함되어 파일의 제1 타입의 분석을 실시하는 예를 개시한 도면 도 31은 파일의 사이버 위협 정보를 얻을 수 있는 예시도 중 파일분석부에 포함되어 파일의 제2 타입의 분석을 수행하는 예를 개시한 도면 도 32는 실시 예에 따른 파일에 대한 제2 타입의 분석에 의해 비실행형 파일의 동적 수행에 의해 추출되는 대상 과 추출된 정보를 예시한 도면 도 33은 파일의 사이버 위협 정보를 얻을 수 있는 예시도 중 파일분석부에 포함되어 파일에 대한 제3 타입의 분 석을 실시하는 예를 개시한 도면 도 34는 실시 예에 따라 제3 분석부가 마일드 동적 분석을 수행할 경우 API 후킹 리스트 정보를 예시한 도면 도 35는 비실행형 파일의 사이버 위협 정보를 얻을 수 있는 실시 예 중 특징처리부를 설명하기 위한 도면 도 36은 개시한 실시 예에 따라 비실행형파일에서 추출된 특징 정보의 중요도를 비교한 예시도 도 37은 개시한 실시 예에 따라 공격기법분류부의 분류 모델을 설명하기 위한 예시도 도 38은 개시한 예에 따라 비실행형파일에 대해 여러 분석 기법을 선택적 결합하여 식별한 공격기법을 예시한 도면 도 39는 개시한 실시 예에 따라 공격그룹분류부의 분류 모델을 설명하기 위한 예시도 도 40은 위에서 설명한 비실행형파일의 리더 프로그램 실행과 시스템콜을 예시한 도면 도 41은 실시 예에 따라 프로그램 코드상 시스템콜을 후킹하는 예를 설명하기 위한 도면 도 42는 실시 예에 따라 동적 분석을 통해 사이버 위협 정보를 추적할 수 있는 예를 개시한 도면 도 43은 개시한 사이버 위협 정보 처리 장치의 다른 일 실시 예를 예시한 도면 도 44는 개시한 사이버 위협 정보 처리 방법의 다른 일 실시 예를 예시한 도면 도 45는 실시 예에서 웹 페이지를 정보를 입력받거나 수집하고 이를 기반으로 악성 정보를 식별하는 예를 개시 한 도면 도 46은 실시 예에 따른 웹수집부(Web Crawler)의 동작을 예시한 도면 도 47은 개시한 실시 예의 뎁스 정보에 따라 웹페이지 데이터를 저장하고 관리하는 예를 개시한 도면 도 48은 실시 예에 따라 복수의 단계들 또는 레이어들의 분석에 따라 웹페이지 데이터의 악성 여부를 판단하는 예를 개시한 도면 도 49는 실시 예에 따라 웹페이지 데이터를 분석하고 탐지한 정보를 제공하는 개념을 예시한 도면 도 50은 위에서 개시한 실시 예가 컴퓨터 상에서 동작하는 일 예를 개시한 도면 도 51은 웹페이지에 포함된 사이버 위협 정보를 처리하는 방법의 일 실시 예를 개시한 도면 도 52는 사이버 위협 정보를 처리하는 방법의 일 실시 예를 개시한 도면 도 53은 실시 예에 따른 사이버 위협 정보를 처리하는 방법으로서 HTML 데이터의 태그에 기반한 구조 정보를 예 시한 도면 도 54는 실시 예에 따른 사이버 위협 정보를 처리하는 방법으로서 HTML 데이터의 태그에 기반한 구조 정보로부 터 사이버 보안 위협에 관련한 특징 정보를 얻는 예를 개시한 도면 도 55는 위에서 예시한 HTML 문서 중에서 HTML 문법을 제외하고 사이버 위협 정보가 포함될 수 있는 부분을 실 시 예에 처리하여 변환하는 과정을 예시한 도면 도 56은 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개념적으로 도시한 도면 도 57은 실시 예에 따라 웹페이지의 태그에 포함된 사이버 위협 정보 처리 장치의 일 예를 개시한 도면 도 58은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 제공하는 일 예를 예시한 도면 도 59는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 제공하는 다른 일 예를 예시한 도면 도 60은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한 도면 도 61은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한 도면도 62는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한 도면 도 63은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한 도면 도 64는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한 도면 도 65는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 예시한 도면 도 66은 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개시한 도면 도 67은 실시 예에 따라 사이버 위협 정보를 처리하는 장치의 일 예를 개시한 도면 도 68은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 69는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 70은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 71은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 72는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 73은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 74는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 75는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 76은 개시하는 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개시한 도면 도 77은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하는 장치의 일 예를 개시한 도면 도 78은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 79는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 80은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 81은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 82는 개시하는 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개시한 도면 도 83은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하는 장치의 일 예를 개시한 도면 도 84은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 85는 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 86은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하여 사용자에게 제공하는 다른 일 예를 개시한 도면 도 87은 개시하는 실시 예에 따른 사이버 위협 정보 처리 방법의 일 예를 개시한 도면 도 88은 개시하는 실시 예에 따라 사이버 위협 정보를 처리하는 장치의 일 예를 개시한 도면"}
