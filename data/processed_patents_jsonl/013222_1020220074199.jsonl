{"patent_id": "10-2022-0074199", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0173437", "출원번호": "10-2022-0074199", "발명의 명칭": "전자 장치에서 메모리 운용 장치 및 방법", "출원인": "삼성전자주식회사", "발명자": "정지훈"}}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에서 메모리를 운용하는 방법에 있어서,수집된 스택 추적 아이템들 중에서 카운트 값이 n (여기서, n은 양의 정수)인 하나 또는 복수의 저차 스택 추적아이템에서의 메모리 릭 여부를 판단하는 동작; 및상기 메모리 릭을 유발하는 저차 스택 추적 아이템이 존재하면, 카운트 값이 m (여기서, m은 n보다 큰 양의 정수)인 하나 또는 복수의 고차 스택 추적 아이템에서의 메모리 릭 여부를 판단하는 동작을 포함하되,상기 m이 최대 카운트 값인 경우, 상기 메모리 릭을 유발하는 고차 스택 추적 아이템을 사용하여 메모리 디버깅을 수행하는, 방법."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 메모리 릭 여부를 판단하기 위해, 상기 하나 또는 복수의 저차 스택 추적 아이템 또는 상기 하나 또는 복수의 고차 스택 추적 아이템에 대하여 할당된 메모리 사이즈를 획득하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,메모리 할당 요청이 호출되는 횟수를 카운트하는 동작; 및미리 설정된 임계 횟수 이상으로 상기 메모리 할당 요청이 호출되면, 상기 하나 또는 복수의 저차 스택 추적 아이템 또는 상기 하나 또는 복수의 고차 스택 추적 아이템에 대하여 할당된 메모리 사이즈를 획득하도록 지시하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 메모리 할당 요청이 호출되는 횟수를 소정 주기로 초기화하는, 방법."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 메모리 릭을 유발하는 저차 스택 추적 아이템에 대하여 메모리 릭을 유발하는 스택 추적 아이템임을 지시하는 표시를 부여하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 최대 카운트 값은 메모리 할당 요청으로 인해 호출된 함수의 최대 개수인, 방법."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 최대 카운트 값은 메모리 릭의 원인을 판단하기 위해 요구되는 최소 함수 개수인, 방법."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,공개특허 10-2023-0173437-3-복수의 프로세서들 중에서 메모리 분석이 필요한 대상 프로세서를 결정하는 동작; 및상기 대상 프로세서에 포함된 메모리 디버거가 디버깅 동작을 위한 필수 조건만을 갖춘 준비 모드에서 프로파일기능이 담긴 프로파일 모드로 전환하여 메모리 분석을 수행하는 동작을 포함하는, 방법."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "전자 장치에 있어서,스택 추적 아이템에 대한 메모리 릭 여부를 판단하도록 구성된 메모리 릭 분석 모듈; 및상기 메모리 릭 분석 모듈에 의한 메모리 릭 여부의 판단 결과를 기반으로 메모리 디버깅을 수행하는 메모리 디버거를 포함하되,상기 메모리 릭 분석 모듈은, 수집된 스택 추적 아이템들 중에서 카운트 값이 n (여기서, n은 양의 정수)인 하나 또는 복수의 저차 스택 추적 아이템에서의 메모리 릭 여부를 판단하고, 상기 메모리 릭을 유발하는 저차 스택 추적 아이템이 존재하면, 카운트 값이 m (여기서, m은 n보다 큰 양의 정수)인 하나 또는 복수의 고차 스택추적 아이템에서의 메모리 릭 여부를 판단하도록 구성되며,상기 메모리 디버거는, 상기 m이 최대 카운트 값인 경우, 상기 메모리 릭을 유발하는 고차 스택 추적 아이템을사용하여 메모리 디버깅을 수행하도록 구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 메모리 릭 분석 모듈은, 상기 메모리 릭 여부를 판단하기 위해, 상기 하나 또는 복수의 저차 스택 추적 아이템 또는 상기 하나 또는 복수의 고차 스택 추적 아이템에 대하여 할당된 메모리 사이즈를 획득하도록 구성된,전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 메모리 릭 분석 모듈은, 메모리 할당 요청이 호출되는 횟수를 카운트하고, 미리 설정된 임계 횟수 이상으로 상기 메모리 할당 요청이 호출되면, 상기 하나 또는 복수의 저차 스택 추적 아이템 또는 상기 하나 또는 복수의 고차 스택 추적 아이템에 대하여 할당된 메모리 사이즈를 획득하기 위한 동작을 수행하도록 구성된, 전자장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 메모리 릭 분석 모듈은, 소정 주기로 상기 메모리 할당 요청이 호출되는 횟수의 카운트 값을 초기화하도록구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제9항에 있어서,상기 메모리 릭 분석 모듈은, 상기 메모리 릭을 유발하는 저차 스택 추적 아이템에 대하여 메모리 릭을 유발하는 스택 추적 아이템임을 지시하는 표시를 부여하도록 구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제9항에 있어서,상기 최대 카운트 값이 메모리 할당 요청으로 인해 호출된 함수의 최대 개수인, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제9항에 있어서,공개특허 10-2023-0173437-4-상기 최대 카운트 값이 메모리 릭의 원인을 판단하기 위해 요구되는 최소 함수 개수인, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제9항에 있어서,상기 메모리 릭 분석 모듈은, 복수의 프로세서들 중에서 메모리 분석이 필요한 대상 프로세서를 결정하고, 상기대상 프로세서에 포함된 메모리 디버거가 디버깅 동작을 위한 필수 조건만을 갖춘 준비 모드에서 프로파일 기능이 담긴 프로파일 모드로 전환하여 메모리 분석을 수행하도록 구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "전자 장치에 있어서,스택 (stack) 영역 또는 힙 (heap) 영역을 포함하는 메모리; 및상기 메모리에 대한 동적 메모리 할당을 수행하고, 스택 추적을 기반으로 메모리 릭의 발생 원인을 분석하도록구성된 적어도 하나의 프로세서를 포함하며,상기 적어도 하나의 프로세서는, 수집된 스택 추적 아이템들 중에서 카운트 값이 n (여기서, n은 양의 정수)인 하나 또는 복수의 저차 스택 추적아이템에서의 메모리 릭 여부를 판단하고,상기 메모리 릭을 유발하는 저차 스택 추적 아이템이 존재하면, 카운트 값이 m (여기서, m은 n보다 큰 양의 정수)인 하나 또는 복수의 고차 스택 추적 아이템에서의 메모리 릭 여부를 판단하며,상기 m이 최대 카운트 값인 경우, 상기 메모리 릭을 유발하는 고차 스택 추적 아이템을 사용하여 메모리 디버깅을 수행하도록 구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,상기 적어도 하나의 프로세서가,상기 메모리 릭 여부를 판단하기 위해, 상기 하나 또는 복수의 저차 스택 추적 아이템 또는 상기 하나 또는 복수의 고차 스택 추적 아이템에 대하여 할당된 메모리 사이즈를 획득하도록 구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서,상기 적어도 하나의 프로세서가,메모리 할당 요청이 호출되는 횟수를 카운트하고, 미리 설정된 임계 횟수 이상으로 상기 메모리 할당 요청이 호출되면, 상기 하나 또는 복수의 저차 스택 추적 아이템 또는 상기 하나 또는 복수의 고차 스택 추적 아이템에대하여 할당된 메모리 사이즈를 획득하도록 구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19항에 있어서,상기 적어도 하나의 프로세서가,소정 주기로 상기 메모리 할당 요청이 호출되는 횟수의 카운트 값을 초기화하도록 구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제17항에 있어서,상기 적어도 하나의 프로세서가, 상기 메모리 릭을 유발하는 저차 스택 추적 아이템에 대하여 메모리 릭을 유발하는 스택 추적 아이템임을 지시하는 표시를 부여하도록 구성된, 전자 장치.공개특허 10-2023-0173437-5-청구항 22 제17항에 있어서,상기 최대 카운트 값이 메모리 할당 요청으로 인해 호출된 함수의 최대 개수인, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제17항에 있어서,상기 최대 카운트 값이 메모리 릭의 원인을 판단하기 위해 요구되는 최소 함수 개수인, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제17항에 있어서,복수의 프로세서들 중에서 메모리 분석이 필요한 대상 프로세서를 결정하고, 상기 대상 프로세서에 포함된 메모리 디버거가 디버깅 동작을 위한 필수 조건만을 갖춘 준비 모드에서 프로파일 기능이 담긴 프로파일 모드로 전환하여 메모리 분석을 수행하도록 구성된, 전자 장치."}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시에서의 실시예는 전자 장치에서 메모리 릭의 발생 원인을 분석하는 메모리 운용 장치 및 방법에 관한 것 이다. 이를 위한, 전자 장치는 수집된 스택 추적 아이템들 중에서 카운트 값이 n (여기서, n은 양의 정수)인 하 나 또는 복수의 저차 스택 추적 아이템에서의 메모리 릭 여부를 판단하고, 상기 메모리 릭을 유발하는 저차 스택 추적 아이템이 존재하면, 카운트 값이 m (여기서, m은 n보다 큰 양의 정수)인 하나 또는 복수의 고차 스택 추적 아이템에서의 메모리 릭 여부를 판단할 수 있다. 여기서, 상기 m이 최대 카운트 값인 경우, 상기 메모리 릭을 유 발하는 고차 스택 추적 아이템을 사용하여 메모리 디버깅을 수행할 수 있다. 그 밖의 다양한 실시예가 가능하다."}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시(disclosure)는 전자 장치에서 메모리 릭 (memory leak)의 발생 원인을 분석하는 메모리 운용 장치 및 방법에 관한 것이다."}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "일반적으로 컴퓨터, 스마트폰 또는 태블릿과 같은 전자 장치는 하나 또는 복수의 프로그램들을 실행할 시, 명령 어의 해석 및 자료의 연산, 비교 등의 처리를 수행할 수 있다. 상기 전자 장치는 하나 또는 복수의 프로그램들 의 실행을 위하여, 필요한 크기의 메모리 영역을 할당하여 사용하게 된다. 이 경우, 전자 장치에서는 메모리가 낭비되는 메모리 릭 (memory leak) 현상이 발생할 수 있다. 상기 메모리 릭 현상은, 예를 들어, 전자 장치에서 실행 중이던 프로그램의 종료와 같은 이벤트 발생 시에 필요하지 않은 메모리 영역이 반환되지 않고 계속하여 점유됨으로 인해 발생할 수 있다. 상기 메모리 릭 현상이 발생할 경우, 전자 장치에서는 시간의 경과할수록 해 지되지 않고 쌓이는 메모리 영역이 증가할 수 있다. 상기 메모리 릭 현상이 발생하는 조건은 환경이나 상황에 따라 변경될 수 있다. 특정 프로그램의 실행으로 인한 프로세스에서 상기 메모리 릭 현상과 같은 메모리 이슈가 발생할 경우, 전자 장 치에서는 상기 메모리 이슈를 해결하기 위하여, 상기 특정 프로그램에 대한 메모리 디버깅 (memory debugging) 작업이 수행될 수 있다. 예컨대, 프로그래머는 전자 장치에서 메모리 사용 현황을 프로파일 (profile)한 결과물 인 리포트 파일에 명시된 스택 추적 (stack trace, back-trace, stack back-trace 또는 stack traceback) 정보 를 분석하여 해당 프로그램을 수정하는 디버깅 동작을 수행함으로써, 메모리 이슈가 발생한 원인을 치유할 수 있다. 상기 디버깅 동작은, 예를 들어, 리포트 파일에 명시된 스택 추적 정보를 기반으로 메모리의 할당을 요청 한 코드를 파악하는 리포트 분석 동작을 포함할 수 있다. 동영상 스트리밍 서비스와 같이 많은 트래픽이 발생할 수 있는 하나 또는 복수의 프로세스들이 실행될 수 있는 전자 장치에서는, 과도한 메모리 할당 요청이 발생할 수 있어, 이는 스택 추적 정보를 추출하기 위한 오버헤드 로 인하여 정상적인 동작이 이루어지지 않을 수 있다."}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시의 일 실시예에서는, 전자 장치에서 메모리 릭의 발생 여부에 의해 저차의 함수 호출을 갖는 스택 추적 아이템에서 고차의 함수 호출을 갖는 스택 추적 아이템으로 확장하여 메모리 릭의 발생 원인을 분석하는 메모리 운용 장치 및 방법을 제공할 것이다. 본 개시의 일 실시예에서는, 전자 장치에서 런 타임 중인 프로세서들 중 메모리 분석을 요청할 프로세서의 메모 리 디버깅 동작 모드를 대기 모드 (ready mode)에서 프로파일 모드 (profile mode)로 전환하는 메모리 운용 장 치 및 방법을 제공할 것이다."}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 2, "content": "본 개시에서 이루고자 하는 기술적 과제는 앞에서 언급한 기술적 과제로 제한되지 않으며, 당해 기술분야의 통 상의 지식을 가진 자에 의해 본 개시의 예시적 실시예들로부터 앞에서 언급되지 않은 다른 기술적 과제들이 도 출될 수 있다."}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시에서의 일 실시예에 따른, 전자 장치에서 메모리를 운용하는 방법은, 수집된 스택 추적 아이템들 중에서 카운트 값이 n (여기서, n은 양의 정수)인 하나 또는 복수의 저차 스택 추적 아이템에서의 메모리 릭 여부를 판 단하는 동작 및 상기 메모리 릭을 유발하는 저차 스택 추적 아이템이 존재하면, 카운트 값이 m (여기서, m은 n 보다 큰 양의 정수)인 하나 또는 복수의 고차 스택 추적 아이템에서의 메모리 릭 여부를 판단하는 동작을 포함 하되, 상기 m이 최대 카운트 값인 경우, 상기 메모리 릭을 유발하는 고차 스택 추적 아이템을 사용하여 메모리 디버깅을 수행할 수 있다. 본 개시에서의 일 실시예에 따른, 전자 장치는, 스택 추적 아이템에 대한 메모리 릭 여부를 판단하도록 구성된 메모리 릭 분석 모듈 및 상기 메모리 릭 분석 모듈에 의한 메모리 릭 여부의 판단 결과를 기반으로 메모리 디버 깅을 수행하는 메모리 디버거를 포함하되, 상기 메모리 릭 분석 모듈은, 수집된 스택 추적 아이템들 중에서 카 운트 값이 n (여기서, n은 양의 정수)인 하나 또는 복수의 저차 스택 추적 아이템에서의 메모리 릭 여부를 판단 하고, 상기 메모리 릭을 유발하는 저차 스택 추적 아이템이 존재하면, 카운트 값이 m (여기서, m은 n보다 큰 양 의 정수)인 하나 또는 복수의 고차 스택 추적 아이템에서의 메모리 릭 여부를 판단하도록 구성되며, 상기 메모 리 디버거는, 상기 m이 최대 카운트 값인 경우, 상기 메모리 릭을 유발하는 고차 스택 추적 아이템을 사용하여 메모리 디버깅을 수행하도록 구성될 수 있다. 본 개시에서의 일 실시예에 따른, 전자 장치는, 스택 (stack) 영역 또는 힙 (heap) 영역을 포함하는 메모리 및 상기 메모리에 대한 동적 메모리 할당을 수행하고, 스택 추적을 기반으로 메모리 릭의 발생 원인을 분석하도록 구성된 적어도 하나의 프로세서를 포함하며, 상기 적어도 하나의 프로세서는, 수집된 스택 추적 아이템들 중에 서 카운트 값이 n (여기서, n은 양의 정수)인 하나 또는 복수의 저차 스택 추적 아이템에서의 메모리 릭 여부를 판단하고, 상기 메모리 릭을 유발하는 저차 스택 추적 아이템이 존재하면, 카운트 값이 m (여기서, m은 n보다 큰 양의 정수)인 하나 또는 복수의 고차 스택 추적 아이템에서의 메모리 릭 여부를 판단하며, 상기 m이 최대 카 운트 값인 경우, 상기 메모리 릭을 유발하는 고차 스택 추적 아이템을 사용하여 메모리 디버깅을 수행하도록 구 성될 수 있다."}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 다양한 실시 예들에 따르면, 메모리 운용 장치에서 저차의 스택 추적에 대하여 우선적으로 분석하고, 메모리 릭을 유발한 저차의 스택 추적에 한하여 고차의 스택 추적을 분석함으로써, 메모리 릭을 해소하기 위한 동작 오버헤드를 줄일 수 있다. 본 개시의 예시적 실시예들에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 아니하며, 언급되지"}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "아니한 다른 효과들은 이하의 기재로부터 본 개시의 예시적 실시예들이 속하는 기술분야에서 통상의 지식을 가 진 자에게 명확하게 도출되고 이해될 수 있다. 즉, 본 개시의 예시적 실시예들을 실시함에 따른 의도하지 아니"}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 3, "content": "한 효과들 역시 본 개시의 예시적 실시예들로부터 당해 기술분야의 통상의 지식을 가진 자에 의해 도출될 수 있 다."}
{"patent_id": "10-2022-0074199", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 도면을 참조하여 본 개시의 실시예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 개시는 여러 가지 상이한 형태로 구현될 수 있으 며 여기에서 설명하는 실시예에 한정되지 않는다. 도면의 설명과 관련하여, 동일하거나 유사한 구성요소에 대해 서는 동일하거나 유사한 참조 부호가 사용될 수 있다. 또한, 도면 및 관련된 설명에서는, 잘 알려진 기능 및 구성에 대한 설명이 명확성과 간결성을 위해 생략될 수 있다. 도 1은 본 개시의 일 실시예에 따른, 네트워크 환경을 기반으로 하는 네트워크 시스템의 구조를 도시한 도 면이다. 도 1을 참조하면, 일 실시예에 따른 네트워크 시스템은 네트워크 환경을 기반으로 적어도 하나의 서버 또는 하나 또는 복수의 사용자 단말 (UE: user equipment) 간의 유선 또는 무선 통신을 기반으로 데 이터를 송/수신할 수 있다. 일 실시예로, 서버는 스트리밍 서비스를 제공하는 서버일 수 있다. 상기 스트리밍 서비스는 미리 마련된 플랫폼(platform)을 기반으로 영화, 드라마 또는 스포츠와 같이 다양한 분야 또는 종류의 동영상을 가입자에게 서비스하는 동영상 스트리밍 서비스를 포함할 수 있다. 일 실시예로, 하나 또는 복수의 사용자 단말은 서버로부터 플랫폼을 기반으로 제공되는 스트리밍 서 비스를 이용할 수 있는 전자 장치일 수 있다. 상기 복수의 사용자 단말은, 예를 들어, 휴대용 통신 장치 (예: 스마트폰 (UE #1, UE #2), 컴퓨터 장치(예: 노트북 (UE #n), 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되지 않는다. 일 실시예로, 서버 또는 사용자 단말은 적어도 하나의 프로그램이 설치될 수 있고, 상기 설치된 프로 그램의 실행을 위한 프로세스는 해당 프로그램에서 정의하고 있는 시나리오에 따른 동작을 수행할 수 있다. 일 실시예로, 서버 또는 사용자 단말은 실행 중인 프로그램에 의해 메모리 영역을 동적으로 할당할 수 있고, 저차의 스택 추적 정보를 우선적으로 추출하여 메모리 릭이 발생하였는지를 분석할 수 있다. 상기 서 버 또는 상기 사용자 단말은, 저차의 스택 추적 정보에 대한 추적을 통해 메모리 릭이 발생하였음이 분석됨에 한하여, 다음 차수의 스택 추적 정보를 추출하여 메모리 릭이 발생하였는지를 분석할 수 있다. 이 경 우, 상기 서버 또는 상기 사용자 단말은 스택 추적 정보를 추출하기 위한 오버헤드를 줄일 수 있게 한다. 일 실시예로, 서버 또는 사용자 단말은 런 타임 중인 프로세서들 중 메모리 분석을 요청할 프로세서 의 메모리 디버깅 동작 모드를 대기 모드(ready mode)에서 프로파일 모드(profile mode)로 전환할 수 있다. 이 경우, 상기 서버 또는 상기 사용자 단말은 중앙처리장치(CPU)의 오버헤드 없이 메모리의 사용 영역을 줄일 수 있다. 도 2는 본 개시의 일 실시예에 따른, 네트워크 환경 내에서 전자 장치(예: 도 1의 사용자 단말)의 블록 구 성도이다. 도 2를 참조하면, 네트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장치와 통신하거나, 또는 제 2 네트워크(예: 원거리 유선 또는 무선 통신 네트워크)를 통하여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 서버(예: 도 1의 서버를 통하여 전자 장치와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈, 디스플레이 모듈, 인터페이스, 연결 단자 , 전력 관리 모듈, 전력 공급 모듈, 통신 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하 나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 안테나 모듈 )은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일 실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세 서는 다른 구성요소(예: 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하 고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또는 어플리케이션 프 로세서) 또는 이와는 독립적으로 또는 함께 운용 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처 리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로 세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일 실시예에 따르면, 보조 프로세서 (예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구성요소(예: 통 신 모듈)의 일부로서 구현될 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi-supervised learning) 또는 강화 학습 (reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q- networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있다. 일 실시예로, 프로세서에 의해 실행되는 프로그램은, 하드 디스크와 같은 비휘발성 메모리에 저 장되어 있다가 프로그램이 시작되면 휘발성 메모리인 RAM에 적재되어 프로세서의 연산 장치에 의해 실행될 수 있다. 즉, 프로그램의 실행을 위해서는 기억공간이 필요할 수 있다. C 언어를 이용하여 프로그 램을 작성할 때 지역변수나 전역변수 등을 선언해 준 것도 사용할 기억공간을 확보하기 위함이다. 이와 같 이 프로그램에서 사용하게 될 기억공간을 마련하는 방법에는 크게 메모리 동적 할당과 메모리 정적 할당이 라는 두 가지 방법이 있다. 어떤 프로그램이 실행되면, 운용체제는 프로그램 실행을 위해 기억 공간을 할당하게 되는데, 이때 할당되는 기억공간의 위치는 데이터 (data) 영역, 힙 (heap) 영역, 스택 (stack) 영역으로 나누어 볼 수 있다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서)에 의해 사용되는 다양한 데이터 를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운용 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일 실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일 실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일 실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 전력 관리 모듈은 외부 또는 내부 전력 공급원(미도시)으로부터 전자 장치로 공급되는 전력을 관리할 수 있다. 일 실시예에 따르면, 전력 관리 모듈은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 전력 공급 모듈은 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일 실시예에 따르 면, 전력 공급 모듈은, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운용되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일 실시예에 따르면, 통 신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 제 1 네트워크 또는 제 2 네트워 크와 같은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일 실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일 실시예에 따르면, 안테나 모듈은 서브스트레이트(예: 인쇄회로기판 (PCB: printed circuit board) 위에형성된 도전체 또는 도전성 패턴으로 이루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일 실시예에 따르 면, 안테나 모듈은 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나 가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품(예: RFIC(radio frequency integrated circuit))이 추가로 안 테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일 실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일 실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(202, 또는 204) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일 실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(202, 204, 또는 208) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일 실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 이후 본 개시의 일 실시예는, 메모리 릭이 발생할 수 있는 전자 장치(예: 도 1의 전자 장치)를 기준으로 설명될 것이다. 하지만, 본 개시의 일 실시예는 전자 장치뿐만 아니라 메모리 관리가 필요한 서버(예: 도 1의 서버) 또는 가전 제품과 같은 다양한 전자 기기에 동일하게 적용될 수 있을 것이다. 일 실시예에 따르면, 전자 장차는 마련된 적어도 하나의 프로그램의 실행으로 인한 전체 아이템들을 대상 으로 함수 호출 횟수 (back-trace count)가 최저 차수인 아이템들 (예: back-trace count가 1인 아이템)(예: 도 8의 Count 1인 아이템)을 획득, 식별 또는 생성할 수 있다. 상기 back-trace count가 1인 아이템은 프 로그램의 실행으로 한번의 함수 호출이 발생한 아이템일 수 있다. 상기 전체 아이템들은 다양한 함수 호출 횟수 (back-trace count)(예: k = 1, 2, …… K, K는 최대 함수 호출 횟수)를 가질 수 있다. 상기 전체 아이템에는 동일 함수를 포함하는 복수의 아이템이 존재할 수도 있다. 상기 전자 장치는 획득, 식별 또는 생성된 최저 차수의 아이템들 중 동일 함수에 해당하는 중복 아이템을 제거할 수 있다. 일 실시예에 따르면, 전자 장치는 최저 차수의 아이템들 (예: back-trace count가 1인 아이템)에 대한 스 택 추적 정보를 추출할 수 있다. 상기 전자 장치는 상기 추출한 스택 추적 정보를 사용하여 해당 아이템이 메모리 릭을 유발하고 있거나, 유발하였는지를 검사하고, 이를 통해 메모리 릭이 의심되는 아이템을 식별, 추출 또는 결정할 수 있다. 상기 전자 장치는 최저 차수의 아이템들 중에서 메모리 릭이 의심되는 아이템이 식 별, 추출 또는 결정하면, 전체 아이템들을 대상으로 메모리 릭이 의심되는 최저 차수의 아이템과 관련된 다음 차수의 아이템들 (예: back-trace count가 4인 아이템)(예: 도 8의 Count 4인 아이템)을 획득, 식별 또는생성할 수 있다. 상기 back-trace count가 4인 아이템은 프로그램의 실행으로 네 번의 함수 호출들이 발생한 아 이템에 해당할 수 있다. 일 실시예에 따르면, 전자 장치는 다음 차수의 아이템들 (예: back-trace count가 4인 아이템)에 대한 스 택 추적 정보를 추출할 수 있다. 상기 전자 장치는 상기 추출한 스택 추적 정보를 사용하여 해당 아이템이 메모리 릭을 유발하고 있거나, 유발하였는지를 검사하고, 이를 통해 메모리 릭이 의심되는 아이템을 식별, 추출 또는 결정할 수 있다. 상기 전자 장치는 다음 차수(예: back-trace count가 4)의 아이템들 중에서 메모리 릭이 의심되는 아이템이 식별, 추출 또는 결정하면, 전체 아이템들을 대상으로 메모리 릭이 의심되는 다음 차수 (예: back-trace count가 4)인 아이템과 관련된 그 다음 차수의 아이템들 (예: back-trace count가 10인 아이 템)(예: 도 8의 Count 10인 아이템)을 획득, 식별 또는 생성할 수 있다. 상기 back-trace count가 10인 아이템은 프로그램의 실행으로 열 번의 함수 호출들이 발생한 아이템에 해당할 수 있다. 일 실시예에 따르면, 전자 장치는 그 다음 차수의 아이템들 (예: back-trace count가 10인 아이템)에 대한 스택 추적 정보를 추출할 수 있다. 상기 전자 장치는 상기 추출한 스택 추적 정보를 사용하여 해당 아이템 이 메모리 릭을 유발하고 있거나, 유발하였는지를 검사하고, 이를 통해 메모리 릭이 의심되는 아이템을 식별, 추출 또는 결정할 수 있다. 상술한 동작을 통하여, 전자 장치는 전체 아이템들에 포함된 최대 차수의 아이템 (예: back-trace count가 10인 아이템)(예: 도 8의 Count 10인 아이템)에 대한 스택 추적 정보를 추출하고, 상기 추출한 스택 추적 정보를 사용하여 메모리 릭을 야기한 최종 아이템을 확인할 수 있다. 도 8은 본 개시의 일 실시예에 따른, 전자 장치(예: 도 1의 전자 장치)에서 함수 호출 횟수와 오버헤드 사 이의 관계를 보이는 도면이다. 도 8을 참조하면, 일 실시예로 전자 장치는 함수 호출 횟수 (back-trace count)를 고려하여 계층적으로 메 모리 릭을 검사하기 위한, 대상 함수 호출 횟수 (back-trace count)를 설정 또는 결정할 수 있다. 상기 메모리 릭을 검사하기 위한 대상 함수 호출 횟수 (back-trace count)는, 예를 들어, 'count 1', 'count 4' 또는 'count 10'으로 설정 또는 결정될 수 있다. 상기 count 1인 아이템은 한번의 함수 (예: function 1 )가 호출되었음을 확인할 수 있다 (도 8의 (a) 참조). 상기 count 4인 아이템은 네 번의 함수 (예: function 1 , function 2 , function 3 , function 4 )가 호출되었음을 확인할 수 있다 (도 8의 (b) 참조). 상기 count 10인 아이템은 열 번의 함수 (예: function 1 , function 2 , function 3 ……. function 10 )가 호출되었음을 확인할 수 있다 (도 8의 (c) 참조). 일 실시예에 따르면, count 4인 아이템은 count 1인 아이템에 비해 스택 추적을 통한 메모리 릭을 검 사함에 따른 오버헤드가 클 수 있고, count 10인 아이템은 count 1인 아이템 또는 count 4인 아이템 에 비해 스택 추적을 통한 메모리 릭을 검사함에 따른 오버헤드가 클 수 있다. 여기서, count 1, count 4 또는 count 10은 전자 장치에서 프로그램 실행 시에 함수 호출이 발생되는 횟수에 해당할 수 있다. 일 예 로, count 4를 갖는 스택 구조인 (b)를 참조하면, function 1에서 function 2가 호출되고, function 2에서 function 3가 호출되며, function 3에서 function 4가 호출될 수 있다. 이와 같이, 함수의 호출 관계를 정의하고 있는 정보는 '스택 추적 정보'에 해당할 수 있다. 도 3은 본 개시의 일 실시예에 따른, 전자 장치(예: 도 1의 전자 장치)에서 메모리 릭을 검사하기 위한 제 어 흐름도이다. 도 3을 참조하면, 일 실시예로, 전자 장치는 최저 차수 (예: 함수 호출 횟수 (back-trace count)가 1회)인 하나 또는 복수의 스택 추적 정보를 추출하여 해당 프로세서에서 스택 추적 별로 할당한 메모리 크기를 획득할 수 있다. 상기 전자 장치는, 현재 복수의 프로세스들이 실행 중인 경우, 상기 복수의 프로세스 각각에서 최저 차수인 스택 추적 별로 할당한 메모리 크기를 획득할 수도 있다. 이하 설명에서는, 프로세서에서 메모리 크기를 획득하는 스택 추적의 대상을 '스택 추적 아이템'이라 칭하고, 상대적으로 낮은 차수를 갖는 스택 추적 아이템을 '하위 차수 스택 추적 아이템이라 칭하며, 상대적으로 높은 차수를 갖는 스택 추적 아이템을 '상위 차 수 스택 추적 아이템'이라 칭한다. 아울러, 최저 차수를 갖는 스택 추적 아이템을 '최저 차수 스택 추적 아이템 이라 칭하고, 최고 차수를 갖는 스택 추적 아이템을 '최고 차수 스택 추적 아이템'이라 칭한다. 일 실시예로, 전자 장치는 각 최저 차수 스택 추적 아이템에 대응한 스택 추적 정보로부터 획득한 할당 메 모리 크기를 사용하여 메모리 누적 사용 상태를 분석하고, 상기 분석 결과에 의해 해당 최저 차수 스택 추적 아 이템에서 메모리 릭이 발생하였는지 여부를 판단할 수 있다. 상기 전자 장치는, 특정 차수 (예: 함수 호출횟수 (back-trace count)가 1회)의 스택 추적 아이템이 메모리 릭을 유발하였다면, 다음 차수 (예: 함수 호출 횟수 (back-trace count)가 4회)의 스택 추적 아이템인 하나 또는 복수의 상위 차수 스택 추적 아이템에 대한 스택 추적 정보를 추출할 수 있다. 상기 전자 장치는 추출한 스택 추적 정보를 이용하여 해당 프로세서에 서 상위 차수 스택 추적 아이템 별로 할당한 메모리 크기를 획득할 수 있다. 상기 전자 장치는, 상위 차수 스택 추적 아이템에 대하여 복수의 스택 추적 정보가 추출되었다면, 상기 복수의 스택 추적 정보 각각에 의한 할당 메모리 크기를 획득할 수도 있다. 즉, 전자 장치는 메모리 릭의 발생 여부를 고려하여 다음 차수의 스택 추적 정보의 추출 여부를 결정함으로써, 스택 추적 정보를 추출할 대상 스택 추적 아이템의 수를 줄일 수 있다. 이 경우, 전자 장치에서 스택 추적 정보를 추출하기 위한 오버헤드를 줄일 수 있게 한다. 일 실시예로, 전자 장치는 각 상위 차수 스택 추적 아이템에 대하여 획득한 할당 메모리 크기를 사용하여 메모리 누적 사용 상태를 분석하고, 상기 분석 결과에 의해 해당 상위 차수 스택 추적 아이템에서 메모리 릭이 발생하였는지 여부를 판단할 수 있다. 만약 해당 상위 차수 스택 추적 아이템에서 메모리 릭이 발생하였다면, 상기 전자 장치는 상기 메모리 릭이 발생한 상위 차수 스택 추적 아이템이 최고 차수 스택 추적 아이템인 지를 판단할 수 있다. 이때, 상기 메모리 릭이 발생한 상위 차수 스택 추적 아이템이 최고 차수 스택 추적 아이 템이 아닌 경우, 상기 전자 장치는 다음 차수 (예: 함수 호출 횟수 (back-trace count)가 10회)의 스택 추 적 아이템인 하나 또는 복수의 상위 차수 스택 추적 아이템에서의 메모리 릭 발생 여부를 추가로 판단할 수 있 다. 그렇지 않고, 상기 메모리 릭이 발생한 상위 차수 스택 추적 아이템이 최고 차수 스택 추적 아이템인 경우, 상기 전자 장치는 상기 메모리 릭이 발생한 상위 차수 스택 추적 아이템에 의해 최종 메모리 릭을 유발된 것으로 분석할 수 있다. 보다 구체적으로 설명하면, 전자 장치는, 동작 311에서, 메모리 할당 요청이 발생하는지를 감시할 수 있다. 상기 메모리 할당 요청은, 예를 들어, 프로그램을 작성하는 단계에서 결정된 메모리 영역의 할당을 요청 하는 메모리 정적 할당 (static allocation) 또는 힙 영역을 이용하여 프로그램이 실행 중에 입력되는 자료에 맞게 메모리 영역의 할당을 요청하는 메모리 동적 할당 (dynamic allocation) 중 하나에 의해 발생할 수 있다. 상기 메모리 정적 할당은 프로그램이 실행될 때 미리 필요한 메모리 영역의 크기를 고정하기 위한 할당이거나, 변수 선언 또는 배열 선언과 같이 할당할 메모리 영역의 한계 크기를 알고 있을 경우에 사용할 수 있다. 상기 메모리 동적 할당은 많은 메모리 영역을 한꺼번에 할당 받아 배열로 사용할 수 있어 효율적일 수 있다. 배열 크 기를 미리 알 수 없는 경우에도, 상기 메모리 동적 할당을 사용하여 프로그램이 실행 중에 적당한 크기의 메모 리 영역을 할당하여 처리할 수 있다. 상기 메모리 동적 할당을 위한 순서는, 메모리 영역을 동적으로 할당 받을 변수를 포인터를 이용하여 선언하고, 메모리 할당 요청 함수 (예: malloc (*), calloc (*), realloc (*))를 이 용하여 메모리 영역을 동적으로 할당하며, 메모리 영역의 사용이 끝나면 메모리 할당 해제 함수 (예: free (*))를 이용하여 메모리 영역의 할당을 해제할 수 있다. 일 실시예로, 전자 장치는, 상기 메모리 할당 요청이 발생하면, 동작 313에서, 요청된 크기의 메모리 영역 을 할당할 수 있다. 상기 전자 장치는, 예를 들어, 상기 할당된 메모리 영역을 이용하여 프로세스 또는 프 로그램이 실행 중에 입력된 자료를 처리할 수 있다. 일 실시예로, 전자 장치는, 동작 315에서, 메모리 릭을 검사할 스택 추적 아이템이 갖을 호출 함수의 차수 를 지시하는 인덱스 n을 검사 대상 집합 K (={k1, k2……, km……, kfinal})에서 초기 값인 k1로 세팅할 수 있다. 일 예로, 검사 대상 집합 K는 {1, 4, 10}일 수 있다. 일 실시예로, 전자 장치는, 동작 317에서, 스택 추적 카운트 값, 즉 호출 함수의 차수가 n (=k1)인 스택 추적 정보를 추출할 수 있다. 상기 전자 장치는 상기 추출한 호출 함수의 차수가 n (=k1)인 스택 추적 정 보에 상응한 하나 또는 복수의 스택 추적 아이템들을 획득할 수 있다. 일 실시예로, 전자 장치는, 동작 319에서, 호출 함수의 차수가 n (=k1)인 스택 추적 정보에 대한 추적을 통하여 하나 또는 복수의 스택 추적 아이템들에 대한 메모리 릭이 발생하였는지를 검사할 수 있다. 일 실시예로, 전자 장치는, 동작 321에서, 호출 함수의 차수가 n (=k1)인 스택 추적 정보에 상응한 하나 또는 복수의 스택 추적 아이템들 중에서 메모리 릭이 발생한 스택 추적 아이템이 존재하는지를 판단할 수 있다. 상기 전자 장치는, 메모리 릭이 발생한 스택 추적 아이템이 존재하면, 동작 327을 수행할 수 있고, 메모리 릭이 발생한 스택 추적 아이템이 존재하지 않으면, 동작 323을 수행할 수 있다. 일 실시예로, 전자 장치는, 동작 323에서, 메모리 영역을 추가로 할당하여 스택 추적 크기를 증가시킬 수 있다. 상기 전자 장치는, 동작 325에서, 추가 메모리 할당이 이루어진 사항에 관한 데이터를 데이터베이스(DB) 에 업데이트할 수 있다. 일 실시예로, 전자 장치는, 동작 327에서, 선행하여 메모리 릭이 발생하였는지를 검사한 호출 함수의 차수 가 n이 검사 대상 집합 K에 포함된 마지막 호출 함수의 차수 (kfinal)인지를 판단할 수 있다. 상기 전자 장치 는, 검사한 호출 함수의 차수 n이 마지막 호출 함수의 차수 (kfinal)이면, 동작 331을 수행할 수 있고, 검사 한 호출 함수의 차수 n이 마지막 호출 함수의 차수 (kfinal)가 아니면, 동작 329를 수행할 수 있다. 일 실시예로, 전자 장치는, 동작 329에서, 선행하여 메모리 릭이 발생하였는지를 검사한 호출 함수의 차수 n을 검사 대상 집합 K에 포함된 다음 호출 함수의 차수 (knext)로 변경할 수 있다. 상기 전자 장치는 동작 317 내지 동작 321에서 호출 함수의 차수가 증가된 스택 추적 정보 (변경된 호출 함수의 차수 n의 스택 추적 정 보)를 추출하여 상위 차수 스택 추적 아이템에서 메모리 릭이 발생하였는지를 분석할 수 있다. 일 실시예로, 전자 장치는, 검사 대상 집합 K에 포함된 모든 호출 함수의 차수들을 이용한 스택 추적 정보 를 추축하여 메모리 릭의 발생 여부를 분석하였다면, 동작 331에서, 메모리 릭이 발생한 최고 차수 스택 추적 아이템에 대한 메모리 디버깅을 수행할 수 있다. 상술한 바에 따르면, 전자 장치는 수집된 스택 추적 아이템들 중에서 카운트 값이 n인 하나 또는 복수의 저차 스택 추적 아이템에서의 메모리 릭 여부를 판단하고, 상기 메모리 릭을 유발하는 저차 스택 추적 아이템이 존재하면, 카운트 값이 m인 하나 또는 복수의 고차 스택 추적 아이템에서의 메모리 릭 여부를 판단할 수 있다. 여기서, n은 양의 정수이고, m은 n보다 큰 양의 정수이다. 상기 전자 장치는, m이 최대 카운트 값인 경우, 상기 메모리 릭을 유발하는 고차 스택 추적 아이템을 사용하여 메모리 디버깅을 수행할 수 있다. 도 4는 본 개시의 일 실시예에 따른, 메모리 운용 장치에서 메모리 릭을 검사하기 위한 기능 블록도이다. 도 4를 참조하면, 일 실시예에 따라 전자 장치(예: 도 1의 전자 장치)에서 메모리 영역을 할당하거나 해제 하는 메모리 운용에 관여하는 메모리 운용 장치는 프로세스, 메모리 디버깅 모듈, 메모리 릭 분 석 모듈 또는 동적 메모리 할당 모듈을 포함할 수 있다. 상기 메모리 릭 분석 모듈은 상기 메모 리 디버깅 모듈에 포함된 내부 구성으로 마련되거나, 또는 별도의 외부 구성으로 마련될 수 있으며, 이에 한정되지는 않을 수 있다. 일 실시예로, 프로세스는 해당 프로그램을 기반으로 데이터 또는 신호를 처리하기 위한 전반적인 동작을 수행할 수 있다. 상기 프로세스는 해당 프로그램에서 정의하고 있는 함수들에 의한 절차를 수행함에 있어, 메모리 할당을 요청하는 함수 (예: malloc (*), calloc (*), realloc (*))와 같은 동적 메모리 할당 요청 함수)를 만날 수 있다. 이 경우, 상기 프로세스는 지정된 크기의 메모리 할당을 요청하는 호출을 발생할 수 있다. 상기 프로세서에 의한 메모리 할당 호출은, 동적 메모리 할당 모듈로 전달될 수 있다. 상기 동적 메모리 할당 모듈은 상기 프로세스의 메모리 할당 호출에 응답하여 필요한 크기의 메모리 영역 을 할당할 수 있다. 일 실시예로, 프로세스는, 임계 횟수 (예: 분당 150만번) 이상의 메모리 할당 요청이 발생하면, 함수 호출 이 이루어진 횟수에 비례하여 생성될 수 있는 호출 경로 차수가 최대인 경우에 스택 추적 정보를 추출하기 위한 오버헤드로 인하여 동작 성능이 느려질 수 있다. 이 경우, 프로세서는 호출 경로 차수가 저차인 스택 추적 정보를 추출하여 메모리 릭이 발생하였는지를 우선적으로 확인하고, 이를 통해 메모리 릭이 발생하였음이 확인 될 시에 다음 차수인 스택 추적 정보에 대한 추출이 이루어지도록 할 수 있다. 이 경우, 호출 경로 차수가 높은 고차의 스택 추적 정보를 추출하기 위한 오버헤드를 줄일 수 있다. 일 실시예로, 메모리 릭 분석 모듈은 메모리 디버깅 모듈에 의해 수집된 특정 호출 경로 차수 (예: 함수 호출 횟수 (back-trace count)가 1, 4 또는 10 중 하나)의 스택 추적 정보를 사용하여 스택 추적들의 메모 리 누적 사용 상태를 분석할 수 있다. 상기 특정 호출 경로 차수는 메모리 릭의 발생이 확인될 때마다 순차적으 로 증가할 수 있다. 예컨대, 메모리 릭 분석 모듈은 메모리 디버깅 모듈에 의해 수집된 함수 호출 횟 수 (back-trace count)가 1인 스택 추적 정보를 사용하여 최저 차수 스택 추적 아이템들에 대하여 메모리 릭이 발생한지를 분석할 수 있다. 그 분석 결과로 메모리 릭이 발생한 경우, 메모리 릭 분석 모듈은 메모리 디 버깅 모듈에 의해 수집된 함수 호출 횟수 (back-trace count)가 4인 스택 추적 정보를 사용하여 상위 차수 스택 추적 아이템들에 대하여 메모리 릭이 발생한지를 분석할 수 있다. 상술한 동작에 따라, 메모리 릭 분석 모 듈은 최고 차수 스택 추적 아이템까지의 메모리 릭 발생 여부를 분석할 수 있다. 이 경우, 메모리 릭 분석모듈은 모든 차수의 스택 추적 아이템들에 대한 분석을 수행하지 않고, 하위 차수의 스택 추적 아이템에서 메모리 릭이 발생한 경우에 한하여 일부 상위 차수의 스택 추적 아이템들에 제한하여 메모리 릭이 발생하였는지 를 분석할 수 있다. 일 실시예로, 메모리 릭 분석 모듈은 상기 메모리 누적 사용 상태의 분석 결과를 기반으로 각 스택 추적에 서의 메모리 릭 발생 여부를 확인할 수 있다. 상기 메모리 릭 분석 모듈은, 예를 들어, 특정 스택 추적이 메모리 릭을 유발하였다고 판단하면, 해당 스택 추적이 메모리 릭을 유발하였음을 지시하는 식별자를 부여할 수 있다. 상기 메모리 릭 현상은 시간이 경과할수록 할당된 메모리 영역이 해제되지 않고 쌓이므로 인하여 발생할 수 있다. 상기 메모리 릭은, 예를 들어, 환경이나 상황에 따라 그 조건이 변경될 수 있다. 일 실시예로, 동적 메모리 할당 모듈은, 프로세스에 의해 실행 중인 특정 프로그램으로부터 메모리 할당을 요청하는 호출이 발생하면, 상기 특정 프로그램을 위한 많은 메모리 영역을 한꺼번에 할당할 수 있어 효 율적일 수 있다. 상기 동적 메모리 할당 모듈은, 메모리 영역의 할당을 위한 배열 크기를 미리 알 수 없는 경우에도, 프로그램이 실행 중에 적당한 크기의 메모리 영역을 할당하여 처리할 수 있다. 상기 동적 메모리 할 당 모듈은, 예를 들어, 메모리 영역을 동적으로 할당 받을 변수를 포인터를 이용하여 선언하고, 메모리 할 당 요청 함수 (예: malloc (*), calloc (*), realloc (*))를 이용하여 메모리 영역을 동적으로 할당하며, 메모 리 영역의 사용이 끝나면 메모리 할당 해제 함수 (예: free (*))를 이용하여 메모리 영역의 할당을 해제하는 순 서에 따른 메모리 동적 할당을 수행할 수 있다. 상기 동적 메모리 할당 모듈에 의한 메모리 영역의 할당에 관한 정보는 메모리의 설명된 영역 (예: 스택 영역)에 스택 추적을 위한 스택 추적 정보로 기록될 수 있다. 일 실시예로, 메모리 디버깅 모듈는 저차인 스택 추적 아이템에서 메모리 릭이 발행하면, 호출의 차수를 지시하는 뎁스 카운트를 증가시킴으로써, 상위 차수 스택 추적 아이템에 대한 추적을 수행할 수 있다. 일 실시예로, 메모리 디버깅 모듈은 메모리 릭 분석 모듈과 연동하여 함수 호출의 차수를 지시하는 뎁스 카운트 (depth count)가 저차인 스택 추적 아이템부터 우선적으로 추적할 수 있다. 상기 메모리 디버깅 모 듈은, 예를 들어, 최저 차수 스택 추적 정보를 우선적으로 수집하고, 이를 메모리 릭 분석 모듈로 전 달하여 최저 차수 스택 추적 아이템에 대하여 메모리 릭의 발생 여부를 분석하도록 할 수 있다. 상기 메모리 디 버깅 모듈은 최저 차수 스택 추적 아이템 중에서 메모리 릭이 발생하면, 상기 메모리 릭이 발생한 최저 차 수 스택 추적 아이템에 연계 또는 파생될 수 있는 상위 차수 스택 추적 정보를 추출하고, 상기 추출한 상위 차 수 스택 추적 정보를 상기 메모리 릭 분석 모듈로 전달하여 상위 차수 스택 추적 아이템에 대하여 메모리 릭의 발생 여부를 분석하도록 할 수 있다. 이 경우, 메모리 디버깅 모듈는 모든 최고 차수 스택 추적 정보 들을 추출하지 않아도 됨에 따라, 스택 추적으로 인한 오버헤드를 줄일 수 있다. 보다 구체적으로 설명하면, 특정 프로세스에서 임계 횟수 (예: 분당 150만번) 이상의 메모리 할당 요청이 발생 하면, 메모리 디버깅 모듈는 최저 차수 (예: 함수 호출 횟수 (back-trace count)가 1회)인 하나 또는 복수 의 스택 추적 정보를 추출하여 최저 차수 스택 추적 아이템(433-1, 433-2, 433-3, 433-k) 별로 할당한 메모리 크기를 획득할 수 있다. 상기 메모리 디버깅 모듈는 각 최저 차수 스택 추적 아이템(433-1, 433-2, 433-3, 433-k)에 대하여 획득한 할당 메모리 크기를 사용하여 메모리 누적 사용 상태를 분석할 수 있다. 상기 메모리 디버깅 모듈는, 예를 들어, 분석 결과에 의해 특정 최저 차수 스택 추적 아이템(예: 최저 차수 스택 추적 아이템(433-2))에서 메모리 릭이 발생하였고, 나머지 최저 차수 스택 추적 아이템(433-1, 433-3, 433-k)에서 메모리 릭이 발생하지 않았음 을 판단할 수 있다. 이 경우, 상기 메모리 디버깅 모듈는 다음 차수 (예: 함수 호출 횟수 (back-trace count)가 4회)의 스택 추적 아이템인 하나 또는 복수의 상위 차수 스택 추적 아이템(435-1, 435-2)에 대한 스택 추적 정보를 추출할 수 있다. 상기 메모리 디버깅 모듈는 추출한 스택 추적 정보를 이용하여 상위 차수 스 택 추적 아이템(435-1, 435-2) 별로 할당된 메모리 크기를 획득할 수 있다. 상기 메모리 디버깅 모듈는 각 상위 차수 스택 추적 아이템(435-1, 435-2)에 대하여 획득한 할당 메모리 크기를 사용하여 메모리 누적 사용 상태를 분석할 수 있다. 상기 메모리 디버깅 모듈는 분석 결과에 의해 특정 상위 차수 스택 추적 아이템 (예: 상위 차수 스택 추적 아이템(435-2))에서 메모리 릭이 발생하였음을 판 단할 수 있다. 이 경우, 상기 메모리 디버깅 모듈는 다음 차수 (예: 함수 호출 횟수 (back-trace count)가 10회)의 스택 추적 아이템인 하나 또는 복수의 상위 차수 스택 추적 아이템에 대한 스택 추적 정보를 추출 할 수 있다. 상기 메모리 디버깅 모듈는 추출한 스택 추적 정보를 이용하여 상위 차수 스택 추적 아이템 에 대하여 할당한 메모리 크기를 획득할 수 있다.상기 메모리 디버깅 모듈는 상위 차수 스택 추적 아이템에 대하여 획득한 할당 메모리 크기를 사용하 여 메모리 누적 사용 상태를 분석할 수 있다. 상기 메모리 디버깅 모듈는 분석 결과에 의해 해당 상위 차 수 스택 추적 아이템에서 메모리 릭이 발생하였는지 여부를 판단할 수 있다. 상기 메모리 디버깅 모듈 는, 예를 들어, 해당 상위 차수 스택 추적 아이템에서 메모리 릭이 발생하였다면, 상기 상위 차수 스 택 추적 아이템이 최고 차수 스택 추적 아이템인지를 판단할 수 있다. 상기 메모리 디버깅 모듈는, 메모리 릭이 발생한 상위 차수 스택 추적 아이템이 최고 차수 스택 추적 아이템이 아닌 경우, 다음 차수의 스택 추적 아이템인 하나 또는 복수의 상위 차수 스택 추적 아이템에서의 메 모리 릭 발생 여부를 추가로 판단할 수 있다. 상기 메모리 디버깅 모듈는, 메모리 릭이 발생한 상위 차수 스택 추적 아이템이 최고 차수 스택 추적 아이템인 경우, 상기 메모리 릭이 발생한 상위 차수 스택 추적 아이템이 메모리 릭을 유발한 최종 스택 추적인 것으로 예측할 수 있다. 도 5는 본 개시의 일 실시예에 따른, 메모리 운용 장치(예: 도 6의 메모리 운영 장치)에서 프로세스 별로 동작 모드를 제어하기 위한 제어 흐름도이다. 도 5를 참조하면, 일 실시예로, 메모리 운영 장치는, 동작 511에서, 대기모드로의 동작을 수행할 수 있다. 상기 메모리 운영 장치는, 예를 들어, 복수의 메모리 운영 모듈들 (예: 도 6의 메모리 운용 모듈 A(610A), 메모리 운용 모듈 B(610B), 메모리 운용 모듈 C(610C), 메모리 운용 모듈 D(610D))을 포함할 수 있다. 이 경우, 상기 메모리 운영 장치에 포함된 메모리 운영 모듈들(예: 도 6의 메모리 운용 모듈 A(610A), 메모리 운용 모듈 B(610B), 메모리 운용 모듈 C(610C), 메모리 운용 모듈 D(610D)) 중 일부는 대기모드에서의 동작을 수행할 수 있고, 나머지 일부는 프로파일 모드에서의 동작을 수행할 수 있다. 예컨대, 동작 511에서 대기모드로의 동작 은 대기모드의 메모리 운영 모듈에서만 수행될 수 있다. 일 실시예로, 메모리 운영 장치은, 동작 513에서, 메모리 분석 요청이 발생하는지를 판단할 수 있다. 예를 들어, 상기 메모리 운영 장치가 복수의 메모리 운영 모듈들 (예: 도 6의 메모리 운용 모듈 A(610A), 메모 리 운용 모듈 B(610B), 메모리 운용 모듈 C(610C), 메모리 운용 모듈 D(610D))을 포함하는 경우, 대기모드에서 의 동작을 수행하고 있는 일부 메모리 운용 모듈 중 적어도 하나의 메모리 운용 모듈로 메모리 분석 요청 모듈 (예: 도 6의 메모리 분석 요청 모듈)이 메모리 분석 요청을 전달할 수 있다. 일 실시예로, 메모리 분석 요청을 수신한 메모리 운영 장치에 포함된 일부 메모리 운용 모듈은, 동작 515 에서, 대기모드에서 프로파일 모드로 상태 천이를 통한 전환을 수행할 수 있다. 상기 프로파일 모드로 상태 천 이한 메모리 운용 모듈은, 동작 517에서, 메모리 분석을 수행한 후, 동작 519에서, 메모리 분석이 완료되는지를 판단할 수 있다. 상기 메모리 분석이 완료되면, 해당 메모리 운용 모듈은, 동작 521에서, 프로파일모드에서 대 기모드로 상태 천이를 통한 전환을 수행할 수 있다. 도 6은 본 개시의 일 실시예에 따른, 메모리 운용 장치에서 프로세스 별로 동작 모드를 제어하기 위한 기 능 블록도이다. 도 6을 참조하면, 일 실시예로 메모리 운용 장치는 전자 장치(예: 도 1의 사용자 단말)에서 실행중인 복수의 프로세스들(예: 프로세스 A(611A), 프로세스 B(611B), 프로세스 C(611C), 프로세스 D(611D)) 별로 메모 리 디버깅 동작을 수행할 수 있는 메모리 운용 모듈들(예: 메모리 운용 모듈 A(610A), 메모리 운용 모듈 B(610B), 메모리 운용 모듈 C(610C), 메모리 운용 모듈 D(610D))을 포함할 수 있다. 상기 메모리 운용 장치 는 메모리 분석 요청 모듈 또는 메모리 디버거를 더 포함할 수 있다. 일 실시예로, 메모리 운용 모듈 A(610A), 메모리 운용 모듈 B(610B), 메모리 운용 모듈 C(610C) 또는 메모리 운 용 모듈 D(610D)는 프로세스(예: 프로세스 A(611A), 프로세스 B(611B), 프로세스 C(611C), 프로세스 D(611D)), 메모리 디버거(예: 메모리 디버거 A(613A), 메모리 디버거 B(613B), 메모리 디버거 C(613C), 메모리 디버거 D(613D)) 또는 동적 메모리 할당 모듈(예: 동적 메모리 할당 모듈 A(615A), 동적 메모리 할당 모듈 B(615B), 동 적 메모리 할당 모듈 C(615C), 동적 메모리 할당 모듈 거 D(615D))을 포함할 수 있다. 상기 메모리 운용 모듈 A(610A), 상기 메모리 운용 모듈 B(610B), 상기 메모리 운용 모듈 C(610C) 또는 상기 메모리 운용 모듈 D(610D)는, 예를 들어, 도 4를 참조하여 설명된 바와 동일한 구성 및 동작을 수행할 수 있다. 일 실시예로, 메모리 운용 모듈 A(610A), 메모리 운용 모듈 B(610B), 메모리 운용 모듈 C(610C) 또는 메모리 운 용 모듈 D(610D)에 포함된 메모리 디버거 A(613A), 메모리 디버거 B(613B), 메모리 디버거 C(613C) 또는 메모리 디버거 D(613D)는, 프로세스 A(611A), 프로세스 B(611B), 프로세스 C(611C) 또는 프로세스 D(611D)가 실행될 시에 함께 실행될 수 있다. 일 실시예로, 메모리 디버거(613A, 613B, 613C, 613D)가 기본적으로 사용하여야 하는 CPU 또는 메모리 영역을 고려할 때, 메모리 운용 장치에 포함된 모든 프로세서들(예: 프로세스 A(611A), 프로세스 B(611B), 프로세 스 C(611C), 프로세스 D(611D))에 메모리 디버거를 연결하는 것이 메모리 디버깅 성능을 저하할 수 있다. 이러 한 이유로 메모리 디버깅 성능이 저하되는 것을 방지하기 위한 일 실시예로, 메모리 운용 모듈 A(610A), 메모리 운용 모듈 B(610B), 메모리 운용 모듈 C(610C) 또는 메모리 운용 모듈 D(610D) 중 일부는 대기모드로 동작하도 록 하고, 나머지 일부는 프로파일 모드로 동작하도록 할 수 있다. 상기 대기모드의 메모리 운용 모듈은, 예를 들어, 메모리 디버깅 동작을 위한 필수 조건만 갖춘 상태에서의 동작을 수행할 수 있다. 상기 프로파일 모드의 메모리 운용 모듈은 메모리 디버깅 동작의 실질적인 프로파일 기능에 따른 메모리 분석 동작을 수행할 수 있다. 일 실시예로, 메모리 분석 요청 모듈은 런타임 동작 중에 메모리 디버깅 기능의 활성화를 원하는 메모리 운용 모듈에 포함된 프로세스에 메모리 분석 요청을 할 수 있다. 상기 메모리 분석 요청 모듈은, 예를 들 어, 프로세스 데몬 형태, 특정 구성 파일(configuration file) 형태, 프로세스 자신과 같은 다양한 형태로 존재 할 수 있다. 일 실시예로, 메모리 디버거는 복수의 스택 추적들 또는 메모리 할당에 따른 주소 정보를 관리하는 데이터베이스(DB)를 포함할 수 있다. 상기 메모리 디버거는, 예를 들어, 메모리 분석 요청 모듈(62 0)에 의해 메모리 분석 요청된 메모리 운용 모듈에 포함된 프로세스로 연결되어, 해당 메모리 운용 모듈에서의 메모리 분석을 시작할 수 있다. 도 7은 본 개시의 일 실시예에 따른, 메모리 운용 장치에서 프로세스 별로 동작 모드를 제어하기 위한 상태 천 이도이다. 도 7을 참조하면, 일 실시예로 전자 장치에서 실행중인 복수의 프로세스들(예: 도 6의 프로세스 A(611A), 프로세스 B(611B), 프로세스 C(611C), 프로세스 D(611D)) 중 적어도 하나의 프로세스는 대기모드로 동작할 수 있고, 나머지 프로세서는 프로파일 모드로 동작할 수 있다. 상기 대기모드의 프로세스는, 예를 들 어, 메모리 디버깅 동작을 위한 필수 조건만 갖춘 상태에서의 동작을 수행할 수 있다 (동작 711). 이 경우, 상 기 대기모드의 프로세스에서는, CPU에서의 오버헤드 없이 최소한의 메모리 만을 사용하여 동작할 수 있다. 상기 프로파일 모드의 프로세스는 메모리 디버깅 동작의 실질적인 프로파일 기능에 따른 메모리 분석 동작 을 수행할 수 있다 (동작 721). 일 실시예로, 전자 장치에서 실행 중인 복수의 프로세스들(예: 도 6의 프로세스 A(611A), 프로세스 B(611B), 프로세스 C(611C), 프로세스 D(611D)) 중 대기모드로 동작 중인 적어도 하나의 프로세스는, 동작 713에서, 메모리 분석 이벤트가 발생하면, 대기모드에서 프로파일 모드로 상태 천이할 수 있다. 일 실시예로, 전자 장치에서 실행 중인 복수의 프로세스들(예: 도 6의 프로세스 A(611A), 프로세스 B(611B), 프로세스 C(611C), 프로세스 D(611D)) 중 프로파일 모드로 동작 중인 적어도 하나의 프로세스는, 동작 723에서, 메모리 분석 완료 이벤트가 발생하면, 프로파일 모드에서 대기모드로 상태 천이할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치(#01)) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리(#36) 또는 외장 메모리(#38))에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램(#40))로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치(#01))의 프로세서(예: 프로세서 (#20))는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운용되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8"}
{"patent_id": "10-2022-0074199", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시예에 따른, 메모리 운용 시스템의 구조를 도시한 도면이다. 도 2는 본 개시의 일 실시예에 따른, 메모리 운용 장치의 블록 구성도이다. 도 3은 본 개시의 일 실시예에 따른, 메모리 운용 장치에서 메모리 릭을 검사하기 위한 제어 흐름도이다. 도 4는 본 개시의 일 실시예에 따른, 메모리 운용 장치에서 메모리 릭을 검사하기 위한 기능 블록도이다. 도 5는 본 개시의 일 실시예에 따른, 메모리 운용 장치에서 프로세스 별로 동작 모드를 제어하기 위한 제어 흐 름도이다.도 6은 본 개시의 일 실시예에 따른, 메모리 운용 장치에서 프로세스 별로 동작 모드를 제어하기 위한 기능 블 록도이다. 도 7은 본 개시의 일 실시예에 따른, 메모리 운용 장치에서 프로세스 별로 동작 모드를 제어하기 위한 상태 천 이도이다. 도 8은 본 개시의 일 실시예에 따른, 전자 장치에서 함수 호출 횟수 (back-trace count)와 오버헤드 (overhead) 사이의 관계를 보이는 도면이다. 도면의 설명과 관련하여, 동일 또는 유사한 구성요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있다."}
