{"patent_id": "10-2019-0086523", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2020-0011019", "출원번호": "10-2019-0086523", "발명의 명칭": "연산 회로, 이를 포함하는 연산 장치 및 시스템", "출원인": "에스케이하이닉스 주식회사", "발명자": "박용상"}}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "순차적으로 직렬 연결되고, 단위 사이클마다 수신되는 적어도 2개의 입력 신호 중 적어도 하나와 웨이트 신호에대해 MAC (Multiply and Accumulation) 연산을 수행하는 복수의 처리기; 및상기 복수의 처리기 중에서 제 1 내지 제 K 처리기와 순차적으로 순환 연결되고, 상기 제 1 내지 제 K 처리기중에서 연결된 처리기로부터 출력된 연산 값을 수신하여 연산 정보를 저장하는 공통 누산기를 포함하고,상기 K는 상기 적어도 2개의 입력 신호의 값과 하나의 처리기가 포함하는 가드 비트의 개수에 기초하여 결정되는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 복수의 처리기는 각각, 제 1 연산 동작 중에 제 1 비트 수를 갖는 하나의 입력 신호를 수신하고, 제 2 연산 동작 중에 각각 제 2 비트 수를 갖는 적어도 2개의 입력 신호를 수신하며,상기 제 1 비트 수의 최대 값은 (2X-1)*N 이상이고, X는 상기 입력 신호의 개수이며, N은 상기 제 2 비트 수인연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 적어도 2개의 입력 신호가 각각 N 비트를 포함하고, 상기 가드 비트의 개수가 G이며, 상기 적어도 2개의입력 신호가 각각 -2N-1 과 2N-1-1 사이의 정수일 때, 상기 K는 (22N+G-1-1)/22(N-1) 이하의 정수인 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,상기 적어도 2개의 입력 신호가 각각 N 비트를 포함하고, 상기 가드 비트의 개수가 G이며, 상기 적어도 2개의입력 신호가 각각 -2N-1+1 과 2N-1-1 사이의 정수일 때, 상기 K는 (22N+G-1-1)/(22(N-1)-2N+1) 이하의 정수인 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 적어도 2개의 입력 신호는 제 1 입력 신호 및 제 2 입력 신호를 포함하고, 상기 복수의 처리기 중 적어도하나는 상기 연산 값을 저장하는 출력 레지스터를 포함하고,상기 출력 레지스터는 복수 비트를 저장하는 저장 공간을 포함하며, 상기 제 2 입력 신호와 상기 웨이트 신호에대한 연산 값을 상기 저장 공간의 제 1 내지 제 M+G 비트에 저장하고, 상기 제 1 입력 신호와 상기 웨이트 신호에 대한 연산 값을 상기 저장 공간의 제 M+G+1 내지 제 2M+2G 비트에 저장하며, 상기 M은 상기 제 1 입력 신호 및 상기 제 2 입력 신호 중 하나의 비트 수와 상기 웨이트 신호의 비트 수의 합이며, 상기 G는 가드 비트의 개수에 대응하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 적어도 2개의 입력 신호는 제 1 입력 신호 및 제 2 입력 신호를 포함하고, 상기 복수의 처리기 중 적어도공개특허 10-2020-0011019-2-하나는 상기 단위 사이클마다 입력되는 상기 제 1 입력 신호와 상기 제 2 입력 신호를 저장하는 입력 레지스터;상기 웨이트 신호를 저장하는 웨이트 레지스터;상기 연산 값을 저장하는 출력 레지스터;상기 제 1 입력 신호와 상기 웨이트 신호를 곱셈하고, 상기 제 2 입력 신호와 상기 웨이트 신호를 곱셈하는 곱셈기;상기 웨이트 신호의 입력 횟수를 카운팅하고, 상기 카운팅 값에 기초하여 상기 출력 레지스터에 저장된 연산 값및 0 중 하나를 출력하는 오버 플로우 제어기; 및상기 곱셈기의 출력과 상기 오버 플로우 제어기의 출력을 합산하여 상기 연산 값을 업데이트하는 합산기를 포함하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6 항에 있어서,상기 입력 레지스터는 복수의 비트를 저장하는 저장 공간을 포함하고, 상기 입력 레지스터는 상기 제 2 입력 신호를 상기 저장 공간 중 제 1 비트 내지 제 N 비트에 순차적으로 저장하고, 상기 제 1 입력 신호를 제 N+G 비트 내지 제 2N+G 비트에 저장하며,상기 N은 상기 제 1 입력 신호 또는 상기 제 2 입력 신호의 비트 수에 대응하고, 상기 G는 가드 비트의 개수에대응하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 6 항에 있어서,상기 오버 플로우 제어기는 상기 카운팅 값이 임계 값 이하일 때 출력 레지스터에 저장된 연산 값을 출력하고,상기 카운팅 값이 임계 값을 초과했을 때 상기 0을 출력하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 6 항에 있어서,상기 오버 플로우 제어기는 상기 웨이트 신호의 입력 횟수를 카운팅하는 카운터;상기 카운터의 카운팅 값을 저장하는 카운트 레지스터; 및상기 카운팅 값에 기초하여 상기 출력 레지스터에 저장된 연산 값 및 0 중 하나를 출력하는 선택기를 포함하는연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 1 항에 있어서,상기 공통 누산기는 상기 복수의 처리기의 합산 횟수가 임계 값에 도달하였는지 여부에 기초하여 선택 신호, 커맨드 신호 및 어드레스 신호를 생성하는 컨트롤러;상기 선택 신호에 기초하여 상기 제 1 내지 제 K 처리기로부터 출력된 연산 값 중 하나를 출력하는 선택기;상기 커맨드 신호 및 상기 어드레스 신호에 기초하여 제 1 내지 제 K 연산 정보 중 하나를 출력하는 메모리; 및상기 선택기의 출력과 상기 메모리의 출력을 합산하는 합산기를 포함하고,상기 메모리는 상기 합산기의 출력을 상기 제 1 내지 제 K 연산 정보로 각각 저장하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "단위 사이클마다 적어도 2개의 입력 신호 중 적어도 하나를 수신하고, 상기 적어도 2개의 입력 신호 중 적어도하나와 웨이트 신호에 대해 MAC (Multiply and Accumulation) 연산을 수행하는 복수의 처리기;상기 복수의 처리기에 의해 연산된 연산 값을 복수의 연산 정보로 각각 저장하고, 상기 복수의 처리기의 합산공개특허 10-2020-0011019-3-횟수가 임계 값에 도달하는 단위 사이클마다 상기 복수의 처리기와 각각 연결되고, 상기 복수의 처리기 중 하나의 처리기로부터 출력되는 연산 값과 상기 하나의 처리기와 관련된 연산 정보에 대응하는 값을 합산하여 상기하나의 처리기와 관련된 연산 정보를 업데이트하는 공통 누산기를 포함하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서,상기 복수의 처리기는 각각, 제 1 연산 동작 중에 제 1 비트 수를 갖는 하나의 입력 신호를 수신하고, 제 2 연산 동작 중에 각각 제 2 비트 수를 갖는 적어도 2개의 입력 신호를 수신하며,상기 제 1 비트 수의 최대 값은 (2X-1)*N 이상이고, X는 상기 입력 신호의 개수이며, N은 상기 제 2 비트 수인연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 11 항에 있어서,상기 복수의 처리기 중 제 1 내지 제 K개의 처리기가 상기 공통 누산기와 공통 연결되고, 하나의 처리기는 G개의 가드 비트를 포함하고,상기 적어도 2개의 입력 신호가 각각 N 비트를 포함하고, 상기 적어도 2개의 입력 신호가 각각 -2N-1 과 2N-1-1사이의 정수일 때, 상기 K는 (22N+G-1-1)/22(N-1) 이하의 정수인 연산 회로.."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 11 항에 있어서,상기 복수의 처리기 중 제 1 내지 제 K 처리기가 상기 공통 누산기와 공통 연결되고, 하나의 처리기는 G개의 가드 비트를 포함하고,상기 적어도 2개의 입력 신호가 각각 N 비트를 포함하고, 상기 적어도 2개의 입력 신호가 각각 -2N-1+1 과 2N-1-1사이의 정수일 때, 상기 K는 (22N+G-1-1)/(22(N-1)-2N+1) 이하의 정수인 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 11 항에 있어서,상기 적어도 2개의 입력 신호는 제 1 입력 신호 및 제 2 입력 신호를 포함하고, 상기 복수의 처리기 중 적어도하나는 상기 연산 값을 저장하는 출력 레지스터를 포함하고,상기 출력 레지스터는 복수 비트를 저장하는 저장 공간을 포함하며, 상기 제 2 입력 신호와 상기 웨이트 신호에대한 연산 값을 상기 저장 공간의 제 1 내지 제 M+G 비트에 저장하고, 상기 제 1 입력 신호와 상기 웨이트 신호에 대한 연산 값을 상기 저장 공간의 제 M+G+1 내지 제 2M+2G 비트에 저장하며, 상기 M은 상기 제 1 입력 신호 및 상기 제 2 입력 신호 중 하나의 비트 수와 상기 웨이트 신호의 비트 수의 합이며, 상기 G는 가드 비트의 개수에 대응하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 11 항에 있어서,상기 적어도 2개의 입력 신호는 제 1 입력 신호 및 제 2 입력 신호를 포함하고, 상기 복수의 처리기 중 적어도하나는 상기 단위 사이클마다 입력되는 상기 제 1 입력 신호와 상기 제 2 입력 신호를 저장하는 입력 레지스터;상기 웨이트 신호를 저장하는 웨이트 레지스터;상기 연산 값을 저장하는 출력 레지스터;상기 제 1 입력 신호와 상기 웨이트 신호를 곱셈하고, 상기 제 2 입력 신호와 상기 웨이트 신호를 곱셈하는 곱셈기;공개특허 10-2020-0011019-4-상기 웨이트 신호의 입력 횟수를 카운팅하고, 상기 카운팅 값에 기초하여 상기 출력 레지스터에 저장된 연산 값및 0 중 하나를 출력하는 오버 플로우 제어기; 및상기 곱셈기의 출력과 상기 오버 플로우 제어기의 출력을 합산하여 상기 연산 값을 업데이트하는 합산기를 포함하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 16 항에 있어서,상기 입력 레지스터는 복수의 비트를 저장하는 저장 공간을 포함하고, 상기 입력 레지스터는 상기 제 2 입력 신호를 상기 저장 공간 중 제 1 비트 내지 제 N 비트에 순차적으로 저장하고, 상기 제 1 입력 신호를 제 N+G 비트 내지 제 2N+G 비트에 저장하며,상기 N은 상기 제 1 입력 신호 또는 상기 제 2 입력 신호의 비트 수에 대응하고, 상기 G는 가드 비트의 개수에대응하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 16 항에 있어서,상기 오버 플로우 제어기는 상기 카운팅 값이 임계 값 이하일 때 상기 출력 레지스터에 저장된 연산 값을 출력하고, 상기 카운팅 값이 임계 값을 초과할 때 상기 0을 출력하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 16 항에 있어서,상기 오버 플로우 제어기는 상기 웨이트 신호의 입력 횟수를 카운팅하는 카운터;상기 카운터의 카운팅 값을 저장하는 카운트 레지스터; 및상기 카운팅 값에 기초하여 상기 출력 레지스터에 저장된 연산 값 및 0 중 하나를 출력하는 선택기를 포함하는연산 회로."}
{"patent_id": "10-2019-0086523", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 11 항에 있어서,상기 공통 누산기는 상기 복수의 처리기의 합산 횟수가 임계 값에 도달하였는지 여부에 기초하여 선택 신호, 커맨드 신호 및 어드레스 신호를 생성하는 컨트롤러;상기 선택 신호에 기초하여 상기 제 1 내지 제 K 처리기로부터 출력된 연산 값 중 하나를 출력하는 선택기;상기 커맨드 신호 및 상기 어드레스 신호에 기초하여 제 1 내지 제 K 연산 정보 중 하나를 출력하는 메모리; 및상기 선택기의 출력과 상기 메모리의 출력을 합산하는 합산기를 포함하고,상기 메모리는 상기 합산기의 출력을 상기 제 1 내지 제 K 연산 정보로 각각 저장하는 연산 회로."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "연산 회로는 복수의 처리기 및 공통 누산기를 포함할 수 있다. 상기 복수의 처리기는 순차적으로 직렬 연결되고, 단위 사이클마다 수신되는 적어도 2개의 입력 신호 중 적어도 하나와 웨이트 신호에 대해 MAC (Multiply and Accumulation) 연산을 수행할 수 있다. 상기 공통 누산기는 제 1 내지 제 K 처리기와 순차적으로 순환 연결되고, 상기 제 1 내지 제 K 처리기 중에서 연결된 처리기로부터 출력된 연산 값을 수신하여 연산 정보를 저장할 수 있 다. 상기 K는 상기 적어도 2개의 입력 신호의 값과 하나의 처리기가 포함하는 가드 비트의 개수에 기초하여 결정 될 수 있다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 집적 회로 기술에 관한 것으로, 더 상세하게는 연산 장치 및 시스템에 관한 것이다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "4차 산업 혁명이 진행되면서 사물 인터넷(Internet of Things), 모바일(Mobile), 클라우드(Cloud), 빅 데이터 (Big Data) 및 인공지능(Artificial Intelligence)과 관련된 기술이 계속적으로 발전하고 있다. 인공 지능을 구현하기 위해 머신 러닝(Machine Learning)과 딥 러닝(Deep Learning)과 같은 기술이 개발되었다. 머신 러닝과 딥 러닝은 수신된 입력을 연산 또는 분류하여 출력을 생성하는 점에서 유사하지만, 머신 러닝은 인간이 입력한알고리즘을 통해 데이터를 분석 및 추론하는데 비해, 딥 러닝은 인공 신경망(Deep Neural Network)을 통해 데이 터를 분석 및 추론할 수 있다. 인공 신경망(Deep Neural Network) 회로는 수신된 입력에 대해 연산을 수행하여 출력을 생성하는 회로로서 수신 된 입력에 대해 곱셈 (Multiply)과 합산 (Accumulation)을 수행하여 출력을 생성하는 매트릭스 연산 회로를 포 함할 수 있다. 상기 매트릭스 연산 회로는 콘볼루션(convolution) 연산이 가능한 회로로서 일반적으로 시스톨릭 어레이(Systolic array)일 수 있다. 상기 시스톨릭 어레이는 활성화 입력과 같은 입력 특징(input feature)과 웨이트(weight) 입력에 대한 곱셈 연산 및 뎃셈 연산을 수행하여 출력을 생성할 수 있다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 실시예는 복수의 단위 처리기가 합산 처리기를 공유할 수 있는 연산 회로, 이를 포함하는 연산 장치 및 시스템을 제공할 수 있다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 실시예에 따른 연산 회로는 순차적으로 직렬 연결되고, 단위 사이클마다 수신되는 적어도 2개의 입력 신호 중 적어도 하나와 웨이트 신호에 대해 MAC (Multiply and Accumulation) 연산을 수행하는 복수의 처리기; 및 상기 복수의 처리기 중에서 제 1 내지 제 K 처리기와 순차적으로 순환 연결되고, 상기 제 1 내지 제 K 처리 기 중에서 연결된 처리기로부터 출력된 연산 값을 수신하여 연산 정보를 저장하는 공통 누산기를 포함하고, 상 기 K는 상기 적어도 2개의 입력 신호의 값과 하나의 처리기가 포함하는 가드 비트의 개수에 기초하여 결정될 수 있다. 본 발명의 실시예에 따른 연산 회로는 단위 사이클마다 적어도 2개의 입력 신호 중 적어도 하나를 수신하고, 상 기 적어도 2개의 입력 신호 중 적어도 하나와 웨이트 신호에 대해 MAC (Multiply and Accumulation) 연산을 수 행하는 복수의 처리기; 및 상기 복수의 처리기에 의해 연산된 연산 값을 복수의 연산 정보로 각각 저장하고, 상 기 복수의 처리기의 합산 횟수가 임계 값에 도달하는 단위 사이클마다 상기 복수의 처리기와 각각 연결되고, 상 기 복수의 처리기 중 하나의 처리기로부터 출력되는 연산 값과 상기 하나의 처리기와 관련된 연산 정보에 대응 하는 값을 합산하여 상기 하나의 처리기와 관련된 연산 정보를 업데이트하는 공통 누산기를 포함할 수 있다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시예는 낮은 정밀도 (low precision)를 갖는 복수의 입력 신호에 대한 MAC (multiply and Accumulation) 연산을 동시에 처리할 수 있기 때문에 연산 회로, 이를 포함하는 연산 장치 및 시스템의 성능을 증가시킬 수 있다. 또한, 복수의 처리기가 하나의 누산기와 공통 연결되므로, 연산 회로의 성능을 증가시키기 위한 연산 회로의 면적 증가가 최소화될 수 있다. 더 나아가, 동일한 양의 데이터를 연산하는데 소모되는 전력 을 감소시킬 수 있다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은 본 발명의 실시예에 따른 시스템의 구성을 보여주는 도면이다. 도 1을 참조하면, 상기 시스템은 호스트 장치 및 연산 장치를 포함할 수 있다. 상기 호스트 장치는 상기 연산 장치로 데이터 를 제공하고, 상기 연산 장치로부터 출력된 데이터를 수신할 수 있다. 상기 호스트 장치는 시스템 버 스를 통해 상기 연산 장치와 연결될 수 있다. 상기 호스트 장치는 상기 시스템 버스를 통해 상 기 연산 장치로 입력 데이터(IND1, IND2)를 전송할 수 있다. 상기 호스트 장치는 상기 연산 장치 가 상기 입력 데이터(IND1, IND2)에 대한 연산 동작을 수행하여 생성한 출력 데이터(OD)를 상기 시스템 버 스를 통해 수신할 수 있다. 또한, 상기 호스트 장치는 상기 연산 장치가 연산 동작을 수행할 수 있도 록 다양한 제어 신호를 상기 시스템 버스를 통해 상기 연산 장치로 제공할 수 있다. 상기 입력 데이 터는 제 1 입력 데이터(IND1) 및 제 2 입력 데이터(IND2)를 포함할 수 있다. 예를 들어, 상기 제 1 입력 데이터 (IND1)는 입력 피쳐 묶음(set of input feature)과 관련된 정보를 포함할 수 있다. 상기 제 2 입력 데이터 (IND2)는 웨이트(weight) 데이터와 관련된 정보를 포함할 수 있다. 상기 연산 장치는 상기 시스템 버스를 통해 상기 호스트 장치와 연결될 수 있다. 상기 연산 장 치는 상기 시스템 버스를 통해 상기 호스트 장치로부터 전송된 입력 데이터(IND1, IND2)를 수신 할 수 있다. 상기 연산 장치는 상기 입력 데이터(IND1, IND2)를 수신하여, 상기 입력 데이터(IND1, IND2) 에 대한 연산 동작을 수행할 수 있다. 상기 연산 장치는 상기 연산 동작을 수행하여 생성된 출력 데이터 (OD)를 상기 시스템 버스를 통해 상기 호스트 장치로 전송할 수 있다. 상기 연산 장치는 뉴럴 네트워크 (neural network) 연산 장치일 수 있다. 상기 연산 장치는 상기 호스트로부터 제 1 및 제 2 입력 데이터(IND1, IND2)를 수신하고, 입력 피쳐 묶음과 웨이트 신호에 대한 연산 동작을 수행할 수 있다. 상기 연산 동작은 상기 입력 피쳐 묶음과 상기 웨이트 신호에 대한 콘볼루션 (convolution) 연산일 수 있고, MAC (Multiply and Accumulation) 연산일 수 있다. 상기 연산 장치는 호스트 인터페이스, 버퍼 회로, 메모리 및 연산 유닛을 포함할 수 있다. 상기 호스트 인터페이스는 상기 시스템 버스와 연결되어 상기 호스트 장치로부터 전송된 상기 입력 데이터(IND1, IND2)를 수신하고, 수신된 입력 데이터(IND1, IND2)를 상기 연산 장치의 내부 회 로로 제공할 수 있다. 또한, 상기 호스트 인터페이스는 상기 연산 장치로부터 생성된 상기 출력 데이 터(OD)를 상기 시스템 버스를 통해 상기 호스트 장치로 전송할 수 있다. 상기 호스트 인터페이스 는 상기 시스템 버스를 통해 상기 제 1 및 제 2 입력 데이터(IND1, IND2)를 수신할 수 있다. 상기 호 스트 인터페이스는 수신된 제 1 입력 데이터(IND1)를 상기 버퍼 회로로 제공하고, 수신된 제 2 입력 데이터(IND2)를 상기 메모리로 제공할 수 있다. 상기 호스트 인터페이스는 상기 연산 유닛으로 부터 출력된 연산 데이터(CRD)를 상기 버퍼 회로를 통해 수신할 수 있다. 상기 호스트 인터페이스는 상기 연산 유닛으로부터 생성된 연산 데이터(CRD)에 기초하여 상기 시스템 버스를 구동하여 상기 호 스트 장치로 상기 출력 데이터(OD)를 전송할 수 있다. 상기 버퍼 회로는 상기 호스트 인터페이스로부터 제 1 입력 데이터(IND1)를 수신할 수 있다. 상기 버 퍼링 회로는 상기 제 1 입력 데이터(IND1)를 복수의 입력 피쳐 묶음(FD)으로 분류하여 저장할 수 있다. 복 수의 입력 피쳐 묶음(FD)은 각각 복수의 피쳐를 포함할 수 있다. 상기 피쳐는 임의의 비트 수를 포함할 수 있는 입력 피쳐 묶음(FD)의 단위 데이터일 수 있다. 상기 시스템 버스의 데이터 대역폭(data bandwidth)은 하나 의 피쳐의 사이즈와 상이할 수 있다. 상기 시스템 버스의 데이터 대역폭은 하나의 피쳐의 사이즈보다 클 수 있다. 상기 제 1 데이터(IND1)는 클럭 신호에 동기하여 상기 시스템 버스를 통해 전송될 수 있고, 상기 시스템 버스를 통해 한번에 전송되는 제 1 입력 데이터(IND1)의 비트 수는 하나의 피쳐의 비트 수보다 많 을 수 있고, 상기 시스템 버스를 통해 한번에 전송되는 제 1 입력 데이터(IND1)는 복수의 피쳐에 대한 정 보를 포함할 수 있다. 따라서, 상기 버퍼 회로는 상기 제 1 입력 데이터(IND1)를 복수의 입력 피쳐 묶음 (FD)으로 분류하고, 분류된 각각의 입력 피쳐 묶음(FD)을 저장할 수 있다. 상기 버퍼 회로는 상기 복수의 입력 피쳐 묶음(FD)을 상기 연산 유닛으로 제공할 수 있다. 상기 버퍼 회로는 상기 연산 유닛의 연산 효율을 증가시키기 위해 상기 복수의 입력 피쳐 묶음(FD)을 상기 연산 유닛으로 동시에 제공할 수 있 는 배치(batch) 동작을 수행할 수 있다. 상기 버퍼 회로는 상기 연산 유닛이 연산 동작을 수행하여 생성한 상기 연산 데이터(CRD)를 수신하고, 상기 연산 데이터(CRD)를 상기 호스트 인터페이스로 제공할 수 있다.상기 메모리는 상기 호스트 인터페이스로부터 제 2 입력 데이터(IND2)를 수신할 수 있다. 상기 메모 리는 상기 제 2 입력 데이터(IND2)를 복수의 웨이트 데이터(WD)로 분류하여 저장할 수 있다. 상기 메모리 는 상기 제 2 입력 데이터(IND2)를 복수의 웨이트 데이터(WD)로 분류하고, 분류된 각각의 웨이트 데이터 (WD)를 저장할 수 있다. 상기 메모리는 상기 복수의 웨이트 신호(WD)를 상기 연산 유닛으로 제공할 수 있다. 하나의 웨이트 데이터(WD)는 복수의 웨이트 신호를 포함할 수 있다. 상기 웨이트 신호는 임의의 비트 수를 포함할 수 있는 웨이트 데이터(WD)의 단위 데이터일 수 있다. 일 실시예에서, 상기 메모리는 SRAM (Synchronous Random Access Memory) 또는 DRAM (Dynamic Random Access Memory)일 수 있다. 상기 연산 유닛은 상기 버퍼 회로로부터 출력된 상기 복수의 입력 피쳐 묶음(FD)을 입력 신호로서 수 신할 수 있다. 상기 연산 유닛은 상기 동적 메모리로부터 출력된 복수의 웨이트 데이터(WD)를 수신할 수 있다. 상기 연산 유닛은 상기 입력 피쳐 묶음(FD)과 상기 웨이트 데이터(WD)에 대한 연산 동작을 수행 할 수 있다. 예를 들어, 상기 연산 유닛은 상기 입력 피쳐 묶음(FD)과 상기 웨이트 데이터(WD)에 대한 콘 볼루션 연산을 수행할 수 있다. 상기 연산 유닛은 복수의 연산 회로(141, 142, 쪋, 14n)를 포함할 수 있다. 상기 복수의 연산 회로(141, 142, 쪋, 14n)는 서로 동일한 구조를 갖는 MAC 연산 회로일 수 있다. 상기 복수의 연산 회로(141, 142, 쪋, 14n)는 각각 상기 입력 피쳐 묶음(FD)과 상기 웨이트 데이터(WD)에 대한 연산 동작을 수행하고, 연산 동작 결과를 상기 호스트 인터페이스로 출력할 수 있다. 상기 연산 회로(141, 142, 쪋, 14n)는 각각 복수의 처리기(processing element)를 포함하고, 상기 처리기는 클럭 신호에 동기하여 상기 입 력 피쳐 묶음(FD) 및 상기 웨이트 데이터(WD)를 수신하고, 수신된 입력 피쳐 묶음(FD) 및 상기 웨이트 데이터 (WD)에 대한 MAC 연산을 수행할 수 있다. 상기 복수의 연산 회로(141, 142, 쪋, 14n)는 각각 입력 피쳐 묶음 (FD)과 웨이트 데이터(WD)에 대한 MAC 연산을 수행하는 시스톨릭 어레이 (systolic array)를 포함할 수 있다. 도 2a 및 도 2b는 본 발명의 실시예에 따른 연산 회로의 구성 및 연산 동작을 보여주는 도면이다. 도 2a를 참조하면, 상기 연산 회로는 복수의 처리기(processing element, PE)를 포함하는 시스톨릭 어레이일 수 있 다. 상기 연산 회로는 도 1에 도시된 상기 복수의 연산 회로(141, 142, 쪋, 14n)로 각각 적용될 수 있다. 도 2a에서, 상기 연산 회로는 3개의 피쳐를 포함하는 3개의 입력 피쳐 묶음을 입력 신호로 수신하고, 3개 의 웨이트 신호를 포함하는 3개의 웨이트 데이터를 수신할 수 있다. 상기 연산 회로는 3개의 피쳐를 포함 하는 3개의 입력 피쳐 묶음과 3개의 웨이트 신호를 갖는 3개의 웨이트 데이터에 대한 MAC 연산을 수행할 수 있 도록 9개의 처리기를 구비하는 것을 예시하였다. 하지만, 입력 피쳐 묶음의 개수, 하나의 입력 피쳐 묶음이 포 함하는 피쳐의 개수, 웨이트 데이터의 개수, 하나의 웨이트 데이터가 포함하는 웨이트 신호의 개수는 3개보다 적거나 많을 수 있고, 이에 따라 상기 연산 회로에 포함되는 상기 처리기의 개수도 감소하거나 증가될 수 있다. 상기 연산 회로는 제 1 내지 제 9 단위 처리기(PE1-PE9)을 포함할 수 있다. 각각의 처리기는 단위 사이클 을 정의하는 클럭 신호(CLK)에 동기하여 상기 입력 피쳐 묶음 및 웨이트 데이터에 포함되는 피쳐 및 웨이트 신 호를 순차적으로 수신하고, 수신된 피쳐 및 웨이트 신호에 대해 MAC 연산을 수행할 수 있다. 상기 제 1 내지 제 9 단위 처리기(PE1-PE9)는 각각 곱셈 로직(multiply logic), 합산 로직(accumulation logic) 및 레지스터를 포 함할 수 있다. 상기 제 1 내지 제 9 단위 처리기(PE1-PE9)는 상기 곱셈 로직을 통한 곱셈과 상기 합산 로직을 통한 합산을 병렬적으로 수행할 수 있다. 도 2b는 입력 피쳐 묶음(FD)과 웨이트 데이터(WD)를 행렬로 표현한 것 이고, 상기 입력 피쳐 묶음(FD)과 웨이트 데이터(WD)를 콘볼루션 연산한 결과(FD X WD)를 보여준다. 도 2a 및 도 2b를 참조하여 상기 연산 회로의 동작을 설명하면 다음과 같다. 첫 번째 단위 사이클 중에 제 1 클럭 신호(CLK1)가 토글하면, 상기 제 1 단위 처리기(PE1)는 상기 제 1 입력 피 쳐 묶음의 제 1 피쳐(F11) 및 상기 제 1 웨이트 데이터의 제 1 웨이트 신호(W11)를 수신할 수 있다. 상기 제 1 단위 처리기(PE1)는 상기 제 1 입력 피쳐 묶음의 제 1 피쳐(F11)와 상기 제 1 웨이트 데이터의 제 1 웨이트 신 호(W11)를 곱하여 F11W11을 생성할 수 있다. 두 번째 단위 사이클 중에 제 2 클럭 신호(CLK2)가 토글하면, 상기 제 1 단위 처리기(PE1)는 이전에 연산된 F11W11과 0을 합산하여 연산 결과를 저장할 수 있다. 상기 제 1 단위 처리기(PE1)는 상기 제 1 입력 피쳐 묶음 의 제 2 피쳐(F12)를 수신하며, 상기 제 2 웨이트 데이터의 제 1 웨이트 신호(W21)를 수신할 수 있다. 상기 제 1 단위 처리기(PE1)는 상기 제 1 입력 피쳐 묶음의 제 1 피쳐(F11)를 제 2 단위 처리기(PE2)로 출력하고, 상기 제 1 웨이트 데이터의 제 1 웨이트 신호(W11)를 제 3 단위 처리기(PE3)로 출력할 수 있다. 상기 제 1 단위 처리 기(PE1)는 상기 제 1 입력 피쳐 묶음의 제 2 피쳐(F12)와 상기 제 2 웨이트 데이터의 제 1 웨이트 신호(W21)를 곱하여 F12W21를 생성할 수 있다. 상기 제 2 단위 처리기(PE2)는 상기 두 번째 클럭 신호(CLK2)에 동기하여 상 기 제 1 웨이트 데이터의 제 2 웨이트 신호(W12)를 수신하고, 상기 제 1 단위 처리기(PE1)로부터 상기 제 1 입력 피쳐 묶음의 제 1 피쳐(F11)를 수신할 수 있다. 상기 제 2 단위 처리기(PE2)는 상기 제 1 입력 피쳐 묶음의 제 1 피쳐(F11)와 상기 제 1 웨이트 데이터 제 2 웨이트 신호(W12)를 곱하여 F11W12를 생성할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 두 번째 클럭 신호(CLK2)에 동기하여 상기 제 2 입력 피쳐 묶음의 제 1 피쳐(F21)를 수신하고, 상기 제 1 단위 처리기(PE1)로부터 상기 제 1 웨이트 데이터의 제 1 웨이트 신호(W11)를 수신할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 제 2 입력 피쳐 묶음의 제 1 피쳐(W21)와 상기 제 1 웨이트 데이터 제 1 웨이트 신호(W11)를 곱하여 F21W11을 생성할 수 있다. 세 번째 단위 사이클 중에 제 3 클럭 신호(CLK3)가 토글하면, 상기 제 1 단위 처리기(PE1)는 이전에 계산된 F11W11과 F12W21을 합산하고 연산 결과 (F11W11+F12W21)를 저장할 수 있다. 상기 제 1 단위 처리기(PE1)는 제 1 입력 피쳐 묶음의 제 3 피쳐(F13)와 상기 제 3 웨이트 데이터의 제 1 웨이트 신호(W31)를 수신할 수 있다. 상 기 제 1 단위 처리기(PE1)는 상기 제 1 입력 피쳐 묶음의 제 2 피쳐(F12)를 상기 제 2 단위 처리기(PE2)로 출력 하고, 상기 제 2 웨이트 데이터의 제 1 웨이트 신호(W21)를 상기 제 3 단위 처리기(PE3)로 출력할 수 있다. 상 기 제 1 단위 처리기(PE1)는 상기 제 1 입력 피쳐 묶음의 제 3 피쳐(F13)와 상기 제 3 웨이트 데이터 제 1 웨이 트 신호(W31)를 곱하여 F13W31을 생성할 수 있다. 상기 제 2 단위 처리기(PE2)는 이전에 연산된 F11W12과 0을 합산하여 연산 결과를 저장할 수 있다. 상기 제 2 단위 처리기(PE2)는 상기 제 2 웨이트 데이터의 제 2 웨이트 신호(W22)를 수신하며, 상기 제 1 단위 처리기(PE1)로부터 상기 제 1 입력 피쳐 묶음의 제 2 피쳐(F12)를 수신 할 수 있다. 상기 제 2 단위 처리기(PE2)는 상기 제 1 입력 피쳐 묶음의 제 1 피쳐(F11)를 제 4 단위 처리기 (PE4)로 출력하고, 상기 제 1 웨이트 데이터의 제 2 웨이트 신호(W12)를 제 5 단위 처리기(PE5)로 출력할 수 있 다. 상기 제 2 단위 처리기(PE2)는 상기 제 1 입력 피쳐 묶음의 제 2 피쳐(F12)와 상기 제 2 웨이트 데이터의 제 2 웨이트 신호(W22)를 곱하여 F12W22를 생성할 수 있다. 상기 제 3 단위 처리기(PE3)는 이전에 연산된 F21W11을 0과 합산하여 연산 결과를 저장할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 제 2 입력 피쳐 묶음 의 제 2 피쳐(F22)를 수신하고, 상기 제 1 단위 처리기(PE1)로부터 상기 제 2 웨이트 데이터의 제 1 웨이트 신 호(W21)를 수신할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 제 2 입력 피쳐 묶음의 제 1 피쳐(F21)를 상기 제 5 단위 처리기(PE5)로 출력하고, 상기 제 1 웨이트 데이터의 제 1 웨이트 신호(W11)를 제 6 단위 처리기 (PE6)로 출력할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 제 2 입력 피쳐 묶음의 제 2 피쳐(F22)와 상기 제 2 웨이트 데이터의 제 1 웨이트 신호(W21)를 곱하여 F22W21를 생성할 수 있다. 상기 제 4 단위 처리기(PE4)는 상기 제 3 클럭 신호(CLK3)에 동기하여 상기 제 1 웨이트 데이터의 제 3 웨이트 신호(W13)를 수신하고, 상기 제 2 단위 처리기(PE2)로부터 제 1 입력 피쳐 묶음의 제 1 피쳐(F11)를 수신할 수 있다. 상기 제 4 단위 처리기 (PE4)는 상기 제 1 입력 피쳐 묶음의 제 1 피쳐(F11)와 상기 제 1 웨이트 데이터의 제 3 웨이트 신호(W13)를 곱 하여 F11W13을 생성할 수 있다. 상기 제 5 단위 처리기(PE5)는 상기 제 2 단위 처리기(PE2)으로부터 상기 제 1 웨이트 데이터의 제 2 웨이트 신호(W12)를 수신하고, 상기 제 3 단위 처리기(PE3)로부터 제 2 입력 피쳐 묶음의 제 1 피쳐(F21)를 수신할 수 있다. 상기 제 5 단위 처리기(PE5)는 상기 제 2 입력 피쳐 묶음의 제 1 피쳐(F21) 와 상기 제 1 웨이트 데이터의 제 2 웨이트 신호(W12)를 곱하여 F21W12를 생성할 수 있다. 상기 제 6 단위 처리 기(PE6)는 상기 세 번째 클럭 신호(CLK6)에 동기하여 상기 제 3 입력 피쳐 묶음의 제 1 피쳐(F31)를 수신하고, 상기 제 3 단위 처리기(PE3)로부터 상기 제 1 웨이트 데이터의 제 1 웨이트 신호(W11)를 수신할 수 있다. 상기 제 6 단위 처리기(PE6)는 상기 제 3 입력 피쳐 묶음의 제 1 피쳐(F31)와 상기 제 1 웨이트 데이터의 제 1 웨이 트 신호(W11)를 곱하여 F31W11을 생성할 수 있다. 네 번째 단위 사이클 중에 제 4 클럭 신호(CLK4)가 토글하면, 상기 제 1 단위 처리기(PE1)는 이전에 연산된 F11W11+F12W21과 F13W31을 합산하여 연산 결과 (F11W11+F12W21+F13W31)를 저장할 수 있다. 상기 제 1 단위 처 리기(PE1)는 상기 제 1 입력 피쳐 묶음의 제 3 피쳐(F13)를 상기 제 2 단위 처리기(PE2)로 출력하고, 상기 제 3 웨이트 데이터의 제 1 웨이트 신호(W31)를 상기 제 3 단위 처리기(PE3)로 출력할 수 있다. 상기 제 2 단위 처리 기(PE2)는 이전에 계산된 F11W12와 F12W22를 합산하고 연산 결과(F11W12+F12W22)를 저장할 수 있다. 상기 제 2 단위 처리기(PE2)는 상기 제 3 웨이트 데이터의 제 2 웨이트 신호(W32)를 수신하고, 상기 제 1 단위 처리기 (PE1)로부터 상기 제 1 입력 피쳐 묶음의 제 3 피쳐(F13)를 수신할 수 있다. 상기 제 2 단위 처리기(PE2)는 상 기 제 1 입력 피쳐 묶음의 제 2 피쳐(F12)를 상기 제 4 단위 처리기(PE4)로 출력하고, 상기 제 2 웨이트 데이터 의 제 2 웨이트 신호(W22)를 상기 제 5 단위 처리기(PE5)로 출력할 수 있다. 상기 제 2 단위 처리기(PE2)는 상 기 제 1 입력 피쳐 묶음의 제 3 피쳐(F13)와 상기 제 3 웨이트 데이터의 제 2 웨이트 신호(W32)를 곱하여 F13W32를 생성할 수 있다. 상기 제 3 단위 처리기(PE3)는 이전에 계산된 F21W11과 F22W21를 합산하여 연산 결과 (F21W11+F22W21)를 저장할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 제 2 입력 피쳐 묶음의 제 3 피쳐 (F23)를 수신하고, 상기 제 1 단위 처리기(PE1)로부터 상기 제 3 웨이트 데이터의 제 1 웨이트 신호(W31)를 수 신할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 제 2 입력 피쳐 묶음의 제 2 피쳐(F22)를 상기 제 5 단위 처리기(PE5)로 출력하고, 상기 제 2 웨이트 데이터의 제 1 웨이트 신호(W21)를 상기 제 6 단위 처리기(PE6)로 출 력할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 제 2 입력 피쳐 묶음의 제 3 피쳐(F23)와 상기 제 3 웨이트 데이터의 제 1 웨이트 신호(W31)를 곱하여 F23W31을 생성할 수 있다. 상기 제 4 단위 처리기(PE4)는 상기 네 번 째 클럭 신호(CLK4)에 동기하여 상기 제 2 웨이트 데이터의 제 3 웨이트 신호(W23)를 수신하고, 상기 제 2 단위 처리기(PE2)으로부터 상기 제 1 입력 피쳐 묶음의 제 2 피쳐(F12)를 수신할 수 있다. 상기 제 4 단위 처리기 (PE4)는 이전에 연산된 F11W13을 0과 합산하여 연산 결과를 저장할 수 있다. 상기 제 4 단위 처리기(PE4)는 상 기 제 1 웨이트 데이터의 제 3 웨이트 신호(W13)를 제 7 단위 처리기(PE7)로 출력할 수 있다. 상기 제 4 단위 처리기(PE4)는 상기 제 1 입력 피쳐 묶음의 제 2 피쳐(F12)와 상기 제 2 웨이트 데이터의 제 3 웨이트 신호 (W23)를 곱하여 F12W23을 생성할 수 있다. 상기 제 5 단위 처리기(PE5)는 이전에 연산된 F21W12과 0을 합산하여 연산 결과를 저장할 수 있다. 상기 제 5 단위 처리기(PE5)는 상기 제 2 단위 처리기(PE2)로부터 제 2 웨이트 데 이터의 제 2 웨이트 신호(W22)를 수신하고, 상기 제 3 단위 처리기(PE3)로부터 제 2 입력 피쳐 묶음의 제 2 피 쳐(F22)를 수신할 수 있다. 상기 제 5 단위 처리기(PE5)는 상기 제 2 입력 피쳐 묶음의 제 1 피쳐(F21)를 상기 제 7 단위 처리기(PE7)로 출력하고, 상기 제 1 웨이트 데이터의 제 2 웨이트 신호(W12)를 제 8 단위 처리기 (PE8)로 출력할 수 있다. 상기 제 5 단위 처리기(PE5)는 상기 제 2 입력 피쳐 묶음의 제 2 피쳐(F22)와 상기 제 2 웨이트 데이터의 제 2 웨이트 신호(W22)를 곱하여 F22W22를 생성할 수 있다. 상기 제 6 단위 처리기(PE6)는 이전에 연산된 F31W11을 0과 합산하여 연산 결과를 저장할 수 있다. 상기 제 6 단위 처리기(PE6)는 상기 제 3 입력 피쳐 묶음의 제 2 피쳐(F32)를 수신하고, 상기 제 3 단위 처리기(PE3)로부터 제 2 웨이트 데이터의 제 1 웨이트 신호(W21)를 수신할 수 있다. 상기 제 6 단위 처리기(PE6)는 상기 제 3 입력 피쳐 묶음의 제 1 피쳐 (F31)를 상기 제 8 단위 처리기(PE8)로 출력할 수 있다. 상기 제 6 단위 처리기(PE6)는 상기 제 3 입력 피쳐 묶 음의 제 2 피쳐(F32)와 상기 제 2 웨이트 데이터의 제 1 웨이트 신호(W21)를 곱하여 F32W21를 생성할 수 있다. 상기 제 7 단위 처리기(PE7)는 상기 제 4 단위 처리기(PE4)으로부터 상기 제 1 웨이트 데이터의 제 3 웨이트 신 호(W13)를 수신하고, 상기 제 5 단위 처리기(PE5)으로부터 제 2 입력 피쳐 묶음의 제 1 피쳐(F21)를 수신할 수 있다. 상기 제 7 단위 처리기(PE7)는 상기 제 2 입력 피쳐 묶음의 제 1 피쳐(F21)와 상기 제 1 웨이터 데이터의 제 3 웨이트 신호(W13)를 곱하여 F21W13을 생성할 수 있다. 상기 제 8 단위 처리기(PE8)는 상기 제 5 단위 처리 기(PE5)로부터 제 1 웨이트 데이터의 제 2 웨이트 신호(W12)를 수신하고, 제 6 단위 처리기(PE6)로부터 제 3 입 력 피쳐 묶음의 제 1 피쳐(F31)를 수신할 수 있다. 상기 제 8 단위 처리기(PE8)는 상기 제 3 입력 피쳐 묶음의 제 1 피쳐(F31)와 상기 제 1 웨이트 데이터의 제 2 웨이트 신호(W12)를 곱하여 F31W12를 생성할 수 있다. 다섯 번째 단위 사이클 중에 제 5 클럭 신호(CLK5)가 토글하면, 상기 제 2 단위 처리기(PE2)는 이전에 계산된 F11W12+F12W22와 F13W32를 합산하여 연산 결과 (F11W12+F12W22+F13W32)를 저장할 수 있다. 상기 제 2 단위 처 리기(PE2) 상기 제 1 입력 피쳐 묶음의 제 3 피쳐(F13)를 상기 제 4 단위 처리기(PE4)로 출력하고, 상기 제 3 웨이트 데이터의 제 2 웨이트 신호(W32)를 상기 제 5 단위 처리기(PE5)로 출력할 수 있다. 상기 제 3 단위 처리 기(PE3)는 이전에 계산된 F21W11+F22W21과 F23W31을 합산하여 연산 결과 (F21W11+F22W21+F23W31)를 저장할 수 있다. 상기 제 3 단위 처리기(PE3)는 상기 제 2 입력 피쳐 묶음의 제 3 피쳐(F23)를 상기 제 5 단위 처리기 (PE5)로 출력하고, 상기 제 3 웨이트 데이터의 제 1 웨이트 신호(W31)를 제 6 단위 처리기(PE6)로 출력할 수 있 다. 상기 제 4 단위 처리기(PE4)는 이전에 계산된 F11W13과 F12W23을 합산하여 연산 결과(F11W13+F12W23)를 저 장할 수 있다. 상기 제 4 단위 처리기(PE4)는 상기 제 3 웨이트 데이터의 제 3 웨이트 신호(W33)를 수신하고, 상기 제 2 단위 처리기(PE2)로부터 상기 제 1 입력 피쳐 묶음의 제 3 피쳐(F13)를 수신할 수 있다. 상기 제 4 단위 처리기(PE4)는 상기 제 2 웨이트 데이터의 제 3 웨이트 신호(W23)를 상기 제 7 단위 처리기(PE7)로 출력할 수 있다. 상기 제 4 단위 처리기(PE4)는 상기 제 1 입력 피쳐 묶음의 제 3 피쳐(F13)와 상기 제 3 웨이트 데이 터의 제 3 웨이트 신호(W33)를 곱하여 F13W33을 생성할 수 있다. 상기 제 5 단위 처리기(PE5)는 이전에 계산된 F21W12와 F22W22를 합산하여 연산 결과(F21W12+F22W22)를 저장할 수 있다. 상기 제 5 단위 처리기(PE5)는 상기 제 2 단위 처리기(PE2)로부터 상기 제 3 웨이트 데이터의 제 2 웨이트 신호(W32)를 수신하고, 상기 제 3 단위 처리기(PE3)로부터 제 2 입력 피쳐 묶음의 제 3 피쳐(F23)를 수신할 수 있다. 상기 제 5 단위 처리기(PE5)는 상 기 제 7 단위 처리기(PE7)로 제 2 입력 피쳐 묶음의 제 2 피쳐(F22)를 출력하고, 상기 제 8 단위 처리기(PE8)로 제 2 웨이트 데이터의 제 2 웨이트 신호(W22)를 출력할 수 있다. 상기 제 5 단위 처리기(PE5)는 상기 제 2 입력 피쳐 묶음의 제 3 피쳐(F23)와 상기 제 3 웨이트 데이터의 제 2 웨이트 신호(W32)를 곱하여 F23W32를 생성할 수 있다. 상기 제 6 단위 처리기(PE6)는 이전에 계산된 F31W11과 F32W21을 합산하여 연산 결과(F31W11+F32W21)를 저장할 수 있다. 상기 제 6 단위 처리기(PE6)는 상기 제 3 입력 피쳐 묶음의 제 3 피쳐(F33)를 수신하고, 상기 제 3 단위 처리기(PE3)로부터 제 3 웨이트 데이터의 제 1 웨이트 신호(W31)를 수신할 수 있다. 상기 제 6 단위 처리기(PE6)는 상기 제 3 입력 피쳐 묶음의 제 2 피쳐(F32)를 상기 제 8 단위 처리기(PE8)로 출력할 수 있다.상기 제 6 단위 처리기(PE6)는 상기 제 3 입력 피쳐 묶음의 제 3 피쳐(F33)와 상기 제 3 웨이트 데이터의 제 1 웨이트 신호(W31)를 곱하여 F33W31을 생성할 수 있다. 상기 제 7 단위 처리기(PE7)는 이전에 연산된 F21W13과 0 을 합산하여 연산 결과를 저장할 수 있다. 상기 제 7 단위 처리기(PE7)는 상기 제 4 단위 처리기(PE4)로부터 제 2 웨이트 데이터의 제 3 웨이트 신호(W23)를 수신하고, 상기 제 5 단위 처리기(PE5)로부터 제 2 입력 피쳐 묶음 의 제 2 피쳐(F22)를 수신할 수 있다. 상기 제 7 단위 처리기(PE7)는 상기 제 1 웨이트 데이터의 제 3 웨이트 신호(W13)를 상기 제 9 단위 처리기(PE9)로 출력할 수 있다. 상기 제 7 단위 처리기(PE7)는 상기 제 2 입력 피 쳐 묶음의 제 2 피쳐(F22)와 상기 제 2 웨이트 데이터의 제 3 웨이트 신호(W23)를 곱하여 F22W23을 생성할 수 있다. 상기 제 8 단위 처리기(PE8)는 이전에 연산된 F31W12와 0을 합산하여 연산 결과를 저장할 수 있다. 상기 제 8 단위 처리기(PE8)는 상기 제 5 단위 처리기(PE5)로부터 제 2 웨이트 데이터의 제 2 웨이트 신호(W22)를 수 신하고, 상기 제 6 단위 처리기(PE6)로부터 제 3 입력 피쳐 묶음의 제 2 피쳐(F32)를 수신할 수 있다. 상기 제 8 단위 처리기(PE8)는 상기 제 3 입력 피쳐 묶음의 제 1 피쳐(F31)를 상기 제 9 단위 처리기(PE9)로 출력할 수 있다. 상기 제 8 단위 처리기(PE8)는 상기 제 3 입력 피쳐 묶음의 제 2 피쳐(F32)와 상기 제 2 웨이트 데이터의 제 2 웨이트 신호(W22)를 곱하여 F32W22를 생성할 수 있다. 상기 제 9 단위 처리기(PE9)는 상기 제 7 단위 처리 기(PE7)로부터 제 1 웨이트 데이터의 제 3 웨이트 신호(W13)를 수신하고, 상기 제 8 단위 처리기(PE8)로부터 제 3 입력 피쳐 묶음의 제 1 피쳐(F31)를 수신할 수 있다. 상기 제 9 단위 처리기(PE9)는 상기 제 3 입력 피쳐 묶 음의 제 1 피쳐(F31)와 상기 제 1 웨이트 데이터의 제 3 웨이트 신호(W13)를 곱하여 F31W13을 생성할 수 있다. 여섯 번째 단위 사이클 중에 제 6 클럭 신호가 토글하면, 상기 제 4 단위 처리기(PE4)는 이전에 계산된 F11W13+F12W23과 F13W33을 합산하여 연산 결과 (F11W13+F12W23+F13W33)를 저장할 수 있다. 상기 제 4 단위 처 리기(PE4)는 상기 제 3 웨이트 데이터의 제 3 웨이트 신호(W33)를 상기 제 7 단위 처리기(PE7)로 출력할 수 있 다. 상기 제 5 단위 처리기(PE5)는 이전에 연산된 F21W12+F22W22와 F23W32를 합산하여 연산 결과 (F21W12+F22W22+F23W32)를 저장할 수 있다. 상기 제 5 단위 처리기(PE5)는 상기 제 2 입력 피쳐 묶음의 제 3 피쳐(F23)를 제 7 단위 처리기(PE7)로 출력하고, 제 3 웨이트 데이터의 제 2 웨이트 신호(W32)를 상기 제 8 단 위 처리기(PE8)로 출력할 수 있다. 상기 제 6 단위 처리기(PE6)는 이전에 연산된 F31W11+F32W21과 F33W31을 합 산하여 연산 결과 (F31W11+F32W21+F33W31)를 저장할 수 있다. 상기 제 6 단위 처리기(PE6)는 상기 제 3 입력 피쳐 묶음의 제 3 피쳐(F33)를 상기 제 8 단위 처리기(PE8)로 출력할 수 있다. 상기 제 7 단위 처리기(PE7)는 이전에 계산된 F21W13과 F22W23을 합산하여 연산 결과(F21W13+F22W23)를 저장할 수 있다. 상기 제 7 단위 처리 기(PE7)는 상기 제 4 단위 처리기(PE4)로부터 제 3 웨이트 데이터의 제 3 웨이트 신호(W33)를 수신하고, 상기 제 5 단위 처리기(PE5)로부터 제 2 입력 피쳐 묶음의 제 3 피쳐(F23)를 수신할 수 있다. 상기 제 7 단위 처리기 (PE7)는 상기 제 2 웨이트 데이터의 제 3 웨이트 신호(W23)를 상기 제 9 단위 처리기(PE9)로 출력할 수 있다. 상기 제 7 단위 처리기(PE7)는 상기 제 2 입력 피쳐 묶음의 제 3 피쳐(F23)와 상기 제 3 웨이트 데이터의 제 3 웨이트 신호(W33)를 곱하여 F23W33을 생성할 수 있다. 상기 제 8 단위 처리기(PE8)는 이전에 연산된 F31W12와 F32W22를 합산하여 연산 결과(F31W12+F32W22)를 저장할 수 있다. 상기 제 8 단위 처리기(PE8)는 상기 제 5 단위 처리기(PE5)로부터 상기 제 3 웨이트 데이터의 제 2 웨이트 신호(W32)를 수신하고, 상기 제 6 단위 처리기(PE 6)로부터 제 3 입력 피쳐 묶음의 제 3 피쳐(F33)를 수신할 수 있다. 상기 제 8 단위 처리기(PE8)는 상기 제 3 입력 피쳐 묶음의 제 2 피쳐(F32)를 상기 제 9 단위 처리기(PE9)로 출력할 수 있다. 상기 제 8 단위 처리기 (PE8)는 상기 제 3 입력 피쳐 묶음의 제 3 피쳐(F33)와 상기 제 3 웨이트 데이터의 제 2 웨이트 신호(W32)를 곱 하여 F33W32를 생성할 수 있다. 상기 제 9 단위 처리기(PE9)는 이전에 연산된 F31W13과 0을 합산하여 연산 결과 를 저장할 수 있다. 상기 제 9 단위 처리기(PE9)는 상기 제 7 단위 처리기(PE7)로부터 상기 제 2 웨이트 데이터 의 제 3 웨이트 신호(W23)를 수신하고, 상기 제 8 단위 처리기(PE8)로부터 제 3 입력 피쳐 묶음의 제 2 피쳐 (F32)를 수신할 수 있다. 상기 제 9 단위 처리기(PE9)는 상기 제 3 입력 피쳐 묶음의 제 2 피쳐(F32)를 상기 제 2 웨이트 데이터의 제 3 웨이트 신호(W23)와 곱하여 F32W23을 생성할 수 있다. 일곱 번째 단위 사이클 중에 제 7 클럭 신호가 토글하면, 상기 제 7 단위 처리기(PE7)는 이전에 연산된 F21W13+F22W23과 F23W33을 합산하여 연산 결과 (F21W13+F22W23+F23W33)를 저장할 수 있다. 상기 제 3 웨이트 데이터의 제 3 웨이트 신호(W33)를 상기 제 9 단위 처리기(PE9)로 출력하고, 상기 제 8 단위 처리기(PE8)는 이 전에 연산된 F31W12+F32W22와 F33W32를 합산하여 연산 결과 (F31W12+F32W22+F33W32)를 저장할 수 있다. 상기 제 8 단위 처리기(PE8)는 제 3 입력 피쳐 묶음의 제 3 피쳐(F33)를 상기 제 9 단위 처리기(PE9)로 출력할 수 있 다. 상기 제 9 단위 처리기(PE9)는 이전에 연산된 F31W13과 F32W23을 합산하여 연산 결과(F31W13+F32W23)를 저 장할 수 있다. 상기 제 9 단위 처리기(PE9)는 상기 제 3 입력 피쳐 묶음의 제 3 피쳐(F33)와 상기 제 3 웨이트 데이터의 제 3 웨이트 신호(W33)를 곱하여 F33W33을 생성할 수 있다. 여덟 번째 단위 사이클 중에 제 8 클럭 신호가 토글하면, 상기 제 9 단위 처리기(PE9)는 이전에 연산된 F31W13+F32W23과 F33W33을 합산하여 연산 결과 (F31W13+F32W23+F33W33)을 저장할 수 있다. 아홉 번째 단위 사 이클 중에 제 9 클럭 신호가 토글하면, 상기 제 1 내지 제 9 단위 처리기(PE1-PE9)에 각각 저장된 연산 결과가 출력될 수 있고, 도 2b에 도시된 것과 같이 제 1 내지 제 3 입력 피쳐 묶음(FD)과 제 1 내지 제 3 웨이트 데이 터(WD)가 콘볼루션 연산된 결과(FD X WD)가 상기 제 1 내지 제 9 단위 처리기(PE1-PE9)로부터 출력될 수 있다. 도 3은 본 발명의 실시예에 따른 처리기의 구성을 간략하게 보여주는 블록도이다. 도 3에서, 상기 처리기 는 MAC (Multiply and Accumulate) 연산을 수행할 수 있다. 상기 처리기는 적어도 2개의 입력 신호 를 수신할 수 있도록 구성되고, 단위 사이클 마다 적어도 2개의 입력 신호 중 적어도 하나와 웨이트 신호를 수 신할 수 있다. 상기 처리기는 도 2a에 도시된 처리기(PE1-PE9)로 각각 적용될 수 있다. 일 실시예에서, 상 기 적어도 2개의 입력 신호는 제 1 입력 신호(INA) 및 제 2 입력 신호(INB)를 포함할 수 있다. 상기 제 1 및 제 2 입력 신호(INA, INB)는 입력 피쳐 묶음의 하나의 피쳐에 각각 대응할 수 있다. 상기 제 1 및 제 2 입력 신호 (INA, INB)는 임의의 비트 수를 가질 수 있다. 한정하는 것은 아니지만, 예를 들어, 상기 제 1 및 제 2 입력 신 호(INA, INB)는 각각 8비트, 16비트 또는 32비트를 포함하는 신호일 수 있다. 상기 웨이트 신호(W)는 임의의 비 트 수를 가질 수 있다. 한정하는 것은 아니지만, 예를 들어, 상기 웨이트 신호(W)는 4비트, 8비트 또는 16비트 를 포함하는 신호일 수 있다. 상기 처리기는 복수의 정밀도 (Precision)을 갖는 입력 신호를 수신할 수 있 다. 예를 들어, 상기 제 1 입력 신호(INA)는 제 1 정밀도 및 제 2 정밀도 중 어느 하나를 가질 수 있다. 상기 제 1 정밀도는 높은 정밀도 (high precision)일 수 있고, 상기 제 2 정밀도는 낮은 정밀도 (low precision)일 수 있다. 상기 제 2 입력 신호(IN2)는 제 2 정밀도를 가질 수 있다. 상기 제 1 정밀도를 갖는 상기 제 1 입력 신호(INA)는 제 1 비트 수를 가질 수 있다. 상기 제 2 정밀도를 갖는 상기 제 1 및 제 2 입력 신호(INA, INB)는 각각 제 2 비트 수를 가질 수 있다. 상기 제 1 비트 수는 상기 제 2 비트 수보다 많을 수 있다. 일 실시예에서, 상기 입력 신호의 개수는 3개 이상일 수도 있다. 상기 제 1 비트 수는 (2X-1)*N 이상일 수 있다. 여기서, X는 2 의 배수일 수 있고, N은 상기 제 2 비트 수일 수 있다. 상기 입력 신호의 개수가 2개일 때, 상기 제 1 비트 수 는 상기 제 2 비트 수의 3배 이상일 수 있다. 상기 처리기는 제 1 연산 동작 중에 상기 제 1 정밀도를 갖는 제 1 입력 신호(INA)와 상기 웨이트 신호 (W)를 수신하고, 상기 제 1 입력 신호(INA)와 상기 웨이트 신호(W)에 대해 MAC 연산을 수행할 수 있다. 상기 제 1 연산 동작 중에 상기 제 2 입력 신호(INB)는 상기 처리기로 입력되지 않을 수 있다. 상기 처리기는 제 2 연산 동작 중에 상기 제 2 정밀도를 갖는 상기 제 1 입력 신호(INA)를 수신하고, 상기 제 1 입력 신호 (INA)와 함께 상기 제 2 정밀도를 갖는 상기 제 2 입력 신호(INB)를 수신할 수 있다. 상기 처리기는 상기 제 1 입력 신호(INA)와 상기 웨이트 신호(W)에 대해 MAC 연산을 수행하고, 상기 제 2 입력 신호(INB)와 상기 웨 이트 신호(W)에 대해 MAC 연산을 수행할 수 있다. 상기 처리기는 상기 제 2 정밀도를 갖는 상기 제 1 및 제 2 입력 신호(INA, INB)를 동시에 수신하고 상기 제 1 및 제 2 입력 신호(INA, INB)에 대한 연산을 동시에 수 행함으로써, 상기 처리기를 포함하는 연산 회로의 연산 효율 및 성능을 증가시킬 수 있다. 상기 처리기는 입력 레지스터, 웨이트 레지스터, 곱셈기, 합산기 및 출력 레지스터 를 포함할 수 있다. 상기 입력 레지스터는 상기 제 1 입력 신호(INA) 및 상기 제 2 입력 신호(INB)를 수신하고, 상기 제 1 및 제 2 입력 신호(INA, INB)를 저장할 수 있다. 상기 입력 레지스터는 적어도 상기 제 1 비트 수의 최대 값을 저장할 수 있는 저장 공간을 포함할 수 있다. 상기 입력 레지스터는 상기 제 1 및 제 2 입력 신호(INA, INB)를 함께 수신하였을 때, 상기 저장 공간 내에서 상기 제 1 및 제 2 입력 신호(INA, INB)가 서로 먼 위치에 저장될 수 있도록 한다. 예를 들어, 상기 입력 레지스터는 상기 제 2 입력 신호 (INB)를 상기 저장 공간의 최하위 비트로부터 순차적으로 높아지는 순번의 비트에 저장할 수 있다. 상기 제 2 입력 신호(INB)의 비트 수가 N (N은 임의의 정수)이라면, 상기 입력 레지스터는 상기 제 2 입력 신호(IN B)를 상기 저장 공간의 제 1 내지 제 N 비트에 저장하고, 상기 제 1 입력 신호(INA)를 상기 저장 공간의 제 2N 내지 제 3N 비트에 저장할 수 있다. 상기 웨이트 레지스터는 상기 웨이트 신호(W)를 수신하여 상기 웨이트 신호(W)를 저장할 수 있다. 상기 웨이트 레지스터는 상기 웨이트 신호(W)를 저장할 수 있는 저장 공간을 포함할 수 있다. 상기 곱셈기는 상기 입력 레지스터로부터 상기 제 1 및 제 2 입력 신호(INA, INB) 중 적어도 하나를 수신하고, 상기 웨이트 레지스터로부터 웨이트 신호(W)를 수신할 수 있다. 상기 곱셈기는 제 1 입력 신호(INA) 및 상기 제 2 입력 신호(INB) 중 적어도 하나와 상기 웨이트 신호(W)를 곱셈할 수 있다. 상기 곱셈기 는 상기 입력 레지스터로부터 상기 제 1 입력 신호(INA)만을 수신했을 때, 상기 제 1 입력 신호(IN A)와 상기 웨이트 신호(W)를 곱셈하여 제 1 입력 신호(INA)에 대한 곱셈 값(MA)을 출력할 수 있다. 상기 곱셈기 는 상기 입력 레지스터로부터 상기 제 1 및 제 2 입력 신호(INA, INB)를 모두 수신했을 때, 상기 제1 및 제 2 입력 신호(INA, INB)와 상기 웨이트 신호(W)를 각각 곱셈하여 제 1 입력 신호(INA)에 대한 곱셈 값 (MA)과 제 2 입력 신호(INB)에 대한 곱셈 값(MB)을 모두 생성할 수 있다. 상기 합산기 상기 곱셈기로부터 상기 곱셈 값(MA, MB)을 수신할 수 있다. 상기 출력 레지스터는 상기 처리기의 연산 값(OA, OB)을 저장하고, 상기 저장된 연산 값(OA, OB)을 출력할 수 있다. 상기 출력 레지스터는 상기 제 1 및 제 2 입력 신호(INA, INB)에 대한 연산 값(OA, OB)을 저장할 수 있는 저장 공간 을 포함할 수 있다. 상기 출력 레지스터는 상기 제 1 입력 신호(INA)에 대한 연산 값(OA)과 상기 제 2 입 력 신호(INB)에 대한 연산 값(OB)을 분리 저장할 수 있다. 상기 합산기는 상기 출력 레지스터에 저장 되어 있던 제 1 및 제 2 입력 신호(INA, INB)에 대한 연산 값에 새롭게 입력된 제 1 및 제 2 입력 신호(INA, INB)에 대한 곱셈 값(MA, MB)을 각각 합산하고, 상기 제 1 및 제 2 입력 신호(INA, INB)에 대한 연산 값(OA, OB)을 각각 갱신할 수 있다. 상기 합산기는 상기 제 1 입력 신호(INA)에 대한 이전 연산 값(OA)에 현재 입 력된 제 1 입력 신호(INA)에 대한 곱셈 값(MA)을 합산하여 상기 제 1 입력 신호(INA)에 대한 연산 값(OA)을 업 데이트할 수 있다. 상기 합산기는 상기 제 2 입력 신호(INB)에 대한 이전 연산 값(OB)에 현재 입력된 제 2 입력 신호(INB)에 대한 곱셈 값(MB)을 합산하여 상기 제 2 입력 신호(INB)에 대한 연산 값(OB)을 업데이트할 수 있다. 도 4는 도 3에 도시된 처리기의 구성 및 동작을 예시적으로 보여주는 도면이다. 도 4를 참조하면, 상기 처 리기는 입력 레지스터, 웨이트 레지스터, 곱셈기, 합산기 및 출력 레지스터를 포함할 수 있다. 도 4에서, 상기 웨이트 신호(W)는 8비트를 포함하고, 제 2 정밀도를 갖는 2개의 입력 신호는 각각 8비트를 포함하는 경우를 예시하였다. 도 3을 함께 참조하면, 상기 입력 레지스터는 상기 제 1 및 제 2 의 입력 신호(INA, INB)를 저장할 수 있는 저장 공간을 구비할 수 있다. 상기 입력 레지스터는 상기 제 1 정밀도를 갖는 제 1 입력 신호(INA)를 수신하거나, 제 2 정밀도를 갖는 제 1 및 제 2 입력 신호(INA, INB)를 수신할 수 있다. 상기 제 1 정밀도를 갖는 제 1 입력 신호(INA)는 16비트 또는 32비트를 포함할 수 있고, 상기 제 2 정밀도를 갖는 상기 제 1 및 제 2 입력 신호(INA, INB)는 각각 8비트를 포함할 수 있다. 이때, 상기 제 2 입력 신호(INB)에 대한 곱셈 값이 상기 제 1 입력 신호(INA)에 대한 곱셈 값에 영향을 미치지 않게 하기 위해서, 상기 입력 레지스터는 8비트를 포함하는 제 1 및 제 2 입력 신호(INA, INB)를 저장하기 위해 적어 도 24비트를 저장할 수 있는 저장 공간을 구비할 수 있다. 상기 입력 레지스터가 상기 제 1 정밀도를 갖는 상기 제 1 입력 신호(INA)를 수신할 때, 상기 입력 레지스터는 상기 제 1 입력 신호(INA)의 제 1 내지 제 16 비트를 각각 상기 저장 공간의 제 1 비트부터 제 16 비트에 순차적으로 저장할 수 있다. 상기 입력 레지스터 가 상기 제 1 입력 신호(INA) 및 제 2 입력 신호(INB)를 수신할 때, 상기 제 1 입력 신호(INA)의 제 1 내 지 제 8 비트(A)를 상기 저장 공간의 제 17 내지 제 24 비트에 저장할 수 있고, 상기 제 2 입력 신호(INB)의 제 1 내지 제 8 비트(B)를 제 1 내지 제 8 비트에 저장할 수 있다. 상기 저장 공간의 제 9 내지 제 16 비트에는 아 무런 정보가 저장되지 않을 수 있다. 예를 들어, 상기 저장 공간의 제 9 내지 제 16 비트에는 0이 저장될 수 있 다. 상기 웨이트 레지스터는 상기 웨이트 신호(W)를 저장 공간에 저장할 수 있다. 상기 웨이트 레지스터 는 8비트를 저장할 수 있는 저장 공간을 구비할 수 있고, 상기 웨이트 신호(W)의 제 1 내지 제 8 비트를 상기 저장 공간의 제 1 내지 제 8 비트에 저장할 수 있다. 도시되지는 않았지만, 상기 입력 레지스터는 제 25 내지 제 32 비트를 포함하는 추가적인 저장 공간을 포함할 수 있고, 32비트를 포함하는 상기 제 1 입력 신호 (INA)를 수신하였을 때, 상기 제 1 입력 신호(INA)의 제 25 내지 제 32 비트를 추가적인 저장 공간에 저장할 수 있다. 상기 곱셈기는 상기 입력 레지스터에 저장된 제 1 및 제 2 입력 신호(INA, INB)와 상기 웨이트 레지 스터에 저장된 웨이트 신호(W)를 각각 곱셈할 수 있다. 상기 곱셈기에서 곱셈된 값은 상기 합산기 를 통해 상기 출력 레지스터에 저장될 수 있다. 상기 합산기는 상기 곱셈기로부터 곱셈된 값을 상기 출력 레지스터에 저장된 연산 값과 합산할 수 있다. 상기 출력 레지스터는 적어도 32비트 를 저장할 수 있는 저장 공간을 포함할 수 있다. 도시되지는 않았지만, 상기 출력 레지스터는 제 32 비트를 포 함하는 제 1 입력 신호에 대한 연산 값을 저장하기 위해 추가적인 저장 공간을 포함할 수 있다. 상기 출력 레 지스터는 상기 제 2 입력 신호(INB)에 대한 연산 값(BW)을 상기 저장 공간의 제 1 내지 제 16 비트에 저장 할 수 있고, 상기 제 1 입력 신호(INB)에 대한 연산 값(AW)을 상기 저장 공간의 제 17 내지 제 32 비트에 저장 할 수 있다. 이 때, 상기 출력 레지스터는 상기 제 1 및 제 2 입력 신호(INA, INB)와 상기 웨이트 신호 (W)가 최대 값을 갖는 최악의 경우 (worst case) 한 번의 연산 결과만을 저장할 수 밖에 없는 문제가 발생할 수 있다. 상기 출력 레지스터에 저장된 이전 연산 값에 새롭게 입력된 입력 신호에 대한 곱셈 값이 합산되는 경우, 상기 제 2 입력 신호(INB)에 대한 연산 값(BW)이 제 1 입력 신호(INA)에 대한 연산 값(AW)을 저장하는 상 기 저장 공간의 제 17 비트의 값을 변화시킬 수 있기 때문이다. 따라서, 도 4에 도시된 처리기를 포함하는연산 회로는 도 5와 같이 구성될 수 있다. 도 5는 본 발명의 실시예에 따른 연산 회로의 구성을 보여주는 도면이다. 도 5를 참조하면, 상기 연산 회 로는 복수의 처리기와 복수의 보조 누산기를 포함할 수 있다. 상기 연산 회로는 복수의 처리기가 매 트릭스 형태로 배열되어 MAC 연산을 수행하는 시스톨릭 어레이 (systolic array)일 수 있다. 설명의 편의를 위 해 도 5에서는 컬럼 방향으로 배치되는 복수의 처리기를 도시하고, 로우 방향으로 배치되는 복수의 처리기는 도 시하지 않았다. 상기 복수의 처리기는 제 1 내지 제 3 처리기(PE1, PE2, PE3)를 포함할 수 있다. 상기 제 1 처 리기(PE1)는 단위 사이클마다 수신되는 상기 제 1 입력 신호(INA1) 및 제 2 입력 신호(INB1) 중 적어도 하나에 대한 MAC 연산을 수행할 수 있다. 상기 제 2 처리기(PE2)는 단위 사이클마다 수신되는 상기 제 3 입력 신호 (INA2) 및 제 4 입력 신호(INB2) 중 적어도 하나에 대한 MAC 연산을 수행할 수 있다. 상기 제 3 처리기(PE3)는 단위 사이클마다 수신되는 상기 제 5 입력 신호(INA3) 및 제 6 입력 신호(INB3) 중 적어도 하나에 대한 MAC 연 산을 수행할 수 있다. 상기 제 1 및 제 3 처리기(PE1, PE2, PE3)가 도 4에 도시된 처리기와 같은 구성을 갖는 경우, 상기 제 1 내지 제 3 처리기(PE1, PE2, PE3)는 2개의 입력 신호에 대한 MAC 연산을 동시에 수행하기 위해 각각 보조 누산 기를 필요로 할 수 있다. 제 1 보조 누산기는 상기 제 1 처리기(PE1)와 연결되고, 상기 제 1 처리기(PE1) 로부터 출력되는 연산 값을 저장하고, 단위 사이클마다 저장된 연산 값을 업데이트할 수 있다. 도 3을 함께 참 조하면, 상기 제 1 처리기(PE1)는 상기 제 1 및 제 2 입력 신호(INA1, INB1)와 웨이트 신호(W)를 곱셈하고, 곱 셈된 값을 상기 출력 레지스터에 저장하며, 상기 제 1 보조 누산기는 상기 제 1 처리기(PE1)의 합산 을 대신 수행할 수 있다. 즉, 상기 제 1 처리기(PE1)는 단위 사이클마다 상기 출력 레지스터에 저장된 연 산 값을 상기 제 1 보조 누산기로 출력하고, 수신된 제 1 및 제 2 입력 신호(INA1, INB1)와 웨이트 신호 (W)의 상기 곱셈된 값을 출력 레지스터에 저장할 수 있다. 상기 제 1 보조 누산기는 단위 사이클마다 상기 제 1 처리기(PE1)로부터 출력된 연산 값을 합산하여 저장할 수 있다. 제 2 보조 누산기는 상기 제 2 처리기(PE2)와 연결되고, 상기 제 2 처리기(PE2)로부터 출력되는 연산 값을 저장하고, 단위 사이클마다 저장된 연산 값을 업데이트할 수 있다. 제 3 보조 누산기는 상기 제 3 처리기(PE3)와 연결되고, 상기 제 3 처리기 (PE3)로부터 출력되는 연산 값을 저장하고, 단위 사이클마다 저장된 연산 값을 업데이트할 수 있다. 위와 같이, 상기 연산 회로가 2개의 입력 신호에 대한 MAC 연산을 동시에 수행하기 위해 처리기마다 연결되는 보조 누 산기를 구비하는 경우, 결과적으로 2개의 입력 신호에 대한 MAC 연산을 동시에 수행하기 위해 2개의 연산 로직 을 사용하는 것이 되기 때문에, 연산 동작의 효율 및 이득이 적을 수 있다. 도 6은 본 발명의 실시예에 따른 처리기의 구성 및 동작을 예시적으로 보여주는 도면이다. 도 6을 참조하 면, 상기 처리기는 입력 레지스터, 웨이트 레지스터, 곱셈기, 합산기 및 출력 레지스 터를 포함할 수 있다. 도 4와 비교하여 설명하면, 상기 입력 레지스터는 상기 입력 레지스터보 다 더 큰 저장 공간을 포함할 수 있다. 예를 들어, 상기 입력 레지스터는 적어도 26비트를 저장할 수 있는 저장 공간을 포함할 수 있다. 상기 입력 레지스터는 제 2 입력 신호(INB)(도면에 도시되지 않음. 수정방안 고민할 것)의 제 1 내지 제 8 비트(B)를 상기 저장 공간의 제 1 내지 제 8 비트에 저장할 수 있고, 상기 제 1 입력 신호(INA)의 제 1 내지 제 8 비트를 상기 저장 공간의 제 19 내지 제 26 비트에 저장할 수 있다. 상기 저 장 공간의 제 9 내지 제 18 비트에는 아무런 정보가 저장되지 않을 수 있고, 0이 저장될 수 있다. 상기 저장 공 간의 제 9 내지 제 16 비트는 상기 제 1 입력 신호(INA)와 상기 제 2 입력 신호(INB)에 대한 연산 값이 서로 영 향을 미치지 않게 하기 위한 최소한의 비트일 수 있고, 제 17 내지 제 18 비트는 가드 비트일 수 있다. 따라서, 상기 제 1 및 제 2 입력 신호가 N개의 비트를 포함하고, 가드 비트의 개수가 G일 때, 상기 입력 레지스터는 상 기 제 2 입력 신호를 상기 저장 공간의 제 1 내지 제 N 비트에 저장하고, 상기 제 1 입력 신호를 상기 저장 공 간의 제 N 내지 제 2N+G 비트에 저장할 수 있다. 여기서, N과 G는 임의의 정수일 수 있다. 도시되지는 않았지만, 상기 입력 레지스터는 32비트를 포함하는 제 1 입력 신호(INA)를 저장하기 위해 추가적인 저장 공간을 더 포함할 수 있다. 상기 웨이트 레지스터는 상기 웨이트 신호(W)를 저장할 수 있다. 상기 곱셈기는 상기 입력 레지스터 에 저장된 제 1 및 제 2 입력 신호(INA, INB)를 상기 웨이트 레지스터에 저장된 웨이트 신호(W)와 각 각 곱셈할 수 있다. 상기 합산기는 상기 출력 레지스터에 저장된 이전 연산 값과 상기 곱셈기로부터 곱셈된 값을 합산하여 상기 출력 레지스터에 저장되는 연산 값을 업데이트할 수 있다. 상기 출력 레지스터 는 상기 출력 레지스터보다 더 큰 저장 공간을 포함할 수 있다. 예를 들어, 상기 출력 레지스터(65 0)는 적어도 34비트를 저장할 수 있는 저장 공간을 포함할 수 있다. 상기 출력 레지스터는 상기 저장 공간의 제 1 내지 제 18 비트에 상기 제 2 입력 신호(INB)에 대한 연산 값(BW)을 저장할 수 있다. 상기 출력 레지스터는 상기 저장 공간의 제 19 내지 제 34 비트에 상기 제 1 입력 신호(INA)에 대한 연산 값(AW)을 저장할 수 있다. 도시되지는 않았지만, 상기 출력 레지스터는 상기 제 1 입력 신호(INA)에 대한 연산 값(AW)을 저장 하기 위해 추가적인 저장 공간을 더 포함할 수 있다. 따라서, 상기 출력 레지스터는 상기 제 2 입력 신호 (INB)에 대한 연산 값(BW)을 상기 저장 공간의 제 1 내지 제 M+G 비트에 저장하고, 상기 제 1 입력 신호(INA)에 대한 연산 값(AW)을 상기 저장 공간의 제 M+G+1 내지 제 2M+2G 비트에 저장할 수 있다. 여기서, M은 상기 제 1 입력 신호(INA) 또는 상기 제 2 입력 신호(INB)의 비트 수와 상기 웨이트 신호(W)의 비트 수의 합일 수 있다. 상기 출력 레지스터는 상기 제 1 입력 신호(INA)에 대한 연산 값(AW)이 저장되는 비트들과 상기 제 2 입력 신호(INB)에 대한 연산 값(BW)이 저장되기 위한 최소한의 비트들 사이에 가드 비트를 포함할 수 있다. 도 6에서, 상기 가드 비트는 2개인 것을 예시하였지만, 상기 가드 비트의 개수는 다음과 같은 식으로 정의될 수 있 다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "여기서, N은 상기 제 1 및 제 2 입력 신호(INA, INB)가 각각 포함하는 비트 수일 수 있고, 상기 G는 가드 비트 의 개수일 수 있다. 상기 K는 제 1 및 제 2 입력 신호(INA, INB)의 값과 상기 가드 비트(G)의 개수가 정의되었 을 때, 하나의 처리기가 합산을 수행할 수 있는 횟수 (즉, 연산 값을 업데이트할 수 있는 횟수)를 의미하는 것으로 상기 K는 오버 플로우 (overflow)가 발생되지 않는 임계 값일 수 있다. 상기 제 1 및 제 2 입력 신호(INA, INB)의 값은 -2N-1 과 2N-1-1 사이의 정수일 있다. 예를 들어, 상기 N이 8이고, G가 2일 때, 상기 제 1 및 제 2 입력 신호(INA, INB)의 범위는 -128 과 127 사이의 정수일 수 있고, K의 최대 값은 7일 수 있다. 따라서, 하나 의 처리기는 7번의 합산을 수행하여도 제 2 입력 신호(INB)에 대한 연산 값(BW)이 상기 제 1 입력 신호(INA)에 대한 연산 값(AW)에 영향을 미치지 않을 수 있다. 즉, 하나의 처리기가 7번의 합산을 수행하여도 오버 플로우가 발생되지 않을 수 있고, 상기 제 2 입력 신호(INB)에 대한 연산 값(BW)은 상기 출력 레지스터의 저장 공간의 최 하위 비트 내지 상기 가드 비트에 저장될 수 있다. 상기 가드 비트의 개수는 임의로 정해질 수 있고, 가드 비트 의 개수가 증가할 수록 K는 증가할 수 있다. 하지만, 가드 비트의 개수가 너무 많아지는 경우, 레지스터의 저장 공간이 증가하여 하나의 처리기의 회로 면적이 증가될 수 있다. 따라서, 상기 가드 비트의 개수는 트레이드 오 프 (trade-off) 관계에 있는 연산 회로의 효율과 면적을 최적화시킬 수 있는 수준으로 적절하게 결정되는 것이 바람직할 수 있다. 제 1 및 제 2 입력 신호(INA, INB)의 범위에 최소 값을 포함시키지 않는 경우, 상기 K를 증가시킬 수 있다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "제 1 및 제 2 입력 신호(INA, INB)의 값은 -2N-1+1 과 2N-1-1 사이의 정수일 수 있다. 상기 제 1 및 제 2 입력 신 호(INA, INB)의 범위는 -127 과 127 사이의 정수일 수 있고, K의 최대 값은 8일 수 있다. 따라서, 하나의 처리 기는 8번의 합산을 수행하여도 제 2 입력 신호(INB)에 대한 연산 값(BW)이 제 1 입력 신호(INA)에 대한 연산 값 (AW)에 영향을 미치지 않을 수 있다. 즉, 하나의 처리기가 8번의 합산을 수행하여도 오버 플로우가 발생되지 않 을 수 있고, 상기 제 2 입력 신호(INB)에 대한 연산 값(BW)은 상기 출력 레지스터의 저장 공간의 최하위 비트 내지 상기 가드 비트에 저장될 수 있다. 도 7은 본 발명의 실시예에 따른 연산 회로의 구성을 보여주는 도면이다. 도 7을 참조하면, 상기 연산 회 로는 복수의 처리기와 공통 누산기를 포함할 수 있다. 상기 연산 회로는 복수의 처리기가 매트 릭스 형태로 배열되어, MAC 연산을 수행하는 시스톨릭 어레이 (systolic array)일 수 있다. 설명의 편의를 위해 도 7에서는 컬럼 방향으로 배치되는 복수의 처리기를 도시하고, 로우 방향으로 배치되는 복수의 처리기는 도시 하지 않았다. 상기 복수의 처리기는 순차적으로 직렬 연결될 수 있다. 상기 공통 누산기는 상기 복수의 처 리기 중 K개의 처리기와 연결될 수 있다. 상기 공통 누산기는 단위 사이클마다 상기 K개의 처리기와 순차 적으로 순환 연결될 수 있다. 상기 공통 누산기는 상기 K개의 처리기가 오버 플로우 되기 직전의 단위 사 이클마다 상기 K개의 처리기와 각각 연결될 수 있다. 상기 공통 누산기는 상기 K개의 처리기의 합산 횟수 가 상기 임계 값에 도달하였는지 여부에 기초하여 상기 K개의 처리기와 각각 연결될 수 있다. 예를 들어, 상기 공통 누산기는 K+1 번째 단위 사이클부터 K개의 처리기와 순차적으로 순환 연결될 수 있다. 이하에서, 상기 K가 7인 경우를 예시적으로 설명하기로 한다. 상기 복수의 처리기는 8개 이상의 처리기를 포함할 수 있고, 도 7은 그 중 7개의 처리기를 도시한다. 상기 복수의 처리기는 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)를 포함할 수 있다. 상기 제 1 내지 제 7 처 리기(PE1, PE2, PE3, PE7)는 순차적으로 직렬 연결될 수 있다. 상기 제 1 처리기(PE1)는 첫 번째 단위 사이클부 터 단위 사이클마다 제 1 입력 신호(INA1) 및 제 2 입력 신호(INB1) 중 적어도 하나와 웨이트 신호(W)를 수신하 고, 상기 제 1 및 제 2 입력 신호(INA1, INB1) 중 적어도 하나와 웨이트 신호(W)에 대해 곱셈을 수행할 수 있다. 상기 제 1 처리기(PE1)는 상기 제 1 입력 신호(INA)와 웨이트 신호(W)를 곱셈하고, 상기 제 2 입력 신호 (INB1)와 상기 웨이트 신호(W)를 곱셈할 수 있다. 상기 제 1 처리기(PE1)는 두 번째 단위 사이클부터 단위 사이 클마다 상기 제 1 및 제 2 입력 신호(INA1, INB1)에 대한 곱셈 값을 이전의 연산 값과 합산하여 상기 제 1 및 제 2 입력 신호(INA1, INB1)에 대한 연산 값(OA1, OB1)을 업데이트할 수 있다. 상기 제 2 처리기(PE2)는 두 번 째 단위 사이클부터 단위 사이클마다 제 3 입력 신호(INA2) 및 제 4 입력 신호(INB2) 중 적어도 하나와 상기 제 1 처리기(PE1)로부터 전송된 웨이트 신호(W)를 수신하고, 상기 제 3 및 제 4 입력 신호(INA2, INB2) 중 적어도 하나와 웨이트 신호(W)에 대해 곱셈을 수행할 수 있다. 상기 제 2 처리기(PE2)는 상기 제 3 입력 신호(INA2)와 상기 웨이트 신호(W)를 곱셈하며, 상기 제 4 입력 신호(INB2)와 상기 웨이트 신호(W)를 곱셈할 수 있다. 상기 제 2 처리기(PE2)는 세 번째 단위 사이클부터 단위 사이클마다 상기 제 3 및 제 4 입력 신호(INA2, INB2)에 대 한 곱셈 값을 이전의 연산 값과 합산하여 상기 제 3 및 제 4 입력 신호(INA2, INB2)에 대한 연산 값(OA2, OB2) 을 업데이트할 수 있다. 상기 제 3 처리기(PE3)는 세 번째 단위 사이클부터 단위 사이클마다 제 5 입력 신호 (INA3) 및 제 6 입력 신호(INB3) 중 적어도 하나와 상기 제 2 처리기(PE2)로부터 전송된 웨이트 신호(W)를 수신 하고, 상기 제 5 및 제 6 입력 신호(INA3, INB3) 중 적어도 하나와 웨이트 신호(W)에 대해 곱셈을 수행할 수 있 다. 상기 제 3 처리기(PE3)는 상기 제 5 입력 신호(INA3)와 상기 웨이트 신호(W)를 곱셈하고, 상기 제 6 입력 신호(INB3)와 상기 웨이트 신호(W)를 곱셈할 수 있다. 상기 제 3 처리기(PE3)는 네 번째 단위 사이클부터 단위 사이클마다 상기 제 5 및 제 6 입력 신호(INA3, INB3)에 대한 곱셈 값을 이전의 연산 값과 합산하여 상기 제 5 및 제 6 입력 신호에 대한 연산 값(OA3, OB3)을 업데이트할 수 있다. 상기 제 7 처리기(PE7)는 일곱 번째 단위 사이클부터 단위 사이클마다 제 13 입력 신호(INA7) 및 제 14 입력 신호(INB7) 중 적어도 하나와 제 6 처리기 (도시하지 않음)로부터 전송된 웨이트 신호(W)를 수신하고, 상기 제 13 입력 신호(INA7) 및 제 14 입력 신호 (INB7) 중 적어도 하나와 상기 웨이트 신호를 곱셈할 수 있다. 상기 제 7 처리기(PE7)는 상기 제 13 입력 신호 (INA7)와 상기 웨이트 신호(W)를 곱셈하며, 상기 제 14 입력 신호(INB7)와 상기 웨이트 신호(W)를 곱셈할 수 있 다. 상기 제 7 처리기(PE7)는 여덟 번째 단위 사이클부터 단위 사이클마다 상기 제 13 및 제 14 입력 신호 (INA7, INB7)에 대한 곱셈 값을 이전의 연산 값과 합산하여 상기 제 13 및 제 14 입력 신호(INA7, INB7)에 저장 되는 연산 값(OB7, OB7)을 업데이트할 수 있다. 상기 공통 누산기는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)와 순차적으로 순환 연결될 수 있다. 상기 공통 누산기는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)가 오버 플로우 되기 직전의 단위 사 이클마다 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)와 각각 연결될 수 있다. 상기 공통 누산기는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)의 합산 횟수가 상기 임계 값에 도달하는 단위 사이클마다 상 기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)와 각각 연결될 수 있다. 예를 들어, 상기 공통 누산기는 상기 제 1 처리기(PE1)가 7번의 합산을 수행하여 오버 플로우 되기 직전인 여덟 번째 단위 사이클 중에 상기 제 1 처리기(PE1)와 연결될 수 있고, 상기 제 2 처리기(PE2)가 7번의 합산을 수행하여 오버 플로우 되기 직전인 아 홉 번째 단위 사이클 중에 상기 제 2 처리기(PE2)와 연결될 수 있으며, 제 3 내지 제 7 처리기가 각각 7번의 합 산을 수행하여 오버 플로우 되기 직전인 열 번째 내지 열네 번째 단위 사이클 중에 상기 제 3 내지 제 7 처리기 (PE3, PE7)와 순차적으로 각각 연결될 수 있다. 상기 공통 누산기는 열 다섯 번째 단위 사이클 중에 다시 상기 제 1 처리기(PE1)와 연결될 수 있고, 열 여섯 번째 내지 스물두 번째 단위 사이클 중에 상기 제 2 내지 제 7 처리기(PE2, PE3, PE7)와 각각 다시 연결될 수 있다. 상기 공통 누산기는 상기 복수의 처리기로부터 출 력되는 연산 값을 연산 정보로 저장할 수 있다. 상기 공통 누산기상기 복수의 처리기 중 하나와 연결될 때 마다 연결된 처리기로부터 출력되는 새로운 연산 값을 수신하고, 이전에 저장된 상기 연산 정보에 대응하는 값 과 새로운 연산 값을 합산하여 상기 연산 정보를 업데이트할 수 있다. 상기 공통 누산기는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)와 관련된 연산 정보(SA1/SB1, SA2/SB2, SA3/SB3, SA7/SB7)를 저장하기 위한 저장 공간을 포함할 수 있다. 상기 공통 누산기는 제 1 내 지 제 7 저장 공간(711, 712, 713, 717)을 포함할 수 있다. 상기 공통 누산기는 상기 제 1 처리기(PE1)와 관련된 제 1 연산 정보(SA1/SB1)를 상기 제 1 저장 공간에 저장할 수 있다. 상기 제 1 연산 정보(SA1)는 상기 제 1 처리기(PE1)가 수신하는 제 1 입력 신호(INA1)와 관련된 연산 정보일 수 있다. 상기 제 1 연산 정보 (SB1)는 상기 제 1 처리기(PE1)가 수신하는 제 2 입력 신호(INB1)와 관련된 연산 정보일 수 있다. 상기 공통 누 산기는 상기 제 1 처리기(PE1)로부터 출력되는 연산 값(OA1, OB1)을 수신하고, 제 1 저장 공간에 저장된 연산 정보(SA1/SB1)에 대응하는 값과 상기 연산 값(OA1, OB1)을 각각 합산하여 상기 연산 정보(SA1/SB1)를 업데이트할 수 있다. 상기 공통 누산기는 상기 제 2 처리기(PE2)와 관련된 제 2 연산 정보(SA2/SB2)를 상 기 제 2 저장 공간에 저장할 수 있다. 상기 제 2 연산 정보(SA2)는 상기 제 2 처리기(PE2)가 수신하는 제 3 입력 신호(INA2)와 관련된 연산 정보일 수 있다. 상기 제 2 연산 정보(SB2)는 상기 제 2 처리기(PE2)가 수신 하는 제 4 입력 신호(INB2)와 관련된 연산 정보일 수 있다. 상기 공통 누산기는 상기 제 2 처리기(PE2)로 부터 출력되는 연산 값(OA2, OB2)을 수신하고, 제 2 저장 공간에 저장된 연산 정보(SA2/SB2)에 대응하는 값과 상기 연산 값(OA2, OB2)을 각각 합산하여 상기 연산 정보(SA2/SB2)를 업데이트할 수 있다. 상기 공통 누산 기는 상기 제 3 처리기(PE3)와 관련된 제 3 연산 정보(SA3/SB3)를 상기 제 3 저장 공간에 저장할 수 있다. 상기 제 3 연산 정보(SA3)는 상기 제 3 처리기(PE1)가 수신하는 제 5 입력 신호(INA3)와 관련된 연산 정 보일 수 있다. 상기 제 3 연산 정보(SB3)는 상기 제 3 처리기(PE3)가 수신하는 제 6 입력 신호(INB3)와 관련된 연산 정보일 수 있다. 상기 공통 누산기는 상기 제 3 처리기(PE3)로부터 출력되는 연산 값(OA3, OB3)을 수 신하고, 제 1 저장 공간에 저장된 연산 정보(SA3/SB3)에 대응하는 값과 상기 연산 값(OA3, OB3)을 각각 합 산하여 상기 연산 정보(SA3/SB3)를 업데이트할 수 있다. 상기 공통 누산기는 상기 제 7 처리기(PE7)와 관 련된 제 7 연산 정보(SA7/SB7)를 상기 제 7 저장 공간에 저장할 수 있다. 상기 제 7 연산 정보(SA7)는 상 기 제 7 처리기(PE1)가 수신하는 제 13 입력 신호(INA7)와 관련된 연산 정보일 수 있다. 상기 제 7 연산 정보 (SB7)는 상기 제 7 처리기(PE7)가 수신하는 제 2 입력 신호(INB14)와 관련된 연산 정보일 수 있다. 상기 공통 누산기는 상기 제 7 처리기(PE7)로부터 출력되는 연산 값(OA7, OB7)을 수신하고, 제 7 저장 공간에 저장된 연산 정보(SA7, SB7)에 대응하는 값과 상기 연산 값(OA1, OB1)을 각각 합산하여 상기 연산 정보(SA7, SB7)를 업데이트할 수 있다. 도 8은 본 발명의 실시예에 따른 처리기의 구성을 보여주는 도면이다. 도 8을 참조하면, 상기 처리기(80 0)는 도 7에 도시된 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)로 각각 적용될 수 있다. 상기 처리기는 입력 레지스터, 웨이트 레지스터, 곱셈기, 합산기, 출력 레지스터 및 오버 플로우 제 어기를 포함할 수 있다. 상기 입력 레지스터는 단위 사이클마다 제 1 입력 신호(INA) 및 제 2 입력 신호(INB) 중 적어도 하나를 수신할 수 있다. 도 6에 도시된 입력 레지스터는 상기 입력 레지스터로 적용될 수 있다. 상기 입력 레지스터는 단위 사이클마다 저장된 제 1 및 제 2 입력 신호(INA, INB)를 상기 처리기와 연결되는 로우 방향의 처리기로 출력할 수 있다. 상기 웨이트 레지스터는 단위 사이클마다 웨이트 신호(W)를 수신할 수 있다. 상기 웨이트 레지스터는 단위 사이클마다 저장된 웨이트 신호(W)를 상 기 처리기와 연결되는 컬럼 방향의 처리기로 출력할 수 있다. 상기 곱셈기는 상기 입력 레지스터 에 저장된 상기 제 1 및 제 2 입력 신호(INA, INB)와 상기 웨이트 레지스터에 저장된 상기 웨이트 신 호(W)를 각각 곱셈할 수 있다. 상기 출력 레지스터는 상기 처리기의 연산 값(OA, OB)을 저장할 수 있 다. 도 6에 도시된 출력 레지스터는 상기 출력 레지스터로 적용될 수 있다. 상기 합산기는 상기 오버 플로우 제어기의 출력과 상기 곱셈기의 곱셈 값을 합산하고, 합산된 값을 상기 연산 값(OA, O B)으로서 상기 출력 레지스터에 저장할 수 있다. 상기 오버 플로우 제어기는 상기 웨이트 신호(W)에 기초하여 상기 출력 레지스터에 저장된 연산 값과 0 중 하나를 상기 합산기로 출력할 수 있다. 상기 오버 플로우 제어기는 상기 웨이트 신호(W)의 입력 횟수에 기초하여 상기 처리기의 오버 플로우를 감지할 수 있다. 상기 오버 플로우 제어기는 단위 사 이클마다 상기 처리기로 입력되는 상기 웨이트 신호(W)를 카운팅하고, 카운팅 값(CNT)에 따라 상기 처리기 의 오버 플로우를 감지할 수 있다. 상기 오버 플로우 제어기는 상기 카운팅 값(CNT)이 소정 값이 될 때마다 상기 출력 레지스터에 저장된 연산 값(OA, OB)을 출력하고, 상기 카운팅 값이 상기 소정 값이 아닐 때 0을 출력할 수 있다. 상기 소정 값은 n*K+2일 수 있다. 여기서, n은 1 이상의 정수일 수 있다. 예를 들어, 상기 오버 플로우 제어기는 상기 카운팅 값(CNT)이 K+2 번째일 때 상기 0을 출력하고, 그 외에는 상기 출 력 레지스터에 저장된 연산 값(OA, OB)을 출력할 수 있다. 상기 오버 플로우 제어기는 임계 값에 대 응하는 횟수만큼 합산된 연산 값(OA, OB)이 상기 출력 레지스터에 저장되도록 할 수 있다. 상기 오버 플로 우 제어기는 상기 합산 횟수가 임계 값을 초과하였을 때, 상기 출력 레지스터가 상기 곱셈기로 부터 출력되는 새로운 연산 값(OA, OB)만을 저장하도록 할 수 있다. 상기 오버 플로우 제어기는 카운터, 카운트 레지스터 및 선택기를 포함할 수 있다. 상기 카운터는 상기 웨이트 신호(W)의 입력 횟수를 카운트할 수 있다. 상기 카운터의 카운팅 값(CNT)은 상 기 카운트 레지스터에 저장될 수 있다. 상기 선택기는 상기 카운트 레지스터로부터 상기 카운팅 값(CNT)을 수신하고, 0과 상기 출력 레지스터에 저장된 연산 값(OA, OB) 수신할 수 있다. 상기 선택기 는 상기 카운팅 값(CNT)에 기초하여 0과 상기 연산 값(OA, OB) 중 하나를 출력할 수 있다. 상기 선택기는 상기 카운팅 값(CNT)이 상기 소정 값이 아닐 때 때 상기 출력 레지스터에 저장된 연산 값(OA, O B)을 출력하고, 상기 카운팅 값(CNT)이 소정 값에 도달했을 때 상기 출력 레지스터에 저장된 연산 값(OA, OB) 대신 0을 출력할 수 있다. 일 실시예에서, 도 7에 도시된 상기 제 1 처리기(PE1)의 오버 플로우 제어기는 도 8에 도시된 카운터, 카 운트 레지스터 및 선택기를 모두 포함할 수 있고, 상기 제 2 내지 제 7 처리기(PE2, PE3, PE7)의 오 버 플로우 제어기는 도 8에 도시된 오버 플로우 제어기의 구성 중 선택기만을 포함할 수 있다. 상기 제 2 내지 제 7 처리기(PE2, PE3, PE7)의 선택기들은 상기 제 1 처리기(PE1)의 카운트 레지스터로부터 카운팅 값을 각각 또는 순차적으로 수신하도록 구성되고, 상기 카운팅 값에 따라 출력 레지스터에 저장된 연산 값 및 0 중 하나를 각각 출력할 수 있다. 도 9는 본 발명의 실시예에 따른 공통 누산기의 구성을 보여주는 도면이다. 도 9를 참조하면, 상기 공통 누산기는 도 7에 도시된 공통 누산기로 적용될 수 있다. 상기 공통 누산기는 컨트롤러, 선 택기, 메모리 및 합산기를 포함할 수 있다. 상기 컨트롤러는 상기 공통 누산기와 연 결되는 복수의 처리기의 합산 횟수가 상기 임계 값에 도달했는지 여부에 선택 신호(SEL<0:6>), 커맨드 신호 (CMD) 및 어드레스 신호(ADD)를 생성할 수 있다. 상기 선택 신호(SEL<0:6>)는 복수 비트를 포함할 수 있고, 상 기 선택 신호(SEL<0:6>)의 비트 수는 상기 공통 누산기가 연결되는 처리기의 개수에 대응할 수 있다. 도 7 을 함께 참조하여, 상기 공통 누산기가 7개의 처리기와 연결되는 경우를 예시적으로 설명하기로 한다. 상 기 컨트롤러는 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)의 합산 횟수가 상기 입계 값에 도달했는지 여 부에 기초하여 상기 선택 신호(SEL<0:6>)의 특정 비트를 인에이블시킬 수 있다. 예를 들어, 상기 제 1 처리기 (PE1)의 합산 횟수가 임계 값에 도달하는 단위 사이클 중에 상기 컨트롤러는 상기 선택 신호의 제 1 비트 (SEL<0>)를 인에이블시킬 수 있다. 상기 제 2 처리기(PE2)의 합산 횟수가 임계 값에 도달하는 단위 사이클 중에 상기 컨트롤러는 상기 선택 신호 제 1 비트(SEL<0>)를 디스에이블시키고 상기 선택 신호의 제 2 비트 (SEL<1>)를 인에이블시킬 수 있다. 상기 제 3 내지 제 7 처리기(PE3, PE7)의 합산 횟수가 순차적으로 임계 값에 도달하는 사이클 중에 상기 컨트롤러는 상기 선택 신호(SEL<0:6>)의 비트 중에서 이전에 인에이블된 비트 를 디스에이블시키고, 제 3 내지 제 7 비트(SEL<2:6>)를 각각 인에이블시킬 수 있다. 상기 제 1 처리기(PE1)가 다시 오버 플로우 되는 단위 사이클 중에 상기 컨트롤러는 상기 선택 신호의 제 7 비트(SEL<6>)를 디스에 이블시키고 상기 선택 신호의 제 1 비트(SEL<0>)를 다시 인에이블시킬 수 있다. 상기 컨트롤러는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)의 합산 횟수가 임계 값에 도달했는지 여부에 기초하여 상기 메모리 를 액세스하기 위한 커맨드 신호(CMD) 및 어드레스 신호(ADD)를 생성할 수 있다. 보다 상세한 내용은 후술 하기로 한다. 상기 컨트롤러는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)에 각각 구비되거나 상기 제 1 처리기(PE1)에 구비될 수 있는 도 8에 도시된 오버 플로우 제어기의 카운트 레지스터에 저장된 카운팅 값(CNT)을 수신하여 상기 공통 누산기와 연결되는 복수의 처리기가 오버 플로우 되었는지 여부를 판단할 수 있다. 상기 선택기는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)와 연결되어 상기 제 1 내지 제 7 처리기 (PE1, PE2, PE3, PE7)로부터 출력된 연산 값(OA1/OB1, OA2/OB2, OA3/OB3, OA7/OB7)을 수신할 수 있다. 상기 선 택기는 상기 선택 신호(SEL<0:6>)를 수신하고, 상기 선택 신호(SEL<0:6>)에 기초하여 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)로부터 출력된 연산 값(OA1/OB1, OA2/OB2, OA3/OB3, OA7/OB7) 중 하나를 선택할 수 있다. 상기 선택기는 상기 선택 신호의 제 1 비트(SEL<0>)가 인에이블되었을 때, 상기 제 1 처리기(PE1)로 부터 출력되는 연산 값(OA1/OB1)을 수신할 수 있다. 상기 선택기는 상기 선택 신호의 제 2 비트(SEL<1>)가 인에이블되었을 때, 상기 제 2 처리기(PE2)로부터 출력되는 연산 값(OA2/OB2)을 수신할 수 있다. 상기 선택기 는 상기 선택 신호의 제 3 내지 제 7 비트(SEL<2:6>)가 각각 인에이블되었을 때, 상기 제 3 내지 제 7 처 리기(PE3, PE7)로부터 출력되는 연산 값(OA3/OB3, OA7/OB7)을 각각 수신할 수 있다. 상기 메모리는 상기 컨트롤러로부터 상기 커맨드 신호(CMD) 및 상기 어드레스 신호(ADD)를 수신하고, 상기 커맨드 신호(CMD) 및 상기 어드레스 신호(ADD)에 기초하여 제 1 내지 제 7 연산 정보(SA1/SB1, SA2/SB2, SA3/SB3, SA7/SB7)를 저장할 수 있다. 상기 커맨드 신호(CMD)는 리드 커맨드 신호(RD) 및 라이트 커맨드 신호 (WT)를 포함할 수 있다. 상기 메모리는 상기 제 1 내지 제 7 연산 정보(SA1/SB1, SA2/SB2, SA3/SB3, SA7/SB7)를 저장하기 위한 제 1 내지 제 7 저장 공간(931, 932, 933, 937)을 포함하고, 상기 제 1 내지 제 7 저장 공간(931, 932, 933, 937)은 서로 다른 어드레스 신호에 기초하여 액세스될 수 있다. 상기 컨트롤러 는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)가 오버 플로우 될 때마다 상기 리드 커맨드 신호(RD) 및 상기 라이트 커맨드 신호(WT)를 순차적으로 생성할 수 있고, 상기 제 1 내지 제 7 저장 공간(931, 932, 933,937)을 각각 액세스하기 위한 서로 다른 어드레스 신호를 생성할 수 있다. 상기 메모리는 상기 리드 커맨 드 신호(RD) 및 상기 어드레스 신호(ADD)에 기초하여 상기 제 1 내지 제 7 저장 공간(931, 932, 933, 937)에 저장된 제 1 내지 제 7 연산 정보(SA1/SB1, SA2/SB2, SA3/SB3, SA7/SB7) 중 어느 하나를 출력할 수 있다. 상기 합산기는 상기 선택기로부터 출력된 연산 값과 상기 메모리로부터 리드된 연산 정보에 대 응하는 값을 합산할 수 있다. 상기 합산기는 상기 선택기에 의해 오버 플로우된 처리기로부터 출력된 연산 값을 상기 처리기에 대응하는 저장 공간으로부터 리드된 연산 정보에 대응하는 값을 합산할 수 있다. 상기 합산기는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)의 첫 번째 입력 신호 (즉, 제 1 처리기(PE1) 의 경우 제 1 입력신호(INA1), 제 2 처리기(PE2)의 경우 제 3 입력 신호(INA2), 제 3 처리기(PE3)의 경우 제 5 입력 신호(INA3), 제 7 처리기(PE7)의 경우 제 13 입력 신호(INA7))에 대한 연산 값(OA1, OA2, OA3, OA7)과 상 기 리드된 연산 정보 중 상기 첫 번째 입력 신호와 관련된 연산 정보(SA1, SA2, SA3, SA7)에 대응하는 값을 각 각 합산할 수 있다. 상기 합산기는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)의 두 번째 입력 신호 (즉, 제 1 처리기(PE1)의 경우 제 2 입력신호(INB1), 제 2 처리기(PE2)의 경우 제 4 입력 신호(INB2), 제 3 처 리기(PE3)의 경우 제 6 입력 신호(INB3), 제 7 처리기(PE7)의 경우 제 14 입력 신호(INB7))에 대한 연산 값 (OB1, OB2, OB3, OB7)과 상기 리드된 연산 정보 중 상기 두 번째 입력 신호와 관련된 연산 정보(SB1, SB2, SB3, SB7)에 대응하는 값을 각각 합산할 수 있다. 상기 메모리는 상기 라이트 커맨드 신호(WT)에 기초하여 상기 합산기의 출력을 상기 어드레스 신호(ADD)에 대응하는 저장 공간에 저장함으로써, 상기 제 1 내지 제 7 저장 공간(931, 932, 933, 937)에 저장된 제 1 내지 제 7 연산 정보(SA1/SB1, SA2/SB2, SA3/SB3, SA7/SB7)를 업데이트할 수 있다. 상기 연산 회로의 연산 동작이 종료되면, 상기 컨트롤러는 상기 리드 커맨드 신호(RD)를 복수 회 생성할 수 있고, 상기 제 1 내지 제 7 저장 공간(931, 932, 933, 937)을 액세스하기 위한 어드레스 신호(ADD)를 순차적 으로 생성할 수 있다. 상기 메모리는 상기 복수의 리드 커맨드 신호(RD)와 상기 제 1 내지 제 7 저장 공간 (931, 932, 933, 937)을 액세스하기 위한 어드레스 신호(ADD)에 기초하여 상기 제 1 내지 제 7 저장 공간(931, 932, 933, 937)에 저장된 제 1 내지 제 7 연산 정보(SA1/SB1, SA2/SB2, SA3/SB3, SA7/SB7)를 순차적으로 출력 할 수 있다. 상기 제 1 내지 제 7 연산 정보(SA1/SB1, SA2/SB2, SA3/SB3, SA7/SB7) 중 제 1 내지 제 7 처리기 (PE1, PE2, PE3, PE7)의 첫 번째 입력 신호와 관련된 연산 정보(SA1, SA2, SA3, SA7)는 제 1 출력 신호(OUTA) 로서 출력될 수 있고, 상기 제 1 내지 제 7 연산 정보(SA1/SB1, SA2/SB2, SA3/SB3, SA7/SB7) 중 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)의 두 번째 입력 신호와 관련된 연산 정보(SB1, SB2, SB3, SB7)는 제 2 출력 신 호(OUTB)로서 출력될 수 있다. 도 10은 본 발명의 실시예에 따른 연산 회로의 동작을 보여주는 타이밍도이다. 도 6 내지 도 10을 참조하여 본 발명의 실시예에 따른 연산 회로의 동작을 설명하면 다음과 같다. 상기 연산 회로를 구성하는 복수의 처리기는 제 2 정밀도를 갖는 2개의 입력 신호를 수신하고, 2개의 입력 신호에 대한 MAC 연산을 동시에 수행할 수 있다. 각각의 처리기로 입력되는 입력 신호의 비트 수는 8이고, 가드 비트의 개수가 2이며, 상기 입력 신호가 -128 과 127 사이의 정수일 때, 하나의 처리기는 오버 플로우가 되기 전까지 7회의 MAC 연산을 수행할 수 있고, 7개의 처리기가 하나의 공통 누산기와 연결되어 MAC 연산을 수행할 수 있다. 이하에서는, 도 7에 도시된 것과 같이, 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)가 공통 누산기(710 또는 900)와 연결되는 연산 회로의 동작 을 예시적으로 설명하기로 한다. 첫 번째 단위 사이클 중에 제 1 클럭 신호(CLK1)가 토글하면, 상기 제 1 처리기(PE1)는 제 1 입력 신호(INA1), 제 2 입력 신호(INB1) 및 웨이트 신호(W)를 수신할 수 있다. 상기 제 1 처리기(PE1)는 상기 제 1 입력 신호 (INA1)와 상기 웨이트 신호(W)에 대해 곱셈을 수행하고, 상기 제 2 입력 신호(INB1)와 상기 웨이트 신호(W)에 대해 곱셈을 수행할 수 있다. 두 번째 단위 사이클 중에 제 2 클럭 신호(CLK2)가 토글하면, 상기 제 1 처리기(PE1)는 상기 제 1 입력 신호 (INA1), 상기 제 2 입력 신호(INB1) 및 상기 웨이트 신호(W)를 새롭게 수신하고, 상기 첫 번째 단위 사이클 중 에 입력된 웨이트 신호(W)를 상기 제 2 처리기(PE2)로 전송할 수 있다. 상기 제 2 처리기(PE2)는 제 3 입력 신 호(INA2), 제 4 입력 신호(INB2) 및 상기 제 1 처리기(PE1)로부터 전송된 웨이트 신호(W)를 수신할 수 있다. 상 기 제 1 처리기(PE1)는 첫 번째 단위 사이클에서 곱셈된 연산 값을 저장할 수 있다. 상기 제 1 처리기(PE1)는 첫 번째 단위 사이클에서 곱셈된 연산 값과 이전에 저장된 연산 값, 즉, 0을 합산하고, 합산된 연산 값(ACC11) 을 출력 레지스터에 저장할 수 있다. 상기 제 1 처리기(PE1)는 상기 제 1 입력 신호(INA1)와 상기 웨이트 신호 (W)에 대해 곱셈을 수행하고, 상기 제 2 입력 신호(INB1)와 상기 웨이트 신호(W)에 대해 곱셈을 수행할 수 있다. 상기 제 2 처리기(PE2)는 상기 제 3 입력 신호(INA2)와 상기 웨이트 신호(W)에 대해 곱셈을 수행하고, 상기 제 4 입력 신호(INB2)와 상기 웨이트 신호(W)에 대해 곱셈을 수행할 수 있다. 세 번째 단위 사이클 중에 제 3 클럭 신호(CLK3)가 토글하면, 상기 제 1 처리기(PE1)는 상기 제 1 입력 신호 (INA1), 상기 제 2 입력 신호(INB1) 및 상기 웨이트 신호(W)를 새롭게 수신하고, 상기 두 번째 단위 사이클 중 에 입력된 웨이트 신호(W)를 상기 제 2 처리기(PE2)로 전송할 수 있다. 상기 제 2 처리기(PE2)는 상기 제 3 입 력 신호(INA2), 상기 제 4 입력 신호(INB2)를 새롭게 수신하고, 상기 두 번째 단위 사이클 중에 입력된 웨이트 신호(W)를 상기 제 3 처리기(PE3)로 전송할 수 있다. 상기 제 3 처리기(PE3)는 제 5 입력 신호(INA3), 제 6 입 력 신호(INB3) 및 상기 제 2 처리기(PE2)로부터 전송된 웨이트 신호(W)를 수신할 수 있다. 상기 제 1 처리기 (PE1)는 두 번째 단위 사이클에서 합산된 연산 값(ACC11)과 세 번째 사이클에서 곱셈된 연산 값을 합산하고, 합 산된 연산 값(ACC12)을 출력 레지스터에 저장될 수 있다. 상기 제 1 처리기(PE1)는 상기 제 1 입력 신호(INA1) 와 상기 웨이트 신호(W)에 대해 곱셈을 수행하고, 상기 제 2 입력 신호(INB1)와 상기 웨이트 신호(W)에 대해 곱 셈을 수행할 수 있다. 상기 제 2 처리기(PE2)는 두 번째 단위 사이클에서 곱셈된 연산 값을 저장할 수 있다. 상 기 제 2 처리기(PE2)는 두 번째 단위 사이클에서 곱셈된 연산 값과 이전에 저장된 연산 값, 즉, 0을 합산하고, 합산된 연산 값(ACC21)을 출력 레지스터에 저장할 수 있다. 상기 제 2 처리기(PE2)는 상기 제 3 입력 신호 (INA2)와 상기 웨이트 신호(W)에 대해 곱셈을 수행하고, 상기 제 4 입력 신호(INB2)와 상기 웨이트 신호(W)에 대해 곱셈을 수행할 수 있다. 상기 제 3 처리기(PE3)는 상기 제 5 입력 신호(INA3)와 상기 웨이트 신호(W)에 대 해 곱셈을 수행하고, 상기 제 6 입력 신호(INB3)와 상기 웨이트 신호(W)에 대해 곱셈을 수행할 수 있다. 네 번째 내지 여덟 번째 단위 사이클이 진행되면서 제 4 내지 제 8 클럭 신호(CLK4, CLK5, CLK6, CLK7)가 토글 하면, 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)는 각각 수신된 입력 신호와 수신된 웨이트 신호에 대해 MAC 연산을 수행하여 연산 값을 업데이트할 수 있다. 제 1 처리기(PE1)의 출력 레지스터에 저장되는 연산 값은 순차적으로 ACC13, ACC14, ACC15, ACC16, ACC17로 업데이트될 수 있고, 상기 제 2 처리기(PE1)의 출력 레지스 터에 저장되는 연산 값은 순차적으로 ACC22, ACC23, ACC24, ACC25, ACC26으로 업데이트 될 수 있으며, 상기 제 3 처리기(PE3)의 출력 레지스터에 저장되는 연산 값은 순차적으로 ACC31, ACC32, ACC33, ACC34로 업데이트 될 수 있다. 상기 여덟 번째 단위 사이클 중에 상기 제 7 처리기(PE7)는 제 13 입력 신호(INA7), 제 14 입력 신호 (INB7) 및 상기 제 6 처리기로부터 전송된 웨이트 신호(W)를 수신할 수 있다. 상기 제 7 처리기(PE7)는 상기 제 13 입력 신호(INA7)와 상기 웨이트 신호(W)에 대해 곱셈을 수행하고, 상기 제 14 입력 신호(INB7)와 상기 웨이 트 신호(W)에 대해 곱셈을 수행할 수 있다. 상기 여덟 번째 사이클 중에 상기 제 1 처리기(PE1)의 출력 레지스 터에 저장된 연산 값(ACC17)은 상기 공통 누산기로 출력될 수 있다. 상기 공통 누산기의 컨트롤러 는 상기 제 1 처리기(PE1)의 카운트 레지스터로부터 전송된 카운팅 값에 기초하여 상기 선택 신호의 제 1 비트(SEL<0>)를 인에이블시키고, 리드 커맨드 신호(RD)와 라이트 커맨드 신호(WT)를 순차적으로 생성하며, 상기 제 1 저장 공간을 액세스하기 위한 어드레스 신호(ADD)를 생성할 수 있다. 상기 선택기는 상기 제 1 처리기(PE1)와 연결되어 상기 제 1 처리기(PE1)의 출력 레지스터로부터 출력된 연산 값(ACC17)을 수신할 수 있 다. 상기 메모리는 상기 리드 커맨드 신호(RD) 및 어드레스 신호(ADD)에 기초하여 제 1 저장 공간에 저장된 제 1 연산 정보(SA1/SB1)를 출력할 수 있다. 상기 제 1 연산 정보(SA1/SB1)는 0에 대응할 수 있고, 상기 합산기는 0과 상기 수신된 연산 값(ACC17)을 합산할 수 있다. 상기 메모리는 상기 라이트 커맨드 신 호(WT) 및 상기 어드레스 신호(ADD)에 기초하여 상기 합산기의 출력을 제 1 연산 정보(SA1/SB1)로서 상기 제 1 저장 공간에 저장할 수 있다. 상기 아홉 번째 단위 사이클 중에 제 9 클럭 신호(CLK9)가 토글하면, 상기 제 1 처리기(PE1)는 제 1 입력 신호 (INA), 제 2 입력 신호(INB) 및 상기 웨이트 신호(W)를 새롭게 수신할 수 있다. 상기 제 1 처리기(PE1)의 카운 트 레지스터에 저장되는 카운팅 값이 9가 되고, 상기 제 1 처리기(PE1)의 선택기는 출력 레지스터에 저장된 이 전 연산 값(ACC17) 대신 0을 출력할 수 있다. 상기 제 1 처리기(PE1)는 상기 제 1 입력 신호(INA1)와 상기 웨이 트 신호(W)에 대해 곱셈을 수행하고, 상기 제 2 입력 신호(INB)와 상기 웨이트 신호(W)에 대해 곱셈을 수행할 수 있다. 상기 제 1 처리기(PE1)의 합산기는 여덟 번째 사이클에서 곱셈된 연산 값과 상기 선택기로부터 출력된 0을 합산하고, 합산된 연산 값(ACC11')을 상기 제 1 처리기(PE1)의 출력 레지스터에 저장할 수 있다. 상기 아홉 번째 사이클 중에 상기 제 2 처리기(PE2)의 출력 레지스터에 저장된 이전 연산 값 (ACC27)은 상기 공통 누산기 로 출력될 수 있다. 상기 공통 누산기의 컨트롤러는 상기 제 1 처리기(PE1) 또는 상기 제 2 처 리기(PE2)의 카운트 레지스터로부터 전송된 카운팅 값에 기초하여 상기 선택 신호의 제 2 비트(SEL<1>)를 인에 이블시키고, 리드 커맨드 신호(RD)와 라이트 커맨드 신호(WT)를 순차적으로 생성하며, 상기 제 2 저장 공간 을 액세스하기 위한 어드레스 신호(ADD)를 생성할 수 있다. 상기 선택기는 상기 제 2 처리기(PE2)와 연결되어 상기 제 2 처리기(PE2)의 출력 레지스터로부터 출력된 연산 값(ACC27)을 수신할 수 있다. 상기 메모리 는 상기 리드 커맨드 신호(RD) 및 어드레스 신호(ADD)에 기초하여 제 2 저장 공간에 저장된 제 2 연산 정보(SA2/SB2)를 출력할 수 있다. 상기 제 2 연산 정보(SA2/SB2)는 0에 대응할 수 있고, 상기 합산기는 0과 상기 수신된 연산 값(ACC27)을 합산할 수 있다. 상기 메모리는 상기 라이트 커맨드 신호(WT) 및 상기 어드레스 신호(ADD)에 기초하여 상기 합산기의 출력을 제 2 연산 정보(SA2/SB2)로서 상기 제 2 저장 공간 에 저장할 수 있다. 열 번째 단위 사이클 중에 제 10 클럭 신호(CLK10)가 토글하면, 상기 제 2 처리기(PE2)는 제 3 입력 신호 (INA2), 제 4 입력 신호(INB2) 및 상기 제 1 처리기(PE1)로부터 상기 웨이트 신호(W)를 새롭게 수신할 수 있다. 상기 제 2 처리기(PE2)의 카운트 레지스터에 저장되는 카운팅 값이 9가 되고, 상기 제 2 처리기(PE2)의 선택기 는 출력 레지스터에 저장된 이전 연산 값(ACC27) 대신 0을 출력할 수 있다. 상기 제 2 처리기(PE2)는 상기 제 3 입력 신호(INA2)와 상기 웨이트 신호(W)에 대해 곱셈을 수행하고, 상기 제 4 입력 신호(INB2)와 상기 웨이트 신 호(W)에 대해 곱셈을 수행할 수 있다. 상기 제 2 처리기(PE2)의 합산기는 상기 아홉 번째 단위 사이클 중에 곱 셈된 연산 값과 상기 선택기로부터 출력된 0을 합산하고, 합산된 연산 값(ACC21')을 상기 제 2 처리기(PE2)의 출력 레지스터에 저장할 수 있다. 상기 열 번째 사이클 중에 상기 제 3 처리기(PE3)의 출력 레지스터에 저장된 이전 연산 값 (ACC37)은 상기 공통 누산기로 출력될 수 있다. 상기 공통 누산기의 컨트롤러는 상기 제 1 처리기(PE1) 또는 상기 제 3 처리기(PE3)의 카운트 레지스터로부터 전송된 카운팅 값에 기초하여 상 기 선택 신호의 제 3 비트(SEL<2>)를 인에이블시키고, 리드 커맨드 신호(RD)와 라이트 커맨드 신호(WT)를 순차 적으로 생성하며, 상기 제 3 저장 공간을 액세스하기 위한 어드레스 신호(ADD)를 생성할 수 있다. 상기 선 택기는 상기 제 3 처리기(PE3)와 연결되어 상기 제 3 처리기(PE3)의 출력 레지스터로부터 출력된 연산 값 (ACC37)을 수신할 수 있다. 상기 메모리는 상기 리드 커맨드 신호(RD) 및 어드레스 신호(ADD)에 기초하여 제 3 저장 공간에 저장된 제 3 연산 정보(SA3/SB3)를 출력할 수 있다. 상기 제 3 연산 정보(SA3/SB3)는 0 에 대응할 수 있고, 상기 합산기는 0과 상기 수신된 연산 값(ACC37)을 합산할 수 있다. 상기 메모리 는 상기 라이트 커맨드 신호(WT) 및 상기 어드레스 신호(ADD)에 기초하여 상기 합산기의 출력을 제 3 연산 정보(SA3/SB3)로서 상기 제 3 저장 공간에 저장할 수 있다. 열한 번째 단위 사이클 중에 제 11 클럭 신호(CLK11)가 토글하면, 상기 제 3 처리기(PE3)는 제 5 입력 신호 (INA3), 제 6 입력 신호(INB3) 및 상기 제 2 처리기(PE2)로부터 상기 웨이트 신호(W)를 새롭게 수신할 수 있다. 상기 제 3 처리기(PE3)의 카운트 레지스터에 저장되는 카운팅 값이 9가 되고, 상기 제 3 처리기(PE3)의 선택기 는 출력 레지스터에 저장된 이전 연산 값(ACC37) 대신 0을 출력할 수 있다. 상기 제 3 처리기(PE3)는 상기 제 5 입력 신호(INA3)와 상기 웨이트 신호(W)에 대해 곱셈을 수행하고, 상기 제 6 입력 신호(INB3)와 상기 웨이트 신 호(W)에 대해 곱셈을 수행할 수 있다. 상기 제 3 처리기(PE3)의 합산기는 상기 열 번째 사이클에서 곱셈된 연산 값과 상기 선택기로부터 출력된 0을 합산하고, 합산된 연산 값(ACC31')을 상기 제 3 처리기(PE3)의 출력 레지스 터에 저장할 수 있다. 열네 번째 단위 사이클 중에 상기 제 14 클럭 신호(CLK14)가 토글하면, 상기 제 7 처리기(PE7)로부터 출력된 연 산 값(ACC77)은 상기 공통 누산기의 제 7 연산 정보(SA7/SB7)로서 제 7 저장 공간에 저장될 수 있다. 열다섯 번째 단위 사이클 중에 제 15 클럭 신호(CLK15)가 토글하면, 상기 제 1 처리기(PE1)의 출력 레지스터에 저장된 이전 연산 값 (ACC17')을 상기 공통 누산기로 출력할 수 있다. 상기 공통 누산기의 컨트롤러 는 상기 제 1 처리기(PE1)의 카운트 레지스터로부터 전송된 카운팅 값에 기초하여 상기 선택 신호의 제 1 비트(SEL<0>)를 인에이블시키고, 리드 커맨드 신호(RD)와 라이트 커맨드 신호(WT)를 순차적으로 생성하며, 상기 제 1 저장 공간을 액세스하기 위한 어드레스 신호(ADD)를 생성할 수 있다. 상기 선택기는 상기 제 1 처리기(PE1)와 연결되어 상기 제 1 처리기(PE1)의 출력 레지스터로부터 출력된 연산 값(ACC17')을 수신할 수 있 다. 상기 메모리는 상기 리드 커맨드 신호(RD) 및 어드레스 신호(ADD)에 기초하여 제 1 저장 공간에 저장된 이전 제 1 연산 정보(SA1/SB1)를 출력할 수 있다. 상기 합산기는 상기 제 1 저장 공간에 저장 된 상기 제 1 연산 정보(SA1/SB1)에 대응하는 값(ACC17)과 상기 수신된 연산 값(ACC17')을 합산할 수 있다. 상 기 메모리는 상기 라이트 커맨드 신호(WT) 및 상기 어드레스 신호(ADD)에 기초하여 합산된 값 (ACC17+ACC17')을 새로운 제 1 연산 정보(SA1/SB1)로서 상기 제 1 저장 공간에 저장할 수 있다. 열 여섯 번째 단위 사이클 중에, 상기 제 1 처리기(PE1)의 카운트 레지스터에 저장되는 카운팅 값이 16이 되고, 상기 제 1 처리기(PE1)의 선택기는 출력 레지스터에 저장된 이전 연산 값(ACC17') 대신 0을 출력할 수 있다. 상 기 제 1 처리기(PE1)는 상기 제 1 입력 신호(INA1)와 상기 웨이트 신호(W)에 대해 MAC 연산을 수행하고, 상기 제 2 입력 신호(INB1)와 상기 웨이트 신호(W)에 대해 MAC 연산을 수행할 수 있다. 상기 제 1 처리기(PE1)의 합 산기는 상기 MAC 연산이 수행되어 생성된 연산 값과 상기 선택기로부터 출력된 0을 합산하고, 합산된 연산 값 (ACC11'')을 상기 제 1 처리기(PE1)의 출력 레지스터에 저장할 수 있다. 상기 열여섯 번째 단위 사이클 중에 상기 공통 누산기는 상기 제 2 처리기(PE2)로부터 출력된 연산 값(ACC27')과 상기 제 2 저장 공간에 저 장된 상기 제 2 연산 정보(ACC27)에 대응하는 값을 합산하고, 합산된 값(ACC27+ACC27')으로 상기 제 2 연산 정 보(SA2/SB2)를 업데이트할 수 있다. 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)는 임계 값에 대응하는 횟수만큼 합산을 수행한 후, 공통 누산 기로 연산 값을 출력할 수 있다. 상기 공통 누산기는 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)와 순차적으로 연결되어, 상기 제 1 내지 제 7 처리기(PE1, PE2, PE3, PE7)로부터 연산 값을 수신하여 각각 의 처리기에 대응하는 연산 정보를 업데이트할 수 있다. 따라서, 본 발명의 실시예는 하나의 처리기가 낮은 정 밀도를 갖는 복수의 입력 신호에 대한 MAC 연산을 수행할 수 있도록 하여 연산 회로의 효율 및 성능을 증가시킬 수 있다. 각각의 처리기의 출력 레지스터는 가드 비트를 구비하여, 상기 출력 레지스터의 저장 공간 내에서 각 각의 처리기의 두 번째 입력 신호에 대한 연산 값이 첫 번째 입력 신호에 대한 연산 값에 영향을 미치지 않도록 할 수 있다. 상기 가드 비트의 개수를 조절하면, 하나의 공통 누산기와 연결되는 처리기의 개수를 조절할 수 있 으므로, 효율적인 면적을 갖는 연산 회로를 구성할 수 있다. 아울러, 동일한 양의 데이터를 처리하는데 소모되 는 시간 및 전력을 감소시킬 수 있다."}
{"patent_id": "10-2019-0086523", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "본 발명이 속하는 기술분야의 당업자는 본 발명이 그 기술적 사상이나 필수적 특징을 변경하지 않고서 다른 구 체적인 형태로 실시될 수 있으므로, 이상에서 기술한 실시예들은 모든 면에서 예시적인 것이며 한정적인 것이 아닌 것으로서 이해해야만 한다. 본 발명의 범위는 상기 상세한 설명보다는 후술하는 특허청구범위에 의하여 나 타내어지며, 특허청구범위의 의미 및 범위 그리고 그 등가개념으로부터 도출되는 모든 변경 또는 변형된 형태가 본 발명의 범위에 포함되는 것으로 해석되어야 한다.도면 도면1 도면2a 도면2b 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10"}
{"patent_id": "10-2019-0086523", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 실시예에 따른 시스템의 구성을 보여주는 도면이다. 도 2a 및 도 2b는 본 발명의 실시예에 따른 연산 회로의 구성 및 연산 동작을 보여주는 도면이다. 도 3은 본 발명의 실시예에 따른 처리기의 구성을 간략하게 보여주는 블록도이다 도 4는 도 3에 도시된 처리기의 구성 및 동작을 예시적으로 보여주는 도면이다. 도 5는 본 발명의 실시예에 따른 연산 회로의 구성을 보여주는 도면이다. 도 6은 본 발명의 실시예에 따른 처리기의 구성 및 동작을 예시적으로 보여주는 도면이다. 도 7은 본 발명의 실시예에 따른 연산 회로의 구성을 보여주는 도면이다. 도 8은 본 발명의 실시예에 따른 처리기의 구성을 보여주는 도면이다. 도 9는 본 발명의 실시예에 따른 공통 누산기의 구성을 보여주는 도면이다.도 10은 본 발명의 실시예에 따른 연산 회로의 동작을 보여주는 타이밍도이다."}
