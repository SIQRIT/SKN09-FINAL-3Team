{"patent_id": "10-2023-7044273", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0012523", "출원번호": "10-2023-7044273", "발명의 명칭": "소프트웨어 개발 장치 및 소프트웨어 개발 프로그램", "출원인": "커넥트프리 가부시키가이샤", "발명자": "테이트, 크리스토퍼 앤드류"}}
{"patent_id": "10-2023-7044273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "재구성 가능한 프로세서에서 실행되는 소프트웨어를 생성하는 소프트웨어 개발 장치로서,소스 코드를 해석하는 해석 모듈과,상기 프로세서에 부여하는 명령 코드를 포함하는 오브젝트 코드를 생성하는 제1 생성 모듈과,상기 프로세서의 명령 세트 아키텍처를 정의하는 명령 세트 아키텍처 설정 코드를 생성하는 제2 생성 모듈과,해석 결과에 기초하여 상기 오브젝트 코드 및 상기 명령 세트 아키텍처 설정 코드의 내용을 결정하는 최적화 모듈을 구비하는 것을 특징으로 하는 소프트웨어 개발 장치."}
{"patent_id": "10-2023-7044273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 명령 세트 아키텍처 설정 코드는 상기 프로세서에 실현된 와이어드 로직을 사용한 복수의 처리를 단일의명령 코드에 대응짓는 정의를 포함하는 것을 특징으로 하는 소프트웨어 개발 장치."}
{"patent_id": "10-2023-7044273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항 또는 제2항에 있어서,상기 명령 세트 아키텍처 설정 코드는 상기 프로세서에 실현해야 할 와이어드 로직의 정의를 포함하는 것을 특징으로 하는 소프트웨어 개발 장치."}
{"patent_id": "10-2023-7044273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항 내지 제3항 중 어느 한 항에 있어서,상기 최적화 모듈은 상기 소스 코드에 포함되는 특정의 처리의 반복수 및 처리의 복잡성에 따라 상기 오브젝트코드 및 상기 명령 세트 아키텍처 설정 코드의 내용을 결정하는 것을 특징으로 하는 소프트웨어 개발 장치."}
{"patent_id": "10-2023-7044273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "재구성 가능한 프로세서에서 실행되는 소프트웨어를 생성하는 소프트웨어 개발 프로그램으로서 상기 소프트웨어개발 프로그램은 컴퓨터에 소스 코드를 해석하는 스텝과,상기 프로세서에 부여하는 명령 코드를 포함하는 오브젝트 코드를 생성하는 스텝과,상기 프로세서의 명령 세트 아키텍처를 정의하는 명령 세트 아키텍처 설정 코드를 생성하는 스텝과,해석 결과에 기초하여 상기 오브젝트 코드 및 상기 명령 세트 아키텍처 설정 코드의 내용을 결정하는 스텝을 실행시키는 것을 특징으로 하는 소프트웨어 개발 프로그램."}
{"patent_id": "10-2023-7044273", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "재구성 가능한 프로세서에서 실행되는 소프트웨어를 생성하는 소프트웨어 개발 장치는 소스 코드를 해석하는 해 석 모듈과, 프로세서에 부여하는 명령 코드를 포함하는 오브젝트 코드를 생성하는 제1 생성 모듈과, 프로세서의 명령 세트 아키텍처를 정의하는 명령 세트 아키텍처 설정 코드를 생성하는 제2 생성 모듈과, 해석 결과에 기초하 여 오브젝트 코드 및 명령 세트 아키텍처 설정 코드의 내용을 결정하는 최적화 모듈을 포함한다."}
{"patent_id": "10-2023-7044273", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 소프트웨어 개발 장치 및 소프트웨어 개발 프로그램에 관한 것이다."}
{"patent_id": "10-2023-7044273", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "종래부터, 재구성 가능한 컴퓨터 혹은 프로세서가 실용화되고 있다. 이러한 컴퓨터 혹은 프로세서를 위한 소프 트웨어를 생성하는 기술이 제안되고 있다. 예를 들면, 일본 공개특허공보 2006-155632호(특허문헌 1)는 예를 들 면 C 또는 파스칼에서 쓰여진 소스 코드를 컴파일하여 선택적으로 교환 가능한 내부 하드웨어 구조를 갖는 동적으로 재설정 가능한 처리 유닛에서 사용하는 실행 파일을 생성하기 위한 시스템을 개시한다. 선행기술문헌 특허문헌 (특허문헌 0001) 특허문헌 1: 일본 공개특허공보 2006-155632호"}
{"patent_id": "10-2023-7044273", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "전술한 특허문헌 1에 개시되는 구성에 있어서, 동적으로 재설정 가능한 처리 유닛에서 사용하기 위한 오브젝트 파일을 생성하기 위해서는 복수의 명령 스테이트먼트와, 명령 스테이트먼트의 서브셋에 대해서 하드웨어 구조의 1개를 지정하는 재설정 지시를 포함하는 소스 파일을 입력할 필요가 있다. 그 때문에 미리 정해진 하드웨어 구 조를 이용할 수 있을 뿐이며 처리 전체가 최적화되어 있다고는 할 수 없다. 본 개시는 프로세서의 명령 세트 아키텍처 및 프로세서에 부여하는 명령 코드의 양쪽을 고려한 새로운 소프트웨 어 개발 기술을 제공하는 것을 목적으로 한다."}
{"patent_id": "10-2023-7044273", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 어느 형태에 따르면, 재구성 가능한 프로세서에서 실행되는 소프트웨어를 생성하는 소프트웨어 개발 장치가 제공된다. 소프트웨어 개발 장치는 소스 코드를 해석하는 해석 모듈과, 프로세서에 부여하는 명령 코드 를 포함하는 오브젝트 코드를 생성하는 제1 생성 모듈과, 프로세서의 명령 세트 아키텍처를 정의하는 명령 세트 아키텍처 설정 코드를 생성하는 제2 생성 모듈과, 해석 결과에 기초하여 오브젝트 코드 및 명령 세트 아키텍처 설정 코드의 내용을 결정하는 최적화 모듈을 포함한다. 명령 세트 아키텍처 설정 코드는 프로세서에 실현된 와이어드 로직을 사용한 복수의 처리를 단일의 명령 코드에 대응짓는 정의를 포함하고 있어도 좋다. 명령 세트 아키텍처 설정 코드는 프로세서에 실현해야 할 와이어드 로직의 정의를 포함하고 있어도 좋다. 최적화 모듈은 소스 코드에 포함되는 특정의 처리의 반복수 및 처리의 복잡성에 따라 오브젝트 코드 및 명령 세 트 아키텍처 설정 코드의 내용을 결정하도록 해도 좋다. 본 개시의 다른 형태에 따르면, 재구성 가능한 프로세서에서 실행되는 소프트웨어를 생성하는 소프트웨어 개발 프로그램이 제공된다. 소프트웨어 개발 프로그램은 컴퓨터에 소스 코드를 해석하는 스텝과, 프로세서에 부여하 는 명령 코드를 포함하는 오브젝트 코드를 생성하는 스텝과, 프로세서의 명령 세트 아키텍처를 정의하는 명령 세트 아키텍처 설정 코드를 생성하는 스텝과, 해석 결과에 기초하여 오브젝트 코드 및 명령 세트 아키텍처 설정 코드의 내용을 결정하는 스텝을 실행시킨다."}
{"patent_id": "10-2023-7044273", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시에 의하면, 프로세서의 명령 세트 아키텍처 및 프로세서에 부여하는 명령 코드의 양쪽을 고려한 새로운 소프트웨어 개발 기술을 실현할 수 있다."}
{"patent_id": "10-2023-7044273", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 개시에 따른 실시 형태에 대해서 도면을 참조하면서 상세하게 설명한다. 또한, 도면 중의 동일 또는 상당 부 분에 대해서는 동일 부호를 붙이고 그 설명은 반복하지 않는다. <A. 개요> 우선, 본 개시의 개요에 대해서 설명한다. 본 개시는 재구성 가능한 프로세서에서 실행되는 소프트웨어를 생성 하는 소프트웨어 개발 장치에 관한 것이다. 도 1은 관련 기술에 따른 소프트웨어 개발 장치를 설명하기 위한 도면이다. 도 1에는 범용적인 프로세서에 서 프로그램을 실행하는 예를 나타낸다. 보다 구체적으로는 대상의 프로그램을 기술한 소스 코드는 컴파일러에 의해 오브젝트 코드로 변환 된다. 프로그램이 실행될 때에는 오브젝트 코드에 포함되는 명령 코드(기계어로 기술되어 있음)가 프로 세서에 순차적으로 부여된다. 프로세서는 다수의 논리 회로로 구성되어 있고, 입력되는 명령 코드에 따라 대상의 논리 회로를 활성화 하고, 명령 코드에 대응하는 처리를 순차적으로 실행한다. 명령 코드의 각각은 명령을 지령하기 위한 오피 코드와, (필요에 따라) 대상을 지정하기 위한 오퍼랜드로 구성된다. 프로세서에는 명령 세트 아키텍처가 미리 설계되어 있다. 그 때문에 소스 코드에 기술된 프로그램 에 따른 처리를 프로세서에 실행시키기 위해 컴파일러는 명령 세트 아키텍처와 정합하도록 오브젝 트 코드를 생성한다. 즉, 오브젝트 코드에 포함되는 명령 코드는 프로세서에 대하여 설정되어 있는 규칙(명령 세트 아키 텍처)에 따라 생성된다. 명령 세트 아키텍처로서는 CISC(Complex Instruction Set Computer: 복잡 명령 세트 컴퓨터) 및 RISC(Reduce Instruction Set Computer: 축소 명령 세트 컴퓨터)로 대별된다. 각각의 방식에는 일장일단이 있지만, 실행 환 경이 정해져 있으면 유저가 명령 세트 아키텍처를 자유롭게 선택할 수는 없다. 본원 발명자는 소스 코드에 기술된 프로그램의 내용 등에 따라 명령 세트 아키텍처와 명령 코드의 조합을 최적 화함으로써 처리 성능을 보다 향상할 수 있다는 새로운 기술 사상을 찾아냈다. 도 2는 본 실시 형태에 따른 소프트웨어 개발 장치를 설명하기 위한 도면이다. 도 2를 참조하여 본 실시 형태에 있어서는 재구성 가능한 프로세서를 사용한다. 프로세서는 명령 세트 아키텍처를 임의로 구성할 수 있 다. 명령 세트 아키텍처를 임의로 구성하는 구조로서는 예를 들면, 프로세서에 실장되는 마이크로 프로그램 을 임의로 설정한다, 와이어드 로직(논리 회로)을 임의로 설정한다, 및 의 조합 등을 들 수 있 다. 프로세서에 실장되는 마이크로 프로그램을 임의로 설정하는 경우에는 프로세서에 격납되는 마이크 로 프로세서를 갱신하기 위한 인터페이스가 프로세서에 준비된다. 마이크로 프로그램은 명령 코드를 해석하 고, 프로세서에 구성된 와이어드 로직 중 어느 와이어드 로직을 어떠한 순서로 사용할지 등을 결정한다. 와이어드 로직을 임의로 설정하는 경우에는 FPGA(Field-Programmable Gate Array)나 공지의 재구성 가능 디바이스를 사용할 수 있다. 본 실시 형태에 있어서, 코드 생성 모듈은 컴파일러에 대응하는 기능을 갖고 있고, 소스 코드로부터 오 브젝트 코드 및 명령 세트 아키텍처 설정 코드를 생성한다. 프로그램이 실행될 때에는 오브젝트 코드 에 포함되는 명령 코드(기계어로 기술되어 있음)가 프로세서에 순차적으로 부여된다. 명령 세트 아키텍처 설정 코드는 프로세서에 명령 세트 아키텍처를 설정하기 위한 정보를 포함한다. 전술한 바와 같이 프로세서에 실장되는 마이크로 프로그램을 임의로 설정하는 경우에는 명령 세트 아키텍처 설정 코드는 마이크로 프로그램을 포함한다. 이와 같이 명령 세트 아키텍처 설정 코드는 프로세서에 실현된 와이어드 로직을 사용한 복수의 처리를 단일의 명령 코드에 대응짓는 정의를 포함한다. 또한, 와이어드 로직을 임의로 설정하는 경우에는 명령 세트 아키텍처 설정 코드는 와이어드 로직을 구 성하기 위한 정보(이하, 「컨피그레이션」이라고도 부름.)를 포함한다. 이와 같이 명령 세트 아키텍처 설정 코 드는 프로세서에 실현해야 할 와이어드 로직의 정의를 포함한다. 또한, 및 의 조합의 경우에는 명령 세트 아키텍처 설정 코드는 마이크로 프로그램 및 컨피그레 이션의 양쪽을 포함할 수 있다. 코드 생성 모듈은 소스 코드에 기술된 프로그램에 따라 최적화된 오브젝트 코드 및 명령 세트 아키 텍처 설정 코드를 생성한다. 전술한 바와 같이 본 실시 형태에 따른 소프트웨어 개발 장치에 의하면, 소스 코드에 기술된 프로그램에 따 라 프로세서의 명령 세트 아키텍처와, 프로세서에 대하여 출력되는 명령 코드를 종합적으로 고 려하여 최적화할 수 있다. <B. 하드웨어 구성예> 다음으로, 본 실시 형태에 따른 소프트웨어 개발 장치의 하드웨어 구성예에 대해서 설명한다. 도 3은 본 실시 형태에 따른 소프트웨어 개발 장치의 하드웨어 구성예를 나타내는 모식도이다. 소프트웨어 개발 장치는 전형적으로는 범용 컴퓨터에서 실현된다. 도 3을 참조하여 소프트웨어 개발 장치는 주된 컴포넌트로서 프로세서와, 메인 메모리와, 입력 부와, 디스플레이와, 하드디스크와, 통신 인터페이스를 포함한다. 이들의 컴포넌트는 내부 버스를 통하여 접속되어 있다. 프로세서는 예를 들면, CPU(Central Processing Unit)나 GPU(Graphics Processing Unit) 등으로 구성된다. 복수의 프로세서가 배치되어도 좋고, 복수의 코어를 갖는 프로세서를 채용해도 좋다. 메인 메모리는 DRAM(Dynamic Random Access Memory)이나 SRAM(Static Random Access Memory) 등의 휘발성 기억 장치로 구성된다. 하드디스크는 프로세서에서 실행되는 각종 프로그램이나 각종 데이터를 유지 한다. 또한, 하드디스크를 대신하여 SSD(Solid State Drive)나 플래시 메모리 등의 비휘발성 기억 장치를 채용해도 좋다. 하드디스크에 격납된 프로그램 중, 지정된 프로그램이 메인 메모리 상에 전개되고, 프로세서는 메인 메모리 상에 전개된 프로그램에 포함되는 컴퓨터 가독 명령(computer-readable instructions)을 순차적으로 실행함으로써 후술하는 바와 같은 각종 기능을 실현한다. 전형적으로는 하드디스크에는 통합 개발 환경을 실현하기 위한 소프트웨어 개발 프로그램과, 유저가 임의로 작성하는 소스 코드와, 소스 코드로부터 생성되는 오브젝트 코드 및 명령 세트 아키텍처 설 정 코드가 격납된다. 소프트웨어 개발 프로그램은 유저가 임의로 작성하는 소스 코드로부터 오브 젝트 코드 및 명령 세트 아키텍처 설정 코드를 생성하는 것이며 프로그램의 개발 환경을 제공하는 모듈 을 포함한다. 입력부는 소프트웨어 개발 장치를 조작하는 유저의 입력 조작을 받아들인다. 입력부는 예를 들 면, 키보드, 마우스, 표시 디바이스 상에 배치된 터치패널, 소프트웨어 개발 장치의 케이스체에 배치된 조 작 버튼 등이라도 좋다. 디스플레이는 프로세서에서의 처리 결과 등을 표시한다. 디스플레이는 예를 들면, LCD(Liquid Crystal Display)나 유기 EL(Electro-Luminescence) 디스플레이 등이라도 좋다. 통신 인터페이스는 프로세서를 포함하는 디바이스와의 데이터 교환을 담당한다. 통신 인터페이스 는 예를 들면, USB(Universal Serial Bus) 포트, IEEE 1394 등의 시리얼 포트, 레거시한 패러럴 포트와 같은 유선 접속 단자를 포함한다. 혹은 통신 인터페이스는 이더넷(등록상표) 포트를 포함하고 있어도좋다. 또한, 통신 인터페이스는 프로세서에 대하여 마이크로 프로그램을 기입하는 기능 및/또는 컨피그레이 션을 기입하는 기능을 갖고 있어도 좋다. 소프트웨어 개발 장치는 컴퓨터 가독 명령을 포함하는 소프트웨어 개발 프로그램을 격납하는 비일과 성(non-transitory)의 미디어로부터, 당해 격납하고 있는 프로그램 등을 읽어내기 위한 컴포넌트를 추가로 갖고 있어도 좋다. 미디어는 예를 들면, DVD(Digital Versatile Disc) 등의 광학 미디어, USB 메모리 등의 반도체 미디어 등이라도 좋다. 또한, 소프트웨어 개발 프로그램은 미디어를 통하여 소프트웨어 개발 장치에 인스톨될 뿐만 아니라, 네트워크상의 배신 서버로부터 제공되도록 해도 좋다. <C. 기능 구성예> 다음으로, 본 실시 형태에 따른 소프트웨어 개발 장치의 기능 구성예에 대해서 설명한다. 도 4는 본 실시 형태에 따른 소프트웨어 개발 장치의 기능 구성예를 나타내는 모식도이다. 도 4에 나타내 는 각 모듈은 전형적으로는 소프트웨어 개발 장치의 프로세서가 소프트웨어 개발 프로그램을 실 행함으로써 실현되어도 좋다. 도 4를 참조하여 소프트웨어 개발 장치는 코드 생성 모듈을 구성하는 기능 구성으로서 자구 해석 모듈 과, 구문 해석 모듈과, 중간 코드 생성 모듈과, 최적화 모듈과, 오브젝트 코드 생성 모듈 과, 프로세서 구성 코드 생성 모듈을 포함한다. 자구 해석 모듈 및 구문 해석 모듈은 소스 코드를 해석한다. 보다 구체적으로는 자구 해석 모듈은 소스 코드에 포함되는 키워드, 식별자, 연산자, 구분 문자 등을 해석한다. 구문 해석 모듈은 자구 해석 모듈에 의해 해석된 자구에 기초하여 소스 코드에 포함되 는 구문 구조를 결정한다. 중간 코드 생성 모듈은 구문 해석 모듈에 의해 결정된 구문 구조에 기초하여 임의의 표현 형식의 중 간 코드를 생성한다. 최적화 모듈은 구문 해석 모듈에 의해 결정된 구문 구조 및 중간 코드 생성 모듈에 의해 생성된 중간 코드에 기초하여 프로세서가 처리를 실현하기 위한 명령 세트 아키텍처와 명령 코드의 조합을 결정한 다. 이와 같이 최적화 모듈은 해석 결과에 기초하여 오브젝트 코드 및 명령 세트 아키텍처 설정 코드 의 내용을 결정한다. 오브젝트 코드 생성 모듈은 최적화 모듈에 의해 결정된 조합에 따라 중간 코드로부터 결정된 명령 코 드를 출력할 수 있는 오브젝트 코드를 생성한다. 이와 같이 오브젝트 코드 생성 모듈은 프로세서 에 부여하는 명령 코드를 포함하는 오브젝트 코드를 생성한다. 프로세서 구성 코드 생성 모듈은 최적화 모듈에 의해 결정된 명령 세트 아키텍처에 따라 결정된 명령 세트 아키텍처를 실현할 수 있는 명령 세트 아키텍처 설정 코드를 생성한다. 이와 같이 프로세서 구성 코드 생성 모듈은 프로세서의 명령 세트 아키텍처를 정의하는 명령 세트 아키텍처 설정 코드를 생성한 다. 이상과 같은 기능 구성에 의해 코드 생성 모듈(소프트웨어 개발 프로그램)은 소스 코드로부터 오 브젝트 코드 및 명령 세트 아키텍처 설정 코드를 생성한다. <D. 처리예> 다음으로, 본 실시 형태에 따른 소프트웨어 개발 장치에 의한 코드 생성 처리의 일례에 대해서 설명한다. (d1: 처리예 1) 도 5는 본 실시 형태에 따른 소프트웨어 개발 장치가 마이크로 프로그램을 포함하는 명령 세트 아키텍 처 설정 코드를 생성하는 처리예를 나타내는 도면이다. 도 5에는 일례로서 통신 모듈로부터 패킷을 송신하 는 예를 나타낸다.보다 구체적으로는 통신 모듈의 레지스터에 송신 대상의 데이터가 순차적으로 기입되는 예를 나타낸다. 메 모리에는 어드레스 001 ~ 어드레스 004가 부여된 영역이 형성되어 있고, 데이터 1 ~ 데이터 4가 각각 격납 된다. 메모리에 격납된 데이터 1 ~ 데이터 4가 순차적으로 레지스터로 송신된다. 이러한 일련의 처리에 의해 통신 모듈로부터 패킷이 송신된다. 도 5(A)를 참조하여 오브젝트 코드(34A)(설명의 편의상, 니모닉과 유사한 표현을 사용하고 있음(이하도 동일 함))는 데이터를 메모리에 순차적으로 격납하기 위한 명령군과, 메모리에 격납된 데이터를 레지스 터에 순차적으로 격납하기 위한 명령군을 포함한다. 도 5(A)에 나타내는 바와 같이 명령 세트 아키텍 처 설정 코드에 실질적인 정보를 포함시키지 않고, 프로세서의 명령 세트 아키텍처에 따라 오브젝 트 코드(34A)를 생성하도록 해도 좋다. 도 5(B)를 참조하여 동일한 처리를 복수회 반복할 필요가 있는 바와 같은 경우에는 임의의 처리를 마이크로 프 로그램에 정의해도 좋다. 예를 들면, 오브젝트 코드(34B)에는 데이터 격납 명령과, 데이터 이동 명령 을 포함한다. 데이터 격납 명령은 「BST Data Addr 4」와 같은 명령 코드로 기술되어 있다. 여기에서, 오피 코드인 「 BST」의 의미 및 오퍼랜드의 형식은 마이크로 프로그램에 기술되어 있다. 그 때문에 데이터 격납 명령(34 3)은 마이크로 프로그램을 참작하여 해석된다. 마찬가지로, 데이터 이동 명령은 「BMV Addr 4 Reg」와 같은 명령 코드로 기술되어 있다. 여기에서, 오피 코드인 「BMV」의 의미 및 오퍼랜드의 형식은 마이크로 프로그램에 기술되어 있다. 그 때문에 데이터 이동 명령은 마이크로 프로그램을 참작하여 해석된다. 즉, 소프트웨어 개발 장치는 임의의 오피 코드의 의미 및 대응하는 오퍼랜드의 형식을 기술한 마이크로 프 로그램을 생성함과 동시에 생성된 마이크로 프로그램에 기술된 오피 코드를 사용한 오브젝트 코드를 생성한 다. 도 6은 본 실시 형태에 따른 소프트웨어 개발 장치가 컨피그레이션을 포함하는 명령 세트 아키텍처 설 정 코드를 생성하는 처리예를 나타내는 도면이다. 도 6에도, 일례로서 통신 모듈로부터 패킷을 송신하는 예 를 나타낸다. 도 6(A)에는 도 5(A)와 동일한 구성을 나타낸다. 도 6(A)에 나타내는 구성에 대하여 도 6(B)에 나타내는 바와 같이 통신 모듈로부터의 패킷의 송신에 적합한 와이어드 로직을 채용해도 좋다. 보다 구체적으로는 메모리 ~ 메모리를 캐스케이드 접속함과 동시에 메모리 ~ 메모리에 데이터 1 ~ 데이터 4를 각각 격납하 는 입력 경로를 마련해도 좋다. 그리고, 메모리 ~ 메모리에 격납되어 있는 데이터를 순차적으로 인접 하는 메모리로 이동하는 회로를 마련해도 좋다. 이와 같이 통신 모듈로부터 패킷을 송신하는 처리에 적합한 와 이어드 로직을 구성함으로써 효율적인 처리를 실현할 수 있다. 또한, 컨피그레이션은 도 6(B)에 나타내는 바와 같은 와이어드 로직을 구성하기 위한 정보를 포함한다. 또한, 도 6(B)에 나타내는 바와 같은 와이어드 로직을 구성함으로써 아울러 생성되는 오브젝트 코드(34C)는 통 신 모듈로부터 패킷을 송신하기 위한 송신 명령을 포함하는 심플한 코드로 할 수 있다. 또한, 송신 명령 은 컨피그레이션에 따라 구성된 와이어드 로직에 대응하는 오피 코드를 포함한다. 이와 같이 와이어드 로직 및 오브젝트 코드를 토털로 최적화하여 처리 성능을 보다 향상할 수 있다. 여기에서, 명령 세트 아키텍처와 명령 코드의 조합의 최적화 방법의 일례로서 소스 코드에 포함되는 특정의 처리의 반복수나 처리의 복잡성에 따라 명령 세트 아키텍처와 명령 코드의 조합을 결정해도 좋다. 즉, 최적화의 수법으로서 소스 코드에 포함되는 특정의 처리의 반복수 및 처리의 복잡성에 따라 오브젝트 코드 및 명령 세트 아키텍처 설정 코드의 내용을 결정해도 좋다. 혹은 소스 코드에 포함되는 기술 중, 미리 정해진 규칙에 합치하는 기술을 추출하고, 당해 추출한 기술에 대해서, 대응하는 명령 세트 아키텍처를 할당함과 동시에 할당한 명령 세트 아키텍처를 참조하는 오피 코드 및 오퍼랜드로 이루어지는 명령 코드(기계어로 기술되어 있음)를 생성하도록 해도 좋다. (d2: 처리예 2) 도 7은 본 실시 형태에 따른 소프트웨어 개발 장치에 의한 소스 코드의 처리예를 나타내는 모식도이다. 도 7에 나타내는 소스 코드는 예를 들면, 입력 처리 코드, 연산 처리 코드, 암호화 처리 코드및 통신 처리 코드를 포함한다고 한다. 또한, 실제의 소스 코드에 있어서는 각 처리 코드가 명확하게 구별 되어 있지 않는 경우도 있다. 소프트웨어 개발 장치는 자구 해석 및 구문 해석에 의해 소스 코드에 포함되는 처리를 특정함과 동시 에 특정한 처리의 반복수나 처리의 복잡성 등에 기초하여 오브젝트 코드 및 명령 세트 아키텍처 설정 코드 (프로세서에 실현되는 와이어드 로직) 중 어느 것을 사용하여 각 처리를 실장할지를 결정한다. 도 7(A)에는 소스 코드에 기술된 처리의 전부가 오브젝트 코드에 실장되어 있는 예를 나타낸다. 설명의 편의상, 각 처리를 실현하기 위한 명령이 개별적으로 배치되어 있는 예를 나타내지만, 실제로는 최적화된 오브 젝트 형식의 데이터가 생성된다. 도 7(B)에는 소스 코드에 기술된 처리 중, 암호화 처리를 제외한 처리가 오브젝트 코드에 실장되어 있 는 예를 나타낸다. 명령 세트 아키텍처 설정 코드는 암호화 처리를 실현하기 위한 암호화 처리 로직을 포함 하고 있고, 오브젝트 코드는 명령 세트 아키텍처 설정 코드가 정의하는 암호화 처리 로직을 참조하도록 구성되어 있다. 즉, 명령 세트 아키텍처 설정 코드에 의해 프로세서에는 암호화 처리를 실행하기 위한 와이어드 로직이 구성된다. 오브젝트 코드는 프로세서에 구성된 와이어드 로직을 실행할 수 있게 되어 있다. 이와 같이 소프트웨어 개발 장치는 소스 코드의 내용에 따라 오브젝트 코드 및 명령 세트 아키텍 처 설정 코드의 내용을 최적화한다. (d3: 처리예 3) 도 8은 본 실시 형태에 따른 소프트웨어 개발 장치에 있어서의 코드 생성 처리의 처리예를 나타내는 모식 도이다. 도 8에는 소스 코드로부터 생성된 중간 코드의 일부를 그래프화한 도면이다. 즉, 도 8에는 중간 코 드에 대응하는 중간 표현(IR: Intermediate Representation)의 일례를 나타낸다. 중간 표현은 최종적으로 생성되는 오브젝트 코드 및 명령 세트 아키텍처 설정 코드와는 독립된 형식으 로, 소스 코드의 내용을 표현한 것이며 예를 들면, 도 8에 나타내는 바와 같은 나무 구조로 표현된 것이라 도 좋고, 명령열의 조합으로 표현된 것이라도 좋다. 예를 들면, 패턴 매칭 등을 사용하여 반복하여 나타나는 부분적인 나무 구조를 추출한다. 소프트웨어 개발 장치 는 중간 표현에 포함되는 구조 중, 동일 또는 유사한 부분(이하, 「공통 구조」라고도 부름.)을 추출한다. 소프트웨어 개발 장치는 검색된 공통 구조의 처리 내용 및 복잡성 등에 따라 프로세서에 와이어드 로 직을 구성하는 쪽이 유리하다고 판단하면, 공통 기술에 대응하는 전용 로직을 결정하고, 명령 세트 아키텍처 (도 2 참조)의 일부로서 추가한다. 또한, 중간 표현에 포함되는 공통 구조를 추출하는 방법으로서는 패턴 매칭에 한정하지 않고, 공지의 AI(인공지 능)를 이용하는 방법이라도 좋다. 또한, 패턴 매칭에 대해서도, 임의의 알고리즘을 채용할 수 있다. 전술한 바와 같이 중간 코드(중간 표현)상에서 동일 혹은 유사한 부분을 추출함으로써 소스 코드의 기술에 변동이 포함되는 경우나, 프로그램 작성자간의 기술의 차이 등이 있는 경우라도, 확실하게 최적화할 수 있다. 이에 따라 보다 효율적으로, 오브젝트 코드 및 명령 세트 아키텍처 설정 코드를 생성할 수 있다. <E. 처리 수순> 다음으로 본 실시 형태에 따른 소프트웨어 개발 장치가 실행하는 처리 수순의 일례에 대해서 설명한다. 도 9는 본 실시 형태에 따른 소프트웨어 개발 장치가 실행하는 처리 수순의 일례를 나타내는 플로우차트이 다. 도 9에 나타내는 각 스텝은 전형적으로는 소프트웨어 개발 장치의 프로세서가 소프트웨어 개발 프로그램을 실행함으로써 실현되어도 좋다. 도 9를 참조하여 소프트웨어 개발 장치는 유저 조작에 따라 소스 코드를 읽어들여(스텝 S2), 소스 코 드의 자구 해석을 행한다(스텝 S4). 계속해서, 소프트웨어 개발 장치는 자구 해석의 결과에 기초하여 소스 코드에 포함되는 구문 구조를 결정하고(스텝 S6), 결정한 구문 구조에 기초하여 중간 코드를 생성한다 (스텝 S8). 소프트웨어 개발 장치는 자구 해석의 결과 및 생성된 중간 코드에 기초하여 명령 세트 아키텍처와 명령 코 드의 조합을 결정한다(스텝 S10). 그리고, 소프트웨어 개발 장치는 결정된 조합에 따라 중간 코드로부터결정된 명령 코드를 출력할 수 있는 오브젝트 코드를 생성한다(스텝 S12). 또한, 소프트웨어 개발 장치 는 결정된 조합에 따라 결정된 명령 세트 아키텍처를 실현할 수 있는 명령 세트 아키텍처 설정 코드를 생성한다(스텝 S14). 이상에 의해 소스 코드로부터의 코드 생성에 따른 처리는 종료한다. 최종적으로 소프트웨어 개발 장치는 유저 조작에 따라 생성한 오브젝트 코드 및 명령 세트 아키텍처 설정 코드를 대상의 디바이스로 송신한다(스텝 S16). <F. 이점> 본 실시 형태에 의하면, 소스 코드의 해석 결과에 기초하여 오브젝트 코드 및 명령 세트 아키텍처 설정 코드의 내용을 최적화한 후에 프로세서에 부여하는 명령 코드를 포함하는 오브젝트 코드 및 프로세서의 명령 세트 아키 텍처를 정의하는 명령 세트 아키텍처 설정 코드를 생성한다. 이러한 구성을 채용함으로써 프로세서의 명령 세트 아키텍처 및 프로세서에 부여하는 명령 코드의 양쪽을 고려한 새로운 소프트웨어 개발 기술을 실현할 수 있다. 이번 개시된 실시 형태는 모든 점에서 예시이며 제한적인 것이 아니라고 생각되어야 한다. 본 발명의 범위는 상 기한 설명이 아니라 청구 범위에 의해 나타나고, 청구 범위와 균등한 의미 및 범위 내에서의 모든 변경이 포함 되는 것이 의도된다."}
{"patent_id": "10-2023-7044273", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 관련 기술에 따른 소프트웨어 개발 장치를 설명하기 위한 도면이다. 도 2는 본 실시 형태에 따른 소프트웨어 개발 장치를 설명하기 위한 도면이다. 도 3은 본 실시 형태에 따른 소프트웨어 개발 장치의 하드웨어 구성예를 나타내는 모식도이다. 도 4는 본 실시 형태에 따른 소프트웨어 개발 장치의 기능 구성예를 나타내는 모식도이다. 도 5는 본 실시 형태에 따른 소프트웨어 개발 장치가 마이크로 프로그램을 포함하는 회로 설계 코드를 생성하는 처리예를 나타내는 도면이다.도 6은 본 실시 형태에 따른 소프트웨어 개발 장치가 컨피그레이션을 포함하는 회로 설계 코드를 생성하는 처리 예를 나타내는 도면이다. 도 7은 본 실시 형태에 따른 소프트웨어 개발 장치에 의한 소스 코드의 처리예를 나타내는 모식도이다. 도 8은 본 실시 형태에 따른 소프트웨어 개발 장치에 있어서의 코드 생성 처리의 처리예를 나타내는 모식도이다. 도 9는 본 실시 형태에 따른 소프트웨어 개발 장치가 실행하는 처리 수순의 일례를 나타내는 플로우차트이다."}
