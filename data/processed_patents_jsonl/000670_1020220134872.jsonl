{"patent_id": "10-2022-0134872", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0054644", "출원번호": "10-2022-0134872", "발명의 명칭": "고장 검출 가능한 신경망 가속기 및 신경망 가속기 고장 검출 방법", "출원인": "연세대학교 산학협력단", "발명자": "강성호"}}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "제1 단위 연산 요소와 제2 단위 연산 요소를 포함하는 신경망 가속기로, 상기 제1 단위 연산 요소는: 입력값, 가중치 및 이전 부분합을 제공받고 MAC(multiply and accumulation) 연산을 수행하여 부분합을 연산하는 MAC 연산부;상기 제2 단위 연산 요소가 연산한 부분합들을 제공받아 비교하는 비교기;상기 비교기의 비교 결과에 따라 MAC 연산부가 연산한 부분합과 상기 이전 부분합을 선택하여 출력하는 다중화기(MUX);상기 다중화기의 출력을 저장하는 부분합 레지스터 및 델타 레지스터를 포함하며, 상기 비교기는 상기 제2 단위 연산 요소에 포함된 상기 부분합 레지스터와 상기 델타 레지스터에 저장된 값들을제공받아 비교하며,상기 델타 레지스터에 제공되는 클록은 상기 부분합 레지스터에 제공되는 클록에 비하여 반주기 늦은 클록인 고장 검출 가능한 신경망 가속기."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 단위 연산 요소는, 입력 제공부가 제공한 상기 입력값을 저장하는 입력 레지스터;가중치 제공부가 제공한 상기 가중치를 저장하는 가중치 레지스터를 포함하며, 상기 가중치 레지스터 및 상기 부분합 레지스터는 0에 상응하는 값으로 리셋 가능한 고장 검출 가능한 신경망가속기."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 MAC 연산부는, 상기 입력값과 상기 가중치의 곱셈 연산을 수행하는 곱셈기;상기 곱셈 연산 결과와 상기 이전 부분합을 도합하여 부분합을 연산하는 덧셈기를 포함하는 고장 검출 가능한신경망 가속기."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서, 상기 신경망 가속기는, 상기 가중치 레지스터를 리셋하고, 상기 입력 레지스터에 테스트 입력값이 제공되고, 리셋된 상기 가중치와 상기 테스트 입력값의 곱셈 결과 및 상기 이전 부분합을 합산한 부분합을 연산하여 상기 부분합 레지스터 및 상기 델타 레지스터에 저장하고,가중치 레지스터에 테스트 가중치를 저장하고, 상기 테스트 가중치로 부분합을 연산하며,공개특허 10-2024-0054644-3-상기 테스트 가중치로 연산된 부분합을 스캔 아웃하여 고장을 검출하는 고장 검출 가능한 신경망 가속기."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 상기 테스트 가중치로 연산된 부분합을 스캔 아웃하는 단계는, 상기 가중치 레지스터에 가중치를 0에 상응하는 값으로 시프트 인하는 단계를 포함하여 수행되는 고장 검출 가능한 신경망 가속기."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제2항에 있어서, 상기 신경망 가속기는, 상기 가중치 레지스터에 저장된 가중치 값을 0에 상응하는 값으로 리셋하고,상기 입력 레지스터에 테스트 입력값이 제공되고, 리셋된 상기 가중치와 상기 테스트 입력값의 곱셈 결과 및 상기 이전 부분합을 합산한 부분합을 연산하여 상기 부분합 레지스터 및 상기 델타 레지스터에 저장하고,상기 부분합 레지스터 및 상기 가중치 레지스터를 리셋하고,상기 가중치 제공부가 가중치 레지스터에 테스트 가중치를 제공하고, 상기 테스트 가중치로 부분합을 연산하며,상기 테스트 가중치로 연산된 부분합을 스캔 아웃하여 고장을 검출하는 고장 검출 가능한 신경망 가속기."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서, 상기 테스트 가중치로 연산된 부분합을 스캔 아웃하는 단계는, 상기 가중치 레지스터에 가중치를 0에 상응하는값으로 시프트 인하는 단계를 포함하여 수행되는 고장 검출 가능한 신경망 가속기."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "단위 연산 요소들이 어레이로 연결된 신경망 가속기의 고장 검출 방법은:상기 단위 연산 요소들에 저장된 가중치 값을 0에 상응하는 값으로 리셋하는 단계; 입력값 제공부가 입력 레지스터에 테스트 입력값을 제공하고, 리셋된 상기 가중치와 상기 테스트 입력값의 곱셈 결과 및 이전 부분합을 합산한 부분합을 연산하여 부분합 레지스터 및 델타 레지스터에 저장하는 단계와, 상기 가중치 제공부가 가중치 레지스터에 테스트 가중치를 제공하고, 상기 테스트 가중치로 부분합을 연산하는단계 및상기 테스트 가중치로 연산된 부분합을 스캔 아웃하여 상기 신경망 가속기의 고장을 검출하는 단계를 포함하는신경망 가속기의 고장 검출 방법."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 델타 레지스터에 제공되는 클록은, 상기 부분합 레지스터에 제공되는 클록에 비하여 반주기 늦은 클록인 신경망 가속기의 고장 검출 방법."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서,상기 테스트 가중치로 연산된 부분합을 스캔 아웃하는 단계는, 상기 단위 연산 요소들에 저장된 가중치 값을 0에 상응하는 값으로 시프트 인(shift-in)하는 단계와, 공개특허 10-2024-0054644-4-상기 부분합 레지스터 및 델타 레지스터에 저장된 값을 시프트 아웃하는 단계를 포함하여 수행되는 신경망 가속기의 고장 검출 방법."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "단위 연산 요소들이 어레이로 연결된 신경망 가속기의 고장 검출 방법은:가중치 레지스터에 저장된 가중치 값을 0에 상응하는 값으로 리셋하는 단계;입력값 제공부가 입력 레지스터에 테스트 입력값을 제공하고, 리셋된 상기 가중치와 상기 테스트 입력값의 곱셈결과 및 이전 부분합을 합산한 부분합을 연산하여 부분합 레지스터 및 델타 레지스터에 저장하는 단계와,상기 부분합 레지스터 및 상기 가중치 레지스터를 리셋하는 단계와, 상기 가중치 제공부가 가중치 레지스터에 테스트 가중치를 제공하고, 상기 테스트 가중치로 부분합을 연산하는단계 및상기 테스트 가중치로 연산된 부분합을 스캔 아웃하여 상기 신경망 가속기의 고장을 검출하는 단계를 포함하는신경망 가속기의 고장 검출 방법."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 델타 레지스터에 제공되는 클록은, 상기 부분합 레지스터에 제공되는 클록에 비하여 반주기 늦은 클록인 신경망 가속기의 고장 검출 방법."}
{"patent_id": "10-2022-0134872", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서,상기 테스트 가중치로 연산된 부분합을 스캔 아웃하는 단계는, 상기 단위 연산 요소들에 저장된 가중치 값을 0에 상응하는 값으로 시프트 인(shift-in)하는 단계와, 상기 부분합 레지스터 및 델타 레지스터에 저장된 값을 시프트 아웃하는 단계를 포함하여 수행되는 신경망 가속기의 고장 검출 방법."}
{"patent_id": "10-2022-0134872", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 실시예는 제1 단위 연산 요소와 제2 단위 연산 요소를 포함하는 신경망 가속기로, 상기 제1 단위 연산 요소는: 입력값, 가중치 및 이전 부분합을 제공받고 MAC(multiply and accumulation) 연산을 수행하여 부분합을 연산하는 MAC 연산부; 상기 제2 단위 연산 요소가 연산한 부분합들을 제공받아 비교하는 비교기; 상기 비교기의 비교 결과에 따라 MAC 연산부가 연산한 부분합과 상기 이전 부분합을 선택하여 출력하는 다중화기(MUX); 상기 다 중화기의 출력을 저장하는 부분합 레지스터 및 델타 레지스터를 포함하며, 상기 비교기는 상기 제2 단위 연산 요 소에 포함된 상기 부분합 레지스터와 상기 델타 레지스터에 저장된 값들을 제공받아 비교하며, 상기 델타 레지스 터에 제공되는 클록은 상기 부분합 레지스터에 제공되는 클록에 비하여 반주기 늦은 클록이다."}
{"patent_id": "10-2022-0134872", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 기술은 고장 검출 가능한 신경망 가속기 및 신경망 가속기 고장 검출 방법과 관련된다."}
{"patent_id": "10-2022-0134872", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 4차 산업혁명으로 loT, 자율주행 자동차와 클라우드 등 전 분야에서 인공지능의 수요가 급격하게 증가하고 있다. 지능형 반도체는 인식, 추론, 학습, 판단과 같은 인공지능 서비스를 구현하기 위한 하드웨어 반도체를 말 하며 인공신경망 가속과 병렬연산을 위해 다중 동일한 코어로 구성되어 있다. 대표적인 인공지능 가속기로 매트 릭스 연산을 빠르게 처리하기 위한 시스톨릭 배열 형태의 구조가 많이 이용되고 있다. 이러한 시스톨릭 배열 형 태의 구조들은 높은 대역폭과 다수의 병렬화된 데이터 스트림을 처리해야 되고 과도한 전력 소모 등 테스트의 복잡도 상승으로 인해 이를 효율적으로 병렬테스트를 할 수 있는 기술이 요청된다. 인공지능을 위한 가속기인 만큼 전력 소모가 크기 때문에 시스톨릭 배열 형태의 구조 중에서도 동작전압을 낮춰 서 전력 효율을 크게 향상시킬 수 있는 구조에 대한 연구가 많이 진행되고 있다."}
{"patent_id": "10-2022-0134872", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "저전압용 인공지능 가속기를 위한 시스톨릭 배열은 딜레이 문제를 막기 위해 비교기와 델타 레지스터 등 하드웨 어가 추가되어 동작하며 기존 시스톨릭 배열 구조보다 테스트 복잡도가 높아진다. 이러한 시스톨릭 배열 구조를 테스트하기 위해 스캔을 삽입하거나 종래 기술은 테스트를 위한 하드웨어를 필요 로 하고 이는 저전압용 시스톨릭 배열 구조에 큰 오버헤드가 된다. 따라서, 저전압용 인공지능 가속기 시스톨릭 배열 구조를 위한 추가적인 하드웨어 없이 효율적인 테스트 방법이 필요하다."}
{"patent_id": "10-2022-0134872", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 실시예는 제1 단위 연산 요소와 제2 단위 연산 요소를 포함하는 신경망 가속기로, 상기 제1 단위 연산 요소 는: 입력값, 가중치 및 이전 부분합을 제공받고 MAC(multiply and accumulation) 연산을 수행하여 부분합을 연 산하는 MAC 연산부; 상기 제2 단위 연산 요소가 연산한 부분합들을 제공받아 비교하는 비교기; 상기 비교기의 비교 결과에 따라 MAC 연산부가 연산한 부분합과 상기 이전 부분합을 선택하여 출력하는 다중화기(MUX); 상기 다중화기의 출력을 저장하는 부분합 레지스터 및 델타 레지스터를 포함하며, 상기 비교기는 상기 제2 단위 연산 요소에 포함된 상기 부분합 레지스터와 상기 델타 레지스터에 저장된 값들을 제공받아 비교하며, 상기 델타 레 지스터에 제공되는 클록은 상기 부분합 레지스터에 제공되는 클록에 비하여 반주기 늦은 클록이다. 본 실시예의 어느 한 측면에서, 상기 단위 연산 요소는, 입력 제공부가 제공한 상기 입력값을 저장하는 입력 레 지스터; 가중치 제공부가 제공한 상기 가중치를 저장하는 가중치 레지스터를 포함하며, 상기 가중치 레지스터 및 상기 부분합 레지스터는 0에 상응하는 값으로 리셋 가능하다. 본 실시예의 어느 한 측면에서, 상기 MAC 연산부는, 상기 입력값과 상기 가중치의 곱셈 연산을 수행하는 곱셈기; 상기 곱셈 연산 결과와 상기 이전 부분합을 도합하여 부분합을 연산하는 덧셈기를 포함한다. 본 실시예의 어느 한 측면에서, 상기 신경망 가속기는, 상기 가중치 레지스터를 리셋하고, 상기 입력 레지스터 에 테스트 입력값이 제공되며, 리셋된 상기 가중치와 상기 테스트 입력값의 곱셈 결과 및 상기 이전 부분합을 합산한 부분합을 연산하여 상기 부분합 레지스터 및 상기 델타 레지스터에 저장하고, 가중치 레지스터에 테스트 가중치를 저장하고, 상기 테스트 가중치로 부분합을 연산하며, 상기 테스트 가중치로 연산된 부분합을 스캔 아 웃하여 고장을 검출한다. 본 실시예의 어느 한 측면에서, 상기 테스트 가중치로 연산된 부분합을 스캔 아웃하는 단계는, 상기 가중치 레 지스터에 가중치를 0에 상응하는 값으로 시프트 인하는 단계를 포함하여 수행된다. 본 실시예의 어느 한 측면에서, 상기 신경망 가속기는, 상기 가중치 레지스터에 저장된 가중치 값을 0에 상응하 는 값으로 리셋하고, 상기 입력 레지스터에 테스트 입력값이 제공되며, 리셋된 상기 가중치와 상기 테스트 입력 값의 곱셈 결과 및 상기 이전 부분합을 합산한 부분합을 연산하여 상기 부분합 레지스터 및 상기 델타 레지스터 에 저장하고, 상기 부분합 레지스터 및 상기 가중치 레지스터를 리셋하고, 상기 가중치 제공부가 가중치 레지스 터에 테스트 가중치를 제공하고, 상기 테스트 가중치로 부분합을 연산하며, 상기 테스트 가중치로 연산된 부분 합을 스캔 아웃하여 고장을 검출한다. 본 실시예의 어느 한 측면에서, 상기 테스트 가중치로 연산된 부분합을 스캔 아웃하는 단계는, 상기 가중치 레 지스터에 가중치를 0에 상응하는 값으로 시프트 인하는 단계를 포함하여 수행된다. 본 실시예는 단위 연산 요소들이 어레이로 연결된 신경망 가속기의 고장 검출 방법으로, 상기 단위 연산 요소들 에 저장된 가중치 값을 0에 상응하는 값으로 리셋하는 단계; 입력값 제공부가 입력 레지스터에 테스트 입력값을 제공하고, 입력값 제공부가 입력 레지스터에 테스트 입력값을 제공하는 단계; 리셋된 상기 가중치와 상기 테스 트 입력값의 곱셈 결과 및 이전 부분합을 합산한 부분합을 연산하여 부분합 레지스터 및 델타 레지스터에 저장 하는 단계와, 상기 가중치 제공부가 가중치 레지스터에 테스트 가중치를 제공하고, 상기 테스트 가중치로 부분 합을 연산하는 단계 및 상기 테스트 가중치로 연산된 부분합을 스캔 아웃하여 상기 신경망 가속기의 고장을 검 출하는 단계를 포함한다. 본 실시예의 어느 한 측면에서, 상기 델타 레지스터에 제공되는 클록은, 상기 부분합 레지스터에 제공되는 클록 에 비하여 반주기 늦은 클록이다. 본 실시예의 어느 한 측면에서, 상기 테스트 가중치로 연산된 부분합을 스캔 아웃하는 단계는, 상기 단위 연산 요소들에 저장된 가중치 값을 0에 상응하는 값으로 시프트 인(shift-in)하는 단계와, 상기 부분합 레지스터 및 델타 레지스터에 저장된 값을 시프트 아웃하는 단계를 포함하여 수행된다. 본 실시예는 단위 연산 요소들이 어레이로 연결된 신경망 가속기의 고장 검출 방법으로, 가중치 레지스터에 저 장된 가중치 값을 0에 상응하는 값으로 리셋하는 단계; 입력값 제공부가 입력 레지스터에 테스트 입력값을 제공 하고, 리셋된 상기 가중치와 상기 테스트 입력값의 곱셈 결과 및 이전 부분합을 합산한 부분합을 연산하여 부분 합 레지스터 및 델타 레지스터에 저장하는 단계와, 상기 부분합 레지스터 및 상기 가중치 레지스터를 리셋하는 단계와, 상기 가중치 제공부가 가중치 레지스터에 테스트 가중치를 제공하고, 상기 테스트 가중치로 부분합을 연산하는 단계 및 상기 테스트 가중치로 연산된 부분합을 스캔 아웃하여 상기 신경망 가속기의 고장을 검출하는 단계를 포함한다. 본 실시예의 어느 한 측면에서, 상기 델타 레지스터에 제공되는 클록은, 상기 부분합 레지스터에 제공되는 클록 에 비하여 반주기 늦은 클록이다. 본 실시예의 어느 한 측면에서, 상기 고장을 검출하는 단계는, 상기 스캔 아웃된 값이 상기 테스트 입력값에 서 로 상응하면 고장으로 파악하여 수행한다. 본 실시예의 어느 한 측면에서, 상기 고장을 검출하는 단계는, 상기 스캔 아웃된 값이 0 값에 상응하면 고장으 로 파악하여 수행한다. 본 실시예의 어느 한 측면에서, 상기 테스트 가중치로 연산된 부분합을 스캔 아웃하는 단계는, 상기 단위 연산 요소들에 저장된 가중치 값을 0에 상응하는 값으로 시프트 인(shift-in)하는 단계와, 상기 부분합 레지스터 및 델타 레지스터에 저장된 값을 시프트 아웃하는 단계를 포함하여 수행된다."}
{"patent_id": "10-2022-0134872", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 실시예에 의하면 적은 오버헤드로 높은 테스트 커버리지로 신경망 고장 검출이 가능하다는 장점이 제공된다."}
{"patent_id": "10-2022-0134872", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 첨부된 도면들을 참조하여 본 실시예를 설명한다. 도 1은 본 실시예에 의한 고장 검출이 가능한 신 경망 가속기의 실시예를 개요적으로 도시한 도면이다. 도 1을 참조하면, 신경망 가속기는 입력 값을 제공 하는 입력 제공부, 가중치 값을 제공하는 가중치 제공부와 제공된 입력값과 가중치의 MAC(multiply accumulation) 연산을 수행하는 단위 연산 요소를 포함한다. 도시된 실시예는 단위 연산 요소들이 4*4 어레이로 배치된 것을 도시하나, 도시되지 않은 실시예는 N*M(N, M: 자연수) 개의 단위 연산 요소들이 어레이로 배치되어 신경망 가속기를 형성할 수 있다. 도 2는 본 실시예에 의한 신경망 가속기에 포함된 단위 연산 요소들 일부의 개요를 도시한 도면이다. 도 2를 참조하면, 단위 연산 요소는 입력값을 제공받고 저장하는 입력 레지스터, 가중치를 제공받고 저장하는 가중치 레지스터 및 MAC 연산부를 포함한다. MAC 연산부는 입력값과 가중치값을 곱셈 연산하는 곱셈기와 이전 부분합을 제공받고 합산하여 부분합을 연산하여 출력하는 덧셈기를 포함한다. 단위 연산 요소는 MAC 연산부가 연산한 부분합과 이전 부분합을 제공받고 비교하는 비교기와 비교기의 비 교 결과에 따라 MAC 연산부가 연산한 부분합과 이전 부분합을 선택하여 출력하는 다중화기(MUX)를 포함한다. 다 중화기(MUX)의 출력은 부분합 레지스터 및 델타 레지스터에 저장된다. 일 실시예로, 신경망 가속기에 포함된 입력 레지스터, 가중치 레지스터, 부분합 레지스터 및 델타 레지스터는 시프트 레지스터(shift register)로 구현될 수 있다. 부분합 레지스터와 가중치 레지스터 에는 서로 다른 클록이 제공되어 독립하여 부분합과 가중치값을 기록할 수 있다. 델타 레지스터에는부분합 레지스터에 제공되는 클록이 반주기 지연된 클록이 제공될 수 있다. 일 실시예로, 신경망 가속기에 포함된 가중치 레지스터과 부분합 레지스터는 리셋 신호에 의하여 리셋될 수 있다. 리셋된 가중치 레지스터과 부분합 레지스터는 0에 상응하는 이진 값으로 리셋될 수 있다. 가중치 제공부가 제공한 가중치는 가중치 레지스터 120a를 거쳐 120b로 순차적으로 시프트 인(shift in)되 고, 입력 제공부가 제공한 입력은 입력 레지스터 110a를 거쳐 110c로 순차적으로 시프트 인(shift in)된다. 본 실시예에 의한 신경망 가속기는 신경망 가속기을 이루는 트랜지스터의 문턱 전압에 인접한 전압에서 동작한다. 신호의 전파 지연(propagation delay) 등에 의한 타이밍 오류가 발생할 수 있다. 일 실시예에서, 타 이밍 오류에 의하여 부분합 연산에서 오류가 발생하면, 부분합 레지스터(130a)와 델타 레지스터(140a)에 저장된 부분합이 서로 다를 수 있다. 상술한 바와 같이 델타 레지스터(140a)에는 부분합 레지스터(130a)에 비하여 반주 기 지연된 클록이 제공되므로 타이밍 오류가 없는 연산 결과가 저장된다. 단위 연산 요소(100b)에 포함된 비교기는 부분합 레지스터(130a)가 출력한 부분합과 델타 레지스터(140a)가 출 력한 부분합을 비교한다. 비교기는 두 부분합이 서로 상이하면 다중화기(MUX)가 델타 레지스터(140a)가 출력한 부분합을 출력하도록 다중화기를 제어한다. 이하에서는 도 3 내지 도 7을 참조하여 본 실시예에 의한 신경망 가속기의 고장 검출을 위한 동작을 설명한 다. 도 3은 일 실시예에 따른 신경망 가속기의 고장 검출 동작을 개요적으로 도시한 순서도이다. 도 3을 참조하 면, 신경망 가속기의 고장 검출 동작은 단위 연산 요소들에 저장된 가중치 값을 0에 상응하는 값으로 리셋 하고, 입력 제공부가 입력 레지스터에 테스트 입력값을 제공하는 단계(S100)와, 리셋된 가중치와 테스 트 입력값의 곱셈 결과 및 이전 부분합을 합산한 부분합을 연산하여 부분합 레지스터 및 델타 레지스터에 저장 하는 단계(S200)와, 가중치 제공부가 가중치 레지스터에 테스트 가중치를 제공하고, 테스트 가중치로 부분합을 연산하는 단계(S300) 및 테스트 가중치로 연산된 부분합을 스캔 아웃하여 신경망 가속기의 고장을 검출하는 단 계(S400)를 포함하여 수행된다. 도 4는 S100 단계를 개요적으로 도시한 도면이다. 이하, 도 4 내지 도 7 및 도 9 내지 도 11에서, 필요한 경우, 각 레지스터에 저장된 값을 도면으로 도시하였으며, 값의 이동 경로를 굵은 선으로 도시하였다. 도 1 내지 도 4 를 참조하면, 리셋 신호(Reset)를 제공하여 가중치 레지스터에 저장된 가중치 값을 0에 상응하는 값으로 리셋한다. 도 5는 S200 단계를 개요적으로 도시한 도면이다. 도 1 내지 도 5를 참조하면, 입력 레지스터는 입력 제공 부가 제공한 테스트 입력(Test Input)을 시프트 인 하여 순차적으로 저장한다. 일 실시예로, 어레이로 배치 된 단위 연산 요소들의 첫 행(R1)은 입력 제공부로부터 테스트 합(Test sum, 도 5 참조)이 제공되며, 이는 부분합으로 첫 행의 단위 연산 요소들에 제공된다. 곱셈기들은 가중치 레지스터에 저장된 값과 테스트 입력값을 곱셈 연산하나, 연산 결과는 0이다. 덧셈기는 이전 단위 연산 요소가 출력한 부분합값을 제공받고, 곱셈기의 곱셈 결과를 덧셈하여 부분합을 연산한다. 연산 된 부분합은 입력된 이전 부분합에 상응한다. 가중치값에 상응하는 0과 테스트 입력(Test Input)과의 곱셈 연산 결과는 0이다. 곱셈 연산 결과에 테스트 합을 덧셈하면 테스트 합(Test Sum)과 같다. 이와 같이 연산된 연산 결과는 굵은 선으로 표시된 경로를 따라 각 단위 연산 요소의 부분합 레지스터들과 델타 레지스터에 저장된다. 타이밍 오류가 발생하여 제공된 부분합이 서로 상응하지 않는 경우에는 상술한 바와 같이 비교기가 다중화기 (MUX)를 제어하여 정확한 연산 결과값이 저장된 델타 레지스터가 제공한 값을 출력하도록 선택하므로 타이 밍 오류에 의한 영향을 배제할 수 있다. 도 6은 S300 단계를 개요적으로 도시한 도면이다. 도 1 내지 도 6을 참조하면, 가중치 제공부가 가중치 레 지스터에 테스트 가중치(Test weight)를 제공하고, 테스트 가중치(Test weight)로 부분합(Partial Sum)을 연산한다. 부분합 연산은 테스트 가중치(Test weight)와 입력 레지스터에 저장된 테스트 입력(Test Input)을 곱 셈연산하고, 이전 단위 연산 요소에 포함된 부분합 레지스터가 출력한 부분합(Partial sum)을 곱셈 연산 결과에 합산하여 이루어지다. 각 단위 연산 요소들에서 연산된 부분합(Partial sum)은 각각의 부분합 레지스터 및 델타 레지스터에 저장된다. 도 7은 S400 단계를 개요적으로 도시한 도면이다. 도 1 내지 도 7을 참조하면, 테스트 가중치로 연산된 부분합 (Partial sum)을 스캔 아웃하여 신경망 가속기의 고장을 검출한다. 일 실시예로, 가중치 레지스터에 저장 된 가중치 값이 0이 아닌 값이면, 부분합 레지스터, 델타 레지스터에 저장된 부분합(Partial sum)을 시프트 아웃하여 스캔 아웃 할 때, 가중치 값과 곱셈연산이 이루어진다. 따라서, 스캔 아웃 과정에 앞서 가중치 레지스터에 저장된 값을 0에 상응하는 값으로 순차적으로 시프트 인하는 과정이 수행된다. 부분합 레지스터와 델타 레지스터에 저장된 부분합(Partial Sum) 값을 순차적으로 스캔아웃하고, 스 캔 아웃된 결과인 부분합과 입력된 테스트 합을 비교하여 신경망 가속기의 고장을 검출할 수 있다. 이하에서는 도 8 내지 도 11을 참조하여 다른 실시예에 의한 신경망 가속기의 고장 검출을 위한 동작을 설명 한다. 다만, 위에서 설명된 실시예와 동일하거나 유사한 요소에 대한 설명은 간결한 설명을 위해 생략될 수 있 다. 도 8은 다른 실시예에 따른 신경망 가속기의 고장 검출 동작을 개요적으로 도시한 순서도이다. 도 8을 참조 하면, 신경망 가속기의 고장 검출 동작은 단위 연산 요소들에 저장된 가중치 값을 0에 상응하는 값으로 리 셋하는 단계(S500)와, 입력 제공부가 입력 레지스터에 테스트 입력값을 제공하고, 리셋된 가중치와 테 스트 입력값의 곱셈 결과 및 이전 부분합을 합산한 부분합을 연산하여 부분합 레지스터 및 델타 레지스터에 저 장하는 단계(S600)와, 부분합 레지스터 및 가중치 레지스터를 리셋하는 단계(S700)와, 가중치 제공부 가 가중치 레지스터에 테스트 가중치를 제공하고, 상기 테스트 가중치로 부분합을 연산하는 단계(S800) 및 테스 트 가중치로 연산된 부분합을 스캔 아웃하여 신경망 가속기의 고장을 검출하는 단계(S900)를 포함하여 수행된다. S500 단계와 S600 단계는 각각 도 4 및 도 5로 예시된 단계와 동일하거나 유사한 단계로 수행될 수 있다. 도 9는 S700 단계를 개요적으로 도시한 도면이다. 도 1, 도 2, 도 4, 도 5, 도 8 및 도 9를 참조하면, S600 단 계의 결과로 입력 레지스터에는 테스트 입력(Test Input)이 저장되고, 부분합 레지스터 및 델타 레지 스터에는 테스트 합(Test Sum)이 저장된다. S700 단계에서 리셋 신호를 제공하여 가중치 레지스터와 부분합 레지스터가 리셋되므로, 각 단위 연산 요소의 가중치 레지스터와 부분합 레지스터에는 0 에 상응하는 값이 저장된다. 도 10은 S800 단계를 개요적으로 도시한 도면이다. 도 1, 도 2, 도 4, 도 5, 도 8 내지 도 10을 참조하면, 가중 치 제공부는 가중치 레지스터에 테스트 가중치(Test weight)를 제공한다. 곱셈기 테스트 입력(Test Input)과 테스트 가중치(Test Weight)를 곱셈 연산하고, 덧셈기는 곱셈 연산 결과값과 이전 부분합 레지스터에 서 출력한 0을 덧셈 연산한 결과를 부분합(Partial sum)으로 연산한다. 도시된 실시예와 같이 비교기가 정상 동작하면, 비교기는 이전 단위 연산 요소에 포함된 부분합 레지스터 가 출력한 0에 상응하는 값과 이전 단위 연산 요소에 포함된 델타 레지스터가 출력한 테스트 합(Test Su m)을 비교하여 서로 상이함에 상응하는 비교 결과를 신호를 출력하여 다중화기(MUX)를 제어한다. 따라서, 부분 합 레지스터와 델타 레지스터는 연산된 부분합(Partial Sum)을 저장한다. 그러나, 도시되지 않은 실시예에서 비교기에 고장이 있어 이전 단위 연산 요소에 포함된 부분합 레지스터 가 출력한 0에 상응하는 값과 이전 단위 연산 요소에 포함된 델타 레지스터가 출력한 테스트 합(Test Su m)을 비교하여 서로 동일함에 상응하는 비교 결과를 신호를 출력하면, 다중화기(MUX)는 이전 단위 연산 요소의 델타 레지스터가 출력한 테스트 합(Test Sum)을 출력하고, 부분합 레지스터와 델타 레지스터는 테스트 합(Test Sum)을 저장한다. 도 11은 S900 단계를 개요적으로 도시한 도면이다. 도 1, 도 2, 도 4, 도 5, 도 8 내지 도 11을 참조하면, 테스 트 가중치로 연산된 부분합(Partial sum)을 스캔 아웃하여 신경망 가속기의 고장을 검출한다. 일 실시예로, 가 중치 레지스터에 저장된 가중치 값이 0이 아닌 값이면, 부분합 레지스터, 델타 레지스터에 저장 된 부분합(Partial sum)을 시프트 아웃하여 스캔 아웃 할 때, 가중치 값과 곱셈연산이 이루어진다. 따라서, 스 캔 아웃 과정에 앞서 가중치 레지스터에 저장된 값을 0에 상응하는 값으로 순차적으로 시프트 인하는 과정 이 수행된다. 부분합 레지스터과 델타 레지스터에 저장된 부분합(Partial Sum) 값을 순차적으로 스캔아웃하고, 스 캔 아웃된 결과가 부분합에 상응하는지 혹은 테스트 합에 상응하는지 검토하여 신경망 가속기에 포함된 비교 기의 고장을 검출할 수 있다. 모의 실험예 아래의 표 1은 종래 기술들과 본 실시예의 모의실험 결과를 정리한 표이다. 표 1"}
{"patent_id": "10-2022-0134872", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "표 1을 참조하면, 본 실시예에 의한 테스트 방법을 효과를 확인하기 위해 모의 실험을 수행하였다. 실험을 통하 여 테스트 커버리지, 하드웨어 오버헤드, 테스트 시간을 비교하였다. 시스톨릭 배열 형태의 단위 연산 요소 구 조는 128 x 128, 256 x 256 등 다양한 크기를 이용하며, 크기에 따라 테스트를 진행할 수 있어야 한다. 본 실시예는 추가적인 하드웨어 없이 리셋을 이용한 테스트 알고리즘으로 단위 연산 요소 크기와 상관 없이 테 스트가 가능하다. 테스트는 고착 고장에 대한 테스트 패턴을 추출하여 진행하였고, 테스트 패턴은 단위 연산 요 소와 비교기 부분으로 나누어지며 테스트 커버리지는 100%를 얻었다. 표 1은 N x M의 단위 연산 요소 구조에서 저전압용 시스톨릭 배열 구조 테스트 방법들에 대한 비교한 결과를 도시한다. L은 스캔 체인의 길이를 나타내고 P는 테스트 패턴 수이며 P1는 단위 연산 요소 부분에 대한 테스트 패턴 수, P2는 비교기 부분에 대한 테스트 패 턴 수를 나타낸다. 테스트 시간은 단위 연산 요소의 크기에 따라 달라지며 종래 기술과 비교하여 리셋 동작 등 에 따른 싸이클이 더 추가된다. 하지만 하나의 단위 연산 요소에 대한 테스트 패턴을 이용하여 테스트 패턴 수가 적기 때문에 큰 차이가 없다. 하드웨어 오버헤드는 하나의 단위 연산 요소의 기본 구조 크기를 A로 나타내어 실험하였고, 삼성 SAED32nm 라이 브러리를 사용하여 합성 및 스캔 삽입 후 측정을 하였다. 제안하는 방법은 추가적인 하드웨어를 필요로 하지 않 기 때문에 제일 작고, 기존 저전압용 단위 연산 요소 시스톨릭 배열 구조와 동일하다. 본 발명에 대한 이해를 돕기 위하여 도면에 도시된 실시 예를 참고로 설명되었으나, 이는 실시를 위한 실시예로, 예시적인 것에 불과하며, 당해 분야에서 통상적 지식을 가진 자라면 이로부터 다양한 변형 및 균등한 타 실시 예가 가능하다는 점을 이해할 것이다. 따라서, 본 발명의 진정한 기술적 보호범위는 첨부된 특허청구범 위에 의해 정해져야 할 것이다."}
{"patent_id": "10-2022-0134872", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 실시예에 의한 고장 검출이 가능한 신경망 가속기의 실시예를 개요적으로 도시한 도면이다. 도 2는 본 실시예에 의한 신경망 가속기에 포함된 단위 연산 요소들 일부의 개요를 도시한 도면이다. 도 3은 일 실시예에 따른 신경망 가속기의 고장 검출 동작을 개요적으로 도시한 순서도이다. 도 4 내지 도 7은 본 실시예의 고장 검출 동작들을 개요적으로 도시한 도면들이다. 도 8은 다른 실시예에 따른 신경망 가속기의 고장 검출 동작을 개요적으로 도시한 순서도이다. 도 9 내지 도 11은 다른 실시예의 고장 검출 동작들을 개요적으로 도시한 도면들이다."}
