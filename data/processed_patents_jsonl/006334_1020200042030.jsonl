{"patent_id": "10-2020-0042030", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0124688", "출원번호": "10-2020-0042030", "발명의 명칭": "데이터 처리 시스템, 이를 위한 메모리 컨트롤러 및 그 동작 방법", "출원인": "에스케이하이닉스 주식회사", "발명자": "최규현"}}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "메모리 모듈; 및호스트의 요청에 따라 상기 메모리 모듈과 데이터를 교환하는 컨트롤러;를 포함하고,상기 컨트롤러는, 상기 호스트가 처리 요청한 어플리케이션의 종류에 따라 제 1 동작 모드 또는 제 2 동작 모드로 동작하고,상기 제 1 동작 모드에서, 상기 호스트로부터 제 1 메시지 비트 라이트 요청이 전송됨에 따라, 상기 제 1 메시지 비트의 일부인 제 1 데이터 그룹에 대해서만 오류 정정용 제 1 메타 비트를 생성하고, 상기 제 1 메시지 비트 및 상기 제 1 메타 비트를 포함하는 제 1 데이터 청크를 구성하여 상기 메모리 모듈로 전송하도록 구성되는데이터 처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 컨트롤러는 상기 제 1 동작 모드에서, 상기 호스트로부터 제 1 메시지 비트 리드 요청이 전송됨에 따라,상기 메모리 모듈로부터 상기 제 1 데이터 청크를 수신하여 상기 제 1 메타 비트로 상기 제 1 데이터 그룹의 오류를 정정하여 리드 데이터를 생성하고 상기 호스트로 전송하도록 구성되는 데이터 처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 제 1 데이터 그룹은 제 1 서브 데이터 그룹 및 제 2 서브 데이터 그룹을 포함하도록 구성되는 데이터 처리시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서,상기 제 1 메타 비트는 상기 제 1 서브 데이터 그룹에 대한 제 1 서브 메타 비트 및 상기 제 2 서브 데이터 그룹에 대한 제 2 서브 메타 비트를 포함하도록 구성되는 데이터 처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 컨트롤러는, 상기 제 1 메시지 비트의 나머지인 제 2 데이터 그룹은 상기 제 1 메타 비트 생성에 개입하지않도록 제어하는 데이터 처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 제 1 데이터 그룹은 상기 제 1 메시지 비트의 중 설정된 수의 상위 비트인 데이터 처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 1 항에 있어서,상기 제 1 동작 모드는 신경망 연산을 포함하는 인공지능 어플리케이션 처리 모드인 데이터 처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "공개특허 10-2021-0124688-3-제 7 항에 있어서,상기 신경망 연산에 사용되는 가중치는,부호, 정수부 및 소수부로 구분되는 고정 소수점 형태, 또는 부호, 지수 및 가수로 구분되는 부동 소수점 형태이고,상기 제 1 데이터 그룹은 상기 고정 소수점 형태 가중치의 부호 및 정수부를 포함하고, 상기 부동 소수점 형태가중치의 부호 및 지수를 포함하는 데이터 처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 1 항에 있어서,상기 컨트롤러는, 상기 제 2 동작 모드에서, 상기 호스트로부터 제 2 메시지 비트 라이트 요청이 전송됨에따라, 상기 제 2 메시지 비트 전체에 대해 오류 정정용 제 2 메타 비트를 생성하고, 상기 제 2 메시지 비트 및상기 제 2 메타 비트를 포함하는 제 2 데이터 청크를 구성하여 상기 메모리 모듈로 전송하도록 구성되는 데이터처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 9 항에 있어서,상기 컨트롤러는 상기 제 2 동작 모드에서, 상기 호스트로부터 제 2 메시지 비트 리드 요청이 전송됨에 따라,상기 메모리 모듈로부터 상기 제 2 데이터 청크를 수신하여 상기 제 2 메타 비트로 상기 제 2 메시지 비트의 오류를 정정하여 리드 데이터를 생성하고 상기 호스트로 전송하도록 구성되는 데이터 처리 시스템."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "호스트의 요청에 따라 메모리 모듈과 데이터를 교환하는 메모리 컨트롤러로서,상기 호스트로부터 전송된 메시지 비트에 기초하여 메타 비트를 생성하고, 상기 메시지 비트 및 상기 메타 비트를 포함하는 데이터 청크를 상기 메모리 모듈로 전송하여 저장하도록 하며,상기 메시지 비트는 상기 메타 비트 생성에 사용되는 제 1 부분 및 상기 메타 비트 생성에 선택적으로 사용되는제 2 부분을 포함하도록 구성되는 메모리 컨트롤러."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서,상기 메모리 컨트롤러는,상기 호스트가 처리 요청한 어플리케이션의 종류에 따라 제 1 동작 모드 또는 제 2 동작 모드 중 하나의 동작모드를 설정하는 모드 관리부;상기 설정된 동작 모드 및 상기 호스트의 요청에 기초하여, 오류 검출 및 정정(Error Check and Correction;ECC) 장치를 구동하고 상기 메모리 모듈로 커맨드를 전송하는 리퀘스트 처리부; 및상기 제 1 동작 모드로 설정된 경우 상기 제 1 부분에 대한 제 1 메타 비트로 오류 검출 및 정정을 수행하는 상기 ECC 장치;를 포함하도록 구성되는 메모리 컨트롤러."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 12 항에 있어서,상기 ECC 장치는, 상기 제 2 동작 모드로 설정된 경우 상기 제 1 부분 및 상기 제 2 부분을 포함하는 상기 메시지 비트에 대한 제 2 메타 비트로 오류 검출 및 정정을 수행하도록 구성되는 메모리 컨트롤러."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "공개특허 10-2021-0124688-4-제 11 항에 있어서,상기 제 1 부분은 제 1 서브 데이터 그룹 및 제 2 서브 데이터 그룹을 포함하도록 구성되는 메모리 컨트롤러."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 14 항에 있어서,상기 제 1 메타 비트는 상기 제 1 서브 데이터 그룹에 대한 제 1 서브 메타 비트 및 상기 제 2 서브 데이터 그룹에 대한 제 2 서브 메타 비트를 포함하도록 구성되는 메모리 컨트롤러."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 11 항에 있어서,상기 제 1 동작 모드는 신경망 연산을 포함하는 인공지능 어플리케이션 처리 모드인 메모리 컨트롤러."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 16 항에 있어서,상기 신경망 연산에 사용되는 가중치는,부호, 정수부 및 소수부로 구분되는 고정 소수점 형태, 또는 부호, 지수 및 가수로 구분되는 부동 소수점 형태이고,상기 제 1 데이터 그룹은 상기 고정 소수점 형태 가중치의 부호 및 정수부를 포함하고, 상기 부동 소수점 형태가중치의 부호 및 지수를 포함하는 메모리 컨트롤러."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "호스트의 요청에 따라 메모리 모듈과 데이터를 교환하는 메모리 컨트롤러의 동작 방법으로서,상기 호스트가 처리 요청한 어플리케이션의 종류에 따라 제 1 동작 모드 또는 제 2 동작 모드 중 하나의 동작모드를 설정하는 단계;상기 호스트로부터 메시지 비트 라이트 요청이 전송됨에 따라, 상기 동작 모드를 판단하는 단계;상기 제 1 동작 모드로 판단되는 경우, 상기 메시지 비트의 일부인 제 1 데이터 그룹에 대해서만 오류 정정용제 1 메타 비트를 생성하는 단계; 및상기 메시지 비트 및 상기 제 1 메타 비트를 포함하는 제 1 데이터 청크를 상기 메모리 모듈로 전송하는 단계;를 포함하도록 구성되는 메모리 컨트롤러의 동작 방법."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 18 항에 있어서,상기 호스트로부터 메시지 비트 리드 요청이 전송됨에 따라, 상기 메모리 모듈로부터 상기 제 1 데이터 청크를수신하는 단계;상기 동작 모드를 판단하는 단계; 및상기 제 1 동작 모드로 판단되는 경우 상기 제 1 메타 비트로 상기 제 1 데이터 그룹의 오류를 정정하여 리드데이터를 생성하고 상기 호스트로 전송하는 단계;를 더 포함하도록 구성되는 메모리 컨트롤러의 동작 방법."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 18 항에 있어서,상기 제 2 동작 모드로 판단되는 경우, 상기 메시지 비트에 대해 오류 정정용 제 2 메타 비트를 생성하는 단계;및공개특허 10-2021-0124688-5-상기 메시지 비트 및 상기 제 2 메타 비트를 포함하는 제 2 데이터 청크를 상기 메모리 모듈로 전송하는 단계;를 포함하도록 구성되는 메모리 컨트롤러의 동작 방법."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제 20 항에 있어서,상기 호스트로부터 메시지 비트 리드 요청이 전송됨에 따라, 상기 메모리 모듈로부터 상기 제 2 데이터 청크를수신하는 단계;상기 동작 모드를 판단하는 단계; 및상기 제 2 동작 모드로 판단되는 경우 상기 제 2 메타 비트로 상기 메시지 비트의 오류를 정정하여 리드 데이터를 생성하고 상기 호스트로 전송하는 단계;를 더 포함하도록 구성되는 메모리 컨트롤러의 동작 방법."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제 18 항에 있어서,상기 제 1 데이터 그룹은 제 1 서브 데이터 그룹 및 제 2 서브 데이터 그룹을 포함하고,상기 제 1 메타 비트를 생성하는 단계는, 상기 제 1 서브 데이터 그룹에 대한 제 1 서브 메타 비트 및 상기 제2 서브 데이터 그룹에 대한 제 2 서브 메타 비트를 생성하는 단계를 포함하도록 구성되는 메모리 컨트롤러의 동작 방법."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제 18 항에 있어서,상기 제 1 메타 비트를 생성하는 단계, 상기 메시지 비트의 상기 제 1 데이터 그룹을 제외한 나머지인 제 2 데이터 그룹은 상기 제 1 메타 비트 생성에 개입하지 않도록 제어하는 단계인 메모리 컨트롤러의 동작 방법."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제 18 항에 있어서,상기 제 1 데이터 그룹은 상기 메시지 비트의 중 설정된 수의 상위 비트인 메모리 컨트롤러의 동작 방법."}
{"patent_id": "10-2020-0042030", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_25", "content": "제 1 항에 있어서,상기 제 1 동작 모드는 신경망 연산을 포함하는 인공지능 어플리케이션 처리 모드인 메모리 컨트롤러의 동작 방법."}
{"patent_id": "10-2020-0042030", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 기술의 일 실시예에 의한 데이터 처리 시스템은 메모리 모듈 및, 호스트의 요청에 따라 메모리 모듈과 데이터 를 교환하는 컨트롤러를 포함하고, 컨트롤러는, 호스트가 처리 요청한 어플리케이션의 종류에 따라 제 1 동작 모 드 또는 제 2 동작 모드로 동작하고 제 1 동작 모드에서, 호스트로부터 제 1 메시지 비트 라이트 요청이 전송됨 에 따라, 제 1 메시지 비트의 일부인 제 1 데이터 그룹에 대해서만 오류 정정용 제 1 메타 비트를 생성하고, 제 1 메시지 비트 및 제 1 메타 비트를 포함하는 제 1 데이터 청크를 구성하여 메모리 모듈로 전송하도록 구성될 수 있다."}
{"patent_id": "10-2020-0042030", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 기술은 반도체 집적 장치에 관한 것으로, 보다 구체적으로는 데이터 처리 시스템, 이를 위한 메모리 컨트롤 러 및 그 동작 방법에 관한 것이다."}
{"patent_id": "10-2020-0042030", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 어플리케이션 및 빅데이터 분석에 대한 관심과 중요성이 높아지면서, 대용량의 데이터를 효율적으로 처리할 수 있는 컴퓨팅 시스템에 대한 요구가 증가하고 있다. 전통적인 컴퓨팅 시스템이 프로세서 중심 컴퓨팅에 집중하였다면, 최근의 컴퓨팅 시스템은 방대한 데이터를 고 속으로 병렬 처리할 수 있는 데이터 중심 컴퓨팅, 또는 메모리 중심 컴퓨팅으로 진화하였다. 이에 따라 프로세 서와 메모리 간의 데이터 병목 현상을 줄일 수 있어 연산 성능이 극대화되고 있다.하지만 컴퓨팅 장치의 성능 및 속도 향상은 에너지 소비량의 증가와 발열을 유발할 수 있다."}
{"patent_id": "10-2020-0042030", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 기술의 실시예는 불필요한 전력 소모를 줄여 전력 효율을 극대화하면서도 처리 성능이 우수한 데이터 처리 시스템과 이를 위한 메모리 컨트롤러 및 그 동작 방법을 제공할 수 있다."}
{"patent_id": "10-2020-0042030", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 기술의 일 실시예에 의한 데이터 처리 시스템은 메모리 모듈; 및 호스트의 요청에 따라 상기 메모리 모듈과 데이터를 교환하는 컨트롤러;를 포함하고, 상기 컨트롤러는, 상기 호스트가 처리 요청한 어플리케이션의 종류에 따라 제 1 동작 모드 또는 제 2 동작 모드로 동작하고, 상기 제 1 동작 모드에서, 상기 호스트로부터 제 1 메시 지 비트 라이트 요청이 전송됨에 따라, 상기 제 1 메시지 비트의 일부인 제 1 데이터 그룹에 대해서만 오류 정 정용 제 1 메타 비트를 생성하고, 상기 제 1 메시지 비트 및 상기 제 1 메타 비트를 포함하는 제 1 데이터 청크 를 구성하여 상기 메모리 모듈로 전송하도록 구성될 수 있다. 본 기술의 일 실시예에 의한 메모리 컨트롤러는 호스트의 요청에 따라 메모리 모듈과 데이터를 교환하는 메모리 컨트롤러로서, 상기 호스트로부터 전송된 메시지 비트에 기초하여 메타 비트를 생성하고, 상기 메시지 비트 및 상기 메타 비트를 포함하는 데이터 청크를 상기 메모리 모듈로 전송하여 저장하도록 하며, 상기 메시지 비트는 상기 메타 비트 생성에 사용되는 제 1 부분 및 상기 메타 비트 생성에 선택적으로 사용되는 제 2 부분을 포함하 도록 구성될 수 있다. 본 기술의 일 실시예에 의한 메모리 컨트롤러의 동작 방법은 호스트의 요청에 따라 메모리 모듈과 데이터를 교 환하는 메모리 컨트롤러의 동작 방법으로서, 상기 호스트가 처리 요청한 어플리케이션의 종류에 따라 제 1 동작 모드 또는 제 2 동작 모드 중 하나의 동작 모드를 설정하는 단계; 상기 호스트로부터 메시지 비트 라이트 요청 이 전송됨에 따라, 상기 동작 모드를 판단하는 단계; 상기 제 1 동작 모드로 판단되는 경우, 상기 메시지 비트 의 일부인 제 1 데이터 그룹에 대해서만 오류 정정용 제 1 메타 비트를 생성하는 단계; 및 상기 메시지 비트 및 상기 제 1 메타 비트를 포함하는 제 1 데이터 청크를 상기 메모리 모듈로 전송하는 단계;를 포함하도록 구성될 수 있다."}
{"patent_id": "10-2020-0042030", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 기술에 의하면, 데이터 청크를 구성하는 메시지 비트 중 어플리케이션의 처리 정확도를 좌우하는 중요 데이 터를 손상으로부터 집중적으로 보호할 수 있다. 따라서, 메시지 비트 전체를 대상으로 에러를 검출하고 정정하는 경우에 비하여, 중요 데이터에 대한 에러 복구 성능을 향상시킬 수 있다. 결국, 메시지 비트를 유지하기 위한 메모리 모듈의 리프레쉬 주기를 증가시켜 전력 소모량을 현저히 감소시킬 수 있다."}
{"patent_id": "10-2020-0042030", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 기술의 실시예를 보다 구체적으로 설명한다. 도 1은 일 실시예에 의한 데이터 처리 시스템을 포함하는 전자 장치의 구성도이다. 도 1을 참조하면, 일 실시예에 의한 전자 장치는 호스트 및 이와 통신하는 데이터 처리 시스템을 포함할 수 있다. 호스트는 데이터 처리 시스템으로 데이터 처리와 관련된 제어신호(CON), 요청(REQ), 어드레스(ADD), 그리고 필요에 따라 데이터(DATA)를 전송할 수 있다. 데이터 처리 시스템은 호스트의 제어신호 (CON), 요청(REQ), 어드레스(ADD) 및 데이터(DATA)에 응답하여 요청(REQ)에 대응하는 동작을 수행하고, 처리 결 과로 도출된 데이터(DATA)를 호스트로 전송할 수 있다. 데이터 처리 시스템과 호스트 간에 송수신되는 데이터(DATA)의 양이 증가함에 따라, 호스트는 데이터 처리 시스템에 의존하여 연산을 처리할 수 있다. 즉, 데이터 처리 시스템은 단순한 데이터의 저장이나 출력 뿐 아니라 자체적으로 데이터(DATA)를 연산하도록 구성될 수 있다. 데이터 처리 시스템은 슈퍼컴퓨터 또는 컴퓨터 클러스터를 사용하여 협력적인 방식으로 고급 연산을 수행 하는 고성능 컴퓨팅(High Performance Computing: HPC) 장치, 또는 개별적으로 데이터(DATA)를 처리하는 네트 워킹된 정보 처리 장치들 또는 서버들의 어레이를 포함할 수 있다. 데이터 처리 시스템은 데이터(DATA)를 저장 또는 연산하고, 연산된 데이터(DATA)를 출력하도록 복수의 데 이터 처리 장치를 포함할 수 있다. 데이터 처리 시스템을 구성하는 데이터 처리 장치는 적어도 하나의 서버 컴퓨터, 또는 서버 컴퓨터 각각을 구성하는 적어도 하나의 랙(Rack), 또는 각각의 랙을 구성하는 적어도 하나의 보드를 포함할 수 있다. 이와 같이, 데이터 처리 시스템은 정보 처리 성능을 향상시키기 위해 복수의 데이터 처리 장치를 포함하고, 각 데이터 처리 장치는 상호 간에 데이터를 송수신 또는 공유할 수 있도록 전기적으로 네트워킹될 수 있다. 도 2는 일 실시예에 의한 데이터 처리 시스템의 구성도이다. 도 2를 참조하면, 일 실시예에 의한 데이터처리 시스템은 컨트롤러 및 메모리 풀을 포함할 수 있다. 컨트롤러는 메모리 풀과 접속되어 메모리 풀에 대한 데이터 입출력을 제어할 수 있다. 컨트롤 러는 호스트의 요청(REQ)으로부터 명령(CMD)을 생성하여 생성된 명령(CMD)에 따라 메모리 풀과 협력하여 데이터를 처리할 수 있다. 데이터를 처리한다는 것은, 메모리 풀에 저장된 데이터를 리드하는 동작, 리드한 데이터에 기초하여 연산하는 동작, 연산된 데이터를 호스트 또는 메모리 풀로 제공하는 동작을 포함할 수 있다. 메모리 풀은 컨트롤러의 제어에 따라 데이터를 저장하거나 저장된 데이터를 출력할 수 있다. 메모리 풀은 복수의 메모리 모듈을 포함할 수 있고, 페이지(바이트) 단위로 접근 가능하게 구성될 수 있다. 즉, 컨트롤러는 메모리 풀에 페이지 단위로 접근할 수 있다. 일 실시예에서, 컨트롤러는 호스트 인터페이스, ROM, RAM, 메모리 컨트롤러 및 적 어도 하나의 프로세서를 포함할 수 있다. 호스트 인터페이스는 호스트와 컨트롤러 간의 인터페이스를 제공할 수 있다. 호스트 인터페이 스는 호스트로부터 제공되는 커맨드를 저장 및 스케쥴링하여 프로세서로 제공할 수 있다. 호스 트 인터페이스는 호스트로부터 제공되는 라이트 데이터를 메모리 컨트롤러로 제공하거나, 메모 리 풀로부터 메모리 컨트롤러를 통해 제공된 리드 데이터 또는 프로세서에서 출력되는 데이터를 호스트로 제공할 수 있다. ROM은 컨트롤러의 동작에 필요한 프로그램 코드, 예를 들어 펌웨어 또는 소프트웨어가 저장되고, 프 로그램 코드들이 이용하는 코드 데이터 등이 저장될 수 있다. RAM은 컨트롤러의 동작에 필요한 데이터 또는 컨트롤러에 의해 생성된 데이터를 저장할 수 있 다. 메모리 컨트롤러는 호스트 인터페이스로부터 제공된 데이터를 메모리 풀으로 전송하거나, 메모 리 풀에서 리드한 데이터를 전달받아 호스트 인터페이스 또는 프로세서로 제공할 수 있다. 프로세서은 복수의 코어를 포함할 수 있으며, 메모리 풀와 데이터를 교환하면서 호스트로부터 오프로드 처리 요청된 어플리케이션의 프로그램 코드를 연산할 수 있다. 오프로드란 호스트의 연산을 다 른 장치, 예를 들어 데이터 처리 시스템으로 위임하는 것을 의미한다. 빅 데이터 분석, 머신 러닝 등과 같은 어플리케이션은 방대한 양의 데이터를 대상으로 하는 연산을 요구한다. 이러한 요구에 따라 호스트의 연산을 컴퓨팅 엔진, 즉 프로세서에 위임하여 처리할 수 있는 데이터 처리 장치에 대한 연구가 이루어지고 있다. 이러한 전자 장치에서 호스트는 방대한 양의 데이터 연산을 데이터 처리 시스템에서 수행하는 동안 다른 작업을 할 수 있어 작업 효율이 향상될 수 있다. 일 실시예에서, 호스트는 어플리케이션의 오프로드 처리 요청시 데이터 처리 시스템으로 초기 파라미 터를 전송하여 메모리 풀에 저장할 수 있다. 프로세서는 메모리 풀에 저장된 초기 파라미터를 리드하여 어플리케이션의 프로그램 코드를 실행, 즉 연산할 수 있다. 메모리 컨트롤러는 메모리 풀과 교환되는 데이터의 정확도를 보장하기 위한 ECC 장치를 포함할 수 있다. ECC 장치는 호스트 또는 프로세서로부터 제공되는 데이터(메시지 비트)를 설정된 방식으로 인코 딩하여 메모리 풀에 저장하고, 메모리 풀로부터 리드된 데이터를 설정된 방식으로 디코딩하여 호스트 또는 프로세서로 제공할 수 있다. 일 실시예에서, 데이터 라이트 동작시. ECC 장치는 메시지 비트로부터 메타 비트 즉, 패리티 비트를 생성하고, 메시지 비트와 패리티 비트를 포함하는 데이터 청크를 메모 리 풀에 저장할 수 있다. 데이터 리드 동작시 ECC 장치는 메모리 풀로부터 리드된 데이터 청크 에 포함된 메타 비트에 기초하여 메시지 비트로부터 에러를 검출하고 정정할 수 있다. 일 실시예에서, ECC 장치는 데이터 청크로부터 적어도 2비트의 에러를 검출하고 적어도 1비트의 에러를 정 정(Single Error Correction Double Error Detection; SECDED)할 수 있는 오류 정정 코드를 사용할 수 있다. 일 실시예에서, 오류 정정 코드는 해밍 코드(Hamming code)일 수 있으나 이에 한정되는 것은 아니다. 데이터 처리 시스템은 호스트가 처리 요청한 어플리케이션의 종류에 따라 제 1 동작 모드 또는 제 2 동작 모드로 동작할 수 있다. 제 1 동작 모드는 어플리케이션의 처리 과정에서 생성되는 데이터의 일부는 정확도가 보장되어야 하는 \"메이저 데이터\"이고 일부는 소실되어도 무방한 \"마이너 데이터\"를 포함하는 가속 어플리케이션 처리 모드일 수 있다. 가속 어플리케이션은 예를 들어 딥 러닝과 같은 신경망 연산을 수반하는 인공 지능 어플리케이션일 수 있다. 제 2 동작 모드는 어플리케이션의 처리 과정에서 생성되는 데이터가 전체적으로 메이저 데이터인 어플리케이션 처리 모드일 수 있다. 컨트롤러는 호스트로부터 전송되는 제어 신호(CON)에 기초하여 메모리 컨트롤러를 제 1 동작 모 드 또는 제 2 동작 모드로 설정할 수 있다. 제 1 동작 모드로 설정된 경우, 메모리 컨트롤러는 호스트 또는 프로세서로부터 메시지 비트의 라이트 요청이 전송됨에 따라, 메시지 비트의 일부인 제 1 데이터 그룹에 대해서만 오류 정정용 메타 비트를 생 성하여, 메시지 비트 및 메타 비트를 포함하는 데이터 청크를 구성하고, 데이터 청크를 포함하는 라이트 커맨드 를 상기 메모리 풀로 전송할 수 있다. 제 1 동작 모드로 설정된 경우, 메모리 컨트롤러는 호스트 또는 프로세서로부터 리드 요청이 전 송됨에 따라, 메모리 풀로부터 수신된 데이터 청크에 포함된 제 1 데이터 그룹의 오류를 메타 비트에 기초 하여 정정하여 리드 데이터를 생성하고, 호스트 또는 프로세서로 전송할 수 있다. 제 2 동작 모드로 설정된 경우, 메모리 컨트롤러는 호스트 또는 프로세서로부터 메시지 비트의 라이트 요청이 전송됨에 따라, 메시지 비트 전체에 대한 오류 정정용 메타 비트를 생성하여 데이터 청크를 구성하고 메모리 풀에 저장할 수 있다. 아울러, 제 2 동작모드에서 메모리 컨트롤러는 호스트 또는 프로세서로부터 리드 요청이 전송됨 에 따라, 메모리 풀로부터 데이터 청크를 수신하여 메시지 비트 전체의 오류를 메타 비트로 정정하여 리드 데이터를 생성하고 호스트 또는 프로세서로 전송할 수 있다. 다른 관점에서, 메모리 컨트롤러는 호스트 또는 프로세서로부터 메타 비트 생성에 사용되는 제 1 부분 및 상기 메타 비트 생성에 사용되지 않는 제 2 부분으로 구분되는 메시지 비트가 전송됨에 따라 메타 비 트를 생성하고, 메시지 비트 및 메타 비트를 포함하는 데이터 청크를 메모리 풀에 저장할 수 있다. 도 3은 일 실시예에 의한 메모리 풀의 구성도이다. 일 실시예에서, 메모리 풀은 복수의 메모리 모듈(120-1~120-N)을 포함할 수 있다. 각각의 메모리 모듈(300-1~300-N)은 복수의 뱅크 그룹(BG-0~BG-M)을 포함할 수 있다. 복수의 뱅크 그룹(BG- 0~BG-M)은 각각 복수의 뱅크(BANK)를 포함할 수 있다. 각각의 뱅크(BANK)는 복수의 로우라인(ROW)(또는 워드라 인) 및 복수의 컬럼 라인(COLUMN)(또는 비트라인) 간에 각각 접속되는 복수의 메모리 셀(Cell)들을 포함하며, 예를 들어 하나의 워드라인에 접속되는 메모리 셀들이 하나의 페이지를 이룰 수 있다. 메모리 모듈(120-1~120-N)은 휘발성 메모리 모듈을 포함할 수 있고, 이에 더하여 비휘발성 메모리 모듈을 더 포 함할 수 있다 휘발성 메모리 모듈은 예를 들어 DRAM(Dynamic Random Access Memory) 및/또는 SRAM(Static Random Access Memory)을 포함하도록 구성될 수 있다. 비휘발성 메모리 모듈은 예를 들어 EEPROM(Electrically Erasable and Programmable ROM), 낸드(NAND) 플래시 메모리, 노어(NOR) 플래시 메모리, PRAM(Phase-Change RAM), ReRAM(Resistive RAM) FRAM(Ferroelectric RAM), STT-MRAM(Spin Torque Transfer Magnetic RAM)중 적어도 하 나를 포함하도록 구성될 수 있다. 일 실시예에서, 메모리 모듈(120-1~120-N) 각각은 모듈 보드 상에 장착된 다수의 메모리 칩들을 포함하는 SIMM(single in-line memory module) 또는 DIMM(dual inline memory module) 형태의 메모리 모듈 또는, 고 대 역폭 메모리(high bandwidth memory, HBM)일 수 있다. HBM 모듈은 인터포저(Interposer) 상에 장착된 복수의 HBM들 및 적어도 하나의 하드웨어 가속기를 포함할 수 있다. 일 실시예에서, 메모리 모듈(120-1~120-N)은 모듈 보드 상에 컨트롤러를 포함하는 형태로, 또는 HBM 모듈의 경우 베이스 다이에 컨트롤러를 포함하는 형태로 구성될 수 있다. 도 1 내지 도 3에 도시한 데이터 처리 시스템의 컨트롤러는 호스트로부터 제공되는 제어 신호 (CON)에 따라 메모리 풀로부터 입력 데이터 및 초기 가중치를 리드하고 내부 메모리에 로딩하여 프로그램 코드를 실행, 즉 연산할 수 있다. 어플리케이션 프로그램 코드는 호스트의 메모리 또는 메모리 풀에 저장될 수 있다. 어플리케이션의 프로그램 코드를 실행함에 따라 생성된 데이터들은 메모리 풀에 저장될 수 있다. 일 실시예에서, 호스트는 데이터 처리 시스템으로 기계학습이나 인공지능 어플리케이션, 예를 들어 신경망 연산을 오프로드하여 처리할 것을 요청할 수 있다. 신경망 연산을 처리하는 동안 사용되는 데이터들, 예를 들어 가중치는 신경망 모델에 포함된 레이어 별로 구분되어 메모리 풀 내에 저장되고 연산에 재사용 될 수 있다. 인공지능 어플리케이션에 사용되는 딥 러닝 알고리즘은 훈련(training) 과정 및 추론(inference) 과정으로 구분 될 수 있다. 훈련 과정은 입력 데이터를 통해 모델을 학습하는 과정이고, 추론 과정은 학습된 모델로 인식 등의 서비스를 수 행하는 과정일 수 있다. 딥 러닝 알고리즘은 자체적으로 결함 허용(fault tolerance) 특성을 가지고 있다. 따라서, 추론 과정에서는 연 산 속도를 빠르게 하고 메모리 사용량을 줄이기 위해 가중치의 정확도를 일부러 감소시키는 양자화 (Quantization) 기법을 사용한다. 이에 따라 일부 데이터가 손실되더라도 추론 결과를 도출하는 정확도에 큰 영향을 미치지 않는 것이 확인되었다. 본 기술에서는 어플리케이션의 처리 과정에서 생성되는 데이터의 일부는 \"메이저 데이터\"이고 일부는 \"마이너 데이터\"를 포함하는 어플리케이션 처리 모드(제 1 동작 모드)에서, 데이터의 중요도에 따라 가변적인 에러 정정을 수행할 수 있다. 예를 들어, 딥러닝 알고리즘 연산에 사용되는 가중치의 소수 부분과 같은 마이너 데이터는 에러 정정 코드에 의해 보호하지 않고, 가중치의 메이저 데이터만을 에러 정정 코드에 의해 집중적으로 보호할 수 있다. 일 실시예에서, 딥러닝 알고리즘 연산에 사용되는 가중치는 고정 소수점 또는 부동 소수점 형태일 수 있다. 고 정 소수점 형태의 가중치는 부호, 정수부 및 소수부로 구분되고, 이 경우 부호 및 정수부가 메이저 데이터로 선 택될 수 있다. 부동 소수점 형태의 가중치는 부호, 지수 및 가수로 구분되고, 이 경우 부호 및 지수가 메이저 데이터로 선택될 수 있다. 이에 따라, 메시지 비트 전체를 대상으로 에러를 검출하고 정정하는 경우에 비하여, 메이저 데이터에 대한 에러 복구 성능을 향상시킬 수 있다. 딥러닝 알고리즘의 연산에 파생되는 데이터를 저장하기 위해 DRAM이 사용되고 있다. DRAM은 데이터를 유지하기 위해서 데이터 보유 시간(Retention time)이 지나기 전 리프레쉬 동작을 수행한다. 리프레쉬 동작은 DRAM 공정이 미세화되고 메모리 용량이 증가할수록 많은 전력과 에너지를 소모하며, 리프레쉬 동작이 수행 중인 뱅크에서는 다른 동작을 수행할 수 없어 전체 DRAM 성능에도 악영향을 미친다. 본 기술에 의하면 메이저 데이터에 대한 에러 복구 성능이 담보된다. 따라서, 메시지 비트를 유지하기 위한 메 모리 모듈의 리프레쉬 주기를 증가시켜 전력 소모량을 현저히 감소시킬 수 있다. 도 4는 일 실시예에 의한 메모리 컨트롤러의 구성도이다. 도 4를 참조하면, 일 실시예에 의한 메모리 컨트롤러는 모드 관리부, 리퀘스트 처리부, 레지 스터(1175 및 ECC 장치를 포함할 수 있다. ECC 장치는 제 1 ECC 회로 및 제 2 ECC 회로를 포함할 수 있다. 모드 관리부는 호스트 또는 프로세서로부터 전송된 제어신호(CON)에 따라 메모리 컨트롤러 의 동작 모드를 설정할 수 있다. 일 실시예에서, 동작 모드는 어플리케이션의 처리 과정에서 생성되는 데 이터의 일부는 정확도가 보장되어야 하는 \"메이저 데이터\"이고 일부는 소실되어도 무방한 \"마이너 데이터\"를 포 함하는 가속 어플리케이션 처리 모드인 제 1 동작 모드, 또는 어플리케이션의 처리 과정에서 생성되는 데이터가 전체적으로 메이저 데이터인 어플리케이션 처리 모드인 제 2 동작 모드 중 어느 하나일 수 있다. 일 실시예에서, 호스트 또는 프로세서는 메모리 모드 관리부로 모드 설정 플래그 또는 모드 설 정 커맨드를 전송하여 동작 모드를 설정할 수 있다. 모드 설정 플래그 또는 모드 설정 커맨드는 메모리 풀 전체에 대해 동일한 ECC 정책을 적용하도록 구성될 수 있다. 다른 실시예에서, 모드 설정 플래그 또는 모드 설정 커맨드는 메모리 풀 내의 메모리 모듈 별로, 또는 메모리 모듈 내 메모리 뱅크 별로 별도의 ECC 정책을 적용하도록 구성될 수 있다. 리퀘스트 처리부는 호스트로부터 전송된 리퀘스트(REQ)를 레지스터에 저장할 수 있다. 그리 고, 모드 관리부에 설정된 동작 모드(MODE)에 기초하여 ECC 장치를 구동하는 한편, 리퀘스트(REQ)를 파싱(parsing)하여 메모리 풀로 커맨드(CMD)를 전송할 수 있다. ECC 장치는 리퀘스트 처리부의 제어에 따라 제 1 ECC 회로 또는 제 2 ECC 회로를 선택적 으로 동작시킬 수 있다. 일 실시예에서, 제 1 동작 모드인 경우 제 1 ECC 회로를 구동하고, 제 2 동작 모 드인 경우 제 2 ECC 회로를 구동할 수 있다. 라이트 요청이 수신된 경우, 제 1 ECC 회로는 레지스터로부터 라이트 요청에 포함된 메시지 비트를 전송받아 메시지 비트로부터 제 1 데이터 그룹을 추출하여 메타 비트를 생성하고 데이터 청크를 구성하여 메모 리 풀로 전송할 수 있다. 제 2 ECC 회로는 레지스터로부터 라이트 요청에 포함된 메시지 비트 를 전송받아 메타 비트를 생성하고 데이터 청크를 구성하여 메모리 풀로 전송할 수 있다. 메모리 풀(12 0)은 제 1 ECC 회로 또는 제 2 ECC 회로로부터 데이터 청크를 수신하고, 리퀘스트 처리부로부 터 전송되는 라이트 커맨드(CMD=WT)에 응답하여 메모리 셀에 데이터 청크를 저장할 수 있다. 리드 요청이 수신된 경우, 메모리 풀은 리드 커맨드(CMD=RD)에 응답하여 메모리 셀로부터 데이터 청크를 리드하여 제 1 ECC 회로 또는 제 2 ECC 회로로 전송할 수 있다. 제 1 ECC 회로는 메모리 풀 로부터 데이터 청크를 수신하여, 데이터 청크에 포함된 메타 비트를 이용하여 제 1 데이터 그룹의 에러를 정정하여 메시지 비트를 생성하고 레지스터에 저장할 수 있다. 제 2 ECC 회로는 메모리 풀로부터 데이터 청크를 수신하여, 데이터 청크에 포함된 메타 비트를 이용하여 메시지 비트의 에러를 정정하여 레 지스터에 저장할 수 있다. 레지스터에 저장된 메시지 비트는 도시하지 않은 DMA(Direct Memory Access) 엔진을 통해 프로세서 또는 호스트로 출력될 수 있다. 도 5a 및 도 5b는 실시예에 의한 제 1 ECC 회로의 동작을 설명하기 위한 도면이다. 도 5a를 참조하면, 제 1 ECC 회로에 의해 도출되는 데이터 청크A는 제 1 데이터 그룹(DG0) 및 제 2 데이터 그룹(DG1)을 포함하는 메시지 비트 및 메타 데이터(MD)를 포함하는 메타 비트로 구성될 수 있다. 제 1 데이터 그룹(DG0)은 어플리케이션의 처리 과정에서 생성되는 메시지 비트 중 정확도가 보장되어야 하는 \" 메이저 데이터\", 예를 들어 딥러닝 연산에 사용되는 가중치의 부호 및 정수부, 또는 부호 및 지수부일 수 있다. 제 2 데이터 그룹(DG1)은 어플리케이션의 처리 과정에서 생성되는 메시지 비트 중 소실되어도 무방한 \" 마이너 데이터\", 예를 들어 딥러닝 연산에 사용되는 가중치의 소수부일 수 있다. 메타 데이터(MD)는 제 1 데이터 그룹(DG0)을 설정된 에러 정정 코드로 부호화하여 생성된 패리티 비트일 수 있 다. 도 5b를 참조하면, 제 1 ECC 회로에 의해 도출되는 데이터 청크B는 제 1 데이터 그룹(DG0) 및 제 2 데이터 그룹(DG1)을 포함하는 메시지 비트 및 메타 데이터(MD)를 포함하는 메타 비트로 구성될 수 있다. 제 1 데이터 그룹(DG0)은 제 1 서브 데이터 그룹(DG0-S0) 및 제 2 서브 데이터 그룹(DG0-S1)을 포함할 수 있다. 메타 데이터(MD)는 제 1 서브 데이터 그룹(DG0-S0)에 대한 제 1 서브 메타 비트(MD-SO) 및 상기 제 2 서브 데이 터 그룹(DG0-S1)에 대한 제 2 서브 메타 비트(MD-S1)를 포함할 수 있다. 제 1 서브 데이터 그룹(DG0-S0)과 제 1 서브 메타 비트(MD-S0)는 제 1 서브 청크를 구성할 수 있고, 제 2 서브 데이터 그룹(DG0-S1)과 제 2 서브 메타 비트(MD-S1)는 제 2 서브 청크를 구성할 수 있다. 도 6은 일 실시예에 의한 제 2 ECC 회로의 동작을 설명하기 위한 도면이다. 도 6을 참조하면, 제 2 ECC 회로에 의해 도출되는 데이터 청크C는 메시지 비트 및 메타 비트로 구성될 수 있다. 메타 비트는 메시지 비트를 설정된 에러 정정 코드로 부호화하여 생성된 패리티 비트일 수 있다. 도 5a의 메시지 비트를 구성하는 제 1 데이터 그룹(DG0)은 22비트로 이루어지고, 8비트의 메타 비트(MD)에 의해 에러 정정이 수행될 수 있다. 도 5b의 메시지 비트를 구성하는 제 1 서브 데이터 그룹(DG0-S0) 및 제 2 서브 데이터 그룹(DG0-S1)은 각각 예 를 들어 11 비트로 이루어지고, 각각 4 비트의 메타 비트(MD-S0, MD-S1)에 의해 에러 정정이 수행될 수 있다. 메타 비트 생성시 SEDDEC 에러 정정 코드를 사용할 수 있고, 22 비트의 메이저 데이터로부터 적어도 1비트의 에 러를 정정하거나(도 5a), 또는 11 비트로 구성된 두 개의 메이저 데이터로부터 각각 1비트의 에러를 정정(도 5b)할 수 있다. 따라서, 도 6과 같이 64비트의 전체 메시지 비트를 대상으로 1비트의 에러를 정정하는 경우와 비교하여 메이저 데이터에 대한 에러 정정 성능이 대폭 향상된다. 이와 같이 메이저 데이터에 대한 정확도가 보장됨에 따라, 메모리 풀의 리프레쉬 주기를 증가시켜 전력 소 모량을 감소시킬 수 있다. 도 7은 일 실시예에 의한 메모리 컨트롤러의 동작 방법을 설명하기 위한 흐름도이다. 도 7을 참조하면, 메모리 컨트롤러는 호스트로부터 전송된 제어신호(CON)에 따라 메모리 컨트롤러 의 동작 모드를 설정할 수 있다(S101). 일 실시예에서, 동작 모드는 가속 어플리케이션 처리 모드인 제 1 동작 모드, 또는 일반 어플리케이션 처리 모드인 제 2 동작 모드 중 어느 하나일 수 있다. 메모리 컨트롤러는 호스트 또는 프로세서로부터 리퀘스트가 수신됨에 따라(S013), 전송된 리퀘 스트(REQ)를 저장하고 리퀘스트(REQ)를 파싱하여 리퀘스트 타입을 판단할 수 있다(S105). 리퀘스트 타입이 라이트 리퀘스트(WT)인 경우, 메모리 컨트롤러는 동작 모드를 판단하여(S201) 제 1 ECC 회로 또는 제 2 ECC 회로를 선택적으로 구동하여 라이트 리퀘스트(WT)에 포함된 메시지 비트를 인코 딩할 수 있다(S203). 일 실시예에서, 제 1 동작 모드로 설정된 경우, 메모리 컨트롤러는 제 1 ECC 회로를 구동할 수 있다. 제 1 ECC 회로는 라이트 요청에 포함된 메시지 비트를 전송받아 메시지 비트로부터 제 1 데이터 그룹을 추 출하여 메타 비트를 생성하고 데이터 청크를 구성하는 인코딩 동작을 수행할 수 있다. 일 실시예에서, 제 2 동작 모드로 설정된 경우, 메모리 컨트롤러는 제 2 ECC 회로를 구동할 수 있다. 제 2 ECC 회로는 라이트 요청에 포함된 메시지 비트를 전송받아 메타 비트를 생성하고 데이터 청크를 구성 하는 인코딩 동작을 수행할 수 있다. 한편, 메모리 컨트롤러는 리퀘스트(REQ) 파싱(parsing)결과에 기초하여 메모리 풀로 라이트 커맨드 (CMD=WT)를 전송할 수 있다(S205). 메모리 풀이 ECC 장치로부터 수신한 데이터 청크를 라이트 커맨드(CMD=WT)에 따라 저장하고 완료 신호 를 전송함에 따라(S207), 메모리 컨트롤러는 호스트 또는 프로세서로 라이트를 완료하였음을 보 고할 수 있다(S209). 리퀘스트 타입이 리드 리퀘스트(RD)인 경우, 메모리 컨트롤러는 리퀘스트 파싱 결과에 따라 메모리 풀 로 리드 커맨드(CMD=RD)를 전송할 수 있다(S301). 이에 따라 메모리 풀에서 데이터 청크가 리드되어 메모리 컨트롤러로 전송됨에 따라(S303), 메모리 컨트롤러는 동작 모드를 판단하여(S305) 제 1 ECC 회로 또는 제 2 ECC 회로를 선택적으로 구동 하여 리드된 데이터 청크를 디코딩할 수 있다(S307). 일 실시예에서, 제 1 동작 모드로 설정된 경우, 메모리 컨트롤러는 제 1 ECC 회로를 구동할 수 있다. 제 1 ECC 회로는 메시지 청크로부터 메타 비트를 추출하여 제 1 데이터 그룹의 오류를 정정하여 메시지 비 트를 생성하는 디코딩 동작을 수행할 수 있다. 일 실시예에서, 제 2 동작 모드로 설정된 경우, 메모리 컨트롤러는 제 2 ECC 회로를 구동할 수 있다. 제 2 ECC 회로는 데이터 청크로부터 메타 비트를 추출하여 메시지 비트의 오류를 정정하는 디코딩 동작을 수행할 수 있다. 디코딩된 메시지 비트는 프로세서 또는 호스트로 출력될 수 있다(S309). 도 8은 일 실시예에 의한 메모리 모듈의 구성도이다. 도 8을 참조하면, 일 실시예에 의한 메모리 모듈은 모듈 보드 상에 장착된 복수의 메모리 칩, 모 듈 컨트롤러 및 입출력 인터페이스(IOIF; 330)를 포함할 수 있다. 복수의 메모리 칩 각각은 휘발성 메모리 장치, 예를 들어 DRAM으로 구성될 수 있으나 이에 한정되는 것을 아니다. 모듈 컨트롤러는 입출력 인터페이스를 통해 컨트롤러로부터 커맨드, 어드레스, 클럭 신호를 버 퍼링하여 메모리 칩으로 제공하거나, 메모리 칩로부터 전송된 데이터를 입출력 인터페이스를 통 해 컨트롤러로 제공할 수 있다. 일 실시예에서, 모듈 컨트롤러는 ECC 장치를 포함할 수 있다. ECC 장치는 컨트롤러의 제어에 따라 동작 모드가 설정되어, 제 1 동작 모드시 메시지 비트에 포함된 메이저 데이터에 대해서만 에러 정정을 수행하 고, 제 2 동작 모드시 메시지 비트 전체에 대한 에러 정정을 수행할 수 있다. 도 9는 일 실시예에 의한 적층형 반도체 장치의 구성도이다. 일 실시예에 의한 적층형 반도체 장치는 복수의 다이가 적층된 적층 구조체를 포함할 수 있다. 적층 구조체는 복수의 다이를 적층하고, 관통 전극(TSV, Through Silicon Via)을 통해 전기적으로 연결시킴으로 써 입/출력 유닛의 수를 늘려 대역폭(Bandwidth)을 증가시킨 HBM(High Bandwidth Memory) 형태로 구성될 수 있 다. 적층 구조체는 베이스 다이(Base Die) 및 복수의 코어 다이(Core Die)를 포함할 수 있다. 복수의 코어 다이는 베이스 다이 상에 적층될 수 있으며, 관통 전극(TSV)을 통해 서로 연결될 수 있 다. 코어 다이 각각에는 데이터를 저장하기 위한 메모리 셀들 및 메모리 셀의 코어 동작을 위한 회로들이 배치될 수 있다. 코어 다이는 관통전극(TSV)을 통해 베이스 다이와 전기적으로 접속되어, 관통전극(TSV)을 통해 베이 스 다이로부터 신호 및 전원 등을 제공받을 수 있다. 베이스 다이는 예를 들어 도 2 내지 도 4에 도시한 것과 같은 컨트롤러를 포함할 수 있다. 베이스 다이는 적층형 반도체 장치 내의 다양한 기능, 예를 들어, 메모리 셀들의 전력 관리 및 리프레쉬와 같 은 메모리 관리 기능 혹은 코어 다이와 베이스 다이 간의 타이밍조절 기능들을 수행할 수 있다. 베이스 다이에 구비되는 물리 영역(PHY)은 어드레스, 명령어, 데이터, 제어신호 등의 입출력 영역일 수 있 다. 물리 영역(PHY)에는 적층형 반도체 장치에 요구되는 데이터 처리 속도를 만족시킬 수 있는 수만큼의 입출력 회로부가 구비될 수 있다. 그리고 베이스 다이의 배면 중 물리 영역(PHY) 부분에는 입출력 동작시 필요한 신호 및 전원을 공급받을 수 있도록 복수의 입출력 단자와 전원공급 단자가 구비될 수 있다. 도 10은 일 실시예에 의한 적층형 반도체 장치의 구성도이다. 도 10을 참조하면, 적층형 반도체 장치는 복수의 코어 다이와 베이스 다이의 적층 구조체, 메모리 호스트 및 인터페이스 기판을 포함할 수 있다. 호스트는 CPU, 또는 GPU, 또는 ASIC(Application Specific Integrated Circuit), 또는 FPGA(Field Programmable Gate Arrays) 등이 될 수 있 다. 베이스 다이는 코어 다이와 호스트 간의 인터페이스를 위한 회로가 실장될 수 있다. 적층 구조 체는 도 9를 참조하여 설명한 것과 유사한 구조를 가질 수 있다. 적층 구조체와 호스트는 인터페이스 기판을 통해 각각의 물리 영역(PHY)이 연결될 수 있다. 인 터페이스 기판은 인터포저(Interposer)가 지칭될 수 있다. 도 11은 일 실시예에 의한 적층형 반도체 장치의 구성도이다. 도 11에 도시한 적층형 반도체 장치는 도 10에 도시한 적층형 반도체 장치를 패키지 기판 상에 배치한 것으로 이해할 수 있다. 패키지 기판과 인터페이스 기판은 접속단자를 통해 전기적으로 접속될 수 있다. 인터페이스 기판 상에 도 9에 도시한 것과 같은 적층 구조체 및 호스트를 적층하고, 이를 패키 지 기판에 장착한 후 패키징하므로써 시스템 인 패키지(System In Package; SiP) 타입의 반도체 장치를 구 현할 수 있다. 도 12는 일 실시예에 의한 네트워크 시스템의 구성도이다. 도 12를 참조하면, 네트워크 시스템은 네트워크를 통해서 연결된 서버 시스템 및 복수의 클 라이언트 시스템들(5410~5430)을 포함할 수 있다. 서버 시스템은 복수의 클라이언트 시스템들(5410~5430)의 요청에 응답하여 데이터를 서비스할 수 있다. 예를 들면, 서버 시스템은 복수의 클라이언트 시스템들(5410~5430)로부터 제공된 데이터를 저장할 수 있 다. 다른 예로서, 서버 시스템은 복수의 클라이언트 시스템들(5410~5430)로 데이터를 제공할 수 있다. 서버 시스템은 호스트 및 메모리 시스템을 포함할 수 있다. 메모리 시스템은 도 1 내 지 도 4에 도시한 데이터 처리 시스템으로 구성될 수 있다."}
{"patent_id": "10-2020-0042030", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "이와 같이, 본 발명이 속하는 기술분야의 당업자는 본 발명이 그 기술적 사상이나 필수적 특징을 변경하지 않고 서 다른 구체적인 형태로 실시될 수 있다는 것을 이해할 수 있을 것이다. 그러므로 이상에서 기술한 실시예들 은 모든 면에서 예시적인 것이며 한정적인 것이 아닌 것으로서 이해해야만 한다. 본 발명의 범위는 상기 상세 한 설명보다는 후술하는 특허청구범위에 의하여 나타내어지며, 특허청구범위의 의미 및 범위 그리고 그 등가개 념으로부터 도출되는 모든 변경 또는 변형된 형태가 본 발명의 범위에 포함되는 것으로 해석되어야 한다."}
{"patent_id": "10-2020-0042030", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시예에 의한 데이터 처리 시스템을 포함하는 전자 장치의 구성도이다. 도 2는 일 실시예에 의한 데이터 처리 시스템의 구성도이다. 도 3은 일 실시예에 의한 메모리 풀의 구성도이다. 도 4는 일 실시예에 의한 메모리 컨트롤러의 구성도이다. 도 5a 및 도 5b는 실시예에 의한 제 1 ECC 회로의 동작을 설명하기 위한 도면이다. 도 6은 일 실시예에 의한 제 2 ECC 회로의 동작을 설명하기 위한 도면이다. 도 7은 일 실시예에 의한 메모리 컨트롤러의 동작 방법을 설명하기 위한 흐름도이다. 도 8은 일 실시예에 의한 메모리 모듈의 구성도이다.도 9 내지 도 11은 실시예들에 의한 적층형 반도체 장치의 구성도이다. 도 12는 일 실시예에 의한 네트워크 시스템의 구성도이다."}
