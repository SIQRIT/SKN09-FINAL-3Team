{"patent_id": "10-2023-0173681", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0000843", "출원번호": "10-2023-0173681", "발명의 명칭": "보안을 위한 메모리 관리 방법 및 이를 위한 전자 장치", "출원인": "삼성전자주식회사", "발명자": "이동선"}}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치(101)에 있어서,적어도 하나의 프로세서(210); 및상기 적어도 하나의 프로세서와 연결된 메모리(220)를 포함하며,상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가, 제1 프로그램을 실행하는 시점에 랜덤 키를 생성하고 (401), 상기 생성된 랜덤 키를 상기 적어도 하나의 프로세서에 포함된 레지스터(211)에 저장하고(402), 상기 제1 프로그램에 포함된 제1 함수를 수행하고,상기 제1 함수에서 제2 함수가 호출됨에 따라(403), 상기 제1 함수에 대한 제1 리턴 어드레스를 상기 메모리(220)에 저장하고, 상기 레지스터에 저장된 랜덤 키를 상기 제1 리턴 어드레스로 랜덤화 하여 생성한 제1 키 값을 상기 레지스터에저장하고(404),상기 제1 리턴 어드레스를 상기 제1 키 값으로 암호화 하여 생성한 제2 리턴 어드레스를 상기 메모리에 저장하고(405),상기 제2 함수를 수행하고(406), 상기 제2 리턴 어드레스를 복호화 하고(407),상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 동일하면, 상기 제1 리턴 어드레스로 상기 제1키 값을 복원하여, 상기 복원된 제1 키 값을 상기 레지스터에 저장하고(408),상기 제2 함수를 종료하고 상기 제1 함수로 복귀(409)하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가,상기 제2 리턴 어드레스를 상기 제1 키 값으로 복호화 하고, 상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 동일하면, 상기 제1 리턴 어드레스로 상기 제1 키 값을 복원하여, 상기 복원된 제1 키 값을 상기레지스터에 저장하도록 하는 인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가,상기 레지스터에 저장된 랜덤 키와 상기 제1 리턴 어드레스를 XOR 연산하여 상기 제1 키 값을 생성하고, 상기 제1 리턴 어드레스와 상기 제1 키 값을 XOR 연산하여 상기 제1 키 값을 복원하도록 하는 인스트럭션들을저장하는, 전자 장치."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가,공개특허 10-2025-0000843-3-상기 레지스터에 저장된 랜덤 키와 상기 제1 리턴 어드레스를 덧셈 연산하여 상기 제1 키 값을 생성하고,상기 제1 리턴 어드레스와 상기 제1 키 값을 뺄셈 연산하여 상기 제1 키 값을 복원하도록 하는 인스트럭션들을저장하는, 전자 장치."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가,상기 레지스터에 저장된 랜덤 키와 상기 제1 리턴 어드레스를 뺄셈 연산하여 상기 제1 키 값을 생성하고,상기 제1 리턴 어드레스와 상기 제1 키 값을 덧셈 연산하여 상기 제1 키 값을 복원하도록 하는 인스트럭션들을저장하는, 전자 장치."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가,상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 다르면, 상기 제1 프로그램을 종료하도록 하는인스트럭션들을 저장하는, 전자 장치."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가,상기 제1 함수를 수행하는 시작 시점에, 상기 제1 함수에 대한 제3 리턴 어드레스를 상기 메모리(220)에 저장하고, 상기 레지스터에 저장된 상기 랜덤 키를 상기 제3 리턴 어드레스로 랜덤화 하여 생성한 제2 키 값을 상기 레지스터에 저장하고,상기 제2 함수를 호출하기에 앞서, 상기 제3 리턴 어드레스를 상기 제2 키 값으로 복호화 하고, 상기 복호화 된제3 리턴 어드레스와 상기 제3 리턴 어드레스가 다르면 상기 제1 프로그램을 종료하도록 하는 인스트럭션들을저장하는, 전자 장치."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "전자 장치(101)의 메모리 관리 방법에 있어서,제1 프로그램을 실행하는 시점에 랜덤 키를 생성하고 (401), 상기 생성된 랜덤 키를 적어도 하나의 프로세서에포함된 레지스터(211)에 저장하는 동작(402), 상기 제1 프로그램에 포함된 제1 함수를 수행하는 동작,상기 제1 함수에서 제2 함수가 호출됨에 따라(403), 상기 제1 함수에 대한 제1 리턴 어드레스를 메모리(220)에저장하는 동작, 상기 레지스터에 저장된 랜덤 키를 상기 제1 리턴 어드레스로 랜덤화 하여 생성한 제1 키 값을 상기 레지스터에저장하는 동작(404),상기 제1 리턴 어드레스를 상기 제1 키 값으로 암호화 하여 생성한 제2 리턴 어드레스를 상기 메모리에 저장하는 동작(405),상기 제2 함수를 수행하는 동작(406), 상기 제2 리턴 어드레스를 복호화 하는 동작(407),상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 동일하면, 상기 제1 리턴 어드레스로 상기 제1공개특허 10-2025-0000843-4-키 값을 복원하여, 상기 복원된 제1 키 값을 상기 레지스터에 저장하는 동작(408), 및상기 제2 함수를 종료하고 상기 제1 함수로 복귀(409)하는 동작을 포함하는, 방법."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 제2 리턴 어드레스를 상기 제1 키 값으로 복호화 하고, 상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 동일하면, 상기 제1 리턴 어드레스로 상기 제1 키 값을 복원하여, 상기 복원된 제1 키 값을 상기레지스터에 저장하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서,상기 레지스터에 저장된 랜덤 키와 상기 제1 리턴 어드레스를 XOR 연산하여 상기 제1 키 값을 생성하는 동작,및상기 제1 리턴 어드레스와 상기 제1 키 값을 XOR 연산하여 상기 제1 키 값을 복원하도록 하는 인스트럭션들을저장하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제8항에 있어서,상기 레지스터에 저장된 랜덤 키와 상기 제1 리턴 어드레스를 덧셈 연산하여 상기 제1 키 값을 생성하는 동작,및상기 제1 리턴 어드레스와 상기 제1 키 값을 뺄셈 연산하여 상기 제1 키 값을 복원하도록 하는 인스트럭션들을저장하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제8항에 있어서,상기 레지스터에 저장된 랜덤 키와 상기 제1 리턴 어드레스를 뺄셈 연산하여 상기 제1 키 값을 생성하는 동작,및상기 제1 리턴 어드레스와 상기 제1 키 값을 덧셈 연산하여 상기 제1 키 값을 복원하도록 하는 인스트럭션들을저장하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제8항에 있어서,상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 다르면, 상기 제1 프로그램을 종료하도록 하는인스트럭션들을 저장하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제8항에 있어서,상기 제1 함수를 수행하는 시작 시점에, 상기 제1 함수에 대한 제3 리턴 어드레스를 상기 메모리(220)에 저장하는 동작, 상기 레지스터에 저장된 상기 랜덤 키를 상기 제3 리턴 어드레스로 랜덤화 하여 생성한 제2 키 값을 상기 레지스터에 저장하는 동작, 및상기 제2 함수를 호출하기에 앞서, 상기 제3 리턴 어드레스를 상기 제2 키 값으로 복호화 하고, 상기 복호화 된제3 리턴 어드레스와 상기 제3 리턴 어드레스가 다르면 상기 제1 프로그램을 종료하는 동작을 더 포함하는, 방법.공개특허 10-2025-0000843-5-청구항 15 컴퓨터 실행 가능 명령어들을 기록한 비-일시적인 컴퓨터 판독 가능 매체에 있어서, 상기 컴퓨터 실행 가능 명령어들은, 실행 시, 적어도 하나의 프로세서를 포함하는 전자 장치가,제1 프로그램을 실행하는 시점에 랜덤 키를 생성하고 (401), 상기 생성된 랜덤 키를 상기 적어도 하나의 프로세서에 포함된 레지스터(211)에 저장하는 동작(402), 상기 제1 프로그램에 포함된 제1 함수를 수행하는 동작,상기 제1 함수에서 제2 함수가 호출됨에 따라(403), 상기 제1 함수에 대한 제1 리턴 어드레스를 메모리(220)에저장하는 동작, 상기 레지스터에 저장된 랜덤 키를 상기 제1 리턴 어드레스로 랜덤화 하여 생성한 제1 키 값을 상기 레지스터에저장하는 동작(404),상기 제1 리턴 어드레스를 상기 제1 키 값으로 암호화 하여 생성한 제2 리턴 어드레스를 상기 메모리에 저장하는 동작(405),상기 제2 함수를 수행하는 동작(406), 상기 제2 리턴 어드레스를 복호화 하는 동작(407),상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 동일하면, 상기 제1 리턴 어드레스로 상기 제1키 값을 복원하여, 상기 복원된 제1 키 값을 상기 레지스터에 저장하는 동작(408), 및상기 제2 함수를 종료하고 상기 제1 함수로 복귀(409)하는 동작을 수행하도록 구성되는 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서,상기 컴퓨터 실행 가능 명령어들은, 실행 시, 적어도 하나의 프로세스를 포함하는 전자 장치가, 상기 제2 리턴 어드레스를 상기 제1 키 값으로 복호화 하고, 상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 동일하면, 상기 제1 리턴 어드레스로 상기 제1 키 값을 복원하여, 상기 복원된 제1 키 값을 상기레지스터에 저장하는 동작을 더 수행하도록 구성되는, 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제15항에 있어서,상기 컴퓨터 실행 가능 명령어들은, 실행 시, 적어도 하나의 프로세스를 포함하는 전자 장치가, 상기 레지스터에 저장된 랜덤 키와 상기 제1 리턴 어드레스를 XOR 연산하여 상기 제1 키 값을 생성하는 동작,및상기 제1 리턴 어드레스와 상기 제1 키 값을 XOR 연산하여 상기 제1 키 값을 복원하도록 하는 인스트럭션들을저장하는 동작을 더 수행하도록 구성되는, 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제15항에 있어서,상기 컴퓨터 실행 가능 명령어들은, 실행 시, 적어도 하나의 프로세스를 포함하는 전자 장치가, 상기 레지스터에 저장된 랜덤 키와 상기 제1 리턴 어드레스를 덧셈 연산하여 상기 제1 키 값을 생성하는 동작,및상기 제1 리턴 어드레스와 상기 제1 키 값을 뺄셈 연산하여 상기 제1 키 값을 복원하도록 하는 인스트럭션들을저장하는 동작을 더 수행하도록 구성되는, 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "공개특허 10-2025-0000843-6-제15항에 있어서,상기 컴퓨터 실행 가능 명령어들은, 실행 시, 적어도 하나의 프로세스를 포함하는 전자 장치가, 상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 다르면, 상기 제1 프로그램을 종료하도록 하는인스트럭션들을 저장하는 동작을 더 수행하도록 구성되는, 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2023-0173681", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제15항에 있어서,상기 컴퓨터 실행 가능 명령어들은, 실행 시, 적어도 하나의 프로세스를 포함하는 전자 장치가, 상기 제1 함수를 수행하는 시작 시점에, 상기 제1 함수에 대한 제3 리턴 어드레스를 상기 메모리(220)에 저장하는 동작, 상기 레지스터에 저장된 상기 랜덤 키를 상기 제3 리턴 어드레스로 랜덤화 하여 생성한 제2 키 값을 상기 레지스터에 저장하는 동작, 및상기 제2 함수를 호출하기에 앞서, 상기 제3 리턴 어드레스를 상기 제2 키 값으로 복호화 하고, 상기 복호화 된제3 리턴 어드레스와 상기 제3 리턴 어드레스가 다르면 상기 제1 프로그램을 종료하는 동작을 더 수행하도록 구성되는, 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2023-0173681", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예에 따른 전자 장치는, 적어도 하나의 프로세서 및 상기 적어도 하나의 프로세서와 연결된 메모리를 포 함할 수 있다. 상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가, 제1 프로그램을 실행하는 시점에 랜덤 키를 생성하고, 상기 생성된 랜덤 키를 상기 적어도 하나의 프로세서에 포함된 레지스터에 (뒷면에 계속)"}
{"patent_id": "10-2023-0173681", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "다양한 실시 예는 보안을 위한 메모리 관리 방법 및 이를 위한 전자 장치에 관한 것이다."}
{"patent_id": "10-2023-0173681", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "전자 장치, 예를 들어, 스마트 폰과 같은 휴대용 전자 장치를 통해 제공되는 다양한 서비스 및 부가 기능들이 점차 증가하고 있다. 이러한 전자 장치의 효용 가치를 높이고, 다양한 사용자들의 욕구를 만족시키기 위해서 통 신 서비스 제공자 또는 전자 장치 제조사들은 다양한 기능들을 제공하고 다른 업체와의 차별화를 위해 전자 장 치를 경쟁적으로 개발하고 있다. 이에 따라, 전자 장치를 통해서 제공되는 다양한 기능들도 점점 고도화 되고 있다. 이와 같이 전자 장치의 사용자들은 다양한 서비스들을 이용할 수 있게 되었지만 이와 동시에 다양한 보안 이슈들이 대두되고 있다."}
{"patent_id": "10-2023-0173681", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "전자 장치는 메모리에 저장된 소프트웨어 명령들에 따라 어플리케이션 및 시스템 프로세스들을 실행할 수 있다. 하지만, 이들 프로세스들은 외부 공격에 따라 악의적으로 소프트웨어 명령어들이 변경될 수 있다. 예를 들어, 공격자에 의해 악성 코드가 삽입된 응용 프로그램이 실행된 경우, 악성 코드가 실행됨으로 인해 메모리의 데이 터가 손상되거나 스택 포인터 또는 리턴 어드레스가 손상되어 스택 포인터 또는 리턴 어드레스 값이 변경됨으로 써 원하지 않는 소프트웨어 명령어가 실행될 수 있다. 예를 들어, 리턴-지향-프로그래밍(ROP: return-oriented programming)은 공격자들이 컴퓨터 시스템들 또는 기타 전자 장치에 대한 제어를 얻는데 악용될 수 있으며, 리턴 어드레스를 조작함으로써 시스템은 정상 동작을 하지 못하고 공격자가 원하는 동작을 수행할 수 있고, 점프-지향-프로그래밍(JOP: jump-oriented programming)은 리 턴 어드레스를 조작하는 대신 점프 어드레스를 조작하여 공격자가 원하는 대로 프로그램의 흐름을 제어할 수 있 다. 이와 같은 공격자의 공격을 하드웨어 적으로 방지하기 위한 다양한 방법들이 제안되었으나, 소프트웨어 적으로 방지하기 위한 메모리 보안 기법이 필요할 수 있다. 본 개시의 다양한 실시 예에 따르면, 소프트웨어 적인 메모리 관리 방법 및 이를 위한 전자 장치를 제공하고자 한다. 본 개시에서 이루고자 하는 기술적 과제는 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또"}
{"patent_id": "10-2023-0173681", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 2, "content": "다른 기술적 과제들은 아래의 기재로부터 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2023-0173681", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시 예에 따른 전자 장치는, 적어도 하나의 프로세서 및 상기 적어도 하나의 프로세서와 연결된 메모리를 포함할 수 있다. 상기 메모리는, 상기 적어도 하나의 프로세서에 의해 실행 시, 상기 전자 장치가, 제1 프로그 램을 실행하는 시점에 랜덤 키를 생성하고, 상기 생성된 랜덤 키를 상기 적어도 하나의 프로세서에 포함된 레지 스터에 저장하고, 상기 제1 프로그램에 포함된 제1 함수를 수행하고, 상기 제1 함수에서 제2 함수가 호출됨에 따라, 상기 제1 함수에 대한 제1 리턴 어드레스를 상기 메모리에 저장하고, 상기 레지스터에 저장된 랜덤 키를 상기 제1 리턴 어드레스로 랜덤화 하여 생성한 제1 키 값을 상기 레지스터에 저장하고, 상기 제1 리턴 어드레스 를 상기 제1 키 값으로 암호화 하여 생성한 제2 리턴 어드레스를 상기 메모리에 저장하고, 상기 제2 함수를 수 행하고, 상기 제2 리턴 어드레스를 복호화 하고, 상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스 가 동일하면, 상기 제1 리턴 어드레스로 상기 제 1 키 값을 복원하여, 상기 복원된 제1 키 값을 상기 레지스터 에 저장하고, 상기 제2 함수를 종료하고 상기 제1 함수로 복귀하도록 하는 인스트럭션들을 저장할 수 있다. 일 실시 예에 따른 전자 장치에서 메모리를 관리하는 방법은, 제1 프로그램을 실행하는 시점에 랜덤 키를 생성 하고, 상기 생성된 랜덤 키를 상기 적어도 하나의 프로세서에 포함된 레지스터에 저장하는 동작, 상기 제1 프로 그램에 포함된 제1 함수를 수행하는 동작, 상기 제1 함수에서 제2 함수가 호출됨에 따라, 상기 제1 함수에 대한 제1 리턴 어드레스를 메모리에 저장하는 동작, 상기 레지스터에 저장된 랜덤 키를 상기 제1 리턴 어드레스로 랜 덤화 하여 생성한 제1 키 값을 상기 레지스터에 저장하는 동작, 상기 제1 리턴 어드레스를 상기 제1 키 값으로 암호화 하여 생성한 제2 리턴 어드레스를 상기 메모리에 저장하는 동작, 상기 제2 함수를 수행하는 동작, 상기 제2 리턴 어드레스를 복호화 하는 동작, 상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 동일하 면, 상기 제1 리턴 어드레스로 상기 제1 키 값을 복원하여, 상기 복원된 제1 키 값을 상기 레지스터에 저장하는 동작, 및 상기 제2 함수를 종료하고 상기 제1 함수로 복귀하는 동작을 포함할 수 있다. 일 실시예에서, 컴퓨터 실행 가능 명령어들을 기록한 비-일시적인 컴퓨터 판독 가능 매체에 있어서, 상기 컴퓨 터 실행 가능 명령어들은, 실행 시, 제1 프로그램을 실행하는 시점에 랜덤 키를 생성하고, 상기 생성된 랜덤 키 를 상기 적어도 하나의 프로세서에 포함된 레지스터에 저장하는 동작, 상기 제1 프로그램에 포함된 제1 함수를 수행하는 동작, 상기 제1 함수에서 제2 함수가 호출됨에 따라, 상기 제1 함수에 대한 제1 리턴 어드레스를 메모 리에 저장하는 동작, 상기 레지스터에 저장된 랜덤 키를 상기 제1 리턴 어드레스로 랜덤화 하여 생성한 제1 키 값을 상기 레지스터에 저장하는 동작, 상기 제1 리턴 어드레스를 상기 제1 키 값으로 암호화 하여 생성한 제2 리턴 어드레스를 상기 메모리에 저장하는 동작, 상기 제2 함수를 수행하는 동작, 상기 제2 리턴 어드레스를 복 호화 하는 동작, 상기 복호화 된 제2 리턴 어드레스와 상기 제1 리턴 어드레스가 동일하면, 상기 제1 리턴 어드 레스로 상기 제1 키 값을 복원하여, 상기 복원된 제1 키 값을 상기 레지스터에 저장하는 동작, 및 상기 제2 함 수를 종료하고 상기 제1 함수로 복귀하는 동작을 수행하도록 구성될 수 있다."}
{"patent_id": "10-2023-0173681", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 일 실시예에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워 크)를 통하여 전자 장치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하 여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 서버를 통하여 전자 장치와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈 , 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리 , 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성 요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일 실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세 서는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또 는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로 세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능 에 특화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다.입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일 실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일 실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일 실시 예에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일 실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일 실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일 실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일 실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일 실시예에 따르면, 카메라 모듈은 하나 이 상의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일 실시예에 따르면, 전력 관리 모 듈은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일 실시예에 따르면, 배터 리는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일 실시예에 따르면, 통 신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일 실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일 실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일 실시예에 따르면, 안테나 모듈은 복수의 안테나 들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통 신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통 신 모듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품(예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일 실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일 실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일 실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴 퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일 실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예:스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 본 문서에 개시된 일 실시예에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되지 않는 다. 본 문서의 일 실시예 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한정하려 는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템에 대응 하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당 하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위해 사 용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구 성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 일 실시예에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일 실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 일 실시예는 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어(예: 프로그램 )로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서)는, 저장 매 체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기 기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드 를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형태로 제공될 수 있다. 여기서, \"비일시적\"은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전자기파)를 포함 하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 일 실시예에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 일 실시예에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 일 실시예에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프 로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 일 실시예에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수 행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동작들 중 하나 이 상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도 2는 일 실시예에 따른 전자 장치의 구성의 일 예를 설명하기 위한 도면이다. 다만 도 2에 도시되는 구 성들에 제한되지 않고, 전자 장치는 도 2에 도시되는 구성들 보다 더 많은 구성들 또는 더 적은 구성들을 포함하도록 구현될 수 있다. 도 2를 참조하면, 전자 장치는, 프로세서 및 메모리를 포함할 수 있다. 프로세서는 적어도 하나의 레지스터를 포함할 수 있다. 일 실시예에 따르면, 프로세서는 CPU(central processing unit)를 포함할 수 있다. 이하에서 설명되는 프로세서의 동작은 메모리에 저장되는 모듈들의 실행에 따라서 수행될 수 있다. 예를 들어, 모듈들의 적어도 일부는 소프트웨어, 펌웨어, 또 는 이들 중 적어도 둘 이상의 조합으로 구현(예를 들어, 실행)될 수 있다. 예를 들어, 상기 모듈들은 프로세서 에 의해 실행 가능한 어플리케이션(application), 프로그램(program), 컴퓨터 코드(computer code), 인스 트럭션들(instructions), 루틴(routine), 내지는 프로세스(process)의 형태로 구현될 수 있다. 이에 따라, 상 기 모듈들이 프로세서에 의해 실행되는 경우, 상기 모듈들은 상기 프로세서가 상기 모듈과 연관된 동 작(또는, 모듈이 제공 가능한 기능)을 수행하도록 야기할 수 있다. 따라서 이하에서 특정 모듈이 동작을 수행한 다는 기재는, 특정 모듈이 실행됨에 따라서 프로세서가 해당 동작을 수행하는 것으로 해석될 수 있다. 또 는 상기 모듈들은 특정 어플리케이션의 일부로 구현될 수도 있다. 또는 기재 및/또는 도시된 바에 제한되지 않 고, 각 모듈들은 프로세서와는 별도의 하드웨어(예: 프로세서, 제어 회로)로 구현될 수도 있다. 프로세서 는 메모리에 저장된 인스트럭션들을 수행함으로써 이하에서 설명되는 보안을 위한 메모리 관리 방법 과 관련된 다양한 기능 및 동작들을 수행할 있다. 사용자에 의해 프로그램 실행이 요청됨에 따라 프로그램 정보가 메모리에 로드되고, 프로세서는 메모 리에 저장된 프로그램 코드를 읽어들여서 인스트럭션들을 실행할 수 있다. 프로세서가 프로그램 코드 를 실행 중에 함수가 호출되면, 호출된 함수로 분기하여 해당 함수를 실행하고, 함수의 호출이 완료되면 원래 함수로 리턴하여 다음 명령어를 실행한다. 함수를 호출하는 부분에서 현재의 프로그램 카운터(즉, 리턴 어드레 스)와 함수 호출과 실행에 필요한 데이터들, 예를 들면 지역변수, 매개변수 등이 스택 영역에 저장될 수 있다. 스택 영역은 프로그램이 자동으로 사용하는 임시 메모리 영역으로, 함수의 호출과 함께 할당되고, 함수가 종료 되면 소멸된다. 리턴 어드레스는 함수가 실행을 마치고 제어를 호출한 곳으로 돌려보내기 위한 주소이다. 함수 가 호출되면, 현재 실행 중인 명령어 다음에 실행되어야 할 주소가 리턴 어드레스로 저장된다. 리턴 어드레스는 호출한 함수나 명령어의 다음 명령어 주소를 가리킨다. 리턴 어드레스는 함수 호출 시 스택에 푸시(push)되고 함수 종료 시 팝(pop)되어 프로그램 카운터가 복원된다. 이를 통해 프로세서는 함수가 종료되면 복원된 프 로그램 카운터가 가리키는 값의 주소에 저장된 명령어를 실행할 수 있다. 일 실시 예에서, 프로세서는 리턴 어드레스를 보호하기 위해 프로그램 시작 시점에 랜덤 키를 생성하여 레 지스터에 저장하고, 각 함수를 실행하는 동안 레지스터에 저장된 값을 이용하여 리턴 어드레스를 암 호화 하고 복호화 하는 동작들을 수행할 수 있다. 이에 대하여서는 더욱 상세하게 후술하도록 한다. 메모리(예: 도 1의 메모리는 어플리케이션으로부터 출력되는 데이터를 저장할 수 있다. 일 실시 예에 서, 프로세서에 의해 어플리케이션이 실행되고, 프로세서는 어플리케이션의 실행 중에 생성되는 데이 터를 메모리에 저장할 수 있다. 일 실시 예에서, 프로세서는 어플리케이션 실행 중에 요구되는 데이 터를 메모리로부터 독출할 수 있다. 일 실시 예에서, 메모리는 보안을 위한 메모리 관리 방법과 관련 된 다양한 기능 및 동작들을 수행하도록 구성된 컴퓨터 실행 가능한 인스트럭션들을 저장할 수 있다. 일 실시 예에서, 메모리는 리턴 어드레스를 보호하기 위해 프로그램 시작 시점에 랜덤 키를 생성하여 레지스터 에 저장하고, 각 함수를 실행하는 동안 레지스터에 저장된 값을 이용하여 리턴 어드레스를 암호화 하 고 복호화 하는 동작들을 수행하기 위한 인스트럭션들을 저장할 수 있다. 일 실시 예에서 메모리는 프로그 램 실행시 각 함수에 의해 생성되는 리턴 어드레스를 저장하기 위한 스택 영역을 포함할 수 있다. 레지스터는 휘발성 메모리로서 메모리 대비 저용량 메모리일 수 있다. 레지스터는 프로세서 에 의해 실행되는 프로그램의 시작 시점에 리턴 어드레스(return address)를 암호화하는 데 사용할 랜덤 키와 암호화 된 리턴 어드레스를 임시 저장할 수 있다. 일 실시 예에서, 레지스터는 데이터의 독출, 수정 또는 삭제가 제한적으로 수행되는 저장 공간일 수 있다. 전자 장치는, 특정한 명령어 세트에 대하여서만 레지스터에 접근을 허용하도록 설정될 수 있다. 예를 들어, 특정 명령어에 따라, 레지스터의 데이터 가 독출, 수정 또는 삭제될 수 있다. 레지스터에 저장된 정보는 암호화 된 리턴 어드레스를 복호화 하기 위해 사용될 수 있다. 이에 대하여서는 더욱 상세하게 후술하도록 한다.도 3은 일 실시 예에 따른 보안을 위한 메모리 관리 방법을 설명하기 위한 도면이다. 도 3에 도시된 바와 같이, ROP 공격은 커널의 스택에 저장되는 변수 등을 오버플로우를 발생시켜 스택 에 저장된 레지스터에 로드 될 리턴 어드레스를 변경할 수 있다. 한편, 리턴 어드레스가 변경되는 것 을 방지하기 위해 프로그램이 메모리에 로드될 때 어드레스를 무작위로 변화시키도록 하는 키(key)를 추가하는 ASLR (Address Space Layout Randomization) 방식을 사용하거나 또는 실행 가능한 코드가 위치한 메모리 영역 외의 영역에서 코드 실행을 막기 위한 알고리즘을 추가하는 DEP (Data Execution Prevention) 방식 등을 사용할 수 있다. 이 경우에 공격자는 리턴 어드레스가 변경되는 것을 방지하기 위해 추가된 키 또는 알고리즘 을 공격하여 공격자가 원하는 코드를 실행하도록 할 수 있다. 이에 따라 레지스터에는 공격자의 조작 에 의해 훼손된 리턴 어드레스(damaged return address)가 저장될 수 있다. 더욱 상세하게, 커널에 의해 커널 코드(또는 프로세스)의 실행이 시작되면, 프로세서는 메모리에 저장된 실행 코드를 순차적으로 실행할 수 있다. 예를 들어, 어드레스 1의 함수 A가 실행 중에 함수 A 의 내부 함수인 함수 B가 호출되면, 프로세서는 함수 B를 실행하기 위한 어드레스 3으로 이동하며, 함수 B의 실행이 종료된 이후에 현재 어드레스인 어드레스 1의 다음 어드레스인 어드레스 2로 돌아올 수 있도록 리턴 어드레스(어드레스 2)를 스택에 저장할 수 있다. 이때, 스택 오버플로우 공격이 발생하여 스택에 저장된 리턴 어드레스(어드레스 2)가 다른 어드레스(어드레스 4)로 조작된 경우, 프로세서는 함수 A의 동작을 마치고 리턴하기 전에 스택에 있는 조 작된 리턴 어드레스를 레지스터에 저장할 수 있다. 이에 따라 레지스터에도 조작된 리턴 어드레스(어드레스 4) 가 저장될 수 있다. 이에 따라 프로세스는 함수 A의 동작을 마치고 정상적인 리턴 어드레스에 해당하는 어드레 스 2로 점핑하는 것이 아닌 공격자에 의해 조작된 리턴 어드레스인 어드레스 4로 점핑하게 되고 의도하지 않은 코드가 실행됨으로 인해 ROP 공격이 시작될 수 있다. 상기와 같은 ROP 공격을 막기 위해 다양한 CFI(control flow integrity)보호 기법이 사용되고 있다. 예를 들어, 기존의 스택과 별도로 공격자가 접근할 수 없는 별도의 저장 공간으로서 섀도우 스택(shadow stack)을 하드웨어 적으로 생성하고, 섀도우 스택에 리턴 어드레스를 추가로 저장함으로써 리턴 어드레스가 조작되는 것을 방지할 수 있다. 상기와 같은 방법은 하드웨어의 지원을 필요로 함에 따라 해당 기능을 지원하지 않는 저가의 전자 장치에는 해 당 보호 기법을 적용할 수 없다. 따라서 성능보다는 보안이 우선되는 기기에서 소프트웨어적으로 메모리에서의 보안을 향상시킬 방법을 고려할 필요가 있다. 이하, 소프트웨어적인 방법을 통해 메모리에서의 보안을 향상시키기 위한 메모리 관리 방법과 이를 위한 전자 장치의 동작들을 도면들을 참고하여 자세히 설명하기로 한다. 도 4는 일 실시예에 따른 전자 장치의 동작의 일 예를 설명하기 위한 흐름도이다. 도 4에 도시되는 동작들은 도시되는 순서에 국한되지 않고 다양한 순서로 수행될 수 있다. 또한, 일 실시예에 따르면 도 4에 도 시되는 동작들 보다 더 많은 동작들이 수행되거나, 더 적은 적어도 하나의 동작이 수행될 수도 있다. 일 실시 예에 따르면, 전자 장치(예: 도 2의 프로세서)는 401 동작에서 프로그램 시작 시점 즉 메인 함수(main())를 시작하기 전에 리턴 어드레스를 암호화 하기 위한 랜덤 키를 생성하고, 동작 402에서 상기 랜덤 키를 키 레지스터(예: 도 2의 레지스터)에 저장할 수 있다. 도 5는 일 실시예에 따라 키 레지스터에 초기 값을 랜덤 값으로 설정하는 프로그램 코드의 예를 도시한 것이다. 도 5를 참조하면, 컴파일러는 메인 함수를 수행하기 이전에 수행되는 코드들에 501과 같이 키 레지스터에 초기 값을 랜덤 값으로 설정하도록 하는 코드를 삽입할 수 있다. 일 실시 예에 따르면, 랜덤 키는 복수 개의 함수에 대해 동일한 값이 적용되거나 복수 개의 함수 별로 서로 다른 값이 생성될 수 있다. 랜덤 키를 생성하는 방식으 로는 다양한 방식이 사용될 수 있으며, 본 개시에서는 랜덤 키를 생성하는 방식에 제한을 두지 않는다. 일 실시 예에 따르면, 랜덤 키가 저장되는 키 레지스터는 프로그램 개발자에 의해 접근 불가하도록 또는 컴파일러에 의 해 지정된 코드 이외의 코드로는 접근 불가하도록 컴파일링 될 수 있다. 동작 403 에서, 전자 장치(예: 프로세서)는 메인 함수의 로직을 수행하면서 외부 함수를 호출할 수 있다. 일 실시 예에서, 전자 장치의 프로세서는 외부 함수 호출 시 리턴 어드레스(RA1)를 스택에 저 장한 후 외부 함수로 점프할 수 있다. 전자 장치의 프로세서는 외부 함수 호출 시 이전 스택 프레임 을 스택에 저장하고 외부 함수 로직 수행을 위한 새로운 스택 프레임을 설정할 수 있다. 동작 404 에서, 전자 장치(예: 프로세서)는 외부 함수의 로직을 수행하기에 앞서, 키 레지스터에 저 장된 랜덤 키를 읽어들이고 상기 랜덤 키를 스택에 저장된 리턴 어드레스(RA1)로 랜덤화 한키 값을 키 레지스터 에 저장할 수 있다. 일 실시 예에서, 랜덤 키와 리턴 어드레스(RA1)를 XOR 연산하여 변환된 키 값이 키 레지스 터에 저장될 수 있다. 랜덤화 방법으로는 XOR 연산 이외에 더하기 또는 빼기 연산 등 다른 방법들이 사용될 수 있다. 동작 405 에서, 전자 장치(예: 프로세서)는 스택에 저장된 리턴 어드레스(RA1)를 키 레지스터에 저장 된 키 값으로 암호화 하여 생성된 리턴 어드레스(RA2)를 스택에 저장할 수 있다. 일 실시 예에서, 리턴 어드레 스를 암호화 하는 방법으로는 스택에 저장된 리턴 어드레스(RA1)와 키 레지스터에 저장된 키 값을 더하기 연산 하거나 빼기 연산하는 방법이 사용될 수 있다. 그 밖에도 리턴 어드레스(RA1)를 암호화 하여 리턴 어드레스 (RA2)를 생성하는 방식으로는 다양한 방식이 사용될 수 있으며, 본 개시에서는 암호화 방식에 제한을 두지 않는 다. 동작 406 에서, 전자 장치(예: 프로세서)는 외부 함수를 위한 지역 변수를 할당하고 외부 함수 내부 의 로직을 수행할 수 있다. 동작 407 에서, 전자 장치(예: 프로세서)는 외부 함수를 종료하고 호출 함수로 리턴 하기에 앞서, 스 택에 저장된 암호화 된 리턴 어드레스(RA2)를 키 레지스터에 저장된 키 값으로 복호화 하고, 복호화 된 리턴 어 드레스(RA2)와 스택에 저장된 리턴 어드레스(RA1)를 비교할 수 있다. 일 실시 예에서, 리턴 어드레스(RA2)를 복 호화 하는 방법으로는, 스택에 저장된 리턴 어드레스(RA1)를 키 레지스터에 저장된 키 값으로 암호화 하는 방법 에 대응되는 복호화 방법을 사용할 수 있다. 예를 들어 암호화 방법으로 더하기 연산을 수행하였다면 복호화 방 법으로 빼기 연산을 수행할 수 있고, 암호화 방법으로 빼기 연산을 수행하였다면 복호화 방법으로 더하기 연산 을 수행 수 있다. 전자 장치(예: 프로세서)는 복호화 된 리턴 어드레스(RA2)와 스택에 저장된 리턴 어드레스(RA1)이 동 일하지 않은 경우 호출 함수로 리턴하지 않고 동작을 종료하며, 복호화 된 리턴 어드레스(RA2)와 스택에 저장된 리턴 어드레스(RA1)가 동일한 경우 동작 408에서 키 레지스터에 저장된 키 값을 스택에 저장된 리턴 어드레스 (RA1)로 다시 랜덤화 하여 키 값을 복구하고, 복구된 키 값을 키 래지스터에 저장할 수 있다. 동작 409에서, 전자 장치(예: 프로세서)는 외부 함수에서 사용 중이던 스택 포인터 및 스택 프레임을 복구하고, 외부 함수를 호출한 함수로 복귀할 수 있다. 도 6은 일 실시 예에 따라 리턴 어드레스를 보호하기 위한 프로그램의 소스 코드의 예를 도시한 것이다. 도 6에 서는 설명의 편의를 위해 일반적인 프로그램 소스 코드(a)와 본 개시의 일 실시 예에 따른 프로그램 소스 코드 (b)를 비교하여 도시하였다. 도 6을 참조하면, 컴파일러는 함수(caller)의 로직을 수행하면서 함수(callee)를 호출하기에 앞서 스택에 함수 (caller)에 대한 리턴 어드레스(RA1)를 저장하도록 프로그램 소스 코드를 컴파일링 할 수 있으며, 이러한 프로 그램 소스 코드는 도 6의 (a)와 (b)에서 모두 동일하게 적용될 수 있다. 일 실시 예에서, 컴파일러는 호출된 함 수(callee)의 로직을 수행하기에 앞서 키 레지스터에 저장된 랜덤 값을 스택에 저장된 리턴 어드레스(RA1)로 랜 덤화하여 생성된 키 값을 키 레지스터에 저장하도록 하기 위한 코드 및 상기 키 레지스터에 저장된 키 값 으로 상기 리턴 어드레스(RA1)를 암호화 하여 생성된 리턴 어드레스(RA2)를 스택에 저장하도록 하기 위한 코드 를 프로그램 소스 코드에 삽입할 수 있다. 601 코드에서 리턴 어드레스(RA1)로 키 레지스터에 저장된 랜덤 값을 랜덤화하여 키 값을 생성하는 방법의 예로는 스택에 저장된 리턴 어드레스(RA1)와 키 레지스터에 저장된 랜덤 값을 XOR 연산을 수행하는 방법이 사용될 수 있으며, 다른 방법으로는 더하기 또는 빼기 연산을 수행하는 방법이 사용될 수 있다. 본 개시에서는 랜덤화 방법에 제한을 두지 않는다. 603 코드에 의해 리턴 어드레스 (RA1)를 키 값으로 암호화 하여 생성된 리턴 어드레스(RA2)가 스택에 저장되며, 리턴 어드레스(RA2)를 암호화 할 때 사용된 키 값은 키 레지스터에 저장되므로 공격자가 접근할 수 없다. 따라서 공격자는 리턴 어드레스 (RA1)를 암호화 하여 리턴 어드레스(RA2)를 생성할 때 사용된 키 값을 알 수 없으므로 공격자에 의해 임의로 리 턴 어드레스(RA2)가 조작되는 것을 방지할 수 있다. 일 실시 예에서, 컴파일러는 호출된 함수(callee)의 로직을 수행하고 호출한 함수(caller)로 리턴하기에 앞서, 스택에 저장된 리턴 어드레스(RA2)와 리턴 어드레스(RA1)를 비교하도록 하는 코드 및 키 레지스터에 저장된 키 값을 복원하도록 하는 코드를 하도록 프로그램 소 스 코드에 삽입할 수 있다. 일 실시 예에 따르면, 603 코드에서 랜덤화 방법으로 XOR 연산을 사용한 경우, 607 코드에서 다시 XOR 연산을 사용함으로써 랜덤화 이전의 키 값을 복원할 수 있다. 일 실시 예에서 605 코드를 수행함으로써 리턴 어드레스(RA1)과 리턴 어드레스(RA2)가 동일함을 확인한 전자 장치(예: 프로세서(21 0))는, 리턴 어드레스(RA1)가 변조되지 않았으며, 공격자에 의한 공격 없이 함수 시작부분부터 정상적으로 로직이 실행되어 리턴 어드레스(RA2)가 정상적으로 생성되었음을 확인할 수 있다. 일 실시 예에서, 전자 장치 (예: 프로세서)는 리턴 어드레스(RA1)와 리턴 어드레스(RA2)가 다른 경우 호출 함수로 리턴(복귀)하지 않 고 예외(exception) 처리를 하여 프로그램을 종료할 수 있다. 도 7은 일 실시 예에 따라 리턴 어드레스를 보호하기 위한 프로그램 소스 코드 및 스택을 도시한 것이다. 도 7 에서는 메인 함수에 의해 함수 1(function 1())이 호출되고, 함수 1(function 1())에 의해 함수 2(function 2())가 호출되는 프로그램 소스 코드 및 스택을 도시하였다. 도 7을 참조하면, 710은 프로그램 시작 시점에 메인 함수를 수행하기 이전에 수행되는 소스 코드이다. 일 실시 예에서, 컴파일러는 프로그램 시작 시점에 메인 함수를 수행하기 이전에 수행되는 코드들에 키 레지스터에 초기 값을 랜덤 값으로 설정하도록 하는 코드를 삽입할 수 있다. 일 실시 예에서, 전자 장치(예: 프 로세서)는 프로그램 시작 시 메인 함수를 수행하기에 앞서 711의 소스 코드를 수행함에 따라 키 레지스터 에 랜덤 값을 저장할 수 있다. 일 실시 예에서, 랜덤 값은 메모리에 미리 저장된 랜덤 값을 읽어 들여서 사용하거나 현재 시간에 기반하여 랜덤 값을 설정하는 등 다양한 방식으로 생성될 수 있으며, 본 개시에서는 랜 덤 값을 생성하는 방식에 제한을 두지 않는다. 키 레지스터에 저장된 랜덤 값은 추후 스택에 저장되 는 리턴 어드레스 값을 암호화 하여 보호하는 데 사용될 수 있다. 일 실시 예에서, 전자 장치(예: 프로세 서)는 710의 소스 코드를 수행한 후 메인 함수의 나머지 부분을 수행함에 따라 메인 함수의 스택 영역 에는 스택 포인터가 저장되며, 메인 함수에 의해 함수 1(function 1())이 호출될 수 있다. 720은 개별 함수(예: function 1(), function 2())에 대한 프로그램 소스 코드의 예를 나타낸 것이다. 컴파일러 는 각 함수의 시작부분에 스택에 저장된 리턴 어드레스(RA11, RA21)로 키 레지스터에 저장된 랜덤 값 을 랜덤화 하여 생성한 키 값을 키 레지스터에 저장하도록 하는 코드(721, 726) 및 스택에 저장된 리턴 어 드레스(RA11, RA21)를 키 레지스터에 저장된 키 값으로 암호화하여 리턴 어드레스(RA12, RA22)를 생성하고, 리턴 어드레스(RA12, RA22)를 스택에 저장하도록 하는 코드(722, 727)를 삽입할 수 있다. 721 및 726 코드에서 리턴 어드레스(RA11)로 키 레지스터에 저장된 랜덤 값을 랜덤화하는 방법의 예로는 스택 영역에 저장된 리턴 어드레스(RA11)와 키 레지스터에 저장된 랜덤 값을 XOR 연산을 수행하는 방법이 사용될 수 있으며, 랜덤화의 다른 방법으로는 더하기 또는 빼기 연산이 사용될 수 있다. 본 개시에서는 랜덤화 의 구체적인 방법에 제한을 두지 않는다. 메인 함수에 의해 함수 1(function 1())이 호출되면, 전자 장치(예: 프로세서)는 함수 1(function 1())의 스택 영역에 리턴 어드레스(RA11) 및 스택 포인터를 저장할 수 있다. 함수 1(function 1())의 시작 부분에서 전자 장치(예: 프로세서)는 721 코드를 수행함에 따라 키 레지스터에 저장된 랜덤 값 을 리턴 어드레스(RA11)로 랜덤화 하여 생성된 키 값을 키 레지스터에 저장하고, 722 코드를 수행함에 따 라 키 레지스터에 랜덤화 되어 저장된 키 값으로 리턴 어드레스(RA11)를 암호화 하여 함수 1(function 1())의 스택 영역에 리턴 어드레스(RA12)로 저장하고, 함수 1(function 1())의 나머지 코드를 수행할 수 있다. 암호화 방법으로는 다양한 방법이 사용될 수 있으며, 본 개시에서는 암호화의 구체적인 방법에 대해 제한 을 두지 않는다. 리턴 어드레스(RA11)를 암호화 하여 리턴 어드레스(RA12)를 생성할 때 사용된 키 값은 키 레지 스터에 저장되므로 공격자가 접근할 수 없다. 따라서 공격자는 리턴 어드레스(RA22)를 암호화 할 때 사용 된 키 값을 알 수 없으므로 공격자에 의해 임의로 리턴 어드레스(RA12)가 조작되는 것을 방지할 수 있다. 일 실시 예에서, 컴파일러는 함수 1(function 1())의 로직 내에서 함수 2(function 2())를 호출하기에 앞서, 함 수 1(function 1())의 스택 영역에 저장된 리턴 어드레스(RA12)를 기 레지스터에 저장된 키 값으로 복호화 하고, 복호화 된 리턴 어드레스(RA12)와 함수 1(function 1())의 스택 영역에 저장된 리턴 어드레 스(RA11)를 비교하도록 하는 코드를 삽입할 수 있다. 일 실시 예에서, 전자 장치(예: 프로세서(21 0))는 723 코드를 수행함에 따라 함수 1(function 1())의 스택 영역에 저장된 리턴 어드레스(RA12)를 키 레지스터에 저장된 키 값으로 복호화 하고, 복호화 된 리턴 어드레스(RA12)와 함수 1(function 1())의 스 택 영역에 저장된 리턴 어드레스(RA11)를 비교하고, 비교 결과 두 값이 다르면 예외(exception) 처리를 하 여 프로그램을 종료할 수 있다. 함수 1(function 1())의 스택 영역에 저장된 리턴 어드레스(RA12)를 키 레 지스터에 저장된 키 값으로 복호화하는 방법은 722 코드에서 리턴 어드레스(RA12)를 암호화 하는 방법에 대응되는 복호화 방법을 사용할 수 있다. 예를 들어 암호화 방법으로 더하기 연산을 수행하였다면 복호화 방법 으로 빼기 연산을 수행할 수 있고, 암호화 방법으로 빼기 연산을 수행하였다면 복호화 방법으로 더하기 연산을 수행 수 있다. 일 실시 예에서 723 코드를 수행함으로써 리턴 어드레스(RA11)과 리턴 어드레스(RA12)가 동일함을 확인한 전자 장치(예: 프로세서)는, 리턴 어드레스(RA11)가 변조되지 않음과 공격자에 의한 공격 없이 함수 1(function 1())가 시작 부분부터 정상적으로 로직이 실행되어 리턴 어드레스(RA12)가 정상적으로 생성되었음을 확인할 수 있다. 일 실시 예에서, 공격자에 의해 임의로 함수 중간 부분으로 점프된 경우에는 코드 721 및 코드 722를 수행하지 않았으므로 두 값이 동일하지 않으며, 이러한 경우에 예외(exception) 처리를 하여 프로그램을 종료함으로써 공격자에 의해 임의로 다른 코드가 수행되는 것을 방지할 수 있다. 함수1(function 1())에 의해 함수 2(function 2())가 호출되면, 전자 장치(예: 프로세서)는 함수 2(function 2())의 스택 영역에 리턴 어드레스(RA21) 및 스택 포인터를 저장할 수 있다. 함수 2(function 2())의 시작 부분에서 전자 장치(예: 프로세서)는 726 코드를 수행함에 따라 키 레지스터에 저 장된 랜덤 값을 리턴 어드레스(RA21)로 랜덤화 하여 생성된 키 값을 키 레지스터에 저장하고, 727 코드를 수행함에 따라 키 레지스터에 랜덤화 되어 저장된 키 값으로 리턴 어드레스(RA21)를 암호화 하여 함수 2(function 2())의 스택 영역에 리턴 어드레스(RA22)로 저장하고, 함수 2(function 2())의 나머지 코드를 수행할 수 있다. 726 코드에서 리턴 어드레스(RA21)로 랜덤 값을 랜덤화하여 키 값을 생성하는 방법의 예로는 스택 영역에 저장된 리턴 어드레스(RA21)와 키 레지스터에 저장된 랜덤 값을 XOR 연산을 수행하는 방 법이 사용될 수 있으며, 본 개시에서는 랜덤화 방법에 제한을 두지 않는다. 일 실시 예에서, 컴파일러는 각 함수를 호출한 함수로 리턴하는 명령어 코드(return)의 앞부분에 각 함수의 스 택 영역에 저장된 리턴 어드레스(RA12, RA22)를 기 레지스터에 저장된 키 값으로 복호화 하고, 복호화 된 리턴 어드레스(RA12, RA22)와 각 함수의 스택 영역에 저장된 리턴 어드레스(RA11, RA21)를 비교하도록 하는 코 드(724, 728)와, 각 함수의 스택 영역에 저장된 리턴 어드레스(RA11, RA21)를 이용하여 키 레지스터에 저 장된 키 값을 각 함수의 호출 이전 값으로 복원하도록 하는 코드(725, 729)를 삽입할 수 있다. 일 실시 예에 따 르면, 721 코드에서 랜덤화 방법으로 XOR 연산을 사용한 경우, 725, 729 코드에서 다시 XOR 연산을 사용함으로 써 랜덤화 이전의 키 값으로 복원할 수 있다. 일 실시 예에서, 전자 장치(예: 프로세서)는 727 코드를 수행한 이후에 함수 2(function 2())의 나머 지 코드들을 수행하며, 함수 1(function 1())로 리턴 하기에 앞서 728 코드를 수행함에 따라 함수 2(function 2())의 스택 영역에 저장된 리턴 어드레스(RA22)를 키 레지스터에 저장된 키 값으로 복호화 하고, 복 호화 된 리턴 어드레스(RA22)와 함수 2(function 2())의 스택 영역에 저장된 리턴 어드레스(RA21)를 비교 하고, 비교 결과 두 값이 다르면 예외(exception) 처리를 하여 프로그램을 종료할 수 있다. 일 실시 예에 따르 면, 726 코드에서 암호화 방법으로 XOR 연산을 사용한 경우, 728 코드에서 복호화 방법으로 다시 XOR 연산을 사 용함으로써 암호화 이전의 리턴 어드레스로 복원할 수 있다. 일 실시 예에서 728 코드를 수행함으로써 리턴 어 드레스(RA21)과 리턴 어드레스(RA22)가 동일함을 확인한 전자 장치(예: 프로세서)는, 리턴 어드레스 (RA21)가 변조되지 않았으며, 공격자에 의한 공격 없이 함수 2(function 2())가 시작 부분부터 정상적으로 로직 이 실행되어 리턴 어드레스(RA22)가 정상적으로 생성되었음을 확인하고 729 코드를 수행함으로써 함수 2(function 2())의 스택 영역에 저장된 리턴 어드레스(RA21)를 이용하여 키 레지스터에 저장된 키 값 을 함수 2(function 2())의 호출 이전 값으로 복원하고, 함수 1(function 1())로 복귀할 수 있다. 일 실시 예 에서, 공격자에 의해 임의로 함수 중간 부분으로 점프된 경우에는 코드 726 및 코드 727를 수행하지 않았으므로 두 값이 동일하지 않으며, 이러한 경우에 예외(exception) 처리를 하여 프로그램을 종료함으로써 공격자에 의해 임의로 다른 코드가 수행되는 것을 방지할 수 있다. 일 실시 예에서, 함수 2(function 2())를 수행하고 함수 1(function 1())로 복귀한 전자 장치(예: 프로세 서)는, 함수 1(function 1())로 리턴하기에 앞서, 724 코드를 수행함에 따라 함수 1(function 1())의 스 택 영역에 저장된 리턴 어드레스(RA12)를 키 레지스터에 저장된 키 값으로 복호화 하고, 복호화 된 리턴 어드레스(RA12)와 함수 1(function 1())의 스택 영역에 저장된 리턴 어드레스(RA11)를 비교하고, 비 교 결과 두 값이 다르면 예외(exception) 처리를 하여 프로그램을 종료할 수 있다. 일 실시 예에 따르면, 722 코드에서 암호화 방법으로 XOR 연산을 사용한 경우, 724 코드에서 복호화 방법으로 다시 XOR 연산을 사용함으로 써 랜덤화 이전의 리턴 어드레스로 복원할 수 있다. 일 실시 예에서 724 코드를 수행함으로써 리턴 어드레스 (RA11)과 리턴 어드레스(RA12)가 동일함을 확인한 전자 장치(예: 프로세서)는, 리턴 어드레스(RA11) 가 변조되지 않았으며, 공격자에 의한 공격 없이 함수 1(function 1())이 시작 부분부터 정상적으로 로직이 실 행되어 리턴 어드레스(RA12)가 정상적으로 생성되었음을 확인하고 725 코드를 수행함으로써 함수1(function 2())의 스택 영역에 저장된 리턴 어드레스(RA11)를 이용하여 키 레지스터에 저장된 값을 함수 2(function 2())의 호출 이전 값으로 복원하고, 함수 1(function 1())를 호출한 함수로 리턴할 수 있다. 일 실 시 예에서, 공격자에 의해 임의로 함수 중간 부분으로 점프된 경우에는 코드 721 및 코드 722를 수행하지 않았으므로 두 값이 동일하지 않으며, 이러한 경우에 예외(exception) 처리를 하여 프로그램을 종료함으로써 공격자 에 의해 임의로 다른 코드가 수행되는 것을 방지할 수 있다. 일 실시 예에서, 복수 개의 프로세스가 동작하는 경우에도 본 개시에 따른 리턴 어드레스를 보호하기 위한 방법 이 적용될 수 있다. 복수 개의 프로세스가 동작하는 경우에는 프로세스간에 컨텍스트 스위칭이 발생될 수 있다. 컨텍스트 스위칭이 발생될 경우에 현재 수행중이던 프로세스(예: 프로세스 1)에 의해 생성되어 키 레지스터에 저장된 값은 프로세스 1에 할당된 메모리에 안전하게 백업되고, 이어서 다른 프로세스(예: 프로세스 2)가 수행 됨에 따라 키 레지스터가 초기화 되고 프로세스 2에 의해 생성된 키 값이 키 레지스터에 저장될 수 있다. 프로 세스 2가 중지 또는 완료됨에 따라 다시 프로세스 1로의 컨텍스트 스위칭이 발생될 경우, 프로세스 2에 의해 생 성되어 키 레지스터에 저장된 값은 프로세스 2에 할당된 메모리에 안전하게 백업되고, 이어서 프로세스 1이 수 행됨에 따라 키 레지스터를 초기화 하고 프로세스 1에 할당된 메모리에 백업되었던 값을 읽어들여서 키 레지스 터에 저장할 수 있다. 도 8a 및 도 8b는 일 실시 예에 따라 빌드 타임 시에 리턴 어드레스를 보호하기 위한 프로그램의 소스 코드를 작성하는 절차를 도시한 것이다. 도 8a는 일 실시 예에 따라 프로그램 시작 시점에 메인 함수가 시작되기 전에 수행되는 코드를 작성하는 절차를 나타내고, 도 8b는 일 실시 예에 따라 개별 함수에서 수행되는 코드를 작성하 는 절차를 나타낸 것이다. 도 8a 및 도 8b에서는 컴파일러에 의해 프로그램 소스 코드를 작성하는 것으로 설명 하였으나, 이미 컴파일 된 코드에 명령어들을 추가할 수도 있다. 도 8a를 참조하면, 동작 801에서 컴파일러는 프로그램 시작 시점에 메인 함수가 시작되기 전에 수행되는 코드로 서 리턴 어드레스를 보호하기 위한 랜덤 키 값을 생성하는 코드를 작성할 수 있다. 일 실시 예에 따르면, 랜덤 키는 복수 개의 함수에 대해 동일한 값이 적용되거나 복수 개의 함수 별로 서로 다른 값이 생성될 수 있다. 랜 덤 키를 생성하는 방식으로는 다양한 방식이 사용될 수 있으며, 본 개시에서는 랜덤 키를 생성하는 방식에 제한 을 두지 않는다. 동작 802에서, 컴파일러는 상기 생성된 랜덤 키를 키 레지스터에 저장하는 코드를 작성할 수 있다. 일 실시 예 에 따르면, 키 레지스터에 저장된 랜덤 키는 추후 함수 실행 시 스택에 저장되는 리턴 어드레스를 보호하기 위 해 사용될 수 있다. 일 실시 예에 따르면, 랜덤 키가 저장되는 키 레지스터는 프로그램 개발자에 의해 접근 불 가하도록 또는 컴파일러에 의해 지정된 코드 이외의 코드로는 접근 불가하도록 컴파일링 될 수 있다. 도 8b를 참조하면, 동작 811에서 컴파일러는 프로그램에 포함된 각 함수의 프롤로그 부분에 키 레지스터에 저장 된 랜덤 키를 스택에 저장된 리턴 어드레스로 랜덤화하고, 랜덤화 된 키 값을 키 레지스터에 저장하는 코드를 작성할 수 있다. 도 8b에서는 랜덤화 방법으로서 키 레지스터에 저장된 랜덤 키와 스택에 저장된 리턴 어드레스 를 XOR 연산하는 방법을 일 예로 도시하였으며, 랜덤화 방법에는 더하기 또는 빼기 연산 등 다른 방법들이 사용 될 수 있다. 동작 812에서, 컴파일러는 프로그램에 포함된 각 함수의 프롤로그 부분에 스택에 저장된 리턴 어드레스(RA1)를 암호화 하고, 암호화 된 리턴 어드레스(RA2)를 스택에 저장하도록 하는 코드를 작성할 수 있다. 일 실시 예에서, 컴파일러는 스택에 저장된 리턴 어드레스(RA1)를 키 레지스터에 저장된 랜덤화 된 키 값으로 암호화 하 고, 암호화 된 리턴 어드레스(RA2)를 스택에 저장하도록 하는 코드를 작성할 수 있다. 일 실시 예에서, 리턴 어 드레스를 암호화 하는 방법으로는 스택에 저장된 리턴 어드레스(RA1)와 키 레지스터에 저장된 키 값을 더하기 연산 하거나 빼기 연산하는 방법이 사용될 수 있다. 그 밖에도 리턴 어드레스(RA1)를 암호화 하여 리턴 어드레 스(RA2)를 생성하는 방식으로는 다양한 방식이 사용될 수 있으며, 본 개시에서는 암호화 방식에 제한을 두지 않 는다. 동작 813에서, 컴파일러는 프로그램에 포함된 각 함수의 바디 부분에, 외부 함수를 호출하기 전에 암호화 된 리 턴 어드레스(RA2)를 스택에 저장된 리턴 어드레스(RA1)과 비교하도록 하는 코드를 작성할 수 있다. 일 실시 예 에서, 컴파일러는 외부 함수를 호출하기 전에 암호화 된 리턴 어드레스(RA2)를 키 레지스터에 저장된 키 값으로 복호화 하고, 복호화 된 리턴 어드레스를 스택에 저장된 리턴 어드레스(RA1)와 비교하고, 비교 결과 두 값이 다 른 경우에 호출 함수로 리턴(복귀)하지 않고 예외(exception) 처리를 하여 프로그램을 종료하도록 하는 코드를 작성할 수 있다. 일 실시 예에서, 리턴 어드레스를 복호화 하는 방법으로는 스택에 저장된 리턴 어드레스(RA2) 와 키 레지스터에 저장된 키 값을 암호화 하는 방법에 대응되는 복호화 방법을 사용할 수 있다. 예를 들어 암호 화 방법으로 더하기 연산을 수행하였다면 복호화 방법으로 빼기 연산을 수행할 수 있고, 암호화 방법으로 빼기 연산을 수행하였다면 복호화 방법으로 더하기 연산을 수행 수 있다. 동작 814에서, 컴파일러는 프로그램에 포함된 각 함수의 에필로그 부분에, 암호화 된 리턴 어드레스(RA2)와 스 택에 저장된 리턴 어드레스(RA1)를 비교하도록 하는 코드를 작성할 수 있다. 일 실시 예에서, 컴파일러는 암호 화 된 리턴 어드레스(RA2)를 키 레지스터에 저장된 랜덤화 된 키 값으로 복호화 하고, 복호화 된 리턴 어드레스 를 스택에 저장된 리턴 어드레스(RA1)와 비교하고, 비교 결과 두 값이 다른 경우에 호출 함수로 리턴(복귀)하지 않고 예외(exception) 처리를 하여 프로그램을 종료하도록 하는 코드를 작성할 수 있다. 일 실시 예에서, 리턴 어드레스를 복호화 하는 방법으로는 스택에 저장된 리턴 어드레스(RA2)와 키 레지스터에 저장된 리턴 어드레스 를 암호화 하는 방법에 대응되는 복호화 방법을 사용할 수 있다. 예를 들어 암호화 방법으로 더하기 연산을 수 행하였다면 복호화 방법으로 빼기 연산을 수행할 수 있고, 암호화 방법으로 빼기 연산을 수행하였다면 복호화 방법으로 더하기 연산을 수행 수 있다. 동작 815 에서, 컴파일러는 프로그램에 포함된 각 함수의 에필로그 부분에 키 레지스터에 저장된 키 값을 복구 하는 코드를 작성할 수 있다. 일 실시 예에서, 컴파일러는 키 레지스터에 저장된 키 값을 스택에 저장된 리턴 어드레스(RA1)로 다시 랜덤화 하여 복구된 키 값을 키 레지스터에 저장할 수 있다. 일 실시 예에서, 동작 811에 서의 랜덤화 방법으로 XOR 연산을 사용한 경우, 동작 815에서 다시 XOR 연산을 사용함으로써 랜덤화 이전의 키 값으로 복원할 수 있다. 일 실시 예에서, 동작 811에서의 랜덤화 방법으로 더하기 또는 빼기 연산을 사용한 경 우, 동작 815에서 빼기 또는 더하기 연산을 사용함으로써 랜덤화 이전의 키 값으로 복원할 수 있다. 이제까지 본 발명에 대하여 그 바람직한 실시 예들을 중심으로 살펴보았다. 본 발명이 속하는 기술 분야에서 통 상의 지식을 가진 자는 본 발명이 본 발명의 본질적인 특성에서 벗어나지 않는 범위에서 변형된 형태로 구현될 수 있음을 이해할 수 있을 것이다. 그러므로 개시된 실시 예들은 한정적인 관점이 아니라 설명적인 관점에서 고 려되어야 한다. 본 발명의 범위는 전술한 설명이 아니라 특허청구범위에 나타나 있으며, 그와 동등한 범위 내에 있는 모든 차이점은 본 발명에 포함된 것으로 해석되어야 할 것이다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8a 도면8b"}
{"patent_id": "10-2023-0173681", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시 예에 따른 네트워크 환경 내의 전자 장치의 블럭도이다. 도 2는 일 실시 예에 따른 전자 장치의 구성의 일 예를 설명하기 위한 도면이다. 도 3은 일 실시 예에 따른 보안을 위한 메모리 관리 방법을 설명하기 위한 도면이다. 도 4는 일 실시 예에 따른 전자 장치의 동작의 일 예를 설명하기 위한 흐름도이다. 도 5는 일 실시예에 따라 키 레지스터에 초기 값을 랜덤 값으로 설정하는 프로그램 코드의 예를 도시한 도면이 다. 도 6은 일 실시 예에 따라 리턴 어드레스를 보호하기 위한 프로그램의 소스 코드의 예를 도시한 도면이다. 도 7은 일 실시 예에 따라 리턴 어드레스를 보호하기 위한 프로그램 소스 코드 및 스택을 도시한 도면이다. 도 8a 및 도 8b는 일 실시 예에 따라 리턴 어드레스를 보호하기 위한 프로그램의 소스 코드를 작성하는 절차를 도시한 도면이다."}
