{"patent_id": "10-2024-7039735", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0002695", "출원번호": "10-2024-7039735", "발명의 명칭": "시뮬레이션 장치, 시뮬레이션 시스템 및 그 시뮬레이션 방법, 저장 매체", "출원인": "베이징 요우쭈쥐 네트워크 테크놀러지 컴퍼니 리", "발명자": "리, 타오"}}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "신경망 처리장치를 시뮬레이션하기 위한 시뮬레이션 장치로서,상기 신경망 처리장치를 시뮬레이션하는 객체 모델과 통신하고 상기 시뮬레이션 장치에서 상기 객체 모델의 프록시 역할을 하도록 구성된 프록시 모듈;상기 시뮬레이션 장치를 관리하도록 구성된 관리 모듈;상기 프록시 모듈과 상기 관리 모듈을 통신 연결하도록 구성된 상호 연결 모듈;을 포함하되,상기 시뮬레이션 장치는 호스트에 의해 발송된 태스크를 수신하고, 상기 프록시 모듈을 통해 상기 태스크와 관련된 작업 정보를 상기 객체 모델에 발송하며, 상기 프록시 모듈을 통해 상기 객체 모델이 상기 작업 정보를 처리한 후 반환되는 피드백 정보를 수신하고, 상기 피드백 정보를 상기 호스트에 제공하는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 프록시 모듈과 상기 호스트 사이는 소켓 방식, 공유 저장 방식 및/또는 메시지 큐 방식으로 통신하는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항 또는 제2항에 있어서,상기 프록시 모듈의 주소 공간은 프록시 레지스터 공간 및 모델 공간을 포함하고,상기 프록시 레지스터 공간은 상기 신경망 처리장치의 레지스터를 정의하는 데 사용되며, 상기 신경망 처리장치의 레지스터는 메모리 주소 방식으로 위치결정되고;상기 모델 공간은 상기 신경망 처리장치의 매개변수 및 상기 태스크와 관련된 입력 및/또는 출력을 저장하는 데사용되는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 모델 공간은 상기 객체 모델의 저장 공간에 매핑되는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제3항 또는 제4항에 있어서,상기 모델 공간은 상기 프록시 모듈에 의해 상기 호스트와 공유되는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제3항 내지 제5항 중 어느 한 항에 있어서,공개특허 10-2025-0002695-3-상기 프록시 모듈의 주소 공간은 구성 명령 공간을 더 포함하고,상기 구성 명령 공간은 상기 신경망 처리장치의 레지스터의 구성 명령 및 상기 태스크와 관련된 제어 명령을 저장하는 데 사용되는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 프록시 모듈은 복수의 기준 주소 레지스터 공간을 포함하고, 상기 복수의 기준 주소 레지스터는 제1 기준주소 레지스터 공간 및 제2 기준 주소 레지스터 공간을 포함하며,상기 프록시 레지스터 공간은 상기 제1 기준 주소 레지스터 공간에 대응되고, 상기 구성 명령 공간은 상기 제2기준 주소 레지스터 공간에 대응되는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 구성 명령 공간은 상기 프록시 모듈에 의해 상기 호스트와 공유되는 공유 저장 파일에 매핑되고 상기 공유저장 파일은 상기 호스트에 위치하는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제6항에 있어서,상기 프록시 모듈은, 상기 구성 명령 공간의 내용을 기반으로, 상기 프록시 레지스터 공간 및 상기 모델 공간의내용을 상기 객체 모델에 제공하여 상기 객체 모델을 구성 및 스케줄링하고 작업 시뮬레이션을 수행하도록 구성된 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항 내지 제9항 중 어느 한 항에 있어서,상기 프록시 모듈과 상기 객체 모델 사이는 메시지 큐 방식으로 통신하는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1항 내지 제10항 중 어느 한 항에 있어서,상기 관리 모듈에는 운영체제 커널이 실행되고, 상기 프록시 모듈의 드라이버는 상기 운영체제 커널에 로드되는시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항 내지 제11항 중 어느 한 항에 있어서,상기 프록시 모듈은 인터럽트 레지스터를 포함하고, 상기 호스트는 상기 인터럽트 레지스터에 상기 태스크와 관련된 통지 정보를 기입하여 인터럽트 방식으로 상기 관리 모듈에 통지하여 상기 태스크를 수행하는 시뮬레이션장치.공개특허 10-2025-0002695-4-청구항 13 제1항 내지 제12항 중 어느 한 항에 있어서,입출력 모듈을 더 포함하되,상기 입출력 모듈과 상기 호스트 사이는 소켓 방식으로 통신하여 상기 태스크를 수신하고,상기 입출력 모듈은 상기 태스크를 상기 프록시 모듈 또는 상기 관리 모듈에 발송하도록 구성되는 시뮬레이션장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제1항 내지 제13항 중 어느 한 항에 있어서,상기 시뮬레이션 장치는 가상 시뮬레이션 플랫폼에 의해 구현되고, 상기 관리 모듈은 가상 중앙 처리 장치에 의해 구현되는 시뮬레이션 장치."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "시뮬레이션 시스템으로서,제1항 내지 제14항 중 어느 한 항에 따른 시뮬레이션 장치, 상기 객체 모델 및 상기 호스트를 포함하되,상기 호스트는 상기 태스크를 획득하여 상기 태스크를 상기 시뮬레이션 장치에 발송하도록 구성되며;상기 객체 모델은 상기 작업 정보를 처리하여 상기 피드백 정보를 얻도록 구성되는 시뮬레이션 시스템."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서,상기 객체 모델의 추상화 수준은 알고리즘 수준, 시스템 구조 수준, 트랜잭션 수준 또는 레지스터 전송 수준인시뮬레이션 시스템."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제15항 또는 제16항에 있어서,상기 객체 모델은 상기 신경망 처리장치의 적어도 일부 판독 저장 파이프라인과 계산 파이프라인을 모델링하고,상기 신경망 처리장치의 각 동작에 대한 평균 실행 시간을 통계하는 시뮬레이션 시스템."}
{"patent_id": "10-2024-7039735", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제15항 내지 제17항 중 어느 한 항에 따른 시뮬레이션 시스템에 적용되는 시뮬레이션 방법으로서,상기 호스트를 통해 태스크를 발송하는 단계;상기 시뮬레이션 장치를 통해 상기 태스크를 수신하고 해석하여, 상기 태스크와 관련된 작업 정보를 상기 객체모델에 발송하는 단계;상기 객체 모델이 상기 작업 정보를 처리하여 상기 피드백 정보를 얻는 단계;상기 시뮬레이션 장치를 통해 상기 피드백 정보를 상기 호스트에 제공하는 단계;를 포함하는 시뮬레이션 방법.공개특허 10-2025-0002695-5-청구항 19 비일시적 컴퓨터 판독 가능 저장 매체로서,상기 비일시적 컴퓨터 판독 가능 저장 매체에는 컴퓨터 실행 가능 명령이 저장되어 있고, 상기 컴퓨터 실행 가능 명령이 프로세서에 의해 실행될 때 제18항에 따른 시뮬레이션 방법을 구현하는 비일시적 컴퓨터 판독 가능저장 매체."}
{"patent_id": "10-2024-7039735", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 실시예는 시뮬레이션 장치, 시뮬레이션 시스템 및 그 시뮬레이션 방법, 비일시적 컴퓨터 판독 가능 저 장 매체를 제공한다. 상기 시뮬레이션 장치는, 신경망 처리장치를 시뮬레이션하는 데 사용되고, 신경망 처리장치 를 시뮬레이션하는 객체 모델과 통신하고 시뮬레이션 장치에서 객체 모델의 프록시 역할을 하도록 구성된 프록시 모듈; 시뮬레이션 장치를 관리하도록 구성된 관리 모듈; 프록시 모듈과 관리 모듈을 통신 연결하도록 구성된 상 호 연결 모듈;을 포함한다. 시뮬레이션 장치는 호스트에 의해 발송된 태스크를 수신하고, 프록시 모듈을 통해 태 스크와 관련된 작업 정보를 객체 모델에 발송하며, 프록시 모듈을 통해 객체 모델이 작업 정보를 처리한 후 반환 되는 피드백 정보를 수신하고, 피드백 정보를 호스트에 제공한다."}
{"patent_id": "10-2024-7039735", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 출원은 2022년 5월 31일자로 제출된 중국 특허 출원 제202210613143.4호의 우선권을 주장하고, 상기 중국 특 허 출원의 개시 내용은 본 출원의 일부로서 그 전체가 포함된다. 본 발명의 실시예는 시뮬레이션 장치, 시뮬레이션 시스템 및 그 시뮬레이션 방법, 비일시적 컴퓨터 판독 가능 저장 매체에 관한 것이다."}
{"patent_id": "10-2024-7039735", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능(인공지능, Artificial Intelligence)의 발전으로, 알고리즘 모델의 매개변수 수가 급격히 증가하고, 연산력에 대한 요구가 증가하고 있다. 기존 하드웨어 아키텍처(예를 들어, CPU(중앙 처리 장치, central processing unit)/GPU(그래픽 처리 장치, graphics processing unit))의 경우, 아키텍처 설계 단계에서 다양한 비즈니스 요구 간의 균형을 고려하기에, AI 애플리케이션에서 제공하는 연산력은 제한적이다. 이에 따라, 도메 인 전용 가속기(Domain-Specific Accelerator, DSA)가 등장하였다. DSA의 핵심 사상 역시 전용 하드웨어를 사 용하여 전용 작업을 수행하는 것이고, DSA는 고정된 애플리케이션이 아닌 도메인(Domain) 내의 애플리케이셔을 충족시키므로, DSA는 유연성과 전용성의 절충점을 충족시킬 수 있다. 이 내용 부분은 구상을 간단한 방식으로 소개하기 위해 제공되고, 이러한 구상은 후속"}
{"patent_id": "10-2024-7039735", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 도면을 참조하여 본 발명의 실시예를 더 상세하게 설명하고자 한다. 도면에서 본 발명의 일부 실시예들을 나타내지만, 이에 한정될 것이 아니라, 다양한 형태로 본 발명을 구현할 수 있음을 이해할 수 있으며, 반대로, 이러한 실시예들은 본 발명을 더 명확하고 완전하게 이해하기 위해 제공된다. 본 발명의 도면과 실시예는 예시 적인 역할에만 사용되며, 본 발명의 보호 범위를 제한하기 위한 것이 아님을 이해해야 한다. 본 발명의 방법 실시형태에 기재된 각 단계는 상이한 순서, 및/또는 병렬로 수행될 수 있음을 이해해야 한다. 또한, 방법 실시형태는 추가적인 단계를 포함할 수 있고 및/또는 예시된 단계의 수행을 생략할 수 있다. 본 발 명의 범위는 이러한 측면에서 제한되지 않는다. 본 명세서에 사용된 용어 “포함” 및 그 변형은 개방형 포함, 즉 “포함하지만 이에 한정되지 않음”이다. 용 어 “기반”은 “적어도 부분적으로 기반”이다. 용어 “하나의 실시예”는 “적어도 하나의 실시예”를 나타내 고; 용어 “다른 실시예”는 “적어도 하나의 다른 실시예”를 나타내며; 용어 “일부 실시예”는 “적어도 일 부 실시예”를 나타낸다. 다른 용어의 관련 정의는 아래 설명에서 제공된다. 본 발명에 언급된 “제1”, “제2”와 같은 개념은 상이한 장치, 모델 또는 유닛을 구분하기 위해 사용된 것일 뿐, 이러한 장치, 모듈 또는 유닛이 수행하는 기능의 순서 또는 상호 의존 관계를 한정하기 위해 사용되는 것이 아님을 유의해야 한다. 본 발명에 언급된 “하나”, “복수”의 변형은 제한적이지 않고 예시적이며, 당업자는 문맥상 명백히 달리 나 타내지 않는 한, “하나 이상”으로 이해해야 하는 것을 유의해야 한다. 본 발명의 실시형태에서 복수의 장치 간에 상호 작용하는 메시지 또는 정보의 명칭은 설명의 목적으로만 사용되 고, 이러한 메시지 또는 정보의 범위를 제한하는 데 사용되지 않는다. 최근 몇 년간의 발전으로, AI 하드웨어 가속기의 아키텍처 설계가 점점 더 복잡해지고 있다. 초기 싱글 코어 공 유 메모리에서 점차적으로 현재의 동종 매니코어-분산식 메모리로 발전하였고, AI 하드웨어 가속기의 코어 설계 도 단순한 블류(Very Long Instruction Word, VLIW) 구조에서 튜링의 완전한 명령어 세트 아키텍처(ISA, Instruction Set Architecture)로 발전하였으며, 명령어 구동 데이터 액세스를 위한 두 가지 구현 아키텍처, 즉 Master-Slave(데이터 블록) 및 Data-Streaming(데이터 흐름)이 공존한다. AI 하드웨어 가속기의 초기 아키텍처 설계 탐색 및 후속 검증 등을 위해, AI 하드웨어 가속기를 시뮬레이션하는 완벽한 시뮬레이션 시스템이 필수 불 가결해졌고, 즉, 현재 AI 하드웨어 가속기는 아키텍처 설계 및 기능 검증을 위한 간단하고 효율적인 시뮬레이션 프레임워크가 부족하다. AI 컴파일러와 관련된 최적화 전략에는 주로 연산자 융합, 분할, IO/계산 병렬 스케줄링 등이 포함되고, 이러한 최적화 전략은 거대한 최적화 검색 공간을 구성한다. 기본 가속기에서 각 최적화 전략의 최종 실행 효율은 상이 하고, 각 최적화 전략을 평가하고 최적화 검색 공간을 줄이기 위해서는 비용 모델(cost-model)이 필요하다. 비 용 모델은 과도한 컴파일 단계의 오버헤드를 도입하지 않으면서 충분히 정확해야 한다. 현재, 오픈 소스 전체시스템 시뮬레이션 플랫폼에는 gem5 시뮬레이터가 포함되고, gem5 시뮬레이터의 단점에는 주로 시스템이 복잡하 고, AI 가속기 모델링용으로 설계되지 않았으며, 실행 효율이 낮은 등이 포함되며, gem5 시뮬레이터는 비용 모 델로서 오버헤드가 너무 크다. 따라서, 현재 AI 컴파일러는 평가를 위해 고성능 cost-model을 필요로 한다. 본 발명의 적어도 하나의 실시예는 시뮬레이션 장치를 제공한다. 상기 시뮬레이션 장치는, 신경망 처리장치를 시뮬레이션하는 데 사용되고, 프록시 모듈, 관리 모듈 및 상호 연결 모듈을 포함한다. 프록시 모듈은 신경망 처 리장치를 시뮬레이션하는 객체 모델과 통신하여 시뮬레이션 장치에서 객체 모델의 프록시 역할을 하도록 구성되 고; 관리 모듈은 시뮬레이션 장치를 관리하도록 구성되며; 상호 연결 모듈은 프록시 모듈과 관리 모듈을 통신 연결하도록 구성된다. 시뮬레이션 장치는 호스트에 의해 발송된 태스크를 수신하고, 프록시 모듈을 통해 태스크 와 관련된 작업 정보를 객체 모델에 발송하며, 프록시 모듈을 통해 객체 모델이 작업 정보를 처리한 후 반환되 는 피드백 정보를 수신하고, 피드백 정보를 호스트에 제공한다. 본 발명의 실시예에서 제공하는 시뮬레이션 장치는 신경망 처리장치의 전체 시스템 시뮬레이션 플랫폼을 모델링 하여, 신경망 처리장치의 아키텍처 설계 및 탐색 및 기능 검증을 효과적으로 구현할 수 있고, 신경망 처리장치 의 구조 및 기능 설계 과정을 가속화함으로써, 하드웨어로 인한 신경망 처리장치의 발전 제한을 피할 수 있다. 또한, 상기 시뮬레이션 장치의 구조는 간단하고, 구현이 편리하다. 본 발명의 적어도 하나의 실시예는 시뮬레이션 시스템 및 그 시뮬레이션 방법, 비일시적 컴퓨터 판독 가능 저장 매체를 더 제공한다. 이하 도면을 결부하여 본 발명의 실시예를 상세히 설명하지만, 본 발명은 이러한 구체적인 실시예에 한정되지 않는다. 본 발명의 실시예의 다음 설명을 명확하고 간결하게 유지하기 위해, 본 발명은 일부 공지된 기능 및 공 지된 부재에 대한 상세한 설명을 생략한다. 도 1A는 본 발명의 적어도 하나의 실시예에서 제공하는 시뮬레이션 장치의 하드웨어 아키텍처의 모식도이고, 도 1B는 본 발명의 적어도 하나의 실시예에서 제공하는 다른 시뮬레이션 장치의 하드웨어 아키텍처의 모식도이며, 도 2는 본 발명의 적어도 하나의 실시예에서 제공하는 시뮬레이션 시스템의 하드웨어 아키텍처의 모식도이다. 본 발명의 실시예에서 제공하는 시뮬레이션 장치는 신경망 처리장치를 시뮬레이션하는 데 사용될 수 있고, 상기 신경망 처리장치는 하드웨어 형태로 구현될 수 있으며, 예를 들어, 프로그래밍 언어 기반의 칩으로 구현될 수 있다. 예를 들어, 상기 신경망 처리장치는 컨볼루션 연산, 매트릭스 연산 등을 구현하는 데 사용될 수 있다. 도 1A 및 도 1B에 도시된 바와 같이, 본 발명의 일부 실시예에서, 상기 시뮬레이션 장치는 프록시 모듈 , 관리 모듈 및 상호 접속 모듈을 포함할 수 있다. 도 2에 도시된 바와 같이, 프록시 모듈(11 0)은 신경망 처리장치를 시뮬레이션하는 객체 모델과 통신하여 시뮬레이션 장치에서 객체 모델의 프 록시 역할을 하도록 구성되며, 즉 객체 모델은 신경망 처리장치의 기능을 시뮬레이션하는 데 사용되고; 관 리 모듈은 시뮬레이션 장치를 관리하도록 구성되며; 상호 연결 모듈은 프록시 모듈과 관리 모듈을 통신 연결하도록 구성된다. 도 2에 도시된 시뮬레이션 장치는 도 1A에 도시된 시뮬레이션 장 치이지만, 시뮬레이션 시스템의 시뮬레이션 장치는 도 1B에 도시된 시뮬레이션 장치일 수도 있음을 유의해야 한다. 예를 들어, 관리 모듈은 프록시 모듈을 관리하여 프록시 모듈이 상응한 기능을 수행하도록 제어 할 수 있다. 예를 들어, 도 2에 도시된 바와 같이, 시뮬레이션 장치는 호스트에 의해 발송된 태스크(task)를 수신 하고, 프록시 모듈을 통해 태스크와 관련된 작업 정보를 객체 모델에 발송하며, 프록시 모듈을 통해 객체 모델이 작업 정보를 처리한 후 반환되는 피드백 정보를 수신하고, 피드백 정보를 호스트에 제공한다. 예를 들어, 시뮬레이션 장치는 가상 시뮬레이션 플랫폼을 통해 구현되고, 예를 들어, 시뮬레이션 장치 는 QEMU(Quick EMUlator) 가상 플랫폼(virt platform) 등으로 구현될 수 있다. 예를 들어, 관리 모듈은 가상 중앙 처리 장치를 통해 구현되고, 예를 들어, 일부 실시예에서, 가상 중앙 처리 장치는 RISC(Reduced Instruction Set Computer RISC)-V(V는 5세대 RISC를 나타냄) 코어일 수 있다. 예를 들어, 태스크는 객체 식별, 매트릭스 연산(예를 들어, 매트릭스 곱셈 연산)과 같은 신경망 처리장치에 의 해 실행되어야 하는 모든 태스크일 수 있다. 예를 들어, 프록시 모듈과 호스트 사이는 적어도 하나의 방식으로 통신할 수 있고, 예를 들어, 적어 도 하나의 방식은 소켓 방식, 공유 저장 방식 및/또는 메시지 큐 방식 통신을 포함할 수 있다. 도 2에 도시된 바와 같이, 일부 실시예에서, 프록시 모듈은 소켓 방식, 공유 저장 방식 및 메시지 큐 방식으로 호스트 와 통신한다. 소켓 방식은 Unix 도메인 소켓(UDS, Unix Domain Socket) 방식일 수 있다. 공유 저장 방식 은 저장 파일을 공유하는 방식으로 통신하는 것을 나타내고, 예를 들어, 공유되는 저장 파일은 호스트의 /dev/shm/ivshmem 파일일 수 있다. Ivshmem 파일은 호스트에 의해 생성된 메모리 영역을 상이한 QEMU의 프로세스 간에 공유할 수 있다. 메시지 큐(message Queue) 방식(MQ1)은 선입선출(First Input First Output, FIFO) 방식으로 메시지를 전달할 수 있다. 예를 들어, 프록시 모듈과 호스트 사이에서, 공유 저장 방식으로 데이터 양이 큰 데이터 간의 통신을 구현하고, 소켓 방식 및/또는 메시지 큐 방식으로 데이터 양이 작은 데이터 간의 통신을 구현한다. 예를 들어, 프록시 모듈과 객체 모델 사이는 또한 적어도 하나의 방식으로 통신할 수 있고, 예를 들 어, 프록시 모듈과 객체 모델 사이는 메시지 큐 방식으로 통신하며, 도 2에 도시된 바와 같이, 일부 실시예에서, 프록시 모듈과 객체 모델은 메시지 큐 방식으로 통신하고, 예를 들어, 프록시 모듈(11 0)은 메시지 큐 방식(MQ2)으로 태스크와 관련된 작업 정보를 객체 모델에 발송하며, 객체 모델은 메 시지 큐 방식(MQ3)으로 피드백 정보를 프록시 모듈에 발송한다. 유사하게, 메시지 큐 방식(MQ2) 및 메시지 큐 방식(MQ3)은 FIFO 방식을 사용하여 메시지를 전달할 수 있다. 예를 들어, 객체 모델은 플러그형 방식으로 시뮬레이션 장치에 연결될 수 있고, 다시 말해서, 시뮬레 이션 장치는 상이한 객체 모델을 시뮬레이션할 수 있으며, 예를 들어, 상이한 객체 모델은 상이한 신경망 처리장치를 시뮬레이션할 수 있다. 예를 들어, 객체 모델은 신경망 처리장치의 연산 속도를 가속화하고, 연산 시간을 절약하며, 연산 효율을 향상시킬 수 있다. 예를 들어, 도 2에 도시된 바와 같이, 호스트는 외부 기기로부터 태스크를 획득하고, 소켓 방식으로 태스 크를 시뮬레이션 장치에 발송할 수 있다. 예를 들어, 신경망 처리장치의 매개변수 및 태스크와 관련된 입력 및/또는 출력 등 정보는 공유 저장 방식으로 호스트 및 시뮬레이션 장치에 의해 액세스되어 판독 또는 기입 등 동작을 수행한다. 예를 들어, 태스 크와 관련된 입력 및/또는 출력은 태스크의 유형에 따라 결정될 수 있고, 예를 들어, 일부 실시예에서, 태스크 는 이미지 내의 대상 객체를 식별하고, 대상 객체가 표시된 이미지를 호스트에 피드백할 수 있으며, 이때, 입력된 이미지는 태스크와 관련된 입력일 수 있고, 객체 모델을 통해 이미지를 식별하고 대상 객체가 표시 된 이미지는 태스크와 관련된 출력일 수 있다. 예를 들어, 시뮬레이션 장치는 피드백 정보를 메시지 큐 방식으로 호스트에 발송(예를 들어, 동기 화)할 수 있다. 예를 들어, 일부 실시예에서, 도 1B에 도시된 바와 같이, 시뮬레이션 장치는 입출력 모듈을 더 포함 할 수 있고, 입출력 모듈은 호스트와 상호 작용할 수 있으며, 예를 들어, 소켓 방식으로 호스트(20 0)와 통신하여 태스크를 수신한다. 예를 들어, 입출력 모듈은 태스크를 프록시 모듈 또는 관리 모듈 에 발송하도록 구성된다. 예를 들어, 입출력 모듈은 태스크를 저장하기 위한 버퍼(buffer) 등을 포함 할 수 있다. 예를 들어, 도 1A 및 도 1B에 도시된 바와 같이, 프록시 모듈의 주소 공간은 프록시 레지스터 공간(Re) 및 모델 공간(Mem1)을 포함할 수 있다. 예를 들어, 프록시 레지스터 공간(Re)은 신경망 처리장치의 레지스터를 정의하는 데 사용되고, 신경망 처리장치 의 레지스터는 모두 메모리 매핑(memory mapped)된 것이며, memory mapped은 기기의 레지스터와 메모리 통합 주 소를 의미하며, 즉 메모리 주소로 기기의 레지스터를 위치결정함으로써, 신경망 처리장치의 레지스터는 메모리 공간에 정의되며, 메모리 주소의 방식으로 위치결정됨으로써 판독 및 기입을 구현할 수 있다. 예를 들어, 프록시 레지스터 공간(Re)은 메시지 큐 방식으로 호스트 및 객체 모델과 통신할 수 있다. 예를 들어, 모델 공간(Mem1)은 신경망 처리장치의 매개변수 및 태스크와 관련된 입력 및/또는 출력을 저장하는 데 사용된다. 예를 들어, 일부 실시예에서, 모델 공간(Mem1)은 프록시 모듈에 의해 호스트와 공유되고, 이때, 예를 들어, 모델 공간(Mem1)은 공유 저장 방식으로 호스트와 통신한다. 예를 들어, 일부 실시예에서, 도 2에 도시된 바와 같이, 모델 공간(Mem1)은 객체 모델의 저장 공간(Mem2)에 매 핑될 수 있다. 모델 공간(Mem1)과 저장 공간(Mem2)은 동일한 주소 공간이고, 실제 저장은 호스트의 공유 저장 파일에 매핑되는 것을 알 수 있다. 다시 말해서, 모델 공간(Mem1)은 실제로 시뮬레이션 장치, 호스트 및 객체 모델에 의해 액세스될 수 있고, 예를 들어, 호스트가 신경망 처리장치의 매개변수 및 태스크와 관련된 입력 및/또는 출력 등 정보를 모델 공간(Mem1)에 기입하면, 객체 모델은 모델 공간(Mem 1)에 기입된 태스크와 관련된 입력 및/또는 출력 등 정보를 직접 판독하여 관련 처리를 수행할 수 있다. 예를 들어, 일부 실시예에서, 도 2에 도시된 바와 같이, 프록시 모듈의 주소 공간은 구성 명령 공간(Mem 3)을 더 포함할 수 있다. 구성 명령 공간(Mem3)은 신경망 처리장치의 레지스터의 구성 명령 및 태스크와 관련된 제어 명령을 저장하는 데 사용된다. 예를 들어, 일부 실시예에서, 프록시 모듈, 관리 모듈 및 상호 연결 모듈은 고속 직렬 컴퓨터 확장 버스(PCIe, peripheral component interconnect express) 시스템에 마운팅될 수 있다. PCIe 시스템에는 루트 콤플렉스(RC, root complex), 브리지(Bridge), Switch, 엔드포인트(Endpoint) 등 기기 유형이 포함될 수 있고, 루트 콤플렉스는 CPU와 PCle버스 사이의 인터페이스이며, Bridge는 다른 버스(예: PCI 또는 PCI-x, 나아 가 다른 PCle 버스)와의 인터페이스를 제공하고, 포워딩 브리징이라고도 지칭되며; Switch는 확장 또는 통합 기 능을 제공하고, 더 많은 기기를 하나의 PCle 포트에 연결할 수 있도록 허용하며, Switch는 패킷 라우터 역할을 할 수 있고, 주소 또는 기타 라우팅 정보에 따라 지정된 패킷이 어떤 경로를 취해야 하는지 식별하는 PCIe-to- PCIe 브리지이며; Endpoint는 PCIe 버스 시스템의 토폴로지 중 가장 말단에 있고, 일반적으로 버스 작동의 개시 자(initiator, PCI 버스의 호스트와 유사) 또는 종료자(Completers, PCI 버스의 슬레이브와 유사) 역할을 한다. 예를 들어, 일부 실시예에서, 상호 연결 모듈은 PCIe 시스템의 루트 콤플렉스일 수 있다. 예를 들어, 일부 실시예에서, 프록시 모듈은 PCIe 시스템의 endpoint일 수 있다. 예를 들어, 프록시 모듈 은 복수의 기준 주소 레지스터(base address register, BAR) 공간을 포함할 수 있고, 복수의 기준 주소 레지스터는 제1 기준 주소 레지스터 공간과 제2 기준 주소 레지스터 공간을 포함한다. 일부 실시예에서, 복수의 기준 주소 레지스터 공간은 BRA0 공간~BRA5 공간을 포함할 수 있고, 제1 기준 주소 레지스터 공간은 BRA0 공간 일 수 있으며, 제2 기준 주소 레지스터 공간은 BRA3 공간일 수 있다. 예를 들어, 프록시 레지스터 공간(Re)은 BRA0 공간과 같은 제1 기준 주소 레지스터 공간에 대응되고, 구성 명령 공간(Mem3)은 BRA3 공간과 같은 제2 기준 주소 레지스터 공간에 대응된다. 기준 주소 레지스터 공간은 PCIe의 BAR 공간을 의미하고; 시뮬레이션 장치는 호스트(HOST)의 기기로서, PCIe 인터페이스를 통해 HOST에 연결되며; HOST가 시뮬레이션 장치에 액세스하려면, 시뮬레이션 장치의 공간을 PCIe의 BAR 공간에 매핑해야 하고; 시뮬레 이션 장치에 복수의 독립적으로 액세스할 수 있는 공간이 있으면, PCIe는 매핑을 위해 복수의 BAR 공간을 제공 한다. 예를 들어, 구성 명령 공간(Mem3)은 프록시 모듈에 의해 호스트와 공유되는 공유 저장 파일(ivshme m)에 매핑되고 공유 저장 파일(ivshmem)은 호스트에 위치한다. 다시 말해서, 시뮬레이션 장치에서, BAR3 공간에 대한 모든 액세스는 모두 호스트의 공유 저장 파일(ivshmem)로 포워딩되고, 호스트는 상 기 공유 저장 파일(ivshmem)을 작성하여 시뮬레이션 장치의 프록시 모듈에 구성 명령을 발송한다. 예를 들어, 본 발명의 일부 실시예에서, 도 2에 도시된 바와 같이, 모델 공간(Mem1), 저장 공간(Mem2) 및 구성 명령 공간(Mem3)의 경우, 실제 저장은 호스트의 공유 저장 파일에 매핑되고, 모델 공간(Mem1)과 저장 공간 (Mem2)은 공유 저장 파일의 동일한 위치에 매핑될 수 있으며, 구성 명령 공간(Mem3)이 공유 저장 파일에 매핑되 는 위치는 모델 공간(Mem1)/저장 공간(Mem2)이 공유 저장 파일에 매핑되는 위치와 상이하다. 예를 들어, 프록시 모듈은 구성 명령 공간(Mem3)의 내용을 기반으로 프록시 레지스터 공간(Re) 및 모델 공 간(Mem1)의 내용을 객체 모델에 제공하여 객체 모델을 구성 및 스케줄링하고 작업 시뮬레이션을 수행 하도록 구성된다. 모델 공간(Mem1)이 객체 모델의 저장 공간(Mem2)으로 매핑될 수 있는 경우, 객체 모델은 모델 공간(Mem1)에 직접 액세스하여 태스크와 관련된 입력 등과 같은 필요한 데이터를 획득할 수 있음을 유의해 야 한다. 예를 들어, 호스트는 소켓 방식으로 프록시 모듈에 인터럽트 풀링할 수 있고, 즉 호스트에 의해 발송되고 객체 모델에 의해 실행되는 태스크는 인터럽트 방식으로 수행될 수 있다.예를 들어, 일부 실시예에서, 프록시 모듈은 인터럽트 레지스터를 포함할 수 있고, 호스트는 인터럽트 레 지스터에 태스크와 관련된 통지 정보를 기입하여 인터럽트 방식으로 관리 모듈에 통지하여 태스크를 수행 한다. 예를 들어, 호스트의 메모리 관리자(runtime) 프로세스가 소켓 방식으로 시뮬레이션 장치와 통 신하는 내용은 다음과 같다. 메모리 관리자는 시뮬레이션 장치의 프록시 모듈의 인터럽트 레지스터에 기입 동작을 수행하여 태스크와 관련된 통지 정보를 기입하고; 프록시 모듈의 인터럽트 레지스터에 태스크 와 관련된 통지 정보가 기입된 후, 관리 모듈을 인터럽트 풀링하며; 프록시 모듈의 인터럽트가 관리 모듈에 풀링된 후, 프록시 모듈의 인터럽트 핸들러(프록시 모듈의 드라이버의 일부에 속함)를 실행하고, 인터럽트 핸들러는 커널 상태(프로세스가 시스템 호출로 인해 커널 코드에서 실행될 때 커널 실행 상 태(커널 상태)이고, 이때, 권한 레벨이 가장 높음)에 있으므로, 사용자 상태(프로세스가 사용자 자신의 코드를 실행할 때 사용자 실행 상태(즉 사용자 상태)이고, 이때, 권한 레벨이 가장 낮음)의 스케줄러 에 통지해야 하며, 예를 들어, 신호(signal) 방식을 사용하여 사용자 상태의 스케줄러에 새로운 태스크(즉 호스트에 의 해 발송된 태스크)를 수신하도록 통지할 수 있다. 예를 들어, 도 1A 및 도 1B에 도시된 바와 같이, 시뮬레이션 장치는 소프트웨어 모듈을 더 포함할 수 있고, 소프트웨어 모듈은 애플리케이션(App) 및 가상 머신 시스템(Guest OS)을 포함하며, 애플리케이션 (App)은 다양한 도구(Tools), 라이브러리 파일(Library), 스케줄러(Scheduler) 등을 포함하고, 가상 머신 시스 템에는 운영체제 커널 및 드라이버가 포함될 수 있다. 예를 들어, 관리 모듈에는 운영체제 커널이 실행되고, 예를 들어, 운영체제 커널은 Linux 5.2 커널 등일 수 있다. 예를 들어, 프록시 모듈의 드라이버는 운영체제 커널에 로드되어 실행되고, 예를 들어, 프록시 모듈 의 드라이버는 커널 모듈(kernel module)을 통해 커널에 로드될 수 있다. 커널 모듈(kernel module)은 운영체제 의 개념이고; 드라이버는 일반적으로 운영체제에 커널 모듈로 로드된다. 본 발명의 적어도 하나의 실시예는 시뮬레이션 시스템을 더 제공한다. 예를 들어, 도 2에 도시된 바와 같이, 시뮬레이션 시스템은 시뮬레이션 장치, 호스트 및 객체 모델을 포함할 수 있다. 시뮬레이션 장치, 호스트와 객체 모델 사이의 통신 방식은 시뮬레 이션 장치에 대한 상기 실시예의 설명을 참조할 수 있고, 중복되는 부분은 더 반복하지 않음을 유의해야 한다. 예를 들어, 호스트는 태스크를 획득하고 태스크를 시뮬레이션 장치에 발송하도록 구성된다. 예를 들 어, 호스트는 메모리 관리자를 포함하고, 메모리 관리자는 시뮬레이션 장치와 통신하여 태스크를 시 뮬레이션 장치에 전송하고 시뮬레이션 장치로부터 객체 모델이 태스크와 관련된 작업 정보를 처 리한 후 반환되는 피드백 정보를 수신한다. 예를 들어, 객체 모델은 작업 정보를 처리하여 피드백 정보를 얻도록 구성된다. 예를 들어, 일부 실시예에서, 객체 모델은 하드웨어 가속기(예를 들어, 신경망 처리장치)의 기능을 시뮬레 이션하는 데 사용되고, SystemC 언어를 사용하여 모델링할 수 있다. SystemC는 한 세트의 C++ 클래스 라이브러 리로 구성된 모델링 플랫폼으로, 시뮬레이션 코어를 추가하고, 시스템 수준, 행동 설명 수준 및 레지스터 변환 수준에서 하드웨어 모델링을 지원할 수 있다. 또 예를 들어, 객체 모델은 Verlog 언어를 사용하여 모델링할 수도 있다. 예를 들어, 객체 모델의 추상화 수준은 알고리즘 수준(ALM), 시스템 구조 수준(SAM), 트랜잭션 수준(TLM) 및 레지스터 전송 수준(RTL) 중 적어도 하나이다. 예를 들어, 일부 실시예에서, 객체 모델은 매트릭스(Matrix) 실행 유닛, 벡터(Vector) 실행 유닛 등 실행 유닛, 온칩 정적 랜덤 액세스 메모리(Static Random-Access Memory, SRAM), SRAM 컨트롤러 등 저장 관련 유닛, 및 마이크로컨트롤러 유닛(Microcontroller Unit, MCU) 등을 포함할 수 있다. 예를 들어, 일부 실시예에서, 객체 모델은 신경망 처리장치의 적어도 일부 판독 저장 파이프라인과 계산 파이프라인을 모델링하고, 신경망 처리장치의 각 동작에 대한 평균 실행 시간을 통계한다. 예를 들어, CPU를 예 로 들면, 계산 파이프라인은 정수 실행 유닛, 부동 소수점 실행 유닛 등을 나타내고; 상응하게, 판독 저장 파이 프라인은 IO 작업을 나타내고, IO 작업은 LOAD(로드)/SAVE(저장) 실행 유닛을 나타내며, 일반적으로 LSU라고도지칭한다. 예를 들어, 각 동작의 평균 실행 시간은 각 단계(예를 들어, 단계는 pipeline stage를 나타냄)의 실행 주기 (cycle) 수, 즉 각 동작을 실행하는 주기(cycle) 수를 나타낼 수 있다. 예를 들어, 각 동작에 대한 평균 실행 시간을 통계하여 주기가 대략정확한 모델을 계산하여 얻을 수 있다. cost-model로서 객체 모델의 실행 효율을 향상시키기 위해, 객체 모델은 기능 모드/성능 모드 두 가 지 모드를 지원하고; 성능 모드에서, pipeline(예를 들어, pipeline은 데이터를 교환하는 파이프라인 세그먼트 의 선형 통신 모델을 나타냄)에서의 지연을 시뮬레이션하고, 판독 저장 파이프라인 및 계산 파이프라인에 대응 되는 실제 동작은 실행되지 않으며, 성능 모드에서 정확한 시뮬레이션 cycle 수를 얻을 수 있고, 기능 모드에 비해, 실행 속도가 한 자릿수 향상된다. 본 발명의 실시예에서, SystemC를 사용하여 객체 모델의 판독 저장 파이프라인 및 계산 파이프라인에서의 지연을 모델링하고, 상기 객체 모델은 고성능 비용 모델에 대한 AI 컴파일러의 요구를 충족시킴으로써, 객 체 모델은 AI 컴파일러의 비용 모델로 사용될 수 있으며, AI 컴파일러의 cost-model로서, 칩에서의 resent50 네트워크의 추론 시간 성능 지표를 크게 향상시킬 수 있고, 예를 들어 추론 시간을 줄일 수 있다. 본 발명의 적어도 하나의 실시예는 시뮬레이션 시스템에 적용되는 시뮬레이션 방법을 더 제공하고, 시뮬레이션 시스템은 본 발명의 어느 하나의 실시예에서 제공하는 시뮬레이션 시스템일 수 있으며, 예를 들어, 도 2에 도시 된 시뮬레이션 시스템이다. 도 3은 본 발명의 적어도 하나의 실시예에서 제공하는 시뮬레이션 방법의 예시적인 흐름도이다. 도 3에 도시된 바와 같이, 상기 시뮬레이션 방법은 이하의 단계(S10~S13)를 포함할 수 있다. 단계(S10): 호스트를 통해 태스크를 발송한다. 단계(S11): 시뮬레이션 장치를 통해 태스크를 수신하고 해석하여, 태스크와 관련된 작업 정보를 객체 모델에 발 송한다. 단계(S12): 객체 모델은 작업 정보를 처리하여 피드백 정보를 얻는다. 단계(S13): 시뮬레이션 장치를 통해 피드백 정보를 호스트에 제공한다. 예를 들어, 도 2에 도시된 시뮬레이션 시스템을 예로 들면, 단계(S10)는 호스트에 의해 구현되고, 단계(S10)에서, 호스트는 외부 기기로부터 태스크를 수신하고, 태스크를 시뮬레이션 장치에 발송할 수 있다. 예를 들어, 일부 실시예에서, 상기 태스크는 사용자에 의해 외부 기기를 통해 호스트에 발송될 수 있다. 예를 들어, 단계(S11)는 시뮬레이션 장치에 의해 구현되고, 예를 들어, 시뮬레이션 장치의 관리 모듈 은 태스크를 해석할 수 있으며, 다음, 시뮬레이션 장치의 프록시 모듈은 태스크와 관련된 작업 정보를 객체 모델에 발송한다. 예를 들어, 단계(S12)는 객체 모델에 의해 구현되고, 단계(S12)에서, 객체 모델은 작업 정보를 처리 하여 피드백 정보를 획득할 수 있으며, 상기 피드백 정보는 시뮬레이션 장치에 발송될 수 있다. 예를 들어, 피드백 정보는 객체 모델이 작업 정보를 처리한 결과를 포함할 수 있고, 예를 들어, 이미지 내의 대 상을 식별하는 태스크인 경우, 상기 피드백 정보는 이미지 내에 상기 대상이 있을 확률 등을 포함할 수 있다. 예를 들어, 단계(S13)는 시뮬레이션 장치에 의해 구현되고, 단계(S13)에서, 시뮬레이션 장치는 프록 시 모듈을 통해 객체 모델이 작업 정보를 처리한 후 반환되는 피드백 정보를 수신한다. 시뮬레이션 방법에 의해 달성될 수 있는 기술적 효과에 관하여, 상기 시뮬레이션 장치 및 시뮬레이션 시스템의 실시예의 관련 설명을 참조할 수 있고, 중복되는 부분은 더 반복하지 않는다. 본 발명의 적어도 하나의 실시예는 시뮬레이션 장치를 더 제공하고, 상기 시뮬레이션 장치는 하나 이상의 메모 리 및 하나 이상의 프로세서를 포함할 수 있다. 시뮬레이션 장치의 컴포넌트는 제한적이지 않고 예시적이며, 실 제 적용 요구에 따르면, 상기 시뮬레이션 장치는 다른 컴포넌트를 가질 수도 있고, 본 발명의 실시예는 이에 대 해 구체적으로 제한하지 않는다는 점에 유의해야 한다. 예를 들어, 하나 이상의 메모리는 컴퓨터 실행 가능 명령을 비일시적으로 저장하는 데 사용되고; 하나 이상의 프로세서는 상기 컴퓨터 실행 가능 명령을 실행하도록 구성된다. 컴퓨터 실행 가능 명령이 하나 이상의 프로세서에 의해 실행될 때 본 발명의 어느 하나의 실시예에 따른 시뮬레이션 방법 중 하나 이상의 단계를 구현한다. 상기 시뮬레이션 방법의 각 단계의 구체적인 구현 및 관련 해석 내용은 상기 시뮬레이션 방법의 실시예를 참조 할 수 있고, 중복되는 부분은 여기서 더 반복하지 않는다. 예를 들어, 프로세서와 메모리는 서로 직접적으로 또는 간접적으로 통신할 수 있다. 예를 들어, 프로세서와 메모리는 네트워크를 통해 통신할 수 있다. 네트워크는 무선 네트워크, 유선 네트워크, 및/또는 무선 네트워크와 유선 네트워크의 임의의 조합을 포함할 수 있다. 프로세서와 메모리는 시스템 버스를 통해 서로 통신할 수도 있고, 본 발명은 이에 대해 제한하지 않는다. 예를 들어, 프로세서와 메모리는 서버단(또는 클라우드)에 설치될 수 있다. 예를 들어, 프로세서는 원하는 기능을 수행하기 위해 시뮬레이션 장치의 다른 컴포넌트를 제어할 수 있다. 프로 세서는 중앙 처리 장치(CPU), 그래픽 처리 장치(GPU), 네트워크 프로세서(NP) 등일 수 있고; 프로세서는 데이터 처리 능력 및/또는 프로그램 실행 능력을 갖는 다른 형태의 처리 유닛일 수도 있고, 예를 들어, 디지털 신호 프 로세서(DSP), 주문형 집적 회로(ASIC), 필드 프로그래머블 게이트 어레이(FPGA), 텐서 처리 장치(TPU) 또는 다 른 프로그래밍 가능 논리 소자, 분리 게이트 또는 트랜지스터 논리 소자, 분리 하드웨어 컴포넌트이다. 중앙 처 리 장치(CPU)는 X86 또는 ARM 아키텍처 등일 수 있다. 예를 들어, 메모리는 컴퓨터 판독 가능 매체일 수 있고, 하나 이상의 컴퓨터 프로그램 제품의 임의의 조합을 포 함할 수 있으며, 컴퓨터 프로그램 제품은 휘발성 메모리 및/또는 비휘발성 메모리와 같은 다양한 형태의 컴퓨터 판독 가능 저장 매체를 포함할 수 있다. 휘발성 메모리는 예를 들어 랜덤 액세스 메모리(RAM) 및/또는 캐시 메 모리(cache) 등을 포함할 수 있다. 비휘발성 메모리는 예를 들어 읽기 전용 메모리(ROM), 하드 디스크, 소거 및 프로그래밍 가능 읽기 전용 메모리(EPROM), 휴대용 컴팩트 디스크 읽기 전용 메모리(CD-ROM), USB 메모리, 플래 시 메모리 등을 포함할 수 있다. 상기 컴퓨터 판독 가능 저장 매체에는 하나 이상의 컴퓨터 판독 가능 명령이 저장될 수 있고, 프로세서는 상기 컴퓨터 판독 가능 명령을 실행하여 시뮬레이션 장치의 다양한 기능을 구현할 수 있다. 저장 매체에는 또한 다양한 애플리케이션과 다양한 데이터가 저장될 수 있다. 시뮬레이션 장치에 의해 달성될 수 있는 기술적 효과에 관하여, 상기 시뮬레이션 방법의 실시예의 관련 설명을 참조할 수 있고, 중복되는 부분은 더 반복하지 않는다. 도 4는 본 발명의 적어도 하나의 실시예에서 제공하는 비일시적 컴퓨터 판독 가능 저장 매체의 모식도이다. 예 를 들어, 도 4에 도시된 바와 같이, 비일시적 컴퓨터 판독 가능 저장 매체는 하나 이상의 컴퓨터 실행 가능 명령을 비일시적으로 저장할 수 있다. 예를 들어, 컴퓨터 실행 가능 명령이 프로세서에 의해 실행될 때 본 발명의 어느 하나의 실시예에 따른 시뮬레이션 방법의 하나 이상의 단계를 수행할 수 있다. 예를 들어, 상기 비일시적 컴퓨터 판독 가능 저장 매체는 상기 시뮬레이션 장치에 적용될 수 있다. 예를 들 어, 비일시적 컴퓨터 판독 가능 저장 매체는 상기 시뮬레이션 장치의 메모리를 포함할 수 있다. 예를 들어, 비일시적 컴퓨터 판독 가능 저장 매체에 관한 설명은 시뮬레이션 장치의 실시예에서 메모리에 대한 설명을 참조할 수 있고, 중복되는 부분은 더 반복하지 않는다. 이하 도 5를 참조하면, 도 5는 본 발명의 실시예를 구현하는 데 적합한 전자기기의 구조 모식도를 도시한 다. 상기 전자기기는 단말 기기(예를 들어, 컴퓨터) 또는 프로세서 등일 수 있고, 상기 실시예의 시뮬레이 션 방법을 실행하는 데 사용될 수 있다. 본 발명의 실시예의 전자기기는 휴대폰, 노트북 컴퓨터, 디지털 방송 수신기, 개인용 휴대 정보 단말기(Personal Digital Assistant, PDA라고 약칭함), 태블릿 컴퓨터(Portable Android Device, PAD라고 약칭함), 휴대용 미디어 플레이어(Portable Media Player, PMP라고 약칭함), 차량용 단말(예를 들어 차량용 네비게이션 단말), 웨어러블 전자기기와 같은 모바일 단말 및 디지털 TV, 데스크톱 컴퓨 터, 스마트 홈 기기와 같은 고정 단말을 포함할 수 있지만 이에 한정되지 않는다. 도 5에 도시된 전자기기는 하 나의 예시일 뿐이며, 본 발명의 실시예의 기능과 사용 범위에 어떠한 제한도 주어서는 안 된다. 도 5에 도시된 바와 같이, 전자기기는 처리 장치(예를 들어 중앙 처리 장치, 그래픽 처리 장치 등)를 포함할 수 있고, 이는 읽기 전용 메모리(ROM)에 저장된 프로그램 또는 저장 장치로부터 랜덤 액세스 메모리(RAM)에 로드된 프로그램에 따라 다양한 적절한 동작 및 처리를 수행할 수 있다. RAM에는 전자 기기의 작동에 필요한 다양한 프로그램 및 데이터도 저장되어 있다. 처리 장치, ROM 및 RAM은 버스를 통해 서로 연결된다. 입력/출력(I/O) 인터페이스도 버스에 연결된다. 일반적으로, 예를 들어 터치 스크린, 터치 패드, 키보드, 마우스, 카메라, 마이크, 가속도계, 자이로스코프 등 을 포함하는 입력 장치; 예를 들어 액정 디스플레이(Liquid Crystal Display, LCD), 스피커, 진동기 등을 포함하는 출력 장치; 예를 들어 자기 테이프, 하드 디스크 등을 포함하는 저장 장치; 및 통신 장치 는 I/O 인터페이스에 연결될 수 있다. 통신 장치는 전자기기가 데이터를 교환하기 위해 다 른 기기와 무선 또는 유선으로 통신하도록 허용할 수 있다. 도 5는 다양한 장치를 갖는 전자기기를 도시하 지만, 도시된 모든 장치를 구현하거나 구비해야 하는 것이 아니라는 것을 이해해야 한다. 대안적으로 더 많거나 더 적은 장치를 구현하거나 구비할 수 있다. 특히, 본 발명의 실시예에 따르면, 위에서 흐름도를 참조하여 설명된 프로세스는 컴퓨터 소프트웨어 프로그램으 로 구현될 수 있다. 예를 들어, 본 발명의 실시예는 비일시적 컴퓨터 판독 가능 매체에 탑재된 컴퓨터 프로그램 을 포함하는 컴퓨터 프로그램 제품을 포함하고, 상기 컴퓨터 프로그램은 흐름도에 도시된 방법을 실행하기 위한 프로그램 코드를 포함하여, 위에서 설명한 시뮬레이션 방법 중 하나 이상의 단계를 수행한다. 이러한 실시예에 서, 상기 컴퓨터 프로그램은 통신 장치를 통해 네트워크로부터 다운로드되어 장착될 수 있거나, 저장 장치 로부터 장착될 수 있거나, ROM으로부터 장착될 수 있다. 상기 컴퓨터 프로그램이 처리 장치에 의해 실행될 때, 처리 장치가 본 발명의 실시예의 시뮬레이션 방법에서 한정된 상기 기능을 수행하도록 할 수 있다. 본 발명의 맥락에서, 컴퓨터 판독 가능 매체는 명령 실행 시스템, 장치 또는 기기에 사용되거나 명령 실행 시스 템, 장치 또는 기기와 함께 사용되는 프로그램을 포함하거나 저장할 수 있는 유형 매체일 수 있음을 유의해야 한다. 컴퓨터 판독 가능 매체는 컴퓨터 판독 가능 신호 매체 또는 컴퓨터 판독 가능 저장 매체 또는 위에서 설 명한 양자의 임의의 조합일 수 있다. 컴퓨터 판독 가능 저장 매체는 예를 들어 전기, 자기, 빛, 전자기, 적외선, 또는 반도체 시스템, 장치 또는 소자, 또는 임의의 이들의 조합일 수 있지만 이에 한정되지 않는다. 컴 퓨터 판독 가능 저장 매체의 보다 구체적인 예는, 하나 이상의 와이어를 갖는 전기적 연결, 휴대용 컴퓨터 디스 크, 하드 디스크, 랜덤 액세스 메모리(RAM), 읽기 전용 메모리(ROM), 및 소거 및 프로그래밍 가능 읽기 전용 메 모리(EPROM 또는 플래시 메모리), 광섬유, 휴대용 컴팩트 디스크 읽기 전용 메모리(CD-ROM), 광학 저장 장치, 자기 저장 장치, 또는 위에서 언급한 임의의 적절한 조합을 포함할 수 있지만 이에 한정되지 않는다. 본 발명에 서, 컴퓨터 판독 가능 저장 매체는 프로그램을 포함하거나 저장하는 임의의 유형 매체일 수 있고, 상기 프로그 램은 명령 실행 시스템, 장치 또는 소자에 의해 사용되거나 이와 결합하여 사용될 수 있다. 본 발명에서, 컴퓨 터 판독 가능 신호 매체는 베이스밴드에서 전파되거나 반송파의 일부로서 전파되는 데이터 신호를 포함할 수 있 고, 여기에는 컴퓨터 판독 가능 프로그램 코드가 탑재된다. 이러한 전파되는 데이터 신호는 전자기 신호, 광 신 호 또는 상술한 임의의 적절한 조합을 포함하는 다양한 형태를 취할 수 있지만 이에 한정되지 않는다. 컴퓨터 판독 가능 신호 매체는 또한 컴퓨터 판독 가능 저장 매체 이외의 임의의 컴퓨터 판독 가능 매체일 수 있고, 상 기 컴퓨터 판독 가능 신호 매체는 명령 실행 시스템, 장치 또는 소자에 의해 사용되거나 이와 결합하여 사용하 기 위한 프로그램을 발송, 전파 또는 전송할 수 있다. 컴퓨터 판독 가능 매체에 포함된 프로그램 코드는 전선, 광케이블, RF(무선 주파수) 등, 또는 상기 매체의 임의의 적절한 조합을 포함하지만 이에 한정되지 않는 임의의 적절한 매체로 전송할 수 있다. 상기 컴퓨터 판독 가능 매체는 상기 전자기기에 포함된 것일 수 있고; 상기 전자기기에 조립되지 않고 독립적으 로 존재할 수도 있다. 하나 이상의 프로그래밍 언어 또는 이들의 조합으로 본 발명의 동작을 수행하기 위한 컴퓨터 프로그램 코드를 작성할 수 있고, 상기 프로그래밍 언어에는 Java, Smalltalk, C++와 같은 객체 지향 프로그래밍 언어가 포함되 지만 이에 한정되지 않으며, “C” 언어 또는 유사한 프로그래밍 언어와 같은 기존의 절차적 프로그래밍 언어도 포함된다. 프로그램 코드는 사용자 컴퓨터에서 완전히 실행되거나, 사용자 컴퓨터에서 부분적으로 실행되거나, 독립적인 소프트웨어 패키지로서 실행되거나, 일부가 사용자 컴퓨터에서 실행되고 일부가 원격 컴퓨터에서 실행 되거나, 또는 원격 컴퓨터 또는 서버에서 완전히 실행될 수 있다. 원격 컴퓨터에 관한 경우, 원격 컴퓨터는 임 의의 종류의 네트워크(근거리 통신망(LAN) 또는 광역 네트워크(WAN)를 포함)를 통해 사용자 컴퓨터에 연결될 수 있거나, 외부 컴퓨터(예를 들어 인터넷 서비스 제공업체를 이용하여 인터넷을 통해 연결)에 연결될 수 있다. 도면의 흐름도 및 블록도는 본 발명의 다양한 실시예에 따른 시스템, 방법 및 컴퓨터 프로그램 제품에 의해 구 현될 수 있는 시스템 아키텍처, 기능 및 동작을 나타낸다. 이 점에서, 흐름도 또는 블록도의 각 블록은 지정된 논리적 기능을 구현하기 위한 하나 이상의 실행 가능한 명령을 포함하는 하나의 모듈, 프로그램 세그먼트, 또는 코드의 일부를 나타낼 수 있다. 또한 일부 대안적인 구현에서, 블록에 언급된 기능은 도면에 언급된 순서와 상 이하게 발생할 수 있다는 점에 유의해야 한다. 예를 들어, 차례로 표시된 두 블록은 실제로 실질적으로 병렬로 실행될 수 있고, 관련된 기능에 따라 때로는 역순으로 실행될 수도 있다. 또한 블록도 및/또는 흐름도의 각 블록, 및 블록도 및/또는 흐름도의 블록의 조합은, 지정된 기능 또는 동작을 수행하는 하드웨어 기반의 전용 시스 템에 의해 구현될 수 있거나, 전용 하드웨어와 컴퓨터 명령의 조합으로 구현될 수 있다는 점에 유의해야 한다. 본 발명의 실시예에 설명된 관련되는 유닛은 소프트웨어로 구현될 수 있고, 하드웨어로 구현될 수도 있다. 예를 들어, 유닛의 명칭은 특정 경우에 상기 유닛 자체를 한정하지 않는다. 본 명세서에서 위에 설명된 기능은 하나 이상의 하드웨어 논리 부재에 의해 적어도 부분적으로 수행될 수 있다. 예를 들어, 비제한적으로, 사용될 수 있는 예시적인 유형의 하드웨어 논리 부재에는 필드 프로그래머블 게이트 어레이(FPGA), 주문형 집적 회로(ASIC), 특정 용도 표준 제품(ASSP), 시스템 온 칩(SOC), 복잡한 프로그램 가능 한 로직 소자(CPLD) 등이 포함된다. 제1 양태에서, 본 발명의 하나 이상의 실시예에 따르면, 시뮬레이션 장치는, 신경망 처리장치를 시뮬레이션하는 데 사용되고, 상기 신경망 처리장치를 시뮬레이션하는 객체 모델과 통신하고 상기 시뮬레이션 장치에서 상기 객 체 모델의 프록시 역할을 하도록 구성된 프록시 모듈; 상기 시뮬레이션 장치를 관리하도록 구성된 관리 모듈; 상기 프록시 모듈과 상기 관리 모듈을 통신 연결하도록 구성된 상호 연결 모듈;을 포함하며, 여기서, 상기 시뮬 레이션 장치는 호스트에 의해 발송된 태스크를 수신하고, 상기 프록시 모듈을 통해 상기 태스크와 관련된 작업 정보를 상기 객체 모델에 발송하며, 상기 프록시 모듈을 통해 상기 객체 모델이 상기 작업 정보를 처리한 후 반 환되는 피드백 정보를 수신하고, 상기 피드백 정보를 상기 호스트에 제공한다. 본 발명의 하나 이상의 실시예에 따르면, 상기 프록시 모듈과 상기 호스트 사이는 소켓 방식, 공유 저장 방식 및/또는 메시지 큐 방식으로 통신한다. 본 발명의 하나 이상의 실시예에 따르면, 상기 프록시 모듈의 주소 공간은 프록시 레지스터 공간, 모델 공간을 포함하고, 상기 프록시 레지스터 공간은 상기 신경망 처리장치의 레지스터를 정의하는 데 사용되며, 상기 신경 망 처리장치의 레지스터는 메모리 주소 방식으로 위치결정되고; 상기 모델 공간은 상기 신경망 처리장치의 매개 변수 및 상기 태스크와 관련된 입력 및/또는 출력을 저장하는 데 사용된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 모델 공간은 상기 객체 모델의 저장 공간에 매핑된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 모델 공간은 상기 프록시 모듈에 의해 상기 호스트와 공유된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 프록시 모듈의 주소 공간은 구성 명령 공간을 더 포함하고, 상기 구성 명령 공간은 상기 신경망 처리장치의 레지스터의 구성 명령 및 상기 태스크와 관련된 제어 명령을 저장하 는 데 사용된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 프록시 모듈은 복수의 기준 주소 레지스터 공간을 포함하고, 상 기 복수의 기준 주소 레지스터는 제1 기준 주소 레지스터 공간 및 제2 기준 주소 레지스터 공간을 포함하며, 상 기 프록시 레지스터 공간은 상기 제1 기준 주소 레지스터 공간에 대응되고, 상기 구성 명령 공간은 상기 제2 기 준 주소 레지스터 공간에 대응된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 구성 명령 공간은 상기 프록시 모듈에 의해 호스트와 공유되는 공유 저장 파일에 매핑되고 상기 공유 저장 파일은 상기 호스트에 위치한다. 본 발명의 하나 이상의 실시예에 따르면, 상기 프록시 모듈은, 상기 구성 명령 공간의 내용을 기반으로, 상기 프록시 레지스터 공간 및 상기 모델 공간의 내용을 상기 객체 모델에 제공하여 상기 객체 모델을 구성 및 스케 줄링하고 작업 시뮬레이션을 수행하도록 구성된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 프록시 모듈과 상기 객체 모델 사이는 메시지 큐 방식으로 통신 한다. 본 발명의 하나 이상의 실시예에 따르면, 상기 관리 모듈에는 운영체제 커널이 실행되고, 상기 프록시 모듈의 드라이버는 상기 운영체제 커널에 로드된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 프록시 모듈은 인터럽트 레지스터를 포함하고, 상기 호스트는 상 기 인터럽트 레지스터에 상기 태스크와 관련된 통지 정보를 기입하여 인터럽트 방식으로 상기 관리 모듈에 통지 하여 상기 태스크를 수행한다. 본 발명의 하나 이상의 실시예에 따르면, 시뮬레이션 장치는 입출력 모듈을 더 포함하되, 상기 입출력 모듈과 상기 호스트 사이는 소켓 방식으로 통신하여 상기 태스크를 수신하고, 상기 입출력 모듈은 상기 태스크를 상기프록시 모듈 또는 상기 관리 모듈에 발송하도록 구성된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 시뮬레이션 장치는 가상 시뮬레이션 플랫폼에 의해 구현되고, 상 기 관리 모듈은 가상 중앙 처리 장치에 의해 구현된다. 제2 양태에서, 본 발명의 하나 이상의 실시예에 따르면, 시뮬레이션 시스템은, 본 발명의 어느 하나의 실시예에 따른 시뮬레이션 장치, 상기 객체 모델 및 상기 호스트를 포함하며, 여기서, 상기 호스트는 상기 태스크를 획득 하여 상기 태스크를 상기 시뮬레이션 장치에 발송하도록 구성되며; 상기 객체 모델은 상기 작업 정보를 처리하 여 상기 피드백 정보를 얻도록 구성된다. 본 발명의 하나 이상의 실시예에 따르면, 상기 객체 모델의 추상화 수준은 알고리즘 수준, 시스템 구조 수준, 트랜잭션 수준 또는 레지스터 전송 수준이다. 본 발명의 하나 이상의 실시예에 따르면, 상기 객체 모델은 상기 신경망 처리장치의 적어도 일부 판독 저장 파 이프라인과 계산 파이프라인을 모델링하고, 상기 신경망 처리장치의 각 동작에 대한 평균 실행 시간을 통계한다. 제3 양태에서, 본 발명의 하나 이상의 실시예에 따르면, 본 발명의 어느 하나의 실시예에 따른 시뮬레이션 시스 템에 적용되는 시뮬레이션 방법은, 상기 호스트를 통해 태스크를 발송하는 단계; 상기 시뮬레이션 장치를 통해 상기 태스크를 수신하고 해석하여, 상기 태스크와 관련된 작업 정보를 상기 객체 모델에 발송하는 단계; 상기 객체 모델이 상기 작업 정보를 처리하여 상기 피드백 정보를 얻는 단계; 상기 시뮬레이션 장치를 통해 상기 피 드백 정보를 상기 호스트에 제공하는 단계;를 포함한다. 제4 양태에서, 본 발명의 하나 이상의 실시예에 따르면, 비일시적 컴퓨터 판독 가능 저장 매체에 있어서, 상기 비일시적 컴퓨터 판독 가능 저장 매체에는 컴퓨터 실행 가능 명령이 저장되어 있고, 상기 컴퓨터 실행 가능 명 령이 프로세서에 의해 실행될 때 본 발명의 어느 하나의 실시예에 따른 시뮬레이션 방법을 구현한다. 이상 설명은 단지 본 발명의 바람직한 실시예 및 적용되는 기술적 원리에 대한 설명일 뿐이다. 당업자는 본 발 명에 관한 개시 내용이 상기 기술특징의 특정 조합으로 구성된 기술적 해결수단에 한정되지 않고, 동시에 상기 발명의 구상을 벗어나지 않으면서, 상기 기술특징 또는 그와 동등한 특징을 임의로 조합되어 형성한 다른 기술 적 해결수단에 포괄되어야 함을 이해해야 한다. 예를 들어 상기 특징과 본 발명에 개시된(단, 이에 한정되지 않 음) 유사한 기능을 갖는 기술특징이 상호 대체되어 형성한 기술적 해결수단이다. 또한, 특정 순서로 각 동작을 설명하였지만, 이러한 동작들이 도시된 특정 순서로 수행되거나 순차적인 순서로 수행될 것을 요구하는 것으로 이해되어서는 안 된다. 특정 환경에서, 멀티태스킹과 병렬 처리가 유리할 수 있다. 마찬가지로, 위의 논술에는 여러 구체적인 구현 세부 사항이 포함되어 있지만, 이러한 내용은 본 발명의 범위를 제한하는 것으로 해석되어서는 안 된다. 별도의 실시예의 맥락에서 설명된 특정 특징은 단일 실시예에서 조합하여 구현될 수도 있다. 반대로, 단일 실시예의 맥락에서 설명된 다양한 특징은 복수의 실시예에서 개별적 으로 또는 임의의 적절한 하위 조합으로 구현될 수도 있다. 구조적 특징 및/또는 방법론적 동작에 특정한 언어로 본 주제를 설명하였지만, 첨부된 청구범위에 한정된 주제 가 위에서 설명된 특정 특징 또는 동작에 반드시 한정되는 것은 아니라는 점을 이해해야 한다. 대조적으로, 위 에서 설명된 특정 특징 또는 동작은 단지 청구범위를 구현하는 예시적인 형태일 뿐이다. 본 발명에 대하여 다음과 같이 설명해야 할 사항이 더 있다: 본 발명의 실시예의 도면은 본 발명의 실시예와 관련된 구조에 관한 것일 뿐이고, 기타 구조는 통상적인 설 계를 참조할 수 있다. 충돌이 없는 경우, 본 발명의 실시예 및 실시예의 특징은 새로운 실시예를 얻기 위해 서로 조합될 수 있다. 이상은 본 발명의 구체적인 실시형태일 뿐이지만, 본 발명의 보호 범위는 이에 한정되지 않으며, 본 발명의 보 호 범위는 상술한 청구범위의 보호 범위를 기준으로 한다.도면 도면1a 도면1b 도면2 도면3 도면4 도면5"}
{"patent_id": "10-2024-7039735", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면을 결부하여 하기 구체적인 실시형태를 참조하면, 본 발명의 각 실시예의 상기 및 기타 특징, 장점 및 측면 은 더욱 명백해질 것이다. 도면 전체에 걸쳐 동일하거나 유사한 참조부호는 동일하거나 유사한 요소를 나타낸다. 도면은 예시적인 것이고, 소자와 요소가 반드시 비율로 그려지는 것이 아님을 이해해야 한다. 도 1A는 본 발명의 적어도 하나의 실시예에서 제공하는 시뮬레이션 장치의 하드웨어 아키텍처의 모식도이다. 도 1B는 본 발명의 적어도 하나의 실시예에서 제공하는 다른 시뮬레이션 장치의 하드웨어 아키텍처의 모식도이 다. 도 2는 본 발명의 적어도 하나의 실시예에서 제공하는 시뮬레이션 시스템의 하드웨어 아키텍처의 모식도이다. 도 3은 본 발명의 적어도 하나의 실시예에서 제공하는 시뮬레이션 방법의 예시적인 흐름도이다. 도 4는 본 발명의 적어도 하나의 실시예에서 제공하는 비일시적 컴퓨터 판독 가능 저장 매체의 모식도이다. 도 5는 본 발명의 적어도 하나의 실시예에서 제공하는 전자기기의 하드웨어 구조 모식도이다."}
