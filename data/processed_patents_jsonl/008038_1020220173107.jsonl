{"patent_id": "10-2022-0173107", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0087936", "출원번호": "10-2022-0173107", "발명의 명칭": "트랜스포머 기반의 자연어 주석 자동 생성 방법 및 장치", "출원인": "숙명여자대학교산학협력단", "발명자": "김철연"}}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "사용자 단말의 적어도 하나의 프로세서에 의해 실행되는, 트랜스포머 기반의 자연어 주석 자동 생성 방법에 있어서,원본 소스 코드로부터 코드 시퀀스(code sequence)를 생성하는 단계;상기 원본 소스 코드로부터 정렬 시퀀스를 생성하는 단계; 상기 생성된 코드 시퀀스 및 정렬 시퀀스의 각각을 제1 인공신경망 모델 및 제2 인공신경망 모델에 입력함으로써, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성하는 단계;상기 코드 시퀀스 임베딩 및 상기 정렬 시퀀스 임베딩을 결합함으로써, 인코더 입력 임베딩을 생성하는 단계;및상기 인코더 입력 임베딩을 기초로 자연어 주석에 대한 정보를 생성하는 단계를 포함하는, 자연어 주석 자동 생성 방법."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 자연어 주석에 대한 정보를 생성하는 단계는, 상기 결합된 임베딩을 단일 인코더에 입력함으로써, 상기 자연어 주석에 대한 정보를 생성하는 단계를포함하는, 자연어 주석 자동 생성 방법."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 자연어 주석에 대한 정보를 생성하는 단계는, 상기 단일 인코더에 연결된 디코더로부터 생성된 확률 데이터에 기초하여 상기 자연어 주석을 생성하는 단계를더 포함하는, 자연어 주석 자동 생성 방법."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 정렬 시퀀스를 생성하는 단계는,상기 원본 소스 코드를 토큰화하는 단계;상기 토큰화된 원본 소스 코드로부터 코드 유형 정보를 추출하는 단계; 및상기 추출된 코드 유형 정보를 상기 코드 시퀀스의 순서에 기초하여 정렬함으로써, 상기 정렬 시퀀스를 생성하는 단계를 포함하는, 자연어 주석 자동 생성 방법."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2024-0087936-3-제1항에 있어서,상기 코드 시퀀스에 포함된 단위 코드와 상기 정렬 시퀀스에 포함된 단위 코드는 시퀀스 순서에 따라 일대일 대응되는, 자연어 주석 자동 생성 방법."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 인코더 입력 임베딩을 생성하는 단계는,상기 코드 시퀀스 임베딩 및 상기 정렬 시퀀스 임베딩을 제3 인공신경망 모델에 입력하여 상기 인코더 입력 임베딩을 생성하는 단계를 포함하는, 자연어 주석 자동 생성 방법."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 제3 인공신경망 모델은, 로지스틱 시그모이드 함수(logistic sigmoid function) 및 완전 연결층(fully-connected layer)를 이용하여 구성되고, 학습 코드 시퀀스 임베딩 및 학습 정렬 시퀀스 임베딩으로부터 참조 인코더 입력 임베딩이 출력되도록학습되는, 자연어 주석 자동 생성 방법."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성하는 단계는,상기 코드 시퀀스 및 상기 정렬 시퀀스의 각각을 제1 임베딩하는 단계;상기 제1 임베딩된 코드 시퀀스 및 상기 제1 임베딩된 정렬 시퀀스의 각각에 위치 정보를 추가하는 제2 임베딩하는 단계; 및상기 제2 임베딩된 코드 시퀀스 및 상기 제2 임베딩된 정렬 시퀀스의 각각을 상기 제1 인공신경망 모델 및 상기제2 인공신경망 모델에 입력함으로써, 상기 코드 시퀀스 임베딩 및 상기 정렬 시퀀스 임베딩을 생성하는 단계를포함하는, 자연어 주석 자동 생성 방법."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항 내지 제8항 중 어느 한 항에 따른 방법을 컴퓨터에서 실행하기 위해 컴퓨터 판독 가능한 기록 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2022-0173107", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "사용자 단말로서,통신 모듈;메모리; 및공개특허 10-2024-0087936-4-상기 메모리와 연결되고, 상기 메모리에 포함된 컴퓨터 판독 가능한 적어도 하나의 프로그램을 실행하도록 구성된 적어도 하나의 프로세서를 포함하고,상기 적어도 하나의 프로그램은,원본 소스 코드로부터 코드 시퀀스를 생성하고,상기 원본 소스 코드로부터 정렬 시퀀스를 생성하고,상기 생성된 코드 시퀀스 및 정렬 시퀀스의 각각을 제1 인공신경망 모델 및 제2 인공신경망 모델에 입력함으로써, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성하고,상기 코드 시퀀스 임베딩 및 상기 정렬 시퀀스 임베딩을 결합함으로써, 인코더 입력 임베딩을 생성하고,상기 인코더 입력 임베딩을 기초로 자연어 주석에 대한 정보를 생성하기 위한 명령어들을 포함하는, 정보 처리시스템."}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시는 사용자 단말의 적어도 하나의 프로세서에 의해 실행되는, 트랜스포머 기반의 자연어 주석 자동 생성 방법에 관한 것이다. 트랜스포머 기반의 자연어 주석 자동 생성 방법은, 원본 소스 코드로부터 코드 시퀀스 (code sequence)를 생성하는 단계, 원본 소스 코드로부터 정렬 시퀀스를 생성하는 단계, 생성된 코드 시퀀스 및 정렬 시퀀스의 각각을 제1 인공신경망 모델 및 제2 인공신경망 모델에 입력함으로써, 코드 시퀀스 임베딩 및 정 렬 시퀀스 임베딩을 생성하는 단계, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 결합함으로써, 인코더 입력 임 베딩을 생성하는 단계 및 인코더 입력 임베딩을 기초로 자연어 주석에 대한 정보를 생성하는 단계를 포함한다."}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 트랜스포머 기반의 자연어 주석 자동 생성 방법 및 장치에 관한 것으로, 구체적으로 원본 소스 코드 로부터 정렬 시퀀스를 생성함으로써 자연어 주석을 자동으로 생성하는 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "개발자들은 소프트웨어 개발 및 유지보수 과정에서 프로그램을 이해하는데 상당한 시간을 사용한다. 특히, 오 픈 소스 소프트웨어 또는 기업에서 제작되는 상용 프로그램 등의 경우 여러 개발자가 참여하므로, 코드 이해를 돕기 위한 주석을 작성하는 데에도 많은 시간과 노력을 들이고 있다. 그에 따라, 주석을 작성하는 데 필요한 시간과 노력을 줄이기 위해 고품질의 자연어 주석을 자동으로 생성하는 기술에 대한 수요가 급증하고 있다. 한편, 트랜스포머(transformer) 모델은 입력 데이터의 각 부분에 다른 가중치를 부여하는 어텐션(attention) 메 커니즘을 사용하는 딥 러닝 모델이다. 순환신경망(Recurrent Neural Network; RNN) 및 장단기 메모리(Long Short-Term Memory; LSTM)의 재귀(recursion) 및 전역 종속성 문제를 해결함으로써 트랜스포머는 자연어 처리 (Natural Language Processing; NLP) 응용 프로그램의 사실상 표준이 되고 있다. 그러나, 트랜스포머 모델의 인코더에 소스 코드 및 소스 코드와 연관된 파싱 트리(parsing tree)의 각각을 입력 하는 기존 자연어 처리 방식의 경우, 각각에 대응되는 인코더가 별도로 구비되어야 할 뿐만 아니라, 소스 코드 및 파싱 트리가 서로 정렬되지 않은 상태로 입력되어 자연어 처리의 정확도가 낮아지는 문제가 있다. 뿐만 아 니라, 자연어 처리 모델의 성능 향상에 불필요한 데이터까지도 입력 데이터에 포함되어, 모델의 크기 및 학습 시간이 불필요하게 증가하는 문제가 있다."}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상기와 같은 문제를 해결하기 위한 트랜스포머 기반의 자연어 주석 자동 생성 방법, 기록 매체에 저 장된 컴퓨터 프로그램 및 시스템(장치)을 제공한다."}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시는 방법, 시스템(장치) 또는 판독 가능 저장 매체에 저장된 컴퓨터 프로그램을 포함한 다양한 방식으로 구현될 수 있다. 사용자 단말의 적어도 하나의 프로세서에 의해 실행되는, 트랜스포머 기반의 자연어 주석 자동 생성 방법은, 원 본 소스 코드로부터 코드 시퀀스(code sequence)를 생성하는 단계, 원본 소스 코드로부터 정렬 시퀀스를 생성하 는 단계, 생성된 코드 시퀀스 및 정렬 시퀀스의 각각을 제1 인공신경망 모델 및 제2 인공신경망 모델에 입력함 으로써, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성하는 단계, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베 딩을 결합함으로써, 인코더 입력 임베딩을 생성하는 단계 및 인코더 입력 임베딩을 기초로 자연어 주석에 대한정보를 생성하는 단계를 포함한다. 또한, 인코더 입력 임베딩을 단일 인코더에 입력함으로써, 자연어 주석에 대한 정보를 생성하는 단계를 포함한 다. 또한, 단일 인코더에 연결된 디코더로부터 생성된 확률 데이터에 기초하여 자연어 주석을 생성하는 단계를 더 포함한다. 또한, 원본 소스 코드를 토큰화하는 단계, 토큰화된 원본 소스 코드로부터 코드 유형 정보를 추출하는 단계 및 추출된 코드 유형 정보를 코드 시퀀스의 순서에 기초하여 정렬함으로써, 정렬 시퀀스를 생성하는 단계를 포함한 다. 또한, 코드 시퀀스에 포함된 단위 코드와 정렬 시퀀스에 포함된 단위 코드는 시퀀스 순서에 따라 일대일 대응된 다. 또한, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 제3 인공신경망 모델에 입력하여 인코더 입력 임베딩을 생 성하는 단계를 포함한다. 또한, 제3 인공신경망 모델은, 로지스틱 시그모이드 함수(logistic sigmoid function) 및 완전 연결층(fully- connected layer)를 이용하여 구성되고, 학습 코드 시퀀스 임베딩 및 학습 정렬 시퀀스 임베딩으로부터 참조 인 코더 입력 임베딩이 출력되도록 학습된다. 또한, 코드 시퀀스 및 정렬 시퀀스의 각각을 제1 임베딩하는 단계, 제1 임베딩된 코드 시퀀스 및 제1 임베딩된 정렬 시퀀스의 각각에 위치 정보를 추가하는 제2 임베딩하는 단계 및 제2 임베딩된 코드 시퀀스 및 제2 임베딩 된 정렬 시퀀스의 각각을 제1 인공신경망 모델 및 제2 인공신경망 모델에 입력함으로써, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성하는 단계를 포함한다. 본 개시의 일 실시예에 따른 상술한 방법을 컴퓨터에서 실행하기 위해 컴퓨터 판독 가능한 기록 매체에 저장된 컴퓨터 프로그램이 제공된다. 본 개시의 일 실시예에 따른 정보 처리 시스템은, 통신 모듈, 메모리 및 메모리와 연결되고, 메모리에 포함된 컴퓨터 판독 가능한 적어도 하나의 프로그램을 실행하도록 구성된 적어도 하나의 프로세서를 포함하고, 적어도 하나의 프로그램은, 원본 소스 코드로부터 코드 시퀀스를 생성하고, 원본 소스 코드로부터 정렬 시퀀스를 추출 하고, 추출된 코드 시퀀스 및 정렬 시퀀스의 각각을 제1 인공신경망 모델 및 제2 인공신경망 모델에 입력함으로 써, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성하고, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 결합 함으로써, 인코더 입력 임베딩을 생성하고, 인코더 입력 임베딩을 기초로 자연어 주석에 대한 정보를 생성하기 위한 명령어들을 포함한다."}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 다양한 실시예에서, 단일 인코더를 사용함으로써 자연어 주석 자동 생성 모델의 크기가 줄어들 수 있 다. 본 개시의 다양한 실시예에서, 정렬 시퀀스를 사용함으로써 자연어 처리의 정확도가 향상될 수 있다. 본 개시의 다양한 실시예에서, 자연어 처리 모델의 성능 향상에 불필요한 데이터를 최소화함으로써, 자연어 처 리 모델의 학습 시간이 감소될 수 있다. 본 개시의 효과는 이상에서 언급한 효과로 제한되지 않으며, 언급되지 않은 다른 효과들은 청구범위의 기재로부"}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "터 본 개시가 속하는 기술분야에서 통상의 지식을 가진 자(이하, '통상의 기술자'라 함)에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 개시의 실시를 위한 구체적인 내용을 첨부된 도면을 참조하여 상세히 설명한다. 다만, 이하의 설명에 서는 본 개시의 요지를 불필요하게 흐릴 우려가 있는 경우, 널리 알려진 기능이나 구성에 관한 구체적 설명은 생략하기로 한다. 첨부된 도면에서, 동일하거나 대응하는 구성요소에는 동일한 참조부호가 부여되어 있다. 또한, 이하의 실시예 들의 설명에 있어서, 동일하거나 대응되는 구성요소를 중복하여 기술하는 것이 생략될 수 있다. 그러나, 구성 요소에 관한 기술이 생략되어도, 그러한 구성요소가 어떤 실시예에 포함되지 않는 것으로 의도되지는 않는다. 개시된 실시예의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 후술되어 있는 실시예 들을 참조하면 명확해질 것이다. 그러나, 본 개시는 이하에서 개시되는 실시예들에 한정되는 것이 아니라 서로 다른 다양한 형태로 구현될 수 있으며, 단지 본 실시예들은 본 개시가 완전하도록 하고, 본 개시가 통상의 기술 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것일 뿐이다. 본 명세서에서 사용되는 용어에 대해 간략히 설명하고, 개시된 실시예에 대해 구체적으로 설명하기로 한다. 본 명세서에서 사용되는 용어는 본 개시에서의 기능을 고려하면서 가능한 현재 널리 사용되는 일반적인 용어들을 선택하였으나, 이는 관련 분야에 종사하는 기술자의 의도 또는 판례, 새로운 기술의 출현 등에 따라 달라질 수 있다. 또한, 특정한 경우는 출원인이 임의로 선정한 용어도 있으며, 이 경우 해당되는 발명의 설명 부분에서 상세히 그 의미를 기재할 것이다. 따라서, 본 개시에서 사용되는 용어는 단순한 용어의 명칭이 아닌, 그 용어 가 가지는 의미와 본 개시의 전반에 걸친 내용을 토대로 정의되어야 한다. 본 명세서에서의 단수의 표현은 문맥상 명백하게 단수인 것으로 특정하지 않는 한, 복수의 표현을 포함한다. 또한, 복수의 표현은 문맥상 명백하게 복수인 것으로 특정하지 않는 한, 단수의 표현을 포함한다. 명세서 전체 에서 어떤 부분이 어떤 구성요소를 포함한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있음을 의미한다. 또한, 명세서에서 사용되는 '모듈' 또는 '부'라는 용어는 소프트웨어 또는 하드웨어 구성요소를 의미하며, '모 듈' 또는 '부'는 어떤 역할들을 수행한다. 그렇지만, '모듈' 또는 '부'는 소프트웨어 또는 하드웨어에 한정되 는 의미는 아니다. '모듈' 또는 '부'는 어드레싱할 수 있는 저장 매체에 있도록 구성될 수도 있고 하나 또는 그 이상의 프로세서들을 재생시키도록 구성될 수도 있다. 따라서, 일 예로서, '모듈' 또는 '부'는 소프트웨어 구성요소들, 객체지향 소프트웨어 구성요소들, 클래스 구성요소들 및 태스크 구성요소들과 같은 구성요소들과, 프로세스들, 함수들, 속성들, 프로시저들, 서브루틴들, 프로그램 코드의 세그먼트들, 드라이버들, 펌웨어, 마이 크로 코드, 회로, 데이터, 데이터베이스, 데이터 구조들, 테이블들, 어레이들 또는 변수들 중 적어도 하나를 포 함할 수 있다. 구성요소들과 '모듈' 또는 '부'들은 안에서 제공되는 기능은 더 작은 수의 구성요소들 및 '모듈' 또는 '부'들로 결합되거나 추가적인 구성요소들과 '모듈' 또는 '부'들로 더 분리될 수 있다. 본 개시의 일 실시예에 따르면, '모듈' 또는 '부'는 프로세서 및 메모리로 구현될 수 있다. '프로세서'는 범용 프로세서, 중앙 처리 장치(CPU), 마이크로프로세서, 디지털 신호 프로세서(DSP), 제어기, 마이크로제어기, 상태 머신 등을 포함하도록 넓게 해석되어야 한다. 몇몇 환경에서, '프로세서'는 주문형 반도체(ASIC), 프로그램가 능 로직 디바이스(PLD), 필드 프로그램가능 게이트 어레이(FPGA) 등을 지칭할 수도 있다. '프로세서'는, 예를 들어, DSP와 마이크로프로세서의 조합, 복수의 마이크로프로세서들의 조합, DSP 코어와 결합한 하나 이상의 마 이크로프로세서들의 조합, 또는 임의의 다른 그러한 구성들의 조합과 같은 처리 디바이스들의 조합을 지칭할 수도 있다. 또한, '메모리'는 전자 정보를 저장 가능한 임의의 전자 컴포넌트를 포함하도록 넓게 해석되어야 한 다. '메모리'는 임의 액세스 메모리(RAM), 판독-전용 메모리(ROM), 비-휘발성 임의 액세스 메모리(NVRAM), 프 로그램가능 판독-전용 메모리(PROM), 소거-프로그램가능 판독 전용 메모리(EPROM), 전기적으로 소거가능 PROM(EEPROM), 플래쉬 메모리, 자기 또는 광학 데이터 저장장치, 레지스터들 등과 같은 프로세서-판독가능 매체 의 다양한 유형들을 지칭할 수도 있다. 프로세서가 메모리로부터 정보를 판독하고/하거나 메모리에 정보를 기 록할 수 있다면 메모리는 프로세서와 전자 통신 상태에 있다고 불린다. 프로세서에 집적된 메모리는 프로세서 와 전자 통신 상태에 있다. 도 1은 본 개시의 일 실시예에 따른 자연어 주석을 포함하는 소스 코드가 생성되는 예시를 나타내는 도면 이다. 제1 화면은 원본 소스 코드가 표시된 화면이다. 원본 소스 코드는 컴퓨터 프로그램이 사람이 읽을 수 있는 프로그래밍 언어(예를 들어, C, Java, Python 등)로 기술된 모든 종류의 텍스트 파일을 포함할 수 있다. 제2 화면은 제1 화면에서의 원본 소스 코드 및 원본 소스 코드로부터 생성된 자연어 주석 을 포함하는 소스 코드가 표시된 화면이다. 도시된 바와 같이, 자연어 주석은 원본 소스 코드 로부터 생성된 뒤, 소스 코드에 포함될 수 있다. 제2 화면에서는 자연어 주석이 원본 소스 코드 의 하단에 출력되는 것으로 도시되었으나, 이에 한정되지 않는다. 예를 들어, 자연어 주석은 원본 소스 코드의 상단에 출력되거나, 소스 코드의 각 단락 또는 각 라인에 대해 생성될 수도 있다. 도 1에 도시된 자연어 주석에는, 예를 들어, 참조 주석(Reference comment), 본 개시의 일 실시예에 따라 생성된 주석(Our Model) 및 다른 자연어 주석 생성 방법에 의해 생성된 주석(SeTransformer, Hybrid-DeepCom, DeepCom)이 포함되어 있다. 도시된 바와 같이, 본 개시의 일 실시예에 따라 생성된 주석(Our Model)이 참조 주 석(Reference comment)과 가장 유사한 구조 및 내용을 포함하는 것을 확인할 수 있다. 도 2는 본 개시의 일 실시예에 따른 컴퓨팅 장치의 내부 구성을 나타내는 블록도이다. 컴퓨팅 장치 는 메모리, 프로세서, 통신 모듈 및 입출력 인터페이스를 포함할 수 있다. 도 2에 도시된 바와 같이, 컴퓨팅 장치는 통신 모듈을 이용하여 네트워크를 통해 정보 및/또는 데이터를 통신할 수 있도록 구성될 수 있다. 일 실시예에서, 컴퓨팅 장치는 사용자 단말 또는 정보 처리 시스템에 해당할 수 있고, 사용자 단말 또는 정보 처리 시스템 중 하나는 다른 하나와 통신 모듈을 이용하여 네트워크를 통해 정보 및/또는 데이터를 통신할 수 있도록 구성될 수 있다. 메모리는 비-일시적인 임의의 컴퓨터 판독 가능한 기록매체를 포함할 수 있다. 일 실시예에 따르면, 메모 리는 RAM(random access memory) 등과 같은 소멸성 저장 장치일 수 있다. 추가적으로 또는 이와 달리, 메모리는 ROM(read only memory), 디스크 드라이브, SSD(solid state drive), 플래시 메모리(flash memory) 등과 같은 비소멸성 대용량 저장 장치(permanent mass storage device)를 포함할 수 있다. 다른 예로 서, ROM, SSD, 플래시 메모리, 디스크 드라이브 등과 같은 비소멸성 대용량 저장 장치는 메모리와는 구분되는 별도의 영구 저장 장치로서 컴퓨팅 장치에 포함될 수 있다. 또한, 메모리에는 운영체제와 적어도 하 나의 프로그램 코드가 저장될 수 있다. 이러한 소프트웨어 구성요소들은 메모리와는 별도의 컴퓨터에서 판독 가능한 기록매체로부터 로딩될 수 있 다. 이러한 별도의 컴퓨터에서 판독 가능한 기록매체는 이러한 컴퓨팅 장치에 직접 연결가능한 기록 매체 를 포함할 수 있는데, 예를 들어, 플로피 드라이브, 디스크, 테이프, DVD/CD-ROM 드라이브, 메모리 카드 등의 컴퓨터에서 판독 가능한 기록매체를 포함할 수 있다. 다른 예로서, 소프트웨어 구성요소들은 컴퓨터에서 판독 가능한 기록매체가 아닌 통신 모듈을 통해 메모리에 로딩될 수도 있다. 예를 들어, 적어도 하나의 프로그램은 개발자들 또는 어플리케이션의 설치 파일을 배포하는 파일 배포 시스템이 통신 모듈을 통해 제 공하는 파일들에 의해 설치되는 컴퓨터 프로그램에 기반하여 메모리에 로딩될 수 있다. 프로세서는 기본적인 산술, 로직 및 입출력 연산을 수행함으로써, 컴퓨터 프로그램의 명령을 처리하도록 구성될 수 있다. 명령은 메모리 또는 통신 모듈에 의해 사용자 단말(미도시) 또는 다른 외부 시스템 으로 제공될 수 있다. 또한, 프로세서는 복수의 사용자 단말 및/또는 복수의 외부 시스템으로부터 수신된 정보 및/또는 데이터를 관리, 처리 및/또는 저장하도록 구성될 수 있다. 통신 모듈은 네트워크를 통해 사용자 단말(미도시)과 컴퓨팅 장치가 서로 통신하기 위한 구성 또는 기능을 제공할 수 있으며, 컴퓨팅 장치가 외부 시스템(일례로 별도의 클라우드 시스템 등)과 통신하기 위 한 구성 또는 기능을 제공할 수 있다. 일례로, 컴퓨팅 장치의 프로세서의 제어에 따라 제공되는 제어 신호, 명령, 데이터 등이 통신 모듈과 네트워크를 거쳐 사용자 단말 및/또는 외부 시스템의 통신 모듈 을 통해 사용자 단말 및/또는 외부 시스템으로 전송될 수 있다. 또한, 컴퓨팅 장치의 입출력 인터페이스는 컴퓨팅 장치와 연결되거나 컴퓨팅 장치가 포함 할 수 있는 입력 또는 출력을 위한 장치(미도시)와의 인터페이스를 위한 수단일 수 있다. 도 2에서는 입출력 인터페이스가 프로세서와 별도로 구성된 요소로서 도시되었으나, 이에 한정되지 않으며, 입출력 인터 페이스가 프로세서에 포함되도록 구성될 수 있다. 컴퓨팅 장치는 도 2의 구성요소들보다 더 많 은 구성요소들을 포함할 수 있다. 그러나, 대부분의 종래기술적 구성요소들을 명확하게 도시할 필요성은 없다. 도 3은 본 개시의 일 실시예에 따른 사용자 단말의 프로세서의 내부 구성 및 데이터 입출력을 나타내는 블 록도이다. 도시된 바와 같이, 프로세서는 전처리부, 제1 인공신경망 모델, 제2 인공신경망 모 델, 제3 인공신경망 모델, 인코더 및 디코더를 포함할 수 있으나, 이에 한정되지 않는다. 프로세서에는 코드 시퀀스(code sequence), 정렬 시퀀스 및 참조 주석이 입력될 수 있다. 코드 시퀀스는 원본 소스 코드의 어휘적(lexical) 표현 방법으로 생성된 임의의 시퀀스를 나타낼 수 있는 데, 예를 들어, 원본 소스 코드가 식별자(identifier), 분리자(separator) 및 연산자(operator) 단위로 분할되 어 토큰화됨(tokenized)으로써 생성될 수 있다. 정렬 시퀀스는 원본 소스 코드의 구문적(syntactic) 표현 방법으로 생성된 임의의 시퀀스를 나타낼 수 있 는데, 예를 들어, 원본 소스 코드 및 코드 시퀀스에 기초하여 생성될 수 있다. 예를 들어, 정렬 시퀀스 는 토큰화된 원본 소스 코드로부터 추출된 코드 유형 정보가 코드 시퀀스의 순서에 기초하여 정렬됨 으로써 생성될 수 있다. 참조 주석은 프로세서에서 생성된 자연어 주석과 비교함으로써 자연어 주석 자동 생성 모델을 학습시 키기 위해 프로세서에 입력될 수 있다. 전처리부는 코드 시퀀스, 정렬 시퀀스 또는 참조 주석 중 적어도 하나를 전처리하도록 구 성될 수 있다. 도 4에서는 하나의 전처리부가 코드 시퀀스, 정렬 시퀀스 및 참조 주석을 모두 전처리하는 것으로 도시되었으나 이에 한정되지 않는다. 예를 들어, 전처리부는 코드 시퀀스를 전처리하는 제1 전처리부, 정렬 시퀀스를 전처리하는 제2 전처리부 및 참조 주석을 전처리하는 제3 전처리 부를 포함할 수 있다. 일 실시예에서, 전처리부는 코드 시퀀스, 정렬 시퀀스 및 참조 주석을 임베딩(embeddin g)할 수 있다. 다시 말해, 전처리부는 인공신경망 모델을 통한 특징 추출 및 수치화를 위해 코드 시퀀스 , 정렬 시퀀스 및 참조 주석의 각각에 포함된 데이터를 벡터화시킬 수 있다. 상술한 바와 같이, 코드 시퀀스는 원본 소스 코드가 토큰화되어 생성되고, 정렬 시퀀스는 원본 소스 코드 및 코드 시퀀스에 기초하여 생성됨으로써, 임베딩된 코드 시퀀스 및 정렬 시퀀스 각각의 벡터는 동일한 차원을 갖 도록 생성될 수 있다. 추가적으로, 전처리부는 원본 소스 코드의 작성 시 개발자의 선호 작명 방식 또는 각 프로그래밍 언어에서 의 작명 관습에 따라 발생할 수 있는 Out-of-Vocabulary(OOV) 문제를 해결하기 위해, Byte Pair Encoding(BPE) 알고리즘에 따라 코드 시퀀스를 전처리할 수 있다. 그리고 나서, 전처리부에서 임베딩된, 코드 시퀀스, 정렬 시퀀스 및 참조 주석의 각 벡터에는 포지셔널 임 베딩(positional embedding)을 통해 각 단어의 위치 정보가 추가될 수 있다. 제1 인공신경망 모델 및 제2 인공신경망 모델은 코드 시퀀스 및 정렬 시퀀스의 각각으로부 터 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성할 수 있다. 일 실시예에서, 제1 인공신경망 모델 및 제2 인공신경망 모델의 각각은 합성곱 신경망(Convolution Neural Network, CNN)을 포함할 수 있다. 이러한 구성을 통해, 인코더에 입력되는 데이터의 차원을 압축시킴으로써 자연어 주석 자동 생성 모델의 학습 시간이 감소될 수 있다. 학습 코드 시퀀스 임베딩 및 학습 정렬 시퀀스 임베딩으로부터 참조 인코더 입력 임베딩이 출력되도록 학습되는 제3 인공신경망 모델은, 제1 인공신경망 모델 및 제2 인공신경망 모델의 각각으로부터 생성된 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 결합함으로써, 인코더 입력 임베딩을 생성할 수 있다. 예를 들어, 코드 시퀀스 임베딩과 연관된 벡터 , 정렬 시퀀스 임베딩과 연관된 벡터일 때, 제3 인공신경망 모델은 인코더 입력 임베딩 X를 아래 수학식 1에 따라 생 성할 수 있다. (수학식 1)"}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "(단, 는 로지스틱 시그모이드(logistic sigmoid) 함수, FC는 제3 인공신경망 모델에 포함된 Fully Connected Layer를 지칭함) 상술한 바와 같이 제3 인공신경망 모델이 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 결합하여 인코더 입력 임베딩을 생성함으로써, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩의 각각에 대한 2개의 인코더를 사용할 필요 없이 단일 인코더만으로 자연어 주석에 대한 정보가 생성될 수 있다. 인코더 및 디코더의 각각은 멀티 헤드 어텐션 레이어(Multi-Head Attention) 및 피드 포워드 레이어 (Feed Forward)의 적층 구조로 구성될 수 있다. 인코더는, 단일 인코더로 구성될 수 있다. 일 실시예에서, 인코더는 N=3의 동일 레이어 스택으로 구 성될 수 있다. 인코더에 입력된 인코더 입력 임베딩은 멀티 헤드 어텐션 레이어로부터 피드 포워드 레이 어를 거쳐 디코더로 전달될 수 있다. 이 때, 멀티 헤드 어텐션 레이어의 어텐션 값 은 수학식 2에 따라 결정될 수 있다. (수학식 2)"}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "(단, Q: t 시점의 디코더 셀에서의 은닉 상태 벡터, K: 모든 시점의 인코더 셀의 은닉 상태 벡터, V: 모든 시점 의 인코더 셀의 은닉 상태 벡터, dk: K 벡터의 차원을 지칭함) 아래 표 1은 단일 인코더를 사용한 자연어 주석 자동 생성 모델과 2개의 인코더를 사용한 자연어 주석 자동 생 성 모델 각각의 성능 평가 결과 및 모델의 크기를 나타낸다. 이 때, 단일 인코더를 사용한 모델은 본 개시의 일 실시예에 따라 생성된 인코더 입력 임베딩에 기초하여 자연어 주석을 생성하는 모델이고, 2개의 인코더를 사 용한 모델은 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩의 각각을 2개의 인코더의 각각에 입력함으로써 자연어 주석을 생성하는 모델이다. 표 1의 자연어 주석 자동 생성 모델 성능 평가는 BLEU(Bilingual Evaluation Understudy)(구체적으로, S-BLEU 및 C-BLEU) 및 METEOR(Metric for Evaluation of Translation with Explicit ORdering)를 통해 진행되었다. BLEU 스코어 또는 METEOR 스코어가 높을수록 자연어 주석 자동 생성 모델의 성 능이 뛰어난 것으로 판단될 수 있다. 표 1 인코더 개수 S-BLEU C-BLEU METEOR 모델 크기(GB) 1개 57.26 53.80 66.11 8.3 2개 53.55 50.05 63.30 9.5 표 1에서, 단일 인코더를 사용한 모델은 2개의 인코더를 사용한 모델보다 6.93% 향상된 S-BLEU 스코어, 7.49% 향상된 C-BLEU 스코어 및 4.44% 향상된 METEOR 스코어를 가질 뿐만 아니라, 모델의 크기도 더 작은 것을 확인할 수 있다. 즉, 단일 인코더를 사용한 모델은 2개의 인코더를 사용한 모델보다 작은 모델 사이즈로도 우수한 성 능의 자연어 주석을 생성할 수 있다. 일 실시예에서, 디코더는 N=3의 동일 레이어 스택으로 구성될 수 있고, 인코더에서 마스킹된 멀티 헤 드 어텐션 레이어(Masked Multi-Head Attention)가 추가된 형태일 수 있다. 인코더를 거쳐 디코더 로 전달된 인코더 입력 임베딩에 기초하여, 디코더는 자연어 주석에 대한 정보를 생성할 수 있다. 구체적 으로, 디코더에서 출력된 softmax 함수에 따라 확률 데이터가 생성되고, 가장 높은 확률 값을 가지는 단어 내지 단어의 세트가 선택됨으로써 자연어 주석이 생성될 수 있다. 도 4에서 도시한 프로세서의 내부 구성은 예시일 뿐이며, 일부 실시예에서는 도시한 내부 구성 외 다른 구 성을 추가로 포함할 수 있으며, 일부 구성이 생략될 수도 있다. 예를 들어, 위 내부 구성 중 일부가 생략되는 경우, 생략된 일부 내부 구성의 기능을 정보 처리 시스템의 프로세서가 수행하도록 구성될 수 있다. 또한, 도 4에서 프로세서의 내부 구성을 기능별로 구분하여 설명하였으나, 반드시 물리적으로 구분되는 것을 의미하 지 않는다. 또한, 전처리부, 제1 인공신경망 모델, 제2 인공신경망 모델, 제3 인공신경망 모델 , 인코더 및 디코더는 구분되어 상술되었으나, 이는 발명의 이해를 돕기 위한 것으로서, 이에 한정되지 않는다. 예를 들어, 제1 인공신경망 모델 및 제2 인공신경망 모델은 하나의 인공신경망 모 델로 구성될 수도 있다. 도 4는 본 개시의 일 실시예에 따른 원본 소스 코드에 기초하여 정렬 시퀀스가 생성되는 예시를 나타 내는 도면이다. 구조 기반 횡단(Structure-Based Traversal, SBT) 시퀀스 및 정렬 시퀀스는 원본 소스 코드에 기초하여 생성될 수 있다. 구조 기반 횡단 시퀀스는 원본 소스 코드로부터 변환된 추상 구문 트리(Abstract Syntax Tree)를 횡 단하는 구조 기반 횡단 방법에 기초하여 생성될 수 있다. 이 때, 추상 구문 트리는 프로그래밍 언어로 작성된 소스 코드를 의미 단위로 분리하여 컴퓨터가 이해할 수 있는 구조로 변환하는 트리로서, 트리의 각 노드에는 노 드 ID, 값, 유형 및 자식 노드와 같은 소스 코드 정보가 포함된다. 정렬 시퀀스는 토큰화된 원본 소스 코드로부터 추출된 코드 유형 정보가 코드 시퀀스의 순서에 기초하여 정렬됨으로써 생성될 수 있다. 이 경우, 코드 시퀀스는 원본 소스 코드의 어휘적(lexical) 표현 방법으로 생성 된 임의의 시퀀스를 지칭할 수 있으며, 예를 들어, 원본 소스 코드가 식별자(identifier), 분리자(separator) 및 연산자(operator) 단위로 분할되어 토큰화됨(tokenized)으로써 생성될 수 있다. 구조 기반 횡단 시퀀스는 원본 소스 코드의 실제 순서가 아닌 추상 구문 트리에 기초하여 생성될 수 있다. 이에 기인하여, 도 4에서는 구조 기반 횡단 시퀀스 및 원본 소스 코드의 논리적 순서가 서로 일치하지 않을 뿐만 아니라, 구조 기반 횡단 시퀀스에서 일부 정보가 누락되었음이 확인될 수 있다. 예를 들어, 원본 소스 코드의 'AnootatedPrimitiveType'과 'type'의 각각에 대응되는 구조 기반 횡단 시퀀스 에서의 'ReferenceType'과 'Formalparameter'의 순서는 원본 소스 코드에서의 순서와 반대로 표시되 어 있다. 또한, 구조 기반 횡단 시퀀스에서는 'public'의 유형인 'modifier', 괄호, 쉼표, 세미콜론의 유 형인 'separator' 및 'BOOL_'의 유형인 'keyword'가 생략되어 있다. 반면, 정렬 시퀀스에는 원본 소스 코드에 포함된 모든 코드 토큰의 유형 정보가 원본 소스 코드(41 0)의 순서와 일치하는 순서로 누락된 정보 없이 포함되어 있는 것이 확인될 수 있다. 이러한 정렬 시퀀스의 특 성에 따라 추후 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩이 용이하게 결합될 수 있고, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩이 결합됨에 따라 단일 인코더만으로도 자연어 주석이 자동으로 생성될 수 있다. 도 5는 본 개시의 일 실시예에 따른 원본 소스 코드로부터 코드 시퀀스 임베딩 및 정렬 시퀀스 임베 딩이 생성되는 과정을 나타내는 도면이다. 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩은 코드 시퀀스 및 정렬 시퀀스에 기초하여 생성될 수 있다. 이 때, 코드 시퀀스는 원본 소스 코드 가 식별자(identifier), 분리자(separator) 및 연산자(operator) 단위로 분할되어 토큰화됨(tokenized)으 로써 생성되고, 정렬 시퀀스는 토큰화된 원본 소스 코드로부터 추출된 코드 유형 정보가 코드 시퀀스(52 0)의 순서에 기초하여 정렬됨으로써 생성될 수 있다. 도 5에서, 정렬 시퀀스의 순서는 코드 시퀀스 의 순서와 일치함을 확인할 수 있다. 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩의 각각은 코드 시퀀스 및 정렬 시퀀스의 각각 이 인공신경망 모델에 입력됨에 따라 생성될 수 있다. 일 실시예에서, 코드 시퀀스 및 정렬 시퀀스 의 각각은 제1 임베딩을 통해 벡터화되고, 제2 임베딩(예를 들어, 포지셔널 임베딩)을 통해 제1 임베딩된 코드 시퀀스 및 제1 임베딩된 정렬 시퀀스의 각각에 위치 정보가 추가된 뒤, 제2 임베딩된 코드 시퀀스 및 제2 임베 딩된 정렬 시퀀스의 각각이 제1 인공신경망 모델에 입력됨으로써 코드 시퀀스 임베딩 및 정렬 시퀀스 임베 딩이 생성될 수 있다. 코드 시퀀스에 포함된 단위 코드와 정렬 시퀀스에 포함된 단위 코드가 시퀀스 순서에 따라 일대일 대 응되므로, 코드 시퀀스 및 정렬 시퀀스에 기초하여 생성된 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩의 벡터 차원도 서로 동일한 것이 확인될 수 있다. 도 6은 본 개시의 일 실시예에 따라 인코더 입력 임베딩을 생성하는 방법을 나타내는 도면이다. 상술한 수학식 1에 의한 방법 외에도, 코드 시퀀스와 정렬 시퀀스의 각각의 단위 코드를 번갈아가며 병합하는 제1 방법, 코드 시퀀스와 정렬 시퀀스의 사이에 '<code>' 토큰을 추가하여 연결하는 제2 방법, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩의 벡터합을 산출하는 제3 방법, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩의 각 구성요소의 평균값을 산출하는 제4 방법 및 코드 시퀀스 임베딩에 정렬 시퀀스 임베딩을 미리 정해진 비율 로 추가하는 제5 방법을 통해 인코더 입력 임베딩이 생성될 수 있다. 표 2는 제1 방법 내지 제5 방법(610, 620, 630, 640, 650)에 따라 인코더 입력 임베딩을 생성하는 자연어 주석 자동 생성 모델과, 수학식 1에 따라 인코더 입력 임베딩을 생성하는 자연어 주석 자동 생성 모델 각각의 성능 평가 결과를 나타낸다. 표 2의 자연어 주석 자동 생성 모델 성능 평가는 BLEU(Bilingual Evaluation Understudy) 및 METEOR(Metric for Evaluation of Translation with Explicit ORdering)를 통해 진행되었다. BLEU 스코어 또는 METEOR 스코 어가 높을수록 자연어 주석 자동 생성 모델의 성능이 뛰어난 것으로 판단될 수 있다. 표 2 인코딩 입력 임베딩 생성 방법 BLEU METEOR 제1 방법 51.26 64.05 제2 방법 52.40 65.20 제3 방법 53.21 65.89 제4 방법 50.75 63.46 제5 방법 51.41 64.23 수학식 1에 의한 방법 53.78 66.11 표 2에서, 수학식 1에 의한 방법을 사용하여 인코더 입력 임베딩을 생성하는 자연어 주석 자동 생성 모델은 제1 방법 내지 제5 방법(610, 620, 630, 640, 650)을 사용하는 자연어 주석 자동 생성 모델보다 1.07 내지 5.97% 향상된 BLEU 스코어 및 0.33 내지 4.18% 향상된 METEOR 스코어를 가진다. 다시 말해, 수학식 1에 의해 인코더 입력 임베딩이 생성되는 경우, 제1 방법 내지 제5 방법(610, 620, 630, 640, 650)을 사용한 경우보다 우수한 성 능으로 자연어 주석이 생성될 수 있다. 도 7는 본 개시의 일 실시예에 따른 인공신경망 모델을 나타내는 예시도이다. 인공신경망 모델은, 기계학습 모델의 일 예로서, 기계학습(Machine Learning) 기술과 인지과학에서, 생물학적 신경망의 구조에 기초 하여 구현된 통계학적 학습 알고리즘 또는 그 알고리즘을 실행하는 구조이다. 상술된 제1 인공신경망 모델 , 제2 인공신경망 모델 및 제3 인공신경망 모델의 각각은 인공신경망 모델에 대응될 수 있 다. 일 실시예에 따르면, 인공신경망 모델은, 생물학적 신경망에서와 같이 시냅스의 결합으로 네트워크를 형성 한 인공 뉴런인 노드(Node)들이 시냅스의 가중치를 반복적으로 조정하여, 특정 입력에 대응한 올바른 출력과 추 론된 출력 사이의 오차가 감소되도록 학습함으로써, 문제 해결 능력을 가지는 기계학습 모델을 나타낼 수 있다. 예를 들어, 인공신경망 모델은 기계학습, 딥러닝 등의 인공지능 학습법에 사용되는 임의의 확률 모델, 뉴럴 네트워크 모델 등을 포함할 수 있다. 일 실시예에 따르면, 상술된 자연어 주석 자동 생성 모델은 인공신경망 모델의 형태로 생성될 수 있다. 예를 들어, 인공신경망 모델은 코드 시퀀스 및 정렬 시퀀스의 각각으로부터 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성하고, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 결합하여 인코더 입력 임베딩을 생성 할 수 있다. 인공신경망 모델은 다층의 노드들과 이들 사이의 연결로 구성된 다층 퍼셉트론(MLP: multilayer perceptron)으로 구현된다. 본 실시예에 따른 인공신경망 모델은 MLP를 포함하는 다양한 인공신경망 모델 구조들 중의 하나를 이용하여 구현될 수 있다. 도 4에 도시된 바와 같이, 인공신경망 모델은, 외부로부터 입력 신호 또는 데이터를 수신하는 입력층, 입력 데이터에 대응한 출력 신호 또는 데이터를 출 력하는 출력층, 입력층과 출력층 사이에 위치하며 입력층으로부터 신호를 받아 특성을 추 출하여 출력층으로 전달하는 n개(여기서, n은 양의 정수)의 은닉층(730_1 내지 730_n)으로 구성된다. 여 기서, 출력층은 은닉층(730_1 내지 730_n)으로부터 신호를 받아 외부로 출력한다. 인공신경망 모델의 학습 방법에는, 교사 신호(정답)의 입력에 의해서 문제의 해결에 최적화되도록 학습하 는 지도 학습(Supervised Learning) 방법과, 교사 신호를 필요로 하지 않는 비지도 학습(Unsupervised Learning) 방법이 있다. 일 실시예에 따르면, 사용자 단말 또는 정보 처리 시스템은 학습 코드 시퀀스 임베딩 및 학습 정렬 시퀀스 임베딩으로부터 참조 인코더 입력 임베딩이 출력되도록 인공신경망 모델을 학습시킬 수 있다. 일 실시예에 따르면, 사용자 단말 또는 정보 처리 시스템은 인공신경망 모델을 학습시키기 위한 학습 데이 터를 직접 생성할 수 있다. 예를 들어, 사용자 단말 또는 정보 처리 시스템은 학습 코드 시퀀스 임베딩 및 학 습 정렬 시퀀스 임베딩을 포함하는 학습 데이터 세트를 생성할 수 있다. 그리고 나서, 사용자 단말 또는 정보 처리 시스템은 생성된 학습 데이터 세트를 기초로 자연어 주석을 자동으로 생성하기 위한 인공신경망 모델(70 0)을 학습시킬 수 있다. 일 실시예에 따르면, 인공신경망 모델의 입력변수는, 코드 시퀀스, 정렬 시퀀스, 코드 시퀀스 임베딩 및 상기 정렬 시퀀스 임베딩 중 적어도 하나를 포함할 수 있다. 이와 같이 상술된 입력변수가 입력층을 통해 입력되는 경우, 인공신경망 모델의 출력층에서 출력되는 출력변수는 코드 시퀀스 임베딩, 정렬 시퀀 스 임베딩 및 인코더 입력 임베딩 중 적어도 하나가 될 수 있다. 이와 같이, 인공신경망 모델의 입력층과 출력층에 복수의 입력변수와 대응되는 복수의 출력변수 가 각각 매칭되고, 입력층, 은닉층(730_1 내지 730_n) 및 출력층에 포함된 노드들 사이의 시냅스 값 이 조정됨으로써, 특정 입력에 대응한 올바른 출력이 추출될 수 있도록 학습될 수 있다. 이러한 학습 과정을 통해, 인공신경망 모델의 입력변수에 숨겨져 있는 특성을 파악할 수 있고, 입력변수에 기초하여 계산된 출 력변수와 목표 출력 간의 오차가 줄어들도록 인공신경망 모델의 노드들 사이의 시냅스 값(또는 가중치)를 조정할 수 있다. 또한, 정보 처리 시스템은 코드 시퀀스, 정렬 시퀀스, 코드 시퀀스 임베딩 및 상기 정렬 시퀀 스 임베딩 중 적어도 하나를 입력으로 받는 알고리즘을 학습하며, 자연어 주석 자동 생성 모델의 성능 평가 점 수와 연관된 정보(즉, 어노테이션 정보)와의 손실(loss)을 최소화하는 방식으로 학습할 수 있다. 도 8은 본 개시의 일 실시예에 따른 트랜스포머 기반의 자연어 주석 자동 생성 방법을 나타내는 흐름도이 다. 일 실시예에서, 자연어 주석 자동 생성 방법은 프로세서(예를 들어, 사용자 단말의 적어도 하나의 프 로세서)에 의해 수행될 수 있다. 자연어 주석 자동 생성 방법은 프로세서가 원본 소스 코드로부터 코드 시퀀스(code sequence)를 생성함으로써 개시될 수 있다(S810). 구체적으로, 코드 시퀀스는 원본 소스 코드의 어휘적(lexical) 표현 방법으로서, 프로세서는 원본 소스 코드를 식별자(identifier), 분리자(separator) 및 연 산자(operator) 단위로 분할하여 토큰화(tokenize)함으로써 코드 시퀀스를 생성할 수 있다. 그 후, 프로세서는 원본 소스 코드로부터 정렬 시퀀스를 생성할 수 있다(S820). 일 실시예에서, 프로세서는 원 본 소스 코드를 토큰화하고, 토큰화된 원본 소스 코드로부터 코드 유형 정보를 추출하고, 추출된 코드 유형 정 보를 코드 시퀀스의 순서에 기초하여 정렬함으로써, 정렬 시퀀스를 생성할 수 있다. 이러한 구성을 통해, 코드 시퀀스에 포함된 단위 코드와 정렬 시퀀스에 포함된 단위 코드는 시퀀스 순서에 따라 일대일 대응될 수 있다. 그 후, 프로세서는 생성된 코드 시퀀스 및 정렬 시퀀스의 각각을 제1 인공신경망 모델 및 제2 인공신경망 모델 에 입력함으로써, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성할 수 있다(S830). 일 실시예에서, 프로세 서는 코드 시퀀스 및 정렬 시퀀스의 각각을 제1 임베딩하고, 제1 임베딩된 코드 시퀀스 및 제1 임베딩된 정렬시퀀스의 각각에 위치 정보를 추가하는 제2 임베딩하고, 제2 임베딩된 코드 시퀀스 및 제2 임베딩된 정렬 시퀀 스의 각각을 제1 인공신경망 모델에 입력함으로써, 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 생성할 수 있 다. 그 후, 프로세서는 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 결합함으로써, 인코더 입력 임베딩을 생성할 수 있다(S840). 일 실시예에서, 프로세서는 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩을 제3 인공신경망 모델 에 입력하여 인코더 입력 임베딩을 생성할 수 있다. 일 실시예에서, 제3 인공신경망 모델은, 로지스틱 시그모 이드 함수(logistic sigmoid function) 및 완전 연결층(fully-connected layer)를 이용하여 구성될 수 있고, 학습 코드 시퀀스 임베딩 및 학습 정렬 시퀀스 임베딩으로부터 참조 인코더 입력 임베딩이 출력되도록 학습될 수 있다. 그 후, 프로세서는 인코더 입력 임베딩을 기초로 자연어 주석에 대한 정보를 생성할 수 있다(S850). 일 실시예 에서, 프로세서는 인코더 입력 임베딩을 단일 인코더에 입력함으로써, 자연어 주석에 대한 정보를 생성할 수 있 다. 구체적으로, 프로세서는 인코더 입력 임베딩을 단일 인코더에 입력함으로써 단일 인코더에 연결된 디코더 로부터 생성된 확률 데이터에 기초하여 자연어 주석을 생성할 수 있다. 도 8에서 도시한 흐름도 및 상술한 설명은 일 예시일 뿐이며, 일부 실시예에서는 다르게 구현될 수 있다. 예를 들어, 일부 실시예에서는 각 단계의 순서가 바뀌거나, 일부 단계가 반복 수행되거나, 일부 단계가 생략되거나, 일부 단계가 추가될 수 있다. 상술한 방법은 컴퓨터에서 실행하기 위해 컴퓨터 판독 가능한 기록 매체에 저장된 컴퓨터 프로그램으로 제공될 수 있다. 매체는 컴퓨터로 실행 가능한 프로그램을 계속 저장하거나, 실행 또는 다운로드를 위해 임시 저장하 는 것일 수도 있다. 또한, 매체는 단일 또는 수개 하드웨어가 결합된 형태의 다양한 기록수단 또는 저장수단일 수 있는데, 어떤 컴퓨터 시스템에 직접 접속되는 매체에 한정되지 않고, 네트워크 상에 분산 존재하는 것일 수 도 있다. 매체의 예시로는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD-ROM 및 DVD 와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical medium), 및 ROM, RAM, 플래시 메모리 등을 포함하여 프로그램 명령어가 저장되도록 구성된 것이 있을 수 있다. 또한, 다른 매체 의 예시로, 애플리케이션을 유통하는 앱 스토어나 기타 다양한 소프트웨어를 공급 내지 유통하는 사이트, 서버 등에서 관리하는 기록매체 내지 저장매체도 들 수 있다. 본 개시의 방법, 동작 또는 기법들은 다양한 수단에 의해 구현될 수도 있다. 예를 들어, 이러한 기법들은 하드 웨어, 펌웨어, 소프트웨어, 또는 이들의 조합으로 구현될 수도 있다. 본원의 개시와 연계하여 설명된 다양한 예시적인 논리적 블록들, 모듈들, 회로들, 및 알고리즘 단계들은 전자 하드웨어, 컴퓨터 소프트웨어, 또는 양자 의 조합들로 구현될 수도 있음을 통상의 기술자들은 이해할 것이다. 하드웨어 및 소프트웨어의 이러한 상호 대 체를 명확하게 설명하기 위해, 다양한 예시적인 구성요소들, 블록들, 모듈들, 회로들, 및 단계들이 그들의 기능 적 관점에서 일반적으로 위에서 설명되었다. 그러한 기능이 하드웨어로서 구현되는지 또는 소프트웨어로서 구 현되는지의 여부는, 특정 애플리케이션 및 전체 시스템에 부과되는 설계 요구사항들에 따라 달라진다. 통상의 기술자들은 각각의 특정 애플리케이션을 위해 다양한 방식들로 설명된 기능을 구현할 수도 있으나, 그러한 구현 들은 본 개시의 범위로부터 벗어나게 하는 것으로 해석되어서는 안된다. 하드웨어 구현에서, 기법들을 수행하는 데 이용되는 프로세싱 유닛들은, 하나 이상의 ASIC들, DSP들, 디지털 신 호 프로세싱 디바이스들(digital signal processing devices; DSPD들), 프로그램가능 논리 디바이스들 (programmable logic devices; PLD들), 필드 프로그램가능 게이트 어레이들(field programmable gate arrays; FPGA들), 프로세서들, 제어기들, 마이크로제어기들, 마이크로프로세서들, 전자 디바이스들, 본 개시에 설명된 기능들을 수행하도록 설계된 다른 전자 유닛들, 컴퓨터, 또는 이들의 조합 내에서 구현될 수도 있다. 따라서, 본 개시와 연계하여 설명된 다양한 예시적인 논리 블록들, 모듈들, 및 회로들은 범용 프로세서, DSP, ASIC, FPGA나 다른 프로그램 가능 논리 디바이스, 이산 게이트나 트랜지스터 로직, 이산 하드웨어 컴포넌트들, 또는 본원에 설명된 기능들을 수행하도록 설계된 것들의 임의의 조합으로 구현되거나 수행될 수도 있다. 범용 프로세서는 마이크로프로세서일 수도 있지만, 대안으로, 프로세서는 임의의 종래의 프로세서, 제어기, 마이크로 제어기, 또는 상태 머신일 수도 있다. 프로세서는 또한, 컴퓨팅 디바이스들의 조합, 예를 들면, DSP와 마이크 로프로세서, 복수의 마이크로프로세서들, DSP 코어와 연계한 하나 이상의 마이크로프로세서들, 또는 임의의 다 른 구성의 조합으로 구현될 수도 있다. 펌웨어 및/또는 소프트웨어 구현에 있어서, 기법들은 랜덤 액세스 메모리(random access memory; RAM), 판독 전 용 메모리(read-only memory; ROM), 비휘발성 RAM(non-volatile random access memory; NVRAM), PROM(programmable read-only memory), EPROM(erasable programmable read-only memory), EEPROM(electrically erasable PROM), 플래시 메모리, 컴팩트 디스크(compact disc; CD), 자기 또는 광학 데이 터 스토리지 디바이스 등과 같은 컴퓨터 판독가능 매체 상에 저장된 명령어들로 구현될 수도 있다. 명령들은 하나 이상의 프로세서들에 의해 실행 가능할 수도 있고, 프로세서(들)로 하여금 본 개시에 설명된 기능의 특정 양태들을 수행하게 할 수도 있다. 이상 설명된 실시예들이 하나 이상의 독립형 컴퓨터 시스템에서 현재 개시된 주제의 양태들을 활용하는 것으로 기술되었으나, 본 개시는 이에 한정되지 않고, 네트워크나 분산 컴퓨팅 환경과 같은 임의의 컴퓨팅 환경과 연계 하여 구현될 수도 있다. 또 나아가, 본 개시에서 주제의 양상들은 복수의 프로세싱 칩들이나 장치들에서 구현 될 수도 있고, 스토리지는 복수의 장치들에 걸쳐 유사하게 영향을 받게 될 수도 있다. 이러한 장치들은 PC들, 네트워크 서버들, 및 휴대용 장치들을 포함할 수도 있다."}
{"patent_id": "10-2022-0173107", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "본 명세서에서는 본 개시가 일부 실시예들과 관련하여 설명되었지만, 본 개시의 발명이 속하는 기술분야의 통상 의 기술자가 이해할 수 있는 본 개시의 범위를 벗어나지 않는 범위에서 다양한 변형 및 변경이 이루어질 수 있 다. 또한, 그러한 변형 및 변경은 본 명세서에 첨부된 특허청구의 범위 내에 속하는 것으로 생각되어야 한다."}
{"patent_id": "10-2022-0173107", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 개시의 실시예들은, 이하 설명하는 첨부 도면들을 참조하여 설명될 것이며, 여기서 유사한 참조 번호는 유사 한 요소들을 나타내지만, 이에 한정되지는 않는다. 도 1은 본 개시의 일 실시예에 따른 자연어 주석을 포함하는 소스 코드가 생성되는 예시를 나타내는 도면이다. 도 2는 본 개시의 일 실시예에 따른 컴퓨팅 장치의 내부 구성을 나타내는 블록도이다.도 3은 본 개시의 일 실시예에 따른 사용자 단말의 프로세서의 내부 구성 및 데이터 입출력을 나타내는 블록도 이다. 도 4는 본 개시의 일 실시예에 따른 원본 소스 코드에 기초하여 정렬 시퀀스가 생성되는 예시를 나타내는 도면 이다. 도 5는 본 개시의 일 실시예에 따른 원본 소스 코드로부터 코드 시퀀스 임베딩 및 정렬 시퀀스 임베딩이 생성되 는 과정을 나타내는 도면이다. 도 6은 본 개시의 일 실시예에 따라 인코더 입력 임베딩을 생성하는 방법을 나타내는 도면이다. 도 7는 본 개시의 일 실시예에 따른 인공신경망 모델을 나타내는 예시도이다. 도 8은 본 개시의 일 실시예에 따른 트랜스포머 기반의 자연어 주석 자동 생성 방법을 나타내는 흐름도이다."}
