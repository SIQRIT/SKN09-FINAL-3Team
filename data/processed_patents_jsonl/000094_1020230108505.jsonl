{"patent_id": "10-2023-0108505", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0027121", "출원번호": "10-2023-0108505", "발명의 명칭": "인공지능 모델 학습을 위한 데이터셋 형식 관리 방법 및 시스템", "출원인": "주식회사 노타", "발명자": "김민준"}}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "적어도 하나의 프로세서를 포함하는 컴퓨터 장치가 인공지능 모델의 학습을 위한 데이터셋의 형식을 관리하는방법에 있어서,상기 적어도 하나의 프로세서에 의해, 사용자의 데이터셋을 입력받는 단계;상기 적어도 하나의 프로세서에 의해, 상기 데이터셋의 디렉토리 구조에 대한 디렉토리 구조 정보를 생성하는단계;상기 적어도 하나의 프로세서에 의해, 상기 데이터셋의 어노테이션 구조 정보를 생성하는 단계; 및상기 적어도 하나의 프로세서에 의해, 상기 디렉토리 구조 정보 및 상기 어노테이션 구조 정보가 결합된 데이터셋 형식 정보를 생성하는 단계를 포함하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 디렉토리 구조 정보를 생성하는 단계는,상기 데이터셋의 디렉토리 구조를 텍스트 형식으로 추출하는 단계; 및상기 추출된 텍스트 형식의 디렉토리 구조에 각 파일에 대한 클래스 정보를 추가하여 상기 디렉토리 구조 정보를 생성하는 단계를 포함하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 디렉토리 구조 정보를 생성하는 단계는,텍스트 형식의 디렉토리 구조를 입력받아 디렉토리 구조에 각 파일에 대한 클래스 정보가 추가된 디렉토리 구조정보를 출력하도록 학습된 NLP(Natural Language Processing) 기반의 디렉토리 구조 검색 모델을 이용하여 상기디렉토리 구조 정보를 생성하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 어노테이션 구조 정보를 생성하는 단계는,상기 디렉토리 구조 정보에 기반하여 상기 데이터셋에서 어노테이션 파일 및 이미지 파일을 추출하는 단계;상기 이미지 파일에 포함된 임의의 이미지에 대해 상기 어노테이션 파일로 조합 가능한 어노테이션 조합을 생성하는 단계;상기 임의의 이미지에 대한 기준 어노테이션을 확인하는 단계; 및상기 어노테이션 조합과 상기 기준 어노테이션을 비교하여 상기 어노테이션 구조 정보를 생성하는 단계를 포함하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2025-0027121-3-제4항에 있어서,상기 어노테이션 조합을 생성하는 단계는,상기 임의의 이미지에 대해 조합 가능한 어노테이션 형식들의 집합으로서 상기 어노테이션 조합을 생성하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4항에 있어서,상기 기준 어노테이션을 확인하는 단계는,상기 이미지 파일에 어노테이션이 표시된 이미지가 존재하는 경우, 상기 이미지의 어노테이션을 상기 기준 어노테이션으로 확인하는 단계; 및상기 이미지 파일에 어노테이션이 표시된 이미지가 존재하지 않는 경우, 상기 사용자로부터 상기 임의의 이미지에 대한 상기 기준 어노테이션을 확인받는 단계를 포함하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제4항에 있어서,상기 기준 어노테이션을 확인하는 단계는,상기 임의의 이미지에 대해 어노테이션을 상기 사용자가 추가 가능한 GUI(Graphical User Interface) 기반의 어노테이션 확인 기능을 상기 사용자에게 제공하는 단계; 및상기 어노테이션 확인 기능을 통해 상기 임의의 이미지에 대해 추가된 어노테이션을 상기 기준 어노테이션으로확인받는 단계를 포함하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제4항에 있어서,상기 어노테이션 구조 정보를 생성하는 단계는,상기 어노테이션 조합이 포함하는 어노테이션 형식들 각각에 해당하는 후보 어노테이션을 상기 임의의 이미지에표시하여 서로 다른 형식의 후보 어노테이션이 표시된 복수의 이미지들을 생성하는 단계;상기 생성된 복수의 이미지들 각각과 상기 기준 어노테이션을 표시한 상기 임의의 이미지를 비교하여 상기 기준어노테이션과 가장 유사한 후보 어노테이션의 형식을 확인하는 단계; 및상기 확인된 형식에 대한 정보를 포함하는 상기 어노테이션 구조 정보를 생성하는 단계를 포함하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,상기 적어도 하나의 프로세서에 의해, 제1 형식의 상기 데이터셋을 상기 데이터셋 형식 정보를 이용하여 인공지능 모델을 위한 제2 형식의 데이터셋으로 변환하는 단계를 더 포함하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 제1 형식은 상기 어노테이션 구조 정보에 포함된 어노테이션 형식에 기초하여 결정되고,공개특허 10-2025-0027121-4-상기 제2 형식은 사용자에 의해 입력되는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서,상기 변환하는 단계는,상기 데이터셋 형식 정보에 포함된 상기 디렉토리 구조 정보를 이용하여 상기 제1 형식의 디렉토리 구조의 데이터 배치를 상기 제2 형식의 디렉토리 구조의 데이터 배치로 변경하는 단계; 및상기 데이터셋 형식 정보에 더 포함된 상기 어노테이션 구조 정보를 이용하여 상기 데이터셋이 포함하는 상기제1 형식의 어노테이션 형식을 상기 제2 형식의 어노테이션 형식으로 변경하는 단계를 포함하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제9항에 있어서,상기 적어도 하나의 프로세서에 의해, 상기 제1 형식의 상기 데이터셋을 상기 데이터셋 형식 정보를 이용하여상기 인공지능 모델과는 다른 인공지능 모델을 위한 제3 형식의 데이터셋으로 변환하는 단계를 더 포함하는 것을 특징으로 하는 데이터셋 형식 관리 방법."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항 내지 제12항 중 어느 한 항의 방법을 컴퓨터 장치에 실행시키기 위한 프로그램이 기록되어 있는 컴퓨터판독 가능한 기록매체."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "컴퓨터 장치에서 판독 가능한 명령을 실행하도록 구현되는 적어도 하나의 프로세서를 포함하고,상기 적어도 하나의 프로세서에 의해, 사용자의 데이터셋을 입력받고,상기 데이터셋의 디렉토리 구조에 대한 디렉토리 구조 정보를 생성하고,상기 데이터셋의 어노테이션 구조 정보를 생성하고,상기 디렉토리 구조 정보 및 상기 어노테이션 구조 정보가 결합된 데이터셋 형식 정보를 생성하는 것을 특징으로 하는 컴퓨터 장치."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 디렉토리 구조 정보를 생성하기 위해, 상기 적어도 하나의 프로세서에 의해,상기 데이터셋의 디렉토리 구조를 텍스트 형식으로 추출하고,상기 추출된 텍스트 형식의 디렉토리 구조에 각 파일에 대한 클래스 정보를 추가하여 상기 디렉토리 구조 정보를 생성하는 것을 특징으로 하는 컴퓨터 장치."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에 있어서,공개특허 10-2025-0027121-5-상기 어노테이션 구조 정보를 생성하기 위해, 상기 적어도 하나의 프로세서에 의해,상기 디렉토리 구조 정보에 기반하여 상기 데이터셋에서 어노테이션 파일 및 이미지 파일을 추출하고,상기 이미지 파일에 포함된 임의의 이미지에 대해 상기 어노테이션 파일로 조합 가능한 어노테이션 조합을 생성하고,상기 임의의 이미지에 대한 기준 어노테이션을 확인하고,상기 어노테이션 조합과 상기 기준 어노테이션을 비교하여 상기 어노테이션 구조 정보를 생성하는 것것을 특징으로 하는 컴퓨터 장치."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서,상기 어노테이션 조합을 생성하기 위해, 상기 적어도 하나의 프로세서에 의해,상기 임의의 이미지에 대해 조합 가능한 어노테이션 형식들의 집합으로서 상기 어노테이션 조합을 생성하는 것을 특징으로 하는 컴퓨터 장치."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제16항에 있어서,상기 기준 어노테이션을 확인하기 위해, 상기 적어도 하나의 프로세서에 의해,상기 이미지 파일에 어노테이션이 표시된 이미지가 존재하는 경우, 상기 이미지의 어노테이션을 상기 기준 어노테이션으로 확인하고,상기 이미지 파일에 어노테이션이 표시된 이미지가 존재하지 않는 경우, 상기 사용자로부터 상기 임의의 이미지에 대한 상기 기준 어노테이션을 확인받는 것을 특징으로 하는 컴퓨터 장치."}
{"patent_id": "10-2023-0108505", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제16항에 있어서,상기 어노테이션 구조 정보를 생성하기 위해, 상기 적어도 하나의 프로세서에 의해,상기 어노테이션 조합이 포함하는 어노테이션 형식들 각각에 해당하는 후보 어노테이션을 상기 임의의 이미지에표시하여 서로 다른 형식의 후보 어노테이션이 표시된 복수의 이미지들을 생성하고,상기 생성된 복수의 이미지들 각각과 상기 기준 어노테이션을 표시한 상기 임의의 이미지를 비교하여 상기 기준어노테이션과 가장 유사한 후보 어노테이션의 형식을 확인하고,상기 확인된 형식에 대한 정보를 포함하는 상기 어노테이션 구조 정보를 생성하는 것을 특징으로 하는 컴퓨터 장치."}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "인공지능 모델 학습을 위한 데이터셋 형식 관리 방법 및 시스템을 개시한다. 일실시예에 따른 인공지능 모델의 학습을 위한 데이터셋의 형식을 관리하는 방법은 사용자의 데이터셋을 입력받는 단계, 상기 데이터셋의 디렉토리 구조에 대한 디렉토리 구조 정보를 생성하는 단계, 상기 데이터셋의 어노테이션 구조 정보를 생성하는 단계 및 상기 디렉토리 구조 정보 및 상기 어노테이션 구조 정보가 결합된 데이터셋 형식 정보를 생성하는 단계를 포함할 수 있다."}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명의 실시예들은 인공지능 모델 학습을 위한 데이터셋 형식 관리 방법 및 시스템에 관한 것이다."}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 모델을 사용하기 위해서는 사용자가 보유하고 있는 데이터셋의 형식을 사용하고자 하는 인공지능 모델 의 데이터 입력 형식에 맞게 수정해야 한다. 다시 말해, 사용자가 인공지능 모델과 데이터를 보유하고 있다고 해서, 사용자가 보유하고 있는 데이터를 바로 사용할 수 있는 것이 아니다.대표적인 태스크 중 하나인 객체 탐지(object detection) 태스크를 예로 들면, 같은 바운딩 박스(bounding bo x)에 대해서도 인공지능 모델에 따라 서로 다른 표현 방식이 사용될 수 있다. 일례로, 제1 인공지능 모델은 바 운딩 박스에 대응하는 사각형 4개의 꼭지점에 대한 4가지 좌표를 기준으로 바운딩 박스를 인식하는 반면, 제2 인공지능 모델은 바운딩 박스에 대응하는 사각형의 중심점을 기준으로 바운딩 박스를 인식할 수 있다. 더 나아 가 인공지능 모델이 요구하는 데이터셋의 형식 중 디렉토리 구조도 인공지능 모델마다 서로 상이할 수 있다. 이처럼, 디렉토리 구조부터 태스크에 따른 추가적인 정보에 대한 표현 방식 등이 인공지능 모델마다 다양하게 요구될 수 있다. 종래기술에서 사용자는 자신이 보유하고 있는 데이터셋의 제1 형식과 인공지능 모델이 필요로 하는 데이터셋의 제2 형식을 분석하여, 기설정된 코드를 통해 데이터셋의 형식을 제1 형식에서 제2 형식으로 변환할 수 있다. 그러나, 이러한 종래기술은 인공지능 모델마다의 형식으로 사용자가 보유하고 있는 데이터셋의 형식을 변환해주 어야 하는 불편함이 있다. 또한, 다수의 인공지능 모델을 반복적으로 이용하는 경우, 사용자는 다수의 인공지 능 모델 각각을 위한 형식의 데이터셋을 저장하고 있어야 하기 때문에 사용자에게 상대적으로 큰 저장 공간을 요구하게 된다. 다시 말해, 변환을 위한 코드를 통해 데이터셋의 형식을 변환하는 종래기술은 귀찮고, 복잡하 며, 비효율적이다. [선행문헌번호] 한국공개특허 제10-2022-069608호"}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "인공지능 모델 학습을 위한 데이터셋 형식 관리 방법 및 시스템을 제공한다."}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "적어도 하나의 프로세서를 포함하는 컴퓨터 장치가 인공지능 모델의 학습을 위한 데이터셋의 형식을 관리하는 방법에 있어서, 상기 적어도 하나의 프로세서에 의해, 사용자의 데이터셋을 입력받는 단계; 상기 적어도 하나의 프로세서에 의해, 상기 데이터셋의 디렉토리 구조에 대한 디렉토리 구조 정보를 생성하는 단계; 상기 적어도 하 나의 프로세서에 의해, 상기 데이터셋의 어노테이션 구조 정보를 생성하는 단계; 및 상기 적어도 하나의 프로세 서에 의해, 상기 디렉토리 구조 정보 및 상기 어노테이션 구조 정보가 결합된 데이터셋 형식 정보를 생성하는 단계를 포함하는 데이터셋 형식 관리 방법을 제공한다. 일측에 따르면, 상기 디렉토리 구조 정보를 생성하는 단계는, 상기 데이터셋의 디렉토리 구조를 텍스트 형식으 로 추출하는 단계; 및 상기 추출된 텍스트 형식의 디렉토리 구조에 각 파일에 대한 클래스 정보를 추가하여 상 기 디렉토리 구조 정보를 생성하는 단계를 포함하는 것을 특징으로 할 수 있다. 다른 측면에 따르면, 상기 디렉토리 구조 정보를 생성하는 단계는, 텍스트 형식의 디렉토리 구조를 입력받아 디 렉토리 구조에 각 파일에 대한 클래스 정보가 추가된 디렉토리 구조 정보를 출력하도록 학습된 NLP(Natural Language Processing) 기반의 디렉토리 구조 검색 모델을 이용하여 상기 디렉토리 구조 정보를 생성하는 것을 특징으로 할 수 있다. 또 다른 측면에 따르면, 상기 어노테이션 구조 정보를 생성하는 단계는, 상기 디렉토리 구조 정보에 기반하여 상기 데이터셋에서 어노테이션 파일 및 이미지 파일을 추출하는 단계; 상기 이미지 파일에 포함된 임의의 이미 지에 대해 상기 어노테이션 파일로 조합 가능한 어노테이션 조합을 생성하는 단계; 상기 임의의 이미지에 대한 기준 어노테이션을 확인하는 단계; 및 상기 어노테이션 조합과 상기 기준 어노테이션을 비교하여 상기 어노테이 션 구조 정보를 생성하는 단계를 포함하는 것을 특징으로 할 수 있다. 또 다른 측면에 따르면, 상기 어노테이션 조합을 생성하는 단계는, 상기 임의의 이미지에 대해 조합 가능한 어 노테이션 형식들의 집합으로서 상기 어노테이션 조합을 생성하는 것을 특징으로 할 수 있다. 또 다른 측면에 따르면, 상기 기준 어노테이션을 확인하는 단계는, 상기 이미지 파일에 어노테이션이 표시된 이 미지가 존재하는 경우, 상기 이미지의 어노테이션을 상기 기준 어노테이션으로 확인하는 단계; 및 상기 이미지 파일에 어노테이션이 표시된 이미지가 존재하지 않는 경우, 상기 사용자로부터 상기 임의의 이미지에 대한 상기 기준 어노테이션을 확인받는 단계를 포함하는 것을 특징으로 할 수 있다.또 다른 측면에 따르면, 상기 기준 어노테이션을 확인받는 단계는, 상기 임의의 이미지에 대해 어노테이션을 상 기 사용자가 추가 가능한 GUI(Graphical User Interface) 기반의 어노테이션 확인 기능을 상기 사용자에게 제공 하는 단계; 및 상기 어노테이션 확인 기능을 통해 상기 임의의 이미지에 대해 추가된 어노테이션을 상기 기준 어노테이션으로 확인받는 단계를 포함하는 것을 특징으로 할 수 있다. 또 다른 측면에 따르면, 상기 어노테이션 구조 정보를 생성하는 단계는, 상기 어노테이션 조합이 포함하는 어노 테이션 형식들 각각에 해당하는 후보 어노테이션을 상기 임의의 이미지에 표시하여 서로 다른 형식의 후보 어노 테이션이 표시된 복수의 이미지들을 생성하는 단계; 상기 생성된 복수의 이미지들 각각과 상기 기준 어노테이션 을 표시한 상기 임의의 이미지를 비교하여 상기 기준 어노테이션과 가장 유사한 후보 어노테이션의 형식을 확인 하는 단계; 및 상기 확인된 형식에 대한 정보를 포함하는 상기 어노테이션 구조 정보를 생성하는 단계를 포함하 는 것을 특징으로 할 수 있다. 또 다른 측면에 따르면, 상기 데이터셋 형식 관리 방법은 상기 적어도 하나의 프로세서에 의해, 제1 형식의 상 기 데이터셋을 상기 데이터셋 형식 정보를 이용하여 인공지능 모델을 위한 제2 형식의 데이터셋으로 변환하는 단계를 더 포함할 수 있다. 또 다른 측면에 따르면, 상기 제1 형식은 상기 어노테이션 구조 정보에 포함된 어노테이션 형식에 기초하여 결 정되고, 상기 제2 형식은 사용자에 의해 입력되는 것을 특징으로 할 수 있다. 또 다른 측면에 따르면, 상기 변환하는 단계는, 상기 데이터셋 형식 정보에 포함된 상기 디렉토리 구조 정보를 이용하여 상기 제1 형식의 디렉토리 구조의 데이터 배치를 상기 제2 형식의 디렉토리 구조의 데이터 배치로 변 경하는 단계; 및 상기 데이터셋 형식 정보에 더 포함된 상기 어노테이션 구조 정보를 이용하여 상기 데이터셋이 포함하는 상기 제1 형식의 어노테이션 형식을 상기 제2 형식의 어노테이션 형식으로 변경하는 단계를 포함하는 것을 특징으로 할 수 있다. 또 다른 측면에 따르면, 상기 데이터셋 형식 관리 방법은 상기 적어도 하나의 프로세서에 의해, 상기 제1 형식 의 상기 데이터셋을 상기 데이터셋 형식 정보를 이용하여 상기 인공지능 모델과는 다른 인공지능 모델을 위한 제3 형식의 데이터셋으로 변환하는 단계를 더 포함할 수 있다. 컴퓨터 장치와 결합되어 상기 방법을 컴퓨터 장치에 실행시키기 위해 컴퓨터 판독 가능한 기록매체에 저장된 컴 퓨터 프로그램을 제공한다. 상기 방법을 컴퓨터 장치에 실행시키기 위한 프로그램이 기록되어 있는 컴퓨터 판독 가능한 기록매체를 제공한 다. 컴퓨터 장치에서 판독 가능한 명령을 실행하도록 구현되는 적어도 하나의 프로세서를 포함하고, 상기 적어도 하 나의 프로세서에 의해, 사용자의 데이터셋을 입력받고, 상기 데이터셋의 디렉토리 구조에 대한 디렉토리 구조 정보를 생성하고, 상기 데이터셋의 어노테이션 구조 정보를 생성하고, 상기 디렉토리 구조 정보 및 상기 어노테 이션 구조 정보가 결합된 데이터셋 형식 정보를 생성하는 것을 특징으로 하는 컴퓨터 장치를 제공한다."}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "인공지능 모델 학습을 위한 데이터셋 형식 관리 방법 및 시스템을 제공할 수 있다."}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 실시예를 첨부한 도면을 참조하여 상세히 설명한다. 본 발명의 실시예들에 따른 데이터셋 형식 관리 시스템은 적어도 하나의 컴퓨터 장치에 의해 구현될 수 있으며, 본 발명의 실시예들에 따른 데이터셋 형식 관리 방법은 데이터셋 형식 관리 시스템에 포함되는 적어도 하나의 컴퓨터 장치를 통해 수행될 수 있다. 컴퓨터 장치에는 본 발명의 일실시예에 따른 컴퓨터 프로그램이 설치 및 구동될 수 있고, 컴퓨터 장치는 구동된 컴퓨터 프로그램의 제어에 따라 본 발명의 실시예들에 따른 데이터셋 형 식 관리 방법을 수행할 수 있다. 상술한 컴퓨터 프로그램은 컴퓨터 장치와 결합되어 데이터셋 형식 관리 방법 을 컴퓨터 장치에 실행시키기 위해 컴퓨터 판독 가능한 기록매체에 저장될 수 있다. 도 1은 본 발명의 일실시예에 따른 컴퓨터 장치의 예를 도시한 블록도이다. 컴퓨터 장치(Computer device, 100)는 도 1에 도시된 바와 같이, 메모리(Memory, 110), 프로세서(Processor, 120), 통신 인터페이스 (Communication interface, 130) 그리고 입출력 인터페이스(I/O interface, 140)를 포함할 수 있다. 메모리 는 컴퓨터에서 판독 가능한 기록매체로서, RAM(random access memory), ROM(read only memory) 및 디스크 드라이브와 같은 비소멸성 대용량 기록장치(permanent mass storage device)를 포함할 수 있다. 여기서 ROM과 디스크 드라이브와 같은 비소멸성 대용량 기록장치는 메모리와는 구분되는 별도의 영구 저장 장치로서 컴 퓨터 장치에 포함될 수도 있다. 또한, 메모리에는 운영체제와 적어도 하나의 프로그램 코드가 저장 될 수 있다. 이러한 소프트웨어 구성요소들은 메모리와는 별도의 컴퓨터에서 판독 가능한 기록매체로부터 메모리로 로딩될 수 있다. 이러한 별도의 컴퓨터에서 판독 가능한 기록매체는 플로피 드라이브, 디스크, 테이프, DVD/CD-ROM 드라이브, 메모리 카드 등의 컴퓨터에서 판독 가능한 기록매체를 포함할 수 있다. 다른 실 시예에서 소프트웨어 구성요소들은 컴퓨터에서 판독 가능한 기록 매체가 아닌 통신 인터페이스를 통해 메 모리에 로딩될 수도 있다. 예를 들어, 소프트웨어 구성요소들은 네트워크(Network, 160)를 통해 수신되는 파일들에 의해 설치되는 컴퓨터 프로그램에 기반하여 컴퓨터 장치의 메모리에 로딩될 수 있다. 프로세서는 기본적인 산술, 로직 및 입출력 연산을 수행함으로써, 컴퓨터 프로그램의 명령을 처리하도록 구성될 수 있다. 명령은 메모리 또는 통신 인터페이스에 의해 프로세서로 제공될 수 있다. 예 를 들어 프로세서는 메모리와 같은 기록 장치에 저장된 프로그램 코드에 따라 수신되는 명령을 실행 하도록 구성될 수 있다. 통신 인터페이스는 네트워크를 통해 컴퓨터 장치가 다른 장치와 서로 통신하기 위한 기능을 제 공할 수 있다. 일례로, 컴퓨터 장치의 프로세서가 메모리와 같은 기록 장치에 저장된 프로그램 코드에 따라 생성한 요청이나 명령, 데이터, 파일 등이 통신 인터페이스의 제어에 따라 네트워크를 통해 다른 장치들로 전달될 수 있다. 역으로, 다른 장치로부터의 신호나 명령, 데이터, 파일 등이 네트워크 를 거쳐 컴퓨터 장치의 통신 인터페이스를 통해 컴퓨터 장치로 수신될 수 있다. 통신 인 터페이스를 통해 수신된 신호나 명령, 데이터 등은 프로세서나 메모리로 전달될 수 있고, 파일 등은 컴퓨터 장치가 더 포함할 수 있는 저장 매체(상술한 영구 저장 장치)로 저장될 수 있다. 입출력 인터페이스는 입출력 장치(I/O device, 150)와의 인터페이스를 위한 수단일 수 있다. 예를 들어, 입력 장치는 마이크, 키보드 또는 마우스 등의 장치를, 그리고 출력 장치는 디스플레이, 스피커와 같은 장치를 포함할 수 있다. 다른 예로 입출력 인터페이스는 터치스크린과 같이 입력과 출력을 위한 기능이 하나로 통합된 장치와의 인터페이스를 위한 수단일 수도 있다. 입출력 장치는 컴퓨터 장치와 하나의 장치로 구성될 수도 있다. 또한, 다른 실시예들에서 컴퓨터 장치는 도 1의 구성요소들보다 더 적은 혹은 더 많은 구성요소들을 포함 할 수도 있다. 그러나, 대부분의 종래기술적 구성요소들을 명확하게 도시할 필요성은 없다. 예를 들어, 컴퓨 터 장치는 상술한 입출력 장치 중 적어도 일부를 포함하도록 구현되거나 또는 트랜시버 (transceiver), 데이터베이스 등과 같은 다른 구성요소들을 더 포함할 수도 있다. 도 2는 본 발명의 일실시예에 따른 데이터셋 형식 관리 방법의 예를 도시한 흐름도이다. 본 실시예에 따른 데 이터셋 형식 관리 방법은 도 1을 통해 설명한 컴퓨터 장치에 의해 수행될 수 있다. 이때, 컴퓨터 장치 의 프로세서는 메모리가 포함하는 운영체제의 코드나 적어도 하나의 컴퓨터 프로그램의 코드에 따른 제어 명령(instruction)을 실행하도록 구현될 수 있다. 여기서, 프로세서는 컴퓨터 장치에 저 장된 코드가 제공하는 제어 명령에 따라 컴퓨터 장치가 도 2의 방법이 포함하는 단계들(210 내지 260)을 수행하도록 컴퓨터 장치를 제어할 수 있다.단계에서 컴퓨터 장치는 사용자의 데이터셋을 입력받을 수 있다. 일례로, 컴퓨터 장치에 의해 구현되는 데이터셋 형식 관리 시스템은 사용자의 단말과 네트워크를 통해 연결될 수 있으며, 사용자의 단 말이 네트워크를 통해 전달하는 사용자의 데이터셋을 수신하여 데이터셋을 입력받을 수 있다. 데이터셋은 인공지능 모델의 학습을 위한 다양한 디렉토리 구조의 데이터 파일들을 포함할 수 있다. 이때, 데이터셋의 형 식과 인공지능 모델이 요구하는 데이터셋의 형식은 동일할 수도 있으나 상이할 수도 있다. 또한, 다양한 형식 의 데이터셋을 요구하는 다양한 인공지능 모델들을 고려할 때, 사용자의 데이터셋의 형식 그대로 인공지능 모델 의 학습에 이용하기는 어려울 수 있다. 이러한 문제를 해결하기 위해, 이후 단계들(220 내지 240)에서는 입력 받은 데이터셋의 데이터셋 형식 정보를 생성 및 관리할 수 있다. 이 경우, 단계들(250 및 260)에서와 같이 컴 퓨터 장치는 사용자의 특정한 형식의 데이터셋을 생성된 데이터셋 형식 정보를 이용하여 추가적인 수작업 없이 다른 형식의 데이터셋으로 변환할 수 있다. 단계에서 컴퓨터 장치는 데이터셋의 디렉토리 구조에 대한 디렉토리 구조 정보를 생성할 수 있다. 이를 위해, 컴퓨터 장치는 단계에서 데이터셋의 디렉토리 구조를 텍스트 형식으로 추출할 수 있다. 파일의 디렉토리 구조를 추출하기 위한 기술은 이미 잘 알려져 있다. 일례로, 리눅스 운영체제에서 트리(tree) 명령어는 \"-L\" 옵션을 통해 폴더나 파일의 디렉토리 구조를 텍스트 형식으로 가져오기 위한 기본적인 명령어일 수 있다. 필요에 따라, 컴퓨터 장치는 디렉토리 구조를 각 파일에 대한 트리 형태로 변경할 수 있다. 또한, 컴퓨터 장치는 단계에서 추출된 텍스트 형식의 디렉토리 구조에 각 파일에 대한 클래스 정보를 추가하여 디렉토리 구조 정보를 생성할 수 있다. 일례로, 컴퓨터 장치는 룰 기반으로 디렉토리 구조에 데 이터셋의 각 파일에 대한 클래스 정보를 추가하여 디렉토리 구조 정보를 생성할 수 있다. 다른 예로, 컴퓨터 장치는 텍스트 형식의 디렉토리 구조를 입력받아 디렉토리 구조에 각 파일에 대한 클래스 정보가 추가된 디렉토리 구조 정보를 출력하도록 학습된 NLP(Natural Language Processing) 기반의 디렉토리 구조 검색 모델을 이용하여 디렉토리 구조 정보를 생성할 수도 있다. 클래스 정보는 학습 이미지, 테스트 이미지, 학습 어노테이 션(annotation) 등과 같이 데이터를 분류한 정보일 수 있다. 단계에서 컴퓨터 장치는 데이터셋의 어노테이션 구조 정보를 생성할 수 있다. 이를 위해, 컴퓨터 장 치는 단계에서 디렉토리 구조 정보에 기반하여 데이터셋에서 어노테이션 파일 및 이미지 파일을 추출 할 수 있다. 앞서 설명한 바와 같이 클래스 정보는 데이터를 학습 이미지, 테스트 이미지, 학습 어노테이션 등 으로 분류한 정보로서, 컴퓨터 장치는 이러한 클래스 정보를 이용하여 데이터셋에서 어노테이션 파일 및 이미지 파일을 추출할 수 있다. 이후 컴퓨터 장치는 단계에서 이미지 파일에 포함된 임의의 이미지에 대해 어노테이션 파일로 조합 가능한 어노테이션 조합을 생성할 수 있다. 일례로, 컴퓨터 장치는 어노테이션 파일의 데이터에 대응될 수 있는 다양한 어노테이션 형식들의 집합으로서 어노테이션 조합을 생성할 수 있다. 일례로, 컴퓨터 장치 는 임의의 이미지에 대해 조합 가능한 어노테이션 형식들의 집합으로서 어노테이션 조합을 생성할 수 있다. 하나의 어노테이션은 다양한 어노테이션 형식으로 표현될 수 있다. 예를 들어, 객체 탐지를 위한 이미 지 내의 객체에 설정되는 어노테이션으로서의 바운딩 박스를 고려할 수 있다. 여기서, 어노테이션 파일에 포함 된 데이터는 어노테이션 형식에 따라 다르게 해석될 수 있으며, 이에 따라 이미지 상에 표시되는 어노테이션(예 를 들어, 바운딩 박스)이 달라질 수 있다. 예를 들어, 제1 어노테이션 형식의 바운딩 박스는 이미지 내에서의 바운딩 박스의 중심점의 좌표(x축 좌표, y축 좌표)와 바운딩 박스의 가로(width) 길이 및 세로(height) 길이를 통해 표현될 수 있다. 그러나, 제2 어노테이션 형식의 바운딩 박스는 바운딩 박스의 좌측 상단의 좌표와 바운 딩 박스의 가로(width) 길이 및 세로(height) 길이를 통해 표현될 수 있다. 또한, 제3 어노테이션 형식의 바운 딩 박스는 이미지 내에서의 바운딩 박스의 네 개의 꼭지점의 좌표를 통해 표현될 수 있다. 이처럼, 동일한 어 노테이션도 다양한 어노테이션 형식을 통해 표현될 수 있기 때문에, 컴퓨터 장치는 임의의 이미지에 대해 조합 가능한 다양한 어노테이션 형식들의 집합으로서 어노테이션 조합을 생성할 수 있다. 이때, 임의의 이미지 는 사용자의 데이터셋에서 추출된 이미지 파일에 포함된 이미지일 수 있다. 또한, 컴퓨터 장치는 단계에서 이미지 파일에 대한 기준 어노테이션을 확인할 수 있다. 일례로, 컴 퓨터 장치는 데이터셋에서 추출된 이미지 파일에 어노테이션이 표시된 이미지가 존재하는 경우, 해당 이미 지의 어노테이션을 기준 어노테이션으로 확인할 수 있다. 만약, 이미지 파일에 어노테이션이 표시된 이미지가 존재하지 않는 경우, 컴퓨터 장치는 사용자로부터 임의의 이미지에 대한 기준 어노테이션을 확인받을 수 있다. 여기서, 임의의 이미지는 앞서 설명한 바와 같이 사용자의 데이터셋에서 추출된 이미지 파일에 포함된 이미지일 수 있다. 일실시예로, 컴퓨터 장치는 임의의 이미지에 대해 어노테이션을 사용자가 추가 가능한 GUI(Graphical User Interface) 기반의 어노테이션 확인 기능을 사용자에게 제공할 수 있다. 이 경우, 컴퓨터장치는 어노테이션 확인 기능을 통해 임의의 이미지에 대해 추가된 어노테이션을 기준 어노테이션으로 확 인할 수 있다. 예를 들어, 다수의 이미지 파일들 중에서 선택된 일부 이미지 파일의 이미지들이 GUI 기반의 어 노테이션 확인 기능을 통해 사용자에게 제공될 수 있으며, 이러한 GUI 기반의 어노테이션 확인 기능을 통해 사 용자가 이미지에 추가한 어노테이션을 기준 어노테이션으로서 입력받을 수 있다. 예를 들어, 사용자는 GUI를 통 해 사용자에게 제공된 일부 이미지 파일의 이미지들 상에 어노테이션을 표시할 수 있고, 컴퓨터 장치는 표 시된 어노테이션을 기준 어노테이션으로 확인할 수 있다. 또한, 컴퓨터 장치는 단계에서 어노테이션 조합과 기준 어노테이션을 비교하여 어노테이션 구조 정보 를 생성할 수 있다. 일실시예로, 컴퓨터 장치는 어노테이션 조합이 포함하는 어노테이션 형식들 각각에 해당하는 후보 어노테이션을 임의의 이미지에 표시하여 서로 다른 형식의 후보 어노테이션이 표시된 복수의 이 미지들을 생성할 수 있다. 이후, 컴퓨터 장치는 생성된 복수의 이미지들 각각과 기준 어노테이션을 표시 한 임의의 이미지를 비교하여 기준 어노테이션과 가장 유사한 후보 어노테이션의 형식을 확인할 수 있으며, 확 인된 형식에 대한 정보를 포함하는 어노테이션 구조 정보를 생성할 수 있다. 일례로, 컴퓨터 장치는 데이 터셋의 이미지 파일에 포함된 이미지들에 어떠한 형식의 어노테이션이 사용되는지를 결정할 수 있다. 예를 들 어, 어노테이션 조합에 따른 어노테이션 형식들이 제1 어노테이션 형식, 제2 어노테이션 형식 및 제3 어노테이 션 형식이라 가정하고, 기준 어노테이션의 형식이 제1 어노테이션 형식이라 가정한다. 이때, 컴퓨터 장치(10 0)는 어노테이션 조합의 어노테이션 형식들 각각이 표시된 이미지들 각각과 기준 어노테이션이 표시된 이미지를 비교하여 기준 어노테이션과 가장 유사한 후보 어노테이션의 형식을 확인함으로써, 데이터셋의 어노테이션의 형 식이 제1 어노테이션 형식임을 결정할 수 있다. 확인된 형식은 데이터셋의 어노테이션 형식으로서 이러한 확인 된 형식에 대한 정보를 포함하는 어노테이션 구조 정보가 생성될 수 있다. 이 경우, 컴퓨터 장치는 데이 터셋을 위한 어노테이션 형식이 어떠한 형태로 어노테이션을 표현하는지 파악할 수 있기 때문에, 데이터셋의 어 노테이션의 형식(일례로, 제1 어노테이션 형식)을 어노테이션 조합의 다른 형식(일례로, 제2 어노테이션 형식 또는 제3 어노테이션 형식)으로 쉽게 변경하는 것 역시 가능해진다. 단계에서 컴퓨터 장치는 디렉토리 구조 정보 및 어노테이션 구조 정보가 결합된 데이터셋 형식 정보 를 생성할 수 있다. 컴퓨터 장치는 각 형식별로 데이터셋을 저장할 필요 없이, 원래의 형식의 데이터셋과 데이터 형식 정보를 저장할 수 있다. 이 경우, 컴퓨터 장치는 필요에 따라 데이터셋의 형식을 추가적인 수작업 없이 다른 형식의 데이터셋으로 변환하여 제공하는 것이 가능해진다. 단계에서 컴퓨터 장치는 제1 형식의 데이터셋을 데이터셋 형식 정보를 이용하여 인공지능 모델을 위 한 제2 형식의 데이터셋으로 변환할 수 있다. 앞서 설명한 바와 같이 컴퓨터 장치는 제2 형식의 데이터셋 을 요구하는 인공지능 모델을 위해 제2 형식의 데이터셋을 저장해놓을 필요 없이, 또는 사용자에게 제2 형식의 데이터셋을 요구할 필요 없이, 데이터셋의 데이터셋 형식 정보를 통해 제1 형식의 데이터셋을 간단히 제2 형식 의 데이터셋으로 변환하여 인공지능 모델을 위해 활용할 수 있다. 일실시예로, 서로 다른 형식의 데이터셋은 디렉토리 구조와 어노테이션 형식이 상이할 수 있다. 이러한 상이한 형식간의 변환을 위해, 컴퓨터 장치는 먼저 데이터셋 형식 정보에 포함된 디렉토리 구조 정보를 이용하여 제1 형식의 디렉토리 구조의 데이터 배치를 제2 형식의 디렉토리 구조의 데이터 배치로 변경할 수 있다. 또한, 컴퓨터 장치는 데이터셋 형식 정보에 더 포함된 어노테이션 구조 정보를 이용하여 데이터셋이 포함하는 제 1 형식의 어노테이션 형식을 제2 형식의 어노테이션 형식으로 변경할 수 있다. 이처럼 디렉토리 구조와 어노테 이션 형식을 변환함으로써, 데이터셋의 형식을 변환할 수 있다. 이때, 제1 형식은 어노테이션 구조 정보에 포함된 어노테이션 형식에 기초하여 결정될 수 있고, 제2 형식은 사 용자에 의해 입력될 수 있다. 실시예에 따라 제2 형식은 해당 인공지능 모델을 분석하여 결정될 수도 있다. 또한, 컴퓨터 장치에는 데이터셋 형식들 사이의 변환 관계가 미리 매핑되어 저장될 수 있다. 예를 들어, 컴퓨터 장치는 제1 형식의 데이터셋을 제2 형식의 데이터셋으로 변환하기 위해, 제1 형식과 제2 형식의 변 환 관계에 대한 정보를 미리 저장하고 있을 수 있으며, 이러한 변환 관계에 기반하여 제1 형식의 데이터셋을 제 2 형식의 데이터셋으로 변환할 수 있다. 일 실시예에서, 디렉토리 구조 정보 및 어노테이션 구조 정보가 결합된 데이터셋 형식 정보에 따른 데이터셋 형 식은 어노테이션 구조 정보의 어노테이션 형식에 따라 결정될 수 있다. 예를 들어, 데이터셋의 형식 자동 변환 과 관련하여 디렉토리 구조 정보의 경우는 형식을 따로 확인하지 않는다. 따라서, 데이터셋 형식 정보에 따른 데이터셋 형식은 어노테이션 형식에 기초하여 결정될 수 있으며, 결정된 데이터셋 형식에 따라 디렉토리 구조 정보의 변환이 수행될 수 있다.단계에서 컴퓨터 장치는 제1 형식의 데이터셋을 데이터셋 형식 정보를 이용하여 인공지능 모델과는 다른 인공지능 모델을 위한 제3 형식의 데이터셋으로 변환할 수 있다. 이처럼 컴퓨터 장치는 다양한 형식 의 데이터셋을 요구하는 다양한 인공지능 모델들 각각을 위한 형식의 데이터셋을 저장하고 있거나 사용자에게 요구할 필요 없이, 데이터셋의 데이터셋 형식 정보를 통해 제1 형식의 데이터셋을 간단히 다양한 형식의 데이터 셋으로 변환하여 해당 형식의 데이터셋을 요구하는 인공지능 모델을 위해 활용할 수 있다. 도 3은 본 발명의 일실시예에 있어서, 디렉토리 구조의 예를 도시한 도면이다. 도 3은 디렉토리 구조의 예로서, 앞서 설명한 바와 같이 이러한 디렉터리 구조는 텍스트 형식으로, 그리고 각 파일에 대한 트리 형태로 추출될 수 있다. 일례로, 도 3의 실시예에 나타난 디렉토리 구조에서 아래에서 6번째 라인에 나타난 파일에 대 한 정보 'Frankfurt_00000_003025_leftImg8bit.png'는 아래와 같이 텍스트 형식으로 추출될 수 있다. [특정 파일에 대해 텍스트 형식으로 추출된 디렉토리 구조 정보] 'cityscapes>smapels>outpus>frankfurt_000000_003025_leftImg8bit.png ' 도 4는 본 발명의 일실시예에 있어서, 특정 디렉토리 구조에 대해 추출되는 정보의 예를 도시한 도면이다. 도 4는 특정 데이터셋의 디렉토리 구조의 예를 나타내고 있으며, 이러한 디렉토리 구조로부터 추출한 디렉토 리 구조 정보의 예를 더 나타내고 있다. 디렉토리 구조 정보는 각 파일별 트리 정보를 포함하는 형 태로 구성될 수 있다. 도 5는 본 발명의 일실시예에 따른 GUI 기반의 어노테이션 확인 기능의 예를 도시한 도면이다. 도 5의 실시예 에서는 사용자의 단말로 제공되는 GUI 기반의 어노테이션 확인 기능의 예를 나타내고 있다. 사용자는 제공된 GUI 기반의 어노테이션 확인 기능을 통해 표시되는 이미지에 직접 어노테이션을 추가할 수 있다. 도 5의 실시예에서는 사용자가 GUI 기반의 어노테이션 확인 기능을 통해 이미지에 바운딩 박스와 같은 어노 테이션을 추가한 예를 나타내고 있다. 또한, GUI 기반의 어노테이션 확인 기능은 사용자가 바운딩 박스를 통해 식별될 수 있는 객체 'Object 1'에 대한 어노테이션 형식의 표현을 직접 설정할 수 있는 설정 기능을 포함할 수도 있다. 또한, GUI 기반의 어노테이션 확인 기능은 사용자가 직접 어노테이션이 포함된 이미지인 어 노테이션 이미지를 업로드할 수 있는 어노테이션 이미지 업로드 기능을 포함할 수도 있다. 이러한 어노테 이션 확인은 다수의 이미지들에 대해 진행될 수 있으며, 이전 버튼 및 다음 버튼을 통해 다수의 이미 지들에 대한 어노테이션 확인이 진행될 수 있다. 도 6은 본 발명의 일실시예에 따른 데이터셋 형식 관리 시스템이 데이터셋의 형식을 변환하는 예를 도시한 도면 이다. 도 6의 실시예는 사용자가 자신의 데이터셋을 데이터셋 형식 관리 시스템에 한 번만 업로드하 면, 데이터셋 형식 관리 시스템이 데이터셋의 데이터셋 형식 정보를 생성 및 관리할 수 있음을 나타 내고 있다. 또한, 도 6의 실시예는 다수의 모델들이 서로 다른 형식의 데이터셋을 요구하더라도 데이터셋 형식 관리 시스템이 이러한 데이터셋 형식 정보를 이용하여 데이터셋의 형식을 변환하여 제공함으로 써, 서로 다른 다수의 인공지능 모델들에 대해서도 한 번의 업로드만으로 사용자의 데이터셋을 활용할 수 있음을 나타내고 있다. 도 7은 본 발명의 일실시예에 있어서, 데이터셋의 형식을 변환하는 과정의 예를 도시한 도면이다. 도 7의 각 과정은 앞서 도 6을 통해 설명한 데이터셋 형식 관리 시스템 또는 데이터셋 형식 관리 시스템을 구현 하는 컴퓨터 장치에 의해 수행될 수 있다. 도 7의 실시예에서는 데이터셋 형식 관리 시스템에 의해 각 과정이 수행되는 예를 설명한다. \" 데이터셋 디렉토리 구조\"의 과정은 데이터셋 형식 관리 시스템이 사용자에 의해 업로드된 데이터셋에 서 디렉토리 구조를 추출하는 과정의 예일 수 있다. 앞서 설명한 바와 같이, 디렉토리 구조는 트리 명령어를 활용하여 데이터셋에서 텍스트 형식으로 추출할 수 있으며, 이후 필요에 따라 추출된 디렉토리 구조를 각 파일 에 대한 트리 형태로 변경할 수 있다. \" 디렉토리 구조 검색 모델\" 및 \" 디렉토리 구조 정보\"의 과정은 데이터셋 형식 관리 시스템이 추출 된 디렉토리 구조를 디렉토리 구조 검색 모델에 입력하여 디렉토리 구조 정보를 출력받는 과정의 예일 수 있다. 앞서 설명한 바와 같이, 디렉토리 구조 검색 모델은 NLP 기반 모델로 구현될 수 있으며, 디렉토리 구조를 입력 받아 디렉토리 구조에 각 파일에 대한 클래스 정보를 추가하여 디렉토리 구조 정보를 출력하도록 구현될 수 있 다. \" 데이터셋 어노테이션 파일\" 및 \" 데이터셋 이미지 파일\"의 과정은 데이터셋 형식 관리 시스템이 디렉토리 구조 정보를 이용하여 데이터셋에서 어노테이션 파일과 이미지 파일을 확인하는 과정의 예일 수 있다. 여기서, 어노테이션 파일은 확장자 .json, .xml 등의 파일일 수 있으며, 이미지 파일은 확장자 .jpg, .png 등의 파일일 수 있다. \" 어노테이션 생성기\" 및 \" 어노테이션 조합\"의 과정은 데이터셋 형식 관리 시스템이 어노테이션 생 성기를 이용하여 특정 이미지에 대해 조합 가능한 모든 어노테이션 형식들의 집합으로서 어노테이션 조합을 생 성하는 과정의 예일 수 있다. 어노테이션 조합은 동일 이미지에 대해 설정 가능한 다양한 어노테이션 형식들에 대한 정보를 포함할 수 있다. \" GUI 기반 어노테이션 방식 확인\", \" 기준 어노테이션\"의 과정은 이미지 파일에 어노테이션이 표시된 이 미지가 존재하지 않는 경우, 데이터셋 형식 관리 시스템이 GUI 기반의 어노테이션 확인 기능을 이용하여 사용자로부터 샘플 이미지에 대한 기준 어노테이션을 확인받는 과정의 예일 수 있다. 만약, 이미지 파일에 어 노테이션이 표시된 이미지가 존재한다면, 데이터셋 형식 관리 시스템은 해당 이미지에 표시된 어노테이션 을 기준 어노테이션으로 이용될 수 있다. \" 어노테이션 매핑\" 및 \" 어노테이션 구조 정보\"의 과정은 데이터셋 형식 관리 시스템이 어노테이 션 조합과 기준 어노테이션을 비교하여 어노테이션 구조 정보를 생성하는 과정의 예일 수 있다. 앞서 설명한 바와 같이, 컴퓨터 장치는 어노테이션 조합이 포함하는 각각의 어노테이션 형식의 후보 어노테이션이 표시 된 이미지들을 생성할 수 있다. 이때, 컴퓨터 장치는 생성된 이미지들 각각과 기준 어노테이션이 표시된 이미지를 비교하여 기준 어노테이션과 가중 유사한 후보 어노테이션의 형식을 확인하여 데이터셋의 어노테이션 의 형식을 파악할 수 있으며, 이러한 확인된 형식에 대한 정보를 포함하는 어노테이션 구조 정보를 생성할 수 있다. \" 데이터셋 형식 정보\"의 과정은 데이터셋 형식 관리 시스템이 어노테이션 구조 정보와 디렉토리 구조 정보를 결합하여 데이터셋 형식 정보를 생성하는 과정의 예일 수 있다. 데이터셋 형식 정보가 포함하는 디렉토 리 구조 정보는 데이터셋의 디렉토리 구조를 변경하는데 사용될 수 있으며, 어노테이션 구조 정보는 데이터셋의 어노테이션 형식을 변경하는데 사용될 수 있다. \" 데이터셋 형식 변환\"의 과정은 데이터셋 형식 관리 시스템이 데이터셋의 형식을 특정 인공지능 모델 이 요구하는 형식으로 변환하는 과정의 예일 수 있다. 예를 들어, 데이터셋 형식 관리 시스템은 제1 형식 의 데이터셋을 제2 형식의 데이터셋으로 변환하여 제공할 수 있다. 이와 같이, 본 발명의 실시예들에 따르면, 인공지능 모델 학습을 위한 데이터셋 형식 관리 방법 및 시스템을 제 공할 수 있다. 이러한 데이터셋 형식 관리 방법 및 시스템을 통해, 코드를 이용하여 데이터셋을 1:1로 변환하 던 종래기술의 변환 방식에서 벗어나, GUI를 통해 각 파일의 내용이 나타내는 정보가 무엇인지 손쉽게 태깅하고 자동으로 메타데이터(데이터셋 형식 정보)를 생성 및 관리함으로써, 자연스럽게 다양한 형식의 데이터셋을 활용 할 수 있게 된다. 이상에서 설명된 시스템 또는 장치는 하드웨어 구성요소, 또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조 합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치 및 구성요소는, 예를 들어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 하나 이상 의 소프트웨어 어플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설"}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "명된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소 (processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치 는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세서 (parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상장치(virtual equipment), 컴퓨터 저장 매체 또는 장치에 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터 는 하나 이상의 컴퓨터 판독 가능 기록매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 상기 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등 을 단독으로 또는 조합하여 포함할 수 있다. 매체는 컴퓨터로 실행 가능한 프로그램을 계속 저장하거나, 실행 또는 다운로드를 위해 임시 저장하는 것일 수도 있다. 또한, 매체는 단일 또는 수개 하드웨어가 결합된 형태의 다양한 기록수단 또는 저장수단일 수 있는데, 어떤 컴퓨터 시스템에 직접 접속되는 매체에 한정되지 않고, 네트 워크 상에 분산 존재하는 것일 수도 있다. 매체의 예시로는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같 은 자기 매체, CD-ROM 및 DVD와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체 (magneto-optical medium), 및 ROM, RAM, 플래시 메모리 등을 포함하여 프로그램 명령어가 저장되도록 구성된 것이 있을 수 있다. 또한, 다른 매체의 예시로, 애플리케이션을 유통하는 앱 스토어나 기타 다양한 소프트웨어 를 공급 내지 유통하는 사이트, 서버 등에서 관리하는 기록매체 내지 저장매체도 들 수 있다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의 해서 실행될 수 있는 고급 언어 코드를 포함한다."}
{"patent_id": "10-2023-0108505", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 청구범위와 균등한 것들도 후술하는 청구범위의 범위에 속한다."}
{"patent_id": "10-2023-0108505", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일실시예에 따른 컴퓨터 장치의 예를 도시한 블록도이다. 도 2는 본 발명의 일실시예에 따른 데이터셋 형식 관리 방법의 예를 도시한 흐름도이다. 도 3은 본 발명의 일실시예에 따른 데이터셋의 디렉토리 구조의 예를 도시한 도면이다. 도 4는 본 발명의 일실시예에 있어서, 특정 디렉토리 구조에 대해 추출되는 정보의 예를 도시한 도면이다. 도 5는 본 발명의 일실시예에 따른 GUI 기반의 어노테이션 확인 기능의 예를 도시한 도면이다. 도 6은 본 발명의 일실시예에 따른 데이터셋 형식 관리 시스템이 데이터셋의 형식을 변환하는 예를 도시한 도면 이다. 도 7은 본 발명의 일실시예에 있어서, 데이터셋의 형식을 변환하는 과정의 예를 도시한 도면이다."}
