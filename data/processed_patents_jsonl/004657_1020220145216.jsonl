{"patent_id": "10-2022-0145216", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0064581", "출원번호": "10-2022-0145216", "발명의 명칭": "멀티 프로세서의 태스크 할당 방법 및 장치", "출원인": "한국전자통신연구원", "발명자": "정재훈"}}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "복수의 프로세서에 태스크를 할당하는 장치로서,제어 프로세서 및 메모리를 포함하고, 상기 제어 프로세서는 상기 메모리에 저장된 프로그램을 실행하여,상기 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계, 그리고상기 복수의 프로세서의 개수를 바탕으로 입력 피처 맵(input feature map, IFM) 데이터를 재배치하는 단계 를 수행하는. 장치."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에서,상기 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계를 수행할 때, 상기 제어 프로세서는,상기 시스톨릭 어레이 내의 모든 열에 상기 커널 데이터를 재배치하는 단계를 수행하는, 장치."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에서,상기 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계를 수행할 때, 상기 제어 프로세서는,상기 커널 데이터를 복수의 서브 데이터로 분할하는 단계, 그리고상기 복수의 서브 데이터를 상기 시스톨릭 어레이 내의 상부 메모리에 할당하는 단계를 수행하는, 장치."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에서,상기 복수의 서브 데이터의 개수는 상기 시스톨릭 어레이의 열의 개수와 동일한, 장치."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에서,상기 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 수행할 때, 상기 제어 프로세서는,상기 복수의 프로세서 중 일부 프로세서의 시스톨릭 어레이 내의 전체 행에 상기 IFM 데이터를 재배치하는단계, 그리고상기 복수의 프로세서 중 나머지 프로세서의 시스톨릭 어레이 내의 일부 행에 상기 IFM 데이터를 재배치하는 단계를 수행하는, 장치."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "공개특허 10-2023-0064581-3-제1항에서,상기 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 수행할 때, 상기 제어 프로세서는, 상기 복수의 프로세서 각각에 동일한 개수로 배치된 상기 IFM 데이터를 상기 복수의 프로세서보다 적은 개수의프로세서에 서로 다른 개수로 상기 IFM 데이터를 재배치하는 단계를 수행하는, 장치."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에서,상기 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 수행할 때, 상기 제어 프로세서는,상기 IFM 데이터의 배치에 의해 상기 복수의 프로세서 내에 유휴 프로세싱 엘리먼트(processing element, PE)가발생하면, 상기 복수의 프로세서 중 일부 프로세서의 유휴 프로세싱 엘리먼트에 연결된 메모리에 상기 IFM 데이터를 재배치하는 단계를 수행하는, 장치."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에서,상기 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 수행할 때, 상기 제어 프로세서는,상기 IFM 데이터의 배치에 의해 상기 복수의 프로세서 내에 유휴 영역이 발생하면, 상기 복수의 프로세서 중 일부 프로세서의 유휴 영역으로 데이터를 전달하는 메모리에 상기 IFM 데이터를 재배치하는 단계를 수행하는, 장치."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "복수의 프로세서에 태스크를 할당하는 방법으로서,상기 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계, 그리고상기 복수의 프로세서의 개수를 바탕으로 입력 피처 맵(input feature map, IFM) 데이터를 재배치하는 단계 를 포함하는 방법."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에서,상기 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계는,상기 시스톨릭 어레이 내의 모든 열에 연결된 메모리에 상기 커널 데이터를 재배치하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에서,상기 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계는,상기 커널 데이터를 복수의 서브 데이터로 분할하는 단계, 그리고상기 복수의 서브 데이터를 상기 시스톨릭 어레이 내의 상부 메모리에 할당하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "공개특허 10-2023-0064581-4-제11항에서,상기 복수의 서브 데이터의 개수는 상기 시스톨릭 어레이의 열의 개수와 동일한, 방법."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제9항에서,상기 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계는,상기 복수의 프로세서 중 일부 프로세서의 시스톨릭 어레이 내의 전체 행에 상기 IFM 데이터를 재배치하는단계, 그리고상기 복수의 프로세서 중 나머지 프로세서의 시스톨릭 어레이 내의 일부 행에 상기 IFM 데이터를 재배치하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제9항에서,상기 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계는,상기 복수의 프로세서 각각에 동일한 개수로 배치된 상기 IFM 데이터를 상기 복수의 프로세서 중 일부 프로세서에 서로 다른 개수로 상기 IFM 데이터를 재배치하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제9항에서,상기 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계는,상기 IFM 데이터의 배치에 의해 상기 복수의 프로세서 내에 유휴 프로세싱 엘리먼트(processing element, PE)가발생하면, 상기 복수의 프로세서 중 일부 프로세서의 유휴 PE에 연결된 메모리에 상기 IFM 데이터를 재배치하는단계를 포함하는, 방법."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제9항에서,상기 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계는,상기 IFM 데이터의 배치에 의해 상기 복수의 프로세서 내에 유휴 영역이 발생하면, 상기 복수의 프로세서 중 일부 프로세서의 유휴 영역으로 데이터를 전달하는 메모리에 상기 IFM 데이터를 재배치하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-0145216", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "복수의 프로세서를 사용하여 태스크를 수행하는 방법으로서,상기 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계, 상기 복수의 프로세서의 개수를 바탕으로 입력 피처 맵(input feature map, IFM) 데이터를 재배치하는 단계, 그리고상기 재배치된 커널 데이터 및 IFM 데이터를 사용하여 상기 태스크를 수행하는 단계를 포함하는 방법. 공개특허 10-2023-0064581-5-"}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계, 그리고 복 수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 통해 태스크를 할당하는 방법 및 장치를 제공 한다."}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 기재는 멀티 프로세서의 태스크 할당 장치 및 방법에 관한 것이다."}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "멀티 프로세서는 복수의 처리 장치를 포함하는 컴퓨터 시스템으로서, 각각의 처리 장치는 프로그램의 동시 처리 등의 작업을 위해 주변 장치 및 메모리를 공유할 수 있다. 시스톨릭 어레이(Systolic Array)는 멀티 프로세서 구조에서 이웃하는 프로세서가 데이터를 계산하고 시스템을 통해 데이터를 전달하는 프로세서 네트워크이다. 규칙적이고, 지역적인 데이터의 흐름을 갖으며 계산량이 많은 알고리즘에 적용될 수 있다."}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "한 실시예는, 복수의 프로세서에 태스크를 할당하는 장치를 제공한다. 다른 실시예는, 복수의 프로세서에 태스크를 할당하는 방법을 제공한다. 또 다른 실시예는, 복수의 프로세서를 사용하여 태스크를 수행하는 방법을 제공한다."}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "한 실시예에 따르면, 복수의 프로세서에 태스크를 할당하는 장치가 제공된다. 상기 장치는, 제어 프로세서 및 메모리를 포함하고, 제어 프로세서는 메모리에 저장된 프로그램을 실행하여, 복수의 프로세서에 각각 포함된 시 스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계, 그리고 복수의 프로세서의 개수를 바탕으로 입력 피처 맵(input feature map, IFM) 데이터를 재배치하는 단계를 수행한다. 상기 장치에서, 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계를 수행할 때, 제어 프로세서는, 시스톨릭 어레이 내의 모든 열에 커널 데이터를 재배치하는 단계를 수행할 수 있다. 상기 장치에서, 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계를 수행할 때, 제어 프로세서는, 커널 데이터를 복수의 서브 데이터로 분할하는 단계, 그리고 복수의 서브 데이터를 시스톨릭 어레이 내의 상부 메모리에 할당하는 단계를 수행할 수 있다. 상기 장치에서, 복수의 서브 데이터의 개수는 시스톨릭 어레이의 열의 개수와 동일할 수 있다. 상기 장치에서, 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 수행할 때, 제어 프로세서 는, 복수의 프로세서 중 일부 프로세서의 시스톨릭 어레이 내의 전체 행에 IFM 데이터를 재배치하는 단계, 그리 고 복수의 프로세서 중 나머지 프로세서의 시스톨릭 어레이 내의 일부 행에 IFM 데이터를 재배치하는 단계를 수 행할 수 있다. 상기 장치에서, 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 수행할 때, 제어 프로세서 는, 복수의 프로세서 각각에 동일한 개수로 배치된 IFM 데이터를 복수의 프로세서보다 적은 개수의 프로세서에 서로 다른 개수로 IFM 데이터를 재배치하는 단계를 수행할 수 있다. 상기 장치에서, 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 수행할 때, 제어 프로세서 는, IFM 데이터의 배치에 의해 복수의 프로세서 내에 유휴 프로세싱 엘리먼트(processing element, PE)가 발생 하면, 복수의 프로세서 중 일부 프로세서의 유휴 프로세싱 엘리먼트에 연결된 메모리에 IFM 데이터를 재배치하 는 단계를 수행할 수 있다. 상기 장치에서, 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계를 수행할 때, 제어 프로세서 는, IFM 데이터의 배치에 의해 복수의 프로세서 내에 유휴 영역이 발생하면, 복수의 프로세서 중 일부 프로세서 의 유휴 영역으로 데이터를 전달하는 메모리에 IFM 데이터를 재배치하는 단계를 수행할 수 있다.다른 실시예에 따르면, 복수의 프로세서에 태스크를 할당하는 방법이 제공된다. 상기 방법은, 복수의 프로세서 에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계, 그리고 복수의 프로세서의 개수를 바탕으로 입력 피처 맵(input feature map, IFM) 데이터를 재배치하는 단계를 포함한다. 상기 방법에서, 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계는, 시스톨릭 어레이 내의 모든 열에 연결된 메모리에 커널 데이터를 재배치하는 단계를 포함할 수 있다. 상기 방법에서, 복수의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계는, 커널 데이터를 복수의 서브 데이터로 분할하는 단계, 그리고 복수의 서브 데이터를 시스톨릭 어레이 내 의 상부 메모리에 할당하는 단계를 포함할 수 있다. 상기 방법에서, 복수의 서브 데이터의 개수는 시스톨릭 어레이의 열의 개수와 동일할 수 있다. 상기 방법에서, 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계는, 복수의 프로세서 중 일부 프로세서의 시스톨릭 어레이 내의 전체 행에 IFM 데이터를 재배치하는 단계, 그리고 복수의 프로세서 중 나머지 프로세서의 시스톨릭 어레이 내의 일부 행에 IFM 데이터를 재배치하는 단계를 포함할 수 있다. 상기 방법에서, 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계는, 복수의 프로세서 각각에 동일한 개수로 배치된 IFM 데이터를 복수의 프로세서 중 일부 프로세서에 서로 다른 개수로 IFM 데이터를 재배 치하는 단계를 포함할 수 있다. 상기 방법에서, 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계는, IFM 데이터의 배치에 의 해 복수의 프로세서 내에 유휴 프로세싱 엘리먼트(processing element, PE)가 발생하면, 복수의 프로세서 중 일 부 프로세서의 유휴 PE에 연결된 메모리에 IFM 데이터를 재배치하는 단계를 포함할 수 있다. 상기 방법에서, 복수의 프로세서의 개수를 바탕으로 IFM 데이터를 재배치하는 단계는, IFM 데이터의 배치에 의 해 복수의 프로세서 내에 유휴 영역이 발생하면, 복수의 프로세서 중 일부 프로세서의 유휴 영역으로 데이터를 전달하는 메모리에 IFM 데이터를 재배치하는 단계를 포함할 수 있다. 또 다른 실시예에 따르면, 복수의 프로세서를 사용하여 태스크를 수행하는 방법이 제공된다. 상기 방법은, 복수 의 프로세서에 각각 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치하는 단계, 복수의 프로세 서의 개수를 바탕으로 입력 피처 맵(input feature map, IFM) 데이터를 재배치하는 단계, 그리고 재배치된 커널 데이터 및 IFM 데이터를 사용하여 태스크를 수행하는 단계를 포함한다."}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "태스크의 재배치를 통해 유휴 PE들의 개수를 최소화함으로써, 불필요한 전력소모 및 낭비를 최소화할 수 있다."}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "아래에서는 첨부한 도면을 참고로 하여 본 기재의 실시예에 대하여 본 발명이 속하는 기술 분야에서 통상의 지 식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 기재는 여러 가지 상이한 형태로 구현 될 수 있으며 여기에서 설명하는 실시예에 한정되지 않는다. 그리고 도면에서 본 기재를 명확하게 설명하기 위 해서 설명과 관계없는 부분은 생략하였으며, 명세서 전체를 통하여 유사한 부분에 대해서는 유사한 도면 부호를붙였다. 명세서 전체에서, 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다 른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 본 명세서에서 단수로 기재된 표현은 \"하나\" 또는 \"단일\" 등의 명시적인 표현을 사용하지 않은 이상, 단수 또는 복수로 해석될 수 있다. 본 명세서에서 \"및/또는\"은 언급된 구성 요소들의 각각 및 하나 이상의 모든 조합을 포함한다. 본 명세서에서, 제1, 제2 등과 같이 서수를 포함하는 용어들은 다양한 구성요소들을 설명하는데 사용될 수 있지 만, 상기 구성요소들은 상기 용어들에 의해 한정되지는 않는다. 상기 용어들은 하나의 구성요소를 다른 구성요 소로부터 구별하는 목적으로만 사용된다. 예를 들어, 본 개시의 권리 범위를 벗어나지 않으면서 제1 구성요소는 제2 구성요소로 명명될 수 있고, 유사하게 제2 구성요소도 제1 구성요소로 명명될 수 있다. 본 명세서에서 도면을 참고하여 설명한 흐름도에서, 동작 순서는 변경될 수 있고, 여러 동작들이 병합되거나, 어느 동작이 분할될 수 있고, 특정 동작은 수행되지 않을 수 있다. 도 1은 한 실시예에 따른 멀티 프로세서를 나타낸 도면이고, 도 2는 한 실시예에 따른 시스톨릭 어레이를 나타 낸 도면이다. 멀티프로세서 시스템은 2개 이상의 프로세서가 칩 내부의 자원(예를 들어, 메모리)을 공유하는 시스템이다. 도 1을 참조하면, 멀티프로세서 시스템 내의 각 프로세서 및 내부 자원은 메쉬 네트워크(예를 들어, 코히어런트 메 쉬 네트워크)를 통해 서로 연결될 수 있고, 메쉬 네트워크 내의 각 노드에 배치될 수 있다. 멀티프로세서의 각 프로세서 사이에서 데이터는 효율적으로 공유될 수 있기 때문에, 멀티프로세서 시스템은 대 용량의 데이터 처리에 있어 높은 성능을 나타낼 수 있다. 도 2를 참조하면, 시스톨릭 어레이는 2차원 배열 형태로 배치된 복수의 프로세싱 엘리먼트(processing element, PE)와 복수의 PE로 입력 데이터를 공급하고 복수의 PE로부터의 출력 데이터를 저장하기 위한 복수의 메모리 (memory, MEM)를 포함할 수 있다. 시스톨릭 어레이는 행렬 간 덧셈(add)/곱셈(multiply) 연산 등과 같이 입력 데이터가 재사용되는 연산에 적합할 수 있다. 도 2에 도시된 시스톨릭 어레이의 기본 동작 흐름은 아래 4개 단계를 포함할 수 있다. 한 실시예에서, 시스톨릭 어레이는 매트릭스 N과 매트릭스 M을 곱셈하여 매트릭스 Y를 계산할 수 있다(NХM=Y). 매트릭스 N은 pХq 매트 릭스이고, 매트릭스 M은 qХr 매트릭스이며, 매트릭스 Y는 pХr 매트릭스이다. 1) 입력 데이터의 준비 단계 매트릭스 N의 각 행(row)의 데이터는 도 2의 왼쪽에 위치한 메모리(MEM_left)에 저장되고, 매트릭스 M의 각 칼 럼(column)의 데이터는 도 2의 위쪽에 위치한 메모리(MEM_upper)에 저장될 수 있다. 2) 입력 데이터의 전달 단계 매트릭스 N의 각 행에 대응되는 데이터가 순서대로 하나씩 MEM_left에서 PE 방향으로 출력될 수 있다. 이와 동 시에 MEM_upper는 매트릭스 M의 각 칼럼에 대응되는 데이터를 하나씩 순차적으로 PE 방향으로 출력할 수 있다. 3) MEM_left 및 MEM_upper에서 순차적으로 출력되는 데이터는 PE에서 ADD 및/또는 MUL 연산 등의 피연산자 (operand)로 사용될 수 있다. 각 PE는 매 사이클 마다 이웃하는 PE에게 해당 데이터를 전달할 수 있다. 예를 들 어, 왼쪽 최상단 PE의 위치가 (0,0)이고 오른쪽 최하단 PE의 위치가 (N,N)일 때, 매트릭스 N의 데이터는 (x,y) 에서 (x+1,y)로 전달되고, 매트릭스 M의 데이터는 (x,y)에서 (x,y+1)로 전달될 수 있다. 4) PE에서 수행된 연산(예를 들어, ADD 및/또는 MUL 연산)의 결과는 PE 내부의 레지스터에 저장될 수 있다. 이 후 레지스터 내에 누적된 결과 값은 미리 결정된 방향(예를 들어, MEM_left 방향)으로 순차적으로 PE 사이에서 전달될 수 있다. 한편, 반도체의 전력은 누설 전류로 인한 정적 전력(static power) 및 각 CMOS 셀의 스위칭으로 인한 동적 전력 (dynamic power)에 의해 소모될 수 있다. 정적 전력은 칩의 동작과 관계없이 항상 소모되는 전력이고, 트랜지스터의 구조 및 온도 등에 영향을 받을 수 있다. 정적 전력은 아래 수학식 1과 같이 표현될 수 있다.수학식 1"}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "수학식 1에서 V는 칩의 동작 전압이고, T는 접합부 온도(junction temperature)이다. c1 및 c2는 하드웨어 의존 상수(hardware-dependent constant)이고 Igate는 게이트 누설 전류이다. 동적 전력은 칩의 동작에 따라 소모되는 전력이고, 스위칭 활동(switching activity) 및 동작 주파수에 비례하 여 증가할 수 있다. 동적 전력은 아래 수학식 2와 같이 표현될 수 있다. 수학식 2"}
{"patent_id": "10-2022-0145216", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "수학식 2에서 는 스위칭 활동이고, C는 하드웨어 의존 상수이고, V는 동작 전압이고, F는 동작 주파수이다. 스 위칭 활동은 단위 시간 동안 각 셀의 상태가 변경되는 빈도를 나타낼 수 있는 척도이고, 0-1 사이의 값을 가질 수 있다. 예를 들어, 특정 레지스터가 매 클록마다 0과 1을 반복적으로 출력하면, =1이고, 0 또는 1을 계속 출력하고 있다면 =0이다. 도 3은 다른 실시예에 따른 시스톨릭 어레이를 나타낸 도면이다. 인공지능 프로세서 내의 시스톨릭 어레이에서, 신경망의 구조에 따라 연산에 사용되는 행(row) 및 열(column)의 개수가 결정될 수 있다. 아래에서는 연산에 사용되는 행의 개수를 R이라고 하고 연산에 사용되는 열의 개수를 C 라고 한다. 각 시스톨릭 어레이는 하나의 프로세서에 대응될 수 있다. 시스톨릭 어레이로 공급되는 데이터는, 데이터의 유형에 따라 미리 결정된 방향으로 매 사이클마다 이웃하는 PE 로 전달될 수 있다. 입력 피처 맵(input feature map, IFM) 데이터와 PE 명령어(PE command) 데이터는 도 3의 왼쪽에서 오른쪽으로 전달될 수 있다. 출력 피처 맵(output feature map, OFM) 데이터는 도 3의 오른쪽에서 왼 쪽으로 전달될 수 있다. 커널(kernel) 데이터는 도 3의 위쪽에서 아래쪽으로 전달될 수 있다. 시스톨릭 어레이 외부의 블록(예를 들어, 메모리 등)으로부터 공급된 데이터는, R 값 및 C 값과 무관하게, MAX(R) 또는 MAX(C)까지 전달될 수 있고, 이로 인해 불필요한 로직 스위칭이 발생할 수 있다. 예를 들어, 8×8 크기를 갖는 시스톨릭 어레이에서 서로 다른 로직 스위칭 양상이 발생하는 영역은 도 3과 같이 구분될 수 있다. 도 3에서 유형 0(Type 0) 영역은 신경망 알고리즘 처리를 위해 실질적인 연산을 수행하는 PE에 의한 로직 스위 칭이 발생하는 영역일 수 있다. 도 3에서 유형 1(Type 1) 영역은 신경망 알고리즘 처리와는 무관하지만, 유형 0 영역으로부터 전달된 IFM 데이터 및 PE 명령어 데이터로 인해 무효 연산(ineffective processing)이 수행되는 PE에 의한 로직 스위칭이 발생하는 영역일 수 있다. 도 3에서 유형 2(Type 2) 영역은 유형 0 영역으로부터 전달 된 커널 데이터로 인한 로직 스위칭이 발생하는 영역일 수 있다. 멀티프로세서 구조에서 다수의 동일한 신경망 데이터가 병렬적으로 처리될 때, 위와 같은 방식으로 연산을 수행 할 PE가 할당되면, 불필요한 로직 스위칭이 누적될 수 있고, 전력 관리 측면에서 비효율적일 수 있다. 따라서 전력의 효율적 관리를 위해 로직 스위칭의 양상에 따라 불필요한 로직 스위칭이 제거될 수 있다. 도 4는 한 실시예에 따른 불필요한 로직 스위칭을 제거하는 방법을 나타낸 개념도이고, 도 5는 다른 실시예에 따른 불필요한 로직 스위칭을 제거하는 방법을 나타낸 개념도이다. 유형 1 영역을 제거 또는 최소화하기 위해 커널 데이터를 n개로 분할 또는 복제함으로써 C를 최대화할 수 있다. 도 4를 참조하면, 왼쪽 4개의 메모리에 배치되어 있는 커널 데이터가 위쪽의 모든 메모리(8개)에 재배치될 수 있다. 즉, 커널 데이터의 분할/복제를 통해 시스톨릭 어레이 내의 모든 컬럼이 연산에 사용될 수 있다. 유형 2 영역을 제거 또는 최소화하기 위해, 특정 프로세서에 배치된 IFM 데이터가 m개로 분할된 후 m개의 서로 다른 프로세서에 각각 배치될 수 있다. 도 5를 참조하면, 연산에 필요한 IFM 데이터가 2개로 분할되어 2개의 서 로 다른 프로세서에 각각 배치됨으로써, 유형 2 영역의 크기가 최소화되었고 3번째 프로세서는 사용되지 않을 수 있다. 위와 같이 다수의 프로세서에 할당된 태스크(task)를 재구성하여 일부 프로세서에 재할당함으로써, 불필요한 스 위칭으로 인한 전력 낭비를 줄일 수 있고, 유휴 상태의 프로세서에 파워 게이팅(power gating)을 적용함으로써 유휴 상태의 프로세서에서의 누설 전류를 차단할 수 있다. 도 6은 한 실시예에 따른 태스크 할당기가 포함된 멀티 프로세서 시스템을 나타낸 도면이고, 도 7은 한 실시예 에 따른 태스크 할당기의 태스크 할당 방법을 나타낸 흐름도이다. 도 6을 참조하면, 한 실시예에 따른 태스크 할당기는 복수의 프로세서에 태스크를 할당할 수 있다. 각 프 로세서는 시스톨릭 어레이 구조를 가질 수 있고, 메모리 및 주변 장치(peripheral)과 신호를 주고받을 수 있다. 도 7을 참조하면, 한 실시예에 따른 태스크 할당기는 각 프로세서에 태스크를 할당하기 위해 관련 파라미 터를 초기화할 수 있다(S110). R은 시스톨릭 어레이 내에서 연산에 사용되는 행의 개수를 나타내는 파라미터이 고, C는 시스톨릭 어레이 내에서 연산에 사용되는 열의 개수를 나타내는 파라미터이다. n은 커널의 서브 데이터 의 개수를 나타내는 파라미터이고, P는 전체 멀티 프로세서 시스템 내에서 신경망 알고리즘 처리에 사용되는 프 로세서의 개수를 나타내는 파라미터이며, m은 태스크가 할당된 프로세서 중에서 데이터 재배치로 인해 유휴 상 태로 진입하게될 프로세서의 개수를 나타내는 파라미터이다. 이후 태스크 할당기는 프로세서 각각에 포함된 시스톨릭 어레이의 크기를 바탕으로 커널 데이터를 재배치 할 수 있다(S120). 태스크 할당기는 시스톨릭 어레이 내의 모든 열에 연결된 메모리에 커널 데이터를 재배 치할 수 있다. 한 실시예에서, 태스크 할당기는 연산에 사용되는 시스톨릭 어레이의 열의 개수가 시스톨릭 어레이의 전체 열의 개수와 동일해졌는지 여부를 판단할 수 있다. 태스크 할당기는 연산에 사용되는 열의 개수가 시스톨 릭 어레이의 전체 열의 개수와 같아지면, 시스톨릭 어레이 내의 전체 열에 커널 데이터를 재배치할 수 있다. 즉, 시스톨릭 어레이 내에서 연산에 사용되는 열의 개수 c가 시스톨릭 어레이의 전체 열의 개수 MAX(C)가 되면, 커널 데이터를 c개의 서브 데이터로 분할하고, 분할된 커널 데이터를 재배치할 수 있다. 또한, 태스크 할당기는 연산에 사용되는 프로세서의 개수를 바탕으로 IFM 데이터를 재배치할 수 있다 (S130). IFM 데이터의 배치에 의해 프로세서 내에 유휴 PE가 발생하면, 태스크 할당기는 복수의 프로세서 중 일부 프로세서의 유휴 PE에 연결된 메모리에 IFM 데이터를 재배치할 수 있다. 또는 IFM 데이터의 배치에 의 해 프로세서 내에 유휴 영역이 발생하면, 태스크 할당기는 복수의 프로세서 중 일부 프로세서의 유휴 영역 으로 데이터를 전달하는 메모리에 IFM 데이터를 재배치할 수 있다. 한 실시예에서, 태스크 할당기는 복수의 프로세서 내의 유휴 영역의 크기와, 하나의 프로세서 내에서 연산 에 사용되는 행의 개수 r과 데이터 재배치로 인해 유휴 상태로 진입하게 될 프로세서의 개수 간의 곱(r×m) 간 의 비교 결과를 바탕으로 IFM 데이터를 재배치할 수 있다. 복수의 프로세서 내의 유휴 영역의 크기는 (시스톨릭 어레이 내의 전체 행의 개수 MAX(R) - 연산에 사용되는 행의 개수 r) × (전체 프로세서의 개수 P - 데이터 재 배치로 인해 유휴 상태로 진입하게 될 프로세서의 개수 m)에 의해 결정될 수 있다. 태스크 할당기는 전체 유휴 영역의 크기가 r×m의 크기보다 작게 되면, m개의 프로세서에 배치되어 있는 IFM 데이터를 p개의 프로세서에 재배치할 수 있다. 즉, 태스크 할당기는 복수의 프로세서 중 일부 프로세서의 시스톨릭 어레이 내의 전체 행에 IFM 데이터를 재배치하고, 복수의 프로세서 중 나머지 프로세서의 시스톨릭 어레이 내의 일부 행에 IFM 데이터를 재배치할 수 있다. 결과적으로, 태스크 할당기는 복수의 프로세서 전체에 동일한 개수로 배치된 IFM 데이터를 복수의 프로세 서 중 일부 프로세서에 IFM 데이터를 재배치할 수 있다. a개의 일부 프로세서 중 a-1개의 프로세서의 시스톨릭 어레이의 모든 행은 연산에 사용되고, 나머지 하나의 프로세서의 시스톨릭 어레이에서는 일부 행이 연산에 사용 될 수 있다. 도 8은 한 실시예에 따른 태스크 할당 장치를 나타낸 블록도이다. 한 실시예에 따른 태스크 할당 장치는, 컴퓨터 시스템, 예를 들어 컴퓨터 판독 가능 매체로 구현될 수 있다. 도 8을 참조하면, 컴퓨터 시스템은, 버스를 통해 통신하는 제어 프로세서, 메모리, 입력 인터 페이스 장치, 출력 인터페이스 장치, 및 저장 장치 중 적어도 하나를 포함할 수 있다. 컴퓨터 시스템은 또한 네트워크에 결합된 통신 장치를 포함할 수 있다. 제어 프로세서는 중앙 처리 장 치(central processing unit, CPU)이거나, 또는 메모리 또는 저장 장치에 저장된 명령을 실행하는 반도체 장치일 수 있다. 메모리 및 저장 장치는 다양한 형태의 휘발성 또는 비휘발성 저장 매체를 포 함할 수 있다. 예를 들어, 메모리는 ROM(read only memory) 및 RAM(random access memory)를 포함할 수 있다. 본 기재의 실시예에서 메모리는 프로세서의 내부 또는 외부에 위치할 수 있고, 메모리는 이미 알려진 다양한 수 단을 통해 프로세서와 연결될 수 있다. 메모리는 다양한 형태의 휘발성 또는 비휘발성 저장 매체이며, 예를 들 어, 메모리는 읽기 전용 메모리(read-only memory, ROM) 또는 랜덤 액세스 메모리(random access memory, RA M)를 포함할 수 있다. 따라서, 본 발명의 실시예는 컴퓨터에 구현된 방법으로서 구현되거나, 컴퓨터 실행 가능 명령이 저장된 비일시 적 컴퓨터 판독 가능 매체로서 구현될 수 있다. 한 실시예에서, 프로세서에 의해 실행될 때, 컴퓨터 판독 가능 명령은 본 기재의 적어도 하나의 양상에 따른 방법을 수행할 수 있다. 통신 장치는 유선 신호 또는 무선 신호를 송신 또는 수신할 수 있다. 한편, 본 발명의 실시예는 지금까지 설명한 장치 및/또는 방법을 통해서만 구현되는 것은 아니며, 본 발명의 실 시예의 구성에 대응하는 기능을 실현하는 프로그램 또는 그 프로그램이 기록된 기록 매체를 통해 구현될 수도 있으며, 이러한 구현은 상술한 실시예의 기재로부터 본 발명이 속하는 기술 분야의 통상의 기술자라면 쉽게 구 현할 수 있는 것이다. 구체적으로, 본 발명의 실시예에 따른 방법(예, 네트워크 관리 방법, 데이터 전송 방법, 전송 스케줄 생성 방법 등)은 다양한 컴퓨터 수단을 통해 수행될 수 있는 프로그램 명령 형태로 구현되어, 컴퓨 터 판독 가능 매체에 기록될 수 있다. 상기 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구 조 등을 단독으로 또는 조합하여 포함할 수 있다. 상기 컴퓨터 판독 가능 매체에 기록되는 프로그램 명령은, 본 발명의 실시예를 위해 특별히 설계되어 구성된 것이거나, 컴퓨터 소프트웨어 분야의 통상의 기술자에게 공지 되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체는 프로그램 명령을 저장하고 수행하도록 구성 된 하드웨어 장치를 포함할 수 있다. 예를 들어, 컴퓨터 판독 가능 기록 매체는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광 기록 매체(optical media), 플롭티 컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 롬(ROM), 램(RAM), 플래시 메모리 등일 수 있다. 프로그램 명령은 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라, 인터프리터 등을 통해 컴퓨터에 의해 실행될 수 있는 고급 언어 코드를 포함할 수 있다. 이상에서 본 발명의 실시예에 대하여 상세하게 설명하였지만 본 발명의 권리범위는 이에 한정되는 것은 아니고 다음의 청구범위에서 정의하고 있는 본 발명의 기본 개념을 이용한 당업자의 여러 변형 및 개량 형태 또한 본 발명의 권리범위에 속하는 것이다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8"}
{"patent_id": "10-2022-0145216", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 한 실시예에 따른 멀티 프로세서를 나타낸 도면이다. 도 2는 한 실시예에 따른 시스톨릭 어레이를 나타낸 도면이다. 도 3은 다른 실시예에 따른 시스톨릭 어레이를 나타낸 도면이다. 도 4는 한 실시예에 따른 불필요한 로직 스위칭을 제거하는 방법을 나타낸 개념도이다. 도 5는 다른 실시예에 따른 불필요한 로직 스위칭을 제거하는 방법을 나타낸 개념도이다. 도 6은 한 실시예에 따른 태스크 할당기가 포함된 멀티 프로세서 시스템을 나타낸 도면이다. 도 7은 한 실시예에 따른 태스크 할당기의 태스크 할당 방법을 나타낸 흐름도이다. 도 8은 한 실시예에 따른 태스크 할당 장치를 나타낸 블록도이다."}
