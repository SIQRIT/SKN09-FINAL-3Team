{"patent_id": "10-2022-0186170", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0103731", "출원번호": "10-2022-0186170", "발명의 명칭": "딥러닝 알고리즘 고속 실행 방법 및 이를 위한 연산 추적기", "출원인": "주식회사 코난테크놀로지", "발명자": "윤덕호"}}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "딥러닝 알고리즘의 최초 실행 시에 호출되는 연산 처리 기능의 호출 순서와 호출 정보를 포함하는 연산과정을저장하는 연산과정 저장부;동일한 처리 과정을 반복하여 실행할 때, 판단 과정의 재현 없이, 연산과정 저장부에 저장된 연산과정의 재생을통해 처리 과정을 반복 수행하는 연산과정 재생부; 및연산과정 재생부의 호출에 따라 연산 기능을 수행하는 연산기능 처리부;를 포함하는 것을 특징으로 하는 연산 추적기."}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서, 연산과정 저장부는연산 추적기가 켜져 있고(on), 재설정 기능이 요청되었거나 작업 기록이 존재하지 않거나 작업 기록 목록 중 입력 텐서 위치가 일치하는 기록이 없는 경우에 가동되어, 연산과정을 저장해 가면서 작업을 수행하고,연산과정 재생부는 연산 추적기가 켜져 있고(on), 재설정 기능이 요청되지 않고 작업 기록 목록 중 입력 텐서위치가 일치하는 기록이 있는 경우에 가동되어, 저장된 처리 기록에 따라 바로 작업을 수행하는 것을 특징으로하는 연산 추적기."}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서, 연산과정 재생부는연산과정 저장부에 의해 저장된 연산과정의 처리기록을 이용하여 호출 순서 및 호출 정보에 따라 연산기능 처리부의 연산 처리 기능을 호출하는 것을 특징으로 하는 연산 추적기."}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서, 연산기능 처리부는연산과정 저장부 또는 연산과정 재생부의 호출에 의해, 호출 정보 내 함수 ID를 이용하여 처리 셋을 선택하고,호출 정보 내 디바이스 정보를 이용하여 디바이스 핸들러를 선택하며, 선택된 디바이스 핸들러에 함수 ID 및 디바이스 정보를 제외한 호출 정보를 제공하여 이를 실행시키는 것을 특징으로 하는 연산 추적기."}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서, 연산 추적기는저장된 연산과정을 다른 환경에서 이용할 수 있도록 배포물을 생성 및 저장하는 배포물 생성부; 및다른 환경에서 저장된 배포물을 읽어 들여 연산과정 저장부에 제공하는 배포물 적재부;를 더 포함하는 것을 특징으로 하는 연산 추적기."}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서, 연산 추적기는연산과정 저장부의 메모리 블록 할당 요청에 따라 메모리 블록을 할당하고, 호출 정보의 블록 주소를 블록 ID로변환하여 연산과정 저장부에 제공하고, 호출 정보의 블록 ID를 블록 주소로 변환하여 연산과정 재생부에 제공하는 메모리 관리부;를 더 포함하는 것을 특징으로 하는 연산 추적기.공개특허 10-2024-0103731-3-청구항 7 제 1 항에 있어서, 연산 추적기는하이퍼파라미터 값의 중도 변경에 대비하여 하이퍼파라미터 값들을 보조 텐서에 모으고 직접적인 값 대신 인 텐서에서의 위치로 각각의 하이퍼파라미터들을 나타내 처리하는 하이퍼파라미터 매개부;를 더 포함하는 것을 특징으로 하는 연산 추적기."}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1 항에 있어서, 연산 추적기는서로 구분되어야 하는 복수의 작업에 대해 연산 처리 과정을 처리기록으로서 복수의 기록 공간에 구분해 저장및 관리하면서 외부 호출에 따라 처리기록을 제공하는 처리기록 풀 관리부;를 더 포함하는 것을 특징으로 하는 연산 추적기."}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 1 항에 있어서, 연산 추적기는외부의 사용자 조작에 의해 처리기록의 강제 폐기 및 재생성 또는 연산 추적기의 일시 멈춤을 포함한 지시를 제어하는 연산추적 제어부;를 더 포함하는 것을 특징으로 하는 연산 추적기."}
{"patent_id": "10-2022-0186170", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "연산 추적기를 이용한 딥러닝 알고리즘 고속 실행 방법에 있어서,연산과정 저장부가, 딥러닝 알고리즘의 최초 실행 시에 호출되는 연산 처리 기능의 호출 순서와 호출 정보를 포함하는 연산과정을 저장하는 단계;연산과정 재생부가, 동일한 처리 과정을 반복하여 실행할 때, 판단 과정의 재현 없이, 연산과정 저장부에 저장된 연산과정의 재생을 통해 처리 과정을 반복 수행하는 단계; 및연산기능 처리부가, 연산과정 재생부의 호출에 따라 연산 기능을 수행하는 단계;를 포함하는 것을 특징으로 하는 딥러닝 알고리즘 고속 실행 방법."}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "딥러닝 알고리즘 고속 실행 방법 및 이를 위한 연산 추적기가 개시된다. 일 실시 예에 따른 연산 추적기는, 딥러 닝 알고리즘의 최초 실행 시에 호출되는 연산 처리 기능의 호출 순서와 호출 정보를 포함하는 연산과정을 저장하 는 연산과정 저장부와, 동일한 처리 과정을 반복하여 실행할 때, 판단 과정의 재현 없이, 연산과정 저장부에 저 장된 연산과정의 재생을 통해 처리 과정을 반복 수행하는 연산과정 재생부와, 연산과정 재생부의 호출에 따라 연 산 기능을 수행하는 연산기능 처리부를 포함한다."}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 컴퓨터 비전 기술에 관한 것으로, 보다 구체적으로는 딥러닝 프레임워크 소프트웨어에서의 딥러닝 알 고리즘의 실행 기술에 관한 것이다."}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "딥러닝(Deep Learning)은 동물의 뇌세포를 모사해 고안된 뉴런들로 원하는 구조의 신경망 모델을 구성하고 많은 데이터를 통해 모델을 학습시킨 후 학습된 모델을 실제 문제에 적용하는 추론을 통해 다양한 문제를 풀어내는 대표적인 인공지능 기법이다. 신경망 모델은 내부에 가중치, 바이어스 등의 가변적인 파라미터(parameter)와, 학습률 등 미리 결정된 하이퍼 파라미터(hyperparameter)를 갖는다. 학습은 개발자가 원하는 방식에 최대한 가깝게 동작하도록 신경망이 파라 미터 값을 바꾸어 가는 과정으로 볼 수 있으며, 하이퍼파라미터 값들은 학습 과정의 구체적인 진행 과정을 정하 기 위한 여러 판단에 영향을 미치므로 학습이 효과적으로 수행하기 위해서는 적절한 하이퍼파라미터 값의 설정 이 매우 중요하다. 모델의 학습은 대개 많은 양의 데이터를 이용해 수행되지만, 학습에 이용되는 컴퓨터의 메모리 용량 한계 등의 문제 때문에 전체 데이터를 적당한 크기의 미니배치(mini batch) 데이터로 분할한 후 각 미니배치 데이터에 대한 학습 과정을 반복하는 방식으로 수행된다. 학습 데이터 모두를 이용해 모델을 한 번 학습시키는 것을 에포크(epoch)라 부르는데 신경망의 학습은 작게는 수십에서 수백, 크게는 수백만 에포크에 이를 정도의 반복 학습을 통해 이루어진다. 미니배치로의 분할과 함께 여러 에포크에 걸친 반복 처리는 신경망 학습의 미니배치 데이터 처리 횟수를 크게 증가시키는 요인이 된다. 미니배치 데이터의 처리 과정은 신경망 모델 자체의 다양한 구조와 여러 가지 옵션들로 인해 많은 수의 복잡한 판단 과정을 통해 결정되어 수행되지만, 대부분의 경우 반복되는 에포크 처리 및 그 안에서의 개별 미니배치 데 이터 처리에 따라 처리 과정이 달라지지 않고 동일한 과정을 통해 처리되게 된다. 딥러닝 알고리즘이 다루는 데이터들은 텐서(Tensor) 구조를 통해 표현되고 처리된다. 텐서는 각종 부가정보가 붙은 다차원 배열로서, 배열 데이터 저장을 위한 메모리 블록을 점유하게 된다. 크고 작은 텐서들이 무수히 이 용되는 딥러닝 알고리즘의 처리 과정은 텐서 지원을 위한 메모리 블록의 할당 및 반환 과정을 포함하게 되며, 빈번한 메모리의 할당과 반환은 코딩 상의 오류나 메모리 단편화 등 메모리 관리의 근본적 문제로 인해 메모리 고갈이나 불안정한 동작을 야기하기 쉬우며 프로그래머에게도 많은 부담을 안겨준다. 특정 환경에서 만들어져 학습된 신경망 모델을 다른 환경에 이식해 사용하는 과정을 모델의 배포라고 부른다. 현재 모델의 배포는 모델 구조 전체 내용과 학습된 파라미터를 전달하는 방법, 또는 모델 구조를 변환하여 개념 적인 처리 과정을 나타내는 계산 그래프로 표현한 후 이 그래프 내용과 학습된 파라미터를 전달하는 방식으로 이루어지고 있다. 딥러닝 프레임워크는 다양한 신경망 구조를 쉽게 구성하여 학습 및 추론 등 딥러닝 알고리즘을 수행할 수 있게 지원해주는 소프트웨어이다. 대표적인 딥러닝 프레임워크로 텐서플로(Tensorflow), 파이토치(Pytorch) 등이 있 다."}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "일 실시 예에 따라, 딥러닝 알고리즘을 고속으로 실행하는 방법 및 이를 위한 연산 추적기를 제안한다."}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시 예에 따른 연산 추적기는, 딥러닝 알고리즘의 최초 실행 시에 호출되는 연산 처리 기능의 호출 순서와 호출 정보를 포함하는 연산과정을 저장하는 연산과정 저장부와, 동일한 처리 과정을 반복하여 실행할 때, 판단 과정의 재현 없이, 연산과정 저장부에 저장된 연산과정의 재생을 통해 처리 과정을 반복 수행하는 연산과정 재 생부와, 연산과정 재생부의 호출에 따라 연산 기능을 수행하는 연산기능 처리부를 포함한다. 연산과정 저장부는, 연산 추적기가 켜져 있고(on), 재설정 기능이 요청되었거나 작업 기록이 존재하지 않거나 작업 기록 목록 중 입력 텐서 위치가 일치하는 기록이 없는 경우에 가동되어, 연산과정을 저장해 가면서 작업을 수행하고, 연산과정 재생부는 연산 추적기가 켜져 있고(on), 재설정 기능이 요청되지 않고 작업 기록 목록 중 입력 텐서 위치가 일치하는 기록이 있는 경우에 가동되어, 저장된 처리 기록에 따라 바로 작업을 수행할 수 있 다. 연산과정 재생부는, 연산과정 저장부에 의해 저장된 연산과정의 처리기록을 이용하여 호출 순서 및 호출 정보에 따라 연산기능 처리부의 연산 처리 기능을 호출할 수 있다. 연산기능 처리부는, 연산과정 저장부 또는 연산과정 재생부의 호출에 의해, 호출 정보 내 함수 ID를 이용하여 처리 셋을 선택하고, 호출 정보 내 디바이스 정보를 이용하여 디바이스 핸들러를 선택하며, 선택된 디바이스 핸 들러에 함수 ID 및 디바이스 정보를 제외한 호출 정보를 제공하여 이를 실행시킬 수 있다. 연산 추적기는, 저장된 연산과정을 다른 환경에서 이용할 수 있도록 배포물을 생성 및 저장하는 배포물 생성부 와, 다른 환경에서 저장된 배포물을 읽어 들여 연산과정 저장부에 제공하는 배포물 적재부를 더 포함할 수 있다. 연산 추적기는, 연산과정 저장부의 메모리 블록 할당 요청에 따라 메모리 블록을 할당하고, 호출 정보의 블록 주소를 블록 ID로 변환하여 연산과정 저장부에 제공하고, 호출 정보의 블록 ID를 블록 주소로 변환하여 연산과 정 재생부에 제공하는 메모리 관리부를 더 포함할 수 있다.연산 추적기는, 하이퍼파라미터 값의 중도 변경에 대비하여 하이퍼파라미터 값들을 보조 텐서에 모으고 직접적 인 값 대신 인 텐서에서의 위치로 각각의 하이퍼파라미터들을 나타내 처리하는 하이퍼파라미터 매개부를 더 포 함할 수 있다. 연산 추적기는, 서로 구분되어야 하는 복수의 작업에 대해 연산 처리 과정을 처리기록으로서 복수의 기록 공간 에 구분해 저장 및 관리하면서 외부 호출에 따라 처리기록을 제공하는 처리기록 풀 관리부를 더 포함할 수 있다. 연산 추적기는, 외부의 사용자 조작에 의해 처리기록의 강제 폐기 및 재생성 또는 연산 추적기의 일시 멈춤을 포함한 지시를 제어하는 연산추적 제어부를 더 포함할 수 있다. 다른 실시 예에 따른 연산 추적기를 이용한 딥러닝 알고리즘 고속 실행 방법은, 연산과정 저장부가, 딥러닝 알 고리즘의 최초 실행 시에 호출되는 연산 처리 기능의 호출 순서와 호출 정보를 포함하는 연산과정을 저장하는 단계와, 연산과정 재생부가, 동일한 처리 과정을 반복하여 실행할 때, 판단 과정의 재현 없이, 연산과정 저장부 에 저장된 연산과정의 재생을 통해 처리 과정을 반복 수행하는 단계와, 연산기능 처리부가, 연산과정 재생부의 호출에 따라 연산 기능을 수행하는 단계를 포함한다."}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "일 실시 예에 따른 딥러닝 알고리즘 고속 실행 방법 및 이를 위한 연산 추적기에 따르면, 동일한 처리 과정이 반복 실행될 때 최초의 처리에서 연산 호출 과정을 저장하고 두 번째 실행부터는 저장된 호출 과정의 재생을 통 해 딥러닝 알고리즘을 고속으로 실행할 수 있다. 보다 구체적으로, 일 실시 예에 따른 연산 추적기는 반복 수행되는 과정의 첫 수행을 제외한 나머지 모든 수행 과정에서 딥러닝 모델의 구조 및 옵션을 고려한 복잡한 판단 과정을 배제해 주기 때문에, 딥러닝 알고리즘의 처 리 속도를 크게 높여준다. 일 실시 예에 따른 연산 추적기는, 안정적인 메모리 운용을 가능하게 하며 코딩 상의 실수나 메모리 단편화 등 메모리 관리의 근본적 문제로 인한 메모리 고갈을 막아주며 프로그램의 안정적인 동작을 가능하게 한다. 일 실시 예에 따른 연산 추적기는, 메모리 관리를 위한 딥러닝 프레임워크 개발자의 노력을 크게 경감시켜 다른 중요한 문제에 집중할 수 있게 해 준다. 일 실시 예에 따른 연산 추적기는, 초반 실행에 문제가 없던 학습 과정이 한참 진행되다가 메모리 문제로 인해 갑자기 중단되어버리는 등의 사고를 막아주어 신경망 모델을 개발하고 학습시키려는 딥러닝 프레임워크 사용자 의 입장에서도 매우 유용하다. 일 실시 예에 따른 연산 추적기는, 하드웨어 환경에 의존적인 구체적인 연산 처리 과정의 차이점을 연산기능 처 리부에 집약시켜 감추어 주기 때문에 딥러닝 프레임워크 개발자의 개발 부담을 크게 경감시켜 준다. 일 실시 예에 따른 연산 추적기는, 가상머신의 개발과 편리한 배포를 가능하게 한다. 일반적인 가상머신 및 배포 형태가 계산 그래프에 기반하는 데 반해, 일 실시 예에 따른 연산 추적기는 더욱 심 층적인 구체적인 연산 처리 과정을 저장 형태로 삼기 때문에 가상머신의 개발 부담을 줄여주면서도 더욱 높은 속도 증진 효과를 가져온다."}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 상세하게 후술되어 있는 실시 예들을 참조하면 명확해질 것이다. 그러나 본 발명은 이하에서 개시되는 실시 예들에 한정되는 것이 아니라 서 로 다른 다양한 형태로 구현될 수 있으며, 단지 본 실시 예들은 본 발명의 개시가 완전하도록 하고, 본 발명이"}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "속하는 기술분야에서 통상의 지식을 가진 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것이며, 본 발명은 청구항의 범주에 의해 정의될 뿐이다. 명세서 전체에 걸쳐 동일 참조 부호는 동일 구성 요소를 지칭한다. 본 발명의 실시 예들을 설명함에 있어서 공지 기능 또는 구성에 대한 구체적인 설명이 본 발명의 요지를 불필요 하게 흐릴 수 있다고 판단되는 경우에는 그 상세한 설명을 생략할 것이며, 후술되는 용어들은 본 발명의 실시 예에서의 기능을 반영하여 정의된 용어들로서 이는 사용자, 운용자의 의도 또는 관례 등에 따라 달라질 수 있다. 그러므로 그 정의는 본 명세서 전반에 걸친 내용을 토대로 내려져야 할 것이다. 이하, 첨부 도면을 참조하여 본 발명의 실시 예를 상세하게 설명한다. 그러나 다음에 예시하는 본 발명의 실시 예는 여러 가지 다른 형태로 변형될 수 있으며, 본 발명의 범위가 다음에 상술하는 실시 예에 한정되는 것은 아"}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "니다. 본 발명의 실시 예는 이 발명이 속하는 기술분야에서 통상의 지식을 가진 자에게 본 발명을 보다 완전하 게 설명하기 위하여 제공된다. 도 1은 본 발명의 일 실시 예에 따른 연산 추적기의 구성을 도시한 도면이다. 일 실시 예에 따른 연산 추적기는 연산 호출 과정의 저장 및 재생을 통해 딥러닝 알고리즘을 고속으로 실행 하는 장치이다. 연산 추적기는 모델의 구조와 각종 옵션에 따른 판단 과정에서 결정되는 연산 처리의 호출 순서 및 각 연산 처리의 구체적 내용을 저장한다. 또한 저장된 내용의 재생을 이용하여 달라진 데이터에 대해 판단 과정의 재현 없이 동일한 처리 과정을 반복할 수 있게 해준다. 일 실시 예에 따른 연산 추적기는 다음과 같은 특장점이 있다. 딥러닝 학습에는 많은 양의 연산이 필요하여 긴 시간이 소요되는 경우가 많으며 이에 따라 GPU 등의 병렬연산 처리 장치를 이용하여 처리 속도를 크게 향상시키고 있는 추세이다. 하지만 갈수록 큰 규모의 거대 모델들이 등 장하면서 빠른 처리의 중요성은 더욱 높아지고 있다. 그런데 신경망 모델의 복잡한 구조와 다양한 옵션은 많은 양의 연산 외에도 연산 처리 과정의 결정을 위한 세심하며 정교한 일련의 판단 과정을 필요로 한다. 이러한 판 단 과정은 연산에 비해 처리의 총량은 작지만 그 특성상 병렬 수행이 거의 불가능하기 때문에 전체 처리 시간에 서 차지하는 비중은 결코 작지 않다. 일 실시 예에 따른 연산 추적기는 동일한 과정을 통해 반복 수행되는 처리 과정에서 반복되는 판단 과정을 최대한 배제한 채 병렬 수행이 용이한 연산과정에 처리 자원을 집중할 수 있도록 하여, 딥러닝 알고리즘을 빠르게 처리해 신경망 모델 학습의 시간적 부담을 크게 경감시킬 수 있다. 소프트웨어의 개발과 운용에서 안정적 메모리 관리는 매우 중요한 문제이다. 딥러닝 알고리즘의 처리 과정에서 연산에 사용되는 메모리 블록들을 빈번하게 할당하고 회수하다 보면 비효율적 운용이나 잘못된 운용으로 인해 메모리 자원의 낭비 및 고갈, 프로그램의 불안정한 동작 등이 야기될 수 있다. 이는 개발자가 저지른 코딩 상의 오류에서 기인하기도 하지만 메모리 관리를 담당하는 시스템 소프트웨어의 문제, 나아가 메모리 단편화 등 피하 기 어려운 메모리 관리의 본질적 문제 때문에 일어날 수도 있다. 일 실시 예에 따른 연산 추적기는 동일한 과정을 통해 반복 수행되는 처리 과정의 경우, 최초의 실행에서 메모리 블록을 할당한 후 반복 처리가 모두 종 료한 후에 메모리 블록을 회수하도록 하면서 그 사이 모든 반복 실행 과정에서 동일한 위치의 메모리를 사용하 도록 한다. 이렇게 하면 안정적이고 효율적인 메모리 관리가 가능할 뿐 아니라 메모리 관리에 소모되는 개발자 의 개발 역량을 크게 절약할 수 있다. 분산 처리를 통한 대규모 학습, 모델의 활용 단계에서 추가적인 학습이 수행되는 강화 학습 또는 다양한 형태의 협력 연구에서처럼 딥러닝 모델의 처리 과정을 복수의 컴퓨터에서 반복해 실행시켜야 하는 경우들이 있다. 또한 학습을 끝낸 딥러닝 모델이 추론에 이용될 때에도 전체 처리 과정이 아닌 추론을 위한 일부 처리 과정이기는 하 지만 역시 동일한 처리 과정을 반복해 실행시켜야 한다. 이런 여러 필요에 따라 모델에 관한 정보를 제공하는 것을 모델의 배포라고 한다. 일 실시 예에 따른 연산 추적기는 모델의 배포 시, 연산 처리 과정을 확정하기 위한 판단 과정을 반복할 필요 없이 최초의 판단 과정에서 찾아진 처리 순서가 연산 처리 과정만을 전달하는 방 법을 사용한다. 이 방법은 배포 받아 처리하는 단계에서의 처리 속도를 높일 수 있을 뿐 아니라, 모델의 구조를은폐할 수 있어서 보안상의 필요성이 있는 경우에도 유용하고, 연산 처리 과정만을 수행하는 가상머신의 개발 등을 통해 이식성을 높일 수 있다. 이하, 도 1을 참조로 하여 전술한 특장점을 가지는 연산 추적기의 각 구성요소에 대해 후술한다. 일 실시 예에 따른 연산 추적기는 연산과정 저장부, 연산과정 재생부, 연산기능 처리부, 배포물 생성부, 배포물 적재부, 메모리 관리부, 하이퍼파라미터 매개부, 처리기록 풀 관리부 및 연산추적 제어부를 포함한다. 연산과정 저장부는 딥러닝 알고리즘의 실행 시에 호출되는 연산 처리 기능의 호출 순서와 인자 내역을 포함 한 연산과정을 저장한다. 연산과정 저장부의 저장 프로세스는 도 3a 및 도 3b를 참조로 하여 후술한다. 연산과정 재생부는 연산과정 저장부에 저장된 연산과정에 따라 반복되는 처리 과정을 신속하게 수행한 다. 연산과정 재생부의 재생 프로세스는 도 4를 참조로 하여 후술한다. 연산기능 처리부는 필요한 연산 처리를 수행한다. 연산기능 처리부는 연산과정 저장부나 연산과정 재생부에 의해 호출될 수 있고, CPU 전용 모드나 특정 GPU 칩 지원 모드 등 다양한 환경에서의 단위 연산 실행 과정을 연산 추적기의 나머지 부분과 독립적으로 수행할 수 있다. 연산기능 처리부의 세부 처리 프 로세스는 도 5를 참조로 하여 후술한다. 배포물 생성부는 저장된 연산과정을 다른 환경에서 이용할 수 있도록 파일 등의 매개물 형태의 배포물로 저 장한다. 배포물 생성부의 세부 프로세스는 도 6을 참조로 하여 후술한다. 배포물 적재부는 역으로 다른 환경에서 저장된 배포물을 읽어들여 연산과정 재생부가 이용할 수 있게 지원한다. 배포물 적재부의 세부 프로세스는 도 7을 참조로 하여 후술한다. 메모리 관리부는 텐서 등에 이용되는 메모리 블록의 안정적 운용을 지원한다. 메모리 관리부는 연산과 정 저장부에서 요청받아 할당한 메모리 블록을 모든 처리가 종료될 때까지 반환 없이 안정적으로 유지하고, 연산과정 재생부가 이미 할당된 메모리 블록들만으로 이상 없이 동작하도록 지원한다. 특히 배포의 과정으 로 인해 서로 다른 환경에서 연산과정 저장부와 연산과정 재생부가 실행되는 경우 메모리 관리부는 달라지는 주소 공간을 반영한 메모리의 할당 및 관리를 통하여 연산과정 재생부에서의 이상 없는 재생이 가 능하도록 지원한다. 하이퍼파라미터 매개부는 하이퍼파라미터 값의 중도 변경에 대비해 하이퍼파라미터 값들을 보조 텐서에 모 으고 직접적인 값 대신 인 텐서에서의 위치로 각각의 하이퍼파라미터들을 나타내 처리하도록 지원한다. 처리기록 풀 관리부는 좁은 의미의 학습(train), 학습 진행의 타당성을 확인하기 위한 검증(validation), 별도의 데이터로 학습 결과의 품질을 판단하기 위한 평가(test) 등 여러 가지 작업의 처리 과정을 구분해 저장 하고, 이를 재생할 수 있도록 처리기록 풀을 관리한다. 흔히 말하는 모델의 학습 과정 중은 좁은 의미의 학습 (train), 학습 진행의 타당성을 확인하기 위한 검증(validation), 별도의 데이터로 학습 결과의 품질을 판단하 기 위한 평가(test) 등의 여러 과정을 가지며 외부의 호출 순서에 따라 임의의 순서로 호출되는 이들 과정은 각 각 서로 다른 처리 과정을 가지게 된다. 처리기록 풀 관리부는 서로 구분되어야 하는 복수의 작업에 대해 연산 처리 과정을 처리기록으로서 복수의 기록 공간에 구분해 저장, 관리하면서 외부 호출 내용에 따라 적절한 처리기록을 제공한다(도 3b, 도 4 참조). 또한 처리기록 풀 관리부는 배포물 전달 과정에서도 필요한 작업의 처리기록이 정확하게 전달될 수 있도록 처리한다(도 6, 도 7 참조). 연산과정 저장부는 특정 작업의 최초 실행 시에만 가동되지만, 외부의 필요에 따라 해당 작업의 처리기록을 폐기하고 다시 처리 과정을 생성할 수 있도록 강제할 수도 있어야 한다. 또한 외부의 요구에 따라 연산 추적기 의 작동 자체를 정지한 채 처리 과정의 저장이나 재생 없이 본래의 알고리즘에 따라 작업을 수행하는 것도 가능해야 한다. 연산 추적기는 이러한 제어 기능들을 지원하기 위해 연산추적 제어부를 포함한다. 연산 추적 제어부의 대표적인 제어 기능으로, 외부의 사용자 조작을 입력받아 중도에 연산 추적기가 없는 것 처럼 처리되도록 지원하는 일시중지 및 재가동 기능, 최초 실행이 아님에도 불구하고 연산과정 저장부를 강 제로 가동시켜 처리 과정을 재설정하도록 해 주는 재설정 기능이 있다. 필요에 따라 연산 추적기의 구성에서 연산과정 저장부와 배포물 생성부를 제외하여, 연산 추적기 를 배포물의 실행만을 전담하는 가상머신으로 활용할 수 있다. 연산 추적기가 딥러닝 프레임워크의 일부분임을 감안할 때 딥러닝 프레임워크 대신 연산 추적기의 일부만을 이용하는 가상머신은 매우 가볍고 효율적 인 딥러닝 알고리즘의 처리 장치로서 기능할 수 있다. 특히 기존의 딥러닝 가상머신의 처리 방식이 계산 그래프 에 기반하는 데 반해, 일 실시 예에 따른 연산 추적기는 더욱 심층적인 구체적인 연산 처리 과정을 저장 형 태로 삼기 때문에 가상머신의 개발 부담을 줄여주면서도 더욱 높은 속도 증진 효과를 가져온다. 도 2는 본 발명의 일 실시 예에 따른 연산과정 저장부와 연산과정 재생부의 가동 프로세스를 도시한 도면이다. 도 1 및 도 2를 참조하면, 연산과정 저장부는 연산 추적기가 켜져 있고(on), 재설정 기능이 요청 되었거나 작업 기록이 존재하지 않거나 작업 기록 목록 중 입력 텐서 위치가 일치하는 기록이 없는 경우에 가동되어, 연산 처리 과정을 저장해 가면서 기존의 처리 과정에 따라 작업을 수행한다. 이때 딥러닝 프레임워크는 연산 추적기 도입 이전의 본연의 알고리즘에 따라 신경망 모델의 구조 및 각종 옵 션을 고려한 많은 판단 과정을 거치면서 처리 과정을 수행한다. 이에 비해, 연산과정 재생부는 연산 추적기가 켜져 있고(on), 재설정 기능이 요청되지 않고 작업 기록 목록 중 입력 텐서 위치가 일치하는 기록이 있는 경우에 가동 되어, 저장된 처리 기록에 따라 기존 처리 과정 없이 바로 작업을 수행한다. 이어서, 새로운 텐서 메모리를 할당해야 하거나 연산 기능을 호출하게 되는 경우 도 3a나 도 3b의 처리 기능이 끼어들게 된다. 도 3a는 본 발명의 일 실시 예에 따른 연산과정 저장부의 텐서 메모리 할당 처리 프로세스를 도시한 도면이고, 도 3b는 본 발명의 일 실시 예에 따른 연산과정 저장부의 연산 기능 호출 저장 프로세스를 도시한 도면이다. 메모리 할당을 지원하는 도 3a의 프로세스에서는 기존 알고리즘과 동일하게 텐서 저장을 위한 메모리 블록이 생 성 되지만, 추가적으로 연산과정 저장부의 메모리 블록 할당 요청에 의해, 메모리 관리부가 메모 리 블록의 활용을 위한 맵 정보, 예를 들어, 형상, 타입, 파라미터 여부, 디바이스 등 텐서 메모리 할당 관련 정보를 획득하여 저장한다. 예를 들어, 메모리 관리부가 메모리 블록을 메모리 블록 풀에 할당 하고, 블록 ID를 할당하고 메모리 블록 맵에 맵 정보를 저장한 후, 블록 주소를 반환한다. 연산 기능 호출을 지원하는 도 3b의 프로세스에서는 역시 기존 알고리즘과 동일하게 연산 기능이 호출되어 실행 되지만, 연산과정 저장부가 추가적으로 호출 정보를 처리기록 풀에 저장하여 나중에 같은 내용의 호 출을 반복할 수 있게 준비한다. 예를 들어, 연산과정 저장부는 호출정보 내 함수명을 함수 ID로 변환 하고, 저장용 인자를 변환 하고, 호출 정보를 처리기록 풀에 저장 하고, 실행용 인자를 변환 하며, 연산 처리 기능을 호출 하여 연산기능 처리부가 연산기능을 실행하도록 한다. 딥러닝 알고리즘이 다루는 데이터들은 텐서 구조를 통해 표현되고 처리된다. 딥러닝 알고리즘의 특성상 미니배 치 데이터 별로 내용은 달라지지만 처리 과정 중에 이용되는 각 텐서들의 타입 및 형상은 달라지지 않는다. 이 점에 착안해 메모리 관리부는 연산과정 저장부의 작동 과정에서 도 3a에 도시된 바와 같이 메모리 블록 을 할당하며 처리가 끝난 후에도 할당된 메모리를 반환하지 않고 유지하다가 연산과정 재생부의 가동 시점 에는 추가적인 메모리의 할당이나 반납 없이 작업을 수행하도록 지원한다. 도 4는 본 발명의 일 실시 예에 따른 연산과정 재생부가 연산과정을 일괄 처리하는 프로세스를 도시한 도면이다. 도 1 및 도 4를 참조하면, 연산과정 재생부는 연산과정 저장부가 처리기록 풀에 저장한 처리기록의 내 용을 이용하여, 기존 알고리즘의 판단 동작을 이용하지 않으면서 바로 저장된 호출 순서에 따라 처리 하고 실행용 인자를 변환 한 후 호출 순서 및 호출 정보에 따라 연산기능 처리부의 연산 처리 기능을 호출 한다. 이때, 연산과정 재생부는 메모리 관리부를 통해 블록 ID 형태로 저장된 메모리 블록 접근 정보를 블록 주소로 변환 하고, 하이퍼파라미터 매개부를 통해 매개 텐서에 저장되어 하이퍼 인자 형 태로 전달되어 오는 하이퍼파라미터 값 접근이 가능한 텐서 포인터로 변환한다. 이를 통해 딥러닝 프레임 워크는 반복적인 판단 기능의 가동 없이도 저장된 처리 과정을 정확히 재현하게 된다. 저장 기능이 최초의 실행 때 한 번 실행되는 데 반하여 이후의 실행은 무수히 반복되기 때문에 판단 과정의 생략은 커다란 속도 향상 효 과를 기대할 수 있다. 배포 과정을 거친 후의 메모리 블록을 배포물 생성부가 가동된 환경과 같은 주소를 가지도록 할당하기는 환 경 상의 차이 등으로 인해 불가능하다. 따라서, 메모리 관리부는 도 4에 도시된 바와 같이 메모리 블록 풀 과 메모리 블록 맵을 함께 유지하면서 각 메모리 블록을 직접적인 주소 대신 메모리 블록 맵이 나타내는 메모리블록 풀에서의 위치 정보로 표현하는 간접적인 방식으로 운용한다. 딥러닝 알고리즘에서 하이퍼파라미터는 보통 상수처럼 취급되지만 모델 개발자의 의도에 따라 처리 중간에 그 값이 변경되는 경우도 없지는 않다. 학습 중간에 값이 변경되는 하이퍼파라미터로는 학습률이 대표적이지만, 본 발명은 차세대 인공지능 연구에 활용 가능한 유연한 딥러닝 프레임워크를 목표로 하고 있기 때문에, 차세대 인 공지능을 위한 연구 과정에서 더욱 다양한 종류의 하이퍼파라미터가 학습 중간에 변경될 가능성도 배제할 수 없 다. 하이퍼파라미터 매개부는 하이퍼파라미터를 고정된 값의 인자로 취급하는 대신 도 4에 도시된 바와 같 이 하이퍼파라미터들을 모아 별도의 매개 텐서 하나를 구성하고 연산 처리 기능의 호출 시에는 직접적인 값 대 신 이 보조 텐서 내에서의 위치 정보를 전달해 각각의 하이퍼파라미터에 접근하도록 하고 있다. 이에 따라, 하 이퍼파라미터 변경 시에는 이 매개 텐서의 해당 위치 값을 변경하는 방법으로 연산추적 기능에서 저장된 연산 처리 내용 기록의 수정 없이 변경된 값을 연산 처리에 정확히 반영할 수 있다. 도 5는 본 발명의 일 실시 예에 따른 연산기능 처리부의 연산 처리 프로세스를 도시한 도면이다. 도 1 및 도 5를 참조하면, 연산기능 처리부는 연산과정 저장부나 연산과정 재생부에 의해 호출될 수 있으며, 필요한 모든 함수 연산에 대한 디바이스 별 핸들러를 가지고 있으면서 지정된 함수의 디바이스 핸들 러를 선택해 가동시키는 방식으로 요청된 단위 연산을 실제로 수행한다. 예를 들어, 도 5에 도시된 바와 같이, 연산기능 처리부는 연산과정 저장부 또는 연산과정 재생부의 호출에 의해, 호출 정보 내 함수 ID를 이용하여 처리 셋을 선택 하고, 호출 정보 내 디바이스 정보를 이용 하여 디바이스 핸들러를 선택 하며, 선택된 디바이스 핸들러에 함수 ID 및 디바이스 정보를 제외한 호출 정보를 제공하여 이를 실행시킨다. 다양한 하드웨어 환경에서의 서로 다른 방식들은 서로 다른 종류의 디바이스 핸들러로 표현되기 때문에 새로운 방식으로 동작하는 연산용 반도체가 개발되는 경우와 같은 실행 환경의 중대한 변화가 있는 경우에도 연산기능 처리부의 디바이스 핸들러 추가를 통해 빠른 확장이 가능하다. 도 6은 본 발명의 일 실시 예에 따른 배포물 생성 프로세스를 도시한 도면이다. 도 1 및 도 6을 참조하면, 연산 추적기가 저장한 학습 및 추론 과정은 분산 처리 등을 위해 다른 기계에서 이식하여 이용할 수 있으며 개발된 인공지능 모델을 실무에 적용할 때에는 실무용 단말에 이식해 활용할 수 있 다. 이를 위해 배포물 생성부는 도 6에 도시된 바와 같이, 연산과정 저장부가 저장한 연산 처리 과정과 학습된 파라미터 내용 등을 파일 등의 매개물 형태로 변환하여 저장한다. 이때 달라지는 처리 환경에서 메모리 할당 및 운용이 가능하도록 메모리 블록 관련 정보도 함께 저장한다. 보다 구체적으로, 배포물 생성부는 처리기록 풀 관리부로부터 처리기록을 획득 하고, 메모리 관리 부로부터 메모리 할당 정보 및 파라미터 값을 획득(602, 603) 한 후 획득한 정보들을 배포물 형태로 저장한 다. 이를 위해, 처리기록 풀 관리부는 배포물 생성부가 요청한 작업에 대해 처리기록 정보를 배포 물 생성부에 제공하고, 메모리 관리부는 배포물 생성부가 요청한 작업에 필요한 텐서들에 대한 ID, 형상, 타입 정보를 제공하고, 파라미터에 해당하는 메모리 블록들에 대해 ID, 블록 내용을 배포물 생성부에 제공한다. 도 7은 본 발명의 일 실시 예에 따른 배포물 적재 프로세스를 도시한 도면이다. 도 1 및 도 7을 참조하면, 배포물 적재부는 도 7에 도시된 바와 같이 배포물 생성부가 생성한 파일 등 의 매개물 내용을 읽어들여 연산과정 재생부에 전달해 연산 처리 과정 재현에 이용할 수 있도록 해 준다. 이때 함께 저장된 메모리 블록 관련 정보와 학습된 파라미터 내용들을 이용하여 메모리 관리부가 처리에 필 요한 메모리 블록들을 할당하고 학습된 파라미터들을 해당되는 메모리 블록에 저장해 주는 작업도 함께 수행한 다. 보다 구체적으로, 배포물 적재부는 저장된 배포물을 획득 하고, 처리기록을 처리기록 풀 관리부를 통해 처리기록 풀에 저장 하며, 메모리 할당 정보를 메모리 관리부를 통해 메모리 블록 맵에 반영 하고, 파마미터 값을 메모리 관리부를 통해 메모리 블록 풀에 반영한다. 이때, 메모리 관리부 는 획득된 메모리 블록 정보를 이용하여 실제 메모리 블록들을 생성하고 이를 메모리 블록 맵에 등록하며, 파라미터에 해당하는 메모리 블록들에 대해 획득된 파라미터 값을 복사하여 메모리 블록 풀에 저장한다."}
{"patent_id": "10-2022-0186170", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "이제까지 본 발명에 대하여 그 실시 예들을 중심으로 살펴보았다. 본 발명이 속하는 기술분야에서 통상의 지식 을 가진 자는 본 발명이 본 발명의 본질적인 특성에서 벗어나지 않는 범위에서 변형된 형태로 구현될 수 있음을이해할 수 있을 것이다. 그러므로 개시된 실시 예들은 한정적인 관점이 아니라 설명적인 관점에서 고려되어야 한다. 본 발명의 범위는 전술한 설명이 아니라 특허청구범위에 나타나 있으며, 그와 동등한 범위 내에 있는 모 든 차이점은 본 발명에 포함된 것으로 해석되어야 할 것이다."}
{"patent_id": "10-2022-0186170", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시 예에 따른 연산 추적기의 구성을 도시한 도면, 도 2는 본 발명의 일 실시 예에 따른 연산과정 저장부와 연산과정 재생부의 가동 프로세스를 도시한 도면, 도 3a는 본 발명의 일 실시 예에 따른 연산과정 저장부의 텐서 메모리 할당 처리 프로세스를 도시한 도면, 도 3b는 본 발명의 일 실시 예에 따른 연산과정 저장부의 연산 기능 호출 저장 프로세스를 도시한 도면, 도 4는 본 발명의 일 실시 예에 따른 연산과정 재생부가 연산과정을 일괄 처리하는 프로세스를 도시한 도면, 도 5는 본 발명의 일 실시 예에 따른 연산기능 처리부의 연산 처리 프로세스를 도시한 도면, 도 6은 본 발명의 일 실시 예에 따른 배포물 생성 프로세스를 도시한 도면,도 7은 본 발명의 일 실시 예에 따른 배포물 적재 프로세스를 도시한 도면이다."}
