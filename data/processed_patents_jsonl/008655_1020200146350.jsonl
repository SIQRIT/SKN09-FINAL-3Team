{"patent_id": "10-2020-0146350", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0060397", "출원번호": "10-2020-0146350", "발명의 명칭": "전자 장치 및 이를 이용한 스토리지 관리 방법", "출원인": "삼성전자주식회사", "발명자": "이우중"}}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,스토리지를 포함하는 메모리; 및상기 메모리와 작동적으로 연결된 프로세서를 포함하고,상기 프로세서는,파일 삭제 요청이 발생하면, 상기 삭제 요청된 파일의 사용 속성 정보를 확인하고,상기 삭제 요청된 파일의 확장자와 관련된 정보가 상기 메모리에 저장되어 있으면, 상기 사용 속성 정보에 기반하여 상기 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트 하고, 및상기 업데이트된 확장자와 관련된 정보 및 상기 스토리지의 핫니스 조건에 기반하여, 상기 삭제 요청된 파일의확장자의 속성을 설정하는 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 스토리지에 핫니스 조건을 요청하는 입력을 송신하고, 및상기 핫니스 조건을 요청하는 입력에 대한 응답으로 상기 스토리지로부터 핫니스 조건을 수신하도록 설정된 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 핫니스 조건은, 용량 기반 핫니스 조건 및/또는 시간 기반 핫니스 조건을 포함하는 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서,상기 용량 기반 핫니스 조건은, 특정 파일의 데이터 블록이 상기 스토리지에 저장된 후 삭제되기 전까지 수행된다른 데이터 블록의 쓰기(write) 용량의 합을 포함하고, 및상기 시간 기반 핫니스 조건은, 상기 특정 파일의 데이터 블록에 쓰기된 상기 특정 파일이 삭제되는 시간을 포함하는 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 삭제 요청된 파일의 사용 속성 정보는, 상기 삭제 요청된 파일이 상기 스토리지에 생성된 시간과 삭제 요청된 시간에 기반하여 산출된 삭제 요청된 파일의 삭제 시간 및/또는 상기 스토리지 내 상기 삭제 요청된 파일의 쓰기 용량을 포함하는 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 확장자의 속성은, 핫(hot) 파일 및 콜드(cold) 파일을 포함하는 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "공개특허 10-2022-0060397-3-제 6 항에 있어서,상기 프로세서는, 상기 확장자의 속성에 기반하여, 동일한 확장자의 속성을 가지는 파일을 상기 스토리지의 동일한 블록에 저장하도록 설정된 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1 항에 있어서,상기 확장자와 관련된 정보는, 데이터베이스화되어 저장되며, 및상기 확장자와 관련된 정보는, 확장자, 확장자 별 상기 스토리지에서 삭제되는 평균 시간을 나타내는 평균 삭제시간, 상기 확장자 별 입출력 요청에 대한 액세스 빈도를 나타내는 입력 샘플 수, 및/또는 상기 확장자의 속성을 포함하는 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8 항에 있어서,상기 프로세서는,상기 파일에 대한 삭제 요청이 발생한 횟수를 카운트하여 상기 입력 샘플 수로서 업데이트하고, 상기 업데이트된 입력 샘플 수가 지정된 값을 초과하는 경우, 상기 업데이트된 확장자와 관련된 정보 및 상기 스토리지의 핫니스 조건에 기반하여, 상기 삭제 요청된 파일의 확장자의 속성을 설정하는 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 1 항에 있어서,상기 프로세서는,파일 쓰기 요청이 발생하면, 상기 쓰기 요청된 파일의 확장자의 속성을 확인하고, 상기 쓰기 요청된 파일에 상기 확장자의 속성을 태그하여 상기 스토리지에 전송하도록 설정된 전자 장치."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "어플리케이션 프로세서에 있어서,스토리지를 포함하는 메모리; 및상기 메모리와 작동적으로 연결된 프로세서를 포함하고,상기 프로세서는,파일 입출력 처리 모듈에 의해 파일 삭제 요청이 발생하면, 상기 삭제 요청된 파일의 사용 속성 정보를 확인하고,상기 삭제 요청된 파일의 확장자와 관련된 정보가 상기 메모리에 저장되어 있으면, 스트림 관리 모듈을 통해 상기 사용 속성 정보에 기반하여 상기 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트 하고, 및상기 스트림 관리 모듈을 통해 상기 업데이트된 확장자와 관련된 정보 및 상기 스토리지의 핫니스 조건에 기반하여, 상기 삭제 요청된 파일의 확장자의 속성을 설정하는 어플리케이션 프로세서."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "전자 장치의 스토리지 관리 방법에 있어서,파일 삭제 요청이 발생하면, 상기 삭제 요청된 파일의 사용 속성 정보를 확인하는 동작;상기 삭제 요청된 파일의 확장자와 관련된 정보가 메모리에 저장되어 있으면, 상기 사용 속성 정보에 기반하여상기 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트 하는 동작; 및상기 업데이트된 확장자와 관련된 정보 및 스토리지의 핫니스 조건에 기반하여, 상기 삭제 요청된 파일의 확장공개특허 10-2022-0060397-4-자의 속성을 설정하는 동작을 포함하는 방법."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 12 항에 있어서,상기 스토리지에 핫니스 조건을 요청하는 입력을 송신하는 동작; 및상기 핫니스 조건을 요청하는 입력에 대한 응답으로 상기 스토리지로부터 핫니스 조건을 수신하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 12 항에 있어서,상기 핫니스 조건은, 용량 기반 핫니스 조건 및/또는 시간 기반 핫니스 조건을 포함하는 방법."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 14 항에 있어서,상기 용량 기반 핫니스 조건은, 특정 파일의 데이터 블록이 상기 스토리지에 저장된 후 삭제되기 전까지 수행된다른 데이터 블록의 쓰기(write) 용량의 합을 포함하고, 및상기 시간 기반 핫니스 조건은, 상기 특정 파일의 데이터 블록에 쓰기된 상기 특정 파일이 삭제되는 시간을 포함하는 방법."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 12 항에 있어서,상기 삭제 요청된 파일의 사용 속성 정보는, 상기 삭제 요청된 파일이 상기 스토리지에 생성된 시간과 삭제 요청된 시간에 기반하여 산출된 삭제 요청된 파일의 삭제 시간 및/또는 상기 스토리지 내 상기 삭제 요청된 파일의 쓰기 용량을 포함하는 방법."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 12 항에 있어서,상기 확장자의 속성은, 핫(hot) 파일 및 콜드(cold) 파일을 포함하는 방법."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 12 항에 있어서,상기 확장자와 관련된 정보는, 확장자, 확장자 별 상기 스토리지에서 삭제되는 평균 시간을 나타내는 평균 삭제시간, 상기 확장자 별 입출력 요청에 대한 액세스 빈도를 나타내는 입력 샘플 수, 및/또는 상기 확장자의 속성을 포함하는 방법."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 18 항에 있어서,상기 삭제 요청된 파일의 확장자의 속성을 설정하는 동작은,상기 파일에 대한 삭제 요청이 발생한 횟수를 카운트하여 상기 입력 샘플 수로서 업데이트하는 동작; 및상기 업데이트된 입력 샘플 수가 지정된 값을 초과하는 경우, 상기 업데이트된 확장자와 관련된 정보 및 상기스토리지의 핫니스 조건에 기반하여, 상기 삭제 요청된 파일의 확장자의 속성을 설정하는 동작을 포함하는방법."}
{"patent_id": "10-2020-0146350", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 12 항에 있어서,공개특허 10-2022-0060397-5-파일 쓰기 요청이 발생하면, 상기 쓰기 요청된 파일의 확장자의 속성을 확인하는 동작; 및상기 쓰기 요청된 파일에 상기 확장자의 속성을 태그하여 상기 스토리지에 전송하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2020-0146350", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 다양한 실시예들에 따르면, 전자 장치는, 스토리지를 포함하는 메모리 및 상기 메모리와 작동적으로 연결된 프로세서를 포함하고, 상기 프로세서는, 파일 삭제 요청이 발생하면, 상기 삭제 요청된 파일의 사용 속성 정보를 확인하고, 상기 삭제 요청된 파일의 확장자와 관련된 정보가 상기 메모리에 저장되어 있으면, 상기 사용 속성 정보에 기반하여 상기 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트 하고, 및 상기 업데이트된 확 장자와 관련된 정보 및 상기 스토리지의 핫니스 조건에 기반하여, 상기 삭제 요청된 파일의 확장자의 속성을 설 정할 수 있다. 본 발명에 개시된 다양한 실시예들 이외의 다른 다양한 실시예가 가능하다."}
{"patent_id": "10-2020-0146350", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명의 다양한 실시예는, 전자 장치 및 이를 이용한 스토리지 관리 방법에 관한 것이다."}
{"patent_id": "10-2020-0146350", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "전자 장치는 많은 양에 데이터를 저장하기 위하여 별도의 스토리지를 구비할 수 있다. 스토리지는 플래시 메모 리로 구성될 수 있다. 플래시 메모리는 플래시 메모리의 물리적인 특성으로 인해 쓰기 동작을 수행하기 전에 삭 제 동작을 수행할 수 있다. 예컨대, 플래시 메모리는 특성상 복수의 블록들에 유효 페이지들과 무효 페이지들이 분산되기 때문에, 유효 페이지들을 새로운 블록으로 복사한 후, 이전 블록을 삭제하는 가비지 컬렉션(garbage collection) 동작을 수행할 수 있다."}
{"patent_id": "10-2020-0146350", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "일반적으로, 파일 시스템에서 파일 쓰기 요청이 발생하는 경우, 전자 장치는 파일의 확장자에 미리 정의된 핫니 스(hotness) 정보를 태그하여, 파일 쓰기 요청을 스토리지에 전달할 수 있다. 하지만, 파일의 확장자만을 고려 하여 핫니스 정보를 설정함에 따라, 파일의 확장자에 대한 핫니스 정보의 정확도가 떨어질 수 있다. 본 발명의 다양한 실시예들에 따른 전자 장치는, 삭제 요청된 파일의 사용 속성 정보를 스토리지로부터 획득하 고, 삭제 요청된 파일의 사용 속성 정보와 핫니스 조건에 기반하여, 삭제 요청된 파일의 확장자의 속성을 동적 으로 관리할 수 있다."}
{"patent_id": "10-2020-0146350", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 다양한 실시예들에 따른 전자 장치는, 스토리지를 포함하는 메모리 및 상기 메모리와 작동적으로 연 결된 프로세서를 포함하고, 상기 프로세서는, 파일 삭제 요청이 발생하면, 상기 삭제 요청된 파일의 사용 속성 정보를 확인하고, 상기 삭제 요청된 파일의 확장자와 관련된 정보가 상기 메모리에 저장되어 있으면, 상기 사용 속성 정보에 기반하여 상기 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트 하고, 및 상기 업데이트된 확 장자와 관련된 정보 및 상기 스토리지의 핫니스 조건에 기반하여, 상기 삭제 요청된 파일의 확장자의 속성을 설 정할 수 있다. 본 발명의 다양한 실시예들에 따른 어플리케이션 프로세서는, 스토리지를 포함하는 메모리 및 상기 메모리와 작 동적으로 연결된 프로세서를 포함하고, 상기 프로세서는, 파일 입출력 처리 모듈에 의해 파일 삭제 요청이 발생 하면, 상기 삭제 요청된 파일의 사용 속성 정보를 확인하고, 상기 삭제 요청된 파일의 확장자와 관련된 정보가 메모리에 저장되어 있으면, 스트림 관리 모듈을 통해 상기 사용 속성 정보에 기반하여 상기 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트 하고, 및 상기 스트림 관리 모듈을 통해 상기 업데이트된 확장자와 관련된 정 보 및 상기 스토리지의 핫니스 조건에 기반하여, 상기 삭제 요청된 파일의 확장자의 속성을 설정할 수 있다. 본 발명의 다양한 실시예들에 따른 전자 장치의 스토리지 관리 방법은, 파일 삭제 요청이 발생하면, 상기 삭제 요청된 파일의 사용 속성 정보를 확인하는 동작, 상기 삭제 요청된 파일의 확장자와 관련된 정보가 상기 메모리 에 저장되어 있으면, 상기 사용 속성 정보에 기반하여 상기 삭제 요청된 파일의 확장자와 관련된 정보를 업데이 트 하는 동작, 및 상기 업데이트된 확장자와 관련된 정보 및 스토리지의 핫니스 조건에 기반하여, 상기 삭제 요 청된 파일의 확장자의 속성을 설정하는 동작을 포함할 수 있다."}
{"patent_id": "10-2020-0146350", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 다양한 실시예들에 따른 전자 장치는, 삭제 요청된 파일의 사용 속성 정보와 핫니스 조건에 기반하여 삭제 요청된 파일의 확장자의 속성을 동적으로 관리하여, 동일한 확장자의 속성을 가지는 파일을 스토리지의 동 일한 블록 내에 저장하도록 할 수 있다. 동일한 확장자의 속성을 가지는 파일을 스토리지의 동일한 블록 내에저장하도록 함으로써, 가비지 컬렉션 시점에 블록 내 포함된 유효 페이지의 개수는 적어질 수 있다. 가비지 컬 렉션 시점에 블록 내 포함된 유효 페이지의 개수가 적어짐에 따라, 가비지 컬렉션의 효율이 높아질 수 있다. 본 발명의 다양한 실시예들에 따른 전자 장치는, 동일한 확장자의 속성을 가지는 파일을 스토리지의 동일한 블 록 내에 저장하도록 함으로써, 가비지 컬렉션의 실행 횟수가 감소될 수 있으며, 이에 따라 스토리지의 사용 수 명을 연장시킬 수 있다."}
{"patent_id": "10-2020-0146350", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워 크)를 통하여 전자 장치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하 여 전자 장치 또는 서버와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 서버를 통하 여 전자 장치와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 프로세서, 메모리, 입 력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스 , 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈 , 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치 에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모 듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일 실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세 서는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또 는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로 세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능 에 특화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는다른 구성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일 실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일 실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일 실시 예에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일 실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일 실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일 실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일 실시예에 따르면, 햅틱 모듈은, 예를 들면,모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일 실시예에 따르면, 카메라 모듈은 하나 이 상의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일 실시예에 따르면, 전력 관리 모 듈은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일 실시예에 따르면, 배터 리는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일 실시예에 따르면, 통 신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일 실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일 실시예에 따르면, 안테나 모듈은 복수의 안테나 들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통 신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통 신 모듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품(예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일 실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다.상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일 실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치 간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일 실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴 퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일 실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는, 다양한 실시예들에 따른, 전자 장치를 도시한 블록도이다. 도 2를 참조하면, 전자 장치(예: 도 1의 전자 장치)는 어플리케이션 프로세서(application processor, AP) 및 메모리를 포함할 수 있다. 미도시 되었으나, 다양한 실시예들에 따른 전자 장치는 통신 회로(예: 도 1의 통신 모듈) 및/또는 디스플레이(예: 도 1의 디스플레이 모듈)를 더 포함할 수 있다. 다양한 실시예들에 따르면, 메모리는 휘발성 메모리(예: 도 1의 휘발성 메모리) 및 스토리지(예: 도 1의 비휘발성 메모리)를 포함할 수 있다. 다양한 실시예들에 따르면, 어플리케이션 프로세서를 통해 스토리지를 제어하는 구성을 호스트(hos t)라고 부를 수 있다. 다양한 실시예들에 따르면, 호스트는 어플리케이션 프로세서 및 운영체제(예: 도 1 의 운영체제)를 포함하는 소프트웨어가 동작하는 환경을 포함할 수 있다. 예컨대, 호스트는 전자 장치 의 각종 어플리케이션의 작동과 그래픽 처리를 담당하는 칩셋의 기능을 포함하는 SoC(system on chip)를 포함할 수 있다. 다양한 실시예들에 따르면, 프로세서는 전자 장치의 각 구성요소들의 제어 및/또는 통신에 관한 연산 이나 데이터 처리를 수행할 수 있다. 예컨대, 프로세서는 전자 장치의 구성요소들과 작동적으로 연결 될 수 있다. 다양한 실시예들에 따르면, 프로세서는 다양한 소프트웨어(예: 프로그램)를 실행할 수 있다. 메모리 는 파일 시스템(file system), 블록 계층(block layer), 및 스토리지(storage)를 포함할 수 있다. 예컨대, 파일 시스템(file system) 및 블록 계층(block layer)은 메모리에 저장된 프 로그램 모듈로서, 프로세서에 의해 동작될 수 있다. 예를 들어, 파일 시스템(file system) 및 블록 계층(block layer)은 비휘발성 메모리(예: 도 1의 비휘발성 메모리), 및/또는 스토리지)에 저장 된 프로그램 모듈로서, 실행 시에 휘발성 메모리(예: 도 1의 휘발성 메모리)에 로딩되어 프로세서에 의해 동작될 수 있다. 다양한 실시예들에 따르면, 프로세서는 파일 시스템을 통해 스토리지에 파일 형태의 데이터를 저장할 수 있다. 예컨대, 파일 시스템은 프로세서가 스토리지에 데이터를 저장하기 위해 관리하 는 자료 구조를 의미할 수 있다. 전자 장치는 스토리지에 데이터를 쓰거나, 스토리지에 저장된 데이터를 읽는 것을 효율적으로 하기 위하여 파일 시스템을 활용할 수 있다. 예컨대, 파일 시스템은 FAT16(file allocation table 16), FAT32(file allocation table 32), NTFS(new technology file system),ext2(second extended file system), ext3, ext4, F2FS(flash friendly file system), 또는 reiserFS를 포함 할 수 있다. 본 발명의 다양한 실시예들에서, 파일 시스템은 F2FS(flash friendly file system)로 가정하여 설명한다. 예컨대, F2FS는 로그 기반 스토리지를 기반으로 낸드 플래시 메모리(NAND flash memory)(예: 플래시 메모리 )에 최적화된 파일 시스템을 의미할 수 있다. 본 발명의 다양한 실시예들에서, 파일 시스템은 스트림 관리 모듈, 파일 확장자 데이터베이스, 및/또는 파일 입출력 처리 모듈을 포함할 수 있다. 일 실시예에서, 스트림 관리 모듈은 파일 시스템을 마운트(mount)(예: 활성화) 시 스토리지에 핫니스(hotness) 조건을 요청할 수 있다. 스토리지로부터 핫니스 조건을 수신하면, 스트림 관리 모듈(23 1)은 수신된 핫니스 조건에 기반하여 파일 확장자 데이터베이스을 구성할 수 있다. 예컨대, 핫니스 조건은 용량 기반 핫니스 조건 및/또는 시간 기반 핫니스 조건을 포함할 수 있다. 예컨대, 용량 기반 핫니스 조건은 특 정 파일의 데이터 블록(data block)이 스토리지에 저장된 후, 삭제되기 전까지 수행된 다른 데이터 블록의 쓰기(write) 용량의 합을 포함할 수 있다. 시간 기반 핫니스 조건은 특정 파일의 데이터 블록에 쓰기(write)된 특정 파일이 삭제되는 시간(예: 1시간, 4시간, 또는 1일)을 포함할 수 있다. 다른 실시예에서, 스토리지에 파일 확장자 데이터베이스가 존재하는 경우, 스트림 관리 모듈은 스토 리지에 저장된 파일 확장자 데이터베이스를 휘발성 메모리(예: 도 1의 휘발성 메모리)에 로딩하고, 파일 시스템을 마운트(예: 활성화)할 수 있다. 다양한 실시예들에 따르면, 파일 확장자 데이터베이스는 확장자 필드(field), 확장자 별 스토리지의 플래시 메모리로부터 삭제되는 평균 시간을 나타내는 평균 삭제 시간 필드, 확장자 별 입출력 요청에 대한 액세스 빈도를 나타내는 입력 샘플 수 필드, 및/또는 확장자의 속성 필드를 포함할 수 있다. 일 실시예에서, 확장자의 속성은 핫 파일(hot file) 및 콜드 파일(cold file)을 포함할 수 있다. 이에 한정하는 것은 아니며, 확장자의 속성은 논 파일(none file)을 포함할 수 있다. 예컨대, 논 파일(none file)은 핫 파일 및 콜드 파일에 속하지 않는 파일을 포함할 수 있다. 다양한 실시예들에 따른, 핫니스 조건 중 시간 기반 핫니스 조건에 기반하여 파일의 확장자의 속성을 결정하는 동작에 대해 살펴보면, 핫 파일(hot file)은 지정된 시간(예: 1시간, 4시간, 또는 1일) 내에 플래시 메모리 로부터 삭제되거나, 또는 덮어 쓰여지게(overwrite) 되어 무효화(invalidate)되는 파일을 포함할 수 있다. 콜드 파일(cold file)은 지정된 시간(예: 1시간, 4시간, 또는 1일)을 초과하는 시간에 플래시 메모리로부 터 삭제되거나, 또는 덮어 쓰여지지 않는 파일을 포함할 수 있다. 다양한 실시예들에 따른, 핫니스 조건 중 용량 기반 핫니스 조건에 기반하여 파일의 확장자의 속성을 결정하는 동작에 대해 살펴보면, 특정 파일이 저장된 후, 스토리지에 지정된 용량(에: 200mb)의 추가 쓰기(write)가 수행될 동안 삭제되지 않는 경우, 스트림 관리 모듈은 특정 파일을 콜드 파일로 설정할 수 있다. 특정 파 일이 저장된 후, 스토리지에 지정된 용량(예: 200mb)의 추가 쓰기(write)가 수행될 동안 삭제된다면, 스트 림 관리 모듈은 특정 파일을 핫 파일로 설정할 수 있다. 일 실시예에서, 파일 확장자 데이터베이스는 파일 삭제 시점에 스트림 관리 모듈에 의해 업데이트될 수 있다. 일 실시예에서, 스트림 관리 모듈은 파일 삭제 시점에 삭제 요청된 파일의 사용 속성 정보를 확 인할 수 있다. 예컨대, 스트림 관리 모듈은 파일이 생성(또는 변경)된 시점 및 삭제 시점에 기반하여 파일 의 삭제 시간을 산출하고, 이에 기반하여 파일 확장자 데이터베이스에 저장된 파일의 확장자와 관련된 정 보를 업데이트할 수 있다. 일 실시예에서, 파일 확장자 데이터베이스 내 확장자의 속성은 업데이트된 확장자와 관련된 정보와 스토리 지로부터 수신한 핫니스 조건에 기반하여 업데이트될 수 있다. 이에 한정하는 것은 아니며, 스트림 관리 모듈은 삭제 요청된 파일이 플래시 메모리의 임의의 데이터 블록에 저장된 용량에 대한 핫니스 조건 에 기반하여, 확장자의 속성을 업데이트할 수 있다. 다양한 실시예들에 따른, 파일 확장자 데이터베이스는 파워 오프(power off)를 대비하여 별도로 저장될 수 있다. 다양한 실시예들에 따르면, 파일 입출력 처리 모듈은 파일 입출력을 처리할 수 있다. 예컨대, 파일 입출력 처리 모듈은 파일 입출력 요청이 발생하는 경우, ioctl(input/output control)을 이용하여 파일의 확장자의 속성을 제공할 수 있다. 파일 입출력 처리 모듈은 파일 입출력 요청 예컨대, 파일 삭제 요청이 발생하 는 경우, 스트림 관리 모듈에 의해 등록된 후킹 함수(hooking function)를 호출할 수 있다. 파일 입출력 처리 모듈은 파일 입출력 요청 예컨대, 파일 쓰기 요청이 발생하는 경우, 파일 확장자 데이터베이스 를 참조하여 파일의 확장자의 속성을 설정할 수 있다. 예컨대, 파일 입출력 처리 모듈은 파일 확장자 데이 터베이스를 참조하여 쓰기 요청된 파일의 확장자의 속성을 확인하고, 확장자에 설정된 속성에 기반하여 쓰 기 요청된 파일의 확장자의 속성(예: 핫 파일 또는 콜드 파일)을 설정할 수 있다. 파일 쓰기 요청이 발생하는 경우, 파일 입출력 처리 모듈은 쓰기 요청된 파일에 확장자의 속성을 태그하여 블록 계층에 파일 쓰 기 요청할 수 있다. 다양한 실시예들에 따르면, 블록 계층은 스토리지에 파일의 데이터를 저장하고 데이터를 입출력할 수 있다. 블록 계층은 블록 쓰기(block write) 처리 시 블록 입출력에 태그된 파일의 확장자의 속성을 스토리 지에 전달할 수 있다. 다양한 실시예들에 따르면, 스토리지는 인터페이스, 컨트롤러, 및/또는 플래시 메모리를 포함할 수 있다. 스토리지는 전자 장치의 적어도 하나의 구성요소(예: 프로세서)에 의해 사용되 는 다양한 데이터를 저장할 수 있다. 예컨대, 데이터는 소프트웨어(예: 프로그램) 및 이와 관련된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 일 실시예에서, 스토리지는 파일 쓰기(write) 동작 수행 시, 파일 시스템으로부터 파일의 확장자의 속성을 수신하고, 이에 기반하여 데이터를 저장할 수 있다. 예컨대, 스토리지는 동일한 확장자의 속성을 가지는 파일을 동일한 삭제 블록(erase block)에 저장할 수 있다. 일 실시예에서, 인터페이스는 스토리지에서 수행할 입출력 커맨드(input/output command)를 블록 계 층으로부터 수신하여 처리할 수 있다. 예컨대, 인터페이스는 블록 계층으로부터 파일 쓰기 (write) 요청을 수신하는 것에 응답하여, 파일의 확장자의 속성에 기반하여 파일의 데이터를 처리할 수 있다. 예컨대, 스토리지가 SCSI(small computer systems interface)를 지원하는 경우, 인터페이스는 “ WRITESTREAM”과 같은 별도의 커맨드를 사용하여 쓰기 요청된 파일의 확장자의 속성을 핫 파일 또는 콜드 파일 로 지정하여 컨트롤러에 전달할 수 있다. 다른 예를 들어, 인터페이스는 “WRITE command” 필드에 정의되어 있는 그룹 넘버(group number)를 이용하여 확장자의 속성을 컨트롤러에 전달할 수 있다. 일 실시예에서, 컨트롤러는 플래시 메모리에 파일의 데이터를 저장 및 액세스를 관리하는 프로그램을 구동할 수 있다. 예컨대, 쓰기 요청된 파일은 플래시 메모리에서 데이터로 표현될 수 있다. 컨트롤러(25 3)는 데이터를 저장하는 경우, 확장자의 속성을 참조하여 플래시 메모리에 동일한 확장자의 속성을 가지는 데이터를 동일한 삭제 블록(erase block)에 저장할 수 있다. 동일한 확장자의 속성을 가지는 데이터를 동일한 삭제 블록에 저장함에 따라, 가비지 컬렉션 효율을 높일 수 있다. 다양한 실시예들에 따르면, 스토리지의 플래시 메모리는 비휘발성 메모리(예: 도 1의 비휘발성 메모 리)를 포함할 수 있다. 플래시 메모리는 UFS(universal flash storage, 범용 플래시 스토리지) 표준 규격을 만족하는 낸드 플래시 메모리(NAND flash memory)를 포함할 수 있다. 일 실시예에서, 플래시 메모리는 복수의 플래시 칩들로 구성될 수 있다. 복수의 플래시 칩들 각각은 복수 의 삭제 블록들(erase blocks)로 구성될 수 있다. 스토리지는 데이터 저장 시 삭제 블록(erase block) 단 위로 데이터를 초기화 한 후, 삭제 블록(erase block)에 페이지(page) 단위로 쓰기(write)를 수행할 수 있다. 다양한 실시예들에 따르면, 스토리지는 프로세서(예: 블록 계층)로부터 수신한 삭제 요청에 기 반하여 해당 파일에 대응하는 논리 주소를 추출할 수 있다. 스토리지는 추출된 논리 주소에 대응하는 물리 페이지(physical page)에 대한 삭제를 수행할 수 있다. 다른 실시예에서, 플래시 메모리는 저장되는 데이 터에 대한 논리 주소와 물리 주소 간의 관계(매핑 관계)를 나타내는 매핑 테이블을 저장할 수 있다. 예컨대, 매 핑 테이블은 플래시 메모리에 대한 논리 주소와 물리 주소를 서로 매핑하는 매핑 테이블(logical to physical address mapping information. L2P table)을 의미할 수 있다. 스토리지는 매핑 테이블 내 추출 된 논리 주소 및 물리 주소의 데이터를 삭제할 수 있다. 다양한 실시예들에 따르면, 스트림 관리 모듈, 파일 확장자 데이터베이스, 파일 입출력 처리 모듈 , 및/또는 블록 계층은 스토리지에 저장될 수 있다. 예를 들어, 스트림 관리 모듈, 파일 입출력 처리 모듈, 및/또는 블록 계층은 플래시 메모리에 저장되고, 실행 시에 메모리(예: 도 1의 휘발성 메모리)에 로딩되어 프로세서에 의해 실행될 수 있다.도 3은, 다양한 실시예들에 따른, 파일 시스템, 블록 계층, 및 스토리지 간 신호 흐름을 나타내 는 블록도이다. 도 3을 참조하면, 스트림 관리 모듈은 스토리지에 핫니스(hotness) 조건을 요청할 수 있다. 스 토리지는 핫니스 조건을 스트림 관리 모듈에 송신할 수 있다. 예컨대, 핫니스 조건은 스토리지 의 속성(예: 삭제 블록의 개수, 삭제 블록의 사이즈)에 기반하여 설정될 수 있다. 핫니스 조건은 입출력 요청된 파일에 대한 확장자의 속성을 핫 파일 또는 콜드 파일로 결정하기 위한 조건을 포함할 수 있다. 일 실시예에서, 파일 입출력 처리 모듈은 파일 입출력 요청(예: 쓰기/삭제 요청)이 발생하면, 파일 입출력 요청과 관련된 정보를 스트림 관리 모듈에 송신할 수 있다. 파일 입출력 처리 모듈은 파일 입출 력 요청과 관련된 정보를 스트림 관리 모듈에 송신하는 것에 대한 응답으로, 스트림 관리 모듈 로부터 응답 신호를 수신할 수 있다. 일 실시예에서, 파일 입출력 처리 모듈은 파일 쓰기 요청이 발생하면, 파일 확장자 데이터베이스를 참조하여, 파일의 확장자의 속성을 확인할 수 있다. 확장자의 속성은 핫 파일(hot file) 및 콜드 파일 (cold file)을 포함할 수 있다. 일 실시예에서, 파일 입출력 처리 모듈은 쓰기 요청된 파일에 확장자의 속성을 태그하여 블록 계층에 파일 쓰기 요청할 수 있다. 일 실시예들에서, 블록 계층은 블록 쓰기(block write) 처리 시 블록 입출력에 태그된 파일의 확장자의 속 성을 스토리지에 송신할 수 있다. 블록 계층은 블록 입출력에 태그된 파일의 확장자의 속성을 스토리지에 송신하는 것에 대한 응답으로, 스토리지로부터 응답 신호를 수신할 수 있다. 일 실시예에서, 스토리지는 블록 계층로부터 수신한 확장자의 속성에 기반하여 플래시 메모리(예: 도 2의 플래시 메모리)에 파일의 쓰기 동작을 수행할 수 있다. 예컨대, 스토리지는 동일한 확장자의 속 성을 가지는 파일을 동일한 삭제 블록(erase block)에 저장할 수 있다. 일 실시예에서, 파일 삭제 요청이 발생하면, 스트림 관리 모듈은 삭제 요청된 파일이 스토리지에 생 성된 시간과 삭제 요청된 시간에 기반하여 삭제 요청된 파일의 삭제 시간을 산출하고, 이에 기반하여 파일 확장 자 데이터베이스에 저장된 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트할 수 있다. 도 4는, 다양한 실시예들에 따른, 파일 시스템을 활성화하여 핫니스 조건을 설정하는 방법을 설명하기 위 한 흐름도이다. 도 4를 참조하면, 프로세서(예: 도 2의 프로세서)는 405동작에서, 파일 시스템을 마운트(mount)(예: 활성화)할 수 있다. 일 실시예에서, 프로세서는 410동작에서, 스트림 관리 모듈(예: 도 2의 스트림 관리 모듈), 파일 입 출력 처리 모듈(예: 도 2의 파일 입출력 처리 모듈), 및 블록 계층(예: 도 2의 블록 계층)을 활성화 할 수 있다. 일 실시예에서, 프로세서(예: 스트림 관리 모듈)는 415동작에서, 파일 입출력 처리 모듈에 파일 생성/삭제 시 호출될 후킹 함수(hooking function)를 등록할 수 있다. 예컨대, 파일 생성/삭제 시 호출될 후킹 함수(hooking function)를 등록함에 따라 프로세서(예: 스트림 관리 모듈)는 파일 입출력 처리 모듈 로부터 확장자를 가지는 파일의 생성/삭제에 대한 정보를 수신할 수 있다. 일 실시예에서, 프로세서는 420동작에서, 스토리지로부터 핫니스 조건을 획득할 수 있다. 예컨대, 프 로세서는 핫니스 조건을 스토리지에 요청할 수 있으며, 이에 응답하여, 스토리지로부터 핫니스 조건을 수신할 수 있다. 예컨대, 핫니스 조건은 파일의 확장자 속성을 결정하기 위한 기준 값으로, 예컨대, 용 량 기반 핫니스 조건 및/또는 시간 기반 핫니스 조건을 포함할 수 있다. 용량 기반 핫니스 조건은 특정 파일의 데이터 블록이 스토리지에 저장된 후, 삭제되기 전까지 수행된 다른 데이터 블록의 쓰기(write) 용량의 합 을 포함할 수 있다. 시간 기반 핫니스 조건은 특정 파일의 데이터 블록에 쓰기(write)된 특정 파일이 삭제되는 시간을 포함할 수 있다. 일 실시예에서, 프로세서는 425동작에서, 핫니스 조건에 기반하여 파일 확장자 데이터베이스(예: 도 2의 파일 확장자 데이터베이스)를 초기화할 수 있다. 예컨대, 파일 확장자 데이터베이스는 확장자 필드 (field), 확장자 별 스토리지의 플래시 메모리로부터 삭제되는 평균 시간을 나타내는 평균 삭제 시간필드, 확장자 별 입/출력 요청에 대한 액세스 빈도를 나타내는 입력 샘플 수 필드, 및/또는 확장자의 속성 필드 를 포함할 수 있다. 핫니스 조건은, 파일 확장자 데이터베이스에 저장된 확장자의 속성(예: 핫 파일(hot file) 또는 콜드 파일(cold file))을 결정하는 데 사용될 수 있다. 다양한 실시예들에서, 미도시 되었으나, 파일 시스템을 마운트 시, 스토리지로부터 핫니스 조건이 획 득되지 않는 경우, 프로세서는 기 지정된 핫니스 조건에 기반하여 파일 확장자 데이터베이스를 초기 화할 수 있다. 프로세서는 기 지정된 핫니스 조건에 기반하여 파일의 확장자의 속성을 핫 파일(hot file) 또는 콜드 파일(cold file)로 구분할 수 있다. 다양한 실시예들에서, 스토리지에 저장된 파일 확장자 데이터베이스가 존재하는 경우, 파일 확장자 데이터 베이스를 프로세서에 의해 관리되는 호스트 단의 휘발성 메모리(예: 도 1의 휘발성 메모리)에 로딩한 후, 파일 확장자 데이터베이스를 초기화할 수 있다. 도 5는, 다양한 실시예들에 따른, 파일 쓰기 요청이 발생하는 경우, 스토리지에 파일 쓰기 요청을 전달하는 방 법을 설명하기 위한 흐름도이다. 도 5를 참조하면, 프로세서(예: 도 2의 프로세서)(예: 도 2의 파일 입출력 처리 모듈)는 505동작에서, 파일 쓰기 요청이 발생하면, 핫니스 조건에 기반하여 결정된 쓰기 요청된 파일의 확장자의 속성을 확인할 수 있다. 예컨대, 프로세서는 파일 확장자 데이터베이스(예: 도 2의 파일 확장자 데이터베이스 )를 참조하여, 파일의 확장자의 속성을 확인할 수 있다. 확장자의 속성은 핫 파일(hot file) 및 콜드 파일 (cold file)을 포함할 수 있다. 일 실시예에서, 프로세서(예: 블록 계층)는 510동작에서, 쓰기 요청된 파일에 확장자의 속성을 태그 하여 스토리지(예: 도 2의 스토리지)에 전송할 수 있다. 예컨대, 프로세서(예: 파일 입출력 처리 모 듈)는 블록 입출력 생성 시 파일 확장자 데이터베이스를 참조하여 파일의 확장자의 속성을 확인할 수 있다. 파일 입출력 처리 모듈은 확인된 확장자의 속성을 쓰기 요청된 파일에 태그(tag)하여 블록 계층 에 전달할 수 있다. 예컨대, 파일 입출력 처리 모듈은 파일 확장자 데이터베이스를 참조하여, 쓰기 요청된 파일의 확장자의 속성이 콜드 파일인 경우, 쓰기 요청된 파일에 콜드 파일을 태그하여 스토리지(예: 도 2의 스토리지)에 전송할 수 있다. 블록 계층은 블록 쓰기(block write) 처리 시 블 록 입출력에 태그된 파일의 확장자의 속성을 스토리지에 전달할 수 있다. 일 실시예에서, 스토리지는 블록 계층로부터 수신한 확장자의 속성에 기반하여 플래시 메모리(예: 도 2의 플래시 메모리)에 파일의 쓰기 동작을 수행할 수 있다. 예컨대, 스토리지는 동일한 확장자의 속 성을 가지는 파일을 동일한 삭제 블록(erase block)에 저장할 수 있다. 동일한 확장자의 속성을 가지는 파일을 동일한 삭제 블록(erase block)에 저장함에 따라, 가비지 컬렉션 시점에 삭제 블록(erase block) 내 포함된 유 효 페이지의 개수는 적어질 수 있다. 가비지 컬렉션 시점에 삭제 블록(erase block) 내 포함된 유효 페이지의 개수가 적어짐에 따라, 가비지 컬렉션의 효율이 높아질 수 있다. 도 6은, 다양한 실시예들에 따른, 파일 확장자 데이터베이스를 업데이트하는 방법을 설명하기 위한 흐름도 이다. 도 6을 참조하면, 프로세서(예: 도 2의 프로세서)는 605동작에서, 파일 삭제 요청이 발생하면, 스트림 관 리 모듈(예: 도 2의 스트림 관리 모듈)에서 등록한 후킹 함수(hooking function)를 호출할 수 있다. 예컨 대, 파일 삭제 요청이 발생함에 따라 프로세서는 파일 입출력 처리 모듈(예: 도 2의 파일 입출력 처리 모 듈)로부터 확장자를 가지는 파일의 삭제에 대한 정보를 수신할 수 있다. 일 실시예에서, 프로세서(예: 스트림 관리 모듈)는 610동작에서, 삭제 요청된 파일이 스토리지(예: 도 2의 스토리지)에 생성된 시간과 삭제 요청된 시간에 기반하여 삭제 요청된 파일의 삭제 시간을 산출할 수 있다. 예컨대, 프로세서(예: 스트림 관리 모듈)는 파일의 생성 시간(또는 수정(변경) 시간)과 파 일의 삭제 요청된 시간을 비교하고, 이에 기반하여 파일의 삭제 시간을 산출할 수 있다. 일 실시예에서, 프로세서는 615동작에서, 파일 확장자 데이터베이스(예: 도 2의 파일 확장자 데이터베이스 )에 삭제 요청된 파일의 확장자가 존재하는지 여부를 결정할 수 있다. 파일 확장자 데이터베이스에 삭제 요청된 파일의 확장자가 존재하면(예: 615동작의 YES), 프로세서는 620동작에서, 산출된 삭제 요청된 파일의 삭제 시간에 기반하여 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트할 수 있다. 일 실시예에서, 파일 확장자 데이터베이스는 확장자 필드, 확장자 별 스토리지의 플래시 메모리(25 5)로부터 삭제되는 평균 시간을 나타내는 평균 삭제 시간 필드, 확장자 별 입/출력 요청에 대한 액세스 빈도를 나타내는 입력 샘플 수 필드, 및/또는 확장자의 속성 필드를 포함할 수 있다. 일 실시예에서, 프로세서(예: 스트림 관리 모듈)는 파일 확장자 데이터베이스에 삭제 요청된 파 일의 확장자가 존재하면, 610동작에서 산출된 삭제 요청된 파일의 삭제 시간에 기반하여 파일 확장자 데이터베 이스에 저장된 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트할 수 있다. 예컨대, 삭제 요청된 파 일의 확장자와 관련된 정보는 기 저장되어 있을 수 있으며, 프로세서(예: 스트림 관리 모듈)는 삭제 요청된 파일의 삭제 시간에 기반하여 기 저장된 확장자와 관련된 정보를 업데이트할 수 있다. 예컨대, 프로세서 (예: 스트림 관리 모듈)는 파일 확장자 데이터베이스 내 해당 확장자의 평균 삭제 시간 필드 및 /또는 입력 샘플 수 필드를 업데이트할 수 있다. 일 실시예에서, 프로세서(예: 스트림 관리 모듈)는 625동작에서, 삭제 요청된 파일의 스토리지 내 쓰기(write) 용량을 확인할 수 있다. 예컨대, 프로세서(예: 스트림 관리 모듈)는 파일이 임의의 데이터 블록(data block)에 저장된 이후, 삭제되기 전까지 수행되는 데이터 블록의 쓰기(write) 용량의 합을 확 인할 수 있다. 일 실시예에서, 프로세서는 630동작에서, 핫니스 조건에 기반하여 삭제 요청된 파일의 확장자의 속성을 업 데이트할 수 있다. 예컨대, 프로세서는 파일의 평균 삭제 시간과 핫니스 조건에 기반하여 확장자의 속성을 결정할 수 있다. 파일 확장자 데이터베이스 내 저장된 확장자의 속성은 기 설정되어 있을 수 있으며, 결정 된 확장자의 속성에 기반하여 기 설정된 확장자의 속성을 유지하거나, 또는 결정된 확장자의 속성으로 변경할 수 있다. 일 실시예에서, 핫니스 조건은 용량 기반 핫니스 조건 및/또는 시간 기반 핫니스 조건을 포함할 수 있다. 예컨 대, 용량 기반 핫니스 조건은 특정 파일의 데이터 블록(data block)이 스토리지에 저장된 후, 삭제되기 전 까지 수행된 다른 데이터 블록의 쓰기(write) 용량의 합을 포함할 수 있다. 시간 기반 핫니스 조건은 특정 파일 의 데이터 블록에 쓰기(write)된 특정 파일이 삭제되는 시간을 포함할 수 있다. 일 실시예에서, 미도시 되었으나, 프로세서는 파일 확장자 데이터베이스 내 입력 샘플 수 필드에 기 반하여 전술한 630동작의 파일의 확장자의 속성을 업데이트할 수 있다. 예컨대, 확장자의 속성을 결정하는 정확 도를 높이기 위해, 입력 샘플 수가 지정된 횟수를 초과하는 경우, 프로세서는 전술한 630동작을 수행할 수 있다. 일 실시예에서, 파일 확장자 데이터베이스에 삭제 요청된 파일의 확장자가 존재하지 않으면(예: 620동작의 NO), 프로세서는 635동작에서, 삭제 요청된 파일의 확장자와 관련된 정보를 추가할 수 있다. 예컨대, 프로 세서는 확장자, 확장자를 가지는 파일의 삭제 시간, 입력 샘플 수, 및/또는 확장자의 속성을 포함하도록 확장자와 관련된 정보를 생성할 수 있다. 일 실시예에서, 프로세서는 640동작에서, 핫니스 조건에 기반하여 삭제 요청된 파일의 확장자의 속성을 설 정할 수 있다. 도 7은, 다양한 실시예들에 따른, 스토리지 관리 방법을 설명하기 위한 흐름도이다. 도 7을 참조하면, 프로세서(예: 도 2의 프로세서)는 705동작에서, 파일 삭제 요청이 발생하면, 삭제 요청 된 파일의 사용 속성 정보를 확인할 수 있다. 예컨대, 삭제 요청된 파일의 사용 속성 정보는, 삭제 요청된 파일 이 스토리지(예: 도 2의 스토리지)에 생성된 시간과 삭제 요청된 시간에 기반하여 계산된 삭제 요청된 파 일의 삭제 시간 및/또는 스토리지 내 삭제 요청된 파일의 쓰기 용량을 포함할 수 있다. 일 실시예에서, 프로세서는 710동작에서, 삭제 요청된 파일의 확장자와 관련된 정보가 메모리(예: 도 1의 휘발성 메모리)에 저장되어 있으면, 사용 속성 정보에 기반하여 삭제 요청된 파일의 확장자와 관련된 정보 를 업데이트 할 수 있다. 일 실시예에서, 프로세서는 파일 확장자 데이터베이스(예: 도 2의 파일 확장자 데이터베이스)에 저장 된 삭제 요청된 파일의 확장자와 관련된 정보를 업데이트 할 수 있다. 파일 확장자 데이터베이스는 확장자 필드, 확장자 별 스토리지의 플래시 메모리로부터 삭제되는 평균 시간을 나타내는 평균 삭제 시간 필 드, 확장자 별 입/출력 요청에 대한 액세스 빈도를 나타내는 입력 샘플 수 필드, 및/또는 확장자의 속성 필드를 포함할 수 있다. 프로세서(예: 스트림 관리 모듈)는 파일 확장자 데이터베이스 내 해당 확장자 의 평균 삭제 시간 필드 및/또는 입력 샘플 수 필드를 업데이트할 수 있다.일 실시예에서, 프로세서는 715동작에서, 업데이트된 확장자와 관련된 정보 및 스토리지(예: 도 2의 스토 리지)의 핫니스 조건에 기반하여, 삭제 요청된 파일의 확장자의 속성을 설정할 수 있다. 예컨대, 핫니스 조건은 용량 기반 핫니스 조건 및/또는 시간 기반 핫니스 조건을 포함할 수 있다. 업데이트된 확장자와 관련된 정보가 핫니스 조건에 만족하는지 여부에 기반하여 삭제 요청된 파일의 확장자의 속성(예: 핫 파일 또는 콜드 파일)을 업데이트할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다."}
{"patent_id": "10-2020-0146350", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는, 다양한 실시예들에 따른, 전자 장치를 도시한 블록도이다. 도 3은, 다양한 실시예들에 따른, 파일 시스템, 블록 계층, 및 스토리지 간 신호 흐름을 나타내는 블록도이다. 도 4는, 다양한 실시예들에 따른, 파일 시스템을 활성화하여 핫니스 조건을 설정하는 방법을 설명하기 위한 흐 름도이다. 도 5는, 다양한 실시예들에 따른, 파일 쓰기 요청이 발생하는 경우, 스토리지에 파일 쓰기 요청을 전달하는 방 법을 설명하기 위한 흐름도이다. 도 6은, 다양한 실시예들에 따른, 파일 확장자 데이터베이스를 업데이트하는 방법을 설명하기 위한 흐름도이다. 도 7은, 다양한 실시예들에 따른, 스토리지 관리 방법을 설명하기 위한 흐름도이다."}
