{"patent_id": "10-2007-0043147", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2008-0097819", "출원번호": "10-2007-0043147", "출원인": "김인철", "발명자": "김인철"}}
{"patent_id": "10-2007-0043147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "동적인 환경에서 지능형 에이전트들의 행위들을 제어하는 높은 상황-민감형 구조를 제공한다. 실행 가능한 모든행위 객체들을 모두 저장, 관리하는 행위 라이브러리와 시시각각 변화하는 외부 환경의 상태를 표현하는 월드모델, 그리고 다양한 결정 사항과 히스토리 정보를 저장하고 관리하는 내부 모델로 구성되며, 또한 외부 환경으로부터 받아들이는 다양한 입력 정보를 바탕으로 월드 모델을 갱신하는 센서, 이 센서를 통해 받아들여진 정보를 바탕으로 결전된 행위를 실행하는 실행기, 그리고 행위가 실행되면 행위 수행 조건과 행위 유지 조건을 고려하여 현재의 행위를 결정하는 인터프리터로 구성함을 특징으로 하는 동적 환경에서의 상황 - 민감형 에이전트구조."}
{"patent_id": "10-2007-0043147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서, 상기 행위 라이브러리의 행위의 수행 가능 여부와 행위의 계속성의 체크, 행위의 효용성을 체크하는 기능 등을 포함함으로써 환경 변화에 따른 행위의 즉각적인 중단이나 다른 행위로의 빠른 전환이 이루어짐을 특징으로 하는 에이전트 구조명 세 서발명의 상세한 설명 발명의 목적 종래기술의 문헌 정보[1]Adobbati, R., Marshall, A.N., Scholer, A., Tejada, S., Kaminka, G.A., Schaffer, S., Sollitto, <2>C. GameBots: A 3D virtual world test bed for multiagent research. In Proceedings of the secondInternational Workshop on Infrastructure for agents, MAS, and Scable MAS, 2001[2]Ferguson, I.A. On the role of BDI modeling for agents Applied Artificial Intelligence , Vol.9, <3>No.4, 1995[3]Harel, D and Pneuli, A On the Development Of Reactive Systems, Springer-Verlag, New-York, <4>pp.477-498, 1985[4]Hayes-Roth, B. Architectural foundations for real-time performance in intelligent agents, The <5>Journal of Real-time Systems, Vol.2, pp.99-125, 1990[5] Paul Buhler and Jose M. Vidal. Biter: A platform for the teaching and research of Multiagent <6>systems' design using Robocup. LNCS/LNAI Lecture Notes Vol. 2377, Springer-Verlag, Berlin Heidelberg,2002. 발명이 속하는 기술 및 그 분야의 종래기술다수의 에이전트가 함께 어우러져 협조하고 경쟁하는 대화형 컴퓨터 게임과 로봇 축구 시뮬레이션은 전형적인 <7>실시간, 다중 에이전트 환경(real-time, multi-agent environment)이다. 본 발명에서는 이와 같은 동적 환경(dynamic environment)에서 동작하는 에이전트들을 위한 범용 에이전트 구조(general agent architecture)는환경 특성에 의한 제약 조건들(constraints)을 효율적으로 수용할 수 있어야 하고, 구현의 편의성을 제공할 수있어야 한다. 하지만 기존의 에이전트 구조들은 다음과 같은 문제점이 있다.1. 이질적인 복수의 에이전트 구현 언어를 사용한다. : 규칙 또는 논리기반의 에이전트 내부구조를 이용하여 응 <8>용 에이전트를 구현하는 경우, 월드모델과 복잡한 상위 행위들은 논리(logic)에 기초한 지식언어로 표현하는 반면, 하위의 기본 행위, 센서(sensor)와 실행기(effector) 그리고 기타 환경과의 인터페이스들은 객체지향 언어(C++ 또는 Java)로 구현해야 한다. 이러한 문제를 해결하기 위해서는 에이전트의 모든 부분을 하나의 보편적인객체지향 언어로 구현할 수 있는 에이전트 구조가 필요하다.- 2 -공개특허 10-2008-00978192. 행위의 복잡성을 고려한 지원 기능이 충분하지 않다. : 동적 환경들은 다수의 매우 복잡한 에이전트의 행위 <9>들을 요구한다. 따라서 이러한 환경에 적용할 에이전트 구조는 효과적인 행위 표현법(behavior representation)과 효율적인 실행 메커니즘(execution mechanism)을 제공해야 한다. 즉, 에이전트 구조는 짧고 간결한 행위뿐만 아니라 보다 긴 수행 시간을 필요로 하는 복잡한 행위도 기술할 수 있어야 한다. 또 복잡한 다수의 행위들을모듈화하고 이들의 수행관계를 효과적으로 제어할 수 있는 기능도 제공해야 한다.3. 환경의 동적 변화와 실시간성에 충분히 대응하기 어렵다. : 기존의 범용 에이전트 구조들은 대부분 단일 에 <10>이전트, 비 실시간 환경을 대상으로 개발되었기 때문에, 0.1초 보다 짧은 시간 안에 많은 변화가 일어나는 대화형 컴퓨터 게임(interactive computer game)이나 로봇 축구 시뮬레이션과 같은 다중 에이전트, 실시간 환경에는효과적으로 적용하기 어렵다. 실시간 환경에 대응하기 위해서 환경감지로부터 행위실행에 이르는 행위 결정 주기를 가능한 단축할 수 있어야 한다. 또, 하나의 행위가 실행되고 있는 동안에도 지속적으로 환경변화를 감시할수 있어야하고, 환경변화에 따라 행위를 즉시 중단하고 행위전환을 할 수 있어야 한다. 발명이 이루고자 하는 기술적 과제상기와 같이 종래의 기술에 있어서의 문제점들을 해결하기 위해 창안한 것으로, 본 발명에서 제안하는 <11>CAA(Context-sensitive Agent Architecture)는 에이전트의 모든 부분을 하나의 객체 지향 언어로 구현할 수 있는 순수 Java 기반의 범용 에이전트 구조이며, 긴 수행시간을 필요로 하는 복잡한 행위들을 효과적으로 표현하고 수행할 수 있는 기능을 제공한다. 이를 위해 환경 변화에 따라 수행 중이던 행위를 즉각적으로 중단하거나다른 행위로 전환할 수 있는 높은 상황-민감형(context-sensitivity)을 제공한다. 이 밖에도 CAA는 상황에 따른가변적인 목표를 암시하는 행동 모드(behavior mode)를 내부에 저장, 관리함으로써 BDI 구조와 유사한 목표-지향성(goal-orientation)도 가진다. 발명의 구성 및 작용도 1은 발명의 목적을 달성하기 위한 상황 - 민감 형 에이전트의 클래스 다이어그램을 도식화한 것이다. 이 도 <12>면을 참조하여 본 발명을 상세히 설명하면 다음과 같다.행위 라이브러리 <13>행위 라이브러리(behavior library)는 실행 가능한 모든 행위 객체(behavior object)들을 저장, 관리한다. 각 <14>행위는 행위 상태(behavior state)와 행위 유형(behavior type)을 가진다. 하나의 객체로 표현되는 각 행위는실행 상태에 따라 생성(create), 대기(waiting), 수행(executing), 중지(interrupt), 복귀(resume), 종료(finish) 등의 서로 다른 상태들을 가진다. 행위의 유형들로는 내부 행위(internal behavior)와 외부 행위(external behavior), 그리고 대화 행위(conversation)가 있다. 내부 행위는 주로 내부적인 의사결정을 의미하며, 내부 모델(internal model)에 저장된 현재의 목표나 행위모드 등을 갱신하게 된다. 이에 반해, 외부 행위는실제 실행기(effector)를 통해 외부 환경을 변화시키는 행위를 말한다. 또, 대화 행위는 다른 에이전트에게 정보를 제공하거나 서비스를 요청하는 등의 목적으로 행해지는 메시지 송신 행위를 말한다. 매 순간마다 현재 외부 환경의 상태를 나타내는 월드 모델(world model)과 내적 결정사항들을 담고 있는 내부 모델(internal model)을 참조하여 적용 가능한 행위 중 가장 효용성(utility)이 높은 행위가 선택되어 실행하게 된다. 각 행위는다음과 같은 기본 메쏘드(method)들을 포함해야 한다.- applicable(): 행위의 수행 가능 여부를 검사하는 메쏘드이다. 외부 행위와 내부 행위 모두 현재의 월드 모델 <15>과 내부 모델을 참조하여 이 행위가 현재 실행 가능한지 아닌지의 여부를 판단한다.- run(): 실제 수행되어야 할 행위의 몸체부(body)에 해당하는 메쏘드이다. 외부 행위나 대화 행위의 경우, <16>run() 메쏘드는 실행기(effector)내의 기본 동작(primitive action)들을 나타내는 메쏘드들에 대한 호출들을 포함한다. 반면에, 내부 행위의 경우, run() 메쏘드는 단지 내부 모델의 변수 값을 갱신하는 일만 수행한다.- maintainable(): 행위의 계속성 여부를 판단하는 메쏘드이다. 즉, 실행 중인 행위가 상황을 만족하는 지를 주 <17>기적으로 검사하는 역할을 수행한다. 만약 이 행위가 오랜 시간의 실행 시간을 필요로 하는 행위라면 이 행위중간에 이 행위가 계속 실행해야 하는 지를 행위 유지 조건(maintainable)으로 검사하여 계속 유지하여야 한다면 계속 실행을 하지만 그렇지 않을 경우 다시 행위 큐의 실행 가능한 행위들을 다시 검사하여 선택된 행위를실행하게 된다. 하지만 이 경우 지금 선택된 행위가 끝난 후 다시 전에 실행되었던 행위를 다시 실행할 수 있도록 보장해 주어야 한다.- 3 -공개특허 10-2008-0097819- utility(): 변화하는 월드 모델과 내부 모델을 기초로 이 행위의 효용성(utility)을 계산하는 메쏘드이다. <18>행위의 제어는 크게 두 부분으로 나뉜다. 첫째는 실행 중인 행위들에 대해 명시된 바대로 문맥이 지켜지고 있는 <19>지를 수시로 점검하여 문맥이 만족하지 않으면 곧바로 해당 행위의 실행을 중단함으로써 환경변화에 신속히 반응하는 제어(Context-based Preemption)와 효용성을 각 행위에 부여하여 효용성에 따라 행위를 결정하도록 하는제어(Utility-based Preemption)로 나누어 실행하도록 하였다.월드 모델과 내부 모델 <20>월드 모델은 시시각각 변화하는 외부 환경의 상태를 표현한 것이다. 본 발명의 응용 에이전트 환경인 UT 게임이 <21>나 로봇 축구 시뮬레이션은 각각 서버와의 메시지 통신에 의해 각각의 도메인에 부합되는 월드 모델을 구성하고갱신한다. 이와 같이 월드 모델은 적용 영역과 환경에 따라 다르게 구성된다. 따라서 본 발명에서 제안하는 CAA의 월드 모델은 하나의 추상 클래스(abstract class)로 정의하였다. 내부 모델은 다양한 결정 사항이나 히스토리(history) 정보를 저장하고 관리한다. 대표적인 내부적 결정의 하나로 행위 양식(mode)을 말할 수 있다. 행위양식(mode)은 상황 변화에 따른 암시적 목표로 볼 수 있다. 본 발명에서 제안하는 CAA는 이런 일련의 행위를 검사하고 있다. 이는 행위가 상황에 적절하게 대응하여 수행되고 있는지를 알기 위해서다. 이를 위해 내부 모델에히스토리를 두어 이전 상태 정보를 저장하도록 하였다. 이 히스토리 정보는 현재 상태에서 행위가 끝나면 자연적으로 갱신하게 된다.센서와 실행기 <22>센서(sensor)는 외부 환경으로부터 받아들이는 다양한 입력(input) 정보를 바탕으로 월드 모델을 갱신하는 역할 <23>을 한다. 센서로부터 받아들여지는 정보는 시각 정보(VisualInput), 청각 정보(AuralInput), 환경 정보(PhysicalInput), 그리고 그 외의 서버로부터의 정보(ServerInput)이다. 센서를 구현하기 위해 고려하여야 할것은 월드 모델과 내부 모델의 정보를 참조하여 행위를 선택하는 시간과 행위를 실행하는 시간, 센서로부터 상태에 대한 정보를 월드 모델이나 내부 모델에 받아들여지는 시간이 일치하지 않는다는 것이다. 이것은 월드 모델을 갱신할 때 동기화를 시켜줌으로써 해결하였다. CAA를 이용하여 결정된 행위는 실행기(Effector)를 통해 행위를 실행하도록 하였다. 이 행위 객체는 행위 라이브러리에 있는 행위들 중 실행 가능한 행위들을 선택하고 그중 효용성이 높은 행위를 현재 상태를 기준으로 전에 실행되었던 행위와 현재 실행되고 있는 행위 전부를 저장할 수 있도록 큐(Queue)에 저장하도록 하였다. 인터프리터 <24>인터프리터(interpreter)에서는 주로 행위와 관련된 사항을 제어한다. 실시간 환경에서 에이전트가 실행을 시 <25>작하면 인터프리터는 현재의 행위를 결정하여야 한다. 행위는 행위 수행 조건과 행위 유지 조건을 고려하여 선택하게 된다. 인터프리터는 CAA에서 에이전트가 행위를 시작하면 호출되도록 되어 있으며, 현재의 상태와 이전상태를 참조하여 행위 라이브러리에 있는 행위들 중 실행 가능한 행위를 선택하여 그 행위들 중 효용성이 높은행위를 선택하여 실행하거나 양식(mode)에 의해 선택된 행위를 실행한다. 발명의 효과이상에서 설명한 바와 같이 본 발명 동적 환경에서의 상황-민감 형 에이전트 구조는 행위를 임의의 계층으로 구 <26>분하지 않고 각각의 상황에 따라 행위를 수행 가능하도록 하는 구조를 사용함으로써 더욱 자유로운 행위 설계와구현을 가능하게 하는데 효과가 있다. 또한, 에이전트의 모든 부분을 하나의 객체 지향 언어로 구현할 수 있는순수 Java 기반의 범용 에이전트 구조로 일반 프로그래머들이 쉽게 접근할 수 있으며, 긴 수행시간을 필요로 하는 복잡한 행위들을 효과적으로 표현하고 수행할 수 있는 기능을 제공함으로써 다중 에이전트 간의 행위를 효과적으로 제어할 수 있다. 또한, 인공지능을 학습하는 학생들에게 에이전트의 제어에 대한 이해의 효용가치를 극대화하는 효과가 있다.도면의 간단한 설명CAA는 크게 행위 라이브러리( Behavior Library), 월드 모델(World Model), 센서(Sensor)와 <1>실행기(Effector), 그리고 인터프리터(Interpreter) 등으로 구성된다. 도면은 대표적인 CAA의 구성 요소들에대한 클래스 다이어그램(Class Diagram)을 나타낸다.- 4 -공개특허 10-2008-0097819도면 도면1- 5 -공개특허 10-2008-0097819"}
{"patent_id": "10-2007-0043147", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 동적인 환경에서 동작하는 에이전트들을 위한 범용의 에이전트 구조로 CAA는 에이전트의 모든 부분을 하나의 객체 지향 언어로 구현할 수 있는 순수 Java 기반의 범용 에이전트 구조이며, 긴 수행시간을 필요로 하는 복잡한 행위들을 효과적으로 표현하고 수행할 수 있는 기능을 제공한다. 이를 위해 환경 변화에 따라 수행 중이 던 행위를 즉각적으로 중단하거나 다른 행위로 전환할 수 있는 높은 상황-민감성을 제공한다. 또 CAA는 상황에 따른 가변적인 목표를 암시하는 행동 모드를 내부에 저장, 관리함으로써 BDI 구조와 유사한 목표-지향성을 가진 다."}
{"patent_id": "10-2007-0043147", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "이상에서 설명한 바와 같이 본 발명 동적 환경에서의 상황-민감 형 에이전트 구조는 행위를 임의의 계층으로 구 <26> 분하지 않고 각각의 상황에 따라 행위를 수행 가능하도록 하는 구조를 사용함으로써 더욱 자유로운 행위 설계와 구현을 가능하게 하는데 효과가 있다. 또한, 에이전트의 모든 부분을 하나의 객체 지향 언어로 구현할 수 있는 순수 Java 기반의 범용 에이전트 구조로 일반 프로그래머들이 쉽게 접근할 수 있으며, 긴 수행시간을 필요로 하 는 복잡한 행위들을 효과적으로 표현하고 수행할 수 있는 기능을 제공함으로써 다중 에이전트 간의 행위를 효과 적으로 제어할 수 있다. 또한, 인공지능을 학습하는 학생들에게 에이전트의 제어에 대한 이해의 효용가치를 극 대화하는 효과가 있다."}
