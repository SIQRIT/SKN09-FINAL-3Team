{"patent_id": "10-2022-0077471", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0000809", "출원번호": "10-2022-0077471", "발명의 명칭": "코드 정보 제공을 위한 전자 장치 및 그 방법", "출원인": "쿠팡 주식회사", "발명자": "이상용"}}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 의한 코드 정보 제공 방법에 있어서,적어도 하나의 작업자 단말로부터 프로젝트 정보를 획득하는 단계;상기 적어도 하나의 작업자 단말로부터 상기 프로젝트 정보에 대응하는 적어도 두 개의 브랜치(branch) 정보들을 획득하는 단계; 컨플릭트 테스트(conflict test)를 위하여 상기 적어도 두 개의 브랜치 정보의 조합을 기반으로 병합(merge) 조합을 확인하는 단계; 및상기 병합 조합에 대하여 상기 컨플릭트 테스트를 수행한 결과를 기반으로 코드 컨플릭트 정보를 상기 적어도하나의 작업자 단말에 제공하는 단계를 포함하는 코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1 항에 있어서,상기 코드 컨플릭트 정보는 상기 병합 조합에 대하여 발생한 제1 컨플릭트 정보 리스트를 포함하고,상기 컨플릭트 정보 리스트는 상기 병합 조합에 대하여 컨플릭트가 발생한 브랜치 정보, 상기 컨플릭트와 관련된 파일 정보 및 상기 브랜치 정보와 대응하는 태그 정보 중 적어도 일부를 포함하는 코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2 항에 있어서,상기 제1 컨플릭트 정보 리스트에 대응하는 제1 작업자 입력이 획득되는 경우, 상기 제1 작업자 입력에 대응하는 파일 정보에 대하여 컨플릭트가 발생한 코드 부분 정보를 제1 작업자 단말에 제공하는 단계를 더 포함하는코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1 항에 있어서,상기 적어도 하나의 작업자 단말로부터 작업자 식별 정보를 획득하는 단계; 및상기 작업자 식별 정보에 대응하는 제2 컨플릭트 정보 리스트를 상기 적어도 하나의 작업자 단말에 제공하는 단계를 더 포함하는 코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1 항에 있어서,상기 적어도 하나의 작업자 단말로부터 브랜치 식별 정보를 획득하는 단계; 및상기 브랜치 식별 정보에 대응하는 제3 컨플릭트 정보 리스트를 상기 적어도 하나의 작업자 단말에 제공하는 단계를 더 포함하는 코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1 항에 있어서,상기 코드 컨플릭트 정보는 동일 파일에 대한 작업을 수행한 작업자 정보 리스트를 포함하고,상기 작업자 정보 리스트는 상기 파일에 대응하는 브랜치 정보, 상기 브랜치 정보와 대응하는 태그 정보 및 상기 파일에 대응하는 커밋 정보 중 적어도 일부를 포함하는 코드 정보 제공 방법.공개특허 10-2024-0000809-3-청구항 7 제6 항에 있어서,상기 제1 작업자 정보 리스트에 대응하는 제2 작업자 입력이 획득되는 경우, 상기 제2 작업자 입력에 대응하는파일 정보에 대한 코드 변경 정보를 제2 작업자 단말에 제공하는 코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1 항에 있어서,상기 코드 컨플릭트 정보는 마스터 브랜치 정보로부터 파생된 브랜치 정보 리스트를 포함하는 코드 정보 제공방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1 항에 있어서,상기 컨플릭트 테스트를 위하여 상기 프로젝트 정보와 관련된 병합 조합을 확인하는 단계는 상기 적어도 두 개의 브랜치 정보 중 적어도 일부와 관련된 커밋(commit) 정보가 획득되는 경우 수행되는 코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1 항에 있어서,상기 컨플릭트 테스트를 위하여 상기 프로젝트 정보와 관련된 병합 조합을 확인하는 단계는 상기 전자 장치의관리자에 의하여 설정된 주기에 따라 수행되는 코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1 항에 있어서,상기 병합 조합은 상기 적어도 두 개의 브랜치 정보들 상호 간의 병합 조합, 제1 브랜치 정보와 관련된 적어도두 개의 파일 정보들 상호 간의 병합 조합 및 제1 파일 정보에 포함되는 프로그램 코드에 대한 병합 조합 중 적어도 일부를 포함하는 코드 정보 제공 방법."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "하드웨어와 결합되어, 아이템 상세 정보 관련 이미지를 관리하기 위하여 컴퓨터 판독 가능 저장 매체에 저장된컴퓨터 프로그램에 있어서,적어도 하나의 작업자 단말로부터 프로젝트 정보를 획득하고,상기 적어도 하나의 작업자 단말로부터 상기 프로젝트 정보에 대응하는 적어도 두 개의 브랜치(branch) 정보들을 획득하고,컨플릭트 테스트(conflict test)를 위하여 상기 적어도 두 개의 브랜치 정보의 조합을 기반으로 병합(merge) 조합을 확인하고,상기 병합 조합에 대하여 상기 컨플릭트 테스트를 수행한 결과를 기반으로 코드 컨플릭트 정보를 상기 적어도하나의 작업자 단말에 제공하는 컴퓨터 프로그램."}
{"patent_id": "10-2022-0077471", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "코드 정보를 제공하는 전자 장치로서,트랜시버, 명령어를 저장하는 메모리 및 프로세서를 포함하고,상기 트랜시버 및 상기 메모리와 연결되는 상기 프로세서는, 적어도 하나의 작업자 단말로부터 프로젝트 정보를 획득하고,상기 적어도 하나의 작업자 단말로부터 상기 프로젝트 정보에 대응하는 적어도 두 개의 브랜치(branch) 정보들공개특허 10-2024-0000809-4-을 획득하고,컨플릭트 테스트(conflict test)를 위하여 상기 적어도 두 개의 브랜치 정보의 조합을 기반으로 병합(merge) 조합을 확인하고,상기 병합 조합에 대하여 상기 컨플릭트 테스트를 수행한 결과를 기반으로 코드 컨플릭트 정보를 상기 적어도하나의 작업자 단말에 제공하는 전자 장치."}
{"patent_id": "10-2022-0077471", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시는 코드 정보 제공을 위한 전자 장치 및 그 방법에 관한 것으로, 본 개시의 실시 예에 따른 전자 장치에 의한 코드 정보 제공 방법에 있어서, 상기 코드 정보 제공 방법은 적어도 하나의 작업자 단말로부터 프로젝트 정 보를 획득하는 단계, 상기 적어도 하나의 작업자 단말로부터 상기 프로젝트 정보에 대응하는 적어도 두 개의 브 랜치(branch) 정보들을 획득하는 단계, 컨플릭트 테스트(conflict test)를 위하여 상기 적어도 두 개의 브랜치 정보의 조합을 기반으로 병합(merge) 조합을 확인하는 단계 및 상기 병합 조합에 대하여 상기 컨플릭트 테스트를 수행한 결과를 기반으로 코드 컨플릭트 정보를 상기 적어도 하나의 작업자 단말에 제공하는 단계를 포함한다."}
{"patent_id": "10-2022-0077471", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 코드 정보 제공을 위한 전자 장치 및 그 방법에 관한 것이다. 보다 구체적으로, 본 개시는 프로젝트 (project)에 대해서 복수의 작업자가 작성한 코드에 대해 컨플릭트(conflict) 정보를 제공하는 전자 장치 및 그 방법에 관한 것이다."}
{"patent_id": "10-2022-0077471", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "정보 통신 기술의 융합으로 이루어지는 차세대 산업 혁명인 4차 산업 혁명이 핵심 화두로 떠오른 이후, 소프트 웨어 기술의 중요성이 대두되었다. 소프트웨어 기술은 유비쿼터스 컴퓨팅, 사물 인터넷, 자율 주행 자동차, 인 공지능, 로봇, 블록 체인 등 다양한 분야에서 이용될 수 있으며, 시장의 목표 및 사용자의 요구를 반영하여 소 프트웨어 제품을 구현하는 추세에 따라 다수의 개발자들이 투입되는 개발 프로젝트가 성행하고 있다. 다수의 개발자들이 투입되는 개발 프로젝트는 개발자 개인별로 할당된 작업에 대한 결과물을 병합하여 하나의 프로젝트를 완성한다. 그러나, 각 개발자에 의하여 작업된 소스 코드를 병합함에 있어서, 물리적 또는 논리적 컨플릭트 발생 가능성은 현저히 높으며, 다수 개발자에 의한 프로젝트의 생산성을 향상시키기 위한 다양한 방안 들이 제안되고 있다. 대표적으로, 소스 코드 간의 컨플릭트가 발생한 구문을 최신 구문으로 대체하는 소스 코드 자동 병합 기능이 제안되었으나, 개발자의 의도가 자동 병합 결과에 정확하게 반영되기 어렵고, 개발 내용의 손 실이 발생하는 문제점을 가진다. 이에, 개발자의 의도를 정확하게 반영하고, 개발 내용의 손실이 발생하지 않되, 프로젝트의 생산성을 향상시키기 위한 기술에 대한 필요성이 증대하고 있다. 관련하여, KR1020210147354A 및 KR1020210090575A 등의 선행문헌들을 참조할 수 있다."}
{"patent_id": "10-2022-0077471", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상술한 문제점을 해결하기 위하여, 작업자에게 코드 정보를 제공하기 위한 전자 장치 및 그 방법을 제공하는 것을 목적으로 한다. 구체적으로, 다수의 작업자들에 의하여 수행되는 프로젝트와 관련된 작업 과정에서, 프로젝트와 관련된 코드를 각 작업자가 각자의 브랜치(branch)에서 수정 및 업데이트를 수행하게 되는데, 이에 따라 복수의 작업자가 동일 한 프로젝트의 코드를 수정함에 따라 컨플릭트(conflict)가 발생할 수 있고, 이와 같은 컨플릭트 발생 여부는 서비스 배포를 위한 빌드 과정에서 머지(merge)를 수행함으로써 확인 가능 하였으나, 본 개시는 각 브랜치의 코 드에 대한 컨플릭트 여부를 주기적으로 모니터링하고, 감지된 컨플릭트에 대한 정보를 작업자들에게 제공하여 서비스 배포 이전에도 컨플릭트 문제를 해결할 수 있는 전자 장치 및 그 방법을 제공하는 것을 목적으로 한다. 또한, 본 개시는 프로젝트와 관련된 작업 현황 정보를 작업자들에게 제공하기 위한 전자 장치 및 그 방법을 제 공하는 것을 목적으로 한다. 본 개시에 의해 이루고자 하는 기술적 과제는 상술한 바와 같은 기술적 과제들로 한정되지 않으며, 이하의 실시 예들로부터 또 다른 기술적 과제들이 유추될 수 있다."}
{"patent_id": "10-2022-0077471", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 실시 예에 따른 전자 장치에 의한 코드 정보 제공 방법에 있어서, 상기 코드 정보 제공 방법은 적어 도 하나의 작업자 단말로부터 프로젝트 정보를 획득하는 단계, 상기 적어도 하나의 작업자 단말로부터 상기 프로젝트 정보에 대응하는 적어도 두 개의 브랜치(branch) 정보들을 획득하는 단계, 컨플릭트 테스트(conflict test)를 위하여 상기 적어도 두 개의 브랜치 정보의 조합을 기반으로 병합(merge) 조합을 확인하는 단계 및 상 기 병합 조합에 대하여 상기 컨플릭트 테스트를 수행한 결과를 기반으로 코드 컨플릭트 정보를 상기 적어도 하 나의 작업자 단말에 제공하는 단계를 포함한다. 예로서, 상기 코드 컨플릭트 정보는 상기 병합 조합에 대하여 발생한 제1 컨플릭트 정보 리스트를 포함하고, 상 기 컨플릭트 정보 리스트는 상기 병합 조합에 대하여 컨플릭트가 발생한 브랜치 정보, 상기 컨플릭트와 관련된 파일 정보 및 상기 브랜치 정보와 대응하는 태그 정보 중 적어도 일부를 포함한다. 예로서, 상기 코드 정보 제공 방법은 상기 제1 컨플릭트 정보 리스트에 대응하는 제1 작업자 입력이 획득되는 경우, 상기 제1 작업자 입력에 대응하는 파일 정보에 대하여 컨플릭트가 발생한 코드 부분 정보를 제1 작업자 단말에 제공하는 단계를 더 포함한다. 예로서, 상기 코드 정보 제공 방법은 상기 적어도 하나의 작업자 단말로부터 작업자 식별 정보를 획득하는 단계 및 상기 작업자 식별 정보에 대응하는 제2 컨플릭트 정보 리스트를 상기 적어도 하나의 작업자 단말에 제공하는 단계를 더 포함한다. 예로서, 상기 코드 정보 제공 방법은 상기 적어도 하나의 작업자 단말로부터 브랜치 식별 정보를 획득하는 단계 및 상기 브랜치 식별 정보에 대응하는 제3 컨플릭트 정보 리스트를 상기 적어도 하나의 작업자 단말에 제공하는 단계를 더 포함한다. 예로서, 상기 코드 컨플릭트 정보는 동일 파일에 대한 작업을 수행한 작업자 정보 리스트를 포함하고, 상기 작 업자 정보 리스트는 상기 파일에 대응하는 브랜치 정보, 상기 브랜치 정보와 대응하는 태그 정보 및 상기 파일 에 대응하는 커밋 정보 중 적어도 일부를 포함한다, 예로서, 상기 코드 정보 제공 방법은 상기 제1 작업자 정보 리스트에 대응하는 제2 작업자 입력이 획득되는 경 우, 상기 제2 작업자 입력에 대응하는 파일 정보에 대한 코드 변경 정보를 제2 작업자 단말에 제공한다. 예로서, 상기 코드 컨플릭트 정보는 마스터 브랜치 정보로부터 파생된 브랜치 정보 리스트를 포함한다. 예로서, 상기 컨플릭트 테스트를 위하여 상기 프로젝트 정보와 관련된 병합 조합을 확인하는 단계는 상기 적어 도 두 개의 브랜치 정보 중 적어도 일부와 관련된 커밋(commit) 정보가 획득되는 경우 수행된다. 예로서, 상기 컨플릭트 테스트를 위하여 상기 프로젝트 정보와 관련된 병합 조합을 확인하는 단계는 상기 전자 장치의 관리자에 의하여 설정된 주기에 따라 수행된다. 예로서, 상기 병합 조합은 상기 적어도 두 개의 브랜치 정보들 상호 간의 병합 조합, 제1 브랜치 정보와 관련된 적어도 두 개의 파일 정보들 상호 간의 병합 조합 및 제1 파일 정보에 포함되는 프로그램 코드에 대한 병합 조 합 중 적어도 일부를 포함한다. 본 개시의 실시 예에 따라 하드웨어와 결합되어, 코드 정보를 제공하기 위하여 컴퓨터 판독 가능 저장 매체에 저장된 컴퓨터 프로그램에 있어서, 상기 컴퓨터 프로그램은 적어도 하나의 작업자 단말로부터 프로젝트 정보를 획득하고, 상기 적어도 하나의 작업자 단말로부터 상기 프로젝트 정보에 대응하는 적어도 두 개의 브랜치 정보 들을 획득하고, 컨플릭트 테스트를 위하여 상기 적어도 두 개의 브랜치 정보의 조합을 기반으로 병합 조합을 확 인하고, 상기 병합 조합에 대하여 상기 컨플릭트 테스트를 수행한 결과를 기반으로 코드 컨플릭트 정보를 상기 적어도 하나의 작업자 단말에 제공한다. 본 개시의 실시 예에 따라 코드 정보를 제공하는 전자 장치로서, 상기 전자 장치는 트랜시버, 명령어를 저장하 는 메모리 및 프로세서를 포함하고, 상기 트랜시버 및 상기 메모리와 연결되는 상기 프로세서는, 적어도 하나의 작업자 단말로부터 프로젝트 정보를 획득하고, 상기 적어도 하나의 작업자 단말로부터 상기 프로젝트 정보에 대 응하는 적어도 두 개의 브랜치 정보들을 획득하고, 컨플릭트 테스트를 위하여 상기 적어도 두 개의 브랜치 정보 의 조합을 기반으로 병합 조합을 확인하고, 상기 병합 조합에 대하여 상기 컨플릭트 테스트를 수행한 결과를 기 반으로 코드 컨플릭트 정보를 상기 적어도 하나의 작업자 단말에 제공한다."}
{"patent_id": "10-2022-0077471", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시에 따른 코드 정보 제공을 위한 전자 장치 및 그 방법은 프로젝트와 관련된 복수의 프로그램 코드들에 대해 서비스 배포를 위한 빌드 과정 이전에 프로젝트와 관련된 각 코드의 개별적인 수정에 의하여 발생하는 컨 플릭트 정보를 미리 확인하고, 이를 작업자에게 제공함으로써, 컨플릭트 상황을 미리 통지하여 선제적으로 컨플릭트를 해소하고, 프로젝트의 생산성을 향상시킬 수 있다. 또한, 본 개시에 따른 코드 정보 제공을 위한 전자 장치 및 그 방법은 프로젝트와 관련된 작업 현황을 작업자에 게 제공함으로써, 프로젝트 진행 상황에 대한 정보를 작업자에게 직관적으로 제공할 수 있다. 본 개시의 효과는 상술한 효과에 제한되지 않으며, 언급되지 않은 또 다른 효과들은 청구범위의 기재로부터 당 해 기술 분야의 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0077471", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서, 본 개시의 기술 분야에서 통상의 지식을 가진 자가 본 발명을 용이하게 실시할 수 있을 정도로, 본 개시의 실시 예들은 명확하고 상세하게 기재될 것이다. 본 명세서에서 사용된 용어는 실시 예들을 설명하기 위한 것이며, 본 개시를 제한하고자 하는 것은 아니다. 다 른 정의가 없다면, 본 명세서에서 사용되는 모든 용어(기술 및 과학적 용어를 포함)는 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자에게 공통적으로 이해될 수 있는 의미로 사용될 수 있을 것이나, 이는 당 분야 에 종사하는 기술자의 의도 또는 판례, 새로운 기술의 출현 등에 따라 달라질 수 있다. 또한, 일반적으로 사용되는 사전에 정의되어 있는 용어들은 명백하게 특별히 정의되어 있지 않는 한 이상적으로 또는 과도하게 해석되지 않는다. 특정한 경우 출원인이 임의로 선정한 용어도 있으며, 이 경우 해당되는 설명 부분에서 상세히 그 의미를 기재할 것이다. 따라서 본 개시에서 사용되는 용어는 단순한 용어의 명칭이 아닌, 그 용어가 가지는 의미와 본 개시의 전반에 걸친 내용을 토대로 정의되어야 한다. 본 명세서 전체에서 어떤 부분이 어떤 구성요소를 “포함”한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라, 다른 구성요소를 더 포함할 수 있음을 의미한다. 또한, 본 명세서에서 사용된 단수형은 문구에서 특별히 언급하지 않는 한 복수형도 포함한다. 또한, 명세서 전체에서 기재된 “a, b, 및 c 중 적어도 하나”의 표현은, ‘a 단독’, ‘b 단독’, ‘c 단독’, ‘a 및 b’, ‘a 및 c’, ‘b 및 c’, 또는 ‘a,b,c 모두’를 포괄할 수 있다. 한편, 본 명세서에서 사용되는 “제1 및/또는 제2” 등의 용어는 다양한 구성요소들을 설명하기 위하여 사용될 수 있으나, 이는 하나의 구성요소를 다른 구성요소로부터 구별하기 위한 목적으로만 사용될 뿐, 해당 용어로 지 칭되는 구성요소로 한정하기 위한 것은 아니다. 예를 들어, 본 발명의 권리 범위를 벗어나지 않는 한, 제1 구성 요소는 제2 구성요소로 명명될 수 있으며, 제2 구성요소 또한 제1 구성요소로 명명될 수 있다. 또한, 본 명세서에 기재된 “…부”, “…모듈” 등의 용어는 적어도 하나의 기능이나 동작을 처리하는 단위를 의미하며, 이는 하드웨어 또는 소프트웨어로 구현되거나 하드웨어와 소프트웨어의 결합으로 구현될 수 있다. 또 한, 본 개시의 실시 예는 기능적인 블록 구성들 및 다양한 처리 단계들로 나타내어질 수 있다. 이러한 기능 블 록들은 특정 기능들을 실행하는 다양한 개수의 하드웨어 또는/및 소프트웨어 구성들로 구현될 수 있다. 예를 들 어, 본 개시의 실시 예는 하나 이상의 마이크로프로세서의 제어 또는 다른 제어 장치들에 의해서 다양한 기능들 을 실행할 수 있는, 메모리, 프로세싱, 로직(logic), 룩 업 테이블(look-up table) 등과 같은 직접 회로 구성들 을 채용할 수 있다. 본 명세서에 개시된 구성 요소들이 소프트웨어 프로그래밍 또는 소프트웨어 요소들로 실행될 수 있는 것과 유사 하게, 본 개시의 실시 예는 데이터 구조, 프로세스들, 루틴들 또는 다른 프로그래밍 구성들의 조합으로 구현되 는 다양한 알고리즘을 포함하여, C, C++, 자바(Java), 어셈블러(assembler) 등과 같은 프로그래밍 또는 스크립 팅 언어로 구현될 수 있다. 기능적인 측면들은 하나 이상의 프로세서들에서 실행되는 알고리즘으로 구현될 수 있다. 또한, 본 실시 예는 전자적인 환경 설정, 신호 처리, 및 데이터 처리 중 적어도 하나를 위하여 종래 기술 을 채용할 수 있다.“매커니즘”, “요소”, “수단”, “구성”과 같은 용어는 넓게 사용될 수 있으며, 기계적 이고 물리적인 구성들로 한정되는 것은 아니다. 상기 용어는 프로세서 등과 연계하여 소프트웨어의 일련의 처리 들(routines)의 의미를 포함할 수 있다. 본 명세서에 첨부된 처리 흐름도 도면들의 각 블록과 흐름도 도면들의 조합들은 컴퓨터 프로그램 인스트럭션들 에 의해 수행될 수 있다. 이들 컴퓨터 프로그램 인스트럭션들은 범용 컴퓨터, 특수용 컴퓨터 또는 기타 프로그 램 가능한 데이터 프로세싱 장비의 프로세서에 탑재될 수 있으므로, 컴퓨터 또는 기타 프로그램 가능한 데이터 프로세싱 장비의 프로세서를 통해 수행되는 그 인스트럭션들이 흐름도 블록(들)에서 설명된 기능들을 수행하는 수단을 생성하게 된다. 이들 컴퓨터 프로그램 인스트럭션들은 특정 방식으로 기능을 구현하기 위해 컴퓨터 또는 기타 프로그램 가능한 데이터 프로세싱 장비를 지향할 수 있는 컴퓨터 이용 가능 또는 컴퓨터 판독 가능 메모리에 저장되는 것이 가능 하며, 그 컴퓨터 이용가능 또는 컴퓨터 판독 가능 메모리에 저장된 인스트럭션들은 흐름도 블록(들)에서 설명된 기능을 수행하는 인스트럭션 수단을 내포하는 제조 품목을 생산하는 것도 가능하다. 컴퓨터 프로그램 인스트럭션들은 컴퓨터 또는 기타 프로그램 가능한 데이터 프로세싱 장비 상에 탑재되는 것도 가능하므로, 컴퓨터 또는 기타 프로그램 가능한 데이터 프로세싱 장비 상에서 일련의 동작 단계들이 수행되어 컴퓨터로 실행되는 프로세스를 생성해서 컴퓨터 또는 기타 프로그램 가능한 데이터 프로세싱 장비를 수행하는 인스트럭션들은 흐름도 블록(들)에서 설명된 기능들을 실행하기 위한 단계들을 제공하는 것도 가능하다. 또한, 각 블록은 특정된 논리적 기능(들)을 실행하기 위한 하나 이상의 실행 가능한 인스트럭션들을 포함하는 모듈, 세그먼트 또는 코드의 일부를 나타낼 수 있다. 또, 몇 가지 대체 실행 예들에서는 블록들에서 언급된 기 능들이 순서를 벗어나서 발생하는 것도 가능할 수 있다. 예컨대, 잇달아 도시되어 있는 두 개의 블록들은 사실 실질적으로 동시에 수행되는 것도 가능하고 또는 그 블록들이 때때로 해당하는 기능에 따라 역순으로 수행되는 것도 가능하다. 본 명세서에서 언급되는 \"전자 장치\" 또는 \"단말\"은 네트워크를 통해 서버나 타 단말에 접속할 수 있는 컴퓨터 나 휴대용 단말로 구현될 수 있다. 여기서, 컴퓨터는 예를 들어, 웹 브라우저(WEB Browser)가 탑재된 노트북, 데스크톱(desktop), 랩톱(laptop) 등을 포함하고, 휴대용 단말은 예를 들어, 휴대성과 이동성이 보장되는 무선 통신 장치로서, IMT(International Mobile Telecommunication), CDMA(Code Division Multiple Access), W- CDMA(W-Code Division Multiple Access), LTE(Long Term Evolution) 등의 통신 기반 단말, 스마트폰, 태블릿 PC 등과 같은 모든 종류의 핸드헬드(Handheld) 기반의 무선 통신 장치를 포함할 수 있다. 또한, 본 명세서에서 언급되는 \"전자 장치\" 또는 \"단말\"은 프로세서, 프로그램 데이터를 저장하고 실행하는 메모리, 디스크 드라이브 와 같은 영구 저장부(permanent storage), 외부 장치와 통신하는 통신 포트, 터치 패널, 키(key), 버튼 등과 같 은 사용자 인터페이스 장치 등도 포함할 수 있다. 본 개시에 있어서, 소프트웨어 모듈 또는 알고리즘으로 구현되는 방법들은 프로세서상에서 실행 가능한 컴퓨터 가 읽을 수 있는 코드들 또는 프로그램 명령들로서 컴퓨터가 읽을 수 있는 기록 매체 상에 저장될 수 있다. 여 기서 컴퓨터가 읽을 수 있는 기록 매체는 마그네틱 저장 매체(예컨대, ROM(read-only memory), RAM(random- Access memory), 플로피 디스크, 하드 디스크 등) 및 광학적 판독 매체(예컨대, 시디롬(CD-ROM), 디브이디(DVD: Digital Versatile Disc)) 등을 포함할 수 있다. 컴퓨터가 읽을 수 있는 기록 매체는 네트워크로 연결된 컴퓨 터 시스템들에 분산되어 실행될 수 있다. 이하, 본 개시의 다양한 실시 예들은 첨부된 도면을 참조하여 상세하게 설명될 것이다. 실시 예를 설명함에 있 어서 본 발명이 속하는 기술 분야에 익히 알려져 있고 본 발명과 직접적으로 관련이 없는 기술 내용에 대해서는 설명을 생략할 것이다. 이는 불필요한 설명을 생략함으로써 본 발명의 요지를 흐리지 않고 더욱 명확히 전달하 기 위함이다. 마찬가지 이유로 첨부 도면에 있어서 일부 구성요소는 과장되거나 생략되거나 개략적으로 도시되 었다. 또한, 각 구성요소의 크기는 실제 크기를 전적으로 반영하는 것이 아니다. 본 명세서에서, 전문에 걸쳐 동일한 참조 부호는 동일한 또는 대응하는 구성 요소를 지칭할 수 있다.도 1은 본 개시의 실시 예에 따른 코드 정보 제공을 위한 시스템을 나타내기 위한 도면이다. 도 1을 참조하 면, 본 개시의 실시 예에 따른 코드 정보 제공을 위한 시스템은 전자 장치 및 제1 내지 제n 작업자 단 말(120_1, 120_2, …, 120_n)을 포함할 수 있다. 전자 장치는 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n)과 상호간 네트워크를 통하여 통신을 수행하고, 정보를 교환할 수 있다. 예로서, 네트워크는 PAN(Personal Area Network), LAN(Local Area Network), CAN(Campus Area Network), MAN(Metropolitan Area Network), WAN(Wide Area Network), BBN(Broad Band Network), 인터넷 중 적어도 하나 의 네트워크를 포함할 수 있다. 또한, 네트워크는 버스 네트워크, 스타 네트워크, 링 네트워크, 메쉬 네트워크, 스타-버스 네트워크, 트리 또는 계층적(Hierarchical) 네트워크 등을 포함하는 네트워크 토폴로지 중 적어도 하 나를 포함할 수 있다. 본 개시의 실시 예에서, 전자 장치 및 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n)의 상호간 통신 방식은 상술한 네트워크의 종류에 제한되지 않으며, 네트워크가 포함할 수 있는 통신망을 활용하는 통신 방식 뿐 아니라 기기간의 근거리 무선 통신 또한 포함할 수 있다. 본 개시의 실시 예에서, 전자 장치는 트랜시버, 메모리 및 프로세서를 포함할 수 있다. 또한, 전자 장치 는 적어도 하나의 기능이나 동작을 처리하는 단위를 의미하며, 이는 하드웨어나 소프트웨어, 또는, 하드웨 어 및 소프트웨어의 결합으로 구현될 수 있다. 실시 예에서, 전자 장치는 네트워크 서버로 구현되는 다수 의 컴퓨터 시스템 또는 컴퓨터 소프트웨어를 포함할 수 있다. 예로서, 전자 장치 는 인트라넷 또는 인터넷 과 같은 컴퓨터 네트워크를 통하여 다른 네트워크 서버와 통신할 수 있는 하위 장치와 연결되어 작업 수행 요청 을 접수하고, 그에 대한 작업을 수행하여 수행 결과를 제공하는 컴퓨터 시스템 및 컴퓨터 소프트웨어를 지칭할 수 있다. 이외에도, 전자 장치는 네트워크 서버 상에서 동작할 수 있는 일련의 응용 프로그램 및 내부에 구축되어 있는 각종 데이터베이스를 포함하는 광의의 개념으로 이해될 수 있다. 예로서, 전자 장치는 도스(DOS), 윈 도우(Windows), 리눅스(Linux), 유닉스(Unix), 또는 맥OS(MacOS) 등의 운영 체제에 따라 다양하게 제공되는 네 트워크 서버 프로그램을 이용하여 구현될 수 있다. 본 개시의 실시 예에서, 전자 장치는 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나 로부터 프로젝트와 관련된 프로그램 코드를 획득할 수 있다. 프로그램 코드는 프로젝트와 관련된 파일 정보에 포함될 수 있으며, 복수의 코드 라인들을 포함할 수 있다. 전자 장치는 프로젝트와 관련된 복수의 프로그 램 코드들에 대한 병합(merge) 수행 이전에 프로그램 코드에 대한 컨플릭트(conflict) 테스트를 주기적으로 수 행하고, 컨플릭트 테스트의 결과를 기반으로 코드 컨플릭트 정보를 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나에 제공할 수 있다. 한편, 실시 예에서, 각 작업자는 각 작업자 단말(120_1, 120_2, …, 또는 120_n)에서 작업을 할 수 있으나 이에 제한되지 않으며, 프로젝트와 관련된 서버에서 작업자와 대응되는 브랜치에 작업한 코드를 업데이트 할 수 있다. 이와 같이 프로젝트와 관련된 전체적인 브랜치 목록을 확인하고 이에 대해서 컨플릭트 여부를 미리 확인 함으로써 작업자들의 수정에 따라 컨플릭트 발생 여부를 확인할 수 있고, 이를 통해 원하지 않는 컨플릭트를 수 정할 수 있다. 본 개시의 실시 예에 따라 전자 장치로부터 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어 도 하나에 제공되는 코드 컨플릭트 정보는 코드 컨플릭트가 발생한 브랜치(branch) 정보, 코드 컨플릭트가 발생 한 파일(file) 정보, 코드 컨플릭트가 발생한 파일에 대한 작업을 수행한 작업자 정보, 코드 컨플릭트가 발생한 코드 부분 정보, 수정 작업이 수행된 코드 변경 정보, 브랜치 정보와 대응하는 태그 정보, 파일 정보와 대응하 는 커밋(commit) 정보 중 적어도 일부를 포함할 수 있다. 커밋 작업은 추가된 파일 정보 또는 편집이 이루어진 파일 정보를 저장소에 저장하는 작업을 의미할 수 있으며, 본 개시의 실시 예에서, 커밋 정보는 커밋 작업과 관 련된 정보를 포함할 수 있다. 전자 장치로부터 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적 어도 하나에 제공되는 코드 컨플릭트 정보에 포함되는 세부 정보는 전자 장치가 제공하는 기능에 따라 상 이할 수 있으며, 전자 장치의 기능에 따라 제공되는 코드 컨플릭트 정보는 후술할 도 4a 내지 도 6에서 상 세히 설명한다. 도시되지 않았으나, 본 개시의 실시 예에서 코드 정보 제공을 위한 시스템은 전자 장치로부터 제공된 프로젝트 관련 정보를 저장하기 위한 서버를 더 포함할 수 있다. 서버에 저장되는 프로젝트 관련 정보는 제1 내 지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나로부터 프로젝트와 관련된 프로그램 코드, 각 프 로그램 코드와 관련된 작업 정보 및 전자 장치에 의하여 도출된 코드 컨플릭트 정보 중 적어도 일부를 포 함할 수 있다. 실시 예에서, 서버는 저장되는 정보에 대한 보안을 위한 구성일 수 있으며, 전자 장치에 포함되는 구성이거나, 전자 장치와 독립된 구성일 수 있다. 한편, 전자 장치는 커밋 정보를 기반으로 푸시 작업을 수행할 수 있다. 푸시 작업은 추가된 파일 정보 또는 편집이 이루어진 파일 정보를 원격 저장소에 저장하는 작업을 의미할 수 있으며, 실시 예에서, 원격 저장소는 상술한 서버일 수 있다. 실시 예에서, 서버는 전자 장치로부터 획득한 프로젝트 관련 정보를 기반으로 도출된 프로젝트 히스토리 정보를 더 저장할 수 있다. 또한, 서버는 작업자의 요청에 응답하여 저장된 프로젝트 관련 정보 중 적어도 일부 를 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나에 제공할 수 있다. 또한, 본 개시의 실 시 예에서, 전자 장치는 프로젝트와 관련된 작업 현황 정보를 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나에 제공할 수 있다. 프로젝트와 관련된 작업 현황 정보는 서버에 저장된 프로젝트 관 련 정보 및 프로젝트 히스토리 정보로부터 도출될 수 있으며, 작업자의 요청에 응답하여 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나에 제공될 수 있다. 본 개시의 실시 예에 따르면, 프로젝트와 관련된 복수의 프로그램 코드들에 대한 병합 수행 이전에 각 코드의 개별적인 수정에 의하여 발생하는 컨플릭트 정보를 작업자에게 제공함으로써, 컨플릭트 상황을 미리 통지하여 선제적으로 컨플릭트를 해소하여 프로젝트의 생산성을 향상시킬 수 있다. 또한, 본 개시에 따른면, 프로젝트와 관련된 작업 현황을 작업자에게 제공함으로써, 프로젝트 진행 상황에 대한 정보를 작업자에게 직관적으로 제공 할 수 있다. 본 개시의 실시 예에 따른 코드 정보를 제공하기 위한 방법에 대한 상세한 설명은 도 2 내지 도 7 에서 후술한다. 도 2는 본 개시의 실시 예에 따라 코드 정보가 제공되는 프로젝트의 자료 구조를 나타내기 위한 도면 이다. 도 2를 참조하면, 하나의 프로젝트로부터 마스터 브랜치(master branch)(MB), 개발 브랜치(develop branch)(DB), 제1 피처 브랜치(feature branch)(FB1) 및 제2 피처 브랜치(FB2)가 파생될 수 있다. 다만, 도 2 에 도시된 자료 구조는 본 개시의 이해를 돕기 위한 일 예일 뿐, 본 개시의 실시 예에 따라 코드 정보가 제 공되는 자료 구조를 제한하는 것은 아니며, 자료 구조는 프로젝트의 목표에 따라 적응적으로 구축 될 수 있다. 마스터 브랜치(MB)는 프로젝트와 관련된 배포(release) 이력을 관리하기 위한 브랜치일 수 있으며, 배포 가능한 상태의 파일 세트를 관리할 수 있다. 도 2에는 제1 마스터 파일 세트 및 제2 마스터 파일 세트 를 포함한 마스터 브랜치(MB)가 도시된 바, 제1 마스터 파일 세트로부터 구축되는 제1 프로그램 또는 제2 마스터 파일 세트로부터 구축되는 제2 프로그램이 배포될 수 있으며, 제2 프로그램은 제1 프로그램의 또 다른 버전일 수 있다. 제1 마스터 파일 세트 및 제2 마스터 파일 세트에 포함되는 복수의 파일들 각각은 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n)에 의하여 커밋된 파일일 수 있다. 개발 브랜치(DB)는 프로젝트와 관련된 다양한 기능 개발을 위한 브랜치들에 대한 병합을 수행하기 위한 브 랜치일 수 있다. 디밸롭 브랜치(DB)와 관련된 파일 세트가 배포될 프로그램과 관련된 모든 기능을 포함하고, 버 그가 수정되어 배포 가능한 안정적인 상태인 경우, 디밸롭 브랜치(DB)는 마스터 브랜치(MB)에 병합될 수 있다. 도 2의 제1 내지 제3 개발 파일 세트(211, 212, 213) 각각은 제2 마스터 파일 세트와 대응하는 프로그램과 관련된 다양한 기능 개발을 위한 복수의 파일들을 포함할 수 있으며, 실시 예에서, 제2 개발 파일 세트는 제1 개발 파일 세트로부터, 제3 개발 파일 세트는 제2 개발 파일 세트 업데이트된 버전의 파일 세트일 수 있거나, 제1 내지 제3 개발 파일 세트(211, 212, 213) 각각이 제2 마스터 파일 세트와 대응하는 프로그램과 관련된 독립된 기능을 구현하기 위한 파일 세트일 수 있다. 제1 내지 제3 개발 파일 세트(211, 212, 213) 각각에 포함되는 복수의 파일들 각각은 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n)에 의하여 커 밋된 파일일 수 있다. 제1 피처 브랜치(FB1) 및 제2 피처 브랜치(FB2)는 프로젝트와 관련된 새로운 기능 개발 및 버그 수정을 위 하여 개발 브랜치(DB)로부터 분기된 브랜치일 수 있다. 제1 피처 브랜치(FB1) 및 제2 피처 브랜치(FB2)와 관련 된 작업이 완료되는 경우, 제1 피처 브랜치(FB1) 및 제2 피처 브랜치(FB2)와 관련된 파일 세트는 개발 브랜치 (DB)로 병합될 수 있다. 도 2는 제2 피처 브랜치(FB2)와 관련된 작업이 완료되고, 제2-1 피처 파일 세트(212_1) 및 제2-2 피처 파일 세트(212_2) 중 적어도 하나가 개발 브랜치(DB)에 병합되고, 제1 피처 브랜치(FB1)와 관련 된 작업이 진행 중인 경우의 자료 구조를 도시한다. 이외에도, 본 개시의 실시 예에 따른 프로젝트의 자료 구조는 제품 출시 버전을 준비하기 위하여 개발 브랜치(DB)로부터 분기하는 배포 브랜치(release branch) 및 배포한 제품 버전에 긴급한 수정 사항이 발생하는 경우, 이를 처리하기 위하여 마스터 브랜치(MB)에서 분기하는 핫픽스 브랜치(hotfix branch) 중 적어도 하나를 더 포함할 수 있다. 본 명세서에서 지칭하는 브랜치 정보는 프로젝트와 관련된 마스터 브랜치(MB), 개발브랜치(DB), 피처 브랜치(FB1, FB2), 배포 브랜치 및 핫픽스 브랜치 중 적어도 하나와 대응하는 정보일 수 있으 며, 브랜치 정보는 해당 브랜치와 관련된 파일 세트에 대한 정보를 포함할 수 있다. 또한, 본 명세서에서 지칭 하는 파일 정보는 파일 세트에 포함되는 적어도 하나의 파일에 대한 정보를 포함할 수 있으며, 파일 정보는 해 당 파일과 관련된 프로그램 코드에 대한 정보를 포함할 수 있다. 한편, 실시 예에서, 프로젝트 내의 브랜치는 작업자에 따라 다른 구조를 가질 수 있으며, 본 명세서의 실시 예 는 해당 프로젝트와 관련된 전체 브랜치 목록을 확인하고, 브랜치 목록의 각 브랜치들의 조합에 대해서 각각 머 지(merge)를 선제적으로 수행함으로써 컨플릭트 발생 여부를 미리 확인할 수 있다. 도 3은 본 개시의 실시 예에 따른 코드 정보 제공 방법을 설명하기 위한 순서도이다. S310 단계에서, 본 개시의 실시 예에 따른 전자 장치는 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나로부터 프로젝트 정보를 획득할 수 있다. 프로젝트 정보는 해당 프로젝트와 관련된 기초 파일 정보 세트를 포함할 수 있으며, 기초 파일 정보 세트는 프로젝트와 관련된 프로그램을 구현하기 위한 복수 의 프로그램 코드들을 포함할 수 있다. S320 단계에서, 본 개시의 실시 예에 따른 전자 장치는 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나로부터 프로젝트와 관련된 적어도 두 개의 브랜치 정보를 획득할 수 있다. 브랜치 정보는 기초 파일 정보 세트에 포함되는 적어도 하나의 파일 정보에 대한 수정이 이루어진 파일에 대응하는 브랜치 정 보 및 프로젝트와 관련하여 새로 생성된 파일에 대응하는 브랜치 정보 중 적어도 하나일 수 있으며, 해당 브랜 치 정보에 대응하는 파일 정보 세트를 포함할 수 있다. 파일 정보 세트는 복수의 파일 정보들을 포함할 수 있으 며, 복수의 파일 정보들 각각은 복수의 코드 라인을 포함하는 프로그램 코드를 포함할 수 있다. S330 단계에서, 본 개시의 실시 예에 따른 전자 장치는 컨플릭트 테스트를 위하여 프로젝트와 관련된 병합 조합을 확인할 수 있다. 병합 조합은 배포를 위하여 프로그램 코드에 대한 병합이 예상되는 개체들의 조합일 수 있으며, 실시 예에서, 병합 조합은 적어도 두 개의 브랜치 정보들 상호 간의 병합 조합, 하나의 브랜치 정보와 관련된 적어도 두 개의 파일 정보들 상호 간의 병합 조합 및 하나의 파일 정보에 포함되는 프로그램 코드에 대 한 병합 조합 중 적어도 일부를 포함할 수 있다. 구체적으로, 적어도 두 개의 브랜치 정보들 상호 간이 병합 조합은 서로 다른 기능을 구현하기 위한 제1 브랜치 및 제2 브랜치 조합일 수 있다. 하나의 브랜치 정보와 관련된 적어도 두 개의 파일 정보들 상호 간의 병합 조합 은 제1 브랜치 정보와 관련된 제1 파일 정보 및 제2 파일 정보 조합일 수 있다. 한편, 하나의 파일 정보에 포함 되는 프로그램 코드에 대한 병합 조합은 제1 파일 정보에 포함되는 프로그램 코드에 포함되는 제1 코드 라인 및 제2 코드 라인일 수 있다. 본 개시의 실시 예에 따라 전자 장치로부터 확인되는 병합 조합은 브랜치 상호 간, 파일 상호 간 또는 코드 라인 상호 간 물리적 또는 논리적 연관성이 있는 개체들에 대한 조합일 수 있다. S340 단계에서, 본 개시의 실시 예에 따른 전자 장치는 확인된 병합 조합에 대한 컨플릭트 테스트를 수행 할 수 있다. 컨플릭트 테스트는 병합 조합에 대한 물리적 또는 논리적 컨플릭트 발생 여부를 확인하는 방식으로 수행될 수 있다. 물리적 컨플릭트란, 동일 위치의 코드 라인에 대하여 다수의 작업자들의 수정 작업이 수행된 경우 발생할 수 있는 컨플릭트일 수 있으며, 논리적 컨플릭트란, 상이한 위치의 적어도 두 개의 코드 라인 간의 연관성에 의하여 발생할 수 있는 컨플릭트일 수 있다. 실시 예에서, 전자 장치 S330 단계에서 확인된 모든 병합 조합에 대한 컨플릭트 테스트를 수행할 수 있다. 한편, 일부 실시 예에서, 전자 장치는 컨플릭트 테스트를 수행함에 있어서, 부하를 줄이기 위하여 선별된 일부 병합 조합에 대한 컨플릭트 테스트를 수행할 수 있다. 구체적으로, S320 단계에서 제1 브랜치 정보 및 제2 브랜치 정보가 획득되고, 제1 브랜치 정보는 제1 브랜치와 관련된 제1 파일에 대한 수정 정보를 포함하고, 제2 브랜치 정보는 제2 브랜치와 관려된 제2 파일에 대한 수정 정보를 포함하는 경우, 전자 장치는 제1 브랜치 및 제2 브랜치와 관련된 병합 조합을 선별하여 컨플릭트 테스트를 수행할 수 있다. S350 단계에서, 본 개시의 실시 예에 따른 전자 장치는 S340 단계에서 수행된 컨플릭트 테스트의 결과를 기반으로 코드 컨플릭트 정보를 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나에 제공할 수 있다. 코드 컨플릭트 정보는 코드 컨플릭트가 발생한 브랜치 정보, 코드 컨플릭트가 발생한 파일 정보, 코드 컨플릭트가 발생한 파일에 대한 작업을 수행한 작업자 정보, 코드 컨플릭트가 발생한 코드 부분 정보, 수정 작 업이 수행된 코드 변경 정보, 브랜치 정보와 대응하는 태그 정보, 파일 정보와 대응하는 커밋 정보 중 적어도 일부를 포함할 수 있다. 실시 예에서, 전자 장치에 의하여 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n) 중 적어도 하나에 제공되는 코드 컨플릭트 정보의 세부 항목은 전자 장치가 제공하는 기능에 따라상이할 수 있다. 한편, 실시 예에서, 컨플릭트 정보는 컨플릭트가 발생한 브랜치 조합에 대한 작업자 각각에게 제공될 수 있다. 본 개시의 실시 예에 따른 컨플릭트 테스트는 일정한 주기에 따라 수행될 수 있다. 예로서, 컨플릭트 테스트는 전자 장치의 관리자에 의하여 미리 설정된 주기에 대응하여 수행될 수 있으며, 컨플릭트 테스트에 선행하 여 병합 조합을 확인할 수 있다. 한편, 본 개시의 또 다른 실시 예에 따른 컨플릭트 테스트는 프로그램과 관련 된 커밋 정보가 획득되는 경우 수행될 수 있다. 커밋 정보는 작업자가 해당 파일에 대한 작업을 완료하고, 전자 장치에 완료된 작업 정보를 제공하는 경우 획득될 수 있다. 도 4a 내지 도 4c는 본 개시의 실시 예에 따른 제1 기능에 따라 코드 정보를 제공하는 페이지를 나타내기 위한 도면이다. 실시 예에서, 제1 기능은 병합 조합에 대하여 발생하는 코드 컨플릭트 정보를 제공하기 위한 기능일 수 있다. 도 4a에 도시된 제1 기능에 따라 코드 컨플릭트 정보를 제공하기 위한 제1 페이지(40a)는 제1 기능에 대응하는 제1 탭에 대한 작업자 입력에 대응하여 제공될 수 있다. 도 4a를 참조하면, 제1 페이지(40a)는 작업자로부 터 프로젝트 식별 정보를 획득하기 위한 제1 입력부, 프로젝트 식별 정보에 대응하여 제공되는 코드 컨플 릭트 정보를 포함하는 컨플릭트 정보 리스트, 작업자로부터 작업자 식별 정보를 획득하기 위한 위한 제2 입력부 및 작업자로부터 브랜치 식별 정보를 획득하기 위한 제3 입력부를 포함할 수 있다. 전자 장치는 제1 입력부를 통하여 프로젝트 식별 정보를 획득하고, 프로젝트 식별 정보에 대응하는 컨플릭트 정보 리스트를 제1 페이지(40a) 상에 제공할 수 있다. 컨플릭트 정보 리스트는 컨플릭트 테 스트의 수행 결과를 기반으로, 컨플릭트가 발생한 프로그램 코드와 관련된 정보를 포함할 수 있다. 구체적으로, 컨플릭트 정보 리스트는 컨플릭트가 발생한 제1 브랜치 정보, 제1 브랜치 정보에 대응하는 태그 정보 , 컨플릭트가 발생한 파일 정보 및 제1 브랜치와 컨플릭트가 발생한 제2 브랜치 정보를 포함할 수 있으며, 태그 정보는 제1 브랜치 정보와 관련된 버전 정보를 포함할 수 있다. 또한, 컨플릭트 정 보 리스트는 컨플릭트 상황에 대한 세부 정보를 제공하기 위한 아이콘을 포함할 수 있다. 아이콘에 대한 작업자 입력이 획득되는 경우, 전자 장치는 컨플릭트 상황에 대한 세부 정보를 작업자 단말을 통하여 작업자에게 제공할 수 있으며, 이에 대한 상세한 설명은 도 4b에서 후술한다. 또한, 제2 입력부 또는 제3 입력부에 대한 작업자 입력이 획득되는 경우, 작업자 입력에 대응하는 컨플릭트 정보 리스 트를 작업자 단말을 통하여 작업자에게 제공할 수 있으며, 이에 대한 상세한 설명은 도 4c에서 후술한다. 도 4b에 도시된 제1 서브 페이지(40b)는 제1 기능에 따라 코드 컨플릭트 정보를 제공하기 위한 제1 페이지(40a) 상의 아이콘에 대한 작업자 입력에 대응하여 작업자 단말에 제공될 수 있다. 제1 서브 페이지(40b)는 코드 컨플릭트 세부 정보를 포함할 수 있으며, 코드 컨플릭트 세부 정보는 컨플릭트가 발생한 코드 부분 정보를 포함할 수 있다. 구체적으로, 제1 브랜치와 관련된 프로그램 코드에서 컨플릭트가 발생한 코드 부분 정 보가 제공될 수 있으며, 코드 부분 정보는 하이라이트 표시될 수 있다. 일부 실시 예에서, 코드 컨플릭트 세부 정보는 수정 작업 전의 코드 라인 정보 및 수정 작업 후의 코드 라인 정보를 포함할 수 있다. 도 4c는 제2 입력부를 통하여 작업자 식별 정보가 획득되는 경우, 작업자 단말에 제공되는 작업자 식 별 정보에 대응하는 컨플릭트 정보 리스트를 포함하는 제1 페이지(40c)를 도시한다. 작업자 식별 정보 에 대응하는 컨플릭트 정보 리스트는 해당 작업자가 참여한 작업과 관련된 코드 컨플릭트 정보를 포함할 수 있다. 구체적으로 작업자 식별 정보에 대응하는 컨플릭트 정보 리스트는 해당 작업자가 작업을 수행하 여 컨플릭트가 발생한 브랜치 정보, 제1 브랜치 정보에 대응하는 태그 정보 및 해당 컨플릭트가 발생 한 파일 정보 중 적어도 일부를 포함할 수 있다. 작업자 식별 정보는 작업자의 이메일 주소 또는 작 업자의 고유 ID일 수 있다. 또한, 도시되지 않았으나, 제3 입력부를 통하여 브랜치 식별 정보가 획득되는 경우, 브랜치 식별 정보에 대응하는 컨플릭트 정보 리스트를 포함하는 제1 페이지가 작업자 단말에 제공될 수 있다. 도 5a 및 도 5b는 본 개시의 실시 예에 따른 제2 기능에 따라 코드 정보를 제공하는 페이지를 나타내기 위한 도 면이다. 실시 예에서, 제2 기능은 병합 조합에 대하여 발생하는 컨플릭트와 관련된 파일에 대한 작업을 수행한 작업자 정보를 제공하기 위한 기능일 수 있다. 도 5a에 도시된 제2 기능에 따라 코드 컨플릭트 정보를 제공하기 위한 제2 페이지(50a)는 제2 기능에 대응하는 제2 탭에 대한 작업자 입력에 대응하여 제공될 수 있다. 도 5a를 참조하면, 제2 페이지(50a)는 파일 별 컨 플릭트 정보 리스트를 포함할 수 있으며, 작업자 별 컨플릭트 정보 리스트는 컨플릭트가 발생한 파일정보, 해당 파일에 대한 편집 작업을 수행한 작업자 정보, 해당 파일에 대한 작업과 관련되어 획득된 커밋 정보, 해당 파일에 대응하는 브랜치 정보 및 브랜치 정보에 대응하는 태그 정보 중 적어도 일부를 포함할 수 있다. 한편, 실시 예에서, 제2 탭의 경우 컨플릭트가 발생한 파일에 대한 리스트를 보여 주는 것으로 설명하였으 나, 이에 제한되지 않으며, 프로젝트 내의 파일들 각각에 대해서 편집한 사용자 정보를 모두 확인할 수도 있다. 일 예로 프로젝트 내의 모든 파일에 대한 정보를 표시하고, 해당 파일에 대한 편집을 수행한 이력이 있는 사용 자를 확인할 수 있으며, 이 정보를 기반으로 프로젝트 관리를 용이하게 수행할 수 있다. 또한, 파일 별 컨플릭트 정보 리스트는 컨플릭트 상황에 대한 세부 정보를 제공하기 위한 아이콘을 포함할 수 있다. 아이콘에 대한 작업자 입력이 획득되는 경우, 전자 장치는 컨플릭트 상황에 대한 세 부 정보를 작업자 단말을 통하여 작업자에게 제공할 수 있으며, 이에 대한 상세한 설명은 도 5b에서 후술한다. 한편, 도시되지 않았으나, 일부 실시 예에서, 제2 기능에 따라 작업자 단말에 제공되는 파일 별 컨플릭트 정보 리스트는 작업자의 기간 정보 입력에 대응하여 정해진 기간 내의 컨플릭트가 발생한 파일에 대한 작업을 수행한 작업자 정보를 포함할 수 있다. 도 5b에 도시된 제2 서브 페이지(50b)는 제2 기능에 따라 코드 컨플릭트 정보를 제공하기 위한 제2 페이지(50a) 상의 아이콘에 대한 작업자 입력에 대응하여 작업자 단말에 제공될 수 있다. 제2 서브 페이지(50b)는 코드 컨플릭트 세부 정보(520 및 530)를 포함할 수 있으며, 코드 컨플릭트 세부 정보(520 및 530)는 컨플릭트가 발생 한 코드 부분 정보를 포함할 수 있다. 구체적으로, 컨플릭트가 발생한 코드 부분 정보가 제공될 수 있으며, 코 드 부분 정보는 하이라이트 표시될 수 있다. 일부 실시 예에서, 코드 컨플릭트 세부 정보(520 및 530)는 프로그 램 코드에 대한 변경 정보 및 비교 정보 중 적어도 일부를 포함할 수 있다. 도 6은 본 개시의 실시 예에 따른 제3 기능에 따라 코드 정보를 제공하는 페이지를 나타내는 페이지를 나타내기 위한 도면이다. 실시 예에서, 제3 기능은 특정 브랜치와 관련된 브랜치 정보를 제공하기 위한 기능일 수 있다. 도 6에 도시된 제3 기능에 따라 코드 컨플릭트 정보를 제공하기 위한 제3 페이지는 제3 기능에 대응하는 제 3 탭에 대한 작업자 입력에 대응하여 제공될 수 있다. 도 6을 참조하면, 제3 페이지는 제1 브랜치와 관련된 복수의 브랜치 정보를 포함하는 컨플릭트 정보 리스트를 포함할 수 있다. 컨플릭트 정보 리스트 에 포함되는 복수의 브랜치 정보들 각각은 브랜치 경로 정보를 포함할 수 있다. 브랜치 경로 정보는 해당 브랜치가 어떤 마스터 브랜치(MB)로부터 파생되었는지를 나타낼 수 있으며, 일부 실시 예에서, 컨플릭트 정보 리스트는 해당 마스터 브랜치(MB)로부터 분기된 복수의 브랜치 정보 중 적어도 일부를 포함할 수 있다. 제3 기능에 따라 제공되는 코드 컨플릭트 정보는 작업자에 의한 컨플릭트에 대한 판단을 위한 간접적 정보일 수 있다. 구체적으로, 특정 브랜치에 대한 작업이 완료되면 기존의 브랜치를 삭제함이 원칙이나, 이에 대한 삭제가 수행되지 않은 경우, 작업자는 삭제되지 않은 브랜치에 의하여 발생한 컨플릭트가 무시할 수 있는 컨플릭트인지, 또는 주의가 필요한 컨플릭트 인지 여부를 제3 기능에 따라 제공되는 코드 컨플릭트 정보를 기반 으로 판단할 수 있다. 또한, 제3 기능에 따라 제공되는 코드 컨플릭트 정보를 기반으로 작업자는 컨플릭트 테스 트를 수행하기 위한 브랜치 조합을 설정할 수 있다. 구체적으로, 작업자는 제3 기능에 따라 제공되는 코드 컨플 릭트 정보를 기반으로 컨플릭트 테스트 수행 대상에서 삭제 작업이 수행되지 않은 브랜치를 제외하도록 설정할 수 있다. 한편, 실시 예에서, 컨플릭트가 확인된 브랜치들의 경우, 해당 작업자에게 확인을 요청할 수 있으며, 본 명세서 의 실시 예에 따른 페이지에 컨플릭트 정보를 확인할 수 있는 링크를 각 작업자에게 제공할 수 있다. 또한, 실 시 예에서, 컨플릭트 판단은 해당 브랜치의 파일을 서로 비교함으로써 수행되므로 특정 파일과 논리적 연관성이 있는 다른 파일의 컨플릭트 확인이 필요하다. 이 경우, 사용자 설정에 의해 동일 파일이 아닌 다른 파일에 대해 서도 주기적으로 컨플릭트 발생 여부를 확인할 수 있으며, 이에 대해서도 컨플릭트 정보를 각 작업자에게 제공 할 수 있다. 한편, 본 개시의 실시 예에 따라 코드 간 컨플릭트 발생이 감지되는 경우, 프로젝트와 관련된 코딩 작업을 수행하기 위한 클라우드 기반의 작업 프로그램을 통하여 작업자에게 컨플릭트 발생과 관련된 알람 정보 가 제공될 수 있으며, 컨플릭트 발생과 관련된 알람 정보는 감지된 코드 컨플릭트 정보를 확인할 것을 지시하는 지시 정보를 포함할 수 있다. 도 7은 본 개시의 실시 예에 따른 코드 정보 제공을 위한 전자 장치를 나타내기 위한 도면이다. 도 7을 참 조하면, 본 개시의 실시 예에 따른 전자 장치는 트랜시버, 프로세서 및 메모리를 포함할 수 있다. 전자 장치는 트랜시버를 통하여 외부 단말과 연결되고, 데이터를 교환할 수 있다. 예로서, 전자 장치 는 트랜시버를 통하여 제1 내지 제n 작업자 단말(120_1, 120_2, …, 120_n)과 각각 연결될 수 있다. 프로세서는 상술한 도 1 내지 도 6을 통하여 설명한 적어도 하나의 장치들을 포함하거나, 도 1 내지 도 6 을 통하여 설명한 적어도 하나의 방법을 수행하기 위한 정보를 저장할 수 있다. 또한, 프로세서는 프로그 램을 실행하고, 코드 정보를 제공하기 위하여 전자 장치를 제어할 수 있다. 메모리는 휘발성 메모리 밀 비휘발성 메모리 중 적어도 하나를 포함할 수 있다. 또한, 메모리는 프로 세서에 의하여 실행되는 프로그램의 코드를 저장할 수 있다. 한편, 도시되지 않았으나, 전자 장치로 부터 외부 단말에 정보를 제공하기 위한 인터페이스를 더 포함할 수 있다. 상술된 내용은 본 개시를 실시하기 위한 구체적인 실시 예들이다. 본 개시는 상술된 실시 예들뿐만 아니라, 단 순하게 설계 변경되거나 용이하게 변경할 수 있는 실시 예들 또한 포함할 것이다. 또한, 본 개시는 상술된 실시 예들을 이용하여 용이하게 변형하여 실시할 수 있는 기술들도 포함할 것이다. 따라서, 본 개시의 범위는 상술된 실시 예들에 국한되어 정해져서는 안 되며 후술하는 특허청구범위뿐만 아니라 본 개시의 특허청구범위와 균등한 것들에 의해 정해져야 할 것이다."}
{"patent_id": "10-2022-0077471", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 실시 예에 따른 코드 정보 제공을 위한 시스템을 나타내기 위한 도면이다. 도 2는 본 개시의 실시 예에 따라 코드 정보가 제공되는 프로젝트의 자료 구조를 나타내기 위한 도면이다. 도 3은 본 개시의 실시 예에 따른 코드 정보 제공 방법을 설명하기 위한 순서도이다. 도 4a 내지 도 4c는 본 개시의 실시 예에 따른 제1 기능에 따라 코드 정보를 제공하는 페이지를 나타내기 위한 도면이다. 도 5a 및 도 5b는 본 개시의 실시 예에 따른 제2 기능에 따라 코드 정보를 제공하는 페이지를 나타내기 위한 도 면이다. 도 6은 본 개시의 실시 예에 따른 제3 기능에 따라 코드 정보를 제공하는 페이지를 나타내는 페이지를 나타내기 위한 도면이다. 도 7은 본 개시의 실시 예에 따른 코드 정보 제공을 위한 전자 장치를 나타내기 위한 도면이다."}
