{"patent_id": "10-2020-0021234", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0001886", "출원번호": "10-2020-0021234", "발명의 명칭": "데이터에 액세스하는 방법, 장치, 기기 및 매체", "출원인": "베이징 바이두 넷컴 사이언스 앤 테크놀로지 코.,", "발명자": "렁, 시앙룬"}}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "데이터에 액세스하는 방법에 있어서, 컴퓨팅 기기의 가상 머신에 대응되는 가상 기능의 식별자 및 상기 가상 머신이 액세스하고자 하는 메모리 내의상기 데이터에 관련되는 주소를 획득하는 단계 - 상기 가상 기능의 식별자 및 상기 주소는, 상기 컴퓨팅 기기의가상 머신으로부터 수신된 액세스 요청에 따라 결정됨 - ; 상기 식별자에 따라 상기 가상 머신에 대응되는 상기 메모리 내의 저장 리소스의 범위를 결정하는 단계; 상기 주소가 상기 범위 내에 있는지 여부를 결정하는 단계; 및 상기 주소가 상기 범위 내에 있다고 결정된 것에 응답하여, 상기 주소에 관련되는 상기 데이터에 액세스하는 단계; 를 포함하는, 것을 특징으로 하는 데이터에 액세스하는 방법."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서, 상기 주소가 상기 범위 내에 있지 않다고 결정된 것에 응답하여, 에러 메세지를 리턴하는 단계;를 더 포함하는, 것을 특징으로 하는 데이터에 액세스하는 방법."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2항에 있어서, 상기 에러 메세지는 디코딩 에러를 나타내는, 것을 특징으로 하는 데이터에 액세스하는 방법."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1항에 있어서, 상기 주소에 관련되는 데이터에 액세스하는 단계는, 상기 식별자에 따라 상기 저장 리소스의 시작 물리 주소를 결정하는 단계; 상기 시작 물리 주소 및 상기 주소에 따라, 상기 주소에 대응되는 물리적 저장 주소를 결정하는 단계; 및 상기 물리적 저장 주소에 대응되는 상기 데이터에 액세스하는 단계; 를 포함하는, 것을 특징으로 하는 데이터에 액세스하는 방법."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1항에 있어서, 상기 방법은, 물리적 기능을 통해 전송된, 상기 식별자와 상기 저장 리소스의 상기 범위 사이의 매핑 관계를 설정하는 요청이공개특허 10-2021-0001886-3-수신된 것에 응답하여, 상기 메모리에 관련되는 레지스터 내에 상기 매핑 관계를 저장하는 단계;를 더 포함하는, 것을 특징으로 하는 데이터에 액세스하는 방법."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1항에 있어서, 상기 방법은,상기 컴퓨팅 기기에 통신 가능하게 커플링된 시스템온칩(SoC)형 칩에서 수행되는, 것을 특징으로 하는 데이터에 액세스하는 방법."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "데이터에 액세스하는 장치에 있어서, 컴퓨팅 기기의 가상 머신에 대응되는 가상 기능의 식별자 및 상기 가상 머신이 액세스하고자 하는 메모리 내의상기 데이터에 관련되는 주소를 획득하도록 구성되는 획득 모듈 - 상기 가상 기능의 식별자 및 상기 주소는, 상기 컴퓨팅 기기의 가상 머신으로부터 수신된 액세스 요청에 따라 결정됨 - ; 상기 식별자에 따라 상기 가상 머신에 대응되는 상기 메모리 내의 저장 리소스의 범위를 결정하도록 구성되는범위 결정 모듈; 상기 주소가 상기 범위 내에 있는지 여부를 결정하도록 구성되는 주소 비교 모듈; 및 상기 주소가 상기 범위 내에 있다고 결정된 것에 응답하여, 상기 주소에 관련되는 상기 데이터에 액세스하도록구성되는 제1 액세스 모듈; 을 포함하는, 것을 특징으로 하는 데이터에 액세스하는 장치."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7항에 있어서, 상기 주소가 상기 범위 내에 있지 않다고 결정된 것에 응답하여, 에러 메세지를 리턴하도록 구성되는 리턴모듈;을 더 포함하는, 것을 특징으로 하는 데이터에 액세스하는 장치."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8항에 있어서, 상기 에러 메세지는 디코딩 에러를 나타내는, 것을 특징으로 하는 데이터에 액세스하는 장치."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 7항에 있어서, 상기 제1 액세스 모듈은, 상기 식별자에 따라 상기 저장 리소스의 시작 물리 주소를 결정하도록 구성되는 시작 물리 주소 결정 모듈; 상기 시작 물리 주소 및 상기 주소에 따라, 상기 주소에 대응되는 물리적 저장 주소를 결정하도록 구성되는 물리적 저장 주소 결정 모듈; 및 공개특허 10-2021-0001886-4-상기 물리적 저장 주소에 대응되는 상기 데이터에 액세스하도록 구성되는 제2 액세스 모듈; 을 포함하는, 것을 특징으로 하는 데이터에 액세스하는 장치."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 7항에 있어서, 물리적 기능을 통해 전송된, 상기 식별자와 상기 저장 리소스의 상기 범위 사이의 매핑 관계를 설정하는 요청이수신된 것에 응답하여, 상기 메모리에 관련되는 레지스터 내에 상기 매핑 관계를 저장하도록 구성되는 저장 모듈;을 더 포함하는, 것을 특징으로 하는 데이터에 액세스하는 장치."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 7항에 있어서, 상기 장치는 상기 컴퓨팅 기기에 통신 가능하게 커플링된 시스템온칩(SoC)형 칩에 있는, 것을 특징으로 하는 데이터에 액세스하는 장치."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "전자 기기에 있어서,하나 또는 복수의 프로세서; 및 하나 또는 복수의 프로그램을 저장하기 위한 저장 장치; 를 포함하고, 상기 하나 또는 복수의 프로그램이 상기 하나 또는 복수의 프로세서에 의해 실행될 경우, 상기 하나 또는 복수의 프로세서가 제1항 내지 제6항 중 어느 한 항의 방법을 구현하는, 것을 특징으로 하는 전자 기기."}
{"patent_id": "10-2020-0021234", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "컴퓨터 프로그램이 저장되어 있는 컴퓨터 판독 가능 저장 매체에 있어서, 상기 프로그램이 프로세서에 의해 실행될 경우, 제1항 내지 제6항 중 어느 한 항의 방법이 구현되는, 것을 특징으로 하는 컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2020-0021234", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 실시예에 따르면, 데이터에 액세스하는 방법, 장치, 기기 및 컴퓨터 판독 가능 저장 매체가 제공되는 바，이는 컴퓨터 분야에 관한 것이다. 데이터에 액세스하는 방법은, 컴퓨팅 기기의 가상 머신에 대응되는 가상 기능의 식별자 및 가상 머신이 액세스하고자 하는 메모리 내의 데이터에 관련되는 주소를 획득하는 단계 - 가상 (뒷면에 계속)"}
{"patent_id": "10-2020-0021234", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 실시예는 주로 컴퓨터 분야에 관한 것이고, 더 구체적으로, 데이터에 액세스하는 방법, 장치, 기기 및 매체에 관한 것이다."}
{"patent_id": "10-2020-0021234", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "클라우드 컴퓨팅이 급속도로 발전함에 따라, 현대 데이터 센터에서는 통상적으로 가상화 기술에 의해 서버의 물 리적 리소스 이용률을 향상시킨다. 가상 머신에 있어서 소프트웨어와 하드웨어의 분리를 통하여 소프트웨어 관 리, 고장 검출 및 시스템 유지보수 등의 조작을 더 잘할 수 있게 된다. 가상화 기술은 하나의 물리 서버에 의해 복수의 가상 서버가 실행 가능하게 하는 바, 따라서 서버의 이용률을 향상시키고, 클라우드 컴퓨팅의 배치 비용을 대폭 저감시킨다. 인공지능 AI 컴퓨팅은 클라우드 컴퓨팅에 광범위하게 이용되고 있는바, 따라서 여러 가지 GPU 또는 AI 가속기 카드(AI ACCELERATOR CARD)가 자연히 대량으로 배치된다. 싱글 루트 I/O 가상화(SR-IOV) 기술을 통해, 이러한 가속기 카드는 빠른 속도로 가상화를 지원할 수 있다. 그러나, 가속기 카드를 적용하여 가상 머신을 지원하는 과정에는 해결하여야할 문제들이 허다하게 존재한다. 본 개시의 예시적 실시예에 따르면, 데이터에 액세스하는 방안을 제공한다. 본 개시의 제1 측면으로, 데이터에 액세스하는 방법을 제공한다. 당해 방법은, 컴퓨팅 기기의 가상 머신에 대응 되는 가상 기능의 식별자 및 상기 가상 머신이 액세스하고자 하는 메모리 내의 상기 데이터에 관련되는 주소를 획득하는 단계 - 상기 가상 기능의 식별자 및 상기 주소는, 상기 컴퓨팅 기기의 가상 머신으로부터 수신된 액세 스 요청에 따라 결정됨 - ; 식별자에 따라 가상 머신에 대응되는 메모리 내의 저장 리소스의 범위를 결정하는 단계; 주소가 범위 내에 있는지 여부를 결정하는 단계; 및 주소가 범위 내에 있다고 결정된 것에 응답하여, 주 소에 관련되는 데이터에 액세스하는 단계;를 포함한다. 본 개시의 제2 측면으로, 데이터에 액세스하는 장치를 제공한다. 당해 장치는, 컴퓨팅 기기의 가상 머신에 대응 되는 가상 기능의 식별자 및 상기 가상 머신이 액세스하고자 하는 메모리 내의 상기 데이터에 관련되는 주소를 획득하도록 구성되는 획득 모듈 - 상기 가상 기능의 식별자 및 상기 주소는, 상기 컴퓨팅 기기의 가상 머신으로 부터 수신된 액세스 요청에 따라 결정됨 - ; 식별자에 따라 가상 머신에 대응되는 메모리 내의 저장 리소스의 범위를 결정하도록 구성되는 범위 결정 모듈; 주소가 당해 범위에 있는지 여부를 결정하도록 구성되는 주소 비 교 모듈; 및 주소가 당해 범위에 있다고 결정된 것에 응답하여, 주소에 관련되는 데이터에 액세스하도록 구성되 는 제1 액세스 모듈;을 포함한다. 본 개시의 제3 측면으로, 전자 기기가 제공되는바, 이는 하나 또는 복수의 프로세서; 및 하나 또는 복수의 프로 그램을 저장하기 위한 저장 장치;를 포함하고, 하나 또는 복수의 프로그램이 하나 또는 복수의 프로세서에 의해 실행될 경우, 하나 또는 복수의 프로세서가 본 개시의 제1 측면에 따른 방법을 구현한다. 본 개시의 제4 측면으로, 컴퓨터 프로그램이 저장되어 있는 컴퓨터 판독 가능 저장 매체가 제공되는바, 당해 프 로그램이 프로세서에 의해 실행될 경우, 본 개시의 제1 측면에 따른 방법이 구현된다. 발명 내용 부분에서 설명하는 내용은 본 개시의 실시예의 핵심적인 또는 중요한 특징을 한정하고자 하는 것이 아니며 본 개시의 범위를 한정하고자 하는 것도 아님을 이해하여야 한다. 본 개시의 기타의 특징은 아래의 설명 으로 이해하기 수월해질 것이다."}
{"patent_id": "10-2020-0021234", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "아래, 첨부 도면을 참조하여 본 개시의 실시예를 더 상세히 설명하고자 한다. 비록 첨부 도면에서 본 개시의 일 부 실시예를 도시하였으나 본 개시는 여러 가지 형식으로 구현 가능한 것인 바, 여기에 기술되는 실시예에 한정 되는 것으로 해석되어서는 안되며 반대로 이러한 실시예를 제공하는 것은 본 개시를 더욱 투철하고 완전하게 이 해하고자 하는 것임을 이해하여야 한다. 본 개시의 첨부 도면 및 실시예는 예시의 역할을 위한 것일 뿐, 본 개 시의 보호 범위를 한정하고자 하는 것이 아님을 이해하여야 한다. 본 개시의 실시예의 설명에서, 용어 '포함하다' 및 이와 유사한 용어는 개방형의 포함, 즉 '포함하나 이에 한정 되지 않는다'로 이해되어야 한다. 용어 '에 따라'는 '적어도 부분적으로 쪋에 따라'로 이해되어야 한다. 용어 '일 실시예' 또는 '당해 실시예'는 '적어도 일 실시예'로 이해되어야 한다. 용어 '제1', '제2' 등은 부동한 또 는 동일한 대상을 지칭할 수 있다. 후술에는 기타의 명확한 또는 암묵적인 정의가 더 포함될 수 있다. 현재, GPU, AI 가속기 카드 등의 시스템온칩(SoC)형 칩을 사용하여 효과적으로 가상화를 지원하는 데 있어서 막 대한 도전에 직면하고 있다. 시스템온칩형 칩은 복수의 메모리 관리 유닛을 적용하여 시스템온칩형 칩의 메모리 의 가상화를 지원한다. 그러나, 메모리 관리 유닛을 적용하여 시스템온칩형 칩의 메모리의 가상화를 구현하는 경우, 시스템온칩형 칩에 많은 컴퓨팅 유닛이 있음으로 인해, 온칩에서는 복수의 메모리 관리 유닛 모듈에 대한 인스턴트화가 필요하다. 이때, 상술한 방식은 대량의 하드웨어 리소스가 필요할 뿐만 아니라, 소프트웨어에서는 복수의 페이지 테이블 및 관련되는 일치성 조작을 유지하는 것이 필요한바, 이러한 오버헤드 역시 매우 크다. 본 개시의 실시예에 따르면, 개선된 데이터 액세스 방안이 제공된다. 당해 방안에서는, 우선, 컴퓨팅 기기의 가 상 머신으로부터 수신된 액세스 요청에 관련되는 가상 머신의 식별자 및 액세스하고자 하는 데이터에 관련되는 논리 주소를 결정한다. 다음, 당해 식별자에 따라 가상 머신에 대응되는 시스템온칩형 칩의 메모리 내의 저장 리소스의 범위를 결정한다. 당해 주소가 당해 범위에 있는 경우, 주소 변환을 통해 당해 주소에 관련되는 데이 터에 액세스한다. 시스템온칩형 칩에 설정된 메모리 관리 유닛을 통해 부동한 가상 머신의 메모리 주소를 실제 로 액세스되는 물리 주소로 변환시키는바, 이는 나아가 각 컴퓨팅 유닛에 대하여 메모리 관리 유닛 및 관련되는 페이지 테이블을 설정할 필요가 없으므로, 상대적으로 적은 하드웨어 리소스로 메모리에 대한 액세스를 구현할 수 있고 또한, 소프트웨어 오버헤드도 작고 클라우드 컴퓨팅에 있어서 시스템온칩에 대한 가상화 수요가 잘 충 족된다. 도 1은 본 개시의 실시예에 따른 데이터에 액세스하는 예시 환경의 개략도를 도시한다. 도 1에 도시한 바 와 같이, 환경은 메인 기기와 시스템온칩(SoC)형 칩을 포함한다. 메인 기기는 가상 머신 을 실행시킬 수 있는 여러 가지 유형의 컴퓨팅 기기일 수 있다. 예시적인 컴퓨팅 기기는 개인용 컴퓨터 , 서버 컴퓨터, 핸드헬드 또는 랩톱 기기, 이동 기기(예를 들어 휴대 전화, 개인용 디지털 보조기(PDA), 미디어 플레이어 등), 멀티프로세서 시스템, 소비자 전자제품, 소형 컴퓨터, 대형 컴퓨터, 상술한 시스템 또는 기기 중 의 어느 하나를 포함하는 분산 컴퓨팅 환경 등을 포함하나 이에 한정되지 않는다. 일부 실시예에서, 메인 기기는 PCIe 기능을 지원한다. 대안으로 또는 추가로, 메인 기기는 또한 싱글 루트 I/O 가상화(SR-IOV)를 통해 I/O 기기를 지원함으로써 I/O 기기, 예를 들어 네트워크 인터페이스의 이용률 을 향상시킨다. 가상 머신은 메인 기기에서 실행된다. 가상 머신은 특정한 애플리케이션 프로그램에 의해 물리 적 기계의 하드웨어 플랫폼에 구축한 애플리케이션 실행 환경을 가리키고, 사용자는 당해 환경을 통해 마치 물 리적 기계를 사용하는 것처럼 애플리케이션을 실행시키고 이와 인터랙션한다. 하나의 가상 머신을 구축하 는 경우, 통상적으로 관리기를 통해 당해 가상 머신을 관리하는 메인 기기로부터 일정 수량의 리소스 를 할당받아 가상 머신이 조작에 사용하도록 하는 것이 필요하다. 당해 리소스는 가상 머신을 실행시 키는 임의의 사용 가능한 리소스일 수 있는바, 예를 들어 컴퓨팅 리소스(예를 들어CPU, GPU, FPGA 등), 저장 리 소스(예를 들어 메모리, 저장 디스크 등), 네트워크 리소스(예를 들어 네트워크 카드) 등일 수 있다. 도 1의 메 인 기기에 포함되는 가상 머신은 단지 본 개시를 설명하기 위한 것일 뿐, 본 개시에 대한 구체적인 한정이 아니다. 메인 기기는 필요에 따라 임의 수량의 가상 머신을 설정할 수 있다. 환경은 메인 기기에 통신 가능하게 커플링된 시스템온칩형 칩을 더 포함한다. 시스템온칩은 하 나의 칩에 집적된 하나의 완전한 시스템을 가리키는바, 구체적으로는 복수의 특정 기능을 가지는 집적 회로가 하나의 칩에 조합되어 형성되는 시스템 또는 제품이고, 여기에는 완전한 하드웨어 시스템 및 그에 탑재되는 임 베디드 소프트웨어가 포함된다. 예를 들어, AI 가속기 카드 또는 여러 가지 GPU는 시스템온칩형 칩을 통해 구현할 수 있다. 상술한 AI 가속기 카드와 여러 가지 GPU 외에도, 당업자라면 필요에 따라 모든 적합한 시스템을 시스템온칩형 칩으로 구현할 수 있다. 시스템온칩형 칩은 싱글 루트 I/O 가상화를 지원하여, 시스템온칩형 칩을 복수의 독립된 물리 기기처 럼 보이도록 한다. 따라서, 시스템온칩형 칩은 물리적 기능(PF)과 가상 기능(VF)을 지원한다. 물리적 기능 은 풀(Full) 기능의 주변 소자 상호연결(Peripheral Component Interconnect, PCIe) 기능인바, 이는 싱글 루트 I/O 가상화를 지원한다. 물리적 기능은 일반적인 PCIe 기기처럼 ₁한다. 따라서, 시스템온칩형 칩은 물리 적 기능(PF)과 가상 기능(VF)을 지원한다. 물리적 기능은 풀(Full) 기능의 주변 소자 상호연결(Peripheral Component Interconnect, PCIe) 기능인바, 이는 싱글 루트 I/O 가상화를 지원한다. 물리적 기능은 일반적인 PCIe 기기처럼 발견되고 관리되고 배치될 수 있다. 가상 기능은 경량형의 PCIe 기능이고, 물리적 기능에 연관된 다. 각 가상 기능은 모두 물리적 기능으로부터 분리되어 나온 것이다. 가상 기능은 가상 머신에 할당될 수 있다. 시스템온칩형 칩은 PCIe 인터페이스를 더 포함하는바, 가상 머신으로부터의 액세스 요청이 수신되는 경우, 액세스 요청의 주소 정보에 따라 가상 머신에 대응되는 가상 기능의 식별자 및 메모리 제어기 에 연결되는 메모리 내에서의 액세스하고자 하는 데이터의 논리 주소(예를 들어 고급 확장 인터페이스 (AXI) 주소)를 결정한다. 시스템온칩형 칩은 메모리 관리 유닛과 메모리 제어기를 포함한다. 메모리 관리 유닛은 메 모리 제어기에 대한 액세스를 제어한다. 메모리 관리 유닛은 수신된 가상 기능 식별자에 따라, 당해 가상 기능 식별자 또는 당해 가상 머신에 대응되고, 메모리 제어기에 연결되는 메모리의 저장 리소스의 범위를 결정할 수 있다. 또한, 메모리 관리 유닛은 수신된 논리 주소가 당해 주소 범위 내에 있는지 여부를 결정할 수 있다. 당해 주소 범위 내에 있다면, 당해 논리 주소에 대응되는 물리 주소에 액세스할 수 있다. 당해 주소 범위 내에 있지 않다면 에러 메세지를 리턴한다. 일부 실시예에서, 메모리 관리 유닛은 레지스터를 포함한다. 당해 레지스터에는 메모리 블록 테이블이 저 장된다. 당해 메모리 블록 테이블에는 복수의 엔트리가 저장되고, 각 엔트리에는 가상 기능 식별자 및 당해 가 상 기능 식별자에 대응되는 실제적인 물리 주소 공간의 범위가 기재된다. 대안으로 또는 추가로, 당해 메모리 제어기에 연결되는 메모리의 저장 공간은 복수의 블록으로 구획되고, 블록 테이블에는 가상 기능 식 별자에 대응되는 블록이 유효한지 여부에 관한 정보, 가상 기능에 대응되는 블록의 시작 번호 정보 및 블록의 크기, 즉 몇개의 블록을 포함하는지가 저장된다. 일부 실시예에서, 시스템온칩형 칩이 4개의 가상 기능을 지원하고 메모리 제어기에 연결되는 메모리 의 저장 공간이 16GB인 경우, 각 가상 기능(VF)은 4GB의 저장 공간에 대응될 수 있다. 대안으로 또는 추가 로, 가상 머신에 보여지는 주소가 일치성을 가지도록 하기 위해서는, 각 가상 기능에 보여지는 주소 공간은 모 두 0~4GB이다. 메모리 제어기는 데이터를 메모리에 저장한다. 메모리 제어기에 연결되는 메모리는2배속 동기식 동적 랜덤 액세스 메모리(DDR), 랜덤 액세스 메모리(RAM), 고대역폭 메모리(HBM), 전기적으로 소거 및 프로그램 가능한 판독 전용 메모리(EEPROM), 플래시 메모리나 기타의 메모리 기술, 또는, 필요한 정보를 저장하 고 메인 기기에 의해 액세스 가능한 임의의 기타 비 전송 매체를 포함하나 이에 한정되지 않는다. 상기에서는 도 1을 참조하여 본 개시의 실시예에 따른 데이터에 액세스하는 예시 환경의 개략도에 대해 설 명하였다. 아래, 도 2를 결부하여 본 개시의 실시예에 따른 데이터에 액세스하는 방법의 흐름도를 설명하 고자 한다. 도 2에 도시한 바와 같이, 단계202에서, 메모리 관리기는 컴퓨팅 기기의 가상 머신에 대응되는 가상 기능의 식 별자 및 가상 머신이 액세스하고자 하는 메모리 내의 데이터에 관련되는 주소를 획득한다. 가상 기능의 식별자 및 주소는, 컴퓨팅 기기의 가상 머신으로부터 수신된 액세스 요청에 따라 결정된다. 예를 들어, 도 1에서 시스 템온칩형 칩은 메인 기기의 가상 머신으로부터 액세스 요청을 수신하는바, 당해 요청은 시스템 온칩형 칩을 통해 메모리의 데이터에 액세스하기 위한 것이다. 당해 요청이 시스템온칩형 칩의 인터페이스 부재에 수신되는 경우, 당해 요청(예를 들어 요청의 주소 정보)에 따라 가상 머신에 연관되는 가상 기능 식별자 및 액세스하고자 하는 데이터의 메모리 상에서의 주소(예를 들어, 고급 확장 인터페이스 (AXI) 주소)를 결정한다. 당해 가상 기능 식별자 및 주소는 메모리 관리 유닛에 전송된다. 단계204에서, 메모리 관리 유닛은 식별자에 따라 가상 머신에 대응되는 메모리 내의 저장 리소스의 범위를 결정 한다. 예를 들어, 도 1의 메모리 관리 유닛은 당해 식별자에 따라 가상 머신에 대응되는 메모리 내의 저장 리소스의 범위를 결정한다. 대안으로 또는 추가로, 메모리 관리 유닛은 당해 가상 기능의 식별 자에 따라 당해 가상 기능의 식별자에 대응되는 저장 리소스의 범위를 결정한다. 일부 실시예에서, 메모리 관리 유닛에는 레지스터가 설정되고 당해 레지스터에는 가상 기능 식별자와 메모 리 제어기에 연결되는 메모리의 저장 리소스의 범위와의 매핑 관계가 저장된다. 대안으로 또는 추가 로, 레지스터에는 메모리 블록 테이블이 저장되고 당해 메모리 블록 테이블에는 복수의 엔트리가 저장되며 각 엔트리에는 가상 기능 식별자와 당해 가상 기능 식별자에 대응되는 실제적인 물리 주소 공간의 범위가 기재된다. 일부 실시예에서, 당해 레지스터의 메모리 블록 테이블 또는 상술한 매핑 관계는 시스템온칩형 칩의 물리 적 기능을 통해 수정 가능하다. 물리적 기능을 통해 전송된, 식별자와 저장 리소스의 범위 사이의 매핑 관계를 설정하거나 수정하는 요청이 메모리 관리 유닛에 수신되는 경우, 메모리 제어기에 관련되는 레지스터 에서 매핑 관계를 저장하거나 수정한다. 상술한 바와 같이 물리적 기능만을 통하여 레지스터에 저장된 메모리 블록 테이블 또는 매핑 관계를 수정함으로 써 가상 기능이 레지스터에 액세스하지 못하도록 유지하여 레지스터의 메모리 블록 테이블 또는 매핑 관계가 가 상 머신 관리기에 의해서만 액세스 가능하도록 하고 가상 머신은 액세스할 수 없도록 한다. 이로써 각 가상 머 신으로 하여금 할당된 메모리 공간에만 액세스 가능하도록 하여 액세스 위반이 불가능하도록 하고, 메모리 블록 테이블에 대한 수정 역시 불가능하도록 하는바, 이는 가상 머신의 물리적인 격리를 구현하므로 액세스 조작을 안전하고 신뢰성이 있게 한다. 단계206에서, 메모리 관리 유닛이 주소가 범위 내에 있는지 여부를 결정한다. 예를 들어, 도 1에서는 메모리 관 리 유닛을 통해 주소가 범위 내에 있는지 여부를 검출한다. 단계208에서, 주소가 범위 내에 있다고 결정된 것에 응답하여, 메모리 관리 유닛이 주소에 관련되는 데이터에 액세스한다. 당해 데이터에 액세스하는 과정에 대해서는 아래 도 3을 결부하여 상세히 설명하고자 한다. 메모리 관리 유닛에 의해 당해 주소가 범위에 있지 않다고 결정되는 경우, 에러 메세지를 리턴한다. 일부 실시 예에서, 당해 에러 메세지는 디코딩 에러를 나타낸다. 당해 조작에 따르면, 가상 머신이 조작 착오로 인하여 액 세스되지 말아야 할 저장 공간에 액세스하는 것을 방지할 수 있다. 상술한 방법을 이용하여 시스템온칩형 칩의 메모리에 대한 가상 머신의 액세스가 구현된다. 시스템온칩형 칩에 설정되는 메모리 관리 유닛을 통해 가상 머신이 메모리 내의 주소에 액세스하는 것을 구현함으로써, 상대적으로 적은 하드웨어 리소스로 당해 과정을 구현할 수 있고, 그리고 소프트웨어 오버헤드도 작고, 그리고 클라우드 컴 퓨팅에 있어서 시스템온칩에 대한 가상화 수요가 잘 충족된다. 상기에서 도 2는 본 개시의 실시예에 따른 데이터에 액세스하는 방법의 흐름도를 설명한다. 아래, 도 3을 결부하여 방법의 단계208, 즉 주소에 관련되는 데이터에 액세스하는 예시적인 절차에 대해 상세히 설명하 고자 한다. 도 3은 본 개시의 실시예에 따른 데이터에 액세스하는 방법의 흐름도이다 도 3에 도시된 바와 같이, 단계 302에서, 메모리 관리 유닛이 식별자에 따라 저장 리소스의 시작 물리 주소를 결정한다. 예를 들어, 도 1의 메모리 관리 유닛은 당해 가상 기능의 식별자에 따라 가상 머신 또는 가상 기능의 식별자에 대응되는 저장 리소스의 시작 물리 주소를 결정할 수 있다. 단계304에서, 메모리 관리 유닛이 시작 물리 주소 및 주소에 따라, 주소에 대응되는 물리적 저장 주소를 결정한 다. 예를 들어, 도 1의 메모리 관리 유닛은 결정된 저장 리소스의 물리 시작 주소 및 액세스 요청에 따라 결정된 논리 주소를 통하여, 메모리 제어기에 연결되는 메모리에서의 데이터의 실제적인 물리 주소를 결정한다. 단계306에서, 메모리 관리 유닛은 물리적 저장 주소에 대응되는 데이터에 액세스한다. 예를 들어, 도 1의 메모 리 관리 유닛은 획득된 실제적인 물리 주소에 따라, 메모리 제어기에 연결되는 메모리 내의 데 이터에 액세스한다. 데이터에 대한 액세스를 구현함에 있어서, 부동한 가상 머신으로부터의 주소를 실제로 액세스되는 물리 주소로 변환시킴으로써, 메모리 주소에 대한 부동한 가상 머신의 액세스를 구현하고 각 컴퓨팅 유닛에 대해 상응한 페 이지 테이블을 설치할 필요가 없게 되므로, 소프트웨어 리소스의 오버헤드를 감소시킨다. 아래의 도 4는 본 개시의 실시예에 따른 데이터를 처리하는 예시 환경의 개략도이다. 당해 예시 환경(40 0)은 도 1의 예시 환경의 구체적인 예시이다. 도 4에 도시한 바와 같이, 예시 환경에 포함되는 메인 기기, 시스템온칩형 칩, 메모리 관리 유 닛 및 메모리 제어기는 이미 도 1에서 상세하게 설명되었는바, 이에 대한 상세한 설명은 생략하기로 한다. 메인 기기는 CPU와 메모리를 더 포함한다. CPU는 메인 기기의 중앙 처리 장치인바, 이는 메인 기기 내의 가상 머신의 실행을 제어한다. 메모리는 가상 머신을 실행시키는 데 필요한 데 이터와 프로그램을 저장한다. 메인 기기는 PCIe 인터페이스를 더 포함하는바, 이는 PCIe 기능을 지원 한다. 메인 기기는 PCIe 인터페이스를 통해 시스템온칩형 칩에 연결된다. 시스템온칩형 칩도 PCIe기능 및 고급 확장 인터페이스(AXI) 프로토콜을 지원하는바, 이는 인터페이스 모듈 을 통해 메인 기기에 연결된다. 당해 인터페이스 모듈은 PCIe 인터페이스, 마스터(master) AXI 인터페이스 및 슬레이브(slave) AXI 인터페이스를 포함한다. 인터페이스 모듈을 통해 메인 기기의 가상 머신으로부터 송신된 액세스 요청이 수신되는 경우, 인터페이스 모듈은 액세스 요청에서 의 주소 정보에 따라 당해 가상 머신에 대응되는 가상 기능 식별자 및 AXI주소를 결정한다. 당해 가상 기능의 식별자 및 AXI주소는 내부 버스를 통해 메모리 관리 유닛에 전송된다. 메모리 관리 유닛 내에는 레지스터가 설정된다. 레지스터에는 메모리 블록 테이블이 저장된다. 당해 블록 테이블 내의 각 항목 에는 가상 기능 식별자 번호와 당해 가상 기능 식별자에 대응되는 메모리의 저장 리소스의 범위가 저장된다. 메 모리 관리 유닛은 당해 테이블을 통해 수신된 AXI주소가 위반인지(즉, AXI주소가 대응되는 메모리의 저장 리소스의 범위에 있는지 여부) 여부를 결정한다. 위반이 아닌 경우(즉, AXI주소가 대응되는 메모리의 저장 리소 스의 범위에 있는 경우), 레지스터에 저장된 주소 정보를 통해 AXI주소에 대응되는 실제적인 물리 주소를 결정한다. 위반인 경우에는 에러 메세지를 리턴하는바, 당해 에러 메세지는 디코딩 에러를 나타낸다. 레지스터에 저 장된 메모리 블록 테이블은 물리적 기능을 통하여서만이 수정이 가능하기에 가상 머신은 가상 기능을 통해 당해 레지스터에 액세스할 수 없으므로 가상 머신의 물리적인 격리를 보장하고 더욱 안전하게 한다. 일부 실시예에서, 당해 시스템온칩형 칩이 최대로 4개의 VF를 지원하고 메모리 공간이 16MB인 경우, 이는 실제로 3개의 가상 기능(VF)을 지원하는 것이고, 실제로는 3개의 VF가 (2:1:1)로 16MB 공간을 할당받는 것 이며, 시작 주소가 0xC000_0000인 경우, 블록 테이블은 다음과 같다. 표 1 Id Vld Base Size 주소 범위 0 1 0 4 0xC000_0000 ~ 0xC07F_FFFF 1 1 4 2 0xC080_0000 ~ 0xC0BF_FFFF 2 1 6 2 0xC0C0_0000 ~ 0xC0FF_FFFF 여기서, Id는 가상 기능 식별자를 나타내고, Vld는 블록이 유효한지 여부를 나타내고 1은 유효이고 0은 무효이 며; base는 블록의 시작 번호를 나타내고 값의 범위는 0~(2*VF_MAX_NUM-1)이고, size는 블록의 크기가 몇 개의 입도인지를 나타내고 값의 범위는 0~(2*VF_MAX_NUM-1)이고, 여기서 VF_MAX_NUM는 최대로 지원하는 가상 기능 (VF)의 수량을 나타낸다. 유연성을 향상시키기 위하여, 더 가늘어진 입도는 평균치의 절반인바, 즉, 1/(2*VF_MAX_NUM)이고, 입도는 1/8(즉, VF_MAX_NUM=4)이다. 상기에서 예시한 바는 하나의 물리적 기능이 3개의 가상 기능(VF0-VF2)에 대응되는 경우의 예시이다. 더 나아가, VF0-VF2가 3개의 가상 머신(VM0-VM2)에 대응되는 경우, VM0는 VF0를 통해 메모리 제어기에 액세스하고, VF_id=0인 경우, AXI의 합법 주소는 0xC000_0000~0xC07F_FFFF이고, VM0가 VF0를 통해 주소0xC080_0000에 액세스하는 경우, 마스터 AXI 인터페이스 는 VF_id=0을 출력하고 메모리 관리 유닛은 AXI의 주소가 0xC080_000인 것을 검출하여 위반하였다고 결정되므로, 에러 메세지를 리턴한다. VM1이 VF1를 통해 메모리 제어기에 액세스하고 VF_id=1이고 AXI의 합법 주소는 0xC000_0000~0xC03F_FFFF(물리 주소 0xC080_0000~0xC0BF_FFFF에 대응됨)이며, VM2는 VF2를 통해 메모리 제어기에 액세스하고 VF_id=2이고 AXI의 합법 주소는 0xC000_0000~0xC03F_FFFF (물리 주소 0xC0C0_0000~0xC0FF_FFFF에 대응됨)이고, VM2가 VF2를 통해 주소 0xC060_0000에 액세스하는 경우, 마스터 AXI인터페이스는 VF_id=2를 출력하고, 메모리 관리 유닛은 AXI의 주소가 0xC060_0000인 것을 , 검출하 여 위반하였다고 결정되므로, 에러 메세지를 리턴한다. 가상 머신 관리기(VMM) 또는 모니터가 메모리 관리 유닛의 레지스터에 액세스하고 그 주소가 0xFFFF_0020인 경우, 마스터 AXI 인터페이스는 PF=1을 출력하고 AXI의 주소는 0xFFFF_0020이다. 도 5는 본 개시의 실시예에 따른 데이터를 처리하는 장치의 예시적인 블록도이다. 장치는 도 1 및 도 4의 메모리 관리 유닛에 포함되거나 메모리 관리 유닛으로 구현할 수 있다. 도 5에 도시된 바와 같이, 당해 장치는, 컴퓨팅 기기의 가상 머신에 대응되는 가상 기능의 식별자 및 가상 머신이 액세스하고 자 하는 메모리 내의 데이터에 관련되는 주소를 획득하도록 구성되는 획득 모듈을 포함하고, 가상 기능의 식별자 및 상기 주소는, 상기 컴퓨팅 기기의 가상 머신으로부터 수신된 액세스 요청에 따라 결정된다. 장치 는, 식별자에 따라 가상 머신에 대응되는 메모리 내의 저장 리소스의 범위를 결정하도록 구성되는 결정 모 듈을 더 포함한다. 장치는, 주소가 범위 내에 있는지 여부를 결정하도록 구성되는 주소 비교 모듈 을 더 포함한다. 장치는, 주소가 범위 내에 있다고 결정된 것에 응답하여, 주소에 관련되는 데이터에 액세스하도록 구성되는 제1 액세스 모듈을 더 포함한다. 일부 실시예에서, 장치는, 주소가 범위 내에 있지 않다고 결정된 것에 응답하여, 에러 메세지를 리턴하도 록 구성되는 리턴 모듈을 더 포함한다. 일부 실시예에서, 에러 메세지는 디코딩 에러를 나타낸다. 일부 실시예에서, 제1 액세스 모듈은, 식별자에 따라 저장 리소스의 시작 물리 주소를 결정하도록 구성되 는 시작 물리 주소 결정 모듈; 시작 물리 주소 및 주소에 따라, 주소에 대응되는 물리적 저장 주소를 결정하도 록 구성되는 물리적 저장 주소 결정 모듈; 및 물리적 저장 주소에 대응되는 데이터에 액세스하도록 구성되는 제 2 액세스 모듈;을 포함한다. 일부 실시예에서, 장치는, 물리적 기능을 통해 전송된, 식별자와 저장 리소스의 범위 사이의 매핑 관계를 설정하는 요청이 수신된 것에 응답하여, 메모리에 관련되는 레지스터 내에 매핑 관계를 저장하도록 구성되는 저 장 모듈을 더 포함한다. 일부 실시예에서, 장치는 상기 컴퓨팅 기기에 통신 가능하게 커플링된 시스템온칩(SoC)형 칩에 있다. 도 6은 본 개시의 실시예를 실시 가능한 전자 기기의 예시적인 블록도이다. 기기는 도 1 및 도 4의 메모리 관리 유닛을 구현할 수 있다. 도에 도시한 바와 같이, 기기는 컴퓨팅 유닛을 포함하는바, 이는 판독 전용 메모리(ROM)에 저장되는 컴퓨터 프로그램 명령어 또는 저장 유닛으로부 터 랜덤 액세스 메모리(RAM)에 로딩되는 컴퓨터 프로그램 명령어에 따라 여러 가지 적당한 동작과 처리를 수행할 수 있다. RAM에는 기기의 조작에 필요한 여러 가지 프로그램과 데이터가 저장될 수도 있다. 컴퓨팅 유닛(CPU, 601), ROM 및 RAM은 버스를 통해 상호 연결된다. 입력/출력(I/O) 인터페이스 도 버스에 연결된다. 기기의 복수의 부재가 I/O 인터페이스에 연결되는바, 여기에는, 입력 유닛, 예를 들어 키보드, 마우스 등; 출력 유닛, 예를 들어 여러 가지 유형의 디스플레이 모니터, 스피커 등; 저장 유닛, 예를 들어 자기 디스크, 광 디스크 등; 및 통신 유닛, 예를 들어 네트워크 카드, 모뎀, 무선 통신 송수신기 등 이 포함된다. 통신 유닛은 기기가 인터넷과 같은 컴퓨터 네트워크 및/또는 여러 가지 전기 통신망을 통해 기타의 기기와 정보/데이터를 교환하도록 허용한다. 컴퓨팅 유닛은 처리 및 컴퓨팅 능력을 구비하는 여러 가지의 범용 및/또는 전문 처리 컴포넌트일 수 있다. 컴퓨팅 유닛의 일부 예시는 중앙 처리 장치(CPU), 그래픽 처리 장치(GPU), 여러 가지 전용 인공 지능(AI) 컴퓨팅 칩, 기계 학습 모델 알고리즘을 실행하는 여러 가지 컴퓨팅 유닛, 디지털 신호 프로세서(DSP) 및 임의의 적당한 프로세서, 제어기, 마이크로제어기 등을 포함하나 이에 한정되지 않는다. 컴퓨팅 유닛은 상기에서 설명하는 각 방법과 처리를 수행하는바, 예를 들면 방법과 방법이다. 예를 들어, 일부 실시예에서, 방법과 방법은 컴퓨터 소프트웨어 프로그램으로 구현될 수 있고 기계 판독 가능 매체, 예를 들어 저 장 유닛에 유형적으로(tangibly) 포함될 수 있다. 일부 실시예에서, 컴퓨터 프로그램의 일부 또는 전부가 ROM 및/또는 통신 유닛을 거쳐 기기에 로딩 및/또는 탑재될 수 있다. 컴퓨터 프로그램이 RAM에 로딩되어 컴퓨팅 유닛에 의해 실행될 경우, 상기에서 설명하는 방법과 방법의 하나 또는 복수의 단계가 실행될 수 있다. 대안적으로, 기타의 실시예에서, 컴퓨팅 유닛은 기타의 임의의 적당한 방식(예를 들면, 펌웨어를 통하여)으로 방법(200, 300)을 수행하도록 구성될 수 있다. 본 명세서에 있어서, 상기에서 설명하는 기능은 적어도 부분적으로 하나 또는 복수의 하드웨어 논리 부재에 의 해 실행될 수 있다. 예를 들어, 비한정적으로, 사용 가능한 시범 유형의 하드웨어 논리 부재에는 필드 프로그램 가능 게이트 어레이(FPGA), 주문형 집적 회로(ASIC), 특정 용도 표준 제품(ASSP), 시스템온칩형 시스템(SOC), 복합 프로그램 가능 논리 소자(CPLD) 등이 포함된다. 본 개시의 방법을 실시하기 위한 프로그램 코드는 하나 또는 복수의 프로그램 언어의 임의 조합을 적용하여 작 성할 수 있다. 이러한 프로그램 코드는 범용 컴퓨터, 전용 컴퓨터 또는 기타의 프로그램 가능 데이터 처리 장치 의 프로세서 또는 제어기에 제공되어 프로세서 또는 제어기에 의해 프로그램 코드가 실행되는 경우에 흐름도 및 /또는 블록도에서 규정하는 기능/조작이 실시되도록 할 수 있다. 프로그램 코드는 완전히 기계에서 실행될 수도 있고 부분적으로 기계에서 실행될 수도 있고 독립된 소프트웨어 패키지로서 부분적으로 기계에서 실행되면서 부 분적으로 원격 기계에서 실행되거나 또는 완전히 원격 기계나 서버에서 실행될 수도 있다. 본 개시의 전반에 걸쳐, 기계 판독 가능 매체는 유형적인(tangible) 매체일 수 있고, 이는 명령어 실행 시스템, 장치 또는 기기에 의해 사용되거나 또는 명령어 실행 시스템, 장치 또는 기기에 결합되어 사용되는 프로그램을 포함하거나 저장할 수 있다. 기계 판독 가능 매체는 기계 판독 가능 신호 매체 또는 기계 판독 가능 저장 매체 일 수 있다. 기계 판독 가능 매체는 전자, 자기, 광학, 전자기, 적외선 또는 반도체의 시스템, 장치 또는 기기, 또는 상술한 내용의 임의의 적당한 조합을 포함할 수 있으나 이에 한정되지 않는다. 기계 판독 가능 저장 매체 의 더 구체적인 예시는 하나 또는 복수의 선에 기반하는 전기 연결, 휴대형 컴퓨터 디스크, 하드 디스크, 랜덤 액세스 메모리(RAM), 판독 전용 메모리(ROM), 소거 및 프로그램 가능 판독 전용 메모리(EPROM 또는 플래시 메모 리), 광섬유, 편리형 콤팩트 디스크 판독 전용 메모리(CD-ROM), 광학 저장 기기, 자기 저장 기기 또는 상술한 내용의 임의의 적당한 조합을 포함한다. 또한, 각 조작에 대하여 특정된 순서로 설명하였으나, 기대하는 효과를 취득하기 위해서는, 이러한 조작은 도시 되는 특정 순서나 순차적인 순서로 수행되도록 요구되거나 또는 모든 도시되는 조작이 수행되도록 요구되는 것으로 이해되어야 한다. 일정한 환경에서는 멀티태스킹이나 병렬 처리가 유리할 수 있다. 마찬가지로, 비록 상기 의 논술은 몇몇 구체적인 구현 디테일을 포함하지만 이러한 것들은 본 개시의 범위에 대한 한정으로 해석되어서 는 안된다. 단일 실시예의 전반에서 설명되는 일부 특징은 조합되어 단일 구현에서 구현될 수 있다. 반대로, 단 일 구현의 전반에서 설명되는 여러 가지 특징 역시, 단독으로 또는 임의의 적당한 서브 조합의 방식으로 복수의 구현에서 구현될 수 있다. 비록 이미 구조적인 특징 및/또는 방법 논리 동작에 특정된 언어를 적용하여 본 주제에 대해 설명하였으나 첨부 되는 특허청구범위에 의해 한정되는 주제는 상기에서 설명하는 특정 특징이나 동작에 국한되는 것이 아님을 이 해하여야 한다. 반대로, 상기에서 설명하는 특정 특징이나 동작은 단지 특허청구범위를 구현하는 예시적인 형식 일 뿐이다.도면 도면1 도면2 도면3 도면4 도면5 도면6"}
{"patent_id": "10-2020-0021234", "section": "도면", "subsection": "도면설명", "item": 1, "content": "첨부 도면을 결부하고 아래 상세한 설명을 참조하면 본 개시의 각 실시예의 상세한 설명 및 기타의 특징, 이점 및 측면은 더욱 분명해질 것이다. 첨부 도면에서 동일한 또는 유사한 도면 부호는 동일한 또는 유사한 요소를 나타는바, 여기서 도 1은 본 개시의 실시예에 따른 데이터에 액세스하는 예시 환경의 개략도를 도시한다. 도 2는 본 개시의 실시예에 따른 데이터에 액세스하는 방법의 흐름도를 도시한다. 도 3은 본 개시의 실시예에 따른 데이터에 액세스하는 방법의 흐름도를 도시한다. 도 4는 본 개시의 실시예에 따른 데이터를 처리하는 예시 환경의 개략도를 도시한다. 도 5는 본 개시의 실시예에 따른 데이터에 액세스하는 장치의 예시적인 블록도를 도시한다. 도 6은 본 개시의 복수의 실시예를 실시 가능한 컴퓨팅 기기의 블록도를 도시한다."}
