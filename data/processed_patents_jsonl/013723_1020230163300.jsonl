{"patent_id": "10-2023-0163300", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0011871", "출원번호": "10-2023-0163300", "발명의 명칭": "보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치, 방법 및 프로그램", "출원인": "주식회사 이글루코퍼레이션", "발명자": "박인상"}}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "통신부;적어도 하나의 인스트럭션, 오버레이 네트워크가 적용된 쿠버네티스(Kubernetes) 클러스터 내 계층적 구조를 갖는 구성들 각각에 대한 정보와 계층적 구조 및 상기 계층적 구조에 따른 상기 구성들 간의 접속 경로에 대한 정보가 저장된 저장부; 및프로세서를 포함하며,상기 프로세서는, 상기 적어도 하나의 인스트럭션을 실행하여상기 통신부를 통해 상기 쿠버네티스 클러스터에서 발생하는 이벤트를 수집하고,상기 수집한 이벤트를 보안 규칙을 기반으로 모니터링 하고,상기 모니터링 결과 이상 징후가 감지되면, 상기 저장부에 저장된 접속 경로에 대한 정보를 기반으로 상기 이상징후에 대한 공격 출발지로부터 공격 목적지까지의 접속 경로를 추적하는 것을 특징으로 하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치."}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 프로세서는,상기 쿠버네티스 클러스터 내 각 구성에 대하여 설정된 보안 중요도를 기반으로, 상기 접속 경로마다 보안 중요도를 산출하고,상기 이상 징후에 대하여 식별된 공격 출발지, 공격 목적지 및 상기 공격 출발지로부터 상기 공격 목적지에 포함된 접속 경로 상의 구성들과 접속을 시도한 횟수를 기반으로 보안 위험도를 산출하는 것을 특징으로 하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치."}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 프로세서는,상기 구성들에 설정되어 있는 보안 중요도를 고려하여 상기 보안 위험도를 산출함으로써, 동일한 접속 시도 횟수의 공격이라도 자산의 보안 중요도에 따라 상이한 보안 위험도를 산출하는 것을 특징으로 하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치."}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 프로세서는,보안 관제를 위한 적어도 하나의 보안 키워드가 수신되는 경우,공개특허 10-2025-0011871-3-미리 학습된 인공지능 모델을 이용하여 상기 보안 키워드를 기반으로 상기 쿠버네티스 클러스터 내 각 구성들에대한 보안 중요도를 산출하는 것을 특징으로 하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치."}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 프로세서는,보안 관제를 위한 적어도 하나의 보안 키워드가 수신되는 경우,미리 학습된 인공지능 모델을 이용하여 상기 보안 키워드를 기반으로 상기 쿠버네티스 클러스터 내 각 구성들과상기 접속 경로에 대한 보안 중요도를 산출하는 것을 특징으로 하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치."}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 인공지능 모델은,상기 보안 중요도를 산출한 결과를 기반으로 상기 보안 규칙을 수정하는 것을 특징으로 하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치."}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제4항에 있어서,상기 접속 경로마다 이상 징후로 판단을 위해 접속 시도 횟수에 대한 기준 횟수 및 데이터 용량 크기에 대한 기준 크기가 설정되어 있으며,상기 프로세서는,상기 보안 중요도가 산출된 결과를 기반으로, 상기 기준 횟수 및 상기 기준 크기 중 적어도 하나를 변경하는 것을 특징으로 하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치."}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 프로세서는,상기 이상 징후가 감지가 감지된 특정 pod에 관하여,상기 특정 pod와 관련된 접속 경로를 갖는 접속 경로에 관하여 모니터링 가중치를 부여하고,상기 부여된 모니터링 가중치를 기반으로 모니터링 주기를 변경하거나, 이상 징후를 판단하는 기준을 변경하는것을 특징으로 하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치.공개특허 10-2025-0011871-4-청구항 9 장치에 의해 수행되는 방법으로,상기 장치는, 오버레이 네트워크가 적용된 쿠버네티스(Kubernetes) 클러스터 내 계층적 구조를 갖는 구성들 각각에 대한 정보와 계층적 구조 및 상기 계층적 구조에 따른 상기 구성들 간의 접속 경로에 대한 정보가 저장되어 있으며,쿠버네티스(Kubernetes) 클러스터에서 발생하는 이벤트를 수집하는 단계;상기 수집된 이벤트를 보안 규칙을 기반으로 모니터링 하는 단계; 및상기 모니터링 결과 이상 징후가 감지되면, 상기 저장된 접속 경로에 대한 정보를 기반으로 상기 이상 징후에대한 공격 출발지로부터 공격 목적지의 접속 경로를 추적하는 단계를 포함하는,보안 트랜드 기반의 쿠버네티스 클러스터 감시 방법."}
{"patent_id": "10-2023-0163300", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "하드웨어인 컴퓨터와 결합되어, 제9항의 방법을 실행시키기 위하여 매체에 저장된, 프로그램."}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시는 보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치에 관한 것으로, 통신부를 통해 쿠버네티스 클러스 터에서 발생하는 이벤트를 수집하고, 수집한 이벤트를 보안 규칙을 기반으로 모니터링 하고, 모니터링 결과 이상 징후가 감지되면, 저장부에 저장된 접속 경로에 대한 정보를 기반으로 이상 징후에 대한 공격 출발지로부터 공격 목적지까지의 접속 경로를 추적할 수 있다."}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 쿠버네티스 클러스 감시 장치, 방법 및 프로그램에 관한 것이다."}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "4차 산업혁명 이후 커넥티드카, 가전제품 등 수많은 사물인터넷(IoT) 기기가 사용되면서 많은 양의 정보를 처리 하게 되었다. 그러나, 수집된 정보를 처리하는데 물리적 서버의 리소스 제한이 있으며, 서버에서 실행되는 각 애플리케이션에 대해 격리된 리소스를 할당해야 한다. 이러한 요구 사항을 충족하기 위해 가상화된 애플리케이션이 있는 여러 서버에 대한 서비스 오케스트레이션이 현실적인 솔루션으로 간주되었으며, 구체적으로 서버의 각 애플리케이션은 VM(Virtual Machine) 및 컨테이너와 같은 가상화 기술로 추상화할 수 있다. 서비스 오케스트레이션은 여러 서버의 요구에 따라 더 많은 리소스를 동적으로 할당하여 각 서비스의 확장성을 제공할 수 있으며, 다양한 오케스트레이션 플랫폼 중에서 쿠버네티스(Kubernetes)는 컨테이너화된 애플리케이션 의 자동 배포, 확장 및 관리를 허용하는 새로운 오픈 소스 기반 컨테이너 오케스트레이션 플랫폼 중 하나이다. 쿠버네티스는 컨테이너에서 애플리케이션을 쉽게 패키징하고 실행하며 분산 시스템을 탄력적으로 실행하기 위한 프레임워크를 제공한다. 또한, 쿠버네티스는 애플리케이션 실행에 필요한 소프트웨어를 구성하는 컨테이너를 관리하는 일상적인 운영 작 업을 자동화해주며, 애플리케이션을 배포하기 위해 내장된 명령을 사용하여 애플리케이션에 변경 사항을 롤아웃 하고, 변화하는 요구에 맞게 애플리케이션을 확장하는 등 다양한 작업을 수행할 수 있다. 기존의 네트워크와 다르게 쿠버네티스 클러스터가 오버레이된 네트워크는 애플리케이션의 인스턴스가 쿠버네티 스라는 추상화된 플랫폼 위에 배치되며, 노드 장애나 스케일링이 발생하면 다른 노드에 스케쥴링되며, 워커 노 드 자체가 추상화되고 애플리케이션이 어디에 배치될지 명확하지 않다는 점 때문에 모니터링이 제대로 이뤄지지 않고 있다. 이에, 종래의 네트워크 모니터링 방식과 다른 방식을 쿠버네티스 환경에 적용하여 보안 관제 시스템을 운영해야 하는 하지만, 현재로서는 이러한 기술이 공개되어 있지 않은 실정이다. 선행기술문헌특허문헌 (특허문헌 0001) 대한민국 등록특허 제10-2114339호"}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시에 개시된 실시예는 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 시스템을 제공하는데 그 목 적이 있다. 본 개시가 해결하고자 하는 과제들은 이상에서 언급된 과제로 제한되지 않으며, 언급되지 않은 또 다른 과제들 은 아래의 기재로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상술한 과제를 해결하기 위한 본 개시의 일 실시예에 따른 보안 트랜드 기반의 쿠버네티스 클러스터 감시 장치 는, 통신부; 적어도 하나의 인스트럭션, 오버레이 네트워크가 적용된 쿠버네티스(Kubernetes) 클러스터 내 계층 적 구조를 갖는 구성들 각각에 대한 정보와 계층적 구조 및 상기 계층적 구조에 따른 상기 구성들 간의 접속 경 로에 대한 정보가 저장된 저장부; 및 프로세서를 포함하며, 상기 프로세서는, 상기 적어도 하나의 인스트럭션을 실행하여 상기 통신부를 통해 상기 쿠버네티스 클러스터에서 발생하는 이벤트를 수집하고, 상기 수집한 이벤트 를 보안 규칙을 기반으로 모니터링 하고, 상기 모니터링 결과 이상 징후가 감지되면, 상기 저장부에 저장된 접 속 경로에 대한 정보를 기반으로 상기 이상 징후에 대한 공격 출발지로부터 공격 목적지까지의 접속 경로를 추 적할 수 있다. 또한,상기 프로세서는, 상기 쿠버네티스 클러스터 내 각 구성에 대하여 설정된 보안 중요도를 기반으로, 상기 접속 경로마다 보안 중요도를 산출하고, 상기 이상 징후에 대하여 식별된 공격 출발지, 공격 목적지 및 상기 공 격 출발지로부터 상기 공격 목적지에 포함된 접속 경로 상의 구성들과 접속을 시도한 횟수를 기반으로 보안 위 험도를 산출할 수 있다. 또한, 상기 프로세서는, 상기 구성들에 설정되어 있는 보안 중요도를 고려하여 상기 보안 위험도를 산출함으로 써, 동일한 접속 시도 횟수의 공격이라도 자산의 보안 중요도에 따라 상이한 보안 위험도를 산출할 수 있다. 또한, 상기 프로세서는, 보안 관제를 위한 적어도 하나의 보안 키워드가 수신되는 경우, 미리 학습된 인공지능 모델을 이용하여 상기 보안 키워드를 기반으로 상기 쿠버네티스 클러스터 내 각 구성들에 대한 보안 중요도를 산출할 수 있다. 또한, 상기 프로세서는, 보안 관제를 위한 적어도 하나의 보안 키워드가 수신되는 경우, 미리 학습된 인공지능 모델을 이용하여 상기 보안 키워드를 기반으로 상기 쿠버네티스 클러스터 내 각 구성들과 상기 접속 경로에 대 한 보안 중요도를 산출할 수 있다. 또한, 상기 인공지능 모델은, 상기 보안 중요도를 산출한 결과를 기반으로 상기 보안 규칙을 수정할 수 있다. 또한, 상기 접속 경로마다 이상 징후로 판단을 위해 접속 시도 횟수에 대한 기준 횟수 및 데이터 용량 크기에 대한 기준 크기가 설정되어 있으며, 상기 프로세서는, 상기 보안 중요도가 산출된 결과를 기반으로, 상기 기준 횟수 및 상기 기준 크기 중 적어도 하나를 변경할 수 있다. 또한, 상기 프로세서는, 상기 이상 징후가 감지가 감지된 특정 pod에 관하여, 상기 특정 pod와 관련된 접속 경 로를 갖는 접속 경로에 관하여 모니터링 가중치를 부여하고, 상기 부여된 모니터링 가중치를 기반으로 모니터링 주기를 변경하거나, 이상 징후를 판단하는 기준을 변경할 수 있다. 또한, 상술한 과제를 해결하기 위한 본 개시의 일 실시예에 따른 보안 트랜드 기반의 쿠버네티스 클러스터 감시 방법은, 장치에 의해 수행되는 방법으로, 상기 장치는, 오버레이 네트워크가 적용된 쿠버네티스(Kubernetes) 클 러스터 내 계층적 구조를 갖는 구성들 각각에 대한 정보와 계층적 구조 및 상기 계층적 구조에 따른 상기 구성 들 간의 접속 경로에 대한 정보가 저장되어 있으며, 쿠버네티스(Kubernetes) 클러스터에서 발생하는 이벤트를 수집하는 단계; 상기 수집된 이벤트를 보안 규칙을 기반으로 모니터링 하는 단계; 및 상기 모니터링 결과 이상징후가 감지되면, 상기 저장된 접속 경로에 대한 정보를 기반으로 상기 이상 징후에 대한 공격 출발지로부터 공 격 목적지의 접속 경로를 추적하는 단계를 포함한다. 이 외에도, 본 개시를 구현하기 위한 실행하기 위한 컴퓨터 판독 가능한 기록 매체에 저장된 컴퓨터 프로그램이 더 제공될 수 있다. 이 외에도, 본 개시를 구현하기 위한 방법을 실행하기 위한 컴퓨터 프로그램을 기록하는 컴퓨터 판독 가능한 기 록 매체가 더 제공될 수 있다."}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 전술한 과제 해결 수단에 의하면, 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 시스템을 제공하는 효과를 제공한다. 본 개시의 효과들은 이상에서 언급된 효과로 제한되지 않으며, 언급되지 않은 또 다른 효과들은 아래의 기재로 부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 개시 전체에 걸쳐 동일 참조 부호는 동일 구성요소를 지칭한다. 본 개시가 실시예들의 모든 요소들을 설명하"}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "는 것은 아니며, 본 개시가 속하는 기술분야에서 일반적인 내용 또는 실시예들 간에 중복되는 내용은 생략한다. 명세서에서 사용되는 ‘부, 모듈, 부재, 블록’이라는 용어는 소프트웨어 또는 하드웨어로 구현될 수 있으며, 실시예들에 따라 복수의 '부, 모듈, 부재, 블록'이 하나의 구성요소로 구현되거나, 하나의 '부, 모듈, 부재, 블 록'이 복수의 구성요소들을 포함하는 것도 가능하다.명세서 전체에서, 어떤 부분이 다른 부분과 \"연결\"되어 있 다고 할 때, 이는 직접적으로 연결되어 있는 경우뿐 아니라, 간접적으로 연결되어 있는 경우를 포함하고, 간접 적인 연결은 무선 통신망을 통해 연결되는 것을 포함한다. 또한, 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소 를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 명세서 전체에서, 어떤 부재가 다른 부재 \"상에\" 위치하고 있다고 할 때, 이는 어떤 부재가 다른 부재에 접해 있는 경우뿐 아니라 두 부재 사이에 또 다른 부재가 존재하는 경우도 포함한다. 제1, 제2 등의 용어는 하나의 구성요소를 다른 구성요소로부터 구별하기 위해 사용되는 것으로, 구성요소가 전 술된 용어들에 의해 제한되는 것은 아니다. 단수의 표현은 문맥상 명백하게 예외가 있지 않는 한, 복수의 표현을 포함한다. 각 단계들에 있어 식별부호는 설명의 편의를 위하여 사용되는 것으로 식별부호는 각 단계들의 순서를 설명하는 것이 아니며, 각 단계들은 문맥상 명백하게 특정 순서를 기재하지 않는 이상 명기된 순서와 다르게 실시될 수 있다. 이하 첨부된 도면들을 참고하여 본 개시의 작용 원리 및 실시예들에 대해 설명한다. 본 명세서에서 '본 개시에 따른 통합 보안 관제 장치'는 연산처리를 수행하여 사용자에게 결과를 제공할 수 있 는 다양한 장치들이 모두 포함된다. 예를 들어, 본 개시에 따른 통합 보안 관제 장치는, 컴퓨터, 서버 장치 및 휴대용 단말기를 모두 포함하거나, 또는 어느 하나의 형태가 될 수 있다. 여기에서, 상기 컴퓨터는 예를 들어, 웹 브라우저가 탑재된 노트북, 데스크톱, 랩톱, 태블릿 PC, 슬레이트 PC 등을 포함할 수 있다. 상기 서버 장치는 외부 장치와 통신을 수행하여 정보를 처리하는 서버로써, 애플리케이션 서버, 컴퓨팅 서버, 데이터베이스 서버, 파일 서버, 게임 서버, 메일 서버, 프록시 서버 및 웹 서버 등을 포함할 수 있다. 상기 휴대용 단말기는 예를 들어, 휴대성과 이동성이 보장되는 무선 통신 장치로서, PCS, GSM, PDC(Personal Digital Cellular), PHS(Personal Handyphone System), PDA(Personal Digital Assistant), IMT(International Mobile Telecommunication)-2000, CDMA(Code Division Multiple Access)-2000, W-CDMA(W-Code Division Multiple Access), WiBro(Wireless Broadband Internet) 단말, 스마트폰(Smart Phone) 등과 같은 모든 종류의 핸드헬드(Handheld) 기반의 무선 통신 장치와 시계, 반지, 팔찌, 발찌, 목걸이, 안경, 콘택트 렌즈, 또는 머리 착용형 장치(head-mounted-device(HMD) 등과 같은 웨어러블 장치를 포함할 수 있다. 본 개시에 따른 인공지능과 관련된 기능은 프로세서와 저장부를 통해 동작된다. 프로세서는 하나 또는 복수의 프로세서로 구성될 수 있다. 이때, 하나 또는 복수의 프로세서는 CPU, AP, DSP(Digital Signal Processor) 등 과 같은 범용 프로세서, GPU, VPU(Vision Processing Unit)와 같은 그래픽 전용 프로세서 또는 NPU와 같은 인 공지능 전용 프로세서일 수 있다. 하나 또는 복수의 프로세서는, 저장부에 저장된 기 정의된 동작 규칙 또는 인 공지능 모델에 따라, 입력 데이터를 처리하도록 제어한다. 또는, 하나 또는 복수의 프로세서가 인공지능 전용 프로세서인 경우, 인공지능 전용 프로세서는, 특정 인공지능 모델의 처리에 특화된 하드웨어 구조로 설계될 수 있다. 기 정의된 동작 규칙 또는 인공지능 모델은 학습을 통해 만들어진 것을 특징으로 한다. 여기서, 학습을 통해 만 들어진다는 것은, 기본 인공지능 모델이 학습 알고리즘에 의하여 다수의 학습 데이터들을 이용하여 학습됨으로 써, 원하는 특성(또는, 목적)을 수행하도록 설정된 기 정의된 동작 규칙 또는 인공지능 모델이 만들어짐을 의미 한다. 이러한 학습은 본 개시에 따른 인공지능이 수행되는 기기 자체에서 이루어질 수도 있고, 별도의 서버 및/ 또는 시스템을 통해 이루어질 수도 있다. 학습 알고리즘의 예로는, 지도형 학습, 비지도 형 학습, 준지도형 학 습 또는 강화 학습이 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은, 복수의 신경망 레이어들로 구성될 수 있다. 복수의 신경망 레이어들 각각은 복수의 가중치들 을 갖고 있으며, 이전 레이어의 연산 결과와 복수의 가중치들 간의 연산을 통해 신경 망 연산을 수행한다. 복수 의 신경망 레이어들이 갖고 있는 복수의 가중치들은 인공지능 모델의 학습 결과에 의해 최적화될 수 있다. 예를 들어, 학습 과정 동안 인공지능 모델에서 획득한 로스 값 또는 코스트 값이 감소 또는 최소화되도록 복수의 가 중치들이 갱신될 수 있다. 인공 신경망은 심층 신경망(DNN: Deep Neural Network)를 포함할 수 있으며, 예를 들 어, CNN (Convolutional Neural Network), DNN (Deep Neural Network), RNN (Recurrent Neural Network), RBM (Restricted Boltzmann Machine), DBN (Deep Belief Network), BRDNN(Bidirectional Recurrent Deep Neural Network) 또는 심층 Q-네트워크 등이 있으나, 전술한 예에 한정되지 않는다. 본 개시의 예시적인 실시예에 따르면, 프로세서는 인공지능을 구현할 수 있다. 인공지능이란 사람의 신경세포 (biological neuron)를 모사하여 기계가 학습하도록 하는 인공신경망 기반의 기계 학습법을 의미한다. 인공지능 의 방법론에는 학습 방식에 따라 훈련데이터로서 입력데이터와 출력데이터가 같이 제공됨으로써 문제(입력 데이 터)의 해답(출력 데이터)이 정해져 있는 지도학습(supervised learning), 및 출력데이터 없이 입력데이터만 제 공되어 문제(입력 데이터)의 해답(출력 데이터)이 정해지지 않는 비지도학습(unsupervised learning), 및 현재 의 상태에서 어떤 행동을 취할 때마다 외부 환경에서 보상이 주어지는데, 이러한 보상을 최대화하는 방향으로 학습을 진행하는 강화학습(reinforcement learning)으로 구분될 수 있다. 또한, 인공지능의 방법론은 학습 모델 의 구조인 아키텍처에 따라 구분될 수도 있는데, 널리 이용되는 딥러닝 기술의 아키텍처는, 합성곱신경망, 순환 신경망, 트랜스포머, 생성적 대립 신경망 등으로 구분될 수 있다. 본 장치는 인공지능 모델을 포함할 수 있다. 인공지능 모델은 하나의 인공지능 모델일 수 있고, 복수의 인공지 능 모델로 구현될 수도 있다. 인공지능 모델은 뉴럴 네트워크(또는 인공 신경망)로 구성될 수 있으며, 기계학습 과 인지과학에서 생물학의 신경을 모방한 통계학적 학습 알고리즘을 포함할 수 있다. 뉴럴 네트워크는 시냅스의 결합으로 네트워크를 형성한 인공 뉴런(노드)이 학습을 통해 시냅스의 결합 세기를 변화시켜, 문제 해결 능력을가지는 모델 전반을 의미할 수 있다. 뉴럴 네트워크의 뉴런은 가중치 또는 바이어스의 조합을 포함할 수 있다. 뉴럴 네트워크는 하나 이상의 뉴런 또는 노드로 구성된 하나 이상의 레이어를 포함할 수 있다. 예시적으로, 장 치는 input layer, hidden layer, output layer를 포함할 수 있다. 장치를 구성하는 뉴럴 네트워크는 뉴런의 가중치를 학습을 통해 변화시킴으로써 임의의 입력으로부터 예측하고자 하는 결과를 추론할 수 있다. 프로세서는 뉴럴 네트워크를 생성하거나, 뉴럴 네트워크를 훈련(train, 또는 학습(learn)하거나, 수신되는 입력 데이터를 기초로 연산을 수행하고, 수행 결과를 기초로 정보 신호를 생성하거나, 뉴럴 네트워크를 재훈련할 수 있다. 뉴럴 네트워크의 모델들은 GoogleNet, AlexNet, VGG Network 등과 같은 CNN, R-CNN, RPN, RNN, S-DNN, S-SDNN, Deconvolution Network, DBN, RBM, Fully Convolutional Network, LSTM Network, Classification Network 등 다양한 종류의 모델들을 포함할 수 있으나 이에 제한되지는 않는다. 프로세서는 뉴럴 네트워크의 모 델들에 따른 연산을 수행하기 위한 하나 이상의 프로세서를 포함할 수 있다. 예를 들어 뉴럴 네트워크는 심층 뉴럴 네트워크를 포함할 수 있다. 뉴럴 네트워크는 CNN, RNN, 퍼셉트, 다층 퍼셉트론, FF(Feed Forward), RBF(Radial Basis Network), DFF(Deep Feed Forward), LSTM(Long Short Term Memory), GRU(Gated Recurrent Unit), AE(Auto Encoder), VAE(Variational Auto Encoder), DAE(Denoising Auto Encoder), SAE(Sparse Auto Encoder), MC(Markov Chain), HN(Hopfield Network), BM(Boltzmann Machine), RBM(Restricted Boltzmann Machine), DBN(Depp Belief Network), DCN(Deep Convolutional Network), DN(Deconvolutional Network), DCIGN(Deep Convolutional Inverse Graphics Network), GAN(Generative Adversarial Network), LSM(Liquid State Machine), ELM(Extreme Learning Machine), ESN(Echo State Network), DRN(Deep Residual Network), DNC(Differentiable Neural Computer), NTM(Neural Turning Machine), CN(Capsule Network), KN(Kohonen Network) 및 AN(Attention Network)를 포함할 수 있으나 이에 한정되는 것이 아닌 임의의 뉴럴 네트워크를 포함 할 수 있음은 통상의 기술자가 이해할 것이다. 본 개시의 예시적인 실시예에 따르면, 프로세서는 GoogleNet, AlexNet, VGG Network 등과 같은 CNN(Convolution Neural Network), R-CNN(Region with Convolution Neural Network), RPN(Region Proposal Network), RNN(Recurrent Neural Network), S-DNN(Stacking-based deep Neural Network), S-SDNN(State-Space Dynamic Neural Network), Deconvolution Network, DBN(Deep Belief Network), RBM(Restrcted Boltzman Machine), Fully Convolutional Network, LSTM(Long Short-Term Memory) Network, Classification Network, Generative Modeling, eXplainable AI, Continual AI, Representation Learning, AI for Material Design, 자 연어 처리를 위한 BERT, SP-BERT, MRC/QA, Text Analysis, Dialog System, GPT-3, GPT-4, 비전 처리를 위한 Visual Analytics, Visual Understanding, Video Synthesis, ResNet 데이터 지능을 위한 Anomaly Detection, Prediction, Time-Series Forecasting, Optimization, Recommendation, Data Creation 등 다양한 인공지능 구 조 및 알고리즘을 이용할 수 있으며, 이에 제한되지 않는다. 이하, 첨부된 도면을 참조하여 본 개시의 실시예를 상세하게 설명한다. 도 1은 본 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 장치의 블 록도이다. 다만, 몇몇 실시예에서 통합 보안 관제 장치는 도 1에 도시된 구성요소보다 더 적은 수의 구성요소나 더 많은 구성요소를 포함할 수도 있다. 아래 실시예에서는, 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 장치를 통합 보안 관제 장치로 명칭하돌고 한다. 도 1을 참조하면, 본 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 장치 는 프로세서, 통신부 및 저장부를 포함한다. 본 개시의 실시예에 따른 통합 보안 관제 장치는 서버 장치를 포함하도록 구성될 수 있으며, 쿠버네 티스 클러스터의 모니터링을 위한 통합 보안 관제 서버일 수 있다. 다만, 몇몇 실시예에서 통합 보안 관제 장치는 도 1에 도시된 구성요소보다 더 적은 수의 구성요소나 더 많은 구성요소를 포함할 수도 있다. 통합 보안 관제 장치는 저장부에 저장된 인스트럭션을 실행하는 하나 이상의 프로세서를 포함한 다.프로세서는 본 장치 내의 구성요소들의 동작을 제어하기 위한 알고리즘 또는 알고리즘을 재현한 프로 그램에 대한 데이터를 저장하는 저장부, 및 저장부에 저장된 데이터를 이용하여 전술한 동작을 수행 하는 적어도 하나의 프로세서로 구현될 수 있다. 이때, 저장부와 프로세서는 각각 별개의 칩으 로 구현될 수 있다. 또는, 저장부와 프로세서는 단일 칩으로 구현될 수도 있다. 또한, 프로세서는 이하의 도면에서 설명되는 본 개시에 따른 다양한 실시 예들을 본 장치 상에서 구 현하기 위하여, 위에서 살펴본 구성요소들을 중 어느 하나 또는 복수를 조합하여 제어할 수 있다. 프로세서는 상기 응용 프로그램과 관련된 동작 외에도, 통상적으로 본 장치의 전반적인 동작을 제어 할 수 있다. 프로세서는 위에서 살펴본 구성요소들을 통해 입력 또는 출력되는 신호, 데이터, 정보 등을 처리하거나 저장부에 저장된 응용 프로그램을 구동함으로써, 사용자에게 적절한 정보 또는 기능을 제공 또 는 처리할 수 있다. 또한, 프로세서는 저장부에 저장된 응용 프로그램을 구동하기 위하여, 본 장치의 구성요소들 중 적어도 일부를 제어할 수 있다. 나아가, 프로세서는 상기 응용 프로그램의 구동을 위하여, 본 장치에 포함된 구성요소들 중 적어도 둘 이상을 서로 조합하여 동작 시킬 수 있다. 통신부는 통합 보안 관제 장치를 하나 이상의 네트워크에 연결하는 하나 이상의 모듈을 포함할 수 있 다. 통신부는 외부 장치와 통신을 가능하게 하는 하나 이상의 구성 요소를 포함할 수 있으며, 예를 들어, 방송 수신 모듈, 유선통신 모듈, 무선통신 모듈, 근거리 통신 모듈, 위치정보 모듈 중 적어도 하나를 포함할 수 있다. 유선 통신 모듈은, 지역 통신(Local Area Network; LAN) 모듈, 광역 통신(Wide Area Network; WAN) 모듈 또는 부가가치 통신(Value Added Network; VAN) 모듈 등 다양한 유선 통신 모듈뿐만 아니라, USB(Universal Serial Bus), HDMI(High Definition Multimedia Interface), DVI(Digital Visual Interface), RS-232(recommended standard232), 전력선 통신, 또는 POTS(plain old telephone service) 등 다양한 케이블 통신 모듈을 포함할 수 있다. 무선 통신 모듈은 와이파이(Wifi) 모듈, 와이브로(Wireless broadband) 모듈 외에도, GSM(global System for Mobile Communication), CDMA(Code Division Multiple Access), WCDMA(Wideband Code Division Multiple Access), UMTS(universal mobile telecommunications system), TDMA(Time Division Multiple Access), LTE(Long Term Evolution), 4G, 5G, 6G 등 다양한 무선 통신 방식을 지원하는 무선 통신 모듈을 포함할 수 있 다. 무선 통신 모듈은 통신 신호를 송신하는 안테나 및 송신기(Transmitter)를 포함하는 무선 통신 인터페이스를 포 함할 수 있다. 또한, 무선 통신 모듈은 프로세서의 제어에 따라 무선 통신 인터페이스를 통해 프로세서 로부터 출력된 디지털 제어 신호를 아날로그 형태의 무선 신호로 변조하는 신호 변환 모듈을 더 포함할 수 있다. 근거리 통신 모듈은 근거리 통신(Short range communication)을 위한 것으로서, 블루투스(Bluetooth쪠), RFID(Radio Frequency Identification), 적외선 통신(Infrared Data Association; IrDA), UWB(Ultra- Wideband), ZigBee, NFC(Near Field Communication), Wi-Fi(Wireless-Fidelity), Wi-Fi Direct, Wireless USB(Wireless Universal Serial Bus) 기술 중 적어도 하나를 이용하여, 근거리 통신을 지원할 수 있다. 저장부는 본 장치의 다양한 기능을 지원하는 데이터를 저장할 수 있다. 저장부는 본 장치 에서 구동되는 다수의 응용 프로그램(application program 또는 애플리케이션(application)), 본 장치의 동작을 위한 데이터들, 명령어들을 저장할 수 있다. 이러한 응용 프로그램 중 적어도 일부는, 본 장치의 기본적인 기능을 위하여 존재할 수 있다. 한편, 응용 프로그램은, 저장부에 저장되고, 장치에 설치되 어, 프로세서에 의하여 동작(또는 기능)을 수행하도록 구동될 수 있다. 저장부는 본 장치의 다양한 기능을 지원하는 데이터와, 프로세서의 동작을 위한 프로그램을 저 장할 수 있고, 입/출력되는 데이터들(예를 들어, 음악 파일, 정지영상, 동영상 등)이 저장될 수 있고, 본 장치 에서 구동되는 다수의 응용 프로그램(application program 또는 애플리케이션(application)), 본 장치 의 동작을 위한 데이터들, 명령어들을 저장할 수 있다. 이러한 응용 프로그램 중 적어도 일부는, 무선 통 신을 통해 외부 서버로부터 다운로드 될 수 있다.이러한, 저장부는 플래시 메모리 타입(flash memory type), 하드디스크 타입(hard disk type), SSD 타입 (Solid State Disk type), SDD 타입(Silicon Disk Drive type), 멀티미디어 카드 마이크로 타입(multimedia card micro type), 카드 타입의 메모리(예를 들어 SD 또는 XD 메모리 등), 램(random access memory; RAM), SRAM(static random access memory), 롬(read-only memory; ROM), EEPROM(electrically erasable programmable read-only memory), PROM(programmable read-only memory), 자기 메모리, 자기 디스크 및 광디스 크 중 적어도 하나의 타입의 저장매체를 포함할 수 있다. 또한, 저장부는 본 장치와는 분리되어 있으 나, 유선 또는 무선으로 연결된 데이터베이스가 될 수도 있다. 또한, 저장부는 통합 보안 관제 장치를 위한 복수의 프로세스를 구비할 수 있다. 도 2는 쿠버네티스 클러스터의 예시도이다. 도 3은 오버레이 네트워크가 적용된 쿠버네티스 클러스터를 예시한 도면이다. 먼저, 도 2를 참조하여 먼저, 쿠버네티스 클러스터에 대하여 간략하게 설명하도록 한다. 마스터 노드(Master Node)는 쿠버네티스 클러스터 전체를 컨트롤하는 시스템으로, 마스터 노드는 API SERVER를 통해 쿠버네티스를 관리하고, 모든 구성들은 API SERVER를 통해서 통신한다. 마스터 노드는 API SERVER, etcd, Kube-Scheduler, Kube-Controller를 포함한다. API SERVER는 kubectl과 같은 클라이언트로부터 오는 요청을 받고, API 오브젝트를 구성한다. API SERVER는 쿠버네티스 내부의 모든 구성들이 서로 호출하기 위해 사용하는 구성으로, kubectl의 요청뿐만 아 니라 내부 모듈의 요청을 처리하고 권한을 체크하고 요청을 거부할 수 있다. API SERVER는 노드에서 실행중인 컨테이너의 로그를 확인하는 디버거 역할도 가능하다. etcd는 쿠버네티스 클러스터의 데이터베이스 역할을 하는 서버로, 클러스터의 모든 설정, 상태에 관한 데 이터를 저장할 수 있다. etcd는 클러스터 안의 각 구성요소들에 대한 정보가 키-값 형태로 저장되는 데이터베이스이다. Kube-Scheduler는 쿠버네티스의 스케쥴러이며, 새로 생성된 pod가 실행될 노드를 선택한다. 스케쥴링이란 pod를 실행할 노드를 정하는 것을 의미한다. Kube-Scheduler는 pod(pod), 서비스 등 각 리소스들을 적절한 노드에 할당하는 역할을 담당하며, pod을 어떤 노 드에서 실행할지 결정하고, 노드에 배치된 pod은 각 노드의 kubelet에 의해 컨테이너로 생성된다. Kube-Controller는 쿠버네티스의 ReplicaSet, Deployment 등 컨트롤러를 관리하고 적절한 노드에 할당하는 역 할을 담당하며, 각 컨트롤러에게 pod의 복제, 배포 등의 명령을 수행한다. 워커 노드(Worker Node)는 마스터 노드로부터 명령을 받고 실제 워크 로드를 생성하여 서비스하는 구성이다. 워커 노드는 실제 컨테이너들이 생성되는 가상 머신 또는 물리적인 서버로, 각각 서버에 라벨을 붙여서 사용 목 적을 정의할 수도 있으며, API SERVER의 요청을 kubelet을 통해 수행할 수 있다. 워커 노드는 kubelet, kube-proxy, Container Runtime, Addons, cAdvisor를 포함할 수 있다. Kubelet은 노드에 배포되는 agent로 마스터 노드의 API SERVER와 통신하는 역할을 담당한다. Kubelet은 마스터 노드의 API SERVER로부터 수행할 명령을 받아서 워커 노드를 수행시키며, 워커 노드의 상태를 마스터 노드로 전달한다. Kubelet은 해당 컨테이너가 정상적으로 동작하는지 지속적으로 모니터링하며, 주기적으로 API SERVER와 통신하 며 마스터와 노드 간에 필요한 정보를 주고받는다. (예: 노드의 상태 정보, 리소스 사용량 등) Kube-proxy는 노드에 할당된 pod로 연결되는 네트워크를 관리하며, 노드로 오는 트래픽을 적절한 컨테이너로 프 록시하고 노드와 마스터 노드 간의 네트워크 통신을 관리한다. Kube-proxy는 클러스터 내부에 별도의 가상 네트워크가 동작할 수 있도록 하며, TCP, UDP, SCTP 스트림을 포워 딩하고, 여러 개의 pod를 라운드 로빈 형태로 묶어서 서비스를 제공할 수 있다. Kube-proxy는 노드로 들어오는 트래픽을 적절한 컨테이너로 라우팅, 로드밸런싱, 프록시하며 통신을 관리할 수 있다. Container Runtime은 pod를 통해서 배포된 컨테이너를 실제로 실행시키며, 컨테이너 런타임 중에서 대표적인 예 로 도커(Docker)가 있고, 그 외에 갓, runc 같은 런타임도 지원한다. Addons는 클러스터 내부에서 필요한 기능을 실행시키기 위한 pod이다. cAdvisor는 노드의 모니터링 agent로 노드에서 가동되는 컨테이너들의 상태정보를 수집하여 마스터 노드의 API SERVER로 전달한다. 쿠버네티스에서 kubectl은 쿠버네티스 클러스터를 조작하기 위한 커맨드 라인 인터페이스(CLI)이다. pod는 쿠버네티스 클러스터에서 컨테이너를 실행하는 최소 단위이며, pod는 하나 혹은 여러 개의 컨테이너 를 포함한다. 그리고, 특정 pod에 속하는 컨테이너들은 같은 노드에서 작동한다. 즉, pod는 서로 다른 노드에 설쳐서 존재하 지는 않고 하나의 노드에 존재한다. 이와 같은 쿠버네티스 클러스터는 컨테이너 오케스트레이션 플랫폼으로, 컨테이너화되어 있는 어플리케이 션을 배포, 스케일링, 관리하는데 사용되며, 쿠버네티스는 대규모 분산 시스템에서 확장성, 신뢰성 및 유연성을 제공하므로 보안관제 시스템 등에서도 매우 유용하게 사용될수 있다. 도 3을 참조하면, 오버레이 네트워크가 적용된 쿠버네티스 클러스터가 예시되어 있다. Pod은 적어도 하나의 컨테이너를 포함하며, 파드 내부에 컨테이너끼리는 포트 정보만으로 네트워크를 공유할 수 있다. Pod 내의 컨테이너는 veth(Virtual Ethernet Devices) 네트워크를 같이 공유한다. 컨테이너 내부에는 웹 서버 같은 것들이 동작을 하는데, 이것들은 동작 결과에 대한 로그를 남긴다. 네트워크 네임 스페이스는 서로 연결되기 전까지는 독립적으로 동작한다. 이 때 서로의 네트워크 네임스페이스 를 연결시켜주는 역할을 하는 것이 veth(Virtual Ethernet)라는 가상장치이다. 이렇게 베스로 양쪽 끝을 서로 다른 네트워크 네임스페이스 또는 장치에 연결할 수 있으므로 베스쌍(veth pai r)이라고도 한다. 쿠버네티스는 kubenet이라는 아주 기본적이고 간단한 네트워크 플러그인을 제공해준다. 하지만 이 네트워크 플 러그인은 크로스 노드 네트워킹이나 네트워크 정책설정과 같은 고급 기능은 구현이 되어있지 않다. 따라서 CNI(Container Network Interface)의 스펙을 준수하는 네트워크 플러그인을 따로 사용해야한다. Pod의 특징 중 하나로 각 Pod는 고유한 IP 주소를 가진다. (이것이 위에서 설명한 가상 네트워크 인터페이스 veth이다.) 따라서 각 Pod는 kubenet 혹은 CNI 로 구성된 네트워크 인터페이스를 통하여 고유한 IP 주소로 서로 통신할 수 있다. 여러 개의 워커 노드 사이에 각각 다른 노드에 존재하는 Pod가 서로 통신하려면 라우터를 거쳐서 통신하게 된다. Pod는 기본적으로 쉽게 대체될 수 있는 존재이기 때문에 Pod to Pod Network만으로는 Kubernetes 시스템을 내구 성있게 구축할 수 없다. CNI(Container Network Interface)는 리눅스 컨테이너를 위한 네트워킹으로, 컨테이너 간의 네트워킹을 제어할 수 있는 플러그인을 만들기 위한 표준이다. 컨테이너의 발전이 가속화됨에 따라 다양한 형태로 컨테이너 런타임 과 오케스트레이터 사이의 네트워크 계층을 구현하는 방식이 다양하게 분리되어 각자만의 방식으로 발전하게 되 는 것을 피하기 위해 공통된 인터페이스를 제공하기 위해 만들어졌다고 하며, 네트워크 인터페이스의 사실상 표 준으로 사용되고 있다. Kubernetes Cluster 내부는 Master Node에 의해 여러 컨테이너가 생성 삭제 복구를 반복하고 있으며, 그에 따라 각 컨테이너의 고정적이지 않고 재할당이 빈번하게 일어난다. 이러한 특징을 해결하기 위해 Kubernetes Cluster는 가상 네트워크가 구성되어 있는데 기본적으로는 Worker Node의 kube-proxy 가 네트워크를 관리하지만 보다 효율적인 네트워크 환경을 구성하기 위해 다양한 네트워크 관련 Addon 이 제공되며, Ingress, Flannel, ACI, Calico, Canal, Cilium, CNI-Genie, Contiv, Multus, NSX- T, Nuage, Romana, Weave Net와 같은 것들이 있다. 서로 다른 노드에 있는 pod 간 통신을 완성하기 위해서는 관련 기능을 제공하는 CNI가 필요하며, Flannel 은 대 표적인 CNI 종류 중 하나이다. Flannel은 Kubernetes 용으로 설계된 오버레이 네트워크(overlay network)로 L3 네트워크를 구성하는 가장 간 단하고 쉬운 방법을 제공한다. Flannel 네트워크 모델은 데몬셋으로 실행되며, 노드 개수만큼 Flannel pod가 실행되 수 있다. 언더레이 네트워크는 실제 장비를 이용하여 물리적인 인프라를 의미하는 것으로, 물리적인 인프라를 구성하는 요소는 네트워크 장비, 보안 장비 그리고 서비스를 제공하는 서버까지 포함되는 포괄적인 의미로 사용된다. 오버레이 네트워크는 기존 네트워크를 바탕으로 그 위에 구성된 또 다른 네트워크, 기존의 네트워크 위에 별도 의 노드들(nodes)과 논리적 링크들(logical links)을 구성하여 이루어진 가상 네트워크이며, 노드들의 네트워크 망을 한개의 네트워크 망처럼 인식하는 것을 오버레이라고 할 수 있다. 또한, 오버레이 네트워크는 물리적인 인프라를 기반으로 네트워크 가상화 기술을 사용하여 End-to-End 통신을 수행하는 것으로, Tunnel 구성을 한다고 표현할 수 있다. CNI는 물리적으로 떨어져 있는 노드 네트워크 망을 마치 하나의 네트워크 망처럼 인식하여 통신할 수 있으며, 노드의 컨테이너 네트워크 구성은 결국 가상 네트워크이고, 물리적으로 떨어져 있는 가상 네트워크가 한 개의 가상 네트워크처럼 동작해야한다. NAT는 Network Address Translation으로, Private IP를 Public IP로 변환한 것이다. eth0는 physical network interface로 리눅스 시스템에 설치되어 있는 첫 번째 이더넷 카드이며, 컨테이너는 veth, eth0를 통해서 외부와 통신할 수 있다. 네임스페이스(Namespace)는 리소스를 논리적으로 나누기 위한 방법을 제공하는 것이라 할 수 있다. 쿠버네티스 환경에서는 노드를 기반으로 논리적으로 구성되어 있는데, NameSpace는 쿠버네티스 오브젝트를 묶는 하나의 그룹이다. Pod는 쿠버네티스에서 관리 가능한 가장 작은 배포 단위이며, pod는 컨테이너를 포함하고 있다. 컨테이너는 pod 안에 있는 앱이라고 볼 수 있다. 예를 들어, A 회사의 홈페이지가 쿠버네티스 환경에서 동작하고 있다면, A 회사는 NameSpace가 되고, 그 안에 pod가 존재하고, pod에 web server가 컨테이너로 동작하게 된다. 본 개시의 실시예에 따른 장치는 쿠버네티스라는 인프라를 모니터링하기 위한 것으로, 네트워크 인터페이 스(veth), 포트 등의 네트워크 정보가 필수적으로 필요할 수 있다. 쿠버네티스 클러스터 내 구성(오브젝트)는 pod만 있는 것이 아니며, label, deployment, statefulset, veth, eth0 등 다양한 구성들이 존재한다. 이러한 구성들을 구분하기 위해 쿠버네티스에서는 네임스페이스(Namespace)를 제공하여 사용한다. 즉, 쿠버네티 스에서 네임스페이스는 쿠버네티스 클러스터 내 논리적인 분리 단위이며, 클러스터 내의 오브젝트들을 네 임스페이스를 통해 논리적인 분리를 시키게 된다. Namespace는 쿠버네티스 상의 API 오브젝트를 논리적으로 구분하여 그룹핑한다. Namespace는 논리적인 그룹에 대하여 권한 관리, CPU & Memory 등 리소스 제한 등을 할 수 있다. Namespace의 단위는 사용자 목적에 맞추어 결정한다. 딱 이렇다할 정답이 있는 게 아니다. 가령 다음의 예시처 럼 어떤 논리적 단위로 구분할지를 결정할 수 있는 것이다. 본 개시의 실시예에서 통합 보안 관제 장치는 보안 관제를 위해 컨테이너 정보, 파드 정보 및 쿠버네티스 클러스터 내 네임스페이 정보가 필수적으로 필요하며, 이에 관한 상세한 내용들은 후술하도록 한다. 도 4는 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 방법의 흐름도이다. 도 5는 감지된 이상 징후에 대한 공격 출발지와 공격 목적지의 위치를 식별한 것을 예시한 도면이다. 도 6은 도 5과 같이 식별된 위치와 저장부에 저장된 접속 경로를 기반으로 공격 출발지로부터 공격 목적지의 접 속 경로를 식별하는 것을 예시한 도면이다. 본 개시의 실시예에서 통합 보안 관제 장치는 쿠버네티스 클러스터에서 발생하는 이벤트를 통신부 를 통해 수집하며, 수집된 이벤트를 기 설정된 보안 규칙을 기반으로 모니터링한다. 그리고, 통합 보안 관제 장치는 모니터링 결과 감시 대상 자산에 이상 징후가 판단되면, 저장부에 저 장되어 있는 접속 경로를 기반으로 이상 징후에 대한 공격 출발지로부터 공격 목적지의 접속 경로를 추적한다. 프로세서는 로그 및 이벤트의 상관 분석 및 검색을 이용하여 공격 출발지 및 공격 목적지를 식별할 수 있 다. 보다 상세하게는, 프로세서는 네트워크 트래픽(bps)이 특정 시점에 임계값 이상일 경우, 해당 시점의 로그 및 이벤트를 확인하여 공격 출발지와 공격 목적지를 식별할 수 있다. 통합 보안 관제 장치의 저장부는 오버레이 네트워크가 적용된 쿠버네티스 클러스터 내 계층적 구조를 갖는 구성들 각각에 대한 정보와 계층적 구조 및 상기 계층적 구조에 따른 구성들 간의 접속 경로들이 저장되어 있다. 본 개시의 실시예에서, 쿠버네티스 클러스터 내 구성(오브젝트)는 Router, eth0, NAT, Flannel, CNI, veth, POD, Container 등을 포함할 수 있으며, 각 구성(오브젝트)들은 다른 구성과 계층적 구조를 갖고 있다. 즉, 저장부는 쿠버네티스 클러스터 내 구성들에 대한 정보는 물론 각 구성과 다른 구성간의 계층적 구조가 저장되어 있다. 예를 들어, 제1 veth는 제1 CNI와 계층적 구조를 갖고 있으며, 제1 CNI는 제1 NAT와 계층적 구조를 갖고 있으며, 제1 NAT는 제1 eth0와 계층적 구조를 갖고 있는 경우, 프로세서는 각 구성들에 관하여 상기 계층 적 구조를 인식(식별)할 수 있으며, 제1 veth와 제2 CNI는 계층적 구조가 없음을 식별할 수 있다. 도 4를 참조하여, 본 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 방법 을 설명하도록 한다. 프로세서가 쿠버네티스 클러스터에서 발생하는 이벤트를 수집한다. (S100) 프로세서는 컨테이너(Container)를 pod 내에 배치하고 노드에서 실행함으로써 워크로드를 구동하는 쿠버네 티스(Kubernetes) 클러스터에서 발생하는 이벤트를 통신부를 통해 수집한다. 보다 상세하게는, 쿠버네티스 클러스터는 마스터 노드와 마스터 노드에 할당된 적어도 하나의 워커 노드를 포함하며, 각각의 워커 노드는 Kubelet을 포함한다. 보다 상세하게는, 프로세서는 워커 노드의 Kubelet을 통해 쿠버네티스 클러스터에서 발생하는 이벤트 를 수집한다. 일 실시예로, 저장부는 이벤트 분류 알고리즘이 저장될 수 있으며, 프로세서는 이벤트 분류 알고리즘 을 이용하여 쿠버네티스 클러스터로부터 수집되는 이벤트를 자동으로 분류할 수 있다. 프로세서가 쿠버네티스 클러스터에서 수집된 이벤트를 보안 규칙을 기반으로 모니터링한다. (S200) 프로세서가 S200의 모니터링 결과 이상 징후를 감지한다. (S300) 이떄, 보안 규칙(보안 정책)은 클라이언트의 보안 자산에 따라 설정된 것일 수 있으며, 보안 규칙에 따라서 모 니터링의 주기, 엄격도가 상이할 수도 있고, 이상 징후를 판단하는 기준이 상이할 수 있다. 또한, 본 개시의 실시예에서 통합 보안 관제 장치는 미리 학습된 인공지능 모델을 보안 관제에 사용할 수 있으며, 인공지능 모델은 보안 규칙을 학습하고 상황에 따라서 보안 규칙을 유동적으로 적용함으로써 자동으로 보안 관제, 모니터링을 실시할 수 있다. 프로세서가 이상 징후와 관련된 이벤트를 기반으로 공격 출발지와 공격 목적지를 식별한다. (S400) 프로세서가 저장부에 저장되어 있는 접속 경로를 기반으로 감지된 이상 징후에 대한 공격 출발지로부 터 공격 목적지까지의 접속 경로를 추적한다. (S500)프로세서는 이상 징후가 감지되어 보안 공격이라고 판단되면, 수집된 이벤트를 기반으로 공격의 출발지와 목적지를 식별할 수 있으며, 저장부에 저장되어 있는 정보를 기반으로 도 5과 같이 쿠버네티스 클러스터 내 공 격 출발지와 공격 목적지의 주소를 식별할 수 있게 된다. 이때, 사용되는 정보는 쿠버네티스 클러스터 내 구성 (오브젝트)들의 주소에 관한 정보이다. 그리고, 저장부에 쿠버네티스 클러스터 내 구성(오브젝트)들의 주소가 저장되어 있고, 구성들 간의 계층적 구조 에 따른 접속 경로에 대한 정보가 저장되어 있으므로, 프로세서는 도 6과 같이 공격 출발지로부터 공격 목 적지까지의 모든 경로를 식별할 수 있게 된다. 도 6를 참조하여 S500에 관하여 상세하게 설명하도록 한다. 도 7은 기존 관제 시스템과 본 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 장치의 관제 시스템의 관제 범위를 비교한 예시 도면이다. 도 6에 도시된 공격 출발지의 pod을 제1 pod로 지칭하고, 제1 pod 내 공격 출발지에 해당하는 구성(오브젝트)를 제1 구성으로 지칭하고, 제1 pod가 속한 veth를 제1 veth, 제1 veth와 접속 경로를 갖는 Flannel, CNI를 제1 Flannel, 제1 CNI로 지칭하고, 제1 Flannel, 제1 CNI와 접속 경로를 갖는 NAT를 제1 NAT, 제1 NAT와 접속 경로 를 갖는 eth0를 제1 eth0로 지칭하도록 한다. 도 6에 도시된 공격 목적지의 pod를 제2 pod로 지칭하고, 제2 pod 내 공격 목적지에 해당하는 구성(오브젝트)를 제2 구성으로 지칭하고, 제2 pod가 속한 veth를 제2 veth, 제2 veth와 접속 경로를 갖는 Flannel, CNI를 제2 Flannel, 제2 CNI로 지칭하고, 제2 Flannel, 제2 CNI와 접속 경로를 갖는 NAT를 제2 NAT, 제2 NAT와 접속 경로 를 갖는 eth0를 제2 eth0로 지칭하도록 한다. 프로세서는 이상 징후가 감지된 제1 pod 내 제1 구성에 대한 포트를 공격 출발지로 인식하고, 이상 징후가 감지된 제2 pod 내 제2 구성에 대한 포트를 공격 목적지로 식별한다. 본 개시의 실시예에서, 도 6를 통해 공격 출발지를 제1 pod 내 제1 컨테이너, 공격 목적지를 제2 pod 내 제2 컨 테이너로 예시하였으나, 이는 설명을 위한 예시이며 공격 출발지와 공격 목적지가 반드시 컨테이너로 한정되는 것은 아니다. 프로세서는 저장부에 저장되어 있는 쿠버네티스 클러스터 내 구성들의 계층적 구조에 따른 접속 경로를 기반으로, 제1 pod로부터 Router의 제1 경로에 포함된 구성들을 식별하고, 상기 식별된 구성들 간의 접 속 경로를 식별할 수 있다. 프로세서는 저장부에 저장되어 있는 쿠버네티스 클러스터 내 구성들의 계층적 구조에 따른 접속 경로를 기반으로, 제2 pod로부터 Router의 제2 경로에 포함된 구성들을 식별하고, 상기 식별된 구성들 간의 접 속 경로를 식별할 수 있다. 제1 경로에 포함된 구성들은 제1 pod가 속한 제1 veth(Virtual Ethernet Devices), 제1 CNI, 제1 NAT(Network Address Translation) 및 제1 eth0를 포함한다. 제2 경로에 포함된 구성들은 제2 pod가 속한 제2 veth(Virtual Ethernet Devices), 제2 CNI, 제2 NAT(Network Address Translation) 및 제2 eth0를 포함한다. 프로세서는 상기 저장부에 저장된 접속 경로를 기반으로, 상기 제1 pod가 속한 제1 veth(Virtual Ethernet Devices)로부터 제1 CNI의 접속 경로, 상기 제1 CNI로부터 제1 NAT(Network Address Translation)의 접속 경로, 상기 제1 NAT로부터 제1 eth0의 접속 경로, 상기 제1 eth0로부터 Router의 접속 경로, 상기 Router 로부터 제2 eth0의 접속 경로, 상기 제2 eth0로부터 제2 NAT의 접속 경로, 상기 제2 NAT로부터 제2 CNI의 접속 경로, 상기 제2 CNI로부터 제2 pod이 속한 제2 veth의 접속 경로를 식별할 수 있다. 또한, 저장부는 쿠버네티스 클러스터 내 파드, 컨테이너 및 네임스페이스에 관한 정보와 상기 쿠버네 티스 클러스터 내 구성들의 정보를 확인하기 위해 미리 결정된 명령어가 저장되어 있다. 일 실시예로, 장치는 컨테이너 노드에서 \"ifconfig -1\"를 입력하여 네트워크 인터페이스 정보를 획득할 수 있으며, 상세하게는 eth0, Flannel, cni0의 주소, veth, Iface의 정보를 획득할 수 있고, 파드에 접속하기 위한 네임스페이스명, 파드명을 확인할 수 있다. 또한, 장치는 \"kubectl exec -it pod명 -n 네임스페이스명 -bash\"를 입력함으로써 파드로 접속할 수 있고, 파드에서 \"ifconfig -a\"를 입력함으로써 파드의 IP 정보를 확인할 수 있다. 프로세서는 기 설정된 시간마다 미리 결정된 명령어를 이용하여 쿠버네티스 클러스터 내 구성(오브젝 트)들의 정보를 확인하고, 저장부에 저장되어 있는 정보를 업데이트 한다. 보다 상세하게는, 프로세서는 기 설정된 시간마다 미리 결정된 명령어를 이용하여 쿠버네티스 클러스터 내 구성(오브젝트)들의 정보를 확인한다. 그리고, 프로세서는 확인된 정보가 저장부에 저장되 어 있는 정보와 다른 경우, 삭제된 정보를 반영하거나, 변경된 정보를 반영하거나, 신규로 생성된 정보를 반영 하도록 한다. 본 개시의 실시예에서 통합 보안 관제 장치는 쿠버네티스 클러스터 내 구성(오브젝트)들에 대한 정보 (예: 위치, 주소)와 각 구성(오브젝트)들 간의 계층적 구조에 따른 접속 경로가 저장되어 있으며, 위와 같은 동 작(프로세스)를 통해서 기 설정된 시간(주기)마다 저장되어 있는 정보들을 업데이트할 수 있게 된다. 이때, 명령어는 쿠버네티스 클러스터 내 파드, 컨테이너 및 네임스페이스에 관한 정보와 쿠버네티스 클러 스터 내 구성(오브젝트)들의 정보를 확인하기 위해 미리 결정된 명령어일 수 있다. 프로세서는 상기 미리 결정된 명령어를 이용하여 쿠버네티스 클러스터 내 eth0, flannel 및 cni의 정 보(예: 주소)를 확인할 수 있다. 또한, 프로세서는 쿠버네티스 클러스터로부터 수집된 이벤트를 기반으로 쿠버네티스 클러스터 내 기존 pod의 삭제 또는 신규 pod의 생성을 감지할 수 있으며, 감지된 결과를 기반으로 저장부 내 저장되 어 있는 데이터를 업데이트 할 수 있다. 이때, 업데이트 대상 데이터는 pod와 관련된 데이터를 의미한다. 일 실시예로, 프로세서는 쿠버네티스 클러스터 내 기존 pod가 삭제되거나 신규 pod가 생성되는 경우, 저장부에 저장되어 있는 계층적 구조 및 계층적 구조에 따른 구성(오브젝트)들 간의 접속 경로에 대한 정 보를 기반으로 저장부에 저장되어 있는 데이터를 업데이트할 수 있다. 프로세서는 쿠버네티스 클러스터 내 접속 경로 또는 구성(오브젝트)에 대하여 기 설정된 제1 횟수를 초과하는 접속 시도가 감지되는 경우, 해당 접속 시도를 이상 징후로 판단할 수 있다. 일 실시예로, 제1 횟수는 쿠버네티스 클러스터 내 계층적 구조를 갖는 상기 구성(오브젝트)들 간의 접속 경로마다 설정되어 있을 수 있다. 구체적으로는, 접속 경로에 따라 제1 횟수가 상이할 수도 있다는 것을 의미한 다. 프로세서는 접속 경로마다 설정되어 있는 제1 횟수를 기반으로, 상기 접속 시도를 이상 징후로 판단할 수 있다. 일 실시예로, 쿠버네티스 클러스터 내 구성(오브젝트)마다 보안 중요도가 설정되어 있을 수 있으며, 접속 경로마다 보안 중요도가 설정되어 있을 수 있다. 일 실시예로, 프로세서는 인공지능 모델을 이용하여 쿠버네티스 클러스터 내 구성(오브젝트)에 대하 여 설정되어 있는 보안 중요도를 기반으로 접속 경로마다 보안 중요도를 산출할 수 있다. 프로세서는 이상 징후에 대하여 식별된 공격 출발지, 공격 목적지 및 공격 출발지로부터 공격 목적지에 포 함된 접속 경로 상의 구성(오브젝트)들과 접속 시도의 횟수를 기반으로 보안 위험도를 산출할 수 있다. 이때, 프로세서는 공격 목적지, 공격 출발지와 공격 출발지로부터 공격 목적지에 포함된 접속 경로 상의 구성들에 대하여 설정되어 있는 보안 중요도를 고려하여 보안 위험도를 산출할 수 있다. 즉, 똑같은 접속 시도 횟수의 공격이라도 자산의 보안 중요도에 따라서 상이한 보안 위험도가 산출될 수 있다. 일 실시예로, 프로세서는 기 설정된 크기 이상의 데이터 접속 시도가 쿠버네티스 클러스터 내 접속 경로 또는 구성(오브젝트)에 대하여 기 설정된 제2 횟수를 초과하여 감지되는 경우, 해당 접속 시도를 이상 징 후로 판단할 수 있다. 일 실시예로, 프로세서는 이상 징후가 감지된 특정 pod에 관하여 상기 특정 pod와 관련된 접속 경로를 갖 는 구성 및 접속 경로에 관하여 모니터링 가중치를 부여할 수 있다. 그리고, 프로세서는 상기 부여된 모니 터링 가중치를 기반으로 모니터링 주기를 변경하거나, 이상 징후를 판단하는 기준인 상기 제1 횟수를 변경하거 나 또는 이상 징후를 판단하는 기준인 상기 제1 크기(데이터 용량 크기)를 변경하는 동작 중 적어도 하나의 동 작을 실행할 수 있다.일 실시예로, 프로세서는 보안 관제 트랜드에 따라 보안 관제 관리자로부터 적어도 하나의 보안 키워드를 입력받을 수 있으며, 미리 학습된 인공지능 모델은 상기 보안 키워드가 입력되면 쿠버네티스 클러스터 내 각 구성(오브젝트)들에 대한 보안 중요도를 산출할 수 있으며, 산출된 결과를 기반으로 각 접속 경로에 대해서 도 보안 중요도를 산출할 수 있다. 그 결과로 인공지능 모델은 쿠버네티스 클러스터 내 구성(오브젝트)과 접속 경로들에 대한 보안 규칙을 수정할 수 있으며, 이는 위에서 언급한 제1 횟수, 제2 횟수 또는 제1 크기(데 이터 용량 크기) 중 적어도 하나에 대한 변경이 적용될 수 있다. 즉, 보안 관리자는 보안 관제에 관한 트랜드, 이슈와 관련된 키워드를 통합 보안 장치로 입력할 수 있으며, 프로세서는 키워드를 인공지능 모델에 입력하고, 인공지능 모델은 입력된 키워드에 따라 쿠버네티 스 클러스터 내 구성과 구성들 간의 접속 경로에 대하여 보안 중요도를 산출하고, 산출된 보안 중요도를 기반으로 쿠버네티스 클러스터 내 구성(오브젝트)과 접속 경로들에 대한 보안 규칙을 수정할 수 있다. 일 실시예로, 프로세서는 수학식 1을 기반으로 이상 징후를 판단할 수 있다. 이때, 단위 시간은 1초, 1분, 1시간 등과 같이 정의될 수 있다. 수학식 1"}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "일 실시예로, 프로세서는 수학식 2를 기반으로 이상 징후를 판단할 수 있다. 이때, 단위 시간은 1초, 1분, 1시간 등과 같이 정의될 수 있다. 이때, k1은 기 설정된 수치가 적용될 수 있다. 수학식 2"}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "이때, i, k2은 기 설정된 수치가 적용될 수 있다. 따라서, 보안 관리자는 보안 관제에 관한 트랜드, 이슈와 관련된 키워드를 입력하는 것만으로 통합 보안 관제 장치의 인공지능 모델이 보안 규칙 변경하는 효과를 얻을 수 있다. 도 7을 참조하면, 본 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 장치 의 관제 시스템이 기존 관제 시스템과 어떻게 다른지 비교할 수 있다. 추가적인 실시예로, 프로세서는 수집된 이벤트를 통해서 컨테이너 이미지에 데이터 변경이 발생한 이벤트 를 감지할 수 있다. 프로세서는 변경 사항에 포함된 정의를 확인하고, 확인된 정의가 미리 합의되어 있는 정의인지 여부를 확 인할 수 있다. 보다 상세하게는, 프로세서는 API SERVER에서 컨테이너 이미지의 기존 상태에 대한 제1 정의를 수집하도록 Kubelet에 요청하고, Kubelet으로부터 수집된 상기 제1 정의를 수신할 수 있다. 다음으로, 프로세서는 컨테이너 이미지에 대한 상기 변경 사항이 포함된 제2 정의와 상기 제1 정의를 기반 으로 컨테이너 이미지에 대한 변경 사항을 확인할 수 있다. 제2 정의는 컨테이너 이미지가 변경된 후 컨테이너 이미지의 변경된 내용에 관한 정의이고, 제1 정의는 컨테이 너 이미지가 변경되기 전의 정의이다. 보다 상세하게는, 프로세서는 Kubelet으로 쿠버네티스 클러스터의 클러스터 정보가 저장되는 etcd에 저장되어 있는 컨테이너 이미지에 대한 yaml 파일을 요청한다. 그리고, 프로세서는 컨테이너 이미지의 yaml 파일을 통해 제2 정의를 확인할 수 있다. 프로세서는 컨테이너 이미지에 대한 yaml을 저장할 때, revision을 저장 또는 업데이트 한다. 보다 상세하게는, 프로세서는 컨테이너 이미지에 대한 yaml을 최초 저장할 때 Revision을 저장하고 그 후 해당 컨테이너 이미지에 대한 데이터 변경이 발생할 때마다 Revision을 업데이트 한다. 즉, 서버는 위와 같은 프로세스를 통해서 컨테이너 이미지의 모든 데이터 변경을 감지할 수 있고, 변경 내역/사 항을 체크할 수 있게 된다. 서버가 쿠버네티스에 제어 신호를 전달하고 상태 정보를 수신하기 위하여 쿠버네티스의 워커 노드 내부에 클라 이언트를 설치하여 운용할 수 있다. 프로세서는 클라이언트를 통해서 kubelet과 통신하고, kubelet은 API SERVER와 통신하여 쿠버네티스 클러 스터를 동작시키거나 동작 상태를 감시할 수 있다. 이상에서 전술한 본 개시의 일 실시예에 따른 방법은, 하드웨어인 서버와 결합되어 실행되기 위해 프로그램(또 는 어플리케이션)으로 구현되어 매체에 저장될 수 있다. 상기 전술한 프로그램은, 상기 컴퓨터가 프로그램을 읽어 들여 프로그램으로 구현된 상기 방법들을 실행시키기 위하여, 상기 컴퓨터의 프로세서(CPU)가 상기 컴퓨터의 장치 인터페이스를 통해 읽힐 수 있는 C, C++, JAVA, 기 계어 등의 컴퓨터 언어로 코드화된 코드(Code)를 포함할 수 있다. 이러한 코드는 상기 방법들을 실행하는 필요 한 기능들을 정의한 함수 등과 관련된 기능적인 코드(Functional Code)를 포함할 수 있고, 상기 기능들을 상기 컴퓨터의 프로세서가 소정의 절차대로 실행시키는데 필요한 실행 절차 관련 제어 코드를 포함할 수 있다. 또한, 이러한 코드는 상기 기능들을 상기 컴퓨터의 프로세서가 실행시키는데 필요한 추가 정보나 미디어가 상기 컴퓨 터의 내부 또는 외부 저장부의 어느 위치(주소 번지)에서 참조되어야 하는지에 대한 저장부 참조관련 코드를 더 포함할 수 있다. 또한, 상기 컴퓨터의 프로세서가 상기 기능들을 실행시키기 위하여 원격(Remote)에 있는 어떠 한 다른 컴퓨터나 서버 등과 통신이 필요한 경우, 코드는 상기 컴퓨터의 통신 모듈을 이용하여 원격에 있는 어 떠한 다른 컴퓨터나 서버 등과 어떻게 통신해야 하는지, 통신 시 어떠한 정보나 미디어를 송수신해야 하는지 등 에 대한 통신 관련 코드를 더 포함할 수 있다. 상기 저장되는 매체는, 레지스터, 캐쉬, 저장부 등과 같이 짧은 순간 동안 데이터를 저장하는 매체가 아니라 반 영구적으로 데이터를 저장하며, 기기에 의해 판독(reading)이 가능한 매체를 의미한다. 구체적으로는, 상기 저 장되는 매체의 예로는 ROM, RAM, CD-ROM, 자기 테이프, 플로피디스크, 광 데이터 저장장치 등이 있지만, 이에 제한되지 않는다. 즉, 상기 프로그램은 상기 컴퓨터가 접속할 수 있는 다양한 서버 상의 다양한 기록매체 또는 사용자의 상기 컴퓨터상의 다양한 기록매체에 저장될 수 있다. 또한, 상기 매체는 네트워크로 연결된 컴퓨터 시 스템에 분산되어, 분산방식으로 컴퓨터가 읽을 수 있는 코드가 저장될 수 있다. 본 개시의 실시예와 관련하여 설명된 방법 또는 알고리즘의 단계들은 하드웨어로 직접 구현되거나, 하드웨어에 의해 실행되는 소프트웨어 모듈로 구현되거나, 또는 이들의 결합에 의해 구현될 수 있다. 소프트웨어 모듈은 RAM(Random Access Memory), ROM(Read Only Memory), EPROM(Erasable Programmable ROM), EEPROM(Electrically Erasable Programmable ROM), 플래시 저장부(Flash Memory), 하드 디스크, 착탈형 디스크, CD-ROM, 또는 본 개시가 속하는 기술 분야에서 잘 알려진 임의의 형태의 컴퓨터 판독가능 기록매체에 상주할 수도 있다."}
{"patent_id": "10-2023-0163300", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "이상, 첨부된 도면을 참조로 하여 본 개시의 실시예를 설명하였지만, 본 개시가 속하는 기술분야의 통상의 기술 자는 본 개시가 그 기술적 사상이나 필수적인 특징을 변경하지 않고서 다른 구체적인 형태로 실시될 수 있다는 것을 이해할 수 있을 것이다. 그러므로, 이상에서 기술한 실시예들은 모든 면에서 예시적인 것이며, 제한적이 아닌 것으로 이해해야만 한다."}
{"patent_id": "10-2023-0163300", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 장치의 블록도이다. 도 2는 쿠버네티스 클러스터의 예시도이다. 도 3은 오버레이 네트워크가 적용된 쿠버네티스 클러스터를 예시한 도면이다. 도 4는 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 방법의 흐름도이다. 도 5는 감지된 이상 징후에 대한 공격 출발지와 공격 목적지의 위치를 식별한 것을 예시한 도면이다. 도 6은 도 5과 같이 식별된 위치와 저장부에 저장된 접속 경로를 기반으로 공격 출발지로부터 공격 목적지의 접 속 경로를 식별하는 것을 예시한 도면이다. 도 7은 기존 관제 시스템과 본 개시의 실시예에 따른 쿠버네티스 클러스터의 모니터링을 위한 통합 보안 관제 장치의 관제 시스템의 관제 범위를 비교한 예시 도면이다."}
