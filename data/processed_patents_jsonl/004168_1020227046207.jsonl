{"patent_id": "10-2022-7046207", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0017875", "출원번호": "10-2022-7046207", "발명의 명칭": "신경망 모델을 수행하는 데이터 처리 장치, 방법 및 관련 제품", "출원인": "캠브리콘 테크놀로지스 코퍼레이션 리미티드", "발명자": "린, 샤오동"}}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "신경망 모델을 수행하기 위한 데이터 처리 장치에 있어서, 상기 신경망 모델의 컨볼루션 레이어의 폴딩 필터를 저장하도록 구성되되, 상기 폴딩 필터는 원시 필터에 대해차원 폴딩을 수행하여 얻은 것이고, 상기 차원 폴딩은 폭 차원 및/또는 높이 차원의 데이터를 입력 채널 차원에다시 배출하는 것을 포함하는 저장 회로; 및입력 특징 맵에 대해 상기 차원 폴딩을 수행하여 폴딩 특징 맵을 얻고, 상기 폴딩 필터를 이용하여 상기 폴딩특징 맵에 대해 컨볼루션 연산을 수행하여 출력 특징 맵을 얻도록 구성되는 처리 회로를 포함하는것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 원시 필터의 입력 채널 차원의 크기는 제1 임계치 A1을 초과하지 않고, 상기 폴딩 필터의 입력 채널 차원의 크기는 제2 임계치 Aci와 같으며, 제1 임계치 A1는 제2 임계치 Aci보다 작은것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서, 상기 처리 회로는, 폴딩 대기의 다차원 데이터의 입력 채널 차원의 크기 Ci 및 상기 제2 임계치 Aci에 기반하여 총 폴딩 배율 Ntotal을 확정하는 것;상기 총 폴딩 배율 Ntotal을 폭 차원의 폴딩 배율 Nw 및 높이 차원의 폴딩 배율 Nh로 분할하는 것;Nw, Nh 및 폴딩 대기의 다차원 데이터의 폭 차원의 크기와 높이 차원의 크기에 기반하여, 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기를 확정하는 것; 및Nw, Nh 및 컨볼루션 연산의 원시 컨볼루션 스텝에 기반하여, 상기 컨볼루션 연산의 폴딩 후의 컨볼루션 스텝을확정하는 것을 통해 상기 차원 폴딩을 수행하도록 구성되는것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서, 상기 처리 회로는 또한, Ntotal＝Aci/Cia을 계산하되, Cia는 Ci가 가장 가까운 Aci/2n으로 정렬된 값이며, n은 자연수인 것을 통해 총 폴딩 배율 Ntotal을 확정하도록 구성되는것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2023-0017875-3-제3항 또는 제4항에 있어서, 상기 처리 회로는 또한, 폭 차원에 우선적으로 분할하는 규칙;폭 차원과 높이 차원에 평균으로 분할하는 규칙;폴딩 배율의 정렬로 인한 보완량이 최소화되도록 분할하는 규칙; 또는폭 차원 상의 컨볼루션 스텝이 당해 폭 차원의 폴딩 배율에 의해 나누어 떨어질 수 있도록 분할하는 규칙중 임의의 규칙 또는 규칙의 조합으로 상기 총 폴딩 배율 Ntotal을 분할하도록 구성되는것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제3항 내지 제5항 중 어느 한 항에 있어서, 상기 처리 회로는 또한, 이하의 식(7) 및 식(8)을 통해 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기를 확정하도록 구성되며, = （7） = （8）여기서, kw′, kh′는 각각 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기이고, kwa는 폴딩 대기의 다차원 데이터의 폭 차원의 크기 kw가 가장 가까운 폭 차원의 폴딩 배율 Nw으로 정렬된 값이며, kha는 폴딩대기의 다차원 데이터의 높이 차원의 크기 kh가 가장 가까운 높이 차원의 폴딩 배율 Nh으로 정렬된 값인것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제3항 내지 제6항 중 어느 한 항에 있어서, 상기 처리 회로는 또한, 이하의 식(9) 및 식(10)을 통해 폴딩 후의 다차원 데이터의 컨볼루션 스텝을 확정하도록 구성되며, = （9） = （10）여기서, Sx, Sy는 각각 컨볼루션 연산의 원시 폭 차원의 컨볼루션 스텝 및 높이 차원의 컨볼루션 스텝이고,Sx′, Sy′는 각각 컨볼루션 연산의 폴딩 후의 폭 차원의 컨볼루션 스텝 및 높이 차원의 컨볼루션 스텝인것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제3항 내지 제7항 중 어느 한 항에 있어서, 상기 제2 임계치 Aci는 명령 정렬 요구 사항에 기반하여 확정되고, 또한 상기 제1 임계치 A1≤Aci/2인것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "공개특허 10-2023-0017875-4-제1항 내지 제8항 중 어느 한 항에 있어서, 상기 처리 회로는 또한, 차원 재결합을 통해 폭 차원 상의 상기 차원 폴딩을 구현하고; 및/또는차원 전치를 통해 높이 차원 상의 상기 차원 폴딩을 구현하도록 구성되는것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항 내지 제9항 중 어느 한 항에 있어서, 상기 원시 필터의 출력 채널 차원의 크기는 상기 폴딩 필터의 출력 채널 차원의 크기와 같은것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1항 내지 제10항 중 어느 한 항에 있어서, 상기 폴딩 필터는 오프라인으로 생성되거나 또는 온라인으로 생성되는것을 특징으로 하는 상기 데이터 처리 장치."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "칩에 있어서, 제1항 내지 제11항 중 어느 한 항에 기재된 데이터 처리 장치를 포함하는것을 특징으로 하는 상기 칩."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "보드 카드에 있어서, 제12항에 기재된 칩을 포함하는것을 특징으로 하는 상기 보드 카드."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "데이터 처리 장치에 의해 실시되는 신경망 모델을 수행하기 위한 방법에 있어서, 상기 데이터 처리 장치는 저장 회로 및 처리 회로를 포함하고, 상기 방법은, 상기 처리 회로가 입력 특징 맵에 대해 차원 폴딩을 수행하여 폴딩 특징 맵을 얻는 것; 및상기 처리 회로가 상기 저장 회로에 저장된 상기 신경망 모델의 컨볼루션 레이어의 폴딩 필터를 이용하여 상기폴딩 특징 맵에 대해 컨볼루션 연산을 수행하여 출력 특징 맵을 얻는 것을 포함하되;여기서, 상기 폴딩 필터는 원시 필터에 대해 상기 차원 폴딩을 수행하여 얻은 것이고, 상기 차원 폴딩은 폭 차원 및/또는 높이 차원의 데이터를 입력 채널 차원에 다시 배출하는 것을 포함하는것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서, 상기 원시 필터의 입력 채널 차원의 크기는 제1 임계치 A1을 초과하지 않고, 상기 폴딩 필터의 입력 채널 차원의 크기는 제2 임계치 Aci와 같으며, 제1 임계치 A1는 제2 임계치 Aci보다 작은공개특허 10-2023-0017875-5-것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서, 상기 처리 회로가, 폴딩 대기의 다차원 데이터의 입력 채널 차원의 크기 Ci 및 상기 제2 임계치 Aci에 기반하여 총 폴딩 배율 Ntotal을 확정하는 것;상기 총 폴딩 배율 Ntotal을 폭 차원의 폴딩 배율 Nw 및 높이 차원의 폴딩 배율 Nh로 분할하는 것;Nw, Nh 및 폴딩 대기의 다차원 데이터의 폭 차원의 크기와 높이 차원의 크기에 기반하여, 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기를 확정하는 것; 및Nw, Nh 및 컨볼루션 연산의 원시 컨볼루션 스텝에 기반하여, 상기 컨볼루션 연산의 폴딩 후의 컨볼루션 스텝을확정하는 것을 통해 상기 차원 폴딩을 수행하는 것을 더 포함하는것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서, 상기 처리 회로가 또한, Ntotal＝Aci/Cia을 계산하되, Cia는 Ci가 가장 가까운 Aci/2n으로 정렬된 값이며, n은 자연수인 것을 통해 총 폴딩 배율 Ntotal을 확정하는 것을 더 포함하는것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제16항 내지 제17항 중 어느 한 항에 있어서, 상기 처리 회로가, 폭 차원에 우선적으로 분할하는 규칙;폭 차원과 높이 차원에 평균으로 분할하는 규칙;폴딩 배율의 정렬로 인한 보완량이 최소화되도록 분할하는 규칙; 또는폭 차원 상의 컨볼루션 스텝이 당해 폭 차원의 폴딩 배율에 의해 나누어 떨어질 수 있도록 분할하는 규칙중 임의의 규칙 또는 규칙의 조합으로 상기 총 폴딩 배율 Ntotal을 분할하는 것을 더 포함하는것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제16항 내지 제18항 중 어느 한 항에 있어서, 상기 처리 회로가 이하의 식(7) 및 식(8)을 통해 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기를 확정하는 것을 더 포함하며, = （7） = （8）공개특허 10-2023-0017875-6-여기서, kw′, kh′는 각각 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기이고, kwa는 폴딩 대기의 다차원 데이터의 폭 차원의 크기 kw가 가장 가까운 폭 차원의 폴딩 배율 Nw으로 정렬된 값이며, kha는 폴딩대기의 다차원 데이터의 높이 차원의 크기 kh가 가장 가까운 높이 차원의 폴딩 배율 Nh으로 정렬된 값인것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제16항 내지 제19항 중 어느 한 항에 있어서, 상기 처리 회로가 이하의 식(9) 및 식(10)을 통해 폴딩 후의 다차원 데이터의 컨볼루션 스텝을 확정하는 것을더 포함하며, = （9） = （10）여기서, Sx, Sy는 각각 컨볼루션 연산의 원시 폭 차원의 컨볼루션 스텝 및 높이 차원의 컨볼루션 스텝이고,Sx′, Sy′는 각각 컨볼루션 연산의 폴딩 후의 폭 차원의 컨볼루션 스텝 및 높이 차원의 컨볼루션 스텝인것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제16항 내지 제20항 중 어느 한 항에 있어서, 여기서, 상기 제2 임계치 Aci는 명령 정렬 요구 사항에 기반하여 확정되고, 또한 상기 제1 임계치 A1≤Aci/2인것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제14항 내지 제21항 중 어느 한 항에 있어서, 상기 처리 회로가 차원 재결합을 통해 폭 차원 상의 상기 차원 폴딩을 구현하고; 및/또는 상기 처리 회로 차원전치를 통해 높이 차원 상의 상기 차원 폴딩을 구현하는 것을 더 포함하는것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제14항 내지 제22항 중 어느 한 항에 있어서, 여기서, 상기 원시 필터의 출력 채널 차원의 크기는 상기 폴딩 필터의 출력 채널 차원의 크기와 같은것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제14항 내지 제23항 중 어느 한 항에 있어서, 상기 폴딩 필터는 오프라인으로 생성되거나 또는 온라인으로 생성되는것을 특징으로 하는 상기 방법."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 출원은 신경망 모델을 수행하기 위한 데이터 처리 장치, 방법 및 관련 제품을 개시한다. 당해 데이터 처리 장 치는 복합 처리 장치에 계산 장치로 포함될 수 있으며, 당해 복합 처리 장치는 인터페이스 장치 및 기타 처리 장 치를 더 포함할 수 있다. 당해 계산 장치는 기타 처리 장치와 상호 작용하여, 사용자가 지정한 계산 작업을 공동 으로 완료할 수 있다. 복합 처리 장치는 저장 장치를 더 포함할 수 있으며, 당해 저장 장치는 계산 장치 및 기타 처리 장치와 각각 연결되어, 당해 계산 장치 및 기타 처리 장치의 데이터를 저장한다. 본 출원은 다차원 배열의 컨볼루션 연산을 최적화하여, 연산 처리 효율을 향상시켰다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 출원은 2020년 12월 31일에 출원한 출원 번호가 2020116317360이고, 발명 명칭이 “신경망 모델을 수행하는 데이터 처리 장치, 방법 및 관련 제품\"인 중국 특허 출원, 2020년 12월 31일에 출원한 출원 번호가 2020116317074이고, 발명 명칭이 “신경망 모델을 수행하는 데이터 처리 장치, 방법 및 관련 제품\"인 중국 특허 출원 및 2020년 12월 31일에 출원한 출원 번호가 2020116249556이고, 발명 명칭이 “신경망 모델을 수행하는 데 이터 처리 장치, 방법 및 관련 제품\"인 중국 특허 출원의 우선권을 주장한다. 본 발명은 일반적으로 데이터 처리 분야에 관한 것이다. 더 구체적으로, 본 발명은 신경망 모델을 수행하기 위 한 데이터 처리 장치, 데이터 처리 방법, 칩 및 보드 카드에 관한 것이다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "현재, 심층 학습(Deep Learning)은 이미 기계 학습 중의 중요한 분파로 되었으며, 인공 지능(AI)의 발전도 크게 추진하고 있다. 심층 학습의 핵심 기술인 심층 신경망(DNN)은 이미 많은 업계에서 광범히 적용되고 있다. 컨볼루션 레이어는 신경망 모델 중의 일반적으로 사용되는 은닉 레이어 중 하나이며, 컨볼루션 연산을 통해 입 력 데이터에 대해 특징 추출을 수행한다. 신경망 모델 중에는 대량의 컨볼루션 연산이 포함되며, 컨볼루션 연산 의 계산 성능은 신경망 모델 전체의 계산 성능에 큰 영향을 미친다. 컨볼루션 연산에 있어서, 컨볼루션 레이어 의 필터의 각 차원에 대해 명령 정렬 요구 사항뿐만 아니라 하드웨어(예를 들면 병렬 연산기) 정렬 요구 사항도 있다. 따라서, 컨볼루션 연산을 최적화함으로써 신경망 모델을 수행하는 계산 성능을 향상시킬 필요가 있다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "위에 언급된 적어도 하나 또는 복수의 기술 문제를 해결하기 위하여, 본 발명의 복수의 측면은 신경망 모델을 수행하기 위한 데이터 처리 방안을 제안하는 바, 컨볼루션 레이어의 필터를 변환함으로써 컨볼루션 연산의 계산 성능을 효과적으로 향상시킬 수 있다. 본 발명 실시예의 신경망 모델은 화상 처리, 음성 처리, 텍스트 처리 등 과 같은 다양한 분야에 적용될 수 있으며, 이러한 처리는 예를 들면 인식 및 분류를 포함할 수 있으나 이에 한 정되지 않는다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "제1 측면에 있어서, 본 발명은 신경망 모델을 수행하기 위한 데이터 처리 장치를 제공하는 바, 당해 장치는 상 기 신경망 모델의 컨볼루션 레이어의 폴딩 필터를 저장하도록 구성되되, 상기 폴딩 필터는 원시 필터에 대해 차 원 폴딩을 수행하여 얻은 것이고, 상기 차원 폴딩은 폭 차원 및/또는 높이 차원의 데이터를 입력 채널 차원에 다시 배출하는 것을 포함하는 저장 회로; 및 입력 특징 맵에 대해 상기 차원 폴딩을 수행하여 폴딩 특징 맵을 얻고, 상기 폴딩 필터를 이용하여 상기 폴딩 특징 맵에 대해 컨볼루션 연산을 수행하여 출력 특징 맵을 얻도록 구성되는 처리 회로를 포함한다. 제2 측면에 있어서, 본 발명은 칩을 제공하는 바, 당해 칩은 전술한 제1 측면의 임의의 실시예의 데이터 처리 장치를 포함한다. 제3 측면에 있어서, 본 발명은 보드 카드를 제공하는 바, 당해 보드 카드는 전술한 제2 측면의 임의의 실시예의 칩을 포함한다. 제4 측면에 있어서, 본 발명은 데이터 처리 장치에 의해 실시되는 신경망 모델을 수행하기 위한 방법을 제공하 는 바, 상기 데이터 처리 장치는 저장 회로 및 처리 회로를 포함하고, 상기 방법은 상기 처리 회로가 입력 특징 맵에 대해 차원 폴딩을 수행하여 폴딩 특징 맵을 얻는 것; 및 상기 처리 회로가 상기 저장 회로에 저장된 상기 신경망 모델의 컨볼루션 레이어의 폴딩 필터를 이용하여 상기 폴딩 특징 맵에 대해 컨볼루션 연산을 수행하여 출력 특징 맵을 얻는 것을 포함하되; 상기 폴딩 필터는 원시 필터에 대해 상기 차원 폴딩을 수행하여 얻은 것이 고, 상기 차원 폴딩은 폭 차원 및/또는 높이 차원의 데이터를 입력 채널 차원에 다시 배출하는 것을 포함한다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "위와 같이 제공되는 데이터 처리 장치, 칩, 보드 카드 및 데이터 처리 장치에 의해 실시되는 데이터 처리 방법 을 통해, 본 발명의 방안은 폴딩 필터를 통해 컨볼루션 연산을 최적화한다. 본 발명의 실시예는 특히 원시 필터 의 출력 채널 차원의 크기와 입력 채널 차원의 크기가 모두 상대적으로 작은 경우에 적용된다. 기존의 컨볼루션 연산에 있어서, 필터의 출력 채널 차원이 상대적으로 작은 경우, 병렬 연산 유닛의 수량 정렬의 제한으로 인해, 상대적으로 큰 리소스 낭비를 초래한다. 필터의 입력 채널 차원이 상대적으로 작은 경우, 인공 지능 칩 명령 세 트의 벡터화 정렬의 제한으로 인해, 상대적으로 많은 중복 계산을 초래한다. 한편으로는, 본 발명 실시예는 원 시 필터에 대해 제1 차원 폴딩을 수행함으로써, 컨볼루션 스텝 이동을 복수 회 수행한 후 얻은 복수의 확장 필 터로 하나의 폴딩 필터로 합성하여 출력 채널 차원을 확장하여, 사용 가능한 병렬 연산 유닛을 충분히 이용할 수 있다. 다른 한편으로는, 본 발명 실시예는 필터에 대해 제2 차원 폴딩을 수행함으로써, 컨볼루션 코어의 폭 차원 및/또는 높이 차원의 데이터를 입력 채널 차원 상에 폴딩하여 명령 정렬 요구 사항을 충족시킬 수 있으며, 중복 계산을 최소화할 수 있다. 상기 두 측면은 조합하여 사용될 수 있으며, 따라서 연산 리소스의 낭비를 가장 효과적으로 피할 수 있고, 컨볼루션 연산이 하드웨어에서 가속화될 때의 계산 성능을 향상시킬 수 있다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 발명 실시예의 도면을 참조하여 본 발명 실시예의 기술 방안을 명확하고 완전히 설명하며, 설명되는 실시예는 본 발명의 일부 실시예일 뿐 전부의 실시예가 아님을 분명히 한다. 본 발명의 실시예에 기초하여 당업 자가 창조적 노동을 하지 않는 전제 하에 얻은 모든 기타 실시예는 모두 본 발명의 보호 범위에 속한다. 이해해야 할 점이라면, 본 발명의 청구 범위, 명세서 및 도면에서 사용될 수 있는 용어인 “제1”, “제2” 및 “제3” 등은 특정 순서를 설명하는 것이 아니라 서로 다른 대상을 구별하기 위한 것이다. 본 발명의 명세서 및 청구 범위에서 사용되는 용어인 “포함\" 및 “함유\"는 설명되는 특징, 전체, 단계, 작업, 구성 요소 및/또는 소 자의 존재를 나타내지만, 하나 또는 복수의 기타 특징, 전체, 단계, 작업, 구성 요소, 소자 및/또는 그 집합의 존재 또는 추가를 배제하지 않는다.더 이해해야 할 점이라면, 여기서 본 발명 명세서에서 사용되는 용어는 단지 특정 실시예를 설명하기 위한 목적 일 뿐, 본 발명을 한정하려는 의도가 아니다. 본 발명 명세서 및 청구 범위에서 사용되는 바와 같이, 문맥에서 명확히 기타 경우를 명시하지 않는 한, 홀수 형태의 “1\", “하나” 및 “당해\"는 복수 형태를 포함하는 것을 의미한다. 또한 더 이해해야 할 점이라면, 본 발명 명세서 및 청구 범위에서 사용되는 용어인 “및/또는”은 관 련된 리스트 항목 중의 하나 또는 복수의 임의의 조합 및 모든 가능한 조합을 의미하며, 또한 이러한 조합한다. 본 명세서 및 청구 범위에서 사용되는 바와 같이, 용어인 “만약\"은 문맥에 따라 “...이면\", “일단\", “확정 된 것에 응답하여\"또는 “검출된 것에 응답하여\"로 해석될 수 있다. 마찬가지로, 문구인 “확정되면\" 또는 “ [설명된 조건 또는 사건]이 검출되면\"은 문맥에 따라 “일단 확정되면\", “확정된 것에 응답하여\", “[설명된 조건 또는 사건]이 일단 검출되면\" 또는 “[설명된 조건 또는 사건]이 검출된 것에 응답하여\"를 의미하는 것으 로 해석될 수 있다. 이하, 도면을 참조하여 본 발명의 구체적인 실시 방식을 상세히 설명한다. 도 1은 본 발명 실시예의 보드 카드을 나타낸 구조 모식도이다. 도 1에 나타낸 바와 같이, 보드 카드은 칩을 포함하며, 당해 칩은 시스템 온 칩(System on Chip, SoC)이며, 또는 온 칩 시스템이라 불리우며, 하나 또는 복수의 복합 처리 장치가 집적되어 있다. 복합 처리 장치는 인공 지능 연산 유닛으로서, 다양한 심층 학습 및 기계 학습 알고리즘을 지원하며, 컴퓨터 비전, 음성, 자연 언어 처리, 데이터 마이닝 등 분야의 복잡한 시나리오에서의 지능형 처리 요구를 충족시킨다. 특히 심층 학습 기술은 클라우드 스마트 분야에 널리 적용되고 있으며, 클라우드 스마트 애플리케이션의 현저한 특점은 입력 데이터 양이 많고, 플랫폼의 저장 능력 및 계산 능력에 대한 요구 사항이 높다. 본 실시예의 보드 카드은 클라우드 스마트 애플리케이션에 적 용되며, 방대한 오프 칩 스토리지, 온 칩 스토리지 및 강력한 계산 능력을 가진다. 칩은 외부 인터페이스 장치를 통해 외부 기기과 연결된다. 외부 기기는 예를 들면 서버, 컴퓨터, 카메라, 모니터, 마우스, 키보드, 랜 카드 또는 wi-fi 인터페이스 등이다. 처리 대기의 데이터는 외부 기기에 의해 외부 인터페이스 장치를 통해 칩에 전달될 수 있다. 칩의 계산 결과는 외부 인터페이스 장치를 통해 외부 기기에 다시 전송될 수 있다. 다양한 적용 시나리오에 따라, 외부 인터 페이스 장치는 PCIe 인터페이스 등과 같은 다양한 인터페이스 형태를 가질 수 있다. 보드 카드는 데이터를 저장하기 위한 저장 디바이스를 더 포함하며, 당해 저장 디바이스는 하나 또는 복수의 저장 유닛를 포함한다. 저장 디바이스는 버스를 통해 제어 디바이스 및 칩과 연결되어 데이터 전송을 수행한다. 보드 카드 중의 제어 디바이스은 칩의 상태를 조절하도록 구 성된다. 이러하 이유로, 하나의 적용 시나리오에 있어서, 제어 디바이스는 마이크로 컨트롤러(Micro Controller Unit, MCU)를 포함할 수 있다. 도 2는 본 실시예의 칩중의 복합 처리 장치를 나타낸 구조도이다. 도 2에 나타낸 바와 같이, 복합 처리 장 치은 계산 장치, 인터페이스 장치, 처리 장치 및 DRAM를 포함한다. 계산 장치는 사용자가 지정한 작업을 수행하도록 구성되고, 주요하게 싱글 코어 스마트 프로세서 또는 멀 티 코어 스마트 프로세서로 구현되며, 심층 학습 또는 기계 학습의 계산을 수행하는데 사용되고, 인터페이스 장 치를 통해 처리 장치과 상호 작용하여 사용자가 지정한 작업을 공동으로 완료할 수 있다. 인터페이스 장치는 계산 장치과 처리 장치 사이에서 데이터 및 제어 명령을 전송한다. 예를 들 면, 계산 장치은 인터페이스 장치를 통해 처리 장치에서 입력 데이터를 취득하여, 계산 장치 의 온 칩 저장 장치에 기입할 수 있다. 또한 계산 장치는 인터페이스 장치를 통해 처리 장치 에서 제어 명령을 취득하여, 계산 장치의 온 칩 제어 캐시에 기입할 수 있다. 대안적 또는 선택적으 로, 인터페이스 장치는 계산 장치의 저장 장치 중의 데이터를 판독하여 처리 장치에 전송할 수 도 있다. 처리 장치는 범용 처리 장치로서, 데이터 운반, 계산 장치에 대한 기동 및/또는 정지 등 기본 제어를 수행하나 이에 한정되지 않는다. 구현 방식에 따라, 처리 장치는 중앙 프로세서 (central processing unit, CPU), 그래픽 프로세서 (graphics processing unit, GPU) 또는 기타 범용 및/또는 전용 프로세서 중의 하나 또는 복수의 유형의 프로세서일 수 있으며, 이러한 프로세서는 디지털 신호 프로세서(digital signal processor, DSP), 전용 집적 회로 (application specific integrated circuit, ASIC), 현장 프로그래머블 게이 트 어레이(field-programmable gate array, FPGA) 또는 기타 프로그래머블 논리 소자, 분립 게이트 또는 트랜 지스터 논리 소자, 분립 하드웨어 소자 등을 포함하나 이에 한정되지 않으며, 그 수량은 실제 수요에 따라 확정될 수 있다. 상기와 같이, 본 발명의 계산 장치만의 경우, 싱글 코어 구조 또는 동형 멀티 코어 구조를 갖 는 것으로 간주할 수 있다. 그러나, 계산 장치와 처리 장치의 통합을 고려할 때, 양자가 비동형 멀티 코어 구조를 형성하는 것으로 간주한다. DRAM는 처리 대기의 데이터를 저장하며, DDR 메모리로서, 크기는 일반적으로 16G이거나 또는 그 이상이며, 계산 장치 및/또는 처리 장치의 데이터를 보존하는데 사용된다. 도 3은 계산 장치가 싱글 코어인 경우의 내부 구조 모식도를 나타낸다. 싱글 코어 계산 장치은 컴퓨 터 비전, 음성, 자연 언어, 데이터 마이닝 등 입력 데이터를 처리하며, 싱글 코어 계산 장치은 제어 모듈 , 연산 모듈 및 저장 모듈과 같은 세개의 모듈을 포함한다. 제어 모듈은 제어 연산 모듈와 저장 모듈의 작업을 조정하여, 심층 학습 작업을 완료한다. 제어 모 듈은 핑거링 유닛 (instruction fetch unit, IFU, 311) 및 명령 디코딩 유닛 (instruction decode unit, IDU, 312)를 포함한다. 핑거링 유닛은 처리 장치으로부터의 명령을 취득하며, 명령 디코딩 유닛(31 2)은 취득한 명령을 디코딩하며, 디코딩 결과를 제어 정보로 연산 모듈 및 저장 모듈에 송신한다. 연산 모듈은 벡터 연산 유닛 및 행렬 연산 유닛를 포함한다. 벡터 연산 유닛은 벡터 연산을 수행하는 바, 벡터 곱하기, 더하기, 비선형 변환 등 복잡한 연산을 지원할 수 있다. 행렬 연산 유닛은 심 층 학습 알고리즘의 코어 계산, 즉 행렬 곱하기 및 컨볼루션을 수행한다. 저장 모듈은 관련 데이터를 저장하거나 운반하며, 뉴런 메모리 유닛 (neuron RAM, NRAM, 331), 매개 변수 저장 유닛 (weight RAM, WRAM, 332), 직접 액세스 모듈(direct memory access, DMA, 333)을 포함한다. NRAM은 입력 뉴런, 출력 뉴런 및 계산 후의 중간 결과를 저장한다. WRAM는 심층 학습 네트워크의 컨 볼루션 코어, 즉 가중치를 저장한다. DMA은 버스를 통해 DRAM에 연결되며, 싱글 코어 계산 장치 와 DRAM 사이의 데이터 운반을 수행한다. 도 4는 계산 장치가 멀티 코어인 경우의 내부 구조 모식도를 나타낸다. 멀티 코어 계산 장치는 계층적 구조로 설계되어 있다. 멀티 코어 계산 장치은하나의 온 칩 시스템으로서, 적어도 하나의 클러스터 (cluster)을 포함하며, 각 클러스터는 복수의 프로세서 코어를 포함한다. 다시 말하면, 멀티 코어 계산 장치 은 온 칩 시스템 - 클러스터 -프로세서 코어의 계층으로 구성된다. 온 칩 시스템의 계층적 관점에서 보면, 도 4에 나타낸 바와 같이, 멀티 코어 계산 장치은 외부 저장 컨트롤 러, 주변 통신 모듈, 온 칩 상호 연결 모듈, 동기화 모듈 및 복수의 클러스터를 포함 한다. 외부 저장 컨트롤러은 복수 개 있을 수 있으며, 도면에서는 예시적으로 두개를 나타내고 있다. 외부 저장 컨트롤러은 프로세서 코어가 송신한 액세스 요청에 응답하여 도 2의 DRAM와 같은 외부 저장 기기에 액세스하여, 오프 칩으로부터 데이터를 판독하거나 데이터를 기입한다. 주변 통신 모듈는 인터페이스 장치 를 통해 처리 장치으로부터의 제어 신호를 수신하여, 계산 장치을 기동하여 작업을 수행한다. 온 칩 상호 연결 모듈은 외부 저장 컨트롤러, 주변 통신 모듈 및 복수의 클러스터를 연결 하여, 각 모듈 사이에서 데이터 및 제어 신호를 전송한다. 동기화 모듈은 글로벌 동기화 장벽 컨트롤러 (global barrier controller, GBC)로서, 각 클러스터의 작업 진행 상황을 조정하여, 정보의 동기화를 보장한다. 복수의 클러스터는 멀티 코어 계산 장치의 계산 코어이며, 도면에서는 예시적으로 4개를 나타내지만, 하드웨어의 발전에 따라 본 발명의 멀티 코어 계산 장치은 8개, 16개, 64개를 더 포함할 수 있으며, 심지어 더 많은 클러스터를 포함할 수 있다. 클러스터는 심층 학습 알고리즘을 효율적으로 수행한다. 클러스터의 계층적 관점에서 보면, 도 4에 나타낸 바와 같이, 각 클러스터는 복수의 프로세서 코어 (IPU core, 406) 및 하나의 저장 코어(MEM core, 407)을 포함한다. 프로세서 코어는 도면에서 예시적으로 4개를 나타내며, 본 발명은 프로세서 코어의 수량을 한정하지 않는다. 내부 구조는 도 5에 나타낸 바와 같다. 각 프로세서 코어는 도 3의 싱글 코어 계산 장치과 유사한 바, 마찬가지로 제어 모듈, 연산 모듈 및 저장 모듈과 같은 세개의 모듈을 포함한다. 제어 모듈, 연산 모듈 및 저장 모듈의 기능 및 구조는 거의 제어 모듈, 연산 모듈 및 저장 모듈 과 같은 바, 더 이상 설명하지 않는다. 특히 설명해야 할 점이라면, 저장 모듈은 입력/출력 직접 액세 스 모듈 (input/output direct memory access, IODMA, 533) 및 운반 직접 액세스 모듈 (move direct memory access, MVDMA, 534)를 포함한다. IODMA 은 브로드캐스트 버스를 통해 NRAM/WRAM 및 DRAM에 대한 액세스를 제어한다. MVDMA는 NRAM/WRAM 및 저장 유닛 (SRAM, 408)에 대한 액세스를 제어한다. 도 4를 다시 참조하면, 저장 코어는 주요하게 저장 및 통신을 수행하는 바, 즉 프로세서 코어 사이의 공유 데이터 또는 중간 결과의 저장 및 클러스터와 DRAM 사이의 통신, 클러스터 간의 통신, 프 로세서 코어 간의 통신 등을 수행한다. 기타 실시예에 있어서, 저장 코어는 스칼라 연산 능력을 가지 며, 스칼라 연산을 수행한다. 저장 코어은 SRAM, 브로드캐스트 버스, 클러스터 직접 액세스 모듈(cluster direct memory access, CDMA, 410) 및 글로벌 직접 액세스 모듈 (global direct memory access, GDMA, 411)을 포함한다. SRAM 고성능 데이터 중계국의 역할을 하며, 하나의 클러스터 내에서 서로 다른 프로세서 코어 사이에서 다중화된 데이터는 프로세서 코어을 통해 각각 DRAM로부터 얻을 필요없이, SRAM을 통 해 프로세서 코어 사이에서 중계되며, 저장 코어는 다중화된 데이터를 SRAM로부터 신속하게 복 수의 프로세서 코어에 배포하기만 하면 되며, 이로써 코어 간 통신 효율을 향상시키고, 온 칩 오프 칩의 입력/출력 액세스도 크게 줄인다. 브로드캐스트 버스, CDMA 및 GDMA는 각각 프로세서 코어 사이의 통신, 클러스터 사 이의 통신 및 클러스터와 DRAM 사이의 데이터 전송을 수행한다. 이하 각각 설명하기로 한다. 브로드캐스트 버스는 클러스터 내의 각 프로세서 코어 사이의 고속 통신을 수행하며, 본 실시예 의 브로드캐스트 버스가 지원하는 코어 간 통신 방식은 유니캐스트, 멀티캐스트 및 브로드캐스트를 포함한 다. 유니캐스트는 포인트 투 포인트(예를 들면 단일 프로세서 코어에서 단일 프로세서 코어로)의 데이터 전송을 의미하며, 멀티캐스트는 일부분 데이터를 SRAM에서 몇몇의 특정 프로세서 코어으로 전송하는 통신 방 식을 의미하며, 브로드캐스트는 일부분 데이터를 SRAM에서 모든 프로세서 코어으로 전송하는 통신 방 식을 의미하는 바, 브로드캐스트는 멀티캐스트의 특별한 예이다. CDMA는 하나의 계산 장치 내의 서로 다른 클러스터 사이의 SRAM의 액세스를 제어한다. GDMA은 외부 저장 컨트롤러과 협력하여, 클러스터의 SRAM에서 DRAM로의 액세스를 제 어하거나, 또는 데이터를 DRAM에서 SRAM에로 판독한다. 상기로부터 알 수 있듯이, DRAM와 NRAM 또는 WRAM 사이의 통신은 두개의 채널을 통해 구현할 수 있다. 첫 번째 채널은 IODAM을 통 해 DRAM와 NRAM 또는 WRAM에 직접 연락하는 것이고; 두 번째 채널은 먼저 GDMA을 통해 데 이터를 DRAM와 SRAM 사이에서 전송한 다음, MVDMA를 통해 데이터를 SRAM과 NRAM 또 는 WRAM 사이에서 전송하는 것이다. 표면적으로는 두 번째 채널이 더 많은 요소의 참여를 필요로 하고, 데 이터 흐름이 상대적으로 긴 것처럼 보이지만, 실제로는 일부 실시예에 있어서, 두 번째 채널의 대역폭이 첫 번 째 채널보다 훨씬 크므로, DRAM와 NRAM 또는 WRAM 사이의 통신은 두 번째 채널을 통해 더 효율 적일 수 있다. 본 발명의 실시예는 자체 하드웨어 조건에 따라 데이터 전송 채널을 선택할 수 있다. 기타 실시예에 있어서, GDMA의 기능과 IODMA의 기능은 하나의 구성 요소에 통합될 수 있다. 본 발명 은 설명의 편의를 위해 GDMA과 IODMA을 서로 다른 구성 요소로 간주하며, 당업자의 경우, 구현된 기 능 및 달성된 기술 효과가 본 발명과 유사한 한 본 발명의 보호 범위에 속한다. 또한, GDMA의 기능, IODMA의 기능, CDMA의 기능 및 MVDMA의 기능도 하나의 구성 요소에 의해 구현될 수 있다. 신경망 모델은 일반적으로 입력 레이어, 컨볼루션 레이어, 활성화 함수, 풀링 레이어, 전체 연결 레이어 등을 포함하며, 적게는 수 레이어, 많게는 수백 레이어를 포함하며, 각 레이어는 하나의 연산자를 수행하는 바, 예를 들면 컨볼루션 레이어는 컨볼루션 연산자를 수행하며, 레이어가 얼마 있으면 그만큼의 연산자를 수행해야 한다. 신경망 모델의 훈련은 입력 훈련 샘플을 통해 각 레이어의 매개 변수를 조정함으로써, 신경망 모델이 계산한 결 과가 실제 결과에 최대한 접근하도록 한다. 신경망 모델 훈련은 순방향 전파 및 역방향 전파를 포함하며, 순방 향 전파는 기존 모델을 기반으로 입력 훈련 샘플이 신경망 모델의 각 레이어를 통해 계산되어, 입력된 특징 맵 을 점차 추상적 특징으로 추출하는 것이며, 역방향 전파는 순방향 전파 결과와 실제 값으로 계산된 손실 함수를 통해, 기울기 하강법을 사용하여 사슬 법칙을 통해 손실 함수의 각 매개 변수에 대한 편향을 계산하여, 매개 변 수를 업데이트하는 것이다. 다시 업데이트 후의 매개 변수를 이용하여 훈련을 수행하며, 이렇게 복수 회 반복하 여, 최종적으로 순방향 전파의 계산 결과가 예상에 부합되도록 한다. 훈련된 신경망 모델을 사용하여 실제 환경 의 입력에 대해 순방향 연산을 수행함으로써 설정 작업을 완료하는 것을, 신경망 모델의 추론이라고 한다. 본 발명 실시예는 전술한 하드웨어 환경을 기반으로 신경망 모델을 수행하기 위한 데이터 처리 방안을 제공하는 바, 더 구체적으로는 신경망 모델 중의 컨볼루션 연산을 최적화하는 방안을 제공한다. 도 6은 본 발명 실시예를 적용할 수 있는 예시적인 컨볼루션 연산예를 나타낸다. 도면에 나타낸 바와 같이, 신 경망 모델 중의 컨볼루션 레이어는 입력 특징 맵에 대해 필터를 적용하여 컨볼루션 처리를 수행함으로써, 특징 추출을 수행한다. 도면에 크기가 6×6×3인 입력 특징 맵을 예시적으로 나타내는 바, 이는 3개의 6×6 크기의 특징 맵(즉 6×6×3 의 3차원 행렬)을 나타낼 수 있으며, 각각 3개의 서로 다른 특징을 나타낸다. 당해 예에서 특징 맵의 폭 W은 6 이고, 높이 H도 6이다. 입력 특징 맵의 수량은 입력 채널 수 Ci라고도 불리운다. 예를 들면 도면 중의 예에는 3 개의 특징 맵이 입력되어 있으며, 3개의 특징 채널이라고도 불리운다. 도면에 크기가 2×3×3×3인 필터가 더 예시적으로 나타내는 바, 이는 두개의 3×3×3 크기의 컨볼루션 코어(즉 두개의 3×3×3의 3차원 행렬)을 나타낼 수 있으며, 각 컨볼루션 코어는 또한 3개의 서로 다른 3×3 크기의 컨 볼루션 코어를 가지는 바, 입력된 3개의 서로 다른 특징 맵에 대응된다. 3차원 컨볼루션 코어의 수량은 출력 채 널 수 Co라고 불리울 수 있으며, 당해 예에서는 2다. 각 3차원 컨볼루션 코어에 있어서, 2차원 컨볼루션 코어의 수량은 입력 채널 수 Ci라고 불리울 수 있으며, 이는 입력 특징 맵의 채널 수와 같다. 각 2차원 컨볼루션 코어 는 해당하는 폭 Kw 및 높이 Kh를 가지며, 당해 예에서 Kw와 Kh는 모두 3이다. 입력 특징 맵과 필터의 컨볼루션 결과는 두개의 4×4 크기의 특징 맵을 출력한다. 여기서, 입력 특징 맵과 상측 의 3차원 컨볼루션 코어의 컨볼루션 결과는 상측의 1개의 4×4의 출력 특징 맵을 얻고, 입력 특징 맵과 하측의 3차원 컨볼루션 코어의 컨볼루션 결과는 하측의 1개의 4×4의 출력 특징 맵을 얻는다. 출력 특징 맵 중의 각 위 치 상의 값은, 각 입력 특징 맵의 대응하는 블록과 대응하는 컨볼루션 코어가 2차원 컨볼루션 연산을 수행한 후 다시 합산하여 얻어진다. 예를 들면, 도면에서 상측의 출력 특징 맵 상의 (0, 0) 위치의 값은, 입력 특징 맵 중 의 검은색 입방체 프레임에 있는 블록과 상측의 3차원 컨볼루션 코어가 2차원 컨볼루션 연산을 수행하여 3개의 값을 얻은 후 다시 합산하여 최종 값을 얻은 것이다. 기타 위치의 출력을 얻기 위해, 입력 특징 맵 상에서 컨볼 루션 코어의 위치를 이동할 수 있다. 도면의 예에 있어서, 컨볼루션 스텝 (Sx, Sy)는 (1, 1)이며, 횡 방향(폭 방향)에서 오른쪽으로 또는 종 방향 (높이 방향)에서 아래로 한 칸 이동한 후 컨볼루션 연산을 수행하여, 상측 의 출력 특징 맵 상의 (0, 1) 또는 (1, 0) 위치의 값을 각각 얻을 수 있다. 위의 설명에서 알 수 있듯이, 신경망의 하나의 컨볼루션 레이어에는 1세트의 입력 특징 맵이 있으며, 총 H×W× Ci개의 정보를 포함하되, H 및 W는 각각 입력 특징 맵의 높이 및 폭이고, Ci는 입력 특징 맵의 수량이며, 입력 채널 수라고도 불리운다. 컨볼루션 레이어는 Ci×Co개의 Kh×Kw 크기의 컨볼루션 코어를 가지되, Ci는 입력 채 널 수이고, Co는 출력 특징 맵의 수량(또는 출력 채널 수)이며, Kh 및 Kw는 각각 컨볼루션 코어의 높이 및 폭이 다. 출력 특징 맵은 Ho×Wo×Co개의 정보를 포함하되, Ho 및 Wo는 각각 출력 특징 맵의 높이 및 폭이고, Co는 출력 채널 수이다. 또한, 컨볼루션 연산에 있어서, 컨볼루션 스텝 (Sx, Sy)와도 관련이 있으며, 컨볼루션 스텝 의 크기는 출력 특징 맵의 사이즈에 영향을 미친다. 본 발명 실시예에 있어서, 관련된 다차원 데이터의 차원은 (N, H, W, C) 또는 (Co, H, W, Ci)로 나타내며, 이는 데이터의 메모리 내의 저장 순서를 나타낸다. 이해할 수 있듯이, 다차원 데이터는 복수의 차원을 가지지만, 메 모리의 배치가 항상 1차원이기 때문에, 다차원 데이터와 메모리 상의 저장 순서 사이에는 대응 관계가 존재한다. 다차원 데이터는 일반적으로 연속적인 저장 공간에 할당되며, 즉 다차원 데이터를 1차원으로 전개하 여 순차적으로 메모리에 저장할 수 있다. 예를 들면, 본 발명 실시예에 있어서, 저차원(여기서 Ci는 최저 차원 임) 우선 방식에 따라 순차적으로 저장한다. 인접한 차원은 다차원 데이터의 차원 정보 표현에서 서로 바싹 접 근한 차원을 의미하는 바, 예를 들면 W와 Ci가 인접하고, 이러한 인접한 차원은 연속적인 차원이라고 불리울 수 도 있다. 신경망 모델의 계산을 가속화하기 위하여, 일반적으로 복수의 연산 유닛을 사용하여 병렬 연산을 수행한다. 예 를 들면, 도 3 중의 연산 모듈 또는 도 5 중의 연산 모듈은 복수의 컨볼루션 전용 계산 유닛(또는 컨볼 루션 유닛이라고 불림) 을 포함할 수 있으며, 각 컨볼루션 유닛 상에서 예를 들면 완전한 (H, W, Ci) 차원의 계 산을 수행할 수 있다. 다시 말하면, Co개의 (H, W, Ci) 차원의 계산을 Co개의 컨볼루션 유닛 상에 분포하여 병 렬 계산을 수행함으로써, 계산 속도를 향상시킬 수 있다. 일반적으로, 컨볼루션 유닛의 수량은 고정되어 있으며, Co차원의 크기가 상대적으로 작으면, 유휴 컨볼루션 유닛이 존재하여, 계산 리소스를 충분히 이용할 수 없다. 일부 경우에 있어서, Co차원의 크기를 컨볼루션 유닛의 수량으로 정렬하여 스케줄을 통일해야 할 수도 있 다. 그러나, Co차원이 상대적으로 작은 경우, 이러한 정렬 제한은 무효 계산을 인입하게 되어 대량의 리소스 낭 비를 초래한다.한편, 액세스 속도를 향상시켜 액세스 대역폭을 충분히 이용하기 위하여, 인공 지능 칩 명령 세트에 대해 일반 적으로 벡터화 정렬을 수행할 필요가 있다. 인공 지능 칩의 설계는 일반적으로 Ci차원을 최저차원으로 사용하는 바, 즉 상기 NHWC의 배치 순서이다. 따라서, 명령 정렬의 요구 사항은 Ci차원의 크기를 지정된 값으로 정렬해야 하는 것이며, 예를 들면 명령 정렬 값이 Aci이면, 당해 명령 정렬 값 Aci을 단위로 데이터 액세스를 수행한다. 그러나, Ci차원이 상대적으로 작은 경우, 이러한 정렬 제한은 대량의 중복 계산을 초래하여 리소스 낭비를 초래 한다. 이에 감안하여, 본 발명 실시예는 전술한 하드웨어 환경에 기반한 신경망 모델을 수행하기 위한 데이터 처리 방 안을 제공한다. 제1 측면에 있어서, 본 발명 실시예는 제1 차원 폴딩 방안을 제공하는 바, 컨볼루션 레이어 중 의 Co차원에 대해 최적화를 수행하여, 상기 하드웨어 정렬 제한을 충족시키는 동시에, 리소스 낭비를 줄인다. 제2 측면에 있어서, 본 발명 실시예는 제2 차원 폴딩 방안을 제공하는 바, 컨볼루션 레이어 중의 Ci차원에 대해 최적화를 수행하여, 상기 명령 정렬 제한을 충족시키는 동시에, 리소스 낭비를 줄일 수 있다. 상기 두 측면은 단독적으로 실시할 수도 있고, 조합하여 실시할 수도 있다. 조합하여 실시할 경우, 상기 두 측면은 서로 보완함 으로써, 계산 성능의 최적화를 최대한 구현할 수 있다. 이하, 이 두 측면을 각각 설명한다. 도 7은 하나의 구체적인 예를 통해 본 발명 실시예의 제1 차원 폴딩 방안의 예시적인 원리도를 나타낸다. 컨볼 루션 연산을 수행하기 위한 컨볼루션 유닛의 수량이 Aco인 것으로 가정한다. 하드웨어 설계에 따라, Aco의 값이 다를 수 있는 바, 예를 들면 32, 64, 128 등일 수 있다. 아래의 예에 있어서, Aco＝64인 예를 들어 설명한다. 하드웨어의 정렬 요구 사항에 따라, 필터의 Co차원을 Aco으로 정렬할 필요가 있는 바, 즉 64로 정렬할 필요가 있다. 도면의 왼쪽은 컨볼루션 레이어의 원시 필터를 나타내는 바, 예를 들면 4×3×3×4로 나타내며, 즉 출력 채널 수 Co가 4이고, 입력 채널 수 Ci가 4이며, 각 컨볼루션 코어 크기가 3×3이다. 또한, 원시 필터의 컨볼루션 스 텝은 (Sx, Sy)＝(1, 1)이다. 도면으로부터 알 수 있듯이, 원시 필터의 Co차원은 하드웨어의 정렬 요구 사항 보다 훨씬 작다. 기존의 처리 방식에 따르면, Co차원에 대해 0 채움을 수행하여 64로 정렬한다. 4에서64로 정렬하기 위하여, 매우 많은 중복 계산이 증가되며, 리소스 낭비를 초래한다. 도면의 오른쪽은 본 발명 실시예에 따라 폴딩을 수행한 후의 제1 폴딩 필터를 나타내는 바, 예를 들면 64×6×6 ×4로 나타내며, 즉 출력 채널 수 Co’는 64이고, 입력 채널 수는 여전히 4로서 원시 필터와 같으며, 각 컨볼루 션 코어 크기는 인6×6이다. 또한, 제1 폴딩 필터의 컨볼루션 스텝은 (Sx’, Sy’)＝(4, 4)이다. 이로부터 알 수 있듯이, 제1 폴딩 필터의 출력 채널 수는 이미 하드웨어의 정렬 요구 사항로 정렬되었으며, 따라서 이때 컨볼루션 유닛을 충분히 이용하여 연산 처리를 수행할 수 있다. 상기 제1 차원 폴딩 처리에 있어서, 제1 폴딩 필터는 원시 필터에 대해 컨볼루션 스텝 이동을 복수 회 수행하여 얻은 복수의 확장 필터를 합성한 것이다. 상기 제1 차원 폴딩 처리는 아래와 같은 고려에 기초하는 바, 즉 원시 계산 방식에 따르면, 단일 계산은 일부 컨볼루션 유닛을 낭비하게 되므로, 다음 계산, 그 다음 계산 등을 단일 계산으로 옮김으로써 컨볼루션 유닛을 충분히 이용할 수 있다. 관점을 바꾸어 말하면, 본 발명 실시예의 제1 차 원 폴딩 방안은 복수 회 컨볼루션 스텝 이동에 대응하는 계산(또는 복수의 시간 상의 계산)을 1회의 컨볼루션 스텝 상(또는 하나의 시간 상)에 폴딩하는 것에 해당한다. 2차원 컨볼루션에 있어서, 컨볼루션 스텝은 컨볼루션 코어의 폭 방향 상의 횡 방향 컨볼루션 스텝 Sx 및 컨볼루 션 코어의 높이 방향 상의 종 방향 컨볼루션 스텝 Sy를 포함한다. 임의의 방향 상에서 컨볼루션 스텝을 1회 이 동하여, 1회 계산을 얻을 수 있으며, 이러한 1회 계산은 하나의 필터에 대응한다. 이 필터는 원시 필터는 컨볼 루션 스텝을 1회 이동하여 얻은 것이며, 나중에 유사하게 생성된 기타 필터와 합성하기 위하여서는, 컨볼루션 코어의 폭 및 높이를 컨볼루션 스텝에 따라 대응하게 확장할 필요가 있으며, 이를 여기서는 확장 필터라 부른다. 원시 필터를 컨볼루션 코어의 폭 방향 상에서 횡 방향 컨볼루션 스텝을 Nw1-1회 이동하고, 컨볼루션 코어의 높 이 방향 상에서 종 방향 컨볼루션 스텝을 Nh1-1회 이동하는 것으로 가정하면, Ntotal1개의 확장 필터를 얻을 수 있으며, Ntotal1＝Nw1×Nh1이고, Nw1 및 Nh1은 자연수이다. 이 Ntotal1개의 확장 필터는 출력 채널 Co차원 상에서 하나의 폴딩 필터로 합성될 수 있으며, 이를 여기서는 제1 폴딩 필터라 부른다. 여전히 도 7의 예를 들면, 원시 필터의 Co는 4이며, 하드웨어 정렬 요구 사항에 따라 64로 정렬할 필요가 있으 므로, 64÷4＝16개의 확장 필터로 하나의 제1 폴딩 필터를 합성할 필요가 있다.도 8은 본 발명 실시예에 따른 더 상세한 제1 차원 폴딩을 나타낸 모식도이다. 도면에 전술한 예에 필요한 16개 의 확장 필터를 나타낸다. 도면에서 어두운 색 부분은 원시 필터의 컨볼루션 코어를 나타낸다. 도면으로부터 알 수 있듯이, 이 16개의 확장 필터은 폭 방향 상에서 Sx를 3회 이동하고, 높이 방향 상에서 Sy를 3회 이동하여 얻 은 것이다. 즉, 폭 방향 상에서 4배, 높이의 역방향 상에서도 4배 증가시켜 총 16개의 확장 필터를 얻는다. 이 16개의 확장 필터를 출력 채널 Co차원 상에서 하나의 제1 폴딩 필터로 합성하기 위하여, 이들의 형상을 조정 할 필요가 있다. 도면에 나타낸 바와 같이, 원시 필터가 차지하는 어두운 색 부분 외의 영역에 0 채움을 수행하 여, 16개의 확장 필터의 폭 및 높이가 같도록 할 수 있다. 각 확장 필터(6×6의 컨볼루션 코어)가 컨볼루션 계 산을 수행하는 값은 원시 필터(3×3의 컨볼루션 코어)가 컨볼루션 계산을 수행하는 값과 동일하다. 이어서, 상기 16개(4, 6, 6, 4)의 확장 필터를 출력 채널 Co차원 상에서 하나의 (16*4, 6, 6, 4)의 제1 폴딩 필터를 폴딩할 수 있다. 이때, 제1 폴딩 필터의 출력 채널 Co’＝16*4＝64는 컨볼루션 유닛의 수량과 같으며, 따라서 하드웨어 정렬 요구 사항에 부합되므로, 컨볼루션 유닛을 충분히 이용하는 목적을 구현할 수 있다. 도 8의 폴딩 과정으로부터 알 수 있듯이, 제1 폴딩 필터의 출력 채널 수는, 원시 필터의 출력 채널 수에 비해 배로 증가하므로, 본 발명 실시예의 폴딩 방안은 특히 원시 필터의 출력 채널 수 Co가 상대적으로 작은 경우에 적합한 바, 예를 들면 Co가 제1 임계치 A1을 초과하지 않고, 제1 임계치 A1가 제2 임계치 Aco(즉 하드웨어 정렬 요구 사항)보다 작은 경우에 적합하다. 일부 실시예에 있어서, 제1 임계치 A1≤Aco/2이다. 실천 결과는 Co가 작 을수록 기존 알고리즘에 비해 향상 가능 공간이 더 큼을 나타낸다. 도 8의 폴딩 과정으로부터 또 알 수 있듯이, 원시 필터의 각 매개 변수 및 하드웨어 정렬 요구 사항에 기반하여, 제1 폴딩 필터의 각 매개 변수를 확정할 수 있다. 우선, 원시 필터의 출력 채널의 수량 Co 및 하드웨어 정렬 요구 사항 Aco에 기반하여 제1 총 폴딩 배율 Ntotal1을 확정할 수 있다. 일부 실시예에 있어서, 아래와 같이 총 폴딩 배율 N을 확정할 수 있으며, (1-1) Coa는 Co가 가장 가까운 Aco/2n으로 정렬된 값이고, n은 자연수이다. 상기와 같이, 본 발명의 실시예는 배수 폴딩을 통해, Co를 지정된 값 Aco으로 정렬한다. Aco가 Co의 2n 배의 경 우, 양자를 직접 나누면 폴딩해야 할 총 배율을 얻을 수 있다. 예를 들면, 전술한 예에 있어서, Co＝4이므로, Ntotal1＝64/4＝16배이다. Aco가 Co의 2n배가 아닌 경우, 먼저 Co를 가장 가까운 Aco/2n의 값으로 정렬할 필요가 있다. 예를 들면, Aco가 64이면, Aco/2n은 32, 16, 8, 4 및 2를 포함하며, Co를 이러한 값 중에서 가장 가까운 값으로 정렬할 필요가 있다. 예를 들면, Co＝3이면, 4로 정렬할 필요가 있고; Co＝5이면, 8로 정렬할 필요가 있 다. 정렬한 후, 다시 Aco로 나누면, 제1 총 폴딩 배율 Ntotal1을 얻을 수 있다. 이어서, 제1 총 폴딩 배율 Ntotal1을 확정한 후, 이를 컨볼루션 코어의 폭 방향 상의 제1 폭 차원의 폴딩 배율 Nw1 및 컨볼루션 코어의 높이 방향 상의 제1 높이 차원의 폴딩 배율 Nh1로 분할할 수 있다. 다양한 규칙에 따라 배율 분할을 수행하여, 다양한 이점을 구현할 수 있다. 일 실시예에 있어서, 폴딩 배율을 컨볼루션 코어의 폭 방향에 우선적으로 분할할 수 있다. 나중에 설명하는 바 와 같이, 제1 차원 폴딩을 수행한 후의 필터를 이용하여 컨볼루션 연산을 수행하여 얻은 것은 중간 결과이며, 이에 대해 차원 역 폴딩 또는 차원 재배열을 더 수행하여 최종적으로 결과를 얻을 필요가 있다. 제1 차원 폴딩 이 컨볼루션 코어의 폭 방향 상에서 발생할 때, 차원 재배열은 매우 간단한 바, 중간 결과의 차원 표현을 조정 하기만 하면 되며, 이는 차원 재결합이라고도 불리우며, 임의의 기타 처리를 필요로 하지 않는다. 따라서, 폴딩 배율을 컨볼루션 코어의 폭 방향으로 우선적으로 분할하면, 후속의 처리를 간소화할 수 있다. 예를 들면, 상기 예에 있어서, 제1 총 폴딩 배율 16은 폭 16배와 높이 1배로 분할될 수 있으며, 이로써 후속의 결과 처리를 간소 화할 수 있다. 이때, 제1 폴딩 필터의 컨볼루션 코어의 사이즈는 3×18이다. 다른 일 구현에 있어서, 상기 예 중의 제1 총 폴딩 배율 16을폭 8배와 높이 2배로 분할할 수 있으며, 이때 제1 폴딩 필터의 컨볼루션 코어의 사 이즈는 4×10이다. 이로부터 알 수 있듯이, 서로 다른 분할 방식은 제1 폴딩 필터의 컨볼루션 코어의 사이즈에 영향을 미친다.다른 일 실시예에 있어서, 폴딩 배율을 컨볼루션 스텝이 더 작은 방향에 우선적으로 분할할 수 있다. 앞의 폴딩 과정으로부터 알 수 있듯이, 제1 폴딩 필터의 컨볼루션 코어의 사이즈는 원시 필터의 컨볼루션 스텝과 관련이 있으며, 컨볼루션 스텝이 클수록, 제1 폴딩 필터의 컨볼루션 코어가 더 크게 팽창한다. 따라서, 폴딩 배율을 컨 볼루션 스텝이 더 작은 방향으로 우선적으로 분할하면, 컨볼루션 코어의 팽창을 줄이는데 유리하며, 따라서 연 산량을 줄일 수 있다. 예를 들어 원시 필터의 컨볼루션 코어가 3×3이고, (Sx, Sy)＝(1, 3)이며, 제1 총 폴딩 배율 16을 폭 16배와 높이 1배로 분할할 수 있는 것으로 가정하면, 제1 폴딩 필터의 컨볼루션 코어의 사이즈는 3×18이다. 제1 총 폴딩 배율 16을 폭 8배와 높이 2배로 분할하면, 이때 제1 폴딩 필터의 컨볼루션 코어의 사이 즈는 6×10이다. 제1 총 폴딩 배율 16을 폭 4배와 높이 4배로 분할하면, 제1 폴딩 필터의 컨볼루션 코어의 사이 즈는 12×6이다. 또 다른 일 실시예에 있어서, 폴딩 배율을 컨볼루션 코어의 폭 방향과 컨볼루션 코어의 높이 방향에 평균으로 분할할 수 있다 예를 들면, 앞에서 참조한 도 7과 도 8의 예에 있어서, 제1 총 폴딩 배율 16을 폭 4배와 높이 4 배로 평균으로 분할한다. 더 다른 일 실시예에 있어서, 폴딩 배율을 제1 폴딩 필터의 컨볼루션 코어의 사이즈가 최소화되도록 분할함으로 써, 증가되는 중복 연산을 최소화할 수 있다. 상기 다양한 규칙에 기반하여, 일부 실시예에 있어서, 아래와 같이 방식으로 제1 총 폴딩 배율 Ntotal1을 분할할 수 있다. = （1-2） = / （1-3） 컨볼루션 코어의 폭 방향 상의 제1 폭 차원의 폴딩 배율 Nw1 및 높이 방향 상의 제1 높이 차원의 폴딩 배율 Nh1 을 확정한 후, Nw1, Nh1 및 원시 필터의 컨볼루션 스텝에 기반하여, 제1 폴딩 필터의 컨볼루션 스텝을 확정하고; Nw1, Nh1 및 원시 필터의 컨볼루션 코어 및 컨볼루션 스텝에 기반하여, 제1 폴딩 필터의 컨볼루션 코 어의 크기를 확정할 수 있다. 일부 실시예에 있어서, 아래와 같이 폴딩 필터의 컨볼루션 스텝을 확정할 수 있다. = * （1-4） = * （1-5） 여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, S′x, Sy′는 각각 제1 폴딩 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이다. 일부 실시예에 있어서, 아래와 같이 제1 폴딩 필터의 컨볼루션 코어의 크기를 확정할 수 있다. = + ( - 1) * （1-6） = + (Nh1- 1) * （1-7） 여기서, kw, kh는 각각 원시 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이며, kw′, kh′는 각각 제1 폴 딩 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이다. 따라서, 어떻게 하드웨어 정렬 요구 사항에 따라 제1 폴딩 필터의 각 매개 변수를 설계하는지를 설명하였다. 도 9는 본 발명 실시예에 따른 제1 차원 폴딩 전후의 계산 과정을 나타낸 예시적인 대조도이다. 앞의 제1 차원 폴딩 과정으로부터 알 수 있듯이, 제1 폴딩 필터의 입력 채널 차원은 원시 필터의 입력 채널 차 원과 같으므로, 입력 특징 맵에 대해 임의의 처리도 수행할 필요없이, 직접 제1 폴딩 필터와 컨볼루션 연산을 수행할 수 있다. 도면에 나타낸 바와 같이, 입력 특징 맵이 (1, 16, 16, 4), 즉 4개 16×16의 특징 맵인 것으로 가정한다. 도면 의 상측에 원시 필터 (4, 3, 3, 4) 및 컨볼루션 스텝 (Sx, Sy)＝(1, 1)을 이용하여 컨볼루션 연산을 수행한 후 얻은 결과를 나타냈으며, 출력 특징 맵은 (1, 14, 14, 4), 즉 4개 14×14의 특징 맵으로서, 도면에서는 어두운 색 사각형으로 나타낸 영역이다. 당업자가 이해할 수 있듯이, 도시를 명확히 하기 위하여, Ci차원 상의 데이터 를 나타내지 않았으며, 값으로만 표시하였다. 이에 비해, 도면의 하측에는 제1 폴딩 필터 (64, 6, 6, 4) 및 컨볼루션 스텝 (Sx', Sy')＝(4, 4)를 이용하여 컨 볼루션 연산을 수행한 후 얻은 결과를 나타냈으며, 출력 특징 맵은 (1, 4, 4, 64), 즉 64개 4×4의 특징 맵이다. 도면의 비교로부터 알 수 있듯이, 각 확장 필터 (6×6의 컨볼루션 코어)가 컨볼루션 계산을 수행하는 값과 원시 필터 (3×3의 컨볼루션 코어)가 컨볼루션 계산을 수행하는 값은 같지만, 복수 회 컨볼루션 스텝의 연산을 1회에 연산하기 때문에, 데이터 값의 위치에 변화가 발생하게 되며, 또는 데이터 값이 차원 상에서 재배열된다고 말할 수 있다. 제1 폴딩 필터가 입력 특징 맵에 대해 컨볼루션 연산을 수행하여 얻은 중간 결과에 대해, 다시 차원 재배열, 즉 차원 역 폴딩을 수행하여, 최종 출력 특징 맵을 얻을 수 있으며, 따라서 원시 필터의 연산 결과와 완전히 같다. 중간 결과의 차원은 예를 들면 (N, ceil(Ho/Nh1), ceil(Wo/Nw1), Nh1*Nw1*Coa)로 나타낼 수 있으 며, 여기서 ceil()는 절상 함수를 나타내고, Coa는 Co가 가장 가까운 Aco/2n으로 정렬된 값이다. 예를 들면, 도 면의 예에 있어서, Coa＝Co＝4, Nh1＝Nw1＝4, ceil(Ho/Nh1)＝ceil(14/4)＝4, ceil(Wo/Nw1)＝ceil(14/4)＝4이다. 필터의 제1 차원 폴딩으로 인한 컨볼루션 코어 팽창과 컨볼루션 스텝이 증가 하기 때문에, 또한 입력 특징 맵의 크기에 따라, 폴딩 후의 컨볼루션 연산 중에 일부 중복 계산이 존재할 수 있 다. 중간 결과에 대해 차원 재배열을 수행 후, 이러한 중복 계산은 실제 수요로 하는 결과의 가장 외측에 출현 되는 바, 구체적인 가장 우측과 가장 하측에 출현된다. 예를 들면, 도면의 예에 있어서, 중간 결과 (1, 4, 4, 64)에 대해 차원 재배열을 수행한 후, (1, 16, 16, 4)를 얻을 수 있으며, 이는 원시 결과 (1, 14, 14, 4)에 비 해 일부 중복 영역이 많아지는 바, 이는 도면 중의 역“L\" 모양의 흰색 사각형 영역에 나타낸 것과 같다. 이때, 이러한 중복 영역을 제거하기만 하면 된다. 앞의 설명으로부터 알 수 있듯이, 제1 차원 폴딩은 컨볼루션 코어의 폭 방향 상 및/또는 높이 방향 상에 분포될 수 있다. 서로 다른 방향 상의 폴딩은 서로 다른 차원 재배열 결과가 나오므로, 서로 다른 처리 방식이 필요하 다. 아래의 설명에 있어서, 간소화를 위하여, 표현 상 위의 중복 영역의 고려하지 않는다. 그러나, 당업자는 본 명세서의 설명으로부터 이해할 수 있듯이, 중복 영역이 존재하는 경우에도, 마찬가지로 아래의 설명을 참조한여 차원 재배열을 수행한 후, 다시 중복 제거를 수행할 수 있다. 일 실시예에 있어서, 제1 차원 폴딩이 컨볼루션 코어의 폭 W 방향 상의 폴딩만을 수행했을 경우, 즉 확장 필터 가 원시 필터가 컨볼루션 코어의 폭 W 방향 상에서 이동하여 얻은 확장 필터만을 포함할 경우, 직접 중간 결과 차원에 대해 재결합을 수행하여 출력 특징 맵을 얻을 수 있다. 위에서 언급한 바와 같이, 본 발명의 실시예에 있어서, 관련된 다차원 데이터의 차원은 (Co, H, W, Ci)로 나탄 내며, 즉 데이터의 메모리 내의 저장 순서는 Co, H, W, Ci인 바, 즉 Ci차원은 최저차원이다. 당업자라면 또한 이해할 수 있듯이, 다차원 데이터 중의 인접 차원에 대해 분할 또는 합병을 수행하는 것은, 당해 다차원 데이터 의 각 데이터 요소의 메모리 내의 위치에 영향을 미치지 않는다. 본 발명 실시예에 있어서, 컨볼루션 연산의 특성에 기반하여 W와 Ci차원은 차원이 인접하거나 연속적이므로, W 방향의 폴딩만을 수행했을 경우, 이때 중간 결과 (N, Ho, Wo/Nw, Nw*Co)를 직접 (N, Ho, Wo, Co) 로 간주할 수 있다. 즉, W와 Ci차원을 (Wo/Nw, Nw*Co)에서 (Wo, Co)로 재결합할 수 있다. 이러한 재결합은 중간 결과의 각 데 이터 요소의 메모리 내의 저장 위치에 영향을 미치지 않는다. 다른 일 실시예에 있어서, 제1 차원 폴딩 시 컨볼루션 코어의 높이 H 방향 상의 폴딩만을 수행했을 경우, 즉 확 장 필터가 원시 필터가 컨볼루션 코어의 높이 H 방향 상에서 이동하여 얻은 확장 필터만을 포함할 경우, 중간 결과에 대해 차원 전치를 수행하여, 출력 특징 맵을 얻을 필요가 있다. 차원 전치는 다차원 데이터의 각 데이터 요소의 메모리 내의 위치를 개변하게 된다. 구체적으로, 중간 결과 (N, Ho/Nh, Wo, Nh*Co)의 Co차원 상의 (Co, (Nh-1)*Co ]의 특징을 H차원으로 전치하여, (N, Ho, Wo, Co)를 얻을 수 있다. 도 10는 본 발명 실시예에 따른 차원 전치를 나타낸 예시적인 모식도이다. 도 10에 나타낸 바와 같이, Nh1＝4, 즉 왼쪽의 중간 결과가 Co차원 상에서 4배의 H 방향 상의 특징을 포함하며, 각각 Co0, Co1, Co2 및 Co3인 것으로 가정한다. 이때, Co차원 상에서 Co0 특징을 유지하고, 나머지 Co1, Co2 및 Co3 특징을 차원 전치를 통해 H차원 상으로 전이할 수 있는 바, 오른쪽의 최종 결과에 나타낸 바와 같다. 또 다른 일 실시예에 있어서, 제1 차원 폴딩 시 컨볼루션 코어의 폭 W 방향 상 및 높이 H 방향 상의 폴딩을 동 시에 수행했을 경우, 즉 확장 필터가 원시 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터를 포함할 뿐만 아니라, 원시 필터가 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터도 포함할 경우, 전술한 두 실시예 종합하여 중간 결과에 대해 처리를 수행할 수 있다. 일 구현에 있어서, 먼저 중간 결과에 대해 차원 재결합을 수행하고, 다시 차원 전치를 수행하여, 출력 특징 맵 을 얻을 수 있다. 구체적으로, 먼저 중간 결과 (N, Ho/Nh, Wo/Nw, Nh*Nw*Co)를 (N, Ho/Nh, Wo, Nh*Co)로 간주 하는 바, 즉 Co를 차원 상의 W 방향에서 폴딩하여 온 특징을 W 방향 상의 특징으로 간주한다. 이어서, 다시 당 해 차원에 대해 전치 작업를 수행하여, Co 차원 상의 (Co, (Nh-1)*Co]에서의 특징을 높이 H차원 상으로 전치하 여, (N, Ho, Wo, Co)를 얻는다. 다른 일 구현에 있어서, 먼저 중간 결과에 대해 차원 전치를 수행하고, 다시 차원 재결합을 수행하여, 출력 특 징 맵을 얻을 수 있다. 구체적으로, 먼저 중간 결과(N, Ho/Nh, Wo/Nw, Nh*Nw*Co)에 대해 차원 전치 작업을 수행할 수 있다. 예를 들면, 여전히 도 10을 참조하면, 먼저 Co 차원 상의 Co1, Co2 및 Co3를 차원 전치를 통해 H차원 상에 전이하지만, 이 때 Co0＝Co1＝Co2＝Co3＝Nw*Co이다. 차원 전치 후, 중간 결과가 (N, Ho, Wo/Nw, Nw*Co)로 변한다. 그 다음, 다 시 각 Co0, Co1, Co2 및 Co3을 Nw개의 Co로 간주하여, (N, Ho, Wo, Co)를 얻는다. 위에서 본 발명 실시예에 따른 제1 차원 폴딩을 통해 필터를 조정하는 방안을 설명하였다. 일부 실시예에 있어 서, 당해 제1 폴딩 필터는 오프라인으로 생성한 것일 수 있다. 예를 들면, 신경망 모델을 이용하여 추론을 수행 하는 과정에서, 사전에 배치한 오프라인으로 생성한 제1 폴딩 필터 및 입력 특징 맵을 이용하여 컨볼루션 연산 을 수행하여, 추론 과정을 수행할 수 있다. 다른 일부 실시예에 있어서, 당해 제1 폴딩 필터는 온라인으로 생성 한 것일 수 있다. 예를 들면, 신경망 모델에 대해 훈련을 수행하는 과정에서, 온라인으로 컨볼루션 레이어의 필 터에 대해 폴딩을 수행한 후, 훈련 데이터와 컨볼루션 연산을 수행하여, 훈련 과정을 수행할 수 있다. 어느 과정에서 본 발명 실시예의 제1 폴딩 필터를 이용하는지에 관계없이, 제1 차원 폴딩을 통해 Co차원 정렬을 구현하면 컨볼루션 연산의 계산량을 크게 최적화할 수 있다. 이하, 컨볼루션 계산량의 측면에 대해, 본 발명 실 시예의 제1 차원 폴딩 방안과 기존 컨볼루션 연산의 성능을 비교한다. P가 컨볼루션 계산량을 나타내고, Aci가 Ci의 정렬 후의 값을 나타내며, ACO가 Co의 정렬 후의 값을 나타내면, 아래의 식과 같다. P ="}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "（1-8） NHWC차원 배치 순서의 하드웨어를 사용하면 Ci차원이 최저 차원이고, 또한 백터 명령 정렬의 요구 사항이 Aci로 정렬해야 할 경우가 많으므로, Aci는 벡터 명령 정렬의 요구 사항을 대상으로 하며; 인공 지능 계산 가속화 하드 웨어가 일반적으로 복수의 병렬의 고성능의 컨볼루션 계산 유닛을 가지므로, ACO는 컨볼루션 코어 Co차원 정렬의 요구 사항을 대상으로 하며, 그 값은 고성능 병렬 계산 유닛의 수량이다. 최적화하기 전에 기존 컨볼루션 연산의 계산량은 아래의 식과 같다. ="}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "（1-9） 본 발명 실시예의 제1 차원 폴딩 방안을 사용하여 최적화한 후, 컨볼루션 연산의 계산량은 아래의 식과 같다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "그러면 제1 차원 폴딩 후의 성능의 최적화율은 아래의 식과 같다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "위의 도 7 및 도 8를 참조하여 설명한 예를 들면, 최적화하기 전， =1*64*64*ho*wo*3*3 (Sx, Sy = 1, 1) 최적화한 후， =1*64*64*(ho/4)*(wo/4)*6*6 (Sx, Sy = 4, 4) =1*64*64*ho*wo*3*3*(1/4) 감소된 컨볼루션 계산 유닛의 컨볼루션 계산량은 75％이다. 위의 계산량의 비교로부터 알 수 있듯이, 본 발명 실시예에 의해 제공되는 제1 폴딩 필터 방안은 컨볼루션 유닛 의 계산량을 효과적으로 절약하여, 컨볼루션 연산의 계산 성능을 향상시킬 수 있다. 상기 제1 차원 폴딩 방안은 단독적으로 실시하여 필터의 출력 채널 차원을 조정할 수 있으며, 예를 들면 필터의 출력 채널 차원이 상대적으로 작은 경우에 실시할 수 있다. 그러나, 제1 차원 폴딩 방안은 필터의 입력 채널 차 원을 개변시키지 않는다. 본 발명의 제2 차원 폴딩 방안에 있어서, 필터의 입력 채널 차원을 조정할 수 있다. 제2 차원 폴딩 방안은 단독적으로 실시할 수도 있고(예를 들면, 필터의 입력 채널 차원이 상대적으로 작은 경우), 제1 차원 폴딩 방안의 기초 상에서 조합하여 실시할 수도 있다(예를 들면, 필터의 입력 채널 차원 및 출 력 채널 차원이 모두 상대적으로 작은 경우). 이하, 본 발명 실시예의 제2 차원 폴딩 방안을 설명하는 바, 당업 자가 이해할 수 있듯이, 제2 차원 폴딩은 원시 필터에 기반하여 수행할 수도 있고, 원시 필터에 대해 제1 차원 폴딩을 수행한 후에 얻은 제1 폴딩 필터에 기반하여 수행할 수도 있다. 따라서, 문맥의 표현을 기반으로 본 명 세서에 언급된 폴딩 대기의 필터는 원시 필터일 수도 있고, 제1 폴딩 필터일 수도 있다. 도 11은 하나의 구체적인 예를 통해 본 발명 실시예의 제2 차원 폴딩 방안의 예시적인 원리도를 나타낸다. 명령 정렬 요구 사항의 정렬 값이 Aci인 것으로 가정한다. 명령 세트의 설계에 따라, Aci는 서로 다른 값을 가질 수 있으며, 예를 들면 32, 64, 128 등일 수 있다. 아래의 예에 있어서, Aci＝64인 예를 들어 설명한다. 명령의 정 렬 요구 사항에 따라, 필터의 Ci차원을 Aci, 즉 64로 정렬할 필요가 있다. 도면의 왼쪽은 컨볼루션 레이어의 폴딩 대기의 필터를 나타내며, 이는 예를 들면64×4×4×4로 나타내는 바, 출 력 채널 수 Co가 64이고, 입력 채널 수 Ci가 4이며, 각 컨볼루션 코어 크기는 4×4이다. 도면으로부터 알 수 있 듯이, 폴딩 대기의 필터의 Ci차원 명령의 정렬 요구 사항보다 훨씬 작다. 기존의 처리 방식에 따라, Ci차원 에 대해 0 채움을 수행하여 64로 정렬한다. 4에서 64으로 정렬하면, 매우 많은 중복 계산이 증가되며, 리소스 낭비를 초래한다. 도면의 오른쪽은 본 발명 실시예에 따라 제2 차원 폴딩을 수행한 후의 제2 폴딩 필터를 나타내며, 이는 예를 들 면 64×1×1×64로 나타내는 바, 즉 입력 채널 수 Co'가 64이고, 출력 채널 수는 폴딩 대기의 필터와 같은 바 모두 64이며, 각 컨볼루션 코어 크기는 1×1이다. 이로부터 알 수 있듯이, 컨볼루션 코어의 폭 차원 및 높이 차 원 상의 데이터가 이미 입력 채널 차원에 전이되었기에, 제2 폴딩 필터의 입력 채널 수는 이미 명령의 정렬 요 구 사항로 정렬되었으며, 이때 추가로 0 채움을 수행하여 Ci차원 정렬을 수행할 필요가 없기에, 이 전의 0 채움으로 인한 중복 계산을 피할 수 있다. 상기 제2 차원 폴딩 처리에 있어서, 제2 폴딩 필터는 폴딩 대기의 필터에 대해 제2 차원 폴딩 처리을 수행하여 얻은 것이다. 상기 제2 차원 폴딩 처리는 이하와 같은 고려에 기반한 것인 바, 즉 원시 계산 방식에 따르면, 0 채움을 통해 Ci 정렬을 구현하기에 중복 계산이 발생하여, 계산 리소스를 낭비하게 되는 것이다. 기타 차원의데이터를 Ci차원 상에 전이하여, Ci차원을 명령 정렬 값으로 채우면, 계산 리소스의 낭비를 최대한 피하여, 계 산 효율을 향상시킬 수 있다. 도 12는 본 발명 실시예에 따른 더 상세한 제2 차원 폴딩 모식도를 나타낸다. 도면에 도 11의 예 중의 폴딩 대 기의 필터 (64, 4, 4, 4)의 제2 차원 폴딩 과정을 나타낸다. 폴딩 대기의 필터의 Ci는 4이며, 명령 정렬 요구 사항에 따라, 64로 정렬할 필요가 있기에, Ntotal2＝64÷4＝16배의 폴딩이 필요하다. 도면의 예에 있어서, 제2 총 폴딩 배율 16을 컨볼루션 코어의 폭 방향 상의 제2 폭 차원의 폴딩 배율 Nw2(도면에서는 4배 폴딩임) 및 컨볼루 션 코어의 높이 방향 상의 제2 높이 차원의 폴딩 배율 Nh2(도면에서는 4배 폴딩임)으로 할당한다. 도면에 나타낸 바와 같이, 바람직하게는, 우선 폭 W차원의 폴딩을 수행한다. 도면에서 1201은 단 층 W차원 데이 터를 4 폴딩 또는 4단락으로 분할한 후, 입력 채널 Ci차원 상에 순차적으로 배열할 수 있다. 폴딩 대기의 필터 을 W차원 상에 완전히 폴딩한 후, 1210에 나타낸 중간 필터를 얻을 수 있으며, 그 차원은 (64, 4, 1, 1 6)으로 나타낼 수 있다. 이어서, 중간 필터의 기초 상에서, 높이 H차원의 폴딩을 수행할 수 있다. 도면에 나타낸 바와 같이, H차 원 상에서도 4배 폴딩을 수행한다. 중간 필터의 H차원 데이터를 4 폴딩 또는 4단락으로 분할한 후, 입력 채널 Ci차원 상에 순차적으로 배열한다. 당해 폴딩 과정에 있어서, H차원 상의 당해 4단락 중의 각 단락은 각각 이전의 단 층 W차원 상에서 폴딩하여 얻은 데이터에 대응한다. H차원 상에서 완전히 폴딩한 후, 1220에 나타낸 제2 폴딩 필터를 얻을 수 있으며, 그 차원은 (64, 1, 1, 64)로 나타낼 수 있다. 제2 폴딩 필터의 입력 채널 Ci 차원은 64로서, 명령의 정렬 요구 사항을 충족시킨다. 위에서 먼저 폭 W차원 폴딩을 수행하고, 다시 H차원 폴딩을 수행하는 폴딩 방식을 설명하였다. 당업자가 이해할 수 있듯이, 먼저 H차원의 폴딩을 수행하고, 다시 W차원의 폴딩을 수행할 수도 있다. 그러나, H차원과 Ci차원이 인접하지 않기에, 먼저 W차원의 폴딩을 수행하는 것과 비교하면, 추가 처리가 필요한 바, 예를 들면 데이터 전 치 작업이 필요하다. 앞의 제2 차원 폴딩 과정으로부터 알 수 있듯이, 제2 폴딩 필터의 입력 채널 Ci차원에 변화가 발생하였기에, 이 에 따라 입력 특징 맵에 대해서도 동일한 유형의 제2 차원 폴딩을 수행할 필요가 있다. 입력 특징 맵과 필터에 대해 동일 배율의 폴딩을 수행하였기에, 제2 차원 폴딩의 입력 특징 맵과 제2 폴딩 필터에 대해 컨볼루션 연산 을 수행한 후의 출력과 양자를 폴딩하기 전의 컨볼루션 연산 출력과 같으므로, 다시 출력 결과에 대해 임의의 처리도 필요하지 않는다. 또한, 도 12의 제2 차원 폴딩 과정으로부터 알 수 있듯이, 제2 폴딩 필터의 입력 채널 수가 폴딩 대기의 필터의 입력 채널 수에 대해 배로 증가하기에, 본 발명 실시예의 제2 차원 폴딩 방안은 특히 필터의 입력 채널 수 Ci가 상대적으로 작은 경우에 적합한 바, 예를 들면 Ci가 제3 임계치 A2를 초과하지 않고, 제3 임계치 A2가 명령 정 렬 값 Aci보다 작은 경우에 적합하다. 일부 실시예에 있어서, 제3 임계치 A2≤Aci/2이다. 실천 결과는 Ci가 작 을수록 기존 알고리즘에 비해 향상시키는 공간이 더 크다는 것을 나타낸다. 도 12의 제2 차원 폴딩 과정으로부터 또 알 수 있듯이, 폴딩 대기의 필터의 각 매개 변수 및 명령 정렬 요구 사 항에 기반하여, 제2 폴딩 필터의 각 매개 변수를 확정할 수 있다. 우선, 폴딩 대기의 필터의 입력 채널 수량 Ci 및 명령 정렬 값 Aci에 기반하여 제2 총 폴딩 배율 Ntotal2를 확정 할 수 있다. 일부 실시예에 있어서, 아래와 같이 제2 총 폴딩 배율 Ntotal2를 확정할 수 있다. (2-1) 여기서, Cia는 Ci가 가장 가까운 Aci/2n으로 정렬된 값이며, n은 자연수이다. 상기와 같이, 본 발명의 실시예는 배수 폴딩을 통해 Ci를 명령 정렬 값 Aci로 정렬한다. Aci가 Ci의 2n배일 경 우, 양자를 직접 나누면 제2 차원 폴딩에 필요한 총 배율을 얻을 수 있다. 예를 들면, 전술한 예에 있어서, Ci ＝4이기에, Ntotal2＝64/4＝16배이다. Aci가 Ci의 2n배가 아닐 경우, 우선 Ci를 가장 가까운 Aci/2n의 값으로 정렬 할 필요가 있다. 예를 들면, Aci가 64이면, Aci/2n은 32, 16, 8, 4 및 2를 포함하며, Ci를 이러한 수 중에서 가 장 가까운 그 값으로 정렬할 필요가 있다. 예를 들면, Ci＝3이면, 4로 정렬하고; Ci＝5이면, 8로 정렬한다. 정렬한 후, 다시 Aci를 제거하면, 제2 총 폴딩 배율 Ntotal2를 얻을 수 있다. 이어서, 제2 총 폴딩 배율 Ntotal2를 확정한 후, 앞의 고려에 따라, 이를 컨볼루션 코어의 폭 방향 상의 제2 폭 차원의 폴딩 배율 Nw2 및 컨볼루션 코어의 높이 방향 상의 제2 높이 차원의 폴딩 배율 Nh2로 분할할 수 있다. 다양한 규칙에 따라 배율 분할을 수행하여 다양한 이점을 구현할 수 있다. 일 실시예에 있어서, 폴딩 배율을 컨볼루션 코어의 폭 방향과 컨볼루션 코어의 높이 방향에 평균으로 분할할 수 있다 예를 들면, 앞에서 참조한 도 11 및 도 12의 예에 있어서, 제2 총 폴딩 배율16을 폭 4배 및 높이 4배로 평 균으로 분할한다. 다른 일 실시예에 있어서, 폴딩 배율을 컨볼루션 코어의 폭 W 방향으로 우선적으로 분할할 수 있다. 앞에 언급 된 데이터 배치 순서 NHWC에 있어서, W와 Ci차원는 연속적인 것이므로, W차원 상의 폴딩의 구현은 상대적으로 간단한 바, 필터의 차원의 표현을 조정하기만 하면 되며, 이는 차원 재결합이라고도 불리우며, 임의의 기타 처 리를 필요로 하지 않는다. 따라서, 폴딩 배율을 컨볼루션 코어의 폭 W 방향으로 우선적으로 분할함으로써, 처리 를 간소화할 수 있다. 제2 총 폴딩 배율의 분할은 또한 아래와 같은 두 요인의 영향을 받는다. 한편으로는, 폴딩 대기의 필터의 컨볼루션 코어의 사이즈에 따라, 컨볼루션 코어의 각 차원(Kw 및 Kh)의 값이 기대 배율의 폴딩을 구현하기에 충분하지 않은 경우, 기타 조치가 필요하다. 예를 들면, 상기 예에 있어서, 폭 W 방향을 우선으로 하는 원칙에 따르면, 제2 총 폴딩 배율 16은 폭 16배와 높 이 1배로 분할될 수 있다. 그러나, 폴딩 대기의 필터의 컨볼루션 코어의 폭 Kw가 4에 불과하며, 최대 4 폴딩을 지원하기에, 폴딩 배율의 할당을 조정할 필요가 있다. 예를 들면, 폭 W차원에 대한 분할 배율을 줄일 수 있는 바, 예를 들면 폭 4배 및 높이 4배로 분할한다. 또한 예를 들면, 컨볼루션 코어의 폭 차원 및/또는 컨볼루션 코어의 높이 차원에 대해 2n 폴딩을 수행할 없을 경 우, 예를 들면 Kw또는 Kh가 홀수이기에 2에 의해 나누어 떨어지지 않을 경우, 2 폴딩을 수행할 수 없으며; 4에 의해 나누어 떨어지지 않을 경우, 4 폴딩을 수행할 수 없다. 이때, 컨볼루션 코어에 대해 폴딩을 수행하기 위하 여, 폴딩 배율에 따라 보완을 수행할 필요가 있다. 도 13은 본 발명 실시예에 따라 컨볼루션 코어에 대해 폴딩 배율 보완을 수행하는 것을 모식적으로 나타낸 모식 도이다. 도면의 예는 폴딩 대기의 필터의 컨볼루션 코어의 사이즈가 3×3인 것으로 가정하지만, 폭 W차원 및 높 이 H차원에 대해 모두 4 폴딩을 수행할 필요가 있으며, 이때 W 및 H 방향을 모두 4의 배율로 보완할 필요가 있 다. 도 13은 H 및 W 방향의 보완을 분할하여 모식적으로 나타낸다. 폴딩 대기의 단 층 컨볼루션 코어의 W 방 향은 3이며, 4 폴딩을 수행하기 위하여, 4로 보완할 필요가 있다. 1311에 나타낸 바와 같이, 여기서 흰색 사각 형은 보완 블록을 나타낸다. 마찬가지로, H 방향에 있어서, 폴딩 대기의 단 층 컨볼루션 코어의 H 방향은 3이며, 4 폴딩을 수행하기 위하여 4로 보완할 필요가 있다. 1312에 나타낸 바와 같이, 여기서, 흰색 사각형은 보완 블록을 나타낸다. 동시에 H 및 W 방향에 대해 보완을 수행할 경우, 폴딩 대기의 컨볼루션 코어부터 최종 보완을 수행한 후, 컨볼루션 코어을 얻을 수 있으며, 컨볼루션 코어의 사이즈가 4×4로 변하여 폭 및 높이에 대해 모두 4 폴딩을 수행할 수 있다. 도 13으로부터 알 수 있듯이, 컨볼루션 코어의 보완 작업은 무효 값을 인입하게 되기에, 무효한 중복 계산을 초 래한다. 따라서, 일부 실시예에 있어서, 폴딩을 구현하기 위하여, 제2 총 폴딩 배율을 폴딩 배율의 정렬로 인한 보완량 이 가능한 작도록 분할할 수 있다. 예를 들면, 폴딩 대기의 컨볼루션 코어의 사이즈가 1×6이고, 제2 총 폴딩 배율이 16인 것으로 가정하면, H 방향 4배 및 W 방향 4배로 분할할 경우, 폴딩 대기의 컨볼루션 코어를 4 ×8로 보완할 필요가 있으며, 각 레이어는 26개의 0 채움 값이 증가하게 되며; H 방향 2배 및 W 방향 8배로 분할할 경 우, 폴딩 대기의 컨볼루션 코어를 2×8로만 보완할 필요가 있으며, 각 레이어는 10개의 0 채움 값이 증가하게 되며; H 방향 1배 및 W 방향 16배로 분할할 경우, 폴딩 대기의 컨볼루션 코어를 1×16로 보완할 필요가 있으며, 각 레이어는 10개의 0 채움 값이 증가하게 된다. 동일한 보완량의 경우, 바람직하게 폴딩 배율을 W 방향 상에 할당할 수 있는 바, 예를 들면 H 방향 1배 및 W 방향 16배의 분할을 선택할 수 있다. 한편, 본 발명 실시예의 제2 차원 폴딩 방안의 실제 유효 배율은 컨볼루션 스텝과도 관련이 있다. 컨볼루션 스 텝이 대응하는 폴딩 배율에 의해 나누어 떨어지지 않을 경우, 컨볼루션 코어의 폴딩 방식은 변하지 않지만, 입 력 특징 맵의 폴딩에 중첩이 존재하게 되므로, 컨볼루션 연산에 어느 정도의 중복 계산이 존재하게 된다. 도 14는 본 발명 실시예에 따른 컨볼루션 스텝의 유효 배율에 대한 영향을 모식적으로 나타낸 모식도이다. 도면 에서는 H 방향을 예로 들어 입력 특징 맵에 중첩 영역에 포함되는 폴딩 방식을 나타낸다. 도면에 나타낸 바와 같이, H 방향의 컨볼루션 스텝 Sy＝4일 경우, α, β를 연속적인 두 개의 데이터로 H 방향 4 폴딩을 수행하면, 중첩 영역이 존재하지 않는다. 그러나, H 방향의 컨볼루션 스텝 Sy＝2일 경우, γ, δ를 연속적인 두 개의 데이 터로 H 방향 4 폴딩을 수행하면, 중첩 영역이 존재한다. 당해 중첩 영역의 크기는 당해 방향의 폴딩 배율에서 당해 방향의 컨볼루션 스텝을 감한 값이다. 이때, H 및 W 방향의 폴딩 배율을 유연하게 설정할 수 있다. 예를 들면, 폴딩 배율을 우선적으로 더 높은 차원 상에 할당하여, 저차원 상의 중복 계산을 최대한 피할 수 있다. 예를 들면, NHWC 데이터 배치 순서의 경우, H차 원이 W차원보다 높으며, Sx＝2, Sy＝2, Ntotal2＝16일 경우, W차원 2 폴딩, H차원 8 폴딩으로 할당할 수 있는 바, 이 경우 중첩 영역으로 인한 중복 계산이 모두 H차원 상에 분포된다. 이때, 이러한 중복 계산을 수행할 경우, H 차원이 더 높기 때문에, 매회의 연산에서 판독해야 할 데이터도 더 많아지게 되므로, 데이터 액세스 IO 효율을 향상시키는데 유리하다. 상기와 같이, 본 발명의 실시예에 있어서, 앞에서 설명한 다양한 규칙에 따라 H차원 및 W차원의 폴딩 배율을 유 연하게 설정함으로써, 중복 계산을 가능한 한 피하고, 계산 효율의 향상을 최대화할 수 있다. 일부 실시예에 있어서, 아래와 같이 제2 총 폴딩 배율을 분할할 수 있다. W 방향의 폴딩 배율을 우선적으로 확 정하는 바, 예를 들면, 평균 방식에 따라 제2 총 폴딩 배율 Ntotal2를 분할함으로써, W 방향의 폴딩 배율 Nw2를 확정할 수 있다. = （2-2） 예를 들면, 폴딩 대기의 필터가 (64, 6, 6, 4)고, 컨볼루션 스텝 (Sx′, Sy′)＝(2, 2)이며, 명령 정렬 값 Aci ＝64인 예를 들어 설명한다. 이때, ， 이다. 이어서, 그에 따라 W 방향 상의 사이즈 및 컨볼루션 스텝을 확정할 수 있다. 수요에 따라, 우선 폴딩 대기의 필터의 컨볼루션 코어의 폭 kw′를 W 방향의 폴딩 배율 Nw2의 배율로 정렬하여 kwa로 기록할 수 있다. 그 다음, 제2 차원 폴딩 후의 컨볼루션 코어 W차원의 크기 kw″를 계산한다. （2-3） 상기 예를 계속하면, kw′가 6이고, Nw2가 4이므로, 보완 작업을 수행할 필요가 있으며, 이때 kwa＝8이면, k″w ＝kwa/Nw2＝2이다. 이어서, 아래와 같이 제2 폴딩 필터의 W 방향의 컨볼루션 스텝 Sx″를 확정한다. = （2-4） 상기 예를 계속하면, 이때 Sx′/Nw2＝2/4<1이므로, Sx″＝1이다. 이는 W차원 상에서 4 폴딩을 수행하면 중첩 영 역이 존재하며, 중복 계산이 인입됨을 의미한다. W차원 상의 실제의 유효 폴딩 배율은 4 폴딩에 대응하는 4배가 아니라, Sx′/Sx″＝2/1＝2이다. 이때, 폴딩 배율의 조정을 수행할 수 있다. 예를 들면, W 방향에 중첩 영역이 없는 경우에 최대 유효 폴딩 배율 2를 구현하도록 유지하고, 나머지 필요한 폴딩 배율을 모두 H 방향 상에 할당할 수 있다. 이를 통해, 아래와 같 이 W 방향의 유효 폴딩 배율에 기반하여 H 방향의 폴딩 배율을 계산할 수 있다. （2-5） 위의 예에 있어서, Nh2＝16/2＝8이므로, H 방향의 폴딩 배율은 8배이다. 이때, 그에 따라 W 방향의 폴딩 배율을 업데이트할 수 있다. （2-6） 상기 예에 있어서, Nw2＝16/8＝2인 바, 즉 최대 유효 폴딩 배율과 같다. 이러한 폴딩 배율 할당 방식은, W 방향 상에 중첩 영역이 존재하지 않지만, H 방향 상에 상대적으로 많은 중첩이 존재하게 된다. W 방향 및 H 방향의 제2 폴딩 배율 Nw2, Nh2를 확정한 후, 그에 따라 각 차원 상의 차원의 크기, 컨볼루션 스텝 등을 포함한 나머지 매개 변수를 계산할 수 있다. 앞에서 설명한 W차원의 차원의 크기 및 컨볼루션 스텝을 계산하는 방식과 유사한 바, 수요에 따라, 우선 폴딩 대기의 필터의 컨볼루션 코어의 폭 kw′를 W 방향의 폴딩 배율 Nw2의 배율로 정렬하여 kwa로 기록하고; 폴딩 대 기의 필터의 컨볼루션 코어의 높이 kh′를 H 방향의 폴딩 배율 Nh2의 배율로 정렬하여 kha로 기록 할 수 있다. 그 다음, 아래와 같이 제2 차원 폴딩 후의 컨볼루션 코어 W차원의 크기 kw″ 및 H차원의 크기 kh″를 계산할 수 있다. = （2-7） = （2-8） 상기 예를 계속하면, kw′가 6이고, Nw2가 2인 바, 나누어 떨어질 수 있으므로, 보완 작업을 수행할 필요가 없 으며, 이때 kwa＝6이면, kw″＝6/2＝3이다. H 방향의 경우, kh′가 6이고, Nh2가 8인 바, 나누어 떨어지지 않으 므로, 보완 작업을 수행할 필요가 없으며, kha＝8이면, kh″＝8/8＝1이다. 이어서, 아래와 같이 제2 폴딩 필터의 W 방향의 컨볼루션 스텝 Sx″ 및 H 방향의 컨볼루션 스텝 Sy″를 확정할 수 있다. = （2-9） = （2-10） 상기 예의 경우, S″x＝Sx′/Nw2＝2/2＝1이며; Sy′/Nh2＝2/8<1이므로, S″ y＝1이다. 상기와 같이 어떻게 명령 정렬 요구 사항에 따라 제2 폴딩 필터의 각 매개 변수를 설계하는지를 설명했다. 위에서는 본 발명 실시예에 따른 제2 차원 폴딩을 통해 필터를 조정하는 방안을 설명했다. 일부 실시예에 있어 서, 당해 제2 폴딩 필터는 오프라인으로 생성한 것일 수 있다. 예를 들면, 신경망 모델을 이용하여 추론을 수행 하는 과정에서, 사전에 배치한, 오프라인으로 생성한 제2 폴딩 필터를 이용하여 온라인과 마찬가지로 제2 차원 폴딩의 입력 특징 맵에 대해 컨볼루션 연산을 수행하여, 추론 과정을 수행할 수 있다. 다른 일부 실시예에 있어 서, 당해 제2 폴딩 필터는 온라인으로 생성한 것일 수 있다. 예를 들면, 신경망 모델에 대해 훈련을 수행하는 과정에서, 온라인으로 컨볼루션 레이어의 필터에 대해 제2 차원 폴딩을 수행하는 동시에, 온라인으로 훈련 데이 터에 대해 동일한 제2 차원 폴딩을 수행한 후, 양자가 컨볼루션 연산을 수행하여, 훈련 과정을 수행할 수 있다. 어느 과정에서 본 발명 실시예의 제2 폴딩 필터를 이용하여 제2 차원 폴딩을 통해 Ci차원 정렬을 구현하든, 모 두 컨볼루션 연산의 계산량을 크게 최적화할 수 있다. 이하, 컨볼루션 계산량 측면에 대해, 본 발명 실시예의방안과 기존 컨볼루션 연산의 성능을 비교한다. P가 컨볼루션 계산량을 나타내고, Aci가 Ci의 정렬 후의 값을 나타내며, ACO가 Co의정렬 후의 값일 경우, P ="}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "（2-11） NHWC차원 배치 순서의 하드웨어는 Ci차원이 최저 차원에 있고, 또한 백터 명령 정렬의 요구 사항이 있으므로, Aci로 정렬할 필요가 있는 경우가 많으며, 따라서 Aci는 벡터 명령 정렬의 요구 사항을 대상으로 하며; 인공 지 능 계산 가속화 하드웨어는 일반적으로 복수의 병렬 고성능 컨볼루션 계산 유닛이 있으며, 따라서 ACO는 컨볼루 션 코어 Co차원 정렬의 요구 사항을 대상으로 하며, 그 값은 고성능 병렬 계산 유닛의 수량이다. 최적화하기 전, 기존 컨볼루션 연산의 계산량은 아래와 같다. ="}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "（2-12） 본 발명 실시예의 제2 차원 폴딩 방안을 사용하여 최적화한 후, 컨볼루션 연산의 계산량은 아래와 같다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "제2 차원 폴딩 후의 성능의 최적화율은 아래와 같다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "앞에서 도 11 및 도 12를 참조하여 설명한 예를 들면, 최적화하기 전, =1*64*64*ho*wo*4*4 (Sx, Sy = 4, 4) 최적화한 후, =1*64*64*ho*wo*1*1 (Sx', Sy' = 1, 1) =1*64*64*ho*wo*4*4*(1/16) 감소된 컨볼루션 계산 유닛의 컨볼루션 계산량은 93.75％이다. 이해할 수 있듯이, 도 11 및 도 12의 예는 이상적인 경우의 제2 차원 폴딩 처리인 바, 즉 컨볼루션 스텝이 폴딩 의 요구 사항을 완전히 충족시키며, 컨볼루션 코어의 사이즈 및 입력 특징 맵의 사이즈에 대해 폴딩 배율 정렬 을 수행할 필요가 없는 경우다. 실제 경우에 있어서, 구체적인 매개 변수의 값에 따라, 실제 최적화율이 상기 피크 최적화율 93.75％보다 낮게 된다. 위의 계산량의 비교로부터 알 수 있듯이, 본 발명 실시예에 의해 제공되는 제2 폴딩 필터 방안은 컨볼루션 유닛 의 계산량을 효과적으로 절약하여, 컨볼루션 연산의 계산 성능을 향상시킬 수 있다. 위에서 본 발명 실시예에 따른 제1 차원 폴딩 및 제2 차원 폴딩을 각각 설명했다. 앞의 설명으로부터 알 수 있 듯이, 제1 차원 폴딩을 단독적으로 실시할 시, 얻은 제1 폴딩 필터의 컨볼루션 코어는 팽창하게 되며, 특히 폴 딩 전의 컨볼루션 스텝이 상대적으로 클 경우, 팽창이 매우 크며, 또한 컨볼루션 스텝도 팽창하게 되므로, 어느 정도의 중복 계산을 초래하며, 또한 필터를 로드하는 액세스 시간도 증가하게 된다. 이와 반대로, 제2 차원 폴 딩을 단독적으로 실시할 시, 얻은 제2 폴딩 필터의 컨볼루션 코어는 축소하게 되며, 또한 컨볼루션 스텝도 축소 하게 된다. 따라서, 제1 차원 폴딩과 제2 차원 폴딩을 조합하여 실시하면, 제1 차원 폴딩으로 인한 컨볼루션 코 어의 팽창이 감소하므로, 필터를 로드하는 액세스 량을 감소시킬 수 있다. 한편, 제2 차원 폴딩을 단독적으로 실시할 시, 그 유효한 폴딩 배율이 컨볼루션 스텝에 의해 결정된다. 컨볼루 션 스텝이 너무 작으면, 폴딩 후의 입력 특징 맵과 컨볼루션 연산을 수행하면 중복 계산이 존재하며, 폴딩으로 얻는 수익이 감소된다. 앞의 분석에 따르면, 제1 차원 폴딩은 컨볼루션 코어 및 컨볼루션 스텝을 확장시키고,제1 차원 폴딩 후의 컨볼루션 스텝은 필연적으로 짝수이다. 따라서, 제1 차원 폴딩과 제2 차원 폴딩을 조합하여 실시하면, 제2 차원 폴딩의 유효 배율을 증가시키고, 또한 컨볼루션 스텝이 홀수일 때 컨볼루션 코어의 폴딩 방 식을 개변해야하는 경우가 출현하지 않으므로, 제2 차원 폴딩의 최적화 효과를 최대화할 수 있다. 상기 분석에 따르면, 제1 차원 폴딩과 제2 차원 폴딩을 조합하여 실시하며, 각자의 단점을 서로 보완하여, 최대 화된 최적화 효과를 달성할 수 있다. 일 실시예에 있어서, 바람직하게 먼저 제1 차원 폴딩을 수행하여 확장된 컨볼루션 코어 및 컨볼루션 스텝을 얻 고; 그 다음 제1 차원 폴딩의 기초 상에서, 다시 제2 차원 폴딩을 수행하며, 이때 컨볼루션 코어 및 컨볼루션 스텝이 감소하게 된다. 이를 통해, 입력 채널 차원의 명령 정렬 요구 사항 및 출력 채널 차원의 하드웨어 정렬 요구 사항을 충족시킬 수 있는 전제 하에서, 필터를 로드하는 IO 량을 증가시키지 않으며, 또한 폴딩 과정에서 발생하는 중복 계산을 상쇄하여, 계산 성능의 향상을 최대화할 수 있다. 예를 들면, 원시 필터가 (4, 3, 3, 4)이고, 컨볼루션 스텝이 (1, 1)인 것으로 가정한다. 앞의 설명을 참조하면, 제1 차원 폴딩(여기서 Nw1＝Nh1＝4임)을 수행한 후, 얻은 제1 폴딩 필터는 (64, 6, 6, 4)이고, 컨볼루션 스텝은 (4, 4)이다. 이어서, 제1 폴딩 필터에 제2 차원 폴딩(여기서 Nw2＝Nh2＝4임)을 적용하여 얻은 제2 폴딩 필터는 (64, 2, 2, 64)이며, 컨볼루션 스텝은 (1, 1)이다. 원시 필터에 비해, 제2 폴딩 필터의 입력 채널 차원 및 출력 채널 차원이 모두 각자의 정렬 값(여기서 64임)으로 정렬되었으며, 또한 컨볼루션 코어의 사이즈가 팽창되지 않 았는 바, 도리어 2×2로 감소되었으며, 컨볼루션 스텝도 팽창되지 않았는 바, 당해 예에서는 (1, 1)이다. 다른 일 실시예에 있어서, 먼저 제2 차원 폴딩을 수행한 후, 다시 제1 차원 폴딩을 수행할 수도 있다. 그러나 이러한 실시 방식은 제1 차원 폴딩을 통한 컨볼루션 코어 팽창 및 컨볼루션 스텝 확장을 충분히 이용할 수 없기 에, 성능 최적화에 유리하지 않다. 먼저 제1 차원 폴딩을 수행한 후, 다시 제2 차원 폴딩을 수행할 시, 컨볼루션 계산량 측면에서 얻은 성능 최적 화율을 아래와 같이 계산할 수 있다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "위에서 제공한 원시 필터가 (4, 3, 3, 4)이고, 컨볼루션 스텝이 (1, 1)인 경우, 제1 차원 폴딩 및 제2 차원 폴 딩을 수행하는 예를 들면, 성능 최적화율은 아래와 같다."}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 11, "content": "본 발명 실시예는 신경망 모델을 수행하기 위한 데이터 처리 장치 및 당해 데이터 처리 장치에 의해 실시되는 신경망 모델을 수행하기 위한 방법을 더 제공한다. 도 15는 본 발명 실시예을 실시할 수 있는 데이터 처리 장치를 예시적으로 나타낸 모식적인 구조도이다. 도 15 에 나타낸 바와 같이, 데이터 처리 장치는 처리 회로 및 저장 회로을 구비한다. 처리 회로은 처리 데이터 처리 장치 상의 다양한 기능을 처리하는 바, 이러한 기능은 제어, 디코딩, 연산 등을 포함하나 이에 한정되지 않는다. 처리 회로은 예를 들면 도 3중의 제어 모듈 및/ 또는 연산 모듈을 포함할 수 있다. 일부 실시예에 있어서, 처리 회로는 입력 특징 맵에 대해 제2 차원 폴딩을 수행하여 폴딩 특징 맵을 얻고; 이어서 본 발명 실시예의 폴딩 필터를 이용하여 폴딩 특징 맵에 대해 컨볼루션 연산을 수행하여 중간 결 과를 얻으며; 중간 결과에 대해 차원 역 폴딩을 수행하여 출력 특징 맵을 얻도록 구성될 수 있다. 저장 회로은 관련 데이터를 저장 또는 운반하는데 사용될 수 있으며, 당해저장 회로은 예를 들면 도 3또는 도 5에 나타낸 다양한 RAM일 수 있으며, 또는 온 칩 캐싱이라 불리울 수 있다. 일부 실시예에 있어서, 저장 회로은 신경망 모델의 컨볼루션 레이어의 폴딩 필터를 저장하도록 구성될 수 있다. 당해 폴딩 필터 는 원시 필터에 대해 제1 차원 폴딩 및 제2 차원 폴딩을 수행하여 생성된 것이다. 제1 차원 폴딩은 복수 회의 컨볼루션 스텝 이동을 합성하여 얻은 복수의 확장 필터를 포함한다. 제2 차원 폴딩은 폭 차원 및/또는 높이 차 원의 데이터를 입력 채널 차원에 다시 배출하는 것을 포함한다. 예를 들면 폭 차원 상의 데이터 재배열 또는 차원 폴딩의 경우, 처리 회로은 차원 재결합을 통해 구현할 수 있다. 높이 차원 상의 데이터 재배열 또는 차원 폴딩의 경우, 처리 회로은 차원 전치를 통해 구현할 수 있다. 일부 실시예에 있어서, 데이터 처리 장치은 신경망 모델의 훈련 과정을 수행하도록 구성될 수 있다. 이때, 처리 회로은 훈련 시, 온라인으로 신경망 모델의 컨볼루션 레이어의 필터에 대해 본 발명 실시예의 제1 차원 폴딩 처리 및 제2 차원 폴딩 처리를 수행하고, 훈련 데이터에 대해 본 발명 실시예의 제2 차원 폴딩 처리를 수행하도록 구성될 수 있다. 이어서 얻은 폴딩 필터를 이용하여 폴딩 후의 훈련 데이터에 대해 컨볼루션 연산을 수행하여, 훈련 과정을 수행할 수 있다. 처리 회로이 수행하는 구체적인의 폴딩 처리 과정은 앞의 설명을 참조할 수 있는 바, 여기서 더 이상 설명하지 않는다. 다른 일부 실시예에 있어서, 데이터 처리 장치은 신경망 모델의 추론 과정을 수행하도록 구성될 수 있다. 이때, 처리 회로은 먼저 입력 뉴런에 대해 제2 차원 폴딩 처리를 수행하고, 이어서 직접 저장 회로(152 0)에 이미 저장된 폴딩 필터를 이용하여 폴딩 후의 입력 뉴런에 대해 컨볼루션 연산을 수행하여, 추론 과정을 수행하도록 구성될 수 있다. 입력 뉴런의 제2 차원 폴딩 방식은 저장되 폴딩 필터이 겪은 제2 차원 폴딩 방식과 같다. 폴딩 필터를 이용하여 컨볼루션 연산을 수행하여 얻은 중간 결과에 대해 어느 정도의 차원 재배열 처리를 수행 하여, 최종 출력 특징 맵을 얻을 필요가 있다. 구체적인의 재배열 처리 작업은 앞의 설명을 참조할 수 있는 바, 여기서 더 이상 설명하지 않는다. 도 16은 본 발명 실시예에 따른 데이터 처리 방법을 나타낸 예시적인 플로우차트이다. 도면에 나타낸 바와 같이, 데이터 처리 방법 1600은 단계 1610을 포함하는 바, 처리 회로가 입력 특징 맵에 대 해 제2 차원 폴딩을 수행하여 폴딩 특징 맵을 얻는다. 이어서, 단계 1620에 있어서, 처리 회로가 저장 회로에 저장된 폴딩 필터를 이용하여 폴딩 특징 맵에 대해 컨볼 루션 연산을 수행하여 중간 결과를 얻는다. 여기서, 폴딩 필터는 원시 필터에 대해 제1 차원 폴딩 및 제2 차원 폴딩을 수행하여 생성된 것이다. 제1 차원 폴딩은 복수 회의 컨볼루션 스텝 이동을 합성하여 얻은 복수의 확장 필터를 포함한다. 제2 차원 폴딩은 폭 차원 및/또는 높이 차원의 데이터를 입력 채널 차원에 다시 배출하는 것 을 포함한다. 마지막으로, 단계 1630에 있어서, 처리 회로가 중간 결과에 대해 차원 역 폴딩을 수행하여 출력 특징 맵을 얻는 다. 당업자가 이해할 수 있듯이, 앞에서 도면을 참조하여 설명한 본 발명 실시예의 필터 폴딩 방법, 중간 결과의 차 원 재배열 등 처리는, 마찬가지로 도 15의 데이터 처리 장치 및 도 16의 데이터 처리 방법에 적용될 수 있으므 로, 더 이상 반복적으로 설명하지 않는다. 본 발명은 칩을 더 제공하는 바, 당해 칩은 앞에서 도면을 참조하여 설명한 임의의 실시예의 데이터 처리 장치 를 포함할 수 있다. 또한, 본 발명은 보드 카드를 더 제공하는 바, 당해 보드 카드는 전술한 칩을 포함할 수 있 다. 다양한 적용 시나리오에 따라, 본 발명의 전자 기기 또는 장치는 서버, 클라우드 서버, 서버 클러스터, 데이터 처리 장치, 로봇, 컴퓨터, 프린터, 스캐너, 태블릿, 스마트 단말기, PC 기기, 사물 인터넷 단말기, 모바일 단말 기, 휴대폰, 블랙박스, 내비게이션, 센서, 카메라, 카메라, 비디오 카메라, 프로젝터, 시계, 헤드폰, 모바일 스 토리지, 웨어러블 기기, 시각 단말기, 자율주행 단말기, 교통 수단, 가전제품 및/또는 의료 기기를 포함할 수 있다. 상기 교통 수단은 항공기, 선박 및/또는 차량을 포함하고; 상기 가전제품은 텔레비전, 에어컨, 전자레인 지, 냉장고, 전기밥솥, 가습기, 세탁기, 전등, 가스레인지, 레인지 후드를 포함하며; 상기 의료 기기는 핵자기 공명계, B-초음파계 및/또는 심전도계. 본 발명의 전자 기기 또는 장치는 또한 인터넷, 사물인터넷, 데이터센터, 에너지, 교통, 공공관리, 제조, 교육, 전력망, 통신, 금융, 소매, 건설현장, 의료 등의 분야에도 적용될 수 있다. 또한 본 발명의 전자 기기 또는 장치는 또한 클라우드, 에지, 단말 등과 같은 인공지능, 빅 데 이터 및/또는 클라우드 컴퓨팅과 관련된 응용 시나리오에도 적용될 수 있다. 하나 또는 복수의 실시예에 있어서, 본 발명 방안의 연산력이 높은 전자 기기 또는 장치는 클라우드 기기(예를 들면 클라우드 서버)에 적용 될 수 있으며, 소비전력이 적은 전자 기기 또는 장치는 단말 기기 및/또는 에지엔드 기기(예를 들면 스마트폰 또는 카메라)에 적용될 수 있다. 하나 또는 복수의 실시예에 있어서, 클라우드 기기의 하드웨어 정보와 단말 기 기 및/또는 에지엔드 기기의 하드웨어 정보는 상호 호환되므로, 단말 기기 및/또는 에지엔드 기기의 하드웨어 정보에 따라, 클라우드 기기의 하드웨어 리소스 중에서 적절한 하드웨어 리소스를 매칭하여 단말 기기 및/또는에지엔드 기기의 하드웨어 리소스를 시뮬레이션함으로서, 엔드 클라우드 통합 또는 클라우드 에지 통합의 통합 관리, 스케줄링 및 협업 작업을 완료할 수 있다. 설명해야 할 점이라면, 간소화의 목적을 위해, 본 발명은 일부 방법 및 그 실시예를 일련의 동작 및 그 조합으 로 표현하였지만, 당업자는 본 발명의 방안은 설명된 동작의 순서에 한정되지 않음을 이해해야 한다. 따라서, 본 발명의 개시 또는 교시에 따라, 당업자는 그 중의 일부 단계는 기타 순서에 따라 수행하거나 또는 동시에 수 행할 수 있음을 이해할 수 있다. 또한 당업자는 본 발명에 설명된 실시예는 선택적인 실시예로 간주할 수 있는 바, 즉 그 중의 관련된 동작 또는 모듈은 본 발명의 어느 방안 또는 일부 방안의 구현에 있어서 반드시 필요하 지 않음을 이해할 수 있다. 또한, 방안에 따라, 본 발명은 일부 실시예의 설명에도 각각 다른 중점을 둔다. 이 에 감안하여, 당업자는 본 발명의 어느 실시예에서 상세히 설명하지 않은 부분은 기타 실시예의 관련 설명을 참 조할 수 있음을 이해해야 한다. 구체적인 구현 측면에 있어서, 본 발명의 개시 및 교시에 따라, 당업자는 본 발명에 개시된 몇몇의 실시예는 본 명세서에 개시되지 않은 기타 방식을 통해 구현될 수 있음을 이해할 수 있다. 예를 들면, 앞에 기재된 전자 기 기 또는 장치 실시예 중의 각 유닛의 경우, 본 명세서에서는 논리적 기능을 고려한 기초 상에서 분할한 것인 바, 실제 구현 시 기타 분할 방식을 채택할 수 있다. 또한 예를 들면, 복수의 유닛 또는 구성 요소를 결합하거 나, 집적 다른 하나의 시스템에 통합하거나, 유닛 또는 구성 요소 중의 일부 특징 또는 기능을 선택하여 비활성 화할 수 있다. 서로 다른 유닛 또는 구성 요소 사이의 연결 관계의 경우, 앞에서 도면을 참조하여 논의한 연결 은 유닛 또는 구성 요소 사이의 직접적 또는 간접적 결합일 수 있다. 일부 시나리오에 있어서, 전술한 직접적 또는 간접적 결합은 인터페이스를 이용한 통신 연결일 수 있으며, 여기서, 통신 인터페이스는 전기, 광학, 음성, 자기 또는 기타 형태의 신호 전송을 지원할 다 있다. 본 발명에 있어서, 분리된 구성 요소로 설명된 유닛은 물리적으로 분리될 수도 있고, 물리적으로 분리되지 않을 수도 있으며, 유닛으로 나타낸 구성 요소도 물리적으로 분리될 수도 있고, 물리적으로 분리되지 않을 수도 있다. 전술한 구성 요소 또는 유닛은 동일한 위치에 위치하거나 복수의 네트워크 유닛 상에 분포될 수 있다. 또 한, 실제 수요에 따라, 그 중의 일부 또는 전부 유닛을 선택하여 본 발명 실시예의 상기 방안의 목적을 구현할 수 있다. 또한, 일부 시나리오에 있어서, 본 발명 실시예 중의 복수의 유닛은 하나의 유닛에 집적될 수도 있고, 각 유닛은 물리적으로 단독적으로 존재할 수도 있다. 일부 구현 시나리오에 있어서, 상기 집적된 유닛은 소프트웨어 프로그램 모듈의 형태를 채택하여 구현될 수 있 다. 소프트웨어 프로그램 모듈의 형태로 구현되고 또한 독립적인 제품으로 판매 또는 사용될 시, 상기 집적된 유닛은 컴퓨터 판독 가능 메모리에 저장될 수 있다. 이를 바탕으로, 본 발명의 방안을 소프트웨어 제품(예를 들 면 컴퓨터 판독 가능 저장 매체)의 형태로 구현할 때, 당해 소프트웨어 제품은 메모리에 저장될 수 있으며, 일 부 명령을 포함함으로써 컴퓨터 기기(예를 들면 개인용컴퓨터, 서버 또는 네트워크 기기 등)로 하여금 본 발명 실시예의 상기 방법의 일부 또는 전부 단계를 수행할 수 있다. 전술한 메모리는 U 디스크, 플래시 디스크, 판독 전용 메모리(Read Only Memory, ROM), 랜덤 액세스 메모리(Random Access Memory, RAM), 외장 하드 디스크, 자 기 디스크 또는 광 디스크 등과 같은 프로그램 코드를 저장할 수 있는 다양한 매체를 포함할 수 있으나 이에 한 정되지 않는다. 다른 일부 구현 시나리오에 있어서, 상기 집적된 유닛은 하드웨어의 형태를 채택하여 구현될 수 있는 바, 즉 구 체적인 하드웨어 회로로 구현될 수 있으며, 이는 디지털 회로 및/또는 아날로그 회로 등을 포함할 수 있다. 회 로의 하드웨어 구조의 물리적 구현은 물리적 디바이스를 포함할 수 있으나 이에 한정되지 않으며, 물리적 디바 이스는 트랜지스터 또는 메모리 저항기 등 디바이스를 포함할 수 있으나 이에 한정되지 않는다. 이에 감안하여, 본 명세서에 기재된 다양한 장치(예를 들면 계산 장치 또는 기타 처리 장치)는 예를 들면 CPU, GPU, FPGA, DSP 및 ASIC 등과 같은 적절한 하드웨어 프로세서를 통해 구현될 수 있다. 또한 전술한 상기 저장 유닛 또는 저장 장치는 임의의 적적한 저장 매체(자기 저장 매체 또는 자기 광 저장 매체 등을 포함함)일 수 있으며, 예를 들면 가변 저항식 메모리(Resistive Random Access Memory, RRAM), 다이내믹 랜덤 액세스 메모리(Dynamic Random Access Memory, DRAM), 스태틱 랜덤 액세스 메모리(Static Random Access Memory, SRAM), 강화 다이내믹 랜덤 액세스 메모리(Enhanced Dynamic Random Access Memory, EDRAM), 고대역폭 메모리(High Bandwidth Memory, HBM), 하이브리드 메모리 큐브(Hybrid Memory Cube, HMC), ROM 및 RAM등일 수 있다. 이하의 조항에 의거하여 전술한 내용을 더 잘 이해할 수 있을 것이다. 2020116249556 조항 A1, 신경망 모델을 수행하기 위한 데이터 처리 장치에 있어서, 상기 신경망 모델의 컨볼루션 레이어의 폴딩 필터를 저장하도록 구성되되, 상기 폴딩 필터는 원시 필터에 대해 제1 차원 폴딩 및 제2 차원 폴딩을 수행하여 생성된 것이고, 상기 제1 차원 폴딩은 복수 회의 컨볼루션 스텝 이 동을 합성하여 얻은 복수의 확장 필터를 포함하며, 상기 제2 차원 폴딩은 폭 차원 및/또는 높이 차원의 데이터 를 입력 채널 차원에 다시 배출하는 것을 포함하는 저장 회로; 및 입력 특징 맵에 대해 상기 제2 차원 폴딩을 수행하여 폴딩 특징 맵을 얻고; 상기 폴딩 필터를 이용하여 상기 폴 딩 특징 맵에 대해 컨볼루션 연산을 수행하여 중간 결과를 얻으며; 상기 중간 결과에 대해 차원 역 폴딩을 수행 하여 출력 특징 맵을 얻도록 구성되는 처리 회로를 포함한다. 조항 A2, 조항 A1에 기재된 데이터 처리 장치에 있어서, 상기 폴딩 필터는 우선 상기 원시 필터에 대해 제1 차원 폴딩을 수행하여 제1 폴딩 필터를 얻고, 다시 상기 제1 폴딩 필터에 대해 제2 차원 폴딩을 수행하여 생성된 것이다. 조항 A3, 조항 A2에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는, 상기 원시 필터를 컨볼루션 코어의 폭 방향 상에서 횡 방향 컨볼루션 스텝을 Nw1-1회 이동하고, 및/또는 컨볼루 션 코어의 높이 방향 상에서 종 방향 컨볼루션 스텝을 Nh1-1회 이동하여, Ntotal1개의 확장 필터를 얻되, Ntotal1＝ Nw1×Nh1이고, Nw1 및 Nh1은 자연수인 것; 및 상기 Ntotal1개의 확장 필터를 출력 채널 차원 상에서 상기 제1 폴딩 필터로 합성하는 것 을 통해 상기 제1 차원 폴딩을 수행하도록 구성된다. 조항 A4, 조항 A3에 기재된 데이터 처리 장치에 있어서, 상기 원시 필터의 출력 채널 차원의 크기는 제1 임계치 A1을 초과하지 않고, 상기 제1 폴딩 필터의 출력 채널 차원의 크기는 제2 임계치 Aco와 같되, 제1 임계치 A1는 제2 임계치 Aco보다 작다. 조항 A5, 조항 A4에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 원시 필터의 출력 채널의 수량 Co 및 상기 제2 임계치 Aco에 기반하여 제1 총 폴딩 배율 Ntotal1을 확정하고; 상기 제1 총 폴딩 배율 Ntotal1을 제1 폭 차원의 폴딩 배율 Nw1 및 제1 높이 차원의 폴딩 배율 Nh1로 분할하고; Nw1, Nh1 및 원시 필터의 컨볼루션 스텝에 기반하여, 상기 제1 폴딩 필터의 컨볼루션 스텝을 확정하며; 및 Nw1, Nh1 및 원시 필터의 컨볼루션 코어 및 컨볼루션 스텝에 기반하여, 상기 제1 폴딩 필터의 컨볼루션 코어의 크기를 확정한다. 조항 A6, 조항 A5에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, Ntotal1＝Aco/Coa을 계산하되, Coa는 Co가 가장 가까운 Aco/2n으로 정렬된 값이고, n은 자연수인 것 을 통해 제1 총 폴딩 배율 Ntotal1을 확정하도록 구성된다. 조항 A7, 조항 A5 또는 A 6에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 컨볼루션 코어의 폭 방향에 우선적으로 분할하는 규칙; 컨볼루션 스텝이 더 작은 방향에 우선적으로 분할하는 규칙; 컨볼루션 코어의 폭 방향과 컨볼루션 코어의 높이 방향에 평균으로 분할하는 규칙; 또는 상기 제1 폴딩 필터의 컨볼루션 코어의 사이즈가 최소로 되도록 분할하는 규칙 중 임의의 규칙 또는 규칙의 조합으로 상기 제1 총 폴딩 배율 Ntotal1을 분할한다. 조항 A8, 조항 A5 내지 조항 A7 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 이하와 같이 상기 제1 폴딩 필터의 컨볼루션 스텝을 확정하도록 구성되며, = *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "= *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 13, "content": "여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, S′x, Sy′는 각각 제1 폴딩 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이다. 조항 A9, 조항 A 5 내지 조항 A8 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 이하와 같이 상기 제1 폴딩 필터의 컨볼루션 코어의 크기를 확정하도록 구성되며, = + ( - 1) *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 14, "content": "= + (Nh1- 1) *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 15, "content": "여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, kw, kh는 각각 원시 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이며, kw′, kh′는 각각 제1 폴딩 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이다. 조항 A10, 조항 A4 내지 조항 A9 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 제2 임계치 Aco는 상기 처리 회로 중의 컨볼루션 연산 유닛의 수량에 기반하여 확정되고, 상기 제1 임계치 A1≤Aco/2이다. 조항 A11, 조항 A1 내지 조항 A10 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 원시 필터의 입력 채널 차원의 크기는 제3 임계치 A2를 초과하지 않고, 상기 폴딩 필터의 입력 채널 차원 의 크기는 제4 임계치 Aci와 같되, 제3 임계치 A2는 제4 임계치 Aci보다 작다. 조항 A12, 조항 A11에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는, 폴딩 대기의 다차원 데이터의 입력 채널 차원의 크기 Ci 및 상기 제4 임계치 Aci에 기반하여 제2 총 폴딩 배율 Ntotal2를 확정하는 것; 상기 제2 총 폴딩 배율 Ntotal2를 제2 폭 차원의 폴딩 배율 Nw2와 제2 높이 차원의 폴딩 배율 Nh2로 분할하는 것; Nw2, Nh2 및 폴딩 대기의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기에 기반하여, 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기를 확정하는 것; 및 Nw2, Nh2 및 컨볼루션 연산의 원시 컨볼루션 스텝에 기반하여, 상기 컨볼루션 연산의 폴딩 후의 컨볼루션 스텝 을 확정하는 것 을 통해 상기 제2 차원 폴딩을 수행하도록 구성된다. 조항 A13, 조항 A 12에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, Ntotal2＝Aci/Cia를 계산하되; Cia는 Ci가 가장 가까운 Aci/2n으로 정렬된 값이며, n은 자연수인 것 을 통해 제2 총 폴딩 배율 Ntotal2를 확정하도록 구성된다. 조항 A 14, 조항 A 12 내지 조항 A13 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 폭 차원에 우선적으로 분할하는 규칙; 폭 차원과 높이 차원에 평균으로 분할하는 규칙; 폴딩 배율의 정렬로 인한 보완량이 최소화되도록 분할하는 규칙; 또는 상기 제1 폴딩 필터에 기반한 폭 차원 상의 컨볼루션 스텝이 당해 폭 차원의 폴딩 배율에 의해 나누어 떨어질 수 있도록 분할하는 규칙 중 임의의 규칙 또는 규칙의 조합으로 상기 제2 총 폴딩 배율 Ntotal2를 분할하도록 구성된다. 조항 A 15, 조항 A 12 내지 조항 A14 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 이하의 식 및 식을 통해 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차 원의 크기를 확정하도록 구성되며, = （7） = （8） 여기서, kw″, kh″는 각각 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기이고, kwa는 폴딩 대 기의 다차원 데이터의 폭 차원의 크기 kw′가 가장 가까운 폭 차원의 폴딩 배율 Nw2로 정렬된 값이며, kha는 폴 딩 대기의 다차원 데이터의 높이 차원의 크기 kh′가 장 가까운 높이 차원의 폴딩 배율 Nh2로 정렬된 값이다. 조항 A 16, 조항 A 12 내지 조항 A15 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 이하의 식 및 식을 통해 폴딩 후의 다차원 데이터의 컨볼루션 스텝을 확정하도록 구성되며 ： = （9） = （10） 여기서, Sx′, Sy′는 각각 상기 제2 차원 폴딩 전의 컨볼루션 연산의 폭 차원의 컨볼루션 스텝 및 높이 차원의 컨볼루션 스텝이고, Sx″, Sy″는 각각 상기 제2 차원 폴딩 후의 컨볼루션 연산의 폭 차원의 컨볼루션 스텝 및 높이 차원의 컨볼루션 스텝이다. 조항 A 17, 조항 A12 내지 조항 A16 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 폴딩 대기의 다차원 데이터는 상기 제1 폴딩 필터 및/또는 상기 입력 특징 맵이다. 조항 A18, 조항 A11 내지 조항 A17 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 제4 임계치 Aci는 명령 정렬 요구 사항에 기반하여 확정되고, 상기 제3 임계치 A2≤Aci/2이다. 조항 A19, 조항 A1 내지 조항 A18 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 상기 확장 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터만을 포함할 경우, 상기 중간 결과 에 대해 차원 재결합을 수행하여 상기 차원 역 폴딩을 구현하여, 출력 특징 맵을 얻도록 구성된다. 조항 A20, 조항 A1 내지 조항 A18 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 상기 확장 필터가 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터를 포함할 경우, 상기 중간 결과 에 대해 차원 전치를 수행하여 상기 차원 역 폴딩을 구현하여, 출력 특징 맵을 얻도록 구성된다. 조항 A21, 조항 A 1 내지 조항 A18 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 상기 확장 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터를 포함할 뿐만 아니라, 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터도 포함할 경우, 상기 중간 결과에 대해 차원 재결합 및 차원 전치를 수행하여 상기 차원 역 폴딩을 구현하여, 출력 특징 맵을 얻도록 구성된다. 조항 A 22, 조항 A 20또는 조항 A 21에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 상기 중간 결과의 출력 채널 차원 상의 특징을 높이 차원 상으로 전치하도록 구성된다. 조항 A 23, 조항 A1 내지 조항 A22 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 차원 재결합을 통해 폭 차원 상의 상기 제2 차원 폴딩을 구현하고; 및/또는 차원 전치를 통해 높이 차원 상의 상기 제2 차원 폴딩을 구현하도록 구성된다. 조항 A 24, 조항 A1 내지 조항 A23임의의 상기의 데이터 처리 장치에 있어서, 상기 원시 필터의 입력 채널 차원의 크기는 상기 제1 폴딩 필터의 입력 채널 차원의 크기와 같으며; 상기 제1 폴딩 필터의 출력 채널 차원의 크기는 상기 폴딩 필터의 출력 채널 차원의 크기와 같다. 조항 A25, 조항 A 1 내지 조항 A24 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 폴딩 필터는 오프라인으로 생성되거나 또는 온라인으로 생성된다. 조항 A26, 칩에 있어서, 조항 A1 내지 조항 A25 중 어느 한 조항에 기재된 데이터 처리 장치를 포함하는 것을 특징으로 하는 상기 칩. 조항 A27, 보드 카드에 있어서, 조항 A26에 기재된 칩을 포함하는 것을 특징으로 하는 상기 보드 카드. 조항 A28, 데이터 처리 장치에 의해 실시되는 신경망 모델을 수행하기 위한 방법에 있어서, 상기 데이터 처리 장치는 저장 회로 및 처리 회로를 포함하고, 상기 저장 회로에는 상기 신경망 모델의 컨볼루션 레이어의 폴딩 필터가 저장되어 있고, 상기 폴딩 필터는 원시 필터에 대해 제1 차원 폴딩 및 제2 차원 폴딩을 수행하여 생성된 것이며, 상기 제1 차원 폴딩은 복수 회의 컨볼 루션 스텝 이동을 합성하여 얻은 복수의 확장 필터를 포함하고, 상기 제2 차원 폴딩은 폭 차원 및/또는 높이 차 원의 데이터를 입력 채널 차원에 다시 배출하며; 상기 방법은, 상기 처리 회로가 입력 특징 맵에 대해 상기 제2 차원 폴딩을 수행하여 폴딩 특징 맵을 얻는 것; 상기 처리 회로가 이용 상기 저장 회로에 저장된 상기 폴딩 필터 상기 폴딩 특징 맵에 대해 컨볼루션 연산을 수 행하여 중간 결과를 얻는 것; 및 상기 처리 회로 상기 중간 결과에 대해 차원 역 폴딩을 수행하여 출력 특징 맵을 얻는 것을 포함한다. 조항 A29, 조항 A28에 기재된 방법에 있어서, 상기 폴딩 필터는 우선 상기 원시 필터에 대해 제1 차원 폴딩을 수행하여 제1 폴딩 필터를 얻고, 다시 상기 제1 폴딩 필터에 대해 제2 차원 폴딩을 수행하여 생성된 것이다.조항 A30, 조항 A29에 기재된 방법에 있어서, 상기 처리 회로가, 상기 원시 필터를 컨볼루션 코어의 폭 방향 상에서 횡 방향 컨볼루션 스텝을 Nw1-1회 이동하고, 및/또는 컨볼루 션 코어의 높이 방향 상에서 종 방향 컨볼루션 스텝을 Nh1-1회 이동하여, Ntotal1개의 확장 필터를 얻되, Ntotal1＝ Nw1×Nh1이고, Nw1 및 Nh1은 자연수인 것; 및 상기 Ntotal1개의 확장 필터를 출력 채널 차원 상에서 상기 제1 폴딩 필터로 합성하는 것 을 통해 상기 제1 차원 폴딩을 수행하는 것을 더 포함한다. 조항 A31, 조항 A30에 기재된 방법에 있어서, 상기 원시 필터의 출력 채널 차원의 크기는 제1 임계치 A1을 초과하지 않고, 상기 제1 폴딩 필터의 출력 채널 차원의 크기는 제4 임계치 Aco와 같되, 제1 임계치 A1은 제4 임계치 Aco보다 작다. 조항 A32, 조항 A31에 기재된 방법에 있어서, 상기 처리 회로 원시 필터의 출력 채널의 수량 Co 및 상기 제2 임계치 Aco에 기반하여 제1 총 폴딩 배율 Ntotal1 을 확정하는 것; 상기 제1 총 폴딩 배율 Ntotal1을 제1 폭 차원의 폴딩 배율 Nw1 및 제1 높이 차원의 폴딩 배율 Nh1로 분할하는 것; Nw1, Nh1 및 원시 필터의 컨볼루션 스텝에 기반하여, 상기 제1 폴딩 필터의 컨볼루션 스텝을 확정하는 것; 및 Nw1, Nh1 및 원시 필터의 컨볼루션 코어 및 컨볼루션 스텝에 기반하여, 상기 제1 폴딩 필터의 컨볼루션 코어의 크기를 확정하는 것을 더 포함한다. 조항 A33, 조항 A32에 기재된 방법에 있어서, 상기 처리 회로가, Ntotal1＝Aco/Coa을 계산하되, Coa는 Co가 가장 가까운 Aco/2n으로 정렬된 값이고, n은 자연수인 것 을 통해 제1 총 폴딩 배율 Ntotal1을 확정하는 것을 더 포함한다. 조항 A34, 조항 A32 내지 조항 A33 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가, 컨볼루션 코어의 폭 방향에 우선적으로 분할하는 규칙; 컨볼루션 스텝이 더 작은 방향에 우선적으로 분할하는 규칙; 컨볼루션 코어의 폭 방향과 컨볼루션 코어의 높이 방향에 평균으로 분할하는 규칙; 또는 상기 제1 폴딩 필터의 컨볼루션 코어의 사이즈가 최소로 되도록 분할하는 규칙 중 임의의 규칙 또는 규칙의 조합으로 상기 제1 총 폴딩 배율 Ntotal1을 분할하는 것을 더 포함한다. 조항 A35, 조항 A32 내지 조항 A34 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가 이하의 식을 통해 상기 제1 폴딩 필터의 컨볼루션 스텝을 확정하며, = *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 16, "content": "= *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 17, "content": "여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, S′x, Sy′는 각각 제1 폴딩 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이다. 조항 A36, 조항 A32 내지 조항 A25 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가 이하의 식을 통해 상기 제1 폴딩 필터의 컨볼루션 코어의 크기를 확정하며, = + ( - 1) *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 18, "content": "= + (Nh1- 1) *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 19, "content": "여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, kw, kh는 각각 원시 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이며, kw′, kh′는 각각 제1 폴딩 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이다. 조항 A37, 조항 A31 내지 조항 A36 중 어느 한 조항에 기재된 방법에 있어서, 상기 제2 임계치 Aco는 상기 처리 회로 중의 컨볼루션 연산 유닛의 수량에 기반하여 확정되고, 상기 제1 임계치 A1≤Aco/2이다. 조항 A38, 조항 A28 내지 조항 A37 중 어느 한 조항에 기재된 방법에 있어서, 상기 원시 필터의 입력 채널 차원의 크기는 제3 임계치 A2를 초과하지 않고, 상기 폴딩 필터의 입력 채널 차원 의 크기는 제4 임계치 Aci와 같되, 제3 임계치 A2는 제4 임계치 Aci보다 작다. 조항 A39, 조항 A38에 기재된 방법에 있어서, 상기 처리 회로가, 폴딩 대기의 다차원 데이터의 입력 채널 차원의 크기 Ci 및 상기 제4 임계치 Aci에 기반하여 제2 총 폴딩 배율 Ntotal2를 확정하는 것; 상기 제2 총 폴딩 배율 Ntotal2를 제2 폭 차원의 폴딩 배율 Nw2와 제2 높이 차원의 폴딩 배율 Nh2로 분할하는 것; Nw2, Nh2 및 폴딩 대기의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기에 기반하여, 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기를 확정하는 것; 및 Nw2, Nh2 및 컨볼루션 연산의 원시 컨볼루션 스텝에 기반하여, 상기 컨볼루션 연산의 폴딩 후의 컨볼루션 스텝 을 확정하는 것 을 통해 상기 제2 차원 폴딩을 수행하는 것을 더 포함한다. 조항 A40, 조항 A39에 기재된 방법에 있어서, 상기 처리 회로가, Ntotal2＝Aci/Cia를 계산하되; Cia는 Ci가 가장 가까운 Aci/2n으로 정렬된 값이며, n은 자연수인 것 을 통해 제2 총 폴딩 배율 Ntotal2를 확정하는 것을 더 포함한다. 조항 A41, 조항 A39 내지 조항 A40 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가, 폭 차원에 우선적으로 분할하는 규칙; 폭 차원과 높이 차원에 평균으로 분할하는 규칙; 폴딩 배율의 정렬로 인한 보완량이 최소화되도록 분할하는 규칙; 또는 상기 제1 폴딩 필터에 기반한 폭 차원 상의 컨볼루션 스텝이 당해 폭 차원의 폴딩 배율에 의해 나누어 떨어질 수 있도록 분할하는 규칙 중 임의의 규칙 또는 규칙의 조합으로 상기 제2 총 폴딩 배율 Ntotal2를 분할하는 것을 더 포함한다. 조항 A42, 조항 A39 내지 조항 A41 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가 이하의 식 및 식을 통해 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크 기를 확정하는 것을 더 포함하며, = （7） = （8） 여기서, kw″, kh″는 각각 폴딩 후의 다차원 데이터의 폭 차원의 크기 및 높이 차원의 크기이고, kwa는 폴딩 대 기의 다차원 데이터의 폭 차원의 크기 kw′가 가장 가까운 폭 차원의 폴딩 배율 Nw2로 정렬된 값이며, kha는 폴 딩 대기의 다차원 데이터의 높이 차원의 크기 kh′가 장 가까운 높이 차원의 폴딩 배율 Nh2로 정렬된 값이다. 조항 A43, 조항 A39 내지 조항 A42 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가 이하의 식 및 식을 통해 폴딩 후의 다차원 데이터의 컨볼루션 스텝을 확정하는 것을 더 포함하며, = （9） = （10） 여기서, Sx′, Sy′는 각각 상기 제2 차원 폴딩 전의 컨볼루션 연산의 폭 차원의 컨볼루션 스텝 및 높이 차원의 컨볼루션 스텝이고, Sx″, Sy″는 각각 상기 제2 차원 폴딩 후의 컨볼루션 연산의 폭 차원의 컨볼루션 스텝 및 높이 차원의 컨볼루션 스텝이다. 조항 A44, 조항 A39 내지 조항 A43 중 어느 한 조항에 기재된 방법에 있어서, 상기 폴딩 대기의 다차원 데이터는 상기 제1 폴딩 필터 및/또는 상기 입력 특징 맵이다. 조항 A 45, 조항 A38 내지 조항 A44 중 어느 한 조항에 기재된 방법에 있어서, 여기서, 상기 제4 임계치 Aci는 명령 정렬 요구 사항에 기반하여 확정되고, 상기 제3 임계치 A2≤Aci/2이다. 조항 A46, 조항 A28 내지 조항 A45 중 어느 한 조항에 기재된 방법에 있어서, 상기 중간 결과에 대해 차원 역 폴딩을 수행하는 것은, 상기 확장 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터만을 포함할 경우, 상기 중간 결과 에 대해 차원 재결합을 수행하여 상기 차원 역 폴딩을 구현하여, 출력 특징 맵을 얻는 것을 포함한다. 조항 A47, 조항 A28 내지 조항 A45 중 어느 한 조항에 기재된 방법에 있어서, 상기 중간 결과에 대해 차원 역 폴딩을 수행하는 것은, 상기 확장 필터가 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터를 포함할 경우, 상기 중간 결과 에 대해 차원 전치를 수행하여 상기 차원 역 폴딩을 구현하여, 출력 특징 맵을 얻는 것을 포함한다. 조항 A48, 조항 A28 내지 조항 A45 중 어느 한 조항에 기재된 방법에 있어서, 상기 중간 결과에 대해 차원 역 폴딩을 수행하는 것은, 상기 확장 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터를 포함할 뿐만 아니라, 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터도 포함할 경우, 상기 중간 결과에 대해 차원 재결합 및 차원 전치를 수행하여 상기 차원 역 폴딩을 구현하여, 출력 특징 맵을 얻는 것을 포함한다. 조항 A49, 조항 A47또는 A48에 기재된 방법에 있어서, 상기 중간 결과에 대해 차원 전치를 수행하는 것은, 상기 중간 결과의 출력 채널 차원 상의 특징을 높이 차원 상으로 전치하는 것d을 포함한다. 조항 A50, 조항 A28 내지 조항 A49 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가 차원 재결합을 통해 폭 차원 상의 상기 제2 차원 폴딩을 구현하는 것; 및/또는 차원 전치를 통해 높이 차원 상의 상기 제2 차원 폴딩을 구현하는 것을 더 포함한다. 조항 A51, 조항 A28 내지 조항 A50 중 어느 한 조항에 기재된 방법에 있어서, 상기 원시 필터의 입력 채널 차원의 크기는 상기 제1 폴딩 필터의 입력 채널 차원의 크기와 같으며; 상기 제1 폴딩 필터의 출력 채널 차원의 크기는 상기 폴딩 필터의 출력 채널 차원의 크기와 같다. 조항 A52, 조항 A28 내지 조항 A51 중 어느 한 조항에 기재된 방법에 있어서, 상기 폴딩 필터는 오프라인으로 생성되거나 또는 온라인으로 생성된다. 2020116317360 조항 B1, 신경망 모델을 수행하기 위한 데이터 처리 장치에 있어서, 저장 회로 및 처리 회로를 포함하되, 상기 저장 회로는 상기 신경망 모델의 컨볼루션 레이어의 폴딩 필터를 저장하도록 구성되되, 상기 폴딩 필터는 원시 필터에 대해 컨볼루션 스텝 이동을 복수 회 수행하여 얻은 복수의 확장 필터를 합성한 것인 것이고; 상기 처리 회로는, 상기 폴딩 필터를 이용하여 입력 특징 맵에 대해 컨볼루션 연산을 수행하여 중간 결과를 얻고; 상기 중간 결과에 대해 차원 재배열을 수행하여 출력 특징 맵을 얻도록 구성된다. 조항 B2, 조항 B1에 기재된 데이터 처리 장치에 있어서, 상기 폴딩 필터는 상기 처리 회로가, 상기 원시 필터를 컨볼루션 코어의 폭 방향 상에서 횡 방향 컨볼루션 스텝을 Nw-1회 이동하고, 및/또는 컨볼루 션 코어의 높이 방향 상에서 종 방향 컨볼루션 스텝을 Nh-1회 이동하여, N개의 확장 필터를 얻되, N＝Nw×Nh, Nw 및 Nh은 자연수인 것; 및 상기 N개의 확장 필터를 출력 채널 차원 상에서 하나의 폴딩 필터로 합성하는 것 을 통해 생성한 것이다. 조항 B3, 조항 B2에 기재된 데이터 처리 장치에 있어서, 상기 원시 필터의 출력 채널의 수량은 제1 임계치 Th1을 초과하지 않고, 상기 폴딩 필터의 출력 채널의 수량은 제2 임계치 Th2와 같되, 제1 임계치 Th1은 제2 임계치 Th2보다 작다. 조항 B4, 조항 B3에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 원시 필터의 출력 채널의 수량 Co 및 상기 제2 임계치 Th2에 기반하여 총 폴딩 배율 N을 확정하고; 상기 총 폴딩 배율 N을 컨볼루션 코어의 폭 방향 폴딩 배율 Nw 및 컨볼루션 코어의 높이 방향 폴딩 배율 Nh로 분할하며; Nw, Nh 및 원시 필터의 컨볼루션 스텝에 기반하여, 상기 폴딩 필터의 컨볼루션 스텝을 확정하고; 및 Nw, Nh 및 원시 필터의 컨볼루션 코어 및 컨볼루션 스텝에 기반하여, 상기 폴딩 필터의 컨볼루션 코어의 크기를 확정하되, 상기 컨볼루션 코어의 크기는 상기 확장 필터의 컨볼루션 코어의 크기에 대응된다. 조항 B5, 조항 B4에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, N＝Th2/Ca을 계산하되, Ca는 Co가 가장 가까운 Th2/2n으로 정렬된 값이고, n은 자연수인 것 을 통해 총 폴딩 배율 N을 확정하도록 구성된다. 조항 B6, 조항 B4 내지 조항 B5 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 컨볼루션 코어의 폭 방향에 우선적으로 분할하는 규칙; 컨볼루션 스텝이 더 작은 방향에 우선적으로 분할하는 규칙; 컨볼루션 코어의 폭 방향과 컨볼루션 코어의 높이 방향에 평균으로 분할하는 규칙; 또는 상기 폴딩 필터의 컨볼루션 코어의 사이즈가 최소화되도록 분할하는 규칙 중 임의의 규칙 또는 규칙의 조합으로 상기 총 폴딩 배율 N을 분할하도록 구성된다. 조항 B7, 조항 B4 내지 조항 B6 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 이하의 식을 통해 상기 폴딩 필터의 컨볼루션 스텝을 확정하도록 구성되며, = *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 20, "content": "= *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 21, "content": "여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, S′x, Sy′각각 槨폴 딩 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이다. 조항 B8, 조항 B4-7 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 이하의 식을 통해 상기 폴딩 필터의 컨볼루션 코어의 크기를 확정하도록 구성되며, = + ( - 1) *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 22, "content": "= + (Nh- 1) *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 23, "content": "여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, kw, kh는 각각 원시 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이며, kw′, kh′는 각각 폴딩 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이다. 조항 B9, 조항 B1-8 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 상기 확장 필터가 상기 원시 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터만을 포함할 경우, 상기 중간 결과에 대해 차원 재결합을 수행하여, 출력 특징 맵을 얻도록 구성된다. 조항 B10, 조항 B1-8 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 상기 확장 필터가 상기 원시 필터가 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터를 포함할 경우, 상기 중간 결과에 대해 차원 전치를 수행하여, 출력 특징 맵을 얻도록 구성된다. 조항 B11, 조항 B1-8 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 상기 확장 필터가 상기 원시 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터를 포함할 뿐만 아니라, 상기 원시 필터가 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터도 포함할 경우, 상기 중 간 결과에 대해 차원 재결합 및 차원 전치를 수행하여, 출력 특징 맵을 얻도록 구성된다. 조항 B 12, 조항 B10또는 11에 기재된 데이터 처리 장치에 있어서, 상기 처리 회로는 또한, 상기 중간 결과의 출력 채널 차원 상의 특징을 높이 차원 상으로 전치하도록 구성된다. 조항 B13, 조항 B3-12 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 제2 임계치 Th2는 상기 처리 회로 중의 컨볼루션 연산 유닛의 수량에 기반하여 확정되되, 상기 제1 임계치 Th1≤Th2/2이다. 조항 B14, 조항 B1-13 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 원시 필터의 입력 채널 수량은 상기 폴딩 필터의 입력 채널 수량과 같다. 조항 B15, 조항 B1-14 중 어느 한 조항에 기재된 데이터 처리 장치에 있어서, 상기 폴딩 필터는 오프라인으로 생성되거나 또는 온라인으로 생성된 것이다. 조항 B16, 칩에 있어서, 조항 B1 내지 조항 B 15 중 어느 한 조항에 기재된 데이터 처리 장치를 포함하는 것을 특징으로 하는 상기 칩. 조항 B17, 보드 카드에 있어서, 조항 B16에 기재된 칩을 포함하는 것을 특징으로 하는 상기 보드 카드. 조항 B18, 데이터 처리 장치에 의해 실시되는 신경망 모델을 수행하기 위한 방법에 있어서, 상기 데이터 처리 장치는 저장 회로 및 처리 회로를 포함하고, 상기 방법은, 상기 처리 회로가 상기 저장 회로에 저장된 상기 신경망 모델의 컨볼루션 레이어의 폴딩 필터를 이용하여 입력 특징 맵에 대해 컨볼루션 연산을 수행하여 중간 결과를 얻되, 상기 폴딩 필터는 원시 필터에 대해 컨볼루션 스 텝 이동을 복수 회 수행하여 얻은 복수의 확장 필터를 합성한 것인 것; 및 상기 처리 회로가 상기 중간 결과에 대해 차원 재배열을 수행하여 출력 특징 맵을 얻는 것을 포함한다. 조항 B19, 조항 B18에 기재된 방법에 있어서, 상기 폴딩 필터는 상기 처리 회로가, 상기 원시 필터를 컨볼루션 코어의 폭 방향 상에서 횡 방향 컨볼루션 스텝을 Nw-1회 이동하고, 및/또는 컨볼루 션 코어의 높이 방향 상에서 종 방향 컨볼루션 스텝을 Nh-1회 이동하여, N개의 확장 필터를 얻되, N＝Nw×Nh이 고, Nw 및 Nh은 자연수인 것; 및 상기 N개의 확장 필터를 출력 채널 차원 상에서 하나의 폴딩 필터로 합성하는 것 을 통해 생성한 것이다. 조항 B20, 조항 B19에 기재된 방법에 있어서, 상기 원시 필터의 출력 채널의 수량은 제1 임계치 Th1을 초과하지 않고, 상기 폴딩 필터의 출력 채널의 수량은 제2 임계치 Th2와 같되, 제1 임계치 Th1은 제2 임계치 Th2보다 작다. 조항 B21, 조항 B20에 기재된 방법에 있어서, 상기 처리 회로가 원시 필터의 출력 채널의 수량 Co 및 상기 제2 임계치 Th2에 기반하여 총 폴딩 배율 N을 확정 하는 것; 상기 총 폴딩 배율 N을 컨볼루션 코어의 폭 방향 폴딩 배율 Nw 및 컨볼루션 코어의 높이 방향 폴딩 배율 Nh로 분할하는 것; Nw, Nh 및 원시 필터의 컨볼루션 스텝에 기반하여, 상기 폴딩 필터의 컨볼루션 스텝을 확정하는 것; 및 Nw, Nh 및 원시 필터의 컨볼루션 코어 및 컨볼루션 스텝에 기반하여, 상기 폴딩 필터의 컨볼루션 코어의 크기를 확정하되, 상기 컨볼루션 코어의 크기는 상기 확장 필터의 컨볼루션 코어의 크기인 것을 더 포함한다. 조항 B22, 조항 B21에 기재된 방법에 있어서, 상기 처리 회로가, ： N＝Th2/Ca을 계산하되, Ca는 Co가 가장 가까운 Th2/2n으로 정렬된 값이고, n은 자연수인 것 을 통해 총 폴딩 배율 N을 확정하는 것을 더 포함한다. 조항 B23, 조항 B21-22 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가, 컨볼루션 코어의 폭 방향에 우선적으로 분할하는 규칙; 컨볼루션 스텝이 더 작은 방향에 우선적으로 분할하는 규칙; 컨볼루션 코어의 폭 방향과 컨볼루션 코어의 높이 방향에 평균으로 분할하는 규칙; 또는 상기 폴딩 필터의 컨볼루션 코어의 사이즈가 최소화되도록 분할하는 규칙 중 임의의 규칙 또는 규칙의 조합으로 상기 총 폴딩 배율 N을 분할하는 것을 더 포함한다. 조항 B24, 조항 B21-23 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가, 이하의 식을 통해 상기 폴딩 필터의 컨볼루션 스텝을 확정하는 것을 더 포함하며, = *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 24, "content": "= *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 25, "content": "여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, S′x, Sy′각각 폴딩 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이다. 조항 B25, 조항 B21-24 중 어느 한 조항에 기재된 방법에 있어서, 상기 처리 회로가, 이하의 식을 통해 상기 폴딩 필터의 컨볼루션 코어의 크기를 확정하는 것을 더 포함하며, = + ( - 1) *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 26, "content": "= + (Nh- 1) *"}
{"patent_id": "10-2022-7046207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 27, "content": "여기서, Sx, Sy는 각각 원시 필터의 횡 방향 컨볼루션 스텝 및 종 방향 컨볼루션 스텝이고, kw, kh는 각각 원시 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이며, kw′, kh′는 각각 폴딩 필터의 컨볼루션 코어의 폭 및 컨볼루션 코어의 높이다. 조항 B26, 조항 B15 내지 조항 B25 중 어느 한 조항에 기재된 방법에 있어서, 상기 중간 결과에 대해 차원 재배열을 수행하는 것은, 상기 확장 필터가 상기 원시 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터만을 포함할 경우, 상기 중간 결과에 대해 차원 재결합을 수행하여, 출력 특징 맵을 얻는 것을 포함한다. 조항 B27, 조항 B15 내지 조항 B25 중 어느 한 조항에 기재된 방법에 있어서, 상기 중간 결과에 대해 차원 재배열을 수행하는 것은, 상기 확장 필터가 상기 원시 필터가 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터를 포함할 경우, 상기 중간 결과에 대해 차원 전치를 수행하여, 출력 특징 맵을 얻은 것을 포함한다. 조항 B28, 조항 B15 내지 조항 B25 중 어느 한 조항에 기재된 방법에 있어서, 상기 중간 결과에 대해 차원 재배열을 수행하는 것은, 상기 확장 필터가 상기 원시 필터가 컨볼루션 코어의 폭 방향 상에서 이동하여 얻은 확장 필터를 포함할 뿐만 아니라, 상기 원시 필터가 컨볼루션 코어의 높이 방향 상에서 이동하여 얻은 확장 필터도 포함할 경우, 상기 중 간 결과에 대해 차원 재결합 및 차원 전치를 수행하여, 출력 특징 맵을 얻는 것을 포함한다. 조항 B29, 조항 B27또는 조항 B28에 기재된 방법에 있어서, 상기 중간 결과에 대해 차원 전치를 수행하는 것은, 상기 중간 결과의 출력 채널 차원 상의 특징을 높이 차원 상으로 전치하는 것을 포함한다. 조항 B30, 조항 B20 내지 조항 B29 중 어느 한 조항에 기재된 방법에 있어서, 상기 제2 임계치 Th2는 상기 처리 회로 중의 컨볼루션 연산 유닛의 수량에 기반하여 확정되되, 상기 제1 임계치 Th1≤Th2/2이다. 조항 B31, 조항 B18 내지 조항 B30 중 어느 한 조항에 기재된 방법에 있어서, 상기 원시 필터의 입력 채널 수량은 상기 폴딩 필터의 입력 채널 수량과 같다. 조항 B32, 조항 B18 내지 조항 B31 중 어느 한 조항에 기재된 방법에 있어서, 상기 폴딩 필터는 오프라인으로 생성되거나 또는 온라인으로 생성된다. 본 명세서에서 본 발명의 복수의 실시예를 제시하고 설명했지만, 당업자라면 이러한 실시예는 예시적인 방식으 로 제공됨은 자명한 것이다. 당업자는 본 발명의 사상과 정신에서 이탈하지 않고 많은 개정, 변경 및 대체 방식 을 생각할 수 있다. 본 발명을 실천하는 과정에서 본 명세서에 설명된 본 발명 실시예의 다양한 대안을 채택할 수 있음을 이해해야 한다. 첨부된 청구 범위는 본 발명의 보호 범위를 한정하고, 이러한 청구 범위 내의 동등하 거나 대체적인 방안을 커버하도록 의도한다."}
{"patent_id": "10-2022-7046207", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면을 참조하여 아래의 상세한 설명을 열독함으로써, 본 발명의 예시적인 실시 방식의 상기 및 기타 목적, 특 징 및 이점에 대한 이해가 용이하게 될 것이다. 도면에서 제한적이지 않는 예시적인 방식으로 본 발명의 몇몇의 실시 방식을 나타내는 바, 같거나 또는 대응하는 부호는 같거나 또는 대응하는 부분을 나타낸다. 도 1은 본 발명 실시예의 보드 카드를 나타낸 구조도이다. 도 2는 본 발명 실시예의 집적 회로 장치를 나타낸 구조도이다. 도 3은 본 발명 실시예의 싱글 코어 계산 장치의 내부 구조를 나타낸 모식도이다. 도 4는 본 발명 실시예의 멀티 코어 계산 장치의 내부 구조를 나타낸 모식도이다. 도 5는 본 발명 실시예의 프로세서 코어의 내부 구조를 나타낸 모식도이다. 도 6은 본 발명 실시예를 적용할 수 있는 예시적인 컨볼루션 연산예를 나타낸다. 도 7은 본 발명 실시예의 제1 차원 폴딩을 나타낸 예시적인 원리도이다. 도 8은 본 발명 실시예에 따른 더 상세한 제1 차원 폴딩을 나타낸 모식도이다. 도 9는 본 발명 실시예에 따른 제1 차원 폴딩 전후의 계산 과정을 나타낸 예시적인 대조도이다. 도 10은 본 발명 실시예에 따른 차원 전치를 나타낸 예시적인 모식도이다. 도 11은 본 발명 실시예의 제2 차원 폴딩을 나타낸 예시적인 원리도이다. 도 12는 본 발명 실시예에 따른 더 상세한 제2 차원 폴딩을 나타낸 모식도이다. 도 13은 본 발명 실시예에 따른 컨볼루션 코어에 대해 폴딩 배율 보완을 수행하는 것을 모식적으로 나타낸 모식 도이다. 도 14는 본 발명 실시예에 따른 컨볼루션 스텝의 유효 배율에 대한 영향을 모식적으로 나타낸 모식도이다. 도 15는 본 발명 실시예을 실시할 수 있는 데이터 처리 장치를 예시적으로 나타낸 모식적인 구조도이다. 도 16은 본 발명 실시예에 따른 데이터 처리 방법을 나타낸 예시적인 플로우차트이다."}
