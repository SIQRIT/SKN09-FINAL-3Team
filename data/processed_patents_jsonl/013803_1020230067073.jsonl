{"patent_id": "10-2023-0067073", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0169374", "출원번호": "10-2023-0067073", "발명의 명칭": "컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법 및 시스템", "출원인": "주식회사 이노그리드", "발명자": "엄태준"}}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법에 있어서, 외부API요청에 따른 요청 리소스에 상응하는 후보노드들을 선정하는 단계;상기 후보노드들의 수집된 모니터링 정보를 기반으로 각각의 리소스 사용량을 예측하는 단계; 및상기 리소스 사용량의 예측 결과를 기반으로 상기 후보노드들에 대한 스케줄링 우선순위를 결정하는 단계를 포함하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서,각 노드들의 CPU 및 메모리 사용량과 네트워크 및 디스크 입출력(I/O)량을 상기 후보노드들의 선정 및 상기 우선순위의 결정에 이용하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 2에 있어서,상기 외부API요청을 포함하는 누적된 요청 내역을 기반으로 설정된 예측시간동안의 예상요청을 예측하고, 상기예상요청을 기반으로 상기 후보노드들을 선정하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 1에 있어서,상기 후보노드들의 모니터링 정보에 따른 사용량 트렌드에 대한 인공지능 분석에 의한 각 사용패턴을 분석하고,상기 사용패턴을 이용하여 미래의 사용내역에 대한 상기 리소스 사용량을 예측하는, 컨테이너 오케스트레이션환경에서의 컨테이너 스케줄링 방법."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 4에 있어서,스케줄링 처리 후 상기 후보노드들의 모니터링 정보에 따른 각 사용량 정보를 상기 인공지능 분석을 위한 학습데이터로 활용하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 5에 있어서,상기 사용량 정보와 예측된 리소스 사용량을 비교하여, 가장 유사한 것과 가장 상이한 것에 가중치를 더하여 상기 학습데이터로 활용하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법.공개특허 10-2024-0169374-3-청구항 7 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법을 수행하도록 하는 컴퓨터-판독 가능 매체에 저장된 컴퓨터 프로그램으로서, 상기 컴퓨터 프로그램은 컴퓨터로 하여금 이하의 단계들을 수행하도록 하며, 상기단계들은,외부API요청에 따른 요청 리소스에 상응하는 후보노드들을 선정하는 단계;상기 후보노드들의 수집된 모니터링 정보를 기반으로 각각의 리소스 사용량을 예측하는 단계;상기 리소스 사용량의 예측 결과를 기반으로 상기 후보노드들에 대한 스케줄링 우선순위를 결정하는 단계를 포함하는, 컴퓨터-판독 가능 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "컨테이너 오케스트레이션 환경의 클라우드를 구성하는 각 노드들의 모니터링 정보를 수집하여 저장하는 모니터링 서버;외부API요청에 따른 요청 리소스에 상응하는 후보노드들 중 우선순위를 이용한 스케줄링을 수행하는 확장 스케줄러; 및상기 확장 스케줄러로부터의 요청에 따라 상기 후보노드들에 대한 모니터링 정보를 상기 모니터링 서버로부터취득하여 상기 후보노드들의 각 리소스 사용량을 예측하며, 예측된 상기 리소스 사용량을 기반으로 상기 후보노드들에 대한 스케줄링 우선순위를 결정하여 상기 확장 스케줄러에게 안내하는 스코어링 서버를 포함하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 시스템."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 8에 있어서,상기 스코어링 서버는 상기 외부API요청을 포함하는 누적된 요청 내역을 기반으로 설정된 예측시간 동안의 예상요청을 예측하고, 상기 예상요청을 기반으로 상기 후보노드들을 선정하는, 컨테이너 오케스트레이션 환경에서의컨테이너 스케줄링 시스템."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "청구항 8에 있어서,상기 스코어링 서버는 상기 후보노드들의 모니터링 정보에 따른 사용량 트렌드에 대한 인공지능 분석에 의한 각사용패턴을 분석하고, 상기 사용패턴을 이용하여 미래의 사용내역에 대한 상기 리소스 사용량을 예측하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 시스템."}
{"patent_id": "10-2023-0067073", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "청구항 10에 있어서,상기 스코어링 서버는 스케줄링 처리 후 상기 후보노드들의 모니터링 정보에 따른 각 사용량 정보를 상기 인공지능 분석을 위한 학습데이터로 활용하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 시스템."}
{"patent_id": "10-2023-0067073", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법 및 시스템이 개시된다. 본 발명의 일측면에 따른 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법은, 외부API요청에 따른 요청 리소스에 상응하는 후 보노드들을 선정하는 단계; 후보노드들의 수집된 모니터링 정보를 기반으로 각각의 리소스 사용량을 예측하는 단 계; 및 리소스 사용량의 예측 결과를 기반으로 후보노드들에 대한 스케줄링 우선순위를 결정하는 단계를 포함한 다."}
{"patent_id": "10-2023-0067073", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 클라우드 서비스를 위한 스케줄링에 관한 것으로서, 좀 더 상세하게는 컨테이너 오케스트레이션 환경 에서의 컨테이너 스케줄링 방법 및 시스템에 관한 것이다."}
{"patent_id": "10-2023-0067073", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "클라우드가 주는 유연함과 확장성으로 인해 클라우드로의 서비스 전환은 빨라지고 있으며, 그 중심에는 컨테이 너 오케스트레이션 툴인 쿠버네티스를 통해 생태계가 구성된다. 이에 기존 서비스 방식인 모놀리틱 아키텍쳐에 서 마이크로서비스 아키텍쳐로의 서비스 전환이 지속적으로 이루어지고 있다. 현재 대부분의 서비스가 마이크로 서비스로 전환하는 추세이지만, 일부 서비스에 한해 컨테이너로의 전환이 어려운 경우가 발생하기에 다양한 개 발 환경에 맞춰 단일 클라우드가 아닌 멀티, 하이브리드 클라우드의 수요 또한 증가하고 있다. 이에 따라, 최근 에는 쿠버네티스를 기반으로한 컨테이너 기술 등을 활용하여 컨테이너 내부에서 가상 자원을 관리하고자 하는 니즈가 더욱 커지고 있다. 컨테이너 오케스트레이션 환경에서 외부API요청에 따른 컨테이너 배포를 위한 노드를 선정하는 스케줄링 방식에 있어, 종래에는 각 노드의 CPU, Memory 요청 리소스들의 값을 이용하여, 후보노드들의 우선순위를 결정하여 스 케줄링 한다. 그러나, 현재 노드내 컨테이너들의 리소스 요청량의 합을 기준으로 우선순위를 결정하기에, 노드 의 리소스 사용량의 변화를 실시간으로 반영하지 못하는 문제가 있다. 또한, 스케줄 시 리소스의 CPU, Memory를 고려 대상으로 후보노드들의 우선 순위를 결정하기에 Network IO, Disk IO 에 대한 부분이 고려되지 않았다. 현 재 노드의 리소스 상태만을 고려하여 결정하기 때문에, 동적으로 변화하는 노드의 상태를 고려하여 배치할 수 없다는 한계가 있다. 선행기술문헌 특허문헌 (특허문헌 0001) 대한민국 등록특허 제 10-2192442 쿠버네티스 클러스터에서의 리더 분산 방법 및 리더 분산 시 스템"}
{"patent_id": "10-2023-0067073", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "따라서, 본 발명은 상술한 문제점을 해결하기 위해 안출된 것으로서, 노드의 네트워크 상태, 디스크 입출력 등 의 보다 다양한 리소스 상황을 고려하여 스케줄링하여 보다 안정된 운영이 가능하게 되는 컨테이너 오케스트레 이션 환경에서의 컨테이너 스케줄링 방법 및 시스템을 제공하기 위한 것이다. 또한, 본 발명은 각 노드의 현재상태를 기반으로 하되 동적인 변화에 대응하기 위해 미래의 요청과 각 노드에서 의 미래 사용량 등을 인공지능을 이용하여 예측하여 스케줄링에 이용하는 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법 및 시스템을 제공하기 위한 것이다. 본 발명의 다른 목적들은 이하에 서술되는 바람직한 실시예를 통하여 보다 명확해질 것이다."}
{"patent_id": "10-2023-0067073", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일 측면에 따르면, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법에 있어서, 외부API 요청에 따른 요청 리소스에 상응하는 후보노드들을 선정하는 단계; 상기 후보노드들의 수집된 모니터링 정보를 기반으로 각각의 리소스 사용량을 예측하는 단계; 및 상기 리소스 사용량의 예측 결과를 기반으로 상기 후보노 드들에 대한 스케줄링 우선순위를 결정하는 단계를 포함하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스 케줄링 방법 및 그 방법을 실행하는 컴퓨터 프로그램이 제공된다. 여기서, 각 노드들의 CPU 및 메모리 사용량과 네트워크 및 디스크 입출력(I/O)량을 상기 후보노드들의 선정 및 상기 우선순위의 결정에 이용할 수 있다. 또한, 상기 외부API요청을 포함하는 누적된 요청 내역을 기반으로 설정된 예측시간동안의 예상요청을 예측하고, 상기 예상요청을 기반으로 상기 후보노드들을 선정할 수 있다. 또한, 상기 후보노드들의 모니터링 정보에 따른 사용량 트렌드에 대한 인공지능 분석에 의한 각 사용패턴을 분 석하고, 상기 사용패턴을 이용하여 미래의 사용내역에 대한 상기 리소스 사용량을 예측할 수 있다. 또한, 스케줄링 처리 후 상기 후보노드들의 모니터링 정보에 따른 각 사용량 정보를 상기 인공지능 분석을 위한 학습데이터로 활용할 수 있다. 또한, 상기 사용량 정보와 예측된 리소스 사용량을 비교하여, 가장 유사한 것과 가장 상이한 것에 가중치를 더 하여 상기 학습데이터로 활용할 수 있다. 본 발명의 다른 측면에 따르면, 컨테이너 오케스트레이션 환경의 클라우드를 구성하는 각 노드들의 모니터링 정 보를 수집하여 저장하는 모니터링 서버; 외부API요청에 따른 요청 리소스에 상응하는 후보노드들 중 우선순위를 이용한 스케줄링을 수행하는 확장 스케줄러; 및 상기 확장 스케줄러로부터의 요청에 따라 상기 후보노드들에 대 한 모니터링 정보를 상기 모니터링 서버로부터 취득하여 상기 후보노드들의 각 리소스 사용량을 예측하며, 예측 된 상기 리소스 사용량을 기반으로 상기 후보노드들에 대한 스케줄링 우선순위를 결정하여 상기 확장 스케줄러 에게 안내하는 스코어링 서버를 포함하는, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 시스템이 제 공된다. 여기서, 상기 스코어링 서버는 상기 외부API요청을 포함하는 누적된 요청 내역을 기반으로 설정된 예측시간 동 안의 예상요청을 예측하고, 상기 예상요청을 기반으로 상기 후보노드들을 선정할 수 있다. 또한, 상기 스코어링 서버는 상기 후보노드들의 모니터링 정보에 따른 사용량 트렌드에 대한 인공지능 분석에 의한 각 사용패턴을 분석하고, 상기 사용패턴을 이용하여 미래의 사용내역에 대한 상기 리소스 사용량을 예측할 수 있다. 또한, 상기 스코어링 서버는 스케줄링 처리 후 상기 후보노드들의 모니터링 정보에 따른 각 사용량 정보를 상기 인공지능 분석을 위한 학습데이터로 활용할 수 있다. 전술한 것 외의 다른 측면, 특징, 이점이 이하의 도면, 특허청구범위 및 발명의 상세한 설명으로부터 명확해질 것이다."}
{"patent_id": "10-2023-0067073", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 따르면, 노드의 네트워크 상태, 디스크 입출력 등의 보다 다양한 리소스 상황을 고려하여 스케줄링하 여 보다 안정된 운영이 가능하게 된다. 또한, 본 발명에 따르면, 각 노드의 현재상태를 기반으로 미래의 요청과 각 노드에서의 미래 사용량 등을 인공 지능을 이용하여 예측하여 스케줄링함으로써, 각 노드의 동적인 변화에 예측 대응할 수 있다."}
{"patent_id": "10-2023-0067073", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명은 다양한 변경을 가할 수 있고 여러 가지 실시예를 가질 수 있는 바, 특정 실시예들을 도면에 예시하고 상세한 설명에 상세하게 설명하고자 한다. 그러나 이는 본 발명을 특정한 실시 형태에 대해 한정하려는 것이 아 니며, 본 발명의 사상 및 기술 범위에 포함되는 모든 변경, 균등물 내지 대체물을 포함하는 것으로 이해되어야 한다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이 해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있 다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 제1, 제2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 상기 구성요소들은 상기 용어들에 의 해 한정되어서는 안 된다. 상기 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용된 다. 예를 들어, 후술될 제1 임계값, 제2 임계값 등의 용어는 실질적으로는 각각 상이하거나 일부는 동일한 값인 임계값들로 미리 지정될 수 있으나, 임계값이라는 동일한 단어로 표현될 때 혼동의 여지가 있으므로 구분의 편 의상 제1, 제2 등의 용어를 병기하기로 한다. 본 명세서에서 사용한 용어는 단지 특정한 실시예를 설명하기 위해 사용된 것으로, 본 발명을 한정하려는 의도 가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들 을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요 소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 또한, 각 도면을 참조하여 설명하는 실시예의 구성 요소가 해당 실시예에만 제한적으로 적용되는 것은 아니며, 본 발명의 기술적 사상이 유지되는 범위 내에서 다른 실시예에 포함되도록 구현될 수 있으며, 또한 별도의 설명 이 생략될지라도 복수의 실시예가 통합된 하나의 실시예로 다시 구현될 수도 있음은 당연하다. 또한, 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일하거나 관련된 참조 부호를 부여하고 이에 대한 중복되는 설명은 생략하기로 한다. 본 발명을 설명함에 있어서 관련된 공지 기술에 대한 구체적인 설명이 본 발명의 요지를 불필요하게 흐릴 수 있다고 판단되는 경우 그 상세한 설명을 생략한다. 도 1은 본 발명의 일 실시예에 따른 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링을 위한 전체 시스 템을 도시한 구성도이고, 도 2는 본 발명의 일 실시예에 따른 컨테이너 스케줄링 과정을 개략적으로 도시한 흐 름도이다. 컨테이너 오케스트레이션은 컨테이너의 배포, 관리, 확장, 네트워킹을 자동화한다. 수백 또는 수천 개의 Linux 컨테이너와 호스트를 배포하고 관리해야 하는 기업에서는 컨테이너 오케스트레이션을 활용할 수 있다. 컨테이너 오케스트레이션은 컨테이너를 사용하는 어떤 환경에서든 사용할 수 있다. 또한 재설계할 필요 없이 각기 다른 환경 전반에 동일한 애플리케이션을 배포하는 데에도 도움된다. 리눅스 컨테이너 기술은 줄여서 LXC라고 부른다. 하나의 호스트에서 여러 개의 격리된 리눅스 시스템을 실행하 는 가상화 기법이다. chroot 기술을 이용하여 독립된 컴퓨팅 운영 환경을 제공한다. 이러한 환경을 일반적으로 namespace라고 부른다. 그리고 cgroup 기술을 이용하여 시스템 자원 사용을 격리한다. 컨테이너 단위로 작업을 처리할 CPU 코어를 지정 할 수 있으며, 컨테이너가 사용하는 메모리 제한이 가능하다. 리눅스 컨테이너를 이용하는 장점은 자원을 동적 으로 확장/축소가 가능하다. 그리고 동적 관리 기능을 제공하는 다른 가상화 기술 대비 연산 오버헤드가 적다. CPU-Intensive한 연산 수행에 성능 측면에서 차별화된 장점을 보인다. 컨테이너 기반 자원 격리 기술 및 하이퍼 바이저는 당업자에게는 자명할 것이므로, 더욱 상세한 설명은 생략한다.도 1을 참조하면, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 시스템은 확장 스케줄러, 모니터 링 서버 및 스코어링 서버를 포함한다. 확장 스케줄러는 외부API요청에 의한 요청 리소스에 적합한 후보 노드들 중 우선순위를 이용한 노드를 선정 하여 컨테이너에 대한 스케줄링을 수행한다. 후보 노드들의 우선순위를 위한 스코어링은 스코어링 서버에서 수행한다. 즉, 확장 스케줄러는 스코어링 서버로 후보노드들의 우선순위를 요청하여 취득하고, 이를 기 반으로 선정되는 노드를 이용하여 외부API요청에 대한 컨테이너를 스케줄링한다. 스코어링 서버는 모니터링 서버로부터 취득되는 각 후보노드들의 모니터링 정보로서 CPU 사용량, 메모 리 사용량뿐 아니라, 네트워크 입출력(I/O)량 및 디스크 입출력(I/O)량을 이용하여 우선순위의 결정(이를 이용 하여 후보노드를 결정할 수도 있음)에 이용한다. 특히, 모니터링 정보를 기반으로 각 후보노드들의 미래의 리소 스 사용량을 예측하여 점수화(스코어링)한다. 리소스 사용량 예측 방식은 차후 상세히 설명하기로 한다. 모니터링 서버는 주기적으로 각 노드들로부터 모니터링 정보를 수집하여 저장 관리한다. 따라서, 스코어링 서버는 모니터링 서버로부터 필요한 노드들의 모니터링 정보를 취득한다. 도 2를 참조하면, 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 과정은, 먼저 외부API요청에 따른 요 청 리소스에 상응하는 후보노드들을 선정한다(S210). 후보노드는 확장 스케줄러 또는 스코어링 서버에 서 수행될 수 있다. 예를 들어, 확장 스케줄러는 스코어링 서버로 각 노드들의 스코어를 요청할 수 있 으며, 또는 확장 스케줄러가 후보노드들을 선정하고, 후보노드들에 대해서만 스코어를 스코어링 서버로 요청하는 방식일 수 있다. 스코어링 서버는 후보노드들의 리소스 사용량을 예측한다(S220). 스코어링 서버는 후보노드들에 대해 현재 시점을 기준으로 과거의 사용패턴을 분석하여 미래의 리소스 사용량을 예측하는 것이다. 이에 대해서는 도 5 및 도 6을 참조하여 상세하게 후술하기로 한다. 예측된 리소스 사용량을 기반으로 후보노드들의 우선순위에 대한 점수화를 수행하여 최종적으로 우선순위를 결 정한다(S230). 확장 스케줄러는 점수화된 우선순위를 이용하여 노드를 선정하여 컨테이너 스케줄링을 수행한다(S240). 도 3은 본 발명의 일 실시예에 따른 확장 스케줄러의 구성을 도시한 구성도이다. 먼저 도 3을 참조하면, 확장 스케줄러는 필터링에 의해 외부API요청에 따른 요청 리소스에 상응하는 노드들 을 후보노드로서 선정한다. 예를 들여, 요청 리소스를 운용할 수 있는 가용자원을 보유한 노드들이 후보노드로 서 선정될 수 있다. 그러면, 확장 스케줄러는 기본 스코어링에 의해 후보노드들에 대한 기본점수를 스코어링한다. 예를 들어, 가용자원이 많을 수록 보다 높은 점수가 스코어링될 수 있을 것이다. 그리고, 스코어링 서버로 미래의 리소 스 사용량에 대한 예측에 의한 추가적인 스코어링을 수행하도록 하여, 최종적으로 각 후보노드들의 우선순위에 대한 스코어링이 완료되면, 모든 스코어를 합산한 후 가장 높은 점수의 노드를 선정하여 컨테이너 배포를 위한 바인딩 작업을 수행한다. 도 4는 본 발명의 일 실시예에 따른 스코어링 서버에서의 노드 우선순위 스코어링 방식을 도시한 도면이고, 도 5 및 도 6은 본 발명의 실시예에 따른 노드의 리소스 사용량 예측 방식을 도시한 예시도들이다. 먼저 도 4를 참조하면, 스코어링 서버는 스케줄러 리스너로부터 수신된 API요청을 기반으로 헬스 체크 와 스코어 측정을 수행한다. 스코어 측정의 구간에서 모니터링 메트릭 데이터를 기반으로 패턴 분석, 리소스 사 용량을 예측하여 노드 우선순위를 결정한다. 컨테이너 오케스트레이션 환경에서 컨테이너 배포 시 모니터링 서버에서 각 노드의 메트릭 값을 수집하고, 수집된 메트릭 값을 사용량 트렌드 패턴 분석 모듈 및 사용량 예측 모듈에서 사용할 수 있도록 가공 및 전달한 다. 여기서, 헬스 체크 모듈은 모니터링 서버와의 통신을 확인하고, 상태 확인을 위한 장애 판단 및 서버 재가 동 등을 실시한다. 헬스 체크는 당업자에게는 자명할 것이므로 더욱 상세한 설명은 생략한다. 도 5를 함께 참조하면, 컨테이너 배포가 시작된 이전(트렌드 윈도우)의 메트릭 값을 수집하고, 컨테이너 배 포가 시작된 이후(리소스 예측 모델 학습 윈도우)의 메트릭 값을 수집한다. 각 윈도우 범위 안에서 동일한 시간 간격으로 메트릭을 수집하여 메트릭 레코드를 생성한다. 트렌드 윈도우의 값들이 모두 수집되면, 리소스 예측 윈도우의 값 수집을 기다리지 않고, 트렌드 패턴 분석 및 예측을 위해 메트릭 레코드를 전달하고, 리소스 예측 윈도우의 값들까지 모두 수집되면, 예측 모델 갱 신을 위해 전체 메트릭 레코드를 전달한다. 즉, 컨테이너를 배포(스케줄링)하기 전의 후보노드들의 모니터링 정보에 따른 사용량 트렌드를 기반으로 이후의 리소스 사용량을 예측하는 것인데, 사용량 트렌드에 대한 인공지능 분석에 의해 사용패턴을 분석하고, 분석된 사용패턴을 이용하여 미래의 리소스 사용량을 예측하는 것이다. 다시 말해, 후보노드들의 모니터링 정보에 따른 사용량 트렌드에 대한 인공지능 분석에 의한 각 사용패턴을 분석하고, 사용패턴을 이용하여 미래의 사용내역에 대한 리소스 사용량을 예측한다. 도 6을 참조하면, CPU 사용량, 메모리 사용량, 디스크 사용량, 네트워크 사용량 각각에 대해 예측하고 스코어링 을 수행함으로써, 각 후보노드들에 대한 우선순위 점수화를 진행한다. 종래의 스케줄링 방식에서는 CPU와 메모 리 사용량만을 이용하였는데 비해, 본 실시예에 따르면 디스크 입출력 사용량과 네트워크 입출력 사용량을 더 확인하고 예측함으로써 실질적으로 노드에서 네트워크 부하 등에 의한 문제 발생을 사전에 방지할 수 있다. 본 실시예에 따르면, 노드의 사용량이 급격하게 증가하는 상황이 예측되거나, 노드의 사용량이 불균형하여 사용자 의 어플리케이션을 포함한 컨테이너를 안정적인 노드에 배포되기 원할 시, 해당 스케줄러를 지정하여 현재 안정적이고, 또한 리소스 트랜드 분석으로 안정적이라고 예측되는 노드에 컨테이너를 배포한다. 그리고, 다시 도 5를 참조하면 스케줄링 처리 후 후보노드들의 모니터링 정보에 따른 각 사용량 정보(즉, 예측 값이 아닌 실제 사용량 정보)를 인공지능 분석을 위한 학습데이터로 활용한다. 여기서, 일례에 따르면, 실제의 사용량 정보와 예측된 리소스 사용량을 비교하여, 가장 유사한 것과 가장 상이한 것에 가중치를 더하여 학습데 이터로 활용할 수도 있다. 본 실시예에 따르면, 매번 리소스 사용량을 예측한 결과를 바로 인공지능을 위한 학 습데이터로 활용함으로써 해당 시스템에 적응화된 보다 정확한 리소스 사용량을 예측할 수 있게 된다. 도 7은 본 발명의 일 실시예에 따른 스코어링 서버에서의 예상요청을 이용한 컨테이너 스케줄링 과정을 도시한 흐름도이다. 스코어링 서버는 누적된 요청 내역을 기반으로 예측시간 동안의 예상요청을 예측한다(S710). 예를 들어, 요청이력을 DB화하여 저장하고, 예를 들어 한시간 단위(또는 하루 단위 등)의 이력정보를 기반으로 현재의 요청 내역을 이용하여 금일 예상되는 예상요청을 예측하는 것이다. 이해의 편의를 위한 예를 들면, 현재 의 요청 내역이 100인 경우 이후 한시간 동안의 예상요청은 1000, 현재의 요청 내역이 50이면 예상요청은 900으 로 예측될 수 있다. 예상요청을 기반으로 후보노드들을 선정하고 스코어링을 수행한다(S720). 예를 들어, 현재의 요청 내역이 가용 한 노드들 중 그 가용리소스의 합이 예상요청보다 많으면서도 가장 유사한 노드들의 집합을 후보노드로서 선정 한다. 따라서, 예상되는 리소스가 가용하면서도 불필요한 가용자원이 낭비되지 않도록 하여 효율적인 운영이 가 능해진다. 후보노드들이 선정되면 각각의 리소스 사용량을 예측하여 스코어링함으로써, 우선순위에 따른 노드에 대한 스케 줄링을 수행한다(S730). 본 실시예에서는 스코어링 서버가 예상요청을 예측하고 그에 따라 후보노드들을 선정하는 것을 예로 들었으 나, 다른 실시예에 따르면 상술한 기능은 확장 스케줄러에 의해서 수행될 수도 있다. 상술한 본 발명에 따른 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법을 수행하도록 하는 컴퓨터 -판독 가능 매체에 저장된 컴퓨터 프로그램이 제공될 수 있다. 또한, 상술한 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링 방법은 컴퓨터로 읽을 수 있는 기록 매체 에 컴퓨터가 읽을 수 있는 코드로서 구현되는 것이 가능하다. 컴퓨터가 읽을 수 있는 기록매체로는 컴퓨터 시스 템에 의하여 해독될 수 있는 데이터가 저장된 모든 종류의 기록 매체를 포함한다. 예를 들어, ROM(Read OnlyMemory), RAM(Random Access Memory), 자기 테이프, 자기 디스크, 플래쉬 메모리, 광 데이터 저장장치 등이 있 을 수 있다. 또한, 컴퓨터가 읽을 수 있는 기록매체는 컴퓨터 통신망으로 연결된 컴퓨터 시스템에 분산되어, 분 산방식으로 읽을 수 있는 코드로서 저장되고 실행될 수 있다. 또한, 상기에서는 본 발명의 바람직한 실시예를 참조하여 설명하였지만, 해당 기술 분야에서 통상의 지식을 가 진 자라면 하기의 특허 청구의 범위에 기재된 본 발명의 사상 및 영역으로부터 벗어나지 않는 범위 내에서 본 발명을 다양하게 수정 및 변경시킬 수 있음을 이해할 수 있을 것이다."}
{"patent_id": "10-2023-0067073", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 컨테이너 오케스트레이션 환경에서의 컨테이너 스케줄링을 위한 전체 시스 템을 도시한 구성도. 도 2는 본 발명의 일 실시예에 따른 컨테이너 스케줄링 과정을 개략적으로 도시한 흐름도. 도 3은 본 발명의 일 실시예에 따른 확장 스케줄러의 구성을 도시한 구성도. 도 4는 본 발명의 일 실시예에 따른 스코어링 서버에서의 노드 우선순위 스코어링 방식을 도시한 도면. 도 5 및 도 6은 본 발명의 실시예에 따른 노드의 리소스 사용량 예측 방식을 도시한 예시도들.도 7은 본 발명의 일 실시예에 따른 스코어링 서버에서의 예상요청을 이용한 컨테이너 스케줄링 과정을 도시한 흐름도."}
