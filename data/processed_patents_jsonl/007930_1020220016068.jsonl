{"patent_id": "10-2022-0016068", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0119832", "출원번호": "10-2022-0016068", "발명의 명칭": "태스크에 메모리 자원을 할당하는 전자 장치 및 전자 장치의 동작 방법", "출원인": "삼성전자주식회사", "발명자": "홍경환"}}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,메모리;메모리 자원 할당 하드웨어; 및프로세서를 포함하고,상기 프로세서는태스크의 응답 시간을 측정하고,상기 태스크에 대한 메모리 자원 할당과 관련된 정보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간정보를 포함하는 적어도 하나의 프로파일을 수집하고,상기 프로파일에 기반하여, 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하고,상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당 정보에 기반하여 상기 태스크에 메모리 자원 할당을 설정하고,상기 태스크의 정보와 상기 설정된 자원 할당 정보에 기반하여 상기 메모리 자원 할당 하드웨어를 제어하고,상기 메모리 자원 할당 하드웨어는상기 설정된 자원 할당 정보에 기반하여 상기 태스크에 대한 메모리 자원을 할당하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,메모리 자원 모니터링 하드웨어를 더 포함하고,상기 프로세서는 상기 프로파일을 수집하기 이전에,상기 메모리 자원 모니터링 하드웨어로부터 상기 태스크의 캐시 접근 횟수 및 메모리 대역폭을 획득하고,상기 캐시 접근 횟수가 지정된 값 이상이거나 및/또는 상기 메모리 대역폭이 지정된 값 이상임에 대응하여 상기태스크에 대한 응답 시간을 측정하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 프로세서는상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정할 때,상기 적어도 하나의 프로파일 중에서 상기 태스크의 응답 시간이 가장 적은 프로파일에 포함된 메모리 자원 할당 정보에 기반하여 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는공개특허 10-2023-0119832-3-전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,상기 프로세서는상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정할 때,지정된 알고리즘을 이용하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하고,상기 지정된 알고리즘은 적어도 하나의 프로파일을 머신 러닝으로 학습한 모델에 기반하고,상기 프로세서는상기 수집한 프로파일의 개수가 지정된 값 이상이고,상기 전자 장치가 아이들(idle) 상태임에 대응하여,상기 수집한 프로파일에 기반하여 상기 지정된 알고리즘을 업데이트하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 프로세서는복수의 태스크에 있어서, 상기 복수의 태스크에 각각 설정된 메모리 자원 할당 정보가 동일한 적어도 하나의 태스크에 대하여 그룹을 생성하고,상기 그룹의 식별 정보 및 상기 설정된 메모리 자원 할당 정보를 상기 메모리 자원 할당 하드웨어에 전송하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5 항에 있어서,상기 프로세서는상기 태스크의 식별 정보가 변경됨에 대응하여,상기 태스크가 포함된 상기 그룹의 식별 정보와 상기 변경된 태스크의 식별 정보를 상기 메모리 자원 할당 하드웨어에 전송하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "전자 장치의 동작 방법에 있어서,태스크의 응답 시간을 측정하는 동작;상기 태스크에 대한 메모리 자원 할당과 관련된 정보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간정보를 포함하는 적어도 하나의 프로파일을 수집하는 동작;상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는 동작;공개특허 10-2023-0119832-4-상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당 정보에 기반하여 상기 태스크에 메모리 자원 할당을 설정하는 동작;상기 태스크의 정보와 상기 설정된 자원 할당 정보에 기반하여 메모리 자원 할당 하드웨어를 제어하는 동작을포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7 항에 있어서,상기 프로파일을 수집하기 이전에, 메모리 자원 모니터링 하드웨어로부터 상기 태스크의 캐시 접근 횟수 및 메모리 대역폭을 획득하는 동작; 및상기 캐시 접근 횟수가 지정된 값 이상이거나 및/또는 상기 메모리 대역폭이 지정된 값 이상임에 대응하여 상기태스크에 대한 응답 시간을 측정하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 7 항에 있어서,상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는동작은,상기 적어도 하나의 프로파일 중에서 상기 태스크의 응답 시간이 가장 적은 프로파일에 포함된 메모리 자원 할당 정보에 기반하여 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는 동작을 포함하는,전자 장치의 동작 방법."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 7 항에 있어서,상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는동작은,지정된 알고리즘을 이용하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는 동작을 포함하고,상기 지정된 알고리즘은 적어도 하나의 프로파일을 머신 러닝으로 학습한 모델에 기반하고,상기 동작 방법은상기 수집한 프로파일의 개수가 지정된 값 이상이고, 상기 전자 장치가 아이들(idle) 상태임에 대응하여, 상기수집한 프로파일에 기반하여 상기 지정된 알고리즘을 업데이트하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 7 항에 있어서,복수의 태스크에 있어서, 상기 복수의 태스크에 각각 설정된 메모리 자원 할당 정보가 동일한 적어도 하나의 태공개특허 10-2023-0119832-5-스크에 대하여 그룹을 생성하는 동작; 및상기 그룹의 식별 정보 및 상기 설정된 메모리 자원 할당 정보를 상기 메모리 자원 할당 하드웨어에 전송하는동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서,상기 태스크의 식별 정보가 변경됨에 대응하여,상기 태스크가 포함된 상기 그룹의 식별 정보와 상기 변경된 태스크의 식별 정보를 상기 메모리 자원 할당 하드웨어에 전송하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "전자 장치에 있어서,메모리;메모리 자원 할당 하드웨어; 및프로세서를 포함하고,상기 프로세서는태스크의 응답 시간을 측정하는 응답시간 모니터링 모듈;상기 태스크에 대한 메모리 자원 할당과 관련된 정보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간정보를 포함하는 적어도 하나의 프로파일을 수집하는 자원 할당 프로파일 테이블;상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는 메모리자원 예측 모듈; 및상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당 정보에 기반하여 상기 태스크에 메모리 자원 할당을 설정하고, 상기 태스크의 정보와 상기 설정된 자원 할당 정보를 상기 메모리 자원 할당 하드웨어에 전송하는 메모리 자원 할당 모듈;을 포함하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 13 항에 있어서,메모리 자원 모니터링 하드웨어를 더 포함하고,상기 프로세서는상기 프로파일을 수집하기 이전에, 상기 메모리 자원 모니터링 하드웨어로부터 상기 태스크의 캐시 접근 횟수및 메모리 대역폭을 획득하는 태스크 분류 모듈;을 더 포함하고,상기 응답시간 모니터링 모듈은 상기 캐시 접근 횟수가 지정된 값 이상이거나 및/또는 상기 메모리 대역폭이 지정된 값 이상임에 대응하여 상기 태스크에 대한 응답 시간을 측정하는공개특허 10-2023-0119832-6-전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 13 항에 있어서,상기 메모리 자원 예측 모듈은상기 적어도 하나의 프로파일 중에서 상기 태스크의 응답 시간이 가장 적은 프로파일에 포함된 메모리 자원 할당 정보에 기반하여 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 13 항에 있어서,상기 메모리 자원 예측 모듈은지정된 알고리즘을 이용하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하고,상기 지정된 알고리즘은 적어도 하나의 프로파일을 머신 러닝으로 학습한 모델에 기반하고,상기 메모리 자원 예측 모듈은상기 자원 할당 프로파일 테이블이 수집한 상기 프로파일의 개수가 지정된 값 이상이고,상기 전자 장치가 아이들(idle) 상태임에 대응하여,상기 수집한 프로파일에 기반하여 상기 지정된 알고리즘을 업데이트하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 13 항에 있어서,상기 메모리 자원 할당 모듈은복수의 태스크에 있어서, 상기 복수의 태스크에 각각 설정된 메모리 자원 할당 정보가 동일한 적어도 하나의 태스크에 대하여 그룹을 생성하고,상기 그룹의 식별 정보 및 상기 설정된 메모리 자원 할당 정보를 상기 메모리 자원 할당 하드웨어에 전송하는전자 장치."}
{"patent_id": "10-2022-0016068", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 17 항에 있어서,태스크 그룹 디렉토리를 더 포함하고,상기 메모리 자원 할당 모듈은상기 그룹의 식별 정보 및 상기 설정된 메모리 자원 할당 정보를 상기 태스크 그룹 디렉토리에 저장하고,상기 태스크의 식별 정보가 변경됨에 대응하여,상기 태스크 그룹 디렉토리에 저장된 상기 태스크가 포함된 상기 그룹의 식별 정보와 상기 변경된 태스크의 식별 정보를 상기 메모리 자원 할당 하드웨어에 전송하는공개특허 10-2023-0119832-7-전자 장치."}
{"patent_id": "10-2022-0016068", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예에 따른 전자 장치에서, 전자 장치는, 메모리, 메모리 자원 할당 하드웨어 및 프로세서를 포함하고, 상기 프로세서는 태스크의 응답 시간을 측정하고, 상기 태스크에 대한 메모리 자원 할당과 관련된 정 보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간 정보를 포함하는 적어도 하나의 프로파일을 수집하 (뒷면에 계속)"}
{"patent_id": "10-2022-0016068", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 문서에 개시된 다양한 실시예들은, 태스크에 메모리 자원을 할당하는 전자 장치 및 전자 장치의 동작 방법에 관한 것이다. 구체적으로, 본 문서에 개시된 다양한 실시예들은, 응답 시간이 최소가 되도록 하는 최적의 메모 리 자원을 할당하는 전자 장치 및 전자 장치의 동작 방법에 관한 것이다."}
{"patent_id": "10-2022-0016068", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근의 디지털 디바이스는 프로세서 및 메모리 등의 기술적 발전으로 인하여, 제조사에서 제공하는 어플리케이 션 이외에 다양한 어플리케이션을 설치할 수 있다. 또한, 상기 디지털 디바이스는 다수의 어플리케이션을 동시 에 실행할 수 있다. 기존 컴퓨팅 구조에는 캐시(cache)나 메인 메모리(예 : DRAM)를 포함한 메모리 자원이 있고, 여러 CPU 코어들과 보조 프로세서(예 : GPU, DSP, NPU)들이 메모리 자원들을 공유하여 사용한다. 그러나, 이러한 프로세서들의 종 류와 코어 수가 늘어남에 따라 메모리 자원에 대한 경쟁 빈도가 높아져서, 캐시 적중률(cache hit ratio)가 낮 아지거나 메모리 대역폭(memory bandwidth)로 인해 프로세서의 성능을 활용하지 못하는 문제가 발생할 수 있다. 기존 마이크로-아키텍처(micro-architecture)에서는 복수의 태스크들 또는 보조 프로세서들이 사용하는 메모리 자원을 할당하고, 특정 태스크나 보조 프로세서의 메모리 자원 사용량(캐시 사용량, 메모리 대역폭 사용량)을 모니터링하는 기술인 메모리 파티셔닝(memory partitioning) 기술이 적용되었다. 메모리 파티셔닝 기술에는 RDT(Resource Director Technology), Platform QoS, MPAM (Memory Partitioning and Monitoring)의 예시가 있 다. 한편, 모바일 환경에서는 각 태스크의 실행 시간이 서버 환경에 비해 짧고, 태스크 구동 초반의 태스크 시작 시 간(task launch time)이 사용자 경험을 결정하기 때문에, 모바일 환경에서는 태스크 구동 초기부터 적절한 메모 리 자원을 할당하는 것이 중요하다. 따라서, 태스크 구동 이후의 피드백 정보를 기반으로 메모리 자원 할당을 하는 것은 사용자 경험의 향상을 이끌어내기 어렵다. 또한, 모바일 환경에서는 모든 태스크의 캐시 적중률(cache hit ratio)를 높이는 것이 응답 시간 향상에 직결되 지 않는다. 예를 들어, 포어그라운드 태스크(foreground task) 1개와 백그라운드 태스크(background task) 1개 가 동시에 동작하고, 두 태스크는 모두 메모리-인텐시브(memory-intensive) 태스크라고 가정한다. 이 경우, 포 어그라운드 태스크의 캐시 할당량을 늘려서 캐시 적중률를 높이면 응답 시간을 향상시킬 수 있지만, 백그라운드 태스크의 캐시 적중률를 높이는 것은 오히려 응답 시간을 악화시킬 수 있다."}
{"patent_id": "10-2022-0016068", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "기존 마이크로-아키텍쳐 레벨의 메모리 파티셔닝(memory partitioning) 기술은 메모리 자원 할당에 OS와 애플리 케이션의 동작을 고려하지 않는다. 한편, 모바일 환경은 태스크 구동 초기부터 적절한 메모리 자원을 할당하는 것이 중요하며, 모든 태스크의 캐시 적중률(cache hit ratio)를 높이는 것이 응답 시간 향상에 직결되지 않을 수 있다. 본 발명은 상기와 같은 문제점을 해결하기 위하여, OS 레벨에서의 메모리 파티셔닝 기술을 제안하며, 모바일 환 경에서 동작하는 태스크들의 특성을 고려하여 메모리 자원을 할당하기 위한 기술에 관한 것이다. 본 문서에서 이루고자 하는 기술적 과제는 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술적 과제들은 아래의 기재로부터 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게이해될 수 있을 것이다."}
{"patent_id": "10-2022-0016068", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 문서에 개시된 다양한 실시예에 따른 전자 장치는, 메모리, 메모리 자원 할당 하드웨어 및 프로세서를 포함 하고, 상기 프로세서는 태스크의 응답 시간을 측정하고, 상기 태스크에 대한 메모리 자원 할당과 관련된 정보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간 정보를 포함하는 적어도 하나의 프로파일을 수집하고, 상기 프로파일에 기반하여, 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정 하고, 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당 정보에 기반하여 상기 태스크에 메모리 자원 할 당을 설정하고, 상기 태스크의 정보와 상기 설정된 자원 할당 정보에 기반하여 상기 메모리 자원 할당 하드웨어 를 제어하고, 상기 메모리 자원 할당 하드웨어는 상기 설정된 자원 할당 정보에 기반하여 상기 태스크에 대한 메모리 자원을 할당할 수 있다. 본 문서에 개시된 다양한 실시예에 따른 전자 장치의 동작 방법은, 태스크의 응답 시간을 측정하는 동작, 상기 태스크에 대한 메모리 자원 할당과 관련된 정보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간 정보 를 포함하는 적어도 하나의 프로파일을 수집하는 동작, 상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는 동작, 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할 당 정보에 기반하여 상기 태스크에 메모리 자원 할당을 설정하는 동작, 상기 태스크의 정보와 상기 설정된 자원 할당 정보에 기반하여 상기 메모리 자원 할당 하드웨어를 제어하는 동작을 포함할 수 있다. 본 문서에 개시된 다양한 실시예에 따른 전자 장치는, 메모리, 메모리 자원 할당 하드웨어, 프로세서를 포함하 고, 상기 프로세서는 태스크의 응답 시간을 측정하는 응답시간 모니터링 모듈, 상기 태스크에 대한 메모리 자원 할당과 관련된 정보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간 정보를 포함하는 적어도 하나의 프로파일을 수집하는 자원 할당 프로파일 테이블, 상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는 메모리 자원 예측 모듈, 및 상기 응답 시간이 최소가 되도록 하는 메 모리 자원 할당 정보에 기반하여 상기 태스크에 메모리 자원 할당을 설정하고, 상기 태스크의 정보와 상기 설정 된 자원 할당 정보를 상기 메모리 자원 할당 하드웨어에 전송하는 메모리 자원 할당 모듈을 포함할 수 있다."}
{"patent_id": "10-2022-0016068", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "다양한 실시예에 따른 전자 장치는, 응답 시간에 대한 피드백에 기반하여 메모리-인텐시브 태스크(memory- intensive task)의 메모리 자원을 할당할 수 있다. 다양한 실시예에 따른 전자 장치는, 복수의 태스크 중에서 응답 시간에 영향을 미치는 태스크에 더 많은 메모리 자원을 할당하고, 응답 시간에 영향을 미치지 않는 태스크에는 메모리 자원을 적은 메모리 자원을 할당하여, 전 자 장치 전체의 응답 시간을 향상시킬 수 있다."}
{"patent_id": "10-2022-0016068", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(globalnavigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobileedge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는, 다양한 실시예에 따른 전자 장치의 블록도이다. 도 2를 참조하면, 전자 장치 (예 : 도 1의 전자 장치) 는 프로세서(예: 도 1의 프로세서) 및/또는 메모리(예: 도 1의 메모리)를 포함할 수 있다. 도 2에 포함된 구성 요소는 전자 장치에 포함된 구성들의 일부에 대한 것이며 전자 장치는 이 밖에도 도 1에 도시된 것과 같이 다양한 구성요소를 포함할 수 있다. 다양한 실시예에 따른 메모리는, 캐시 메모리 및/또는 메인 메모리를 포함할 수 있다. 일 실시예에 따른 메모리는, 태스크가 요청하는 데이터를 일시적으로 또는 비일시적으로 저장할 수 있다. 다양한 실시예에 따른 프로세서는 태스크에 대하여 최적의 메모리 자원을 할당할 수 있다. 일 실시예에 따른 프로세서는 태스크의 캐시-인텐시브 및/또는 메모리-인텐시브 여부를 확인할 수 있다. 예를 들어, 프로세서는, 메모리 자원 모니터링 하드웨어(예 : 도 3 의 메모리 자원 모니터링 하드웨어 )로부터 태스크의 캐시 접근 횟수(cache access count) 및 메모리 대역폭(memory bandwidth)과 관련된 정보를 획득할 수 있다. 프로세서는, 지정된 주기로 캐시 접근 횟수(cache access count) 및 메모리 대역 폭(memory bandwidth)를 수집할 수 있다. 예를 들어, 프로세서는 태스크의 캐시 접근 횟수(cache access count) 및/또는 메모리 대역폭(memory bandwidth)에 기반하여, 태스크를 캐시-인텐시브(cache-intensive) 및/또는 메모리-인텐시브(memory- intensive)로 분류할 수 있다. 일 실시예에 따른 프로세서는 자원 할당 프로파일(RAP, resource allocation profile)을 수집할 수 있다. 예를 들어, 프로세서는 포어그라운드 태스크가 캐시-인센티브(cache-intensive) 및/또는 메모리-인센티브 (memory-intensive)임에 대응하여 포어그라운드 태스크의 응답 시간을 측정할 수 있다. 예를 들어, 프로세서는 자원 할당 프로파일 테이블(예 : 도 3의 자원 할당 프로파일 테이블)에 자원 할당 프로파일(RAP)을 저장할 수 있다. 자원 할당 프로파일(RAP)은 특정 태스크에 대하여 할당된 메모리 자원과 관련된 정보 및 메모리 자원 할당에 따른 포어그라운드 태스크의 응답 시간과 관련된 정보를 포함할 수 있다. 일 실시예에 따른 프로세서는 최적의 메모리 자원 할당(MRA, Memory Resource Allocations)을 예측할 수 있다. 예를 들어, 프로세서는 지정된 룰에 기반한 알고리즘을 이용하여 최적의 메모리 자원 할당(optimal MRA)를 결정할 수 있다. 예를 들어, 프로세서는 태스크의 적어도 하나의 자원 할당 프로파일(RAP) 중에서, 포어그라운 드 태스크의 응답 시간이 가장 작은 메모리 자원 할당(MRA) 정보에 기반하여 최적의 메모리 자원 할당(optimal MRA)으로 결정할 수 있다. 일 실시예에 따른 프로세서는 태스크에 대하여 메모리 자원 할당을 설정할 수 있다. 예를 들어, 프로세서는 최적의 메모리 자원 할당(optimal MRA)을 태스크의 메모리 자원 할당(MRA)으로 설 정할 수 있다. 예를 들어, 프로세서는 메모리 자원 할당(MRA)이 동일하게 설정된 태스크들을 묶어서 태스크 그룹을 생성 할 수 있다. 예를 들어, 메모리 자원 할당 모듈은, 태스크의 메모리 자원 할당(MRA) 정보에서, 태스크에 할당된 캐시 용량(cache capacity), 메모리 대역폭(memory bandwidth) 및 우선순위(priority)가 동일한 태스크 들을 하나의 그룹으로 묶어 태스크 그룹을 생성하고, 생성한 태스크 그룹에 태스크 그룹 ID(task group ID)를 부여할 수 있다. 예를 들어, 프로세서는 태스크 그룹 디렉토리(예 : 도 3의 태스크 그룹디렉토리)에 태스크 그룹 ID와 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 저장할 수 있다.예를 들어, 프로세서는 메모리 자원 할당 하드웨어(예 : 도 3 의 메모리 자원 할당 하드웨어)에 태 스크 그룹 ID 및 메모리 자원 할당(MRA) 설정이 대응되는 정보(map of task group ID - MRA map)를 전달할 수 있다. 일 실시예에 따른 프로세서는 설정된 메모리 자원 할당을 적용할 수 있다. 예를 들어, 프로세서는 태스크 스위치 이벤트(task switch event)가 발생함에 대응하여, CPU 스케줄러(예 : 도 3의 CPU 스케줄러)에 의하여 변경된 태스크 ID를 확인하고, 태스크 ID가 변경된 태스크의 태스크 그 룹 ID를 확인하여 태스크 그룹 ID와 변경된 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 태 스크 그룹 디렉토리에 저장할 수 있다. 예를 들어, 프로세서는 태스크 그룹 ID와 변경된 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 메모리 자원 할당 하드웨어에 전달할 수 있다. 도 3은, 다양한 실시예에 따른 메모리 파티셔닝 컨트롤러의 구성 및 메모리 파티셔닝 컨트롤러와 관 련된 구성을 도시한 도면이다. 다양한 실시예에 따른 메모리 자원 모니터링 하드웨어는 CPU 코어 별및/또는 태스크 그룹 별 할당된 메모 리 자원과 관련된 정보(예 : cache access count, memory bandwidth)를 모니터링할 수 있다. 일 실시예에 따른 메모리 자원 모니터링 하드웨어는, 태스크 분류 모듈과 같은 OS-레벨의 모듈 또는 사용자-레벨의 태스크가 레지스터를 주기적으로 읽음으로써 해당 정보를 제공할 수 있다. 일 실시예에 따른 메모리 자원 모니터링 하드웨어는, 메모리 자원 파티셔닝 관리와 관련된 프로세서 내부 의 모듈일 수 있고, 프로세서에 의하여 처리되는 명령어들에 의하여 제어될 수 있다. 다양한 실시예에 따른 메모리 자원 할당 하드웨어는 태스크 그룹에 대하여 메모리 자원을 할당할 수 있다. 일 실시예에 따른 메모리 자원 할당 하드웨어는, 메모리 자원 할당 모듈과 같은 OS-레벨의 모듈이 태스크 그룹 ID 및 메모리 자원 할당(MRA) 정보를 특정 레지스터에 기록함에 따라, 해당 태스크 그룹의 메모리 자원 할당량을 미리 보관할 수 있다. 일 실시예에 따른 메모리 자원 할당 하드웨어는, 태스크 그룹 디렉토리 와 같은 OS-레벨 모듈이 특 정 레지스터에 CPU 코어가 실행 중인 현재 태스크 그룹 ID를 기록함으로써, 해당 태스크 그룹에 맞는 메모리 자 원을 할당할 수 있다.일 실시예에 따른 메모리 자원 할당 하드웨어는 메모리 자원 파티셔닝 관리와 관련 된 프로세서 내부의 모듈일 수 있고, 프로세서에 의하여 처리되는 명령어들에 의하여 제어될 수 있다.다양한 실 시예에 따르면, 메모리 파티셔닝 컨트롤러는 태스크에 대하여 응답 시간을 최소로 하는 최적의 메모리 자 원 할당을 결정하는 모듈로, 메모리 자원 모니터링 하드웨어로부터 획득한 태스크별 할당된 메모리 자원 과 관련된 정보에 기반하여, 태스크에 대한 메모리 자원 할당 정보를 설정하여 메모리 자원 할당 하드웨어 에 전달할 수 있다. 다양한 실시예에 따르면, 메모리 파티셔닝 컨트롤러는 태스크 분류 모듈, 응답시간 모니터링 모듈 , 자원 할당 프로파일 테이블, 최적 메모리 자원 예측 모듈, 메모리 자원 할당 모듈 및/또 는 태스크 그룹 디렉토리를 포함할 수 있다. 다양한 실시예에 따른 태스크 분류 모듈(memory-intensive task classifier, 310)은, 태스크를 캐시-인텐시브 (cache-intensive) 및/또는 메모리-인텐시브(memory-intensive)로 분류할 수 있다. 캐시-인텐시브(cache- intensive) 태스크는 캐시 접근 횟수(cache access count)가 지정된 값 이상인 태스크일 수 있다. 메모리-인텐 시브(memory-intensive) 태스크는 메모리 대역폭(memory bandwidth)이 지정된 값 이상인 태스크일 수 있다 일 실시예에 따른 태스크 분류 모듈은, 메모리 자원 할당 모니터링 하드웨어로부터 태스크의 캐시 접근 횟수(cache access count) 및 메모리 대역폭(memory bandwidth)과 관련된 정보를 획득할 수 있다. 태스크 분류 모듈은 지정된 주기로 캐시 접근 횟수(cache access count) 및 메모리 대역폭(memory bandwidth)를 수집할 수 있다. 일 실시예예 따른 태스크 분류 모듈은, 태스크의 캐시 접근 횟수(cache access count) 및 메모리 대역폭 (memory bandwidth)에 기반하여, 태스크를 캐시-인텐시브(cache-intensive) 및/또는 메모리-인텐시브(memory-intensive)로 분류할 수 있다. 일 실시예에 따른 태스크 분류 모듈은, 실행 중인 모든 태스크에 대하여 캐시-인텐시브(cache-intensive) 및/또는 메모리-인텐시브(memory-intensive)로 분류할 수 있다. 일 실시예에 따르면, 태스크 분류 모듈은 응답 시간 모니터링 모듈에 태스크가 캐시-인텐시브(cache- intensive)인지 여부 및/또는 메모리-인텐시브(memory-intensive)인지 여부를 지시하는 정보(task metadata)를 전달할 수 있다. 일 실시예에 따르면, 태스크 분류 모듈은 자원 할당 프로파일 테이블에 태스크가 캐시-인텐시브(cache- intensive)인지 여부 및/또는 메모리-인텐시브(memory-intensive)인지 여부를 지시하는 정보(task metadata)를 저장할 수 있다. 다양한 실시예에 따른 응답 시간 모니터링 모듈(response time monitoring module, 320)은, 포어그라운드 태스 크(foreground task)의 응답 시간(response time)을 측정하는 모듈일 수 있다. 일 실시예에 따르면, 응답 시간 모니터링 모듈은, 태스크 실행 처리 완료 이벤트 발생(task launch finish evnet) 및/또는 응답 시간 모니터링 요청 커맨드(RAP collection command)에 의하여 동작을 시작할 수 있다. 일 실시예에 따르면, 응답 시간(response time)은 태스크가 데이터를 요청한 시간으로부터 태스크를 처리한 시 간까지의 시간일 수 있다. 응답 시간은 메모리 이외에 영향을 줄 수 있는 요소(예 : 네트워크 상태, 메모리 이 외의 하드웨어 인터럽트와 같은 노이즈)를 고려하지 않은 메모리 자원 할당에 기반한 응답 시간을 의미할 수 있 다. 일 실시예에 따르면, 응답 시간 모니터링 모듈은, 응답 시간에 메모리 이외에 영향을 줄 수 있는 요소(예 : 네트워크 상태(약전계, 기지국 문제 등등)에 따른 응답시간 지연 및/또는 하드웨어 인터럽트 처리시간 지연 (외부 전기적 환경에 따른 H/W오류)으로 인한 응답시간 지연)가 포함됨에 대응하여, 해당 데이터를 사용하지 않 을 수 있다. 일 실시예에 따르면, 응답 시간 모니터링 모듈은, 태스크 분류 모듈로부터 획득한 정보(task metadata)에 기반하여 태스크가 캐시-인센티브(cache-intensive) 및/또는 메모리-인센티브(memory- intensive)인지 여부를 확인할 수 있다. 일 실시예에 따르면, 응답 시간 모니터링 모듈은 포어그라운드 태스크가 캐시-인센티브(cache-intensive) 및/또는 메모리-인센티브(memory-intensive)임에 대응하여 포어그라운드 태스크의 응답 시간을 측정하고, 태스 크의 응답 시간을 자원 할당 프로파일 테이블에 전달할 수 있다. 다양한 실시예에 따른 자원 할당 프로파일 테이블(resource allocation profile storage, 330)는 자원 할당 프 로파일(RAP, resource allocation profile)을 저장하는 데이터베이스 모듈일 수 있다. 자원 할당 프로파일 (RAP)은 특정 태스크에 대하여 할당된 메모리 자원과 관련된 정보 및 메모리 자원 할당에 따른 포어그라운드 태 스크의 응답 시간과 관련된 정보를 포함할 수 있다. 일 실시예에 따르면, 자원 할당 프로파일(RAP)은, 태스크의 메모리 자원 할당(MRA) 정보, 응답 시간, 메타 데이 터(task metadata)와 관련된 정보를 포함할 수 있다. 메모리 자원 할당(MRA) 정보는 태스크(task ID)에 할당된 메모리 자원과 관련된 정보를 포함할 수 있다. 예를 들어, 메모리 자원 할당(MRA) 정보는 태스크에 할당된 캐시 용량(cache capacity), 메모리 대역폭(memory bandwidth) 및/또는 우선순위(priority)를 포함할 수 있다. 응답 시간(response time)은 포어그라운드 태스크에 대하여 메모리 자원 할당(MRA)에 따른 응답 시간을 지시하 는 정보를 포함할 수 있다. 메타 데이터(task metadata)는, 태스크의 특성(예 : 태스크의 포어그라운드/백그라운드 (foreground/background) 구분, 캐시-인텐시브(cache-intensive) 여부, 메모리-인텐시브(memory-intensive) 여 부)을 지시하는 정보를 포함할 수 있다. 자원 할당 프로파일(RAP) 테이블는, 태스크 분류 모듈로부터 태스크 별 메타 데이터(task ID, task metadata)를, 응답 시간 모니터링 모듈로부터 태스크 별 응답 시간(task ID, response time)을, 메모리 자원 할당 모듈로부터 태스크 별 메모리 자원 할당 정보(task ID, MRA)를 획득할 수 있다다양한 실시예에 따른 최적 메모리 자원 예측 모듈(Optimal Memory Resource Predictor, 340)은 포어그라운드 태스크 및/또는 백그라운드 태스크에 대한 최적의 메모리 자원 할당(optimal MRA)을 예측하는 모듈일 수 있다. 최적의 메모리 자원 할당(optimal MRA)은, 태스크에 대한 처리 성능 지표 수준이 가장 높은(예 : 응답 시간이 가장 낮은) 경우의 메모리 자원 할당 설정일 수 있다. 일 실시예에 따르면, 최적 메모리 자원 예측 모듈은 태스크 실행(task execution event) 및/또는 메모리 자원 할당 요청(memory resource allocation command)에 의하여 동작을 시작할 수 있다. 일 실시예예 따른 최적 메모리 자원 예측 모듈은, 포어그라운드 태스크의 태스크 ID 및/또는 백그라운드 태스크의 태스크 ID를 획득할 수 있다. 일 실시예에 따른 최적 메모리 자원 예측 모듈은 태스크 별 최적의 메모리 자원 할당(optimal MRA)을 예 측할 수 있다. 일 실시예에 따르면, 최적 메모리 자원 예측 모듈은 지정된 룰에 기반한 알고리즘을 이용하여 태스크의 최 적의 메모리 자원 할당(optimal MRA)를 결정할 수 있다. 예를 들어, 최적 메모리 자원 예측 모듈은 태스크 의 적어도 하나의 자원 할당 프로파일(RAP) 중에서, 포어그라운드 태스크의 응답 시간이 가장 작은 메모리 자원 할당(MRA) 정보를 최적의 메모리 자원 할당(optimal MRA)으로 결정할 수 있다. 일 실시예에 따르면, 최적 메모리 자원 예측 모듈은 머신 러닝 기반한 알고리즘을 이용하여 최적의 메모리 자원 할당(optimal MRA)을 결정할 수 있다. 예를 들어, 최적 메모리 자원 예측 모듈은 학습된 모델에 태스 크의 적어도 하나의 자원 할당 프로파일(RAP)을 입력하여, 태스크의 최적의 메모리 자원 할당(optimal MRA)을 출력할 수 있다. 일 실시예에 따르면, 최적 메모리 자원 예측 모듈은 태스크의 최적의 메모리 자원 할당(optimal MRA)을 내 부 스토리지(optimal MRAs)에 저장할 수 있다. 일 실시예에 따른 최적 메모리 자원 예측 모듈은 백그라운드에서 지속적으로동작할 수 있다. 다양한 실시예에 따른 메모리 자원 할당 모듈(Memory Resource Allocator, 350)은 태스크에 대하여 메모리 자원 할당(MRA)을 설정할 수 있다. 일 실시예예 따른 메모리 자원 할당 모듈은, 최적 메모리 자원 예측 모듈이 결정한 태스크의 최적의 메모리 자원 할당(optimal MRA)을 태스크의 메모리 자원 할당(MRA)으로 설정할 수 있다. 일 실시예에 따른 메모리 자원 할당 모듈은, 메모리 자원 할당(MRA)이 동일하게 설정된 태스크들을 묶어서 태스크 그룹을 생성할 수 있다. 예를 들어, 메모리 자원 할당 모듈은, 태스크의 메모리 자원 할당(MRA) 정 보에서, 태스크에 할당된 캐시 용량(cache capacity), 메모리 대역폭(memory bandwidth) 및 우선순위 (priority)가 동일한 태스크들을 하나의 그룹으로 묶어 태스크 그룹을 생성할 수 있다. 일 실시예에 따른 메모리 자원 할당 모듈은 생성한 태스크 그룹에 태스크 그룹 ID(task group ID)를 부여 할 수 있다. 일 실시예에 따른 메모리 자원 할당 모듈은 태스크 그룹 디렉토리에 태스크 그룹 ID와 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 저장할 수 있다. 일 실시예에 따른 메모리 자원 할당 모듈은 메모리 자원 할당 하드웨어에 태스크 그룹 ID 및 메모리 자원 할당(MRA) 설정이 대응되는 정보(map of task group ID - MRA map)를 전달할 수 있다. 다양한 실시예에 따른 태스크 그룹 디렉토리(task group directory, 360)는 태스크 그룹 ID와 태스크 ID가 대응 되는 정보(map of task group ID - task ID)를 저장하는 모듈일 수 있다. 일 실시예에 따르면, 태스크 그룹 디렉토리(task group directory, 360)는 태스크 스위치 이벤트(task switch event)가 발생함에 대응하여, CPU 스케줄러에 의하여 변경된 태스크 ID를 확인하고, 태스크 ID가 변경된 태스크의 태스크 그룹 ID를 확인하여 태스크 그룹 ID와 변경된 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 저장할 수 있다. 태스크 그룹 디렉토리(task group directory, 360)는 태스크 그룹 ID와 변경된 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 메모리 자원 할당 하드웨어에 전달할 수 있다.이에 따라, 메모리 자원 할당 하드웨어는 태스크 스위치 이벤트가 발생하더라도 태스크에 대한 태스크 그 룹 ID를 확인할 수 있다. 도 4는, 다양한 실시예에 따른 자원 할당 프로파일(RAP, resource allocation profile)의 구성을 도시한 도면 이다. 자원 할당 프로파일은 자원 할당 프로파일 테이블(예 : 도 3의 자원 할당프로파일 테이블)에 저장된 데이 터 중 일부일 수 있다. 자원 할당 프로파일(RAP)은, 태스크 별 메모리 자원 할당(MRA) 정보(MRA setting table), 태스크 별 응답 시간 (task response time table) 및/또는 태스크 별 메타 데이터(task metadata table)를 포함할 수 있다. 메모리 자원 할당(MRA) 정보(MRA setting table)는 태스크(task ID) 별 할당된 메모리 자원과 관련된 정보를 포 함할 수 있다. 예를 들어, 메모리 자원 할당(MRA) 정보는 태스크에 할당된 캐시 용량(cache capacity), 메모리 대역폭(memory bandwidth), 우선순위(priority)를 포함할 수 있다. 도 4에는 도시되지 않았지만, 예를 들어, 메모리 자원 할당(MRA) 정보는 캐시 포션 비트맵(cache portion bitmap) 정보를 포함할 수 있다. 예를 들어, 캐시 분할 방법은, 캐시의 위치와 상관없이 지정된 비율의 영역을 캐시 할당하는 최대 용량(max capacity) 방법 및/또는 캐시 공간을 지정된 개수만큼 나누고, 나누어진 공간에서 지정된 공간에 캐시 할당하는 캐시 포션 비트맵(cache portion bitmap) 방법을 이용할 수 있다. 예를 들어, 메모리 대역폭 분할 방법은, 메모리 대역폭을 TDM(Time-Division Multiplexing) 했을 때, time division에 상관 없이 지정된 비율까지 최대로 할당하는 최대 용량(max capacity) 방법, 메모리 대역폭을 TDM(Time-Division Multiplexing) 했을 때, 지정된 time division에 할당하는 캐시 포션 비트맵(cache portion bitmap) 방법 및/또는 태스크 그룹 별 비용을 할당하고, 태스크 그룹의 비용에 반비례하여 메모리 대역폭을 할 당하는 프로포셔널-스트라이드(proportional-stride) 방법을 이용할 수 있다. 태스크별 응답 시간(task response time table)은 포어그라운드 태스크의 태스크(task ID) 별 응답 시간 (response time)을 지시하는 정보를 포함할 수 있다. 태스크별 메타 데이터(task meta data table)는, 태스크(task ID) 별 태스크의 특성(예 : 태스크의 포어그라운 드/백그라운드(foreground/background) 구분, 캐시-인텐시브(cache-intensive) 여부, 메모리-인텐시브(memory- intensive) 여부)을 지시하는 정보를 포함할 수 있다. 자원 할당 프로파일(RAP) 테이블는, 태스크 분류 모듈(예 : 도 3의 태스크 분류 모듈)로부터 태스크 별 메타 데이터(task ID, task metadata)를, 응답 시간 모니터링 모듈(예 : 도 3의 응답 시간 모니터링 모듈 )로부터 태스크 별 응답 시간(Task ID, Response time)을, 메모리 자원 할당 모듈(예 : 도 3의 메모리 자 원 할당 모듈)로부터 태스크 별 메모리 자원 할당 정보(Task ID, MRA)를 획득할 수 있다. 도 5는, 다양한 실시예에 따른 프로세서(예 : 도 2의 프로세서)가 최적의 메모리 자원을 할당하는 동작을 도시한 흐름도이다. 다양한 실시예에 따르면, 프로세서는, 동작 510에서 태스크의 캐시-인텐시브 및/또는 메모리-인텐시브 여 부를 확인할 수 있다. 일 실시예에 따른 프로세서는, 메모리 자원 할당 모니터링 하드웨어로부터 태스크의 캐시 접근 횟수 (cache access count) 및 메모리 대역폭(memory bandwidth)과 관련된 정보를 획득할 수 있다. 프로세서는, 지정된 주기로 캐시 접근 횟수(cache access count) 및 메모리 대역폭(memory bandwidth)를 수집할 수 있다. 일 실시예예 따른 프로세서는, 태스크의 캐시 접근 횟수(cache access count) 및 메모리 대역폭(memory bandwidth)에 기반하여, 태스크를 캐시-인텐시브(cache-intensive) 및/또는 메모리-인텐시브(memory- intensive)로 분류할 수 있다. 동작 510은 도 6과 관련한 설명에서 자세히 후술한다. 다양한 실시예에 따르면, 프로세서는, 동작 520에서, 자원 할당 프로파일(RAP, resource allocation profile)을 수집할 수 있다. 일 실시예에 따르면, 동작 520은, 태스크 실행 처리 완료 이벤트 발생(task launch finish evenet) 및/또는 응 답 시간 모니터링 요청 커맨드(RAP collection command)에 의하여 시작될 수 있다. 일 실시예에 따르면, 프로세서는, 포어그라운드 태스크가 캐시-인센티브(cache-intensive) 및/또는 메모리 -인센티브(memory-intensive)임에 대응하여 포어그라운드 태스크의 응답 시간을 측정할 수 있다. 일 실시예에 따르면, 프로세서는, 자원 할당 프로파일 테이블(예 : 도 3의 자원 할당 프로파일 테이블 )에 자원 할당 프로파일(RAP, resource allocation profile)을 저장할 수 있다. 자원 할당 프로파일(RA P)은 특정 태스크에 대하여 할당된 메모리 자원과 관련된 정보 및 메모리 자원 할당에 따른 포어그라운드 태스 크의 응답 시간과 관련된 정보를 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 530에서, 최적 메모리 자원 예측 모듈(예 : 도 3의 최적 메모 리 자원 예측 모듈)을 업데이트할 수 있다. 다양한 실시예예 따른 프로세서는, 자원 할당 프로파일 테이블()의 업데이트 카운트가 지정된 값 이상이고, 전자 장치가 아이들(idle) 상태임에 대응하여, 최적 메모리 자원 예측 모듈을 업데이트할 수 있 다. 다양한 실시예에 따르면, 프로세서는, 동작 540에서, 최적의 메모리 자원 할당(MRA, Memory Resource Allocations)을 예측할 수 있다. 일 실시예에 따르면, 프로세서는, 지정된 룰에 기반한 알고리즘을 이용하여 태스크의 최적의 메모리 자원 할당(optimal MRA)를 결정할 수 있다. 예를 들어, 프로세서는 태스크의 적어도 하나의 자원 할당 프로파일 (RAP) 중에서, 포어그라운드 태스크의 응답 시간이 가장 작은 메모리 자원 할당(MRA) 정보를 최적의 메모리 자 원 할당(optimal MRA)으로 결정할 수 있다. 일 실시예에 따르면, 프로세서는 머신 러닝 기반한 알고리즘을 이용하여 최적의 메모리 자원 할당(optimal MRA)을 결정할 수 있다. 예를 들어, 프로세서는 학습된 모델에 태스크의 적어도 하나의 자원 할당 프로파 일(RAP)을 입력하여, 태스크의 최적의 메모리 자원 할당(optimal MRA)을 출력할 수 있다. 동작 520 내지 540은 도 7과 관련한 설명에서 자세히 후술한다. 다양한 실시예에 따르면, 프로세서는, 동작 550에서, 태스크에 대하여 메모리 자원 할당을 설정할 수 있다. 일 실시예예 따른 프로세서는, 태스크의 최적의 메모리 자원 할당(optimal MRA)을 태스크의 메모리 자원 할당(MRA)으로 설정할 수 있다. 일 실시예에 따른 프로세서는, 메모리 자원 할당(MRA)이 동일하게 설정된 태스크들을 묶어서 태스크 그룹 을 생성할 수 있다. 예를 들어, 메모리 자원 할당 모듈(예 : 도 3의 메모리 자원 할당 모듈)은, 태스크의 메모리 자원 할당(MRA) 정보에서, 태스크에 할당된 캐시 용량(cache capacity), 메모리 대역폭(memory bandwidth) 및 우선순위(priority)가 동일한 태스크들을 하나의 그룹으로 묶어 태스크 그룹을 생성할 수 있다. 일 실시예에 따른 프로세서는, 생성한 태스크 그룹에 태스크 그룹 ID(task group ID)를 부여할 수 있다. 일 실시예에 따른 프로세서는, 태스크 그룹 디렉토리(예 : 도 3의 태스크 그룹 디렉토리)에 태스크 그룹 ID와 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 저장할 수 있다. 일 실시예에 따른 프로세서는, 메모리 자원 할당 하드웨어(예 : 도 3의 메모리 자원 할당 하드웨어(102 0))에 태스크 그룹 ID 및 메모리 자원 할당(MRA) 설정이 대응되는 정보(map of task group ID - MRA map)를 전 달할 수 있다. 동작 550은 도 8과 관련한 설명에서 자세히 후술한다. 다양한 실시예에 따르면, 프로세서는, 동작 560에서, 설정된 메모리 자원 할당을 적용할 수 있다. 일 실시예에 따르면, 프로세서는, 태스크 스위치 이벤트(task switch event)가 발생함에 대응하여, CPU 스 케줄러(예 : 도 3의 CPU 스케줄러)에 의하여 변경된 태스크 ID를 확인하고, 태스크 ID가 변경된 태스크의 태스크 그룹 ID를 확인하여 태스크 그룹 ID와 변경된 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 태스크 그룹 디렉토리에 저장할 수 있다.일 실시예에 따르면, 프로세서는, 태스크 그룹 ID와 변경된 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 메모리 자원 할당 하드웨어(예 : 도 3의 메모리 자원 할당 하드웨어)에 전달할 수 있다. 동작 560은 도 9와 관련한 설명에서 자세히 후술한다. 도 6은, 다양한 실시예에 따른 프로세서(예 : 도 2의 프로세서)가 캐시-인텐시브 및/또는 메모리-인텐시브 태스크를 확인하는 동작을 도시한 흐름도이다. 다양한 실시예에 따르면, 도 6은, 도 5의 동작 510의 상세한 동작에 대한 흐름도일 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 610에서, 메모리 자원 모니터링 하드웨어(예 : 도 3의 메모리 자원 모니터링 하드웨어)로부터 태스크의 캐시 접근 횟수(cache access count) 및 메모리 대역폭(memory bandwidth)과 관련된 정보를 획득할 수 있다. 프로세서는 태스크 분류 모듈(예 : 도 3의 태스크 분류 모듈 )을 이용하여 지정된 주기로 캐시 접근 횟수(cache access count) 및 메모리 대역폭(memory bandwidth)를 수집할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 620에서, 캐시 접근 횟수가 지정된 값 이상인지 여부를 확인할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 630에서, 캐시 접근 횟수 지정된 값 이상임에 대응하여(동작 620 - 예), 응답 시간 모니터링 모듈(예 : 도 3의 응답 시간 모니터링 모듈)에 태스크가 캐시-인센티브임 지시하는 정보(cache-intensive : true)를 제공하고, 자원 할당 프로파일 테이블(예 : 도 3의 자원 할당 프로파 일 테이블)에 태스크가 캐시-인텐시브임을 지시하는 정보(cache-intensive : true)를 저장할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 640에서, 캐시 접근 횟수 지정된 값 미만임에 대응하여(동작 620 - 아니오), 응답 시간 모니터링 모듈에 태스크가 캐시-인센티브가 아님을 지시하는 정보(cache- intensive : false)를 제공하고, 자원 할당 프로파일 테이블에 태스크가 캐시-인텐시브가 아님을 지시하는 정보(cache-intensive : false)를 저장할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 650에서, 메모리 대역폭이 지정된 값 이상인지 여부를 확인할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 660에서, 메모리 대역폭이 지정된 값 미만임에 대응하여(동작 650 - 예), 응답 시간 모니터링 모듈에 태스크가 메모리-인센티브임을 지시하는 정보(memory-intensive : true)를 제공하고, 자원 할당 프로파일 테이블에 태스크가 메모리-인텐시브임을 지시하는 정보(memory- intensive : true)를 저장할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 670에서, 메모리 대역폭이 지정된 값 미만임에 대응하여(동작 650 - 아니오), 응답 시간 모니터링 모듈에 태스크가 메모리-인텐시브가 아님을 지시하는 정보(memory- intensive : false)를 제공하고, 자원 할당 프로파일 테이블에 태스크가 메모리-인텐시브가 아님을 지시하 는 정보(memory-intensive : false)를 저장할 수 있다. 도 7은, 다양한 실시예에 따른 프로세서가 자원 할당 프로파일을 수집하여 최적의 메모리 자원 할당을 예 측하는 동작을 도시한 흐름도이다. 다양한 실시예에 따르면, 도 7은, 도 5의 동작 520, 530 및 540의 상세한 동작에 대한 흐름도일 수 있다. 다양한 실시예에 따르면, 도 7의 동작은 태스크 실행 처리 완료 이벤트 발생(task launch finish evnet) 및/또 는 응답 시간 모니터링 요청 커맨드(RAP collection command)에 의하여 시작될 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 710에서, 포어그라운드 태스크가 캐시-인센티브(cache- intensive) 및/또는 메모리-인센티브(memory-intensive)인지 여부를 확인할 수 있다. 캐시-인텐시브(cache- intensive) 태스크는 캐시 접근 횟수(cache access count)가 지정된 값 이상인 태스크일 수 있다. 메모리-인텐 시브(memory-intensive) 태스크는 메모리 대역폭(memory bandwidth)이 지정된 값 이상인 태스크일 수 있다. 일 실시예에 따르면, 프로세서는 태스크 분류 모듈(예 : 도 3의 태스크 분류 모듈)로부터 획득한 정 보에 기반하여 태스크가 캐시-인센티브(cache-intensive) 및/또는 메모리-인센티브(memory-intensive)인지 여부 를 확인할 수 있다. 다양한 실시예예 따르면, 프로세서는, 포어그라운드 태스크가 캐시-인센티브(cache-intensive)가 아니고 및 메모리-인센티브(memory-intensive)가 아님에 대응하여(동작 710 - 아니오), 동작을 종료할 수 있다. 다양한 실시예예 따르면, 프로세서는, 동작 720에서, 포어그라운드 태스크가 캐시-인센티브(cache- intensive) 및/또는 메모리-인센티브(memory-intensive)임에 대응하여(동작 710 - 예), 포어그라운드 태스크의 응답 시간을 획득할 수 있다. 예를 들어, 프로세서는, 응답 시간 모니터링 모듈(예 : 도 3의 응답 시간 모니터링 모듈)을 이용하여 포어그라운드 태스크의 응답 시간을 획득할 수 있다. 다양한 실시예예 따르면, 프로세서는, 동작 730에서, 태스크의 응답 시간 및 메모리 자원 할당(MRA) 정보 를 자원 할당 프로파일 테이블(예 : 도 3의 자원 할당 프로파일 테이블)에 저장할 수 있다. 응답 시간(response time)은 포어그라운드 태스크의 메모리 자원 할당(MRA)에 따른 응답 시간을 지시하는 정보 를 포함할 수 있다. 메모리 자원 할당(MRA) 정보는 태스크(task ID)에 할당된 메모리 자원과 관련된 정보를 포함할 수 있다. 예를 들어, 메모리 자원 할당(MRA) 정보는 태스크에 할당된 캐시 용량(cache capacity), 메모리 대역폭(memory bandwidth) 및/또는 우선순위(priority)를 포함할 수 있다. 프로세서는 응답 시간 모니터링 모듈로부터 태스크 별 응답 시간(Task ID, Response time)을, 메모리 자원 할당 모듈(예 : 메모리 자원 할당 모듈)로부터 태스크 별 메모리 자원 할당(MRA) 정보를 획득하여 자 원 할당 프로파일 테이블에 저장할 수 있다. 다양한 실시예예 따르면, 프로세서는, 동작 740에서, 자원 할당 프로파일 테이블의 업데이트 카운트 를 1만큼 증가시킬 수 있다. 예를 들어, 업데이트 카운트는 자원 할당 프로파일(RAP) 테이블에 저장된 자원 할당 프로파일(RAP)의 개수 에 대응되는 것으로, 프로세서는, 지원 할당 프로파일 테이블에 자원 할당 프로파일(RAP)이 추가됨에 대응하여, 업데이트 카운트를 1 증가할 수 있다. 다양한 실시예예 따르면, 프로세서는, 동작 750에서, 자원 할당 프로파일 테이블의 업데이트 카운트 가 지정된 값 이상인지 여부를 확인할 수 있다. 다양한 실시예예 따르면, 프로세서는, 자원 할당 프로파일 테이블의 업데이트 카운트가 지정된 값 미 만임(예 : 동작 750 - 아니오)에 대응하여, 동작을 종료할 수 있다. 다양한 실시예예 따르면, 프로세서는, 동작 760에서, 자원 할당 프로파일 테이블의 업데이트 카운트 가 지정된 값 이상임(예 : 동작 750 - 예)에 대응하여, 전자 장치가 아이들(idle) 상태인지 여부를 확인할 수 있다. 다양한 실시예예 따르면, 프로세서는, 전자 장치(예 : 도 2의 전자 장치)가 아이들(idle) 상태가 아 님(예 : 동작 760 - 아니오)에 대응하여, 동작을 종료할 수 있다. 다양한 실시예예 따르면, 프로세서는, 동작 770에서, 전자 장치가 아이들(idle) 상태임(예 : 동작 760 - 예)에 대응하여, 자원 할당 프로파일 테이블의 업데이트 카운트를 리셋하고, 최적 메모리 자원 예측 모듈을 업데이트할 수 있다. 일 실시예예 따르면, 프로세서는, 자원 할당 프로파일 테이블에 저장된 적어도 하나의 자원 할당 프 로파일(RAP)에 기반하여, 최적 메모리 자원 예측 모듈의 알고리즘(예 : 머신 러닝 기반 학습 모델)을 업데 이트할 수 있다. 다양한 실시예예 따르면, 프로세서는, 동작 790에서, 포어그라운드 태스크의 응답 시간을 최소화하는 최적 의 메모리 할당 자원(optimal MRA)을 예측할 수 있다. 최적의 메모리 자원 할당(optimal MRA)은, 태스크에 대한 처리 성능 지표 수준이 가장 높은(예 : 응답 시간이 가장 낮은) 경우의 메모리 자원 할당 설정일 수 있다. 일 실시예에 따른 프로세서는, 최적 메모리 자원 예측 모듈을 이용하여 태스크 별 최적의 메모리 자 원 할당(optimal MRA)을 예측할 수 있다. 예를 들어, 프로세서는 지정된 룰에 기반한 알고리즘을 이용하여 태스크의 최적의 메모리 자원 할당 (optimal MRA)을 결정할 수 있다. 예를 들어, 프로세서는 태스크의 적어도 하나의 자원 할당 프로파일 (RAP) 중에서, 포어그라운드 태스크의 응답 시간이 가장 작은 메모리 자원 할당(MRA)을 최적의 메모리 자원 할당(optimal MRA)으로 결정할 수 있다. 예를 들어, 프로세서는 머신 러닝 기반한 알고리즘을 이용하여 태스크의 최적의 메모리 자원 할당(optimal MRA)을 결정할 수 있다. 예를 들어, 프로세서는 학습된 모델에 태스크의 적어도 하나의 자원 할당 프로파 일(RAP)을 입력하여, 태스크의 최적의 메모리 자원 할당(optimal MRA)을 출력할 수 있다. 다양한 실시예예 따르면, 프로세서는, 동작 790에서, 태스크의 최적의 메모리 자원 할당(optimal MRA)을 최적 메모리 자원 예측 모듈의 내부 스토리지(optimal MRAs)에 저장할 수 있다. 도 8은, 다양한 실시예에 따른 프로세서(예 : 도 2의 프로세서)가 메모리 자원 할당을 설정하는 동작을 도 시한 흐름도이다. 다양한 실시예에 따르면, 도 8은, 도 5의 동작 550의 상세한 동작에 대한 흐름도일 수 있다. 다양한 실시예에 따르면, 도 8의 동작은 태스크 실행(task execution event) 및/또는 메모리 자원 할당 요청 (memory resource allocation command)에 의하여 시작될 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 810에서, 태스크에 대하여 결정된 최적의 메모리 자원 할당 (optimal MRA)정보에 기반하여 메모리 자원 할당을 설정할 수 있다. 일 실시예에 따르면, 프로세서는, 최적 메모리 자원 예측 모듈을 이용하여 결정한 최적의 메모리 자 원 할당(optimal MRA)을, 태스크의 메모리 자원 할당(MRA)으로 설정할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 820에서, 메모리 자원 할당 설정이 동일한 태스크에 대하여 태 스크 그룹을 생성할 수 있다. 일 실시예에 따른 프로세서는, 메모리 자원 할당 모듈(예 : 도 3의 메모리 자원 할당 모듈)을 이용하 여 메모리 자원 할당(MRA)이 동일하게 설정된 태스크들을 묶어서 태스크 그룹을 생성할 수 있다. 예를 들어, 메 모리 자원 할당 모듈은, 태스크의 메모리 자원 할당(MRA) 설정에서, 태스크에 할당된 캐시 용량(cache capacity), 메모리 대역폭(memory bandwidth) 및 우선순위(priority)가 동일한 태스크들을 하나의 그룹으로 묶 어 태스크 그룹을 생성할 수 있다. 일 실시예에 따른 프로세서는 생성한 태스크 그룹에 태스크 그룹 ID(task group ID)를 부여할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 830에서, 태스크 그룹 디렉토리(예 : 도 3의 태스크 그룹 디렉 토리)에 태스크 그룹 ID와 태스크 ID가 대응되는 정보(map of task group ID - task ID)를 저장할 수 있 다. 다양한 실시예에 따르면, 프로세서는, 동작 840에서, 메모리 자원 할당 하드웨어(예 : 도 3의 메모리 자원 할당 하드웨어)에 태스크 그룹 ID와 메모리 자원 할당(MRA) 설정이 대응되는 정보(map of task group ID - MRA)를 전달할 수 있다. 도 9는, 다양한 실시예에 따른 프로세서(예 : 도 2의 프로세서)가 메모리 자원 할당을 적용하는 동작을 도 시한 흐름도이다. 다양한 실시예에 따르면, 도 9는, 도 5의 동작 560의 상세한 동작에 대한 흐름도일 수 있다. 다양한 실시예에 따르면, 도 8의 동작은 태스크 스위치 이벤트(task switch event)에 의하여 시작될 수 있다. 일 실시예에 따르면, 태스크 스위치 이벤트(task switch event)가 발생함에 대응하여, CPU 스케줄러(예 : 도 3 의 CPU 스케줄러)에 의하여 태스크 ID가 변경될 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 910에서, 태스크 그룹 디렉토리(예 : 도 3의 태스크 그룹 디렉 토리)로부터 변경된 태스크에 대한 태스크 그룹 ID를 획득할 수 있다. 태스크 그룹 디렉토리는 태스크 그룹 ID와 태스크 ID가 대응되는 정보(task group ID - task ID map)를 저장할 수 있다. 다양한 실시예에 따르면, 프로세서는, 동작 920에서, 변경된 태스크 ID에 대한 태스크 그룹 ID 정보에 기 반하여 메모리 자원 할당 하드웨어를 제어 및/또는 변경된 태스크 ID에 대한 태스크 그룹 ID 정보를 메모리 자 원 할당 하드웨어에 전송할 수 있다.프로세서는, 태스크 그룹 디렉토리를 이용하여 태스크 ID가 변경된 태스크의 그룹 ID에 기반하여 메 모리 자원 할당 하드웨어(예 : 도 3의 메모리 자원 할당 하드웨어)를 제어할 수 있다. 프로세서는, 태스크 그룹 디렉토리를 이용하여 태스크 ID가 변경된 태스크의 그룹 ID를 메모리 자원 할당 하드웨어( 에 전달할 수 있다. 이에 따라, 메모리 자원 할당 하드웨어는 태스크 스위치 이벤 트가 발생하더라도 태스크에 대한 태스크 그룹 ID를 확인할 수 있다. 다양한 실시예에 따른 전자 장치는, 메모리, 메모리 자원 할당 하드웨어 및 프로세서를 포함하고, 상기 프로세 서는 태스크의 응답 시간을 측정하고, 상기 태스크에 대한 메모리 자원 할당과 관련된 정보 및 상기 메모리 자 원 할당에서의 상기 태스크의 응답 시간 정보를 포함하는 적어도 하나의 프로파일을 수집하고, 상기 프로파일에 기반하여, 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하고, 상기 응답 시간이 최 소가 되도록 하는 메모리 자원 할당 정보에 기반하여 상기 태스크에 메모리 자원 할당을 설정하고, 상기 태스크 의 정보와 상기 설정된 자원 할당 정보에 기반하여 상기 메모리 자원 할당 하드웨어를 제어하고, 상기 메모리 자원 할당 하드웨어는 상기 설정된 자원 할당 정보에 기반하여 상기 태스크에 대한 메모리 자원을 할당할 수 있 다. 다양한 실시예에 따른 전자 장치에서, 메모리 자원 모니터링 하드웨어를 더 포함하고, 상기 프로세서는 상기 프 로파일을 수집하기 이전에, 상기 메모리 자원 모니터링 하드웨어로부터 상기 태스크의 캐시 접근 횟수 및 메모 리 대역폭을 획득하고, 상기 캐시 접근 횟수가 지정된 값 이상이거나 및/또는 상기 메모리 대역폭이 지정된 값 이상임에 대응하여 상기 태스크에 대한 응답 시간을 측정할 수 있다. 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정할 때, 상기 적어도 하나의 프로파일 중에서 상기 태스크의 응답 시간이 가장 적은 프로파일에 포함된 메모리 자원 할당 정보에 기반하여 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정할 수 있다. 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정할 때, 지정된 알고리즘을 이용하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자 원 할당을 결정하고, 상기 지정된 알고리즘은 적어도 하나의 프로파일을 머신 러닝으로 학습한 모델에 기반하고, 상기 프로세서는 상기 수집한 프로파일의 개수가 지정된 값 이상이고, 상기 전자 장치가 아이들 (idle) 상태임에 대응하여, 상기 수집한 프로파일에 기반하여 상기 지정된 알고리즘을 업데이트할 수 있다. 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 복수의 태스크에 있어서, 상기 복수의 태스크에 각각 설 정된 메모리 자원 할당 정보가 동일한 적어도 하나의 태스크에 대하여 그룹을 생성하고, 상기 그룹의 식별 정보 및 상기 설정된 메모리 자원 할당 정보를 상기 메모리 자원 할당 하드웨어에 전송할 수 있다. 다양한 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 태스크의 식별 정보가 변경됨에 대응하여, 상기 태 스크가 포함된 상기 그룹의 식별 정보와 상기 변경된 태스크의 식별 정보를 상기 메모리 자원 할당 하드웨어에 전송할 수 있다. 다양한 실시예에 따른 전자 장치의 동작 방법은, 태스크의 응답 시간을 측정하는 동작, 상기 태스크에 대한 메 모리 자원 할당과 관련된 정보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간 정보를 포함하는 적어 도 하나의 프로파일을 수집하는 동작, 상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소가 되도록 하 는 메모리 자원 할당을 결정하는 동작, 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당 정보에 기반하 여 상기 태스크에 메모리 자원 할당을 설정하는 동작, 상기 태스크의 정보와 상기 설정된 자원 할당 정보에 기 반하여 상기 메모리 자원 할당 하드웨어를 제어하는 동작을 포함할 수 있다. 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 프로파일을 수집하기 이전에, 메모리 자원 모니터링 하 드웨어로부터 상기 태스크의 캐시 접근 횟수 및 메모리 대역폭을 획득하는 동작 및 상기 캐시 접근 횟수가 지정 된 값 이상이거나 및/또는 상기 메모리 대역폭이 지정된 값 이상임에 대응하여 상기 태스크에 대한 응답 시간을 측정하는 동작을 포함할 수 있다. 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소 가 되도록 하는 메모리 자원 할당을 결정하는 동작은, 상기 적어도 하나의 프로파일 중에서 상기 태스크의 응답 시간이 가장 적은 프로파일에 포함된 메모리 자원 할당 정보에 기반하여 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는 동작을 포함할 수 있다.다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소 가 되도록 하는 메모리 자원 할당을 결정하는 동작은, 지정된 알고리즘을 이용하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하는 동작을 포함하고, 상기 지정된 알고리즘은 적어도 하나의 프 로파일을 머신 러닝으로 학습한 모델에 기반하고, 상기 동작 방법은 상기 수집한 프로파일의 개수가 지정된 값 이상이고, 상기 전자 장치가 아이들(idle) 상태임에 대응하여, 상기 수집한 프로파일에 기반하여 상기 지정된 알고리즘을 업데이트하는 동작을 포함할 수 있다. 다양한 실시예에 따른 전자 장치의 동작 방법에서, 복수의 태스크에 있어서, 상기 복수의 태스크에 각각 설정된 메모리 자원 할당 정보가 동일한 적어도 하나의 태스크에 대하여 그룹을 생성하는 동작 및 상기 그룹의 식별 정 보 및 상기 설정된 메모리 자원 할당 정보를 상기 메모리 자원 할당 하드웨어에 전송하는 동작을 포함할 수 있 다. 다양한 실시예에 따른 전자 장치의 동작 방법에서, 상기 태스크의 식별 정보가 변경됨에 대응하여, 상기 태스크 가 포함된 상기 그룹의 식별 정보와 상기 변경된 태스크의 식별 정보를 상기 메모리 자원 할당 하드웨어에 전송 하는 동작을 포함할 수 있다. 다양한 실시예에 따른 전자 장치는, 메모리, 메모리 자원 할당 하드웨어, 프로세서를 포함하고, 상기 프로세서 는 태스크의 응답 시간을 측정하는 응답시간 모니터링 모듈, 상기 태스크에 대한 메모리 자원 할당과 관련된 정 보 및 상기 메모리 자원 할당에서의 상기 태스크의 응답 시간 정보를 포함하는 적어도 하나의 프로파일을 수집 하는 자원 할당 프로파일 테이블, 상기 프로파일에 기반하여 상기 태스크의 응답 시간이 최소가 되도록 하는 메 모리 자원 할당을 결정하는 메모리 자원 예측 모듈, 및 상기 응답 시간이 최소가 되도록 하는 메모리 자원 할당 정보에 기반하여 상기 태스크에 메모리 자원 할당을 설정하고, 상기 태스크의 정보와 상기 설정된 자원 할당 정 보를 상기 메모리 자원 할당 하드웨어에 전송하는 메모리 자원 할당 모듈을 포함할 수 있다. 다양한 실시예에 따른 전자 장치에서, 메모리 자원 모니터링 하드웨어를 더 포함하고, 상기 프로세서는 상기 프 로파일을 수집하기 이전에, 상기 메모리 자원 모니터링 하드웨어로부터 상기 태스크의 캐시 접근 횟수 및 메모 리 대역폭을 획득하는 태스크 분류 모듈을 더 포함하고, 상기 응답시간 모니터링 모듈은 상기 캐시 접근 횟수가 지정된 값 이상이거나 및/또는 상기 메모리 대역폭이 지정된 값 이상임에 대응하여 상기 태스크에 대한 응답 시 간을 측정할 수 있다. 다양한 실시예에 따른 전자 장치에서, 상기 메모리 자원 예측 모듈은 상기 적어도 하나의 프로파일 중에서 상기 태스크의 응답 시간이 가장 적은 프로파일에 포함된 메모리 자원 할당 정보에 기반하여 상기 응답 시간이 최소 가 되도록 하는 메모리 자원 할당을 결정할 수 있다. 다양한 실시예에 따른 전자 장치에서, 상기 메모리 자원 예측 모듈은 지정된 알고리즘을 이용하여 상기 태스크 의 응답 시간이 최소가 되도록 하는 메모리 자원 할당을 결정하고, 상기 지정된 알고리즘은 적어도 하나의 프로 파일을 머신 러닝으로 학습한 모델에 기반하고, 상기 메모리 자원 예측 모듈은 상기 자원 할당 프로파일 테이블 이 수집한 상기 프로파일의 개수가 지정된 값 이상이고, 상기 전자 장치가 아이들(idle) 상태임에 대응하여, 상 기 수집한 프로파일에 기반하여 상기 지정된 알고리즘을 업데이트할 수 있다. 다양한 실시예에 따른 전자 장치에서, 상기 메모리 자원 할당 모듈은 복수의 태스크에 있어서, 상기 복수의 태 스크에 각각 설정된 메모리 자원 할당 정보가 동일한 적어도 하나의 태스크에 대하여 그룹을 생성하고, 상기 그 룹의 식별 정보 및 상기 설정된 메모리 자원 할당 정보를 상기 메모리 자원 할당 하드웨어에 전송할 수 있다. 다양한 실시예에 따른 전자 장치에서, 태스크 그룹 디렉토리를 더 포함하고, 상기 메모리 자원 할당 모듈은 상 기 그룹의 식별 정보 및 상기 설정된 메모리 자원 할당 정보를 상기 태스크 그룹 디렉토리에 저장하고, 상기 태 스크의 식별 정보가 변경됨에 대응하여, 상기 태스크 그룹 디렉토리에 저장된 상기 태스크가 포함된 상기 그룹 의 식별 정보와 상기 변경된 태스크의 식별 정보를 상기 메모리 자원 할당 하드웨어에 전송할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다.도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, '비일시적'은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전자 기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경우 와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9"}
{"patent_id": "10-2022-0016068", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면의 설명과 관련하여, 동일 또는 유사한 구성 요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있 다. 도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블럭도이다. 도 2는, 다양한 실시예에 따른 전자 장치의 블록도이다. 도 3은, 다양한 실시예에 따른 메모리 파티셔닝 컨트롤러의 구성 및 메모리 파티셔닝 컨트롤러와 관련된 구성을 도시한 도면이다. 도 4는, 다양한 실시예에 따른 자원 할당 프로파일(RAP, resource allocation profile)의 구성을 도시한 도면 이다. 도 5는, 다양한 실시예에 따른 프로세서가 최적의 메모리 자원을 할당하는 동작을 도시한 흐름도이다. 도 6은, 다양한 실시예에 따른 프로세서가 캐시-인텐시브 및/또는 메모리-인텐시브 태스크를 확인하는 동작을도시한 흐름도이다. 도 7은, 다양한 실시예에 따른 프로세서가 자원 할당 프로파일을 수집하여 최적의 메모리 자원 할당을 예측하는 동작을 도시한 흐름도이다. 도 8은, 다양한 실시예에 따른 프로세서가 메모리 자원 할당을 설정하는 동작을 도시한 흐름도이다. 도 9는, 다양한 실시예에 따른 프로세서가 메모리 자원 할당을 적용하는 동작을 도시한 흐름도이다."}
