{"patent_id": "10-2018-0104026", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2020-0025953", "출원번호": "10-2018-0104026", "발명의 명칭": "인공지능을 이용하여 게임 데이터를 생성하기 위한 컴퓨터-구현 방법, 장치, 및 컴퓨터 프로", "출원인": "주식회사 넥슨코리아", "발명자": "김호연"}}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "온라인 게임 서버로부터 오브젝트 데이터를 수신하는 단계;인공지능 알고리즘 프레임워크 및 상기 오브젝트 데이터에 기초하여 게임 데이터를 생성하는 단계; 및상기 생성된 게임 데이터를 디스플레이하는 단계를 포함하는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 오브젝트 데이터는 손실 압축된 (lossy compressed) 이미지 데이터를 포함하고,상기 게임 데이터를 생성하는 단계는, 상기 인공지능 알고리즘을 이용하여 상기 손실 압축된 이미지 데이터를복원하여 상기 게임 데이터를 생성하는 단계를 포함하는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2 항에 있어서,상기 오브젝트 데이터는 정적 오브젝트 데이터 및 동적 오브젝트 데이터를 포함하고,상기 정적 오브젝트 데이터 및 상기 동적 오브젝트 데이터의 손실률은 서로 상이한 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서,상기 정적 오브젝트 데이터의 손실률은 상기 동적 오브젝트 데이터의 손실률보다 큰 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 알고리즘 프레임워크 및 상기 오브젝트 데이터는 메모리에 로드되고, 상기 인공지능 알고리즘 프레임워크가 상기 오브젝트 데이터를 기준으로 머신러닝 추론을 수행함으로써, 상기 게임 데이터가 생성되는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 오브젝트 데이터는 동적 오브젝트 데이터를 포함하고,상기 동적 오브젝트 데이터는 기초 이미지 데이터 및 뼈대 데이터를 포함하는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6 항에 있어서,상기 기초 이미지 데이터는 2D 이미지 데이터인 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 6 항에 있어서,상기 기초 이미지 데이터 및 상기 뼈대 데이터 중 하나는 상기 온라인 게임 서버로부터 실시간으로 수신되고,상기 기초 이미지 데이터 및 상기 뼈대 데이터 중 다른 하나는 상기 온라인 게임 서버로부터 미리 수신되는 방법.공개특허 10-2020-0025953-3-청구항 9 제 6 항에 있어서,상기 동적 오브젝트 데이터는 이펙트 데이터인 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 6 항에 있어서,상기 동적 오브젝트 데이터에 기초하여 생성되는 게임 데이터를 디스플레이하는 동안, 상기 동적 오브젝트 데이터에 대응하는 오디오를 출력하는 단계를 더 포함하는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 1 항에 있어서,다른 사용자의 액션으로부터 기인한 이펙트 데이터를 실시간으로 수신하는 단계를 더 포함하고, 상기 게임 데이터는, 추가적으로 상기 이펙트 데이터에 기초하여 생성되는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 1 항에 있어서,상기 오브젝트 데이터는, 상기 온라인 게임 서버로부터 실시간으로 또는 미리 수신함으로써 획득되는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 1 항 내지 제 12 항 중 어느 한 항에 있어서,하드웨어와 결합되어 상기 방법을 실행시키기 위하여 매체에 저장되는 컴퓨터 프로그램."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "인스트럭션들을 저장하는 메모리; 및상기 인스트럭션들을 실행하도록 구성된 적어도 하나의 프로세서를 포함하고, 상기 프로세서는 상기 인스트럭션들을 실행하여:온라인 게임 서버로부터 오브젝트 데이터를 수신하고;인공지능 알고리즘 프레임워크 및 상기 오브젝트 데이터에 기초하여 게임 데이터를 생성하고;상기 생성된 게임 데이터를 디스플레이하도록 구성된 디바이스."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "인공지능 알고리즘을 이용하여 오브젝트 데이터에 대해 머신러닝 모델을 트레이닝시키는 단계; 및클라이언트에게, 상기 클라이언트가 상기 인공지능 알고리즘 기반의 프레임워크 및 상기 오브젝트 데이터에 기초하여 게임 데이터를 디스플레이할 수 있도록, 상기 오브젝트 데이터를 전송하는 단계를 포함하는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 15 항에 있어서,상기 오브젝트 데이터는 DCGAN (deep convolutional generative adversarial network) 알고리즘에 기초하여 상기 머신러닝 모델에 의해 러닝되는 (learned) 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 15 항에 있어서,상기 오브젝트 데이터는 손실 압축된 (lossy compressed) 이미지 데이터를 포함하고,공개특허 10-2020-0025953-4-상기 오브젝트 데이터의 트레이닝 정도에 기초하여 상기 오브젝트 데이터의 손실율을 조정하는 단계를 더 포함하는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 15 항에 있어서,상기 오브젝트 데이터는 손실 압축된 (lossy compressed) 이미지 데이터를 포함하고,상기 클라이언트의 상태에 기초하여 상기 오브젝트 데이터의 손실율이 결정되는 방법."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 15 항에 있어서,하드웨어와 결합되어 상기 방법을 실행시키기 위하여 매체에 저장되는 컴퓨터 프로그램."}
{"patent_id": "10-2018-0104026", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "인스트럭션들을 저장하는 메모리; 및상기 인스트럭션들을 실행하도록 구성된 적어도 하나의 프로세서를 포함하고, 상기 프로세서는 상기 인스트럭션들을 실행하여:인공지능 알고리즘을 이용하여 오브젝트 데이터에 대해 머신러닝 모델을 트레이닝시키고;클라이언트에게, 상기 클라이언트가 상기 인공지능 알고리즘 기반의 프레임워크 및 상기 오브젝트 데이터에 기초하여 게임 데이터를 디스플레이할 수 있도록, 상기 오브젝트 데이터를 전송하도록 구성된 서버."}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시는, 온라인 게임 서버로부터 오브젝트 데이터를 수신하는 단계; 상기 인공지능 알고리즘 프레임워크 및 상기 오브젝트 데이터에 기초하여 게임 데이터를 생성하는 단계; 및 상기 생성된 게임 데이터를 디스플레이하는 단계를 포함하는 방법을 제공할 수 있다."}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 인공지능을 이용하여 게임 데이터를 생성하기 위한 컴퓨터-구현 방법, 장치, 및 컴퓨터 프로그램에 관하며, 머신러닝 알고리즘을 활용하여 인간 두뇌의 인지, 판단 등의 기능을 모사하는 인공 지능 시스템 및 그 응용에 관한 것이다."}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "컴퓨팅 디바이스 및 네트워크 환경이 발전함에 따라 온라인 게임을 즐기는 사용자들의 수도 계속 증가하고 있으 며, 온라인 게임을 구동하는데 필요한 데이터의 크기 또한 기하급수적으로 증가하고 있다. 일반적으로, 온라인 게임은 사용자의 디바이스와 온라인 게임 서버 간에 데이터 전송을 필요로 하고, 온라인 게 임의 사용자에게 쾌적한 게임 환경을 제공하기 위한 다양한 방안들이 논의되고 있다. 온라인 게임의 그래픽을 향상시키거나, 랙 (lag) 발생 빈도를 저감시키기 위해서는, 사용자의 디바이스와 온라인 게임 서버 간의 데이터 전송이 끊어지지 않고 빠른 속도로 진행될 필요가 있다. 특히, 온라인 게임의 디테일이 향상될수록, 사용자 디 바이스에서 그 디테일을 구현하는데 필요한 데이터는 기하급수적으로 증가한다. 사용자와 온라인 게임 서버 간에 데이터 전송 속도를 향상시키는 방안은, 온라인 게임 제공업자보다는 네트워크 인프라를 구축하는 자에게 의존적이다. 따라서, 온라인 게임 제공업자와 사용자 디바이스 간의 데이터 전송 효 율을 향상시키는 방안이 더 효과적일 수 있다. 데이터 전송 효율을 향상시키기 위해 압축된 (compressed) 데이터를 이용할 수 있다. 하지만, 압축된 데이터를 이용하기 위해서는, 데이터 전송 프로세스 이외에, 전송자가 데이터를 로 (raw) 데이터를 압축하는 프로세스, 수신자가 압축된 데이터를 압축해제 (uncompressiong) 하는 프로세스가 추가적으로 요구된다. 데이터의 압축율 이 높아질수록 압축해제에 필요한 시간도 비례하여 증가하므로, 데이터 전송 효율을 향상시키기 위해 압축률만 을 증가시키는 것은, 압축해제를 진행하는 사용자 디바이스에게 부하로서 작용한다. 또한, 온라인 게임에서는 다른 사용자들의 액션에 따른 결과가 구현될 필요가 있으므로, 사용자 디바이스의 메 모리는 자신뿐만 아니라 다른 사용자들의 액션에 필요한 데이터를 미리 로드할 수 있다. 하지만, 사용자 디바 이스의 메모리의 용량 (capacity) 은 한정적이므로, 인터랙션하는 사용자의 수가 증가할수록, 랙 발생 빈도가증가한다. 이에 따라, 사용자 디바이스 메모리에 로드되는 데이터의 크기를 줄이는 기술의 개발도 요구되고 있 다."}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 사용자 디바이스와 온라인 게임 서버 간에 전송되는 데이터의 크기를 줄이기 위한 수단을 개시한다. 본 개시는 종래보다 비교적 적은 양의 데이터를 이용하여, 동일한 수준의 디테일을 구현하기 위한 수단을 개시 한다. 본 개시는 2차원 온라인 게임에 있어서, 사용자 디바이스와 온라인 게임 서버 간에 전송되는 데이터의 크기를 줄이기 위한 수단을 개시한다."}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시는, 온라인 게임 서버로부터 오브젝트 데이터를 수신하는 단계; 상기 인공지능 알고리즘 프레임워크 및 상기 오브젝트 데이터에 기초하여 게임 데이터를 생성하는 단계; 및 상기 생성된 게임 데이터를 디스플레이하는 단계를 포함하는 방법을 제공할 수 있다. 상기 오브젝트 데이터는 손실 압축된 (lossy compressed) 이미지 데이터를 포함하고, 상기 게임 데이터를 생성 하는 단계는, 상기 인공지능 알고리즘을 이용하여 상기 손실 압축된 이미지 데이터를 복원하여 상기 게임 데이 터를 생성하는 단계를 포함하는 방법이 제공될 수 있다. 상기 오브젝트 데이터는 정적 오브젝트 데이터 및 동적 오브젝트 데이터를 포함하고, 상기 정적 오브젝트 데이 터 및 상기 동적 오브젝트 데이터의 손실률은 서로 상이한 방법이 제공될 수 있다. 상기 정적 오브젝트 데이터의 손실률은 상기 동적 오브젝트 데이터의 손실률보다 큰 방법이 제공될 수 있다. 상기 인공지능 알고리즘 프레임워크가 머신러닝 추론을 수행함으로써, 상기 게임 데이터가 생성되는 방법이 제 공될 수 있다. 상기 오브젝트 데이터는 동적 오브젝트 데이터를 포함하고, 상기 동적 오브젝트 데이터는 기초 이미지 데이터 및 뼈대 데이터를 포함하는 방법이 제공될 수 있다. 상기 기초 이미지 데이터는 2D 이미지 데이터인 방법이 제공될 수 있다. 상기 기초 이미지 데이터 및 상기 뼈대 데이터 중 하나는 상기 온라인 게임 서버로부터 실시간으로 수신되고, 상기 기초 이미지 데이터 및 상기 뼈대 데이터 중 다른 하나는 상기 온라인 게임 서버로부터 미리 수신되는 방 법이 제공될 수 있다. 상기 동적 오브젝트 데이터는 이펙트 데이터인 방법이 제공될 수 있다. 상기 동적 오브젝트 데이터에 기초하여 생성되는 게임 데이터를 디스플레이하는 동안, 상기 동적 오브젝트 데이 터에 대응하는 오디오를 출력하는 단계를 더 포함하는 방법이 제공될 수 있다. 상기 알고리즘 프레임워크 및 상기 오브젝트 데이터는 메모리에 로드되고, 상기 게임 데이터는 상기 로드된 알 고리즘 프레임워크 및 상기 로드된 오브젝트 데이터에 기초하여 생성되는 방법이 제공될 수 있다. 다른 사용자의 액션으로부터 기인한 이펙트 데이터를 실시간으로 수신하는 단계를 더 포함하고, 상기 게임 데이 터는, 추가적으로 상기 이펙트 데이터에 기초하여 생성되는 방법이 제공될 수 있다. 상기 오브젝트 데이터는, 상기 온라인 게임 서버로부터 실시간으로 또는 미리 수신함으로써, 획득되는 방법이 제공될 수 있다. 나아가, 본 개시는, 하드웨어와 결합되어 상기 방법을 실행시키기 위하여 매체에 저장되는 컴퓨터 프로그램을 제공할 수 있다. 나아가, 본 개시는, 인스트럭션들을 저장하는 메모리; 및 상기 인스트럭션들을 실행하도록 구성된 적어도 하나 의 프로세서를 포함하고, 상기 프로세서는 상기 인스트럭션들을 실행하여: 온라인 게임 서버로부터 오브젝트 데 이터를 획득하고; 인공지능 알고리즘 프레임워크 및 상기 오브젝트 데이터에 기초하여 게임 데이터를 생성하고;상기 생성된 게임 데이터를 디스플레이하도록 구성된 디바이스를 제공할 수 있다. 나아가, 본 개시는, 인공지능 알고리즘을 이용하여 오브젝트 데이터에 대해 머신러닝 모델을 트레이닝시키는 단 계; 및 클라이언트에게, 상기 클라이언트가 상기 인공지능 알고리즘 기반의 프레임워크 및 상기 오브젝트 데이 터에 기초하여 게임 데이터를 디스플레이할 수 있도록, 상기 오브젝트 데이터를 전송하는 단계를 포함하는 방법 을 제공할 수 있다. 상기 오브젝트 데이터는 DCGAN (deep convolutional generative adversarial network) 알고리즘에 기초하여 상 기 머신러닝 모델에 의해 러닝되는 (learned) 방법이 제공될 수 있다. 상기 오브젝트 데이터는 손실 압축된 (lossy compressed) 이미지 데이터를 포함하고, 상기 오브젝트 데이터의 트레이닝 정도에 기초하여 상기 오브젝트 데이터의 손실율을 조정하는 단계를 더 포함하는 방법이 제공될 수 있 다. 상기 오브젝트 데이터는 손실 압축된 (lossy compressed) 이미지 데이터를 포함하고, 상기 클라이언트의 상태에 기초하여 상기 오브젝트 데이터의 손실율이 결정되는 방법이 제공될 수 있다. 나아가, 본 개시는 하드웨어와 결합되어 상기 방법을 실행시키기 위하여 매체에 저장되는 컴퓨터 프로그램을 제 공할 수 있다. 나아가, 본 개시는, 인스트럭션들을 저장하는 메모리; 및 상기 인스트럭션들을 실행하도록 구성된 적어도 하나 의 프로세서를 포함하고, 상기 프로세서는 상기 인스트럭션들을 실행하여: 인공지능 알고리즘을 이용하여 오브 젝트 데이터에 대해 머신러닝 모델을 트레이닝시키고; 클라이언트에게, 상기 클라이언트가 상기 인공지능 알고 리즘 기반의 프레임워크 및 상기 오브젝트 데이터에 기초하여 게임 데이터를 디스플레이할 수 있도록, 상기 오 브젝트 데이터를 전송하도록 구성된 서버를 제공할 수 있다."}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "일 실시예에 따르면, 종래보다 비교적 적은 양의 데이터로도 온라인 게임에서 동일한 수준의 디테일을 구현할 수 있다. 일 실시예에 따르면, 온라인 게임에서 랙 발생 빈도를 저감시킬 수 있다. 일 실시예에 따르면, 온라인 게임이 실행되는 사용자 디바이스의 리소스를 절약하고 발열을 저감시킬 수 있다."}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면들에 기재된 내용들을 참조하여 본 개시에 따른 예시적 실시예를 상세하게 설명한다. 또한, 첨부된 도면들에 기재된 내용들을 참조하여 본 개시의 실시예에 따른 전자 장치를 구성하고 사용하는 방법을 상세히 설명한다. 각 도면에서 제시된 동일한 참조번호 또는 부호는 실질적으로 동일한 기능을 수행하는 부품 또 는 구성요소를 나타낸다. 제 1, 제 2 등과 같이 서수를 포함하는 용어는 다양한 구성 요소들을 설명하는데 사용될 수 있지만, 구성 요소 들은 용어들에 의해 한정되지는 않는다. 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로 만 사용된다. 예를 들어, 본 개시의 권리 범위를 벗어나지 않으면서 제 1 구성요소는 제 2 구성요소로 명명될 수 있고, 유사하게 제 2 구성요소도 제 1 구성요소로 명명될 수 있다. 및/또는 이라는 용어는 복수의 관련된 항목들의 조합 또는 복수의 관련된 항목들 중의 어느 하나의 항목을 포함한다. 본 개시에서 사용한 용어는 실시예를 설명하기 위해 사용된 것으로, 본 개시를 제한 및/또는 한정하려는 의도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 개시에서, \"포 함하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 본 개시에서 어떤 부분이 다른 부분과 연결되어 있다고 할 때, 이는 직접적으로 연결되어 있는 경우뿐 아니라, 그 중간에 다른 요소를 사이에 두고 전기적으로 연결되어 있는 경우도 포함한다. 또한, 어떤 부분이 어떤 구성 요소를 포함한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 또한, 명세서에 기재된 \"...부\", \"모듈\" 등의 용어는 적어도 하 나의 기능이나 동작을 처리하는 단위를 의미하며, 이는 하드웨어 또는 소프트웨어로 구현되거나 하드웨어와 소 프트웨어의 결합으로 구현될 수 있다. 본 개시에서 \"클라이언트\"는 문맥에 따라 사용자, 게이머, 및 플레이어를 가리키거나, 그들에 의해 사용되는 디 바이스를 가리킬 수 있음이 이해되어야 한다. 본 개시에서 \"클라이언트들이 연결된 플랫폼\"은 클라이언트들, 즉, 사용자들이 속한 공동체를 가리키고, 예를 들어, 온라인 게임 또는 온라인 게임에 의해 제공되는 가상의 게임 공간일 수 있으나, 이에 제한되지 않는다. 사용자의 아바타나 캐릭터는 가상의 게임 공간 내에서 존재할 수 있다. 본 개시에서 \"오브젝트\"는 온라인 게임과 같은 가상 공간에서 존재하는 모든 디지털 콘텐트를 가리킨다. 예를 들어, 오브젝트는 사용자의 아바타나 캐릭터, 또는 논-플레이어 캐릭터 (non-player character: NPC) 일 수 있 으며, 게임 내에서 사용되는 아이템일 수도 있으나, 이에 제한되지 않는다. 오브젝트는 소정의 가치를 가지고 거래될 수 있다. 예를 들어, 오브젝트는 클라이언트들 사이에서 거래되거나, 클라이언트와 서버 사이에서 거래 될 수 있다. 오브젝트는 사용자에 의해 조작될 수 있는 것으로 한정되지 않는다. 예를 들어, 오브젝트는 가상 공간을 구성하는 배경 (예: 초원, 숲, 사막, 던전, 마을, 바다, 등), 구조물 (예: 집, 탑, 분수, 성벽, 등대, 등), 사물 (예: 풀, 나무, 바위, 비, 눈, 불, 산호, 등) 등을 가리킬 수도 있다. 오브젝트는 시각화, 청각화, 촉각화, 및/또는 후각화될 수 있다. 시각화된 오브젝트는 3D 또는 2D로 표현될 수 있고, 2D로 표현된 오브젝트 가 사용자에게 3D로 인식되거나, 3D로 표현된 오브젝트가 사용자에게 2D 로 인식될 수도 있다. 본 명세서에서 가상 공간 내에서 움직임이 없는 것으로 표현되는 오브젝트는 정적 오브젝트로, 움직이거나 움직 일 수 있는 것으로 표현되는 오브젝트는 동적 오브젝트로 지칭될 수 있다. 동적 오브젝트는 항상 또는 특정 순 간에 움직이거나, 사용자와 인터랙션하는 경우에 움직일 수 있다. 온라인 게임과 같은 가상 공간은 오브젝트들 의 집합으로 표현될 수 있다. 예를 들어, 성 (castle) 을 배경으로 하는 가상 공간은, 그 내부에 집, 탑, 분수, 성벽 등의 구조물과 풀, 나무, 바위 등의 사물이 존재하는 것으로 표현될 수 있다. 배경은 정적 오브젝 트로만 구현될 수 있으나, 이에 제한되지 않는다. 예를 들어, 배경의 일부, 예를 들어, 성 그 자체는 정적 오 브젝트로 구현되고, 다른 일부, 예를 들어 성을 구성하는 성벽이나 깃발 등은 동적 오브젝트로 구현되어, 사용 자에 의해 성벽이 파괴되거나 수 있고, 깃발이 펄럭일 수 있다. 동적 오브젝트는 이펙트 (effect) 를 포함할 수 있다. 이펙트는 가상 공간 내에서 사용자의 아바타나 캐릭터, 또는 NPC의 액션에 수반되어 표현되는 것들을 가리킬 수 있다. 예를 들어, 검사 캐릭터가 검을 휘두르는 경우 이펙트로서 검의 궤적이 표현되고, 마법사 캐릭터가 블리자드 (blizzard) 마법을 시전 (cast) 하는 경우 이펙트 로서 하늘에서 얼음들이 쏟아지는 것으로 표현될 수 있다. 이펙트는 시각적 이펙트, 청각적 이펙트, 촉각적 이 펙트, 후각적 이펙트를 포함할 수 있으나, 이에 제한되지 않는다. 본 개시에서 \"아이템\"은 온라인 게임 내에서 사용자 또는 사용자의 캐릭터가 획득할 수 있는 모든 디지털 콘텐 트를 가리킨다. 예를 들어, 아이템은 게임 내에서 사용되는 물건, 상품, 콘텐트 등을 모두 포함할 수 있으며,무기, 방어구, 옷, 액세서리와 같이 게임 내에서 캐릭터가 착용하는 장비, 캐릭터가 탑승하는 탑승물, 캐릭터가 소비하는 소비물이나 재화, 및 캐릭터의 스킨 (skin) 일 수 있으나, 이에 제한되지 않는다. 사용자의 캐릭터의 스탯 또는 능력은 아이템의 사용으로 인해 일시적, 영구적, 또는 조건적으로 변화할 수 있다. 도 1 은 일 실시예에 따른 서버 및 클라이언트를 포함하는 온라인 게임 제공 시스템을 도시한다. 일 실시예에 따른 온라인 게임 제공 시스템은 도 1 에 도시된 바와 같이 서버 와 복수의 클라이언트들 (2000a, 2000b, 2000c, 2000d, 2000e, 및 2000f) 를 포함할 수 있다. 서버 는 네트워크를 통해 온라인 게임을 서비스함으로써, 복수의 클라이언트들 (2000a, 2000b, 2000c, 2000d, 2000e, 및 2000f) 에게 온라인 게 임을 제공할 수 있다. 도 1 은 사용자에 의해 사용되는 클라이언트의 예들로서, 데스크톱 컴퓨터 (2000a), 태블릿 (2000b), 휴대폰 (2000c), 노트북 (2000d), 스마트폰 (2000e), 및 텔레비전 (2000f) 을 도시하지만, 클라이언트는 이에 제한되지 않고 PDA (Personal Digital Assistants), PMP (Portable Multimedia Player), 네비게이션, MP3 플레이어, 디 지털 카메라, 냉장고, 세탁기, 청소기 등의 다양한 전자 디바이스를 포함할 수 있다. 일부 실시예에 따르면, 서버 는 게임 제공업자에 의해 운영될 수 있으며, 서버 는 단일 서버, 서 버의 집합체, 및 클라우드 서버를 포함할 수 있으나, 이에 제한되지 않는다. 서버 는 사용자들에게 온 라인 게임을 제공하며, 사용자들의 데이터를 저장하는 데이터 베이스를 포함할 수 있다. 또한, 서버 는 결제 이벤트를 생성 및 처리하는 결제 서버를 더 포함할 수 있다. 일부 실시예에 따르면 네트워크는 모든 통신 방식을 이용하여 설립 (또는 형성) 된 연결을 의미하며, 클라이언 트들 (2000a, 2000b, 2000c, 2000d, 2000e, 및 2000f) 사이 또는 클라이언트들 (2000a, 2000b, 2000c, 2000d, 2000e, 및 2000f) 과 서버 사이에서 데이터를 전달하는, 모든 통신 수단을 통해 연결된 통신망을 의미할 수 있다. 통신 수단은 소정의 통신 규격, 소정의 주파수 대역, 소정의 프로토콜 또는 소정의 채널을 통한 통신, 근거리 통신, 원거리 통신, 무선 통신 및 유선 통신을 포함한다. 예를 들어, 통신 수단은 블루투스, BLE, Wi-Fi, Zigbee, 3G, LTE, 초음파를 통한 통신 수단 등을 포함할 수 있으나, 이에 제한되지 않는다. 근거리 통신 수단은, 통신을 수행하는 디바이스들이 소정의 범위 내에 있을 때에만 서로 통신이 가능한 통신 수 단을 의미할 수 있으며, 예를 들어, 블루투스 및 NFC 를 포함할 수 있으나, 이에 제한되지 않는다. 원거리 통신 수단은, 통신을 수행하는 디바이스들이 거리와 관계 없이 서로 통신이 가능한 통신 수단을 의미할 수 있다. 예를 들어, 원거리 통신 수단은 AP와 같은 중계기를 통해 통신을 수행하는 두 디바이스가 소정의 거 리 이상일 때에도 통신할 수 있는 수단, 및 문자 전송과 전화 통화에 사용되는 셀룰러 네트워크 (3G, LTE) 를 이용한 통신 수단을 포함할 수 있으나, 이에 제한되지 않는다. 서버 가 네트워크를 이용하여 온라인 게임을 서비스하는 과정에서, 임의의 통신 수단을 통해 서버 와 클라이언트들 (2000a, 2000b, 2000c, 2000d, 2000e, 및 2000f) 간의 통신이 수행될 수 있다. 온라인 게임은 RPG (Role Playing Game), TRPG (Tabletop RPG), MMORPG (Massively Multiplayer Online RPG), MOBA (Multiplayer Online Battle Arena), AOS (Aeon of Strife), RTS (Real Time Strategy), FPS (First- person shooter), TCG (Trading Card Game), CCG (Collectible Card Game), 스포츠, 대전격투 등 다양한 장르 의 게임일 수 있으나, 이에 제한되지 않는다. 온라인 게임은 사용자들 간의 대전 또는 사용자와 컴퓨터 (예를 들면, 인공지능) 과의 대전으로 진행될 수 있으나, 이에 제한되지 않고, 다양한 형태로 구현될 수 있다. 도 2 는 일 실시예에 따라 오브젝트 데이터를 이용하여 게임 데이터를 생성하는 방법을 설명하기 위한 도면이다. 도 2 를 참조하면, 서버 에서는 온라인 게임을 서비스하기 위한 프로그램이 구동되어, 네트워크를 통해 클라이언트 에게 온라인 게임이 서비스될 수 있고, 이에 따라, 클라이언트 에서는 온라인 게임이 실행될 수 있다. 도 2 를 비롯하여 다음의 참조되는 도면들에서는 하나의 클라이언트 만이 도시되지만, 서버 는 복수의 클라이언트들에게 온라인 게임을 동시에 서비스할 수 있다. 나아가, 이하에서는 사용자 가 하나의 클라이언트 를 사용하는 것으로 설명되지만, 사용자는 복수의 클라이언트들을 사용할 수도 있 다. 도 2 를 참조하면, 클라이언트 에서 온라인 게임 그래픽 유저 인터페이스 (graphic user interface: GUI) 가 디스플레이될 수 있다. 사용자들은 디스플레이된 온라인 게임 GUI 를 통해 온라인 게임과 인터랙션 (interaction) 할 수 있고, 클라이언트 는 이러한 인터랙션에 기초하여 서버 와 통신할 수 있다. 온라인 게임과의 인터랙션은 온라인 게임 내에서 다른 사용자들 또는 논플레이어 캐릭터 (non-player character: NPC) 와의 인터랙션을 포함할 수 있다. 도 2 에 도시된 바와 같이, 클라이언트 의 온라인 게임 GUI 내에서는 게임 데이터 가 디스 플레이될 수 있다. 게임 데이터 는 서버 로부터 수신될 수 있으나, 일 실시예에 따라 서버 로부터 수신된 오브젝트 데이터 에 기초하여 생성될 수도 있다. 서버 는 오브젝트 데이터 를 포함하여, 온라인 게임의 실행, 또는 온라인 게임 내의 오브젝트를 표현하는데 필요한 데이터를 패킹 (packing) 할 수 있고, 클라이언트 는 패킹된 데이터를 수신하여 메모리에 로드함으로써 온라인 게임을 실행할 수 있다. 패킹은, 온라인 게임을 실행시키기 위해 필요한 데이터의 용량을 줄이거나, 데이터의 연속성을 향상시켜 로딩 시간을 단축시키거나, 데이터를 역분석 (reverse analysis) 으로부터 보호하기 위해 이용될 수 있다. 일 실시예에 따르면, 서버 로부터 클라이언트 에 수신되는 오브젝트 데이터 는 손실 압축 된 (lossy compressed) 이미지 데이터 를 포함할 수 있다. 일 실시예에서, 오브젝트 데이터 는 패 킹될 (packed) 수 있으며, 오브젝트 데이터 , 예를 들어, 이미지 데이터 는 패킹 과정에서 손실 압 축되거나, 손실 압축된 후 패킹될 수 있다. 일 실시예에서, 오브젝트 데이터 는 온라인 게임의 패킹된 데 이터 중 일부일 수 있다. 한편, 이미지 데이터의 용량은 해상도에 비례한다. 도 2 에 도시된 바와 같이, 서버 로부터 수신된 오브 젝트 데이터 , 예를 들어, 이미지 데이터 는 손실 압축으로 인해 이미지의 일부가 손실되거나, 이미 지의 디테일이 훼손될 수 있고, 이에 따라, 오브젝트 데이터 는 저해상도 또는 조악한 디테일을 가지는 대신 더 작은 용량 (size) 을 가질 수 있다. 일 실시예에 따르면, 클라이언트 는 인공지능 알고리즘 프레임워크를 이용하여, 저해상도 또는 조악한 디테일을 가지는 오브젝트 데이터 로부터 해상도 또는 디테일이 향상된 게임 데이터 를 생성할 수 있다. 예를 들어, 클라이언트 는 인공지능 알고리즘 프레임워크를 이용하여, 저해상도 또는 조악한 디테 일을 가지는 오브젝트 데이터 를 복원하여 게임 데이터 를 생성할 수 있다. 일 실시예에 따른 인공 지능 알고리즘에 대해서는 이후 도 5 를 참조하여 설명한다. 클라이언트 에서 구동되는 인공지능 알고리즘 프레임워크는 머신러닝 추론을 수행하여, 오브젝트 데이터 로부터 게임 데이터 를 생성할 수 있다. 일 실시예에서, 인공지능 알고리즘 프레임워크는 DCGAN (deep convolutional generative adversarial network) 에 기반하여 머신러닝 추론을 수행할 수 있다. 클라이 언트 에서 구동되는 인공지능 알고리즘 프레임워크로서, 머신러닝 추론만 가능한 구글사의 텐서플로우 라이트 (TensorFlow Lite) 가 이용될 수 있으나, 이에 제한되지 않는다. 일 실시예에 따르면, 클라이언트 는 서버 로부터 저해상도 또는 조악한 디테일을 가지는 오브젝 트 데이터 를 수신하고, 이러한 오브젝트 데이터 는 더 높은 해상도 또는 더 향상된 디테일을 가질 때보다 더 작은 용량을 가질 수 있다. 또한, 실제 클라이언트 에서 생성되어 디스플레이되는 게임 데이 터 는 인공지능 알고리즘을 통해 오브젝트 데이터 보다 더 높은 해상도 또는 더 향상된 디테일을 가지므로, 종래보다 비교적 적은 양의 데이터로도 온라인 게임에서 동일한 수준의 디테일이 구현될 수 있다. 이 에 따라, 클라이언트 의 네트워크 사용량이 절약될 수 있으므로, 이동통신망을 통해 온라인 게임을 즐기 는 사용자의 부담이 경감될 수 있다. 일 실시예에 따르면, 클라이언트 에서 구동되는 인공지능 알고리즘 프레임워크는, 서버 가 오브 젝트 데이터 를 러닝 (learning) 하는 것에 맞추어 서버로부터 패치를 수신하여 업데이트될 수 있다. 이 에 따라, 클라이언트 에서 인공지능 알고리즘 프레임워크에 의해 오브젝트 데이터 로부터 생성되 는 게임 데이터 의 퀄리티가 향상될 수 있다. 인공지능 알고리즘 프레임워크는 온라인 게임의 실행 전에 미리 업데이트될 수 있다. 예를 들어, 인공지능 알고리즘 프레임워크는 클라이언트 가 WIFI에 접속되어 있는 경우에 업데이트될 수도 있다. 인공지능 알고리즘 프레임워크는 온라인 게임의 실행 (launch) 시마다 업데 이트거나, 온라인 게임의 구동 중 실시간으로 업데이트될 수도 있다. 도 3 은 일 실시예에 따라 오브젝트 데이터를 이용하여 게임 데이터를 생성하는 방법의 흐름도이다. 단계 310 에서 클라이언트는 서버로부터 오브젝트 데이터를 획득할 수 있다. 클라이언트는 서버로부터 오브젝트 데이터를 실시간으로 또는 미리 수신할 수 있다. 여기서, 오브젝트 데이터는 손실 압축된 (lossy compressed) 이미지 데이터를 포함할 수 있다. 손실 압축된 이미지 데이터는 손실 압축에 의해 저해상도 또는 조악한 디테일 을 가질 수 있고, 결과적으로 더 작은 용량을 가질 수 있다. 일 실시예에 따르면, 클라이언트는 온라인 게임의 실행 전에 서버로부터 오브젝트 데이터를 미리 수신할 수 있 다. 예를 들어, 클라이언트는 온라인 게임 설치 시 서버로부터 오브젝트 데이터를 수신할 수 있다. 클라이언트 는 온라인 게임의 실행 (launching) 시마다 서버로부터 오브젝트 데이터를 수신하거나, 온라인 게임의 구동 중 서버로부터 실시간으로 오브젝트 데이터를 수신할 수도 있다. 클라이언트가 서버로부터 실시간으로 오브젝트 데 이터를 수신하는 경우, 수신된 오브젝트 데이터에 기초하여 게임 데이터가 동적으로 생성되어 디스플레이될 수 있다. 일 실시예에서, 서버는 오브젝트 데이터를 포함하여, 온라인 게임의 실행, 또는 온라인 게임 내 오브젝트를 표 현하는데 필요한 데이터를 패킹할 수 있으며, 오브젝트 데이터는 온라인 게임의 패킹된 (packed) 데이터 중 일 부일 수 있다. 오브젝트 데이터를 포함하는, 온라인 게임의 패킹된 데이터는, 클라이언트가 온라인 게임 설치 시 서버로부터 수신하거나, 온라인 게임의 실행 시마다 서버로부터 수신할 수 있으나, 이에 제한되지 않는다. 일 실시예에서, 클라이언트는 인공지능 알고리즘 프레임워크 및 획득된 오브젝트 데이터를 메모리에 로드할 수 있다. 여기서 메모리는 클라이언트의 CPU 에 포함된 메모리일 수 있으나, 이에 제한되지 않으며, CPU 로부터 별 도로 존재하는 메모리일 수도 있다. 일 실시예에서, 오브젝트 데이터는 온라인 게임의 패킹된 데이터 중 일부이고, 클라이언트가 패킹된 데이터를 메모리에 로드함으로써, 패킹된 데이터에 포함된 오브젝트 데이터가 메모리에 로드될 수 있다. 일 실시예에 따르면, 오브젝트 데이터는 손실 압축된 이미지 데이터를 포함할 수 있고, 그 이미지 데이터는 비 록 손실 압축에 의해 저해상도 또는 조악한 디테일을 갖지만 원본 데이터보다는 더 작은 용량을 가지므로, 클라 이언트의 메모리 용량 (capacity) 이 절약될 수 있다. 나아가, 클라이언트의 메모리의 용량은 한정적이므로, 원 본 데이터의 용량 (size) 이 커질수록 온라인 게임 구동에 필요한 데이터를 모두 메모리에 로드하기 어려울 수 있다. 반면, 손실 압축된 오브젝트 데이터는 원본 데이터보다 더 작은 용량을 가지므로, 온라인 게임 구동에 필 요한 데이터를 한꺼번에 메모리에 로드할 수 있고, 따라서 온라인 게임의 구동 속도가 향상될 수 있다. 일 실시 예에 따르면, 온라인 게임에서 랙 발생 빈도가 저감될 수 있고, 온라인 게임을 구동하는 클라이언트에서 리소스 가 절약되고 발열이 저감될 수 있다. 이러한 효과는 복수의 사용자가 밀집된 공간에서 더욱 극대화될 수 있다. 다른 사용자의 액션을 표현하기 위해 필요한 데이터도 손실 압축된 이미지 데이터로 구성된 경우, 해당 이미지 데이터를 모두 메모리에 로드하더라도, 클라이언트에 작용하는 부하는 원본 이미지 데이터를 로드하는 경우보다 더 작아질 수 있다. 단계 320 에서 클라이언트는 인공지능 알고리즘 프레임워크 및 오브젝트 데이터에 기초하여 게임 데이터를 생성 할 수 있다. 클라이언트는 인공지능 알고리즘 프레임워크를 실행함으로써 오브젝트 데이터를 기준으로 머신러닝 추론을 수행할 수 있고, 머신러닝 추론에 의해 오브젝트 데이터로부터 게임 데이터를 생성할 수 있다. 일 실시예에 따르면, 클라이언트는 인공지능 알고리즘 프레임워크를 이용하여 저해상도 또는 조악한 디테일을 가지는 오브젝트 데이터로부터, 그보다 더 높은 해상도 또는 더 향상된 디테일을 가지는 게임 데이터를 생성할 수 있으므로, 클라이언트의 네트워크 사용량이 절약될 수 있고, 이에 따라 이동통신망을 통해 온라인 게임을 즐 기는 사용자의 부담이 경감될 수 있다. 단계 330 에서 클라이언트는 생성된 게임 데이터를 디스플레이할 수 있다. 게임 데이터가 디스플레이되는 동안, 대응하는 오디오가 더 출력될 수 있다. 도 4 는 일 실시예에 따라 정적 오브젝트 데이터 및 동적 오브젝트 데이터를 이용하여 게임 데이터를 생성하는 방법을 설명하기 위한 도면이다. 도 4 를 참조하면, 클라이언트 의 온라인 게임 GUI 내에서는 게임 데이터 (412, 422) 가 디스플레 이될 수 있다. 게임 데이터 (412, 422) 는 서버 로부터 수신된 오브젝트 데이터에 기초하여 생성될 수도 있다. 도 4 를 참조하면, 오브젝트 데이터는 정적 오브젝트 데이터 및 동적 오브젝트 데이터 를 포함할 수 있다. 정적 오브젝트 데이터 는 온라인 게임 내에서 움직임이 없는 것으로 표현되는 정적 오브젝트에 관하고, 동적 오브젝트 데이터 는 온라인 게임 내에서 움직이거나 움직일 수 있는 것으로 표현되는 동적오브젝트에 관한다. 도 4 를 참조하면, 정적 오브젝트 데이터 는 나무 및 집을 포함하는 배경을 표현하기 위한 데이터이고, 동적 오브젝트 는 그 배경 내에서 움직이는 연기를 나타내기 위한 데이터이다. 일 실시예에서, 서버 는 정적 오브젝트 데이터 및 동적 오브젝트 데이터 를 포함하여, 온라 인 게임의 실행, 또는 온라인 게임 내의 오브젝트, 예를 들어, 정적 오브젝트 및 동적 오브젝트를 표현하는데 필요한 데이터를 패킹할 수 있으며, 정적 오브젝트 데이터 및 동적 오브젝트 데이터 는 온라인 게 임의 패킹된 (packed) 데이터 중 일부일 수 있다. 클라이언트 가 패킹된 데이터를 메모리에 로드함으로 써, 패킹된 데이터에 포함된 정적 오브젝트 데이터 및 동적 오브젝트 데이터 가 메모리에 로드될 수 있다. 일 실시예에 따르면, 정적 오브젝트 데이터 및 동적 오브젝트 데이터 는 손실 압축된 이미지 데이 터일 수 있고, 손실 압축에 의해 저해상도 또는 조악한 디테일을 가질 수 있다. 일 실시예에 따르면, 정적 오브젝트 데이터 의 손실율은 동적 오브젝트 데이터 의 손실율은 서로 상이할 수 있다. 예를 들어, 정적 오브젝트 데이터 의 손실율은 동적 오브젝트 데이터 의 손실율보 다 큰 값으로 결정될 수 있다. 동적 오브젝트 데이터 는 온라인 게임 내에서 움직이는 대상을 표현하기 위한 것이므로, 손실율이 커질수록 그 대상의 움직임은 사용자에게 이질감을 느끼게 할 수 있다. 일 실시예에 따르면, 온라인 게임에서 오브젝트의 자연스러운 움직임이 구현될 수 있도록, 동적 오브젝트 데이터 의 손실율은 정적 오브젝트 데이터 의 손실율보다 작은 값으로 결정될 수 있다. 일 실시예에 따르면, 서버 는 오브젝트 데이터에 대한 트레이닝 정도에 기초하여, 오브젝트 데이터의 손 실율을 조정할 수 있다. 예를 들어, 서버 는 오브젝트 데이터의 트레이닝 량이 증가할수록, 오브젝트 데 이터의 손실율을 증가시킬 수 있다. 이에 따라, 클라이언트 는 점점 더 작은 용량의 오브젝트 데이터를 이용하므로, 클라이언트 의 리소스가 절약될 수 있다. 일 실시예에 따르면, 서버 는 오브젝트 데이터의 손실율을 조정할 수 있다. 예를 들어, 서버 는 클라이언트 의 상태, 즉, 클라이언트 의 CPU 및 메모리 사용 현황, 네트워킹 속도, 네트워크 접 속 환경 (예: WIFI, 이동통신망) 등에 기초하여 오브젝트 데이터의 손실율을 조정할 수 있다. 예를 들어, 온라 인 게임이 모바일 컴퓨팅 환경에서 실행되는 경우의 오브젝트 데이터의 손실율은, 데스크탐 컴퓨팅 환경에서 실 행되는 경우보다 더 높도록 구현될 수 있다. 일 실시예에서, 서버 는 오브젝트 데이터의 손실율을 동적으로 조정할 수 있다. 예를 들어, 클라이언트 가 이동통신망을 통해 온라인 게임에 접속하는 경우의 오브젝트 데이터의 손실율은, 클라이언트 가 WIFI를 통해 온라인 게임에 접속하는 경우보다 더 높도록 구현될 수 있다. 이에 따라, 클라이언트 의 데이터 사용량이 절약되는 한편, 게임의 디테일이 유동적으로 조정될 수 있다. 또는, 클라이언트 의 CPU 및 메모리 사용 가능 용량이 큰 경우의 오브젝트 데이터의 손실율은, 클라이언트 의 CPU 및 메모리 사용 가능 용량이 작은 경우보다 더 높도록 구현될 수 있다. 이에 따라, 클라이언트 의 리소스가 효율적으로 이용될 수 있다. 또는, 클라이언트 의 네트워킹 속도가 상대적으로 느린 경우의 오브젝트 데이터의 손실 율은, 클라이언트 의 네트워킹 속도가 상대적으로 빠른 경우보다 더 높도록 구현될 수 있다. 이에 따라, 네트워킹 속도가 느린 클라이언트 에서도 온라인 게임이 끊김 없이 구동될 수 있어, 클라이언트 의 사용자는 네트워킹 속도가 빠른 사용자들과도 원활하게 온라인 게임을 즐길 수 있다. 도 5 는 일 실시예에 따른 인공지능 알고리즘을 설명하기 위한 도면이다. 클라이언트에서 구동되는 인공지능 알고리즘 프레임워크는 오브젝트 데이터를 기준으로 머신러닝 추론을 수행하 여, 오브젝트 데이터로부터 게임 데이터를 생성할 수 있다. 일 실시예에서, 인공지능 알고리즘 프레임워크는 DCGAN (deep convolutional generative adversarial network) 에 기반하여 머신러닝 추론을 수행할 수 있다. 도 5 를 참조하면, DCGAN 은 생성자 (generator) 와 감별자 (discriminator) 를 경쟁적으로 트레이닝시키는 알 고리즘으로서, 생성자는 디컨볼루셔널 네트워크 (deconvolutional network) 를 통해 가짜 (FAKE) 이미지를 생성 할 수 있고, 감별자는 생성자에 의해 생성된 가짜 이미지와 진짜 (REAL) 이미지를 컨볼루셔널 네트워크 (convolutional network) 를 통해 비교하여 어느 것이 진짜 이미지고, 어느 것이 생성자에 의해 생성된 가짜 이 미지인지를 결정할 수 있다. 즉, 생성자는 끊임없이 감별자를 속이도록 트레이닝되고, 감별자는 생성자에 의해 생성된 이미지가 가짜 이미지임을 감별하도록 트레이닝된다. 온라인 게임 서버는 원본 오브젝트 데이터와, 손실 압축된 오브젝트 데이터를 이용하여 생성자와 감별자를 트레 이닝 시킬 수 있고, 트레이닝이 진행될수록, 손실 압축된 오브젝트 데이터로부터 머신러닝 추론에 의해 생성된게임 데이터는 원본 오브젝트 데이터에 가까운 퀄리티를 가질 수 있다. 클라이언트에서 구동되는 인공지능 알고 리즘 프레임워크는 생성자로서 기능하여, 서버로부터 수신된 손실 압축된 오브젝트 데이터로부터 게임 데이터를 생성할 수 있다. 클라이언트에서는 머신러닝 추론만 가능한 임의의 프레임워크가 이용될 수 있으나, 이에 제한 되지 않는다. 도 6 은 일 실시예에 따라 동적 오브젝트 데이터를 이용하여 게임 데이터를 생성하는 방법을 설명하기 위한 도 면이다. 도 6 를 참조하면, 클라이언트 의 온라인 게임 GUI 내에서는 게임 데이터 (612, 622) 가 디스플레 이될 수 있다. 게임 데이터 (612, 622) 는 서버 로부터 수신된 오브젝트 데이터에 기초하여 생성될 수도 있다. 도 6 를 참조하면, 오브젝트 데이터는 정적 오브젝트 데이터 및 동적 오브젝트 데이터를 포함할 수 있다. 동적 오브젝트 데이터는 기초 이미지 데이터 및 뼈대 데이터 를 포함할 수 있다. 기초 이미지 데이 터 는 원본 이미지 데이터로부터 손실 압축된 이미지 데이터일 수 있다. 뼈대 데이터 는 해당 동적 오브젝트 데이터가 가리키는 대상의 움직임을 나타낼 수 있다. 도 6 을 참조하면, 뼈대 데이터는 십자가 (+) 모 양에서 가로축이 점점 짧아지고, 세로축이 위로 길어지는 움직임을 나타낼 수 있다. 이러한 뼈대 데이터가, 연 기를 나타내는 기초 이미지 데이터 와 함께 머신러닝 추론에 이용되는 경우, 연기가 위로 퍼지는 모습을 나타내는 게임 데이터 가 생성되어 클라이언트 에서 디스플레이될 수 있다. 도 6 에서는 설명의 편의상, 일방향의 움직임만을 도시하였으나, 뼈대 데이터는 특정 움직임이 반복되거나, 시간 파라미터를 통해 움직임의 속도가 조절되도록 구현될 수도 있다. 일 실시예에 따르면, 동적 오브젝트 데이터는 이펙트 데이터일 수 있다. 이펙트는 가상 공간 내에서 사용자의 아바타나 캐릭터, 또는 NPC의 액션에 수반되어 표현되는 것들을 가리킬 수 있다. 예를 들어, 검사 캐릭터가 검 을 휘두르는 경우 이펙트로서 검의 궤적이 표현되고, 마법사 캐릭터가 블리자드 (blizzard) 마법을 시전하는 경 우 이펙트로서 하늘에서 얼음들이 쏟아지는 것으로 표현될 수 있다. 이펙트 또한 사용자의 액션 또는 다른 사 용자들의 액션에 의해 발생하는 동적 오브젝트로서, 본 개시에 따른 실시예들이 적용될 수 있다. 이펙트 데이터 로부터 생성된 게임 데이터가 클라이언트 에서 디스플레이되는 동안, 해당 이펙트 데이터에 대응하는 오 디오가 함께 출력될 수 있다. 일 실시예에 따르면, 기초 이미지 데이터 는 2D 이미지 데이터 일 수 있다. 2D 이미지 데이터 및 뼈대 데이터 로부터 머신러닝 추론을 통해 게임 데이터 가 생성되는 경우, 마치 3D 컴퓨 터 그래픽스 (3D computer graphics: 3D CG) 를 이용하는 것과 유사한 효과를 낼 수 있다. 일 실시예에서, 서버 는 기초 이미지 데이터 및 뼈대 데이터 를 포함하여, 온라인 게임의 실행, 또는 온라인 게임 내 오브젝트, 예를 들어, 동적 오브젝트의 표현에 필요한 데이터를 패킹할 수 있으며, 기초 이미지 데이터 및 뼈대 데이터 는 온라인 게임의 패킹된 (packed) 데이터 중 일부일 수 있다. 클라이언트 가 패킹된 데이터를 메모리에 로드함으로써, 패킹된 데이터에 포함된 기초 이미지 데이터 및 뼈대 데이터 가 메모리에 로드될 수 있다. 일 실시예에 따르면, 클라이언트 에서 오브젝트 데이터는 온라인 게임이 실행되어 있는 동안 서버 로부터 실시간으로 수신될 수 있다. 예를 들어, 기초 이미지 데이터 는 서버 로부터 클라 이언트 에게 실시간으로 수신되고, 뼈대 데이터 는 미리 수신되어 있을 수 있다. 즉, 뼈대 데이터 는 패킹된 데이터 중 일부로서, 클라이언트 에게 미리 수신되어, 메모리에 로드된 상태일 수 있다. 또는, 뼈대 데이터 는 서버 로부터 클라이언트 에게 실시간으로 수신되고, 기초 이 미지 데이터 는 미리 수신되어 있을 수 있다. 예를 들어, 기초 이미지 데이터 는 패킹된 데이터 중 일부로서, 클라이언트 에게 미리 수신되어, 메모리에 로드된 상태일 수 있다. 뼈대 데이터 는 동적 오브젝트의 움직임을 나타내므로, 가변성이 제한적인 반면, 기초 이미지 데이터 는 동적 오브젝트의 모습을 나타내므로, 가변성이 상대적으로 뛰어날 수 있다. 뼈대 데이터 는 점과 선과 같은 간단하게 구성되므로 용량이 작은 반면, 기초 이미지 데이터 는 이 미지인 이상 상대적으로 용량이 클 수 있다. 클라이언트 는 상대적으로 용량이 작은 뼈대 데이터 를 미리 메모리에 로드하여 두고, 상대적으로 용량이 큰 기초 이미지 데이터 는 필요한 경우에만 서버 로부터 실시간으로 수신할 수 있다. 예를 들어, 도 6 을 참조하면, 사용자의 캐릭터가 게임 데이터 에 의해 표현되는 장소에는 진입하였지만, 아직 연기가 나는 집으로부터 멀리 있는 경우, 해당 연기가 실제 디스플레이될 것인지 모호한 상황에서 연기와 관련된 기초 이미지 데이터 를 수신하는 것은 낭비일 수 있다. 따라서, 사용자의 캐릭터가 연기가 나는 집에 가까워질 경우, 클라이언트 로 하여금 서버 로부터 기초 이미지 데이터 를 수신하여 게임 데이터를 생성하게 함으로써, 클라이언트 의 리소스 가 절약될 수 있다. 기초 이미지 데이터 를 실시간으로 수신하고, 뼈대 데이터 를 미리 수신하는 실시예가 설명되었으나, 이에 제한되지 않으며, 일 실시예에 따르면 뼈대 데이터 가 실시간으로 수신되고, 기초 이미지 데이터 가 미리 수신될 수도 있다. 일 실시예에 따르면, 다른 사용자의 액션으로부터 기인한 이펙트 데이터가 서버 로부터 클라이언트 에게 실시간으로 수신될 수 있다. 예를 들어, 다른 사용자의 마법사 캐릭터인 경우, 그 마법사 캐릭터가 시전할 수 있는 모든 마법에 대한 이미지 데이터를 수신하는 것은, 어떤 마법이 시전될지 모호한 상황에서 클라 이언트 의 리소스를 낭비하는 것일 수 있다. 따라서, 다른 사용자의 액션이 실제로 취해진 경우, 예를 들어, 해당 액션을 트리거링하는 커맨드가 입력된 경우, 클라이언트 는 서버 로부터 해당 이펙트 데이터를 수신하고, 수신된 이펙트 데이터로부터 게임 데이터를 생성하여 디스플레이할 수 있다. 이로써, 이펙 트 데이터를 미리 수신함으로써 발생하는 낭비가 방지될 수 있다. 또한, 커맨드가 입력된 순간부터 해당 액션이 실제로 발동되는 순간 까지는 소정의 딜레이가 적용될 수 있다. 예를 들어, 사용자의 마법사 캐릭터가 특정 마 법을 시전하는 경우, 해당 마법이 발동되는 순간까지, 실제 주문을 외우는 (spell) 시간만큼의 딜레이가 있을 수 있다. 따라서, 이러한 딜레이 시간 동안, 해당 액션으로부터 기인한 이펙트 데이터가 클라이언트에게 수신되 어 게임 데이터가 생성될 수 있다. 도 7 은 일 실시예에 따라 서버에서 오브젝트 데이터를 러닝 (learning) 하여 전송하는 방법의 흐름도이다. 단계 710 에서 서버는 인공지능 알고리즘을 이용하여 오브젝트 데이터에 대해 머신러닝 모델을 트레이닝시킨다. 인공지능 알고리즘을 이용하여 오브젝트 데이터에 대해 머신러닝 모델을 트레이닝시키는 과정은 위에서 도 5 를 참조하여 설명되어 있다. 단계 720 에서 서버는 클라이언트에게 오브젝트 데이터를 전송할 수 있다. 서버는 오브젝트 데이터를 포함한, 온라인 게임의 실행 또는 온라인 게임 내 오브젝트를 표현하는데 필요한 데이터를 패킹할 수 있고, 클라이언트 에게 패킹된 데이터를 전송할 수도 있다. 즉, 오브젝트 데이터는 패킹된 데이터 중 일부일 수 있다. 오브젝트 데이터를 포함하는, 온라인 게임의 패킹된 데이터는, 클라이언트로부터 온라인 게임 설치 요청 수신 시 클라이 언트에게 전송하거나, 클라이언트의 온라인 게임의 실행 요청 수신 시 클라이언트에게 전송할 수 있으나, 이에 제한되지 않는다. 서버가 클라이언트에게 오브젝트 데이터를 전송함으로써, 클라이언트는 인공지능 알고리즘 프레임워크 및 오브 젝트 데이터에 기초하여 게임 데이터를 생성하고 디스플레이할 수 있다. 클라이언트가 알고리즘 프레임워크 및 오브젝트 데이터에 기초하여 게임 데이터를 생성하는 과정은 위에서 도 2, 3, 4, 및 6 을 참조하여 설명되어 있 다. 도 8 은 일 실시예에 따른 클라이언트의 블록도이다. 도 8 에 도시된 바와 같이 클라이언트 는 메모리 , 프로세서 , 통신 인터페이스 , 디 스플레이 , 및 입력 인터페이스 를 포함할 수 있다. 그러나, 도 8 에 도시된 구성 요소가 모두 클라이언트 의 필수 구성 요소인 것은 아니다. 도 8 에 도시된 구성 요소보다 더 많거나 더 적은 구성 요소에 의해 클라이언트 가 구현될 수 있다. 클라이언트 의 메모리 , 프로세서 , 및 통신 인터페이스 에 대한 설명은 전술된 서 버 의 메모리 , 프로세서 , 및 통신 인터페이스 을 참조할 수 있다. 메모리 는 클라이언트 로 하여금 본 개시의 실시예에 따른 다양한 동작들을 실행할 수 있게 하는 인스트럭션을 저장할 수 있다. 일 실시예에서 메모리 는 게임 및 그에 관한 데이터를 저장할 수 있다. 프로세서 는 메모리 에 저장된 인스트럭션을 실행하여, 클라이언트 로 하여금 본 개시의 다양한 실시예에 따른 다양한 동작들을 수행하도록 구성될 수 있다. 일 실시예에서 프로세서 는 메모리 에 저장된 게임을 실행하거나, 그 게임에 관한 데이터를 불러올 수 있다. 본 개시의 다양한 실시예에 따른 정보의 전달은 통신 인터페이스 를 통해 수행될 수 있다. 디스플레이 는 프로세서 에 의해 처리되는 정보를 가시화 (visualization) 하는 구성요소이다. 프로세서 에 의해 디스플레이되는 정보는 디스플레이 통해 가시화될 수 있다. 디스플레이 는 액정 디스플레이 (liquid crystal display), 박막 트랜지스터 액정 디스플레이 (thin film transistor-liquid crystal display), 유기 발광 다이오드 (organic light-emitting diode), 플렉시블 디스플 레이 (flexible display), 3차원 디스플레이 (3D display), 전기영동 디스플레이 (electrophoretic display) 중에서 적어도 하나를 포함할 수 있다. 디스플레이와 터치패드가 레이어 구조를 이루어 터치 스크린으로 구성 되는 경우, 디스플레이는 입력 인터페이스 로도 기능할 수 있다. 입력 인터페이스 는 클라이언트 와 그 클라이언트 를 사용하는 사용자가 서로 인터랙션 (interaction) 할 수 있도록 설계된 구성요소이다. 입력 인터페이스 는 키 패드 (key pad), 돔 스위치 (dome switch), 터치 패드 (접촉식 정전 용량 방식, 압력식 저항막 방식, 적외선 감지 방식, 표면 초음파 전도 방식, 적분식 장력 측정 방식, 피에조 효과 방식 등), 조그 휠, 및 조그 스위치일 수 있으나, 이에 제한되지 않 는다. 도 9 는 일 실시예에 따른 서버의 블록도이다. 도 9 에 도시된 바와 같이 서버 는 메모리 , 프로세서 , 및 통신 인터페이스 를 포 함할 수 있다. 그러나, 도 9 에 도시된 구성 요소가 모두 서버 의 필수 구성 요소인 것은 아니다. 도 9 에 도시된 구성 요소들보다 더 많거나 더 적은 구성 요소에 의해 서버 가 구현될 수 있다. 메모리 는 프로세서 의 처리 및 제어를 위한 프로그램, 또는 프로그램을 구성하는 인스트럭션 (instruction) 을 저장할 수 있고, 서버 로 입력되거나 서버 로부터 출력되는 데이터를 저장할 수도 있다. 메모리 는 서버 로 하여금 본 개시의 실시예에 따른 다양한 동작들을 실행할 수 있게 하는 인스 트럭션을 저장할 수 있다. 나아가, 메모리 는 온라인 게임을 서비스하는데 필요한 정보를 저장할 수 있 다. 예를 들어, 메모리 는 사용자의 계정, 캐릭터, 및 아이템에 관한 정보를 저장할 수 있으나, 이에 제한되지 않고 다양한 정보를 저장할 수 있다. 메모리 는 플래시 메모리 타입 (flash memory type), 하드디스크 타입 (hard disk type), 멀티미디어 카드 마이크로 타입 (multimedia card micro type), 카드 타입의 메모리 (예를 들어 SD 또는 XD 메모리 등), 램 (RAM, Random Access Memory) SRAM (Static Random Access Memory), 롬 (ROM, Read-Only Memory), EEPROM (Electrically Erasable Programmable Read-Only Memory), PROM (Programmable Read-Only Memory), 자기 메모 리, 자기 디스크, 광디스크 중 적어도 하나의 타입의 저장매체를 포함할 수 있다. 메모리 에 저장된 프 로그램들은 그 기능에 따라 복수 개의 모듈들로 구분될 수도 있다. 프로세서 는 통상적으로 서버 의 전반적인 동작을 제어한다. 예를 들어, 프로세서 는 메 모리 에 저장된 프로그램을 실행함으로써, 서버 에 포함된 구성 요소들을 제어할 수 있다. 프로 세서 는 복수의 프로세서들, 예를 들어, 하나 이상의 중앙 프로세싱 유닛 (central processing unit: CPU) 들, 하나 이상의 그래픽 프로세싱 유닛 (graphic processing unit: GPU) 들, 또는 이들의 조합으로 구성 될 수 있다. 프로세서 는 메모리 에 저장된 인스트럭션을 실행하여, 서버 로 하여금 본 개시의 다양한 실시예에 따른 다양한 동작들을 수행하도록 구성될 수 있다. 통신 인터페이스 는 서버 가 다른 디바이스들과 통신할 수 있도록 소정의 표준에 부합되도록 설 계된 전자 회로일 수 있다. 통신 인터페이스 은 블루투스 통신 인터페이스, BLE (Bluetooth Low Energy) 통신 인터페이스, 근거리 자기장 통신 인터페이스 (Near Field Communication), 와이파이 (wireless fidelity: WIFI) 통신 인터페이스, 지그비 (Zigbee) 통신 인터페이스, 적외선 (infrared Data Association: IrDA) 통신 인터페이스, WFD (Wi-Fi Direct) 통신 인터페이스, UWB (ultra wideband) 통신 인터페이스, Ant+ 통신 인터페이스, 3G 통신 인터페이스, LTE 통신 인터페이스, 및 5G 통신 인터페이스일 수 있으나, 이에 제한되지 않는다. 본 개시의 다양한 실시예에 따른 정보의 전달은 통신 인터페이스 를 통해 수행될 수 있다. 이상에서 설명된 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치 및 구성요소는, 예를 들어, 프로 세서, 콘트롤러, ALU (arithmetic logic unit), 디지털 신호 프로세서 (digital signal processor), 마이크로 컴퓨터, FPGA (field programmable gate array), PLU (programmable logic unit), 마이크로프로세서, 또는 명령 (instruction) 을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제 (operating system: OS) 및 운영 체제 상에서 수행되는 하나 이상의 소프트웨어 어플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응 답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가"}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "사용되는 것으로 설명된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소 (processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프 로세서 (parallel processor) 와 같은, 다른 처리 구성 (processing configuration) 도 가능하다. 소프트웨어는 컴퓨터 프로그램 (computer program), 코드 (code), 명령 (instruction), 또는 이들 중 하나 이 상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소 (component), 물리적 장치, 가 상 장치 (virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파 (signal wave) 에 영구적 으로, 또는 일시적으로 구체화 (embody) 될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분 산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 하나 이상의 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단 독으로 또는 조합하여 포함할 수 있다. 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구 성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체 (magnetic media), CD-ROM, DVD와 같은 광기록 매체 (optical media), 플롭티컬 디스크 (floptical disk) 와 같은 자기-광 매체 (magneto- optical media), 및 롬 (ROM), 램 (RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별 히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다. 상기 된 하드웨어 장치는 실시예의 동작을 수행하기 위해 하나 이상의 소프트웨어 모듈로서 작동하도록 구성될 수 있 으며, 그 역도 마찬가지이다."}
{"patent_id": "10-2018-0104026", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9"}
{"patent_id": "10-2018-0104026", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1 은 일 실시예에 따른 서버 및 클라이언트를 포함하는 온라인 게임 제공 시스템을 도시한다. 도 2 는 일 실시예에 따라 오브젝트 데이터를 이용하여 게임 데이터를 생성하는 방법을 설명하기 위한 도면이다. 도 3 은 일 실시예에 따라 오브젝트 데이터를 이용하여 게임 데이터를 생성하는 방법의 흐름도이다. 도 4 는 일 실시예에 따라 정적 오브젝트 데이터 및 동적 오브젝트 데이터를 이용하여 게임 데이터를 생성하는 방법을 설명하기 위한 도면이다. 도 5 는 일 실시예에 따른 인공지능 알고리즘을 설명하기 위한 도면이다. 도 6 은 일 실시예에 따라 동적 오브젝트 데이터를 이용하여 게임 데이터를 생성하는 방법을 설명하기 위한 도 면이다. 도 7 은 일 실시예에 따라 서버에서 오브젝트 데이터에 대해 트레이닝하여 전송하는 방법의 흐름도이다. 도 8 은 일 실시예에 따른 클라이언트의 블록도이다. 도 9 는 일 실시예에 따른 서버의 블록도이다."}
