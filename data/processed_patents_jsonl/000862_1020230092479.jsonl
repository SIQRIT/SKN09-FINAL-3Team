{"patent_id": "10-2023-0092479", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0012350", "출원번호": "10-2023-0092479", "발명의 명칭": "악성코드 탐지 모델을 위한 시스템 API의 최적 길이 도출 방법 및 시스템", "출원인": "주식회사 포테이토넷", "발명자": "신경아"}}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "악성코드 탐지 모델을 위해 시스템 API의 최적 길이를 도출하는 시스템에 의한 시스템 API의 최적 길이 도출 방법에 있어서,정상 파일과 악성 파일 각각에 대한 시스템 API(Application Programming Interface)를 추출하여 제1 변환 데이터로 변환하는 전처리 단계;상기 제1 변환 데이터를 학습 데이터로 학습하여 악성코드 분류 모델을 구축하는 모델 구축 단계; 및 상기 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출하여 제2 변환 데이터로 변환하고, 상기제2 변환 데이터의 누적 합계를 산출하여 제3 변환 데이터로 변환하며, 상기 제2 변환 데이터와 상기 제3 변환데이터를 이용하여 시스템 API의 최적 길이를 도출하는 도출 단계를 포함하는 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 전처리 단계는상기 정상 파일과 상기 악성 파일 각각에서 상기 시스템 API를 추출하는 단계; 및상기 시스템 API를 추출하여 상기 제1 변환 데이터로 전처리하는 단계를 포함하는, 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 추출하는 단계는PE(Portable Executable) 포맷의 EXE 파일의 상기 정상 파일 및 상기 악성 파일을 획득하는, 시스템 API의 최적길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,상기 전처리하는 단계는상기 시스템 API를 워드투벡터(Word2Vec)로 학습시켜 룩업(Lookup) 테이블을 생성하고, 상기 생성된 룩업 테이블을 이용하여 상기 제1 변환 데이터로 변환하며,상기 제1 변환 데이터는상기 정상 파일과 상기 악성 파일 각각의 문맥 정보와 순서 정보를 포함하는, 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 모델 구축 단계는전처리한 정상 파일과 악성 파일인 상기 제1 변환 데이터를 학습 데이터로 사용하여 학습 모델을 학습시켜 상기악성코드 분류 모델을 구축하는, 시스템 API의 최적 길이 도출 방법.공개특허 10-2025-0012350-3-청구항 6 제5항에 있어서,상기 악성코드 분류 모델은0과 1로 결과를 산출하며, 0은 정상 파일, 1은 악성 파일로 분류하는, 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5항에 있어서,상기 모델 구축 단계는적어도 하나 이상의 악성코드 유형이 존재하는 경우, 각 악성 유형별로 상기 악성코드 분류 모델을 생성하는 것을 특징으로 하는, 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 도출 단계는상기 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출하는 제1 단계;변수 중요도(feature importance)를 상기 제2 변환 데이터로 변환하는 제2 단계;상기 제2 변환 데이터의 누적 합계를 산출하여 상기 제3 변환 데이터로 변환하는 제3 단계; 및상기 제3 변환 데이터에 대하여 다음 학습 데이터로 사용할 시스템 API의 최적 길이를 탐색하는 제4 단계를 포함하는 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 제2 단계는워드투벡터(Word2Vec)의 디멘션 사이즈(dimension size) 단위로 통합하여 시간대별 중요도를 포함한 상기 제2변환 데이터를 변환하는, 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서,상기 제3 단계는상기 제2 변환 데이터가 기 설정된 기준보다 크게 발생할 때 또는 상기 제3 변환 데이터에서 상기 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 크게 발생할 때 악성 행위가 발생함을 감지하고, 상기 제2 변환 데이터가 기 설정된 기준보다 작게 발생할 때 또는 상기 제2 변환 데이터의 누적 합계 차이가 기설정된 기준보다 작게 발생할 때 일반적인 행위가 발생함을 감지하는, 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제8항에 있어서,상기 탐색된 시스템 API의 최적 길이는재학습 시, 상기 전처리 단계에서 시스템 API 길이를 제한하는데 사용되는, 시스템 API의 최적 길이 도출 방법."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "악성코드 탐지 모델을 위해 시스템 API의 최적 길이를 도출하는 시스템에 있어서,정상 파일과 악성 파일 각각에 대한 시스템 API(Application Programming Interface)를 추출하여 제1 변환 데공개특허 10-2025-0012350-4-이터로 변환하는 전처리부;상기 제1 변환 데이터를 학습 데이터로 학습하여 악성코드 분류 모델을 구축하는 모델 구축부; 및 상기 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출하여 제2 변환 데이터로 변환하고, 상기제2 변환 데이터의 누적 합계를 산출하여 제3 변환 데이터로 변환하며, 상기 제2 변환 데이터와 상기 제3 변환데이터를 이용하여 시스템 API의 최적 길이를 도출하는 도출부를 포함하는 시스템 API의 최적 길이 도출 시스템."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,상기 전처리부는상기 정상 파일과 상기 악성 파일 각각에서 상기 시스템 API를 추출하여 상기 제1 변환 데이터로 전처리하며, 상기 정상 파일 및 상기 악성 파일은PE(Portable Executable) 포맷의 EXE 파일인, 시스템 API의 최적 길이 도출 시스템."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 전처리부는상기 시스템 API를 워드투벡터(Word2Vec)로 학습시켜 룩업(Lookup) 테이블을 생성하고, 상기 생성된 룩업 테이블을 이용하여 상기 제1 변환 데이터로 변환하며,상기 제1 변환 데이터는상기 정상 파일과 상기 악성 파일 각각의 문맥 정보와 순서 정보를 포함하는, 시스템 API의 최적 길이 도출 시스템."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 모델 구축부는전처리한 정상 파일과 악성 파일인 상기 제1 변환 데이터를 학습 데이터로 사용하여 학습 모델을 학습시켜 상기악성코드 분류 모델을 구축하는, 시스템 API의 최적 길이 도출 시스템."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서,상기 모델 구축부는적어도 하나 이상의 악성코드 유형이 존재하는 경우, 각 악성 유형별로 상기 악성코드 분류 모델을 생성하는 것을 특징으로 하는, 시스템 API의 최적 길이 도출 시스템."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제12항에 있어서,상기 도출부는워드투벡터(Word2Vec)의 디멘션 사이즈(dimension size) 단위로 통합하여 시간대별 중요도를 포함한 상기 제2변환 데이터를 변환하는, 시스템 API의 최적 길이 도출 시스템."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,공개특허 10-2025-0012350-5-상기 도출부는상기 제2 변환 데이터가 기 설정된 기준보다 크게 발생할 때 또는 상기 제3 변환 데이터에서 상기 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 크게 발생할 때 악성 행위가 발생함을 감지하고, 상기 제2 변환 데이터가 기 설정된 기준보다 작게 발생할 때 또는 상기 제2 변환 데이터의 누적 합계 차이가 기설정된 기준보다 작게 발생할 때 일반적인 행위가 발생함을 감지하는, 시스템 API의 최적 길이 도출 시스템."}
{"patent_id": "10-2023-0092479", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제12항에 있어서,상기 시스템 API의 최적 길이는재학습 시, 상기 전처리부에서 시스템 API 길이를 제한하는데 사용되는, 시스템 API의 최적 길이 도출 시스템."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 악성코드 탐지에 사용되는 시스템 API(Application Programming Interface)의 최적 길이를 획득하기 위한 시스템 API의 최적 길이 도출 방법 및 시스템에 관한 것으로서, 정상 파일과 악성 파일 각각에 대한 시스템 API(Application Programming Interface)를 추출하여 제1 변환 데이터로 변환하는 전처리 단계, 상기 제1 변환 데이터를 학습 데이터로 학습하여 악성코드 분류 모델을 구축하는 모델 구축 단계 및 상기 악성코드 분류 모델에 서 변수 중요도(feature importance)를 추출하여 제2 변환 데이터로 변환하고, 상기 제2 변환 데이터의 누적 합 계를 산출하여 제3 변환 데이터로 변환하며, 상기 제2 변환 데이터와 상기 제3 변환 데이터를 이용하여 시스템 API의 최적 길이를 도출하는 도출 단계를 포함한다."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 악성코드 탐지 모델을 위한 시스템 API의 최적 길이 도출 방법 및 시스템에 관한 것으로서, 보다 상 세하게는 악성코드 탐지에 사용되는 시스템 API(Application Programming Interface)의 최적 길이를 획득하기 위한 기술에 관한 것이다."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "악성코드는 오늘날 주요 사이버 보안 위협 중 하나이며, 매년 복잡성과 공격 벡터의 다양한 측면에서 진화하여 알려지지 않은 악성코드의 감염으로부터 단말기를 보호하기가 어려워지고 있다. 특히, 실행형 악성코드의 악성코드 탐지는 실시간으로 악성코드를 탐지해야 하는 시간적 제약으로 인하여 룰 기 반, 정적 분석의 방법으로 상용화하고 있다. 그러나, 신규 악성코드나 변종 악성코드의 정확하고 구체적인 분석을 위해서는 동적 분석이 필요하다. 악성코 드의 동적 분석은 악성코드를 독립된 가상 환경에서 실행시켜 그 행위를 분석화하는 방법이다. 이러한 분석전문가의 수작업 분석을 대체하는 보안 AI 시스템은 자동화 탐지를 위해 고정된 길이의 시계열 분석 을 수행한다. 한편, 시스템 API는 응용 프로그램이 실행을 위해 운영체제에 자원(서비스)을 요청하는 절차로써, 응용 프로그 램과 운영체제 사이의 인터페이스로 호출된 일련의 API를 나타낸다. 시스템 API 시퀀스는 악성코드 동작 식별 에 유용한 정보를 제공하며 분류 정확도에 영향을 미치기 때문에 적합한 API 시퀀스의 길이를 선택하는 것이 매 우 중요하다."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 목적은 실행형 악성코드의 동적 분석을 위해 악성코드 탐지 모델을 제공하고자 한다. 본 발명의 목적은 악성코드 분류 정확도를 보다 높일 수 있는 시스템 API의 수집 방법을 제공하고자 한다. 본 발명의 목적은 악성코드 탐지를 위한 최적의 시스템 API의 시퀀스 길이를 획득하고자 한다. 다만, 본 발명이 해결하고자 하는 기술적 과제들은 상기 과제로 한정되는 것은 아니며, 본 발명의 기술적 사상 및 영역으로부터 벗어나지 않은 범위에서 다양하게 확장될 수 있다."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 실시예에 따른 악성코드 탐지 모델을 위해 시스템 API의 최적 길이를 도출하는 시스템에 의한 시스템 API의 최적 길이 도출 방법에 있어서, 정상 파일과 악성 파일 각각에 대한 시스템 API(Application Programming Interface)를 추출하여 제1 변환 데이터로 변환하는 전처리 단계, 상기 제1 변환 데이터를 학습 데이터로 학습하여 악성코드 분류 모델을 구축하는 모델 구축 단계 및 상기 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출하여 제2 변환 데이터로 변환하고, 상기 제2 변환 데이터의 누적 합계를 산출하여 제3 변환 데이터로 변환하며, 상기 제2 변환 데이터와 상기 제3 변환 데이터를 이용하여 시스템 API의 최적 길이를 도출 하는 도출 단계를 포함한다. 상기 전처리 단계는 상기 정상 파일과 상기 악성 파일 각각에서 상기 시스템 API를 추출하는 단계 및 상기 시스 템 API를 추출하여 상기 제1 변환 데이터로 전처리하는 단계를 포함할 수 있다. 상기 추출하는 단계는 PE(Portable Executable) 포맷의 EXE 파일의 상기 정상 파일 및 상기 악성 파일을 획득할 수 있다. 상기 전처리하는 단계는 상기 시스템 API를 워드투벡터(Word2Vec)로 학습시켜 룩업(Lookup) 테이블을 생성하고, 상기 생성된 룩업 테이블을 이용하여 상기 제1 변환 데이터로 변환하며, 상기 제1 변환 데이터는 상기 정상 파 일과 상기 악성 파일 각각의 문맥 정보와 순서 정보를 포함할 수 있다. 상기 모델 구축 단계는 전처리한 정상 파일과 악성 파일인 상기 제1 변환 데이터를 학습 데이터로 사용하여 학 습 모델을 학습시켜 상기 악성코드 분류 모델을 구축할 수 있다. 상기 악성코드 분류 모델은 0과 1로 결과를 산출하며, 0은 정상 파일, 1은 악성 파일로 분류할 수 있다. 상기 모델 구축 단계는 적어도 하나 이상의 악성코드 유형이 존재하는 경우, 각 악성 유형별로 상기 악성코드 분류 모델을 생성할 수 있다. 상기 도출 단계는 상기 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출하는 제1 단계, 변수 중요도(feature importance)를 상기 제2 변환 데이터로 변환하는 제2 단계, 상기 제2 변환 데이터의 누적 합계 를 산출하여 상기 제3 변환 데이터로 변환하는 제3 단계 및 상기 제3 변환 데이터에 대하여 다음 학습 데이터로 사용할 시스템 API의 최적 길이를 탐색하는 제4 단계를 포함할 수 있다. 상기 제2 단계는 워드투벡터(Word2Vec)의 디멘션 사이즈(dimension size) 단위로 통합하여 시간대별 중요도를 포함한 상기 제2 변환 데이터를 변환할 수 있다. 상기 제3 단계는 상기 제2 변환 데이터가 기 설정된 기준보다 크게 발생할 때 또는 상기 제3 변환 데이터에서 상기 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 크게 발생할 때 악성 행위가 발생함을 감지하고, 상기 제2 변환 데이터가 기 설정된 기준보다 작게 발생할 때 또는 상기 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 작게 발생할 때 일반적인 행위가 발생함을 감지할 수 있다. 상기 탐색된 시스템 API의 최적 길이는 재학습 시, 상기 전처리 단계에서 시스템 API 길이를 제한하는데 사용될 수 있다. 본 발명의 실시예에 따른 악성코드 탐지 모델을 위해 시스템 API의 최적 길이를 도출하는 시스템에 있어서, 정 상 파일과 악성 파일 각각에 대한 시스템 API(Application Programming Interface)를 추출하여 제1 변환 데이 터로 변환하는 전처리부, 상기 제1 변환 데이터를 학습 데이터로 학습하여 악성코드 분류 모델을 구축하는 모델 구축부 및 상기 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출하여 제2 변환 데이터로 변환 하고, 상기 제2 변환 데이터의 누적 합계를 산출하여 제3 변환 데이터로 변환하며, 상기 제2 변환 데이터와 상 기 제3 변환 데이터를 이용하여 시스템 API의 최적 길이를 도출하는 도출부를 포함한다. 상기 전처리부는 상기 정상 파일과 상기 악성 파일 각각에서 상기 시스템 API를 추출하여 상기 제1 변환 데이터 로 전처리하며, 상기 정상 파일 및 상기 악성 파일은 PE(Portable Executable) 포맷의 EXE 파일일 수 있다. 상기 전처리부는 상기 시스템 API를 워드투벡터(Word2Vec)로 학습시켜 룩업(Lookup) 테이블을 생성하고, 상기 생성된 룩업 테이블을 이용하여 상기 제1 변환 데이터로 변환하며, 상기 제1 변환 데이터는 상기 정상 파일과 상기 악성 파일 각각의 문맥 정보와 순서 정보를 포함할 수 있다. 상기 모델 구축부는 전처리한 정상 파일과 악성 파일인 상기 제1 변환 데이터를 학습 데이터로 사용하여 학습 모델을 학습시켜 상기 악성코드 분류 모델을 구축할 수 있다. 상기 모델 구축부는 적어도 하나 이상의 악성코드 유형이 존재하는 경우, 각 악성 유형별로 상기 악성코드 분류 모델을 생성할 수 있다. 상기 도출부는 워드투벡터(Word2Vec)의 디멘션 사이즈(dimension size) 단위로 통합하여 시간대별 중요도를 포 함한 상기 제2 변환 데이터를 변환할 수 있다. 상기 도출부는 상기 제2 변환 데이터가 기 설정된 기준보다 크게 발생할 때 또는 상기 제3 변환 데이터에서 상 기 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 크게 발생할 때 악성 행위가 발생함을 감지하고, 상기 제2 변환 데이터가 기 설정된 기준보다 작게 발생할 때 또는 상기 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 작게 발생할 때 일반적인 행위가 발생함을 감지할 수 있다. 상기 시스템 API의 최적 길이는 재학습 시, 상기 전처리부에서 시스템 API 길이를 제한하는데 사용될 수 있다."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시예에 따르면, 시스템 API를 이용하여 악성코드 분류 모델을 구축함으로써, 악성코드가 포함된 실 행파일의 유입을 방지할 수 있다. 본 발명의 실시예에 따르면, 정상인지 악성인지 확인이 필요한 파일에 대하여 악성코드 각각의 유형마다 모델을 생성함으로써, 악성코드 유형에 제한없이 악성코드가 포함된 실행파일의 유입을 방지할 수 있다. 본 발명의 실시예에 따르면, 악성 행위가 발생하는 구간에 대하여 악성코드 분류 모델을 이용함으로써, 적절한 시스템 API의 시퀀스 길이를 획득하여 악성코드 분류 정확도를 높일 수 있다."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "다만, 본 발명의 효과는 상기 효과들로 한정되는 것은 아니며, 본 발명의 기술적 사상 및 영역으로부터 벗어나 지 않는 범위에서 다양하게 확장될 수 있다."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 상세하게 후술되어 있는 실시 예들을 참조하면 명확해질 것이다. 그러나, 본 발명은 이하에서 개시되는 실시예들에 한정되는 것이 아니라 서 로 다른 다양한 형태로 구현될 것이며, 단지 본 실시예들은 본 발명의 개시가 완전하도록 하며, 본 발명이 속하"}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "는 기술분야에서 통상의 지식을 가진 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것이며, 본 발명 은 청구항의 범주에 의해 정의될 뿐이다. 본 명세서에서 사용된 용어는 실시예들을 설명하기 위한 것이며, 본 발명을 제한하고자 하는 것은 아니다. 본 명세서에서, 단수형은 문구에서 특별히 언급하지 않는 한 복수형도 포함한다. 명세서에서 사용되는 \"포함한다 (comprises)\" 및/또는 \"포함하는(comprising)\"은 언급된 구성요소, 단계, 동작 및/또는 소자는 하나 이상의 다 른 구성요소, 단계, 동작 및/또는 소자의 존재 또는 추가를 배제하지 않는다. 다른 정의가 없다면, 본 명세서에서 사용되는 모든 용어(기술 및 과학적 용어를 포함)는 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자에게 공통적으로 이해될 수 있는 의미로 사용될 수 있을 것이다. 또한, 일반적 으로 사용되는 사전에 정의되어 있는 용어들은 명백하게 특별히 정의되어 있지 않는 한 이상적으로 또는 과도하 게 해석되지 않는다. 이하, 첨부한 도면들을 참조하여, 본 발명의 바람직한 실시예들을 보다 상세하게 설명하고자 한다. 도면 상의 동일한 구성요소에 대해서는 동일한 참조 부호를 사용하고 동일한 구성요소에 대해서 중복된 설명은 생략한다.본 발명은 악성코드 탐지에 사용되는 시스템 API(Application Programming Interface)의 최적 길이를 획득하여 악성코드 분류 정확도를 높이기 위한 기술을 제안한다. 본 발명에서 ‘시스템 API’는 응용 프로그램이 실행을 위해 운영체제에 자원(서비스)을 요청하는 절차를 나타 낸다. 응용 프로그램과 운영체제 사이의 인터페이스로써 호출된 일련의 API를 ‘시스템 API’라고 한다. 또한, 본 발명에서 ‘시스템 API 시퀀스’는 시스템 API가 나열된 형태를 나타낸 것으로, 악성 파일 동작 식별 에 유용한 정보를 제공한다. 이하에서는 특별히 명시되지 않은 이상 ‘시스템 API 시퀀스’는 ‘시스템 API’ 라고 명시한다. 이하에서는 도 1 내지 도 6을 참조하여 본 발명에 대해 상세히 설명하고자 한다. 도 1은 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 방법의 동작 흐름도를 도시한 것이다. 또한, 도 2는 본 발명의 실시예에 따른 전처리 단계의 세부적인 동작 흐름도를 도시한 것이고, 도 3은 본 발명의 실시예 에 따른 도출 단계의 세부적인 동작 흐름도를 도시한 것이며, 도 4는 본 발명의 실시예에 따른 도출 단계에서 변수 중요도를 제2 변환 데이터로 변환하는 단계의 세부적인 동작 흐름도를 도시한 것이다. 도 1을 참조하면, 악성코드 탐지를 위해 인공지능에 사용되는 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 방법은 단계 S110에서, 정상 파일과 악성 파일 각각에 대한 시스템 API(Application Programming Interface)를 추출하여 제1 변환 데이터로 변환한다. 보다 상세하게, 도 2를 참조하면, 단계 S110은 단계 S111, 단계 S112 단계 S113 및 단계 S114로 분류될 수 있으 며, 단계 S111은 쿠쿠 샌드박스(Cuckoo Sandbox) 가상환경을 생성할 수 있다. 단계 S112은 PE(Portable Executable) 포맷의 EXE 파일인 정상 파일과 악성 파일 각각을 획득하며, 정상 파일과 악성 파일 각각에서 시스 템 API를 추출할 수 있다. 단계 S112에서 시스템 API는 쿠쿠 샌드박스(Cuckoo Sandbox) 가상환경에서 악성 파 일과 정상 파일을 실행시켜 생성된 동적 분석보고서를 통해 수집할 수 있다. 실시예에 따라서, 몇몇 악성파일 은 가상환경에서 실행을 멈추고 시스템 API를 호출하지 않아 API 수집이 안될 수 있으므로, 가상머신에 안티 가 상머신(Anti-VM)을 우회하도록 설정할 필요가 있다. 단계 S114는 단계 S112에서 추출된 시스템 API를 제1 변환 데이터로 전처리할 수 있다. 단계 S114는 악성 파일 과 정상 파일에서 얻은 시스템 API에 대하여 제1 변환 데이터로 변환함으로써, 악성 파일과 정상 파일의 시스템 API를 전처리하고자 한다. 보다 상세하게, 단계 S113는 시스템 API를 워드투벡터(Word2Vec)로 학습시켜 시스템 API를 수치로 변환할 수 있 는 룩업(Lookup) 테이블을 생성하며, 단계 S114는 생성된 워드투벡터(Word2Vec) 룩업(Lookup) 테이블을 이용하 여 제1 변환 데이터로 변환할 수 있다. 이때, 제1 변환 데이터는 정상 파일과 악성 파일 각각의 문맥 정보와 순서 정보를 포함한다. 또한, 워드투벡터(Word2Vec)는 시퀀스 데이터의 문맥 정보를 표현하면서 순서 정보를 보존할 수 있는 가볍고 빠 른 워드 임베딩 방식을 나타낸다. 구체적으로, 워드투벡터(Word2Vec)는 문자열의 문맥 정보와 순서 정보를 포 함하여 학습된 모델이며, 단계 S114는 단계 S112에서 추출된 시스템 API를 학습이 끝난 후 생성된 시스템 API의 의미 정보를 담고 있는 룩업(Lookup) 테이블을 통해 제1 변환 데이터로 변환하여 학습할 수 있다. 악성 파일과 정상 파일의 시스템 API를 워드투벡터(Word2Vec) 모델에 학습하면, 시스템 API를 수치화한 룩업 (Lookup) 테이블이 생성된다. 이에, 단계 S113는 룩업(Lookup) 테이블을 사용하여 시스템 API를 벡터화할 수 있다. 예를 들어, ‘writeFile’이라는 API가 있고, 워드투벡터(Word2Vec)의 디멘션 사이즈(dimension size) 를 3이라고 한다면, 룩업(Lookup) 테이블을 보고 [3.5 -0.3 0.7]로 치환할 수 있다. 단계 S114는 [3.5 -0.3 0.7]의 룩업(Lookup) 테이블을 모든 악성 파일과 정상 파일의 시스템 API에 적용하여 제1 변환 데이터로 변환한 다. 이후에 도 1을 참조하면, 단계 S120에서, 제1 변환 데이터를 학습 데이터로 학습하여 악성코드 분류 모델을 구 축한다. 단계 S120은 단계 S110에서 전처리한 정상 파일과 악성 파일인 제1 변환 데이터를 학습 데이터로 사용하여 인공 지능 모델인 학습 모델을 학습시켜 악성코드 분류 모델을 구축할 수 있다. 악성 파일과 정상 파일을 학습 데이터로 학습하는 경우, 악성 파일과 정상 파일은 1대 1의 비율로 학습할 수 있다. 만약, 어느 한쪽에 데이터 양 이 더 많다면 편향적으로 학습되어 정확한 결과를 얻기 힘들 수 있으므로, 악성 파일과 정상 파일의 비율을 1대 1로 설정하여 학습함으로써, 보다 정확한 학습 결과를 도출할 수 있다. 이 때, 악성코드 분류 모델은 변수 중요도(Feature Importance)를 추출할 수 있는 모델로 LightGBM, XGBoost와 그 외 모델일 수 있으며, 학습 진행 후 제1 변환 데이터로부터 생성한 변수 중요도(Feature Importance)를 사용 하여 제2 변환 데이터로 변환하여 학습할 수 있다. 여기서, 악성 파일과 정상 파일을 학습 데이터로써 사용하 는 학습 모델은 다양하며, 본 발명은 최적의 시스템 API 길이를 탐색하기 위해, 변수 중요도(Feature Importance)를 추출할 수 있는 모델 중에서 XGBoost(eXtreme Gradient Boosting)를 사용한다. XGBoost는 기본 학습기(Base Learner)를 의사결정나무로 하며 Gradient Boosting과 같이 Gradient(잔차)를 이용하여 이전 모형 의 약점을 보완하는 방식으로 학습한다. XGBoost는 병렬 처리로 학습, 분류 속도가 빨라 GBM(Gradient Boosting Model) 대비 수행시간이 빠르다. 본 발명의 악성코드 분류 모델인 XGBoost 분류 모델은 예측 결과를 0과 1로 도출하는데, 0은 정상 파일을 나타 내고, 1은 악성 파일을 나타낸다. 나아가, 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 방법은 적어 도 하나 이상의 악성코드 유형이 존재하는 경우 즉, 악성코드를 여러 유형으로 분류하는 다중 분류 문제 발생 시, 각각의 유형마다 모델을 생성 및 학습하는 것을 특징으로 한다. 예를 들어, Trojan, Worm, Adware 세 가지 유형의 악성코드가 있을 때, 단계 S120은 모델을 각각 만들어 준다. 첫 번째 모델은 Trojan이 1이고 나머지는 0으로, 두 번째 모델은 Worm이 1이고 나머지는 0으로, 마지막 모델은 Adware는 1이고 나머지는 0으로 분류하게 할 수 있다. 단계 S130에서, 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출하여 제2 변환 데이터로 변환 하고, 제2 변환 데이터의 누적 합계를 산출하여 제3 변환 데이터로 변환하며, 제2 변환 데이터와 제3 변환 데이 터를 이용하여 시스템 API의 최적 길이를 도출한다. 단계 S130은 악성코드 분류 모델을 이용하여 사용할 시스 템 API의 최적 길이를 찾는다. 보다 상세하게, 도 3을 참조하면, 단계 S130은 단계 S131 내지 단계 S133로 분류될 수 있으며, 단계 S133은 악 성코드 분류 모델에서 변수 중요도(feature importance)를 추출할 수 있다. 단계 S132은 제1 변환 데이터를 학습데이터로 사용하여 XGB분류 모델을 학습하며, 단계 S133은 학습된 모델에서 변수 중요도를 추출한다. 워드투벡터(Word2Vec)의 디멘션 사이즈(dimension size) 단위로 통합하여 시간대별 중 요도를 포함한 제2 변환 데이터를 변환할 수 있다. 이 때, 제2 변환 데이터는 악성코드 분류 모델에서 추출된 변수 중요도(feature importance)로부터 피처별 중요도를 나타낸 행렬을 나타낸다. 도 4를 참조하면, XGBoost로 분류 모델을 만들게 되면 악성코드 분류 모델에서 악성코드 유형별 시퀀스 순서에 따른 변수 중요도(feature importance)를 획득할 수 있다(단계 S410). 변수 중요도(feature importance)는 모 델 학습에 사용된 학습 데이터의 피처별로 모델 성능에 얼마나 영향을 주었는지를 나타낸다. 분류 모델을 생성 하는 데 사용된 학습 데이터는 시간대별 발생한 시스템 API 시퀀스이다. 따라서, 각 피처는 API 하나의 특징이 아니라 시간 흐름별 행위 특징을 보여준다. 즉, 변수 중요도(feature importance)를 통해 파일 실행 과정 중 중요 시간대를 확인할 수 있다. 다만, 워드투벡터(Word2Vec) 학습으로 생성된 룩업(Lookup) 테이블 값으로 API를 치환하기 때문에, 한 API 당 워드투벡터(Word2Vec) 모델을 학습한 당시에 설정했던 디멘션 사이즈(dimension size) 만큼씩 피처를 통합해야 한다. 그러므로, 변수 중요도(feature importance)를 뽑아낸 후 디멘션 사이즈(dimension size) 만큼 끊어서 합산한다. 예를 들면, 디멘션 사이즈(dimension size)를 3으로 설정했다면, API 1개를 나타내는 피처는 3개이 다. 즉, API 2개를 나타내는 피처는 다음과 같이 [0.001 0.123 0.005 0.013 0.146 0.095] 6개의 피처로 나타 나며, API 2개의 변수 중요도(feature importance)를 추출할 수 있다면 [0.129 0.254]로 변환할 수 있다. 이후에 제2 변환 데이터의 누적 변수 중요도(feature importance)를 도출할 수 있다(단계 S410). 단계 S420은 제2 변환 데이터의 누적 합계를 산출하여 제3 변환 데이터로 변환할 수 있다. 단계 S420은 제2 변 환 데이터에서 피처의 누적 합계를 산출하여 제3 변환 데이터를 생성하며, 제2 변환 데이터는 시계열 데이터이 기 때문에 단계 S420은 1번 피처부터 순서대로 중요도의 누적 합계를 산출하여 주요한 악성 행위가 발생하는 구 간을 알 수 있다. 또한, 단계 S420은 제2 변환 데이터가 기 설정된 기준보다 크게 발생할 때 또는 제3 변환 데이터에서 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 크게 발생할 때 악성 행위가 발생함을 감지하고, 제2 변환 데이터가 기 설정된 기준보다 작게 발생할 때 또는 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 작게"}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "발생할 때 일반적인 행위가 발생함을 감지할 수 있다. 여기서, 기 설정된 기준은 본 발명이 속하는 기술분야에 서 일반적으로 사용하는 기준일 수 있고, 본 발명의 관리 시스템 또는 관리자에 의해 설정될 수 있다. 단계 S430는 제3 변환 데이터에 대하여 다음 학습 데이터로 사용할 시스템 API의 최적 길이를 탐색할 수 있다. 여기서, 탐색된 시스템 API의 최적 길이는 재학습 시, 단계 S110의 전처리 과정에서 시스템 API 길이를 제한하 는데 사용될 수 있다. 이상에서 상술한 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 방법은 하드웨어인 컴퓨터가 결합되어 실행되기 위해 인공지능 기반 악성코드 분류 컴퓨터 프로그램(또는 애플리케이션)으로 구현되어 매체에 저장될 수 있다. 도 5는 도 4의 악성코드 시퀀스 순서에 따른 중요도를 나타내는 단계 S410에서 생성된 제2 변환데이터와 변수 중요도, 누적 변수 중요도(feature importance)를 도출하는 단계 S420에서 변환된 제3 변환 데이터를 예시적으 로 도시한 것이다. 도 5를 참조하면, 악성 유형별로 시간대별 변수 중요도(feature importance)를 확인할 수 있다. 대부분 유형이 앞쪽에서 중요도가 급격하게 올라가는 것으로 보아, 악성 행위는 주로 앞쪽에서 일어난다고 판단할 수 있다. 또한, 누적 합계가 90%가 되는 지점을 기준으로 하여 시스템 API 길이를 잘라 학습 데이터로 사용하여 주요 행 위가 나타나는 시스템 API만 학습 데이터로 사용할 수 있다. 따라서, 적절한 길이의 시스템 API를 사용하여 학습 성능을 높이고 학습 속도를 높일 수 있는 효과가 나타날 수 있다. 도 6은 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 시스템의 세부 구성을 블록도로 도시한 것이다. 도 6을 참조하면, 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 시스템은 악성코드 탐지에 사용되는 시스템 API(Application Programming Interface)의 최적 길이를 획득하여 악성코드 분류 정확도를 향상시킨다. 이를 위해, 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 시스템은 전처리부, 모델 구축부 및 도출부를 포함한다. 전처리부는 정상 파일과 악성 파일 각각에 대한 시스템 API(Application Programming Interface)를 추출 하여 제1 변환 데이터로 변환한다. 전처리부는 PE(Portable Executable) 포맷의 EXE 파일인 정상 파일과 악성 파일 각각을 획득하며, 정상 파 일과 악성 파일 각각에서 시스템 API를 추출할 수 있다. 전처리부에서 시스템 API는 쿠쿠 샌드박스 (Cuckoo Sandbox) 가상환경에서 악성 파일과 정상 파일을 실행시켜 생성된 동적 분석보고서를 통해 수집할 수 있다. 실시예에 따라서, 몇몇 악성파일은 가상환경에서 실행을 멈추고 시스템 API를 호출하지 않아 API 수집이 안될 수 있으므로, 가상머신에 안티 가상머신(Anti-VM)을 우회하도록 설정할 필요가 있다. 전처리부는 추출된 시스템 API를 제1 변환 데이터로 전처리할 수 있다. 전처리부는 악성 파일과 정상 파일에서 얻은 시스템 API에 대하여 제1 변환 데이터로 변환함으로써, 악성 파일과 정상 파일의 시스템 API를 전처리하고자 한다. 보다 상세하게, 전처리부는시스템 API를 워드투벡터(Word2Vec)로 학습시켜 룩업(Lookup) 테이블을 생성하 고, 생성된 룩업(Lookup) 테이블을 이용하여 제1 변환 데이터로 변환할 수 있다. 이때, 제1 변환 데이터는 정 상 파일과 악성 파일 각각의 문맥 정보와 순서 정보를 포함한다. 또한, 워드투벡터(Word2Vec)는 시퀀스 데이터의 문맥 정보를 표현하면서 순서 정보를 보존할 수 있는 가볍고 빠 른 워드 임베딩 방식을 나타낸다. 구체적으로, 워드투벡터(Word2Vec)는 문자열의 문맥 정보와 순서 정보를 포 함하여 학습된 모델이며, 전처리부는 추출된 시스템 API를 학습이 끝난 후 생성된 시스템 API의 의미 정보 를 담고 있는 룩업(Lookup) 테이블을 통해 제1 변환 데이터로 변환하여 학습할 수 있다. 악성 파일과 정상 파일의 시스템 API를 워드투벡터(Word2Vec) 모델에 학습하면, 단어를 수치화한 룩업(Lookup) 테이블이 생성된다. 이에, 전처리부는 룩업(Lookup) 테이블을 사용하여 시스템 API를 벡터화할 수 있다.예를 들어, ‘writeFile’이라는 API가 있고, 워드투벡터(Word2Vec)의 디멘션 사이즈(dimension size)를 3이라 고 한다면, 룩업(Lookup) 테이블을 보고 [3.5 -0.3 0.7]로 치환할 수 있다. 전처리부는 [3.5 -0.3 0.7] 의 룩업(Lookup) 테이블을 모든 악성 파일과 정상 파일의 시스템 API에 적용하여 제1 변환 데이터로 변환한다. 모델 구축부는 제1 변환 데이터를 학습 데이터로 학습하여 악성코드 분류 모델을 구축한다. 모델 구축부는 전처리부에서 전처리한 정상 파일과 악성 파일인 제1 변환 데이터를 학습 데이터로 사 용하여 인공지능 모델인 학습 모델을 학습시켜 악성코드 분류 모델을 구축할 수 있다. 악성 파일과 정상 파일 을 학습 데이터로 학습하는 경우, 악성 파일과 정상 파일은 1대 1의 비율로 학습할 수 있다. 만약, 어느 한쪽 에 데이터 양이 더 많다면 편향적으로 학습되어 정확한 결과를 얻기 힘들 수 있으므로, 악성 파일과 정상 파일 의 비율을 1대 1로 설정하여 학습함으로써, 보다 정확한 학습 결과를 도출할 수 있다. 이 때, 악성코드 분류 모델은 변수 중요도(Feature Importance)를 추출할 수 있는 모델로 LightGBM, XGBoost와 그 외 모델일 수 있으며, 학습 진행 후 제1 변환 데이터를 생성한 변수 중요도(Feature Importance)를 사용하여 제2 변환 데이터로 변환하여 학습할 수 있다. 여기서, 악성 파일과 정상 파일을 학습 데이터로써 사용하는 학 습 모델은 다양하며, 본 발명은 최적의 시스템 API 길이를 탐색하기 위해, 변수 중요도(Feature Importance)를 추출할 수 있는 모델 중에서 XGBoost(eXtreme Gradient Boosting)를 사용한다. XGBoost는 기본 학습기(Base Learner)를 의사결정나무로 하며 Gradient Boosting과 같이 Gradient(잔차)를 이용하여 이전 모형의 약점을 보 완하는 방식으로 학습한다. XGBoost는 병렬 처리로 학습, 분류 속도가 빨라 GBM(Gradient Boosting Model) 대 비 수행시간이 빠르다. 본 발명의 악성코드 분류 모델인 XGBoost 분류 모델은 예측 결과를 0과 1로 도출하는데, 0은 정상 파일을 나타 내고, 1은 악성 파일을 나타낸다. 나아가, 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 시스템(60 0)은 적어도 하나 이상의 악성코드 유형이 존재하는 경우 즉, 악성코드를 여러 유형으로 분류하는 다중 분류 문 제 발생 시, 각각의 유형마다 모델을 생성 및 학습하는 것을 특징으로 한다. 예를 들어, Trojan, Worm, Adware 세 가지 유형의 악성코드가 있을 때, 모델 구축부는 모델을 각각 만들어 준다. 첫 번째 모델은 Trojan이 1이고 나머지는 0으로, 두 번째 모델은 Worm이 1이고 나머지는 0으로, 마지막 모델은 Adware는 1이고 나머지는 0으로 분류하게 할 수 있다. 도출부는 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출하여 제2 변환 데이터로 변환하 고, 제2 변환 데이터의 누적 합계를 산출하여 제3 변환 데이터로 변환하며, 제2 변환 데이터와 제3 변환 데이터 를 이용하여 시스템 API의 최적 길이를 도출한다. 도출부는 악성코드 분류 모델을 이용하여 사용할 시스 템 API의 최적 길이를 찾는다. 보다 상세하게, 도출부는 악성코드 분류 모델에서 변수 중요도(feature importance)를 추출할 수 있다. 도출부는 최적의 시스템 API 길이를 탐색하기 위하여, 제2 변환 데이터를 생성할 수 있다. 도출부는 워드투벡터(Word2Vec)의 디멘션 사이즈(dimension size) 단위로 통합하여 시간대별 중요도를 포함한 제2 변환 데이터를 변환할 수 있다. 이 때, 제2 변환 데이터는 악성코드 분류 모델에서 추출된 변수 중요도(feature importance)로부터 피처별 중요도를 나타낸 행렬을 나타낸다. 도출부는 XGBoost로 분류 모델을 만들게 되면 악성코드 분류 모델에서 변수 중요도(feature importance)를 획득할 수 있다. 변수 중요도(feature importance)는 모델 학습에 사용된 학습 데이터의 피처별로 모델 성능에 얼마나 영향을 주었는지를 나타낸다. 분류 모델을 생성하는 데 사용된 학습 데이터는 시간대별 발생한 시스템 API 시퀀스이다. 따라서, 각 피처는 API 하나의 특징이 아니라 시간 흐름별 행위 특징을 보여준다. 즉, 변수 중요도(feature importance)를 통해 파일 실행 과정 중 중요 시간대를 확인할 수 있다. 다만, 워드투벡터(Word2Vec)의 룩업(Lookup) 테이블 값으로 API를 치환하기 때문에, 한 API 당 워드투벡터 (Word2Vec) 모델을 학습한 당시에 설정했던 디멘션 사이즈(dimension size) 만큼씩 피처를 통합해야 한다. 그 러므로, 도출부는 변수 중요도(feature importance)를 뽑아낸 후 디멘션 사이즈(dimension size) 만큼 끊 어서 합산한다. 예를 들면, 디멘션 사이즈(dimension size)를 3으로 설정했다면, API 1개를 나타내는 피처는 3 개이다. 즉, API 2개를 나타내는 피처는 다음과 같이 [0.001 0.123 0.005 0.013 0.146 0.095] 6개의 피처로 나타나며, API 2개의 변수 중요도(feature importance)를 추출할 수 있다면 [0.129 0.254]로 변환할 수 있다. 이후에 제 2 변환 데이터의 누적 변수 중요도(feature importance)를 도출할 수 있다. 도출부는 제2 변환 데이터의 누적 합계를 산출하여 제3 변환 데이터로 변환할 수 있다. 도출부는 제 2 변환 데이터에서 피처의 누적 합계를 산출하여 제3 변환 데이터를 생성하며, 제2 변환 데이터는 시계열 데이 터이기 때문에 1번 피처부터 순서대로 중요도의 누적 합계를 산출하여 주요한 악성 행위가 발생하는 구간을 알 수 있다. 또한, 도출부는 제2 변환 데이터가 기 설정된 기준보다 크게 발생할 때 또는 제3 변환 데이터에서 제2 변 환 데이터의 누적 합계 차이가 기 설정된 기준보다 크게 발생할 때 악성 행위가 발생함을 감지하고, 제2 변환 데이터가 기 설정된 기준보다 작게 발생할 때 또는 제2 변환 데이터의 누적 합계 차이가 기 설정된 기준보다 작 게 발생할 때 일반적인 행위가 발생함을 감지할 수 있다. 여기서, 기 설정된 기준은 본 발명이 속하는 기술분 야에서 일반적으로 사용하는 기준일 수 있고, 본 발명의 관리 시스템 또는 관리자에 의해 설정될 수 있다. 이후에 도출부는 제3 변환 데이터에 대하여 다음 학습 데이터로 사용할 시스템 API의 최적 길이를 탐색할 수 있다. 여기서, 탐색된 시스템 API의 최적 길이는 재학습 시, 전처리부에서 시스템 API 길이를 제한하 는데 사용될 수 있다. 비록, 도 6의 시스템에서 그 설명이 생략되었더라도, 도 6을 구성하는 각 구성 수단은 도 1 내지 도 5에서 설명 한 모든 내용을 포함할 수 있으며, 이는 이 기술 분야에 종사하는 당업자에게 있어서 자명하다. 이상에서 설명된 시스템 또는 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치 및 구성요소는, 예를 들어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨터, FPGA(Field Programmable Gate Array), PLU(programmable logic unit), 마이크로프로세서, 또 는 명령(instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특 수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 하나 이상의 소프트웨어 어플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는"}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "것으로 설명된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소 (processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치 는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세서 (parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파(signal wave)에 영구적으로, 또는 일시적으로 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 하나 이상의 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 상기 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등 을 단독으로 또는 조합하여 포함할 수 있다. 상기 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판 독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체 (magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도 록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다. 상기된 하드웨어 장치는 실시예의 동작을 수행하기 위해 하나 이상의 소프트웨어 모듈로서 작동하도록 구성될 수 있으며, 그 역도 마찬가지이다."}
{"patent_id": "10-2023-0092479", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다."}
{"patent_id": "10-2023-0092479", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 방법의 동작 흐름도를 도시한 것이다. 도 2는 본 발명의 실시예에 따른 전처리 단계의 세부적인 동작 흐름도를 도시한 것이다. 도 3은 본 발명의 실시예에 따른 도출 단계의 세부적인 동작 흐름도를 도시한 것이다. 도 4는 본 발명의 실시예에 따른 도출 단계에서 변수 중요도를 제2 변환 데이터로 변환하는 단계의 세부적인 동 작 흐름도를 도시한 것이다. 도 5는 도 4의 악성코드 시퀀스 순서에 따른 중요도를 나타내는 단계 S410에서 생성된 제2 변환데이터와 변수 중요도와 누적 변수 중요도(feature importance)를 도출하는 단계 S420에서 변환된 제3 변환 데이터를 예시적으 로 도시한 것이다. 도 6은 본 발명의 실시예에 따른 시스템 API의 최적 길이 도출 시스템의 세부 구성을 블록도로 도시한 것이다."}
