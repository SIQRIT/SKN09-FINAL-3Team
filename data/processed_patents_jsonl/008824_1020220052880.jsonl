{"patent_id": "10-2022-0052880", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0153097", "출원번호": "10-2022-0052880", "발명의 명칭": "리소스 크기 추전 방법", "출원인": "주식회사 텐", "발명자": "오세진"}}
{"patent_id": "10-2022-0052880", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 구동을 위한 리소스의 크기를 추천해주는 방법에 있어서,인공 신경망을 이용한 서비스를 구성하는 하나 이상의 데이터 처리 요소를 획득하는 단계;제1 트래픽 조건 하에서 상기 하나 이상의 데이터 처리 요소 각각에 대해 기준 성능을 충족 시키는 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정하는 단계로써, 상기 리소스 블록은 적어도 한 종류 이상의 리소스의 할당 크기를 포함하는 가상화된 자원이고; 및상기 하나 이상의 데이터 처리 요소 각각에 대해 결정된 상기 조합에 대응되는 리소스를 이용하여 상기 하나 이상의 데이터 처리 요소를 실행하는 단계;를 포함하는, 리소스 크기 추천 방법."}
{"patent_id": "10-2022-0052880", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서상기 하나 이상의 데이터 처리 요소를 획득하는 단계는상기 인공 신경망의 학습 결과로써, 입력 데이터로부터 출력 데이터를 생성하는 모델을 묘사하는 데이터를 수신하는 단계;상기 인공 신경망의 입력 데이터를 처리하는 전처리 데이터를 수신하는 단계; 및상기 인공 신경망의 출력 데이터를 처리하는 후처리 데이터를 수신하는 단계;를 포함하는, 리소스 크기 추천 방법."}
{"patent_id": "10-2022-0052880", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 1에 있어서상기 리소스 크기 추천 방법은상기 하나 이상의 데이터 처리 요소를 획득하는 단계 이후에,상기 하나 이상의 데이터 처리 요소 각각의 API를 생성하는 단계;를 더 포함하고,상기 API를 생성하는 단계 이전에,복수의 테스트 데이터를 획득하는 단계로써, 개별 테스트 데이터는 테스트 입력 데이터와 상기 테스트 입력 데이터에 상응하는 테스트 출력 데이터로 구성되고; 및개발 환경을 묘사하는 개발 환경 데이터를 획득하는 단계;를 더 포함하는,"}
{"patent_id": "10-2022-0052880", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 3에 있어서상기 API를 생성하는 단계는상기 개발 환경 데이터를 참조하여 상기 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지(Docker Image)를 생성하는 단계; 및상기 복수의 테스트 데이터를 이용하여 상기 하나 이상의 데이터 처리 요소 각각의 도커 이미지의 정상 동작 여부를 확인하는 단계;를 포함하는, 리소스 크기 추천 방법."}
{"patent_id": "10-2022-0052880", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2023-0153097-3-청구항 4에 있어서상기 하나 이상의 데이터 처리 요소를 실행하는 단계는상기 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지를 상기 하나 이상의 데이터 처리 요소 각각에 대해 결정된 상기 조합에 대응되는 리소스를 이용하여 실행하는, 리소스 크기 추천 방법."}
{"patent_id": "10-2022-0052880", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 4에 있어서상기 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정하는 단계는,상기 제1 트래픽 조건 하에서, 리소스 블록의 종류 및 상기 리소스 블록의 수량 중 적어도 하나를 변경하면서상기 제1 데이터 처리 요소의 도커 이미지를 실행시키면서 상기 기준 성능을 만족시키는 리소스 블록의 종류 및리소스 블록의 수량의 조합을 확인하는 단계;를 포함하는, 리소스 크기 추천 방법."}
{"patent_id": "10-2022-0052880", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 1에 있어서상기 하나 이상의 데이터 처리 요소를 실행하는 단계 이후에,소정의 규칙에 따라 복수의 테스트 데이터를 이용하여 상기 하나 이상의 데이터 처리 요소 각각의 성능을 확인하는 단계; 및상기 확인된 성능에 기반하여 상기 하나 이상의 데이터 처리 요소 각각에 할당되는 리소스 블록의 종류 및 리소스 블록의 수량 중 적어도 하나를 갱신하는 단계;를 포함하는, 리소스 크기 추천 방법."}
{"patent_id": "10-2022-0052880", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 구동을 위한 리소스의 크 기를 추천해주는 방법에 관한 것이다."}
{"patent_id": "10-2022-0052880", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명의 실시예들은 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 구동을 위한 리소스의 크기를 추천해주는 방법에 관한것이다."}
{"patent_id": "10-2022-0052880", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "정보통신 기술의 발달로 많은 애플리케이션에 인공 지능 기술의 도입이 이루어 지고 있다. 가령 종래에는 텍스 트로부터 음성을 생성함에 있어서, 규칙 기반으로 음성을 생성하였는데 최근에는 학습된 인공 신경망을 이용하 여 텍스트로부터 음성을 생성하기에 이르게 되었다. 한편 인공 신경망을 학습하거나 인공 신경망을 이용한 서비스를 제공하기 위해서는 많은 연산 리소스가 필요하 며, 일반적으로는 연산 리소스로써 GPU(Graphic Processing Unit)를 이용한다. 종래기술은 서비스의 구동이나 제공을 위해서 이와 같은 GPU를 하드웨어 단위로 사용하였다. 가령 종래기술에 따르면 하나의 GPU 전체를 이용하여 하나의 서비스에 따른 프로세스를 실행하였다. 그러나 많은 경우에 있어서 이와 같이 GPU를 하드웨어 단위(또는 전체로써) 사용하는 것은 개별 서비스가 많은 연산량을 요구하지 않는다는 점에서, 그리고 시간에 따라 요구하는 리소스의 크기가 변화된다는 점에서 효율적 이지 못한 문제점이 있었다."}
{"patent_id": "10-2022-0052880", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 상술한 문제점을 해결하기 위한 것으로, 리소스를 보다 효율적으로 사용할 수 있도록 하고자 한다. 특히 본 발명은 인공 신경망 기반 서비스 전체로써 할당되는 리소스의 크기를 결정하는 것이 아니라, 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 특성을 고려하여, 각각의 요소에 대한 리소스의 크기를 추천 및 결정 하고자 한다."}
{"patent_id": "10-2022-0052880", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일 실시예에 따른 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 구동을 위한 리소스의 크기를 추천해주는 방법은, 인공 신경망을 이용한 서비스를 구성하는 하나 이상의 데이터 처리 요소를 획득하는 단계; 제1 트래픽 조건 하에서 상기 하나 이상의 데이터 처리 요소 각각에 대해 기준 성능을 충족 시키는 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정하는 단계로써, 상기 리소스 블록은 적어 도 한 종류 이상의 리소스의 할당 크기를 포함하는 가상화된 자원이고; 및 상기 하나 이상의 데이터 처리 요소 각각에 대해 결정된 상기 조합에 대응되는 리소스를 이용하여 상기 하나 이상의 데이터 처리 요소를 실행하는 단계;를 포함할 수 있다. 상기 하나 이상의 데이터 처리 요소를 획득하는 단계는 상기 인공 신경망의 학습 결과로써, 입력 데이터로부터 출력 데이터를 생성하는 모델을 묘사하는 데이터를 수신하는 단계; 상기 인공 신경망의 입력 데이터를 처리하는 전처리 데이터를 수신하는 단계; 및 상기 인공 신경망의 출력 데이터를 처리하는 후처리 데이터를 수신하는 단 계;를 포함할 수 있다. 본 발명의 일 실시예에 따른 리소스 크기 추천 방법은, 상기 하나 이상의 데이터 처리 요소를 획득하는 단계 이 후에, 상기 하나 이상의 데이터 처리 요소 각각의 API를 생성하는 단계;를 더 포함하고, 상기 API를 생성하는 단계 이전에, 복수의 테스트 데이터를 획득하는 단계로써, 개별 테스트 데이터는 테스트 입력 데이터와 상기 테 스트 입력 데이터에 상응하는 테스트 출력 데이터로 구성되고; 및 개발 환경을 묘사하는 개발 환경 데이터를 획 득하는 단계;를 더 포함할 수 있다. 상기 API를 생성하는 단계는 상기 개발 환경 데이터를 참조하여 상기 하나 이상의 데이터 처리 요소 각각에 대 한 도커 이미지(Docker Image)를 생성하는 단계; 및 상기 복수의 테스트 데이터를 이용하여 상기 하나 이상의 데이터 처리 요소 각각의 도커 이미지의 정상 동작 여부를 확인하는 단계;를 포함할 수 있다. 상기 하나 이상의 데이터 처리 요소를 실행하는 단계는 상기 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지를 상기 하나 이상의 데이터 처리 요소 각각에 대해 결정된 상기 조합에 대응되는 리소스를 이용하여 실 행할 수 있다. 상기 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정하는 단계는, 상기 제1 트래픽 조건 하에서, 리 소스 블록의 종류 및 상기 리소스 블록의 수량 중 적어도 하나를 변경하면서 상기 제1 데이터 처리 요소의 도커 이미지를 실행시키면서 상기 기준 성능을 만족시키는 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 확인 하는 단계;를 포함할 수 있다. 상기 하나 이상의 데이터 처리 요소를 실행하는 단계 이후에, 소정의 규칙에 따라 복수의 테스트 데이터를 이용 하여 상기 하나 이상의 데이터 처리 요소 각각의 성능을 확인하는 단계; 및 상기 확인된 성능에 기반하여 상기 하나 이상의 데이터 처리 요소 각각에 할당되는 리소스 블록의 종류 및 리소스 블록의 수량 중 적어도 하나를 갱신하는 단계;를 포함할 수 있다. 본 발명의 일 실시예에 따른 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 구동을 위한 리소스의 크기를 추천해주는 장치는, 인공 신경망을 이용한 서비스를 구성하는 하나 이상의 데이터 처리 요소를 획득하고, 제1 트래픽 조건 하에서 상기 하나 이상의 데이터 처리 요소 각각에 대해 기준 성능을 충족 시키는 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정하고, 상기 리소스 블록은 적어도 한 종류 이 상의 리소스의 할당 크기를 포함하는 가상화된 자원이고, 상기 하나 이상의 데이터 처리 요소 각각에 대해 결정 된 상기 조합에 대응되는 리소스를 이용하여 상기 하나 이상의 데이터 처리 요소를 실행할 수 있다. 상기 장치는 상기 인공 신경망의 학습 결과로써, 입력 데이터로부터 출력 데이터를 생성하는 모델을 묘사하는 데이터를 수신하고, 상기 인공 신경망의 입력 데이터를 처리하는 전처리 데이터를 수신하고, 상기 인공 신경망 의 출력 데이터를 처리하는 후처리 데이터를 수신할 수 있다. 상기 장치는 복수의 테스트 데이터를 획득하고, 개별 테스트 데이터는 테스트 입력 데이터와 상기 테스트 입력 데이터에 상응하는 테스트 출력 데이터로 구성되고, 개발 환경을 묘사하는 개발 환경 데이터를 획득하고, 상기 하나 이상의 데이터 처리 요소 각각의 API를 생성할 수 있다. 상기 장치는 상기 개발 환경 데이터를 참조하여 상기 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지 (Docker Image)를 생성하고, 상기 복수의 테스트 데이터를 이용하여 상기 하나 이상의 데이터 처리 요소 각각의도커 이미지의 정상 동작 여부를 확인할 수 있다. 상기 장치는 상기 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지를 상기 하나 이상의 데이터 처리 요 소 각각에 대해 결정된 상기 조합에 대응되는 리소스를 이용하여 실행할 수 있다. 상기 장치는 상기 제1 트래픽 조건 하에서, 리소스 블록의 종류 및 상기 리소스 블록의 수량 중 적어도 하나를 변경하면서 상기 제1 데이터 처리 요소의 도커 이미지를 실행시키면서 상기 기준 성능을 만족시키는 리소스 블 록의 종류 및 리소스 블록의 수량의 조합을 확인할 수 있다. 상기 장치는 소정의 규칙에 따라 복수의 테스트 데이터를 이용하여 상기 하나 이상의 데이터 처리 요소 각각의 성능을 확인하고, 상기 확인된 성능에 기반하여 상기 하나 이상의 데이터 처리 요소 각각에 할당되는 리소스 블 록의 종류 및 리소스 블록의 수량 중 적어도 하나를 갱신할 수 있다."}
{"patent_id": "10-2022-0052880", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 따르면 리소스를 보다 효율적으로 사용할 수 있도록 한다. 특히 서비스의 규모에 맞게 리소스를 블록 단위로 할당함으로써, 당해 서비스의 안정적인 실행과 더불어 하드웨어를 공유하는 타 서비스의 안정적인 실행 까지도 담보할 수 있다. 또한 본 발명에 따르면 인공 신경망 기반 서비스 전체로써 할당되는 리소스의 크기를 결정하는 것이 아니라, 서 비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 특성을 고려하여, 각각의 요소에 대한 리소스의 크기를 추천 및 결정 할 수 있다."}
{"patent_id": "10-2022-0052880", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명은 다양한 변환을 가할 수 있고 여러 가지 실시예를 가질 수 있는 바, 특정 실시예들을 도면에 예시하고"}
{"patent_id": "10-2022-0052880", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "상세한 설명에 상세하게 설명하고자 한다. 본 발명의 효과 및 특징, 그리고 그것들을 달성하는 방법은 도면과 함께 상세하게 후술되어 있는 실시예들을 참조하면 명확해질 것이다. 그러나 본 발명은 이하에서 개시되는 실시 예들에 한정되는 것이 아니라 다양한 형태로 구현될 수 있다. 이하, 첨부된 도면을 참조하여 본 발명의 실시예들을 상세히 설명하기로 하며, 도면을 참조하여 설명할 때 동일 하거나 대응하는 구성 요소는 동일한 도면부호를 부여하고 이에 대한 중복되는 설명은 생략하기로 한다. 이하의 실시예에서, 제1, 제2 등의 용어는 한정적인 의미가 아니라 하나의 구성 요소를 다른 구성 요소와 구별 하는 목적으로 사용되었다. 이하의 실시예에서, 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 이하의 실시예에서, 포함하다 또는 가지다 등의 용어는 명세서상에 기재된 특징, 또는 구성요 소가 존재함을 의미하는 것이고, 하나 이상의 다른 특징들 또는 구성요소가 부가될 가능성을 미리 배제하는 것 은 아니다. 도면에서는 설명의 편의를 위하여 구성 요소들이 그 크기가 과장 또는 축소될 수 있다. 예컨대, 도 면에서 나타난 각 구성의 크기 및 형태는 설명의 편의를 위해 임의로 나타내었으므로, 본 발명이 반드시 도시된바에 한정되지 않는다. 도 1은 본 발명의 일 실시예에 따른 가상화된 리소스를 관리하는 시스템의 구성을 개략적으로 도시한 도면이다. 도 1을 참조하면, 본 발명의 일 실시예에 따른 가상화된 리소스를 관리하는 시스템은 서버, 사용자 단말 , 리소스 서버 및 통신망을 포함할 수 있다. 본 발명의 일 실시예에 따른 가상화된 리소스를 관리하는 시스템은 적어도 한 종류 이상의 리소스의 할당 크기 를 포함하는 리소스 블록 단위로 리소스 서버의 리소스를 관리할 수 있다. 가령 본 발명의 일 실시예에 따 른 시스템은 인공 신경망 기반 서비스에 요구되는 리소스 블록의 종류와 수량을 결정하고, 결정된 종류와 수량 을 이용하여 서비스에 따른 프로세스를 리소스 서버에 실행시킬 수 있다. 이때 본 발명의 일 실시예에 따른 가상화된 리소스를 관리하는 시스템은 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각에 대해서 구동을 위한 리소스의 크기를 결정하고 관리할 수 있다. 본 발명에서 '리소스'(또는 개별 종류의 리소스)는 연산 장치가 소정의 목적을 위해서 사용할 수 있는 자원(또 는 컴퓨팅 자원)을 의미할 수 있다. 가령 리소스 서버와 같은 컴퓨팅 장치에 있어서 리소스는 가용 CPU의 코어 수, 가용 메모리의 용량, 가용 GPU의 코어 수, 가용 GPU 메모리의 용량 및 가용 네트워크 대역폭 등을 포 괄하는 개념일 수 있다. 다만 이는 예시적인것으로 본 발명의 사상이 이에 한정되는 것은 아니며, 소정의 목적 을 위해서 사용할 수 있는 컴퓨팅(또는 컴퓨팅과 관련된)자원이라면, 본 발명의 리소스에 포함될 수 있다. 본 발명에서 '리소스 블록'은 적어도 한 종류 이상의 리소스의 할당 크기를 포함하는 가상화된 리소스(또는 통 합된 리소스)를 의미할 수 있다. 가령 제1 리소스 블록은 0.5개의 CPU 코어, 2 기가바이트의 메모리, 0.5개의 GPU 코어 및 512 메가바이트의 GPU 메모리를 포함하는 가상화된 자원 또는 자원의 조합일 수 있다. 따라서 제1 리소스 블록을 이용하여 또는 제1 리소스 블록만큼의 리소스를 이용하여 데이터 처리 요소를 실행시 키는 것은, 제1 리소스 블록에 해당하는 개별 자원을 해당 데이터 처리 요소의 실행에 사용하는 것을 의미할 수 있다. 예를 들어 제1 리소스 블록을 1개 사용하여 데이터 처리 요소를 실행시키는 것은, 0.5개의 CPU 코어, 2 기가바이트의 메모리, 0.5개의 GPU 코어 및 512 메가바이트의 GPU 메모리를 이용하여 해당 요소를 실행하는 것 (또는 해당 요소의 실행에 상술한 만큼의 리소스를 할당하는 것)을 의미할 수 있다. 물론 제1 리소스 블록을 2개 사용하여 데이터 처리 요소를 실행시키는 것은 1개의 CPU 코어, 4 기가바이트의 메 모리, 1개의 GPU 코어 및 1024 메가바이트의 GPU 메모리를 이용하여 해당 요소를 실행하는 것(또는 해당 요소의 실행에 상술한 만큼의 리소스를 할당하는 것)을 의미할 수 있다. 다만 전술한 제1 블록의 크기는 예시적인것으 로 본 발명의 사상이 이에 한정되는 것은 아니다. 본 발명에서 '하나 이상의 데이터 처리 요소'는 인공 신경망을 이용한 서비스가 구동됨에 있어서 데이터를 연산 하거나 처리하는 하나 이상의 구분된 요소를 의미할 수 있다. 가령 하나 이상의 데이터 처리 요소는 입력 데이 터로부터 출력 데이터를 생성하는 모델 요소(또는 모델에 기반한 데이터 처리), 가공되지 않은 원본 데이터로부 터 인공 신경망의 입력 데이터를 생성하는 전처리 요소(또는 전처리) 및 인공 신경망의 출력 데이터로부터 서비 스의 목적에 따른 최종 결과물을 도출하는 후처리 요소(또는 후처리)를 포함할 수 있다. 다만 상술한 3개의 요 소는 예시적인것으로 본 발명의 사상이 이에 한정되는 것은 아니며, 인공 신경망을 이용한 서비스의 구동에 있 어서 데이터를 연산하거나 처리하는 요소라면 이에 해당할 수 있다. 본 발명에서 때때로 모델 요소는 '모델 데이터'로 명명되어 설명될 수 있다. 또한 전처리 데이터는 '전처리 소 스코드', '전처리기'로 명명되어 설명될 수 있다. 또한 후처리 데이터는 '후처리 소스코드', '후처리기'로 명명 되어 설명될 수 있다. 본 발명에서 '서비스'는 리소스 서버와 같은 컴퓨팅 장치에서 수행되는 애플리케이션으로, 소정의 목적을 위해 수행되는 애플리케이션을 의미할 수 있다. 가령 서비스는 사용자 단말의 요청에 따라 텍스트로부터 음성을 생성하는 TTS 서비스를 위한 애플리케이션을 의미할 수 있다. 본 발명에서 '도커 이미지'는 서비스 운영에 필요한 모든 파일과 설정 값을 모아둔 것을 의미할 수 있다. 가령 도커 이미지는 프로그램, 소스코드, 라이브러리 및 컴파일된 실행 파일의 집합일 수 있다. 예를 들어 전술한 ' 모델 요소'에 대한 도커 이미지는 입력 데이터로부터 출력 데이터를 생성하는데 필요한 파일과 설정 값을 모은 이미지일 수 있다. 본 발명에서 '인공 신경망'은 서버 및/또는 리소스 서버가 소정의 목적에 따라 생성한 것으로, 머신 러닝(Machine Learning) 또는 딥러닝(Deep Learning) 기법에 의해 학습된 인공 신경망을 의미할 수 있다. 이와 같은 신경망의 구조에 대해서는 도 4 및 도 5를 참조하여 후술한다. 본 발명의 일 실시예에 따른 사용자 단말은 사용자가 서버에 의해 제공되는 다양한 서비스를 이용할 수 있도록 사용자와 서버를 매개하는 다양한 형태의 장치를 의미할 수 있다. 바꾸어 말하면, 본 발명의 일 실시예에 따른 사용자 단말은 서버와 데이터를 송수신 하는 다양한 장치를 의미할 수 있다. 본 발명의 일 실시예에서, 사용자 단말은 실행하고자 하는 서비스 및/또는 서비스의 기대 성능을 서버 로 전송하여, 해당 서비스에 대해 적절한 리소스가 결정 및/또는 할당되도록 할 수 있다. 또한 사용자 단 말은 리소스의 사용 현황 등을 서버로부터 수신하여, 사용자가 리소스 서버의 상태를 확인할 수 있도록 할 수 있다. 이와 같은 사용자 단말은 도 1에 도시된 바와 같이, 휴대용 단말을 의미할 수도 있고, 컴퓨터를 의미할 수도 있다. 한편 사용자 단말은 상술한 기능을 수행하기 위해 콘텐츠 등을 표시하기 위한 표시수단, 이러한 콘텐츠에 대한 사용자의 입력을 획득하기 위한 입력수단을 구비할 수 있다. 이 때 입력수단 및 표시수단은 다양하게 구성 될 수 있다. 가령 입력수단은 키보드, 마우스, 트랙볼, 마이크, 버튼, 터치패널 등을 포함할 수 있으나 이에 한 정되지 않는다. 본 발명의 일 실시예에 따른 리소스 서버는 서버의 제어에 따라 리소스를 이용하여 서비스를 실행하 는(또는 도커 이미지를 실행하는) 장치를 의미할 수 있다. 이와 같은 리소스 서버는 도 1에 도시된 바와 같이 복수일 수 있다. 도 2는 본 발명의 일 실시예에 따른 리소스 서버(300A)의 구성을 개략적으로 도시한 도면이다. 도 2를 참조하면, 본 발명의 일 실시예에 따른 리소스 서버(300A)는 통신부(310A), 제2 프로세서(320A), 메모리 (330A) 및 제3 프로세서(340A)를 포함할 수 있다. 통신부(310A)는 리소스 서버(300A)가 서버와 같은 다른 네트워크 장치와 유무선 연결을 통해 제어 신호 또 는 데이터 신호와 같은 신호를 송수신하기 위해 필요한 하드웨어 및 소프트웨어를 포함하는 장치일 수 있다. 제2 프로세서(320A)는 서버로부터 수신된 데이터 처리 요소의 실행 요청에 따라 제3 프로세서(340A)를 제 어하는 장치일 수 있다. 가령 제2 프로세서(320A)는 학습된 인공 신경망을 이용하여 소정의 아웃풋을 제공하는 모델 요소(또는 모델 요소의 도커 이미지) 실행 요청에 따라, 제3 프로세서(340A)를 제어하는 장치일 수 있다. 이때 프로세서(Processor)는, 예를 들어 프로그램 내에 포함된 코드 또는 명령으로 표현된 기능을 수행하기 위 해 물리적으로 구조화된 회로를 갖는, 하드웨어에 내장된 데이터 처리 장치를 의미할 수 있다. 이와 같이 하드 웨어에 내장된 데이터 처리 장치의 일 예로써, 마이크로프로세서(Microprocessor), 중앙처리장치(Central Processing Unit: CPU), 프로세서 코어(Processor Core), 멀티프로세서(Multiprocessor), ASIC(Application- Specific Integrated Circuit), FPGA(Field Programmable Gate Array) 등의 처리 장치를 망라할 수 있으나, 본 발명의 범위가 이에 한정되는 것은 아니다. 메모리(330A)는 리소스 서버(300A)가 처리하는 데이터를 일시적 또는 영구적으로 저장하는 기능을 수행한다. 메 모리는 자기 저장 매체(Magnetic Storage Media) 또는 플래시 저장 매체(Flash Storage Media)를 포함할 수 있 으나, 본 발명의 범위가 이에 한정되는 것은 아니다. 가령 메모리(330A)는 학습된 인공 신경망을 구성하는 데이 터들(가령 계수들)을 일시적 및/또는 영구적으로 저장할 수 있다. 물론 메모리(330A)는 인공 신경망을 학습하기 위한 학습 데이터(서버로부터 수신된)도 저장할 수 있다. 다만 이는 예시적인것으로 본 발명의 사상이 이 에 한정되는 것은 아니다. 제3 프로세서(340A)는 전술한 제2 프로세서(320A)의 제어에 따라 프로세스에 따른 연산을 수행하는 장치를 의미 할 수 있다. 이때 제3 프로세서(340A)는 전술한 제2 프로세서(320A)보다 높은 연산 능력을 갖는 장치일 수 있다. 가령 제3 프로세서(340A)는 GPU(Graphics Processing Unit)로 구성될 수 있다. 다만 이는 예시적인 것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 본 발명의 일 실시예에서, 제3 프로세서(340A)는 복수일 수도 있고, 도 2에 도시된 바와 같이 단수일 수도 있다. 본 발명의 일 실시예에서, 리소스 서버(300A)의 개별 리소스들은 분할되어 사용될 수 있다. 전술한 바와 같이 본 발명에서 '리소스 블록'은 적어도 한 종류 이상의 리소스의 할당 크기를 포함하는 가상화된 리소스를 의미할 수 있다. 가령 리소스 서버(300A)의 가용 리소스가 3개의 CPU 코어, 8기가바이트의 메모리, 5개의 GPU 코어 및 2기가바이 트의 GPU 메모리이고, 하나의 제1 리소스 블록이 제1 프로세스에 대해서 할당된 경우 리소스 서버(300A) 가용 리소스 중 제1 블록에 해당하는 리소스만큼이 제1 프로세스의 실행에 사용될 수 있다. 바꾸어말하면 3개의 CPU 코어 중 0.5개가, 8기가바이트의 메모리 중 2기가바이트가, 5개의 GPU 코어 중 0.5개가, 2기가바이트의 GPU 메 모리 중 0.5기가바이트가 제1 프로세스의 실행에 사용될 수 있다. 한편 나머지 잔여 리소스는 다른 프로세스의 실행에 사용될 수 있다. 다만 이는 예시적인것으로 본 발명의 사상 이 이에 한정되는 것은 아니다. 도 2에서는 예시적으로, 리소스 서버(300A)의 구성만을 설명하였지만 나머지 리소스 서버도 이와 동일하거나 상 응하는 구조일 수 있으므로, 나머지 리소스 서버에 대한 상세한 설명은 생략한다. 한편 본 발명의 일 실시예에서, 각각의 리소스 서버(300A, 300B, 300C)는 서로 다른 가용 리소스를 가질 수 있 다. 이때 서로 다른 가용 리소스는 서로 다른 하드웨어 스펙에 기인한 것 일 수도 있고, 현재 실행되고(실행하 고)있는 프로세스의 수량에 기인한 것 일 수도 있다. 다만 이는 예시적인것으로 본 발명의 사상이 이에 한정되 는 것은 아니다. 본 발명의 일 실시예에 따른 통신망은 가상화된 리소스를 관리하는 시스템의 각 구성 간의 데이터 송수신 을 매개하는 통신망을 의미할 수 있다. 가령 통신망은 LANs(Local Area Networks), WANs(Wide Area Networks), MANs(Metropolitan Area Networks), ISDNs(Integrated Service Digital Networks) 등의 유선 네트 워크나, 무선 LANs, CDMA, 블루투스, 위성 통신 등의 무선 네트워크를 망라할 수 있으나, 본 발명의 범위가 이 에 한정되는 것은 아니다. 본 발명의 일 실시예에 따른 서버는 적어도 한 종류 이상의 리소스의 할당 크기를 포함하는 리소스 블록 단위로 리소스 서버들의 리소스를 관리할 수 있다. 도 3은 본 발명의 일 실시예에 따른 서버의 구성을 개략적으로 도시한 도면이다. 도 3을 참조하면, 본 발명의 일 실시예에 따른 서버는 통신부, 제1 프로세서 및 메모리를 포함할 수 있다. 또한 도면에는 도시되지 않았으나, 본 실시예에 따른 서버는 입/출력부, 프로그램 저장부 등을 더 포함할 수 있다. 통신부는 서버가 사용자 단말 및/또는 리소스 서버와 같은 다른 네트워크 장치와 유무선 연결을 통해 제어 신호 또는 데이터 신호와 같은 신호를 송수신하기 위해 필요한 하드웨어 및 소프트웨어를 포 함하는 장치일 수 있다. 제1 프로세서는 리소스 블록을 정의하고, 서비스에 요구되는 리소스 블록의 종류 및/또는 수량을 결정하고, 이를 이용하여 리소스 서버를 제어하는 수단을 의미할 수 있다. 이와 같은 제1 프로세서는, 예를 들어 프로그램 내에 포함된 코드 또는 명령으로 표현된 기능을 수행하기 위해 물리적으로 구조화된 회로를 갖는, 하드웨어에 내장된 데이터 처리 장치를 의미할 수 있다. 이와 같이 하 드웨어에 내장된 데이터 처리 장치의 일 예로써, 마이크로프로세서(Microprocessor), 중앙처리장치(Central Processing Unit: CPU), 프로세서 코어(Processor Core), 멀티프로세서(Multiprocessor), ASIC(Application- Specific Integrated Circuit), FPGA(Field Programmable Gate Array) 등의 처리 장치를 망라할 수 있으나, 본 발명의 범위가 이에 한정되는 것은 아니다. 메모리는 서버가 처리하는 데이터를 일시적 또는 영구적으로 저장하는 기능을 수행한다. 메모리는 자 기 저장 매체(Magnetic Storage Media) 또는 플래시 저장 매체(Flash Storage Media)를 포함할 수 있으나, 본 발명의 범위가 이에 한정되는 것은 아니다. 가령 메모리는 리소스 블록에 포함되는 개별 리소스의 크기를 일시적 및/또는 영구적으로 저장할 수 있다. 다만 이는 예시적인것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 본 발명에서 때때로 서버는 리소스 관리 장치, 가상화된 리소스를 관리하는 장치 또는 서비스 구동을 위한 리소스의 크기를 추천해주는 장치로 명명하여 설명될 수 있다. 도 4 및 도 5는 인공 신경망의 예시적인 구조를 설명하기 위한 도면이다. 본 발명의 일 실시예에 따른 인공 신경망은 도 4에 도시된 바와 같은 합성 곱 신경망(CNN: Convolutional Neural Network) 모델에 따른 인공 신경망일 수 있다. 이때 CNN 모델은 복수의 연산 레이어(Convolutional Layer, Pooling Layer)를 번갈아 수행하여 최종적으로는 입력 데이터의 특징을 추출하는 데 사용되는 계층 모델 일 수 있다. 이때 본 발명의 일 실시예에 따른 서버는 학습 데이터를 지도학습(Supervised Learning) 기법 에 따라 처리하여 인공 신경망 모델을 구축하거나 학습시킬 수 있다. 본 발명의 일 실시예에 따른 서버는 입력 데이터의 특징 값을 추출하기 위한 컨볼루션 레이어(Convolution layer), 추출된 특징 값을 결합하여 특징 맵을 구성하는 풀링 레이어(pooling layer)를 생성할 수 있다. 또한 본 발명의 일 실시예에 따른 서버는 생성된 특징 맵을 결합하여, 입력 데이터가 복수의 항목 각각에 해당할 확률을 결정할 준비를 하는 풀리 커넥티드 레이어(Fully Conected Layer)를 생성할 수 있다. 마지막으로 서버는 입력 데이터에 대응되는 출력을 포함하는 아웃풋 레이어(Output Layer)를 산출할 수 있 다. 도 4에 도시된 예시에서는, 입력 데이터가 5X7 형태의 블록으로 나누어지며, 컨볼루션 레이어의 생성에 5X3 형 태의 단위 블록이 사용되고, 풀링 레이어의 생성에 1X4 또는 1X2 형태의 단위 블록이 사용되는 것으로 도시되었 지만, 이는 예시적인 것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 이와 같은 입력 데이터의 분할 크기, 컨볼루션 레이어에 사용되는 단위 블록의 크기, 풀링 레이어의 수, 풀링 레이어의 단위 블록의 크기 등은 인공 신경망의 학습 조건을 나타내는 파라미터 셋에 포함되는 항목일 수 있다. 바꾸어 말하면, 파라미터 셋은 상술한 항목들을 결정하기 위한 파라미터(즉 구조 파라미터)들을 포함할 수 있다. 따라서 파라미터 셋의 변경 및/또는 조절에 따라 인공 신경망의 구조가 변경될 수 있으며, 이에 따라 동일한 학 습 데이터를 이용하더라고 학습 결과가 달라질 수 있다. 한편 이와 같은 인공 신경망은 전술한 리소스 서버(300A)의 메모리(330A)에 인공 신경망을 구성하는 적어도 하 나의 노드의 계수, 노드의 가중치 및 인공 신경망을 구성하는 복수의 레이어 간의 관계를 정의하는 함수의 계수 들의 형태로 저장될 수 있다. 물론 인공 신경망의 구조 또한 메모리(330A)에 소스코드 및/또는 프로그램의 형태 로 저장될 수 있다. 본 발명의 일 실시예에 따른 인공 신경망은 도 5에 도시된 바와 같은 순환 신경망(Recurrent Neural Network, RNN) 모델에 따른 인공 신경망일 수 있다. 도 5를 참조하면, 이와 같은 순환 신경망(RNN) 모델에 따른 인공 신경망은 적어도 하나의 입력 노드(N1)를 포함 하는 입력 레이어(L1), 복수의 히든 노드(N2)를 포함하는 히든 레이어(L2) 및 적어도 하나의 출력 노드(N3)를 포함하는 출력 레이어(L3)를 포함할 수 있다. 히든 레이어(L2)는 도시된 바와 같이 전체적으로 연결된(Fully Connected) 하나 이상의 레이어를 포함할 수 있 다. 히든 레이어(L2)가 복수의 레이어를 포함하는 경우, 인공 신경망은 각각의 히든 레이어 사이의 관계를 정의 하는 함수(미도시)를 포함할 수 있다. 각 레이어의 각 노드에 포함되는 값은 벡터일 수 있다. 또한 각 노드는 해당 노드의 중요도에 대응되는 가중치 를 포함할 수도 있다. 한편 인공 신경망은 입력 레이어(L1)와 히든 레이어(L2)의 관계를 정의하는 제1 함수(F1) 및 히든 레이어(L2)와 출력 레이어(L3)의 관계를 정의하는 제2 함수(F2)를 포함할 수 있다. 제1 함수(F1)는 입력 레이어(L1)에 포함되는 입력 노드(N1)와 히든 레이어(L2)에 포함되는 히든 노드(N2)간의 연결관계를 정의할 수 있다. 이와 유사하게, 제2 함수(F2)는 히든 레이어(L2)에 포함되는 히든 노드(N2)와 출력 레이어(L3)에 포함되는 출력 노드(N3)간의 연결관계를 정의할 수 있다. 이와 같은 제1 함수(F1), 제2 함수(F2) 및 히든 레이어 사이의 함수들은 이전 노드의 입력에 기초하여 결과물을 출력하는 순환 신경망 모델을 포함할 수 있다. 리소스 서버에 의해 인공 신경망이 학습되는 과정에서, 복수의 학습 데이터에 기초하여 제1 함수(F1) 및 제2 함수(F2)가 학습될 수 있다. 물론 인공 신경망이 학습되는 과정에서 전술한 제1 함수(F1) 및 제2 함수(F2) 외에 복수의 히든 레이어 사이의 함수들 또한 학습될 수 있다. 본 발명의 일 실시예에 따른 인공 신경망은 표지(Labeled)된 학습 데이터를 기반으로 지도학습(Supervised Learning) 방식으로 학습될 수 있다. 본 발명의 일 실시예에 따른 서버는 복수의 학습 데이터를 이용하여, 어느 하나의 입력 데이터를 인공 신 경망에 입력하여 생성된 출력 값이 해당 학습 데이터에 표지된 값에 근접하도록 전술한 함수들(F1, F2, 히든 레 이어 사이의 함수들 등)을 갱신하는 과정을 반복하여 수행함으로써 인공 신경망을 학습시킬 수 있다. 이때 본 발명의 일 실시예에 따른 서버는 역전파(Back Propagation) 알고리즘에 따라 전술한 함수들(F1, F2, 히든 레이어 사이의 함수들 등)을 갱신할 수 있다. 다만 이는 예시적인 것으로 본 발명의 사상이 이에 한정 되는 것은 아니다. 한편 순환 신경망 모델에 따른 인공 신경망의 경우 파라미터 셋(특히 구조 파라미터 셋)에는 전술한 히든 레이 어의 수 및 입력 노드의 수 등이 포함될 수 있다. 따라서 파라미터 셋의 변경 및/또는 조절에 따라 인공 신경망 의 구조가 변경될 수 있으며, 이에 따라 동일한 학습 데이터를 이용하더라고 학습 결과가 달라질 수 있다. 도 4 및 도 5에서 설명한 인공 신경망의 종류 및/또는 구조는 예시적인 것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 따라서 다양한 종류의 모델의 인공 신경망이 명세서를 통하여 설명하는 '인공 신경망'에 해당할 수 있다. 이하에서는 서버의 제1 프로세서의 동작을 중심으로 설명한다. 본 발명의 일 실시예에 따른 제1 프로세서는 적어도 한 종류 이상의 리소스의 할당 크기를 포함하는 하나 이상의 리소스 블록을 정의할 수 있다. 도 6은 예시적인 리소스 블록을 도시한 도면이다. 전술합 바와 같이 본 발명에서 '리소스'(또는 개별 종류의 리소스)는 연산 장치가 소정의 목적을 위해서 사용할 수 있는 자원을 의미할 수 있다. 가령 리소스 서버와 같은 컴퓨팅 장치에 있어서 리소스는 가용 CPU의 코 어 수, 가용 메모리의 용량, 가용 GPU의 코어 수, 가용 GPU 메모리의 용량 및 가용 네트워크 대역폭 등을 포괄 하는 개념일 수 있다. 또한 본 발명에서 '리소스 블록'은 적어도 한 종류 이상의 리소스의 할당 크기를 포함하는 가상화된 리소스를 의미할 수 있다. 가령 리소스 블록은 도 6의 왼쪽 리소스 블록과 같이 n개의 CPU 코어, m바이트의 메모리, i개의 GPU 코어 및 k바이트의 GPU 메모리로 구성되는 개별 리소스의 조합일 수 있다. 또한 리소스 블록은 오른쪽 리소스 블록과 같이 a개의 CPU 코어, c바이트의 메모리, b개의 GPU 코어 및 d 바이트의 GPU 메모리로 구성되는 개별 리소스의 조합일 수 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 제1 리소스 블록(예를 들어 도 6의 510)에 할당되는 제1 종류 의 리소스 크기, 제2 종류의 리소스 크기, 제3 종류의 리소스 크기 및 제4 종류의 리소스 크기를 결정할 수 있 다. 이와 유사하게 제1 프로세서는 제2 리소스 블록(예를 들어 도 6의 520)에 할당되는 상기 제1 종류의 리소 스의 크기, 상기 제2 종류의 리소스 크기, 상기 제3 종류의 리소스 크기 및 상기 제4 종류의 리소스 크기를 결 정할 수 있다. 이때 각 종류의 리소스는 예를 들어 CPU 코어, 메모리, GPU 코어 및 GPU 메모리 중 어느 하나에 해당할 수 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처 리 요소 각각의 특성을 고려하여 다양한 구성(종류)의 리소스 블록을 정의할 수 있다. 가령 제1 프로세서는 제1 종류 및 제2 종류의 리소스가 주로 사용되는 데이터 처리 요소(예를 들어 전처리 요소, 후처리 요소)를 위해 상대적으로 제1 종류 및 제2 종류의 리소스의 크기가 큰 리소스 블록을 정의할 수 있다. 또한 제1 프로세서는 제3 종류 및 제4 종류의 리소스가 주로 사용되는 데이터 처리 요소(예를 들어 모델 요소)를 위해 상대적으로 제3 종류 및 제4 종류의 리소스의 크기가 큰 리소스 블록을 정의할 수 있다. 다 만 이는 예시적인것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 본 발명의 일 실시예에 따른 제1 프로세서는 사용자의 입력에 기초하여 리소스 블록을 정의할 수 있다. 가 령 제1 프로세서는 사용자 단말로부터 제1 타입의 리소스 블록을 구성하는 각 종류의 리소스의 크기 와 제2 타입의 리소스 블록을 구성하는 각 종류의 리소스의 크기를 수신하고, 이에 기초하여 각각의 리소스 블 록을 정의할 수 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 각각의 리소스 서버(300A, 300B, 300C)의 리소스(또는 유휴 리소스)에 기초하여 리소스 블록을 정의할 수도 있다. 이를 위해 제1 프로세서는 각 종류의 리소스의 단위 크기로 각각의 리소스 서버(300A, 300B, 300C)가 가지 고 있는 종류 별 리소스의 수량을 확인할 수 있다. 가령 각 종류의 리소스의 단위 크기가 1코어(CPU), 1MB(메모 리), 1코어(GPU) 및 1MB(GPU 메모리)이고, 리소스 서버(300A)가 100코어(CPU), 50MB(메모리), 70코어(GPU) 및 80MB(GPU 메모리)의 메모리를 갖는 경우를 가정해 보자. 이러한 경우 제1 프로세서는 CPU 자원의 수량으로 100, 메모리 자원의 수량으로 50, GPU 자원의 수량으로 70, 그리고 GPU 메모리 자원의 수량으로 80을 산출할 수 있다. 이때 본 발명의 일 실시예에 따른 제1 프로세서는 수량이 최소인 자원의 수량에 대한 나머지 자원의 상대 적 비율을 산출할 수 있다. 가령 전술한 예시에서, 제1 프로세서는 수량이 최소인 자원인 메모리 자원의 수량(50개)에 대한 나머지 자원의 비율을 2(CPU), 1(메모리), 1.2(GPU) 및 1.6(GPU 메모리)으로 산출할 수 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 상술한 과정에 따라 산출된 자원의 비율을 참조하여, 개별 리 소스 블록에 포함되는 자원의 비율을 결정할 수 있다. 가령 제1 프로세서는 리소스 서버(300A)에 의해 제 공되는 리소스 블록에 대해서, 하나의 개별 블록에 2코어(CPU), 1MB(메모리), 1.2코어(GPU) 및 1.6MB(GPU 메모 리)가 포함되도록 할 수 있다. 이로써 본 발명은 각각의 리소스 서버(300A, 300B, 300C)의 특성을 고려하여 리소스 블록을 생성할 수 있다. 도 7은 본 발명의 일 실시예에 따른 제1 프로세서가 서비스를 구성하는 하나 이상의 데이터 처리 요소 각 각의 실행을 위한 리소스의 크기를 결정하는 일련의 과정을 도시한 도면이다. 이하에서는 도 7을 참조하여 설명 한다. 본 발명의 일 실시예에 따른 제1 프로세서는 서비스를 구성하는 하나 이상의 데이터 처리 요소를 획득할 수 있다. 이때 '서비스'는 인공 신경망을 이용한 서비스에 해당할 수 있다. 가령 제1 프로세서는 사용자 단말로부터 서비스를 구성하는 하나 이상의 데이터 처리 요소를 획득할 수 있다. 이때 본 발명의 일 실시예에 따른 제1 프로세서는 인공 신경망의 학습 결과로써 입력 데이터로부터 출력 데이터를 생성하는 모델을 묘사하는 데이터, 즉 모델 요소를 사용자 단말로부터 수신할 수 있다. 또한 제1 프로세서는 원본 데이터로부터 인공 신경망의 입력 데이터를 생성(처리)하는 전처리 데이터, 즉 전처리 요소(또는 전처리 소스코드)를 사용자 단말로부터 수신할 수 있다. 또한 제1 프로세서는 인공 신경망의 출력 데이터로부터 서비스의 목적에 따른 최종 결과물을 도출하는 후 처리 데이터, 즉 후처리 요소(또는 후처리 소스코드)를 사용자 단말로부터 수신할 수 있다.상술한 3개의 요소는 하나의 패키지(Package)형태로 수신될 수도 있고, 서로 구분되는 형태로 수신될 수도 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 복수의 테스트 데이터를 획득할 수 있다. 이때 각각의 '테스 트 데이터'는 서비스(또는 개별 데이터 처리 요소)에 대한 테스트 입력 데이터와 해당 테스트 입력 데이터에 상 응하는 테스트 출력 데이터로 구성될 수 있다. 가령 테스트 데이터는 서비스에 대한 테스트 입력 데이터와, 해 당 서비스에 테스트 입력 데이터를 입력하였을 경우 서비스가 출력할 것으로 기대되는 출력 데이터, 즉 테스트 출력 데이터를 포함할 수 있다. 각각의 테스트 데이터에는 이와 같은 테스트 입력 데이터와 테스트 출력 데이터 가 서로 매칭되어 있을 수 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 사용자 단말로부터 복수의 테스트 데이터를 획득할 수 있다. 본 발명의 다른 실시예에 따른 제1 프로세서는 서버의 메모리로부터 복수의 테스트 데이터를 획 득할 수도 있다. 다만 이는 예시적인 것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 본 발명의 일 실시예에 따른 제1 프로세서는 개발 환경을 묘사하는 개발 환경 데이터를 획득할 수 있다. 이때 '개발 환경'은 인공 신경망 기반 서비스의 개발 환경을 의미할 수 있다. 가령 개발 환경을 묘사하는 데이 터는 인공 신경망 기반 서비스의 개발에 사용된 개발 도구의 식별 정보, 개발 도구의 버전 정보, 사용되는 라이 브러리의 식별정보 등을 포함할 수 있다. 다만 이는 예시적인것으로 본 발명의 사상이 이에 한정되는 것은 아니 다. 본 발명의 일 실시예에 따른 제1 프로세서는 하나 이상의 데이터 처리 요소 각각에 대한 API를 생성할 수 있다. 가령 제1 프로세서는 하나 이상의 데이터 처리 요소 각각의 호출 형식과 출력 형식을 정의하는 방식 으로 API를 생성할 수 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 전술한 과정에서 획득된 개발 환경 데이터를 참조하여, 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지(Docker Image)를 생성할 수 있다. 이때 도커 이미지는 전술 한 바와 같이 하나 이상의 데이터 처리 요소의 실행에 있어서 필요한 모든 파일과 설정 값을 모아둔 것을 의미 할 수 있다. 또한 본 발명의 일 실시예에 따른 제1 프로세서는 전술한 과정에서 획득된 복수의 테스트 데이터를 이용하 여 하나 이상의 데이터 처리 요소 각각의 도커 이미지의 정상 동작 여부를 확인할 수 있다. 이때 제1 프로세서 는 개별 데이터 처리 요소 각각에 대한 정상 동작 여부를 확인할 수도 있고, 개별 데이터 처리 요소를 서 로 연결하여 서비스 전체의 정상 동작 여부를 확인할 수도 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 하나 이상의 데이터 처리 요소 각각에 대해 기준 성능을 충족 시키는 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정할 수 있다. 이때 '리소스 블록'은 전술한 바 와 같이 한 종류 이상의 리소스 할당 크기를 포함하는 가상화된 자원일 수 있다. 도 8은 본 발명의 일 실시예에 따른 제1 프로세서가 제1 데이터 처리 요소에 대한 리소스 블록의 종류 및 수량을 결정하는 과정을 설명하기 위한 도면이다. 도 8에 도시된 바와 같이, 본 발명의 일 실시예에 따른 제1 프로세서는 각 종류의 블록의 수량을 증가시켜 가며 제1 데이터 처리 요소의 응답 시간을 산출할 수 있다. 예를 들어 제1 프로세서는 C형 리소스 블록을 증가시켜 사용함에 따라 응답 시간을 산출할 수 있다. 이와 같이 본 발명의 일 실시예에 따른 제1 프로세서는 제1 트래픽 조건 하에서 리소스 블록의 종류 및 리 소스 블록의 수량 중 적어도 하나를 변경하면서 제1 데이터 처리 요소(또는 제1 데이터 처리 요소의 도커 이미 지)를 실행시키고, 그에 대한 성능 값을 산출할 수 있다.또한 본 발명의 일 실시예에 따른 제1 프로세서는 소정의 기준 성능을 만족시키는 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 확인할 수 있다. 또한 제1 프로세서는 확인된 리소스 블록의 종류 및 수량의 조합 중 어느 하나의 조합을 제1 데이터 처리 요소(또는 제1 데이터 처리 요소의 도커 이미지)에 요구되는 리소 스 블록의 종류 및 리소스 블록의 수량으로써 결정할 수 있다. 가령 기대 성능 값이 100ms 인 경우, 제1 프로세서는 A형 블록을 3개 이상 사용하는 조합, B형 블록을 3개 이상 사용하는 조합 및 C형 블록을 2개 이상 사용하는 조합을 소정의 기준 성능을 만족하는 조합으로 확인할 수 있다. 또한 제1 프로세서는 확인된 조합을 사용자 단말에 제공하여, 사용자가 복수의 조합 중 어느 하나를 선택할 수 있도록 할 수 있다. 이때 제1 프로세서는 블록 별 과금액을 함께 제공하여 사용자가 과금액을 고려하여 블록을 선택하도록 할 수도 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 하나 이상의 데이터 처리 요소 각각에 대해 상술한 과정을 반 복하여 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정할 수 있다. 다시 도 7로 돌아가면, 본 발명의 일 실시예에 따른 제1 프로세서는 하나 이상의 데이터 처리 요소 각각에 대해 결정된 조합(리소스 블록의 종류 및 수량 조합)에 대응되는 리소스를 이용하여 하나 이상의 데이터 처리 요소를 실행할 수 있다. 보다 구체적으로 제1 프로세서는 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지를 하나 이상의 데이터 처리 요소 각각에 대해 결정된 조합(리소스 블록의 종류 및 수량)에 대응되는 리소스를 이용하여 실행 할 수 있다. 이로써 본 발명은 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 특성을 고려하여 리소스의 크기를 추천 및 결정할 수 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 소정의 규칙에 따라 복수의 테스트 데이터를 이용하여 하나 이상의 데이터 처리 요소 각각의 성능을 확인할 수 있다. 이때 제1 프로세서는 도 8에서 설명한 과정에 따 라 하나 이상의 데이터 처리 요소 각각의 응답시간을 확인하는 방식으로 성능을 확인할 수 있다. 가령 본 발명의 일 실시예에 따른 제1 프로세서는 소정의 시간 주기 마다 하나 이상의 데이터 처리 요소 각각의 성능을 확인할 수 있다. 또한 제1 프로세서는 사용자의 요청에 따라 하나 이상의 데이터 처리 요소 각각의 성능을 확인할 수도 있다. 본 발명의 일 실시예에 따른 제1 프로세서는 확인된 성능에 기반하여 하나 이상의 데이터 처리 요소 각각 에 할당되는 리소스 블록의 종류 및 리소스 블록의 수량 중 적어도 하나를 갱신할 수 있다. 가령 제1 프로세서 는 모델 요소의 응답 시간이 소정의 기준 시간을 초과한 경우, 현재 모델 요소에 할당된 메모리 블록의 종 류를 참조하여 해당 메모리 블록의 수량을 증가시킬 수 있다. 다만 이는 예시적인것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 도 9는 본 발명의 일 실시예에 따른 서버에 의해 수행되는 리소스 크기 추천 방법을 설명하기 위한 흐름도 이다. 이하에서는 도 1 내지 도 8을 함께 참조하여 설명하되, 중복된 설명은 생략한다. 본 발명의 일 실시예에 따른 서버는 서비스를 구성하는 하나 이상의 데이터 처리 요소를 획득할 수 있 다.(S1010)이때 '서비스'는 인공 신경망을 이용한 서비스에 해당할 수 있다. 가령 서버는 사용자 단말 로부터 서비스를 구성하는 하나 이상의 데이터 처리 요소를 획득할 수 있다. 본 발명의 일 실시예에 따른 서버는 인공 신경망의 학습 결과로써 입력 데이터로부터 출력 데이터를 생성 하는 모델을 묘사하는 데이터, 즉 모델 요소를 사용자 단말로부터 수신할 수 있다. 또한 서버는 원본 데이터로부터 인공 신경망의 입력 데이터를 생성(처리)하는 전처리 데이터, 즉 전처리 요소(또는 전처리 소스코드)를 사용자 단말로부터 수신할 수 있다. 또한 서버는 인공 신경망의 출력 데이터로부터 서비스의 목적에 따른 최종 결과물을 도출하는 후처리 데이 터, 즉 후처리 요소(또는 후처리 소스코드)를 사용자 단말로부터 수신할 수 있다. 상술한 3개의 요소는 하나의 패키지(Package)형태로 수신될 수도 있고, 서로 구분되는 형태로 수신될 수도 있다. 본 발명의 일 실시예에 따른 서버는 단계 S1010의 수행 이전에, 적어도 한 종류 이상의 리소스의 할당 크 기를 포함하는 하나 이상의 리소스 블록을 정의할 수 있다. 도 6은 예시적인 리소스 블록을 도시한 도면이다. 전술합 바와 같이 본 발명에서 '리소스'(또는 개별 종류의 리소스)는 연산 장치가 소정의 목적을 위해서 사용할 수 있는 자원을 의미할 수 있다. 가령 리소스 서버와 같은 컴퓨팅 장치에 있어서 리소스는 가용 CPU의 코 어 수, 가용 메모리의 용량, 가용 GPU의 코어 수, 가용 GPU 메모리의 용량 및 가용 네트워크 대역폭 등을 포괄 하는 개념일 수 있다. 또한 본 발명에서 '리소스 블록'은 적어도 한 종류 이상의 리소스의 할당 크기를 포함하는 가상화된 리소스를 의미할 수 있다. 가령 리소스 블록은 도 6의 왼쪽 리소스 블록과 같이 n개의 CPU 코어, m바이트의 메모리, i개의 GPU 코어 및 k바이트의 GPU 메모리로 구성되는 개별 리소스의 조합일 수 있다. 또한 리소스 블록은 오른쪽 리소스 블록과 같이 a개의 CPU 코어, c바이트의 메모리, b개의 GPU 코어 및 d 바이트의 GPU 메모리로 구성되는 개별 리소스의 조합일 수 있다. 본 발명의 일 실시예에 따른 서버는 제1 리소스 블록(예를 들어 도 6의 510)에 할당되는 제1 종류의 리소 스 크기, 제2 종류의 리소스 크기, 제3 종류의 리소스 크기 및 제4 종류의 리소스 크기를 결정할 수 있다. 이와 유사하게 서버는 제2 리소스 블록(예를 들어 도 6의 520)에 할당되는 상기 제1 종류의 리소스의 크기, 상기 제2 종류의 리소스 크기, 상기 제3 종류의 리소스 크기 및 상기 제4 종류의 리소스 크기를 결정할 수 있다. 이때 각 종류의 리소스는 예를 들어 CPU 코어, 메모리, GPU 코어 및 GPU 메모리 중 어느 하나에 해당할 수 있다. 본 발명의 일 실시예에 따른 서버는 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 특성을 고려하여 다양한 구성(종류)의 리소스 블록을 정의할 수 있다. 가령 서버는 제1 종류 및 제2 종류의 리소스가 주로 사용되는 데이터 처리 요소(예를 들어 전처리 요소, 후처리 요소)를 위해 상대적으로 제1 종류 및 제2 종류의 리소스의 크기가 큰 리소스 블록을 정의할 수 있다. 또한 서버는 제3 종류 및 제4 종류의 리소스가 주로 사용되는 데이터 처리 요소(예를 들어 모델 요소)를 위해 상대적으로 제3 종류 및 제4 종류의 리소스의 크기가 큰 리소스 블록을 정의할 수 있다. 다만 이는 예시적 인것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 본 발명의 일 실시예에 따른 서버는 사용자의 입력에 기초하여 리소스 블록을 정의할 수 있다. 가령 서버 는 사용자 단말로부터 제1 타입의 리소스 블록을 구성하는 각 종류의 리소스의 크기와 제2 타입의 리 소스 블록을 구성하는 각 종류의 리소스의 크기를 수신하고, 이에 기초하여 각각의 리소스 블록을 정의할 수 있 다. 본 발명의 일 실시예에 따른 서버는 각각의 리소스 서버(300A, 300B, 300C)의 리소스(또는 유휴 리소스)에 기초하여 리소스 블록을 정의할 수도 있다. 이를 위해 서버는 각 종류의 리소스의 단위 크기로 각각의 리소스 서버(300A, 300B, 300C)가 가지고 있는 종류 별 리소스의 수량을 확인할 수 있다. 가령 각 종류의 리소스의 단위 크기가 1코어(CPU), 1MB(메모리), 1코 어(GPU) 및 1MB(GPU 메모리)이고, 리소스 서버(300A)가 100코어(CPU), 50MB(메모리), 70코어(GPU) 및 80MB(GPU 메모리)의 메모리를 갖는 경우를 가정해 보자. 이러한 경우 서버는 CPU 자원의 수량으로 100, 메모리 자원 의 수량으로 50, GPU 자원의 수량으로 70, 그리고 GPU 메모리 자원의 수량으로 80을 산출할 수 있다. 이때 본 발명의 일 실시예에 따른 서버는 수량이 최소인 자원의 수량에 대한 나머지 자원의 상대적 비율을 산출할 수 있다. 가령 전술한 예시에서, 서버는 수량이 최소인 자원인 메모리 자원의 수량(50개)에 대한나머지 자원의 비율을 2(CPU), 1(메모리), 1.2(GPU) 및 1.6(GPU 메모리)으로 산출할 수 있다. 본 발명의 일 실시예에 따른 서버는 상술한 과정에 따라 산출된 자원의 비율을 참조하여, 개별 리소스 블 록에 포함되는 자원의 비율을 결정할 수 있다. 가령 서버는 리소스 서버(300A)에 의해 제공되는 리소스 블 록에 대해서, 하나의 개별 블록에 2코어(CPU), 1MB(메모리), 1.2코어(GPU) 및 1.6MB(GPU 메모리)가 포함되도록 할 수 있다. 이로써 본 발명은 각각의 리소스 서버(300A, 300B, 300C)의 특성을 고려하여 리소스 블록을 생성할 수 있다. 본 발명의 일 실시예에 따른 서버는 복수의 테스트 데이터를 획득할 수 있다.(S1020) 이때 각각의 '테스트 데이터'는 서비스(또는 개별 데이터 처리 요소)에 대한 테스트 입력 데이터와 해당 테스트 입력 데이터에 상응 하는 테스트 출력 데이터로 구성될 수 있다. 가령 테스트 데이터는 서비스에 대한 테스트 입력 데이터와, 해당 서비스에 테스트 입력 데이터를 입력하였을 경우 서비스가 출력할 것으로 기대되는 출력 데이터, 즉 테스트 출 력 데이터를 포함할 수 있다. 각각의 테스트 데이터에는 이와 같은 테스트 입력 데이터와 테스트 출력 데이터가 서로 매칭되어 있을 수 있다. 본 발명의 일 실시예에 따른 서버는 사용자 단말로부터 복수의 테스트 데이터를 획득할 수 있다. 본 발명의 다른 실시예에 따른 서버는 서버의 메모리로부터 복수의 테스트 데이터를 획득할 수 도 있다. 다만 이는 예시적인 것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 본 발명의 일 실시예에 따른 서버는 개발 환경을 묘사하는 개발 환경 데이터를 획득할 수 있다.(S1030) 이 때 '개발 환경'은 인공 신경망 기반 서비스의 개발 환경을 의미할 수 있다. 가령 개발 환경을 묘사하는 데이터 는 인공 신경망 기반 서비스의 개발에 사용된 개발 도구의 식별 정보, 개발 도구의 버전 정보, 사용되는 라이브 러리의 식별정보 등을 포함할 수 있다. 다만 이는 예시적인것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 본 발명의 일 실시예에 따른 서버는 하나 이상의 데이터 처리 요소 각각에 대한 API를 생성할 수 있 다.(S1040) 가령 서버는 하나 이상의 데이터 처리 요소 각각의 호출 형식과 출력 형식을 정의하는 방식으 로 API를 생성할 수 있다. 본 발명의 일 실시예에 따른 서버는 전술한 과정에서 획득된 개발 환경 데이터를 참조하여, 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지(Docker Image)를 생성할 수 있다. 이때 도커 이미지는 전술한 바와 같이 하나 이상의 데이터 처리 요소의 실행에 있어서 필요한 모든 파일과 설정 값을 모아둔 것을 의미할 수 있 다. 또한 본 발명의 일 실시예에 따른 서버는 전술한 과정에서 획득된 복수의 테스트 데이터를 이용하여 하나 이상의 데이터 처리 요소 각각의 도커 이미지의 정상 동작 여부를 확인할 수 있다. 이때 서버는 개별 데이 터 처리 요소 각각에 대한 정상 동작 여부를 확인할 수도 있고, 개별 데이터 처리 요소를 서로 연결하여 서비스 전체의 정상 동작 여부를 확인할 수도 있다. 본 발명의 일 실시예에 따른 서버는 하나 이상의 데이터 처리 요소 각각에 대해 기준 성능을 충족 시키는 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정할 수 있다.(S1050) 이때 '리소스 블록'은 전술한 바 와 같이 한 종류 이상의 리소스 할당 크기를 포함하는 가상화된 자원일 수 있다. 도 8은 본 발명의 일 실시예에 따른 서버가 제1 데이터 처리 요소에 대한 리소스 블록의 종류 및 수량을 결정하는 과정을 설명하기 위한 도면이다. 도 8에 도시된 바와 같이, 본 발명의 일 실시예에 따른 서버는 각 종류의 블록의 수량을 증가시켜가며 제1 데이터 처리 요소의 응답 시간을 산출할 수 있다. 예를 들어 서버는 C형 리소스 블록을 증가시켜 사용함에따라 응답 시간을 산출할 수 있다. 이와 같이 본 발명의 일 실시예에 따른 서버는 제1 트래픽 조건 하에서 리소스 블록의 종류 및 리소스 블 록의 수량 중 적어도 하나를 변경하면서 제1 데이터 처리 요소(또는 제1 데이터 처리 요소의 도커 이미지)를 실 행시키고, 그에 대한 성능 값을 산출할 수 있다. 또한 본 발명의 일 실시예에 따른 서버는 소정의 기준 성능을 만족시키는 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 확인할 수 있다. 또한 서버는 확인된 리소스 블록의 종류 및 수량의 조합 중 어느 하나의 조합을 제1 데이터 처리 요소(또는 제1 데이터 처리 요소의 도커 이미지)에 요구되는 리소스 블록의 종 류 및 리소스 블록의 수량으로써 결정할 수 있다. 가령 기대 성능 값이 100ms 인 경우, 서버는 A형 블록을 3개 이상 사용하는 조합, B형 블록을 3개 이상 사 용하는 조합 및 C형 블록을 2개 이상 사용하는 조합을 소정의 기준 성능을 만족하는 조합으로 확인할 수 있다. 또한 서버는 확인된 조합을 사용자 단말에 제공하여, 사용자가 복수의 조합 중 어느 하나를 선택할 수 있도록 할 수 있다. 이때 서버는 블록 별 과금액을 함께 제공하여 사용자가 과금액을 고려하여 블록을 선택하도록 할 수도 있다. 본 발명의 일 실시예에 따른 서버는 하나 이상의 데이터 처리 요소 각각에 대해 상술한 과정을 반복하여 리소스 블록의 종류 및 리소스 블록의 수량의 조합을 결정할 수 있다. 본 발명의 일 실시예에 따른 서버는 하나 이상의 데이터 처리 요소 각각에 대해 결정된 조합(리소스 블록 의 종류 및 수량 조합)에 대응되는 리소스를 이용하여 하나 이상의 데이터 처리 요소를 실행할 수 있다.(S1060) 보다 구체적으로 서버는 하나 이상의 데이터 처리 요소 각각에 대한 도커 이미지를 하나 이상의 데이터 처 리 요소 각각에 대해 결정된 조합(리소스 블록의 종류 및 수량)에 대응되는 리소스를 이용하여 실행 할 수 있다. 이로써 본 발명은 인공 신경망 기반 서비스를 구성하는 하나 이상의 데이터 처리 요소 각각의 특성을 고려하여 리소스의 크기를 추천 및 결정할 수 있다. 본 발명의 일 실시예에 따른 서버는 소정의 규칙에 따라 복수의 테스트 데이터를 이용하여 하나 이상의 데 이터 처리 요소 각각의 성능을 확인할 수 있다. (S1070) 이때 서버는 도 8에서 설명한 과정에 따라 하나 이상의 데이터 처리 요소 각각의 응답시간을 확인하는 방식으로 성능을 확인할 수 있다. 가령 본 발명의 일 실시예에 따른 서버는 소정의 시간 주기 마다 하나 이상의 데이터 처리 요소 각각의 성 능을 확인할 수 있다. 또한 서버는 사용자의 요청에 따라 하나 이상의 데이터 처리 요소 각각의 성능을 확 인할 수도 있다. 본 발명의 일 실시예에 따른 서버는 확인된 성능에 기반하여 하나 이상의 데이터 처리 요소 각각에 할당되 는 리소스 블록의 종류 및 리소스 블록의 수량 중 적어도 하나를 갱신할 수 있다.(S1080) 가령 서버는 모 델 요소의 응답 시간이 소정의 기준 시간을 초과한 경우, 현재 모델 요소에 할당된 메모리 블록의 종류를 참조 하여 해당 메모리 블록의 수량을 증가시킬 수 있다. 다만 이는 예시적인것으로 본 발명의 사상이 이에 한정되는 것은 아니다. 이상 설명된 본 발명에 따른 실시예는 컴퓨터 상에서 다양한 구성요소를 통하여 실행될 수 있는 컴퓨터 프로그 램의 형태로 구현될 수 있으며, 이와 같은 컴퓨터 프로그램은 컴퓨터로 판독 가능한 매체에 기록될 수 있다. 이 때, 매체는 컴퓨터로 실행 가능한 프로그램을 저장하는 것일 수 있다. 매체의 예시로는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD-ROM 및 DVD와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical medium), 및 ROM, RAM, 플래시 메모리 등을 포함하여 프로그램 명 령어가 저장되도록 구성된 것이 있을 수 있다. 한편, 상기 컴퓨터 프로그램은 본 발명을 위하여 특별히 설계되고 구성된 것이거나 컴퓨터 소프트웨어 분야의 당업자에게 공지되어 사용 가능한 것일 수 있다. 컴퓨터 프로그램의 예에는, 컴파일러에 의하여 만들어지는 것 과 같은 기계어 코드 뿐만 아니라 인터프리터 등을 사용하여 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드도 포함될 수 있다. 본 발명에서 설명하는 특정 실행들은 일 실시 예들로서, 어떠한 방법으로도 본 발명의 범위를 한정하는 것은 아 니다. 명세서의 간결함을 위하여, 종래 전자적인 구성들, 제어 시스템들, 소프트웨어, 상기 시스템들의 다른 기 능적인 측면들의 기재는 생략될 수 있다. 또한, 도면에 도시된 구성 요소들 간의 선들의 연결 또는 연결 부재들 은 기능적인 연결 및/또는 물리적 또는 회로적 연결들을 예시적으로 나타낸 것으로서, 실제 장치에서는 대체 가 능하거나 추가의 다양한 기능적인 연결, 물리적인 연결, 또는 회로 연결들로서 나타내어질 수 있다. 또한, \"필 수적인\", \"중요하게\" 등과 같이 구체적인 언급이 없다면 본 발명의 적용을 위하여 반드시 필요한 구성 요소가 아닐 수 있다. 따라서, 본 발명의 사상은 상기 설명된 실시예에 국한되어 정해져서는 아니 되며, 후술하는 특허청구범위뿐만 아니라 이 특허청구범위와 균등한 또는 이로부터 등가적으로 변경된 모든 범위는 본 발명의 사상의 범주에 속한 다고 할 것이다."}
{"patent_id": "10-2022-0052880", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 가상화된 리소스를 관리하는 시스템의 구성을 개략적으로 도시한 도면이다. 도 2는 본 발명의 일 실시예에 따른 리소스 서버(300A)의 구성을 개략적으로 도시한 도면이다. 도 3은 본 발명의 일 실시예에 따른 서버의 구성을 개략적으로 도시한 도면이다. 도 4 및 도 5는 인공 신경망의 예시적인 구조를 설명하기 위한 도면이다. 도 6은 예시적인 리소스 블록을 도시한 도면이다. 도 7은 본 발명의 일 실시예에 따른 제1 프로세서가 서비스를 구성하는 하나 이상의 데이터 처리 요소 각 각의 실행을 위한 리소스의 크기를 결정하는 일련의 과정을 도시한 도면이다. 도 8은 본 발명의 일 실시예에 따른 제1 프로세서가 제1 데이터 처리 요소에 대한 리소스 블록의 종류 및 수량을 결정하는 과정을 설명하기 위한 도면이다. 도 9는 본 발명의 일 실시예에 따른 서버에 의해 수행되는 리소스 크기 추천 방법을 설명하기 위한 흐름도 이다."}
