{"patent_id": "10-2022-0106045", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0124662", "출원번호": "10-2022-0106045", "발명의 명칭": "데이터 처리 시스템, 방법, 장치, 전자 기기, 컴퓨터 판독 가능 저장 매체 및 컴퓨터 프로그", "출원인": "베이징 바이두 넷컴 사이언스 테크놀로지 컴퍼니", "발명자": "가오, 펭"}}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "데이터 처리 시스템으로서,제어 서버, 제1 풀러 및 제1 작업 실행 관리자를 포함하고;상기 제어 서버는 기 설정된 스케줄링 전략을 기반으로 제1 풀러로부터 제2 풀러를 획득하고, 기 설정된 스케줄링 전략을 기반으로 제1 작업 실행 관리자로부터 제2 작업 실행 관리자를 획득하며, 상기 제2 풀러 및 상기 제2작업 실행 관리자가 동작을 수행하도록 제어하고;상기 제2 풀러는 메시지 큐의 처리 대기 메시지의 데이터를 획득하고; 상기 처리 대기 메시지의 데이터에 대해직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 상기 저장 대기 데이터를 데이터베이스에 저장하여 저장된제1 데이터를 얻으며; 상기 데이터베이스에 상기 제1 데이터의 데이터 상태를 추가하고;상기 제2 작업 실행 관리자는 상기 데이터베이스로부터 제2 데이터를 획득하되, 상기 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이고, 상기 제1 데이터는 상기 제2 데이터를 포함하며, 상기 제2 데이터에 대응되는작업을 실행하고; 또한 상기 제2 데이터의 작업 실행 결과를 기반으로 상기 데이터 상태를 업데이트하며;상기 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이고, 상기 제1 데이터는 상기 제2 데이터를 포함하는 시스템."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 제2 작업 실행 관리자는 상기 제2 데이터를 역직렬화하고; 역직렬화가 완료된 데이터를 상기 작업 실행 관리자에 연결된 실행자에 전송하고 상기 실행자로부터 피드백된 작업 실행 결과를 수신하는 시스템."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서, 상기 처리 대기 메시지의 데이터가 비관계형 데이터인 경우, 상기 제2 풀러는 상기 처리 대기 메시지의 데이터의 유형을 획득하고; 상기 유형을 기반으로 상기 저장 대기 데이터에 키 값을 추가하고;상기 제2 작업 실행 관리자는 상기 제2 데이터를 역직렬화하기 전에 상기 키 값을 획득하고, 상기 키 값을 기반으로 상기 저장 대기 데이터의 유형을 획득하며, 상기 제2 데이터를 역직렬화한 후 상기 유형을 포함하고 역직렬화가 완료된 데이터를 상기 제2 작업 실행 관리자에 연결된 실행자에 전송하는 시스템."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 기 설정된 스케줄링 전략은 랜덤, 라운드 로빈 및 샤드(shard) 브로드캐스트 중 임의의 하나를 포함하는시스템."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "데이터 처리 방법으로서,상기 데이터베이스로부터 제2 데이터를 획득하되, 상기 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태인단계;상기 제2 데이터에 대응되는 작업을 실행하는 단계; 및상기 제2 데이터의 작업 실행 결과를 기반으로 상기 데이터 상태를 업데이트하는 단계를 포함하는 방법.공개특허 10-2022-0124662-3-청구항 6 제5항에 있어서,상기 제2 데이터에 대응되는 작업을 실행하는 상기 단계는,상기 제2 데이터를 역직렬화하는 단계; 및역직렬화가 완료된 데이터를 실행자에 전송하고 상기 실행자로부터 피드백된 작업 실행 결과를 수신하는 단계를포함하는 방법."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 제2 데이터에서 키 값을 획득하는 단계;상기 키 값을 기반으로 저장 대기 데이터의 유형을 획득하는 단계; 및상기 제2 데이터를 역직렬화한 후 상기 유형을 포함하고 역직렬화가 완료된 데이터를 상기 실행자에 전송하는단계를 더 포함하는 방법."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "데이터 처리 방법으로서,메시지 큐의 처리 대기 메시지의 데이터를 획득하는 단계;상기 처리 대기 메시지의 데이터가 비관계형 데이터인 것에 응답하여, 상기 처리 대기 메시지의 데이터의 유형을 획득하는 단계;상기 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻는 단계;상기 유형을 기반으로 상기 저장 대기 데이터에 키 값을 추가하는 단계;키 값이 추가된 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻는 단계; 및상기 데이터베이스에 상기 제1 데이터의 데이터 상태를 추가하는 단계를 포함하는 방법."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "데이터 처리 장치로서,상기 데이터베이스로부터 제2 데이터를 획득하도록 구성되되, 상기 제2 데이터에 대응되는 데이터 상태가 처리대기 상태인 상태 획득 유닛;상기 제2 데이터에 대응되는 작업을 실행하도록 구성되는 데이터 풀링(pulling) 유닛; 및상기 제2 데이터의 작업 실행 결과를 기반으로 상기 데이터 상태를 업데이트하도록 구성되는 상태 수정 유닛을포함하는 장치."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 데이터 풀링 유닛은,상기 제2 데이터를 역직렬화하도록 구성되는 풀링 모듈;역직렬화가 완료된 데이터를 실행자에 전송하도록 구성되는 전송 모듈; 및상기 실행자로부터 피드백된 작업 실행결과를 수신하도록 구성되는 수신 모듈을 포함하는 장치."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,공개특허 10-2022-0124662-4-상기 제2 데이터에서 키 값을 획득하도록 구성되는 키 값 획득 유닛;상기 키 값을 기반으로 상기 저장 대기 데이터의 유형을 획득하도록 구성되는 유형 획득 유닛; 및상기 제2 데이터를 역직렬화한 후 상기 유형을 포함하고 역직렬화가 완료된 데이터를 실행자에 전송하도록 구성되는 데이터 전송 유닛을 더 포함하는 장치."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "데이터 처리 장치로서, 메시지 큐의 처리 대기 메시지의 데이터를 획득하도록 구성되는 데이터 획득 유닛;상기 처리 대기 메시지의 데이터가 비관계형 데이터인 것에 응답하여, 상기 처리 대기 메시지의 데이터의 유형을 획득하도록 구성되는 유형 획득 유닛;상기 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻도록 구성되는 직렬화유닛;상기 유형을 기반으로 상기 저장 대기 데이터에 키 값을 추가하도록 구성되는 키 값 추가 유닛;추가된 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻도록 구성되는 취득 유닛; 및상기 데이터베이스에 상기 제1 데이터의 데이터 상태를 추가하도록 구성되는 상태 추가 유닛을 포함하는 장치."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "전자 기기로서, 적어도 하나의 프로세서; 및상기 적어도 하나의 프로세서와 통신 연결되는 메모리를 포함하고;상기 메모리에는 상기 적어도 하나의 프로세서에 의해 실행될 수 있는 명령어가 저장되고, 상기 명령어는 상기적어도 하나의 프로세서에 의해 실행되어 상기 적어도 하나의 프로세서가 제5항 내지 제8항 중 어느 한 항에 따른 방법을 구현하도록 하는 것을 특징으로 하는 전자 기기."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "컴퓨터 명령어가 저장된 비일시적 컴퓨터 판독 가능 저장 매체로서,상기 컴퓨터 명령어는 컴퓨터가 제5항 내지 제8항 중 어느 한 항에 따른 방법을 구현하도록 하는 것을 특징으로하는 저장 매체."}
{"patent_id": "10-2022-0106045", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "컴퓨터 프로그램으로서,상기 컴퓨터 프로그램이 프로세서에 의해 실행될 경우 제5항 내지 제8항 중 어느 한 항에 따른 방법을 구현하는컴퓨터 프로그램."}
{"patent_id": "10-2022-0106045", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 데이터 처리, 클라우드 서비스 등"}
{"patent_id": "10-2022-0106045", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "에 관한 것이고, 데이터 처리 시스템을 제공한다. 구체적인 구현 방식은 다음과 같다. 제어 서버는 기 설정된 스케줄링 전략을 기반으로 제1 풀러로부터 제2 풀러를 획득하 고, 제1 작업 실행 관리자로부터 제2 작업 실행 관리자를 획득하며; 제2 풀러 및 제2 작업 실행 관리자가 동작을 (뒷면에 계속) 대 표 도 - 도1"}
{"patent_id": "10-2022-0106045", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 2, "content": "공개특허10-2022-0124662 수행하도록 제어하고; 제2 풀러는 메시지 큐의 처리 대기 메시지의 데이터를 획득하고; 처리 대기 메시지의 데이 터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 저장 대기 데이터를 데이터베이스에 저장하여 저장 된 제1 데이터를 얻으며; 데이터베이스에 제1 데이터의 데이터 상태를 추가하고; 제2 작업 실행 관리자는 데이터 베이스로부터 제2 데이터를 획득하되, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이고, 제1 데이터는 제2 데이터를 포함하며, 제2 데이터에 대응되는 작업을 실행하고; 또한 제2 데이터의 작업 실행 결과를 기반으로 데이터 상태를 업데이트한다. 이러한 구현 방식은 데이터 처리의 효율을 향상시킨다. CPC특허분류 G06F 16/27 (2019.01) G06F 16/38 (2019.01) G06F 9/54 (2013.01) 발명자 양, 젠셩 중국, 베이징 100085 하이뎬 디스트릭트, 샹디 10 번가, 넘버 10, 바이두 캠퍼스 2층 구오, 웨이 중국, 베이징 100085 하이뎬 디스트릭트, 샹디 10 번가, 넘버 10, 바이두 캠퍼스 2층싱, 펑쥐 중국, 베이징 100085 하이뎬 디스트릭트, 샹디 10 번가, 넘버 10, 바이두 캠퍼스 2층 리우젱, 차오취안 중국, 베이징 100085 하이뎬 디스트릭트, 샹디 10 번가, 넘버 10, 바이두 캠퍼스 2층명 세 서 청구범위 청구항 1 데이터 처리 시스템으로서, 제어 서버, 제1 풀러 및 제1 작업 실행 관리자를 포함하고; 상기 제어 서버는 기 설정된 스케줄링 전략을 기반으로 제1 풀러로부터 제2 풀러를 획득하고, 기 설정된 스케줄 링 전략을 기반으로 제1 작업 실행 관리자로부터 제2 작업 실행 관리자를 획득하며, 상기 제2 풀러 및 상기 제2 작업 실행 관리자가 동작을 수행하도록 제어하고; 상기 제2 풀러는 메시지 큐의 처리 대기 메시지의 데이터를 획득하고; 상기 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 상기 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻으며; 상기 데이터베이스에 상기 제1 데이터의 데이터 상태를 추가하고; 상기 제2 작업 실행 관리자는 상기 데이터베이스로부터 제2 데이터를 획득하되, 상기 제2 데이터에 대응되는 데 이터 상태는 처리 대기 상태이고, 상기 제1 데이터는 상기 제2 데이터를 포함하며, 상기 제2 데이터에 대응되는 작업을 실행하고; 또한 상기 제2 데이터의 작업 실행 결과를 기반으로 상기 데이터 상태를 업데이트하며; 상기 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이고, 상기 제1 데이터는 상기 제2 데이터를 포함하 는 시스템. 청구항 2 제1항에 있어서, 상기 제2 작업 실행 관리자는 상기 제2 데이터를 역직렬화하고; 역직렬화가 완료된 데이터를 상기 작업 실행 관 리자에 연결된 실행자에 전송하고 상기 실행자로부터 피드백된 작업 실행 결과를 수신하는 시스템. 청구항 3 제2항에 있어서, 상기 처리 대기 메시지의 데이터가 비관계형 데이터인 경우, 상기 제2 풀러는 상기 처리 대기 메시지의 데이터 의 유형을 획득하고; 상기 유형을 기반으로 상기 저장 대기 데이터에 키 값을 추가하고; 상기 제2 작업 실행 관리자는 상기 제2 데이터를 역직렬화하기 전에 상기 키 값을 획득하고, 상기 키 값을 기반 으로 상기 저장 대기 데이터의 유형을 획득하며, 상기 제2 데이터를 역직렬화한 후 상기 유형을 포함하고 역직 렬화가 완료된 데이터를 상기 제2 작업 실행 관리자에 연결된 실행자에 전송하는 시스템. 청구항 4 제1항에 있어서, 상기 기 설정된 스케줄링 전략은 랜덤, 라운드 로빈 및 샤드(shard) 브로드캐스트 중 임의의 하나를 포함하는 시스템. 청구항 5 데이터 처리 방법으로서, 상기 데이터베이스로부터 제2 데이터를 획득하되, 상기 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태인 단계; 상기 제2 데이터에 대응되는 작업을 실행하는 단계; 및 상기 제2 데이터의 작업 실행 결과를 기반으로 상기 데이터 상태를 업데이트하는 단계를 포함하는 방법.청구항 6 제5항에 있어서, 상기 제2 데이터에 대응되는 작업을 실행하는 상기 단계는, 상기 제2 데이터를 역직렬화하는 단계; 및 역직렬화가 완료된 데이터를 실행자에 전송하고 상기 실행자로부터 피드백된 작업 실행 결과를 수신하는 단계를 포함하는 방법. 청구항 7 제6항에 있어서, 상기 제2 데이터에서 키 값을 획득하는 단계; 상기 키 값을 기반으로 저장 대기 데이터의 유형을 획득하는 단계; 및 상기 제2 데이터를 역직렬화한 후 상기 유형을 포함하고 역직렬화가 완료된 데이터를 상기 실행자에 전송하는 단계를 더 포함하는 방법. 청구항 8 데이터 처리 방법으로서, 메시지 큐의 처리 대기 메시지의 데이터를 획득하는 단계; 상기 처리 대기 메시지의 데이터가 비관계형 데이터인 것에 응답하여, 상기 처리 대기 메시지의 데이터의 유형 을 획득하는 단계; 상기 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻는 단계; 상기 유형을 기반으로 상기 저장 대기 데이터에 키 값을 추가하는 단계; 키 값이 추가된 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻는 단계; 및 상기 데이터베이스에 상기 제1 데이터의 데이터 상태를 추가하는 단계를 포함하는 방법. 청구항 9 데이터 처리 장치로서, 상기 데이터베이스로부터 제2 데이터를 획득하도록 구성되되, 상기 제2 데이터에 대응되는 데이터 상태가 처리 대기 상태인 상태 획득 유닛; 상기 제2 데이터에 대응되는 작업을 실행하도록 구성되는 데이터 풀링(pulling) 유닛; 및 상기 제2 데이터의 작업 실행 결과를 기반으로 상기 데이터 상태를 업데이트하도록 구성되는 상태 수정 유닛을 포함하는 장치. 청구항 10 제9항에 있어서, 상기 데이터 풀링 유닛은, 상기 제2 데이터를 역직렬화하도록 구성되는 풀링 모듈; 역직렬화가 완료된 데이터를 실행자에 전송하도록 구성되는 전송 모듈; 및 상기 실행자로부터 피드백된 작업 실행결과를 수신하도록 구성되는 수신 모듈을 포함하는 장치. 청구항 11 제10항에 있어서,상기 제2 데이터에서 키 값을 획득하도록 구성되는 키 값 획득 유닛; 상기 키 값을 기반으로 상기 저장 대기 데이터의 유형을 획득하도록 구성되는 유형 획득 유닛; 및 상기 제2 데이터를 역직렬화한 후 상기 유형을 포함하고 역직렬화가 완료된 데이터를 실행자에 전송하도록 구성 되는 데이터 전송 유닛을 더 포함하는 장치. 청구항 12 데이터 처리 장치로서, 메시지 큐의 처리 대기 메시지의 데이터를 획득하도록 구성되는 데이터 획득 유닛; 상기 처리 대기 메시지의 데이터가 비관계형 데이터인 것에 응답하여, 상기 처리 대기 메시지의 데이터의 유형 을 획득하도록 구성되는 유형 획득 유닛; 상기 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻도록 구성되는 직렬화 유닛; 상기 유형을 기반으로 상기 저장 대기 데이터에 키 값을 추가하도록 구성되는 키 값 추가 유닛; 추가된 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻도록 구성되는 취득 유닛; 및 상기 데이터베이스에 상기 제1 데이터의 데이터 상태를 추가하도록 구성되는 상태 추가 유닛을 포함하는 장치. 청구항 13 전자 기기로서, 적어도 하나의 프로세서; 및 상기 적어도 하나의 프로세서와 통신 연결되는 메모리를 포함하고; 상기 메모리에는 상기 적어도 하나의 프로세서에 의해 실행될 수 있는 명령어가 저장되고, 상기 명령어는 상기 적어도 하나의 프로세서에 의해 실행되어 상기 적어도 하나의 프로세서가 제5항 내지 제8항 중 어느 한 항에 따 른 방법을 구현하도록 하는 것을 특징으로 하는 전자 기기. 청구항 14 컴퓨터 명령어가 저장된 비일시적 컴퓨터 판독 가능 저장 매체로서, 상기 컴퓨터 명령어는 컴퓨터가 제5항 내지 제8항 중 어느 한 항에 따른 방법을 구현하도록 하는 것을 특징으로 하는 저장 매체. 청구항 15 컴퓨터 프로그램으로서, 상기 컴퓨터 프로그램이 프로세서에 의해 실행될 경우 제5항 내지 제8항 중 어느 한 항에 따른 방법을 구현하는 컴퓨터 프로그램. 발명의 설명 기 술 분 야"}
{"patent_id": "10-2022-0106045", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 3, "content": "본 발명은 컴퓨터 기술분야에 관한 것으로, 구체적으로는 데이터 처리, 클라우드 서비스 등 기술분야에 관한 것 이며, 특히 데이터 처리 시스템, 방법, 장치, 전자 기기, 컴퓨터 판독 가능 저장 매체 및 컴퓨터 프로그램에 관 한 것이다."}
{"patent_id": "10-2022-0106045", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "메시지 큐의 데이터를 처리할 때, 메시지 큐에 있는 메시지의 데이터를 가져와(pull) 처리해야 하는데, 메시지 풀링 및 처리 로직은 풀링과 처리를 통합, 즉 메시지 풀링과 메시지 실행을 한 단계로 통합하여, 풀링 또는 처 리하는 데 필요한 리소스별로 독립적인 용량 확장을 수행할 수 없으며, 서로 다른 메시지들 간의 처리 로직이 서로 병합되고 코드가 뒤섞여 관리가 어렵다. 본 발명은 데이터 처리 시스템, 방법, 장치, 전자 기기, 컴퓨터 판독 가능 저장 매체 및 컴퓨터 프로그램을 제 공한다. 제1양태에 따르면, 제어 서버, 제1 풀러 및 제1 작업 실행 관리자를 포함하는 데이터 처리 시스템을 제공하고; 제어 서버는 기 설정된 스케줄링 전략을 기반으로 제1 풀러로부터 제2 풀러를 획득하고, 기 설정된 스케줄링 전 략을 기반으로 제1 작업 실행 관리자로부터 제2 작업 실행 관리자를 획득하며; 제2 풀러 및 제2 작업 실행 관리 자가 동작을 수행하도록 제어하고; 제2 풀러는 메시지 큐의 처리 대기 메시지의 데이터를 획득하고; 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻으며; 데이터베이스에 제1 데이터의 데이터 상태를 추가하고; 제2 작업 실행 관리자는 데이터베이스로부터 제2 데이터를 획득하되, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이 고, 제1 데이터는 제2 데이터를 포함하며, 제2 데이터에 대응되는 작업을 실행하고; 또한 제2 데이터의 작업 실 행 결과를 기반으로 데이터 상태를 업데이트하며; 여기서, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상 태이고, 제1 데이터는 제2 데이터를 포함한다. 제2양태에 따르면, 데이터 처리 방법을 더 제공하고, 상기 방법은, 데이터베이스로부터 제2 데이터를 획득하되, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태인 단계; 제2 데이터에 대응되는 작업을 실행하는 단계; 및 제2 데이터의 작업 실행 결과를 기반으로 데이터 상태를 업데이트하는 단계를 포함한다. 제3양태에 따르면, 데이터 처리 방법을 더 제공하고, 상기 방법은, 메시지 큐의 처리 대기 메시지의 데이터를 획득하는 단계; 처리 대기 메시지의 데이터가 비관계형 데이터인 것에 응답하여, 처리 대기 메시지의 데이터의 유형을 획득하는 단계; 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻는 단 계; 유형을 기반으로 저장 대기 데이터에 키 값을 추가하는 단계; 키 값이 추가된 저장 대기 데이터를 데이터베 이스에 저장하여 저장된 제1 데이터를 얻는 단계; 및 데이터베이스에 제1 데이터의 데이터 상태를 추가하는 단 계를 포함한다. 제4양태에 따르면, 데이터 처리 장치를 제공하고, 상기 장치는, 데이터베이스로부터 제2 데이터를 획득하도록 구성되되, 상기 제2 데이터에 대응되는 데이터 상태가 처리 대기 상태인 상태 획득 유닛; 제2 데이터에 대응되 는 작업을 실행하도록 구성되는 데이터 풀링 유닛; 및 제2 데이터의 작업 실행 결과를 기반으로 데이터 상태를 업데이트하도록 구성되는 상태 수정 유닛을 포함한다. 제5양태에 따르면, 데이터 처리 장치를 더 제공하고, 상기 장치는, 메시지 큐의 처리 대기 메시지의 데이터를 획득하도록 구성되는 데이터 획득 유닛; 처리 대기 메시지의 데이터가 비관계형 데이터인 것에 응답하여, 처리 대기 메시지의 데이터의 유형을 획득하도록 구성되는 유형 획득 유닛; 처리 대기 메시지의 데이터에 대해 직렬 화 처리를 수행하여 저장 대기 데이터를 얻도록 구성되는 직렬화 유닛; 유형을 기반으로 저장 대기 데이터에 키 값을 추가하도록 구성되는 키 값 추가 유닛; 추가된 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻도록 구성되는 취득 유닛; 및 데이터베이스에 제1 데이터의 데이터 상태를 추가하도록 구성되는 상 태 추가 유닛을 포함한다. 제6양태에 따르면, 전자 기기를 제공하고, 상기 전자 기기는 적어도 하나의 프로세서; 및 적어도 하나의 프로세 서와 통신 연결되는 메모리를 포함하고, 여기서, 메모리에는 적어도 하나의 프로세서에 의해 실행될 수 있는 명 령어가 저장되고, 명령어는 적어도 하나의 프로세서에 의해 실행되어 적어도 하나의 프로세서가 제2양태 또는 제3양태의 임의의 구현 방법에서 기술된 방법을 구현한다. 제7양태에 따르면, 컴퓨터 명령어가 저장된 비일시적 컴퓨터 판독 가능 저장 매체를 제공하고, 컴퓨터 명령어는 컴퓨터가 제2양태 또는 제3양태의 임의의 구현 방법에서 기술된 방법을 구현하도록 한다. 제8양태에 따르면, 컴퓨터 프로그램을 제공하고, 컴퓨터 프로그램이 프로세서에 의해 실행될 경우 제2양태 또는 제3양태의 임의의 구현 방법에서 기술된 방법을 구현한다. 본 발명의 실시예는 데이터 처리 시스템을 제공하고, 상기 시스템은 제어 서버, 제1 풀러 및 제1 작업 실행 관 리자를 포함하며; 제어 서버는 기 설정된 스케줄링 전략을 기반으로 제1 풀러로부터 제2 풀러를 획득하고, 기설정된 스케줄링 전략을 기반으로 제1 작업 실행 관리자로부터 제2 작업 실행 관리자를 획득하며; 제2 풀러 및 제2 작업 실행 관리자가 동작을 수행하도록 제어하고; 제2 풀러는 메시지 큐의 처리 대기 메시지의 데이터를 획 득하고; 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 저장 대기 데이 터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻으며; 데이터베이스에 제1 데이터의 데이터 상태를 추가 하고; 제2 작업 실행 관리자는 데이터베이스로부터 제2 데이터를 획득하되, 제2 데이터에 대응되는 데이터 상태 는 처리 대기 상태이고, 제1 데이터는 제2 데이터를 포함하며, 제2 데이터에 대응되는 작업을 실행하고; 또한 제2 데이터의 작업 실행 결과를 기반으로 데이터 상태를 업데이트하며; 여기서, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이고, 제1 데이터는 제2 데이터를 포함한다. 이를 통해 데이터베이스에 있는 제1 데이터 에 데이터 상태를 표시하여 실행 관리자에 데이터 상태 기록을 제공하여 실행 관리자가 저장된 데이터의 데이터 상태를 기반으로 작업을 실행하고 데이터 상태를 업데이트할 수 있도록 함으로써, 메시지 큐의 데이터 풀링 및 처리에 분리 조건을 제공하고, 실행 관리자를 사용하여 독립적으로 작업을 실행하도록 함으로써 데이터 풀링 또 는 데이터 처리 시 각각 단독적으로 용량을 확장할 수 있는 조건을 제공하고 데이터 풀링 및 데이터 처리의 분 리 가능성을 보장하며 메시지 큐의 데이터 처리 효율을 향상시킨다. 이해해야 할 것은, 이 부분에 설명된 내용은 본 발명의 실시예의 핵심적이거나 중요한 특징을 식별하기 위한 것 이 아니며, 본 발명의 범위를 제한하기 위한 것도 아니다. 본 발명의 다른 특징들은 아래의 설명으로부터 용이 하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0106045", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하 첨부된 도면과 결부하여 본 발명의 시범적 실시예에 대해 설명하되, 이중에는 이해를 돕기 위한 본 발명의 실시예의 다양한 세부 사항이 포함되어 있으며, 이들은 단지 시범적인 것으로 간주되어야 한다. 따라서, 본 기 술분야의 통상의 지식을 가진 자는 본 발명의 범위와 정신에 위배되지 않는 전제하에 여기에 기술된 실시예에 대해 다양한 변경과 수정이 이루어질 수 있음을 인식할 것이다. 또한, 명료함과 간결함을 위하여 이하 설명에서 는 공지의 기능 및 구성에 대한 설명은 생략하였다. 도 1은 본 발명의 데이터 처리 시스템에 따른 일 실시예의 구조 모식도를 도시한 것으로, 상기 데이터 처리 시 스템은 제어 서버, 제1 풀러 및 제1 작업 실행 관리자를 포함한다. 본 실시예에서, 제어 서버는 제1 풀러 및 제1 작업 실행 관리자와 각각 통신하며, 기 설정된 스 케줄링 전략을 기반으로 제1 풀러로부터 제2 풀러를 획득하고, 기 설정된 스케줄링 전략을 기반으로 제1 작업 실행 관리자로부터 제2 작업 실행 관리자를 획득하며; 제2 풀러 및 제2 작업 실행 관리자가 동작을 수행하도록 제어한다. 본 실시예에서, 제1 풀러는 복수개의 풀러를 포함하고, 제2 풀러는 제1 풀러에 있는 하나의 풀러이 며, 제어 서버는 기 설정된 스케줄링 전략을 기반으로 제2 풀러를 획득한다. 제1 작업 실행 관리자는 복수개의 작업 실행 관리자를 포함하고, 각 작업 실행 관리자는 작업 실행에 사용되는 적어도 하나의 실행자와 연결될 수 있으며, 제2 작업 실행 관리자는 제1 작업 실행 관리자에 있는 하나의 작업 실행 관리자 이다. 작업 실행 관리자는 실행자를 관리하는 컴포넌트로서, 작업 실행 관리자를 통하여 해당 실행자에 대응되 는 작업의 저장된 제2 데이터를 실행자에 전송할 수 있다. 본 실시예에서, 제2 풀러는 메시지 큐의 처리 대기 메시지의 데이터를 획득하고; 처리 대기 메시지의 데 이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 저장 대기 데이터를 데이터베이스에 저장하여저장된 제1 데이터를 얻으며; 데이터베이스에 제1 데이터의 데이터 상태를 추가한다. 본 실시예에서, 메시지 큐는 분산 시스템의 중요한 컴포넌트로서, 결과를 즉시 얻을 필요는 없지만 병행량 (Concurrency)을 제어할 필요가 있는 경우에 적용되며, 메시지 큐는 주로 응용 프로그램 결합, 비동기 처리, 트 래픽 피크 감소 등 문제를 해결한다. 메시지 큐는 메모리 또는 디스크에 상주할 수 있으며, 메시지 큐에 저장된 메시지는 응용 프로그램에 의해 직접 읽어들일 수 있으며, 응용 프로그램은 메시지 큐를 통해 독립적으로 실행 될 수 있다. 본 실시예에서, 메시지 큐에는 복수개의 메시지가 존재하고, 제2 풀러는 데이터 프로토콜 등의 방식으로 메시지 큐에서 처리 대기 메시지의 데이터를 획득하되, 처리 대기 메시지의 데이터는 구체적인 작업과 관련된 데이터이고, 서로 다른 작업을 실행할 때 메시지 큐에서 해당 작업과 관련된 처리 대기 메시지의 데이터를 획득 할 수 있다. 예를 들어, 도메인 네임 이전 및 실명 검증 시, 데이터 처리 방법을 수행하는 수행 주체는 레지스 트리와 통신하여 레지스트리의 메시지 큐에 있는 처리 대기 메시지의 데이터를 풀링함으로써 능동적으로 레지스 트리에서 메커니즘을 풀링하여 정보를 동기화할 수 있다. 본 실시예에서, 직렬화 처리란 어떤 객체(변수) 또는 임의의 형태의 데이터 구조를 메모리에서 저장 가능한 객 체로 변경하거나 전송하는 과정을 말하며, 처리 대기 메시지의 데이터는 메모리 결과 저장된 데이터이며, 처리 대기 메시지의 데이터를 데이터베이스에 저장 가능한 데이터로 변환하기 위해서는 처리 대기 메시지에 대해 직 렬화 처리를 수행해야 한다. 본 실시예에서, 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하는 단계는, 기 설정된 직렬화 프로토콜 에 따라 처리 대기 메시지의 데이터를 데이터베이스에 저장 가능한 객체로 변환하는 단계를 포함하되, 상기 데 이터베이스에 저장 가능한 객체가 바로 저장 대기 데이터이다. 본 실시예에서, 저장 대기 데이터와 저장된 제1 데이터는 데이터 내용은 동일하나 양자의 표현 형태만 다르며, 저장 대기 데이터는 데이터베이스에 의해 식별 가능한 데이터이고, 제1 데이터는 데이터베이스에 영속화된 데이 터(Persisted Data)이며, 제1 데이터의 구조 형태는 데이터베이스의 데이터의 저장 구조와 동일하다. 본 실시예에서, 데이터베이스의 종류는 임의의 관계형 데이터베이스, 예를 들어, Access, MySQL, BD2 등일 수 있다. 데이터베이스의 저장 구조에 따라, 제1 데이터는 다양한 유형의 데이터, 예를 들어, 관계 데이터형 데이 터 또는 비관계형 데이터일 수 있다. 본 실시예에서, 데이터베이스에 있는 데이터는 다양한 작업을 구현하기 위해 사용될 수 있고, 작업의 표현 형태 는 도메인 네임 이전 작업 등과 같은 서비스 요구 사항에 따라 다를 수 있으며; 나아가, 작업의 구체적인 실행 은 실행자를 통해 실행되어야 하고, 상이한 유형의 실행자는 상응한 유형의 작업을 실행한다. 제1 데이터의 데 이터 상태는 제1 데이터의 작업 실행 중의 상태를 나타내기 위해 사용된다. 예를 들어, 저장 대기 데이터를 영 속화하여 데이터베이스에 저장한 후 저장된 제1 데이터를 얻는데, 이때 작업이 아직 실행되지 않았으므로 저장 된 데이터의 데이터 상태를 처리 대기로 표시할 수 있다. 더 나아가, 제2 작업 실행 관리자는 데이터 상 태가 처리 대기 상태로 표시된 복수개의 제1 데이터 중에서 제2 데이터를 선택하여 작업을 실행할 수 있다. 본 실시예에서, 제2 작업 실행 관리자는 데이터베이스로부터 제2 데이터를 획득하되, 제2 데이터에 대응 되는 데이터 상태는 처리 대기 상태이고, 제1 데이터는 제2 데이터를 포함하며, 제2 데이터에 대응되는 작업을 실행하고; 또한 제2 데이터의 작업 실행 결과를 기반으로 데이터 상태를 업데이트하며; 여기서, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이고, 제1 데이터는 제2 데이터를 포함한다. 본 실시예에서, 제2 작업 실행 관리자에 연결된 실행자는 획득한 제2 데이터를 기반으로 상응한 작업을 실행하고, 작업 실행 결과를 제2 작업 실행 관리자에 피드백하되, 상기 작업 실행 결과는 작업 실행 성공, 작업 실행 실패, 계속 시도 등을 포함할 수 있다. 본 실시예에서, 제2 작업 실행 관리자는 실행자로부터 피드백된 작업 실행 결과에 따라 데이터베이스에 있는 제2 데이터의 데이터 상태를 업데이트한다. 예를 들어, 작업 실행 전 제2 데이터의 데이터 상태는 처리 대 기 상태이고; 제2 작업 실행 관리자가 실행자와 통신하여 제2 데이터에 대응되는 작업이 이미 실행 완료 되었음을 확인하면, 작업 실행 관리자는 제2 데이터의 데이터 상태를 처리 성공으로 표시한다. 본 선택 가능한 구현 방법에서, 데이터 상태는 작업 실행 결과에 대응되며, 작업 실행에 성공했을 경우 작업 실 행 관리자는 제2 데이터의 데이터 상태를 처리 대기에서 처리 성공으로 업데이트하고; 작업 실행에 실패했을 경 우, 작업 실행 관리자는 제2 데이터의 데이터 상태를 처리 대기에서 처리 실패로 업데이트할 수 있으며; 작업이중복 실행되어야 할 경우 작업 실행 관리자는 제2 데이터의 데이터 상태를 처리 대기에서 계속 시도로 수정할 수 있다. 도메인 네임 이전 및 도메인 네임 실명 검증 시, 레지스트리는 능동적으로 풀링한 매커니즘을 통해 정보를 제2 풀러에 동기화하고, 제2 풀러 및 제2 작업 실행 관리자는 협력 작업을 통해 정보를 풀링, 처리하고, 내결함성을 구비한 다중 프로세서 데이터 처리 시스템을 구현하였다. 본 실시예에서, 제어 서버가 제2 풀러와 제2 작업 실행 관리자를 선택하는 시간은 서로 다를 수 있다. 예 를 들어, 메시지 큐의 처리 대기 메시지의 데이터를 획득해야 하는 경우 풀러를 선택하고; 서로 다른 작업을 처 리해야 하는 경우 작업 실행 관리자를 선택하고, 상응하게 제2 작업 실행 관리자에 연결된 적어도 하나의 실행 자를 결정할 수 있다. 본 발명의 실시예에서 제공하는 데이터 처리 시스템은 제어 서버, 제1 풀러 및 제1 작업 실행 관리자를 포함하 고; 제어 서버는 기 설정된 스케줄링 전략을 기반으로 제1 풀러로부터 제2 풀러를 획득하고; 기 설정된 스케줄 링 전략을 기반으로 제1 작업 실행 관리자로부터 제2 작업 실행 관리자를 획득하며; 제2 풀러 및 제2 작업 실행 관리자가 동작을 수행하도록 제어하고; 제2 풀러는 메시지 큐의 처리 대기 메시지의 데이터를 획득하고; 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 저장 대기 데이터를 데이터베 이스에 저장하여 저장된 제1 데이터를 얻으며; 데이터베이스에 제1 데이터의 데이터 상태를 추가하고; 제2 작업 실행 관리자는 데이터베이스로부터 제2 데이터를 획득하되, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상 태이고, 제1 데이터는 제2 데이터를 포함하며, 제2 데이터에 대응되는 작업을 실행하고; 또한 제2 데이터의 작 업 실행 결과를 기반으로 데이터 상태를 업데이트하며; 여기서, 제2 데이터에 대응되는 데이터 상태는 처리 대 기 상태이고, 제1 데이터는 제2 데이터를 포함한다. 이를 통해 데이터베이스에 있는 제1 데이터에 데이터 상태 를 표시하여 실행 관리자에 데이터 상태 기록을 제공하여 실행 관리자가 저장된 데이터의 데이터 상태를 기반으 로 작업을 실행하고 데이터 상태를 업데이트할 수 있도록 함으로써, 메시지 큐의 데이터 풀링 및 처리에 분리 조건을 제공하고, 실행 관리자를 사용하여 독립적으로 작업을 실행하도록 함으로써 데이터 풀링 또는 데이터 처 리 시 각각 단독적으로 용량을 확장할 수 있는 조건을 제공하고 데이터 풀링 및 데이터 처리의 분리 가능성을 보장하며 메시지 큐의 데이터 처리 효율을 향상시킨다. 본 실시예의 일부 선택 가능한 구현 방법에서, 제2 작업 실행 관리자는 제2 데이터를 역직렬화하고; 역직 렬화가 완료된 데이터를 작업 실행 관리자에 연결된 실행자에 전송하고 실행자로부터 피드백된 작업 실행 결과 를 수신한다. 본 실행 가능한 구현 방법에서, 제2 작업 실행 관리자는 제2 데이터를 역직렬화하여 메모리 객체를 획득 하되, 역직렬화(deserialization)란 데이터베이스에 저장된 객체의 상태 및 설명 정보에 따라 데이터베이스에 저장된 데이터를 메모리 객체로 변환하는 것을 말한다. 제2 작업 실행 관리자는 메모리 객체를 그와 연결 된 실행자에 전송하고, 실행자는 획득한 메모리 객체를 기반으로 상응한 작업을 실행한다. 본 선택 가능한 구현 방법에서, 작업 실행 관리자는 제2 데이터의 역직렬화가 완료된 데이터를 실행자에 전송하 고 실행자로부터 피드백된 작업 실행 결과를 수신하며, 실행 결과를 기반으로 데이터베이스에 저장된 제1 데이 터의 데이터 상태를 업데이트하여 작업 실행의 신뢰성을 보장하였다. 데이터 처리에서는 도메인 네임 이전 개시, 도메인 네임 이전 종료, 도메인 네임 이전 성공 등 다양한 유형의 데이터를 처리하고 서로 다른 작업 결과에 대해 상이한 동작을 취해야 한다. 관계형 데이터베이스에 비관계형 데이터가 존재하는 경우, 이런 정보는 일반적으로 구체적인 유형이 없거나 여러 유형에 대응되는 데이터이며, 이런 데이터는 일반적으로 일부 특정된 직렬화 프로토콜(예를 들어, json, xml)을 사용하여 직렬화한 후 데이터 베이스에 저장된 것이다. 데이터를 역직렬화할 때 역직렬화의 유형을 지정하여 메모리에 읽어들여야 하며, 이때 저장된 데이터의 직렬화 전의 유형이 통일되지 않으면 데이터는 순차적으로 역직렬화되어 사용될 수 없게 된다. 그러므로 구체적인 서비스 장면에 따라 2차 판단을 진행하거나 강제로 변환해야 하여 작업 체험이 떨어진다. 본 발명의 또 다른 실시예에서는, 처리 대기 메시지의 데이터가 비관계형 데이터일 경우, 제2 풀러가 처리 대기 메 시지의 데이터의 유형을 획득하고; 유형을 기반으로 저장 대기 데이터에 키 값을 추가하고; 제2 작업 실행 관리 자는 제2 데이터를 역직렬화하기 전에 키 값을 획득하여 키 값을 기반으로 저장 대기 데이터의 유형을 획득하고, 제2 데이터를 역직렬화한 후 유형을 포함하고 역직렬화가 완료된 데이터를 제2 작업 실행 관리자에 연결된 실행자에 전송한다. 본 실시예에서, 직렬화하기 전 또는 직렬화 중에, 먼저 직렬화할 객체(처리 대기 메시지의 데이터)의 유형을 획 득한 후, 객체에 대해 직렬화 처리를 수행하는 과정에서 추가적으로 키 값을 추가하되, 키 값은 현재 객체의 구 체적인 유형을 기록하고, 그 다음 데이터베이스에 저장한다. 데이터베이스에서 제2 데이터를 선택하여 사용할 경우, 역직렬화하기 전 우선 직렬화할 때 추가한 키 값을 획득 한 후, 키 값에 따라 반영하여 구체적인 유형을 획득한다. 다음 획득한 유형을 사용하여 데이터를 역직렬화한 후의 데이터에 대해 표시함으로써 역직렬화한 후의 데이터의 유형을 효과적으로 나타내었다. 본 발명의 실시예에서 제공하는 데이터 처리 방법은, 저장 대기 데이터에 데이터의 유형을 획득할 수 있는 키 값을 추가하여, 작업 실행 관리자가 저장된 데이터를 역직렬화할 때 신뢰성 있는 유형 지침을 제공하였다. 본 실시예의 일부 선택 가능한 구현 방법에서, 기 설정된 스케줄링 전략은 랜덤, 라운드 로빈 및 샤드 브로드캐 스트 중 임의의 하나를 포함한다. 본 선택 가능한 구현 방법에서, 랜덤이란 제어 서버에 연결된 제1 풀러로부터 임의의 하나의 풀러를 선택하여 제2 풀러로 하고, 제어 서버에 연결된 제1 작업 실행 관리자로부터 임의의 하나의 작 업 실행 관리자를 선택하여 제2 작업 실행 관리자로 하는 것을 말한다. 라운드 로빈은 제1 풀러에 있는 모든 풀러가 순차적으로 실행되며, 실행되는 각 풀러가 제2 풀러가 되며, 제1 작업 실행 관리자 에 있는 모든 작업 실행 관리자가 순차적으로 실행되며, 실행되는 각 작업 실행 관리자가 제2 작업 실행 관리자가 되는 것을 말한다. 샤드 브로드캐스트는 제1 풀러에 있는 풀러들을 여러 개의 독립적인 워 드 블록으로 나누고, 이러한 서브 블록들은 샤드의 전용 노드에 의해 처리되고, 풀러의 서브 블록에서 제2 풀러 를 얻으며; 샤드 브로드캐스트는 제1 작업 실행 관리자를 여러 개의 독립적인 서브 블록으로 나누고, 이러 한 서브 블록들은 샤드의 전용 노드에 의해 처리되고, 작업 실행 관리자의 서브 블록에서 제2 작업 실행 관리자 를 얻는다. 본 선택 가능한 구현 방법에서 제공하는 여러 스케줄링 전략은 제2 풀러 및 제2 작업 실행 관리자의 획득을 위 한 다양한 선택 가능한 수단을 제공하고 선택된 풀러 및 작업 실행 관리자의 신뢰성을 보장하였다. 선택 가능하게, 기 설정된 스케줄링 전략은 다음과 같은 전략을 더 포함할 수 있다. 즉, 제1 풀러에 있는 각 풀러들의 리소스 사용 상황을 기반으로 이중에서 리소스 사용량이 가장 적은 풀러를 제2 풀러로 하고; 제1 작업 실행 관리자에 있는 각 작업 실행 관리자의 리소스 사용 상황을 기반으로 이중에서 리소스 사용량이 가장 적은 작업 실행 관리자를 제2 작업 실행 관리자로 하는 것이다. 본 실시예에서 제공하는 데이터 처리 시스템은 제1 풀러 및 제1 작업 실행 관리자를 모두 독립적으로 설치하여, 제1 풀러와 메시지 큐의 네트워크 전송 수요를 기반으로 각 풀러의 네트워크 대역폭 리소스를 늘릴 수 있다. 제 1 작업 실행 관리자와 실행자 연결의 메모리 수요를 기반으로 작업 실행 관리자의 메모리 리소스를 확장함으로 써 풀러 및 작업 실행 관리자가 각각 수요로 하는 리소스에 따라 풀러 및 작업 실행 관리자의 용량을 독립적으 로 확장할 수 있다. 나아가, 제1 풀러 및 제1 작업 실행 관리자를 독립적으로 제어하여 데이터 처리 로직이 분 리되므로 메시지의 처리를 관리하는 데 유리하다. 본 실시예에서 제공하는 데이터 처리 시스템은 제1 풀러 및 제1 작업 실행 관리자의 구조 설치를 통해 메시지 큐의 데이터의 풀링 및 처리를 분리하고, 풀러 및 작업 관리자의 용량 확장을 위해 신뢰성 있는 근거를 제공하 며; 메시지 큐의 처리 대기 메시지의 데이터 처리 시 제어 서버를 사용하여 제2 풀러 및 제2 작업 실행 관리자 를 선택함으로 복수개의 풀러 및 작업 관리자를 균형적으로 선택하여 데이터 처리 효율을 향상시킨다. 선택 가능하게, 제2 풀러는 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하기 전에, 처리 대기 메시지의 데이터에서 무효 데이터를 제거하기 위해 처리 대기 메시지의 데이터에 대해 데이터 클리닝 또는 데이 터 선별을 할 수 있으며; 처리 대기 데이터에 대해 데이터 클리닝 및 데이터 선별을 함으로써 처리 대기 메시지 의 데이터의 유효성을 보장하였다. 도 2는 본 발명의 데이터 처리 방법에 따른 일 실시예의 흐름을 도시한 것으로, 상기 데이터 처리 방법은 다음과 같은 단계를 포함한다. 단계에서, 데이터베이스로부터 제2 데이터를 획득하되, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이다. 본 실시예에서, 데이터 처리 방법을 수행하는 수행 주체는 작업 실행 관리자이며, 상기 작업 실행 관리자는 여 러 상이한 유형의 실행자를 제어할 수 있고, 여러 상이한 유형의 실행자는 작업 실행 관리자로부터 받은 역직렬화한 후의 데이터(메모리 객체)를 기반으로 상응한 유형의 작업을 실행할 수 있다. 데이터베이스에 있는 제2 데이터는, 도 1에 도시된 실시예에서와 같이, 메시지 큐에서 풀링한 처리 대기 메시지 의 데이터에 대해 직렬화한 후 데이터베이스에 저장하여 얻은 제1 데이터에 있는 데이터일 수 있다. 제2 데이터 의 데이터 상태는 제2 데이터의 작업 실행 중의 상태를 나타내며, 이때 제2 데이터에 대응되는 작업이 아직 실 행되지 않았으므로 제2 데이터의 데이터 상태는 대기 처리 상태이다. 본 실시예에서, 데이터베이스에 있는 제1 데이터의 데이터 상태는 제1 데이터에 대응되는 작업의 실행 상태와 연관되며, 작업 완성 여부에 따라, 제1 데이터의 데이터 상태는 처리 대기, 처리 완료, 처리 실패, 계속 실행을 포함할 수 있으며, 제1 데이터 중 데이터 상태가 처리 대기 상태인 데이터가 제2 데이터이고; 선택 가능하게, 작업 실행 과정에서 제1 데이터의 데이터 상태는 처리 중을 더 포함할 수 있다. 단계에서, 제2 데이터에 대응되는 작업을 실행한다. 본 실시예에서, 상기 제2 데이터에 대응되는 작업을 실행하는 단계는, 제2 데이터의 유형을 기반으로 작업 유형 을 결정하는 단계, 작업 유형에 따라 제2 데이터에 대응되는 실행자를 결정하는 단계, 제2 데이터를 메모리 객 체로 역직렬화하는 단계, 및 실행자가 상기 메모리 객체를 기반으로 상응한 작업을 실행하도록 제어하는 단계를 포함한다. 본 실시예에서, 상이한 유형의 처리 대기 메시지의 데이터 또는 상이한 유형의 제2 데이터를 후속적 으로 추가해야 하는 경우, 상응한 실행자만 추가하면 되기에 실행자를 확장하는 편의성이 향상되었다. 선택 가능하게, 상기 제2 데이터에 대응되는 작업을 실행하는 단계는, 제2 데이터를 기반으로 상응한 작업을 쿼 리하는 단계, 제2 데이터를 역직렬화하여 역직렬화가 완료된 데이터를 얻는 단계, 역직렬화가 완료된 데이터를 해당 작업에 대응되는 실행자에 전송하는 단계를 포함한다. 단계에서, 제2 데이터의 작업 실행 결과를 기반으로 데이터 상태를 업데이트한다. 본 실시예에서, 데이터 처리 방법을 수행하는 수행 주체는 각 실행자로부터 피드백된 작업 실행 결과를 기반으 로 제2 데이터의 데이터 상태를 작업 실행 결과에 대응되는 상태로 업데이트한다. 구체적으로, 작업 실행 결과는 작업 실행 성공, 작업 실행 실패, 계속 시도를 포함하고; 작업 실행 결과가 작업 실행 성공인 경우, 수행 주체는 데이터 상태를 처리 대기 또는 처리 중에서 처리 성공으로 업데이트하고; 작업 실행 실패일 경우, 수행 주체는 데이터 상태를 처리 대기 또는 처리 중에서 처리 실패로 업데이트하며; 작업이 계속 시도되어야 할 경우, 수행 주체는 데이터 상태를 처리 대기 또는 처리 중에서 계속 시도로 업데이트한다. 본 실시예에서 제공하는 데이터 처리 방법은, 데이터베이스로부터 제2 데이터를 획득하되, 제2 데이터에 대응되 는 데이터 상태는 처리 대기 상태이고, 제2 데이터에 대응되는 작업을 실행하며; 제2 데이터의 작업 실행 결과 를 기반으로 데이터 상태를 업데이트함으로써 메시지 큐에서 풀링하여 직렬화한 후의 데이터를 독립적으로 처리 할 수 있어 처리 효율과 데이터 처리 프로세서의 확장 가능성을 향상시킨다. 본 실시예의 일부 선택 가능한 구현 방법에서, 상기 제2 데이터에 대응되는 작업을 실행하는 단계는, 제2 데이 터를 역직렬화하는 단계; 역직렬화가 완료된 데이터를 실행자에 전송하고 실행자로부터 피드백된 작업 실행 결 과를 수신하는 단계를 포함한다. 본 선택 가능한 구현 방법에서는, 제2 데이터를 획득한 후 제2 데이터를 역직렬화하고, 역직렬화가 완료된 데이 터를 실행자에 전송하고 실행자로부터 작업 실행 결과를 수신하여, 제2 데이터를 기반으로 작업을 실행함으로써 여러 상이한 유형의 데이터를 상이한 실행자에 전달하여 독립적으로 작업을 실행할 수 있게 하여 데이터의 확장 성을 향상시킨다. 본 발명의 또 다른 실시예에서, 상기 방법은, 제2 데이터에서 키 값을 획득하는 단계; 키 값을 기반으로 저장 대기 데이터의 유형을 획득하는 단계; 제2 데이터를 역직렬화한 후 유형을 포함하고 역직렬화가 완료된 데이터 를 실행자에 전송하는 단계를 더 포함한다. 본 실시예에서, 관계형 데이터에 저장하려는 데이터가 비관계형인 경우, 풀러는 메시지 큐에서 처리 대기 메시 지의 데이터를 풀링한 후, 우선 처리 대기 메시지의 데이터의 유형을 획득하되, 상기 유형은 처리 대기 메시지 의 데이터의 작업 중의 유형(예를 들어, 정수형, 부동소수점형 등)일 수 있고, 유형을 기반으로 데이터베이스에 저장된 저장 대기 데이터에 키 값을 추가하되, 상기 키 값은 유형을 포함하는 정보이고, 키 값을 통해 유형을 획득할 수 있다. 본 실시예를 수행하는 수행 주체는 제2 데이터(키 값이 추가된 데이터)를 역직렬화하고, 역직렬화한 후 역직렬 화가 완료된 데이터를 얻는다. 그리고 얻은 유형에 따라 유형을 포함하고 역직렬화가 완료된 데이터를 실행자에 전송한다. 본 실시예에서는, 유형을 역직렬화할 필요는 없지만, 역직렬화된 결과는 자체적으로 유형을 갖는다. 따라서 2차 강제 변환하거나 2차 역직렬화할 필요가 없기에 작업 실행의 효율을 향상시킨다. 도 3은 본 발명의 데이터 처리 방법에 따른 또 다른 실시예의 흐름을 도시한 것으로, 상기 데이터 처리 방 법은 다음과 같은 단계를 포함한다: 단계에서, 메시지 큐의 처리 대기 메시지의 데이터를 획득한다. 본 실시예에서, 메시지 큐는 분산 시스템의 중요한 컴포넌트로서, 결과를 즉시 얻을 필요는 없지만 병행량을 제 어할 필요가 있는 경우에 적용되며, 메시지 큐는 주로 응용 프로그램 혼선, 비동기 처리, 트래픽 피크 감소 등 문제를 해결한다. 메시지 큐는 메모리 또는 디스크에 상주할 수 있으며, 메시지 큐에 저장된 메시지는 응용 프 로그램에 의해 직접 읽어들일 수 있으며, 응용 프로그램은 메시지 큐를 통해 독립적으로 실행될 수 있다. 본 실시예에서, 메시지 큐에는 복수개의 메시지가 존재하고, 데이터 처리 방법을 수행하는 수행 주체는 데이터 프로토콜 등의 방식으로 메시지 큐에서 처리 대기 메시지의 데이터를 획득하되, 처리 대기 메시지의 데이터는 구체적인 작업과 관련된 데이터이고, 서로 다른 작업을 실행할 때 메시지 큐에서 해당 작업과 관련된 처리 대기 메시지의 데이터를 획득할 수 있다. 예를 들어, 도메인 네임 이전 및 실명 검증 시, 데이터 처리 방법을 수행하 는 수행 주체는 레지스트리와 통신하여 레지스트리의 메시지 큐에 있는 처리 대기 메시지의 데이터를 풀링함으 로써 능동적으로 레지스트리에서 메커니즘을 풀링하여 정보를 동기화할 수 있다. 단계에서, 처리 대기 메시지의 데이터가 비관계형 데이터인 것에 응답하여, 처리 대기 메시지의 데이터의 유형을 획득한다. 본 실시예에서, 관계형 데이터에 저장하려는 데이터가 비관계형인 경우, 풀러는 메시지 큐에서 처리 대기 메시 지의 데이터를 풀링한 후, 우선 처리 대기 메시지의 데이터의 유형을 획득하되, 상기 유형은 처리 대기 메시지 의 데이터의 작업 중의 유형(예를 들어, 정수형, 부동소수점형 등)일 수 있다. 단계에서, 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻는다. 직렬화 처리란 어떤 객체(변수) 또는 임의의 형태의 데이터 구조를 메모리에서 저장 가능한 객체로 변경하거나 전송하는 과정을 말하며, 처리 대기 메시지의 데이터는 메모리 결과 저장된 데이터이며, 처리 대기 메시지의 데 이터를 데이터베이스에 저장 가능한 데이터로 변환하기 위해서는 처리 대기 메시지에 대해 직렬화 처리를 수행 해야 한다. 본 실시예에서, 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하는 단계는 기 설정된 직렬화 프로토콜 에 따라 처리 대기 메시지의 데이터를 데이터베이스에 저장 가능한 객체로 변환하는 단계를 포함하되, 상기 데 이터베이스에 저장 가능한 객체가 바로 저장 대기 데이터이다. 선택 가능하게, 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하기 전에, 처리 대기 메시지의 데이터에 대해 데이터 정제 또는 데이터 선별을 하여 처리 대기 메시지의 데이터 중에서 무효 데이터를 제거할 수 있으며; 처리 대기 데이터에 대해 데이터 정제 및 데이터 선별을 함으로써 처리 대기 메시지의 데이터의 유효성 을 보장하였다. 단계에서, 유형을 기반으로 저장 대기 데이터에 키 값을 추가한다. 본 실시예에서, 유형을 기반으로 데이터베이스에 저장된 저장 대기 데이터에 키 값을 추가하되, 키 값은 키 식 별자 및 상기 키 식별자에 대응되는 유형 정보를 포함하고, 상기 키 값은 유형을 포함한 정보이며, 키 값을 통 하여 유형을 얻을 수 있다. 단계에서, 키 값이 추가된 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻는다. 본 실시예에서, 데이터 처리 방법을 수행하는 수행 주체는 저장 대기 데이터를 획득한 후 바로 데이터베이스에 저장 대기 데이터를 저장하여 실제적으로 데이터베이스에 저장된 제1 데이터를 얻는다. 설명해야 할 것은, 저장 대기 데이터와 저장된 제1 데이터는 데이터 내용은 동일하나 양자의 표현 형태만 다르 며, 저장 대기 데이터는 데이터베이스에 의해 식별 가능한 데이터이고, 제1 데이터는 데이터베이스에 영속화된 데이터이며, 제1 데이터의 구조 형태는 데이터베이스의 데이터의 저장 구조와 동일하다.본 실시예에서, 데이터베이스의 종류는 임의의 관계형 데이터베이스, 예를 들어, Access, MySQL, BD2 등일 수 있다. 본 실시예에서, 데이터베이스의 저장 구조에 따라, 제1 데이터는 다양한 유형의 데이터, 예를 들어, 관계 데이 터형 데이터 또는 비관계형 데이터일 수 있다. 단계에서, 데이터베이스에 제1 데이터의 데이터 상태를 추가한다. 본 실시예에서, 데이터베이스에 있는 데이터는 다양한 작업을 구현하기 위해 사용되고, 작업의 표현 형태는 도 메인 네임 이전 작업 등과 같은 서비스 요구 사항에 따라 다르며; 나아가, 작업의 구체적인 실행은 실행자를 통 해 실행되어야 하고, 상이한 유형의 실행자는 상응한 유형의 작업을 실행한다. 제1 데이터의 데이터 상태는 제1 데이터의 작업 실행 중의 상태를 나타내기 위해 사용된다. 예를 들어, 수행 주체가 저장 대기 데이터를 영속화 하여 데이터베이스에 저장한 후 저장된 제1 데이터를 얻으며, 작업이 아직 실행되지 않은 경우, 저장된 데이터 의 데이터 상태를 처리 대기로 표시할 수 있으며, 데이터 상태가 처리 대기 상태인 제1 데이터를 제2 데이터라 고 통칭한다. 본 실시예에서, 작업 실행 관리자는 적어도 하나의 실행자를 관리하는 컴포넌트로서, 작업 실행 관리자를 통하 여 해당 실행자에 대응되는 작업의 제2 데이터를 각 실행자에 전송할 수 있다. 본 실시예에서, 작업 실행 관리자는 또한 제2 데이터를 역직렬화하여 메모리 객체를 얻을 수 있으며, 역직렬화 란 데이터베이스에 저장된 객체의 상태 및 설명 정보에 따라 데이터베이스의 제2 데이터를 메모리 객체로 변환 하는 것을 말한다. 작업 실행 관리자는 메모리 객체를 그와 연결된 실행자에 전송하고, 상기 실행자는 획득한 메모리 객체를 기반으로 상응한 작업을 실행하고, 작업 실행 관리자에 작업 실행 결과를 피드백하되, 상기 작업 실행 결과는 작업 실행 성공, 작업 실행 실패, 계속 시도 등을 포함할 수 있다. 본 실시예에서, 작업 실행 관리자는 각 실행자로부터 피드백된 작업 실행 결과에 따라 데이터베이스에 있는 제2 데이터의 데이터 상태를 수정한다. 예를 들어, 작업 실행 전 제2 데이터의 데이터 상태는 처리 대기 상태이고; 작업 실행 관리자가 실행자와 통신하여 제2 데이터에 대응되는 작업이 이미 실행 완료되었음을 확인하면, 작업 실행 관리자는 제2 데이터의 데이터 상태를 처리 성공으로 표시한다. 작업 실행 관리자가 데이터 상태를 기반으로 데이터베이스로부터 제2 데이터를 획득하여 작업을 실행하고, 데이 터 상태를 업데이트하는 단계는, 제2 데이터의 데이터 상태가 처리 대기 상태인 경우, 작업 실행 관리자는 제2 데이터를 획득하여 역직렬화하고, 역직렬화가 완료된 데이터를 적어도 하나의 실행자에 전송하는 단계; 각 실행 자로부터 피드백된 작업 실행 결과를 기반으로 데이터 상태를 작업 실행 결과에 대응되는 상태로 수정하는 단계 를 포함한다. 본 실시예에서 제공하는 데이터 처리 방법은, 우선, 메시지 큐의 처리 대기 메시지의 데이터를 획득하고; 그 다 음, 처리 대기 메시지의 데이터가 비관계형 데이터인 경우, 처리 대기 메시지의 데이터의 유형을 획득하고; 그 다음, 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 그 다음, 유형을 기반으로 저장 대기 데이터에 키 값을 추가하고; 이어서, 키 값이 추가된 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻고; 마지막으로, 데이터베이스에 제1 데이터의 데이터 상태를 추가한다. 이를 통해 데이터베이스에 있는 제1 데이터에 데이터 상태를 표시하여 실행 관리자에 데이터 상태 기록을 제공하여 실행 관리자가 저장된 데이터의 데이터 상태를 기반으로 작업을 실행하고 데이터 상태를 업데이트할 수 있도록 함으로써, 메시지 큐의 데이터 풀링 및 처리에 분리 조건을 제공하고; 실행 관리자를 사용하여 독립적으로 작업 을 실행하도록 함으로써 데이터 풀링 또는 데이터 처리 시 각각 단독적으로 용량을 확장할 수 있는 조건을 제공 하고 데이터 풀링 및 데이터 처리의 분리 가능성을 보장하며 메시지 큐의 데이터 처리 효율을 향상시킨다. 본 실시예에서는 키 값을 추가한 저장 대기 데이터를 데이터베이스에 저장하여 제1 데이터를 얻음으로써, 작업 실 행 관리자가 저장된 데이터를 역직렬화하기 전에 키 값을 획득하고, 키 값을 기반으로 저장 대기 데이터의 유형 을 획득하며, 저장된 데이터를 역직렬화한 후 유형을 포함하고 역직렬화가 완료된 데이터를 적어도 하나의 실행 자에 전송할 수 있다. 유형을 역직렬화할 필요는 없지만, 역직렬화한 결과는 자체적으로 유형을 갖는다. 따라서 2차 강제 변환하거나 2차 역직렬화할 필요가 없어 작업 실행의 효율을 향상시킨다. 나아가, 도 4를 참조하면, 상기 각 도면에 도시된 방법의 구현으로, 본 발명은 데이터 처리 장치의 일 실시예를 제공하고, 상기 장치 실시예는 도 2에 도시된 방법 실시예와 대응된다. 도 4에 도시된 바와 같이, 본 실시예에서 제공하는 데이터 처리 장치는, 상태획득 유닛, 데이터 풀링 유닛 및 상태 수정 유닛을 포함한다. 여기서, 상기 상태획득 유닛은 데이터베이스로부터 제2 데 이터를 획득하도록 구성될 수 있고, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이다. 상기 데이터 풀 링 유닛은 제2 데이터에 대응되는 작업을 실행하도록 구성될 수 있다. 상기 상태 수정 유닛은 제2 데 이터의 작업 실행 결과를 기반으로 데이터 상태를 업데이트하도록 구성될 수 있다. 본 실시예에의 데이터 처리 시스템에서, 상태획득 유닛, 데이터 풀링 유닛, 상태 수정 유닛 의 구체적인 처리 및 이에 따른 기술적 효과는 도 2의 대응되는 각 실시예에서의 단계, 단계 및 단계의 관련 설명을 참조할 수 있으며, 여기서 더 이상 설명하지 않는다. 본 실시예의 일부 선택 가능한 구현 방법에서, 상기 데이터 풀링 유닛은, 풀링 모듈(미도시), 전송 모듈 (미도시) 및 수신 모듈(미도시)을 포함한다. 여기서, 상기 풀링 모듈은 제2 데이터를 역직렬화하도록 구성될 수 있다. 상기 전송 모듈은 역직렬화가 완료된 데이터를 실행자에 전송하도록 구성될 수 있다. 상기 수신 모듈은 실행자로부터 피드백된 작업 실행결과를 수신하도록 구성될 수 있다. 본 실시예의 일부 선택 가능한 구현 방법에서, 상기 장치는, 키 값 획득 유닛(미도시), 유형 획득 유닛(미 도시) 및 데이터 전송 유닛(미도시)을 더 포함한다. 여기서, 상기 키 값 획득 유닛은 제2 데이터에 있는 키 값 을 획득하도록 구성될 수 있다. 상기 유형 획득 유닛은 키 값을 기반으로 저장 대기 데이터의 유형을 획득하도 록 구성될 수 있다. 상기 데이터 전송 유닛은 제2 데이터를 역직렬화한 후 유형을 포함하고 역직렬화가 완료된 데이터를 실행자에 전송하도록 구성될 수 있다. 본 실시예에서 제공하는 데이터 처리 장치는, 상태 획득 유닛은 데이터베이스로부터 제2 데이터를 획득하 되, 제2 데이터에 대응되는 데이터 상태는 처리 대기 상태이고; 데이터 풀링 유닛은 제2 데이터에 대응되 는 작업을 실행하고; 상태 수정 유닛은 제2 데이터의 작업 실행 결과를 기반으로 데이터 상태를 업데이트 하여, 이를 통해 메시지 큐에서 풀링하여 직렬화한 후의 데이터를 독립적으로 처리할 수 있어 처리 효율과 데이 터 처리 프로세서의 확장 가능성을 향상시킨다. 나아가, 도 5를 참조하면, 상기 각 도면에 도시된 방법의 구현으로, 본 발명은 데이터 처리 장치의 또 다른 실 시예를 제공하고, 상기 장치 실시예는 도 3에 도시된 방법 실시예와 대응된다. 도 5에 도시된 바와 같이, 본 실시예에서 제공하는 데이터 처리 장치는, 데이터 획득 유닛, 유형 획 득 유닛, 직렬화 유닛, 키 값 추가 유닛, 취득 유닛 및 상태 추가 유닛을 포함한다. 여기서, 상기 데이터 획득 유닛은 메시지 큐의 처리 대기 메시지의 데이터를 획득하도록 구성될 수 있다. 상기 유형 획득 유닛은 처리 대기 메시지의 데이터가 비관계형 데이터인 경우, 처리 대기 메시지의 데이터 의 유형을 획득하도록 구성될 수 있다. 상기 직렬화 유닛은 처리 대기 메시지의 데이터에 대해 직렬화 처 리를 수행하여 저장 대기 데이터를 얻도록 구성될 수 있다. 상기 키 값 추가 유닛은 유형을 기반으로 저장 대기 데이터에 키 값을 추가하도록 구성될 수 있다. 상기 취득 유닛은 추가된 저장 대기 데이터를 데이터 베이스에 저장하여 저장된 제1 데이터를 얻도록 구성될 수 있다. 상기 상태 추가 유닛은 데이터베이스에 상기 제1 데이터의 데이터 상태를 추가하도록 구성될 수 있다. 본 실시예의 데이터 처리 장치에서, 데이터 획득 유닛, 유형 획득 유닛, 직렬화 유닛, 키 값 추가 유닛, 취득 유닛, 상태 추가 유닛의 구체적인 처리 및 이에 따른 기술적 효과는 도 3의 대응되는 각 실시예에서의 단계, 단계, 단계, 단계, 단계 및 단계의 관련 설명 을 참조할 수 있으며, 여기서 더 이상 설명하지 않는다. 본 실시예에서 제공하는 데이터 처리 방법은, 우선, 데이터 획득 유닛은 메시지 큐의 처리 대기 메시지의 데이터를 획득하고; 그 다음, 유형 획득 유닛은 처리 대기 메시지의 데이터가 비관계형 데이터인 경우, 처 리 대기 메시지의 데이터의 유형을 획득하고; 그 다음, 직렬화 유닛은 처리 대기 메시지의 데이터에 대해 직렬화 처리를 수행하여 저장 대기 데이터를 얻고; 그 다음, 키 값 추가 유닛은 유형을 기반으로 저장 대 기 데이터에 키 값을 추가하고; 이어서, 취득 유닛은 키 값이 추가된 저장 대기 데이터를 데이터베이스에 저장하여 저장된 제1 데이터를 얻고; 마지막으로, 상태 추가 유닛은 데이터베이스에 제1 데이터의 데이터 상태를 추가한다. 이를 통해 데이터베이스에 있는 제1 데이터에 데이터 상태를 표시하여 실행 관리자에 데이터 상태 기록을 제공하여 실행 관리자가 저장된 데이터의 데이터 상태를 기반으로 작업을 실행하고 데이터 상태를 업데이트할 수 있도록 함으로써, 메시지 큐의 데이터 풀링 및 처리에 분리 조건을 제공하고; 실행 관리자를 사 용하여 독립적으로 작업을 실행하도록 함으로써 데이터 풀링 또는 데이터 처리 시 각각 단독적으로 용량을 확장 할 수 있는 조건을 제공하고 데이터 풀링 및 데이터 처리의 분리 가능성을 보장하며 메시지 큐의 데이터 처리효율을 향상시킨다. 본 실시예에서는 키 값을 추가한 저장 대기 데이터를 데이터베이스에 저장하여 제1 데이터 를 얻음으로써, 작업 실행 관리자가 저장된 데이터를 역직렬화하기 전에 키 값을 획득하고, 키 값을 기반으로 저장 대기 데이터의 유형을 획득하며, 저장된 데이터를 역직렬화한 후 유형을 포함하고 역직렬화가 완료된 데이 터를 적어도 하나의 실행자에 전송할 수 있다. 유형을 역직렬화할 필요는 없지만, 역직렬화한 결과는 자체적으 로 유형을 갖는다. 따라서 2차 강제 변환하거나 2차 역직렬화할 필요가 없어 작업 실행의 효율을 향상시킨다. 본 발명의 기술적 해결방안에서 언급된 사용자의 개인정보의 수집, 저장, 사용, 가공, 전송, 제공 및 공개 등의 처리는 모두 관련 법률과 법규의 규정에 부합되며, 공서양속을 위반하지 않는다. 본 발명의 실시예에 따르면, 본 발명은 전자 기기, 판독 가능한 저장 매체 및 컴퓨터 프로그램을 더 제공한다. 도 6에서는 본 발명 의 실시예를 구현하기 위한 전자 기기의 개략적인 블록도를 도시하였다. 전자 기기는 랩톱 컴퓨터, 데스크탑, 워크스테이션, 개인 정보 단말기, 서버, 블레이드 서버, 대형 컴퓨터 및 기타 적절한 컴퓨터 등과 같은 다양한 형태의 디지털 컴퓨터를 표시한다. 전자 기기는 또한 개인용 디지털 프로세서, 휴대폰, 스마트폰, 웨어러블 장치 및 기타 유사한 컴퓨팅 장치 등과 같은 다양한 형태의 모바일 장치를 표시할 수 있다. 본문에 표시된 부품, 이들의 연결과 관계 및 이들의 기능은 단지 예시일 뿐, 본문에서 설명 및/또는 청구된 본 발명의 구현을 제한하기 위한 것이 아니다. 도 6에 도시된 바와 같이, 전자 기기는 컴퓨팅 유닛을 포함하고, 상기 컴퓨팅 유닛은 읽기 전용 메모리(ROM)에 저장된 컴퓨터 프로그램 또는 저장 유닛으로부터 랜덤 액세스 메모리(RAM)에 로 딩된 컴퓨터 프로그램에 따라 다양한 적절한 동작 및 프로세스를 수행할 수 있다. RAM에는 또한 기기(60 0)의 동작에 필요한 각종 프로그램 및 데이터가 저장될 수 있다. 컴퓨팅 유닛, ROM, 및 RAM은 버스를 통해 서로 연결된다. 입/출력(I/O) 인터페이스도 버스에 연결된다. 전자 기기에 있는 키보드, 마우스 등과 같은 입력 유닛; 각종 유형의 디스플레이, 스피커 등과 같은 출력 유닛; 자기 디스크, 광 디스크 등과 같은 저장 유닛; 및 네트워크 카드, 모뎀, 무선 통신 트랜 시버 등과 같은 통신 유닛 등을 포함하는 다수의 부품은 I/O 인터페이스에 연결된다. 통신 유닛(60 9)은 전자 기기가 인터넷과 같은 컴퓨터 네트워크 및/또는 다양한 통신 네트워크를 통해 다른 기기와 정보 /데이터를 교환할 수 있도록 한다. 컴퓨팅 유닛은 프로세싱 및 컴퓨팅 능력을 갖춘 각종 범용 및/또는 전용 프로세싱 컴포넌트일 수 있다. 컴 퓨팅 유닛의 일부 예시에는, 중앙 처리 장치(CPU), 그래픽 처리 장치(GPU), 각종 전용 인공지능(AI) 컴퓨 팅 칩, 머신 러닝 모델 알고리즘을 실행하는 다양한 컴퓨팅 장치, 디지털 신호 프로세서(DSP) 및 임의의 적당한 프로세서, 컨트롤러, 마이크로컨트롤러 등을 포함하지만 이에 한정되지는 않는다. 컴퓨팅 유닛은 위에서 설명된 각 방법 및 처리, 예를 들어 데이터 처리 방법을 실행한다. 예를 들어, 일부 실시예에서, 데이터 처리 방법은 저장 유닛과 같은 기계 판독 가능 매체에 유형적으로 포함되는 컴퓨터 소프트웨어 프로그램으로 구 현될 수 있다. 일부 실시예에서, 컴퓨터 프로그램의 일부 또는 전부는 ROM 및/또는 통신 유닛을 통해 전자 기기에 로드 및/또는 설치될 수 있다. 컴퓨터 프로그램이 RAM에 로드되고 컴퓨팅 유닛에 의해 실행될 경우, 위에서 설명된 데이터 처리 방법의 하나 또는 여러 단계가 수행될 수 있다. 선택적으로, 다 른 실시예에서, 컴퓨팅 유닛은 다른 임의의 적절한 방식(예를 들어, 펌웨어)을 통해 데이터 처리 방법을 구현하도록 구성될 수 있다. 본문에서 설명된 시스템 및 기술의 각 구현 방법은 디지털 전자 회로 시스템, 집적 회로 시스템, 현장 프로그래 머블 게이트 어레이(FPGA), 전용 집적 회로(ASIC), 전용 표준 제품(ASSP), 시스템 온 칩(SOC), 복합 프로그래머 블 논리 소자(CPLD), 컴퓨터 하드웨어, 펌웨어, 소프트웨어, 및/또는 이들의 조합으로 구현될 수 있다. 이런 다 양한 구현 방법은 다음과 같은 방법을 포함할 수 있다. 즉, 하나 또는 다수의 컴퓨터 프로그램에서 구현되고, 상기 하나 또는 다수의 컴퓨터 프로그램은 적어도 하나의 프로그램 가능한 프로세서의 프로그램 가능한 시스템 에서 실행 및/또는 해석될 수 있고, 상기 프로그램 가능한 프로세서는 전용 또는 범용 프로그램 가능 프로세서 일 수 있으며, 스토리지 시스템, 적어도 하나의 입력 장치, 및 적어도 하나의 출력 장치로부터 데이터 및 명령 어를 수신하고, 데이터 및 명령어를 상기 스토리지 시스템, 상기 적어도 하나의 입력 장치 및 상기 적어도 하나 의 출력 장치로 전송할 수 있다. 본 발명의 방법을 구현하기 위한 프로그램 코드는 하나 또는 다수의 프로그래밍 언어의 임의의 조합으로 작성될 수 있다. 이런 프로그램 코드는 범용 컴퓨터, 전용 컴퓨터 또는 기타 프로그램 가능한 데이터 처리 장치 또는 데이터 처리 시스템의 프로세서 또는 컨트롤러에 제공되어, 프로그램 코드가 프로세서 또는 컨트롤러에 의해 실행될 때 흐름도 및/또는 블록도에서 지정된 기능/동작이 실현될 수 있다. 프로그램 코드는 완전히 기계에서 실 행될 수도 있고, 부분적으로 기계에서 실행될 수도 있으며, 독립형 소프트웨어 패키지로 부분적으로 기계에서 실행되고 부분적으로는 원격 기계에서 실행되거나 전체적으로 원격 기계 또는 서버에서 실행될 수도 있다. 본 발명의 컨텍스트에서, 기계 판독 가능 매체는 명령어 실행 시스템, 장치, 또는 기기에 의해 또는 이와 결부 하여 사용하기 위한 프로그램이 포함되거나 저장될 수 있는 유형적 매체일 수 있다. 기계 판독 가능 매체는 전 자, 자기, 광학, 전자기, 적외선 또는 반도체 시스템, 장치 또는 기기이거나 이들의 임의의 적절한 조합을 포함 할 수 있지만 이에 한정되지는 않는다. 기계 판독 가능 매체의 보다 구체적인 예시는, 하나 또는 다수의 라인을 기반으로 한 전기 연결, 휴대용 컴퓨터 디스크, 하드 디스크, 랜덤 액세스 메모리(RAM), 읽기 전용 메모리 (ROM), 소거 가능 프로그램 가능 읽기 전용 메모리(EPROM 또는 플래시 메모리), 광섬유, 휴대용 컴팩트 디스크 읽기 전용 메모리(CD-ROM), 광학 저장 장치, 자기 저장 장치, 또는 이들의 임의의 적절한 조합이 있다. 사용자와의 상호 작용을 위해, 여기서 설명된 시스템 및 기술은 사용자에게 정보를 표시하기 위한 디스플레이 장치(예를 들어, CRT(음극선관) 또는 LCD(액정 디스플레이) 모니터); 및 사용자가 컴퓨터에 입력할 수 있도록 키보드 및 포인팅 장치를 구비한 컴퓨터에서 구현될 수 있다. 사용자와의 상호작용을 위해 다른 종류의 장치도 사용될 수 있으며; 예를 들어, 사용자에게 제공되는 피드백은 임의의 형태의 감각적 피드백(예를 들어, 시각적 피드백, 청각적 피드백 또는 촉각적 피드백)일 수 있으며; 사용자의 입력은 임의의 형태(소리 입력, 음성 입력 또는 촉각적 입력)로 수신될 수 있다. 여기서 설명한 시스템 및 기술은 백엔드 부품을 포함하는 컴퓨팅 시스템(예를 들어, 데이터 서버로서), 또는 미 들웨어 부품을 포함하는 컴퓨팅 시스템(예를 들어, 애플리케이션 서버), 또는 프론트엔드 부품을 포함하는 컴퓨 팅 시스템(예를 들어, 그래픽 사용자 인터페이스 또는 웹 브라우저를 구비한 사용자 컴퓨터, 사용자는 상기 그 래픽 사용자 인터페이스 또는 웹 브라우저를 통해 여기서 설명한 시스템 및 기술의 구현 방법과 상호 작용할 수 있음), 또는 이런 백엔드 부품, 미들웨어 부품 또는 프론트엔드 부품의 임의의 조합을 포함하는 컴퓨팅 시스템 에서 구현될 수 있다. 시스템의 부품은 임의의 방식 또는 매체의 디지털 데이터 통신(예를 들어, 통신 네트워크)를 통해 서로 연결될 수 있다. 통신 네트워크의 예시로는 근거리 통신망(LAN), 광대역 통신망(WAN) 및 인터넷을 포함한다. 컴퓨터 시스템은 클라이언트와 서버를 포함할 수 있다. 클라이언트와 서버는 일반적으로 서로 멀리 떨어져 있으 며 통신 네트워크를 통해 상호 작용한다. 클라이언트와 서버의 관계는 상응한 컴퓨터에서 실행되고 서로 클라이 언트-서버 관계를 갖는 컴퓨터 프로그램을 통해 발생한다. 서버는 클라우드 서버일 수도 있고, 분산 시스템의 서버일 수도 있으며, 또는 블록체인을 결합한 서버일 수도 있다. 이해해야 할 것은, 위에 표시된 각종 형태의 프로세스를 사용하여 단계를 재정렬, 추가 또는 삭제할 수 있다. 예를 들어, 본 발명에 기술된 각 단계는 본 발명에 개시된 기술적 해결방안의 원하는 결과를 달성할 수 있는 한, 병렬, 순차적 또는 다른 순서로 실행될 수 있으며, 본문은 이에 대해 제한하지 않는다."}
{"patent_id": "10-2022-0106045", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "상술한 구체적인 구현 방법은 본 발명의 보호 범위를 제한하지 않는다. 본 기술분야의 기술자는 설계 요구 및 기타 요인에 따라 다양한 수정, 조합, 하위 조합 및 대체될 수 있음을 이해해야 한다. 본 발명의 정신 및 원칙 을 벗어나지 않는 범위에서 이루어진 모든 수정, 등가 교체 및 개선 등은 모두 본 발명의 보호 범위 내에 포함 되어야 한다.도면 도면1 도면2 도면3 도면4 도면5 도면6"}
{"patent_id": "10-2022-0106045", "section": "도면", "subsection": "도면설명", "item": 1, "content": "첨부된 도면은 본 발명을 더 잘 이해하기 위해 사용된 것으로, 본 발명은 이에 한정되지 않는다. 도 1은 본 발명의 데이터 처리 시스템에 따른 일 실시예의 구조 모식도이다. 도 2는 본 발명의 데이터 처리 방법에 따른 일 실시예의 흐름도이다. 도 3은 본 발명의 데이터 처리 방법에 따른 또 다른 실시예의 흐름도이다. 도 4는 본 발명의 데이터 처리 장치에 따른 일 실시예의 구조 모식도이다. 도 5는 본 발명의 데이터 처리 장치에 따른 또 다른 실시예의 구조 모식도이다. 도 6은 본 발명의 실시예에 따른 데이터 처리 방법을 구현하기 위한 전자 기기의 블록도이다."}
