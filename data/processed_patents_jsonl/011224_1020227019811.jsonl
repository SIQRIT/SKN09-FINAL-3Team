{"patent_id": "10-2022-7019811", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0103130", "출원번호": "10-2022-7019811", "발명의 명칭": "다양한 컴퓨팅 패러다임들 내에서 계산된 계산 중력에 기초한 계산 워크로드 분산", "출원인": "인터내셔널 비지네스 머신즈 코포레이션", "발명자": "보그맨, 아론"}}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "방법에 있어서, 상기 방법은:시스템 인터넷 내의 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드 및 클라이언트 네트워크 컴퓨팅 패러다임의 각컴퓨팅 노드의 계산 중력을 계산하는 단계; 시스템 인터넷 내의 각각의 컴퓨팅 노드의 계산된 계산 중력에 기초하여 알고리즘의 각 컴포넌트 부분을 클라우드 컴퓨팅 패러다임 및 클라이언트 네트워크 컴퓨팅 패러다임의 적절한 컴퓨팅 노드에 분산하는 단계; 그리고상기 알고리즘의 각 컴포넌트 부분의 계산 워크로드를 처리를 위한 알고리즘의 대응하는 컴포넌트 부분을 갖는클라이언트 네트워크 컴퓨팅 패러다임 및 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드에 분산하는 단계를 포함하는방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1 항에 있어서, 상기 방법은:계산들을 반복함이 없이 다른 클라이언트 컴퓨팅 노드들에 결과들을 제공하는 콘텐츠 전달 네트워크 엣지 서버들(content delivery network edge servers) 상에 상기 알고리즘의 각 컴포넌트 부분에 대응하는 각각의 계산워크로드의 결과들을 캐시 하는 단계(caching)를 더 포함하는방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1 항에 있어서, 상기 방법은:상기 시스템 인터넷의 클라우드 컴퓨팅 패러다임에 위치하는, 상기 알고리즘의 컴포넌트 부분들을 식별하는 단계를 더 포함하는방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1 항에 있어서, 상기 방법은:상기 시스템 인터넷에 상기 알고리즘의 컴포넌트 부분을 배치(deploy)하기 위해 입력을 수신하는 단계; 및상기 시스템 인터넷에 배치될 상기 알고리즘의 컴포넌트 부분과 관련하여 상기 클라우드 컴퓨팅 패러다임의 각컴퓨팅 노드 및 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드의 계산 중력을 계산하는 단계를더 포함하는방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4 항에 있어서, 상기 방법은:상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드 및 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅노드에 대응하는 계산 중력에 기초하여 상기 알고리즘의 컴포넌트 부분을 배치하기 위해 상기 시스템 인터넷에서 최고 계산 중력 점수를 갖는 컴퓨팅 노드를 결정하는 단계; 및 상기 시스템 인터넷에서 상기 최고 계산 중력 점수를 갖는 컴퓨팅 노드에 상기 알고리즘의 컴포넌트 부분을 배치하는 단계를 더 포함하는공개특허 10-2022-0103130-3-방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1 항에 있어서, 상기 방법은:다양한 컴퓨팅 패러다임들 및 컴퓨팅 노드들 사이에 분산된 전체 계산 워크로드의 결과들을 생성하는 데 사용되는 상기 컴퓨팅 패러다임들 및 컴퓨팅 노드들의 조합인 창발적 클라우드(an emergent cloud)를 형성하기 위해상기 클라우드 컴퓨팅 패러다임의 클라우드 컨테이너들(cloud containers)을 이동하는 단계를 더 포함하는방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1 항에 있어서, 상기 방법은:상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드, 및 상기 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드를 식별하는 단계; 그리고상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드, 및 상기 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드의 식별에 기초하여 시스템 인터넷을형성하는 단계를 더 포함하는방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1 항에 있어서, 알고리즘 전송 파이프라인은 타겟 엣지 컴퓨팅 노드에 의한 계산을 위해 데이터를 준비하기위해 상기 데이터를 사전 처리하는 방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1 항에 있어서, 상기 클라우드 컴퓨팅 패러다임의 컴퓨팅 노드들은 중앙 집중식 클래식 컴퓨터들 및 중앙 집중식 양자 컴퓨터들을 포함하고, 상기 클라이언트 네트워크 컴퓨팅 패러다임의 컴퓨팅 노드들은 엣지 컴퓨터들을 포함하는 방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1 항에 있어서, 각 컴퓨팅 노드의 계산 중력을 계산하는 단계는 상기 알고리즘의 컴포넌트 부분들에 대응하는계산 복잡성, 컴퓨팅 노드 가용성, 및 컴퓨팅 노드 계산 워크로드 적합성(computing node computationworkload fit)을 고려하는 방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1 항에 있어서, 상기 알고리즘은 복잡한 인공 지능 컴포넌트들이 있는 인공 지능 애플리케이션인 방법."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "컴퓨터 시스템에 있어서, 상기 컴퓨터 시스템은:버스 시스템;상기 버스 시스템에 연결된 스토리지 디바이스 - 상기 스토리지 디바이스는 프로그램 명령들을 저장함 -; 그리고상기 버스 시스템에 연결된 프로세서를 포함하고, 상기 프로세서는 상기 프로그램 명령들을 실행하며, 상기 프공개특허 10-2022-0103130-4-로그램 명령들은:시스템 인터넷 내의 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드 및 클라이언트 네트워크 컴퓨팅 패러다임의 각컴퓨팅 노드의 계산 중력을 계산하는 단계; 시스템 인터넷 내의 각각의 컴퓨팅 노드의 계산된 계산 중력에 기초하여 알고리즘의 각 컴포넌트 부분을 클라우드 컴퓨팅 패러다임 및 클라이언트 네트워크 컴퓨팅 패러다임의 적절한 컴퓨팅 노드에 분산하는 단계; 그리고상기 알고리즘의 각 컴포넌트 부분의 계산 워크로드를 처리를 위한 알고리즘의 대응하는 컴포넌트 부분을 갖는클라이언트 네트워크 컴퓨팅 패러다임 및 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드에 분산하는 단계를 수행하는컴퓨터 시스템."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12 항에 있어서, 상기 프로세서는 상기 프로그램 명령들을 실행하며, 상기 프로그램 명령들은:계산들을 반복함이 없이 다른 클라이언트 컴퓨팅 노드들에 결과들을 제공하는 콘텐츠 전달 네트워크 엣지 서버들(content delivery network edge servers) 상에 상기 알고리즘의 각 컴포넌트 부분에 대응하는 각각의 계산워크로드의 결과들을 캐시 하는 단계(caching)를 더 수행하는컴퓨터 시스템."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제12 항에 있어서, 상기 프로세서는 상기 프로그램 명령들을 실행하며, 상기 프로그램 명령들은:상기 시스템 인터넷의 클라우드 컴퓨팅 패러다임에 위치하는, 상기 알고리즘의 컴포넌트 부분들을 식별하는 단계를 더 수행하는컴퓨터 시스템."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제12 항에 있어서, 상기 프로세서는 상기 프로그램 명령들을 실행하며, 상기 프로그램 명령들은:상기 시스템 인터넷에 상기 알고리즘의 컴포넌트 부분을 배치(deploy)하기 위해 입력을 수신하는 단계; 및상기 시스템 인터넷에 배치될 상기 알고리즘의 컴포넌트 부분과 관련하여 상기 클라우드 컴퓨팅 패러다임의 각컴퓨팅 노드 및 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드의 계산 중력을 계산하는 단계를더 수행하는컴퓨터 시스템."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15 항에 있어서, 상기 프로세서는 상기 프로그램 명령들을 실행하며, 상기 프로그램 명령들은:상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드 및 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅노드에 대응하는 계산 중력에 기초하여 상기 알고리즘의 컴포넌트 부분을 배치하기 위해 상기 시스템 인터넷에서 최고 계산 중력 점수를 갖는 컴퓨팅 노드를 결정하는 단계; 및 상기 시스템 인터넷에서 상기 최고 계산 중력 점수를 갖는 컴퓨팅 노드에 상기 알고리즘의 컴포넌트 부분을 배치하는 단계를 더 수행하는컴퓨터 시스템."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제12 항에 있어서, 상기 프로세서는 상기 프로그램 명령들을 실행하며, 상기 프로그램 명령들은:다양한 컴퓨팅 패러다임들 및 컴퓨팅 노드들 사이에 분산된 전체 계산 워크로드의 결과들을 생성하는 데 사용되는 상기 컴퓨팅 패러다임들 및 컴퓨팅 노드들의 조합인 창발적 클라우드(an emergent cloud)를 형성하기 위해공개특허 10-2022-0103130-5-상기 클라우드 컴퓨팅 패러다임의 클라우드 컨테이너들(cloud containers)을 이동하는 단계를 더 수행하는컴퓨터 시스템."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제12 항에 있어서, 상기 프로세서는 상기 프로그램 명령들을 실행하며, 상기 프로그램 명령들은:상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드, 및 상기 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드를 식별하는 단계; 그리고상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드, 및 상기 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드의 식별에 기초하여 시스템 인터넷을형성하는 단계를 더 수행하는컴퓨터 시스템."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "컴퓨터 프로그램 제품에 있어서, 상기 컴퓨터 프로그램 제품은 컴퓨터에 의해서 실행가능한 프로그램 명령들이구현된 컴퓨터 판독 가능 스토리지 매체를 포함하고, 상기 프로그램 명령들은 컴퓨터가 방법을 수행하도록하며, 상기 방법은:시스템 인터넷 내의 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드 및 클라이언트 네트워크 컴퓨팅 패러다임의 각컴퓨팅 노드의 계산 중력을 계산하는 단계; 시스템 인터넷 내의 각각의 컴퓨팅 노드의 계산된 계산 중력에 기초하여 알고리즘의 각 컴포넌트 부분을 클라우드 컴퓨팅 패러다임 및 클라이언트 네트워크 컴퓨팅 패러다임의 적절한 컴퓨팅 노드에 분산하는 단계; 그리고상기 알고리즘의 각 컴포넌트 부분의 계산 워크로드를 처리를 위한 알고리즘의 대응하는 컴포넌트 부분을 갖는클라이언트 네트워크 컴퓨팅 패러다임 및 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드에 분산하는 단계를 포함하는컴퓨터 프로그램 제품."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19 항에 있어서, 상기 방법은:계산들을 반복함이 없이 다른 클라이언트 컴퓨팅 노드들에 결과들을 제공하는 콘텐츠 전달 네트워크 엣지 서버들(content delivery network edge servers) 상에 상기 알고리즘의 각 컴포넌트 부분에 대응하는 각각의 계산워크로드의 결과들을 캐시 하는 단계(caching)를 더 포함하는컴퓨터 프로그램 제품."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제19 항에 있어서, 상기 방법은:상기 시스템 인터넷의 클라우드 컴퓨팅 패러다임에 위치하는, 상기 알고리즘의 컴포넌트 부분들을 식별하는 단계를 더 포함하는컴퓨터 프로그램 제품."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제19 항에 있어서, 상기 방법은:상기 시스템 인터넷에 상기 알고리즘의 컴포넌트 부분을 배치(deploy)하기 위해 입력을 수신하는 단계; 및상기 시스템 인터넷에 배치될 상기 알고리즘의 컴포넌트 부분과 관련하여 상기 클라우드 컴퓨팅 패러다임의 각컴퓨팅 노드 및 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드의 계산 중력을 계산하는 단계를더 포함하는공개특허 10-2022-0103130-6-컴퓨터 프로그램 제품."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제22 항에 있어서, 상기 방법은:상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드 및 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅노드에 대응하는 계산 중력에 기초하여 상기 알고리즘의 컴포넌트 부분을 배치하기 위해 상기 시스템 인터넷에서 최고 계산 중력 점수를 갖는 컴퓨팅 노드를 결정하는 단계; 및 상기 시스템 인터넷에서 상기 최고 계산 중력 점수를 갖는 컴퓨팅 노드에 상기 알고리즘의 컴포넌트 부분을 배치하는 단계를 더 포함하는컴퓨터 프로그램 제품."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제19 항에 있어서, 상기 방법은:다양한 컴퓨팅 패러다임들 및 컴퓨팅 노드들 사이에 분산된 전체 계산 워크로드의 결과들을 생성하는 데 사용되는 상기 컴퓨팅 패러다임들 및 컴퓨팅 노드들의 조합인 창발적 클라우드(an emergent cloud)를 형성하기 위해상기 클라우드 컴퓨팅 패러다임의 클라우드 컨테이너들(cloud containers)을 이동하는 단계를 더 포함하는컴퓨터 프로그램 제품."}
{"patent_id": "10-2022-7019811", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_25", "content": "제19항에 있어서, 상기 방법은:상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드, 및 상기 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드를 식별하는 단계; 그리고상기 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 상기 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드, 및 상기 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드의 식별에 기초하여 시스템 인터넷을형성하는 단계를 더 포함하는컴퓨터 프로그램 제품."}
{"patent_id": "10-2022-7019811", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 컴퓨팅 패러다임들 내에서 계산된 계산 중력에 기초한 계산 워크로드 분산(DISTRIBUTING COMPUTATION WORKLOADS BASED ON CALCULATED COMPUTE GRAVITY WITHIN DIFFERING COMPUTING PARADIGMS) 다양한 컴퓨팅 패러다임들의 컴퓨팅 노드들 사이에 계산 워크로드를 분산하는 방법이 제공된다. 시스템 인터넷 (뒷면에 계속)"}
{"patent_id": "10-2022-7019811", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 일반적으로 콘텐츠 전달 네트워크들(content delivery networks)에 관한 것으로, 보다 구체적 으로 시스템 인터넷의 다양한 컴퓨팅 패러다임들(differing computing paradigms of an Internet of Systems) 의 컴퓨팅 노드들 간에 복잡한 인공 지능 컴포넌트를 갖는 대규모 애플리케이션의 계산 워크로드를 분산하기 위 해 상기 다양한 컴퓨팅 패러다임들 내에서 각 컴퓨팅 노드의 계산 중력을 계산하는 것에 관한 것이다."}
{"patent_id": "10-2022-7019811", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "콘텐츠 전달 네트워크는 데이터 콘텐츠의 빠른 전송을 제공하기 위해 함께 작동하는 지리적으로 분산된 서버들의 그룹을 말한다. 콘텐츠 전달 네트워크는, 예를 들어, HTML 페이지, JavaScript 파일, 스타일시트, 이 미지, 비디오 등과 같은 데이터 콘텐츠를 로드하는 데 필요한 자산들의 빠른 전송을 가능하게 한다. 콘텐츠 전 달 네트워크 서비스의 인기는 계속 증가하고 있으며 현재 대부분의 웹 트래픽은 콘텐츠 전달 네트워크들을 통해 제공되며, 이들은, 예를 들어, 소셜 미디어 웹사이트들과 같은 주요 웹사이트들로부터의 트래픽을 포함한다."}
{"patent_id": "10-2022-7019811", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "콘텐츠 전달 네트워크는 콘텐츠를 호스트 하지 않으며 웹 호스팅의 필요성을 대체할 수 없지만 콘텐츠 전달 네트워크는 네트워크 엣지에서 콘텐츠를 캐시하는 데 도움을 주므로 웹사이트 성능을 향상시킨다. 많은 웹사이트들은 기존 호스팅 서비스들에 의해서 그들의 성능 요구 사항들을 충족하는 데 어려움을 겪고 있으며, 이 것이 이들 웹 사이트들이 콘텐츠 전달 네트워크들을 선택하는 이유이다. 캐싱을 활용하여 호스팅 대역폭을 감소 시키고, 서비스에서 인터럽션들을 방지하며, 보안을 개선함으로써, 콘텐츠 전달 네트워크는 기존 웹 호스팅과 관련된 일부 문제들을 완화하는 인기 있는 선택이다. 콘텐츠 전달 네트워크는 다양한 네트워크들 간의 교환 지점들(exchange points)에서 서버들 찾는다 (locate). 이들 교환 지점들은 그들의 다양한 네트워크들 상에서 발생하는 트래픽에 대한 액세스를 서로 제공하 기 위해 다양한 데이터 공급자들이 연결하는 기본 위치들(the primary locations)이다. 콘텐츠 전달 네트워크 엣지 서버는 네트워크의 논리적 극단 또는 엣지(the logical extreme or edge of the network)에 존재하는 컴 퓨터이다. 엣지 서버는 종종 다양한 네트워크들 간의 연결 역할을 한다. 콘텐츠 전달 네트워크 엣지 서버의 주 요 목적은 데이터 콘텐츠를 요청하는 클라이언트 디바이스에 최대한 가깝게 캐시하여, 이에 의하여 대기 시간을 줄이고 로드 시간을 개선하는 것이다. 포그 컴퓨팅(Fog computing)은 엣지 서버들을 사용하여 상당한 양의 계산, 저장 및 통신을 수행하는 아 키텍처이다. 포그 네트워킹(Fog networking)은 컨트롤 평면과 데이터 평면으로 구성된다. 예를 들어, 데이터 평 면 상에서, 포그 컴퓨팅을 사용하면 컴퓨팅 서비스들을, 데이터 센터의 서버와 달리, 네트워크 가장자리에 상주 시킬 수 있다. 클라우드 컴퓨팅과 비교하여, 포그 컴퓨팅은 최종 사용자들 및 클라이언트 디바이스들에 대한 근 접성, 조밀한 지리적 분산 및 로컬 자원 풀링, 더 나은 서비스 품질을 달성하기 위한 대기 시간 감소 및 백본 대역폭 절약들, 엣지 분석/스트림 마이닝을 강조하여, 우수한 사용자 경험의 결과들을 제공한다. 포그 컴퓨팅은 엔드포인트 디바이스들과 클라우드 컴퓨팅 데이터 센터들 간의 계산, 저장, 및 네트워킹 서비스들의 운영을 용 이하게 한다. 엣지 컴퓨팅은 일반적으로 서비스가 인스턴스화되는 위치를 의미하지만, 포그 컴퓨팅은 최종 사용 자들이 컨트롤하는 디바이스들 및 시스템들 상에 또는 가까운 곳에 통신, 계산, 저장 자원들 및 서비스들의 분 산을 의미한다. 복잡한 데이터 처리 파이프라인이 있는 대규모 컴퓨팅 시스템들은 일반적으로 하이브리드 클라우드 상에 서 실행된다. 데이터 처리 파이프라인은 직렬로 연결된 데이터 처리 디바이스들의 세트이며, 여기서 한 디바이 스의 출력은 직렬의 다음 디바이스의 입력이다. 임시 서비스들(Ephemeral services)는 데이터 페이로드들 (payloads of data)을 허용하는 무국적 마이크로서비스들(stateless microservices)로 하이브리드 클라우드를 통해 이용 가능하다. 예를 들어, 쿠버네티스와 도커(Kubernetes with Docker) 같은, 플랫폼 서비스(Platform as a Service)는 이들 계산 집약적인 애플리케이션들 위해 많은 계산 자원들을 제공한다. 높은 입력/출력, 네트 워크 대역폭, 및 특수 하드웨어 요건들이 필요한 다른 컴퓨터 알고리즘들은 하부구조 서비스(Infrastructure as a Service) 또는 기존의 쿠버네티스가 공급할 수 없는 가상 머신들과 공유 가능한 머신들을 필요로 한다. 그러 나 기존의 클라우드 컴퓨팅 패러다임은 높은 사용자 수요로 무너졌다. 사용 수요가 많은 이러한 경우들에서, 원본 서버들(origin servers)은 콘텐츠 전달 네트워크 엣지 서버 들로 보호된다. 상기 엣지 서버들은 서버 정적 콘텐츠(server static content)에 웹 가속 계층(a web acceleration tier)을 제공한다. 그러나, 인공 지능 기반 애플리케이션들 및 기타 동적 콘텐츠 생성 플랫폼들은 매일 페타바이트의 데이터(petabytes of data)를 생성한다. 정보의 양은 특징 공간의 조합 폭발(the combinatorial explosion of the feature space)로 나타난다. 수십억 개의 요청들과 동적으로 생성된 데이터의 조합은 콘텐츠 전달 네트워크 엣지 컴퓨팅과 하이브리드 클라우드 컴퓨팅을 부적절한 것으로 만들어 버린다."}
{"patent_id": "10-2022-7019811", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "하나의 예시적인 실시예에 따라, 다양한 컴퓨팅 패러다임들(differing computing paradigms)의 컴퓨팅 노드들 사이에 계산 워크로드를 분산하기 위한 컴퓨터 구현 방법이 제공된다. 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드와 시스템 인터넷(an Internet of Systems) 내의 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드의 계산 중력(Compute gravity)이 계산된다. 알고리즘의 각 컴포넌트 부분은 시스템 인터넷 내의 각 컴퓨팅 노드의 계산된 계산 중력에 기초하여 클라우드 컴퓨팅 패러다임 및 클라이언트 네트워크 컴퓨팅 패러다임의 적 절한 컴퓨팅 노드에 분산된다(distributed). 상기 알고리즘의 각 컴포넌트 부분의 계산 워크로드는 처리를 위해 상기 알고리즘의 대응하는 컴포넌트 부분을 갖는 클라우드 컴퓨팅 패러다임 및 클라이언트 네트워크 컴퓨팅 패 러다임의 각 컴퓨팅 노드에 분산된다. 다른 예시적인 실시예에 따라, 다양한 컴퓨팅 패러다임들의 컴퓨팅 노드 들 사이에 계산 워크로드를 분산하기 위한 컴퓨터 시스템 및 컴퓨터 프로그램 제품 이 제공된다. 다양한 예시적인 실시예들에 따라, 상기 알고리즘의 각 컴포넌트 부분에 대응하는 각각의 계산 워크로드 의 결과들은 반복 계산들 없이 다른 클라이언트 컴퓨팅 노드들에 상기 결과들을 제공하는 콘텐츠 전달 네트워크엣지 서버들(content delivery network edge servers) 상에 캐싱된다(cached). 또한, 다양한 예시적인 실시예 들은, 시스템 인터넷의 클라우드 컴퓨팅 패러다임에 위치하는, 상기 알고리즘의 컴포넌트 부분들을 식별한다. 더욱이, 다양한 예시적인 실시예들은 시스템 인터넷에서 상기 알고리즘의 컴포넌트 부분을 배치하기 위해 입력 을 수신하고 시스템 인터넷에 배치되는 상기 알고리즘의 컴포넌트 부분에 관하여 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드 및 클라이언트 네트워크 컴퓨팅 패러다임의 각 컴퓨팅 노드의 계산 중력을 계산한다. 그 다음, 다양한 예시적인 실시예들은 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드 및 클라이언트 네트워크 컴퓨팅 패러 다임의 각 컴퓨팅 노드에 대응하는 계산 중력에 기초하여 상기 알고리즘의 컴포넌트 부분을 배치하기 위해 시스 템 인터넷에서 최고의 계산 중력 점수(a highest compute gravity score)를 갖는 컴퓨팅 노드를 결정하고 상기 알고리즘의 컴포넌트 부분을 시스템 인터넷에서 최고의 계산 중력 점수(a highest compute gravity score)를 갖 는 상기 컴퓨팅 노드에 배치한다. 그 결과, 다양한 예시적인 실시예들은 시스템 인터넷의 다양한 컴퓨팅 패러다임들 내에서 각 컴퓨팅 노 드의 계산 중력을 계산함으로써 데이터 처리 분야에서 기술적 효과 및 실제 애플리케이션을 제공하여 상기 알고 리즘의 컴포넌트 부분들의 계산 워크로드를 다양한 컴퓨팅 패러다임들의 컴퓨팅 노드들 사이에 분산한다. 따라 서, 다양한 예시적인 실시예의 이점들은 다양한 컴퓨팅 패러다임들 내에서 감소된 계산 노드 워크로드, 감소된 네트워크 대기 시간, 감소된 로드 시간, 증가된 데이터 전송 속도 및 성능, 및 사용자 요청들에 대한 감소된 응 답 시간을 포함한다."}
{"patent_id": "10-2022-7019811", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명은 통합의 가능한 기술 세부 수준에서 시스템, 방법 및/또는 컴퓨터 프로그램 제품이 될 수 있다. 컴퓨터 프로그램 제품은 컴퓨터 판독 가능 스토리지 매체(또는 매체)를 포함할 수 있으며, 이 매체 상에 프로세서가 본 발명을 수행하도록 하는 컴퓨터 판독 가능 프로그램 명령들을 갖는다. 상기 컴퓨터 판독 가능 스토리지 매체는 명령 실행 장치에 의해 사용될 명령들을 유지 및 저장할 수 있 는 유형의(tangible) 디바이스일 수 있다. 상기 컴퓨터 판독 가능 스토리지 매체는, 예를 들면, 전자 스토리지 디바이스, 자기 스토리지 디바이스, 광 스토리지 디바이스, 전자기 스토리지 디바이스, 반도체 스토리지 디바이 스, 또는 전술한 것들의 모든 적절한 조합일 수 있으며, 그러나 이에 한정되지는 않는다. 컴퓨터 판독 가능 스 토리지 매체의 더 구체적인 예들의 비포괄적인 목록에는 다음이 포함될 수 있다: 휴대용 컴퓨터 디스켓, 하드 디스크, 랜덤 액세스 메모리(RAM), 판독-전용 메모리(ROM), 소거 및 프로그램가능 판독-전용 메모리(EPROM 또는 플래시 메모리), 정적 랜덤 액세스 메모리(SRAM), 휴대용 컴팩트 디스크 판독-전용 메모리(CD-ROM), 디지털 다 용도 디스크(DVD), 메모리 스틱, 플로피 디스크, 천공-카드들 또는 명령들이 기록된 홈에 있는 융기된 구조들 같이 머신적으로 인코드 된 장치, 및 전술한 것들의 모든 적절한 조합. 본 명세서에서 사용될 때, 컴퓨터 판독 가능 스토리지 매체는 무선 전파들이나 다른 자유롭게 전파되는 전자기파들, 도파 관이나 기타 전송 매체(예를 들어, 광섬유 케이블을 통해 전달되는 광 펄스들)를 통해 전파되는 전자기파들, 또는 선(wire)을 통해 전송되는 전기 신호들 같이 그 자체로 일시적인(transitory) 신호들로 해석되지는 않는다. 여기서 기술되는 컴퓨터 판독 가능 명령들은, 예를 들어, 인터넷, 근거리 통신망, 광역 통신망 및/또는 무선 네트워크 등의 통신망(네트워크)을 통해 컴퓨터 판독 가능 스토리지 매체로부터 각각 컴퓨팅/처리 디바이 스들로 또는 외부 스토리지 디바이스로부터 외부 컴퓨터로 다운로드 될 수 있다. 상기 통신망은 구리 전송 케이 블들, 광 전송 섬유들, 무선 전송, 라우터들, 방화벽들, 스위치들, 게이트웨이 컴퓨터들 및/또는 엣지 서버들을 포함할 수 있다. 각 컴퓨팅/처리 디바이스 내 네트워크 어댑터 카드 또는 네트워크 인터페이스는 상기 통신망으 로부터 컴퓨터 판독 가능 프로그램 명령들을 수신하고 그 컴퓨터 판독 가능 프로그램 명령들을 각각의 컴퓨팅/ 처리 디바이스 내의 컴퓨터 판독 가능 스토리지 매체에 저장하기 위해 전송한다. 본 발명의 연산들을 실행하기 위한 컴퓨터 판독 가능 프로그램 명령들은 Smalltalk, C++ 또는 그와 유사 언어 등의 객체 지향 프로그래밍 언어와 \"C\" 프로그래밍 언어 또는 그와 유사한 프로그래밍 언어 등의 종래의 절차적 프로그래밍 언어들을 포함하여, 하나 또는 그 이상의 프로그래밍 언어들을 조합하여 작성된(written) 어 셈블러 명령들, 명령-세트-아키텍처(ISA) 명령들, 머신 명령들, 머신 종속 명령들, 마이크로코드, 펌웨어 명령 들, 상태-셋팅 데이터, 집적회로를 위한 구성 데이터, 또는 소스 코드나 목적 코드일 수 있다. 상기 컴퓨터 판 독 가능 프로그램 명령들은 전적으로 사용자의 컴퓨터상에서, 부분적으로 사용자의 컴퓨터상에서, 독립형 (stand-alone) 소프트웨어 패키지로서, 부분적으로 사용자의 컴퓨터상에서 그리고 부분적으로 원격 컴퓨터상에 서 또는 전적으로 원격 컴퓨터나 서버상에서 실행될 수 있다. 위에서 마지막의 경우에, 원격 컴퓨터는 근거리 통신망(LAN) 또는 광역 통신망(WAN)을 포함한 모든 종류의 네트워크를 통해서 사용자의 컴퓨터에 접속될 수 있 고, 또는 이 접속은 (예를 들어, 인터넷 서비스 제공자를 이용한 인터넷을 통해서) 외부 컴퓨터에 이루어질 수 도 있다. 일부 실시 예들에서, 예를 들어 프로그램 가능 로직 회로, 필드-프로그램 가능 게이트 어레이들 (FPGA), 또는 프로그램 가능 로직 어레이들(PLA)을 포함한 전자 회로는 본 발명의 실시 예들을 수행하기 위해 전자 회로를 맞춤화 하도록 상기 컴퓨터 판독 가능 프로그램 명령들의 상태 정보를 활용하여 상기 컴퓨터 판독 가능 프로그램 명령들을 실행할 수 있다. 본 발명의 특징들이 본 발명의 실시 예들에 따른 방법들, 장치들(시스템들), 및 컴퓨터 프로그램 제품들 의 플로 차트 예시도들 및/또는 블록도들을 참조하여 기술된다. 플로 차트 예시도들 및/또는 블록도들의 각 블 록과 플로 차트 예시도들 및/또는 블록도들 내 블록들의 조합들은 컴퓨터 판독 가능 프로그램 명령들에 의해 구 현될 수 있다는 것을 이해할 수 있을 것이다. 이들 컴퓨터 판독 가능 프로그램 명령들은 범용 컴퓨터, 특수목적용 컴퓨터, 또는 기타 프로그램가능 데 이터 처리 유닛의 프로세서에 제공되어 머신(machine)을 생성하고, 그렇게 하여 그 명령들이 상기 컴퓨터 또는 기타 프로그램가능 데이터 처리 유닛의 프로세서를 통해서 실행되어, 상기 플로 차트 및/또는 블록도의 블록 또 는 블록들에 명시된 기능들/동작들을 구현하기 위한 수단을 생성할 수 있다. 이들 컴퓨터 판독 가능 프로그램 명령들은 또한 컴퓨터 판독 가능 스토리지 매체에 저장될 수 있으며, 컴퓨터, 프로그램가능 데이터 처리 유닛 및/또는 기타 디바이스들에 지시하여 명령들이 저장된 상기 컴퓨터 판독 가능 스토리지 매체가 상기 플로 차트 및/또는 블록도의 블록 또는 블록들에 명시된 기능/동작의 특징들을 구현하는 명령들을 포함하는 제조품(an article of manufacture)을 포함하도록 특정한 방식으로 기능하게 할 수 있다. 상기 컴퓨터 판독 가능 프로그램 명령들은 또한 컴퓨터, 기타 프로그램가능 데이터 처리 유닛, 또는 다 른 디바이스에 로드 되어, 상기 컴퓨터, 기타 프로그램가능 장치 또는 다른 디바이스에서 일련의 동작 단계들이 수행되게 하여 컴퓨터 구현 프로세스를 생성하며, 그렇게 하여 상기 컴퓨터, 기타 프로그램가능 장치, 또는 다 른 디바이스 상에서 실행되는 명령들이 플로 차트 및/또는 블록도의 블록 또는 블록들에 명시된 기능들/동작들 을 구현할 수 있다. 도면들 내 플로 차트 및 블록도들은 본 발명의 여러 실시 예들에 따른 시스템들, 방법들 및 컴퓨터 프로 그램 제품들의 가능한 구현들의 아키텍처, 기능(functionality), 및 연산(operation)을 예시한다. 이와 관련하 여, 상기 플로 차트 또는 블록도들 내 각 블록은 상기 명시된 로직 기능(들)을 구현하기 위한 하나 또는 그 이 상의 실행 가능한 명령들을 포함한 모듈, 세그먼트 또는 명령들의 일부분을 나타낼 수 있다. 일부 다른 실시 예 들에서, 상기 블록에 언급되는 기능들은 도면들에 언급된 순서와 다르게 일어날 수도 있다. 예를 들면, 연속으 로 도시된 두 개의 블록들은 실제로는 사실상 동시에 실행될 수도 있고, 또는 이 두 블록들은 때때로 관련된 기 능에 따라서는 역순으로 실행될 수도 있다. 블록도들 및/또는 플로 차트 예시도의 각 블록, 및 블록도들 및/또 는 플로 차트 예시도 내 블록들의 조합들은 특수목적용 하드웨어 및 컴퓨터 명령들의 명시된 기능들 또는 동작 들, 또는 이들의 조합들을 수행하는 특수목적용 하드웨어-기반 시스템들에 의해 구현될 수 있다는 것에 또한 주 목해야 한다. 이제 도면들을 참조하고, 특히, 도 1 내지 도 5를 참조하면, 예시적인 실시예들이 구현될 수 있는 데이 터 처리 환경들의 도면들이 제공된다. 도 1 내지 도 5는 단지 예를 의미하며 다양한 실시예들이 구현될 수 있는 환경들과 관련하여 어떠한 제한을 주장하거나 암시하도록 의도된 것이 아님을 이해해야 한다. 도시된 환경들에 대한 많은 수정들이 이루어질 수 있다. 도 1은 예시적인 실시예들이 구현될 수 있는 데이터 처리 시스템의 네트워크를 도시한다. 네트워크 데이 터 처리 시스템은 예시적인 실시예들이 구현될 수 있는, 예를 들어, 시스템 인터넷(an Internet of Systems)과 같은, 컴퓨터들, 데이터 처리 시스템들, 및 다른 디바이스들의 네트워크이다. 네트워크 데이터 처리 시스템은 컴퓨터들, 데이터 처리 시스템들 및 네트워크 데이터 처리 시스템 내에서 함께 연결된 다른 디바이스들 간의 통신 링크들을 제공하는 데 사용되는 매체인, 네트워크를 포함한다. 네트워크는, 예 를 들어, 콘텐츠 전달 네트워크(a content delivery network)일 수 있고, 이는 유선 통신 링크들, 무선 통신 링 크들, 광섬유 케이블들, 등과 같은 연결들을 갖는 엣지 서버들을 포함한다. 도시된 예에서, 서버 및 서버는 스토리지와 함께 네트워크에 연결된다. 서버 및 서버는, 예를 들어, 네트워크에 대한 고속 연결들을 갖는 서버 컴퓨터들일 수 있다. 또한, 서버 및 서버는, 예를 들어, 인공 지능 데이터 서비스들, 등과 같은, 하나 또는 그 이상의 서비스들을 클 라이언트 디바이스들에 제공할 수 있다. 또한, 서버 및 서버는, 예를 들어, 클라우드 컴퓨팅 패러다 임 또는 환경에서 중앙 집중식 클래식 및 양자 컴퓨터와 같은 다수의 서버 컴퓨터들을, 각각, 나타낼 수 있다는 점에 유의해야 한다. 클라이언트, 클라이언트 및 클라이언트는 또한 네트워크에 연결된다. 클라이언트들 (110, 112, 114)은 서버 및 서버의 클라이언트들이다. 클라이언트들(110, 112, 114)은 클라이언트 네트워크 컴퓨팅 패러다임 또는 환경 내의 복수의 클라이언트-측 컴퓨팅 노드들 또는 디바이스들을 나타낸다. 이 예에서 클라이언트들(110, 112, 114)은 네트워크에 대한 유선 통신 링크들을 갖는 데스크톱 또는 개인 용 컴퓨터들로 도시된다. 그러나, 클라이언트들(110, 112 및 114)은 예시일 뿐이고, 다른 유형의 데이터 시스템 들을 나타낼 수 있으며, 이들은 네트워크에 대한 유선 또는 무선 통신 링크들을 갖는 네트워크 컴퓨터들, 랩톱 컴퓨터들, 핸드헬드 컴퓨터들, 스마트 폰들, 스마트 시계들, 스마트 텔레비전들, 스마트 가전 제품들, 스 마트 홈들, 스마트 차량들, 게임 디바이스들, 키오스크들, 등을 포함할 수 있다. 클라이언트들(110, 112, 114) 의 사용자들은 클라이언트들(110, 112, 114)을 이용하여 서버 및 서버에 의해 제공되는 서비스들을 요청할 수 있다. 스토리지는 구조화된 형식 또는 비구조화된 형식으로 모든 유형의 데이터를 저장할 수 있는 네트워 크 스토리지 디바이스이다. 또한, 스토리지는 복수의 네트워크 스토리지 디바이스들을 나타낼 수 있다. 또 한, 스토리지는 복수의 컴포넌트들을 갖는 인공 지능 애플리케이션들 또는 컴퓨터 알고리즘들, 각각의 인 공 지능 애플리케이션 또는 컴퓨터 알고리즘의 복수의 컴포넌트들의 식별자들 및 네트워크 주소들, 각각의 인공 지능 애플리케이션 또는 컴퓨터 알고리즘의 각 개별 컴포넌트의 계산 복잡성 및 컴퓨팅 요건들, 등을 저장할 수 있다. 또한, 스토리지는, 예를 들어, 클라이언트 디바이스 사용자들과 연관된 사용자 이름들, 암호들, 및 생체 인식 데이터를 포함할 수 있는 인증 또는 자격 증명 데이터(authentication or credential data)와 같은, 다른 유형의 데이터를 저장할 수 있다. 또한, 네트워크 데이터 처리 시스템은 임의의 수의 추가 서버들, 클라이언트들, 스토리지 디바이스 들, 및 도시되지 않은 기타 디바이스들을 포함할 수 있다는 점에 유의해야 한다. 네트워크 데이터 처리 시스템 에 위치한 프로그램 코드는 컴퓨터 판독 가능 스토리지 매체에 저장되고 사용을 위해 컴퓨터 또는 다른 데 이터 처리 장치에 다운로드될 수 있다. 예를 들어, 프로그램 코드는 서버 상의 컴퓨터 판독가능 스토리지 매체에 저장될 수 있고 클라이언트에서 사용하기 위해 네트워크를 통해 클라이언트에 다운로드 될 수 있다. 도시된 예에서, 네트워크 데이터 처리 시스템은, 예를 들어, 인터넷, 인트라넷, 근거리 통신망 (LAN), 광역 통신망(WAN)과 같은 다수의 다양한 유형의 통신 네트워크들, 텔리커뮤니케이션 네트워크, 또는 이 들의 모든 조합로서 구현될 수 있다. 도 1은 단지 예로서 의도된 것이며, 다양한 예시적인 실시예들에 대한 아 키텍처 제한은 아니다. 이제 도 2를 참조하면, 예시적인 실시예에 따른 데이터 처리 시스템의 도면이 도시된다. 데이터 처리 시 스템은 도 1의 서버 또는 클라이언트와 같은 컴퓨터의 예이며, 여기에는 예시적인 실시예의 프 로세스를 구현하는 컴퓨터 판독 가능 프로그램 코드 또는 명령들이 위치할 수 있다. 이 예에서, 데이터 처리 시 스템은 프로세서 유닛, 메모리, 영구 스토리지, 통신 유닛, 입/출력(I/O) 유닛, 및 디스플레이 사이의 통신을 제공하는 통신 패브릭을 포함한다. 프로세서 유닛은 메모리에 로드될 수 있는 소프트웨어 애플리케이션 및 프로그램에 대한 명령 을 실행하는 역할을 한다. 프로세서 유닛은, 특정 구현에 따라, 하나 또는 그 이상의 하드웨어 프로세서 디바이스들의 세트일 수 있거나 멀티 코어 프로세서일 수 있다. 메모리 및 영구 스토리지는 스토리지 디바이스들의 예이다. 컴퓨터 판독 가능 스토리지 디바이스는, 예를 들어, 제한없이, 데이터, 기능적 형태의 컴퓨터 판독 가능 프로그램 코드, 및 /또는 일시적 또는 지속적 기반의 기타 적절한 정보와 같은, 정보를 저장할 수 있는 모든 유형의 하드웨어이다. 그러나, 컴퓨 터 판독 가능한 스토리지 디바이스는 전파 매체(a propagation medium)는 제외한다. 이들 예들에서, 메모리 는, 예를 들어, 랜덤 액세스 메모리(RAM), 또는 플래시 메모리와 같은 모든 다른 적절한 휘발성 또는 비휘 발성 스토리지 디바이스일 수 있다. 영구 스토리지는 특정 구현에 따라 다양한 형태를 취할 수 있다. 예를 들어, 영구 스토리지는 하나 또는 그 이상의 디바이스들을 포함할 수 있다. 예를 들어, 영구 스토리지 는 디스크 드라이브, 솔리드 스테이트 드라이브, 다시쓰기 가능한 광 디스크, 다시쓰기 가능한 자기 테이 프, 또는 이들의 일부 조합일 수 있다. 영구 스토리지에 의해 사용되는 미디어는 제거될 수 있다. 예를 들 어, 착탈식 하드 드라이브가 영구 스토리지에 사용될 수 있다. 이 예에서, 통신 유닛은 도 1의 네트워크와 같은 네트워크를 통해 다른 컴퓨터들, 데이터 처 리 시스템들 및 디바이스들과의 통신을 제공한다. 통신 유닛은 물리적 및 무선 통신 링크들 둘 모두를 사 용하여 통신을 제공할 수 있다. 물리적 통신 링크는 데이터 처리 시스템을 위한 물리적 통신 링크를 설정 하기 위해, 예를 들어, 유선, 케이블, 범용 직렬 버스, 또는 모든 다른 물리적 기술을 이용할 수 있다. 무선 통 신 링크는, 예를 들어 단파, 고주파 , 초고주파, 마이크로파, 무선 충실도(Wi-Fi), Bluetooth® 기술, 글로벌 이동 통신 시스템(GSM), 코드 분할 다중 액세스(CDMA), 2세대(2G), 3세대(3G), 4세대(4G), 4G LTE(Long Term Evolution), LTE 고급(Advanced), 5세대(5G), 또는 데이터 처리 시스템을 위한 무선 통신 링크를 설정하 기 위한 기타 무선 통신 기술 또는 표준을 이용할 수 있다. 입력/출력 유닛은 데이터 처리 시스템에 연결될 수 있는 다른 디바이스들과의 데이터 입력 및 출력을 허용한다. 예를 들어, 입력/출력 유닛은 키패드, 키보드, 마우스, 마이크로폰, 및/또는 기타 적절 한 입력 디바이스를 통해 사용자 입력을 위한 연결을 제공할 수 있다. 디스플레이는 사용자에게 정보를 표 시하기 위한 메커니즘을 제공하고 사용자가, 예를 들어, 사용자 인터페이스 또는 입력 데이터를 통해 화면 상의 선택을 할 수 있도록 하는 터치 스크린 기능들을 포함할 수 있다. 운영 체제, 애플리케이션들 및/또는 프로그램들에 대한 명령들은, 통신 패브릭을 통해 프로세서 유 닛과 통신하는, 스토리지 디바이스에 위치할 수 있다. 이 예시적인 예에서, 상기 명령들은 영구 스토 리지 상에서 기능적 형태이다. 이들 명령들은 프로세서 유닛에 의해 실행하기 위해 메모리에 로 드될 수 있다. 다양한 실시예들의 프로세스들은 메모리와 같은, 메모리에 위치할 수 있는 컴퓨터 구현 명 령들을 사용하여 프로세서 유닛에 의해 수행될 수 있다. 이들 프로그램 명령들은 프로세서 유닛의 프 로세서에 의해 판독 및 실행될 수 있는 프로그램 코드, 컴퓨터 사용가능 프로그램 코드, 또는 컴퓨터 판독가능 프로그램 코드로 지칭된다. 다양한 실시예들에서, 프로그램 명령들은, 예를 들어 메모리 또는 영구 스토리 지와 같은, 다양한 물리적 컴퓨터 판독가능 스토리지 디바이스들 상에 구현될 수 있다. 프로그램 코드는 선택적으로 착탈 가능한 컴퓨터 판독 가능 매체 상의 기능적 형태로 위치하 고, 프로세서 유닛에 의해 실행되도록 데이터 처리 시스템에 로드되거나 전송될 수 있다. 프로그램 코드 및 컴퓨터 판독 가능 매체는 컴퓨터 프로그램 제품을 형성한다. 일례로, 컴퓨터 판독 가능 매체는 컴퓨터 판독 가능 스토리지 매체 또는 컴퓨터 판독 가능 신호 매체일 수 있다. 컴퓨터 판독 가능 스토리지 매체는, 예를 들어, 영구 스토리지의 일부인 하드 드라이브와 같은, 스토리지 디 바이스로 전송하기 위해 영구 스토리지의 일부인 드라이브 또는 다른 디바이스로 삽입 또는 배치되는 광 또는 자기 디스크를 포함할 수 있다. 컴퓨터 판독 가능 스토리지 매체는 또한 하드 드라이브, 썸 드라이브, 또는 데이터 처리 시스템에 연결된 플래시 메모리와 같은, 영구 스토리지의 형태를 취할 수 있 다. 일부 예들에서, 컴퓨터 판독 가능 스토리지 매체는 데이터 처리 시스템에서 제거 가능하지 않을 수 있다. 대안적으로, 프로그램 코드는 컴퓨터 판독가능 신호 매체를 사용하여 데이터 처리 시스템 으로 전송될 수 있다. 컴퓨터 판독가능 신호 매체는, 예를 들어, 프로그램 코드를 포함하는 전 파된 데이터 신호일 수 있다. 예를 들어, 컴퓨터 판독가능 신호 매체는 전자기 신호, 광 신호, 및/또는 모든 다른 적절한 유형의 신호일 수 있다. 이들 신호들은 무선 통신 링크들, 광섬유 케이블, 동축 케이블, 유선 및/또는 기타 적절한 유형의 통신 링크와 같은 통신 링크들을 통해 전송될 수 있다. 다시 말해서, 통신 링크 및 /또는 연결은 예시적인 예들에서 물리적 또는 무선일 수 있다. 컴퓨터 판독 가능 매체는 또한 프로그램 코드를 포함하는 통신 링크들 또는 무선 전송들과 같은, 비-유형의 매체의 형태를 취할 수 있다. 일부 예시적인 실시예들에서, 프로그램 코드는 데이터 처리 시스템 내에서 사용하기 위해 컴 퓨터 판독 가능한 신호 매체를 통해 다른 디바이스 또는 데이터 처리 시스템으로부터 영구 스토리지 로 네트워크를 통해 다운로드 될 수 있다. 예를 들어, 데이터 처리 시스템의 컴퓨터 판독 가능한 스토리지에 저 장된 프로그램 코드는 네트워크를 통해 상기 데이터 처리 시스템에서 데이터 처리 시스템으로 다운로드 될 수 있다. 프로그램 코드를 제공하는 상기 데이터 처리 시스템은 서버 컴퓨터, 클라이언트 컴퓨터, 또는 프 로그램 코드를 저장 및 전송할 수 있는 일부 다른 디바이스일 수 있다. 데이터 처리 시스템에 대해 예시된 다양한 컴포넌트들은 다양한 실시예들이 구현될 수 있는 방식에 대한 아키텍처적 제한을 제공하도록 의도되지 않는다. 다양한 예시적인 실시예들은 데이터 처리 시스템에 대해 예시된 컴포넌트들에 추가되는 또는 대신하는 컴포넌트들을 포함하는 데이터 처리 시스템에서 구현될 수 있다. 도 2에 도시된 다른 컴포넌트들은 도시된 예시적인 예들로부터 달라질 수 있다. 다양한 실시예들은 프로 그램 코드를 실행할 수 있는 모든 하드웨어 디바이스 또는 시스템을 사용하여 구현될 수 있다. 일 예로서, 데이 터 처리 시스템은 무기 컴포넌트들과 통합된 유기 컴포넌트들을 포함할 수 있고 및/또는 인간을 제외한 유 기 컴포넌트들로 전체적으로 구성될 수 있다. 예를 들어, 스토리지 디바이스는 유기 반도체로 구성될 수 있다. 다른 예로서, 데이터 처리 시스템의 컴퓨터 판독 가능 스토리지 디바이스는 데이터를 저장할 수 있 는 모든 하드웨어 장치이다. 메모리, 영구 스토리지, 및 컴퓨터 판독 가능 스토리지 매체는 유 형 형태의 물리적 스토리지 디바이스들의 예들이다. 다른 예에서, 버스 시스템은 통신 패브릭을 구현하는데 사용될 수 있고 시스템 버스 또는 입력/출 력 버스와 같은 하나 또는 그 이상의 버스들로 구성될 수 있다. 물론, 상기 버스 시스템은 상기 버스 시스템에 부착된 다른 컴포넌트들 또는 디바이스들 사이에 데이터 전송을 제공하는 모든 적합한 유형의 아키텍처를 사용 하여 구현될 수 있다. 추가로, 통신 유닛은 모뎀 또는 네트워크 어댑터와 같이 데이터를 송수신하는 데 사용되 는 하나 또는 그 이상의 디바이스들을 포함할 수 있다. 또한, 메모리는, 예를 들어 통신 패브릭에 존재할 수 있는 인터페이스 및 메모리 컨트롤러 허브에서 발견되는 것과 같은 메모리 또는 캐시일 수 있다. 본 발명은 클라우드 컴퓨팅에 대한 상세한 설명을 포함하지만, 여기에서 설명된 기술적 사상의 구현은 클라우드 컴퓨팅 환경으로 제한되지 않는다는 것이 이해된다. 오히려, 예시적인 실시예들은 현재 알려져 있거나 나중에 개발될 모든 다른 유형의 컴퓨팅 환경과 함께 구현될 수 있다. 클라우드 컴퓨팅은, 최소한의 관리 노력 또는 서비스 제공자와의 상호작용으로 빠르게 제공되고 해제될 수 있는, 구성 가능한(configurable) 컴퓨팅 자 원들, 예를 들어, 네트워크들, 네트워크 대역폭, 서버들, 처리, 메모리, 스토리지, 애플리케이션들, 가상 머신 들, 및 서비스들의 공유 풀에 대한 편리한 주문형(on-demand) 네트워크 액세스를 가능하게 하는 서비스 전달 모 델이다. 이 클라우드 모델은 적어도 5가지의 특성(characteristics), 적어도 3가지 서비스 모델(service models), 및 적어도 4가지 배치 모델(deployment models)을 포함할 수 있다. 상기 특성들은, 예를 들어, 주문형 셀프-서비스(On-demand self-service), 광역 네트워크 액세스(Broad network access), 자원 풀링(Resource pooling), 기민한 탄력성(Rapid elasticity), 및 측정 가능한 서비스 (Measured service)를 포함할 수 있다. 주문형 셀프-서비스를 사용하면 클라우드 소비자는, 서비스 제공자와의 인적 상호작용을 필요로 하지 않고, 필요한 만큼 자동적으로, 서버 시간(server time) 및 네트워크 스토리지 같 은 컴퓨팅 용량들을 일방적으로 제공(provision)할 수 있다. 광역 네트워크 액세스는 네트워크를 통해서 이용 가능하고 이기종의 씬 또는 씩 클라이언트 플랫폼들(heterogeneous thin or thick client platforms)(예를 들 어, 모바일폰들, 랩탑들, 및 PDA들)에 의한 사용을 장려하는 표준 메커니즘들을 통해 액세스되는 기능들을 제공 한다. 자원 풀링(Resource pooling)은 제공자의 컴퓨팅 자원들이, 각기 다른 물리적 및 가상 자원들을 요구 (demand)에 따라 동적으로 할당 및 재할당하는, 멀티-테넌트 모델(a multi-tenant model)을 사용하는 다수의 소 비자들에게 서비스할 수 있도록 풀에 넣어질 수 있게(pooled) 해준다. 소비자는 일반적으로 제공된 자원들의 정 확한 위치를 제어할 수 없거나 그에 대한 지식이 없지만 더 높은 추상 수준에서(예를 들어, 국가, 주, 또는 데 이터센터) 위치를 명시할 수 있다는 점에서 위치 독립성이 있다. 기민한 탄력성(Rapid elasticity) 기민하게 탄 력적으로 제공될 수 있는(어떤 경우엔 자동으로 제공될 수 있는) 용량들(capabilities)을 제공하여 신속히 규모 를 확장할 수도 있고(scale out) 그리고 탄력적으로 해제되어 신속히 규모를 축소할 수도 있다(scale in). 소비자에게 제공할 수 있는 용량들은 종종 무제한이고 언제든지 원하는 수량으로 구매할 수 있는 것처럼 보인다. 측 정 가능한 서비스(Measured service)는 클라우드 시스템들이 자원 사용을 자동으로 제어하고 최적화할 수 있게 하는데, 서비스의 유형(예를 들어, 스토리지, 처리, 대역폭, 및 활성 사용자 계정)에 적절한 추상화 수준에서 (at some level of abstraction) 계측 기능을 이용하여서 그렇게 한다. 자원 사용량은 모니터 되고, 제어되고, 그리고 보고될 수 있으며 이로써 이용하는 서비스의 제공자와 사용자 모두에게 투명성을 제공한다. 서비스 모델들(Service Models)은, 예를 들어 소프트웨어 서비스(Software as a Service)(SaaS), 플랫 폼 서비스(Platform as a Service)(PaaS) 및 하부구조 서비스(Infrastructure as a Service)(IaaS)를 포함할 수 있다. SaaS(Software as a Service)는 클라우드 하부구조 상에서 실행되는 공급자의 애플리케이션들을 사용 하게 해주기 위해 소비자에게 제공되는 기능이다. 애플리케이션들은 웹 브라우저(예를 들어, 웹기반 이메일) 같 은 씬(thin) 클라이언트 인터페이스를 통해 여러 클라이언트 디바이스들에서 액세스 가능하다. 소비자는, 제한 된 사용자-특정 애플리케이션 구성 세팅들을 제외하고, 네트워크, 서버들, 운영 체제들, 스토리지, 또는 개별 애플리케이션 능력들을 포함하는 하부 클라우드 하부구조를 관리하거나 제어하지 않는다. 플랫폼 서비스 (Platform as a Service)는 공급자가 지원하는 프로그래밍 언어들 및 도구들을 사용하여 생성된 소비자 생성 또 는 획득 애플리케이션들을 클라우드 하부구조에 배치하기 위해 소비자에게 제공되는 기능이다. 소비자는 네트워 크들, 서버들, 운영 체제들 또는 스토리지를 포함한 기본 클라우드 하부구조를 관리하거나 컨트롤하지 않지만 배치된 애플리케이션들 및 애플리케이션 호스팅 환경 구성들을 컨트롤할 수 있다. 하부구조 서비스 (Infrastructure as a Service)는, 운영 체제들 및 애플리케이션들을 포함할 수 있는, 임의의 소프트웨어를 소 비자가 배치 및 실행할 수 있는 처리, 스토리지, 네트워크 및 기타 기본 컴퓨팅 자원을 제공하기 위해 소비자에 게 제공되는 기능이다. 소비자는 기본 클라우드 하부구조를 관리하거나 컨트롤하지는 않지만, 운영 체제들, 스 토리지, 배치된 애플리케이션들에 대한 컨트롤 권한을 가지며, 예를 들어, 호스트 방화벽들과 같은, 선택 네트 워킹 컴포넌트들에 관하여 제한된 컨트롤 권한을 가질 수 있다. 배치 모델들(Deployment Models)은, 예를 들어, 사설 클라우드(Private cloud), 커뮤니티 클라우드 (Community cloud), 공공 클라우드(Public cloud), 및 하이브리드 클라우드(Hybrid cloud)를 포함할 수 있다. 사설 클라우드는 오직 한 조직(an organization)을 위해서 운영되는 클라우드 하부구조이다. 사설 클라우드는 그 조직 또는 제3자에 의해 관리될 수 있으며 옥내(on-premises) 또는 옥외(off-premises)에 위치할 수 있다. 커뮤니티 클라우드는 여러 조직들에서 공유하는 클라우드 하부구조이며 미션, 보안 요구 요건, 정책 및 규정 준 수 고려 사항과 같은 관심사을 공유하는 특정 커뮤니티를 지원한다. 커뮤니티 클라우드는 그러한 조직들 또는 제3자에 의해서 관리될 수 있으며 옥내(on-premises) 또는 옥외(off-premises)에 위치할 수 있다. 공공 클라우 드는 일반 대중 또는 대규모 산업 그룹이 사용할 수 있는 클라우드 하부구조이며 클라우드 서비스를 판매하는 조직이 소유한다. 하이브리드 클라우드는 사설, 커뮤니티 및 공공 클라우드와 같이 둘 또는 그 이상의 클라우드 들로 구성된 클라우드 하부구조이고, 이들은 고유한 주체들로 있지만, 데이터 및 애플리케이션 이식가능성 (portability)을 가능하게 해주는 표준화된 또는 소유권 있는 기술(예를 들어, 클라우드들 사이의 부하 균형을 위한 클라우드 버스팅(cloud bursting))에 의해 서로 결합되어 있다. 클라우드 컴퓨팅 환경은 무국적(statelessness), 낮은 결합(low coupling), 모듈 방식(modularity), 및 의미적 상호운용성(semantic interoperability)에 집중하는 서비스를 지향한다. 클라우드 컴퓨팅의 중심에는 상 호 연결된 노드들의 네트워크를 포함하는 하부구조가 있다. 이제 도 3을 참조하면, 예시적인 실시예들이 구현될 수 있는 클라우드 컴퓨팅 환경을 예시하는 도면이 도시된다. 이 예시적인 예에서, 클라우드 컴퓨팅 환경은, 예를 들어, 개인 휴대 정보 단말기(PDA) 또는 스 마트폰(320A), 데스크탑 컴퓨터(320B), 랩탑 컴퓨터(320C), 및/또는 자동차용 컴퓨터 시스템(320N)과 같은, 클 라우드 소비자들에 의해 사용되는 로컬 컴퓨팅 디바이스들이 통신할 수 있는 하나 또는 그 이상의 클라우드 컴 퓨팅 노드들의 세트를 포함한다. 클라우드 컴퓨팅 노드들은, 예를 들어 도 1의 서버 및 서버 일 수 있고 고전 및 양자 컴퓨터들을 포함할 수 있다. 로컬 컴퓨팅 디바이스들(320A-320N)는, 예를 들어 도 1의 클라이언트들(110-114)일 수 있다. 클라우드 컴퓨팅 노드들은 서로 통신할 수 있고, 물리적으로 또는 가상으로 하나 또는 그 이상의 네트워크들, 예를 들어, 상술한 바와 같은 사설, 커뮤니티, 공공 또는 하이브리드 클라우드, 또는 이들의 조합 으로 그룹화될 수 있다. 이것은 클라우드 컴퓨팅 환경이 하부구조, 플랫폼 및/또는 소프트웨어를, 클라우 드 소비자가 로컬 컴퓨팅 디바이스들(320A-320N)과 같은 로컬 컴퓨팅 디바이스들에서 자원을 유지할 필요가 없 는 서비스로서, 제공할 수 있게 해준다. 로컬 컴퓨팅 디바이스들(320A-320N)의 유형은 단지 예시를 위한 것이며 클라우드 컴퓨팅 노드들 및 클라우드 컴퓨팅 환경은, 예를 들어 웹 브라우저를 사용하는 모든 유형의네트워크 및/또는 네트워크 주소 지정 가능 연결을 통해 모든 유형의 컴퓨터화 된 디바이스와 통신할 수 있음이 이해된다. 이제 도 4를 참조하면, 예시적인 실시예에 따라 추상화 모델 계층들을 예시하는 도면이 도시된다. 이 예 시적인 예에 도시된 기능적 추상화 계층들의 세트는, 도 3의 클라우드 컴퓨팅 환경과 같은, 클라우드 컴퓨 팅 환경에 의해 제공될 수 있다. 도 4에 도시된 컴포넌트들, 계층들 및 기능들은 단지 예시를 위한 것으로 의도 된 것 본 발명의 실시예는 이에 제한되지 않는다것을 미리 이해해야 한다. 도시된 바와 같이, 다음과 같은 계층 들과 대응하는 기능들이 제공된다. 클라우드 컴퓨팅 환경의 추상화 계층들은 하드웨어 및 소프트웨어 계층, 가상화 계층, 관리 계층, 워크로드 계층을 포함한다. 하드웨어 및 소프트웨어 계층은 클라우드 컴퓨팅 환경의 하드웨어 및 소프트웨어 컴포넌트들을 포함한다. 하드웨어 컴포넌트들은, 예를 들어, 메인프레임들, RISC(Reduced Instruction Set Computer) 아키텍처 기반 서버들, 서버들, 블레이드 서버들, 스 토리지 디바이스들, 및 네트워크 및 네트워킹 컴포넌트들을 포함할 수 있다. 일부 예시적인 실시예들 에서, 소프트웨어 컴포넌트들은, 예를 들어, 네트워크 애플리케이션 서버 소프트웨어 및 데이터베이스 소 프트웨어를 포함할 수 있다. 가상화 계층은 가상 주체들의 다음 예들이 제공될 수 있는 추상화 계층을 제공한다: 가상 서버들 ; 가상 스토리지; 가상 사설 네트워크들을 포함하는, 가상 네트워크들; 가상 애플리케이션들 및 운영 체제들; 및 가상 클라이언트들. 일 예에서, 관리 계층은 아래에서 설명되는 기능들을 제공할 수 있다. 자원 제공(Resource provisioning)은 클라우드 컴퓨팅 환경 내에서 작업들을 수행하는 데 사용되는, 컴퓨팅 자원들 및 기타 자 원들의 동적 조달을 제공한다. 계측 및 가격 책정(Metering and Pricing)은 자원들이 클라우드 컴퓨팅 환경 내 에서 이용될 때 비용 추적, 및 이 자원들의 소비에 대한 요금 청구 또는 송장을 제공한다. 한 예에서, 이 자원 들은 애플리케이션 소프트웨어 라이센스를 포함할 수 있다. 보안(Security)은 데이터 및 기타 자원들에 대한 보 호뿐 아니라 클라우드 소비자들과 작업들에 대한 신원 확인을 제공한다. 사용자 포털(User portal)은 소비 자 및 시스템 관리자를 위한 클라우드 컴퓨팅 환경에 대한 액세스를 제공한다. 서비스 수준 관리(Service level management)는 요구되는 서비스 수준이 충족되도록 클라우드 컴퓨팅 자원 할당 및 관리를 제공한다. 서비 스 수준 협약서(SLA) 기획 및 충족(planning and fulfillment)은 SLA에 부합하는 예상되는 미래 요건에 맞는 클라우드 컴퓨팅 자원들의 사전-배치(pre-arrangement) 및 조달(procurement)을 제공한다. 워크로드 계층은 클라우드 컴퓨팅 환경이 이용될 수 있는 기능의 예들을 제공한다. 워크로드 계층 에 의해 제공될 수 있는, 예시적인 워크로드들 및 기능들은: 맵핑 및 네비게이션; 소프트웨어 개발 및 라이프사이클 관리; 가상 교실 교육 전달; 데이터 분석 처리; 트랜잭션 처리, 및 계산 워크로드 분산 관리를 포함할 수 있다. 예를 들어, 사물 인터넷(Internet of Things)과 같은, 포그 계산 중력 컴포넌트들(Fog computing gravity components)은 컴퓨터 알고리즘의 어느 부분들이 다양한 컴퓨팅 패러다임들(differing computing paradigms)로 분할(split)될 수 있는지를 제안할 수 있다. 컴퓨터 알고리즘의 단계들은 특수 하드웨어 등에서 병렬로 실행될 수 있다는 점에 유의해야 한다. 예시적인 실시예들은 포그 계산 중력을 계산하여 예시적인 실시 예들이 컴퓨터 알고리즘들 및 대응하는 정적 데이터를 클라이언트 디바이스 엣지로 컴퓨팅을 위해 푸시할 수 있 다. 예를 들어, Swift, C# 또는 JavaScript와 같은, 다양한 프로그래밍 언어를 사용하여 클라이언트 디바이스 엣지로 알고리즘을 동원하면 포그 컴퓨팅 파이프라인이 생성된다. 예시적인 실시 예들은 클라이언트 디바이스 엣지들로 컴퓨터 알고리즘 또는 알고리즘의 컴포넌트 부분들 을 분산하는데, 이는 각각의 클라이언트-측 엣지 컴퓨터가 알고리즘의 계산 워크로드의 일부분을 실행한 다음 상기 계산 워크로드의 일부분의 결과를 콘텐츠 전달 네트워크 엣지 서버 상에 캐시 하여 다른 클라이언트 컴퓨 터들이 계산들을 반복함이 없이 이용할 수 있도록 하기 위함이다. 예시적인 실시 예들은 포그 계산 중력에 기초 하여 알고리즘을 분할하고 전송한다. 포그 계산 중력은 해당 특정 엣지 컴퓨팅 노드에 대한 특정 계산 워크로드 의 적합성(fit)에 기초하여 엣지 컴퓨팅 노드 또는 디바이스로 계산 워크로드를 끌어오는 힘(pull)이다. 예시적인 실시 예들은 고도로 복잡한 인공 지능 컴포넌트들로(with highly complex artificial intelligence components) 대규모 인공 지능 애플리케이션들 내에서 콘텐츠 전달 네트워크 엣지 컴퓨팅과 하이 브리드 클라우드 컴퓨팅을 연결한다(bridge). 예를 들어, 가상 프로 스포츠 애플리케이션은 14개 이상의 인공지능 데이터 통찰력 서비스들과 맞춤형 수학적 및 머신 러닝 접근 방식을 이용할 수 있다. 매일, 클라이언트 최 종 사용자들로부터 100억 건 이상의 사용자 요청들이 인공 지능 데이터 서비스에 의해서 수신될 수 있다. 현재, 콘텐츠 전달 네트워크 엣지 컴퓨팅 및 하이브리드 클라우드 컴퓨팅은 인공 지능 데이터 통찰력을 미리 계산할 수 없는데, 이는, 예를 들어, 팀 라인업을 최적화하는 것, 선수 트레이드를 제안하는 것 또는 팀의 가치 평가를 평가하는 것의 조합 특징 공간(the combinatorial feature space) 때문이다. 예시적인 실시 예들은 인공 지능 애플리케이션(또는 컴퓨터 알고리즘)의 적절한 컴포넌트 부분들이 포그 계산 중력을 통해 클라이언트 측 엣지 컴퓨터 노드로 끌려올 수 있게(pulled up) 한다. 예시적인 실시 예들은 컴퓨터 알고리즘의 다른 컴포넌트 부분을, 예를 들어 양자 컴퓨팅과 같은, 컴퓨팅 의 다른 패러다임으로 전환할 수 있다(transition). 양자 컴퓨팅은, 이 맥락에서, 특정 문제들에 대한 계산 가 속기(a compute accelerator)이다. 예시적인 실시 예들은 클라우드 컴퓨팅 패러다임에서 양자 컴퓨터를 사용하 여 지원-벡터 머신의 적용 및 훈련을 가속화할 수 있다. 지원-벡터 머신은 분류 및 회귀 분석에 사용되는 데이 터를 분석하는 연관된 학습 알고리즘을 사용하는 지도 학습 모델(a supervised learning model)이다. 예를 들어, True North 칩과 같은 뉴로모픽 컴퓨터 칩(neuromorphic computer chip)은, 인공 지능 애플리케이션들과 같은, 신경망들의 처리를 가속화할 수 있다. 예시적인 실시 예들은 다양한 컴퓨팅 패러다임들로 구성된 시스템 인터넷 내의 중앙 집중식 클라우드-기 반 클래식 컴퓨터들, 중앙 집중식 클라우드-기반 양자 컴퓨터들, 및 클라이언트 네트워크 엣지 컴퓨터들 간에 계산 워크로드들(computation workloads)을 분산한다. 예시적인 실시 예들은 콘텐츠 다양한 컴퓨팅 패러다임들 의 컴퓨터들로부터의 워크로드 계산들의 결과들을 전달 네트워크 엣지 서버들 상에 캐시 하고, 이는 상기 결과 들을 계산들을 반복함이 없이 클라이언트 네트워크 계산 노드에 제공한다. 포그 계산 중력을 계산할 때, 예시적 인 실시 예들은 컴퓨터 알고리즘의 다양한 컴포넌트들과 연관된 계산의 복잡성, 계산 노드 가용성, 및 계산 워 크로드 적합성을 고려하여 주어진 계산 워크로드로 작업해야 하는 계산 노드를 결정한다. 엣지 컴퓨팅은 처리를 데이터 소스에 더 가까이 가져온다. 다시 말하면, 데이터를 처리하기 위해 원격 클라우드 또는 다른 중앙 집중식 시스템으로 데이터를 보낼 필요가 없다. 처리를 위해 데이터를 중앙 집중식 시 스템으로 보내는 데 걸리는 거리와 시간을 제거함으로써, 예시적인 실시 예들은 데이터 전송 속도 및 성능을 증 가시킨다. 데이터 전송은 사용자의 요청들을 포함한다는 점을 주목해야 한다. 포그 컴퓨팅은 엣지 컴퓨팅의 작업 방식을 정의하는 표준이다. 포그 컴퓨팅은 엣지 컴퓨팅 디바이스들과 클라우드 컴퓨팅 디바이스들 간의 계산, 스토리지 및 네트워킹 서비스들의 운영을 용이하게 한다. 클라우드 컴 퓨팅은, 인터넷을 통해, 중앙에서 이용 가능한 유틸리티인, 컴퓨팅 자원들을 서비스로 제공한다. 예시적인 실시 예들은, 계산 엣지 노드를 포함하는, 포그 중력 컴포넌트들을 이용하여, 알고리즘 전송 파이프라인들의 창발적 생성(emergence)을 결정한다. 알고리즘 전송 파이프라인은 데이터를 사전 처리하여 타겟 엣지 컴퓨팅 노드 또는 디바이스에 의한 계산을 위해 데이터를 준비한다. 예시적인 실시 예들은 알고리즘 전송 파이프라인 탄젠트들을 이용하여 특정 오퍼레이터들(예를 들어, 인공 지능 애플리케이션 컴포넌트들)을 엣지 컴 퓨팅 디바이스 상의 다양한 컴퓨팅 패러다임 컴포넌트들로 이동시킨다. 다시 말해, 알고리즘 전송 파이프라인 탄젠트는 계산을 다른 컴퓨팅 패러다임으로 이동시키는데, 이는 근본적으로 다른 데이터 표현(a radically different data representation)을 필요로 한다. 예시적인 실시 예들은 콘텐츠 전달 네트워크 엣지 서버에 적합 한 문제(즉, 계산 워크로드)에 기초하여 알고리즘 전송 파이프라인 친화성(algorithm transport pipeline affinity)을 강화한다. 예시적인 실시 예들은 또한 클라우드 컴퓨팅에 적합한 문제(즉, 계산 워크로드)에 기초 하여 알고리즘 전송 파이프라인 친화성을 강화한다. 예시적인 실시 예들은 전체 컴퓨팅 문제(즉, 다양한 컴퓨팅 패러다임들 및 엣지 디바이스들 사이에 분산된 전체 계산 워크로드의 결과들)를 해결하는 데 사용된 다양한 컴 퓨팅 패러다임들(예: 다양한 네트워크들)과 엣지 컴퓨팅 디바이스들의 조합으로부터 창발적 클라우드(an emergent cloud)를 결정한다. 예시적인 실시 예들은, 메모리, 칩들, 코어들, 디스크 등으로 구성된, 시스템 인터넷의 각 엔드포인트 디바이스(each endpoint device) 상에 중력 계산 방정식을 배치한다. 예시적인 실시 예들은 클라우드에 위치한 알고리즘들 또는 알고리즘들의 일부분들에서 당기는 힘을 각각의 잠재적인 알고리즘 전송 파이프라인에 할당한 다. 또한 상기 클라우드는 엣지 서버들 상에 위치한, 시스템 인터넷에서 실행되는 모든 알고리즘인, 알고리즘의 집합체에서 끌어당기는 중력을 갖는다. 상기 계산 중력 방정식의 예는 다음과 같다:"}
{"patent_id": "10-2022-7019811", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "여기서 \" F \"는 힘이고; \" G \"는 클라이언트 컴퓨팅, 네트워크 대역폭, 요청들의 볼륨, 및 데이터 페이로드 크 기의 서명과 동일한 중력 상수이며; \" m \"은 질량이고; \" r \"은 네트워크들의 반경이며; 그리고"}
{"patent_id": "10-2022-7019811", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": ",이다. 여기서 \" x \"는 계산 문제를 기술하고(예: 얼마나 많은 계산들인지). \" c \"는 컴퓨팅 노드의 하드웨어를 기술 하며; \" Bt \"는 계산 노드에 대한 네트워크의 대역폭이고; \" Vr \"은 요청들의 볼륨이며; \" Ps \"는 데이터 크기이 고; \" S \"는 상기 계산 문제를 해결하는 데 사용되는 모델의 서명을 검색하는 서명 함수이며; 그리고 \" Pi \"는 문제 중요도이며, 일반적으로 9.8 m/s2의 물리적 중력 상수와 유사한 상수이다. 예시적인 실시 예들은 특정 컴 퓨팅 노드에 대한 상대적 중요도 요소(relative importance factor)를 생성하기 위해 문제 중요도 상수를 조정 할 수 있음을 주목해야 한다. 벡터 모델에 대한 입력 데이터 스키마는, 컴퓨터 노드의 용량들과 함께 딥 러닝 알고리즘으로 입력되는 입력(예: 인공 지능 애플리케이션)이며, 컴퓨팅의 굳 모드(good mode)(즉, 양자 컴퓨팅과 같은, 컴퓨팅 패러다 임의 유형)에 대한 소프트맥스 클래스 및 확률(a softmax class and probability)을 제공한다. 소프트맥스는 멀 티-클래스 문제에서 각 클래스에 대해 소수 확률들(decimal probabilities)을 할당한다. 이들 소수 확률들을 더 하면 1.0이 된다. 소프트맥스는 출력 층 바로 앞의 신경망 층을 통해 구현된다. 소프트맥스 층은 출력 층과 동 일한 수의 노드를 가져야 한다. 소프트맥스는 가능한 모든 클래스에 대해 확률을 계산한다. 정답이 하나만 있는 문제에 대한 분류기를 구축할 때, 소프트맥스는 원시 출력들에 적용된다. 소프트맥스를 적용하려면, 분모에서, 원시 출력의 모든 엘리멘트들이 고려되어야 한다. 하이브리드 클라우드 내의 컴퓨팅 노드들 각각은 각 인공 지능 애플리케이션 모델 또는 머신 러닝 파이 프라인의 일부분(예: 인공 지능 애플리케이션 모델들의 앙상블)에 대한 계산 중력 컴포넌트 점수를 계산한다. 우승한 계산 중력 컴포넌트들(즉, 계산 중력 점수가 가장 높은 컴퓨팅 엔드포인트 노드들)은 인공 지능 애플리 케이션 모델을 시스템 인터넷 내의 그들의 위치들로 끌어온다(pull). 따라서, 예시적인 실시예들은 다양한 컴퓨팅 패러다임들 사이에 계산 워크로드를 분산하는 기술적 문제 를 극복하는 하나 또는 그 이상의 기술적 솔루션들을 제공한다. 그 결과, 이들 하나 또는 그 이상의 기술적 솔 루션들은 다양한 컴퓨팅 패러다임들의 컴퓨팅 노드들 사이에 복잡한 인공 지능 컴포넌트들이 있는 대규모 애플 리케이션의 계산 워크로드를 분산시키기 위해 시스템 인터넷의 다양한 컴퓨팅 패러다임들 내에서 각 컴퓨팅 노 드의 계산 중력을 계산함으로써 데이터 처리 분야에서 기술적 효과와 실용적인 애플리케이션을 제공한다. 따라 서, 예시적인 실시예들의 이점들은 다양한 컴퓨팅 패러다임들 내에서 감소된 계산 노드 워크로드, 감소된 네트 워크 대기 시간, 감소된 로드 시간, 증가된 데이터 전송 속도 및 성능, 그리고 사용자 요청들에 대한 감소된 응 답 시간을 포함한다. 이제 도 5를 참조하면, 일 예시적인 실시예에 따라 시스템 인터넷(an Internet of Systems)의 예를 예시 하는 도면이 도시된다. 시스템 인터넷은, 도 1의 네트워크 데이터 처리 시스템과 같은, 데이터 처리 시스템들의 네트워크에서 구현될 수 있다. 시스템 인터넷은 다양한 컴퓨팅 패러다임들 내의 각각의 컴퓨팅 노드에 대응하는 계산된 계산 중력에 기초하여 시스템 인터넷 내의 다양한 컴퓨팅 패러다임들의 컴퓨팅 노 드들 사이에 복잡한 인공 지능 컴포넌트들이 있는 대규모 애플리케이션의 계산 워크로드를 분산하기 위한 네트 워크들, 하드웨어 및 소프트웨어의 조합이다. 이 예에서, 시스템 인터넷은 클라우드 컴퓨팅 패러다임, 클라이언트 네트워크 컴퓨팅 패러다 임, 및 콘텐츠 전달 네트워크를 포함한다. 클라우드 컴퓨팅 패러다임은 인공 지능 애플리케이션 , 중앙 집중식 클래식 컴퓨터 및 중앙 집중식 양자 컴퓨터를 포함한다. 인공 지능 애플리케이션 은 모든 유형의 인공 지능 애플리케이션 또는 컴퓨터 알고리즘을 나타낼 수 있다. 중앙 집중식 고전 컴퓨 터 및 중앙 집중식 양자 컴퓨터는, 예를 들어 도 1의 서버 및 서버일 수 있다. 또한, 중앙 집중식 고전 컴퓨터는 다수의 고전 컴퓨터들을 나타낼 수 있고 중앙 집중식 양자 컴퓨터는 클라우드 컴퓨팅 패러다임 내에서 다수의 양자 컴퓨터들을 나타낼 수 있다는 점에 유의해야 한다. 클라이언트 컴퓨팅 패러다임은 클라이언트-측 엣지 컴퓨터 및 다른 클라이언트 컴퓨터를 포함한다. 클라이언트-측 엣지 컴퓨터 및 다른 클라이언트 컴퓨터는, 예를 들어 도 1의 클라이언트 및 클라이언트일 수 있다. 클라이언트-측 엣지 컴퓨터는 다수의 클라이언트-측 엣지 컴퓨팅 노 드들을 나타낼 수 있고 다른 클라이언트 컴퓨터는 클라이언트 네트워크 컴퓨팅 패러다임 내에서 다수의 다른 클라이언트 컴퓨팅 노드들을 나타낼 수 있다는 점에 유의한다. 콘텐츠 전달 네트워크는 엣지 서버를 포함한다. 엣지 서버는 콘텐츠 전달 네트워크(50 6)의 논리적 엣지에 존재하고 다양한 컴퓨팅 패러다임들, 클라우드 컴퓨팅 패러다임 및 클라이언트 네트워 크 컴퓨팅 패러다임 사이의 연결점(a connection point)으로서 역할을 하는 컴퓨터이다. 인공 지능 애플리케이션은 컴포넌트 부분들을 포함한다. 컴포넌트 부분들은 인공 지능 애플리케이션을 포함하는 복수의 다양한 소프트웨어 컴포넌트들을 나타낸다. 컴포넌트 부분들의 각 컴포넌트 부분은 다양한 계산 자원들을 필요로 하는 다양한 계산 복잡성이 있는 다양한 기능을 갖는다. 예시적인 실시 예들은 다양한 컴퓨팅 패러다임들 내의 각각의 컴퓨팅 노드에 대응하는 계산된 계산 중력 에 기초하여 시스템 인터넷 내의 다양한 컴퓨팅 패러다임들의 컴퓨팅 노드들 사이에 인공 지능 애플리케이 션의 다양한 컴포넌트 부분들을 분산한다. 예를 들어, 예시적인 실시 예들은, 위에 보여준 계산 중력 방정 식과 같은, 계산 중력 방정식을 사용하여, 중앙 집중식 고전 컴퓨터에 대해 계산 중력을 계산하고, 중앙 집중식 양자 컴퓨터에 대해 중력을 계산하며, 클라이언트-측 엣지 컴퓨터에 대해 중력을 계산하는데, 예를 들어 인공 지능 애플리케이션의 컴포넌트 부분들 각각에 대응하는 계산 복잡성, 계 산 노드 가용성, 계산 노드 계산 워크로드 적합성, 등에 기초하여 계산한다. 중앙 집중식 클래식 컴퓨터의 계산된 중력, 중앙 집중식 양자 컴퓨터의 계산된 중력 , 및 클라이언트-측 엣지 컴퓨터의 계산된 중력에 기초하여, 예시적인 실시 예들은, 인공 지능 컴포넌트 부분, 인공 지능 컴포넌트 부분 및 인공 지능 컴포넌트 부분과 같은, 컴포넌트 부분들 중 특정 컴포넌트 부분을, 중앙 집중식 클래식 컴퓨터, 중앙 집중식 양자 컴퓨터 및 클라이언 트-측 엣지 컴퓨터에, 각각, 분산 한다. 또한, 컴포넌트 부분들 중 특정 컴포넌트 부분이, 중앙 집중 식 클래식 컴퓨터에 위치한 인공 지능 컴포넌트 부분, 중앙 집중식 양자 컴퓨터에 위치한 인공 지능 컴포넌트 부분, 및 클라이언트 측 엣지 컴퓨터에 위치한 인공 지능 컴포넌트 부분과 같은, 특정 컴퓨팅 노드에 위치하는 것에 기초하여, 예시적인 실시 예들은, 중앙 집중식 클래식 컴퓨터, 중앙 집 중식 양자 컴퓨터 및 클라이언트-측 엣지 컴퓨터, 각각, 상의 워크로드, 워크로드 및 워크 로드와 같은, 대응하는 계산 워크로드를 해당 특정 컴퓨팅 노드에 분산한다. 중앙 집중식 클래식 컴퓨터, 중앙 집중식 양자 컴퓨터 및 클라이언트-측 엣지 컴퓨터 상 에 분산된 각각의 계산 워크로드는, 결과, 결과, 및 결과와 같은, 계산 결과를, 각각, 생성한다. 예시적인 실시 예들은, 콘텐츠 전달 네트워크 내의, 엣지 서버 상에 캐시 된 계산 결과 와 같이, 엣지 서버들 상에 결과, 결과, 및 결과를 캐시 한다. 캐시된 계산 결과는 콘텐츠 전달 네트워크 내의, 복수의 다양한 엣지 서버들 상에 저장된 복수의 캐시된 계산 결과들을 나타낸 다는 점에 유의해야 한다. 또한, 예시적인 실시 예들은 상기 복수의 다양한 엣지 서버들에 저장된 복수의 캐시 된 계산 결과들을, 다른 클라이언트 컴퓨터와 같은, 다른 클라이언트 컴퓨터들에 제공하여, 다른 클라이언 트 컴퓨터들이 계산들을 반복할 필요가 없게 해 준다. 더욱이, 예시적인 실시 예들은 다양한 컴퓨팅 패러다임들 및 컴퓨팅 노드들 사이에 분산된 전체 계산 워크로드의 결과들을 생성하는 데 기여한 중앙 집중식 클래식 컴퓨 터, 중앙 집중식 양자 컴퓨터, 및 클라이언트-측 엣지 컴퓨터로 구성된 창발적 클라우드(an emergent cloud)를 형성할 수 있다. 이제 도 6을 참조하면, 시스템 인터넷 내에 인공 지능 애플리케이션을 배치하기 위한 프로세스를 예시하 는 플로차트가 예시적인 실시예에 따라 도시된다. 도 6에 도시된 프로세스는, 예를 들어 도 2의 데이터 처리 시 스템과 같은, 컴퓨터에서 구현될 수 있다. 상기 프로세스는 상기 컴퓨터가 복수의 다양한 컴퓨팅 패러다임들에서 복수의 컴퓨팅 노드들의 계산 중 력을 계산하기 위해 입력을 수신할 때 시작된다(단계 602). 상기 컴퓨터는 클라우드 컴퓨팅 패러다임의 각 컴퓨 팅 노드, 클라이언트 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드, 및 콘텐츠 전달 네트워크 컴퓨팅 패러 다임의 각 엣지 컴퓨팅 노드를 식별한다(단계 604). 상기 컴퓨터는 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 클라이언트 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드, 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드의 식별에 기초하여 시스템 인터넷을 형성한다(단계 606). 그 후, 상기 컴퓨터는 시스템 인터넷에서 인공 지능 애플리케이션의 컴포넌트 부분을 배치하기 위해 입 력을 수신한다(단계 608). 상기 컴퓨터는 시스템 인터넷에 배치될 인공 지능 애플리케이션의 컴포넌트 부분과 관련하여 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 클라이언트 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅노드 및 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드의 계산 중력을 계산한다(단계 610). 상 기 컴퓨터는 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 클라이언트 네트워크 컴퓨팅 패러다임의 각 엣지 컴 퓨팅 노드 및 콘텐츠 전달 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드에 대응하는 계산 중력에 기초하여 인공 지능 애플리케이션의 컴포넌트 부분을 배포하기 위해 시스템 인터넷에서 최고 계산 중력 점수를 갖는 컴퓨 팅 노드를 결정한다(단계 612). 상기 컴퓨터는 시스템 인터넷에서 최고 계산 중력 점수를 갖는 컴퓨팅 노드에 인공 지능 애플리케이션의 컴포넌트 부분을 배치한다(단계 614). 또한, 상기 컴퓨터는 클라우드 컴퓨팅 패러다임의 클라우드 컨테이너들을 이동하여 다양한 컴퓨팅 패러다임들 및 컴퓨팅 노드들 사이에 분산된 전체 계산 워크로드의 결과들을 생성하는 데 사용되는 다양한 컴퓨팅 패러다임들 및 컴퓨팅 노드들의 조합인 창발적 클라우드(an emergent cloud)를 형성 한다(단계 616). 상기 창발적 클라우드는 가장 높은 계산 중력 점수를 갖는 컴퓨팅 노드를 포함한다는 점에 유 의해야 한다. 그 후, 상기 컴퓨터는 시스템 인터넷에서 인공 지능 애플리케이션의 다른 컴포넌트를 배치하기 위해 입 력이 수신되었는지를 결정한다(단계 618). 만일 상기 컴퓨터가 시스템 인터넷에 인공 지능 애플리케이션의 다른 컴포넌트를 배치하기 위해 입력이 수신되었다고 결정하면(단계 618의 “예”출력), 상기 프로세스는, 상기 컴퓨 터가 시스템 인터넷에 배포될 인공 지능 애플리케이션의 다른 컴포넌트와 관련하여 클라우드 컴퓨팅 패러다임의 각 컴퓨팅 노드, 클라이언트 네트워크 컴퓨팅 패러다임의 각 엣지 컴퓨팅 노드, 및 콘텐츠 전달 네트워크 컴퓨 팅 패러다임의 각 엣지 컴퓨팅 노드의 계산 중력을 계산하는, 단계으로 되돌아간다(return). 만일 상기 컴 퓨터가 시스템 인터넷에 인공 지능 애플리케이션의 다른 컴포넌트를 배치하기 위해 입력이 수신되지 않았다고 결정하면(단계 618의 “아니오”출력), 상기 프로세스는 종료된다. 이제 도 7을 참조하면, 시스템 인터넷 내의 계산 중력에 기초하여 인공 지능 애플리케이션의 컴포넌트 부분들의 계산 워크로드를 분산하기 위한 프로세스를 예시하는 플로차트가 일 예시적인 실시예에 따라 도시된다. 도 7에 도시된 프로세스는, 예를 들어 도 2의 데이터 처리 시스템과 같은 컴퓨터에서 구현될 수 있다. 상기 프로세스는 상기 컴퓨터가 시스템 인터넷의 클라우드 컴퓨팅 패러다임에 위치한 인공 지능 애플리 케이션(또는 알고리즘)의 컴포넌트 부분들을 식별할 때 시작된다(단계 702). 상기 컴퓨터는 인공 지능 애플리케 이션의 컴포넌트 부분들에 대응하는 계산 복잡성, 컴퓨터 가용성, 및 컴퓨터 계산 워크로드 적합성 을 고려하여 시스템 인터넷 내에서 클라우드 컴퓨팅 패러다임의 각 중앙 집중식 클래식 및 양자 컴퓨터와 클라이언트 네트워 크 컴퓨팅 패러다임의 각 엣지 컴퓨터의 계산 중력을 계산한다(단계 704). 상기 컴퓨터는 인공 지능 애플리케이션의 각 컴포넌트 부분을 각 컴퓨터의 계산된 계산 중력에 기초하여 클라우드 컴퓨팅 패러다임의 적절한 중앙 집중식 클래식 컴퓨터, 클라우드 컴퓨팅 패러다임의 중앙 집중식 양자 컴퓨터 또는 클라이언트 네트워크 컴퓨팅 패러다임의 엣지 컴퓨터에 분산한다(단계 706). 또한, 상기 컴퓨터는 인공 지능 애플리케이션의 각 컴포넌트 부분의 계산 워크로드를 처리를 위한 인공 지능 애플리케이션의 대응하 는 컴포넌트 부분을 갖는 클라우드 컴퓨팅 패러다임의 각 중앙 집중식 클래식 컴퓨터, 클라우드 컴퓨팅 패러다 임의 중앙 집중식 양자 컴퓨터 또는 클라이언트 네트워크 컴퓨팅 패러다임의 엣지 컴퓨터에 분산한다(단계 708). 상기 컴퓨터는 콘텐츠 전달 네트워크 엣지 서버 상에 인공 지능 애플리케이션의 각 컴포넌트 부분에 대 응하는 각각의 계산 워크로드의 결과들을 캐시 하여 상기 결과들을 계산들을 반복함이 없이 다른 클라이언트 컴 퓨터들에 제공한다(단계 710). 그 후, 상기프로세스가 종료된다. 따라서, 본 발명의 예시적인 실시 예들은 다양한 컴퓨팅 패러다임들 내의 각각의 컴퓨팅 노드에 대응하 는 계산된 계산 중력에 기초하여 시스템 인터넷 내의 다양한 컴퓨팅 패러다임들의 컴퓨팅 노드들 사이에서 복잡 한 인공 지능 컴포넌트들이 있는 대규모 애플리케이션의 계산 워크로드를 분산하기 위한 컴퓨터-구현 방법, 컴 퓨터 시스템, 및 컴퓨터 프로그램 제품을 제공한다. 본 발명의 다양한 실시 예들의 설명들은 예시의 목적으로 제공되는 것이며, 개시된 실시 예들이 전부라거나 이들에 한정하려는 의도가 있는 것은 아니다. 많은 수정들 및 변형들이 설명된 실시 예들의 범위와 정신을 벗어남이 없이 이 기술 분야에서 통상의 지식을 가진 자에게는 명 백할 것이다. 여기서 사용된 용어들은 실시 예들의 원리들, 실제 애플리케이션 또는 시장에서 발견된 기술들에 대한 기술적 개선을 가장 잘 설명하기 위해 또는 이 기술 분야에서 통상의 지식을 가진 자들이 여기서 개시된 실시 예들을 이해할 수 있도록 하기 위해 선택되었다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7"}
{"patent_id": "10-2022-7019811", "section": "도면", "subsection": "도면설명", "item": 1, "content": "이제 본 발명의 실시예들이 첨부 도면들을 참조하여 단지 예로서 설명될 것이다: 도 1은 예시적인 실시예가 구현될 수 있는 데이터 처리 시스템의 네트워크를 도시한다. 도 2는 예시적인 실시예가 구현될 수 있는 데이터 처리 시스템을 도시한다. 도 3은 예시적인 실시예가 구현될 수 있는 클라우드 컴퓨팅 환경을 도시한다. 도 4는 예시적인 실시예에 따른 클라우드 컴퓨팅 환경의 추상화 계층의 예를 도시한다. 도 5는 예시적인 실시예에 따른 시스템 인터넷의 예를 도시한다. 도 6은 예시적인 실시예에 따라 시스템 인터넷 내에 인공 지능 애플리케이션을 배치하기 위한 프로세스를 도시 하는 플로차트이다. 그리고 도 7은 예시적인 실시예에 따른 시스템 인터넷 내의 계산 중력에 기초하여 인공 지능 애플리케이션의 컴포넌트 부분의 계산 워크로드를 분산하기 위한 프로세스를 도시하는 플로차트이다."}
