{"patent_id": "10-2021-0000354", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0098539", "출원번호": "10-2021-0000354", "발명의 명칭": "PLC 프로그램 자동 개발 시스템", "출원인": "엘에스일렉트릭", "발명자": "이상혁"}}
{"patent_id": "10-2021-0000354", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "PLC(Programmable Logic Controller) 프로그램 개발 툴을 실행하여 작성된 PLC 프로그램을 PLC에 업로드 하는사용자장치부;상기 사용자장치부와 통신 가능하며 인공지능 클라우드 플랫폼을 포함하여 PLC 프로그램을 생성하고, 오류를 검증하는 PLC 프로그래밍 자동화 서버; 및상기 PLC 프로그램의 생성 전에 연결된 다수의 제어대상 장치들을 스캔하여 상기 PLC 프로그래밍 자동화 서버로제공함과 아울러 상기 사용자장치부로부터 작성된 PLC 프로그램을 다운로드 받아 수행하는 PLC를 포함하는 PLC프로그램 자동 개발 시스템."}
{"patent_id": "10-2021-0000354", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 PLC는, 상기 인공지능 클라우드 플랫폼 또는 상기 프로그램 개발 툴의 명령에 따라 입출력 모듈들에 연결된 제어대상장치들을 스캔하는 셀프 I/O 스캐너를 포함하는 PLC 프로그램 자동 개발 시스템."}
{"patent_id": "10-2021-0000354", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 셀프 I/O 스캐너는,상기 PLC의 운영체제 지원 센싱기능, 백플레인 메모리의 검출, 모듈의 고유 기능을 이용하는 방식 중 적어도 하나를 사용하여 상기 제어대상 장치들을 스캔하는 것을 특징으로 하는 PLC 프로그램 자동 개발 시스템."}
{"patent_id": "10-2021-0000354", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항 또는 제2항에 있어서,상기 인공지능 클라우드 플랫폼은,인공지능 학습모듈을 포함하고,상기 인공지능 학습모듈은,상기 제어대상 장치들의 스캔 결과를 학습하여, 상기 제어대상 장치들의 제어를 포함하는 기초 프로그램을 상기사용자장치부로 제공하는 PLC 프로그램 자동 개발 시스템."}
{"patent_id": "10-2021-0000354", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 상기 인공지능 학습모듈은,상기 제어대상 장치의 목록을 정의함과 아울러 입출력 모듈의 순서와 상기 제어대상 장치를 매칭시켜 학습하여작성할 PLC 시스템의 구성과 종류를 정의하는 것을 특징으로 하는 PLC 프로그램 자동 개발 시스템."}
{"patent_id": "10-2021-0000354", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4항에 있어서,상기 기초 프로그램은,공개특허 10-2022-0098539-3-스캔된 상기 제어대상 장치들에 대한 제어 시나리오를 상기 사용자장치부로부터 입력 받아 작성되거나,프로그램 DB에 분류 및 저장된 과거 프로그램 중 스캔된 상기 제어대상 장치들을 포함하며, 배치가 가장 유사한과거 프로그램인 것을 특징으로 하는 PLC 프로그램 자동 개발 시스템."}
{"patent_id": "10-2021-0000354", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 인공지능 클라우드 플랫폼은,상기 기초 프로그램을 이용하여 상기 사용자장치부에서 작성된 PLC 프로그램을 검증하는 프로그램 검증모듈을더 포함하며,상기 프로그램 검증모듈은,상기 인공지능 학습모듈에서 상기 프로그램 DB에 분류 및 저장된 과거 프로그램의 오류 이력과 확률을 학습한결과를 이용하여, 작성된 PLC 프로그램의 오류 발생 가능 확률이 높은 코드부터 순차적으로 검증될 수 있도록상기 사용자장치부에 표시하는 것을 특징으로 하는 PLC 프로그램 자동 개발 시스템."}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 PLC 프로그램 자동 개발 시스템에 관한 것으로, PLC(Programmable Logic Controller) 프로그램 개발 툴을 실행하여 작성된 PLC 프로그램을 PLC에 업로드 하는 사용자장치부와, 상기 사용자장치부와 통신 가능하며 인공지능 클라우드 플랫폼을 포함하여 PLC 프로그램을 생성하고, 오류를 검증하는 PLC 프로그래밍 자동화 서버와, 상기 PLC 프로그램의 생성 전에 연결된 다수의 제어대상 장치들을 스캔하여 상기 PLC 프로그래밍 자동화 서버로 제공함과 아울러 상기 사용자장치부로부터 작성된 PLC 프로그램을 다운로드 받아 수행하는 PLC를 포함할 수 있다."}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 PLC 프로그램 자동 개발 시스템에 관한 것으로, 더 상세하게는 PLC 프로그램의 오류 발생 여부를 확 인할 수 있는 PLC 프로그램 자동 개발 시스템에 관한 것이다."}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "일반적으로 PLC(Programmable Logic Controller)는 공장 자동화를 위한 무접점 순차 제어 회로 시스템에 주로 사용되며, 계전기, 타이머, 카운터 등의 요소를 하드웨어적으로 연결하여 제어 시스템을 구성하거나, 프로그램 을 변경할 수 있는 무접점 시퀀스의 제어에 사용된다. PLC의 장점은 고속, 내환경성, 취급용이성, 경제성의 장점이 있으며, 단순한 순차 제어기가 아닌 수많은 제어 요소를 갖추고 프로그램이 가능한 실시간 복합 제어가 가능하다는 점에 있다. 통상 PLC는 다수의 센서에 연결되는 입력회로, 모터 등 제어 대상에 연결되는 출력회로, 입력에 따른 처리를 수 행하기 위한 프로그램을 저장하는 내부 및 외부 메모리, 입력회로를 통해 입력된 신호를 프로그램에 따라 처리 하여 출력회로를 통해 출력할 수 있도록 처리하는 중앙처리장치를 포함한다. PLC는 디지털/아날로그 입출력 모듈을 통해 논리 연산, 산술 연산, 타이밍, 카운트, 데이터 처리, 전송, 통신, 자기 진단 등과 같은 기능을 수행하기 위해 프로그램이 가능한 메모리를 사용하고, 필드버스, 이더넷 등의 네트 워크를 이용하여 적어도 하나의 모듈이 연결될 수 있다. PLC는 제어 대상 및 환경에 적합한 제어를 수행할 수 있도록 하기 위하여, 프로그램을 작성 툴을 이용하여 프로 그램을 작성하고, PLC에 업로드하는 과정이 필요하다. 즉, 실제 현장에서 PLC에 의해 제어되는 각종 장비들은 개발자에 의해 구현된 프로그램에 의해 제어된다. 이때, PLC와 연결된 제어 대상 기기들의 약속된 동작들, 외부의 센서로부터 데이터를 받거나 보낼 때의 실시간성 타이 밍, 수신된 데이터의 처리에 필요한 시간 설정 등 세부적이고 정밀한 제어가 요구되며, 조금의 오차 및 오류에 도 전체 시스템에 치명적인 오류를 발생시키고, 커다란 비용 손실을 초래할 수 있다. 따라서, 개발자는 프로그램을 작성하고, 안정화하기 위하여 많은 시간을 투자하고 있다. 또한 안정화된 프로그 램에 대해 개선의 여지가 있음에도 불구하고, 수정시 오류 발생에 대한 리스크를 최소화하기 위하여 개선 보다 는 기존 프로그램을 유지하는 것을 선택하기 때문에 프로그램의 성능 향상을 기대하기 어렵다. 도 1은 종래 PLC 프로그램 개발과정을 설명하기 위한 블록도이다. 도 1을 참조하면 개발자는 PC에 설치된 PLC 프로그램 개발 툴을 이용하여 프로그램을 작성한다(S10). 개발자에 의해 작성되는 프로그램은, PLC에 연결된 모든 제어대상 장치들이 무엇인지 정의되어야 하 며, 이러한 정의는 개발자가 직접 제어대상 장치들에 대한 확인이 필요하다. 또한, PLC 프로그램은 PLC와 제어대상 장치간에 주고받는 데이터의 정의와 데이터를 주고받는 시점에 대한 정의를 해야 한다. 즉, 개발자는 프로그램 작성을 위하여 PLC 프로그램 개발 툴을 사용할 뿐, 실질적으로 제어대상 장치(40 0)를 정의하고, 그 PLC와 제어대상 장치의 동작 관계를 미리 파악하고 있어야 한다. 그 다음, PLC 프로그램 개발 툴을 이용하여 작성된 PLC 프로그램은 PC에 저장된 후, PLC로 업로 드 된다(관점에 따라서는 다운로드로 볼 수 있음, S20). 즉, S20단계와 같이 작성된 프로그램은 PLC의 CPU에서 사용가능하도록 PLC의 메모리(도면 미도 시)에 저장된다. 도면에서는 프로그램의 작성과 관련된 PLC의 구성을 선택적으로 도시하였다. CPU는 프로그램을 수행하면서 정해진 시간에 특정한 입출력(I/0) 모듈을 통해 제어대상 장치의 데이터를 수신하거나, 필요한 데이터를 송신하는 동작을 수행한다(S30). 프로그램이 PLC에 업로드 된 상태에서 CPU는 프로그램을 수행하여 I/O 모듈에 연결된 제어대상 장치들의 데이터를 수신하고, 처리하며, 필요한 데이터를 송신하여 검증한다. 이와 같은 검증 과정은 반복되며, 프로그램의 의도에 따라 PLC가 각 제어대상 장치들을 제어하는지, 즉, 실제 제어대상 장치들이 정상 동작하는지 확인하는 테스트를 수행하게 된다. 이러한 테스트에서 오류가 발생한 경우, 개발자는 다시 S10 내지 S30단계를 반복하면서 모든 제어대상 장치 들이 정상적으로 동작함을 확인한다. 이처럼 종래의 PLC 프로그램을 작성하는 방법은, 기본적으로 개발자의 경험과 역량에 의존하고 있으며, 프로그 램 작성 전에 개발자가 제어대상 장치 각각의 종류와 특징을 파악하고, 제어대상 장치와 PLC 간 의 상호 유기적인 신호처리 관계를 파악하고 있어야 정상적인 PLC 프로그램의 작성이 가능하게 된다. 따라서 PLC 프로그램의 작성에 많은 시간과 노력이 요구되며, 디버깅 작업 또한 실제 제어대상 장치들의 동작을 확인하고, 오류가 발생한 부분과 프로그램의 코드를 비교하여 다시 수정하는 작업이 필요하기 때문에 PLC 프로그램의 안정화에도 많은 시간과 노력이 요구되는 문제점이 있었다."}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "상기와 같은 문제점을 감안한 본 발명이 해결하고자 하는 과제는, 개발자가 PLC에 의해 제어되는 제어대상 장치 를 정의하지 않고도 PLC 프로그램을 작성할 수 있는 PLC 프로그램 자동 개발 시스템을 제공함에 있다. 또한, 본 발명은 PLC에 연결된 제어대상 장치의 제어에 대한 기본적인 프로그램을 제공하고, 개발자의 설정을 입력받아 프로그램을 작성함과 아울러 과거 오류 목록을 이용하여 작성된 프로그램을 검증할 수 있는 PLC 프로 그램 자동 개발 시스템을 제공함에 있다."}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기와 같은 기술적 과제를 해결하기 위한 본 발명 PLC 프로그램 자동 개발 시스템은, PLC(Programmable Logic Controller) 프로그램 개발 툴을 실행하는 사용자장치부와, 상기 사용자장치부와 통신 가능하며 인공지능 클라 우드 플랫폼을 포함하여 PLC 프로그램을 작성하고, 오류를 검증하는 PLC 프로그래밍 자동화 서버와, 프로그램의 작성 전에 연결된 다수의 제어대상 장치들을 스캔하여 상기 PLC 프로그래밍 자동화 서버로 제공함과 아울러 상 기 사용자장치부로부터 작성된 프로그램을 업로드 받아 수행할 수 있다. 본 발명의 실시예에서, 상기 PLC는, 상기 인공지능 클라우드 플랫폼 또는 상기 프로그램 개발 툴의 명령에 따라 입출력 모듈들에 연결된 제어대상 장치들을 스캔하는 셀프 I/O 스캐너를 포함할 수 있다. 본 발명의 실시예에서, 상기 인공지능 클라우드 플랫폼은, 인공지능 학습모듈을 포함하고, 상기 인공지능 학습 모듈은, 상기 제어대상 장치들의 스캔 결과를 학습하여, 상기 제어대상 장치들의 제어하는 기초 프로그램을 상 기 사용자장치부로 제공할 수 있다. 본 발명의 실시예에서, 상기 기초 프로그램은, 스캔된 상기 제어대상 장치들에 대한 제어 시나리오를 상기 사용 자장치부로부터 입력받아 작성되거나, 프로그램 DB에 분류 및 저장된 과거 프로그램 중 스캔된 상기 제어대상 장치들을 포함하며, 배치가 가장 유사한 과거 프로그램일 수 있다. 본 발명의 실시예에서, 상기 인공지능 클라우드 플랫폼은, 상기 기초 프로그램을 이용하여 상기 사용자장치부에 서 작성된 PLC 프로그램을 검증하는 프로그램 검증모듈을 더 포함하며, 상기 프로그램 검증모듈은, 상기 인공지 능 학습모듈에서 상기 프로그램 DB에 분류 및 저장된 과거 프로그램의 오류 이력과 확률을 학습한 결과를 이용 하여, 작성된 PLC 프로그램의 오류 발생 가능 확률이 높은 코드부터 순차적으로 검증될 수 있도록 상기 사용자 장치부에 표시할 수 있다."}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명은, 프로그램 작성 대상인 PLC에 연결된 제어대상 장치들을 자동으로 확인함으로써, 개발자가 제어대상 장치를 직접 정의할 필요가 없도록 하여, 프로그램 작성에 소요되는 시간과 노력을 줄일 수 있는 효과가 있다. 또한, 본 발명은 확인된 제어대상 장치들의 목록과 일치 또는 유사하게 판단되는 데이터인 과거 프로그램을 제 공하거나, 확인된 제어대상 장치들의 제어 관련설정을 개발자가 직접 입력하도록 함으로써, PLC 프로그램 작성 에 소요되는 시간을 줄일 수 있는 효과가 있다. 그리고 본 발명은 확인된 제어대상 장치들의 과거 오류 상태를 학습하여, 작성된 현재 프로그램을 검증함으로써, 심각한 오류의 발생을 사전에 방지함과 아울러 디버깅 작업에 소요되는 시간과 노력을 줄일 수 있는 효과가 있다."}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 구성 및 효과를 충분히 이해하기 위하여, 첨부한 도면을 참조하여 본 발명의 바람직한 실시예들을 설 명한다. 그러나 본 발명은 이하에서 개시되는 실시예에 한정되는 것이 아니라, 여러가지 형태로 구현될 수 있고 다양한 변경을 가할 수 있다. 단지, 본 실시예에 대한 설명은 본 발명의 개시가 완전하도록 하며, 본 발명이 속"}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "하는 기술분야의 통상의 지식을 가진 자에게 발명의 범주를 완전하게 알려주기 위하여 제공되는 것이다. 첨부된 도면에서 구성요소는 설명의 편의를 위하여 그 크기를 실제보다 확대하여 도시한 것이며, 각 구성요소의 비율은 과장되거나 축소될 수 있다. '제1', '제2' 등의 용어는 다양한 구성요소를 설명하는데 사용될 수 있지만, 상기 구성요소는 위 용어에 의해 한정되어서는 안 된다. 위 용어는 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용될 수 있다. 예를 들어, 본 발명의 권리범위를 벗어나지 않으면서 '제1구성요소'는 '제2구성요소'로 명명될 수 있고, 유사하게 '제2구성요소'도 '제1구성요소'로 명명될 수 있다. 또한, 단수의 표현은 문맥상 명백하게 다르게 표현 하지 않는 한, 복수의 표현을 포함한다. 본 발명의 실시예에서 사용되는 용어는 다르게 정의되지 않는 한, 해당"}
{"patent_id": "10-2021-0000354", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "기술분야에서 통상의 지식을 가진 자에게 통상적으로 알려진 의미로 해석될 수 있다. 이하에서는, 도면을 참조하여 본 발명의 일실시예에 따른 PLC 프로그램 자동 개발 시스템에 대하여 상세히 설명 한다. 도 2는 본 발명의 일실시예에 따른 PLC 프로그램 개발과정을 설명하기 위한 블록도이다. 도 2를 참조하면 본 발명 PLC 프로그램 자동 개발 시스템은, PLC 프로그램 개발 툴을 실행할 수 있는 사용 자장치부와, 상기 사용자장치부와 통신 가능하며 인공지능 클라우드 플랫폼을 포함하여 PLC 프로그 램을 자동으로 작성하고, 오류를 검증하는 PLC 프로그래밍 자동화 서버와, 상기 사용자장치부로부터 프 로그램을 업로드 받아 수행함과 아울러 연결된 다수의 제어대상 장치들을 스캔하여 상기 PLC 프로그래밍 자 동화 서버로 제공하는 PLC를 포함하여 구성된다. 이하, 상기와 같이 구성되는 본 발명 PLC 프로그램 자동 개발 시스템의 구성과 작용에 대하여 보다 상세히 설명 한다. 먼저, 사용자장치부는 PLC 프로그램 개발 툴을 저장하는 저장모듈과, PLC 프로그램 개발 툴을 실행 하는 프로세서와, 개발자가 설정을 입력할 수 있는 입력모듈과, 상기 PLC 프로그래밍 자동화 서버 및 PLC와 통신을 위한 통신모듈과, 프로그램을 표시하는 표시모듈 및 데이터를 저장하는 메모리를 포함하는 컴 퓨팅 장치이다. 사용자장치부의 예로는 PC, 노트북, 테블릿, 스마트폰 등일 수 있다. PLC 프로그래밍 자동화 서버는 인공지능 클라우드 플랫폼을 포함하여, 입력된 과거 데이터를 학습하고, 그 학습결과를 반영하여 현재 작성되는 PLC 프로그램의 작성과 검증을 수행하는 것일 수 있다. 상기 PLC 프로그래밍 자동화 서버는 인터넷망, 광역통신망을 통해 접속할 수 있거나, 로컬 통신망을 통해 접속할 수 있는 것으로 한다. 즉, PLC 프로그래밍 자동화 서버는 사용자장치부와 1:1 대응하거나, 다수의 사용자장치부가 동시에 접속하여 PLC 프로그램 작성 서비스를 이용하도록 할 수 있다. 도 3은 PLC 프로그래밍 자동화 서버의 인공지능 클라우드 플랫폼의 블록 구성도이다. 도 3을 참조하면, 인공지능 클라우드 플랫폼은 인공지능 학습모듈, 장치 정의 모듈, 프로그램 제안 모듈, 프로그램 검증모듈, 장치정보 DB(DataBase, 26), 프로그램 DB, 오류목록 및 확률 DB를 포함할 수 있다. PLC 프로그래밍 자동화 서버의 인공지능 클라우드 플랫폼의 구체적인 구성과 작용은 이후에 좀 더 상세 히 설명하기로 한다. PLC는 CPU와, 다수의 제어대상 장치와 데이터를 송수신하기 위한 다수의 I/O 모듈을 포함한다. 특히, 프로그램 작성 전의 상태에서 CPU와 무관하게 I/O 모듈들을 통해 제어대상 장치들을 각각 정 의할 수 있는 셀프 I/O 스캐너를 더 포함하는 것으로 한다. 이와 같은 구성에서, 상기 인공지능 클라우드 플랫폼의 장치정보 DB에는 PLC에 연결가능한 알려진 제어대상 장치들을 정의할 수 있는 정보가 분류 및 저장된다. 제어대상 장치를 정의할 수 있는 정보는, 제조사, 장치의 종류, 사용된 센서의 종류 및 통신규격 등 다양한 정 보를 포함할 수 있으며, 이는 통상의 제어대상 장치 제조사들에서 제공된다. 프로그램 DB에는 인공지능 학습모듈의 학습에 사용된 과거의 PLC 프로그램 코드가 분류 및 저장된 것으 로 할 수 있다. 또한, 오류목록 및 확률 DB에는 프로그램 DB에 저장된 프로그램들의 과거 오류 이력 및 오류 발생 확률 을 분류 및 저장하는 것으로 할 수 있다. 위의 DB들(26,27,28)에 분류 및 저장된 정보들은 인공지능 학습모듈에서 학습되고, 새로운 프로그램 작성시 PLC에 연결된 제어대상 장치들을 확인하여 가장 유사한 과거 PLC 프로그램을 찾아 매칭하여 개발자가 과거 PLC 프로그램을 이용하여 현재 PLC 시스템에 적합한 PLC 프로그램을 용이하게 작성하도록 할 수 있다. 그리고 매칭된 과거 PLC 프로그램의 오류 발생 목록과 발생 확률을 표시하여, 개발자가 과거 오류가 발생한 코 드 부분을 재확인함으로써 쉽게 검증을 할 수 있도록 할 수 있다. 이러한 과정을 구체적으로 설명하면, 최초 PLC 프로그램 작성을 위해 개발자가 사용자장치부를 이용하여 PLC 프로그램 개발 툴을 실행하고, PLC 프로그래밍 자동화 서버에 접속한다. 이때, PLC 프로그래밍 자동화 서버에 접속할 수 있는 권한은 미리 설정된 것으로 하며, 접속 방식은 ID/PW 방식, IP확인 방식, PLC 프로그램 개발 툴의 시리얼넘버 등 허가정보에 의한 승인을 통해 접속 권한을 부여받는 것으로 할수 있다. 특히 PLC 프로그램 개발 툴의 제조사에서 PLC 프로그래밍 자동화 서버를 운영하는 것일 수 있다. 상기 PLC 프로그래밍 자동화 서버의 인공지능 클라우드 플랫폼은 PLC 프로그램 개발 툴을 확인한 후, 새로운 PLC 프로그램을 작성할 것인지 확인한다. 개발자가 사용자장치부를 통해 새로운 PLC 프로그램을 작성하는 것으로 확인하면, 상기 장치정의 모듈 은 PLC 프로그램 작성 툴이 설치된 사용자장치부를 통해 PLC에 접근한다. 특히 PLC의 셀프 I/O 스캐너에 접근하여 PLC의 I/O 모듈을 통해 상기 제어대상 장치와 통 신을 수행하여 제어대상 장치의 정보를 확인한다. 이때, 개발자는 사용자장치부에 설치된 PLC 프로그래밍 툴을 이용하여 셀프 I/O 스캐너 기능을 호 출할 수 있다. 상기 장치정의 모듈은 호출된 셀프 I/O 스캐너 기능을 이용하여 제어대상 장치들을 감지한다. 기본적으로 PLC의 CPU는 작성된 PLC 프로그램을 수행하는 장치이며, 현재 작성된 PLC 프로그램이 없는 상태에서 CPU를 이용하여 I/O 모듈에 연결된 제어대상 장치들과 통신할 수 없다. 이와 같은 상태를 고려하여 PLC에는 CPU가 동작하지 않는 상태에서 제어대상 장치들과 통신을 할 수 있는 하드웨어인 셀프 I/O 스캐너를 더 포함한다. 셀프 I/O 스캐너는 상기 인공지능 클라우드 플랫 폼의 장치정의 모듈이 제공하는 스캐닝 프로그램을 저장 및 수행하는 프로세서일 수 있다. 스캐닝 프로그램은 I/O 모듈의 수를 확인하고, I/O 모듈을 통해 제어대상 장치와 통신할 수 있는 정도의 기본적인 프로그램이며, 제어대상 장치의 응답은 사용자장치부와 장치정의 모듈 중 하나 또 는 모두에 저장될 수 있다. 사용자장치부에 저장되는 경우, 개발자는 사용자장치부의 PLC 프로그래밍 툴을 이용하여 확인된 제 어대상 장치의 정보를 상기 장치정의 모듈로 제공할 수 있다. 즉, 본 발명은 개발자가 I/O 모듈에 연결된 제어대상 장치를 모두 확인하지 않고도, 자동으로 제어대상 장치를 정의할 수 있다. 좀 더 구체적으로, 상기 셀프 I/O 스캐너는 PLC의 운영체제에서 지원하는 센싱 기능을 이용하여 제어대 상 장치의 정보를 스캐닝 한다. 이러한 과정을 통해 제어대상 장치들의 정보를 최대한 수집할 수 있다. 또한, PLC는 다수의 카드 형태로 제작될 수 있으며, 다양한 모듈들을 연결하는 버스인 백플레인(Backplan e)을 포함한다. 상기 셀프 I/O 스캐너는 백플레인과 통신하여 버스에 연결된 제어대상 장치들의 정보를 수집한다. 이때 의 정보는 전원 연결상태, 연결관계를 포함할 수 있다. 특히 백플레인에는 제어대상 장치들의 정보를 메모리에 저장하고 있으며, 셀프 I/O 스캐너는 백플레인의 메 모리에 저장된 정보를 읽어 제어대상 장치 정보를 수집하는 것으로 한다. 마지막으로, 셀프 I/O 스캐너는 PLC를 구성하는 모듈들의 고유 기능을 제어하여 각 모듈에 연결된 센서 들과 입출력 장치들인 제어대상 장치의 정보를 수집한다. PLC를 구성하는 모듈이 통신 모듈인 경우 몇 개의 이더넷 포트에 몇 개의 핑(ping) 테스트가 가능하며, 각 포트 별 통신 프로토콜이 티씨피(TCP), 유디피(UDP), 라피넷(RAPIEnet) 또는 4차산업 표준 프로토콜인 OPC-UA인 지를 확인할 수 있다. 통신 모듈이 아닌 경우에도 해당 모듈에 몇 개의 포트에 제어대상 장치가 연결되어 있는지 검출할 수 있다. 이처럼 셀프 I/O 스캐너는 PLC의 운영체제 지원 센싱기능, 백플레인 메모리의 검출, 모듈의 고유 기능을 이 용하는 방식 중 적어도 하나를 사용하여 제어대상 장치들의 정보를 얻을 수 있게 된다. 상기 제어대상 장치의 예로 온도 센서일 수 있으며, 온도 센서의 제조사, 모델, 측정 온도 범위, 응답 속도 등 다양한 정보를 포함할 수 있다. 제어대상 장치의 정보는 장치정보 DB와 비교를 통해 확인 및 인증할 수 있으며, 장치정보 DB에 저 장되지 않은 새로운 제어대상 장치의 정보가 수신된 경우에는 검증 후 장치정보 DB에 분류 저장할 수 있다. 그 다음, 인공지능 학습모듈은 상기 장치정의 모듈에서 확인한 제어대상 장치들의 목록을 입력으로 하는 학습을 수행한다. 인공지능 학습모듈은 부가적으로 제어대상 장치의 목록뿐만 아니라 I/O 모듈의 순서와 제어대상 장 치를 매칭시켜 학습하여, 현재 프로그램을 작성할 PLC 시스템의 구성과 종류를 정의한다. 그 다음, 프로그램 DB에서 동일 또는 가장 유사한 과거 PLC 프로그램을 확인하고, 프로그램 제안모듈을 통해 사용자장치부로 제공한다. 프로그램 제안모듈은 바람직하게 문답식으로 개발자의 의사를 확인할 수 있는 것으로 한다. 즉, 과거 PLC 프로그램을 사용자장치부로 제공하여 개발자가 표시모듈을 통해 PLC 프로그램을 확인할 수 있 도록 함과 아울러 입력될 변수에 대하여 수정 여부를 묻는 과정을 거쳐 프로그램을 제안할 수 있다. 개발자는 사용자장치부의 입력모듈을 통해 변수를 입력할 수 있으며, 사용자 입력은 과거 PLC 프로그램 의 수정에 사용된다. 프로그램 제안모듈은 그래픽 사용자 인터페이스를 제공할 수 있으며, 사용자의 입력은 자연어이거나, 프로 그래밍 언어이거나, 사용자 인터페이스에서 제공하는 이미지일 수 있다. 또한, 프로그램 제안모듈은 사용자의 명령을 입력받을 수 있는 템플릿을 만들어 표시할 수 있다. 이러한 사용자 입력에 대한 요구는 인공지능 학습모듈에 의해 학습되어, 점차 필수적이고, 세부적인 입력 요구를 수행할 수 있다. 이는 하나의 예이며, 상기 인공지능 클라우드 플랫폼은 검출된 제어대상 장치의 목록만을 사용자장치부 에 전달하여, 표시모듈에 표시되도록 하고, 개발자가 그 표시모듈에 표시된 제어대상 장치 마다 통신 시간 순서 등을 설정하도록 할 수 있다. 구체적으로, 개발자는 검색된 제어대상 장치들의 목록을 확인하고, 동작되어야 하는 순서에 대한 시나리오 를 입력할 수 있다. 이때의 시나리오는 PLC의 동작과 관련하여 정해진 시퀀스를 뜻하며, 설정된 시간(micro second 단위)로 이루어 지는 동작의 정의다. 이러한 시나리오는 다시 인공지능 학습모듈로 제공되어, PLC 프로그램의 기초(Skeleton)를 생성할 수 있다. 이때의 생성은 기본적인 PLC 프로그램의 형태를 갖춘 것이거나, 시나리오와 가장 유사한 과거 PLC 프로그램일 수 있다. 기초 PLC 프로그램은 다시 사용자장치부로 제공되고, 개발자는 기초 PLC 프로그램을 수정하여 추가 구현을 한다. 이처럼 수정 또는 작성된 PLC 프로그램은 프로그램 검증모듈로 입력되며, 인공지능 학습모듈은 작성된 PLC 프로그램을 학습하고, 가장 유사한 과거 프로그램을 프로그램 DB에서 확인함과 아울러 오류 목록 및 확 률 DB에서 확인된 과거 프로그램의 오류 목록 및 확률을 검출한다. 이때의 오류 목록 및 확률은 그 확률의 순서에 따라 프로그램 검증모듈을 통해 사용자장치부로 제공된 다. 만약 현재 작성된 PLC 프로그램과 가장 유사한 과거 PLC 프로그램을 수행하였을 때 온도 센서에서 가장 높은 확 률로 오류가 발생한 경우, 상기 프로그램 검증모듈은 작성된 PLC 프로그램에서 온도 센서와 관련된 부분의 설정이 정확한지 개발자에게 확인을 요청할 수 있다. 이처럼 유사한 PLC 프로그램에서 과거에 발생했던 오류를 확인하여, 현재 작성된 PLC 프로그램의 오류 여부를 미리 확인함으로써, 실제 검증시 검증 시간과 노력을 줄일 수 있게 된다. 프로그램 검증모듈의 검증이 완료되면, 사용자장치부에서 작성된 PLC 프로그램은 PLC의 메모리로 업로드되고, PLC의 CPU에서 업로드된 PLC 프로그램을 수행하여 I/O 모듈을 통해 제어대상 장치(4 0)들과 통신을 수행한다.이때, 개발자는 PLC 시스템이 정상 동작을 하는지 확인할 수 있다. 이처럼 실제 통신을 통해 작성된 PLC 프로그램을 검증하기 전에, 미리 오류 발생 확률이 높은 요소들에 대하여 미리 검증함으로써, 검증 및 안정화에 소요되는 시간 및 노력을 줄일 수 있다. 이상에서 본 발명에 따른 실시예들이 설명되었으나, 이는 예시적인 것에 불과하며, 당해 분야에서 통상적 지식 을 가진 자라면 이로부터 다양한 변형 및 균등한 범위의 실시예가 가능하다는 점을 이해할 것이다. 따라서, 본 발명의 진정한 기술적 보호 범위는 다음의 청구범위에 의해서 정해져야 할 것이다."}
{"patent_id": "10-2021-0000354", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 종래 PLC 프로그램 개발과정을 설명하기 위한 블록도이다. 도 2는 본 발명의 일실시예에 따른 PLC 프로그램 개발과정을 설명하기 위한 블록도이다. 도 3은 PLC 프로그래밍 자동화 서버의 블록 구성도이다."}
