{"patent_id": "10-2024-7002147", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0107090", "출원번호": "10-2024-7002147", "발명의 명칭": "분산 컴퓨팅 실행 환경에서 사용하기 위한 상호 운용 가능한 복합 데이터 단위", "출원인": "얼터드 스테이트 머신 리미티드", "발명자": "맥도날드, 데이비드"}}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "다중 실행 환경(multiple execution environment)에서 구현될 수 있는 계산 모델(computation model)을 제공하기 위해 비일시적 컴퓨터 판독 가능 매체에 기록된 복합 데이터 구조로, 상기 데이터 구조는 컴퓨터 프로세서에 의해 실행될 때 상기 계산 모델에 따라 데이터에 대한 계산을 발생시키는 모델 코드를 특정(specifying)하는 모델 모듈(model module); 상기 계산 모델과 연관된 인터페이스 정의에 대한 포인터를 포함하는 인터페이스 정의 모듈(interfacedefinition module); 및 상기 계산 모듈과 관련된 대체 불가능한 토큰에 대한 포인터를 포함하는 대체 불가능한 토큰 모듈(non-fungibletoken module), 여기서 상기 대체 불가능한 토큰은 분산형 원장(decentralized ledger)에 저장됨;을 포함하는데이터 구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 인터페이스 정의는 상기 계산 모델에 대한 입력 및 출력의 유한 세트(finite set)를 특정하는 데이터구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 모델 모듈은 모델 코드를 포함하는 데이터 구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 모델 코드는 학습 모듈(learning module)을 포함하는 데이터 구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 상기 학습 모듈은 인공 지능 모델인 데이터 구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 모델 코드 내의 입력 변수에 매핑될 수 있는 복수의 값을 보유하는 입력 값 매트릭스를 더 포함하는 데이터 구조.공개특허 10-2024-0107090-3-청구항 7 제2항에 있어서, 상기 모델은 비디오 게임에서 개체(entity)의 활동을 나타내는 데이터 구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제8항에 있어서, 상기 인터페이스 정의는 개체에 의해 취해질 수 있는 액션을 특정하는 데이터 구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 값은 개체의 속성을 나타내는 데이터 구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서, 상기 값은 개체 활동의 결과로 변경될 수 있는 데이터 구조."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "다중 실행 환경에서 구현될 수 있는 계산 모델을 제공하기 위해 비일시적 컴퓨터 판독 가능 매체에 기록된 복합데이터 구조를 생성하는 방법으로서,컴퓨터 프로세서에 의해 실행될 때 상기 계산 모델에 따라 데이터에 대한 계산을 발생시키는 모델 코드를 특정하는 모델 모듈을 제공하는 단계;상기 계산 모델과 연관된 인터페이스 정의에 대한 포인터를 포함하는 인터페이스 정의 모듈을 제공하는 단계;및상기 계산 모델을 분산 원장(decentralized ledger)에 저장된 대체 불가능한 토큰과 연결하는 단계를 포함하는방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 상기 인터페이스 정의는 상기 계산 모델에 대한 입력 및 출력의 유한 세트를 특정하는 방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서, 상기 모델 모듈은 모델 코드를 포함하는 방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "공개특허 10-2024-0107090-4-제11항에 있어서, 상기 모델 코드는 학습 모듈을 포함하는 방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서, 상기 학습 모듈은 인공 지능 모델인 방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서, 상기 모델 코드 내의 입력 변수에 매핑될 수 있는 복수의 값을 보유하는 입력 값 매트릭스를 제공하는 단계를더 포함하는 방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제12항에 있어서, 상기 모델은 비디오 게임에서 개체의 활동을 나타내는 방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제18항에 있어서, 상기 인터페이스 정의는 상기 개체에 의해 취해질 수 있는 동작을 특정하는 방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서, 상기 값은 개체의 속성을 나타내는 방법."}
{"patent_id": "10-2024-7002147", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19항에 있어서, 상기 값은 개체 활동의 결과로 변경될 수 있는 방법."}
{"patent_id": "10-2024-7002147", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "공개된 실시예는 다양한 실행 환경에서 소유, 거래 및 사용할 수 있는 인공 지능 모델과 같은 실행 가능한 모델 을 제공한다. 모델을 엄격하게 정의된 인터페이스 정의와 결합함으로써 해당 인터페이스를 지원하는 다양한 실행 환경에서 모델을 실행할 수 있다. 모델을 대체 불가능한 암호화 토큰과 결합하면 모델과 기타 구성 요소를 하나 의 단위로 소유하고 거래할 수 있다. 거래 가능한 복합 단위는 비디오 게임 환경, 챗봇 환경, 금융 거래 환경 등 지원되는 여러 실행 환경에서 유용성을 갖는다. 또한 이 인터페이스를 사용하면 여러 보완 복합 장치에서 파이프 라인과 시스템을 생성할 수 있다."}
{"patent_id": "10-2024-7002147", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "분산형 비디오 게임 환경, 봇 네트워크, 복잡한 금융 거래 환경과 같은 컴퓨팅 실행 환경이 보편화되었다. 이러 한 많은 환경에서 참가자(participant)는 특권과 특성을 가진 객체로 표현될 수 있다. 예를 들어, 비디오 게임 환경에서 플레이어 아바타는 속도, 민첩성, 힘과 같은 특정 기능을 가질 수 있다. 플레이어 아바타와 관련된 기 능은 실행 환경 내에 저장될 수 있다. 그러나 각 환경에는 고유한 형식과 프로토콜이 있다. 또한 이러한 환경에 는 데이터를 보관하는 중앙 집중식 신뢰할 수 있는 기관이 있어야 한다. 따라서 객체의 사용은 생성된 실행 환 경에 남아 있어야 하며 다른 환경에서의 활동은 객체에 영향을 주지 않으며 영향을 미칠 수도 없다. 또한 신뢰 할 수 있는 당사자의 필요성으로 인해 블록체인 네트워크 및 기타 분산 원장 기술(DLT)과 같은 분산 컴퓨팅 실행 환경에서 이러한 객체를 실시예하는 것이 불가능하다. 공개된 실시예는 다양한 실행 환경에서 소유, 거래 및 사용할 수 있는 인공 지능 모델과 같은 실행 가능한 모델 을 제공한다. 모델을 엄격하게 정의된 인터페이스 정의와 결합함으로써 해당 인터페이스를 지원하는 다양한 실 행 환경에서 상기 모델을 실행할 수 있다. 상기 모델을 대체 불가능한 암호화 토큰(on-fungible cryptographic token)과 결합하면 상기 모델과 기타 구성 요소를 하나의 단위로 소유하고 거래할 수 있다. 상기 모델을 표현하 는 복합 데이터 구조를 본 명세서에서는 \"복합 단위(composite unit)\"라 한다. 상기 거래 가능한 복합 단위는 비디오 게임 환경, 챗봇 환경, 금융 거래 환경 등 지원되는 여러 실행 환경에서 유용성을 갖는다. 또한 이 인터 페이스를 사용하면 복수의 보완(complementary) 복합 장치에서 파이프라인과 시스템을 생성할 수 있다. 본 발명의 측면은 다중 실행 환경(multiple execution environment)에서 구현될 수 있는 계산 모델 (computation model)을 제공하기 위해 비일시적 컴퓨터 판독 가능 매체에 기록된 복합 데이터 구조를 생성하는 방법으로, 상기 데이터 구조는 컴퓨터 프로세서에 의해 실행될 때 상기 계산 모델에 따라 데이터에 대한 계산을 발생시키는 모델 코드를 특정(specifying)하는 모델 모듈(model module); 상기 계산 모델과 연관된 인터페이스 정의에 대한 포인터를 포함하는 인터페이스 정의 모듈(interface definition module); 및 상기 계산 모듈과 관 련된 대체 불가능한 토큰에 대한 포인터를 포함하는 대체 불가능한 토큰 모듈(non-fungible token module)을 포 함하고, 여기서 상기 대체 불가능한 토큰은 분산형 원장에 저장된다. 본 발명의 또 다른 측면은 실행 환경 및 그 안에서 복합 데이터 구조의 용도이다. 본 발명의 또 다른 측면은 상기 데이터 구조를 사용하기 위한 실행 환경을 포함하는 시스템이다."}
{"patent_id": "10-2024-7002147", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "특정 용어는 단지 편의를 위해 다음 설명에서 사용되었으며 제한적이지 않는다. 본 명세서에서 특별히 언급하지 않는 한, \"a\", \"an\" 및 \"the\"라는 용어는 하나의 구성요소에 한정되지 않고 \"적어도 하나\"의 의미로 해석되어야 한다. 용어에는 위에서 언급한 단어, 그 파생어 및 유사한 의미의 단어가 포함된다. 개시된 실시예에 따른 복합 유닛(composite unit)은 다양한 실행 환경(execution environments)에서 실시예될 수 있고 하나의 실행 환경에서 다른 실행 환경으로 이동할 수 있는 인공 지능과 같은 모델의 거래 가능성 (trade-ability), 상호 운용성(interoperability) 및 구성 가능성(composability)을 제공한다. 엄격하게 정의 된 인터페이스 정의와 실행 모델을 결합함으로써 복합 유닛을 사용하면 여러 실행 환경에서 인터페이스에 대한 지원을 실시예하고 다른 모델이 해당 인터페이스에 적합하도록 할 수 있다. 그 결과, 여러가지 지원되는 실행 환경 전반에 걸쳐 유틸리티를 갖는 복합 유닛을 소유하고 거래할 수 있는 능력이 탄생했다. 또한 이 인터페이스를 사용하면 여러 보완 복합 유닛(multiple complementary composite units)에서 파이프라인과 시스템을 생성 할 수 있다. 개시된 실시예에 따른 복합 유닛(composite unit)은 3개의 구성요소를 포함한다: - 실행 모델(Execution Model): 모델을 실시예하는 실행 가능 코드의 사양(specification of executable code)(예를 들어 실행 가능 코드 AI 모델이 저장되고 액세스 가능한 콘텐츠 주소 지정 URL) - 인터페이스 정의(Interface Definition): 모델이 수용하는 입력 및 모델의 출력 사양(예를 들어 상대 (relative) 모델에 대한 인터페이스 정의가 저장되고 액세스 가능한 콘텐츠 주소 지정 URL(content addressed URL)). - 블록체인 참조(Blockchain Reference): 블록체인이나 기타 분산 원장 기술(distributed ledger technology) 과 같은 분산 컴퓨팅 네트워크에 저장되고, 모델에 상응하는 NFT(Non-Fungible Token)에 대한 포인터. 도 1은 개시된 실시예들에 따른 복합 유닛의 아키텍처를 예시한다. 복합 유닛은 콘텐츠 주소 지정 모델 (content addressed model), 인터페이스 사양(interface specification) 및 (상기 복합 유닛을 분산 원장(decentralized ledger)에 저장된 NFT와 연관시키는) 토큰 포인터(token pointer)를 포함 한다. 구성요소 102, 104, 106는 비일시적 컴퓨터 판독 가능 매체에 데이터 구조로 저장된 데이터 요소라는 점 에 유의한다. 상기 구성요소는 포인터를 사용하거나, 단일 데이터 구조에 저장하거나, 관계형 테이블 등을 통해 다양한 방식으로 연결될 수 있다. 또한, 상기 구성 요소는 해당 데이터나 코드를 저장할 수도 있고, URL이나 기 타 주소, 링크 등을 통해 데이터나 코드를 달리 지정할 수도 있다. 예를 들어, 콘텐츠 주소 지정 모델은 모델을 실행하기 위한 모델 코드를 포함할 수 있거나, 도 1에 도시된 바와 같이, 모델 코드의 저장 위치에 대한 주소를 포함할 수 있다. 분산 원장은 블록체인 네트워크와 같은 분산 환경(decentralized environment)의 일부일 수 있다. NFT는 당시 복합 유닛이 사용되는 실행 환경에 관계없이 복합 유닛의 소유권을 식별 하고 표현하는 데 사용될 수 있는 고유 토큰이다. 복합 유닛의 간단한 예로 고전 컴퓨터 게임 PONGTM을 생각해 본다. 컴퓨터 게임 PONGTM의 복합 유닛에 대한 인터페이스 정의의 예가 도 2에 나와 있다. 도 2에 도시된 바와 같이, 게임 플레이의 가장 최근 N(이 예에서는 N=2) 프레임으로부터의 입력이 202 및 204에 표시된다. 상기 입력에는 볼의 x 및 y 위치와 각 플레이어의 패들 이 포함되며, 이를 통해 다음을 추론할 수 있다: - 볼 위치, 속도 및 궤적; - 상대 패들 위치, 속도 및 궤적; 및 - 플레이어 자신의 패들 위치, 속도 및 궤적. 이 예에서 인터페이스의 출력은 206에 표시된 것처럼 다음 프레임에 대한 플레이어의 패들 이동 명령이다. x 및 y 값이 현재 플레이어의 패들 위치에 추가된다. 모델 입력 및 출력에 대한 엄격한 인터페이스를 정의함으로써 해당 인터페이스를 지원하는 여러 환경에 모델을 배포할 수 있다. 표준 PONGTM의 제약 조건(constraint)은 매우 간단하고 물리학은 선형이지만 이 인터페이스는 제약 조건과 물리학이 다른 여러 변형에 적용될 수 있다. 입력으로 사용된 숫자 프레임을 조정(tweaking)함으로 써 더 복잡한 제약 조건과 비선형 물리학을 사용하는 게임 변형에 대해 모델을 훈련할 수 있다. 공개된 실시예 는 AI 모델이 게임의 다양한 변형에서 필드 전반에서(across the field) 경쟁하도록 훈련되는 경쟁적인 PONGTM 토너먼트의 다양한 생태계를 만드는데 사용될 수 있다. 공개된 실시예는 아래 예에서 설명하는 것처럼 게임 및 그 이상의 더 복잡한 환경에 적용될 수 있다. 복합 유닛은 아레나(arena) 및 복합 유닛 내의 입력 변수(input variables)에 매핑될 수 있는 값 세트를 포함하 는 데이터 구조인 입력 값 매트릭스(input value matrix)를 통해 실행 환경(여기서는 \"아레나(arena's)\"라고 함)에 걸쳐 연결될 수 있다. 이는 단일 입력 참조를 제공하지만 아레나 개발자에게 매핑 방법에 대한 선택권을 제공함으로써 복합 장치 배포(deploy) 방법에 일관성과 유연성을 모두 허용한다. 아레나는 상기 복합 유닛이 비 디오 게임 내 레벨, 전체 게임, 거래 봇 및/또는 단일 상호 작용이 포함되는 예와 상호 작용할 수 있는 모든 환 경을 나타낼 수 있다. \"아레나 에이전트\"는 복합 유닛의 출력을 실행하는 코드이다. 도 3a, 도 3b, 도 3c은 입력 값 매트릭스에 연결된 각 아레나마다 하나씩, 다수의 복합 유닛을 도시한다. 이 예 에서 각각의 복합 유닛(300a, 300b, 300c)은 대응하는 아레나 에이전트(302a, 302b, 302c)를 갖는다. 입력 값 매트릭스는 해당 아레나 에이전트를 통해 각 복합 유닛에 연결된다. 매우 간단한 입력 값 행렬의 예가 표 형식으로 아래에 설명되어 있다. 표 1 Value 1 5 Value 2 2 Value 3 6 비디오 게임 PONG™ 및 SPACE INVADERS™와 관련하여 입력 값 매트릭스의 적용은 다음과 같다. PONGTM에서 아레 나 개발자는 최대 패들 속도를 위해 에이전트에 제약 조건을 추가하려고 할 수 있다. 이는 입력 값 매트릭스의 값 3을 해당 복합 유닛의 모델의 일부일 수 있는 컨트롤러 스크립트 내의 속도 변수에 매핑함으로써 달성 될 수 있다(도 1 참조). 패들의 움직임을 제어하는 모델 코드 예의 일부가 도 4에 나와 있다. 속도변수는 402로 표시된다. SPACE INVADERS™와 관련된 예에서는, 아레나 개발자는 도 5에 도시된 컨트롤러 스크립트 내에서 Value3을 502로 표시된 가변 속도에 대한 입력 값에 매핑함으로써 우주선의 최대 속도에 대한 제약 조건을 에이 전트에 추가하기를 원할 수 있다(게임에서 우주선 움직임을 제어하기 위한 스니펫의 예). 도 3a, 도 3b, 도 3c, 도 4 및 도 5와 관련하여 설명된 입력 값 매트릭스는 설명을 위한 매우 간단한 예이다. 도 6은 개시된 실시예에 따른 더 복잡한 입력 값 매트릭스(input value matrix)를 도시한다. 입력 값 매트 릭스의 변수 중 적어도 일부는 비디오 게임의 플레이어 개체의 속성을 나타낸다. 도 6의 예에서, 변수 세 트(set of variable)는 속성 카테고리(category of attribute)와 관련될 수 있다. 예를 들어, 속성 (attribute)은 해당 아레나에 대한 플레이어 개체의 강도를 나타내고, 속성은 해당 아레나에 대한 플 레이어 개체의 지능을 나타내며, 속성은 해당 아레나에 대한 플레이어 개체의 민첩성을 나타낸다. 입력 값 행렬의 각 값 세트는 모델 코드의 변수 배열에 매핑되거나 각 변수가 모델 코드의 개별 변수에 매핑될 수 있다. 입력값 행렬은 무작위로 생성될 수 있으며, 각 게임 개발자는 특정 스킬에 해당하는 행렬의 영역을 지정/태그할 수 있다. 태그는 각 영역과 연결될 수 있으며 게임 개발자는 이전 개발자가 만든 태그를 활용하여 유사한 게임 에 대한 유사한 기술 세트를 만들 수 있다. 다양한 유형의 게임 개발자는 다른 게임의 태그 세트와 매우 다른 태그 세트를 생성하거나 사용하도록 선택할 수 있다. 따라서 입력 값 매트릭스는 원하는 대로 사용/그룹화/태그 지정될 수 있는 값 및 관련 TAG 클라우드의 집합일 수 있다. 게임 개발자는 게임 유형과 원하는 플레이 특성에 따라 어떤 태그를 사용할지 결정할 수 있지만 다른 유사한 게임과도 일관성을 유지하기를 원할 것이다. 전술한 바와 같이, 개시된 실시예에 따른 복합 유닛은 비디오 게임에 적용될 수 있다. 게임 플랫폼 및 프로토콜 예의 공개된 실시예는 아래에서 더 자세히 설명된다. 플랫폼을 통해 사용자는 게임 플레이어 엔터티(아래에서 간단히 \"플레이어\"라고 함)를 생성하고 통계를 업그레이드하고 생태계 내에서 NFT로 획득, 구매 및 판매할 수 있다. 모델 코드는 기계 학습을 통합하여 게임 플레이 내에서 그리고 게임 플레이의 결과로 변화하고 적응할 수 있는 \"브레인\"을 생성한다. 프로토콜과 플랫폼은 개발자가 플레이어와 상호 작용할 수 있는 여러 게임을 만들 수 있도록 허용한다. 플레이 어마다 다양한 관련 기술(예를 들어 힘, 속도, 지능 등)의 수준이 다를 수 있다. 플레이어는 인간의 지원을 받 는 플레이어가 있는 게임에서 상호 작용하는 지능형 논플레이어 캐릭터(non-player character, NPC)일 수 있다. NPC는 게임을 플레이하는 사람이 제어하지 않는 게임의 캐릭터 또는 기타 개체이다. 플레이어는 기본 \"프레임\", 플레이어의 미적 특성과 속성을 정의하는 \"형태(form)\"(예를 들어, 상기 프레임과 형태는 위에 정의된 입력 값 매트릭스의 형태일 수 있음), 훈련 가능한 \"브레인\"(예를 들어, 위에 설명된 실행 가능한 모델의 형태)의 세 부 분으로 정의될 수 있다. 사용자는 기본 속성이 있는 이러한 구성 요소를 포함하는 새로운 NFT 팩을 생성하여 새 로운 플레이어를 생성할 수 있다. 일부 프레임, 형태 및/또는 브레인은 희귀한 속성을 포함하거나 잠재적인 의 미에서 더 높은 수준에서 시작할 수 있다. 예를 들어 해당 플레이어는 특정 기술의 정점에 도달하는 데 더 적은 시간이 걸리는 더 빠른 학습자라는 의미이다. 게임을 하기 위해서는 프레임, 형태, 브레인이 선택되고 서로 연결된다. 게임플레이를 통해 각 구성 요소는 고 유한 방식으로 수정된다. 프레임, 형태 및 브레인의 조합은 학습 모델에 영향을 미치며 플레이어를 위한 특정 기계 학습 모델 저장소(예를 들어 브레인)에서 매우 큰 의사 결정 프로세스 및 조합 세트를 생성할 수 있다. 특 정 속성을 가진 형태를 사용하도록 훈련된 두뇌는 다른 속성이나 해당 속성에 대해 다른 값을 가진 형태와 결합될 때 다시 학습해야 하기 때문에 단순히 \"더 발전된\" 두뇌나 \"더 유능한\" 형태를 프레임에 부착한다고 해서 즉 시 뛰어난 선수가 탄생하는 것은 아니다. 동일한 속성을 가진 형태와 뇌를 가진 두 개의 프레임이라도 게임 플 레이를 기반으로 뇌 모델에서 완전히 다른 훈련을 개발할 수도 있다. 이를 통해 독특한 “인격(personalities) ”의 거대한 우주가 발전할 수 있다. 프레임에 부착 및 분리가 가능한 속성과 속성 값을 분리하는 이 모델을 통해 사용자는 다양한 프레임, 형태 및 두뇌에서 플레이어의 고유한 부분을 결합하여 궁극적인 전략을 설계할 수 있다. 중요한 것은 이 구조를 통해 사 용자는 특정 작업이나 전략을 위해 또는 특정 상대와 마주할 때 특정 아레나나 브레인에 대한 형태를 선택할 수 있다. 각 형태나 브레인은 예를 들어 5가지 유형 중 하나로 분류될 수 있습니다. 결함, 일반, 희귀, 에픽, 및 전설(Defective, Common, Rare, Epic, and Legendary). 플레이어는 속성을 보유하고 IPFS를 사용하여 저장되는 .yaml 파일을 사용하여 정의할 수 있다. YAML은 JSON과 같은 언어를 대체하여 구성 파일의 형식으로 자주 사용 되는 직렬화 언어이다. IPFS는 잘 알려진 P2P 하이퍼미디어 프로토콜이다. YAML은 플레이어와 속성을 정의하는 데이터를 저장하는 데 사용할 수 있는 파일 구조/형식의 한 예일 뿐이다. 이 구성의 결과로 \"메모리\"는 불변하 고 분산되며 NFT에 구체적으로 연결될 수 있다. 프레임에는 생성 시 할당된 범용 속성 값 세트가 포함되어 있다. 값은 낮게 시작할 수 있지만 플랫폼에서 작업 을 완료하거나 플랫폼 통화로 부스트를 구매하여 업그레이드할 수 있다. 예를 들어 프레임 속성 값은 다음에 해 당할 수 있다: - 힘(Strength); - 피트니스(Fitness); - 속도(Speed); - 민첩성(Dexterity); - 지능(Intelligence); - 카리스마(Charisma); - 지각(Perception); - 운(Luck); 및/또는 - 크기(Size) 형태는 게임에 따라 다를 수 있으며 특정 상대와의 게임과 같은 특정 작업에 대해 기술 및 속성을 수정하기 위 해 추가 기술 또는 속성을 제공하는 속성 값을 가질 수 있다. 아레나에 입장하려면 아레나 특정 양식을 프레임 에 부착해야 할 수 있다. 이를 통해 프레임이 여러 형태를 가지고 있는 경우 프레임이 여러 아레나에 참여할 수 있다. 형태에는 특정 아레나에 유용할 수 있는 프레임 통계의 배수가 포함될 수도 있다. 이는 무작위로 할당될 수 있 으며 희귀한 속성을 포함할 수 있다. 형태가이 만들어지면 게임은 매핑 승수 등을 통해 내부적으로 기술 수준을 업그레이드할 수 있다. 브레인은 프레임, 즉 NFT와 관련된 메모리 주소로 정의될 수 있으며 학습 모델을 실행하기 위한 코드를 저장한 다. 브레인은 다양한 형태로 사용될 수 있다. 그러나 새로운 형태에서는 수정된 속성과 거기에 지정된 속성 값 을 사용하는 방법을 브레인이 학습해야 할 수도 있다. 브레인에는 연결된 프레임을 강화할 수 있고 특정 아레나 에 더 유용할 수 있는 속성도 있다. 프레임에는 특정 학습 모델에 대한 교육을 저장하고 조합을 형성하여 특정 분야에 대한 여러 조합에 대한 교육을 허용하는 여러 메모리가 포함될 수 있다. 브레인이 학습하려면 게임 플레이와 같은 활동을 통해 훈련이 필요하다. 훈련은 \"체육관(gym)\" 플랫폼에서 수행 될 수 있다. 본 명세서에서 사용된 \"체육관\"은 GPU 기반 기계 학습 모델 트레이너일 수 있다. 모델은 플레이어 NFT와 관련된 속성의 영향을 받는다. 브레인의 학습 모델은 신경망을 사용하므로 특정 선수를 훈련하는 구체적 인 결과는 독특하다. 플레이어는 체육관에서 훈련하여 자신의 속성을 모델링할 수 있으며, 결과적으로 AI가 게 임을 더 잘 수행할 수 있게 된다. 각 플레이어는 체육관에서 훈련할 때마다 업데이트되는 .onnx 파일을 가질 수 있다. ONNX는 기계 학습 모델을 나타내기 위해 구축된 개방형 형식이다. 체육관에서의 훈련은 GPU를 사용하여 NFT의 독특한 브레인을 훈련시키는 암호화폐 채굴과 유사한 과정이 될 수 있다. 체육관 사용자는 체육관 사용비용을 지불해야 할 수 있으므로 프로토콜은 체육관을 호스팅하는 사람들에게 인센티브를 제공할 수 있다. 체육 관 세션 중에 사용자는 예를 들어 파일 뷰어를 통해 속성을 모니터링하여 선수의 실력이 향상되는 것을 볼 수 있으며, 결정한 결과가 달성되면 세션을 종료할 수 있습니다. 사용자는 web3 지갑을 사용하여 게임에 연결할 수 있다. 그런 다음 사용자는 프레임, 형태, 브레인 및 메모리의 조합인 플레이어를 선택한다. 축구와 같은 팀 플레이의 경우 여러 플레이어를 선택하여 팀을 만들 수 있다. 경 기/게임에는 두 팀이 필요하다. 게임이 시작되고 플레이어가 로드되면 게임은 사용자가 아레나에 입장할 때 프 레임, 형태, 두뇌 및 메모리의 조합과 관련된 NFT가 사용자가 소유하고 있는지 확인한다. 양측은 특정 기간 동 안 충분한 승점/골을 얻기 위해 경쟁한다. 이 결과의 출력은 관련 NFT 기록에 대해 블록체인 네트워크와 같은 분산 원장에 저장될 수 있다. 이를 통해 플 레이어와 게임 결과를 중심으로 경제적 인센티브와 활동의 생태계가 발전할 수 있다. 게임, 선수, 팀 통계를 다 양한 방식으로 표시할 수 있다. 사용자는 프레임, 형태, 브레인의 인벤토리는 물론 플레이어의 구성과 통계가 플레이어에게 미치는 영향을 볼 수 있다. 프레임/형태/브레인의 조합을 부착하여 플레이어를 수정할 수 있도록 사용자 인터페이스를 제공할 수 있다. 사용자는 게임 결과에 대해 베팅하거나 팀을 빌려 경기를 하거나 플레이 어를 빌려 팀을 업그레이드할 수 있다. 플랫폼에는 여기에 언급된 지불에 사용되는 기본 토큰(native token)을 포함하는 분산 원장(distributed ledger)이 포함되어 있다. 유동성 채굴 이벤트를 통해 토큰을 채굴할 수 있다. 사용자가 기본 토큰을 보유하면 사용자는 기본 토큰을 사용하여 프레임/형태/브레인 조합 팩을 채굴(또는 구매)할 수 있다. 팩은 각 팩의 희귀 한 구성 요소를 무작위로 생성할 가능성이 있다. 채굴은 공정한 분배 곡선을 기반으로 할 수 있으며 팩을 채굴 하려면 최소 지분이 필요할 수 있다. 채굴에 소요되는 시간은 사용자의 스테이킹량(staked amount)에 따라 줄어 들 수 있다. 이를 통해 초기 또는 강력한 지지자가 혜택을 받을 수 있을 뿐만 아니라 후기 또는 소규모 지지자 가 참여할 수 있다. 소규모 참가자에게도 게임을 공정하게 만들기 위해 지분(stake)이 증가한다고 해서 반드시 NFT 발행 시 희귀한 속성을 얻을 수 있는 개인의 기회가 증가할 필요는 없다. 그러나 더 큰 이해관계자는 더 작은 이해관계자에 비 해 동일한 시간에 더 많은 팩을 채굴할 수 있다. 팩은 에디션으로 출시될 수 있으며 시간이 지남에 따라 모델이 발전함에 따라 에디션에 새로운 속성이 포함될 수 있거나 일부 에디션에는 제한된 실행이 포함될 수 있다. 그러 나 플레이어의 성과는 훈련과 경험에 의해 결정되기 때문에 \"낮은\" 사양의 캐릭터라도 승리 능력/전략을 개발할 가능성이 있다. 기본 토큰은 GPU 제공업체와 체육관 사용자 간의 결제에도 사용될 수 있다. 기본 토큰은 다른 사용자로부터 플레이어를 구매하거나, 아레나에 대한 액세스 권한을 구매하거나, 플레이어를 위한 장식 아이템 이나 전리품 상자를 구매하는 데에도 사용할 수 있다. 개시된 실시예와 관련하여 다양한 공지된 기술 플랫폼 및 프로토콜이 사용될 수 있다. NFT는 ERC-1155 토큰 표 준을 사용하여 발행될 수 있다. 이러한 NFT는 특히 게임용이며 ERC-721 대안을 통해 가능한 것보다 Ethereum 네 트워크에서 더 효율적인 거래 및 전송을 가능하게 한다. CHAINLINKTM RNG(Random Number Generator) 및 VRF(Verified Randomness Function)는 게임 메커니즘(공이 시작 되는 위치에 대한 동전 던지기 등)과 NFT와 관련된 희귀 속성에 대한 주조 메커니즘(minting mechanic) 모두에 서 무작위성을 제공하는 데 사용될 수 있다. Chainlink 오라클 네트워크를 사용하여 NFT가 게임 플레이 중에 구 축되는 동적 속성을 갖도록 할 수도 있다. 디지털 소비자 지갑 소프트웨어, 애플리케이션, 인프라 및 개발자 도 구로 구성된 생태계인 SYLO 프로토콜은 게임 채팅, 마켓플레이스 채팅은 물론 NFT 지갑에도 사용할 수 있다. IPFS는 NFT와 관련된 메모리를 저장하고 게임의 두뇌가 올바른 NFT를 사용하고 있는지 확인하는 데 사용될 수 있다. UNITY를 게임 엔진으로 사용할 수 있다. 위에서 설명한 구체적인 예는 주로 비디오 게임과 관련이 있다. 그러나, 개시된 실시예는 다양한 애플리케이션 에 적용될 수 있으며, \"플레이어\" 개체는 예를 들어 (온라인 친구에게 개별적인 개성을 부여하기 위한) 채팅 봇, 진정한 개인 비서 및/또는 소유자나 커뮤니티를 대신하여 동적 거래 전략에 따라 거래를 수행하는 거래 봇 일 수 있다. 지능형 자동화 에이전트에 의해 완료될 수 있는 모든 작업은 공개된 실시예를 사용하여 수행될 수 있다. 당업자라면 개시된 실시예예에 대한 넓은 발명적 개념을 벗어나지 않고 변경이 이루어질 수 있음을 이해할 수 있을 것이다. 그러므로, 본 발명은 개시된 실시예예에 제한되지 않으며, 첨부된 청구범위에 의해 정의된 바와 같이 본 발명의 정신 및 범위 내에서 변형을 포함하도록 의도된다는 것이 이해된다.도면 도면1 도면2 도면3a 도면3b 도면3c 도면4 도면5 도면6"}
{"patent_id": "10-2024-7002147", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 발명의 다음의 상세한 설명뿐만 아니라 전술한 요약은 첨부된 도면과 함께 읽을 때 더 잘 이해될 것이다. 본 발명을 예시할 목적으로, 다양한 예시적인 실시예가 도면에 도시되어 있다. 그러나 본 발명은 도시된 정확한 배 열 및 수단에 제한되지 않는다는 것을 이해해야 한다. 도면에서: 도 1은 개시된 실시예들에 따른 복합 유닛의 구조의 개략도이다. 도 2는 개시된 실시예에 따른 인터페이스 정의를 위한 코드의 예이다. 도 3a은 개시된 구현들에 따른 복합 유닛들과 입력 값 매트릭스 사이의 연결의 개략도이다. 도 3b는 도 3a의 연속이고, 개시된 구현에 따른 복합 유닛과 입력 값 매트릭스 사이의 연결을 개략적으로 도시 한 도면이다. 도 3c는 도 3a과 도 3b의 연속이며, 개시된 구현에 따른 복합 유닛과 입력 값 매트릭스 사이의 연결을 개략적으 로 예시한 도면이다. 도 4는 개시된 실시예들에 따른 모델 코드의 코드 조각의 예이다. 도 5는 개시된 실시예들에 따른 모델 코드의 코드 조각의 또 다른 예이다. 도 6은 개시된 실시예들에 따른 입력 값 매트릭스를 예시하는 표이다."}
