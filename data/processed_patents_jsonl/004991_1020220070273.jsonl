{"patent_id": "10-2022-0070273", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0169755", "출원번호": "10-2022-0070273", "발명의 명칭": "스케줄링을 수행하는 방법 및 단말기", "출원인": "서울대학교산학협력단", "발명자": "이영기"}}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "적어도 하나의 어플리케이션으로부터 수신한 요청(request)을 유닛(unit) 기준으로 파티셔닝하여 적어도 하나의서브그래프를 생성하는 분석부;상기 적어도 하나의 서브그래프를 수신하고, 수신한 서브그래프를 수행할 수 있는 적어도 하나의 프로세서의 적어도 하나의 주파수마다 연산수행시간을 예측하여 저장하는 프로파일링부;상기 적어도 하나의 어플리케이션으로부터 수신한 요청 및 상기 서브그래프별로 저장된 적어도 하나의 연산수행시간에 기초하여 서브그래프와 프로세서를 선택하는 스케줄러;를 포함하는 것을 특징으로 하는 스케줄링을 수행하는 단말기."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서, 상기 스케줄러는 적어도 하나의 프로세서 각각의 현재 주파수에 대응하는 연산수행시간을 상기 프로파일링부에 요청하여 수신하고, 상기 현재 주파수에 대응하는 예측된 연산수행시간을 기초로 서브그래프와 프로세서를 선택하는 것을 특징으로 하는 스케줄링을 수행하는 단말기."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서, 상기 스케줄러는 적어도 하나의 어플리케이션 각각으로부터 수신한 요청을 유닛의 형태로 나누어 상기 요청에 포함된 정책을 기초로 상기 요청에 포함된 정책을 지닌 큐에 삽입하는 멀티레벨큐;및상기 정책을 지닌 큐 내에 남아있는 유닛에 대하여 상기 남아있는 유닛을 처리하기에 적합한 서브그래프 및 프로세서를 선택하는 스케줄링정책부;를 포함하는 것을 특징으로 하는 스케줄링을 수행하는 단말기."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서, 상기 멀티레벨큐는 복수의 큐로 구성되고, 복수의 큐 각각은 정책을 지니며, 여러 개의 정책이 있는 경우 기설정된 정책별 우선순위에 따라 정책 및 큐를 선정하는 것을 특징으로 하는 스케줄링을 수행하는 단말기."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서, 상기 단말기는이기종프로세서를 포함하고, 상기 이기종프로세서는 CPU, NPU, GPU 중 적어도 두 개를 포함하는 것을 특징으로 하는 스케줄링을 수행하는 단말기."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서, 상기 분석부는 상기 요청을 상기 유닛 기준으로 파티셔닝하여 복수의 유닛으로 분리하고, 분리된 복수의 유닛각각을 처리할 수 있는 적어도 하나의 프로세서의 유형을 기초로 복수의 서브그래프 시퀀스를 도출하며, 또한상기 프로세서의 유형을 기초로 상기 서브그래프 시퀀스 내에 연속하여 위치한 서로 다른 유닛이 있는 경우 이를 병합하여 적어도 하나의 서브그래프를 생성하는 것을 특징으로 하는 스케줄링을 수행하는 단말기."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "공개특허 10-2023-0169755-3-제 6 항에 있어서, 상기 서브그래프 시퀀스 내에 연속하여 위치한 서로 다른 유닛이 동일한 프로세서에서 처리가 가능한 경우 병합되는 것을 특징으로 하는 스케줄링을 수행하는 단말기."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1 항에 있어서, 동일한 유닛 내의 연산은 하나의 동일한 프로세서에서 처리될 수 있는 것을 특징으로 하는 다중심층신경망에서스케줄링 수행방법."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 1 항에 있어서, 상기 프로파일링부는 상기 서브그래프마다 이용 가능한 적어도 하나의 프로세서마다 상기 적어도 하나의 프로세서에서 이용할 수 있는 적어도 하나의 주파수 각각에 대해 연산수행시간을 예측하여 저장하는 것을 특징으로 하는 스케줄링을 수행하는 단말기."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "분석부에서 적어도 하나의 어플리케이션으로부터 수신한 요청을 유닛 기준으로 파티셔닝하여 적어도 하나의 서브그래프를 생성하는 단계; 상기 분석부에서 프로파일링부로 상기 적어도 하나의 서브그래프를 전송하고, 스케줄러로 상기 요청을 유닛 기준으로 파티셔닝한 복수의 유닛을 전송하는 단계; 및상기 스케줄러에서 수신한 상기 복수의 유닛을 상기 요청에 해당하는 정책을 가진 큐에 삽입하고, 상기 큐에 남아 있는(pending) 유닛에 대하여 상기 정책에 기초하여 상기 남아있는 유닛을 처리하기 위한 서브그래프 및 프로세서를 선택하는 스케줄링 단계;를 포함하며, 상기 프로파일링부는 상기 적어도 하나의 서브그래프마다 이용 가능한 적어도 하나의 프로세서의 적어도 하나의주파수마다 연산수행시간을 예측하여 저장하는 것을 특징으로 하는 단말기에서 스케줄링을 수행하는 방법."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 10항에 있어서, 상기 스케줄러는 적어도 하나의 어플리케이션으로부터 요청을 수신하면, 요청을 수신한 시점의 적어도 하나의 프로세서 각각의주파수에 대응하는 연산수행시간을 상기 프로파일링부에 요청하여 수신하고, 이를 기초로 상기 큐에 남아 있는유닛에 대하여 상기 남아있는 유닛을 처리하기에 적합한 서브그래프 및 프로세서를 선택하는 것을 특징으로 하는 단말기에서 스케줄링을 수행하는 방법."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 10항에 있어서, 상기 스케줄러는 이기종 프로세서 중 유휴 프로세서가 감지되는 경우 상기 서브그래프 및 프로세서를 선택하는 스케줄링을 수행하는 것을 특징으로 하는 단말기에서 스케줄링을 수행하는 방법."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 10항에 있어서,상기 분석부는 상기 요청을 상기 유닛 기준으로 파티셔닝하여 복수의 유닛으로 분리하고, 분리된 복수의 유닛각각을 처리할 수 있는 적어도 하나의 프로세서의 유형을 기초로 복수의 서브그래프 시퀀스를 도출하며, 또한상기 프로세서의 유형을 기초로 상기 서브그래프 시퀀스 내에 연속하여 위치한 서로 다른 유닛이 있는 경우 상기 서로 다른 유닛을 병합하여 적어도 하나의 서브그래프를 생성하는 것을 특징으로 하는 단말기에서 스케줄링을 수행하는 방법.공개특허 10-2023-0169755-4-청구항 14 제 13 항에 있어서, 상기 서브그래프 시퀀스 내에 연속하여 위치한 서로 다른 유닛이 동일한 프로세서에서 처리가 가능한 경우 서브그래프로 병합되는 것을 특징으로 하는 단말기에서 스케줄링을 수행하는 방법."}
{"patent_id": "10-2022-0070273", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 10 항 내지 14항 중 어느 한 항의 단말기에서 스케줄링을 수행하는 방법의 프로그램을 구현하기 위한 컴퓨터판독 가능한 기록매체."}
{"patent_id": "10-2022-0070273", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 바람직한 일 실시예에서는 단일 단말기에서 복수의 어플리케이션으로부터 들어오는 요청을 이기종 프 로세서에서 처리할 수 있도록 스케줄링을 수행하고자 한다. 이를 위하여 단말기는 어플리케이션으로부터 들어오 는 요청을 유닛단위로 나누어 서브그래프를 생성하는 분석부, 상기 서브그래프를 수행할 수 있는 적어도 하나의 프로세서의 가용주파수마다 연산수행시간을 예측하는 프로파일링부 및 상기 어플리케이션의 요청 및 상기 연산수 행시간을 기초로 스케줄링을 수행하는 스케줄러를 포함하는 것을 특징으로 한다."}
{"patent_id": "10-2022-0070273", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 이기종 프로세서를 이용하는 단말기에서 여러 개의 심층신경망을 동시에 추론할 때 스케줄링 수행하 는 방법에 관한 것이다."}
{"patent_id": "10-2022-0070273", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "심층신경망(Deep Neural Network, DNN) 모델을 이용한 컴퓨터비전, 자연어처리, 가상현실 등의 인공지능 서비스 시장은 빠른 속도로 성장하고 있다. 그러나, 이기종 프로세서를 이용하는 단말기에서 여러 개의 심층신경망을 동시에 추론할 때 스케줄링을 지원하지 못하는 문제가 있다. 그로 인해 간섭 현상이 발생하며 자원이 경합되는 문제가 있다. 또한 모바일 기기를 이용하여 심층신경망을 추론할 때 초기 단계에 지정해 둔 프로세서만 사용하고, 현재 프로 세서의 점유 여부를 고려하여 연산 요청에 대한 처리를 다른 프로세서로 이동하기 어려운 문제가 있다, 선행기술문헌 특허문헌 (특허문헌 0001) KR 10-2019-0136431"}
{"patent_id": "10-2022-0070273", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 바람직한 일 실시예에서는 단말기에서 다중심층신경망을 추론하기 위해 스케줄링을 수행하는 방법을 제안하고자 한다. 보다 상세히, 단일 단말기에서 복수의 앱에서 들어오는 딥러닝 연산을 이기종 프로세서에서 처리할 수 있도록 스케줄링을 수행하고자 한다. 또한, 이기종 프로세서에서 이용할 수 있는 주파수 정보를 이용 하여 스케줄링을 수행하고자 한다."}
{"patent_id": "10-2022-0070273", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 바람직한 일 실시예에서 스케줄링을 수행하는 단말기는 적어도 하나의 어플리케이션으로부터 수신한 요청(request)을 유닛(unit) 기준으로 파티셔닝하여 적어도 하나의 서브그래프를 생성하는 분석부;상기 적어도 하나의 서브그래프를 수신하고, 수신한 서브그래프를 수행할 수 있는 적어도 하나의 프로세서의 적어도 하나의 주파수마다 연산수행시간을 예측하여 저장하는 프로파일링부;및 상기 적어도 하나의 어플리케이션으로부터 수신 한 요청 및 상기 서브그래프별로 저장된 적어도 하나의 연산수행시간에 기초하여 서브그래프와 프로세서를 선택 하는 스케줄러;를 포함하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서 상기 스케줄러는 적어도 하나의 프로세서 각각의 현재 주파수에 대응하는 연산수행시간을 상기 프로파일링부에 요청하여 수신하고, 상기 현재 주파수에 대응하는 예측된 연산수행시간을 기초로 서브그래프와 프로세서를 선택하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서 상기 스케줄러는 적어도 하나의 어플리케이션 각각으로부터 수신한 요청을 유닛의 형태로 나누어 상기 요청에 포함된 정책을 기초로 상기 요청에 포함된 정책을 지닌 큐에 삽입하는 멀티 레벨큐;및 상기 정책을 지닌 큐 내에 남아있는 유닛에 대하여 상기 남아있는 유닛을 처리하기에 적합한 서브그 래프 및 프로세서를 선택하는 스케줄링정책부;를 포함하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서 상기 멀티레벨큐는 복수의 큐로 구성되고, 복수의 큐 각각은 정책을 지니며, 여러 개의 정책이 있는 경우 기설정된 정책별 우선순위에 따라 정책 및 큐를 선정하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서 스케줄링을 수행하는 단말기는 이기종프로세서를 포함하고, 상기 이기종프 로세서는 CPU, NPU, GPU 중 적어도 두 개를 포함하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서 상기 분석부는 상기 요청을 상기 유닛 기준으로 파티셔닝하여 복수의 유닛 으로 분리하고, 분리된 복수의 유닛 각각을 처리할 수 있는 적어도 하나의 프로세서의 유형을 기초로 복수의 서 브그래프 시퀀스를 도출하며, 또한 상기 프로세서의 유형을 기초로 상기 서브그래프 시퀀스 내에 연속하여 위치 한 서로 다른 유닛을 병합하여 적어도 하나의 서브그래프를 생성하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서, 상기 서브그래프 시퀀스 내에 연속하여 위치한 서로 다른 유닛이 동일한 프 로세서에서 처리가 가능한 경우 병합되는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서, 동일한 유닛 내의 연산은 적어도 하나의 동일한 프로세서에서 처리될 수 있 는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서, 상기 프로파일링부는 상기 서브그래프마다 이용 가능한 적어도 하나의 프로 세서마다 상기 적어도 하나의 프로세서에서 이용할 수 있는 적어도 하나의 주파수 각각에 대해 연산수행시간을 예측하여 저장하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서 단말기에서 스케줄링을 수행하는 방법은 분석부에서 적어도 하나의 어플리케 이션으로부터 수신한 요청(request)을 유닛(unit) 기준으로 파티셔닝하여 적어도 하나의 서브그래프를 생성하는 단계; 상기 분석부에서 프로파일링부로 상기 적어도 하나의 서브그래프를 전송하고, 스케줄러로 상기 요청을 유 닛 기준으로 파티셔닝한 복수의 유닛을 전송하는 단계; 및 상기 스케줄러에서 수신한 상기 복수의 유닛을 상기 요청에 해당하는 정책을 가진 큐에 삽입하고, 상기 큐에 남아 있는(pending) 유닛에 대하여 상기 남아있는 유닛 을 처리하기에 적합한 서브그래프 및 프로세서를 선택하는 스케줄링 단계;를 포함하며, 상기 프로파일링부는 상 기 적어도 하나의 서브그래프마다 이용 가능한 적어도 하나의 프로세서의 적어도 하나의 주파수마다 연산수행시 간을 예측하여 저장하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서, 상기 스케줄러는 적어도 하나의 어플리케이션으로부터 요청을 수신하면, 요 청을 수신한 시점의 적어도 하나의 프로세서 각각의 주파수에 대응하는 연산수행시간을 상기 프로파일링부에 요 청하여 수신하고, 이를 기초로 상기 큐에 남아 있는 유닛에 대하여 상기 남아있는 유닛을 처리하기에 적합한 서 브그래프 및 프로세서를 선택하는 것을 특징으로 한다. 본 발명의 바람직한 일 실시예에서, 상기 스케줄러는 이기종 프로세서 중 유휴 프로세서가 감지되는 경우 상기 서브그래프 및 프로세서를 선택하는 스케줄링을 수행하는 것을 특징으로 한다."}
{"patent_id": "10-2022-0070273", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 바람직한 일 실시예로서, 단말기에서 스케줄링을 수행하는 방법은 여러 개의 어플리케이션에서 들어 오는 심층신경망 연산을 요구하는 요청을 이종 프로세서에서 효율적으로 스케줄링하여 처리하는 효과가 있다. 본 발명의 바람직한 일 실시예에서는 어플리케이션에서 수신한 연산들 중 동일한 프로세서에서 처리할 수 있는 인접 연산들을 유닛 단위로 모아 연산 계획을 수행하고, 유닛들을 다시 동일한 프로세서에서 처리할 수 있는 경 우 이를 병합하여 서브그래프로 생성하는 방법을 통해 불필요한 가속 프로세서의 요청 횟수를 줄이는 효과가 있 다. 본 발명의 바람직한 일 실시예로서, 단말기에서 스케줄링을 수행하는 방법은 다양한 프로세서를 동적으로 사용 가능하게 함으로써, 불필요한 자원 경합으로 발생하는 성능 저하를 피하고 프로세서들의 활용도를 개선하는 효 과가 있다. 본 발명의 바람직한 일 실시예로서, 단말기에서 스케줄링을 수행하는 방법은 프로세서 클럭 주파수를 반영하여 연산수행시간을 예측하고, 실제 스케줄링을 실행할 때 프로세서의 현재 주파수를 고려한 연산수행시간을 활용함 으로써 정확한 스케줄링이 가능한 효과가 있다. 본 발명의 바람직한 일 실시예로서, 단말기에서 스케줄링을 수행하는 방법은 단말기를 이용한 XR(extended reality)응용에서 사용자 주변 현실세계에 대한 실시간 분석 수행 등에 이용될 수 있다."}
{"patent_id": "10-2022-0070273", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하 도면을 참고하여 설명한다. 도 1 은 본 발명의 바람직한 일 실시예로서, 이종프로세서를 이용하여 스케줄링을 수행하는 단말기의 내부 구성 도를 도시한다. 본 발명의 바람직한 일 실시예로서, 단말기는 이기종 프로세서(180, 192, 184, 186)를 포함한다. 이기종 프로세서(180, 192, 184, 186)는 모바일 장치에서 이용되는 어플리케이션 프로세서(Application Processor,A P)일 수 있으며, CPU, GPU, NPU 등을 포함한다. 또한, 단말기는 RAM(Ramdom Access memory), 메모리 통 신부 등을 더 포함할 수 있다. 단말기는 모바일 장치, 스마트폰, 스마트TV, 스마트와치, 노트북, IoT(Internet of Things), 핸드헬드 장치, 웨어러블 장치, 로봇, 드론 등을 포함한다. 도 1 을 참고하면, 단말기는 분석부, 프로파일링부 및 스케줄러를 포함한다. 단말기(10 0)는 단말기에 설치된 복수의 어플리케이션의 요구(request)와 현재 이용중인 프로세서의 점유 상태 및 주 파수를 고려하여 스케줄링을 수행한다. 본 발명의 바람직한 일 실시예에서 단말기는 CPU, GPU, NPU 등과 같은 이종 프로세서를 이용한다. 단말기는 단말기에 설치된 적어도 하나의 어플리케이션(101, 102)에서 이용할 심층신경망 딥러닝모델을 입력받 는다(S110). 그리고, 분석부에서 어플리케이션으로부터 연산 요청을 수신하면(S200), 프로파일링부를 통해 여러 프로세서에서 추후 사용될 수 있는 다양한 연산 계획을 생성하고, 그에 따른 연산수행시간을 예측하 여 저장한다. 스케줄러는 어플리케이션으로부터 수신한 요청 및 프로파일링부에 미리 예측되어 저장 된 서브그래프의 연산수행시간에 기초하여 서브그래프와 프로세서를 선택한다. 각 구성요소에 대해 보다 상세히 살펴본다. 도 2 내지 5를 참고하여 분석부를 설명한다. 도 2 는 4개의 연산(210, 220, 230, 240) 각각을 수행할 수 있는 프로세서와 동일한 프로세서에서 수행할 수 있는 연산의 조합인 유닛을 나타낸다. 도 3 및 4는 도 2 의 복수 개의 유닛(250, 260, 270)으로부터 도출 가능한 서브그래프 시퀀스를 나타낸다. 도 5는 도 4의 서브그래프시퀀스(410~460)를 통해 도출한 서브그래프를 나타낸다. 본 발명의 바람직한 일 실시예에서는 어플리케이션에서 수신한 연산들 중 동일한 프로세서에서 처리할 수 있는 인접 연산들을 유닛 단위로 모아 연산 계획을 수행하고, 유닛들을 다시 동일한 프로세서에서 처리할 수 있는 경 우 이를 병합하여 서브그래프로 생성함으로써 불필요한 가속 프로세서의 요청 횟수를 줄인다. 분석부는 단말기에 설치된 적어도 하나의 어플리케이션(101, 102)으로부터 어플리케이션에서 이용할 심층 신경망 딥러닝모델을 입력받는다(S110). 본 발명의 바람직한 일 실시예에서는, 심층신경망 추론이 필요한 어플 리케이션은 개별적으로 프로세서에 연산 요청을 보내는 것이 아니라, 단말기의 분석부에 특정 심층신경망 딥러닝모델을 초기에 등록한 이후(S110), 연산 요청을 보낸다(S200). 단말기에 설치된 적어도 하나의 어플리케이션은 얼굴 인식 어플리케이션, 얼굴 검출 어플리케이션, 객체 검출 어플리케이션, 핸드 트래킹 어플리케이션 등 다양한 어플리케이션을 포함한다. 예를 들어, 분석부는 제 1 어플리케이션으로부터 얼굴 검출 심층신경망을 입력받고, 제 2 어플리케이션으로부터 객체 검출을 위 한 심층신경망을 입력받을 수 있다. 또한, 제 1 어플리케이션과 제 2 어플리케이션이 동일한 심층신 경망 딥러닝모델을 이용하는 경우, 분석부에서 생성한 서브그래프(S120)를 공유할 수 있다. 본 발명의 바람직한 일 실시예로서, 도 2 및 3를 참고하면, 분석부는 적어도 하나의 어플리케이션(101, 102)으로부터 수신한 요청(request)(S200)을 유닛(unit) 기준으로 파티셔닝하여 복수의 유닛(250, 260, 270)으 로 분리한다. 유닛은 동일한 프로세서에서 수행할 수 있는 연산의 조합을 의미한다. 다시 말해 동일한 유닛 내 의 연산은 하나의 동일한 프로세서에서 처리될 수 있다. 분석부는 분리된 복수의 유닛(250, 260, 270) 각각을 처리할 수 있는 적어도 하나의 프로세서의 유형을 기 초로 도 3과 같은 복수의 서브그래프 시퀀스를 도출한다. 분석부에서 어플리케이션으로부터 수신한 요청(S200)에 포함된 '1연산', '2연산', '3연산' 그리고 '4연산'을 지원하는 프로세서를 다음과 같이 가정한다. '1연산' 및 '2연산'은 CPU, GPU, NPU에서 수행될 수 있다. '3연산'은 CPU 및 NPU에서 수행될 수 있다. 그리고, '4연산'은 CPU에서 수행될 수 있다. 분석부는 수신한 요청(S200)에서 '1연산' 및 '2연산'을 유닛A로, '3연산'을 유닛 B로, 그리고 '4연산'을 유닛C로 파티셔닝할 수 있다. 분석부는 유닛A, 유닛B 및 유닛C 각각을 처리할 수 있는 적어도 하나의 프로세서의 유형을 기초로 도 4 의 일 예와 같이 서브그래프 시퀀스를 생성한다. 분석부는 도 2의 유닛A, 유닛B 및 유닛C로부터 6개의 서브그래프 시퀀스를 도출할 수 있다. 도 4 는 본 발명의 바람직한 일 실시예로서, 6개의 서브그래프 시퀀스(410~460)를 나타낸다. 제1 서브그래프 시퀀스는 유닛A, 유닛B 및 유닛C를 모두 CPU에서 처리한다. 제2 서브그래 프 시퀀스는 유닛A는 CPU, 유닛B는 NPU, 그리고 유닛C는 CPU에서 처리한다. 제3 서브그래 프 시퀀스는 유닛A는 GPU, 유닛B와 유닛C는 CPU에서 처리한다. 제4 서브그래프 시퀀스 는 유닛A는 GPU, 유닛B는 NPU, 그리고 유닛C는 CPU에서 처리한다. 제5 서브그래프 시퀀스 는 유닛A는 NPU, 유닛B와 유닛C는 CPU에서 처리한다. 제6 서브그래프 시퀀스는 유닛 A와 유닛B는 NPU, 그리고 유닛C는 CPU에서 처리한다. 그리고, 분석부는 서브그래프 시퀀스 내에 연속하여 위치한 서로 다른 유닛을 병합할 수 있다 (410a~410c, 430a, 450a, 460a). 이 경우 분석부는 단순히 인접하여 위치한 서로 다른 유닛을 동일한 프 로세서에서 수행할 수 있는가 여부만을 판단하여 병합을 수행한다. 분석부에서 서브그래프 시퀀스 내의 유닛들을 기초로 서브그래프를 생성하는 일 예를 도 4 및 5를 참고하 여 설명한다. 본 발명의 바람직한 일 실시예에서, 서브그래프는 하나의 동일한 프로세서에서 수행이 가능한 하나의 유닛 또는 연속으로 위치하여 병합이 가능한 유닛의 집합을 나타낸다. 분석부는 제 1 서브그래프 시퀀스에서 제3서브그래프, 제5서브그래프, 그리고 제6서브그래 프를 생성할 수 있다. 상세히, 분석부는 제1 서브그래프 시퀀스에서 CPU, GPU 및 NPU에 의해 처리가 가능한 유닛A, CPU 및 NPU에 의해 처리가 가능한 유닛B, 그리고 CPU에서 처리가 가능한 유닛C를 모두 CPU에서 수행가능하다고 판단하여 병합(410a)하여 제6서브그래프를 생성할 수 있다. 또한, 분석부는 제1 서브그래프 시퀀스에서 CPU, GPU 및 NPU에 의해 처리가 가능한 유닛A, 그리고 CPU 및 NPU에 의해 처리가 가능한 유닛B을 CPU에서 함께 수행할 수 있다고 판단하여 병합(410b)하여 제3서브그 래프를 생성할 수 있다. 또한, 분석부는 제1 서브그래프 시퀀스에서 CPU 및 NPU에 의해 처리가 가능한 유닛B, 그리고 CPU에서 처리가 가능한 유닛C만을 CPU에서 함께 수행할 수 있다고 판단하여 병 합하여 제5서브그래프를 생성할 수 있다. 분석부는 제 2 서브그래프 시퀀스에서 제1서브그래프, 제2서브그래프, 그리고 제4서브그래 프를 생성할 수 있다. 상세히, 유닛A에 대하여 제1서브그래프를, 유닛B에 대하여 제2서브 그래프를, 그리고 유닛C에 대하여 제4서브그래프를 생성할 수 있다. 분석부는 제3 서브그래프 시퀀스에서 제1서브그래프, 제2서브그래프,제4서브그래프, 그리고 제5서브그래프를 생성할 수 있다. 분석부는 제 4 서브그래프 시퀀스 내지 제 6 서브그 래프 시퀀스에 대해서도 마찬가지 방법으로 서브그래프를 생성할 수 있다. 도 5 는 도 4의 서브그래프시퀀 스(410~460)로부터 생성된 서브그래프(510~560)의 일 예를 도시한다. 도 8을 참고하여 프로파일링부를 설명한다. 본 발명의 바람직한 일 실시예에서 프로파일링부는 분석부에서 생성한 서브그래프를 기초로 프로세서 별로 또는 서브그래프별로 연산수행시간을 예측하여 저장한다. 프로파일링부는 도 5에 도시된 6가지 서브그래프(510~560)를 모두 수신하여, 각각의 서브그래프마다 서브 그래프를 수행할 수 있는 적어도 하나의 프로세서 각각에 대해 연산수행시간을 예측하여 저장한다. 이 경우, 각 프로세서별로 이용할 수 있는 가용프리퀀시 모두에 대해 연산수행시간을 예측하여 저장한다. 도 8에는 도 5 에 도시된 6가지 서브그래프(510~560) 중 일부만이 표시되어 있음에 유의한다. 예를 들어, 프로파일링부는 적어도 하나의 프로세서(830, 840)마다 사용가능한 주파수가 복수 개인 경우, 복수개의 주파수 각각에서 서브그래프의 연산수행시간을 예측하여 저장한다. 도 8을 참고하면, 제 3서브그래프는 NPU 또는 CPU 프로세서에서 수행될 수 있다. 이 경우 프로 파일링부는 NPU에서 이용할 수 있는 복수의 주파수 각각에서 제 3서브그래프를 처리할 때 소요 되는 연산수행시간(832, 834)과 CPU에서 이용할 수 있는 복수의 주파수 각각에서 제 3서브그래프를 처리할 때 소요되는 연산수행시간(842, 844, 846)을 각각 예측하여 저장한다. 프로파일링부는 또한 서브그래프별로 서브그래프를 처리할 프로세서의 특정 주파수에서 연산수행시간을 예 측하여 저장할 수 있다. 도 8을 참고하면, 프로파일링부는 제 3서브그래프에 대해 제 3서브그래프를 처리할 NPU와 CPU프로세서의 가용주파수에서 연산수행시간을 예측하여 저장할 수 있다. 또한, 제 6서브그래프에 대해 제 6서브그래프를 처리할 CPU프로세서의 가용주파수에서 연산수행시간을 예측하여 저장할 수 있 다. CPU 프로세서에서 사용가능한 주파수가 2.42GHz, 1.92GHz, 그리고 1.40GHz인 경우의 예를 살펴본다. 프로 파일링부는 CPU 프로세서의 2.42GHz에서 서브그래프 연산수행시간은 15.33ms, 1.92GHz에 서 서브그래프의 연산수행시간은 19.28ms, 그리고 1.40GHz에서 서브그래프의 연산수행시간은 26.07ms로 예측하여 저장한다. 본 발명의 바람직한 일 실시예로서, 스케줄러는 적어도 하나의 어플리케이션으로부터 수신한 요청 및 프로 파일링부에 서브그래프별로 저장된 적어도 하나의 연산수행시간에 기초하여 서브그래프와 프로세서를 선택한다. 도 7 을 참고하면, 스케줄러는 멀티레벨큐 및 스케줄링정책부를 포함한다. 멀티레벨큐는 다양한 어플리케이션의 요청을 만족하기 위한 여러 개의 큐를 포함한다. 각각의 큐는 기 설 정된 정책이 할당되어 있다. 또한 멀티레벨큐에 포함된 복수의 큐 각각에 할당된 정책간의 우선순위는 사 전에 정의되어 있다. 스케줄러는 멀티레벨큐에서 분석부에서 적어도 하나의 어플리케이션 각각으로부터 수신한 요청 을 유닛의 형태로 나눈 유닛들을 수신한다. 멀티레벨큐는 수신한 요청의 정책에 대응하는 정책을 지닌 큐에 수신한 요청을 파티셔닝한 유닛들을 삽입한다. 예를 들어, 제 1 어플리케이션에서 레이턴시(Latency) 기한이 있는 요청을 수신하고, 제 2 어플리케이션에서 최 대한 빨리 수행하여야 하는 베스트에포트(best-effort) 요청을 수신한 경우를 가정한다. 단말기의 제어부에서는 레이턴시(Latency) 기한 정책과 베스트에포트 정책 간의 우선순위를 미리 부여해놓는다. 예를 들어, 제어부에서 는 레이턴시(Latency) 기한 정책을 1순위 우선순위로 정하고, 베스트에포트 정책을 2순위 우선순위로 미리 순서 를 부여해놓을 수 있다. 이 경우, 멀티-레벨 큐는 제 1 큐에 제 1 어플리케이션의 요청을 할당하고, 제 2 큐에 제 2 어플리케이션 의 요청을 할당한다. 제 1 큐는 레이턴시 정책을 지니고, 제 2 큐는 베스트에포트 정책을 지니는 것으로 사전에 설정한 것으로 가정한다. 스케줄링정책부는 기설정된 정책별 우선순위에 따라 멀티-레벨큐의 큐를 순차적으로 순회하며 큐 내 에 남아있는 유닛을 처리하기에 적합한 서브그래프 및 프로세서를 선택한다. 도 6 내지 8을 참고하여 스케줄러의 기능을 설명한다. 도 6 및 10은 본 발명의 바람직한 일 실시예로서, 모든 프로세서를 사용가능한 경우 스케줄러에서 서브그 래프를 선택하는 일 예를 도시한다. 도 7은 본 발명의 바람직한 일 실시예로서, 스케줄러의 동작 방법의 일 예를 도시한다. 도 8은 본 발명의 바람직한 일 실시예로서, 프로파일링부와 스케줄러 간에 연산수 행시간을 송수신하는 일 예를 도시한다. 도 6 은 분석부에서 제 1 어플리케이션으로부터 제 1 요청을 수신하고, 제 2 어플리케이션으로부터 제 2 요청을 수신한 경우를 도시한다. 제 1 요청은 유닛A, 유닛B 및 유닛C(611,613,615)의 복수의 유닛으로 파티셔닝 된다. 제 2 요청은 유 닛D, 유닛E 및 유닛F의 복수의 유닛으로 파티셔닝되고, 유닛D는 이미 수행이 완료되었다고 가정한다. 그리고, 제 1 요청 및 제 2 요청은 레이턴시(Latency) 기한 정책이 있는 요청이라고 가정한다. 스케줄러는 멀티레벨큐를 통해 제 1 요청의 정책에 대응하는 큐에 유닛A, 유닛B 및 유닛 C(611,613,615)를 삽입한다. 또한, 제 2 요청의 정책에 대응하는 큐에 유닛D, 유닛E 및 유닛 F(621,623,625)를 삽입한다. 이 때, 멀티레벨큐는 제 1 요청과 제 2 요청을 레이턴시 기한을 정책으로 지닌 큐에 각각 삽입한다. 제 1 요청과 제 2 요청이 동일한 정책을 지닌 경우, 멀티레벨큐 는 동일한 큐에 제 1 요청과 제 2 요청을 삽입한다. 스케줄링정책부는 레이턴시 기한 정책을 기준으로 큐 내에 계류중인(pending) 유닛을 처리하기에 적합한 서브그래프 및 프로세서를 선택한다. 상세히, 스케줄링정책부는 단말기에서 이용하는 적어도 하나의 프로 세서들(도 1, 180, 182, 184, 186)로부터 현재 주파수 정보를 입력받은 후, 프로파일링부에 프로세서들로 부터 입력받은 현재주파수 정보를 전송하고, 제 1 요청과 제 2요청을 구성하는 복수의 유닛들을 기초 로 생성된 서브그래프에 대한 연산수행시간을 요청한다(S300). 예를 들어, 도 6 및 10을 참고하여, 스케줄링정책부는 제 1 요청을 유닛A, 유닛B(611,613)로 구성된 서브그래프와 유닛C로 구성된 서브그래프으로 처리할 경우, 각 서브그래프(530, 540)를 구행할 수 있는 적어도 하나의 프로세서의 가용주파수들 중 현재 주파수에 대응하는 연산수행시간을 요청한다. 도 8의 일 실시예에서, 프로파일링부는 상기 연산수행시간 요청을 수신하여(S300), 유닛A, 유닛B(611,61 3)로 구성된 서브그래프를 수행할 수 있는 NPU 프로세서의 가용주파수 각각의 연산수행시간(832,834) 중 NPU의 현재주파수 585MHz에 대응하는 연산수행시간 4.33ms과 유닛 C로 구성된 서브그래프 를 수행할 수 있는 CPU 프로세서의 가용주파수 중 CPU의 현재주파수 2.42GHz에 대응하는 연산 수행시간 5.67ms를 송신한다(S310). 그리고, 도 6 및 10의 일 실시예를 더 참고하면, 스케줄링정책부는 제 1 요청을 유닛A, 유닛 B(611,613)로 구성된 서브그래프와 유닛C로 구성된 서브그래프으로 처리할 경우, 유닛A 및 유닛 B(611,613)로 구성된 서브그래프를 NPU에서 처리할 경우의 연산수행시간 4.33ms와 유닛C로 구성 된 서브그래프를 CPU에서 처리할 경우의 연산수행시간 5.67ms의 합인 10ms로 예측한다(S600). 스케줄링정책부는 제 1 요청과 제 2 요청을 각각 구성하는 복수의 유닛들을 기초로 생성할 수 있는 서브그래프 각각에 대해 위의 작업을 수행하여 도 6 및 10의 일 실시예와 같이 제 1 요청과 제 2 요청에 대해 생성된 12가지의 서브그래프들에 대해 예측된 연산수행시간 정보가 포함된 연산수행시간 테이블 을 획득한다. 그리고, 스케줄링정책부는 제 1 요청과 제 2 요청의 정책 및 연산수행시간 테이블을 기초로 서브그래프 및 프로세서를 선택한다. 도 6 및 10 을 참고하면, 제 1 요청과 제 2 요청을 수신했을 때 스케줄링정책부는 제 1 요청 및 제 2 요청의 레이턴시(Latency) 기한 정책과 연산수행시간 정보 테이블을 기초로, 제 1 요 청에서 유닛A, 유닛B(611,613)로 구성된 서브그래프와 NPU 프로세서 선택한다. NPU 프로 세서에서 서브그래프를 수행하면, 스케줄링정책부는 제 1 요청 중 처리되지 않은 유닛C를 멀티레벨큐 내의 제 1 요청에 해당하는 정책에 대응되는 큐에 삽입한 후, 다시 스케줄링을 수행한다. 도 6 의 실시예에서 제 1 요청에 해당하는 정책은 레이턴시 기한 정책이다. 도 6 및 10의 실시예의 경우, 스케줄링정책부는 레이턴시 기한 정책에 따라 제 1 요청에서 남아 있는 제한시간 80ms과 제 2 요청에서 남아 있는 시간 100ms에서 연산수행시간을 뺀 시간(slack time)이 가장 작은 서브그래프 및 프로세서(S600)을 선택한다. 도 7은 본 발명의 바람직한 일 실시예에서, 스케줄링정책부의 기능을 수행하는 GetNextJob()에서 큐에 삽 입된 유닛A, 유닛B 및 유닛C(611,613,615) 및 유닛D, 유닛E 및 유닛F(621,623,625) 중 유닛A, 유닛B(611,613) 로 구성된 서브그래프를 선택한 경우의 일 예를 도시한다. 도 9 는 본 발명의 바람직한 일 실시예로서, 단말기에서 스케줄링을 수행하는 방법을 도시한다. 도 1을 더 참 고하여 설명한다. 분석부는 적어도 하나의 어플리케이션(101, 102)으로부터 수신한 요청(S200)을 유닛(unit) 기준으로 파티 셔닝하여 적어도 하나의 서브그래프(S120)를 생성한다(S910). 분석부는 프로파일링부로 적어도 하나의 서브그래프(S120)를 전송하고, 스케줄러로 요청(S200) 을 유닛 기준으로 파티셔닝한 복수의 유닛(S122)을 전송한다(S920). 스케줄러는 수신한 복수의 유닛(S122)을 요청(S200)에 해당하는 정책을 가진 큐에 삽입한다. 스케줄러는 큐에 남아 있는(pending) 유닛에 대하여 요청(S200)에 대응하는 정책과, 프로파일링부에서 서브그래프마다 예측하여 기저장된 연산수행시간(S310)을 기초로 큐에 남아있는 유닛을 수행할 서브그래프 및 프로세서를 선택 하여 스케줄링을 수행한다(S930). 이 경우, 스케줄러는 적어도 하나의 프로세서(180, 182, 184, 186)에서 수신 한 프로세서 각각의 현재 주파수(S400)를 참고하여 스케줄링을 수행한다. 본 발명의 실시예에 따른 방법의 동작은 컴퓨터로 읽을 수 있는 기록매체에 컴퓨터가 읽을 수 있는 프로그램 또 는 코드로서 구현하는 것이 가능하다. 컴퓨터가 읽을 수 있는 기록매체는 컴퓨터 시스템에 의해 읽혀질 수 있는 정보가 저장되는 모든 종류의 기록장치를 포함한다. 또한 컴퓨터가 읽을 수 있는 기록매체는 네트워크로 연결된 컴퓨터 시스템에 분산되어 분산 방식으로 컴퓨터로 읽을 수 있는 프로그램 또는 코드가 저장되고 실행될 수 있 다. 또한, 컴퓨터가 읽을 수 있는 기록매체는 롬(rom), 램(ram), 플래시 메모리(flash memory) 등과 같이 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치를 포함할 수 있다. 본 발명에 개시된 자유도변환방법 단계들의 일부 또는 전부는 예를 들어, 마이크로프로세서, 프로그램 가능한 컴퓨터 또는 전자 회로와 같은 하드 웨어 장치에 의해(또는 이용하여) 수행될 수 있다."}
{"patent_id": "10-2022-0070273", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "이상에서 대표적인 실시예를 통하여 본 발명에 대하여 상세하게 설명하였으나, 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자는 전술한 실시예에 대하여 본 발명의 범주에서 벗어나지 않는 한도 내에서 다양한 변형 이 가능함을 이해할 것이다. 그러므로 본 발명의 권리범위는 설명된 실시예에 국한되어 정해져서는 안 되며, 후 술하는 특허청구범위뿐만 아니라 이 특허청구범위와 균등한 것들에 의해 정해져야 한다. 도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10"}
{"patent_id": "10-2022-0070273", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1 은 본 발명의 바람직한 일 실시예로서, 이종프로세서를 이용하여 스케줄링을 수행하는 단말기의 내부 구성 도를 도시한다. 도 2 는 본 발명의 바람직한 일 실시예로서, 분석부에서 수신한 요청을 유닛으로 파티셔닝하는 일 예를 도시한 다. 도 3 및 4는 본 발명의 바람직한 일 실시예로서, 도 2 의 복수 개의 유닛으로부터 도출 가능한 서브그래프 시퀀 스를 나타낸다. 도 5는 본 발명의 바람직한 일 실시예로서, 도 4의 서브그래프 시퀀스를 통해 도출한 서브그래프를 나타낸다. 도 6 및 10은 본 발명의 바람직한 일 실시예로서, 스케줄러에서 서브그래프와 프로세서를 선택하는 일 예를 도 시한다. 도 7 은 본 발명의 바람직한 일 실시예로서, 스케줄러의 동작 방법의 일 예를 도시한다. 도 8 은 본 발명의 바람직한 일 실시예로서, 프로파일링부와 스케줄러 간에 연산수행시간을 송수신하는 일 예를 도시한다. 도 9 는 본 발명의 바람직한 일 실시예로서, 단말기에서 이종프로세서를 이용하여 스케줄링을 수행하는 흐름도 를 도시한다."}
