{"patent_id": "10-2023-0136835", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0053498", "출원번호": "10-2023-0136835", "발명의 명칭": "다양한 머신러닝 하드웨어 구성을 위한 효율적이고 확장 가능한 MLOps SW 프레임워크 및 이를", "출원인": "한국전자기술연구원", "발명자": "전석훈"}}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "사용자 설정 파일을 파싱하여, 사용자 설정 파일에 기술된 머신러닝 모델에 대한 정보를 확인하는 단계;선택 가능한 다수의 프레임워크들 중 확인단계를 통해 확인된 머신러닝 모델의 프레임워크를 선택하는 단계;선택한 프레임워크에 맞는 머신러닝 모델 템플릿을 이용하여 사용자 설정 파일에 기술된 머신러닝 모델을 생성하는 단계;머신러닝 모델의 옵티마이저와 손실함수를 생성하는 단계;머신러닝 모델을 학습시키는 단계;학습이 완료된 머신러닝 모델을 반환하는 단계;를 포함하는 것을 특징으로 하는 머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서,선택가능한 다수의 프레임워크들은,확장, 변경 및 삭제가 가능한 것을 특징으로 하는 머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 1에 있어서,반환 단계는,프로파일링 정보를 함께 반환하는 것을 특징으로 하는 머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 3에 있어서,프로파일링 정보는,머신러닝 모델의 성능, 속도 및 메모리 사용 정보를 포함하는 것을 특징으로 하는 머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 3에 있어서,머신러닝 모델의 성능 프로파일링을 위한 콜백 함수를 설정하는 단계;를 더 포함하는 것을 특징으로 하는 머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 1에 있어서,사용자 설정 파일을 파싱하여, 사용자 설정 파일에 기술된 머신러닝 모델이 배포될 디바이스에 대한 정보를 확공개특허 10-2025-0053498-3-인하는 단계;선택 가능한 다수의 디바이스 정보들 중 확인단계를 통해 확인된 디바이스 정보를 선택하는 단계;선택된 디바이스 정보를 참조하여, 학습된 머신러닝 모델에 대해 레이어 통합을 수행하는 단계;선택된 디바이스 정보를 참조하여, 레이어 통합된 머신러닝 모델의 파라미터에 대해 양자화를 수행하는 단계;선택된 디바이스 정보를 참조하여, 최적화된 머신러닝 모델을 재생성하는 단계;재생성된 머신러닝 모델의 성능 프로파일링을 수행하는 단계;최적화된 머신러닝 모델을 반환하는 단계;를 더 포함하는 것을 특징으로 하는 머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 6에 있어서,선택 가능한 디바이스 정보들은,확장, 변경 및 삭제가 가능한 것을 특징으로 하는 머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 5에 있어서.사용자 설정 파일을 파싱하여, 사용자 설정 파일에 기술된 머신러닝 모델이 배포될 디바이스에 대한 정보를 확인하는 단계;사용자 설정 파일을 통해 확인된 디바이스 정보를 선택하는 단계;선택된 디바이스 정보를 참조하여, 머신러닝 모델의 파라미터를 디바이스에 오프로딩하는 단계;선택된 디바이스 정보를 참조하여, 머신러닝 모델의 테스트 데이터들을 디바이스에 세팅하는 단계;테스트 데이터들로 머신러닝 모델을 테스트하는 단계;테스트가 완료된 머신러닝 모델 객체를 반환하는 단계;를 더 포함하는 것을 특징으로 하는 머신러닝 모델 개발방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 8에 있어서,반환 단계는,프로파일링 정보를 함께 반환하는 것을 특징으로 하는 머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "사용자 설정 파일을 파싱하여 사용자 설정 파일에 기술된 머신러닝 모델에 대한 정보를 확인하고, 선택 가능한다수의 프레임워크들 중 확인단계를 통해 확인된 머신러닝 모델의 프레임워크를 선택하며, 선택한 프레임워크에맞는 머신러닝 모델 템플릿을 이용하여 사용자 설정 파일에 기술된 머신러닝 모델을 생성하고, 머신러닝 모델의옵티마이저와 손실함수를 생성하며, 머신러닝 모델을 학습시키고, 학습이 완료된 머신러닝 모델을 반환하는 프로세서; 및프로세서에 필요한 저장 공간을 제공하는 저장부;를 포함하는 것을 특징으로 하는 머신러닝 모델 개발 시스템.공개특허 10-2025-0053498-4-청구항 11 머신러닝 모델에 대한 정보 및 머신러닝 모델이 배포될 디바이스에 대한 정보가 기술된 사용자 설정 파일을 생성하는 단계;생성된 사용자 설정 파일을 기초로, 개발된 머신러닝 모델을 학습시키는 단계;생성된 사용자 설정 파일을 기초로, 학습된 머신러닝 모델을 최적화하는 단계;생성된 사용자 설정 파일을 기초로, 최적화된 머신러닝 모델을 배포하는 단계;를 포함하는 것을 특징으로 하는머신러닝 모델 개발 방법."}
{"patent_id": "10-2023-0136835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "머신러닝 모델에 대한 정보 및 머신러닝 모델이 배포될 디바이스에 대한 정보가 기술된 사용자 설정 파일을 생성하고, 생성된 사용자 설정 파일을 기초로, 개발된 머신러닝 모델을 학습시키며, 학습된 머신러닝 모델을 최적화하고, 최적화된 머신러닝 모델을 배포하는 프로세서; 및프로세서에 필요한 저장 공간을 제공하는 저장부;를 포함하는 것을 특징으로 하는 머신러닝 모델 개발 시스템."}
{"patent_id": "10-2023-0136835", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 머신러닝 하드웨어 구성을 위한 효율적이고 확장 가능한 MLOps SW 프레임워크 및 이를 활용한 머신러닝 학습, 최적화 및 배포 방법이 제공된다. 본 발명의 실시예에 따른 머신러닝 모델 개발 방법은, 머신러닝 모델에 대한 정보 및 머신러닝 모델이 배포될 디바이스에 대한 정보가 기술된 사용자 설정 파일을 기초로, 개발된 머신 러닝 모델을 학습시키며, 학습된 머신러닝 모델을 최적화하고, 최적화된 머신러닝 모델을 배포한다. 이에 의해, 머신러닝 모델의 프레임워크, 구조 등에 대해 확장성을 지원하여 보다 다양한 머신러닝 모델들의 개발이 가능하 고, YAML 파일과 같은 사용자 설정 파일을 통해 텍스트 기반으로 머신러닝 모델의 학습, 최적화, 배포와 관련한 설정이 간편해지며, 머신러닝 모델의 학습, 최적화 및 배포 과정에서 성능 프로파일링 정보가 제공되므로, 머신 러닝 모델 개발 과정에서 성능 비교 및 지속적 성능 향상에 활용할 수 있게 된다."}
{"patent_id": "10-2023-0136835", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 MLOps(Machine Learning Operations)에 관한 것으로, 더욱 상세하게는 다양한 머신러닝 모델에 대해 학습, 최적화 및 배포를 수행하면서 개발할 수 있는 환경을 지원하는 기술에 관한 것이다."}
{"patent_id": "10-2023-0136835", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능의 발전과 함께 다양한 인공지능 응용 어플리케이션이 개발되고 있고, 이를 고속, 저전력, 효율적으로 실행시킬 수 있는 뉴로모픽 혹은 인공지능 AI 하드웨어도 개발되고 있지만, 범용적인 인공지능 하드웨어의 응용 을 위한 HW-SW 플랫폼 연동 기술은 아직 미진한 발전단계로 하드웨어의 지속적인 성능 향상 및 개선 그리고 새 로운 어플리케이션의 적용 등이 어렵다는 단점이 있다. 또한 다양한 인공지능 SW 프레임워크 그리고 다양한 인공지능 가속 HW 등도 존재하지만, 프레임워크에서 지원하 는 제한된 범위 내에서만 개발이 가능할 뿐이다. 또한 기존 인공지능 SW 프레임워크에서 개발된 모델을 인공지 능 응용 어플리케이션에 적용하기 위해서는 이를 인공지능 가속 HW에 맞추어 효과적으로 변경하는 추가적인 작 업 시간이 필요하다는 단점이 있다."}
{"patent_id": "10-2023-0136835", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 상기와 같은 문제점을 해결하기 위하여 안출된 것으로서, 본 발명의 목적은, 다양한 머신러닝 모델에 대해 다양하고 확장가능한 환경 설정을 통해 학습, 최적화, 배포를 수행함과 동시에 성능 프로파일링이 가능한 MLOps SW 프레임워크, 이를 활용한 머신러닝 개발 방법을 제공함에 있다."}
{"patent_id": "10-2023-0136835", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 목적을 달성하기 위한 본 발명의 일 실시예에 따른 머신러닝 모델 개발 방법은, 사용자 설정 파일을 파싱 하여, 사용자 설정 파일에 기술된 머신러닝 모델에 대한 정보를 확인하는 단계; 선택 가능한 다수의 프레임워크들 중 확인단계를 통해 확인된 머신러닝 모델의 프레임워크를 선택하는 단계; 선택한 프레임워크에 맞는 머신러 닝 모델 템플릿을 이용하여 사용자 설정 파일에 기술된 머신러닝 모델을 생성하는 단계; 머신러닝 모델의 옵티 마이저와 손실함수를 생성하는 단계; 머신러닝 모델을 학습시키는 단계; 학습이 완료된 머신러닝 모델을 반환하 는 단계;를 포함한다. 선택가능한 다수의 프레임워크들은, 확장, 변경 및 삭제가 가능할 수 있다. 반환 단계는, 프로파일링 정보를 함 께 반환할 수 있다. 프로파일링 정보는, 머신러닝 모델의 성능, 속도 및 메모리 사용 정보를 포함할 수 있다. 본 발명의 실시예에 따른 머신러닝 모델 개발 방법은, 머신러닝 모델의 성능 프로파일링을 위한 콜백 함수를 설 정하는 단계;를 더 포함할 수 있다. 본 발명의 실시예에 따른 머신러닝 모델 개발 방법은, 사용자 설정 파일을 파싱하여, 사용자 설정 파일에 기술 된 머신러닝 모델이 배포될 디바이스에 대한 정보를 확인하는 단계; 선택 가능한 다수의 디바이스 정보들 중 확 인단계를 통해 확인된 디바이스 정보를 선택하는 단계; 선택된 디바이스 정보를 참조하여, 학습된 머신러닝 모 델에 대해 레이어 통합을 수행하는 단계; 선택된 디바이스 정보를 참조하여, 레이어 통합된 머신러닝 모델의 파 라미터에 대해 양자화를 수행하는 단계; 선택된 디바이스 정보를 참조하여, 최적화된 머신러닝 모델을 재생성하 는 단계; 재생성된 머신러닝 모델의 성능 프로파일링을 수행하는 단계; 최적화된 머신러닝 모델을 반환하는 단 계;를 더 포함할 수 있다. 선택 가능한 디바이스 정보들은, 확장, 변경 및 삭제가 가능할 수 있다. 본 발명의 실시예에 따른 머신러닝 모델 개발 방법은, 사용자 설정 파일을 파싱하여, 사용자 설정 파일에 기술 된 머신러닝 모델이 배포될 디바이스에 대한 정보를 확인하는 단계; 사용자 설정 파일을 통해 확인된 디바이스 정보를 선택하는 단계; 선택된 디바이스 정보를 참조하여, 머신러닝 모델의 파라미터를 디바이스에 오프로딩하 는 단계; 선택된 디바이스 정보를 참조하여, 머신러닝 모델의 테스트 데이터들을 디바이스에 세팅하는 단계; 테 스트 데이터들로 머신러닝 모델을 테스트하는 단계; 테스트가 완료된 머신러닝 모델 객체를 반환하는 단계;를 더 포함할 수 있다. 반환 단계는, 프로파일링 정보를 함께 반환할 수 있다. 본 발명의 다른 실시예에 따른 머신러닝 모델 개발 시스템은, 사용자 설정 파일을 파싱하여 사용자 설정 파일에 기술된 머신러닝 모델에 대한 정보를 확인하고, 선택 가능한 다수의 프레임워크들 중 확인단계를 통해 확인된 머신러닝 모델의 프레임워크를 선택하며, 선택한 프레임워크에 맞는 머신러닝 모델 템플릿을 이용하여 사용자 설정 파일에 기술된 머신러닝 모델을 생성하고, 머신러닝 모델의 옵티마이저와 손실함수를 생성하며, 머신러닝 모델을 학습시키고, 학습이 완료된 머신러닝 모델을 반환하는 프로세서; 및 프로세서에 필요한 저장 공간을 제 공하는 저장부;를 포함한다. 본 발명의 다른 실시예에 따른 머신러닝 모델 개발 방법은, 머신러닝 모델에 대한 정보 및 머신러닝 모델이 배 포될 디바이스에 대한 정보가 기술된 사용자 설정 파일을 생성하는 단계; 생성된 사용자 설정 파일을 기초로, 개발된 머신러닝 모델을 학습시키는 단계; 생성된 사용자 설정 파일을 기초로, 학습된 머신러닝 모델을 최적화 하는 단계; 생성된 사용자 설정 파일을 기초로, 최적화된 머신러닝 모델을 배포하는 단계;를 포함한다. 본 발명의 또 다른 실시예에 따른 머신러닝 모델 개발 시스템은, 머신러닝 모델에 대한 정보 및 머신러닝 모델 이 배포될 디바이스에 대한 정보가 기술된 사용자 설정 파일을 생성하고, 생성된 사용자 설정 파일을 기초로, 개발된 머신러닝 모델을 학습시키며, 학습된 머신러닝 모델을 최적화하고, 최적화된 머신러닝 모델을 배포하는 프로세서; 및 프로세서에 필요한 저장 공간을 제공하는 저장부;를 포함한다."}
{"patent_id": "10-2023-0136835", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "이상 설명한 바와 같이, 본 발명의 실시예들에 따르면, 머신러닝 모델의 프레임워크, 구조 등에 대해 확장성을 지원하여 보다 다양한 머신러닝 모델들의 개발이 가능하다. 또한 본 발명의 실시예들에 따르면, YAML 파일과 같은 사용자 설정 파일을 통해 텍스트 기반으로 머신러닝 모델 의 학습, 최적화, 배포와 관련한 설정이 간편해진다. 뿐만 아니라 본 발명의 실시예들에 따르면, 머신러닝 모델의 학습, 최적화 및 배포 과정에서 성능 프로파일링 정보가 제공되므로, 머신러닝 모델 개발 과정에서 성능 비교 및 지속적 성능 향상에 활용할 수 있게 된다."}
{"patent_id": "10-2023-0136835", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 도면을 참조하여 본 발명을 보다 상세하게 설명한다. 본 발명의 실시예에서는 다양한 머신러닝 하드웨어 구성을 위한 효율적이고 확장 가능한 MLOps SW 프레임워크 및 이를 활용한 머신러닝 학습, 최적화 및 배포 방법을 제시한다. 머신러닝 모델을 학습, 최적화 및 배포하는 과정에서 머신러닝 모델의 다양성과 개발 환경의 확장성을 지원하고, 개발자 관점에서 개발의 편의성을 도모하며, 성능 프로파일링을 통한 개발의 효율성과 성능 향상의 지속성까지 보장하여 주기 위한 기술이다. 도 1은 본 발명의 실시예가 적용가능한 머신러닝 모델 개발을 위한 MLOps SW 프레임워크의 구조를 도시한 도면 이다. 본 발명의 실시예가 적용가능한 MLOps SW 프레임워크는 HW 툴킷, YAML 파일, 프로파일, 학습(train) 메서드, 최적화(optimization) 메서드 및 배포(deploy) 메서드을 관리하고 컨트롤 한다. HW 툴킷은 머신러닝 모델을 실제 하드웨어에 배포함에 있어 필요한 정보와 방법이 기술된 함수들의 집합이 다. YAML 파일은 MLOps SW 프레임워크의 학습, 최적화 및 배포에 필요한 정보가 텍스트로 기술되는 사용자 설정 파일로, 사용자 설정에 따라 생성된다. 프로파일은 학습, 최적화 및 배포 시에서 확인되는 머신러닝 모델의 성능 정보를 저장하는 저장소이다. 학습 메서드는 개발된 머신 러닝 모델의 학습을 위한 메서드이고, 최적화 메서드는 학습된 머신 러닝 모델의 최적화를 위한 메서드이며, 배포 메서드는 최적화된 머신 러닝 모델의 배포를 위한 메서드이다. 이하에서 메서드들(140,150,160)의 기능에 대해, 도 2 내지 도 4를 참조하여 하나 씩 상세히 설명한다. 도 2는 본 발명의 일 실시예에 따른 학습 메서드에 의한 머신러닝 모델 학습 방법의 설명에 제공되는 흐름 도이다. 학습은 개발된 머신러닝 모델을 생성하고, 파라미터를 학습시키며, 학습과정에서 성능 프로파일링을 수 행하는 과정이다. 머신러닝 모델 학습을 위해, 도시된 바와 같이 먼저 YAML 파일을 파싱하여, YAML 파일에 기술되어 있는 머신러 닝 모델에 대한 정보를 확인한다(S210). 확인하는 머신러닝 모델에 대한 정보에 대한 정보에는 프레임워크, 머 신러닝 구조 및 파라미터, 옵티마이저, 손실함수 등이 포함된다. 다음 선택 가능한 다수의 프레임워크들 중 S210단계에서 확인된 머신러닝 모델의 프레임워크를 선택한다(S220). 이를 테면, 선택가능한 프레임워크로 텐서플로, 케라스, 파이토치가 있는데 YAML 파일에서 프레임워크를 케라스 로 기술하고 있다면, S220단계에서는 케라스가 선택되는 것이다. 선택가능한 프레임워크는 제시된 것들 이외에 추가 확장이나 변경 및 삭제가 가능하다. 이후 S220단계에서 선택한 프레임워크에 맞는 머신러닝 모델 템플릿을 이용하여, 머신러닝 모델 세트에 YAML 파 일에 기술된 구조와 파라미터를 갖는 머신러닝 모델을 생성(build) 한다(S230). 다음 S210단계에서 확인된 정보를 기초로, S230단계에서 생성된 머신러닝 모델의 옵티마이저와 손실함수를 생성 하고(S240), 머신러닝 모델의 성능 프로파일링을 위한 콜백(callback) 함수를 설정한다(S250). 머신러닝 모델 생성에는 string-based-method call을 사용할 수 있다. 또한 sequential path 외에 parallel path도 지원함으로써, in/out을 지정하여 머신러닝 모델에 대한 그래프 생성이 가능하도록 할 수 있다. 이후 머신러닝 모델을 학습시키고(S260). 학습이 종료되면 머신러닝 모델을 반환한다(S270). S270단계에서는 머 신러닝 모델의 학습된 파라미터 정보 외에, 학습에 관련된 epoch 정보, 프로파일링 정보로써 성능(정확도, 손실 등), 속도(모델의 전체 처리 속도, 레이어별 처리 속도), 메모리 사용 정보 등이 함께 반환된다. 반환되는 프로파일링 정보는 머신러닝 모델의 성능 개선을 위한 지표로서 활용되어, 머신러닝 모델의 수정이나 최적화, 배포에 참조된다. 도 3은 본 발명의 다른 실시예에 따른 최적화 메서드에 의한 머신러닝 모델 최적화 방법의 설명에 제공되 는 흐름도이다. 최적화는 학습된 머신러닝 모델에 대해 레이어 통합과 양자화를 통해 최적의 머신러닝 모델을 재생성하고, 성능 프로파일링을 수행하는 과정이다. 학습된 머신러닝 모델의 최적화를 위해, 도시된 바와 같이 먼저 YAML 파일을 파싱하여, YAML 파일에 기술된 머 신러닝 모델이 배포될 디바이스에 대한 정보를 확인한다(S310). 다음 선택 가능한 다수의 디바이스 정보들 중 S310단계에서 확인된 디바이스의 정보(아키텍쳐 정보, 비트 뎁스 정보(fp16, int8 등), 명령어 정보 등)를 선택한다(S320). 이를 테면, 선택가능한 디바이스 정보로, GPU 정보, NPU 정보, PIM 정보가 있는데 YAML 파일에서 디바이스를 NPU로 기술하고 있다면, S320단계에서는 NPU 정보가 선 택되는 것이다. 선택가능한 디바이스 정보는 제시된 것들 이외에 추가 확장이나 변경 및 삭제가 가능하다. 이후 S320단계에서 선택된 디바이스의 아키텍쳐 정보를 기초로 학습된 머신러닝 모델에 대해 레이어 통합(layer fusion)을 수행하고(S330), 디바이스의 비트 뎁스 정보를 기초로 레이어 통합된 머신러닝 모델의 파라미터에 대 해 양자화(quantization)를 수행하며(S340), 디바이스의 명령어 정보를 참조로 양자화된 머신러닝 모델과 그래 프를 재생성하여 최적화한다(S350). 다음 최적화된 머신러닝 모델의 성능 프로파일링을 수행하고(S360). 최적화된 머신러닝 모델을 반환한다(S370). S370단계에서도 머신러닝 모델의 최적화된 파라미터 정보 외에, S360단계에서의 프로파일링 정보로써 성능(정확 도, 손실 등), 속도(모델의 전체 처리 속도, 레이어별 처리 속도), 메모리 사용 정보 등이 함께 반환된다. S370단계에서 반환되는 프로파일링 정보는 도 2의 S270단계에서 반환되는 프로파일링 정보와 비교되어, 최적화 에 의한 머신러닝 모델의 성능 변화 확인에 참조될 수 있다. 도 4는 본 발명의 또 다른 실시예에 따른 배포 메서드에 의한 머신러닝 모델 배포 방법의 설명에 제공되는 흐름도이다. 배포는 최적화된 머신러닝 모델을 실제 하드웨어(디바이스와 메모리)에 오프로딩 하고, 성능 프로 파일링을 수행하는 과정이다. 최적화된 머신러닝 모델의 배포를 위해, 도시된 바와 같이 먼저 YAML 파일을 파싱하여, YAML 파일에 기술된 머 신러닝 모델이 배포될 디바이스에 대한 정보를 확인한다(S410). 다음 선택 가능한 다수의 디바이스 정보들 중 S410단계에서 확인된 디바이스의 정보를 선택한다(S420). 이후 S420단계에서 선택된 디바이스 정보로부터 메모리 정보와 디바이스와 메모리 간 토폴로지를 확인하여(S430), 머 신러닝 모델의 파라미터를 디바이스에 오프로딩한다(S440). 이후, 머신러닝 모델의 테스트 데이터들을 디바이스에 세팅하고(S450), 테스트 데이터들로 머신러닝 모델을 테 스트하여(S460), 테스트가 완료된 머신러닝 모델 객체를 반환한다(S470). S470단계에서는 머신러닝 모델의 파라미터 외에, 학습에 관련된 epoch 정보, 프로파일링 정보로써 성능(정확도, 손실 등), 속도(모델의 전체 처리 속도, 레이어별 처리 속도), 메모리 사용 정보 등이 함께 반환된다. S470단계에서 반환되는 프로파일링 정보는 도 2의 S270단계에서 반환되는 프로파일링 정보 및 도 4의 S470단계 에서 반환되는 프로파일링 정보와 비교되어, 최적화에 의한 머신러닝 모델의 성능 변화 확인에 참조될 수 있다. 도 5는 본 발명의 또 다른 실시예에 따른 머신러닝 개발 시스템의 구성을 도시한 도면이다. 본 발명의 실시예에 따른 머신러닝 개발 시스템은 도시된 바와 같이 통신부, 출력부, 프로세서, 입력부 및 저 장부를 포함하여 구성되는 컴퓨팅 시스템으로 구현할 수 있다. 통신부는 외부 네트워크 또는 외부 기기와 연결을 위한 통신 인터페이스로, 개발된 머신러닝 모델이 배포 될 하드웨어 장치가 연결된다. 출력부는 프로세서에 의한 연산 수행 결과가 표시되는 출력 수단이며, 입력부는 사용자 명령을 입력받아 프로세서로 전달하는 사용자 인터페이스이다. 프로세서는 전술한 도 1에 도시된 MLOps SW 프레임워크를 실행하여, 도 2에 제시된 학습, 도 3에 제시된 최적화 및 도 4에 제시된 배포 등을 수행한다. 저장부는 프로세서가 기능하고 동작함에 있어 필요한저장 공간을 제공한다. 지금까지 다양한 머신러닝 하드웨어 구성을 위한 효율적이고 확장 가능한 MLOps SW 프레임워크 및 이를 활용한 머신러닝 학습, 최적화 및 배포 방법에 대해 바람직한 실시예를 들어 상세히 설명하였다. 위 실시예에서는, 다양한 머신러닝 프레임워크 사용이 가능한 확장 가능하며, 텍스트 기술(text description) 기반의 쉬운 개발 방법을 지원하며, 메모리, 속도, 성능 세가지 핵심적인 성능 프로파일링 정보를 제공하며, 하 드웨어에 쉽게 배포할 수 있는 방법을 제공하며, 배포 전에 해당 하드웨어에 적합하게 최적화할 수 있는 방법을 제시하였다. 이에 의해 다양한 인공지능 프레임워크에서 개발이 되어도 쉽게 해당 MLOps에 인공지능 응용 어플리케이션의 포 팅이 가능하며, Text 기반의 모델 및 학습 파라미터 관리가 가능하며, 학습 결과로 제공되는 성능 프로파일링 정보를 바탕으로 AI 응용 애플리케이션에 최적화된 머신러닝 모델의 선택이 가능하고, 하드웨어에 최적화되어 쉽게 AI 응용 어플리케이션의 배포가 가능하여 지속적인 AI 응용 어플리케이션의 성능 개선이 가능해진다. 한편, 본 실시예에 따른 장치와 방법의 기능을 수행하게 하는 컴퓨터 프로그램을 수록한 컴퓨터로 읽을 수 있는 기록매체에도 본 발명의 기술적 사상이 적용될 수 있음은 물론이다. 또한, 본 발명의 다양한 실시예에 따른 기 술적 사상은 컴퓨터로 읽을 수 있는 기록매체에 기록된 컴퓨터로 읽을 수 있는 코드 형태로 구현될 수도 있다. 컴퓨터로 읽을 수 있는 기록매체는 컴퓨터에 의해 읽을 수 있고 데이터를 저장할 수 있는 어떤 데이터 저장 장 치이더라도 가능하다. 예를 들어, 컴퓨터로 읽을 수 있는 기록매체는 ROM, RAM, CD-ROM, 자기 테이프, 플로피 디스크, 광디스크, 하드 디스크 드라이브, 등이 될 수 있음은 물론이다. 또한, 컴퓨터로 읽을 수 있는 기록매체 에 저장된 컴퓨터로 읽을 수 있는 코드 또는 프로그램은 컴퓨터간에 연결된 네트워크를 통해 전송될 수도 있다. 또한, 이상에서는 본 발명의 바람직한 실시예에 대하여 도시하고 설명하였지만, 본 발명은 상술한 특정의 실시"}
{"patent_id": "10-2023-0136835", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "예에 한정되지 아니하며, 청구범위에서 청구하는 본 발명의 요지를 벗어남이 없이 당해 발명이 속하는 기술분야 에서 통상의 지식을 가진자에 의해 다양한 변형실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 발명의 기술적 사상이나 전망으로부터 개별적으로 이해되어져서는 안될 것이다."}
{"patent_id": "10-2023-0136835", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 실시예가 적용가능한 머신러닝 모델 개발을 위한 MLOps SW 프레임워크의 구조, 도 2는 본 발명의 일 실시예에 따른 머신러닝 모델 학습 방법, 도 3은 본 발명의 다른 실시예에 따른 머신러닝 모델 최적화 방법, 도 4는 본 발명의 또 다른 실시예에 따른 머신러닝 모델 배포 방법, 도 5는 본 발명의 또 다른 실시예에 따른 머신러닝 개발 시스템의 구성이다."}
