{"patent_id": "10-2009-7018717", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2010-0014941", "출원번호": "10-2009-7018717", "출원인": "트라이언 월드 네트워크, 인코포레이티드", "발명자": "리, 로버트 이."}}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "합성 환경을 생성하기 위한 시스템에 있어서, 상기 시스템은다수의 참여자가 상호대화하는 합성 환경을 생성하기 위한 게임 관리 서버와,게임 서브프로세스에 대한 요구의 함수로서, 게임 서브프로세스 결과를 게임 관리 서버에 수여(impart)하도록구성되는 스케일 가능한 게임 서브프로세스 서버포함하며, 이때, 상기 게임 관리 서버와 스케일 가능한 게임 서브프로세스 서버는 분산 네트워크 아키텍처에 배치되는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서, 게임 서브프로세스에 대한 요구에 응답하여, 상기 스케일 가능한 서브프로세스 서버의 구현을 제어하도록 구성되는 마스터 스케일링 서버를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서, 상기 합성 환경은 지속 세계(persistent world)인 것을 특징으로 하는 합성 환경을 생성하기위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서, 상기 게임 관리 서버는, 클라이언트에서가 아니라, 게임 관리 서버에서 합성 환경과 참여자의 상호대화를 수정하도록 더 구성되는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,데이터를 노드로 통합시키도록 구성되는 전역 데이터 구조를 포함하는 메시지를 전파하도록 구성되는 메시징 시스템을 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5 항에 있어서, 상기 노드는,게임 관리 서버, 스케일 가능한 게임 서브프로세스 서버, 데이터베이스, 클라이언트 중 하나 이상을 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 5 항에 있어서, 상기 메시징 시스템은, 클라이언트가 합성 환경의 수정을 나타내는 것에 응답하여 서버 측전역 데이터 구조와 연계된 데이터의 서브셋을 송신하도록 구성되는 것을 특징으로 하는 합성 환경을 생성하기위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 5 항에 있어서,전역 데이터 구조에서 노드가 데이터를 구현하도록 하게 하도록 구성되는 인스턴스 관리 스키마 를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템. - 3 -공개특허 10-2010-0014941청구항 9 제 5 항에 있어서, 전역 데이터 구조의 데이터를 노드에 의해 사용가능한 형태로 제공하도록 각각 구성되는 다수의 전역 메시지 인터페이스 를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 5 항에 있어서, 상기 전역 데이터 구조는 객체 지행 프로그래밍 언어의 클래스를 갖는 것을 특징으로 하는합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 5 항에 있어서,전역 데이터 구조를 노드에 의해 사용되기 위한 데이터 정렬로 변환하지 않고, 각각 데이터를 전역 데이터 구조로 제공하도록 구성되는 다수의 전역 메시지 인터페이스 를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서, 상기 다수의 전역 메시지 인터페이스 각각은 각각의 메시지가 노드에 대해 의도된 것인가의여부를 검출하도록 구성되는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 5 항에 있어서, 다수의 전역 메시지 인터페이스로서, 상기 다수의 전역 메시지 인터페이스 중 하나 이상은 전역 데이터 구조를플랫폼-독립형 포맷으로 포맷칭하도록 구성되는 상기 다수의 전역 메시지 인터페이스를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 13 항에 있어서, 상기 플랫폼-독립형 포맷은 확장 마크업 언어(extensible markup language)에 의해 정의되는 포맷을 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 1 항에 있어서, 상기 게임 관리 서버를 포함하는 다수의 게임 관리 서버와, 상기 스테일 가능한 게임 서브프로세스 서버를 포함하는 다수의 스케일 가능한 게임 서브프로세스 서버 를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 15 항에 있어서, 다수의 게임 관리 서버 중 둘 이상은 의산 집합적 프로세스 공간을, 개별 프로세스 공간으로서 액세스하도록 구성되는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 15 항에 있어서, 상기 다수의 스케일 가능한 게임 서브프로세스 서버 중 하나 이상은공통 프로세스 공간으로서 기능하는 의사 집합적 프로세스 공간과 연계하여 원자형 거래(atomic transaction)를수행하도록 구성된 거래 서버- 4 -공개특허 10-2010-0014941를 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "합성 환경을 생성하기 위한 시스템에 있어서, 상기 시스템은분산 서버 아키텍처에서 참여자가 상호대화하는 합성 환경을 생성하도록 구성된 합성 환경 생성 플랫폼으로서,이때, 합성 환경을 생성하기 위한 인스트럭션을 실행하도록 구성된 하나 이상의 게임 관리 서버를 포함하는 상기 합성 환경 생성 플랫폼과,인스트럭션의 실행과 동시에, 동적 콘텐츠를 합성 환경의 일부, 또는 전체로 도입시키도록 구성되는 이벤트 서버와,전역 데이터 구조를 각각 포함하는 전역 객체의 시스템을 포함하며, 이때, 전역 객체 중 하나 이상은 동적 콘텐츠를 촉진시키도록 구성되는 것을 특징으로 하는 합성환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 18 항에 있어서, 상기 이벤트 서버는, 인스트럭션을 구성하는 객체 코드를 수정하지 않고, 동적 콘텐츠를 도입시키도록 구성되는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 18 항에 있어서, 상기 전역 객체의 시스템은, 동적 콘텐츠의 도입 동안 인스트럭션의 재-컴파일을 제거하는것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제 18 항에 있어서, 하나 이상의 게임 관리 서버가, 재부팅없이, 동적 콘텐츠를 생성하도록 구성되는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제 18 항에 있어서,데이터베이스를 더 포함하며, 상기 데이터베이스는 동적 콘텐츠를 구현하기 위한 플러그 데이터를 포함하는 플러스 객체와,합성 환경의 일부분을 생성하기 위한 인스트럭션의 서브셋과 연계되는 소켓 코드를 포함하며, 이때, 상기 소켓 코드는 합성 환경의 일부분에 대하여 동적 콘텐츠를 렌더링하기 위한 동적 데이터를 구현하도록 구성되는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제 18 항에 있어서, 상기 이벤트 서버는 지정된 트리거에 응답하여, 동적 콘텐츠를 도입시키도록 더 구성되는것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제 18 항에 있어서, 상기 합성 플랫폼은합성 환경을 생성하도록 구성되는 다수의 게임 관리 서버, 게임 서브프로세스 서버 및 데이터베이스와,다수의 게임 관리 서버, 게임 서브프로세스 서버 및 데이터베이스 간에서 메시지를 전파하도록 구성되는 분산네트워크 아키텍처와,전역 데이터 구조에서, 메시지로 포맷팅된 데이터를 구현하도록 구성되는 다수의 전역 데이터 구조 인터페이스- 5 -공개특허 10-2010-0014941를 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_25", "content": "컴퓨터에 의해 생성되는 합성 환경을 생성하기 위한 시스템에 있어서, 상기 시스템은다수의 게임 서브프로세스 서버로서, 물리 서버와, 인공 지능 서버와, 거래 서버를 포함하는 상기 다수의 게임서브프로세스 서버와,참여자가 상호대화하는 합성 환경을 생성하도록 구성되는 각각 구성되는 다수의 게임 관리 서버와,합성 환경을 생성하기 위한 데이터를 저장하도록 구성된 데이터베이스로서, 이때, 다수의 게임 관리 서버, 다수의 게임 서브프로세스 서버, 데이터베이스 각각이 분산 네트워크에 배열되는, 상기 데이터베이스를 포함하며, 이때, 다수의 게임 관리 서버, 다수의 게임 서브프로세스 서버 및 데이터베이스는 전역 데이터 구조를, 상기 분산 네트워크의 일부분, 또는 전체 내에서 전파되는 메시지로 포맷팅하여 구현하는 것을 특징으로하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_26", "content": "제 25 항에 있어서, 추가적인 게임 서브프로세스 서버의 서브셋을, 하나 이상의 물리 서버, 하나 이상의 인공 지능 서버, 하나 이상의 거래 서버 중 임의의 것에 추가되도록 구성하도록 구성되는 마스터 스케일링 서버를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_27", "content": "제 25 항에 있어서, 참여자의 가시성 범위가 개체의 CBS(can-be-seen) 범위와의 교차 여부를 검출하여, 상기 개체가 참여자에게 가시적(visible)인가를 판단하도록 구성되는 가시성 서버와,물리 서버에 의해 수행되어야 하는 참여자의 그룹에 대한 물리 프로세싱을 오프-로딩(off-loading)하기 위한 인스턴스 서버를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_28", "content": "제 25 항에 있어서, 다수의 게임 관리 서버를 포함하는 합성 환경과 상호대화할 것을 요청하는 다수의 클라이언트를 연계시키도록구성되는 사용자 서버를 더 포함하는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_29", "content": "제 25 항에 있어서,시스템과의 상호대화 동안 업데이트된 데이터의 일부분을 클라이언트에게 송신하도록 구성되는 패치 서버 를 더 포함하며, 업데이트된 데이터의 수신되지 않은 부분이, 프록시 자산을 생성하기 위해 디폴트 데이터로 대체되는 것을 특징으로 하는 합성 환경을 생성하기 위한 시스템."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_30", "content": "MMO 게임(massively multiplayer online game)을 촉진시키기 위한 방법에 있어서, 상기 방법은게임 관리 프로세스와 독립적으로 게임 서브프로세스를 초기화하는 단계,게임 서브프로세스와 게임 관리 프로세스 간의 협업을 통해 합성 환경을 생성하는 단계,- 6 -공개특허 10-2010-0014941게임 서브프로세스의 하나 이상이 동작 불가능한 동안, 합성 환경의 일부분, 또는 전부를 생성하기 위해 게임관리 프로세스를 구현하는 단계 를 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_31", "content": "제 30 항에 있어서, 함성 환경을 생성하기 위해 게임 서브프로세스와 게임 관리 프로세스 간에 메시지를 교환하는 단계 를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_32", "content": "제 30 항에 있어서,하나 이상의 물리 서버를, 게임 서브프로세스의 서브셋으로서 구현하는 단계로서, 이때, 게임 관리 프로세스가하나 이상의 물리 서버에 독립적으로 동작하도록 구성되는 단계를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_33", "content": "제 32 항에 있어서,하나 이상의 물리 서버와 별도로 인공 지능 서버 프로세스를 구현하는 단계 를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_34", "content": "제 30 항에 있어서, 합성 환경을 생성하는 단계는둘 이상의 서로 다른 클라이언트에 대해 둘 이상의 서로 다른 게임 관리 프로세스를 구현하는 단계,둘 이상의 서로 다른 클라이언트가 상기 합성 환경을 액세스하게 하는 단계를 더 포함하며, 상기 둘 이상의 서로 다른 클라이언트 중 임의의 클라이언트는 둘 이상의 서로 다른 게임 관리프로세스 중 임의의 게임 관리 프로세스를 통해 합성 환경을 액세스하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_35", "content": "제 30 항에 잇어서,의사 집합적 프로세스 공간을 생성하는 단계를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_36", "content": "제 35 항에 있어서, 상기 의사 집합적 프로세스 공간을 생성하는 단계는참여자가 데이터의 제 1 서브셋에 대해 상호대화하는 공통 프로세스 공간을 생성하는 단계로서, 이때, 상기 참여자는 상기 둘 이상의 서로 다른 게임 관리 서버와 연계되는 단계와,데이터의 제 2 서브셋에 대해 참여자를 위한 개별적인 프로세스 공간을 생성하는 단계를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_37", "content": "제 36 항에 있어서, 상기 데이터의 제 1 서브셋은 거래 관련 데이터를 포함하고, 상기 데이터의 제 2 서브셋은지오메트리 관련 데이터를 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법. - 7 -공개특허 10-2010-0014941청구항 38 제 35 항에 있어서,참여자 간의 거래를 관리하여, 상기 거래가 원자적(atomic)임을 보장하는 단계를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_39", "content": "제 30 항에 있어서,게임 관리 프로세스 서버의 크기(quantity)에 독립적으로, 서브프로세스 서버의 크기를 스케일링하는 단계 를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_40", "content": "제 39 항에 있어서, 게임 서브프로세스에 대한 수요에 따라, 서브프로세스 서버의 크기를 스케일링하는 단계를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_41", "content": "제 39 항에 있어서, 게임 관리 프로세스 서버의 로딩(loading)을 모니터링하는 단계와,상기 로딩의 함수로서, 서브프로세스 서버의 크기를 스케일링하는 단계를 더 포함하는 것을 특징으로 하는 MMO 게임을 촉진시키기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_42", "content": "MMO(massively multiplayer onlien game)을 촉진시키기 위한 방법을 수행하는 컴퓨터 프로그램이 기록된 컴퓨터 판독형 기록 매체에 있어서, 상기 방법은하나 이상의 게임 서브프로세스에 독립적으로 게임 관리 프로세스를 초기화하는 단계,네트워크를 통해, 게임 관리 프로세스를 구현하는 서버와, 합성 환경을 생성하기 위한 하나 이상의 서브프로세스를 구현하는 서버 간에 메시지를 교환하는 단계,하나 이상의 게임 서브프로세스를 구현하는 서버의 하나 이상일 작동 불가능인 것에 독립적으로, 합성 환경의일부분, 또는 전부를 촉진시키기 위해 게임 관리 프로세스를 수행하는 단계를 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_43", "content": "제 42 항에 있어서, 상기 방법은게임 관리 프로세스를 구현하는 서버와 클라이언트의 서브셋 간의 통신을 확립하는 단계와,합성 환경과 클라이언트의 서브셋 간의 상호대화를 촉진하는 단계를 더 포함하며, 이때, 상기 클라이언트의 서브셋과, 그 밖의 다른 게임 관리 프로세스를 구현하는 그 밖의 다른 서버와 연계되는 그 밖의 다른 클라이언트는 합성 환경과 동시에 상호대화하는 것을 특징으로 하는 컴퓨터판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_44", "content": "제 42 항에 있어서, 상기 방법은변화된 합성 환경과 연계된 데이터의 부분을 판단하는 단계,- 8 -공개특허 10-2010-0014941클라이언트에게로 전송하기 위한 압축형 전역 메시지를 생성하는 단계로서, 상기 압축형 전역 메시지는 변화된데이터의 부분에 대한 지시(indication)를 포함하는 단계를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_45", "content": "제 44 항에 있어서, 상기 방법은벡터로서 배열된 다수의 특성 값을 포함하는 객체를 생성하는 단계,다수의 특성 값으로부터의 특성 값이 수정되었는가의 여부를 판단하여, 수정된 특성 값을 식별하는 단계와,수정된 특성 값과 벡터로의 인덱스를 포함하도록 압축형 전역 메시지를 형성하는 단계 를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_46", "content": "MMO(massively maultiplayer online) 게임을 촉진시키기 위해, 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법에 있어서, 상기 방법은함성 환경 생성 플랫폼에서 노드들 간의 게임 데이터를 교환하도록 구성된 전역 데이터 구조와 조화되는 전역메시지를 생성하는 단계로서, 상기 노드는 합성 환경 생성 플랫폼에 대한 분산 프로세스를 제공하도록 구성된노드의 서브셋을 포함하는 단계,합성 환경을 수정하기 위해, 전역 메시지의 서브셋을 노드의 서브셋에게 브로드캐스트하는 단계,노드의 분산 프로세스에 응답하여, 합성 환경의 일부분, 또는 전부를 수정하는 단계를 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_47", "content": "제 46 항에 있어서, 상기 합성 환경의 일부분, 또는 전부를 수정하는 단계는동적 콘텐츠를 합성 환경으로 도입시키는 단계를 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_48", "content": "제 46 항에 있어서, 전역 메시지를 생성하는 단계는플랫폼-독립형 포맷과 조화를 이루는 데이터 정렬로부터 게임 데이터를 추출하는 단계를 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_49", "content": "제 46 항에 있어서, 상기 전역 메시지는확장 마크업 언어에 의해 정의된 포맷과 조화를 이루는 데이터 정렬로부터 게임 데이터를 추출하는 단계 를 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_50", "content": "제 49 항에 있어서, 객체-지향적 클래스 구조에 따라 게임 데이터를 구현하는 단계를 더 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_51", "content": "- 9 -공개특허 10-2010-0014941제 46 항에 있어서,노드의 용도를 판단하기 위한 스키마를 액세스하는 단계전역 데이터 구조와 상기 노드와 연계되는 또 다른 데이터 정렬 간의 게임 데이터를 교환하기 위해, 실행가능한코드를 수정하지 않고, 상기 노드를 전역 데이터 구조와 상호대화하도록 구성하는 단계를 더 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_52", "content": "제 51 항에 있어서,스키마를 기초로, 전역 메시지의 서브셋으로부터 전역 메시지의 게임 데이터를 노드와 통합시키는 단계를 더 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_53", "content": "제 46 항에 있어서, 노드가 전역 메시지의 서브셋으로부터의 전역 메시지와 호환됨을, 상기 전역 메시지와 연계되는 노드 속성을 기초로, 검출하는 단계 를 더 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_54", "content": "제 46 항에 있어서, 상기 합성 환경의 일부분을 수정하는 단계는동적 콘텐츠를 합성 환경으로 도입시키는 단계를 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_55", "content": "제 46 항에 있어서, 상기 분산 프로세스는게임 관리 프로세스, 게임 서브프로세스, 데이터베이스 프로세스를 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_56", "content": "제 55 항에 있어서,전역 메시지의 서브셋을 게임 관리 프로세스에서, 게임 서브프로세스, 또는 데이터베이스 프로세스, 또는 둘 모두에게 전송하는 단계를 더 포함하는 것을 특징으로 하는 분산 네트워크 아키텍처에서 노드들 간에 통신하기 위한 방법."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_57", "content": "합성 환경과 연계하여, 전역 메시지를 생성하기 위한 방법을 수행하는 컴퓨터 프로그램이 기록된 컴퓨터 판독형기록 매체에 있어서, 상기 방법은합성 환경 생성 플랫폼으로의 전송을 위해 데이터를 수신하는 단계,전역 데이터 구조를 포함하도록 전역 메시지를 생성하는 단계,전역 메시지를 송신하는 단계를 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_58", "content": "제 57 항에 있어서, 상기 방법은- 10 -공개특허 10-2010-0014941플랫폼-독립형 포맷을 갖는 전역 데이터 구조에 따라 데이터를 포맷팅하는 단계를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_59", "content": "제 57 항에 있어서, 상기 방법은데이터를 포함하도록 특성 클래스 객체를 생성하는 단계를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_60", "content": "제 57 항에 있어서, 상기 방법은전역 데이터 구조에 따라 데이터를 포맷팅하는 단계를 더 포함하며, 이때, 상기 전역 데이터 구조는 합성 환경 생성 플랫폼과 통신하는 노드에 의해 이용가능한 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_61", "content": "제 57 하에 있어서, 상기 방법은확장 마크업 언어에 의해 정의된 데이터 정렬로부터 데이터를 추출하는 단계를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_62", "content": "제 61 항에 있어서, 상기 방법은상기 데이터 정렬로부터 데이터를 시리얼라이즈하는 단계,상기 데이터를 포함하도록 특성 클래스 객체를 생성하는 단계를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_63", "content": "제 62 항에 있어서, 상기 방법은특성 클래스 객체를 패킷화하는 단계를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_64", "content": "제 57 항에 있어서, 상기 단계는압축형 전역 메시지를 생성하는 단계를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체."}
{"patent_id": "10-2009-7018717", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_65", "content": "제 64 항에 있어서, 상기 압축형 전역 메시지를 생성하는 단계는수정된 데이터 부분을 식별하도록, 데이터 부분이 수정되었는가를 판단하는 단계,수정된 데이터 부분에 대한 속성을 판단하는 단계,수정된 데이터 부분에 대한 속성과 상기 속성의 값을 특정하는 키를 포함하도록 압축형 전역 메시지를 형성하는단계 를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체. - 11 -공개특허 10-2010-0014941청구항 66 제 64 항에 있어서, 상기 압축형 전역 메시지를 생성하는 단계는벡터로서 정렬된 다수의 특성 값을 포함하는 객체를 생성하는 단계,다수의 특성 값에서 하나의 특성 값이 수정되었는가를 판단하여, 수정된 특성 값을 식별하는 단계,수정된 특성 값과 벡터로의 인덱스를 포함하도록 압축형 전역 메시지를 형성하는 단계를 더 포함하는 것을 특징으로 하는 컴퓨터 판독형 기록 매체.명 세 서기 술 분 야본 발명의 실시예는 포괄적으로 컴퓨터 기반의 시뮬레이션 및 합성 환경 생성(synthetic environment [0001]generation)에 관한 것이며, 더 구체적으로는 동적 콘텐츠(dynamic content)를 유도하기 위한 분산 아키텍처에서 합성 환경을 생성하기 위한 시스템, 컴퓨터 판독형 기록 매체, 방법 및 장치에 관한 것이다. 배 경 기 술컴퓨터에 의해 발생되는 환경, 가령, MMO(massively multiplayer online) 게임의 가상 세계를 설계하고 시뮬레 [0002]이트하기 위한 전통적인 기법은 새로운, 또는 변경된 가상 세계의 효과적인 전개와 생성을 쉽게 촉진하지 않는다. 덧붙이자면, 가상 세계를 발생하기 위한 종래의 게임 플랫폼은, 특히 MMO 게임과 관련하여, 가상 세계의 전개와 생성을 더 방해한다. 일반적으로, 종래의 게임 플랫폼은 가상 세계를 생성하기 위해 게임 서버의 세트를사용하며, 이때, 가상 세계의 복사본을 생성하기 위해 각각 추가적인 게임 서버 세트가 사용된다. 이러한 복사본은 통상적으로 “샤드(shard)”라고 일컬어진다. 종래의 게임 플랫폼은 관례적으로 각각의 가상 세계의 지형을 파티션으로 분할하며, 하나의 파티션을 생성하기 위해 하나의 게임 서버를 할당한다. 보통, 가상 세계의 파티션을 생성하도록 구성된 게임 서버는 “영역 서버(area server)”라고 일컬어진다. 덧붙여, 일부 종래의 게임서버는 단일체(monolithic)이며, 이는 가상 세계에 대한 파티션을 생성하기 위한 모든 게임 프로세스가 하나의단일 프로세스 및/또는 서버에 마련됨을 의미한다. 종래의 게임 플랫폼뿐 아니라, 컴퓨터에 의해 생성된 세계를전개하는 것에 대한 전통적인 접근법에 관련된 다양한 단점이 존재한다.일부 종래의 게임 플랫폼에 대한 단점은, 이들이 가상 세계의 하나의 파티션에 대해 하나의 게임 서버를 할당한 [0003]다는 것이다. 마찬가지로, 게임 서버와 그 기능이 파티션 및 그 활동으로 직접 링크되는 것이 일반적이다. 따라서 지리적으로 링크된 게임 서버의 성능은, 상기 파티션의 플레이어의 명수와 그 곳에서 수행되는 활동의 종류에 대한 함수가 된다. 덧붙이자면, 수요의 증가를 충족시키기 위해 하드웨어 성능을 조정할 수 없음으로 인해,단일체 게임 서버를 이용하는 종래의 게임 플랫폼은 다소 제한된다. 따라서 더 많은 플레이어가 하나의 특정 파티션으로 이동함에 따라, 상기 파티션을 지원하는 게임 서버에 점점 부담이 증가된다. 차례로, 이는 대응하는가상 세계 파티션과 상호대화할 수 있는 플레이어의 인원을 제한한다. 하나의 구제책으로서, 일부 MMO 게임은가득 찬 게임 서버의 플레이어를 비교적 덜 찬 게임 서버로 이동시키도록 동작한다. 이는 플레이어의 활동에 상당한 영향을 미칠 수 있다. 종래의 게임 플랫폼의 또 하나의 단점은, 보통, 각각의 게임 서버가, 동일한 가상 세계의 그 밖의 다른 게임 서 [0004]버와 다른 가상 세계 파티션을 생성하기 위해 개별적인 프로세스 공간을 갖는다는 것이다. 플레이어가 2개의 가상 세계 부분의 경계를 결정하는 지리적 경계를 가로질러 상호대화하는 것은 일반적인 일이다. 따라서 파티션경계로 인해 곤란함이 발생하고, 종래의 게임 플랫폼은 파티션 간 상호대화를 관리유지하도록 시도하기 위한 컴퓨팅 자원을 필요로 한다. 예를 들어, 하나의 파티션에서 한 명의 플레이어와 연계된 게임 서버는, 상기 플레이어와 다른 가상 세계 파티션의 다른 플레이어와의 상호대화를 추적하기 위한 일종의 추적 기능을 필요로 한다.또 다른 예를 들자면, 플레이어를, 서로 다른 프로세스 공간에서의 프록시로서 유지하기 위한 컴퓨팅 자원이 요구되는 것이 일반적이다. 플레이어를 프록시로서 구현하는 것은 하나의 가상 세계 파티션에 대한 플레이어 특정정보의 하나의 표현, 가령, 캐릭터 식별자(character identifier)를, 또 하나의 가상 세계 파티션을 위한 별도의 프로세스 공간과 함께 사용되기 위한 또 다른 표현으로 변환할 것을 필요로 한다. 덧붙이자면, 일반적으로,예를 들어, 통신의 복잡도뿐 아니라 파티션간 상호대화에 대한 레이턴시(latency)를 증가시키는 원격 프로시저호출(remote procedure call)을 이용하여 게임 서버들은 그들끼리 플레이어 상호대화에 관하여 통신한다. - 12 -공개특허 10-2010-0014941종래의 게임 플랫폼의 추가적인 단점은 서로 다른 가상 세계 파티션에서 상호대화하는 플레이어(또는 상기 플레 [0005]이어의 프록시)가 거래를 쉽게 혼란에 빠트려서, 그들 스스로 불공정하게 풍부해질 수 있다. 설명을 위해, 하나의 가상 세계 파티션에 위치하는 제 1 플레이어가, 무기를 또 다른 가상 세계 파티션에 위치하는 제 2 플레이어가 소유하는 금과 교환하자고 제안하는 경우를 고려하자. 그 후, 상기 제 1 플레이어가 무기를 넘기기 전에 금을 받고, 제 1 플레이어가, 서로 다른 가상 세계 파티션의 게임 서버 간의 연결을 끊는 경우를 고려하자. 이 결과로, 제 1 플레이어는 무기를 교환하지 않고, 금을 얻을 것이다.단일체 게임 서버를 이용하는 것의 하나의 단점은, 단일체 게임 서버의 게임 서브프로세스 중 하나, 예를 들어, [0006]물리 프로세스가 이상을 보이거나, 종료(shut down)된 경우, 게임 서브프로세스가 위치하는 전체 게임 서버 또한 이상이나 종료에 영향을 받는다.MMO 게임용으로 컴퓨터에 의해 생성되는 환경을 설계하고 시뮬레이트하기 위해 현재의 클라이언트-서버 아키텍 [0007]처를 이용하는 것에 대한 또 다른 단점이 존재한다. 새로운, 또는 수정된 가상 세계를 위해 새로운 콘텐츠를 생성할 때 요구되는 개발 활동과 함께, 게임 디자이너 및 개발자는 새로운 콘텐츠 및 그 데이터에 적응하도록 정기적으로 실행 가능한 인스트럭션을 변경한다. 특히 버그(bug)와 그 밖의 다른 문제를 제거하기 위한 품질 보증및 신뢰도 테스팅 동안 실행 가능한 인스트럭션을 수정하는 것은 개발 시간을 증가시킨다. 덧붙이자면, MMO 게임은, 새로운 콘텐츠와의 상호대화 전에, 상기 수정된 실행 가능 코드가 클라이언트에게 다운로드될 것을 필요로 한다. 예를 들어, MMO 게임 플랫폼이, 수정된 실행 가능 코드를 포함할 수 있는 큰 데이터 다운로드(가령,250MB)를 실시하는 것은 일반적인 일이다. 앞의 내용을 고려하여, 분산 아키텍처에서 합성 환경을 생성하여, 동적 콘텐츠를 상기 합성 환경으로 유도하고, [0008]새로운, 또는 수정된 합성 환경의 효과적인 전재 및 생성을 제공하기 위한 시스템, 컴퓨터 판독형 기록 매체,방법 및 장치를 제공하는 것이 바람직할 것이다. 발명의 상세한 설명본 발명의 실시예는 일반적으로 컴퓨터 기반의 시뮬레이션 및 합성 환경 생성에 관한 것이고, 더 구체적으로, [0009]분산 아키텍처에서 합성 환경을 생성하여, 동적 콘텐츠를 도입시키기 위한 시스템, 컴퓨터 판독형 매체, 방법및 장치에 관한 것이다. 하나의 실시예에서, 합성 환경 생성 플랫폼은 합성 환경의 생성을 촉진시키기 위한 전역 데이터 구조와 메시지 시스템을 구현할 수 있다. 실 시 예도 1A는 본 발명의 하나 이상의 실시예에 따라 합성 환경(synthetic environment)을 생성하기 위한 시스템을 도 [0034]시한다. 이러한 시스템의 하나의 예시는, 클라이언트(150)가 상호대화하는 대상인 합성 환경을 생성하기 위해서로 네트워크-연결된 노드(및 노드 프로세스)를 포함하는 합성 환경 생성 플랫폼(synthetic environmentgeneration platform, 100)이다. 합성 환경 생성 플랫폼(100)은 클라이언트-서버 네트워크 아키텍처에서의 서버측 구조 및/또는 기능부를 나타내고, 클라이언트(150)는 클라이언트-측 구조 및/또는 기능부를 나타낸다. 노드는 게임 서브프로세스 서버(104)와, 데이터베이스(1123)와, 게임 관리 서버(122)를 포함하며, 이들 모두 네트워크(115)에 의해 서로 연결되어, 각각 게임 서브프로세스(102)와, 데이터베이스 프로세스(110)와, 게임 관리 프로세스(120)를 구현할 수 있다. 게임 서브프로세스(102)는 서브프로세스(102a, 102b 및 102c)보다 더 많거나,더 적게 포함할 수 있다. 나타나다시피, 게임 서브프로세스 서버(104)는 적어도 게임 관리 서버(122)에 비해 분산 배열(distributed arrangement)로 배열되고, 이로 인해, 게임 서브프로세스(102)가 게임 관리 프로세스(120)에서 분리된다. 하나 이상의 실시예에서, 게임 서브프로세스 서버(104a), 게임 서브프로세스 서버(104b)및 게임 서브프로세스 서버(104c)가 각각 물리 서버, 인공 지능 서버 및 거래 서버로서, 또는 그 밖의 다른 임의의 게임-관련 서브프로세스로서 동작하도록 구성될 수 있다. 덧붙이자면, 다양한 실시예에 따라, 합성 환경생성 플랫폼(100)은, 게임 관리 서버(122)들 간에, 또는 합성 환경 생성 플랫폼(100)과 그 밖의 다른 유사 합성환경 생성 플랫폼(100)(도면상 도시되지 않음) 간에, 또는 둘 모두 간에서 공유될 수 있는 의사 집합적 프로세스 공간(quasi aggregated process space, 152)을 구현하도록 구성된다. 게임 관리 프로세스(120)로부터 게임 서브프로세스(102a, 102b 및 102c)를 따로 따로 분산시킴으로써, 게임 관 [0035]리 서버(122)는 독립적으로 동작하며, 이로 인해 게임 서브프로세스 서버(104) 중 임의의 것의 성능의 품질 저하에 덜 취약해진다. 따라서 하드웨어 및 소프트웨어 장애가 특정 게임 서버 서브프로세스(102)로 국소화될 수있고, 이로 인해, 게임 관리 프로세스(120)를 인터럽트하지 않고, 진척된 문제 식별 및 해결이 가능해질 수 있다. 이로 인해서, 클라이언트(150), 예를 들어, 클라이언트(150a 및 150b)는 게임 서브프로세스 서버(104)에서- 13 -공개특허 10-2010-0014941발생하는 문제에 의해 인터럽트되지 않고, 합성 환경과 계속 상호대화(interact)할 수 있다. 덧붙이자면, 분산형 게임 서브프로세스(102a, 102b 및 102c)가 게임 서브프로세스 서버(104)의 크기를 독립적으로 스케일링하는것을 촉진하며, 이는 게임 서브프로세스(102a, 102b 및 102c)의 적정 크기를 충분히 제공하도록 온라인으로 가져가질 수 있다. 예를 들어, 합성 환경이 추가적인 인공 지능을 필요로 하는 경우, 추가적인 인공 지능 서버가그 밖의 다른 게임 서브프로세스(102), 가령, 물리 프로세스가 필요한가와 관계없이, 온라인 상태가 될 수있다. 따라서 합성 환경 생성 플랫폼(100)에 의해 생성된 합성 환경과 상호대화하는 임의의 인원수의 클라이언트(150)에 대해 합성 환경 생성을 촉진하기 위한 하드웨어와 소프트웨어의 적정 크기가 구현될 수 있다. 덧붙이자면, 그 밖의 다른 유사한 합성 환경 생성 플랫폼과 공유되는 의사 집합적 프로세스 공간(152)이 플랫폼간(즉, 샤드 간) 상호대화를 촉진시키고, 이로 인해서, 개선된 통신과, 더 안전한 거래가 제공될 수 있다. 게임 관리 서버(122)는 각각 게임 서브프로세스(102) 및 데이터베이스 프로세스(110)와 공동작업하여, 참여자 [0036](participant)가 상호대화하는 합성 환경을 생성하도록 구성된다. 따라서 게임 관리 서버(122)는, 합성 환경과의 상호대화에 있어 클라이언트(150)와 연계되는 다수의 참여자를 관리하도록 구성된다. 클라이언트(150)의 인원수를 지원하도록 게임 서브프로레스(102)가 스케일링될 수 있다. 다양한 실시예에서, 클라이언트(150)는, 하나의 게임-생성 프로세스에 제한되는 것보다, 다수의 게임 관리 서버(122)에 걸쳐 분산될 수 있다. 설명을위해, 클라이언트(150a)가 게임 관리 서버(122a)와 상호대화하고, 클라이언트(150b)가 게임 관리 서버(122c)와상호대화할 수 있다고 가정하자. 클라이언트(150a 및 150b)가 서로 대른 게임 관리 프로세스와 상호대화하는 동안, 클라이언트(150a 및 150b)가 어느 합성 환경과 상호대화하는가에 관계없이, 그들은 의사 집합적 프로세스공간(152)을 공유할 수 있다. 하나의 실시예에서, 클라이언트(150a 및 150b)는 의사 집합적 프로세스 공간(152)을, 공통 프로세스 공간으로서 공유할 수 있다. 따라서 합성 환경 간 상호대화가 쉽게 발생할 수 있다. 일부실시예에서, 게임 관리 서버(122)는 특정 참여자에 의해 요청된 동작을 검증(validate)하기 위해 동작할 수 있으며, 이로 인해서, 상기 참여자는 게임 데이터를 수정할 권한을 가짐이 인등될 수 있다. 하나 이상의 실시예에서, 게임 관리 서버(122a 내지 122n)가, 클라이언트(150)에 의한 합성 환경과의 상호대화를, 판독 전용 형식(read-only form)으로 나타내는 게임 데이터를 관리한다. 이에 따라서, 거래를 타락시키기 위해 게임 데이터가조작될 수 없다. 그렇지 않다면, 이는 참여자를 부정한 방법으로 부유하게 만들 것이다.하나의 실시예에서, 게임 서브프로레스 서버(104a)는 물리 서버(physics server)일 수 있으며, 상기 물리 서버 [0037]는, 예를 들어, 합성 환경의 참여자에 대한 운동 및 충돌 활동(movement and collision activity)을 처리하도록 구성될 수 있다. 예를 들어, 물리 서버(104a)는 물리 관련 이벤트(physics-related event), 예를 들면, 충돌 검출(collision detection), 강체 운동(rigid body movement) 등을 처리할 수 있다. 하나 이상의 실시예에따르는 게임 서브프로세스 서버(104b)는 인공 지능 서버일 수 있으며, 이는, 예를 들어, 합성 환경에서의NPC(non-player character)에 의한 운동을 시뮬레이트하기 위한 인공 지능을 제공하도록 구성될 수 있다. 다양한 실시예에서, 게임 서브프로세스 서버(104c)는, 참여자들 간의 거래를 관리하여, 상기 거래는 원자성 [0038](atomic)을 가짐을 보장하도록 구성될 수 있는 거래 서버일 수 있다. 즉, 게임 서브프로세스 서버(104c)는 거래의 모든 부분이 발생하거나, 모든 부분이 발생하지 않음을 보장하도록 동작할 수 있으며, 이로 인해서, 거래의모든 부분이 성공되지 않는 한, 데이터베이스 프로세스(110)에 저장된 게임 데이터가 업데이트되지 않음이 보장될 수 있고, 따라서 참여자가 부정하게 부유해지는 것을 추구하기 위한 루프-홀(loop-hole)이 감소될 수 있다.상기 거래 서버는 하나의 활동이 두 참여자 모두에게 성공적으로 완료되었음을, 또는 두 참여자 모두에 대해 실패했음을 보장하는 게임 인증자(game authority)이다. 하나의 실시예에서, 합성 환경 생성 플랫폼(100) 내의 모든 서버는, (거래 서버로서) 게임 서브프로레스 서버(104c)를 제외하고는 판독 전용이다. 따라서 게임 서브프로세스 서버(104c)와 같은 거래 서버는, 게임 데이터를 거래하기 위한 단일 인증자로서 동작할 수 있다(즉, 상기거래 서버는 게임 데이터를 수정하기 위한 권한이 부여받는다). 하나 이상의 실시예에서, 게임 서브프로세스 서버(104)를 구성하는 거래 서버는 의사 집합적 프로세스 공간(152)을, 단일 프로세스 공간으로서 구현하도록 구성될 수 있으며, 이로 인해서, 참여자는 의사 집합적 프로세스 공간(152)에 의해 제공된 필적하는 공통 프로세스 공간 내에서 거래를 하면서, 여러 다른 합성 환경을 위한 게임 관리 서버와 연계될 수 있다. 동작 중에, 클라이언트(150a 및 150b)는 참여자의 표현, 예를 들어, 아바타(avartar)가 게임 관리 프로세스 [0039](120)의 게임 데이터를 수정할 수 있게 하는 요청을 생성한다. 본원에서 사용될 때, 용어 “게임 관리서버”는, 적어도 하나의 실시예에서, 참여자의 합성 환경과의 상호대화를 관리하는 컴퓨팅 장치 및/또는 프로세스를 일컫는다. 예를 들어, 게임 관리 서버는 클라이언트(150)로부터 입력을 받아들이고, 이에 응답하여, 클라이언트 상호대화를 기초로 하는 수정된 합성 환경을 나타내는 수정된 게임 데이터를 생성하여, 클라이언트(150a 및 150b)에게 다시 송신하기 위해 게임 서브프로세스(102)와 데이터베이스 프로세스(110)와 협업할 수 있- 14 -공개특허 10-2010-0014941다. 본원에서 사용될 때, 용어 “게임 서브프로레스 서버”는, 적어도 하나의 실시예에서, 게임 프로세스의 서브셋을 수행하는 컴퓨팅 장치 및/또는 프로세스, 예를 들어, 물리 서버 및 인공 지능 서버를 일컬으며, 이들의결과물은 게임 관리 서버에 의해 사용된다. 본원에서 사용될 때, 용어 “노드”는, 적어도 하나의 실시예에서, 합성 환경의 생성에 영향을 미치는 컴퓨팅 [0040]장치 및/또는 프로세스를 일컬으며, 예를 들어, 서버, 클라이언트, 데이터베이스 등이 있다. 본원에서 사용될때, 용어 “게임 데이터”는, 적어도 하나의 실시예에서, 합성 환경의 생성에 관련된 데이터의 서브셋을 일컫는다. 게임 데이터는 예를 들어, 합성 환경의 지형을 생성하기 위한 맵 데이터(map data)를 포함할 수 있다. 게임데이터는 또한, 예를 들어, 캐릭터 데이터(character data), 인벤토리 데이터(inventory data)(가령, 무기 데이터), 뱅크 데이터(bank data), 합성 홈 데이터(synthetic home data), 상품 데이터(award data) 등의 참여자의 상태를 포함할 수 있다. 본원에서 사용될 때, 용어 “합성 환경”은, 하나 이상의 실시예에서, 참여자가, 예를 들어, 아바타를 통해 상호대화하기 위한 컴퓨터 기반의 시뮬레이트되는 환경인 가상 세계(또는 그 일부분)를일컬을 수 있다. 또한 합성 환경은 참여자 상호대화와 함께, 또는 참여자 상호대화 없이 진보하는 가상 세계인샤드(shard), 또는 지속 세계(persistent world)(또는 그 일부분)를 일컬을 수 있다. 본원에서 사용될 때, 용어“참여자(participant)”는, 적어도 하나의 실시예에서, 플레이어, 또는 상기 플레이어의 2, 또는 3-차원 그래픽 표현(가령 아바타), 또는 둘 모두를 일컫는다. 또한 참여자는 플레이어가 상호대화하는 클라이언트를 일컬을수 있다. 본원에서 사용될 때, 용어 “의사 집합적 프로세스 공간”은, 하나 이상의 실시예에서, 애플리케이션을 위한 메모리 공간 및/또는 프로세서에 의한 인스트럭션의 실행을 위해 구현되는 메모리 공간(가령, 하나 이상의 중앙 처리 유닛(CPU))을 일컬으며, 이때, 상기 메모리 공간은 특정 타입의 데이터에 대해 집합적인(aggregated), 공통의 프로세스 공간으로서 동작하도록 구성되고, 그 밖의 다른 하나 이상의 탕비의데이터에 대해 개별 프로세tm 공간으로서 동작하도록 더 구성된다. 게임 서브프로세스 서버(104) 및 게임 서브프로세스(102)가, 예를 들어, 그 밖의 다른 실시예에 따라 MMO 게임 [0041]을 촉진시키기 위한 그 밖의 다른 임의의 게임 관련 프로세스를 구현하도록 구성될 수 있다. 덧붙이자면, 하나이상의 데이터베이스(112a 내지 112c)가, 예를 들어, 합성 환경을 생성하기 위한 데이터를 저장하도록 구성될수 있다. 이에 따라서 하나 이사의 데이터베이스(112a 내지 112c)가 참여자 계정에 관련된 계정 데이터, 통계적데이터, 편집 데이터(audit data), 게임 데이터 등을 저장할 수 있다. 특정 실시예에서, 합성 환경 생성 플랫폼(100)은 링크(140)를 통해, 데이터를 교환하도록 구성되며, 상기 링크(140)는, 예를 들어, 인터넷을 포함하여임의의 개수의 네트워크(도면상 도시되지 않음)를 통해 통신 신호를 전달할 수 있다. 하나의 실시예에서, 링크(140)는 약 5Kbs 내지 10Kbs, 또는 그 이상으로, 데이터를 송신 및/또는 수신하도록 구성된다. 이에 따라서, 링크(140)는 특히, 실질적으로 동시에, 5Kbs 업스트림 및 5Kbs 다운스트림을 지원할 수 있다. 그 밖의 다른 실시예에서, 링크(140)는, 디지털 가입자 라인(DSL) 기술, 케이블 기술, 위성 기술 등을 이용하여 광대역 연결로서구현될 수 있는 비교적 높은 대역폭 링크이다. 또한, 링크(140)는 무선 링크일 수 있다. 하나의 실시예에서, 높은 대역폭 링크(140)가 10Kbs보다 더 빠른 속도로 데이터를 송신 및/또는 수신할 수 있으며, 이에 따라서, 링크(140)는 10Kbs 이상의 데이터 전송 속도를 구현할 수 있다. 덧붙이자면, 네트워크(115)는 초 당 1 내지 16기가비트(gigabit per second), 또는 그 이상의 속도로 메시지 및/또는 패킷을 전달하도록 구성된다. 하나의 실시예에서, 네트워크(115)는 10기가비트 이더넷(“10GbE\") 네트워크이다. 도 1B는 본 발명의 하나 이상의 실시예에 따라, 프로세스 공간과 연결하여, 부분적으로, 또는 전체적으로 합성 [0042]환경을 생성하는 게임 관리 서버의 도시이다. 합성 환경 생성 플랫폼(160)이 클라이언트(150a 및 150b)에 대한합성 환경(162)을 생성하도록 구성된다. 이 예시에서, 합성 환경(162)은 4개의 영역을 포함하는데, 즉, 영역1(\"R1\")(163), 영역 2(“R2\")(165), 영역 3(”R3\")(167), 영역 4(“R4\")(169)를 포함한다. 그 후, 각각 참여자(170)와 참여자(172)는 클라이언트(150a 및 150b)와 연계된다. 합성 환경 생성 플랫폼(160)은 게임 관리(”mgmt\") 서버(122a 내지 122d)에 의해 구현되는 게임 관리 프로세스(120)를 포함한다. 또한 합성 관리 생성 플랫폼(160)은, 연계되어 있는 합성 환경(162)이 생성될 수 있는 의사 집합적 프로세스 공간(161)을 포함한다. 본 발명의 다양한 실시예에 따라, 일부 경우에서, 의사 집합적 프로세스 공간(161)은 공통의 프로세스 공간으로 [0043]서 동작하도록 구성되며, 또 다른 경우에서는 개별 프로세스의 집합으로서 동작하도록 구성된다. 특히, 의사 집합적 프로세스 공간(161)은 게임 데이터의 제 1 서브셋을 위해 공통 프로세스 공간으로서 기능하도로 구성되고,데이터의 제 2 서브셋을 위해서는 개별 프로세스 공간으로서 기능하도록 구성된다. 예를 들어, 거래 서버(190)가 의사 집합적 프로세스 공간(161)을, 넌-지오메트리 관련 데이터(non-geometry related) 데이터와 거래 관련데이터를 위한 공통 프로세스 공간으로서 구현하도록 구성되고, 반면에, 게임 관리 서버(122)는 의사 집합적 프로세스 공간(161)을 지어메트리-관련 데이터를 위한 개별 프로세스 공간으로서 구현하도록 구성된다. 하나 이상- 15 -공개특허 10-2010-0014941의 실시예에서, 합성 환경 생성 플랫폼(160)은, 부분적으로, 또는 전적으로, 의사 집합적 프로세스 공간(161)을구현하기 위한 거래 서버(190)를 포함한다. 특히, 거래 서버(190)는 참여자(170c)를 위한 데이터의 제 1 서브셋(192)을, 그리고 참여자(172)를 위한 데이터의 제 1 서브셋(194)을 모두 처리하는 공통 프로세스 공간을갖는다. 상기 데이터의 제 1 서브 셋(192 및 194)의 예로는, 참여자가 교환하기를 원하는 아이템을 나타내는 데이터가 있다. 참여자(170c 및 172)에 대한 데이터의 제 2 서브셋은, 예를 들어, 게임 관리 서버(122b 및 122d)가 처리하는 지오메트리 데이터에 관련될 수 있다. 동작 중에, 참여자(170)가 로그 인할 때, 합성 환경 생성 플랫폼(160)은 상기 참여자를 게임 관리 서버(122b)에 [0044]할당한다. 이와 달리, 참여자(172)가 로그인할 때, 합성 환경 생성 플랫폼(160)은 상기 참여자(172)를 게임 관리 서버(122d)로 할당한다. 참여자(170 및 172)는 각각 세션 동안 게임 관리 서버(122b 및 122d)와 연계된 채유지된다. 그 후, 둘 모두, 나타나지 않은 그 밖의 다른 참여자가 그럴 수 있는 것처럼, 영역2(165)에서의 하나의 활동에 연계되기를 원한다고 가정한다. 참여자(170a)는 영역1(163)에서 합성 환경(162)으로 입장하고, 그 후참여자(170b)로서 영역2(165)로 이동한다. 영역1(163)과 영역2(165)가 의사 집합적 프로세스 공간(161)에 관련되기 때문에, 가령, 의사 집합적 프로세스 공간(161)이 공통 프로세스 공간으로서 액세스될 때, 다른 경우라면파티션 간 상호대화를 관리하기 위해 요구됐을 컴퓨팅 연산 자원이 요구되지 않는다. 참여자(170c)는 영역3(167)로 추가로 이동할 수 있고, 그 후, 참여자(170d)로서 영역4(169)로 이동할 수 있다. 더 많은 참여자가 영역2(165)에 입장하기 때문에, 증가된 인원수가 이에 대응하여 서버를 교착상태(bog down)에 빠트리는 것은 아니다. 이는, 본 발명의 다양한 실시예에 따르면, 합성 환경(162)을 생성하는 게임 관련 프로세스가 지리적 위치에연결되지 않기 때문이다. 이 예시에서, 하나의 게임 관리 서버(122)가 전체 부담을 지지 않고, 이는 전체적으로게임 관리 프로세스(120)에 걸쳐 상환될 수 있다. 따라서 단일 게임 관리 서버(122)의 성능을 넘어서지 않고,참여자들의 집합이 하나의 영역에 모일 수 있다. 도 2는 본 발명의 하나 이상의 실시예에 따르는 메시징 시스템의 하나의 예시를 나타내는 도면이다. 도 2는 네 [0045]트워크(230), 데이터베이스 프로세스(201), 서버 프로세스(206) 및 클라이언트 프로세스(240)를 통해 함께 연결되도록 구성된 메시징 시스템(250)의 일부분, 또는 전부를 구현하는 합성 환경 생성 플랫폼(200)을 도시하며,이들은 모두 노드이다. 네트워크(230)는 컴퓨터 네트워크, 또는 그 밖의 다른 임의의 타입의 통신 네트워크일수 있다. 데이터베이스 프로세스(201)는 컴퓨터 네트워크, 또는 그 밖의 다른 임의의 타입의 통신 네트워크일수 있다. 데이터베이스 프로세스(201)는 데이터베이스(“d/B\")(202)와 데이터베이스 관리 시스템(\"DBMS\")(204)을 포함하며, 이들은 데이터베이스(202)의 데이터의 조직(organization), 저장(storage) 및 불러오기(retrieval)를 제어한다. 동작 중에, 메시징 시스템(250)은, 데이터를, 서버 프로레스(206)와 같은 하나의 노드(또는 노드 프로세스)로 통합시키기 위한 전역 데이터 구조(universal data structure, 260)를 포함하는 메시지(220a 및 220b) 등의 메시지를 전파하도록 구성된다. 특히, 메시징 시스템(250)은, 각각의 프로세스에 의해 사용가능한 데이터 정렬(data arrangement)로, 데이터베이스 프로세스(201), 서버 프로세스(206), 클라이언트 프로세스(240) 간에서 데이터를 교환하도록 구성된다. 하나 이상의 실시예에서, 메시지(220a 및 220b)와 연계된데이터 정렬은 각각의 프로세스에 의해 직접 이용가능하다. 예를 들어, 서버 프로세스(206)는, 메시지(220a)에의해 사용되는 전역 데이터 구조(UDS: universal data structure)(260a)에 따라 배열된 데이터를 사용할 수 있다. 이에 따라서, 데이터베이스 프로세스(201)와, 서버 프로세스(206)와, 클라이언트 프로세스(240)는, 메시지(220a 및 220b)와 연계된 데이터 구조로부터, 다른 경우라면 특정 노드에 의해 요구될 수도 있는 다른 형태(또는 특수화된 형태)로 변환할 것을 요청할 필요가 없다. 따라서 다른 경우라면, 이러한 변환을 위해 제공될 필요가 있을 실행가능한 코드가 존재하지 않는다. 도 2에서 나타나는 바와 같이, 메시징 시스템(250)은 다수의 전역 메시지 인터페이스, 예를 들어, 메시지 인터 [0046]페이스(210a), 전역 메시지 인터페이스(210b) 및 전역 메시지 인터페이스(210c)를 포함할 수 있으며, 이들 각각은, 합성 환경 생성 플랫폼을 통한 클라이언트 프로세스(240)와의 전송을 위해 메시지(220a 및 220b)를 생성하도록 구성될 수 있다. 전역 메시지 인터페이스(210a, 210b 및 210c)는 각각, 자신의 데이터를 하나의 노드 프로세스로 통합시키기 위한 메시지(220a 및 220b)를 수신하도록 구성될 수 있다. 덧붙이자면, 전역 데이터 구조(260)가 개발될 때, 실행가능한 코드의 재-컴파일(recompiling)이 요구되지 않는다. 다른 경우라면, 하나의 타입의 데이터 구조를 다른 데이터 구조로 변환할 필요가 있었을 것이다. 본원에서 사용될 때, 용어 “전역 데이터 구조”는, 하나 이상의 실시예에서, 노드뿐 아니라, 메시지(220a 및 220b)에 의해 전역적(universally)으로사용가능한 데이터의 표현을 일컬으며, 이는 다른(또는 특수화된) 데이터 구조로의 변환을 필요로 하지 않는다.다양한 실시예에서, 도 2의 전역 메시지 인터페이스(210a, 210b 및 210c)는 서로 동일하거나, 그들이 관련되어 [0047]있는 노드에 맞추기 위해, 서로 상이할 수 있다. 전역 메시지 인터페이스(210a, 210b 및 210c)는 노드 내부에서- 16 -공개특허 10-2010-0014941구현되거나, 합성 환경 생성 플랫폼 내라면 임의의 곳에서 배치될 수 있다. 적어도 하나의 실시예에서, 전역 메시지 인터페이스(210a, 210b 및 210c) 각각은 메시지(220a) 등의 메시지를 임의의, 또는 그 밖의 다른 모든 노드 외부로 브로드캐스트하도록 구성될 수 있다. 이에 따라서, 전역 메시지 인터페이스(210a, 210b 및 210c) 각각은, 각각의 메시지가, 자신이 관련되어 있는 노드에 대해 의도되어 있는가의 여부를 검출하도록 구성될 수 있다. 또 다른 실시예에서, 전역 메시지 인터페이스(210a, 210b 및 210c) 각각은 하나의 도착지로 타겟팅된 메시지를 전송하도록 구성될 수 있다. 하나의 실싱PDp서, 클라이언트와 합성 환경 생성 플랫폼 사이의 메시지, 예를들어, 메시지(220b)는 하나 이상의 사용자 데이터그램 프로토콜(UDP), 또는 인터넷 프로토콜(IP) 패킷으로 구현될 수 있다. 하나의 실시예에서, 서버 프로세스(206)와 데이터베이스 프로세스(201) 간의 메시지가 하나 이상의송신 제어 프로토콜(TCP) 패킷으로 구현될 수 있다. 하나의 실시예에서, 네트워크(230)는 합성 환경 생성 플랫폼(200)을 위한 플랫폼 내(intra platform) 통신을 지원한다. 하나 이상의 실시예에서, 클라이언트 프로세스(240)는 네트워크(232)를 통해 합성 환경 생성 플랫폼(200)으로 연결된다. 네트워크(232)는, 하나 이상의 실시예에서, 인터넷, 또는 그 밖의 다른 임의의 통신 네트워크를 포함한다. 일부 경우, 클라이언트 프로세스(240)는증간 프로세스(intermediary process)(도면상 도시되지 않음)를 통해 데이터베이스 프로세스(201) 및/또는 서버프로세스(206)와 메시지를 교환한다. 이러한 중간 프로세스의 예로는 도 12의 사용자 서버가 있다.하나의 실시예에서, 전역 데이터 구조(260)는, 가령, C++, 또는 그 밖의 다른 임의의 프로그래밍 언어 등의 객 [0048]체 지향 프로그래밍 언어의 클래스를 갖는다. 또 다른 실시예에서, 모든 타입의 전연 데이터 구조(260)가 하나의 단일 클래스와 관련될 수 있다. 전역 메시지 인터페이스(210a, 210b 및 210c)가, 하나의 노드가 전역 데이터구조(260)로 데이터를 구현(가령, 직접 구현)할 수 있게 하도록 구성되는 인스턴스 관리 방식을 결정할 수있다. 하나의 실시예에서, 하나의 노드는 전역 데이터 구조(260)를 구현하는 법을 노드에게 알려주는 스키마(schema)에 대한 레퍼런스(reference)를 포함할 수 있다. 또 하나의 실시예에서, 전역 메시지(220a)가 상기 레퍼런스를 포함한다. 일부 실시예에서, 전역 메시지 인터페이스(210a, 210b 및 210c) 각각은 전역 데이터구조를, 프로세스 및/또는 운영 체제에 독립적으로 사용될 수 있는 플랫폼-독립형 포맷으로 포맷팅하도록 구성될 수 있다. 플랫폼-독립형 포맷의 예로는, 예를 들어, XML과 같은 확장 마크업 언어에 의해 정의되는 포맷이있다. XML은 월드 와이드 웹 콘소시엄(W3C)에 의해 관리된다.도 3은 본 발명의 하나 이상의 실시예에 따라 전역 메시징 인터페이스를 구현하는 합성 환경을 생성하기 위한 [0049]시스템을 도시한다. 이 예시에서, 합성 환경 생성 플랫폼(300)은 전역 데이터 구조 기반 메시지를 송신 및/또는수신하도록 구성된 전역 메시지 인터페이스(UMI)(302, 304 및 306)를 포함한다. 나타나다시피, 전역 메시지 인터페이스(302a, 302b 및 302c)는 각각, 게임 프로세스(102a, 102b 및 102c)에, 또는 인접하여 배치된다. 각각의 전역 메시지 인터페이스(302a, 302b 및 302c)는 게임 서브프로세스 서버(104)와 연계된다. 일부 경우, 전역메시지 인터페이스(302a, 302b 및 302c) 각각은 동등한 구조 및/또는 기능을 가지며, 그 밖의 다른 경우, 전역메시지 인터페이스(302a, 302b 및 302c)는 서로 다른 구조 및/또는 기능을 가질 수 있다. 예를 들어, 물리 서버는, 예를 들어 인공 지능 서버와는 상이한 전역 메시지 인터페이스를 요청할 수 있다. 또한 도 3에 따르면, 합성 환경 생성 플랫폼(300)은, 각각 데이터베이스(112a, 112b 및 112c)에, 또는 그 가까이에 배치되는 전역 메시지 인터페이스(304a, 304b 및 304c)와, 각각 게임 관리 서버(122a, 122b, 122c 및 122n)에, 또는 그 가까이에배치되는 전역 메시지 인터페이스(304a, 304b 및 304c)를 포함한다. 전역 메시지 인터페이스(308a 및 308b)는클라이언트(150a 및 150b)와 관련되어 구현된다. 302a, 304b, 304c, 306a, 306bm 306c, 306n, 308a 및 308b는서로에 대해 동등한, 또는 상이한 구조 및/또는 기능을 갖는다. 도 3의 유사하게 명명된 요소들은, 일부 경우에서, 도 2에서 제공되는 요소들과 동등한 구조 및/또는 기능을 가질 수 있다. 도 4A는 본 발명의 하나 이상의 실시예에 따라, 동적 콘텐츠를 합성 환경으로 도입시키기 위한 방법을 [0050]도시한다. 도면(401)은, 예를 들어, 하나의 실시예에 따라, 합성 환경 생성 플랫폼을 이용하는 MMO 게임의 개발을 도시한다. 코드 개발 및 컴파일 스테이지(431) 동안, 게임 개발자는 소스 코드를 개발하고 컴파일하여, 실행가능한 코드로서 객체 코드(421)를 형성할 수 있다. 소스 코드를 개발하는 중에, 소켓 코드(socket code, 423)가 생성되고 컴파일될 수 있다. 소켓 코드(423)는 플러그 데이터(425)로부터 데이터를 액세스하도록 구성된실행가능한 인스트럭션 및/또는 입력을 포함한다. 이에 따라서, 플러그 데이터(425)가 소켓 코드(423)와 객체코드(412) 모두와 조화되도록, 품질 보증(\"QA\": quality assurance) 프로세스의 일부분으로서 개발될 수 있다.품질 보증 메트릭이 충족된 후, (소켓 코드(423)를 포함하여) 객체 코드(421)과 플러그 데이터(425)가 온라인게임을 위해 배포될 수 있다. 코드 개발 및 컴파일 스테이지(433)에 뒤 이어, 후-코드 컴파일 스테이지(433) 동안 콘텐츠 개발자는 그 밖의 다른 플러그 데이터(427)를 생성하기 위한 합성 환경 생성 플랫폼을 구현할 수 있다. 상기 스테이지(433) 동안, 플러그 데이터(427)는 객체 코드(421)를 정정하지 않고, 소켓 코드(423)와 함께사용되기 위해 생성될 수 있다. 예를 들어, 콘텐츠 개발자는, 실행가능한 코드를 수정하지 않고, Aegis Cruiser- 17 -공개특허 10-2010-0014941를, 플러그 데이터(425)에 의해 형성되었던 카약(kayak)에 대한 플러그 데이터(427)로서 대체할 수 있다. 객체코드의 재-컴파일보다 먼저 수행함으로써, 개발자는 새로운 동적 콘텐츠를, 소켓 코드(423)를 구현하는 합성 환경으로 보다 빨리 전달할 수 있다. 덧붙여, 객체 코드에 영향을 미치지 않고, 미래 플러그 데이터(future pugdata, 470)가 생성될 수 있고, 이로 인해서, 비교적 빠른 콘텐츠 개발이 촉진될 수 있다. 본원에서 사용될 때,용어 “동적 콘텐츠”는, 하나 이상의 실시예에서, 컴퓨터에 의해 상성된 비주얼 및/또는 사운드 콘텐츠로서 합성 환경으로 도입될 수 있는 콘텐츠 데이터를 일컬으며, 이때, 상기 콘텐츠 데이터는 상기 콘텐츠 데이터가 상호대화하는 실행 코드의 수정에 독립적으로 생성될 수 있다. 이에 따라서, 콘텐츠 데이터는 객체 코드에 영향을미치지 않고 개발될 수 있다.도 4B는 본 발명의 하나 이상의 실시예에 따라, 동적 콘텐츠를 합성 환경으로 도입시키도록 구성된 합성 환경 [0051]생성 플랫폼을 도시한다. 이 실시예에서, 시스템(400)은 참여자들이 상호대화하고, 동적 콘텐츠(422)가 그 속으로 도입되는 합성 환경(420)을 생성하도록 구성된 합성 환경 생성 플랫폼(450)을 포함한다. 특히, 데이터 레포지토리(data repository, 402)가, 카약과 Aegis cruiser를 각각 동적 콘텐츠(422)로서 도입시키기 위한 콘텐츠데이터를 포함하는 플러그 객체(410a 및 410b)를 저장하도록 구성된다. 플러그 객체(410a 및 410b)가 다양한 실시예의 전역 데이터 구조와 유사한, 또는 동일한 데이터 정렬을 구현할 수 있다. 플러그 객체(410a 및 410b)는또한 장소, 포지셔닝, 속도 및 보트 항해 경로를 나타내는 데이터(424)를 포함할 수 있다. 데이터 레포지토리(430)는 예를 들어, MMO 게임을 실행하기 위한 객체 코드(434)를 저장하도록 구성된다. 또한 데이터 레포지토리(430)는 객체 코드(434)의 일부분을 형성할 수 있는 소켓 코드(432)를 저장하도록 구성된다. 소켓 코드(423)는(도 4의) 플러그 데이터(425)로부터 데이터를 액세스하도록 구성되고, 동적 콘텐츠(422)의 생성을 실시하기 위해 객체 코드(434)에 의해 사용되기 위한 실행가능한 인스트럭션 및/또는 입력을 포함한다. 데이터 레포지토리(460)는, 합성 환경(420)을 형성하기 위한 월드 데이터(world data, 462)를 저장하도로 구성된다. 월드 데이터(462) 및 소켓 코드(432)는, 소켓 코드(423)가 동적 콘텐츠(422)를 도입시킬 위치(location)를 정의하기 위한관계(relationship, 464)를 공유할 수 있다. 합성 환경 생성 플랫폼(450)은, 동적 콘텐츠(422)를 합성 환경(422)의 일부분, 또는 전체로 도입시키도록 구성 [0052]되는 이벤트 서버(452)를 포함한다. 상기 동적 콘텐츠(42)는 합성 환경(420)을 생성하기 위한 객체 코드 인스트럭션의 실행과 실질적으로 동시에 도입될 수 있다. 이에 따라서, 합성 환경 생성 플랫폼(450)은 플러그 삽입 프로세스(440)를 초기화하도록 구성될 수 있으며, 초기화 동안 플러그 객체(410a 및 410b) 중 하나가 소켓 코드(432)로 삽입되어, 동적 콘텐츠(422)를 인스턴스화할 수 있다. 특정 실시예에서, 이벤트 서버(452)는 객체 코드(434)를 수정하지 않고, 동적 콘텐츠(422)를 도입시키도록 구성된다. 하나의 실시예에서, 플러그 객체(410a 및410b)가 하나 이상의 전역 데이터 구조를 포함하는 전역 객체의 시스템에 속한다. 덧붙이자면, 플러그 객체(410a 및 410b)와 전역 객체의 시스템은 동적 콘텐츠(422)를 도입시키기 위한 객체 코드 인스트럭션(434)의 재-컴파일을 생략시킬 수 있다. 플러그 객체(410)와 소켓 코드(432)를 구현함으로써, 하나 이상의 게임 관리 서버가, 가령, 수정된 객체 코드를 구현한 후 재부팅(rebooting)없이, 동적 콘텐츠(422)를 생성하도록 구성될 수 있다. 도 5는 본 발명의 하나 이상의 실시예에 따라 합성 환경을 생성할 때 사용되기 위한 프로세스 공간을 도시한다. [0053]여기서, 합성 환경 생성 플랫폼(500)이 클라이언트(550a 및 550b)를 위한 합성 환경을 생성하도록 구성된다. 합성 환경 생성 플랫폼(500)은 게임 관리(“mgmt\") 서버(522a 내지 522n)에 의해 구현되는 게임 관리 프로세스(520)를 포함한다. 합성 환경 생성 플랫폼(500)은 또한, 거래(504) 등의 거래가 원자성 거래(atomictransaction)로서 구현될 수 있는 의사 집합적 프로세스 공간(502)을 포함한다. 이에 따라서 거래는 모든 부분이 수행되거나, 어느 부분도 수행되지 않는다. 설명을 위해, 제 1 참여자(참여자1)(506)가 클라이언트(550a)와연계되고, 제 2 참여자(참여자2)(510)가 클라이언트(550b)와 연계되는 경우를 가정하자. 제 1 참여자(506)와 제2 참여자(510)는 각각 아이템(아이템A)(508)과 아이템(아이템B)(512)를 소유하고 있다. 그 후, 상기 참여자(506및 510)가 아이템(508 및 512)을 서로 교환하도록 배열되지만, 아직 그들의 희망은 확인되지 않았다고가정하자. 두 참여자(506 및 510) 모두 교환에 동의하면, 거래가 끝난다. 이와 같은 거래 동안, 의사 집합적 프로세스 공간(502)은 공통 프로세스 공간으로 동작하여, 거래(504)가 조작하기 덜 쉬워지도록 구성된다. 하나의실시예에서, 거래 서버(도면상 도시되지 않음)는 의사 집합적 프로세스 공간(502)과 상호대화하거나, 또는 이를제공하도록 동작한다. 하나의 실시예에 따르면, 의사 집합적 프로세스 공간(502)은 공통 프로세스 공간을 모방하며, 따라서 참여자들이 서로 다른 합성 환경 생성 플랫폼(500)에 의해 생성된 서로 다른 합성 환경 간에 이동하는 것이 가능해진다. 본원에서 사용될 때, 용어 ”거래“는, 적어도 하나의 실시예에서, 하나 이상의 참여자가 함성 환경과 상호대화하는 것을 포함하는 활동을 이루는 작업의 세트를 일컫는다. - 18 -공개특허 10-2010-0014941도 6은 본 발명의 하나 이상의 실시예에 따라, 압축형 전역 메시지(compressed universal message)를 구현하는 [0054]메시징 시스템의 일부분의 예를 나타내는 도면이다. 여기서, 메시지 시스템 부분(600)은 서버 프로세스(606)와,클라이언트 프로세스(650)를 포함하며, 둘 모두, 메시지를 교환하기 위한 네트워크(630)를 통해 연결된다. 이예시에서, 메시지 시스템 부분(600)은, 예를 들어, 클라이언트 프로세스(650)가 합성 환경의 수정을 가리키는것에 응답하여, 서버측(또는 클라이언트측) 전역 데이터 구조(660)와 연계된 데이터의 서브셋을 이동시킬 수 있다. 서버 프로세스(606) 및 클라이언트 프로세스(650)는 각각, 클라이언트 프로세스(650)로부터 송신된 게임 데이터 수정에 응답하여, 합성 환경을 생성하기 위한 전역 메시지 인터페이스(610a)와 전역 메시지 인터페이스(610b)를 포함한다. 서브 프로세스(606)는 전역 데이터 구조(UDS)(660)에 따라 정렬된 데이터를 사용할 수있다. 수정된 게임 데이터의 예로는, 아바타에 의한 운동을 가리키는 클라이언트 프로세스(650)에 의해 생성된게임 데이터가 있다. 하나 이상의 실시예에서, 서버 프로세스(606) 및/또는 클라이언트 프로세스(650)는 메시지를, 합축형 전역 메시지(620)로서 교환할 수 있다. 서버 프로세스(606)와 클라이언트 프로세스(650) 모두 데이터를 교환하기 위한 전역 데이터 구조(660)를 구현할 수 있기 때문에, 감소된 데이터 양이, 상기 압축형 전역메시지(620)로 교환될 수 있다. 특히, 전역 데이터 구조(622)와 연계되어 수정된 게임 데이터(624)가 전역 메시지로 이동될 필요가 있다. 하나의 실시예에서, 압축형 전역 메시지(620)는, 수정된 게임 데이터(624)와 관련된속성(attribute)을 특정하는 키(key, 628)를 포함한다. 이러한 정보를 이용하여, 서버 프로세스(606)는 합성 환경을 수정할 수 있다.도 7은 본 발명의 하나 이상의 실시예에 따라, 마스터 스케일링 서버(master scaling server)를 구현하는 합성 [0055]환경을 생성하기 위한 시스템을 도시한다. 합성 환경 생성 플랫폼(700)은 프로세스 간 메시징 네트워크(750)와,마스터 스케일링 서버(752)를 포함하며, 둘 모두, 물리 프로세스와 인공 기능 프로세스와 같은 게임 서브프로세스에 대한 요구의 변형을 만족시키기 위해 게임 서브프로세스 기능을 스케일링하도록 구성된다. 합성 환경 생성플랫폼(700)은 또한 다양한 게임 서브프롤세스(702)와, 데이터베이스 프로세스(710)와, 게임 관리 프로세스(720)를 포함한다. 동작 중에, 마스터 스케일링 서버(752)는 적정하게, 게임 서브프로세스 서버를 추가, 또는제거하도록 구성된다. 예를 들어, 더 많은 물리 프로세싱이 요구될 때, 마스터 스케일링 서버(752)가 추가적인물리 서버를 추가할 수 있다. 그러나 인공 지능이 덜 요구되는 경우, 상기 마스터 스케일링 서버(752)가 인공기능 서버를 뺄 수 있다. 마스터 스케일ㄹ이 서버(752)는 서버의 타입에 관한 정보(가령, 서버가 물리 서버인지, 인공 기능 서버인지 [0056]등), 게임 서브프로세스 서버(702)가 속하는 합성 환경 등도 포함하는 서버의 목록을 모니터링하도록 구성된다.마스터 스케일링 서버(752)가 또한, 가령, 추가적인 서비스나 용량을 필요로 하는 하나 이상의 게임 관리 서버로부터 프로세스 간 메시징 네트워크(750)를 통한 추가적인 게임 서브프로세스에 대한 요청 메시지를 모니터링하도록 구성된다. 이에 응답하여, 마스터 스케일링 서버(752)는, 예를 들어, 게임 서브프로세스 서버(704a,704b 및 704) 등의 새롭게 추가된 게임 서브프로세스와, 게임 관리 서버와 같은 요청 서버 간의 연결의 확립을조정할 수 있다. 하나의 실시예에서, 스케일링 가능한 게임 서브프로세스 서버는, 온-라인 상태가 될 때, 자신의 식별자 [0057](identity)와 그 밖의 다른 관련 정보를 마스터 스케일링 서버(752)로 전달하도록 구성된다. 상기 그 밖의 다른관련 정보는 서버 타입과, 상기 서버가 속하는 연계된 합성 환경 등을 포함할 수 있다. 이에 응답하여, 마스터스케일링 서버(752)는 스케일링 가능한 서브프로세스 서버를, 예를 들어, 이러한 서버 타입을 요청하는 게임 관리 서버로 동적으로 할당한다. 특히, 마스터 스케일링 서버(752)는 커맨드 및 연결 정보(가령, 호스트 및 포트정보)를 상기 스케일 가능한 게임 서브프로세스 서버로 전송하여, 요청 게임 관리 서버로 연결할 수 있다. 일부경우, 마스터 스케일링 서버(752)는 연결 정보를 요청 게임 관리 서버로 통신하여, 상기 스케일 가능한 게임 서브프로세스 서버로부터의 연결을 수신할 수 있다. 하나 이상의 실시예에서, 마스터 스케일링 서버(752)는 게임관리 서버의 로딩(loading)을 모니터링하고, 자동으로 게임 서브프로세스 서버를 추가, 또는 제거하도록 구성될수 있다. 하나의 실시예에서, 프로세스 간 메시징 네트워크(750)는 네트워크(715)를 통해 구현되는 전역 메시징시스템과 공존하거나, 상기 전역 메시징 시스템과 동일하다.도 8은 본 발명의 하나 이상의 실시예에 따라, 스케일 가능한 게임 서브프로세스 서버를 추가하는 마스터 스케 [0058]일링 서버의 하나의 예시를 나타내는 도면이다. 특히, 다이어그램(800)은, 게임 관리 서버에 의해 사용되는 게임 서브프로세스(802)를 제공하는 게임 서브프로세스 서버(804)를 도시한다. 또한 나타나다시피, 마스터 스케일링 서버(852)는 스케일 가능한 물리 서버(810)를 추가하여, 물리 프로세싱 기능을 향상시킬 수 있다. 하나의 실시예에서, 스케일 가능한 물리 서버(810) 및 게임 서브프로세스 서버(804)는 각각 균질한(homogeneous) 하드웨어 플랫폼이다. 균일한 하드웨어 플랫폼을 이용하여, 마스터 스케일링 서버(852)에 의해, 필요에 따라 증가-스- 19 -공개특허 10-2010-0014941케일(scaling up)과 감소-스케일(scaling down)에 대한 유연성이 증가될 수 있다.도 9는 본 발명의 하나 이상의 실시예에 따라, 게임 서브프로세스 서버의 특정 타입을 구현하는 합성 환경 생성 [0059]플랫폼을 도시한다. 합성 환경 생성 플랫폼(900)은 게임 서브프로세스(901)와, 게임 데이터를 저장하도록 구성된 게임 데이터베이스(910)와, 게임 관리 서버(922a 내지 922n)를 포함하는 게임 관리 프로세스(920)를 포함한다. 이 예시에서, 게임 서브프로세스(901)는 게임 서브프로세스 서버의 다음의 특정 타입을 포함한다: 물리 서버(902a)와, 인공지능(AI) 서버(902b)와, 거래 서버(902c). 이들 게임 서브프로세스를 개별적인 서버로 구현함으로써, 합성 환경 생성 플랫폼(900)은 게임 서브프로세스와 연계된 문제에 덜 영향 받는다. 덧붙여, 특정 게임서브프로세스가 그 밖의 다른 게임 서브프로세스 요구에 독립적인 수요를 충족시키도록 적저아게 스케일링될 수있다.물리 서버(902a)는 합성 환경에 대한 운동 및 충돌 검출 활동을 처리하도록 구성된 하나 이상의 물리 서버를 나 [0060]타낸다. 다양한 실시예에서, 물리 서버(902a)는 또한, 가시성 판정(visibility determination), 인스턴스화(instancing), 운동 검증(movement validation) 및/또는 인공 지능 NPC를 위한 경로 세그먼트화(pathsegmenting) 중 임의의 기능을 수행할 수 있다. 가시성 판정 중에, 물리 서버(902a)는 합성 세계의 객체 및/또는 그 밖의 다른 참여자가 참여자에게 가시적(visible)인가의 여부를 계산하다. 하나의 개체가 참여자의 가시성범위(visibility range) 내에 있을 때, 상기 개체는 참여자에게 가시적이고, 이때, 물리 서버(902a)는 상기 개체가 가시 범위 내에 있는가의 여부를 판단한다. 도 11은 본 발명의 하나의 실시예에 따르는 가시성을 판단하기위한 또 다른 기법을 도시한다. 도 9를 다시 참조하면, 물리 서버(902a)는 또한 “인스턴스화”를 제공하도록구성될 수 있고, 상기 인스턴스화에 의해, 참여자의 집합(그리고 연계된 물리 프로세싱)이, 합성 환경의 일부분내에서, 가령, 가상의 집에서, 또는 가령 보스 괴물 등의 NPC와 싸우기 위해 함께 모일 영역에서, 활동을 수행할 수 있다. 운동 검증은 합성 환경의 맥락에서 참여자의 운동을 검증하는 행위이다. 물리 서버(902a)는, 요망 운동의 경로 [0061]내에 있는 가상 영토 및 임의의 개체(즉, 그 밖의 다른 캐릭터 및/또는 물체)에 대한 운동을 검증하도록 구성될수 있다. 참여자의 아바타가 가상 영토에 대해 운동하는 속도를 기초로, 합성 환경 내 자신의 위치를 반영하도록 참여자의 위치가 수정될 수 있다. 물리 서버(902a)는, 수정된 데임 데이터를 클라이언트에게 전송하기에 앞서 위치가 올바르다고 검증하기 위한 시물레이션을 실행할 수 있다. 물리 서버(902a)는 참여자의 운동을 검증하여, 참여자가 특정 활동에 연계되어 있거나, 또는 합성 환경의 특정 영역 내에서 이동하도록 허용되었음을 보장하도록 구성될 수 있다. 하나의 실시예에서, 물리 서버(902a)는 단위 시간 당 참여자의 서브셋을 검증하고, 시간에 따라 서로 다른 서브셋의 사이클을 검증한다. 임의의 참여자가 합성 환경의 특정 영역, 또는 그 근처를 이동하도록 허가받지 못하면, 상기 참여자는 오용(exploit)을 수행하는 것으로 의심된다고 태깅될 수 있다. 덧붙이자면, 물리 서버(902a)는 인공 지능(AI) 서버(902b)에게 경로 세그먼트화를 제공하여, 영토 및/또는 정적 물체로 인해, NPC가 NPC의 움직임을 방해할 물체를 피할 수 있게 한다. 다양한 실시예에서, 앞서 언급된 물리 프로세스 중 하나 이상이 개별 서버에서 개별 프로세스로서 구현될 수 있다.인공 지능(AI) 서버(902b)는 컴퓨터에 의해 구현되는 NPC(non-player character)와, NPC의 행동을 결정하기 위 [0062]한 인공지능을 갖는 그 밖의 다른 것을 제공하도록 구성된 하나 이상의 인공 지능 서버를 나타낸다. 인공 지능에 대한 요구가 증가되는 동안, 추가적인 인공 지능 서버(902b)가 합성 환경을 지원하기 위해 추가될 수 있다.예를 들어, 이벤트가 많은 수의 NPC를 요청하는 경우, 추가적인 인공 지능 서버(902b)가 추가될 수 있다. 하나의 실시예에서, 참여자는 NPC가 “몬스터를 플레이하는” 제어를 가정할 수 있다.거래 서버(902c)는 참여자의 위치에 관계없이, 런-타임 참여자 게임 데이터를 처리하도록 구성된 하나 이상의 [0063]거래 서버를 나타낸다. 이에 따라서 거래 서버(902c)는, 예를 들어, 지속 세계(persistent world)(가령, 합성환경)와 인스턴스(즉, 상기 합성 환경의 부분, 가령 가성 건물) 간의 캐릭터 운동을 촉진시키기 위한 캐시(903)를 포함한다. 캐시(903)를 이용함으로써, 참여자가 합성 환경과 상기 합성 환경의 부분 사이에 이동함에따라, 게임 데이터가 데이터베이스로부터 재-로딩되는 것이 방지된다. 일부 실시예에서, 게임 데이터의 표현은,거래 서버(902c)외의 프로세스에서 판독 전용이라고 표시되어, 예를 들어, 거래의 조작이 방지될 수 있다. 덧붙여, 거래 서버(902c)는 의사 집합적 프로세스 공간 내에서 원자성 거래(atomic transaction)를 촉진한다. 거래서버(902c)가 거래를 수행하는 동안, 거래 서버(902c)가 거래에 응답하여, 데이터를 수정하기 전에, 게임 관리서버(922a 내지 922n)이 참여자가 그들의 신원을 확인하는 것을 검증하도록 구성될 수 있다. 도 10은 본 발명의 하나 이상의 실시예에 따르는 물리 프로세스의 구현을 도시하는 도면이다. 도면(1000)은 가 [0064]시성 프로세스(visibility process)와 인스턴스화 프로세스가 물리 서버(1002)로부터 개별적인 가시성 서버- 20 -공개특허 10-2010-0014941(1004)와 인스턴스 서버(1006)로 각각 오프-로딩(off-loading)되는 것을 도시한다. 가시성 서버(1004)는 합성환경에서 물체 및/또는 그 밖의 다른 참여자가 참여자에게 가시적인가의 여부를 판단하도록 구성되나. 인스턴스서버(1006)는 “인스턴스화”를 제공하도록 구성되며, 상기 인스턴스화로 인해, 참여자의 집합과 이와 연계된물리 프로세싱이 합성 환경의 일부분 내에서 이뤄지는 그룹, 또는 국소화된 활동을 수행하는 것이 가능해진다.합성 환경에 대한 물리 프로세스와 별도로 존재하는 가시성 프로세스와 인스턴스화 프로세스를 이용함으로써,물리 서버(1002)의 부담이 덜어진다. 덧붙이자면, 가시성 서버(1004)와 인스턴스 서버(1006)는 물리 서버(1002)에 관련된 문제에 덜 영향 받는다. 도 11은 본 발명의 하나 이상의 실시예에 따라 가시성을 판단하기 위한 기법을 나타내는 도면이다. 도면(1100) [0065]은 참여자(1104)에 대한 가시성을 판단하기 위한 기법의 예시를 도시한다. 하나의 경우, 가시성 서버가 먼저,참여자(1104)를 정의하기 위해 가시성 범위(1102)를 정의한다. 이에 따라서, 참여자는 거리(1106)에서 물체를볼 수 있다. 하나 이상의 실시예에서, 물체, NPC 및 그 밖의 다른 플레이어 각각이 “나타날 수 있는(CBS: can-be-seen)”범위와 연계된다. 더 큰 물체, 가령, 산(1114)은, 쥐(1124)와 같은 더 작은 물체의 “CBS\" 범위(1122)보다 더 큰 “CBS\" 범위(1112)를 가질 수 있다. 하나의 실시예에서, 가시성 서버는 구형 교차 테스트(sphere intersection test)를 구현하도록 구성되며, 상기 테스트에서, ”CBS\" 범위, 가령, 산(1114)에 대한“CBS\" 범위(1112)가 가시성 범위(1102)와 교차할 때 물체가 참여자에게 가시적이 된다. \"CBS\" 범위는 원(즉,2D), 또는 구(즉, 3D)로서 표현될 수 있다. 특정 실시예에서, 참여자(1104)는 2개의 범위를 갖는다: 즉, (1) 구(1102)에 의해 정의된 참여자의 가시성 범위와, (2) 다른 개체가 상기 참여자(1104)를 볼 수 있는 ”CBS“ 범위(1160)를 가지며, 이때 상기 다른 개체, 또는 상기 개체의 가시성 범위가 ”CBS“ 범위(1160)와 교차할 때 상기다른 개체가 상기 참여자(1104)를 볼 수 있다. 그 후, 거인(1150)은 자신으로부터 거리(1154)에서 가시성 거리(1152)를 가지며, 자신으로부터 거리(1155)에서 ”CBS\" 범위(1153)를 갖는다. 거인(1150)이 참여자(1104)에 다가갈 때, 거인의 가시성 범위(1152)가 “CBS\" 범위(1160)와 교차하고, 그 후, 거인(1150)은 참여자(1104)를 볼수 있다. 그러나 가시성 범위(1152)가 가시성 갭(visibility gap, 1160) 내에 있을 때, 참여자는 거인(1154)을볼 수 없다. 가시성 범위(1152)가 가시성 범위(1102)와 교차하면, 참여자(1104)가 거인(1150)을 볼 수 있다. 앞서 언급된 바와 같이, 도면(1100)은, 가시성을 판단하기 위해 가시성 범위만 사용될 때 발생할 수 있는 부자연스러운 시각 효과(visual effect)(가령, 개체가 가시성 범위(1102)를 가로지를 때, ”갑자기 튀어나오는 것“처럼 보이는 것)를 감소시키는 가시성을 판단하기 위한 기법의 예를 도시한다. 도시되지는 않았지만, 쥐(1124)가또한 가시성 범위를 가질 수 있다. 다양한 실시예에서, NPC와 참여자 각각은 가시성 범위와 ”CBS\" 범위를 가질수 있다.도 12는 본 발명의 하나 이상의 실시예에 따라, 게임 서브프로세스 서버의 추가적인 타입을 구현하는 합성 환경 [0066]생성 플랫폼의 도시이다. 합성 환경 생성 플랫폼(1200)은 게임 서브프로세스(1202)와, 게임 데이터를 저장하도록 구성된 게임 데이터베이스(1212a)와, 감사 데이터를 저장하도록 구성된 감사 데이터베이스(audit database,1212b)와, 통계적 데이터(각각의 참여자에 의한, 모든, 또는 거의 모든 상호대화의 기록)와, 게임 관리 서버(1222a 내지 1222n)를 포함하는 게임 관리 프로세스(1220)를 포함한다. 덧붙이자면, 합성 환경 생성 플랫폼(1200)은 사용자 서버(1270)와, 패치 서버(1272)와, 통계/감사 서버(1274)를 포함한다.사용자 서버(1270)는 게임 관리 서버(1222a 내지 1222n) 중 임의의 것과 클라이언트(1250) 간의 메시지를 라우 [0067]팅하도록 구성될 수 있다. 그러나 합성 환경과 상호대화하기 위해, 참여자가 로그인하면, 사용자 서버(1270)는참여자 및 상기 참여자의 클라이언트(1250)를 게임 관리 서버(1222a 내지 1222n) 중 하나에게 할당할 것이다.따라서 사용자 서버(1270)는 게임 관리 서버(1222)와 참여자 중 하나로, 그리고 하나로부터 메시지를 연속 전달(relay)할 수 있다. 세션 동안, 상기 참여자는 동일한 게임 관리 서버와의 관계를 유지할 수 있다. 또한 사용자서버(1270)는 클라이언트 연결을 게임 관리 서버(1222a 내지 1222n)에 걸쳐 고르게 분산시키는 방식으로 클라이언트(1250)를 연결하도록 구성될 수 있으며, 이에 따라서 로드 밸런싱(load balancing)이 구현될 수 있다. 일부경우, 또한 사용자 서버(1270)는 서명된 참여자를 인증하도록 구성될 수 있다. 하나 이상의 예에서, 사용자 서버(1270)는 게임 관리 서버(1222a 내지 1222n)와 클라이언트(1250) 간에 교환되는 데이터를 선택적으로 암호화할 수 있다. 하나의 실시예에서, 사용자 서버(1270)는 메시지 중 압도적인 크기인 운동 관련 메시지(movement-related message)를 우선 암호화한다. 이에 따라서, 암호화와 연계된 딜레이가 감소된다. 패치 서버(1272)가 패치를 클라이언트(1250)에게 증분 방식으로, 가령 파일 단위로 전송하도록 구성될 수 있다. 하나 이상의 실시예에서, 패치 서버(1272)는, 적당한 때에, 가령, 로그인 시뿐 아니라 게임 플레이 중에도(가령, 참여자가 합성 환경과 상호대화하는 동안), 패치를 조금씩 제공하도록(trickle) 구성된다. 통계/감사 서버(1274)가 참여자의 통계치를 수집하고 사용하도록 구성 및/또는 이벤트 서버와 연계되어 이벤트를 트리거하도록 구성된다.- 21 -공개특허 10-2010-0014941도 13은 본 발명의 하나 이상의 실시예에 따라, 패치(patch) 동안 게임 플레이를 가능하게 하는 기법을 도시하 [0068]는 도면이다. 도면(1300)은 새로운“세계”, “대륙”, 또는 합성 환경으로서 추가되는 영역을 도시한다. 합성환경 확장의 진행은 화살표(1330)로 나타난다. 영역(“1”)(1302)은 원본 다운로딩된 게임을 이용하여 구현된것임을 가정하자. 그 후, 영역(“2”)(1312)은 참여자가 패치를 다운로딩한 것에 대한 확장된 합성 환경을 나타낸다. 마지막으로 참여자는 영역(“3”)(1322)에 대한 다음 패치를 구현하지 않았지만, 영역(1302)으로부터 영역(1322)으로 입장하기를 원한다고 가정하자. 참여자가 영역(1302)에서 영역(1312)으로 이동함에 따라, 참여자는 나무(1304)와 나무(1314)를 관찰할 것이다. 그러나 참여자가 외곽(1316)을 따라 통과하면, 참여자는 아직 완성되지 않은 장소에 위치할 것이다. 따라서 나무를 렌더링하기 위한 데이터 패칭이 아직 완료되지 않은 경우,합성 환경 생성 플랫폼은 프록시 자산(proxy asset)(즉, 대용 물체)(1324)을 디스플레이할 것이다. 따라서 참여자는 새로운 영역(1322)으로 입장하는 것이 금지될 필요가 없으며, 패칭 프로세스가 완료될 때까지 대용 물체(fill-in object)를 경함할 수 있다.도 14는 본 발명의 하나 이상의 실시예에 따라, 이벤트 서버와 이벤트 편집기를 구현하는 합성 환경 생성 플랫 [0069]폼을 도시한다. 합성 환경 생성 플랫폼(1400)은 게임 서브프로세스(1401)와, 게임 데이터를 저장하도록 구성된게임 데이터베이스(1410)와, 게임 관리 서버(1422a 내지 1422n)를 포함하는 게임 관리 프로세스(1420)를 포함한다. 또한 합성 환경 생성 플랫폼(1400)은 이벤트 서버(1430)와 이벤트 편집기(1480)를 포함한다. 이벤트 서버(1430)는 동적 콘텐츠를 합성 환경으로 도입시키는 것을, 예를 들어, 플레이어 활동(가령, 지정 트리거, 또는조건을 트리거링하기)의 함수로서, 및/또는 지정 스케줄링에 따라 제어하도록 구성된다. 예를 들어, 특정 위치에 모여 있는 참여자의 인원수가 트리거 포인트를 능가하는 경우, 이벤트 서버(1430)가 동적 콘텐츠의 도입을트리거할 수 있다. 일부 실시예에서, 이벤트 서버(1430)는 생성된 배, 또는 크리처(creature)의 타입을 수정할수 있다. 이벤트 서버(1430)는 동적 콘텐츠를 생성하기 위해 이벤트 라이브러리 데이터베이스(1412)로부터 플러그 객체(plug object)를 액세스하도록 구성될 수 있다. 하나의 실시예에서, 이벤트 서버(1430)는, 참여자가 미리보고 합류할 수 있도록 프로그래밍된 이벤트를 디스플레이하는 이벤트 서버 가이드(1490)를 구동하기 위한 데이터를 생성하도록 구성된다. 이벤트 편집기(1480)는 가변 크기의 동적 콘텐츠를 도입시키기 위해 다수의 소켓과 연계된 플러그 객체를 모으도록(aggregate) 구성되며, 이로 인해, 플러그 객체의 집합이 크리처, 나무, 구조물 등을 합성 환경으로 도입시킬 수 있다.도 15는 본 발명의 하나 이상의 실시예에 따라, 다양한 정도의 동적 콘텐츠를 도입시키기 위한 이벤트를 생성하 [0070]기 위한 흐름도이다. 흐름도(1500)는 이벤트 라이브러리에 저장된 전역 데이터 구조를 포함하는 플러그 객체를이용하여 이벤트를 생성하기 위한 방법의 예시이다. 단계(1502)에서, 이벤트가 정의되고 요구사항이 지시된다.단계(1504)에서, 가령 게임 설계자가 미리 만들어진 플러그 객체를 이용함으로써, 새 이벤트를 생성하고, 새 이벤트가 단계(1506)에서 확립된다. 단계(1508)에서, 이벤트가 테스트되어, 새 이벤트가 품질 보증(QA) 세부사항을 만족시키는지가 검증된다. 이벤트가 단계(1510)에서 실패하면, 흐름(1500)은 단계(1502)로 돌아가서, 이벤트정의 및/또는 구현을 재정의, 또는 수정할 수 있다. 이벤트가 성공한 경우, 이는 이벤트 라이브러리에 저장된다(단계(1512)). 단계(1522)에서, 이벤트가합성 환경으로의 도입을 위해 스케줄링된다. 단계(1524)에서, 이벤트서버(1526)는 지정된 시간에 이벤트를 트리거하도록 구성된다. 스케된 시점에서, 이벤트 서버(1526)는 이벤트라이브러리(1512)로부터 이벤트와 관련된 데이터를 인출(fetching)하고, (가령, 동적 콘텐츠를 생성함으로써)합성 환경 생성 플랫폼(1528)이 상기 이벤트를 구현하게 한다. 그 후, 단계(1530)에서 상기 동적 콘텐츠가 컴퓨터에 의해 생성된 세계에서 사용되기 위해 클라이언트에게 배포된다. 하나의 실시예에서, 패치 서버(1580)에서 구현되는 패치 서버 프로세스를 이용하여 동적 콘텐츠의 합성 환경으 [0071]로의 도입을 위한 흐름(1500)이 제공된다. 이 예시에서, 패치 서버(1580)는 이벤트를 나타내는 데이터가 이벤트라이브러리에 저장될 때를 검출하도록 구성된다(1512). 덧붙이자면, 패치 서버(1580)가 이벤트가 필요로 하는데이터를 작은 파일, 또는 데이터의 조각으로서 클라이언트에게 투입, 또는 “침투(trickle down)”시키도록 구성된다. 따라서 패치 서버(1580)는 비-피크 사용 시간(off-peak usage time)에서 데이터를 투입하고, 할당된 대역폭 용량을 초과하는 것을 방지할 수 있다. 다른 경우라면, 가령 250MB의 큰 다운로드가 발생할 때, 피크 사용시간이 발생했을 것이며, 이는 비용이 많이 든다. 또 다른 실시예에서, 패치 서버(1580)는 투입될 데이터의 크기를 결정하고, 이벤트에 남아 있는 을 결정하며, 따라서 단위 시간 당 투입될 필요가 있는 평균 데이터 크기를 계산할 수 있다. 따라서 패치 서버(1580)가 최적의 전송을 위해 작은 파일(1582)로 데이터의 크기를 변화시킬 수 있다. 특정 실시예에서, 패치 서버(1580)는 데이터베이스(1584)에서 피크 임계값 모니터링 데이터를 액세스하여, 큰 크기의 데이터가 피크 사용 시간 대에 투입되는 것을 방지하기 위해 작은 파일(1582)의 크기를 변화시키기 위한 때를 판단하도록 구성될 수 있다. - 22 -공개특허 10-2010-0014941도 16은 본 발명의 하나 이상의 실시예에 따르는 전역 데이터 구조의 특정 구현예를 나타내는 다이어그램이다. [0072]전역 데이터 구조(1602)는 식별자(1604)에 의해 식별되는 특성 클래스 객체(즉, “특성 클래스 xxxxx\")로서 나타난다. 상기 특성 클래스 객체는, 각각 특성 클래스 xxxx의 특성에 대응할 수 있는 속성(1606)을 포함하는 데이터의 정렬을 포함하며, 예를 들어 이는 도 16의 전역 데이터 구조 명세 파일(1622)과 관련하여 이하에서 설명되는 것이 있다. 덧붙이자면, 속성(1606)은 특성 값(가령, 문자열, 정수 등)에 대응할 수 있으며, 예를 들어,도 17의 전역 데이터 구조(1702)에 관련하여 설명된 것들이 있다. 다양한 실시예에서, 전역 데이터 구조(1602)는 네스티드(netsted) 전역 데이터 구조(또는 그 곳으로의 참조)를 포함할 수 있다. 설명을 위해, 특성 클래스xxxxx는, 예를 들어, 도 20에서 설명된 바와 같이, 배의 특성을 정의할 수 있다. 전역 데이터 구조(1602)는, 상기 배가 갖고 있는 ”포지셔닝“에 대한 특정을 정의하는 네스티드 전역 데이터 구조를 포함할 수 있다. 도 16은 본 발명의 하나 이상의 실시예에 따르는 전역 데이터 구조 명세 파일의 예를 나타내는 도면을 [0073]포함한다. 전역 데이터 구조 명세 파일(1622)는, 저역 데이터 구조에 내장되어 있는 데이터를 액세스하기 위해,합성 환경 생성 플랫폼에서 노드를 사용하는 인스턴스 관리 스키마를 위해 제공된다. 전역 데이터 구조 명세 파일(1622)은 각각의 특성 클래스 객체에 대한 메타데이터를 포함할 수 있다. 사익 메타데이터는 할당된 속성에대한 대응하는 특성 값을 제공하도록 구성될 수 있다. 일부 실시예에서, 특성 클래스 객체는, 합성 환경내에서, 물체, 정보 및 그 밖의 다른 매개변수를 렌더링, 생성, 또는 인스턴스화하기 위해 사용되는 데이터, 또는 정보를 갖는 객체일 수 있다. 덧붙이자면, 특성 클래스 객체는, 가령 고속, 또는 큰 용량의 네트워크 연결과함께 사용될 때 빠른 게임 플레이, 합성 환경 생성 등을 가능하게 하는 감소된 메시지 데이터를 제공하도록 구성될 수 있다. 예를 들어, 특성 클래스 객체는 객체를 인스턴스화하기 위해 사용되는 데이터의 전부, 또는 부분을 포함할 수 있다. 합성 환경 생성 플랫폼(또는 그 내부의 노드)은 게임 데이터의 값을 생성, 디스플레이 및/또는 구현하기 위한 메타데이터를 구현할 수 있다. 덧붙여, 전역 데이터 구조 명세 파일(1622)은 식별자(1624)에 의해 참조될 수 있으며(즉, “특성 클래스 명세 yyyyy\"), 가령, 위치 ”instance.mgmt.schema\"에서 인스턴스관리 스키마에 대한 레퍼런스(1626)를 포함할 수 있다. 일부 실시예에서, 인스턴스 관리 스키마는 특성 클래스객체의 데이터를 액세스하기 위한 노드의 사용을 설명하는 데이터 모델이다. 덧붙여, 전역 데이터 구조 명세파일(1622)은 특성 클래스 객체(1630)를 위한 특성 값(또는 그 레퍼런스)을 포함할 수 있다.도 17은 본 발명의 하나 이상의 실시예에 따라, 특성 클래스 시스템의 요소를 도시하는 다이어그램이다. 일부 [0074]실시예에서, 특성 클래스(1704)는 전역 데이터 구조(1702)로 구현될 수 있고, 하나 이상의 특성(“특성”)(1706)을 가질 수 있다. 여기서, 특성 클래스(1704)는 대응하는 특성 값으로의 특정 특성 포인트의 컨테이너이도록 구성된다. 덧붙여, 하나 이상의 특성(1706)은 특성 값, 예를 들어, 문자열형(“PropertyString)(1708a)과, 정수형(”PropertyInt\")(1708b)와, 큰정수형(“PropertyBigInt\")(1708c) 등을 포함할 수 있다.전역 데이터 구조 명세 파일(1722)은 특성 클래스 명세(1724)를 포함하는 것으로 나타난다. 이에 따라서 특성 [0075]클래스(1704)의 공통 타입의 인스턴스는 특서 클래스 명세(1724)와 관련될 수 있다. 예를 들어, “Player(플레이어)”라고 명명된 특성 클래스(1704)는, 예를 들어, 특성 및 특정 값을 특정하는 특성 클래스 명세(1724)에대한 관계를 가질 수 있다. 덧붙여, 특성 클래스 명세(1724)는 하나 이상의 특성 명세로의 포인터의 벡터(“PropertySpec\")(1726)를 포함할 수 있으며, 이들 각각은 특성(1706)과 연계된 메타데이터를 포함할 수 있다. 특성 클래스 관리자(”PropertyClassManager\")(1742)는 특성 클래스 명칭과 특성 클래스 명세를 하나의 키와 값의쌍으로 판단하기 위한 맵(가령 룩업 테이블)을 포함할 수 있다. 런-타임, 또는 실행 동안, 합성 환경 생성 플랫폼(또는 노드)은 특성 클래스 시스템으로부터 데이터 구조와 게임 데이터의 구현을 관리하기 위해 특성 클래스관리자(1742)를 사용할 수 있다. 도 18은 본 발명의 하나 이상의 실시예에 따라 전역 메시지를 생성하기 위한 흐름도를 도시한다. 흐름도(1800) [0076]는 하나 이상의 특상 클래스 객체 파일, 가령 XML 기반의 객체 데이터 파일(1803)을 편집, 또는 생성하기 위해구성된 전역 데이터 구조 편집기(1802)를 도시한다. 전역 데이터 구조 편집기(1802)는, 예를 들어, 맥락 친화적(context-friendly) 인터페이스 요소, 가령, 드롭-다운 메뉴를 제공하고, 연계된 특성 클래스 명세를 기초로 데이터 범위 검증을 제공하도록 구성된 편집기일 수 있다. 덧붙여, 전역 데이터 구조 편집기(1802)는 XML 판독기(1806)와 XML 기록기(1805)를 사용하여, 데이터를 소스로, 또는 소스로부터 시리얼라이즈(serialize)할 수있다. 상기 소스는 XML 기반의 객체 데이터 파일(1803) 중 하나 이상일 수 있다. 다양한 실시예에서, 전역 데이터 구조 편집기(1802)는 확장 마크업 언어(즉, XML), 하이퍼텍스트 마크업 언어(즉, HTML), 또는 그 밖의 다른임의의 마크업, 또는 포맷팅 언어에 따라 포맷이 정해진 데이터를 편집하도록 구성될 수 있다. 전역 데이터 구조 편집기(1802)는, 일부 경우에서, XML 기반의 편집기(1807)로 대체될 수 있다. 왜냐하면 특성 클래스 표현은XML-호환형 포맷을 갖기 때문이다. XML 기반 편집기(1807)는 다수의 상업적으로 이용가능한 툴 중 하나, 가령,- 23 -공개특허 10-2010-0014941Altova, Inc(매사추세츠, 비버리힐)의 XMLSpy일 수 있다.특성 클래스 데이터 파일(1803)은 시리얼라이징, 또는 특성 시스템의 XML 판독기(1806)의 기능을 이용하여 런타 [0077]임 환경으로 가져가진다. 이는 파일(803)로부터 XML-기반의 특성 클래스 데이터를 취하고, “인-메모리(in-memory)”C++ 특성 클래스 객체 표현(1809)을 생성한다. XML 기록기(1805)의 기능을 이용하여, 임의의 수정이원본 소스로 다시 반영될 수 있다. 데이터의 시리얼라이징 및 위장(obfuscation) 대 XML 표현의 속도를 향상시키기 위해, 특성 클래스 객체(1809) [0078]가 바이너리 판독기(Binary Reader, 1810)와 바이너리 기록기(Binary Writer, 1801) 수단을 이용하여, 디스크기반의 이진 포맷(binary format, 1810)으로 시리얼라이즈될 수 있다. 이로 인해서, 개발자는 편리한 툴을 이용하여 인간에 의해 판독가능한 포맷(가령, XML)로 편집하고, 실행 및 위장(obfuscation)의 속도가 중요할 때는상기 XML을 이진 포맷으로 변환할 수 있다.C++ 객체(1809)의 임의의 인스턴스가 네트워크를 통해 전송될 필요가 있을 경우, 특성 클래스 객체는 송신기 [0079](1850)에서 송신되기 위해 “패킹(packed)”, 또는 “패킷화(packetize)\"된다. (1811)에서의 패킷화는 바이너리기록기(1801)의 서비스를 이용하여, 패킷을 생성할 수 있으며, (1842)에서 패킷을 링크(1842)를 통해 전송할 것이다. 반면에, 수신기(1852)가 패킷을 수신하고 바이너리 판독기(1801)의 서비스를 이용하여, 상기 데이터를 인-메모리 C++ 특성 클래스 객체 표현(1809)의 인스턴스로 언-패킷화할 수 있다. 송신기(1805), 또는 수신기(1852), 또는 둘 모두가 다양한 실시예에 따라, 전역 메시지 인터페이스로 구현될 수 있다. 도 19는 본 발명의 하나 이상의 실시예에 따라 전역 메시지를 생성하기 위한 특성 클래스 시스템의 요소를 도시 [0080]한다. 다이어그램(1900)은 다음의 특성 클래스 시스템 요소를 사용하는 전역 메시지 생성 프로세스(1940)를 도시한다: 특성 클래스 객체(1902, 1904 및 1906) 등의 특성 클래스 객체와, 특성 클래스 매니페스트(1910)와, 특성 클래스 관리자(1920)와, 특성 클래스 명세 파일(1930). 설명을 위한 목적으로, 전역 메시지 생성 프로세스(1940)가 캐릭터 데이터에 관한 전역 메시지를 생성하도록 구성된다고 가정하자. 이에 따라서, 전역 메시지 생성 프로세스(1940)는, 네스티드 특성 클래스 객체(1902 및 1904)를 포함하는 특성 클래스 객체(“플레이어”)(1906)를 사용한다. 네스티드 특성 클래스 객체(“주문”)(1902)는, 가령, 플레이어가 갖고 있는 주문의 타입과 강도를 나타내는 데이터의 데이터 정렬을 포함한다. 네스티드 특성 클래스 객체(“무기”)(1904)가, 가령,플레이어가 소유하는 무기의 종류를 나타내는 데이터의 데이터 정렬을 포함한다. 하나 이상의 실시예에서, 특성 클래스 매니페스트(1910)는, 특성 클래스 객체를 인스턴스화하기 위해 특성 시스 [0081]템에 의해 사용될 수 있는 정보와 데이터를 리스팅하거나 조합하기 위한 공간을 제공하도록 구성된다. 예를 들어, 특성 클래스 매니페스트(1910)가 각각의 리스트에 대해 특성 클래스 식별자(“ID\"), 명세 파일(가령, 명세파일(1722)(도 17)) 명칭, 카테고리 태그를 포함하여, 특성 클래스 객체를 그룹화하는 것을 보조할 수 있다. 덧붙이자면, 특성 클래스 매니페스트(1910)는 파일 명칭, 특성 클래스 객체 명칭 및 전역 메시지를 생성하기 위한그 밖의 다른 자원(또는 정보의 소스)를 기재할 수 있다. 특성 클래스 관리자(1920)는 논리적 및 물리적 자원과데이터의 맵을 포함하여, 특성 클래스 객체(1902, 1904 및 1906)의 데이터 구조의 구현과 상기 데이터 구조 내부의 게임 데이터를 관리할 수 있다. 특성 클래스 명세 파일(1930)은 특성 값, 또는 상기 특성 값으로의 레퍼런스를 포함할 수 있다.합성 환경 생성 플랫폼 및/또는 그 노드는 전역 메시지 생성 프로세스(1940)와 앞서 설명된 특성 클래스 시스템 [0082]요소를 구현하여, 전역 메시지(또는 전역 데이터 구조)를 형성할 수 있으며, 이는 도 1 및 3에서 나타는 바와같은 합성 환경 생성 플랫폼의 노드에 의해 사용될 수 있다. 노드(가령, 서버, 클라이언트, 피어, 도는 그 밖의다른 프로세서)가 전역 메시지 생성 프로세스(1940)를 개시할 때, 전역 데이터 구조는 전연 메시지의 일부분으로서 구현될 수 있다. 그 후, 프로세스(1950)가 구현된 전역 메시지를 수신하는 것을 고려한다. 이에 따라, 프로세스(1950)는 메시지로부터 직접, 소스 코드의 컴파일을 요청할 필요없이, 데이터(1952)를 사용할 수 있다. 도 20은 본 발명의 하나 이상의 실시예에 따라, 플러그를 생성하기 위한 특성 클래스 시스템의 요소를 [0083]도시한다. 다이어그램(2000)은 다음의 특성 클래스 시스템 요소를 사용하는 플러그 생성 프로세스(2040)를 도시한다: 특성 클래스 객체(2002-2006)와, 특성 클래스 매니페스트(2010)와, 특성 크랠스 관리자(2020)과, 특성 클래스 명세 파일(2030). 설명을 위한 목적으로, 플러그 생성 프로세스(2040)는 배의 이미지, 또는 게임 요소(가령, 화물선, 유조선, 전함(가령, Ticonderoga-class, Aegis guided missile cruiser), 여객선, 원양선 등)을동적 콘텐츠로서 합성 환경으로 도입시키기 위한 플러그를 생성하도록 구성된다. 이에 따라서, 플러스 생성 프로세스(2040)는, 네스티드 플러그 특성 클래스 객체(2002, 2004 및 2005)를 포함하는 플러그 특성 클래스 객체(“배”)(2006)를 사용한다. 상기 네스티드 특성 클래스 객체(“포지셔닝”)(2002)은, 예를 들어, 배가 갖는 포- 24 -공개특허 10-2010-0014941지셔닝과 상대적 움직임을 나타내는 데이터 정렬을 포함한다. 네스티드 특성 클래스 객체(“속도”)(2004)는,예를 들어, 배가 움직이는 속도를 나타내는 데이터의데이터 정렬을 포함한다. 네스티드 특성 클래스 객체(“배로서 나타남”)(2005)는가령, 희망하는 배의 형태처럼 보이는 배의 외관을 묘사하는 데이터의 데이터 정렬을 포함한다. 하나 이상의 실시예에서, 특성 클래스 매니페스트(2010)와, 특성 클래스 관리자(2020)와, 특성 클래스명세 파일(2030)은 도 19에서 설명된 바와 유사한 기능 및/또는 구조를 가질 수 있다. 일부 실시예에서, 플러그는, 예를 들어, 데이터, 자산(asset), 절차적 동작(procedural action) 리스트와 조건적 트리거를 특정하는 표현을 일컬을 수 있다. 데이터 표현의 하나의 예로는, 배의 속도를 특정하는 데이터를 포함하는 특성 클래스 객체(2004)가 있다. 자산 표현의 하나의 예로는 배를 특정하는 데이터를 자산으로서 포함하는 플러그 특성 클래스객체(2006)가 있다. 절차적 동작 리스트에 대한 표현의 예로는 플러그 객체가 수행해야 하는 동작을 특정하는데이터가 있다. 예를 들어, 절차적 동작 리스트 데이터는 배가 (1) 항구 쪽으로 돌아오고, (2) 계속 항해하며,(3) 부두에 정박할 것을 특정할 수 있다. 조건적 트리거 표현의 예로는, 상기 조건적 트리거가 이벤트 Y에서 발생되면 X가 발생해야 한다는 것을 특정하는 데이터가 있다. 예를 들어, 조건적 트리거 데이터는 배가 부두에 도착할 때 폭발하도록 특정할 수 있다.합성 환경 생성 플랫폼 및/또는 그 노드가 플러그 생성 프로세스(2040)와 앞서 설명된 특성 클래스 시스템 요소 [0084]를 구현하여, 플러그 데이터(2052)를 형성할 수 있다. 그 후, 프로세스(2050)가 플러그 데이터(2052)의 수신자라고 가정하자. 특히, 플러그 데이터(2052)는 게임 데이터를 프로세스(2050)의 소켓 코드(2054)에게 제공할 수있는 하나 이상의 전역 데이터 구조를 포함한다. 이에 따라서, 프로세스(2050)는 플러그 데이터(2052)를 사용하여, 프로세스(2050)나 소켓 코드(2054)에 대한 소스 코드의 추가적인 컴파일 없이, 동적 콘텐츠를 합성 환경으로 도입시킬 수 있다. 하나의 실시예에서, 플러그 데이터(2052)는 데이터베이스(“d/B\")(2060)에 배 플러그 데이터(2061)로서 저장될 수 있다. 사용자는 이벤트 서버(2062)와의 협업을 위해 이벤트 편집기(2064)를사용하여, 배 플러그 데이터(2061)를 생성할 수 있다. 덧붙여, 사용자는, 배 플러그 데이터(2061)가 소켓 코드(2054)에 플로깅되어, 동적 콘텐츠가 생성되는 날짜와 시간을 스케줄링하기 위해 이벤트 편집기(2064)를 사용할수 있다. 일부 실시예에서, 이벤트 편집기(2064)는 XML 편집기, 또는 특성 클래스 편집기의 상단에 위치하는애플리케이션일 수 있다.도 21은 본 발명의 하나 이상의 실시예에 따라, 압축형 전역 메시지를 구현하는 메시징 시스템의 일부분을 도시 [0085]하는 다이어그램이다. 여기서, 메시지 시스템 부분(2100)은 서버 프로세스(2106)와 클라이언트 프로세스(2150)를 포함하며, 둘 모두, 메시지를 교환하기 위한 네트워크(2130)를 통해 연결된다. 이 실시예에서, 메시지 시스템 부분(2100)은 메시지를, 서버 측(또는 클라이언트 측) 특성 클래스 객체(“<pco>”)(2160)과 연계되는 데이터의 서브셋을 포함하여, 전역 데이터 구조로서 전성할 수 있다. 이러한 메시지의 예는, 합성 환경의 수정을 가리키는 클라이언트 프로세스(2150)로부터의 응답이 있다. 서버 프로세스(2106)와 클라이언트 프로세스(2150)는각각 전역 메시지 인터페이스(2110a)와 전역 메시지 인터페이스(2110b)를 포함한다. 서버 프로세스(2106)는 특성 클래스 객체(2160)에 따라 정렬된 데이터를 사용하여, 클라이언트 프로세스(2150)로부터 송신된 게임 데이터수정에 응답하여, 합성 환경을 생성할 수 있다. 수정된 게임 데이터의 예로는, 합성 환경에서의 아바타의 운동을 야기하는 클라이언트 프로세스(2150)에 의해 생성된 데이터가 있다. 하나 이상의 실시예에서, 서버 프로세스(2106) 및/또는 클라이언트 프로세스(2150)가 압축형 전역 메시지(2120)로서 메시지를 교환할 수 있다. 서버 프로세스(2106)와 클라이언트 프로세스(2150) 모두가, 데이트를 교환하기 위한 특성 클래스 객체(2160)를 구현할수 있기 때문에, 압축형 전역 메시지(2120)에서 감소된 크기의 데이터가 교환될 수 있다. 일부 실시예에서, 특정 클래스 객체(2122)와 연계된 수정된 게임 데이터(2124)가 전역 메시지로 전송될 수 있다. 예를 들어, 수정된게임 데이터(2124)가 특정 특성에 대해 수정된 값을 특정함을 고려하자. 사익 수정된 값은 인덱스로서 식별될수 있다. 이에 따라서, 압축형 전역 메시지(2120)가, 수정된 게임 데이터(2124)의 관련 속성을 식별하기 위해,인덱스(2128)를 포함할 수 있다. 이러한 정보를 이용하여, 서버 프로세스(2106)는 합성 환경를 수정하도록구성, 또는 구현될 수 있다.도 22는 본 발명의 하나 이상의 실시예에 따라, 합성 환경 생성 플랫폼과 상호대화하기 위해 전역 메시징 인터 [0086]페이스를 구현하는 다수의 장치를 도시한다. 합성 환경 생성 플랫폼(2800)은 게임 서브프로세스(2282)와, 데이터베이스 프로세스(2284)와, 게임 관리 서버(2288a 내지 2288n)를 포함하는 게임 관리 프로세스(2286)를 포함한다. 도시되는 바와 같이, 전역 관리 인터페이스(UMI)(2292)를 구현하는 다양한 클라이언트(2290)가 가령 인터넷등의 네트워크(2289)를 통해 합성 환경 생성 플랫폼(2200)과 상호대화할 수 있다. 이 예시에서, 셋 톱 박스(2290a)와, 모바일 장치(2290b)와, 컴퓨팅 장치(2290c)와, 게임 콘솔(2290d)와, 위성 수신기(RX)(2290e)와, 셀폰(2290g)과, PDA(2290h)와, 텔레비전(2290i)이 전역 메시징 인터페이스(UMI)(2292)를 구현하도록 구성될 수있다. 하나 이상의 실시예에서, 로직(가령 프로세서 및 메모리)을 포함하는 임의의 장치(2290f)가 다양한 실시- 25 -공개특허 10-2010-0014941예의 전역 데이터 구조 및/또는 특성 클래스를, 합성 환경의 참여자에게 구현할 수 있다.다양한 실시예에서, 특성 클래스 시스템 및 그 인스턴스가 C++ 특성 클래스 객체로, 또는 그 밖의 다른 언어의 [0087]특성 클래스로 구현될 수 있다. 덧붙여, 앞서 온라인 게임의 맥락에서 다양한 특징을 설명했지만, 본 발명의 실시예는 온라인 게임에 국한되지 않는다. 오히려, 본원에서 설명된 특징과 기법은, 훈련, 교육, 사회 등의 목적으로 합성 환경에 적용될 수 있다. 또한 앞서의 설명은 클라이언트-서버 아키텍처의 분산 서버의 맥락으로 제공되었지만, 다양한 실시예는 이에 제한되지 않는다. 예를 들어, 하나 이상의 노드 프로레스가 하나의 단일 프로세스로 집합될 수 있다. 덧붙이자면, 본 발명의 실시예를 이용하여 임의의 네트워크 아키텍처와 토포롤지가 구현될 수 있다. 예를 들어, 합성 환경 생성 플랫폼이 피어-투-피어 네트워크 등을 구현할 수 있다.본 발명의 실시예 중 일부, 또는 전부에서, 앞서 설명된 특징의 구조 및/또는 기능이 소프트웨어, 하드웨어, 펌 [0088]웨어, 회로, 또는 이들의 조합으로 구현될 수 있다. 앞서 설명된 구조와 구성 요소뿐 아니라 그 기능들이 하나이상의 그 밖의 다른 구조나 요소로 합쳐질 수 있다. 또는 요소와 그 기능이 구성 서브-요소로 분할될 수 있다.소프트웨어로서, 앞서 설명된 기술은 다양한 타입의 프로그래밍, 또는 포맷팅 언어, 프레임워크, 구문, 애플리케이션, 프로토콜, 객체, 또는 기법을 이용하여 구현될 수 있으며, 그 예로는 C, 객체 C, C++, C#, FlexTM,Fireworks, JAVATM, JavascriptTM, AJAX, COBOL, Fortran, ADA, XML, HTML, DHTML, XHTML, HTTP, XMPP 등이 있다. 이들은 다양할 수 있으며, 앞서 제공된 기재에 제한받지 않는다.도면의 간단한 설명도 1A는 본 발명의 하나 이상의 실시예에 따라 합성 환경을 생성하기 위한 시스템을 도시한다. [0010]도 1B는 본 발명의 하나 이상의 실시예에 따라 의사 집합적 프로세스 공간에 대해 합성 환경을 생성하기 위한 [0011]게임 관리 서버를 도시한다. 도 2는 본 발명의 하나 이상의 실시예에 따라 관리 시스템의 하나의 예시를 도시한다. [0012]도 3은 본 발명의 하나 이상의 실시예에 따라 전역 메시징 인터페이스를 구현하는 합성 환경을 생성하기 위한 [0013]시스템을 도시한다.도 4A는 본 발명의 하나 이상의 실시예에 따라 합성 환경으로 동적 콘텐츠를 도입시키기 위한 방법을 도시한다. [0014]도 4B는 본 발명의 하나 이상의 실시예에 따라, 동적 콘텐츠를 합성 환경으로 도입시키도록 구성된 합성 환경 [0015]생성 플랫폼을 도시한다.도 5는 본 발명의 하나 이상의 실시예에 따라 합성 환경을 생성함에 있어 사용되기 위한 의사 집합적 프로세스 [0016]공간을 도시한다.도 6은 본 발명의 하나 이상의 실시예에 따라, 압축형 전역 메시지를 구현하는 메시징 시스템의 일부분의 예시 [0017]를 도시한다.도 7은 본 발명의 하나 이상의 실시예에 따라 마스터 스케일링 서버를 구현하기 위한 합성 환경을 생성하기 위 [0018]한 시스템을 도시한다.도 8은 본 발명의 하나 이상의 실시예에 따라 스케일 가능한 게임 서브프로세스 서버를 추가하는 마스터 스케 [0019]일 서버의 하나의 예시를 도시하는 다이어그램이다.도 9는 본 발명의 하나 이상의 실시예에 따라, 게임 서브프로레스 서버의 특정 구현예를 구현하는 합성 환경 생 [0020]성 플랫폼의 도시이다.도 10은 본 발명의 하나 이상의 실시예에 따라, 물리 프로세스의 구현예를 도시한다. [0021]도 11은 본 발명의 하나 이상의 실시예에 따라 가시성을 판단하기 위한 기법을 도시한다. [0022]도 12는 본 발명의 하나 이상의 실시예에 따라, 게임 서브프로세스 서버의 추가적인 타입을 구현하기 위한 합성 [0023]환경 생성 플랫폼의 도시이다.도 13은 본 발명의 하나 이상의 실시예에 따르는, 패칭 동안 게임 플레이를 가능하게 하기 위한 기법을 도시한 [0024]다.도 14는 본 발명의 하나 이상의 실시예에 따라, 이벤트 서버와 이벤트 에디터를 구현하는 합성 환경 생성 플랫 [0025]- 26 -공개특허 10-2010-0014941폼을 도시한다.도 15는 본 발명의 하나 이상의 실시예에 따라 다양한 정도의 동적 콘텐츠를 도입시키기 위한 이벤트를 생성하 [0026]기 위한 흐름도를 도시한다. 도 16은 본 발명의 하나 이상의 실시예에 따라 전역 데이터 구조의 특정 구현예를 도시하는 다이어그램이다. [0027]도 17은 본 발명의 하나 이상의 실시예에 따라 특성 클래스 시스템의 요소를 도시한다. [0028]도 18은 본 발명의 하나 이상의 실시예에 따라 전역 메시지를 생성하기 위한 흐름도이다. [0029]도 29는 본 발명의 하나 이상의 실시예에 따라 전역 메시지를 생성하기 위한 특성 클래스 시스템의 요소이다. [0030]도 20은 본 발명의 하나 이상의 실시예에 따라 플러그를 생성하기 위한 특성 클래스 시스템의 요소를 도시한다. [0031]도 21은 본 발명의 하나 이상의 실시예에 따라 압축형 전역 메시지를 구현하는 메시징 시스템의 일부분의 예를 [0032]도시한다.도 22는 본 발명의 하나 이상의 실시예에 따라 합성 환경 생성 플랫폼과 상호대화하기 위한 전역 메시징 인터페 [0033]이스를 구현하는 클라이언트의 인원수를 도시한다. - 27 -공개특허 10-2010-0014941도면 도면1A- 28 -공개특허 10-2010-0014941 도면1B- 29 -공개특허 10-2010-0014941 도면2- 30 -공개특허 10-2010-0014941 도면3- 31 -공개특허 10-2010-0014941 도면4A- 32 -공개특허 10-2010-0014941 도면4B- 33 -공개특허 10-2010-0014941 도면5- 34 -공개특허 10-2010-0014941 도면6- 35 -공개특허 10-2010-0014941 도면7- 36 -공개특허 10-2010-0014941 도면8- 37 -공개특허 10-2010-0014941 도면9- 38 -공개특허 10-2010-0014941 도면10- 39 -공개특허 10-2010-0014941 도면11- 40 -공개특허 10-2010-0014941 도면12 도면13- 41 -공개특허 10-2010-0014941 도면14- 42 -공개특허 10-2010-0014941 도면15- 43 -공개특허 10-2010-0014941 도면16- 44 -공개특허 10-2010-0014941 도면17- 45 -공개특허 10-2010-0014941 도면18- 46 -공개특허 10-2010-0014941 도면19- 47 -공개특허 10-2010-0014941 도면20- 48 -공개특허 10-2010-0014941 도면21- 49 -공개특허 10-2010-0014941 도면22- 50 -공개특허 10-2010-0014941"}
{"patent_id": "10-2009-7018717", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 실시예는 일반적으로 컴퓨터 기반의 시뮬레이션과 합성 환경 생성에 관한 것이며, 더 구체적으로, 분 산 아키텍처에서 합성 환경을 생성하여, 동적 콘텐츠를 도입시키기 위한 시스템, 컴퓨터 판독형 매체, 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2009-7018717", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명의 실시예는 포괄적으로 컴퓨터 기반의 시뮬레이션 및 합성 환경 생성(synthetic environment generation)에 관한 것이며, 더 구체적으로는 동적 콘텐츠(dynamic content)를 유도하기 위한 분산 아키텍처에 서 합성 환경을 생성하기 위한 시스템, 컴퓨터 판독형 기록 매체, 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2009-7018717", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "컴퓨터에 의해 발생되는 환경, 가령, MMO(massively multiplayer online) 게임의 가상 세계를 설계하고 시뮬레 이트하기 위한 전통적인 기법은 새로운, 또는 변경된 가상 세계의 효과적인 전개와 생성을 쉽게 촉진하지 않는 다. 덧붙이자면, 가상 세계를 발생하기 위한 종래의 게임 플랫폼은, 특히 MMO 게임과 관련하여, 가상 세계의 전 개와 생성을 더 방해한다. 일반적으로, 종래의 게임 플랫폼은 가상 세계를 생성하기 위해 게임 서버의 세트를 사용하며, 이때, 가상 세계의 복사본을 생성하기 위해 각각 추가적인 게임 서버 세트가 사용된다. 이러한 복사 본은 통상적으로 “샤드(shard)”라고 일컬어진다. 종래의 게임 플랫폼은 관례적으로 각각의 가상 세계의 지형 을 파티션으로 분할하며, 하나의 파티션을 생성하기 위해 하나의 게임 서버를 할당한다. 보통, 가상 세계의 파 티션을 생성하도록 구성된 게임 서버는 “영역 서버(area server)”라고 일컬어진다. 덧붙여, 일부 종래의 게임 서버는 단일체(monolithic)이며, 이는 가상 세계에 대한 파티션을 생성하기 위한 모든 게임 프로세스가 하나의 단일 프로세스 및/또는 서버에 마련됨을 의미한다. 종래의 게임 플랫폼뿐 아니라, 컴퓨터에 의해 생성된 세계를 전개하는 것에 대한 전통적인 접근법에 관련된 다양한 단점이 존재한다. 일부 종래의 게임 플랫폼에 대한 단점은, 이들이 가상 세계의 하나의 파티션에 대해 하나의 게임 서버를 할당한 다는 것이다. 마찬가지로, 게임 서버와 그 기능이 파티션 및 그 활동으로 직접 링크되는 것이 일반적이다. 따라 서 지리적으로 링크된 게임 서버의 성능은, 상기 파티션의 플레이어의 명수와 그 곳에서 수행되는 활동의 종류 에 대한 함수가 된다. 덧붙이자면, 수요의 증가를 충족시키기 위해 하드웨어 성능을 조정할 수 없음으로 인해, 단일체 게임 서버를 이용하는 종래의 게임 플랫폼은 다소 제한된다. 따라서 더 많은 플레이어가 하나의 특정 파 티션으로 이동함에 따라, 상기 파티션을 지원하는 게임 서버에 점점 부담이 증가된다. 차례로, 이는 대응하는 가상 세계 파티션과 상호대화할 수 있는 플레이어의 인원을 제한한다. 하나의 구제책으로서, 일부 MMO 게임은 가득 찬 게임 서버의 플레이어를 비교적 덜 찬 게임 서버로 이동시키도록 동작한다. 이는 플레이어의 활동에 상 당한 영향을 미칠 수 있다. 종래의 게임 플랫폼의 또 하나의 단점은, 보통, 각각의 게임 서버가, 동일한 가상 세계의 그 밖의 다른 게임 서 버와 다른 가상 세계 파티션을 생성하기 위해 개별적인 프로세스 공간을 갖는다는 것이다. 플레이어가 2개의 가 상 세계 부분의 경계를 결정하는 지리적 경계를 가로질러 상호대화하는 것은 일반적인 일이다. 따라서 파티션 경계로 인해 곤란함이 발생하고, 종래의 게임 플랫폼은 파티션 간 상호대화를 관리유지하도록 시도하기 위한 컴 퓨팅 자원을 필요로 한다. 예를 들어, 하나의 파티션에서 한 명의 플레이어와 연계된 게임 서버는, 상기 플레이 어와 다른 가상 세계 파티션의 다른 플레이어와의 상호대화를 추적하기 위한 일종의 추적 기능을 필요로 한다. 또 다른 예를 들자면, 플레이어를, 서로 다른 프로세스 공간에서의 프록시로서 유지하기 위한 컴퓨팅 자원이 요 구되는 것이 일반적이다. 플레이어를 프록시로서 구현하는 것은 하나의 가상 세계 파티션에 대한 플레이어 특정 정보의 하나의 표현, 가령, 캐릭터 식별자(character identifier)를, 또 하나의 가상 세계 파티션을 위한 별도 의 프로세스 공간과 함께 사용되기 위한 또 다른 표현으로 변환할 것을 필요로 한다. 덧붙이자면, 일반적으로, 예를 들어, 통신의 복잡도뿐 아니라 파티션간 상호대화에 대한 레이턴시(latency)를 증가시키는 원격 프로시저 호출(remote procedure call)을 이용하여 게임 서버들은 그들끼리 플레이어 상호대화에 관하여 통신한다. - 12 -공개특허 10-2010-0014941종래의 게임 플랫폼의 추가적인 단점은 서로 다른 가상 세계 파티션에서 상호대화하는 플레이어(또는 상기 플레 이어의 프록시)가 거래를 쉽게 혼란에 빠트려서, 그들 스스로 불공정하게 풍부해질 수 있다. 설명을 위해, 하나 의 가상 세계 파티션에 위치하는 제 1 플레이어가, 무기를 또 다른 가상 세계 파티션에 위치하는 제 2 플레이어 가 소유하는 금과 교환하자고 제안하는 경우를 고려하자. 그 후, 상기 제 1 플레이어가 무기를 넘기기 전에 금 을 받고, 제 1 플레이어가, 서로 다른 가상 세계 파티션의 게임 서버 간의 연결을 끊는 경우를 고려하자. 이 결 과로, 제 1 플레이어는 무기를 교환하지 않고, 금을 얻을 것이다. 단일체 게임 서버를 이용하는 것의 하나의 단점은, 단일체 게임 서버의 게임 서브프로세스 중 하나, 예를 들어, 물리 프로세스가 이상을 보이거나, 종료(shut down)된 경우, 게임 서브프로세스가 위치하는 전체 게임 서버 또 한 이상이나 종료에 영향을 받는다. MMO 게임용으로 컴퓨터에 의해 생성되는 환경을 설계하고 시뮬레이트하기 위해 현재의 클라이언트-서버 아키텍 처를 이용하는 것에 대한 또 다른 단점이 존재한다. 새로운, 또는 수정된 가상 세계를 위해 새로운 콘텐츠를 생 성할 때 요구되는 개발 활동과 함께, 게임 디자이너 및 개발자는 새로운 콘텐츠 및 그 데이터에 적응하도록 정 기적으로 실행 가능한 인스트럭션을 변경한다. 특히 버그(bug)와 그 밖의 다른 문제를 제거하기 위한 품질 보증 및 신뢰도 테스팅 동안 실행 가능한 인스트럭션을 수정하는 것은 개발 시간을 증가시킨다. 덧붙이자면, MMO 게 임은, 새로운 콘텐츠와의 상호대화 전에, 상기 수정된 실행 가능 코드가 클라이언트에게 다운로드될 것을 필요 로 한다. 예를 들어, MMO 게임 플랫폼이, 수정된 실행 가능 코드를 포함할 수 있는 큰 데이터 다운로드(가령, 250MB)를 실시하는 것은 일반적인 일이다. 앞의 내용을 고려하여, 분산 아키텍처에서 합성 환경을 생성하여, 동적 콘텐츠를 상기 합성 환경으로 유도하고, 새로운, 또는 수정된 합성 환경의 효과적인 전재 및 생성을 제공하기 위한 시스템, 컴퓨터 판독형 기록 매체, 방법 및 장치를 제공하는 것이 바람직할 것이다. 발명의 상세한 설명 본 발명의 실시예는 일반적으로 컴퓨터 기반의 시뮬레이션 및 합성 환경 생성에 관한 것이고, 더 구체적으로, 분산 아키텍처에서 합성 환경을 생성하여, 동적 콘텐츠를 도입시키기 위한 시스템, 컴퓨터 판독형 매체, 방법 및 장치에 관한 것이다. 하나의 실시예에서, 합성 환경 생성 플랫폼은 합성 환경의 생성을 촉진시키기 위한 전 역 데이터 구조와 메시지 시스템을 구현할 수 있다. 실 시 예 도 1A는 본 발명의 하나 이상의 실시예에 따라 합성 환경(synthetic environment)을 생성하기 위한 시스템을 도 시한다. 이러한 시스템의 하나의 예시는, 클라이언트가 상호대화하는 대상인 합성 환경을 생성하기 위해 서로 네트워크-연결된 노드(및 노드 프로세스)를 포함하는 합성 환경 생성 플랫폼(synthetic environment generation platform, 100)이다. 합성 환경 생성 플랫폼은 클라이언트-서버 네트워크 아키텍처에서의 서버 측 구조 및/또는 기능부를 나타내고, 클라이언트는 클라이언트-측 구조 및/또는 기능부를 나타낸다. 노드 는 게임 서브프로세스 서버와, 데이터베이스와, 게임 관리 서버를 포함하며, 이들 모두 네트워 크에 의해 서로 연결되어, 각각 게임 서브프로세스와, 데이터베이스 프로세스와, 게임 관리 프 로세스를 구현할 수 있다. 게임 서브프로세스는 서브프로세스(102a, 102b 및 102c)보다 더 많거나, 더 적게 포함할 수 있다. 나타나다시피, 게임 서브프로세스 서버는 적어도 게임 관리 서버에 비해 분 산 배열(distributed arrangement)로 배열되고, 이로 인해, 게임 서브프로세스가 게임 관리 프로세스 에서 분리된다. 하나 이상의 실시예에서, 게임 서브프로세스 서버(104a), 게임 서브프로세스 서버(104b) 및 게임 서브프로세스 서버(104c)가 각각 물리 서버, 인공 지능 서버 및 거래 서버로서, 또는 그 밖의 다른 임 의의 게임-관련 서브프로세스로서 동작하도록 구성될 수 있다. 덧붙이자면, 다양한 실시예에 따라, 합성 환경 생성 플랫폼은, 게임 관리 서버들 간에, 또는 합성 환경 생성 플랫폼과 그 밖의 다른 유사 합성 환경 생성 플랫폼(도면상 도시되지 않음) 간에, 또는 둘 모두 간에서 공유될 수 있는 의사 집합적 프로세 스 공간(quasi aggregated process space, 152)을 구현하도록 구성된다. 게임 관리 프로세스로부터 게임 서브프로세스(102a, 102b 및 102c)를 따로 따로 분산시킴으로써, 게임 관 리 서버는 독립적으로 동작하며, 이로 인해 게임 서브프로세스 서버 중 임의의 것의 성능의 품질 저 하에 덜 취약해진다. 따라서 하드웨어 및 소프트웨어 장애가 특정 게임 서버 서브프로세스로 국소화될 수 있고, 이로 인해, 게임 관리 프로세스를 인터럽트하지 않고, 진척된 문제 식별 및 해결이 가능해질 수 있 다. 이로 인해서, 클라이언트, 예를 들어, 클라이언트(150a 및 150b)는 게임 서브프로세스 서버에서 - 13 -공개특허 10-2010-0014941발생하는 문제에 의해 인터럽트되지 않고, 합성 환경과 계속 상호대화(interact)할 수 있다. 덧붙이자면, 분산 형 게임 서브프로세스(102a, 102b 및 102c)가 게임 서브프로세스 서버의 크기를 독립적으로 스케일링하는 것을 촉진하며, 이는 게임 서브프로세스(102a, 102b 및 102c)의 적정 크기를 충분히 제공하도록 온라인으로 가 져가질 수 있다. 예를 들어, 합성 환경이 추가적인 인공 지능을 필요로 하는 경우, 추가적인 인공 지능 서버가 그 밖의 다른 게임 서브프로세스, 가령, 물리 프로세스가 필요한가와 관계없이, 온라인 상태가 될 수 있다. 따라서 합성 환경 생성 플랫폼에 의해 생성된 합성 환경과 상호대화하는 임의의 인원수의 클라이언 트에 대해 합성 환경 생성을 촉진하기 위한 하드웨어와 소프트웨어의 적정 크기가 구현될 수 있다. 덧붙이 자면, 그 밖의 다른 유사한 합성 환경 생성 플랫폼과 공유되는 의사 집합적 프로세스 공간이 플랫폼 간(즉, 샤드 간) 상호대화를 촉진시키고, 이로 인해서, 개선된 통신과, 더 안전한 거래가 제공될 수 있다. 게임 관리 서버는 각각 게임 서브프로세스 및 데이터베이스 프로세스와 공동작업하여, 참여자 (participant)가 상호대화하는 합성 환경을 생성하도록 구성된다. 따라서 게임 관리 서버는, 합성 환경과 의 상호대화에 있어 클라이언트와 연계되는 다수의 참여자를 관리하도록 구성된다. 클라이언트의 인 원수를 지원하도록 게임 서브프로레스가 스케일링될 수 있다. 다양한 실시예에서, 클라이언트는, 하 나의 게임-생성 프로세스에 제한되는 것보다, 다수의 게임 관리 서버에 걸쳐 분산될 수 있다. 설명을 위해, 클라이언트(150a)가 게임 관리 서버(122a)와 상호대화하고, 클라이언트(150b)가 게임 관리 서버(122c)와 상호대화할 수 있다고 가정하자. 클라이언트(150a 및 150b)가 서로 대른 게임 관리 프로세스와 상호대화하는 동 안, 클라이언트(150a 및 150b)가 어느 합성 환경과 상호대화하는가에 관계없이, 그들은 의사 집합적 프로세스 공간을 공유할 수 있다. 하나의 실시예에서, 클라이언트(150a 및 150b)는 의사 집합적 프로세스 공간(15 2)을, 공통 프로세스 공간으로서 공유할 수 있다. 따라서 합성 환경 간 상호대화가 쉽게 발생할 수 있다. 일부 실시예에서, 게임 관리 서버는 특정 참여자에 의해 요청된 동작을 검증(validate)하기 위해 동작할 수 있 으며, 이로 인해서, 상기 참여자는 게임 데이터를 수정할 권한을 가짐이 인등될 수 있다. 하나 이상의 실시예에 서, 게임 관리 서버(122a 내지 122n)가, 클라이언트에 의한 합성 환경과의 상호대화를, 판독 전용 형식 (read-only form)으로 나타내는 게임 데이터를 관리한다. 이에 따라서, 거래를 타락시키기 위해 게임 데이터가 조작될 수 없다. 그렇지 않다면, 이는 참여자를 부정한 방법으로 부유하게 만들 것이다. 하나의 실시예에서, 게임 서브프로레스 서버(104a)는 물리 서버(physics server)일 수 있으며, 상기 물리 서버 는, 예를 들어, 합성 환경의 참여자에 대한 운동 및 충돌 활동(movement and collision activity)을 처리하도 록 구성될 수 있다. 예를 들어, 물리 서버(104a)는 물리 관련 이벤트(physics-related event), 예를 들면, 충 돌 검출(collision detection), 강체 운동(rigid body movement) 등을 처리할 수 있다. 하나 이상의 실시예에 따르는 게임 서브프로세스 서버(104b)는 인공 지능 서버일 수 있으며, 이는, 예를 들어, 합성 환경에서의 NPC(non-player character)에 의한 운동을 시뮬레이트하기 위한 인공 지능을 제공하도록 구성될 수 있다. 다양한 실시예에서, 게임 서브프로세스 서버(104c)는, 참여자들 간의 거래를 관리하여, 상기 거래는 원자성 (atomic)을 가짐을 보장하도록 구성될 수 있는 거래 서버일 수 있다. 즉, 게임 서브프로세스 서버(104c)는 거래 의 모든 부분이 발생하거나, 모든 부분이 발생하지 않음을 보장하도록 동작할 수 있으며, 이로 인해서, 거래의 모든 부분이 성공되지 않는 한, 데이터베이스 프로세스에 저장된 게임 데이터가 업데이트되지 않음이 보장 될 수 있고, 따라서 참여자가 부정하게 부유해지는 것을 추구하기 위한 루프-홀(loop-hole)이 감소될 수 있다. 상기 거래 서버는 하나의 활동이 두 참여자 모두에게 성공적으로 완료되었음을, 또는 두 참여자 모두에 대해 실 패했음을 보장하는 게임 인증자(game authority)이다. 하나의 실시예에서, 합성 환경 생성 플랫폼 내의 모 든 서버는, (거래 서버로서) 게임 서브프로레스 서버(104c)를 제외하고는 판독 전용이다. 따라서 게임 서브프로 세스 서버(104c)와 같은 거래 서버는, 게임 데이터를 거래하기 위한 단일 인증자로서 동작할 수 있다(즉, 상기 거래 서버는 게임 데이터를 수정하기 위한 권한이 부여받는다). 하나 이상의 실시예에서, 게임 서브프로세스 서 버를 구성하는 거래 서버는 의사 집합적 프로세스 공간을, 단일 프로세스 공간으로서 구현하도록 구 성될 수 있으며, 이로 인해서, 참여자는 의사 집합적 프로세스 공간에 의해 제공된 필적하는 공통 프로세 스 공간 내에서 거래를 하면서, 여러 다른 합성 환경을 위한 게임 관리 서버와 연계될 수 있다. 동작 중에, 클라이언트(150a 및 150b)는 참여자의 표현, 예를 들어, 아바타(avartar)가 게임 관리 프로세스 의 게임 데이터를 수정할 수 있게 하는 요청을 생성한다. 본원에서 사용될 때, 용어 “게임 관리 서버”는, 적어도 하나의 실시예에서, 참여자의 합성 환경과의 상호대화를 관리하는 컴퓨팅 장치 및/또는 프로 세스를 일컫는다. 예를 들어, 게임 관리 서버는 클라이언트로부터 입력을 받아들이고, 이에 응답하여, 클 라이언트 상호대화를 기초로 하는 수정된 합성 환경을 나타내는 수정된 게임 데이터를 생성하여, 클라이언트 (150a 및 150b)에게 다시 송신하기 위해 게임 서브프로세스와 데이터베이스 프로세스와 협업할 수 있 - 14 -공개특허 10-2010-0014941다. 본원에서 사용될 때, 용어 “게임 서브프로레스 서버”는, 적어도 하나의 실시예에서, 게임 프로세스의 서 브셋을 수행하는 컴퓨팅 장치 및/또는 프로세스, 예를 들어, 물리 서버 및 인공 지능 서버를 일컬으며, 이들의 결과물은 게임 관리 서버에 의해 사용된다. 본원에서 사용될 때, 용어 “노드”는, 적어도 하나의 실시예에서, 합성 환경의 생성에 영향을 미치는 컴퓨팅 장치 및/또는 프로세스를 일컬으며, 예를 들어, 서버, 클라이언트, 데이터베이스 등이 있다. 본원에서 사용될 때, 용어 “게임 데이터”는, 적어도 하나의 실시예에서, 합성 환경의 생성에 관련된 데이터의 서브셋을 일컫는 다. 게임 데이터는 예를 들어, 합성 환경의 지형을 생성하기 위한 맵 데이터(map data)를 포함할 수 있다. 게임 데이터는 또한, 예를 들어, 캐릭터 데이터(character data), 인벤토리 데이터(inventory data)(가령, 무기 데 이터), 뱅크 데이터(bank data), 합성 홈 데이터(synthetic home data), 상품 데이터(award data) 등의 참여자 의 상태를 포함할 수 있다. 본원에서 사용될 때, 용어 “합성 환경”은, 하나 이상의 실시예에서, 참여자가, 예 를 들어, 아바타를 통해 상호대화하기 위한 컴퓨터 기반의 시뮬레이트되는 환경인 가상 세계(또는 그 일부분)를 일컬을 수 있다. 또한 합성 환경은 참여자 상호대화와 함께, 또는 참여자 상호대화 없이 진보하는 가상 세계인 샤드(shard), 또는 지속 세계(persistent world)(또는 그 일부분)를 일컬을 수 있다. 본원에서 사용될 때, 용어 “참여자(participant)”는, 적어도 하나의 실시예에서, 플레이어, 또는 상기 플레이어의 2, 또는 3-차원 그래 픽 표현(가령 아바타), 또는 둘 모두를 일컫는다. 또한 참여자는 플레이어가 상호대화하는 클라이언트를 일컬을 수 있다. 본원에서 사용될 때, 용어 “의사 집합적 프로세스 공간”은, 하나 이상의 실시예에서, 애플리케이션 을 위한 메모리 공간 및/또는 프로세서에 의한 인스트럭션의 실행을 위해 구현되는 메모리 공간(가령, 하나 이 상의 중앙 처리 유닛(CPU))을 일컬으며, 이때, 상기 메모리 공간은 특정 타입의 데이터에 대해 집합적인 (aggregated), 공통의 프로세스 공간으로서 동작하도록 구성되고, 그 밖의 다른 하나 이상의 탕비의데이터에 대 해 개별 프로세tm 공간으로서 동작하도록 더 구성된다. 게임 서브프로세스 서버 및 게임 서브프로세스가, 예를 들어, 그 밖의 다른 실시예에 따라 MMO 게임 을 촉진시키기 위한 그 밖의 다른 임의의 게임 관련 프로세스를 구현하도록 구성될 수 있다. 덧붙이자면, 하나 이상의 데이터베이스(112a 내지 112c)가, 예를 들어, 합성 환경을 생성하기 위한 데이터를 저장하도록 구성될 수 있다. 이에 따라서 하나 이사의 데이터베이스(112a 내지 112c)가 참여자 계정에 관련된 계정 데이터, 통계적 데이터, 편집 데이터(audit data), 게임 데이터 등을 저장할 수 있다. 특정 실시예에서, 합성 환경 생성 플랫폼 은 링크를 통해, 데이터를 교환하도록 구성되며, 상기 링크는, 예를 들어, 인터넷을 포함하여 임의의 개수의 네트워크(도면상 도시되지 않음)를 통해 통신 신호를 전달할 수 있다. 하나의 실시예에서, 링크 는 약 5Kbs 내지 10Kbs, 또는 그 이상으로, 데이터를 송신 및/또는 수신하도록 구성된다. 이에 따라서, 링 크는 특히, 실질적으로 동시에, 5Kbs 업스트림 및 5Kbs 다운스트림을 지원할 수 있다. 그 밖의 다른 실시 예에서, 링크는, 디지털 가입자 라인(DSL) 기술, 케이블 기술, 위성 기술 등을 이용하여 광대역 연결로서 구현될 수 있는 비교적 높은 대역폭 링크이다. 또한, 링크는 무선 링크일 수 있다. 하나의 실시예에서, 높 은 대역폭 링크가 10Kbs보다 더 빠른 속도로 데이터를 송신 및/또는 수신할 수 있으며, 이에 따라서, 링크 는 10Kbs 이상의 데이터 전송 속도를 구현할 수 있다. 덧붙이자면, 네트워크는 초 당 1 내지 16기가 비트(gigabit per second), 또는 그 이상의 속도로 메시지 및/또는 패킷을 전달하도록 구성된다. 하나의 실시예 에서, 네트워크는 10기가비트 이더넷(“10GbE\") 네트워크이다. 도 1B는 본 발명의 하나 이상의 실시예에 따라, 프로세스 공간과 연결하여, 부분적으로, 또는 전체적으로 합성 환경을 생성하는 게임 관리 서버의 도시이다. 합성 환경 생성 플랫폼이 클라이언트(150a 및 150b)에 대한 합성 환경을 생성하도록 구성된다. 이 예시에서, 합성 환경은 4개의 영역을 포함하는데, 즉, 영역 1(\"R1\"), 영역 2(“R2\"), 영역 3(”R3\"), 영역 4(“R4\")를 포함한다. 그 후, 각각 참여자 와 참여자는 클라이언트(150a 및 150b)와 연계된다. 합성 환경 생성 플랫폼은 게임 관리(” mgmt\") 서버(122a 내지 122d)에 의해 구현되는 게임 관리 프로세스를 포함한다. 또한 합성 관리 생성 플랫 폼은, 연계되어 있는 합성 환경이 생성될 수 있는 의사 집합적 프로세스 공간을 포함한다. 본 발명의 다양한 실시예에 따라, 일부 경우에서, 의사 집합적 프로세스 공간은 공통의 프로세스 공간으로 서 동작하도록 구성되며, 또 다른 경우에서는 개별 프로세스의 집합으로서 동작하도록 구성된다. 특히, 의사 집 합적 프로세스 공간은 게임 데이터의 제 1 서브셋을 위해 공통 프로세스 공간으로서 기능하도로 구성되고, 데이터의 제 2 서브셋을 위해서는 개별 프로세스 공간으로서 기능하도록 구성된다. 예를 들어, 거래 서버 가 의사 집합적 프로세스 공간을, 넌-지오메트리 관련 데이터(non-geometry related) 데이터와 거래 관련 데이터를 위한 공통 프로세스 공간으로서 구현하도록 구성되고, 반면에, 게임 관리 서버는 의사 집합적 프 로세스 공간을 지어메트리-관련 데이터를 위한 개별 프로세스 공간으로서 구현하도록 구성된다. 하나 이상 - 15 -공개특허 10-2010-0014941의 실시예에서, 합성 환경 생성 플랫폼은, 부분적으로, 또는 전적으로, 의사 집합적 프로세스 공간을 구현하기 위한 거래 서버를 포함한다. 특히, 거래 서버는 참여자(170c)를 위한 데이터의 제 1 서브셋 을, 그리고 참여자를 위한 데이터의 제 1 서브셋을 모두 처리하는 공통 프로세스 공간을 갖는다. 상기 데이터의 제 1 서브 셋(192 및 194)의 예로는, 참여자가 교환하기를 원하는 아이템을 나타내는 데 이터가 있다. 참여자(170c 및 172)에 대한 데이터의 제 2 서브셋은, 예를 들어, 게임 관리 서버(122b 및 122d) 가 처리하는 지오메트리 데이터에 관련될 수 있다. 동작 중에, 참여자가 로그 인할 때, 합성 환경 생성 플랫폼은 상기 참여자를 게임 관리 서버(122b)에 할당한다. 이와 달리, 참여자가 로그인할 때, 합성 환경 생성 플랫폼은 상기 참여자를 게임 관 리 서버(122d)로 할당한다. 참여자(170 및 172)는 각각 세션 동안 게임 관리 서버(122b 및 122d)와 연계된 채 유지된다. 그 후, 둘 모두, 나타나지 않은 그 밖의 다른 참여자가 그럴 수 있는 것처럼, 영역2에서의 하나 의 활동에 연계되기를 원한다고 가정한다. 참여자(170a)는 영역1에서 합성 환경으로 입장하고, 그 후 참여자(170b)로서 영역2로 이동한다. 영역1과 영역2가 의사 집합적 프로세스 공간에 관련 되기 때문에, 가령, 의사 집합적 프로세스 공간이 공통 프로세스 공간으로서 액세스될 때, 다른 경우라면 파티션 간 상호대화를 관리하기 위해 요구됐을 컴퓨팅 연산 자원이 요구되지 않는다. 참여자(170c)는 영역 3로 추가로 이동할 수 있고, 그 후, 참여자(170d)로서 영역4로 이동할 수 있다. 더 많은 참여자가 영 역2에 입장하기 때문에, 증가된 인원수가 이에 대응하여 서버를 교착상태(bog down)에 빠트리는 것은 아니 다. 이는, 본 발명의 다양한 실시예에 따르면, 합성 환경을 생성하는 게임 관련 프로세스가 지리적 위치에 연결되지 않기 때문이다. 이 예시에서, 하나의 게임 관리 서버가 전체 부담을 지지 않고, 이는 전체적으로 게임 관리 프로세스에 걸쳐 상환될 수 있다. 따라서 단일 게임 관리 서버의 성능을 넘어서지 않고, 참여자들의 집합이 하나의 영역에 모일 수 있다. 도 2는 본 발명의 하나 이상의 실시예에 따르는 메시징 시스템의 하나의 예시를 나타내는 도면이다. 도 2는 네 트워크, 데이터베이스 프로세스, 서버 프로세스 및 클라이언트 프로세스를 통해 함께 연결 되도록 구성된 메시징 시스템의 일부분, 또는 전부를 구현하는 합성 환경 생성 플랫폼을 도시하며, 이들은 모두 노드이다. 네트워크는 컴퓨터 네트워크, 또는 그 밖의 다른 임의의 타입의 통신 네트워크일 수 있다. 데이터베이스 프로세스는 컴퓨터 네트워크, 또는 그 밖의 다른 임의의 타입의 통신 네트워크일 수 있다. 데이터베이스 프로세스는 데이터베이스(“d/B\")와 데이터베이스 관리 시스템(\"DBMS\") 을 포함하며, 이들은 데이터베이스의 데이터의 조직(organization), 저장(storage) 및 불러오기 (retrieval)를 제어한다. 동작 중에, 메시징 시스템은, 데이터를, 서버 프로레스와 같은 하나의 노드 (또는 노드 프로세스)로 통합시키기 위한 전역 데이터 구조(universal data structure, 260)를 포함하는 메시지 (220a 및 220b) 등의 메시지를 전파하도록 구성된다. 특히, 메시징 시스템은, 각각의 프로세스에 의해 사 용가능한 데이터 정렬(data arrangement)로, 데이터베이스 프로세스, 서버 프로세스, 클라이언트 프 로세스 간에서 데이터를 교환하도록 구성된다. 하나 이상의 실시예에서, 메시지(220a 및 220b)와 연계된 데이터 정렬은 각각의 프로세스에 의해 직접 이용가능하다. 예를 들어, 서버 프로세스는, 메시지(220a)에 의해 사용되는 전역 데이터 구조(UDS: universal data structure)(260a)에 따라 배열된 데이터를 사용할 수 있 다. 이에 따라서, 데이터베이스 프로세스와, 서버 프로세스와, 클라이언트 프로세스는, 메시지 (220a 및 220b)와 연계된 데이터 구조로부터, 다른 경우라면 특정 노드에 의해 요구될 수도 있는 다른 형태(또 는 특수화된 형태)로 변환할 것을 요청할 필요가 없다. 따라서 다른 경우라면, 이러한 변환을 위해 제공될 필요 가 있을 실행가능한 코드가 존재하지 않는다. 도 2에서 나타나는 바와 같이, 메시징 시스템은 다수의 전역 메시지 인터페이스, 예를 들어, 메시지 인터 페이스(210a), 전역 메시지 인터페이스(210b) 및 전역 메시지 인터페이스(210c)를 포함할 수 있으며, 이들 각각 은, 합성 환경 생성 플랫폼을 통한 클라이언트 프로세스와의 전송을 위해 메시지(220a 및 220b)를 생성하 도록 구성될 수 있다. 전역 메시지 인터페이스(210a, 210b 및 210c)는 각각, 자신의 데이터를 하나의 노드 프로 세스로 통합시키기 위한 메시지(220a 및 220b)를 수신하도록 구성될 수 있다. 덧붙이자면, 전역 데이터 구조 가 개발될 때, 실행가능한 코드의 재-컴파일(recompiling)이 요구되지 않는다. 다른 경우라면, 하나의 타 입의 데이터 구조를 다른 데이터 구조로 변환할 필요가 있었을 것이다. 본원에서 사용될 때, 용어 “전역 데이 터 구조”는, 하나 이상의 실시예에서, 노드뿐 아니라, 메시지(220a 및 220b)에 의해 전역적(universally)으로 사용가능한 데이터의 표현을 일컬으며, 이는 다른(또는 특수화된) 데이터 구조로의 변환을 필요로 하지 않는다. 다양한 실시예에서, 도 2의 전역 메시지 인터페이스(210a, 210b 및 210c)는 서로 동일하거나, 그들이 관련되어 있는 노드에 맞추기 위해, 서로 상이할 수 있다. 전역 메시지 인터페이스(210a, 210b 및 210c)는 노드 내부에서 - 16 -공개특허 10-2010-0014941구현되거나, 합성 환경 생성 플랫폼 내라면 임의의 곳에서 배치될 수 있다. 적어도 하나의 실시예에서, 전역 메 시지 인터페이스(210a, 210b 및 210c) 각각은 메시지(220a) 등의 메시지를 임의의, 또는 그 밖의 다른 모든 노 드 외부로 브로드캐스트하도록 구성될 수 있다. 이에 따라서, 전역 메시지 인터페이스(210a, 210b 및 210c) 각 각은, 각각의 메시지가, 자신이 관련되어 있는 노드에 대해 의도되어 있는가의 여부를 검출하도록 구성될 수 있 다. 또 다른 실시예에서, 전역 메시지 인터페이스(210a, 210b 및 210c) 각각은 하나의 도착지로 타겟팅된 메시 지를 전송하도록 구성될 수 있다. 하나의 실싱PDp서, 클라이언트와 합성 환경 생성 플랫폼 사이의 메시지, 예를 들어, 메시지(220b)는 하나 이상의 사용자 데이터그램 프로토콜(UDP), 또는 인터넷 프로토콜(IP) 패킷으로 구현 될 수 있다. 하나의 실시예에서, 서버 프로세스와 데이터베이스 프로세스 간의 메시지가 하나 이상의 송신 제어 프로토콜(TCP) 패킷으로 구현될 수 있다. 하나의 실시예에서, 네트워크는 합성 환경 생성 플랫 폼을 위한 플랫폼 내(intra platform) 통신을 지원한다. 하나 이상의 실시예에서, 클라이언트 프로세스 는 네트워크를 통해 합성 환경 생성 플랫폼으로 연결된다. 네트워크는, 하나 이상의 실시 예에서, 인터넷, 또는 그 밖의 다른 임의의 통신 네트워크를 포함한다. 일부 경우, 클라이언트 프로세스는 증간 프로세스(intermediary process)(도면상 도시되지 않음)를 통해 데이터베이스 프로세스 및/또는 서버 프로세스와 메시지를 교환한다. 이러한 중간 프로세스의 예로는 도 12의 사용자 서버가 있다. 하나의 실시예에서, 전역 데이터 구조는, 가령, C++, 또는 그 밖의 다른 임의의 프로그래밍 언어 등의 객 체 지향 프로그래밍 언어의 클래스를 갖는다. 또 다른 실시예에서, 모든 타입의 전연 데이터 구조가 하나 의 단일 클래스와 관련될 수 있다. 전역 메시지 인터페이스(210a, 210b 및 210c)가, 하나의 노드가 전역 데이터 구조로 데이터를 구현(가령, 직접 구현)할 수 있게 하도록 구성되는 인스턴스 관리 방식을 결정할 수 있다. 하나의 실시예에서, 하나의 노드는 전역 데이터 구조를 구현하는 법을 노드에게 알려주는 스키마 (schema)에 대한 레퍼런스(reference)를 포함할 수 있다. 또 하나의 실시예에서, 전역 메시지(220a)가 상기 레 퍼런스를 포함한다. 일부 실시예에서, 전역 메시지 인터페이스(210a, 210b 및 210c) 각각은 전역 데이터 구조를, 프로세스 및/또는 운영 체제에 독립적으로 사용될 수 있는 플랫폼-독립형 포맷으로 포맷팅하도록 구성 될 수 있다. 플랫폼-독립형 포맷의 예로는, 예를 들어, XML과 같은 확장 마크업 언어에 의해 정의되는 포맷이 있다. XML은 월드 와이드 웹 콘소시엄(W3C)에 의해 관리된다. 도 3은 본 발명의 하나 이상의 실시예에 따라 전역 메시징 인터페이스를 구현하는 합성 환경을 생성하기 위한 시스템을 도시한다. 이 예시에서, 합성 환경 생성 플랫폼은 전역 데이터 구조 기반 메시지를 송신 및/또는 수신하도록 구성된 전역 메시지 인터페이스(UMI)(302, 304 및 306)를 포함한다. 나타나다시피, 전역 메시지 인 터페이스(302a, 302b 및 302c)는 각각, 게임 프로세스(102a, 102b 및 102c)에, 또는 인접하여 배치된다. 각각 의 전역 메시지 인터페이스(302a, 302b 및 302c)는 게임 서브프로세스 서버와 연계된다. 일부 경우, 전역 메시지 인터페이스(302a, 302b 및 302c) 각각은 동등한 구조 및/또는 기능을 가지며, 그 밖의 다른 경우, 전역 메시지 인터페이스(302a, 302b 및 302c)는 서로 다른 구조 및/또는 기능을 가질 수 있다. 예를 들어, 물리 서버 는, 예를 들어 인공 지능 서버와는 상이한 전역 메시지 인터페이스를 요청할 수 있다. 또한 도 3에 따르면, 합 성 환경 생성 플랫폼은, 각각 데이터베이스(112a, 112b 및 112c)에, 또는 그 가까이에 배치되는 전역 메시 지 인터페이스(304a, 304b 및 304c)와, 각각 게임 관리 서버(122a, 122b, 122c 및 122n)에, 또는 그 가까이에 배치되는 전역 메시지 인터페이스(304a, 304b 및 304c)를 포함한다. 전역 메시지 인터페이스(308a 및 308b)는 클라이언트(150a 및 150b)와 관련되어 구현된다. 302a, 304b, 304c, 306a, 306bm 306c, 306n, 308a 및 308b는 서로에 대해 동등한, 또는 상이한 구조 및/또는 기능을 갖는다. 도 3의 유사하게 명명된 요소들은, 일부 경우에 서, 도 2에서 제공되는 요소들과 동등한 구조 및/또는 기능을 가질 수 있다. 도 4A는 본 발명의 하나 이상의 실시예에 따라, 동적 콘텐츠를 합성 환경으로 도입시키기 위한 방법을 도시한다. 도면은, 예를 들어, 하나의 실시예에 따라, 합성 환경 생성 플랫폼을 이용하는 MMO 게임의 개발 을 도시한다. 코드 개발 및 컴파일 스테이지 동안, 게임 개발자는 소스 코드를 개발하고 컴파일하여, 실행 가능한 코드로서 객체 코드를 형성할 수 있다. 소스 코드를 개발하는 중에, 소켓 코드(socket code, 42 3)가 생성되고 컴파일될 수 있다. 소켓 코드는 플러그 데이터로부터 데이터를 액세스하도록 구성된 실행가능한 인스트럭션 및/또는 입력을 포함한다. 이에 따라서, 플러그 데이터가 소켓 코드와 객체 코드 모두와 조화되도록, 품질 보증(\"QA\": quality assurance) 프로세스의 일부분으로서 개발될 수 있다. 품질 보증 메트릭이 충족된 후, (소켓 코드를 포함하여) 객체 코드과 플러그 데이터가 온라인 게임을 위해 배포될 수 있다. 코드 개발 및 컴파일 스테이지에 뒤 이어, 후-코드 컴파일 스테이지 동 안 콘텐츠 개발자는 그 밖의 다른 플러그 데이터를 생성하기 위한 합성 환경 생성 플랫폼을 구현할 수 있 다. 상기 스테이지 동안, 플러그 데이터는 객체 코드를 정정하지 않고, 소켓 코드와 함께 사용되기 위해 생성될 수 있다. 예를 들어, 콘텐츠 개발자는, 실행가능한 코드를 수정하지 않고, Aegis Cruiser - 17 -공개특허 10-2010-0014941를, 플러그 데이터에 의해 형성되었던 카약(kayak)에 대한 플러그 데이터로서 대체할 수 있다. 객체 코드의 재-컴파일보다 먼저 수행함으로써, 개발자는 새로운 동적 콘텐츠를, 소켓 코드를 구현하는 합성 환 경으로 보다 빨리 전달할 수 있다. 덧붙여, 객체 코드에 영향을 미치지 않고, 미래 플러그 데이터(future pug data, 470)가 생성될 수 있고, 이로 인해서, 비교적 빠른 콘텐츠 개발이 촉진될 수 있다. 본원에서 사용될 때, 용어 “동적 콘텐츠”는, 하나 이상의 실시예에서, 컴퓨터에 의해 상성된 비주얼 및/또는 사운드 콘텐츠로서 합 성 환경으로 도입될 수 있는 콘텐츠 데이터를 일컬으며, 이때, 상기 콘텐츠 데이터는 상기 콘텐츠 데이터가 상 호대화하는 실행 코드의 수정에 독립적으로 생성될 수 있다. 이에 따라서, 콘텐츠 데이터는 객체 코드에 영향을 미치지 않고 개발될 수 있다. 도 4B는 본 발명의 하나 이상의 실시예에 따라, 동적 콘텐츠를 합성 환경으로 도입시키도록 구성된 합성 환경 생성 플랫폼을 도시한다. 이 실시예에서, 시스템은 참여자들이 상호대화하고, 동적 콘텐츠가 그 속으 로 도입되는 합성 환경을 생성하도록 구성된 합성 환경 생성 플랫폼을 포함한다. 특히, 데이터 레포 지토리(data repository, 402)가, 카약과 Aegis cruiser를 각각 동적 콘텐츠로서 도입시키기 위한 콘텐츠 데이터를 포함하는 플러그 객체(410a 및 410b)를 저장하도록 구성된다. 플러그 객체(410a 및 410b)가 다양한 실 시예의 전역 데이터 구조와 유사한, 또는 동일한 데이터 정렬을 구현할 수 있다. 플러그 객체(410a 및 410b)는 또한 장소, 포지셔닝, 속도 및 보트 항해 경로를 나타내는 데이터를 포함할 수 있다. 데이터 레포지토리 는 예를 들어, MMO 게임을 실행하기 위한 객체 코드를 저장하도록 구성된다. 또한 데이터 레포지토리 는 객체 코드의 일부분을 형성할 수 있는 소켓 코드를 저장하도록 구성된다. 소켓 코드는 (도 4의) 플러그 데이터로부터 데이터를 액세스하도록 구성되고, 동적 콘텐츠의 생성을 실시하기 위 해 객체 코드에 의해 사용되기 위한 실행가능한 인스트럭션 및/또는 입력을 포함한다. 데이터 레포지토리 는, 합성 환경을 형성하기 위한 월드 데이터(world data, 462)를 저장하도로 구성된다. 월드 데이터 및 소켓 코드는, 소켓 코드가 동적 콘텐츠를 도입시킬 위치(location)를 정의하기 위한 관계(relationship, 464)를 공유할 수 있다. 합성 환경 생성 플랫폼은, 동적 콘텐츠를 합성 환경의 일부분, 또는 전체로 도입시키도록 구성 되는 이벤트 서버를 포함한다. 상기 동적 콘텐츠는 합성 환경을 생성하기 위한 객체 코드 인스트 럭션의 실행과 실질적으로 동시에 도입될 수 있다. 이에 따라서, 합성 환경 생성 플랫폼은 플러그 삽입 프 로세스를 초기화하도록 구성될 수 있으며, 초기화 동안 플러그 객체(410a 및 410b) 중 하나가 소켓 코드 로 삽입되어, 동적 콘텐츠를 인스턴스화할 수 있다. 특정 실시예에서, 이벤트 서버는 객체 코드 를 수정하지 않고, 동적 콘텐츠를 도입시키도록 구성된다. 하나의 실시예에서, 플러그 객체(410a 및 410b)가 하나 이상의 전역 데이터 구조를 포함하는 전역 객체의 시스템에 속한다. 덧붙이자면, 플러그 객체 (410a 및 410b)와 전역 객체의 시스템은 동적 콘텐츠를 도입시키기 위한 객체 코드 인스트럭션의 재- 컴파일을 생략시킬 수 있다. 플러그 객체와 소켓 코드를 구현함으로써, 하나 이상의 게임 관리 서버 가, 가령, 수정된 객체 코드를 구현한 후 재부팅(rebooting)없이, 동적 콘텐츠를 생성하도록 구성될 수 있 다. 도 5는 본 발명의 하나 이상의 실시예에 따라 합성 환경을 생성할 때 사용되기 위한 프로세스 공간을 도시한다. 여기서, 합성 환경 생성 플랫폼이 클라이언트(550a 및 550b)를 위한 합성 환경을 생성하도록 구성된다. 합 성 환경 생성 플랫폼은 게임 관리(“mgmt\") 서버(522a 내지 522n)에 의해 구현되는 게임 관리 프로세스 를 포함한다. 합성 환경 생성 플랫폼은 또한, 거래 등의 거래가 원자성 거래(atomic transaction)로서 구현될 수 있는 의사 집합적 프로세스 공간을 포함한다. 이에 따라서 거래는 모든 부분 이 수행되거나, 어느 부분도 수행되지 않는다. 설명을 위해, 제 1 참여자(참여자1)가 클라이언트(550a)와 연계되고, 제 2 참여자(참여자2)가 클라이언트(550b)와 연계되는 경우를 가정하자. 제 1 참여자와 제 2 참여자는 각각 아이템(아이템A)과 아이템(아이템B)를 소유하고 있다. 그 후, 상기 참여자(506 및 510)가 아이템(508 및 512)을 서로 교환하도록 배열되지만, 아직 그들의 희망은 확인되지 않았다고 가정하자. 두 참여자(506 및 510) 모두 교환에 동의하면, 거래가 끝난다. 이와 같은 거래 동안, 의사 집합적 프 로세스 공간은 공통 프로세스 공간으로 동작하여, 거래가 조작하기 덜 쉬워지도록 구성된다. 하나의 실시예에서, 거래 서버(도면상 도시되지 않음)는 의사 집합적 프로세스 공간과 상호대화하거나, 또는 이를 제공하도록 동작한다. 하나의 실시예에 따르면, 의사 집합적 프로세스 공간은 공통 프로세스 공간을 모방 하며, 따라서 참여자들이 서로 다른 합성 환경 생성 플랫폼에 의해 생성된 서로 다른 합성 환경 간에 이동 하는 것이 가능해진다. 본원에서 사용될 때, 용어 ”거래“는, 적어도 하나의 실시예에서, 하나 이상의 참여자 가 함성 환경과 상호대화하는 것을 포함하는 활동을 이루는 작업의 세트를 일컫는다. - 18 -공개특허 10-2010-0014941도 6은 본 발명의 하나 이상의 실시예에 따라, 압축형 전역 메시지(compressed universal message)를 구현하는 메시징 시스템의 일부분의 예를 나타내는 도면이다. 여기서, 메시지 시스템 부분은 서버 프로세스와, 클라이언트 프로세스를 포함하며, 둘 모두, 메시지를 교환하기 위한 네트워크를 통해 연결된다. 이 예시에서, 메시지 시스템 부분은, 예를 들어, 클라이언트 프로세스가 합성 환경의 수정을 가리키는 것에 응답하여, 서버측(또는 클라이언트측) 전역 데이터 구조와 연계된 데이터의 서브셋을 이동시킬 수 있 다. 서버 프로세스 및 클라이언트 프로세스는 각각, 클라이언트 프로세스로부터 송신된 게임 데 이터 수정에 응답하여, 합성 환경을 생성하기 위한 전역 메시지 인터페이스(610a)와 전역 메시지 인터페이스 (610b)를 포함한다. 서브 프로세스는 전역 데이터 구조(UDS)에 따라 정렬된 데이터를 사용할 수 있다. 수정된 게임 데이터의 예로는, 아바타에 의한 운동을 가리키는 클라이언트 프로세스에 의해 생성된 게임 데이터가 있다. 하나 이상의 실시예에서, 서버 프로세스 및/또는 클라이언트 프로세스는 메시지 를, 합축형 전역 메시지로서 교환할 수 있다. 서버 프로세스와 클라이언트 프로세스 모두 데이 터를 교환하기 위한 전역 데이터 구조를 구현할 수 있기 때문에, 감소된 데이터 양이, 상기 압축형 전역 메시지로 교환될 수 있다. 특히, 전역 데이터 구조와 연계되어 수정된 게임 데이터가 전역 메시 지로 이동될 필요가 있다. 하나의 실시예에서, 압축형 전역 메시지는, 수정된 게임 데이터와 관련된 속성(attribute)을 특정하는 키(key, 628)를 포함한다. 이러한 정보를 이용하여, 서버 프로세스는 합성 환 경을 수정할 수 있다. 도 7은 본 발명의 하나 이상의 실시예에 따라, 마스터 스케일링 서버(master scaling server)를 구현하는 합성 환경을 생성하기 위한 시스템을 도시한다. 합성 환경 생성 플랫폼은 프로세스 간 메시징 네트워크와, 마스터 스케일링 서버를 포함하며, 둘 모두, 물리 프로세스와 인공 기능 프로세스와 같은 게임 서브프로세 스에 대한 요구의 변형을 만족시키기 위해 게임 서브프로세스 기능을 스케일링하도록 구성된다. 합성 환경 생성 플랫폼은 또한 다양한 게임 서브프롤세스와, 데이터베이스 프로세스와, 게임 관리 프로세스 를 포함한다. 동작 중에, 마스터 스케일링 서버는 적정하게, 게임 서브프로세스 서버를 추가, 또는 제거하도록 구성된다. 예를 들어, 더 많은 물리 프로세싱이 요구될 때, 마스터 스케일링 서버가 추가적인 물리 서버를 추가할 수 있다. 그러나 인공 지능이 덜 요구되는 경우, 상기 마스터 스케일링 서버가 인공 기능 서버를 뺄 수 있다. 마스터 스케일ㄹ이 서버는 서버의 타입에 관한 정보(가령, 서버가 물리 서버인지, 인공 기능 서버인지 등), 게임 서브프로세스 서버가 속하는 합성 환경 등도 포함하는 서버의 목록을 모니터링하도록 구성된다. 마스터 스케일링 서버가 또한, 가령, 추가적인 서비스나 용량을 필요로 하는 하나 이상의 게임 관리 서버 로부터 프로세스 간 메시징 네트워크를 통한 추가적인 게임 서브프로세스에 대한 요청 메시지를 모니터링 하도록 구성된다. 이에 응답하여, 마스터 스케일링 서버는, 예를 들어, 게임 서브프로세스 서버(704a, 704b 및 704) 등의 새롭게 추가된 게임 서브프로세스와, 게임 관리 서버와 같은 요청 서버 간의 연결의 확립을 조정할 수 있다. 하나의 실시예에서, 스케일링 가능한 게임 서브프로세스 서버는, 온-라인 상태가 될 때, 자신의 식별자 (identity)와 그 밖의 다른 관련 정보를 마스터 스케일링 서버로 전달하도록 구성된다. 상기 그 밖의 다른 관련 정보는 서버 타입과, 상기 서버가 속하는 연계된 합성 환경 등을 포함할 수 있다. 이에 응답하여, 마스터 스케일링 서버는 스케일링 가능한 서브프로세스 서버를, 예를 들어, 이러한 서버 타입을 요청하는 게임 관 리 서버로 동적으로 할당한다. 특히, 마스터 스케일링 서버는 커맨드 및 연결 정보(가령, 호스트 및 포트 정보)를 상기 스케일 가능한 게임 서브프로세스 서버로 전송하여, 요청 게임 관리 서버로 연결할 수 있다. 일부 경우, 마스터 스케일링 서버는 연결 정보를 요청 게임 관리 서버로 통신하여, 상기 스케일 가능한 게임 서 브프로세스 서버로부터의 연결을 수신할 수 있다. 하나 이상의 실시예에서, 마스터 스케일링 서버는 게임 관리 서버의 로딩(loading)을 모니터링하고, 자동으로 게임 서브프로세스 서버를 추가, 또는 제거하도록 구성될 수 있다. 하나의 실시예에서, 프로세스 간 메시징 네트워크는 네트워크를 통해 구현되는 전역 메시징 시스템과 공존하거나, 상기 전역 메시징 시스템과 동일하다. 도 8은 본 발명의 하나 이상의 실시예에 따라, 스케일 가능한 게임 서브프로세스 서버를 추가하는 마스터 스케 일링 서버의 하나의 예시를 나타내는 도면이다. 특히, 다이어그램은, 게임 관리 서버에 의해 사용되는 게 임 서브프로세스를 제공하는 게임 서브프로세스 서버를 도시한다. 또한 나타나다시피, 마스터 스케일 링 서버는 스케일 가능한 물리 서버를 추가하여, 물리 프로세싱 기능을 향상시킬 수 있다. 하나의 실 시예에서, 스케일 가능한 물리 서버 및 게임 서브프로세스 서버는 각각 균질한(homogeneous) 하드웨 어 플랫폼이다. 균일한 하드웨어 플랫폼을 이용하여, 마스터 스케일링 서버에 의해, 필요에 따라 증가-스 - 19 -공개특허 10-2010-0014941케일(scaling up)과 감소-스케일(scaling down)에 대한 유연성이 증가될 수 있다. 도 9는 본 발명의 하나 이상의 실시예에 따라, 게임 서브프로세스 서버의 특정 타입을 구현하는 합성 환경 생성 플랫폼을 도시한다. 합성 환경 생성 플랫폼은 게임 서브프로세스와, 게임 데이터를 저장하도록 구성 된 게임 데이터베이스와, 게임 관리 서버(922a 내지 922n)를 포함하는 게임 관리 프로세스를 포함한 다. 이 예시에서, 게임 서브프로세스는 게임 서브프로세스 서버의 다음의 특정 타입을 포함한다: 물리 서 버(902a)와, 인공지능(AI) 서버(902b)와, 거래 서버(902c). 이들 게임 서브프로세스를 개별적인 서버로 구현함 으로써, 합성 환경 생성 플랫폼은 게임 서브프로세스와 연계된 문제에 덜 영향 받는다. 덧붙여, 특정 게임 서브프로세스가 그 밖의 다른 게임 서브프로세스 요구에 독립적인 수요를 충족시키도록 적저아게 스케일링될 수 있다. 물리 서버(902a)는 합성 환경에 대한 운동 및 충돌 검출 활동을 처리하도록 구성된 하나 이상의 물리 서버를 나 타낸다. 다양한 실시예에서, 물리 서버(902a)는 또한, 가시성 판정(visibility determination), 인스턴스화 (instancing), 운동 검증(movement validation) 및/또는 인공 지능 NPC를 위한 경로 세그먼트화(path segmenting) 중 임의의 기능을 수행할 수 있다. 가시성 판정 중에, 물리 서버(902a)는 합성 세계의 객체 및/또 는 그 밖의 다른 참여자가 참여자에게 가시적(visible)인가의 여부를 계산하다. 하나의 개체가 참여자의 가시성 범위(visibility range) 내에 있을 때, 상기 개체는 참여자에게 가시적이고, 이때, 물리 서버(902a)는 상기 개 체가 가시 범위 내에 있는가의 여부를 판단한다. 도 11은 본 발명의 하나의 실시예에 따르는 가시성을 판단하기 위한 또 다른 기법을 도시한다. 도 9를 다시 참조하면, 물리 서버(902a)는 또한 “인스턴스화”를 제공하도록 구성될 수 있고, 상기 인스턴스화에 의해, 참여자의 집합(그리고 연계된 물리 프로세싱)이, 합성 환경의 일부분 내에서, 가령, 가상의 집에서, 또는 가령 보스 괴물 등의 NPC와 싸우기 위해 함께 모일 영역에서, 활동을 수행 할 수 있다. 운동 검증은 합성 환경의 맥락에서 참여자의 운동을 검증하는 행위이다. 물리 서버(902a)는, 요망 운동의 경로 내에 있는 가상 영토 및 임의의 개체(즉, 그 밖의 다른 캐릭터 및/또는 물체)에 대한 운동을 검증하도록 구성될 수 있다. 참여자의 아바타가 가상 영토에 대해 운동하는 속도를 기초로, 합성 환경 내 자신의 위치를 반영하도 록 참여자의 위치가 수정될 수 있다. 물리 서버(902a)는, 수정된 데임 데이터를 클라이언트에게 전송하기에 앞 서 위치가 올바르다고 검증하기 위한 시물레이션을 실행할 수 있다. 물리 서버(902a)는 참여자의 운동을 검증하 여, 참여자가 특정 활동에 연계되어 있거나, 또는 합성 환경의 특정 영역 내에서 이동하도록 허용되었음을 보장 하도록 구성될 수 있다. 하나의 실시예에서, 물리 서버(902a)는 단위 시간 당 참여자의 서브셋을 검증하고, 시 간에 따라 서로 다른 서브셋의 사이클을 검증한다. 임의의 참여자가 합성 환경의 특정 영역, 또는 그 근처를 이 동하도록 허가받지 못하면, 상기 참여자는 오용(exploit)을 수행하는 것으로 의심된다고 태깅될 수 있다. 덧붙 이자면, 물리 서버(902a)는 인공 지능(AI) 서버(902b)에게 경로 세그먼트화를 제공하여, 영토 및/또는 정적 물 체로 인해, NPC가 NPC의 움직임을 방해할 물체를 피할 수 있게 한다. 다양한 실시예에서, 앞서 언급된 물리 프 로세스 중 하나 이상이 개별 서버에서 개별 프로세스로서 구현될 수 있다. 인공 지능(AI) 서버(902b)는 컴퓨터에 의해 구현되는 NPC(non-player character)와, NPC의 행동을 결정하기 위 한 인공지능을 갖는 그 밖의 다른 것을 제공하도록 구성된 하나 이상의 인공 지능 서버를 나타낸다. 인공 지능 에 대한 요구가 증가되는 동안, 추가적인 인공 지능 서버(902b)가 합성 환경을 지원하기 위해 추가될 수 있다. 예를 들어, 이벤트가 많은 수의 NPC를 요청하는 경우, 추가적인 인공 지능 서버(902b)가 추가될 수 있다. 하나 의 실시예에서, 참여자는 NPC가 “몬스터를 플레이하는” 제어를 가정할 수 있다. 거래 서버(902c)는 참여자의 위치에 관계없이, 런-타임 참여자 게임 데이터를 처리하도록 구성된 하나 이상의 거래 서버를 나타낸다. 이에 따라서 거래 서버(902c)는, 예를 들어, 지속 세계(persistent world)(가령, 합성 환경)와 인스턴스(즉, 상기 합성 환경의 부분, 가령 가성 건물) 간의 캐릭터 운동을 촉진시키기 위한 캐시(90 3)를 포함한다. 캐시를 이용함으로써, 참여자가 합성 환경과 상기 합성 환경의 부분 사이에 이동함에 따라, 게임 데이터가 데이터베이스로부터 재-로딩되는 것이 방지된다. 일부 실시예에서, 게임 데이터의 표현은, 거래 서버(902c)외의 프로세스에서 판독 전용이라고 표시되어, 예를 들어, 거래의 조작이 방지될 수 있다. 덧붙 여, 거래 서버(902c)는 의사 집합적 프로세스 공간 내에서 원자성 거래(atomic transaction)를 촉진한다. 거래 서버(902c)가 거래를 수행하는 동안, 거래 서버(902c)가 거래에 응답하여, 데이터를 수정하기 전에, 게임 관리 서버(922a 내지 922n)이 참여자가 그들의 신원을 확인하는 것을 검증하도록 구성될 수 있다. 도 10은 본 발명의 하나 이상의 실시예에 따르는 물리 프로세스의 구현을 도시하는 도면이다. 도면은 가 시성 프로세스(visibility process)와 인스턴스화 프로세스가 물리 서버로부터 개별적인 가시성 서버 - 20 -공개특허 10-2010-0014941와 인스턴스 서버로 각각 오프-로딩(off-loading)되는 것을 도시한다. 가시성 서버는 합성 환경에서 물체 및/또는 그 밖의 다른 참여자가 참여자에게 가시적인가의 여부를 판단하도록 구성되나. 인스턴스 서버는 “인스턴스화”를 제공하도록 구성되며, 상기 인스턴스화로 인해, 참여자의 집합과 이와 연계된 물리 프로세싱이 합성 환경의 일부분 내에서 이뤄지는 그룹, 또는 국소화된 활동을 수행하는 것이 가능해진다. 합성 환경에 대한 물리 프로세스와 별도로 존재하는 가시성 프로세스와 인스턴스화 프로세스를 이용함으로써, 물리 서버의 부담이 덜어진다. 덧붙이자면, 가시성 서버와 인스턴스 서버는 물리 서버(100 2)에 관련된 문제에 덜 영향 받는다. 도 11은 본 발명의 하나 이상의 실시예에 따라 가시성을 판단하기 위한 기법을 나타내는 도면이다. 도면 은 참여자에 대한 가시성을 판단하기 위한 기법의 예시를 도시한다. 하나의 경우, 가시성 서버가 먼저, 참여자를 정의하기 위해 가시성 범위를 정의한다. 이에 따라서, 참여자는 거리에서 물체를 볼 수 있다. 하나 이상의 실시예에서, 물체, NPC 및 그 밖의 다른 플레이어 각각이 “나타날 수 있는(CBS: can- be-seen)”범위와 연계된다. 더 큰 물체, 가령, 산은, 쥐와 같은 더 작은 물체의 “CBS\" 범위 보다 더 큰 “CBS\" 범위를 가질 수 있다. 하나의 실시예에서, 가시성 서버는 구형 교차 테스트 (sphere intersection test)를 구현하도록 구성되며, 상기 테스트에서, ”CBS\" 범위, 가령, 산에 대한 “CBS\" 범위가 가시성 범위와 교차할 때 물체가 참여자에게 가시적이 된다. \"CBS\" 범위는 원(즉, 2D), 또는 구(즉, 3D)로서 표현될 수 있다. 특정 실시예에서, 참여자는 2개의 범위를 갖는다: 즉, 구 에 의해 정의된 참여자의 가시성 범위와, 다른 개체가 상기 참여자를 볼 수 있는 ”CBS“ 범위 를 가지며, 이때 상기 다른 개체, 또는 상기 개체의 가시성 범위가 ”CBS“ 범위와 교차할 때 상기 다른 개체가 상기 참여자를 볼 수 있다. 그 후, 거인은 자신으로부터 거리에서 가시성 거리 를 가지며, 자신으로부터 거리에서 ”CBS\" 범위를 갖는다. 거인이 참여자에 다 가갈 때, 거인의 가시성 범위가 “CBS\" 범위와 교차하고, 그 후, 거인은 참여자를 볼 수 있다. 그러나 가시성 범위가 가시성 갭(visibility gap, 1160) 내에 있을 때, 참여자는 거인을 볼 수 없다. 가시성 범위가 가시성 범위와 교차하면, 참여자가 거인을 볼 수 있다. 앞 서 언급된 바와 같이, 도면은, 가시성을 판단하기 위해 가시성 범위만 사용될 때 발생할 수 있는 부자연 스러운 시각 효과(visual effect)(가령, 개체가 가시성 범위를 가로지를 때, ”갑자기 튀어나오는 것“처 럼 보이는 것)를 감소시키는 가시성을 판단하기 위한 기법의 예를 도시한다. 도시되지는 않았지만, 쥐가 또한 가시성 범위를 가질 수 있다. 다양한 실시예에서, NPC와 참여자 각각은 가시성 범위와 ”CBS\" 범위를 가질 수 있다. 도 12는 본 발명의 하나 이상의 실시예에 따라, 게임 서브프로세스 서버의 추가적인 타입을 구현하는 합성 환경 생성 플랫폼의 도시이다. 합성 환경 생성 플랫폼은 게임 서브프로세스와, 게임 데이터를 저장하도 록 구성된 게임 데이터베이스(1212a)와, 감사 데이터를 저장하도록 구성된 감사 데이터베이스(audit database, 1212b)와, 통계적 데이터(각각의 참여자에 의한, 모든, 또는 거의 모든 상호대화의 기록)와, 게임 관리 서버 (1222a 내지 1222n)를 포함하는 게임 관리 프로세스를 포함한다. 덧붙이자면, 합성 환경 생성 플랫폼 은 사용자 서버와, 패치 서버와, 통계/감사 서버를 포함한다. 사용자 서버는 게임 관리 서버(1222a 내지 1222n) 중 임의의 것과 클라이언트 간의 메시지를 라우 팅하도록 구성될 수 있다. 그러나 합성 환경과 상호대화하기 위해, 참여자가 로그인하면, 사용자 서버는 참여자 및 상기 참여자의 클라이언트를 게임 관리 서버(1222a 내지 1222n) 중 하나에게 할당할 것이다. 따라서 사용자 서버는 게임 관리 서버와 참여자 중 하나로, 그리고 하나로부터 메시지를 연속 전달 (relay)할 수 있다. 세션 동안, 상기 참여자는 동일한 게임 관리 서버와의 관계를 유지할 수 있다. 또한 사용자 서버는 클라이언트 연결을 게임 관리 서버(1222a 내지 1222n)에 걸쳐 고르게 분산시키는 방식으로 클라이 언트를 연결하도록 구성될 수 있으며, 이에 따라서 로드 밸런싱(load balancing)이 구현될 수 있다. 일부 경우, 또한 사용자 서버는 서명된 참여자를 인증하도록 구성될 수 있다. 하나 이상의 예에서, 사용자 서 버는 게임 관리 서버(1222a 내지 1222n)와 클라이언트 간에 교환되는 데이터를 선택적으로 암호화 할 수 있다. 하나의 실시예에서, 사용자 서버는 메시지 중 압도적인 크기인 운동 관련 메시지(movement- related message)를 우선 암호화한다. 이에 따라서, 암호화와 연계된 딜레이가 감소된다. 패치 서버가 패 치를 클라이언트에게 증분 방식으로, 가령 파일 단위로 전송하도록 구성될 수 있다. 하나 이상의 실시예 에서, 패치 서버는, 적당한 때에, 가령, 로그인 시뿐 아니라 게임 플레이 중에도(가령, 참여자가 합성 환 경과 상호대화하는 동안), 패치를 조금씩 제공하도록(trickle) 구성된다. 통계/감사 서버가 참여자의 통 계치를 수집하고 사용하도록 구성 및/또는 이벤트 서버와 연계되어 이벤트를 트리거하도록 구성된다. - 21 -공개특허 10-2010-0014941도 13은 본 발명의 하나 이상의 실시예에 따라, 패치(patch) 동안 게임 플레이를 가능하게 하는 기법을 도시하 는 도면이다. 도면은 새로운“세계”, “대륙”, 또는 합성 환경으로서 추가되는 영역을 도시한다. 합성 환경 확장의 진행은 화살표로 나타난다. 영역(“1”)은 원본 다운로딩된 게임을 이용하여 구현된 것임을 가정하자. 그 후, 영역(“2”)은 참여자가 패치를 다운로딩한 것에 대한 확장된 합성 환경을 나타 낸다. 마지막으로 참여자는 영역(“3”)에 대한 다음 패치를 구현하지 않았지만, 영역으로부터 영 역으로 입장하기를 원한다고 가정하자. 참여자가 영역에서 영역으로 이동함에 따라, 참여자 는 나무와 나무를 관찰할 것이다. 그러나 참여자가 외곽을 따라 통과하면, 참여자는 아직 완 성되지 않은 장소에 위치할 것이다. 따라서 나무를 렌더링하기 위한 데이터 패칭이 아직 완료되지 않은 경우, 합성 환경 생성 플랫폼은 프록시 자산(proxy asset)(즉, 대용 물체)을 디스플레이할 것이다. 따라서 참여 자는 새로운 영역으로 입장하는 것이 금지될 필요가 없으며, 패칭 프로세스가 완료될 때까지 대용 물체 (fill-in object)를 경함할 수 있다. 도 14는 본 발명의 하나 이상의 실시예에 따라, 이벤트 서버와 이벤트 편집기를 구현하는 합성 환경 생성 플랫 폼을 도시한다. 합성 환경 생성 플랫폼은 게임 서브프로세스와, 게임 데이터를 저장하도록 구성된 게임 데이터베이스와, 게임 관리 서버(1422a 내지 1422n)를 포함하는 게임 관리 프로세스를 포함한 다. 또한 합성 환경 생성 플랫폼은 이벤트 서버와 이벤트 편집기를 포함한다. 이벤트 서버 는 동적 콘텐츠를 합성 환경으로 도입시키는 것을, 예를 들어, 플레이어 활동(가령, 지정 트리거, 또는 조건을 트리거링하기)의 함수로서, 및/또는 지정 스케줄링에 따라 제어하도록 구성된다. 예를 들어, 특정 위치 에 모여 있는 참여자의 인원수가 트리거 포인트를 능가하는 경우, 이벤트 서버가 동적 콘텐츠의 도입을 트리거할 수 있다. 일부 실시예에서, 이벤트 서버는 생성된 배, 또는 크리처(creature)의 타입을 수정할 수 있다. 이벤트 서버는 동적 콘텐츠를 생성하기 위해 이벤트 라이브러리 데이터베이스로부터 플러 그 객체(plug object)를 액세스하도록 구성될 수 있다. 하나의 실시예에서, 이벤트 서버는, 참여자가 미 리보고 합류할 수 있도록 프로그래밍된 이벤트를 디스플레이하는 이벤트 서버 가이드를 구동하기 위한 데 이터를 생성하도록 구성된다. 이벤트 편집기는 가변 크기의 동적 콘텐츠를 도입시키기 위해 다수의 소켓 과 연계된 플러그 객체를 모으도록(aggregate) 구성되며, 이로 인해, 플러그 객체의 집합이 크리처, 나무, 구조 물 등을 합성 환경으로 도입시킬 수 있다. 도 15는 본 발명의 하나 이상의 실시예에 따라, 다양한 정도의 동적 콘텐츠를 도입시키기 위한 이벤트를 생성하 기 위한 흐름도이다. 흐름도는 이벤트 라이브러리에 저장된 전역 데이터 구조를 포함하는 플러그 객체를 이용하여 이벤트를 생성하기 위한 방법의 예시이다. 단계에서, 이벤트가 정의되고 요구사항이 지시된다. 단계에서, 가령 게임 설계자가 미리 만들어진 플러그 객체를 이용함으로써, 새 이벤트를 생성하고, 새 이 벤트가 단계에서 확립된다. 단계에서, 이벤트가 테스트되어, 새 이벤트가 품질 보증(QA) 세부사항 을 만족시키는지가 검증된다. 이벤트가 단계에서 실패하면, 흐름은 단계로 돌아가서, 이벤트 정의 및/또는 구현을 재정의, 또는 수정할 수 있다. 이벤트가 성공한 경우, 이는 이벤트 라이브러리에 저장된다 (단계). 단계에서, 이벤트가합성 환경으로의 도입을 위해 스케줄링된다. 단계에서, 이벤트 서버는 지정된 시간에 이벤트를 트리거하도록 구성된다. 스케된 시점에서, 이벤트 서버는 이벤트 라이브러리로부터 이벤트와 관련된 데이터를 인출(fetching)하고, (가령, 동적 콘텐츠를 생성함으로써) 합성 환경 생성 플랫폼이 상기 이벤트를 구현하게 한다. 그 후, 단계에서 상기 동적 콘텐츠가 컴퓨 터에 의해 생성된 세계에서 사용되기 위해 클라이언트에게 배포된다. 하나의 실시예에서, 패치 서버에서 구현되는 패치 서버 프로세스를 이용하여 동적 콘텐츠의 합성 환경으 로의 도입을 위한 흐름이 제공된다. 이 예시에서, 패치 서버는 이벤트를 나타내는 데이터가 이벤트 라이브러리에 저장될 때를 검출하도록 구성된다. 덧붙이자면, 패치 서버가 이벤트가 필요로 하는 데이터를 작은 파일, 또는 데이터의 조각으로서 클라이언트에게 투입, 또는 “침투(trickle down)”시키도록 구 성된다. 따라서 패치 서버는 비-피크 사용 시간(off-peak usage time)에서 데이터를 투입하고, 할당된 대 역폭 용량을 초과하는 것을 방지할 수 있다. 다른 경우라면, 가령 250MB의 큰 다운로드가 발생할 때, 피크 사용 시간이 발생했을 것이며, 이는 비용이 많이 든다. 또 다른 실시예에서, 패치 서버는 투입될 데이터의 크 기를 결정하고, 이벤트에 남아 있는 을 결정하며, 따라서 단위 시간 당 투입될 필요가 있는 평균 데이터 크기 를 계산할 수 있다. 따라서 패치 서버가 최적의 전송을 위해 작은 파일로 데이터의 크기를 변화시 킬 수 있다. 특정 실시예에서, 패치 서버는 데이터베이스에서 피크 임계값 모니터링 데이터를 액세 스하여, 큰 크기의 데이터가 피크 사용 시간 대에 투입되는 것을 방지하기 위해 작은 파일의 크기를 변화 시키기 위한 때를 판단하도록 구성될 수 있다. - 22 -공개특허 10-2010-0014941도 16은 본 발명의 하나 이상의 실시예에 따르는 전역 데이터 구조의 특정 구현예를 나타내는 다이어그램이다. 전역 데이터 구조는 식별자에 의해 식별되는 특성 클래스 객체(즉, “특성 클래스 xxxxx\")로서 나 타난다. 상기 특성 클래스 객체는, 각각 특성 클래스 xxxx의 특성에 대응할 수 있는 속성을 포함하는 데 이터의 정렬을 포함하며, 예를 들어 이는 도 16의 전역 데이터 구조 명세 파일과 관련하여 이하에서 설명 되는 것이 있다. 덧붙이자면, 속성은 특성 값(가령, 문자열, 정수 등)에 대응할 수 있으며, 예를 들어, 도 17의 전역 데이터 구조에 관련하여 설명된 것들이 있다. 다양한 실시예에서, 전역 데이터 구조 는 네스티드(netsted) 전역 데이터 구조(또는 그 곳으로의 참조)를 포함할 수 있다. 설명을 위해, 특성 클래스 xxxxx는, 예를 들어, 도 20에서 설명된 바와 같이, 배의 특성을 정의할 수 있다. 전역 데이터 구조는, 상 기 배가 갖고 있는 ”포지셔닝“에 대한 특정을 정의하는 네스티드 전역 데이터 구조를 포함할 수 있다. 도 16은 본 발명의 하나 이상의 실시예에 따르는 전역 데이터 구조 명세 파일의 예를 나타내는 도면을 포함한다. 전역 데이터 구조 명세 파일는, 저역 데이터 구조에 내장되어 있는 데이터를 액세스하기 위해, 합성 환경 생성 플랫폼에서 노드를 사용하는 인스턴스 관리 스키마를 위해 제공된다. 전역 데이터 구조 명세 파 일은 각각의 특성 클래스 객체에 대한 메타데이터를 포함할 수 있다. 사익 메타데이터는 할당된 속성에 대한 대응하는 특성 값을 제공하도록 구성될 수 있다. 일부 실시예에서, 특성 클래스 객체는, 합성 환경 내에서, 물체, 정보 및 그 밖의 다른 매개변수를 렌더링, 생성, 또는 인스턴스화하기 위해 사용되는 데이터, 또 는 정보를 갖는 객체일 수 있다. 덧붙이자면, 특성 클래스 객체는, 가령 고속, 또는 큰 용량의 네트워크 연결과 함께 사용될 때 빠른 게임 플레이, 합성 환경 생성 등을 가능하게 하는 감소된 메시지 데이터를 제공하도록 구 성될 수 있다. 예를 들어, 특성 클래스 객체는 객체를 인스턴스화하기 위해 사용되는 데이터의 전부, 또는 부분 을 포함할 수 있다. 합성 환경 생성 플랫폼(또는 그 내부의 노드)은 게임 데이터의 값을 생성, 디스플레이 및/ 또는 구현하기 위한 메타데이터를 구현할 수 있다. 덧붙여, 전역 데이터 구조 명세 파일은 식별자 에 의해 참조될 수 있으며(즉, “특성 클래스 명세 yyyyy\"), 가령, 위치 ”instance.mgmt.schema\"에서 인스턴스 관리 스키마에 대한 레퍼런스를 포함할 수 있다. 일부 실시예에서, 인스턴스 관리 스키마는 특성 클래스 객체의 데이터를 액세스하기 위한 노드의 사용을 설명하는 데이터 모델이다. 덧붙여, 전역 데이터 구조 명세 파일은 특성 클래스 객체를 위한 특성 값(또는 그 레퍼런스)을 포함할 수 있다. 도 17은 본 발명의 하나 이상의 실시예에 따라, 특성 클래스 시스템의 요소를 도시하는 다이어그램이다. 일부 실시예에서, 특성 클래스는 전역 데이터 구조로 구현될 수 있고, 하나 이상의 특성(“특성 ”)을 가질 수 있다. 여기서, 특성 클래스는 대응하는 특성 값으로의 특정 특성 포인트의 컨테이너 이도록 구성된다. 덧붙여, 하나 이상의 특성은 특성 값, 예를 들어, 문자열형(“PropertyString)(1708a) 과, 정수형(”PropertyInt\")(1708b)와, 큰정수형(“PropertyBigInt\")(1708c) 등을 포함할 수 있다. 전역 데이터 구조 명세 파일은 특성 클래스 명세를 포함하는 것으로 나타난다. 이에 따라서 특성 클래스의 공통 타입의 인스턴스는 특서 클래스 명세와 관련될 수 있다. 예를 들어, “Player(플레 이어)”라고 명명된 특성 클래스는, 예를 들어, 특성 및 특정 값을 특정하는 특성 클래스 명세에 대한 관계를 가질 수 있다. 덧붙여, 특성 클래스 명세는 하나 이상의 특성 명세로의 포인터의 벡터(“ PropertySpec\")를 포함할 수 있으며, 이들 각각은 특성과 연계된 메타데이터를 포함할 수 있다. 특 성 클래스 관리자(”PropertyClassManager\")는 특성 클래스 명칭과 특성 클래스 명세를 하나의 키와 값의 쌍으로 판단하기 위한 맵(가령 룩업 테이블)을 포함할 수 있다. 런-타임, 또는 실행 동안, 합성 환경 생성 플랫 폼(또는 노드)은 특성 클래스 시스템으로부터 데이터 구조와 게임 데이터의 구현을 관리하기 위해 특성 클래스 관리자를 사용할 수 있다. 도 18은 본 발명의 하나 이상의 실시예에 따라 전역 메시지를 생성하기 위한 흐름도를 도시한다. 흐름도 는 하나 이상의 특상 클래스 객체 파일, 가령 XML 기반의 객체 데이터 파일을 편집, 또는 생성하기 위해 구성된 전역 데이터 구조 편집기를 도시한다. 전역 데이터 구조 편집기는, 예를 들어, 맥락 친화적 (context-friendly) 인터페이스 요소, 가령, 드롭-다운 메뉴를 제공하고, 연계된 특성 클래스 명세를 기초로 데 이터 범위 검증을 제공하도록 구성된 편집기일 수 있다. 덧붙여, 전역 데이터 구조 편집기는 XML 판독기 와 XML 기록기를 사용하여, 데이터를 소스로, 또는 소스로부터 시리얼라이즈(serialize)할 수 있다. 상기 소스는 XML 기반의 객체 데이터 파일 중 하나 이상일 수 있다. 다양한 실시예에서, 전역 데이 터 구조 편집기는 확장 마크업 언어(즉, XML), 하이퍼텍스트 마크업 언어(즉, HTML), 또는 그 밖의 다른 임의의 마크업, 또는 포맷팅 언어에 따라 포맷이 정해진 데이터를 편집하도록 구성될 수 있다. 전역 데이터 구 조 편집기는, 일부 경우에서, XML 기반의 편집기로 대체될 수 있다. 왜냐하면 특성 클래스 표현은 XML-호환형 포맷을 갖기 때문이다. XML 기반 편집기는 다수의 상업적으로 이용가능한 툴 중 하나, 가령, - 23 -공개특허 10-2010-0014941Altova, Inc(매사추세츠, 비버리힐)의 XMLSpy일 수 있다. 특성 클래스 데이터 파일은 시리얼라이징, 또는 특성 시스템의 XML 판독기의 기능을 이용하여 런타 임 환경으로 가져가진다. 이는 파일로부터 XML-기반의 특성 클래스 데이터를 취하고, “인-메모리(in- memory)”C++ 특성 클래스 객체 표현을 생성한다. XML 기록기의 기능을 이용하여, 임의의 수정이 원본 소스로 다시 반영될 수 있다. 데이터의 시리얼라이징 및 위장(obfuscation) 대 XML 표현의 속도를 향상시키기 위해, 특성 클래스 객체 가 바이너리 판독기(Binary Reader, 1810)와 바이너리 기록기(Binary Writer, 1801) 수단을 이용하여, 디스크 기반의 이진 포맷(binary format, 1810)으로 시리얼라이즈될 수 있다. 이로 인해서, 개발자는 편리한 툴을 이용 하여 인간에 의해 판독가능한 포맷(가령, XML)로 편집하고, 실행 및 위장(obfuscation)의 속도가 중요할 때는 상기 XML을 이진 포맷으로 변환할 수 있다. C++ 객체의 임의의 인스턴스가 네트워크를 통해 전송될 필요가 있을 경우, 특성 클래스 객체는 송신기 에서 송신되기 위해 “패킹(packed)”, 또는 “패킷화(packetize)\"된다. 에서의 패킷화는 바이너리 기록기의 서비스를 이용하여, 패킷을 생성할 수 있으며, 에서 패킷을 링크를 통해 전송할 것 이다. 반면에, 수신기가 패킷을 수신하고 바이너리 판독기의 서비스를 이용하여, 상기 데이터를 인 -메모리 C++ 특성 클래스 객체 표현의 인스턴스로 언-패킷화할 수 있다. 송신기, 또는 수신기 , 또는 둘 모두가 다양한 실시예에 따라, 전역 메시지 인터페이스로 구현될 수 있다. 도 19는 본 발명의 하나 이상의 실시예에 따라 전역 메시지를 생성하기 위한 특성 클래스 시스템의 요소를 도시 한다. 다이어그램은 다음의 특성 클래스 시스템 요소를 사용하는 전역 메시지 생성 프로세스를 도 시한다: 특성 클래스 객체(1902, 1904 및 1906) 등의 특성 클래스 객체와, 특성 클래스 매니페스트와, 특 성 클래스 관리자와, 특성 클래스 명세 파일. 설명을 위한 목적으로, 전역 메시지 생성 프로세스 가 캐릭터 데이터에 관한 전역 메시지를 생성하도록 구성된다고 가정하자. 이에 따라서, 전역 메시지 생 성 프로세스는, 네스티드 특성 클래스 객체(1902 및 1904)를 포함하는 특성 클래스 객체(“플레이어 ”)를 사용한다. 네스티드 특성 클래스 객체(“주문”)는, 가령, 플레이어가 갖고 있는 주문의 타 입과 강도를 나타내는 데이터의 데이터 정렬을 포함한다. 네스티드 특성 클래스 객체(“무기”)가, 가령, 플레이어가 소유하는 무기의 종류를 나타내는 데이터의 데이터 정렬을 포함한다. 하나 이상의 실시예에서, 특성 클래스 매니페스트는, 특성 클래스 객체를 인스턴스화하기 위해 특성 시스 템에 의해 사용될 수 있는 정보와 데이터를 리스팅하거나 조합하기 위한 공간을 제공하도록 구성된다. 예를 들 어, 특성 클래스 매니페스트가 각각의 리스트에 대해 특성 클래스 식별자(“ID\"), 명세 파일(가령, 명세 파일(도 17)) 명칭, 카테고리 태그를 포함하여, 특성 클래스 객체를 그룹화하는 것을 보조할 수 있다. 덧 붙이자면, 특성 클래스 매니페스트는 파일 명칭, 특성 클래스 객체 명칭 및 전역 메시지를 생성하기 위한 그 밖의 다른 자원(또는 정보의 소스)를 기재할 수 있다. 특성 클래스 관리자는 논리적 및 물리적 자원과 데이터의 맵을 포함하여, 특성 클래스 객체(1902, 1904 및 1906)의 데이터 구조의 구현과 상기 데이터 구조 내 부의 게임 데이터를 관리할 수 있다. 특성 클래스 명세 파일은 특성 값, 또는 상기 특성 값으로의 레퍼런 스를 포함할 수 있다. 합성 환경 생성 플랫폼 및/또는 그 노드는 전역 메시지 생성 프로세스와 앞서 설명된 특성 클래스 시스템 요소를 구현하여, 전역 메시지(또는 전역 데이터 구조)를 형성할 수 있으며, 이는 도 1 및 3에서 나타는 바와 같은 합성 환경 생성 플랫폼의 노드에 의해 사용될 수 있다. 노드(가령, 서버, 클라이언트, 피어, 도는 그 밖의 다른 프로세서)가 전역 메시지 생성 프로세스를 개시할 때, 전역 데이터 구조는 전연 메시지의 일부분으 로서 구현될 수 있다. 그 후, 프로세스가 구현된 전역 메시지를 수신하는 것을 고려한다. 이에 따라, 프 로세스는 메시지로부터 직접, 소스 코드의 컴파일을 요청할 필요없이, 데이터를 사용할 수 있다. 도 20은 본 발명의 하나 이상의 실시예에 따라, 플러그를 생성하기 위한 특성 클래스 시스템의 요소를 도시한다. 다이어그램은 다음의 특성 클래스 시스템 요소를 사용하는 플러그 생성 프로세스를 도시 한다: 특성 클래스 객체(2002-2006)와, 특성 클래스 매니페스트와, 특성 크랠스 관리자과, 특성 클 래스 명세 파일. 설명을 위한 목적으로, 플러그 생성 프로세스는 배의 이미지, 또는 게임 요소(가 령, 화물선, 유조선, 전함(가령, Ticonderoga-class, Aegis guided missile cruiser), 여객선, 원양선 등)을 동적 콘텐츠로서 합성 환경으로 도입시키기 위한 플러그를 생성하도록 구성된다. 이에 따라서, 플러스 생성 프 로세스는, 네스티드 플러그 특성 클래스 객체(2002, 2004 및 2005)를 포함하는 플러그 특성 클래스 객체 (“배”)를 사용한다. 상기 네스티드 특성 클래스 객체(“포지셔닝”)은, 예를 들어, 배가 갖는 포 - 24 -공개특허 10-2010-0014941지셔닝과 상대적 움직임을 나타내는 데이터 정렬을 포함한다. 네스티드 특성 클래스 객체(“속도”)는, 예를 들어, 배가 움직이는 속도를 나타내는 데이터의데이터 정렬을 포함한다. 네스티드 특성 클래스 객체(“배 로서 나타남”)는가령, 희망하는 배의 형태처럼 보이는 배의 외관을 묘사하는 데이터의 데이터 정렬을 포 함한다. 하나 이상의 실시예에서, 특성 클래스 매니페스트와, 특성 클래스 관리자와, 특성 클래스 명세 파일은 도 19에서 설명된 바와 유사한 기능 및/또는 구조를 가질 수 있다. 일부 실시예에서, 플러그 는, 예를 들어, 데이터, 자산(asset), 절차적 동작(procedural action) 리스트와 조건적 트리거를 특정하는 표 현을 일컬을 수 있다. 데이터 표현의 하나의 예로는, 배의 속도를 특정하는 데이터를 포함하는 특성 클래스 객 체가 있다. 자산 표현의 하나의 예로는 배를 특정하는 데이터를 자산으로서 포함하는 플러그 특성 클래스 객체가 있다. 절차적 동작 리스트에 대한 표현의 예로는 플러그 객체가 수행해야 하는 동작을 특정하는 데이터가 있다. 예를 들어, 절차적 동작 리스트 데이터는 배가 항구 쪽으로 돌아오고, 계속 항해하며, 부두에 정박할 것을 특정할 수 있다. 조건적 트리거 표현의 예로는, 상기 조건적 트리거가 이벤트 Y에서 발 생되면 X가 발생해야 한다는 것을 특정하는 데이터가 있다. 예를 들어, 조건적 트리거 데이터는 배가 부두에 도 착할 때 폭발하도록 특정할 수 있다. 합성 환경 생성 플랫폼 및/또는 그 노드가 플러그 생성 프로세스와 앞서 설명된 특성 클래스 시스템 요소 를 구현하여, 플러그 데이터를 형성할 수 있다. 그 후, 프로세스가 플러그 데이터의 수신자 라고 가정하자. 특히, 플러그 데이터는 게임 데이터를 프로세스의 소켓 코드에게 제공할 수 있는 하나 이상의 전역 데이터 구조를 포함한다. 이에 따라서, 프로세스는 플러그 데이터를 사용하 여, 프로세스나 소켓 코드에 대한 소스 코드의 추가적인 컴파일 없이, 동적 콘텐츠를 합성 환경으 로 도입시킬 수 있다. 하나의 실시예에서, 플러그 데이터는 데이터베이스(“d/B\")에 배 플러그 데 이터로서 저장될 수 있다. 사용자는 이벤트 서버와의 협업을 위해 이벤트 편집기를 사용하여, 배 플러그 데이터를 생성할 수 있다. 덧붙여, 사용자는, 배 플러그 데이터가 소켓 코드 에 플로깅되어, 동적 콘텐츠가 생성되는 날짜와 시간을 스케줄링하기 위해 이벤트 편집기를 사용할 수 있다. 일부 실시예에서, 이벤트 편집기는 XML 편집기, 또는 특성 클래스 편집기의 상단에 위치하는 애플리케이션일 수 있다. 도 21은 본 발명의 하나 이상의 실시예에 따라, 압축형 전역 메시지를 구현하는 메시징 시스템의 일부분을 도시 하는 다이어그램이다. 여기서, 메시지 시스템 부분은 서버 프로세스와 클라이언트 프로세스 를 포함하며, 둘 모두, 메시지를 교환하기 위한 네트워크를 통해 연결된다. 이 실시예에서, 메시지 시스 템 부분은 메시지를, 서버 측(또는 클라이언트 측) 특성 클래스 객체(“<pco>”)과 연계되는 데이 터의 서브셋을 포함하여, 전역 데이터 구조로서 전성할 수 있다. 이러한 메시지의 예는, 합성 환경의 수정을 가 리키는 클라이언트 프로세스로부터의 응답이 있다. 서버 프로세스와 클라이언트 프로세스는 각각 전역 메시지 인터페이스(2110a)와 전역 메시지 인터페이스(2110b)를 포함한다. 서버 프로세스는 특 성 클래스 객체에 따라 정렬된 데이터를 사용하여, 클라이언트 프로세스로부터 송신된 게임 데이터 수정에 응답하여, 합성 환경을 생성할 수 있다. 수정된 게임 데이터의 예로는, 합성 환경에서의 아바타의 운동 을 야기하는 클라이언트 프로세스에 의해 생성된 데이터가 있다. 하나 이상의 실시예에서, 서버 프로세스 및/또는 클라이언트 프로세스가 압축형 전역 메시지로서 메시지를 교환할 수 있다. 서버 프 로세스와 클라이언트 프로세스 모두가, 데이트를 교환하기 위한 특성 클래스 객체를 구현할 수 있기 때문에, 압축형 전역 메시지에서 감소된 크기의 데이터가 교환될 수 있다. 일부 실시예에서, 특 정 클래스 객체와 연계된 수정된 게임 데이터가 전역 메시지로 전송될 수 있다. 예를 들어, 수정된 게임 데이터가 특정 특성에 대해 수정된 값을 특정함을 고려하자. 사익 수정된 값은 인덱스로서 식별될 수 있다. 이에 따라서, 압축형 전역 메시지가, 수정된 게임 데이터의 관련 속성을 식별하기 위해, 인덱스를 포함할 수 있다. 이러한 정보를 이용하여, 서버 프로세스는 합성 환경를 수정하도록 구성, 또는 구현될 수 있다. 도 22는 본 발명의 하나 이상의 실시예에 따라, 합성 환경 생성 플랫폼과 상호대화하기 위해 전역 메시징 인터 페이스를 구현하는 다수의 장치를 도시한다. 합성 환경 생성 플랫폼은 게임 서브프로세스와, 데이 터베이스 프로세스와, 게임 관리 서버(2288a 내지 2288n)를 포함하는 게임 관리 프로세스를 포함한 다. 도시되는 바와 같이, 전역 관리 인터페이스(UMI)를 구현하는 다양한 클라이언트가 가령 인터넷 등의 네트워크를 통해 합성 환경 생성 플랫폼과 상호대화할 수 있다. 이 예시에서, 셋 톱 박스 (2290a)와, 모바일 장치(2290b)와, 컴퓨팅 장치(2290c)와, 게임 콘솔(2290d)와, 위성 수신기(RX)(2290e)와, 셀 폰(2290g)과, PDA(2290h)와, 텔레비전(2290i)이 전역 메시징 인터페이스(UMI)를 구현하도록 구성될 수 있다. 하나 이상의 실시예에서, 로직(가령 프로세서 및 메모리)을 포함하는 임의의 장치(2290f)가 다양한 실시 - 25 -공개특허 10-2010-0014941예의 전역 데이터 구조 및/또는 특성 클래스를, 합성 환경의 참여자에게 구현할 수 있다. 다양한 실시예에서, 특성 클래스 시스템 및 그 인스턴스가 C++ 특성 클래스 객체로, 또는 그 밖의 다른 언어의 특성 클래스로 구현될 수 있다. 덧붙여, 앞서 온라인 게임의 맥락에서 다양한 특징을 설명했지만, 본 발명의 실 시예는 온라인 게임에 국한되지 않는다. 오히려, 본원에서 설명된 특징과 기법은, 훈련, 교육, 사회 등의 목적 으로 합성 환경에 적용될 수 있다. 또한 앞서의 설명은 클라이언트-서버 아키텍처의 분산 서버의 맥락으로 제공 되었지만, 다양한 실시예는 이에 제한되지 않는다. 예를 들어, 하나 이상의 노드 프로레스가 하나의 단일 프로 세스로 집합될 수 있다. 덧붙이자면, 본 발명의 실시예를 이용하여 임의의 네트워크 아키텍처와 토포롤지가 구 현될 수 있다. 예를 들어, 합성 환경 생성 플랫폼이 피어-투-피어 네트워크 등을 구현할 수 있다. 본 발명의 실시예 중 일부, 또는 전부에서, 앞서 설명된 특징의 구조 및/또는 기능이 소프트웨어, 하드웨어, 펌 웨어, 회로, 또는 이들의 조합으로 구현될 수 있다. 앞서 설명된 구조와 구성 요소뿐 아니라 그 기능들이 하나 이상의 그 밖의 다른 구조나 요소로 합쳐질 수 있다. 또는 요소와 그 기능이 구성 서브-요소로 분할될 수 있다. 소프트웨어로서, 앞서 설명된 기술은 다양한 타입의 프로그래밍, 또는 포맷팅 언어, 프레임워크, 구문, 애플리 케이션, 프로토콜, 객체, 또는 기법을 이용하여 구현될 수 있으며, 그 예로는 C, 객체 C, C++, C#, FlexTM, Fireworks, JAVATM, JavascriptTM, AJAX, COBOL, Fortran, ADA, XML, HTML, DHTML, XHTML, HTTP, XMPP 등이 있 다. 이들은 다양할 수 있으며, 앞서 제공된 기재에 제한받지 않는다."}
