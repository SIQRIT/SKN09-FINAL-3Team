{"patent_id": "10-2020-0043299", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0125742", "출원번호": "10-2020-0043299", "발명의 명칭": "클라우드 상에서의 시각화된 마이크로서비스 기반 소프트웨어 개발 지원 시스템 및 방법", "출원인": "주식회사 크로센트", "발명자": "김영창"}}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "클라우드 플랫폼 상에서 마이크로서비스를 구현하는 개발 지원 시스템으로서, 상기 마이크로서비스를 구성하는 앱과 서비스를 포함하는 서비스 구성요소를 시각적으로 배치하고 편집하는 비주얼 편집기를 실행하기 위한 편집 서버; 및상기 앱과 상기 서비스에 관한 정보를 저장하고, 객체-관계형 데이터베이스 관리 시스템에서 운용되는 데이터베이스 서버를 포함하되,상기 앱과 상기 서비스는 상기 클라우드 플랫폼에 배포되어 연동 사용되는 것을 특징으로 하는 마이크로서비스기반 개발 지원 시스템."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 마이크로서비스를 구성하는 상기 서비스 구성요소에는 사용자와 인터페이스하는 프론트엔드 앱과; 상기 프론트엔드에서 전달된 데이터를 처리하는 백엔드 앱과; 클라이언트 요청에 대한 엔드 포인트를 통합하는 게이트웨이와; 상기 마이크로서비스를 등록하는 레지스트리 서버와; 상기 마이크로서비스의 상세 설정을 수행하는 설정 서버 중 하나 이상이 포함되는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 마이크로서비스의 생성 요청 시 상기 게이트웨이, 상기 레지스트리 서버, 상기 설정 서버가 서비스 브로커로서 기본적으로 임베디드되는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,상기 클라우드 플랫폼은 개방형 PaaS로서, 상기 프론트엔드 앱과 상기 백엔드 앱은 개발자에 의해 분리 개발된후 사용자 환경변수 중 마이크로서비스에 관한 변수가 활성화되어 상기 클라우드 플랫폼에 배포된 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 비주얼 편집기는 상기 마이크로서비스 생성 시 다이어그램 형태로 상기 앱과 상기 서비스를 구현되어, 구성 화면의 메인창 내에 앱 객체와 서비스 객체가 도형 이미지로 표현된 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "공개특허 10-2021-0125742-3-제5항에 있어서,상기 앱 객체 및 상기 서비스 객체 중 하나 이상은 상기 메인창의 외부에 마련된 메뉴로부터 드래그 앤 드롭 방식으로 상기 메인창 내에 등록되는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5항에 있어서,상기 비주얼 편집기는 상기 앱 객체 중 소스(source)에 해당하는 객체 위에 마우스를 올리고 특정 키를 누른 상태에서 타겟(target)에 해당하는 객체 위로 마우스를 드래그하는 이벤트 발생 시 소스 객체와 타겟 객체 사이를잇는 화살표를 네트워크 객체로 생성하는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제2항에 있어서,상기 비주얼 편집기는 상기 마이크로서비스의 조회 시 상기 마이크로서비스의 구성 결과를 토폴로지 형태로 표시하는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "클라우드 플랫폼 상에서 마이크로서비스 기반 개발 지원 시스템을 통한 마이크로서비스 기반 개발 지원 방법으로서, 상기 클라우드 플랫폼 상에 마이크로서비스에 포함될 프론트엔드 앱과 백엔드 앱이 등록되는 단계;상기 마이크로서비스 기반 개발 지원 시스템의 비주얼 편집기가 실행되면, 상기 클라우드 플랫폼에서 제공하는게이트웨이 앱이 기본 임베디드되는 단계;상기 프론트엔드 앱과 상기 백엔드 앱을 목록에서 찾아 마이크로서비스 구성 화면에 등록시키는 단계;상기 클라우드 플랫폼을 통해 바인딩될 서비스를 선택하여 상기 마이크로서비스 구성 화면에 등록시키는 단계;상기 프론트엔드 앱, 상기 백엔드 앱, 상기 게이트웨이 앱, 상기 서비스 사이를 선으로 연결하여 네트워크 및라우팅 연결을 수립시키는 단계; 및상기 마이크로서비스의 구성 결과를 저장하는 단계를 포함하는 마이크로서비스 기반 개발 지원 방법."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 프론트엔드 앱, 상기 백엔드 앱, 상기 서비스는 드래그 앤 드롭 방식으로 상기 마이크로서비스 구성 화면에 등록되는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 방법."}
{"patent_id": "10-2020-0043299", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서,상기 프론트엔드 앱, 상기 백엔드 앱, 상기 서비스는 도형 이미지의 객체로 표현되고, 상기 네트워크 및 라우팅연결은 상기 객체 사이를 잇는 선으로 표현되어 상기 마이크로서비스가 다이어그램 형태의 토폴로지를 갖는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 방법.공개특허 10-2021-0125742-4-"}
{"patent_id": "10-2020-0043299", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "클라우드 상에서의 시각화된 마이크로서비스 기반 소프트웨어 개발 지원 시스템 및 방법이 개시된다. 본 발명의 일 실시예에 따르면, 클라우드 플랫폼 상에서 마이크로서비스를 구현하는 개발 지원 시스템으로서, 상기 마이크 로서비스를 구성하는 앱과 서비스를 포함하는 서비스 구성요소를 시각적으로 배치하고 편집하는 비주얼 편집기를 실행하기 위한 편집 서버; 및 상기 앱과 상기 서비스에 관한 정보를 저장하고, 객체-관계형 데이터베이스 관리 시스템에서 운용되는 데이터베이스 서버를 포함하되, 상기 앱과 상기 서비스는 상기 클라우드 플랫폼에 배포되어 연동 사용되는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템이 제공된다."}
{"patent_id": "10-2020-0043299", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 클라우드 상에서의 시각화된 마이크로서비스 기반 소프트웨어 개발 지원 시스템 및 방법에 관한 것이다."}
{"patent_id": "10-2020-0043299", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "클라우드 컴퓨팅은 서로 다른 물리적 위치에 존재하는 컴퓨터들의 리소스를 가상화 기술로 통합해 제공하는 기 술로서, 사용자 중심의 컴퓨터 환경에 해당한다. 클라우드 컴퓨팅 기술은 크게 IaaS(Infrastructure as a Service), PaaS(Platform as a Service), SaaS(Software as a Service)로 구분될 수 있다. 특히, PaaS 서비스 사용자(소프트웨어 개발자)는 개발, 테스트, 배포, 호스팅에 관한 플랫폼과 서비스를 제공받아 신규 어플리케이 션을 개발하고 배포하게 된다. 마이크로서비스 아키텍처(Microservice Architecture)는 하나의 큰 어플리케이션 또는 컴퓨팅 서비스를 각각 특 화된 기능을 담당하는 복수 개의 서비스 모듈로 나누어 구현한 아키텍처이다. 마이크로서비스 아키텍처에서는 복수 개의 서비스 모듈의 변경과 조합을 통해 전체 어플리케이션 또는 서비스를 구성하게 되므로, 종래의 모놀 리식(Monolithic) 아키텍처와 비교하여 기능의 추가, 삭제, 개선이 자유롭다. 마이크로서비스 기반 개발은 주 단위, 격주 단위의 짧은 기간에도 앱을 개발하고 배포할 수 있기 때문에 PaaS 서비스 사용자가 신속하게 제품을 시장에 출시할 수 있게 한다. 또한, 비즈니스 변화 대응을 위해 빈번한 제품 변경 발생에도 해당 기능을 갖고 있는 앱만 수정하여 바로 적용할 수 있기도 하다. 따라서, 마이크로서비스에 기반한 소프트웨어 개발 지원이 요구되고 있는 상황이다. 선행기술문헌 특허문헌 (특허문헌 0001) 한국공개특허 제10-2019-0133404호 (2019.12.03. 공개) - 마이크로 서비스 아키텍처 기반의 서비스 시스템 및 상기 시스템에서의 멀티 테넌트 설정 관리 방법"}
{"patent_id": "10-2020-0043299", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 클라우드 상에서 구동이 가능하고 서비스(기능)을 마이크로서비스 단위로 분할하여 구현 시 활용함으 로써 클라우드 생태계 활성화를 도모할 수 있는 클라우드 상에서의 시각화된 마이크로서비스 기반 소프트웨어 개발 지원 시스템 및 방법을 제공하기 위한 것이다. 본 발명은 비주얼 편집 기능을 통해 복잡한 마이크로서비스를 쉽게 표현하고 사용할 수 있도록 가시성과 사용자 편의성을 높인 클라우드 상에서의 시각화된 마이크로서비스 기반 소프트웨어 개발 지원 시스템 및 방법을 제공 하기 위한 것이다. 본 발명의 이외의 목적들은 하기의 설명을 통해 쉽게 이해될 수 있을 것이다."}
{"patent_id": "10-2020-0043299", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일 측면에 따르면, 클라우드 플랫폼 상에서 마이크로서비스를 구현하는 개발 지원 시스템으로서, 상 기 마이크로서비스를 구성하는 앱과 서비스를 포함하는 서비스 구성요소를 시각적으로 배치하고 편집하는 비주 얼 편집기를 실행하기 위한 편집 서버; 및 상기 앱과 상기 서비스에 관한 정보를 저장하고, 객체-관계형 데이터베이스 관리 시스템에서 운용되는 데이터베이스 서버를 포함하되, 상기 앱과 상기 서비스는 상기 클라우드 플랫 폼에 배포되어 연동 사용되는 것을 특징으로 하는 마이크로서비스 기반 개발 지원 시스템이 제공된다. 상기 마이크로서비스를 구성하는 상기 서비스 구성요소에는 사용자와 인터페이스하는 프론트엔드 앱과; 상기 프 론트엔드에서 전달된 데이터를 처리하는 백엔드 앱과; 클라이언트 요청에 대한 엔드 포인트를 통합하는 게이트 웨이와; 상기 마이크로서비스를 등록하는 레지스트리 서버와; 상기 마이크로서비스의 상세 설정을 수행하는 설 정 서버 중 하나 이상이 포함될 수 있다. 상기 마이크로서비스의 생성 요청 시 상기 게이트웨이, 상기 레지스트리 서버, 상기 설정 서버가 서비스 브로커 로서 기본적으로 임베디드될 수 있다. 상기 클라우드 플랫폼은 개방형 PaaS로서, 상기 프론트엔드 앱과 상기 백엔드 앱은 개발자에 의해 분리 개발된 후 사용자 환경변수 중 마이크로서비스에 관한 변수가 활성화되어 상기 클라우드 플랫폼에 배포될 수 있다. 상기 비주얼 편집기는 상기 마이크로서비스 생성 시 다이어그램 형태로 상기 앱과 상기 서비스를 구현되어, 구 성 화면의 메인창 내에 앱 객체와 서비스 객체가 도형 이미지로 표현될 수 있다. 상기 앱 객체 및 상기 서비스 객체 중 하나 이상은 상기 메인창의 외부에 마련된 메뉴로부터 드래그 앤 드롭 방 식으로 상기 메인창 내에 등록될 수 있다. 상기 비주얼 편집기는 상기 앱 객체 중 소스(source)에 해당하는 객체 위에 마우스를 올리고 특정 키를 누른 상 태에서 타겟(target)에 해당하는 객체 위로 마우스를 드래그하는 이벤트 발생 시 소스 객체와 타겟 객체 사이를 잇는 화살표를 네트워크 객체로 생성할 수 있다. 상기 비주얼 편집기는 상기 마이크로서비스의 조회 시 상기 마이크로서비스의 구성 결과를 토폴로지 형태로 표 시할 수 있다. 한편 본 발명의 다른 측면에 따르면, 클라우드 플랫폼 상에서 마이크로서비스 기반 개발 지원 시스템을 통한 마 이크로서비스 기반 개발 지원 방법으로서, 상기 클라우드 플랫폼 상에 마이크로서비스에 포함될 프론트엔드 앱 과 백엔드 앱이 등록되는 단계; 상기 마이크로서비스 기반 개발 지원 시스템의 비주얼 편집기가 실행되면, 상기 클라우드 플랫폼에서 제공하는 게이트웨이 앱이 기본 임베디드되는 단계; 상기 프론트엔드 앱과 상기 백엔드 앱 을 목록에서 찾아 마이크로서비스 구성 화면에 등록시키는 단계; 상기 클라우드 플랫폼을 통해 바인딩될 서비스 를 선택하여 상기 마이크로서비스 구성 화면에 등록시키는 단계; 상기 프론트엔드 앱, 상기 백엔드 앱, 상기 게 이트웨이 앱, 상기 서비스 사이를 선으로 연결하여 네트워크 및 라우팅 연결을 수립시키는 단계; 및 상기 마이 크로서비스의 구성 결과를 저장하는 단계를 포함하는 마이크로서비스 기반 개발 지원 방법이 제공된다. 상기 프론트엔드 앱, 상기 백엔드 앱, 상기 서비스는 드래그 앤 드롭 방식으로 상기 마이크로서비스 구성 화면 에 등록될 수 있다. 상기 프론트엔드 앱, 상기 백엔드 앱, 상기 서비스는 도형 이미지의 객체로 표현되고, 상기 네트워크 및 라우팅 연결은 상기 객체 사이를 잇는 선으로 표현되어 상기 마이크로서비스가 다이어그램 형태의 토폴로지를 가질 수 있다. 전술한 것 외의 다른 측면, 특징, 이점이 이하의 도면, 특허청구범위 및 발명의 상세한 설명으로부터 명확해질 것이다."}
{"patent_id": "10-2020-0043299", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시예에 따르면, 클라우드 상에서 구동이 가능하고 서비스(기능)을 마이크로서비스 단위로 분할하여 구현 시 활용함으로써 클라우드 생태계 활성화를 도모할 수 있는 효과가 있다. 또한, 비주얼 편집 기능을 통해 복잡한 마이크로서비스를 쉽게 표현하고 사용할 수 있도록 가시성과 사용자 편 의성을 높인 효과도 있다."}
{"patent_id": "10-2020-0043299", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명은 다양한 변경을 가할 수 있고 여러 가지 실시예를 가질 수 있는 바, 특정 실시예들을 도면에 예시하고 상세하게 설명하고자 한다. 그러나 이는 본 발명을 특정한 실시 형태에 대해 한정하려는 것이 아니며, 본 발명 의 사상 및 기술 범위에 포함되는 모든 변경, 균등물 내지 대체물을 포함하는 것으로 이해되어야 한다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이 해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있 다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 제1, 제2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 상기 구성요소들은 상기 용어들에 의 해 한정되어서는 안 된다. 상기 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용된 다. 본 명세서에서 사용한 용어는 단지 특정한 실시예를 설명하기 위해 사용된 것으로, 본 발명을 한정하려는 의도 가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들 을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요 소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 또한, 각 도면을 참조하여 설명하는 실시예의 구성 요소가 해당 실시예에만 제한적으로 적용되는 것은 아니며, 본 발명의 기술적 사상이 유지되는 범위 내에서 다른 실시예에 포함되도록 구현될 수 있으며, 또한 별도의 설명 이 생략될지라도 복수의 실시예가 통합된 하나의 실시예로 다시 구현될 수도 있음은 당연하다. 또한, 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일하거나 관련된 참조 부호를 부여하고 이에 대한 중복되는 설명은 생략하기로 한다. 본 발명을 설명함에 있어서 관련된 공지 기술에 대한 구체적인 설명이 본 발명의 요지를 불필요하게 흐릴 수 있다고 판단되는 경우 그 상세한 설명을 생략한다. 또한, 명세서에 기재된 \"…부\", \"…유닛\", \"…모듈\", \"…기\" 등의 용어는 적어도 하나의 기능이나 동작을 처리 하는 단위를 의미하며, 이는 하드웨어나 소프트웨어 또는 하드웨어 및 소프트웨어의 결합으로 구현될 수 있다. 본 실시예에서 마이크로서비스는 한가지 기능(비즈니스 관련 기능/역할)을 수행하는 것에 초점을 맞춘 서비스에 독립적이고 배포 가능한 가장 작은 단위의 서비스(=atom)로 분리하고 API를 통해 다른 서비스와 연계할 수 있는 것으로, 독립적인 팀이 각 서비스의 개발과 운영을 담당할 수 있다. 마이크로서비스는 애플리케이션('앱'이라고도 칭함) 구축을 위한 아키텍처 기반의 접근 방식이다. 즉, 아주 작 은 단위의 서비스들을 실행할 수 있도록 구성하기 위한 서비스 중심의 아키텍처이다. 각 기능을 서비스라고 부 르며, 독립적으로 구축하고 배포할 수 있다. 이는 개별 서비스가 다른 서비스에 영향을 주지 않으면서 작동(또 는 장애가 발생)할 수 있음을 의미한다. 도 1은 모놀리식 아키텍처와 마이크로서비스 아키텍처의 비교도이다. 모놀리식 아키텍처는 하나의 애플리케이션에 데이터가 연결된 구성이 일반적이다. 애플리케이션의 크기가 클 경 우 변경과 배포가 쉽지 않은 구조를 가진다. 이에 반해 마이크로서비스 아키텍처는 서비스와 데이터가 분할되어 작은 서비스들이 여러 독립된 형태로 서비스를 제공하며, 필요에 따라 서로 참고하여 사용되기도 한다. 마이크로서비스 아키텍처는 모놀리식 아키텍처와 비교할 때 하나의 애플리케이션 형태가 아닌 분할된 다수의 서 비스라는 차이점을 가진다. 애플리케이션뿐만 아니라 데이터까지 분리하여 격리된 독립적인 환경으로 구성될 수 있다. 도 2는 본 발명의 일 실시예에 따른 클라우드 상에서의 마이크로서비스 아키텍처의 구성 블록도이고, 도 3은 서 비스 디스커버리를 설명하기 위한 도면이다. 본 발명의 일 실시예에 따른 클라우드 상에서의 마이크로서비스 아키텍처 는 마이크로서비스를 구성하고 지 원한다. 본 실시예의 경우 개발된 소프트웨어(이하, '어플리케이션', '앱'으로 칭하기도 함)는 클라우드 생태계 활성화 를 위해 개방형 클라우드(Open PaaS)에서 실행 가능하게 제작될 수 있다. 도 2를 참조하면, 본 실시예에 따른 마이크로서비스 아키텍처는 마이크로서비스 구성부, 서비스 등록/ 감지부, 서비스 설정부, 서비스 게이트웨이, 서비스 모니터링부, 큐잉 시스템부를 포함할 수 있다. 마이크로서비스 구성부는 마이크로서비스 개발 지원 시스템(비주얼 편집기) 및 저장부(Repository)를 통해 마이크로서비스를 구성한다. 서비스 등록/감지부는 마이크로서비스에 포함될 앱과 서비스를 감지하고 등록시키는 레지스트리 기능을 지 원한다. 서비스 설정부는 마이크로서비스에 관한 환경을 설정하고 동적으로 관리할 수 있게 하는 환경 설정 관리 기 능을 지원한다. 서비스 게이트웨이는 클라이언트의 요청을 해석하여 가용성을 유지할 수 있게 부하 분산 기능과 적절한 서 비스로 연결해주는 라우팅 기능을 지원한다. 서비스 모니터링부는 마이크로서비스의 요청 상태와 서킷 브레이커 기능을 실시간으로 모니터링할 수 있게 지원한다. 큐잉 시스템부는 마이크로서비스에 관한 메시지를 공유하고(메시징 시스템), 명령과 조회의 책임을 분리하 는 기능(CQRS, Command and Query Responsibility Segregation)을 지원한다. 본 실시예에 따른 마이크로서비스 아키텍처는 기본적으로 마이크로서비스 구축을 위해 필요한 라이브러리의 집합(예: 스프링 클라우드(Spring Cloud))을 활용할 수 있다. 스프링 클라우드는 가장 보편화된(범용적인) 분 산시스템 패턴에 대해 단순하고 접근 가능한 프로그래밍 모델을 제공한다. 개발자가 복원성(resilient), 신뢰성 (reliable)을 갖고, 조정된 애플리케이션(coordinated applications)을 구축할 수 있도록 지원한다. 스프링 클 라우드는 스프링 부트(Spring Boot) 기반 위에 구성됨으로써 개발자가 쉽고 빠르게 만들 수 있고, 빠르게 생산 성을 높일 수 있다. 마이크로서비스 아키텍처의 문제점 중 하나는 각 서비스가 다른 서버에 분리 배포되기 때문에 API의 엔드포인트 (end point) 즉, 서버의 URL이 각기 다르다는 것이다. 한 서비스에 한 개 이상의 서버가 존재하기 때문에 이 서 비스를 이용하는 클라리언트 입장에서는 다수의 엔드포인트가 생기게 되며, 엔드포인트 변경이 일어났을 때 관 리하기가 힘들어진다. 따라서, 마이크로서비스 아키텍처 환경에서는 서비스에 대한 도메인을 하나로 통합할 수 있는 API 게이트웨이가 필요하며, 본 실시예에서는 서비스 게이트웨이가 API 게이트웨이 기능을 수행한다. API 게이트웨이는 프록시 서버처럼 API들 앞에서 모든 API에 대한 엔드포인트를 통합하고, 인증 및 권한, 모니 터링, 로깅 등의 기능을 제공하는 미들웨어이다. 서비스 지향 아키텍처(SOA, Service Oriented Architecture) 의 ESB(Enterprise Service Bus)의 경량화 버전이다. 본 실시예에서 서비스 게이트웨이는 백엔드에 대한 모든 요청을 처리하기 위한 API 게이트웨이이다. 클라이 언트에서 다양한 형태의 요청으로 인한 이슈를 방지하기 위해 다양한 필터를 사용하고 있다. 인증 및 보안(Authentication and Security) 필터는 클라이언트 요청 시 각 리소스에 대한 인증 요구 사항을 식 별하고 이를 만족시키지 않는 요청은 거부한다. 인사이트 및 모니터링(Insights and Monitoring) 필터는 의미 있는 데이터 및 통계를 제공한다. 동적 라우팅(Dynamic Routing) 필터는 필요에 따라 요청을 다른 클러스터로 동적으로 라우팅한다. 스트레스 테스팅(Stress Testing) 필터는 성능 측정을 위해 점차적으로 트래픽을 증가시 킨다. 로드 세딩(Load Shedding) 필터는 각 유형의 요청에 대해 용량을 할당하고, 초과하는 요청은 제한한다. 정적 응답 핸들링(Static Response Handling) 필터는 클러스터에서 오는 응답을 대신하여 API 게이트웨이에서 응답 처리한다. 또한, 본 실시예에 따른 마이크로서비스 아키텍처는 로드 밸런싱을 위해 클라이언트에 탑재되어 있는 로드밸런 서를 더 포함할 수 있다. 로드밸런서에 의해 서버 사이드에서 필요한 하드웨어 부담이 사라지고, 서버 목록 변 경이 쉽고, 로드밸런싱 방식도 다양하게 설정하는 기능을 제공한다. 서비스 등록/감지부는 마이크로서비스가 시스템 등록되는 것을 자동으로 감지하여 서비스 게이트웨이가 자 동으로 인지할 수 있게 지원하는 서비스 디스커버리(Service Discovery) 기능이다. 도 3을 참조하면, '백엔드 앱'이 추가되면 서비스 등록/감지부가이 이를 감지하고, 서비스 게이트웨이 에서는 서비스 라우팅 대상에 추가한다. 서비스 등록/감지부는 디스커버리 서버와 디스커버리 클라이언트로 구성될 수 있다. 디스커버리 서버는 디 스커버리 클라이언트에 해당하는 마이크로서비스들의 상태 정보가 등록되어 있는 레지스트리(Registry)를 갖는 다. 디스커버리 클라이언트의 서비스가 시작될 때 디스커버리 서버에 자신의 정보를 등록한다. 등록된 후에는 지정 된 시간(예: 30초)마다 레지스트리에 핑을 전송하여 자신이 가용 상태임을 알리는데, 일정 횟수 이상 핑이 확인 되지 않으면 디스커버리 서버에서 해당 서비스를 레지스트리에서 제외시킨다. 레지스트리의 정보는 모든 디스커 버리 클라이언트에 복제되어 있어 필요할 때마다 가용 상태인 모든 서비스들의 목록을 확인할 수 있고 이 목록 은 지정된 시간(예: 30초)마다 갱신된다. 가용 상태의 서비스 목록을 확인할 경우에는 서비스의 이름을 기준으 로 탐색하며, 로드밸런싱을 위해 내부적으로 로드밸런서를 사용할 수 있다. 서비스 설정부는 시스템에서 참조해야 하는 환경 설정 정보(환경 변수) 등을 별도의 저장소에서 관리하여 애플리케이션이 배포된 환경에 구애받지 않고 해당 환경에 적절한 환경 정보들을 참조할 수 있는 기능(서비스) 을 제공하는 설정 서버이다. IP, 포트(Port), 서비스명, 변수 등이 환경 설정 정보가 될 수 있다. 환경 설정 정 보의 변경이 발생할 경우 이를 런타임 중에 변경 적용할 수 있으며, 애플리케이션이 환경 정보의 변경으로 재기 동되는 상황이 없도록 할 수 있다. 본 실시예에 따른 마이크로서비스 아키텍처는 트래픽 서버를 더 포함할 수 있다. 트래픽 서버는 마이크로서비스를 쉽게 배치할 수 있게 해주는 HTTP 리저브(reserve) 프록시 및 로더밸런서이다. 기존 인프라 구성요소와 통합되며 동적으로 구성될 수 있다. 서비스 레지스트리/오케스트레이터 API를 청취하여 추가 경로 업이 즉시 마이크로서비스를 외부 세계에 연결할 수 있도록 경로를 생성할 수 있다. 트래픽 서버는 호스트 이름 외에도 URL 경로를 프록시 룰(Proxy Rule)로 사용할 수 있다. 마이크로서비스에 API 서버들을 배치하고 URL 경로로 프록시 룰을 만들 수 있다. 예를 들어, /user는 userApp backend로 프록시하도록 룰을 만들 수 있다. 도 4는 본 발명의 일 실시예에 따른 클라우드 상에서의 마이크로서비스 기반 개발 지원 시스템의 구조를 나타낸 도면이고, 도 5는 마이크로서비스 앱의 관계도이며, 도 6은 마이크로서비스 기반 개발 지원 시스템의 구성 블록 도이고, 도 7은 마이크로서비스 기반 개발 지원 시스템의 데이터 모델을 나타낸 도면이며, 도 8a 내지 도 8e는 비주얼 편집기를 통한 마이크로서비스 구성 예시도이고, 도 9는 마이크로서비스 생성 절차를 나타낸 순서도이며, 도 10a 내지 도 10d는 마이크로서비스 저장 절차를 나타낸 도면이다. 도 4를 참조하면, 마이크로서비스 기반 개발 지원 시스템은 마이크로서비스를 쉽게 구성할 수 있도록 시각 화된 편집 기능을 제공하는 비주얼 편집기(스튜디오)와, 앱 이름, 설명과 같은 정보를 저장하기 위한 레파 지토리(Repository)를 포함할 수 있다. 비주얼 편집기는 가시적 표현을 위해 SVG(Scalable Vector Graphics, 스칼라블 벡터 그래픽)가 적용될 수 있다. 앱(App)과 서비스 브로커(예: 데이터베이스, 오픈 API 등)를 원형 이미지로 표현하고, 이들 간의 관계는 선으로 나타낼 수 있다. 원형 이미지는 일 예시에 해당하는 것으로, 다각형, 타원형 등으로 표현될 수도 있음은 물론이 다. 본 실시예에서는 클라우드 플랫폼에 배포된 앱과 서비스를 마이크로서비스 기반 개발 지원 시스템에 서 연동하여 사용할 수 있다. 여기서, 클라우드 플랫폼은 오픈소스 멀티 클라우드 애플리케이션인 클라우 드 파운드리(Cloud Foundry)일 수 있다. 클라우드 플랫폼은 API 게이트웨이, 레지스트리 서버, 설정 서버를 포함할 수 있다. API 게이트웨이는 앱 구성정보 저장 시 API 게이트웨이를 관리하는 앱으로 생성될 수 있다. 앱 관의 관계 를 설정하면 생성된 서비스 인스턴스에 앱이 바인딩된다. API 게이트웨이는 서비스 게이트웨이에 대응 될 수 있다. 레지스트리 서버는 서비스 디스커버리(등록 및 감지)를 위한 서비스 ID와 URL을 포함한 정보를 관리한다. 레지스트리 서버는 서비스 등록/감지부에 대응될 수 있다. 설정 서버는 각각의 앱에 대한 외부 속성의 통합 관리를 위해 구성된다. 설정 서버는 서비스 설정부 에 대응될 수 있다. 레지스트리 서버와 설정 서버는 마이크로서비스 생성 시 서비스 인스턴스와 앱으로 생성될 수 있다. 본 실시예에서 마이크로서비스 기반 앱에 포함되는 서비스 구성요소에는 프론트엔드, 백엔드, 게이트웨이, 레지 스트리 서버, 설정 서버에 관한 앱 및 서비스가 포함될 수 있다. 프론트엔드(Frontend) 앱은 백엔드 API에서 가져온 데이터의 출력, 입력을 통한 비즈니즈 로직 구성과 사용자와 대화하는 사용자 인터페이스 부분이다. 백엔드(Backend) 앱은 프론트엔드에서 전달된 데이터의 포맷이나 데이터베이스 입출력 및 다양한 비즈니스 프로 세스를 프로그래밍 코드로 구현하는 역할을 수행한다. 게이트웨이(Gateway)는 모든 클라이언트 요청에 대한 엔드 포인트(end point)를 통합하는 서버이며, 마치 프록 시 서버처럼 동작한다. 인증 및 권한, 모니터링, 로깅(logging) 등 추가적인 기능도 있다. 레지스트리 서버는 서비스를 등록하는 서버이다. 설정 서버는 서비스의 상세 설정을 할 수 있는 서버이다. 본 시스템의 사용자는 PaaS를 이용하여 소프트웨어(SaaS)를 개발하는 개발자일 수 있다. 이하 마이크로서비스 기반 개발 지원 시스템을 이용한 마이크로서비스 앱 구성 절차에 대해 설명하기로 한 다. 개발자는 마이크로서비스 기반 개발 지원 시스템을 실행한다. 그리고 사용자 입력을 통해 마이크로서비스 생성을 요청한다. 마이크로서비스 생성 요청 시 생성하고자 하는 마이크로서비스에 관한 기본 정보를 입력한다. 기본 정보에는 해 당 마이크로서비스 명칭, 버전, 공개 여부, 설명, 해당 마이크로서비스가 속하는 조직/스페이스 등의 정보가 포 함될 수 있다. 마이크로서비스 생성 시 서비스 디스커버리(서비스 등록/감지), 서비스 게이트웨이(API 게이트웨이), 설정 서버 가 기본적으로 임베디드될 수 있다. 임베디드 서비스는 분산 시스템에서 일반적인 패턴 중 일부를 빠르게 빌드 할 수 있는 도구(예: 스프링 클라우드(Spring Cloud))에서 제공하는 서비스일 수 있다. 프론트엔드 앱과 백엔드 앱은 개발 소소코드에 Java 필수 항목과 개발 가이드를 준수하여 프론트엔드와 백엔드 로 분리하여 개발자가 사전에 준비할 수 있다. 그리고 개방형 클라우드 플랫폼(Open PaaS)에 각각 배포하면서 사용자 환경변수 중 마이크로서비스에 관한 변수를 활성화시킨다('msa=yes'로 정의함). 그리고 마이크로서비스 스튜디오를 활용하여 Open PaaS에 배포된 앱과 서비스를 이용하여 마이크로서비스를 구성할 수 있다. 마이크로서비스 구성 시 서비스 배치는 Open PaaS에 설치된 서비스 목록을 사용할 수 있다. 마이크로서비스 생성 시 비주얼 편집기가 실행되며, 비주얼 편집기의 실행에 따라 사용자 단말에 표 시되는 마이크로서비스 구성 화면이 도 8에 개시되어 있다. 본 실시예에 따른 비주얼 편집기는 SVG(Scalable Vector Graphic, 스칼라블 벡터 그래픽)으로 구현되어, 메인창 내에 표시되는 마이크로서비스의 서비스 구성요소들이 자유롭게 확대/축소되거나 이동/배치될 수 있다. 마이크로서비스 생성 시 다이어그램 형태로 앱을 구성할 수 있으며, 필수 항목은 자동으로 생성하고 저장 하는 기능을 포함할 수 있다. 비주얼 편집기는 사용자 편의성을 고려한 유저 인터페이스(UI) 설계를 통해 앱과 서비스를 구성한 결과를 한 화면에서 모두 조회, 수정 및/또는 삭제할 수 있게 할 수 있다. 마이크로서비스 구성 화면에는 마이크로서비스에 포함될 서비스 구성요소들(예를 들어, 앱, 서비스, 네트 워크 등)이 시각적으로 표시되는 메인창이 포함된다. 메인창의 상부에는 현재 편집 대상인 마이크로 서비스에 관한 정보(명칭, 버전, 공개 속성 등)가 표시될 수 있다. 메인창의 우측에는 마이크로서비스를 구성할 수 있는 앱, 서비스, 네트워크, 라우팅, 설정, API 등의 서비 스 구성요소를 선택할 수 있는 메뉴항목이 마련된다. 예를 들어, 메뉴항목은 아이콘과 같은 이미지로 마련되어 있어, 드래그 앤 드롭 방식으로 메인창 내에 서비스 구성요소로 손쉽게 포함시킬 수 있다. 마이크로서비스가 최초 생성된 경우 기본적으로 게이트웨이 앱이 등록되어 있을 수 있다. 게이트웨이 앱은 필수 항목에 해당하는 서비스 게이트웨이에 대응되는 앱이다. 개발자는 생성하고자 하는 마이크로서비스에 관한 프론트엔드 앱과 백엔드 앱(프론트엔드 앱 객체, 백엔드 앱 객체 참조)을 등록할 수 있다. 이 경우 메인창의 우측 메뉴에 마련된 앱 서브메뉴에서 원하는 앱 종류를 선택하여 메인창 내로 드래그 앤 드롭 함으로써 간단히 앱을 등록시킬 수 있다(점선 화살표 참조). 도면에서 앱 객체(300, 310, 320)는 원형 이미지를 가지는 것으로 도시되어 있지만, 이는 일 실시예에 해당되는 것으로, 타원형, 다각형과 같이 다양한 형상의 도형 이미지로 표현될 수도 있음은 물론이다. 임의의 앱 객체가 선택되거나 마우스가 앱 객체의 바운더리 내에 위치하는 등의 이벤트가 발생된 경우, 앱 객체 의 우측 상단에는 앱 정보를 나타내는 정보 아이콘(i), 앱 삭제가 가능한 삭제 아이콘(x) 등이 팝업되어 표시될 수 있다. 특정 아이콘이 선택된 경우 해당 아이콘에 대응되는 기능이 활성화되어 동작할 수 있다. 앱 정보의 경 우 앱 명칭(App Name), 인스턴스(Instance), 메모리(Memory), 디스크(Disk) 등이 포함될 수 있다. 앱뿐만 아니라 서비스도 드래그 앤 드롭 방식으로 메인창 내에 가져와 마이크로서비스의 서비스 구성요소 로 포함시킬 수 있다. 서비스 객체는 앱 객체와 동일한 형상을 가질 수 있다. 이 경우 서비스 객체와 앱 객체를 구분할 수 있도 록 서로 상이한 색상을 가지게 할 수 있다(도면 참조). 또는 서비스 객체가 앱 객체와는 다른 형상을 가지도록 하여 서로 구분되게 할 수도 있다. 서비스 객체의 경우에도 정보 아이콘, 삭제 아이콘 등의 아이콘이 마련되어 있어 지정된 이벤트가 발생된 경우 서비스 객체의 주변에 표시되게 할 수 있다. 서비스 구성요소로 포함되는 서비스에는 데이터베이스, 빅데이터, 인공지능, 오픈 API 등의 플랫폼 서비스가 포 함될 수 있다. 도면에서는 마이크로서비스에 등록되는 서비스로, 빅데이터 플랫폼에 관한 Ankus 서비스가 예시 되어 있다. 메인창 내에 앱 객체(300, 310, 320) 및/또는 서비스 객체가 등록된 경우, 앱 객체(300, 310, 320) 들 간의 통신에 관한 네트워크가 등록될 수 있다. 네트워크의 등록은 다음과 같은 간단한 편집 방법에 의해 수행될 수 있다. 상호 연결시키고자 하는 객체들 중 소스(source)에 해당하는 객체 위에 마우스를 올리고 특정 키(예를 들어, Shift)를 누른 상태에서 타겟(targe t)에 해당하는 객체 위로 마우스를 드래그하면 소스와 타겟에 해당하는 두 객체 사이에 화살표(네트워크 객체 )가 만들어지면서 네트워크가 형성될 수 있다. 네트워크 객체의 경우 소스, 타겟, 프로토콜, 포트 등의 네트워크 속성 정보가 별도 창으로 표시되며, 사용자 입력에 의해 네트워크 속성 정보가 등록 혹은 수정될 수 있다. 네트워크 객체의 경우 마우스로 선택한 후 키보드의 삭제 키를 누르거나 해당 네트워크 속성 정보를 나타내는 창에서 삭제 버튼을 클릭하여 손쉽게 삭제할 수 있다. 또한, 서비스 객체로의 라우팅 정보도 입력할 수 있다. 라우팅 객체는 네트워크 객체와 같이 화 살표로 표시되지만 서로 구분되도록 선의 종류(예: 실선, 점선, 파선 등)을 다르게 표시하거나 색상, 굵기 등을 다르게 설정할 수 있다. 라우팅 객체에 대한 정보로는 서비스 명칭, 경로(Path) 등이 포함될 수 있다. 메인창을 통해 드래그 앤 드롭 등으로 간단히 마이크로서비스의 서비스 구성요소들(앱 객체, 서비스 객 체)을 배치하고 서비스 구성요소들 사이의 연결관계(네트워크 객체, 라우팅 객체)를 설정하여 구성을 완료한 후, 메인창 상단의 메뉴 중 저장 버튼을 클릭하여 편집된 마이크로서비스를 저장할 수 있다. 마이크로서비 스의 생성 과정과 저장 과정에 대해서는 도 9 내지 도 10d에 도시되어 있다. 마이크로서비스 구성 및 저장 완료된 경우, 메인창의 상단 메뉴에 시작 버튼이 생성되고, 시작 버튼을 클 릭하는 경우 현재 구성된 마이크로서비스가 시작될 수 있다. 마이크로서비스가 시작되면, 앱 객체, 서비스 객체의 배치가 보다 직관적으로 재배치되면서 해당 마이크로서비 스에 관한 서비스 상세정보가 메인창의 우측 메뉴로 표시될 수 있다. 서비스 상세정보에는 앱, 서비스, 앱-서비스, 네트워크, Rest API, 게이트웨이, 레지스트리, 설정, 앱 로깅 등 이 포함될 수 있다. 앱 상세정보에는 마이크로서비스를 구성하는 앱들에 관한 상세정보(명칭, Url, 인스턴스, 상태 등)가 포함될 수 있다. 앱의 경우 개발자가 등록하지 않았고 마이크로서비스 구성 시에도 표시되지 않았지만, 마이크로서비스를 제공하기 위해 기본적으로 임베디드되는 설정 앱과 레지스트리 앱에 관한 정보도 포함될 수 있다. 서비스 상세정보에는 마이크로서비스를 구성하는 서비스들에 관한 상세정보(인스턴스 명칭, 서비스 명칭, 플랜 등)가 포함될 수 있다. 서비스의 경우에도 경우 개발자가 등록하지 않았고 마이크로서비스 구성 시에도 표시되 지 않았지만, 마이크로서비스를 제공하기 위해 기본적으로 임베디드되는 설정 서버와 레지스트리 서버에 관한 정보도 포함될 수 있다. 앱-서비스 상세정보에는 마이크로서비스를 구성하는 앱과 서비스 간의 연결관계에 관한 상세정보가 포함될 수 있다. 예를 들어, 기본 임베디드된 게이트웨이 앱의 경우 역시 기본 임베디드된 설정 서버와 레지스트리 서버에 연결되고, 프론트엔드 앱도 설정 서버와 레지스트리 서버에 연결된다. 백엔드 앱의 경우 기본 임베디드된 설정 서버와 레지스트리 서버 이외에 라우팅을 통해 개발자가 등록한 서비스에도 연결될 수 있다. 네트워크 상세정보에는 마이크로서비스를 구성하는 네트워크에 관한 상세정보(소스, 타겟, 포트 등)가 포함될 수 있다. 프론트엔드 앱에서 게이트웨이 앱으로의 제1 네트워크, 게이트웨이앱에서 백엔드 앱으로의 제2 네트워 크가 포함될 수 있다. Rest API 상세정보에는 스웨거(Swagger)를 활용하여 앱 Rest API에 대한 정보(Rest API 스펙)가 포함되고, 입 력값에 대한 반환값 테스트가 수행될 수 있다. 게이트웨이 상세정보에는 목적지 서비스(destination service)와 URI가 포함될 수 있다. 레지스트리 상세정보에는 레지스트리에 등록된 서비스, 앱, IP에 관한 정보가 포함되어, 사용자가 추가한 프론 트엔드, 백엔드, 서비스가 레지스트리에 등록되었는지를 확인할 수 있다. 앱 로깅 상세정보를 통해 연결된 각각의 앱에 대한 로그를 수집하고 조회할 수 있다. 구성 완료된 마이크로서비스는 오픈 API를 통해 외부에서도 접속 가능하게 할 수 있다. 이를 위해 마이크로서비 스의 프론트엔드 앱에 URL 경로를 이용할 수 있다. 외부 공개 시 보안성 확보를 위해 클라우드 시큐리티(Cloud Security)(예: Spring Cloud)의 보안 인증 방법이 적용될 수 있다. 마이크로서비스 구성 화면의 상단 메뉴 중 API 메뉴를 통해 개발자가 등록한 API 목록을 조회하고 관리할 수 있다. 본 실시예에서 마이크로서비스 기반으로 개발한 API를 다른 사용자에게 공개하거나 다른 사용자가 공개한 API를 사용할 수 있도록 설계할 수 있다. 이 경우 개발 시 Rest API를 위한 스웨거 API 스펙을 준수할 필요가 있다. API 공개 기술은 외부와 통신을 위해 프론트엔드 앱의 라우트 정보를 통해 외부에서 접속할 수 있게 한다. 이와 같은 구성은 앱 연결 시 순서 준수가 요구되며, 프론트엔드 앱에서 게이트웨이 앱을 연결하고 게이트웨이 앱에 서 백엔드 앱으로 연결한다. 프론트엔드 앱과 백엔드 앱의 관계는 레지스트리 클라이언트를 통해 레지스트리 서 버에 등록될 수 있다. 본 실시예에 따른 마이크로서비스 기반 개발 지원 시스템에 포함되는 비주얼 편집기의 경우, 마이크 로서비스 구성뿐만 아니라 장애 알림 기능, 토폴로지 기능도 시각적으로 표현될 수 있다. 도면에 도시된 것과 같이 마이크로서비스를 조회한 경우 마이크로서비스를 구성한 결과가 토폴로지 형태로 표시 될 수 있다. 앱 접근이 가능한 URL 정보, 네트워크 정보, Rest API 정보 등 상세정보가 조회될 수 있다. 마이크로서비스 기반 개발 지원 시스템, 특히 비주얼 편집기의 경우 구성화면에서 개발자에 의 해 배치된 앱 객체, 서비스 객체, 네트워크 객체, 라우팅 객체들에 의해 개발하고자 하는 마이크로서비스의 토 폴로지가 제작될 수 있다. 객체들 간의 위치 및 연결관계가 수립된 경우, 개발자의 저장 요청에 의해 해당 토폴 로지를 가지는 마이크로서비스에 관한 소스코드가 자동 생성되고, 레파지토리에 저장될 수 있다. 마이크로서비스 기반 개발 지원 시스템의 경우, 마이크로서비스 기반 개발의 장점인 재사용성을 위한 다른 사용자가 공개한 유효한 API를 활용할 수 있는 API 추가 기능도 구성될 수 있다. 따라서 개발자는 다른 개발자 가 공개한 API를 이용할 수 있기 때문에 유사 기능은 신규로 만들지 않고도 활용 가능하다. 마이크로서비스로 구성된 앱의 상태는 마이크로서비스 구성 화면에서 지정된 형상 이미지(도면에서는 원형 이미 지)로 제공될 수 있으며, 특정 앱에 장애가 발생하거나 중지되었을 경우 해당 앱 객체에 대해 지정된 색상(예: 빨간색) 및/또는 표현방식(예: 일정 주기로 깜빡임)으로 표시되게 하여 개발자가 시각적으로 장애를 바로 인식 할 수 있도록 할 수 있다. 장애 발생 시에는 앱 로그를 확인할 수 있는 앱 로깅 기능과 로그뷰어를 통해 실시간 로그를 확인하게 할 수 있 다. 운영 중인 마이크로서비스 기반 앱에 대해 네트워크 차단, 트래픽 증가 등 외부적인 요인에 의한 서비스 중단을 막기 위한 서킷 브레이커(Circuit Breaker) 기능이 적용될 수 있다. 서킷 브레이커 기능을 통해 어떠한 요인으 로 인하여 네트워크가 차단되었을 경우 새로운 네트워크를 자동 할당할 수 있다. 구성 완료된 마이크로서비스 기반 앱의 경우 API 공개 이후 외부에서 접속이 가능하기 때문에 보안 위협을 예방 관리할 수 있는 API 상태 모니터링 기능이 추가 적용될 수 있다. API 상태 모니터링 기능을 통해 API 자체 상태 관리 그래프와 API를 접근한 IP 및 도메인을 확인할 수 있다. 도 7에는 마이크로서비스 개발 지원 장치의 데이터 모델이 도시되어 있다. 데이터 모델에는 마이크로서비스 기본 정보에 관한 micro_app, 마이크로서비스별 프론트엔드, 백엔드, 설정, 레 지스트리 등 애플리케이션 정보에 관한 micro_app_app, 마이크로서비스별 설정 및 레지스트리 등 서비스 인스턴 스 정보에 관한 micro_app_service, 마이크로서비스 API 관리 정보에 관한 micro_api, 마이크로서비스 API 관 리 공개 입력 정보에 관한 micro_api_rule, 마이크로서비스 생성 및 수정 시 추가한 API 및 AUTH(username 및 active) 정보에 관한 micro_app_api, 마이크로서비스 API 관리에서 마이크로서비스 프론트엔드 URL 정보에 관한 micro_api_frontend, 버전에 관한 migration_version 등의 데이터 테이블이 포함될 수 있다. 마이크로서비스 기반 개발 지원 시스템은 편집 서버, 데이터베이스 서버, 모니터링 서버, 트래픽 서버 등의 인스턴스를 포함할 수 있다. 또한, 클라우드 서비스 환경과의 연결을 위한 네트워크를 구성하여 클라우드 플랫폼(예: CF(Cloud Foundry))을 통하여 동작할 수 있다. 편집 서버는 비주얼 편집기를 실행하기 위한 서버이다. 데이터베이스 서버는 확장 가능성 및 표준 준수를 강조하는 객체-관계형 데이터베이스 관리 시스템(예: PostgreSQL)에서 운용되는 데이터베이스 서버이다. 트래픽 서버는 URL을 등록하면 게이트웨이 서비스를 제공하는 서버이다. 모니터링 서버는 메트릭 정보를 수집하여 모니터링 대시보드 UI를 통해 시각화하여 표시해주는 서버(예: grafana)이다. 마이크로서비스 기반 개발 지원 시스템과 연동하는 스프링 클라우드 환경은 다음과 같이 구성될 수 있다. 서비스 디스커버리 --> 스프링 클라우드 유레카 서버(서비스) 서비스 게이트웨이 --> 스프링 클라우드 줄 서버(앱) 서비스 설정 --> 스프링 클라우드 설정 서버(서비스) 이외에도 로드 밸런싱(Load balancing) 서버(예: Ribbon), 보안을 위한 시큐리티 서버(예: Spring Security), 서킷 브레이커 기능 제공을 위한 서버(예: Hystrix) 등이 적용될 수 있다. 마이크로서비스를 사용하기 위해 설정 서버, 레지스트리 서버를 서비스 브로커(Service Broker)로서 기본 제공 할 수 있다. 전술한 마이크로서비스 기반 개발 지원 방법(마이크로서비스 앱 구성 방법)은, 컴퓨터에 의해 실행되는 어플리 케이션이나 프로그램 모듈과 같은 컴퓨터에 의해 실행가능한 명령어를 포함하는 기록매체의 형태로도 구현될 수 있다. 컴퓨터 판독 가능 매체는 컴퓨터에 의해 액세스될 수 있는 임의의 가용 매체일 수 있고, 휘발성 및 비휘 발성 매체, 분리형 및 비분리형 매체를 모두 포함한다. 또한, 컴퓨터 판독 가능 매체는 컴퓨터 저장 매체를 포 함할 수 있다. 컴퓨터 저장 매체는 컴퓨터 판독 가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터와 같은 정보의 저장을 위한 임의의 방법 또는 기술로 구현된 휘발성 및 비휘발성, 분리형 및 비분리형 매체를 모 두 포함한다. 전술한 마이크로서비스 기반 개발 지원 방법(마이크로서비스 앱 구성 방법)은, 단말기에 기본적으로 설치된 어 플리케이션(이는 단말기에 기본적으로 탑재된 플랫폼이나 운영체제 등에 포함된 프로그램을 포함할 수 있음)에 의해 실행될 수 있고, 사용자가 어플리케이션 스토어 서버, 어플리케이션 또는 해당 서비스와 관련된 웹 서버 등의 어플리케이션 제공 서버를 통해 마스터 단말기에 직접 설치한 어플리케이션(즉, 프로그램)에 의해 실행될 수도 있다. 이러한 의미에서, 전술한 마이크로서비스 기반 개발 지원 방법(마이크로서비스 앱 구성 방법)은 단 말기에 기본적으로 설치되거나 사용자에 의해 직접 설치된 어플리케이션(즉, 프로그램)으로 구현되고 단말기 등 의 컴퓨터로 읽을 수 있는 기록매체에 기록될 수 있다. 상기에서는 본 발명의 실시예를 참조하여 설명하였지만, 해당 기술 분야에서 통상의 지식을 가진 자라면 하기의 청구범위에 기재된 본 발명의 사상 및 영역으로부터 벗어나지 않는 범위 내에서 본 발명을 다양하게 수정 및 변 경시킬 수 있음을 이해할 수 있을 것이다."}
{"patent_id": "10-2020-0043299", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 모놀리식 아키텍처와 마이크로서비스 아키텍처의 비교도, 도 2는 본 발명의 일 실시예에 따른 클라우드 상에서의 마이크로서비스 아키텍처의 구성 블록도, 도 3은 서비스 디스커버리를 설명하기 위한 도면, 도 4는 본 발명의 일 실시예에 따른 클라우드 상에서의 마이크로서비스 기반 개발 지원 시스템의 구조를 나타낸 도면, 도 5는 마이크로서비스 앱의 관계도, 도 6은 마이크로서비스 기반 개발 지원 시스템의 구성 블록도, 도 7은 마이크로서비스 기반 개발 지원 시스템의 데이터 모델을 나타낸 도면, 도 8a 내지 도 8e는 비주얼 편집기를 통한 마이크로서비스 구성 예시도, 도 9는 마이크로서비스 생성 절차를 나타낸 순서도, 도 10a 내지 도 10d는 마이크로서비스 저장 절차를 나타낸 도면."}
