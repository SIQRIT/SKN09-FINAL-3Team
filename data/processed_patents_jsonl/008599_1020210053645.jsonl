{"patent_id": "10-2021-0053645", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0146863", "출원번호": "10-2021-0053645", "발명의 명칭": "전자 장치 및 전자 장치의 API 변환 방법", "출원인": "삼성전자주식회사", "발명자": "김현희"}}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,메모리; 및상기 메모리에 작동적으로(operatively) 연결된 프로세서를 포함하고,상기 메모리는, 실행 시, 상기 프로세서가,어플리케이션으로부터 제1 타입의 그래픽 API(graphics application program interface) 기반의 기능 수행 요청을 수신하고,상기 요청에 기반하여, 상기 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의데이터 및 명령어로 변환(translate)하고,상기 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 가상 명령어 버퍼에 저장하고,상기 제1 타입의 그래픽 API 기반의 데이터와 관련된 렌더링 타겟 정보, 뎁스 상태(depth state) 정보, 및 상기제1 타입의 그래픽 API의 속성 중 적어도 하나에 기반하여, 상기 가상 명령어 버퍼에 저장한 제2 타입의 그래픽API 기반의 데이터 및 명령어를 최적화된 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 재구성하고,상기 재구성된 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 명령어 버퍼에저장하도록 하는 인스트럭션들(instructions)을 저장하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서,상기 제1 타입의 그래픽 API는 OpenGL(open graphics library) API 또는 OpenGL ES(OpenGL for embeddedsystems) API를 포함하고, 상기 제2 타입의 그래픽 API는 Vulkan API를 포함하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 1에 있어서,상기 제1 타입의 그래픽 API 기반의 데이터는, 상기 제1 타입의 그래픽 API의 포맷(format), 상태 정보, 및 리소스 중 적어도 하나를 포함하고, 상기 제2 타입의 그래픽 API 기반의 데이터는, 상기 제2 타입의 그래픽 API의포맷, 상태 정보, 및 리소스 중 적어도 하나를 포함하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "에 있어서,상기 인스트럭션들은, 실행 시, 상기 프로세서가,상기 인덱스 버퍼에 저장된 적어도 하나의 버텍스(vertex)의 인덱스 값을 삭제 또는 정렬하여 상기 인덱스 버퍼를 재구성하도록 하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 1에 있어서,상기 인스트럭션들은, 실행 시, 상기 프로세서가,상기 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 명령어에 기반하여 적어도 하나의 오브젝트를 렌더링하도록 하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 6에 있어서,상기 인스트럭션들은, 실행 시, 상기 프로세서가,상기 렌더링 타겟 정보를 기반으로, 그래픽 파이프라인(graphic pipeline)에 포함된 복수 개의 작업들 중에서적어도 일부를 생략하도록 하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 7에 있어서,상기 복수 개의 작업들 중에서 적어도 일부는 프래그먼트 셰이더(fragment shader) 동작을 포함하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 6에 있어서,상기 메모리는 렌더링 결과를 저장하고, 칼라 버퍼(color buffer), 뎁스 버퍼(depth buffer), 및 스텐실 버퍼(stencil buffer)를 포함하는 프레임 버퍼를 포함하고,상기 인스트럭션들은, 실행 시, 상기 프로세서가,상기 뎁스 상태 정보를 기반으로 프레임 버퍼 중 뎁스 버퍼를 비활성화하도록 하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "에 있어서,상기 지정된 API는 openGL API 중 glScissor API를 포함하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "청구항 1에 있어서,상기 인스트럭션들은, 실행 시, 상기 프로세서가,상기 제1 타입의 그래픽 API의 포맷을 상기 제2 타입의 그래픽 API의 포맷으로 변환하고,상기 제1 타입의 그래픽 API의 상태 정보를 기반으로 상기 제2 타입의 그래픽 API의 상태 정보를 설정하고,상기 제1 타입의 상기 제2 타입의 그래픽 API 기반의 리소스를 할당하고,제1 타입의 그래픽 API 기반의 명령어를 상기 제2 타입의 그래픽 API 기반의 명령어로 변환하도록 하는 전자 장치."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "에 있어서,상기 제1 타입의 그래픽 API가 인덱스 버퍼(index buffer)를 이용하는 그래픽 API인 경우, 상기 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 상기 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 변환하기 이전에,상기 인덱스 버퍼를 재구성하는 동작을 더 포함하는 전자 장치의 API 변환 방법."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "청구항 13에 있어서,상기 제1 타입의 그래픽 API는 OpenGL(open graphics library) API 또는 OpenGL ES API를 포함하고, 상기 제2타입의 그래픽 API는 Vulkan API를 포함하는 전자 장치의 API 변환 방법."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "청구항 13에 있어서,상기 제1 타입의 그래픽 API 기반의 데이터는, 상기 제1 타입의 그래픽 API의 포맷(format), 상태 정보, 및 리소스 중 적어도 하나를 포함하고, 상기 제2 타입의 그래픽 API 기반의 데이터는, 상기 제2 타입의 그래픽 API의포맷, 상태 정보, 및 리소스 중 적어도 하나를 포함하는 전자 장치의 API 변환 방법.공개특허 10-2022-0146863-5-청구항 16"}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "청구항 16에 있어서,상기 인덱스 버퍼를 재구성하는 동작은,상기 인덱스 버퍼에 저장된 적어도 하나의 버텍스(vertex)의 인덱스 값을 삭제 또는 정렬하여 상기 인덱스 버퍼를 재구성하는 동작을 포함하는 전자 장치의 API 변환 방법."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "청구항 13에 있어서,상기 재구성하는 동작은,상기 렌더링 타겟 정보를 기반으로, 그래픽 파이프라인(graphic pipeline)에 포함된 복수 개의 작업들 중에서프래그먼트 셰이더(fragment shader) 동작을 생략하는 전자 장치의 API 변환 방법."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "청구항 13에 있어서,상기 재구성하는 동작은,상기 뎁스 상태 정보를 기반으로, 칼라 버퍼(color buffer), 뎁스 버퍼(depth buffer), 및 스텐실 버퍼(stencil buffer)를 포함하는 프레임 버퍼 중 뎁스 버퍼를 비활성화하는 동작을 포함하는 전자 장치의 API 변환방법."}
{"patent_id": "10-2021-0053645", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "청구항 13에 있어서,상기 재구성하는 동작은,상기 제1 타입의 그래픽 API가 화면 영역의 설정과 관련된 지정된 API인 경우, 상기 지정된 API와 관련된 정보를 기반으로 상기 제2 타입의 그래픽 API 기반의 명령어에 기반하여 렌더링할 영역을 설정하고 불필요한 렌더링결과값을 제거하는 동작을 포함하는 전자 장치의 API 변환 방법."}
{"patent_id": "10-2021-0053645", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예에 따른 전자 장치는, 메모리, 및 상기 메모리에 작동적으로(operatively) 연결된 프로세서를 포함하고, 상기 메모리는, 실행 시, 상기 프로세서가, 어플리케이션으로부터 제1 타입의 그래픽 API(graphics application program interface) 기반의 기능 수행 요청을 수신하고, 상기 요청에 기반하여, 상기 제1 타입의 (뒷면에 계속)"}
{"patent_id": "10-2021-0053645", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 문서에서 개시되는 실시 예들은, API(application program interface)를 변환하는 기술과 관련된다."}
{"patent_id": "10-2021-0053645", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "API(application program interface)는 응용 프로그램이 운영체제나 데이터베이스 관리 시스템과 같은 시스템 프로그램과 통신할 때 사용되는 언어나 메시지 형식을 가지며, API는 프로그램 내에서 실행을 위해 특정 서브루 틴에 연결을 제공하는 함수를 호출하는 것으로 구현될 수 있다. 전자 장치에 포함된 어플리케이션은 렌더링 기능을 수행함에 있어서, 지정된 타입의 API를 이용할 수 있다. 어 플리케이션에 지정된 타입의 API가 아닌 상이한 타입의 API를 이용하려는 경우, API를 변환하는 기술이 필요하 다."}
{"patent_id": "10-2021-0053645", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시의 다양한 실시예들은, 제1 타입의 그래픽 API를 제2 타입의 그래픽 API로 변환 시, 렌더링 상황에 따라 최적화된 변환을 제공하고, 그래픽 드라이버(graphic driver)의 오버헤드(overheard)를 감소시킬 수 있는 전자 장치 및 전자 장치의 API 변환 방법을 제공하고자 한다."}
{"patent_id": "10-2021-0053645", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 문서에 개시되는 일 실시예에 따른 전자 장치는, 메모리, 및 상기 메모리에 작동적으로(operatively) 연결된 프로세서를 포함하고, 상기 메모리는, 실행 시, 상기 프로세서가, 어플리케이션으로부터 제1 타입의 그래픽 API(graphics application program interface) 기반의 기능 수행 요청을 수신하고, 상기 요청에 기반하여, 상 기 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 변환 (translate)하고, 상기 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 가상 명령어 버퍼에 저장하고, 상기 제1 타입의 그래픽 API 기반의 데이터와 관련된 렌더링 타겟 정보, 뎁스 상태(depth state) 정보, 및 상기 제1 타입의 그래픽 API의 속성 중 적어도 하나에 기반하여, 상기 가상 명령어 버퍼에 저장한 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 최적화된 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 재구성하고, 상기 재구 성된 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장하도 록 하는 인스트럭션들(instructions)을 저장할 수 있다. 또한, 본 문서에 개시되는 일 실시예에 따른 전자 장치의 API(application program interface) 변환 방법은, 어플리케이션으로부터 제1 타입의 그래픽 API 기반의 기능 수행 요청을 수신하는 동작, 상기 요청에 기반하여, 상기 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 변 환(translate)하는 동작, 상기 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 가상 명령어 버퍼에 저장하는 동작, 상기 제1 타입의 그래픽 API 기반의 데이터와 관련된 렌더링 타겟 정보, 뎁스 상태(depth state) 정보, 및 상기 제1 타입의 그래픽 API의 속성 중 적어도 하나에 기반하여, 상기 가상 명령어 버퍼에 저장한 제2 타입 의 그래픽 API 기반의 데이터 및 명령어를 최적화된 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 재구성 하는 동작, 상기 재구성된 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 명 령어 버퍼에 저장하는 동작, 및 상기 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 데이터 및 명령어에 기반하여 적어도 하나의 오브젝트를 렌더링하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0053645", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 문서에 개시되는 실시 예들에 따르면, 제1 타입의 그래픽 API(graphics API)를 제2 타입의 그래픽 API로 변 환 시, 렌더링 상황에 따라 최적화된 변환을 제공하고, 그래픽 드라이버(graphic driver)의 오버헤드 (overheard)를 감소시킬 수 있다. 본 문서에 개시되는 실시 예들에 따르면, 제1 타입의 그래픽 API를 제2 타입의 그래픽 API로 변환 시, 캐시 (cache), 메모리 대역폭, 렌더 패스(render pass)를 최적화할 수 있다. API 변환 시, 메모리, 버퍼, 및 API 명령어(기능)의 최적화를 수행하여 전자 장치의 성능을 향상시키고 메모리 사용량을 감소시킬 수 있다. 본 문서에 개시되는 실시 예들에 따르면, GPU에 전달되어 수행되기 이전에 변환된 API를 분석하여 최적화된 API 를 재구성할 수 있다. 이 외에, 본 문서를 통해 직접적 또는 간접적으로 파악되는 다양한 효과들이 제공될 수 있다."}
{"patent_id": "10-2021-0053645", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모 듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가 입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈) 은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일 실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세 서는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또 는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로 세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능 에 특화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일 실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일 실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일 실시 예에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일 실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일 실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일 실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터,SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일 실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일 실시예에 따르면, 카메라 모듈은 하나 이 상의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일 실시예에 따르면, 전력 관리 모 듈은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일 실시예에 따르면, 배터 리는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일 실시예에 따르면, 통 신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일 실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일 실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일 실시예에 따르면, 안테나 모듈은 복수의 안테나 들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통 신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통 신 모듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품(예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일 실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일 실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일 실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일 실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2은 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 일 실시예에 따르면, 프로그램 은 전자 장치의 하나 이상의 리소스들을 제어하기 위한 운영 체제, 미들웨어, 또는 상기 운영 체제에서 실행 가능한 어플리케이션을 포함할 수 있다. 운영 체제는, 예를 들면, AndroidTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 프로그램 중 적어도 일부 프로그 램은, 예를 들면, 제조 시에 전자 장치에 프리로드되거나, 또는 사용자에 의해 사용 시 외부 전자 장치(예: 전자 장치(102 또는 104), 또는 서버)로부터 다운로드되거나 갱신 될 수 있다. 운영 체제는 전자 장치의 하나 이상의 시스템 리소스들(예: 프로세스, 메모리, 또는 전원)의 관리(예: 할당 또는 회수)를 제어할 수 있다. 운영 체제는, 추가적으로 또는 대체적으로, 전자 장치 의 다른 하드웨어 디바이스, 예를 들면, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 구동하기 위한 하나 이상의 드라이 버 프로그램들을 포함할 수 있다. 미들웨어는 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보가 어플리케이션 에 의해 사용될 수 있도록 다양한 기능들을 어플리케이션으로 제공할 수 있다. 미들웨어는, 예를 들 면, 어플리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매니 저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니저, 로케이션 매니저, 그래픽 매니저, 시큐리티 매니저, 통화 매니저, 또는 음성 인식 매니저 를 포함할 수 있다. 어플리케이션 매니저는, 예를 들면, 어플리케이션의 생명 주기를 관리할 수 있다. 윈도우 매니저 는, 예를 들면, 화면에서 사용되는 하나 이상의 GUI 자원들을 관리할 수 있다. 멀티미디어 매니저는, 예를 들면, 미디어 파일들의 재생에 필요한 하나 이상의 포맷들을 파악하고, 그 중 선택된 해당하는 포맷에 맞 는 코덱을 이용하여 상기 미디어 파일들 중 해당하는 미디어 파일의 인코딩 또는 디코딩을 수행할 수 있다. 리 소스 매니저는, 예를 들면, 어플리케이션의 소스 코드 또는 메모리의 메모리의 공간을 관리할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량, 온도 또는 전원을 관리하고, 이 중 해당 정보를이용하여 전자 장치의 동작에 필요한 관련 정보를 결정 또는 제공할 수 있다. 일 실시예에 따르면, 파워 매니저는 전자 장치의 바이오스(BIOS: basic input/output system)(미도시)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 어플리케이션에 의해 사용될 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 패키지 매니저는, 예를 들면, 패키지 파일의 형태로 배포되는 어플리케이션의 설치 또는 갱신을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 전자 장치와 외부 전자 장치 간의 무선 연 결 또는 직접 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 지정된 이벤트(예: 착신 통화, 메시지, 또는 알람)의 발생을 사용자에게 알리기 위한 기능을 제공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치의 위치 정보를 관리할 수 있다. 그래픽 매니저는, 예를 들면, 사용자에게 제공될 하 나 이상의 그래픽 효과들 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 시큐리티 매니저는, 예를 들면, 시스템 보안 또는 사용자 인증을 제공할 수 있다. 통화(telephony) 매니저 는, 예를 들면, 전자 장치에 의해 제공되는 음성 통화 기능 또는 영상 통화 기능을 관리할 수 있다. 음성 인식 매니저는, 예를 들면, 사용자의 음성 데이터를 서버로 전송하고, 그 음성 데이터에 적어도 일부 기반하여 전자 장치에서 수행될 기능에 대응하는 명령어(command), 또는 그 음성 데이터에 적어도 일 부 기반하여 변환된 문자 데이터를 서버로부터 수신할 수 있다. 일 실시예에 따르면, 미들웨어는 동 적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. 일 실시예에 따르면, 미들웨 어의 적어도 일부는 운영 체제의 일부로 포함되거나, 또는 운영 체제와는 다른 별도의 소프트웨 어로 구현될 수 있다. 어플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브라우 저, 카메라, 알람, 컨택트, 음성 인식, 이메일, 달력, 미디어 플레이어 , 앨범, 와치, 헬스(예: 운동량 또는 혈당과 같은 생체 정보를 측정), 또는 환경 정보 (예: 기압, 습도, 또는 온도 정보 측정) 어플리케이션을 포함할 수 있다. 일 실시예에 따르면, 어플리케이 션은 전자 장치와 외부 전자 장치 사이의 정보 교환을 지원할 수 있는 정보 교환 어플리케이션(미도 시)을 더 포함할 수 있다. 정보 교환 어플리케이션은, 예를 들면, 외부 전자 장치로 지정된 정보 (예: 통화, 메 시지, 또는 알람)를 전달하도록 설정된 노티피케이션 릴레이 어플리케이션, 또는 외부 전자 장치를 관리하도록 설정된 장치 관리 어플리케이션을 포함할 수 있다. 노티피케이션 릴레이 어플리케이션은, 예를 들면, 전자 장치 의 다른 어플리케이션(예: 이메일 어플리케이션)에서 발생된 지정된 이벤트(예: 메일 수신)에 대응하 는 알림 정보를 외부 전자 장치로 전달할 수 있다. 추가적으로 또는 대체적으로, 노티피케이션 릴레이 어플리케 이션은 외부 전자 장치로부터 알림 정보를 수신하여 전자 장치의 사용자에게 제공할 수 있다. 장치 관리 어플리케이션은, 예를 들면, 전자 장치와 통신하는 외부 전자 장치 또는 그 일부 구성 요소(예: 외부 전자장치의 디스플레이 모듈 또는 카메라 모듈)의 전원(예: 턴-온 또는 턴-오프) 또는 기능(예: 밝기, 해 상도, 또는 포커스)을 제어할 수 있다. 장치 관리 어플리케이션은, 추가적으로 또는 대체적으로, 외부 전자 장 치에서 동작하는 어플리케이션의 설치, 삭제, 또는 갱신을 지원할 수 있다. 도 3은 일 실시예에 따른 전자 장치의 블록도이다. 일 실시예에 따르면, 전자 장치는 메모리 (예: 도 1의 메모리) 및 프로세서(예: 도 1의 프 로세서)를 포함할 수 있다. 일 실시예에 따르면, 메모리 는 프로세서에 의해 실행 시 전자 장치의 동작을 제어하는 인스트 럭션들을 저장할 수 있다. 예를 들어, 메모리는, 실행 시, 프로세서에 의해 제1 타입의 그래픽 API(application program interface)를 최적화하여 제2 타입의 그래픽 API로 변환하기 위한 동작들을 수행하도 록 하는 인스트럭션들을 저장할 수 있다. 일 실시예에 따르면, 제1 타입의 그래픽 API는 Open GL API 또는 Open GLES API를 포함할 수 있고, 제2 타입의 그래픽 API는 Vulkan API를 포함할 수 있다. 일 실시예에 따르면, 메모리는, 다양한 타입의 API 기반의 데이터(예: API 기반의 포맷(format), 상태 정보(states), 리소스(resource), 및/또는 명령어(command))를 적어도 일시적으로 저장할 수 있다. 예를 들어, 메모리는 API 명령어를 저장하기 위한 명령어 버퍼 또는 API 명령어를 최적화하기 위하여 일시적으로 API 명령어들을 저 장하는 가상 명령어 버퍼를 포함할 수 있다. 일 실시예에 따르면, 메모리는 적어도 하나의 오브젝트를 렌 더링하기 위한 버텍스(vertex)를 저장하는 버텍스 버퍼 및/또는 버텍스에 대한 인덱스(index) 값을 저장하기 위 한 인덱스 버퍼를 포함할 수 있다. 일 실시예에 따르면, 메모리는 렌더링 값들을 저장하는 프레임 버퍼를포함할 수 있다. 일 실시예에 따르면, 프레임 버퍼는 색상 값을 저장하는 칼라 버퍼(color buffer), 뎁스 값을 저장하는 뎁스 버퍼(depth buffer), 및 스텐실 버퍼(stencil buffer)를 포함할 수 있다. 일 실시예에 따르면, 메모리는 적어도 하나의 어플리케이션을 저장할 수 있다. 일 실시예에 따르면, 적어도 하나의 어플리케이 션 각각은 지정된 타입의 API를 이용하여 기능을 수행할 수 있다. 일 실시예에 따르면, 프로세서는 어플리케이션(예: 도 1의 어플리케이션)으로부터 제1 타입의 그래픽 API 기반의 기능 수행 요청을 수신할 수 있다. 일 실시예에 따르면, 제1 타입의 그래픽 API 기반의 기능은 화 면(또는, 적어도 하나의 오브젝트)를 렌더링하기 위한 기능을 포함할 수 있다. 일 실시예에 따르면, 프로세서는 인덱스 버퍼 최적화 동작을 수행할 수 있다. 예를 들어, 프로세서 는, 제1 타입의 그래픽 API가 인덱스 버퍼(index buffer)를 이용하는 경우, 제1 타입의 그래픽 API 기반의 데이 터를 제2 타입의 그래픽 API 기반의 데이터로 변환하기 전에 인덱스 버퍼를 재구성하여 인덱스 버퍼를 최적화할 수 있다. 예를 들어, 전자 장치는 인덱스 버퍼에 저장된 적어도 하나의 버텍스(vertex)의 인덱스 값을 삭 제 또는 정렬하여 상기 인덱스 버퍼를 재구성할 수 있다. 인덱스 버퍼 최적화 동작은 이하의 도 4 및 도 6에서 보다 상세히 후술한다. 일 실시예에 따르면, 프로세서는 요청에 기반하여, 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 변환할 수 있다. 일 실시예에 따르면, 제1 타입의 그래픽 API 기 반의 데이터는 제1 타입의 그래픽 API의 포맷(format), 상태(state) 정보, 및 리소스 중 적어도 하나를 포함하 고, 제2 타입의 그래픽 API 기반의 데이터는 제2 타입의 그래픽 API의 포맷, 상태 정보, 및 리소스 중 적어도 하나를 포함할 수 있다. 예를 들어, 프로세서는 제1 타입 그래픽 API의 포맷을 제2 타입 그래픽 API 포맷 으로 변환할 수 있다. 예를 들어, 프로세서는 제1 타입 그래픽 API의 상태(state) 정보를 기반으로 제2 타입 그래픽 API의 상태 정보를 설정할 수 있다. 예를 들어, 프로세서는 제2 타입 그래픽 API에 리소스를 할당할 수 있다. 예를 들어, 프로세서는 제1 타입 그래픽 API의 명령어를 제2 타입 그래픽 API의 명령어 로 변환할 수 있다. 일 실시예에 따르면, 프로세서는 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어를 가상 명령어 버 퍼에 저장할 수 있다. 예를 들어, 변환한 제2 타입의 그래픽 API 명령어를 바로 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장하는 경우, 제2 타입 그래픽 API 기반의 드라이버를 통하여 전달된 제2 타입의 그래픽 API를 GPU(미도시)(예: 도 1의 보조 프로세서)가 바로 실행할 수 있다. 이 경우, 불필요한 제2 타입 기반 의 명령어 역시 처리하게 됨으로써, 불필요한 연산 및 메모리 사용이 발생할 수 있다. 일 실시예에 따른 전자 장치는 변환한 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어를 가상 명령어 버퍼에 저장하고, 가상 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어가 GPU에 의해 바로 실행되기 전에 최적화 동작을 수행할 수 있다. 일 실시예에 따르면, GPU는 프로세서와 별도로 구성되거나, 또는 일체로(즉, 하나의 프로세서로) 구성될 수도 있다. 일 실시예에 따르면, 프로세서는 제1 타입의 그래픽 API 기반의 데이터와 관련된 렌더링 타겟 정보, 뎁스 상태 정보, 및 제1 타입의 그래픽 API의 속성 중 적어도 하나에 기반하여, 가상 명령어 버퍼에 저장한 제2 타입 의 그래픽 API 기반의 데이터 및 명령어를 최적화된 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 재구성 할 수 있다. 예를 들어, 프로세서는 가상 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 명령어들 중에서 실제 렌더링에 필요한 적어도 일부를 선별하여 최적화된 제2 타입의 그래픽 API로 재구성할 수 있다. 일 실시예에 따르면, 렌더링 타겟 정보는 렌더링 결과가 저장될 타겟이 향후 사용될지 여부를 나타내는 정보를 포함할 수 있다. 예를 들어, 프로세서는 렌더링 타겟이 향후 사용될지 여부를 판단하고, 렌더링 타겟이 향후 사용되지 않는 경우 그래픽 파이프라인(graphic pipeline) 중에서 일부 동작(예: 프래그먼트 셰이더 (fragment shader) 동작)을 생략(discard)할 수 있다. 일 실시예에 따르면, 그래픽 파이프라인은 3D 좌표를 모니터에 출력 가능한 2D 형태로 변경하는 작업일 수 있다. 예를 들어, 그래픽 파이프라인은 특정 물체 (Mesh)의 포인트 및 색감(Texture)등을 입력으로 받아서 픽 셀(Pixel) 단위로 표시하는 일련의 작업일 수 있다. 일 실시예에 따르면, 그래픽 파이프라인은 버텍스 버퍼 및 /또는 인덱스 버퍼에 저장된 데이터를 기반으로 입력 어셈블러(input assembler), 버텍스 셰이더(vertex shader), 테셀레이션(tessellation), 기하 셰이더(geometry shader), 래스터화(rasterization), 프레그먼트 셰 이더(fragment shader), 및 칼라 블렌딩(color blending) 동작들을 통하여 최종적으로 프레임 버퍼에 렌더링을 위한 데이터를 저장하는 작업일 수 있다. 일 실시예에 따르면, 입력 어셈블러(input assembler) 동작은 사용자 의 입력(예: 버텍스(vertex) 데이터)을 정리(Collect)하는 동작으로, 예를 들어, 렌더링을 위한 메시(mesh)를구성하는 트라이앵글을 그리기 위한 버텍스 또는 인덱스 데이터를 수집하는 동작을 포함할 수 있다. 일 실시예 에 따르면, 버텍스 셰이더(vertex shader) 동작은, 버텍스 데이터를 2D 화면으로 변경하는 동작을 포함할 수 있 다. 예를 들어, 입력으로 들어오는 버텍스 데이터는 보통 3차원(X, Y, Z)로 구성되나, 사용자가 눈으로 보는 화면은 2D로 구성된다. 예를 들어, 버텍스 셰이더(vertex shader) 동작은, 3D 버텍스 데이터를 2D로 데이터로 수정하는 동작을 포함할 수 있다. 일 실시예에 따르면, 테셀레이션(tessellation) 동작은, 메시(오브젝트)의 화질을 높이기 위해서 특정 룰(Rule)에 따라 더 작은 트라이앵글로 나누는 동작을 포함할 수 있다. 예를 들어, 테셀레이션(tessellation) 동작은 큰 트라이앵글을 복수 개의 더 작은 단위의 트라이앵글로 나누는 동작을 포함 할 수 있다. 일 실시예에 따르면, 기하 셰이더(geometry shader) 동작은, 모든 Primitive (삼각형, 선, 점)을 지우거나 추가하는 동작을 포함할 수 있다. 일 실시예에 따르면, 래스터화(rasterization) 동작은, 2D 화면 공 간(screen space)로 변경된 포지션을 사용하여 메시(오브젝트)를 프래그먼트로 구분하는 동작을 포함할 수 있다. 일 실시예에 따르면, 래스터화 동작은 화면에 표시되지 않는 부분이나, 다른 메시(오브젝트)에 의해 보 이지 않는 프래그먼트를 제거하는 동작을 포함할 수 있다. 일 실시예에 따르면, 프레그먼트 셰이더(fragment shader) 동작은, 프래그먼트의 색상 및 뎁스 값을 연산하는 동작을 포함할 수 있다. 예를 들어, 프래그먼트 셰 이더 동작은 렌더링할 각 픽셀의 값을 연산하고, 그 결과를 메모리에 저장하는 동작을 포함할 수 있다. 일 실시예에 따르면, 칼라 블렌딩(color blending) 동작은 프래그먼트의 색상들을 비교하여 최종 색을 결정하는 동작을 포함할 수 있다. 예를 들어, 칼라 블렌딩 동작은, 한 픽셀 포인트에 대해 복수 개의 프레그먼트 정보가 존재하면, 복수 개의 정보를 기준으로 픽셀의 색상을 결정하는 동작을 포함할 수 있다. 일 실시예에 따르면, 렌더링 타겟이 향후 사용되지 않는 경우 프래그먼트 셰이더 동작을 수행하여 픽셀 값을 연 산하여 저장하는 동작은 불필요할 수 있다. 일 실시예에 따르면, 프로세서는 불필요한 프래그먼트 셰이더 동작을 생략함으로써, 렌더링 성능을 최적화할 수 있다. 일 실시예에 따르면, 프로세서는 제1 타입의 그래픽 API 기반의 데이터와 관련된 뎁스 상태 정보(depth state)를 기반으로 렌더링 시 뎁스 값이 필요한지 여부를 판단할 수 있다. 예를 들어, 프로세서는 렌더링 시 뎁스 값이 불필요한 경우 뎁스 버퍼를 비활성화할 수 있다. 예를 들어, 프로세서는 렌더링에 불필요한 버퍼(예: 뎁스 버퍼)를 비활성화함으로써, 렌더 패스(render pass)가 시작되고 끝나는 지점에서 불필요한 메모 리 로드(load) 및/또는 저장(store) 동작이 발생하는 것을 방지할 수 있다. 일 실시예에 따르면, 프로세서는 1 타입의 API가 화면 영역의 설정과 관련된 지정된 API(예: glScissor API)인 경우, 지정된 API와 관련된 정보를 기반으로 제2 타입의 그래픽 API 기반의 명령어에 기반하여 렌더링할 영역을 설정하고 불필요한 렌더링 결과값을 저장하지 않을 수 있다. 일 실시예에 따르면, 프로세서는 상기 언급한 동작들 중 적어도 하나를 수행하여 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어를 최적화할 수 있다. 예를 들어, 전자 장치는 최적화 동작을 통하여 유효 한 제2 타입의 그래픽 API 기반의 명령어(즉, 최적화된 제2 타입의 그래픽 API 기반의 명령어)를 구성할 수 있 다. 일 실시예에 따르면, 프로세서는 유효한 제2 타입의 그래픽 API 기반의 명령어를 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장할 수 있다. 예를 들어, 프로세서는 최적화된 제2 타입의 API 기반의 명령어를 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장할 수 있다. 일 실시예에 따르면, 프로세서는 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 명령어에 기반하여 적어도 하나의 오브젝트를 렌더링할 수 있다. 예를 들어, 프로세서는 제2 타입의 그래픽 API 명령어 버퍼 에 저장된 제2 타입 그래픽 API 기반의 명령어가 GPU에 써미션(submission)되는 경우, GPU를 통하여 제2 타입 그래픽 API 기반의 명령어를 기반으로 렌더링 기능(동작)을 수행할 수 있다. 도 4는 일 실시예에 따른 전자 장치의 구성을 개략적으로 도시한 도면이다. 일 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치 또는 도 3의 전자 장치)는 제1 타입 그래 픽 API 어플리케이션(예: 도 1 또는 도 2의 어플리케이션), 최적화 프레임워크, 제2 타입 그래 픽 API 드라이버(driver), 및 GPU(graphic processing unit)를 포함할 수 있다. 일 실시예에 따르면, 제1 타입 그래픽 API 어플리케이션은 렌더링 기능을 수행하기 위하여 제1 타입의 그 래픽 API를 이용하는 어플리케이션일 수 있다. 일 실시예에 따르면, 제1 타입의 그래픽 API는 OpenGL API(이하, ‘GL API’ 용어를 혼용한다) 및/또는 Open GL ES API(이하, ‘GLES API’ 용어를 혼용한다.)를 포함할 수 있다. 예를 들어, 제1 타입 그래픽 API 어플리케이션은 GLES API를 이용하여 기능을 수행할 수 있다. 예를 들어, 제1 타입 그래픽 API 어플리케이션은 제1 타입의 그래픽 API를 호출할 수 있다. 일 실시예에 따르면, 최적화 프레임워크는 제1 타입의 그래픽 API를 제2 타입의 그래픽 API로 변환하면서, 최적화를 수행할 수 있다. 일 실시예에 따르면, 제2 타입의 그래픽 API는 Vulkan API를 포함할 수 있다. 일 실시예에 따르면, 최적화 프레임워크는 인덱스 버퍼 최적화 모듈, API 변환(translation) 모듈, 및 명령어 최적화 모듈을 포함할 수 있다. 예를 들어, 최적화 프레임워크는 제1 타입 그래픽 API 어플 리케이션으로부터 제1 타입의 그래픽 API 기반의 기능 수행 요청이 있는 경우, 제1 타입의 그래픽 API를 제2 타입의 그래픽 API로 변환할 수 있다. 일 실시예에 따르면, 인덱스 버퍼 최적화 모듈은 제1 타입의 그래픽 API 기반의 어플리케이션이 인덱 스 버퍼(또는, 버텍스 버퍼)를 사용하는 경우, 인덱스 버퍼를 재구성하여 인덱스 버퍼를 최적화할 수 있다. 예 를 들어, 인덱스 버퍼 최적화 모듈은 인덱스 버퍼에 저장된 적어도 하나의 버텍스(vertex)의 인덱스 값을 삭제 또는 정렬하여 상기 인덱스 버퍼를 재구성할 수 있다. 일 실시예에 따르면, API 변환 모듈은 제1 타입의 그래픽 API를 제2 타입의 그래픽 API로 변환할 수 있다. 예를 들어, API 변환 모듈은 제1 타입의 그래픽 API 기반의 데이터(예: 제1 타입 그래픽 API의 상태 (state), 포맷(format), 및/또는 리소스(resource)) 및/또는 명령어(command)를 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어로 변환할 수 있다. 일 실시예에 따르면, 변환한 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어를 가상 명령어 버퍼에 저장할 수 있다. 일 실시예에 따르면, 명령어 최적화 모듈은, 변환한 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어 를 분석하여 최적화된 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어로 재구성할 수 있다. 예를 들어, 명령어 최적화 모듈은 가상 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어를 분석할 수 있다. 예를 들어, 명령어 최적화 모듈은 제1 타입의 그래픽 API 기반의 데이터와 관련된 렌더 링 타겟 정보를 기반으로 그래픽 파이프라인(graphic pipeline)의 적어도 일부 작업을 생략(discard)할 수 있다. 예를 들어, 명령어 최적화 모듈은 렌더링 결과가 저장될 타겟이 향후에 사용될지 여부를 판단하고, 불필요한 그래픽 파이프라인의 작업(예: 프래그먼트 셰이더(fragment shader) 작업)을 생략할 수 있다. 예를 들어, 명령어 최적화 모듈은 불필요한 제2 API 기반의 명령어를 제2 타입 그래픽 API 명령어 버퍼에 저장 하지 않고, 유효한 제2 API 기반의 명령어만을 재구성하여 제2 타입 그래픽 API 명령어 버퍼에 저장할 수 있다. 일 실시예에 따르면, 명령어 최적화 모듈은 제1 타입의 그래픽 API 기반의 데이터와 관련된 뎁스 상태 정 보(depth state)를 기반으로 프레임 버퍼 중 뎁스 버퍼를 비활성화할 수 있다. 예를 들어, 렌더링 시 뎁스 값 이 불필요한 경우, 명령어 최적화 모듈은 프레임 버퍼의 뎁스 버퍼를 비활성화하여 메모리 대역폭을 최적 화할 수 있다. 일 실시예에 따르면, 명령어 최적화 모듈은 상기 제1 타입의 그래픽 API가 화면 영역의 설정과 관련된 지 정된 API인 경우, 상기 지정된 API와 관련된 정보를 기반으로 상기 제2 타입의 그래픽 API 기반의 명령어에 기 반하여 렌더링할 영역을 설정하고 불필요한 렌더링 결과값을 제거할 수 있다. 일 실시예에 따르면, 지정된 API 는 시저 API(scissor API)(예: glScissor API)를 포함할 수 있다. 예를 들어, 명령어 최적화 모듈은 전 체 화면의 렌더링 결과를 메모리에 저장할 필요가 없는 경우, 렌더 패스(render pass)를 생성 시, 렌더링 영역 을 설정하여 불필요한 값을 메모리에 저장하지 않도록 할 수 있다. 일 실시예에 따르면, 명령어 최적화 모듈은 API 변환 모듈에서 변환한 데이터를 제2 타입 그래픽 API 의 명령어 버퍼에 저장하기 이전에, 가상 명령어 버퍼를 이용하여 상기 언급한 최적화 동작들을 수행하여 불필 요한 데이터 및/또는 명령어를 삭제하고 유효한 제2 타입의 그래픽 API 데이터 및/ 명령어를 재구성하여 제2 타 입 그래픽 API의 명령어 버퍼에 저장할 수 있다. 예를 들어, 명령어 최적화 모듈은 가상 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 명령어들 중에서 이후의 렌더링에 유효한 명령어들을 선별하여 최적화된 제2 타입의 그래픽 API 기반의 명령어를 구성할 수 있다. 예를 들어, 명령어 최적화 모듈는 최적화된 제2 타입의 그래픽 API 기반의 명령어에 적합하도록 제2 타입의 그래픽 API 기반의 데이터(예: 포맷, 상태 정보, 및 /또는 리소스)를 재구성할 수 있다. 일 실시예에 따르면, 제2 타입 그래픽 API 드라이버(예: Vulkan 드라이버)는 변환 및 최적화된 제2 타입의 그래픽 API를 수신하여 GPU에 전달할 수 있다. 예를 들어, 제2 타입 그래픽 API 드라이버는 최적화 프레임워크와 GPU 사이의 데이터를 전달할 수 있다. 예를 들어, 제2 타입 그래픽 API 드라이버는 최적화 프레임워크의 동작을 통하여 제2 타입의 명령어 버퍼에 저장된, 최적화된 제2 타입의 그래픽 API의 명령어를 GPU에 전달할 수 있다. 일 실시예에 따르면, GPU는 제2 타입의 그래픽 API에 기반하여 렌더링 동작을 수행할 수 있다. 일 실시예 에 따르면, GPU는 전자 장치의 메인 프로세서(예: 도1 의 메인 프로세서) 또는 보조 프로세서 (예: 도 1의 보조 프로세서)일 수 있고, 메인 프로세서 및 보조 프로세서가 통합된 하나의 프로세서(예: 도 1의 프로세서)로 구현될 수도 있다. 다양한 실시예에 따르면, 최적화 프레임워크, 제2 타입 그래픽 API 드라이버, 및/또는 GPU의 동 작들 중 적어도 일부는 전자 장치의 프로세서(예: 도 1의 프로세서)에 의해 수행될 수 있다. 도 5는 일 실시예에 따른 전자 장치의 API 변환 동작들을 설명하기 위한 도면이다. 일 실시예에 따르면, 510 동작에서, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 4 의 전자 장치)는 제1 타입의 그래픽 API의 디스패치(dispatch) 동작을 수행할 수 있다. 예를 들어, 전자 장치는 제1 타입의 그래픽 API를 호출할 수 있다. 일 실시예에 따르면, 521 동작에서, 전자 장치는 변환기(translator)를 통하여 제1 타입 그래픽 API 포맷 을 제2 타입 그래픽 API 포맷으로 변환할 수 있다. 일 실시예에 따르면, 제1 타입 그래픽 API는 Open GLES API 를 포함하고, 제2 타입 그래픽 API는 Vulkan API를 포함할 수 있다, 일 실시예에 따르면, 523 동작에서, 전자 장치는 변환기를 통하여 제1 타입 그래픽 API의 상태(state) 정 보를 제2 타입 그래픽 API의 상태 정보로 변환할 수 있다. 예를 들어, 전자 장치는 제1 타입 그래픽 API의 상 태 정보를 기반으로 제2 타입 그래픽 API의 상태 정보를 설정할 수 있다. 일 실시예에 따르면, 525 동작에서, 전자 장치는 변환기를 통하여 제2 타입 그래픽 API의 리소스를 할당할 수 있다. 예를 들어, 전자 장치는 제1 타입 그래픽 API에 대응하는 기능을 수행하기 위하여 필요한 제2 타입 그래픽 API의 리소스를 할당할 수 있다. 일 실시예에 따르면, 527 동작에서, 전자 장치는 변환기를 통하여 제1 타입 그래픽 API 기능을 제2 타입 그래픽 API 기능으로 변환할 수 있다. 예를 들어, 전자 장치는 제1 타입 그래픽 API 명령어를 제2 타입 그래픽 API 명령어로 변환할 수 있다. 일 실시예에 따르면, 531 동작에서, 전자 장치는 가상 명령어 버퍼에 521 내지 527 동작을 통하여 획득한 제2 타입 그래픽 API와 관련된 데이터 및/또는 명령어를 적어도 일시적으로 저장할 수 있다. 일 실시예에 따르 면, 전자 장치는 가상 명령어 버퍼에 저장된 제2 타입 그래픽 API 기반의 데이터 및/또는 명령어와 관련된 정보(예: 제2 타입 그래픽 API의 상태(state) 정보 및/또는 리소스 정보)를 수집할 수 있다. 일 실시예에 따르면, 533 동작에서, 전자 장치는 가상 명령어 버퍼에 저장된 제2 타입 그래픽 API와 관련 된 데이터 및/또는 명령어를 분석 및 최적화할 수 있다. 예를 들어, 전자 장치는 제1 타입의 그래픽 API와 관 련된 렌더링 타겟 정보를 기반으로 렌더링 결과가 저장될 타겟이 향후에 사용될지 여부를 판단하고, 타겟이 향 후 사용되지 않는다고 판단하는 경우 그래픽 파이프라인(graphic pipeline)의 적어도 일부 작업(예: 프래그먼트 셰어디(fragment shader) 작업)을 생략(discard)할 수 있다. 예를 들어, 전자 장치는 제1 타입의 그래픽 API 의 데이터와 관련된 뎁스 상태 정보(depth state)를 기반으로 렌더링 시 뎁스 값이 필요한지 여부를 판단할 수 있다. 예를 들어, 전자 장치는 렌더링 시 뎁스 값이 불필요한 경우 프레임 버퍼 중 뎁스 버퍼를 비활성화할 수 있다. 예를 들어, 전자 장치는 1 타입의 API가 화면 영역의 설정과 관련된 지정된 API(예: glScissor API)인 경우, 상기 지정된 API와 관련된 정보를 기반으로 제2 타입의 그래픽 API 기반의 명령어에 기반하여 렌더링할 영역을 설정하고 불필요한 렌더링 결과값을 제거할 수 있다. 일 실시예에 따르면, 535 동작에서, 전자 장치는 533 동작을 통하여 제2 타입 그래픽 API의 기능을 재구성할 수 있다. 예를 들어, 전자 장치는 유효한 제2 타입 그래픽 API 명령어를 선별하여 최적화된 제2 타입의 그래픽 API 기반의 명령어를 구성할 수 있다. 예를 들어, 전자 장치는 최적화된 제2 타입의 그래픽 API 기반의 명령어 에 적합하도록 제2 타입의 그래픽 API 기반의 데이터를 재구성할 수 있다. 예를 들어, 전자 장치는 521 내지 527 동작을 통하여 변환된 제2 타입 그래픽 API 명령어들을 최적화하여 렌더링에 필요한(유효한) 제2 타입 그래 픽 API 명령어로 재구성할 수 있다.일 실시예에 따르면, 540 동작에서, 전자 장치는 재구성된 제2 타입 그래픽 API 기능(예: 재구성된 제2 타입 그 래픽 API 명령어)를 제2 타입 그래픽 API 명령어 버퍼에 저장할 수 있다. 일 실시예에 따르면, 550 동작에서, 전자 장치는 제2 타입 그래픽 API 드라이버(예: 도 4의 제2 타입 그래 픽 API 드라이버)를 통하여 제2 타입 그래픽 API 명령어 버퍼에 저장된 제2 타입 그래픽 API 명령어 를 GPU(예: 도 1의 보조 프로세서 또는 도 4의 GPU)에 전달할 수 있다. 일 실시예에 따르면, 560 동작에서, 전자 장치는 GPU 를 통하여 제2 타입 그래픽 API 명령어에 기반하여 적어도 하나의 오브젝트의 렌더링 동작을 수행할 수 있다. 예를 들어, 전자 장치는 GPU를 통하여 제2 타 입 그래픽 API 명령어를 실행할 수 있다. 일 실시예에 따르면, 510 동작, 521 내지 527 동작, 및 531 내지 535 동작, 540 동작, 550 동작, 및 560 동작 중 적어도 일부 동작은 전자 장치의 프로세서(예: 도 1의 프로세서 또는 도 3의 프로세서)에 의하여 수행될 수 있다. 일 실시예에 따르면, 가상 명령어 버퍼 및/또는 제2 타입 그래픽 API 명령어 버퍼 는 전자 장치의 메모리(예: 도 1의 메모리, 도 3의 메모리)에 포함될 수 있다. 일 실시예에 따르면, 전자 장치는 변환기를 통하여 변환한 제2 타입 그래픽 API 기반의 데이터 및/또는 명 령어를 바로 제2 타입 그래픽 API 명령어 버퍼에 저장하기 이전에, 가상 명령어 버퍼를 통하여 변환 한 제2 타입 그래픽 API 기반의 데이터 및/또는 명령어를 최적화하고, 렌더링에 필요한 유효한(최적화된)제2 타 입 그래픽 API 기반의 데이터 및 명령어를 제2 타입 그래픽 API 명령어 버퍼에 저장할 수 있다. 예를 들 어, 전자 장치가 가상 명령어 버퍼를 통하여 제2 타입 그래픽 API 기반의 데이터에 대한 최적화 동작을 수 행함으로써, 불필요한 연산 및 메모리 할당을 감소시키고 렌더링 기능의 효율을 증가시킬 수 있다. 도 6a 내지 6f는 일 실시예에 따른 전자 장치의 인덱스 버퍼를 최적화하는 동작을 설명하기 위한 도면이다. 일 실시예에 따르면, 도 6a는 렌더링을 위한 메시(mesh)(600a)의 형태를 도시한다. 일 실시예에 따르면, 각 메 시(600a)를 구성하는 각 꼭지점은 버텍스(vertex)(620, 621, 622, 623, 624. 625. 626, 627, 628, 629)를 의미 할 수 있다. 예를 들어, 메시(600a) 구조를 참고하면, 세 개의 버텍스들이 연결되어 트라이앵글(triangle)을 형성할 수 있다. 예를 들어, 도 6a를 참고하면, 버텍스들이 제0 트라이앵글, 제1 트라이앵글, 제2 트라이앵글, 제3 트라이앵글, 제4 트라이앵글, 제5 트라이앵글, 제6 트라이앵글, 및 제7 트라이앵글을 형성한 경우를 도시한다. 예를 들어, 전자 장치가 메시(600a)를 그리는(draw) 경우, 제 1 트라이앵글, 제2 트라이앵글, …, 제7 트라이앵글 순으로 순차적으로 그리는 경우가 제0 트라 이앵글, 제7 트라이앵글, 제1 트라이앵글, 제6 트라이앵글, … 순으로 뒤죽박죽인 순서로 그리는 경우보다 버텍스 로컬리티(vertex locality)로 인하여 캐시 적중률(cache-hit rate)이 증가하고 메모리 성능을 향상시킬 수 있다. 일 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치 , 또는 도 4의 전자 장치)는 인접한 트라이앵글을 순차적으로 그릴 수 있도록 버텍스의 인덱스를 재 정렬할 수 있다. 예를 들어, 전자 장치는 제0 버텍스, 제1 버텍스, 및 제2 버텍스를 이용하여 제0 트라이앵글을 그릴 수 있고, 제1 버텍스, 제2 버텍스, 및 제3 버텍스를 이용하여 제1 트라이앵글을 그릴 수 있고, 제2 버텍스, 제3 버텍스, 및 제4 버텍스를 이용하여 제2 트라 이앵글를 그릴 수(렌더링할 수) 있다. 이와 마찬가지로, 버텍스의 인덱스가 정렬된 상태인 경우, 전자 장 치는 메시(600a)를 구성하는 트라이앵글을 순차적으로 그릴 수 있다. 예를 들어, 트라이앵글을 순차적으로 그 리는 경우 버텍스 로컬리티(vertex locality)가 증가하여 캐시 적중률을 향상시킬 수 있다. 예를 들어, API가 버텍스에 대한 인덱스 버퍼를 이용하는 경우, 인덱스 버퍼에 저장된 값들이 정렬되어 있지 않 은 경우, 메시(600a)의 트라이앵글을 순차적으로 그릴 수 없거나, 또는 트라이앵글 자체를 그릴 수 없는 경우가 발생할 수 있다. 일 실시예에 따르면, 도 6b는 순차적인 버텍스 인덱스를 저장하고 있는 인덱스 버퍼(600b)의 경우를 도시하며, 도 6c는 버텍스의 순서가 뒤섞이도록 인덱스를 저장하고 있는 인덱스 버퍼(600c)의 경우를 도시하며, 도 6d는 트라이앵글을 만들 수 없는 인덱스 세트(set)를 저장하고 있는 인덱스 버퍼(600d)의 경우를 도시한다. 예를 들어, 도 6b의 경우, 인덱스 버퍼(600b)는 n, n+1, n+2, …, n+10, n+11, … 순으로 버텍스의 인덱스가 순차적으로 저장되어 있을 수 있다. 예를 들어, 제1 인덱스 세트, 제2 인덱스 세트, 제3 인덱스 세 트, 및 제4 인덱스 세트는 각각 트라이앵글을 형성할 수 있다. 이 경우, 인덱스 세트(621, 622,623, 624)이 순차적으로 정렬되어 있기 때문에, 전자 장치는 메시(600a)를 구성하는 트라이앵글을 순차적으로 그릴 수 있다. 예를 들어, 도 6c의 경우, 인덱스 버퍼(600c)에 n, n+1, n+2, n+100, n+101, n+102, n+3, n+4, n+5, n+103, n+104, n+105, … 순으로 버텍스의 인덱스 순서가 뒤섞여서 저장되어 있을 수 있다. 예를 들어, 제5 인덱스 세 트, 제6 인덱스 세트, 제7 인덱스 세트, 및 제8 인덱스 세트가 순차적으로 정렬되어 있지 않기 때문에, 전자 장치는 메시(600a)를 구성하는 트라이앵글을 순차적으로 그리지 못할 수 있다. 예를 들어, 도 6c의 인덱스 버퍼(600c)를 이용할 경우, 전자 장치가 사용하는 버텍스의 메모리 영역이 상대적으로 크게 변 동되어 캐시(cache)의 이점을 사용할 수 없고 도 6b의 경우보다 렌더링 성능이 저하될 수 있다. 예를 들어, 도 6d의 경우, 인덱스 버퍼(600d)가 제9 인덱스 세트, 메시(600a)를 구성하는 트라이앵글을 형 성할 수 없는 제10 인덱스 세트, 및 제11 인덱스 세트를 포함할 수 있다. 예를 들어, 제10 인덱스 세트는 트라이앵글을 형성하지는 못하나 전자 장치에서 인덱스 값들의 연산은 수행될 수 있어서, 도 6b의 경우보다 메모리 및/또는 연산 코스트(cost)에 불리할 수 있으며, 렌더링 성능이 저하될 수 있다. 일 실시예에 따르면, 전자 장치는 API를 변환하기 이전에 인덱스 버퍼를 재구성할 수 있다. 예를 들어, 전자 장치는 인덱스 버퍼에 저장된 적어도 하나의 버텍스(vertex)의 인덱스 값을 삭제 또는 정렬하여 상기 인덱스 버 퍼를 재구성함으로써, 인덱스 버퍼를 최적화할 수 있다. 일 실시예에 따르면, API가 버텍스에 대한 인덱스 버퍼 를 이용하는 경우, 인덱스 버퍼에 저장된 값들이 메시의 트라이앵글을 순차적으로 그릴 수 있도록 정렬되는 경 우 메모리 성능을 최적화시킬 수 있다. 도 6e를 참고하면, 일 실시예에 따른, 전자 장치는 인덱스 버퍼(600e)에서 메시(600a)를 구성하는 트라이앵글을 생성할 수 없는 인덱스(3k, 3k+1, 3k+2)를 인덱스 버퍼(600e)에 제거할 수 있다. 예를 들어, 인덱스 버퍼 (600e)의 컨텐츠들 중 두 개 이상이 같은 값을 가지는 경우, 해당 버텍스 세트(즉, 제12 인덱스 세트)는 트라이앵글을 생성할 수 없을 수 있다. 예를 들어, 제12 인덱스 세트에 포함된 3k, 3k+1, 3k+2 인덱스가 나타내는 컨텐츠의 값이 100으로 동일한 경우, 해당되는 제12 인덱스 세트는 트라이앵글을 생성할 수 없는 인덱스 세트일 수 있다. 예를 들어, 전자 장치는 인덱스 버퍼(600e)로부터 제12 인덱스 세트를 제거하여 인덱스 버퍼(600e)를 재구성 및 최적화할 수 있다. 도 6f를 참고하면, 일 실시예에 따른, 전자 장치는 인덱스 버퍼(600f)에 포함된 인덱스들(3k, 3k+1, 3k+2, …, 3k+10, 3k+11, …)의 순서를 정렬할 수 있다. 예를 들어, 인덱스 버퍼(600f)에 포함된 인덱스 순서를 정렬하는 경우, 인덱스 버퍼(600f)의 값들을 단순히 오름차순 또는 내림차순으로 정렬할 수 없을 수 있다. 예를 들어, 전자 장치는 인덱스 버퍼에 포함된 인덱스들의 순서를 정렬하기 위해서 트라이앵글을 생성할 수 있는 인덱스 세 트를 결정하고, 결정된 인덱스 세트들 각각의 첫 번째 값(컨텐츠)을 기준으로 인덱스들을 정렬할 수 있다. 예 를 들어, 트라이앵글을 생성하기 위해서는 3개의 버텍스가 필요하므로, 전자 장치는 인덱스 버퍼에 저장된 인덱 스들(3k, 3k+1, 3k+2, …, 3k+10, 3k+11, …)을 3개의 인덱스를 포함하는 인덱스 세트(예: 제13 인덱스 세트 , 제14 인덱스 세트, 제 15 인덱스 세트, 제16 인덱스 세트)로 그룹화할 수 있다. 예를 들어, 전자 장치는 그룹화한 인덱스 세트(661, 662, 663, 664) 각각의 첫 번째 인덱스(3k, 3k+3, 3k+6, 3k+9) 의 값(컨텐츠)(6611, 6621, 6631, 6641)을 기반으로 인덱스 버퍼(600f)의 인덱스 세트들(661, 662, 663, 664) 을 정렬할 수 있다. 예를 들어, 전자 장치는 제14 인덱스 세트, 제15 인덱스 세트, 제13 인덱스 세 트 및 제16 인덱스 세트 순서로 인덱스 버퍼를 재구성하여 인덱스 버퍼를 최적화할 수 있다. 일 실시예에 따른 전자 장치는, 메모리, 및 상기 메모리에 작동적으로(operatively) 연결된 프로세서를 포함하 고, 상기 메모리는, 실행 시, 상기 프로세서가, 어플리케이션으로부터 제1 타입의 그래픽 API(graphics application program interface) 기반의 기능 수행 요청을 수신하고, 상기 요청에 기반하여, 상기 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 변환(translate)하고, 상기 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 가상 명령어 버퍼에 저장하고, 상기 제1 타입의 그래픽 API 기반의 데이터와 관련된 렌더링 타겟 정보, 뎁스 상태(depth state) 정보, 및 상기 제1 타입의 그래픽 API의 속성 중 적어도 하나에 기반하여, 상기 가상 명령어 버퍼에 저장한 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 최적화된 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 재구성하고, 상기 재구성된 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장 하도록 하는 인스트럭션들(instructions)을 저장할 수 있다.일 실시예에 따르면, 상기 제1 타입의 그래픽 API는 OpenGL(open graphics library) API 또는 OpenGL ES(OpenGL for embedded systems) API를 포함하고, 상기 제2 타입의 그래픽 API는 Vulkan API를 포함할 수 있 다. 일 실시예에 따르면, 상기 제1 타입의 그래픽 API 기반의 데이터는, 상기 제1 타입의 그래픽 API의 포맷 (format), 상태 정보, 및 리소스 중 적어도 하나를 포함하고, 상기 제2 타입의 그래픽 API 기반의 데이터는, 상 기 제2 타입의 그래픽 API의 포맷, 상태 정보, 및 리소스 중 적어도 하나를 포함할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 실행 시, 상기 프로세서가, 상기 제1 타입의 그래픽 API가 인덱스 버퍼(index buffer)를 이용하는 그래픽 API인 경우, 상기 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 상 기 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 변환하기 이전에, 상기 인덱스 버퍼를 재구성하도록 할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 실행 시, 상기 프로세서가, 상기 인덱스 버퍼에 저장된 적어도 하나 의 버텍스(vertex)의 인덱스 값을 삭제 또는 정렬하여 상기 인덱스 버퍼를 재구성하도록 할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 실행 시, 상기 프로세서가, 상기 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 명령어에 기반하여 적어도 하나의 오브젝트를 렌더링하도록 할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 실행 시, 상기 프로세서가, 상기 렌더링 타겟 정보를 기반으로, 그 래픽 파이프라인(graphic pipeline)에 포함된 복수 개의 작업들 중에서 적어도 일부를 생략하도록 할 수 있다. 일 실시예에 따르면, 상기 복수 개의 작업들 중에서 적어도 일부는 프래그먼트 셰이더(fragment shader) 동작을 포함하는 전자 장치. 일 실시예에 따르면, 상기 메모리는 렌더링 결과를 저장하고, 칼라 버퍼(color buffer), 뎁스 버퍼(depth buffer), 및 스텐실 버퍼(stencil buffer)를 포함하는 프레임 버퍼를 포함할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 실행 시, 상기 프로세서가, 상기 뎁스 상태 정보를 기반으로 프레임 버퍼 중 뎁스 버퍼를 비활성화하도록 할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 실행 시, 상기 프로세서가, 상기 제1 타입의 그래픽 API가 화면 영 역의 설정과 관련된 지정된 API인 경우, 상기 지정된 API와 관련된 정보를 기반으로 상기 제2 타입의 그래픽 API 기반의 명령어에 기반하여 렌더링할 영역을 설정하고 불필요한 렌더링 결과값을 제거하도록 할 수 있다. 일 실시예에 따르면, 상기 지정된 API는 openGL API 중 glScissor API를 포함할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 실행 시, 상기 프로세서가, 상기 제1 타입의 그래픽 API의 포맷을 상기 제2 타입의 그래픽 API의 포맷으로 변환하고, 상기 제1 타입의 그래픽 API의 상태 정보를 기반으로 상기 제2 타입의 그래픽 API의 상태 정보를 설정하고, 상기 제1 타입의 상기 제2 타입의 그래픽 API 기반의 리소스를 할당하고, 제1 타입의 그래픽 API 기반의 명령어를 상기 제2 타입의 그래픽 API 기반의 명령어로 변환하도록 할 수 있다. 도 7은 일 실시예에 따른 전자 장치의 API 변환 방법의 흐름도이다. 일 실시예에 따르면, 710 동작에서, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 4 의 전자 장치)는 어플리케이션으로부터 제1 타입의 그래픽 API 기반의 기능 수행 요청을 수신할 수 있다. 일 실시예에 따르면, 제1 타입의 그래픽 API는 Open GL API 또는 Open GLES API를 포함할 수 있다. 일 실시예에 따르면, 720 동작에서, 전자 장치는 요청에 기반하여, 제1 타입의 그래픽 API 기반의 데이터 및/또 는 명령어를 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어로 변환할 수 있다. 일 실시예에 따르면, 제 2 타입의 그래픽 API는 Vulkan API를 포함할 수 있다. 일 실시예에 따르면, 제1 타입의 그래픽 API 기반의 데 이터는 제1 타입의 그래픽 API의 포맷(format), 상태(state) 정보, 리소스, 및 명령어 중 적어도 하나를 포함하 고, 제2 타입의 그래픽 API 기반의 데이터는 제2 타입의 그래픽 API의 포맷, 상태 정보, 및 리소스 중 적어도 하나를 포함할 수 있다. 예를 들어, 전자 장치는 제1 타입 그래픽 API의 포맷을 제2 타입 그래픽 API 포맷으로 변환할 수 있다. 예를 들어, 전자 장치는 제1 타입 그래픽 API의 상태(state) 정보를 기반으로 제2 타입 그래 픽 API의 상태 정보를 설정할 수 있다. 예를 들어, 전자 장치는 제2 타입 그래픽 API에 리소스를 할당할 수 있다. 예를 들어, 전자 장치는 제1 타입 그래픽 API의 명령어를 제2 타입 그래픽 API의 명령어로 변환할 수 있다. 일 실시예에 따르면, 730 동작에서, 전자 장치는 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어를 가상 명령어 버퍼에 저장할 수 있다. 예를 들어, 변환한 제2 타입의 그래픽 API 명령어를 바로 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장하는 경우, 제2 타입 그래픽 API 기반의 드라이버를 통하여 전달된 제2 타입의 그래픽 API를 GPU가 바로 실행할 수 있다. 이 경우, 불필요한 제2 타입 기반의 명령어 역시 처리하게 됨으로써, 불필요한 연산 및 메모리 사용이 발생할 수 있다. 일 실시예에 따른 전자 장치는 변환한 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어를 가상 명령어 버퍼에 저장하고 최적화를 수행함으로써, 최초 변환된 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어 전부가 GPU에 의해 바로 실행(또는, 사용)되는 것을 방지 할 수 있다. 일 실시예에 따르면, 740 동작에서, 전자 장치는 제1 타입의 그래픽 API 기반의 데이터와 관련된 렌더링 타겟 정보, 뎁스 상태 정보, 및 제1 타입의 그래픽 API의 속성 중 적어도 하나에 기반하여, 가상 명령어 버퍼에 저장 한 제2 타입의 그래픽 API 기반의 데이터 및/또는 명령어를 최적화된 제2 타입의 그래픽 API 기반의 명령어로 재구성할 수 있다. 예를 들어, 전자 장치는 가상 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 명령어 들 중 적어도 일부를 선별하여 최적화된 제2 타입의 그래픽 API 기반의 명령어를 구성할 수 있다. 예를 들어, 전자 장치는 최적화된 제2 타입의 그래픽 API 기반의 명령어에 기반하여 제2 타입의 그래픽 API 기반의 데이터 를 재구성할 수 있다. 일 실시예에 따르면, 렌더링 타겟 정보는 렌더링 결과가 저장될 타겟이 향후 사용될지 여부를 나타내는 정보를 포함할 수 있다. 예를 들어, 전자 장치는 렌더링 타겟이 향후 사용될지 여부를 판단하고, 렌더링 타겟이 향후 사용되지 않는 경우 그래픽 파이프라인 중에서 일부 동작(예: 프래그먼트 셰이더(fragment shader) 동작)을 생 략(discard)할 수 있다. 일 실시예에 따르면, 프래그먼트 셰이더 동작은 렌더링할 각 픽셀의 값을 연산하고, 그 결과를 메모리에 저장하는 동작을 포함할 수 있다. 예를 들어, 렌더링 타겟이 향후 사용되지 않는 경우 프 래그먼트 셰이더 동작을 수행하여 픽셀 값을 연산하여 저장하는 동작은 불필요할 수 있다. 예를 들어, 전자 장 치는 불필요한 프래그먼트 셰이더 동작을 생략함으로써, 렌더링 성능을 최적화할 수 있다. 일 실시예에 따르면, 전자 장치는 제1 타입의 그래픽 API 기반의 데이터와 관련된 뎁스 상태 정보(depth stat e)를 기반으로 렌더링 시 뎁스 값이 필요한지 여부를 판단할 수 있다. 예를 들어, 전자 장치는 렌더링 시 뎁스 값이 불필요한 경우 프레임 버퍼에 포함된 칼라 버퍼(color buffer), 뎁스 버퍼(depth buffer), 및 스텐실 버퍼 (stencil buffer) 중 뎁스 버퍼를 비활성화할 수 있다. 예를 들어, 전자 장치는 렌더링에 불필요한 버퍼(예: 뎁스 버퍼)를 비활성화함으로써, 렌더 패스(render pass)가 시작되고 끝나는 지점에서 불필요한 메모리 로드 (load) 및/또는 저장(store) 동작이 발생하는 것을 방지할 수 있다. 일 실시예에 따르면, 전자 장치는 1 타입의 API가 화면 영역의 설정과 관련된 지정된 API(예: glScissor API)인 경우, 상기 지정된 API와 관련된 정보를 기반으로 제2 타입의 그래픽 API 기반의 명령어에 기반하여 렌더링할 영역을 설정하고 불필요한 렌더링 결과값을 제거할 수 있다. 일 실시예에 따르면, 전자 장치는 상기 740 동작 설명에서 언급한 동작들 중 적어도 하나를 수행하여 제2 타입 의 그래픽 API 기반의 데이터(예: 제2 타입의 그래픽 API 기반의 명령어)를 최적화할 수 있다. 예를 들어, 전 자 장치는 최적화 동작(상기 언급한 동작들 중 적어도 하나)을 통하여 최적화된 제2 타입의 그래픽 API 기반의 명령어를 구성할 수 있다. 일 실시예에 따르면, 750 동작에서, 전자 장치는 제2 타입의 그래픽 API 기반의 명령어 및/또는 데이터를 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장할 수 있다. 예를 들어, 전자 장치는 740 동작을 통하여 최적화 된 제2 타입이 API 기반의 명령어 및/또는 데이터를 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장할 수 있 다. 일 실시예에 따르면, 760 동작에서, 전자 장치는 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 명령어 및/또는 데이터에 기반하여 적어도 하나의 오브젝트를 렌더링할 수 있다. 예를 들어, 전자 장치는 제2 타입 그 래픽 API 기반의 드라이버를 통하여 제2 타입의 그래픽 API 명령어 버퍼에 저장된 제2 타입 그래픽 API 기반의 명령어를 GPU에 써미션(submission)하고, GPU는 수신한 제2 타입 그래픽 API 기반의 명령어를 기반으로 렌더링 기능(동작)을 수행할 수 있다.도 8은 일 실시예에 따른 전자 장치의 API 변환 방법의 흐름도이다. 일 실시예에 따르면, 810 동작에서, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 4 의 전자 장치)는 GLES API를 호출할 수 있다. 예를 들어, 전자 장치는 어플리케이션의 GLES API 기반의 렌더링 기능 수행 요청을 인식할 수 있다. 일 실시예에 따르면, 820 동작에서, 전자 장치는 버퍼 최적화 동작을 수행할 수 있다. 일 실시예에 따르면, 821 동작에서, 전자 장치는 GLES API가 버텍스 버퍼 또는 인덱스 버퍼 데이터를 업로드하 는 API인지 여부를 판단할 수 있다. 일 실시예에 따르면, 전자 장치는 GLES API가 버텍스 버퍼 또는 인덱스 버 퍼 데이터를 업로드하는 API인 경우 823 동작을 수행하고, GLES API가 버텍스 버퍼 또는 인덱스 버퍼 데이터를 업로드하는 API가 아닌 경우, 823 동작의 인덱스 버퍼 최적화 동작을 생략하고 830 동작을 수행할 수 있다. 일 실시예에 따르면, 823 동작에서, 전자 장치는 인덱스 버퍼 최적화 동작을 수행할 수 있다. 일 실시예에 따 르면, 인덱스 버퍼 최적화 동작은 도 6a 내지 도 6f에서 설명한 전자 장치의 동작을 포함할 수 있다. 예를 들어, 전자 장치는 인덱스 버퍼를 재구성하여 인덱스 버퍼를 최적화할 수 있다. 예를 들어, 전자 장치는 인덱 스 버퍼에 저장된 적어도 하나의 버텍스(vertex)의 인덱스 값을 삭제 또는 정렬하여 상기 인덱스 버퍼를 재구성 할 수 있다. 일 실시예에 따르면, 830 동작에서, 전자 장치는 GLES API를 Vulkan API로 변환(translate)할 수 있다. 예를 들어, 전자 장치는 GLES API 포맷을 Vulkan API 포맷으로 변환할 수 있다. 예를 들어, 전자 장치는 GLES API의 상태(state) 정보를 Vulkan API의 상태 정보로 변환할 수 있다. 예를 들어, 전자 장치는 GLES API의 상태 정보 에 대응하도록 Vulkan API의 상태 정보를 설정할 수 있다. 예를 들어, 전자 장치는 Vulkan API와 관련된 리소 스를 결정 또는 수집하고, 리소스를 할당할 수 있다. 예를 들어, 전자 장치는 GLES API 명령어를 Vulkan API 명령어로 변환할 수 있다. 일 실시예에 따르면, 835 동작에서, 전자 장치는 변환한 Vulkan API를 가상 명령어 버퍼에 저장할 수 있다. 일 실시예에 따르면, 전자 장치는 변환한 Vulkan API를 Vulkan 명령어 버퍼에 바로 저장하지 않고 가상 명령어 버 퍼에 저장함으로써, 변환한 Vulkan 명령어가 바로 GPU에 의해 실행되는 것을 방지하고 840 동작에서 변환한 Vulakn 명령어에 대한 명령어 최적화 동작을 수행할 수 있다. 일 실시예에 따르면, 840 동작에서, 전자 장치는 가상 명령어 버퍼에 저장된 Vulkan 명령어에 대하여 명령어 최 적화 동작을 수행할 수 있다. 일 실시예에 따르면, 841 동작에서, 전자 장치는 지정된 최적화 조건을 만족하는지 여부를 판단할 수 있다. 일 실시예에 따르면, 전자 장치는 지정된 최적화 조건을 만족하는 경우 843 동작을 수행하고, 지정된 최적화 조건 을 만족하지 않는 경우, 843 동작의 Vulkan 명령어 최적화 동작을 생략하고 850 동작을 수행할 수 있다. 일 실 시예에 따르면, 지정된 최적화 조건은 렌더링 결과가 저장될 렌더링 타겟이 향후 사용되지 않는 경우, GLES API 또는 Vulkan API의 상태(state) 정보 중 뎁스 상태(depth state) 정보가 비활성화된 경우, 및 GLES API가 지정 된 API(예: glScissor API)인 경우 중 적어도 하나를 포함할 수 있다. 일 실시예에 따르면, 843 동작에서, 전자 장치는 Vulkan 명령어 최적화 동작을 수행할 수 있다. 예를 들어, 전 자 장치는 830 동작에서 변환한 Vulkan 명령어를 최적화된 Vulkan 명령어로 재구성할 수 있다. 예를 들어, 전자 장치는, 렌더링 결과가 저장될 렌더링 타겟이 향후 사용되지 않는 경우, 그래픽 파이프라인 (graphic pipeline)의 적어도 일부 작업(예: 프래그먼트 셰이더(fragment shader) 작업)을 생략(discard)할 수 있다. 예를 들어, 전자 장치는, GLES API 또는 Vulkan API의 상태(state) 정보 중 뎁스 상태(depth state) 정보가 비 활성화된 경우, 칼라 버퍼(color buffer), 뎁스 버퍼(depth vuffer), 및 스텐실(stencil buffer)를 포함하는 프레임 버퍼 중 뎁스 버퍼를 비활성화할 수 있다. 예를 들어, 전자 장치는, LES API가 지정된 API(예: glScissor API)인 경우, Vulkan 렌더 패스(render pass)를 설정할 때 렌더링 영역을 설정하여 불필요한 값을 메모리에 저장하지 않도록 할 수 있다. 이하의 도 9에서 명령어 최적화 동작에 대하여 보다 상세히 후술한다. 일 실시예에 따르면, 850 동작에서, 전자 장치는 최적화된 Vulkan 명령어를 Vulkan 명령어 버퍼에 저장할 수 있 다. 일 실시예에 따르면, 860 동작에서, 전자 장치는 Vulkan 드라이버를 통하여 Vulkan 명령어 버퍼에 저장된 최적 화된 Vulkan 명령어를 GPU에 써미션(submission)할 수 있다. 일 실시예에 따르면, 870 동작에서, 전자 장치는 GPU를 통하여 최적화된 Vulkan 명령어를 기반으로 렌더링 기능 을 수행할 수 있다, 도 9는 일 실시예에 따른 전자 장치의 명령어 최적화 동작들의 흐름도이다. 일 실시예에 따르면, 910 동작에서, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 4 의 전자 장치)는 Vulkan 상태(state) 및/또는 리소스 정보를 수집할 수 있다. 예를 들어, 전자 장치는 GLES API를 Vulkan API로 변환 후 Vulkan API와 관련된 정보를 수집할 수 있다. 일 실시예에 따르면, 920 동작에서, 전자 장치는 910 동작에서 수집한 정보를 기반으로 렌더링 타겟이 향후 사 용되는지 여부를 판단할 수 있다. 예를 들어, 그래픽 파이프라인에서 프래그먼트 셰이더 동작은 각 픽셀의 값 을 연산하고, 그 결과를 메모리에 저장하는 동작을 포함할 수 있다. 예를 들어, 렌더링 결과가 저장될 타겟이 향후에 사용되지 않는 경우, 프래그먼트 셰이더 동작은 수행할 필요가 없을 수 있다. 예를 들어, 전자 장치는 렌더링 타겟이 향후 사용되지 않는다고 판단되는 경우 925 동작을 수행하고, 렌더링 타겟이 향후 사용된다고 판 단되는 경우 930 동작을 수행할 수 있다. 일 실시예에 따르면, 925 동작에서, 전자 장치는 그래픽 파이프라인 중에서 프래그먼트 셰이더 동작을 수행하지 않고 생략(discard)할 수 있다. 예를 들어, 전자 장치는 불필요한 프래그먼트 동작을 생략함으로써 렌더링 성 능을 최적화할 수 있다. 일 실시예에 따르면, 930 동작에서, 전자 장치는 910 동작에서 수집한 정보를 기반으로 뎁스 상태(depth stat e)가 활성화 상태인지 판단할 수 있다. 일 실시예에 따르면, Vulkan API는 렌더링 결과가 저장될 프레임 버퍼의 정보를 지정해 줄 수 있다. 일 실시예에 따르면, 프레임 버퍼는 색상 값을 저장하는 칼라 버퍼, 뎁스 값을 저 장하는 뎁스 버퍼, 및 스텐실 버퍼를 포함할 수 있다. 일 실시예에 따르면, Vulkan 렌더 패스(render pass)는 상기 프레임 버퍼(즉, 칼라 버퍼, 뎁스 버퍼, 및 스텐실 버퍼)가 메모리로 로드 및/또는 저장될지 결정하는 정 보를 포함하고 있으며, 해당 정보를 기반으로 렌더 패스가 시작되고 끝나는 지점에서 메모리의 로드 및/또는 저 장 동작이 발생할 수 있다. 예를 들어, 그래픽 파이프라인에서 뎁스 상태가 비활성화된 경우, 해당 렌더 패스 에서는 뎁스 버퍼를 메모리로 로드하거나 또는 저장할 필요가 없을 수 있다. 일 실시예에 따르면, 전자 장치는 뎁스 상태가 비활성화 상태인 경우 935 동작을 수행하고, 뎁스 상태가 활성화 상태인 경우 940 동작을 수행할 수 있다. 일 실시예에 따르면, 935 동작에서, 전자 장치는 뎁스 버퍼를 비활성화할 수 있다. 예를 들어, 전자 장치는 불 필요한 경우에 뎁스 버퍼를 비활성화하여 불필요한 메모리 로드 및/또는 저장 동작이 발생하지 않도록 함으로써, 메모리 대역폭 및 렌더링 성능을 최적화할 수 있다. 일 실시예에 따르면, 940 동작에서, 전자 장치는 GLES API가 화면 영역 설정과 관련된 지정된 API인지 판단할 수 있다. 예를 들어, glScissor API는 화면의 일부만 보여지도록 렌더링 영역을 설정할 수 있도록 하는 GLES API이다. 예를 들어, 렌더링 영역이 설정되는 경우, 전체 화면의 렌더링 결과를 메모리에 저장할 필요가 없을 수 있고, 설정된 영역의 렌더링 결과를 메모리에 저장하는 것이 효율적일 수 있다. 일 실시예에 따르면, 전자 장치는 GLES API가 지정된 API인 경우 945 동작을 수행하고, 지정된 API가 아닌 경우 950 동작을 수행할 수 있 다. 일 실시예에 따르면, 945 동작에서, 전자 장치는 렌더링 영역을 설정할 수 있다. 예를 들어, 전자 장치는 Vulkan 렌더 패스를 생성할 때, 이전에 호출된 지정된 API(예: glScissor API)의 정보를 기반으로 렌더링 영역 을 설정할 수 있다. 예를 들어, 전자 장치는 렌더링 영역을 설정하여 불필요한 렌더링 결과 값들이 메모리에 저장되지 않도록 하여 렌더링 성능을 최적화할 수 있다. 일 실시예에 따르면, 950 동작에서, 전자 장치는 최적화된 Vulkan 기능(예: 유효한 Vulkan 명령어)을 인식할 수 있다. 예를 들어, 전자 장치는 GLES API를 변환한 Vulkan API 명령어를 최적화를 통하여 유효한 Vulkan 명령어 로 재구성할 수 있다. 예를 들어, 전자 장치는 920 내지 945 동작을 통하여 불필요한 Vulkan 명령어를 제거하고, 렌더링 기능 수행에 적합한 Vulkan 명령어를 선택적으로 결정할 수 있다. 일 실시예에 따르면, 전자 장치는 최적화된 Vulkan 기능(예: 유효한 Vulkan 명령어)를 Vulkan 명령어 버퍼에 저 장할 수 있다. 예를 들어, Vulkan 명령어 버퍼에 저장된 Vulkan 명령어는 Vulkan 드라이버를 통해 GPU에 써미 션(submission)되고, 전자 장치는 GPU에 의해 Vulkan 명령어를 실행하여 렌더링 기능을 수행할 수 있다. 일 실시예에 따른 전자 장치의 API(application program interface) 변환 방법은, 어플리케이션으로부터 제1 타입의 그래픽 API 기반의 기능 수행 요청을 수신하는 동작, 상기 요청에 기반하여, 상기 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 변환(translate)하는 동작, 상기 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 가상 명령어 버퍼에 저장하는 동작, 상기 제1 타입의 그래픽 API 기반의 데이터와 관련된 렌더링 타겟 정보, 뎁스 상태(depth state) 정보, 및 상기 제1 타입의 그래 픽 API의 속성 중 적어도 하나에 기반하여, 상기 가상 명령어 버퍼에 저장한 제2 타입의 그래픽 API 기반의 데 이터 및 명령어를 최적화된 제2 타입의 그래픽 API 기반의 데이터 및 명령어로 재구성하는 동작, 상기 재구성된 제2 타입의 그래픽 API 기반의 데이터 및 명령어를 제2 타입의 그래픽 API 기반의 명령어 버퍼에 저장하는 동작, 및 상기 명령어 버퍼에 저장된 제2 타입의 그래픽 API 기반의 데이터 및 명령어에 기반하여 적어도 하나 의 오브젝트를 렌더링하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 제1 타입의 그래픽 API는 OpenGL(open graphics library) API 또는 OpenGL ES API를 포함하고, 상기 제2 타입의 그래픽 API는 Vulkan API를 포함할 수 있다. 일 실시예에 따르면, 상기 제1 타입의 그래픽 API 기반의 데이터는, 상기 제1 타입의 그래픽 API의 포맷 (format), 상태 정보, 및 리소스 중 적어도 하나를 포함하고, 상기 제2 타입의 그래픽 API 기반의 데이터는, 상 기 제2 타입의 그래픽 API의 포맷, 상태 정보, 및 리소스 중 적어도 하나를 포함할 수 있다. 일 실시예에 따르면, 상기 방법은, 상기 제1 타입의 그래픽 API가 인덱스 버퍼(index buffer)를 이용하는 그래 픽 API인 경우, 상기 제1 타입의 그래픽 API 기반의 데이터 및 명령어를 상기 제2 타입의 그래픽 API 기반의 데 이터 및 명령어로 변환하기 이전에, 상기 인덱스 버퍼를 재구성하는 동작을 더 포함할 수 있다. 일 실시예에 따르면, 상기 인덱스 버퍼를 재구성하는 동작은, 상기 인덱스 버퍼에 저장된 적어도 하나의 버텍스 (vertex)의 인덱스 값을 삭제 또는 정렬하여 상기 인덱스 버퍼를 재구성하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 재구성하는 동작은, 상기 렌더링 타겟 정보를 기반으로, 그래픽 파이프라인(graphic pipeline)에 포함된 복수 개의 작업들 중에서 프래그먼트 셰이더(fragment shader) 동작을 생략하는 것을 특징 으로 할 수 있다. 일 실시예에 따르면, 상기 재구성하는 동작은, 상기 뎁스 상태 정보를 기반으로, 칼라 버퍼(color buffer), 뎁 스 버퍼(depth buffer), 및 스텐실 버퍼(stencil buffer)를 포함하는 프레임 버퍼 중 뎁스 버퍼를 비활성화하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 재구성하는 동작은, 상기 제1 타입의 그래픽 API가 화면 영역의 설정과 관련된 지정 된 API인 경우, 상기 지정된 API와 관련된 정보를 기반으로 상기 제2 타입의 그래픽 API 기반의 명령어에 기반 하여 렌더링할 영역을 설정하고 불필요한 렌더링 결과값을 제거하는 동작을 포함할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일 실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어™)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2 도면3 도면4 도면5 도면6a 도면6b 도면6c 도면6d 도면6e 도면6f 도면7 도면8 도면9"}
{"patent_id": "10-2021-0053645", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예들에 따른 네트워크 환경 내의 전자 장치를 나타낸다. 도 2은 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 도 3은 일 실시예에 따른 전자 장치의 블록도이다. 도 4는 일 실시예에 따른 전자 장치의 구성을 개략적으로 도시한 도면이다. 도 5는 일 실시예에 따른 전자 장치의 API 변환 동작들을 설명하기 위한 도면이다. 도 6a 내지 6f는 일 실시예에 따른 전자 장치의 인덱스 버퍼를 최적화하는 동작을 설명하기 위한 도면이다. 도 7은 일 실시예에 따른 전자 장치의 API 변환 방법의 흐름도이다. 도 8은 일 실시예에 따른 전자 장치의 API 변환 방법의 흐름도이다. 도 9는 일 실시예에 따른 전자 장치의 명령어 최적화 동작들의 흐름도이다. 도면의 설명과 관련하여, 동일 또는 유사한 구성요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있다."}
