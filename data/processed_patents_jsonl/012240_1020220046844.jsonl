{"patent_id": "10-2022-0046844", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0147908", "출원번호": "10-2022-0046844", "발명의 명칭": "오픈 소스 라이선스를 검증하는 전자 장치 및 방법", "출원인": "삼성전자주식회사", "발명자": "이정배"}}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "오픈 소스의 라이선스 검증 방법에 있어서,검증 대상 소프트웨어의 소스 코드를 기 설정된 기준에 따라 분할하는 단계;상기 분할된 소스 코드의 부분 각각을 시퀀스 형태의 임베딩 벡터로 변환하는 단계;상기 변환된 시퀀스 형태의 임베딩 벡터 각각을 적재하여 2D 형태의 임베딩 벡터를 생성하고, 학습된 인공 지능모델에 입력하는 단계; 및상기 학습된 인공 지능 모델을 이용하여 상기 소스 코드에 대응되는 오픈 소스와 관련된 정보를 출력하는 단계;를 포함하는 오픈 소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 오픈 소스와 관련된 정보를 출력하는 단계는,상기 학습된 인공 지능 모델을 이용하여 식별된 상기 오픈 소스의 라이선스 정보 및 상기 오픈 소스의 소스 코드에 대응되는 상기 검증 대상 소프트웨어의 소스 코드와 관련된 정보 중 적어도 하나의 정보를 출력하는, 오픈소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 학습된 인공 지능 모델에 입력하는 단계는,상기 생성된 2D 형태의 임베딩 벡터를 2D 이미지로 변환하는 단계; 및상기 2D 이미지를 상기 학습된 인공 지능 모델에 입력하는 단계;를 포함하는 오픈 소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 2D 이미지로 변환하는 단계는,상기 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 색상 코드를 식별하고, 상기 식별된 색상 코드에 대응되는 색상을 상기 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 영역에 할당하여 상기 2D 형태의 임베딩벡터를 상기 2D 이미지로 변환하는, 오픈 소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 기 설정된 기준은,함수, 기 설정된 문자 또는 기 설정된 단어를 기초로 설정되고,상기 기 설정된 기준에 따라 분할하는 단계는,상기 검증 대상 소프트웨어의 소스 코드에 포함된 함수, 상기 함수에 포함된 기 설정된 문자 또는 상기 함수에포함된 기 설정된 단어를 기준으로 상기 검증 대상 소프트웨어의 소스 코드를 분할하는, 오픈 소스의 라이선스검증 방법.공개특허 10-2023-0147908-3-청구항 6 제1항에 있어서,상기 임베딩 벡터는 기 설정된 길이로 설정되고,상기 임베딩 벡터로 변환하는 단계는,상기 변환된 임베딩 벡터의 길이가 상기 기 설정된 길이보다 짧으면, 더미 값을 추가하여 상기 기 설정된 길이의 임베딩 벡터로 변환하는, 오픈 소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 2D 형태의 임베딩 벡터는 기 설정된 개수의 행을 포함하고,상기 2D 형태의 임베딩 벡터를 생성하는 단계는,상기 변환된 임베딩 벡터의 개수가 상기 기 설정된 개수의 행보다 적으면, 나머지 행을 더미 행으로 적재하여상기 2D 형태의 임베딩 벡터를 생성하는, 오픈 소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 인공 지능 모델은,CNN, GNN, RNN, U-net, LSTM 또는 MLP 기반의 모델인, 오픈 소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,라이선스 검증을 위한 인공 지능 모델을 학습하는 단계;를 더 포함하는 오픈 소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 라이선스 검증을 위한 인공 지능 모델을 학습하는 단계는,상기 오픈 소스의 소스 코드를 기 설정된 기준에 따라 분할하는 단계;상기 분할된 오픈 소스의 소스 코드의 부분 각각을 시퀀스 형태의 학습용 임베딩 벡터로 변환하는 단계;상기 변환된 시퀀스 형태의 학습용 임베딩 벡터 각각을 적재하여 2D 형태의 학습용 임베딩 벡터를 생성하고, 상기 라이선스 검증을 위한 인공 지능 모델에 입력하는 단계; 및상기 2D 형태의 학습용 임베딩 벡터에 기초하여 상기 오픈 소스의 소스 코드에 대응되는 정보를 출력하도록 상기 라이선스 검증을 위한 인공 지능 모델을 학습하는 단계;를 포함하는 오픈 소스의 라이선스 검증 방법."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "입력 인터페이스;메모리; 및프로세서;를 포함하고,상기 프로세서는,상기 입력 인터페이스를 통해 검증 대상 소프트웨어의 소스 코드를 입력받고,상기 검증 대상 소프트웨어의 소스 코드를 기 설정된 기준에 따라 분할하며,상기 분할된 소스 코드의 부분 각각을 시퀀스 형태의 임베딩 벡터로 변환하고,공개특허 10-2023-0147908-4-상기 변환된 시퀀스 형태의 임베딩 벡터 각각을 적재하여 2D 형태의 임베딩 벡터를 생성하고, 학습된 인공 지능모델에 입력하며,상기 학습된 인공 지능 모델을 이용하여 상기 소스 코드에 대응되는 오픈 소스와 관련된 정보를 출력하는, 전자장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 프로세서는,상기 학습된 인공 지능 모델을 이용하여 식별된 상기 오픈 소스의 라이선스 정보 및 상기 오픈 소스의 소스 코드에 대응되는 상기 검증 대상 소프트웨어의 소스 코드와 관련된 정보 중 적어도 하나의 정보를 출력하는, 전자장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서,상기 프로세서는,상기 생성된 2D 형태의 임베딩 벡터를 2D 이미지로 변환하고, 상기 2D 이미지를 인공 지능 모델에 입력하여 라이선스 검증을 위한 인공 지능 모델을 학습하는, 전자 장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 프로세서는,상기 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 색상 코드를 식별하고, 상기 식별된 색상 코드에 대응되는 색상을 상기 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 영역에 할당하여 상기 2D 형태의 임베딩벡터를 상기 2D 이미지로 변환하는, 전자 장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서,상기 기 설정된 기준은,함수, 기 설정된 문자 또는 기 설정된 단어를 기초로 설정되고,상기 프로세서는,상기 검증 대상 소프트웨어의 소스 코드에 포함된 함수, 상기 함수에 포함된 기 설정된 문자 또는 상기 함수에포함된 기 설정된 단어를 기준으로 상기 검증 대상 소프트웨어의 소스 코드를 분할하는, 전자 장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서,상기 임베딩 벡터는 기 설정된 길이로 설정되고,상기 프로세서는,상기 변환된 임베딩 벡터의 길이가 상기 기 설정된 길이보다 짧으면, 더미 값을 추가하여 상기 기 설정된 길이의 임베딩 벡터로 변환하는, 전자 장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제11항에 있어서,상기 2D 형태의 임베딩 벡터는 기 설정된 개수의 행을 포함하고,공개특허 10-2023-0147908-5-상기 프로세서는,상기 변환된 임베딩 벡터의 개수가 상기 기 설정된 개수의 행보다 적으면, 나머지 행을 더미 행으로 적재하여상기 2D 형태의 임베딩 벡터를 생성하는, 전자 장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제11항에 있어서,상기 인공 지능 모델은,CNN, GNN, RNN, U-net, LSTM 또는 MLP 기반의 모델인, 전자 장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제11항에 있어서,상기 프로세서는,라이선스 검증을 위한 인공 지능 모델을 학습시키는, 전자 장치."}
{"patent_id": "10-2022-0046844", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19항에 있어서,상기 프로세서는,상기 오픈 소스의 소스 코드를 기 설정된 기준에 따라 분할하고,상기 분할된 오픈 소스의 소스 코드의 부분 각각을 시퀀스 형태의 학습용 임베딩 벡터로 변환하며,상기 변환된 시퀀스 형태의 학습용 임베딩 벡터 각각을 적재하여 2D 형태의 학습용 임베딩 벡터를 생성하고, 상기 라이선스 검증을 위한 인공 지능 모델에 입력하며,상기 2D 형태의 학습용 임베딩 벡터에 기초하여 상기 오픈 소스의 소스 코드에 대응되는 정보를 출력하도록 상기 라이선스 검증을 위한 인공 지능 모델을 학습시키는, 전자 장치."}
{"patent_id": "10-2022-0046844", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "오픈 소스 라이선스를 검증하는 전자 장치 및 방법이 개시된다. 오픈 소스의 라이선스 검증 방법은 검증 대상 소 프트웨어의 소스 코드를 기 설정된 기준에 따라 분할하는 단계, 분할된 소스 코드의 부분 각각을 시퀀스 형태의 임베딩 벡터로 변환하는 단계, 변환된 시퀀스 형태의 임베딩 벡터 각각을 적재하여 2D 형태의 임베딩 벡터를 생 성하고, 학습된 인공 지능 모델에 입력하는 단계 및 학습된 인공 지능 모델을 이용하여 소스 코드에 대응되는 오 픈 소스와 관련된 정보를 출력하는 단계를 포함한다."}
{"patent_id": "10-2022-0046844", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 오픈 소스 라이선스를 검증하는 전자 장치 및 방법에 관한 것으로, 더욱 상세하게는, 딥 러닝 기반의 인공 지능 모델을 이용한 오픈 소스 라이선스를 검증하는 전자 장치 및 방법에 관한 것이다."}
{"patent_id": "10-2022-0046844", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "제조사 및 프로그램 개발자는 품질이 검증된 FOSS(Free and Open Source Software)를 사용함으로써 개발 주기를 단축시키고, 개발 비용을 감소시키며 적시 출시(Time To Market)를 통한 시장 선점을 할 수 있는 이점을 얻고 있다. 그러나, 제조사 및 프로그램 개발자가 FOSS를 제품 개발에 사용하는 경우, 오픈 소스 라이선스 감시 단체에 의 한 소송을 피하고, 기업과 제품의 브랜딩 이미지의 실추에 대한 위험 부담을 줄이기 위해 제조사 및 프로그램 개발자는 사용하는 FOSS가 라이선스 규약을 준수하는지 필수적으로 검증해야 한다. 일반적으로, 라이선스 검증은 소프트웨어 소스 코드를 기반으로 하여 파일별로 라이선스를 검증한다. 즉, 프로 그램 개발자는 소스 코드의 파일 별로 기존에 확보된 컴포넌트 풀(component pool)인 지식 베이스(Knowledge Base)와 매칭하여 라이선스를 검증한다. 이러한 종래의 방식은 검증 대상 코드의 키워드를 중심으로 텍스트 매 치를 통해 유사한 오픈 소스 코드를 검색하고, 검색 결과를 리스트 형태로 제공한다. 검증자는 리스트 형태의 검색 결과를 정성적으로 리뷰하여 검증 대상 코드와 오픈 소스 코드의 매칭 여부를 최종적으로 결정한다. 그러나, 종래의 방식은 검증 대상 코드와 매칭되는 오픈 소스 코드의 검색 결과의 정확도가 낮아 검증자에 의한 수동 검증이 반드시 필요하다. 또한, 검증자가 정성적으로 리뷰를 할 때, 휴먼 에러로 인한 검증 실패의 가능성이 존재하는 문제점이 있다. 따라서, 오픈 소스의 라이선스 검증의 정확도를 높이고, 검증 시간 및 비용을 줄일 수 있는 기술에 대한 필요성 이 존재한다."}
{"patent_id": "10-2022-0046844", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상술한 문제점을 해결하기 위한 것으로, 본 개시의 목적은 딥 러닝 인공 지능 모델을 이용하여 오픈 소스의 라이선스 검증의 신뢰도를 높이고 검증 시간 및 비용을 줄이기 위한 것이다."}
{"patent_id": "10-2022-0046844", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 일 실시 예에 따른 오픈 소스의 라이선스 검증 방법은 검증 대상 소프트웨어의 소스 코드를 기 설정 된 기준에 따라 분할하는 단계, 상기 분할된 소스 코드의 부분 각각을 시퀀스 형태의 임베딩 벡터로 변환하는 단계, 상기 변환된 시퀀스 형태의 임베딩 벡터 각각을 적재하여 2D 형태의 임베딩 벡터를 생성하고, 학습된 인 공 지능 모델에 입력하는 단계 및 상기 학습된 인공 지능 모델을 이용하여 상기 소스 코드에 대응되는 오픈 소 스와 관련된 정보를 출력하는 단계를 포함한다. 본 개시의 일 실시 예에 따른 전자 장치는 입력 인터페이스, 메모리 및 프로세서를 포함하고, 상기 프로세서는 상기 입력 인터페이스를 통해 검증 대상 소프트웨어의 소스 코드를 입력받고, 상기 검증 대상 소프트웨어의 소 스 코드를 기 설정된 기준에 따라 분할하며, 상기 분할된 소스 코드의 부분 각각을 시퀀스 형태의 임베딩 벡터 로 변환하고, 상기 변환된 시퀀스 형태의 임베딩 벡터 각각을 적재하여 2D 형태의 임베딩 벡터를 생성하고, 학 습된 인공 지능 모델에 입력하며, 상기 학습된 인공 지능 모델을 이용하여 상기 소스 코드에 대응되는 오픈 소 스와 관련된 정보를 출력한다."}
{"patent_id": "10-2022-0046844", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 첨부된 도면을 참조하여 다양한 실시 예를 보다 상세하게 설명한다. 본 명세서에 기재된 실시 예는 다양하게 변형될 수 있다. 특정한 실시 예가 도면에서 묘사되고 상세한 설명에서 자세하게 설명될 수 있다. 그 러나, 첨부된 도면에 개시된 특정한 실시 예는 다양한 실시 예를 쉽게 이해하도록 하기 위한 것일 뿐이다. 따라 서, 첨부된 도면에 개시된 특정 실시 예에 의해 기술적 사상이 제한되는 것은 아니며, 개시의 사상 및 기술 범 위에 포함되는 모든 균등물 또는 대체물을 포함하는 것으로 이해되어야 한다. 제1, 제2 등과 같이 서수를 포함하는 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이러한 구성 요소들은 상술한 용어에 의해 한정되지는 않는다. 상술한 용어는 하나의 구성요소를 다른 구성요소로부터 구별 하는 목적으로만 사용된다. 본 명세서에서, \"포함한다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되 어야 한다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도있다고 이해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속 되어\" 있다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 한편, 본 명세서에서 사용되는 구성요소에 대한 \"모듈\" 또는 \"부\"는 적어도 하나의 기능 또는 동작을 수행한다. 그리고, \"모듈\" 또는 \"부\"는 하드웨어, 소프트웨어 또는 하드웨어와 소프트웨어의 조합에 의해 기능 또는 동작 을 수행할 수 있다. 또한, 특정 하드웨어에서 수행되어야 하거나 적어도 하나의 프로세서에서 수행되는 \"모듈\" 또는 \"부\"를 제외한 복수의 \"모듈들\" 또는 복수의 \"부들\"은 적어도 하나의 모듈로 통합될 수도 있다. 단수의 표 현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 개시의 설명에 있어서 각 단계의 순서는 선행 단계가 논리적 및 시간적으로 반드시 후행 단계에 앞서서 수행 되어야 하는 경우가 아니라면 각 단계의 순서는 비제한적으로 이해되어야 한다. 즉, 위와 같은 예외적인 경우를 제외하고는 후행 단계로 설명된 과정이 선행단계로 설명된 과정보다 앞서서 수행되더라도 개시의 본질에는 영향 이 없으며 권리범위 역시 단계의 순서에 관계없이 정의되어야 한다. 그리고 본 명세서에서 \"A 또는 B\"라고 기재 한 것은 A와 B 중 어느 하나를 선택적으로 가리키는 것뿐만 아니라 A와 B 모두를 포함하는 것도 의미하는 것으 로 정의된다. 또한, 본 명세서에서 \"포함\"이라는 용어는 포함하는 것으로 나열된 요소 이외에 추가로 다른 구성 요소를 더 포함하는 것도 포괄하는 의미를 가진다. 본 명세서에서는 본 개시의 설명에 필요한 필수적인 구성요소만을 설명하며, 본 개시의 본질과 관계가 없는 구 성요소는 언급하지 아니한다. 그리고 언급되는 구성요소만을 포함하는 배타적인 의미로 해석되어서는 아니되며 다른 구성요소도 포함할 수 있는 비배타적인 의미로 해석되어야 한다. 그 밖에도, 본 개시를 설명함에 있어서, 관련된 공지 기능 혹은 구성에 대한 구체적인 설명이 본 개시의 요지를 불필요하게 흐릴 수 있다고 판단되는 경우, 그에 대한 상세한 설명은 축약하거나 생략한다. 한편, 각 실시 예는 독립적으로 구현되거나 동작될 수도 있지만, 각 실시 예는 조합되어 구현되거나 동작될 수도 있다. 도 1은 본 개시의 일 실시 예에 따른 전자 장치의 블록도이다. 도 1을 참조하면, 전자 장치는 입력 인터페이스, 메모리 및 프로세서를 포함한다. 입력 인터페이스는 사용자로부터 제어 명령을 입력받거나 소스 코드 등을 포함하는 다양한 데이터를 입력 받을 수 있다. 예를 들어, 입력 인터페이스는 검증 대상 소프트웨어의 소스 코드를 입력받을 수 있다. 또 한, 입력 인터페이스는 오픈 소스의 소스 코드를 입력받을 수 있다. 오픈 소스는 코드가 공개되고 누구나 사용할 수 있는 소프트웨어를 의미한다. 그러나, 규약에 따라 자유롭게 사용할 수 오픈 소스도 있고, 일정한 제 약이나 요구 조건을 이행해야 하는 오픈 소스도 있다. 라이선스는 일정한 제약이나 이행해야 할 요구 조건 등의 규약을 의미한다. 본 개시는 오픈 소스 라이선스의 검증과 관련된 실시 예를 설명하지만, 다양한 데이터 및 조 건을 수집할 수 있는 다양한 종류의 프로그램 소스에도 적용될 수 있다. 일 실시 예로서, 전자 장치는 오 픈 소스의 라이선스 검증을 위한 인공 지능 모델을 학습시킬 수 있다. 그리고, 전자 장치는 학습된 인공 지능 모델을 이용하여 검증 대상 소프트웨어를 대상으로 오픈 소스의 라이선스 검증을 수행할 수 있다. 오픈 소 스의 라이선스 검증을 위한 인공 지능 모델의 구체적인 설명은 후술한다. 전자 장치가 인공 지능 모델을 학습시킬 때, 입력 인터페이스는 학습 데이터로서 오픈 소스의 소스 코드를 입력받을 수 있다. 또는, 전자 장치가 학습된 인공 지능 모델을 이용하여 소프트웨어의 소스 코드 를 검증할 때, 입력 인터페이스는 검증 대상 소프트웨어의 소스 코드를 입력받을 수 있다. 예를 들어, 입력 인터페이스는 키 패드, 키보드, 터치 패드, 터치 스크린 등으로 구현될 수 있다. 또는, 입력 인터페이스는 입출력 포트로 구현될 수 있다. 입력 인터페이스가 입출력 포트를 포함하는 경우, 입출력 포트는 USB(Universal Serial Bus), PS/2(Personal System/2), HDMI(High-Definition Multimedia Interface), DP(DisplayPort), RGB, DVI(Digital Visual Interface), 썬더볼트, LAN, AUX 등의 포트를 포함할 수 있다. 입력 인터페이스는 입력 장치, 입력부, 입력 모듈 등으로 불릴 수도 있다. 입력 인터페이스(11 0)가 입출력 기능을 수행하는 경우, 입출력 장치, 입출력부, 입출력 모듈 등으로 불릴 수도 있다. 메모리는 전자 장치의 기능을 수행하는 데이터, 알고리즘 등을 저장하고, 전자 장치에서 구동되 는 프로그램, 명령어 등을 저장할 수 있다. 예를 들어, 메모리는 입력된 오픈 소스의 소스 코드, 입력된 검증 대상 소프트웨어의 소스 코드, 라이선스 검증을 위한 인공 지능 모델, 인공 지능 모델의 학습 과정에서 생 성된 데이터, 라이선스 검증 과정에서 생성된 데이터 등을 저장할 수 있다. 메모리에 저장된 알고리즘 또 는 인공 지능 모델은 프로세서의 제어에 의해 프로세서로 로딩되어 인공 지능 모델의 학습 과정 또는 라이선스 검증 과정을 수행할 수 있다. 예를 들어, 메모리는 롬, 램, HDD, SSD, 메모리 카드 등의 타입으로 구현될 수 있다. 프로세서는 전자 장치의 각 구성을 제어할 수 있다. 예를 들어, 프로세서는 데이터를 입력받도 록 입력 인터페이스를 제어하고, 입력된 데이터를 저장하도록 메모리를 제어하며, 메모리에 저 장된 알고리즘, 인공 지능 모델 또는 데이터를 프로세서로 로딩하도록 메모리를 제어할 수 있다. 예를 들어, 프로세서는 인공 지능 모델을 학습시키기 위해 아래와 같은 동작을 수행할 수 있다. 프로세서 는 메모리에 저장된 인공 지능 모델을 프로세서로 로딩할 수 있다. 그리고, 프로세서는 입 력된 오픈 소스의 소스 코드를 기 설정된 기준에 따라 분할할 수 있다. 예를 들어, 기 설정된 기준은 함수, 기 설정된 문자 또는 기 설정된 단어로 설정될 수 있다. 즉, 프로세서는 오픈 소스의 소스 코드에 포함된 함 수, 함수에 포함된 기 설정된 문자 또는 함수에 포함된 기 설정된 단어를 기준으로 오픈 소스의 소스 코드를 분 할할 수 있다. 프로세서는 분할된 소스 코드의 부분 각각을 시퀀스 형태의 임베딩 벡터로 변환할 수 있다. 예를 들어, 임 베딩 벡터는 기 설정된 길이로 설정될 수 있다. 그리고, 프로세서는 변환된 임베딩 벡터의 길이가 기 설정 된 길이보다 짧으면, 더미 값을 추가하여 기 설정된 길이의 임베딩 벡터로 변환할 수 있다. 프로세서는 변환된 시퀀스 형태의 임베딩 벡터 각각을 적재하여 2D 형태의 임베딩 벡터를 생성할 수 있다. 예를 들어, 2D 형태의 임베딩 벡터는 기 설정된 개수의 행을 포함할 수 있다. 그리고, 프로세서는 변환된 임베딩 벡터의 개수가 기 설정된 개수의 행보다 적으면, 나머지 행을 더미 행으로 적재하여 2D 형태의 임베딩 벡터를 생성할 수 있다. 프로세서는 2D 형태의 임베딩 벡터를 인공 지능 모델에 입력하여 라이선스 검증을 위한 인공 지능 모델을 학습시킬 수 있다. 예를 들어, 프로세서는 오픈 소스에 대응되는 라이선스 정보를 출력하도록 인공 지능 모델을 학습시킬 수 있다. 즉, 인공 지능 모델에 입력된 임베딩 벡터는 오픈 소스의 소스 코드와 관련된 데이터 일 수 있다. 그리고, 인공 지능 모델은 오픈 소스에 대응되는 라이선스 정보를 출력하도록 학습될 수 있다. 따 라서, 인공 지능 모델은 입력된 임베딩 벡터와 관련된 오픈 소스의 소스 코드에 대응되는 라이선스 정보를 출력 하도록 학습될 수 있다. 일 실시 예로서, 인공 지능 모델의 입력 데이터는 이미지 데이터일 수 있다. 따라서, 프로세서는 생성된 2D 형태의 임베딩 벡터를 2D 이미지로 변환할 수 있다. 예를 들어, 프로세서는 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 색상 코드를 식별할 수 있다. 그리고, 프로세서는 식별된 색상 코드에 대응되는 색상을 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 영역에 할당할 수 있다. 프로세서는 상술한 과 정을 통해 2D 형태의 임베딩 벡터를 2D 이미지로 변환할 수 있다. 그리고, 프로세서는 변환된 2D 이미지를 인공 지능 모델에 입력하여 라이선스 검증을 위한 인공 지능 모델을 학습시킬 수 있다. 전자 장치는 학습된 인공 지능 모델을 이용하여 생성된 소프트웨어에 대한 오픈 소스의 라이선스를 검증할 수 있다. 예를 들어, 입력 인터페이스는 검증 대상 소프트웨어의 소스 코드를 입력받을 수 있다. 프로세서 는 입력된 검증 대상 소프트웨어의 소스 코드를 학습된 인공 지능 모델에 입력할 수 있다. 이때, 프로세서 는 학습 과정과 유사하게 검증 대상 소프트웨어의 소스 코드를 기 설정된 기준에 따라 분할할 수 있다. 그 리고, 프로세서는 분할된 검증 대상 소스 코드의 부분 각각을 시퀀스 형태의 임베딩 벡터로 변환하고, 각 각의 임베딩 벡터를 적재하여 2D 형태의 임베딩 벡터를 생성할 수 있다. 프로세서가 2D 형태의 임베딩 벡 터를 학습된 인공 지능 모델에 입력하면, 학습된 인공 지능 모델은 입력된 검증 대상 소스 코드에 대응되는 오 픈 소스와 관련된 정보를 제공할 수 있다. 전자 장치는 출력 인터페이스를 포함할 수 있다. 그리고, 전자 장치 는 출력 인터페이스를 통해 오픈 소스와 관련된 정보를 출력할 수 있다. 예를 들어, 출력 인터페이스는 디스플 레이, 통신 인터페이스, 입출력 포트 등의 형태로 구현될 수 있다. 그리고, 오픈 소스와 관련된 정보는 오픈 소 스의 라이선스 정보, 오픈 소스의 소스 코드에 대응되는 검증 대상 소프트웨어의 소스 코드와 관련된 정보를 포 함할 수 있다. 즉, 전자 장치는 학습된 인공 지능 모델을 이용하여 검증 대상 소프트웨어가 어떤 오픈 소 스의 라이선스 정보에 해당되는지 여부, 검증 대상 소프트웨어의 소스 코드 중 어느 부분이 오픈 소스의 소스 코드에 대응되는지 여부에 대한 정보를 출력할 수 있다. 한편, 인공 지능 모델에 이미지 데이터를 입력해야 하는 경우, 프로세서는 검증 대상 소프트웨어의 임베딩 벡터를 이미지로 변환할 수 있다. 즉, 프로세서는 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 색상 코드를 식별할 수 있다. 그리고, 프로세서는 식별된 색상 코드에 대응되는 색상을 2D 형태의 임베딩 벡터 에 포함된 각 값에 대응되는 영역에 할당하여 2D 형태의 임베딩 벡터를 2D 이미지로 변환할 수 있다. 프로세서는 변환된 2D 이미지를 학습된 인공 지능 모델에 입력하고, 학습된 인공 지능 모델은 검증 대상 소프트웨 어에 대한 오픈 소스와 관련된 정보를 출력할 수 있다. 본 개시에 따른 인공 지능과 관련된 기능은 프로세서와 메모리를 통해 동작될 수 있다. 프로세서 는 하나 또는 복수의 프로세서로 구성될 수 있다. 이때, 하나 또는 복수의 프로세서는 CPU, AP, DSP(Digital Signal Processor) 등과 같은 범용 프로세서, GPU, VPU(Vision Processing Unit)와 같은 그래픽 전용 프로세서 또는 NPU와 같은 인공 지능 전용 프로세서일 수 있다. 하나 또는 복수의 프로세서는, 메모 리에 저장된 기 정의된 동작 규칙 또는 인공 지능 모델에 따라, 입력 데이터를 처리하도록 제어한다. 또는, 하나 또는 복수의 프로세서가 인공 지능 전용 프로세서인 경우, 인공 지능 전용 프로세서는, 특정 인공 지능 모델의 처리에 특화된 하드웨어 구조로 설계될 수 있다. 기 정의된 동작 규칙 또는 인공 지능 모델은 학습을 통해 만들어진 것을 특징으로 한다. 여기서, 학습을 통해 만들어진다는 것은, 기본 인공 지능 모델이 학습 알고리즘에 의하여 다수의 학습 데이터들을 이용하여 학습됨으 로써, 원하는 특성(또는, 목적)을 수행하도록 설정된 기 정의된 동작 규칙 또는 인공 지능 모델이 만들어짐을 의미한다. 이러한 학습은 본 개시에 따른 인공 지능이 수행되는 기기 자체에서 이루어질 수도 있고, 별도의 서 버 및/또는 시스템을 통해 이루어 질 수도 있다. 학습 알고리즘의 예로는, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi-supervised learning) 또는 강화 학습 (reinforcement learning)이 있으나, 전술한 예에 한정되지 않는다. 인공 지능 모델은, 복수의 신경망 레이어들로 구성될 수 있다. 복수의 신경망 레이어들 각각은 복수의 가중치들 (weight values)을 갖고 있으며, 이전(previous) 레이어의 연산 결과와 복수의 가중치들 간의 연산을 통해 신경 망 연산을 수행한다. 복수의 신경망 레이어들이 갖고 있는 복수의 가중치들은 인공 지능 모델의 학습 결과에 의 해 최적화될 수 있다. 예를 들어, 학습 과정 동안 인공 지능 모델에서 획득한 로스(loss) 값 또는 코스트(cost) 값이 감소 또는 최소화되도록 복수의 가중치들이 갱신될 수 있다. 인공 신경망은 심층 신경망(DNN:Deep Neural Network)를 포함할 수 있으며, 예를 들어, CNN (Convolutional Neural Network), DNN (Deep Neural Network), GNN(Graph Neural Network), RNN (Recurrent Neural Network), U-net, LSTM(Long Short-Term Memory), MLP(Multi-Layer Perceptron), RBM (Restricted Boltzmann Machine), DBN (Deep Belief Network), BRDNN(Bidirectional Recurrent Deep Neural Network) 또는 심층 Q-네트워크 (Deep Q-Networks) 등이 있으나, 전술한 예에 한정되지 않는다. 도 2는 본 개시의 일 실시 예에 따른 전자 장치의 구체적인 블록도이다. 도 2를 참조하면, 전자 장치는 입력 인터페이스, 메모리, 프로세서, 통신 인터페이스 , 카메라, 마이크, 디스플레이, 스피커, 센서를 포함할 수 있다. 입력 인터페 이스 및 메모리는 도 1에서 설명한 바와 동일하므로 구체적인 설명을 생략한다. 통신 인터페이스는 외부 장치와 통신을 수행할 수 있다. 예를 들어, 통신 인터페이스는 Wi-Fi, Wi-Fi 다이렉트, 블루투스, 지그비, 3G(3rd Generation), 3GPP(3rd Generation Partnership Project) 및 LTE(Long Term Evolution)의 통신 방식 중 적어도 하나 이상의 통신 방식으로 외부 장치와 통신을 수행할 수 있다. 도 1 에서는 전자 장치가 입력 인터페이스를 통해 소스 코드 등을 포함하는 다양한 데이터를 입력받는 실 시 예를 설명하였으나, 전자 장치는 외부 장치로부터 통신 인터페이스를 통해 소스 코드 등을 포함하 는 다양한 데이터를 수신할 수도 있다. 또한, 전자 장치는 학습된 인공 지능 모델을 이용하여 검증 대상 소프트웨어를 검증하고, 통신 인터페이스를 통해 검증 결과를 외부 장치로 전송할 수 있다. 상술한 통신 인터페이스는 통신 장치, 통신부, 통신 모듈, 송수신부 등으로 지칭될 수 있다. 카메라는 전자 장치의 주변 환경을 촬영하여 이미지를 생성할 수 있다. 예를 들어, 이미지는 오브젝 트를 포함할 수 있다. 또한, 이미지는 스틸 이미지 및 동영상 등을 포함할 수 있다. 예를 들어, 카메라는 CCD 센서, CMOS 센서를 포함할 수 있다. 또한, 카메라는 RGB 카메라, 뎁스 카메라, 광각 카메라, 망원 카 메라 등을 포함할 수 있다. 마이크는 외부의 사운드를 입력받는다. 예를 들어, 전자 장치에 한 개의 마이크가 배치될 수 있고, 복수의 마이크가 배치될 수 있다. 예를 들어, 마이크는 일반 마이크, 서라운드 마이크, 지향성 마이크 등 을 포함할 수 있다. 디스플레이는 프로세서에서 처리된 데이터를 영상으로 출력할 수 있다. 인공 지능 모델 학습 과정에 서 디스플레이는 입력된 오픈 소스의 소스 코드에 대응되는 라이선스 정보를 출력할 수 있다. 그리고, 오픈 소스의 라이선스 검증 과정에서 디스플레이는 입력된 검증 대상 소프트웨어의 소스 코드에 대응되는 오 픈 소스와 관련된 정보를 출력할 수 있다. 예를 들어, 오픈 소스와 관련된 정보는 오픈 소스의 라이선스 정보, 오픈 소스의 소스 코드에 대응되는 검증 대상 소프트웨어의 소스 코드와 관련된 정보 등을 포함할 수 있다. 예 를 들어, 디스플레이는 LCD(Liquid Crystal Display), OLED(Organic Light Emitting Diode), 플렉서블 디 스플레이, 터치 스크린 등으로 구현될 수 있다. 디스플레이가 터치 스크린으로 구현되는 경우, 전자 장치 는 터치 스크린을 통해 제어 명령을 입력받을 수 있다. 스피커는 음성 처리가 수행된 음성 신호를 출력한다. 예를 들어, 스피커는 전자 장치에 복수 개 가 배치될 수 있고, 프로세서는 배치된 스피커의 위치에 기초하여 각 채널의 사운드를 할당하여 입체 사운드를 출력할 수 있다. 또한, 스피커는 사용자의 입력 명령에 대한 정보, 전자 장치의 상태 관련 정보 또는 동작 관련 정보 등을 음성이나 알림음으로 출력할 수 있다. 센서는 전자 장치 주변의 물체를 감지할 수 있다. 프로세서는 감지된 신호에 기초하여 제어 명 령을 인식하고, 인식된 제어 명령에 대응되는 제어 동작을 수행할 수 있다. 또한, 센서는 전자 장치 의 주변 환경 정보를 감지할 수 있다. 프로세서는 센서에서 감지된 주변 환경 정보에 기초하여 대응 되는 제어 동작을 수행할 수 있다. 예를 들어, 센서는 가속도 센서, 중력 센서, 자이로 센서, 지자기 센서, 방향 센서, 모션 인식 센서, 근접 센서, 전압계, 전류계, 기압계, 습도계, 온도계, 조도 센서, 열 감지 센서, 터치 센서, 적외선 센서, 초음파 센서 등을 포함할 수 있다. 전자 장치는 상술한 구성을 모두 포함할 수 있고, 일부 구성을 포함할 수도 있다. 또한, 전자 장치는 상술한 구성 이외에도 다양한 기능을 수행하는 다른 구성을 더 포함할 수도 있다. 지금까지 일 실시 예로서 하나의 전자 장치가 인공 지능 모델의 학습과 검증을 모두 수행하는 것으로 설명 하였다. 그러나, 인공 지능 모델의 학습은 외부 전자 장치에서 수행되고, 학습된 인공 지능 모델을 이용한 오픈 소스의 라이선스 검증은 단말 장치에서 수행될 수 있다. 예를 들어, 외부 전자 장치는 서버, 클라우드, 호스트 장치 등을 포함할 수 있다. 그리고, 단말 장치는 스마트폰, 태블릿 PC, 네비게이션, 슬레이트 PC, 웨어러블 디 바이스, 디지털 TV, 데스크탑 컴퓨터, 랩탑 컴퓨터, 키오스크 등을 포함할 수 있다. 즉, 외부 전자 장치는 학습 할 인공 지능 모델을 저장하고, 입력 인터페이스 또는 통신 인터페이스를 통해 오픈 소스의 소스 코드 등을 포 함하는 데이터를 제공받을 수 있다. 외부 전자 장치는 상술한 과정을 통해 오픈 소스의 라이선스 검증을 위한 인공 지능 모델을 학습시킬 수 있다. 외부 전자 장치는 학습된 인공 지능 모델을 단말 장치로 제공할 수 있다. 예를 들어, 단말 장치는 입력 인터페이스 또는 통신 인터페이스를 통해 학습된 인공 지능 모델을 제공받을 수 있다. 단말 장치는 학습된 인공 지능 모델을 저장하고, 입력 인터페이스 또는 통신 인터페이스를 통해 검증 대 상 소프트웨어의 소스 코드를 제공받을 수 있다. 단말 장치는 학습된 인공 지능 모델을 이용하여 검증 대상 소 프트웨어의 소스 코드에 대응되는 오픈 소스와 관련된 정보를 제공할 수 있다. 예를 들어, 단말 장치는 출력 인 터페이스를 통해 검증 대상 소프트웨어의 소스 코드에 대응되는 오픈 소스와 관련된 정보를 출력할 수 있다. 출 력 인터페이스는 디스플레이, 통신 인터페이스, 입출력 포트 등을 포함할 수 있다. 따라서, 도 2에 도시된 전자 장치의 블록도 및 설명은 인공 지능 모델의 학습을 수행하는 외부 전자 장치 또는 오픈 소스의 라이선스 검증을 수행하는 단말 장치에 대응될 수 있다. 도 3은 본 개시의 일 실시 예에 따른 프로세서의 블록도이고, 도 4a 내지 도 4d는 본 개시의 일 실시 예에 따른 임베딩 벡터로 변환하는 과정을 설명하는 도면이며, 도 5a 내지 도 5b는 본 개시의 일 실시 예에 따른 2D 이미 지로 변환하는 과정을 설명하는 도면이다. 도 3 내지 도 5b를 함께 참조하여 설명한다. 도 3을 참조하면, 프로세서는 토큰 생성부, 임베딩 벡터 변환부, 이미지 변환부, 모델 학 습부를 포함할 수 있다. 도 3에 도시된 각 구성은 소프트웨어로 구현되고 메모리에 저장될 수 있다. 그리고, 각 구성은 인공 지능 모델을 학습할 때 프로세서의 제어에 의해 프로세서로 로딩될 수 있다. 전자 장치가 인공 지능 모델을 학습시킬 때, 전자 장치는 오픈 소스 코드 및 라이선스 정보에 대한 데이터를 수집할 수 있다. 예를 들어, 전자 장치는 입력 인터페이스 또는 통신 인터페이스를 통 해 오픈 소스 코드 및 라이선스 정보에 대한 데이터를 수집할 수 있다. 전자 장치는 수집된 오픈 소스 코 드 및 라이선스 정보에 대한 데이터를 메모리에 저장할 수 있다. 토큰 생성부는 오픈 소스의 소스 코드를 기 설정된 기준에 따라 토큰으로 변환할 수 있다. 예를 들어, 프 로세서는 오픈 소스의 소스 코드의 언어 타입을 식별할 수 있다. 그리고, 프로세서는 식별된 언어 타 입에 기초하여 기 설정된 단위의 토큰으로 변환할 수 있다. 예를 들어, 기 설정된 기준(또는, 단위)는 오픈 소스의 소스 코드에 포함된 함수, 함수에 포함된 기 설정된 문자, 함수에 포함된 기 설정된 단어일 수 있다. 토큰 은 기 설정된 기준에 따라 오픈 소스의 소스 코드를 분할한 각 부분을 의미할 수 있다. 또한, 프로세서는 식별된 언어 타입에 따라 기 설정된 노이즈를 제거하는 정규화 과정을 수행할 수 있다. 예를 들어, 의미가 없는 단어, 반복되는 단어 등이 노이즈로 설정될 수 있고, 프로세서는 설정된 기준에 따라 노이즈를 제거할 수 있다. 도 4a에 도시된 바와 같이, 토큰 생성부는 오픈 소스의 소스 코드를 기 설정된 기준에 따라 토큰 으로 변환할 수 있다. 일 실시 예로서, 도 4b에 도시된 바와 같이, 토큰 생성부는 소스 코드에서 시작 지점과 종료 지점을 식별하고, 프로그램이 수행되는 순서를 식별할 수 있다. 일 실시 예로서, 도 4b를 참조하면, 토큰 생성부는 prepare_handle_locker(), dynamic_load(), debug(), return 함수 또는 명령어 의 순서로 오픈 소스의 소스 코드가 수행된다고 식별할 수 있다. 토큰 생성부는 ‘_’(언더 바) 단위 로 소스 코드를 분할할 수 있다. 따라서, 토큰 생성부는 prepare_handle_locker()에서 prepare, handle, locker를 각각 하나의 토큰으로 변환(또는, 각 부분으로 분할)할 수 있다. 임베딩 벡터 변환부는 분할된 소스 코드 부분(토큰) 각각을 시퀀스 형태의 임베딩 벡터로 변환할 수 있다. 임베딩 벡터는 자연어를 장치가 이해할 수 있는 숫자로 나열한 형태를 의미한다. 예를 들어, 임베딩 벡터 변환 부는 NNLM(Neural Network Language Model), Word2Vec, GloVe, FastText, Doc2Vec, Bert 등의 알고리즘 을 이용하여 분할된 소스 코드 각각을 임베딩 벡터로 변환할 수 있다. 임베딩 벡터는 기 설정된 길이로 설정될 수 있다. 일 실시 예로서, 임베딩 벡터는 128 byte의 길이로 설정될 수 있다. 만일, 변환된 임베딩 벡터가 120 byte인 경우, 임베딩 벡터 변환부는 나머지 8 byte 부분에 더미 값을 추가할 수 있다. 임베딩 벡터 변환부는 변환된 시퀀스 형태의 임베딩 벡터를 적재하여 2D 형태의 임베딩 벡터를 생성할 수 있다. 2D 형태의 임베딩 벡터는 기 설정된 개수의 행을 포함할 수 있다. 일 실시 예로서, 2D 형태의 임베딩 벡 터는 16개의 행을 포함할 수 있다. 만일, 적재된 시퀀스 형태의 임베딩 벡터가 14개인 경우, 임베딩 벡터 변환 부는 나머지 2개의 행을 더미 행으로 적재할 수 있다. 일 실시 예로서, 도 4c 및 도 4d에 도시된 바와 같이, 임베딩 벡터 변환부는 토큰 생성부에서 분할된 소스 코드의 각 부분을 시퀀스 형태의 임베딩 벡터로 변환할 수 있다. 그리고, 임베딩 벡터 변환부 는 임베딩 벡터를 적재하여 2D 형태의 임베딩 벡터를 생성할 수 있다. 한편, 도 4d에 도시된 바와 같이, 임베딩 벡터는 n byte의 길이로 설정될 수 있고, 2D 형태의 임베딩 벡터는 m 개의 행을 포함할 수 있다. 임 베딩 벡터 변환부는 변환된 임베딩 벡터가 n byte의 길이보다 짧으면, 더미 값(41-1, 41-2, 41-3)을 추가 하여 n byte의 길이의 임베딩 벡터로 변환할 수 있다. 또한, 임베딩 벡터 변환부는 변환됨 임베딩 벡터의 개수가 m개 보다 적으면, 나머지 행을 더미 행으로 적재하여 m개 행을 포함하는 2D 형태의 임베딩 벡터를 생성 할 수 있다. 도 4a 내지 도 4d에 도시된 예는 일 실시 예이며, 본 개시는 도시된 예에 한정되는 것은 아니다. 모델 학습부는 라이선스 검증을 위한 인공 지능 모델을 학습시킬 수 있다. 모델 학습부는 2D 형태의 임베딩 벡터를 전달받고, 인공 지능 모델에 입력 데이터로 입력시킬 수 있다. 인공 지능 모델은 입력된 임베딩 벡터와 관련된 오픈 소스에 대응되는 라이선스 정보를 출력하도록 학습될 수 있다. 예를 들어, 인공 지능 모델 은 CNN, GNN, RNN, U-net, LSTM, MLP 기반의 모델을 포함할 수 있다. 만일, 인공 지능 모델이 이미지를 입력받는 CNN, U-net 등을 기반으로 하는 모델인 경우, 인공 지능 모델의 입 력 데이터는 이미지일 수 있다. 이미지 변환부는 인공 지능 모델에 입력하기 위한 이미지 데이터를 생성할 수 있다. 즉, 이미지 변환부는 임베딩 벡터 변환부에서 생성된 2D 형태의 임베딩 벡터를 2D 이미지로 변환할 수 있다. 예를 들어, 이미지 변환부는 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 색상 코 드를 식별할 수 있다. 그리고, 이미지 변환부는 식별된 색상 코드에 대응되는 색상을 2D 형태의 임베딩 벡 터에 포함된 각 값에 대응되는 영역에 할당할 수 있다. 이미지 변환부는 상술한 과정을 통해 2D 형태의 임 베딩 벡터를 2D 이미지로 변환할 수 있다. 모델 학습부는 2D 이미지를 인공 지능 모델에 입력하여 인공 지 능 모델을 학습시킬 수 있다. 도 4d에 도시된 바와 같이, 임베딩 벡터는 일련의 특정 값을 포함할 수 있다. 그리고, 도 5a에 도시된 바와 같이, 각 색상에는 색상 코드가 할당되어 있다. 일 실시 예로서, 도 4d의 2D 형태의 임베딩 벡터의 (1, 1)의 값 은 0xFF0000이고, 색상 코드로 레드에 대응될 수 있다. 따라서, 이미지 변환부는 2D 형태의 임베딩 벡터의 (1, 1)에 대응되는 2D 이미지의 영역을 레드로 변환할 수 있다. 즉, 이미지 변환부는 색상 코드에 대응되 는 색상을 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 영역에 할당하여 2D 형태의 임베딩 벡터를 2D 이 미지로 변환할 수 있다. 도 5b에는 상술한 과정을 통해 변환된 2D 이미지의 일 실시 예가 도시되어 있다.도 6은 본 개시의 일 실시 예에 따른 오픈 소스의 라이선스 검증 과정과 관련된 동작을 설명하는 도면이다. 도 6을 참조하면, 검증 대상 소프트웨어의 소스 코드로부터 변환된 2D 이미지를 학습된 인공 지능 모델(5 2)에 입력하여 결과를 출력하는 과정이 도시되어 있다. 일 실시 예로서, 인공 지능 모델은 CNN, U-net 등을 기반으로 하는 모델일 수 있다. 전자 장치는 상술한 과정과 유사한 과정으로 오픈 소스의 라이선스를 검증할 수 있다. 즉, 인공 지능 모델 학습 과정 및 라이선스 검증 과정에서 전자 장치는 동일한 방식으로 소스 코드를 전처리하고, 전처리가 수 행된 데이터를 인공 지능 모델에 입력할 수 있다. 다만, 인공 지능 모델의 학습 과정에서는 정보를 충분히 알고 있는 오픈 소스의 소스 코드를 전처리한 데이터가 인공 지능 모델의 입력 데이터일 수 있다. 그리고, 인공 지능 모델은 입력된 오픈 소스의 소스 코드에 대응되는 데이터에 기초하여 오류(또는, 오차, 에러)를 수정하는 과정을 통해 학습될 수 있다. 라이선스 검증 과정에서는 검증 대상 소프트웨어의 소스 코드를 전처리한 데이터가 학습된 인공 지능 모델의 입력 데이터일 수 있다. 그리 고, 전자 장치는 검증 대상 소프트웨어의 소스 코드에 대응되는 입력 데이터를 학습된 인공 지능 모델에 입력하고, 학습된 인공 지능 모델을 이용하여 검증 대상 소프트웨어의 소스 코드에 대한 오픈 소스와 관련된 정 보를 출력할 수 있다. 예를 들어, 전자 장치는 입력 인터페이스 또는 통신 인터페이스를 통해 검증 대상 소프트웨어의 소스 코드를 제공받을 수 있다. 전자 장치는 제공된 검증 대상 소프트웨어의 소스 코드에 대한 데이터를 메모리에 저장할 수 있다. 그리고, 전자 장치는 도 3에서 설명한 각 구성을 프로세서의 제어에 의해 프로세서로 로딩할 수 있다. 토큰 생성부는 검증 대상 소프트웨어의 소스 코드를 기 설정된 기준에 따라 토큰으로 변환할 수 있다. 토 큰 생성부는 언어 타입에 따라 기 설정된 단위의 토큰으로 변환할 수 있고, 노이즈를 제거하는 정규화 과 정을 수행할 수 있다. 임베딩 벡터 변환부는 분할된 소스 코드 부분(토큰) 각각을 시퀀스 형태의 임베딩 벡터로 변환할 수 있다. 그리고, 임베딩 벡터 변환부는 변환된 시퀀스 형태의 임베딩 벡터를 적재하여 2D 형태의 임베딩 벡터를 생 성할 수 있다. 만일, 인공 지능 모델이 이미지를 입력받는 CNN, U-net 등을 기반으로 하는 모델인 경우, 이미지 변환부 는 임베딩 벡터 변환부에서 생성된 2D 형태의 임베딩 벡터를 2D 이미지로 변환할 수 있다. 프로세서는 2D 형태의 임베딩 벡터 또는 2D 이미지를 인공 지능 모델에 입력할 수 있다. 인공 지능 모 델은 검증 대상 소프트웨어의 소스 코드에 대응되는 오픈 소스와 관련된 정보를 출력할 수 있다. 예를 들어, 오픈 소스와 관련된 정보는 식별된 상기 오픈 소스의 라이선스 정보, 오픈 소스의 소스 코드에 대응 되는 검증 대상 소프트웨어의 소스 코드와 관련된 정보 등을 포함할 수 있다. 즉, 프로세서는 출력 인터페 이스를 통해 오픈 소스의 라이선스 정보, 검증 대상 소프트웨어의 소스 코드에서 오픈 소스의 소스 코드에 대응 되는 코드 부분의 정보 등을 출력할 수 있다. 지금까지 오픈 소스의 라이선스 검증을 위한 인공 지능 모델을 학습시키고, 학습된 인공 지능 모델을 이용하여 오픈 소스의 라이선스를 검증하는 실시 예를 설명하였다. 아래에서는 오픈 소스 라이선스 검증 방법에 대해 설 명한다. 도 7은 본 개시의 일 실시 예에 따른 오픈 소스의 라이선스 검증 방법을 설명하는 흐름도이다. 도 7을 참조하면, 전자 장치는 검증 대상 소프트웨어의 소스 코드를 기 설정된 기준에 따라 분할할 수 있다 (S710). 예를 들어, 기 설정된 기준은 함수, 기 설정된 문자 또는 기 설정된 단어 등에 기초하여 설정될 수 있 다. 전자 장치는 검증 대상 소프트웨어의 소스 코드에 포함된 함수, 함수에 포함된 기 설정된 문자 또는 함수에 포함된 기 설정된 단어를 기준으로 검증 대상 소프트웨어의 소스 코드를 분할할 수 있다. 전자 장치는 분할된 소스 코드의 부분 각각을 시퀀스 형태의 임베딩 벡터로 변환할 수 있다(S720). 예를 들어, 임베딩 벡터는 기 설정된 길이로 설정될 수 있다. 전자 장치는 변환된 임베딩 벡터의 길이가 기 설정된 길이보 다 짧으면, 더미 값을 추가하여 기 설정된 길이의 임베딩 벡터로 변환할 수 있다. 전자 장치는 변환된 시퀀스 형태의 임베딩 벡터 각각을 적재하여 2D 형태의 임베딩 벡터를 생성하고, 학습된 인 공 지능 모델에 입력할 수 있다(S730). 예를 들어, 2D 형태의 임베딩 벡터는 기 설정된 개수의 행을 포함할 수있다. 전자 장치는 변환된 임베딩 벡터의 개수가 기 설정된 개수의 행보다 적으면, 나머지 행을 더미 행으로 적 재하여 2D 형태의 임베딩 벡터를 생성할 수 있다. 전자 장치는 학습된 인공 지능 모델을 이용하여 검증 대상 소프트웨어의 소스 코드에 대응되는 오픈 소스와 관 련된 정보를 출력할 수 있다(S740). 예를 들어, 인공 지능 모델은 CNN, GNN, RNN, U-net, LSTM 또는 MLP 기반 의 모델일 수 있다. 일 실시 예로서, 인공 지능 모델이 이미지를 입력받는 CNN, U-net 등을 기반의 모델이면, 전자 장치는 생성된 2D 형태의 임베딩 벡터를 2D 이미지로 변환할 수 있다. 예를 들어, 전자 장치는 2D 형태의 임베딩 벡터에 포함 된 각 값에 대응되는 색상 코드를 식별할 수 있다. 그리고, 전자 장치는 식별된 색상 코드에 대응되는 색상을 2D 형태의 임베딩 벡터에 포함된 각 값에 대응되는 영역에 할당할 수 있다. 전자 장치는 상술한 과정을 통해 2D 형태의 임베딩 벡터를 2D 이미지로 변환할 수 있다. 전자 장치는 2D 이미지를 인공 지능 모델에 입력하고, 검증 대상 소프트웨어의 소스 코드에 대응되는 오픈 소스와 관련된 정보를 출력할 수 있다. 예를 들어, 오픈 소스와 관련된 정보는 오픈 소스의 라이선스 정보, 오픈 소스의 소스 코드에 대응되는 검증 대상 소프트웨어의 소스 코 드와 관련된 정보 등을 포함할 수 있다. 상술한 다양한 실시 예에 따른 오픈 소스의 라이선스 검증 방법은 컴퓨터 프로그램 제품으로 제공될 수도 있다. 컴퓨터 프로그램 제품은 S/W 프로그램 자체 또는 S/W 프로그램이 저장된 비일시적 판독 가능 매체(non- transitory computer readable medium)를 포함할 수 있다. 비일시적 판독 가능 매체란 레지스터, 캐쉬, 메모리 등과 같이 짧은 순간 동안 데이터를 저장하는 매체가 아니 라 반영구적으로 데이터를 저장하며, 기기에 의해 판독(reading)이 가능한 매체를 의미한다. 구체적으로는, 상 술한 다양한 어플리케이션 또는 프로그램들은 CD, DVD, 하드 디스크, 블루레이 디스크, USB, 메모리카드, ROM 등과 같은 비일시적 판독 가능 매체에 저장되어 제공될 수 있다. 또한, 이상에서는 본 개시의 바람직한 실시 예에 대하여 도시하고 설명하였지만, 본 개시는 상술한 특정의 실시"}
{"patent_id": "10-2022-0046844", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "예에 한정되지 아니하며, 청구범위에서 청구하는 본 개시의 요지를 벗어남이 없이 당해 개시가 속하는 기술분야 에서 통상의 지식을 가진 자에 의해 다양한 변형실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 개시의 기술적 사상이나 전망으로부터 개별적으로 이해되어서는 안될 것이다."}
{"patent_id": "10-2022-0046844", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시 예에 따른 전자 장치의 블록도이다. 도 2는 본 개시의 일 실시 예에 따른 전자 장치의 구체적인 블록도이다. 도 3은 본 개시의 일 실시 예에 따른 프로세서의 블록도이다. 도 4a 내지 도 4d는 본 개시의 일 실시 예에 따른 임베딩 벡터로 변환하는 과정을 설명하는 도면이다. 도 5a 내지 도 5b는 본 개시의 일 실시 예에 따른 2D 이미지로 변환하는 과정을 설명하는 도면이다. 도 6은 본 개시의 일 실시 예에 따른 오픈 소스의 라이선스 검증 과정과 관련된 동작을 설명하는 도면이다. 도 7은 본 개시의 일 실시 예에 따른 오픈 소스의 라이선스 검증 방법을 설명하는 흐름도이다."}
