{"patent_id": "10-2020-0150268", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0064105", "출원번호": "10-2020-0150268", "발명의 명칭": "반도체 장치", "출원인": "삼성전자주식회사", "발명자": "이정호"}}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "장치 메모리; 및호스트 장치와 호스트 메모리 내 데이터에 기초하여 상기 장치 메모리의 일관성 상태를 공유하는 장치 일관성엔진(Device Coherency Engine, DCOH)를 포함하고, 상기 장치 메모리는 상기 일관성 상태에 기초하여 동적으로 조절되는 전력을 공급받는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 DCOH는상기 장치 메모리와 상기 호스트 장치 사이에 연결되는 가속기 또는 메모리 컨트롤러에 포함되는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 장치 메모리의 일관성 상태는무효 상태, 공유 상태, 수정 상태,독점 상태를 포함하는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서, 상기 장치 메모리 전체가 상기 무효 상태인 경우상기 장치 메모리에 공급되는 전력을 차단하는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서, 상기 장치 메모리에 대한 데이터 송수신 상태에 따라 상기 장치 메모리의 동작 주파수를 동적으로 조절하는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제3항에 있어서, 상기 장치 메모리는복수의 채널에 각각 연결된 복수의 장치 메모리를 포함하고,상기 복수의 장치 메모리 각각에 대한 상기 일관성 상태에 따라 각 장치 메모리의 전력 공급이 독립적으로 제어되고,상기 복수의 장치 메모리 중 일부 장치 메모리가 상기 무효 상태인 경우상기 무효 상태의 일부 장치 장치 메모리에 공급되는 전력을 차단하는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제3항에 있어서, 상기 장치 메모리는복수의 채널에 각각 연결된 복수의 장치 메모리를 포함하고,상기 복수의 장치 메모리 각각에 대한 상기 일관성 상태에 따라 각 장치 메모리의 전력 공급이 독립적으로 제어되고, 상기 장치 메모리에서 일부 뱅크 영역만 사용되는 경우사용되지 않는 나머지 뱅크 영역은 리텐션 오프하는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "공개특허 10-2022-0064105-3-CXL(Compute Express Link) 인터페이스를 통해 호스트 장치와 연결되는 반도체 장치에 있어서,데이터를 저장하는 적어도 하나의 가속기 메모리; 및상기 데이터에 대해 상기 호스트 장치와 일관성 상태를 공유하는 가속기를 포함하고, 상기 반도체 장치는 상기 일관성 상태에 따라 상기 가속기 메모리에 동적으로 전력을 공급하는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "호스트 장치와 연결되는 반도체 장치에 있어서,데이터를 저장하는 적어도 하나의 동작 메모리를 포함하는 메모리 장치; 및상기 동작 메모리에 대해 상기 호스트 장치와 일관성 상태를 공유하는 메모리 컨트롤러를 포함하고, 상기 반도체 장치는 상기 일관성 상태에 따라 상기 동작 메모리에 동적으로 전력을 공급하는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서, 상기 메모리 장치는복수의 채널에 각각 연결된 복수의 동작 메모리를 포함하고,상기 일관성 상태에 따라 각 동작 메모리의 전력 공급이 독립적으로 제어되는, 반도체 장치."}
{"patent_id": "10-2020-0150268", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "반도체 장치가 제공된다. 반도체 장치는 메모리 장치 및 호스트 장치와 호스트 메모리 내 데이터에 기초하여 메 모리 장치의 일관성 상태를 공유하는 장치 일관성 엔진(Device Coherency Engine, DCOH)를 포함하고, 메모리 장 치는 일관성 상태에 기초하여 동적으로 조절되는 전력을 공급받을 수 있다."}
{"patent_id": "10-2020-0150268", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 반도체 장치에 관한 것이다. 보다 구체적으로, 본 발명은 CXL(Compute Express Link) 인터페이스를 이용하는 반도체 장치에 관한 것이다."}
{"patent_id": "10-2020-0150268", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능(AI), 빅데이터, 엣지 컴퓨팅(Edge Computing)와 같은 기술 발전에 따라, 장치에서 보다 많은 양의 데 이터를 보다 빠르게 처리하고자 하는 요구들이 대두되고 있다. 즉, 복잡한 연산을 수행하는 고대역폭 애플리케 이션은 더 빠른 데이터 처리와 더 효율적인 메모리 액세스가 필요하다. 그러나 CPU, GPU 등 연산장치들을 포함하는 호스트 디바이스들은 메모리를 포함하는 반도체 장치와 대부분 PCIe 프로토콜을 통해 연결되어 있어, 상대적으로 대역폭이 낮고 지연이 길며, 반도체 장치와의 메모리 공유와 일관 성 문제가 발생하고 있다."}
{"patent_id": "10-2020-0150268", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명이 해결하고자 하는 기술적 과제는 메모리 상태에 따라 동적으로 전력을 운영하여 파워를 효율적으로 사 용하는 반도체 장치를 제공하는 것이다. 본 발명의 기술적 과제들은 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술적 과 제들은 아래의 기재로부터 당업자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2020-0150268", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 술적 과제를 달성하기 위한 본 발명의 몇몇 실시예에 반도체 장치는, 메모리 장치 및 호스트 장치와 호스 트 메모리 내 데이터에 기초하여 메모리 장치의 일관성 상태를 공유하는 장치 일관성 엔진(Device Coherency Engine, DCOH)를 포함하고, 메모리 장치는 일관성 상태에 기초하여 동적으로 조절되는 전력을 공급받을 수 있다. 상기 기술적 과제를 달성하기 위한 본 발명의 몇몇 실시예에 따른 CXL 인터페이스를 통해 호스트 장치와 연결되 는 반도체 장치는 데이터를 저장하는 적어도 하나의 가속기 메모리 및 데이터에 대해 호스트 장치와 일관성 상태를 공유하는 가속기를 포함하고, 반도체 장치는 일관성 상태에 따라 가속기 메모리에 동적으로 전력을 공급할 수 있다. 상기 기술적 과제를 달성하기 위한 본 발명의 몇몇 실시예에 호스트 장치와 연결되는 반도체 장치는 데이터를 저장하는 적어도 하나의 동작 메모리를 포함하는 메모리 장치 및 동작 메모리에 대해 호스트 장치와 일관성 상 태를 공유하는 메모리 컨트롤러를 포함하고, 반도체 장치는 일관성 상태에 따라 동작 메모리에 동적으로 전력을 공급할 수 있다. 기타 실시예들의 구체적인 사항들은 상세한 설명 및 도면들에 포함되어 있다."}
{"patent_id": "10-2020-0150268", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1 및 도 2는 몇몇 실시예에 따라 호스트 장치와 연결된 반도체 장치를 나타낸 블록도이다. 몇몇 실시예에서, 호스트 장치는 CPU(Central Processing Unit), GPU(Graphic Processing Unit), NPU(Neural Processing Unit), FPGA, 프로세서, 마이크로프로세서 또는 어플리케이션 프로세서(Application Processor, AP) 등에 해당할 수 있다. 몇몇 실시예에 따라, 호스트 장치는 시스템 온 칩(System-On-a- Chip, SoC)으로 구현될 수 있다. 호스트 장치는 예를 들면, 기본적으로 휴대용 통신 단말기(mobile phone), 스마트폰(smart phone), 태블릿 PC(tablet personal computer), 웨어러블 기기, 헬스케어 기기 또는 IOT(internet of things) 기기와 같은 모바일(mobile) 시스템, 또는 개인용 컴퓨터(personal computer), 랩탑 (laptop) 컴퓨터, 서버(server), 미디어 재생기(media player) 또는 내비게이션(navigation)과 같은 차량용 장 비(automotive device) 등이 될 수도 있다. 또한 호스트 장치는 통신 장치(미도시)를 포함하여, 다양한 통 신 규약에 따라 호스트 장치 외부의 다른 장치들과의 사이에서 신호의 송수신을 수행할 수 있다. 통신 장치 는 유선 또는 무선 연결을 수행하는 장치로 예를 들면 안테나, 트랜시버 및/또는 모뎀 등을 포함하여 구현될 수 있다. 호스트 장치는 통신 장치를 통해 예를 들면 이더넷 네트워크나 무선 통신이 가능할 수 있다. 호스트 장치는 호스트 프로세서와 호스트 메모리를 포함하고, 호스트 프로세서는 호스트 장치 의 동작을 전반적으로 제어하고, 호스트 메모리는 동작 메모리(Working memory)로서 호스트 프로세서 의 동작에 필요한 명령, 프로그램 또는 데이터 등을 저장할 수 있다. 도 1에 도시된 반도체 장치는 몇몇 실시예에 따라 CXL 인터페이스를 이용하는 반도체 장치로서, 가속기 및 가속기 메모리를 포함할 수 있다. 도 2에 도시된 반도체 장치는 몇몇 실시예에 따라 CXL 인 터페이스를 이용하는 반도체 장치로서, 메모리 컨트롤러 및 동작 메모리을 포함할 수 있다. 도 1에서 몇몇 실시예에 따라 가속기는 복잡한 연산을 수행하는 모듈일 수 있다. 가속기는 워크 로드 가속기로서, 예를 들어 인공지능 등에 필요한 딥 러닝 연산 등을 수행하는 GPU(Graphic Processing Unit) 또는 네트워킹과 같은 CPU(Central Processing Unit) 또는 신경망 연산 등을 수행하는 NPU(Neural Processing Unit) 등일 수 있다. 또는 가속기는 기설정된 방식의 연산을 수행하는 FPGA(Field Programmable Gate Array)일 수도 있다. FPGA는 예를 들면, 장치의 동작 중 그 전체 동작 또는 일부 동작을 재설정하며 인공지능 연산, 딥러닝 연산 또는 이미지 프로세싱 연산 등 복잡한 연산을 적응적으로 수행할 수 있다. 가속기 메모리는 몇몇 실시예에 따라 가속기와 같은 반도체 장치에 배치된 내부 메모리일 수도 있고, 가속기가 속한 반도체 장치의 외부에 연결된 메모리 장치일 수도 있다. 도 2에서 몇몇 실시예에 따라 메모리 컨트롤러는 동작 메모리에 대한 전반적인 동작을 제어할 수 있 고, 예를 들면 메모리 액세스를 관리할 수 있다. 일 실시예에 따라 동작 메모리는 반도체 장치의 버 퍼 메모리일 수 있다. 몇몇 실시예에 따라 가속기 메모리 및 동작 메모리는 버퍼 메모리일 수 있으며, 몇몇 실시예에 따라 휘발성 메모리로서 캐시(Cache), ROM(Read Only Memory), PROM(Programmable Read Only Memory), EPROM(Erasable PROM), EEPROM(Electrically Erasable Programmable Read-Only Memory), PRAM(Phase-change RAM), 플래시(Flash) 메모리, SRAM(Static RAM), 또는 DRAM(Dynamic RAM)을 포함할 수 있다. 가속기 메모리 및 동작 메모리는 몇몇 실시예에 따라 내부 메모리로 가속기 또는 메모리 컨트롤러 내에 집적된 것일 수도 있고, 외부에 별개로 존재하는 것일 수도 있다. 가속기 메모리 및 동작 메모리에는 가속기 또는 메모리 컨트롤러의 동작 또는 상태와 관련된 기설정된 정보들, 프로그램들, 또는 명령들 이 저장될 수 있다. 설명의 편의를 위해 본 명세서에서 가속기 메모리 또는 동작 메모리는 장치 메모 리로 호칭하기로 한다. 호스트 장치는 CXL 인터페이스를 통해 연결되어, 반도체 장치(200,300)의 동작을 전반적으로 제어할 수 있 다. CXL 인터페이스는 데이터 압축 및 암호화, 인공지능(AI) 같은 특수 작업 부하의 급속한 혁신으로 인해 호스 트 장치와 반도체 장치(200, 300)가 함께 동작하는 이기종 컴퓨팅 환경에서 호스트 장치와 반도체 장치의 오버헤드 및 대기 시간을 줄이고 호스트 메모리와 장치 메모리 공간을 공유할 수 있게 해주는 인터페이스이다. 호스트 장치와 반도체 장치(200, 300)는 CXL 인터페이스를 통해 매우 높은 대역폭으로 가속기와 CPU간의 메 모리 일관성을 유지할 수 있다. 예를 들면, CXL 인터페이스는 호스트 장치가 반도체 장치(200, 300)에 포함된 장치 메모리(220, 320)를 캐 시 일관성을 지원하는 호스트 장치의 워킹 메모리처럼 사용하게 하고, 장치 메모리(220,230) 또한 Load/Store 메모리 명령을 통해 데이터에 접근할 수 있도록 하는 서로 다른 종류의 장치 간 인터페이스이다. CXL 인터페이스는 3가지 하위 프로토콜 CXL.io, CXL.cache, CXL.mem을 포함한다. CXL.io는 PCIe 인터페이스를 이용하며, 시스템에서 장치 검색, 인터럽트 관리, 레지스터에 의한 액세스 제공, 초기화 처리 및 신호 오류 처 리 등에 사용한다. CXL.cache는 반도체 장치에 포함된 가속기 등의 연산장치가 호스트 장치의 호스트 메모리에 액세스할 때 사용될 수 있다. CXL.mem은 호스트 장치가 반도체 장치에 포함된 장치 메모리에 액세스할 때 사용 될 수 있다. 반도체 장치(200, 300)는 장치 일관성 엔진(Device COHerency Engine; DCOH, 100)를 포함할 수 있다. DCOH는 상술한 CXL.mem 프로토콜에서 호스트 메모리와 장치 메모리(220, 320) 간 데이터 일관성을 관 리하는 엔진으로서, 호스트 장치와 반도체 장치(200,300) 간 송수신하는 요청(Request) 및 응답(Response) 에 일관성 상태를 포함시켜, 데이터의 일관성을 실시간으로 관리한다. 구체적으로는 도 3 내지 도 12에서 설명 한다. 몇몇 실시예에 따라 DCOH는 가속기 또는 메모리 컨트롤러의 외부에 존재할 수 있다. 또는 몇몇 실시예에 따라 DCOH는 가속기 또는 메모리 컨트롤러의 내부에 포함될 수도 있다. 호스트 장치는 데이터 및 메모리 관리와 관련된 하나 이상의 명령(CMD)을 포함하여 요청을 전송하고, 전송 된 요청에 대한 응신을 수신한다. 몇몇 실시예에 따라 도 2의 메모리 컨트롤러는 동작 메모리와 연결되고, 메모리 컨트롤러는 호 스트 장치로부터 수신한 데이터를 동작 메모리에 일시 저장하였다가 비휘발성 메모리 장치(미도시)로 제공할 수도 있고, 비휘발성 메모리 장치(미도시)로부터 독출된 데이터를 호스트 장치로 제공할 수도 있다. 도 3은 반도체 장치에 포함된 장치 메모리의 일관성 상태(Coherency State)를 설명하기 위한 도면이고, 도 4 내 지 도 7은 도 3의 일관성 상태를 나타내는 메타 데이터를 설명하기 위한 테이블이다. 도 8 및 도 9는 몇몇 실시 예에 따라 호스트 장치와 반도체 장치 간의 동작을 설명하기 위한 흐름도이다. 도 3을 참고하면, 반도체 장치(200, 300)에 포함된 장치 메모리(220, 320)는 복수의 일관성 상태를 포함한다. 몇몇 실시예에 따라 장치 메모리(220, 32)의 일관성 상태는 MESI 프로토콜, 즉, 무효(Invalid) 상태, 공유(Shared) 상태, 수정(Modified) 상태, 독점(Exclusive) 상태를 포함할 수 있다. 무효(Invalid) 상태는 호스트 메모리 내 데이터가 수정되어 장치 메모리(220, 320)의 데이터가 더이상 유효 하지 않게 되는 상태를 말한다. 공유(Shared) 상태는 장치 메모리(220, 320)의 데이터가 호스트 메모리 내 데이터와 동일해지는 상태를 말한다. 수정(Modified) 상태는 장치 메모리(220, 320)의 데이터가 수정되는 상태 를 말한다. 독점(Exclusive) 상태는 호스트 메모리 또는 장치 메모리(220, 320) 중 어느 한쪽에만 데이터가 존재하는 상태를 말한다. 몇몇 실시예에 따라 읽기 미스(read miss)는 장치 메모리(220,320)가 호스트 메모리로부터 처음 데이터를 읽어온 후 호스트 메모리에는 읽혀진 데이터가 삭제되거나 수정되면, DCOH는 장치 메모리(220, 320)의 상태를 독점 상태로 셋팅할 수 있다. 또는 몇몇 실시예에 따라 호스트 메모리의 데이터를 장치 메모리(220,320)가 호스트 메모리로부터 읽어 오는 경우(읽기 미스)로서 호스트 메모리가 읽혀진 데이터를 계속 가지고 있는 경우, DCOH는 장치 메 모리의 일관성 상태를 공유 상태로 셋팅할 수 있다. 몇몇 실시예에 따라 쓰기 적중(Write hit)은 장치 메모리(220,320)에 저장되어 있던 데이터가 업데이트되면 DCOH는 장치 메모리(220, 320)의 상태를 수정 상태로 셋팅한다. 몇몇 실시예에 따라 읽기 미스(read miss)는 호스트 장치가 장치 메모리(220,320)로부터 데이터를 읽어온 후 장치 메모리(220, 320)에는 읽혀진 데이터가 삭제되면, DCOH는 장치 메모리(220, 320)의 상태를 무효 상태로 셋팅할 수 있다. 복수의 반도체 장치 중 제1 장치 메모리(220,320)의 데이터와 동일한 데이터를 제2 장치 메모리(220,320)가 호 스트 메모리로부터 읽어오는 경우 (읽기 미스), DCOH는 제1 장치 메모리의 일관성 상태를 공유 상태로 셋팅하고, 이어서 제2 장치 메모리의 일관성 세트도 공유 상태로 셋팅할 수 있다. 한편 제1 장치 메모리(220,320)와 제2 장치 메모리(220, 320)에 공유되어 있던 데이터 중 어느 하나의 장치 메 모리(예를 들어 제1 장치 메모리)의 데이터가 수정되는 경우, 제2 장치 메모리의 데이터는 더 이상 유효하지 않 으므로, DCOH는 제1 장치 메모리는 수정 상태, 제2 장치 메모리는 무효 상태로 셋팅할 수 있다. 위와 같은 제1 장치 메모리는 수정 상태인 상황에서 다시 제1 장치 메모리의 데이터가 변경되면, 쓰기 적중 (Write hit)에 따라 데이터만 변경되고 DCOH는 제1 장치 메모리를 수정 상태로 유지할 수 있다. 몇몇 실시예에 따라 장치 메모리의 일관성 상태는 호스트 장치가 반도체 장치(200,300)로 보내는 요청 (Request)의 메타필드 플래그로 포함될 수 있다. 도 4에 도시된 예의 경우, 메타필드 플래그는 2비트로서, 반도 체 장치(200,300)가 메타 데이터를 지원하지 않는 경우에도, DCOH는 장치 메모리(220,320)의 일관성 상태 를 알려달라는 호스트 장치로부터의 명령을 번역하여 반도체 장치(200,300)로 요청을 전송할 수 있다. 도 6 에 도시된 예의 경우, 메타필드 플래그는 2비트로서, 장치 메모리(2220, 320)가 메타 데이터를 지원하는 경우에 장치 메모리(220,320)의 일관성 상태를 알려달라는 호스트 장치로부터의 명령을 메타필드 플래그로 요청에 포함하여 반도체 장치(200,300)로 전송할 수 있다. 몇몇 실시예에 따라 장치 메모리(220, 320)의 일관성 상태는 도 5와 같은 메타필드 플래그로 나타낼 수 있다. 예를 들어 무효상태는 2'b00, 독점상태, 수정 상태는 2'b10으로 나타낼 수 있고, 공유 상태 중 호스트 장치(1 0)가 독점 상태 또는 수정 상태가 아닌 경우 2b'11로 나타낼 수 있다. 도 7에 도시된 것과 같이, 장치 메모리의 일관성 상태는 호스트 장치가 반도체 장치(200, 300)로 보내는 회 신(Response)의 메타필드 플래그로 포함될 수 있다. 장치 메모리의 일관성 상태는 Cmp, Cmp-S, Cmp-E를 포함할 수 있다. Cmp는 쓰기, 읽기 또는 무효화가 완료되었다는 것을 나타내고, Cmp-S는 공유 상태를 나타내며, Cmp- E는 독점 상태를 나타낸다. 도 8에서 몇몇 실시예에 따라, 호스트 장치가 장치 메모리(220, 320)에 데이터 읽기를 요청하면 (MemRd.SnpData), 반도체 장치(200, 300)는 DCOH를 통해 장치 메모리(220, 320)의 일관성 상태를 독점 상 태에서 공유 상태(E→S)로 변경하고, 장치 메모리(220, 320)는 응신에 일관성 상태와 함께 요청된 데이터를 DCOH로 송부한다(Data, RspS). DCOH는 도 7에 도시된 메타필드 플래그 중 Cmp-S와 데이터를 응신에 포함하여 호스트 장치로 전송할 수 있다. 도 9에서 몇몇 실시예에 따라, 호스트 장치가 장치 메모리(220, 320)에 데이터 쓰기를 요청하면 (MemWr.Metavalue), 반도체 장치(200, 300)는 장치 메모리(220, 320)에 쓰기요청된 데이터가 쓰기 되면서 (Write Hit) DCOH를 통해 장치 메모리(220,320)의 일관성 상태는 쓰기 완료되었다는 응신(Cmp)을 보내면서 호스트 메모리에서는 해당 데이터가 삭제되고 장치 메모리의 일관성 상태는 독점 상태로 변경할 수 있다. 도 10은 몇몇 실시예에 따라 호스트 장치와 반도체 장치 간의 동작을 설명하기 위한 흐름도이다. 도 3 내지 도 9에서 설명한 바와 같이 호스트 장치와 반도체 장치간 장치 메모리(220, 320)의 일관성 상태가 공 유되면, 호스트 장치는 장치 메모리에 공급되는 전력을 일관성 상태에 따라 동적으로 조절하여 공급할 수 있다. 보다 구체적으로, 호스트 장치는 반도체 장치의 동작 제어 명령과 함께 장치 메모리의 일관성 상태를 알려 달라 는 요청을 송부하고(S10), 반도체 장치는 상기 동작 제어 명령에 따라 동작하면서, 장치 메모리의 일관성 상태 를 회신한다(S20). 호스트 장치는 모든 장치 메모리의 일관성 상태가 무효 상태가 아니면, 계속하여 제어 동작 을 수행한다(S11). 호스트 장치는 무효 상태인 영역을 확인하여(S12) 장치 메모리 전부가 무효 상태이면(Whole Region), 장치 메모 리에 공급되는 동작 클락을 차단할 수 있다(S23). 호스트 장치는 무효 상태인 영역을 확인하여(S12) 장치 메모리 일부가 무효 상태이면(Partial Region), 무효 상 태인 일부 장치 메모리에 대해서만 전원 공급을 차단하거나, 장치 메모리의 대역폭을 줄이거나, 클락 주파수를 줄일 수 있다(S25). S23 또는 S25의 동작은 반도체 장치의 전체 전원이 오프될 때까지(S13) 반복적으로 수행되어, 장치 메모리에 공 급되는 전원은 일관성 상태에 따라 실시간으로 동적으로 조절될 수 있다. 전원 공급에 대해서는 이하 도 11 내 지 도 14에서 구체적으로 설명하기로 한다. 도 11 내지 도 14는 몇몇 실시예에 따라 반도체 장치의 전력 운영 정책을 설명하기 위한 개념도이다. 설명에 앞 서, 도 11 내지 도 14에서 좌측의 장치는 전력공급 변경 전의 반도체 장치를 나타낸 것이고, 우측의 장치는 전 력공급 변경 후의 반도체 장치를 나타낸 것이다. 설명의 편의를 위해 도 11 내지 도 14는 가속기 및 가속 기 메모리를 포함하는 반도체 메모리를 예시로 설명하나, 본 발명의 범위가 이에 한정되는 것은 아니고, 캐시 일관성이 적용되는 장치 메모리를 포함하는 모든 반도체 장치에 적용가능하다고 할 것이다. 몇몇 실시예에 따라 도 11 내지 도 14에 도시된 반도체 장치는 가속기와 장치 메모리를 포함하고, 도 시하지는 않았으나 도 1에서 설명한 바와 같이 장치 일관성 엔진(DCOH, 100)을 포함하여, 호스트 장치에 장 치 메모리의 일관성 상태를 공유할 수 있다. 몇몇 실시예에 따라 장치 메모리는 복수의 채널에 각각 연결되는 복수의 가속기 메모리를 포함할 수 있다. 도시된 예에서는 장치 메모리는 2개의 채널에 각각 연 결된 복수의 가속기 메모리를 가정한다. 도 11에서, 몇몇 실시예에 따라 가속기 메모리에 대한 쓰루풋(throughput)이 줄어드는 경우(또는 워크로드가 줄 어드는 경우), 즉 모든 채널의 가속기 메모리가 큰 용량의 데이터 액세스를 수행하다가 작은 용량의 데이터 액 세스가 되는 경우, 반도체 장치는 클락 주파수를 줄여서 장치 메모리에 대한 대역폭을 줄일 수 있다. 예를 들어 장치 메모리에 공급되는 클락의 주파수를 3200Mhz에서 1600Mhz로 줄일 수 있다. 도 12에서, 몇몇 실시예에 따라 Ch.0의 가속기 메모리와 Ch.1의 가속기 메모리가 모두 무효 상태(Invalid)일 수 있다. 그러나 일부 채널 Ch.0 의 가속기 메모리만 무효 상태이고 나머지 채널 중 거의 사용하지 않는 Ch.1의 가 속기 메모리가 있는 경우, 반도체 장치는 Ch.1의 가속기 메모리에 공급되는 클락 주파수를 차단하여 장치 메모리에 대한 소비 전력을 줄일 수 있다. 몇몇 실시예에 따라 반도체 장치는 복수의 가속기 메모리 각각에 대해 일관성 상태를 호스트 장치에 알려주 고, 각각의 일관성 상태에 따라 각 가속기 메모리에 대한 전력 공급을 독립적으로 조절할 수 있다. 도 13에서, 일 실시예에 따라 Ch.0의 가속기 메모리와 Ch.1의 가속기 메모리 중 일부만 무효 상태일 수 있다. 일부 채널 Ch.0의 가속기 메모리의 데이터는 유효 상태(독점, 공유 또는 수정 상태)이고 나머지 채널 Ch.1의 가 속기 메모리는 무효 상태인 경우, 일 실시예에 따라 반도체 장치는 Ch.1의 가속기 메모리에 공급되는 클락 주파수를 차단하여 장치 메모리에 대한 소비 전력을 줄일 수 있다. 또는 다른 실시예에 따라 반도체 장치 는 Ch.1의 가속기 메모리의 채널을 오프하여 장치 메모리에 대한 소비 전력을 줄일 수 있다. 도 14에서, 다른 실시예에 따라 Ch.0의 가속기 메모리 일부만 무효 상태(Invalid)가 아닌 유효 상태(Shared, Exclusive)라면, 무효 상태인 뱅크(Ch.1)만 리프레시 동작을 수행하고 Ch.0 가속기 메모리의 나머지 영역과 Ch.1 가속기 메모리는 리프레시 동작을 수행하지 않을 수 있다. 뱅크 리프레시 동작을 수행하는 메모리 영역이 줄 어드므로 장치 메모리의 소비 전력을 줄일 수 있다. 도 15는 본 개시의 다른 예시적인 실시예에 따른 시스템을 나타내는 블록도이다. 도 15를 참조하면, 시스템은 루트 컴플렉스와 이에 접속된 CXL 메모리 익스팬더 및 메모리(83 0)를 포함할 수 있다. 루트 컴플렉스는 홈 에이전트와 입출력 브릿지를 포함할 수 있고, 홈 에이전트는 메 모리 프로토콜(CXL.mem)을 기반으로 CXL 메모리 익스팬더와 통신할 수 있고, 입출력 브릿지는 비일관적 프 로토콜(CXL.io)을 기반으로 CXL 메모리 익스팬더와 통신할 수 있다. CXL 프로토콜 기반에서, 홈 에이전트 는 주어진 어드레스에 대해 시스템 전체의 일관성을 해결하기 위해 배치되는 호스트 측에서의 에이전트에 해당할 수 있다. CXL 메모리 익스팬더는 메모리 컨트롤러를 포함할 수 있고, 메모리 컨트롤러는 도 1 내지 도 14 를 통해 전술한 메모리 컨트롤러(도 2의 310)의 동작을 수행할 수 있다. 또한 본 개시의 실시예에 따르면, CXL 메모리 익스팬더는 데이터를 비일관적 프로토콜(CXL.io) 또는 이와 유사한 PCIe에 기반하여 입출력 브릿지를 통해 루트 컴플렉스로 출력할 수 있다. 한편, 메모리는 다수의 메모리 영역들(M1~Mn)을 포함할 수 있고, 메모리 영역들(M1~Mn) 각각은 다양한 단 위의 메모리로서 구현될 수 있다. 일 예로서, 메모리가 다수의 휘발성 또는 불휘발성 메모리 칩들을 포함 하는 경우, 상기 메모리 영역들(M1~Mn) 각각의 단위는 메모리 칩일 수 있다. 또는, 메모리 영역들(M1~Mn) 각각 의 단위는, 반도체 다이, 블록, 뱅크, 랭크 등 메모리에서 정의되는 다양한 사이즈에 상응하도록 메모리가 구현될 수도 있을 것이다. 한 실시예에 따르면, 다수의 메모리 영역들(M1~Mn)은 계층적(Hierarchical) 구조를 가질 수 있다. 예를 들어, 제1 메모리 영역(M1)은 상위 레벨 메모리이고, 제n 메모리 영역(Mn)은 하위 레벨 메모리일 수 있다. 상위 레벨 의 메모리일수록 상대적으로 작은 용량 및 빠른 응답 속도를 가질 수 있고, 하위 레벨의 메모리일수록 상대적으 로 큰 용량 및 느린 응답 속도를 가질 수 있다. 이러한 차이로 인해 메모리 영역 각각의 달성 가능한 최소 레이 턴시(또는 최대 레이턴시) 또는 최대 에러 정정 레벨은 서로 다를 수 있다. 따라서, 호스트는 각각의 메모리 영역(M1~Mn)마다 에러 정정 옵션을 설정할 수 있다. 이 경우 호스트는 복수의 에러 정정 옵션 설정 메시지를 메모리 컨트롤러에 전송할 수 있다. 각 에러 정정 옵션 설정 메시지는 기준 레이턴시, 기준 에러 정정 레벨 및 메모리 영역을 식별하는 식별자를 포함할 수 있다. 따라서 메모리 컨트롤러 는 에러 정정 옵션 설정 메시지의 메모리 영역 식별자를 확인하고, 각 메모리 영역(M1~Mn)마다 에러 정정 옵션을 설정할 수 있다. 다른 예로서, 독출하려는 데이터가 저장된 메모리 영역에 따라 가변 ECC 회로 또는 고정 ECC 회로가 에러 정정 동작을 수행할 수 있다. 예를 들어 중요도가 높은 데이터는 상위 레벨 메모리에 저장될 수 있고, 레이턴시보다 정확도에 가중치가 부여될 수 있다. 따라서 상위 레벨 메모리에 저장된 데이터는 가변 ECC 회로의 동작이 생략 되고, 고정 ECC 회로가 에러 정정 동작이 수행될 수 있다. 다른 예로서, 중요도가 낮은 데이터는 하위 레벨 메 모리에 저장될 수 있다. 하위 레벨 메모리에 저장된 데이터는 레이턴시에 가중치가 부여되어, 고정 ECC 회로에 의한 동작이 생략될 수 있다. 즉 독출 요청에 대해 곧바로 가변 ECC 회로에 의한 에러 정정 또는 에러 정정 동 작이 생략된 채로 독출된 데이터가 호스트에 전송될 수 있을 것이다. 데이터의 중요도 및 데이터가 저장된 메모 리 영역에 따라 선택적 및 병렬적 에러 정정 동작은 다양한 방식으로 수행될 수 있으며 전술한 실시예에 제한되 는 것은 아니다. 한편 메모리 영역 식별자는 메모리 컨트롤러의 응답 메시지에도 포함될 수 있다. 독출 요청 메시지는 독출 대상 데이터의 어드레스와 함께 메모리 영역 식별자를 포함할 수 있다. 응답 메시지는 독출된 데이터가 포함된 메모리 영역에 대한 메모리 영역 식별자를 포함할 수 있다. 도 16a 및 도 16b는 본 개시의 예시적인 실시예에 따른 시스템의 예시들을 나타내는 블록도이다. 구체적으로, 도 16a 및 도 16b의 블록도들은 다수의 CPU들을 포함하는 시스템들(900a, 900b)을 나타낸다. 이하 에서, 도 16a 및 도 16b에 대한 설명 중 상호 중복되는 내용은 생략될 수 있다. 도 16a를 참조하면, 시스템(900a)은, 제1 및 제2 CPU(11a, 21a)를 포함할 수 있고, 제1 및 제2 CPU(11a, 21a) 에 각각 연결된 제1 및 제2 DDR(Double Data Rate) 메모리(12a, 22a)를 포함할 수 있다. 제1 및 제2 CPU(11a, 21a)는 프로세서 상호 연결 기술에 기초한 상호연결 시스템(30a)을 통해서 연결될 수 있다. 도 16a에 도시된 바와 같이, 상호연결 시스템(30a)은, 적어도 하나의 CPU간(CPU-to-CPU) 일관적 링크를 제공할 수 있다. 시스템(900a)은, 제1 CPU(11a)와 통신하는 제1 입출력 장치(13a) 및 제1 가속기(14a)를 포함할 수 있고, 제1 가 속기(14a)에 연결된 제1 장치 메모리(15a)를 포함할 수 있다. 제1 CPU(11a) 및 제1 입출력 장치(13a)는 버스 (16a)를 통해서 통신할 수 있고, 제1 CPU(11a) 및 제1 가속기(14a)는 버스(17a)를 통해서 통신할 수 있다. 또한, 시스템(900a)은, 제2 CPU(21a)와 통신하는 제2 입출력 장치(23a) 및 제2 가속기(24a)를 포함할 수 있고, 제2 가속기(24a)에 연결된 제2 장치 메모리(25a)를 포함할 수 있다. 제2 CPU(21a) 및 제2 입출력 장치(23a)는 버스(26a)를 통해서 통신할 수 있고, 제2 CPU(21a) 및 제2 가속기(24a)는 버스(27a)를 통해서 통신할 수 있다. 버스들(16a, 17a, 26a, 27a)을 통해서 프로토콜에 기초한 통신이 수행될 수 있고, 프로토콜은 도면들을 참조하 여 전술된 선택적 및 병렬적 에러 정정 동작을 지원할 수 있다. 이에 따라, 메모리, 예컨대 제1 장치 메모리 (15a), 제2 장치 메모리(25a), 제1 DDR 메모리(12a) 및/또는 제2 DDR 메모리(22a)에 대해 에러 정정 동작에 소 요되는 레이턴시가 감소할 수 있고, 시스템(900a)의 성능이 향상될 수 있다. 도 16b를 참조하면, 시스템(900b)은, 도 16a의 시스템(900a)과 유사하게, 제1 및 제2 CPU(11b, 21b), 제1 및 제2 DDR 메모리(12b, 22b), 제1 및 제2 입출력 장치(13b, 23b) 및 제1 및 제2 가속기(14b, 24b)를 포함할 수 있는 한편, 원격 원거리 메모리를 더 포함할 수 있다. 제1 및 제2 CPU(11b, 21b)는, 상호연결 시스템(30b) 을 통해서 상호 통신할 수 있다. 제1 CPU(11b)는 버스들(16b, 17b)을 통해서 제1 및 제2 입출력 장치(13b, 23b)에 연결될 수 있고, 제2 CPU(21b)는 버스들(26b, 27b)을 통해서 제1 및 제2 가속기(14b, 24b)에 연결될 수 있다. 제1 및 제2 CPU(11b, 21b)는 제1 및 제2 버스(18, 28)를 통해서 원격 원거리 메모리에 연결될 수 있다. 원 격 원거리 메모리는, 시스템(900b)에서 메모리의 확장을 위하여 사용될 수 있고, 제1 및 제2 버스(18, 28) 는 메모리 확장 포트로서 사용될 수 있다. 버스들(16b, 17b, 26b, 27b)뿐만 아니라, 제1 및 제2 버스(18, 28)에 대응하는 프로토콜 또한 도면들을 참조하여 전술된 선택적 및 병렬적 에러 정정 동작을 지원할 수 있다. 이에 따라, 원격 원거리 메모리에 대해 에러 정정에 소요되는 레이턴시가 감소할 수 있고, 시스템(900b)의 성능 이 향상될 수 있다. 도 17는 본 개시의 예시적 실시예에 따른 시스템을 포함하는 데이터 센터를 나타내는 블록도이다. 일부 실시예들에서, 도면들을 참조하여 전술된 시스템은 어플리케이션 서버 및/또는 스토리지 서버로서 데이터 센터에 포함될 수 있다. 또한, 본 개시의 실시예들에 적용된 메모리 컨트롤러의 선택적 및 병렬적 에러 정정 동작과 관련된 실시예는 어플리케이션 서버 및/또는 스토리지 서버 각각에 적용될 수 있다. 도 17을 참조하면, 데이터 센터는 다양한 데이터를 수집하고 서비스를 제공할 수 있고, 데이터 스토리지 센 터로 지칭될 수도 있다. 예를 들면, 데이터 센터는 검색 엔진 및 데이터 베이스 운용을 위한 시스템일 수 있 고, 은행 등의 기업 또는 정부기관에서 사용되는 컴퓨팅 시스템일 수도 있다. 도 12에 도시된 바와 같이, 데이 터 센터는 어플리케이션 서버들(50_1 ~ 50_n) 및 스토리지 서버들(60_1 ~ 60_m)을 포함할 수 있다(m 및 n은 1보다 큰 정수). 어플리케이션 서버들(50_1 ~ 50_n)의 개수 n 및 스토리지 서버들(60_1 ~ 60_m)의 개수 m은 실 시예에 따라 다양하게 선택될 수 있고, 어플리케이션 서버들(50_1 ~ 50_n)의 개수 n 및 스토리지 서버들(60_1 ~ 60_m)의 개수 m은 상이할 수 있다. 어플리케이션 서버(50_1 ~ 50_n)는 프로세서(51_1 ~ 51_n), 메모리(52_1 ~ 52_n), 스위치(53_1 ~ 53_n), NIC(network interface controller)(54_1 ~ 54_n) 및 스토리지 장치(55_1 ~ 55_n) 중 적어도 하나를 포함할 수 있다. 프로세서(52_1 ~ 51_n)는 어플리케이션 서버(50_1 ~ 50_n)의 전반적인 동작을 제어할 수 있고, 메모리 (52_1 ~ 52_n)에 억세스하여 메모리(52_1 ~ 52_n)에 로딩된 명령어들(instructions) 및/또는 데이터를 실행할 수 있다. 메모리(52_1 ~ 52_n)는 비제한적인 예시로서, DDR SDRAM(Double Data Rate Synchronous DRAM), HBM(High Bandwidth Memory), HMC(Hybrid Memory Cube), DIMM(Dual In-line Memory Module), Optane DIMM 또 는 NVMDIMM(Non-Volatile DIMM)를 포함할 수 있다. 실시예에 따라, 어플리케이션 서버(50_1 ~ 50_n)에 포함되는 프로세서들의 개수 및 메모리들의 개수는 다양하게 선택될 수 있다. 일부 실시예들에서, 프로세서(51_1 ~ 51_n)와 메모리(52_1 ~ 52_n)는 프로세서-메모리 페어를 제공할 수 있다. 일부 실시예들에서, 프로세서(51_1 ~ 51_n)와 메모리(52_1 ~ 52_n)의 개수는 상이할 수 있다. 프로세서(51_1 ~ 51_n)는 단일 코어 프로세서 또는 다중 코어 프로세서를 포함할 수 있다. 일부 실시예들에서, 도 12에서 점선으로 도시된 바와 같이, 어플리케이션 서버(50_1 ~ 50_n)에서 스토리지 장치(55_1 ~ 55_n)는 생 략될 수도 있다. 스토리지 서버(50_1 ~ 50_n)에 포함되는 스토리지 장치(55_1 ~ 55_n)의 개수는 실시예에 따라다양하게 선택될 수 있다. 프로세서(51_1 ~ 51_n), 메모리(52_1 ~ 52_n), 스위치(53_1 ~ 53_n), NIC(54_1 ~ 54_n) 및/또는 스토리지 장치(55_1 ~ 55_n)는, 도면들을 참조하여 전술된 링크를 통해서 상호 통신할 수 있다. 스토리지 서버(60_1 ~ 60_m)는 프로세서(61_1 ~ 61_m), 메모리(62_1 ~ 62_m), 스위치(63_1 ~ 63_m), NIC(64_1 ~ 64_n) 및 스토리지 장치(65_1 ~ 65_m) 중 적어도 하나를 포함할 수 있다. 프로세서(61_1 ~ 61_m) 및 메모리 (62_1 ~ 62_m)는, 전술된 어플리케이션 서버(50_1 ~ 50_n)의 프로세서(51_1 ~ 51_n) 및 메모리(52_1 ~ 52_n)와 유사하게 동작할 수 있다. 어플리케이션 서버들(50_1 ~ 50_n) 및 스토리지 서버들(60_1 ~ 60_m)은 네트워크를 통해 상호 통신할 수 있 다. 일부 실시예들에서, 네트워크는 FC(Fibre Channel) 또는 이더넷(Ethernet) 등을 이용하여 구현될 수 있 다. FC는 상대적으로 고속의 데이터 전송에 사용되는 매체일 수 있고, 고성능/고가용성을 제공하는 광 스위치가 사용될 수 있다. 네트워크의 액세스 방식에 따라 스토리지 서버들(60_1 ~ 60_m)은 파일 스토리지, 블록 스 토리지, 또는 오브젝트 스토리지로서 제공될 수 있다. 일부 실시예들에서, 네트워크는 SAN(Storage Area Network)와 같은 스토리지 전용 네트워크일 수 있다. 예 를 들어, SAN은 FC 네트워크를 이용할 수 있고 FCP(FC Protocol)에 따라 구현된 FC-SAN일 수 있다. 다르게는, SAN은 TCP/IP 네트워크를 이용하고 iSCSI(SCSI over TCP/IP 또는 Internet SCSI) 프로토콜에 따라 구현된 IP- SAN일 수 있다. 일부 실시예들에서, 네트워크는 TCP/IP 네트워크와 같은 일반 네트워크일 수 있다. 예를 들 면, 네트워크는 FCoE(FC over Ethernet), NAS(Network Attached Storage), NVMe-oF(NVMe over Fabrics) 등의 프로토콜에 따라 구현될 수 있다. 이하에서, 어플리케이션 서버(50_1) 및 스토리지 서버(60_1)가 주로 설명되나, 어플리케이션 서버(50_1)에 대한 설명은 다른 어플리케이션 서버(예컨대, 50_n)에도 적용될 수 있고, 스토리지 서버(60_1)에 대한 설명은 다른 스토리지 서버(예컨대, 60_m)에도 적용될 수 있는 점이 유의된다. 어플리케이션 서버(50_1)는 사용자 또는 클라이언트가 저장을 요청한 데이터를 네트워크를 통해 스토리지 서버들(60_1 ~ 60_m) 중 하나에 저장할 수 있다. 또한, 어플리케이션 서버(50_1)는 사용자 또는 클라이언트가 독출을 요청한 데이터를 스토리지 서버들(60_1 ~ 60_m) 중 하나로부터 네트워크를 통해 획득할 수 있다. 예 를 들어, 어플리케이션 서버(50_1)는 웹 서버 또는 DBMS(Database Management System) 등으로 구현될 수 있다. 어플리케이션 서버(50_1)는 네트워크를 통해 다른 어플리케이션 서버(50_n)에 포함된 메모리(52_n) 및/또는 스토리지 장치(55_n)에 액세스할 수 있고, 그리고/또는 네트워크를 통해 스토리지 서버들(60_1 ~ 60_m)에 포함된 메모리들(62_1 ~ 62_m) 및/또는 스토리지 장치들(65_1 ~ 65_m)에 액세스할 수 있다. 이에 따라, 어플리 케이션 서버(50_1)는 어플리케이션 서버들(50_1 ~ 50_n) 및/또는 스토리지 서버들(60_1 ~ 60_m)에 저장된 데이 터에 대해 다양한 동작들을 수행할 수 있다. 예를 들어, 어플리케이션 서버(50_1)는 어플리케이션 서버들(50_1 ~ 50_n) 및/또는 스토리지 서버들(60_1 ~ 60_m) 사이에서 데이터를 이동시키거나 복사(copy)하기 위한 명령어를 실행할 수 있다. 이 때 데이터는 스토리지 서버들(60_1 ~ 60_m)의 스토리지 장치로(65_1 ~ 65_m)부터 스토리지 서버들(60_1 ~ 60_m)의 메모리들(62_1 ~ 62_m)을 통해서 또는 직접적으로 어플리케이션 서버들(50_1 ~ 50_n)의 메모리(52_1 ~ 52_n)로 이동될 수 있다. 일부 실시예들에서, 네트워크를 통해 이동하는 데이터는 보안 또는 프라이버시를 위해 암호화된 데이터일 수 있다. 스토리지 서버(60_1)에서, 인터페이스(IF)는 프로세서(61_1)와 컨트롤러(CTRL)의 물리적 연결 및 NIC(64_1)와 컨트롤러(CTRL)의 물리적 연결을 제공할 수 있다. 예를 들어, 인터페이스(IF)는 스토리지 장치(65_1)를 전용 케 이블로 직접 접속하는 DAS(Direct Attached Storage) 방식으로 구현될 수 있다. 또한, 예를 들어, 인터페이스 (IF)는 ATA(Advanced Technology Attachment), SATA(Serial ATA), e-SATA(external SATA), SCSI(Small Computer Small Interface), SAS(Serial Attached SCSI), PCI(Peripheral Component Interconnection), PCIe(PCI express), NVMe(NVM express), IEEE 1394, USB(universal serial bus), SD(secure digital) 카드, MMC(multi-media card), eMMC(embedded multi-media card), UFS(Universal Flash Storage), eUFS(embedded Universal Flash Storage), CF(compact flash) 카드 인터페이스 등과 같은 다양한 인터페이스 방식으로 구현될 수 있다. 스토리지 서버(60_1)에서, 스위치(63_1)는 프로세서(61_1)의 제어에 따라 프로세서(61_1)와 스토리지 장치 (65_1)를 선택적으로 접속시키거나, NIC(64_1)과 스토리지 장치(65_1)를 선택적으로 접속시킬 수 있다. 일부 실시예들에서, NIC(64_1)는 네트워크 인터페이스 카드, 네트워크 어댑터 등을 포함할 수 있다. NIC(54_1) 는 유선 인터페이스, 무선 인터페이스, 블루투스 인터페이스, 광학 인터페이스 등에 의해 네트워크에 연결될 수 있다. NIC(54_1)는 내부 메모리, DSP, 호스트 버스 인터페이스 등을 포함할 수 있으며, 호스트 버스 인터 페이스를 통해 프로세서(61_1) 및/또는 스위치(63_1) 등과 연결될 수 있다. 일부 실시예들에서, NIC(64_1)는 프 로세서(61_1), 스위치(63_1), 스토리지 장치(65_1) 중 적어도 하나와 통합될 수도 있다. 어플리케이션 서버(50_1 ~ 50_n) 또는 스토리지 서버(60_1 ~ 60_m)에서 프로세서(51_1 ~ 51_m, 61_1 ~ 61_n)는 스토리지 장치들(55_1 ~ 55_n, 65_1 ~ 65_m) 또는 메모리(52_1 ~ 52_n, 62_1 ~ 62_m)로 커맨드를 전송하여 데 이터를 프로그램하거나 리드할 수 있다. 이 때 데이터는 ECC(Error Correction Code) 엔진을 통해 에러 정정된 데이터일 수 있다. 데이터는 데이터 버스 변환(Data Bus Inversion: DBI) 또는 데이터 마스킹(Data Masking: DM) 처리된 데이터로서, CRC(Cyclic Redundancy Code) 정보를 포함할 수 있다. 데이터는 보안 또는 프라이버시 를 위해 암호화된 데이터일 수 있다. 스토리지 장치(55_1 ~ 55_n, 65_1 ~ 65_m)는 프로세서(51_1 ~ 51_m, 61_1 ~ 61_n)로부터 수신된 독출 커맨드에 응답하여, 제어 신호 및 커맨드/어드레스 신호를 비휘발성 메모리 장치(예컨대 NAND 플래시 메모리 장치)(NVM) 로 전송할 수 있다. 이에 따라 비휘발성 메모리 장치(NVM)로부터 데이터를 독출하는 경우, 독출 인에이블 신호 는 데이터 출력 제어 신호로 입력되어, 데이터를 DQ 버스로 출력하는 역할을 할 수 있다. 독출 인에이블 신호를 이용하여 데이터 스트로브 신호를 생성할 수 있다. 커맨드와 어드레스 신호는 기입 인에이블 신호의 상승 엣지 또는 하강 엣지에 따라 래치될 수 있다. 컨트롤러(CTRL)는 스토리지 장치(65_1)의 동작을 전반적으로 제어할 수 있다. 일 실시예에서, 컨트롤러(CTRL)는 SRAM(Static Random Access Memory)을 포함할 수 있다. 컨트롤러(CTRL)는 기입 커맨드에 응답하여 비휘발성 메 모리 장치(NVM)에 데이터를 기입할 수 있고, 또는 독출 커맨드에 응답하여 비휘발성 메모리 장치(NVM)로부터 데 이터를 독출할 수 있다. 예를 들어, 기입 커맨드 및/또는 독출 커맨드는 호스트, 예컨대 스토리지 서버(60_1) 내의 프로세서(61_1), 다른 스토리지 서버(60_m) 내의 프로세서(61_m) 또는 어플리케이션 서버(50_1 ~ 50_n) 내 의 프로세서(51_1 ~ 51_n)로부터 제공된 요청에 기초하여 생성될 수 있다. 버퍼(BUF)는 비휘발성 메모리 장치 (NVM)에 기입될 데이터 또는 비휘발성 메모리 장치(NVM)로부터 독출된 데이터를 임시 저장(버퍼링)할 수 있다. 일부 실시예들에서 버퍼(BUF)는 DRAM을 포함할 수 있다. 또한, 버퍼(BUF)는 메타 데이터를 저장할 수 있고, 메 타 데이터는 사용자 데이터 또는 비휘발성 메모리 장치(NVM)를 관리하기 위해 컨트롤러(CTRL)에서 생성된 데이 터를 지칭할 수 있다. 스토리지 장치(65_1)는 보안 또는 프라이버시를 위해 SE(Secure Element)를 포함할 수 있 다. 이상에서와 같이 도면과 명세서에서 예시적인 실시예들이 개시되었다. 본 명세서에서 특정한 용어를 사용하여 실시예들을 설명되었으나, 이는 단지 본 개시의 기술적 사상을 설명하기 위한 목적에서 사용된 것이지 의미 한"}
{"patent_id": "10-2020-0150268", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "정이나 특허청구범위에 기재된 본 개시의 범위를 제한하기 위하여 사용된 것은 아니다. 그러므로 본 기술분야의 통상의 지식을 가진 자라면 이로부터 다양한 변형 및 균등한 타 실시예가 가능하다는 점을 이해할 것이다. 따라 서, 본 개시의 진정한 기술적 보호범위는 첨부된 특허청구범위의 기술적 사상에 의해 정해져야 할 것이다."}
{"patent_id": "10-2020-0150268", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 몇몇 실시예에 따라 호스트와 연결된 반도체 장치를 나타낸 블록도이다. 도 2는 몇몇 실시예에 따라 호스트와 연결된 반도체 장치를 나타낸 블록도이다. 도 3은 반도체 장치에 포함된 메모리의 일관성 상태(Coherency State)를 설명하기 위한 도면이다. 도 4 내지 도 7은 도 3의 일관성 상태를 나타내는 메타 데이터를 설명하기 위한 테이블이다. 도 8 및 도 9는 몇몇 실시예에 따라 호스트 장치와 반도체 장치 간의 동작을 설명하기 위한 흐름도이다. 도 10은 몇몇 실시예에 따라 호스트 장치와 반도체 장치 간의 동작을 설명하기 위한 흐름도이다. 도 11 내지 도 14는 몇몇 실시예에 따라 반도체 장치의 전력 공급을 설명하기 위한 개념도이다. 도 15는 본 개시의 다른 예시적인 실시예에 따른 시스템을 나타내는 블록도이다. 도 16a 및 도 16b는 본 개시의 예시적인 실시예에 따른 시스템의 예시들을 나타내는 블록도이다. 도 17은 본 개시의 예시적 실시예에 따른 시스템을 포함하는 데이터 센터를 나타내는 블록도이다."}
