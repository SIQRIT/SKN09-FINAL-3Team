{"patent_id": "10-2022-0000422", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0091737", "출원번호": "10-2022-0000422", "발명의 명칭": "파일 탐색을 위한 전자 장치의 동작 방법 및 그 전자 장치", "출원인": "삼성전자주식회사", "발명자": "서성종"}}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "원본 파일을 수신하는 통신 인터페이스; 메모리; 및 프로세서를 포함하고, 상기 프로세서는 상기 원본 파일의 파일명에 포함된 대소문자에 대응하는 비트 정보를 생성하고, 상기 원본 파일의 파일명을 제1유형의 문자들로 표현한 CI(case insensitive) 파일명을 생성하고, 상기 CI 파일명을 암호화하고, 상기 암호화한 CI 파일명에 대응하는 제1 해시 값을 산출하며, 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이,상기 제1 해시 값, 및 상기 비트 정보 중 적어도 하나를 포함하는 파일명 메타데이터를 상기 메모리에기록하며, 상기 파일명 메타데이터를 기초로, 탐색하고자 하는 타겟 파일을 탐색하는,전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 프로세서는 상기 원본 파일의 파일명에 포함된 대문자의 위치에 대응하여 제1 비트값을 할당하고, 상기 원본 파일의 파일명에 포함된 소문자의 위치에 대응하여 제2 비트값을 할당함으로써 상기 비트 정보를 생성하는,전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 제1 유형의 문자들은 대문자들 및 소문자들 중 어느 하나를 포함하는, 전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 프로세서는 상기 파일명 메타데이터를 상기 파일명 메타데이터의 속성 별로 상기 메모리에서 상이한 메타데이터 영역에 기록하거나, 또는 상기 파일명 메타데이터를 상기 메모리에서 동일한 메타데이터 영역에 저장하는, 전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서, 상기 프로세서는 상기 파일명 메타데이터 중 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이, 및 상기 제1 해시 값을상기 원본 파일의 디렉토리 엔트리 영역에 기록하고, 상기 파일명 메타데이터 중 상기 비트 정보를 상기 원본 파일의 파일 속성을 저장하는 공간 또는 추가 속성공개특허 10-2023-0091737-3-(extra attributes) 공간에 분리하여 기록하는,전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 프로세서는 상기 타겟 파일의 파일명을 제1 유형의 문자들로 표현한 제2 CI 파일명을 생성하고, 상기 제2 CI 파일명을 암호화하고, 상기 암호화한 제2 CI 파일명에 대응하는 제2 해시 값을 산출하고, 상기 제1 해시 값과 상기 제2 해시 값 간의 일치 여부를 제1 비교하며, 상기 제1 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는,전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서, 상기 프로세서는 상기 제1 비교 결과가 일치하는 경우, 상기 메모리에 기록된 상기 암호화한 CI 파일명과 상기 암호화한 제2 CI파일명 간의 파일명 길이 및 문자열의 일치 여부를 제2 비교하고, 상기 제2 비교 결과에 기초하여, 상기 타겟파일을 탐색하는, 전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 프로세서는 상기 제2 비교 결과가 일치하는 경우, 상기 원본 파일의 파일명을 복원하고, 상기 제2 비교 결과가 일치하지 않는 경우, 상기 메모리에 저장된 나머지 파일명들에 대응하는 해시 값들과 상기 제2 해시 값의 일치 여부를 반복적으로 비교하는, 전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 제2 비교 결과가 일치하는 경우, 상기 프로세서는 상기 비트 정보를 기초로, 상기 비트 정보에 포함된 비트들의 순서에 해당하는 상기 CI 파일명의 문자를 상기비트 정보에 따라 대문자 또는 소문자로 변환함으로써, 상기 원본 파일의 파일명을 복원하는, 전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서, 상기 제2 비교 결과가 일치하지 않는 경우, 상기 프로세서는 상기 해시 값들 중 어느 하나의 제3 해시 값과 상기 제2 해시 값이 일치하는 경우, 상기 제3 해시 값에 대응하는 암호화한 제3 CI 파일명과 상기 암호화한 제2 CI 파일명 간의 파일명 길이 및 문자열의 일치 여부를 제3 비교하는, 전자 장치."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "원본 파일의 파일명에 포함된 대소문자에 대응하는 비트 정보를 생성하는 동작;공개특허 10-2023-0091737-4-상기 원본 파일의 파일명을 제1 유형의 문자들로 표현한 CI 파일명을 생성하는 동작;상기 CI 파일명을 암호화하는 동작;상기 암호화한 CI 파일명에 대응하는 제1 해시 값을 산출하는 동작; 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이, 상기 제1 해시 값, 및 상기 비트 정보 중 적어도하나를 포함하는 파일명 메타데이터를 메모리에 기록하는 동작; 및 상기 파일명 메타데이터를 기초로, 탐색하고자 하는 타겟 파일을 탐색하는 동작을 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 상기 비트 정보를 생성하는 동작은상기 원본 파일의 파일명에 포함된 대문자의 위치에 대응하여 제1 비트값을 할당하고, 상기 원본 파일의 파일명에 포함된 소문자의 위치에 대응하여 제2 비트값을 할당함으로써 상기 비트 정보를 생성하는 동작을 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서, 상기 제1 유형의 문자들은 대문자들 및 소문자들 중 어느 하나를 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제11항에 있어서, 상기 파일명 메타데이터를 메모리에 기록하는 동작은 상기 파일명 메타데이터를 상기 파일명 메타데이터의 속성 별로 상기 메모리에서 상이한 메타데이터 영역에 기록하는 동작; 및 상기 파일명 메타데이터를 상기 메모리에서 동일한 메타데이터 영역에 저장하는 동작을 더 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서, 상기 파일명 메타데이터 중 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이, 및 상기 제1 해시 값을상기 원본 파일의 디렉토리 엔트리 영역에 기록하는 동작; 및 상기 파일명 메타데이터 중 상기 비트 정보를 상기 원본 파일의 아이-노드 공간 또는 추가 속성 공간에 분리하여 기록하는 동작 중 적어도 하나를 더 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서, 상기 타겟 파일을 탐색하는 동작은 상기 타겟 파일의 파일명을 제1 유형의 문자들로 표현한 제2 CI 파일명을 생성하는 동작;상기 제2 CI 파일명을 암호화하는 동작;공개특허 10-2023-0091737-5-상기 암호화한 제2 CI 파일명에 대응하는 제2 해시 값을 산출하는 동작; 상기 제1 해시 값과 상기 제2 해시 값 간의 일치 여부를 제1 비교하는 동작; 및 상기 제1 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작을 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서, 상기 제1 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작은 상기 제1 비교 결과가 일치하는 경우, 상기 메모리에 기록된 상기 암호화한 CI 파일명과 상기 암호화한 제2 CI파일명 간의 파일명 길이 및 문자열의 일치 여부를 제2 비교하는 동작; 및 상기 제2 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작을 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서, 상기 제2 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작은 상기 제2 비교 결과가 일치하는 경우, 상기 비트 정보를 기초로, 상기 비트 정보에 포함된 비트들의 순서에 해당하는 상기 CI 파일명의 문자를, 상기 비트 정보에 따라 대문자 또는 소문자로 변환함으로써 상기 원본 파일의파일명을 복원하는 동작을 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제17항에 있어서, 상기 제2 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작은 상기 제2 비교 결과가 일치하지 않는 경우, 상기 메모리에 저장된 나머지 파일명들에 대응하는 해시 값들과 상기 제2 해시 값의 일치 여부를 반복적으로 비교하는 동작을 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0000422", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "하드웨어와 결합되어 제11항 내지 제19항 중 어느 하나의 항의 방법을 실행시키기 위하여 컴퓨터 판독 가능한기록매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2022-0000422", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예에 따른 전자 장치는 원본 파일을 수신하는 통신 인터페이스, 메모리, 및 프로세서를 포함할 수 있다. 여기서, 프로세서는 원본 파일의 파일명에 포함된 대소문자에 대응하는 비트 정보를 생성할 수 있다. 프로세서 는 원본 파일의 파일명을 제1 유형의 문자들로 표현한 CI 파일명을 생성할 수 있다. 프로세서는 CI 파일명을 암 호화하고, 암호화한 CI 파일명에 대응하는 제1 해시 값을 산출할 수 있다. 프로세서는 암호화된 CI 파일명, 암 호화된 CI 파일명의 길이, 제1 해시 값, 및 비트 정보 중 적어도 하나를 포함하는 파일명 메타데이터를 메모리에 기록할 수 있다. 프로세서는 파일명 메타데이터를 기초로, 탐색하고자 하는 타겟 파일을 탐색할 수 있다."}
{"patent_id": "10-2022-0000422", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래의 개시는 파일 탐색을 위한 전자 장치의 동작 방법 및 그 전자 장치에 관한 것이다."}
{"patent_id": "10-2022-0000422", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "일반적으로 파일 시스템이 파일명을 취급하는 방식은 크게 2가지로 구분할 수 있다. 그 중 하나는 파일명들의 대소문자가 다른 경우에 대소문자를 구분하여 서로 다른 파일들로 인식하는 CE(case exact) 방식이고, 다른 하 나는 파일명들의 대소문자가 다른 경우에 대소문자를 구분하지 않고 서로 같은 파일로 인식하는 CI(Case insensitive) 방식이다. 예를 들어, 모바일 장치의 파일 시스템이 영구 저장 장치에 기록되는 사용자 파일을 보호하기 위해 파일명을 암호화하는 경우, 파일명을 취급하는 방식에 따라 파일명을 비교하여 방식 및 파일 시"}
{"patent_id": "10-2022-0000422", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "스템의 처리 동작이 달라질 수 있다.발명의 내용"}
{"patent_id": "10-2022-0000422", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "예를 들어, CI 방식으로 처리된 파일명의 비교를 위해서는 원본 파일의 파일명을 소문자 또는 대문자와 같이 어 느 한 유형의 문자로 변환하는 과정이 수행될 수 있다. 또한 CI 방식으로 암호화된 파일명을 비교하기 위해서 는 복호화 과정이 수행될 수 있다. 이와 같은 CI 방식으로 파일명을 처리하는 경우, 파일명 변환 및 비교에 많 은 프로세싱 자원이 이용되어 비용이 비싸 지므로 해시 값을 활용하여 비용을 줄이는 한편, 암호화된 파일의 탐 색 성능을 향상시킬 수 있다. 일반적인 파일 시스템 정합성 검사는 암호화 키를 입력 받지 않은 상태에서 동작하기 때문에, 해시 값의 계산을 위해 파일명 복호화가 필요한 경우, 해시 값의 손상 여부를 판단할 수 없기 때문에 해시 값에 대한 검사를 모두 스킵(skip)할 수 있다. 만약 hash값이 손상된 경우, 실제 파일이 저장소(storage)에 저장되어 있음에도 불구 하고, 영구적으로 탐색할 수 없어 데이터가 유실될 수 있다. 또한, 해시 값들 간의 충돌이 자주 발생하는 경우, CE 파일명에 대한 암호화된 이름인 온 디스크(on disk) 파일명에 대한 복호화 및 CI파일명 변환이 반복적 으로 수행될 수 있다. 다양한 실시예들은, 원본 파일의 암호화된 CI 파일명에 대한 해시 값을 사용하여 암호화 키가 없이도 온-디스크 (on-disk)에 저장된 파일명으로 해시 값을 계산할 수 있다. 다양한 실시예들은, 원본 파일의 암호화된 CI 파일명에 대한 해시 값을 사용하여 암호화 키 없이 파일명에 대한 해시 값의 손상을 감지하고, 손상된 해시 값을 복원할 수 있다."}
{"patent_id": "10-2022-0000422", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따르면, 전자 장치는 원본 파일을 수신하는 통신 인터페이스, 메모리, 및 프로세서를 포함하고, 상 기 프로세서는 상기 원본 파일의 파일명에 포함된 대소문자에 대응하는 비트 정보를 생성하고, 상기 원본 파일 의 파일명을 제1 유형의 문자들로 표현한 CI(case insensitive) 파일명을 생성하고, 상기 CI 파일명을 암호화하 고, 상기 암호화한 CI 파일명에 대응하는 제1 해시 값을 산출하며, 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이, 상기 제1 해시 값, 및 상기 비트 정보 중 적어도 하나를 포함하는 파일명 메타데이터를 상기 메 모리에 기록하며, 상기 파일명 메타데이터를 기초로, 탐색하고자 하는 타겟 파일을 탐색할 수 있다. 일 실시예에 따르면, 전자 장치의 동작 방법은 원본 파일의 파일명에 포함된 대소문자에 대응하는 비트 정보를 생성하는 동작, 상기 원본 파일의 파일명을 제1 유형의 문자들로 표현한 CI 파일명을 생성하는 동작, 상기 CI 파일명을 암호화하는 동작, 상기 암호화한 CI 파일명에 대응하는 제1 해시 값을 산출하는 동작, 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이, 상기 제1 해시 값, 및 상기 비트 정보 중 적어도 하나를 포함하는 파일명 메타데이터를 메모리에 기록하는 동작, 및 상기 파일명 메타데이터를 기초로, 탐색하고자 하는 타겟 파 일을 탐색하는 동작을 포함할 수 있다."}
{"patent_id": "10-2022-0000422", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "일 실시예에 따른 전자 장치는 원본 파일명을 CI파일명과 원본 파일명에 포함된 대소문자에 대응하는 비트 정보 로 분리 저장함으로써 원본 파일명을 다시 복원할 수 있을 뿐만 아니라, 아래와 같이 탐색 성능 및 신뢰성을 향 상시킬 수 있다. 일 실시예에 따른 전자 장치는 해시 값들이 충돌되는 상황에서 추가적인 복호화 비용없이 탐색 성능을 개선할 수 있다. 일 실시예에 따른 전자 장치는 원본 파일의 암호화된 CI 파일명에 대한 해시 값을 사용하여 파일명에 대한 탐색 성능을 보장할 수 있다. 일 실시예에 따른 전자 장치는 암호화 키가 없더라도 저장 장치에 저장된 암호화된 CI 파일명으로 해시 값을 계 산함으로써 파일명 메타데이터에 포함된 해시 값의 손상 여부를 감지하고, 손상된 해시 값을 복구할 수 있다. 일 실시예에 따른 전자 장치는 원본 파일의 파일명에 대한 대소문자 정보를 파일명과 분리하여 저장함으로써 원 본 파일의 파일명에 대한 키 값을 통한 복호화 과정을 수행하지 않고도 해시 값의 손상을 감지하고, 손상된 해 시 값을 복구하여 복원 안정성을 향상시킬 수 있다. 이 외에, 본 문서를 통해 직접적 또는 간접적으로 파악되는 다양한 효과들이 제공될 수 있다."}
{"patent_id": "10-2022-0000422", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다.연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외 부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가 적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상 기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전 자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제 공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용 한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2은 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 일실시예에 따르면, 프로그램은 전자 장치의 하나 이상의 리소스들을 제어하기 위한 운영 체제, 미들웨어, 또는 상기 운영 체제 에서 실행 가능한 어플리케이션을 포함할 수 있다. 운영 체제는, 예를 들면, AndroidTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 프로그램 중 적어도 일부 프로그 램은, 예를 들면, 제조 시에 전자 장치에 프리로드되거나, 또는 사용자에 의해 사용 시 외부 전자 장치(예: 전자 장치(102 또는 104), 또는 서버)로부터 다운로드되거나 갱신 될 수 있다. 운영 체제는 전자 장치의 하나 이상의 시스템 리소스들(예: 프로세스, 메모리, 또는 전원)의 관리(예: 할당 또는 회수)를 제어할 수 있다. 운영 체제는, 추가적으로 또는 대체적으로, 전자 장치 의 다른 하드웨어 디바이스, 예를 들면, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 구동하기 위한 하나 이상의 드라이 버 프로그램들을 포함할 수 있다. 미들웨어는 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보가 어플리케이션 에 의해 사용될 수 있도록 다양한 기능들을 어플리케이션으로 제공할 수 있다. 미들웨어는, 예를 들 면, 어플리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매니 저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니저, 로케이션 매니저, 그래픽 매니저, 시큐리티 매니저, 통화 매니저, 또는 음성 인식 매니저 를 포함할 수 있다. 어플리케이션 매니저는, 예를 들면, 어플리케이션의 생명 주기를 관리할 수 있다. 윈도우 매니저 는, 예를 들면, 화면에서 사용되는 하나 이상의 GUI 자원들을 관리할 수 있다. 멀티미디어 매니저는, 예를 들면, 미디어 파일들의 재생에 필요한 하나 이상의 포맷들을 파악하고, 그 중 선택된 해당하는 포맷에 맞 는 코덱을 이용하여 상기 미디어 파일들 중 해당하는 미디어 파일의 인코딩 또는 디코딩을 수행할 수 있다. 리소스 매니저는, 예를 들면, 어플리케이션의 소스 코드 또는 메모리의 메모리의 공간을 관리할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량, 온도 또는 전원을 관리하고, 이 중 해당 정보를 이용하여 전자 장치의 동작에 필요한 관련 정보를 결정 또는 제공할 수 있다. 일실시예에 따르면, 파워 매 니저는 전자 장치의 바이오스(BIOS: basic input/output system)(미도시)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 어플리케이션에 의해 사용될 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 패키지 매니저는, 예를 들면, 패키지 파일의 형태로 배포되는 어플리케이션의 설치 또는 갱신을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 전자 장치와 외부 전자 장치 간의 무선 연 결 또는 직접 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 지정된 이벤트(예: 착신 통화, 메시지, 또는 알람)의 발생을 사용자에게 알리기 위한 기능을 제공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치의 위치 정보를 관리할 수 있다. 그래픽 매니저는, 예를 들면, 사용자에게 제공될 하 나 이상의 그래픽 효과들 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 시큐리티 매니저는, 예를 들면, 시스템 보안 또는 사용자 인증을 제공할 수 있다. 통화(telephony) 매니저 는, 예를 들면, 전자 장치에 의해 제공되는 음성 통화 기능 또는 영상 통화 기능을 관리할 수 있다. 음성 인식 매니저는, 예를 들면, 사용자의 음성 데이터를 서버로 전송하고, 그 음성 데이터에 적어도 일부 기반하여 전자 장치에서 수행될 기능에 대응하는 명령어(command), 또는 그 음성 데이터에 적어도 일 부 기반하여 변환된 문자 데이터를 서버로부터 수신할 수 있다. 일 실시예에 따르면, 미들웨어는 동 적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. 일 실시예에 따르면, 미들웨 어의 적어도 일부는 운영 체제의 일부로 포함되거나, 또는 운영 체제와는 다른 별도의 소프트웨 어로 구현될 수 있다. 어플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브라우 저, 카메라, 알람, 컨택트, 음성 인식, 이메일, 달력, 미디어 플레이어 , 앨범, 와치, 헬스(예: 운동량 또는 혈당과 같은 생체 정보를 측정), 또는 환경 정보 (예: 기압, 습도, 또는 온도 정보 측정) 어플리케이션을 포함할 수 있다. 일실시예에 따르면, 어플리케이 션은 전자 장치와 외부 전자 장치 사이의 정보 교환을 지원할 수 있는 정보 교환 어플리케이션(미도 시)을 더 포함할 수 있다. 정보 교환 어플리케이션은, 예를 들면, 외부 전자 장치로 지정된 정보 (예: 통화, 메 시지, 또는 알람)를 전달하도록 설정된 노티피케이션 릴레이 어플리케이션, 또는 외부 전자 장치를 관리하도록 설정된 장치 관리 어플리케이션을 포함할 수 있다. 노티피케이션 릴레이 어플리케이션은, 예를 들면, 전자 장치 의 다른 어플리케이션(예: 이메일 어플리케이션)에서 발생된 지정된 이벤트(예: 메일 수신)에 대응하 는 알림 정보를 외부 전자 장치로 전달할 수 있다. 추가적으로 또는 대체적으로, 노티피케이션 릴레이 어플리케 이션은 외부 전자 장치로부터 알림 정보를 수신하여 전자 장치의 사용자에게 제공할 수 있다. 장치 관리 어플리케이션은, 예를 들면, 전자 장치와 통신하는 외부 전자 장치 또는 그 일부 구성 요소(예: 외부 전자장치의 디스플레이 모듈 또는 카메라 모듈)의 전원(예: 턴-온 또는 턴-오프) 또는 기능(예: 밝기, 해 상도, 또는 포커스)을 제어할 수 있다. 장치 관리 어플리케이션은, 추가적으로 또는 대체적으로, 외부 전자 장 치에서 동작하는 어플리케이션의 설치, 삭제, 또는 갱신을 지원할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정 되지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이 템에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복 수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구 들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제1\", \"제2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분 하기 위해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제1) 구성요소가 다른(예: 제2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직 접적으로(예: 유선으로), 무선으로, 또는 제3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일 실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 도 1의 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, '비일시적'은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD- ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치 들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우 에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메 모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실 시예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이 상의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모 듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소 들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의 해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다. 도 3은 일 실시예에 따른 전자 장치의 블록도이다. 도 3을 참조하면, 일 실시예에 따른 전자 장치(예: 도 1의 전자 장치)는 통신 인터페이스(예: 도 1의 통신 모듈), 프로세서(예: 도 1의 프로세서 ) 및 메모리(예: 도 1의 메모리)를 포함할 수 있다. 통신 인터페이스, 프로세서 및 메모리는 통신 버스(미도시)를 통해 서로 연결될 수 있다. 통신 인터페이스는 원본 파일을 수신할 수 있다. 원본 파일은 예를 들어, 전자 장치의 운용 체제(예: 도 1 및 도 2의 운영 체제)가 포함하는 파일 시스템(예: 도 6의 파일 시스템)을 통해 메모리 또는 저장 장치(예: 도 6의 저장 장치)에 저장하고자 하는 파일이거나, 검색 또는 검사하고자 하는 파일일 수 있으며, 반드시 이에 한정되지는 않는다. 프로세서는 원본 파일의 파일명에 포함된 대소문자에 대응하는 비트 정보를 생성할 수 있다. 프로세서 는 예를 들어, 원본 파일의 파일명에 포함된 대문자의 위치에 대응하여 제1 비트값을 할당하고, 원본 파일 의 파일명에 포함된 소문자의 위치에 대응하여 제2 비트값을 할당함으로써 비트 정보를 생성할 수 있다. 예를 들어, 제1 비트값은 '1'이고, 제2 비트값은 '0'일 수 있다. 또는 이와 반대로 제1 비트값은 '0'이고, 제2 비트값은 '1'일 수도 있다. 이하, 설명의 편의를 위하여 원본 파일의 파일명을 '원본 파일명'과 같이 표현할 수도 있다. 프로세서는 원본 파일의 파일명을 제1 유형의 문자들로 표현한 CI(case insensitive) 파일명을 생성할 수 있다. 제1 유형의 문자들은 예를 들어, 대문자들 및 소문자들 중 어느 하나를 포함할 수 있다. 여기서, 'CI 파일명'은 원 본 파일명이 대문자 또는 소문자와 같은 어느 한 유형의 문자열들로 변환된 파일명에 해당할 수 있다. 프로세서는 CI 파일명을 암호화할 수 있다. 프로세서는 알려진 다양한 암호화 알고리즘에 의해 CI 파일명을 암호화할 수 있다. 암호화 알고리즘은 예를 들어, 블록 암호화 알고리즘, 및 스트림 암호화 알고리즘 을 포함할 수 있으며, 반드시 이에 한정되지는 않는다. 프로세서는 암호화한 CI 파일명에 대응하는 제1 해시 값을 산출할 수 있다. 제1 해시 값은 예를 들어, 제 1 해시 함수에 의해 산출된 것일 수 있다. '해시 함수(hash function)'는 임의의 길이를 갖는 데이터를 고정된 길이의 데이터로 매핑하는 함수에 해당할 수 있다. 해시 함수는 '해시 알고리즘' 또는 '해시 생성기'라고 불릴 수도 있다. 이때, 해시 맵핑 전 원래 데이터의 값을 '키(key)'라고 부르고, 맵핑 후 데이터의 값을 '해시 값(hash value)' 이라 부를 수 있다. 예를 들어, '해시 값'은 해시 함수를 적용하여 산출된 고정된 길이의 데이터의 값에 해당 할 수 있다. 해시 함수는 종류가 다양하고 해시 함수마다 해시 값의 길이가 다를 수 있다. 해시 값은 해시 코 드, 또는 해시 썸(sum)이라고 불릴 수도 있다. 프로세서는 암호화된 CI 파일명, 암호화된 CI 파일명의 길이, 제1 해시 값, 및 비트 정보 중 적어도 하나 를 포함하는 파일명 메타데이터를 메모리에 기록할 수 있다. 프로세서가 파일명을 기록하는 과정 및 파일명을 검색하는 실시예는 아래의 도 4를 참조하여 보다 구체적으로 설명한다. 프로세서는 예를 들어, 파일명 메타데이터를 속성 또는 항목 별로 메모리에서 상이한 메타데이터 영 역에 기록하거나, 또는 파일명 메타데이터를 메모리에서 동일한 메타데이터 영역에 저장할 수 있다. 이하 에서, 메모리는 예를 들어, 파일 시스템을 위해 마련된 메모리의 일정 저장 공간일 수도 있으며, 클 라우드 서버 또는 외장 하드와 같은 별도의 저장 장치를 모두 포괄하는 의미로 이해될 수 있다. 파일 시스템 의 일 실시예에 대하여는 아래의 도 6을 참조하여 보다 구체적으로 설명한다. 예를 들어, 프로세서는 파일명 메타데이터 중 암호화된 CI 파일명, 암호화된 CI 파일명의 길이, 및 제1 해 시 값을 원본 파일의 디렉토리 엔트리 영역에 기록할 수 있다. 또한, 프로세서는 파일명 메타데이터 중 비트 정보를 원본 파일의 파일 속성을 저장하는 공간(예: 아이-노드(i-node) 공간) 또는 추가 속성(extra attributes) 공간에 분리하여 기록할 수 있다. 파일 속성을 저장하는 공간 또는 추가 속성(extra attributes) 공간의 일 실시예에 대하여는 아래의 도 5를 참조하여 보다 구체적으로 설명한다. 프로세서는 메모리에 기록된 파일명 메타데이터를 기초로, 탐색하고자 하는 타겟 파일을 탐색할 수 있다. 여기서, '메타데이터'는 데이터에 대한 구조화된 정보를 분석, 분류하고 부가적 정보를 추가하기 위해 데이터에 따라가는 정보, 예를 들어, 데이터를 위한 데이터에 해당할 수 있다. '파일명 메타데이터'는 파일명 을 효율적으로 찾아내서 이용하기 위해 일정한 규칙에 따라 파일명에 부여되는 데이터로 이해될 수 있다. 파일 명 메타데이터의 일 예시는 아래의 도 8a를 참조하여 보다 구체적으로 설명한다. 프로세서는 타겟 파일의 파일명을 제1 유형의 문자들로 표현한 제2 CI 파일명을 생성할 수 있다. 프로세서는 제2 CI 파일명을 암 호화할 수 있다. 프로세서는 암호화한 제2 CI 파일명에 대응하는 제2 해시 값을 산출할 수 있다. 프로세 서는 제1 해시 값과 제2 해시 값 간의 일치 여부를 제1 비교할 수 있다. 프로세서는 제1 비교 결과에 기초하여, 타겟 파일을 탐색할 수 있다. 예를 들어, 제1 비교 결과가 일치하는 경우, 프로세서는 메모리에 기록된 암호화한 CI 파일명과 암호 화한 제2 CI 파일명 간의 파일명 길이 및 문자열의 일치 여부를 제2 비교할 수 있다. 프로세서는 제2 비 교 결과에 기초하여, 타겟 파일을 탐색할 수 있다. 예를 들어, 제2 비교 결과가 일치하는 경우, 프로세서(33 0)는 원본 파일의 파일명을 복원할 수 있다. 제2 비교 결과가 일치하는 경우, 프로세서는 비트 정보를 기 초로, 비트 정보에 포함된 비트들의 순서에 해당하는 CI 파일명의 문자를 비트 정보에 따라 대문자 또는 소문자 로 변환함으로써, 원본 파일의 파일명을 복원할 수 있다. 이와 달리, 제2 비교 결과가 일치하지 않는 경우, 프로세서는 메모리에 저장된 나머지 파일명들에 대 응하는 해시 값들과 제2 해시 값의 일치 여부를 반복적으로 비교할 수 있다. 제2 비교 결과가 일치하지 않는경우, 프로세서는 해시 값들의 일치 여부를 반복적으로 비교할 수 있다. 프로세서는 해시 값들 중 어느 하나의 제3 해시 값과 제2 해시 값이 일치하는 경우, 제3 해시 값에 대응하는 암호화한 제3 CI 파일명과 암호화한 제2 CI 파일명 간의 파일명 길이 및 문자열의 일치 여부를 제3 비교할 수 있다. 프로세서가 탐 색 파일을 탐색하는 방법의 다양한 실시예들은 아래의 도 9 및 도 10을 참조하여 보다 구체적으로 설명한다. 메모리는 프로세서가 생성한 파일명 메타데이터를 저장할 수 있다. 이때, 파일명 메타데이터는 통신 인터페이스를 통해 수신한 원본 파일에 대응한 것일 수 있다. 또한, 프로세서는 도 1 내지 도 11을 통해 전술한 적어도 하나의 방법 또는 적어도 하나의 방법에 대응되 는 기법을 수행할 수 있다. 프로세서는 목적하는 동작들(desired operations)을 실행시키기 위한 물리적 인 구조를 갖는 회로를 가지는 하드웨어로 구현된 최적화 장치일 수 있다. 예를 들어, 목적하는 동작들은 프로 그램에 포함된 코드(code) 또는 인스트럭션들(instructions)을 포함할 수 있다. 예를 들어, 하드웨어로 구현된 전자 장치는 마이크로프로세서(microprocessor), 중앙 처리 장치(Central Processing Unit; CPU), 그래픽 처리 장치(Graphic Processing Unit; GPU), 프로세서 코어(processor core), 멀티-코어 프로세서(multi-core processor), 멀티프로세서(multiprocessor), ASIC(Application-Specific Integrated Circuit), FPGA(Field Programmable Gate Array), NPU(Neural Processing Unit) 등을 포함할 수 있다. 메모리는 적어도 하나의 프로그램을 저장할 수 있다. 또한, 메모리는 프로세서의 처리 과정에 서 생성되는 다양한 정보를 저장할 수 있다. 이 밖에도, 메모리는 각종 데이터와 프로그램 등을 저장할 수 있다. 메모리는 휘발성 메모리(예: 도 1의 휘발성 메모리) 또는 비휘발성 메모리(예: 도 1의 비 휘발성 메모리)를 포함할 수 있다. 메모리는 하드 디스크 등과 같은 대용량 저장 매체를 구비하여 각종 데이터를 저장할 수 있다. 도 4a 내지 도 4c는 일 실시예에 따른 파일명을 저장하는 과정 및 파일명을 검색하는 과정을 설명하기 위한 도 면이다. 도 4a를 참조하면, 일반적인 파일 시스템이 대소문자를 구분하는 파일명을 저장하는 과정이 도시된다. 예를 들 어, 원본 파일의 파일명(\"HelloMonkey\")을 암호화하여 저장하고, 원본 파일의 파일명(\"HelloMonkey\")을 소문자 들로 변환한 파일명(\"hellomonkey\")에 대해 해시 함수를 적용하여 해시 값(예: \"0x1234\")을 산출할 수 있다. 이 때, 원본 파일의 파일명(\"HelloMonkey\")은 문자열(예: \"x@3?ei#45klv9p*c\")과 같이 암호화될 수 있다. 또한, 원본 파일의 파일명(\"HelloMonkey\")을 소문자들(\"hellomonkey\")로 변환한 후, 소문자들(\"hellomonkey\")에 대응 하는 해시 값(예: \"0x1234\")을 산출할 수 있다. 이 경우, 원본 파일의 암호화된 문자열(예: \"x@3?ei#45klv9p*c\")의 해시 값과 소문자들(\"hellomonkey\")의 해시 값이 상이하므로 원본 파일의 파일명의 키 값이 없이는 원본 파일의 소문자 파일명(\"hellomonkey\")의 해시 값의 계산할 수 없다. 예를 들어, 원본 파일의 파일명의 키 값이 없이는 해시 값의 손상 여부를 감지하거나 원본 파 일의 파일명을 복구하는 것이 불가능하다. 도 4b는 일 실시예에 따른 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치)가 원본 파일의 파일 명(예: \"HelloMonkey\")을 소문자들(예: \"hellomonkey\")로 변환하고, 소문자들로 변환한 파일명(예: \"hellomonkey\")에 대응하는 대소문자 정보(예: \"10000100000\")를 파일명과 분리하여 저장한 상황이 도시된다. 전자 장치는 소문자들(예: \"hellomonkey\")에 대해 암호화를 수행하여 암호화된 문자열(예: \"qwc?^xto&otp%%de\")을 획득하고, 암호화된 문자열(\"qwc?^xto&otp%%de\")에 대한 해시 값(예: \"0x1234\")을 산출 할 수 있다. 이때, 해시 값은 소문자로 변환된 암호화된 문자열에 대한 해시 값이고, 원본 파일의 파일명에 대 한 대소문자 정보는 별도로 저장될 수 있다. 전자 장치는 파일명의 키(fname_key) 값을 이용한 복호화 과 정을 통해 소문자로 변환된 파일명을 획득하고, 대소문자 정보에 의해 소문자로 변환된 파일명을 원본 파일의 파일명으로 복원할 수 있다. 도 4c는 일 실시예에 따른 전자 장치가 파일명의 키(fname_key) 값을 이용하여 암호화된 문자열(예: \"qwc?^xto&otp%%de\")을 복호화하여 소문자들로 표현된 파일명(예: \"hellomonkey\")을 복원하는 상황이 도시된다. 전자 장치는 파일명과 분리하여 저장된 대소문자 정보(예: \"10000100000\")를 소문자들로 표현된 파일명 (\"hellomonkey\")에 반영하여 원본 파일의 파일명(예: \"HelloMonkey\")을 복원함으로써 탐색하고자 하는 파일이 탐색되었는지를 결정할 수 있다. 일 실시예에서는 원본 파일의 파일명에 대한 대소문자 정보를 파일명과 분리하여 저장함으로써 전자 장치 의 메모리(예: 도 1의 메모리, 도 3의 메모리, 도 6의 저장 장치)에 기록되는 사용자 파일을 보 호하기 위해 파일명의 암호화를 수행하는 환경에서 대소문자 구분이 없이 파일명을 탐색함으로써 탐색 성능을 향상시킬 수 있다. 또한, 일 실시예에서는 원본 파일의 파일명에 대한 대소문자 정보를 파일명과 분리하여 저장함으로써 원본 파일 의 파일명에 대한 키 값을 통한 복호화 과정을 수행하지 않고도 해시 값의 손상을 감지하고, 손상된 해시 값을 복구하여 복원 안정성을 향상시킬 수 있다. 도 5는 일 실시예에 따른 파일의 구조를 설명하기 위한 도면이다. 도 5를 참조하면, 일 실시예에 따른 파일의 계층적 구조가 도시된다. 일 실시예에 따른 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치)의 운영 체제(operating system)(예: 도 1 및 도 2의 운영 체제)에서 처리 과정은 예를 들어, 파일(file)을 단위로 구성될 수 있다. 파일은 예를 들어, 도 5에 도시된 계층적 구조의 특성을 가질 수 있다. 파일은 예를 들어, 파일명, 아이-노드(i-node) 공간, 및 데이터 블록을 포함할 수 있다. 파일 명은 사용자가 파일을 구분하고 접근 및 조작하는데 필요한 요소에 해당할 수 있다. 하드웨어 장치를 파 일로 관리할 만큼 운영 체제에서의 모든 처리 과정은 파일이라는 단일 인터페이스를 통해 처리될 수 있다. 때 문에 파일을 다루기 위해서는 파일명이 구분되어야 한다. 서로 다른 파일들에 대응하는 디렉토리들은 파 일명에 의해 구분될 수 있다. 아이-노드(i-node) 공간은 아이-노드(i-node)를 저장할 수 있다. 아이-노드(i-node)는 '인덱스 노드 (Index node)'라고도 하며, 예를 들어, 아래의 도 6에 도시된 것과 같은 파일 시스템에서 사용하는 자료 구조에 해당할 수 있다. 모든 파일들 및 디렉토리들은 각자 하나의 아이-노드를 가질 수 있다. 아이-노드 공간은 원본 파일의 파일 속성을 저장하는 공간의 일 예에 해당할 수 있다. 여기서, 파일 속성 은 예를 들어, 보존 속성(Archive Attribute), 감추기 속성(Hidden Attribute), 시스템 속성(System Attribute), 및 읽기만 가능 속성(Read Only Attribute)을 포함할 수 있으며, 반드시 이에 한정되지는 않는다. 보존 속성은 파일을 새로 만들거나 변경되었을 때 부여되는 속성으로 파일이 백업되지 않았거나 원본임을 알려 주기 위하여 사용될 수 있다. 감추기 속성은 파일을 감출 때 사용될 수 잇다. 시스템 속성은 해당 파일이 시 스템 파일임을 강조하고 싶을 때 사용할 수 있다. 읽기만 가능 속성은 파일의 읽기만 가능하고, 쓰기, 수정, 지우기가 불가능함을 나타내는데 사용될 수 있다. 일 실시예에서는 설명의 편의를 위하여, 아이-노드 및/또는 아이-노드 공간을 위주로 설명하지만, 반드시 이에 한정되는 것은 아니며, 원본 파일의 파일 속성은 이 밖에도 FAT(file allocation table) 파일시스템과 같이 디 렉토리 엔트리와 아이-노드 공간이 결합된 형태로 저장되는 것과 같이 다양한 형태로 저장될 수 있다. 아이-노드 공간은 파일을 기술하며, 예를 들어, 데이터 블록에서의 실제 파일의 데이터 위치(주소), 파일의 종류, 파일의 소유권(사용자, 그룹), 파일의 허가권, 파일의 액세스 모드, 및 파일의 타임 스탬프(마지 막 수정일)과 같은 정보를 포함할 수 있으며, 반드시 이에 한정되지는 않는다. 아이-노드 공간은 예를 들 어, 전체 저장 공간의 1% 정도를 차지할 수 있다. 예를 들어, 파일 시스템에 의해 하나의 파일이 생성될 때마다 하나의 아이-노드 공간이 생성되고, 생성된 아이-노드 공간에 대응하는 아이-노드 번호가 부여될 수 있다. 아이-노드 번호는 고유한 식별 번호이며 각 파티션마다 0부터 시작할 수 있다. 아이-노드 공간은 예를 들어, 링크(link)의 수가 0인 위치에서 생 성되는데 정보를 저장한 뒤에는 해당 링크의 값이 1로 변경될 수 있다. 아이-노드는 예를 들어, 아이-노드 공 간에 저장될 수 있으며, 반드시 이에 한정되지는 않는다. 데이터 블록은 실제 파일의 내용이 저장되는 공간에 해당할 수 있다. 예를 들어, 메모리(예: 도 1의 메모 리, 도 3의 메모리, 도 6의 저장 장치)에 파일이 저장될 때 데이터는 특별한 구분없이 데이터 블록에 차례대로 저장될 수 있다. 데이터 블록에 파일 데이터가 저장될 때 특별한 구분을 하지 않기 때문에 어떤 부분이 어느 파일에 대한 데이터인지를 구분하는 방법이 필요하다. 이때, 데이터 블록의 어느 부분이 어느 파일에 대한 데이터인가를 나타내는 정보가 아이-노드 공간에 저장될 수 있다. 도 6은 일 실시예에 따른 파일 시스템의 구조를 도시한 블록도이다. 도 6을 참조하면, 일 실시예에 따른 파일 시스템은 파일명을 관리하기 위한 파일명 관리 시스템을 포함할 수 있다. 이때, 파일 시스템은 예를 들어, 전술한 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치)의 운용 체제(예: 도 1 및 도 2의 운영 체제)에 포함될 수도 있고, 별도의 파일로 구성될 수도 있다. 파일명 관리 시스템은 예를 들어, 파일명 기록 장치, 파일명 탐색 장치, 케이스 변환기, 해시 생성기, 암복호화기, 및 케이스 비트(case_bits) 생성기, 및 저장 장치(예: 도 1의 메모리, 및/또는 도 3의 메모리)를 포함할 수 있으며, 반드시 이에 한정되지는 않는다. 파일명 관리 시스템은 예를 들어, 파일명 기록 장치에게 원본 파일의 파일명(예: CE 파일명)과 함께 해당 파일명에 대응하는 파일명 메타데이터(예: 도 8a의 파일명 메타데이터)를 저장 장치에 기록하도 록 요청할 수 있다. 파일명 기록 장치는 케이스 변환기를 사용하여 모두 소문자로 이루어진 CI 파일명을 생성할 수 있다. CI 파일명은 'ci_name'와 같이 표현할 수도 있다. 케이스 변환기는 파일명 관리 시스템에 입력된 원본 파일의 파일명의 문자열을 전부 대문자 또는 전 부 소문자로 변환할 수 있다. 예를 들어, 원본 파일의 파일명이 \"HelloMonkey\"인 경우, 케이스 변환기는 원본 파일의 파일명(\"HelloMonkey\")에 대응하는 CI 파일명(\"hellomonkey\")을 생성할 수 있다. 원본 파일의 파 일명이 \"HELLOmonkey\" 인 경우에도 원본 파일의 파일명(\"HelloMonkey\")에 대응하는 CI 파일명(\"hellomonkey\") 이 동일하게 생성될 수 있다. 해시 생성기는 암복호화기에 의해 암호화된 CI파일명에 대응하는 해시 값을 생성할 수 있다. 예를 들어, 해시 생성기가 16 비트(bit) 해시 생성기인 경우, 암호화된 CI 파일명에 대한 해시 값은 \"0x1234\"와 같은 16 비트 값이 생성될 수 있다. 다른 예로, 해시 생성기가 32 비트 해시 생성기인 경우, 암호화된 CI 파일명에 대한 해시 값은 \"0x12345678\"와 같은 32 비트 값이 생성될 수 있다. 해시 값은 해시 생성기가 이용하는 해시 알고리즘에 따라 달라질 수 있다. 암복호화기는 케이스 변환기를 통해 변환된 문자열(예: CI 파일명)을 암호화(encryption) 하거나 이 미 암호화된 문자열을 복호화(decryption)할 수 있다. 암복호화기에 의해 암호화된 CI 파일명은 'enc_name'과 같이 표현할 수 있다. 예를 들어, CI 파일명이 \"hellomonkey\"라면 암호화된 CI 파일명은 \"qwc?^xto&otp%%de\"로 생성될 수 있다. 일 실시예에서 CI 파일명의 길이는 11자이고, 암호화된 CI 파일명의 길 이는 16자로서 CI 파일명과 암호화된 CI 파일명의 길이는 서로 같을 수도 있고, 또는 상이할 수 있다. 암호화 된 CI 파일명의 길이는 암복호화기가 사용하는 암호화 알고리즘에 따라 달라질 수 있다. 케이스 비트 생성기는 입력된 원본 파일의 파일명의 대소문자 여부를 비트 스트림(bits stream)으로 생성 할 수 있다. 예를 들어, 케이스 비트 생성기는 입력된 원본 파일의 파일명에 포함된 대문자는 비트 '1'로 변환하고, 원본 파일의 파일명에 포함된 소문자는 비트 '0'로 변환할 수 있다. 실시예에 따라서, 케이스 비트 생성기는 입력된 원본 파일의 파일명에 포함된 대문자는 비트 '0'로 변환하고, 원본 파일의 파일명에 포함 된 소문자는 비트 '1'로 변환할 수도 있다. 파일명 관리 시스템은 예를 들어, 파일명 탐색 장치에게 저장 장치에 저장된 파일명 중 찾고하 하는 파일명과 동일한 파일명이 있는지를 탐색하도록 요청할 수 있다. 이 경우, 파일명 탐색 장치는 전술 한 케이스 변환기를 사용하여 CI 파일명(예: 제1 CI 파일명)을 생성하고, 암복호화기를 사용하여 암 호화된 CI파일명(예: 제1 암호화된 CI파일명)을 생성하고, 해시 생성기를 사용하여 암호화된 CI 파일명에 대응하는 해시 값(예: 제1 해시 값)을 생성할 수 있다. 파일명 탐색 장치는 저장 장치에 기록된 해시 값들(예: 제2 해시 값 또는 제3 해시 값)과 해시 생성 기에 의해 생성된 해시 값(제1 해시 값)이 일치하는지를 검사할 수 있다. 만약, 제1 해시 값과 제2 해시 값이 일치하는 경우, 파일명 탐색 장치는 저장 장치에 기록된 암호화된 CI파일명(enc_name, 제2 또는 제3 암호화된 CI파일명)과 제1 암호화된 CI파일명을 비교할 수 있다. 비교 결과가 일치하는 경우, 파일명 탐색 장치는 케이스 변환기를 사용하여 제1 CI 파일명의 대소문자를 변환한 원본 파일명(CE 파일명)을 복 원할 수 있다. 파일명 탐색 장치는 제1 암호화된 CI 파일명과 제2 암호화된 CI 파일명 간의 비교 결과가 일치하지 않는 경우, 저장 장치에 저장된 모든 파일들에 대해 전술한 과정을 반복하여 찾고자 하는 파일명을 갖는 파일이 있는지 탐색할 수 있다. 도 7은 일 실시예에 따른 전자 장치의 동작 방법을 나타낸 흐름도이다. 이하 실시예에서 각 동작들은 순차적으 로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 동작들의 순서가 변경될 수도 있으며, 적어도 두 동작들이 병렬적으로 수행될 수도 있다. 도 7을 참조하면, 일 실시예에 따른 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치)는 동작 710 내지 동작 760을 통해 타겟 파일을 생성해서 저장하거나, 저장된 파일을 탐색할 수 있다. 동작 710에서, 전자 장치는 원본 파일의 파일명('원본 파일의 파일명')에 포함된 대소문자에 대응하는 비 트 정보를 생성할 수 있다. 예를 들어, 원본 파일을 메모리(예: 도 1의 메모리, 도 3의 메모리, 및/ 또는 도 6의 저장 장치)에 기록하도록 하는 요청을 수신한 경우, 전자 장치는 전술한 케이스 비트 생 성기를 사용하여 원본 파일의 파일명에 포함된 대소문자에 대응하는 비트 스트림을 비트 정보로서 생성할 수 있다. 예를 들어, 원본 파일의 파일명이 \"HELLOmonkey\"라면, 전자 장치는 대문자 \"HELLO\" 각각에 대해 서 제1 비트값(예: 비트 '1')을 할당하고, 소문자 \"monkey\" 각각에 대해서 제2 비트 값(예: 비트 '0')을 할당하 여 비트 스트림(예:\"11111000000\")과 같은 비트 정보를 생성할 수 있다. 전자 장치가 원본 파일의 파일명 에 포함된 대소문자에 대응하는 비트 정보를 생성하는 방법의 일 실시예는 아래의 도 8b를 참조하여 보다 구체 적으로 설명한다. 동작 720에서, 전자 장치는 원본 파일의 파일명을 제1 유형의 문자들로 표현한 CI 파일명을 생성할 수 있 다. 전자 장치는 예를 들어, 전술한 케이스 변환기와 같이 원본 파일의 파일명에 대응하는 CI 파일 명을 생성할 수 있다. 예를 들어, 제1 유형의 문자들은 '소문자'일 수 있다. 이 경우, 전자 장치는 원본 파일의 파일명 (\"HelloMonkey\")을 제1 유형의 문자들(예: 소문자들)로 표현한 CI 파일명(\"hellomonkey\")을 생성할 수 있다. 예를 들어, \"HELLOmonkey\"와 같이 원본 파일의 파일명의 대소문자가 다른 경우에도 원본 파일의 파일명 (\"HELLOmonkey\")에 대응하는 동일한 CI 파일명(\"hellomonkey\")이 생성될 수 있다. 실시예에 따라서, 제1 유형의 문자들은 '대문자'일 수 있다. 이 경우, 전자 장치는 원본 파일의 파일명 (\"HelloMonkey\")을 제1 유형의 문자들(예: 대문자들)로 표현한 CI 파일명(\"HELLOMONKEY\")을 생성할 수 있다. 다른 예로 원본 파일의 파일명이 \"HELLOmonkey\"인 경우도 CI 파일명은 동일하게 \"HELLOMONKEY\"로 생성될 수 있 다. 동작 730에서, 전자 장치는 동작 720에서 생성한 CI 파일명을 암호화할 수 있다. 예를 들어, CI 파일명이 \"hellomonkey\"라면 암호화된 CI 파일명은 \"qwc?^xto&otp%%de\"로 생성될 수 있다. 일 실시예에서 암호화된 CI 파일명의 길이는 전자 장치가 사용하는 암호화 알고리즘에 따라 달라질 수 있다. 동작 740에서, 전자 장치는 동작 730에서 암호화한 CI 파일명(예: \"qwc?^xto&otp%%de\")에 대응하는 제1 해시 값을 산출할 수 있다. 예를 들어, 전자 장치가 사용하는 해시 함수가 16 비트(bit) 해시 함수인 경 우, 암호화된 CI 파일명에 대한 해시 값은 \"0x1234\"와 같은 16 비트 값이 생성될 수 있다. 다른 예로, 전자 장 치가 사용하는 해시 함수가 32 비트(bit) 해시 함수인 경우, 암호화된 CI 파일명에 대한 해시 값은 \"0x12345678\"와 같은 32 비트 값이 생성될 수 있다. 전자 장치에 의해 산출되는 제1 해시 값은 전자 장치 가 사용하는 해시 알고리즘에 따라 달라질 수 있다. 동작 750에서, 전자 장치는 동작 710에서 생성한 비트 정보, 동작 730에서 암호화된 CI 파일명, 암호화된 CI 파일명의 길이, 및 동작 740에서 산출한 제1 해시 값 중 적어도 하나를 포함하는 파일명 메타데이터를 메모 리에 기록할 수 있다. 이때, 비트 정보는 아래의 8b에 도시된 것과 같이 비트 스트림(bit stream) 그대로 저장 될 수도 있고, 암호화된 형태로 저장될 수도 있다. 예를 들어, 원본 비트 정보를 2 비트만큼 우측으로 회전시 키는 2비트 우측 회전(2 bit right rotate) 방식으로 암호화하는 경우, 원본 비트 정보 \"100001000000\"는 \"001000010000\"와 같이 암호화될 수 있다. 일 실시예에 따른 파일명 메타데이터의 일 예시는 아래의 도 8a를 참조하여 보다 구체적으로 설명한다. 동작 760에서, 전자 장치는 파일명 메타데이터를 기초로, 탐색하고자 하는 타겟 파일을 탐색할 수 있다. 타겟 파일을 탐색하는 방법은 아래의 도 9를 참조하여 보다 구체적으로 설명한다. 도 8a는 일 실시예에 따른 파일명 메타데이터의 일 예시를 도시한 도면이고, 도 8b는 일 실시예에 따른 비트 정 보의 생성 방법을 설명하기 위한 도면이다. 예를 들어, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치)가 원본 파일의 파일명 \"HelloMonkey\"을 메모리(예: 도 1의 메모리, 도 3의 메모리, 도 6의 저장 장치)에 기록한다고 하자. 이 경우, 제1 유형의 문자들(예: 소문자들)로 표현된 CI 파일명은 \"hellomonkey\"이 되고, CI 파일명은 암호화 알고리즘에 의해 \"qwc?^xto&otp%%de\"와 같이 암호화될 수 있다. 이때, 원본 파일의 파일명과 관련하여 저장 장치에 기록되는 파일명 메타데이터에는 다음과 같은 정 보가 저장될 수 있다. 암호화한 CI 파일명인 \"qwc?^xto&otp%%de\"은 파일명 메타데이터의 파일 이름 (filename) 항목에 저장되고, 암호화한 CI 파일명(\"qwc?^xto&otp%%de\")의 길이인 '16'은 파일명 길이 (name length) 항목에 저장될 수 있다. 암호화한 CI 파일명에 대응하는 해시 값인 \"0x12345678\"은 파일 명 해시(name hash) 항목에 저장되고, 원본 파일의 파일명에 포함된 대소문자에 대응하는 비트 정보 \"10000100000\"는 케이스 비트 항목에 저장될 수 있다. 케이스 비트 항목에 저장되는 비트 정보를 변환하는 방법의 일 실시예는 아래의 도 8b를 참조하여 보다 구 체적으로 설명한다. 정리하자면, 원본 파일의 파일명(\"HelloMonkey\")에 대응하여 [qwc?^xto&otp%%de:16:0x12345678:10000100000]과 같은 파일명 메타데이터가 메모리에 기록될 수 있다. 또는, 원본 파일의 파일명이 \"Welcome\"이나 \"OldAndNewWorld\"라면, 전술한 방식으로 [r823jf@#F2903wed:16:0x95de1509:1000000] 또는 [f309j882f#!%!#r112dr#!$r@#2rwr23:32:0x3edfe7ba:10010010010000]와 같은 파일명 메타데이터가 메모리 에 기록될 수 있다. 실시예에 따라서, 대문자의 위치에 대응하여 제2 비트값(예: 비트 '0')을 할당하고, 소문자의 위치에 대응하여 제1 비트값(예: 비트 '1')을 할당하는 케이스 비트 생성기(예: 도 6의 케이스 비트 생성기)와 16비트 해시 생성기(예: 도 6의 해시 생성기)를 사용할 수도 있다. 이 경우, 원본 파일의 파일명 \"HelloMonkey\"에 대 응하여 [qwc?^xto&otp%%de:16:0x1234:01111011111]와 같은 파일명 메타데이터가 메모리에 기록될 수 있다. 또한, 원본 파일의 파일명 \"Welcome\"에 대응하여는 [r823jf@#F2903wed:16:0x95de:0111111]와 같은 파일 명 메타데이터가 저장되고, 원본 파일의 파일명 \"OldAndNewWorld\"에 대응하여는 [f309j882f#!%!#r112dr#!$r@#2rwr23:32:0x3edf:01101101101111]와 같은 파일명 메타데이터가 저장될 수 있다. 실시예에 따라서, 전자 장치는 대문자의 위치에 대응하여 제2 비트값(예: 비트 '0')을 할당하고, 소문자의 위치에 대응하여 제1 비트값(예: 비트 '1')을 할당하는 케이스 비트 생성기와 16비트 해시 생성기에 더하여, 비트 정보를 2비트 우측 회전(2 bit right rotate) 방식으로 암호화할 수 있다. 이 경우, 원본 파일의 파일명 \"HelloMonkey\"에 대응하여 [qwc?^xto&otp%%de:16:0x1234:11011110111]와 같은 파일명 메타데이터가 저 장되고, 원본 파일의 파일명 \"Welcome\"에 대응하여 [r823jf@#F2903wed:16:0x95de:1101111]와 같은 파일명 메타 데이터가 메모리에 저장될 수 있다. 또한, 원본 파일의 파일명 \"OldAndNewWorld\"에 대응하여 [f309j882f#!%!#r112dr#!$r@#2rwr23:32:0x3edf:11011011011011]와 같은 파일명 메타데이터가 메모리에 저 장될 수 있다. 일 실시예에서 파일명 메타데이터는 예를 들어, 파일 시스템의 메타데이터 영역에 기록될 수 있고, 또는 메모리에 기록될 수도 있으며, 반드시 이에 한정되지는 않는다. 예를 들어, 파일명 메타데이터가 메모리에 기록되는 경우, 파일명 메타데이터는 파일 시스템 또 는 메모리에서 모두 같은 메타데이터 영역에 기록될 수도 있고, 또는 파일명 메타데이터의 각 항목별 또는 각 속성별로 상이한 메타데이터 영역에 나뉘어져 기록될 수도 있다. 실시예에 따라서, 파일명 메타데이터는 파일시스템의 디렉토리 엔트리 영역에 기록될 수도 있다. 이 경우, 메타데이터의 파일 이름(filename) 항목, 파일명 길이(name length) 항목 및 파일명 해 시(name hash) 항목에 대응하는 정보는 파일 시스템의 디렉토리 엔트리 영역에 기록되고, 케이스 비트 항 목에 대응하는 비트 정보는 해당 원본 파일의 파일 속성을 저장하는 공간(예: 도 5의 아이-노드 공간) 또는 추가 속성(extra attributes) 공간에 분리되어 기록될 수도 있다. 도 8b를 참조하면, 일 실시예에 따른 원본 파일의 파일명 \"HelloMonkey\"에 대응하는 비트 정보가 도시된다. 예를 들어, 원본 파일의 파일명 \"HelloMonkey\"인 경우, 전자 장치는 해당 파일명에서 첫번째 위치에 있는 대문자 H와 여섯 번째 위치에 있는 대문자 M에는 제1 비트값(예: 비트 '1')을 할당하고, 나머지 위치 에 있는 소문자들에는 제2 비트 값(예: 비트 '0')을 할당하여 비트 스트림(예:\"10000100000\")와 같은 비트 정보 를 생성할 수 있다. 이에 따라 원본 파일의 파일명 \"HelloMonkey\"에 대응하는 비트 정보는 \"10000100000\"가 될 수 있다. 실시예에 따라서, 전자 장치는 원본 파일의 파일명에 포함된 대문자에 제2 비트 값(예: 비트 '0')을 할당 하고, 소문자에 제1 비트값(예: 비트 '1')을 할당할 수도 있다. 예를 들어 원본 파일의 파일명이 \"HelloMonkey\"라면, 전자 장치는 대문자 H와 M은 제2 비트값(예: 비트 '0')을 할당하고, 나머지 소문자들 에는 제1 비트 값(예: 비트 '1')을 할당하여 비트 정보 \"01111011111\"를 생성할 수 있다. 도 9는 일 실시예에 따라 타겟 파일을 탐색하는 방법을 나타낸 흐름도이다. 이하 실시예에서 각 과정들은 순차 적으로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 과정들의 순서가 변경될 수도 있으며, 적어도 두 과정들이 병렬적으로 수행될 수도 있다. 도 9를 참조하면, 일 실시예에 따른 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치, 도 1의 프 로세서, 도 3의 프로세서)는 동작 910 내지 동작 960을 통해 찾고자 하는 타겟 파일을 탐색할 수 있 다. 동작 910에서, 전자 장치는 타겟 파일의 파일명을 제1 유형의 문자들로 표현한 제2 CI 파일명을 생성할 수 있다. 이때, '제2 CI 파일명'은 탐색 요청을 받은 타겟 파일의 파일명에 대응하는 CI 파일명에 해당할 수 있다. 동작 920에서, 전자 장치는 동작 910에서 생성한 제2 CI 파일명을 암호화할 수 있다. 동작 930에서, 전자 장치는 동작 920에서 암호화한 제2 CI 파일명에 대응하는 제2 해시 값을 산출할 수 있 다. 동작 940에서, 전자 장치는 전술한 동작 740에서 산출한 제1 해시 값과 동작 930에서 산출한 제2 해시 값 간의 일치 여부를 제1 비교할 수 있다. 동작 950에서, 전자 장치는 동작 940의 제1 비교 결과에 기초하여 타겟 파일을 탐색할 수 있다. 예를 들 어, 제1 비교 결과가 일치하는 경우, 전자 장치는 메모리(예: 도 1의 메모리, 도 3의 메모리, 및/또는 도 6의 저장 장치)에 기록된 동작 730을 통해 암호화한 CI 파일명과 동작 920에서 암호화한 제2 CI 파일명 간의 파일명 길이 및 문자열의 일치 여부를 제2 비교할 수 있다. 전자 장치는 제2 비교 결과에 기초하여, 타겟 파일을 탐색할 수 있다. 예를 들어, 제2 비교 결과가 일치하는 경우, 전자 장치는 비트 정보를 기초로, 비트 정보에 포함된 비트들 의 순서에 해당하는 CI 파일명의 문자를, 비트 정보에 따라 대문자 또는 소문자로 변환함으로써 원본 파일의 파 일명을 복원할 수 있다. 이와 달리, 제2 비교 결과가 일치하지 않는 경우, 전자 장치는 메모리에 저장된 나머지 파일명들에 대응하는 해시 값들과 제2 해시 값의 일치 여부를 반복적으로 비교할 수 있다. 전자 장치는 메모리에 저장된 나머지 파일명들에 대응하는 해시 값들 중 어느 하나의 제3 해시 값과 제2 해시 값이 일치하는 경우, 제3 해시 값에 대응하는 암호화한 제3 CI 파일명과 암호화한 제2 CI 파일명 간의 파 일명 길이 및 문자열의 일치 여부를 제3 비교하는 방식으로 나머지 파일명들에 대응하는 해시 값들과 제2 해시 값의 일치 여부를 반복적으로 비교할 수 있다. 도 10은 일 실시예에 따라 파일명을 탐색하는 방법을 나타낸 흐름도이다. 이하 실시예에서 각 동작들은 순차적 으로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 동작들의 순서가 변경될 수 도 있으며, 적어도 두 동작들이 병렬적으로 수행될 수도 있다. 도 10을 참조하면, 일 실시예에 따라 메모리(예: 도 1의 메모리, 도 3의 메모리, 및/또는 도 6의 저 장 장치)에 저장된 파일명 중 찾고자 하는 타겟 파일의 파일명이 있는지에 대한 탐색 요청을 수신한 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치, 도 1의 프로세서, 도 3의 프로세서)는 동 작 1010 내지 동작 1090를 통해 파일명을 탐색할 수 있다. 동작 1010에서, 전자 장치는 탐색 요청을 받은 타겟 파일의 파일명에 대응하는 CI 파일명(예: 제2 CI 파일 명)을 생성할 수 있다. 이때, 제2 CI 파일명은 타겟 파일의 파일명을 제1 유형의 문자들(예: 소문자들)로 표현 한 것일 수 있다. 예를 들어, 타겟 파일의 파일명이 \"HelloMonkey\"이라면, 타겟 파일의 파일명에 대응하는 CI 파일명(예: 제2 CI 파일명)은 타겟 파일의 파일명을 모두 소문자로 전환한 \"hellomonkey\"가 될 수 있다. 동작 1020에서, 전자 장치는 예를 들어, 전술한 케이스 변환기와 같이 동작 1010에서 생성된 CI 파일 명(제2 CI 파일명)을 암호화할 수 있다. 예를 들어, CI 파일명(제2 CI 파일명)이 \"hellomonkey\"인 경우, 암호 화된 파일명(암호화된 제2 CI 파일명)은 \"qwc?^xto&otp%%de\"로 생성될 수 있다. 동작 1030에서, 전자 장치는 동작 1030에서 암호화된 파일명(제2 CI 파일명)에 대응하는 해시 값(예: 제2 해시 값)을 생성할 수 있다. 동작 1040에서, 전자 장치는 메모리에 기록된 디렉토리의 끝인지 여부를 판단할 수 있다. 메모리 에 기록된 디렉토리의 끝이라고 결정되면, 동작 1090에서 전자 장치는 타겟 파일이 탐색되지 않았음 을 알리는 \"파일 미탐색\" 메시지를 출력할 수 있다. 동작 1040에서 메모리에 기록된 디렉토리의 끝이 아니라고 결정되면, 동작 1050에서, 전자 장치는 메 모리에 기록된 해시 값들과 동작 1030에서 생성된 해시 값이 일치하는지를 비교할 수 있다. 동작 1050의 비교 결과가 일치하지 않는 경우, 전자 장치는 동작 1040을 통해 모든 파일이 탐색될 때까지 동작 1050 및 동작 1060을 반복할 수 있다. 동작 1050의 비교 결과가 일치하는 경우, 동작 1060에서, 전자 장치는 동작 1020에서 암호화된 파일명(제2 CI 파일명)과 메모리에 기록되어 있는 암호화된 파일명 간의 일치 여부를 비교할 수 있다. 보다 구체적으 로, 전자 장치는 동작 1020에서 암호화된 파일명(제2 CI 파일명)과 메모리에 기록되어 있는 암호화된 파일명 간의 파일명 길이 및 해당 파일명들 간의 문자열의 일치 여부를 비교할 수 있다. 동작 1060의 비교 결과가 일치하지 않는 경우, 전자 장치는 동작 1040을 통해 모든 파일이 탐색될 때까지 동작 1050 및 동작 1060을 반복할 수 있다. 동작 1060의 비교 결과가 일치하는 경우, 전자 장치는 일치하는 파일명을 찾은 것으로 보아 동작 1070에서, 동작 1010에서 생성한 CI 파일명을 CE 파일명으로 전환할 수 있다. 전자 장치는 예를 들어, 메 모리에 기록되어 있는 비트 정보와 CI 파일명을 이용하여 원본 파일의 CE 파일명을 복원할 수 있다. 예를 들어, 원본 파일(\"HelloMonkey\")의 파일명에 포함된 대문자의 위치에 대응하여 제1 비트값(예: 비트 '1')을 할 당하고, 원본 파일의 파일명에 포함된 소문자의 위치에 대응하여 제2 비트값을 할당하여 CI 파일명 (\"hellomonkey\") 및 CI 파일명에 대응하는 비트 정보(\"10000100000\")가 생성된 경우, 전자 장치는 비트 정보가 1인 위치의 h와 m을 각각 H와 M으로 바꾸고, 나머지는 소문자로 유지함으로써 원본 파일명 (\"HelloMonkey\")을 복원할 수 있다. 도 11은 일 실시예에 따라 파일명을 검사하는 방법을 나타낸 흐름도이다. 이하 실시예에서 각 동작들은 순차적 으로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 동작들의 순서가 변경될 수 도 있으며, 적어도 두 동작들이 병렬적으로 수행될 수도 있다. 도 11을 참조하면, 일 실시예에 따른 전자 장치 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치, 도 1의 프로세서, 도 3의 프로세서)는 동작 1110 내지 동작 1150을 파일명을 검사할 수 있다. 일 실 시예에 따르면, 암호화 키가 없이도 해시 값을 계산할 수 있으므로, CI 파일명에 대한 해시 값 체크를 통해 파 일명의 손상 여부를 검사할 수 있다. 동작 1110에서, 전자 장치는 파일명을 검사할 수 있다. 전자 장치는 예를 들어, 메모리(예: 도 1의 메모리, 도 3의 메모리, 및/또는 도 6의 저장 장치)에 트리(tree) 구조로 저장된 파일명을 검사 할 수 있다. 동작 1120에서, 전자 장치는 메모리에 저장된 디렉토리의 끝인지 여부를 결정할 수 있다. 여기서, '메모리에 저장된 디렉토리의 끝'이라는 것은 메모리에 저장된 모든 파일명들에 대한 검사가 완료되 었다는 의미로 이해될 수 있다. 동작 1120에서 디렉토리의 끝이라고 결정된 경우, 전자 장치는 검사 동작 을 종료할 수 있다. 이와 달리, 동작 1120에서 디렉토리의 끝이 아니라고 결정된 경우, 동작 1130에서 전자 장치는 파일명 메 타데이터(예: 도 8a의 파일명 메타데이터)에 포함된 암호화된 CI 파일명에 대한 해시 값을 생성할 수 있다. 동작 1140에서, 전자 장치는 동작 1130에서 생성한 해시 값과 파일명 메타데이터에 저장된 해시 값을 비교하여, 해시 값의 손상 여부를 체크할 수 있다. 또한, 만약 해시 값이 손상된 경우, 전자 장치는 파일 명 메타데이터에 저장된 해시 값을 동작 1130에서 생성한 해시 값으로 갱신할 수도 있다. 동작 1150에서, 전자 장치는 미리 저장해 둔 파일 속성 정보를 이용하여 파일명 메타데이터를 포함하 여, 해당 파일이 갖고 있는 다양한 특성값들을 검사할 수 있다. 동작 1150의 체크가 완료되면, 전자 장치는 동작 1120을 통해 메모리에 저장된 파일명들에 대한 손상 여부를 반복적으로 수행할 수 있다. 예를 들어, 원본 파일명(\"HelloMonkey\")에 대응하여 [qwc?^xto&otp%%de:16:0x12345678:10000100000]가 파일명 메타데이터로 메모리에 저장될 수 있다. 이때, 1 비트 플립(flip)으로 인해 파일명 메타데이터(81 0)에 저장된 해시 값 \"0x12345678\"이 \"0x123456f8\"와 같이 손상될 수 있다. 이 경우, 전자 장치는 파일 명 메타데이터에 포함된 암호화된 CI 파일명(\"qwc?^xto&otp%%de\")에 대한 해시 값(예: \"0x12345678\")을 계산할 수 있다. 전자 장치는 암호화된 CI 파일명(\"qwc?^xto&otp%%de\")에 대한 해시 값인 \"0x12345678\" 과 파일명 메타데이터에 포함된 손상된 해시 값 \"0x123456f8\"을 비교하는 해시 값 체크를 통해 데이터의 손상 여부를 파악할 수 있다. 전자 장치는 계산된 해시 값 \"0x12345678\"에 의해 손상된 해시 값 \"0x123456f8\"을 \"0x12345678\"로 복구함으로써 데이터의 손실을 방지할 수 있다. 일 실시예에 따르면, 전자 장치(101,300)는 원본 파일을 수신하는 통신 인터페이스; 메모리(130,350,670); 및 프로세서(120,330)를 포함하고, 상기 프로세서(120,330)는 상기 원본 파일의 파일명에 포함된 대소문자에 대 응하는 비트 정보를 생성하고, 상기 원본 파일의 파일명을 제1 유형의 문자들로 표현한 CI(case insensitive) 파일명을 생성하고, 상기 CI 파일명을 암호화하고, 상기 암호화한 CI 파일명에 대응하는 제1 해시 값을 산출하 며, 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이, 상기 제1 해시 값, 및 상기 비트 정보 중 적어 도 하나를 포함하는 파일명 메타데이터를 상기 메모리(130,350,670)에 기록하며, 상기 파일명 메타데이터 를 기초로, 탐색하고자 하는 타겟 파일을 탐색할 수 있다. 일 실시예에 따르면, 상기 프로세서(120,330)는 상기 원본 파일의 파일명에 포함된 대문자의 위치에 대응하여 제1 비트값을 할당하고, 상기 원본 파일의 파일명에 포함된 소문자의 위치에 대응하여 제2 비트값을 할당함으로 써 상기 비트 정보를 생성할 수 있다. 일 실시예에 따르면, 상기 제1 유형의 문자들은 대문자들 및 소문자들 중 어느 하나를 포함할 수 있다. 일 실시예에 따르면, 상기 프로세서(120,330)는 상기 파일명 메타데이터를 상기 파일명 메타데이터의 속성 별로 상기 메모리(130,350,670)에서 상이한 메타데이터 영역에 기록하거나, 또는 상기 파일명 메타데이터 를 상기 메모리(130,350,670)에서 동일한 메타데이터 영역에 저장할 수 있다. 일 실시예에 따르면, 상기 프로세서(120,330)는 상기 파일명 메타데이터 중 상기 암호화된 CI 파일명, 상 기 암호화된 CI 파일명의 길이, 및 상기 제1 해시 값을 상기 원본 파일의 디렉토리 엔트리 영역에 기록하고, 상 기 파일명 메타데이터 중 상기 비트 정보를 상기 원본 파일의 파일 속성을 저장하는 공간 또는 추가 속성 (extra attributes) 공간에 분리하여 기록할 수 있다. 일 실시예에 따르면, 상기 프로세서(120,330)는 상기 타겟 파일의 파일명을 제1 유형의 문자들로 표현한 제2 CI 파일명을 생성하고, 상기 제2 CI 파일명을 암호화하고, 상기 암호화한 제2 CI 파일명에 대응하는 제2 해시 값을 산출하고, 상기 제1 해시 값과 상기 제2 해시 값 간의 일치 여부를 제1 비교하며, 상기 제1 비교 결과에 기초하 여, 상기 타겟 파일을 탐색할 수 있다. 일 실시예에 따르면, 상기 프로세서(120,330)는 상기 제1 비교 결과가 일치하는 경우, 상기 메모리 (130,350,670)에 기록된 상기 암호화한 CI 파일명과 상기 암호화한 제2 CI 파일명 간의 파일명 길이 및 문자열 의 일치 여부를 제2 비교하고, 상기 제2 비교 결과에 기초하여, 상기 타겟 파일을 탐색할 수 있다. 일 실시예에 따르면, 상기 프로세서(120,330)는 상기 제2 비교 결과가 일치하는 경우, 상기 원본 파일의 파일명 을 복원하고, 상기 제2 비교 결과가 일치하지 않는 경우, 상기 메모리(130,350,670)에 저장된 나머지 파일명들 에 대응하는 해시 값들과 상기 제2 해시 값의 일치 여부를 반복적으로 비교할 수 있다. 일 실시예에 따르면, 상기 제2 비교 결과가 일치하는 경우, 상기 프로세서(120,330)는 상기 비트 정보를 기초로, 상기 비트 정보에 포함된 비트들의 순서에 해당하는 상기 CI 파일명의 문자를 상기 비트 정보에 따라 대문자 또는 소문자로 변환함으로써, 상기 원본 파일의 파일명을 복원할 수 있다. 일 실시예에 따르면, 상기 제2 비교 결과가 일치하지 않는 경우, 상기 프로세서(120,330)는 상기 해시 값들 중 어느 하나의 제3 해시 값과 상기 제2 해시 값이 일치하는 경우, 상기 제3 해시 값에 대응하는 암호화한 제3 CI 파일명과 상기 암호화한 제2 CI 파일명 간의 파일명 길이 및 문자열의 일치 여부를 제3 비교할 수 있다. 일 실시예에 따르면, 전자 장치(101,300)의 동작 방법은 원본 파일의 파일명에 포함된 대소문자에 대응하는 비 트 정보를 생성하는 동작 710; 상기 원본 파일의 파일명을 제1 유형의 문자들로 표현한 CI 파일명을 생성하는 동작 720; 상기 CI 파일명을 암호화하는 동작 730; 상기 암호화한 CI 파일명에 대응하는 제1 해시 값을 산출하 는 동작 740; 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이, 상기 제1 해시 값, 및 상기 비트 정 보 중 적어도 하나를 포함하는 파일명 메타데이터를 메모리(130,350,670)에 기록하는 동작 750; 및 상기 파일명 메타데이터를 기초로, 탐색하고자 하는 타겟 파일을 탐색하는 동작 760을 포함할 수 있다. 일 실시예에 따르면, 상기 비트 정보를 생성하는 동작은 상기 원본 파일의 파일명에 포함된 대문자의 위치에 대 응하여 제1 비트값을 할당하고, 상기 원본 파일의 파일명에 포함된 소문자의 위치에 대응하여 제2 비트값을 할 당함으로써 상기 비트 정보를 생성하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 제1 유형의 문자들은 대문자들 및 소문자들 중 어느 하나를 포함할 수 있다. 일 실시예에 따르면, 상기 파일명 메타데이터를 메모리(130,350,670)에 기록하는 동작은 상기 파일명 메타 데이터를 상기 파일명 메타데이터의 속성 별로 상기 메모리(130,350,670)에서 상이한 메타데이터 영 역에 기록하는 동작; 및 상기 파일명 메타데이터를 상기 메모리(130,350,670)에서 동일한 메타데이터 영역 에 저장하는 동작을 더 포함할 수 있다. 일 실시예에 따르면, 상기 전자 장치(101,300)의 동작 방법은 상기 파일명 메타데이터 중 상기 암호화된 CI 파일명, 상기 암호화된 CI 파일명의 길이, 및 상기 제1 해시 값을 상기 원본 파일의 디렉토리 엔트리 영역에 기록하는 동작; 및 상기 파일명 메타데이터 중 상기 비트 정보를 상기 원본 파일의 아이-노드 공간 또는 추가 속성 공간에 분리하여 기록하는 동작 중 적어도 하나를 더 포함할 수 있다. 일 실시예에 따르면, 상기 타겟 파일을 탐색하는 동작 760은 상기 타겟 파일의 파일명을 제1 유형의 문자들로 표현한 제2 CI 파일명을 생성하는 동작 910; 상기 제2 CI 파일명을 암호화하는 동작 920; 상기 암호화한 제2 CI 파일명에 대응하는 제2 해시 값을 산출하는 동작 930; 상기 제1 해시 값과 상기 제2 해시 값 간의 일치 여부를 제1 비교하는 동작 940; 및 상기 제1 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 제1 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작은 상기 제1 비교 결과가 일치하는 경우, 상기 메모리(130,350,670)에 기록된 상기 암호화한 CI 파일명과 상기 암호화한 제2 CI 파일명 간의 파일명 길이 및 문자열의 일치 여부를 제2 비교하는 동작 950; 및 상기 제2 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작 960을 포함할 수 있다. 일 실시예에 따르면, 상기 제2 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작은 상기 제2 비교 결과가 일치하는 경우, 상기 비트 정보를 기초로, 상기 비트 정보에 포함된 비트들의 순서에 해당하는 상기 CI 파일명 의 문자를, 상기 비트 정보에 따라 대문자 또는 소문자로 변환함으로써 상기 원본 파일의 파일명을 복원하는 동 작을 포함할 수 있다. 일 실시예에 따르면, 상기 제2 비교 결과에 기초하여, 상기 타겟 파일을 탐색하는 동작은 상기 제2 비교 결과가 일치하지 않는 경우, 상기 메모리(130,350,670)에 저장된 나머지 파일명들에 대응하는 해시 값들과 상기 제2 해 시 값의 일치 여부를 반복적으로 비교하는 동작을 포함할 수 있다.부호의 설명 300: 전자 장치 310: 통신 인터페이스 330: 프로세서 350: 메모리"}
{"patent_id": "10-2022-0000422", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 2은 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 도 3은 일 실시예에 따른 전자 장치의 블록도이다. 도 4a 및 도 4b는 일 실시예에 따른 파일명을 저장하는 과정 및 파일명을 검색하는 과정을 설명하기 위한 도면 이다. 도 5는 일 실시예에 따른 파일의 구조를 설명하기 위한 도면이다. 도 6은 일 실시예에 따른 파일 시스템의 구조를 도시한 블록도이다. 도 7은 일 실시예에 따른 전자 장치의 동작 방법을 나타낸 흐름도이다. 도 8a는 일 실시예에 따른 파일명 메타데이터의 일 예시를 도시한 도면이다. 도 8b는 일 실시예에 따른 비트 정보의 생성 방법을 설명하기 위한 도면이다 도 9는 일 실시예에 따라 타겟 파일을 탐색하는 방법을 나타낸 흐름도이다. 도 10은 일 실시예에 따라 파일명을 탐색하는 방법을 나타낸 흐름도이다. 도 11은 일 실시예에 따라 파일명을 검사하는 방법을 나타낸 흐름도이다."}
