{"patent_id": "10-2022-0153622", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0071751", "출원번호": "10-2022-0153622", "발명의 명칭": "저전력 장거리 무선네트워크에서 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송", "출원인": "대구대학교 산학협력단", "발명자": "유성은"}}
{"patent_id": "10-2022-0153622", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "단말 장치가 송신한 업링크(uplink) 메시지를 수신 받아 네트워크 서버로 전달하는 게이트웨이를 포함하는LoRaWAN(Long Range Wide Area Network)에서 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도변경 방법에 있어서,상기 단말 장치와 상기 게이트웨이와의 거리가 멀고 주위에 장애물이 많아 상기 네트워크 서버와 연결이 끊어질경우, 상기 단말 장치에서 확산 계수(SF, Spreading Factor) 값을 최대로 높여 상기 네트워크 서버와의 연결을바로 회복시키는 단계;를 포함하는 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도 변경 방법."}
{"patent_id": "10-2022-0153622", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 단말 장치에서 상기 네트워크 서버와 연결되고 있는지 확인하는 “ADRACKReq” 신호의 전송 주기를 감소시켜 상기 네트워크 서버의 ADR(Adaptive Data Rate) 실행 주기를 단축시키는 단계;를 더 포함하는 것을 특징으로하는 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도 변경 방법."}
{"patent_id": "10-2022-0153622", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 네트워크 서버는 상기 단말 장치가 송신한 업링크(uplink) 메시지 받을 때마다 최근 소정의 개수의 패킷의SNR 값을 GRU(Gated Recurrent Unit) 딥러닝 모델로 학습하여 다음의 SNR 값을 예측하고, 예측된 SNR 값을 토대로 데이터 레이트(DR, Data Rate) 및 송신전력(TP, Transmission Power)을 결정하고 상기 단말 장치로 전송하는 단계;를 더 포함하는 것을 특징으로 하는 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도변경 방법."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "단말 장치가 송신한 업링크(uplink) 메시지를 수신 받아 네트워크 서버로 전달하는 게이트웨이를 포함하는 LoRaWAN(Long Range Wide Area Network)에서 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도 변 경 방법에 있어서, 단말 장치와 게이트웨이와의 거리가 멀고 주위에 장애물이 많아 네트워크 서버와 연결이 끊어 질 경우, 단말 장치에서 확산 계수(SF, Spreading Factor) 값을 최대로 높여 네트워크 서버와의 연결을 바로 회 복시키는 단계를 포함하는 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도 변경 방법이 제공된다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 적응적 데이터 전송 속도 변경 방법에 관한 것으로서, 더 상세하게는 저전력 장거리 무선네트워크에 서 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도 변경 방법 및 그 장치에 관한 것이다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "스마트 시티에서 IoT(Internet of Things)는 도시 내 다양한 정보들을 수집하고 공유하여 업무 및 일상 생활에 도움을 주며, 클라우드, 인공지능, 빅데이터 등의 기술을 통해 하이퍼 커넥티드(Hyperconnected) 사회를 형성한 다. LoRaWAN(Long Range Wide Area Network)은 사물 인터넷(IoT)을 위한 통신 기술 중 하나로 저전력 장거리 통신 을 지원한다. LoRaWAN(Long Range Wide Area Network)은 최적의 통신 환경을 제공하기 위해 데이터 전송 속도 와 송신 전력(TP, Transmission Power)을 조절하는 ADR(Adaptive Data Rate) 기술을 지원한다. LoRaWAN ADR 알고리즘은 네트워크 서버 및 단말 장치(End device) 측에서 실행된다. 네트워크 서버 측의 ADR 알 고리즘은 데이터 속도를 높이거나 송신 전력을 조절하는 역할을 하고, 단말 장치(End device) 측의 ADR 알고리즘의 경우 데이터 속도를 낮추는 역할을 한다. 네트워크 서버 측의 ADR(Adaptive Data Rate)은 대표적인 LoRa 칩셋 제조업체인 Semtech에서 권장한 알고리즘으 로, 네트워크 서버는 최근 20개 패킷의 SNR (Signal-to-Noise Ratio) 중 가장 높은 값을 사용해 단말 장치(End device)에게 데이터 전송 속도를 높이고 송신 전력을 조절하는 명령을 보낸다. 단말 장치(End device) 측의 ADR 알고리즘은 LoRaWAN 1.0.4 표준에서 설명하고 있으며, 단말 장치(End device)와 게이트웨이(gateway)간의 거리 가 멀거나 장애물의 영향을 받아 네트워크 서버까지 패킷이 도달하지 못할 경우 실행된다. 단말 장치(End device)는 SF(Spreading Factor)를 점차 높여 DR(Data Rate)을 줄이고 이로 인해 ToA(Time on Air)를 증가시키 지만 LoRa radio packet을 멀리 보낼 수 있다. 상기 두 ADR 알고리즘을 사용하면 네트워크 상황에 따라 최적의 확산 계수(SF, Spreading Factor) 및 송신 전력(TP, Transmission Power)를 찾아 에너지 낭비를 줄임과 동시에 최적의 데이터 전송 속도를 제공할 수 있다. 이전 연구에서는 이동성이 있는 환경에서 손실되는 패킷의 수를 줄이고 에너지 소비 효율을 높이기 위해 기존 네트워크 서버 측의 ADR을 개선시킨 딥러닝 기반의 GRU(Gated Recurrent Unit) ADR을 제안하였다. GRUADR은 네 트워크 서버에서 딥러닝 모델 중 하나인 GRU 모델로 최근 SNR 값을 학습하여 데이터 전송 속도와 송신 전력을 계산하는 알고리즘이다. GRU-ADR은 기존 네트워크 서버 측의 ADR 보다 PDR (Packet Delivery Ratio) 및 에너지 소비 효율을 증가시켰다. 하지만, GRU-ADR은 네트워크 서버 측에서 동작하는 ADR로, 모바일 환경에서 단말 장치 (End device)가 네트워크 서버와 연결이 끊어져 연결을 회복하는 단계에서 손실되는 패킷을 줄여줄 수 있는 단 말 장치(End device) 측 ADR이 여전히 필요하다. - LoRaWAN 기술 개요 LoRa(Long Range)는 사물인터넷을 위한 통신 기술 중 하나로 Semtech에서 개발한 물리 계층의 기술이며 CSS(Chirp Spread Spectrum) 변조를 기반으로 저전력 장거리 통신이 가능하다. 또한 누구나 무료로 사용할 수 있는 비 면허 대역인 ISM (Industrial Scientific and Medical) 대역을 사용한다. 도 1은 LoRaWAN(Long Range Wide Area Network) 구조를 나타낸 도면이다. LoRaWAN은 LoRa 기술을 기반으로 로라 얼라이언스(LoRa Alliance)에서 표준화된 데이터 링크 계층을 포함하는 장거리 무선 통신 기술이다. LoRaWAN 아키텍처는 단말 장치(end device), 게이트웨이(gateway), 네트워크 서버, 조인 서버 및 응용 서버로 구성된다. LoRaWAN 아키텍처는 단말 장치(end device) 여러 개가 하나 이상의 게이트 웨이(gateway)에 직접 연결되는 스타 토폴리지(star topology)로 구성되며, 단말 장치(end device)가 송신하는 업링크(uplink) 메시지는 하나 이상의 게이트웨이(gateway)를 거쳐 네트워크 서버, 조인 서버, 응용 서버로 전 송된다. 단말 장치(End device)는 CF(Carrier Frequency), BW(Bandwidth), SF(Spreading Factor), TP(Transmission Power), CR(Coding Rate)과 같은 5가지 매개변수를 사용하여 패킷을 전송한다. CF(Carrier Frequency)는 프레 임 전송이 발생하는 중심 주파수를 의미하며 CF(Carrier Frequency)의 범위는 지역에 따라 다르다. BW(Bandwidth)는 대역폭으로 125 kHz, 250 kHz, 500 kHz로 구성된다. SF(Spreading Factor)는 \"Chirp Spread Spectrum\"을 사용하는 LoRa에서 \"chirp rate\" 를 제어하며 South Korea 920-923MHz ISM band에서 7에서 12 사 이의 정수 값을 사용한다. SF(Spreading Factor)의 값이 크면 클수록 노이즈에 강하고 송신 거리가 늘어나지만 데이터 전송 속도가 줄어들 기 때문에 ToA(Time on Air)가 증가하여 에너지 소모가 늘어난다. TP(Transmission Power)는 송신 신호 전력을 의미하고, CR(Coding Rate)은 실제로 정보를 전달하는 비트의 비율을 나타내며 패리티 비트들은 오류 감지 및 수정에 사용된다. CR(Coding Rate) 값으로는 4/5, 4/6, 4/7, 4/8 중 하나를 사용하는데 예를 들어 CR=4/5인 경 우 4비트가 정보를 전달하고 1비트가 오류 수정에 사용 됨을 의미한다. CR값이 낮을수록(4/8이 가장 낮음) 간섭 및 잡음에 강해 전송 신뢰성이 높아지지만 전송 속도가 낮아져 ToA(Time on Air)가 늘어나기 때문에 에너지 소 비가 증가한다. 게이트웨이(gateway)는 IP 네트워크를 사용하여 네트워크 서버와 통신을 수행하며 단말 장치 (end device)가 송신한 업링크(uplink) 메시지를 수신 받아 RSSI(Received Signal Strength Indicator) 및 SNR 값을 덧붙여 네트워크 서버로 전달하는 역할을 한다. 또한 게이트웨이(gateway)에 서로 다른 확산 계수(SF, Spreading Factor가 동시에 수신되어도 직교성의 특징 때 문에 충돌이 발생하지 않는다. 네트워크 서버는 다양한 게이트웨이(gateway)에서 받은 패킷 중 중복된 패킷을 제거하고 네트워크 상황이 가장 좋은 게이트웨이(gateway)가 수신한 패킷을 선택한다. 또한 장치의 신뢰성과 무 결성을 검증하고, 단말 장치(end device)의 데이터 전송 속도와 송신 전력을 최적화하기 위해 ADR 알고리즘을 수행한다. 조인 서버는 LoRaWAN 1.1 version부터 추가된 서버로 보안을 높이기 위해 기존에 네트워크 서버에서 처리하던 장치 등록 과정을 담당한다. 응용 서버는 데이터를 안전하게 처리하고 관리, 해석하며 uplink 메시지 데이터의 복호화 및 디코딩, 다운링크(downlink) 메시지 데이터의 인코딩 및 암호화를 처리한다. LoRaWAN에서는 Class A, Class B, 및 Class C의 세 가지 장치 유형이 있다. 모든 LoRaWAN end device는 Class A가 구현되어 있다. Class A device는 송신할 데이터가 있을 경우에만 액티브(active) 상태에서 데이터를 송신 하고 그 외의 시간에는 슬립(sleep) 상태를 유지하여 에너지를 절약한다. 송신 후 일정 시간 동안 수신 윈도우 (receive window) 두 개를 열어 다운링크(downlink) 메시지를 받을 수 있다. Class A device는 주로 배터리를 사용한 센싱이나 송신 위주의 서비스에 사용되며 가장 적은 에너지를 사용한다. Class B는 Class A에 존재하는 수신 윈도우 외에도 네트워크 서버에서 주기적으로 다운링크 메시지를 수신하기 위해 예약된 수신 윈도우를 열 수 있어 동기화가 중요한 장치에 사용된다. Class C는 언제든지 수신이 가능한 상태를 유지하기 위해 슬립(sleep) 상태에 빠지지 않는다. 에너지 소모가 가장 많으므로 배터리가 아닌 상시 전원을 사용하여야 한다. LoRaWAN에서는 단말 장치(end device)의 배터리 수명과 전송 효율을 최대화하기 위해 ADR(Adaptive Data Rate) 알고리즘을 사용하여 데이터 전송 속도와 송신 전력을 관리할 수 있다. ADR(Adaptive Data Rate)은 단말 장치 (end device) 및 네트워크 서버에서 지원되며 현재 네트워크 상황을 고려하여 적절한 전송 파라미터를 설정하는 알고리즘이다. 단말 장치(End device)에서 실행되는 ADR 알고리즘의 목적은 단말 장치(end device)가 송신한 업링크(uplink) 메시지가 게이트웨이(gateway)와의 거리가 멀거나 장애물로 인해 네트워크 서버까지 도달하지 않을 경우 확산 계수(SF, Spreading Factor)를 높여 유효 송신 거리를 증가시킴으로써 전송 성공률을 높이는 것이다. 다만, 이 경우 높은 확산 계수(SF, Spreading Factor)로 인해 상대적으로 데이터 전송 속도가 낮아져 ToA(Time on Air) 가 증가하고 이로 인해 소모 에너지가 증가된다. <표 1> 표 1은 단말 장치(End device) ADR(Adaptive Data Rate)알고리즘을 나타낸다. 단말 장치(End device) 측의 ADR 알고리즘은 LoRaWAN 1.0.4 버전에 표준화되어 있으며 LoRa 시뮬레이션 프레임 워크인 FLoRa 프레임워크에서는 표 1과 같이 동작한다. 단말 장치(End device)는 ADR_ACK_CNT, ADR_ACK_LIMIT 및 ADR_ACK_DELAY 세 가지의 값을 사용하고 ADR 비트가 활성화된 업링크(uplink) 메시지를 보낼 때마다 ADR 알고리즘을 수행한다. ADR_ACK_CNT는 단말 장치(End device)가 업링크(uplink) 메시지를 보낼 때마다 증가되는 값이며 이 값이 ADR_ACK_LIMIT (default value: 64)까지 증가되면 단말 장치(End device)는 다음 업링크(uplink) 패킷에 ADRACKReq 비트를 활성화한다. 네트워크 서버는 단말 장치(End device)로부터 ADRACKReq가 활성화된 패킷을 받으면 ADR_ACK_DELAY (default value: 32) 기간 내에 LinkADRReq MAC command가 포함된 다운링크(downlink) 메시지를 보내야한다. 이 때 단말 장치(End device)의 ADR_ACK_CNT 값이 ADR_ACK_LIMIT와 ADR_ACK_DELAY를 더한 값에 도달할 때까지 단말 장치(End device)는 현재 사용하고 있는 확산 계수(SF, Spreading Factor) 값을 사용하여 업링크(uplink) 메시지를 보내면서 네트워크 서버로부터 LinkADRReq MAC command가 포함된 다운링크(downlink) 메시지를 기다린 다. 단말 장치(End device)가 네트워크 서버로부터 이 응답을 받으면 LinkADRAns MAC command를 포함한 업링크 (uplink) 메시지로 응답하고 확산 계수(SF, Spreading Factor) 및 송신전력(TP, Transmission Power) 값을 네 트워크 서버에서 계산한 값으로 변경하며 ADR_ACK_CNT 값을 0으로 초기화한다. 단말 장치(End device)의 ADR_ACK_CNT 값이 ADR_ACK_LIMIT와 ADR_ACK_DELAY를 더한 값에 도달할 때까지 네트워 크 서버로 부터 LinkADRReq MAC command가 포함된 다운링크(downlink) 메시지를 받지 못하면, 단말 장치(End device)의 현재 확산 계수(SF, Spreading Factor)로는 네트워크 서버와 연결이 불가한 것으로 간주하여 유효 송 신 거리를 높이기 위해 확산 계수(SF, Spreading Factor) 값을 한 단계 증가시키고 다시 ADR_ACK_DELAY 기간만 큼 업링크(uplink) 패킷을 전송한다. 단말 장치(End device)가 네트워크 서버로부터 LinkADRReq MAC command가 포함된 다운링크(downlink) 메시지를 받거나 최대 확산 계수(SF, Spreading Factor) 값까지 증가할 때까지 이 과정을 반복한다. 네트워크 서버 측의 ADR(Adaptive Data Rate) 알고리즘은 Semtech에서 권장한 알고리즘을 기준으로 설명하고 본 발명에서는 Semtech ADR로 명명한다. 네트워크 서버 측의 ADR(Adaptive Data Rate)은 최적의 통신환경을 제공하 기 위해 단말 장치(End device)의 신호 감도에 따라 적절한 데이터 전송 속도와 송신 전력을 설정하는 알고리즘 이다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "Semtech ADR에서 네트워크 서버는 단말 장치(End device)에서 보낸 업링크(uplink) 메시지가 수신될 때마다 SNR 값을 리스트로 저장하고 ADR 알고리즘을 수행한다. 네트워크 서버는 식 과 같이 최근 20개의 SNR 값들 중 가 장 높은 SNR 값과 마지막 패킷의 DR(Data Rate)에 대한 SNR 값인 Required SNR 그리고 단말 장치(End device) 의 정적 매개변수를 통해 SNRmargin 값을 구한다. 그 후 식 와 같이 SNRmargin 값을 3으로 나누어 정수 값으 로 변환한 후 Nstep 값을 구한다. 도 2는 LoRaWAN(Long Range Wide Area Network) 네트워크 서버 ADR(Adaptive Data Rate) 알고리즘을 나타낸 도 면이다. 도 2는 Semtech ADR 알고리즘으로 식 에서 계산된 Nstep 값을 통해 DR(Data Rate)과 송신전력(TP, Transmission Power)를 계산한다. 계산된 Nstep 값이 양수이면 높은 데이터 전송 속도와 낮은 전력으로 통신이 가능한 환경이지만, 현재 낮은 데이터 전송 속도를 사용하고 있거나 통신에 필요한 송신 전력보다 전력 보다 높 게 사용하고 있다는 의미이다. 따라서 이 경우 데이터 전송 속도를 점차 높이고 그 후 송신 전력을 3 dBm씩 점 차 감소시킨다. Nstep 값이 음수이면 송신 전력을 약하게 사용하고 있다는 의미로 전송 전력을 3 dBm씩 점차 증 가시킨다. 이 때, 데이터 전송속도의 경우 단말 장치(End device) 측의 ADR(Adaptive Data Rate)이 데이터 전송 속도 감 소를 지원하기 때문에 네트워크 서버에서는 데이터 전송 속도를 감소시키지 않는다. Nstep 값이 0이면 현재 최 적의 데이터 전송 속도와 송신 전력으로 통신 중이라는 의미로 알고리즘을 종료한다. 네트워크 서버는 ADRACKReq 비트가 활성화된 업링크(uplink) 패킷을 수신 받으면 데이터 전송 속도와 송신 전력을 설정하는 LinkADRReq MAC command를 단말 장치(End device)에게 전송한다. - LoRaWAN ADR과 관련된 기존 연구 ADR+는 네트워크 서버 측 ADR 알고리즘으로 기존 네트워크 서버 측의 ADR 알고리즘 일부를 개선한 모델이다. 네트워크 서버에서 최근 20개 SNR 값의 평균값을 구해 확산 계수(SF, Spreading Factor) 및 송신전력(TP, Transmission Power)를 설정하였다. 저자는 시뮬레이션을 통해 ADR+ 메커니즘의 효율성을 평가하였으며, 이를 위해 OMNET++ 기반의 오픈 소스 이벤트 구동 시뮬레이터인 FLoRa 프레임워크를 개발하였다. 이전 연구에서 다룬 GRU-ADR은 네트워크 서버 측 ADR을 개선한 알고리즘으로 네트워크 서버에서 최근 업링크 (uplink)된 20개의 SNR 값을 딥러닝 모델인 GRU 모델로 실시간 상황을 학습하여 최적의 확산 계수(SF, Spreading Factor)와 송신 전력(TP, Transmission Power)을 설정하였다. 특히 이동성이 있는 단말 장치(End device)에서 PDR(Packet Delivery Ratio)과 에너지 소비 효율을 증가시켰다. E-ADR(Enhanced ADR)은 RSSI 값을 기반으로 삼변 측량 방법을 사용하여 위치를 예측하고 단말 장치 (End device)의 위치를 기반으로 최적의 확산 계수(SF, Spreading Factor) 및 송신전력(TP, Transmission Power)을 계산 후 전송 시간, 에너지 소비 및 패킷 손실을 최소화하려고 하였다. 위의 세 가지 ADR 알고리즘은 네트워크 서버 측의 ADR을 개선한 것으로 단말 장치(End device) 측의 ADR 알고리 즘은 고려하지 않았다. NbADR (Node-based ADR)은 confirmed mode에서 Class A device에 대한 ADR 알고리즘을 제안하였다. NbADR은 단말 장치(End device) 측의 ADR 알고리즘으로 네트워크 서버로부터 받은 다운링크 (downlink) 메시지 패턴을 기반으로 채널 상황에 빠르게 대응하고, EoE (Efficiency of Energy) 메트릭을 활용 하여 효율적인 에너지 소모를 위한 전송 파라미터를 선택한다. NbADR은 기존의 ADR 메커니즘들과 비교하여 에너 지 효율성 측면에서 효과적이고, 급격하게 변화하는 채널 환경에서 LoRa 네트워크의 처리량을 보장하고 노드 간 공평성을 향상시킨다. LR+ADR (Linear Regression + Adaptive Data Rate)은 단말 장치(End device) 측의 ADR을 개선한 알고리즘이다. 네트워크 서버와 연결이 끊어진 경우 신속하게 다시 연결하기 위해 단말 장치(End device)의 매개변수를 조절한 다. 또한 마지막으로 수신된 확인 패킷을 계산하는 새로운 매개변수 ADR_ACK_RECEIVE_CNT를 도입하여 안정적인 연결이 있다는 신호를 파악하여 신속하게 네트워크 상황을 회복하고 패킷 손실을 줄인다. 선행기술문헌 비특허문헌 (비특허문헌 0001) S. Li, U. Raza, and A. Khan, “How agile is the adaptive data rate mechanism of LoRaWAN,” 2018 IEEE Global Communications Conference, pp. 206-212, 2018."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 상기와 같은 기술적 과제를 해결하기 위해 제안된 것으로, LoRaWAN(Long Range Wide Area Network) 에서 이동성이 있는 LoRa 단말(device)의 연결성(connectivity) 개선을 위해서 단말 장치(End device) 측의 ADR 알고리즘을 개선한 FCR-ADR(Fast Connection Recovery ADR)을 제안한다. 본 발명은 상술한 두 관련 연구와 다르게 새로운 매개변수를 필요로 하지 않으며, 이동성 있는 단말 장치(End device)를 고려하여 신속한 연결 회복이 가능하도록 단말 장치(End device) 측의 ADR 알고리즘을 개선하였다.제안한 FCR-ADR 알고리즘은 이동성 있는 단말 장치(End device)가 네트워크 서버와 연결이 단절되면 신속하게 연결을 회복시키고, 연결 회복 지연 시간을 조절하여 적은 에너지를 소비하면서 연결 회복 과정 중 손실되는 패 킷을 줄이는 것에 중점을 두었다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 문제점을 해결하기 위한 본 발명의 일 실시예에 따르면, 단말 장치가 송신한 업링크(uplink) 메시지를 수 신 받아 네트워크 서버로 전달하는 게이트웨이를 포함하는 LoRaWAN(Long Range Wide Area Network)에서 네트워 크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도 변경 방법에 있어서, 단말 장치와 게이트웨이와의 거 리가 멀고 주위에 장애물이 많아 네트워크 서버와 연결이 끊어질 경우, 단말 장치에서 확산 계수(SF, Spreading Factor) 값을 최대로 높여 네트워크 서버와의 연결을 바로 회복시키는 단계를 포함하는 네트워크 연결 복구 시 간 단축을 위한 적응적 데이터 전송 속도 변경 방법이 제공된다. 또한, 단말 장치에서 네트워크 서버와 연결되고 있는지 확인하는 “ADRACKReq” 신호의 전송 주기를 감소시켜 네트워크 서버의 ADR(Adaptive Data Rate) 실행 주기를 단축시키는 단계를 더 포함하는 것을 특징으로 한다. 또한, 네트워크 서버는 단말 장치가 송신한 업링크(uplink) 메시지 받을 때마다 최근 소정의 개수의 패킷의 SNR 값을 GRU(Gated Recurrent Unit) 딥러닝 모델로 학습하여 다음의 SNR 값을 예측하고, 예측된 SNR 값을 토대로 데이터 레이트(DR, Data Rate) 및 송신전력(TP, Transmission Power)을 결정하고 단말 장치로 전송하는 단계 를 더 포함하는 것을 특징으로 한다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 FCR-ADR(Fast Connection Recovery ADR) 알고리즘, 즉 네트워크 연결 복구 시간 단축을 위한 적응적 데이터 전송 속도 변경 방법은 거리나 장애물로 인해 네트워크 서버와 연결이 끊어졌을 때, 노이즈에 가장 강하 고 통달 거리가 가장 긴 SF(Spreading Factor)를 먼저 사용함으로써 연결 회복 지연 시간을 감소시키고, 링크 연결을 신속하게 회복하기 때문에 기존 단말 장치(end device) 측의 ADR 알고리즘에 비해 패킷 손실을 줄인다. OMNeT++ 기반의 성능 평가 결과, 특히 FCR-ADR을 네트워크 서버 측의 GRU-ADR과 함께 사용하면 기존의 네트워크 서버 측의 ADR 알고리즘을 사용할 때보다 패킷 손실을 더욱 줄일 수 있었다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자가 본 발명의 기술적 사상을 용이하게 실시할 수 있을 정도로 상세히 설명하기 위하여, 본 발명의 실시예를 첨부한 도면을 참조하여 설명하기로 한다. - FCR-ADR Algorithm 제안된 FCR-ADR(Fast Connection Recovery ADR) 알고리즘, 즉 네트워크 연결 복구 시간 단축을 위한 적응적 데 이터 전송 속도 변경 방법에 대해서 설명한다. 기존 단말 장치(End device) 측의 ADR(Adaptive Data Rate)은 이동성을 고려하지 않은 알고리즘으로, 연결이 회복될 때까지 확산 계수(SF, Spreading Factor)값을 한 단계씩 증가시켜 네트워크 연결을 회복하는데 상당한 시간이 소모되었다. 특히 단말 장치(End device)가 이동하면서 게이트웨이(gateway)와의 거리가 멀어지게 되면 통신을 하기 위해 필 요한 확산 계수(SF, Spreading Factor) 값이 증가된다. 확산 계수(SF, Spreading Factor) 값을 한 단계씩 증 가시키는 기존 단말 장치(End device) 측의 ADR(Adaptive Data Rate) 방식으로는 통신에 필요한 확산 계수(SF, Spreading Factor) 값까지 도달하는데 걸리는 지연 시간이 길어져 그 동안 손실되는 패킷이 많아지는 문제가 생 긴다. 따라서 이동성이 있는 LoRaWAN에서 이러한 문제점을 해결하기 위해 기존 단말 장치(End device) 측의 ADR 보다 신속하게 네트워크 연결을 회복시키는 FCR-ADR 알고리즘을 제안한다. 제안된 FCR-ADR(Fast Connection Recovery ADR) 알고리즘, 즉 네트워크 연결 복구 시간 단축을 위한 적응적 데 이터 전송 속도 변경 방법은, 단말 장치(End device)가 업링크(uplink) 메시지를 보낼 때마다 실행된다. FCR-ADR은 단말 장치(End device)와 게이트웨이(gateway)와의 거리가 멀고 주위에 장애물이 많아 네트워크 서버 와 연결이 끊어지면 확산 계수(SF, Spreading Factor) 값을 최대로 높여 네트워크 서버와의 연결을 바로 회복시 킬 수 있다. 다만, 이 경우 지나치게 높은 확산 계수(SF, Spreading Factor)로 설정하여 에너지 낭비가 초래될 수 있으므로, 최적의 SF(즉, 연결성을 유지하면서 가장 높은 전송 속도를 지원하는 SF)를 빠른 시간내에 찾기 위해 ADRACKReq 정보를 전송하는 주기를 감소시킨다. 단말 장치(End device)의 현재 확산 계수(SF, Spreading Factor) 값이 낮은 경우 단말 장치(End device)와 게 이트웨이(gateway)와의 거리가 가깝고 통신 상태가 좋은 상황으로, 단말 장치(End device)는 ADRACKReq 전송 주 기를 높여(증가시켜) ADR 실행과 관련된 네트워크 트래픽을 감소시킨다.<표 2>"}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "표 2는 FCR-ADR(Fast Connection Recovery ADR) 알고리즘을 나타내고, 도 3은 본 발명의 FCR-ADR(Fast Connection Recovery ADR) 알고리즘을 나타낸 도면이다. 도 3 및 표 2를 참조하여 제안된 FCR-ADR 알고리즘을 보다 세부적으로 설명한다. 먼저, 단말 장치(End device)의 ADR_ACK_CNT 값이 ADR_ACK_LIMIT까지 도달하면(표 2의 7번 줄) 다음 패킷에 ADRACKReq 비트를 활성화하여 네트워크 서버에게 ADR 응답을 요청한다. 네트워크 서버는 ADRACKReq 비트가 설정된 메시지를 받으면 단말 장치(End device)에게 적절한 확산 계수(SF, Spreading Factor) 및 송신전력(TP, Transmission Power) 값을 포함하는 LinkADRReq MAC command로 응답한다. 이를 수신한 단말 장치(End device)는 ADR_ACK_CNT를 0으로 초기화하고, 수신한 확산 계수(SF, Spreading Factor) 및 송신전력(TP, Transmission Power) 값으로 자신의 확산 계수(SF, Spreading Factor) 및 송신전력 (TP, Transmission Power) 값을 설정한다. 하지만 단말 장치(End device)와 네트워크 서버와의 연결이 원활하 지 못해 ADRACKReq 비트를 포함하는 메시지가 네트워크 서버에 전달되지 못하거나 네트워크 서버가 응답한 LinkADRReq MAC command를 단말 장치(End device)가 수신하지 못하는 경우 ADR_ACK_CNT는 계속 증가한다. ADR_ACK_CNT 값이 ADR_ACK_LIMIT와 ADR_ACK_DELAY를 더한 값 보다 높아지면 단말 장치(End device)는 현재 확 산 계수(SF, Spreading Factor) 값으로는 패킷이 게이트웨이(gateway)까지 도달할 수 없으며 그로 인해 네트워 크 서버와 통신이 불가한 것으로 판단한다. 그래서 단말 장치(End device)는, 신속하게 연결을 회복하기 위해 확산 계수(SF, Spreading Factor) 값을 최대 로 설정하고 ADR_ACK_CNT의 값을 0으로 초기화한다(표 2의 17-24번 줄). 다만, 이 경우 필요 이상으로 높은 확산 계수(SF, Spreading Factor) 값을 설정해 에너지의 낭비를 초래할 수 있기 때문에 가급적 빨리 최적의 확산 계수(SF, Spreading Factor)를 찾을 필요가 있다. 이를 위해 단말 장치(End device)의 ADR_ACK_LIMIT와 ADR_ACK_DELAY 값을 절반으로 나누어 ADRACKReq 비트를 전송하는 주기를 감소시켜, 네트워크 서버측 ADR 실행 주기를 단축시킨다. 이를 통해 단말 장치(End device) 는 빠른 시간 내에 최적의 확산 계수(SF, Spreading Factor)를 찾을 수 있다. South Korea 920-923MHz ISM band에서 SF 값은 7에서 12사이의 정수 값을 가지며 단말 장치(End device)와 게 이트웨이(gateway) 사이의 거리가 가깝고 송수신 신호의 품질이 좋으면 낮은 확산 계수(SF, Spreading Factor) 값을 사용할 수 있다. 단말 장치(End device)의 확산 계수(SF, Spreading Factor) 값이 낮으면 LoRa 네트워크의 연결상태가 좋은 것 을 의미하기 때문에, 네트워크 서버와 연결되고 있는지 확인하는 ADRACKReq 정보 전송 주기를 높여(증가시켜) (표 2의 25-30번 줄) ADR 업데이트를 천천히 수행하게 되는데 이는 다운링크(downlink) 트래픽을 감소시키는 효 과가 있다. - 성능 평가 시뮬레이터 환경에서 FCR-ADR을 구현하여 그 성능을 평가한 결과를 서술한다. OMNeT++ 시뮬레이터 내부에 LoRaWAN을 시뮬레이션하기 위해 Inetmanet-4.x 프레임워크를 사용한다. OMNeT++ 시뮬레이터는 네트워크 시뮬레이터를 구축하기 위한 모듈식 구성 요소 기반 C++ 시뮬레이터이다. Inetmanet-4.x 프레임워크는 INET 프레임워크와 FLoRa 프레임워크를 포함하고 있다. INET 프레임워크는 OMNeT++ 시뮬레이션 환경을 위한 오픈 소스 통신 네트워크 시뮬레이션 패키지이며 다양한 유 선 및 무선 프로토콜에 대한 모델, 세부 물리 계층 모델, 애플리케이션 모델 등이 포함되어 있다. FLoRa 프레임워크는 LoRa 물리 계층, LoRaWAN MAC 프로토콜, 게이트웨이, 네트워크 서버와 같은 모든 네트워크 요소를 지원하는 LoRa 시뮬레이션 프레임 워크이다. 시뮬레이션 환경으로 VMware16과 Ubuntu 20.04를 사용하여 가상환경을 구축하고, 2022년 02월 07일에 릴리즈된 OMNeT++ 6.0 Release Candidate 1 버전과, 2022년 02월 14 일에 업데이트된 Inetmanet4.x를 사용하여 시뮬레이션 환경을 구축하였다. <표 3>"}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "표 3은 시나리오 매개변수 설정을 나타내고, 도 4는 시뮬레이션 배치를 나타낸 도면이다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "시뮬레이션에서 사용할 매개 변수를 표 3에 요약한다. 시뮬레이션 기간은 3일로 설정하였고, 도 4와 같이 시뮬 레이션 영역은 양 축으로 2 km 크기의 정사각형 영역으로 설정하였다. 단말 장치(End device)와 게이트웨이 (gateway)의 초기 위치로는 (x position: 1500 m, y position: 1500 m)으로 설정하였다. Mobility 모델로는 단 말 장치(End device)가 이동한 다음 일정 시간 동안 정지한 뒤, 임의의 위치로 이동하는 모델인 RandomWaypoint 모델을 사용하였다. 단말 장치(End device)의 이동 속도는 사람의 보행 속도인 1 mps (meters per second)에서 1.5 mps 값을 사용 하였고, 180 s 마다 패킷을 주기적으로 전송하며, 대기 시간은 60 s에서 3600 s사이의 값으로 설정하였다. 경로 손실 모델로는 나무, 건물, 언덕 등 과 같은 장애물로 인한 손실을 구현하기 위해 LoRa Log Normal Shadowing을 사용하였다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "식 에서 PLdB는 전파를 전송하던 중에 발생하는 전력 손실이고, PL0는 기준 거리 d0에서의 경로 손실을 나타 낸다. γ는 경로 손실 지수이며 d는 단말 장치(End device)와 게이트웨이(gateway) 사이의 거리이다. Xσ는 송 신기와 수신기 사이에서 산이나 건물과 같은 장애물 때문에 발생하는 노이즈를 나타내며 dB 단위의 σ 표준 편 차를 갖는 가우스 분포를 가진다. 도 5는 전달된 패킷당 에너지 소모량을 나타낸 도면이고, 도 6은 패킷 전송률을 나타낸 도면이다. FCR-ADR의 성능을 분석하기 위해 기존 단말 장치(End device) ADR, LR+ADR과 비교하며, 네트워크 서버 측의 다 양한 ADR로 비교 및 평가하였다. 다양한 환경을 조성하고 평가하기 위해 Seed 값을 변경하면서 각각 10회씩 시 뮬레이션하였다. 도 5와 도 6은 각각 10회 시뮬레이션 하여 ECPD (Energy Consumption per Packet Delivered) 와 PDR(Packet Delivery Ratio)의 평균을 낸 결과이다. 도 5와 같이 FCR-ADR과 네트워크 서버 측의 Semtech ADR을 함께 사용하는 경우, ECPD 측면에서 기존 단말 장치(End device) 측의 ADR보다 적은 에너지를 소모하지만, 다른 경우에 대해서는 FCR-ADR 이 기존 단말 장치(End device) 측의 ADR보다 근소하게 많은 에너지 를 소모한다. 하지만, PDR측면에서 FCR-ADR은 모든 네트워크 서버 측의 ADR에 대해서 기존 단말 장치(End device) 측의 ADR 보다 월등히 우수한 성능을 보여준다. 도 6과 같이 기존 단말 장치(End device) 측의 ADR과 제안된 FCR-ADR을 비교해 보았을 때 Semtech ADR, ADR+ 및 GRU-ADR은 ECPD 측면에서 큰 변화 없이 PDR 측면에서 각각 5.85% 증가, 19.06% 증가, 24.13% 증가하였다. 또한 LR+ADR과도 비교하였을 때, 네트워크 서버 측의 ADR인 Semtech ADR을 함께 사용하는 경우 PDR과 ECPD 측면 에서 FCR-ADR보다 근소하게 나은 성능을 보여주지만, 다른 두 경우에는 FCR-ADR이 확연하게 더 좋은 성능을 보 여준다. 도 7은 연결 복구 시간 분포 비율(%)을 나타낸 도면이다. 전송이 끊기는 상황에서의 성능을 살펴보기 위해서, 10개의 시뮬레이션 결과 중 하나를 활용하여 연결 복구 시 간 분포를 살펴본다. 도 7은 단말 장치(End device)가 전송한 패킷이 네트워크 서버까지 도달하지 못한 경우에 대해 각 ADR 알고리즘별로 연결 복구 시간의 분포(%)를 보여준다. 도 7의 X축은 단말 장치(End device)가 네트 워크 서버와 연결이 단절된 후 복구되는 데 걸린 시간을 의미하며, Y축은 그 분포를 나타낸다. FCR-ADR은 네트 워크 서버와 연결이 단절되었을 때 SF값을 최대로 올리고 신속하게 연결을 복구하는 알고리즘으로 기존 enddevice ADR과 LR+ADR 보다 빠른 연결 복구시간의 분포가 높기 때문에 패킷 손실률을 줄이는 효과를 보인다.<표 4>"}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "표 4는 연결 복구 시간(s)을 나타낸다. 표 4는 도 7의 연결 복구 시간 분포에서는 명확하게 확인되지 않는 평균, 최대, 최소 연결 복구 시간을 나타낸 것이다. 표에서 보는 바와 같이 FCR-ADR은 최대, 최소, 평균 연결 복구 시간에 있어 다른 두 알고리즘보다 우수 하여, 이동 환경에서 단말 장치(End device)의 연결성을 향상시킴을 알 수 있다. 기존 단말 장치(End device) 측의 ADR 알고리즘은 네트워크 서버와 연결이 끊어지는 상황이 오면 연결을 회복하 는데 많은 시간이 소요되므로 그 사이 손실되는 패킷이 많았다. FCR-ADR 알고리즘은 네트워크 서버와 연결이 되지 않으면 신속하게 연결을 회복할 수 있어 손실되는 패킷의 수 를 줄일 수 있음을 보였다. 특히 GRU-ADR의 경우 Semtech ADR 및 ADR+와 달리 실시간 상황을 고려한 네트워크 서버 측의 ADR 알고리즘으로, 단말 장치(End device)의 이동성을 고려한 FCR-ADR과 같이 사용하였을 때 성능이 가장 우수함을 확인할 수 있다. - GRU 기반 적응형 데이터 전송 속도 제어 알고리즘(GRU-ADR) 제안하는 GRU-ADR, 즉 GRU 기반 적응형 데이터 전송 속도 제어 알고리즘은 이동성이 있는 단말 장치(End device)에 초점을 맞추고 있으며, 네트워크 서버에서 딥러닝 모델을 사용하여 다음 SNR 값을 실시간으로 예측하 여 채널상황에 따라 DR(data rate)및 송신전력(TP, Transmission Power)을 조율한다는 점에서 차별성이 있다. GRU-ADR, 즉 GRU 기반 적응형 데이터 전송 속도 제어 알고리즘은 기존 네트워크 서버 측 ADR(Adaptive Data Rate)을 개선한 것이다. 기존 네트워크 서버 ADR 메커니즘은 업링크(uplink) 메시지의 SNR 값을 리스트로 저장 후 최근 20개의 SNR 중 가장 큰 값인 SNRmax를 사용하여, 단말 장치(End device)에게 최적의 확산 계수(SF, Spreading Factor) 및 송신전력(TP, Transmission Power)을 설정하는 명령을 보낸다. 이 방식은 단말 장치(End device)가 정적인 상황에서는 문제가 없지만 이동성이 있을 때, 네트워크 서버에서 받 게 되는 SNR 값이 시간에 따라 급격하게 달라지기 때문에 과거 20개의 SNR 값 중 최댓값을 측정 및 사용하는 방 식으로는 적절한 SF와 TP 를 설정하기에 한계점이 있다. 적절한 확산 계수(SF, Spreading Factor) 및 송신전력 (TP, Transmission Power)을 설정하지 못하면 단말 장치(End device)에서 보내는 업링크(uplink) 메시지가 손 실될 가능성이 높아지거나 패킷 당 소비되는 에너지가 높아지는 문제점 이 발생한다. 이러한 문제점을 해결하기 위해 최근 20개의 SNR 중 가장 큰 값인 SNRmax을 구하는 것이 아닌, 최근 소정의 개 수의(본 예시는 20개 패킷) SNR 값을 딥러닝 모델인 GRU 모델로 학습하여 다음 SNR 값을 예측 하는 것으로 개선 하였다. 2014년에 등장한 GRU는 복잡한 LSTM(Long Short-Term Memory)을 간소화한 모델이다. GRU와 LSTM은 지난 데이터를 통해 미래의 값을 예측할 수 있어 다양한 시계열 데이터 예측에 사용된다. GRU(Gated Recurrent Unit)는 LSTM에 비해 단순하여 학습 속도가 빠르고, 학습 결과도 큰 차이점이 없어 본 모 델을 선정하였다. GRU(Gated Recurrent Unit)는 이전 히든 레이어에서 얼마나 값을 반영할지 정하는 reset gate와, 이전 상태를 얼마나 잊고 현재 상태를 얼마나 반영할지 정하는 update gate를 사용한다.도 8은 본 발명의 실시예에 따른 GRU 딥러닝 모델 기반 적응적 데이터 전송 속도 변경 방법을 나타낸 도면이다. GRU-ADR은 네트워크 서버에서 실행되며 도 8의 과정을 따른다. 기존 네트워크 서버 ADR처럼 업링크(uplink) 메 시지를 받을 때마다 패킷에 포함된 SNR 값을 리스트에 업데이트하고, ADRACKReq 비트가 설정된 메시지를 받으면 어떠한 ADR(Adaptive Data Rate)을 사용할 것인지 체크한다. ADR method가 GRU 일 때 GRU-ADR이 실행된다. 리 스트로 저장된 최근 20개의 SNR 값은 학습 정확도 및 학습 속도 향상을 위해 scaling 과정을 수행한다. 특정 SNR 값이 너무 크거나 작은 경우 학습에 미치는 영향력을 줄이기 위해, 적당한 범위를 유지하도록 0에서 1사이 의 값으로 바꾸는 MinMaxScaler 정규화를 사용하였다. 정규화된 데이터들은 GRU 모델로 학습을 진행한 후 하나의 결과값을 반환하고 이를 다시 정규화 전의 값으로 변 환하여 SNR을 추정한다. 마지막으로 식 와 같이 SNRmax 대신 GRU 모델로 추정한 SNR 값인 SNRgru를 사용하여 SNRmargin 과 NSetp을 계산한다. <식 4>"}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "그 후 기존 네트워크 ADR 알고리즘과 동일한 방식으로 최적의 SF 및 TP를 계산하고 단말 장치(End device)에게 LinkADRReq MAC Command를 포함한 다운링크(downlink) 메시지를 전송한다. 이 과정을 반복 수행하여 어떠한 환 경이든 딥러닝 학습을 통해 그 환경에 적응하여 적절한 전송 파라미터를 설정할 수 있다.GRU-ADR은 기존 네트워 크 서버의 ADR보다 LoRaWAN의 PDR을 향상시키고 패킷당 소모하는 에너지를 낮춘다. - 시뮬레이터에서의 성능 평가 이하 시뮬레이터 환경에서 GRU-ADR을 구현하여 그 성능을 평가한 결과를 서술한다. 시뮬레이터로는 OMNeT++를 사용하고 LoRaWAN을 시뮬레이션하기 위한 프레임워크로는 INET 프레임워크와 FLoRa 프레임워크가 포함되어 있는 Inetmanet-4.x 프레임워크를 사용하였다. OMNeT++는 네트워크 시뮬레이터를 구축하기 위한 모듈식 구성 요소 기반 C++ 시뮬레이션 라이브러리 및 프레임 워크로 주로 INET과 함께 사용된다. INET 프레임워크는 OMNeT++ 시뮬레이션 환경을 위한 오픈 소스 통신 네트워 크 시뮬레이션 패키지이며 다양한 유선 및 무선 프로토콜에 대한 모델, 세부 물리 계층 모델, 애플리케이션 모 델 등이 포함되어 있다. FLoRa란 LoRa 물리 계층, LoRaWAN MAC 프로토콜, 게이트웨이, 네트워크 서버와 같은 모 든 네트워크 요소를 지원하는 LoRa 시뮬레이션 프레임워크이다. Inetmanet-4.x 프레임워크는 최신 INET 프레임 워크와 FLoRa 프레임워크 등 다양한 네트워크 모델들을 포함하고 있어, 본 검증실험을 위해 Inetmanet-4.x 프레 임워크를 사용한다. 시뮬레이션 환경으로 VMware16과 Ubuntu 20.04를 사용하여 가상환경을 구축하고, 2022년 02 월 07일에 릴리즈된 OMNeT++ 6.0 Release Candidate 1 버전과, 2022년 02월 14일에 업데이트된 Inetmanet- 4.x를 사용하여 시뮬레이션 환경을 구축하였다. 본 실험에서는 두 가지 시나리오를 평가하였다. 첫 번째 시나리오는 하나의 단말 장치(End device, ED), 하나의 게이트웨이(gateway, GW)로 평가하였고, 두 번째 시나리오는 20개의 단말 장치(End device), 5개의 게이트웨이 (gateway)로 구성되어 있는 네트워크 환경에서의 성능을 평가하였다. GRU 모델을 사용하기 위해 인공 신경망과 딥러닝을 지원하는 오픈 소스 소프트웨어 라이브러리인 tensorflow를 사용하였다.<표 5>"}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "표 5는 시나리오 1 매개변수 설정을 나타낸 것이다 첫 번째 시나리오는 하나의 단말 장치(End device)와 게이트웨이(gateway)로 평가하여 주위 장치들의 간섭이 없"}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "는 가장 이상적인 상황일 때 성능을 비교하며 시뮬레이션에서 사용할 매개 변수를 표 3에 요약한다. 시뮬레이션 시간은 워밍업 기간 1일을 포함하여 8일로 설정하였고, 시뮬레이션 영역은 양 축에서 20km 크기 의 정사각형 영 역이며, 단말 장치(End device)와 게이트웨이(gateway)는 시뮬레이션 영역의 가운데에 배치하였다. 모빌리티 (Mobility) 모델은 INET에서 구현된 Random Waypoint 모델을 사용하였다. Random Waypoint 모델은 단말 장치 (End device)가 한 번 이동한 다음 일정 시간 동안 정지한 뒤, 임의의 위치로 이동하는 모델이다. 시뮬레이션 시간 동안 단말 장치(End device)는 시뮬레이션 영역안에서 임의의 방향으로 이동하고 240초마다 업링크 (uplink) 메시지를 전송한다. 단말 장치(End device)의 속도는 3mps(meters per second), 대기 시간은 3600s로 설정하였다. 경로 손실 모델로는 나무, 건물, 언덕 등과 같은 장애물로 인한 손실을 구현하기 위해 LoRa Log Normal Shadowing을 사용하였다. 식 는 LoRa Log Normal Shadowing의 모델을 정의한다. 여기서 PLdB는 전파를 전송하던 중에 발생하는 손실이 고, PL0 는 기준 거리 d0에서의 경로 손실을 나타낸다. γ는 경로 손실 지수이며 d는 단말 장치(End device)와 게이트웨이(gateway) 사이의 거리이다. Xσ는 송신기와 수신기 사이에서 산이나 건물과 같은 장애물 때문에 발생 하는 노이즈를 나타내며 dB 단위의 σ 표준 편차를 갖는 가우스 분포를 가진다. d0값은 좁은 지역에는 1~10m가 적합하고 넓은 지역에는 1000m 값이 적합하여 구현을 위해 1000m 값을 사용한다. <식 5>"}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "GRU-ADR의 성능을 분석하기 위해 ADR 및 ADR+를 같은 조건에서 시뮬레이션하였고, 다양한 채널 및 이동 환경을 구성하기 위해 Seed값을 변경하면서 각각 10회씩 시뮬레이션 하였다. 도 9는 패킷 전송률(1ED, 1GW)을 나타낸 도면이고, 도 10은 전달된 패킷당 에너지 소모량(1ED, 1GW)을 나타낸 도면이다. 시뮬레이션 결과를 비교하고 분석하기 위해 송신된 패킷 대비 네트워크 서버에서 수신 받은 패킷의 비율인 PDR(Packet Delivery Ratio) 및 전달된 패킷당 소비된 에너지인 ECPD(Energy Consumption per Packet Delivered) 측면에서 평가하였다. 각각 10회 시뮬레이션하여 평균을 낸 결과, PDR 측면(도 4)에서 ADR이 5.20%, ADR+가 39.99%, GRU-ADR은 48.03%인 결과를 얻었고, ECPD(Energy Consumption per Packet Delivered) 측면(도 5)에서는 ADR이 1.96W, ADR+가 0.30W, GRU-ADR는 0.27W인 결과를 얻을 수 있었다. GRU-ADR은 기존 ADR와 비교 하여 PDR을 평균 9.2배 증가시켰고, ECPD(Energy Consumption per Packet Delivered)를 평균 7.3배 감소시켰다. GRU-ADR을 ADR+와 비교했을 때 PDR은 평균 1.2배 증가, ECPD(Energy Consumption per Packet Delivered)를 평균 1.1배 감소시키는 결과를 도출했다. 이동성이 있는 단말 장치(End device)가 기존 네트워크 서버 ADR(Adaptive Data Rate)을 사용했을 때 네트워크 서버에서 패킷을 10%도 받지 못했지만, 이전 SNR 값을 학습하여 다음 SNR 값을 추정할 수 있는 GRU-ADR을 사용하면 훨씬 많은 패킷이 수신되었고, 패킷당 소비하는 에너지도 감소시킬 수 있었다. 또한 도 4의 S4에서 GRU- ADR는 ADR+에 비해 이동 환경 및 주변 환경에 영향을 덜 받아 비교적 높은 PDR이 나오는 것을 보여준다. 두 번째 시나리오는 시뮬레이션 영역을 늘리고, 단말 장치(End device)의 개수, 게이트웨이(gateway)의 개수를 늘림으로써 실제 시나리오와 비슷하게 설정하였다. 시뮬레이션 영역은 양 축에서 40 km 정사각형 영역이며 단말 장치(End device) 20개, 게이트웨이(gateway) 5개로 설정하였다. <표 6>"}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 11, "content": "도 11은 시뮬레이션 배치를 나타낸 도면이고 표 6은 시나리오 2 매개변수 설정을 나타낸 것이다. 도 11과 같이 단말 장치(End device)는 시뮬레이션 영역에 임의의 위치에 배치되고, 게이트웨이(gateway)는 시 뮬레이션 영역 중앙에 하나를 배치한 후 시뮬레이션 영역을 2 × 2로 나누고 각 영역의 중앙에 배치하였다. 또 한 600 s ~ 36000 s 사이의 정지 기간을 가지게 하여 현실과 비슷한 상황을 구성하였다. 그 외의 매개변수 설정 은 표 6과 같이 첫 번째 시나리오와 동일하게 설정하였다. 다양한 Seed 값을 사용하여 다양한 환경을 구성하였 고, 각각 5회씩 시뮬레이션 하여 평균 PDR(Packet Delivery Ratio)과 ECPD(Energy Consumption per Packet Delivered)를 측정하였다. 도 12는 패킷 전송률(20ED, 5GW)을 나타낸 도면이고, 도 13은 전달된 패킷당 에너지 소모량(20ED, 5GW)을 나타 낸 도면이다. 시뮬레이션 결과인 도 12와 도 13은 다양한 환경에서 각각 5회 시뮬레이션하여 평균 PDR(Packet Delivery Ratio)과 ECPD(Energy Consumption per Packet Delivered)을 구한 결과이다. 기존 ADR(Adaptive Data Rate)과 비교하여 PDR(Packet Delivery Ratio)은 4.7배 증가시켰고, 패킷당 전송 전력인 ECPD를 4.4배만큼 감소시켰다. ADR+와 비교했을 때 PDR)은 1.3배 증가, ECPD를 1.2배만큼 감소시키는 결과를 얻었다. GRU-ADR은 PDR과 ECPD 측면에서 평가할 때 기존 네트워크 서버 ADR 및 ADR+에 비해 네트워크 서버에서 더 많은 패킷을 수신 받았고, 전달된 패킷당 에너지도 감소되었다. 단말 장치(End device)가 이동성이 있을 때 게이트웨이와 거리가 가깝거나 장애물이 없는 환경에서는 SNR 값이 높게 측정되고, 게이트웨이와의 거리가 멀거나 장애물의 방해를 받는 환경에는 SNR이 낮게 측정된다. 기존 ADR 은 단말 장치(End device)가 이동하는 상황을 고려하지 않은 알고리즘으로, 최근에 수집된 20개의 SNR 값 중 가 장 큰 값을 사용하여 확산 계수(SF, Spreading Factor) 및 송신전력(TP, Transmission Power)을 설정한다. 기 존 ADR의 문제점은 한 번이라도 높은 SNR 값이 측정되면 나머지 SNR 값은 고려되지 않기 때문에 이동성 있는 환 경에서 성능이 좋지 않았다. ADR+의 경우 최근에 측정된 20개의 SNR 값의 평균값을 사용하는데 이는 단순 예측 기법인 평균 기법으로 볼 수 있다. 이 기법은 미래의 데이터가 과거 데이터의 평균과 같을 것이라는 가정하에 사용되는 방식으로 정적인 환경에서는 의미가 있으나, 동적인 이동 환경에서는 적절치 않다. 제안된 GRU-ADR은 GRU 딥러닝 모델 기반으로 과거 데이터의 추세를 학습하여 미래의 데이터를 예측하는 방식이기 때문에, 단순 평균 기반의 예측 방법을 사용하는 ADR+보다 성능이 우수함을 시뮬레이션 결과로 확인할 수 있다. - 결론 본 발명에서는 이동성 있는 단말 장치(End device)를 보다 효율적으로 지원하기 위해 네트워크 상황에 따라 보 다 적극적으로 연결 복구를 수행하는 FCR-ADR을 제안하였다. 기존 단말 장치(End device) 측의 ADR의 경우 게이 트웨이(gateway)와의 거리와 통신 경로 상의 장애물로 인해 네트워크 상태가 악화되었을 때, 연결이 회복되는 지연 시간이 길어, 그 사이에 손실되는 패킷이 발생하여 패킷 전송률이 매우 낮았다. FCR-ADR은 주위 통신 환경이 좋지 않아 네트워크 서버와 연결이 끊어지면 기존 단말 장치(End device) 측의 ADR 보다 신속하게 네트워크 연결을 회복하여 손실되는 패킷을 줄임으로써 우수한 PDR 성능을 보임을 확인하였다. 또한, FCR-ADR은 단말 장치(End device)의 이동성을 반영한 알고리즘이며 GRU-ADR와 함께 사용했을 때 좋은 더 성능을 보인다."}
{"patent_id": "10-2022-0153622", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "이와 같이, 본 발명이 속하는 기술분야의 당업자는 본 발명이 그 기술적 사상이나 필수적 특징을 변경하지 않고 서 다른 구체적인 형태로 실시될 수 있다는 것을 이해할 수 있을 것이다. 그러므로 이상에서 기술한 실시예들은 모든 면에서 예시적인 것이며 한정적인 것이 아닌 것으로서 이해해야만 한다. 본 발명의 범위는 상기 상세한 설 명보다는 후술하는 특허청구범위에 의하여 나타내어지며, 특허청구범위의 의미 및 범위 그리고 그 등가개념으로 부터 도출되는 모든 변경 또는 변형된 형태가 본 발명의 범위에 포함되는 것으로 해석되어야 한다."}
{"patent_id": "10-2022-0153622", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 LoRaWAN(Long Range Wide Area Network) 구조를 나타낸 도면 도 2는 LoRaWAN(Long Range Wide Area Network) 네트워크 서버 ADR(Adaptive Data Rate) 알고리즘을 나타낸 도 면 도 3은 본 발명의 FCR-ADR(Fast Connection Recovery ADR) 알고리즘을 나타낸 도면 도 4는 시뮬레이션 배치를 나타낸 도면 도 5는 전달된 패킷당 에너지 소모량을 나타낸 도면 도 6은 패킷 전송률을 나타낸 도면 도 7은 연결 복구 시간 분포 비율(%)을 나타낸 도면 도 8은 본 발명의 실시예에 따른 GRU 딥러닝 모델 기반 적응적 데이터 전송 속도 변경 방법을 나타낸 도면 도 9는 패킷 전송률(1ED, 1GW)을 나타낸 도면 도 10은 전달된 패킷당 에너지 소모량(1ED, 1GW)을 나타낸 도면 도 11은 시뮬레이션 배치를 나타낸 도면 도 12는 패킷 전송률(20ED, 5GW)을 나타낸 도면도 13은 전달된 패킷당 에너지 소모량(20ED, 5GW)을 나타낸 도면"}
