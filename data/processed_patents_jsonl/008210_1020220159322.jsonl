{"patent_id": "10-2022-0159322", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0077147", "출원번호": "10-2022-0159322", "발명의 명칭": "소스 코드 결함 수정 방법 및 장치", "출원인": "(주)아크릴", "발명자": "문병우"}}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "결함이 포함된 소스 코드 및 상기 결함에 대응하는 위치 정보를 포함하는 입력 데이터를 수신하는 단계;상기 입력 데이터를 전처리하는 단계;상기 전처리 결과를 복수의 인공 신경망 모델들에 입력하여, 상기 복수의 인공 신경망 모델들 각각으로부터 하나 이상의 후보 패치 및 상기 후보 패치에 대응하는 예비 스코어를 포함하는 후보 패치 데이터를 획득하는단계;상기 후보 패치 데이터에 기초하여, 상기 후보 패치에 대응하는 최종 스코어를 결정하는 단계; 및상기 최종 스코어에 기초하여, 상기 결함에 대응하는 하나 이상의 최종 패치를 결정하는 단계를 포함하는 소스 코드 결함 수정 방법."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 전처리하는 단계는상기 소스 코드에 대응하는 언어를 식별하는 단계; 및상기 식별 결과에 기초하여, 상기 입력 데이터를 전처리하는 단계를 포함하는, 소스 코드 결함 수정 방법."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 전처리하는 단계는상기 소스 코드를 복수의 토큰들로 나누는 단계; 및상기 소스 코드에 대응하는 언어에 기초하여, 상기 토큰들의 의미를 분석하는 단계를 포함하는, 소스 코드 결함 수정 방법."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 전처리하는 단계는상기 결함에 대응하는 토큰을 특수 토큰으로 변경하는 단계를 포함하는, 소스 코드 결함 수정 방법."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,공개특허 10-2024-0077147-3-상기 최종 스코어를 결정하는 단계는상기 후보 패치에 대응하는 펄플렉서티(perplexity) 스코어를 계산하는 단계; 및상기 예비 스코어 및 상기 펄플렉서티 스코어에 기초하여, 상기 최종 스코어를 결정하는 단계를 포함하는, 소스 코드 결함 수정 방법."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 최종 스코어를 결정하는 단계는상기 예비 스코어에 비례하고, 상기 펄플렉서티 스코어에는 반비례하도록 상기 최종 스코어를 결정하는 단계를 포함하는, 소스 코드 결함 수정 방법."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 복수의 인공 신경망 모델들 각각은서로 다른 아키텍쳐를 갖거나, 서로 다른 학습 데이터에 기초하여 학습되어 서로 다른 특성을 갖는, 소스 코드결함 수정 방법."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "하드웨어와 결합되어 제1항 내지 제6항 중 어느 하나의 항의 방법을 실행시키기 위하여 컴퓨터 판독 가능한 기록매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "적어도 하나의 인스트럭션(instruction)을 저장하는 메모리; 및상기 적어도 하나의 인스트럭션을 실행하는 적어도 하나의 프로세서를 포함하고,상기 적어도 하나의 프로세서는, 상기 적어도 하나의 인스트럭션을 실행함으로써,결함이 포함된 소스 코드 및 상기 결함에 대응하는 위치 정보를 포함하는 입력 데이터를 수신하고,상기 입력 데이터를 전처리하고,상기 전처리 결과를 복수의 인공 신경망 모델들에 입력하여, 상기 복수의 인공 신경망 모델들 각각으로부터 하나 이상의 후보 패치 및 상기 후보 패치에 대응하는 예비 스코어를 포함하는 후보 패치 데이터를 획득하고,상기 후보 패치 데이터에 기초하여, 상기 후보 패치에 대응하는 최종 스코어를 결정하고,상기 최종 스코어에 기초하여, 상기 결함에 대응하는 하나 이상의 최종 패치를 결정하는, 전자 장치."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 프로세서는상기 소스 코드에 대응하는 언어를 식별하고, 상기 식별 결과에 기초하여, 상기 입력 데이터를 전처리하는, 전공개특허 10-2024-0077147-4-자 장치."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서,상기 프로세서는상기 소스 코드를 복수의 토큰들로 나누고, 상기 소스 코드에 대응하는 언어에 기초하여, 상기 토큰들의 의미를분석하는, 전자 장치."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제9항에 있어서,상기 프로세서는상기 결함에 대응하는 토큰을 특수 토큰으로 변경하는, 전자 장치."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제9항에 있어서,상기 프로세서는상기 후보 패치에 대응하는 펄플렉서티(perplexity) 스코어를 계산하고, 상기 예비 스코어 및 상기 펄플렉서티스코어에 기초하여, 상기 최종 스코어를 결정하는, 전자 장치."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제9항에 있어서,상기 프로세서는상기 예비 스코어에 비례하고, 상기 펄플렉서티 스코어에는 반비례하도록 상기 최종 스코어를 결정하는, 전자장치."}
{"patent_id": "10-2022-0159322", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제9항에 있어서,상기 복수의 인공 신경망 모델들 각각은서로 다른 아키텍쳐를 갖거나, 서로 다른 학습 데이터에 기초하여 학습되어 서로 다른 특성을 갖는, 전자 장치."}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "소스 코드 결함 수정 방법 및 장치가 개시된다. 일 실시예에 따른 소스 코드 결함 수정 방법은 결함이 포함된 소스 코드 및 결함에 대응하는 위치 정보를 포함하는 입력 데이터를 수신하는 단계, 입력 데이터를 전처리하는 단계, 전처리 결과를 복수의 인공 신경망 모델들에 입력하여, 복수의 인공 신경망 모델들 각각으로부터 하나 이 상의 후보 패치 및 후보 패치에 대응하는 예비 스코어를 포함하는 후보 패치 데이터를 획득하는 단계, 후보 패치 데이터에 기초하여, 후보 패치에 대응하는 최종 스코어를 결정하는 단계, 및 최종 스코어에 기초하여, 결함에 대 응하는 하나 이상의 최종 패치를 결정하는 단계를 포함할 수 있다."}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래 실시예들은 소스 코드 결함 수정 방법에 관한 것으로, 보다 구체적으로는 결함이 포함된 코드를 수신하여, 해당 결함에 대응하는 복수의 패치들을 생성하고, 각각의 패치에 대응하는 점수를 계산하는 방법에 관한 것이다."}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "소프트웨어를 개발할 때, 소스코드 검증 단계에서 결함을 자동으로 찾고 수정하는 것은 소프트웨어 자동 오류 수정이라고 한다. 소프트웨어 자동 오류 수정에는 기본적으로 여러 기술을 사용하는데 그 중에 결함 위치를 찾 는 결함 위치 식별(fault localization) 기술, 결함을 대체할 코드 조각 후보를 만드는 자동 수정/패치 생성 (automatic program repair/patch generation) 기술, 각 조각이 프로그램을 개선하였는지를 확인하는 패치 검 증 (patch verification)기술이 있다. 결함 위치 식별(SBFL, MBFL 등) 기법, 패치 생성 기법은 주로 템플릿을 사용하는 심볼릭(symbolic) 알고리즘 (Angelix, DirectFix, TBar)을 기반으로 작동한다. 자동 생성된 복수의 패치는 시험하는데 오랜 시간 걸리고 시험을 통과하더라도 올바르지 않을 수 도 있는 비효율성 또는 정확도 문제가 있다."}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 소스 코드 결함 수정 방법은 결함이 포함된 소스 코드 및 상기 결함에 대응하는 위치 정보를 포함하는 입력 데이터를 수신하는 단계; 상기 입력 데이터를 전처리하는 단계; 상기 전처리 결과를 복수의 인공 신경망 모델들에 입력하여, 상기 복수의 인공 신경망 모델들 각각으로부터 하나 이상의 후보 패치 및 상기 후보 패치에 대응하는 예비 스코어를 포함하는 후보 패치 데이터를 획득하는 단계; 상기 후보 패치 데이터에 기초하 여, 상기 후보 패치에 대응하는 최종 스코어를 결정하는 단계; 및 상기 최종 스코어에 기초하여, 상기 결함에 대응하는 하나 이상의 최종 패치를 결정하는 단계를 포함할 수 있다. 상기 전처리하는 단계는 상기 소스 코드에 대응하는 언어를 식별하는 단계; 및 상기 식별 결과에 기초하여, 상 기 입력 데이터를 전처리하는 단계를 포함할 수 있다. 상기 전처리하는 단계는 상기 소스 코드를 복수의 토큰들로 나누는 단계; 및 상기 소스 코드에 대응하는 언어에 기초하여, 상기 토큰들의 의미를 분석하는 단계를 포함할 수 있다. 상기 전처리하는 단계는 상기 결함에 대응하는 토큰을 특수 토큰으로 변경하는 단계를 포함할 수 있다. 상기 최종 스코어를 결정하는 단계는 상기 후보 패치에 대응하는 펄플렉서티(perplexity) 스코어를 계산하는 단 계; 및 상기 예비 스코어 및 상기 펄플렉서티 스코어에 기초하여, 상기 최종 스코어를 결정하는 단계를 포함할 수 있다. 상기 최종 스코어를 결정하는 단계는 상기 예비 스코어에 비례하고, 상기 펄플렉서티 스코어에는 반비례하도록 상기 최종 스코어를 결정하는 단계를 포함할 수 있다. 상기 복수의 인공 신경망 모델들 각각은 서로 다른 아키텍쳐를 갖거나, 서로 다른 학습 데이터에 기초하여 학습 되어 서로 다른 특성을 갖을 수 있다. 일 실시예에 따른 전자 장치는 적어도 하나의 인스트럭션(instruction)을 저장하는 메모리; 및 상기 적어도 하 나의 인스트럭션을 실행하는 적어도 하나의 프로세서를 포함하고, 상기 적어도 하나의 프로세서는, 상기 적어도 하나의 인스트럭션을 실행함으로써, 결함이 포함된 소스 코드 및 상기 결함에 대응하는 위치 정보를 포함하는 입력 데이터를 수신하고, 상기 입력 데이터를 전처리하고, 상기 전처리 결과를 복수의 인공 신경망 모델들에 입 력하여, 상기 복수의 인공 신경망 모델들 각각으로부터 하나 이상의 후보 패치 및 상기 후보 패치에 대응하는 예비 스코어를 포함하는 후보 패치 데이터를 획득하고, 상기 후보 패치 데이터에 기초하여, 상기 후보 패치에 대응하는 최종 스코어를 결정하고, 상기 최종 스코어에 기초하여, 상기 결함에 대응하는 하나 이상의 최종 패치 를 결정할 수 있다. 상기 프로세서는 상기 소스 코드에 대응하는 언어를 식별하고, 상기 식별 결과에 기초하여, 상기 입력 데이터를 전처리할 수 있다. 상기 프로세서는 상기 소스 코드를 복수의 토큰들로 나누고, 상기 소스 코드에 대응하는 언어에 기초하여, 상기 토큰들의 의미를 분석할 수 있다. 상기 프로세서는 상기 결함에 대응하는 토큰을 특수 토큰으로 변경할 수 있다. 상기 프로세서는 상기 후보 패치에 대응하는 펄플렉서티(perplexity) 스코어를 계산하고, 상기 예비 스코어 및 상기 펄플렉서티 스코어에 기초하여, 상기 최종 스코어를 결정할 수 있다. 상기 프로세서는 상기 예비 스코어에 비례하고, 상기 펄플렉서티 스코어에는 반비례하도록 상기 최종 스코어를 결정할 수 있다. 상기 복수의 인공 신경망 모델들 각각은 서로 다른 아키텍쳐를 갖거나, 서로 다른 학습 데이터에 기초하여 학습 되어 서로 다른 특성을 갖을 수 있다."}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "실시예들에 대한 특정한 구조적 또는 기능적 설명들은 단지 예시를 위한 목적으로 개시된 것으로서, 다양한 형 태로 변경되어 구현될 수 있다. 따라서, 실제 구현되는 형태는 개시된 특정 실시예로만 한정되는 것이 아니며, 본 명세서의 범위는 실시예들로 설명한 기술적 사상에 포함되는 변경, 균등물, 또는 대체물을 포함한다. 제1 또는 제2 등의 용어를 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 해석되어야 한다. 예를 들어, 제1 구성요소는 제2 구성요소로 명 명될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이해되어야 할 것이다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 설명된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함 으로 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들 을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되 는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로 해석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 도 1a는 인공신경망(Artificial Neural Network)를 이용한 딥러닝 연산 방법을 설명하기 위한 도면이다. 딥러닝(Deep Learning) 등을 포함하는 인공지능(AI) 알고리즘은 인공신경망(Artificial Neural Network, ANN) 에 입력 데이터를 입력시키고, 컨볼루션 등의 연산을 통해 출력 데이터를 학습하는 것을 특징으로 한다. 인공신경망은 생물학적 뇌를 모델링한 컴퓨터 과학적 아키텍쳐(Computational Architecture)를 의미할 수 있다. 인공신경망 내에서, 뇌의 뉴런들에 해당되는 노드들은 서로 연결되어 있고, 입력 데이터를 처리하기 위하여 집합적으로 동작한다. 다양한 종류의 뉴럴 네트워크들을 예로 들면, 컨볼루션 뉴럴 네트워크 (Convolutional Neural Network, CNN), 회귀 뉴럴 네트워크(Recurrent Neural Network, RNN), 딥 빌리프 네트 워크(Deep Belief Network, DBN), 제한된 볼츠만 기계(Restricted Boltzman Machine, RBM) 방식 등이 있으나, 이에 제한되지 않는다. 피드-포워드(feed-forward) 뉴럴 네트워크에서, 뉴럴 네트워크의 뉴런들은 다른 뉴런들과의 연결들(links)을 갖는다. 이와 같은 연결들은 뉴럴 네트워크를 통해, 한 방향으로, 예를 들어 순방향 (forward direction)으로 확장될 수 있다. 도 1a는 인공 신경망을 이용한 딥러닝 연산 방법을 설명하기 위한 도면이다. 딥러닝(Deep Learning) 등을 포함하는 인공지능(AI) 알고리즘은 인공 신경망(Artificial Neural Network, AN N)에 입력 데이터를 입력시키고, 컨볼루션 등의 연산을 통해 출력 데이터를 학습하고, 학습된 인공 신경망을 이 용하여 특징을 추출할 수 있다. 인공 신경망은 생물학적 뇌를 모델링한 컴퓨터 과학적 아키텍쳐(Computational Architecture)를 의미할 수 있다. 인공 신경망 내에서, 뇌의 뉴런들에 해당되는 노드들은 서로 연결되어 있고, 입력 데이터를 처리하기 위하여 집합적으로 동작한다. 다양한 종류의 뉴럴 네트워크들을 예로 들면, 컨볼루션 뉴럴 네트워크(Convolutional Neural Network, CNN), 회귀 뉴럴 네트워크(Recurrent Neural Network, RNN), 딥 빌리프 네트워크(Deep Belief Network, DBN), 제한된 볼츠만 기계(Restricted Boltzman Machine, RBM) 방식 등 이 있으나, 이에 제한되지 않는다. 피드-포워드(feed-forward) 뉴럴 네트워크에서, 뉴럴 네트워크의 뉴런들은 다른 뉴런들과의 연결들(links)을 갖는다. 이와 같은 연결들은 뉴럴 네트워크를 통해, 한 방향으로, 예를 들어 순방향(forward direction)으로 확장될 수 있다. 도 1a는 입력 데이터를 입력 받아 출력 데이터를 출력하는 인공 신경망(예를 들어, 컨볼루션 뉴럴 네트워크 (Convolution Neural Network, CNN))의 구조를 도시한다. 인공 신경망은 2개 이상의 레이어(layer)를 보유한 딥 뉴럴 네트워크(deep neural network)일 수 있다. 도 1b는 일 실시예에 따른 결함 수정 시스템을 설명하기 위한 도면이다. 도 1b를 참조하면, 일 실시예에 따른 결함 수정 시스템은 학습 장치 및 추론 장치를 포함할 수 있다. 일 실시예에 따른 학습 장치는 뉴럴 네트워크를 생성하거나, 뉴럴 네트워크를 훈련(train)(또는 학습 (learn))하거나, 뉴럴 네트워크를 재훈련(retrain)하는 기능들과 같은 다양한 프로세싱 기능들을 갖는 컴퓨팅 디바이스에 해당된다. 예를 들어, 학습 장치는 PC(personal computer), 서버 디바이스, 모바일 디바이스 등의 다양한 종류의 디바이스들로 구현될 수 있다. 일 실시예에 따른 학습 장치는 주어진 초기 뉴럴 네트워크를 반복적으로 훈련(학습)시킴으로써, 하나 이상 의 훈련된 뉴럴 네트워크를 생성할 수 있다. 하나 이상의 훈련된 뉴럴 네트워크를 생성하는 것은 뉴 럴 네트워크 파라미터를 결정하는 것을 의미할 수 있다. 여기서, 파라미터들은 예를 들어 뉴럴 네트워크의 입/ 출력 액티베이션들, 웨이트들, 바이어스들 등 뉴럴 네트워크에 입/출력되는 다양한 종류의 데이터를 포함할 수 있다. 뉴럴 네트워크의 반복적인 훈련이 진행됨에 따라, 뉴럴 네트워크의 파라미터들은 주어진 입력에 대해 보 다 정확한 출력을 연산하기 위해 조정될(tuned) 수 있다. 일 실시예에 따른 학습 장치는 훈련된 하나 이상의 뉴럴 네트워크를 추론 장치에 전달할 수 있 다. 추론 장치는 모바일 디바이스, 임베디드(embedded) 디바이스 등에 포함될 수 있다. 일 실시예에 따 른 추론 장치는 뉴럴 네트워크의 구동을 위한 전용 하드웨어로 프로세서, 메모리, 입출력(I/O) 인터페이스, 디스플레이, 통신 인터페이스, 또는 센서 중 적어도 하나를 포함하는 전자 장치일 수 있다. 예를 들어, 센서는 장면들에 대한 이미지들을 촬영하기 위해 하나 이상의 카메라들 또는 다른 이미징(imaging) 센서 들을 포함할 수 있다. 일 실시예에 따른 추론 장치는 태블릿 PC, 스마트폰, 개인용 컴퓨터(예를 들어, 노트북 컴퓨터 등), 인공 지능 스피커, 스마트 TV, 이동 전화기, 내비게이션, 웹 패드, PDA, 워크스테이션 등과 같이 메모리 수단을 구비 하고 마이크로 프로세서를 탑재하여 연산 능력을 갖춘 디지털 기기를 모두 포함하는 개념일 수 있다. 일 실시예에 따른 추론 장치는 하나 이상의 훈련된 뉴럴 네트워크를 그대로 구동하거나, 하나 이상의 훈련된 뉴럴 네트워크가 가공(예를 들어, 양자화)된 뉴럴 네트워크를 구동할 수 있다. 가공된 뉴럴 네트워크를 구동하는 추론 장치는, 학습 장치와는 별도의 독립적인 디바이스에서 구현될 수 있 다. 하지만, 이에 제한되지 않고, 추론 장치는 학습 장치와 동일한 디바이스 내에도 구현될 수 있다. 도 2는 일 실시예에 따른 소스 코드 결함 수정 시스템을 설명하기 위한 도면이다. 도 2를 참조하면 일 실시예에 따른 소스 코드 결함 수정 시스템은 결함이 포함된 코드와 결함 위치 정보를 입력 받고 해당 결함에 적합한 패치를 결정할 수 있다. 일 실시예에 따른 소스 코드 결함 수정 시스템은 전처리 모 듈, 제1 모델 및 제2 모델을 포함할 수 있다.일 실시예에 따른 전치리 모듈은 입력 데이터로 결함이 포함된 코드와 결함 위치 정보를 수신할 수 있다. 일 실시예에 따른 코드는 자동 생성된 소프트웨어 소스 코드일 수 있으나, 이에 한정되지는 않는다. 일 실시예 에 따른 결함은 코드에서 해당 위치에서 현재보다 더 적절한 패치로 변경될 것으로 기대되는 부분일 수 있고, 이는 결함이라고 반드시 오류를 의미하는 것은 아니며 값이 없는 빈 부분일 수도 있다. 결함은 해당 부분이 마 스킹된 형태로 제공될 수 있다. 일 실시예에 따른 결함의 위치는 코드에서의 라인 넘버(line number), 텍스트 인덱스(text index) 형태로 제공될 수 있으나, 이에 한정되지는 않는다. 일 실시예에 따른 전처리 모듈은 입력 데이터를 코멘트 제거, 공백 삭제 등 정제한 후 토큰으로 분리할 수 있다. 전처리 모듈은 소스 코드를 identifier, literal, number, operator 등 유의미한 단위로 렉서 (lexer)를 적용할 수 있다. 전처리 모듈은 렉서를 적용한 후에 이어서 토크나이저(tokenizer)(예를 들어, 센텐스피스(sentencepiece))를 적용하여 인공 신경망 모델에 입력이 가능한 토큰으로 나눌 수 있다. 또한, 전처리 모듈은 결함 위치에 해당되는 토큰의 열을 1개 이상의 특수 토큰(예를 들어, mask 토큰)으로 변경할 수 있다. 전처리 모듈은 모델 설정에 맞게 입력 토큰의 갯수를 트렁케이션(truncation) 또는 패딩 (padding)을 통해서 조정할 수 있다. 일 실시예에 따른 제1 모델은 복수의 인공 신경망 모델, 후보 패치 생성 모듈, 스코어 계산 모듈을 포함할 수 있다. 본 문서에서 사용된 용어 \"모듈\"은, 예를 들면, 하드웨어, 소프트웨어 또는 펌웨어(firmware) 중 하나 또는 둘 이상의 조합을 포함하는 단위(unit)를 의미할 수 있다. \"모듈\"은, 예를 들면, 유닛(unit), 로직 (logic), 논리 블록(logical block), 부품(component), 또는 회로(circuit) 등의 용어와 바꾸어 사용 (interchangeably use)될 수 있다. \"모듈\"은, 일체로 구성된 부품의 최소 단위 또는 그 일부가 될 수 있다. \"모듈\"은 하나 또는 그 이상의 기능을 수행하는 최소 단위 또는 그 일부가 될 수도 있다. \"모듈\"은 기계적으 로 또는 전자적으로 구현될 수 있다. 예를 들면,\"모듈\"은, 알려졌거나 앞으로 개발될, 어떤 동작들을 수행하는 ASIC(application-specific integrated circuit) 칩, FPGAs(field-programmable gate arrays) 또는 프로그램 가능 논리 장치(programmable-logic device) 중 적어도 하나를 포함할 수 있다. 일 실시예에 따른 인공 신경망 모델은 기 학습된 언어 모델(PTLM; Pre-trained language model)일 수 있다. PTLM은 큰 규모의 언어 데이터를 사용하여 학습된 인공 신경망 모델로, 예를 들어 자기지도 학습(self- supervised) 방식으로 학습될 수 있다. PTLM은 인공 신경망의 윗 레이어만 추가하여 적은 리소스로 파인 튜닝"}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "(fine-tuning) 학습을 한 후 텍스트 분류, 텍스트 요약, 스팬(span) 예측 등 다양한 태스크에 사용하는 트랜스 퍼 학습(transfer learning)에 우수한 성능을 보일 수 있다. 일 실시예에 따른 PTLM은 왼쪽 문맥을 입력받고 다음 1개 이상의 토큰을 예측(causal language model)하거나 양 쪽 문맥을 입력받고 중간 1개 이상의 토큰을 예측(masked language model)하는 태스크에 학습한 것이기 때문에 토큰의 한 열(sequence)의 확률을 예측할 수가 있다. 일 실시예에 따른 PTLM은 자연어 데이터(예를 들어, 영어 데이터), Python, Java, C, C++ 등 프로그래밍 언어 데이터로 구성된 말뭉치를 사용하여 학습된 인공 신경망 모델일 수 있다. 말뭉치를 정제하고 전술한 방식으로 토큰으로 분리한 후 (input, label)쌍을 지어서 sample을 생성할 수 있고, Input에는 마지막 토큰을, 또는 중간에 위치한 1개이상의 토큰을 1개이상의 mask 토큰으로 바꾸고 label은 mask 로 가려진 해당 토큰으로 구성할 수 있고, 이에 기초하여 PTLM을 학습할 수 있다. 일 실시예에 따른 인공 신경망 모델은 트랜스포머(Transformer) 아키텍처에 기반한 것일 수 있다. 인공 신경망 모델은 입력 토큰을 임베딩으로 바꿔주는 트랜스포머(Transformer) 기반의 인코더(encoder) 및 입력 토큰의 임 베딩값 기반으로 마스크로 가려진 다음 토큰을 예측하는 디코더(decoder)를 포함할 수 있다. 일 실시예에 따른 후보 패치 생성 모듈은 복수의 인공 신경망 모델들 각각의 출력에 대하여 정규화 (normalization)하고, 후보 패치를 생성할 수 있다. 보다 구체적으로, 일 실시예에 따른 후보 패치 생성 모듈 은 복수의 인공 신경망 모델들로부터 획득한 후보 패치들 각각에 대하여 통계 처리(예를 들어, 평균)한 후, 소 프트맥스(softmax)연산을 통해 후보 패치들을 생성할 수 있다. 일 실시예에 따른 스코어 계산 모듈은 후보 패치들 각각에 대응하는 예비 스코어를 생성할 수 있다. 일 실시예 에 따른 예비 스코어는 신뢰도 점수(conficence score)로 지칭될 수 있다. 아래에서, 후보 패치들 및 후보 패 치들 각각에 대응하는 예비 스코어를 후보 패치 데이터로 지칭할 수 있다. 일 실시예에 따른 제 1 모델이 복수 의 인공 신경망 모델, 후보 패치 생성 모듈, 스코어 계산 모듈에 의해 수행되는 것으로 기재하였으나, 이는 설명의 편의를 위함이고 실제로는 각각의 구성요소들의 구분 없이 프로세서에 의해 수행될 수 있다. 일 실시예에 따른 제2 모델은 후보 패치 데이터에 기초하여, 후보 패치에 대응하는 최종 스코어를 결정할 수 있 다. 제2 모델은 예비 스코어가 매칭된 후보 패치 리스트를 수신할 수 있고, 아래 수학식 1에 기초하여 후보 패 치 각각에 대응하는 최종 스코어를 계산할 수 있다. 수학식 1"}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "일 실시예에 따른 최종 스코어는 Perplexity 스코어라 지칭될 수 있다. 일 실시예에 따른 소스 코드 결함 수정 시스템은 같은 소스 코드 샘플에 대한 여러 패치를 적용한 샘플에 대해 서 각자 perplexity 스코어를 계산하면 패치 후보에 대한 상대적인 평가가 가능할 수 있다. 소스 코드 결함 수 정 시스템은 Perplexity 스코어 낮은순으로 패치를 랭킹하여 상위 N개(여기서, N은 자연수)에 들어간 패치만 이 어서 검증을 하여 검증의 효율성과 정확성을 높일 수 있다. 도 3은 일 실시예에 따른 소스 코드의 결함을 추정하는 예시를 도시한다. 도 2를 참조하여 설명한 내용은 도 3에 동일하게 적용될 수 있고, 중복되는 내용은 생략될 수 있다. 예를 들어, 도 2를 참조하여 설명한 입력 데이터, 제1 모델, 제2 모델 및 최종 패치는 각각 도 3의 Input Data, Program Language Model, Perplexity Ranking module 및 Output Data에 대응될 수 있다. 다만, 도 3에 는 도 2를 참조하여 설명한 전처리 모듈에 대응되는 구성이 도시되지 않았으나, 전처리 모듈 없이 소스 코 드의 결함 추정 방법이 수행되는 것을 의미하는 것은 아니다. 일 실시예에 따른 Input Data는 결함을 포함하는 소스 코드 및 결함의 위치를 포함할 수 있다. Program Language Model은 Input Data(또는, 전치리 모듈에 의해 전처리가 수행된 결과)를 수신하여 인코딩을 수행할 수 있다. 이후 복수의 서로 다른 언어 모델의 트랜스포머(예: Transformer based LM 1 내지 Transformer based LM N)에 인코딩 결과가 입력되고, 각각의 트랜스포머의 출력이 PLM Normalization 모듈에 입력될 수 있다. 일 실시예에 따른 PLM Normalization 모듈은 각각의 트랜스포머의 출력을 수신하여 소프트맥스 연산을 수행하여 그 결과를 Patch Generation Module로 전달할 수 있고, Patch Generation Module은 소프트맥스 연산 수행 결과 에 기초하여 후보 패치 리스트(예: Patch 1 내지 Patch M)를 포함하는 후보 패치 데이터를 생성할 수 있다. 일 실시예에 따른 Perplexity Ranking module은 후보 패치 데이터를 수신하여 후보 패치들 각각에 대응하는 Perplexity 점수를 계산할 수 있고, 이에 기초하여 후보 패치들의 랭킹을 결정하여 랭킹 순으로 정렬된 ordered patch list를 생성할 수 있다. 이후, 일 실시예에 따른 소스 코드 결함 수정 시스템은 Perplexity 스코어에 기 초하여, 최종 패치(예: return)를 결정할 수 있다. 도 4는 일 실시예에 따른 소스 코드 결함 수정 방법을 설명하기 위한 순서도이다. 설명의 편의를 위해, 단계들(410 내지 450)은 도 2에 도시된 소스 코드 결함 수정 시스템을 사용하여 수행되는 것으로 기술된다. 그러나 이 단계들(410 내지 450)은 어떤 다른 적절한 전자 기기를 통해, 그리고 어떤 적절한 시스템 내에서도 사용될 수 있을 것이다. 나아가, 도 4의 동작은 도시된 순서 및 방식으로 수행될 수 있지만, 도시된 실시예의 사상 및 범위를 벗어나지 않으면서 일부 동작의 순서가 변경되거나 일부 동작이 생략될 수 있다. 도 4에 도시된 다수의 동작은 병렬로 또는 동시에 수행될 수 있다. 도 4를 참조하면, 단계에서, 일 실시예에 따른 소스 코드 결함 수정 시스템은 결함이 포함된 소스 코드 및 결함에 대응하는 위치 정보를 포함하는 입력 데이터를 수신할 수 있다. 단계에서, 일 실시예에 따른 소스 코드 결함 수정 시스템은 입력 데이터를 전처리할 수 있다. 일 실시예 에 따른 소스 코드 결함 수정 시스템은 소스 코드에 대응하는 언어(예를 들어, Python, Java, C, C++ )를 식별할 수 있고, 식별 결과에 기초하여, 입력 데이터를 전처리할 수 있다. 또한, 소스 코드 결함 수정 시스템은 상 기 소스 코드를 복수의 토큰들로 나누고, 소스 코드에 대응하는 언어에 기초하여 토큰들의 의미를 분석할 수 있 다. 또한, 소스 코드 결함 수정 시스템은 결함에 대응하는 토큰을 특수 토큰으로 변경할 수도 있다. 단계에서, 일 실시예에 따른 소스 코드 결함 수정 시스템은 전처리 결과를 복수의 인공 신경망 모델들에 입력하여, 복수의 인공 신경망 모델들 각각으로부터 하나 이상의 후보 패치 및 후보 패치에 대응하는 예비 스코 어를 포함하는 후보 패치 데이터를 획득할 수 있다. 일 실시예에 따른 복수의 인공 신경망 모델들 각각은 서로 다른 아키텍쳐를 갖거나, 서로 다른 학습 데이터에 기초하여 학습되어 서로 다른 특성을 갖을 수 있다. 단계에서, 일 실시예에 따른 소스 코드 결함 수정 시스템은 후보 패치 데이터에 기초하여, 후보 패치에 대 응하는 최종 스코어를 결정할 수 있다. 예를 들어, 소스 코드 결함 수정 시스템은 예비 스코어에 비례하고, 상 기 펄플렉서티 스코어에는 반비례하도록 최종 스코어를 결정할 수 있다. 단계에서, 일 실시예에 따른 소스 코드 결함 수정 시스템은 최종 스코어에 기초하여, 결함에 대응하는 하 나 이상의 최종 패치를 결정할 수 있다. 도 5은 일 실시예에 따른 전자 장치의 구성을 도시하는 도면이다. 도 5을 참조하면, 일 실시예에 따른 전자 장치는 하나 이상의 프로세서 및 메모리를 포함할 수 있다. 도 2 내지 도 4를 참조하여 설명한 내용은 도 5에도 동일하게 적용될 수 있다. 일 실시예에 따른 메모리는 컴퓨터에서 읽을 수 있는 명령어들(instructions)을 저장할 수 있다. 메모리 에 저장된 명령어들이 프로세서에 의해 실행되면, 프로세서는 명령어들에 의해 정의되는 동작들 을 처리할 수 있다. 메모리는 예를 들어 RAM(random access memories), DRAM(dynamic random access memories), SRAM(static random access memories) 또는 이 기술 분야에서 알려진 다른 형태의 비휘발성 메모리 를 포함할 수 있다. 메모리는 기 학습된 인공 신경망 모델을 저장할 수 있다. 일 실시예에 따른 하나 이상의 프로세서는 전자 장치의 전체적인 동작을 제어한다. 프로세서는 목적하는 동작들(desired operations)을 실행시키기 위한 물리적인 구조를 갖는 회로를 가지는 하드웨어로 구현 된 장치일 수 있다. 목적하는 동작들은 프로그램에 포함된 코드(code) 또는 명령어들을 포함할 수 있다. 하드 웨어로 구현된 장치는 마이크로프로세서(microprocessor), 중앙 처리 장치(Central Processing Unit; CPU), 그 래픽 처리 장치(Graphic Processing Unit; GPU), 프로세서 코어(processor core), 멀티-코어 프로세서(multi- core processor), 멀티프로세서(multiprocessor), ASIC(Application-Specific Integrated Circuit), FPGA(Field Programmable Gate Array), NPU(Neural Processing Unit) 등을 포함할 수 있다 일 실시예에 따른 프로세서는 결함이 포함된 소스 코드 및 결함에 대응하는 위치 정보를 포함하는 입력 데 이터를 수신하고, 입력 데이터를 전처리하고, 전처리 결과를 복수의 인공 신경망 모델들에 입력하여, 복수의 인 공 신경망 모델들 각각으로부터 하나 이상의 후보 패치 및 후보 패치에 대응하는 예비 스코어를 포함하는 후보 패치 데이터를 획득하고, 후보 패치 데이터에 기초하여, 후보 패치에 대응하는 최종 스코어를 결정하고, 최종 스코어에 기초하여, 결함에 대응하는 하나 이상의 최종 패치를 결정할 수 있다. 이상에서 설명된 실시예들은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨 어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치, 방법 및 구성요소는, 예를 들 어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마 이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령(instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 소프트웨어 애플리 케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처 리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경우도 있지만,"}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하 나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파(signal wave)에 영구적으로, 또는 일시적으로 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단 독으로 또는 조합하여 저장할 수 있으며 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구 성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다. 위에서 설명한 하드웨어 장치는 실시예의 동작을 수행하기 위해 하나 또는 복수의 소프트웨어 모듈로서 작동하 도록 구성될 수 있으며, 그 역도 마찬가지이다."}
{"patent_id": "10-2022-0159322", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "이상과 같이 실시예들이 비록 한정된 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가진 자라면 이를 기초로 다양한 기술적 수정 및 변형을 적용할 수 있다. 예를 들어, 설명된 기술들이 설명된 방법과 다른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다."}
{"patent_id": "10-2022-0159322", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1a는 인공신경망(Artificial Neural Network)를 이용한 딥러닝 연산 방법을 설명하기 위한 도면이다. 도 1b는 일 실시예에 따른 결함 수정 시스템을 설명하기 위한 도면이다. 도 2는 일 실시예에 따른 소스 코드 결함 수정 시스템을 설명하기 위한 도면이다. 도 3은 일 실시예에 따른 소스 코드의 결함을 추정하는 예시를 도시한다. 도 4는 일 실시예에 따른 소스 코드 결함 수정 방법을 설명하기 위한 순서도이다. 도 5은 일 실시예에 따른 전자 장치의 구성을 도시하는 도면이다."}
