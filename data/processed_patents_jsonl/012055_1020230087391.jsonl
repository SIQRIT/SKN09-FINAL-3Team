{"patent_id": "10-2023-0087391", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0007358", "출원번호": "10-2023-0087391", "발명의 명칭": "프로세서에 연결된 오디오 회로를 식별하기 위한 전자 장치 및 그 방법", "출원인": "삼성전자주식회사", "발명자": "이순규"}}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치(electronic device)(101)에 있어서,프로세서(110);상기 프로세서에 연결된 복수의 오디오 회로들(150); 및인스트럭션들을 저장하도록 구성된 메모리(120)를 포함하고,상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에,상기 전자 장치를 부팅하는 동안, 제1 상태 내 상기 복수의 오디오 회로들의 초기화를 수행하고, 상기 복수의오디오 회로들 각각은 상기 초기화에 기반하여 상기 제1 상태와 상이한 제2 상태로 스위칭됨; 및상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 메모리에, 상기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보(160)를 저장하도록, 상기 프로세서를 야기하는,전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에,상기 메모리에 저장된 제1 리스트 정보(370)에 대응하는 상기 복수의 오디오 회로들에 대한 상기 초기화를 수행하고;상기 복수의 오디오 회로들 중에서, 상기 초기화에 기반하여 상기 제2 상태로 스위칭된 오디오 회로에응답하여, 상기 제1 리스트 정보와 상이한 제2 리스트 정보(380)에, 상기 제2 상태로 스위칭된 상기 오디오 회로를 추가하도록, 상기 프로세서를 야기하는,전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 1에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에,상기 프로세서 및 상기 복수의 오디오 회로들 각각을 연결하는 오디오 인터페이스들(140) 각각에 대응하는 정보를 이용하여, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오회로를 식별하도록, 상기 프로세서를 야기하는,전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 3에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 오디오 인터페이스의 타입, 오디오 인터페이스를 통해 연결된 오디오 회로의 명칭 또는 오디오 인터페이스를 통해 교환되는 신호의 포맷 중 적어도 하나를 나타내는 상기 정보를 이용하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하도록, 상기 프로세서를 야기하는,공개특허 10-2025-0007358-3-전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 1에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에,상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 복수의 오디오 회로들에 대한 상기 초기화를 완료하기 위하여, 상기 식별된 적어도 하나의 오디오 회로 및 더미 드라이버를연결하도록, 상기 프로세서를 야기하는,전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 1에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에,소프트웨어 어플리케이션의 실행에 기반하여, 상기 제2 상태의 오디오 회로의 기능을 실행하도록, 상기 프로세서를 야기하는,전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 1에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에,상기 복수의 오디오 회로들 중에서, 상기 적어도 하나의 제1 상태의 오디오 회로를 식별하는 것에 기반하여, 지정된 횟수에 기반하여, 상기 식별된 적어도 하나의 오디오 회로의 상태를 반복적으로 식별하고;상기 지정된 횟수 만큼 상기 적어도 하나의 오디오 회로의 상태를 식별하는 동안, 상기 적어도 하나의 오디오회로의 상태가 상기 제1 상태 내에서 유지됨을 식별하는 것에 기반하여, 상기 제1 상태 내에서 유지되는 상기적어도 하나의 오디오 회로를 나타내는 정보를, 상기 로그 정보 내에 저장하도록, 상기 프로세서를 야기하는,전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 1에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에,상기 메모리에 포함된 휘발성 메모리(510)에 형성된 로그 버퍼에, 상기 적어도 하나의 오디오 회로가 상기 초기화에 의해 액세스할 수 있는 오디오 회로와 상이함을 나타내는 상기 로그 정보를 저장하고; 및상기 로그 정보의 출력을 나타내는 입력에 응답하여, 상기 메모리에 포함된 비휘발성 메모리(520) 및 상기 휘발성 메모리 중 상기 비휘발성 메모리에, 상기 로그 정보를 복제하도록, 상기 프로세서를 야기하는,전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 1에 있어서, 상기 제1 상태는, 비활성 상태(deactivated state)를 포함하고, 상기 제2 상태는, 활성 상태(activated state)를 포함하는,공개특허 10-2025-0007358-4-전자 장치."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "전자 장치의 방법에 있어서,상기 전자 장치를 부팅하는 동안, 제1 상태 내 복수의 오디오 회로들의 초기화를 수행하는 동작(710), 상기 전자 장치의 상기 복수의 오디오 회로들 각각은 상기 초기화에 기반하여 상기 제1 상태와 상이한 제2 상태로 스위칭됨;상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 전자 장치의 메모리에, 상기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보를 저장하는 동작(730)을 포함하는,방법."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "청구항 10에 있어서, 상기 수행하는 동작은,상기 메모리에 저장된 제1 리스트 정보에 대응하는 상기 복수의 오디오 회로들에 대한 상기 초기화를 수행하는동작을 포함하고,상기 저장하는 동작은,상기 복수의 오디오 회로들 중에서, 상기 초기화에 기반하여 상기 제2 상태로 스위칭된 오디오 회로에응답하여, 상기 제1 리스트 정보와 상이한 제2 리스트 정보에, 상기 제2 상태로 스위칭된 상기 오디오 회로를추가하는 동작을 포함하는,방법."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "청구항 10에 있어서, 상기 저장하는 동작은,상기 전자 장치의 프로세서 및 상기 복수의 오디오 회로들 각각을 연결하는 오디오 인터페이스들 각각에 대응하는 정보를 이용하여, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의오디오 회로를 식별하는 동작을 포함하는,방법."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "청구항 12에 있어서, 상기 식별하는 동작은,오디오 인터페이스의 타입, 오디오 인터페이스를 통해 연결된 오디오 회로의 명칭 또는 오디오 인터페이스를 통해 교환되는 신호의 포맷 중 적어도 하나를 나타내는 상기 정보를 이용하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하는 동작을 포함하는,방법."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "청구항 10에 있어서,공개특허 10-2025-0007358-5-상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 복수의 오디오 회로들에 대한 초기화를 완료하기 위하여, 상기 식별된 적어도 하나의 오디오 회로 및 더미 드라이브를 연결하는 동작을 더 포함하는,방법."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "청구항 10에 있어서,상기 전자 장치의 프로세서에 의한 소프트웨어 어플리케이션의 실행에 기반하여, 상기 제2 상태의 오디오 회로의 기능을 실행하는 동작을 더 포함하는,방법."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "청구항 10에 있어서, 상기 저장하는 동작은,상기 복수의 오디오 회로들 중에서, 상기 적어도 하나의 제1 상태의 오디오 회로를 식별하는 것에 기반하여, 지정된 횟수에 기반하여, 상기 식별된 적어도 하나의 오디오 회로의 상태를 반복적으로 식별하는 동작;상기 지정된 횟수 만큼 상기 적어도 하나의 오디오 회로의 상태를 식별하는 동안, 상기 적어도 하나의 오디오회로의 상태가 상기 제1 상태 내에서 유지됨을 식별하는 것에 기반하여, 상기 제1 상태 내에서 유지되는 상기적어도 하나의 오디오 회로를 나타내는 정보를, 상기 로그 정보 내에 저장하는 동작을 포함하는,방법."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "청구항 10에 있어서, 상기 저장하는 동작은,상기 전자 장치의 휘발성 메모리에 형성된 로그 버퍼에 상기 적어도 하나의 오디오 회로가 상기 초기화에 의해액세스할 수 있는 오디오 회로와 상이함을 나타내는 로그 정보를 저장하는 동작을 포함하고;상기 방법은,상기 로그 정보의 출력을 나타내는 입력에 응답하여, 상기 휘발성 메모리 및 상기 전자 장치의 비휘발성 메모리중 상기 비휘발성 메모리에, 상기 로그 정보를 저장하는 동작을 더 포함하는,방법."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 복수의 오디오 회로들 중에서, 상기 적어도 하나의 제1 상태의 오디오 회로를 식별하는 것에 기반하여, 지정된 횟수에 기반하여, 상기 식별된 적어도 하나의 오디오 회로의 상태를 반복적으로 식별하고;상기 지정된 횟수 만큼 상기 적어도 하나의 오디오 회로의 상태를 식별하는 동안, 상기 적어도 하나의 오디오회로의 상태가 상기 제1 상태 내에서 유지됨을 식별하는 것에 기반하여, 상기 제1 상태 내에서 유지되는 상기적어도 하나의 오디오 회로를 나타내는 정보를, 상기 로그 정보 내에 저장하도록, 상기 프로세서를 야기하는,컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "청구항 18에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 메모리에 저장된 제1 리스트 정보에 대응하는 상기 복수의 오디오 회로들에 대한 상기 초기화를 수행하고;상기 복수의 오디오 회로들 중에서, 상기 초기화에 기반하여 상기 제2 상태로 스위칭된 오디오 회로에응답하여, 상기 제1 리스트 정보와 상이한 제2 리스트 정보에, 상기 제2 상태로 스위칭된 상기 오디오 회로를추가하도록, 상기 프로세서를 야기하는,컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "청구항 18에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 프로세서 및 상기 복수의 오디오 회로들 각각을 연결하는 오디오 인터페이스들 각각에 대응하는 정보를 이용하여, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를식별하도록, 상기 프로세서를 야기하는,컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "청구항 20에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 오디오 인터페이스의 타입, 오디오 인터페이스를 통해 연결된 오디오 회로의 명칭 또는 오디오 인터페이스를 통해 교환되는 신호의 포맷 중 적어도 하나를 나타내는 상기 정보를 이용하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하도록, 상기 프로세서를 야기하는,컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "청구항 18에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 복수의 오디오 회로들에 대한 초기화를 완료하기 위하여, 상기 식별된 적어도 하나의 오디오 회로 및 더미 드라이버를 연결하도록, 상기 프로세서를 야기하는,컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "청구항 18에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 소프트웨어 어플리케이션의 실행에 기반하여, 상기 제2 상태의 오디오 회로의 기능을 실행하도록, 상기 프로세서를 야기하는,컴퓨터 판독 가능 저장 매체.공개특허 10-2025-0007358-7-청구항 24"}
{"patent_id": "10-2023-0087391", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_25", "content": "청구항 18에 있어서, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 전자 장치의 휘발성 메모리에 형성된 로그 버퍼에 상기 로그 정보를 저장하고; 및상기 로그 정보의 출력을 나타내는 입력에 응답하여, 상기 전자 장치의 비휘발성 메모리 및 상기 휘발성 메모리중 상기 비휘발성 메모리에, 상기 로그 정보를 복제하도록, 상기 프로세서를 야기하는,컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2023-0087391", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예에 따른, 전자 장치(electronic device)는, 프로세서, 상기 프로세서에 연결된 복수의 오디오 회로들 및 인스트럭션들을 저장하도록 구성된 메모리를 포함할 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 전자 장치를 부팅하는 동안, 제1 상태 내 상기 복수의 오디오 회로들의 초기화를 수행하도록, 상기 프로세서를 야기할 수 있다. 상기 복수의 오디오 회로들 각각은 초기화에 기반하여 상기 제1 상태와 상이 한 제2 상태로 스위칭될 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 복수의 오디 오 회로들 중에서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 메모리에, 상기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보를 저장하도록, 상기 프로 세서를 야기할 수 있다."}
{"patent_id": "10-2023-0087391", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시(present disclosure)는 프로세서에 연결된 오디오 회로를 식별하기 위한 전자 장치 및 그 방법에 관한 것이다."}
{"patent_id": "10-2023-0087391", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "오디오와 관련된 다양한 기능들을 지원하기 위하여, 전자 장치는 하나 이상의 오디오 회로들을 포함할 수 있다. 상기 기능들은, 오디오를 녹음하는 기능, 오디오를 재생하는 기능, 오디오 데이터를 인코딩하거나 및/또는 디코 딩하는 기능을 포함할 수 있다. 상기 기능들을 지원하기 위한 회로들은, 전자 장치 내에서, 전자 장치의 프로 세서와 전기적으로 연결될 수 있다."}
{"patent_id": "10-2023-0087391", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예(an embodiment)에 따른, 전자 장치(electronic device)는, 프로세서, 상기 프로세서에 연결된 복수 의 오디오 회로들 및 인스트럭션들을 저장하도록 구성된 메모리를 포함할 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 전자 장치를 부팅하는 동안, 제1 상태 내 상기 복수의 오디오 회로들의 초 기화를 수행하도록, 상기 프로세서를 야기할 수 있다. 상기 복수의 오디오 회로들 각각은 초기화에 기반하여 상기 제1 상태와 상이한 제2 상태로 스위칭될 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시 에, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 메모리에, 상기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보를저장하도록, 상기 프로세서를 야기할 수 있다. 일 실시예에 따른, 전자 장치의 방법은, 상기 전자 장치를 부팅하는 동안, 제1 상태 내 복수의 오디오 회로들의 초기화를 수행하는 동작을 포함할 수 있다. 상기 전자 장치의 상기 복수의 오디오 회로들 각각은 초기화에 기 반하여 상기 제1 상태와 상이한 제2 상태로 스위칭될 수 있다. 상기 방법은, 상기 복수의 오디오 회로들 중에 서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 메모리에, 상 기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보를 저장하는 동작을 포함할 수 있다. 일 실시예에 따른, 컴퓨터 판독 가능 저장 매체는, 인스트럭션들을 포함할 수 있다. 상기 인스트럭션들은, 전 자 장치의 프로세서에 의해 실행될 시에, 상기 전자 장치를 부팅하는 동안, 제1 상태 내 상기 복수의 오디오 회 로들의 초기화를 수행하도록, 상기 프로세서를 야기할 수 있다. 상기 복수의 오디오 회로들 각각은 초기화에 기반하여 상기 제1 상태와 상이한 제2 상태로 스위칭될 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 전자 장치의 메모리에, 상기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보를 저장하도록, 상기 프로세서를 야기할 수 있다."}
{"patent_id": "10-2023-0087391", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 문서의 다양한 실시예들이 첨부된 도면을 참조하여 설명된다. 본 문서의 다양한 실시 예들 및 이에 사용된 용어들은 본 문서에 기재된 기술을 특정한 실시 형태에 대해 한정 하려는 것이 아니며, 해당 실시 예의 다양한 변경, 균등물, 및/또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 단수의 표현 은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및/ 또는 B 중 적어도 하나\", \"A, B 또는 C\" 또는 \"A, B 및/또는 C 중 적어도 하나\" 등의 표현은 함께 나열된 항목 들의 모든 가능한 조합을 포함할 수 있다. \"제1\", \"제2\", \"첫째\" 또는 \"둘째\" 등의 표현들은 해당 구성요소들을, 순서 또는 중요도에 상관없이 수식할 수 있고, 한 구성요소를 다른 구성요소와 구분하기 위해 사 용될 뿐 해당 구성요소들을 한정하지 않는다. 어떤(예: 제1) 구성요소가 다른(예: 제2) 구성요소에 \"(기능적으 로 또는 통신적으로) 연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로 연결되거나, 다른 구성요소(예: 제3 구성요소)를 통하여 연결될 수 있다. 본 문서에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구성된 유닛을 포함하며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로 등의 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는 최소 단위 또는 그 일부가 될 수 있다. 예를 들면, 모듈은 ASIC(application-specific integrated circuit)으로 구성될 수 있다. 도 1은, 일 실시예에 따른, 전자 장치의 블록도를 도시한다. 일 실시예에서, 전자 장치는 단말(또는 사용자 단말)로 지칭될(referred as) 수 있다. 단말은, 예를 들어, 스마트폰(smartphone)(예, 전자 장치(101- 1)), 폴더블폰(예, 전자 장치(101-2)), 스마트패드(smartpad), 및/또는 태블릿 PC를 포함할 수 있다. 단말은, 스마트워치(smartwatch)(예, 전자 장치(101-3)) 및/또는 HMD(head-mounted device)(예, 전자 장치(101-4))와 같은 스마트액세서리를 포함할 수 있다. 단말은, 예를 들어, 랩톱(예, 전자 장치(101-5)) 및 데스크톱과 같은 개인용 컴퓨터(personal computer, PC)를 포함할 수 있다. 도 1을 참고하면, 일 실시예에 따른, 전자 장치에 포함된 하나 이상의 하드웨어들이 상이한 블록들에 의해 도시된다. 일 실시예에 따른, 전자 장치는, 어플리케이션 프로세서(application processor) 및/또 는 메모리를 포함할 수 있다. 어플리케이션 프로세서는, 하나 이상의 인스트럭션들에 기반하여 데이 터를 처리하기 위한 회로를 포함할 수 있다. 데이터를 처리하기 위한 하드웨어 컴포넌트는, 예를 들어, ALU(arithmetic and logic unit), FPU(floating point unit), FPGA(field programmable gate array) 및/또는 CPU(central processing unit)를 포함할 수 있다. 전자 장치에 포함된 어플리케이션 프로세서의 개 수는 하나 이상일 수 있다. 예를 들어, 어플리케이션 프로세서는 듀얼 코어(dual core), 쿼드 코어(quad core) 또는 헥사 코어(hexa core)와 같은 멀티-코어 프로세서의 구조를 가질 수 있다. 일 실시예에서, 어플리 케이션 프로세서는, 프로세서로 지칭될 수 있다. 일 실시예에 따른, 전자 장치의 메모리는, 어플리케이션 프로세서에 입력 및/또는 출력되는 데 이터 및/또는 인스트럭션을 저장하기 위한 하드웨어를 포함할 수 있다. 메모리는, 예를 들어, RAM(random-access memory)와 같은 휘발성 메모리(volatile memory) 및/또는 ROM(read-only memory)와 같은 비 휘발성 메모리(non-volatile memory)를 포함할 수 있다. 휘발성 메모리는, 예를 들어, DRAM(dynamic RAM), SRAM(static RAM), Cache RAM, PSRAM (pseudo SRAM) 중 적어도 하나를 포함할 수 있다. 비휘발성 메모리는, 예를 들어, PROM(programmable ROM), EPROM (erasable PROM), EEPROM (electrically erasable PROM), 플래시 메모리, 하드디스크, 컴팩트 디스크, SSD(solid state drive), eMMC(embedded multi media card) 중 적어도 하 나를 포함할 수 있다. 일 실시예에 따른, 전자 장치의 메모리 내에서, 어플리케이션 프로세서가 데이터에 수행할 연산, 및/또는 동작을 나타내는 하나 이상의 인스트럭션들(또는 명령어들)이 저장될 수 있다. 하나 이상의 인 스트럭션들의 집합은, 펌웨어, 운영 체제, 프로세스, 루틴, 서브-루틴, 소프트웨어 어플리케이션 및/또는 어플 리케이션으로 참조될 수 있다. 예를 들어, 전자 장치, 및/또는 어플리케이션 프로세서는, 운영체제, 펌웨어, 드라이버, 및/또는 어플리케이션 형태로 배포된 복수의 인스트럭션의 집합(set of a plurality of instructions)이 실행될 시에, 도 2 및/또는 도 7a 내지 도 7b의 동작들 중 적어도 하나를 수행할 수 있다. 이 하에서, 어플리케이션이 전자 장치에 설치되었다는 것은, 어플리케이션의 형태로 제공된 하나 이상의 인스 트럭션들이 전자 장치의 메모리 내에 저장된 것으로써, 상기 하나 이상의 어플리케이션들이 전자 장 치의 어플리케이션 프로세서에 의해 실행 가능한(executable) 포맷(예, 전자 장치의 운영 체제 에 의해 지정된 확장자를 가지는 파일)으로 저장된 것을 의미할 수 있다. 도 1을 참고하면, 일 실시예에 따른, 전자 장치의 어플리케이션 프로세서는 오디오 DSP(digital signal processor)를 포함할 수 있다. 오디오 DSP는, 오디오와 관련된 신호 처리를 위하여, 어플리 케이션 프로세서에 포함될 수 있다. 예를 들어, 오디오 DSP는, 오디오를 위한 보조 프로세서로써, 어플리케이션 프로세서에 포함될 수 있다. 오디오 DSP를 통해, 어플리케이션 프로세서는, 전자 장치에 포함된 복수의 오디오 회로들과 전기적으로 연결될 수 있다. 이하에서, 회로들이 전기적으로 연결된 것은, 두 회로들 사이의 유선 신호 경로가 수립된 것을 의미할 수 있다. 전기적으로 회로들이 연결된 것은, 회로들 사이의 직접 연결 및/또는 간접 연결을 포함할 수 있다. 예를 들어, 전기적으로 연결된 회로들 사이에 전기 신호의 전달을 위한 하나 이상의 회로 요소들이 위치될 수 있다. 이하에서, 회로들이 연결된 것은, 상기 회로들이 전기적으로 연결된 것을 의미할 수 있다. 복수의 오디오 회로들과 연결되기 위하여, 오디오 DSP는, 복수의 오디오 인터페이스들을 포함할 수 있다. 예를 들어, 어플리케이션 프로세서 및 복수의 오디오 회로들은, 복수의 오디오 인터페이스들을 통해 서로 연결될 수 있다. 이하 에서, 전자 장치의 사운드 카드는, 오디오 DSP 및 복수의 오디오 회로들의 그룹을 의미할 수 있 다. 도 1을 참고하면, 오디오 DSP가 어플리케이션 프로세서에 포함된 일 실시예가 도시되지만, 실시예가 이에 제한되는 것은 아니다. 예를 들어, 오디오 DSP는, 어플리케이션 프로세서의 외부(예, 어플리케 이션 프로세서가 위치된 PCB(printed circuit board))에 위치될 수 있다. 어플리케이션 프로세서의 외부에 위치된 케이스 내에서, 오디오 DSP는, 복수의 오디오 인터페이스들을 통해 복수의 오디오 회 로들과 전기적으로 직접 연결되거나, 및/또는 어플리케이션 프로세서를 통해 복수의 오디오 회로들 과 전기적으로 연결될 수 있다. 일 실시예에 따른, 전자 장치의 복수의 오디오 회로들은, 오디오와 관련된 상이한 기능들을 지원하기 위하여, 어플리케이션 프로세서와 연결될 수 있다. 예를 들어, 제1 오디오 회로(150-1)는, 오디오 신호에 대한 신호 처리를 위한 회로들(예, ADC(analog-to-digital converter), DAC(digital-to-analog converter), 오 디오 신호에 대한 필터, 이득(gain) 설정 회로)을 포함할 수 있다. 예를 들어, 제2 오디오 회로(150-2)는, 전자 장치의 스피커로 송신될 전기 신호(예, 오디오 신호)의 증폭을 위한 증폭 회로를 포함할 수 있다. 예를 들어, 제3 오디오 회로(150-3)는, 진동 알림을 출력하기 위한 햅틱 액추에이터를 포함할 수 있다. 예를 들어, 제N 오디오 회로(150-N)는 블루투스에 기반하는 통신 회로를 포함할 수 있다. 실시예가 이에 제한되는 것은 아 니며, 예를 들어, 복수의 오디오 회로들은, 마이크를 포함할 수 있다. 상기 마이크는, 오디오 인터페이스 를 통해 어플리케이션 프로세서와 전기적으로 직접적으로 연결되거나, 또는 오디오 회로를 통해 어플리케 이션 전기적으로 프로세서와 간접적으로 연결될 수 있다. 일 실시예에 따른, 전자 장치의 어플리케이션 프로세서 및/또는 오디오 DSP에 포함된 복수의 오 디오 인터페이스들은, 오디오 인터페이스에 대응하는 오디오 회로와 통신하기 위하여, 오디오 데이터 의 교환을 위한 규격에 기반하여 설계될 수 있다. 상기 규격은, I2S(intergrated interchip sound), SLIMbus(serial low-power inter-chip media bus) 및/또는 사운드-와이어를 포함할 수 있다. 실시예가 이에 제한되는 것은 아니며, 복수의 오디오 인터페이스들 중 적어도 하나는 MIPI(Mobile Industry Processor Interface) 및/또는 GPIO(general purpose input output)와 같은 규격에 기반하여 설계될 수 있다. 복수의 오 디오 인터페이스들은, 복수의 오디오 회로들과 전기적으로 연결되기 위하여 어플리케이션 프로세서 에 포함되거나, 또는 형성된, 하나 이상의 회로들을 포함할 수 있다. 일 실시예에 따른, 전자 장치는 오디오와 관련된 기능을 실행하기 위하여, 복수의 오디오 회로들에 대한 초기화(initialization)를 수행할 수 있다. 오디오 회로를 초기화하는 것은, 상기 오디오 회로를 제어하 여, 상기 오디오 회로의 상태를, 어플리케이션 프로세서 또는 오디오 DSP에 의해 제어가능한 상태로 변경하는 것을 의미할 수 있다. 이하에서, 오디오 회로의 활성 상태(enabled state 또는 activated state)는, 어플리케이션 프로세서 또는 오디오 DSP에 의해 제어가능한 오디오 회로의 상태를 포함할 수 있다. 일 실시 예에 따르면, 오디오 회로의 활성 상태는, 오디오 회로에 대응하는 드라이버 어플리케이션의 초기화가 완료된 상태를 포함할 수 있다. 오디오 회로의 활성 상태는, 상기 오디오 회로에 대응하는 API(application programmable interface)에 응답하여, 상기 오디오 회로가 상기 API에 의해 특정된(specified) 기능을 실행 가 능한 상태를 포함할 수 있다. 예를 들어, 어플리케이션 프로세서는, 소프트웨어 어플리케이션의 실행에 기반하여, 활성 상태의 오디오 회로의 기능을 실행할 수 있다. 오디오 회로의 활성 상태는, 상기 오디오 회로 의 유휴 상태(idle state)를 포함할 수 있다. 상기 활성 상태는, 웨이크-업 상태, 유휴 상태, 턴-온 상태로 지 칭될 수 있다. 상기 오디오 회로의 활성 상태는, 지정된 전압을 초과하는 전력 신호가 상기 오디오 회로로 제 공되는 상태를 포함할 수 있다. 일 실시예에서, 오디오 회로의 비활성 상태(disabled state 또는 deactivated state)는, 상기 활성 상태와 상 이한 오디오 회로의 다른 상태를 포함할 수 있다. 오디오 회로의 비활성 상태는, 어플리케이션 프로세서 또는 오디오 DSP에 의해 제어 불가능한 오디오 회로의 상태를 포함할 수 있다. 예를 들어, 비활성 상태의 오디오 회로는, 오디오 인터페이스를 통해 어플리케이션 프로세서 또는 오디오 DSP로부터 송신된 신 호에 응답하지 않을 수 있다. 예를 들어, 오디오 회로의 비활성 상태는, 상기 오디오 회로에 대응하는 API에 응답하여, 상기 오디오 회로가 상기 API에 의해 특정된 기능을 실행하지 않는 상태를 포함할 수 있다. 오디오 회로의 비활성 상태는 슬립 상태로 지칭될 수 있다. 상기 오디오 회로의 비활성 상태는, 지정된 전압 미만의 전력 신호가 상기 오디오 회로로 제공되거나, 및/또는 상기 전력 신호가 상기 오디오 회로로 제공되는 것이 제 한되는 상태를 포함할 수 있다. 상기 오디오 회로의 비활성 상태는, 고장, 파손, 및/또는 소손에 의해 오디오 회로의 초기화가 적어도 일시적으로 중단된 상태를 포함할 수 있다. 예를들어, 오디오 회로의 비활성 상태는, 오디오 회로가 실질적으로 동작하지 않는 상태를 포함할 수 있다. 예를 들어, 상기 비활성 상태는, 오디오 회 로의 적어도 일부분 및/또는 오디오 회로의 회로 요소들 중 적어도 하나가 꺼짐에 따라, 상기 오디오 회로가 전 기적으로 비활성화된 상태를 포함할 수 있다. 상기 비활성 상태는, 턴-오프 상태로 지칭될 수 있다. 일 실시예에 따른, 전자 장치의 어플리케이션 프로세서는, 전자 장치에 대한 부팅을 수행할 수 있다. 일 실시예에 따르면, 전자 장치를 부팅하는 것은, 전자 장치에 포함된 하드웨어들(또는 회로 들)을 활성화하여, 상기 전자 장치에 포함된 적어도 하나 이상의하드웨어들을, 전자 장치의 소프트웨 어에 의해 제어 가능한 상태로 만드는 것을 의미할 수 있다. 전자 장치를 부팅하는 것은, 전자 장치(10 1)에 포함된 하드웨어들의 상태를 식별하는 동작을 포함할 수 있다. 하드웨어의 상태를 식별하는 동작은, 하드 웨어의 상태를 검출(detect)하거나, 인식(recognize)하거나, 감지(sense)하거나 및/또는 판단(determine)하는 동작을 포함할 수 있다. 일 실시예에 따르면, 전자 장치를 부팅하는 것은 전자 장치의 메모리에 포 함되어 있는 운영체제(예: 안드로이드 OS)를 전자 장치 및/또는 어플리케이션 프로세서에 의해 실행 가능하게 불러 들이는 작업을 포함할 수 있다. 일 실시예에 따른, 어플리케이션 프로세서는, 전자 장치를 부팅하는 동안, 비활성 상태 내 복수의 오디오 회로들의 초기화를 수행할 수 있다. 복수의 오디오 회로들 각각은 초기화에 기반하여 상기 비활성 상태로부터 활성 상태로 스위칭될 수 있다. 일 실시예에 따르면, 복수의 오디오 회로들을 초기화 하는 동작은, 최초 파라미터 및/또는 미리 설정된 파라미터들에 기반하여 복수의 오디오 회로들을 구동하 여, 상기 복수의 오디오 회로들이 어플리케이션 프로세서 및/또는 오디오 DSP에 의해 이용 가능 한 상태로 만드는 동작을 포함할 수 있다. 복수의 오디오 회로들을 초기화하는 동작은, 어플리케이션 프 로세서에 의해 실행되는 시스템 소프트웨어(예, 커널(kernle))에 기반하여 상기 복수의 오디오 회로들 각각에 대응하는 디바이스 드라이버(예, 도 3의 복수의 디바이스 드라이버들)를 로드하는 동작을 포 함할 수 있다. 일 실시예에 따른, 전자 장치의 어플리케이션 프로세서는, 복수의 오디오 회로들 중에서, 복수 의 오디오 회로들의 초기화와 독립적으로, 비활성 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식 별할 수 있다. 예를 들어, 어플리케이션 프로세서는, 복수의 오디오 회로들 각각이 초기화에 기반하 여 활성 상태로 스위칭되었는지 여부를 식별할 수 있다. 초기화에도 불구하고, 비활성 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 어플리케이션 프로세서는 메모리에, 상기 식 별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보를 저장할 수 있다. 상기 로그 정보 는, 상기 식별된 적어도 하나의 오디오 회로가 초기화에 의해 액세스할 수 있는 오디오 회로와 상이함을 나타낼 수 있다. 예를 들어, 어플리케이션 프로세서는 메모리에, 복수의 오디오 회로들 중 비 활성 상태에 대응하는 적어도 하나의 오디오 회로를 나타내는 로그 정보를 저장할 수 있다. 예를 들어, 상기 로그 정보는, 비활성 상태에 대응하는 적어도 하나의 오디오 회로의 리스트를 포함할 수 있다. 일 실 시예에 따르면, 비활성 상태의 오디오 회로에 의해 야기되는 문제를 해결하는 관점에서, 로그 정보는 디버 그 정보 및/또는 디버그 파일로 지칭될 수 있다. 예를 들어, 어플리케이션 프로세서는, 복수의 오디오 회 로들 중 비활성 상태에 대응하는 적어도 하나의 오디오 회로를 나타내는 정보 및 초기에 액세스할 수 있는 오디오 회로에 대한 정보를 비교하여, 오류 및/또는 고장이 발생된 오디오 회로를 식별할 수 있다. 상술한 바와 같이, 일 실시예에 따른, 전자 장치는, 전자 장치를 부팅하는 동안, 복수의 오디오 회로 들을 개별적으로 점검할 수 있다. 예를 들어, 전자 장치는, 복수의 오디오 회로들 각각이 초기 화에 기반하여 활성 상태로 스위칭되었는지 여부를 식별할 수 있다. 복수의 오디오 회로들 중에서 활성 상태와 상이한 비활성 상태의 오디오 회로를 식별하는 경우, 전자 장치는 로그 정보에, 식별된 오디 오 회로를 나타내는 정보를 저장할 수 있다. 상기 로그 정보는, 전자 장치의 유지 보수 (maintenance)를 위해 이용될 수 있다. 이하에서는, 도 2를 참고하여, 복수의 오디오 회로들의 초기화를 위하여, 일 실시예에 따른, 전자 장치 및/또는 어플리케이션 프로세서에 의해 수행되는 동작의 일 예가 설명된다. 도 2는, 일 실시예에 따른, 전자 장치의 흐름도의 일 예를 도시한다. 도 1의 전자 장치 및/또는 어플리케 이션 프로세서는, 도 2를 참고하여 설명되는 동작들 중 적어도 하나를 수행할 수 있다. 도 2를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 제1 리스트 정보에 의해 나타 내고, 프로세서에 연결된, 복수의 오디오 회로들(예, 도 1의 복수의 오디오 회로들) 중 적어도 하나의 초 기화를 개시(initiate)할 수 있다. 이하에서, 오디오 회로가 리스트 정보에 의해 나타나는 것은, 및/또는 오디 오 회로가 리스트 정보에 대응하는 것은, 상기 리스트 정보에 상기 오디오 회로를 특정하기 위한(for specifying) 파라미터(예, 상기 오디오 회로에 할당된 식별자, 일련번호 및/또는 명칭)가 포함되어 있음을 의미할 수 있다. 상기 제1 리스트 정보는, 전자 장치의 메모리(예, 도 1의 메모리)에 저장될 수 있다. 상기 제1 리스트 정보는, 전자 장치에 포함된 하드웨어들 및/또는 회로들의 적어도 일부분에 대응할 수 있다. 도 2의 동작은, 일 실시예에 따르면, 전자 장치가 부팅하는 동안, 전자 장치의 프로세서(예, 도 2의 어플리케이션 프로세서)에 의해 수행될 수 있다. 실시예가 이에 제한되는 것은 아니며, 전자 장치 의 프로세서는, 부팅과 상이한 상태 및/또는 동작(예, 전자 장치의 복구 및/또는 진단과 관련된 동작)을 수행하는 동안, 전자 장치의 프로세서에 의해 수행될 수 있다. 일 실시예에 따르면, 상기 제1 리스트 정보는, 전자 장치에 포함된 복수의 오디오 회로들을 식별하기 위한 정보(예, 상기 복수의 오디오 회로들 각각에 할당된 명칭들)를 포함할 수 있다. 일 실시예에 따르면, 상기 제1 리스트 정보에 기반하여, 프로세서는 복수의 오디오 회로들 각각에 대응하는 시스템 어플리케이션(예, 디바이스 드라이버)을 실행할 수 있다. 일 실시예에서, 디바이스 드라이버의 실행에 기반하여, 프로세서는 적어도 하나의오디오 회로들에 대한 초기화 를 위한 기능을 실행할 수 있다. 예컨대, 프로세서는 복수의 오디오 회로들에 대해서 각각 초기화를 하거나, 모 든 오디오 회로들에 대해서 초기화를 수행할 수 있다. 예를 들어, 프로세서는 복수의 오디오 회로들에 대한 초 기화를 개별적으로 및/또는 독립적으로 수행할 수 있다. 일 실시예에 따라, 상기 기능은, 상기 복수의 오디오 회로들 각각으로, 상기 디바이스 드라이버에 의해 설정된 전력 신호를 제공하는 기능을 포함할 수 있다. 일 실시예에 따라, 상기 기능은, 상기 복수의 오디오 회로들 및 프로세서 사이의 오디오 인터페이스를 활성화하기 위한 기능을 포함할 수 있다. 예컨대, 오디오 인터페이스를 활성화하기 위하여, 프로세서는 상기 오디오 인터 페이스의 클럭(clock)을, 상기 디바이스 드라이버에 의해 특정된 클럭으로 조절할 수 있다. 예컨대, 오디오 인 터페이스를 활성화하기 위하여, 프로세서는 상기 오디오 인터페이스에 전기 신호를 전송하여, 상기 디바이스 드 라이버와 오디오와 관련된 신호들을 송수신할 수 있다. 프로세서 및 오디오 회로 사이에서 송신 및/또는 수신 되는 상기 전기 신호는, 제어 신호, 데이터 신호 및/또는 오디오 신호로 지칭될 수 있다. 일 실시예에서, 동작에 기반하여 복수의 오디오 회로들이 초기화되는 동안, 전자 장치의 프로세서는 전자 장치의 사운드 카드(예, 도 1의 오디오 DSP 및 복수의 오디오 회로들의 그룹)를 위한 디바이스 드라 이버(예, 도 3의 머신 드라이버)에 대한 초기화를 수행할 수 있다. 예를 들어, 프로세서는 도 3의 복수의 디바이스 드라이버들 및/또는 머신 드라이버에 대한 초기화 및/또는 로드를 수행할 수 있다. 사운드 카드를 위한 디바이스 드라이버에 기반하여, 프로세서는 복수의 오디오 회로들 각각을, 복수의 오디오 인터페이 스들(예, 도 1의 복수의 오디오 인터페이스들)과 전기적 또는 물리적으로 연결(bind)할 수 있다. 도 2를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 제2 리스트 정보에, 초기화된 오디오 회로에 대한 정보(예, 상기 오디오 회로에 할당된 명칭을 나타내는 텍스트)를 추가할 수 있다. 예를들 어, 동작에 기반하여 초기화된 오디오 회로를 식별한 프로세서는, 동작를 수행하여, 제2 리스트 정보 에 상기 초기화된 오디오 회로에 대한 정보(예, 오디오 회로에 고유하게 할당된(uniquely assigned to) 명칭, 일련번호, 또는 오디오 회로에 할당된 ID 등)를 추가할 수 있다. 일 실시예에 따르면, 초기화된 부품들의 리 스트의 관점에서, 제2 리스트 정보는 부품 리스트(component list)로 지칭될 수 있다. 동작에 기반하여, 제2 리스트 정보에, 활성 상태로 스위칭된 적어도 하나의 오디오 회로에 대한 정보가 포함되거나, 및/또는 누적 될 수 있다. 도 2를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 제1 리스트 정보와 관련된 복 수의 오디오 회로들(예, 명칭이 제1 리스트 정보에 저장된 오디오 회로) 전부에 대한 정보가 제2 리스트 정보에 추가되었는지 여부를 식별할 수 있다. 프로세서는, 복수의 오디오 회로들 중 각각이 초기화되는 것에 기반하여, 도 2의 동작들(215, 220)을 수행할 수 있다. 일 실시예에서, 프로세서는 제1 리스트 정보 및 제2 리 스트 정보를 비교하여, 제1 리스트 정보 및 제2 리스트 정보 중 제1 리스트 정보에 의해 나타내는 적어도 하나 의 오디오 회로를 식별할 수 있다. 예를 들어, 특정 오디오 회로에 대한 정보가 제1 리스트 정보 및 제2 리스 트 정보 중 제1 리스트 정보에만 포함되었다는 것은, 특정 오디오 회로가 초기화되지 못한 상태(예, 비활성 상 태)에 대응함을 의미할 수 있다. 예컨대 프로세서는, 제1 리스트 정보에 의해 나타내는 복수의 오디오 회로들 전부가 제2 리스트 정보에 포함된 경우(220-예), 프로세서는 동작을 수행할 수 있다. 제1 리스트 정보에 의해 나타내는 오디오 회로들 중 적어도 하나에 대한 정보가 제2 리스트 정보에 포함되어 있지 않거나, 제1 리 스트 정보에 포함된 오디오 회로들 전부에 대한 정보가 제2 리스트 정보에 포함되지 않은 경우(220-아니오), 프 로세서는 동작을 수행할 수 있다. 예를 들어, 제1 리스트 정보에 의해 나타내는 오디오 회로들 전부에 대 한 정보가 제2 리스트 정보에 포함되기 이전에, 프로세서는 동작을 수행할 수 있다. 도 2를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 복수의 오디오 회로들의 초기 화를 완료할 수 있다. 동작를 수행하는 상태 내에서, 복수의 오디오 회로들 전부에 대한 정보가 제2 리스 트 정보에 추가되었기 때문에, 복수의 오디오 회로들 전부는 초기화에 기반하여 활성 상태에 대응할 수 있다. 동작 이후, 프로세서는 전자 장치의 부팅을 완료할 수 있다. 동작에 기반하여, 프로세서는 사운드 카드의 등록 및/또는 활성화를 완료할 수 있다. 사운드 카드를 등록하는 것은, 사운드 카드와 관련된 전자 장 치의 하드웨어(예, 도 1의 오디오 DSP 및 복수의 오디오 회로들)의 상태를, 프로세서에 의해 실행되 는 소프트웨어 어플리케이션에 의해 제어 가능한 상태로 변경하는 것을 의미할 수 있다. 예를 들어, 동작(22 5)의 초기화의 완료에 기반하여, 프로세서는 활성 상태인 복수의 오디오 신호들 전부를 제어할 수 있다. 예를 들어, 동작 이후, 프로세서는 소프트웨어 어플리케이션의 실행에 기반하여, 상기 복수의 오디오 회로들 중 적어도 하나 및/또는 오디오 DSP(예, 도 1의 오디오 DSP)를 제어할 수 있다. 예를 들어, 동작에 기 반하여, 프로세서는 로그 정보(예, 도 1의 로그 정보)를 저장하지 않을 수 있다. 예를 들어, 로그 정보 는 도 2의 동작에 의하여 생성되지 않거나, 및/또는 변경되지 않을 수 있다. 도 2를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 오디오 회로들이 초기화되었 는지 여부가 지정된 횟수 만큼 확인되었는지 여부를 식별할 수 있다. 예를 들어, 프로세서는, 동작의 제1 리스트 정보 및 동작의 제2 리스트 정보를 비교하는 동작을, 동작의 지정된 횟수 만큼 반복적으로 수 행할 수 있다. 제1 리스트 정보 및 제2 리스트 정보를 비교하는 동작은, 동작에 기반하여, 제1 리스 트 정보에 의해 나타내는 오디오 회로들에 대한 정보 전부가 제2 리스트 정보에 포함되지 않은 상태 내에서 수 행될 수 있다. 예를 들어, 프로세서는, 복수의 오디오 회로들 중에서, 비활성 상태의 오디오 회로를 식별하는 것에 기반하여, 지정된 개수 만큼 감소되도록 설정된 재시도 카운터에 기반하여, 오디오 회로들의 초기화 여부 확인을 반복적으 로 수행할 수 있다. 예컨대, 지정된 횟수 만큼 오디오 회로들 초기화 여부 확인하기 이전에(또는 지정된 횟수 미만으로 오디오 회로들의 초기화 여부를 확인한 경우)(230-아니오), 프로세서는 동작을 수행할 수 있다. 있다. 예를 들어, 적어도 하나의 오디오 회로가 초기화되지 않았고, 지정된 횟수 미만으로 상기 오디오 회로들 의 초기화 여부를 확인 한 경우(230-아니오), 프로세서는 동작을 수행할 수 있다. 동작에서, 일 실 시예에 따른, 전자 장치의 프로세서는, 오디오 회로들의 등록을 위한 드라이버(예, 도 3의 머신 드라이버(33 0))를 리셋할 수 있다. 예를 들어, 프로세서는, 동작에 기반하여 로드된 드라이버 중에서, 오디오 회로들 의 등록을 위하여 제1 리스트 정보 및 제2 리스트 정보의 비교를 위해 로드된 드라이버를 리셋하여, 도 2의 동 작들(215, 220)을 수행할 수 있다. 예를 들어, 상기 오디오 회로들의 초기화 여부를 확인하는 횟수가 동작 의 지정된 횟수 미만인 경우, 프로세서는 동작들(215, 220)에 기반하여, 머신 드라이버 초기화 과정을 다 시 수행하게 된다. 예를 들어, 머신 드라이버 초기화는 사운드 카드 등록 과정일 수 있다. 일 실시예에 따르면 프로세서는, 상기 지정된 횟수로부터 시작되고, 점진적으로 차감되는 횟수를 포함하는, 재시도 카운터에 기반하 여 도 2의 동작을 수행할 수 있다. 예를 들어 오디오 회로의 초기화를 시도하는 횟수에 따라 재시도 카운 터가 증가하게 되고 카운터가 일정 지정된 횟수만큼 오디오 회로들의 초기화 여부를 확인한 것으로 판단될 경우 프로세서는 동작 를 수행할 수 있다. 오디오 회로의 초기화를 지정된 횟수 만큼(또는 지정된 횟수 이상으 로) 시도하였으나, 상기 적어도 하나의 오디오 회로가 초기화되지 않은 경우(230-예), 프로세서는 동작을 수행할 수 있다. 예를 들어, 전자 장치를 부팅하는 동안, 지정된 횟수 이상으로 반복적으로 오디오 회로들 초 기화 여부를 확인하였음에도 불구하고, 상기 적어도 하나의 오디오 회로의 상태가 비활성 상태를 유지하는 경우, 프로세서는 동작을 수행할 수 있다. 도 2를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 제2 리스트 정보에 기반하여, 프로세서에 연결된 복수의 오디오 회로들 중에서, 초기화되지 않은 적어도 하나의 오디오 회로를 식별할 수 있 다. 예를 들어, 프로세서는 제1 리스트 정보에 의해 나타내는 오디오 회로들 중에서, 제2 리스트 정보에 의해 나타내는 하나 이상의 오디오 회로들을 식별할 수 있다. 일 실시예에 따르면, 동작의 오디오 회로들 중에 서, 제1 리스트 정보 및 제2 리스트 정보 전부에 포함된 오디오 회로는, 초기화가 완료된, 활성 상태의 오디오 회로일 수 있다. 동작의 오디오 회로들 중에서, 제1 리스트 정보 또는 제2 리스트 정보 중 제1 리스트 정 보에 의해 나타나는 적어도 하나의 오디오 회로는, 초기화되지 않은, 비활성 상태의 적어도 하나의 오디오 회로 일 수 있다. 제2 리스트 정보와 비교되는 관점에서, 제1 리스트 정보는 체크 리스트(check list)로 지칭될 수 있다. 프로세서는 제1 리스트 정보에 의해 나타내는 오디오 회로들 각각을, 제2 리스트 정보 내에서 탐색하여, 상기 오디오 회로들 각각에 대한 정보가 제2 리스트 정보에 포함되는지 여부를 식별할 수 있다. 제1 리스트 정 보에 의해 나타내는 오디오 회로들 중에서, 제2 리스트 정보에 의해 나타나지 않은 오디오 회로는, 초기화되지않은 오디오 회로일 수 있다. 도 2를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 초기화되지 않은 적어도 하나 의 오디오 회로를 나타내는 로그 정보를 저장할 수 있다. 예를 들어, 프로세서는 동작의 초기화 이후 비 활성 상태 내에서 유지되는 적어도 하나의 오디오 회로를 나타내는 텍스트를, 상기 로그 정보 내에 저장할 수 있다. 동작에 기반하여 초기화되지 않은 적어도 하나의 오디오 회로는, 불량 및/또는 고장으로 인해 비활 성 상태를 유지할 수 있다. 동작에 기반하여, 프로세서는, 전자 장치를 부팅하는 동안 또는 특정 상황(예: 오디오 회로 체크 명령 수신, 진단 명령 등) 전자 장치에 포함된 복수의 오디오 회로들에 대한 고장을 체크할 수 있다. 일 실시예에 따르면, 동작에 기반하여, 프로세서는, 부팅 이후 오디오 회로를 진단하기 위하여 수행되는 소프트웨어 어플리케이션과 독립적으로, 초기화되지 않은 적어도 하나의 오디오 회로를 나타내 는 로그 정보를 획득할 수 있다. 상기 로그 정보에 기반하여, 프로세서는 초기화되지 않은 적어도 하나의 오디 오 회로에 대한 수리를 가이드할 수 있다. 도 2를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 제1 리스트 정보 및/또는 제2 리스트 정보에 기반하여, 복수의 오디오 회로들 중 적어도 하나의 초기화가 실패된 것으로 결정할 수 있다. 동 작 이후, 전자 장치가 부팅하는 동안 동작를 수행했을 경우, 프로세서는 전자 장치의 부팅을 완료할 수 있다. 일 실시예에서, 동작을 수행하는 프로세서는, 비활성 상태 내 적어도 하나의 오디오 회로를 포 함하는 전자 장치의 사운드 카드 전체 또는 적어도 하나의 등록 및/또는 활성화를 중단할 수 있다. 예를 들어, 동작 이후, 전자 장치에 포함된 오디오 DSP 및/또는 복수의 오디오 회로들에 기반하여 오디오와 관련된 기 능을 실행하는 것이, 제한될 수 있다. 실시예가 이에 제한되는 것은 아니며, 프로세서는 동작에 기반하여 식별된 적어도 하나의 오디오 회로와 상이한 다른 오디오 회로에 대한 기능을 실행하는 것을 지원할 수 있다. 동작 이후, 프로세서는 디스플레이를 통해, 동작에 기반하여 저장된 로그 정보의 출력을 가이드하는 UI(user interface)를 표시할 수 있다. 도 2를 참고하여 설명된, 전자 장치의 동작은, 전자 장치에 설치된 하나 이상의 소프트웨어 어플리케이션들에 기반하여 수행될 수 있다. 이하에서는, 도 3을 참고하여 도 2의 동작들을 수행하기 위하여 전자 장치에 포함된 하나 이상의 소프트웨어 어플리케이션들의 일 예가 설명된다. 도 3은, 일 실시예에 따른, 전자 장치의 프로세서에 의해 실행되는 소프트웨어 어플리케이션들에 대한 블록도 의 일 예를 도시한다. 도 1의 전자 장치 및/또는 어플리케이션 프로세서는, 도 3을 참고하여 설명되는 동작들 중 적어도 하나를 수행할 수 있다. 도 3을 참고하여 설명되는 전자 장치의 동작은, 도 2의 동 작들과 관련될 수 있다. 도 3을 참고하면, 일 실시예에 따른, 전자 장치에 설치된 소프트웨어 어플리케이션들은, 유저 스페이스 및 커널 스페이스로 분류될 수 있다. 전자 장치의 사용자와 직접적으로 상호작용하기 위하여 상기 전자 장치 에 설치된 소프트웨어 어플리케이션(예, 로그 어플리케이션)이, 유저 스페이스에서 실행되는 소프트 웨어로 분류될 수 있다. 일 실시예에 따르면, 유저 스페이스에서 실행되는 소프트웨어로 분류되는 소프트 웨어 어플리케이션에 기반하는 전자 장치의 제어를 지원하기 위하여 상기 전자 장치에 설치된 적어도 하나의 소 프트웨어 어플리케이션(예, 머신 드라이버, 사운드 디버그 드라이버 및/또는 복수의 디바이스 드라이 버들)이, 커널 스페이스에서 실행되는 소프트웨어로 분류될 수 있다. 도 3을 참고하면, 일 실시예에 따른, 전자 장치의 프로세서(예, 도 1의 어플리케이션 프로세서)는, 상기 전자 장치에 포함된 복수의 오디오 회로들(예, 도 1의 복수의 오디오 회로들) 각각에 대응하는 디바이스 드라이버들을 실행할 수 있다. 디바이스 드라이버는, 프로세서를 통해 오디오 회로의 제어를 위하여, 전 자 장치에 설치될 수 있다. 예를 들어, 디바이스 드라이버에 기반하여, 프로세서는 오디오 회로로 송신될 제어 신호를 생성할 수 있다. 예를 들어, 디바이스 드라이버에 기반하여, 프로세서는 오디오 회로로부터 송신된 데 이터 신호에 포함된 정보를 식별하거나, 또는 처리할 수 있다. 도 3을 참고하면, 전자 장치의 프로세서에 의해 실행되는 머신 드라이버는, 전자 장치에 포함된 사운드 카 드(예, 도 1의 오디오 DSP 및 복수의 오디오 회로들의 그룹)를 등록하기 위한 인스트럭션들을 포함할 수 있다. 일 실시예에 따르면, 사운드 카드에 대응하는 관점에서, 머신 드라이버는, 사운드 카드 드라이버 로 지칭될 수 있다. 일 실시예에 따르면, 머신 드라이버는, 복수의 오디오 회로들에 연결된 오디오 인터 페이스들(예, 도 1의 복수의 오디오 인터페이스들)에 대한 연결 정보인 DAI들(digital audiointerface)을 포함할 수 있다. 일실시예에 따르면 오디오 장치들은 DAI를 통해 연결되고, 각각의 오디오 장치의 드라이버에 의해 제어되고 프로세서와 오디오 장치간 오디오 데이터를 송/수신할 수 있다. 상기 연결 정 보는, 프로세서 및 오디오 회로 사이의 오디오 인터페이스에 대한 정보(예, 상기 오디오 인터페이스의 타입), 상기 연결 정보에 대응하는 오디오 회로의 명칭, 상기 오디오 회로로 송신되거나 또는 수신되는 오디오 데이터 의 포맷 또는 상기 오디오 데이터의 송신을 시작하거나 종료할 때에 실행될 함수(또는 API) 중 적어도 하나를 포함할 수 있다. DAI들은, 메모리에 형성되고, 상기 연결 정보를 포함하는, 데이터 구조를 포함할 수 있다. 일 실시예에서, 머신 드라이버의 실행에 기반하여, 프로세서는 전자 장치에 포함된 오디오 회로들 전체를 나타내는 제1 리스트 정보를 식별할 수 있다. 머신 드라이버의 실행에 기반하여, 프로세서는, 활성 상태의 하나 이상의 오디오 회로들을 나타내는 제2 리스트 정보를 식별하거나, 및/또는 관리할 수 있다. 예를 들어, 제1 리스트 정보는, 도 2의 동작의 제1 리스트 정보를 포함할 수 있다. 예를 들어, 제2 리스트 정보는, 도 2의 동작의 제2 리스트 정보를 포함할 수 있다. 일 실시예에 따른, 전자 장치의 프로세서는, 머신 드라이버의 실행에 기반하여, 상기 프로세서에 연결된 복수의 오디오 회로들을 제어할 수 있다. 일 실시예에서, 머신 드라이버에 기반하여, 프로세서는 복수의 오디오 회로들 및 프로세서 사이의 연결들을 수립할 수 있다. 복수의 오디오 회로들에 대한 초기화를 수행하는 동안, 프로세서는 복수의 DAI들에 기반하여, 프로세서에 연결된 상기 복수의 오디오 회로들에 대한 바인딩 (binding)을 수행할 수 있다. 예를 들어, 프로세서는 상기 제1 리스트 정보에 의해 지시되는 오디오 회로들에 대응하는 디바이스 드라이버들(예, 제1 디바이스 드라이버(360-1) 내지 제N 디바이스 드라이버(360-N)) 및/또는 머신 드라이버를 초기화하거나 또는 로드할 수 있다. 프로세서는 머신 드라이버를 이용하여, 상기 디바이스 드라이버들 각각이 초기화되었는지 여부를 확인할 수 있다. 프로세서가 상기 디바이스 드라이버들 각 각이 초기화되었는지 여부를 확인하는 것은, 도 2의 동작과 같이, 지정된 횟수 만큼 수행될 수 있다. 예 를 들어, 디바이스 드라이버들 전부가 초기화되지 않은 경우, 프로세서는 머신 드라이버를 초기화 및/또는 리셋하여, 디바이스 드라이버들 각각이 초기화되었는지 여부를 반복적으로 수행할 수 있다. 일 실시예에 따른, 전자 장치의 프로세서는, 머신 드라이버에 기반하여, 프로세서는 전자 장치에 대한 오 디오의 입력(예, 녹음), 및/또는 오디오의 출력(예, 오디오의 재생)을 제어할 수 있다. 예를 들어, 프로세서는 제N DAI(350-N) 및/또는 제N 디바이스 드라이버(360-N)를 이용하여, 제N 디바이스 드라이버(360-N)에 대응하는 제N 오디오 회로(예, 도 1의 제N 오디오 회로(150-N))와 통신할 수 있다. 제N 오디오 회로와 통신하는 것은, 제N 오디오 회로로 오디오 데이터를 송신하거나, 및/또는 제N 오디오 회로로부터 오디오 데이터를 수신하는 동 작을 포함할 수 있다. 일 실시예에 따른, 전자 장치의 프로세서는, 머신 드라이버에 기반하여, 전자 장치에 포함된 사운드 카드 를 등록하는 동작을 수행할 수 있다. 프로세서에 연결된 복수의 오디오 회로들 전부가 활성 상태로 스위칭된 이후, 프로세서는 사운드 카드를 등록할 수 있다. 예를 들어, 머신 드라이버에 기반하여, 프로세서에 연 결된 복수의 오디오 회로들 중 적어도 하나가 비활성 상태를 유지하는 경우, 프로세서는 상기 머신 드라이버 를 초기화하여, 상기 복수의 오디오 회로들 각각의 상태들을 체크하거나, 및/또는 제2 리스트 정보를 획득하는 동작을 다시 수행할 수 있다. 프로세서가 머신 드라이버를 초기화하는 것은, 복수의 오디오 회 로들 중 적어도 하나가 비활성 상태를 유지하는 경우, 지정된 횟수(예, 도 2의 동작의 지정된 횟수) 만큼 반복적으로 수행될 수 있다. 지정된 횟수 미만의 횟수에서, 프로세서가 초기화된 머신 드라이버에 기반하 여, 복수의 오디오 회로들 전부가 활성 상태로 스위칭되었음을 식별한 경우, 프로세서는 머신 드라이버를 추가적으로 초기화하지 않고, 사운드 카드를 등록할 수 있다. 머신 드라이버가 지정된 횟수 만큼 초기화 된 이후에도, 복수의 오디오 회로들 중 적어도 하나가 비활성 상태를 유지하는 경우, 프로세서는, 상기 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보를 생성하거나, 또는 저장할 수 있다. 일 실시예에 따라, 복수의 오디오 회로들 중 적어도 하나의 오디오 회로가 초기화를 지시하는 제어 신호에 기반 하여 초기화되지 않은 경우, 프로세서는 상기 제어 신호를, 지정된 횟수(예, 도 2의 동작의 지정된 횟수) 에 기반하여 상기 오디오 회로로 반복적으로 송신할 수 있다. 실시예가 이에 제한되는 것은 아니며, 반복적으 로 송신되는 상기 제어 신호에 기반하여, 프로세서는 상기 오디오 회로에 대한 초기화를 반복적으로 시도할 수 있다. 상기 오디오 회로가 반복적으로 송신되는 제어 신호들에 기반하여 초기화되는 경우, 프로세서는 사운드 카드를 등록하기 위한 다른 동작을 수행할 수 있다. 상기 오디오 회로가 반복적으로 송신되는 제어 신호들에 기반하여 초기화되지 않은 경우, 프로세서는 사운드 카드를 등록하는 것을 중단하고, 상기 오디오 회로가 고장인 것으로 결정할 수 있다. 일 실시예에 따른, 프로세서는 머신 드라이버의 실행에 기반하여, 전자 장치의 복수의 오디오 회로들로 초 기화를 위한 제어 신호들을 송신한 이후, 상기 복수의 오디오 회로들이 초기화되었는지 여부를 식별할 수 있다. 예를 들어, 초기화에 기반하여 활성 상태로 스위칭된 오디오 회로를 식별한 프로세서는, 제2 리스트 정보 에 상기 활성 상태로 스위칭된 상기 오디오 회로를 추가할 수 있다. 프로세서는 제1 리스트 정보 및 제2 리스트 정보를 비교하여, 복수의 오디오 회로들 각각이 초기화되었는지 여부를 식별할 수 있다. 일 실시 예에서, 제1 리스트 정보 및 제2 리스트 정보 중에서 제1 리스트 정보에 포함된 오디오 회로에 대하여, 프로세서는 지정된 횟수에 기반하여 초기화를 위한 제어 신호를 반복적으로 송신할 수 있다. 일 실시 예에 따르면, 반복적으로 송신되는 제어 신호들에 의해 상기 오디오 회로가 초기화 되지 않은 경우, 프로세서는 상기 오디오 회로가 고장인 것으로 결정할 수 있다. 일 실시예에 따르면, 오디오 회로가 초기화 되는 경우, 프 로세서는 상기 오디오 회로에 대한 정보를 제2 리스트 정보에 추가하고, 지정된 회수 동안 초기화 시도후 에도 초기화가 되지 않는 오디오 회로의 경우, 프로세서는 상기 오디오 회로에 대한 정보를 제2 리스트에 포함 시키지 않도록 동작할 수 있다. 일 실시예에 따르면, 상기 오디오 회로가 고장인지 여부를 식별하기 위하여, 프 로세서는 상기 오디오 회로에 대한 입출력 테스트를 수행할 수 있다. 상기 오디오 회로가 입출력 테스트에 반 응하지 않는 경우, 프로세서는 상기 오디오 회로가 고장인 것으로 결정할 수 있다. 일 실시예에 따른, 전자 장치의 프로세서는 사운드 디버그 드라이버의 실행에 기반하여, 로그 정보와 관련된 API에 대응하는 기능을 실행할 수 있다. 예를 들어, 머신 드라이버의 실행에 기반하여 비활성 상 태의 적어도 하나의 오디오 회로를 식별한 프로세서는, 사운드 디버그 드라이버를 실행하여, 로그 정보 에 상기 식별된 오디오 회로를 추가할 수 있다. 사운드 디버그 드라이버의 실행에 기반하여, 프로세 서는 메모리(예, 도 1의 메모리)에 형성된 로그 버퍼 내에, 로그 정보를 저장하거나, 및/또는 변경할 수 있다. 사운드 디버그 드라이버에 의해 관리되는 로그 버퍼는, 전자 장치의 휘발성 메모리 내에서 형성될 수 있다. 예를 들어, 휘발성 메모리 내에 로그 버퍼가 형성된 이후, 상기 로그 버퍼 는 전자 장치가 꺼지는 타이밍 까지 상기 휘발성 메모리 내에서 유지될 수 있다. 일 실시예에 따른, 전자 장치의 프로세서는 로그 어플리케이션의 실행에 기반하여, 로그 버퍼에 저장 된 로그 정보를 포함하는 파일을 획득할 수 있다. 일 실시예에 따르면, 상기 파일은, 전자 장치의 비휘발 성 메모리에 저장될 수 있다. 로그 어플리케이션의 실행에 기반하여, 프로세서는 전자 장치의 사용자에게 적어도 하나의 오디오 회로의 초기화의 실패를 가이드하기 위한 화면(예, 도 6을 참고하여 설명되는 화면)을 표 시할 수 있다. 로그 어플리케이션의 실행에 기반하여, 프로세서는 로그 버퍼에 저장된 로그 정보 를, 상기 로그 버퍼가 형성된 휘발성 메모리로부터 비휘발성 메모리로 복제하거나, 또는 이동할 수 있다. 일 실시예에 따르면, 복수의 오디오 회로들 중 적어도 하나가 초기화되지 않은 경우, 상기 복수의 오디 오 회로들 전부를 포함하는 사운드 카드가 등록되지 않을 수 있기 때문에, 오디오와 관련된 기능을 실행하는 것 이 제한될 수 있다. 오디오와 관련된 기능을 실행하는 것이 제한되는 동안, 프로세서는 상기 기능을 실행하기 위한 이벤트(예, 소프트웨어 어플리케이션에 의해 호출된 API)에 응답하여, 오류를 출력할 수 있다. 일 실시예 에 따르면, 상기 오류를 식별한 프로세서는, 로그 어플리케이션의 실행에 기반하여, 로그 정보를 포 함하는 파일을 획득할 수 있다. 상기 파일은, 프로세서에 의해 전자 장치와 상이한 외부 전자 장치(예, 서버 및/또는 수리 기사의 단말)로 송신될 수 있다. 상술한 바와 같이, 일 실시예에 따른, 전자 장치의 프로세서는 머신 드라이버의 실행에 기반하여, 복수의 오디오 회로들에 대한 초기화를 시도할 수 있다. 초기화되지 않은 오디오 회로를 제어하기 위한 요청이 식별된 경우, 프로세서는 오류를 발생시킬 수 있다. 예컨대, 복수의 오디오 회로들 중 적어도 하나가 초기화되지 않은 경우, 프로세서는 복수의 오디오 회로들 전체를 초기화하는 것을 중단할 수 있다. 예를 들어, 복수의 오디오 회로들 중 적어도 하나가 초기화된 경우, 상기 복수의 오디오 회로들에 의해 지원되는 기능들 전부를 실행하는 것이 제한될 수 있다. 일 실시예에 따른, 전자 장치의 프로세서는 더미 드라이버(dummy driver)를 이용하여, 초기화되지 않은 오 디오 회로와 상이한 다른 오디오 회로에 대한 초기화를 완료할 수 있다. 예를 들어, 초기화에도 불구하고 비활 성 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별한 프로세서는, 복수의 오디오 회로들에 대한 초기화를 완료하기 위하여, 상기 식별된 적어도 하나의 오디오 회로 및 더미 드라이버를 연결할 수 있다. 예컨데, 더미 드라이버를 연결하는 것은 제2 리스트 정보에 상기 식별된 적어도 하나의 오디오 회로에 대한 정 보를 추가하는 동작을 포함할 수 있다. 더미 드라이버를 연결한 이후, 프로세서는, 복수의 오디오 회로들 을 포함하는 사운드 카드를 등록할 수 있다. 더미 드라이버에 기반하여, 프로세서는 비활성 상태의 적어도 하나의 오디오 회로의 기능을 실행하기 위한 요청에 반응할 수 있다. 더미 드라이버에 기반하여 사운 드 카드를 등록한 프로세서는, 상기 비활성 상태의 적어도 하나의 오디오 회로를 제외한 다른 오디오 회로에 대 응하는 기능을 실행할 수 있다. 상술한 바와 같이, 일 실시예에 따른, 전자 장치의 프로세서는, 복수의 오디오 회로들의 초기화를 위한 머신 드 라이버를 이용하여, 오디오 회로들 전체의 고장을 진단할 수 있다. 머신 드라이버를 이용하여 오디 오 회로들 전체를 진단하기 때문에, 상기 오디오 회로들 각각에 대응하는 디바이스 드라이버들이 변경되지 않으면서, 프로세서는 오디오 회로들 전체를 진단할 수 있다. 예를 들어, 디바이스 드라이버들이 개별적 으로 오디오 회로의 진단을 지원하는지 여부와 독립적으로, 프로세서는 오디오 회로들 각각이 초기화되었는지 여부를 식별할 수 있다. 디바이스 드라이버들 각각을 변경하지 않으면서 오디오 회로를 진단하기 때문에, 디바이스 드라이버들이 개별적으로 오디오 회로를 진단하는 것에 의해 발생되는 파편화가 방지될 수 있다. 상기 파편화는, 오디오 회로를 진단하기 위한 기능이 디바이스 드라이버들 각각에 의해 다르게 구현됨에 따라 발생될 수 있다. 도 4는, 일 실시예에 따른, 전자 장치의 프로세서에 의해 실행되는 소프트웨어 어플리케이션들에 대한 블록도 의 일 예를 도시한다. 도 1의 전자 장치 및/또는 어플리케이션 프로세서는, 도 4를 참고하여 설명되는 동작들 중 적어도 하나를 수행할 수 있다. 도 4를 참고하여 설명되는 전자 장치의 동작은, 도 2의 동 작들과 관련될 수 있다. 도 4의 소프트웨어 어플리케이션들은, 도 3의 소프트웨어 어플리케이션들에 대응할 수 있다. 도 4의 소프트웨어 어플리케이션들 중에서, 도 3에 도시된 참조 번호를 가지는 소프트웨어 어플리케이션 에 대응하는 설명이, 도 3에 대한 설명과 중복을 피하기 위하여, 생략될 수 있다. 일 실시예에 따른, 전자 장치의 프로세서(예, 도 1의 어플리케이션 프로세서)는, 오디오 회로들의 초기화 (예,전원, gpio, register 설정)를 수행하며 각각의 디바이스 드라이버가 초기화되고, 머신 드라이버(33 0)의 실행에 기반하여, 오디오 회로(예, 도 1의 복수의 오디오 회로들) 및 오디오 인터페이스(예, 도 1의 복수의 오디오 인터페이스들) 사이의 연결을 수립할 수 있다. 상기 연결을 수립하는 동작은, 바인딩으로 지칭될 수 있다. 오디오 회로들의가 초기화가 완료되는 경우, 프로세서는 제2 리스트 정보에, 상기 초기 화된 오디오 회로에 대한 데이터를 추가할 수 있다. 상기 데이터는, 상기 오디오 회로에 고유하게 할당된 명칭 및/또는 식별자(예, ID 및/또는 일련번호)를 포함할 수 있다. 일 실시예에 따른, 전자 장치의 프로세서는, 머신 드라이버와 관련된 연결 정보인 DAI들(예, 제1 DAI(350- 1) 내지 제N DAI(350-N))을 이용하여, 복수의 오디오 인터페이스들 및 복수의 오디오 회로들 사이의 연결들을 수립할 수 있다. DAI에 포함되는 연결 정보는, 상기 DAI에 대응하는 오디오 인터페이스의 타입(예, I2S, 슬림 버스 및/또는 사운드 와이어)을 지시하는 파라미터를 포함할 수 있다. DAI에 포함되는 연결 정보는, 상기 DAI 에 대응하는 상기 오디오 인터페이스를 통해 연결된 오디오 회로의 명칭을 포함할 수 있다. DAI에 포함되는 연 결 정보는, 상기 DAI에 대응하는 상기 오디오 인터페이스를 통해 연결된 상기 오디오 회로와 통신하기 위해 요 구되는 데이터 포맷을 나타내는 파라미터를 포함할 수 있다. DAI에 포함되는 연결 정보는, 상기 DAI에 대응하 는 상기 오디오 인터페이스를 통해 연결된 상기 오디오 회로와 통신할 때에 호출되는 함수 및/또는 API를 포함 할 수 있다. 예를 들어, 상기 연결 정보는, 상기 함수에 고유하게 할당된 명칭(또는 함수 포인터)를 포함할 수 있다. DAI에 기반하여, 프로세서는 오디오 인터페이스 및 오디오 회로 사이의 신호 경로에 포함된 회로를 제어 할 수 있다. 예를 들어, 프로세서는 상기 회로의 클럭을, 상기 DAI에 의해 나타내는 클럭으로 설정할 수 있다. 예를 들어, 프로세서는 상기 회로의 GPIO를, 상기 DAI에 기반하여 제어할 수 있다. 일 실시예에서, 오디오 회로가 상기 연결에 기반하여 초기화되지 않는 경우, 프로세서는 지정된 횟수에 기반하 여 오디오 회로의 초기화를 반복적으로 확인하거나, 또는 시도할 수 있다. 상기 지정된 횟수에 기반하여 오디 오 회로의 초기화를 반복적으로 확인 및/또는 시도하는 동안, 상기 오디오 회로가 초기화되는 경우, 프로세서는 제2 리스트 정보에 상기 오디오 회로에 대한 데이터를 추가할 수 있다. 상기 지정된 횟수에 기반하여 오 디오 회로를 반복적으로 초기화에 대한 확인 및/또는 시도를 한 이후에도상기 오디오 회로의 상태가 비활성 상 태 내에서 유지되는 경우, 프로세서는 제2 리스트 정보에 상기 오디오 회로에 대한 데이터를 추가하지 않 을 수 있다. 프로세서가 복수의 오디오 회로들 전부에 대하여 상술된 동작을 수행하기 때문에, 제2 리스트 정 보 내에, 상기 복수의 오디오 회로들 중에서 초기화에 기반하여 활성 상태로 스위칭된 하나 이상의 오디오 회로들에 대한 데이터가 누적될(accumulated) 수 있다. 일 실시예에서, 프로세서는 DAI들(예, 제1 DAI(350-1) 내지 제N DAI(350-N)) 및 제2 리스트 정보를 비교 하여, 복수의 오디오 회로들 각각이 초기화되었는지 여부를 식별하거나, 또는 결정할 수 있다. 예를 들어, 프 로세서는 DAI들 각각에 포함된 오디오 회로의 명칭을, 제2 리스트 정보 내에서 탐색할 수 있다. 제2 리스 트 정보 내에 상기 DAI들 각각에 포함된 오디오 회로에 대한 정보가 포함되어 있는 것으로 판단 하거나,상 기 명칭을 식별하는 경우, 프로세서는 상기 명칭에 대응하는 오디오 회로의 초기화가 완료된 것으로 결정할 수 있다. 제2 리스트 정보 내에서 상기 명칭을 식별(예: 제2 리스트에 명칭의 포함 여부 확인)하지 못한 경 우, 프로세서는 상기 명칭에 대응하는 오디오 회로의 초기화가 실패된 것으로 결정할 수 있다. 제2 리스트 정 보 내에서 상기 명칭을 식별하지 못한 경우, 프로세서는 상기 오디오 회로가 고장인 것으로 결정할 수 있 다. 상술한 바와 같이, 일 실시예에 따른, 전자 장치의 프로세서는, 프로세서 및 복수의 오디오 회로들 각각을 연결 하는 오디오 인터페이스들 각각에 대응하는 정보(예, 제1 DAI(350-1) 내지 제N DAI(350-N))를 이용하여, 상기 복수의 오디오 회로들 중에서, 비활성 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별할 수 있다. 오 디오 인터페이스들 각각에 대응하는 정보는, 상기 오디오 인터페이스의 타입, 상기 오디오 인터페이스를 통해 연결된 오디오 회로의 명칭 또는 상기 오디오 인터페이스를 통해 교환되는 신호의 포맷 중 적어도 하나를 나타 낼 수 있다. 비활성 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 프로세서는 로그 정보 내에 식별된 적어도 하나의 오디오 회로를 나타내는 데이터를 추가할 수 있다. 로그 정보 내에 상기 적어도 하나의 오디오 회로를 추가하여, 프로세서는 전자 장치를 부팅하는 동안, 복수의 오디오 회로 들에 대한 진단을 수행한 결과를 획득할 수 있다. 이하에서는, 도 5 내지 도 6을 참고하여, 일 실시예에 따른, 전자 장치의 프로세서가 상기 로그 정보를 출 력하는 동작의 일 예를 설명한다. 도 5는, 로그 정보를 저장하기 위한 전자 장치의 동작의 일 예를 도시한다. 도 1의 전자 장치 및/또는 어플리케이션 프로세서는, 도 5를 참고하여 설명되는 동작을 수행할 수 있다. 도 5를 참고하여 설명되는 전자 장치의 동작은, 도 2의 동작들과 관련될 수 있다. 도 5를 참고하면, 일 실시예에 따른, 전자 장치의 메모리는, 휘발성 메모리 및 비휘발성 메모리 로 구분될 수 있다. 비휘발성 메모리는, UFS(universal flash storage), SD(secure digital) 카드, SSD(solid state drive) 및/또는 HDD(hard disk drive)를 포함할 수 있다. 비휘발성 메모리는 전력 신호 가 제공되지 않더라도 저장된 데이터를 유지하도록 구성될 수 있다. 휘발성 메모리는 RAM과 같이, 전력 신 호가 제공되는 동안 정보를 유지하도록 구성된 회로를 포함할 수 있다. 실시예가 이에 제한되는 것은 아니며, 휘발성 메모리는, 어플리케이션 프로세서에 의해 비휘발성 메모리의 적어도 일부분에 설정된 가 상 메모리를 포함할 수 있다. 일 실시예에 따른, 전자 장치의 어플리케이션 프로세서는, 도 2를 참고하여 설명된 동작에 기반하여, 휘발성 메모리에 로그 정보를 저장할 수 있다. 도 3 내지 도 4를 참고하여 상술한 바와 같이, 어플 리케이션 프로세서는, 휘발성 메모리에 형성된 로그 버퍼(예, 도 3 및/또는 도 4의 로그 버퍼) 에, 로그 정보를 저장할 수 있다. 로그 정보는, 어플리케이션 프로세서에 의해 실행되는 소프 트웨어 어플리케이션 및/또는 시스템 프로세스(예, 도 3의 사운드 디버그 드라이버)에 의해 관리될 수 있 다. 예를 들어, 휘발성 메모리에 저장된 로그 정보에 대한 액세스는, 어플리케이션 프로세서에 의해 실행되는 사운드 디버그 드라이버에 의해 허용될 수 있다. 일 실시예에서, 휘발성 메모리 내에 저장된 로그 정보는, 전자 장치가 켜진 동안, 휘발성 메모 리 내에서 유지될 수 있다. 일 실시예에 따른, 어플리케이션 프로세서는, 복수의 오디오 회로들 중 적어도 하나의 초기화가 실패된 경우, 로그 정보를 저장하고, 상기 초기화의 실패를 알리는 알림 메시지를 출력할 수 있다. 상기 알림 메시지는, 전자 장치의 디스플레이를 통해 표시되는 팝업-윈도우(예, 토스트(toast) 및/또는 아이콘)를 통해 출력될 수 있다. 실시예가 이에 제한되는 것은 아니며, 상기 알림 메시지는, 진동 모터에 의해 발생되는 전자 장치의 진동을 포함할 수 있다. 상기 알림 메시지는, 전자 장치로부터 외부 전자 장치로 송신되는 전기 신호를 포함할 수 있다. 일 실시예에 따른, 어플리케이션 프로세서는, 로그 정보의 출력을 위한 이벤트를 식별할 수 있다. 상기 이벤트는, 로그 정보에 적어도 하나의 오디오 회로가 추가되는 것에 의해 발생될 수 있다. 상기 이 벤트는, 로그 정보의 출력을 위한 사용자 입력에 의해 발생될 수 있다. 예를 들어, 로그 정보의 출력을 나타내는 입력에 응답하여, 어플리케이션 프로세서는 비휘발성 메모리에, 휘발성 메모리에 저장된 로그 정보를 복제할 수 있다. 예를 들어, 어플리케이션 프로세서는, 휘발성 메모리에 저장된 로그 정보를, 비휘발성 메모리로 이동하거나, 송신하거나, 및/또는 비휘발성 메모리에 저장할 수 있다. 예를 들어, 도 3 내지 도 4의 사운드 디버그 드라이버의 실행에 기반하여, 어플리케이션 프로세서는 비휘발성 메모리 내에 로그 정보를 저장할 수 있다. 일 실시예에서, 비휘발성 메모리 내에 저장된 로그 정보는, 전자 장치를 부팅하는 동안 비활성 상태 내에서 유지된 하나 이상의 오디오 회로들에 대한 텍스트를 포함할 수 있다. 표 1은, 비휘발성 메모리 내에 저장된 로그 정보에 포함된 상기 텍스트를 나타낸다. 실시예가 이에 제한되는 것은 아니며, 로그 정보는, 비활성 상태 내에서 유지된 하나 이상의 오디오 회로들에 대한 데이터 및/또는 정보를, 상기 텍스트와 상이한 포맷에 기반하여 포함할 수 있다. 표 1 라인 넘버 텍스트 라인 1 [11.169826] snd-dbg: cannot find the cs35l43.18-0041 라인 2 [11.169830] snd-dbg: cannot find the cs40l26-codec 표 1을 참고하면, 로그 정보에 포함된 텍스트는, 복수의 라인들로 구분될 수 있다. 복수의 라인들 각각은, 비활성 상태로 유지됨에 따라 초기화되지 않은 적어도 하나의 오디오 회로를 식별한 어플리케이션 프로 세서에 의해 누적되었던 텍스트를 포함할 수 있다. 라인 1을 참고하면, 어플리케이션 프로세서는, \"cs35l43.18-0041\"의 명칭을 가지는 오디오 회로(예, 증폭 회로)가 초기화 되지 않았음을 나타내는 텍스트를, 타임 스탬프(예, \"11.169826\") 및 상기 텍스트를 기록하도록 어플리케이션 프로세서에 의해 실행된 시스템 프로세스의 명칭(예, 사운드 디버그 드라이버에 할당된 명칭인 \"snd-dbg\")과 함께 저장할 수 있다. 라인 1의 타임 스탬프는, 어플리케이션 프로세서가, \"cs35l43.18-0041\"의 명칭을 가지는 오디오 회로가 고장인 것으 로 결정한 타이밍을 나타낼 수 있다. 유사하게, 로그 정보의 라인 2는, 비활성 상태 내에서 유지되는 \"cs40l26-codec\"의 명칭을 가지는 오디오 회로를 식별한 어플리케이션 프로세서에 의해 삽입되었을 수 있 다. 일 실시예에 따른, 어플리케이션 프로세서는, 비휘발성 메모리의 지정된 파티션 및/또는 지정된 디렉토리에, 로그 정보를 저장할 수 있다. 예를 들어, 어플리케이션 프로세서는, 사운드 디버그 드 라이버를 위해 할당된 비휘발성 메모리 내 디렉토리(예, \"/proc/snd_debug_proc/\"의 디렉토리 명칭을 가지 는 디렉토리)에, 로그 정보를 저장할 수 있다. 파일의 포맷으로 로그 정보를 저장하는 경우, 상기 로그 정보는, 사운드 디버그 드라이버에 의해 할당된 명칭(예, \"sdp_boot_log\")을 가지는 파일의 형태로, 비휘발성 메모리 내에 저장될 수 있다. 상술한 바와 같이, 일 실시예에 따른, 전자 장치의 어플리케이션 프로세서는, 전자 장치를 부팅 하는 동안, 어플리케이션 프로세서에 연결된 복수의 오디오 회로들을 활성 상태로 스위칭할 수 있다. 어플리케이션 프로세서는 복수의 오디오 회로들을 활성 상태로 스위칭한 결과를, 로그 정보에 저장할 수 있다. 오디오 회로가 활성 상태로 스위칭되지 않은 경우, 어플리케이션 프로세서는 상기 오디 오 회로가 고장인 것으로 결정할 수 있다. 일 실시예에 따르면, 고장인 것으로 결정된 적어도 하나의 오디오 회로를 포함하는 상기 로그 정보에 기반하여, 어플리케이션 프로세서는, 전자 장치를 부팅하는 타이밍에 전자 장치에 포함된 복수의 오디오 회로들을 진단한 결과를 생성 및/또는 제공할 수 있다. 일 실시예에 따르면, 상기 프로세서가 복수의 오디오 회로들을 진단하는 동작은 부팅하는 타이밍 이 외에서도 동작할 수 있다. 예를 들면 전자 장치 외부의 장치로부터 오디오 회로에 대한 확인 여부를 요청하는 커멘드를 수신할 경우, 또는 오디오 회로에 대한 확인이 늦어질 경우 부팅이 완료된 이후에도 진행될 수 있다. 전자 장치를 부팅하는 동안 로그 정보를 획득하기 때문에, 복수의 오디오 회로들을 진단하기 위 한 추가적인 동작(예, 로그 정보와 상이한 추가적인 로그를 획득하는 동작)이 요구되지 않을 수 있다. 일 실시예에서, 전자 장치의 어플리케이션 프로세서는, 전자 장치가 부팅될 때 마다, 복수의 오 디오 회로들을 진단하기 위한 동작(예, 도 2를 참고하여 설명된 동작들)을 수행할 수 있다. 따라서, 어플 리케이션 프로세서는, 복수의 오디오 회로들 중 적어도 하나의 고장, 파손 및/또는 열화를 보다 신속 하게 식별할 수 있다. 복수의 오디오 회로들 중 적어도 하나의 고장을 식별한 어플리케이션 프로세서 는, 상기 고장을 가이드하기 위한 UI를 표시할 수 있다. 이하에서는, 도 6을 참고하여, 어플리케이션 프 로세서에 의해 표시되는 상기 UI의 일 예가 설명된다. 도 6은, 일 실시예에 따른, 전자 장치(101-1)에 의해 표시되는 화면의 일 예를 도시한다. 도 1의 전자 장치 및/또는 어플리케이션 프로세서는, 도 6을 참고하여 설명되는 동작을 수행할 수 있다. 도 6을 참고 하여 설명되는 전자 장치(101-1)의 동작은 도 5의 동작들과 관련될 수 있다. 비록 스마트폰의 폼 팩터를 가지 는 전자 장치(101-1)에 의해 표시되는 화면이 예시적으로 도시되지만, 실시예가 이에 제한되는 것은 아니다. 도 6을 참고하면, 일 실시예에 따른, 전자 장치(101-1)는 디스플레이 상에, 전자 장치(101-1)에 포함된 복 수의 오디오 회로들(예, 도 1의 복수의 오디오 회로들)의 초기화의 결과에 기반하는 화면을 표시할 수 있 다. 디스플레이는, LCD(liquid crystal display), PDP(plasma display panel) 및/또는 하나 이상의 LED 들(light emitting diode)을 포함할 수 있다. 상기 LED는 OLED(organic LED)를 포함할 수 있다. 디스플레이 는 FPD(flat panel display) 및/또는 전자 종이(electronic paper)를 포함할 수 있다. 일 실시예에서, 디스플레이는 적어도 부분적으로 휘어진 형태를 가지거나, 변형가능한(deformable) 형태를 가질 수 있다. 일 실시예에 따른, 전자 장치(101-1)는, 전자 장치(101-1)를 부팅하는 동안, 활성 상태로 스위칭되지 않고, 비 활성 상태 내에서 유지되는, 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 적어도 하나의 오디오 회로 의 비활성 상태를 알리기 위한 시각적 객체를 표시할 수 있다. 예를 들어, 전자 장치(101-1)는 도 2의 로그 어 플리케이션의 실행에 기반하여, 상기 시각적 객체를 표시할 수 있다. 도 6을 참고하면, 상기 시각적 객체 는 아이콘 및/또는 팝업-윈도우를 포함할 수 있다. 예를 들어, 전자 장치(101-1)는, 디스플레이 의 일 가장자리(periphery)를 따라 형성된 영역인 상태 바(status bar) 내에 아이콘을 표시할 수 있다. 예를 들어, 비활성 상태의 적어도 하나의 오디오 회로를 식별한 전자 장치(101-1)는, 상태 바 내에서 상기 가장자리를 따라 배열된 다른 아이콘들(예, 배터리의 SOC(state of charge)를 나타내는 아이콘 및/ 또는 무선 네트워크의 수신 감도를 나타내는 아이콘)과 함께, 아이콘을 표시할 수 있다. 도 6을 참고하면, 적어도 하나의 오디오 회로의 비활성 상태를 알리기 위한 시각적 객체는, 디스플레이 상 에 표시된 화면 상에 중첩되는 팝업-윈도우를 포함할 수 있다. 예를 들어, 전자 장치(101-1)는 런처 화면, 홈 화면 및/또는 전자 장치(101-1)에 의해 실행되고 있는 소프트웨어 어플리케이션에 의해 제공된 실행 화면 상에 중첩으로 팝업-윈도우를 표시할 수 있다. 팝업-윈도우 내에서, 전자 장치(101-1)는 비활 성 상태의 적어도 하나의 오디오 회로에 기반하여 사운드 카드의 등록 및/또는 오디오 회로의 초기화의 실패를 가이드하기 위한 텍스트(예, \"오디오 장치 초기화 실패\")를 표시할 수 있다. 상기 텍스트와 함께, 전자 장치 (101-1)는, 로그 정보(예, 도 1의 로그 정보)의 출력을 가이드하기 위한 텍스트(예, \"로그 정보를 공유하 시겠습니까?\")를 표시할 수 있다. 팝업-윈도우 내에 로그 정보의 출력을 가이드하기 위한 상기 텍스트를 표시한 상태 내에서, 전자 장치(101-1)는 상기 로그 정보의 출력을 나타내는 입력을 수신하기 위한 시각적 객체 들(642, 644)을 표시할 수 있다. 비록 버튼의 형태를 가지는 시각적 객체들(642, 644)이 예시적으로 도시되지 만, 실시예가 이에 제한되는 것은 아니다. 도 6의 팝업-윈도우를 표시하는 상태 내에서, 전자 장치(101-1)는 시각적 객체의 선택을 나타내는 입 력에 응답하여, 디스플레이 상에 표시되고 있는 팝업-윈도우를 숨길 수 있다. 예를 들어, 시각적 객 체의 선택을 나타내는 입력은, 팝업-윈도우의 표시를 중단하기 위한 입력에 대응할 수 있다. 전자 장치(101-1)는 시각적 객체의 선택을 나타내는 입력에 응답하여, 전자 장치(101-1)에 저장된 로그 정보(예, 도 5의 휘발성 메모리에 저장된 로그 정보)에 대응하는 파일(예, 도 5의 비휘발성 메모리 에 저장된 로그 정보)을 저장할 수 있다. 전자 장치(101-1)는 상기 저장된 파일을, 전자 장치(101- 1)의 사용자 및/또는 외부 전자 장치에 의해 액세스 가능한 상태로 만들 수 있다. 전자 장치(101-1)는 상기 파 일을, 이메일, 메신저 및/또는 파일의 송신을 위한 무선 통신 프로토콜(예, WiFi direct, 블루투스 및/또는 NFC(near field communication))을 통해 송신하기 위한 화면을 더 표시할 수 있다. 상기 화면에 기반하여, 전 자 장치(101-1)는 상기 파일을, 외부 전자 장치로 송신할 수 있다. 일 실시예에 따르면, 상기 파일들에 대한 공유는 기 설정된 설정(예: 문제 발생시 특정 장치에 자동 전송)에 의하여 사용자에게 공유에 관한 팝업-윈도우 의 표시 없이 공유될 수 있다. 상술한 바와 같이, 일 실시예에 따른, 전자 장치는, 전자 장치에 포함된 복수의 오디오 회로들에 대한 초기화를 수행할 수 있다. 복수의 오디오 회로들에 대한 초기화는, 전자 장치를 부팅하는 동안, 수행될 수 있다. 전자 장치는, 복수의 오디오 회로들 각각이 상기 초기화에 기반하여 활성 상태로 스위칭되었는지 여부를 식별할 수 있다. 예를 들어, 도 2의 제2 리스트 정보와 같이, 활성 상태로 스위칭된 오디오 회로에 대한 리스트를업데이트하여, 전자 장치는, 복수의 오디오 회로들 각각이 상기 초기화에 기반하여 활성 상태로 스위칭되었는지 여부를 식별할 수 있다. 일 실시예에서, 복수의 오디오 회로들 중 어느 한 오디오 회로가 활성 상태로 스위칭되지 않은 경우, 전자 장치 는 지정된 횟수에 기반하여, 상기 오디오 회로를 활성 상태로 스위칭하는 것을 시도할 수 있다. 상기 지정된 횟수에 기반하여 오디오 회로를 활성 상태로 스위칭하는 것을 시도한 이후, 상기 오디오 회로가 비활성 상태를 유지하는 지 여부에 기반하여, 전자 장치는 상기 오디오 회로를, 초기화되지 않은 오디오 회로로써 로그 정보에 기록할지 여부를 결정할 수 있다. 상기 로그 정보를 이용하여, 전자 장치는, 전자 장치를 부팅하는 동안, 복수 의 오디오 회로들 중에서 활성 상태로 스위칭되지 않은 오디오 회로에 대한 리스트를 나타낼 수 있다. 일 실시 예에서, 복수의 오디오 회로들 전부는, 적어도 하나의 오디오 회로가 활성 상태로 스위칭되지 못하는 경우, 전 자 장치에 의해 액세스될 수 없다. 전자 장치는, 복수의 오디오 회로들 전부를 제어할 수 없는 상태 내에서, 상기 로그 정보를 이용하여 비활성 상태 내에서 유지되는 오디오 회로를, 사용자에게 알릴 수 있다. 도 7a 내지 도 7b는, 일 실시예에 따른, 전자 장치의 흐름도의 일 예를 도시한다. 도 1의 전자 장치 및/ 또는 어플리케이션 프로세서는, 도 7a 내지 도 7b를 참고하여 설명되는 동작을 수행할 수 있다. 도 7a 내 지 도 7b의 동작들은, 도 2의 동작들 중 적어도 하나와 관련될 수 있다. 도 7a를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서(예, 도 1의 어플리케이션 프로 세서)는, 제1 상태의 복수의 오디오 회로들(예, 도 1의 복수의 오디오 회로들)에 대한 초기화를 수행 할 수 있다. 일 실시예에 따르면, 도 7a의 동작은, 전자 장치를 부팅하는 동안, 수행될 수 있다. 일 실 시예에 따르면, 도 7 a의 동작은 전자 장치의 부팅 이후에도 수행될 수 있다. 동작의 제1 상태는, 비 활성 상태에 대응할 수 있다. 프로세서는, 복수의 오디오 회로들과 연결하기 위한 오디오 인터페이스들(예, 도 1의 복수의 오디오 인터페이스들)을 포함할 수 있다. 프로세서는 상기 오디오 인터페이스들 각각에 대한 연결 정보(예, 도 3의 DAI들)에 기반하여, 상기 복수의 오디오 회로들로, 초기화를 위한 제어 신호들을 송 신할 수 있다. 상기 제어 신호들을 수신한 오디오 회로들 각각은, 제1 상태로부터 제2 상태(예, 활성 상태)로 스위칭될 수 있다. 도 7a를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 초기화에 기반하여, 복수의 오디오 회로들 전부가 제1 상태로부터 제2 상태로 스위칭되었는지 여부를 식별할 수 있다. 복수의 오디오 회로 들 전부가 활성 상태인 상기 제2 상태로 스위칭된 경우(720-예), 프로세서는 동작을 수행할 수 있다. 복 수의 오디오 회로들 중 적어도 하나의 오디오 회로가 상기 제1 상태 내에서 유지되는 경우(720-아니오), 프로세 서는 동작을 수행할 수 있다. 도 7a를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 소프트웨어 어플리케이션의 실행에 기반하여, 복수의 오디오 회로들 각각에 의해 지원되는 기능들 중 적어도 하나를 실행할 수 있다. 복수 의 오디오 회로들 전부가 제2 상태로 스위칭된 경우, 프로세서는 복수의 오디오 회로들에 대한 초기화를 완료할 수 있다. 일 실시예에 따르면, 복수의 오디오 회로들이 제2 상태로 스위칭된 이후, 프로세서는 전자 장치의 부 팅을 완료할 수 있다. 전자 장치의 부팅을 완료한 이후, 프로세서는 상기 제2 상태의 상기 복수의 오디오 회로 들을 이용하여, 프로세서에 의해 실행되는 소프트웨어 어플리케이션에 의해 지시되는, 오디오와 관련된 기능을 실행할 수 있다. 상기 오디오와 관련된 상기 기능은, 오디오의 녹음, 오디오의 재생, 오디오의 인코딩 및/또는 디코딩을 포함할 수 있다. 도 7a를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로에 대한 로그 정보를 저장할 수 있다. 동작의 로그 정보는, 도 1의 로그 정보 를 포함할 수 있다. 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별한 프로세서는, 지정된 횟수에 기반하여 또는 지정된 시간이 도과함에 기반하여 상기 적어도 하나의 오디오 회로의 초기화를 반복적으 로 확인하거나, 또는 시도할 수 있다. 발명의 일 실시예에 따라, 상기 적어도 하나의 오디오 회로의 상태가, 지정된 횟수에 기반하여 상기 적어도 하나의 오디오 회로의 초기화를 반복적으로 확인하거나, 또는 시도한 이후, 상기 제1 상태 내에서 유지되는 경우, 프로세서는 동작을 수행할 수 있다. 발명의 일 실시예에 따라, 상기 적어도 하나의 오디오 회로의 상태가, 지정된 시간 동안 상기 적어도 하나의 오디오 회로의 초기화 를 반복적으로 시도한 이후, 상기 제1 상태 내에서 유지되는 경우, 프로세서는 동작을 수행할 수 있다. 동작에 기반하여, 프로세서는 제2 상태로 스위칭되지 않은 적어도 하나의 오디오 회로에 대한 리스트(예, 동작의 로그 정보)를 획득할 수 있다. 도 7a를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 사용자 입력에 기반하여, 로 그 정보를 출력할 수 있다. 상기 사용자 입력은, 도 6을 참고하여 설명된 사용자 입력을 포함할 수 있다. 상 기 사용자 입력에 기반하여, 프로세서는 비휘발성 메모리(예, 도 5의 비휘발성 메모리)에, 상기 로그 정보 를 포함하는 파일을 생성하거나, 및/또는 저장할 수 있다. 프로세서는 상기 파일을, 전자 장치의 사용자에게 표시하거나, 및/또는 외부 전자 장치로 송신할 수 있다. 도 7a를 참고하면, 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별한 경우(720-아니오), 프로세서 는 상기 복수의 오디오 회로들 각각에 의해 지원되는 기능들을 실행하는 것을 제한할 수 있다. 제1 상태 내 적 어도 하나의 오디오 회로와 상이한 다른 오디오 회로에 의해 지원되는 기능을 실행하기 위하여, 프로세서는 더 미 드라이버(예, 도 3의 더미 드라이버)를 이용할 수 있다. 도 7b를 참고하면, 상기 더미 드라이버에 기 반하여 수행되는 전자 장치의 동작이 도시된다. 도 7b의 동작들 중에서, 도 7a를 참고하여 설명된 동작들(710, 720, 730, 750)에 대한 설명이, 반복을 줄이기 위하여 생략될 수 있다. 도 7b를 참고하면, 동작에 기반하여, 일 실시예에 따른, 전자 장치의 프로세서(예, 도 1의 어플리케이션 프로세서)는, 제1 상태의 복수의 오디오 회로들에 대한 초기화를 수행할 수 있다. 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 초기화에 기반하여, 복수의 오디오 회로들 전부가 제1 상태로부터 제2 상태로 스위칭되었는지 여부를 식별할 수 있다. 복수의 오디오 회로들 전부가 제2 상태로 스위칭된 경우(720- 예), 프로세서는 동작을 수행할 수 있다. 복수의 오디오 회로들 중 적어도 하나가 제2 상태로 스위칭되지 않은 경우(720-아니오), 프로세서는 동작을 수행할 수 있다. 도 7b를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로에 대한 로그 정보를 저장할 수 있다. 동작에 기반하여, 프로세서는, 전자 장 치의 사용자 및/또는 외부 전자 장치에 의해 액세스 가능한 로그 정보를 획득할 수 있다. 로그 정보를 저장한 이후, 프로세서는 도 7a의 동작에 기반하여, 사용자 입력에 따라 로그 정보를 출력할 수 있다. 도 7b를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 더미 드라이버(예, 도 3의 더미 드라이버)에 기반하여, 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 초기화할 수 있다. 예를 들어, 프로세서는 상기 더미 드라이버를, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로 에 대응하는 디바이스 드라이버로 설정하거나, 또는 바인딩할 수 있다. 동작 이후, 프로세서는 상기 적어 도 하나의 오디오 회로의 기능을 실행하기 위한 요청에 응답하여, 상기 더미 드라이버를 실행할 수 있다. 상기 더미 드라이버는, 복수의 오디오 회로들을 포함하는 사운드 카드의 등록을 위해 제공될 수 있다. 상기 더미 드 라이버는, 복수의 오디오 회로들을, 프로세서에 의해 실행되는 소프트웨어 어플리케이션에 의해 액세스 가능한 상태로 만들기 위해 제공될 수 있다. 도 7b를 참고하면, 동작에 기반하여 적어도 하나의 오디오 회로를 초기화한 이후, 프로세서는 동작을 수행할 수 있다. 도 7b를 참고하면, 동작 내에서, 일 실시예에 따른, 전자 장치의 프로세서는, 소프트웨어 어플리케이션의 실행에 기반하여, 복수의 오디오 회로들 각각에 의해 지원되는 기능들 중 적어도 하나를 실행할 수 있다. 제2 상태로 스위칭된 오디오 회로에 의해 지원되는 기능을 실행하는 경우, 프로세서는 상기 오디오 회로에 대응하는 디바이스 드라이버를 이용하여, 상기 오디오 회로로 상기 기능을 실행하기 위한 제어 신호를 송신할 수 있다. 제1 상태 내 오디오 회로에 의해 지원되는 기능을 실행하는 경우, 프로세서는 더미 드라이버를 이용하여, 상기 오디오 회로로 제어 신호를 송신하는 것을 제한할 수 있다. 예를 들어, 상기 더미 드라이버에 기반하여, 프로 세서는 제1 상태의 오디오 회로로 제어 신호를 송신하는 것을 차단할 수 있다. 프로세서는 상기 더미 드라이버 를 이용하여, 제1 상태의 오디오 회로에 대한 기능의 실행을 요청한 소프트웨어 어플리케이션에 의해 처리 가능 한 오류 메시지를 생성할 수 있다. 도 8은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 8을 참조하면, 네 트워크 환경에서 전자 장치는 제1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제1 네트워크(예: 블 루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워크) 또는 제2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통 신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제1 네트워크 또는 제2 네트워크와 같은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제1 네트워크 또는 제2 네트워크와 같은 통신 네 트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제1 면(예: 아래 면)에 또는 그에 인접하여 배치 되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제2 네트워크에 연결된 서버를 통해서 전자 장치와 외 부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(802, 또는 804) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(802, 804, 또는 808) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가 적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상 기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전 자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제 공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용 한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제2 네트워크 내 에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 9는, 다양한 실시에 따른, 오디오 모듈의 블록도이다. 도 9를 참조하면, 오디오 모듈은, 예 를 들면, 오디오 입력 인터페이스, 오디오 입력 믹서, ADC(analog to digital converter), 오 디오 신호 처리기, DAC(digital to analog converter), 오디오 출력 믹서, 또는 오디오 출력 인터페이스를 포함할 수 있다. 오디오 입력 인터페이스는 입력 모듈의 일부로서 또는 전자 장치와 별도로 구성된 마이크(예: 다이나믹 마이크, 콘덴서 마이크, 또는 피에조 마이크)를 통하여 전자 장치의 외부로부터 획득한 소리에 대응하는 오디오 신호를 수신할 수 있다. 예를 들어, 오디오 신호가 외부의 전자 장치(예: 헤드셋 또는 마 이크)로부터 획득되는 경우, 오디오 입력 인터페이스는 상기 외부의 전자 장치와 연결 단자를 통해 직접, 또는 무선 통신 모듈을 통하여 무선으로(예: Bluetooth 통신) 연결되어 오디오 신호를 수신할수 있다. 일실시예에 따르면, 오디오 입력 인터페이스는 상기 외부의 전자 장치로부터 획득되는 오디 오 신호와 관련된 제어 신호(예: 입력 버튼을 통해 수신된 볼륨 조정 신호)를 수신할 수 있다. 오디오 입력 인 터페이스는 복수의 오디오 입력 채널들을 포함하고, 상기 복수의 오디오 입력 채널들 중 대응하는 오디오 입력 채널 별로 다른 오디오 신호를 수신할 수 있다. 일실시예에 따르면, 추가적으로 또는 대체적으로, 오디오 입력 인터페이스는 전자 장치의 다른 구성 요소(예: 프로세서 또는 메모리)로부터 오디오 신호를 입력 받을 수 있다. 오디오 입력 믹서는 입력된 복수의 오디오 신호들을 적어도 하나의 오디오 신호로 합성할 수 있다. 예를 들어, 일실시예에 따르면, 오디오 입력 믹서는, 오디오 입력 인터페이스를 통해 입력된 복수의 아날 로그 오디오 신호들을 적어도 하나의 아날로그 오디오 신호로 합성할 수 있다. ADC는 아날로그 오디오 신호를 디지털 오디오 신호로 변환할 수 있다. 예를 들어, 일실시예에 따르면, ADC는 오디오 입력 인터페이스을 통해 수신된 아날로그 오디오 신호, 또는 추가적으로 또는 대체적으 로 오디오 입력 믹서를 통해 합성된 아날로그 오디오 신호를 디지털 오디오 신호로 변환할 수 있다. 오디오 신호 처리기는 ADC를 통해 입력받은 디지털 오디오 신호, 또는 전자 장치의 다른 구성 요소로부터 수신된 디지털 오디오 신호에 대하여 다양한 처리를 수행할 수 있다. 예를 들어, 일실시예에 따르면, 오디오 신호 처리기는 하나 이상의 디지털 오디오 신호들에 대해 샘플링 비율 변경, 하나 이상의 필터 적용, 보간(interpolation) 처리, 전체 또는 일부 주파수 대역의 증폭 또는 감쇄, 노이즈 처리(예: 노이즈 또는 에코 감쇄), 채널 변경(예: 모노 및 스테레오간 전환), 합성(mixing), 또는 지정된 신호 추출을 수행할 수 있다. 일실시예에 따르면, 오디오 신호 처리기의 하나 이상의 기능들은 이퀄라이저(equalizer)의 형태로 구현될 수 있다. DAC는 디지털 오디오 신호를 아날로그 오디오 신호로 변환할 수 있다. 예를 들어, 일실시예에 따르면, DAC는 오디오 신호 처리기에 의해 처리된 디지털 오디오 신호, 또는 전자 장치의 다른 구성 요 소(예: 프로세서 또는 메모리)로부터 획득한 디지털 오디오 신호를 아날로그 오디오 신호로 변환할 수 있다. 오디오 출력 믹서는 출력할 복수의 오디오 신호들을 적어도 하나의 오디오 신호로 합성할 수 있다. 예를 들어, 일실시예에 따르면, 오디오 출력 믹서는 DAC를 통해 아날로그로 전환된 오디오 신호 및 다른 아날로그 오디오 신호(예: 오디오 입력 인터페이스을 통해 수신한 아날로그 오디오 신호)를 적어도 하나의 아날로그 오디오 신호로 합성할 수 있다. 오디오 출력 인터페이스는 DAC를 통해 변환된 아날로그 오디오 신호, 또는 추가적으로 또는 대체적으 로 오디오 출력 믹서에 의해 합성된 아날로그 오디오 신호를 음향 출력 모듈 를 통해 전자 장치(80 1)의 외부로 출력할 수 있다. 음향 출력 모듈는, 예를 들어, dynamic driver 또는 balanced armature driver 같은 스피커, 또는 리시버를 포함할 수 있다. 일실시예에 따르면, 음향 출력 모듈는 복수의 스피커 들을 포함할 수 있다. 이런 경우, 오디오 출력 인터페이스는 상기 복수의 스피커들 중 적어도 일부 스피커 들을 통하여 서로 다른 복수의 채널들(예: 스테레오, 또는 5.1채널)을 갖는 오디오 신호를 출력할 수 있다. 일 실시예에 따르면, 오디오 출력 인터페이스는 외부의 전자 장치(예: 외부 스피커 또는 헤드셋)와 연결 단자를 통해 직접, 또는 무선 통신 모듈을 통하여 무선으로 연결되어 오디오 신호를 출력할 수 있다. 일실시예에 따르면, 오디오 모듈은 오디오 입력 믹서 또는 오디오 출력 믹서를 별도로 구비하지 않고, 오디오 신호 처리기의 적어도 하나의 기능을 이용하여 복수의 디지털 오디오 신호들을 합성하여 적 어도 하나의 디지털 오디오 신호를 생성할 수 있다. 일실시예에 따르면, 오디오 모듈은 오디오 입력 인터페이스를 통해 입력된 아날로그 오디오 신호, 또 는 오디오 출력 인터페이스를 통해 출력될 오디오 신호를 증폭할 수 있는 오디오 증폭기(미도시)(예: 스피 커 증폭 회로)를 포함할 수 있다. 일실시예에 따르면, 상기 오디오 증폭기는 오디오 모듈과 별도의 모듈로 구성될 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제1\", \"제2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없 이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으 로(예: 유선으로), 무선으로, 또는 제3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, '비일시적'은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전자 기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경우 와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어쪠)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다. 도 8 내지 도 9를 참고하여 설명된 전자 장치는, 도 1의 전자 장치의 일 예일 수 있다. 예를 들어, 도 8의 프로세서는, 도 1의 어플리케이션 프로세서에 대응할 수 있다. 도 1의 오디오 DSP는, 도 8의 보조 프로세서에 대응할 수 있다. 도 1의 복수의 오디오 회로들은, 도 8 내지 도 9를 참고하 여 설명된 오디오 모듈에 대응할 수 있다. 일 실시예에서, 전자 장치에 포함된 오디오 회로들의 고장을 식별하는 방안이 요구될 수 있다. 상술한 바와 같 은, 일 실시예에 따른, 전자 장치(electronic device)(예, 도 1 내지 도 6의 전자 장치)는, 프로세서(예, 도 1의 어플리케이션 프로세서), 상기 프로세서에 연결된 복수의 오디오 회로들(예, 도 1의 복수의 오디오 회로들) 및 인스트럭션들을 저장하도록 구성된 메모리(예, 도 1의 메모리)를 포함할 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 전자 장치를 부팅하는 동안, 제1 상태 내 상기 복수 의 오디오 회로들의 초기화를 수행하도록, 상기 프로세서를 야기할 수 있다. 상기 복수의 오디오 회로들 각각 은 초기화에 기반하여 상기 제1 상태와 상이한 제2 상태로 스위칭될 수 있다. 상기 인스트럭션들은, 상기 프로 세서에 의해 실행될 시에, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 메모리에, 상기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보(예, 도 1의 로그 정보)를 저장하도록, 상기 프로세서를 야기할 수 있다. 일 실시예에 따른, 전자 장치는 복수의 오디오 회로들 중에서 초기화되지 않은 적어도 하나의 오디오 회로에 대한 리스트를 출력할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 메모리에 저장된 제1 리스트 정보 (예, 도 3의 제1 리스트 정보)에 대응하는 상기 복수의 오디오 회로들에 대한 상기 초기화를 수행하도록, 상기 프로세서를 야기할 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 복수의 오디 오 회로들 중에서, 상기 초기화에 기반하여 상기 제2 상태로 스위칭된 오디오 회로에 응답하여, 상기 제1 리스 트 정보와 상이한 제2 리스트 정보(예, 도 3의 제2 리스트 정보)에, 상기 제2 상태로 스위칭된 상기 오디 오 회로를 추가하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 프로세서 및 상기 복수의 오디오 회 로들 각각을 연결하는 오디오 인터페이스들(예, 도 1의 복수의 오디오 인터페이스들) 각각에 대응하는 정 보를 이용하여, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 오디오 인터페이스의 타입, 오디오 인터 페이스를 통해 연결된 오디오 회로의 명칭 또는 오디오 인터페이스를 통해 교환되는 신호의 포맷 중 적어도 하 나를 나타내는 상기 정보를 이용하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별 하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 제1 상태 내에서 유지되는 상기 적 어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 복수의 오디오 회로들에 대한 초기화를 완료하기 위 하여, 상기 식별된 적어도 하나의 오디오 회로 및 더미 드라이버를 연결하도록, 상기 프로세서를 야기할 수 있 다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 소프트웨어 어플리케이션의 실행에 기반 하여, 상기 제2 상태의 오디오 회로의 기능을 실행하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 복수의 오디오 회로들 중에서, 상기 적어도 하나의 제1 상태의 오디오 회로를 식별하는 것에 기반하여, 지정된 횟수에 기반하여, 상기 식별된 적어 도 하나의 오디오 회로의 상태를 반복적으로 식별하도록, 상기 프로세서를 야기할 수 있다. 상기 인스트럭션들 은, 상기 프로세서에 의해 실행될 시에, 상기 지정된 횟수 만큼 상기 적어도 하나의 오디오 회로의 상태를 식별 하는 동안, 상기 적어도 하나의 오디오 회로의 상태가 상기 제1 상태 내에서 유지됨을 식별하는 것에 기반하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 나타내는 정보를, 상기 로그 정보 내에 저장 하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 메모리에 포함된 휘발성 메모리에 형성된 로그 버퍼에, 상기 적어도 하나의 오디오 회로가 상기 초기화에 의해 액세스할 수 있는 오디오 회로와 상이함을 나타내는 상기 로그 정보를 저장하도록, 상기 프로세서를 야기할 수 있다. 상기 인스트럭션들은, 상 기 프로세서에 의해 실행될 시에, 상기 로그 정보의 출력을 나타내는 입력에 응답하여, 상기 메모리에 포함된 비휘발성 메모리 및 상기 휘발성 메모리 중 상기 비휘발성 메모리에, 상기 로그 정보를 복제하도록, 상기 프로 세서를 야기할 수 있다. 예를 들어, 상기 제1 상태는, 비활성 상태를 포함하고, 상기 제2 상태는, 활성 상태를 포함할 수 있다. 상술한 바와 같은, 일 실시예에 따른, 전자 장치의 방법은, 상기 전자 장치를 부팅하는 동안, 제1 상태 내 복수 의 오디오 회로들의 초기화를 수행하는 동작(예, 도 7a 내지 도 7b의 동작)을 포함할 수 있다. 상기 전자 장치의 상기 복수의 오디오 회로들 각각은 초기화에 기반하여 상기 제1 상태와 상이한 제2 상태로 스위칭될 수 있다. 상기 방법은, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 메모리에, 상기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하 는 로그 정보를 저장(예, 도 7a 내지 도 7b의 동작)하는 동작을 포함할 수 있다. 예를 들어, 상기 수행하는 동작은, 상기 전자 장치의 메모리에 저장된 제1 리스트 정보에 대응하는 상기 복수의 오디오 회로들에 대한 상기 초기화를 수행하는 동작을 포함할 수 있다. 상기 저장하는 동작은, 상기 복수의 오 디오 회로들 중에서, 상기 초기화에 기반하여 상기 제2 상태로 스위칭된 오디오 회로에 응답하여, 상기 제1 리 스트 정보와 상이한 제2 리스트 정보에, 상기 제2 상태로 스위칭된 상기 오디오 회로를 추가하는 동작을 포함할 수 있다. 예를 들어, 상기 저장하는 동작은, 상기 전자 장치의 프로세서 및 상기 복수의 오디오 회로들 각각을 연결하는 오디오 인터페이스들 각각에 대응하는 정보를 이용하여, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내 에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하는 동작을 포함할 수 있다. 예를 들어, 상기 식별하는 동작은, 오디오 인터페이스의 타입, 오디오 인터페이스를 통해 연결된 오디오 회로의 명칭 또는 오디오 인터페이스를 통해 교환되는 신호의 포맷 중 적어도 하나를 나타내는 상기 정보를 이용하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하는 동작을 포함할 수 있다. 예를 들어, 상기 방법은, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하는 것에 기 반하여, 상기 복수의 오디오 회로들에 대한 초기화를 완료하기 위하여, 상기 식별된 적어도 하나의 오디오 회로 및 더미 드라이브를 연결하는 동작을 포함할 수 있다. 예를 들어, 상기 방법은, 상기 전자 장치의 프로세서에 의한 소프트웨어 어플리케이션의 실행에 기반하여, 상기 제2 상태의 오디오 회로의 기능을 실행하는 동작을 포함할 수 있다. 예를 들어, 상기 저장하는 동작은, 상기 복수의 오디오 회로들 중에서, 상기 적어도 하나의 제1 상태의 오디오 회로를 식별하는 것에 기반하여, 지정된 횟수에 기반하여, 상기 식별된 적어도 하나의 오디오 회로의 상태를 반 복적으로 식별하는 동작을 포함할 수 있다. 상기 저장하는 동작은, 상기 지정된 횟수 만큼 상기 적어도 하나의 오디오 회로의 상태를 식별하는 동안, 상기 적어도 하나의 오디오 회로의 상태가 상기 제1 상태 내에서 유지됨 을 식별하는 것에 기반하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 나타내는 정보 를, 상기 로그 정보 내에 저장하는 동작을 포함할 수 있다. 예를 들어, 상기 저장하는 동작은, 상기 전자 장치의 휘발성 메모리에 형성된 로그 버퍼에 상기 적어도 하나의 오디오 회로가 상기 초기화에 의해 액세스할 수 있는 오디오 회로와 상이함을 나타내는 로그 정보를 저장하는 동작을 포함하할 수 있다. 상기 방법은, 상기 로그 정보의 출력을 나타내는 입력에 응답하여, 상기 휘발성 메 모리 및 상기 전자 장치의 비휘발성 메모리 중 상기 비휘발성 메모리에, 상기 로그 정보를 저장하는 동작을 포 함할 수 있다. 상술한 바와 같은, 일 실시예에 따른, 컴퓨터 판독 가능 저장 매체는, 인스트럭션들을 포함할 수 있다. 상기 인스트럭션들은, 전자 장치의 프로세서에 의해 실행될 시에, 상기 전자 장치를 부팅하는 동안, 제1 상태 내 상 기 복수의 오디오 회로들의 초기화를 수행하도록, 상기 프로세서를 야기할 수 있다. 상기 복수의 오디오 회로 들 각각은 초기화에 기반하여 상기 제1 상태와 상이한 제2 상태로 스위칭될 수 있다. 상기 인스트럭션들은, 상 기 프로세서에 의해 실행될 시에, 상기 복수의 오디오 회로들 중에서, 상기 제1 상태 내에서 유지되는 적어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 전자 장치의 메모리에, 상기 식별된 적어도 하나의 오디오 회로에 대한 정보를 포함하는 로그 정보를 저장하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 메모리에 저장된 제1 리스트 정보에 대응하는 상기 복수의 오디오 회로들에 대한 상기 초기화를 수행하도록, 상기 프로세서를 야기할 수 있다. 상 기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 복수의 오디오 회로들 중에서, 상기 초기화에 기반하여 상기 제2 상태로 스위칭된 오디오 회로에 응답하여, 상기 제1 리스트 정보와 상이한 제2 리스트 정보에, 상기 제2 상태로 스위칭된 상기 오디오 회로를 추가하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 프로세서 및 상기 복수의 오디오 회 로들 각각을 연결하는 오디오 인터페이스들 각각에 대응하는 정보를 이용하여, 상기 복수의 오디오 회로들 중에 서, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 오디오 인터페이스의 타입, 오디오 인터 페이스를 통해 연결된 오디오 회로의 명칭 또는 오디오 인터페이스를 통해 교환되는 신호의 포맷 중 적어도 하 나를 나타내는 상기 정보를 이용하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 식별 하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 제1 상태 내에서 유지되는 상기 적 어도 하나의 오디오 회로를 식별하는 것에 기반하여, 상기 복수의 오디오 회로들에 대한 초기화를 완료하기 위 하여, 상기 식별된 적어도 하나의 오디오 회로 및 더미 드라이버를 연결하도록, 상기 프로세서를 야기할 수 있 다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 소프트웨어 어플리케이션의 실행에 기반 하여, 상기 제2 상태의 오디오 회로의 기능을 실행하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 복수의 오디오 회로들 중에서, 상기 적어도 하나의 제1 상태의 오디오 회로를 식별하는 것에 기반하여, 지정된 횟수에 기반하여, 상기 식별된 적어 도 하나의 오디오 회로의 상태를 반복적으로 식별하도록, 상기 프로세서를 야기할 수 있다. 상기 인스트럭션들 은, 상기 프로세서에 의해 실행될 시에, 상기 지정된 횟수 만큼 상기 적어도 하나의 오디오 회로의 상태를 식별 하는 동안, 상기 적어도 하나의 오디오 회로의 상태가 상기 제1 상태 내에서 유지됨을 식별하는 것에 기반하여, 상기 제1 상태 내에서 유지되는 상기 적어도 하나의 오디오 회로를 나타내는 정보를, 상기 로그 정보 내에 저장 하도록, 상기 프로세서를 야기할 수 있다. 예를 들어, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 전자 장치의 휘발성 메모리에 형성 된 로그 버퍼에 상기 로그 정보를 저장하도록, 상기 프로세서를 야기할 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 시에, 상기 로그 정보의 출력을 나타내는 입력에 응답하여, 상기 전자 장치의 비휘발성 메모리 및 상기 휘발성 메모리 중 상기 비휘발성 메모리에, 상기 로그 정보를 복제하도록, 상기 프로세서를 야 기할 수 있다. 이상에서 설명된 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치 및 구성요소는, 프로세서, 콘트롤 러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 하나 이상 의 소프트웨어 어플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접 근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명"}
{"patent_id": "10-2023-0087391", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처 리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 컴퓨터 저장 매체 또는 장치에 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되 어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 하나 이상의 컴퓨터 판독 가능기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 이때, 매체는 컴퓨터로 실행 가능한 프로그램을 계속 저장하거나, 실행 또는 다운로드를 위해 임시 저장하는 것일 수도 있다. 또한, 매체는 단일 또는 수 개의 하드웨어가 결합된 형태의 다 양한 기록수단 또는 저장수단일 수 있는데, 어떤 컴퓨터 시스템에 직접 접속되는 매체에 한정되지 않고, 네트워 크 상에 분산 존재하는 것일 수도 있다. 매체의 예시로는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD-ROM 및 DVD와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체 (magneto-optical medium), 및 ROM, RAM, 플래시 메모리 등을 포함하여 프로그램 명령어가 저장되도록 구성된 것이 있을 수 있다. 또한, 다른 매체의 예시로, 어플리케이션을 유통하는 앱 스토어나 기타 다양한 소프트웨어 를 공급 내지 유통하는 사이트, 서버 등에서 관리하는 기록매체 내지 저장매체도 들 수 있다."}
{"patent_id": "10-2023-0087391", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다. 도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7a 도면7b 도면8 도면9"}
{"patent_id": "10-2023-0087391", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은, 일 실시예에 따른, 전자 장치의 블록도를 도시한다. 도 2는, 일 실시예에 따른, 전자 장치의 흐름도의 일 예를 도시한다. 도 3은, 일 실시예에 따른, 전자 장치의 프로세서에 의해 실행되는 소프트웨어 어플리케이션들에 대한 블록도의 일 예를 도시한다. 도 4는, 일 실시예에 따른, 전자 장치의 프로세서에 의해 실행되는 소프트웨어 어플리케이션들에 대한 블록도의 일 예를 도시한다. 도 5는, 로그 정보를 저장하기 위한 전자 장치의 동작의 일 예를 도시한다. 도 6은, 일 실시예에 따른, 전자 장치에 의해 표시되는 화면의 일 예를 도시한다. 도 7a 내지 도 7b는, 일 실시예에 따른, 전자 장치의 흐름도의 일 예를 도시한다. 도 8은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 9는, 다양한 실시에 따른, 오디오 모듈의 블록도이다."}
