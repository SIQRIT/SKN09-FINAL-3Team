{"patent_id": "10-2022-0114282", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0027498", "출원번호": "10-2022-0114282", "발명의 명칭": "인공지능 모델을 이용하여 연산을 수행하는 전자 장치 및 전자 장치의 동작 방법", "출원인": "삼성전자주식회사", "발명자": "이준혁"}}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,메모리; 및프로세서를 포함하고,상기 프로세서는상기 메모리에 저장된 인공지능 모델을 로딩하여 컴파일하고,상기 컴파일한 인공지능 모델에 제 1 유형의 활성화 함수를 포함하는지 여부를 확인하고,상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값에 대한 연산을건너뛰고 지정된 값이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제 1 기능을 활성화하고,상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 1 기능을 비활성화하는전자 장치."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,제 1 유형의 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 ReLU 함수인전자 장치."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2 항에 있어서,상기 프로세서는상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값을 제외하여 피쳐 맵을 압축하는 기능인 제 2 기능을 활성화하고,상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 2 기능을 비활성화하는전자 장치."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 2 항에 있어서,상기 제 1 기능은 피쳐 맵에 “0” 이 존재하면 “0”에 대한 연산을 건너뛰고 “0”이 아닌 다음 연산할 값에대하여 연산을 수행하는 기능인 제로 스키핑(zero-skipping) 기능인전자 장치."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2024-0027498-2-제 3 항에 있어서,상기 제 2 기능은 피쳐 맵에서 “0” 값을 제외하여 피쳐 맵을 압축하는 기능인 피쳐 맵 압축 기능인전자 장치."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 4 항에 있어서,상기 제 1 기능이 활성화됨에 대응하여,이전 은닉 계층의 결과 값인 피쳐 맵을 입력 값으로 할 때, 피쳐 맵에 “0” 이 존재하면 “0”에 대한 연산을건너뛰고, “0”이 아닌 다음 연산할 값에 대하여 연산을 수행하고,MAC 연산의 결과에 대하여 연산을 수행하는전자 장치."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6 항에 있어서,상기 제 2 기능이 활성화됨에 대응하여, 은닉 계층의 연산이 완료된 후, 은닉 계층의 출력 값인 피쳐 맵에서 0이 아닌 값만으로 피쳐 맵을 압축하고,압축된 피쳐 맵을 상기 메모리에 저장하는전자 장치."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "전자 장치의 동작 방법에 있어서,메모리에 저장된 인공지능 모델을 로딩하여 컴파일하는 동작;상기 컴파일한 인공지능 모델에 제 1 유형의 활성화 함수를 포함하는지 여부를 확인하는 동작;상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값에 대한 연산을건너뛰고 지정된 값이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제 1 기능을 활성화하는 동작; 및상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 1 기능을 비활성화하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8 항에 있어서,제 1 유형의 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 ReLU 함수인전자 장치의 동작 방법."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 9 항에 있어서,공개특허 10-2024-0027498-3-상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값을 제외하여 피쳐 맵을 압축하는 기능인 제 2 기능을 활성화하는 동작; 및상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 2 기능을 비활성화하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 9 항에 있어서,상기 제 1 기능은 피쳐 맵에 “0” 이 존재하면 “0”에 대한 연산을 건너뛰고 “0”이 아닌 다음 연산할 값에대하여 연산을 수행하는 기능인 제로 스키핑(zero-skipping) 기능인전자 장치의 동작 방법."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 10 항에 있어서,상기 제 2 기능은 피쳐 맵에서 “0” 값을 제외하여 피쳐 맵을 압축하는 기능인 피쳐 맵 압축 기능인전자 장치의 동작 방법."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 11 항에 있어서,상기 제 1 기능이 활성화됨에 대응하여,이전 은닉 계층의 결과 값인 피쳐 맵을 입력 값으로 할 때, 피쳐 맵에 “0” 이 존재하면 “0”에 대한 연산을건너뛰고, “0”이 아닌 다음 연산할 값에 대하여 연산을 수행하는 동작; 및MAC 연산의 결과에 대하여 연산을 수행하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0114282", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 13 항에 있어서,상기 제 2 기능이 활성화됨에 대응하여, 은닉 계층의 연산이 완료된 후, 은닉 계층의 출력 값인 피쳐 맵에서 0이 아닌 값만으로 피쳐 맵을 압축하는 동작; 및압축된 피쳐 맵을 메모리에 저장하는 동작을 포함하는전자 장치의 동작 방법."}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예에 따른 전자 장치에서, 전자 장치는 메모리, 및 프로세서를 포함하고, 상기 프로세서는 상기 메모 리에 저장된 인공지능 모델을 로딩하여 컴파일하고, 상기 컴파일한 인공지능 모델에 제 1 유형의 활성화 함수를 포함하는지 여부를 확인하고, 상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재 하면 지정된 값에 대한 연산을 건너뛰고 지정된 값이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제 1 기능을 활성화하고, 상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 1 기능을 비활성화할 수 있다. 이 밖에 다양한 실시예들이 가능하다."}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 문서에 개시된 다양한 실시예들은, 인공지능 모델을 이용하여 연산을 수행하는 전자 장치 및 전자 장치의 동 작 방법 에 관한 것이다."}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 신경망(artificial neural network; ANN)은 생물학적 뇌를 모델링한 컴퓨터 과학적 아키텍쳐 (computational architecture)를 참조한다. 인공 신경망에 기초하여 딥러닝(deep learning) 또는 기계 학습 (machine learning) 등이 구현될 수 있다. 인공 신경망의 예시로서 심층 신경망(deep neural network) 또는 딥 러닝(deep learning)은 복수의 레이어들을 포함하는 멀티 레이어 구조를 가질 수 있다. 시각, 음성을 분석하는 데에 인공지능 모델(AI 모델)이 다양하게 활용되고 있다. 모바일 단말에서 인공지능 모 델을 효과적으로 동작 시키기 위해 인공지능 모델과 관련된 하드웨어 기술에 대한 연구 개발이 활발하게 진행되 고 있다. 예를 들어, 딥러닝 인공지능 모델에서 수행되는 MAC 연산 (multiply-accumulate) 최적화 연구뿐만 아 니라 인공지능 모델을 고려한 하드웨어의 구조개선 기술 또한 연구, 적용 되고 있다. 또한, 데이터 프로세싱 시스템은 일반적으로 중앙 처리 장치(센트럴 프로세싱 유닛, CPU, central processing unit)으로 알려져 있는 적어도 하나의 프로세서를 포함할 수 있다. 그러한 데이터 프로세싱 시스템은 또한 다양 한 타입의 특화된 프로세싱을 위해 사용되는 적어도 하나의 다른 프로세서, 예를 들어 뉴럴 프로세싱 유닛(NPU, neural processing unit)을 포함할 수 있다."}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 문서에 개시된 일 실시예에 따른 전자 장치는, 메모리, 및 프로세서를 포함할 수 있다. 프로세서는 상기 메 모리에 저장된 인공지능 모델을 로딩하여 컴파일할 수 있다. 상기 컴파일한 인공지능 모델에 제 1 유형의 활성 화 함수를 포함하는지 여부를 확인할 수 있다. 프로세서는, 상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값에 대한 연산을 건너뛰고 지정된 값이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제 1 기능을 활성화할 수 있다. 프로세서는, 상기 제 1 유형의 활성화 함 수를 포함하지 않음에 대응하여, 상기 제 1 기능을 비활성화할 수 있다. 본 문서에 개시된 일 실시예에 따른 전자 장치의 동작 방법은, 메모리에 저장된 인공지능 모델을 로딩하여 컴파 일하는 동작, 상기 컴파일한 인공지능 모델에 제 1 유형의 활성화 함수를 포함하는지 여부를 확인하는 동작, 상 기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값에 대한 연산을 건너뛰고 지정된 값이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제 1 기능을 활성화하는 동작, 및 상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 1 기능을 비활성화하는 동작을 포함할 수 있다."}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(globalnavigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobileedge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2a는 뉴럴 네트워크(NN, Neural network) 구조의 일 예에 관한 도면이다. 도 2a를 참고하면, 인공 신경망 모델은 복수의 레이어들(L1 내지 Ln)을 포함할 수 있다. 복수의 레이어들(L1 내 지 Ln) 각각은 선형 레이어 또는 비선형 레이어일 수 있으며, 실시예에 따라, 적어도 하나의 선형 레이어 및 적 어도 하나의 비선형 레이어가 결합되어 하나의 레이어로 지칭될 수도 있다. 예를 들어, 선형 레이어는 컨볼루션 레이어(convolution), 풀리 커넥티드(fully connected) 레이어를 포함할 수 있으며, 비선형 레이어는 샘플링 (sampling) 레이어, 풀링(pooling) 레이어, 활성(activation) 레이어를 포함할 수 있다. 일 실시예에 따르면, 인공지능 모델에 기초한 연산은 중앙 처리 장치(CPU, Central Processing unit) 및/또는 뉴럴 프로세싱 유닛(NPU, neural processing unit)에서 수행될 수 있다. 도 2a와 관련한 설명에서, 모델 또는 레이어의 동작은 중앙처리 장치(CPU) 및/또는 뉴럴 프로세싱 유닛(NPU)의 동작으로 이해될 수 있다. 예시적으로, 제1 레이어(L1)는 컨볼루션 레이어이고, 제2 레이어(L2)는 샘플링 레이어일 수 있다. 인공 신경망 모델은 활성(activation) 레이어를 더 포함할 수 있으며, 다른 종류의 연산을 수행하는 레이어를 더 포함할 수 있다. 복수의 레이어들 각각은 입력되는 이미지 데이터 또는 이전 레이어에서 생성된 피처맵(feature map)을 입력 피 처맵으로서 수신하고, 입력 피처맵을 연산하여 출력 피처맵을 생성할 수 있다. 이때, 피처맵은 입력 데이터의 다양한 특징이 표현된 데이터를 의미할 수 있다. 피처맵들(FM1, FM2, FM3)은 예컨대 2차원 매트릭스 또는 3차원 매트릭스 형태를 가질 수 있다. 피처맵들(FM1 내지 FM3)은 너비(W)(또는 칼럼이라고 함), 높이(H)(또는 로우라 고 함) 및 깊이(D)를 가지며, 이는 좌표상의 x축, y축 및 z축에 각각 대응할 수 있다. 이때, 깊이(D)는 채널 수 로 지칭될 수 있다. 제1 레이어(L1)는 제1 피처맵(FM1)을 웨이트 맵(WM)과 컨볼루션하여 제2 피처맵(FM2)을 생성할 수 있다. 웨이트 맵(WM)은 제1 피처맵(FM1)을 필터링할 수 있으며, 필터 또는 커널로 지칭될 수 있다. 예컨대, 웨이트 맵(WM)의 깊이, 즉 채널 개수는 제1 피처맵(FM1)의 깊이, 예를 들어, 채널 개수와 동일하며, 웨이트 맵(WM)과 제1 피처맵 (FM1)의 동일한 채널끼리 컨볼루션될 수 있다. 웨이트 맵(WM)은 제1 피처맵(FM1)을 슬라이딩 윈도우로하여 횡단 하는 방식으로 시프트될 수 있다. 시프트되는 양은 \"스트라이드(stride) 길이\" 또는 \"스트라이드\"로 지칭될 수 있다. 각 시프트동안, 웨이트 맵(WM)에 포함되는 웨이트들 각각이 제1 피처맵(FM1)과 중첩된 영역에서의 모든 피처값과 곱해지고 더해질 수 있다. 제1 피처맵(FM1)과 웨이트 맵(WM)이 컨볼루션 됨에 따라, 제2 피처맵(FM2) 의 하나의 채널이 생성될 수 있다. 도 2a에는 하나의 웨이트 맵(WM)이 표시되었으나, 실질적으로는 복수개의 웨 이트 맵이 제1 피처맵(FM1)과 컨볼루션 되어, 제2 피처맵(FM2)의 복수개의 채널이 생성될 수 있다. 다시 말해, 제2 피처맵(FM2)의 채널의 수는 웨이트 맵의 개수에 대응할 수 있다. 제2 레이어(L2)는 제2 피처맵(FM2)의 공간적 크기(spatial size)를 변경함으로써, 제3 피처맵(FM3)을 생성할 수 있다. 일 예로, 제2 레이어(L2)는 샘플링 레이어일 수 있다. 제2 레이어(L2)는 업-샘플링 또는 다운-샘플링을 수행할 수 있으며, 제2 레이어(L2)는 제2 피처맵(FM2)에 포함된 데이터들 중 일부를 선별할 수 있다. 예컨대, 2 차원의 윈도우(WD)가 윈도우(WD)의 사이즈(예컨대, 4 * 4 행렬) 단위로 제2 피처맵(FM2) 상에서 쉬프트되고, 윈 도우(WD)와 중첩되는 영역에서 특정 위치(예컨대, 1행 1열)의 값을 선택할 수 있다. 제2 레이어(L2)는 선택된 데이터를 제3 피처맵(FM3)의 데이터로서 출력할 수 있다. 다른 예로, 제2 레이어(L2)는 풀링 레이어일 수 있다. 이 경우, 제2 레이어(L2)는 제2 피처맵(FM2)에서 윈도우(WD)와 중첩되는 영역의 피처 값들의 최대값(또는 피처 값들의 평균값)이 선택될 수 있다. 제2 레이어(L2)는 선택된 데이터를 제3 피처맵(FM3)의 데이터로서 출력할 수 있다. 이에 따라, 제2 피처맵(FM2)으로부터 공간적 사이즈가 변경된 제3 피처맵(FM3)이 생성될 수 있다. 제3 피처맵 (FM3)의 채널과 제2 피처맵(FM2)의 채널 개수는 동일할 수 있다. 한편, 본 개시의 예시적인 실시예에 따르면, 풀링 레이어보다 샘플링 레이어의 연산 속도가 빠를 수 있고, 샘플링 레이어는 출력 이미지의 퀄리티(예컨대,PSNR(Peak Signal to Noise Ratio) 측면에서)를 개선할 수 있다. 예컨대, 풀링 레이어에 의한 연산은, 최대 값 또는 평균 값을 산출하여야 하므로 샘플링 레이어에 의한 연산보다 연산 시간이 더 클 수 있다. 실시예에 따라, 제2 레이어(L2)는 샘플링 레이어 또는 풀링 레이어에 한정되지 않을 수 있다. 예를 들어, 제2 레이어(L2)는 제1 레이어(L1)와 유사한 컨볼루션 레이어가 될 수 있다. 제2 레이어(L2)는 제2 피처맵(FM2)을 웨 이트 맵과 컨볼루션하여 제3 피처맵(FM3)을 생성할 수 있다. 이 경우, 제2 레이어(L2)에서 컨볼루션 연산을 수 행한 웨이트 맵은 제1 레이어(L1)에서 컨볼루션 연산을 수행한 웨이트 맵(WM)과 다를 수 있다. 제1 레이어(L1) 및 제2 레이어(L2)를 포함한 복수의 레이어들을 거쳐 제N 레이어에서 제N 피처맵을 생성할 수 있다. 제N 피처맵은 출력 데이터가 출력되는 인공 신경망 모델의 백 엔드(back end)에 위치한 복원 레이어 (reconstruction layer)에 입력될 수 있다. 복원 레이어는 제N 피처맵을 기반으로 출력 이미지를 생성할 수 있 다. 또한, 복원 레이어는 제N 피처맵 뿐만 아니라, 제1 피처맵(FM1) 및 제2 피처맵(FM2) 등 복수의 피처맵들을 수신하고, 복수의 피처맵들에 기초하여 출력 이미지를 생성할 수 있다. 예컨대, 복원 레이어는, 컨볼루션 레이어 또는 디-컨볼루션 레이어일 수 있다. 실시예에 따라서는, 피처맵으로 부터 이미지를 복원할 수 있는 다른 종류의 레이어로 구현될 수도 있다. 도 2b는, 일 실시예에 따른 전자 장치의 블록도이다. 도 2b를 참조하면, 전자 장치(예 : 도 1의 전자 장치)는 프로세서(예: 도 1의 프로세서), 메모리(예: 도 1의 메모리)를 포함할 수 있다. 도 2에 포함된 구성 요소는 전자 장치에 포함된 구성들의 일부에 대한 것이며 전자 장치는 이 밖에도 도 1에 도시된 것과 같이 다양한 구성요소를 포함할 수 있다. 메모리는 인공지능 모델과 관련된 데이터를 일시적으로 또는 비일시적으로 저장할 수 있다. 예를 들어, 메 모리는 인공지능 모델의 레이어, 가중치, 오퍼레이션과 같은 인공지능 모델과 관련된 데이터를 저장하고, 인공지능 모델의 출력 값에 기반하여 인공지능 모델과 관련된 데이터를 업데이트할 수 있다. 예를 들어, 메모리 는 인공지능 모델의 출력 값을 저장할 수 있다. 일 실시예에 따른 인공지능 모델은 지정된 언어로 작성되어, 복수의 레이어(layer) 및/또는 오퍼레이션 (operation)을 포함하는 인공 신경망 모델(neural network model)일 수 있다. 일 실시예에 따른 인공지능 모델 은 CNN(convolution neural network), R-CNN(region with convolution neural network), RPN(region proposal network), RNN(recurrent neural network), S-DNN(stacking-based deep neural network), S-SDNN(state-space dynamic neural network), Deconvolution Network, DBN(deep belief network), RBM(restricted boltzman machine), Fully Convolutional Network, LSTM(long short-term memory) Network, Classification Network와 같은다양한 종류의 네트워크 중 적어도 하나일 수 있다. 일 실시예에 따른 인공지능 모델은 지정된 데이터에 대 하여 학습될 수 있고, 입력 데이터를 획득하고, 입력 데이터를 기반으로 연산을 수행하여 출력 데이터를 생성할 수 있다. 일 실시예에 따른 인공지능 모델은 입력 계층(input layer), 은닉 계층(hidden layer) 및 출력 계층(output layer)을 포함할 수 있다. 입력 계층(input layer)은 인공지능 모델에 입력되는 입력 값과 관련될 숭 ㅣㅆ다. 은닉 계층(hidden layer)에서는 입력 값에 대하여 MAC 연산(multiply-accumulate)과 활성화 연산을 수행하여 피쳐 맵을 출력할 수 있다. 출력 계층(output layer)은, 은닉 계층에서 수행한 연산의 결과 값과 관련될 수 있 다. 일 실시예에 따르면, 인공지능 모델은 메모리에 저장되어있을 수 있다. 일 실시예에 따르면, 인공지능 모 델에 기초한 연산은 프로세서(예: 중앙 처리 장치(CPU, central processing unit) 및/또는 뉴럴 프로세싱 유닛(NPU, neural processing unit))에서 수행될 수 있다. 프로세서는 메모리에 저장된 인공지능 모델에 기초하여 연산을 수행할 수 있다. 일 실시예에 따른 프로세서는 적어도 하나의 프로세서를포함할 수 있다. 예를 들어, 프로세서은 중앙 처리 장치(CPU, Central Processing unit)(예: 도 1의 메인 프로세서) 및/또는 뉴럴 프로세싱 유닛(NPU, neural processing unit)(예: 도 1의 보조 프로세서)을 포함할 수 있다. 일 실시예에 따른 프로세서는 컴파일러, 활성화 함수 확인부, 기능 활성화 결정부, 제 1 기능부를 포함하는 연산부 및/또는 제 2 기능부을 포함할 수 있다. 일 실시예에 따른 컴파일러는 특정 언어로 작성된 소스 코드를 타깃 프로그램 및/또는 타깃 하드웨어에서 처리할 수 있는 목적 코드로 컴파일(compile)할 수 있다. 예를 들어, 컴파일러는 메모리에서 인공지 능 모델을 불러오고(또는, 로드(load)하고), 인공지능 모델을 프로세서에서 사용가능한 바이너리로 컴파일 할 수 있다. 일 실시예에 따른 활성화 함수 확인부는 컴파일한 인공지능 모델에 포함된 활성화 함수를 확인할 수 있다. 예를 들어, 활성화 함수 확인부는 컴파일한 인공지능 모델의 활성화 함수에 제 1 유형 함수가 포함되었는 지 여부를 확인할 수 있다. 일 실시예에 따른 기능 활성화 결정부는 제 1 기능 및/또는 제 2 기능을 활성화할지 여부를 결정하고, 제 1 기능부 및/또는 제 2 기능부를 활성화 또는 비활성화할 수 있다. 예를 들어, 기능 활성화 결정부는 컴파일한 인공지능 모델의 활성화 함수에 제 1 유형 함수를 포함함에 대 응하여, 제 1 기능 및/또는 제 2 기능을 활성화할 수 있다. 예를 들어, 기능 활성화 결정부는 컴파일한 인공지능 모델의 활성화 함수에 제 1 유형 함수를 포함하지 않 음에 대응하여, 제 1 기능 및 제 2 기능을 비활성화할 수 있다. 일 실시예에 따르면, 제 1 유형 함수는 렐루(ReLU, Rectified Linear Unit) 함수일 수 있다. 렐루 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 함수이다. 일 실시예에 따른 연산부는 은닉 계층(hidden layer)에서 입력 값에 대하여 MAC 연산(multiply- accumulate)과 활성화 연산을 수행하여 피쳐 맵을 출력할 수 있다. MAC 연산은 입력 값과 대응되는 가중치를 각각 곱하고, 곱한 값들을 합하는 연산일 수 있다. 활성화 연산은 MAC 연산의 결과를 활성화 함수에 입력하여 결과 값을 출력하는 연산일 수 있다. 일 실시예에 따른 제 1 기능부는 은닉 계층의 입력에 포함된 지정된 값에 대하여 연산을 생략할 수 있다. 예를 들어, 제 1 기능은 제로 스키핑(zero-skipping) 기능일 수 있다. 제로 스키핑 기능은, 입력 값(예 : 피쳐 맵, 이전 은닉 계층의 결과 값)에 포함된 0에 대하여, MAC 연산을 생략하는 기능일 수 있다. 일 실시예에 따른 제 2 기능부는 은닉 계층의 출력에 포함된 지정된 값을 제외한 값들로 압축하는 기능일 수 있다. 예를 들어, 제 2 기능은 피쳐 맵 압축 기능일 수 있다. 피쳐 맵 압축 기능은, 프로세서가 은닉 계층의 출력 값 (예 : 피쳐 맵)에 대하여 0이 아닌 값을 추출하여 피쳐 맵을 압축하는 기능일 수 있다. 일 실시예에 따른 제 2 기능부는 압축된 피쳐 맵을 메모리에 저장할 수 있다. 도 2b와 관련한 설명에서, 프로세서에 포함된 것으로 도시된 부분들 적어도 일부가 프로세서에서 실 행되는 SW모듈일 수 있고, 이 경우, 해당 부분들이 수행하는 동작은 프로세서의 동작으로 이해될 수 있다. 도 3은, 일 실시예에 따른 프로세서(예 : 도 2b의 프로세서)가 인공지능 모델을 이용한 연산에서,제 1 기 능 및/또는 제 2 기능을 활성화할지 여부를 결정하여 연산을 수행하는 방법을 도시한 흐름도이다. 일 실시예에 따르면, 프로세서는, 동작 310에서, 인공지능 모델을 로딩하고 컴파일할 수 있다. 일 실시예에 따른 프로세서는, 메모리(예 : 도 2b의 메모리)에 저장된 인공지능 모델을 불러오고(로 딩(loading)하고), 인공지능 모델을 프로세서에서 사용 가능한 바이너리로 컴파일할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 320에서, 인공지능 모델에 포함된 활성화 함수에 제 1 유형 함수를 포함하는지 여부를 확인할 수 있다. 일 실시예에 따르면, 제 1 유형 함수는 렐루(ReLU, Rectified Linear Unit) 함수일 수 있다. 렐루 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 함수를 포함할 수 있다. 일 실시예에 따른 프로세서는, 컴파일한 인공지능 모델에 제 1 유형 함수가 포함되었는지 여부를 확인할 수 있다.일 실시예에 따르면, 프로세서는, 동작 331에서, 활성화 함수에 제 1 유형 함수를 포함함에 대응하여(예 : 동작 320 - 예), 제 1 기능 및/또는 제 2 기능을 활성화할 수 있다. 일 실시예에 따르면, 제 1 기능은 은닉 계층의 입력에 포함된 지정된 값에 대하여 연산을 생략하는 기능일 수 있다. 예를 들어, 제 1 기능은 제로 스키핑(zero-skipping) 기능일 수 있다. 제로 스키핑 기능은, 입력 값(예 : 피쳐 맵, 이전 은닉 계층의 결과 값)에 포함된 0에 대하여, MAC 연산을 생략하는 기능일 수 있다. 일 실시예에 따르면, 제 2 기능은 은닉 계층의 출력에 포함된 지정된 값을 제외한 값들로 압축하는 기능일 수 있다. 예를 들어, 제 2 기능은 피쳐 맵 압축 기능일 수 있다. 피쳐 맵 압축 기능은, 프로세서가 은닉 계층의 출 력 값(예 : 피쳐 맵)에 대하여 0이 아닌 값을 추출하여 피쳐 맵을 압축하는 기능일 수 있다. 일 실시예에 따르면, 프로세서는, 은닉 계층에서 적어도 하나의 제 1 유형 함수를 포함함에 대응하여, 제 1 기능 및/또는 제 2 기능을 활성화할 수 있다. 일 실시예에 따르면, 프로세서는, 제 1 유형 함수를 포함한 은닉 계층에 대하여 제 1 기능 및/또는 제 2 기능을 활성화할 수 있다. 예를 들어, 복수의 은닉 계층에서, 프로세서는, 제 1 유형 함수를 포함한 은닉 계층의 다음 계층의 MAC 연산에서, 제 1 기능을 활성화할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 341에서, 제 1 기능을 활성화하여 MAC 연산 및 활성화 연산을 수행 할 수 있다. 일 실시예에 따르면, 프로세서는, 입력 계층 및/또는 이전 은닉 계층의 결과 값인 피쳐 맵을 입력 값으로 하여 MAC 연산 및 활성화 연산을 수행할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 331에서 제 1 기능이 활성화됨에 대응하여, 입력 값의 0에 대하여 MAC 연산을 생략하고, 다음에 연산 해야할 0이 아닌 값을 가져와서 MAC 연산을 수행할 수 있다. MAC 연산은 입 력 값과 대응되는 가중치를 각각 곱하고, 곱한 값들을 합하는 연산일 수 있다. 일 실시예에 따르면, 프로세서는, MAC 연산의 결과를 활성화 함수에 입력하여 활성화 연산을 수행할 수 있 다. 일 실시예에 따르면, 프로세서는 MAC 연산과 활성화 연산을 수행하여 결과 값인 피쳐 맵을 출력할 수 있다. 일 실시예에 따르면, 은닉 계층은 적어도 하나의 계층(layer)을 포함할 수 있다. 은닉 계층이 복수의 계층을 포 함한 경우, 이전 은닉 계층의 MAC 연산 및 활성화 연산 결과 값인 피쳐 맵은 다음 은닉 계층의 입력 값으로 사 용될 수 있다. 일 실시예에 따르면, 프로세서는, 이전 은닉 계층에 제 1 유형 함수가 포함된 경우, 이전 은닉 계층의 출 력 값인 피쳐 맵에 대하여 다음 은닉 계층에서 제 1 기능을 활성화하여 MAC 연산 및 활성화 연산을 수행할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 351에서, 제 2 기능을 수행할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 341에서 은닉 계층의 연산이 완료된 후, 제 2 기능을 수행할 수 있 다. 일 실시예에 따르면, 프로세서는, 동작 331에서 제 2 기능이 활성화됨에 대응하여, 은닉 계층의 출력 값인 피쳐 맵에 대하여 피쳐 맵 압축을 수행할 수 있다. 예를 들어, 제 2 기능이 활성화된 경우, 프로세서는 피 쳐 맵에서 0이 아닌 값만으로 피쳐 맵을 압축할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 332에서, 활성화 함수에 제 1 유형 함수를 포함하지 않음에 대응하 여(예 : 동작 320 - 아니오), 제 1 기능 및 제 2 기능을 비활성화할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 342에서, MAC 연산 및 활성화 연산을 수행할 수 있다. 일 실시예에 따르면, 프로세서는, 입력 계층 및/또는 이전 은닉 계층의 결과 값인 피쳐 맵을 입력 값으로 하여 MAC 연산 및 활성화 연산을 수행할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 332에서 제 1 기능이 비활성화 됨에 대응하여, 모든 입력 값에 대 하여 MAC 연산을 수행할 수 있다. 일 실시예에 따르면, 프로세서는, MAC 연산의 결과를 활성화 함수에 입력하여 활성화 연산을 수행할 수 있 다. 일 실시예에 따르면, 프로세서는 MAC 연산과 활성화 연산을 수행하여 결과 값인 피쳐 맵을 출력할 수 있다. 일 실시예에 따르면, 은닉 계층은 적어도 하나의 계층(layer)을 포함할 수 있다. 은닉 계층이 복수의 계층으로 구성된 경우, 이전 은닉 계층의 MAC 연산 및 활성화 연산 결과 값인 피쳐 맵은 다음 은닉 계층의 입력 값으로 사용될 수 있다. 일 실시예에 따르면, 프로세서는, 동작 360에서, 결과를 출력하고 결과를메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 351에서 압축된 피쳐 맵을 메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 342에서 출력된 피쳐 맵을 메모리에 저장할 수 있다. 도 4는, 일 실시예에 따른 인공지능 모델의 구성을 도시한 도면이다. 일 실시예에 따른 인공지능 모델은 입력 계층(input layer), 은닉 계층(hidden layer) 및 출력 계층(output layer)을 포함할 수 있다. 입력 계층(input layer)은 인공지능 모델에 입력되는 입력 값과 관련된 계층이다. 은닉 계층(hidden layer)에서는 입력 값에 대하여 MAC 연산(multiply-accumulate)과 활성화 연산을 수행하여 피쳐 맵을 출력할 수 있다. MAC 연산은 입력 값과 대응되는 가중치를 각각 곱하고, 곱한 값들을 합하는 연산일 수 있다. 예를 들어, MAC 연 산은 와 같은 연산일 수 있다. 활성화 연산은 MAC 연산의 결과를 활성화 함수에 입력하여 결과 값을 출력하는 연산일 수 있다. 활성화 함수는, 다양한 유형일 수 있다. 예를 들어, 활성화 함수는, 시그모이드 함수, 탄젠트 함수, 렐루 함수, 리키 렐루 함수, 맥스아웃 함수 및/또는 엘루 함수을 포함할 수 있으나 그 종류에 제한이 없다. 은닉 계층은 적어도 하나의 계층(layer)로 구성될 수 있다. 예를 들어, 은닉 계층이 제 1 은닉 계층 및 제 2 은 닉 계층으로 구성된 경우, 제 1 은닉 계층은 입력 계의 입력 값에 기반하여 MAC 연산 및 활성화 연산을 수행하 여 피쳐 맵을 출력하고, 제 1 은닉 계층에서의 결과 값인 피쳐 맵이 제 2 은닉 계층에서의 입력 값이 될 수 있 다. 제 2 은닉 계층은 제 1 은닉 계층의 결과 값인 피쳐 맵에 기반하여 MAC 연산 및 활성화 연산을 수행할 수 있다. 출력 계층(output layer)은, 은닉 계층에서 수행한 연산의 결과 값과 관련된 계층일 수 있다. 도 5는, 일 실시예에 따른 활성화 함수의 그래프를 도시한 도면이다. 인공지능 모델의 은닉 계층에서는 다양한 유형의 활성화 함수를 포함할 수 있다. 그림 (a) 는 시그모이드(sigmoid) 함수의 그래프이다. 시그모이드 함수는 x의 값에 따라 0~1의 값을 출력하는 S자형 함수이다. 시그모이드 함수는 수학식 1과 같다. 수학식 1 그림 (b) 는 탄젠트(tanh) 함수의 그래프이다. 탄젠트 함수는 수학식 2과 같다. 수학식 2"}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "그림 (c) 는 렐루(ReLu, Rectified Linear Unit, 경사함수) 함수의 그래프이다. 렐루 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 함수이다. 따라서, 렐루 함수의 출력 값에는 0이 포함될 수 있다. 렐루 함수는 수학식 3과 같다. 수학식 3"}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "그림 (d) 는 리키 렐루(Leaky ReLu) 함수의 그래프이다. 리키 렐루 함수는 수학식 4와 같다. 수학식 4"}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "그림 (e) 는 맥스아웃(Maxout) 함수의 그래프이다. 맥스아웃 함수는 수학식 5와 같다. 수학식 5"}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "그림 (f) 는 엘루(ELU, Exponential Linear Unit) 함수의 그래프이다. 엘루 함수는 수학식 6과 같다. 수학식 6"}
{"patent_id": "10-2022-0114282", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 6, "content": "도 6은 제 1 유형 함수를 사용한 인공지능 모델에서, 출력 값이 0인 비율을 나타낸 그래프를 도시한 도면이다. 제 1 유형 함수는, 렐루(ReLu, Rectified Linear Unit) 함수일 수 있다. 도 6은 활성화 함수로 제 1 유형 함수를 사용하는 inceptionv3, deeplabv3 인공지능 모델에서 각각 출력 값이 0 인 비율을 나타낸 그래프이다. 그래프를 참조하면, inceptionv3 인공지능 모델에서는 출력 값의 50.8%가 0이고, deeplabv3 인공지능 모델에서 는 출력 값의 53%가 0이다. 예를 들어, 활성화 함수로 제 1 유형 함수를 사용하는 인공지능 모델의 출력 값에서0의 비율은 약 50% 로 높을 수 있다. 따라서, 제 1 유형 함수를 사용하는 인공지능 모델에서, 프로세서가 제 1 기능을 활성화하는 경우 불필요한 연 산 동작을 생략할 수 있고, 제 2 기능을 활성화하는 경우 압축 효율을 높일 수 있다. 도 7은 일 실시예에 따른 제 1 기능의 동작을 도시한 도면이다. 일 실시예에 따르면, 제 1 기능은 제로 스키핑(zero-skipping) 기능일 수 있다. 제로 스키핑 기능은, 프로세서가 입력 값(예 : 피쳐 맵, 이전 은닉 계층의 결과 값)에 0이 존재하면, MAC 연산에서 0에 대하여 곱셈 연산을 생략하는 기능일 수 있다. 도 7 에서, 검은색 칸은 0을 의미하고, 다른 색 칸은 0이 아닌 값을 의미할 수 있다. 제로 스키핑 기능이 활성화된 경우, 프로세서는 입력 값에서 0(예 : 그림에서 검정색 칸)에 대하여 MAC 연 산을 생략하고, 다음에 연산 해야할 0이 아닌 값(예 : 그림에서 검은 색이 아닌 값)을 가져와서 MAC 연산을 수 행할 수 있다. 이에 따라, 인공지능 모델의 연산 시간을 줄일 수 있다. MAC 연산에서는, 프로세서가 이전 은닉 계층의 결과 값인 피쳐 맵(Feature map)과 가중치(weight)를 각각 곱한 값을 더하여 결과를 출력할 수 있다. 프로세서는 피쳐 맵의 fmVec 값과 대응되는 가중치의 wVec 값을 각각 곱할 수 있다. Cycle #0에서 프로세서는, fmVec0 과 wVec0를 각각 곱할 수 있다. Cycle #1에서 프로세서는, fmVec1의 세번째 값이 0이므로, 다음 연산할 0이 아닌 값인 fmVec4의 네번째 값 을 가져와서 대응되는 가중치인 wVec4의 값과 곱하여 연산을 수행할 수 있다. Cycle #2에서 프로세서는, fmVec2, fmVec3, fmVec4의 0에 대하여 연산을 하지 않고, 그 다음 연산할 0이 아닌 값인 fmVec5의 두번째 값, fmVec6의 두번째 값, fmVec5의 네번째 값, fmVec6의 네번째 값, fmVec5의 여섯 번째 값, fmVec6의 여섯번째 값을 각각 가져와 대응되는 wVec5의 두번째 값, wVec6의 두번째 값, wVec5의 네번 째 값, wVec6의 네번째 값, wVec5의 여섯번째 값, wVec6의 여섯번째 값을 곱하여 연산을 수행할 수 있다. Cycle #3에서 프로세서는, 그 다음 연산할 0이 아닌 값인 fmVec7의 값을 wVec7과 곱하여 연산할 수 있다. 제로 스키핑을 수행하지 않는 경우, 프로세서는 fmVec0부터 fmVec8까지 총 9번의 연산을 수행해야 하는 반 면, 제로 스키핑을 수행하는 경우 3번의 연산으로 MAC 연산을 완료할 수 있다. 따라서, 제로 스키핑 기능이 활성화되면, 0이 많이 포함된 피쳐 맵에 대하여 연산 횟수를 줄일 수 있다. 도 8은 일 실시예에 따른 제 2 기능을 도시한 도면이다. 일 실시예에 따르면, 제 2 기능은 피쳐 맵 압축 기능(featuremap lossless compressor)일 수 있다. 피쳐 맵 압축 기능은, 프로세서가 은닉 계층의 출력 값(예 : 피쳐 맵)에 대하여 0이 아닌 값을 추출하여 피쳐 맵을 압축하는 기능일 수 있다. 압축 기능이 활성화된 경우, 프로세서는 피쳐 맵에서 0이 아닌 값만으로 피쳐 맵을 압축할 수 있다. 도 8을 참조하면, 프로세서는 피쳐 맵에서 “0000” 값을 제외하고, “0110”, “1110”, “1111”, “ 1111”, “1111”, “1111”, “1110”, “1101”, “1011”, “0111” 값만으로 피쳐 맵을 압축할 수 있다. 프로세서는, 압축한 피쳐 맵을 메모리에 저장할 수 있다. 따라서, 피쳐 맵 압축 기능이 활성화되면, 0이 많이 포함된 피쳐 맵에 대하여메모리에 저장되는 용량을 줄일 수 있다. 도 9는 ReLU 함수와 PReLU 함수의 그래프를 도시한 도면이다. 인공지능 모델의 은닉 계층에서는 다양한 유형의 활성화 함수를 포함할 수 있다. ReLU 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 함수이다. 따라서, 은닉 계층에 서 ReLU 함수를 포함하는 경우, 피쳐 맵에 0이 높은 비율로 포함될 수 있다. PReLU 함수는 입력 값이 음수일 경우 입력 값의 1/2 값을 출력하고, 양수일 경우 입력 값을 그대로 출력하는 함 수이다. 따라서, 은닉 계층에서 PReLU 함수를 포함하는 경우, 피쳐 맵에 0이 낮은 비율로 포함될 수 있다. 따라서, 은닉 계층에 ReLU 함수와 같이 출력 값에 0이 높은 비율이 포함되는 활성화 함수를 포함하는 경우, 제 1 기능(예 : 제로 스키핑 기능)을 활성화 하면 연산의 효율을 높일 수 있고, 제 2 기능(예 : 피쳐 맵 압축 기능)을 활성화하면 메모리에 저장되는 데이터의 압축 효율을 높일 수 있다. 반면, PReLU 함수와 같이 출력 값 에 0이 낮은 비율로 포함되는 활성화 함수를 포함하는 경우, 제 1 기능(예 : 제로 스키핑 기능)을 활성화 하면 0을 찾는 동작으로 인하여 연산의 효율이 떨어지고, 제 2 기능(예 : 피쳐 맵 압축 기능)을 활성화하더라도 압축 효율이 낮을 수 있다. 표 1은 은닉 계층에 포함된 활성화 함수의 종류에 따라 제 1 기능(제로 스키핑 기능) 및 제 2 기능을 활성화 했 을 때의 전류 소모양을 비교한 결과일 수 있다. 표 1 활성화 함수 제 1 동작 모드제 2 동작 모드 제 3 동작 모드 성능 (inf/sec) ReLU 26.22 39.47 44.4 No-ReLU 26.23 38.45 44.64 소모 전류 (mA) ReLU 650.8 874.7 952.7 No-ReLU 685.9 894.5 1005.5 표 1에서, 제 1 동작 모드, 제 2 동작 모드, 제 3 동작 모드는 NPU HW 의 성능과 전류소모를 측정할 때 동작하 는 모드일 수 있다.표 1을 참조하면, 성능 측면에서, 제 1 기능 및 제 2 기능을 활성화한 경우에, ReLU를 포함 하는 인공지능 모델과 Non-ReLU를 포함하는 인공지능 모델의 성능의 차이는 크게 없다. 반면, 소모 전류 측면에서, 제 1 기능 및 제 2 기능을 활성화한 경우에, ReLU를 포함하는 인공지능 모델에 비하 여 Non-ReLU를 포함하는 인공지능 모델에서 전류 소모가 많은 것을 확인할 수 있다. 예를 들어, Non-ReLU를 포함하는 인공지능 모델의 피쳐 맵은, 0의 비율이 낮음에도 불구하고, 제 1 기능에서 0 을 찾는 불필요한 연산을 수행하기 때문에 전류 소모가 늘어날 수 있다. 또한, Non-ReLU를 포함하는 인공지능 모델의 피쳐 맵은, 0의 비율이 낮음에도 불구하고, 제 2 기능에서 0을 제 외하는 불필요한 동작을 수행하기 때문에 전류 소모가 늘어날 수 있다. 따라서, 본 발명에 개시된 일 실시예와 같이, 프로세서는 인공지능 모델에 포함된 활성화 함수의 유형에 따라 제 1 기능 및/또는 제 2 기능을 활성화할 지 여부를 확인하고, 활성화를 결정함에 따라, 전류 소모를 줄일 수 있고, 데이터를 효율적으로 압축할 수 있다. 도 10은, 일 실시예에 따른 프로세서(예 : 도 2b의 프로세서)가 인공지능 모델을 이용한 연산에서, 제 1 기능을 활성화할지 여부를 결정하여 연산을 수행하는 방법을 도시한 흐름도이다. 일 실시예에 따르면, 프로세서는, 동작 1010에서, 인공지능 모델을 로딩하고 컴파일할 수 있다. 일 실시예에 따른 프로세서는, 메모리(예 : 도 2b의 메모리)에 저장된 인공지능 모델을 불러오고(로 딩(loading)하고), 인공지능 모델을 프로세서에서 사용 가능한 바이너리로 컴파일할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 1020에서, 인공지능 모델에 포함된 활성화 함수에 제 1 유형 함수 를 포함하는지 여부를 확인할 수 있다. 일 실시예에 따르면, 제 1 유형 함수는 렐루(ReLU, Rectified Linear Unit) 함수일 수 있다. 렐루 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 함수를 포함할 수 있다. 일 실시예에 따른 프로세서는, 컴파일한 인공지능 모델에 제 1 유형 함수가 포함되었는지 여부를 확인할 수 있다.일 실시예에 따르면, 프로세서는, 동작 1030에서, 활성화 함수에 제 1 유형 함수를 포함함에 대응하여(예 : 동작 1020 - 예), 제 1 기능을 활성화할 수 있다. 일 실시예에 따르면, 제 1 기능은 은닉 계층의 입력에 포함된 지정된 값에 대하여 연산을 생략하는 기능일 수 있다. 예를 들어, 제 1 기능은 제로 스키핑(zero-skipping) 기능일 수 있다. 제로 스키핑 기능은, 입력 값(예 : 피쳐 맵, 이전 은닉 계층의 결과 값)에 포함된 0에 대하여, MAC 연산을 생략하는 기능일 수 있다. 일 실시예에 따르면, 프로세서는, 동작 1040에서, 활성화 함수에 제 1 유형 함수를 포함하지 않음에 대응 하여(예 : 동작 1020 - 아니오), 제 1 기능을 비활성화할 수 있다. 일 실시예에 따르면, 프로세서는, 동작 1040에서 제 1 기능이 비활성화 됨에 대응하여, 모든 입력 값에 대 하여 MAC 연산을 수행할 수 있다. 일 실시예에 따르면, 프로세서는, MAC 연산의 결과를 활성화 함수에 입력하여 활성화 연산을 수행할 수 있 다. 일 실시예에 따르면, 프로세서는 MAC 연산과 활성화 연산을 수행하여 결과 값인 피쳐 맵을 출력할 수 있다. 일 실시예에 따르면, 은닉 계층은 적어도 하나의 계층(layer)을 포함할 수 있다. 은닉 계층이 복수의 계층으로 구성된 경우, 이전 은닉 계층의 MAC 연산 및 활성화 연산 결과 값인 피쳐 맵은 다음 은닉 계층의 입력 값으로 사용될 수 있다. 인공지능 모델은 뉴럴 프로세싱 유닛(NPU, Neural Processing Unit)에서 동작 할 수 있고, 인공지능 모델의 성 능 개선과 전력 효율 개선을 위하여 하드웨어 구조에 대한 연구가 활발히 진행되고 있다. 제로 스키핑(zero-skipping) 기능은, 입력 값(예 : 피쳐 맵, 이전 은닉 계층의 결과 값)에 포함된 0에 대하여, MAC 연산을 생략하는 기능일 수 있다. 제로 스키핑은, 활성화 함수 ReLU를 사용하고 0 의 비율이 높을 경우에는 효과적으로 적용 할 수 있다. 예를 들어, 활성화 함수 ReLU를 사용하는 경우, 피쳐 맵에서의 0 의 비율이 높기 때문에 제로 스키핑 효과를 극대화 할 수 있다. 다만, 인공지능 모델에서 사용되는 활성화 함수의 종류는 다양하고, 그 특성 또한 다양한 바, 활성화 함수의 출 력 값인 피쳐 맵에 0의 비율이 높지 않은 경우, 제로 스키핑 기능의 효율이 떨어질 수 있다. 본 발명에 개시된 일 실시예는, 인공지능 모델의 활성화 계층(layer)을 구분하여 효과적으로 하드웨어를 구동하 는 방법에 대해 제안 하고자 한다. 본 발명의 일 실시예에서는 인공지능 모델에 포함된 활성화 함수가 지정된 유형의 함수임에 대응하여, 제로 스 키핑 기능을 활성화 또는 비활성화하는 전자 장치 및 전자 장치의 동작 방법에 대하여 개시한다. 본 발명의 일 실시예에서는 인공지능 모델에 포함된 활성화 함수가 지정된 유형의 함수임에 대응하여, 피쳐 맵 압축 기능을 활성화 또는 비활성화하는 전자 장치 및 전자 장치의 동작 방법에 대하여 개시한다. 본 문서에서 이루고자 하는 기술적 과제는 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술적 과제들은 아래의 기재로부터 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다. 일 실시예에 따른 전자 장치는, 메모리, 및 프로세서를 포함하고, 상기 프로세서는 상기 메모리에 저장된 인공 지능 모델을 로딩하여 컴파일하고, 상기 컴파일한 인공지능 모델에 제 1 유형의 활성화 함수를 포함하는지 여부 를 확인하고, 상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값 에 대한 연산을 건너뛰고 지정된 값이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제 1 기능을 활성 화하고, 상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 1 기능을 비활성화할 수 있다. 일 실시예에 따른 전자 장치에서, 제 1 유형의 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 ReLU 함수일 수 있다. 일 실시예에 따른 전자 장치에서, 상기 프로세서는 상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값을 제외하여 피쳐 맵을 압축하는 기능인 제 2 기능을 활성화하고, 상기 제1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 2 기능을 비활성화할 수 있다. 일 실시예에 따른 전자 장치에서, 상기 제 1 기능은 피쳐 맵에 “0”이 존재하면 “0”에 대한 연산을 건너뛰고 “0”이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제로 스키핑(zero-skipping) 기능일 수 있다. 일 실시예에 따른 전자 장치에서, 상기 제 2 기능은 피쳐 맵에서 “0”값을 제외하여 피쳐 맵을 압축하는 기능 인 피쳐 맵 압축 기능일 수 있다. 일 실시예에 따른 전자 장치에서, 상기 제 1 기능이 활성화됨에 대응하여, 이전 은닉 계층의 결과 값인 피쳐 맵을 입력 값으로 할 때, 피쳐 맵에 “0”이 존재하면 “0”에 대한 연산을 건너뛰고, “0”이 아닌 다음 연산할 값에 대하여 연산을 수행하고, MAC 연산의 결과에 대하여 연산을 수행할 수 있다. 일 실시예에 따른 전자 장치에서, 상기 제 2 기능이 활성화됨에 대응하여,은닉 계층의 연산이 완료된 후, 은닉 계층의 출력 값인 피쳐 맵에서 0이 아닌 값만으로 피쳐 맵을 압축하고, 압축된 피쳐 맵을 상기 메모리에 저장할 수 있다. 일 실시예에 따른 전자 장치의 동작 방법은, 메모리에 저장된 인공지능 모델을 로딩하여 컴파일하는 동작, 상기 컴파일한 인공지능 모델에 제 1 유형의 활성화 함수를 포함하는지 여부를 확인하는 동작, 상기 제 1 유형의 활 성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값에 대한 연산을 건너뛰고 지정된 값 이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제 1 기능을 활성화하는 동작, 및 상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 1 기능을 비활성화하는 동작을 포함할 수 있다. 일 실시예에 따른 전자 장치의 동작 방법에서, 제 1 유형의 함수는 입력 값이 음수일 경우 0, 양수일 경우 입력 값을 그대로 출력하는 ReLU 함수일 수 있다. 일 실시예에 따른 전자 장치의 동작 방법에서, 상기 제 1 유형의 활성화 함수를 포함함에 대응하여, 피쳐 맵에 지정된 값이 존재하면 지정된 값을 제외하여 피쳐 맵을 압축하는 기능인 제 2 기능을 활성화하는 동작, 및 상기 제 1 유형의 활성화 함수를 포함하지 않음에 대응하여, 상기 제 2 기능을 비활성화하는 동작을 포함할 수 있다. 일 실시예에 따른 전자 장치의 동작 방법에서, 상기 제 1 기능은 피쳐 맵에 “0”이 존재하면 “0”에 대한 연 산을 건너뛰고 “0”이 아닌 다음 연산할 값에 대하여 연산을 수행하는 기능인 제로 스키핑(zero-skipping) 기 능일 수 있다. 일 실시예에 따른 전자 장치의 동작 방법에서, 상기 제 2 기능은 피쳐 맵에서 “0”값을 제외하여 피쳐 맵을 압 축하는 기능인 피쳐 맵 압축 기능일 수 있다. 일 실시예에 따른 전자 장치의 동작 방법에서, 상기 제 1 기능이 활성화됨에 대응하여, 이전 은닉 계층의 결과 값인 피쳐 맵을 입력 값으로 할 때, 피쳐 맵에 “0”이 존재하면 “0”에 대한 연산을 건너뛰고, “0”이 아닌 다음 연산할 값에 대하여 연산을 수행하는 동작, 및 MAC 연산의 결과에 대하여 연산을 수행하는 동작을 포함할 수 있다. 일 실시예에 따른 전자 장치의 동작 방법에서, 상기 제 2 기능이 활성화됨에 대응하여, 은닉 계층의 연산이 완 료된 후, 은닉 계층의 출력 값인 피쳐 맵에서 0이 아닌 값만으로 피쳐 맵을 압축하는 동작, 및 압축된 피쳐 맵 을 메모리에 저장하는 동작을 포함할 수 있다. 본 문서에 개시된 일 실시예에 따르면, 인공지능 모델의 연산에 있어서, 전력 소모를 줄이는 전자 장치를 제공 할 수 있다. 본 문서에 개시된 일 실시예에 따르면, 인공지능 모델의 연산에 있어서, 결과 값인 피쳐 맵을 효율적으로 압축 하는 전자 장치를 제공할 수 있다. 본 문서에 개시된 일 실시예에 따르면, 인공지능 모델에 포함된 활성화 함수에 따라, 은닉 계층의 입력에 포함 된 지정된 값에 대하여 연산을 생략하여 전력 소모를 효율적으로 줄일 수 있다. 본 문서에 개시된 일 실시예에 따르면, 인공지능 모델에 포함된 활성화 함수에 따라, 은닉 계층의 출력에 포함 된 지정된 값을 제외한 값들로 압축하여, 피쳐 맵을 효율적으로 압축할 수 있다. 본 개시에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 않으며 , 언급하지 않은 또 다른 효과들 은 아래의 기재로부터 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, '비일시적'은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전자 기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경우 와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2a 도면2b 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10"}
{"patent_id": "10-2022-0114282", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면의 설명과 관련하여, 동일 또는 유사한 구성 요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있 다. 도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블럭도이 다. 도 2a는 뉴럴 네트워크(NN, Neural network) 구조의 일 예에 관한 도면이다. 도 2b는, 일 실시예에 따른 전자 장치의 블록도이다. 도 3은, 일 실시예에 따른 프로세서가 인공지능 모델을 이용한 연산에서,제 1 기능 및/또는 제 2 기능을 활성화 할지 여부를 결정하여 연산을 수행하는 방법을 도시한 흐름도이다. 도 4는, 일 실시예에 따른 인공지능 모델의 구성을 도시한 도면이다. 도 5는, 일 실시예에 따른 활성화 함수의 그래프를 도시한 도면이다. 도 6은 제 1 유형 함수를 사용한 인공지능 모델에서, 출력 값이 0인 비율을 나타낸 그래프를 도시한 도면이다.도 7은 일 실시예에 따른 제 1 기능의 동작을 도시한 도면이다. 도 8은 일 실시예에 따른 제 2 기능을 도시한 도면이다. 도 9는 ReLU 함수와 PReLU 함수의 그래프를 도시한 도면이다. 도 10은, 일 실시예에 따른 프로세서가 인공지능 모델을 이용한 연산에서, 제 1 기능을 활성화할지 여부를 결정 하여 연산을 수행하는 방법을 도시한 흐름도이다."}
