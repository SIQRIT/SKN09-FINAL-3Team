{"patent_id": "10-2017-0030476", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2018-0103474", "출원번호": "10-2017-0030476", "발명의 명칭": "스토리 생성 장치 및 스토리 생성 방법", "출원인": "성균관대학교산학협력단", "발명자": "정윤경"}}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "복수의 객체의 정보를 레코드로 갖는 객체 정보 테이블, 가상 공간에서 상기 복수의 객체에 대한 상태를 레코드로 갖는 객체 상태 테이블, 및 상기 복수의 객체에 대한 복수의 단위 액션을 레코드로 갖는 스토리 테이블을 포함하는 데이터베이스(database);상기 객체 정보 테이블 및 상기 객체 상태 테이블을 참조하여 초기 스토리에 대한 상기 복수의 단위 액션을 생성하여 상기 스토리 테이블에 기록하는 스토리 계획부(story planner); 및상기 스토리 테이블을 참조하여 상기 복수의 단위 액션을 상기 가상 공간에 구현하고, 구현 결과에 따라 상기객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나를 업데이트하는 구현 관리부(execution manager)를포함하는스토리 생성 장치."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1 항에 있어서,유저(user)의 행동에 따라 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나의 레코드를 변경시키는 상호작용 관리부(interaction manager)를 더 포함하고,상기 구현 관리부는 제1 단위 액션의 구현에 실패하는 경우 상기 스토리 테이블에 상기 제1 단위 액션에 대한구현 실패를 기록하고, 구현 실패 메시지를 발생시키는,스토리 생성 장치."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2 항에 있어서,상기 스토리 계획부는 상기 구현 실패 메시지를 검출한 경우, 상기 객체 정보 테이블 및 상기 객체 상태 테이블을 참조하여 제1 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 상기 제1 단위 액션 및 그 이후의 단위액션을 대체시키는,스토리 생성 장치."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3 항에 있어서,상기 스토리 계획부는 상기 제1 신규 스토리에 대한 복수의 단위 액션을 생성 실패한 경우 계획 실패 메시지를발생시키고,상기 계획 실패 메시지를 검출한 경우, 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나에 대한 레코드를 업데이트 또는 신규 생성하는 드라마 관리부(drama manager)를 더 포함하는스토리 생성 장치."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4 항에 있어서,상기 스토리 계획부는, 상기 드라마 관리부의 동작 이후에, 상기 객체 정보 테이블 및 상기 객체 상태 테이블을참조하여 제2 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 상기 제1 단위 액션 및 그 이후의 단위 액션을 대체시키는,공개특허 10-2018-0103474-3-스토리 생성 장치."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1 항에 있어서,상기 스토리 테이블에 기록된 복수의 레코드를 특정 기준에 따라 선택 및 재배열하는 디스코스 계획부(discourse planner)를 더 포함하는스토리 생성 장치."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "컴퓨팅 장치에 포함된 프로세서 및 기록매체를 통해 수행되는 스토리 생성 방법으로서,데이터베이스에 포함된 복수의 객체의 정보를 레코드로 갖는 객체 정보 테이블 및 가상 공간에서 상기 복수의객체에 대한 상태를 레코드로 갖는 객체 상태 테이블을 참조하여, 초기 스토리에 대한 복수의 단위 액션을 생성하여 상기 데이터베이스에 포함된 스토리 테이블에 레코드로 기록하는 초기 스토리 계획 단계; 및상기 스토리 테이블을 참조하여 상기 복수의 단위 액션을 상기 가상 공간에 구현하고, 구현 결과에 따라 상기객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나를 업데이트하는 구현 관리 단계를 포함하는스토리 생성 방법."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7 항에 있어서,유저의 행동에 따라 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나의 레코드를 변경시키는상호작용 관리 단계; 및제1 단위 액션의 구현에 실패하는 경우 상기 스토리 테이블에 상기 제1 단위 액션에 대한 구현 실패를기록하고, 구현 실패 메시지를 발생시키는 단계를 더 포함하는스토리 생성 방법."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8 항에 있어서,상기 구현 실패 메시지를 검출한 경우, 상기 객체 정보 테이블 및 상기 객체 상태 테이블을 참조하여 제1 신규스토리에 대한 복수의 단위 액션을 생성함으로써, 상기 제1 단위 액션 및 그 이후의 단위 액션을 대체시키는 단계를 더 포함하는스토리 생성 방법."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9 항에 있어서,상기 제1 신규 스토리에 대한 복수의 단위 액션을 생성 실패한 경우 계획 실패 메시지를 발생시키는 단계; 및상기 계획 실패 메시지를 검출한 경우, 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나에 대한 레코드를 업데이트 또는 신규 생성하는 드라마 관리 단계를 더 포함하는스토리 생성 방법."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10 항에 있어서,상기 드라마 관리 단계 이후에, 상기 객체 정보 테이블 및 상기 객체 상태 테이블을 참조하여 제2 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 상기 제1 단위 액션 및 그 이후의 단위 액션을 대체시키는 단계를더 포함하는공개특허 10-2018-0103474-4-스토리 생성 방법."}
{"patent_id": "10-2017-0030476", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제7 항에 있어서,상기 스토리 테이블에 기록된 복수의 레코드를 특정 기준에 따라 선택 및 재배열하는 디스코싱 단계를 더 포함하는스토리 생성 방법."}
{"patent_id": "10-2017-0030476", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 한 실시예에 따른 스토리 생성 장치는, 복수의 객체의 정보를 레코드로 갖는 객체 정보 테이블, 가상 공간에서 상기 복수의 객체에 대한 상태를 레코드로 갖는 객체 상태 테이블, 및 상기 복수의 객체에 대한 복수의 단위 액션을 레코드로 갖는 스토리 테이블을 포함하는 데이터베이스(database); 상기 객체 정보 테이블 및 상기 객체 상태 테이블을 참조하여 초기 스토리에 대한 상기 복수의 단위 액션을 생성하여 상기 스토리 테이블에 기록 하는 스토리 계획부(story planner); 및 상기 스토리 테이블을 참조하여 상기 복수의 단위 액션을 상기 가상 공 간에 구현하고, 구현 결과에 따라 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나를 업데이트 하는 구현 관리부(execution manager)를 포함한다."}
{"patent_id": "10-2017-0030476", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 스토리 생성 장치 및 스토리 생성 방법에 관한 것이다."}
{"patent_id": "10-2017-0030476", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 계획 기술을 이용하여 자동으로 서사를 생성하는 것은 1970년대에 시작되었다. 이후, 산발적으로 연구 가 진행되다가 2003년 게임 개발자 컨퍼런스에 발표된 마티어스 및 스턴(Mateas and Stern)의 파케이드(Facad e)라는 지능적 인터랙티브 스토리텔링 시스템이 일반에 공개되면서 활발한 연구가 촉발되었다. 인공지능 기술을 기반으로 하여 서사를 생성하는 초창기 시스템으로는 노스캐롤라이나 주립 대학의 미메시스 (Mimesis), 스질라스(Szilas)의 아이디텐션(IDtension) 등이 있다. 이들 시스템은 인공지능의 추론 및 계획 기 술을 기반으로 하는 특징이 있다. 하지만 기존 연구는 실용화에 대한 고려가 부족하여 실제 컨텐츠 기반 소프트웨어에서 직접적으로 활용하기 어 려운 상황이다. 또한 게임과 같이 유저가 가상 세계에 직접 개입하는 경우 이에 대한 상호작용을 어떻게 처리하 면서 스토리를 생성할 것인지에 대한 구체적인 방안이 제시된 바가 없다. 선행기술문헌 특허문헌 (특허문헌 0001) 한국등록특허공보 제10-1683364호 (2016.11.30)"}
{"patent_id": "10-2017-0030476", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "해결하고자 하는 기술적 과제는 유저와 생성된 스토리가 매끄럽게 상호작용할 수 있도록 시스템을 모듈화하고, 모듈간의 통신을 데이터베이스화함으로써 다수 모듈간 일대일 통신에 의한 정보의 누락 및 어긋남을 방지할 수 있는 스토리 생성 장치 및 스토리 생성 방법을 제공하는 데 있다."}
{"patent_id": "10-2017-0030476", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 한 실시예에 따른 스토리 생성 장치는, 복수의 객체의 정보를 레코드로 갖는 객체 정보 테이블, 가상 공간에서 상기 복수의 객체에 대한 상태를 레코드로 갖는 객체 상태 테이블, 및 상기 복수의 객체에 대한 복수 의 단위 액션을 레코드로 갖는 스토리 테이블을 포함하는 데이터베이스(database); 상기 객체 정보 테이블 및 상기 객체 상태 테이블을 참조하여 초기 스토리에 대한 상기 복수의 단위 액션을 생성하여 상기 스토리 테이블 에 기록하는 스토리 계획부(story planner); 및 상기 스토리 테이블을 참조하여 상기 복수의 단위 액션을 상기 가상 공간에 구현하고, 구현 결과에 따라 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나를 업데이트하는 구현 관리부(execution manager)를 포함한다. 상기 스토리 생성 장치는 유저(user)의 행동에 따라 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어 도 하나의 레코드를 변경시키는 상호작용 관리부(interaction manager)를 더 포함하고, 상기 구현 관리부는 제1 단위 액션의 구현에 실패하는 경우 상기 스토리 테이블에 상기 제1 단위 액션에 대한 구현 실패를 기록하고, 구 현 실패 메시지를 발생시킬 수 있다. 상기 스토리 계획부는 상기 구현 실패 메시지를 검출한 경우, 상기 객체 정보 테이블 및 상기 객체 상태 테이블 을 참조하여 제1 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 상기 제1 단위 액션 및 그 이후의 단위 액션을 대체시킬 수 있다. 상기 스토리 계획부는 상기 제1 신규 스토리에 대한 복수의 단위 액션을 생성 실패한 경우 계획 실패 메시지를 발생시키고, 상기 스토리 생성 장치는, 상기 계획 실패 메시지를 검출한 경우, 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나에 대한 레코드를 업데이트 또는 신규 생성하는 드라마 관리부(drama manage r)를 더 포함할 수 있다. 상기 스토리 계획부는, 상기 드라마 관리부의 동작 이후에, 상기 객체 정보 테이블 및 상기 객체 상태 테이블을 참조하여 제2 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 상기 제1 단위 액션 및 그 이후의 단위 액 션을 대체시킬 수 있다. 상기 스토리 생성 장치는 상기 스토리 테이블에 기록된 복수의 레코드를 특정 기준에 따라 선택 및 재배열하는 디스코스 계획부(discourse planner)를 더 포함할 수 있다. 본 발명의 한 실시예에 따른 스토리 생성 방법은, 컴퓨팅 장치에 포함된 프로세서 및 기록매체를 통해 수행되는 스토리 생성 방법으로서, 데이터베이스에 포함된 복수의 객체의 정보를 레코드로 갖는 객체 정보 테이블 및 가 상 공간에서 상기 복수의 객체에 대한 상태를 레코드로 갖는 객체 상태 테이블을 참조하여, 초기 스토리에 대한 복수의 단위 액션을 생성하여 상기 데이터베이스에 포함된 스토리 테이블에 레코드로 기록하는 초기 스토리 계 획 단계; 및 상기 스토리 테이블을 참조하여 상기 복수의 단위 액션을 상기 가상 공간에 구현하고, 구현 결과에 따라 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나를 업데이트하는 구현 관리 단계를 포함 한다. 상기 스토리 생성 방법은, 유저의 행동에 따라 상기 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하 나의 레코드를 변경시키는 상호작용 관리 단계; 및 제1 단위 액션의 구현에 실패하는 경우 상기 스토리 테이블 에 상기 제1 단위 액션에 대한 구현 실패를 기록하고, 구현 실패 메시지를 발생시키는 단계를 더 포함할 수 있 다. 상기 스토리 생성 방법은, 상기 구현 실패 메시지를 검출한 경우, 상기 객체 정보 테이블 및 상기 객체 상태 테 이블을 참조하여 제1 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 상기 제1 단위 액션 및 그 이후의 단위 액션을 대체시키는 단계를 더 포함할 수 있다. 상기 스토리 생성 방법은, 상기 제1 신규 스토리에 대한 복수의 단위 액션을 생성 실패한 경우 계획 실패 메시 지를 발생시키는 단계; 및 상기 계획 실패 메시지를 검출한 경우, 상기 객체 정보 테이블 및 상기 객체 상태 테 이블 중 적어도 하나에 대한 레코드를 업데이트 또는 신규 생성하는 드라마 관리 단계를 더 포함할 수 있다. 상기 스토리 생성 방법은, 상기 드라마 관리 단계 이후에, 상기 객체 정보 테이블 및 상기 객체 상태 테이블을 참조하여 제2 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 상기 제1 단위 액션 및 그 이후의 단위 액 션을 대체시키는 단계를 더 포함할 수 있다. 상기 스토리 생성 방법은, 상기 스토리 테이블에 기록된 복수의 레코드를 특정 기준에 따라 선택 및 재배열하는 디스코싱 단계를 더 포함할 수 있다."}
{"patent_id": "10-2017-0030476", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 따른 스토리 생성 장치 및 스토리 생성 방법은 유저와 생성된 스토리가 매끄럽게 상호작용할 수 있도 록 시스템을 모듈화하고, 모듈간의 통신을 데이터베이스화함으로써 다수 모듈간 일대일 통신에 의한 정보의 누 락 및 어긋남을 방지할 수 있다."}
{"patent_id": "10-2017-0030476", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부한 도면을 참고로 하여 본 발명의 여러 실시 예들에 대하여 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 본 발명은 여러 가지 상이한 형태로 구현될 수 있으며 여기에서 설명하는 실시 예들에 한정되지 않는다. 본 발명을 명확하게 설명하기 위해서 설명과 관계없는 부분은 생략하였으며, 명세서 전체를 통하여 동일 또는 유사한 구성요소에 대해서는 동일한 참조 부호를 붙이도록 한다. 따라서 앞서 설명한 참조 부호는 다른 도면에 서도 사용할 수 있다. 또한, 도면에서 나타난 각 구성의 크기 및 두께는 설명의 편의를 위해 임의로 나타내었으므로, 본 발명이 반드 시 도시된 바에 한정되지 않는다. 도면에서 여러 층 및 영역을 명확하게 표현하기 위하여 크기 및 두께를 과장 되게 나타낼 수 있다. 도 1은 본 발명의 한 실시예에 따른 스토리 생성 장치를 설명하기 위한 도면이다. 도 1을 참조하면 본 발명의 한 실시예에 따른 스토리 생성 장치(10a)는 데이터베이스, 스토리 계획부 , 및 구현 관리부를 포함한다. 스토리 생성 장치(10a)는 정보 처리를 위하여 적어도 하나의 프로세서 및 기록매체를 포함하는 컴퓨팅 장치일 수 있다. 스토리 생성 장치(10a)는 데이터 또는 프로그램이 기록된 기록매체를 읽음으로써 목적하는 기능을 수 행할 수 있다. 본 실시예에서는 데이터베이스, 스토리 계획부, 및 구현 관리부를 기능적으로 모 듈화하였으며 이는 하드웨어적으로 모듈화되어 구현되거나, 소프트웨어적으로 모듈화되어 구현될 수 있다. 또한 각 모듈의 동일한 기능을 수행하도록 특정 모듈이 분리되거나 다른 모듈과 합해질 수도 있으며, 이는 구현하고 자 하는 제품에 따라 달라질 수 있다. 데이터베이스(databsae)는 복수의 객체(objects)의 정보를 레코드(record)로 갖는 객체 정보 테이블, 가상 공간에서 복수의 객체에 대한 상태를 레코드로 갖는 객체 상태 테이블, 및 복수의 객체에 대한 복수의 단위 액 션을 레코드로 갖는 스토리 테이블을 포함한다. 복수의 객체란 등장 인물, 소품, 배경물, 건물, 자연환경, 장소 등 가상 환경 내에서 구현될 수 있는 모든 종류 의 객체를 의미할 수 있다. 가상 환경이란 유저(user)가 개입될 수 있는 게임과 같은 개입형 스토리 환경을 의 미할 수도 있고, 유저의 개입이 없는 관찰형 스토리 환경일 수도 있다. 가상 환경은 그래픽적으로 구현되어 디 스플레이 장치, 모바일 디스플레이 장치, 헤드마운티드 디스플레이 장치, 스피커 등을 통해 유저에게 제공될 수 있다. 데이터베이스가 포함하는 객체 정보 테이블, 객체 상태 테이블, 스토리 테이블의 예시적인 구성과 역할에 대해서는 도 3 이하를 참조하여 구체적인 예를 들어 설명한다. 스토리 계획부(story planner)는 객체 정보 테이블 및 객체 상태 테이블을 참조하여 초기 스토리에 대한 복수의 단위 액션을 생성하여 스토리 테이블에 기록한다. 스토리 계획부는 다양한 다른 실시예로 구성될 수 있는데, 예시적인 다른 실시예에서는 복수의 단위 액션 을 먼저 생성하고 그에 맞춰 객체 정보 및 상태를 생성함으로써 객체 정보 테이블 및 객체 상태 테이블의 레코 드까지도 생성하도록 구성될 수도 있다. 이러한 경우, 스토리 계획부는 모든 테이블, 즉 스토리 테이블, 객체 정보 테이블, 객체 상태 테이블의 레코드를 생성하는데 기여할 수 있다. 구현 관리부(execution manager)는 스토리 테이블을 참조하여 복수의 단위 액션을 가상 공간에 구현하고, 구현 결과에 따라 객체 정보 테이블 및 객체 상태 테이블 중 적어도 하나를 업데이트한다. 구현 관리부는 스토리 계획부에 의해 생성된 스토리(시나리오)를 3D 그래픽화 등을 통해 가상 공간에 실제로 구현함으로써 유저가 장치(디스플레이 장치, 스피커 등)를 통해 체험할 수 있도록 한다. 예상 스토리 시 점과 실제 구현 시점은 다를 수 있고, 예상된 스토리대로 실제 구현은 불가능할 수 있으므로 이러한 점을 구현 관리부는 계속적으로 객체 정보 테이블 및 객체 상태 테이블 중 적어도 하나에 업데이트한다. 실시예에 따 라 관리부는 스토리 테이블에도 업데이트할 수 있으며, 이는 데이터베이스를 당업자가 어떠한 방식으로 구 축하느냐에 따라 달라질 수 있다. 도 2는 본 발명의 다른 실시예에 따른 스토리 생성 장치를 설명하기 위한 도면이다. 도 2의 실시예에 따른 스토리 생성 장치(10b)는 도 1의 실시예와 마찬가지로 데이터베이스, 스토리 계획부 , 구현 관리부를 포함할 수 있으며, 상호작용 관리부, 드라마 관리부, 및 디스코스 계획부 를 선택적으로 더 포함할 수 있다. 데이터베이스, 스토리 계획부, 구현 관리부의 도 1의 실시예 기능과 중복되는 기능에 대해서는 다시 설명하지 않는다. 다만, 데이터베이스, 스토리 계획부, 구현 관리부는 본 실시예에서 상호 작용 관리부, 드라마 관리부, 및 디스코스 계획부와 상호작용하기 위한 기능을 더 포함할 수 있 으며, 구체적인 예에 대해서는 도 3 이하를 참조하여 설명한다. 상호작용 관리부(interaction manager)는 유저(user)의 행동에 따라 객체 정보 테이블 및 객체 상태 테이 블 중 적어도 하나의 레코드를 변경시킬 수 있다. 예를 들어, 반지라는 객체가 스토리상 가상 인물의 소유였는 데, 유저가 반지를 몰래 집어가는 경우, 스토리상 가상 인물이 취득불가능한 상태로 객체 상태 테이블의 레코드 가 변경될 수 있다. 드라마 관리부(drama manager)는 계획 실패 메시지를 검출한 경우, 객체 정보 테이블 및 객체 상태 테이블 중 적어도 하나에 대한 레코드를 업데이트 또는 신규 생성할 수 있다. 예를 들어, 스토리 계획부가 스토리 생성에 실패하여 계획 실패 메시지를 발생시키면, 드라마 관리부는 적절한 또는 랜덤화된 소품이나 인물을 변경 또는 추가하는 방식으로, 객체 정보 테이블 및 객체 상태 테이블 중 적어도 하나에 대한 레코드를 업데이 트 또는 신규 생성함으로써 스토리 계획부의 스토리 재생성에 도움을 줄 수 있다. 디스코스 계획부(discourse planner)는 스토리 테이블에 기록된 복수의 레코드를 특정 기준에 따라 선택 및 재배열할 수 있다. 이에 대해서는 도 8을 참조하여 더 상세히 설명한다. 이하 도 3 내지 도 8에서 도시되는 데이터 구조는 한 실시예에 따른 것이며, 각 데이터를 재배치하거나 추가하 거나 삭제하는 것은 당업자의 선택에 따를 수 있다. 도 3은 본 발명의 한 실시예에 따른 스토리 계획부가 초기 스토리를 생성하는 과정을 설명하기 위한 도면이다. 도 3을 참조하면, 데이터베이스는 스토리 테이블, 객체 상태 테이블, 및 객체 정보 테이블 (110a, 110b, 110c)을 포함한다. 객체 정보 테이블(110a)은 가상 인물인 톰(Tom)과 카렌(Karen)에 대한 정보(성별, 역할, 이름, 나이, 외모, 성 격)를 레코드로 포함하고 있다. 객체 정보 테이블(110b)은 가상 소품인 반지(ring)에 대한 정보(이름, 소유자, 취득가능여부, 식용가능여부)를 레코드로 포함하고 있다. 객체 정보 테이블(110c)은 배경 소품인 벤치, 집, 박 스에 대한 정보(x축 좌표, y축 좌표, 폭, 높이)를 레코드로 포함하고 있다. 객체 상태 테이블은 2 개의 파라미터(param1, param2)에 대한 관계(predicate) 정보를 포함하고 있다. 예 를 들어, 톰이 벤치에 있음, 카렌이 벤치에 있음, 링이 박스에 있음, 톰이 카렌과 약혼함, 톰이 카렌에게 프로 포즈함 등이 있을 수 있다. 또한 각 정보는 타입(type)을 가질 수 있는데, 초기 상태(init)인지 목표 상태 (goal)인지 구별될 수 없는 상태인지 등을 타입으로 가질 수 있다. 스토리 테이블은 2 개의 파라미터(param1, param2) 사이에 일어나는 단위 액션(ACTION)을 정보로 포함할 수 있다. 예를 들어, 톰이 박스로 걸어감, 톰이 링을 집어듦, 톰이 카렌에게 달려감, 톰이 카렌에게 프로포즈함 등이 있을 수 있다. 또한 각 단위 액션은 구현 관리부에 의해 구현되었는 지(executed) 및 실제 구현 시각 (time)으로 업데이트될 수도 있다. 이에 대해서는 도 4를 참조한다. 스토리 계획부는 객체 상태 테이블 및 객체 정보 테이블(110a, 110b, 110c)을 참조하여 초기 상태 (init)부터 목표 상태(goal)에 도달하도록 복수의 단위 액션으로 연결시켜 구성함으로써 초기 스토리를 생성할 수 있다. 초기 상태 및 목표 상태는 객체 상태 테이블에 각각 적어도 한 개 이상 포함될 수 있으며, 스토 리 계획부는 적절한 또는 랜덤화하여 초기 상태 및 목표 상태를 선택할 수 있다. 스토리 계획부의 적 절한 초기 상태 및 목표 상태 선택을 위한 인공지능 알고리즘은 기존의 알고리즘을 채택하여 이용할 수 있다. 도 4는 본 발명의 한 실시예에 따른 구현 관리부가 초기 스토리를 가상 세계에 구현하는 과정을 설명하기 위한 도면이다. 도 4를 참조하면, 구현 관리부가 스토리 테이블을 참조(1. SELECT)하여 구현(2. WALK)하고, 구현 결과를 스토리 테이블 및 객체 상태 테이블에 업데이트(3. UPDATE, 4. UPDATE)하고 있다. 도 4의 경우에는 톰이 박스로 걷는다라는 단위 액션(WALK)이 가상 공간에서 성공적으로 수행되었으며, 스토리 테이블의 예상 구현 시각이 실제 구현 시각으로 업데이트되고, 객체 상태 테이블에서 톰의 위치(상태)가 박스로 업데이트되고, 객체 상태 테이블에서 톰이 박스에 있는 실제 구현 시각이 기록되었다. 도 5는 본 발명의 한 실시예에 따른 상호작용 관리부의 동작에 따라 구현 관리부가 구현 실패하는 경우를 설명 하기 위한 도면이다. 도 5의 경우는 도 4의 경우와 달리, 유저가 가상 공간에 개입하여 레코드를 변경시킴으로써 스토리 테이블(13 0)의 초기 스토리대로 가상 공간에 구현이 불가능해진 경우이다. 구현 관리부는 제1 단위 액션의 구현에 실패하는 경우 스토리 테이블에 제1 단위 액션에 대한 구현 실패를 기록하고, 구현 실패 메시지를 발생시킬 수 있다. 먼저, 구현 관리부는 스토리 테이블을 참조하여 다음 단계 단위 액션(PICK-UP)을 가상 공간에 구현하 고자 한다. 즉, 톰이 반지를 집어 듦을 구현하고자 한다. 하지만, 유저가 반지를 훔쳐가고, 상호작용 관리부는 이러한 상황을 객체 정보 테이블(110a, 110b, 110c) 및 객체 상태 테이블 중 적어도 하나에 업데이트한다. 상호작용 관리부는 객체 상태 테이블에서 링이 박스에 있다는 상태 레코드를 삭제한다(4. DELETE). 구현 관리부는 반지가 없어졌으므로 톰이 반지를 집어 듦에 대한 단위 액션의 구현을 실패하고(5.PICK-UP Failed), 구현 실패 결과를 스토리 테이블에 업데이트(6. UPDATE)한다. 구현 관리부는 구현 실패 메 시지(actionfailed)를 발생시키고 이를 객체 상태 테이블에 기록(7. INSERT)할 수 있다. 도 6은 스토리 계획부가 초기 스토리를 대체할 제1 신규 스토리를 생성하는 과정을 설명하기 위한 도면이다. 도 5에 이어서, 스토리 계획부는 구현 실패 메시지(actionfailed)를 검출한 경우, 객체 정보 테이블(110a, 110b, 110c) 및 객체 상태 테이블을 참조하여 제1 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 제1 단위 액션 및 그 이후의 단위 액션을 대체시킬 수 있다. 예를 들어, 스토리 계획부는 객체 상태 테이블로부터 구현 실패 메시지(actionfailed)를 검출하고, 객체 상태 테이블 및 객체 정보 테이블(110a, 110b, 110c)을 참조하여 제1 신규 스토리에 대한 복수의 단 위 액션(RUN, SING-SERENADE, PROPOSE)를 생성하고, 구현 실패된 단위 액션 및 그 이후의 단위 액션(도 5의 PICK-UP, RUN, PROPSE)을 대체시킬 수 있다. 다음으로, 구현 관리부는, 스토리 테이블로부터 제1 신규 스토리에 대한 복수의 단위 액션을 참조하 고(7. SELECT), 이를 구현할 수 있다(8. RUN). 구현 관리부는 제1 신규 스토리에 대한 복수의 단위 액션의 구현에 성공한 경우, 구현 성공 여부, 구현 시각, 현재 상태 정보 등을 스토리 테이블 및 객체 상태 테이 블에 업데이트할 수 있다. 도 6의 시점에서는 톰이 벤치에 달려가는 단위 액션(RUN)이 성공적으로 구현되 었고, 따라서 톰이 벤치에 있다는 상태 레코드가 객체 상태 테이블에 업데이트되었다. 도 7은 스토리 계획부가 제1 신규 스토리를 생성하는데 실패하는 경우, 본 발명의 한 실시예에 따른 드라마 관 리부의 동작 과정 및 스토리 계획부의 제2 신규 스토리 생성 과정을 설명하기 위한 도면이다. 스토리 계획부는, 도 6의 경우와 대조적으로, 제1 신규 스토리에 대한 복수의 단위 액션을 생성 실패한 경 우 계획 실패 메시지(noplan)를 발생시킬 수 있다. 드라마 관리부는 계획 실패 메시지(noplan)를 검출한 경우, 객체 정보 테이블(110a, 110b, 110c) 및 객체 상태 테이블 중 적어도 하나에 대한 레코드를 업데이트 또는 신규 생성할 수 있다. 이러한 드라마 관리부의 동작 이후에, 객체 정보 테이블(110a, 110b, 110c) 및 객체 상태 테이블을 참조하여 제2 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 제1 단위 액션 및 그 이후의 단위 액션을 대체시킬 수 있다. 예를 들어, 스토리 계획부는, 도 5의 경우와 마찬가지로, 객체 상태 테이블로부터 구현 실패 메시지 (actionfailed)를 검출하고, 객체 상태 테이블 및 객체 정보 테이블(110a, 110b, 110c)을 참조하여 제1 신규 스토리에 대한 복수의 단위 액션을 생성하도록 시도한다. 하지만 이러한 시도가 실패한 경우 스토리 계획 부는 계획 실패 메시지(noplan)를 발생시키고, 이를 객체 상태 테이블에 기록한다(5. INSERT). 드라마 관리부는 객체 상태 테이블을 모니터링하던 중 계획 실패 메시지(noplan)를 검출하는 경우, 새로운 객체(도움을 주는 사람, 악당, 소품, 액션) 등을 신규 생성할 수 있다. 도 7의 경우에는 드라마 관리부 는 객체 정보 테이블(110b)에 톰의 소유인 목걸이(necklace)를 새로 생성하였고(9. INSERT), 이러한 상태 를 객체 상태 테이블에 기록하였다. 스토리 계획부는 제2 신규 스토리 생성을 계속해서 시도하던 중, 드라마 관리부에 의해 업데이트된 목걸이란 개체를 포함하는 제2 신규 스토리 생성에 성공할 수 있다. 이러한 경우, 스토리 계획부는 제1 단 위 액션(PICK-UP ring) 및 그 이후의 단위 액션을 삭제하고(10. DELETE), 제2 신규 스토리에 대한 복수의 단위 액션(PICK-UP necklace, RUN, PROPOSE)을 생성하여 스토리 테이블에 기록할 수 있다(11. INSERT). 다음으로, 구현 관리부는, 본래 기능과 같이, 제2 신규 스토리의 단위 액션(PICK-UP necklace)을 참조(12. SELECT) 및 구현한다(13. PICK-UP). 구현 관리부는 제2 신규 스토리에 대한 복수의 단위 액션의 구현에 성 공한 경우, 구현 성공 여부, 구현 시각, 현재 상태 정보 등을 스토리 테이블 및 객체 상태 테이블에 업데이트할 수 있다. 도 7의 시점에서는 톰이 목걸이를 집어 듦에 대한 단위 액션(PICK-UP necklace)이 성공적 으로 구현되었고, 따라서 톰이 목걸이를 갖고 있다는 레코드가 객체 상태 테이블에 업데이트되었다. 도 3 내지 7을 참조했을 때, 본 실시예의 스토리 생성 장치(10a, 10b)는 유저의 개입 여부와 무관하게 어떠한 경우에도 스토리를 생성시킬 수 있게 되는 장점이 있다. 또한 각 모듈간 통신 수단의 매개로 데이터베이스(10 0)를 이용함으로써, 3 개 이상의 모듈이 통신하는 경우에도 데이터 어긋남 및 누락이 없도록 하여, 개연성있는 스토리가 생성가능한 점에 장점이 있다. 도 8은 본 발명의 한 실시예에 따른 디스코스 계획부를 설명하기 위한 도면이다. 디스코스 계획부는 스토리 테이블(130a)에 기록된 복수의 레코드를 특정 기준에 따라 선택 및 재배열할 수 있다. 예를 들어, 디스코스 생성부는 스토리의 마지막 단위 액션(PROPOSE)이 성공적으로 구현된 경우 이를 감지 하여 동작할 수 있다. 디스코스 생성부는 스토리에 관계된 모든 단위 액션(WALK, PICK-UP, RUN, PROPOS E)을 참조하여 특정 기준에 따라 선택 및 재배열할 수 있다. 한 실시예에 따르면, 특정 기준이란 특정 인물의 시점일 수 있으며, 이러한 경우 디스코스 생성부는 특정 인물이 개입되지 않은 단위 액션을 제거함으로써 전지적 작가 시점이었던 스토리의 시점을 특정 인물의 시점으 로 전환할 수 있다. 다른 실시예에 따르면, 특정 기준이란 독자에게 놀라움을 주기 위한 시간 구성의 변경일 수 있다. 즉, 반드시 시간 순서로만 단위 액션을 놓는 것이 아니라, 특정 단위 액션을 나중에 보여줌으로써 독자에게 스토리에 대한 완전한 이해, 또는 반전에 대한 놀라움을 부여하여 즐거움을 줄 수 있다. 도 8의 경우, 톰이 카렌에게 프로포즈한 단위 액션을 먼저 보여주고, 톰이 목걸이를 집어든 단위 액션을 나중에 보여줌으로써 독자에게 스토리에 대한 완전한 이해를 시켜줄 수 있다. 이는 결말을 먼저 보여주고, 그 결말에 이르기까지 과정을 이후에 보여주는 디스코싱 방법과 유사하다.디스코스 생성부는 이렇게 디스코싱된 스토리를 스토리 테이블(130b)에 업데이트할 수 있다(4. UPDATE). 도 9는 본 발명의 한 실시예에 따른 스토리 생성 방법을 설명하기 위한 도면이다. 본 발명의 한 실시예에 따른 스토리 생성 방법은 매체에 프로그램으로서 기록될 수도 있다. 기록매체는 컴퓨터 시스템에 의하여 읽혀질 수 있는 데이터 또는 프로그램이 저장될 수 있는 모든 종류의 기록장치를 포함한다. 컴 퓨터가 읽을 수 있는 기록매체의 예로는 ROM, RAM, CD-ROM, 자기 테이프, 플로피디스크, 광데이터 저장장치, 하 드디스크, 외장하드디스크, SSD, USB 저장 장치, DVD, 블루레이 디스크 등이 있다. 또한 컴퓨터가 읽을 수 있는 기록매체는 복수 장치의 조합일 수도 있으며, 네트워크로 연결된 컴퓨터 시스템에 분산되어 있을 수도 있다. 이 러한 기록매체는 비일시적인 컴퓨터로 읽을 수 있는 기록매체(non-transitory computer readable medium)일 수 있다. 비일시적인 컴퓨터로 읽을 수 있는 기록매체란 레지스터, 캐쉬, 메모리 등과 같이 짧은 순간 동안 데이터 또는 프로그램을 저장하는 매체가 아니라 반영구적으로 데이터 또는 프로그램을 저장하며, 컴퓨터에 의해 판독 가능한 매체를 의미한다. 먼저, 데이터베이스에 포함된 복수의 객체의 정보를 레코드로 갖는 객체 정보 테이블 및 가상 공간에서 복수의 객체에 대한 상태를 레코드로 갖는 객체 상태 테이블을 참조하여, 초기 스토리에 대한 복수의 단위 액션을 생성 하여 데이터베이스에 포함된 스토리 테이블에 레코드로 기록하는 초기 스토리 계획 단계가 수행될 수 있다 (S100). 다음으로, 스토리 테이블을 참조하여 복수의 단위 액션을 가상 공간에 구현하고, 구현 결과에 따라 객체 정보 테이블 및 상기 객체 상태 테이블 중 적어도 하나를 업데이트하는 구현 관리 단계를 포함할 수 있다(S200). 이러한 과정에 대해서는 도 3 및 4를 참조한다. 한 실시예에 따르면, 유저의 행동에 따라 객체 정보 테이블 및 객체 상태 테이블 중 적어도 하나의 레코드를 변 경시키는 상호작용 관리 단계 및 제1 단위 액션의 구현에 실패하는 경우 스토리 테이블에 제1 단위 액션에 대한 구현 실패를 기록하고, 구현 실패 메시지를 발생시키는 단계를 더 포함할 수 있다. 이에 대해서는 도 5를 참조한다. 한 실시예에 따르면, 구현 실패 메시지를 검출한 경우, 객체 정보 테이블 및 객체 상태 테이블을 참조하여 제1 신규 스토리에 대한 복수의 단위 액션을 생성함으로써, 제1 단위 액션 및 그 이후의 단위 액션을 대체시키는 단 계를 더 포함할 수 있다. 이에 대해서는 도 6을 참조한다. 한 실시예에 따르면, 제1 신규 스토리에 대한 복수의 단위 액션을 생성 실패한 경우 계획 실패 메시지를 발생시 키는 단계 및 계획 실패 메시지를 검출한 경우, 객체 정보 테이블 및 객체 상태 테이블 중 적어도 하나에 대한 레코드를 업데이트 또는 신규 생성하는 드라마 관리 단계를 더 포함할 수 있다. 이때, 드라마 관리 단계 이후에, 객체 정보 테이블 및 객체 상태 테이블을 참조하여 제2 신규 스토리에 대한 복수의 단위 액션을 생성함 으로써, 제1 단위 액션 및 그 이후의 단위 액션을 대체시키는 단계를 더 포함할 수 있다. 이에 대해서는 도 7을 참조한다. 한 실시예에 따르면, 스토리 테이블에 기록된 복수의 레코드를 특정 기준에 따라 선택 및 재배열하는 디스코싱 단계를 더 포함할 수 있다. 이에 대해서는 도 8을 참조한다. 지금까지 참조한 도면과 기재된 발명의 상세한 설명은 단지 본 발명의 예시적인 것으로서, 이는 단지 본 발명을 설명하기 위한 목적에서 사용된 것이지 의미 한정이나 특허청구범위에 기재된 본 발명의 범위를 제한하기 위하 여 사용된 것은 아니다. 그러므로 본 기술 분야의 통상의 지식을 가진 자라면 이로부터 다양한 변형 및 균등한 타 실시예가 가능하다는 점을 이해할 것이다. 따라서, 본 발명의 진정한 기술적 보호 범위는 첨부된 특허청구범 위의 기술적 사상에 의해 정해져야 할 것이다."}
{"patent_id": "10-2017-0030476", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 한 실시예에 따른 스토리 생성 장치를 설명하기 위한 도면이다. 도 2는 본 발명의 다른 실시예에 따른 스토리 생성 장치를 설명하기 위한 도면이다. 도 3은 본 발명의 한 실시예에 따른 스토리 계획부가 초기 스토리를 생성하는 과정을 설명하기 위한 도면이다. 도 4는 본 발명의 한 실시예에 따른 구현 관리부가 초기 스토리를 가상 세계에 구현하는 과정을 설명하기 위한 도면이다. 도 5는 본 발명의 한 실시예에 따른 상호작용 관리부의 동작에 따라 구현 관리부가 구현 실패하는 경우를 설명 하기 위한 도면이다. 도 6은 스토리 계획부가 초기 스토리를 대체할 제1 신규 스토리를 생성하는 과정을 설명하기 위한 도면이다. 도 7은 스토리 계획부가 제1 신규 스토리를 생성하는데 실패하는 경우, 본 발명의 한 실시예에 따른 드라마 관 리부의 동작 과정 및 스토리 계획부의 제2 신규 스토리 생성 과정을 설명하기 위한 도면이다. 도 8은 본 발명의 한 실시예에 따른 디스코스 계획부를 설명하기 위한 도면이다. 도 9는 본 발명의 한 실시예에 따른 스토리 생성 방법을 설명하기 위한 도면이다."}
