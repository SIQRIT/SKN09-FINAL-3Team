{"patent_id": "10-2021-0004097", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0101967", "출원번호": "10-2021-0004097", "발명의 명칭": "전자 장치 및 전자 장치의 메모리 관리 방법", "출원인": "삼성전자주식회사", "발명자": "정관희"}}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,하나 이상의 프로세서; 및상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리를 포함하고,상기 프로세서는,상기 메모리의 저장 공간에 대한 정보 및 상기 프로세서에 의해 실행되는 복수의 객체들의 사용 이력을 모니터링하고,상기 정보 또는 상기 사용 이력 중에서 적어도 하나 또는 둘에 기초하여 상기 복수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정하고,상기 타겟 객체의 컴파일 방식을 변경함으로써 상기 메모리의 여유 저장 공간을 증가시키는,전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 정보는,상기 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율 및 상기 메모리의 여유 저장 공간의 크기를 포함하고,상기 사용 이력은,상기 복수의 객체들이 사용되지 않은 기간을 포함하는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 프로세서는,상기 메모리의 여유 저장 공간이 제1 임계값 보다 작은 경우, 컴파일 방식이 변경되지 않은 객체들의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시키는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 프로세서는,상기 메모리의 여유 저장 공간에 기초하여 상기 복수의 객체들 중에서 제1 기간 동안 사용되지 않은 객체를 제1공개특허 10-2022-0101967-3-타겟 객체로 결정하고,상기 제1 기간 보다 짧은 제2 기간 동안 사용되지 않은 객체를 제2 타겟 객체로 결정하는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 프로세서는,상기 메모리의 여유 저장 공간에 기초하여 상기 복수의 객체들 중에서 디스플레이 상에 아이콘(icon)이 존재하지 않는 객체를 상기 타겟 객체로 결정하는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4항에 있어서,상기 프로세서는,상기 메모리의 여유 저장 공간에 기초하여, 상기 복수의 객체들 전부를 상기 타겟 객체로 결정하는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 프로세서는,상기 메모리의 저장 공간에 대한 상기 여유 저장 공간의 비율이 제2 임계값 보다 작은 경우, 상기 복수의 객체들 전부를 상기 타겟 객체로 결정하는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 프로세서는,상기 타겟 객체의 컴파일 필터(compile-filter)를 하향 조정(downgrade)하고,하향 조정된 컴파일 필터에 기초하여 상기 타겟 객체를 재컴파일(re-compile)함으로써 상기 여유 저장 공간을증가시키는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,상기 프로세서는,상기 전자 장치가 사용 중인지 여부를 판단하고,공개특허 10-2022-0101967-4-상기 전자 장치가 사용 중이지 않을 경우, 상기 타겟 객체의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시키는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 타겟 객체의 컴파일 방식을 변경하는 동작은 백그라운드(background)에서 수행되는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "전자 장치에 있어서,하나 이상의 프로세서; 및상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리를 포함하고,상기 프로세서는,상기 메모리의 저장 공간에 대한 정보를 모니터링하고,상기 프로세서에 의해 실행되는 복수의 객체들의 사용 이력에 기초하여 상기 복수의 객체들의 적어도 일부를 포함하는 객체 리스트를 생성하고,상기 정보에 기초하여 상기 객체 리스트에 포함된 적어도 하나의 객체의 컴파일 방식을 변경함으로써 상기 메모리의 여유 저장 공간을 증가시키는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 정보는,메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율 및 상기 메모리의 여유 저장 공간의 크기를 포함하고,상기 사용 이력은,상기 복수의 객체들이 사용되지 않은 기간을 포함하는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서,상기 프로세서는,상기 메모리의 여유 저장 공간이 제1 임계값 보다 작은 경우, 상기 컴파일 방식이 변경되지 않은 객체들의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시키는공개특허 10-2022-0101967-5-전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제11항에 있어서,상기 프로세서는,상기 복수의 객체들 중에서 제1 기간 동안 사용되지 않은 객체를 포함하도록 제1 객체 리스트를 생성하고,상기 복수의 객체들 중에서 상기 제1 기간 보다 짧은 제2 기간 동안 사용되지 않은 객체를 포함하도록 제2 객체리스트를 생성하는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서,상기 프로세서는,상기 복수의 객체들 중에서 디스플레이 상에 아이콘이 존재하지 않는 객체를 포함하도록 제3 객체 리스트를 생성하는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서,상기 프로세서는,상기 메모리의 전체 저장 공간에 대한 상기 여유 저장 공간의 비율에 기초하여 상기 컴파일 방식을 변경할 객체리스트를 결정하고,결정된 객체 리스트에 포함된 객체의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시키는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서,상기 프로세서는,상기 비율이 제2 임계값 보다 작은 경우, 상기 복수의 객체들 전부의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시키는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제11항에 있어서,상기 프로세서는,상기 적어도 하나의 객체의 컴파일 필터를 하향 조정하고,공개특허 10-2022-0101967-6-하향 조정된 컴파일 필터에 기초하여 상기 적어도 하나의 객체를 재컴파일함으로써 상기 여유 저장 공간을 증가시키는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제16항에 있어서,상기 프로세서는,상기 전자 장치가 사용 중인지 여부를 판단하고,상기 전자 장치가 사용 중이지 않을 경우, 상기 적어도 하나의 객체의 컴파일 방식을 변경함으로써 상기 여유저장 공간을 증가시키는전자 장치."}
{"patent_id": "10-2021-0004097", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "전자 장치의 메모리를 관리하는 방법에 있어서,상기 메모리의 저장 공간에 대한 정보 및 상기 전자 장치에 의해 실행되는 복수의 객체들의 사용 이력을 모니터링하는 동작;상기 정보 및 상기 사용 이력에 기초하여 상기 복수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정하는 동작; 및상기 타겟 객체의 컴파일 방식을 변경함으로써 상기 메모리의 여유 저장 공간을 증가시키는 동작을 포함하는 메모리 관리 방법."}
{"patent_id": "10-2021-0004097", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예에 따르면, 전자 장치는, 하나 이상의 프로세서와, 상기 프로세서에 의해 실행 가능한 인스트럭션 을 저장하는 메모리를 포함하고, 상기 프로세서는, 상기 메모리의 저장 공간에 대한 정보 및 상기 프로세서에 의 해 실행되는 복수의 객체들의 사용 이력을 모니터링하고, 상기 정보 또는 상기 사용 이력 중에서 적어도 하나 또 는 둘에 기초하여 상기 복수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정하고, 상기 타겟 객체의 컴 파일 방식을 변경함으로써 상기 메모리의 여유 저장 공간을 증가시킬 수 있다. 다른 실시예가 가능하다."}
{"patent_id": "10-2021-0004097", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래 실시예들은 전자 장치 및 전자 장치의 메모리 관리 방법에 관한 것이다."}
{"patent_id": "10-2021-0004097", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "단말의 저장 공간(storage)이 부족한 상태에서는 저장 공간의 상태에 따라 단말의 전반적인 성능이 떨어질 수 있으므로 저장 공간의 상태에 따라 선제적으로 저장 공간에 대한 여유 저장 공간의 확보가 필요하고, 여유 저장 공간의 확보와 함께 단말의 성능 저하를 최소화할 수 있어야 한다. 단말의 저장 상태를 모니터링하면서 실행되는 객체에 따라 객체의 컴파일 방식을 변경하여 저장 공간을 확보하 고, 성능 저하를 최소화할 수 있는 방법이 요구된다."}
{"patent_id": "10-2021-0004097", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "런타임(runtime)시 로드되는 패키지의 컴파일 아티팩트 파일들은 JIT(Just-In-Time)과 AOT(Ahead-Of-Time)가 혼합된 방식으로 생성된다. 이 때, 컴파일의 속성 중 하나인 컴파일 필터의 종류에 따라 컴파일되는 패키지의 런타임 성능 및 컴파일 아티팩트 파일의 크기가 상이할 수 있다. 컴파일 아티팩트 파일에 따라 패키지의 성능이 달라질 수 있으나, 단말의 저장 공간이 부족한 경우에도 단말의 전반적인 성능이 저하될 수 있다. 단말의 저장 공간의 상태에 따라 선제적으로 여유 저장 공간을 확보할 필요가 있다."}
{"patent_id": "10-2021-0004097", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시예에 따른 전자 장치는, 하나 이상의 프로세서와, 상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리를 포함하고, 상기 프로세서는, 상기 메모리의 저장 공간에 대한 정보 및 상기 프로세서에 의해 실행되는 복수의 객체들의 사용 이력을 모니터링하고, 상기 정보 또는 상기 사용 이력 중에서 적어도 하나 또는 둘에 기초하여 상기 복수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정하고, 상기 타겟 객체의 컴파 일 방식을 변경함으로써 상기 메모리의 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따른 전자 장치는, 하나 이상의 프로세서와, 상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리를 포함하고, 상기 프로세서는, 상기 메모리의 저장 공간에 대한 정보를 모니터링하고, 상기 프 로세서에 의해 실행되는 복수의 객체들의 사용 이력에 기초하여 상기 복수의 객체들의 적어도 일부를 포함하는 객체 리스트를 생성하고, 상기 정보에 기초하여 상기 객체 리스트에 포함된 적어도 하나의 객체의 컴파일 방식 을 변경함으로써 상기 메모리의 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따른 전자 장치의 메모리를 관리하는 방법에 있어서, 메모리 관리 방법은, 상기 메모리의 저장 공간에 대한 정보 및 상기 전자 장치에 의해 실행되는 복수의 객체들의 사용 이력을 모니터링하는 동작과, 상기 정보 및 상기 사용 이력에 기초하여 상기 복수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정하는 동 작과, 상기 타겟 객체의 컴파일 방식을 변경함으로써 상기 메모리의 여유 저장 공간을 증가시키는 동작을 포함 할 수 있다."}
{"patent_id": "10-2021-0004097", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "다양한 실시예에 따르면, 전자 장치는 메모리의 저장 공간의 상태에 따라 객체의 중요도를 판단하고, 단계별로 객체의 컴파일 방식(compile method)을 변경함으로써 전자 장치의 성능을 유지하면서 메모리의 여유 저장 공간 (free storage space)을 확보할 수 있다. 다양한 실시예에 따르면, 전자 장치는 저장 공간이 부족한 상황에서 사용자가 임의로 축소할 수 없는 컴파일 아 티팩트 파일(compile artifact file)의 크기를 줄임으로써 여유 저장 공간을 확보할 수 있다. 다양한 실시예에 따르면, 전자 장치는 저장 공간의 상태에 따라 단계적으로 컴파일 방식을 변경함으로써 사용자 가 슬러기쉬(sluggish)를 체감하기 전에 선제적으로 여유 저장 공간을 확보함으로써 사용자 경험을 향상시킬 수 있다."}
{"patent_id": "10-2021-0004097", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 다양한 실시예에 따른 전자 장치의 메모리 관리 동작을 설명하기 위한 도면이다. 도 2를 참조하면, 다양한 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)는 하나 이상의 프로세서 및 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리를 포함할 수 있다. 다양한 실시예에 따르면, 메모리의 저장 공간 부족한 상황이 되면 저장 매체(예: 메모리)의 스펙 (spec)에 따라 I/O 처리가 늦어 슬러기쉬(sluggishi)가 발생할 수 있다. 이 때, 프로세서는 전자 장치 의 전반적인 성능을 정상화시키기 위해서 메모리의 여유 저장 공간을 확보할 수 있다. 프로세서 는 사용자에게 드러나지 않는 파일에 대하여 컴파일 방식을 변경하고 재컴파일을 수행함으로써 여유 저장 공간을 증가시킬 수 있다. 예를 들어, 프로세서는 객체의 컴파일 방식을 변경함으로써 컴파일 아티팩트파일의 크기를 감소시키고, 여유 저장 공간을 증가시킬 수 있다. 이를 통해, 프로세서는 전자 장치 의 성능 열화를 최소화하면서 메모리의 여유 저장 공간을 효율적으로 확보할 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리로부터 저장 공간에 대한 정보를 수신하고, 프로세서 에 의해 실행되는 복수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정할 수 있다. 객체는 프로 세서에 의해 실행되는 서비스, 패키지 또는 프로그램(예: 도 1의 프로그램)을 포함할 수 있다. 예를 들어, 객체는 어플리케이션(예: 도 1의 어플리케이션) 및 어플리케이션의 패키지를 포함할 수 있다. 어플 리케이션의 패키지는 실행 파일을 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는 타겟 객체의 컴파일 방식을 변경한 후, 재컴파일을 수행함으로써 재 컴파일된 파일을 생성할 수 있다. 프로세서는 재컴파일된 파일을 메모리로 전달함으로써 여유 저장 공간을 증가시킬 수 있다. 프로세서는 재컴파일된 파일을 메모리로 전달하고, 기존 방식으로 컴파일 된 파일을 업데이트함으로써 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 저장 공간에 대한 정보 및 프로세서에 의해 실행 되는 복수의 객체들의 사용 이력을 모니터링할 수 있다. 저장 공간에 대한 정보는 메모리의 전체 저장 공 간(storage space)에 대한 여유 저장 공간(free storage space)의 비율 및 메모리의 여유 저장 공간의 크 기를 포함할 수 있다. 복수의 객체들의 사용 이력은 복수의 객체들이 사용되지 않은 기간을 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는 저장 공간에 대한 정보 또는 복수의 객체들의 사용 이력 중에서 적어 도 하나 또는 둘에 기초하여 복수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정할 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 여유 저장 공간에 기초하여 복수의 객체들 중에서 제1 기간 동안 사용되지 않은 객체를 제1 타겟 객체로 결정할 수 있다. 프로세서는 제1 기간 보다 짧은 제2 기간 동안 사용되지 않은 객체를 제2 타겟 객체로 결정할 수 있다. 예를 들어, 제1 기간은 30일일 수 있고, 제 2 기간은 15일일 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 여유 저장 공간에 기초하여 복수의 객체들 중에서 디 스플레이 상에 아이콘(icon)이 존재하지 않는 객체를 타겟 객체로 결정할 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 여유 저장 공간에 기초하여 복수의 객체들 전부를 타 겟 객체로 결정할 수 있다. 프로세서는 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율이 비율 임계값(예: 도 5의 제2 임계값)보다 작은 경우, 복수의 객체들 전부를 타겟 객체로 결정할 수 있다. 프로 세서는 메모리의 저장 공간에 대한 여유 저장 공간의 비율이 비율 임계값보다 작은 경우, 복수의 객 체들 전부의 컴파일 방식을 변경함으로써 여유 저장 공간을 증가시킬 수 있다. 예를 들어, 비율 임계값은 2%일 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세서에 의해 실행되는 복수의 객체들의 사용 이력에 기초하 여 복수의 객체들의 적어도 일부를 포함하는 객체 리스트를 생성할 수 있다. 다양한 실시예에 따르면, 프로세서는 타겟 객체의 컴파일 방식을 변경함으로써 메모리의 여유 저장 공간을 증가시킬 수 있다. 프로세서는 메모리의 여유 저장 공간이 크기 임계값(예: 도 5의 제1 임계 값) 보다 작은 경우, 컴파일 방식이 변경되지 않은 객체들의 컴파일 방식을 변경함으로써 여유 저장 공간을 증 가시킬 수 있다. 크기 임계값은 전자 장치에서 미리 결정된 값일 수 있다. 예를 들어, 크기 임계값은 500 MB일 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 저장 공간에 대한 정보에 기초하여 객체 리스트에 포 함된 적어도 하나의 객체의 컴파일 방식을 변경함으로써 메모리의 여유 공간을 증가시킬 수 있다. 프로세 서는 복수의 객체들 중에서 제1 기간 동안 사용되지 않은 객체를 포함하도록 제1 객체 리스트를 생성할 수 있다. 프로세서는 복수의 객체들 중에서 제1 기간 보다 짧은 제2 기간 동안 사용되지 않은 객체를 포함하 도록 제2 객체 리스트를 생성할 수 있다. 다양한 실시예에 따르면, 프로세서는 복수의 객체들 중에서 디스플레이 상에 아이콘이 존재하지 않는 객체 를 포함하도록 제3 객체 리스트를 생성할 수 있다. 다양한 실시예에 따르면, 프로세서는 타겟 객체의 컴파일 필터를 하향 조정(downgrade)할 수 있다. 프로 세서는 하향 조정된 컴파일 필터에 기초하여 타겟 객체를 재컴파일(re-compile)함으로써 여유 저장 공간을 증가시킬 수 있다. 프로세서는 전자 장치의 상태를 고려하여 백그라운드에서 재컴파일을 수행하는AP(application processor) 코어를 특정함으로써 성능 열화를 최소화할 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율에 기초 하여 컴파일 방식을 변경할 객체 리스트를 결정할 수 있다. 프로세서는 결정된 객체 리스트에 포함된 객 체의 컴파일 방식을 변경함으로써 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치가 사용 중인지 여부를 판단하고, 전자 장치가 사용 중이지 않을 경우, 타겟 객체의 컴파일 방식을 변경함으로써 메모리의 여유 저장 공간을 증가시킬 수 있다. 타겟 객체의 컴파일 방식을 변경하는 동작은 백그라운드(background)에서 수행될 수 있다. 도 3 및 도 4는 다양한 실시예에 따른 메모리의 저장 공간을 모니터링하는 동작의 예들을 나타낸다. 도 3 및 도 4를 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 메모리(예: 도 1의 메모리)의 저장 공간에 대한 정보를 모니터링할 수 있다. 프로세서는 메모리의 저장 공간 부족 상태를 모니터링할 수 있다. 프로세서는 스토리지 서비스를 통해 메모리의 저장 공간에 대한 정보를 모니터링할 수 있다. 다양한 실시예에 따르면, 스토리지 서비스는 메모리의 모니터링을 통해 저장 공간 부족 상태를 감지 할 수 있다. 스토리지 서비스는 런타임에 메시지(예: 인텐트(intent))를 전송할 수 있다. 런타임 은 컴퓨터 과학에서 컴퓨터 프로그램이 실행되고 있는 동안의 동작을 의미할 수 있다. 런타임은 컴 퓨터 언어 안에 쓰인 프로그램을 관리하기 위해 특정한 컴파일러나 가상 머신이 사용하는 기본 코드의 라이브러 리 또는 프로그램을 가리키는 런타임 라이브러리를 포함할 수 있다. 예를 들어, 런타임은 안드로이드 런 타임(android runtime(ART)), JVM(java virtual machine) 또는 Dalvik VM(Dalvik virtual machine)를 포함할 수 있다. 다양한 실시예에 따르면, 런타임은 다양한 방식을 이용하여 컴파일을 수행할 수 있다. 런타임은 JIT(just-in-time), AOT(ahead-of-time) 또는 JIT와 AOT의 하이브리드(hybrid) 방식을 이용하여 컴파일을 수행 할 수 있다. 예를 들어, ART는 JIT 및 AOT 방식이 혼합된 dex2oat 도구를 통해 컴파일을 수행함으로써 런타임 시 로드되는 객체의 컴파일 아티팩트 파일을 생성할 수 있다. 다양한 실시예에 따르면, JIT 방식은 적절한 시점에 컴파일을 수행하는 방식을 의미할 수 있다. JIT 방식은 로 드된 클래스에 대해 인터프리터(interpreter) 방식으로 동작을 하면서 반복 수행을 감지할 경우, JIT 컴파일러 가 동작되어 실행 속도를 향상시킬 수 있다. JIT 방식은 네이티브 코드(native code)를 실행하는 시간이 매우 빠르고, 메모리의 캐시가 이루어지기 때문에 반복 호출시에 성능이 극대화될 수 있다. JIT 방식은 런타임 중에 네이티브 코드로 컴파일되기 때문에 설치 시간이 짧을 수 있다. 다양한 실시예에 따르면, AOT 방식은 객체를 설치하는 시점에 소스 코드를 네이티브 코드로 변환하여 저장하고, 객체를 실행 때, 네이티브 코드를 읽어 들이는 방식을 의미할 수 있다. AOT 방식은 설치 시에 코드를 변환하였 기 때문에 객체의 첫 실행시점에 코드를 변환하는 방식보다 객체가 처음 실행되는 시간을 감소시킴으로써 속도 를 개선시킬 수 있다. 다양한 실시예에 따르면, 프로세서는 JIT와 AOT의 하이브리드 방식을 이용하여 컴파일을 수행할 수 있다. 프로세서는 최초로 객체를 설치할 때에는 JIT 방식을 이용하여 설치 시간과 저장에 필요한 용량을 줄이고, 인터프리터를 통해 사용자 패턴에 따른 프로파일을 저장할 수 있다. 프로파일의 저장 후, 프로세서는 특 정한 조건이 부합될 때, 잡 스케줄러(job scheduler)에 의해 AOT 백그라운드 서비스 데몬이 시작되고, 백그라운 드에서 컴파일을 통해 컴파일된 코드(예: oat 파일)을 생성할 수 있다. 프로세서는 객체를 구동할 때 컴 파일된 ART 런타임에서 컴파일된 코드를 인터프리터를 통하지 않고 바로 사용할 수 있다. 다양한 실시예에 따르면, 프로세서는 저장 공간 부족 상태를 모니터링할 수 있다. 프로세서는 저장 공간 모니터링 서비스를 통해 메모리의 저장 공간을 모니터링할 수 있다. 저장 공간 모니터링 서비스는 저장 공간 부족 상태를 모니터링할 수 있다. 저장 공간 모니터링 서비스는 런타임 에 메시지(예: 인텐트)를 전송할 수 있다. 도 5는 다양한 실시예에 따른 전자 장치의 메모리 관리 동작의 흐름도이다. 도 5에서 설명하는 각 동작 (510~560)은 순차적으로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 동작 (510~560)의 순서가 변경될 수도 있으며, 적어도 두 동작들이 병렬적으로 수행될 수도 있다. 도 5를 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 메모리(예: 도 1의 메모리 )의 저장 공간에 대한 정보 및 프로세서에 의해 실행되는 복수의 객체들의 사용 이력을 모니터링 할 수 있다. 다양한 실시예에 따르면, 프로세서는 런타임 및 객체 관리자를 통해 객체에 대한 모니터링을 수 행할 수 있다. 런타임은 객체 관리자에게 객체 리스트를 요청할 수 있다. 객체 관리자는 복수 의 객체들을 모니터링함으로써 최적화가 필요한 객체의 리스트를 생성하고, 생성한 객체 리스트를 런타임 으로 전달할 수 있다. 다양한 실시예에 따르면, 객체 관리자는 복수의 객체들 중에서 제1 기간 동안 사용되지 않은 객체를 포함 하도록 제1 객체 리스트를 생성하고, 복수의 객체들 중에서 제1 기간 보다 짧은 제2 기간 동안 사용되지 않은 객체를 포함하도록 제2 객체 리스트를 생성할 수 있다. 예를 들어, 제1 기간은 30일일 수 있고, 제2 기간은 15 일일수 있다. 다양한 실시예에 따르면, 객체 관리자는 복수의 객체들 중에서 디스플레이 상에 아이콘이 존재하지 않는 객체를 포함하도록 제3 객체 리스트를 생성할 수 있다. 다양한 실시예에 다르면, 프로세서는 메모리의 저장 공간에 대한 정보를 모니터링할 수 있다. 프로 세서는 모니터링을 통해 저장 공간 부족 상태를 감지할 수 있다. 저장 공간 부족 상태가 감지된 경우, 프 로세서는 백그라운드 컴파일을 중지할 수 있다. 예를 들어, 프로세서는 백그라운드 dexopt(background dex optimization)를 중지할 수 있다. 프로세서는 메모리의 여유 저장 공간의 수준이 미리 결정된 수준까지 확보되기 전까지 백그라운드 dexopt를 중지할 수 있다. 다양한 실시예에 따르면, 백그라운드 dexopt는 전자 장치(예: 도 1의 전자 장치)가 사용되면서 생성된 프 로파일에 기반하여 apk 내에 존재하는 dex파일을 백그라운드에서 dex2oat 도구를 이용하여 컴파일하는 과정을 의미할 수 있다. 프로세서는 백그라운드 dexopt를 통해 컴파일을 수행함으로써 컴파일 아티팩트 파일을 재생성할 수 있다. 다양한 실시예에 따르면, 컴파일 아티팩트 파일은 .vdex, .odex, .oat 또는 .art 파일을 포함할 수 있다. .vdex 파일은 apk의 압축되지 않은 코드 및 추가 메타데이터를 포함할 수 있다. .odex 및/또는 .oat 파일은 apk에 정의된 메소드에 대한 AOT 컴파일된 코드를 포함할 수 있다. .art 파일은 apk의 .dex에 나열된 일부 문 자열 과 클래스의 ART 내부 표현을 포함할 수 있다. 예를 들어, 프로세서는 백그라운드 dexopt를 통해 .oat 파일 또는 .art파일을 재생성할 수 있다. 다양한 실시예에 따르면, 컴파일된 메소드(method) 또는 클래스(class)에 따라 객체의 성능이 상이할 수 있다. 백그라운드 dexopt는 잡 스케줄러에 의해 실행될 수 있다. 다양한 실시예에 따르면, 프로세서는 여유 저장 공간이 제1 임계값 이상인지 여부를 판단할 수 있다. 예를 들어, 프로세서는 여유 저장 공간이 500MB 이상인지 여부를 판단할 수 있다. 다양한 실시예에 따르면, 프로세서는 여유 저장 공간이 제1 임계값 이상인 경우, 객체 리스트의 객체의 컴 파일 방식을 변경할 수 있다. 프로세서는 전자 장치가 사용되지 않는 동안 백그라운드에서 객 체 리스트에 포함된 객체의 컴파일 방식을 변경할 수 있다. 다양한 실시예에 따르면, 프로세서는 여유 공간이 제1 임계값 이상인 경우, 생성된 객체 리스트에 기초하 여 단계적으로 객체의 컴파일 방식을 변경할 수 있다. 프로세서는 컴파일 방식을 변경할 타겟 객체의 컴 파일 필터(compile filter)를 하향 조정(downgrade)하고, 하향 조정된 컴파일 필터에 기초하여 타겟 객체를 재 컴파일함으로써 여유 저장 공간을 증가시킬 수 있다. 예를 들어, 프로세서는 컴파일 필터의 하향 조정과 재컴파일을 통해 하나의 객체에 대하여 100 내지 200 MB의 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 프로세서는 런타임(예: ART)에서 dex2oat 도구(tool)를 이용하여 dex 파일을 컴 파일할 수 있다. 프로세서는 컴파일 필터(또는, 컴파일 필터 옵션)를 변경함으로써 컴파일 방식을 변경할 수 있다. 컴파일 필터의 종류는 표 1과 같을 수 있다.표 1 컴파일 필터 설명 run-from-apk apk 내에 있는 dex 파일을 이용하여 객체 실행 extract apk 내에 있는 dex 파일을 압축만 해제하여 특정 경로에 복사 verify dex 코드 검증(code verification)만 수행 quicken dex code verification 수행 및 몇개의 dex 인스트럭션을 최적화함 speed-profile dex 코드 검증 및 프로파일 내 메소드를 AOT 컴파일함 speed dex 코드 검증 및 모든 메소드를 AOT 컴파일함 다양한 실시예에 따르면, 표 1의 컴파일 필터는 아래에 기재될수록 상향 조정된 컴파일 필터를 의미하고, 위에 기재될수록 하향 조정된 컴파일 필터를 의미할 수 있다. 즉, 컴파일 필터를 하향 조정한다는 것은 컴파일 필터 의 종류를 표 1에서 상대적으로 위쪽에 위치한 컴파일 필터로 변경하는 것을 의미할 수 있다. 다양한 실시예에 따르면, 컴파일 필터의 종류에 따라, dex2oat 도구를 통해 컴파일 되는 객체의 런타임 성능이 달라지고, 생성되는 컴파일 아티팩트 파일(예: .odex 파일 또는 .art 파일)의 크기가 달라질 수 있다. 컴파일 아티팩트 파일의 크기는 객체의 종류에 따라 상이할 수 있고, 0MB 내지 수백 MB의 범위를 가질 수 있다. 프로 세서는 컴파일 필터의 종류를 변경함으로써 메모리의 여유 저장 공간이 부족하여 발생하는 전자 장치 의 성능 저하를 방지할 수 있다. 다양한 실시예에 따르면, 프로세서는 객체의 중요도에 기초하여 객체 리스트를 생성하고, 메모리의 여유 저장 공간의 크기에 따라 단계적으로 컴파일 필터의 종류를 변경하여 여유 저장 공간을 확보하여 성능 저 하를 최소화할 수 있다. 다양한 실시예에 따르면, 프로세서는 컴파일 필터를 하향 조정함으로써 컴파일 방식을 변경할 수 있다. 프로세서는 컴파일 필터를 하향 조정하고, 재컴파일을 수행하여, 컴파일 아티팩트 파일을 재생성할 수 있 다. 재생성된 컴파일 아티팩트 파일은 재컴파일 전의 컴파일 아티팩트 파일에 비하여 작은 용량을 가지므로, 메모리의 여유 저장 공간은 증가될 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율에 따라 상이한 객체 리스트에 포함된 객체의 컴파일 방식을 변경할 수 있다. 객체 리스트에 포함된 객체의 컴파일 방 식의 변경은 전자 장치가 사용되지 않는 동안 백그라운드에서 수행될 수 있다. 다양한 실시예에 따르면, 메모리의 전제 저장 공간에 대한 여유 저장 공간의 비율이 제1 비율보다 작은 경 우, 프로세서는 제1 객체 리스트에 포함된 객체의 컴파일 방식을 변경할 수 있다. 예를 들어, 프로세서 는 전체 저장 공간에 대한 여유 저장 공간의 비율이 5%보다 작은 경우, 30일 이내에 사용되지 않은 객체의 컴파일 방식을 변경할 수 있다. 다양한 실시예에 따르면, 메모리의 전제 저장 공간에 대한 여유 저장 공간의 비율이 제2 비율보다 작은 경 우, 프로세서는 제3 객체 리스트에 포함된 객체의 컴파일 방식을 변경할 수 있다. 예를 들어, 프로세서 는 전체 저장 공간에 대한 여유 저장 공간의 비율이 4%보다 작은 경우, 아이콘이 없는 객체의 컴파일 방식 을 변경할 수 있다. 다양한 실시예에 따르면, 메모리의 전제 저장 공간에 대한 여유 저장 공간의 비율이 제3 비율보다 작은 경 우, 프로세서는 제2 객체 리스트에 포함된 객체의 컴파일 방식을 변경할 수 있다. 예를 들어, 프로세서 는 전체 저장 공간에 대한 여유 저장 공간의 비율이 3%보다 작은 경우, 15일 이내에 사용되지 않은 객체의 컴파일 방식을 변경할 수 있다. 다양한 실시예에 따르면, 메모리의 전제 저장 공간에 대한 여유 저장 공간의 비율이 제4 비율(예: 도 2의 제2 임계값)보다 작은 경우, 프로세서는 모든 객체의 컴파일 방식을 변경할 수 있다. 모든 객체는 제1 내 지 제3 객체 리스트에 포함되지 않은 객체를 포함할 수 있다. 예를 들어, 프로세서는 전체 저장 공간에 대한 여유 저장 공간의 비율이 2%보다 작은 경우, 모든 객체(또는, 제1 내지 제3 객체 리스트에 포함되지 않은 객체)의 컴파일 방식을 변경할 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 여유 저장 공간이 제1 임계값보다 작은 경우 백그라운 드에서 컴파일 방식이 변경되지 않은 객체의 컴파일 방식을 변경할 수 있다. 프로세서는 메모리의 여유 저장 공간이 제1 임계값 보다 작은 경우, 컴파일 방식이 변경되지 않은 객체들의 컴파일 방식을 변경함으로써 여유 저장 공간을 증가시킬 수 있다. 프로세서는 컴파일 방식이 변경되지 않은 객체의 컴파 일 방식을 변경하는 동작을 포어그라운드에서 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 여유 저장 공간의 상태에 따라 단계적으로 객체 리스 트의 객체들의 컴파일 방식을 변경함으로써, 전자 장치의 사용자가 별도의 조작을 하지 않고도 메모리 의 여유 공간을 확보할 수 있다. 프로세서는 사용 빈도가 높은 객체에 대하여 컴파일 방식의 하향 조정 시점을 미룸으로써 사용자가 자주 사용하는 개체에 대한 성능 저하를 방지하여 사용자 경험을 향상시킬 수 있다. 도 6은 다양한 실시예에 따른 전자 장치의 전자 장치 성능 향상 동작을 나타낸다. 도 6을 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 메모리(예: 도 1의 메 모리) 여유 저장 공간이 미리 결정된 값 이상에 도달할 경우에 컴파일 방식이 변경된 객체의 컴파일 방식 을 복원시킬 수 있다. 프로세서는 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율이 미리 결정된 값 이상에 도달할 경우에 컴파일 방식을 복원할 수 있다. 다양한 실시예에 따르면, 런타임은 메모리로부터 여유 저장 공간에 대한 정보를 수신할 수 있다. 런 타임은 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율이 미리 결정된 값 이상인지 여부를 판단할 수 있다. 예를 들어, 미리 결정된 값은 10 %일 수 있다. 다양한 실시예에 따르면, 프로세서는 전체 저장 공간에 대한 여유 저장 공간의 비율이 미리 결정된 값 이 상에 도달하면 객체의 컴파일 방식을 변경 또는 복원할 수 있다. 예를 들어, 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율이 10% 이상인 경우, 프로세서는 런타임을 통해 모든 객체의 컴파일 방식 을 변경(또는 복원)할 수 있다. 컴파일 방식의 복원은 전자 장치(예: 도 1의 전자 장치)가 사용되지 않는 동안 백그라운드에서 수행될 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율이 미리 결정된 값 이상에 도달하면 하향 조정된 컴파일 필터를 상향 조정하여 재컴파일할 수 있다. 표 2는 컴파일 필 터의 종류에 따른 컴파일 아티팩트 파일의 크기를 나타낼 수 있다. 표 2 컴파일 필터의 종류 파일 종류 크기(MB) speed profile total(.art) 122.43 total(.odex) 671.19 total(.vdex) 3094.10 합계 3887.71(약 3.8G) verify total(.odex) 72.34 total(.vdex) 2922.24 합계 2994.58(약 2.9G) 다양한 실시예에 따르면, 프로세서는 컴파일 필터의 종류를 verify에서 speed profile로 복원하여 재컴파 일함으로써 객체의 성능을 향상시킬 수 있다. 표 3 speed profile로 컴파일했을 때의 객체에 대한 진입 시간 (entry time) 및 이용 가능한 저장 공간의 크기를 나타낼 수 있고, 표 4는 verify로 컴파일했을 때의 객체에 대 한 진입 시간 및 이용 가능한 저장 공간의 크기를 나타낼 수 있다. 표 3 항목 재 진입 카운트(re-entry count) 25.2 평균 진입 속도(average entry speed) 401 ms 평균 이용 가능 메모리(average available memory) 3,101 MB평균 여유 메모리(average free memory) 663 MB 평균 캐시 메모리(average cashed memory) 2,437 MB 평균 스왑유스드 메모리(average swapused memory) 1,039 MB 표 4 항목 재 진입 카운트(re-entry count) 25.1 평균 진입 속도(average entry speed) 435 ms 평균 이용 가능 메모리(average available memory) 3,157 MB 평균 여유 메모리(average free memory) 674 MB 평균 캐시 메모리(average cashed memory) 2,484 MB 평균 스왑유스드 메모리(average swapused memory) 988 MB 다양한 실시예에 따르면, 프로세서는 메모리의 여유 저장 공간이 부족할 경우, 컴파일 필터를 하향 조정하여 전자 장치의 슬러기쉬를 방지하고, 여유 저장 공간이 충분할 경우 컴파일 필터를 복원함으로써 객체의 성능을 향상시킴으로써 안정적으로 전자 장치 및 객체의 성능을 확보할 수 있다. 도 7은 다양한 실시예에 따른 전자 장치의 동작의 흐름도이다. 도 7에서 설명하는 각 동작(710~750)은 순차적 으로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 동작(710~750)의 순서가 변경될 수도 있으며, 적어도 두 동작들이 병렬적으로 수행될 수도 있다. 도 7을 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 메모리(예: 도 1의 메모리 )의 저장 공간에 대한 정보 및 전자 장치에 의해 실행되는 복수의 객체들의 사용 이력을 모니터링할 수 있 다. 저장 공간에 대한 정보는 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율 및 메모리 의 여유 저장 공간의 크기를 포함할 수 있다. 복수의 객체들의 사용 이력은 복수의 객체들이 사용되지 않 은 기간을 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는 저장 공간에 대한 정보 및 복수의 객체들의 사용 이력에 기초하여 복 수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정할 수 있다. 프로세서는 메모리의 여유 저장 공간에 기초하여 복수의 객체들 중에서 제1 기간 동안 사용되지 않은 객체를 제1 타겟 객체로 결정하 고, 제1 기간 보다 짧은 제2 기간 동안 사용되지 않은 객체를 제2 타겟 객체로 결정할 수 있다. 프로세서(12 0)는 메모리의 여유 저장 공간에 기초하여 복수의 객체들 중에서 디스플레이 상에 아이콘(icon)이 존재하 지 않는 객체를 타겟 객체로 결정할 수 있다. 프로세서는 메모리의 여유 저장 공간에 기초하여, 복 수의 객체들 전부를 타겟 객체로 결정할 수 있다. 프로세서는 메모리의 저장 공간에 대한 여유 저장 공간의 비율이 제2 임계값 보다 작은 경우, 복수의 객체들 전부를 타겟 객체로 결정할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세서에 의해 실행되는 복수의 객체들의 사용 이력에 기초하 여 복수의 객체들의 적어도 일부를 포함하는 객체 리스트를 생성할 수 있다. 프로세서는 복수의 객체들 중에서 제1 기간 동안 사용되지 않은 객체를 포함하도록 제1 객체 리스트를 생성하고, 복수의 객체들 중에서 제 1 기간 보다 짧은 제2 기간 동안 사용되지 않은 객체를 포함하도록 제2 객체 리스트를 생성할 수 있다. 프로세 서는 복수의 객체들 중에서 디스플레이 상에 아이콘이 존재하지 않는 객체를 포함하도록 제3 객체 리스트 를 생성할 수 있다. 다양한 실시예에 따르면, 프로세서는 타겟 객체의 컴파일 방식을 변경함으로써 메모리의 여유 공간을 증가시킬 수 있다. 프로세서는 타겟 객체의 컴파일 필터(compile-filter)를 하향 조정(downgrade) 하고, 하향 조정된 컴파일 필터에 기초하여 타겟 객체를 재컴파일(re-compile)함으로써 여유 저장 공간을 증가 시킬 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율에 기초 하여 컴파일 방식을 변경할 객체 리스트를 결정하고, 결정된 객체 리스트에 포함된 객체의 컴파일 방식을 변경 함으로써 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치가 사용 중인지 여부를 판단하고, 전자 장치가 사용 중이지 않을 경우, 타겟 객체의 컴파일 방식을 변경함으로써 여유 저장 공간을 증가시킬 수 있다. 타겟 객체의 컴파일 방식을 변경하는 동작은 백그라운드(background)에서 수행될 수 있다. 다양한 실시예에 따르면, 프로세서는 메모리의 여유 저장 공간이 제1 임계값 보다 작은 경우, 컴파일 방식이 변경되지 않은 객체들의 컴파일 방식을 변경함으로써 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)는 하나 이상의 프로세서(예: 도 1의 프로세서 )와, 상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리(예: 도 1의 메모리)를 포함하 고, 상기 프로세서는, 상기 메모리의 저장 공간에 대한 정보 및 상기 프로세서에 의해 실행되는 복수의 객체들 의 사용 이력을 모니터링하고, 상기 정보 또는 상기 사용 이력 중에서 적어도 하나 또는 둘에 기초하여 상기 복 수의 객체들 중에서 컴파일 방식을 변경할 타겟 객체를 결정하고, 상기 타겟 객체의 컴파일 방식을 변경함으로 써 상기 메모리의 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 상기 정보는, 상기 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율 및 상기 메모리의 여유 저장 공간의 크기를 포함하고, 상기 사용 이력은, 상기 복수의 객체들이 사용되지 않은 기간을 포함할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 메모리의 여유 저장 공간이 제1 임계값 보다 작은 경우, 컴파 일 방식이 변경되지 않은 객체들의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 메모리의 여유 저장 공간에 기초하여 상기 복수의 객체들 중에 서 제1 기간 동안 사용되지 않은 객체를 제1 타겟 객체로 결정하고, 상기 제1 기간 보다 짧은 제2 기간 동안 사 용되지 않은 객체를 제2 타겟 객체로 결정할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 메모리의 여유 저장 공간에 기초하여 상기 복수의 객체들 중에 서 디스플레이 상에 아이콘(icon)이 존재하지 않는 객체를 상기 타겟 객체로 결정할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 메모리의 여유 저장 공간에 기초하여, 상기 복수의 객체들 전 부를 상기 타겟 객체로 결정할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 메모리의 저장 공간에 대한 상기 여유 저장 공간의 비율이 제2 임계값 보다 작은 경우, 상기 복수의 객체들 전부를 상기 타겟 객체로 결정할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 타겟 객체의 컴파일 필터(compile-filter)를 하향 조정 (downgrade)하고, 하향 조정된 컴파일 필터에 기초하여 상기 타겟 객체를 재컴파일(re-compile)함으로써 상기 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 전자 장치가 사용 중인지 여부를 판단하고, 상기 전자 장치가 사용 중이지 않을 경우, 상기 타겟 객체의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시킬 수 있 다. 다양한 실시예에 따르면, 상기 타겟 객체의 컴파일 방식을 변경하는 동작은 백그라운드(background)에서 수행될 수 있다. 다양한 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)는, 하나 이상의 프로세서(예: 도 1의 프로세서 )와, 상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리(예: 도 1의 메모리)를 포함하 고, 상기 프로세서는, 상기 메모리의 저장 공간에 대한 정보를 모니터링하고, 상기 프로세서에 의해 실행되는 복수의 객체들의 사용 이력에 기초하여 상기 복수의 객체들의 적어도 일부를 포함하는 객체 리스트를 생성하고, 상기 정보에 기초하여 상기 객체 리스트에 포함된 적어도 하나의 객체의 컴파일 방식을 변경함으로써 상기 메모 리의 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 상기 정보는, 메모리의 전체 저장 공간에 대한 여유 저장 공간의 비율 및 상기 메모리 의 여유 저장 공간의 크기를 포함하고, 상기 사용 이력은, 상기 복수의 객체들이 사용되지 않은 기간을 포함할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 메모리의 여유 저장 공간이 제1 임계값 보다 작은 경우, 상기 컴파일 방식이 변경되지 않은 객체들의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시킬 수 있다.다양한 실시예에 따르면, 상기 프로세서는, 상기 복수의 객체들 중에서 제1 기간 동안 사용되지 않은 객체를 포 함하도록 제1 객체 리스트를 생성하고, 상기 복수의 객체들 중에서 상기 제1 기간 보다 짧은 제2 기간 동안 사 용되지 않은 객체를 포함하도록 제2 객체 리스트를 생성할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 복수의 객체들 중에서 디스플레이 상에 아이콘이 존재하지 않 는 객체를 포함하도록 제3 객체 리스트를 생성할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 메모리의 전체 저장 공간에 대한 상기 여유 저장 공간의 비율 에 기초하여 상기 컴파일 방식을 변경할 객체 리스트를 결정하고, 결정된 객체 리스트에 포함된 객체의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 비율이 제2 임계값 보다 작은 경우, 상기 복수의 객체들 전부 의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 적어도 하나의 객체의 컴파일 필터를 하향 조정하고, 하향 조 정된 컴파일 필터에 기초하여 상기 적어도 하나의 객체를 재컴파일함으로써 상기 여유 저장 공간을 증가시킬 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 전자 장치가 사용 중인지 여부를 판단하고, 상기 전자 장치가 사용 중이지 않을 경우, 상기 적어도 하나의 객체의 컴파일 방식을 변경함으로써 상기 여유 저장 공간을 증가시 킬 수 있다. 다양한 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)의 메모리(예: 도 1의 메모리)를 관리하는 방법에 있어서, 메모리 관리 방법은, 상기 메모리의 저장 공간에 대한 정보 및 상기 전자 장치에 의해 실행되는 복수의 객체들의 사용 이력을 모니터링하는 동작과, 상기 정보 및 상기 사용 이력에 기초하여 상기 복수의 객체 들 중에서 컴파일 방식을 변경할 타겟 객체를 결정하는 동작과, 상기 타겟 객체의 컴파일 방식을 변경함으로써 상기 메모리의 여유 저장 공간을 증가시키는 동작을 포함할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치(#01)) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리(#36) 또는 외장 메모리(#38))에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램(#40))로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치(#01))의 프로세서(예: 프로세서(#20))는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다."}
{"patent_id": "10-2021-0004097", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 다양한 실시예에 따른 전자 장치의 메모리 관리 동작을 설명하기 위한 도면이다. 도 3은 다양한 실시예에 따른 메모리의 저장 공간을 모니터링하는 동작의 일 예를 나타낸다. 도 4는 다양한 실시예에 따른 메모리의 저장 공간을 모니터링하는 동작의 다른 예를 나타낸다. 도 5는 다양한 실시예에 따른 전자 장치의 메모리 관리 동작의 흐름도이다. 도 6은 다양한 실시예에 따른 전자 장치의 전자 장치 성능 향상 동작을 나타낸다. 도 7은 다양한 실시예에 따른 전자 장치의 동작의 흐름도이다."}
