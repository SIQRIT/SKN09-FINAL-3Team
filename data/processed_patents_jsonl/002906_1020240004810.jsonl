{"patent_id": "10-2024-0004810", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0136220", "출원번호": "10-2024-0004810", "발명의 명칭": "인공지능 연산을 위한 오퍼레이션 호출 목록 생성 방법 및 시스템", "출원인": "주식회사 모레", "발명자": "조강원"}}
{"patent_id": "10-2024-0004810", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "적어도 하나의 프로세서에 의해서 수행되는, 인공지능 연산을 위한 오퍼레이션 호출 목록을 생성하는 방법에 있어서,인공지능 연산을 포함한 소스 프로그램으로부터 트레이스(trace)를 획득하는 단계 - 상기 트레이스는 상기 소스프로그램과 연관된 코드 또는 프리미티브 오퍼레이션 중 적어도 하나를 포함함 -; 및상기 트레이스에 기초하여, 복수의 프리미티브 오퍼레이션(primitive operation)을 포함하는 호출 목록을 생성하는 단계를 포함하고, 상기 복수의 프리미티브 오퍼레이션은 복수의 가속기의 각각이 액세스하는 오퍼레이션 라이브러리에 포함되는,오퍼레이션 호출 목록 생성 방법."}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시는 적어도 하나의 프로세서에 의해서 수행되는 인공지능 연산을 위한 오퍼레이션 호출 목록을 생성하는 방법이 제공된다. 이 방법은 인공지능 연산을 포함한 소스 프로그램으로부터 트레이스(trace)를 획득하는 단계 - 트레이스는 소스 프로그램과 연관된 코드 또는 프리미티브 오퍼레이션 중 적어도 하나를 포함함 - 및 트레이스 에 기초하여, 복수의 프리미티브 오퍼레이션을 포함하는 호출 목록을 생성하는 단계를 포함하고, 복수의 프리미 티브 오퍼레이션은 복수의 가속기의 각각이 액세스하는 오퍼레이션 라이브러리에 포함될 수 있다."}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 오퍼레이션 호출 목록 생성 방법에 관한 것으로서, 구체적으로, 인공지능 연산을 위해 적어도 하나의 프리미티브 오퍼레이션을 포함하는 오퍼레이션 호출 목록을 생성하는 방법 및 시스템에 관한 것이다."}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "딥러닝 애플리케이션을 작성하는 애플리케이션 프로그래머는 주로 딥러닝 프레임워크(예: TensorFlow)를 사용하 여 복수의 연산이 조합된 소스 코드(source code)를 생성할 수 있다. 이러한 소스 코드는 하드웨어 제조사가 배포하는 오퍼레이션 라이브러리(예: Nvidia의 cuDNN, Intel의 MKL-DNN 등)에 포함된 오퍼레이션을 활용하여 구 현될 수 있다. 인공지능 프로그램을 통해서 구현된 소스 코드는 프로세서를 통해 컴파일되어 바이너리 코드로 변환되고, 프로 세서는 바이너리 코드를 실행함으로써 인공지능 연산과 연관된 동작을 수행한다. 그런데 컴파일된 바이너리 코드는 지정된 타입의 프로세서에서만 정상적으로 동작할 수 있다. 예컨대, 특정 제 조사에 의해 제작한 제1 가속기에 의해서 컴파일된 바이너리 코드는 제1 가속기에서만 정상적으로 동작할 수 있 을 뿐, 다른 제조사에서 제작된 제2 가속기에서는 정상적인 동작이 불가능할 수 있다. 그런데 복잡한 인공지능 연산을 동시적으로 처리할 수 있는 대용량 자원을 포함하는 컴퓨팅 시스템이 구축되고, 이러한 컴퓨팅 시스템을 통해서 다양한 형태의 인공지능 연산이 동시적으로 처리되고 있다. 대용량 자원을 포 함하는 컴퓨팅 시스템에서는, 다양한 타입의 프로세서가 포함될 수 있다. 예를 들어, 제1 제조사에서 제작한 제1 가속기, 제2 제조사에서 제작한 제2 가속기, 제3 제조사에서 제작한 제3 프로세서 등과 같이 다양한 제조사 와 연관된 프로세서가 컴퓨팅 시스템에 포함될 수 있다. 이렇게 다양한 타입의 프로세서가 포함된 컴퓨팅 시스템에서, 기존의 방식대로 컴파일하면 특정 타입의 프로세 서에 의존적인 바이너리 코드가 생성될 수 있다. 이에 따라, 특정 타입의 프로세서에 의존하지 않고, 다양한 타입의 프로세서에 범용적으로 적용할 수 있는 컴파일 기술에 대한 요구가 발생하고 있다"}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상기와 같은 문제점을 해결하기 위한 인공지능 연산을 위한 오퍼레이션 호출 목록 생성 방법, 컴퓨터 판독 가능한 기록매체에 저장된 컴퓨터 프로그램, 컴퓨터 판독 가능한 기록 매체 및 장치(시스템)를 제공한다."}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시는 방법, 장치(시스템) 및/또는 컴퓨터 판독 가능 저장 매체에 저장된 컴퓨터 프로그램을 포함한 다양한 방식으로 구현될 수 있다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서에 의해서 수행되는, 인공지능 연산을 위한 오퍼레이션 호출 목록을 생성하는 방법은, 인공지능 연산을 포함한 소스 프로그램으로부터 트레이스(trace)를 획득하는 단 계 - 트레이스는 소스 프로그램과 연관된 코드 또는 프리미티브 오퍼레이션 중 적어도 하나를 포함함 - 및 트레 이스에 기초하여, 복수의 프리미티브 오퍼레이션(primitive operation)을 포함하는 호출 목록을 생성하는 단계 를 포함하고, 복수의 프리미티브 오퍼레이션은 복수의 가속기의 각각이 액세스하는 오퍼레이션 라이브러리에 포 함될 수 있다. 또한, 트레이스를 획득하는 단계는, 소스 프로그램을 실행하여 인공지능 연산과 연관된 코드 또는 프리미티브 오퍼레이션 중 적어도 하나를 획득하는 단계 및 획득된 적어도 하나의 코드 또는 프리미티브 오퍼레이션을 포함 하는 트레이스를 획득하는 단계를 포함할 수 있다. 또한, 호출 목록을 생성하는 단계는, 복수의 프리미티브 오퍼레이션의 각각에 대한 상관 관계를 결정하는 단계 및 결정된 복수의 프리미티브 오퍼레이션의 각각에 대한 상관 관계를 포함하는 호출 목록을 생성하는 단계를 포 함할 수 있다. 또한, 상관 관계는 호출 목록에 포함된 제1 프리미티브 오퍼레이션의 출력 데이터가, 호출 목록에 포함된 제2 프리미티브 오퍼레이션으로 입력되는 관계일 수 있다. 또한, 호출 목록을 생성하는 단계는, 호출 목록에 포함된 복수의 프리미티브 오퍼레이션에 기초하여, 복수의 프 리미티브 오퍼레이션의 호출 순서와 상관 관계를 나타내는 그래프를 생성하는 단계를 포함할 수 있다. 또한, 오퍼레이션 호출 목록 생성 방법은, 생성된 호출 목록을 복수의 가속기의 중 적어도 하나로 전송하는 단 계를 더 포함하고, 호출 목록을 수신한 가속기는 오퍼레이션 라이브러리를 액세스하여, 호출 목록에 포함된 복 수의 프리미티브 오퍼레이션을 호출하도록 구성될 수 있다. 또한, 오퍼레이션 호출 목록 생성 방법은, 호출 목록을 적어도 하나의 컴파일러 패스에 적용하여, 호출 목록에 기초한 새로운 호출 목록을 생성하는 단계를 더 포함할 수 있다. 또한, 새로운 호출 목록을 생성하는 단계는, 프리미티브 오퍼레이션의 식별자에 기초하여, 호출 목록에 포함된 프리미티브 오퍼레이션 중에서 병합 대상이 되는 복수의 프리미티브 오퍼레이션을 결정하는 단계, 결정된 복수 의 프리미티브 오퍼레이션을 하나의 프리미티브 오퍼레이션으로 병합하는 단계 및 병합된 프리미티브 오퍼레이 션을 포함하도록 호출 목록을 변경하여 새로운 호출 목록을 생성하는 단계를 포함할 수 있다. 또한, 결정된 복수의 프리미티브 오퍼레이션의 각각에 대한 입력 데이터는 병합된 프리미티브 오퍼레이션으로 입력될 수 있다. 또한, 새로운 호출 목록을 생성하는 단계는, 호출 목록을 제공받는 복수의 가속기의 개수를 결정하는 단계, 결 정된 복수의 가속기의 개수에 기초하여, 호출 목록에 포함된 입력 데이터를 분할하는 단계 및 분할된 입력 데이 터를 포함하도록 호출 목록을 변경하여 새로운 호출 목록을 생성하는 단계를 포함할 수 있다. 또한, 새로운 호출 목록을 생성하는 단계는, 호출 목록을 제공받는 복수의 가속기의 개수를 결정하는 단계, 결 정된 복수의 가속기의 개수에 기초하여, 호출 목록을 복수의 서브 호출 목록으로 분할하는 단계 및 분할된 복수 의 서브 호출 목록이 파이프라이닝되도록 호출 목록을 변경하여 새로운 호출 목록을 생성하는 단계를 포함할 수 있다. 또한, 오퍼레이션 호출 목록 생성 방법은, 새로운 호출 목록을 생성하는 단계 이후에, 분할된 복수의 서브 호출 목록을 복수의 가속기로 전송하는 단계를 더 포함하고, 제1 서브 호출 목록을 수신한 제1 가속기 및 제1 서브 호출 목록과 파이프라이닝된 제2 서브 호출 목록을 수신한 제2 가속기는, 동일한 노드에 포함될 수 있다. 또한, 새로운 호출 목록을 생성하는 단계는, 제1 서브 호출 목록에 기초한 출력 데이터가 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이션의 입력 데이터로 제공되도록, 적어도 하나의 명령이, 제1 서브 호출 목록 또는 제2 서브 호출 목록 중 적어도 하나에 삽입하는 단계를 포함할 수 있다. 또한, 오퍼레이션 호출 목록 생성 방법은, 새로운 호출 목록을 생성하는 단계 이후에, 분할된 복수의 서브 호출 목록을 복수의 가속기로 전송하는 단계를 더 포함하고, 제1 서브 호출 목록을 수신한 제1 가속기는 제1 노드에 포함되고, 제1 서브 호출 목록과 파이프라이닝된 제2 서브 호출 목록을 수신한 제2 가속기는 제2 노드에 포함되 고, 제1 노드는 제2 노드와 인접된 이웃 노드일 수 있다. 또한, 새로운 호출 목록을 생성하는 단계는, 호출 목록을 제공받는 복수의 가속기의 개수를 결정하는 단계, 결 정된 복수의 가속기의 개수에 기초하여, 호출 목록에 포함된 프리미티브 오퍼레이션의 각각에 적용되는 복수의 파라미터를 분할하는 단계 및 분할된 파라미터가 포함되도록 호출 목록을 변경하여 새로운 호출 목록을 생성하 는 단계를 포함할 수 있다. 또한, 새로운 호출 목록을 생성하는 단계는, 프리미티브 오퍼레이션과 연관된 데이터 구조 또는 식별자 중 적어 도 하나에 기초하여, 호출 목록에 포함된 프리미티브 오퍼레이션 중에서 병합 대상이 되는 복수의 프리미티브 오퍼레이션을 결정하는 단계, 결정된 복수의 프리미티브 오퍼레이션을 하나의 프리미티브 오퍼레이션으로 병합 하는 단계 및 병합된 프리미티브 오퍼레이션을 포함하도록 호출 목록을 변경하여 새로운 호출 목록을 생성하는 단계를 포함할 수 있다. 또한, 새로운 호출 목록을 생성하는 단계는, 호출 목록에 포함된 복수의 프리미티브 오퍼레이션 중에서, 독립적 으로 수행되는 적어도 하나의 프리미티브 오퍼레이션을 식별하는 단계, 식별된 적어도 하나의 프리미티브 오퍼 레이션의 실행 순서를 변경하는 단계 및 변경된 적어도 하나의 프리미티브 오퍼레이션을 포함하도록 호출 목록 을 변경하여 새로운 호출 목록을 생성하는 단계를 포함할 수 있다. 또한, 식별된 적어도 하나의 프리미티브 오퍼레이션의 실행 순서를 변경하는 단계는, 식별된 적어도 하나의 프 리미티브 오퍼레이션의 실행 순서를 앞당겨지도록, 적어도 하나의 프리미티브 오퍼레이션의 실행 순서를 변경하 는 단계를 포함할 수 있다. 상술된 오퍼레이션 호출 목록 생성 방법을 컴퓨터에서 실행하기 위해 컴퓨터 판독 가능한 기록 매체에 저장된 컴퓨터 프로그램이 제공될 수 있다. 본 개시의 일 실시예에 따르면 정보 처리 시스템은, 메모리 및 메모리와 연결되고, 메모리에 포함된 컴퓨터 판 독 가능한 적어도 하나의 프로그램을 실행하도록 구성된 적어도 하나의 프로세서를 포함하고, 적어도 하나의 프 로그램은, 인공지능 연산을 포함한 소스 프로그램으로부터 트레이스를 획득하고 - 트레이스는 소스 프로그램과 연관된 코드 또는 프리미티브 오퍼레이션 중 적어도 하나를 포함함 -, 트레이스에 기초하여 복수의 프리미티브 오퍼레이션을 포함하는 호출 목록을 생성하기 위한 명령어들을 포함하고, 복수의 프리미티브 오퍼레이션은 복수 의 가속기의 각각이 액세스하는 오퍼레이션 라이브러리에 포함될 수 있다."}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 일부 실시예에 따르면, 인공지능 연산과 연관된 코드 또는 프리미티브 오퍼레이션을 포함하는 트레이 스에 기초하여, 복수의 프리미티브 오퍼레이션을 포함하는 호출 목록이 생성될 수 있다. 호출 목록에 포함된 복수의 프리미티브 오퍼레이션은 가속기의 타입에 의존되지 않고, 다양한 타입의 가속기에서 정상적으로 실행될 수 있다. 본 개시의 일부 실시예에 따르면, 인공지능 프로그램을 실행되는 시간 동안(즉, 런타임 동안)에 연산과 관련된 복수의 코드 및/또는 복수의 프리미티브 오퍼레이션이 추출되고, 추출된 복수의 코드 및/또는 복수의 프리미티 브 오퍼레이션이 포함된 트레이스가 생성될 수 있다. 트레이스에 기초하여 인공지능 연산에 필수적인 프리미티 브 오퍼레이션이 빠짐없이 호출 목록에 포함될 수 있다. 본 개시의 일부 실시예에 따르면, 하나의 이상의 컴파일러 패스에 호출 목록이 적용되어 호출 목록이 최적화될 수 있다. 최적화된 호출 목록을 통해서, 컴퓨팅 자원이 절감되고 더욱 빠르게 연산 결과가 출력될 수 있다. 본 개시의 효과는 이상에서 언급한 효과로 제한되지 않으며, 언급되지 않은 다른 효과들은 청구범위의 기재로부"}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "터 본 개시가 속하는 기술분야에서 통상의 지식을 가진 자('통상의 기술자'라 함)에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 개시의 실시를 위한 구체적인 내용을 첨부된 도면을 참조하여 상세히 설명한다. 다만, 이하의 설명에 서는 본 개시의 요지를 불필요하게 흐릴 우려가 있는 경우, 널리 알려진 기능이나 구성에 관한 구체적 설명은 생략하기로 한다. 첨부된 도면에서, 동일하거나 대응하는 구성요소에는 동일한 참조부호가 부여되어 있다. 또한, 이하의 실시예 들의 설명에 있어서, 동일하거나 대응되는 구성요소를 중복하여 기술하는 것이 생략될 수 있다. 그러나, 구성 요소에 관한 기술이 생략되어도, 그러한 구성요소가 어떤 실시예에 포함되지 않는 것으로 의도되지는 않는다. 개시된 실시예의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 후술되어 있는 실시예 들을 참조하면 명확해질 것이다. 그러나, 본 개시는 이하에서 개시되는 실시예들에 한정되는 것이 아니라 서로 다른 다양한 형태로 구현될 수 있으며, 단지 본 실시예들은 본 개시가 완전하도록 하고, 본 개시가 통상의 기술 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것일 뿐이다. 본 명세서에서 사용되는 용어에 대해 간략히 설명하고, 개시된 실시예에 대해 구체적으로 설명하기로 한다. 본 명세서에서 사용되는 용어는 본 개시에서의 기능을 고려하면서 가능한 현재 널리 사용되는 일반적인 용어들을 선택하였으나, 이는 관련 분야에 종사하는 기술자의 의도 또는 판례, 새로운 기술의 출현 등에 따라 달라질 수 있다. 또한, 특정한 경우는 출원인이 임의로 선정한 용어도 있으며, 이 경우 해당되는 발명의 설명 부분에서 상세히 그 의미를 기재할 것이다. 따라서, 본 개시에서 사용되는 용어는 단순한 용어의 명칭이 아닌, 그 용어 가 가지는 의미와 본 개시의 전반에 걸친 내용을 토대로 정의되어야 한다. 본 명세서에서의 단수의 표현은 문맥상 명백하게 단수인 것으로 특정하지 않는 한, 복수의 표현을 포함한다. 또한, 복수의 표현은 문맥상 명백하게 복수인 것으로 특정하지 않는 한, 단수의 표현을 포함한다. 명세서 전체 에서 어떤 부분이 어떤 구성요소를 포함한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있음을 의미한다. 또한, 명세서에서 사용되는 '모듈' 또는 '부'라는 용어는 소프트웨어 또는 하드웨어 구성요소를 의미하며, '모 듈' 또는 '부'는 어떤 역할들을 수행한다. 그렇지만, '모듈' 또는 '부'는 소프트웨어 또는 하드웨어에 한정되 는 의미는 아니다. '모듈' 또는 '부'는 어드레싱할 수 있는 저장 매체에 있도록 구성될 수도 있고 하나 또는 그 이상의 프로세서들을 재생시키도록 구성될 수도 있다. 따라서, 일 예로서, '모듈' 또는 '부'는 소프트웨어 구성요소들, 객체지향 소프트웨어 구성요소들, 클래스 구성요소들 및 태스크 구성요소들과 같은 구성요소들과, 프로세스들, 함수들, 속성들, 프로시저들, 서브루틴들, 프로그램 코드의 세그먼트들, 드라이버들, 펌웨어, 마이 크로 코드, 회로, 데이터, 데이터베이스, 데이터 구조들, 테이블들, 어레이들 또는 변수들 중 적어도 하나를 포 함할 수 있다. 구성요소들과 '모듈' 또는 '부'들은 안에서 제공되는 기능은 더 작은 수의 구성요소들 및 '모듈' 또는 '부'들로 결합되거나 추가적인 구성요소들과 '모듈' 또는 '부'들로 더 분리될 수 있다. 본 개시의 일 실시예에 따르면, '모듈' 또는 '부'는 프로세서 및 메모리로 구현될 수 있고, 회로(circuit, circuitry)로 구현될 수 있다. '회로(circuit, circuitry)'와 같은 용어는 하드웨어 상의 회로를 의미하기도 하지만 소프트웨어 상의 회로를 의미할 수도 있다. '프로세서'는 범용 프로세서, 중앙 처리 장치(CPU), 마이크 로프로세서, 디지털 신호 프로세서(DSP), 제어기, 마이크로제어기, 상태 머신 등을 포함하도록 넓게 해석되어야 한다. 몇몇 환경에서, '프로세서'는 주문형 반도체(ASIC), 프로그램가능 로직 디바이스(PLD), 필드 프로그램가 능 게이트 어레이(FPGA) 등을 지칭할 수도 있다. '프로세서'는, 예를 들어, DSP와 마이크로프로세서의 조합, 복수의 마이크로프로세서들의 조합, DSP 코어와 결합한 하나 이상의 마이크로프로세서들의 조합, 또는 임의의 다른 그러한 구성들의 조합과 같은 처리 디바이스들의 조합을 지칭할 수도 있다. 또한, '메모리'는 전자 정보 를 저장 가능한 임의의 전자 컴포넌트를 포함하도록 넓게 해석되어야 한다. '메모리'는 임의 액세스 메모리 (RAM), 판독-전용 메모리(ROM), 비-휘발성 임의 액세스 메모리(NVRAM), 프로그램가능 판독-전용 메모리(PROM), 소거-프로그램가능 판독 전용 메모리(EPROM), 전기적으로 소거가능 PROM(EEPROM), 플래쉬 메모리, 자기 또는 마 킹 데이터 저장장치, 레지스터들 등과 같은 프로세서-판독가능 매체의 다양한 유형들을 지칭할 수도 있다. 프 로세서가 메모리로부터 정보를 판독하고/하거나 메모리에 정보를 기록할 수 있다면 메모리는 프로세서와 전자 통신 상태에 있다고 불린다. 프로세서에 집적된 메모리는 프로세서와 전자 통신 상태에 있다. 본 개시에서, '시스템'은 서버 장치와 클라우드 장치 중 적어도 하나의 장치를 포함할 수 있으나, 이에 한정되 는 것은 아니다. 예를 들어, 시스템은 하나 이상의 서버 장치로 구성될 수 있다. 다른 예로서, 시스템은 하나 이상의 클라우드 장치로 구성될 수 있다. 또 다른 예로서, 시스템은 서버 장치와 클라우드 장치가 함께 구성되 어 동작될 수 있다. 또한, 이하의 실시예들에서 사용되는 제1, 제2, A, B, (a), (b) 등의 용어는 어떤 구성요소를 다른 구성요소와 구별하기 위해 사용되는 것일 뿐, 그 용어에 의해 해당 구성요소의 본질이나 차례 또는 순서 등이 한정되지는 않는다. 또한, 이하의 실시예들에서, 어떤 구성요소가 다른 구성요소에 '연결', '결합' 또는 '접속'된다고 기재된 경우, 그 구성요소는 그 다른 구성요소에 직접적으로 연결되거나 또는 접속될 수 있지만, 각 구성요소 사이에 또 다른 구성요소가 '연결', '결합' 또는 '접속'될 수도 있다고 이해되어야 한다. 또한, 이하의 실시예들에서 사용되는 '포함한다(comprises)' 및/또는 '포함하는(comprising)'은 언급된 구성요 소, 단계, 동작 및/또는 소자는 하나 이상의 다른 구성요소, 단계, 동작 및/또는 소자의 존재 또는 추가를 배제 하지 않는다. 본 개시에서, '복수의 A 각각' 은 복수의 A에 포함된 모든 구성 요소의 각각을 지칭하거나, 복수의 A에 포함된 일부 구성 요소의 각각을 지칭할 수 있다. 본 개시의 다양한 실시예들을 설명하기에 앞서, 사용되는 용어에 대하여 설명하기로 하기로 한다. 본 개시의 실시예들에서, '인공지능 연산'은 기계학습 모델(예를 들어, 인공신경망 모델 등)과 연관된 임의의 연산을 지칭할 수 있다. 가령, 인공지능 연산은 인공신경망 모델에 포함된 각 레이어에서 수행되는 연산일 수 있다. 예컨대, 인공지능 연산은 인공신경망 모델에 포함된 레이어에서 수행되는, 덧셈 연산, 뺄셈 연산, 최대 값 산출 연산, 최소값 산출 연산, 부동 소수점 곱셈 연산, 가중치 적용 연산, 합성곱(convolution) 연산, 행렬 곱셈 연산, 배치 정규화(batch mormalization) 연산, ReLU(Recitified Linear Unit) 연산, 풀링(pooling)연산, LSTM(Long Short-Term Memory) 연산, GRU(Gated Recurrent Unit) 연산 등을 포함할 수 있으나, 이에 한 정되지 않는다. 본 개시의 실시예들에서, '인공지능 프로그램'은 인공지능 또는 인경신공망 모델과 연관된 연산을 수행하는 소 스 프로그램일 수 있다. 예컨대, 인공지능 프로그램은 딥러닝 연산과 연관된 소스 프로그램일 수 있다. 본 개시의 실시예들에서, '코드'는 프로그램을 실행하기 위해 작성된 임의의 코드를 지칭할 수 있으며, 예를 들 어, 소스 코드 등을 지칭할 수 있다. 또한, 코드는 연산을 위한 명령과 연관될 수 있다. 본 개시의 실시예들에서, '프리미티브 오퍼레이션(primitive operation)'은 인공지능 연산을 수행하는데 있어서, 기초적인 코드 및/또는 기본적인 명령어와 연관된 프로세서의 동작을 지칭할 수 있다. 가령, 프리미티 브 오퍼레이션은 기계학습 모델에서 결과값을 추론하기 위하여 자주 사용하는 연산 오퍼레이션 집합에 포함될 수 있다. 예컨대, 프리미티브 오퍼레이션은, 덧셈, 뺄셈, 최대값 산출, 최소값 산출, 부동 소수점 곱셈, 합성 곱 연산, 행렬 곱셈, 배치 정규화, ReLU, 풀링(pooling), LSTM, GRU 등의 연산과 관련된 오퍼레이션을 포함할 수 있으나, 이에 한정되지 않는다. 본 개시의 실시예들에서, '트레이스(trace)'는 인공지능 연산과 연관된 적어도 하나의 코드 및/또는 적어도 하 나의 프리미티브 오퍼레이션을 포함할 수 있다. 가령, 인공지능 프로그램이 실행되는 런타임(runtime) 동안에 추출된 연산 관련 코드 및/또는 프리미티브 오퍼레이션이 수집되어 트레이스가 생성될 수 있다. 트레이스는 각 코드 및/또는 프리미티브 오퍼레이션의 실행순서와 상관 관계가 포함될 수 있다. 본 개시의 실시예들에서, '가속기'는 인공지능 연산을 수행하는 임의의 프로세서 또는 회로를 지칭할 수 있다. 예컨대, 가속기는 인공지능 연산을 빠르게 수행할 수 있는 프로세서 또는 회로를 지칭할 수 있는데, 예를 들어, GPU(Graphics Processing Unit), NPU(Neural Processing Unit), TPU(Tensor Processing Unit) 등을 포함할 수 있으나, 이에 한정되지 않는다. 본 개시의 실시예들에서, 오퍼레이션 라이브러리(operation library)는 프리미티브 오퍼레이션의 호출과 연관된 코드 모음 또는 라이브러리일 수 있다. 예컨대, 오퍼레이션 라이브러리는 덧셈과 연관된 제1 프리미티브 오퍼 레이션을 호출하기 제1 코드, 뺄셈과 연관된 제2 프리미티브 오퍼레이션을 호출하기 제2 코드, 최대값 산출과 연관된 제3 프리미티브 오퍼레이션을 호출하기 제3 코드 및 최소값 산출과 연관된 제4 프리미티브 오퍼레이션을 호출하기 제4 코드를 포함할 수 있다. 추가적으로, 오퍼레이션 라이브러리는, 부동 소수점 곱셈과 연관된 제5 프리미티브 오퍼레이션을 호출하기 제5 코드, 합성곱 연산과 연관된 제6 프리미티브 오퍼레이션을 호출하기 제6 코드, 행렬 곱셈 연산과 연관된 제7 프리미티브 오퍼레이션을 호출하기 제7 코드 및 배치 정규화와 연관된 제8 프리미티브 오퍼레이션을 호출하기 제8 코드를 포함할 수 있다. 이외에도, 오퍼레이션 라이브러리는 임의의 프 리미티브 오퍼레이션과 연관된 코드를 포함할 수 있다. 이하, 본 개시의 다양한 실시예들에 대하여 첨부된 도면에 따라 상세하게 설명한다. 도 1은 본 개시의 일 실시예에 따른, 호출 목록이 생성되는 방법을 설명하기 위한 개요도이다. 도 1을 참 조하면, 인공지능 프로그램이 실행될 수 있다. 인공지능 프로그램은 인공지능 연산을 포함하는 소스 프로그램일 수 있다. 인공지능 프로그램이 실행되는 시간 동안에, 트레이스가 획득될 수 있다. 여기서, 트레이스는 인공지능 연산과 연관된 적어도 하나의 코드 및/또는 적어도 하나의 프리미티브 오퍼레이션을 포함할 수 있다. 또한, 트레이스에 기초하여 호출 목록이 생성될 수 있다. 몇몇 실시예에 따르면, 트레이스에는 복수의 프리미티브 오퍼레이션이 포함될 수 있으며, 이 경우 트레이스로부터 복수의 프리미티브 오퍼레이 션이 추출되고, 추출된 복수의 프리미티브 오퍼레이션을 포함하는 호출 목록이 생성될 수 있다. 호출 목 록에 포함된 프리미티브 오퍼레이션은 바이너리 형태가 아니라, 메모리 내의 자료 구조, 직렬화된 데이터 또는 텍스트 중 적어도 하나일 수 있다. 호출 목록에 포함된 복수의 프리미티브 오퍼레이션은 도 6에 예 시된 바와 같이, 그래프 형태로 표현될 수 있다. 일 실시예에 따르면, 복수의 프리미티브 오퍼레이션은 오퍼레이션 라이브러리에 포함되는 임의의 오퍼레이션을 포함할 수 있다. 이 경우, 오퍼레이션 라이브러리는 복수의 제조사에서 제작된 복수의 가속기에 의해 액세스되 는 라이브러리일 수 있다. 호출 목록에 포함된 복수의 프리미티브 오퍼레이션의 각각에 대한 상관 관계가 결정되고, 결정된 복수의 프리미티브 오퍼레이션의 각각에 대한 상관 관계가 호출 목록에 포함될 수 있다. 여기서, 상관 관계는 특정 프리미티브 오퍼레이션의 연산이 다른 프리미티브 오퍼레이션에 기초하여 수행되는 것일 수 있다. 예컨대, 제1 프리미티브 오퍼레이션의 출력 데이터가 제2 프리미티브 오퍼레이션으로 입력되는 관계인 경우, 제1 프리미 티브 오퍼레이션과 제2 프리미티브 오퍼레이션은 상관 관계가 있는 것으로 결정될 수 있다. 또한, 호출 목록 에 포함된 복수의 프리미티브 오퍼레이션의 각각은 실행 순서가 결정될 수 있다. 일 실시예에 따르면, 호출 목록에 포함된 복수의 프리미티브 오퍼레이션에 기초하여, 복수의 프리미티브 오퍼레이션의 호출 순서와 상관 관계가 그래프 형태로 표현될 수 있다. 호출 목록이 그래프로 표현되는 예시는 도 6을 참조하여 후술하기로 한다. 호출 목록이 적어도 하나의 가속기로 전송되고, 적어도 하나의 가속기는 오퍼레이션 라이브러리를 액세스 하여, 호출 목록에 포함된 복수의 프리미티브 오퍼레이션을 호출하여 실행할 수 있다. 몇몇 실시예에 따 르면, 적어도 하나의 가속기는 호출 목록에 포함된 복수의 프리미티브 오퍼레이션을 컴파일하여, 바이너리 코드를 생성한 후 생성된 바이너리 코드를 실행함으로써 복수의 프리미티브 오퍼레이션을 호출할 수 있다. 일 실시예에 따르면, 호출 목록이 컴파일러 패스에 적용되어, 호출 목록이 최적화될 수 있다. 여기서, 컴파일러 패스는 호출 목록을 최적화하기 위한 모듈일 수 있다. 최적화된 호출 목록은 원본 호출 목록이 변경되어 생성된 것일 수 있다. 컴파일러 패스를 통해서 호출 목록이 최적화 되는 다양한 방법은 도 7 내지 도 13을 참조하여 후술하기로 한다. 일 실시예에 따르면, 컴파일러 패스는 정보 처리 시스템에 포함될 수 있다. 또한, 컴파일러 패스와 관련된 동작은 정보 처리 시스템에 포함된 적어도 하나의 프로세서에 의해서 실행될 수 있다. 도 2는 본 개시의 일 실시예에 따른, 정보 처리 시스템의 내부 구성을 나타내는 블록도이다. 정보 처리 시스템은 메모리, 프로세서, 통신 모듈 및 입출력 인터페이스를 포함할 수 있다. 정 보 처리 시스템은 통신 모듈을 이용하여 네트워크를 통해 정보 및/또는 데이터를 통신할 수 있도록 구성될 수 있다. 메모리는 비-일시적인 임의의 컴퓨터 판독 가능한 기록매체를 포함할 수 있다. 일 실시예에 따르면, 메모 리는 ROM(read only memory), 디스크 드라이브, SSD(solid state drive), 플래시 메모리(flash memory) 등과 같은 비소멸성 대용량 저장 장치(permanent mass storage device)를 포함할 수 있다. 다른 예로서, ROM, SSD, 플래시 메모리, 디스크 드라이브 등과 같은 비소멸성 대용량 저장 장치는 메모리와는 구분되는 별도의 영 구 저장 장치로서 정보 처리 시스템에 포함될 수 있다. 또한, 메모리에는 운영체제와 적어도 하나의 프로그램 코드(예를 들어, 호출 목록을 생성 등을 위한 코드)가 저장될 수 있다. 이러한 소프트웨어 구성요소들은 메모리와는 별도의 컴퓨터에서 판독 가능한 기록매체로부터 로딩될 수 있 다. 이러한 별도의 컴퓨터에서 판독 가능한 기록매체는 이러한 정보 처리 시스템에 직접 연결가능한 기록 매체를 포함할 수 있는데, 예를 들어, 플로피 드라이브, 디스크, 테이프, DVD/CD-ROM 드라이브, 메모리 카드 등 의 컴퓨터에서 판독 가능한 기록매체를 포함할 수 있다. 다른 예로서, 소프트웨어 구성요소들은 컴퓨터에서 판 독 가능한 기록매체가 아닌 통신 모듈을 통해 메모리에 로딩될 수도 있다. 예를 들어, 적어도 하나 의 프로그램은 개발자들 또는 어플리케이션의 설치 파일을 배포하는 파일 배포 시스템이 통신 모듈을 통해 제공하는 파일들에 의해 설치되는 컴퓨터 프로그램(예를 들어, 오퍼레이션 호출 목록을 생성 등을 위한 프로그 램 등)에 기반하여 메모리에 로딩될 수 있다. 프로세서는 기본적인 산술, 로직 및 입출력 연산을 수행함으로써, 컴퓨터 프로그램의 명령을 처리하도록 구성될 수 있다. 명령은 메모리 또는 통신 모듈에 의해 사용자 단말(미도시) 또는 다른 외부 시스템 으로 제공될 수 있다. 예를 들어, 프로세서는 복수의 프리미티브 오퍼레이션을 포함하는 호출 목록을 가 속기로 전송할 수 있다. 여기서, 가속기는 정보 처리 시스템에 포함되거나, 다른 서버/시스템에 포함될 수 있다. 통신 모듈은 네트워크를 통해 사용자 단말(미도시)과 정보 처리 시스템이 서로 통신하기 위한 구성 또는 기능을 제공할 수 있으며, 정보 처리 시스템이 외부 시스템(일례로 별도의 클라우드 시스템 등)과 통 신하기 위한 구성 또는 기능을 제공할 수 있다. 일례로, 정보 처리 시스템의 프로세서의 제어에 따 라 제공되는 제어 신호, 명령, 데이터 등이 통신 모듈과 네트워크를 거쳐 사용자 단말 및/또는 외부 시스 템의 통신 모듈을 통해 사용자 단말 및/또는 외부 시스템으로 전송될 수 있다. 예를 들어, 프로세서는 통 신 모듈을 통해서 호출 목록을 다른 서버/시스템에 포함된 가속기로 전송할 수 있다. 또한, 정보 처리 시스템의 입출력 인터페이스는 정보 처리 시스템과 연결되거나 정보 처리 시스 템이 포함할 수 있는 입력 또는 출력을 위한 장치(미도시)와의 인터페이스를 위한 수단일 수 있다. 도 2 에서는 입출력 인터페이스가 프로세서와 별도로 구성된 요소로서 도시되었으나, 이에 한정되지 않으 며, 입출력 인터페이스가 프로세서에 포함되도록 구성될 수 있다. 정보 처리 시스템은 도 2의 구성요소들보다 더 많은 구성요소들을 포함할 수 있다. 그러나, 대부분의 종래기술적 구성요소들을 명확하게 도시할 필요성은 없다. 정보 처리 시스템의 프로세서는 복수의 사용자 단말 및/또는 복수의 외부 시스템으로부터 수신된 정 보 및/또는 데이터를 관리, 처리 및/또는 저장하도록 구성될 수 있다. 일 실시예에 따르면, 프로세서는 인공지능 프로그램으로부터 트레이스를 획득하고, 트레이스에 기초하여 복수의 프리미티브 오퍼레이션을 포함하 는 호출 목록을 생성할 수 있다. 도 3은 본 개시의 일 실시예에 따른 프로세서의 내부 구성을 나타내는 블록도이다. 도 3에 예시된 바와 같이, 프로세서는 트레이스 획득부, 호출 목록 생성부 및 호출 목록 최적화부를 포함할 수 있다. 일 실시예에 따르면, 호출 목록 최적화부는 도 1의 컴파일러 패스를 포함할 수 있다. 트레이스 획득부는 인공지능 프로그램으로부터 트레이스를 획득할 수 있다. 일 실시예에 따르면, 트레이 스 획득부는 인공지능 프로그램을 실행하여, 연산과 연관된 복수의 코드 및/또는 복수의 프리미티브 오퍼 레이션을 추출하고, 추출된 복수의 코드 및/또는 복수의 프리미티브 오퍼레이션을 포함하는 트레이스를 생성할 수 있다. 예컨대, 트레이스 획득부는 인공지능 프로그램을 실행시킬 때, 인공지능 프로그램을 통해서 실 행되는 전체의 코드 및/또는 전체의 프리미티브 오퍼레이션을 획득하고, 이 중에서 연산과 연관된 복수의 코드 및/또는 프리미티브 오퍼레이션을 추출하고, 추출된 복수의 코드 및/또는 프리미티브 오퍼레이션을 포함하는 트 레이스를 생성할 수 있다. 여기서, 연산과 관련된 코드/프리미티브 오퍼레이션은 가속기의 연산과 관련된 것으 로서, 오퍼레이션 라이브러리에 포함된 오퍼레이션과 연관된 코드/프리미티브 오퍼레이션 일 수 있다. 호출 목록 생성부는 트레이스 획득부에 의해 생성된 트레이스에 기초하여, 복수의 프리미티브 오퍼레 이션을 포함하는 호출 목록을 생성할 수 있다. 일 실시예에 따르면, 호출 목록에 포함된 프리미티브 오퍼레이 션은 바이너리 형태가 아니라, 메모리 내의 자료 구조, 직렬화된 데이터 또는 텍스트 중 적어도 하나일 수 있다. 또한, 호출 목록에 포함된 복수의 프리미티브 오퍼레이션은 그래프 형태일 수 있다. 일 실시예에 따르 면, 호출 목록 생성부는 호출 목록에 포함된 복수의 프리미티브 오퍼레이션에 기초하여, 복수의 프리미티 브 오퍼레이션의 호출 순서와 상관 관계를 그래프 형태로 표현할 수 있다. 호출 목록이 그래프로 표현되는 예 시는 도 6을 참조하여 후술하기로 한다. 호출 목록 최적화부는 호출 목록 생성부에서 생성된 호출 목록에 대한 최적화를 진행할 수 있다. 최 적화된 호출 목록은 원본 호출 목록에 기초하여 생성된 것일 수 있다. 여기서, 원본 호출 목록은 호출 목록 생 성부에서 생성된 호출 목록일 수 있다. 일 실시예에 따르면, 호출 목록 최적화부는 적어도 하나의 컴파일러 패스에 원본 호출 목록을 적용하여, 원본 호출 목록에 대한 최적화를 진행할 수 있다. 여기서, 컴파 일러 패스는 원본 호출 목록을 최적화하기 위한 모듈이고, 호출 목록 최적화부는 적어도 하나의 컴파일러 패스를 포함할 수 있다. 일 실시예에 따르면, 프리미티브 오퍼레이션의 연산 타입, 프리미티브 오퍼레이션의 식별자(예컨대, 이름), 호 출 목록이 전송되는 가속기의 개수 등에 기초하여, 원본 호출 목록에 대한 최적화가 진행될 수 있다. 도 7 내 지 도 13을 참조하면, 다양한 컴파일러 패스를 통해서 원본 호출 목록이 최적화되는 방법에 대해서 설명하기로 한다. 도 4는 본 개시의 일 실시예에 따른, 인공지능 프로그램으로부터 획득된 트레이스의 예시를 나타내는 도면 이다. 도 4에 예시된 바와 같이, 연산과 관련된 복수의 코드가 트레이스에 포함될 수 있다. 또한, 트레 이스에는 복수의 프리미티브 오퍼레이션이 포함될 수 있다. 도 4에서는 합성곱(Conv2d) 연산, 배치 정규 화 연산(BatchNorm2d) 및 ReLU 연산과 관련된 복수의 프리미티브 오퍼레이션이 트레이스에 포함되고, 추가 적으로 입력 데이터와 출력 데이터가 트레이스에 포함된 것으로 예시되어 있다. 도 5는 본 개시의 일 실시예에 따른, 호출 목록을 예시하는 도면이다. 도 5를 참조하면, 적어도 하나의 프리미티브 오퍼레이션을 포함하는 호출 목록이 생성될 수 있다. 일 실시예에 따르면, 트레이스에 기초하 여, 호출 목록이 생성될 수 있다. 예컨대, 트레이스에 포함된 복수의 코드가 분석되는 것을 통해서, 복수 의 프리미티브 오퍼레이션이 트레이스로부터 추출되고, 추출된 복수의 프리미티브 오퍼레이션을 포함하는 호출 목록이 생성될 수 있다. 다른 예로서, 트레이스에 복수의 프리미티브 오퍼레이션이 포함된 경우, 트레이스로부터 복수의 프리미티브 오퍼레이션이 추출되고, 추출된 복수의 프리미티브 오퍼레이션을 포함하는 호출 목록이 생성될 수 있다. 일 실시예에 따르면, 트레이스에 포함된 코드/프리미티브 오퍼레이션의 실행 순서에 기초하여, 프리미티브 오퍼 레이션의 순서가 결정되고, 더불어 코드와 연관된 입력 데이터와 코드와 연관된 출력 데이터에 기초하여 프리미 티브 오퍼레이션의 입력 데이터와 출력 데이터가 결정될 수 있다. 도 5에서 호출 목록에 합성곱 연산과 연관된 프리미티브 오퍼레이션(Conv2d), 배치 정규화 연산과 연관된 프리미티브 오퍼레이션(BatchNorm2d) 및 ReLU 연산과 연관된 프리미티브 오퍼레이션(ReLU)이 포함된 것으로 예시되어 있다. 또한, 각각의 오퍼레이션에 는 입력 데이터와 출력 데이터가 결정된 것으로 예시되어 있다. 예컨대, 합성곱 연산과 연관된 프리미티브 오 퍼레이션(Conv)의 입력 데이터는 제1 텐서(Tensor#1)와 제2 텐서(Tensor#2)이고, 출력 데이터는 제3 텐서 (Tensor#3)일 수 있다. 또한, 호출 목록에 포함된 복수의 프리미티브 오퍼레이션 중에서 상관 관계를 가지는 오퍼레이션이 결정될 수 있다. 일 실시예에 따르면, 제1 프리미티브 오퍼레이션의 출력 데이터가 제2 프리미티브 오퍼레이션의 입력 데이터로 입력되는 경우, 제1 프리미티브 오퍼레이션과 제2 프리미티브 오퍼레이션 간에 상관 관계가 있는 것으 로 결정될 수 있다. 도 5를 예를 들면, 합성곱 연산과 연관된 프리미티브 오퍼레이션(Conv2d) 및 배치 정규화 와 연관된 프리미티브 오퍼레이션(BatchNorm2d)이 상관 관계가 있는 것으로 결정될 수 있다. 또 다른 예로서, 배치 정규화와 연관된 프리미티브 오퍼레이션(BatchNorm2d) 및 ReLU 연산과 연관된 프리미티브 오퍼레이션이 상 관 관계가 있는 것으로 결정될 수 있다. 프리미티브 오퍼레이션의 상관 관계에 대한 정보는 호출 목록에 기록 될 수 있다. 도 6은 본 개시의 일 실시예에 따른, 그래프로 표현된 호출 목록에 대한 예시를 나타내는 도면이다. 도 6 에 예시된 그래프는 도 5의 호출 목록에 기초하여 표현된 것일 수 있다. 도 6에 예시된 바와 같이, 위에서 아래의 순서로 프리미티브 오퍼레이션이 순차적으로 실행되는 데이터플로우 그래프(Data Flow Graph) 형 태로 표현될 수 있다. 도 6에서 입력 데이터와 출력 데이터는 사각형으로 표현되고, 프리미티브 오퍼레이션은 원형으로 표현된 것으로 예시되어 있다. 또한, 화살표의 방향은 프리미티브 오퍼레이션으로 입력되는 데이터 또는 프리미티브 오퍼레이션으부터 출력되는 데이터와 관련될 수 있다. 호출 목록이 적어도 하나의 가속기로 전송될 수 있다. 호출 목록을 수신한 가속기는 오퍼레이션 라이브러리를 액세스하여, 호출 목록에 포함된 복수의 프리미티브 오퍼레이션을 호출하고 실행할 수 있다. 한편, 원본 호출 목록이 적어도 하나의 컴파일러 패스에 적용되어, 원본 호출 목록에 포함된 복수의 프리미티브 오퍼레이션이 최적화될 수 있다. 여기서, 원본 호출 목록은 트레이스를 기초로 생성된 호출 목록이고, 컴파일 러 패스를 적용하기 전의 호출 목록일 수 있다. 이하, 도 7 내지 13을 참조하여, 다양한 컴파일러 패스를 통해서 원본 호출 목록이 최적화되는 다양한 방법에 대해서 설명하기로 한다. 설명의 편의를 위해서, 그래프로 표현된 호출 목록이 최적화되는 것을 예시하기로 한 다. 도 7은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제1 컴파일러 패스를 통과하여 제2 호출 목록 으로 최적화된 것을 예시하는 도면이다. 여기서, 제1 호출 목록은 원본 호출 목록이고, 제2 호출 목 록은 제1 호출 목록에 기초하여 생성된 최적화된 호출 목록일 수 있다. 일 실시예에 따르면, 제1 호출 목록에 포함된 복수의 프리미티브 오퍼레이션 식별자(예컨대, 이름, 인덱스 등)에 기초하여, 제1 호출 목록이 제1 컴파일러 패스에 적용 가능한지 여부가 결정될 수 있다. 예컨 대, 제1 컴파일러 패스는 제1 호출 목록에 포함된 복수의 프리미티브 오퍼레이션 식별자와 실행 순서 에 기초하여, 병합 대상이 되는 복수의 프리미티브 오퍼레이션이 존재하는지 여부를 판정할 수 있다. 여기서, 제1 컴파일러 패스는 복수의 프리미티브 오퍼레이션을 하나의 프리미티브 오퍼레이션으로 병합하기 위한 모듈일 수 있다. 일 실시예에 따르면, 병합 가능한 복수의 프리미티브 오퍼레이션의 식별자(예컨대, 이름)와 병합시 이용되는 오 퍼레이션 식별자를 포함하는 병합 참조 데이터이 정보 처리 시스템에 저장될 수 있고, 제1 컴파일러 패스 는 저장된 병합 참조 데이터에 기초하여 제1 호출 목록에 포함된 모든 프리미티브 오퍼레이션 중에서 병합 대상이 되는 복수의 프리미티브 오퍼레이션을 결정할 수 있다. 일 실시예에 따르면, 제1 컴파일러 패스는 연속적으로 실행되는 복수의 프리미티브 오퍼레이션을 병합 대상 프리미티브 오퍼레이션으로 결정하고, 병합 대 상으로 결정된 프리미티브 오퍼레이션을 하나의 프리미티브 오퍼레이션으로 병합할 수 있다. 도 7에서는 제1 호출 목록에 포함된 제1 프리미티브 오퍼레이션(Conv), 제2 프리미티브 오퍼레이션(BN2d) 및 제3 프리미티브 오퍼레이션(ReLU)이 병합 대상 프리미티브 오퍼레이션으로 결정되어, 제1 내지 제3 프리미티 브 오퍼레이션이 제4 프리미티브 오퍼레이션(FusedCBR)으로 병합되는 것으로 예시되어 있다. 여기서, 제4 프리 미티브 오퍼레이션(FusedCBR)은 제1 내지 제3 프리미티브 오퍼레이션을 통합하여 수행하는 오퍼레이션일 수 있 다. 일 실시예에 따르면, 병합 대상인 제1 내지 제3 프리미티브 오퍼레이션의 각각으로 입력되는 복수의 입력 데이 터 중에서, 제4 프리미티브 오퍼레이션(FusedCBR)로 입력되는 입력 데이터가 결정될 수 있다. 일 실시예에 따 르면, 복수의 프리미티브 오퍼레이션을 하나의 오퍼레이션으로 병합하는 경우에, 병합된 프리미티브 오퍼레이션 으로 입력되는 적어도 하나의 입력 데이터의 식별자가 병합 참조 데이터에 기록될 수 있다. 여기서, 입력 데이 터의 식별자는 병합 대상이 되는 복수의 프리미티브 오퍼레이션의 각각에 입력되는 복수의 입력 데이터 중 어느 하나를 지칭할 수 있다. 일 실시예에 따르면, 병합 참조 데이터에 기초하여, 병합 대상인 제1 내지 제3 프리미 티브 오퍼레이션의 각각으로 입력되는 복수의 입력 데이터 중에서, 제4 프리미티브 오퍼레이션(FusedCBR)으로 입력되는 입력 데이터가 결정될 수 있다. 도 7에서는 최적화된 제2 호출 목록에 포함된 제4 프리미티브 오퍼레이션(FusedCBR)으로 입력되는 입력 데 이터가 제1 텐서(Tensor#1), 제2 텐서(Tensor#2) 및 제4 텐서(Tensor#4)인 것으로 예시되어 있다. 여기서, 제 1 텐서(Tensor#1)와 제2 텐서(Tensor#2)는 제1 호출 목록에서 제1 프리미티브 오퍼레이션(Conv)으로 입력 되는 입력 데이터이고, 제4 텐서(Tensor#4)는 제2 프리미티브 오퍼레이션(BN2d)으로 입력되는 입력 데이터일 수 있다. 상술한 병합 대상이 되는 프리미티브 오퍼레이션 선정과 오퍼레이션 병합 등은 제1 컴파일러 패스 에 의해 수행될 수 있다. 제1 컴파일러 패스를 통과한 제2 호출 목록은 제1 호출 목록과 비교하여 오퍼레이션 개수가 적 을 수 있다. 제2 호출 목록에 기초하여 연산이 수행되는 경우, 제1 호출 목록에 기초하여 연산이 수 행되는 것과 비교하여, 적은 컴퓨팅 자원이 이용되고 연산 속도도 더욱 빠를 수 있다. 도 8은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제2 컴파일러 패스를 통과하여 제1 서브 호출 목록 및 제2 서브 호출 목록으로 변경된 것을 예시하는 도면이다. 여기서, 제1 호출 목록은 원 본 호출 목록이고, 제1 서브 호출 목록 및 제2 서브 호출 목록은 제1 호출 목록에 기초하여 생 성된 최적화된 호출 목록일 수 있다. 여기서, 제2 컴파일러 패스는 입력 데이터를 병렬 처리하기 위한 모 듈일 수 있다. 제2 컴파일러 패스는 복수의 가속기에 의해 병렬 처리되도록, 제1 호출 목록에 기초 하여 제1 서브 호출 목록과 제2 서브 호출 목록을 생성할 수 있다. 일 실시예에 따르면, 호출 목록 이 전송되는 가속기의 수가 복수인 경우에, 제1 호출 목록이 제2 컴파일러 패스에 적용될 수 있다. 추가적으로, 제1 호출 목록에 포함된 입력 데이터가 분할되어 연산 가능한 경우에, 제1 호출 목록이 제2 컴파일러 패스에 적용될 수 있다. 도 8에서, 제1 호출 목록에는 복수의 선형 변환 프리미티브 오퍼레이션이 포함되는 것으로 예시되어 있다. 도 8에서 'Act'는 액티베이션(activation)을 나타내고, 'Param'는 기계학습 모델의 레이어에 적용되는 파라미터 데이터를 나타낼 수 있다. 여기서, 액티베이션은 기계학습 모델의 레이어와 연관된 연산 결과로서 프리미티브 오퍼레이션의 입력 데이터로서 이용될 수 있고, 파라미터 데이터는 레이어와 적용되는 가중치와 연관될 수 있다. 기계학습 모델이 반복적으로 학습될수록 파라미터 데이터는 최적의 값으로 수렴될 수 있다. 또한, 도 8 에서 'linear'와 연관된 타원은 입력 데이터 및/또는 액티베이션과 파라미터 데이터를 기초로 연산을 수행하는 프리미티브 오퍼레이션일 수 있다. 입력 데이터 및 액티베이션의 각각은 복수로 분할될 수 있다. 이렇게 입력 데이터 및 액티베이션의 각각이 복 수로 분할 가능한 경우, 분할된 입력 데이터/액티베이션을 포함하도록 복수의 서브 호출 목록(830, 840)이 생성 될 수 있다. 예컨대, 입력 데이터(Input)는 제1 서브 입력 데이터(Input-1) 및 제2 서브 입력 데이터(Input- 2)로 분할될 수 있고, 이 경우 제1 서브 입력 데이터(Input-1)는 제1 서브 호출 목록에 포함되고, 제2 서 브 입력 데이터(Input-2)는 제2 서브 호출 목록에 포함될 수 있다. 일 실시예에 따르면, 제2 컴파일러 패스를 통해, 입력 데이터(input)는 미니 배치(mini-batch) 크기에 기 초하여, 복수로 분할되어 처리될 수 있다. 예컨대, 제1 호출 목록을 병렬 처리하기 위한 가속기의 개수와 미니 배치의 크기에 기초하여, 입력 데이터(input)가 복수의 서브 입력 데이터로 분할될 수 있다. 가령, 입력 데이터(input)의 미니 배치 크기가 '16'이고 가속기의 개수가 '2'개인 경우, 입력 데이터(input)는 8개의 미니 배치를 각각 포함하는 제1 서브 입력 데이터(Input-1)와 제2 서브 입력 데이터(Input-2)로 분할될 수 있다. 입력 데이터(Input)가 미니 배치 단위의 서브 입력 데이터(Input-1, Input-2)로 분할되는 경우, 액티베이션(Act 0 내지 Act 2)도 미니 배치 단위의 서브 액티베이션(Act 0-1 내지 Act 2-2)로 분할될 수 있고, 추가적으로 출력 데이터(Output)도 배치 단위의 서브 출력 데이터(Output-1, Output-2)로 분할될 수 있다. 입력 데이터(Inpu t)가 서브 입력 데이터(Input-1, Input-2)로 분할되는 경우, 서브 입력 데이터(Input-1, Input-2)에 기초하여 부분적인 연산이 기계학습 모델(예를 들어, 인공신경망 모델 등)을 통해 수행되어, 기계학습 모델을 통해 출력 되는 액티베이션(Act)도 분할되어 출력될 수 있다. 도 8에 예시된 바와 같이, 제1 액티베이션(Act 0)은 제1 서 브 액티베이션(Act 0-1)과 제2 서브 액티베이션(Act 0-2)으로 분할될 수 있고, 이 경우 제1 서브 액티베이션 (Act 0-1)은 제1 서브 호출 목록에 포함되고, 제2 서브 액티베이션(Act 0-2)은 제2 서브 호출 목록에 포함될 수 있다. 여기서, 제1 서브 액티베이션(Act 0-1)은 제1 서브 입력 데이터(Input-1)를 기초로 산출될 수 있고, 제2 서브 액티베이션(Act 0-2)은 제2 서브 입력 데이터(Act 0-2)를 기초로 산출될 수 있다. 입력 데이터/액티베이션의 분할 개수는 호출 목록을 전송하는 가속기의 개수와 상응할 수 있다. 예컨대, 호출 목록이 전송되는 가속기 개수가 n개(여기서, n은 2 이상의 자연수)인 경우, 입력 데이터/액티베이션의 분할 개 수도 n개일 수 있다. 분할된 데이터의 크기/개수는 균등할 수 있고, 또는 차등적일 수 있다. 예컨대, 입력 데 이터가 제1 서브 입력 데이터와 제2 서브 입력 데이터로 분할된 경우, 제1 서브 입력 데이터의 크기와 제2 서브 입력 데이터의 크기가 동일할 수 있고, 제1 서브 입력 데이터의 크기가 제2 서브 입력 데이터의 크기보다 크거 나 작을 수 있다. 호출 목록이 전송되는 가속기의 개수는 사용자 입력에 기초하여 결정될 수 있고, 또는 입력 데이터/액티베이션의 각각을 분할할 수 있는 개수를 기초로 결정될 수 있다. 도 8에서는 호출 목록이 전송되는 가속기가 두 개이고, 이에 따라 입력 데이터(Input) 및 액티베이션(Act)이 두 개로 분할된 것으로 예시되어 있다. 도 8에서는 입력 데이터(Input)가 제1 서브 입력 데이터(Input-1)와 제2 서브 입력 데이터(Input-2)로 분할된 것으로 예시되어 있다. 또한, 도 8에서는 제1 액티베이션(Act 0)이 복수 의 서브 액티베이션(Act 0-1, Act 0-2)으로 분할되고, 또한 제2 및 제3 액티베이션(Act 1, Act 2) 각각도 복수 의 서브 액티베이션(Act 1-1, Act 1-2, Act 2-1, Act 2-2)으로 분할된 것으로 예시되어 있다. 추가적으로, 출 력 데이터(Output)도 제1 서브 출력 데이터(Output-1)와 제2 서브 출력 데이터(Output-2)로 분할된 것으로 예시 되어 있다. 제2 컴파일러 패스로부터 획득된 제1 서브 호출 목록은 분할된 입력 데이터/액티베이션 중에서 일부 에 포함할 수 있고, 제2 서브 호출 목록은 분할된 입력 데이터/액티베이션 중에서 나머지 일부를 포함할 수 있다. 도 8에 예시된 바와 같이, 제1 서브 호출 목록은 제1 서브 입력 데이터(Input-1) 및 복수의 서 브 액티베이션(Act 0-1, Act 1-1, Act 2-1)를 포함하고, 제2 서브 호출 목록은 제2 서브 입력 데이터 (Input-2) 및 복수의 서브 액티베이션(Act 0-2, Act 1-2, Act 2-2)를 포함할 수 있다. 여기서, 제1 서브 출력 데이터(Output-1)는 제1 서브 호출 목록에 기초하여 산출된 결과 데이터일 수 있고, 제2 서브 출력 데이터 (Output-2)는 제2 서브 호출 목록에 기초하여 산출된 결과 데이터일 수 있다. 즉, 제1 서브 호출 목록 에 포함된 제1 서브 입력 데이터(Input-1) 및 복수의 서브 액티베이션(Act 0-1, Act 1-1, Act 2-1)의 각 각과 연관된 복수의 프리미티브 오퍼레이션의 실행되어, 제1 서브 출력 데이터(Output-1)가 출력될 수 있다. 또한, 제2 서브 호출 목록에 포함된 제1 서브 입력 데이터(Input-2) 및 복수의 서브 액티베이션(Act 0-2, Act 1-2, Act 2-2)의 각각과 연관된 복수의 프리미티브 오퍼레이션의 실행되어, 제2 서브 출력 데이터(Output- 2)가 출력될 수 있다. 제2 컴파일러 패스로부터 획득된 호출 목록(830, 840) 중에서, 제1 서브 호출 목록은 제1 가속기(GPU 0)으로 전송되고, 제2 서브 호출 목록은 제2 가속기(GPU 1)으로 전송되어, 제1 서브 호출 목록에 포 함된 프리미티브 오퍼레이션과 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이션이 제1 가속기(GPU 0) 와 제2 가속기(GPU 1)를 통해서 병렬적으로 실행될 수 있다. 상술된 입력 데이터/액티베이션 분할 등은 제2 컴 파일러 패스에 의해서 수행될 수 있다. 제1 가속기(GPU 0)와 제2 가속기(GPU 1)를 통해서 실행된 결과는 하나 이상의 가속기 및/또는 하나 이상의 프로 세서로 취합될 수 있다. 예컨대, 제2 가속기(GPU 1)는 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이 션을 전부 실행한 후에 획득된 제2 서브 출력 데이터(Output-2)를 제1 가속기(GPU 0)로 전송할 수 있다. 또한, 제1 가속기(GPU 0)는 제1 서브 호출 목록에 포함된 프리미티브 오퍼레이션을 전부 실행하여 획득된 제1 서 브 출력 데이터(Output-1)와 제2 가속기(GPU 1)로부터 수신한 제2 서브 출력 데이터(Output-2)를 기초로, 최종 결과 데이터를 생성할 수 있다. 여기서, 최종 결과 데이터는 기울기(gradient)와 연관된 값일 수 있다. 가령, 제1 가속기(GPU 0)로부터 수신된 제1 서브 출력 데이터(Output-1)는 제1 기울기와 연관되고, 제2 가속기(GPU 1)로부터 수신된 제2 서브 출력 데이터(Output-2)가 제2 기울기와 연관된 경우, 제1 기울기와 제2 기울기가 반영되어 최종 결과 데이터가 획득될 수 있다. 몇몇 실시예에서, 제1 가속기(GPU 0)와 제2 가속기(GPU 1)를 통해서 실행된 결과(Output-1, Output-2)는, 특정 가속기에 취합되지 않고 후속 처리될 수 있다. 예컨대, 제1 가속기(GPU 0)와 제2 가속기(GPU 1)의 각각을 통해 생성된 서브 출력 데이터(Output-1, Output-2)가 특정 가속기의 메모리에 저장될 수 있다. 이러한 경우, 특정 가속기는 자신의 메모리에 저장된 서브 출력 데이터 (Output-1, Output-2)에 기초하여, 최종 결과 데이터를 생 성할 수 있다. 다른 예로서, 제1 가속기(GPU 0)와 제2 가속기(GPU 1)의 각각을 통해서 생성된 서브 출력 데이 터(Output-1, Output-2)가 정보 처리 시스템의 주 메모리에 저장될 수 있다. 이러한 경우, 정보 처리 시스템에 포함된 프로세서가 주 메모리에 저장된 서브 출력 데이터(Output-1, Output-2)에 기초하여, 최종 결과 데이터를 생성할 수 있다. 또 다른 예로서, 제1 가속기(GPU 0)를 통해서 생성된 제1 서브 출력 데이터(Output-1)는 다른 가속기 및 메모리에 전송되지 않고 제1 가속기(GPU 0)에 의해 관리될 수 있고, 마찬가지로 제2 가속기(GPU 1)를 통해서 생성된 제2 서브 출력 데이터(Output-2)도 다른 가속기 및 메모리에 전송되지 않고 제2 가속기(GPU 1)에 의해 관리될 수 있다. 이러한 경우, 제1 서브 출력 데이터(Output-1)와 제2 서브 출력 데이터(Output-2)는 계 속적으로 분리된 상태로 유지될 수 있다. 한편, 복수의 서브 호출 목록(830, 840)을 전송할 타깃 가속기가 가속기의 위치에 기초하여 결정될 수 있다. 일 실시예에 따르면, 출력 데이터의 취합을 수행할 때의 통신 지연을 최소화할 수 있도록, 서브 호출 목록(830, 840)를 수신한 제1 가속기(GPU 0)와 제2 가속기(GPU 1)는 동일한 노드(Node)에 포함되도록, 복수의 호출 목록 (830, 840)이 전송되는 타깃 가속기가 결정될 수 있다. 여기서, 노드는 물리적 또는 논리적으로 분리된 컴퓨팅 장치(예컨대, 서버, 사용자 단말 등)를 지칭할 수 있다. 만약, 동일한 노드에 포함된 복수의 가속기가 검색되 지 않은 경우, 제1 가속기(GPU 0)를 포함하는 제1 노드와 제2 가속기(GPU 1)를 포함하는 제2 노드가 인접하여 위치하도록, 복수의 서브 호출 목록(830, 840)을 전송할 타깃 가속기가 결정될 수 있다. 이 경우, 제1 노드는 제2 노드에 대한 이웃 노드일 수 있다. 상술한 바와 같이, 제1 호출 목록이 제2 컴파일러 패스를 통과하면, 데이터 병렬 처리를 위한 복수의 서브 호출 목록(830, 840)이 획득될 수 있다. 복수의 서브 호출 목록(830, 840)의 각각은 복수의 가속기(GPU 0, GPU 1)로 전송되고, 복수의 서브 호출 목록(830, 840)에 포함된 각각의 프리미티브 오퍼레이션이 병렬적으로 실행될 수 있다. 복수의 가속기가 이용되어 데이터에 대한 병렬 처리가 수행되면, 연산 속도도 더욱 향상될 수 있다. 도 9는 본 개시의 일 실시예에 따른, 제1 호출 목록이 제3 컴파일러 패스를 통과하여 제1 서브 호출 목록 및 제2 서브 호출 목록으로 변경된 것을 예시하는 도면이다. 여기서, 제1 호출 목록은 원 본 호출 목록이고, 제1 서브 호출 목록 및 제2 서브 호출 목록은 제1 호출 목록에 포함된 프리 미티브 오퍼레이션이 분할된 호출 목록일 수 있다. 제1 호출 목록이 제3 컴파일러 패스를 통과하면, 제1 서브 호출 목록과 제2 서브 호출 목록으로 분할될 수 있다. 여기서, 제3 컴파일러 패스는 호출 목록을 분할하고, 분할된 호출 목록에 포함된 프리미티브 오퍼레이션을 파이프라인 기반으로 병렬화하기 위한 모듈일 수 있다. 호출 목록이 전송되는 가속기의 수가 복수인 경우에, 제1 호출 목록이 제3 컴파일러 패스에 적용될 수 있다. 서브 호출 목록(930, 940)이 전송되는 가속기의 개수는 사용자 입력에 기초하여 결정될 수 있고, 또 는 입력 데이터/출력 데이터/액티베이션의 각각이 분할 가능한 개수에 기초하여 결정될 수 있다. 도 9에 예시된 바와 같이, 가속기의 개수에 기초하여, 제1 호출 목록이 복수의 서브 호출 목록(930, 940) 으로 분할될 수 있다. 가령, 제1 호출 목록에 포함된 복수의 프리미티브 오퍼레이션은 제1 서브 그룹과 제2 서브 그룹으로 분할되고, 제1 서브 그룹에 포함된 프리미티브 오퍼레이션을 포함하는 제1 서브 호출 목록 및 제2 서브 그룹에 포함된 프리미티브 오퍼레이션을 포함하는 제2 서브 호출 목록이 생성될 수 있 다. 제1 서브 호출 목록과 제2 서브 호출 목록을 각기 다른 가속기로 전송될 수 있다. 도 9에서는 제1 서브 호출 목록은 제1 가속기(GPU 0)로 전송되고, 제2 서브 호출 목록은 제2 가속기(GPU 1)로 전 송되는 것으로 예시되어 있다. 일 실시예에 따르면, 분할된 제1 서브 목록과 제2 서브 호출 목록 간에 파이프라이닝(pipelining)될 수 있다. 파이프라이닝을 위해서, 제1 서브 호출 목록에 포함된 프리미티브 오퍼레이션을 통해 출력된 결과 데이터가 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이션의 입력 데이터로 제공되도록, 제1 서 브 호출 목록 또는 제2 서브 호출 목록 중 적어도 하나에 명령이 삽입될 수 있다. 예컨대, 제1 서브 호출 목록에 포함된 프리미티브 오퍼레이션들 중에서 가장 마지막 순서에 실행되는 프리미티브 오퍼레이션을 통해 출력된 데이터가, 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이션들 중에서 가장 먼저 실행 되는 프리미티브 오퍼레이션의 입력 데이터로 제공되도록, 제1 서브 호출 목록에 결과 데이터 제공과 연관 된 명령이 삽입될 수 있다. 여기서, 결과 데이터 제공과 연관된 명령은 제1 서브 호출 목록에 포함된 프 리미티브 오퍼레이션들 중에서 가장 마지막 순서에 실행되는 프리미티브 오퍼레이션을 통해 출력된 데이터를 제 2 가속기(GPU 1)로 전송하기 위한 명령일 수 있다. 이 경우, 제2 가속기(GPU 1)는 제1 서브 호출 목록에 기초한 출력 데이터가 수신되면, 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이션을 순차적으로 실행 할 수 있다. 도 9에서는 'linear' 연관된 타원이 입력 데이터 및/또는 액티베이션과 파라미터 데이터를 기초로 연산을 수행 하는 프리미티브 오퍼레이션인 것으로 예시되어 있다. 도 9에 예시된 바와 같이, 제1 프리미티브 오퍼레이션 및 제2 프리미티브 오퍼레이션은 제1 서브 호출 목록에 포함되고, 제3 프리미티브 오퍼레이션 및 제4 프리미티브 오퍼레이션은 제2 서브 호출 목록에 포함될 수 있다. 제2 프리미티브 오퍼레이션로부터 출력된 결과 데이터(Act 1)를 제2 가속기(GPU 1)로 전송하기 위한 제1 명령이 제2 호출 목록에 삽입될 수 있다. 추가적으로 또는 이와 달리, 제2 프리미티브 오퍼레이션의 결과 데이터(Act 1)를 제1 가속기(GPU 0)로부터 수신하기 위한 제2 명령이 제3 호출 목록에 삽입될 수 있 다. 상술된 명령 삽입과 호출 목록 분할은 제3 컴파일러 패스를 통해서 수행될 수 있다. 한편, 복수의 서브 호출 목록(930, 940)을 전송할 타깃 가속기가 가속기의 위치에 기초하여 결정될 수 있다. 일 실시예에 따르면, 가속기들 간의 통신 지연이 최소화될 수 있도록, 삽입된 명령을 통해서 서로 통신하는 제1 가속기(GPU 0)와 제2 가속기(GPU 1)가 동일한 노드(Node)에 포함되도록, 복수의 서브 호출 목록(930, 940)을 전 송할 타깃 가속기가 결정될 수 있다. 여기서, 노드는 물리적 또는 논리적으로 분리된 컴퓨팅 장치(예컨대, 서 버, 사용자 단말 등)를 지칭할 수 있다. 만약, 동일한 노드에 포함된 복수의 가속기가 검색되지 않은 경우, 제1 가속기(GPU 0)를 포함하는 제1 노드와 제2 가속기(GPU 1)를 포함하는 제2 노드가 인접하여 위치하도록, 복수의 서브 호출 목록(930, 940)을 전송할 타 깃 가속기가 결정될 수 있다. 이 경우, 제1 노드는 제2 노드에 대한 이웃 노드일 수 있다. 상술한 바와 같이, 분할된 서브 호출 목록(930, 940)이 복수의 가속기를 통해서 처리되면, 정보 처리 시스템의 전체 컴퓨팅 자원이 보다 효율적으로 관리될 수 있다. 예컨대, 파이프라인에 기초하여, 복수의 서브 호출 목록 (930, 940)이 복수의 가속기를 통해 병렬 처리될 수 있고, 이에 따라 단위 시간당 가속기의 처리량이 늘어나고, 전체 연산 시간이 짧아질 수 있다. 또한, 전체 연산이 작은 연산으로 분할되어 복수의 가속기를 통해서 병렬 처리되어, 복수의 가속기의 각각에서 사용하는 메모리 자원이 줄어들 수 있다. 또한, 분할된 서브 호출 목록 (930, 940)이 부하가 적은 가속기로 할당되고 처리되어, 유휴 상태에 있는 가속기 개수가 최소화될 수 있다. 도 10은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제3 컴파일러 패스를 통과하여 제1 서브 호출 목 록 내지 제4 서브 호출 목록으로 변경된 것을 예시하는 도면이다. 여기서, 제3 컴파일러는 제1 호 출 목록에 기초하여 제1 내지 제4 서브 호출 목록(1020 내지 1050)을 생성할 수 있다. 일 실시예에 따르 면, 제3 컴파일러는 제1 호출 목록을 병렬 처리하기 위한 가속기의 개수와 원본 호출 목록에 기초 하여, 복수의 서브 호출 목록(1020 내지 1050)을 생성할 수 있다. 도 10에 예시된 서브 호출 목록(1020 내지 1050)은 4개의 가속기(GPU 0 내지 GPU 3)에 대한 파이프라인 병렬화와 연관될 수 있다. 도 10에 예시된 원본 호출 목록에는 복수의 선형 변환 프리미티브 오퍼레이션이 포함되는 것으로 예시되 어 있다. 도 10에서 'Act'는 액티베이션(activation)을 나타내고, 'Param'는 기계학습 모델의 레이어에 적용되 는 파라미터 데이터를 나타낼 수 있다. 또한, 도 10에서 'linear'와 연관된 타원은 입력 데이터 및/또는 액티 베이션과 파라미터 데이터를 기초로 연산을 수행하는 프리미티브 오퍼레이션일 수 있다. 일 실시예에 따르면, 입력 데이터(input)는 배치(batch) 단위의 복수의 서브 입력 데이터로 분할되어 처리될 수 있다. 도 10에서 입력 데이터(input)가 4개의 배치 단위의 서브 입력 데이터(input-1 내지 input-4)로 분할된 것으로 예시되어 있다. 입력 데이터(Input)가 서브 입력 데이터(Input-1, 내지 Input-4)로 분할되는 경우, 액 티베이션(Act 0 내지 Act 2)도 배치 단위의 복수의 서브 액티베이션(Act 0-1 내지 Act 2-4)로 분할될 수 있고, 추가적으로 출력 데이터(Output)도 배치 단위의 복수의 서브 출력 데이터(Output-1 내지 Output-4)로 분할될 수 있다. 도 10에 예시된 바와 같이, 복수의 프리미티브 오퍼레이션(linear_0 내지 linear_3) 중에서, 적어도 하나가 서브 호출 목록(1020 내지 1050)에 포함될 수 있다. 제1 서브 호출 목록에 제1 프리미티브 오퍼 레이션(linear_0)이 포함되고, 제2 서브 호출 목록에 제2 프리미티브 오퍼레이션(linear_1)이 포함되고,제3 서브 호출 목록에 제3 프리미티브 오퍼레이션(linear_2)이 포함되고, 제4 서브 호출 목록에 제 4 프리미티브 오퍼레이션(linear_3)이 포함된 것으로, 도 10에서 예시되어 있다. 일 실시예에 따르면, 서브 호출 목록(1020 내지 1050) 중에서, 둘 이상이 파이프라이닝(pipelining)될 수 있다. 도 10에서는 제1 서브 호출 목록과 제2 서브 호출 목록이 파이프라이닝되고, 제2 서브 호출 목록 과 제3 서브 호출 목록이 파이프라이닝되고, 제3 서브 호출 목록과 제4 서브 호출 목록 이 파이프라이닝된 것으로 예시되어 있다. 파이프라이닝을 위해서, 제1 서브 호출 목록에 포함된 프리미티브 오퍼레이션을 통해 출력된 결과 데이터 가 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이션의 입력 데이터로 제공되도록, 제1 서브 호출 목 록 또는 제2 서브 호출 목록 중 적어도 하나에 명령이 삽입될 수 있다. 예컨대, 제1 서브 호출 목 록에 포함된 제1 프리미티브 오퍼레이션(linear_0)을 통해 출력된 데이터(Act 0-1 내지 Act 0-4)의 각각 이, 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이션(linear_1)의 입력 데이터로 제공되도록, 제1 서 브 호출 목록에 결과 데이터 제공과 연관된 명령이 삽입될 수 있다. 여기서, 결과 데이터 제공과 연관된 명령은 제1 서브 호출 목록에 포함된 제1 프리미티브 오퍼레이션(linear_0)을 통해 출력된 데이터를 제2 가속기(GPU 1)로 전송하기 위한 명령일 수 있다. 유사하게, 제2 서브 호출 목록에 포함된 제2 프리미티브 오퍼레이션(linear_1)을 통해 출력된 데이터(Act 1-1 내지 Act 1-4)의 각각이, 제3 서브 호출 목록에 포함된 프리미티브 오퍼레이션(linear_2)의 입력 데 이터로 제공되도록, 제2 서브 호출 목록에 결과 데이터 제공과 연관된 명령이 삽입될 수 있다. 또한, 제 3 서브 호출 목록에 포함된 제3 프리미티브 오퍼레이션(linear_2)을 통해 출력된 데이터(Act 2-1 내지 Act 2-4)의 각각이, 제4 서브 호출 목록에 포함된 제4 프리미티브 오퍼레이션(linear_3)의 입력 데이터로 제공되도록, 제3 서브 호출 목록에 결과 데이터 제공과 연관된 명령이 삽입될 수 있다. 도 10에 예시된 바와 같이, 서브 호출 목록(1020 내지 1050)가 복수의 가속기(GPU 0 내지 GPU 3)를 전송되고, 복수의 가속기(GPU 0 내지 GPU 3)를 통해 복수의 서브 호출 목록(1020 내지 1050)이 병렬 처리될 수 있다. 한편, 도 10에서는 하나의 가속기(GPU 0 내지 GPU 3)가 하나의 프리미티브 오퍼레이션을 실행하는 것으로 예시 되어 있으나, 본 개시는 이에 한정되지 않고, 하나의 가속기가 복수의 프리미티브 오퍼레이션을 실행하고, 복수 의 오퍼레이션의 각각을 통해 출력된 결과를 다른 가속기로 전송할 수 있다. 일 실시예에 따르면, 가속기의 성 능 또는 상태 중 적어도 하나에 기초하여, 복수의 프리미티브 오퍼레이션 중에서 특정 가속기에 할당되는 프리 미티브 오퍼레이션의 개수가 결정될 수 있다. 예컨대, 가속기의 스루풋(throghput)이 많거나 메모리 용량이 크 거나 가속기의 이용률이 낮은 경우, 가속기에 보다 많은 개수의 프리미티브 오퍼레이션을 포함하는 서브 호출 목록이 전송될 수 있다. 상술한 바와 같이, 서브 호출 목록(1020 내지 1050)이 복수의 가속기를 통해서 처리되면, 정보 처리 시스템의 전체 컴퓨팅 자원이 보다 효율적으로 관리될 수 있다. 예컨대, 파이프라인에 기초하여, 복수의 서브 호출 목록 (1020 내지 1050)이 복수의 가속기를 통해 병렬 처리될 수 있고, 이에 따라 단위 시간당 가속기의 처리량이 늘 어나고, 전체 연산 시간이 짧아질 수 있다. 또한, 전체 연산이 작은 연산으로 분할되어 복수의 가속기를 통해 서 병렬 처리되어, 복수의 가속기의 각각에서 사용하는 메모리 자원이 줄어들 수 있다. 또한, 분할된 서브 호 출 목록(1020 내지 1050)이 부하가 적은 가속기로 할당되고 처리되어, 유휴 상태에 있는 가속기 개수가 최소화 될 수 있다. 도 11은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제4 컴파일러 패스를 통과하여 제1 서브 호 출 목록 및 제2 서브 호출 목록으로 변경된 것을 예시하는 도면이다. 여기서, 제1 호출 목록 은 원본 호출 목록이고, 제1 서브 호출 목록 및 제2 서브 호출 목록은 제1 호출 목록 에 기초하여 생성된 호출 목록일 수 있다. 제1 호출 목록이 제4 컴파일러 패스를 통과하면, 제1 서브 호출 목록과 제2 서브 호출 목록이 획득될 수 있다. 여기서, 제4 컴파일러 패스는 파 라미터 데이터를 병렬 처리하기 위한 모듈일 수 있다. 호출 목록이 전송되는 가속기의 수가 복수인 경우에, 제 1 호출 목록이 제4 컴파일러 패스에 적용될 수 있다. 도 11에서는 제1 호출 목록에는 복수의 선형 변환 프리미티브 오퍼레이션이 포함되는 것으로 예시되어 있 다. 도 11에서 'Param'는 기계학습 모델의 레이어에 적용되는 파라미터 데이터인 것으로 예시되어 있다. 도 11에 예시된 액티베이션(Act)은 기계학습 모델의 레이어와 연관된 연산 결과일 수 있고, 파라미터 데이터는 레 이어와 적용되는 가중치와 연관될 수 있다. 또한, 'linear' 텍스트를 가지는 타원이 입력 데이터 및/또는 액티베이션과 파라미터 데이터를 기초로 연산을 수행하는 프리미티브 오퍼레이션일 수 있다. 일 실시예에 따르면, 각각의 파라미터 데이터는 복수의 파라미터를 포함할 수 있다. 여기서, 복수의 파라미터 는 특정 레이어에 포함된 노드에 적용되는 복수의 가중치일 수 있다. 복수의 가중치의 각각은 연산에서 변수 (예컨대, 입력 값) 및/또는 상수에 적용되는 가중치일 수 있다. 호출 목록이 전송되는 가속기의 개수에 기초하여, 파라미터 데이터가 분할되는 개수가 결정되고, 결정된 개수에 기초하여 파라미터 데이터가 결정된 개수만큼 분할될 수 있다. 일 실시예에 따르면, 복수의 프리미티브 오퍼레 이션의 각각에 적용되는 복수의 파라미터의 각각이, 결정된 개수만큼 분할될 수 있다. 분할된 파라미터 데이터 에는 균등 또는 차등적인 개수의 파라미터가 포함될 수 있다. 분할된 파라미터 데이터의 각각을 포함하는 복수의 서브 호출 목록(1130, 1140)이 생성될 수 있다. 도 11에서 는 복수의 파라미터 데이터의 각각이 2개로 분할된 것으로 예시되어 있다. 즉, 제1 파라미터 데이터(Param 0) 가 2개의 서브 파라미터 데이터(P0-1, P0-2)로 분할되고, 다른 파라미터 데이터(Param 1 ~ Param 3)도 2개의 서 브 파라미터 데이터(P1-1, P1-2, P2-1, P2-2, P3-1, P3-2)로 분할된 것으로 예시되어 있다. 또한, 분할된 서 브 파라미터 데이터 제1 그룹에 해당하는 서브 파라미터 데이터(P0-1, P1-1, P2-1, P3-1)가 제1 서브 호출 목록 에 포함되고, 제2 그룹에 해당하는 복수의 서브 파라미터 데이터(P0-1, P1-1, P2-1, P3-1)가 제2 서브 호 출 목록에 포함된 것으로 예시되어 있다. 분할된 파라미터 데이터를 이용하여 오퍼레이션이 수행되는 경우, 특정 가속기에서는 프리미티브 오퍼레이션의 일부만이 수행될 수 있다. 예컨대, 제1 가속기(GPU 0)가 제1 서브 호출 목록에 포함된 제1 프리미티브 오퍼레이션을 실행하는 경우, 제1 가속기(GPU 0)는 제1 서브 파라미터 데이터(P0-1)에 기초한 연산을 수 행할 수 있을 뿐, 제2 서브 파라미터 데이터(P0-2)에 기초한 연산을 수행하지 못할 수 있다. 유사하게, 제2 가 속기(GPU 1)가 제2 서브 호출 목록에 포함된 제1 프리미티브 오퍼레이션을 실행하는 경우, 제2 가 속기(GPU 1)는 제2 서브 파라미터 데이터(P0-2)에 기초한 연산을 수행할 수 있을 뿐, 제1 서브 파라미터 데이터 (P0-1)에 기초한 연산을 수행하지 못할 수 있다. 이에 따라, 제1 가속기(GPU 0)에 의해 실행된 제1 프리미티브 오퍼레이션의 결과 데이터와 제2 가속기 (GPU 1)에 의해 실행된 제1 프리미티브 오퍼레이션의 결과 데이터가 취합되어야, 원본 프리미티브 오퍼레 이션이 정상적으로 수행될 수 있다. 예를 들어, 원본 프리미티브 오퍼레이션은 연산이 'Act 0 = (a * input) - ( b * input)' 이고, 'a'는 제1 서브 파라미터(P0-1)이고, 'b'는 제2 서브 파라미터(P0-2)'인 것으로 가정될 수 있다. 이 경우, 제1 가속기(GPU 0)에 의해 실행된 제1 프리미티브 오퍼레이션의 결과 데이터는 '(a * input)'에 기초하여 산출될 수 있고, 제2 가속기(GPU 1)에 의해 실행된 제1 프리미티브 오퍼레 이션의 결과 데이터는 '( b * input)'에 기초하여 산출될 수 있다. 이렇게 부분적으로 연산이 수행되어, 최종적인 'Act 0'에 대한 값을 산출하기 위해서는, 하나의 가속기에서 부분적으로 연산된 결과 데이터가 다른 가속기 또는 프로세서로 전송해야 된다. 본 발명의 일 실시예에 따르면, 연산 결과를 각각의 가속기와 공유하기 위한 명령이 호출 목록에 삽입될 수 있 다. 예컨대, 호출 목록이 전송된 복수의 가속기 중에서 마스터 가속기가 결정될 수 있다. 가령, 호출 목록이 전송된 가속기의 상태가 파악된 후, 이용률이 가장 적은 가속기가 마스터 가속기로 결정되고 나머지 가속기는 슬레이브 가속기로 결정될 수 있다. 몇몇 실시예에서는, 정보 처리 시스템에 포함된 복수의 가속기 중에서, 호 출 목록이 전송되지 않은 가속기가 마스터 가속기로 결정될 수 있다. 슬레이브 가속기로 전송되는 서브 호출 목록에는 프리미티브 오퍼레이션의 연산 결과를 마스터 가속기로 전송하 기 위한 적어도 하나의 명령이 삽입될 수 있다. 삽입된 명령에 기초하여, 슬레이브 가속기는 특정 프리미티브 오퍼레이션에 대한 연산이 완료되면, 완료된 연산 결과를 즉시 마스터 가속기로 전송할 수 있다. 슬레이브 가 속기에서 마스터 가속기로 실시간으로 연산 결과를 전송되어야 하는 이유는, 마스터 가속기에서 선형적으로 수 행되는 프리미티브 오퍼레이션에 대한 지연시간을 최소화하기 위함일 수 있다. 마스터 가속기는 직접 실행시킨 프리미티브 오퍼레이션의 연산 결과와 슬레이브 가속기로부터 수신한 프리미티 브 오퍼레이션의 연산 결과를 기초로, 원본 프리미티브 오퍼레이션의 최종 연산 결과를 산출할 수 있다. 또한, 마스터 가속기로 전송되는 호출 목록에는 최종 연산 결과를 슬레이브 가속기로 전송하기 위한 명령이 삽입될 수 있다. 도 11을 예를 들어 설명하면, 제1 가속기(GPU 0)가 마스터 가속기인 경우, 제2 가속기(GPU 1)로 전송되는 제2 서브 호출 목록에는, 각각의 프리미티브 오퍼레이션의 연산 결과를 제1 가속기(GPU 0)로 전송하기 위한적어도 하나의 명령이 삽입될 수 있다. 또한, 제2 가속기(GPU 1)로 전송되는 제2 서브 호출 목록에는 프 리미티브 오퍼레이션의 최종 연산 결과를 제2 가속기(GPU 1)로 전송하기 위한 명령이 삽입될 수 있다. 삽입된 명령에 기초하여, 제1 가속기(GPU 0)는 제2 서브 호출 목록에 포함된 제1 프리미티브 오퍼레이션 의 연산 결과를 제2 가속기(GPU 1)로부터 수신할 수 있다. 또한, 제1 가속기(GPU 0)는 제1 서브 호출 목 록에 포함된 제1 프리미티브 오퍼레이션의 일부 연산 결과와 제2 가속기(GPU 1)로부터 수신된 프리 미티브 오퍼레이션 결과에 기초하여, 제1 프리미티브 오퍼레이션의 최종 연산 결과(Act 0)를 산출하고, 산출된 최종 연산 결과를 제2 가속기(GPU 1)로 전송할 수 있다. 이후, 제1 가속기(GPU 0)와 제2 가속기(GPU 1)의 각각은, 제2 프리미티브 오퍼레이션(1134, 1144)에 대한 일부 연산을 수행하고, 제2 오퍼레이션(1134, 1144)에 대한 일부 연산 결과가 마스터 가속기인 제1 가속기(GPU 0)로 취합되어 제2 오퍼레이션에 대한 최종 연산이 수행될 수 있다. 상술된 명령 삽입과 파라미터 데이터의 분할은 제4 컴파일러 패스에 의해서 수행될 수 있다. 한편, 복수의 서브 호출 목록(1130, 1140)을 전송할 타깃 가속기가 가속기의 위치에 기초하여 결정될 수 있다. 일 실시예에 따르면, 마스터 가속기와 슬레이브 가속기 간의 통신 지연이 최소화될 수 있도록, 제1 가속기(GPU 0)와 제2 가속기(GPU 1)는 동일한 노드(Node)에 포함되거나, 이웃된 노드의 각각 포함될 수 있다. 상술한 바와 같이, 제1 호출 목록이 제4 컴파일러 패스를 통과하면, 파라미터 병렬 처리를 위한 복 수의 서브 호출 목록(1130, 1140)이 획득될 수 있다. 복수의 서브 호출 목록(1130, 1140)의 각각은 복수의 가 속기(GPU 0, GPU 1)로 전송되고, 복수의 서브 호출 목록(1130, 1140)에 포함된 각각의 프리미티브 오퍼레이션이 병렬적으로 실행될 수 있다. 이러한 병렬 처리가 수행되면, 연산 속도가 더욱 향상될 수 있다. 또한, 일부의 파라미터 데이터에 기초하여 가속기의 연산이 수행되므로, 가속기에서 사용하는 메모리 자원도 절감될 수 있다. 도 12는 본 개시의 일 실시예에 따른, 제1 호출 목록이 제5 컴파일러 패스를 통과하여 제2 호출 목 록으로 변경된 것을 예시하는 도면이다. 여기서, 제1 호출 목록은 원본 호출 목록이고, 제2 호출 목록은 제1 호출 목록이 기초하여 생성된 호출 목록일 수 있다. 도 12에서는 다차원 데이터 구조 와 연관된 프리미티브 오퍼레이션인 Reshape 오퍼레이션이 예시되어 있다. Reshape 오퍼레이션은 데이터 구조 를 다차원으로 설정할 수 있는 프리미티브 오퍼레이션으로서, 메모리 액세스 영역과 관련될 수 있다. 일 실시예에 따르면, 제1 호출 목록에 포함된 복수의 프리미티브 오퍼레이션의 각각과 연관된 데이터 구 조와 오퍼레이션 식별자(예컨대, 이름, 인덱스 등)에 기초하여, 제1 호출 목록이 제5 컴파일러 패스 에 적용할 수 있는지 여부가 결정될 수 있다. 즉, 제1 호출 목록에 포함된 복수의 프리미티브 오 퍼레이션의 각각과 연관된 데이터 구조와 오퍼레이션 식별자에 기초하여, 병합 대상이 되는 복수의 프리미티브 오퍼레이션이 존재하는지 여부가 판정될 수 있다. 여기서, 제5 컴파일러 패스는 데이터 구조와 연관된 복수의 프리미티브 오퍼레이션을 하나의 프리미티브 오퍼레이션으로 병합하기 위한 모듈일 수 있다. 일 실시예에 따르면, 병합 대상이 되는 복수의 프리미티브 오퍼레이션이 존재하는 것으로 판정되는 경우, 제1 호출 목록에 포함된 복수의 프리미티브 오퍼레이션과 연관된 데이터 구조와 오퍼레이션 식별자에 기초하 여, 제1 호출 목록에 포함된 모든 프리미티브 오퍼레이션 중에서 병합 대상이 되는 복수의 프리미티브 오 퍼레이션이 결정될 수 있다. 일 실시예에서는, 데이터 구조를 정의하거나 변경하기 위한 복수의 프리미티브 오 퍼레이션이 병합 대상이 되는 오퍼레이션으로 결정될 수 있다. 예컨대, 연속된 순서를 가지는 복수의 Reshape 오퍼레이션이 제1 호출 목록에서 검색된 경우, 연속된 순서를 가지는 복수의 Reshape 오퍼레이션이 병합 대상의 프리미티브 오퍼레이션으로 결정될 수 있다. 도 12의 1222 영역에 예시된 바와 같이, 제1 호출 목록에 포함된 프리미티브 오퍼레이션 중에서, Reshape(4,8,1024) 및 Reshape(2,2,8,1024) 오퍼레이션이 병합 대상이 되는 프리미티브 오퍼레이션으로 결정될 수 있다. 일 실시예에 따르면, Reshape 오퍼레이션에서, 맨 오른쪽에 있는 숫자는 매트릭스 사이즈일 수 있고, 그 이외의 숫자는 다차원 엘리먼트(element)일 수 있다. 병합 대상으로 결정된 복수의 프리미티브 오퍼레이션은 하나의 프리미티브 오퍼레이션으로 병합될 수 있다. 도 12에 예시된 바와 같이, 병합 대상으로 결정된 Reshape(4,8,1024) 및 Reshape(2,2,8,1024) 오퍼 레이션은 Reshape(2,2,8,1024)로 병합될 수 있다. 또한, 병합된 오퍼레이션을 포함하는 제2 호출 목록 이 생성되어, 적어도 하나의 가속기로 전송될 수 있다. 상술된 프리미티브 오퍼레이션의 병합은, 제5 컴파일러 패스를 통해서 수행될 수 있다. 제5 컴파일러 패 스를 통해서 제2 호출 목록을 생성된 경우, 제1 호출 목록과 비교하여, 더욱 빠르게 최종 출 력 데이터가 산출될 수 있다. 도 13은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제6 컴파일러 패스를 통과하여 제2 호출 목 록으로 변경된 것을 예시하는 도면이다. 여기서, 제1 호출 목록은 원본 호출 목록이고, 제2 호출 목록은 제1 호출 목록에 기초하여 생성된 호출 목록일 수 있다. 일 실시예에 따르면, 제1 호출 목록에 포함된 복수의 프리미티브 오퍼레이션 중에서, 독립적으로 수행되 는 적어도 하나의 프리미티브 오퍼레이션이 존재하는 여부가 판정될 수 있다. 독립적으로 수행되는 적어도 하 나의 프리미티브 오퍼레이션이 존재하는 것으로 판정되는 경우에, 제1 호출 목록이 제6 컴파일러 패스 에 적용될 수 있다. 여기서, 독립적으로 수행되는 프리미티브 오퍼레이션은 앞서 순서의 프리미티브 오 퍼레이션의 실행 결과에 의존하지 않고, 독립적으로 수행 가능한 오퍼레이션일 수 있다. 또한, 제6 컴파일러 패스는 프리미티브 오퍼레이션의 순서를 조정하여, 더욱 빠르게 연산 결과를 출력하기 위한 모듈일 수 있 다. 일 실시예에 따르면, 제1 호출 목록에 독립적으로 실행되는 적어도 하나의 프리미티브 오퍼레이션이 존재 하는 것으로 판정되는 경우, 독립적으로 실행되는 적어도 하나의 프리미티브 오퍼레이션의 실행 순서가 변경될 수 있다. 또한, 변경된 적어도 하나의 프리미티브 오퍼레이션이 포함되도록, 제6 컴파일러 패스는 제2 호출 목록을 생성할 수 있다. 도 13을 예를 들어 설명하면, 'B=Read()'는 앞서 순서의 프리미티브 오퍼레이션에 영향을 받지 않고, 독립적으 로 수행되어 'Tensor B'를 출력하는 프리미티브 오퍼레이션일 수 있다. 즉, 'B=Read()'는 앞서서 실행되 는 적어도 하나의 프리미티브 오퍼레이션의 결과 데이터를 기다리지 않고, 실행시킬 수 있는 독립적인 프리미티 브 오퍼레이션일 수 있다. 일 실시예에 따르면, 독립적으로 실행 가능한 프리미티브 오퍼레이션(예컨대, 도 13의 B=Raed())에 대한 실행 순서가 앞당겨지도록 제2 호출 목록이 생성될 수 있다. 예컨대, 제6 컴파일러 패스는 제1 호출 목 록으로부터 독립적으로 실행 가능한 프리미티브 오퍼레이션을 식별하고, 식별된 프리미티브 오퍼레이션이 앞당겨지도록 제2 호출 목록을 생성할 수 있다. 도 13의 제2 호출 목록에 포함된 'B=Read()' 관련 프리미티브 오퍼레이션은, 제1 호출 목록에 포함된 'B=Read()' 관련 프리미티브 오퍼레이션 이 비교하여, 실행 순서가 앞당겨진 것으로 예시되어 있다. 제2 호출 목록은 적어도 하나의 가속기로 전 송될 수 있다. 제6 컴파일러 패스를 통해서 제2 호출 목록을 생성된 경우, 제1 호출 목록과 비교하여, 최종 출력 데이터가 더욱 빠르게 산출될 수 있다. 즉, 최종 출력 데이터(예컨대, 도 13에서는 Tensor C)가 출력되는 시간은, 제1 호출 목록보다 제2 호출 목록이 짧을 수 있다. 도 14는 본 개시의 일 실시예에 따른, 오퍼레이션 호출 목록 생성 방법을 생성하는 방법을 설명하기 위한 흐름도이다. 도 14에 도시된 방법은, 본 개시의 목적을 달성하기 위한 일 실시예일 뿐이며, 필요에 따라 일부 단계가 추가되거나 삭제될 수 있음은 물론이다. 또한, 도 14에 도시된 방법은, 정보 처리 시스템에 포함된 적어도 하나의 프로세서에 의해서 수행될 수 있다. 설명의 편의를 위해서 정보 처리 시스템에 포함된 프로세서에 의해서, 도 14에 도시된 각 단계가 수행되는 것으로 설명하기로 한다. 프로세서는 인공지능 연산을 포함한 소스 프로그램으로부터 트레이스를 획득할 수 있다(S1410). 여기서, 트레 이스는 소스 프로그램과 연관된 코드 및/또는 프리미티브 오퍼레이션을 포함할 수 있다. 일 실시예에서, 프로 세서는 소스 프로그램을 실행하여 인공지능 연산과 연관된 복수의 코드 및/또는 프리미티브 오퍼레이션을 획득 하고, 획득된 복수의 코드 및/또는 프리미티브 오퍼레이션을 포함하는 트레이스를 획득할 수 있다. 그 후, 프로세서는 트레이스에 기초하여 복수의 프리미티브 오퍼레이션을 포함하는 호출 목록을 생성할 수 있다 (S1420). 일 실시예에 따르면, 복수의 프리미티브 오퍼레이션은 복수의 가속기의 각각이 액세스하는 오퍼레이 션 라이브러리에 포함될 수 있다. 일 실시예에 따르면, 프로세서는 복수의 프리미티브 오퍼레이션의 각각에 대한 상관 관계를 결정하고, 결정된 복수의 프리미티브 오퍼레이션의 각각에 대한 상관 관계를 포함하는 호출 목록을 생성할 수 있다. 여기서, 상 관 관계는 호출 목록에 포함된 제1 프리미티브 오퍼레이션의 출력 데이터가, 호출 목록에 포함된 제2 프리미티브 오퍼레이션으로 입력되는 관계일 수 있다. 추가적으로 또는 대안적으로, 프로세서는 호출 목록에 포함된 복수의 프리미티브 오퍼레이션에 기초하여, 복수 의 프리미티브 오퍼레이션의 호출 순서와 상관 관계를 나타내는 그래프를 생성할 수 있다. 일 실시예에 따르면, 프로세서는 생성된 호출 목록을 복수의 가속기의 중 적어도 하나로 전송할 수 있다. 호출 목록을 수신한 가속기는 오퍼레이션 라이브러리를 액세스하여, 호출 목록에 포함된 복수의 프리미티브 오퍼레이 션을 호출하도록 구성될 수 있다. 도 15는 본 개시의 일 실시예에 따른, 호출 목록을 컴파일러 패스에 적용하여 최적화된 새로운 호출 목록을 생 성하는 방법을 설명하기 위한 흐름도이다. 도 15에 도시된 방법은, 본 개시의 목적을 달성하기 위 한 일 실시예일 뿐이며, 필요에 따라 일부 단계가 추가되거나 삭제될 수 있음은 물론이다. 또한, 도 15에 도시 된 방법은, 정보 처리 시스템에 포함된 적어도 하나의 프로세서에 의해서 수행될 수 있다. 설명의 편의 를 위해서 정보 처리 시스템에 포함된 프로세서에 의해서, 도 15에 도시된 각 단계가 수행되는 것으로 설명하기 로 한다. 프로세서는 호출 목록을 적어도 하나의 컴파일러 패스에 적용하여, 호출 목록에 기초한 새로운 호출 목록을 생 성할 수 있다(S1510). 여기서, 호출 목록은 컴파일러 패스에 적용되기 전의 원본 호출 목록일 수 있다. 예컨 대, 프로세서는 프리미티브 오퍼레이션의 식별자에 기초하여 호출 목록에 포함된 프리미티브 오퍼레이션 중에서 병합 대상이 되는 복수의 프리미티브 오퍼레이션을 결정하고, 결정된 복수의 프리미티브 오퍼레이션을 하나의 프리미티브 오퍼레이션으로 병합할 수 있다. 이어서, 프로세서는 병합된 프리미티브 오퍼레이션을 포함하도록 호출 목록을 변경하여 새로운 호출 목록을 생성할 수 있다. 이 경우, 결정된 복수의 프리미티브 오퍼레이션의 각각에 대한 입력 데이터는 병합된 프리미티브 오퍼레이션으로 입력될 수 있다. 다른 예로서, 프로세서는 호출 목록을 제공받는 복수의 가속기의 개수를 결정하고, 결정된 복수의 가속기의 개 수에 기초하여, 호출 목록에 포함된 입력 데이터, 액티베이션 또는 출력 데이터 중 적어도 하나를 분할할 수 있 다. 이어서, 프로세서는 분할된 입력 데이터, 액티베이션 또는 출력 데이터 중 적어도 하나를 포함하도록 호출 목록을 변경하여 새로운 호출 목록을 생성할 수 있다. 또 다른 예로서, 프로세서는 호출 목록을 제공받는 복수의 가속기의 개수를 결정하고, 결정된 복수의 가속기의 개수에 기초하여, 호출 목록을 복수의 서브 호출 목록으로 분할할 수 있다. 이어서, 프로세서는 분할된 복수의 서브 호출 목록이 파이프라이닝되도록 호출 목록을 변경하여 새로운 호출 목록을 생성할 수 있다. 그 후, 프로 세서는 분할된 복수의 서브 호출 목록을 복수의 가속기로 전송할 수 있다. 이 경우, 제1 서브 호출 목록을 수 신한 제1 가속기 및 제1 서브 호출 목록과 파이프라이닝된 제2 서브 호출 목록을 수신한 제2 가속기는, 동일한 노드에 포함될 수 있다. 다른 예로서, 제1 서브 호출 목록을 수신한 제1 가속기는 제1 노드에 포함되고, 제1 서브 호출 목록과 파이프라이닝된 제2 서브 호출 목록을 수신한 제2 가속기는 제2 노드에 포함되고, 제1 노드는 제2 노드와 인접된 이웃 노드일 수 있다. 일 실시예에 따르면, 프로세서는 제1 서브 호출 목록에 기초한 출력 데이터가 제2 서브 호출 목록에 포함된 프리미티브 오퍼레이션의 입력 데이터로 제공되도록, 적어도 하나의 명 령이 제1 서브 호출 목록 또는 제2 서브 호출 목록 중 적어도 하나에 삽입할 수 있다. 또 다른 예로서, 프로세서는 호출 목록을 제공받는 복수의 가속기의 개수를 결정하고, 결정된 복수의 가속기의 개수에 기초하여, 호출 목록에 포함된 프리미티브 오퍼레이션의 각각에 적용되는 복수의 파라미터를 분할할 수 있다. 이어서, 프로세서는 분할된 파라미터가 포함되도록 호출 목록을 변경하여 새로운 호출 목록을 생성할 수 있다. 또 다른 예로서, 프로세서는 프리미티브 오퍼레이션과 연관된 데이터 구조 또는 식별자 중 적어도 하나에 기초 하여, 호출 목록에 포함된 프리미티브 오퍼레이션 중에서 병합 대상이 되는 복수의 프리미티브 오퍼레이션을 결 정하고, 결정된 복수의 프리미티브 오퍼레이션을 하나의 프리미티브 오퍼레이션으로 병합할 수 있다. 이어서, 프로세서는 병합된 프리미티브 오퍼레이션을 포함하도록 호출 목록을 변경하여 새로운 호출 목록을 생성할 수 있다. 또 다른 예로서, 프로세서는 호출 목록에 포함된 복수의 프리미티브 오퍼레이션 중에서, 독립적으로 수행되는 적어도 하나의 프리미티브 오퍼레이션을 식별하고, 식별된 적어도 하나의 프리미티브 오퍼레이션의 실행 순서를 변경할 수 있다. 이 경우, 프로세서는 식별된 적어도 하나의 프리미티브 오퍼레이션의 실행 순서를 앞당겨지도 록, 적어도 하나의 프리미티브 오퍼레이션의 실행 순서를 변경할 수 있다. 이어서, 프로세서는 변경된 적어도 하나의 프리미티브 오퍼레이션을 포함하도록 호출 목록을 변경하여 새로운 호출 목록을 생성할 수 있다. 프로세서는 새로운 호출 목록이 생성이 완료되면, 새로운 호출 목록을 적어도 하나의 가속기로 전송할 수 있다 (S1520). 상술한 실시예들에서는, 호출 목록을 최적화하기 위해서, 몇 가지의 컴파일러 패스를 예를 들어 설명하였으나, 이외에도 다양한 컴파일러 패스가 이용되어, 호출 목록을 최적화할 수 있다. 또한, 최적화된 호출 목록이 적어 도 하나의 가속기로 전송될 수 있다. 상술한 흐름도 및 상술한 설명은 일 예시일 뿐이며, 일부 실시예에서는 다르게 구현될 수 있다. 예를 들어, 일 부 실시예에서는 각 단계의 순서가 바뀌거나, 일부 단계가 반복 수행되거나, 일부 단계가 생략되거나, 일부 단 계가 추가될 수 있다. 상술한 방법은 컴퓨터에서 실행하기 위해 컴퓨터 판독 가능한 기록 매체에 저장된 컴퓨터 프로그램으로 제공될 수 있다. 매체는 컴퓨터로 실행 가능한 프로그램을 계속 저장하거나, 실행 또는 다운로드를 위해 임시 저장하 는 것일수도 있다. 또한, 매체는 단일 또는 수개 하드웨어가 결합된 형태의 다양한 기록 수단 또는 저장수단일 수 있는데, 어떤 컴퓨터 시스템에 직접 접속되는 매체에 한정되지 않고, 네트워크 상에 분산 존재하는 것일 수 도 있다. 매체의 예시로는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD-ROM 및 DVD 와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto optical medium), 및 ROM, RAM, 플래시 메모리 등을 포함하여 프로그램 명령어가 저장되도록 구성된 것이 있을 수 있다. 또한, 다른 매체 의 예시로, 애플리케이션을 유통하는 앱 스토어나 기타 다양한 소프트웨어를 공급 내지 유통하는 사이트, 서버 등에서 관리하는 기록매체 내지 저장매체도 들 수 있다. 본 개시의 방법, 동작 또는 기법들은 다양한 수단에 의해 구현될 수도 있다. 예를 들어, 이러한 기법들은 하드 웨어, 펌웨어, 소프트웨어, 또는 이들의 조합으로 구현될 수도 있다. 본원의 개시와 연계하여 설명된 다양한 예시적인 논리적 블록들, 모듈들, 회로들, 및 알고리즘 단계들은 전자 하드웨어, 컴퓨터 소프트웨어, 또는 양자 의 조합들로 구현될 수도 있음을 통상의 기술자들은 이해할 것이다. 하드웨어 및 소프트웨어의 이러한 상호 대 체를 명확하게 설명하기 위해, 다양한 예시적인 구성요소들, 블록들, 모듈들, 회로들, 및 단계들이 그들의 기능 적 관점에서 일반적으로 위에서 설명되었다. 그러한 기능이 하드웨어로서 구현되는지 또는 소프트웨어로서 구 현되는 지의 여부는, 특정 애플리케이션 및 전체 시스템에 부과되는 설계 요구사항들에 따라 달라진다. 통상의 기술자들은 각각의 특정 애플리케이션을 위해 다양한 방식들로 설명된 기능을 구현할 수도 있으나, 그러한 구현 들은 본 개시의 범위로부터 벗어나게 하는 것으로 해석되어서는 안 된다. 하드웨어 구현에서, 기법들을 수행하는 데 이용되는 프로세싱 유닛들은, 하나 이상의 ASIC들, DSP들, 디지털 신 호 프로세싱 디바이스들(digital signal processing devices; DSPD들), 프로그램가능 논리 디바이스들 (programmable logic devices; PLD들), 필드 프로그램가능 게이트 어레이들(field programmable gate arrays; FPGA들), 프로세서들, 제어기들, 마이크로제어기들, 마이크로프로세서들, 전자 디바이스들, 본 개시에 설명된 기능들을 수행하도록 설계된 다른 전자 유닛들, 컴퓨터, 또는 이들의 조합 내에서 구현될 수도 있다. 따라서, 본 개시와 연계하여 설명된 다양한 예시적인 논리 블록들, 모듈들, 및 회로들은 범용 프로세서, DSP, ASIC, FPGA나 다른 프로그램 가능 논리 디바이스, 이산 게이트나 트랜지스터 로직, 이산 하드웨어 컴포넌트들, 또는 본원에 설명된 기능들을 수행하도록 설계된 것들의 임의의 조합으로 구현되거나 수행될 수도 있다. 범용 프로세서는 마이크로프로세서일 수도 있지만, 대안으로, 프로세서는 임의의 종래의 프로세서, 제어기, 마이크로 제어기, 또는 상태 머신일 수도 있다. 프로세서는 또한, 컴퓨팅 디바이스들의 조합, 예를 들면, DSP와 마이크 로프로세서, 복수의 마이크로프로세서들, DSP 코어와 연계한 하나 이상의 마이크로프로세서들, 또는 임의의 다 른 구성의 조합으로서 구현될 수도 있다. 펌웨어 및/또는 소프트웨어 구현에 있어서, 기법들은 랜덤 액세스 메모리(random access memory; RAM), 판독 전 용 메모리(read-only memory; ROM), 비휘발성 RAM(non-volatile random access memory; NVRAM), PROM(programmable read-only memory), EPROM(erasable programmable read-only memory), EEPROM(electrically erasable PROM), 플래시 메모리, 컴팩트 디스크(compact disc; CD), 자기 또는 마킹 데이 터 스토리지 디바이스 등과 같은 컴퓨터 판독가능 매체 상에 저장된 명령들로서 구현될 수도 있다. 명령들은 하나 이상의 프로세서들에 의해 실행 가능할 수도 있고, 프로세서(들)로 하여금 본 개시에 설명된 기능의 특정 양태들을 수행하게 할 수도 있다. 소프트웨어로 구현되는 경우, 상술된 기법들은 하나 이상의 명령들 또는 코드로서 컴퓨터 판독 가능한 매체 상 에 저장되거나 또는 컴퓨터 판독 가능한 매체를 통해 전송될 수도 있다. 컴퓨터 판독가능 매체들은 한 장소에서 다른 장소로 컴퓨터 프로그램의 전송을 용이하게 하는 임의의 매체를 포함하여 컴퓨터 저장 매체들 및 통신 매체들 양자를 포함한다. 저장 매체들은 컴퓨터에 의해 액세스될 수 있는 임의의 이용 가능한 매체들일 수도 있다. 비제한적인 예로서, 이러한 컴퓨터 판독가능 매체는 RAM, ROM, EEPROM, CD-ROM 또는 다른 광학 디스크 스토리지, 자기 디스크 스토리지 또는 다른 자기 스토리지 디바이스들, 또는 소망의 프로그램 코드를 명령들 또 는 데이터 구조들의 형태로 이송 또는 저장하기 위해 사용될 수 있으며 컴퓨터에 의해 액세스될 수 있는 임의의 다른 매체를 포함할 수 있다. 또한, 임의의 접속이 컴퓨터 판독가능 매체로 적절히 칭해진다. 예를 들어, 소프트웨어가 동축 케이블, 광섬유 케이블, 연선, 디지털 가입자 회선 (DSL), 또는 적외선, 무선, 및 마이크로파와 같은 무선 기술들을 사용하여 웹사이트, 서버, 또는 다른 원격 소스로부터 전송되면, 동축 케 이블, 광섬유 케이블, 연선, 디지털 가입자 회선, 또는 적외선, 무선, 및 마이크로파와 같은 무선 기술들은 매 체의 정의 내에 포함된다. 본원에서 사용된 디스크(disk) 와 디스크(disc)는, CD, 레이저 디스크, 광 디스크, DVD(digital versatile disc), 플로피디스크, 및 블루레이 디스크를 포함하며, 여기서 디스크들(disks)은 보통 자기적으로 데이터를 재생하고, 반면 디스크들(discs)은 레이저를 이용하여 광학적으로 데이터를 재생한다. 위 의 조합들도 컴퓨터 판독가능 매체들의 범위 내에 포함되어야 한다. 소프트웨어 모듈은, RAM 메모리, 플래시 메모리, ROM 메모리, EPROM 메모리, EEPROM 메모리, 레지스터들, 하드 디스크, 이동식 디스크, CD-ROM, 또는 공지된 임의의 다른 형태의 저장 매체 내에 상주할 수도 있다. 예시적인 저장 매체는, 프로세서가 저장 매체로부터 정보를 판독하거나 저장 매체에 정보를 기록할 수 있도록, 프로세서 에 연결될 수 있다. 대안으로, 저장 매체는 프로세서에 통합될 수도 있다. 프로세서와 저장 매체는 ASIC 내에 존재할 수도 있다. ASIC은 유저 단말 내에 존재할 수도 있다. 대안으로, 프로세서와 저장 매체는 유저 단말에 서 개별 구성요소들로서 존재할 수도 있다. 이상 설명된 실시예들이 하나 이상의 독립형 컴퓨터 시스템에서 현재 개시된 주제의 양태들을 활용하는 것으로 기술되었으나, 본 개시는 이에 한정되지 않고, 네트워크나 분산 컴퓨팅 환경과 같은 임의의 컴퓨팅 환경과 연계 하여 구현될 수도 있다. 또 나아가, 본 개시에서 주제의 양상들은 복수의 프로세싱 칩들이나 장치들에서 구현 될 수도 있고, 스토리지는 복수의 장치들에 걸쳐 유사하게 영향을 받게 될 수도 있다. 이러한 장치들은 PC들, 네트워크 서버들, 및 휴대용 장치들을 포함할 수도 있다."}
{"patent_id": "10-2024-0004810", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "본 명세서에서는 본 개시가 일부 실시예들과 관련하여 설명되었지만, 본 개시의 발명이 속하는 기술분야의 통상 의 기술자가 이해할 수 있는 본 개시의 범위를 벗어나지 않는 범위에서 다양한 변형 및 변경이 이루어질 수 있 다. 또한, 그러한 변형 및 변경은 본 명세서에 첨부된 특허청구의 범위 내에 속하는 것으로 생각되어야 한다."}
{"patent_id": "10-2024-0004810", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 개시의 실시예들은, 이하 설명하는 첨부 도면들을 참조하여 설명될 것이며, 여기서 유사한 참조 번호는 유사 한 요소들을 나타내지만, 이에 한정되지는 않는다.도 1은 본 개시의 일 실시예에 따른, 호출 목록이 생성되는 방법을 설명하기 위한 개요도이다. 도 2는 본 개시의 일 실시예에 따른, 정보 처리 시스템의 내부 구성을 나타내는 블록도이다. 도 3은 본 개시의 일 실시예에 따른, 프로세서의 내부 구성을 나타내는 블록도이다. 도 4는 본 개시의 일 실시예에 따른, 인공지능 프로그램으로부터 획득된 트레이스의 예시를 나타내는 도면이다. 도 5는 본 개시의 일 실시예에 따른, 호출 목록을 예시하는 도면이다. 도 6은 본 개시의 일 실시예에 따른, 그래프로 표현된 호출 목록에 대한 예시를 나타내는 도면이다. 도 7은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제1 컴파일러 패스를 통과하여 제2 호출 목록으로 최적화 된 것을 예시하는 도면이다. 도 8은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제2 컴파일러 패스를 통과하여 제1 서브 호출 목록 및 제 2 서브 호출 목록으로 변경된 것을 예시하는 도면이다. 도 9는 본 개시의 일 실시예에 따른, 제1 호출 목록이 제3 컴파일러 패스를 통과하여 제1 서브 호출 목록 및 제 2 서브 호출 목록으로 변경된 것을 예시하는 도면이다. 도 10은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제3 컴파일러 패스를 통과하여 제1 서브 호출 목록 내지 제4 서브 호출 목록으로 변경된 것을 예시하는 도면이다. 도 11은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제4 컴파일러 패스를 통과하여 제1 서브 호출 목록 및 제2 서브 호출 목록으로 변경된 것을 예시하는 도면이다. 도 12는 본 개시의 일 실시예에 따른, 제1 호출 목록이 제5 컴파일러 패스를 통과하여 제2 호출 목록으로 변경 된 것을 예시하는 도면이다. 도 13은 본 개시의 일 실시예에 따른, 제1 호출 목록이 제6 컴파일러 패스를 통과하여 제2 호출 목록으로 변경 된 것을 예시하는 도면이다. 도 14는 본 개시의 일 실시예에 따른, 오퍼레이션 호출 목록 생성 방법을 생성하는 방법을 설명하기 위한 흐름 도이다. 도 15는 본 개시의 일 실시예에 따른, 호출 목록을 컴파일러 패스에 적용하여 최적화된 새로운 호출 목록을 생 성하는 방법을 설명하기 위한 흐름도이다."}
