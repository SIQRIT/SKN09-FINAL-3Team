{"patent_id": "10-2021-0101366", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0019629", "출원번호": "10-2021-0101366", "발명의 명칭": "가비지 컬렉션의 동작 회피를 위한 장치 및 방법", "출원인": "삼성전자주식회사", "발명자": "정관희"}}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 의해 수행되는 방법에 있어서,애플리케이션에 관련된 대상 이벤트(event)가 개시(initiate)되는 경우, 상기 대상 이벤트의 개시를 상기 애플리케이션에 대한 런타임 환경(runtime environment)에 전달하는 동작; 및상기 대상 이벤트의 개시를 상기 런타임 환경에 전달한 이후, 상기 애플리케이션에 대해 할당되는 메모리 값이가비지 컬렉션(garbage collection)의 개시 여부를 결정하는 임계값(threshold value)을 초과하는 경우, 상기가비지 컬렉션의 수행을 생략(skip)하고, 상기 가비지 컬렉션에서 정의된 한계 메모리 값(bound memory value)및 상기 임계값을 업데이트(update)하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 대상 이벤트의 개시를 상기 런타임 환경에 전달하는 동작은,상기 가비지 컬렉션의 수행을 생략할 지 여부를 결정하는 플래그(flag)를 상기 런타임 환경에 설정하는 동작을 포함하고,상기 업데이트하는 동작은,상기 런타임 환경에 설정된 상기 플래그에 기초하여 상기 가비지 컬렉션의 수행을 생략할 지 여부를 결정하는동작을 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 플래그가 설정된 시점으로부터 미리 결정된 시간이 경과한 이후에 상기 플래그를 해제하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,상기 대상 이벤트가 종료되는 경우, 상기 대상 이벤트의 종료를 상기 런타임 환경에 전달하는 동작; 및상기 대상 이벤트의 종료가 상기 런타임 환경에 전달되는 경우에 응답하여, 상기 플래그를 해제하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,공개특허 10-2023-0019629-2-상기 업데이트하는 동작은,상기 애플리케이션에 대한 최대 허용 자유 메모리 값에 기초하여 상기 한계 메모리 값 및 상기 임계값을 업데이트하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 업데이트하는 동작은,상기 애플리케이션에 대해 할당되는 메모리 값이 상기 한계 메모리 값을 초과하는 경우에 응답하여, 상기 한계메모리 값에 상기 애플리케이션에 대한 최대 허용 자유 메모리 값에 미리 설정된 가중치(weight)가 적용된 값을합산(sum)함으로써 산출된 값으로 상기 한계 메모리 값을 업데이트하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 업데이트하는 동작은,상기 가중치를 증가시켜 설정함으로써 상기 대상 이벤트가 개시된 이후에 최초로 수행되는 가비지 컬렉션을 지연시키는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 업데이트하는 동작은,상기 업데이트된 한계 메모리 값으로부터 미리 결정된 메모리 크기 값 만큼 차감된 값으로 상기 임계값을 업데이트하는 동작을 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,상기 업데이트하는 동작은,상기 애플리케이션에 대해 할당되는 메모리 값이 상기 한계 메모리 값 이하인 경우에 응답하여, 상기 한계 메모리 값에 상기 애플리케이션에 대한 최대 자유 메모리 값을 합산함으로써 상기 한계 메모리 값을 업데이트하는동작을 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제2항에 있어서,공개특허 10-2023-0019629-3-상기 플래그가 설정되는 시점으로부터 상기 플래그가 해제되는 시점까지, 상기 애플리케이션에 대해 새로 할당되는 메모리 값이 상기 업데이트된 임계값을 초과하는 경우 가비지 컬렉션의 수행을 생략하고 상기 업데이트를반복하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제2항에 있어서,상기 플래그가 해제된 이후에 가비지 컬렉션을 수행하는 경우, 상기 가비지 컬렉션이 수행된 시점에 상기 애플리케이션에 대해 할당되는 메모리 값 및 상기 애플리케이션에 허용되는 자유 메모리 값에 기초하여, 상기 한계메모리 값 및 상기 임계값을 업데이트하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항 내지 제11항 중 어느 한 항의 방법을 수행하기 위한 명령어를 포함하는 하나 이상의 컴퓨터 프로그램을저장한 컴퓨터 판독 가능 저장 매체."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "전자 장치에 있어서,애플리케이션에 관련된 대상 이벤트가 개시되는 경우, 상기 대상 이벤트의 개시를 상기 애플리케이션에 대한 런타임 환경에 전달하고, 상기 대상 이벤트의 개시를 상기 런타임 환경에 전달한 이후, 상기 애플리케이션에 대해할당되는 메모리 값이 가비지 컬렉션의 개시 여부를 결정하는 임계값을 초과하는 경우, 상기 가비지 컬렉션의수행을 생략하고, 상기 가비지 컬렉션에서 정의된 한계 메모리 값 및 상기 임계값을 업데이트하는 프로세서를 포함하는 전자 장치."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 프로세서는,상기 가비지 컬렉션의 수행을 생략할 지 여부를 결정하는 플래그를 상기 런타임 환경에 설정하고, 상기 런타임환경에 설정된 상기 플래그에 기초하여 상기 가비지 컬렉션의 수행을 생략할 지 여부를 결정하는,전자 장치."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 프로세서는,상기 플래그가 설정된 시점으로부터 미리 결정된 시간이 경과한 이후에 상기 플래그를 해제하는,전자 장치.공개특허 10-2023-0019629-4-청구항 16 제14항에 있어서,상기 프로세서는,상기 대상 이벤트가 종료되는 경우, 상기 대상 이벤트의 종료를 상기 런타임 환경에 전달하고, 상기 대상 이벤트의 종료가 상기 런타임 환경에 전달되는 경우에 응답하여, 상기 플래그를 해제하는,전자 장치."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제13항에 있어서,상기 프로세서는,상기 애플리케이션에 대한 최대 허용 자유 메모리 값에 기초하여 상기 한계 메모리 값 및 상기 임계값을 업데이트하는,전자 장치."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제13항에 있어서,상기 프로세서는,상기 애플리케이션에 대해 할당되는 메모리 값이 상기 한계 메모리 값을 초과하는 경우에 응답하여, 상기 한계메모리 값에 상기 애플리케이션에 대한 최대 허용 자유 메모리 값에 미리 설정된 가중치가 적용된 값을 합산함으로써 산출된 값으로 상기 한계 메모리 값을 업데이트하는,전자 장치."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서,상기 프로세서는,상기 업데이트된 한계 메모리 값으로부터 미리 결정된 메모리 크기 값 만큼 차감된 값으로 상기 임계값을 업데이트하는,전자 장치."}
{"patent_id": "10-2021-0101366", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제13항에 있어서,상기 프로세서는,상기 애플리케이션에 대해 할당되는 메모리 값이 상기 한계 메모리 값 이하인 경우에 응답하여, 상기 한계 메모리 값에 상기 애플리케이션에 대한 최대 자유 메모리 값을 합산함으로써 상기 한계 메모리 값을 업데이트하는,전자 장치.공개특허 10-2023-0019629-5-"}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예에 따른 전자 장치에 의해 수행되는 방법은, 애플리케이션에 관련된 대상 이벤트(event)가 개시 (initiate)되는 경우, 대상 이벤트의 개시를 애플리케이션에 대한 런타임(runtime)에게 전달하는 동작, 및 대상 이벤트의 개시를 런타임에게 전달한 이후, 애플리케이션에 대해 할당되는 메모리 값이 가비지 컬렉션(garbage collection)의 개시 여부를 결정하는 임계값 (threshold value)을 초과하는 경우, 가비지 컬렉션의 수행을 생략 (skip)하고, 가비지 컬렉션에서 정의된 한계 메모리 값(bound memory value) 및 임계값을 업데이트(update)하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래의 개시는 가비지 컬렉션의 동작 회피를 위한 기술에 관한 것이다."}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "가비지란 프로그램, 애플리케이션 등에 할당된 메모리 중 더 이상 사용하지 않는 부분을 의미한다. 예를 들어, 특정 객체에 메모리를 할당하였으나, 특정 객체가 소멸한 경우에 해당 메모리를 유용한 메모리로 설정하지 않으 면 해당 메모리는 계속 사용중인 것으로 나오게 된다. 따라서 사용하지 않으면서 사용할 수 없는 메모리를 가 비지라 하고, 시스템에서는 이러한 가비지를 다시 유용한 메모리로 전환시키는 작업을 필요로 하는데, 이 작업 을 가비지 수집, 혹은 가비지 컬렉션(garbage collection)이라 한다. 가비지 컬렉션이란 메모리를 동적으로 관 리하기 위한 방법 중 하나이다. 애플리케이션의 실행 중에 발생하는 가비지 컬렉션을 처리하기 위해서는 CPU 리소스를 사용해야 하고, 이는 애플리케이션의 실행에 필요한 CPU 리소스 할당에 지연을 발생시키는 하나의 요 소가 될 수 있다."}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 전자 장치에 의해 수행되는 방법은, 애플리케이션에 관련된 대상 이벤트(event)가 개시 (initiate)되는 경우, 상기 대상 이벤트의 개시를 상기 애플리케이션에 대한 런타임 환경(runtime environmen t)에 전달하는 동작, 및 상기 대상 이벤트의 개시를 상기 런타임 환경에 전달한 이후, 상기 애플리케이션에 대 해 할당되는 메모리 값이 가비지 컬렉션(garbage collection)의 개시 여부를 결정하는 임계값(threshold value)을 초과하는 경우, 상기 가비지 컬렉션의 수행을 생략(skip)하고, 상기 가비지 컬렉션에서 정의된 한계 메모리 값(bound memory value) 및 상기 임계값을 업데이트(update)하는 동작을 포함할 수 있다. 상기 대상 이벤트의 개시를 상기 런타임 환경에 전달하는 동작은, 상기 가비지 컬렉션의 수행을 생략할 지 여부 를 결정하는 플래그(flag)를 상기 런타임 환경에 설정하는 동작을 포함하고, 상기 업데이트하는 동작은, 상기 런타임 환경에 설정된 상기 플래그에 기초하여 상기 가비지 컬렉션의 수행을 생략할 지 여부를 결정하는 동작을 포함할 수 있다. 일 실시예에 따른 전자 장치에 의해 수행되는 방법은, 상기 플래그가 설정된 시점으로부터 미리 결정된 시간이 경과한 이후에 상기 플래그를 해제하는 동작을 더 포함할 수 있다. 일 실시예에 따른 전자 장치에 의해 수행되는 방법은, 상기 대상 이벤트가 종료되는 경우, 상기 대상 이벤트의 종료를 상기 런타임 환경에 전달하는 동작, 및 상기 대상 이벤트의 종료가 상기 런타임 환경에 전달되는 경우에 응답하여, 상기 플래그를 해제하는 동작을 더 포함할 수 있다. 상기 업데이트하는 동작은, 상기 애플리케이션에 대한 최대 허용 자유 메모리 값에 기초하여 상기 한계 메모리 값 및 상기 임계값을 업데이트하는 동작을 포함할 수 있다. 상기 업데이트하는 동작은, 상기 애플리케이션에 대해 할당되는 메모리 값이 상기 한계 메모리 값을 초과하는 경우에 응답하여, 상기 한계 메모리 값에 상기 애플리케이션에 대한 최대 허용 자유 메모리 값에 미리 설정된 가중치(weight)가 적용된 값을 합산(sum)함으로써 산출된 값으로 상기 한계 메모리 값을 업데이트하는 동작을 포함할 수 있다. 상기 업데이트하는 동작은, 상기 가중치를 증가시켜 설정함으로써 상기 대상 이벤트가 개시된 이후에 최초로 수 행되는 가비지 컬렉션을 지연시키는 동작을 포함할 수 있다. 상기 업데이트하는 동작은, 상기 업데이트된 한계 메모리 값으로부터 미리 결정된 메모리 크기 값 만큼 차감된 값으로 상기 임계값을 업데이트하는 동작을 포함할 수 있다.상기 업데이트하는 동작은, 상기 애플리케이션에 대해 할당되는 메모리 값이 상기 한계 메모리 값 이하인 경우 에 응답하여, 상기 한계 메모리 값에 상기 애플리케이션에 대한 최대 자유 메모리 값을 합산함으로써 상기 한계 메모리 값을 업데이트하는 동작을 포함할 수 있다. 일 실시예에 따른 전자 장치에 의해 수행되는 방법은, 상기 플래그가 설정되는 시점으로부터 상기 플래그가 해 제되는 시점까지, 상기 애플리케이션에 대해 새로 할당되는 메모리 값이 상기 업데이트된 임계값을 초과하는 경 우 가비지 컬렉션의 수행을 생략하고 상기 업데이트를 반복하는 동작을 더 포함할 수 있다. 일 실시예에 따른 전자 장치에 의해 수행되는 방법은, 상기 플래그가 해제된 이후에 가비지 컬렉션을 수행하는 경우, 상기 가비지 컬렉션이 수행된 시점에 상기 애플리케이션에 대해 할당되는 메모리 값 및 상기 애플리케이 션에 허용되는 자유 메모리 값에 기초하여, 상기 한계 메모리 값 및 상기 임계값을 업데이트하는 동작을 더 포 함할 수 있다. 일 실시예에 따른 전자 장치는, 애플리케이션에 관련된 대상 이벤트가 개시되는 경우, 상기 대상 이벤트의 개시 를 상기 애플리케이션에 대한 런타임 환경에 전달하고, 상기 대상 이벤트의 개시를 상기 런타임 환경에 전달한 이후, 상기 애플리케이션에 대해 할당되는 메모리 값이 가비지 컬렉션의 개시 여부를 결정하는 임계값을 초과하 는 경우, 상기 가비지 컬렉션의 수행을 생략하고, 상기 가비지 컬렉션에서 정의된 한계 메모리 값 및 상기 임계 값을 업데이트하는 프로세서를 포함할 수 있다."}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "일 실시예에 따른 전자 장치는 애플리케이션과 관련된 대상 이벤트가 개시되고, 애플리케이션에 대해 할당되는 메모리 값이 가비지 컬렉션의 개시 여부를 결정하는 임계값을 초과하는 경우, 가비지 컬렉션의 수행을 생략하고, 가비지 컬렉션에서 정의된 한계 메모리 값 및 임계값을 업데이트할 수 있다. 다시 말해, 전자 장치 는 대상 이벤트가 개시되는 시점부터 런타임에 설정된 플래그가 해제될 때까지 가비지 컬레션의 수행을 생략할 수 있다. 이에 따라, 전자 장치는 가비지 컬렉션 동작의 최소화를 통해 대상 이벤트의 실행 성능을 향상시키고 런타임 성능 저하도 최소화할 수 있다. 더 나아가, 전자 장치는 종래의 고사양 메모리 단말과 비교할 때, 대상 이벤트가 종료된 후에도 가비지 컬렉션을 강제로 호출할 필요가 없기 때문에 대상 이벤트가 종료된 후에도 가비 지 컬렉션의 호출을 최소화할 수 있어, 런타임 성능 저하를 막을 수 있다."}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다.이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 도 1 은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워 크)를 통하여 전자 장치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하 여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서 버를 통하여 전자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메 모리, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통 신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장 치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안 테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 애플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 애플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 애플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 애플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외 부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가 적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상 기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전 자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제 공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용 한 지능형 서버일 수 있다. 서버는 프로세서, 통신 모듈, 및 메모리를 포함할 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 애플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 애플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다. 도 2은 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 일실시예에 따르면, 프로그램은 전자 장치의 하나 이상의 리소스들을 제어하기 위한 운영 체제, 미들웨어, 또는 상기 운영 체제 에서 실행 가능한 애플리케이션을 포함할 수 있다. 운영 체제는, 예를 들면, AndroidTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 프로그램 중 적어도 일부 프로그 램은, 예를 들면, 제조 시에 전자 장치에 프리로드되거나, 또는 사용자에 의해 사용 시 외부 전자 장치(예: 전자 장치(202 또는 204), 또는 서버)로부터 다운로드되거나 갱신 될 수 있다. 운영 체제는 전자 장치의 하나 이상의 시스템 리소스들(예: 프로세스, 메모리, 또는 전원)의 관리(예: 할당 또는 회수)를 제어할 수 있다. 운영 체제는, 추가적으로 또는 대체적으로, 전자 장치 의 다른 하드웨어 디바이스, 예를 들면, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 구동하기 위한 하나 이상의 드라이 버 프로그램들을 포함할 수 있다. 미들웨어는 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보가 애플리케이션 에 의해 사용될 수 있도록 다양한 기능들을 애플리케이션으로 제공할 수 있다. 미들웨어는, 예를 들 면, 애플리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매니 저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니저, 로케이션 매니저, 그래픽 매니저, 시큐리티 매니저, 통화 매니저, 또는 음성 인식 매니저 를 포함할 수 있다. 애플리케이션 매니저는, 예를 들면, 애플리케이션의 생명 주기를 관리할 수 있다. 윈도우 매니저 는, 예를 들면, 화면에서 사용되는 하나 이상의 GUI 자원들을 관리할 수 있다. 멀티미디어 매니저는, 예를 들면, 미디어 파일들의 재생에 필요한 하나 이상의 포맷들을 파악하고, 그 중 선택된 해당하는 포맷에 맞 는 코덱을 이용하여 상기 미디어 파일들 중 해당하는 미디어 파일의 인코딩 또는 디코딩을 수행할 수 있다. 리 소스 매니저는, 예를 들면, 애플리케이션의 소스 코드 또는 메모리의 메모리의 공간을 관리할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량, 온도 또는 전원을 관리하고, 이 중 해당 정보를 이용하여 전자 장치의 동작에 필요한 관련 정보를 결정 또는 제공할 수 있다. 일실시예에 따르면, 파워 매 니저는 전자 장치의 바이오스(BIOS: basic input/output system)(미도시)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 애플리케이션에 의해 사용될 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 패키지 매니저는, 예를 들면, 패키지 파일의 형태로 배포되는 애플리케이션의 설치 또는 갱신을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 전자 장치와 외부 전자 장치 간의 무선 연 결 또는 직접 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 지정된 이벤트(예: 착신 통화, 메시지, 또는 알람)의 발생을 사용자에게 알리기 위한 기능을 제공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치의 위치 정보를 관리할 수 있다. 그래픽 매니저는, 예를 들면, 사용자에게 제공될 하 나 이상의 그래픽 효과들 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 시큐리티 매니저는, 예를 들면, 시스템 보안 또는 사용자 인증을 제공할 수 있다. 통화(telephony) 매니저 는, 예를 들면, 전자 장치에 의해 제공되는 음성 통화 기능 또는 영상 통화 기능을 관리할 수 있다. 음성 인식 매니저는, 예를 들면, 사용자의 음성 데이터를 서버로 전송하고, 그 음성 데이터에 적어도 일부 기반하여 전자 장치에서 수행될 기능에 대응하는 명령어(command), 또는 그 음성 데이터에 적어도 일 부 기반하여 변환된 문자 데이터를 서버로부터 수신할 수 있다. 일 실시예에 따르면, 미들웨어는 동 적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. 일 실시예에 따르면, 미들웨 어의 적어도 일부는 운영 체제의 일부로 포함되거나, 또는 운영 체제와는 다른 별도의 소프트웨 어로 구현될 수 있다. 애플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브라우 저, 카메라, 알람, 컨택트, 음성 인식, 이메일, 달력, 미디어 플레이어 , 앨범, 와치, 헬스(예: 운동량 또는 혈당과 같은 생체 정보를 측정), 또는 환경 정보 (예: 기압, 습도, 또는 온도 정보 측정) 애플리케이션을 포함할 수 있다. 일실시예에 따르면, 애플리케이션은 전자 장치와 외부 전자 장치 사이의 정보 교환을 지원할 수 있는 정보 교환 애플리케이션(미도 시)을 더 포함할 수 있다. 정보 교환 애플리케이션은, 예를 들면, 외부 전자 장치로 지정된 정보 (예: 통화, 메 시지, 또는 알람)를 전달하도록 설정된 노티피케이션 릴레이 애플리케이션, 또는 외부 전자 장치를 관리하도록 설정된 장치 관리 애플리케이션을 포함할 수 있다. 노티피케이션 릴레이 애플리케이션은, 예를 들면, 전자 장치 의 다른 애플리케이션(예: 이메일 애플리케이션)에서 발생된 지정된 이벤트(예: 메일 수신)에 대응하 는 알림 정보를 외부 전자 장치로 전달할 수 있다. 추가적으로 또는 대체적으로, 노티피케이션 릴레이 애플리케 이션은 외부 전자 장치로부터 알림 정보를 수신하여 전자 장치의 사용자에게 제공할 수 있다. 장치 관리 애플리케이션은, 예를 들면, 전자 장치와 통신하는 외부 전자 장치 또는 그 일부 구성 요소(예: 외부 전자장치의 디스플레이 모듈 또는 카메라 모듈)의 전원(예: 턴-온 또는 턴-오프) 또는 기능(예: 밝기, 해 상도, 또는 포커스)을 제어할 수 있다. 장치 관리 애플리케이션은, 추가적으로 또는 대체적으로, 외부 전자 장 치에서 동작하는 애플리케이션의 설치, 삭제, 또는 갱신을 지원할 수 있다. 가상 머신(Virtual Machine, VM)은 컴파일된 바이너리 코드와, 실제로 프로그램의 명령어를 실행하는 프로세서 간에 인터페이스 역할을 담당하는 소프트웨어를 나타낸다. 가상 머신이 일단 한 플랫폼에 제공되면, 바이트코 드라고 불리는 어떠한 자바 프로그램도 그 플랫폼에서 실행될 수 있다. 자바는 가상머신을 이용하여 응용프로 그램들이 각각의 플랫폼에 맞게 재작성되거나, 다시 컴파일하지 않아도 모든 플랫폼에서 실행되는 것을 허용하 도록 설계되었다. 한편, 이러한 가상 머신에서 실행되는 응용 프로그램을 가상 머신 애플리케이션(이하, '애플리케이션')이라고 한다. 가상 머신은 미들웨어(예: 도 2의 미들웨어 내에 있는 각종 자바 컴포넌트들을 실행할 수 있다. 일 실시예예 따르면, 애플리케이션(예: 도 2의 애플리케이션)이 실행되면, 가상 머신은 실행된 애플리케이 션이 필요로 하는 메모리 영역을 운영 체제(예: 도 2의 운영 체제)로부터 할당 받을 수 있다. 할당 받은 메모리 영역은 힙 메모리(heap memory)를 포함할 수 있다. 여기서, 힙 메모리는 프로세스 별로 안드로이드용 가상 머신 영역에서 할당되는 자바 객체를 저장하는 메모리를 나타낼 수 있다. 안드로이드 단말의 전자 장치에서 프로세스는 정해진 값의 힙 메모리를 가지고 동작할 수 있다. 안드로이드 단 말은 기본적으로 자바 플랫폼을 사용하기 때문에 힙 메모리의 회수는 가비지 컬렉션(garbage collection)을 통 해서 이루어진다. 여기서, 가비지란 애플리케이션에 할당된 메모리 중 더 이상 사용되지 않는 영역을 나타내고, 이러한 가비지를 다시 유용한 메모리로 전환시키는 작업을 가비지 컬렉션이라 한다. 다시 말해, 개 발자가 프로그램 코드로 메모리를 명시적으로 해제하지 않기 때문에, 더 이상 필요 없는 객체를 찾아 지우는 작 업을 가비지 컬렉션이라 한다. 가비지 컬렉션은 가비지 컬렉터(garbage collector)에 의해 수행될 수 있다. 가비지 컬렉터는 애플리케이션에 대하여 할당 가능한 메모리가 부족할 경우 애플리케이션의 힙 메모리 내에서 더이상 사용되지 않는 가비지를 제거함으로써 잉여 메모리를 확보할 수 있다. 가비지 컬렉터는 가비지 컬렉션 을 특정 조건을 만족하면 자동으로 수행할 수 있다. 가비지 컬렉션을 수행하기 위해서는 단말의 CPU 리소스를 사용해야 하기 때문에, 가비지 컬렉션이 수행되면 단말의 하드웨어 성능에 따라 런타임(runtime)의 성능 저하가 동반될 수 있다. 안드로이드 단말에서 액티비티 매니저(예: 도 2의 애플리케이션 매니저)가 애플리케이션 을 런칭(launching)하면, 해당 애플리케이션이 동작하는 런타임 환경(runtime environment)이 생성된다. 자이고트(zygote)는 애플리케이션의 로딩 시간을 단축하기 위한 프로세스로서, 애플리케이션은 자이고트를 통해 포크(fork)된 프로세스 상에서 동작할 수 있다. 안드로이드 단말 내에서 애플리케이션을 실행하는 프로세스가 자이고트(zygote)에 의해 포크될 수 있다. 애플리케이션을 실행하는 프로세스 마다 사용할 수 있는 최대 힙 메 모리 값('heapgrowthlimit') 및 가비지 컬렉션의 개시를 결정하는 메모리 임계값이 존재한다. 최대 힙 메모리 값 및 메모리 임계값(이하, '임계값')은 안드로이드 단말의 힙 파라미터(heap parameter) 및 해당 애플리케이션 에 대한 프로세스가 독립적으로 갖는 안드로이드 매니페스트 파일('androidmanifest.xml')에 저장된 정보에 기 초하여 결정될 수 있다. 안드로이드 단말에서는 애플리케이션에 대한 메모리 할당시 실패가 되지 않도록, 프로세스가 실행 중에 더 이상 필요로 하지 않는 객체를 정리할 필요가 있다. 안드로이드 단말에서는 애플리케이션의 실행 중에 특정 조건이 만족되는 경우 가비지 컬렉터는 자동으로 가비지 컬렉션을 수행할 수 있다. 예를 들어, 가비지 컬렉션은 애플 리케이션의 진입 시점, 애플리케이션의 사용 도중, 백그라운드 전환 시점, 화면 회전(rotation) 시점 등에서 발 생할 수 있으며, 이러한 경우 안드로이드 단말의 사용자는 가비지 컬렉션이 수행함으로써 CPU 리소스가 사용되 기 때문에 느려짐 이슈를 경험하게 된다.반면, 일 실시예에 따른 전자 장치는 애플리케이션에 관련된 대상 이벤트가 발생하는 경우에 대상 이벤트가 종 료될 때까지 가비지 컬렉션의 자동적인 수행을 생략(skip)할 수 있고, 이에 따라 전자 장치의 사용자는 대상 이 벤트가 실행되는 동안에 느려짐 이슈를 회피할 수 있도록 하여 최적의 사용자 경험(user experience, UX)을 제 공할 수 있다. 전술한 바와 같이, 안드로이드 단말에서 실행되는 애플리케이션들은 각각 고유의 힙 메모리를 갖는다. 안드로 이드 단말에서는 시스템 속성(system property)을 통해 가비지 컬렉션을 동작시키는데 사용되는 다양한 메모리 값들이 결정될 수 있다. 시스템 속성이란 자바 가상 머신이 시작될 때 자동으로 설정되는 시스템의 속성값을 나타낸다. 예를 들어, 스마트 워치(smart watch)의 전자 장치에 대한 시스템 속성은 예시적으로 하기 표 1과 같이 설정될 수 있다. 표 1 속성 설정값 heapgrowthlimit 128 (Megabytes) heapmaxfree 3 (Megabytes) heapminfree 512 (Kilobytes) heapsize 384 (Megabytes) heapstartsize 2 (Megabytes) heaptargetutilization 0.75 표 1에서, 'heapgrowthlimit' 속성은 애플리케이션에 대하여 할당하는 힙 메모리가 커지도록 허용하는 가장 큰 메모리 값(이하, '최대 힙 메모리 값')을 나타낸다. 'heapmaxfree' 속성은 애플리케이션에 최대로 허용되는 자 유 메모리 값(이하, '최대 허용 자유 메모리 값')을 나타낸다. 여기서, 자유 메모리(free memory)란 애플리케 이션이 가비지 컬렉션이 동작하기 전에 가지는 여유 메모리 공간을 나타낼 수 있다. 'heapminfree' 속성은 애 플리케이션에 최소로 허용되는 자유 메모리 값(이하, '최소 허용 자유 메모리 값')을 나타낸다. 'heapsize' 속 성은 안드로이드 단말 내에서 애플리케이션에 대하여 할당할 수 있는 힙 메모리의 최대값을 나타낸다. 예를 들 어, 특정 애플리케이션에 대한 'heapgrowthlimit'은 'heapsize' 이하의 값으로 결정될 수 있다. 'heapstartsize' 속성은 애플리케이션에 대한 프로세스가 생성된 후에 할당되는 힙 메모리의 시작값을 나타낸다. 'heaptargetutilization' 속성은 이상적인 힙 메모리의 타겟 사용률을 나타낸다. 애플리케이션에 허용되는 자유 메모리 값은 힙 메모리의 타겟 사용률에 기초하여 최대 허용 자유 메모리 값과 최소 허용 자유 메모리 값 사이에서 결정된다. 애플리케이션에 대하여 힙 메모리를 추가로 할당해야 하는 경우, 'heapminfree' 속성 및 'heapmaxfree' 속성은 'heaptargetutilization' 속성과 함께 추가적으로 할당하는 힙 메모리의 크기를 결정할 수 있다. 애플리케이션들 마다 힙 메모리가 커지도록 허용하는 가장 큰 메모리 값을 나타내는 최대 힙 메모리 값 ('heapgrowthlimit')은 독립적으로 결정된다. 애플리케이션에 대하여 결정되는 최대 힙 메모리 값은 해당 애플 리케이션의 프로세스가 독립적으로 갖는 안드로이드 매니페스트 파일에 기록된 'largeheap'의 속성에 따라 결정 된다. 일반적으로, 'largeheap' 속성은 'false'로 설정되어 있다. 그러나, 'largeheap' 속성을 'true'로 설 정하게 되면, 애플리케이션의 최대 힙 메모리 값('heapgrowthlimit')을 재설정할 수 있다. 예를 들어, 애플리 케이션의 최대 힙 메모리 값('heapgrowthlimit')을 안드로이드 단말 내에서 애플리케이션에 대하여 할당할 수 있는 힙 메모리의 최대값을 나타내는 'heapsize'의 속성값으로 재설정될 수 있다. 예를 들어, 표 1을 참조하면, 안드로이드에서 실행되는 특정 애플리케이션에 대한 최대 힙 메모리 값 ('heapgrowthlimit')은 128 Megabytes로 설정될 수 있으나, 'largeheap' 속성이 'true'로 설정됨으로써 최대 힙 메모리 값은 'heapsize'의 값인 384 Megabytes로 재설정될 수 있다. 안드로이드 단말은 자이고트(zygote)의 프로세스를 통해 애플리케이션에 대응하는 프로세스를 생성 및 실행할 수 있다. 자이고트(zygote)에 의해 프로세스가 포크(fork)되면 힙 메모리의 시작값('heapstartsize')으로 메모 리를 할당할 수 있다. 가비지 컬렉션의 개시를 결정하는 GC start byte가 현재 애플리케이션에 할당된 메모리 값에 의해 설정될 수 있 다. 예를 들어, 지코트에 의해 애플리케이션에 대응하는 프로세스가 포크되어 힙 메모리의 시작값으로 메모리 가 할당된 경우, 힙 메모리의 시작값을 기준으로 GC start byte가 설정될 수 있다. GC start byte는 가비지 컬 렉션의 개시를 결정하는 임계값을 나타내며, 다시 말해, 애플리케이션에 대해 할당되는 메모리 값이 GC startbyte를 초과하면 가비지 컬렉션이 개시된다. 이하, 명세서에서는 GC start byte를 가비지 컬렉션의 개시를 결 정하는 임계값(threshold value)으로 설명한다. 가비지 컬렉션의 개시를 결정하는 임계값은 최대 허용 자유 메모리 값('heapmaxfree'), 최소 허용 자유 메모리 값('heapminfree'), 및 힙 메모리의 타겟 사용률('heaptargetutilization')에 기초하여 설정될 수 있다. 가비 지 컬렉션이 수행되면, 해당 가비지 컬렉션의 수행 이후 다음번의 가비지 컬렉션을 수행시키기 위하여 가비지 컬렉션의 개시를 결정하는 임계값은 업데이트(update)된다. 더 나아가, 가비지 컬렉션의 임계값은 target footprint에 기초하여 결정된다. target footprint는 가비지 컬렉션에서 애플리케이션 별로 정의된 한계 메모 리 값(bound memory value)을 나타낸다. 한계 메모리 값은, 애플리케이션이 실행된 이후 애플리케이션에 대하 여 할당되는 메모리가 가비지 컬렉션에서 정의된 해당 한계 메모리 값을 초과하기 이전에 가비지 컬렉션(GC)을 실행되도록 한정한 값을 나타낼 수 있다. 가비지 컬렉션의 개시를 결정하는 임계값은, 가비지 컬렉션에서 설정 된 한계 메모리 값에 기초하여 결정되고, 한계 메모리 값 이하로 결정된다. 이하, 명세서에서는 target footprint를 주로 한계 메모리 값으로 설명한다. 가비지 컬렉션이 수행되면 한계 메모리 값이 업데이트되고, 업데이트된 한계 메모리 값에 기초하여 가비지 컬렉션의 임계값이 업데이트 될 수 있다. 표 1을 참조하여, 가비지 컬렉션과 관련된 임계값이 업데이트되는 과정을 예시적으로 설명한다. 임계값 및 한 계 메모리 값의 업데이트를 위한 가중치(weight)는 안드로이드 단말에 대해 미리 설정될 수 있으며, 3.0으로 설 정되었다고 가정한다. 자이고트에 의해 애플리케이션을 실행할 프로세스가 포크(fork)되는 시점에, 해당 프로 세스가 6 Megabytes의 한계 메모리 값 및 6 Megabytes 보다 작도록 가비지 컬렉션의 임계값이 설정되었다고 가 정한다. 이 경우, 애플리케이션의 진입을 위하여 애플리케이션에 대하여 6 Megabyte의 메모리 할당이 이루어지 면, 애플리케이션에 할당되는 메모리 값이 임계값을 초과하기 때문에 프로세서는 가비지 컬렉션을 자동적으로 개시한다. 또한, 프로세서는 가비지 컬렉션이 수행된 이후 다음 가비지 컬렉션의 개시를 결정하기 위해, 가비 지 컬렉션이 수행된 시점에 애플리케이션에 대하여 할당된 힙 메모리 값을 기준으로 한계 메모리 값 및 임계값 을 업데이트한다. 보다 구체적으로, 안드로이드 단말에서 일반적으로 가비지 컬렉션에 대한 한계 메모리 값은 아래 수학식 1과 같 이 업데이트 될 수 있다. 수학식 1"}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "수학식 1에서, 허용 자유 메모리 값은 가비지 컬렉션이 수행된 이후에 애플리케이션에 대해 허용되는 자유 메모 리 값을 나타낸다. 전술한 바와 같이, 허용 자유 메모리 값은 힙 메모리의 타겟 사용률 ('heaptargetutilization')에 기초하여 최대 허용 자유 메모리 값과 최소 허용 자유 메모리 값 사이에서 결정된 다. 보다 구체적으로, 허용 자유 메모리 값은 아래 수학식 2와 같이 산출될 수 있다. 수학식 2"}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "예를 들어, 타겟 사용률이 '1'라고 가정하면, 허용 자유 메모리 값은 최대 허용 자유 메모리 값(예를 들어, 2 Megabytes)과 동일한 값을 가진다. 이 경우, 수학식 1에 의하여, 한계 메모리 값은 6 Megabytes +2 Megabytes Ⅹ 3 = 12 Megabytes로 업데이트될 수 있다. 또한, 가비지 컬렉션의 임계값은 업데이트된 한계 메모리 값에 기초하여 업데이트될 수 있으며, 12 Megabytes 이하의 값으로 업데이트될 수 있다. 이후, 애플리케이션의 실행 중 이벤트가 발생하면 추가적으로 메모리가 할당될 수 있고, 추가적으로 할당된 메모리가 업데이트된 임계값을 초과하게 되면 프로세서는 다음 가비지 컬렉션을 자동적으로 실행하게 된다. 이후, 전술한 바와 같은 메커니즘 을 통해 프로세서는 한계 메모리 값 및 임계값을 재설정할 수 있다. 한계 메모리 값은 애플리케이션에 대한 최 대 힙 메모리 값('heapgrowthlimit')까지 증가하면서 힙 메모리를 사용할 수 있고, 이후 추가적으로 한계 메모 리 값을 증가할 수 없는 상태가 되면 메모리 부족(Out Of Memory, OOM) 현상이 발생하게 되어 애플리케이션이 다운된다. 도 3은 안드로이드 단말에서 기본적으로 가비지 컬렉션이 동작하는 과정을 설명하는 흐름도이다. 먼저 동작에서 안드로이드 단말의 전자 장치는 애플리케이션을 실행할 수 있다. 자이고트(zygote)를 통해 프로세스를 포크(fork)하고, 포크된 프로세스로 애플리케이션을 실행할 수 있다. 이어서 동작에서 전자 장치는 실행된 애플리케이션으로부터 메모리 할당 요청이 오게 되면, 해당 애플리케 이션에 대하여 정해진 최대 힙 메모리 값('heapgrowthlimit') 이내의 힙 메모리 영역에서 메모리 할당을 수행할 수 있다. 메모리 할당 요청은 애플리케이션과 관련된 이벤트가 개시되는 경우에 발생할 수 있다. 여기서, 이 벤트란 애플리케이션 내에서의 다양한 액션(action)을 포함할 수 있다. 예를 들어, 이벤트는 애플리케이션에 대한 진입 액션을 포함할 수 있다. 이 경우, 애플리케이션에 대한 진입 개시로 이벤트가 시작하고, 애플리케이 션에 대한 진입 완료로 이벤트가 종료된다. 다른 예를 들어, 이벤트는 전자 장치의 회전 상태에 따라 화면의 모드를 변경하는 액션을 포함할 수 있다. 예를 들어, 화면의 모드를 변경하는 액션은 가로 모드에서 세로 모드 로 또는 세로 모드에서 가로 모드로 화면의 모드를 변경하는 액션을 나타낼 수 있다. 그리고 동작에서 전자 장치는 애플리케이션에 대해 메모리 할당이 수행된 이후, 애플리케이션에 대해 할당 된 메모리 값이 애플리케이션에 대해 설정된 가비지 컬렉션의 개시를 결정하는 임계값을 초과하는지 여부를 판 단할 수 있다. 보다 구체적으로, 전자 장치는 애플리케이션에 대해 기존에 할당된 메모리 값에 애플리케이션과 관련된 이벤트가 발생되어 추가로 할당되는 메모리 값을 합산한 메모리 값이 임계값을 초과하는지 여부를 판단 할 수 있다. 동작에서 전자 장치는 애플리케이션에 대해 할당된 메모리 값이 가비지 컬렉션의 임계값을 초과하는 경우, 가비지 컬렉션의 개시를 결정할 수 있다. 또한, 전자 장치는 애플리케이션에 대해 할당된 메모리 값이 가비지 컬렉션의 임계값 이하인 경우, 가비지 컬렉션을 개시하지 않고 지속적으로 애플리케이션의 메모리 할당 요청에 따라 메모리 할당을 수행할 수 있다. 동작에서 전자 장치는 가비지 컬렉션이 개시된 경우, 가비지 컬렉션을 수행하기 위해, HeapTaskDaemon 스 레드(thread)에 태스크(task)를 등록할 수 있다. 안드로이드 단말에서는 가비지 컬렉션은 일반적으로 HeapTaskDaemon의 백그라운드 스레드에서 실행된다. 동작에서 전자 장치는 HeapTaskDaemon에 등록된 태스크가 실행됨으로써 가비지 컬렉션을 수행할 수 있다. 다시 말해, HeapTaskDaemon에 등록된 태스크가 실행되는 경우, 가비지 컬렉터가 가비지 컬렉션을 수행할 수 있 다. 도 4는 HeapTaskDaemon의 스레드에서 실행되는 94ms의 가비지 컬렉션을 도시한다. 도 4에서와 같이, 애플 리케이션에 할당되는 메모리 값이 클수록 가비지 컬렉션의 수행에 더 많은 CPU 리소스가 소비될 수 있다. 가비지 컬렉션의 수행이 완료되면, 가비지 컬렉션이 수행된 이후 시점에서 애플리케이션에 할당된 메모리 값에 기초하여, 다음 가비지 컬렉션을 수행하기 위한 한계 메모리 값 및 임계값을 업데이트할 수 있다. 예를 들어, 한계 메모리 값 및 임계값의 각각은 업데이트됨으로써 증가하거나 감소할 수 있으며, 이는 가비지 컬렉션이 수 행이 완료된 시점에서의 애플리케이션에 할당된 메모리 값에 의해 결정될 수 있다. 도 5a 내지 도 5b는 비교 실시예에 따른 저사양 메모리 단말에서 가비지 컬렉션이 수행되는 과정을 설명하는 도 면이다. 저사양 메모리 안드로이드 단말은 힙 파라미터(heap parmeter)의 속성들이 상당히 낮게 설정될 수 있다. 저사 양 메모리 단말에서 애플리케이션과 관련된 이벤트가 개시되어 애플리케이션에 대한 메모리 할당이 추가적으로 수행되는 경우, 애플리케이션에 대해 할당되는 메모리 값이 가비지 컬렉션의 임계값을 초과하는 경우가 자주 발 생할 수 있다. 이하에서는, 애플리케이션과 관련된 이벤트의 예시로 애플리케이션의 진입 이벤트인 것으로 설명하나, 애플리케이션과 관련된 이벤트는 이로 한정하지는 않는다. 예를 들어, 저사양 메모리 단말에서는 애플리케이션이 실행되어 애플리케이션의 진입 이벤트가 발생하는 경우, 자바(java) 객체들에 할당되는 메모리 값이 가비지 컬렉션의 임계값을 초과하는 경우가 자주 발생할 수 있다. 이로 인해, 애플리케이션의 진입 도중에 잦은 가비지 컬렉션이 호출될 수 있고, 이에 따라 사용자는 느려짐 이 슈를 경험하게 되어 최적의 사용자 경험을 제공하지 못하는 문제점이 발생한다. 보다 구체적으로, 저사양 메모 리 단말에서는 애플리케이션의 진입 도중에 발생되는 가비지 컬렉션을 처리하기 위해 한정된 CPU 리소스들을 사 용하게 되고, 이는 애플리케이션의 진입에 필요한 리소스 할당에 지연을 발생시키는 하나의 요소가 될 수 있다. 결과적으로 애플리케이션의 진입 도중에 발생하는 가비지 컬렉션은 애플리케이션의 진입 성능 저하로 이어질 수 있다. 도 5a는 애플리케이션의 진입 이벤트가 실행되는 도중에 가비지 컬렉션이 수행되는 경우의 예시를 도시하고, 도 5b는 애플리케이션의 진입이 완료되는 시점까지 가비지 컬렉션이 수행되지 않는 경우의 예시를 도시한다. 도 5a에서는, 애플리케이션의 진입 이벤트가 실행되는 도중에 가비지 컬렉션이 수행되는 경우, 가비지 컬렉션 을 수행하기 위하여 CPU 리소스가 사용되어야 하기 때문에 애플리케이션의 진입 완료되는 시점이 늦다. 예를 들어, 애플리케이션에 진입하기 위하여 프로세서는 복수의 잡들(jobs)을 수행해야 하고, 프로세서는 CPU 리소스를 사용하여 잡들을 수행하는 도중에 애플리케이션에 할당되는 메모리 값이 임계값을 초과하면 가비지 컬 렉션을 수행해야 한다. 반면, 도 5b에서는, 프로세서가 애플리케이션의 진입 완료 시점까지 가비지 컬렉 션이 수행하지 않는 경우, 가비지 컬렉션에 의해 낭비되는 CPU 리소스가 없기 때문에 애플리케이션의 진입 중에 가비지 컬렉션을 수행하는 경우 보다 애플리케이션의 진입이 완료되는 시점이 빠르다. 이에, 도 5b에서의 단말 사용자는 도 5a에서의 단말 사용자 보다 느려짐 이슈를 덜 겪게 된다. 도 6은 비교 실시예에 따른 고사양 메모리 단말에서 가비지 컬렉션의 수행을 최소화하는 과정을 설명하는 도면 이다. 고사양 메모리 안드로이드 단말은 힙 파라미터의 속성들이 저사양 메모리 단말과 비교하여 상대적으로 크게 설 정될 수 있다. 그러나, 고사양 메모리 단말은 저사양 메모리 단말과 비교하여 더 많은 메모리가 애플리케이션 에 대하여 할당되기 때문에, 고사양 메모리 단말에서도 가비지 컬렉션이 자주 발생될 수 있다. 예를 들어, 애 플리케이션와 관련된 진입 이벤트가 발생하는 경우를 가정한다. 고사양 메모리 단말에서는 애플리케이션의 진 입 도중에 발생하는 가비지 컬렉션을 최소화하기 위하여, 한계 메모리 값 및 가비지 컬렉션의 임계값을 업데이 트할 수 있다. 보다 구체적으로, 고사양 메모리 단말에서는 한계 메모리 값 및 가비지 컬렉션의 임계값을 최대 힙 메모리 값('heapgrowthlimit')에 기초하여 업데이트할 수 있다. 이 경우, 고사양 메모리 단말에서는 증가된 한계 메모리 값 및 가비지 컬렉션의 임계값에 의하여 애플리케이션에 진입이 완료된 이후에 가비지 컬렉션이 수 행되기 어렵기 때문에, 애플리케이션에 진입이 완료된 이후에 가비지 컬렉션을 강제로 호출하여 한계 메모 리 값 및 가비지 컬렉션의 임계값을 재설정할 수 있다. 이와 관련하여서는 도 7에서 보다 구체적으로 설명한다. 도 7은 비교 실시예에 따른 고사양 메모리 단말에서 가비지 컬렉션의 수행을 최소화하는 과정을 설명하는 흐름 도이다. 이하에서는, 고사양 메모리 단말에서 애플리케이션에 진입하는 이벤트가 발생하는 경우에 가비지 컬렉션이 수행 되는 과정을 설명한다. 먼저 동작에서 안드로이드 단말의 전자 장치는 자이고트를 통해 애플리케이션을 실행하는 프로세스를 포크 (fork)할 수 있다. 이어서 동작에서 전자 장치는 애플리케이션을 실행하는 프로세스가 포크되면, 한계 메모리 값 및 가비지 컬렉션의 임계값을 업데이트할 수 있다. 보다 구체적으로, 전자 장치는 최대 힙 메모리 값에 기초하여 한계 메 모리 값 및 가비지 컬렉션의 임계값을 업데이트할 수 있다. 예를 들어, 전자 장치는 애플리케이션의 진입 도중 에 가비지 컬렉션이 발생하는 것을 최소화하기 위하여, 한계 메모리 값을 최대 힙 메모리 값 ('heapgrowthlimit')으로 증가시킬 수 있다. 예를 들어, 전자 장치는 애플리케이션의 종류에 따라 256 MegaBytes 또는 512 MegaBytes의 최대 힙 메모리 값으로 한계 메모리 값을 업데이트 할 수 있다. 또한, 전자 장치는 가비지 컬렉션의 임계값을 업데이트된 한계 메모리 값에 기초하여 업데이트 할 수 있다. 예를 들어, 전 자 장치는 한계 메모리 값의 절반으로 가비지 컬렉션의 임계값을 증가시킬 수 잇다. 다시 말해, 전자 장치는가비지 컬렉션의 임계값을 최대 힙 메모리 값의 반으로 업데이트할 수 있다. 전자 장치는 가비지 컬렉션의 임 계값을 최대 힙 메모리 값에 기초하여 증가시킴으로써, 애플리케이션의 진입 도중에 애플리케이션에 메모리가 할당되더라도 가비지 컬렉션이 개시되지 않도록 할 수 있다. 그리고 동작에서 전자 장치는 미리 결정된 시간이 경과한 시점에 가비지 컬렉터가 한계 메모리 값 및 임계 값을 감소시키도록 가비지 컬렉션을 강제로 호출할 수 있고, HeapTaskDaemon 스레드(thread)에 태스크(task)를 등록할 수 있다. 예를 들어, 미리 결정된 시간은 2초일 수 있다. 한계 메모리 값이 최대 힙 메모리 값으로 업데이트되고, 가비 지 컬렉션의 임계값이 최대 힙 메모리 값의 절반으로 업데이트되면, 애플리케이션의 진입이 완료된 이후에도 애 플리케이션에 할당되는 메모리가 가비지 컬렉션의 임계값을 초과하지 않아 가비지 컬렉션이 발생하지 않는 문제 점이 발생한다. 가비지 컬렉션이 발생하지 않으면 애플리케이션 내에서 사용되지 않는 메모리의 가비지가 제거 되지 않기 때문이다. 따라서, 전자 장치는 가비지 컬렉션을 강제로 호출함으로써 가비지 컬렉션의 임계값을 재 조정할 수 있다. 그리고, 개시된 가비지 컬렉션을 실행시키기 위하여 가비지 컬렉션이 실행되는 백그라운드 스 레드인 HeapTaskDaemon 스레드에 태스크를 등록할 수 있다. 동작에서 전자 장치의 프로세서는 등록된 태스크가 실행됨으로써 미리 결정된 시간이 경과한 시점에 가비 지 컬렉션을 수행할 수 있다. 'HeapTaskDaemon'에 등록된 태스크가 실행되는 경우, 가비지 컬렉터가 가비지 컬 렉션을 수행할 수 있다. 이때, 전자 장치는 가비지 컬렉션이 수행된 시점에 애플리케이션에 대하여 할당된 메 모리 값을 기준으로, 한계 메모리 값 및 임계값을 재설정할 수 있다. 다시 말해, 전자 장치는 한계 메모리 값 및 임계값을 다시 감소시킴으로써 애플리케이션의 진입 이후에 가비지 컬렉션이 수행될 수 있도록 할 수 있다. 그러나, 전술한 비교 실시예에 따른 고사양 메모리 단말에서 가비지 컬렉션을 최소화하는 방법은, 자이고트에 의해 프로세스가 포크되는 시점에서 애플리케이션에 대해 할당되는 메모리 값이 가비지 컬렉션의 임계값을 넘지 않는 경우에 대해서도, 불필요하게 애플리케이션의 진입이 완료된 이후에 가비지 컬렉션을 강제로 호출하게 되 는 문제점이 발생한다. 강제로 호출되는 가비지 컬렉션은 CPU 자원을 추가적으로 사용하게 됨으로써 애플리케 이션의 런타임 성능에 영향을 미칠 수 있다. 또한, 전술한 비교 실시예에 따른 가비지 컬렉션을 최소화하는 방 법은, 애플리케이션에 대한 재진입의 경우에는 애플리케이션을 실행하는 프로세스에 대한 포크(fork)가 수행되 지 않고, 단순히 리소스를 다시 로드(load)하게 되므로, 프로세스에 대한 포크가 수행되지 않으면 한계 메모리 값 및 가비지 컬렉션의 임계값이 업데이트 되지 않는 문제점이 발생한다. 다시 말해, 애플리케이션에 대한 재 진입 도중에는 가비지 컬렉션이 발생할 수 있고, 이는 애플리케이션의 진입 성능에 영향을 미칠 수 있다. 정리하면, 애플리케이션 진입 도중에 동작하는 가비지 컬렉션은 제한된 CPU 리소스 내에서 애플리케이션 진입에 필요한 잡(job)을 수행하는 스레드(thread)에 지연을 유발시킬 수 있고, 애플리케이션의 진입 성능을 저하시킬 수 있다. 고사양 메모리 단말에서도 모든 애플리케이션에 대하여 최대 힙 메모리 값을 기준으로 메모리 한계값 및 가비지 컬렉션의 임계값을 늘린 이후, 가비지 컬렉션을 강제로 호출해야 하기 때문에 애플리케이션 진입 완 료 이후의 애플리케이션의 런타임 성능에 영향을 미칠 수 있다. 더 나아가, 전술한 고사양 메모리 단말에서 가 비지 컬렉션을 최소화하는 방법은 애플리케이션에 대응하는 프로세스가 자이고트에 의해 포크되는 시점에 한하 여 적용되기 때문에, 애플리케이션에 대한 재진입의 경우에는 적용되지 않아 사용자의 경험을 최적화할 수 없다. 도 8은 일 실시예에 따른 전자 장치에서 가비지 컬렉션을 최소화하는 과정을 설명하는 흐름도이다. 먼저, 동작에서 일 실시예에 따른 전자 장치(예: 도 1의 전자 장치)는 애플리케이션을 실행할 수 있 다. 전술한 바와 같이, 자이고트(zygote)를 통해 해당 애플리케이션을 실행할 수 있는 프로세스를 포크(fork) 할 수 있다. 애플리케이션은 자이고트를 통해 포크된 프로세스 상에서 동작할 수 있다. 전자 장치는 애플리케 이션으로부터 애플리케이션과 관련된 대상 이벤트를 실행하기 위한 메모리 할당 요청을 수신할 수 있고, 힙 메 모리 영역 내에서 메모리를 할당할 수 있다. 또한 전자 장치는 애플리케이션에 관련된 대상 이벤트가 개시되는 경우, 대상 이벤트의 개시를 애플리케이션에 대한 런타임 환경에 전달할 수 있다. 안드로이드 기반 운영체제에서는 액티비티 매니저(Activity Manager)(예: 도 2의 애플리케이션 매니저)를 사용하여 애플리케이션에서 발생하는 이벤트들을 관리할 수 있다. 예를 들어, 액티비티 매니저는 실행 중인 애플리케이션에 대한 프로세스의 실행 상태 및 프로세스의 실행으로 발생된 이벤트 정보를 관리할 수 있다. 액티비티 매니저가 애플리케이션을 런칭하면, 런칭된 애플리케이션이 동작하는런타임 환경이 생성된다. 애플리케이션은 애플리케이션 프로그래밍 인터페이스(application programming interface, API)를 호출함으로써 애플리케이션과 관련된 대상 이벤트의 개시를 애플리케이션에 대한 런타임 환경에 전달할 수 있다. API는 운영 체제 또는 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 나타낸다. 예를 들어, 대상 이벤트가 애플리케이션의 진입 이벤트인 경우를 가정한다. 애플리케이션에 대한 진입이 개시 되는 경우, 전자 장치는 시스템 서버(system server) 내의 액티비티 매니저 서비스(ActivityManagerService)의 원격 프로시저 호출(remote procedure call, RPC)을 통해 애플리케이션 스레드(ApplicationThread) 내의 런치 액티비티(LaunchActivity)를 요청한다. 이때, 애플리케이션은 애플리케이션에 대한 런타임 환경에 애플리케이 션의 진입 개시를 전달하는 API를 호출할 수 있다. 애플리케이션은 애플리케이션의 진입 개시를 전달하는 API 를 호출함으로써, 런타임 환경에 애플리케이션의 진입 개시를 전달할 수 있다. 여기서, 애플리케이션에 대한 진입 개시는 애플리케이션을 실행하는 프로세스가 자이고트에 의해 포크된 이후 애플리케이션에 대한 첫 진입 개시 및 애플리케이션에 대한 재진입 개시를 모두 포함할 수 있다. 다른 예를 들어, 대상 이벤트는 화면의 모드를 변경하는 이벤트일 수도 있다. 이 경우, 마찬가지로 전자 장치 가 애플리케이션의 실행 중에 회전 상태의 변경을 감지하면, 전자 장치는 시스템 서버 내의 액티비티 매니저 서 비스의 원격 프로시저 호출을 통해 애플리케이션 스레드 내의 런치 액티비티를 요청한다. 이때, 애플리케이션 은 애플리케이션에 대한 런타임 환경에 화면 모드 변경에 대한 개시를 전달하는 API를 호출할 수 있다. 애플리 케이션은 API 호출을 통해 애플리케이션에 대한 런타임 환경에 애플리케이션의 화면 모드 변환 개시를 전달할 수 있다. 그리고 동작에서 전자 장치는 대상 이벤트의 개시를 애플리케이션에 대한 런타임 환경에 전달한 이후, 애 플리케이션에 대해 할당되는 메모리 값이 가비지 컬렉션의 개시 여부를 결정하는 임계값을 초과하는지 여부를 판단할 수 있다. 예를 들어, 전자 장치는 애플리케이션에 대해 할당되는 메모리 값이 가비지 컬렉션의 임계값을 초과하지 않는 경우, 가비지 컬렉션을 개시하지 않는다. 전자 장치는 애플리케이션에 대해 할당된 메모리 값이 가비지 컬렉션 의 임계값 이하인 경우, 가비지 컬렉션을 개시하지 않고 지속적으로 애플리케이션의 메모리 할당 요청에 따라 메모리 할당을 수행할 수 있고, 할당되는 메모리 값이 임계값을 초과할 때까지 가비지 컬렉션을 실행하지 않는 다. 반면, 전자 장치는 애플리케이션에 대해 할당되는 메모리 값이 가비지 컬렉션의 임계값을 초과 하는 경우, 가비 지 컬렉션을 개시할 수 있다. 이어서 동작에서 일 실시예에 따른 전자 장치는 애플리케이션에 대한 런타임 환경에 설정된 플래그(flag) 를 확인할 수 있다. 전자 장치는 애플리케이션에 대한 런타임 환경에 설정된 플래그(flag)를 확인함으로써 개 시된 가비지 컬렉션의 수행을 생략(skip)할 지 여부를 판단할 수 있다. 예를 들어, 전자 장치는 런타임 환경에 설정된 플래그의 변수값이 'true'인 경우, 가비지 컬렉션의 수행을 생략할 수 있다. 전자 장치는 런타임 환경 에 설정된 플래그의 변수값이 'false'인 경우, 가비지 컬렉션의 수행을 생략하지 않고, 기존 안드로이드 단말의 가비지 컬렉션의 동작 방식에 따라 가비지 컬렉션을 수행한다. 전자 장치는 개시된 가비지 컬렉션의 수행을 생 략하는 경우, 한계 메모리 값 및 가비지 컬렉션의 임계값을 업데이트(update)할 수 있다. 일 실시예에 따르면, 전자 장치는 가비지 컬렉션의 수행을 생략할 지 여부를 결정하는 플래그(flag)를 이전에 애플리케이션의 런타임 환경에 설정할 수 있고, 런타임 환경에 설정된 플래그에 기초하여 가비지 컬렉션의 수행 을 생략할 지 여부를 결정할 수 있다. 예를 들어, 전자 장치는 애플리케이션이 대상 이벤트의 개시를 전달하기 위한 API를 호출하여 애플리케이션에 대한 런타임 환경에 전달하는 경우, 가비지 컬렉션의 회피를 위한 플래그 를 런타임 환경에 설정할 수 있다. 보다 구체적으로, 전자 장치에서 실행되는 애플리케이션은 가비지 컬렉션의 회피를 위한 플래그를 설정하는 API를 호출할 수 있고, 런타임 환경은 애플리케이션에 의해 호출된 해당 API에 의해 가비지 컬렉션의 생략을 위한 플래그(flag)를 설정할 수 있다. 예를 들어, 애플리케이션에 할당되는 메모리 값이 가비지 컬렉션의 임계값을 초과함으로써 가비지 컬렉션이 개 시되면, 전자 장치는 런타임 환경에 설정된 플래그의 변수값을 확인할 수 있다. 여기서, 가비지 컬렉션의 생략 을 위한 플래그를 설정한다는 것은, 플래그의 변수값을 설정한다는 것을 나타낼 수 있다. 예를 들어, 런타임 환경은 플래그를 설정하는 API가 애플리케이션에 의해 호출되면, 런타임 환경에 설정된 플래그의 변수값을 'true'로 설정할 수 있고, 이에 따라 전자 장치는 애플리케이션에 대한 가비지 컬렉션이 개시되면 해당 가비지컬렉션을 생략하도록 제어할 수 있다. 일 실시예에 따르면, 전자 장치는 일정 시간이 경과된 후에 런타임 환경에 설정된 플래그의 변수값을 변경함으 로써 플래그를 해제할 수 있다. 예를 들어, 전자 장치는 런타임 환경에 설정된 플래그의 변수값을 'false'로 설정할 수 있고, 이에 따라 전자 장치는 애플리케이션에 대한 가비지 컬렉션이 개시되면 가비지 컬렉션을 수행 하도록 제어할 수 있다. 이때, 전자 장치는 가비지 컬렉션을 수행할 수 있고, 일반적인 안드로이드 단말과 같 이 가비지 컬렉션을 수행한 후에 한계 메모리 값 및 가비지 컬렉션의 임계값을 재설정할 수 있다. 플래그의 설 정 및 해제와 관련하여서는 도 9에서 보다 구체적으로 설명한다. 그리고 동작에서 전자 장치는 애플리케이션에 대해 할당된 메모리 값이 임계값을 초과하는 경우, 애플리케 이션에 대해 할당된 메모리 값이 한계 메모리 값을 초과하는지 여부를 판단할 수 있다. 전자 장치는 애플리케이션에 대해 할당된 메모리 값이 임계값을 초과하는 경우, 한계 메모리 값 및 가비지 컬렉 션의 임계값을 애플리케이션에 대한 최대 허용 자유 메모리 값('heapmaxfree')에 기초하여 업데이트할 수 있다. 그러나, 전자 장치는 애플리케이션에 대해 할당된 메모리 값이 한계 메모리 값을 초과하는지 여부에 따라 업데 이트시 사용되는 가중치의 적용 여부를 달리할 수 있으며, 이와 관련하여서는 동작 및 동작에서 보다 구체적으로 설명한다. 동작에서 전자 장치는 애플리케이션에 대해 할당된 메모리 값이 기존의 한계 메모리 값을 초과하는 경우에 응답하여, 한계 메모리 값을 최대 허용 자유 메모리 값('heapmaxfree') 및 상기 전자 장치에 대하여 미리 설정 된 가중치(weight) 값을 사용하여 업데이트 할 수 있다. 보다 구체적으로, 기존의 한계 메모리 값에 애플리케 이션에 대한 최대 허용 자유 메모리 값에 미리 설정된 가중치가 적용된 값을 합산(sum)함으로써 산출된 값으로 한계 메모리 값을 업데이트 할 수 있다. 한계 메모리 값은 아래 수학식 3에 따라 업데이트 될 수 있다. 수학식 3"}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "수학식 3을 참조하면, 전자 장치는 애플리케이션에 대해 할당되는 메모리 값이 업데이트 전의 한계 메모리 값을 초과하면, 애플리케이션이 사용할 수 있는 메모리 값의 범위를 상당히 늘려줄 필요가 있다. 따라서, 전자 장치 는 애플리케이션의 프로세스에 허용되는 자유 메모리의 최대값인 최대 허용 메모리 값에 가중치를 곱한 값 만큼 기존의 한계 메모리 값을 늘려줄 수 있다. 일 실시예에 따르면, 전자 장치는 한계 메모리 값을 업데이트 하는 경우에 적용되는 가중치 값을 변경함으로써, 대상 이벤트가 개시된 이후에 최초로 가비지 컬렉션이 수행되는 시점을 변경할 수 있다. 전자 장치는 최대 허 용 자유 메모리 값에 적용되는 가중치를 증가시켜 설정함으로써, 대상 이벤트가 개시된 이후에 최초로 수행되는 가비지 컬렉션을 지연시킬 수 있다. 도 9에서 후술하겠으나, 전자 장치는 애플리케이션과 관련된 이벤트가 개시된 이후에 런타임 환경에 설정된 플 래그가 해제될 때까지 개시된 가비지 컬렉션을 생략할 수 있다. 전자 장치는 런타임 환경에 설정된 플래그가 해제된 후에, 가비지 컬렉션이 개시 및 수행될 수 있다. 애플리케이션에 대한 가비지 컬렉션은 애플리케이션에 대하여 할당되는 메모리 값이 임계값을 초과하는 경우에 개시되고, 가비지 컬렉션의 임계값은 한계 메모리 값에 기초하여 결정된다. 따라서, 전자 장치가 증가된 가중치를 사용하여 한계 메모리 값을 업데이트하면 임계값도 증가된 값으로 업데이트되기 때문에, 대상 이벤트가 개시된 이후에 가비지 컬렉션이 최초로 수행되는 시점을 지 연시킬 수 있다. 미리 설정된 가중치는, 예를 들어, 2.0 내지 4.0 사이의 값일 수 있고, 안드로이드 단말에서 는 일반적으로 3.0으로 설정될 수 있다. 그러나, 미리 설정된 가중치는 이로 한정하지는 않으며, 전자 장치의 메모리 상태에 따라 변경될 수 있다. 동작에서 전자 장치는 애플리케이션에 대해 할당된 메모리 값이 기존의 한계 메모리 값 이하인 경우에 응 답하여, 한계 메모리 값을 최대 허용 자유 메모리 값을 사용하여 업데이트 할 수 있다. 보다 구체적으로, 기존 의 한계 메모리 값에 애플리케이션에 대한 최대 허용 자유 메모리 값을 합산(sum)함으로써 산출된 값으로 한계 메모리 값을 업데이트 할 수 있다. 한계 메모리 값은 아래 수학식 4에 따라 업데이트 될 수 있다. 수학식 4"}
{"patent_id": "10-2021-0101366", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "일반적인 안드로이드 단말에서 가비지 컬렉션이 수행되면, 수학식 1에 따라 애플리케이션에 대한 한계 메모리 값은 애플리케이션에 대하여 허용되는 자유 메모리 값에 가중치가 적용된 값에 기초하여 업데이트된다. 이 경 우, 한계 메모리 값 및 가비지 컬렉션의 임계값은 상대적으로 작은 허용 자유 메모리 값에 기초하여 업데이트 되기 때문에, 이벤트의 발생 도중에 다시 가비지 컬렉션이 개시될 수 있다는 문제점이 발생한다. 비교 실시예에 따른 고사양 메모리 단말에서 애플리케이션의 진입 시 가비지 컬렉션을 최소화하기 위한 방법을 살펴보면, 애플리케이션에 대한 프로세스가 포크되는 시점에 한계 메모리 값을 애플리케이션에 대한 최대 힙 메 모리 값으로 업데이트한다. 이 경우, 한계 메모리 값 및 가비지 컬렉션의 임계값은 상대적으로 큰 최대 힙 메 모리 값으로 업데이트 되기 때문에, 업데이트된 이후로는 가비지 컬렉션이 개시 되기 어렵다. 이에, 비교 실시 예에 따른 가비지 컬렉션을 최소화하는 방법은 애플리케이션의 진입이 완료된 이후에 가비지 컬렉션을 강제로 호출하여 실행함으로써 한계 메모리 값 및 임계값을 재조정해야 하고, 재조정을 위한 CPU 리소스의 낭비로 사용 자 경험을 해치게 되는 문제점이 발생한다. 그러나, 일 실시예예 따른 전자 장치는 가비지 컬렉션이 개시된 경우에 가비지 컬렉션을 생략하고, 한계 메모리 값을 최대 허용 자유 메모리 값('heapmaxfree')에 기초하여 업데이트하기 때문에, 대상 이벤트의 발생 도중에 가비지 컬렉션이 개시될 가능성이 낮고, 대상 이벤트의 종료 이후에도 가비지 컬렉션을 강제로 호출할 필요가 없다는 장점이 있다. 또한, 일 실시예에 따른 전자 장치는 애플리케이션에 관련된 대상 이벤트 발생 중에 개시된 가비지 컬렉션을 회 피하도록 한계 메모리 값 및 임계값을 업데이트 한다. 이에, 전자 장치는 해당 시점에 애플리케이션에서 사용 하지 않는 객체에 대한 회수는 하지 못하지만, 대상 이벤트의 발생 도중에 회수 가능한 객체의 양이 많지 않기 때문에 최소한의 크기로 한계 메모리 값 및 임계값으로 업데이트함으로써 애플리케이션에 대해 추가적인 메모리 할당이 있을 경우에 다음 가비지 컬렉션이 수행될 수 있도록 하는 장점이 있다. 그리고 동작에서 전자 장치는 업데이트된 한계 메모리 값으로부터 미리 결정된 메모리 크기 값 만큼 차감 된 값으로 가비지 컬렉션의 임계값을 업데이트할 수 있다. 예를 들어, 미리 결정된 메모리 크기 값은 128 Kilobytes일 수 있으나, 반드시 이로 한정하지는 않는다. 일 실시예예 따르면, 전자 장치는 가비지 컬렉션의 임계값을 업데이트 하는 경우에 차감되는 미리 결정된 메모 리 크기 값을 변경함으로써, 대상 이벤트가 개시된 이후에 최초로 가비지 컬렉션이 수행되는 시점을 변경할 수 있다. 전자 장치는 미리 결정된 메모리 크기 값을 감소시켜 설정함으로써, 대상 이벤트가 개시된 이후에 최초 로 수행되는 가비지 컬렉션을 지연시킬 수 있다. 가비지 컬렉션은 가비지 컬렉션의 임계값을 초과하는 경우에 개시되기 때문에, 임계값을 업데이트된 한계 메모리 값에 가깝게 재설정 할수록 다음 가비지 컬렉션의 수행을 지연시킬 수 있다. 그리고 동작에서 전자 장치는 가비지 컬렉션의 임계값 및 한계 메모리 값을 업데이트 한 이후, 애플리케이 션에 대한 런타임 환경에 설정된 플래그(flag)를 확인할 수 있다. 이때, 전자 장치는 런타임 환경에 설정된 플 래그가 해제된 경우에 동작로 진입할 수 있다. 예를 들어, 전자 장치는 런타임 환경에 설정된 플래그 변 수값이 'false'인 경우에 동작로 진입하여 기존 안드로이드 단말의 가비지 컬렉션 동작 방식에 따라 가비 지 컬렉션을 수행할 수 있다. 일 실시예에 따르면, 플래그가 설정되는 시점으로부터 플래그가 해제되는 시점까지, 애플리케이션에 대해 새로 할당되는 메모리 값이 업데이트된 임계값을 초과하는 경우 가비지 컬렉션의 수행을 생략하고 한계 메모리 값 및 임계값의 업데이트를 반복할 수 있다. 다시 말해, 전자 장치는 런타임 환경에 설정된 플래그 변수값이 'true' 인 경우에는, 다음 가비지 컬렉션이 개시되는 시점에 플래그 변수값을 확인함으로써 다시 가비지 컬레션의 생략 을 수행할지 여부를 판단할 수 있다. 예를 들어, 전자 장치는 애플리케이션에 대해 새로 할당되는 메모리 값이 가비지 컬렉션의 업데이트된 임계값을 초과하여 다음 가비지 컬렉션이 개시되면, 플래그 변수값을 확인할 수 있다. 그리고, 전자 장치는 런타임 환경 내에 플래그가 해제되지 않은 경우, 개시된 다음 가비지 컬렉션을 생략할 수 있다. 그러나, 반드시 일 실시예에 따른 가비지 컬렉션을 최소화하는 방법은 이로 한정하지는 않으며, 복수번의 가비지 컬렉션의 생략 동작(예: 동작)은 오히려 오버헤드(overhead)를 양상할 수 있기 때문에, 한번의 가비지 컬렉션의 생략 동작만이 수 행될 수 있다. 즉, 동작은 생략될 수 있고, 한번의 가비지 컬렉션의 생략 동작이 수행된 이후, 기존 안드 로이드 단말의 가비지 컬렉션 동작 방식에 따라 가비지 컬렉션이 수행될 수 있다. 동작에서 전자 장치는 안드로이드 단말의 기존 가비지 컬렉션의 동작 방식에 따라 가비지 컬렉션을 수행할 수 있다. 일 실시예에 따르면, 전자 장치는 대상 이벤트가 종료된 이후 가비지 컬렉션이 개시되는 경우, 안드 로이드 단말의 기존 가비지 컬렉션의 동작 방식에 따라 가비지 컬렉션을 수행할 수 있다. 예를 들어, 전자 장 치는 대상 이벤트가 종료되기 전까지 애플리케이션에 할당된 메모리 값에 기초하여 가비지 컬렉션의 생략 동작 을 반복할 수 있다. 다른 실시예에 다르면, 전자 장치는 플래그가 해제된 이후 가비지 컬렉션이 개시되는 경우, 안드로이드 단말의 기존 가비지 컬렉션 동작 방식에 따라 가비지 컬렉션을 수행한다. 예를 들어, 전자 장치는 플래그가 해제되기 전까지 애플리케이션에 할당된 메모리 값에 기초하여 가비지 컬렉션의 생략 동작을 반복할 수 있다. 기존 가비지 컬렉션 동작 방식에 따라 가비지 컬렉션이 수행된 경우, 가비지 컬렉션이 수행된 시점에서 애플리 케이션에 대해 할당되는 메모리 값 및 애플리케이션에 허용되는 자유 메모리 값에 기초하여 한계 메모리 값 및 임계값을 업데이트할 수 있다. 도 9는 일 실시예에 따른 전자 장치가 가비지 컬렉션의 수행할 지 여부를 결정하는 플래그를 설정 및 해제하는 과정을 설명하는 흐름도이다. 먼저 동작에서 일 실시예예 따른 전자 장치(예: 도 1의 전자 장치)는 가비지 컬렉션의 수행을 생략할 지 여부를 결정하는 플래그를 애플리케이션의 런타임 환경에 설정할 수 있다. 전자 장치는 가비지 컬렉션 수행 의 생략을 위한 플래그를 설정하는 태스크(task)를 태스크 풀(task pool)에 등록할 수 있고, 애플리케이션에 의 해 플래그를 설정하는 API가 호출되면 등록된 태스크를 실행하여 런타임 환경에 플래그를 설정할 수 있다. 보다 구체적으로, 애플리케이션과 관련된 대상 이벤트가 개시되면, 애플리케이션은 API를 호출하여 애플리케이 션에 대한 런타임 환경에 대상 이벤트의 개시를 런타임 환경에 전달할 수 있다. 애플리케이션에 의해 대상 이 벤트의 개시를 전달하는 API가 호출되면, 애플리케이션에 대한 런타임 환경에 플래그 변수가 설정될 수 있다. 보다 구체적으로, 애플리케이션과 관련된 대상 이벤트가 개시되면, 액티비티 매니저 서비스 (ActivityManagerService)에서 자이고트(Zygote)로 액티비티 스레드(ActivityThread)의 생성 요청이 이루어지 고, 액티비티 스레드(ActivityThread) 내의 handleLaunchActivity 함수가 호출될 수 있다. handleLaunchActivity 함수가 호출되면, 애플리케이션은 애플리케이션에 대한 런타임 환경에 플래그를 설정하는 API를 호출하고, 호출된 API에 의해 애플리케이션에 대한 런타임 환경에 플래그가 설정될 수 있다. 예를 들어, 전자 장치는 가비지 컬렉션 회피를 위한 플래그를 설정하는 태스크(task)를 태스크 풀에 등록할 수 있고, 애플 리케이션에 의해 플래그를 설정하는 API가 호출되면 등록된 태스크를 실행하여 런타임 환경에 플래그를 설정할 수 있다. 전자 장치는 애플리케이션에 관련된 대상 이벤트가 개시된 이후, 애플리케이션에 할당되는 메모리 값이 가비지 컬렉션의 임계값을 초과하는 경우, 가비지 컬렉션의 개시가 결정될 수 있다. 가비지 컬렉션의 개시가 결정되면, 전자 장치는 런타임 환경에 설정된 플래그에 기초하여 가비지 컬렉션의 수행을 생략할 지 여부를 결 정할 수 있다. 예를 들어, 플래그를 설정한다는 것은 플래그의 변수값을 설정한다는 나타낼 수 있고, 전자 장치가 API에 의해 애플리케이션에 대한 런타임 환경에 플래그를 설정하는 경우에 플래그의 변수값을 'true'로 설정할 수 있다. 이 경우, 전자 장치는 가비지 컬렉션의 개시가 결정된 후, 가비지 컬렉션의 수행하기 전에 런타임 환경에 설정 된 플래그의 변수값을 확인할 수 있고, 플래그의 변수값이 'true'인 경우에는 가비지 컬렉션의 수행을 생략할 수 있다. 일 실시예에 따르면, 전자 장치는 가비지 컬렉션을 생략하는 대신, 한계 메모리 값 및 가비지 컬렉션 의 임계값을 최대 허용 메모리 값에 기초하여 업데이트 할 수 있다. 보다 구체적으로, 전자 장치는 애플리케이 션에 할당되는 메모리 값과 한계 메모리 값을 비교하는 동작(예를 들어, 동작)에 기초하여, 한계 메모리 값 및 가비지 컬렉션의 임계값을 업데이트 할 수 있으며, 이와 관련하여서는 도 8에서 전술한 바와 같다. 이하 에서는, 플래그의 해제와 관련하여 보다 구체적으로 설명한다. 동작에서 전자 장치는 애플리케이션의 런타임 환경에 설정된 플래그를 해제할 수 있다. 전자 장치는 플래 그를 해제하는 태스크를 태스크 풀에 등록할 수 있고, 미리 결정된 조건을 만족하면 태스크를 실행하도록 함으 로써 애플리케이션의 런타임 환경에 설정된 플래그를 해제할 수 있다. 일 실시예에 따르면, 미리 결정된 조건은 플래그가 설정된 시점으로부터 미리 결정된 시간이 경과하는 조건일 수 있다. 전자 장치는 플래그가 설정된 시점으로부터 미리 결정된 시간이 경과한 이후에 플래그를 해제할 수 있다. 예를 들어, 전자 장치는 플래그를 해제하는 태스크를 태스크 풀에 등록할 수 있고, 플래그가 설정된 시 점으로부터 미리 결정된 시간이 경과하면 등록된 태스크를 실행시키도록 설정할 수 있다. 다시 말해, 전자 장 치는 애플리케이션에 대한 런타임 환경에 플래그가 설정된 시점으로부터 미리 결정된 시간이 경과하면, 플래그 를 해제하는 태스크를 실행함으로써 런타임 환경에 설정된 플래그를 해제할 수 있다. 전자 장치는 대상 이벤트의 개시부터 이벤트의 종료까지 걸리는 평균적인 시간을 고려하여 미리 결정된 시간을 결정할 수 있다. 예를 들어, 전자 장치는 대상 이벤트가 종료되는데까지 걸리는 평균적인 시간 보다 큰 시간으 로 미리 결정된 시간을 결정할 수 있다. 이 경우, 전자 장치는 런타임 환경에 설정된 플래그를 주로 대상 이벤 트가 종료된 이후에 해제하기 때문에, 대상 이벤트가 실행되는 동안에 가비지 컬렉션의 수행을 생략할 수 있고, 사용자 경험을 해치지 않을 수 있다. 다른 일 실시예예 따르면, 미리 결정된 조건은 플래그의 해제를 요청하는 API가 호출되는 조건일 수 있다. 전 자 장치는 대상 이벤트의 종료를 애플리케이션의 런타임 환경에 전달할 수 있고, 대상 이벤트의 종료가 런타임 환경에 전달되는 경우에 응답하여, 런타임 환경에 설정된 플래그를 해제할 수도 있다. 보다 구체적으로, 애플리케이션은 대상 이벤트의 종료를 전달하기 위한 API를 호출할 수 있다. 이어서, 애플리 케이션은 대상 이벤트의 종료에 따라 런타임 환경에 설정된 플래그의 해제를 요청하는 API를 함께 호출할 수 있 다. 전자 장치는 애플리케이션에 의해 플래그의 해제를 요청하는 API가 호출되는 경우, 런타임 환경에 설정된 플래그를 해제할 수 있다. 보다 구체적으로, 전자 장치는 가비지 컬렉션 회피를 위한 플래그를 해제하는 태스 크(task)를 태스크 풀에 등록할 수 있고, 애플리케이션에 의해 플래그를 해제하는 API가 호출되면 등록된 태스 크를 실행하여 런타임 환경에 설정된 플래그를 해제할 수 있다. 더 나아가, 일 실시예에 따른 전자 장치는 플래그가 설정된 시점으로부터 미리 결정된 시간이 경과하면 플래그 를 해제하는 태스크 및 애플리케이션에 의해 플래그를 해제하는 API가 호출되면 플래그를 해제하는 태스크를 동 시에 태스크 풀에 등록할 수도 있다. 이 경우, 전자 장치는 플래그가 설정된 시점으로부터 미리 결정된 시간이 경과되는 시점 및 대상 이벤트가 종료되어 플래그를 해제하는 API가 호출되는 시점 중 더 빠른 시점에 런타임 환경에 설정된 플래그가 해제될 수 있다. 런타임 환경에 설정된 플래그가 해제된 후, 애플리케이션에 대하여 할당되는 메모리 값이 가비지 컬렉션의 임계값을 초과하게 되면 기존 안드로이드 단말의 가비지 컬렉션 동작 방 식에 따라 가비지 컬렉션을 수행하게 된다.도면 도면1 도면2 도면3 도면4 도면5a 도면5b 도면6 도면7 도면8 도면9"}
{"patent_id": "10-2021-0101366", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예들에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 2은 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 도 3은 안드로이드 단말에서 기본적으로 가비지 컬렉션이 동작하는 과정을 설명하는 흐름도이다. 도 4는 백그라운드 스레드에서 실행되는 가비지 컬렉션을 도시한다. 도 5a 내지 도 5b는 비교 실시예에 따른 저사양 메모리 단말에서 가비지 컬렉션이 수행되는 과정을 설명하는 도 면이다. 도 6은 비교 실시예에 따른 고사양 메모리 단말에서 가비지 컬렉션의 수행을 최소화하는 과정을 설명하는 도면 이다. 도 7은 비교 실시예에 따른 고사양 메모리 단말에서 가비지 컬렉션의 수행을 최소화하는 과정을 설명하는 흐름 도이다. 도 8은 일 실시예에 따른 전자 장치에서 가비지 컬렉션을 최소화하는 과정을 설명하는 흐름도이다. 도 9는 일 실시예에 따른 전자 장치가 가비지 컬렉션의 수행할 지 여부를 결정하는 플래그를 설정 및 해제하는 과정을 설명하는 흐름도이다."}
