{"patent_id": "10-2017-0015701", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2018-0090617", "출원번호": "10-2017-0015701", "발명의 명칭": "전자 장치 및 전자 장치에서 데이터 처리 방법", "출원인": "삼성전자주식회사", "발명자": "박성제"}}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서, 제1 계정에 대응하는 제1 어플리케이션의 제1 파일을 상기 메모리의 제1 영역에 저장하는 메모리; 및 상기 메모리에 동작 가능하게 또는 전기적으로 연결된 프로세서를 포함하고, 상기 프로세서는, 제2 계정에 의한 상기 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을상기 메모리의 제2 영역에 저장하도록 설정된 전자 장치."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 제1 파일에 대한 링크 정보는 상기 제1 파일을 참조하도록 지시하는 정보를 포함하는 것을 특징으로 하는전자 장치."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 프로세서는 어플리케이션 프로그래밍 인터페이스의 요청에 따라 커널을 이용하여 상기 제2 파일을 생성하도록 설정된 전자 장치."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 프로세서는 상기 제2 파일를 이용하여 상기 제1 파일에 포함된 적어도 하나의 블록 인덱스를 획득하고, 상기 획득된 적어도 하나의 블록 인덱스를 이용하여 상기 제1 파일에 대응된 데이터를 획득하도록 설정된 전자 장치."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 상기 프로세서는 상기 제2 계정에 의한 제1 파일에 대응된 제1 데이터의 수정 명령 발생에 따라 상기 제1 파일에 포함된 제1 블록 인덱스를 이용하여 상기 제1 데이터를 제2 데이터로 수정하고 상기 제2 데이터에 대응된 제2 블록 인덱스가 포함되도록 상기 제2 파일을 수정하도록 설정된 전자 장치."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4항에 있어서, 상기 프로세서는 상기 제2 계정에 의한 읽기 명령이 발생에 따라 상기 제2 파일에 존재하는 블록 인덱스를 이용하여 상기 읽기 대상 데이터의 읽기를 수행하고, 상기 제2 파일 내에 상기 블록 인덱스가 존재하지 않으면, 상기 제1 파일에 포함된 블록 인덱스를 이용하여 상기 읽기 대상 데이터의 읽기를 수행하는 전자 장치.공개특허 10-2018-0090617-2-청구항 7 제1항에 있어서, 상기 메모리는 적어도 하나 이상의 계정 각각에 대응된 적어도 하나의 계정 저장 영역과 상기 적어도 하나 이상의 계정이 공유하는 공유 저장 영역이 할당되는 전자 장치."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "전자 장치에서 데이터 처리 방법에 있어서, 제1 계정에 대응하는 제1 어플리케이션의 제1 파일을 상기 메모리의 제1 영역에 저장하는 동작;제2 계정에 의한 상기 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을상기 메모리의 제2 영역에 저장하는 동작을 포함하는 방법."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 제1 파일에 대한 링크 정보는 상기 제1 파일을 참조하도록 지시하는 정보를 포함하는 것을 특징으로 하는방법."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서, 상기 제2 파일은 어플리케이션 프로그래밍 인터페이스의 요청에 따라 커널을 이용하여 생성되는 것을 특징으로하는 방법."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제8항에 있어서,상기 제2 파일를 이용하여 상기 제1 파일에 포함된 적어도 하나의 블록 인덱스를 획득하고, 상기 획득된 적어도하나의 블록 인덱스를 이용하여 상기 제1 파일에 대응된 데이터를 획득하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 상기 제2 계정에 의한 제1 파일에 대응된 제1 데이터의 수정 명령 발생에 따라 상기 제1 파일에 포함된 제1 블록 인덱스를 이용하여 상기 제1 데이터를 제2 데이터로 수정하고 상기 제2 데이터에 대응된 제2 블록 인덱스가포함되도록 상기 제2 파일을 수정하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서, 상기 제2 계정에 의한 읽기 명령이 발생에 따라 상기 제2 파일에 존재하는 블록 인덱스를 이용하여 상기 읽기대상 데이터의 읽기를 수행하고, 상기 제2 파일 내에 상기 블록 인덱스가 존재하지 않으면, 상기 제1 파일에 포공개특허 10-2018-0090617-3-함된 블록 인덱스를 이용하여 상기 읽기 대상 데이터의 읽기를 수행하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제8항에 있어서, 상기 메모리에 적어도 하나 이상의 계정 각각에 대응된 적어도 하나의 계정 저장 영역과 상기 적어도 하나 이상의 계정이 공유하는 공유 저장 영역을 할당하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2017-0015701", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "데이터 처리 프로그램을 저장하는 저장 매체에 있어서, 상기 프로그램은 전자 장치에서, 제1 계정에 대응하는 제1 어플리케이션의 제1 파일을 상기 메모리의 제1 영역에 저장하는 동작; 및제2 계정에 의한 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 상기메모리의 제2 영역에 저장하는 동작을 수행하도록 설정된 저장 매체."}
{"patent_id": "10-2017-0015701", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "전자 장치 및 전자 장치에서 데이터 처리 방법과 관련된 다양한 실시예들이 기술된 바, 한 실시예에 따르면, 전 자 장치에 있어서, 메모리; 및 상기 메모리에 동작 가능하게 또는 전기적으로 연결된 프로세서를 포함하고, 상기 프로세서는, 제1 계정에 대응하는 제1 어플리케이션의 제1 파일을 상기 메모리의 제1 영역에 저장하고, 제2 계정 에 의한 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 상기 메모리의 제2 영역에 저장하도록 설정될 수 있으며, 이외에도 다양한 다른 실시예들이 가능하다."}
{"patent_id": "10-2017-0015701", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명의 다양한 실시예들은 전자 장치 및 전자 장치에서 데이터 처리 방법에 관한 것이다."}
{"patent_id": "10-2017-0015701", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 전자 장치를 복수의 사용자들이 공용으로 이용하고자 하는 요구가 증가하고 있다. 이에 따라 전자 장치는 사용자들이 각자 자신의 계정을 이용하여 하나의 전자 장치를 공용으로 사용할 수 있도록 복수 사용자 계정 (Multi-user account)을 제공하고 있다. 전자 장치에서 복수의 사용자 계정을 제공하는 경우 사용자 계정마다 데이터 저장 및 처리가 수행되므로 데이터 저장 공간이 많이 필요하고 데이터 처리 과정이 복잡할 수 있다. 이 에 따라 복수의 사용자 계정을 위한 효율적인 데이터 저장 및 처리 기술이 필요한 실정이다."}
{"patent_id": "10-2017-0015701", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "종래 기술에 따른 전자 장치에서 복수의 사용자 계정을 지원하기 위한 방식들을 예를 들면, 가상 환경을 이용하 는 방식이나 사용자별 디렉토리를 제공하는 방식 등일 수 있다. 가상 환경을 이용하는 방식은 전자 장치 상에 복수의 사용자 각각에 대응된 가상 머신을 구성하고 각 가상 머신들이 가상 디스크 이미지 파일(Virtual Disk Image File)을 이용하여 디스크를 에뮬레이트(Emulate)할 수 있도록 하는 방식 또는 전자 장치 상의 호스트 OS(operating system)가 컨테이너(container)를 이용하여 복수의 사용자 각각에 대응된 가상 환경을 독립적으로 제공하는 방식 등이 될 수 있다. 사용자별 디렉토리(directory)를 제공하는 방식은 복수의 사용자 계정에 대응 하는 디렉토리를 구성하고, 각 디렉토리 내에 사용자별 데이터를 저장하여 이용하는 방식일 수 있다. 가상 머신을 이용하는 경우, 가상 디스크 이미지 파일을 구성하되, 가상 머신들간 공통적으로 사용되는 공통 부 분은 공통 디스크 이미지 파일로 유지하고, 가상 머신들 별 고유 데이터에 대응되는 개별 부분은 개별 디스크 이미지 파일로 구성하는 방식을 이용함으로써 저장 공간에 대한 최적화를 도모하고 있다. 그러나 이러한 가상 머신을 이용하는 방식에서는 가상 머신들 별로 개별 디스크 이미지 파일을 생성하는 과정에서 개별 디스크 이미 지 파일의 크기가 확장된 이후에는 개별 디스크 이미지 파일 내의 데이터가 삭제되어도 개별 디스크 이미지 파 일의 크기는 확장된 크기가 유지됨으로써 저장 공간이 확장된 상태로 점유되는 문제가 있다. 또한 가상 디스크 이미지 파일은 그 자체가 파일이기 때문에 입출력이 발생할 때, 가상 디스크 상에서 입출력 동작이 발생되고, 이후 실제 디스크 상에서 입출력 동작이 한번 더 발생하므로 처리 과정이 복잡하고 전류 소모가 더 발생할 수있다. 한편, 호스트가 컨테이너를 이용하는 경우, 컨테이너들 간 공통 부분은 시스템은 Read Only인 하위 파일 시스템 을 이용하고, 컨테이터들 각각의 개별 부분은 Read 및 Write 가능한 상위 파일 시스템을 이용하도록 함으로써 저장 공간에 대한 최적화를 도모하고 있다. 그러나 이러한 호스트가 컨테이터를 이용하는 방식에서의 파일 시스 템은 스태커블 파일 시스템(Stackable Filesystem) 즉, 두 개의 파일 시스템을 연결하여 마치 한 개의 파일 시 스템이 작동하도록 하는 파일 시스템으로서, 하위 파일 시스템의 데이터 수정이 발생하면 상위 파일 시스템도 수정되어야 하므로 처리 과정이 복잡하고 저장공간이 많이 필요할 수 있다. 예를 들면, 하위 파일 시스템의 특 정 파일에 대해 1 바이트의 데이터만 수정하고자 하는 경우 수정하고자 하는 1 바이트를 포함하는 파일 전체가 하위 파일 시스템에서 상위 파일 시스템으로 복사되어야 하기 때문에, 복사 동작으로 인한 시간이 처리 과정이 복잡하고 동일한 파일이 중복 저장되므로 저장 공간이 더 필요할 수 있다. 또한 사용자별 디렉토리를 제공하는 방식의 경우 N 명의 사용자가 있을 때 N 개의 디렉토리를 내에 사용자 별 데이터가 저장될 수 있는데, N 명의 사용자들이 동일한 소프트웨어 패키지를 설치하는 경우 동일한 파일들이 N 개의 디렉토리 내에 각각 설치되어 하나의 전자 장치 내에 N 개의 소프트웨어 패키지가 중복 설치됨으로써 저장 공간이 낭비될 수 있다. 또한 상기한 바와 같은 종래 방식들은 데이터 처리가 파일 시스템 또는 파일 단위로 수행되므로, 파일 내의 일 부 데이터만 수정된 경우에도 파일 시스템 또는 파일 전체를 처리해야됨으로써 데이터 처리시 처리량이 많고 저 장 공간도 많이 필요할 수 있다. 따라서 본 발명의 다양한 실시예들에서는 전자 장치에서 복수의 사용자 계정 지원 시 동일한 파일들이 복수 사 용자 디렉토리 내에 각각 설치되는 것이 아니라 미리 저장된 파일이 있는 경우 미리 저장된 파일을 링크하는 CoW Link(Copy-on-Write Link)을 이용함으로써, 데이터 처리 과정이 효율적이고 저장 공간의 낭비를 줄일 수 있 으며 전력 소모가 적은 전자 장치 및 전자 장치에서 데이터 처리 방법을 제공할 수 있다. 또한 본 발명의 다양한 실시예들에서는 전자 장치에서 CoW Link 파일 이용 시 CoW Link 파일이 참조하는 원본 파일의 일부 데이터가 수정되면 원본 파일 전체가 아닌 수정된 데이터에 대응된 데이터 블록에 대해서만 별도로 처리가 가능하도록 함으로써 상대적으로 데이터 처리량이 적고 저장 공간도 적게 필요한 전자 장치 및 전자 장 치에서 데이터 처리 방법을 제공할 수 있다."}
{"patent_id": "10-2017-0015701", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시 예들에 따르면, 전자 장치에 있어서, 제1 계정에 대응하는 제1 어플리케이션의 제1 파일을 상기 메 모리의 제1 영역에 저장하는 메모리; 및 상기 메모리에 동작 가능하게 또는 전기적으로 연결된 프로세서를 포함 하고, 상기 프로세서는, 제2 계정에 의한 상기 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보 를 포함하는 제2 파일을 상기 메모리의 제2 영역에 저장하도록 설정될 수 있다. 다양한 실시 예들에 따르면, 전자 장치에서 데이터 처리 방법에 있어서, 제1 계정에 대응하는 제1 어플리케이션 의 제1 파일을 상기 메모리의 제1 영역에 저장하는 동작; 및 제2 계정에 의한 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 상기 메모리의 제2 영역에 저장하는 동작을 포함할 수 있다. 다양한 실시 예에 따르면, 데이터 처리 프로그램을 저장하는 저장 매체에서, 상기 프로그램은 전자 장치에서, 제1 계정에 대응하는 제1 어플리케이션의 제1 파일을 상기 메모리의 제1 영역에 저장하는 동작 및 제2 계정에 의한 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 상기 메모리의 제 2 영역에 저장하는 동작을 수행할 수 있다."}
{"patent_id": "10-2017-0015701", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 다양한 실시예들에 따르면, 전자 장치에서 복수의 사용자 계정 지원 시 동일한 파일들이 복수 사용자 디렉토리 내에 각각 설치되는 것이 아니라 미리 저장된 파일이 있는 경우 미리 저장된 파일을 링크하는 CoW Link 파일을 이용함으로써, 데이터 처리 과정이 효율적이고 저장 공간의 낭비를 줄일 수 있으며, 전력 소모가 적을 수 있다. 또한 본 발명의 다양한 실시예들에 따르면 전자 장치에서 CoW Link 파일 이용 시 CoW Link 파일이 참조하는 원 본 파일의 일부 데이터가 수정되면 원본 파일 전체가 아닌 수정된 데이터에 대응된 데이터 블록에 대해서만 별도로 처리가 가능하도록 함으로써 상대적으로 데이터 처리량이 적고 저장 공간도 적게 필요하도록 할 수 있다. 또한 본 발명의 다양한 실시예들에 따르면 동일한 파일을 다른 사용자(예를 들면 VM 또는 실제 사용자 등)별로 독립적으로 사용할 수 있도록 하면서도, 중복 데이터를 최소화 함으로써 저장 공간 낭비를 최소화할 수 있으며, CoW Link 파일을 삭제하면 삭제한 만큼 즉시 다른 사용자가 사용할 수 있으므로, 디스크 이미지를 사용할 때처 럼 별도의 추가 작업을 통한 유휴 공간 확보 작업을 하지 않아도 된다."}
{"patent_id": "10-2017-0015701", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 문서의 다양한 실시예들이 첨부된 도면을 참조하여 기재된다. 실시예 및 이에 사용된 용어들은 본 문 서에 기재된 기술을 특정한 실시 형태에 대해 한정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 및 /또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 구성요소에 대해서는 유사 한 참조 부호가 사용될 수 있다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함할 수 있다. 본 문서에서, \"A 또는 B\" 또는 \"A 및/또는 B 중 적어도 하나\" 등의 표현은 함께 나열된 항목들의 모든 가능한 조합을 포함할 수 있다. \"제 1,\" \"제 2,\" \"첫째,\" 또는 \"둘째,\"등의 표현들은 해당 구성요소들을, 순서 또는 중요도에 상관없이 수식할 수 있고, 한 구성요소를 다른 구성요소와 구분하기 위해 사용될 뿐 해당 구성요 소들을 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에 \"(기능적으로 또는 통신적으로) 연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 상기 어떤 구성요소가 상기 다른 구성요소 에 직접적으로 연결되거나, 다른 구성요소(예: 제 3 구성요소)를 통하여 연결될 수 있다. 본 문서에서, \"~하도록 구성된(또는 설정된)(configured to)\"은 상황에 따라, 예를 들면, 하드웨어적 또는 소프 트웨어적으로 \"~에 적합한,\" \"~하는 능력을 가지는,\" \"~하도록 변경된,\" \"~하도록 만들어진,\" \"~를 할 수 있 는,\" 또는 \"~하도록 설계된\"과 상호 호환적으로(interchangeably) 사용될 수 있다. 어떤 상황에서는, \"~하도록 구성된 장치\"라는 표현은, 그 장치가 다른 장치 또는 부품들과 함께 \"~할 수 있는\" 것을 의미할 수 있다. 예를 들면, 문구 \"A, B, 및 C를 수행하도록 구성된(또는 설정된) 프로세서\"는 해당 동작을 수행하기 위한 전용 프로 세서(예: 임베디드 프로세서), 또는 메모리 장치에 저장된 하나 이상의 소프트웨어 프로그램들을 실행함으로써, 해당 동작들을 수행할 수 있는 범용 프로세서(예: CPU 또는 application processor)를 의미할 수 있다. 본 문서의 다양한 실시예들에 따른 전자 장치는, 예를 들면, 스마트폰, 태블릿 PC, 이동 전화기, 영상 전화기, 전자책 리더기, 데스크탑 PC, 랩탑 PC, 넷북 컴퓨터, 워크스테이션, 서버, PDA, PMP(portable multimedia player), MP3 플레이어, 의료기기, 카메라, 또는 웨어러블 장치 중 적어도 하나를 포함할 수 있다. 웨어러블 장 치는 액세서리형(예: 시계, 반지, 팔찌, 발찌, 목걸이, 안경, 콘택트 렌즈, 또는 머리 착용형 장치(head- mounted-device(HMD)), 직물 또는 의류 일체형(예: 전자 의복), 신체 부착형(예: 스킨 패드 또는 문신), 또는 생체 이식형 회로 중 적어도 하나를 포함할 수 있다. 어떤 실시예들에서, 전자 장치는, 예를 들면, 텔레비전, DVD(digital video disk) 플레이어, 오디오, 냉장고, 에어컨, 청소기, 오븐, 전자레인지, 세탁기, 공기 청정기, 셋톱 박스, 홈 오토매이션 컨트롤 패널, 보안 컨트롤 패널, 미디어 박스(예: 삼성 HomeSyncTM, 애플TVTM, 또는구글 TVTM), 게임 콘솔(예: XboxTM, PlayStationTM), 전자 사전, 전자 키, 캠코더, 또는 전자 액자 중 적어도 하 나를 포함할 수 있다. 다른 실시예에서, 전자 장치는, 각종 의료기기(예: 각종 휴대용 의료측정기기(혈당 측정기, 심박 측정기, 혈압 측정기, 또는 체온 측정기 등), MRA(magnetic resonance angiography), MRI(magnetic resonance imaging), CT(computed tomography), 촬영기, 또는 초음파기 등), 네비게이션 장치, 위성 항법 시스템(GNSS(global navigation satellite system)), EDR(event data recorder), FDR(flight data recorder), 자동차 인포테인먼 트 장치, 선박용 전자 장비(예: 선박용 항법 장치, 자이로 콤파스 등), 항공 전자기기(avionics), 보안 기기, 차량용 헤드 유닛(head unit), 산업용 또는 가정용 로봇, 드론(drone), 금융 기관의 ATM, 상점의 POS(point of sales), 또는 사물 인터넷 장치 (예: 전구, 각종 센서, 스프링클러 장치, 화재 경보기, 온도조절기, 가로등, 토 스터, 운동기구, 온수탱크, 히터, 보일러 등) 중 적어도 하나를 포함할 수 있다. 어떤 실시예에 따르면, 전자 장치는 가구, 건물/구조물 또는 자동차의 일부, 전자 보드(electronic board), 전자 사인 수신 장치(electronic signature receiving device), 프로젝터, 또는 각종 계측 기기(예: 수도, 전기, 가스, 또는 전파 계측 기기 등) 중 적어도 하나를 포함할 수 있다. 다양한 실시예에서, 전자 장치는 플렉서블하거나, 또는 전술한 다양한 장치들 중 둘 이상의 조합일 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되지 않는다. 본 문서에서, 사용자라는 용어는 전자 장치를 사용하는 사람 또는 전자 장치를 사용하는 장치(예: 인공지능 전 자 장치)를 지칭할 수 있다. 다양한 실시 예에 따르면, 전자 장치는 제1 계정에 대응하는 제1 어플리케이션의 제1 파일을 상기 메모리의 제1 영역에 저장하는 메모리; 및 상기 메모리에 동작 가능하게 또는 전기적으로 연결된 프로세서를 포함하고, 상기 프로세서는, 제2 계정에 의한 상기 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 상기 메모리의 제2 영역에 저장하도록 설정될 수 있다. 한 실시 예에 따르면, 상기 제1 파일에 대한 링크 정보는 상기 제1 파일을 참조하도록 지시하는 정보를 포함할 수 있다. 한 실시 예에 따르면, 상기 프로세서는 어플리케이션 프로그래밍 인터페이스의 요청에 따라 커널을 이용하여 상 기 제2 파일을 생성하도록 설정될 수 있다. 한 실시 예에 따르면, 상기 프로세서는 상기 제2 파일를 이용하여 상기 제1 파일에 포함된 적어도 하나의 블록 인덱스를 획득하고, 상기 획득된 적어도 하나의 블록 인덱스를 이용하여 상기 제1 파일에 대응된 데이터를 획득 하도록 설정될 수 있다. 한 실시 예에 따르면, 상기 프로세서는 상기 제2 계정에 의한 제1 파일에 대응된 제1 데이터의 수정 명령 발생 에 따라 상기 제1 파일에 포함된 제1 블록 인덱스를 이용하여 상기 제1 데이터를 제2 데이터로 수정하고 상기 제2 데이터에 대응된 제2 블록 인덱스가 포함되도록 상기 제2 파일을 수정하도록 설정될 수 있다. 한 실시 예에 따르면, 상기 프로세서는 상기 제2 계정에 의한 읽기 명령이 발생에 따라 상기 제2 파일에 존재하 는 블록 인덱스를 이용하여 상기 읽기 대상 데이터의 읽기를 수행하고, 상기 제2 파일 내에 상기 블록 인덱스가 존재하지 않으면, 상기 제1 파일에 포함된 블록 인덱스를 이용하여 상기 읽기 대상 데이터의 읽기를 수행할 수 있다. 한 실시 예에 따르면, 상기 메모리는 적어도 하나 이상의 계정 각각에 대응된 적어도 하나의 계정 저장 영역과 상기 적어도 하나 이상의 계정이 공유하는 공유 저장 영역이 할당될 수 있다. 도 1은 다양한 실시예에 따른 전자 장치의 블록도이다. 도 1을 참조하면, 전자 장치는 입력부, 프로세서, 메모리, 출력부를 포함할 수 있다. 입력부는 사용자 또는 다른 외부 기기로부터 명령 또는 데이터를 입력받을 수 있다. 입력부는 사용자 입력을 수신할 수 있는 터치 스크린, 키패드, 터치 패드, 또는 스타일러스 등을 포함할 수 있으며, 사용자에 의 한 요청 또는 선택 또는 명령을 입력받을 수 있다. 프로세서는 중앙처리장치, 어플리케이션 프로세서, 또는 커뮤니케이션 프로세서(communication processor(CP)) 중 하나 또는 그 이상을 포함할 수 있다. 프로세서는, 예를 들면, 전자 장치의 적어도 하 나의 다른 구성요소들의 제어 및/또는 통신에 관한 연산이나 데이터 처리를 실행할 수 있다. 다양한 실시 예에 따르면 프로세서는 복수의 사용자 계정들 각각에 관련된 연산이나 데이터 처리를 실행할 수 있다. 프로세서는 복수의 사용자 계정들 각각에 대응된 복수의 계정 저장 공간들 각각에 관련된 연산이 나 데이터 처리를 실행할 수 있다. 다양한 실시예에 따르면 프로세서는 복수의 사용자 계정들 중 어느 하 나의 사용자 계정(이하 '제1 계정'이라고도 함)에 의한 어플리케이션(이하 '제1 어플리케이션'이라고도 함) 설 치 요청에 따라 복수의 사용자 계정들 각각에 대응된 복수의 저장 공간들 중 제1 어플리케이션에 대응된 제1 파 일이 존재하는지 여부를 판단하고, 제1 파일이 존재하면 제1 파일에 대한 링크 정보를 포함하는 제2 파일(이하 'CoW Link(Copy-on- Write) 파일'이라고도 함)을 생성하여 메모리에 저장할 수 있다. 다양한 실시예에 따르면 메모리는 적어도 하나 이상의 사용자 계정들 각각이 공용으로 이용 가능한 공용 저장 공간과, 적어도 하나 이상의 사용자 계정들 각각이 개별적으로 이용 가능한 저장 공간을 포함할 수 있다. 다양한 실시예에 따르면, 제1 파일은 메모리의 공용 저장 공간 또는 사용자 계정들 각각이 개별적으로 이 용 가능한 공용 저장 공간에 존재할 수 있다. 한 실시 예에 따르면 제1 파일은 제1 파일을 설치 요청한 사용자 계정이 아닌 다른 사용자 계정(이하 '제2 계정'이라고도 함)에 대응된 제2 저장 공간에 존재할 수 있다. 한 실시 예에 따르면, 프로세서는 제1 계정에 의한 제1 어플리케이션 설치 요청에 따라 공용 저장 공간 또 는 제2 저장 공간에 제1 파일이 존재하는 경우, 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 생성할 수 있고, 생성된 제2 파일을 제1 계정에 대응된 제1 저장 공간에 저장할 수 있다. 프로세서는 제1 파일이 존재하지 않으면 제1 어플리케이션을 수신하여 제1 사용자 계정에 대응된 제1 저장 공간에 제1 어플리케이션을 설치할 수 있다. 다양한 실시 예에 따르면 프로세서는 어플리케이션 프로그래 밍 인터페이스(Application Programming Interface)의 요청에 따라 커널(예컨대 파일 시스템)을 이 용하여 파일 단위의 제2 파일을 생성할 수 있다. 다양한 실시 예에 따르면 프로세서는 최초 제2 파일 생성 시, 제2 파일 내에 메타 데이터(meta data)가 포함되도록 생성할 수 있다. 메타 데이터는 제2 파일에 대응된 원 본 어플리케이션인 제1 어플리케이션에 대응된 제1 파일을 참조하기 위한 링크 정보를 포함할 수 있다. 다양한 실시 예에 따르면, 프로세서는 제1 계정에 대응된 제1 저장 공간에 제2 파일이 존재하는 경우 제1 계정에 의한 제1 어플리케이션 실행 요청에 따라 제2 파일을 실행할 수 있다. 프로세서는 제2 파일 실행에 따라 제2 파일 내의 메타 데이터에 포함된 링크 정보를 이용하여 제1 어플리케이션에 대응된 데이터를 획득할 수 있고, 획득된 제1 어플리케이션에 대응된 데이터를 이용하여 제1 어플리케이션을 실행할 수 있다. 다양한 실시예에 따르면 프로세서는 제2 파일을 이용한 제1 어플리케이션 실행 중 제1 어플리케이션에 대 응된 데이터의 수정이 발생하는지 판단할 수 있다. 데이터 수정은 쓰기 명령에 의해 발생할 수 있다. 프로세서 는 제1 어플리케이션 실행 중 데이터 수정이 발생하면, 제2 파일 내에 수정이 발생되는 데이터 블록에 대 한 블록 인덱스가 존재하는지 판단할 수 있다. 프로세서는 블록 인덱스가 존재하면 메모리의 일부 영 역(이하 '제2 저장 영역'이라고도 함)을 수정이 발생되는 데이터를 위한 데이터 블록으로 할당하고, 할당된 제2 저장 영역에 제1 어플리케이션에 대응된 데이터 중 수정 대상 데이터 (이하 '제1 데이터'라고도 함)을 복사할 수 있다. 프로세서는 제2 저장 영역에 복사된 제1 데이터의 일부 데이터를 수정하고, 제2 저장 영역의 위 치 정보를 이용하여 수정된 제1 데이터(이하 '제2 데이터' 라고도 함)에 대한 블록 인덱스를 생성하고 블록 인 덱스를 이용하여 제2 파일을 수정할 수 있다. 프로세서는 블록 인덱스가 존재하면 블록 인덱스를 이용하여 수정 대상 데이터 블록을 검색하고 검색된 데이터 블록을 이용하여 데이터 수정을 수행할 수 있다. 메모리는 휘발성 및/또는 비휘발성 메모리를 포함할 수 있다. 메모리는, 예를 들면, 전자 장치의 적 어도 하나의 다른 구성요소에 관계된 명령 또는 데이터를 저장할 수 있다. 한 실시예에 따르면, 메모리는 소프트웨어 및/또는 프로그램을 저장할 수 있다. 프로그램은, 예를 들면, 커널, 미들웨어, 어플리케이션 프로그래밍 인터페이스(API), 및/또는 어플리케이션 프로그램(또는 \"어플리케이션\") 등 을 포함할 수 있다. 커널, 미들웨어, 또는 API의 적어도 일부는, 운영 시스템으로 지칭될 수 있 다. 커널은, 예를 들면, 다른 프로그램들(예: 미들웨어, API, 또는 어플리케이션 프로그램 )에 구현된 동작 또는 기능을 실행하는 데 사용되는 시스템 리소스들(예: 입력부, 프로세서, 또 는 메모리 등)을 제어 또는 관리할 수 있다. 또한, 커널은 미들웨어, API, 또는 어플리케 이션 프로그램에서 전자 장치의 개별 구성요소에 접근함으로써, 시스템 리소스들을 제어 또는 관리할 수 있는 인터페이스를 제공할 수 있다. 미들웨어는, 예를 들면, API 또는 어플리케이션 프로그램이 커널과 통신하여 데이터를 주 고받을 수 있도록 중개 역할을 수행할 수 있다. 또한, 미들웨어는 어플리케이션 프로그램으로부터 수신된 하나 이상의 작업 요청들을 우선 순위에 따라 처리할 수 있다. 예를 들면, 미들웨어는 어플리케이션 프로그램 중 적어도 하나에 전자 장치의 시스템 리소스(예: 입력부, 프로세서, 또는 메 모리 등)를 사용할 수 있는 우선 순위를 부여하고, 상기 하나 이상의 작업 요청들을 처리할 수 있다. API는 어플리케이션이 커널 또는 미들웨어에서 제공되는 기능을 제어하기 위한 인터페이스 로, 예를 들면, 파일 제어, 창 제어, 영상 처리, 또는 문자 제어 등을 위한 적어도 하나의 인터페이스 또는 함 수(예: 명령어)를 포함할 수 있다. 한 실시예에 따르면, 메모리는 저장 공간을 제공할 수 있다. 저장 공간에는 복수의 사용자 계정들 각각에 대응된 복수의 계정 저장 영역들이 각각 할당될 수 있고 복수의 사용자 계정들 각각이 공유하는 공유 저장 영역 이 할당될 수 있다. 다양한 실시 예에 따르면, 각 사용자 공간에는 각 사용자에 의해 설치되는 파일에 대응된 파일 속성 정보 예컨대 아이노드(i-node)가 저장될 수 있다. 아이노드는 메타 데이터와 블록 인덱스를 포함할 수 있다. 메타 데이터는 아이노드 넘버(i-node number), 파일 타입, 접근 권한(Permission), 링크 카운트(link count), 소유자(owner), 소유 그룹(group), 파일 크기, 맥 타임(MAC Time)을 포함할 수 있다. 아이노드 넘버는 해당 파일을 식별하기 위한 고유한 식별자일 수 있다. 파일 타입은 파일의 유형을 나타내는 정보로서 예컨대 파 일이 일반 파일인지, 디렉토리인지, 장치 파일인지 등을 나타내는 정보를 포함할 수 있다. 링크 카운트는 해당 아이노드를 참조하는 링크(예컨대 하드 링크) 개수에 대한 정보를 포함할 수 있다. 소유자는 파일의 소유자 정 보를 포함할 수 있다. 소유 그룹은 파일의 소유 그룹 정보를 포함할 수 있다. 파일 크기는 파일의 크기 정보를 포함할 수 있다. 맥 타임은 파일의 내용을 마지막으로 수정한 시간, 파일을 마지막으로 접근한 시간, 파일의 속 성을 마지막으로 변경한 시간, 파일의 속성은 아이노드 정보를 의미할 수 있다 즉 소유자, 접근 권한 등이 변경 면 마지막 변경 시간이 변경된다. 블록 인덱스는 데이터 블록에 저장되어 있는 파일 내용에 대한 색인 정보일 수 있다. 다양한 실시예에 따르면 공유 공간에는 사용자에 의해 설치되는 파일에 대응된 데이터가 저장될 수 있 다. 한 실시 예에 따르면 파일에 대응된 데이터는 블록 단위로 저장될 수 있다. 출력부는 프로세서에 의해 수신된 명령 또는 데이터를 사용자 또는 다른 외부 기기로 출력할 수 있다. 출력부는 외부 출력 장치 또는 외부 전자 장치가 유선 또는 무선으로 연결될 수 있는 연결 장치를 포함할 수 있으며, 유선 또는 무선으로 명령 또는 데이터를 외부 출력 장치 또는 외부 전자 장치로 출력할 수 있다. 다양한 실시예에 따르면 출력부는 스피커, 디스플레이 등의 다양한 외부 출력 장치 또는 외부 전자 장치일 수 있으며 어플리케이션 실행 결과에 따른 소리 신호 또는 영상 신호를 외부 출력 장치 또는 외부 전자 장치로 출력할 수 있다. 디스플레이는, 예를 들면, 액정 디스플레이(LCD), 발광 다이오드(LED) 디스플레이, 유 기 발광 다이오드(OLED) 디스플레이, 또는 마이크로 전자기계 시스템 (MEMS) 디스플레이, 또는 전자종이 (electronic paper) 디스플레이를 포함할 수 있다. 디스플레이는, 예를 들면, 사용자에게 각종 콘텐츠(예: 텍스 트, 이미지, 비디오, 아이콘, 및/또는 심볼 등)을 표시할 수 있다. 디스플레이는, 터치 스크린을 포함할 수 있 으며, 예를 들면, 전자 펜 또는 사용자의 신체의 일부를 이용한 터치, 제스쳐, 근접, 또는 호버링 입력을 수신 할 수 있다. 한 실시 예에 따르면 전자 장치는 통신 인터페이스(미도시)를 더 포함할 수 있다. 통신 인터페이스는, 예 를 들면, 전자 장치와 외부 장치(예: 제 1 외부 전자 장치, 제 2 외부 전자 장치, 또는 서버) 간의 통신을 설정할 수 있다. 예를 들면, 통신 인터페이스는 무선 통신 또는 유선 통신을 통해서 네트워크에 연결되어 외부 장치(예: 제 2 외부 전자 장치 또는 서버)와 통신할 수 있다. 무선 통신은, 예를 들면, LTE, LTE-A(LTE Advance), CDMA(code division multiple access), WCDMA(wideband CDMA), UMTS(universal mobile telecommunications system), WiBro(Wireless Broadband), 또는 GSM(Global System for Mobile Communications) 등 중 적어도 하나를 사용하는 셀룰라 통신을 포함할 수 있다. 한 실시예 에 따르면, 무선 통신은, 예를 들면, WiFi(wireless fidelity), 블루투스, 블루투스 저전력(BLE), 지그비 (Zigbee), NFC(near field communication), 자력 시큐어 트랜스미션(Magnetic Secure Transmission), 라디오 프리퀀시(RF), 또는 보디 에어리어 네트워크(BAN) 중 적어도 하나를 포함할 수 있다. 한실시예에 따르면, 무선 통신은 GNSS를 포함할 수 있다. GNSS는, 예를 들면, GPS(Global Positioning System), Glonass(Global Navigation Satellite System), Beidou Navigation Satellite System(이하 \"Beidou\") 또는 Galileo, the European global satellite-based navigation system일 수 있다. 이하, 본 문서에서는, \"GPS\"는 \"GNSS\"와 상호 호환적으로 사용될 수 있다. 유선 통신은, 예를 들면, USB(universal serial bus), HDMI(high definition multimedia interface), RS-232(recommended standard232), 전력선 통신, 또는 POTS(plain old telephone service) 등 중 적어도 하나를 포함할 수 있다. 네트워크는 텔레커뮤니케이션 네트워크, 예를 들면, 컴퓨 터 네트워크(예: LAN 또는 WAN), 인터넷, 또는 텔레폰 네트워크 중 적어도 하나를 포함할 수 있다.도 2는 다양한 실시예에 따른 파일 구조를 나타낸 도면이다. 도 2를 참조하면, 파일은 파일의 속성 정보 예컨대 아이노드(inode)를 포함할 수 있다. 아이노드는 메타 데이터(meta data)와 블록 인덱스(block index)를 포함할 수 있다. 메타 데이터는 아이노 드 넘버(i-node number), 파일 타입, 접근 권한(Permission), 링크 카운트(link count), 소유자(owner), 소유 그룹(group), 파일 크기, 맥 타임(MAC Time)을 포함할 수 있다. 아이노드 넘버는 해당 파일을 식별하기 위한 고 유한 식별자일 수 있다. 파일 타입은 파일의 유형을 나타내는 정보로서 예컨대 파일이 일반 파일인지, 디렉토리 인지, 장치 파일인지 등을 나타내는 정보를 포함할 수 있다. 링크 카운트는 해당 아이노드를 참조하는 링크(예 컨대 하드 링크) 개수에 대한 정보를 포함할 수 있다. 소유자는 파일의 소유자 정보를 포함할 수 있다. 소유 그 룹은 파일의 소유 그룹 정보를 포함할 수 있다. 파일 크기는 파일의 크기 정보를 포함할 수 있다. 맥 타임은 파 일의 내용을 마지막으로 수정한 시간, 파일을 마지막으로 접근한 시간, 파일의 속성을 마지막으로 변경한 시간, 파일의 속성은 아이노드 정보를 의미할 수 있다 즉 소유자, 접근 권한 등이 변경면 마지막 변경 시간이 변경된 다. 블록 인덱스는 파일에 대응된 데이터의 각 데이터 블록에 대한 색인 정보일 수 있다. 한 실시 예에 따 르면, 데이터 블록의 단위는 미리 지정될 수 있다. 예를 들면 파일에 대응된 데이터가 40바이트이고, 데이터 블 록의 단위가 4바이트인 경우 파일에 대응된 데이터 블록은 10개일 수 있으며, 아이노드에는 10개의 블록 인덱스가 포함될 수 있다. 블록 인덱스 각각은 그 블록 인덱스에 대응된 데이터의 위치를 포함할 수 있거나, 그 블록 인덱스에 대응된 하위 블록 인덱스 정보를 포함할 수 있다. 하위 블록 인덱스는 그 하위 블록 인덱스의 또다른 하위 인덱스를 포함할 수 있다. 도 3a 및 도 3b는 다양한 실시 예에 따른 복수의 사용자 계정들 각각에 대응된 디렉토리를 설명하기 위한 개념 도이다. 먼저 도 3a를 참조하면, 프로세서는 시스템 디렉토리의 하위 디렉토리로서 user1, user2, user3 와 같 이 복수의 사용자 계정들 각각에 대응된 디렉토리들(31, 32, 33)을 포함할 수 있다. user1, user2, user3 는 사 용자 계정들이 복수개 존재할 수 있음을 설명하기 위한 예시일 뿐 사용자 계정의 개수는 한정되지 않는다. 사용 자 계정들 각각에 대응된 디렉토리들의 존재에 따라 메모리에는 복수의 사용자 계정들 각각에 대응된 계정 저장 영역들이 할당될 수 있고, 복수의 계정들 각각이 공유하는 공유 저장 영역이 할당될 수 있다. 예를 들어, user3(이하 '제1 계정'이라고도 함)에 의해 예컨대 \"com.example.app\"와 같은 제1 어플리케이션 설 치가 요구되면 프로세서는 메모리에 요청된 제1 어플리케이션에 대응된 제1 파일인 com.example.app 파일이 존재하는지 여부를 판단할 수 있다. 예를 들면, 프로세서는 복수의 사용자 계정들 각각에 대 응된 복수의 계정 저장 영역들 또는 공유 저장 영역에 com.example.app 파일이 존재하는지 여부를 판단할 수 있다. user3 가 설치하고자 하는 어플리케이션의 파일과 동일한 제1 어플리케이션의 제1 파일 com.example.app(이하 'original 파일'이라고도 함) 이 다른 사용자 계정 예컨대 user1 (이하 '제1 계 정'이라고도 함)에 대응된 제1 계정 저장 영역에 미리 저장된 상태이거나, 공유 저장 영역에 미리 저장된 상태 일 수 있다. 도 3a에서는 user3 가 설치하고자 하는 어플리케이션의 파일과 동일한 어플리케이션 파일 com.example.app 파일이 제1 계정 저장 영역에 미리 저장된 상태임을 가정한다. com.example.app 파일 즉, original 파일은 파일 속성 정보 예컨대 아이노드를 포함할 수 있다. 아이노드는 메타 데 이터와 적어도 하나 이상의 블록 인덱스(313, 315)를 포함할 수 있다. 메타 데이터는 original 파일 의 이름, 사이즈, 소유권, 엑세스 모드, 타임 스탬프 등의 정보를 포함할 수 있으며, 적어도 하나 이상의 블록 인덱스(313, 315)는 original 파일에 대응된 데이터 블록들 각각에 대응된 크기 및 데이터 블록들 각각에 대응 된 저장 영역상의 저장 위치 정보를 포함할 수 있다. 예를 들면 제1 블록 인덱스는 제1 블록 인덱스 에 대응된 데이터 A의 크기와 데이터 A의 저장 영역상의 저장 위치 정보를 포함할 수 있고, 제2 블록 인덱스는 제2 블록 인덱스에 대응된 데이터 B의 크기와 데이터 B가 저장된 저장영역 상의 저장 위치 정보를 포함할 수 있다. 프로세서는 제2 사용자의 제2 계정(예를 들면, user3)이 설치하고자 하는\"com.example.app\"의 어플리 케이션에 대응된 파일과 동일한 파일 com.example.app이 미리 저장된 상태이면 com.example.app에 대한 링크 정보를 포함하는 제2 파일인 com.example.app'을 생성하여 제2 계정에 대응된 제2 계정 저장 공 간에 저장할 수 있다. 다양한 실시 예에 따르면 프로세서는 제2 파일 생성 시, 제2 파일 내의 아이노드 (또는 메타 데이터)에 제2 파일에 대응된 original 파일인 com.example.app 파일에 대한 링크 정보가 포함되도록 할 수 있다. 프로세서는 user3에 의한 요청에 따라 제2 파일인 com.example.app' 파일을 실행할 수 있다. 프 로세서는 com.example.app' 파일 실행에 따라 com.example.app' 파일 내의 메타 데이터에 포함된 링크 정보를 이용하여 original 파일인 com.example.app 파일에 대응된 아이노드를 획득할 수 있고, 획득된 아이노드의 메타 데이터 및 적어도 하나 이상의 블록 인덱스(313, 315)를 이용하여 com.example.app 파일을 실행할 수 있다. 도 3b를 참조하면, 프로세서는 com.example.app' 파일을 이용한 com.example.app 실행 중 com.example.app에 대응된 데이터의 수정이 발생하는지 판단할 수 있다. 한 실시예에 따르면 데이터 수정 은 쓰기 명령에 의해 발생할 수 있다. 프로세서는 com.example.app 파일 실행 중 데이터 수정이 발생 하면, com.example.app' 파일 내에 수정이 발생되는 데이터 블록에 대한 블록 인덱스가 존재하는지 판단할 수 있다. 프로세서는 블록 인덱스가 존재하지 않으면 데이터 저장 영역의 일부 영역(이하 '제2 데이 터 저장 영역'이라고도 함)을 수정이 발생되는 데이터를 위한 데이터 블록으로 할당하고, 할당된 제2 데이 터 저장 영역에 com.example.app 파일에 대응된 데이터 중 수정 대상 데이터 블록(이하 '제1 데이터 블록'이라고도 함)의 데이터 B를 복사하여 저장할 수 있다. 프로세서는 제2 데이터 저장 영역(33 6)에 복사된 제1 데이터 블록 B의 일부 데이터를 수정하여 수정된 데이터 b(이하 '제2 데이터'라고도 함)를 저 장하고, 제2 데이터 저장 영역의 위치 정보를 이용하여 제2 데이터 에 대한 블록 인덱스를 생성 하고 제1 데이터 블록에 대한 블록 인덱스를 포함하도록 com.example.app' 파일을 수정할 수 있 다. 프로세서는 블록 인덱스가 이미 존재하면 블록 인덱스를 이용하여 수정 대상 데이터를 검색하고 검색된 데이터를 이용하여 데이터 수정을 수행할 수 있다. 다양한 실시 예에 따르면, 전자 장치에서 데이터 처리 방법은 제1 계정에 대응하는 제1 어플리케이션의 제1 파 일을 상기 메모리의 제1 영역에 저장하는 동작, 및 제2 계정에 의한 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 상기 메모리의 제2 영역에 저장하는 동작을 포함할 수 있다. 한 실시 예에 따르면, 상기 제1 파일에 대한 링크 정보는 상기 제1 파일을 참조하도록 지시하는 정보를 포함할 수 있다. 한 실시 예에 따르면, 상기 제2 파일은 어플리케이션 프로그래밍 인터페이스의 요청에 따라 커널을 이용하여 생 성될 수 있다. 한 실시 예에 따르면, 상기 방법은 상기 제2 파일를 이용하여 상기 제1 파일에 포함된 적어도 하나의 블록 인덱 스를 획득하고, 상기 획득된 적어도 하나의 블록 인덱스를 이용하여 상기 제1 파일에 대응된 데이터를 획득하는 동작을 더 포함할 수 있다. 한 실시 예에 따르면, 상기 방법은 상기 제2 계정에 의한 제1 파일에 대응된 제1 데이터의 수정 명령 발생에 따 라 상기 제1 파일에 포함된 제1 블록 인덱스를 이용하여 상기 제1 데이터를 제2 데이터로 수정하고 상기 제2 데 이터에 대응된 제2 블록 인덱스가 포함되도록 상기 제2 파일을 수정하는 동작을 더 포함할 수 있다. 한 실시 예에 따르면, 상기 방법은 상기 제2 계정에 의한 읽기 명령이 발생에 따라 상기 제2 파일에 존재하는 블록 인덱스를 이용하여 상기 읽기 대상 데이터의 읽기를 수행하고, 상기 제2 파일 내에 상기 블록 인덱스가 존 재하지 않으면, 상기 제1 파일에 포함된 블록 인덱스를 이용하여 상기 읽기 대상 데이터의 읽기를 수행하는 동 작을 더 포함할 수 있다. 한 실시 예에 따르면, 상기 방법은 상기 메모리에 적어도 하나 이상의 계정 각각에 대응된 적어도 하나의 계정 저장 영역과 상기 적어도 하나 이상의 계정이 공유하는 공유 저장 영역을 할당하는 동작을 더 포함할 수 있다. 도 4는 다양한 실시예에 따른 전자 장치에서 어플리케이션 설치 동작을 나타낸 흐름도이다. 도 4를 참조하면, 전자 장치는 410 동작에서 복수의 사용자 계정들 중 제2 사용자의 제2 계정에 의한 제1 어플 리케이션 설치 요청을 수신할 수 있다. 전자 장치는 420 동작에서 제1 어플리케이션의 제1 파일이 존재하는지 판단할 수 있다. 한 실시예에 따르면, 전 자 장치는 복수의 사용자 계정들 각각에 대응된 복수의 계정 저장 영역들 중 제1 어플리케이션의 제1 파일에 대 응된 파일 속성 정보 예컨대 아이노드 정보가 저장되어 있으면 제1 어플리케이션의 제1 파일이 존재하는 것으로 판단할 수 있다. 한 실시 예에 따르면, 전자 장치는 복수의 사용자 계정들 각각이 공유하는 공유 저장 영역에 제1 어플리케이션의 제1 파일에 대응된 파일 속성 정보 예컨대 아이노드 정보가 저장되어 있으면 제1 어플리케 이션의 제1 파일이 존재하는 것으로 판단할 수 있다. 전자 장치는 제1 어플리케이션의 제1 파일이 존재하면 422 동작에서 제1 어플리케이션의 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 생성하여 제2 계정에 대응된 제2 계정 저장 영역에 저장할 수 있다. 다양한 실시 예에 따르면 전자 장치는 어플리케이션 프로그래밍 인터페이스(Application Programming Interface)의 요청에 따라 커널의 파일 시스템을 이용하여 파일 단위의 제2 파일을 생성할 수 있다. 다양한 실시 예에 따르면 전자 장치는 제2 파일 생성 시, 제2 파일 내에 제2 파일에 대응된 원본 어플리케이션인 제1 어플리케이션의 제1 파일 에 대한 링크 정보를 포함할 수 있다. 한 실시 예에 따르면 제1 파일에 대한 링크 정보는 제1 파일에 대응된 파 일 속성 정보 예컨대 아이노드 정보를 참조할 수 있는 링크 정보일 수 있다. 전자 장치는 제1 어플리케이션의 제1 파일이 존재하지 않으면 432 동작에서 제1 어플리케이션을 수신하여 제1 어플리케이션을 설치할 수 있다. 다양한 실시 예에 따르면 전자 장치는 제1 어플리케이션을 제2 계정 저장 영역 에 저장하거나 공유 저장 영역에 저장할 수 있다. 도 5는 다양한 실시 예에 따른 전자 장치에서 Cow link 파일 실행 시 데이터 수정 발생에 따른 동작을 나타낸 흐름도이다. 도 5를 참조하면, 전자 장치는 510 동작에서 Cow link 파일 즉, 제2 파일을 실행할 수 있다. 한 실시예에 따르 면 전자 장치는 사용자에 의한 제2 파일 실행 요청에 따라 제2 파일 내(예컨대 메타 데이터)에 포함된 링크 정 보를 이용하여 제1 어플리케이션의 제1 파일에 대응된 파일 속성 정보(예컨대 아이노드 정보)를 획득할 수 있고, 획득된 제1 파일에 대응된 파일 속성 정보를 이용하여 제1 어플리케이션을 실행할 수 있다. 전자 장치는 520 동작에서 제1 어플리케이션 실행 중 데이터의 수정 명령이 발생하는지 판단할 수 있다. 한 실 시예에 따르면 전자 장치는 제2 파일을 이용한 제1 어플리케이션 실행 중 쓰기 명령 발생에 의해 데이터 수정 명령이 발생할 수 있다. 전자 장치는 제1 어플리케이션 실행 중 데이터의 수정 명령이 발생하면 530 동작에서 제2 파일에 수정이 발생되 는 데이터에 대한 블록 인덱스가 존재하는지 판단할 수 있다. 전자 장치는 수정이 발생되는 데이터 블록에 대한 블록 인덱스가 제2 링크 파일에 존재하지 않으면 532 동작에 서 메모리의 제2 저장 영역을 수정이 발생되는 데이터를 위한 제2 저장 영역으로 할당하고, 제2 저장 영역 에 제2 어플리케이션 파일의 수정 대상 데이터를 복사할 수 있다. 한 실시 예에 따르면 메모리의 제2 저장 영역은 공유 저장 영역 중 일부 영역일 수 있다. 전자 장치는 534 동작에서 제2 저장 영역에 복사된 데이터의 적어도 일부 데이터를 수정할 수 있다. 전자 장치 는 546 동작에서 제2 저장 영역의 저장 위치 정보를 이용하여 제2 저장 영역의 데이터에 대한 블록 인덱스를 생 성하고, 생성된 블록 인덱스가 제2 파일에 포함되도록 수정할 수 있다. 한편, 전자 장치는 수정이 발생되는 데이터에 대한 블록 인덱스가 제2 파일 내에 존재하면 542 동작에서 블록 인덱스를 이용하여 수정 대상 데이터를 검색할 수 있다. 한 실시예에 따르면 전자 장치는 블록 인덱스를 이용하 여 공유 저장 영역에 저장된 수정 대상 데이터를 검색할 수 있다. 전자 장치는 544 동작에서 검색된 수정 대상 데이터를 이용하여 데이터 수정을 수행할 수 있다. 도 6은 다양한 실시 예에 따른 전자 장치에서 Cow link 파일 실행 시 읽기 명령 발생에 따른 동작을 나타낸 흐 름도이다. 도 6을 참조하면, 전자 장치는 610 동작에서 Cow link 파일 즉, 제2 파일을 실행할 수 있다. 한 실시예에 따르 면 전자 장치는 사용자에 의한 제2 파일 실행 요청에 따라 제2 파일 내(예컨대 메타 데이터)에 포함된 링크 정 보를 이용하여 제1 어플리케이션 파일에 대응된 파일 속성 정보(예컨대 아이노드 정보)를 획득할 수 있고, 획득 된 제1 어플리케이션에 대응된 아이노드 정보를 이용하여 제1 어플리케이션을 실행할 수 있다. 전자 장치는 620 동작에서 제1 어플리케이션 실행 중 읽기 명령이 발생하는지 판단할 수 있다. 전자 장치는 제1 어플리케이션 실행 중 읽기 명령이 발생하면 630 동작에서 제2 파일 내에 읽기 명령에 대응된 데이터에 대한 블록 인덱스가 존재하는지 판단할 수 있다. 한 실시 예에 따르면 전자 장치는 제2 내의 아이 노 드 정보를 이용하여 읽기 명령에 대응된 데이터에 대한 블록 인덱스가 존재하는지 판단할 수 있다. 전자 장치는 읽기 명령이 발생한 데이터에 대한 블록 인덱스가 제2 파일 내에 존재하면 632 동작에서 블록 인덱 스를 이용하여 읽기 대상 데이터를 검색할 수 있다. 한 실시예에 따르면 전자 장치는 블록 인덱스를 이용하여 공유 저장 영역에 저장된 읽기 대상 데이터를 검색할 수 있다. 전자 장치는 634 동작에서 검색된 데이터를 이용 하여 읽기 명령을 수행할 수 있다.전자 장치는 읽기 명령이 발생한 데이터에 대한 블록 인덱스가 제2 파일 내에 존재하지 않으면 642 동작에서 제 2 파일에 포함된 링크 정보를 이용하여 제1 어플리케이션 파일에서 읽기 명령이 발생한 데이터에 대한 블록 인 덱스를 획득할 수 있다. 한 실시 예에 따르면 전자 장치는 제2 링크 파일에 포함된 메타 데이터를 이용하여 제2 링크 파일이 참조하고 있는 제1 어플리케이션 파일의 아이 노드를 획득하고, 제1 어플리케이션 파일의 아이노드 에 포함된 블록 인덱스 중 읽기 명령이 발생한 데이터에 대한 블록 인덱스를 획득할 수 있다. 전자 장치는 644 동작에서 획득된 읽기 명령이 발생한 데이터에 대한 블록 인덱스를 이용하여 데이터 읽기를 수 행할 수 있다. 도 7은 다양한 실시예예 따른 전자 장치에서 Cow link 파일 수정 동작을 설명하기 위한 도면이다. 도 7을 참조하면, 전자 장치는 메모리에 origina 파일(이하 '원본 파일'이라고도 함.)을 저장할 수 있다. 원본 파일은 원본 파일에 대응된 파일 속성 정보 예컨대 제1 아이노드를 포함할 수 있다. 제1 아이노드는 제1 메타 데이터와 적어도 하나 이상의 제1 블록 인덱스를 포함할 수 있다. 제1 메타 데이터는 원본 파일의 아이노드 넘버(i-node number), 파일 타입, 접근 권한(Permission), 링크 카운트(link count), 소 유자(owner), 소유 그룹(group), 파일 크기, 맥 타임(MAC Time)을 포함할 수 있다. 적어도 하나 이상의 제1 블 록 인덱스들은 원본 파일에 대응된 데이터를 이루는 적어도 하나 이상의 블록들 각각에 대한 정보일 수 있 다. 전자 장치는 원본 파일이 저장된 상태에서 원본 파일과 동일한 파일의 설치가 요구되면 원본 파일과 동일한 파 일을 설치하는 대신 제2 파일 즉, Cow link 파일을 생성할 수 있다. Cow link 파일은 Cow link 파일에 대응된 파일 속성 정보 예컨대 제2 아이노드를 포함할 수 있으며, 최초 생성 시 제2 아이노드의 제2 메타 데 이터에 Cow link 파일이 참조하는(또는 Cow link 파일과 연결된) 원본 파일의 제1 아이노드 정보를 포함할 수 있다. 전자 장치는 Cow link 파일이 실행되면 Cow link 파일의 제2 메타 데이터를 이용하여 원본 파일의 제1 아 이노드를 획득하고, 원본 파일의 제1 아이노드에 포함된 제1 메타 데이터 및 적어도 하나의 블 록 인덱스를 이용하여 원본 파일에 대응된 데이터들을 처리(읽거나 쓰기)할 수 있다. 전자 장치는 Cow link 파일이 실행에 의해 원본 파일에 대응된 데이터들의 엑세스 중 쓰기 명령이 발생한 경우 원본 파일의 적어도 하나의 블록 인덱스 중 제1 블록 인덱스(714-2)를 이용하여 제1 블록 인덱스(714-2)에 대응되는 메모리의 제1 데이터 저장 영역의 제1 데이터에 대한 쓰기 명령을 수행할 수 있다. 쓰기 명령 수행에 따라 제1 데이터가 수정되고, 수정된 제1 데이터(이하 '제2 데이터'라고도 함)는 제1 데이터의 제1 데이터 저장 영역과 다른 제2 데이터 저장 영역에 저장될 수 있다. 전자 장치는 제2 데이터에 대한 제2 데이터 저장 영역의 저장에 따라 Cow link 파일의 제2 아이노드에 제2 데이터에 대한 제2 데이터 저장 영역의 위치에 대한 정보를 포함하는 제2 블록 인덱스(724-2)가 포함되도록 Cow link 파일을 수정할 수 있다. 한 실시 예에 따르면 원본 파일의 크기가 1M 바이트이고, 적어도 하나 이상의 블록 인덱스가 각각 4096 바 이트의 데이터 블록에 대한 블록 인덱스라고 가정하면 적어도 하나의 블록 인덱스는 0~4096 바이트에 대한 블록 인덱스, 4097~ 8192 바이트에 대한 블록 인덱스, 8193~10000 바이트에 대한 블록 인덱스를 포함할 수 있으 며, 4112 바이트에 대한 데이터 수정이 발생하면 4112 바이트가 포함된 4097~ 8192 바이트에 대한 블록 인덱스 의 데이터가 수정되고, 수정된 제2 데이터는 제2 저장 영역에 저장되며, 전자 장치는 Cow link 파일의 제2 아이 노드에 제2 데이터에 대한 제2 데이터 저장 영역의 위치에 대한 정보를 포함하는 제2 블록 인덱스(724- 2)가 포함되도록 Cow link 파일을 수정할 수 있다. 도 8a 및 도 8b는 다양한 실시 예에 따른 파일의 메타 데이터와 블록 인덱스에 포함되는 정보를 나타낸 도면이 다. 도 8a를 참조하면, \"file.zip\" 파일에 대한 메타 데이터와 블록 인덱스가 예로 도시되어 있다. 메타 데이터는 \"file.zip\"와 같은 파일 이름, \"Filesystem type is: ef53\"와 같은 파일 타입, \"File size of file.zip is 47852027 (11683 blocks of 4096 bytes)\"와 같은 파일 크기에 대한 정보를 포함할 수 있다. 블록 인덱스는 0 블록 인덱스, 1 블록 인덱스, 2 블록 인덱스와 같은 연속적인 블록 인덱스의 묶음인 ext(extent)를 포함할 수 있다. 각 블록 인덱스는 logical_offset과 physical_offset을 포함할 수 있다. logical_offset은 데이터 블록의 논리적인 블록 위치이고 physical_offset은 데이터 블록의 물리적인 위치로서메모리 상의 실제 블록 위치일 수 있다. 만약 파일의 일부 데이터의 수정이 발생하면, 수정된 데이터가 다른 저장 영역에 저장되고, 수정된 데이터에 대 응된 데이터 블록의 블록 인덱스를 포함하는 \"cow_file.zip\" 파일이 생성될 수 있다. 도 8b를 참조하면, logical_offset의 6144 ~ 6156 위치에 데이터 수정이 발생한 경우 수정된 데이터에 대한 저 장 영역이 새로 할당되고,\"cow_file.zip\" 파일의 블록 인덱스에는 수정된 데이터에 대한 저장 영역 위치 정보를 포함하는 블록 인덱스(821-1)가 포함될 수 있다. 본 문서에서 기술된 구성요소들 각각은 하나 또는 그 이상의 부품(component)으로 구성될 수 있으며, 해당 구성 요소의 명칭은 전자 장치의 종류에 따라서 달라질 수 있다. 다양한 실시예에서, 전자 장치는 본 문서에서 기술 된 구성요소 중 적어도 하나를 포함하여 구성될 수 있으며, 일부 구성요소가 생략되거나 또는 추가적인 다른 구 성요소를 더 포함할 수 있다. 또한, 다양한 실시예에 따른 전자 장치의 구성요소들 중 일부가 결합되어 하나의 개체(entity)로 구성됨으로써, 결합되기 이전의 해당 구성요소들의 기능을 동일하게 수행할 수 있다. 본 문서에서 사용된 용어 \"모듈\"은, 예를 들면, 하드웨어, 소프트웨어 또는 펌웨어(firmware) 중 하나 또는 둘 이상의 조합을 포함하는 단위(unit)를 의미할 수 있다. \"모듈\"은, 예를 들면, 유닛(unit), 로직(logic), 논리 블록(logical block), 부품(component), 또는 회로(circuit) 등의 용어와 바꾸어 사용(interchangeably use)될 수 있다. \"모듈\"은, 일체로 구성된 부품의 최소 단위 또는 그 일부가 될 수 있다. \"모듈\"은 하나 또는 그 이상 의 기능을 수행하는 최소 단위 또는 그 일부가 될 수도 있다. \"모듈\"은 기계적으로 또는 전자적으로 구현될 수 있다. 예를 들면,\"모듈\"은, 알려졌거나 앞으로 개발될, 어떤 동작들을 수행하는 ASIC(application-specific integrated circuit) 칩, FPGAs(field-programmable gate arrays) 또는 프로그램 가능 논리 장치 (programmable-logic device) 중 적어도 하나를 포함할 수 있다. 다양한 실시예에 따른 장치(예: 모듈들 또는 그 기능들) 또는 방법(예: 동작들)의 적어도 일부는, 예컨대, 프로 그램 모듈의 형태로 컴퓨터로 읽을 수 있는 저장매체(computer-readable storage media)에 저장된 명령어로 구 현될 수 있다. 상기 명령어가 프로세서(예: 프로세서)에 의해 실행될 경우, 상기 하나 이상의 프로세서가 상기 명령어에 해당하는 기능을 수행할 수 있다. 컴퓨터로 읽을 수 있는 저장매체는, 예를 들면, 메모리가 될 수 있다. 다양한 실시 예에 따르면, 데이터 처리 프로그램을 저장하는 저장 매체에서, 상기 프로그램은 전자 장치에서, 제1 계정에 대응하는 제1 어플리케이션의 제1 파일을 상기 메모리의 제1 영역에 저장하는 동작 및 제2 계정에 의한 제1 어플리케이션 설치 요구 시 상기 제1 파일에 대한 링크 정보를 포함하는 제2 파일을 상기 메모리의 제 2 영역에 저장하는 동작을 수행할 수 있다. 컴퓨터로 판독 가능한 기록 매체는, 하드디스크, 플로피디스크, 마그네틱 매체(magnetic media)(예: 자기테이프), 광기록 매체(optical media)(예: CD-ROM(compact disc read only memory), DVD(digital versatile disc), 자기-광 매체(magneto-optical media)(예: 플롭티컬 디스크(floptical disk)), 하드웨어 장 치(예: ROM(read only memory), RAM(random access memory), 또는 플래시 메모리 등) 등을 포함할 수 있다. 또 한, 프로그램 명령에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해 서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함할 수 있다. 상술한 하드웨어 장치는 다양한 실시예 의 동작을 수행하기 위해 하나 이상의 소프트웨어 모듈로서 작동하도록 구성될 수 있으며, 그 역도 마찬가지다. 다양한 실시예에 따른 모듈 또는 프로그램 모듈은 전술한 구성요소들 중 적어도 하나 이상을 포함하거나, 일부 가 생략되거나, 또는 추가적인 다른 구성요소를 더 포함할 수 있다. 다양한 실시예에 따른 모듈, 프로그램 모듈 또는 다른 구성요소에 의해 수행되는 동작들은 순차적, 병렬적, 반복적 또는 휴리스틱(heuristic)한 방법으로 실행될 수 있다. 또한, 일부 동작은 다른 순서로 실행되거나, 생략되거나, 또는 다른 동작이 추가될 수 있다. 이상에서 설명한 본 발명의 다양한 실시예의 전자 장치는 전술한 실시 예 및 도면에 의해 한정되는 것은"}
{"patent_id": "10-2017-0015701", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "아니고, 본 발명의 기술적 범위 내에서 여러 가지 치환, 변형 및 변경이 가능함은 본 발명이 속하는 기술분야에 서 통상의 지식을 가진 자에게 있어 명백할 것이다.도면 도면1 도면2 도면3a 도면3b 도면4 도면5 도면6 도면7 도면8a 도면8b"}
{"patent_id": "10-2017-0015701", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예에 따른 전자 장치의 블록도이다. 도 2는 다양한 실시예에 따른 파일 구조를 나타낸 도면이다. 도 3a 및 도 3b는 다양한 실시 예에 따른 복수의 사용자 계정들 각각에 대응된 디렉토리를 설명하기 위한 개념 도이다. 도 4는 다양한 실시예에 따른 전자 장치에서 어플리케이션 설치 동작을 나타낸 흐름도이다. 도 5는 다양한 실시 예에 따른 전자 장치에서 Cow link 파일 실행 시 데이터 수정 발생에 따른 동작을 나타낸 흐름도이다. 도 6은 다양한 실시 예에 따른 전자 장치에서 Cow link 파일 실행 시 읽기 명령 발생에 따른 동작을 나타낸 흐 름도이다. 도 7은 다양한 실시예예 따른 전자 장치에서 Cow link 파일 수정 동작을 설명하기 위한 도면이다. 도 8a 및 도 8b는 다양한 실시 예에 따른 파일의 메타 데이터와 블록 인덱스에 포함되는 정보를 나타낸 도면이 다."}
