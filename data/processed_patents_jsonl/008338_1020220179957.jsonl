{"patent_id": "10-2022-0179957", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0098301", "출원번호": "10-2022-0179957", "발명의 명칭": "대규모 오픈 데이터 레이크 구축을 위한 플랫폼 독립적 자동화 프레임워크를 활용하는 전자", "출원인": "강원대학교산학협력단", "발명자": "문양세"}}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치의 제어 방법에 있어서,상기 전자 장치가, 복수의 외부 데이터 포탈 각각으로부터 카탈로그를 수신하여 저장하는, 수집 단계;상기 전자 장치가, 사용자의 도메인에 매칭되는 키워드를 기준으로 상기 수신된 카탈로그를 파싱하여 데이터를추출하는, 추출 단계; 및상기 전자 장치가, 상기 추출된 데이터에 포함되는 디스트리뷰션 객체의 URI(Uniform Resource Identifier)에위치한 데이터를 데이터 레이크에 저장하는, 저장 단계;를 포함하는, 전자 장치의 제어 방법."}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 수집 단계는,상기 복수의 외부 데이터 포탈 각각에 매칭되는 퍼블리셔 정보를 바탕으로, 상기 복수의 외부 데이터 포탈 각각을 검증하고,검증이 완료된 외부 데이터 포탈로부터 카탈로그를 수신하는, 전자 장치의 제어 방법."}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 추출 단계는,각 오픈 데이터 포털의 플랫폼 정보에 매칭되는 처리 로직을 바탕으로 각 오픈 데이터 포털의 데이터를 추출하는, 전자 장치의 제어 방법."}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 저장 단계는,상기 복수의 외부 데이터 포탈 각각에 매칭되는 퍼블리셔 정보 및 상기 키워드를 바탕으로 데이터 레이크를 생성하고,상기 디스트리뷰션 객체의 URI 수만큼 반복하여 실제 데이터를 요청하고,수신된 실제 데이터를 상기 데이터 레이크에 저장하는, 전자 장치의 제어 방법."}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 전자 장치의 제어 방법은,상기 전자 장치가, 각 외부 데이터 포탈의 카탈로그에서 키워드를 기반으로 추출된 데이터셋이 저장되는dataset 테이블, 데이터셋에 포함된 디스트리뷰션이 저장되는 distribution 테이블, 사용자가 지정한 키워드를저장하는 keyword 테이블, 데이터셋과 키워드의 관계를 통해 해당 데이터셋이 어떤 도메인에 속하는지 관리하는dataset_keyword 테이블, 및 오브젝트가 저장된 데이터 레이크에 대한 정보를 관리하는 datalake 테이블로 구성된, ER-다이어그램을 관리하는 단계;를 더 포함하는, 전자 장치의 제어 방법."}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "공개특허 10-2024-0098301-3-제5항에 있어서,상기 ER-다이어그램을 관리하는 단계는,상기 추출 단계에서 사용자에게 입력으로 받은 키워드가 DB에 존재하는지 확인하고, 없다면 새로운 키워드를keyword 테이블에 생성하고,카탈로그에 대한 파싱과 키워드 기반의 전처리를 통해 데이터셋을 선별하면, 메타데이터와 함께 객체로 매핑하여 dataset 테이블에 저장하고,데이터셋의 저장이 완료되면, 연관된 키워드를 dataset_keyword 테이블에 저장하는, 전자 장치의 제어 방법."}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 ER-다이어그램을 관리하는 단계는,데이터셋에 속한 디스트리뷰션을 메타데이터와 매핑한 후에 distribution 테이블에 저장하고,상기 저장 단계는 버킷의 존재 여부를 확인하고 없다면 새로운 버킷을 datalake 테이블에 생성하고, URI에 해당하는 실제 데이터를 데이터 레이크에 저장하면, 해당 오브젝트의 url과 일치하는 객체를distribution 테이블에서 조회하고,오브젝트가 저장된 데이터 레이크 id와 오브젝트 이름을 추가하여 업데이트하는, 전자 장치의 제어 방법."}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "적어도 하나의 인스트럭션이 저장된 메모리; 및상기 인스트럭션을 실행하여 제1항의 제어 방법을 수행하는 프로세서;를 포함하는, 전자 장치."}
{"patent_id": "10-2022-0179957", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "전자 장치의 프로세서에 의해 실행되어 상기 전자 장치로 하여금 제1항의 제어 방법을 수행하도록 하는, 컴퓨터프로그램이 저장된 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "전자 장치의 제어 방법이 개시된다. 본 제어 방법은, 복수의 외부 데이터 포탈 각각으로부터 카탈로그를 수신하 여 저장하는, 수집 단계, 사용자의 도메인에 매칭되는 키워드를 기준으로 카탈로그를 파싱하여 데이터를 추출하 는, 추출 단계, 추출된 데이터에 포함되는 디스트리뷰션 객체의 URI(Uniform Resource Identifier)에 위치한 데 이터를 데이터 레이크에 저장하는, 저장 단계를 포함한다."}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 데이터 레이크를 구축하는 프레임워크에 관한 것으로, 보다 상세하게는 다양한 외부 데이터 포탈들의 데이터를 바탕으로 데이터 레이크를 구축하는 자동화 프레임워크를 운영하는 전자 장치 내지는 시스템에 관한 것이다."}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "데이터 레이크란 정형, 비정형을 포함한 서로 다른 형태의 방대한 데이터를 저장할 수 있는 저장소(repositor y)를 의미하며, 이 중 오픈 데이터를 대상으로 하는 데이터 레이크를 오픈 데이터 레이크라 한다. 오픈 데이터 는 주로 정부에서 공개하는 공공 데이터를 지칭하며, 오픈 데이터 포탈을 통해 공개된다. 전 세계적으로 데이터 공개가 활발해지면서 머신 러닝, 데이터 분석 등 다양한 분야에서 오픈 데이터를 활용하려는 시도가 급증하고 있다. 이로 인해, 오픈 데이터가 연구 데이터 부족 문제를 해결할 중요한 데이터 소스로 떠오르고 있으며, 미국, 캐나다와 같은 정부의 데이터 포탈은 가장 중요한 데이터 레이크 중 하나로 평가되고 있다. 이러한 데이 터 포탈은 운영 환경을 제공하는 오픈 데이터 플랫폼을 통해 구축되며, 대표적으로 오픈소스인 CKAN, DKAN과 상 용 플랫폼인 Socrata, ArcGIS Open Data, Opendatasoft가 있다. 이러한 다섯 가지 플랫폼은 전세계 오픈 데이 터 포탈의 대부분을 차지하고 있으며, 지원하는 기능과 운영 방식에 차이가 있다. 표 1은 대표적인 오픈 데이터 플랫폼을 비교한 것이다. 표를 보면, 운영 방식에 차이가 있지만, 모두 플랫폼에 종속적인 특징이 있다. 또한, 가장 핵심 기능인 데이터 연계를 지원하는 하베스팅은 모두 메타데이터 수준에서만 지원하며, 이 또한, 이종 플 랫폼 간의 상호운용성을 보장하지 못한다. 실제 데이터 수준의 연계는 어떠한 플랫폼도 지원하지 못하며, 이로 인해 대규모 오픈 데이터 활용을 위한 처리 과정이 매우 복잡하다.오픈 데이터는 서로 다른 포탈에서 공개되며, 운영 주체인 중앙 정부, 주, 도시, 기관에 따라 차이가 있다. 한 국가 내에서 운영하는 데이터 포탈이라 하더라도 데이터 공개 주체에 따라 서로 다른 플랫폼으로 운영되고 있으 며, 이로 인해 동종, 이종 플랫폼 간의 상호운용성 보장은 매우 중요하다. 이를 위해서는 서로 다른 포탈 간 데 이터 연계를 지원해야 하며, 데이터 연계를 위한 하베스팅 기능이 필수적이다. 하지만, 표 1에서 알 수 있듯이, 어떠한 오픈 데이터 플랫폼도 실제 데이터의 하베스팅 기능을 지원하지 못하며, 플랫폼 종속성으로 인해 이종 플랫폼 간의 메타데이터 수준의 하베스팅 또한 완벽하지 않다. 표 1"}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "이렇듯, 오픈 데이터 플랫폼의 기능적 한계와 오픈 데이터 포탈의 데이터 관리 방식으로 인해 대규모 데이터 활 용을 제약하는 전처리 복잡성, 플랫폼 종속성, 스케일 제한 문제가 발생한다. 표 2를 보면, 상당히 많은 데이터 가 공개되고 있지만 앞서 언급한 세 가지 문제로 인해 실제 활용도는 매우 낮다. 표 2"}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 실제 데이터 수준의 연계를 위한 하베스팅 기능을 포함하고, 세 단계의 자동화 처리 로직과 독립적인 수집 내지 전처리 기능을 포함하는 전자 장치 내지는 시스템의 제어 방법을 제공한다. 본 개시의 목적들은 이상에서 언급한 목적으로 제한되지 않으며, 언급되지 않은 본 개시의 다른 목적 및 장점들 은 하기의 설명에 의해서 이해될 수 있고, 본 개시의 실시 예에 의해 보다 분명하게 이해될 것이다. 또한, 본 개시의 목적 및 장점들은 특허 청구 범위에 나타낸 수단 및 그 조합에 의해 실현될 수 있음을 쉽게 알 수 있을 것이다."}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 일 실시 예에 따른 전자 장치의 제어 방법은, 상기 전자 장치가, 복수의 외부 데이터 포탈 각각으로 부터 카탈로그를 수신하여 저장하는, 수집 단계, 상기 전자 장치가, 사용자의 도메인에 매칭되는 키워드를 기준 으로 상기 수신된 카탈로그를 파싱하여 데이터를 추출하는, 추출 단계, 상기 전자 장치가, 상기 추출된 데이터 에 포함되는 디스트리뷰션 객체의 URI(Uniform Resource Identifier)에 위치한 데이터를 데이터 레이크에 저장 하는, 저장 단계를 포함한다. 상기 수집 단계는, 상기 복수의 외부 데이터 포탈 각각에 매칭되는 퍼블리셔 정보를 바탕으로, 상기 복수의 외 부 데이터 포탈 각각을 검증하고, 검증이 완료된 외부 데이터 포탈로부터 카탈로그를 수신할 수 있다. 상기 추출 단계는, 각 오픈 데이터 포털의 플랫폼 정보에 매칭되는 처리 로직을 바탕으로 각 오픈 데이터 포털 의 데이터를 추출할 수 있다. 상기 저장 단계는, 상기 복수의 외부 데이터 포탈 각각에 매칭되는 퍼블리셔 정보 및 상기 키워드를 바탕으로 데이터 레이크를 생성하고, 상기 디스트리뷰션 객체의 URI 수만큼 반복하여 실제 데이터를 요청하고, 수신된 실제 데이터를 상기 데이터 레이크에 저장할 수 있다. 상기 전자 장치의 제어 방법은, 상기 전자 장치가, 각 외부 데이터 포탈의 카탈로그에서 키워드를 기반으로 추 출된 데이터셋이 저장되는 dataset 테이블, 데이터셋에 포함된 디스트리뷰션이 저장되는 distribution 테이블, 사용자가 지정한 키워드를 저장하는 keyword 테이블, 데이터셋과 키워드의 관계를 통해 해당 데이터셋이 어떤 도메인에 속하는지 관리하는 dataset_keyword 테이블, 및 오브젝트가 저장된 데이터 레이크에 대한 정보를 관리 하는 datalake 테이블로 구성된, ER-다이어그램을 관리하는 단계를 더 포함할 수 있다. 상기 ER-다이어그램을 관리하는 단계는, 상기 추출 단계에서 사용자에게 입력으로 받은 키워드가 DB에 존재하는 지 확인하고, 없다면 새로운 키워드를 keyword 테이블에 생성하고, 카탈로그에 대한 파싱과 키워드 기반의 전처 리를 통해 데이터셋을 선별하면, 메타데이터와 함께 객체로 매핑하여 dataset 테이블에 저장하고, 데이터셋의 저장이 완료되면, 연관된 키워드를 dataset_keyword 테이블에 저장할 수 있다. 또한, 상기 ER-다이어그램을 관리하는 단계는, 데이터셋에 속한 디스트리뷰션을 메타데이터와 매핑한 후에 distribution 테이블에 저장하고, 상기 저장 단계는 버킷의 존재 여부를 확인하고 없다면 새로운 버킷을 datalake 테이블에 생성하고, URI에 해당하는 실제 데이터를 데이터 레이크에 저장하면, 해당 오브젝트의 url과 일치하는 객체를 distribution 테이블에서 조회하고, 오브젝트가 저장된 데이터 레이크 id와 오브젝트 이름을 추가하여 업데이트할 수 있다."}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시에 따른 프레임워크에 따라 동작하는 전자 장치 내지 시스템은, 여러 오픈 데이터 포탈에서 수집된 데이 터를 효율적으로 관리할 수 있다. 특히, 실질적인 대규모 오픈 데이터 레이크 구축과 관리를 지원하며, 오픈 데 이터의 가치와 활용도를 높인다."}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 개시에 대하여 구체적으로 설명하기에 앞서, 본 명세서 및 도면의 기재 방법에 대하여 설명한다. 먼저, 본 명세서 및 청구범위에서 사용되는 용어는 본 개시의 다양한 실시 예들에서의 기능을 고려하여 일반적 인 용어들을 선택하였다. 하지만, 이러한 용어들은 당해 기술 분야에 종사하는 기술자의 의도나 법률적 또는 기 술적 해석 및 새로운 기술의 출현 등에 따라 달라질 수 있다. 또한, 일부 용어는 출원인이 임의로 선정한 용어 도 있다. 이러한 용어에 대해서는 본 명세서에서 정의된 의미로 해석될 수 있으며, 구체적인 용어 정의가 없으 면 본 명세서의 전반적인 내용 및 당해 기술 분야의 통상적인 기술 상식을 토대로 해석될 수도 있다. 또한, 본 명세서에 첨부된 각 도면에 기재된 동일한 참조번호 또는 부호는 실질적으로 동일한 기능을 수행하는 부품 또는 구성요소를 나타낸다. 설명 및 이해의 편의를 위해서 서로 다른 실시 예들에서도 동일한 참조번호 또 는 부호를 사용하여 설명한다. 즉, 복수의 도면에서 동일한 참조 번호를 가지는 구성요소가 모두 도시되어 있다 고 하더라도, 복수의 도면들이 하나의 실시 예를 의미하는 것은 아니다. 또한, 본 명세서 및 청구범위에서는 구성요소들 간의 구별을 위하여 \"제1\", \"제2\" 등과 같이 서수를 포함하는 용어가 사용될 수 있다. 이러한 서수는 동일 또는 유사한 구성요소들을 서로 구별하기 위하여 사용하는 것이며 이러한 서수 사용으로 인하여 용어의 의미가 한정 해석되어서는 안 된다. 일 예로, 이러한 서수와 결합된 구성 요소는 그 숫자에 의해 사용 순서나 배치 순서 등이 제한되어서는 안 된다. 필요에 따라서는, 각 서수들은 서로 교체되어 사용될 수도 있다. 본 명세서에서 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 출원에서, \"포함하다\" 또는 \"구성되다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이 들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성 요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 본 개시의 실시 예에서 \"모듈\", \"유닛\", \"부(Part)\" 등과 같은 용어는 적어도 하나의 기능이나 동작을 수행하는 구성요소를 지칭하기 위한 용어이며, 이러한 구성요소는 하드웨어 또는 소프트웨어로 구현되거나 하드웨어 및 소프트웨어의 결합으로 구현될 수 있다. 또한, 복수의 \"모듈\", \"유닛\", \"부(Part)\" 등은 각각이 개별적인 특정 한 하드웨어로 구현될 필요가 있는 경우를 제외하고는, 적어도 하나의 모듈이나 칩으로 일체화되어 적어도 하나 의 프로세서로 구현될 수 있다. 또한, 본 개시의 실시 예에서, 어떤 부분이 다른 부분과 연결되어 있다고 할 때, 이는 직접적인 연결뿐 아니라, 다른 매체를 통한 간접적인 연결의 경우도 포함한다. 또한, 어떤 부분이 어떤 구성요소를 포함한다는 의미는, 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것 을 의미한다. 본 개시는 범용적인 오픈 데이터의 카탈로그 수집 및 전처리 기능과 실제 데이터의 수집을 지원하는 자동화 프 레임워크를 토대로 동작하는 전자 장치 내지 시스템을 제공한다. 전처리 복잡성과 스케일 제한 문제를 해결하기 위해, 자동화 확장을 적용한 세 단계의 처리 로직을 구현한다. 또한, 대표적인 데이터 플랫폼들인 CKAN, DKAN, Socarata, ArcGIS Open Data, Opendatasoft 등을 대상으로도 적용 가능한 세부 처리 로직을 구현하여 플랫폼 종속성 문제를 해결하고, 범용적인 카탈로그 수집, 전처리 기능을 수행하는 전자 장치 내지 시스템을 제공한다. 본 개시에 따른 프레임워크는 실제 데이터 수준의 연계를 위한 수집 기능을 구현하고, 이를 데이터 레이크에 저 장하는 기능을 제공한다. 또한, 효율적인 오픈 데이터 레이크 운영을 위한 메타데이터 관리 모듈을 제공한다. 오픈 데이터를 활용하여 대규모 연구 데이터 레이크 구축을 위해서는 필요한 데이터의 탐색, 수집, 전처리, 저 장 등의 처리 과정이 필요하다. 오픈 데이터는 여러 포탈에 분산되어 있으며 메타데이터는 카탈로그를 통해 배 포되고, 실제 데이터는 URI 형태로 웹상에 공개되어 있다. 따라서, 원하는 데이터를 탐색하기 위해서는 카탈로 그를 수집하고 분석하는 작업이 필요하며, 특정 도메인에 해당하는 데이터를 선별하기 위한 분석과 추출 등의 전처리 작업이 요구된다. 또한, 파일 포맷의 오픈 데이터를 실제로 수집하는 기능이 필요하다. 하지만, 현재까 지 실제 데이터 수집을 지원하는 연구는 Kim et al. 외에 없으며, 이 또한 CKAN만을 대상으로 지원하기 때문에 활용에 한계가 있다. 앞서 설명한 바와 같이, 오픈 데이터의 관리 방식과 특징으로 인해 전처리 복잡성, 플랫폼 종속성, 스케일 제한 의 세 가지 문제가 발생한다. 첫째, 전처리 복잡성은 대규모 오픈 데이터를 활용하기 위해서는 카탈로그의 수집 과 복잡한 전처리가 필요하기 때문에 발생한다. 둘째, 플랫폼 종속성은 오픈 데이터를 배포하는 오픈 데이터 포 탈이 운영 환경을 제공하는 플랫폼에 종속적이기 때문에 발생한다. 이로 인해, 메타데이터 수준에서도 이종 플 랫폼 간의 상호운용성도 완전히 보장하지 못하며, 실제 데이터 수준의 연계는 전혀 지원하지 못하고 있다. 셋째, 스케일 제한은 오픈 데이터가 인터넷 스케일 규모의 특징을 갖기 때문에 나타난다. 따라서, 첫째, 플랫폼에 독립적으로 데이터 포탈에서 카탈로그를 수집하고 전처리하는 기능이 필요하다. 둘째, 실제 데이터를 수집하고 이를 데이터 레이크에 저장해야 한다. 셋째, 카탈로그 수집부터 실제 데이터의 저장에 이르는 모든 과정을 자동으로 수행해야 한다. 넷째, 오픈 데이터 레이크 운영을 위해 메타데이터 관리가 가능해 야 한다. 이러한 네 가지 요구사항을 충족하기 위해, 자동화 기능과 메타데이터 관리 기능의 설계가 필요하다. 도 1은 본 개시에 따른 프레임워크의 구조도이다. 도 1을 참조하면, 본 개시에 따른 프레임워크는 ODL Constructor를 중심으로 구성되며, 내부에는 컨트롤러 (controller)와 수집, 전처리 등의 동작을 처리하는 핸들러(handler)로 구성되어 있다. 핸들러에는 데이터 수집 을 담당하는 하베스터(harvester), 카탈로그 파싱을 위한 파서(parser), 데이터 추출 및 복잡한 전처리를 담당 하는 익스트렉터(extractor), 파일 저장을 위한 파일 핸들러, 메타데이터 관리를 담당하는 메타데이터 핸들러, 데이터 레이크에 오브젝트를 저장하는 ODL 푸셔(pusher)로 구성되어 있다. 프레임워크의 왼쪽에는 데이터 소스에 해당하는 오픈 데이터 포탈이 있으며, 아래는 파일을 저장하는 파일 스토리지, 오른쪽에는 메타데이터 저장 을 위한 메타데이터 저장소와 데이터 레이크가 있다. 상술한 ODL Constructor는 본 개시에 따른 전자 장치 상에 하드웨어 및/또는 소프크웨어로 구성된 모듈로서 구 현될 수 있다. 도 2는 본 개시에 따른 프레임워크의 상세 동작 과정을 나타낸다. 크게 수집, 추출, 저장의 세 단계 자동화 로 직을 수행하며, 총 15단계의 세부 동작을 처리한다. 먼저, 하베스터가 카탈로그를 수집하고 컨트롤러는 이를 플랫폼에 독립적으로 수행하도록 관리한다. 카탈로그 수집 결과는 파일 스토리지에 저장된다. 카탈로그 수집이 완료되면, 파서와 익스트렉터가 사용자가 요청한 키워 드를 기반으로 데이터셋과 실제 데이터인 디스트리뷰션(distribution)을 추출하고, 이를 메타데이터와 매핑하여 파일 스토리지와 DB에 각각 저장한다. 마지막으로, 추출한 URI의 실제 데이터를 http 통신으로 요청하고 이를 ODL 푸셔가 받아서 데이터 레이크에 저장한다. 메타데이터 핸들러는 추출과 저장 단계에서 저장이 필요한 메타 데이터를 객체 단위로 생성하여 ORM(Object Relational Mapping)을 통해 DB에 저장한다. 수집 단계(Gathering stage). 가장 먼저 실행되는 수집 단계에서, 본 개시에 따른 전자 장치는 도 2의 ①-④에 해당하는 동작을 수행한다. 전자 장치는 외부의 데이터 포탈에서 카탈로그를 수집하며, 컨트롤러를 통해 각 플 랫폼에 따른 세부 처리 로직을 실행하여 카탈로그를 수집하고 저장한다. 이때, 포탈을 구성하는 플랫폼은 내부 의 매핑 테이블을 통해 자동으로 분류될 수 있다. 도 3은 본 개시의 일 실시 예에 따른 전자 장치가 수행하는 수집 단계의 카탈로그 수집 자동화 알고리즘을 나타 낸다. 도 3을 참조하면, 플랫폼 정보인 퍼블리셔(publisher)를 기준으로 별도의 처리가 이루어짐을 알 수 있다. 카탈로그 수집에 앞서, 전자 장치는 수집하고자 하는 포탈의 플랫폼에 해당하는 퍼블리셔 정보를 확인하고, 포 탈을 검증한다. CKAN을 기준으로 처리 과정을 살펴보면, 먼저 검증이 완료된 포탈의 주소에서 첫 번째 카탈로그 페이지를 받고(라인 3), 실제 카탈로그를 수집한다(라인 5). 수집이 완료된 카탈로그는 RDF 포맷으로 파일 스토 리지에 저장하고(라인 6), 다음 카탈로그 페이지에 대한 주소를 받는다(라인 7). CKAN의 경우, 다음 페이지가 남아 있지 않을 때까지 이러한 과정을 반복하며 포탈의 전체 카탈로그를 수집한다. 추출 단계(Extraction stage). 추출 단계는 카탈로그 분석과 전처리 기능을 담당하며 도 2에서 ⑤-⑪의 동작을 수행한다. 수집 단계가 끝나면 바로 이어서 추출 단계가 수행되며, 수집 단계와 마찬가지로 컨트롤러를 통해 플 랫폼에 따른 별도의 처리 로직을 수행한다. 카탈로그를 파싱하고 구조를 분석하여 데이터를 추출하며 이때, 추 출 기준은 사용자가 구축하려는 도메인을 지칭하는 키워드를 사용한다. 도 4는 본 개시의 일 실시 예에 따른 전자 장치가 수행하는 추출 단계의 카탈로그 전처리 자동화 알고리즘을 나 타낸다. 도 4를 참조하면, 플랫폼에 따라 처리 로직이 달라지는 것을 알 수 있다. CKAN을 기준으로 살펴보면, 먼저 전체 카탈로그 리스트를 받아서 하나씩 분석한다(라인 4). 카탈로그 파싱 결과에서 키워드를 포함하고 있 는 데이터셋 리스트를 추출한다(라인 5). 추출된 리스트의 길이만큼 반복해서 데이터셋과 키워드를 매핑하고 이 를 객체로 생성하여 DB에 저장하며(라인 8-9), 해당 데이터셋에 포함된 디스트리뷰션 정보를 파싱하여 리스트에 저장한다(라인 11-12). 이어서, 카탈로그에서 디스트리뷰 션 리스트에 존재하는 객체와 데이터셋을 매핑하는 처 리 작업을 수행한다(라인 14). 매핑이 완료되면, 디스트리뷰션 객체를 DB에 저장한다(라인 16). 디스트리뷰션의 처리 결과는 다음 단계에서 활용하기 위해 JSON 구조로 파일 스토리지에 저장된다. 저장 단계(Stroring stage). 저장 단계는 도 2에서 ⑫-⑮에 해당하는 동작을 수행한다. 저장 단계에서는 도메인 의 데이터셋 추출 결과에서 각 디스트리뷰션 객체의 URI에 위치한 데이터를 받고, 이를 메타데이터와 함께 데이 터 레이크에 저장한다. 도 5는 본 개시의 일 실시 예에 따른 전자 장치의 저장 단계의 데이터 저장 자동화 알고리즘을 나타낸다. 도 5 를 참조하면, 전자 장치는 버킷이 존재하는 지 확인하고 키워드와 퍼블리셔 정보를 기반으로 데이터 레이크 객 체를 생성한다(라인 3). 다음으로, 파일에 저장된 추출 결과를 받아서 도메인에 대한 각 디스트리뷰션 객체를 받고 요청할 URI를 확인한다(라인 5-6). URI 수만큼 반복해서 http 통신으로 실제 데이터를 요청하고 이를 arrayBuffer에 받는다(라인 9). 받은 데이터를 파일 포맷에 맞게 오브젝트(object)로 변환하여 데이터 레이크에 저장한다(라인 10). 여기서 오브젝트란 데이터 레이크에 저장되는 개별 파일을 의미하며, 오브젝트 이름은 포탈 과 포맷 정보를 포함하고 구분을 위해 번호를 추가한다. 오브젝트 저장이 완료되면, DB에서 URI에 해당하는 객 체를 조회하여 데이터 레이크 정보와 오브젝트 이름을 추가한다(라인 11-12). 모든 URI에 대한 처리가 완료되면 저장 단계가 종료되고, 결과로 도메인 데이터가 저장된 데이터 레이크가 생성된다.한편, 데이터 레이크에서는 개별 데이터가 메타데이터를 통해 관리되지 않기 때문에 잘못하면 무의미하게 데이 터만 저장되는 데이터 늪(data swamp)이 될 수 있다. 따라서, 효율적인 데이터 레이크 운영과 관리를 위해서는 메타데이터 관리 기능이 필수적이다. 관련하여, 본 개시에 따른 전자 장치는, 오픈 데이터 레이크의 관리를 위해 필수적인 정보들만 관리하는 간소화 된 메타데이터 저장 구조를 가진다. 도 6은 본 개시의 일 실시 예에 따른 메타데이터 관리 모듈의 ER-다이어그램(diagram)을 나타낸다. 도 6을 참조 하면, dataset, distribution, keyword, datalake, dataset_keyword 총 다섯 개의 테이블이 존재하는 것을 볼 수 있다. 간단히 정리하면, 포탈의 카탈로그에서 키워드를 기반으로 추출된 데이터셋이 저장되는 dataset 테이 블, 데이터셋에 포함된 디스트리뷰션이 저장되는 distribution 테이블, 사용자가 지정한 키워드를 저장하는 keyword 테이블, 데이터셋과 키워드의 관계를 통해 해당 데이터셋이 어떤 도메인에 속하는지 관리하는 dataset_keyword 테이블, 오브젝트가 저장된 데이터 레이크에 대한 정보를 관리하는 datalake 테이블로 구성되 어 있다. 각 테이블에 데이터가 저장되는 과정을 추출, 저장 단계와 연계하여 순서대로 설명하면 다음과 같다. 추출 단계에서, 전자 장치는 사용자에게 입력으로 받은 키워드가 DB에 존재하는지 확인하고, 없다면 새로운 키워드를 keyword 테이블에 생성한다. 카탈로그 파싱과 키워드 기반의 전처리를 통해 데이터셋을 선별하면, 메타데이 터와 함께 객체로 매핑하여 dataset 테이블에 저장한다. 데이터셋 객체의 저장이 완료되면, 연관된 키워드 를 dataset_keyword 테이블에 저장한다. 이후, 데이터셋에 속한 디스트리뷰션을 메타데이터와 매핑한 후에 distribution 테이블에 저장한다. 저장 단계에서, 전자 장치는 버킷의 존재 여부를 확인하고 없다면 새로운 버킷을 datalake 테이블에 생성한다. URI에 해당하는 실제 데이터를 데이터 레이크에 저장하면, 해당 오브 젝트의 url과 일치하는 객체를 distribution 테이블에서 조회하고, 오브젝트가 저장된 데이터 레이크 id와 오브 젝트 이름을 추가하여 업데이트 한다. 이렇듯 본 개시의 일 실시 예에 따른 오픈 데이터 레이크의 메타데이터 관리 모듈은 간소화된 형태로 필수적인 데이터를 효율적으로 관리하는 것이 목적이다. 일 예로, 전자 장치의 프레임워크는 다섯 가지 플랫폼으로 구성 된 다수의 데이터 포탈에서 카탈로그를 수집하고 키워드 기반의 전처리 과정을 거쳐 추출된 데이터를 저장할 수 있다. 따라서, 메타데이터를 DBMS를 통해 관리함으로써 데이터 레이크에 저장된 오브젝트의 출처와 상태, 데이 터 레이크 구성에 대한 정보를 효율적으로 관리할 수 있다. 이하 내용을 통해서는 오픈 데이터 포탈을 대상으로 본 개시에 따른 자동화 프레임워크의 효과를 확인하기 위한 실험에 대해 개시한다. 본 실험에서, 본 개시의 프레임워크는 Node.js로 구현하였으며, 메타데이터 저장소로 PostgreSQL, 데이터 레이 크로는 AWS S3 SDK와 호환되는 오브젝트 스토리지인 Minio를 온프레미스(on-premise)로 사용한다. DB에 메타데 이터를 저장하기 위한 ORM으로는 Sequelize를 사용한다. 표 3은 수집 단계의 범용성을 평가한 결과이다. 표 3을 보면, 다섯 가지 플랫폼에 해당하는 복수의 포탈에서 정 상적으로 카탈로그를 수집함을 알 수 있으며, 수집된 데이터셋 수를 통해 정상적으로 카탈로그 수집이 이루어짐 을 확인할 수 있다. 표 3"}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "이어서, 추출과 저장 단계의 동작을 평가한다. 실험에는 표 3의 수집된 카탈로그 중 퍼블리셔마다 하나씩 선정 하여 사용한다. CKAN은 미국 데이터 포탈, DKAN은 미국의 보건복지부 데이터 포탈(HHS), Socrata는 뉴욕주의 데이터 포탈, ArcGIS Open Data는 미국 워싱턴 D.C. 도시 데이터 포탈, Opendatasoft는 영국 레스터시티의 데이 터 포탈을 대상으로 평가한다. 미국 데이터 포탈의 경우, 규모가 매우 크기 때문에 최근 수정된 카탈로그를 기 준으로 500개의 데이터셋을 대상으로 실험한다. 분류를 위한 키워드로는 “COVID-19”와 “Health”를 사용하였 으며, 코로나바이러스 관련 의료, 보건 도메인의 데이터 레이크 구축을 목적으로 실험한다. 표 4는 추출 단계에서 키워드 기반의 추출 결과를 DB에 저장한 결과이다. 표 4를 보면, 개별 카탈로그에서 데이 터셋과 디스티리뷰션을 각각 추출하고, 이를 매핑하여 객체 단위로 DB에 저장한 결과를 확인할 수 있다. 이를 통해, 수집 단계 뿐 아니라 추출 단계에서도 자동화 로직과 플랫폼에 따른 개별 처리 로직이 정상적으로 동작함 을 확인할 수 있다. 표 4"}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 3, "content": "도 7은 각 데이터 포탈에서 키워드 기반의 전처리 결과로 추출된 URI를 실제 오브젝트로 저장한 데이터 레이크 의 UI 화면을 나타낸다. 도 7의 왼쪽을 보면, 버킷 생성 규칙에 따라 키워드 기반의 “covid19-health” 버킷이 생성되고 하위에 퍼블리셔 정보를 반영한 폴더가 생성된 것을 알 수 있다. 각 포탈 별로 하나씩 다섯 개의 폴더 가 버킷에 생성되며, 각각은 개별 버킷으로 DB에 저장된다. 실험 결과, 총 1,103개의 오브젝트가 생성되고 15.5GiB 크기의 데이터 레이크가 구축된 결과를 볼 수 있다. 표 4의 결과와 비교할 때, 디스트리뷰션의 총합이 데이터 레이크의 오브젝트 결과와 동일하게 1,103개로, 추출 단계의 결과가 정상적으로 저장 단계에서 처리됨을 알 수 있다. 포탈 별 저장 결과는 도 8의 오른쪽에서 확인할 수 있다. 오른쪽 그림은 개별 폴더에 저장된 오브 젝트를 세 개씩 추출한 것으로 그림을 보면, 최대 1.1GiB 크기의 오브젝트도 정상적으로 생성된 것을 알 수 있 다. 이를 통해, 제안하는 프레임워크가 플랫폼에 독립적으로 실제 데이터의 수집, 저장이 가능하며, 이를 자동 으로 처리함을 보인다. 도 8은 도 7의 오른쪽에 나타난 포탈 별 오브젝트를 DB에서 조회한 결과이다. 도 8의 상단이 distribution 테이 블, 하단이 datalake 테이블을 나타낸다. 도면을 보면, 상단의 distribution 테이블에 name과 datalake_id가 저장된 것을 통해, 저장 단계에서 오브젝트 저장 이후 메타데이터 갱신이 정상적으로 이루어진 것을 볼 수 있다. 또한, datalake 테이블에 정보가 폴더별로 구분되어 개별 포탈에 대한 데이터 레이크가 생성되고, distribution 테이블에 올바르게 저장된 것을 알 수 있다. 실험 결과를 정리하면, 표 3의 결과를 통해, 본 개시에 따른 프레임워크는 카탈로그 수집 단계에서 플랫폼 종속 성과 스케일 제한 문제를 해결하는 것을 알 수 있다. 또한, 표 4의 실험을 통해, 본 개시에 따른 프레임워크는 추출 단계에서도 플랫폼 종속성을 해결하며 자동화 확장을 적용하여 복잡한 전처리 과정을 올바르게 수행됨을 알 수 있다. 도 7과 도 8의 결과를 통해, 본 개시에 따른 프레임워크에서 저장 단계의 실제 데이터 수집 기능과 자동화 로직 또한 정상 동작하며 그 결과로 1K 이상의 오브젝트가 저장되고, 약 16GB 크기의 보건, 의료 도메인의 데이터 레 이크가 구축된 것을 확인할 수 있다. 또한, 본 개시에 따라 제안하는 메타데이터 관리 모듈이 추출한 데이터셋 과 디스티리뷰션의 매핑 정보를 비롯한 소스 URI, 식별자 등 저장이 필요한 정보를 올바르게 저장하고 관리함으 로써 오픈 데이터 레이크의 구축 뿐 아니라 지속적인 관리가 가능하도록 지원함을 확인할 수 있다. 실험을 통해, 본 개시에 따라 제안하는 프레임워크가 자동화 확장을 적용한 세 단계의 자동화 알고리즘과 플랫폼에 따 른 개별 처리 로직을 통해 앞서 도출한 문제점을 모두 해결하고, 메타데이터 관리 모듈의 제공으로 효율적인 오 픈 데이터 레이크 구축 및 관리 지원이 가능함이 확인되었다. 한편, 도 9는 본 개시의 일 실시 예에 따른 전자 장치의 구성을 설명하기 위한 블록도이다. 상술한 다양한 실시 예에 따른 전자 장치의 동작 내지는 프레임워크는 도 9와 같은 적어도 하나의 전자 장치 상에서 운영될 수 있다. 도 9를 참조하면, 전자 장치는 메모리, 통신부, 프로세서를 포함할 수 있다. 전자 장치 는 하나 이상의 컴퓨터로 구현된 서버 내지는 시스템이거나, 데스크탑 PC, 노트북 PC, 스마트폰, 태블릿PC 등 사용자 단말일 수 있다. 메모리는 전자 장치의 구성요소들의 전반적인 동작을 제어하기 위한 운영체제(OS: Operating System) 및 전자 장치의 구성요소와 관련된 적어도 하나의 인스트럭션 또는 데이터를 저장하기 위한 구성이다. 메모리는 ROM, 플래시 메모리 등의 비휘발성 메모리를 포함할 수 있으며, DRAM 등으로 구성된 휘발성 메모 리를 포함할 수 있다. 또한, 메모리는 하드 디스크, SSD(Solid state drive) 등을 포함할 수도 있다. 통신부는 다양한 유무선 통신방식으로 적어도 하나의 외부 장치와 통신을 수행하기 위한 회로, 모듈, 칩 등을 포함할 수 있다. 통신부는 다양한 유무선 통신방식으로 적어도 하나의 외부 장치와 통신을 수행하기 위한 회로, 모듈, 칩 등을 포함할 수 있다. 통신부는 다양한 네트워크를 통해 외부 장치와 연결될 수 있다. 네트워크는 영역 또는 규모에 따라 개인 통신망(PAN; Personal Area Network), 근거리 통신망(LAN; Local Area Network), 광역 통신망(WAN; Wide Area Network) 등일 수 있으며, 네트워크의 개방성에 따라 인트라넷 (Intranet), 엑스트라넷(Extranet), 또는 인터넷(Internet) 등일 수 있다. 통신부는 LTE(long-term evolution), LTE-A(LTE Advance), 5G(5th Generation) 이동통신, CDMA(code division multiple access), WCDMA(wideband CDMA), UMTS(universal mobile telecommunications system), WiBro(Wireless Broadband), GSM(Global System for Mobile Communications), DMA(Time Division Multiple Access), WiFi(Wi-Fi), WiFi Direct, Bluetooth, NFC(near field communication), Zigbee 등 다양한 무선 통 신 방식을 통해 외부 장치들과 연결될 수 있다. 또한, 통신부는 이더넷(Ethernet), 광 네트워크(optical network), USB(Universal Serial Bus), 선더볼트 (ThunderBolt) 등의 유선 통신 방식을 통해 외부 장치들과 연결될 수도 있다. 프로세서는 전자 장치를 전반적으로 제어하기 위한 구성이다. 구체적으로, 프로세서는 메모리 와 연결되는 한편 메모리에 저장된 적어도 하나의 인스트럭션을 실행함으로써 본 개시의 다양한 실시 예들에 따른 동작을 수행할 수 있다. 프로세서는 CPU, AP, DSP(Digital Signal Processor) 등과 같은 범용 프로세서, GPU, VPU(Vision Processing Unit) 등과 같은 그래픽 전용 프로세서 또는 NPU와 같은 인공지능 전용 프로세서 등을 포함할 수 있 다. 인공지능 전용 프로세서는, 특정 인공지능 모델의 훈련 내지는 이용에 특화된 하드웨어 구조로 설계될 수 있다. 예를 들어, 도 1 및 도 2의 ODL Constructor나 ODL Constructor를 구성하는 각종 모듈들(ex. ODL Logic Controller, Harvester, Parser 등) 각각은 소프트웨어 및/또는 하드웨어로 구현된 기능 단위의 블록일 수 있으 며, 각 모듈은 프로세서에 의해 제어될 수 있다. 그 결과, 도 2의 과정들은 프로세서에 의해 수행될 수 있다. 한편, 이상에서 설명된 다양한 실시 예들은 서로 저촉되지 않는 한 복수의 실시 예가 결합되어 구현될 수 있다. 한편, 이상에서 설명된 다양한 실시 예들은 소프트웨어(Software), 하드웨어(Hardware) 또는 이들의 조합된 것 을 이용하여 컴퓨터(Computer) 또는 이와 유사한 장치로 읽을 수 있는 기록 매체 내에서 구현될 수 있다. 하드웨어적인 구현에 의하면, 본 개시에서 설명되는 실시 예들은 ASICs(Application Specific Integrated Circuits), DSPs(Digital Signal Processors), DSPDs(Digital Signal Processing Devices), PLDs(Programmable Logic Devices), FPGAs(Field Programmable Gate Arrays), 프로세서(Processors), 제어기 (Controllers), 마이크로 컨트롤러(Micro-controllers), 마이크로 프로세서(Microprocessors), 기타 기능 수행 을 위한 전기적인 유닛(Unit) 중 적어도 하나를 이용하여 구현될 수 있다. 일부의 경우에 본 명세서에서 설명되는 실시 예들이 프로세서 자체로 구현될 수 있다. 소프트웨어적인 구현에 의하면, 본 명세서에서 설명되는 절차 및 기능과 같은 실시 예들은 별도의 소프트웨어 모듈들로 구현될 수 있다. 상술한 소프트웨어 모듈들 각각은 본 명세서에서 설명되는 하나 이상의 기능 및 작동을 수행할 수 있다. 한편, 상술한 본 개시의 다양한 실시 예들에 따른 각 장치에서의 처리동작을 수행하기 위한 컴퓨터 명령어 (Computer Instructions) 또는 컴퓨터 프로그램은 비일시적 컴퓨터 판독 가능 매체(Non-transitory Computer- readable Medium)에 저장될 수 있다. 이러한 비일시적 컴퓨터 판독 가능 매체에 저장된 컴퓨터 명령어 또는 컴퓨터 프로그램은 전자 장치 또는 시스템 등 특정 기기의 프로세서에 의해 실행되었을 때 상술한 다양한 실시 예 에 따른 전자 장치 또는 시스템의 동작을 상술한 특정 기기가 수행하도록 한다. 비일시적 컴퓨터 판독 가능 매체란 레지스터, 캐쉬, 메모리 등과 같이 짧은 순간 동안 데이터를 저장하는 매체 가 아니라 반영구적으로 데이터를 저장하며, 기기에 의해 판독(Reading)이 가능한 매체를 의미한다. 비일시적 컴퓨터 판독 가능 매체의 구체적인 예로는, CD, DVD, 하드 디스크, 블루레이 디스크, USB, 메모리카드, ROM 등 이 있을 수 있다. 이상에서는 본 개시의 바람직한 실시 예에 대하여 도시하고 설명하였지만, 본 개시는 상술한 특정의 실시 예에"}
{"patent_id": "10-2022-0179957", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "한정되지 아니하며, 청구범위에서 청구하는 본 개시의 요지를 벗어남이 없이 당해 개시에 속하는 기술분야에서 통상의 지식을 가진 자에 의해 다양한 변형실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 개시의 기술 적 사상이나 전망으로부터 개별적으로 이해되어서는 안 될 것이다."}
{"patent_id": "10-2022-0179957", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시 예에 따른 프레임워크 구조도를 도시한 도면, 도 2는 본 개시의 일 실시 예에 따른 자동화 프레임워크의 동작 과정을 설명하기 위한 도면, 도 3은 본 개시의 일 실시 예에 따른 전자 장치의 수집 단계를 설명하기 위한 알고리즘, 도 4는 본 개시의 일 실시 예에 따른 전자 장치의 추출 단계를 설명하기 위한 알고리즘, 도 5는 본 개시의 일 실시 예에 따른 전자 장치의 저장 단계를 설명하기 위한 알고리즘, 도 6은 본 개시의 일 실시 예에 따른 전자 장치가 관리하는 ER-다이어그램의 예시를 도시한 도면, 도 7은 본 개시의 일 실시 예에 따른 전자 장치가 구축한 대규모 오픈 데이터 레이크 구축 결과를 도시한 도면, 도 8은 본 개시의 일 실시 예에 따른 전자 장치가 생성하는 저장 단계의 테이블을 도시한 도면, 그리고 도 9는 본 개시의 일 실시 예에 따른 전자 장치의 구성을 설명하기 위한 블록도이다."}
