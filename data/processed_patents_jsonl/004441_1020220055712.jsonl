{"patent_id": "10-2022-0055712", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0157877", "출원번호": "10-2022-0055712", "발명의 명칭": "NPU에 안전한 실행 환경을 제공하기 위한 장치 및 방법", "출원인": "삼성전자주식회사", "발명자": "허재혁"}}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "CPU(Central Processing Unit) 및 NPU(Neural Processing Unit)를 포함하는 SoC(System on Chip); 및검증 테이블(validation table)이 저장된 EPC(Enclave Page Cache) 및 적어도 하나의 NPU 엔클레이브(enclave)를 포함하는 메모리를 포함하고,상기 NPU 엔클레이브 및 상기 EPC는,상기 CPU의 시스템 소프트웨어가 실행되는 실행 환경(execution environment)과 격리된 신뢰 실행 환경(trustedexecution environment)을 갖는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서,상기 SoC는,상기 검증 테이블에 기초하여, 상기 NPU 엔클레이브에 액세스를 시도하는 프로그램이 상기 NPU 엔클레이브에 액세스 가능한 프로그램인지 여부를 판단하도록 구성된 액세스 컨트롤러를 더 포함하는 전자 장치."}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 2에 있어서,상기 액세스 컨트롤러는,상기 NPU의 IOMMU(Input/Output Memory Management Unit)에서 수행되는 주소 변환(address translation) 과정에서 상기 프로그램의 NPU 엔클레이브 ID와 상기 검증 테이블에 포함된 NPU 엔클레이브 ID가 동일하지 않은 경우, 상기 프로그램의 액세스를 차단하도록 구성된 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "에 있어서,상기 검증 테이블은,데이터가 읽기 전용(read only)인지 여부를 나타내는 읽기 전용 식별 비트를 포함하고,상기 메모리 보호 엔진은,상기 읽기 전용 식별 비트에 기초하여 데이터가 읽기 전용이라고 판단된 경우, 카운터 값을 1로 설정하여 상기카운터 모드 암호화/복호화를 수행하도록 구성된 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 4에 있어서,상기 메모리 보호 엔진은,상기 NPU에서 실행되는 기계 학습(machine learning) 방법에 따라 상이한 그래뉼래러티(granularity)로 상기 카운터 모드 암호화/복호화를 수행하도록 구성되고, 상기 그래뉼래러티는,상기 카운터 모드 암호화/복호화가 수행될 때, 동일한 카운터를 공유하는 데이터 블록의 크기를 나타내는 것을특징으로 하는 전자 장치.공개특허 10-2022-0157877-3-청구항 6"}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 1에 있어서,상기 SoC는,상기 CPU와 상기 NPU를 연결하는 채널 버퍼를 더 포함하는 전자 장치."}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 7에 있어서,상기 CPU는,상기 CPU의 시스템 소프트웨어가 실행되는 실행 환경과 격리된 신뢰 실행 환경을 갖는 영역이며, NPU 드라이버가 실행되도록 구성된 CPU 엔클레이브를 포함하고,상기 NPU 드라이버는,상기 NPU를 사용하고자 하는 어플리케이션(application)에게 상기 채널 버퍼를 사용할 수 있는 권한을 부여하는것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "CPU(Central Processing Unit) 및 NPU(Neural Processing Unit)를 포함하는 SoC(System on Chip)의 동작 방법으로서,상기 CPU에 의해서, 상기 SoC의 외부 메모리에 포함된 적어도 하나의 NPU 엔클레이브(enclave)로부터 상기 SoC에 포함된 내부 메모리로 데이터를 수신하는 단계;상기 NPU에 의해서, 상기 데이터에 기초하여 NPU 연산을 수행하는 단계; 및상기 CPU에 의해서, 상기 NPU 연산의 결과를 상기 외부 메모리로 송신하는 단계를 포함하고,상기 NPU 엔클레이브는,상기 CPU의 시스템 소프트웨어가 실행되는 실행 환경(execution environment)과 격리된 신뢰 실행 환경(trustedexecution environment)을 갖는 것을 특징으로 하는 방법."}
{"patent_id": "10-2022-0055712", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "청구항 9에 있어서,상기 SoC에 포함되는 액세스 컨트롤러에 의해서, 프로그램이 상기 NPU 엔클레이브에 액세스하는 것을 제어하는단계를 더 포함하고,상기 액세스하는 것을 제어하는 단계는,상기 외부 메모리에 포함된 EPC(Enclave Page Cache)에 저장된 검증 테이블(validation table)에 기초하여, 상기 프로그램이 상기 NPU 엔클레이브에 액세스 가능한 프로그램인지 여부를 판단하는 단계를 포함하는 것을 특징으로 하는 방법.공개특허 10-2022-0157877-4-"}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "전자 장치는, 본 개시의 예시적 실시예에 따라, CPU(Central Processing Unit) 및 NPU(Neural Processing Uni t)를 포함하는 SoC(System on Chip) 및 검증 테이블(validation table)이 저장된 EPC(Enclave Page Cache) 및 적어도 하나의 NPU 엔클레이브(enclave)를 포함하는 메모리를 포함하고, NPU 엔클레이브 및 EPC는, CPU의 시스템 소프트웨어가 실행되는 실행 환경(execution environment)과 격리된 신뢰 실행 환경(trusted execution environment)을 가질 수 있다."}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 기술적 사상은 데이터 보안에 관한 것으로서, 구체적으로는 NPU(Neural Processing Unit)가 처리하는 데이터의 보안을 유지하기 위해, NPU에 안전한 실행 환경을 제공하는 장치 및 방법에 관한 것이다."}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근, 인공지능 기술이 발전됨에 따라 NPU의 중요성이 높아지고 있으며, 자율 주행 기술과 같이 다양한 작업들 을 수행하기 위해, CPU(Central Processing Unit) 및 NPU 등의 처리 장치가 실장된 SoC(System on Chip)의 필 요성이 증대되고 있다. NPU가 처리하는 데이터에 대한 외부의 부적절한 공격은, 개인 정보, 기밀 정보 등의 유출을 발생시킬 수 있으며, NPU의 잘못된 연산으로 인해 전자 장치에 심각한 문제가 유발될 수 있다. 즉, 외부의 부적절한 공격으 로부터 데이터를 보호하기 위한 데이터 보안은 매우 중요한 이슈이며, 고도화된(advanced) 공격으로부터 데이터 를 보호하기 위해 소프트웨어 및 하드웨어를 함께 활용함으로써 효율적으로 NPU의 보안을 유지할 수 있는 기술 이 필요하다."}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시의 기술적 사상은, SoC에 포함된 NPU에 대해, 외부의 소프트웨어 공격 또는 하드웨어 공격으로부터 안전 한 실행 환경을 제공하기 위한 장치 및 방법을 제공하는 데에 있다. 본 발명의 기술적 과제들은 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술적 과 제들은 아래의 기재로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기와 같은 목적을 달성하기 위하여, 본 개시의 기술적 사상의 일측면에 따른 전자 장치는, CPU(Central Processing Unit) 및 NPU(Neural Processing Unit)를 포함하는 SoC(System on Chip) 및 검증 테이블 (validation table)이 저장된 EPC(Enclave Page Cache) 및 적어도 하나의 NPU 엔클레이브(enclave)를 포함하는 메모리를 포함하고, NPU 엔클레이브 및 EPC는, CPU의 시스템 소프트웨어가 실행되는 실행 환경(execution environment)과 격리된 신뢰 실행 환경(trusted execution environment)을 가질 수 있다. 본 개시의 기술적 사상의 일측면에 따른 CPU 및 NPU를 포함하는 SoC의 동작 방법은, CPU에 의해서, SoC의 외부 메모리에 포함된 적어도 하나의 NPU 엔클레이브로부터 SoC에 포함된 내부 메모리로 데이터를 수신하는 단계, NPU에 의해서, 데이터에 기초하여 NPU 연산을 수행하는 단계 및 CPU에 의해서, NPU 연산의 결과를 외부 메모리 로 송신하는 단계를 포함하고, NPU 엔클레이브는, CPU의 시스템 소프트웨어가 실행되는 실행 환경과 격리된 신 뢰 실행 환경을 가질 수 있다. 본 개시의 기술적 사상의 일측면에 따른 CPU 및 NPU를 포함하는 SoC의 동작 방법은, SoC에 포함되는 액세스 컨 트롤러에 의해서, 프로그램이 NPU 엔클레이브에 액세스하는 것을 제어하는 단계 및 SoC에 포함되는 메모리 보호 엔진(memory protection engine)에 의해서, 카운터 모드 암호화/복호화(counter mode encryption/decryption) 를 수행하는 단계를 포함하고, NPU 엔클레이브는, NPU가 사용하는 메모리의 영역이고, CPU의 시스템 소프트웨어 가 실행되는 실행 환경과 격리된 신뢰 실행 환경을 가질 수 있다."}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 예시적 실시예에 따른 장치 및 방법에 의하면, NPU로 CPU의 시스템 소프트웨어와 격리된 신뢰 실행 환경이 제공될 수 있다. 또한, 본 개시의 예시적 실시예에 따른 장치 및 방법에 의하면, 데이터의 무결성이 검증됨으로써 보안이 유지될 수 있다.또한, 본 개시의 예시적 실시예에 따른 장치 및 방법에 의하면, NPU에서 수행되는 기계 학습 방법에 기초하여 효율적인 카운터 모드 암호화/복호화가 가능할 수 있다. 또한, 본 개시의 예시적 실시예에 따른 장치 및 방법에 의하면, 읽기 전용 데이터에 대한 카운터 모드 암호화/ 복호화를 최적화할 수 있다. 또한, 본 개시의 예시적 실시예에 따른 장치 및 방법에 의하면, CPU와 NPU가 직접적이고 안전하게 통신 가능하 므로, SoC의 외부의 메모리를 사용할 때보다 효율적으로 데이터를 송수신할 수 있다. 본 개시의 예시적 실시예들에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 아니하며, 언급되지"}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "아니한 다른 효과들은 이하의 기재로부터 본 개시의 예시적 실시예들이 속하는 기술분야에서 통상의 지식을 가 진 자에게 명확하게 도출되고 이해될 수 있다. 즉, 본 개시의 예시적 실시예들을 실시함에 따른 의도하지 아니"}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 3, "content": "한 효과들 역시 본 개시의 예시적 실시예들로부터 당해 기술분야의 통상의 지식을 가진 자에 의해 도출될 수 있 다."}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부한 도면을 참조하여 본 개시의 실시예들에 대해 상세히 설명한다. 도 1은 본 개시의 예시적 실시예에 따른 전자 장치의 예시를 나타내는 블록도이다. 일부 실시예들에서, 전자 장치는, 비제한적인 예시로서 드론(drone), 첨단 운전자 보조 시스템(Advanced Drivers Assistance System; ADAS), 스마트 TV, 스마트 폰, 의료 장치, 모바일 장치, 영상 표시 장치, 계측 장 치, IoT(Internet of Things) 장치 등에 포함될 수 있으며, 이외에도 다양한 종류의 기기들에 포함될 수 있다. 도 1에 도시된 바와 같이, 전자 장치는 SoC(System on Chip) 및 메모리를 포함할 수 있다. SoC와 메모리는 데이터를 서로 주고 받을 수 있다. SoC는 CPU(Central Processing Unit), NPU(Neural Processing Unit), 액세스 컨트롤러(access controller) 및/또는 메모리 보호 엔진(memory protection engine)을 포함할 수 있다. 도 1에는 도 시되어 있지 않으나, SoC는 상술한 구성요소들 이외에도, GPU(Graphics Processing Unit), SoC의 내부 메 모리 등과 같은 다른 범용적인 구성요소들을 더 포함할 수 있다.CPU는 전자 장치에 포함된 구성요소들을 전반적으로 제어할 수 있다. 예를 들면, CPU는 메모리 로부터 데이터를 수신할 수 있다. 다시 말해, CPU는 메모리로부터 SoC의 내부 메모리로 데 이터를 수신하도록 할 수 있다. SoC의 내부 메모리는 NPU에 포함된 스크래치패드 메모리(scratchpad memory)일 수 있으며, NPU와 별개로 SoC 내에 포함된 메모리일 수도 있다. SoC의 내부 메모리 가 스크래치패드 메모리일 경우, 내부 메모리는 SRAM(Static Random Access Memory)일 수 있으며, 다만, 이에 제한되는 것은 아니다. 또한, CPU는, NPU가 메모리로부터 수신된 데이터에 기초하여 NPU 연산 (예를 들면, 곱셈 연산)을 수행하도록 할 수 있다. 또한, CPU는 NPU 연산의 결과를 메모리로 송신할 수 있다. 액세스 컨트롤러는 CPU 또는 NPU에 의해서 실행되는 프로그램들이 메모리로 액세스하는 것 을 제어할 수 있다. 예를 들면, 액세스 컨트롤러는, 프로그램이 메모리에 포함된 특정 영역에 액세스 를 시도하는 경우, 해당 프로그램을 검증하고, 액세스를 차단할 수 있다. 액세스 컨트롤러에 관한 보다 자 세한 내용은 후술하기로 한다. 메모리 보호 엔진은 보안을 위해 암호화 또는 복호화를 수행할 수 있다. 예를 들면, SoC의 외부는 악 의적인 소프트웨어 등에 의한 공격의 대상이될 수 있으므로, SoC의 외부로 SoC의 내부 데이터가 전송 되는 경우, 메모리 보호 엔진은 내부 데이터를 암호화할 수 있다. 또한, 메모리 보호 엔진은 외부로 부터 데이터를 수신하는 경우, 외부의 암호화된 데이터를 복호화할 수 있다. 메모리 보호 엔진에 관한 보 다 자세한 내용은 후술하기로 한다. 메모리는 SoC의 외부에 있는 메모리일 수 있다. 예를 들면, 메모리는 DRAM(Dynamic Random Access Memory)일 수 있으며, 다만, 이에 제한되는 것은 아니다. 또한, CPU 및 NPU는 메모리를 공유하여 사용할 수 있다. SoC의 외부는 악의적인 공격들로부터 보안상 안전하지 않을 수 있으며, 따라서, 메모리는 보안에 취 약할 수 있다. 예를 들면, 메모리에 저장되며 사용자 애플리케이션이 사용하는 페이지 테이블(page tabl e)에 대한 악의적인 운영체제의 접근으로 인하여, 메모리는 보안상 취약할 수 있다. 또한, 메모리와 SoC 사이의 통신 통로는 도청될 수 있으며, 콜드 부트 어택(cold boot attack)과 같은 하드웨어적 외부 공 격으로 인해 메모리는 보안에 취약할 수 있다. 따라서, 메모리에 저장된 데이터를 처리하는 NPU(12 0)는 안전한 실행 환경(execution environment)을 갖지 못할 수 있다. 따라서, 메모리에 안전한 실행 환경 을 갖는 메모리 영역이 존재할 필요가 있다. 일부 실시예들에서, 메모리는 NPU 엔클레이브(enclave)를 포 함함으로써, NPU에 안전한 실행 환경을 제공할 수 있다. 메모리 및 NPU 엔클레이브에 관한 보다 자세 한 내용은 후술하기로 한다. 도 2는 본 개시의 예시적 실시예에 따른 메모리의 예시를 나타내는 도면이다. 이하에서, 도 2는 도 1을 참조하 여 설명될 것이다. 도 2에 도시된 바와 같이, 메모리는 EPC(Enclave Page Cache) 및/또는 NPU 엔클레이브152)를 포함할 수 있다. EPC 및 NPU 엔클레이브는 메모리에 포함된 영역들일 수 있다. 구체적으로, NPU 엔클레 이브는, 메모리에 포함된 메모리 영역들 중에서 NPU가 액세스할 수 있는 메모리 영역들일 수 있 다. 도 2에는 NPU 엔클레이브가 2개의 영역으로 표현되어 있으나, 이에 제한되는 것은 아니며, 메모리 에는 적어도 하나의 NPU 엔클레이브가 포함될 수 있다. EPC 및 NPU 엔클레이브는 CPU의 시스템 소프트웨어가 실행되는 실행 환경과 격리된 신뢰 실행 환경(Trusted Execution Environment, TEE)을 가질 수 있다. EPC 및 NPU 엔클레이브는 CPU의 시스템 소프트웨어로부터 독립된 실행 환경을 가지므로, 시스템 소프트웨어를 신뢰할 수 없더라도 안전한 실행 환경을 가질 수 있다. 신뢰 실행 환경은, 액세스 제어(access control)에 의해 제공될 수 있으며, 액세스 제어 는 액세스 컨트롤러에 의해 수행될 수 있다. 액세스 제어는, 메모리로 액세스를 시도하는 프로그램이 액세스 가능한 프로그램이 아닌 경우 해당 액세스를 차단하도록 하는 동작을 지칭할 수 있다. 신뢰 실행 환경은, 액세스 컨트롤러 이외의 별도의 하드웨어에 의해 제공될 수도 있다. 예를 들면, EPC는 CPU에 의해 안전이 보장되는 실행 환경을 갖는 메모리 영역일 수 있다. 도 3은 본 개시의 예시적 실시예에 따른 검증 테이블(validation table)의 예시를 나타내는 도면이다. 이하에서, 도 3은 도 1 및 도 2를 참조하여 설명될 것이다.도 3을 참조하면, 일부 실시예들에서, 검증 테이블은 물리 주소, 가상 주소, 읽기 전용 데이터인지 여부, 데이 터 크기 등에 관한 정보가 포함된 테이블일 수 있다. 도 3에 도시된 검증 테이블은 예시일 뿐이며, 검증 테이블 은 도 3에 나타나지 않은 다양한 정보들을 더 포함할 수 있다. 검증 테이블은 EPC에 저장될 수 있다. 검증 테이블은 EPC에 저장됨으로써, 신뢰할 수 없는 시스템 소 프트웨어 등의 공격으로부터 안전할 수 있다. 액세스 컨트롤러는 검증 테이블에 기초하여, 액세스 제어를 수행할 수 있다. 다시 말해, 액세스 컨트롤러 는 검증 테이블에 기초하여, NPU 엔클레이브에 액세스를 시도하는 프로그램이 NPU 엔클레이브에 액세 스 가능한 프로그램인지 여부를 판단할 수 있다. 검증 테이블에는 NPU 엔클레이브로 접근 가능한 프로그램 의 NPU 엔클레이브 ID에 관한 정보가 포함될 수 있다. 액세스 컨트롤러는, NPU의 IOMMU(Input/Output Memory Management Unit)에서 수행되는 주소 변환(address translation) 과정에서, NPU 엔클레이브에 액 세스를 시도하는 프로그램의 NPU 엔클레이브 ID와 검증 테이블에 포함된 NPU 엔클레이브 ID가 동일하지 않은 경 우, 해당 프로그램의 액세스를 차단할 수 있다. 주소 변환 과정은, 변환 색인 버퍼(Translation Look a side Buffer)에서 미스(miss)가 발생했을 때, 가상 주소를 물리 주소로 바꾸는 과정일 수 있다. 액세스 컨트롤러가 권한 없는 프로그램이 NPU 엔클레이브로 액세스하는 것을 차단함으로써, NPU(12 0)에는 신뢰 실행 환경이 제공될 수 있다. 권한 없는 프로그램에는, CPU의 신뢰할 수 없는 시스템 소프트 웨어도 포함될 수 있으며, 따라서, NPU 엔클레이브에는 시스템 소프트웨어에의 액세스도 제어될 수 있다. 도 4는 본 개시의 예시적 실시예에 따른 메모리 보호 엔진(memory protection engine)의 예시를 나타내는 도면 이다. 이하에서, 도 4는 도 1 및 도 2를 참조하여 설명될 것이다. 도 4를 참조하면, 메모리 보호 엔진은 그래뉼래러티(granularity) 테이블, 루트 및/또는 카운터 캐시를 포함할 수 있다. 메모리 보호 엔진은 보안을 위해 암호화 또는 복호화를 수행할 수 있다. 예를 들면, 메모리 보호 엔진 은 카운터 모드 암호화/복호화(counter mode encryption/decryption)를 수행할 수 있다. 구체적으로, 메 모리 보호 엔진은 그래뉼래러티 테이블에 기초하여 효율적으로 카운터 모드 암호화/복호화를 수행할 수 있다. 그래뉼래러티는, 카운터 모드 암호화/복호화가 수행될 때, 동일한 카운터를 공유하는 데이터 블록의 크기를 지칭할 수 있다. 또한, 그래뉼래러티 테이블은 상술한 그래뉼래러티에 관한 정보를 포함한 테이블 일 수 있다. 또한, 메모리 보호 엔진은 카운터 모드 암호화/복호화를 수행하기 위해, 카운터 캐시와 카운터를 이용할 수 있다. 보다 자세한 카운터 모드 암호화/복호화와 관련된 내용은 후술하기로 한다. 메모리 보호 엔진은 메모리로부터 독출된 데이터의 무결성(integrity) 검증을 수행함으로써, SoC의 보안을 유지할 수 있다. 예를 들면, 메모리 보호 엔진은 MAC(Message Authentication Code)을 사용함으로써 데이터의 무결성 검증을 수행할 수 있다. 데이터의 무결성 검증은, 데이터의 손상, 변조 등을 검 증하는 것일 수 있다. 메모리 보호 엔진은 무결성 트리(tree)를 구성함으로써, 재전송 공격(replay attack)을 방지하고, SoC의 보안 수준을 높일 수 있다. 메모리 보호 엔진은 무결성 트리를 구성함에 있어서, 루트를 사용할 수 있다. 트리를 구성하는 것과 관련된 보다 자세한 내용은 후술하기로 한다. 도 5는 본 개시의 예시적 실시예에 따른 카운터 모드 암호화 방법의 예시를 나타내는 도면이다. 이하에서, 도 5 는 도 1 내지 도 4를 참조하여 설명될 것이다. 카운터 모드 암호화는 1씩 증가하는 카운터 값을 암호화하여 키 스트림을 생성하는 암호화 방법일 수 있다. 카 운터 모드 암호화에서는 캐시라인 단위마다 카운터가 할당되며, 카운터 값은 캐시 라인의 데이터가 변경될 때마 다 증가될 수 있다. 도 5를 참조하면, OTP(One-Time-Pad)는 블록 사이퍼(block cipher)를 통해, 시크릿 키(secret key), 블록 주소 (block addr) 및 카운터(counter) 값에 기초하여 생성될 수 있다. 카운터 모드 암호화는, 생성된 OTP와 데이터 에 XOR 연산을 함으로써, 수행될 수 있다. 도 5에 도시된 LLC는 Last-Level Cache를 지칭한다. 메모리에는 읽기 전용(read only) 데이터가 저장되어 있을 수 있다. 예를 들면, 기계 학습의 추론 (inference) 작업을 위해, 메모리의 많은 영역에 가중치(weight) 데이터들이 읽기 전용 데이터로 저장되어 있을 수 있다. 카운터 모드 암호화/복호화 방법에서, 읽기 전용 데이터에 대한 카운터 값은 증가하지 않고 1로 유지될 수 있다. 따라서, 암호화/복호화하고자 하는 데이터가 읽기 전용 데이터인 경우, 카운터 캐시와 카운터에 대한 액세스 없이, 1 값을 사용하여 암호화/복호화가 수행될 수 있다. 따라서, 카운터 캐시의 효율 성을 높일 수 있으므로, 효율적으로 메모리를 보호할 수 있다. 검증 테이블은 데이터가 읽기 전용인지 여부를 나타내는 읽기 전용 식별 비트를 포함할 수 있다. 메모리 보호 엔진은 읽기 전용 식별 비트에 기초하여 데이터가 읽기 전용이라고 판단된 경우, 카운터 값을 1로 설정하 여 카운터 모드 암호화/복호화를 수행할 수 있다. 도 3을 참조하면, 읽기 전용 데이터의 경우, 읽기 전용 식별 비트 값이 1일 수 있으며, 다만, 이에 제한되는 것은 아니다. 도 6은 본 개시의 예시적 실시예에 따른 선택적 무결성 트리(selective integrity tree)의 예시를 나타내는 도 면이다. 이하에서, 도 6은 도 1 및 도 2를 참조하여 설명될 것이다. 도 6을 참조하면, 메모리 보호 엔진은 무결성 검증을 위해 트리를 구성할 수 있다. 예를 들면, 메모리 보 호 엔진은 메모리 블록에 대한 해시 값(hash value)으로 머클 트리(Merkle tree)를 구성함으로써, 데이터 의 무결성을 검증할 수 있다. 메모리 영역들 중 많은 영역에 대한 트리를 구성할수록 트리의 높이(tree height)는 증가하며, 트리에 관한 연 산은 비효율적일 수 있다. 따라서, NPU의 성능 향상을 위해, 트리의 높이를 줄이는 것이 필요할 수 있다. 메모리 전체에 대한 보호를 위해 메모리 전체에 대한 트리를 구성하는 것은, 메모리의 일부만 사용하는 NPU에게 비효율적이며, 전자 장치의 성능 하락을 유발할 수 있다. 따라서, 메모리 보호 엔진 은, 메모리의 영역들 중 일부에 대해 트리를 구성할 수 있다. 구체적으로, 메모리 보호 엔진은, 메모리에 포함된 적어도 하나의 NPU 엔클레이브에 대한 트리를 구성함으로써 데이터의 무결성을 검증 할 수 있다. 메모리 전체에 대해 구성된 트리는 풀 무결성 트리(full integrity tree)라고 지칭될 수 있으며, NPU 엔클레이브에 대해 구성된 트리는 선택적 무결성 트리(selective integrity tree)라고 지칭될 수 있다. 도 6에 도시된 바와 같이, 메모리 전체에 대한 풀 무결성 트리의 높이는, 메모리의 일부 영역 인 NPU 엔클레이브에 대한 선택적 무결성 트리의 높이보다 높다. 따라서, 메모리 보호 엔진은 트리 높이가 낮은 선택적 무결성 트리를 구성함으로써, NPU의 성능 하락을 줄일 수 있다. 또한, 메모리 보호 엔진 에 포함된 루트는 선택적 무결성 트리의 최상단 노드인 루트 노드에 포인팅할 수 있다. 도 7은 본 개시의 예시적 실시예에 따른 메모리의 카운터 모드 암호화 방법의 예시를 나타내는 도면이다. 이하 에서, 도 7은 도 1, 도 2 및 도 4를 참조하여 설명될 것이다. 앞서 설명한 바와 같이, 그래뉼래러티는, 카운터 모드 암호화/복호화가 수행될 때, 동일한 카운터를 공유하는 데이터 블록의 크기를 지칭할 수 있다. 도 7에는 그래뉼래러티가 512B일 때, 카운터 모드 암호화가 수행되는 과정이 일 예로 도시되어 있다. 하나의 카 운터(Ctr)를 512B의 데이터 블록이 공유하고, 512B의 데이터 블록은 64B마다 OTP와 연산될 수 있으며, 다만, 이 에 제한되는 것은 아니다. OTP는 카운터 값, 키 또는 블록 주소(0x100 등)에 기초하여 AES(Advanced Encryption Standard) 방식에 의해 생성될 수 있다. 큰 그래뉼래러티(예를 들면, 512B)가 지원되어, 큰 그래뉼래러티로 카운터 모드 암호화/복호화를 수행하는 경우, 메모리 보호 엔진에 포함된 카운터 캐시를 효율적으로 활용할 수 있다. 다만, 큰 그래뉼래러티 로 카운터 모드 암호화/복호화를 수행할 때, 불규칙적인 메모리 액세스가 발생하는 경우, 카운터 오버플로우 (overflow)로 인한 성능 하락이 발생될 수 있다. 효율적으로 카운터 모드 암호화/복호화가 수행될 수 있는 그래 뉼래러티는, NPU에서 실행되는 기계 학습(machine learning) 방법에 따라 상이할 수 있다. 따라서, 메모리 보호 엔진은, NPU에서 실행되는 기계 학습 방법에 따라 상이한 그래뉼래러티로 카운터 모드 암호화/ 복호화를 수행할 수 있다. 예를 들면, 메모리 보호 엔진은, NPU에서 실행되는 기계 학습 방법에 따라 적응적으로, 64B, 128B, 256B 또는 512B의 그래뉼래러티로 카운터 모드 암호화/복호화를 수행할 수 있으며, 다 만, 이에 제한되는 것은 아니다. NPU에서 실행되는 기계 학습 방법에 따른 최적의 그래뉼래러티에 관한 정 보는, 그래뉼래러티 테이블에 포함될 수 있다. 도 8은 본 개시의 예시적 실시예에 따른 채널 버퍼(channel buffer)의 예시를 나타내는 도면이다. 이하에서, 도 8은 도 1 및 도 2를 참조하여 설명될 것이다. 도 8에 도시된 바와 같이, SoC는, CPU와 NPU를 연결하는 채널 버퍼(channel buffer)를 포 함할 수 있다. SoC 내에서 채널 버퍼에 통해, CPU와 NPU 사이의 데이터 전송(A)이 수행될 수 있으므로, 데이터 전송(A)할 때는 SoC의 외부에 있는 메모리가 사용되지 않을 수 있다. 따라서, 메모리을 사용하여 CPU와 NPU 사이의 데이터 전송할 때 수행되는 암호화/복호화 과정(B)이 생략될 수 있고, 메 모리 보호 엔진을 사용하는 과정 또한 생략될 수 있으므로, 메모리 보호에 따른 추가적 성능 저하 없이, 데이터 전송이 수행될 수 있다. 또한, CPU는, CPU의 시스템 소프트웨어가 실행되는 실행 환경과 격리된 신뢰 실행 환경을 갖는 영역 이면서 NPU 드라이버(driver)가 실행될 수 있는 CPU 엔클레이브를 포함할 수 있다. NPU 드라이버는 NPU를 사용하고자 하는 어플리케이션(application)에게 채널 버퍼을 사용할 수 있는 권한을 부여할 수 있다. 예를 들어, NPU 드라이버는 CPU 내에 포함되고 신뢰 실행 환경을 갖는 영역인 어플리케이션 엔클레이 브(APP enclave)에서 실행될 수 있는 어플리케이션에게 채널 버퍼의 사용 권한을 줄 수 있다. NPU 드 라이버는 CPU의 안전한 영역인 CPU 엔클레이브에서 실행될 수 있으므로, 악의적인 시스템 소프트웨어 로부터 안전하며, 따라서, 악의적인 시스템 소프트웨어가 채널 버퍼를 공격하는 것을 방지할 수 있다. 그 러므로, CPU에서 암호화되지 않은 플레인 텍스트(plain text)가 채널 버퍼를 통해 NPU에 포함된 스크래치패드 메모리로 안전하게 전송될 수 있다. 도 9는 본 개시의 예시적 실시예에 따른 NPU에 안전한 실행 환경을 제공하기 위한 방법의 예시를 나타내는 도면 이다. 이하에서, 도 9는 도 1, 도 2 및 도 8을 참조하여 설명될 것이다. 단계 S910에서, CPU는 SoC의 외부에 있는 메모리에 포함된 적어도 하나의 NPU 엔클레이브(15 2)로부터 SoC에 포함된 내부 메모리로 데이터를 수신할 수 있다. NPU 엔클레이브는, CPU의 시스 템 소프트웨어가 실행되는 실행 환경과 격리된 신뢰 실행 환경을 가질 수 있다. SoC에 포함되는 메모리 보 호 엔진은, 외부의 메모리에서 내부 메모리로 전송되는 데이터에 대하여, 카운터 모드 복호화를 수행 할 수 있다. 또한, 메모리 보호 엔진은, 외부의 메모리에 포함된 영역들 중 적어도 하나의 NPU 엔클 레이브에 대한 트리를 구성함으로써, 데이터의 무결성을 검증할 수 있다. 또한, 메모리 보호 엔진은, 데이터가 읽기 전용이라고 판단된 경우, 카운터 값을 1로 설정하여 카운터 모드 복호화를 수행할 수 있다. 또한, 메모리 보호 엔진은, NPU에서 실행되는 기계 학습 방버에 따라 상이한 그래뉼래러티로 카운터 모드 복호화를 수행할 수 있다. 그래뉼래러티는, 카운터 모드 암호화/복호화가 수행될 때, 동일한 카운터를 공 유하는 데이터 블록의 크기를 나타낼 수 있다. 단계 S920에서, NPU는 내부 메모리로 수신된 데이터에 기초하여 NPU 연산을 수행할 수 있다. 단계 S930에서, CPU는 NPU 연산의 결과를 SoC 외부의 메모리로 송신할 수 있다. 외부의 메모리 로 CPU 또는 NPU에 의해 실행될 수 있는 다양한 프로그램들이 액세스를 시도할 수 있다. 액세스 컨트롤러는, 프로그램이 NPU 엔클레이브에 액세스 하는 것을 제어할 수 있다. 또한, 액세스 컨트롤러(13 0)는 외부의 메모리에 포함된 EPC에 저장된 검증 테이블에 기초하여, 프로그램이 NPU 엔클레이브 에 액세스 가능한 프로그램인지 여부를 판단할 수 있다. 또한, NPU의 IOMMU(Input/Output Memory Management Unit)에서 수행되는 주소 변환(address translation) 과정에서 프로그램의 NPU 엔클레이브 ID와 검 증 테이블에 포함된 NPU 엔클레이브 ID가 동일하지 않은 경우, 프로그램의 액세스를 차단할 수 있다. 메모리 보호 엔진은, NPU 연산의 결과에 대하여, 카운터 모드 암호화를 수행할 수 있다. 또한, 메모리 보 호 엔진은, NPU에서 실행되는 기계 학습 방법에 따라 상이한 그래뉼래러티로 카운터 모드 암호화를 수행할 수 있다. SoC는 CPU와 NPU를 연결하는 채널 버퍼을 포함할 수 있다. 또한, CPU 및 NPU는, 채널 버퍼를 통하여 통신할 수 있다. CPU는, CPU의 시스템 소프트웨어가 실행되는 실행 환경과 격리된 신뢰 실행 환경을 갖는 영역이며 NPU 드라이버가 실행될 수 있는 CPU 엔클레이브를 포함할 수 있다. 또한, CPU는 NPU 드라이버를 실행 함으로써, NPU를 사용하고자 하는 어플리케이션에게 채널 버퍼를 사용할 수 있는 권한을 부여할 수 있다. 도 10은 본 개시의 예시적 실시예에 따른 NPU에 안전한 실행 환경을 제공하기 위한 방법의 예시를 나타내는 도 면이다. 이하에서, 도 10은 도 1, 도 2 및 도 8을 참조하여 설명될 것이다. 단계 S1010에서, SoC에 포함되는 액세스 컨트롤러는, 프로그램이 NPU 엔클레이브에 액세스하는 것을 제어할 수 있다. 또한, 액세스 컨트롤러는 메모리에 포함된 EPC에 저장된 검증 테이블에 기초하여, 프로그램이 NPU 엔클레이브에 액세스 가능한 프로그램인지 여부를 판단할 수 있다. 단계 S1020에서, SoC에 포함되는 메모리 보호 엔진은, 카운터 모드 암호화/복호화를 수행할 수 있다. 또한, 메모리 보호 엔진은, 메모리에 포함된 영역들 중 NPU 엔클레이브에 대한 트리를 구성함으 로써 데이터의 무결성을 검증할 수 있다. 도 11은 본 개시의 예시적 실시예에 따른 시스템의 예시를 나타내는 도면이다. 도 11을 참조하면, 시스템은 엣지 디바이스, 클라우드 및/또는 센서들을 포함할 수 있다. 엣지 디바이스는 SoC 및 공유된 메모리을 포함할 수 있으며, SoC은 도 1의 SoC 과 대응될 수 있고, 공유된 메모리는 도 1의 메모리과 대응될 수 있다. SoC은 CPU 및 NPU을 포함할 수 있으며, CPU 및 NPU는 공유된 메모리을 공유하여 사용할 수 있다. 엣지 디바이스는 센서들으로부터 데이터들을 수신하여 처리할 수 있다. 데이터들을 처리하는 과정 에서 NPU를 활용한 기계 학습 방법이 사용될 수 있다. 또한, 엣지 디바이스는 처리된 데이터들을 클라우드에 저장할 수 있다. 엣지 디바이스가 센서들로부터 데이터들을 수신하여 처리하고, 클라우드로 처리된 데이터를 송신하는 등의 과정을 거칠 때, 송수신되는 데이터들은 안전하게 보호될 수 있다. 다시 말해, 도 1 내지 도 10을 참조하여 상술한 실시예들을 활용한 엣지 디바이스를 통해, 시스템 에서 송수신 되는 데이터들의 보안이 유지될 수 있다. 도 12는 본 개시의 예시적 실시예에 따른 전자 장치의 예시를 나타내는 도면이다. 도 1 내지 도 11에서는 하나의 SoC가 동작하는 케이스에 대하여 설명하였으나, 도 12를 참조하면 일부 실시예들 에서는, 복수의 개별적 SoC들(1201 내지 1203)이 전자 장치에 포함될 수 있다. 복수의 개별적 SoC들(1201 내지 1203)은 메모리을 공유할 수 있다. 도 12에는 일 실시예로 공유된 메모리를 DRAM으로 표시하 으며, 이에 제한되는 것은 아니다. 복수의 개별적 SoC들(1201 내지 1203)은 서로 대응되는 구조를 가질 수 있으 며, 일부 상이한 구조를 가질 수도 있다. 대표적으로 SoC에 대해 설명하면, SoC는 CPU 및 적 어도 하나의 NPU를 포함할 수 있다. 또한, SoC는 필요에 따라 GPU를 더 포함할 수 있다. 또한, NPU는 필요에 따라 하나의 칩 내에서 복수 개로 존재할 수 있다. 전자 장치 도 1내지 도 11에서 설명 한 실시예들을 활용하여 동작될 수 있으며, 따라서, 보안이 유지될 수 있다. 이상에서와 같이 도면과 명세서에서 예시적인 실시예들이 개시되었다. 본 명세서에서 특정한 용어를 사용하여 실시예들을 설명되었으나, 이는 단지 본 개시의 기술적 사상을 설명하기 위한 목적에서 사용된 것이지 의미 한"}
{"patent_id": "10-2022-0055712", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "정이나 특허청구범위에 기재된 본 개시의 범위를 제한하기 위하여 사용된 것은 아니다. 그러므로 본 기술분야의 통상의 지식을 가진 자라면 이로부터 다양한 변형 및 균등한 타 실시예가 가능하다는 점을 이해할 것이다. 따라 서, 본 개시의 진정한 기술적 보호범위는 첨부된 특허청구범위의 기술적 사상에 의해 정해져야 할 것이다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10 도면11 도면12"}
{"patent_id": "10-2022-0055712", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 예시적 실시예에 따른 전자 장치의 예시를 나타내는 블록도이다. 도 2는 본 개시의 예시적 실시예에 따른 메모리의 예시를 나타내는 도면이다. 도 3은 본 개시의 예시적 실시예에 따른 검증 테이블(validation table)의 예시를 나타내는 도면이다. 도 4는 본 개시의 예시적 실시예에 따른 메모리 보호 엔진(memory protection engine)의 예시를 나타내는 도면 이다. 도 5는 본 개시의 예시적 실시예에 따른 카운터 모드 암호화 방법의 예시를 나타내는 도면이다. 도 6은 본 개시의 예시적 실시예에 따른 선택적 무결성 트리(selective integrity tree)의 예시를 나타내는 도 면이다. 도 7은 본 개시의 예시적 실시예에 따른 메모리의 카운터 모드 암호화 방법의 예시를 나타내는 도면이다. 도 8은 본 개시의 예시적 실시예에 따른 채널 버퍼(channel buffer)의 예시를 나타내는 도면이다. 도 9는 본 개시의 예시적 실시예에 따른 NPU에 안전한 실행 환경을 제공하기 위한 방법의 예시를 나타내는 도면 이다. 도 10은 본 개시의 예시적 실시예에 따른 NPU에 안전한 실행 환경을 제공하기 위한 방법의 예시를 나타내는 도 면이다. 도 11은 본 개시의 예시적 실시예에 따른 시스템의 예시를 나타내는 도면이다. 도 12는 본 개시의 예시적 실시예에 따른 전자 장치의 예시를 나타내는 도면이다."}
