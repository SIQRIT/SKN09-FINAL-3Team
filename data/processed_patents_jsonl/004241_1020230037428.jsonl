{"patent_id": "10-2023-0037428", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0142859", "출원번호": "10-2023-0037428", "발명의 명칭": "뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법 및 시스템", "출원인": "리벨리온 주식회사", "발명자": "강민후"}}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "적어도 하나의 프로세서에 의해 수행되는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법에 있어서,할당된 청크(allocated chunk), 캐시 청크(cached chunk) 또는 프리 청크(free chunk) 중 하나로 분류되는 복수의 청크를 포함하는 온 칩 메모리 영역 중 메모리 사용이 완료된, 할당된 청크의 할당을 해제하고 캐시 청크로 전환하는 단계;특정 데이터에 대한 온 칩 메모리 할당 요청을 수신하는 단계;상기 특정 데이터의 크기와 하나 이상의 캐시 청크의 크기 사이의 비교에 기초하여, 상기 하나 이상의 캐시 청크 중 상기 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부를 판단하는 단계; 및상기 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부에 대한 판단 결과에 따라, 상기 특정 데이터를 상기 하나 이상의 캐시 청크 중 특정 캐시 청크에 할당하거나, 또는 상기 특정 데이터를 상기 프리 청크중 적어도 일부에 할당하는 단계를 포함하는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 판단하는 단계는,상기 하나 이상의 캐시 청크 중 상기 특정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를판단하는 단계를 포함하고,상기 할당하는 단계는,상기 하나 이상의 캐시 청크 중 특정 캐시 청크의 크기가 상기 특정 데이터의 크기와 동일하다고 판단되는경우, 상기 특정 데이터를 상기 특정 캐시 청크에 할당하는 단계; 또는상기 특정 데이터의 크기와 일치하는 캐시 청크가 존재하지 않는다고 판단되는 경우, 상기 특정 데이터를 상기프리 청크 중 적어도 일부에 할당하는 단계를 포함하는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 판단하는 단계는,상기 하나 이상의 캐시 청크 중 상기 특정 데이터의 크기가 상기 하나 이상의 캐시 청크의 각각과 연관된 미리정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단하는 단계를 포함하고,상기 할당하는 단계는,상기 특정 데이터의 크기가 특정 캐시 청크와 연관된 미리 정의된 범위를 만족한다고 판단되는 경우, 상기 특정공개특허 10-2024-0142859-3-데이터를 상기 특정 캐시 청크에 할당하는 단계; 또는상기 특정 데이터의 크기가 상기 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하지 않는다고 판단되는 경우, 상기 특정 데이터를 상기 프리 청크 중 적어도 일부에 할당하는 단계를 포함하는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 상한은, 상기 하나 이상의 캐시 청크의 각각의 크기이고,상기 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 하한은, 상기 하나 이상의 캐시 청크의 각각의 크기의 미리 정의된 비율이고,상기 미리 정의된 비율은 0보다 크고 1보다 작은 실수인, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 미리 정의된 비율은, 상기 온 칩 메모리에 입력 또는 출력되는 데이터의 메모리 포맷과, 상기 적어도 하나의 프로세서에 의해 실행 또는 컴파일되는 인공지능 응용 프로그램의 데이터 레이아웃에 기초하여 결정되는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 하나 이상의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가 제1 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환하는 단계를 더 포함하는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 할당하는 단계는,상기 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않고 상기 특정 데이터에 대해 할당 가능한 프리청크도 존재하지 않는 경우, 캐시 청크 중 적어도 일부를 프리 청크로 전환하는 단계를 포함하는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 하나 이상의 캐시 청크는 제1 유형의 캐시 청크 또는 제2 유형의 캐시 청크 중 하나로 분류되고,상기 제1 유형의 캐시 청크는, 할당 대상 데이터의 크기가 해당 캐시 청크의 데이터의 크기와 동일한 경우, 상기 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크이고,공개특허 10-2024-0142859-4-상기 제2 유형의 캐시 청크는, 할당 대상 데이터의 크기가 해당 캐시 청크와 연관된 미리 정의된 범위를 만족하는 경우, 상기 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크인, 뉴럴 프로세싱 유닛의 온칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 방법은, 상기 적어도 하나의 프로세서가 인공지능 응용 프로그램을 실행 또는 컴파일하는 도중에수행되고,상기 캐시 청크로 전환하는 단계는,상기 메모리 사용이 완료된 할당된 청크가 상기 인공지능 응용 프로그램의 가중치 데이터에 대해 할당된 청크인경우, 상기 메모리 사용이 완료된 할당된 청크의 할당을 해제하고 상기 제1 유형의 캐시 청크로 전환하는 단계;또는상기 메모리 사용이 완료된 할당된 청크가 상기 인공지능 응용 프로그램의 입력 데이터 또는 출력 데이터에 대해 할당된 청크인 경우, 상기 메모리 사용이 완료된 할당된 청크의 할당을 해제하고 상기 제2 유형의 캐시 청크로 전환하는 단계를 포함하는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 하나 이상의 캐시 청크는 제1 레벨의 캐시 청크 또는 제2 레벨의 캐시 청크 중 하나로 분류되고,상기 판단하는 단계는,상기 제1 레벨의 캐시 청크 중 상기 특정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를판단하는 단계; 및상기 제1 레벨의 캐시 청크 중 상기 특정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하지 않는다고판단된 경우, 상기 제2 레벨의 캐시 청크 중 상기 특정 데이터의 크기가 상기 제2 레벨의 캐시 청크의 각각과연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단하는 단계를 포함하는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 제1 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가제2 미리 정의된 횟수 이상인 캐시 청크를 제2 레벨의 캐시 청크로 전환하는 단계; 및상기 제2 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가제3 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환하는 단계를 더 포함하는, 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "뉴럴 프로세싱 시스템으로서,공개특허 10-2024-0142859-5-인공지능 응용 프로그램을 위한 신경망 계산을 수행하도록 구성된 뉴럴 프로세싱 유닛;상기 뉴럴 프로세싱 유닛과 동일한 칩에 위치하도록 구성된 온 칩 메모리; 및상기 온 칩 메모리의 메모리 할당을 관리하도록 구성된 적어도 하나의 프로세서를 포함하고,상기 온 칩 메모리는 복수의 청크를 포함하고,상기 온 칩 메모리의 복수의 청크의 각각은,해당 메모리 청크가 임의의 데이터에 대해 할당된 상태임을 나타내는 할당된 청크;해당 메모리 청크가 임의의 데이터에 대해 할당되었다가 해제된 상태이나, 프리 청크로 전환되기 전의 보류 상태임을 나타내는 캐시 청크; 또는해당 메모리 청크가 임의의 데이터에 대해 할당되지 않은 상태이며, 상기 캐시 청크가 아닌 청크임을 나타내는프리 청크중 하나로 분류되는, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,상기 적어도 하나의 프로세서는, 상기 할당된 청크 중 메모리 사용이 완료된 할당된 청크의 할당을 해제하고 캐시 청크로 전환하도록 더 구성된, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제12항에 있어서,상기 적어도 하나의 프로세서는,특정 데이터에 대한 온 칩 메모리 할당 요청을 수신하고,상기 특정 데이터와 하나 이상의 캐시 청크의 크기 비교에 기초하여, 상기 하나 이상의 캐시 청크 중 상기 특정데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부를 판단하고,상기 판단 결과에 따라, 상기 특정 데이터를 상기 하나 이상의 캐시 청크 중 특정 캐시 청크에 할당하거나, 또는 상기 특정 데이터를 상기 프리 청크 중 적어도 일부에 할당하도록 더 구성된, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 적어도 하나의 프로세서는,상기 하나 이상의 캐시 청크 중 상기 특정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를판단하고,상기 하나 이상의 캐시 청크 중 특정 캐시 청크의 크기가 상기 특정 데이터의 크기와 일치한다고 판단되는경우, 상기 특정 데이터를 상기 특정 캐시 청크에 할당하거나, 또는 상기 특정 데이터의 크기와 일치하는 캐시청크가 존재하지 않는다고 판단되는 경우, 상기 특정 데이터를 상기 프리 청크 중 적어도 일부에 할당하도록 더구성된, 뉴럴 프로세싱 시스템.공개특허 10-2024-0142859-6-청구항 16 제14항에 있어서,상기 적어도 하나의 프로세서는,상기 하나 이상의 캐시 청크 중 상기 특정 데이터의 크기가 상기 하나 이상의 캐시 청크의 각각과 연관된 미리정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단하고,상기 특정 데이터의 크기가 특정 캐시 청크와 연관된 미리 정의된 범위를 만족한다고 판단되는 경우, 상기 특정데이터를 상기 특정 캐시 청크에 할당하거나, 또는 상기 특정 데이터의 크기가 상기 하나 이상의 캐시 청크의각각과 연관된 미리 정의된 범위를 만족하지 않는다고 판단되는 경우, 상기 특정 데이터를 상기 프리 청크 중적어도 일부에 할당하도록 구성된, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서,상기 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 상한은, 상기 하나 이상의 캐시 청크의 각각의 크기이고,상기 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 하한은, 상기 하나 이상의 캐시 청크의 각각의 크기의 미리 정의된 비율이고,상기 미리 정의된 비율은 0보다 크고 1보다 작은 실수인, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,상기 미리 정의된 비율은, 상기 온 칩 메모리에 입력 또는 출력되는 데이터의 메모리 포맷과, 상기 적어도 하나의 프로세서에 의해 실행 또는 컴파일되는 인공지능 응용 프로그램에 포함된 데이터 레이아웃에 기초하여 결정되는, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제14항에 있어서,상기 적어도 하나의 프로세서는,상기 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가 제1 미리정의된 횟수 이상인 캐시 청크를 프리 청크로 전환하도록 더 구성된, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제14항에 있어서,상기 적어도 하나의 프로세서는,상기 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않고 상기 특정 데이터에 대해 할당 가능한 프리청크도 존재하지 않는 경우, 캐시 청크 중 적어도 일부를 프리 청크로 전환하도록 더 구성된, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "공개특허 10-2024-0142859-7-제14항에 있어서,상기 캐시 청크는 제1 유형의 캐시 청크 또는 제2 유형의 캐시 청크 중 하나로 분류되고,상기 제1 유형의 캐시 청크는, 할당 대상 데이터의 크기가 해당 캐시 청크의 데이터와 일치하는 경우, 상기 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크이고,상기 제2 유형의 캐시 청크는, 할당 대상 데이터의 크기가 해당 캐시 청크와 연관된 미리 정의된 범위를 만족하는 경우, 상기 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크인, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제21항에 있어서,상기 적어도 하나의 프로세서는,상기 할당된 청크 중 메모리 사용이 완료된 할당된 청크가 상기 인공지능 응용 프로그램의 가중치 데이터에 대해 할당된 청크인 경우, 상기 메모리 사용이 완료된 할당된 청크의 할당을 해제하고 상기 제1 유형의 캐시 청크로 전환하거나, 또는 상기 메모리 사용이 완료된 할당된 청크가 상기 인공지능 응용 프로그램의 입력 데이터 또는 출력 데이터에 대해 할당된 청크인 경우, 상기 메모리 사용이 완료된 할당된 청크의 할당을 해제하고 상기제2 유형의 캐시 청크로 전환하도록 더 구성된, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제14항에 있어서,상기 캐시 청크는 제1 레벨의 캐시 청크 또는 제2 레벨의 캐시 청크 중 하나로 분류되고,상기 적어도 하나의 프로세서는,상기 제1 레벨의 캐시 청크 중 상기 특정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를판단하고,상기 제1 레벨의 캐시 청크 중 상기 특정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하지 않는다고판단된 경우, 상기 제2 레벨의 캐시 청크 중 상기 특정 데이터의 크기가 상기 제2 레벨의 캐시 청크의 각각과연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단하도록 더 구성된, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제23항에 있어서,상기 적어도 하나의 프로세서는,상기 제1 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가제2 미리 정의된 횟수 이상인 캐시 청크를 제2 레벨의 캐시 청크로 전환하고,상기 제2 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가제3 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환하도록 더 구성된, 뉴럴 프로세싱 시스템."}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시는 적어도 하나의 프로세서에 의해 수행되는 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법에 관한 것이다. 온 칩 메모리 할당 방법은 온 칩 메모리 영역 중 메모리 사용이 완료된, 할당된 청크의 할당을 해제하고 캐 시 청크로 전환하는 단계, 특정 데이터에 대한 온 칩 메모리 할당 요청을 수신하는 단계, 특정 데이터의 크기와 하나 이상의 캐시 청크의 크기 사이의 비교에 기초하여, 하나 이상의 캐시 청크 중 특정 데이터에 대해 할당 가 능한 캐시 청크가 존재하는지 여부를 판단하는 단계 및 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부에 대한 판단 결과에 따라, 특정 데이터를 하나 이상의 캐시 청크 중 특정 캐시 청크에 할당하거나, 또는 특 정 데이터를 프리 청크 중 적어도 일부에 할당하는 단계를 포함한다."}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법 및 시스템에 관한 것으로, 구체적으로, 할당이 해제된 메모리 청크를 캐시 청크로 보류하고, 이후 동일/유사한 크기의 데이터를 캐시 청크에 우선적으로 할당하는 방 법 및 시스템에 관한 것이다."}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "종래의 메모리 할당 시스템에 의하면, 프로그램이 메모리 할당을 요청한 경우, 시스템은 해당 요청을 충족하는 크기의 프리 메모리 블록을 찾아 할당한다. 또한, 시스템은 사용이 완료된 메모리 블록에 대해서는 할당을 해 제한다. 이러한 할당 및 할당 해제가 반복하여 수행되는 경우, 사용 가능한 메모리 영역이 매우 작은 세그먼트 로 나뉘는 메모리 단편화 현상이 발생할 수 있다. 메모리 단편화 현상이 발생하는 경우, 프로그램의 메모리 할당 요청을 충족할 만큼 충분히 큰 단일 프리 메모리 블록이 존재하지 않을 확률이 높아질 수 있다. 따라서, 메모리 단편화 현상은 시스템의 성능 및 효율에 부정적 인 영향을 미칠 수 있어, 이를 사전에 방지할 필요가 있다. 특히, 온 칩 메모리는 일반적으로 효율적이고 빠른 메모리 액세스가 필요한 경우에 사용되며, 오프 칩 메모리보다 용량이 작은 경우가 많아, 메모리 단편화 방지의 중요성이 더욱 강조될 수 있다."}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상기와 같은 문제점을 해결하기 위한 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법, 기록매체에 저 장된 컴퓨터 프로그램 및 장치(시스템)를 제공한다."}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시는 방법, 장치(시스템) 또는 판독 가능 저장 매체에 저장된 컴퓨터 프로그램을 포함한 다양한 방식으로 구현될 수 있다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서에 의해 수행되는 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법은 할당된 청크(allocated chunk), 캐시 청크(cached chunk) 또는 프리 청크(free chunk) 중 하나로 분류되는 복수의 청크를 포함하는 온 칩 메모리 영역 중 메모리 사용이 완료된, 할당된 청크의 할당을 해제하고 캐시 청크로 전환하는 단계, 특정 데이터에 대한 온 칩 메모리 할당 요청을 수신하는 단계, 특정 데이터의 크기 와 하나 이상의 캐시 청크의 크기 사이의 비교에 기초하여, 하나 이상의 캐시 청크 중 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부를 판단하는 단계 및 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하 는지 여부에 대한 판단 결과에 따라, 특정 데이터를 하나 이상의 캐시 청크 중 특정 캐시 청크에 할당하거나, 또는 특정 데이터를 프리 청크 중 적어도 일부에 할당하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 판단하는 단계는, 하나 이상의 캐시 청크 중 특정 데이터의 크기와 동일한 크기 를 가진 캐시 청크가 존재하는지 여부를 판단하는 단계를 포함하고, 할당하는 단계는, 하나 이상의 캐시 청크 중 특정 캐시 청크의 크기가 특정 데이터의 크기와 동일하다고 판단되는 경우, 특정 데이터를 특정 캐시 청크에 할당하는 단계 또는 특정 데이터의 크기와 일치하는 캐시 청크가 존재하지 않는다고 판단되는 경우, 특정 데이 터를 프리 청크 중 적어도 일부에 할당하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 판단하는 단계는, 하나 이상의 캐시 청크 중 특정 데이터의 크기가 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단하는 단계를 포함 하고, 할당하는 단계는, 특정 데이터의 크기가 특정 캐시 청크와 연관된 미리 정의된 범위를 만족한다고 판단되 는 경우, 특정 데이터를 특정 캐시 청크에 할당하는 단계 또는 특정 데이터의 크기가 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하지 않는다고 판단되는 경우, 특정 데이터를 프리 청크 중 적어도 일부 에 할당하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 상한은, 하나 이상 의 캐시 청크의 각각의 크기이고, 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 하한은, 하나 이 상의 캐시 청크의 각각의 크기의 미리 정의된 비율이고, 미리 정의된 비율은 0보다 크고 1보다 작은 실수이다. 본 개시의 일 실시예에 따르면, 미리 정의된 비율은, 온 칩 메모리에 입력 또는 출력되는 데이터의 메모리 포맷 과, 적어도 하나의 프로세서에 의해 실행 또는 컴파일되는 인공지능 응용 프로그램의 데이터 레이아웃에 기초하 여 결정된다. 본 개시의 일 실시예에 따르면, 하나 이상의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가 제1 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환하는 단계를 더 포함 한다. 본 개시의 일 실시예에 따르면, 할당하는 단계는, 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않고 특정 데이터에 대해 할당 가능한 프리 청크도 존재하지 않는 경우, 캐시 청크 중 적어도 일부를 프리 청크로 전 환하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 하나 이상의 캐시 청크는 제1 유형의 캐시 청크 또는 제2 유형의 캐시 청크 중 하나로 분류되고, 제1 유형의 캐시 청크는, 할당 대상 데이터의 크기가 해당 캐시 청크의 데이터의 크기와 동일 한 경우, 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크이고, 제2 유형의 캐시 청크는, 할당 대상 데이터의 크기가 해당 캐시 청크와 연관된 미리 정의된 범위를 만족하는 경우, 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크이다. 본 개시의 일 실시예에 따르면, 방법은, 적어도 하나의 프로세서가 인공지능 응용 프로그램을 실행 또는 컴파일 하는 도중에 수행되고, 캐시 청크로 전환하는 단계는, 메모리 사용이 완료된 할당된 청크가 인공지능 응용 프로 그램의 가중치 데이터에 대해 할당된 청크인 경우, 메모리 사용이 완료된 할당된 청크의 할당을 해제하고 제1 유형의 캐시 청크로 전환하는 단계 또는 메모리 사용이 완료된 할당된 청크가 인공지능 응용 프로그램의 입력 데이터 또는 출력 데이터에 대해 할당된 청크인 경우, 메모리 사용이 완료된 할당된 청크의 할당을 해제하고 제 2 유형의 캐시 청크로 전환하는 단계를 포함한다. 본 개시의 일 실시예에 따르면, 하나 이상의 캐시 청크는 제1 레벨의 캐시 청크 또는 제2 레벨의 캐시 청크 중 하나로 분류되고, 판단하는 단계는, 제1 레벨의 캐시 청크 중 특정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를 판단하는 단계 및 제1 레벨의 캐시 청크 중 특정 데이터의 크기와 동일한 크기를 가 진 캐시 청크가 존재하지 않는다고 판단된 경우, 제2 레벨의 캐시 청크 중 특정 데이터의 크기가 제2 레벨의 캐 시 청크의 각각과 연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단하는 단계를 포함한 다. 본 개시의 일 실시예에 따르면, 제1 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청 크로 할당되지 않은 횟수가 제2 미리 정의된 횟수 이상인 캐시 청크를 제2 레벨의 캐시 청크로 전환하는 단계 및 제2 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가 제3 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환하는 단계를 더 포함한다. 본 개시의 일 실시예에 따른 뉴럴 프로세싱 시스템은, 인공지능 응용 프로그램을 위한 신경망 계산을 수행하도 록 구성된 뉴럴 프로세싱 유닛, 뉴럴 프로세싱 유닛과 동일한 칩에 위치하도록 구성된 온 칩 메모리 및 온 칩 메모리의 메모리 할당을 관리하도록 구성된 적어도 하나의 프로세서를 포함하고, 온 칩 메모리는 복수의 청크를 포함하고, 온 칩 메모리의 복수의 청크의 각각은, 해당 메모리 청크가 임의의 데이터에 대해 할당된 상태임을 나타내는 할당된 청크, 해당 메모리 청크가 임의의 데이터에 대해 할당되었다가 해제된 상태이나, 프리 청크로 전환되기 전의 보류 상태임을 나타내는 캐시 청크 또는 해당 메모리 청크가 임의의 데이터에 대해 할당되지 않 은 상태이며, 캐시 청크가 아닌 청크임을 나타내는 프리 청크 중 하나로 분류된다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서는, 할당된 청크 중 메모리 사용이 완료된 할당된 청크 의 할당을 해제하고 캐시 청크로 전환하도록 더 구성된다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서는, 특정 데이터에 대한 온 칩 메모리 할당 요청을 수신 하고, 특정 데이터와 하나 이상의 캐시 청크의 크기 비교에 기초하여, 하나 이상의 캐시 청크 중 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부를 판단하고, 판단 결과에 따라, 특정 데이터를 하나 이상의 캐 시 청크 중 특정 캐시 청크에 할당하거나, 또는 특정 데이터를 프리 청크 중 적어도 일부에 할당하도록 더 구성 된다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서는, 하나 이상의 캐시 청크 중 특정 데이터의 크기와 동 일한 크기를 가진 캐시 청크가 존재하는지 여부를 판단하고, 하나 이상의 캐시 청크 중 특정 캐시 청크의 크기 가 특정 데이터의 크기와 일치한다고 판단되는 경우, 특정 데이터를 특정 캐시 청크에 할당하거나, 또는 특정 데이터의 크기와 일치하는 캐시 청크가 존재하지 않는다고 판단되는 경우, 특정 데이터를 프리 청크 중 적어도일부에 할당하도록 더 구성된다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서는, 하나 이상의 캐시 청크 중 특정 데이터의 크기가 하 나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단하고, 특정 데이터의 크기가 특정 캐시 청크와 연관된 미리 정의된 범위를 만족한다고 판단되는 경우, 특정 데이터를 특정 캐시 청크에 할당하거나, 또는 특정 데이터의 크기가 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하지 않는다고 판단되는 경우, 특정 데이터를 프리 청크 중 적어도 일부에 할당하도록 구성된다. 본 개시의 일 실시예에 따르면, 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 상한은, 하나 이상 의 캐시 청크의 각각의 크기이고, 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 하한은, 하나 이 상의 캐시 청크의 각각의 크기의 미리 정의된 비율이고, 미리 정의된 비율은 0보다 크고 1보다 작은 실수이다. 본 개시의 일 실시예에 따르면, 미리 정의된 비율은, 온 칩 메모리에 입력 또는 출력되는 데이터의 메모리 포맷 과, 적어도 하나의 프로세서에 의해 실행 또는 컴파일되는 인공지능 응용 프로그램에 포함된 데이터 레이아웃에 기초하여 결정된다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서는, 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터 가 해당 캐시 청크로 할당되지 않은 횟수가 제1 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환하도록 더 구성된다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서는, 특정 데이터에 대해 할당 가능한 캐시 청크가 존재 하지 않고 특정 데이터에 대해 할당 가능한 프리 청크도 존재하지 않는 경우, 캐시 청크 중 적어도 일부를 프리 청크로 전환하도록 더 구성된다. 본 개시의 일 실시예에 따르면, 캐시 청크는 제1 유형의 캐시 청크 또는 제2 유형의 캐시 청크 중 하나로 분류 되고, 제1 유형의 캐시 청크는, 할당 대상 데이터의 크기가 해당 캐시 청크의 데이터와 일치하는 경우, 할당 대 상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크이고, 제2 유형의 캐시 청크는, 할당 대상 데이터의 크기가 해당 캐시 청크와 연관된 미리 정의된 범위를 만족하는 경우, 할당 대상 데이터가 해당 캐시 청크에 할 당되는 유형의 캐시 청크이다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서는, 할당된 청크 중 메모리 사용이 완료된 할당된 청크 가 인공지능 응용 프로그램의 가중치 데이터에 대해 할당된 청크인 경우, 메모리 사용이 완료된 할당된 청크의 할당을 해제하고 제1 유형의 캐시 청크로 전환하거나, 또는 메모리 사용이 완료된 할당된 청크가 인공지능 응용 프로그램의 입력 데이터 또는 출력 데이터에 대해 할당된 청크인 경우, 메모리 사용이 완료된 할당된 청크의 할 당을 해제하고 제2 유형의 캐시 청크로 전환하도록 더 구성된다. 본 개시의 일 실시예에 따르면, 캐시 청크는 제1 레벨의 캐시 청크 또는 제2 레벨의 캐시 청크 중 하나로 분류 되고, 적어도 하나의 프로세서는, 제1 레벨의 캐시 청크 중 특정 데이터의 크기와 동일한 크기를 가진 캐시 청 크가 존재하는지 여부를 판단하고, 제1 레벨의 캐시 청크 중 특정 데이터의 크기와 동일한 크기를 가진 캐시 청 크가 존재하지 않는다고 판단된 경우, 제2 레벨의 캐시 청크 중 특정 데이터의 크기가 제2 레벨의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단하도록 더 구성된다. 본 개시의 일 실시예에 따르면, 적어도 하나의 프로세서는, 제1 레벨의 캐시 청크 중 임의의 데이터와 크기 비 교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가 제2 미리 정의된 횟수 이상인 캐시 청크를 제2 레벨의 캐시 청크로 전환하고, 제2 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할 당되지 않은 횟수가 제3 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환하도록 더 구성된다."}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 일부 실시예에 따르면, 할당이 해제된 메모리 청크가 캐시 청크로 보류되고, 동일/유사한 크기의 데 이터가 캐시 청크에 우선적으로 할당됨으로써, 메모리 단편화 현상을 방지할 수 있다. 본 개시의 일부 실시예에 따르면, 온 칩 메모리를 효율적으로 사용하여 메모리 단편화 현상을 방지함으로써, 뉴 럴 프로세싱 유닛의 동작 지연(latency) 및 전력 소모가 최소화될 수 있다. 본 개시의 효과는 이상에서 언급한 효과로 제한되지 않으며, 언급되지 않은 다른 효과들은 청구범위의 기재로부"}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "터 본 개시가 속하는 기술분야에서 통상의 지식을 가진 자(“통상의 기술자”라 함)에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 개시의 실시를 위한 구체적인 내용을 첨부된 도면을 참조하여 상세히 설명한다. 다만, 이하의 설명에 서는 본 개시의 요지를 불필요하게 흐릴 우려가 있는 경우, 널리 알려진 기능이나 구성에 관한 구체적 설명은 생략하기로 한다. 첨부된 도면에서, 동일하거나 대응하는 구성요소에는 동일한 참조부호가 부여되어 있다. 또한, 이하의 실시예 들의 설명에 있어서, 동일하거나 대응되는 구성요소를 중복하여 기술하는 것이 생략될 수 있다. 그러나, 구성요소에 관한 기술이 생략되어도, 그러한 구성요소가 어떤 실시예에 포함되지 않는 것으로 의도되지는 않는다. 개시된 실시예의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 후술되어 있는 실시예 들을 참조하면 명확해질 것이다. 그러나, 본 개시는 이하에서 개시되는 실시예들에 한정되는 것이 아니라 서로 다른 다양한 형태로 구현될 수 있으며, 단지 본 실시예들은 본 개시가 완전하도록 하고, 본 개시가 통상의 기술 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것일 뿐이다. 본 명세서에서 사용되는 용어에 대해 간략히 설명하고, 개시된 실시예에 대해 구체적으로 설명하기로 한다. 본 명세서에서 사용되는 용어는 본 개시에서의 기능을 고려하면서 가능한 현재 널리 사용되는 일반적인 용어들을 선택하였으나, 이는 관련 분야에 종사하는 기술자의 의도 또는 판례, 새로운 기술의 출현 등에 따라 달라질 수 있다. 또한, 특정한 경우는 출원인이 임의로 선정한 용어도 있으며, 이 경우 해당되는 발명의 설명 부분에서 상세히 그 의미를 기재할 것이다. 따라서, 본 개시에서 사용되는 용어는 단순한 용어의 명칭이 아닌, 그 용어 가 가진 의미와 본 개시의 전반에 걸친 내용을 토대로 정의되어야 한다. 본 명세서에서의 단수의 표현은 문맥상 명백하게 단수인 것으로 특정하지 않는 한, 복수의 표현을 포함한다. 또한, 복수의 표현은 문맥상 명백하게 복수인 것으로 특정하지 않는 한, 단수의 표현을 포함한다. 명세서 전체 에서 어떤 부분이 어떤 구성요소를 포함한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있음을 의미한다. 또한, 명세서에서 사용되는 '모듈' 또는 '부'라는 용어는 소프트웨어 또는 하드웨어 구성요소를 의미하며, '모 듈' 또는 '부'는 어떤 역할들을 수행한다. 그렇지만, '모듈' 또는 '부'는 소프트웨어 또는 하드웨어에 한정되 는 의미는 아니다. '모듈' 또는 '부'는 어드레싱할 수 있는 저장 매체에 있도록 구성될 수도 있고 하나 또는 그 이상의 프로세서들을 재생시키도록 구성될 수도 있다. 따라서, 일 예로서, '모듈' 또는 '부'는 소프트웨어 구성요소들, 객체지향 소프트웨어 구성요소들, 클래스 구성요소들 및 태스크 구성요소들과 같은 구성요소들과, 프로세스들, 함수들, 속성들, 프로시저들, 서브루틴들, 프로그램 코드의 세그먼트들, 드라이버들, 펌웨어, 마이 크로 코드, 회로, 데이터, 데이터베이스, 데이터 구조들, 테이블들, 어레이들 또는 변수들 중 적어도 하나를 포 함할 수 있다. 구성요소들과 '모듈' 또는 '부'들은 안에서 제공되는 기능은 더 작은 수의 구성요소들 및 '모듈' 또는 '부'들로 결합되거나 추가적인 구성요소들과 '모듈' 또는 '부'들로 더 분리될 수 있다. 본 개시의 일 실시예에 따르면, '모듈' 또는 '부'는 프로세서 및 메모리로 구현될 수 있고, 회로(circuit, circuitry)로 구현될 수 있다. 회로(circuit, circuitry)와 같은 용어는 하드웨어 상의 회로를 의마하기도 하 지만 소프트웨어 상의 회로를 의미할 수도 있다. '프로세서'는 범용 프로세서, 중앙 처리 장치(CPU), 마이크로 프로세서, 디지털 신호 프로세서(DSP), 뉴럴 프로세싱 유닛(NPU), 제어기, 마이크로제어기, 상태 머신 등을 포 함하도록 넓게 해석되어야 한다. 몇몇 환경에서, '프로세서'는 주문형 반도체(ASIC), 프로그램가능 로직 디바 이스(PLD), 필드 프로그램가능 게이트 어레이(FPGA) 등을 지칭할 수도 있다. '프로세서'는, 예를 들어, DSP와 마이크로프로세서의 조합, 복수의 마이크로프로세서들의 조합, DSP 코어와 결합한 하나 이상의 마이크로프로세 서들의 조합, 또는 임의의 다른 그러한 구성들의 조합과 같은 처리 디바이스들의 조합을 지칭할 수도 있다. 또 한, '메모리'는 전자 정보를 저장 가능한 임의의 전자 컴포넌트를 포함하도록 넓게 해석되어야 한다. '메모 리'는 임의 액세스 메모리(RAM), 판독-전용 메모리(ROM), 비-휘발성 임의 액세스 메모리(NVRAM), 프로그램가능 판독-전용 메모리(PROM), 소거-프로그램가능 판독 전용 메모리(EPROM), 전기적으로 소거가능 PROM(EEPROM), 플 래쉬 메모리, 자기 또는 광학 데이터 저장장치, 레지스터들 등과 같은 프로세서-판독가능 매체의 다양한 유형들 을 지칭할 수도 있다. 프로세서가 메모리로부터 정보를 판독하고/하거나 메모리에 정보를 기록할 수 있다면 메 모리는 프로세서와 전자 통신 상태에 있다고 불린다. 프로세서에 집적된 메모리는 프로세서와 전자 통신 상태 에 있다. 본 개시에서, '시스템'은 서버 장치와 클라우드 장치 중 적어도 하나의 장치를 포함할 수 있으나, 이에 한정되 는 것은 아니다. 예를 들어, 시스템은 하나 이상의 서버 장치로 구성될 수 있다. 다른 예로서, 시스템은 하나 이상의 클라우드 장치로 구성될 수 있다. 또 다른 예로서, 시스템은 서버 장치와 클라우드 장치가 함께 구성되 어 동작될 수 있다. 본 개시에서, '복수의 A의 각각' 또는 '복수의 A 각각'은 복수의 A에 포함된 모든 구성 요소의 각각을 지칭하거 나, 복수의 A에 포함된 일부 구성 요소의 각각을 지칭할 수 있다. 본 명세서 및 특허청구범위에서 사용된 제1, 제2, A, B 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 상기 구성요소들은 상기 용어들에 의해 한정되어서는 안 된다. 상기 용어들은 하나의 구성요소를 다른구성요소로부터 구별하는 목적으로만 사용된다. 또한, 각 도면에서 사용된 제1, 제2 등의 용어는 하나의 도면 내에서 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용될 뿐, 상기 구성요소들은 상기 용어 들에 의해 한정되어서는 안 된다. 예를 들어, 동일한 도면에 기재된 제1 구성요소와 제2 구성요소는 동일할 수 도 있고, 상이할 수도 있다. 다른 예로, 서로 다른 도면에 기재된 제1 구성요소는 동일할 수도 있고, 상이할 수도 있다. 도 1은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템을 설명하기 위한 블록도이다. 도 1을 참조하면, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 시스템(NPS)은 제1 뉴럴 프로세싱 장치, 호스트 시스템(HS) 및 호스트 인터페이스(HIO)를 포함할 수 있다. 제1 뉴럴 프로세싱 장치는 인공 신경망을 이용하여 연산을 수행하는 장치일 수 있다. 제1 뉴럴 프로세싱 장 치는 예를 들어, 딥 러닝(deep learning) 연산 작업을 수행하는 것에 특화된 장치일 수 있다. 단, 본 실시예 가 이에 제한되는 것은 아니다. 이때, 제1 뉴럴 프로세싱 장치는 뉴럴 프로세싱 장치가 아닌 다른 프로세싱 장치일 수도 있다. 즉, 제1 뉴 럴 프로세싱 장치는 각각 그래픽 프로세싱 장치(GPU, graphics processing unit), 중앙 처리 장치(CPU, central processing unit) 및 그 외의 다른 종류의 프로세싱 장치일 수도 있다. 이하에서는 편의상 제1 뉴럴 프 로세싱 장치가 뉴럴 프로세싱 장치인 것으로 설명한다. 호스트 시스템(HS)은 제1 뉴럴 프로세싱 장치에 연산 작업을 지시하고, 연산 작업의 결과를 회수하는 시스템 일 수 있다. 호스트 시스템(HS)은 제1 뉴럴 프로세싱 장치에 비해서 딥 러닝 연산 작업에 특화되지 않은 시 스템일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 일 실시예에 따르면, 호스트 시스템(HS)은 제1 뉴럴 프로세싱 장치에 포함된 온 칩 메모리의 메모리 할당을 관리할 수 있다. 예를 들어, 호스트 시스템(HS)(예를 들어, 호스트 시스템의 적어도 하나의 프로세서)은 인공 지능 응용 프로그램을 컴파일하는 과정에서 온 칩 메모리의 메모리 할당을 관리할 수 있다. 이 경우, 컴파일 결과에 메모리 할당 내용이 포함될 수 있으며, 이후, 컴파일 결과를 이용하여 제1 뉴럴 프로세싱 장치에 의 한 연산이 수행될 수 있다. 호스트 인터페이스(HIO)는 제1 뉴럴 프로세싱 장치와 호스트 시스템(HS) 사이에서 데이터 및 컨트롤 신호를 전송할 수 있다. 호스트 인터페이스(HIO)는 예를 들어, 호스트 시스템(HS)의 커맨드 및 데이터를 제1 뉴럴 프 로세싱 장치로 전달할 수 있고, 이에 따라 제1 뉴럴 프로세싱 장치가 연산 작업을 수행할 수 있다. 제1 뉴럴 프로세싱 장치는 연산 작업을 완료하면 이에 대한 결과를 인터럽트 요청을 통해서 호스트 시스템(HS)으 로 전달할 수 있다. 호스트 인터페이스(HIO)는 예를 들어, PCIe(PCI Express)일 수 있으나, 이에 제한되는 것 은 아니다. 도 2는 도 1의 뉴럴 프로세싱 장치를 세부적으로 설명하기 위한 블록도이다. 도 2를 참조하면, 제1 뉴럴 프로세싱 장치는 뉴럴 코어 SoC, 오프 칩 메모리, 비휘발성 메모리 인터 페이스 및 휘발성 메모리 인터페이스를 포함할 수 있다. 뉴럴 코어 SoC는 시스템 온 칩(System on Chip) 장치일 수 있다. 뉴럴 코어 SoC는 인공지능 연산 유닛 으로 가속기(Accelerator)일 수 있다. 뉴럴 코어 SoC는 예를 들어, GPU(graphics processing unit), FPGA(field programmable gate array) 및 ASIC(application-specific integrated circuit) 중 어느 하나일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 뉴럴 코어 SoC는 별도의 외부 인터페이스를 통해서 다른 외부의 연산 유닛들과 데이터를 교환할 수 있다. 또한, 뉴럴 코어 SoC는 비휘발성 메모리 인터페이스 및 휘발성 메모리 인터페이스를 통해서 각각 비휘발성 메모리 및 휘발성 메모리와 연결될 수 있다. 오프 칩 메모리는 뉴럴 코어 SoC의 칩 외부에 배치된 메모리일 수 있다. 오프 칩 메모리는 비휘발 성 메모리 및 휘발성 메모리를 포함할 수 있다. 비휘발성 메모리는 전원이 공급되지 않아도 저장된 정보를 계속 유지하는 메모리일 수 있다. 비휘발성 메 모리는 예를 들어, ROM(Read-Only Memory), PROM(Programmable Read-Only Memory), EAROM(Erasable Alterable ROM), EPROM(Erasable Programmable Read-Only Memory), EEPROM(Electrically Erasable Programmable Read-Only Memory)(예를 들어, 낸드 플래시 메모리(NAND Flash memory), 노어 플래시 메모리(NORFlash memory)), UVEPROM(Ultra-Violet Erasable Programmable Read-Only Memory), FeRAM(Ferroelectric Random Access Memory), MRAM(Magnetoresistive Random Access Memory), PRAM(Phase-change Random Access Memory), SONOS(silicon-oxide-nitride-oxide-silicon), RRAM(Resistive Random Access Memory), NRAM(Nanotube Random Access Memory), 마그네틱 컴퓨터 기억 장치(예를 들면, 하드 디스크, 디스켓 드라이브, 마그네틱 테이프), 광디스크 드라이브 및 3D 크로스포인트 메모리(3D XPoint memory) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 휘발성 메모리는 비휘발성 메모리와 달리, 저장된 정보를 유지하기 위해서 전력을 지속적으로 필요로 하는 메모리일 수 있다. 휘발성 메모리는 예를 들어, DRAM(Dynamic Random Access Memory), SRAM(Static Random Access Memory), SDRAM(Synchronous Dynamic Random Access Memory) 및 DDR SDRAM(Double Data Rate SDRAM) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 비휘발성 메모리 인터페이스는 예를 들어, PATA(Parallel Advanced Technology Attachment), SCSI(Small Computer System Interface), SAS(Serial Attached SCSI), SATA(Serial Advanced Technology Attachment) 및 PCIe(PCI Express) 중 적어도 하나를 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 휘발성 메모리 인터페이스는 예를 들어, SDR(Single Data Rate), DDR(Double Data Rate), QDR(Quad Data Rate), 및 XDR(eXtreme Data Rate, Octal Data Rate) 중 적어도 하나일 수 있다. 단, 본 실시예가 이에 제한 되는 것은 아니다. 도 3은 도 2의 뉴럴 코어 SoC를 세부적으로 설명하기 위한 블록도이다. 도 2 및 도 3을 참조하면, 뉴럴 코어 SoC는 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA(Direct Memory Access), 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤러, 커맨드 프로세서 및 글로벌 인터커넥션을 포함할 수 있다. 뉴럴 프로세서는 연산 작업을 직접 수행하는 프로세싱 유닛일 수 있다. 뉴럴 프로세서가 복수인 경 우 연산 작업은 각각의 뉴럴 프로세서로 할당될 수 있다. 각각의 뉴럴 프로세서는 글로벌 인터커 넥션을 통해서 서로 연결될 수 있다. 공유 메모리는 여러 뉴럴 프로세서에 의해서 공유되는 메모리일 수 있다. 공유 메모리는 각 각의 뉴럴 프로세서의 데이터를 저장할 수 있다. 또한, 공유 메모리는 오프 칩 메모리로부터 데이터를 수신하여 일시적으로 저장하고 각각의 뉴럴 프로세서로 전달할 수 있다. 반대로, 공유 메모리 는 뉴럴 프로세서로부터 데이터를 수신하여 일시적으로 저장하고 도 2의 오프 칩 메모리로 전 달할 수도 있다. 일 실시예에 따르면, 공유 메모리는 본 개시의 온 칩 메모리 할당 방법의 대상이 되는 온 칩 메모리일 수 있다. 공유 메모리는 상대적으로 속도가 빠른 메모리가 필요할 수 있다. 이에 따라서, 공유 메모리는 예 를 들어, SRAM을 포함할 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 즉, 공유 메모리는 DRAM 을 포함할 수도 있다. 공유 메모리는 SoC 레벨 즉, L2(level 2)에 해당하는 메모리일 수 있다. 따라서, 공유 메모리는 L2 공유 메모리라 정의할 수도 있다. DMA는 CPU(예를 들어, 도 5의 20) 또는 뉴럴 프로세서가 데이터의 입출력을 제어할 필요없이 직접 데이터의 이동을 제어할 수 있다. 이에 따라서, DMA가 메모리 사이의 데이터 이동을 제어하여 CPU(예를 들어, 도 5의 20) 또는 뉴럴 프로세서의 인터럽트의 횟수를 최소화시킬 수 있다. DMA는 공유 메모리와 오프 칩 메모리 사이의 데이터 이동을 제어할 수 있다. DMA의 권 한을 통해서 비휘발성 메모리 컨트롤러 및 휘발성 메모리 컨트롤러가 데이터를 이동을 수행할 수 있다. 비휘발성 메모리 컨트롤러는 비휘발성 메모리에 리드(read) 또는 라이트(write) 작업을 제어할 수 있 다. 비휘발성 메모리 컨트롤러는 제1 비휘발성 메모리 인터페이스를 통해서 비휘발성 메모리를 제어할 수 있다. 휘발성 메모리 컨트롤러는 휘발성 메모리에 리드 또는 라이트 작업을 제어할 수 있다. 또한, 휘발성 메모리 컨트롤러는 휘발성 메모리의 리프레쉬 작업을 수행할 수 있다. 휘발성 메모리 컨트롤러는 제1 휘발성 메모리 인터페이스를 통해서 휘발성 메모리를 제어할 수 있다. 커맨드 프로세서는 컨트롤 인터페이스와 연결될 수 있다. 커맨드 프로세서는 컨트롤 인터페이 스를 통해서 CPU(예를 들어, 도 5의 20)로부터 제어 신호를 수신할 수 있다. 커맨드 프로세서는 CPU(예를 들어, 도 5의 20)로부터 받은 제어 신호를 통해서 태스크를 생성하고, 이를 각각의 뉴럴 프로세서 로 전달할 수 있다. 또한, 커맨드 프로세서는 각각의 뉴럴 프로세서로부터 태스크에 대한 완료 리포트를 수신할 수 있다. 일 실시예에서, 공유 메모리가 본 개시의 온 칩 메모리 할당 방법의 대 상이 되는 메모리인 경우, 커맨드 프로세서가 본 개시의 온 칩 메모리 할당 방법을 이용하여, 공유 메모 리의 메모리 할당을 관리할 수 있다. 글로벌 인터커넥션은 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모 리 컨트롤러, 커맨드 프로세서 및 휘발성 메모리 컨트롤러를 서로 연결할 수 있다. 또한, 외부 인터페이스도 글로벌 인터커넥션에 연결될 수 있다. 글로벌 인터커넥션은 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤 러, 커맨드 프로세서 및 외부 인터페이스 사이의 데이터가 이동하는 경로일 수 있다. 글로벌 인터커넥션은 데이터뿐만 아니라 제어 신호 및 동기화를 위한 신호를 전송할 수 있다. 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 각각의 뉴럴 프로세서가 직접 동기화 신호를 전송하고 수신 할 수 있다. 이에 따라서, 커맨드 프로세서에 의해서 발생하는 동기화 신호의 전송에 따른 레이턴시를 최소화할 수 있다. 즉, 뉴럴 프로세서가 복수일 때, 어느 뉴럴 프로세서의 작업이 종료되어야 다음 뉴럴 프로세서 가 새로운 작업을 시작할 수 있는 개별 작업의 디펜던시가 존재할 수 있다. 이러한 개별 작업의 종료와 시작은 동기화 신호를 통해서 확인할 수 있는데, 기존의 기술은 이러한 동기화 신호의 수신과 새로운 작업의 시 작 지시는 모두 커맨드 프로세서 또는 호스트 즉, CPU가 전담하여 수행하였다. 그러나, 뉴럴 프로세서의 숫자가 늘어나고, 작업의 디펜던시가 복잡하게 설계되면 될수록 이러한 동기화 신호의 수는 기하급수적으로 늘어나서, 각각의 동기화 신호에 따른 레이턴시가 작업의 효율을 크게 낮출 수 있 다. 따라서, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 커맨드 프로세서 대신 각각의 뉴럴 프로 세서가 직접 동기화 신호의 일부를 작업의 디펜던시에 따라 다른 뉴럴 프로세서로 전송할 수 있다. 이 경우 커맨드 프로세서에 의해서 관리되는 방식에 비해서 병렬적으로 여러 뉴럴 프로세서가 동기 화 작업을 수행할 수 있어 동기화에 따른 레이턴시를 최소화할 수 있다. 또한, 커맨드 프로세서가 작업 디펜던시에 따른 뉴럴 프로세서들의 작업 스케쥴링을 수행해야 하는 데 이러한 스케쥴링의 오버헤드도 뉴럴 프로세서의 개수가 늘어나면 늘어날수록 크게 늘어날 수 있다. 따 라서, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 스케쥴링 작업도 개별 뉴럴 프로세서에 의 해서 일부 진행되어 그에 따른 스케쥴링 부담도 줄어들어 장치의 성능이 향상될 수 있다. 도 4는 도 3의 글로벌 인터커넥션을 세부적으로 설명하기 위한 구조도이다. 도 4를 참조하면, 글로벌 인터커넥션은 데이터 채널, 컨트롤 채널 및 L2 싱크 채널을 포함할 수 있다. 데이터 채널은 데이터를 전송하는 전용 채널일 수 있다. 데이터 채널을 통해서 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤러 및 외부 인터페이스가 서로 데이터를 교환할 수 있다. 컨트롤 채널은 제어 신호를 전송하는 전용 채널일 수 있다. 컨트롤 채널을 통해서 적어도 하나의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트롤 러, 커맨드 프로세서 및 외부 인터페이스가 서로 제어 신호를 교환할 수 있다. 특히, 커맨드 프로세서는 각각의 뉴럴 프로세서로 여러가지 제어 신호를 전달할 수 있다. L2 싱크 채널은 동기화 신호를 전송하는 전용 채널일 수 있다. L2 싱크 채널을 통해서 적어도 하나 의 뉴럴 프로세서, 공유 메모리, DMA, 비휘발성 메모리 컨트롤러, 휘발성 메모리 컨트 롤러, 커맨드 프로세서 및 외부 인터페이스가 서로 동기화 신호를 교환할 수 있다.L2 싱크 채널은 글로벌 인터커넥션 내부에 전용 채널로 설정되어 다른 채널과 겹치지 않고 동기화 신호를 빠르게 전송할 수 있다. 이에 따라서, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치는 새로운 와이어링 작업이 필요하지 않고 기존에 사용되는 글로벌 인터커넥션을 이용하여 동기화 작업을 원활하게 진행할 수 있다. 도 5는 도 1의 뉴럴 프로세싱 장치의 제어 신호의 흐름을 설명하기 위한 블록도이다. 도 5를 참조하면, CPU는 컨트롤 인터페이스를 통해서 커맨드 프로세서로 제어 신호를 전달할 수 있다. 이때, 제어 신호는 연산 작업이나 데이터 로드/스토어 작업 등 각각의 오퍼레이션을 수행하도록 지시하 는 신호일 수 있다. 커맨드 프로세서는 제어 신호를 받아 컨트롤 채널을 통해서 적어도 하나의 뉴럴 프로세서에 게 제어 신호를 전달할 수 있다. 각각의 제어 신호는 각각의 태스크로서 뉴럴 프로세서에 저장될 수 있 다. 도 6은 도 3의 뉴럴 프로세서를 세부적으로 설명하기 위한 블록도이다. 도 3 내지 도 6을 참조하면, 뉴럴 프로세서는 적어도 하나의 뉴럴 코어, L1 공유 메모리, L1 LSU, 태스크 매니저, 코어 글로벌, 마이크로 DMA, 로컬 인터커넥션 및 L1 싱크 패스 를 포함할 수 있다. 적어도 하나의 뉴럴 코어는 뉴럴 프로세서의 작업을 분담하여 수행할 수 있다. 뉴럴 코어는 예를 들어, 8개일 수 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 도 3 및 도 5에서는 여러 개의 뉴럴 코어가 뉴럴 프로세서에 포함되는 것으로 도시하였지만, 본 실시예가 이에 제한되는 것은 아니다. 즉, 뉴럴 코어 1개만으로 뉴럴 프로세서가 구성될 수 있다. 뉴럴 코어는 코어 글로벌로부터 태스크 정보를 수신하고, 태스크 정보에 따른 태스크를 수행할 수 있 다. 이때, 태스크는 제어 신호에 의해서 정의될 수 있고, 태스크는 연산 오퍼레이션 및 메모리 오퍼레이션 중 어느 하나일 수 있다. 메모리 오퍼레이션은 예를 들어, 마이크로 DMA(μDMA), LP 마이크로 DMA(Low Priority μDMA), 스토어μDMA(STμDMA) 및 프리 프로세싱 작업 중 어느 하나일 수 있다. L1 공유 메모리는 뉴럴 프로세서 내에서 각각의 뉴럴 코어들이 공유하는 메모리일 수 있다. L1 공유 메모리는 각각의 뉴럴 코어의 데이터를 저장할 수 있다. 또한, L1 공유 메모리는 도 4 의 공유 메모리로부터 데이터를 수신하여 일시적으로 저장하고 각각의 뉴럴 코어로 전달할 수 있다. 반대로, L1 공유 메모리는 뉴럴 코어로부터 데이터를 수신하여 일시적으로 저장하고 도 3의 공유 메 모리로 전달할 수도 있다. 일 실시예에 따르면, L1 공유 메모리는 본 개시의 온 칩 메모리 할당 방 법의 대상이 되는 온 칩 메모리일 수 있다. L1 공유 메모리는 뉴럴 프로세서 레벨, 즉, L1(level 1)에 해당하는 메모리일 수 있다. L2 공유 메모리 즉, 공유 메모리는 뉴럴 프로세서에 의해서 공유되고, L1 공유 메모리는 뉴럴 코어에 의 해서 공유될 수 있다. L1 LSU는 글로벌 인터커넥션을 통해서 외부에서 데이터, 제어 신호 및 동기화 신호 중 적어도 하나 를 수신할 수 있다. L1 LSU는 L1 공유 메모리로 수신한 데이터, 제어 신호 및 동기화 신호 중 적어 도 하나를 전송할 수 있다. 유사하게 L1 LSU는 글로벌 인터커넥션을 통해서 데이터, 제어 신호 및 동기화 신호 중 적어도 하나를 외부로 전달 수 있다. 또한, L1 LSU는 뉴럴 코어 각각에 대해서 데이 터, 제어 신호 및 동기화 신호 중 적어도 하나를 전달하고, 수신할 수 있다. 뉴럴 코어는 코어 글로벌로부터 태스크 정보를 수신하고, 태스크 정보에 따른 태스크를 수행할 수 있 다. 이때, 태스크는 컴퓨테이션 작업(연산 작업) 또는 메모리 오퍼레이션과 관련된 작업일 수 있다. 태스크는 제어 신호에 의해서 정의될 수 있다. 태스크 정보는 태스크에 대한 정보로서, 태스크의 타입, 태스크의 형태, 태스크의 추가 정보 등에 대한 정보일 수 있다. 뉴럴 코어는 태스크의 수행이 완료되는 완료 신호를 코어 글로벌로 전달할 수 있다 태스크 매니저는 컨트롤 인터커넥션(CI)으로부터 태스크를 수신할 수 있다. 이때, 컨트롤 인터커넥션(C I)은 커맨드 프로세서로부터 태스크를 전달하는 전송 인터페이스의 총칭일 수 있다. 즉, 컨트롤 인터커 넥션(CI)은 컨트롤 채널 및 로컬 인터커넥션을 포함할 수 있다.태스크 매니저는 태스크를 수신하여 태스크 정보를 생성하고, 코어 글로벌로 전송할 수 있다. 또한, 태스크 매니저는 코어 글로벌을 통해서 완료 신호를 수신하고, 이에 따른 완료 리포트를 생성하여 컨 트롤 인터커넥션(CI)을 통해서 커맨드 프로세서로 전달할 수 있다. 코어 글로벌은 뉴럴 코어 내에 하드웨어 적으로 연결된 와이어 구조일 수 있다. 코어 글로벌은 도시되지는 않았지만, 뉴럴 코어, L1 공유 메모리, L1 LSU 및 태스크 매니저를 모두 연결 하는 구조일 수 있다. 이에 따라서, 로컬 인터커넥션 및 L1 싱크 패스도 코어 글로벌에 포함될 수도 있다. 단, 본 실시예가 이에 제한되는 것은 아니다. 코어 글로벌은 태스크 매니저로부터 태스크 정보를 수신하여 뉴럴 코어로 전달하고, 그에 대한 완료 신호를 뉴럴 코어로부터 전달받을 수 있다. 이어서, 코어 글로벌은 완료 신호를 태스크 매니저 로 전달할 수 있다. 일 실시예에 따르면, L1 공유 메모리가 본 개시의 온 칩 메모리 할당 방법의 대상이 되는 메모리인 경우, 태스크 매니저 및/또는 코어 글로벌이 본 개시의 온 칩 메모리 할당 방법을 이용하여, L1 공유 메모 리의 메모리 할당을 관리할 수 있다. 마이크로 DMA는 커맨드 프로세서 또는 뉴럴 코어가 데이터의 입출력을 제어할 필요없이 직접 데이터의 이동을 제어할 수 있다. 이에 따라서, 마이크로 DMA가 메모리 사이의 데이터 이동을 제어하여 커맨드 프로세서 또는 뉴럴 코어의 인터럽트의 횟수를 최소화시킬 수 있다. 마이크로 DMA는 L1 공유 메모리와 공유 메모리 및 오프 칩 메모리 사이의 데이터 이동을 제어할 수 있다. 마이크로 DMA의 권한을 통해서 데이터의 이동이 수행될 수 있다. 로컬 인터커넥션은 적어도 하나의 뉴럴 코어, L1 공유 메모리, L1 LSU, 마이크로 DMA, 코어 글로벌 및 태스크 매니저를 서로 연결할 수 있다. 로컬 인터커넥션은 적어도 하나의 뉴럴 코어, L1 공유 메모리, L1 LSU, 마이크로 DMA, 코어 글로벌 및 태스크 매니저 사이의 데이터가 이동하는 경로일 수 있다. 로컬 인터커넥션은 도 3의 글로벌 인터커넥션 과 연결되어 데이터를 전송할 수 있다. L1 싱크 패스는 적어도 하나의 뉴럴 코어, L1 공유 메모리 L1 LSU, 마이크로 DMA, 코어 글로벌 및 태스크 매니저를 서로 연결할 수 있다. L1 싱크 패스는 적어도 하나의 뉴럴 코 어, L1 공유 메모리, L1 LSU, 마이크로 DMA, 코어 글로벌 및 태스크 매니저의 동기화 신호가 이동하는 경로일 수 있다. L1 싱크 패스는 로컬 인터커넥션과 물리적으로 별도로 형성될 수 있다. 로컬 인터커넥션의 경 우 글로벌 인터커넥션과 달리 내부에 충분한 채널이 형성되지 않을 수 있다. 이러한 경우에는 L1 싱크 패스가 별도의 형성되어 동기화 신호의 전송을 빠르고 지체없이 수행할 수 있다. L1 싱크 패스는 글 로벌 인터커넥션의 L2 싱크 채널에 비해서 한단계 낮은 레벨에서 수행되는 동기화에 사용될 수 있 다. 도 7은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치의 소프트웨어 계층 구조를 설명하기 위한 블록도이 다. 도 7을 참조하면, 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치의 소프트웨어 계층 구조는 DL 프레임워 크, 컴파일러 스택 및 백엔드 모듈을 포함할 수 있다. DL 프레임워크는 사용자가 사용하는 딥러닝 모델 네트워크에 대한 프레임워크를 의미할 수 있다. 예를 들어, 텐서플로우나 파이토치와 같은 프로그램을 이용하여 학습이 완료된 뉴럴 네트워크가 생성될 수 있다. 컴파일러 스택은 어댑테이션 레이어, 컴퓨트 라이브러리, 프론트엔드 컴파일러, 백엔드 컴파일러 및 런타임 드라이버를 포함할 수 있다. 어댑테이션 레이어는 DL 프레임워크에 접하는 레이어일 수 있다. 어댑테이션 레이어는 DL 프레임워크에서 생성된 유저의 신경망 모델을 양자화시키고 그래프 수정을 할 수 있다. 또한, 어댑테이 션 레이어는 모델의 타입을 필요한 타입으로 변환시킬 수 있다. 프론트엔드 컴파일러는 어댑테이션 레이어에서 전달받은 다양한 신경망 모델 및 그래프를 일정한 중간 표현(intermediate representation, IR)으로 변환해줄 수 있다. 변환된 IR은 추후 백엔드 컴파일러에서 다루기 쉬운 미리 설정된 표현일 수 있다. 이러한, 프론트엔드 컴파일러의 IR은 그래프 차원에서 미리 할 수 있는 최적화가 수행될 수 있다. 또한, 프론트엔드 컴파일러는 하드웨어에 최적화된 레이아웃으로 변환시키는 작업을 통해서 최종적으로 IR을 생성할 수 있다. 벡엔드 컴파일러는 프론트엔드 컴파일러에서 변환된 IR을 최적화하고 바이너리 파일로 변환하여 런타임 드라이버가 사용할 수 있게 한다. 백엔드 컴파일러는 하드웨어의 세부 사항에 맞는 스케일로 잡 (job)을 분할하여 최적화된 코드를 생성할 수 있다. 컴퓨트 라이브러리는 여러가지 오퍼레이션 중에 하드웨어에 적합한 형태로 설계된 템플릿 오퍼레이션을 저장할 수 있다. 컴퓨트 라이브러리는 하드웨어가 필요한 여러 템플릿 오퍼레이션을 벡엔드 컴파일러 에 제공하여 최적화된 코드가 생성될 수 있게 한다. 런타임 드라이버는 구동 중에 계속해서 모니터링을 수행하여 본 발명의 몇몇 실시예들에 따른 뉴럴 네트 워크 장치의 구동을 수행할 수 있다. 구체적으로, 뉴럴 네트워크 장치의 인터페이스의 실행을 담당할 수 있다. 백엔드 모듈은 ASIC(Application Specific Integrated Circuit), FPGA(Field programmable gate array) 및 C-model을 포함할 수 있다. ASIC은 미리 결정된 설계 방식에 따라 결정 되는 하드웨어 칩을 의미할 수 있다. FPGA는 프로그래밍이 가능한 하드웨어 칩일 수 있다. C- model은 소프트웨어 상에 하드웨어를 모사하여 구현한 모델을 의미할 수 있다. 백엔드 모듈은 컴파일러 스택을 통해서 생성된 바이너리 코드를 이용하여 다양한 작업을 수행하 고 결과를 도출할 수 있다. 도 8은 프로세싱 유닛에 의해 실행되는 딥러닝 작업의 신경망 네트워크의 구조를 설명하기 위한 개념도이다. 도 8을 참조하면, 신경망 네트워크는 입력 데이터를 입력 받는 입력노드를 포함하는 입력 레이어(Input1~k)와, 출력 데이터를 출력하는 출력노드를 포함하는 출력 레이어(Output1~i)와, 입력 레이어와 출력 레이어 사이에 배 치되는 M 개의 히든 레이어를 포함할 수 있다. 여기서, 각 레이어들의 노드를 연결하는 에지(Edge)에는 가중치가 설정될 수 있다. 이러한 가중치 혹은 에지의 유무는 학습 과정에서 추가, 제거, 또는 업데이트될 수 있다. 따라서, 학습 과정을 통하여, k개의 입력노드와 i개의 출력노드 사이에 배치되는 노드들 및 에지들의 가중치는 업데이트될 수 있다. 신경망 네트워크가 학습을 수행하기 전에는 모든 노드와 에지는 초기값으로 설정될 수 있다. 그러나, 누적하여 정보가 입력될 경우, 노드 및 에지들의 가중치는 변경되고, 이 과정에서 학습인자로 입력되는 파라미터들과 출 력노드로 할당되는 값 사이의 매칭이 이루어질 수 있다. 또한, 신경망 네트워크를 구성하는 입력노드와 출력노 드 사이의 노드 및 에지의 가중치는 신경망 네트워크의 학습 과정에 의해 업데이트될 수 있다. 도 9는 메모리 단편화 현상을 설명하기 위한 도면이다. 종래 기술에 따르면, 메모리의 할당 및 할당 해제가 반 복됨에 따라, 메모리 단편화 현상이 발생할 확률이 높을 수 있다. 예를 들어, 제1 상태는 메모리 중 데이터 A가 할당된 제1 블록, 데이터 B가 할당된 제2 블록 및 데이터 C 가 할당된 제3 블록이 할당된 상태이며, 메모리의 나머지 영역은 프리 블록인 상태를 나타낸다. 제1 상태(91 0)에서 데이터 B의 메모리 사용이 완료된 경우, 제2 블록의 할당이 해제되고 제2 블록은 프리 블록으로 전환된 다. 이 경우, 메모리의 상태가 제2 상태로 변경된다. 이러한 제2 상태에서, 데이터 D에 대한 메모 리 할당 요청이 수신될 수 있다. 제3 상태는 제2 상태의 프리 블록 중 제4 블록에 데이터 D가 할당된 상태를 나타낸다. 제1 블록과 제3 블록 사이의 프리 블록의 크기는 데이터 D의 크기보다 작아, 해당 프리 블록에는 데이터 D가 할 당될 수 없으므로 제4 블록에 데이터 D가 할당된다. 제4 상태 및 제5 상태는 제3 상태 이후 메모리 할당 및/또는 할당 해제가 복수 번 반복된 상태 를 나타낸다. 예를 들어, 제4 상태는, 제3 상태 이후, 메모리의 일부 영역에 데이터 E, 데이터 F 및 데이터 G가 추가로 할당된 상태를 나타낼 수 있다. 또한, 제5 상태는, 제4 상태 이후, 데이터 D 및 데이터 E가 할당되었던 메모리 영역의 할당이 해제되고, 데이터 H 및 데이터 I가 메모리의 일부 영역에 추가로 할당된 상태를 나타낼 수 있다. 도시된 제5 상태의 예시와 같이, 종래 기술에 따르면, 사용 가능한 메모리 영역이 매우 작은 세그먼트로 나뉘는 메모리 단편화 현상이 발생할 수 있다. 메모리 단편화 현상이 발생하는 경우, 메모리 할당 요청을 충족 할 만큼 충분히 큰 단일 프리 블록이 존재하지 않을 확률이 높아질 수 있다. 이러한 메모리 단편화 현상으로 인해 온 칩 메모리 공간이 충분하지 않은 경우, 시스템의 지연, 전력 소모 등 시스템의 성능 및 효율에 부정적 인 영향을 미칠 수 있다. 예를 들어, 오프 칩 메모리를 자주 이용함으로써 지연이 발생하거나, 연산 (operation) 전체를 한 번에 수행하지 못하고 나누어 계산하게 되거나, 메모리 플러쉬(flush)가 발생하여 저장 된 데이터를 활용하지 못하거나, 다음 연산에 대한 데이터를 미리 로드할 수 없을 수 있는 문제가 발생할 수 있 다. 따라서, 시스템의 성능 및 효율에 부정적인 영향을 미치지 않도록 메모리 단편화를 사전에 방지할 필요가 있다. 도 10은 본 개시의 일 실시예에 따른 할당된 청크가 캐시 청크로 전환되는 예시를 나타내는 도면이다. 뉴럴 프 로세싱 시스템은 인공지능 응용 프로그램의 실행을 통해 기계학습 모델(예를 들어, 신경망 네트워크)의 학습 및 /또는 추론을 수행할 수 있다. 일반적으로, 기계학습 모델에는 중복되는 레이어들이 존재하는 경우가 많아, 인 공지능 응용 프로그램에서 동일한 크기 또는 유사한 크기의 데이터들이 반복적으로 사용된다. 따라서, 이전에 할당된 메모리 사이즈와 동일한 사이즈의 메모리 할당 요청이 가까운 미래에 있을 것을 예상할 수 있다. 이와 같은 점을 고려하여, 본 개시의 일 실시예에 따르면, 뉴럴 프로세싱 시스템은 온 칩 메모리의 할당 해제된 메모 리 청크를 곧바로 프리 청크로 전환시키는 대신, 캐시 청크로 전환하여 프리 청크로의 사용을 보류할 수 있다. 또한, 뉴럴 프로세싱 시스템은 동일한 크기 또는 유사한 크기의 데이터에 대해 캐시 청크를 우선적으로 할당함 으로써, 메모리 단편화를 방지할 수 있다. 예를 들어, 온 칩 메모리는 도 3의 공유 메모리 및/또는 도 6의 L1 공유 메모리 등일 수 있으나, 이 에 한정되지 않는다. 온 칩 메모리는 복수의 청크를 포함할 수 있고, 복수의 청크는 해당 메모리 청크가 임의 의 데이터에 대해 할당된 상태임을 나타내는 할당된 청크(allocated chunk), 해당 메모리 청크가 임의의 데이터 에 대해 할당되었다가 해제된 상태이나 프리 청크로 전환되기 전의 보류 상태임을 나타내는 캐시 청크(cached chunk) 또는 해당 메모리 청크가 임의의 데이터에 대해 할당되지 않은 상태이며 캐시 청크가 아닌 청크임을 나 타내는 프리 청크(free chunk) 중 하나로 분류될 수 있다. 도 10를 참조하면, 제1 상태는 메모리 중 제1 청크 내지 제5 청크(1011, 1012, 1013, 1014, 1015)가 할 당된 청크이고, 제6 청크가 프리 청크인 상태를 나타낸다. 제1 청크에 할당된 데이터의 메모리 사 용이 완료된 경우, 뉴럴 프로세싱 시스템은 제1 청크의 할당을 해제하고, 제1 청크를 캐시 청크로 전환할 수 있다. 또한, 제2 청크에 할당된 데이터의 메모리 사용이 완료된 경우, 뉴럴 프로세싱 시스템 은 제2 청크의 할당을 해제하고, 제2 청크를 캐시 청크로 전환할 수 있다. 이 경우, 메모리의 상 태가 제2 상태로 변경될 수 있다. 프리 청크와 달리, 연속하는 두 캐시 청크(제1 청크, 제2 청크 )는 하나의 캐시 청크로 취급되지 않고, 각각 별개의 캐시 청크로 취급될 수 있다. 도 11은 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 제1 데이터에 대해 할당 가능한 캐시 청크 가 존재하는지 여부를 판단하는 예시를 나타내는 도면이다. 제2 상태에서, 뉴럴 프로세싱 시스템은 제1 데이터에 대한 메모리 할당 요청을 수신할 수 있다. 그런 다음, 뉴럴 프로세싱 시스템은 할당 요청을 수 신한 제1 데이터의 크기와 캐시 청크의 크기 사이의 비교에 기초하여, 캐시 청크 중 제1 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부를 먼저 판단할 수 있다. 예를 들어, 뉴럴 프로세싱 시스템은 캐시 청크 중 제1 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를 판단할 수 있다. 구체적으로, 뉴럴 프로세싱 시스템은 제1 데이터의 크기와 제1 청크 의 크기가 동일한지 여부를 비교하고, 제1 데이터의 크기와 제2 청크의 크기가 동일한지 여 부를 비교할 수 있다. 도 11에 도시된 예를 참조하면, 뉴럴 프로세싱 시스템은 제1 데이터의 크기와 동 일한 크기를 가진 캐시 청크가 없다고 판단할 수 있다. 즉, 뉴럴 프로세싱 시스템은 제1 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않는다고 판단할 수 있다. 제1 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않는다고 판단되는 경우, 뉴럴 프로세싱 시스템은 제1 데이터를 프리 청크인 제6 청크 중 적어도 일부에 할당할 수 있다. 도 12는 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 제1 데이터를 프리 청크 중 적어도 일부에 할당하는 예시를 나타내는 도면이다. 제1 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않는다고 판 단한 뉴럴 프로세싱 시스템은 제1 데이터를 프리 청크에 해당하는 제6 청크 중 일부인 제7 청크 에 할당할 수 있다. 제3 상태는 제2 상태 이후, 제1 데이터에 대한 메모리 할당이 완 료된 상태를 나타낸다. 제2 상태에서 프리 청크였던 제6 청크는 제3 상태에서 할당된 청크인 제7 청크와 프리 청크인 제8 청크로 나뉠 수 있다. 도 13은 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 제2 데이터에 대해 할당 가능한 캐시 청크 가 존재하는지 여부를 판단하는 예시를 나타내는 도면이다. 제4 상태는 메모리 중 제1 청크 내지 제3 청 크(1011, 1012, 1013)가 캐시 청크인 상태를 나타낸다. 제4 상태에서 뉴럴 프로세싱 시스템은 제2 데이 터에 대한 메모리 할당 요청을 수신할 수 있다. 그런 다음, 뉴럴 프로세싱 시스템은 제2 데이터의 크기와 캐시 청크의 크기 사이의 비교에 기초하여, 캐시 청크 중 제2 데이터에 대해 할당 가능한 캐시 청 크가 존재하는지 여부를 판단할 수 있다. 예를 들어, 뉴럴 프로세싱 시스템은 캐시 청크 중 제2 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를 판단할 수 있다. 구체적으로, 뉴럴 프로세싱 시스템은 제2 데이터의 크기와 제1 청크 의 크기가 동일한지 여부를 비교하고, 제2 데이터의 크기와 제2 청크의 크기가 동일한지 여 부를 비교할 수 있다. 도 13에 도시된 예를 참조하면, 뉴럴 프로세싱 시스템은 제2 청크의 크기가 제2 데이터의 크기와 동일하다고 판단할 수 있다. 즉, 뉴럴 프로세싱 시스템은 제2 데이터에 대해 할 당 가능한 캐시 청크가 존재한다고 판단할 수 있다. 일 실시예에 따르면, 뉴럴 프로세싱 시스템은 데이터에 대해 할당 가능한 캐시 청크가 존재한다고 판단되는 경 우, 데이터의 크기와 캐시 청크의 크기 사이의 비교를 중단할 수 있다. 즉, 제2 청크의 크기가 제2 데이 터의 크기와 동일하다고 판단되는 경우, 뉴럴 프로세싱 시스템은 나머지 캐시 청크인 제3 청크의 크기와 제2 데이터의 크기 사이의 비교 없이, 할당 가능한 캐시 청크 존재 여부 판단 과정을 종료할 수 있다. 도 14는 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 제2 데이터를 제2 청크에 할당하는 예시를 나타내 는 도면이다. 제2 청크의 크기가 제2 데이터의 크기와 동일하다고 판단한 뉴럴 프로세싱 시스템은 제2 데이터를 제2 청크에 할당할 수 있다. 제5 상태는 제4 상태 이후, 제2 데이터 에 대한 메모리 할당이 완료된 상태를 나타낸다. 기계학습 모델에는 중복되는 레이어들이 존재하는 경우 가 많아, 인공지능 응용 프로그램에서 동일한 크기 또는 유사한 크기의 데이터들이 반복적으로 사용된다. 따라 서, 상술한 과정과 유사한 과정에 의해, 제5 상태 이후 나머지 캐시 청크(예를 들어, 제1 청크, 제 3 청크)에도 제2 청크와 같이 캐시 청크와 동일/유사한 크기의 데이터가 할당될 수 있으며, 이에 따라 메모리 단편화 현상이 방지될 수 있다. 상술한 예시에서는, 뉴럴 프로세싱 시스템은 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부를 판단함에 있어서, 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를 판단하고, 동일한 크기 를 가지는 캐시 청크에 데이터를 할당하거나, 동일한 크기를 가지는 캐시 청크가 없는 경우, 프리 청크에 데이 터를 할당하였다. 다만, 이는 일 예시일 뿐이며, 뉴럴 프로세싱 시스템은 데이터의 크기와 동일한 크기를 가진 캐시 청크 뿐만 아니라 데이터의 크기보다 크지만, 데이터의 크기와 유사한 크기를 가진 캐시 청크에 데이터를 할당할 수도 있다. 예를 들어, 뉴럴 프로세싱 시스템은 캐시 청크 중 특정 데이터의 크기가 캐시 청크의 각각과 연관된 미리 정의 된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단함으로써, 특정 데이터에 대해 할당 가능한 캐시 청크 가 존재하는지 여부를 판단할 수 있다. 여기서, 캐시 청크의 각각과 연관된 미리 정의된 범위의 상한은, 캐시 청크의 각각의 크기이고, 캐시 청크의 각각과 연관된 미리 정의된 범위의 하한은, 캐시 청크의 각각의 크기의 미리 정의된 비율(0보다 크고 1보다 작은 실수)일 수 있다. 구체적인 예로, 미리 정의된 비율이 0.8인 경우, 뉴럴 프로세싱 시스템은 캐시 청크 중 특정 데이터의 크기가 캐시 청크의 크기의 0.8 이상이고, 캐시 청크의 크 기 이하인 조건을 만족하는 캐시 청크가 존재하는지 여부를 판단할 수 있다. 위 조건을 만족하는 캐시 청크가 존재하는 경우, 뉴럴 프로세싱 시스템은 해당 청크에 특정 데이터를 할당할 수 있다. 일 실시예에 따르면, 미리 정의된 비율은, 온 칩 메모리에 입력 또는 출력되는 데이터(예를 들어, 입력되는 데 이터로서, input activation, weight 등, 출력되는 데이터로서, output activation 등)의 메모리 포맷(예를 들 어, 메모리 상에 정렬되는 차원의 순서 등) 및 실행/컴파일되는 인공지능 응용 프로그램의 데이터 레이아웃을 고려하여 결정될 수 있다. 예를 들어, 뉴럴 프로세싱 시스템에 의해 실행/컴파일되는 인공지능 응용 프로그램 에 의해 학습/추론되는 기계학습 모델의 제1 레이어의 입력 데이터의 크기가 16*16*64(h*w*c)이고, 제2 레이어 의 입력 데이터의 크기가 7*7*256(h*w*c)이고, 온 칩 메모리의 하드웨어 레이아웃 상 데이터의 w가 항상 짝수임 을 가정하는 경우를 상정할 수 있다. 이 경우, 미리 정의된 비율이 0.875로 결정되면 제1 레이어의 입력 데이 터에 대해 할당되었던 메모리 청크가 제2 레이어의 입력 데이터에 대해 다시 할당될 가능성이 높아질 수 있다.도 15는 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 캐시 청크를 프리 청크로 전환하는 예시를 나타내 는 도면이다. 일 실시예에 따르면, 뉴럴 프로세싱 시스템은 특정 조건 하에서 캐시 청크를 프리 청크로 전환함 으로써, 메모리 사용 공간을 효율적으로 관리할 수 있다. 예를 들어, 뉴럴 프로세싱 시스템은 하나 이상의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐 시 청크로 할당되지 않은 횟수가 제1 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환할 수 있다. 여기 서, 제1 미리 정의된 횟수는 인공지능 응용 프로그램에서 학습/추론되는 기계학습 모델의 구조(예를 들어, 반복 되는 레이어의 수 등), 기계학습 모델에서 사용되는 데이터(구체적 예로, 데이터들의 크기 분포), 온 칩 메모리 의 용량 등에 따라 달라질 수 있다. 예를 들어, ResNet과 같은 컴퓨터 비전 모델에서는 conv2d-batchnorm-relu 레이어가 순차적으로 3번 반복되므로, 제1 미리 정의된 횟수는 3 또는 4로 정의될 수 있다. 다른 예로, T5(Text To Text Transfer Transformer)와 같은 Transformer 계열의 인코더-디코더 구조의 모델에서는 하나의 인코더/디코더 안에 수십 개의 레이어가 존재하므로, 제1 미리 정의된 횟수는 10 이상으로 정의될 수 있다. 추가적으로 또는 대안적으로, 온 칩 메모리 할당 대상인 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않고 특정 데이터에 대해 할당 가능한 프리 청크도 존재하지 않는 경우, 뉴럴 프로세싱 시스템은 캐시 청크 중 적어도 일부를 프리 청크로 전환할 수 있다. 예를 들어, 도 15를 참조하면, 제6 상태는 메모리 중 제1 청크 내지 제3 청크(1501, 1502, 1503) 및 제7 청크가 캐시 청크이고, 제4 청크 내지 제6 청크(1504, 1505, 1506)가 할당된 청크이고, 제8 청크 가 프리 청크인 상태를 나타낼 수 있다. 제6 상태에서, 뉴럴 프로세싱 시스템은 제3 데이터에 대 한 메모리 할당 요청을 수신할 수 있다. 그런 다음, 뉴럴 프로세싱 시스템은 할당 요청을 수신한 제3 데이터 의 크기와 캐시 청크(1501, 1502, 1503, 1507)의 크기 사이의 비교에 기초하여, 캐시 청크(1501, 1502, 1503, 1507) 중 제3 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부를 먼저 판단할 수 있다. 제3 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않는다고 판단되는 경우, 뉴럴 프로세싱 시스템은 제3 데이터에 대해 할당 가능한 프리 청크가 존재하는지 여부를 판단할 수 있다. 일반적으로 연속하는 복수의 프리 청크는 하나의 프리 청크로 간주될 수 있으며, 프리 청크의 크기가 데이터의 크기보다 크거나 같은 경우, 데이터를 프리 청크 중 적어도 일부에 할당 가능하다. 도 15를 참조하면, 프리 청크인 제8 청크의 크기가 제3 데이터의 크기보다 작으므로, 뉴럴 프로세싱 시스템은 제3 데이터에 대해 할당 가능한 프리 청크가 존재하는지 않는다고 판단할 수 있다. 이 경우, 뉴럴 프로세싱 시스템은 캐시 청크(1501, 1502, 1503, 1507) 중 적어도 일부를 프리 청크로 전환할 수 있다. 예를 들어, 뉴럴 프로세싱 시스템은 모든 캐시 청크(1501, 1502, 1503, 1507)를 프리 청크로 전환할 수 있다. 다른 예로, 뉴럴 프로세싱 시스템은 LRU(Least Recently Used), LFU(Least Frequently Used), FIFO(First In First Out), LIFO(Last In First Out), MRU(Most Recently Used), RR(Random Replacement) 등 임의의 캐시 제거 방법에 따라, 캐시 청크(1501, 1502, 1503, 1507) 중 일부를 프리 청크로 전환할 수 있다. 도 16은 본 개시의 일 실시예에 따른 캐시 청크가 복수의 유형의 캐시 청크로 세분화된 예시를 나타내는 도면이 다. 일 실시예에 따르면, 메모리에 포함된 복수의 청크의 각각은 할당된 청크, 캐시 청크 또는 프리 청 크 중 하나로 분류될 수 있으며, 캐시 청크는 다시 복수의 유형으로 세분화될 수 있다. 예를 들어, 캐시 청크는 제1 유형의 캐시 청크 또는 제2 유형의 캐시 청크 중 하나로 분류될 수 있다. 제1 유형의 캐시 청크는 할당 대상 데이터의 크기가 해당 캐시 청크의 데이터의 크기와 동일한 경우에 할 당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크일 수 있다. 또한, 제2 유형의 캐시 청크(163 0)는 할당 대상 데이터의 크기가 해당 캐시 청크와 연관된 미리 정의된 범위를 만족하는 경우에 할당 대상 데이 터가 해당 캐시 청크에 할당되는 유형의 캐시 청크일 수 있다. 일 실시예에 따르면, 할당된 청크의 할당이 해제되어 캐시 청크로 전환되는 경우, 해당 청크가 어떤 유형의 캐 시 청크로 전환될 지는 해당 청크에 할당되었던 데이터의 종류에 따라 결정될 수 있다. 예를 들어, 가중치 데 이터(예를 들어, 커널 데이터)의 크기는 특정 레이어에 대해 고정적으로 결정되어 있으며, 해당 레이어가 반복 됨에 따라, 가까운 미래에 동일한 크기의 가중치 데이터에 대해 메모리 할당 요청이 올 것을 예상할 수 있다. 메모리 사용이 완료된 할당된 청크가 인공지능 응용 프로그램의 가중치 데이터에 대해 할당된 청크인 경우, 뉴 럴 프로세싱 시스템은 해당 청크의 할당을 해제할 때 해당 청크를 제1 유형의 캐시 청크로 전환할 수 있 다. 이와 달리, 입력 데이터 또는 출력 데이터는 메모리 포맷(예를 들어, 메모리 상에 정렬되는 차원의 순서 등)이 고려되어야 할 수 있다. 따라서, 메모리 사용이 완료된 할당된 청크가 인공지능 응용 프로그램의 입력데이터 또는 출력 데이터에 대해 할당된 청크인 경우, 뉴럴 프로세싱 시스템은 해당 청크의 할당을 해제하고 제 2 유형의 캐시 청크로 전환할 수 있다. 도 17은 본 개시의 일 실시예에 따른 캐시 청크가 복수의 레벨의 캐시 청크로 계층화된 예시를 나타내는 도면이 다. 일 실시예에 따르면, 메모리에 포함된 복수의 청크의 각각은 할당된 청크, 캐시 청크 또는 프리 청 크 중 하나로 분류될 수 있으며, 캐시 청크는 복수의 레벨의 캐시 청크로 계층화될 수 있다. 예를 들어, 캐시 청크는 제1 레벨의 캐시 청크 또는 제2 레벨의 캐시 청크 중 하나로 분류될 수 있다. 제1 레벨의 캐시 청크는 할당 대상 데이터의 크기가 해당 캐시 청크의 데이터의 크기와 동일한 경우에 할 당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크일 수 있다. 또한, 제2 레벨의 캐시 청크(173 0)는 할당 대상 데이터의 크기가 해당 캐시 청크와 연관된 미리 정의된 범위를 만족하는 경우에 할당 대상 데이 터가 해당 캐시 청크에 할당되는 유형의 캐시 청크일 수 있다. 이와 같은 예시에서, 뉴럴 프로세싱 시스템은 특정 데이터에 대해 온 칩 메모리를 할당하기 위해, 제1 레벨의 캐시 청크 중 할당 가능한 청크가 존재하는지 여부를 먼저 판단한 뒤, 할당 가능한 제1 레벨의 캐시 청크 가 존재하지 않는 경우에 제2 레벨의 캐시 청크 중 할당 가능한 청크가 존재하는지 여부를 순차적 으로 판단할 수 있다. 예를 들어, 특정 데이터에 대한 온 칩 메모리 할당 과정은 도 19를 참조하여 상세히 후 술된다. 일 실시예에 따르면, 뉴럴 프로세싱 시스템은 일정 조건 하에서 메모리 청크의 레벨을 하위 레벨로 전환할 수 있다. 예를 들어, 뉴럴 프로세싱 시스템은 할당된 청크의 할당 해제 시 해당 청크를 제1 레벨의 캐시 청 크로 전환할 수 있다. 또한, 뉴럴 프로세싱 시스템은 제1 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가 제2 미리 정의된 횟수(도시된 예에서, N번, N은 자연수) 이상인 캐시 청크를 제2 레벨의 캐시 청크로 전환할 수 있다. 또한, 뉴럴 프로세싱 시스템은 제 2 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가 제3 미리 정의된 횟수(도시된 예에서, M번, M은 자연수) 이상인 캐시 청크를 프리 청크로 전환할 수 있다. 도 18은 본 개시의 일 실시예에 따른 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법의 예시를 나타내는 흐름도이다. 방법은 적어도 하나의 프로세서에 의해 수행될 수 있다. 예를 들어, 도 1의 호스트 시스템 (HS)의 적어도 하나의 프로세서, 도 3의 커맨드 프로세서, 도 5의 CPU, 도 6의 태스크 매니저, 도 6의 코어 글로벌, 도 7의 백엔드 컴파일러 등에 의해 본 방법이 수행될 수 있다. 일 실시예에 따르면, 방법은 인공지능 응용 프로그램이 실행 또는 컴파일되는 도중에 수행될 수 있다. 구체적 예로, 본 방법은 인공지능 응용 프로그램이 호스트 시스템(HS)의 적어도 하나의 프로세서(예를 들 어, 백엔드 컴파일러)에 의해 컴파일되는 과정에서 수행될 수 있다. 이 경우, 컴파일 결과에 본 방법에 의한 메모리 할당 내용이 포함될 수 있으며, 이후, 컴파일 결과를 이용하여 인공지능 응용 프로그램이 실행될 수 있다. 다른 구체적 예로, 본 방법은 인공지능 응용 프로그램이 뉴럴 프로세싱 장치의 적어도 하나의 프로세서 (예를 들어, 커맨드 프로세서, 태스크 매니저, 코어 글로벌 등)에 의해 실행되는 과정에서 수 행될 수 있다. 이 경우, 본 방법에 따라 메모리 할당을 관리하는 주체는 온 칩 메모리의 계층적 위치에 따라 달라질 수 있다. 예를 들어, 메모리 할당 대상이 되는 온 칩 메모리가 SoC 레벨의 공유 메모리인 경우, 동일한 SoC 레벨의 커맨드 프로세서가 본 방법에 따라 공유 메모리의 할당을 관리할 수 있다. 다른 예로, 메모리 할당 대상이 되는 온 칩 메모리가 프로세서 레벨의 L1 공유 메모리인 경우, 동일한 프로세서 레벨의 태스크 매니저 또는 코어 글로벌이 본 방법에 따라 L1 공유 메모리 의 할당을 관리할 수 있다. 즉, 온 칩 메모리와 동일한 계층에 위치하는 프로세서가 본 방법에 따 라 온 칩 메모리의 할당을 관리할 수 있다. 뉴럴 프로세싱 유닛의 온 칩 메모리는 뉴럴 프로세싱 유닛과 동일한 칩에 위치하도록 구성된 메모리일 수 있다. 또한, 뉴럴 프로세싱 유닛의 온 칩 메모리는 복수의 청크를 포함할 수 있고, 복수의 청크는 해당 메모리 청크가 임의의 데이터에 대해 할당된 상태임을 나타내는 할당된 청크, 해당 메모리 청크가 임의의 데이터에 대해 할당 되었다가 해제된 상태이나 프리 청크로 전환되기 전의 보류 상태임을 나타내는 캐시 청크 또는 해당 메모리 청 크가 임의의 데이터에 대해 할당되지 않은 상태이며 캐시 청크가 아닌 청크임을 나타내는 프리 청크 중 하나로 분류될 수 있다.방법은 프로세서가 온 칩 메모리 영역 중 메모리 사용이 완료된, 할당된 청크의 할당을 해제하고 캐시 청 크로 전환함으로써 개시될 수 있다(S1810). 프로세서는 특정 데이터에 대한 온 칩 메모리 할당 요청을 수신할 수 있다(S1820). 그런 다음, 프로세서는 특 정 데이터를 온 칩 메모리 중 적어도 일부 영역에 할당할 수 있다. 할당 과정(P)과 관련하여, 프로세서는 먼저 특정 데이터의 크기와 하나 이상의 캐시 청크의 크기 사이의 비교에 기초하여, 하나 이상의 캐시 청크 중 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하는지 여부를 판단할 수 있다(S1830). 판단 결과, 특정 데이터에 대해 할당 가능한 캐시 청크가 존재한다고 판단되는 경우, 프로세 서는 특정 데이터를 하나 이상의 캐시 청크 중 특정 캐시 청크에 할당할 수 있다(S1840). 이와 달리, 특정 데 이터에 대해 할당 가능한 캐시 청크가 존재하지 않는다고 판단되는 경우, 프로세서는 특정 데이터를 프리 청크 중 적어도 일부에 할당할 수 있다(S1850). 할당 과정(P)에 대한 일 예시로, 프로세서는 하나 이상의 캐시 청크 중 특정 데이터의 크기와 동일한 크기를 가 진 캐시 청크가 존재하는지 여부를 판단할 수 있다. 판단 결과, 하나 이상의 캐시 청크 중 특정 캐시 청크의 크기가 특정 데이터의 크기와 동일하다고 판단되는 경우, 프로세서는 특정 데이터를 특정 캐시 청크에 할당할 수 있다. 이와 달리, 특정 데이터의 크기와 일치하는 캐시 청크가 존재하지 않는다고 판단되는 경우, 프로세서 는 특정 데이터를 프리 청크 중 적어도 일부에 할당할 수 있다. 할당 과정(P)에 대한 다른 예로, 프로세서는 하나 이상의 캐시 청크 중 특정 데이터의 크기가 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단할 수 있다. 여기서, 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 상한은, 하나 이상의 캐시 청크의 각각의 크기이고, 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위의 하한은, 하나 이상의 캐시 청크의 각각 의 크기의 미리 정의된 비율(0보다 크고 1보다 작은 실수)일 수 있다. 일 실시예에 따르면, 미리 정의된 비율 은, 온 칩 메모리에 입력 또는 출력되는 데이터의 메모리 포맷과, 적어도 하나의 프로세서에 의해 실행 또는 컴 파일되는 인공지능 응용 프로그램에 포함된 데이터 레이아웃에 기초하여 결정될 수 있다. 특정 데이터의 크기가 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재 하는지 여부에 대한 판단 결과, 특정 데이터의 크기가 특정 캐시 청크와 연관된 미리 정의된 범위를 만족한다고 판단되는 경우, 프로세서는 특정 데이터를 특정 캐시 청크에 할당할 수 있다. 이와 달리, 특정 데이터의 크기 가 하나 이상의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하지 않는다고 판단되는 경우, 프로세서는 특정 데이터를 프리 청크 중 적어도 일부에 할당할 수 있다. 일 실시예에 따르면, 캐시 청크는 다시 복수의 유형으로 세분화될 수 있다. 예를 들어, 캐시 청크는 제1 유형 의 캐시 청크 또는 제2 유형의 캐시 청크 중 하나로 분류될 수 있다. 여기서, 제1 유형의 캐시 청크는 할당 대 상 데이터의 크기가 해당 캐시 청크의 데이터의 크기와 동일한 경우에 할당 대상 데이터가 해당 캐시 청크에 할 당되는 유형의 캐시 청크일 수 있다. 또한, 제2 유형의 캐시 청크는 할당 대상 데이터의 크기가 해당 캐시 청 크와 연관된 미리 정의된 범위를 만족하는 경우에 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크일 수 있다. 일 실시예에 따르면, 할당된 청크의 할당이 해제되어 캐시 청크로 전환되는 경우, 해당 청크가 어떤 유형의 캐 시 청크로 전환될 지는 해당 청크에 할당되었던 데이터의 종류에 따라 결정될 수 있다. 예를 들어, 메모리 사 용이 완료된 할당된 청크가 인공지능 응용 프로그램의 가중치 데이터에 대해 할당된 청크인 경우, 프로세서는 해당 청크의 할당을 해제하고 제1 유형의 캐시 청크로 전환할 수 있다. 이와 달리, 메모리 사용이 완료된 할당 된 청크가 인공지능 응용 프로그램의 입력 데이터 또는 출력 데이터에 대해 할당된 청크인 경우, 프로세서는 해 당 청크의 할당을 해제하고 제2 유형의 캐시 청크로 전환할 수 있다. 추가적으로 또는 대안적으로, 캐시 청크는 복수의 레벨의 캐시 청크로 계층화될 수 있다. 이와 관련하여서는 도 19를 참조하여 보다 구체적으로 후술된다. 일 실시예에 따르면, 프로세서는 특정 조건 하에 캐시 청크를 프리 청크로 전환할 수 있다. 예를 들어, 프로세 서는 하나 이상의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수 가 제1 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환할 수 있다. 추가적으로 또는 대안적으로, 온 칩 메모리 할당 대상인 특정 데이터에 대해 할당 가능한 캐시 청크가 존재하지 않고 특정 데이터에 대해 할당 가능한 프리 청크도 존재하지 않는 경우, 프로세서는 캐시 청크 중 적어도 일부를 프리 청크로 전환할 수 있다.도 19는 본 개시의 일 실시예에 따른 할당 과정(P)의 예시를 나타내는 흐름도이다. 본 개시의 일 실시예에 따 르면, 캐시 청크는 복수의 레벨의 캐시 청크로 계층화될 수 있다. 예를 들어, 캐시 청크는 제1 레벨의 캐시 청 크 또는 제2 레벨의 캐시 청크 중 하나로 분류될 수 있다. 제1 레벨의 캐시 청크는 할당 대상 데이터의 크기가 해당 캐시 청크의 데이터의 크기와 동일한 경우에 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크일 수 있다. 또한, 제2 레벨의 캐시 청크는 할당 대상 데이터의 크기가 해당 캐시 청크와 연관된 미리 정 의된 범위를 만족하는 경우에 할당 대상 데이터가 해당 캐시 청크에 할당되는 유형의 캐시 청크일 수 있다. 이와 같은 예시에서, 프로세서는 특정 데이터에 대해 온 칩 메모리를 할당하기 위해, 제1 레벨의 캐시 청크 중 할당 가능한 청크가 존재하는지 여부를 먼저 판단한 뒤, 할당 가능한 제1 레벨의 캐시 청크가 존재하지 않는 경 우에 제2 레벨의 캐시 청크 중 할당 가능한 청크가 존재하는지 여부를 순차적으로 판단할 수 있다. 예를 들어, 특정 데이터에 대한 온 칩 메모리 할당 과정은 다음과 같이 수행될 수 있다. 먼저, 프로세서는 제1 레벨의 캐시 청크 중 특정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하는지 여부를 판단할 수 있다(S1910). 단계 S1910의 판단 결과, 제1 레벨의 캐시 청크 중 특정 데이터의 크기와 동일 한 크기를 가진 캐시 청크가 존재한다고 판단되는 경우, 프로세서는 특정 데이터를 특정 데이터의 크기와 동일 한 크기를 가진 제1 레벨의 특정 캐시 청크에 할당할 수 있다(S1920). 이와 달리, 제1 레벨의 캐시 청크 중 특 정 데이터의 크기와 동일한 크기를 가진 캐시 청크가 존재하지 않는다고 판단되는 경우, 프로세서는 제2 레벨의 캐시 청크 중 특정 데이터의 크기가 제2 레벨의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하는지 여부를 판단할 수 있다(S1930). 단계 S1930의 판단 결과, 제2 레벨의 캐시 청크 중 특정 데이터의 크기가 제2 레벨의 특정 캐시 청크와 연관된 미리 정의된 범위를 만족한다고 판단되는 경우, 프로세서는 특정 데이터를 제2 레벨의 특정 캐시 청크에 할당할 수 있다(S1940). 이와 달리, 제2 레벨의 캐시 청크 중 특정 데이터의 크기가 제2 레벨의 캐시 청크의 각각과 연관된 미리 정의된 범위를 만족하는 캐시 청크가 존재하지 않는다고 판단되는 경우, 프로세서는 특정 데이터를 프리 청크 중 적어도 일부에 할당할 수 있다(S1950). 일 실시예에 따르면, 프로세서는 일정 횟수 이상 크기 비교 후 미할당된 캐시 청크의 레벨을 하위 레벨로 전환 할 수 있다. 예를 들어, 프로세서는 제1 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐 시 청크로 할당되지 않은 횟수가 제2 미리 정의된 횟수 이상인 캐시 청크를 제2 레벨의 캐시 청크로 전환할 수 있다. 또한, 프로세서는 제2 레벨의 캐시 청크 중 임의의 데이터와 크기 비교 후 데이터가 해당 캐시 청크로 할당되지 않은 횟수가 제3 미리 정의된 횟수 이상인 캐시 청크를 프리 청크로 전환할 수 있다. 상술한 방법은 컴퓨터에서 실행하기 위해 컴퓨터 판독 가능한 기록매체에 저장된 컴퓨터 프로그램으로 제공될 수 있다. 매체는 컴퓨터로 실행 가능한 프로그램을 계속 저장하거나, 실행 또는 다운로드를 위해 임시 저장하 는 것일수도 있다. 또한, 매체는 단일 또는 수개 하드웨어가 결합된 형태의 다양한 기록 수단 또는 저장수단일 수 있는데, 어떤 컴퓨터 시스템에 직접 접속되는 매체에 한정되지 않고, 네트워크 상에 분산 존재하는 것일 수 도 있다. 매체의 예시로는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD-ROM 및 DVD 와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto optical medium), 및 ROM, RAM, 플래시 메모리 등을 포함하여 프로그램 명령어가 저장되도록 구성된 것이 있을 수 있다. 또한, 다른 매체 의 예시로, 애플리케이션을 유통하는 앱 스토어나 기타 다양한 소프트웨어를 공급 내지 유통하는 사이트, 서버 등에서 관리하는 기록매체 내지 저장매체도 들 수 있다. 본 개시의 방법, 동작 또는 기법들은 다양한 수단에 의해 구현될 수도 있다. 예를 들어, 이러한 기법들은 하드 웨어, 펌웨어, 소프트웨어, 또는 이들의 조합으로 구현될 수도 있다. 본원의 개시와 연계하여 설명된 다양한 예시적인 논리적 블록들, 모듈들, 회로들, 및 알고리즘 단계들은 전자 하드웨어, 컴퓨터 소프트웨어, 또는 양자 의 조합들로 구현될 수도 있음을 통상의 기술자들은 이해할 것이다. 하드웨어 및 소프트웨어의 이러한 상호 대 체를 명확하게 설명하기 위해, 다양한 예시적인 구성요소들, 블록들, 모듈들, 회로들, 및 단계들이 그들의 기능 적 관점에서 일반적으로 위에서 설명되었다. 그러한 기능이 하드웨어로서 구현되는지 또는 소프트웨어로서 구 현되는 지의 여부는, 특정 애플리케이션 및 전체 시스템에 부과되는 설계 요구사항들에 따라 달라진다. 통상의 기술자들은 각각의 특정 애플리케이션을 위해 다양한 방식들로 설명된 기능을 구현할 수도 있으나, 그러한 구현 들은 본 개시의 범위로부터 벗어나게 하는 것으로 해석되어서는 안된다. 하드웨어 구현에서, 기법들을 수행하는 데 이용되는 프로세싱 유닛들은, 하나 이상의 ASIC들, DSP들, 디지털 신 호 프로세싱 디바이스들(digital signal processing devices; DSPD들), 프로그램가능 논리 디바이스들 (programmable logic devices; PLD들), 필드 프로그램가능 게이트 어레이들(field programmable gate arrays;FPGA들), 프로세서들, 제어기들, 마이크로제어기들, 마이크로프로세서들, 전자 디바이스들, 본 개시에 설명된 기능들을 수행하도록 설계된 다른 전자 유닛들, 컴퓨터, 또는 이들의 조합 내에서 구현될 수도 있다. 따라서, 본 개시와 연계하여 설명된 다양한 예시적인 논리 블록들, 모듈들, 및 회로들은 범용 프로세서, DSP, ASIC, FPGA나 다른 프로그램 가능 논리 디바이스, 이산 게이트나 트랜지스터 로직, 이산 하드웨어 컴포넌트들, 또는 본원에 설명된 기능들을 수행하도록 설계된 것들의 임의의 조합으로 구현되거나 수행될 수도 있다. 범용 프로세서는 마이크로프로세서일 수도 있지만, 대안으로, 프로세서는 임의의 종래의 프로세서, 제어기, 마이크로 제어기, 또는 상태 머신일 수도 있다. 프로세서는 또한, 컴퓨팅 디바이스들의 조합, 예를 들면, DSP와 마이크 로프로세서, 복수의 마이크로프로세서들, DSP 코어와 연계한 하나 이상의 마이크로프로세서들, 또는 임의의 다 른 구성의 조합으로서 구현될 수도 있다. 펌웨어 및/또는 소프트웨어 구현에 있어서, 기법들은 랜덤 액세스 메모리(random access memory; RAM), 판독 전 용 메모리(read-only memory; ROM), 비휘발성 RAM(non-volatile random access memory; NVRAM), PROM(programmable read-only memory), EPROM(erasable programmable read-only memory), EEPROM(electrically erasable PROM), 플래시 메모리, 컴팩트 디스크(compact disc; CD), 자기 또는 광학 데이 터 스토리지 디바이스 등과 같은 컴퓨터 판독가능 매체 상에 저장된 명령들로서 구현될 수도 있다. 명령들은 하나 이상의 프로세서들에 의해 실행 가능할 수도 있고, 프로세서(들)로 하여금 본 개시에 설명된 기능의 특정 양태들을 수행하게 할 수도 있다. 소프트웨어로 구현되는 경우, 상기 기법들은 하나 이상의 명령들 또는 코드로서 컴퓨터 판독 가능한 매체 상에 저장되거나 또는 컴퓨터 판독 가능한 매체를 통해 전송될 수도 있다. 컴퓨터 판독가능 매체들은 한 장소에서 다른 장소로 컴퓨터 프로그램의 전송을 용이하게 하는 임의의 매체를 포함하여 컴퓨터 저장 매체들 및 통신 매 체들 양자를 포함한다. 저장 매체들은 컴퓨터에 의해 액세스될 수 있는 임의의 이용 가능한 매체들일 수도 있 다. 비제한적인 예로서, 이러한 컴퓨터 판독가능 매체는 RAM, ROM, EEPROM, CD-ROM 또는 다른 광학 디스크 스 토리지, 자기 디스크 스토리지 또는 다른 자기 스토리지 디바이스들, 또는 소망의 프로그램 코드를 명령들 또는 데이터 구조들의 형태로 이송 또는 저장하기 위해 사용될 수 있으며 컴퓨터에 의해 액세스될 수 있는 임의의 다 른 매체를 포함할 수 있다. 또한, 임의의 접속이 컴퓨터 판독가능 매체로 적절히 칭해진다. 예를 들어, 소프트웨어가 동축 케이블, 광섬유 케이블, 연선, 디지털 가입자 회선 (DSL), 또는 적외선, 무선, 및 마이크로파와 같은 무선 기술들을 사용하여 웹사이트, 서버, 또는 다른 원격 소스로부터 전송되면, 동축 케 이블, 광섬유 케이블, 연선, 디지털 가입자 회선, 또는 적외선, 무선, 및 마이크로파와 같은 무선 기술들은 매 체의 정의 내에 포함된다. 본원에서 사용된 디스크(disk) 와 디스크(disc)는, CD, 레이저 디스크, 광 디스크, DVD(digital versatile disc), 플로피디스크, 및 블루레이 디스크를 포함하며, 여기서 디스크들(disks)은 보통 자기적으로 데이터를 재생하고, 반면 디스크들(discs) 은 레이저를 이용하여 광학적으로 데이터를 재생한다. 위의 조합들도 컴퓨터 판독가능 매체들의 범위 내에 포함되어야 한다. 소프트웨어 모듈은, RAM 메모리, 플래시 메모리, ROM 메모리, EPROM 메모리, EEPROM 메모리, 레지스터들, 하드 디스크, 이동식 디스크, CD-ROM, 또는 공지된 임의의 다른 형태의 저장 매체 내에 상주할 수도 있다. 예시적인 저장 매체는, 프로세가 저장 매체로부터 정보를 판독하거나 저장 매체에 정보를 기록할 수 있도록, 프로세서에 연결될 수 있다. 대안으로, 저장 매체는 프로세서에 통합될 수도 있다. 프로세서와 저장 매체는 ASIC 내에 존 재할 수도 있다. ASIC은 유저 단말 내에 존재할 수도 있다. 대안으로, 프로세서와 저장 매체는 유저 단말에서 개별 구성요소들로서 존재할 수도 있다. 이상 설명된 실시예들이 하나 이상의 독립형 컴퓨터 시스템에서 현재 개시된 주제의 양태들을 활용하는 것으로 기술되었으나, 본 개시는 이에 한정되지 않고, 네트워크나 분산 컴퓨팅 환경과 같은 임의의 컴퓨팅 환경과 연계 하여 구현될 수도 있다. 또 나아가, 본 개시에서 주제의 양상들은 복수의 프로세싱 칩들이나 장치들에서 구현 될 수도 있고, 스토리지는 복수의 장치들에 걸쳐 유사하게 영향을 받게 될 수도 있다. 이러한 장치들은 PC들, 네트워크 서버들, 및 휴대용 장치들을 포함할 수도 있다."}
{"patent_id": "10-2023-0037428", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "본 명세서에서는 본 개시가 일부 실시예들과 관련하여 설명되었지만, 본 개시의 발명이 속하는 기술분야의 통상 의 기술자가 이해할 수 있는 본 개시의 범위를 벗어나지 않는 범위에서 다양한 변형 및 변경이 이루어질 수 있 다. 또한, 그러한 변형 및 변경은 본 명세서에 첨부된 특허청구의 범위 내에 속하는 것으로 생각되어야 한다.부호의 설명 1: 뉴럴 프로세싱 장치"}
{"patent_id": "10-2023-0037428", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 개시의 실시예들은, 이하 설명하는 첨부 도면들을 참조하여 설명될 것이며, 여기서 유사한 참조 번호는 유사 한 요소들을 나타내지만, 이에 한정되지는 않는다. 도 1은 본 개시의 일 실시예에 따른 뉴럴 프로세싱 시스템을 설명하기 위한 블록도이다. 도 2는 도 1의 뉴럴 프로세싱 장치를 세부적으로 설명하기 위한 블록도이다. 도 3은 도 2의 뉴럴 코어 SoC를 세부적으로 설명하기 위한 블록도이다. 도 4는 도 3의 글로벌 인터커넥션을 세부적으로 설명하기 위한 구조도이다. 도 5는 도 1의 뉴럴 프로세싱 장치의 제어 신호의 흐름을 설명하기 위한 블록도이다. 도 6은 도 3의 뉴럴 프로세서를 세부적으로 설명하기 위한 블록도이다. 도 7은 본 발명의 몇몇 실시예들에 따른 뉴럴 프로세싱 장치의 소프트웨어 계층 구조를 설명하기 위한 블록도이 다. 도 8은 프로세싱 유닛에 의해 실행되는 딥러닝 작업의 신경망 네트워크의 구조를 설명하기 위한 개념도이다. 도 9는 메모리 단편화 현상을 설명하기 위한 도면이다. 도 10은 본 개시의 일 실시예에 따른 할당된 청크가 캐시 청크로 전환되는 예시를 나타내는 도면이다. 도 11은 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 제1 데이터에 대해 할당 가능한 캐시 청크가 존재 하는지 여부를 판단하는 예시를 나타내는 도면이다. 도 12는 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 제1 데이터를 프리 청크 중 적어도 일부에 할당하 는 예시를 나타내는 도면이다. 도 13은 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 제2 데이터에 대해 할당 가능한 캐시 청크가 존재 하는지 여부를 판단하는 예시를 나타내는 도면이다. 도 14는 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 제2 데이터를 제2 청크에 할당하는 예시를 나타내 는 도면이다. 도 15는 본 개시의 일 실시예에 따라 뉴럴 프로세싱 시스템이 캐시 청크를 프리 청크로 전환하는 예시를 나타내 는 도면이다. 도 16은 본 개시의 일 실시예에 따른 캐시 청크가 복수의 유형의 캐시 청크로 세분화된 예시를 나타내는 도면이 다. 도 17은 본 개시의 일 실시예에 따른 캐시 청크가 복수의 레벨의 캐시 청크로 계층화된 예시를 나타내는 도면이 다. 도 18은 본 개시의 일 실시예에 따른 뉴럴 프로세싱 유닛의 온 칩 메모리 할당 방법의 예시를 나타내는 흐름도 이다. 도 19는 본 개시의 일 실시예에 따른 할당 과정의 예시를 나타내는 흐름도이다."}
