{"patent_id": "10-2016-0007882", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2017-0088451", "출원번호": "10-2016-0007882", "발명의 명칭": "인공 신경망을 이용한 자동 작곡 방법 및 그 기록 매체", "출원인": "한성대학교 산학협력단", "발명자": "정성훈"}}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "인공 신경망을 이용하여 곡을 자동으로 생성하는 방법으로서,상기 인공 신경망이 학습할 곡(이하, '제1 학습곡'이라 칭함)을 구성하는 다수의 음표 및 박자를 숫자 형태로변환하여 시계열 데이터를 생성하는 단계;상기 시계열 데이터를 이용하여 상기 인공 신경망을 학습시키는 단계;상기 인공 신경망이 작곡할 곡의 일부(이하, ‘도입곡’라 칭함)에 해당하는 시계열 데이터를 상기 인공 신경망에 입력하는 단계;상기 인공 신경망이 상기 입력된 도입곡에 이어지는 나머지 곡을 생성하여 신규곡을 출력하는 단계; 및상기 신규곡의 화성을 후처리하는 단계를 포함하고,상기 화성을 후처리하는 단계는,상기 신규곡의 멜로디를 마디별로 구분하여 화성 후보군을 생성하는 제1 단계;각 마디별로 생성된 화성 후보군을 대상으로 특정 코드 조합의 화성 전개가 이루어지도록 각 마디별 화성을 선정하는 제2 단계; 및선정된 화성을 기준으로 상기 신규곡의 멜로디를 수정하는 제3 단계;를 포함하는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "인공 신경망을 이용하여 곡을 자동으로 생성하는 방법으로서,학습되지 않은 상기 인공 신경망이 무작위로 곡을 생성(이하, '신규곡')하거나 또는 무작위로 만든 곡(이하, '신규곡')을 입력받는 단계; 및 상기 신규곡의 화성을 후처리하는 단계를 포함하고,상기 화성을 후처리하는 단계는,상기 신규곡의 멜로디를 마디별로 구분하여 화성 후보군을 생성하는 제1 단계;각 마디별로 생성된 화성 후보군을 대상으로 특정 코드 조합의 화성 전개가 이루어지도록 각 마디별 화성을 선정하는 제2 단계; 및선정된 화성을 기준으로 상기 신규곡의 멜로디를 수정하는 제3 단계;를 포함하는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1 항 또는 제2 항에 있어서,상기 제1 단계는,각 마디에 있는 음을 낮은 음부터 정렬하는 단계;가장 낮은 음부터 차례로 근음으로 지정해서 나머지 음과의 간격을 각각 산출하는 방식을 통해 각 마디별 화음을 결정하는 단계; 및각 마디별로 결정된 화음들을 저장하여 상기 화성 후보군을 생성하는 단계를 포함하고,공개특허 10-2017-0088451-3-상기 제2 단계는,상기 제1 단계에서 생성된 상기 화성 후보군을 대상으로 마디별 근음 차이 비교를 비교하여 상기 특정 코드 조합의 화성 전개와 일치하는 코드가 있는지 검색하는 단계;상기 검색 결과, 일치하는 코드 조합이 있을 경우 이를 저장하여 최종 화성으로 결정하는 단계를 포함하는 것을특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3 항에 있어서,상기 제2 단계에서,상기 검색 결과, 일치하지 않는 코드 조합이 있을 경우 상기 특정 코드 조합을 기준으로 오차 허용 범위를 설정하여, 상기 오차 허용 범위 내의 코드 조합이 있는 경우 이를 저장하고,상기 제3 단계는,상기 오차 허용 범위 내의 코드 조합을 상기 최종 화성으로 수정하는 단계를 포함하는 것을 특징으로 하는 인공신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1 항 또는 제2 항에 있어서,상기 제2 단계의 상기 특정 코드 조합은 머니 코드(Money Chord)인 것을 특징으로 하는 인공 신경망을 이용한자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1 항에 있어서,상기 시계열 데이터를 이용하여 상기 인공 신경망을 학습시키는 단계는,‘첫 번째’부터‘N 번째’까지의 시계열 데이터를 상기 인공 신경망에 입력하여 ‘N+1 번째’ 시계열 데이터를출력함으로써 제1 학습데이터를 생성하는 제1 단계;‘두 번째’부터 상기‘N+1 번째’까지의 시계열 데이터를 상기 인공 신경망에 입력하여 ‘N+2 번째’ 시계열데이터를 출력함으로써 제2 학습데이터를 생성하는 제2 단계;‘세 번째’부터 상기‘N+2 번째' 까지의 시계열 데이터를 상기 인공 신경망에 입력하여 ‘N+3’번째 시계열 데이터를 출력함으로써 제3 학습데이터를 생성하는 제3 단계; 및‘n 번째’부터 ‘N+(n-1)’번째까지의 시계열 데이터를 상기 인공 신경망에 입력하여 ‘N+n’번째 시계열 데이터를 출력함으로써 제n 학습데이터를 생성하는 제n 단계;를 포함하고,상기 각 단계에서 생성되는 학습데이터를 상기 인공 신경망에 가하여 학습시키는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6 항에 있어서,상기 인공 신경망이 상기 각 학습데이터를 학습시, 해당 학습데이터를 구성하는 시계열 데이터에, 곡의 마디를구분하기 위한 정보(이하, ‘마디 구분 정보’라 칭함)를 추가적으로 입력해주는 것을 특징으로 하는 인공 신경공개특허 10-2017-0088451-4-망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7 항에 있어서,상기 마디 구분 정보는 마디별로 상이한 숫자로 표현되는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1 항 또는 제2 항에 있어서,상기 신규곡의 박자(또는 멜로디)를 고도화하는 단계를 더 포함하고,상기 박자(또는 멜로디)를 고도화하는 단계는,마디별 박자(또는 멜로디)에 있어서 수 개의 자주 발생되는 박자 패턴(또는 멜로디 패턴)을 통계낸 후 이를 순위별로 정렬하는 제1' 단계; 상기 제1' 단계를 통해 정렬된 통계 순위 중 상위 N 순위를 선정하는 제2' 단계;및 상기 선정된 N 순위를 이용하여 상기 상위 N 순위에 들지 못한 마디(이하, '보정 대상 마디'라 칭함)를 보정하는 제3' 단계를 포함하고,상기 제3` 단계는,상기 보정 대상 마디에 대하여 상기 N 순위 내의 각 박자 패턴(또는 멜로디 패턴)과의 차이를 계산한 후, 해당보정 대상 마디와 가장 차이가 작은 상기 N 순위 중 어느 하나로 상기 해당 보정 대상 마디를 변경하도록 구성되는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9 항에 있어서,상기 제3' 단계는,상기 모든 보정 대상 마디에 대하여 상기 N 순위 내의 각 박자 패턴(또는 멜로디 패턴)과의 차이를 각각 계산한후, 상기 모든 보정 대상 마디를 한꺼번에 변경하도록 구성되는 것을 특징으로 하는 인공 신경망을 이용한 자동작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9 항에 있어서,상기 제3' 단계는,하나의 보정 대상 마디(이하, '제1 보정 대상 마디'라 칭함)에 대하여 상기 N 순위 내의 각 박자 패턴(또는 멜로디 패턴)과의 차이를 계산하여 상기 제1 보정 대상 마디를 변경하는 단계; 및보정된 상기 제1 보정 대상 마디를 포함하여 상기 제1' 단계 및 상기 제2' 단계를 재수행함으로써, 또 다른 하나의 보정 대상 마디에 대하여 상기 보정을 수행하도록 구성되는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제9 항에 있어서,공개특허 10-2017-0088451-5-상기 '차이를 계산하는 것'은 박자 또는 음표가 숫자로 표현되는 시계열 데이터에서 마디별 숫자 개수 또는 숫자 값의 유사도를 이용하여 수행하도록 구성되는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1 항에 있어서,상기 시계열 데이터를 생성하는 단계는, 상기 제1 학습곡 외에 또 다른 적어도 하나의 학습곡을 구성하는 다수의 음표 및 박자를 숫자 형태로 변환하여 시계열 데이터를 생성하고,상기 시계열 데이터를 이용하여 상기 인공 신경망을 학습시키는 단계는, 상기 제1 학습곡에 대한 시계열 데이터및 상기 또 다른 적어도 하나의 학습곡에 대한 시계열 데이터를 이용하여 상기 인공 신경망을 학습시키는 것을특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13 항에 있어서,상기 인공 신경망을 학습시키는 단계는,상기 제1 학습곡을 100%로 학습시킨 후 상기 또 다른 적어도 하나의 학습곡은 일부만 학습시키거나, 상기 제1학습곡과 상기 또 다른 적어도 하나의 학습곡을 1 에폭(epoch)씩 번갈아가며 학습시키거나, 상기 제1 학습곡과상기 또 다른 적어도 하나의 학습곡 중 어느 하나의 학습곡에 더 많은 비율을 부여하여 번갈아가며 학습시키거나, 또는 상기 제1 학습곡과 상기 또 다른 적어도 하나의 학습곡을 마디별로 나눠서 번갈아가면서 학습시키는것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제1 항 또는 제2 항에 있어서,상기 신규곡의 갖춘마디 대비 박자가 초과하는 마디(이하, '초과마디')를 갖춘마디로 보정하는 박자 후처리 단계를 더 포함하고,상기 박자 후처리 단계는,상기 초과마디를 구성하는 각 박자들 중 가장 작은 박자(이하, '제1a 박자)에서, 상기 갖춘마디 대비 상기 초과마디가 초과하는 박자(이하, 'd')만큼을 빼는 제1 처리 단계;상기 인공 신경망이 곡을 작곡시 사용 가능한 박자들로 지정된 박자 그룹(이하, '사용 박자 그룹') 내에, 상기제1 처리 단계에서 상기 'd'만큼 뺀 박자('제1a 박자 - d' 박자)가 존재하는지 여부를 판별하는 제2 처리 단계;상기 제2 처리 단계의 판별 결과, 존재하면 상기 초과마디에 대한 박자 후처리를 완료하고, 존재하지 않으면 상기 제1a 박자 대비 그 다음 작은 박자(이하, '제2a 박자')에서 상기 'd'만큼을 빼는 제3 처리 단계; 및상기 제3 처리 단계에서 상기 'd'만큼 뺀 박자('제2a 박자 - d' 박자)가 상기 사용 박자 그룹 내에 존재하는지여부를 판별하는 제4 처리 단계; 및상기 제4 처리 단계의 판별 결과, 존재하면 상기 초과마디에 대한 박자 후처리를 완료하는 제5 처리 단계;를 포함하는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15 항에 있어서,상기 초과마디를 구성하는 모든 박자에 대하여 각각 상기 'd'만큼을 뺀 후 해당 각 박자가 상기 사용 박자 그룹공개특허 10-2017-0088451-6-내에 존재하는지 여부를 판별한 결과, 상기 'd'만큼 뺀 박자 모두가 상기 사용 박자 그룹에 존재하지 않으면,상기 사용 박자 그룹 내에서 박자를 선택하여, 상기 초과마디를 구성하는 각 박자들의 크기 순서를 유지하면서상기 갖춘마디를 만드는 박자 조합을 생성하는 박자 후처리 완료 단계를 더 포함하는 것을 특징으로 하는 인공신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제1 항 또는 제2 항에 있어서,상기 신규곡의 갖춘마디 대비 박자가 초과하는 마디(이하, '초과마디')를 갖춘마디로 보정하는 박자 후처리 단계를 더 포함하고,상기 박자 후처리 단계는,상기 초과마디를 구성하는 각 박자들 중 마지막 박자를 제외 처리하는 제1 처리 단계;상기 제1 처리 단계 후 가장 큰 박자(제1b 박자)에서, 상기 제1 처리 단계로 인해 발생하는 '상기 갖춘마디 대비 부족한 박자(이하, 'n')'만큼을 더하는 제2 처리 단계;상기 인공 신경망이 곡을 작곡시 사용 가능한 박자들로 지정된 박자 그룹(이하, '사용 박자 그룹') 내에, 상기제2 처리 단계에서 상기 'n'만큼 더한 박자('제1b 박자 + n' 박자)가 존재하는지 여부를 판별하는 제3 처리 단계;상기 제3 처리 단계의 판별 결과, 존재하면 상기 초과마디에 대한 박자 후처리를 완료하고, 존재하지 않으면 상기 제1b 박자 대비 그 다음 큰 박자(이하, '제2b 박자')에서 상기 'n'만큼을 더하는 제4 처리 단계; 및상기 사용 박자 그룹 내에, 상기 제4 처리 단계에서 상기 'n'만큼 더한 박자('제2b 박자 + n' 박자)가 존재하는지 여부를 판별하는 제5 처리 단계; 및상기 제5 처리 단계의 판별 결과, 존재하면 상기 초과마디에 대한 박자 후처리를 완료하는 제6 처리 단계;를 포함하는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17 항에 있어서,상기 초과마디를 구성하는 박자들 중 마지막 박자를 제외한 나머지 모든 박자에 대하여 각각 상기 'n'만큼을 더한 후 해당 각 박자가 상기 사용 박자 그룹에 존재하는지 여부를 판별한 결과, 상기 'n'만큼 더한 박자 모두가상기 사용 박자 그룹에 존재하지 않으면,상기 사용 박자 그룹 내에서 박자를 선택하여, 상기 초과마디의 상기 마지막 박자를 제외한 나머지 박자들의 크기 순서를 유지하면서 상기 갖춘마디를 만드는 박자 조합을 생성하는 박자 후처리 완료 단계를 더 포함하는 것을 특징으로 하는 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제1 항에 있어서,상기 숫자 형태로 변환되는 상기 다수의 음표 및 박자는 각각 상이한 숫자로 표현되는 것을 특징으로 하는 인공신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제1 항에 있어서,공개특허 10-2017-0088451-7-상기 시계열 데이터는 숫자 형태로 변환된 쉼표를 더 포함하고,상기 쉼표는 상기 음표를 표현하는 숫자들과 중복되지 않는 숫자로 변환되는 것을 특징으로 하는 인공 신경망을이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제1 항에 있어서,상기 시계열 데이터는, 상기 음표를 숫자 형태로 변환한 음표 시계열 데이터와, 상기 박자를 숫자 형태로 변환한 박자 시계열 데이터로 구분되고,상기 음표 시계열 데이터는 제1 인공 신경망에 학습시키고, 상기 박자 시계열 데이터는 상기 제1 인공 신경망과구분되는 제2 인공 신경망에 학습시키도록 구성되는 것을 특징으로 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제1 항에 있어서,상기 인공 신경망은 하나의 출력을 갖는 앞먹임 신경망(FNN: Feedforward Neural Network)으로 구성되는 것을특징으로 인공 신경망을 이용한 자동 작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제1 항에 있어서,상기 도입곡은 상기 인공 신경망이 작곡할 곡의 시작 멜로디인 것을 특징으로 하는 인공 신경망을 이용한 자동작곡 방법."}
{"patent_id": "10-2016-0007882", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "전기 전자 장치에,제1 항 내지 제23 항 중에서 선택된 어느 하나의 방법을 실행시키기 위한 프로그램을 기록한 전기 전자 장치로읽을 수 있는 매체."}
{"patent_id": "10-2016-0007882", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 인공 신경망을 이용하여 곡 전체를 자동 생성할 수 있고, 더 나아가 실제 작곡가 수준의 작곡 결과를 출력할 수 있는 인공 신경망을 이용한 자동 작곡 방법 및 그 기록 매체에 관한 것이다. 본 발명에 따른 인공 신경망을 이용한 자동 작곡 방법은, 인공 신경망이 학습할 곡을 구성하는 다수의 음표 및 (뒷면에 계속)"}
{"patent_id": "10-2016-0007882", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 자동 작곡 방법에 관한 것으로서, 보다 상세하게는 인공 신경망을 이용하여 곡을 학습하고, 학습된 신경망에 초기 멜로디를 새로 넣어주면 새로운 곡을 자동 생성할 수 있는 인공 신경망을 이용한 자동 작곡 방법 및 그 기록 매체에 관한 것이다."}
{"patent_id": "10-2016-0007882", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "컴퓨터를 이용하여 자동으로 작곡을 하려는 시도는 비교적 오래전부터 있어왔다. 이러한 연구는 알고리즘 작곡 이라고 분류되어왔으며 작곡이라는 목적에서 알 수 있듯이 주로 대부분 인공 지능 분야에서 개발된 방법들이 사 용되어왔다. 첫 번째 방법으로, 자동작곡을 수행하는 알고리즘을 만든 것으로 문법에 기반 한 것, 규칙에 기반 한 것, 사례 에 기반 한 것 등이 있다. 문법에 기반 한 것은 언어에서 문법을 통하여 글을 만드는 것을 모사하여 이를 작곡 에 응용한 것이다. 규칙에 기반 한 것은 멜로디를 생성하는 규칙을 만들어 이를 기반으로 곡을 만드는 것이다.사례에 기반 한 것은 기존 곡을 소절별로 데이터베이스화 하고 작곡 시 기존 곡에서 소절을 이용하여 작곡하는 것이다. 두 번째 방법으로, 최적화 기법에 의한 것이 있다. 작곡에 주로 사용된 최적화 기법은 진화알고리즘 (Evolutionary Algorithms)으로서 집단개체를 진화시켜서 최적화시키는 방법이다. 특히 개체를 트리로 표현하는 유전프로그램(Genetic Programming)은 곡의 음에서 마디로, 마디에서 음절로 계층적으로 구성되기 때문에 작곡 에서 매우 유용한 기법이다. 그러나 최적화 방법에 있어서 가장 큰 문제점은 개체를 평가하는 방법이 어렵다는 것이다. 개체로 표현된 짧은 곡이 얼마나 음악적으로 적합한지를 제대로 평가해야 진화가 일어나서 점점 더 좋 은 곡이 표현된다. 그러나 컴퓨터가 스스로 곡을 평가하는 것은 상당히 어려운 일이다. 그래서 보통 사람이 각 개체를 평가하는 방 법을 많이 사용하지만 매우 많은 개체를 수십에서 수백세대에 걸쳐 모두 평가하는 것은 사람에게도 매우 지루하 고 힘든 작업이 된다. 또한 곡에 대한 평가는 매우 주관적이어서 일관된 잣대를 제시하기도 어렵다. 이러한 적 합도 평가의 어려움을 어느 정도 완화하기 위하여 곡에 대한 평가를 인공신경망의 학습 기능을 통하여 수행하는 연구도 있다. 그러나 학습된 인공신경망의 곡에 대한 평가가 제대로 수행되는 것을 보장하기는 매우 어렵다. 세 번째 방법으로, 기계학습에 의한 것이 있다. 기계학습은 컴퓨터가 스스로 주어진 데이터를 학습하는 것으로 서 대표적인 것으로 인공 신경망이 있다. 인공신경망은 주어진 데이터를 학습하고 학습된 데이터와 같거나 유사 한 데이터를 출력할 수 있다. 인공신경망을 이용한 방법은 기존의 곡을 학습하여 곡을 출력하기 때문에 비교적 작곡가가 작곡한 곡과 유사한 느낌을 갖는 곡을 출력한다. 그러나 곡에는 반복되는 부분이 많기 때문에 곡을 학습하기 어렵고 매우 오랜 시간 이 소요된다. 또한 하나의 곡을 학습하고 출력하는 방법은 출력되는 곡이 기존의 곡과 너무 유사하다는 문제점 이 있으며 여러 곡을 학습하는 경우에는 어떤 기준으로 어떻게 학습하게 할지를 정하는 것이 어렵다. 기계학습의 또 다른 예로서는 마르코프체인을 사용하는 방법이 있으며, 국내에서는 기계학습 툴의 일종인 하이 퍼 네트워크를 이용하여 작곡을 수행한 예가 있다. 그러나, 이와 같은 종래 방법들은 작곡을 수행하는 과정을 일부 모사하거나 그 가능성을 타진하는 정도의 방법 으로서 실질적으로 작곡가 수준의 자연스런 느낌의 곡을 생성하기에는 부족한 부분이 많다. 또한, 멜로디나 박자의 일부를 생성하는 것만으로 나머지 멜로디, 박자 그리고 화성을 포함한 곡 전체를 자동으 로 생성 및 작곡하는 방법은 거의 없는 실정이다."}
{"patent_id": "10-2016-0007882", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 상기와 같은 문제점을 해결하기 위하여 안출된 것으로서, 본 발명의 목적은 인공 신경망을 이용하여 새로운 멜로디, 박자 및 화성을 포함한 곡 전체를 자동으로 생성할 수 있고, 더 나아가 작곡가들이 많이 사용 하는 화성 진행을 적용해서 보다 실제적인 작곡 결과를 출력할 수 있는 인공 신경망을 이용한 자동 작곡 방법 및 그 기록 매체를 제공하는 것이다. 본 발명의 또 다른 주요 목적은 여러 곡을 학습하여 여러 곡의 느낌이 혼합된 곡을 작곡하는 것과 멜로디 및 박 자를 고도화하여 수준 높은 곡을 생성할 수 있는 인공 신경망을 이용한 자동 작곡 방법 및 그 기록 매체를 제공 하는 것이다. 본 발명은 궁극적으로 기존의 곡을 학습하지 않고도 무작위적인 초기값으로부터 새로운 곡을 만들 수 있는 것을 또 다른 목적으로 한다."}
{"patent_id": "10-2016-0007882", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 목적을 달성하기 위한 본 발명에 따른 인공 신경망을 이용한 자동 작곡 방법은, 인공 신경망이 학습할 곡 (이하, '제1 학습곡'이라 칭함)을 구성하는 다수의 음표 및 박자를 숫자 형태로 변환하여 시계열 데이터를 생성 하는 단계와; 상기 시계열 데이터를 이용하여 상기 인공 신경망을 학습시키는 단계와; 상기 인공 신경망이 작곡할 곡의 일부(이하, ‘도입곡’라 칭함)에 해당하는 시계열 데이터를 상기 인공 신경망에 입력하는 단계; 및 상기 인공 신경망이 상기 입력된 도입곡에 이어지는 나머지 곡을 생성하여 신규곡을 출력하는 단계를 포함한다. 그리고, 본 발명의 인공 신경망을 이용한 자동 작곡 방법은 인공 신경망 학습 수행시, 시계열 데이터를 이용하 여 생성된 다수 개의 학습 데이터를 통해 학습을 수행하고, 학습할 멜로디의 마디 구분 정보를 추가적으로 입 력받아 상기 학습을 진행하도록 구성된다. 그리고, 본 발명의 인공 신경망을 이용한 자동 작곡 방법은 출력된 신규 곡의 박자와 화성을 후처리하는 단계를 포함하는 것을 특징으로 한다. 더 나아가, 본 발명의 인공 신경망을 이용한 자동 작곡 방법은 후처리 완료된 신규 곡의 박자와 멜로디를 고도 화하는 단계를 더 포함하는 것을 또 다른 특징으로 한다."}
{"patent_id": "10-2016-0007882", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 따른 인공 신경망을 이용한 자동 작곡 방법 및 기록 매체에 의하면, 인공 신경망을 이용하여 새로운 멜로디, 박자 및 화성을 포함한 곡 전체를 자동으로 생성할 수 있는 효과가 있다. 또한, 학습 곡의 느낌을 갖고 있으면서도 실제 작곡가 수준의 자연스러운 곡을 만들어 낼 수 있고, 더 나아가 박자나 멜로디를 보다 수준 높게 고도화할 수 있어 대중 음악에서와 같은 반복성을 구현할 수 있으며, 인공 신 경망을 이용하는 종래 방법의 가장 큰 단점인 기존 곡의 느낌을 너무 많이 갖고 있는 문제점도 해결할 수 있는 효과가 있다. 특히, 하나의 곡으로 학습 후 곡을 작곡시에는 생성 곡이 학습 곡과 느낌이 유사하여 추후 표절 문제가 발생할 수 있으나, 본 발명의 다수 곡 학습 방법을 따를 경우, 학습한 곡들과 유사한 멜로디 내지 박자가 거의 나오지 않기 때문에 이러한 표절 문제를 사전에 방지할 수 있는 효과가 있다."}
{"patent_id": "10-2016-0007882", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에서 사용하는 용어는 단지 특정한 실시예를 설명하기 위해 사용된 것으로, 본 발명을 한정하려는 의 도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에 서, \"포함하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 또한, 본 명세서에서, 제1, 제2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 상기 구성요소 들은 상기 용어들에 의해 한정되어서는 안 된다. 상기 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하 는 목적으로만 사용된다. 이하에서, 첨부된 도면을 참조하여 본 발명의 바람직한 실시예, 장점 및 특징에 대하여 상세히 설명하도록 한다. 도 1은 본 발명에 따른 인공 신경망을 이용한 자동 작곡 방법의 처리 흐름을 도시한 블록 순서도이다. 도 1을 참조하면, 본 발명에 따른 인공 신경망을 이용한 자동 작곡 방법은 특정 멜로디의 숫자화 단계(단계 1(S10))와, 시계열 데이터 생성 단계(단계 2(S20))와, 인공 신경망 학습 단계(단계 3(S30))와, 도입부 시계열 데이터 입력 단계(단계 4(S40)), 및 신규 곡 출력 단계(단계 5(S50))를 포함한다. 그리고, 본 발명의 인공 신경망을 이용한 자동 작곡 방법은 상기 단계 3(S30)의 인공 신경망 학습 수행시, 단계 2(S20)의 시계열 데이터를 이용하여 생성된 다수 개의 학습 데이터(S21)를 통해 학습을 수행하고, 학습할 멜로 디의 마디 구분 정보를 추가적으로 입력(S22)받아 상기 학습 단계(S30)를 수행하도록 구성되며, 상기 단계 5(S50)를 통해 출력된 신규 곡의 박자와 화성을 후처리하는 단계(단계 6(S60))를 포함하는 것을 주요 특징으로 한다. 더 나아가, 본 발명의 인공 신경망을 이용한 자동 작곡 방법은 후처리 완료된 신규 곡의 박자와 멜로디를 고도 화하는 단계(단계 7(S70))를 더 포함하는 것을 또 다른 주요 특징으로 한다. 변형 실시예로서, 본 발명의 인공 신경망을 이용한 자동 작곡 방법은 인공신경망의 학습 단계를 생략할 수 있으 며, 상기 경우 특정 멜로디의 숫자화 단계(단계 1(S10))부터 도입부 시계열 데이터 입력 단계(단계 4(S40))까지 를 생략할 수 있다. 즉, 기존의 곡을 신경망에 학습한 후에 신경망에 초기 멜로디를 작곡하여 넣어서 나머지 작곡 부분을 출력하는 대신에 신경망을 학습시키지 않고 초기 멜로디를 무작위로 넣거나 아니면 아예 신경망을 사용하지 않고 바로 무 작위로 멜로디와 박자를 생성하여 'S60' 단계부터 처리하게 하는 방법이다. 이렇게 하면 기존의 곡을 학습하지 않고도 새로운 곡을 만들어낼 수 있다. 다만 이 경우 기존 곡을 학습하지 않기 때문에 보다 정교한 멜로디/박자 후처리와 보다 정교한 멜로디/박자 고도화를 수행해야만 의미있는 결과가 출력된다. 이하에서는 각 단계에 따른 바람직한 실시예를 들어 보다 구체적으로 설명하도록 한다. <단계 1(S10)> 본 발명의 단계 1(S10)은 인공 신경망이 학습할 곡이 선정되면, 해당 곡(이하, '제1 학습곡'이라 칭함)의 멜로 디를 구성하는 다수의 음표 및 박자를 숫자 형태로 변환하는 단계이다. 여기서, 인공 신경망이 학습할 곡이란, 기존에 존재하는 곡으로서 그 장르는 특별한 한정이 없다. 예컨대, 사 용자가 희망하는 자동 작곡된 곡의 멜로디가 가요에 해당하는 'A'곡과 유사한 느낌을 원한다면, 인공 신경망이 학습할 곡은 가요의 'A'곡이 이에 해당할 수 있다. 더 나아가 사용자가 희망하는 자동 작곡된 곡의 멜로디가 여러 곡(예컨대, 가요'A', 팝송 'B')의 느낌이 잘 조합된 느낌을 원한다면 상기 가요'A'와 팝송 'B'가 인공 신 경망이 학습할 곡에 해당할 수 있다. 제1 학습곡의 숫자 형태 변환에 대해 구체적으로 설명하면 다음과 같다. 소정 곡의 멜로디를 인공 신경망에 학 습하기 위하여 제1 학습곡의 멜로디를 구성하는 음표(구체적으로는 음표의 '높이'), 쉼표 및 박자를 각각 숫자 로 표현한다. 먼저, 음표(즉, 음표의 높이)는 전체 1 ~ 7 모든 옥타브에 대하여 숫자로 표현할 수 있으나, 본 발명에서는 일 반적인 음악에서 많이 사용하는 2 ~ 4 옥타브만을 사용하는 것으로 전제한다. 상기 경우, 음표는 한 옥타브에 '도, 도#, 레, 레#, 미, 파, 파#, 솔, 솔#, 라, 라#, 시'의 총 12개가 존재하므로 이를 차례로 '01'부터 '12' 까지의 숫자로 각각 표현할 수 있다. 예컨대, 2 옥타브의 '도'는'01', '도#' '02로, '레'은 '03', '레#'은 '04', '미'는 '05', '파'는 '06', '파#' 은 '07', '솔'은 '08', '솔#'은 '09', '라'는 '10', '라#'은 '11', '시'는 '12'로 표현할 수 있다.본 발명에서는 3 개의 옥타브를 사용하므로 각 옥타브의 음표는 '01'부터 '36'까지의 숫자로 변환할 수 있게 된 다. 한편, 곡에는 음표뿐만 아니라 쉼표도 존재한다. 그러므로 쉼표도 숫자로 표현해 주어야한다. 음표에 쉼표가 있 을 경우에는 음표에서 사용하지 않는 숫자를 사용하여 음표와 쉼표를 구분할 수 있도록 구성된다. 예컨대, 본 발명에서는 '01'부터 '36'까지의 숫자를 이용하여 음표를 표현하도록 구성되는 바, 쉼표는 '36'보다 큰 숫자 예컨대, '37'의 숫자를 사용하여 변환하도록 구성함으로써 음표와 쉼표를 구분할 수 있도록 한다. 따 라서, 인공 신경망은 단계 30의 학습 수행시 '36'보다 큰 숫자의 경우 쉼표로 구분하여 학습을 진행할 수 있게 된다. 다음으로, 박자는 16분 음표를 기준으로 \"1/16, 2/16, 4/16, 8/16, 16/16\" 가 존재하며 이를 정수로 나타내기 위하여 16을 곱한 \"1, 2, 4, 8, 16\"으로 나타낼 수 있다. 반 박자는 점으로 표시하는데 2 박자에 점이 붙으면 \"(2+1)=3박자\"가 되며 4 박자에 점이 붙으면 \"(4+2)=6박자\"가 되고 8 박자에 점이 붙으면 \"(8+4)=12박자\"가 된 다. 점은 두 개까지 붙을 수 있기 때문에 4 박자에 점이 두 개 붙으면 \"(4+2+1)=7박자\"가 되고 8 박자에 점이 두 개 붙으면 \"(8+4+2)= 14박자\"가 된다. 그러나 보통 대중 가요에서는 점이 하나 붙은 반 박자까지만 사용하므 로 보통 \"1, 2, 3, 4, 6, 8, 12, 16\"의 8개의 박자를 사용한다. 이렇게 8개의 박자만 사용할 경우에는 1에서부 터 8까지의 숫자로 각 박자를 나타낼 수 있다. 한편, 본 발명의 시계열 데이터는 서로 상이하게 표현되는 숫자를 통해 음표와 쉼표를 구분할 수 있는 바, 해당 음표 또는 쉼표에 숫자로 표현되는 박자 정보를 더해주면 해당 음표의 음표박자, 해당 쉼표의 쉼표박자 정보를 알 수 있게 된다. 따라서, 음표 박자와 쉼표 박자를 구분하기 위한 또 다른 별도의 숫자가 없어도 무관하다. 그러나, 다음과 같은 방법을 통해 음표 박자와 쉼표 박자를 구분하도록 구성할 수도 있다. 상기 경우, 음표 박 자는 '십'의 자리에 제1 숫자(예컨대, '1')를 추가로 표현하고, 쉼표 박자는 '십'의 자리에 상기 제1 숫자와 상 이한 제2 숫자(예컨대, '0')을 추가로 표현하도록 구성된다. 예컨대, '♪’는 음표 박자의 '1/2' 박자이므로 숫자‘12’로, ‘♩’는 음표 박자의 '1' 박자이므로 숫자‘14 ’로 변환할 수 있고, 쉼표 '1/2' 박자의 경우 '02'로 변환할 수 있다. 상기 경우, 인공 신경망은 단계 30의 학습 수행시 박자를 표현하는 숫자 중 '십'의 자리 표현되어 있는 숫자(즉, 제1 숫자 또는 제2 숫자)를 통해 음표 박자와 쉼표 박자를 구분하며 학습을 진행할 수 있게 된다. <단계 2(S20)> 본 발명의 단계 2(S20)은 전술한 단계 1의 변환 과정을 통해 숫자화된 음표, 쉼표 및 박자가 제1 학습곡의 시계 열 순서에 따라 배열되는 시계열 데이터를 생성하는 단계이다. 따라서, 단계 2의 과정을 완료하면, 학습할 곡의 멜로디에 따라서 음표와 쉼표를 표현하는 시계열 데이터 하나 (이하, '음표 시계열 데이터'라 칭함)와 박자를 표현하는 시계열 데이터 하나(이하, '박자 시계열 데이터'라 칭 함)가 획득된다. 그리고, 상기 음표 시계열 데이터는 음표를 위한 제1 인공 신경망에 학습시키고, 상기 박자 시계열 데이터는 상 기 제1 인공 신경망과 구분되는 박자를 위한 인공 신경망(제2 인공 신경망)에 학습시키도록 구성된다. 참고로, 본 발명의 일 실시예에서는 음표 시계열 데이터와 박자 시계열 데이터를 두 개의 인공 신경망에 각각 학습시키도록 구성하였으나, 필요시 두 개 종류의 시계열 데이터를 합하여 하나의 인공 신경망으로 학습하도록 구성할 수도 있음은 물론이다. 도 2는 본 발명의 제1 학습곡의 일 례로서, '가수 티아라'의 'Roly-Poly'라는 곡의 일부 악보이다. 이 곡은 최 저음표 ‘2옥타브 라’부터 최고음표 ‘4옥타브 미’까지의 음표 범위 안에 있다. 'Roly-Poly'의 메인 악보를 기준으로 합성음이 있을 때는 대표음 하나로 숫자화 하였다. 도 2 곡의 예를 들어 시계열 데이터 변환을 설명하 면 다음과 같다. 먼저 음표는 [15 18 18 18 18 17 15 18 18 18 18 17] 의 음표 시계열 데이터로 변환될 수 있 고, 박자는 [12 12 12 12 14 14 12 12 12 12 14 14] 의 박자 시계열 데이터로 변환될 수 있다. 도돌이표까지 포함하여 변환하면 음표와 쉼표를 포함하여 총 360개의 시계열 데이터가 생성된다. <단계 2-1(S21)> 인공 신경망은 단계 2(S20)를 통해 생성된 음표 시계열 데이터와 박자 시계열 데이터를 기반으로 학습을 수행하 게 되는데, 이와 같은 학습 수행 전에 시계열데이터는 학습을 위하여 결정된 인공 신경망의 구조에 맞게 다수 개의 학습 데이터로 변환되어야 한다. 학습 데이터를 생성하는 패턴은 다음과 같다. 시계열 데이터 입출력 학습패턴은 다음과 같다.‘첫 번째’부터 ‘N 번째’까지의 시계열 데이터를 상기 인공 신경망에 입력하여 ‘N+1 번째’ 시계열 데이터를 출력함으로써 제1 학습데이터를 생성한다. 이어서,‘두 번째’부터 상기 ‘N+1 번째’까지의 시계열 데이터를 상기 인공 신경망에 입력하여 ‘N+2 번째’ 시계열 데이터를 출력함으로써 제2 학습데이터를 생성한다. 이어서,‘세 번째’부터 상기 ‘N+2’번째까지의 시계열 데이터를 상기 인공 신경망에 입력하여 ‘N+3’번째 시 계열 데이터를 출력함으로써 제3 학습데이터를 생성한다. 그리고,‘n 번째’부터 ‘N+(n-1)’번째까지의 시계열 데이터를 상기 인공 신경망에 입력하여 ‘N+n’번째 시계 열 데이터를 출력함으로써 제n 학습데이터를 생성하는 상기 패턴을 반복함으로써 다수 개의 학습 데이터가 발생 하게 된다. 도 3은 본 발명에 따른 인공 신경망의 학습 패턴, 이에 따른 학습 데이터 생성 및 그 학습 과정을 보여주는 일 례이다. 도 3을 참조하여, 시계열 데이터를 통해 다수 개의 학습 데이터를 생성하는 방법에 대하여 상세히 설 명하도록 한다 도 3의 일 실시예에서는 학습 데이터 생성하고 이를 기반으로 음표, 쉼표 및 박자를 학습하는 용도로 두 개의 인공 신경망을 채용하였고, 구체적으로 인공 신경망은 하나의 출력을 갖는 앞먹임 신경망(FNN: Feedforward Neural Network)으로 구성하였다. 신경망의 구조는 두 개의 신경망 모두 동일하게 10 개의 입력 노드와 20 개의 중간 노드 그리고 1 개의 출력 노 드를 갖도록 구성하였다. 학습할 곡이 표현된 시계열 데이터를 이용하여 입출력 학습패턴을 만들고, 이의 반복 을 통해 다수 개의 학습 데이터(TD: Training Data)를 생성할 수 있게 된다. 구체적으로, 학습패턴은 첫 번째부터 열 번째까지의 시계열 데이터(#01 ~ #10)를 입력으로 했을 때 11 번째 시 계열 데이터(#11)가 출력이 되는 첫 번째 학습패턴이 이루어짐으로써 제1 학습데이터(TD #1)가 생성된다. 두 번째 학습패턴은 첫 번째 학습패턴에 의해 생성된 제1 학습데이터 중 첫 번째 시계열 데이터를 제외하고, 두 번째부터 열한 번째까지의 시계열 데이터(#02 ~ #11)를 입력으로 하면 12 번째 시계열 데이터(#12)가 출력이 되 어, 제2 학습데이터(TD #02)가 생성된다. 이와 같은 방식의 학습패턴을 반복 진행하면, 예컨대 100개의 시계열 데이터가 있는 곡에서 10개의 입력 노드를 갖는 신경망을 사용함으로써 총 90개의 학습 데이터가 발생하게 된다. <단계 3(S30)> 본 발명의 단계 3(S30)은 시계열 데이터를 이용하여 인공 신경망을 학습시키는 단계이다. 구체적으로, 전술한 단계 2-1(S21)을 수행하면, 각 학습패턴 단계에서 학습 데이터(TD #1, TD #2, ..TD #N)가 생성되는데, 이렇게 각 학습패턴 단계에서 생성되는 각 학습 데이터를 인공 신경망에 가하여 학습을 수행해 나간다. 도 3 실시예의 경우, 오류 역전파 알고리즘을 사용하여 학습을 수행하도록 구성되고, 최대 학습 횟수는 1,000,000번을 넘지 않도록 설정하였다. 그러나 그 이전에 학습이 더 이상 일어나지 않거나 총 학습 오류치가 특정치 이하로 떨어지는 등의 종료 조건이 만족되면 학습을 종료할 수 있다. 인공 신경망은 적절한 구조와 학습률 그리고 충분한 학습 시간만 주어지면 입출력으로 제공되는 학습 데이터를 학습할 수 있다. 그런데, 학습데이터에 학습할 수 없는 데이터가 있는 경우 충분한 시간의 학습 과정을 진행(예 컨대, 최대 학습 횟수 도달)해도 제대로 학습이 수행되지 못하는 문제가 발생할 수 있다. 여기서, 학습할 수 없는 데이터라는 것은 같은 입력에 대하여 다른 출력을 내는 학습데이터가 주어지는 경우이 다. 이 경우 신경망은 두 출력 중에 어느 쪽으로 출력하도록 학습할지를 결정하지 못하고 한쪽으로 치우치게 학 습하거나 두 출력 사이를 왔다갔다 학습할 수가 있으며, 이에 따라 많은 학습시간이 주어져도 특정치 이하로 오 류를 줄일 수가 없게 된다. 이는, 일반적인 학습 데이터와는 다르게 곡을 변환한 시계열 학습데이터에는 곡의 특성 상 반복되는 시계열 데 이터가 많이 발생함에 기인한다. 즉, 곡에는 일반적으로 반복되는 멜로디가 많고 특히 되돌이표로 인한 반복에서는 완전히 동일한 멜로디가 몇 번에 걸쳐서 반복되는 문제가 있다. 이러한 반복 멜로디가 문제가 되는 이유는 신경망 학습데이터에서 동일한 입력 측 데이터에 대하여 다른 출력을 내는 학습데이터가 많이 발생하기 때문이 다. 상기와 같은 경우, 신경망은 동일한 입력에 대하여 여러 가지의 다른 출력을 학습해야하기 때문에 특정 값으로 수렴하지 못하고 학습이 왔다 갔다 하게 되며 결국 아무리 많은 학습 횟수를 수행해도 전체 학습 오류가 감소되 지 않는 문제점이 발생한다. <단계 2-2(S22)> 본 발명의 단계 2-2(S22)는 전술한 바와 같이 곡의 특성 상 반복되는 시계열 데이터가 많이 발생함에 따른 문제 를 해결하기 위한 것으로서, 인공 신경망의 학습시, 해당 학습데이터를 구성하는 시계열 데이터에, 곡의 마디를 구분하기 위한 정보(이하, ‘마디 구분 정보’라 칭함)를 추가적으로 제공해주는 단계이다. 환언하면, '마디 구분 정보'는 인공 신명망의 학습 시 같은 음표나 박자 마디 뒤에 오는 다른 음표나 박자를 구 분해 주기 위해 음표나 박자와 같이 넣어 주는 정보를 의미한다. 음표와 박자로만 이루어진 시계열 데이터에 현재 학습하고 있는 시계열 데이터의 마디 구분 정보를 추가적으로 넣어줌으로써 동일한 음표나 박자를 갖는 학습 데이터에서도 이 마디 구분 정보를 이용하여 다른 출력을 학습할 수 있게 된다. 이와 같이, 마디를 구분하기 위해서는 최소한 한 개 이상의 마디 구분 정보를 넣어주어야 한다. 그런데, 학습 데이터에서 한 번에 입력되는 음표나 박자의 개수가 많은 경우 하나의 학습 데이터로 출력을 구분하도록 학습하 는 것이 어렵게 된다. 상기 문제점을 해결하기 위하여, 마디를 구분하는 정보 즉, 마디 구분 정보의 개수를 확대하여 입력해주도록 구 성하는 것이 바람직하다. 그리고 이와 같이 마디 구분 정보의 개수를 확대하면 일정한 규칙을 통하여 동일한 방법을 적용하도록 구성된다. 다만, 마디 구분 정보 사이에는 유사도가 매우 낮아야만 학습이 원활하게 수행될 수 있다. 반복되는 학습데이터 에서도 학습이 원활하도록 마디 구분 정보의 개수를 늘려주고 마디 구분 정보 사이에 유사도를 낮게 입력해주면 신경망은 반복되는 학습데이터에서도 문제없이 빠르게 학습을 수행할 수 있다. 다만, 마디 구분으로 늘어난 입력 때문에 전체적으로 하나의 학습데이터의 학습에 걸리는 시간은 늘어난다. 그 러므로 무작정 마디 구분 정보의 개수를 늘리면 안 된다. 마디 구분 정보의 개수가 늘어날수록 빨리 학습되는 것을 볼 수 있었으며 마디 구분을 확실하게 하기 위해서는 40개 이상의 마디 구분 정보를 입력하는 것이 바람직하나, 곡의 반복성이 얼마나 있는지와 마디 구분 정보 사이 의 유사도가 얼마나 없는지 등에 따라 그 개수는 달라질 수 있다. 결국, 인공 신경망은 단계 2-2를 통해 추가 입력되는 마디 구분 정보를 기반으로 학습하기 때문에 학습할 곡의 시계열 데이터가 동일하여도 입력을 구분할 수 있다. 이러한 마디 구분 정보 입력은 특정한 값을 가질 필요는 없으며 마디별로 다른 입력(즉, 마디별로 상이한 숫자)만 넣어주면 된다. 예컨대, 40 개의 숫자를 무작위로 만 들어서 마디 구분 정보 입력으로 사용할 수 있다. <단계 4(S40), 단계 5(S50)> 본 발명의 단계 4(S40)은 새로운 곡의 도입부를 작곡하여 이의 시계열 데이터를 인공 신경망에 입력하는 단계이 다. 새로운 곡을 작곡하기 위하여 상기 새로운 곡(즉, 인공 신경망이 작곡할 곡)의 일부(이하, ‘도입곡’라 칭함) 를 사람이 작곡한 후 이를 시계열 데이터로 변환하여 인공 신경망에 입력하면, 학습된 인공 신경망은 입력된 상 기 도입곡의 시계열 데이터를 기반으로 하여 새로운 곡을 출력(S50)하게 된다. 여기서, 상기 도입곡에 대해 변환된 시계열 데이터 역시 상기 도입곡을 구성하는 음표와 박자가 숫자 형태로 변 환된 것을 지칭한다. 만약, 입력된 도입곡이 새로운 곡의 시작부라면, 인공 신경망은 입력된 상기 도입곡의 시계열 데이터를 시작 멜 로디로 하여 이에 이어지는 새로운 곡을 출력(S50)하게 된다. 학습한 인공신경망은 충분히 학습된 경우 10개의 초기 음표나 쉼표 그리고 박자를 학습한 곡과 동일하게 넣어주 면 나머지 음표나 쉼표 그리고 박자를 원래의 학습한 곡과 동일하게 출력한다. 여기에 10개의 초기 음표나 쉼표 그리고 박자를 다르게 새로 작곡하여 도입부로 넣어주면 나머지 음표와 쉼표 그리고 박자를 자동 생성해준다. 이를 통하여 새로운 멜로디를 얻을 수 있다. 이렇게 작곡된 신규 곡은 학습한 곡과 유사한 멜로디 느낌을 가지 나 다른 멜로디를 생성한다. 그런데, 이와 같이 인공 신경망이 새로 생성하는 곡은 신경망에 학습된 것을 바탕으로 하기 때문에 음악이론(예 컨대, 박자, 화성 등)에 맞지 않는 결과를 생성할 수 있다. 그러므로 신경망이 만들어낸 멜로디는 추가적으로 음악이론에 맞게끔 후처리 하는 작업이 필요하다. <단계 6(S60)> 본 발명의 단계 6(S60)은 단계 5(S50)을 통해 생성된 신규 곡이 음악이론에 맞도록 이를 후처리하는 단계로서, 세부적으로는 박자 후처리와 화성 후처리로 구분된다. 본 발명에 따른 후처리 단계에서 먼저 후처리 해야 하는 것은 박자로서, 마디별로 갖춘마디를 만들기 위해 박자 를 수정해야 한다. 박자 후처리는 인공신경망이 출력한 음표의 박자가 갖춘마디를 형성하지 못할 때 갖춘마디 로 수정해주는 작업이다. 예를 들어, 한 마디는 박자로 온음(16분 음표에서 '1'이며 우리 박자 표기 법으로 '16')이 되어야하는데, 어떤 마디의 박자가 18박자인 경우 2박자를 빼서 16박자로 맞추어주는 방법이다. 이하 에서는 박자 후처리 방법의 구체적 알고리즘에 대하여 설명하도록 한다. 제1 알고리즘 본 발명의 박자 후처리를 위한 제1 알고리즘은 인공신경망이 출력한 음표 또는 쉼표의 개수 즉, 박자의 개수를 유지하며 박자를 후처리하는 방법으로서, 세부적으로 최초 제1 단계를 먼저 수행하고, 상기 제1 단계에 따른 박 자 후처리 실패시 제2 단계를 수행하도록 구성된다. 본 발명의 제1 알고리즘의 제1 단계는 박자 후처리 대상 마디(즉, 갖춘마디 대비 박자가 초과하는 마디)를 구성 하는 각 박자들에 있어서, 갖춘마디 박자를 기준으로 이보다 넘치는 박자(이하, 'd')만큼을 가장 작은 박자(제 1a 박자)에서 빼고, 상기 'd'만큼 뺀 박자('제1a 박자 - d' 박자)가 사용 박자 그룹에 존재하면 해당 마디에 대 한 박자 후처리가 완료된다. 만약, 상기 'd'만큼 뺀 박자(즉, '제1a 박자 - d' 박자)가 사용 박자 그룹에 없으면, 상기 제1a 박자 대비 그 다음 작은 박자(제2a 박자)에서 'd'만큼 뺀 후, 상기 'd'만큼 뺀 박자('제2a 박자 - d'박자)가 사용 박자 그룹 내에 존재하면 해당 마디에 대한 박자 후처리가 완료된다. 만약, 상기 'd'만큼 뺀 박자('제2a 박자 - d'박자)가 사용 박자 그룹에 없으면, 상기 제2a 박자 대비 그 다음 작은 박자에 대하여 동일한 과정을 수행하게 된다. 만약 상기와 같은 방식으로, 후처리 대상 마디를 구성하는 모든 박자에 대해 수행하여도 박자 후처리를 완료할 수 없게 되면 다음의 제2 단계를 수행하도록 구성된다. 참고로, 상기 '사용 박자 그룹'이란 본 발명의 인공 신경망에 의한 자동 작곡시, 인공 신경망이 사용 가능한 박 자의 종류를 지칭하며, 이러한 사용 박자 그룹을 구성하는 박자의 종류는 사용자가 설정할 수 있다. 예컨대, 16분 음표/쉼표를 기준으로 설정하면, 사용 박자 그룹은 '1,2,3, 4,6,8,12,16' 박자들로 이루어진 그룹 (이하, '제1 그룹')으로 지정할 수 있다. 예를 들어, 해당 곡이 4/4 박자이고, 사용 박자 그룹이 상기 그룹1과 같을 경우, 그리고 후처리 대상 마디의 박 자의 합이 18박자인 경우, 가장 작은 박자에서 2박자를 빼는 방법으로 후처리하되, 상기 '2박자'를 뺀 상기 가 장 작은 박자가 상기 그룹 1 중에 존재한다면 해당 마디에 대한 박자 후처리가 완료되고, 만약 존재하지 않는다 면 전술한 바와 같이 그 다음 작은 박자에 대해 동일한 방식으로 박자 후처리를 진행하게 되며, 모든 박자에 대 해 '2박자' 뺄셈을 수행하여도 상기 그룹 1을 만족하는 박자가 없게 되면, 후술할 제2 단계를 수행하게 된다. 본 발명의 제1 알고리즘의 제2 단계는 후처리 대상 마디를 구성하는 각 박자들 중에서 '박자 크기의 순서'를 유 지하면서 갖춘마디를 만드는 박자 조합을 생성하는 방법이다. 여기서, 상기 '박자 크기의 순서'는 수정된 박자 간의 크기가 동일한 경우에도 그 '박자 크기의 순서'를 만족하 는 것으로 처리하도록 구성된다. 그리고, 상기 박자 조합의 생성시에는 전술한 사용 박자 그룹 내에서 선택된 박자를 사용하여 그 조합을 생성하 도록 구성된다. 예를 들어, 박자 후처리 대상 마디를 구성하는 박자가 '1,2,3,6,8' 박자이면, 갖춘마디(16박자) 대비 이보다 넘 치는 박자(d)가 '4((1+2+3+6+8(=20)) - 16)'이기 때문에, '1,2,3,6,8' 중 적어도 하나 이상의 박자를 대상으로 총'4'만큼을 빼더라도 '1,2,3,6,8'의 크기 순서를 유지하면서 모든 박자가 사용 박자 그룹(예컨대, 상기 제1 그 룹)에 해당하게 되는 조합을 생성하게 된다. 상기 경우, '1,2,3,6,8' 중 가장 마지막 박자인 '8'과 그 다음 마지막 박자인 '6'에서 각각 '2'를 빼면 '1,2,3,4,6' 박자들로 후처리 완료되어, 후처리 전 박자 '1,2,3,6,8'의 크기 순서를 유지하면서도 갖춘마디를 만들 수 있게 되고, 각 박자는 사용 박자 그룹(제1 그룹)을 만족하게 된다. 참고로, 박자 후처리 대상 마디가 '1,2,3,6,8' 박자들로 이루어져 있고, 이에 대하여, 넘치는 박자(d)를 뺀 마 디가 예컨대, '1,1,3,3,8' 박자들로 이루어진다면, 상기 경우에도 '박자 크기의 순서'를 만족하는 것으로 처리 하게 된다. 이는 전술한 바와 같이 본 발명의 '박자 크기의 순서'는 수정된 박자 간의 크기가 동일한 경우에도 그 '박자 크기의 순서'를 만족하는 것으로 처리하도록 구성되기 때문이다. 제2 알고리즘 본 발명의 박자 후처리를 위한 제2 알고리즘은 인공신경망이 출력한 음표 또는 쉼표의 개수를 줄이는 방식으로 박자를 후처리하는 방법으로서, 세부적으로 최초 제1 단계를 먼저 수행하고, 상기 제1 단계에 따른 박자 후처리 실패시 제2 단계를 수행하도록 구성된다. 본 발명의 제2 알고리즘의 제1 단계는 박자 후처리 대상 마디에 있어서, 마지막 박자를 제외 처리한 후, 상기 마지막 박자를 제외함으로 인해 발생하는 '갖춘마디 대비 부족한 박자'(이하, 'n')만큼을 가장 큰 박자(제1b 박 자)에 더하고, 상기 'n'만큼 더한 박자('제1b 박자 + n'박자)가 전술한 사용 박자 그룹 내에 존재하면 해당 마 디에 대한 박자 후처리가 완료된다. 여기서, 상기 가장 큰 박자(제1b 박자)란, 상기 마지막 박자를 제외 처리 한 마디에서 가장 큰 박자를 지칭한다. 만약, 상기 'n'만큼 더한 박자(즉, '제1b 박자 + n'박자)가 사용 박자 그룹에 없으면, 상기 제1b 박자 대비 그 다음 큰 박자(제2b 박자)에서 'n'만큼 더한 후, 상기 'n'만큼 더한 박자('제2b 박자 + n'박자)가 사용 박자 그 룹 내에 존재하면 해당 마디에 대한 박자 후처리가 완료된다. 만약, 상기 'n'만큼 더한 박자('제2b 박자 + n'박자)가 사용 박자 그룹 내에 없으면, 상기 제2b 박자 대비 그 다음 작은 박자에 대하여 동일한 과정을 수행하게 된다. 만약 상기와 같은 방식으로, 후처리 대상 마디를 구성하는 모든 박자에 대해 수행하여도 박자 후처리를 완료할 수 없게 되면 다음의 제2 단계를 수행하도록 구성된다. 본 발명의 제2 알고리즘의 제2 단계는 박자 후처리 대상 마디에 있어서, 마지막 박자를 제외한 후, 상기 마지막 박자가 제외된 마디를 구성하는 음표 또는 쉼표에서 '박자 크기의 순서'를 유지하면서 갖춘마디를 만드는 박자 조합을 생성하는 방법이다. 여기서, 상기 '박자 크기의 순서'는 수정된 박자 간의 크기가 동일한 경우에도 그 '박자 크기의 순서'를 만족하 는 것으로 처리하도록 구성된다. 그리고, 상기 박자 조합의 생성시에는 전술한 사용 박자 그룹 내에서 선택된 박자를 사용하여 그 조합을 생성하 도록 구성된다. 예를 들어, 박자 후처리 대상 마디를 구성하는 박자가 '1,2,3,6,8' 박자이고, 갖춘마디는 '16박자'라 가정하면, 상기 후처리 대상 마디에서 마지막 박자가 제외된 마디는 '1,2,3,6' 박자로 이루어지고, 상기 마지막 박자(' 8')를 제외함으로 인해 발생하는 '갖춘마디 대비 부족한 박자(n)'는 '4'박자가 된다. 상기 경우, '1,2,3,6' 중 두번째 박자인 '2'와 세번째 박자인 '3'에서 각각 '1'을 더해주고, 네번째 박자인 ' 6'에는 '2'를 더해주면, 최종적으로 '1,3,4,8' 박자로 후처리 완료되어, 후처리 전 박자 '1,2,3,6'의 크기 순서 를 유지하면서도 갖춘마디를 만들 수 있게 되고, 각 박자는 사용 박자 그룹(제1 그룹)을 만족하게 된다. 참고로, 박자 후처리 대상 마디가 '1,2,3,6' 박자들로 이루어져 있고, 이에 대하여, 부족한 박자(n)를 더해준 마디가 예컨대, '2,2,4,8'박자들로 이루어진다면, 상기 경우에도 '박자 크기의 순서'를 만족하는 것으로 처리하 게 된다. 이는 전술한 바와 같이 본 발명의 '박자 크기의 순서'는 수정된 박자 간의 크기가 동일한 경우에도그 '박자 크기의 순서'를 만족하는 것으로 처리하도록 구성되기 때문이다. 한편, 전술한 제1 알고리즘의 제2 단계는 제2 알고리즘의 제2 단계로 대체 구성 가능하고, 마찬가지로 제2 알고 리즘의 제2 단계는 제1 알고리즘의 제2 단계로 대체 구성 가능함은 물론이다. 또한 제1 알고리즘에서 넘치는 박자 'd' 만큼을 줄일 때 한 박자를 'a' 만큼 더하고 다른 한 박자를 'b' 만큼 줄여서 (b-a = d)를 만족하며 해당 두 개의 조정한 박자가 사용하는 박자에 포함되는 경우도 가능하다. 이와 유 사하게 제2 알고리즘에서 부족한 박자 'n'을 늘릴 때 한 박자를 'a'만큼 더하고 다른 한 박자를 'b'만큼 줄여서 (a-b = n)를 만족하며 해당 두 개의 조정한 박자가 사용하는 박자에 포함되는 경우도 가능하다. 결론적으로, 갖춘마디를 만드는 방법은 인공신경망에서 생성한 마디를 차례로 더하다가 한 마디가 갖추어야할 박자(16박자)에 부합하면 마디로 구분하면 되고 16박자를 넘어가는 경우에 해당 넘치는 박자만큼을 빼주는 여러 가지 방법(한 박자에서 빼주는 방법, 두 박자에서 빼주는 방법, 한 박자에서 더하고 다른 박자에서 빼는 방법) 으로 16박자를 맞추어 주는 방법이 있으며, 16박자가 넘어가기 직전까지를 마디로 구분하여 해당 부족한 박자만 큼을 더해주는 여러 가지 방법(한 박자에서 더하는 방법, 두 박자에서 더하는 방법, 한 박자에 더하고 다른 박 자에서 빼는 방법)으로 갖춘마디 박자 즉, 16박자를 맞추어 주는 방법이 있다. 도 4는 본 발명에 따른 화성 후처리 단계의 세부 단계를 도시한 블록 순서도이고, 도 5는 본 발명에 따른 화성 후보군 생성 단계의 구체적 처리 흐름을 도시한 블록 순서도이고, 도 6은 본 발명에 따른 각 마디별 화성 선정 단계의 구체적 처리 흐름을 도시한 블록 순서도이다. 이하에서는, 도 4 내지 도 6을 참조하면, 본 발명의 화성 후처리에 대하여 상세히 설명하도록 한다. 본 발명에 따른 화성 후처리는 크게 화성 후보군 생성 단계(S100), 각 마디별 화성 선정 단계(S110), 멜로디 수 정 단계(S120)를 포함한다. 화성 후보군 생성 단계(S100) 도 5를 참조하면, 본 발명의 화성 후보군 생성 단계(S100)는 인공 신경망에서 생성한 멜로디를 마디별로 구분하 여 화성 후보군을 생성하는 단계로서, 가장 먼저 각 마디에 있는 음을 낮은 음부터 정렬한다(S101). 그리고, 가장 낮은 음부터 차례로 근음으로 지정(S102)해서 나머지 음과의 간격을 구한다(S103). 예를 들어 어 떤 마디에 3개의 음이 있다면 각 음이 근음이 되었을 때 나머지 음과의 간격이 구해진다. 이 때 근음보다 낮은 음은 전위방식으로 상위 음으로 변환해준다. 예를 들어 어떤 마디에 도, 미, 솔 세 개의 음이 있다면 이 음들은 각각 '1, 5, 8'로 표시되며 중간 음 '5'는 근음과의 간격이 장3도(간격으로는 +4)이고 마지막 음 8은 근음과의 간격이 완전 5도(간격으로는 +7)이므로 장 3화음이 된다. 결국 근음이 '도'이므로 'C Major' 화음이 된다. 중간 음 '5'를 기준으로 하면 '5, 8, 12' 가 되어 단 3화음이 되어 결국 'E minor' 화음이 된다. 이와 같은 방식으로 모든 음을 근음으로 하여 화음(S104)을 구하게 된다. 만약 Major와 minor를 정하지 못하는 경우에는 Major 와 minor를 모두를 후보로 넣는다. 이렇게 해서 결정된 모든 화음을 저장하면 각 마디별로 화성 후보군이 형성된다(S105). 실험결과 마디별로 음이 3~4개 이상 존재하는 경우 마디별 화성 후보로 생성되는 것이 5 ~ 8개 정도 발생함을 알 수 있어서, 이렇게 구한 화성 후보들은 다음 단계의 화성진행에서 사용하게 된다. 각 마디별 화성 선정 단계(S110) 도 6을 참조하면, 본 발명의 각 마디별 화성 선정 단계(S110)는 각 마디별로 선정된 화성 후보군을 기본으로 특 정 코드 조합의 화성 전개가 이루어지도록 각 마디별 화성을 선정하는 단계이다. 여기서, 상기 '특정 코드 조합의 화성 전개'란 각 마디별 화성의 변화를 의미하는 것으로서, 다양한 장르의 작 곡 분야에서 기 사용되고 있는 여러 종류의 화성 진행 코드 중 적어도 어느 하나를 사용할 수 있다. 일 실시예에 따르면, 특정 코드 조합의 화성 전개는 머니 코드(Money Chord)일 수 있으며, 이하에서는 상기 '특 정 코드 조합의 화성 전개'는 머니 코드를 채용한 것을 기준으로 설명하도록 한다. 머니 코드(Money Chord)에서는 4 마디별로 화성이 진행된다. 본 발명에서 사용한 화성 진행의 우선순위는 4가지 형태를 사용한다. 기본적으로 머니 코드(Money chord)는 마디별 근음의 차이가 'I-V-vi-IV'로 발생하는 것을 의 미한다. 즉, 'I'를 도로 놓으면 '도-솔-라-파'로 근음이 변화하는 것을 의미하여 중간에 'vi' 만 소문자로 표현 된 것은 해당 코드(chord)는 마이너 코드(minor chord)임을 나타낸다. 결국, 단계 'S110'은 화성 후보군 생성에서 생성된 화성 후보군을 대상으로 마디별 근음 차이의 비교(S111)를 통해 머니 코드(Money chord) 순서대로 진행하는 코드가 있는지를 찾는 과정(S112)으로서, 상기 근음 차이 비교 결과, 머니 코드 순서대로 진행하는 코드의 조합이 있는 경우 이를 최종 화성으로 결정하여 저장한다 (S113). 그런데, 화성 후보군 생성에서 5 ~ 8개의 화성 후보군이 생성되었으나 머니 코드 진행순서와 일치하지 않는 코 드 조합을 갖는 화성 후보군이 발생할 수 있다. 상기 경우, 머니 코드(Money chord)를 기준으로 이에 근접하는 머니 코드 오차 허용 범위를 설정하여, 상기 오차 허용 범위 내의 코드 조합이 있는 경우 일단 이를 일치하는 것으로 처리하도록 구성하였다. 환언하면, 머니 코드(Money chord)와 약간의 차이가 발생하는 경우, 해당 코드 조합이 상기 허용 범위 내에 있 다면 일단 이를 머니 코드와 일치하는 것으로 결정 및 저장하도록 구성된다. 상기 경우 다음 단계인 멜로디 수 정 단계(S12)에서 이를 머니 코드(Money chord)와 일치하도록 멜로디를 수정해주어야만 한다. 멜로디 수정 단계(S120) 본 발명의 멜로디 수정 단계(S120)는 최종 결정된 코드를 중심으로, 단계 'S50'에서 출력된 곡의 멜로디를 수정 하는 단계이다. 구체적으로, 각 마디별로 최종 결정된 화성을 기준으로 인공 신경망에서 만들어진 멜로디를 수정한다. 예를 들 어, 머니 코드(Money chord) 진행을 맞추기 위하여 화성 후보군에서 일치하지 않는 화성을 선택한 경우 즉, 전 술한 '오차 허용 범위' 내의 코드 조합이 존재하는 경우, 최종 선정된 화성으로 해당 마디의 멜로디 전체를 수 정한다. 또한 화성 타입에 따라서 'Major' 와 'minor' 에 따른 멜로디 수정도 수행한다. 결국 이렇게 되면 인공 신경망 에서 출력된 멜로디가 머니 코드(Money chord) 진행에 일치하는 멜로디로 변환되며 최종 곡은 기존에 학습한 곡 의 느낌을 갖으면서 새로운 코드 진행에 따른 멜로디로 완성된다. 도 7은 전술한 단계 S10 내지 단계 S60의 방법에 따라 출력된 실제 작곡 결과를 나타낸 일 시험예이다. 참고로, 도 7의 자동 작곡된 곡은 학습 곡으로 '가수 '티아라의 '롤리-폴리'를 사용했으며 검증 결과 해당 곡이 완벽하게 학습되는 것을 확인할 수 있었다. 학습 후에 초기 10개의 음과 박자를 새로운 곡으로 넣어주어 새로운 곡을 출력하게 했다. 이 때 단계 'S60'에서 설명한 머니 코드(Money chord)에 따른 후처리 방법이 적용되어 화성이 결정되고 멜로디도 수정되어 출력되었다. 머니 코드(Money chord)에 부합되지 않아서 새로운 멜로디로 수정된 마디가 발생하였으며 모든 마 디에 최종 결정된 코드가 적용되어 작곡되었다. 한편, 자동으로 만든 곡은 MusicXML 표기 방법으로 파일로 출력 될 수 있다. 도 7의 악보에서 알 수 있듯이, 기존 곡 '롤리-폴리'의 멜로디와 느낌이 유사하면서도 새로운 곡을 만들어낼 수 있었다. 또한 머니 코드(Money chord) 적용으로 마디별 진행이 작곡가가 작곡한 것과 유사하게 진행되는 것을 확인할 수 있었다. 도 7 결과에서 나타나듯이, 인공 신경망을 이용하여 기존의 곡을 학습하고 새로운 곡을 만드는 방법은 새로 생 성된 곡에 기존 곡의 느낌이 많이 남아있게 된다. 이것을 피하기 위해서는 새로 넣어주는 시작 멜로디를 기존 곡과 많이 다르게 하면 일정 부분 해소된다. 또한, 화성 진행 및 후처리에서의 매칭 조건을 완화하면 최종 결 정된 화성에 따른 멜로디 수정에서 수정이 많이 가해지므로 어느 정도 완화할 수 있다. 보다 바람직하게는, 인공 신경망이 단순히 하나의 곡만을 학습하는 것이 아니라 여러 곡을 학습하게 하면 특정 한 곡에 편중되지 않은 최종 멜로디를 생성하여 상기 문제점을 보다 완화할 수 있다. 특히 이렇게 여러 곡을 학 습하는 방법에 의하면, 인공 신경망이 각 곡의 느낌을 어느 정도 유지하는 점이 장점이 될 수 있다. 즉 여러 곡 을 학습한 후에 작곡을 하는 경우에는 여러 곡의 느낌이 잘 조화된 최종 결과물이 나올 수 있게 된다. 한편, 작곡된 곡의 음악성을 더욱 높이기 위해서는 박자나 멜로디를 보다 수준 높게 고도화하는 작업이 필요하 다. 이하에서는, 박자와 멜로디 후처리를 고도화하는 방법과 여러 곡을 학습하는 방법에 대하여 설명하도록 한다. <단계 7(S70)> 본 발명의 단계 7(S70)은 후처리 완료된 신규 곡의 박자와 멜로디를 고도화 처리하여, 단계 'S10' 내지 'S60'의 과정을 따라 생성된 곡의 음악성을 더욱 향상시키기 위한 단계이다. 단계 'S60'의 박자 및 화성 후처리를 통하여 생성된 곡은 상당부분 수준 있는 곡을 생성하나 일반적인 대중음악 에서와 같은 반복성이 확실하지가 않다. 즉, 대부분의 경우 처음부터 끝까지 거의 새로운 멜로디와 박자로 작곡 되는데, 단계 7(S70)의 박자 및 멜로디 고도화를 통해 이와 같은 한계를 해결할 수 있게 된다. 도 8은 본 발명에 따른 박자 및 멜로디 고도화 단계의 구체적 처리 흐름을 도시한 블록 순서도이다. 도 8을 참 조하면, 박자 고도화와 멜로디 고도화는 후처리된 박자와 화성을 자주 발생되는 패턴으로 재보정하는 작업이다. 구체적으로, 박자 고도화 방법은 마디별 박자에 있어서 몇 개의 자주 발생되는 패턴을 통계낸 후 이를 순위별로 정렬 및 분류한다(S71). 그리고, 정렬된 통계 순위 중 상위 N 순위를 선정(S72)하고, 이렇게 선정된 N 순위를 기반으로 마디 보정을 수 행한다(S73) 여기서, 상위 N 순위는 사용자가 지정할 수 있으며, 예컨대, 수 개의 순위를 지정할 수 있다. 그리고, 마디별 통계의 경우 상호 완전히 일치하는 패턴만을 일 패턴으로 분류하는 방식으로 구성하거나, 또는 '±n' 정도의 허 용 오차 범위를 설정하여 상기 허용 오차 범위에 들어가는 패턴이라면 상호 동일한 패턴으로 인식하여 일 패턴 으로 분류하는 방식으로 구성하거나, 두 가지 방식을 조합하여 패턴 통계를 산출하는 방식으로 구성할 수 있다. 더 나아가, 두 가지 방식을 조합하여 패턴 통계를 산출하는 방식을 따를 경우, 상기 '허용 오차 범위에 들어가 는 패턴' 대비 '상호 완전히 일치하는 패턴'에 더 높은 가중치 내지 우선도를 부여하는 방식으로 상기 N 순위를 선정하도록 구성할 수 있다. 마디 보정 단계(S73)의 경우, 상위 N 순위에 들지 못한 마디를 조정하는 단계로서, 바람직하게는 두 개의 방법 중에서 선택된 어느 하나를 통해 마디 보정을 수행할 수 있다. 첫 번째 방법은, 상위 N 순위에 들지 못한 마디(이하, '보정 대상 마디'라 칭함)들에 대하여 N 순위 내의 각 박 자 패턴과의 차이를 계산한 후, 해당 보정 대상 마디와 가장 차이가 작은 것(즉, 상위 N 순위 중 어느 하나)으 로 상기 해당 보정 대상 마디를 바로 변경하는 방법이다. 여기서, 상위 N 순위와 보정 대상 마디 간의 차이 계산은 박자 또는 음표가 숫자로 표현되는 시계열 데이터에서 마디별 숫자 개수 또는 숫자 값의 유사도를 이용하여 수행하도록 구성될 수 있다. 만약, 가장 작은 차이의 것이 복수 개로 존재하면, 무작위(Random) 방식으로 어느 하나를 선택하여 보정 대상 마디를 변경하도록 구성할 수 있다. 두 번째 방법은, 보정 대상 마디에 대하여 N 순위 내의 각 박자 패턴과의 차이를 계산한 후, 보정 대상 마디를 이와 가장 차이의 작은 것(즉, 상위 N 순위 중 어느 하나)으로 한번에 하나씩만 변경하는 방법이다. 상기 경우, 하나의 보정 대상 마디(이하, '제1 보정 대상 마디'라 칭함)의 변경이 완료되면, 상기 제1 보정 대 상 마디를 포함시킨 상태에서, 다시 단계 'S71' 의 마디별 통계 및 정렬 과정을 재수행한 후 정렬된 통계 순위 중 상위 N 순위를 재선정한다. 그리고, 재선정된 상위 N 순위를 기준으로 다시 전술한 단계 'S73' 의 과정 즉, 또 다른 하나의 보정 대상 마디 와 N 순위와의 차이를 계산한 후, 가장 작은 차이의 것으로 한번에 하나씩만 변경하는 과정을 수행한다. 이와 같은 방식을 다수 회 반복함으로써 후처리된 박자와 멜로디를 자주 발생되는 패턴으로 재보정할 수 있게 되고, 이를 통하여 대중음악에서와 같은 반복성을 구현할 수 있게 된다. 멜로디 고도화 방법은 전술한 박자 고도화 방법과 동일한 방법으로 수행될 수 있다. 다만, 박자 고도화 방법은 마디별 '박자'에 있어서 몇 개의 자주 발생되는 패턴을 통계낸 후 진행되는 반면, 멜로디 고도화 방법은 마디별 '멜로디'에 있어서 몇 개의 자주 발생되는 패턴을 통계낸 후 전술한 단계 'S72' 및 'S73' 방식을 따라 진행되는 점이 차이점이다. 이하에서는 다수의 곡을 학습하는 방법에 대하여 상세히 설명하도록 한다. 도 9는 본 발명의 일 실시예에 따른 인공 신경망 학습 방법을 도시한 개념도이고, 도 10 (a),(b) 및 (c)는 본 발명의 다양한 실시예에 따른 인공 신 경망 학습 방법을 도시한 개념도이다. 첫 번째 방법은 도 9와 같이 기본이 되는 첫 번째 곡을 100%로 학습한 뒤에 나머지 곡들은 일부만 학습하는 방 법이다. 이렇게 하면 첫 번째 곡에 다른 곡의 느낌을 가미하는 효과를 줄 수 있다. 학습 정도를 조절하기 위하여 본 발명에서는 신경망 학습 성능 지수의 하나인 MSE(Mean Square Error)를 사용하였다. 두 번째 방법은 학습하는 곡들을 도 10의 (a)와 같이 1 에폭(epoch)씩 번갈아가며 학습하는 방법이다. 이 때, 기본으로 하고 싶은 곡이 있다면 해당 곡의 학습 비율을 더 높이는 방법을 사용한다. 예를 들어, 도 10의 (b)과 같이 'A'와 'B' 두 곡을 학습하여 작곡할 때 'A'곡에 더 비중을 두고 싶다면 'B'곡보다 'A'곡에 더 많은 비율 (도 10 (b)의 경우 5:1)을 할애하여 'A'곡을 더 많이 학습하여 작곡하도록 구성하는 것이다. 세 번째 방법은 두 번째 방법에서 더 심화된 방법으로서, 학습하는 곡들을 마디별로 나눠서 번갈아가면서 학습 하는 방법이다. 여기서, 마디는 음악에서의 마디가 아니라 인공 신경망에 학습시키는 단위를 의미한다. 예를 들어, 두 곡을 학습할 때 도 10의 (c)와 같이, 먼저 첫 번째 곡의 첫 번째 마디를 학습 후 두 번째 곡의 첫 번째 마디를 학습한다. 다음으로 첫 번째 곡의 두 번째 마디를 학습 후 두 번째 곡의 두 번째 마디를 학습한 다. 그리고 이러한 방법을 반복 진행함으로써 모든 곡(즉, 첫 번째 곡과 두 번째 곡 전체)을 학습하도록 한다. 한편, 이와 같이 마디를 이용한 세 번째 방법에서도 특정 곡을 강조하기 위하여 해당 곡의 마디를 더 많이 학습 하도록 구성할 수도 있음은 물론이다. 도 11은 일 시험예로서, 본 발명의 인공 신경망이‘가수 티아라’의 ‘Roly-Poly’와 ‘가수 윤도현’의‘너를 보내고’ 라는 두 곡을 학습하여 작곡한 곡의 일부 악보이다. 참고로, 도 11에 도시한 결과물은 전술한 세 가 지 학습 방법으로 두 곡을 학습한 후 작곡한 곡의 멜로디이다. 도 11을 보면, 첫 번째 방법으로 학습한 곡의 멜로디의 음이 가장 안정적인 형태를 보인다. 이는 첫 곡을 100% 학습한 상태이기 때문에 두 번째 곡을 추가하여도 가장 음악적인 안정감을 보이는 것으로 추정된다. 두 번째와 세 번째 방법은 서로 비슷한 느낌의 결과를 나타내었다. 이는 두 가지의 학습 방법이 모두 두 곡을 번갈아 학습 하는 방법을 사용하기 때문이다. 하지만 뒷 부분에서는 두 번째 방법이 좀 더 안정감을 나타내었는데, 이는 곡 의 첫 번째 곡과 두 번째 곡의 학습한 비율 차이에 기인한다. 상기에서 설명 및 도시한 본 발명의 인공 신경망을 이용한 자동 작곡 방법은 특정 멜로디의 숫자화 단계(S10)부 터 인공 신경망 학습 단계(S30)를 통해 인공 신경망이존에 존재하는 특정 곡을 학습한 후 도입곡을 입력받으면, 학습한 곡에 기반하여 새로운 곡을 작곡 생성하도록 구성하였다. 그러나 상기와 같이 기존 곡을 학습하여 작곡한 곡이 비록 학습한 한 곡과 많이 다르다고 하더라도 일부 소절에 서 유사성을 나타낼 수 있는 바 저작권적으로 문제가 될 수도 있다. 본 발명의 변형 실시예는 이와 같이 일부 소절의 유사성에 의한 저작권 문제를 방지할 수 있는 방법에 해당한다. 본 발명의 변형 실시예는 전술한 특정 멜로디의 숫자화 단계(단계 1(S10)) 내지 도입부 시계열 데이터 입력 단 계(단계 4(S40))가 생략되고, 나머지 단계 즉, 박자 및 화성 후처리 단계(S60), 박자 및 멜로디 고도화 단계 (S70)를 통해 신규곡을 작곡하도록 구성된다. 구체적으로, 인공 신경망이 전술한 학습 단계를 거친 후 도입곡을 입력받는 대신, 학습되지 않은 인공 신경망이 무작위로 곡을 생성하거나 또는 무작위로 만든 곡을 입력받게 된다. 그리고, 이렇게 무작위로 생성되거나 또는 입력된 곡은 전술한 박자 및 화성 후처리 단계(S60), 박자 및 멜로디 고도화 단계(S70)를 거치게 되면, 음악 이론에 맞으면서 자연스럽고 어느 정도 수준 있는 곡을 생성할 수 있게 된다. 상기에서 설명 및 도시한 본 발명의 인공 신경망을 이용한 자동 작곡 방법은 컴퓨터와 같은 전기 전자 장치에 전술한 각 기능 내지 단계(S10 ~ S80)을 실행시키기 위한 프로그램을 기록한 전기 전자 장치로 읽을 수 있는 기 록 매체 형태로 제공될 수 있다. 상기에서 설명 및 도시한 바와 같은 본 발명의 구성에 의하여, 인공 신경망을 이용하여 새로운 멜로디, 박자 및 화성을 포함한 곡 전체를 자동으로 생성할 수 있게 되었다. 또한, 학습 곡의 느낌을 갖고 있으면서도 실제 작곡가 수준의 자연스러운 곡을 만들어 낼 수 있고, 더 나아가 박자나 멜로디를 보다 수준 높게 고도화할 수 있어 대중 음악에서와 같은 반복성을 구현할 수 있으며, 인공 신 경망을 이용하는 방법의 가장 큰 단점인 기존 곡의 느낌을 너무 많이 갖고 있는 문제점도 해결할 수 있게 되었다. 상기에서 본 발명의 바람직한 실시예가 특정 용어들을 사용하여 설명 및 도시되었지만 그러한 용어는 오로지 본 발명을 명확히 설명하기 위한 것일 뿐이며, 본 발명의 실시예 및 기술된 용어는 다음의 청구범위의 기술적 사상 및 범위로부터 이탈되지 않고서 여러가지 변경 및 변화가 가해질 수 있는 것은 자명한 일이다. 이와 같이 변형 된 실시예들은 본 발명의 사상 및 범위로부터 개별적으로 이해되어져서는 안되며, 본 발명의 청구범위 안에 속 한다고 해야 할 것이다."}
{"patent_id": "10-2016-0007882", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명에 따른 인공 신경망을 이용한 자동 작곡 방법의 처리 흐름을 도시한 블록 순서도. 도 2는 본 발명의 제1 학습곡의 일 례로서, '가수 티아라'의 'Roly-Poly'라는 곡의 일부 악보. 도 3은 본 발명에 따른 인공 신경망의 학습 패턴, 이에 따른 학습 데이터 생성 및 그 학습 과정을 보여주는 일 례. 도 4는 본 발명에 따른 화성 후처리 단계의 세부 단계를 도시한 블록 순서도. 도 5는 본 발명에 따른 화성 후보군 생성 단계의 구체적 처리 흐름을 도시한 블록 순서도. 도 6은 본 발명에 따른 각 마디별 화성 선정 단계의 구체적 처리 흐름을 도시한 블록 순서도. 도 7은 본 발명의 단계 S10 내지 단계 S60의 방법에 따라 출력된 실제 작곡 결과를 나타낸 일 시험예. 도 8은 본 발명에 따른 박자 및 멜로디 고도화 단계의 구체적 처리 흐름을 도시한 블록 순서도. 도 9은 본 발명의 일 실시예에 따른 인공 신경망 학습 방법을 도시한 개념도. 도 10 (a),(b) 및 (c)는 본 발명의 다양한 실시예에 따른 인공 신경망 학습 방법을 도시한 개념도. 도 11은 일 시험예로서, 본 발명의 인공 신경망이‘가수 티아라’의 ‘Roly-Poly’와 ‘가수 윤도현’의‘너를 보내고’ 라는 두 곡을 학습하여 작곡한 곡의 일부 악보."}
