{"patent_id": "10-2021-0052490", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0145656", "출원번호": "10-2021-0052490", "발명의 명칭": "호스트 및 이를 포함하는 컴퓨팅 시스템", "출원인": "에스케이하이닉스 주식회사", "발명자": "심준섭"}}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "각각 복수의 원소(element)들에 대한 복수의 임베딩 벡터들을 포함하는 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할하고, 상기 제1 특징 테이블 그룹으로 구성된 제1 임베딩 테이블을생성하고, 상기 제2 특징 테이블 그룹으로 구성된 제2 임베딩 테이블의 생성 동작을 요청하는 호스트; 및상기 호스트로부터 제공된 상기 생성 동작의 요청에 따라 상기 제2 임베딩 테이블을 생성하는 메모리 시스템;을포함하되,상기 호스트는,상기 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 상기 복수의 특징 테이블들을 상기 제1 특징테이블 그룹 및 상기 제2 특징 테이블 그룹으로 분할하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1 항에 있어서, 상기 복수의 특징 테이블들 각각은,대응되는 특징에 포함된 원소들 사이의 유사성을 기초로 수치화한 상기 대응되는 특징에 포함된 원소들에 대한임베딩 벡터들을 포함하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1 항에 있어서, 상기 호스트는,상기 복수의 특징 테이블들의 개수 및 상기 복수의 특징 테이블들에 포함된 모든 원소들의 개수를 기초로 기준선을 생성하고, 상기 기준선을 기초로 상기 복수의 특징 테이블들을 상기 제1 특징 테이블 그룹 및 상기 제2 특징 테이블 그룹으로 분할하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3 항에 있어서, 상기 기준선은,상기 복수의 특징 테이블들의 개수 및 상기 모든 원소들의 개수를 이용한 산술평균의 결과 값인 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제3 항에 있어서, 상기 호스트는,상기 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 상기 복수의 특징 테이블들을 오름차순으로정렬하고, 상기 복수의 특징 테이블들 중 상기 기준선을 기준으로 아래에 위치한 특징 테이블들을 상기 제1 특징 테이블 그룹으로 결정하고, 상기 복수의 특징 테이블들 중 상기 기준선을 기준으로 위에 위치한 특징 테이블들을 상기 제2 특징 테이블 그룹으로 결정하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1 항에 있어서, 상기 메모리 시스템은,상기 생성 동작의 요청에 응답하여, 상기 호스트로부터 상기 제2 임베딩 테이블의 크기에 대한 정보를수신하고, 상기 크기에 대한 정보를 기초로 상기 제2 임베딩 테이블을 저장할 메모리 영역을 할당하는 컴퓨팅시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6 항에 있어서, 상기 메모리 시스템은,공개특허 10-2022-0145656-3-상기 메모리 영역을 할당한 뒤, 상기 호스트로 상기 메모리 영역의 주소를 제공하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1 항에 있어서, 상기 호스트는,임베딩 학습을 통해 획득된 가중치를 기초로 상기 제1 임베딩 테이블을 업데이트하고, 상기 메모리 시스템으로상기 가중치를 기초로 상기 제2 임베딩 테이블의 업데이트 동작을 요청하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1 항에 있어서, 상기 호스트는,타겟 원소가 포함된 특징 테이블이 상기 제1 특징 테이블 그룹에 포함된 경우, 상기 제1 임베딩 테이블을 기초로 임베딩 연산을 수행하여 상기 타겟 원소의 임베딩 벡터를 획득하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1 항에 있어서, 상기 호스트는,타겟 원소가 포함된 특징 테이블이 상기 제2 특징 테이블 그룹에 포함된 경우, 상기 메모리 시스템으로 상기 타겟 원소의 임베딩 벡터를 요청하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10 항에 있어서, 상기 메모리 시스템은,상기 타겟 원소의 임베딩 벡터에 대한 요청에 응답하여, 상기 제2 임베딩 테이블을 기초로 임베딩 연산을 수행하여 상기 타겟 원소의 임베딩 벡터를 획득하고, 상기 호스트로 상기 획득된 임베딩 벡터를 제공하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1 항에 있어서, 상기 메모리 시스템은,상기 제2 임베딩 테이블을 저장하는 복수의 메모리 장치들;상기 호스트와 상기 메모리 시스템 사이에서 패킷을 중계하는 메모리 인터페이스;상기 제2 임베딩 테이블을 생성하는 임베딩 테이블 관리부; 및상기 제2 임베딩 테이블을 기초로 임베딩 연산을 수행하는 연산부;를 포함하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "각각 복수의 원소(element)들에 대한 복수의 임베딩 벡터들을 포함하는 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할하는 임베딩 테이블 분할부;상기 제1 특징 테이블 그룹으로 구성된 제1 임베딩 테이블을 생성하는 임베딩 테이블 관리부; 및메모리 시스템으로 상기 제2 특징 테이블 그룹으로 구성된 제2 임베딩 테이블의 생성 동작을 요청하는 임베딩동작 제어부를 포함하되,상기 임베딩 테이블 분할부는,상기 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 상기 복수의 특징 테이블들을 상기 제1 특징테이블 그룹 및 상기 제2 특징 테이블 그룹으로 분할하는 호스트."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13 항에 있어서, 상기 복수의 특징 테이블들 각각은,대응되는 특징에 포함된 원소들 사이의 유사성을 기초로 수치화한 상기 대응되는 특징에 포함된 원소들에 대한임베딩 벡터들을 포함하는 호스트.공개특허 10-2022-0145656-4-청구항 15 제13 항에 있어서, 상기 임베딩 테이블 분할부는,상기 복수의 특징 테이블들의 개수 및 상기 복수의 특징 테이블들에 포함된 모든 원소들의 개수를 기초로 기준선을 생성하고, 상기 기준선을 기초로 상기 복수의 특징 테이블들을 상기 제1 특징 테이블 그룹 및 상기 제2 특징 테이블 그룹으로 분할하는 호스트."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15 항에 있어서, 상기 기준선은,상기 복수의 특징 테이블들의 개수 및 상기 모든 원소들의 개수를 이용한 산술평균의 결과 값인 호스트."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제15 항에 있어서, 상기 임베딩 테이블 분할부는,상기 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 상기 복수의 특징 테이블들을 오름차순으로정렬하고, 상기 복수의 특징 테이블들 중 상기 기준선을 기준으로 아래에 위치한 특징 테이블들을 상기 제1 특징 테이블 그룹으로 결정하고, 상기 복수의 특징 테이블들 중 상기 기준선을 기준으로 위에 위치한 특징 테이블들을 상기 제2 특징 테이블 그룹으로 결정하는 호스트."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제13 항에 있어서, 상기 임베딩 테이블 관리부는,임베딩 학습을 통해 획득된 가중치를 기초로 상기 제1 임베딩 테이블을 업데이트하고,상기 임베딩 동작 제어부는,상기 메모리 시스템으로 상기 가중치를 기초로 상기 제2 임베딩 테이블의 업데이트 동작을 요청하는 호스트."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제13 항에 있어서, 상기 임베딩 동작 제어부는,타겟 원소가 포함된 특징 테이블이 상기 제1 특징 테이블 그룹에 포함된 경우, 상기 제1 임베딩 테이블을 기초로 임베딩 연산을 수행하여 상기 타겟 원소의 임베딩 벡터를 획득하는 호스트."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제13 항에 있어서, 상기 임베딩 동작 제어부는,타겟 원소가 포함된 특징 테이블이 상기 제2 특징 테이블 그룹에 포함된 경우, 상기 메모리 시스템으로 상기 타겟 원소의 임베딩 벡터를 요청하고, 상기 메모리 시스템으로부터 상기 타겟 원소의 임베딩 벡터를 수신하는 호스트."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "각각 복수의 원소(element)들에 대한 복수의 임베딩 벡터들을 포함하는 복수의 특징 테이블들을 복수의 특징 테이블 그룹들로 분할하는 임베딩 테이블 분할부; 및각각 상기 복수의 특징 테이블 그룹들 중 어느 하나로 구성된 임베딩 테이블을 생성하는 복수의 연산 처리 장치들;을 포함하되, 상기 임베딩 테이블 분할부는,상기 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 상기 복수의 특징 테이블들을 상기 복수의특징 테이블 그룹들로 분할하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "공개특허 10-2022-0145656-5-제21 항에 있어서, 상기 복수의 특징 테이블들 각각은,대응되는 특징에 포함된 원소들 사이의 유사성을 기초로 수치화한 상기 대응되는 특징에 포함된 원소들에 대한임베딩 벡터들을 포함하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제21 항에 있어서, 상기 복수의 연산 처리 장치들은,호스트 및 복수의 메모리 시스템들을 포함하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0052490", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 기술은 전자 장치에 관한 것으로, 본 기술에 따른, 임베딩 연산 시 데이터 이동량을 감소시키고, 효율적으로 임베딩 연산을 처리할 수 있는 컴퓨팅 시스템은, 각각 복수의 원소(element)들에 대한 복수의 임베딩 벡터들을 포함하는 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할하고, 상기 제1 특징 테이블 그룹으로 구성된 제1 임베딩 테이블을 생성하고, 상기 제2 특징 테이블 그룹으로 구성된 제2 임베딩 테이 블의 생성 동작을 요청하는 호스트 및 상기 호스트로부터 제공된 상기 생성 동작의 요청에 따라 상기 제2 임베딩 테이블을 생성하는 메모리 시스템을 포함하되, 상기 호스트는, 상기 복수의 특징 테이블들 각각에 포함된 원소들 의 개수를 기초로 상기 복수의 특징 테이블들을 상기 제1 특징 테이블 그룹 및 상기 제2 특징 테이블 그룹으로 분할한다."}
{"patent_id": "10-2021-0052490", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 전자 장치에 관한 것으로, 보다 구체적으로 본 발명은 호스트 및 이를 포함하는 컴퓨팅 시스템에 관 한 것이다."}
{"patent_id": "10-2021-0052490", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "스토리지 장치는 컴퓨터나 스마트폰 등과 같은 호스트 장치의 제어에 따라 데이터를 저장하는 장치이다. 스토리 지 장치는 데이터를 저장하는 메모리 장치와 메모리 장치를 제어하는 메모리 컨트롤러를 포함할 수 있다. 메모 리 장치는 휘발성 메모리 장치 (Volatile Memory)와 비휘발성 메모리 장치 (Non Volatile Memory)로 구분될 수 있다. 휘발성 메모리 장치는 전원이 공급되는 동안에만 데이터를 저장하고, 전원 공급이 차단되면 저장된 데이터가 소 멸되는 메모리 장치일 수 있다. 휘발성 메모리 장치에는 정적 랜덤 액세스 메모리 (Static Random Access Memory; SRAM), 동적 랜덤 액세스 메모리 (Dynamic Random Access Memory; DRAM) 등이 포함될 수 있다. 비휘발성 메모리 장치는 전원이 차단되어도 데이터가 소멸되지 않는 메모리 장치로서, 롬(Read Only Memory; ROM), PROM (Programmable ROM), EPROM (Electrically Programmable ROM), EEPROM (Electrically Erasable and Programmable ROM) 및 플래시 메모리(Flash Memory) 등이 있다."}
{"patent_id": "10-2021-0052490", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 실시 예는 임베딩 연산 시 데이터 이동량을 감소시키고, 효율적으로 임베딩 연산을 처리할 수 있는 호스트 및 이를 포함하는 컴퓨팅 시스템을 제공한다."}
{"patent_id": "10-2021-0052490", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 실시 예에 따른 컴퓨팅 시스템은, 각각 복수의 원소(element)들에 대한 복수의 임베딩 벡터들을 포함 하는 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할하고, 상기 제1 특징 테 이블 그룹으로 구성된 제1 임베딩 테이블을 생성하고, 상기 제2 특징 테이블 그룹으로 구성된 제2 임베딩 테이 블의 생성 동작을 요청하는 호스트 및 상기 호스트로부터 제공된 상기 생성 동작의 요청에 따라 상기 제2 임베 딩 테이블을 생성하는 메모리 시스템을 포함하되, 상기 호스트는, 상기 복수의 특징 테이블들 각각에 포함된 원 소들의 개수를 기초로 상기 복수의 특징 테이블들을 상기 제1 특징 테이블 그룹 및 상기 제2 특징 테이블 그룹 으로 분할한다. 본 발명의 실시 예에 따른 호스트는, 각각 복수의 원소들에 대한 복수의 임베딩 벡터들을 포함하는 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할하는 임베딩 테이블 분할부, 상기 제1 특징 테이블 그룹으로 구성된 제1 임베딩 테이블을 생성하는 임베딩 테이블 생성부 및 메모리 시스템으로 상기 제2 특징 테이블 그룹으로 구성된 제2 임베딩 테이블의 생성 동작을 요청하는 임베딩 동작 제어부를 포함하되, 상기 임베딩 테이블 분할부는, 상기 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 상기 복수의 특징 테이블들을 상기 제1 특징 테이블 그룹 및 상기 제2 특징 테이블 그룹으로 분할한다. 본 발명의 실시 예에 따른 컴퓨팅 시스템은, 각각 복수의 원소들에 대한 복수의 임베딩 벡터들을 포함하는 복수 의 특징 테이블들을 복수의 특징 테이블 그룹들로 분할하는 임베딩 테이블 분할부 및 각각 상기 복수의 특징 테이블 그룹들 중 어느 하나로 구성된 임베딩 테이블을 생성하는 복수의 연산 처리 장치들을 포함하되, 상기 임베 딩 테이블 분할부는, 상기 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 상기 복수의 특징 테이 블들을 상기 복수의 특징 테이블 그룹들로 분할한다."}
{"patent_id": "10-2021-0052490", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 기술에 따르면, 임베딩 연산 시 데이터 이동량을 감소시키고, 효율적으로 임베딩 연산을 처리할 수 있는 호 스트 및 이를 포함하는 컴퓨팅 시스템을 제공한다."}
{"patent_id": "10-2021-0052490", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서 또는 출원에 개시되어 있는 본 발명의 개념에 따른 실시 예들에 대해서 특정한 구조적 내지 기능적 설명들은 단지 본 발명의 개념에 따른 실시 예를 설명하기 위한 목적으로 예시된 것으로, 본 발명의 개념에 따 른 실시 예들은 다양한 형태로 실시될 수 있으며 본 명세서 또는 출원에 설명된 실시 예들에 한정되는 것으로 해석되어서는 아니 된다. 도 1은 본 발명의 일 실시 예에 따른 컴퓨팅 시스템의 일 예를 설명하기 위한 도면이다. 도 1을 참조하면, 컴퓨팅 시스템은 호스트 및 메모리 시스템을 포함할 수 있다. 호스트는 호스트 프로세서 및 호스트 메모리를 포함할 수 있다. 호스트 프로세서는 데이터의 처리 및 컴퓨팅 시스템의 구성 요소들의 동작들에 대한 제어를 수행하기 위한 회로, 인터페이스들 또는 프로그램 코드를 포함할 수 있다. 예를 들어, 호스트 프로세서는 CPU, AP, DSP(Digital Signal Processor) 등과 같은 범용 프로세서, GPU, VPU(Vision Processing Unit)와 같은 그래픽 전용 프로세서 또는 NPU와 같은 인공지능 전용 프로세서 등을 포함할 수 있다. 호스트 메모리는 컴퓨팅 시스템의 동작에 필요한 데이터, 명령들 또는 프로그램 코드들을 저장하는 SRAM 또는 DRAM 등을 포함할 수 있다. 또한, 비휘발성 메모리를 포함할 수도 있다. 일 실시 예에서, 호스트 메 모리에는 하나 이상의 오퍼레이팅 시스템(operating system; OS)들 및 가상 머신(virtual machine; VM)들 을 실행하도록 동작할 수 있는 프로그램 코드들이 저장될 수 있다. 호스트 프로세서는 호스트 메모리에 저장된 프로그램 코드들을 구동시켜 하나 이상의 오퍼레이팅 시 스템들 및 가상 머신들을 실행시킬 수 있다. 이와 같은 방식으로, 호스트 프로세서는 컴퓨팅 시스템의 구성 요소들의 동작을 제어할 수 있다. 호스트는 USB (Universal Serial Bus), SATA (Serial AT Attachment), SAS (Serial Attached SCSI), HSIC (High Speed Interchip), SCSI (Small Computer System Interface), PCI (Peripheral Component Interconnection), PCIe (PCI express), NVMe (NonVolatile Memory express), UFS (Universal Flash Storage), SD (Secure Digital), MMC (MultiMedia Card), eMMC (embedded MMC), DIMM (Dual In-line Memory Module), RDIMM (Registered DIMM), LRDIMM (Load Reduced DIMM) 등과 같은 다양한 통신 방식들 중 적어도 하 나를 이용하여 메모리 시스템과 통신할 수 있다. 메모리 시스템은 호스트의 제어에 따라 데이터를 저장하는 장치일 수 있다. 메모리 시스템은 호스트와의 통신 방식에 따라서 다양한 종류의 메모리 시스템들 중 어느 하나로 제 조될 수 있다. 예를 들면, 메모리 시스템은 SSD, MMC, eMMC, RS-MMC, micro-MMC 형태의 멀티 미디어 카드 (multimedia card), SD, mini-SD, micro-SD 형태의 시큐어 디지털(secure digital) 카드, USB(universal storage bus) 저장 장치, UFS(universal flash storage) 장치, PCMCIA(personal computer memory card international association) 카드 형태의 저장 장치, PCI(peripheral component interconnection) 카드 형태의 저장 장치, PCI-E(PCI express) 카드 형태의 저장 장치, CF(compact flash) 카드, 스마트 미디어(smart media) 카드, 메모리 스틱(memory stick) 등과 같은 다양한 종류의 저장 장치들 중 어느 하나로 구성될 수 있다. 메모리 시스템은 다양한 종류의 패키지(package) 형태들 중 어느 하나로 제조될 수 있다. 예를 들면, 메모 리 시스템은 POP(package on package), SIP(system in package), SOC(system on chip), MCP(multi-chip package), COB(chip on board), WFP(wafer-level fabricated package), WSP(wafer-level stack package) 등과 같은 다양한 종류의 패키지 형태들 중 어느 하나로 제조될 수 있다. 일 실시 예에서, 메모리 시스템은 풀드 메모리일 수 있다. 풀드 메모리는 복수의 메모리 장치들이 병렬적 으로 연결되는 구조일 수 있다. 메모리 시스템은 복수의 메모리 장치들, 메모리 컨트롤러 및 연산부를 포함할 수 있다. 메모리 장치는 데이터를 저장할 수 있다. 메모리 장치는 메모리 컨트롤러의 제어에 응답하여 동 작한다. 메모리 장치는 데이터를 저장하는 복수의 메모리 셀들을 포함하는 메모리 셀 어레이(미도시)를 포 함할 수 있다. 메모리 장치는 메모리 컨트롤러로부터 커맨드 및 주소를 수신하고, 메모리 셀 어레이 중 주소에 의해 선택된 영역을 액세스하도록 구성된다. 메모리 장치는 주소에 의해 선택된 영역에 대해 커맨드가 지시하는 동작을 수행할 수 있다. 예를 들면, 메모리 장치는 쓰기 동작 (프로그램 동작), 리드 동작 및 소거 동작을 수행할 수 있다. 프로그램 동작 시에, 메모리 장치는 주소에 의해 선택된 영역에 데이터를 프로그램 할 것 이다. 리드 동작 시에, 메모리 장치는 주소에 의해 선택된 영역으로부터 데이터를 읽을 것이다. 소거 동작 시에, 메모리 장치는 주소에 의해 선택된 영역에 저장된 데이터를 소거할 것이다. 메모리 컨트롤러는 메모리 시스템의 전반적인 동작을 제어할 수 있다. 메모리 시스템에 전원이 인가되면, 메모리 컨트롤러는 펌웨어(firmware, FW)를 실행할 수 있다. 메모리 컨트롤러는 호스트의 요청(request)에 따라 프로그램 동작, 리드 동작 또는 소거 동작 등을 수행하도록 메모리 장치를 제어할 수 있다. 프로그램 동작 시, 메모리 컨트롤러는 쓰기 커맨드, 주소 및 데이터를 메모리 장치에 제공할 수 있다. 리드 동작 시, 메모리 컨트롤러는 리드 커맨드 및 주소 를 메모리 장치에 제공할 수 있다. 소거 동작 시, 메모리 컨트롤러는 소거 커맨드 및 주소를 메모리 장치에 제공할 수 있다. 실시 예에서, 메모리 컨트롤러가 적어도 둘 이상의 메모리 장치들을 제어할 수 있다. 이 경우, 메모 리 컨트롤러는 동작 성능의 향상을 위해 메모리 장치들을 인터리빙 방식에 따라 제어할 수 있다. 인 터리빙 방식은 적어도 둘 이상의 메모리 장치들에 대한 동작이 중첩되도록 제어하는 방식일 수 있다. 연산부는 덧셈 연산, 곱 연산 등과 같은 수학적 연산을 수행할 수 있다. 예를 들어, 연산부는 수학적 연산을 수행하기 위한 컴퓨팅 유닛을 포함할 수 있다. 한편, 도 1에 도시된 실시 예에서, 메모리 컨트롤러와 연산부는 서로 별개의 독립적인 장치인 것으로 도시되어 있으나, 반드시 이에 한정되는 것은 아니다. 예를 들어, 연산부는 메모리 컨트롤러의 일 구 성으로 구현될 수 있다. 일 실시 예에서, 컴퓨팅 시스템은 추천 시스템을 제공하기 위한 장치일 수 있다. 이때, 추천 시스템은 사용 자의 정보를 기반으로 사용자가 관심을 가질만한 아이템(예를 들어, 영화, 음악, 뉴스, 책, 상품 등)를 추천하 는 것일 수 있다. 일 실시 예에서, 컴퓨팅 시스템은 딥러닝(deep learning) 기반의 추천 모델을 이용하여 추천 시스템을 제공할 수 있다. 이때, 추천 모델은 복수의 학습 데이터 셋을 이용하여 학습되는 학습 모델일 수 있다. 예를 들어, 딥러닝 기반의 추천 모델은 복수의 신경망(neural network)들을 포함할 수 있고, 복수의 신경 망들은 복수의 학습 데이터 셋을 이용하여 학습될 수 있다. 신경망은 복수의 층들(layers)을 포함할 수 있다. 예를 들어, 신경망은 입력 층(input layer), 은닉 층(hidden layer), 출력 층(output layer)를 포함할 수 있다. 또한, 신경망은 복수의 은닉 층들을 포함할 수 있다. 복수의 은닉 층들을 포함하는 신경망을 심층 신경망 (Deep Neural Network)이라고 하고, 심층 신경망을 학습시키는 것을 딥러닝이라고 한다. 이하, 신경망을 학습시 킨다는 것은 신경망의 파라미터를 학습시킨다는 것으로 이해될 수 있다. 또한, 학습된 신경망은 학습된 파라미 터가 적용된 신경망으로 이해될 수 있다. 일 실시 예에서, 컴퓨팅 시스템의 추천 시스템은 호스트의 제어에 따라 제공될 수 있다. 예를 들어, 호스트는 호스트 프로세서 및 호스트 메모리를 포함할 수 있다. 호스트 프로세서는 CPU, AP, DSP(Digital Signal Processor) 등과 같은 범용 프로세서, GPU, VPU(Vision Processing Unit)와 같은 그래 픽 전용 프로세서 또는 NPU와 같은 인공지능 전용 프로세서 등이 될 수 있다. 호스트 메모리는 추천 시스 템을 제공하기 위한 운영 체제 또는 응용 프로그램 등을 저장할 수 있다. 딥 러닝 기반의 추천 시스템은 메모리 집약적인(memory-intensive) 임베딩 연산을 수행하므로, 대역폭 (bandwidth) 문제를 발생시킬 수 있고, 많은 양의 서비스 데이터가 요구되므로 호스트 메모리의 용량이 부 족한 문제가 발생할 수 있다. 따라서, 임베딩을 효율적으로 하기 위해 컴퓨팅 시스템은 메모리 시스템(20 0)을 이용하여 임베딩을 수행할 수 있다. 일 실시 예에서, 호스트는 타겟 데이터에 대한 임베딩 벡터를 획득하도록 메모리 시스템을 제어할 수 있다. 예를 들어, 호스트는 메모리 시스템으로 임베딩 벡터를 요청할 수 있다. 일 실시 예에서, 복수 의 메모리 장치들은 복수의 임베딩 벡터(embedding vector)들을 포함하는 임베딩 테이블(embedding table)을 저장할 수 있다. 메모리 시스템은 임베딩 테이블을 기초로 호스트로부터 요청받은 임베딩 벡터를 제공할 수 있다. 호스트는 임베딩 벡터를 이용하여 기 설정된 알고리즘에 따라 추천 결과를 출력하기 위한 다양한 연산들을 수행할 수 있다. 또한, 일 실시 예에서, 호스트는 호스트 메모리에 임베딩 테이블을 저장할 수 있다. 호스트는 호스트 메모리에 저장된 임베딩 테이블을 기초로 임베딩 연산을 수행하여 임베딩 벡터를 획득할 수 있다. 다시 말하면, 컴퓨팅 시스템은 임베딩 연산에 이용되는 임베딩 테이블을 분할하고, 분할된 임베딩 테이블들 을 호스트와 메모리 시스템에 각각 저장할 수 있다. 예를 들어, 컴퓨팅 시스템은 임베딩 테이블 을 제1 임베딩 테이블 및 제2 임베딩 테이블로 분할하고, 제1 임베딩 테이블을 호스트에 저장하고, 제2 임 베딩 테이블을 메모리 시스템에 저장할 수 있다. 따라서, 컴퓨팅 시스템은 호스트와 메모리 시스 템에 각각 저장된 임베딩 테이블을 이용하여 임베딩 연산을 분산 처리할 수 있다. 도 2는 본 발명의 일 실시 예에 따른 컴퓨팅 시스템의 다른 예를 설명하기 위한 도면이다. 도 2를 참조하면, 컴퓨팅 시스템은 호스트 및 복수의 메모리 시스템들(200-1~200-n)을 포함할 수 있다. 예를 들어, 컴퓨팅 시스템은 호스트가 복수의 메모리 시스템들(200-1~200-n)과 연결된 구조를 나타낼 수 있다. 이때, 복수의 메모리 시스템들(200-1~200-n)은 도 1의 메모리 시스템이 복수 개인 것을 나타낼 수 있다. 컴퓨팅 시스템은 임베딩 연산에 이용되는 임베딩 테이블을 분할하고, 분할된 임베딩 테이블들을 호스트 와 복수의 메모리 시스템들(200-1~200-n)에 각각 저장할 수 있다. 일 실시 예에서, 컴퓨팅 시스템은 임베딩 테이블을 제1 임베딩 테이블 및 제2 임베딩 테이블로 분할하고, 제1 임베딩 테이블을 호스트에 저장하고, 제2 임베딩 테이블을 복수의 메모리 시스템들(200-1~200-n)에 저 장할 수 있다. 또한, 일 실시 예에서, 컴퓨팅 시스템은 임베딩 테이블을 호스트 및 복수의 메모리 시스템들(200- 1~200-n)의 개수에 따라 분할하고, 분할된 임베딩 테이블들을 각각 호스트 및 복수의 메모리 시스템들 (200-1~200-n)에 저장할 수 있다. 예를 들어, 호스트 및 복수의 메모리 시스템들(200-1~200-n)은 각각 하 나의 연산 처리 장치일 수 있다. 이 경우, 컴퓨팅 시스템은 임베딩 테이블에 포함된 복수의 특징 테이블들 을 복수의 특징 테이블 그룹들로 분할할 수 있다. 이후, 복수의 연산 처리 장치들은 각각 복수의 특징 테이블 그룹들 중 어느 하나로 구성된 임베딩 테이블을 생성할 수 있다. 여기서, 복수의 연산 처리 장치들은 호스트 및 복수의 메모리 시스템들(200-1~200-n)을 포함할 수 있다. 한편, 컴퓨팅 시스템이 복수의 특징 테 이블들을 분할하는 동작은 도 7을 참조하여 자세하게 설명하도록 한다. 이에 따라, 컴퓨팅 시스템은 호스트와 복수의 메모리 시스템들(200-1~200-n)에 각각 저장된 임베딩 테 이블을 이용하여 임베딩 연산을 분산 처리할 수 있다. 도 3은 본 발명의 일 실시 예에 따른 임베딩 테이블을 설명하기 위한 도면이다. 도 3을 참조하면, 호스트 또는 메모리 시스템에 저장되는 임베딩 테이블이 도시되어 있다. 임베딩 테이블은 복수의 학습 데이터들을 이용한 임베딩 학습을 통해 획득된 벡터 정보들을 포함할 수 있다. 예 를 들어, 임베딩 테이블은 기 학습된 학습 모델의 아이템들에 대한 벡터 정보들을 포함할 수 있다. 여기서, 학 습 모델은 인공지능 모델을 의미할 수 있고, 인공지능 모델은 학습을 통해 만들어진 것을 특징으로 할 수 있다. 구체적으로, 임베딩 테이블은 카테고리로 분류 가능한 범주형 데이터 및 그에 대응되는 임베딩 벡터쌍의 모음일 수 있고, 학습 데이터들은 각각 범주형 데이터일 수 있다. 범주형 데이터들은 임베딩 알고리즘을 이용하여 자연 어를 상호 유사성을 가지는 벡터 형태로 수치화될 수 있다. 예를 들어, 벡터는 '(3, 5)', '(0.1, -0.5, 2, 1.2)' 와 같이 여러 개의 정수 혹은 부동 소수로 이루어진 수집합일 수 있다. 즉, 임베딩 테이블은 카테고리 별 로 분류되도록 학습된 학습 모델의 범주형 데이터들 및 범주형 데이터의 벡터 정보들의 집합을 의미할 수 있다. 임베딩 벡터의 기울기 및 임베팅 벡터의 형태 등의 벡터 값이 유사할 수록 의미론적으로 유사한 의미의 단어일 수 있다. 한편, 카테고리는 '특징(feature)'으로 지칭될 수 있고, 학습 데이터, 범주형 데이터 또는 아이템은 '원소 (element)'로 지칭될 수 있다. 본 발명의 일 실시 예에 따르면, 임베딩 테이블은 3차원으로 구성될 수 있다. 구체적으로, 도 3을 참조하면, 임 베딩 테이블은 'Table sizes', '# of features' 및 'dimension'을 포함하는 3차원으로 구성될 수 있다. 여기서, 'Table sizes'는 특정 특징에 포함되는 원소들의 개수를 의미할 수 있다. 예를 들어, <영화이름>이라는 특징에 '해리포터' 및 '슈렉'이 포함되는 경우, 원소가 2개일 수 있다. 그리고, '# of features'는 특징 종류의 개수를 의미할 수 있다. 예를 들어, 임베딩 테이블이 <영화이름> 및 <영화장르>를 포함하는 경우, 특징 종류의 개수는 2개일 수 있다. 마지막으로, 'dimension'는 임베딩 벡터의 차원을 의미할 수 있다. 즉, 벡터에 포함되는 수의 개수를 의미할 수 있다. '(0.1, -0.5, 2, 1.2)'는 4개의 수를 포함하므로, 4개의 차원일 수 있다. 도 4는 본 발명의 일 실시 예에 따른 특징 테이블을 설명하기 위한 도면이다. 도 4를 참조하면, 임베딩 테이블은 복수의 특징 테이블들(feature 1~feature n)로 구성될 수 있다. 복수의 특징 테이블들(feature 1~feature n)은 각각 복수의 원소들에 대한 복수의 임베딩 벡터들을 포함할 수 있다. 각 특징 테이블들(feature 1~feature n)은 대응되는 특징에 포함된 원소들에 대한 임베딩 벡터들을 포함 할 수 있다. 구체적으로, 각 특징 테이블들(feature 1~feature n)은 대응되는 특징에 포함된 원소들 사이의 유 사성을 기초로 수치화한 임베딩 벡터들을 포함할 수 있다. 일 실시 예에서, 복수의 특징 테이블들(feature 1~feature n)은 원소들의 개수가 다를수 있다. 예를 들어, 제1 특징 테이블(feature 1)은 11개의 원소들에 대한 임베딩 벡터들을 포함할 수 있다. 제2 특징 테이블(feature 2)은 4개의 원소들에 대한 임베딩 벡터들을 포함할 수 있다. 제3 특징 테이블(feature 3)은 7개의 원소들에 대한 임베딩 벡터들을 포함할 수 있다. 제4 특징 테이블(feature 4)은 2개의 원소들에 대한 임베딩 벡터들을 포함할 수 있다. 한편, 특징 테이블에 포함된 원소들의 개수가 많을수록 해당 특징 테이블에 포함된 원소 별 룩업 횟수는 적을 수 있다. 이 경우, 해당 특징 테이블에 포함된 원소들은 낮은 시간 지역성(temporal locality)을 가질 수 있다. 반대로, 특징 테이블에 포함된 원소들의 개수가 적을수록 해당 특징 테이블에 포함된 원소 별 룩업 횟수는 많을 수 있다. 이 경우, 해당 특징 테이블에 포함된 원소들은 높은 시간 지역성을 가질 수 있다. 따라서, 특징 테이 블들의 시간 지역성을 고려하지 않고 단일 프로세서를 이용하여 임베딩 연산을 처리하면, 비효율적인 메모리 액 세스가 발생할 수 있다. 예를 들어, 임베딩 연산이 호스트에서 처리되는 경우, CPU는 멀티 레벨의 캐시 하 이어라키(cache hierarchy) 구조를 가지므로, CPU가 시간 지역성이 낮은 원소들을 포함하는 특징 테이블을 처리 하는 것은 비효율적일 수 있다. 반대로, 시간 지역성이 높은 원소들을 포함하는 특징 테이블은 호스트의 CPU에 의해 처리되는 것이 효율적일 수 있다. 따라서, 본 발명의 일 실시 예에 따르면, 임베딩 테이블을 분할하고, 분할된 임베딩 테이블들을 각각 호스트 및 메모리 시스템에서 생성함으로써, 시간 지역성을 고려한 효율적인 임베딩 동작을 수행할 수 있다. 도 5는 본 발명의 일 실시 예에 따른 호스트를 설명하기 위한 도면이다. 도 5를 참조하면, 호스트는 임베딩 테이블 분할부, 제1 임베딩 테이블 관리부, 임베딩 동작 제 어부 및 호스트 인터페이스를 포함할 수 있다. 임베딩 테이블 분할부는 임베딩 테이블을 분할할 수 있다. 예를 들어, 임베딩 테이블 분할부는 임베 딩 테이블에 포함된 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할할 수 있 다. 일 실시 예에서, 임베딩 테이블 분할부는 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 복 수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할할 수 있다. 제1 임베딩 테이블 관리부는 제1 특징 테이블 그룹으로 구성된 제1 임베딩 테이블을 생성할 수 있다. 또한, 제1 임베딩 테이블 관리부는 임베딩 동작 제어부의 제어에 따라 제1 임베딩 테이블을 업데이트 할 수 있다. 임베딩 동작 제어부는 호스트 및 메모리 시스템의 임베딩 동작을 제어할 수 있다. 일 실시 예에 서, 임베딩 동작은 임베딩 테이블 생성 동작(또는, 초기 설정(initialization) 동작), 추론(inference) 동작 및 학습(training) 동작을 포함할 수 있다. 추론 동작은 임베딩 테이블로부터 임베딩 벡터를 룩업하는 동작일 수 있다. 학습 동작은 그라디언트를 계산하고, 임베딩 테이블을 업데이트하는 동작일 수 있다. 여기서, 그라디언트 는 임베딩 테이블을 업데이트하기 위한 데이터로, 가중치(weight)를 포함하는 데이터일 수 있다. 일 실시 예에서, 임베딩 동작 제어부는 제1 임베딩 테이블을 생성하도록 제1 임베딩 테이블 관리부를 제어할 수 있다. 또한, 임베딩 동작 제어부는 메모리 시스템으로 제2 특징 테이블 그룹으로 구성된 제2 임베딩 테이블의 생성 동작을 요청할 수 있다. 예를 들어, 임베딩 동작 제어부는 호스트 인터페이스 를 통해 제2 임베딩 테이블의 생성 동작을 요청할 수 있다. 일 실시 예에서, 임베딩 동작 제어부는 제1 임베딩 테이블을 기초로 임베딩 연산을 수행하여 타겟 원소의 임베딩 벡터를 획득하거나, 메모리 시스템으로 타겟 원소의 임베딩 벡터를 요청할 수 있다. 일 실시 예에서, 임베딩 동작 제어부는 임베딩 학습을 통해 획득된 가중치를 기초로 제1 임베딩 테이블 및 제2 임베딩 테이블을 업데이트할 수 있다. 예를 들어, 임베딩 동작 제어부는 가중치를 기초로 제1 임베딩 테이블을 업데이트하도록 제1 임베딩 테이블 관리부를 제어할 수 있다. 또한, 임베딩 동작 제어부는 메모리 시스템으로 가중치를 기초로 제2 임베딩 테이블의 업데이트 동작을 요청할 수 있다. 도 6은 본 발명의 일 실시 예에 따른 메모리 시스템을 설명하기 위한 도면이다. 도 6의 복수의 메모리 장치들, 메모리 컨트롤러 및 연산부는 도 1의 복수의 메모리 장치들, 메모리 컨트롤러 및 연산부를 나타낼 수 있다.일 실시 예에서, 복수의 메모리 장치들은 제2 임베딩 테이블을 저장할 수 있다. 메모리 컨트롤러는 메모리 인터페이스 및 제2 임베딩 테이블 관리부를 포함할 수 있다. 메모리 인터페이스는 호스트와 메모리 시스템 사이에서 패킷을 중계할 수 있다. 예를 들어, 메 모리 인터페이스는 호스트로부터 수신된 요청들을 제2 임베딩 테이블 관리부 및 연산부로 전달할 수 있다. 호스트 및 메모리 시스템 사이의 통신 방법은 도 11을 참조하여 자세하게 설명하도 록 한다. 제2 임베딩 테이블 관리부는 제2 임베딩 테이블을 생성할 수 있다. 예를 들어, 제2 임베딩 테이블 관리부 는 제2 임베딩 테이블을 저장할 메모리 영역을 할당하도록 복수의 메모리 장치들을 제어할 수 있다. 일 실시 예에서, 제2 임베딩 테이블 관리부는 호스트의 업데이트 요청에 따라 가중치를 기초로 제2 임베딩 테이블을 업데이트할 수 있다. 일 실시 예에서, 연산부는 제2 임베딩 테이블을 기초로 임베딩 연산을 수행할 수 있다. 임베딩 연산을 통 해 획득된 임베딩 데이터는 메모리 인터페이스를 통해 호스트로 제공될 수 있다. 도 7은 본 발명의 일 실시 예에 따른 복수의 특징 테이블들을 분할하는 동작을 설명하기 위한 도면이다. 도 7에 도시된 그래프에서 세로축은 원소들의 개수를 나타내고, 가로축은 특징 테이블들의 순번을 나타낼 수 있 다. 일 실시 예에서, 임베딩 테이블 분할부는 복수의 특징 테이블들의 개수 및 복수의 특징 테이블들에 포함된 모든 원소들의 개수를 기초로 기준선을 생성할 수 있다. 여기서, 기준선은 복수의 특징 테이블들의 개수 및 모 든 원소들의 개수를 이용한 산술평균의 결과 값일 수 있다. 예를 들어, 기준선은 아래의 수학식 1을 통해 산출 될 수 있다. 수학식 1"}
{"patent_id": "10-2021-0052490", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "수학식 1에서, slope는 기준선, # of Element는 원소들의 개수, # of features는 복수의 특징 테이블들의 개수 를 의미한다. 일 실시 예에서, 임베딩 테이블 분할부는 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 복 수의 특징 테이블들을 오름차순으로 정렬할 수 있다. 또한, 임베딩 테이블 분할부는 기준선을 기초로 복수 의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할할 수 있다. 예를 들어, 임베딩 테이블 분할부는 복수의 특징 테이블들 중 기준선을 기준으로 아래에 위치한 특징 테이 블들을 제1 특징 테이블 그룹으로 결정할 수 있다. 또한, 임베딩 테이블 분할부는 복수의 특징 테이블들 중 기준선을 기준으로 위에 위치한 특징 테이블들을 제2 특징 테이블 그룹으로 결정할 수 있다. 한편, 도 7을 참조하여 설명된 복수의 특징 테이블들을 분할하는 동작은 일 예시에 불과하다. 따라서, 복수의 특징 테이블들을 분할하는 동작은 실시 예에 따라 다양할 수 있다. 도 8은 본 발명의 일 실시 예에 따른 임베딩 테이블을 생성하는 동작을 설명하기 위한 도면이다. 도 8을 참조하면, 임베딩 테이블 분할부는 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테 이블 그룹으로 분할할 수 있다. 이후, 임베딩 테이블 분할부는 제1 특징 테이블 그룹에 대한 정보 (table_info 1)를 제1 임베딩 테이블 관리부로 제공할 수 있다. 제1 임베딩 테이블 관리부는 제1 특징 테이블 그룹에 대한 정보(table_info 1)를 기초로 제1 임베딩 테이 블을 생성할 수 있다. 예를 들어, 제1 임베딩 테이블 관리부는 제1 임베딩 테이블이 저장될 메모리 영역을할당하도록 호스트 메모리를 제어할 수 있다. 호스트 메모리는 메모리 영역을 할당한 후, 할당된 메 모리 영역에 제로 값, 랜덤 값 등을 저장할 수 있다. 따라서, 최초의 임베딩 테이블은 제로 값, 랜덤 값 등과 같은 더미 데이터들로 구성되지만, 임베딩 학습을 통해 임베딩 테이블을 업데이트할 수 있다. 또한, 임베딩 테이블 분할부는 호스트 인터페이스를 통해 제2 특징 테이블 그룹에 대한 정보 (table_info 2)를 메모리 시스템으로 제공할 수 있다. 예를 들어, 임베딩 동작 제어부는 호스트 인터 페이스를 통해 메모리 시스템으로 제2 임베딩 데이터의 생성 동작을 요청할 수 있다. 호스트 인터페 이스는 생성 동작의 요청(request) 및 제2 특징 테이블 그룹에 대한 정보(table_info 2)을 메모리 인터페 이스로 제공할 수 있다. 메모리 인터페이스는 제2 특징 테이블 그룹에 대한 정보(table_info 2)를 제 2 임베딩 테이블 관리부로 제공할 수 있다. 제2 임베딩 테이블 관리부는 제2 특징 테이블 그룹에 대한 정보(table_info 2)를 기초로 제2 임베딩 테이 블을 생성할 수 있다. 예를 들어, 제2 임베딩 테이블 관리부는 생성 동작의 요청(request)에 응답하여 호 스트로부터 제2 임베딩 테이블의 크기에 대한 정보를 수신할 수 있다. 제2 임베딩 테이블 관리부는 제2 임베딩 테이블의 크기에 대한 정보를 기초로 제2 임베딩 테이블을 저장할 메모리 영역을 할당할 수 있다. 예를 들어, 제2 임베딩 테이블 관리부는 제2 임베딩 테이블을 저장할 메모리 영역을 할당하도록 복수의 메 모리 장치들을 제어할 수 있다. 복수의 메모리 장치들은 메모리 영역을 할당한 후, 할당된 메모리 영 역에 제로 값, 랜덤 값 등을 저장할 수 있다. 따라서, 최초의 임베딩 테이블은 제로 값, 랜덤 값 등과 같은 더 미 데이터들로 구성되지만, 임베딩 학습을 통해 임베딩 테이블을 업데이트할 수 있다. 제2 임베딩 테이블을 생성한 후, 메모리 인터페이스는 호스트 인터페이스를 통해 임베딩 동작 제어부 로 생성 동작의 요청에 대응되는 응답(response)을 제공할 수 있다. 또한, 메모리 인터페이스는 응답 을 통해 임베딩 동작 제어부로 할당된 메모리 영역의 주소를 제공할 수 있다. 도 9는 본 발명의 일 실시 예에 따른 임베딩 벡터를 획득하는 동작을 설명하기 위한 도면이다. 도 9를 참조하면, 타겟 원소가 포함된 특징 테이블이 제1 특징 테이블 그룹에 포함된 경우, 임베딩 동작 제어부 는 제1 임베딩 테이블(embedding table 1)을 기초로 임베딩 연산을 수행할 수 있다. 이때, 타겟 원소는 임 베딩 벡터를 획득하려는 대상인 원소를 나타낼 수 있다. 예를 들어, 임베딩 동작 제어부는 호스트 메모리 로부터 제1 임베딩 테이블(embedding table 1)을 리드하여 임베딩 연산을 수행할 수 있다. 임베딩 동작 제 어부는 임베딩 연산을 통해 타겟 원소에 대한 임베딩 벡터(vector)를 획득할 수 있다. 일 실시 예에서, 임 베딩 연산은 타겟 원소에 대응되는 원-핫 벡터(one-hot vector)와 임베딩 테이블 사이의 곱 연산을 나타낼 수 있다. 다만, 원-핫 벡터를 이용한 임베딩 연산을 일 실시 예에 불과하며, 임베딩 연산은 실시 예에 따라 다양항 방식을 통해 수행될 수 있다. 타겟 원소가 포함된 특징 테이블이 제2 특징 테이블 그룹에 포함된 경우, 임베딩 동작 제어부는 메모리 시 스템으로 타겟 원소의 임베딩 벡터(vector)를 요청(request)할 수 있다. 예를 들어, 임베딩 동작 제어부 는 호스트 인터페이스를 통해 임베딩 벡터의 요청(request) 및 타겟 원소와 관련된 정보 (target_info)를 메모리 인터페이스으로 제공할 수 있다. 이때, 타겟 원소와 관련된 정보(target_info)는 타겟 원소에 대응되는 원-핫 벡터, 타겟 원소의 임베딩 벡터가 저장된 주소 등을 포함할 수 있다. 연산부는 타겟 원소의 임베딩 벡터(vector)에 대한 요청(request)에 응답하여, 제2 임베딩 테이블 (embedding table 2)을 기초로 임베딩 연산을 수행할 수 있다. 예를 들어, 연산부는 복수의 메모리 장치 들로부터 제2 임베딩 테이블(embedding table 2)을 리드하여 임베딩 연산을 수행할 수 있다. 연산부 는 타겟 원소와 관련된 정보(target_info) 및 제2 임베딩 테이블(embedding table 2)을 이용한 임베딩 연산을 통해 타겟 원소의 임베딩 벡터(vector)를 획득할 수 있다. 연산부는 획득된 임베딩 벡터(vector)를 메모리 인터페이스를 통해 호스트로 제공할 수 있다. 도 10은 본 발명의 일 실시 예에 따른 임베딩 테이블을 업데이트하는 동작을 설명하기 위한 도면이다. 도 10을 참조하면, 임베딩 동작 제어부는 임베딩 학습을 통해 획득된 가중치(weight)를 기초로 제1 임베딩 테이블을 업데이트할 수 있다. 예를 들어, 임베딩 동작 제어부는 가중치(weight)를 기초로 제1 임베딩 테 이블을 업데이트하도록 제1 임베딩 테이블 관리부를 제어할 수 있다. 제1 임베딩 테이블 관리부는 가중치(weight)를 기초로 호스트 메모리에 저장된 제1 임베딩 테이블을 업데이트할 수 있다. 또한, 임베딩 동작 제어부는 메모리 시스템으로 가중치(weight)를 기초로 제2 임베딩 테이블의 업데 이트 동작을 요청(request)할 수 있다. 예를 들어, 임베딩 동작 제어부는 호스트 인터페이스를 통해 메모리 인터페이스로 업데이트 동작의 요청(request) 및 가중치(weight)를 제공할 수 있다. 제2 임베딩 테이블 관리부는 가중치(weight)를 기초로 복수의 메모리 장치들에 저장된 제2 임베딩 테 이블을 업데이트할 수 있다. 제2 임베딩 테이블의 업데이트 동작이 완료된 후, 메모리 시스템은 호스트 인 터페이스를 통해 임베딩 동작 제어부로 업데이트 동작의 요청(request)에 대응되는 응답(response)을 제공할 수 있다. 도 11은 본 발명의 일 실시 예에 따른 호스트와 메모리 시스템 사이의 통신 방법을 설명하기 위한 흐름도이다. 일 실시 예에서, 호스트와 메모리 시스템 사이의 통신을 관리하기 위해, 메모리 인터페이스는 메일박스(mailbox) 및 DMA(Direct Memory Access) 장치를 포함할 수 있다. 단계 S701에서, 호스트는 메모리 인터페이스로 메시지의 리드를 요청할 수 있다. 이때, 메시지는 임 베딩 동작을 지시하기 위한 정보를 포함할 수 있다. 일 실시 예에서, 임베딩 동작은 임베딩 테이블 생성 동작, 추론 동작 및 학습 동작 중 어느 하나일 수 있다. 예를 들어, 호스트가 임베딩 동작을 위한 쿼리의 준비를 완료하면, 호스트는 호스트 메모리를 할당하고 쿼리를 저장할 수 있다. 호스트는 쿼리를 기초로 메시지를 생성하고 메모리 시스템에 브로드 캐스트할 수 있다. 예를 들어, 호스트는 메일박스로 메시 지를 제공하고, 메모리 시스템이 메시지를 리드하도록 요청할 수 있다. 단계 S703에서, 호스트로부터 메시지를 수신하면, 메모리 인터페이스는 메모리 시스템으로 인터 럽트를 전달할 수 있다. 단계 S705에서, 메모리 시스템은 메모리 인터페이스로부터 메시지를 리드할 수 있다. 메모리 시스템 은 메시지를 디코딩하고, 쿼리 또는 그라디언트의 크기에 따라 메모리 영역을 할당할 수 있다. 단계 S707에서, 메모리 시스템은 메시지에 포함된 소스 주소(source address)를 참조하여 메모리 인터페이 스를 통해 호스트 메모리에 저장된 데이터를 수신할 수 있다. 이때, 호스트 메모리에 저장된 데 이터는 쿼리 또는 그라디언트일 수 있다. 예를 들어, 메모리 시스템은 DMA 장치를 통해 호스트 메모리 에 저장된 데이터를 수신할 수 있다. 단계 S709에서, 메모리 시스템은 임베딩 동작을 수행할 수 있다. 단계 S711에서, 메모리 시스템은 호스트에 임베딩 동작의 결과를 제공할 수 있다. 예를 들어, 메모리 시스템은 메시지로부터 결과를 저장할 호스트 메모리의 주소를 획득하고, 해당 호스트 메모리의 주소로 결과를 제공할 수 있다. 단계 S713에서, 호스트 메모리의 주소에 결과가 저장되면, 메모리 시스템은 메모리 인터페이스 로 응답할 수 있다. 구체적으로, 메모리 시스템은 응답에 대응되는 메시지를 메일박스로 제공할 수 있다. 단계 S715에서, 응답에 대응되는 메시지를 수신하면, 메모리 인터페이스는 호스트로 인터럽트를 전달 할 수 있다. 단계 S717에서, 호스트는 메모리 인터페이스로부터 응답에 대응되는 메시지를 리드할 수 있다. 도 12는 본 발명의 일 실시 예에 따른 호스트와 메모리 시스템의 통신 패킷을 설명하기 위한 도면이다. 도 12를 참조하면, 호스트 및 메모리 시스템 간의 통신 패킷이 도시되어 있다. 구체적으로, 제1 통신 패킷은 호스트에서 메모리 시스템로 전송되는 메세지일 수 있다. 그리고, 제1 통신 패킷은 'Task ID', 'Opcode', 'Source Address', 'Source Size' 및 'Destination Address'를 포함할 수 있다. 제1 통신 패킷은 총 91 bit로 구성될 수 있으며, 'Task ID'에는 4 비트(bit)가 할당될 수 있다. 'Task I D'는 호스트의 동작 상태를 나타낼 수 있다. 예컨대, 'Task ID'는 호스트의 동작이 수행중(running) 인지 또는 종료(terminated)인지를 나타낼 수 있다. 호스트는 'Task ID'를 이용하여 메모리 시스템의동작을 재정렬할 수 있다. 그리고, 'Opcode'에는 3 비트(bit)가 할당되고, 복수의 임베딩 동작들을 구분하기 위한 데이터가 포함될 수 있 다. 구체적으로, 호스트는 임베딩 테이블 생성 동작(또는, 초기 설정 동작), 추론 동작 및 학습 동작을 구 분하기 위해 'Opcode'를 이용할 수 있다. 그리고, 'Source Address'에는 32 비트(bit)가 할당되고, 쿼리 또는 그라디언트의 소스 주소에 대한 정보를 포 함할 수 있다. 구체적으로, 호스트는 'Source Address'를 이용하여 메모리 시스템이 호스트 메모리 로부터 가져가야할 쿼리 또는 그라디언트의 주소에 대한 정보를 포함할 수 있다. 그리고, 'Source Size'에는 20 비트(bit)가 할당되고, 쿼리 또는 그라디언트의 크기에 대한 정보를 포함할 수 있다. 그리고, 'Destination Address'에는 메모리 시스템이 내부 동작을 수행한 결과를 수신할 호스트 메 모리의 주소를 포함할 수 있다. 호스트는 제1 통신 패킷을 이용하여 메모리 시스템과 통신할 수 있다. 그리고, 메모리 시스템 은 호스트로부터 제1 통신 패킷을 수신하면 응답 메시지인 제2 통신 패킷을 전송할 수 있다. 여기서, 제2 통신 패킷은 'Task ID' 및 'Opcode'를 포함할 수 있다. 도 13은 본 발명의 일 실시 예에 따른 컴퓨팅 시스템의 동작 방법을 설명하기 위한 순서도이다. 도 13에 도시된 방법은 예를 들어, 도 1에 도시된 컴퓨팅 시스템 또는 도 2에 도시된 컴퓨팅 시스템에 의해 수행될 수 있다. 이하에서는 설명의 편의를 위해 도 1에 도시된 컴퓨팅 시스템을 기준으로 설명하도록 한다. 도 13을 참조하면, 단계 S1301에서, 호스트는 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할할 수 있다. 이때, 호스트는 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 복수의 특징 테이블들을 제1 특징 테이블 그룹 및 제2 특징 테이블 그룹으로 분할할 수 있다. 단계 S1303에서, 호스트는 제1 특징 테이블 그룹으로 구성된 제1 임베딩 테이블을 생성할 수 있다. 단계 S1305에서, 호스트는 메모리 시스템으로 제2 특징 테이블 그룹으로 구성된 제2 임베딩 테이블의 생성 동작을 요청할 수 있다. 단계 S1307에서, 메모리 시스템은 호스트로부터 제공된 제2 임베딩 테이블의 생성 동작의 요청에 따 라 제2 임베딩 테이블을 생성할 수 있다. 이때, 메모리 시스템은 호스트로부터 제2 임베딩 테이블의 크기에 대한 정보를 수신하고, 크기에 대 한 정보를 기초로 제2 임베딩 테이블을 저장할 메모리 영역을 할당할 수 있다. 도 14는 본 발명의 일 실시 예에 따른 복수의 특징 테이블들을 분할하는 방법을 설명하기 위한 순서도이다. 도 14에 도시된 방법은 도 13의 단계 S1301을 구체화한 것일 수 있다. 도 14에 도시된 방법은 예를 들어, 도 1에 도시된 호스트 또는 도 2에 도시된 호스트에 의해 수행될 수 있다. 도 14를 참조하면, 단계 S1401에서, 호스트는 복수의 특징 테이블들의 개수 및 복수의 특징 테이블들에 포 함된 모든 원소들의 개수를 기초로 기준선을 생성할 수 있다. 단계 S1403에서, 호스트는 복수의 특징 테이블들 각각에 포함된 원소들의 개수를 기초로 복수의 특징 테이 블들을 오름차순으로 정렬할 수 있다. 단계 S1405에서, 호스트는 복수의 특징 테이블들 중 기준선을 기준으로 아래에 위치한 특징 테이블들을 제 1 특징 테이블 그룹으로 결정하고, 복수의 특징 테이블들 중 기준선을 기준으로 위에 위치한 특징 테이블들을 제2 특징 테이블 그룹으로 결정할 수 있다.부호의 설명 10: 컴퓨팅 시스템 100: 호스트 200: 메모리 시스템"}
{"patent_id": "10-2021-0052490", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시 예에 따른 컴퓨팅 시스템의 일 예를 설명하기 위한 도면이다. 도 2는 본 발명의 일 실시 예에 따른 컴퓨팅 시스템의 다른 예를 설명하기 위한 도면이다. 도 3은 본 발명의 일 실시 예에 따른 임베딩 테이블을 설명하기 위한 도면이다. 도 4는 본 발명의 일 실시 예에 따른 특징 테이블을 설명하기 위한 도면이다. 도 5는 본 발명의 일 실시 예에 따른 호스트를 설명하기 위한 도면이다. 도 6은 본 발명의 일 실시 예에 따른 메모리 시스템을 설명하기 위한 도면이다. 도 7은 본 발명의 일 실시 예에 따른 복수의 특징 테이블들을 분할하는 동작을 설명하기 위한 도면이다. 도 8은 본 발명의 일 실시 예에 따른 임베딩 테이블을 생성하는 동작을 설명하기 위한 도면이다. 도 9는 본 발명의 일 실시 예에 따른 임베딩 벡터를 획득하는 동작을 설명하기 위한 도면이다. 도 10은 본 발명의 일 실시 예에 따른 임베딩 테이블을 업데이트하는 동작을 설명하기 위한 도면이다. 도 11은 본 발명의 일 실시 예에 따른 호스트와 메모리 시스템 사이의 통신 방법을 설명하기 위한 흐름도이다. 도 12는 본 발명의 일 실시 예에 따른 호스트와 메모리 시스템의 통신 패킷을 설명하기 위한 도면이다. 도 13은 본 발명의 일 실시 예에 따른 컴퓨팅 시스템의 동작 방법을 설명하기 위한 순서도이다. 도 14는 본 발명의 일 실시 예에 따른 복수의 특징 테이블들을 분할하는 방법을 설명하기 위한 순서도이다."}
