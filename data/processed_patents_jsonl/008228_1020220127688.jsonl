{"patent_id": "10-2022-0127688", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0048196", "출원번호": "10-2022-0127688", "발명의 명칭": "체크포인팅 방법 및 장치", "출원인": "삼성전자주식회사", "발명자": "이준연"}}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "인공 신경망 모델의 학습을 위한 연산을 수행하는 단계; 및상기 학습을 위한 연산을 수행할 때, 동시에 상기 인공 신경망 모델의 상태 정보를 저장하는 체크포인팅(checkpointing)을 수행하는 단계를 포함하는 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 학습을 위한 연산은복수의 연산 이터레이션들로 구성되고,상기 복수의 연산 이터레이션들 각각은순전파 연산, 역전파 연산 및 웨이트 업데이트 연산으로 구성되는, 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 체크포인팅을 수행하는 단계는N+1번째 연산 이터레이션의 순전파 연산 및 역전파 연산 중 적어도 하나를 수행할 때, 동시에 N번째 연산 이터레이션 수행 결과에 대한 상기 인공 신경망 모델의 상태 정보를 저장하는 단계를 포함하는, 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 체크포인팅을 수행하는 단계는상기 N+1번째 연산 이터레이션의 웨이트 업데이트 연산을 시작할 제1 시점에 N번째 연산 이터레이션 수행 결과에 대한 상기 체크포인팅 수행 완료 여부를 판단하는 단계를 포함하는, 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 체크포인팅을 수행하는 단계는상기 제1 시점에 상기 체크포인팅 수행이 완료되지 않았다는 판단에 기초하여, 상기 N+1번째 연산 이터레이션의상기 웨이트 업데이트 연산을 중단하는 단계공개특허 10-2024-0048196-3-를 포함하는, 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 체크포인팅을 수행하는 단계는상기 상태 정보가 저장되어 있는 현재 위치를 획득하는 단계; 및상기 현재 위치 및 상기 체크포인팅을 통해 상기 상태 정보가 저장될 목표 위치에 기초하여, 저장 경로(path)를결정하는 단계를 포함하는, 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 상태 정보는상기 인공 신경망 모델의 파라미터 및 옵티마이저(optimizer) 중 적어도 하나를 포함하는, 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 체크포인팅을 수행하는 단계는상기 인공 신경망 모델의 레이어 단위로 상기 체크포인팅을 수행하는 단계를 포함하는, 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 체크포인팅을 수행하는 단계는연산 이터레이션의 웨이트 업데이트가 완료된 레이어에 대하여 상기 레이어 단위로 상기 체크포인팅을 수행하는단계를 포함하는, 체크포인팅 방법"}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 학습을 위한 연산을 수행하는 단계는N번째 연산 이터레이션의 K번째 레이어의 역전파 연산을 수행할 때, 동시에 상기 N번째 연산 이터레이션의 K+1번째 레이어의 웨이트 업데이트 연산을 수행하는 단계를 포함하는, 체크포인팅 방법.공개특허 10-2024-0048196-4-청구항 11 제10항에 있어서,상기 체크포인팅을 수행하는 단계는상기 N번째 연산 이터레이션의 K번째 레이어의 역전파 연산을 수행할 때, 동시에 상기 N번째 연산 이터레이션의K+2번째 레이어의 체크포인팅을 수행하는 단계를 포함하는, 체크포인팅 방법."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "하드웨어와 결합되어 제1항 내지 제11항 중 어느 하나의 항의 방법을 실행시키기 위하여 매체에 저장된 컴퓨터프로그램."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "적어도 하나의 명령어를 저장하는 메모리; 및상기 메모리에 저장된 명령어를 실행함으로써,인공 신경망 모델의 학습을 위한 연산을 수행하고, 상기 학습을 위한 연산을 수행할 때, 동시에 상기 인공 신경망 모델의 상태 정보를 저장하는 체크포인팅(checkpointing)을 수행하는 프로세서를 포함하는 전자 장치."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 프로세서는상기 N+1번째 연산 이터레이션의 순전파 연산 및 역전파 연산 중 적어도 하나를 수행할 때, 동시에 N번째 연산이터레이션 수행 결과에 대한 상기 인공 신경망 모델의 상태 정보를 저장하는, 전자 장치."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제13항에 있어서,상기 프로세서는상기 N+1번째 연산 이터레이션의 웨이트 업데이트 연산을 시작할 제1 시점에 N번째 연산 이터레이션 수행 결과에 대한 상기 체크포인팅 수행 완료 여부를 판단하는, 전자 장치."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제13항에 있어서,상기 프로세서는상기 인공 신경망 모델의 레이어 단위로 상기 체크포인팅을 수행하는, 전자 장치."}
{"patent_id": "10-2022-0127688", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "공개특허 10-2024-0048196-5-제13항에 있어서,상기 프로세서는N번째 연산 이터레이션의 K번째 레이어의 역전파 연산, K+1번째 레이어의 웨이트 업데이트 연산 및 상기 N번째연산 이터레이션의 K+1번째 레이어의 웨이트 업데이트 연산을 동시에 수행하는, 전자 장치."}
{"patent_id": "10-2022-0127688", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "체크포인팅 방법 및 장치가 개시된다. 일 실시예에 따른 체크포인팅 방법은 인공 신경망 모델의 학습을 위한 연 산을 수행하는 단계 및 학습을 위한 연산을 수행할 때, 동시에 인공 신경망 모델의 상태 정보를 저장하는 체크포 인팅(checkpointing)을 수행하는 단계를 포함할 수 있다."}
{"patent_id": "10-2022-0127688", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래 실시예들은 대규모 AI 모델 훈련 시 모델 및 데이터 특성을 고려한 효율적인 체크포인트 방법에 관한 것이다."}
{"patent_id": "10-2022-0127688", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "딥러닝(Deep Learning) 분야에서 모델의 파라메터 숫자가 기하급수적으로 늘어나고 있다. 특히 자연어 처리 분 야(NLP, Natural Language Processing)의 모델은 수억에서 수천억개의 파라미터를 가질 수 있다. 이처럼 거대한 모델을 학습시키기 위해서는 상당한 계산 자원이 필요하기 때문에, 중간의 예기치 않은 문제로 작업이 중단되는 경우, 맨 처음부터가 아닌 계산 중간 과정부터 이어서 연산을 진행할 수 있도록 하기 위해 체 크포인팅(Checkpointing)과 리스타트(Restart) 기능이 필요할 수 있다. 체크포인팅은 프로세스의 현재 상태를 디스크에 저장하는 것을 의미하고, 리스타트는 저장된 상태를 그대로 복원하여 재실행하는 기능을 의미한다."}
{"patent_id": "10-2022-0127688", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "위에서 설명한 배경기술은 발명자가 본원의 개시 내용을 도출하는 과정에서 보유하거나 습득한 것으로서, 반드 시 본 출원 전에 일반 공중에 공개된 공지기술이라고 할 수는 없다."}
{"patent_id": "10-2022-0127688", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 체크포인팅 방법은 인공 신경망 모델의 학습을 위한 연산을 수행하는 단계; 및 상기 학습을 위한 연산을 수행할 때, 동시에 상기 인공 신경망 모델의 상태 정보를 저장하는 체크포인팅(checkpointing)을 수행하는 단계를 포함할 수 있다. 상기 학습을 위한 연산은 복수의 연산 이터레이션들로 구성되고, 상기 복수의 연산 이터레이션들 각각은 순전파 연산, 역전파 연산 및 웨이트 업데이트 연산으로 구성될 수 있다. 상기 체크포인팅을 수행하는 단계는 N+1번째 연산 이터레이션의 순전파 연산 및 역전파 연산 중 적어도 하나를 수행할 때, 동시에 N번째 연산 이터레이션 수행 결과에 대한 상기 인공 신경망 모델의 상태 정보를 저장하는 단 계를 포함할 수 있다. 상기 체크포인팅을 수행하는 단계는 상기 N+1번째 연산 이터레이션의 웨이트 업데이트 연산을 시작할 제1 시점 에 N번째 연산 이터레이션 수행 결과에 대한 상기 체크포인팅 수행 완료 여부를 판단하는 단계를 포함할 수 있 다. 상기 체크포인팅을 수행하는 단계는 상기 제1 시점에 상기 체크포인팅 수행이 완료되지 않았다는 판단에 기초하 여, 상기 N+1번째 연산 이터레이션의 상기 웨이트 업데이트 연산을 중단할 수 있다. 상기 체크포인팅을 수행하는 단계는 상기 상태 정보가 저장되어 있는 현재 위치를 획득하는 단계; 및 상기 현재 위치 및 상기 체크포인팅을 통해 상기 상태 정보가 저장될 목표 위치에 기초하여, 저장 경로(path)를 결정하는단계를 포함할 수 있다. 상기 상태 정보는 상기 인공 신경망 모델의 파라미터 및 옵티마이저(optimizer) 중 적어도 하나를 포함할 수 있 다. 상기 체크포인팅을 수행하는 단계는 상기 인공 신경망 모델의 레이어 단위로 상기 체크포인팅을 수행하는 단계 를 포함하할 수 있다. 상기 체크포인팅을 수행하는 단계는 연산 이터레이션의 웨이트 업데이트가 완료된 레이어에 대하여 상기 레이어 단위로 상기 체크포인팅을 수행하는 단계를 포함할 수 있다. 상기 학습을 위한 연산을 수행하는 단계는 N번째 연산 이터레이션의 K번째 레이어의 역전파 연산을 수행할 때, 동시에 상기 N번째 연산 이터레이션의 K+1번째 레이어의 웨이트 업데이트 연산을 수행하는 단계를 포함할 수 있 다. 상기 체크포인팅을 수행하는 단계는 상기 N번째 연산 이터레이션의 K번째 레이어의 역전파 연산을 수행할 때, 동시에 상기 N번째 연산 이터레이션의 K+2번째 레이어의 체크포인팅을 수행하는 단계를 포함할 수 있다. 일 실시예에 따른 전자 장치는 적어도 하나의 명령어를 저장하는 메모리; 및 상기 메모리에 저장된 명령어를 실 행함으로써, 인공 신경망 모델의 학습을 위한 연산을 수행하고, 상기 학습을 위한 연산을 수행할 때, 동시에 상 기 인공 신경망 모델의 상태 정보를 저장하는 체크포인팅(checkpointing)을 수행하는 프로세서를 포함할 수 있 다. 상기 프로세서는 상기 N+1번째 연산 이터레이션의 순전파 연산 및 역전파 연산 중 적어도 하나를 수행할 때, 동 시에 N번째 연산 이터레이션 수행 결과에 대한 상기 인공 신경망 모델의 상태 정보를 저장할 수 있다. 상기 프로세서는 상기 N+1번째 연산 이터레이션의 웨이트 업데이트 연산을 시작할 제1 시점에 N번째 연산 이터 레이션 수행 결과에 대한 상기 체크포인팅 수행 완료 여부를 판단할 수 있다. 상기 프로세서는 상기 인공 신경망 모델의 레이어 단위로 상기 체크포인팅을 수행할 수 있다. 상기 프로세서는 N번째 연산 이터레이션의 K번째 레이어의 역전파 연산, K+1번째 레이어의 웨이트 업데이트 연 산 및 상기 N번째 연산 이터레이션의 K+1번째 레이어의 웨이트 업데이트 연산을 동시에 수행할 수 있다."}
{"patent_id": "10-2022-0127688", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에서 개시되어 있는 특정한 구조적 또는 기능적 설명들은 단지 기술적 개념에 따른 실시예들을 설명하 기 위한 목적으로 예시된 것으로서, 실제로 구현된 형태는 다양한 다른 모습을 가질 수 있으며 본 명세서에 설 명된 실시예로만 한정되지 않는다. 제1 또는 제2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 이해되어야 한다. 예를 들어 제1 구성요소는 제2 구성요소로 명명 될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이 해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있 다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 구성요소들 간의 관계를 설명하는 표현들, 예를 들어 \"~간의\"와 \"바로~간의\" 또는 \"~에 이웃하는\"과 \"~에 직접 이웃하는\" 등도 마찬가지로 해석되어야 한다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 실시된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함 을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되 는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로 해석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 실시예들은 퍼스널 컴퓨터, 랩톱 컴퓨터, 태블릿 컴퓨터, 스마트 폰, 텔레비전, 스마트 가전 기기, 지능형 자동 차, 키오스크, 웨어러블 장치 등 다양한 형태의 제품으로 구현될 수 있다. 이하, 실시예들을 첨부된 도면을 참 조하여 상세하게 설명한다. 각 도면에 제시된 동일한 참조 부호는 동일한 부재를 나타낸다. 도 1a는 인공신경망(Artificial Neural Network)를 이용한 딥러닝 연산 방법을 설명하기 위한 도면이다. 딥러닝(Deep Learning) 등을 포함하는 인공지능(AI) 알고리즘은 인공신경망(Artificial Neural Network, ANN) 에 입력 데이터를 입력시키고, 컨볼루션 등의 연산을 통해 출력 데이터를 학습하는 것을 특징으로 한다. 인공신경망은 생물학적 뇌를 모델링한 컴퓨터 과학적 아키텍쳐(Computational Architecture)를 의미할 수 있다. 인공신경망 내에서, 뇌의 뉴런들에 해당되는 노드들은 서로 연결되어 있고, 입력 데이터를 처리하기 위하여 집합적으로 동작한다. 다양한 종류의 뉴럴 네트워크들을 예로 들면, 컨볼루션 뉴럴 네트워크 (Convolutional Neural Network, CNN), 회귀 뉴럴 네트워크(Recurrent Neural Network, RNN), 딥 빌리프 네트 워크(Deep Belief Network, DBN), 제한된 볼츠만 기계(Restricted Boltzman Machine, RBM) 방식 등이 있으나, 이에 제한되지 않는다. 피드-포워드(feed-forward) 뉴럴 네트워크에서, 뉴럴 네트워크의 뉴런들은 다른 뉴런들 과의 연결들(links)을 갖는다. 이와 같은 연결들은 뉴럴 네트워크를 통해, 한 방향으로, 예를 들어 순방향 (forward direction)으로 확장될 수 있다. 도 1a를 참조하면, 인공신경망에 입력 데이터가 입력되고, 하나 이상의 레이어(layer)를 포함하는 인공 신 경망(예를 들어, 컨볼루션 뉴럴 네트워크(Convolution Neural Network, CNN))를 통해 출력 데이터가 출력되는 구조가 도시된다. 인공신경망은 2개 이상의 레이어를 보유한 딥 뉴럴 네트워크(deep neural networ k)일 수 있다. 컨볼루션 뉴럴 네트워크는 입력 데이터로부터 테두리, 선 색 등과 같은 \"특징들(features)\"을 추출하기 위해 이용될 수 있다. 컨볼루션 뉴럴 네트워크는 복수의 레이어를 포함할 수 있다. 각각의 레이어는 데이 터를 수신할 수 있고, 해당 레이어에 입력되는 데이터를 처리하여 해당 레이어에서 출력되는 데이터를 생성할 수 있다. 레이어에서 출력되는 데이터는, 컨볼루션 뉴럴 네트워크에 입력된 이미지 또는 입력된 특징맵 (feature map)을 하나 이상의 필터(filter)의 웨이트(weight) 값과 컨볼루션 연산하여 생성한 특징맵일 수 있다. 컨볼루션 뉴럴 네트워크의 초기 레이어들은 입력으로부터 에지들 또는 그레디언트들과 같은 낮은 레 벨의 특징들을 추출하도록 동작될 수 있다. 컨볼루션 뉴럴 네트워크의 다음 레이어들은 이미지 내의 눈, 코 등과 같은 점진적으로 더 복잡한 특징들을 추출할 수 있다.도 1b는 일 실시예에 따른 인공 신경망 모델의 학습 및 추론 방법을 설명하기 위한 도면이다. *도 1b를 참조하면, 일 실시예에 따른 시스템은 학습 장치 및 추론 장치를 포함할 수 있다. 일 실시 예에 따른 학습 장치는 뉴럴 네트워크를 생성하거나, 뉴럴 네트워크를 훈련(train)(또는 학습(learn))하거 나, 뉴럴 네트워크를 재훈련(retrain)하는 기능들과 같은 다양한 프로세싱 기능들을 갖는 컴퓨팅 디바이스에 해 당된다. 예를 들어, 학습 장치는 PC(personal computer), 서버 디바이스, 모바일 디바이스 등의 다양한 종류의 디바이스들로 구현될 수 있다. 일 실시예에 따른 학습 장치는 주어진 초기 뉴럴 네트워크를 반복적으로 훈련(학습)시킴으로써, 하나 이상 의 훈련된 뉴럴 네트워크를 생성할 수 있다. 하나 이상의 훈련된 뉴럴 네트워크를 생성하는 것은 뉴 럴 네트워크 파라미터를 결정하는 것을 의미할 수 있다. 여기서, 파라미터들은 예를 들어 뉴럴 네트워크의 입/ 출력 액티베이션들, 웨이트들, 바이어스들 등 뉴럴 네트워크에 입/출력되는 다양한 종류의 데이터를 포함할 수 있다. 뉴럴 네트워크의 반복적인 훈련이 진행됨에 따라, 뉴럴 네트워크의 파라미터들은 주어진 입력에 대해 보 다 정확한 출력을 연산하기 위해 조정될(tuned) 수 있다. 일 실시예에 따른 학습 장치는 훈련된 하나 이상의 뉴럴 네트워크를 추론 장치에 전달할 수 있 다. 추론 장치는 모바일 디바이스, 임베디드(embedded) 디바이스 등에 포함될 수 있다. 일 실시예에 따 른 추론 장치는 뉴럴 네트워크의 구동을 위한 전용 하드웨어로 프로세서, 메모리, 입출력(I/O) 인터페이스, 디스플레이, 통신 인터페이스, 또는 센서 중 적어도 하나를 포함하는 전자 장치일 수 있다. 일 실시예에 따른 추론 장치는 태블릿 PC, 스마트폰, 개인용 컴퓨터(예를 들어, 노트북 컴퓨터 등), 인공 지능 스피커, 스마트 TV, 이동 전화기, 내비게이션, 웹 패드, PDA, 워크스테이션 등과 같이 메모리 수단을 구비 하고 마이크로 프로세서를 탑재하여 연산 능력을 갖춘 디지털 기기를 모두 포함하는 개념일 수 있다. 일 실시예에 따른 추론 장치는 하나 이상의 훈련된 뉴럴 네트워크를 그대로 구동하거나, 하나 이상의 훈련된 뉴럴 네트워크가 가공(예를 들어, 양자화)된 뉴럴 네트워크를 구동할 수 있다. 가공된 뉴럴 네트워크를 구동하는 추론 장치는, 학습 장치와는 별도의 독립적인 디바이스에서 구현될 수 있 다. 하지만, 이에 제한되지 않고, 추론 장치는 학습 장치와 동일한 디바이스 내에도 구현될 수 있다. 도 2는 인공 신경망 모델의 학습 과정 중에 체크포인팅을 수행하는 방법을 설명하기 위한 도면이다. 도 2를 참조하면, 인공 신경망 모델을 학습하는 것은 최종 출력값과 실제값의 오차가 최소화 되도록 웨이트와 바이어스를 계산하여 결정하는 과정일 수 있다. 일 실시예에 따른 인공 신경망 모델의 학습은 순전파(forward propagation) 단계, 역전파 단계(backward propagation) 및 웨이트 업데이트(weight update) 단계로 구성될 수 있다. 순전파는 뉴럴 네트워크 모델의 입력층부터 출력층까지 순서대로 변수들을 계산하고 저장하는 것을 의미할 수 있다. 역전파는 인공 신경망 모델의 파라미터들에 대한 그래디언트(gradient)를 계산하는 방법을 의미할 수 있다. 역전파는 인공 신경망 모델의 각 레이어과 관련된 목적 함수(objective function)의 중간 변수들과 파라 미터들의 그래디언트를 출력층에서 입력층 순으로 계산하고 저장할 수 있다. 웨이트 업데이트는 역전파를 통해 결정된 웨이트로 기존 웨이트를 대체하는 것을 의미할 수 있다. 순전파 단계, 역전파 단계 및 웨이트 업데이트 단계를 통해 학습하는 과정을 이터레이션(iteration)으로 정의할 수 있고, 예를 들어 10번을 반복하여 인공 신 경망 모델을 학습하였다면 해당 인공 신경망 모델의 이터레이션은 10일 수 있다. 일 실시예에 따른 인공 신경망 모델의 학습은 체크포인팅(Checkpointing) 단계를 더 포함할 수 있다. 인공 신 경망 모델을 학습시키기 위해서는 상당한 계산 자원이 필요하기 때문에, 프로세서에서 중간의 예기치 않은 문제 로 작업이 중단되는 경우, 문제를 해결하기 위해 체크포인팅과 리스타트(Restart) 기능이 필요할 수 있다. 일 실시예에 따른 체크포인팅은 훈련 중간 모델의 상태를 저장 장치(예: SSD 또는 HDD)에 저장을 하는 과정을 말하며, 체크포인팅을 위한 시간은 I/O 시간 및 모델의 크기에 비례할 수 있다. 일 실시예에 따른 리스타트는 저장된 인공 신경망 모델을 그대로 복원하여 재실행하는 기능을 의미할 수 있다. 인공 신경망 모델의 상태를 저장하기 위해서는 모든 프로세스가 일정 주기마다 계산 작업을 멈춰야 한다. 최적 의 체크포인팅 주기로 인공 신경망 모델 상태를 저장한다고 하더라도, 전체 학습 과정에서 체크포인팅과 연관된 오버헤드가 전체 학습에서 차지하는 비중이 상당할 수 있다. 아래에서 상세히 설명하겠지만, 일 실시예에 따른 체크포인팅 방법은 체크포인팅 단계에서 저장되는 데이터들의 생애 주기를 고려하여 체크포인팅을 위한 시간을 최적화할 수 있다. 일 실시예에 따른 체크 포인팅 단계는 매 이터레이션 마다 수행되지 않고, 수십 또는 수백 이터레이션에 한번만 수행될 수 있다. 종래 체크 포인팅 기술 은 순전파 단계, 역전파 단계 및 웨이트 업데이트 단계를 순차적으로 실행 후, 체크포인팅을 수행할 수 있다. 반면에, 일 실시예에 따른 체크포인팅 방법은 인공 신경망 모델에서 저장하는 항목의 생애를 분석하여 체크포인 팅 오버헤드를 줄일 수 있다. 도 3은 일 실시예에 따른 인공 신경망 모델 학습 시스템을 설명하기 위한 도면이다. 도 3을 참조하면, 일 실시예에 따른 인공 신경망 모델 학습 시스템은 인공 신경망 모델, 인공 신경망 모델 프레임워크, 체크포인팅 장치, 학습 장치를 주체로 포함할 수 있다. 일 실시예에 따른 인공 신경망 모델은 Pytorch, Tensorflow 등의 인공 신경망 모델 프레임워크를 기 반으로 CPU 또는 GPU, NPU 등이 포함된 학습 장치에서 인공 신경망 모델에 포함된 파라미터 (Parameter), 임베딩 테이블(Embedding Table), 옵티마이저 상태(Optimizer state) 등의 상태 정보를 업데이트 해가며, 모델의 정확도를 향상시킨다. 인공 신경망 모델을 훈련하기 위한 학습 장치는 한 개 또는 다수의 시스템으로 구성될 수 있으며, 각 시스템의 일부는 CPU, GPU, NPU 등의 계산유닛(341, 342), 스토리지, 메모리 등을 포함할 수 있다. 또한, 일 실시예에 따른 학습 장치는 노드 안에 물리적으로 연결된 스토리지와 네트워크 등으로 연결 된 원격 스토리지를 가질 수 있다. 일 실시예에 따른 상태 정보는 학습 과정에서 메모리, 스토리지, 원격 스토리지 등에 존재할 수 있으며, 학습 과정에 계산유닛(341, 342) 등에서 사용하고, 상태 정보 값이 수정될 수 있다. 수정된 상태 정보 는 그 상태를 주기적으로 또는 비정기적으로 스토리지 또는 원격 스토리지에 저장될 수 있다. 상태 정보는 전체를 새로운 파일 형태로 저장할 수도 있고, 차등부분(Differential)만 저장할수도 있으며, 증분 (Incremental)을 저장할 수도 있다. 일 실시예에 따른 체크포인팅 장치는 데이터 로케이션 매니저(data location manager), 락/플러쉬 매 니저(lock/flush manager), 파이프라이닝 스테이지 매니저(pipelining stage manager), 리메이닝 체 크포인팅 매니저(remaining checkpointing manager)를 포함할 수 있다. 일 실시예에 따른 체크포인팅 장 치는 학습 장치 또는 인공 신경망 모델 프레임워크에 포함될 수 있다. 일 실시예에 따른 데이터 로케이션 매니저는 저장하려고 하는 상태 정보가 학습 장치의 어느 곳에 존재하고 있는지 관리할 수 있다. 데이터 로케이션 매니저는 체크포인팅을 저장하고자 하는 목표 공간과 상태 정보가 저장된 공간간의 대역폭(Bandwidth)을 알고 있으며, 상태 정보와 목표 공간 간의 가장 높은 대역폭 을 사용할 수 있는 경로(Path)를 체크포인트 파일 저장에 활용할 수 있다. 일 실시예에 따른 락/플러쉬 매니저는 인공 신경망 모델의 학습에서, N+1번째 이터레이션의 웨이트 업데이 트 시작 여부와 N번째 이터레이션의 체크포인팅 완료 여부를 비교할 수 있다. 이전 N번째 이터레이션의 체크포 인팅이 완료되지 않았는데 N+1번째 이터레이션의 웨이트 업데이트가 시작된다면, 락/플러쉬 매니저는 웨이 트 업데이트 과정을 멈추고, 체크포인팅을 빠르게 완료시킬 수 있다. 일 실시예에 따른 파이프라이닝 스테이지 매니저는 인공 신경망 모델의 훈련 과정에서 체크포인팅 유무에 따라 2단계 파이프라인(2-stage pipeline) 또는 3단계 파이프라인(3-stage pipeline)을 관리할 수 있다. 일 실시예에 따른 체크포인팅이 필요한 이터레이션일 때는 역전파, 웨이트 업데이트, 체크포인팅의 3단계의 파이프 라인으로 동작하며, 체크포인팅이 필요 없는 이터레이션일 경우에는 역전파, 웨이트 업데이트의 2 단계 파이프 라인으로 동작할 수 있다. 일 실시예에 따른 리메이닝 체크포인팅 매니저는 이전 이터레이션의 체크포인팅 완료 여부와 상관없이 다 음 이터레이션의 순전파 경로를 진행할 수 있도록 한다. 이전 이터레이션에서 완료되지 않은 체크포인팅은 다 음 이터레이션의 순전파가 진행되는 동안 역전파에서 저장할 수 있도록 한다. 리메이닝 체크포인팅 매니저는 락/플러쉬 매니저와 동시에 또는 별개로 구현할 수 있다. 도 4는 일 실시예에 따른 인공신경망 모델의 학습 과정에서의 파라미터 및 옵티마이저의 생애 주기를 도시한 도 면이다. 도 4를 참조하면, N-1, N, N+1번째 이터레이션에서의 순전파(F), 역전파(B), 웨이트 업데이트(W), 체크포인팅 (C) 단계에서의 파라미터(Parameter) 및 옵티마이저(Optimizer) 상태가 도시된다. N번째 이터레이션 때 체크포인팅을 저장할 경우, 체크포인팅 파일을 저장하기 위한 I/O 시간을 소비하게 된다. 하지만, N번째 이터레이션에 저장하는 항목은 N번째 웨이트 업데이트 이후 생성되는 N 파라미터와, N 옵티마이 저이며, 이 두 항목은 다음 N+1번째 이터레이션의 웨이트 업데이트 단계 전까지 수정되지 않을 수 있다. 다시 말해, 각 데이터의 다음 수정 시점 이전까지는 해당 데이터의 무결성이 보장되는 것이며, 이는 다음 이터레이션 (예를 들어, N+1번째 이터레이션)의 순전파, 역전파 시점에 체크포인팅을 수행해도 됨을 의미할 수 있다. 아래 에서, 다음 이터레이션(예를 들어, N+1번째 이터레이션)의 순전파, 역전파 시점에 체크포인팅을 수행하는 것을 레이지 체크포인팅(lazy checkpointing)이라 지칭할 수 있다. 도 5a 내지 도 5b는 일 실시예에 따른 레이지 체크포인팅 방법을 설명하기 위한 도면이다. 도 5a를 참조하면, 일 실시예에 따른 레이지 체크포인팅은 체크포인팅 시점을 N번째 이터레이션의 웨이트 업데 이트 시점 직후가 아닌, N+1번째 이터레이션의 순전파 및 역전파 중 적어도 하나에 해당하는 시간에 숨겨 처리 하는 것을 의미할 수 있다. 도 1내지 도 4를 참조하여 설명한 내용은 도 5a 내지 도 5b에도 동일하게 적용될 수 있고, 중복되는 내용은 생략될 수 있다. N+1번째 이터레이션의 순전파 및 역전파 단계에서는 파라미터와 옵티마이저의 값 수정 없이 해당 데이터를 읽기 (Read)만 하며, 데이터의 수정(Modify)은 웨이트 업데이트 단계에서 일어난다. 따라서, 일 실시예에 따른 체크 포인팅은 N+1번째 이터레이션의 웨이트 업데이트 전까지 수행되면 될 수 있다. 일 실시예에 따른 파라미터와 옵티마이저 데이터는 스토리지, CPU 메모리, GPU 메모리에 걸쳐 특정시점에 한 개 또는 여러 개의 사본이 있을 수 있다. 일 실시예에 따른 레이지 체크포인팅은 이러한 데이터의 위치를 관리하 는 데이터 로케이션 매니저(예를 들어, 도 3의 데이터 로케이션 매니저)와 N+1 이터레이션의 웨이트 업데 이트 시점이 도래하기 전 데이터의 락과 플러쉬를 처리하는 락/플러쉬 매니저(예를 들어, 도 3의 락/플러쉬 매 니저)에 의해 수행될 수 있다. 아래에서, 일 실시예에 따른 데이터 로케이션 매니저는 로케이션 관리 스 레드로 지칭될 수 있다. 도 5b를 참조하면, 일 실시예에 따른 로케이션 관리 스레드는 파라미터와 옵티마이저 데이터 이동을 모니터링하 여, 데이터가 현재 위치한 위치를 비트맵(bitmap) 또는 주소(address)와 같은 형태로 관리할 수 있다. 각 데이 터는 스토리지, CPU 메모리, GPU 메모리 등에 위치할 수 있으며, 동시에 여러 장소에 존재할 수 있다. 그렇기 때문에 관리 스레드는 파라미터나 옵티마이저 데이터를 스토리지에 저장하기 위한 가장 가까운(또는, 빠른) 위 치를 알고 최적화 할 수 있다. 일 실시예에 따른 락/플러쉬 매니저는 N번째 이터레이션의 체크포인팅 시간이 길어질 때 N+1번째 이터레이션의 웨이트 업데이트 시점까지 체크포인팅 완료 여부를 관리할 수 있다. 체크포인팅이 완료되지 않았음에도 불구하 고, N+1번째 이터레이션의 웨이트 업데이트를 시작하게 되면 파라미터나 옵티마이저 값이 수정될 수 있기 때문 이다. 도 6a 내지 도 6b는 일 실시예에 따른 파이프라이닝 체크포인팅을 설명하기 위한 도면이다. 종래의 경우에는 모든 레이어에 대해 역전파를 먼저 진행하고, 그 다음 모든 레이어에 대해 웨이트 업데이터를 진행하며, 마지막으로 모든 레이어의 파라미터와 옵티마이저를 저장한다. 일 실시예에 따른 파이프라이닝 체크포인팅(Pipelining checkpointing)은 역전파, 웨이트 업데이트 및 체크포인 팅 단계를 레이어 단위로 분할하여 체크포인팅을 수행하는 것을 의미할 수 있다. 일 실시예에 따른 파이프라이닝 스테이지 매니저(예를 들어, 도 3의 파이프라이닝 스테이지 매니저)는 해 당 이터레이션의 웨이트 업데이트가 완료된 레이어에 대하여 레이어 단위로 체크포인팅을 수행할 수 있다. 보 다 구체적으로, 파이프라이닝 스테이지 매니저는 역전파가 먼저 완료된 마지막 레이어는 바로 웨이트 업데이트 를 진행할 수 있으며, 웨이트 업데이트가 완료 된 파라미터와 옵티마이저 데이터를 저장할 수 있다. 도 6a를 참조하면, 일 실시예에 따른 파이프라이닝 스테이지 매니저는 N번째 연산 이터레이션의 K번째 레이어 (예를 들어, 2번째 레이어)의 역전파 연산(예를 들어, B3)을 수행할 때, 동시에 상기 N번째 연산 이터레이션의 K+1번째 레이어(예를 들어, 3번째 레이어)의 웨이트 업데이트 연산(예를 들어, W4)을 수행할 수 있도록 할 수 있다. 또한, 일 실시예에 따른 파이프라이닝 스테이지 매니저는 동시에 N번째 연산 이터레이션의 K+2번째 레이 어(예를 들어, 4번째 레이어)의 체크포인팅(예를 들어, C4)을 수행할 수 있도록 할 수 있다. 도 6b를 참조하면, 일 실시예에 따른 파이프라이닝 스테이지 매니저는 인공 신경망 모델의 레이어 단위로 체크 포인팅을 수행할 수 있도록 할 수 있다. 예를 들어, 12개의 레이어들을 가진 인공 신경망 모델이 4개의 GPU에 나누어 모델 병렬 학습(Model parallel training)을 할 경우 3개의 레이어 단위로 파이프라이닝이 가능할 수 있 다. 모델의 학습 과정에서 체크포인팅은 매 이터레이션마다 일어나지 않을 수 있다. 그렇기 때문에 체크포인팅을 하지 않을 때는 역전파, 웨이트 업데이트의 2단계 파이프라인으로 동작하여야 하며, 체크포인팅을 하는 이터레 이션일 때는 역전파, 웨이트 업데이트, 체크포인팅의 3단계 파이프라이닝을 해야할 수 있다. 일 실시예에 따른 파이프라이닝 스테이지 매니저는 체크포인팅 유무, 레이어별 파이프라인 스테이지 관리 등을 수행할 수 있다. 일 실시예에 따른 리메이닝 체크포인팅 매니저는 역전파, 웨이트 업데이트 단계가 마무리 되었는데도 아직 완료 되지 않은 체크포인팅 단계를 관리할 수 있다. 예를 들어, 도 6b에서 C4 단계가 완료될 때 까지 기다리게 되면, GPU 및 CPU 자원을 유휴 상태로 남아있게 될 수 있다. 유휴 자원을 최소화 하기 위해 일 실시예에 따른 리메이닝 체크포인팅 매니저는 C4 단계를 진행함과 동시에 다음 학습 이터레이션의 순전파도 수행할 수 있도록 할 수 있다. 도 7a 내지 도 7d는 일 실시예에 따른 체크포인팅 과정의 예시를 도시한 도면이다. 도 7a를 참조하면, 일 실시예에 따른 체크포인팅 장치(예를 들어, 체크포인팅 장치) 는 i번째 이터레이션 의 역전파 과정에서 해당 GPU의 그래디언트(gradients)를 업데이트 후, 일정 부분의 상태 정보(예를 들어, 옵티 마이저와 파라미터)를 업데이트할 수 있다. 도 7b 내지 도 7c를 참조하면, i번째 이터레이션에서 상태 정보(예를 들어, 옵티마이저와 파라미터)가 업데이트 가 된 GPU에서 상태 정보(예를 들어, 옵티마이저와 파라미터)를 비동기 체크포인팅할 수 있다. 도 7d를 참조하면, i+1번째 이터레이션의 역전파 과정에서 이전 단계에서 체크포인팅 하지 않은 상태 정보(예를 들어, 옵티마이저와 파라미터)를 비동기 체크포인팅할 수 있다. 인공 신경망 모델의 역전파 과정에서 그래디언트가 업데이트 되면 그 직후 상태 정보(예를 들어, 옵티마이저와 파라미터)를 업데이트를 하며, 상태 정보 업데이트 직후 체크포인팅을 진행할 수 있다. 체크포인팅 및 웨이트 업데이트는 그 전 레이어의 역전파 과정과 동시에 진행할 수 있으며, 모델 병행(model parallelism)의 차원(dimemsion)만큼으로 파이프라이닝할 수 있다. 또한 추가로, N번째 이터레이션의 체크포인팅을 저장하는 과정에, N+1 이터레이션의 순전파 과정이 시작하더라 도 계속하여 체크포인팅을 할 수 있다. 이는 N+1 이터레이션의 순전파 과정에서 파라미터와 옵티마이저가 수정 되지 않기 때문이다. 도 8은 일 실시예에 따른 전자 장치의 구성을 도시하는 도면이다. 도 8을을 참조하면, 일 실시예에 따른 전자 장치는 하나 이상의 프로세서 및 메모리를 포함할 수 있다. 일 실시예에 따른 메모리는 컴퓨터에서 읽을 수 있는 명령어들(instructions)을 저장할 수 있다. 메모리 에 저장된 명령어들이 프로세서에 의해 실행되면, 프로세서는 명령어들에 의해 정의되는 동작들 을 처리할 수 있다. 메모리는 예를 들어 RAM(random access memories), DRAM(dynamic random accessmemories), SRAM(static random access memories) 또는 이 기술 분야에서 알려진 다른 형태의 비휘발성 메모리 를 포함할 수 있다. 메모리는 기 학습된 인공 신경망 모델을 저장할 수 있다. 일 실시예에 따른 하나 이상의 프로세서는 전자 장치의 전체적인 동작을 제어한다. 프로세서는 목적하는 동작들(desired operations)을 실행시키기 위한 물리적인 구조를 갖는 회로를 가지는 하드웨어로 구현 된 장치일 수 있다. 목적하는 동작들은 프로그램에 포함된 코드(code) 또는 명령어들을 포함할 수 있다. 하드 웨어로 구현된 장치는 마이크로프로세서(microprocessor), 중앙 처리 장치(Central Processing Unit; CPU), 그 래픽 처리 장치(Graphic Processing Unit; GPU), 프로세서 코어(processor core), 멀티-코어 프로세서(multi- core processor), 멀티프로세서(multiprocessor), ASIC(Application-Specific Integrated Circuit), FPGA(Field Programmable Gate Array), NPU(Neural Processing Unit) 등을 포함할 수 있다 일 실시예에 따른 프로세서는 전자 장치가 실행하기 위한 기능 및 명령어들을 실행함으로써 전자 장 치를 제어할 수 있다. 일 실시예에 따른 프로세서의 제어에 의해 전자 장치는 인공 신경망 모델의 학습을 위한 연산을 수행 하고, 상기 학습을 위한 연산을 수행할 때, 동시에 상기 인공 신경망 모델의 상태 정보를 저장하는 체크포인팅 (checkpointing)을 수행할 수 있다. 이상에서 설명된 실시예들은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨 어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치, 방법 및 구성요소는, 예를 들 어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마 이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령(instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 소프트웨어 애플리 케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처 리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경우도 있지만,"}
{"patent_id": "10-2022-0127688", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하 나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들의 조합을 포함 할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로(collectively) 처 리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파(signal wave)에 영구적으로, 또는 일시적으로 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단독 으로 또는 조합하여 포함할 수 있다. 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구성 된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다."}
{"patent_id": "10-2022-0127688", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가진 자라면 상기를 기초로 다양한 기술적 수정 및 변형을 적용할 수 있다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다."}
{"patent_id": "10-2022-0127688", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1a는 인공신경망(Artificial Neural Network)를 이용한 딥러닝 연산 방법을 설명하기 위한 도면이다. 도 1b는 일 실시예에 따른 인공 신경망 모델의 학습 및 추론 방법을 설명하기 위한 도면이다. 도 2는 인공 신경망 모델의 학습 과정 중에 체크포인팅을 수행하는 방법을 설명하기 위한 도면이다. 도 3은 일 실시예에 따른 인공 신경망 모델 학습 시스템을 설명하기 위한 도면이다. 도 4는 일 실시예에 따른 인공신경망 모델의 학습 과정에서의 파라미터 및 옵티마이저의 생애 주기를 도시한 도 면이다. 도 5a 내지 도 5b는 일 실시예에 따른 레이지 체크포인팅 방법을 설명하기 위한 도면이다. 도 6a 내지 도 6b는 일 실시예에 따른 파이프라이닝 체크포인팅을 설명하기 위한 도면이다. 도 7a 내지 도 7d는 일 실시예에 따른 체크포인팅 과정의 예시를 도시한 도면이다. 도 8은 일 실시예에 따른 전자 장치의 구성을 도시하는 도면이다."}
