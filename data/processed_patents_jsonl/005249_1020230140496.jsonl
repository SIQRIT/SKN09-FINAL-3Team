{"patent_id": "10-2023-0140496", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0056601", "출원번호": "10-2023-0140496", "발명의 명칭": "마이크로 가속기를 시뮬레이션하는 시스템 및 방법", "출원인": "경북대학교 산학협력단", "발명자": "박대진"}}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "마이크로 가속기(Micro Accelerator)를 시뮬레이션하는 시스템에 있어서,임베디드 소프트웨어가 마이크로 컨트롤러 유닛(MCU: Micro Controller Unit)의 코어(core)에서 실행되어 온-칩버스(on-chip bus)를 구동하기 까지의 과정을 에뮬레이션하고, 상기 온-칩 버스에 연결되는 마이크로 가속기에대한 매개변수(parameter)를 전송하는 시스템 에뮬레이터(System Emulator); 및 상기 마이크로 가속기에 대한 매개변수에 따라 RTL(Registor Transfer Level) 구조를 동적으로 생성하여 상기마이크로 가속기를 시뮬레이션하는 RTL 시뮬레이터(Simulator);를 포함하는, 마이크로 가속기 시뮬레이션 시스템."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 마이크로 가속기에 대한 매개변수는, 상기 임베디드 소프트웨어의 신경망 모델에 대한 정보 및 상기 온-칩버스에 연결되는 DMA(Direct Memory Access) 제어기의 세부동작 설정에 관련된 정보를 포함함을 특징으로 하는,마이크로 가속기 시뮬레이션 시스템."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 신경망 모델에 대한 정보는, 해당 신경망 모델의 인공지능(AI: Artificial Intelligence) 연산에서 사용되는 매개변수를 포함하고,상기 RTL 시뮬레이터는 상기 해당 신경망 모델의 AI 연산에서 사용되는 매개변수에 따라 상기 RTL 구조를 생성함을 특징으로 하는, 마이크로 가속기 시뮬레이션 시스템."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서, 상기 DMA 제어기의 세부동작 설정에 관련된 정보는, 상기 DMA 제어기에서 요구되는 클럭, 메모리 읽기(read) 클럭, 메모리 쓰기(write) 클럭 중 적어도 하나의 매개변수를 포함하고,상기 RTL 시뮬레이터는 상기 DMA 제어기에서 요구되는 클럭, 메모리 읽기 클럭, 메모리 쓰기 클럭 중 적어도 하나의 매개변수에 따라 상기 마이크로 가속기를 시뮬레이션 함을 특징으로 하는, 마이크로 가속기 시뮬레이션 시스템."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 RTL 시뮬레이터는 상기 시뮬레이션 결과로써 상기 마이크로 가속기의 성능 프로파일(profile) 결과를 상기시스템 에뮬레이터에 반환함을 특징으로 하는, 마이크로 가속기 시뮬레이션 시스템.공개특허 10-2025-0056601-3-청구항 6 제2항에 있어서,상기 RTL 시뮬레이터는 상기 DMA 제어기의 동작을 모델링하며,상기 DMA 제어기 동작을 모델링하는 것은 상기 코어와 상기 마이크로 가속기의 데이터 전송을 모델링하는 것인,마이크로 가속기 시뮬레이션 시스템."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "마이크로 가속기(Micro Accelerator) 시뮬레이션 시스템의 시뮬레이션 방법에 있어서,상기 마이크로 가속기 시뮬레이션 시스템은 시스템 에뮬레이터(System Emulator) 및 RTL(Registor TransferLevel) 시뮬레이터(Simulator)를 포함하되, 상기 시스템 에뮬레이터가 임베디드 소프트웨어가 마이크로 컨트롤러 유닛(MCU: Micro Controller Unit)의 코어(core)에서 실행되어 온-칩 버스(on-chip bus)를 구동하기 까지의 과정을 에뮬레이션하는 단계; 상기 시스템 에뮬레이터가 상기 온-칩 버스에 연결되는 마이크로 가속기에 대한 매개변수(parameter)를 전송하는 단계; 상기 RTL 시뮬레이터가 상기 마이크로 가속기에 대한 매개변수에 따라 RTL 구조를 동적으로 생성하는 단계; 및상기 RTL 시뮬레이터가 상기 RTL 구조를 기반으로 상기 마이크로 가속기를 시뮬레이션하는 단계;를 포함하는,마이크로 가속기 시뮬레이션 방법."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 마이크로 가속기에 대한 매개변수는, 상기 임베디드 소프트웨어의 신경망 모델에 대한 정보 및 상기 온-칩버스에 연결되는 DMA(Direct Memory Access) 제어기의 세부동작 설정에 관련된 정보를 포함함을 특징으로 하는,마이크로 가속기 시뮬레이션 방법."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 신경망 모델에 대한 정보는, 해당 신경망 모델의 인공지능(AI: Artificial Intelligence) 연산에서 사용되는 매개변수를 포함하며,상기 RTL 구조를 동적으로 생성하는 단계는, 상기 해당 신경망 모델의 AI 연산에서 사용되는 매개변수에 따라상기 RTL 구조를 생성하는 것인, 마이크로 가속기 시뮬레이션 방법."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서, 상기 DMA 제어기의 세부동작 설정에 관련된 정보는, 상기 DMA 제어기에서 요구되는 클럭, 메모리 읽기(read) 클럭, 메모리 쓰기(write) 클럭 중 적어도 하나의 매개변수를 포함하며,상기 마이크로 가속기를 시뮬레이션하는 단계는, 상기 DMA 제어기에서 요구되는 클럭, 메모리 읽기 클럭, 메모리 쓰기 클럭 중 적어도 하나의 매개변수에 따라 상기 마이크로 가속기를 시뮬레이션하는 것인, 마이크로 가속기 시뮬레이션 방법.공개특허 10-2025-0056601-4-청구항 11 제7항에 있어서,상기 RTL 시뮬레이터가 상기 시뮬레이션 결과로써 상기 마이크로 가속기의 성능 프로파일(profile) 결과를 상기시스템 에뮬레이터에 반환하는 단계를 더 포함하는, 마이크로 가속기 시뮬레이션 방법."}
{"patent_id": "10-2023-0140496", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제8항에 있어서,상기 마이크로 가속기를 시뮬레이션하는 단계는, 상기 DMA 제어기의 동작을 모델링하는 단계를 포함하며,상기 DMA 제어기의 동작을 모델링하는 단계는, 상기 코어와 상기 마이크로 가속기의 데이터 전송을 모델링하는것인, 마이크로 가속기 시뮬레이션 방법."}
{"patent_id": "10-2023-0140496", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 마이크로 가속기(Micro Accelerator)를 시뮬레이션하는 시스템에 대한 것으로, 임베디드 소프트웨어가 마이크로 컨트롤러 유닛(MCU: Micro Controller Unit)의 코어(core)에서 실행되어 온-칩 버스(on-chip bus)를 구동하기 까지의 과정을 에뮬레이션하고, 상기 온-칩 버스에 연결되는 마이크로 가속기에 대한 매개변수 (parameter)를 전송하는 시스템 에뮬레이터(System Emulator); 및 상기 마이크로 가속기에 대한 매개변수에 따라 RTL(Registor Transfer Level) 구조를 동적으로 생성하여 상기 마이크로 가속기를 시뮬레이션하는 RTL 시뮬레이 터(Simulator);를 포함한다."}
{"patent_id": "10-2023-0140496", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 마이크로 가속기를 시뮬레이션하는 시스템 및 방법에 관한 것이다."}
{"patent_id": "10-2023-0140496", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 마이크로 컨트롤러 유닛(MCU: Micro Controller Unit) 기반 임베디드 시스템으로 설계된 엣지(edge) 디바 이스에서 직접 인공지능(AI: Artificial Intelligence) 연산을 수행하고, 이를 가속하기 위한 온-칩 가속기 (accelerator)에 대한 연구가 활발히 진행중에 있다. MCU의 온-칩 버스에 연결되는 가속기 설계를 위해서는 하드웨어 설계와 동시에 MCU 호스트에서 실행되는 AI 임 베디드 소프트웨어에 대한 고려가 이루어져야 한다. 이때 임베디드 소프트웨어와 하드웨어 가속기 설계 사이에 존재하는 이기종 특성을 극복하고 최적의 하드웨어 가속기 구조를 설계하려면, 에뮬레이터(emulator) 및 시뮬레 이터(simulator) 수준에서 빠르게 타겟 임베디드 소프트웨어와 가속기 사용에 대한 프로파일(profile)이 가능해 야 한다. 그러나 이러한 가속기는 검증을 위한 환경 구축이 매우 복잡하고 시간이 많이 걸리며, 소프트웨어 수준에서 추 상화하여 검증하면 기능적인 검증은 이뤄질 수 있으나 실제 하드웨어 수준의 검증은 어려우며, 전체 구조의 하 드웨어를 설계하면 시간 및 비용이 너무 많이 드는 단점이 있다. 따라서 이러한 가속기 검증을 보다 효율적으로 수행하기 위한 가속기 시뮬레이션 방안에 대한 연구가 필요하다. 선행기술문헌 특허문헌 (특허문헌 0001) 한국등록특허공보 제10-2426416호"}
{"patent_id": "10-2023-0140496", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 상기와 같은 문제를 해결하기 위해 안출된 것으로, 본 발명의 목적은 마이크로 가속기를 시뮬레이션 하는 시스템 및 방법을 제공하는 것이다."}
{"patent_id": "10-2023-0140496", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 목적을 달성하기 위한 본 발명의 일 실시예에 따른 마이크로 가속기(Micro Accelerator)를 시뮬레이션하는 시스템은, 임베디드 소프트웨어가 마이크로 컨트롤러 유닛(MCU: Micro Controller Unit)의 코어(core)에서 실행 되어 온-칩 버스(on-chip bus)를 구동하기 까지의 과정을 에뮬레이션하고, 상기 온-칩 버스에 연결되는 마이크 로 가속기에 대한 매개변수(parameter)를 전송하는 시스템 에뮬레이터(System Emulator); 및 상기 마이크로 가 속기에 대한 매개변수에 따라 RTL(Registor Transfer Level) 구조를 동적으로 생성하여 상기 마이크로 가속기를 시뮬레이션하는 RTL 시뮬레이터(Simulator);를 포함한다. 상기 목적을 달성하기 위한 본 발명의 일 실시예에 따른 마이크로 가속기(Micro Accelerator) 시뮬레이션 시스 템의 시뮬레이션 방법은, 상기 마이크로 가속기 시뮬레이션 시스템은 시스템 에뮬레이터(System Emulator) 및 RTL(Registor Transfer Level) 시뮬레이터(Simulator)를 포함하되, 상기 시스템 에뮬레이터가 임베디드 소프트 웨어가 마이크로 컨트롤러 유닛(MCU: Micro Controller Unit)의 코어(core)에서 실행되어 온-칩 버스(on-chip bus)를 구동하기 까지의 과정을 에뮬레이션하는 단계; 상기 시스템 에뮬레이터가 상기 온-칩 버스에 연결되는 마이크로 가속기에 대한 매개변수(parameter)를 전송하는 단계; 상기 RTL 시뮬레이터가 상기 마이크로 가속기에 대한 매개변수에 따라 RTL 구조를 동적으로 생성하는 단계; 및 상기 RTL 시뮬레이터가 상기 RTL 구조를 기반으 로 상기 마이크로 가속기를 시뮬레이션하는 단계;를 포함한다."}
{"patent_id": "10-2023-0140496", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "상술한 본 발명의 일측면에 따르면, 마이크로 가속기를 시뮬레이션하는 시스템 및 방법을 제공함으로써, 가용 자원의 제약이 존재하는 MCU에서 이뤄지는 AI 연산 가속에 대해 최소한의 자원을 사용하여 최대의 효과를 낼 수 있는 가속기 사양을 쉽게 탐색할 수 있다. 뿐만 아니라 최소한의 비용으로 MCU의 온-칩 가속기에 대한 프로파일이 가능하고, 이로 인해 타겟 소프트웨어에 대한 최적의 가속기 구조를 반복적으로 탐색하는 오버헤드를 줄일 수 있다."}
{"patent_id": "10-2023-0140496", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "후술하는 본 발명에 대한 상세한 설명은, 본 발명이 실시될 수 있는 특정 실시예를 예시로서 도시하는 첨부 도 면을 참조한다. 이들 실시예는 당업자가 본 발명을 실시할 수 있기에 충분하도록 상세히 설명된다. 본 발명의 다양한 실시예는 서로 다르지만 상호 배타적일 필요는 없음이 이해되어야 한다. 예를 들어, 여기에 기재되어 있 는 특정 형상, 구조 및 특성은 일 실시예와 관련하여 본 발명의 정신 및 범위를 벗어나지 않으면서 다른 실시예 로 구현될 수 있다. 또한, 각각의 개시된 실시예 내의 개별 구성요소의 위치 또는 배치는 본 발명의 정신 및 범 위를 벗어나지 않으면서 변경될 수 있음이 이해되어야 한다. 따라서, 후술하는 상세한 설명은 한정적인 의미로 서 취하려는 것이 아니며, 본 발명의 범위는, 적절하게 설명된다면, 그 청구항들이 주장하는 것과 균등한 모든 범위와 더불어 첨부된 청구항에 의해서만 한정된다. 도면에서 유사한 참조부호는 여러 측면에 걸쳐서 동일하거나 유사한 기능을 지칭한다. 본 발명에 따른 구성요소들은 물리적인 구분이 아니라 기능적인 구분에 의해서 정의되는 구성요소들로써 각각이 수행하는 기능들에 의해서 정의될 수 있다. 각각의 구성요소들은 하드웨어 또는 각각의 기능을 수행하는 프로그 램 코드 및 프로세싱 유닛으로 구현될 수 있을 것이며, 두 개 이상의 구성요소의 기능이 하나의 구성요소에 포 함되어 구현될 수도 있을 것이다. 따라서 이하의 실시예에서 구성요소에 부여되는 명칭은 각각의 구성요소를 물 리적으로 구분하기 위한 것이 아니라 각각의 구성요소가 수행되는 대표적인 기능을 암시하기 위해서 부여된 것 이며, 구성요소의 명칭에 의해서 본 발명의 기술적 사상이 한정되지 않는 것임에 유의하여야 한다. 이하에서는 도면들을 참조하여 본 발명의 바람직한 실시예들을 보다 상세하게 설명하기로 한다. 도 1은 본 발명의 실시예에 따른 마이크로 가속기 시뮬레이션 시스템의 전체 프레임워크를 나타낸 도면이고, 도 2는 도 1의 마이크로 가속기 시뮬레이션 시스템을 구체화한 도면이다. 도시된 마이크로 가속기(MA:Micro-Accelerator) 시뮬레이션 시스템은 시스템 에뮬레이터(System Emulator)와 RTL(Registor Transfer Level) 시뮬레이터(Simulator)를 포함하며, 마이크로 컨트롤러 유닛(MCU: Micro Controller Unit)에 매핑된다. 상기 MCU는 하드웨어 디자인 내에서 다양한 하드웨어 블록 및 컴포넌트 간의 통신을 위한 버스 시스템인 온-칩 버스(On-Chip Bus)와, 상기 온-칩 버스에 연결된 온-칩 플래시 메모리(Flash Memory), 코어 (Core), 온-칩 SRAM(Static Random Access Memory), DMA(Direct Memory Access) 제어기 (Controller) 및 온-칩 가속기(Accelerator)와, 상기 DMA 제어기에 연결된 주변장치 (Peripheral)를 포함한다. 여기서 상기 온-칩 버스는 ARM 아키텍처에서 사용되는 고성능 AHB(Advanced High-performance Bus) 버스 (116-1)와 저속성능 주변 장치와의 통신을 위한 APB(Advanced Peripheral Bus) 버스(116-2)일 수 있으며, 상기 온-칩 가속기(Accelerator)는 마이크로 가속기(122-1)일 수 있다. 시스템 에뮬레이터는 임베디드 소프트웨어(Embedded Software)가 코어에서 실행되어 온-칩 버스(11 6)를 구동하기 까지의 과정을 기능적으로 에뮬레이션하고, 상기 온-칩 버스에 연결되는 온-칩 가속기(12 2)에 대한 매개변수(parameter)를 RTL 시뮬레이터로 전송한다. 여기서 상기 온-칩 가속기에 대한 매 개변수는 상기 임베디드 소프트웨어의 신경망 모델에 대한 정보 및 온-칩 버스에 연결되는 DMA 제어기 의 세부동작 설정에 관련된 정보를 포함한다. RTL 시뮬레이터는 온-칩 버스를 통해 온-칩 가속기에 접근이 발생했을 때, 클럭 신호의 주기에 따라 정확하게 동작하는지 확인하는 클럭-사이클 수준의 시뮬레이션을 수행한다. 즉 RTL 시뮬레이터는 상 기 온-칩 가속기에 대한 매개변수에 따라 RTL 구조를 동적으로 생성하여 온-칩 가속기를 시뮬레이션 한다. 보다 상세하게, 마이크로 가속기(122-1)는 APB 버스(116-2)에 연결되어 주변 장치 역할을 하고, 상기 마이크로 가속기(122-1)는 MCU에서 실행되는 임베디드 소프트웨어, 일례로 타이니 머신러닝(TinyML: Tiny Machine Learning) 애플리케이션(App: Application)을 가속화하는데 사용된다. 주변 장치는 MCU의 플래시 메모리에 내장된 소프트웨어에 의해 구성되고 트리거(trigger)되며, 마찬 가지로 마이크로 가속기(122-1)는 플래시 메모리의 명령 실행에서 레지스터를 설정하여 계산에 필요한 데 이터에 액세스(access)한다. 그러나 성능 평가를 위해 RTL로 설계된 마이크로 가속기(122-1)를 기반적인 MCU에 통합하는 것은 쉽지 않은 작업이며, 현재 TinyML 애플리케이션의 대상인 대부분의 코어는 내부 RTL 코드를 상업 적 목적(즉, ARM)으로 기밀로 보호한다. 또한 RTL에서 전체 MCU 칩을 구현하고 마이크로 가속기(122-1)를 연결하더라도 전체 RTL을 시뮬레이션하고 소프 트웨어 간의 상호 작용을 반영하기 위해서는 오버헤드가 발생된다. 따라서 RTL로 설계된 맞춤형 마이크로 가속 기는 정확한 주기, 즉 클럭 신호 주기에 따른 시뮬레이션이 필요하며, 나머지 주변 장치에 대한 액세스 또는 초 기화는 높은 추상화 수준의 기능 에뮬레이션으로 충분하다. 따라서 본 발명에서는 시스템 에뮬레이터에서 하드웨어를 초기화하고 TinyML 펌웨어에서 맞춤형 마이크로 가속 기 주변 장치로 메모리가 매핑된 레지스터에 액세스하는 프로세스를 에뮬레이션하기 위해 에뮬레이터를 수정하 는 마이크로 가속기 시뮬레이션 시스템을 제안한다. 마이크로 가속기 시뮬레이션 시스템의 시스템 에뮬레이터는 ARM 코어 기반 MCU 용 코어 주변 장치 버 스, 즉 AHB 버스(116-1)에 연결된 주변 장치를 에뮬레이션한다. ARM 코어를 사용하는 MCU 제조업체는 SVD(system View Description) 형식으로 MCU에 있는 모든 주변 장치에 대한 메모리 매핑된 레지스터 주소 영역 과 레지스터 비트 필드 정보를 제공한다. 또한 시스템 에뮬레이터는 SVD를 구문 분석하고 펌웨어 수준 레지스터 액세스를 에뮬레이터 프로그램으로 변환하는 각 주변 장치에 대한 템플릿을 자동으로 생성하는 QEMU 구조를 채택하였으며, 마이크로 가속기(122-1) 주변 장치 레지스터 정보를 SVD 파일에 추가하고 TinyML 펌웨어 명령어를 사용하여 마이크로 가속기 액세스를 활성화하였다. 마이크로 가속기 시뮬레이션 시스템에서 마이크로 가속기(122-1) 주변 장치 레지스터에 액세스할 수 있는 경우 펌웨어 수준에서 각 레지스터에 대한 읽기 또는 쓰기 액세스가 발생할 때 시스템 에뮬레이터 동작을 정의할 수 있다. 다른 주변 장치와 마찬가지로 마이크로 가속기(122-1)도 메모리 매핑된 레지스터에 활성화 값 을 기록하여 계산을 트리거한다. 이때 마이크로 가속기 시뮬레이션 시스템은 RTL 시뮬레이터를 원격 으로 실행하여 생성된 마이크로 가속기(122-1) 내에서 수행되는 작업을 주기적으로 정확하게 평가한다. 또한 마이크로 가속기 시뮬레이션 시스템에는 RTL 시뮬레이터를 원격으로 실행할 때 유연하고 확장 가능한 마이크로 가속기(122-1) 성능 평가를 위한 RTL 생성 엔진(Generation Engine)이 포함된다. 한편, RTL 시뮬레이터는 시스템 에뮬레이터로부터 수신되는 마이크로 가속기(122-1)에 대한 매개변수 에 따라 RTL 구조를 동적으로 생성하여 마이크로 가속기(122-1)를 시뮬레이션한다. 여기서 마이크로 가속기 (122-1)에 대한 매개변수는 TinyML 애플리케이션의 신경망 모델에 대한 정보와, AHB 버스(116-1) 및 APB 버스 (116-2)에 연결되는 DMA 제어기의 세부동작 설정에 관련된 정보를 포함한다. 먼저, 상기 신경망 모델에 대한 정보는 해당 신경망 모델의 AI 연산에서 사용되는 매개변수를 포함하며, RTL 시 뮬레이터는 상기 해당 신경망 모델의 AI 연산에서 사용되는 매개변수에 따라 RTL 구조를 생성한다. 이때 상기 신경망 모델이 합성곱 신경망(CNN: Convolutional Neural Network) 모델이라 가정하면, 상기 신경망 모델 의 AI 연산에서 사용되는 매개변수는 이미지 크기, 필터 크기, 필터 이동 간격(stride) 및 채널 수 등이 될 수 있다. 또한 이러한 RTL 구조를 결정하는 매개변수는 RTL 시뮬레이터의 원격 실행 코드가 포함된 펌웨어 계층과 에뮬레이터 계층을 연결하는 레지스터를 정의해야 한다. TinyML 펌웨어가 마이크로 가속기(122-1)의 특수 기능 레지스터(SFR: Special Function Register)에 상기 매개변수를 기록하면 시스템 에뮬레이터는 상기 기록된 레지스터 값을 RTL 시뮬레이터로 전송한다. 마이크로 가속기 시뮬레이션 시스템은 32비트 프로세서 아키텍처에서 마이크로 가속기(122-1)를 사용할 때의 클럭 대기 시간을 평가한다. 다음으로, 상기 DMA 제어기의 세부동작 설정에 관련된 정보는 DMA 제어기에서 요구되는 클럭, 메모리 읽기(read) 클럭, 메모리 쓰기(write) 클럭 중 적어도 하나의 매개변수를 포함하며, RTL 시뮬레이터는 상 기 DMA 제어기에서 요구되는 클럭, 메모리 읽기 클럭, 메모리 쓰기 클럭 중 적어도 하나의 매개변수에 따 라 마이크로 가속기(122-1)를 시뮬레이션한다. 최종적으로 RTL 시뮬레이터는 상기 시뮬레이션 결과로써 상기 마이크로 가속기(122-1)의 성능 프로파일 (profile) 결과를 시스템 에뮬레이터에 전송한다. 이하에서는 도 3 및 도 4를 통해 마이크로 가속기(122-1) 성능 평가를 위해 RTL 구조를 생성하는 동작에 대하여 보다 상세히 설명하도록 한다. 도 3은 본 발명의 실시예에 따른 마이크로 가속기 시뮬레이션 시스템에서 RTL 구조 생성 동작을 추상화한 도면 이고, 도 4는 도 3의 RTL 구조 생성 동작을 구체화한 도면이다. 도시된 RTL 생성 엔진은 임베디드 소프트웨어의 신경망 모델, 일례로 CNN 모델, 완전 연결(FC: Fully Connected) 계층 모델 등의 AI 연산에서 사용되는 매개변수에 따라 동적으로 RTL 구조를 생성한다. RTL 시뮬레 이터는 생성된 RTL 구조를 기반으로 마이크로 가속기를 시뮬레이션하고, 시뮬레이션 결과로써 상기 마이크 로 가속기의 성능 프로파일 결과를 시스템 에뮬레이터에 반환한다. 도 4에서는 마이크로 가속기의 4개 레지스터 필드에 기록된 신경망 모델 정보에 따라 마이크로 가속기를 위한 RTL 구조를 생성하는 과정을 도시한 것이며, 여기서 마이크로 가속기를 위한 4개의 32비트 영역은 기존 MCU 레지스터의 빈 공간에 예약되어 있다고 가정한다. RTL 구조와 DMA 제어기 동작을 모델링하는 DMA 모델은 레지스터의 구성된 값에 의해 생성된다. 본 발명에서 제 안하는 마이크로 가속기 시뮬레이션 시스템은 TinyML 펌웨어에서 마이크로 가속기를 사용할 때 성능을 평가하는 것이므로, 실제 데이터는 마이크로 가속기의 입력(INPUT), 출력(OUTPUT), 가중치(WEIGHT) 레지스터로 전달되지 않고, 행렬의 행(row)과 열(column)의 크기만 RTL 시뮬레이터에 전달되어 더미 데이터로 행렬 연산을 재구성한 다. 여기서 마이크로 가속기의 입력 레지스터와 가중치 레지스터는 RTL 구조를 생성할 때 행렬 크기를 결정하는 데 사용되며, 여기서 32비트 레지스터의 최상위 비트(MSB: Most Significant Bit) 16비트 및 최하위 비트(LSB: Least Significant Bit) 16비트는 각각 행과 열의 크기를 나타낸다. 도 4에서는 본 발명의 실시예에 따른 마이크로 가속기가 지원하는 신경망 모델로써 합성곱 신경망(CNN: Convolution Neural Network)과 완전 연결 FC(Fully Connected) 계층을 일례로 설명하였다. 이때 CNN 모델, FC 계층 모델과 같은 신경망 모델 정보도 제어 레지스터(CR register)에 기록되는데, 이는 해당 신경망 모델에서 사용되는 인공지능 연산의 종류에 따라 생성되는 RTL의 구조가 다르기 때문이다. CR 레지스터 의 나머지 필드에는 DMA 제어기에서 요구되는 클럭 타이밍과 마이크로 가속기와 DMA 제어기 간의 메모리 액세스 로 인한 클럭 타이밍을 모델링하는 값이 기록된다. 즉 DMA 제어기에서 요구되는 클럭, 메모리 읽기 클럭 및 메 모리 쓰기 클럭이 기록된다. 본 발명의 실시예에 따른 마이크로 가속기는 MCU의 온-칩 버스에 연결된 주변 장치로 정의되며, 이러한 주변 장 치에 대한 액세스는 메모리 주소에 매핑된 특수 기능 레지스터를 통해 이루어진다. 따라서 마이크로 가속기가 주변 장치로서 MCU의 코어에 연결되기 위해서는 TinyML 소프트웨어가 마이크로 가속기의 하드웨어를 구성할 수 있도록 하는 레지스터로 메모리 주소 공간을 매핑해야 한다. 이 레지스터는 마이크로 가속기의 작업 시작을 트 리거하거나 계산에 필요한 데이터를 교환하는데 사용된다. 그러나 신경망 모델의 계산을 가속하기 위해서는 가 중치, 활성화 값, 출력 값의 양이 많아 대량의 데이터 전송이 필요하다. 하지만 MCU는 PC(Personal Computer)나 서버에 비해 메모리 용량에 제약이 존재하며, 마이크로 가속기가 사용하 는 모든 데이터가 메모리의 레지스터 주소로 매핑되면 MCU의 물리적 메모리 주소 범위를 초과하게 된다. 따라서 마이크로 가속기가 신경망 모델의 AI 연산에 필요한 데이터에 액세스하기 위해 DMA 제어기를 사용하는 것이 불 가피하다. 한편, RTL 생성 엔진은 일반적인 수축기 배열을 사용하여 마이크로 가속기를 위한 RTL 구조를 생성한다. 처리 요소(PE: Process Element) 내부에는 3개의 레지스터가 있으며, 가중치 레지스터로부터 왼쪽의 가중치를 오른쪽으로 전달하고, 입력 레지스터로부터 위쪽의 입력을 아래쪽으로 전달하며 곱셈 및 누적(MAC: Multiply accumulate)을 계산하는 방식으로 작동한다. FC 계층 모델에 대하여 생성된 RTL 구조는 출력 노드 수만큼의 PE를 가지며, 각 사이클에 대한 가중치 및 입력 의 MAC를 계산한다. 이때 가중치의 열 인덱스에 따라 하나의 클럭 주기 지연이 발생되며, 각 PE에 대한 MAC 결 과는 모든 입력, 가중치가 PE에서 소비되었을 때의 출력을 의미한다. CNN 모델에 대하여 생성된 RTL 구조의 PE 행렬은 필터에 의해 만들어진 출력 열과 행, 필터 열의 곱으로 생성된 다. CNN 모델의 RTL 구조는 행의 각 PE를 하나의 출력 값으로 합산하며, 레지스터 지연은 PE 행렬로 흐르는 가 중치와 입력에 사용된다. 이하에서는 도 5 및 도 6을 통해 RTL 시뮬레이터가 DMA 제어기의 동작을 모델링하는 DMA 모델링 동작에 대 하여 보다 상세히 설명하도록 한다. 도 5는 본 발명의 실시예에 따른 마이크로 가속기 시뮬레이션 시스템에서 DMA 모델링 동작을 추상화한 도면이고, 도 6은 도 5의 DMA 모델링 동작을 구체화한 도면이다. 시스템 에뮬레이터로부터 DMA 제어기의 세부동작 설정에 관련된 정보를 수신한 RTL 시뮬레이터는 MCU 의 코어와 마이크로 가속기의 데이터 송수신 오버헤드를 모사하기 위해 DMA 제어기 동작을 모델링한다. 즉 RTL 시뮬레이터는 마이크로 가속기의 내부 버퍼에 데이터를 읽고 쓰는 과정에서 DMA 제어기를 통한 접근에서 발생하는 클럭 사이클에 따른 DMA 제어기 동작을 모사한다. 여기서 상기 DMA 제어기의 세부동작 설정 정보는 DMA 제어기에서 요구되는 클럭, 메모리 읽기 클럭, 메모리 쓰기 클럭 매개변수를 포함한다. 도 6에서는 MCU의 온-칩 버스에 연결된 마이크로 가속기의 데이터 전송을 모델링하는 과정을 도시한 것이다. DMA 제어기는 중앙 처리 장치(CPU: Central Processing Unit)의 개입 없이 대량의 데이터를 전송할 때 한번에처리할 수 있는 데이터의 크기가 정해져 있으므로 반복 전송이 필요하다. 동시에 데이터의 소스(source) 또는 목적지(destination) 주소를 고정하거나 자동으로 증가시킬 수 있다. 또한 마이크로 가속기는 앞서 언급한 바와 같이 제한된 레지스터 섹터 공간을 필요로 하기 때문에 DMA 제어기는 단일 주변 장치 주소로 액세스하고, DMA 제어기에서 주변 장치에 대한 온-칩 버스 액세스가 발생하면 마이크로 가속기 내에서 내부 버퍼 주소가 증가된다. DMA 제어기가 마이크로 가속기의 입력 및 가중치 버퍼에 데이터를 저장하고 출력 버퍼에서 데이터를 로드할 때 마이크로 가속기는 동일한 주변 주소 액세스를 통해 순차적 데이터 를 전송할 수 있다. 이러한 DMA 제어기 동작을 모델링하는 DMA 모델링 정보, 즉 DMA 제어기의 세부동작 설정 정보는 마이크로 가속 기의 CR 레지스터에 정의되어 있다. 마이크로 가속기가 SFR 구성에 의해 활성화되면 DMA 요청은 입력 레지스터 와 가중치 레지스터를 채우기 위해 설정된다. DMA 제어기에서 요구되는 클럭은 DMA 제어기가 DMA 요청에 상응하여 주변 장치 버스에 데이터를 응답할 때까지 의 클럭 매개변수이다. 메모리 읽기 클럭, 메모리 쓰기 클럭은 연속 DMA 작업에서 메모리에 액세스하는 데 필요 한 클럭 매개변수이다. 이러한 DMA 제어기의 세부동작 설정 정보는 마이크로 가속기 및 주변 버스 프로토콜의 데이터 전송 프로세스를 모델링하는 테스트 벤치 생성에 사용된다. 마이크로 가속기에서 데이터 전송 요청이 생성되면 신경망 모델의 AI 연산에 사용되는 데이터는 구성된 DMA 제어기의 동작에 따라 마이크로 가속기에 제공되거나 시스템 에뮬레이터 로 전송된다. 도 7은 본 발명의 실시예에 따른 마이크로 가속기 시뮬레이션 시스템의 마이크로 가속기 시뮬레이션 방법을 나 타낸 순서도이다. 시스템 에뮬레이터는 임베디드 소프트웨어의 실행부터 온-칩 버스를 구동하기까지의 과정, 즉 상기 임베디드 소 프트웨어가 MCU의 코어에서 실행되어 상기 온-칩 버스를 구동하기 까지의 과정을 에뮬레이션하고,(S702) 상기 온-칩 버스에 연결되는 마이크로 가속기에 대한 매개변수를 전송한다.(S704) RTL 시뮬레이터는 S704에서 수신되는 마이크로 가속기에 대한 매개변수에 따라 RTL 구조를 동적으로 생성하 고,(S706) 생성된 RTL 구조를 기반으로 상기 마이크로 가속기를 시뮬레이션한다.(S708) 그런 다음 상기 RTL 시뮬레이터는 S708의 시뮬레이션 결과로써 상기 마이크로 가속기의 성능 프로파일 결과를 상기 시스템 에뮬레이터에 반환한다.(S710) 위와 같은 본 발명의 마이크로 가속기를 시뮬레이션하는 방법은 다양한 컴퓨터 구성요소를 통하여 수행될 수 있 는 프로그램 명령어의 형태로 구현되어 컴퓨터 판독 가능한 기록 매체에 기록될 수 있다. 상기 컴퓨터 판독 가 능한 기록 매체는 프로그램 명령어, 데이터 파일, 데이터 구조 등을 단독으로 또는 조합하여 포함할 수 있다. 상기 컴퓨터 판독 가능한 기록 매체에 기록되는 프로그램 명령어는 본 발명을 위하여 특별히 설계되고 구성된 것들이거나 컴퓨터 소프트웨어 분야의 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능한 기록 매체의 예에는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD- ROM, DVD 와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 ROM, RAM, 플래시 메모리 등과 같은 프로그램 명령어를 저장하고 수행하도록 특별히 구성된 하드웨 어 장치가 포함된다. 프로그램 명령어의 예에는, 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사 용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드도 포함된다. 상기 하드웨어 장치는 본 발명에 따른 처 리를 수행하기 위해 하나 이상의 소프트웨어 모듈로서 작동하도록 구성될 수 있으며, 그 역도 마찬가지이다. 이상에서는 본 발명의 다양한 실시예에 대하여 도시하고 설명하였지만, 본 발명은 상술한 특정의 실시예에 한정"}
{"patent_id": "10-2023-0140496", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "되지 아니하며, 청구범위에서 청구하는 본 발명의 요지를 벗어남이 없이 당해 발명이 속하는 기술분야에서 통상 의 지식을 가진 자에 의해 다양한 변형실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 발명의 기술적 사 상이나 전망으로부터 개별적으로 이해되어져서는 안될 것이다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7"}
{"patent_id": "10-2023-0140496", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 실시예에 따른 마이크로 가속기 시뮬레이션 시스템의 전체 프레임워크를 나타낸 도면, 도 2는 도 1의 마이크로 가속기 시뮬레이션 시스템을 구체화한 도면, 도 3은 본 발명의 실시예에 따른 마이크로 가속기 시뮬레이션 시스템에서 RTL 구조 생성 동작을 추상화한 도면, 도 4는 도 3의 RTL 구조 생성 동작을 구체화한 도면, 도 5는 본 발명의 실시예에 따른 마이크로 가속기 시뮬레이션 시스템에서 DMA 모델링 동작을 추상화한 도면, 도 6은 도 5의 DMA 모델링 동작을 구체화한 도면, 그리고, 도 7은 본 발명의 실시예에 따른 마이크로 가속기 시뮬레이션 시스템의 마이크로 가속기 시뮬레이션 방 법을 나타낸 순서도."}
