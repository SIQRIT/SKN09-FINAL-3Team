{"patent_id": "10-2022-0168730", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0085104", "출원번호": "10-2022-0168730", "발명의 명칭": "예측 가능한 경성 실시간 최악 수행시간을 가진 메모리 제어기 및 이의 동작 방법", "출원인": "한국전자통신연구원", "발명자": "김병조"}}
{"patent_id": "10-2022-0168730", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "메모리 요청 당 최대 지연시간을 산출하는 요청 지연 예측기; 및상기 메모리 요청 당 최대 지연시간 및 복수의 코어 간의 메모리 간섭을 고려하여, 경성 실시간 태스크에 의한최대 지연시간을 산출하는 실시간 태스크 지연 예측기를 포함하는, 메모리 제어기."}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "예측 가능한 경성 실시간 최악 수행시간을 가진 메모리 제어기 및 이의 동작 방법을 개시한다. 본 개시의 일 측 면에 의하면, 메모리 요청 당 최대 지연시간을 산출하는 요청 지연 예측기; 및 상기 메모리 요청 당 최대 지연시 간 및 복수의 코어 간의 메모리 간섭을 고려하여, 경성 실시간 태스크에 의한 최대 지연시간을 산출하는 실시간 태스크 지연 예측기를 포함하는, 메모리 제어기를 제공한다."}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 예측 가능한 경성 실시간 최악 수행시간을 가진 메모리 제어기 및 이의 동작 방법에 관한 것이다."}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "이하에 기술되는 내용은 단순히 본 실시예와 관련되는 배경 정보만을 제공할 뿐 종래기술을 구성하는 것이 아니 다. 인공지능 신경망을 구현함에 있어서, 멀티코어 프로세서는 낮은 비용과 우수한 와트당 성능 비율 때문에 효과적 인 솔루션이다. 그러나 하드웨어 공유 리소스(즉, 메모리)에 액세스하는 작업 간 간섭으로 인해 단일 코어 프로 세서보다 멀티 코어에 대해 엄격한 최악 수행시간을 제공하는 것이 어렵다. 그 결과, 프로세서 내부에서 동시에 실행되는 다른 작업에 따라 작업 수행시간이 증가할 수 있다. 더욱이 인공지능 신경망 멀티코어 프로세서 시스템에서 주어진 태스크에 대해 엄격한 최악 수행시간을 분석을 수행하는 것은 매우 어렵거나 심지어 불가능할 수 있다. 그러나 자율주행자동차 및 비행제어 응용 등과 같은 인 공지능 서비스의 실시간성 보장을 위해서는 태스크들의 최악의 수행시간(worst-case execution time, WCET)을 분석하고 각 태스크가 마감시한을 놓치지 않도록 스케줄링하는 것이 필수적이다."}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는, 멀티 코어를 지원하는 메모리 제어기에서 최악 수행시간의 예측이 가능하도록 함으로써, 안전한 실 시간 인공지능 서비스를 제공하는데 일 목적이 있다. 본 발명이 해결하고자 하는 과제들은 이상에서 언급한 과제들로 제한되지 않으며, 언급되지 않은 또 다른 과제 들은 아래의 기재로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 일 측면에 의하면, 메모리 요청 당 최대 지연시간을 산출하는 요청 지연 예측기; 및 상기 메모리 요 청 당 최대 지연시간 및 복수의 코어 간의 메모리 간섭을 고려하여, 경성 실시간 태스크에 의한 최대 지연시간 을 산출하는 실시간 태스크 지연 예측기를 포함하는, 메모리 제어기를 제공한다. 일부 실시예에서, 상기 메모리 요청 당 최대 지연시간은, 메모리 요청에 따른 연속 행 활성화 시간 및 데이터 버스 직렬화에 필요한 지연시간을 고려하여 산출될 수 있다. 일부 실시예에서, 상기 경성 실시간 태스크에 의한 최대 지연시간은, 동시에 실행가능한 상기 경성 실시간 태스 크의 수로 제한될 수 있다. 일부 실시예에서, 상기 메모리 제어기는, 상기 메모리 요청 당 최대 지연시간을 기초로, 비실시간 태스크에 의 한 최대 지연시간을 산출하는, 비실시간 태스크 지연 예측기를 더 포함할 수 있다. 일부 실시예에서, 상기 메모리 제어기는, 메모리의 리프레시 주기를 고려하여, 상기 메모리의 리프레시 작업에 의한 최대 지연시간을 산출하는, 리프레시 지연 예측기를 더 포함할 수 있다. 일부 실시예에서, 상기 메모리 제어기는, 산출된 최대 지연시간들을 이용하여, 상기 메모리에 대한 하드웨어 측 면에서의 최악 수행시간을 산출하는, 가산기를 더 포함할 수 있다."}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 실시예에 의하면, 여러 태스크 인한 메모리 간섭이 WCET 추정에 미치는 영향을 예측하여, 예측 가능 한 메모리 액세스 시간을 제공하고, 엄격한 WCET 추정 계산을 가능하게 할 수 있다. 본 개시의 실시예에 의하면, WCET 예측이 가능한 메모리 제어기를 통해, 경성 실시간 인공지능 서비스를 안정적 으로 제공할 수 있다. 본 개시의 실시예에 의하면, 멀티코어와 신경망 연산 유닛이 존재하는 인공지능 프로세서 시스템에서, 인공지능 신경망을 자율주행 자동차응용과 같은 실시간용 임베디드 시스템에 적용할 때 실시간 최악 수행시간을 예측할 수 있다. 본 개시의 효과들은 이상에서 언급한 효과들로 제한되지 않으며, 언급되지 않은 또 다른 효과들은 아래의 기재 로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 개시의 일부 실시예들을 예시적인 도면을 이용해 상세하게 설명한다. 각 도면의 구성 요소들에 참조 부호를 부가함에 있어서, 동일한 구성 요소들에 대해서는 비록 다른 도면 상에 표시되더라도 가능한 한 동일한 부호를 가지도록 하고 있음에 유의해야 한다. 또한, 본 개시를 설명함에 있어, 관련된 공지 구성 또는 기능에 대한 구체적인 설명이 본 개시의 요지를 흐릴 수 있다고 판단되는 경우에는 그 상세한 설명은 생략한다. 본 개시에 따른 실시예의 구성요소를 설명하는 데 있어서, 제1, 제2, i), ii), a), b) 등의 부호를 사용할 수 있다. 이러한 부호는 그 구성요소를 다른 구성 요소와 구별하기 위한 것일 뿐, 그 부호에 의해 해당 구성요소의 본질 또는 차례나 순서 등이 한정되지 않는다. 명세서에서 어떤 부분이 어떤 구성요소를 '포함' 또는 '구비'한 다고 할 때, 이는 명시적으로 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 첨부된 도면과 함께 이하에 개시될 상세한 설명은 본 개시의 예시적인 실시형태를 설명하고자 하는 것이며, 본 개시가 실시될 수 있는 유일한 실시형태를 나타내고자 하는 것이 아니다. 최악의 수행시간(worst-case execution time, WCET) 지연이 발생되는 이유는 크게 하드웨어와 소프트웨어적인 측면으로 구분할 수 있다. 실제 메모리 시스템에서 하드웨어 측면에서의 시간 지연현상은, DRAM(Dynamic RAM) 장치에 액세스하는 요청과 다른 작업의 요청을 중재하는 메모리 제어기에서의 메모리 간섭으로 발생할 수 있다. 따라서 메모리 요청 스케 줄링 정책은 최악 실행 시간을 결정하는 성능뿐만 아니라 메모리 제어기의 예측 가능성을 보장하는 핵심 요소가 될 수 있다. 특히 DDR(Double Data Rate) 제어기 경우 JEDEC(Joint Electron Device Engineering Council) 표 준에 정의된 일반적인 타이밍 제약을 고려하여 메모리 간섭으로 인한 최대 지연시간을 철저하게 예측하는 것이 필요하다. 본 개시에서는, 멀티 코어에 의한 간섭을 고려하여, 메모리에 대한 하드웨어 측면에서의 최악 수행시간의 예측 이 가능한, 방법 및 장치를 제안한다. 도 1은 본 개시의 일 실시예에 따른 신경망 가속기를 개략적으로 나타낸 블록 구성도이다. 도 1을 참조하면, 신경망 가속기는, 가속기 칩 및 메모리 장치를 포함할 수 있다. 신경망 가속기 는 딥러닝 동작을 수행할 수 있다. 일 실시 예에서, 가속기는 YOLO, ResNet, ResNeXt, DenseNet, GCN(Graph Convolutional Network) 등과 같은 다양한 심층 신경망(DNN; Deep Neural Network)을 구동하도록 구성될 수 있 다. 가속기 칩은 가속기 코어, MAC 연산기, 및 메모리 제어기의 전부 또는 일부를 포함할 수 있 다. 도 1에 도시된 모든 블록이 필수 구성요소는 아니며, 다른 실시예에서 가속기 칩에 포함된 일부 블록이 추가, 변경 또는 삭제될 수 있다. 가속기 코어는 처리 성능을 높이기 위한 신경망 가속기의 코어일 수 있다. 가속기 코어는 신경망 가속기의 제반 동작을 제어할 수 있다. 본 개시에서, 가속기 칩 내에는 복수개의 가속기 코어가 포 함될 수 있다. 예를 들어, 가속기 칩은, 복수개의 가속기 코어를 갖는 멀티코어 프로세서를 포함할 수 있다. 본 개시에서 가속기 코어는 설명의 편의를 위해 코어라고도 표현될 수 있다. MAC 연산기는 신경망의 곱셈 누적(Multiplier-Accumulators, MAC) 연산을 수행할 수 있다. 실시예들에 따 라, 가속기 칩 내에는 MAC 연산기가 포함될 수 있다. 예를 들어, 가속기 칩은, 복수개의 MAC 연산 기를 사용하여 병렬 처리 MAC 연산을 수행하는, 신경망 병렬처리 MAC 연산기를 포함할 수 있다. 메모리 제어기는 메모리 장치를 제어하도록 구성될 수 있다. 메모리 제어기는 가속기 코어 및/또는 MAC 연산기로부터 수신된 데이터를 메모리 장치에 저장하는 것을 제어하고, 메모리 장치 에 저장된 데이터를 가속기 코어 및/또는 MAC 연산기로 출력하는 것을 제어할 수 있다. 여기서, 메모리 장치는 예를 들어, DRAM(Dynamic RAM), DDR DRAM(Double Data Rate DRAM), SDRAM(Synchronous DRAM), DDR SDRAM (Double Data Rate SDRAM), SRAM(Static RAM) 또는 SSRAM(synchronous SRAM) 등의 휘발성 메모리 장치로 구현되거나, 플래시 메모리를 비롯한 비휘발성 메모리 장치로 구현되거나, 휘 발성 메모리 장치와 비휘발성 메모리 장치의 조합으로 구현될 수도 있다. 특히, 도 1에 도시되듯이 메모리 장치 는 가속기 칩의 외부에 구현될 수 있다. 가속기 코어가 처리하는 데이터의 양이 매우 크기 때문에, 메모리 장치를 외부 메모리의 형태로 가속기 코어에 제공함으로써, 가속기 코어로 하여금 대량의 데이터를 메모리 장치로부터 읽어들여 처리하도록 하거나, 그 처리한 결과를 메모리 장치에 기록하도록 할 수 있다. 이하에서는 메모리 장치가 외부 메모리로 구현된 경우를 주로 설명할 것이지만, 본 개시의 범 위가 이에 제한되는 것은 아니며, 메모리 장치가 내부 메모리로서 가속기 칩에 탑재된 경우에도 동일하 게 적용할 수 있다. 본 개시에서 메모리 장치는 설명의 편의를 위해 메모리라고도 표현될 수 있다. 본 개시의 일 실시예에 따른 메모리 제어기는 최악 수행시간을 예측할 수 있다. 최악 수행시간 예측 분석 이란 주어진 코드를 수행하기 위해 프로세서가 소모하는 시간의 상한(upper bound)을 계산하는 작업이라고 할 수 있으며, 메모리 제어기에서는 하드웨어 측면에서 메모리에 액세스해서 코어에 데이터를 넘겨 줄 때까지 의 소모시간의 상한을 계산하는 것이라고 할 수 있다. 실시간 태스크는 크게, 작업 실행에 대한 시간 제약 조건이 엄격하게 보장되어야 하는 경성(Hard) 실시간 태스 크와, 비경성(Non-Hard) 실시간 태스크로 구분될 수 있다. 경성 실시간 태스크는, 라운드 로빈 방식으로 구현하 여 태스크 간의 간섭으로 메모리에 동시에 액세스할 수 있는 최대 작업 수에 따라 최악 수행시간이 결정된다. 이때, 최대 작업 수는, 칩의 코어 수와 동일할 수 있다. 한편, 비경성 실시간 태스크는, 경성 실시간 태스크보 다 우선순위에서 낮아, 실제 지연시간 예측에 영향을 덜 끼치게 된다. 본 개시의 일 실시예에 따른 메모리 제어기는 경성 실시간 태스크의 최대 작업 수를 고려한 최악 수행시간 을 예측할 수 있다. 또한, 메모리 제어기는, 경성 실시간 태스크와 비실시간(non-real) 태스크가 혼재되어, 메모리 제어기에 요구가 동시에 인가되었을 때의 최악 수행시간을 예측할 수도 있다. 도 2는 본 개시의 일 실시예에 따른 메모리 제어기를 개략적으로 나타낸 블록 구성도이다. 본 개시의 일 실시예에 따른 메모리 제어기는 요청 수집기, 요청 지연 예측기, 실시간 태스크 지연 예측기, 비실시간 태스크 지연 예측기, 리프레시 지연 예측기, 및 가산기의 전부 또 는 일부를 포함할 수 있다. 도 2에 도시된 모든 블록이 필수 구성요소는 아니며, 다른 실시예에서 메모리 제어 기에 포함된 일부 블록이 추가, 변경 또는 삭제될 수 있다. 즉, 도 2의 경우는 본 개시의 일 실시예에 따른 메모리 제어기가 획득한 메모리 요청에 기초하여 하드웨어 측면의 최악 수행시간을 예측하기 위한 구성 요소를 예시적으로 도시한 것으로서, 메모리 제어기는 다른 기능의 구현을 위해 도시한 것보다 많거나 적 은 구성요소 또는 상이한 구성요소의 구성을 가질 수 있음을 인식하여야 한다. 예를 들어, 메모리 제어기 는, 메모리 장치를 제어하기 위한 공지의 구성요소를 더 포함할 수 있다. 한편, 도 2에 도시된 구성요소들 은 기능적으로 구분되는 요소들을 나타낸 것으로서, 적어도 하나의 구성요소가 실제 물리적 환경에서는 서로 통 합되는 형태로 구현될 수도 있다. 요청 수집기는 하나 이상의 메모리 요청들을 입력받고, 입력받은 메모리 요청들을 분석할 수 있다. 예를 들어, 요청 수집기는 메모리 요청의 개수 및 조건을 확인할 수 있다. 요청 지연 예측기는, 메모리 요청 당 최대 지연시간을 산출할 수 있다. 최악 수행시간의 추정치를 계산할 때, 정의되는 모든 메모리 요청에 대해 가능한 가장 긴 실행시간이 고려되어야 한다. 메모리 요청 실행 지연시 간은, 메모리 뱅크를 처음 활성화한 시점으로부터 마지막으로 데이터를 전송한 시점 사이에 걸리는 시간이라고 할 수 있는데 여러 상황에 따라 달라질 수 있다. 메모리 제어기가 DDR 메모리 제어기인 경우, 메모리 제어기는 모든 메모리 뱅크에 액세스하여 메모리 요청의 DRAM 명령을 파이프라인방식으로 제어할 수 있다. 그러나 데이터버스 직렬화로 인해서 모든 메모리 뱅크 가 동시에 활성화될 수는 없다. 각 메모리 뱅크는 버스트 사이클 주기(T_burst)마다 활성화되어 이전 뱅크의 전 송이 완료되는 즉시 다음 뱅크의 데이터 전송이 시작된다. 따라서, 요청 지연 예측기는 동일한 뱅크의 두 연속 행 활성화 사이에 소요되는 최소 시간인 제1 지연시간 (Tb)과, 요청 전송에 필요한 시간을 결정하는 데이터 버스 직렬화 시간인 제2 지연시간(T2)을 고려하여, 메모리 요청에 따른 실행 지연시간을 결정할 수 있다. 여기서, 제2 지연시간(T2)은, 수학식 1과 같이, 버스트 사이클 주기(T_burst)와 메모리 뱅크의 수(N_bank)의 곱 으로 결정될 수 있다. [수학식 1] T2= T_burst*N_bank 한편, 제1 지연시간(Tb)은, 연속되는 명령어의 조합에 따라서 달라질 수 있다. 연속되는 명령어의 조합은, 읽기 -읽기(read-read), 읽기-쓰기(read-write), 쓰기-쓰기(write-wire) 및 쓰기-읽기(wire-read) 중 어느 하나일 수 있다. 예를 들어, 읽기-쓰기의 조합의 경우, DRAM은 읽기 명령이 시작되어 버스 방향을 전환하기 전에 I/O 게이팅이 감지 증폭기(sense amplifier)를 구동할 수 있도록 해야 하므로, 이를 위한 시간이 제1 지연시간에 반 영될 수 있다. 또한, JEDEC 표준에 따라, CWD와 CAS 명령 사이의 최소 시간간격(T_cas)도 고려될 수 있다. 제1 지연시간(Tb)은, 연속되는 명령어의 조합에 따라, 제1 읽기-읽기 지연시간(Tb_rr), 제1 읽기-쓰기 지연시간 (Tb_rw) 제1 쓰기-쓰기 지연시간(Tb_ww), 및 제1 쓰기-읽기 지연시간(Tb_wr)으로 구분될 수 있다. 요청 지연 예측기는 메모리 요청마다 전술한 제1 지연시간(T1) 및 제2 지연시간(T2)에 의거하여 최대 지연 시간을 예측할 수 있다. 메모리 요청 당 최대 지연시간(T_worst_req)은, 수학식 2와 같이 계산 또는 예측될 수 있다. [수학식 2] T_worst_req = MAX(T_rr, T_rw, T_ww, T_wr) T_i= MAX(T2, Tb_i) where i=rr,rw, ww, wr 여기서, 연속되는 명령어의 조합에 따른 제1 지연시간(Tb_i) 및/또는 제2 지연시간(T2)의 이론값은, DDR 메모리 의 타이밍 파라미터(timing parameter)에 의해서 이론값은 계산될 수 있다. 실시예들에 따라, 요청 지연 예측기 는 외부 메모리()와 연동하여, 소정의 테스트 과정을 수행함으로써, 연속되는 명령어의 조합에 따른 제1 지연시간(Tb_i) 및/또는 제2 지연시간(T2)의 실제 값을 측정할 수도 있다. 실시간 태스크 지연 예측기는 메모리 요청 당 최대 지연시간 및 복수의 가속기 코어들 간의 메모리 간섭을 고려하여, 경성 실시간 태스크에 의한 최대 지연시간을 산출할 수 있다. 경성 실시간 태스크에 대한 최악의 시나리오는 멀티코어 프로세서에서 동시에 실행되는 경성 실시간 태스크로, 이 경우, 복수의 가속기 코어가 메모리에 동시에 접근하려고 시도한다. 따라서, 경성 실시간 태스크에 의 한 최대 지연시간(T_max_hard)은, 수학식 3과 같이 동시에 실행될 수 있는 총 경성 실시간 태스크의 수(N_RT)에 의해 제한될 수 있다. [수학식 3] T_max_hard = (N_RT-1)·T_worst_req 한편, 메모리 제어기에서는 최악의 시나리오가 항상 고려되기 때문에, 최악 수행시간 계산에 대한 메모리 간섭의 영향을 알기 위해, 프로세서에서 동시에 실행되는 모든 작업의 전체 메모리 시퀀스를 고려할 필요는 없 다. 비실시간 태스크 지연 예측기는 메모리 요청 당 최대 지연시간을 기초로, 비실시간 태스크에 의한 최대 지 연시간을 산출할 수 있다. 비실시간 태스크는 경성 실시간 태스크에 비해 우선순위가 낮으므로, 실시간 태스크 가 끝나고 바로 실행될 수 있다. 따라서, 비실시간 태스크에 의한 최대 지연시간은 수학식 4와 같이 산출될 수 있다. [수학식 4] T_max_nRT = T_worst_req - 1 가산기는 산출된 경성 실시간 태스크에 의한 최대 지연시간 및 비실시간 태스크에 의한 최대 지연시간을 합산하여, 최종 메모리 요청의 최대 지연시간을 산출할 수 있다. 이때, 최종 메모리 요청의 최대 지연시간은 수 학식 5와 같이 표현될 수 있다. [수학식 5] T_delay_max = T_max_hard + T_max_nRT = N_RT·T_worst_req - 1 실시예들에 따라, 최악 수행시간에는 메모리(refresh)의 리프레시 동작에 의한 지연시간이 추가로 반영될 수 있 다. 리프레시 지연 예측기는 메모리의 리프레시 주기를 고려하여, 리프레시 동작에 의한 최대 지연시간을 산출할 수 있다. 메모리 제어기가 DDR 메모리 제어기인 경우, 리프레시가 간섭의 중요한 원인이 될 수 있다. 리프레시 작업 은, 리프레시 주기(T_refresh)마다 해제되며 리프레시 작업이 완료될 때까지는 다른 명령을 실행할 수 없다. 따 라서 리프레시가 발생하는 시간에 따라, 최악 수행시간에 미치는 영향이 달라지며, 일반적으로 실시간 시스템에 서, DRAM의 리프레시는 최악 실행 시간의 증가로 이어진다. 한편, 리프레시가 발생하는 시간은, 애플리케이션이 언제 시작되었는가에 따라 다르므로, 리프레시가 수행되는 정확한 시간을 정적으로 결정할 수 없다. 리프레시를 간섭이라 생각하고 분석할 경성 실시간 태스크의 실행 시작시점을 리프레시와 동기화하여 지연예측 을 실행한다. 그러면 지연 시간은 메모리의 리프레시 명령어가 끝나고 한 사이클(cycle) 후에 마친다고 할 수 있다. 즉,경성 실시간 태스크를 실행하고자 할 때는 리프레시 발생으로부터 T_refresh - 1의 시간 동안 기다려 야 한다. 가산기는 실시간 태스크 지연 예측기, 비실시간 태스크 지연 예측기 및 리프레시 지연 예측기 에 의해 산출된 최대 지연시간들을 기초로, 메모리에 대한 하드웨어 측면에서의 최악 수행시간을 산출할 수 있다. 여기서, 최악 수행시간은, 수학식 6과 같이 구할 수 있다. [수학식 6] T_wcet = T_delay_max + T_refresh - 1 = N_RT·T_worst_req + T_refresh - 2 도 3은 본 개시의 일 실시예에 따른 메모리 제어기가 하드웨어 측면의 최악 수행시간을 예측하는 방법을 나타내 는 흐름도이다. 도 3에 도시된 방법은, 전술한 메모리 제어기 또는 이의 구성요소들에 의해 수행될 수 있 으므로, 중복되는 설명에 대해서는 자세한 내용을 생략한다. 메모리 제어기는 메모리 요청을 입력받을 수 있다(S300). 메모리 제어기는 메모리 요청의 개수 및 조건을 확인할 수 있다(S310). 여기서, 조건은 예컨대, 동시에 실 행될 수 있는 총 경성 실시간 태스크의 수(N_RT), SDRM 타이밍 파라미터 정도 및/또는 메모리 모델 제조사 등을 포함할 수 있다.메모리 제어기는 메모리 요청당 최대 지연시간을 계산할 수 있다(S320). 여기서, 메모리 요청 당 최대 지 연시간은, 메모리 요청에 따른 연속 행 활성화 시간 및 데이터 버스 직렬화에 필요한 지연시간을 고려하여 산출 될 수 있다. 메모리 제어기는 실시간 태스크 및/또는 비실시간 태스크에 의한 최대 지연시간을 계산할 수 있다(S330). 메모리 제어기는 메모리 요청 당 최대 지연시간 및 복수의 코어 간의 메모리 간섭을 고려하여, 경성 실시 간 태스크에 의한 최대 지연시간을 산출할 수 있다. 여기서, 경성 실시간 태스크에 의한 최대 지연시간은, 동시 에 실행가능한 경성 실시간 태스크의 수로 제한될 수 있다. 메모리 제어기는 메모리 요청 당 최대 지연시 간을 기초로, 비실시간 태스크에 의한 최대 지연시간을 산출할 수 있다. 메모리에서 리프레시 동작이 수행되는 경우, 메모리 제어기는 메모리의 리프레시 주기를 고려하여, 메모리 의 리프레시 작업에 의한 최대 지연시간을 산출할 수 있다(S340 및 S342). 한편, 리프레시 동작을 수행하지 않 는 메모리의 경우, 과정 S342가 생략될 수 있다. 메모리 제어기는 산출된 최대 지연시간들을 이용하여, 메모리에 대한 하드웨어 측면에서의 최악 수행시간 을 산출할 수 있다(S360). 도 4는 본 개시의 일 실시예에 따른 경성 실시간 인공지능 서비스 적합성 판단 방법을 나타내는 흐름도이다. 도 4에 도시된 방법은 전술한 신경망 가속기 또는 가속기 칩을 포함하는 컴퓨팅 장치에 의해 수행될 수 있 다. 컴퓨팅 장치는, 인공지능 응용을 위한 준비단계로, 인공지능 서비스 테스트 케이스 실행 파일을 입력받고, 이를 해석할 수 있다(S400). 컴퓨팅 장치는, 입력된 테스트 케이스 실행 파일을 읽고 해석하여, 컨트롤 플로우 (Control Flow)를 생성할 수 있다. 여기서, 인공지능 응용은, 예를 들어, 자율주행이나 비행 제어 등과 같이 실 시간성이 보장되어야 하는 응용일 수 있다. 컴퓨팅 장치는, 테스트 케이스 실행 파일에 기초하여, 소프트웨어의 WCET 사이클 타임을 계산할 수 있다. 컴퓨 팅 장치는, 캐시 분석, 루프(Loop)의 상한선 분석과 파이프 라인의 동작 분석 등을 수행하여, 분석결과를 최악 수행시간에 반영될 수 있다. 예를 들어, 캐시 분석의 경우, 컴퓨팅 장치는, 멀티코어 프로세서 내의 여러 코어 중 목적이 되는 프로세서인 타켓 프로세서의 캐쉬 메모리 특성과 함께, 외부 메모리 접근이 필요한 인스트럭션 을 분석하고 캐쉬 미스 페널티(miss penalty)등을 파악할 수 있다. 루프 상한선 분석의 경우, 컴퓨팅 장치는, 소프트웨어 상에서 존재하는 루프의 최대 반복 횟수를 예측하여 최악 수행시간에 반영할 수 있다. 실시예들에 따라, 소프트웨어 WCET 사이클 타임 계산은, 메모리 제어기가 달린 코어 장치에 의해 수행될 수 있다. 컴퓨팅 장치는, 하드웨어 측면에서의, 메모리의 최악 수행시간을 계산할 수 있다(S440). 바람직한 실시예에서 메모리의 최악 수행시간 계산은, 메모리 제어기에 의해 수행될 수 있다. 예를 들어, 메모리 제어기는 도 3에 도시된 과정들을 통해 메모리의 최악 수행시간을 계산할 수 있다. 컴퓨팅 장치는, 계산된 최악수행 시간에 기반하여, 경성 실시간 인공지능 서비스의 적합성 여부를 판단할 수 있 다(S460). 예를 들어, 소프트웨어 측면의 최악 수행시간과 하드웨어 측면의 최악수행시간으로부터 산출된 최종 최악 수행시간이 기설정된 시간 제약조건 이하인 경우, 경성 실시간 인공지능 서비스가 가능한 것으로 판단할 수 있다. 다른 예로, 계산된 최악 수행시간의 합이 기설정된 시간 제약조건을 초과하는 경우, 비실시간 인공지 능 서비스가 가능한 것으로 판단할 수 있다. 도 5는 본 개시가 적용될 수 있는 예시적인 컴퓨팅 장치를 개략적으로 나타낸 블록구성도이다. 도 5를 참조하면, 컴퓨팅 장치는 프로세서, 가속기, 메모리, 스토리지, 입출력 인터페 이스 및 통신 인터페이스 중 일부 또는 전부를 포함할 수 있다. 컴퓨팅 장치는 데스크탑 컴퓨터, 서버 및/또는 지능형 카메라 등과 같은 고정형(stationary) 컴퓨팅 장치뿐만 아니라 스마트 폰 및/또는 랩탑 컴 퓨터 등과 같은 휴대용(mobile) 컴퓨팅 장치일 수도 있다. 컴퓨팅 장치들의 구성요소들은 버스(bus), NoC(Network on a Chip), PCIe(Peripheral Component Interconnect Express) 등을 통하여 서로 통신할 수 있다. 프로세서는 컴퓨팅 장치에 포함된 컴포넌트들의 동작을 제어하는 장치로, 예를 들어, 적어도 하나의 명령어들을 실행할 수 있는 적어도 하나의 코어를 포함할 수 있다. 프로세서는 메모리에 저장된 명령 어들을 실행할 수 있다. 프로세서는 단일 프로세서 또는 복수의 프로세서들일 수 있다. 실시예들에 따라, 프로세서는 메모리에 저장된 명령어들을 실행함으로써, 가속기가 인공지능 서비스 테스트 케이스 실행 파일을 기초로 소프트웨어의 최악 수행시간을 계산하고, 메모리의 하드웨어 측면에서의 최악 수행시간 을 계산하도록 제어할 있다. 프로세서는 가속기로부터 특정 인공지능 응용에 대한 경성 실시간 서비 스 적합성에 대한 판단결과를 획득하거나, 최악 수행시간들을 기초로 특정 인공지능 응용에 대한 경성 실시간 서비스 적합성을 직접 판단할 수도 있다. 가속기는 프로세서의 명령어에 따른 신경망을 실행하여, 학습 또는 추론을 수행하는 AI 가속기 (Artificial Intelligence accelerator)로서, 도 1에 도시된 신경망 가속기 또는 가속기 칩일 수 있다. 메모리는 프로세서에 의해서 실행 가능한(executable) 복수의 명령어들을 저장할 수 있다. 메모리 는 단일 메모리 또는 복수의 메모리들일 수 있다. 영상 융합에 필요한 정보는 단일 메모리에 저장되거나 복수의 메모리들에 나뉘어 저장될 수 있다. 메모리가 복수의 메모리들로 구성된 경우, 복수의 메모리들은 물리적으로 분리될 수 있다. 메모리는 휘발성 메모리 및 비휘발성 메모리 중 적어도 하나를 포함할 수 있 다. 휘발성 메모리는 SRAM(Static Random Access Memory) 또는 DRAM(Dynamic Random Access Memory) 등을 포함 하고, 비휘발성 메모리는 플래시 메모리(flash memory) 등을 포함한다. 스토리지는 컴퓨팅 장치에 공급되는 전력이 차단되더라도 저장된 데이터를 유지할 수 있다. 예를 들면, 스토리지는 비휘발성 메모리를 포함할 수도 있고, 자기 테이프, 광학 디스크, 자기 디스크와 같은 저장 매체를 포함할 수도 있다. 스토리지는 프로세서에 의해서 처리될 데이터 및 프로세서에 의해서 처리된 데이터를 저장할 수 있다. 스토리지에 저장된 프로그램 또는 데이터는, 프로세서에 의해서 실행되기 이전에 메모리 로 로딩될 수 있다. 스토리지는 프로그램 언어로 작성된 파일을 저장할 수 있고, 파일로부터 컴파일러 등 에 의해서 생성된 프로그램은 메모리로 로딩될 수 있다. 입출력 인터페이스는 키보드, 마우스, 터치 인터페이스, 마이크 및/또는 카메라 등과 같은 입력 장치를 포 함할 수 있고, 디스플레이 및/또는 스피커 등과 같은 출력 장치를 포함할 수 있다. 사용자는 입출력 인터페이스 를 통해 프로세서에 의한 프로그램의 실행을 트리거하고/거나, 프로그램의 실행결과를 확인할 수 있 다. 통신 인터페이스는 외부 네트워크에 대한 액세스를 제공할 수 있다. 예를 들면, 컴퓨팅 장치는 통신 인터페이스를 통해 하나 이상의 외부장치와 통신할 수 있다. 본 개시의 예시적인 실시예들에 기술된 적어도 일부의 구성요소들은 DSP(Digital Signal Processor), 프로세서, 컨트롤러, ASIC(Application-Specific IC), 프로그래머블 로직소자(FPGA 등), 기타 전자소자 중의 적어도 하나 또는 이들의 조합이 포함되는 하드웨어 요소로써 구현될 수 있다. 또한, 예시적인 실시예들에서 기술된 적어도 일부의 기능(function)들 또는 처리과정(process)들은 소프트웨어로 구현될 수 있으며, 소프트웨어는 기록매체 에 저장될 수 있다. 본 개시의 예시적인 실시예들에 기술된 적어도 일부의 구성요소들, 기능들, 그리고 처리과 정들은 하드웨어와 소프트웨어의 결합으로 구현될 수 있다. 본 개시의 예시적인 실시예들에 따른 방법은 컴퓨터에서 실행될 수 있는 프로그램으로 작성될 수 있고, 마그네 틱 저장매체, 광학적 판독매체, 디지털 저장매체 등 다양한 기록 매체로도 구현될 수 있다. 본 명세서에 설명된 각종 기술들의 구현들은 디지털 전자 회로조직으로, 또는 컴퓨터 하드웨어, 펌웨어, 소프트 웨어로, 또는 그들의 조합들로 구현될 수 있다. 구현들은 데이터 처리 장치, 예를 들어 프로그램가능 프로세서, 컴퓨터, 또는 다수의 컴퓨터들의 동작에 의한 처리를 위해, 또는 이 동작을 제어하기 위해, 컴퓨터 프로그램 제 품, 즉 정보 캐리어, 예를 들어 기계 판독가능 저장 장치(컴퓨터 판독가능 매체) 또는 전파 신호에서 유형적으 로 구체화된 컴퓨터 프로그램으로서 구현될 수 있다. 상술한 컴퓨터 프로그램(들)과 같은 컴퓨터 프로그램은 컴 파일된 또는 인터프리트된 언어들을 포함하는 임의의 형태의 프로그래밍 언어로 기록될 수 있고, 독립형 프로그 램으로서 또는 모듈, 구성요소, 서브루틴, 또는 컴퓨팅 환경에서의 사용에 적절한 다른 유닛으로서 포함하는 임 의의 형태로 전개될 수 있다. 컴퓨터 프로그램은 하나의 사이트에서 하나의 컴퓨터 또는 다수의 컴퓨터들 상에 서 처리되도록 또는 다수의 사이트들에 걸쳐 분배되고 통신 네트워크에 의해 상호 연결되도록 전개될 수 있다. 컴퓨터 프로그램의 처리에 적절한 프로세서들은 예로서, 범용 및 특수 목적 마이크로프로세서들 둘 다, 및 임의 의 종류의 디지털 컴퓨터의 임의의 하나 이상의 프로세서들을 포함한다. 일반적으로, 프로세서는 판독 전용 메 모리 또는 랜덤 액세스 메모리 또는 둘 다로부터 명령어들 및 데이터를 수신할 것이다. 컴퓨터의 요소들은 명령 어들을 실행하는 적어도 하나의 프로세서 및 명령어들 및 데이터를 저장하는 하나 이상의 메모리 장치들을 포함 할 수 있다. 일반적으로, 컴퓨터는 데이터를 저장하는 하나 이상의 대량 저장 장치들, 예를 들어 자기, 자기-광디스크들, 또는 광 디스크들을 포함할 수 있거나, 이것들로부터 데이터를 수신하거나 이것들에 데이터를 송신하 거나 또는 양쪽으로 되도록 결합될 수도 있다. 컴퓨터 프로그램 명령어들 및 데이터를 구체화하는데 적절한 정 보 캐리어들은 예로서 반도체 메모리 장치들, 예를 들어, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(Magnetic Media), CD-ROM(Compact Disk Read Only Memory), DVD(Digital Video Disk)와 같은 광 기 록 매체(Optical Media), 플롭티컬 디스크(Floptical Disk)와 같은 자기-광 매체(Magneto-Optical Media), 롬 (ROM, Read Only Memory), 램(RAM, Random Access Memory), 플래시 메모리, EPROM(Erasable Programmable ROM), EEPROM(Electrically Erasable Programmable ROM) 등을 포함한다. 프로세서 및 메모리는 특수 목적 논리 회로조직에 의해 보충되거나, 이에 포함될 수 있다. 프로세서는 운영 체제(Operating System) 및 상기 운영 체제 상에서 수행되는 소프트웨어 애플리케이션을 수행 할 수 있다. 또한, 프로세서 디바이스는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 프로세서 디바이스는 하나가 사용되는 것으로 설명된 경우도 있지만,"}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "해당 기술분야에서 통상의 지식을 가진 자는, 프로세서 디바이스가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 프로세서 디바이스는 복수 개의 프 로세서 또는 하나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processo r)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 또한, 비-일시적 컴퓨터 판독가능 매체(non-transitory computer-readable media)는 컴퓨터에 의해 액세스될 수 있는 임의의 가용매체일 수 있고, 컴퓨터 저장매체 및 전송매체를 모두 포함할 수 있다. 본 명세서는 다수의 특정한 구현물의 세부사항들을 포함하지만, 이들은 어떠한 발명이나 청구 가능한 것의 범위 에 대해서도 제한적인 것으로서 이해되어서는 안되며, 오히려 특정한 발명의 특정한 실시형태에 특유할 수 있는 특징들에 대한 설명으로서 이해되어야 한다. 개별적인 실시형태의 문맥에서 본 명세서에 기술된 특정한 특징들 은 단일 실시형태에서 조합하여 구현될 수도 있다. 반대로, 단일 실시형태의 문맥에서 기술한 다양한 특징들 역 시 개별적으로 혹은 어떠한 적절한 하위 조합으로도 복수의 실시형태에서 구현 가능하다. 나아가, 특징들이 특 정한 조합으로 동작하고 초기에 그와 같이 청구된 바와 같이 묘사될 수 있지만, 청구된 조합으로부터의 하나 이 상의 특징들은 일부 경우에 그 조합으로부터 배제될 수 있으며, 그 청구된 조합은 하위 조합이나 하위 조합의 변형물로 변경될 수 있다. 마찬가지로, 특정한 순서로 도면에서 동작들을 묘사하고 있지만, 이는 바람직한 결과를 얻기 위하여 도시된 그 특정한 순서나 순차적인 순서대로 그러한 동작들을 수행하여야 한다거나 모든 도시된 동작들이 수행되어야 하는 것으로 이해되어서는 안 된다. 특정한 경우, 멀티태스킹과 병렬 프로세싱이 유리할 수 있다. 또한, 상술한 실시 형태의 다양한 장치 컴포넌트의 분리는 그러한 분리를 모든 실시형태에서 요구하는 것으로 이해되어서는 안되며, 설명한 프로그램 컴포넌트와 장치들은 일반적으로 단일의 소프트웨어 제품으로 함께 통합되거나 다중 소프트웨어 제품에 패키징 될 수 있다는 점을 이해하여야 한다. 한편, 본 명세서와 도면에 개시된 본 발명의 실시 예들은 이해를 돕기 위해 특정 예를 제시한 것에 지나지 않으 며, 본 발명의 범위를 한정하고자 하는 것은 아니다. 여기에 개시된 실시 예들 이외에도 본 발명의 기술적 사상"}
{"patent_id": "10-2022-0168730", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "에 바탕을 둔 다른 변형 예들이 실시 가능하다는 것은, 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자 에게 자명한 것이다. 본 실시예의 보호 범위는 아래의 청구범위에 의하여 해석되어야 하며, 그와 동등한 범위 내에 있는 모든 기술 사상은 본 실시예의 권리범위에 포함되는 것으로 해석되어야 할 것이다.도면 도면1 도면2 도면3 도면4 도면5"}
{"patent_id": "10-2022-0168730", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시예에 따른 신경망 가속기를 개략적으로 나타낸 블록 구성도이다. 도 2는 본 개시의 일 실시예에 따른 메모리 제어기를 개략적으로 나타낸 블록 구성도이다. 도 3은 본 개시의 일 실시예에 따른 메모리 제어기가 하드웨어 측면의 최악 수행시간을 예측하는 방법을 나타내 는 흐름도이다. 도 4는 본 개시의 일 실시예에 따른 경성 실시간 인공지능 서비스 적합성 판단 방법을 나타내는 흐름도이다. 도 5는 본 개시가 적용될 수 있는 예시적인 컴퓨팅 장치를 개략적으로 나타낸 블록구성도이다."}
