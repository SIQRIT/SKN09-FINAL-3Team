{"patent_id": "10-2022-0152079", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0070783", "출원번호": "10-2022-0152079", "발명의 명칭": "부동 소수점 데이터 압축을 위한 방법 및 장치", "출원인": "주식회사 사피온코리아", "발명자": "한정호"}}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "데이터 압축 장치에 있어서,명령어들을 저장하는 적어도 하나의 메모리; 및상기 명령어들을 실행함으로써, 부동 소수점 포맷에 따라 인코딩된 데이터 요소들(data elements)을 포함하는데이터 블록으로부터 압축된 데이터 요소들을 생성하는 적어도 하나의 프로세서를 포함하되, 상기 프로세서는,상기 데이터 요소들 중 지수값이 기 설정된 지수값들 중 어느 하나에 매치되는 제1 데이터 요소에 대해, 상기제1 데이터 요소의 지수값에 대응되는 명령코드(operation code), 상기 제1 데이터 요소의 부호비트 및 가수비트들을 포함하는 제1 압축된 데이터 요소를 생성하고,상기 데이터 요소들 중 지수값이 상기 기 설정된 지수값들에 매치되지 않고, 제로값이 아닌 제2 데이터 요소에대해, 스킵코드 및 상기 제2 데이터 요소를 포함하는 제2 압축된 데이터 요소를 생성하는, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 명령코드의 비트길이 및 상기 스킵코드의 비트길이 각각은 상기 부동 소수점 포맷에 따른 지수 비트 길이보다 짧은, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 프로세서는,상기 데이터 요소들 중 지수값이 제로값인 제3 데이터 요소에 대해, 제로코드를 포함하는 제3 압축된 데이터 요소를 생성하는, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 프로세서는,상기 데이터 요소들 중 초기 데이터 요소에 대해, 상기 초기 데이터 요소의 지수값을 포함하는 상기 지수값들을설정하고, 기 정의된 설정코드 및 상기 초기 데이터 요소를 포함하는 초기 압축된 데이터 요소를 생성하는, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 프로세서는,상기 압축된 데이터 요소들을 외부 메모리에 저장하는, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,공개특허 10-2024-0070783-3-상기 프로세서는,상기 압축된 데이터 요소들 중 가장 큰 값을 나타내는 참조 데이터 요소를 식별하고,상기 압축된 데이터 요소들 중 하나의 압축된 데이터 요소의 지수값과 상기 참조 데이터 요소의 지수값 간 차이값을 판단하고, 상기 하나의 압축된 데이터 요소의 지수값과 상기 참조 데이터 요소의 지수값 간 차이값에 기초하여, 상기 하나의 압축된 데이터 요소에 포함된 가수비트들 중 적어도 하나의 하위 가수비트를 무시함으로써 생성된 2차 압축된 데이터 요소를, 소프트맥스 함수의 입력값으로서 저장하는, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 프로세서는, 상기 하나의 압축된 데이터 요소의 부호값이 상기 참조 데이터 요소의 부호값과 동일한 경우, 상기 하나의 압축된 데이터 요소에 포함된 가수비트들 중 상기 차이값에 1을 뺀 값에 대응되는 개수를 갖는 제1 하위 가수비트들을 무시하고,상기 하나의 압축된 데이터 요소의 부호값이 상기 참조 데이터 요소의 부호값과 동일하지 않은 경우, 상기 하나의 압축된 데이터 요소에 포함된 가수비트들 중 상기 차이값에 대응되는 개수를 갖는 제2 하위 가수비트들을 무시하는, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 프로세서는,상기 하나의 압축된 데이터 요소에 포함된 가수비트들 중 상기 차이값보다 적은 개수를 갖는 제3 하위 가수비트들을 무시하는, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제5항에 있어서,상기 프로세서는,기 정의된 테이블을 참조하여, 상기 압축된 데이터 요소들 중 하나의 압축된 데이터 요소의 지수값 및 기 설정된 오류율에 따른 가수비트길이를 식별하고,상기 하나의 압축된 데이터 요소의 가수비트들 중 상기 가수비트길이에 대응되는 상위 가수비트들을 소프트맥스함수의 입력값의 가수비트들로서 저장하는, 데이터 압축 장치."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "데이터 압축을 위한 컴퓨터 구현 방법에 있어서,부동 소수점 포맷에 따라 인코딩된 데이터 요소들(data elements)을 포함하는 데이터 블록으로부터 압축된 데이터 요소들을 생성하는 단계를 포함하되, 상기 압축된 데이터 요소들을 생성하는 단계는,상기 데이터 요소들 중 지수값이 기 설정된 지수값들 중 어느 하나에 매치되는 제1 데이터 요소에 대해, 상기제1 데이터 요소의 지수값에 대응되는 명령코드(operation code), 상기 제1 데이터 요소의 부호비트 및 가수비트들을 포함하는 제1 압축된 데이터 요소를 생성하는 단계; 및상기 데이터 요소들 중 지수값이 상기 기 설정된 지수값들에 매치되지 않고, 제로값이 아닌 제2 데이터 요소에대해, 스킵코드 및 상기 제2 데이터 요소를 포함하는 제2 압축된 데이터 요소를 생성하는 단계공개특허 10-2024-0070783-4-를 포함하는, 방법."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 압축된 데이터 요소들을 생성하는 단계는,상기 데이터 요소들 중 지수값이 제로값인 제3 데이터 요소에 대해, 제로코드를 포함하는 제3 압축된 데이터 요소를 생성하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제10항에 있어서,상기 압축된 데이터 요소들을 생성하는 단계는,상기 데이터 요소들 중 초기 데이터 요소에 대해, 상기 초기 데이터 요소의 지수값을 포함하는 상기 지수값들을설정하는 단계; 및기 정의된 설정코드 및 상기 초기 데이터 요소를 포함하는 초기 압축된 데이터 요소를 생성하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제10항에 있어서,상기 압축된 데이터 요소들을 외부 메모리에 저장하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 압축된 데이터 요소들을 외부 메모리에 저장하는 단계는,상기 압축된 데이터 요소들 중 가장 큰 값을 나타내는 참조 데이터 요소를 식별하는 단계;상기 압축된 데이터 요소들 중 하나의 압축된 데이터 요소의 지수값과 상기 참조 데이터 요소의 지수값 간 차이값을 판단하는 단계; 및상기 하나의 압축된 데이터 요소의 지수값과 상기 참조 데이터 요소의 지수값 간 차이값에 기초하여, 상기 압축된 데이터 요소들 중 하나의 압축된 데이터 요소에 포함된 가수비트들 중 적어도 하나의 하위 가수비트를 무시함으로써 생성된 2차 압축된 데이터 요소를, 소프트맥스 함수의 입력값으로서 저장하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-0152079", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 2차 압축된 데이터 요소를 소프트맥스 함수의 입력값으로서 저장하는 단계는,상기 하나의 압축된 데이터 요소의 부호값이 상기 참조 데이터 요소의 부호값과 동일한 경우, 상기 하나의 압축된 데이터 요소에 포함된 가수비트들 중 상기 차이값에 1을 뺀 값에 대응되는 개수를 갖는 제1 하위 가수비트들을 무시하는 단계; 및상기 하나의 압축된 데이터 요소의 부호값이 상기 참조 데이터 요소의 부호값과 동일하지 않은 경우, 상기 하나의 압축된 데이터 요소에 포함된 가수비트들 중 상기 차이값에 대응되는 개수를 갖는 제2 하위 가수비트들을 무시하는 단계공개특허 10-2024-0070783-5-를 포함하는, 방법."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "부동 소수점 데이터 압축을 위한 방법 및 장치를 개시한다. 본 발명의 일 측면에 의하면, 데이터 압축 장치에 있어서, 명령어들을 저장하는 적어도 하나의 메모리, 및 상기 명령어들을 실행함으로써, 부동 소수점 포맷에 따라 인코딩된 데이터 요소들(data elements)을 포함하는 데이터 블록으로부터 압축된 데이터 요소들을 생성하는 적어도 하나의 프로세서를 포함하는 데이터 압축 장치를 제공한 다."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명의 실시예들은 부동 소수점 데이터 압축을 위한 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "이하에 기술되는 내용은 단순히 본 실시예와 관련되는 배경 정보만을 제공할 뿐 종래기술을 구성하는 것이 아니 다."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "최근, 딥러닝 알고리즘이 발전함에 따라, 딥러닝 알고리즘이 다양한 기술분야에 적용되고 있다. 일 예로, 딥러 닝 알고리즘에 따라 훈련된 신경망은 다양한 문제들에 대한 솔루션들을 제공한다. 특히, 영상처리 분야에서는, 주로 합성곱 신경망(Convolutional Neural Network; CNN)이 이용된다. 합성곱 신경망을 이용한 영상처리는 방대한 양의 데이터 연산을 요구하기 때문에, 효율적인 데이터 연산을 위한 하드웨어 가속기 또는 인공지능(Artificial Intelligence; AI) 가속기에 대한 개발이 이루어지고 있다. AI 가속 기는 딥러닝 알고리즘에 최적화된 하드웨어 구성요소들 또는 엔진들을 포함하며, 일반적인 컴퓨팅 장치에 비해 빠른 신경망 연산 속도를 가진다. 하지만, 내부 메모리의 한계로 인해, AI 가속기는 고화질의 이미지 또는 신경망 연산에 따른 많은 특징맵들을 내부 메모리 또는 온칩 메모리(on-chip memory)에 저장하기 어렵다. 이에 따라, AI 가속기는 입력 이미지 또는 특징맵들을 복수의 작은 타일(tile)들로 분할하고, 분할된 타일들을 외부 메모리 또는 오프칩 메모리(off-chip memory)에 저장한다. 이후, AI 가속기는 저장된 타일들 중 필요한 일 부 타일들을 내부 메모리 또는 온칩 메모리에 복사하고, 복사된 타일들을 이용하여 영상처리를 수행한다. 그럼에도 불구하고, AI 가속기가 외부 메모리 간 많은 양의 데이터 이동에 의해 AI 가속기의 성능이 저하될 수 있다. 예를 들면, AI 가속기가 외부 메모리에 데이터를 쓰는 동작, 및 외부 메모리로부터 데이터를 읽어오는 동 작에 의해 큰 전력이 소모된다. 구체적으로, AI 가속기와 외부 메모리 간 데이터를 이동시키는 데 소요되는 전 력은 AI 가속기 내 데이터 이동에 소요되는 전력보다 수백 배 클 수 있다. 나아가, AI 가속기와 외부 메모리 간 대역폭 한계로 인해, AI 가속기가 데이터를 처리하는 데 많은 시간이 소요될 뿐만 아니라, AI 가속기의 성능이 제한될 수 있다. 따라서, AI 가속기의 외부 메모리에 대한 접근을 최소화하기 위한 방안들이 필요하다. 종래에는 주로 AI 가속기가 외부 메모리에 접근하는 횟수를 줄이는 방법들이 연구되었다. 일 예로서, AI 가속기 의 내부 메모리에 복사된 데이터가 다시 이용되도록 연산 순서를 설정하는 방법이 있다. 다른 예로서, AI 가속 기의 내부 메모리에 복사된 데이터를 이용하여 현재 레이어(layer)에 대한 연산이 끝난 때, 연산 결과를 외부 메모리로 이동시키는 것이 아니라 다음 레이어에서 연산 결과를 이용하는 방법이 있다. 하지만, AI 가속기가 외부 메모리에 접근하는 횟수를 줄이는 방법은 AI 가속기와 외부 메모리 간 데이터 이동에 따른 전력 소모, 시간 소요 및 성능 제한을 해결하는 데 한계가 있다."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 실시예들은, AI 가속기와 외부 메모리 간 데이터를 압축함으로써, 데이터 접근에 소요되는 전력 소모 및 시간 소요를 줄이고, 메모리 대역폭 한계에 의한 AI 가속기의 성능 제한을 개선하기 위한 데이터 압축 장치 및 방법을 제공하는 데 주된 목적이 있다. 본 발명이 해결하고자 하는 과제들은 이상에서 언급한 과제들로 제한되지 않으며, 언급되지 않은 또 다른 과제 들은 아래의 기재로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일 측면에 의하면, 데이터 압축 장치에 있어서, 명령어들을 저장하는 적어도 하나의 메모리, 및 상기 명령어들을 실행함으로써, 부동 소수점 포맷에 따라 인코딩된 데이터 요소들(data elements)을 포함하는 데이터 블록으로부터 압축된 데이터 요소들을 생성하는 적어도 하나의 프로세서를 포함하는 데이터 압축 장치를 제공한 다. 상기 프로세서는 상기 데이터 요소들 중 지수값이 기 설정된 지수값들 중 어느 하나에 매치되는 제1 데이터 요소에 대해, 상기 제1 데이터 요소의 지수값에 대응되는 명령코드(operation code), 상기 제1 데이터 요소의 부호비트 및 가수비트들을 포함하는 제1 압축된 데이터 요소를 생성한다. 상기 프로세서는 상기 데이터 요소들 중 지수값이 상기 기 설정된 지수값들에 매치되지 않고, 제로값이 아닌 제2 데이터 요소에 대해, 스킵코드 및 상기 제2 데이터 요소를 포함하는 제2 압축된 데이터 요소를 생성한다. 본 실시예의 다른 측면에 의하면, 데이터 압축을 위한 컴퓨터 구현 방법을 제공한다. 방법은 부동 소수점 포맷 에 따라 인코딩된 데이터 요소들(data elements)을 포함하는 데이터 블록으로부터 압축된 데이터 요소들을 생성 하는 단계를 포함한다. 상기 압축된 데이터 요소들을 생성하는 단계는 상기 데이터 요소들 중 지수값이 기 설정 된 지수값들 중 어느 하나에 매치되는 제1 데이터 요소에 대해, 상기 제1 데이터 요소의 지수값에 대응되는 명 령코드(operation code), 상기 제1 데이터 요소의 부호비트 및 가수비트들을 포함하는 제1 압축된 데이터 요소 를 생성하는 단계를 포함한다. 상기 압축된 데이터 요소들을 생성하는 단계는 상기 데이터 요소들 중 지수값이 상기 기 설정된 지수값들에 매치되지 않고, 제로값이 아닌 제2 데이터 요소에 대해, 스킵코드 및 상기 제2 데이 터 요소를 포함하는 제2 압축된 데이터 요소를 생성하는 단계를 더 포함한다."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "이상에서 설명한 바와 같이 본 발명의 일 실시예에 의하면, AI 가속기와 외부 메모리 간 데이터를 압축함으로써, 데이터 접근에 소요되는 전력 소모 및 시간 소요를 줄이고, 메모리 대역폭 한계에 의한 AI 가속 기의 성능 제한을 개선할 수 있다. 본 개시의 효과들은 이상에서 언급한 효과들로 제한되지 않으며, 언급되지 않은 또 다른 효과들은 아래의 기재 로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 개시의 일부 실시예들을 예시적인 도면을 이용해 상세하게 설명한다. 각 도면의 구성 요소들에 참조 부호를 부가함에 있어서, 동일한 구성 요소들에 대해서는 비록 다른 도면 상에 표시되더라도 가능한 한 동일한 부호를 가지도록 하고 있음에 유의해야 한다. 또한, 본 개시를 설명함에 있어, 관련된 공지 구성 또는 기능에 대한 구체적인 설명이 본 개시의 요지를 흐릴 수 있다고 판단되는 경우에는 그 상세한 설명은 생략한다. 본 개시에 따른 실시예의 구성요소를 설명하는 데 있어서, 제1, 제2, i), ii), a), b) 등의 부호를 사용할 수 있다. 이러한 부호는 그 구성요소를 다른 구성 요소와 구별하기 위한 것일 뿐, 그 부호에 의해 해당 구성요소의 본질 또는 차례나 순서 등이 한정되지 않는다. 명세서에서 어떤 부분이 어떤 구성요소를 '포함' 또는 '구비'한 다고 할 때, 이는 명시적으로 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를더 포함할 수 있는 것을 의미한다. 본 발명에 따른 장치 또는 방법의 각 구성요소는 하드웨어 또는 소프트웨어로 구현되거나, 하드웨어 및 소프트 웨어의 결합으로 구현될 수 있다. 또한, 각 구성요소의 기능이 소프트웨어로 구현되고 마이크로프로세서가 각 구성요소에 대응하는 소프트웨어의 기능을 실행하도록 구현될 수도 있다. 이하에서는, 본 발명의 일 실시예에 따른 데이터 압축 장치가 신경망 연산의 기술적 문제점들과 그에 대한 솔루 션들을 여러 도면들에 걸쳐 설명한다. 딥러닝 알고리즘에 이용되는 심층 신경망들의 종류로는 합성곱 신경망(Convolutional Neural Network; CNN), 순 환 신경망(Recurrent Neural Network; RNN) 또는 트랜스포머 신경망(Transformer Neural Network) 등이 있다. 심층 신경망들 중 합성곱 신경망에 대한 연산은 복수의 컨볼루션 레이어들 각각에서 컨볼루션 연산들을 포함하 므로, 합성곱 신경망 기반 딥러닝 알고리즘은 많은 연산량을 처리할 수 있는 하드웨어 장치가 필요하다. 또한, 심층 신경망들 중 순환 신경망 및 트랜스포머 신경망에 대한 연산은 큰 규모의 행렬 곱셉 및 행렬 덧셈을 포함하므로, 순환 신경망 기반 딥러닝 알고리즘은 많은 연산량을 처리할 수 있는 하드웨어 장치가 필요하다. 본 발명의 일 실시예에 따른 AI 가속기는 신경망 연산에 최적화된 연산 유닛들을 포함하는 AI 가속기를 이용하 여 신경망 연산을 가속할 수 있다. 도 1은 본 발명의 일 실시예에 따른 AI 가속 시스템의 구성도이다. 도 1을 참조하면, AI 가속 시스템은 AI 가속기 및 외부 메모리를 포함한다. 신경망 연산 과정에서 특징 데이터(feature data)의 양이 방대하기 때문에, AI 가속기는 모든 레이어들의 특징 데이터를 내부 메모리에 저장하기 어렵다. 따라서, 외부 메모리는 신경망 연산에 필요한 데이터를 저장하고, AI 가속기는 외부 메모리에 저장된 데이터를 불러오고, 불러온 데이터를 처리함으로써 신경망 연산을 수행한다. 이하에서는, AI 가속기 시스템의 각 구성요소를 설명한다. 외부 메모리는 신경망 연산의 입력 데이터 또는 출력 데이터로서, 이미지 데이터, 특징 데이터, 가중치들, 및 바이어스들을 저장한다. 합성곱 신경망 연산 시, 외부 메모리는 입력 이미지 또는 특징맵들(feature maps)로부터 분할된 복수의 타일들을 저장한다. 외부 메모리는 AI 가속기 내 데이터 메모리보다 큰 저장용량을 가진다. 외부 메모리는 디 램(Dynamic Random Access Memory; DRAM)으로 구현될 수 있다. 외부 메모리는 오프칩 메모리(off-chip memory)로 지칭될 수 있다. AI 가속기는 신경망 연산에 최적화된 하드웨어 장치로서, 외부 메모리에 저장된 데이터를 이용하여 신경망 연산을 수행한다. AI 가속기는 처리된 데이터를 외부 메모리에 저장한다. 합성곱 신경망 연산 시, AI 가속기는 외부 메모리에 저장된 타일들 중 일부에 대해 신경망 연산을 수행할 수 있다. AI 가속기는 프로세서, 연산부(computation unit, 112), DMA(Direct Memory Access, 113), 압축/압 축해제부(compression/decompression uint, 114), 프로그램 메모리, 데이터 메모리를 포함한다. 프로세서는 프로그램 메모리에 저장된 프로그램 명령어들을 실행함으로써, AI 가속기의 전반적 인 동작들을 제어한다. 데이터 메모리는 프로세서의 제어에 필요한 데이터 및 외부 메모리로부터 읽어들인 데이터를 저 장한다. 일 예로서, 데이터 메모리는 신경망의 특징 데이터 또는 가중치들을 저장할 수 있다. 프로그램 메모리와 데이터 메모리는 내부 메모리 또는 온칩 메모리(on-chip memory)로 지칭될 수 있 다. 연산부는 합성곱 연산과 같은 신경망 연산을 수행한다. 연산부는 신경망 연산에 최적화되도록 구성되어, 신경망 연산에 대해 빠른 처리 속도를 갖는다. DMA는 데이터 메모리와 외부 메모리간 데이터 전송을 지원한다. 압축/압축해제부는 데이터 메모리와 외부 메모리 간 데이터 전송량을 줄이기 위해, 데이터 압축 또는 데이터 압축 해제를 지원한다. 압축/압축해제부는 프로세서의 프로그램 실행에 따라 제어되거나, 데이터를 압축 프로세스를 수행하 는 적어도 하나의 프로세서 및 적어도 하나의 메모리를 포함할 수 있다. 본 발명의 일 실시예에 따르면, 압축/압축해제부는 데이터 메모리와 외부 메모리 간 데이터의 비트 길이를 줄임으로써, 데이터 전송에 따른 전력 및 시간을 줄일 수 있다. 구체적으로, 신경망 훈련 장치는 AI 가속기와 연계하여 신경망의 파라미터들을 훈련한다. 신경망의 파라미 터들은 신경망의 정확성을 위해 부동 소수점 포맷에 따라 1차적으로 훈련되고, 신경망의 연산 속도를 위해 고정 소수점 포맷에 따라 2차적으로 훈련된다. 대안으로서, 신경망의 파라미터들은 정수 포맷에 따라 2차 훈련될 수 있다. 구체적으로, 부동 소수점 포맷은 고정 소수점 포맷 또는 정수 타입보다 더 많은 범위의 숫자들을 표현할 수 있 기 때문에, 부동 소수점 포맷에 따라 훈련된 신경망의 파라미터들은 신경망의 정확도를 향상시킬 수 있다. 다만, 부동 소수점 포맷으로 인코딩된 데이터는 긴 비트 길이를 가지므로, AI 가속기와 외부 메모리 간 데이터 접근에 따른 전력 소모 및 시간 소요가 크다는 문제점이 있다. 이러한 문제점을 해결하기 위해, 압축/압축해제부는 두 가지 압축 방법으로서, 부동 소수점 포맷에 따라 인코딩된 데이터 요소를 데이터 압축 포맷에 따라 인코딩하는 방법, 또는 소프트맥스 함수에 입력될 데이터 요 소들을 압축하는 방법 중 적어도 하나의 방법을 이용할 수 있다. 구체적으로, 압축/압축해제부는 데이터 메모리와 외부 메모리 간 데이터를 부동 소수점 포맷으 로부터 본 발명의 일 실시예에 따른 데이터 포맷으로 변환함으로써, 데이터 요소의 비트 길이를 줄일 수 있다. 특히, 부동 소수점 포맷에 따라 인코딩된 데이터 요소의 지수값의 비트 길이가 줄거나, 값이 제로인 데이터 요 소의 전체 비트 길이가 줄어든다. 나아가, 신경망 내 소프트맥스 레이어에서 사용되는 소프트맥스 함수에 관한 프로세스의 특징을 고려하여, 압축 /압축해제부는 소프트맥스 함수의 결과값에 영향을 주지 않거나, 미미한 영향을 주는 범위에서 데이터 요 소의 가수비트들 중 상위 가수비트들만 외부 메모리에 저장한다. 본 발명의 일 실시예에 따르면, 데이터를 압축하기 위한 데이터 압축 장치는 압축/압축해제부에 대응될 수 있다. 다른 실시예에서, 데이터 압축 장치는 프로세서, 프로그램 메모리, 데이터 메모리, 및 압 축/압축해제부를 포함할 수 있다. 도 2는 반정밀도 부동 소수점 포맷을 설명하기 위해 예시한 도면이다. 부동 소수점 포맷은 기계 연산을 위해 2 진수로 표현된다. 부동 소수점 포맷은 정밀도에 따라 반정밀도(half-precision), 단정밀도(single-precision) 및 배정밀도 (double-precision) 중 어느 하나를 가질 수 있다. 반정밀도 부동 소수점은 16 비트(bits)로 표현되며, 단정밀 도 부동 소수점은 32 비트로 표현되고, 배정밀도 부동 소수점은 64 비트로 표현된다. 부동 소수점 포맷은 부호 필드(Sign field), 지수 필드(Exponent field), 및 가수 필드(Mantissa field)를 포함한다. 도 2를 참조하면, 반정밀도 부동 소수점 포맷에 관한 비트 구성 및 카테고리들이 도시되어 있다. 부동 소수점 포맷은 IEEE 754 표준 문서에 개시된 부동 소수점 포맷을 기반으로 한다. 반정밀도 부동 소수점 포 맷은 1 비트의 부호 필드, 5비트의 지수 필드, 및 10 비트의 가수 필드를 포함한다. 다른 실시예에서, 각 필드 의 비트 수는 달라질 수 있다. 반정밀도 부동 소수점 포맷은 지수부 및 가수부의 값에 따라 정규값(normalized number), 비정규값(subnormal number), 제로(+/- zero), NaN(Not a Number), 및 무한대(+/- Infinity)를 나타낼 수 있다. 정규값은 (-1)S×2(E-15) ×(1.M)2의 형태로 표현 가능한 값들을 나타낸다. E는 지수값(exponent value)이고, M은 가수비트들(mantissa bits)이다. 지수 필드는 부호 비트를 가지고 있지 않기 때문에 음수를 나타내기 위해 -15 만큼 바이어스를 이용한다. 예를 들어, 10000의 지수비트들(exponent bits)은 십진수 표현에서 16을 나타내지만, -15 바이어스에 의해 실질적으로 1의 지수값을 나타낸다. 한편, 가수비트들은 암시된 선행하는 1을가진다. 정규값의 해석으로서, 이진수로 표현되는 (1.M)2 값을 (E-15)만큼 왼쪽으로 시프트하고, 부호값을 적용 하면, 이진수 표현에 따른 값이 산출된다. 비정규값은 (-1)S×2-14 ×(0.M)2의 형태로 표현되는 값들을 나타낸다. 비정규값은 정규값에 의해 표현되지 않은 작은 수를 나타내기 위한 것이다. 비정규값의 가수비트들은 선행하는 1을 가지지 않는다. 비정규값을 통해 0에 가까운 수를 나타낼 수 있다. 제로값은 지수비트들과 가수비트들이 모두 제로인 값을 나타낸다. 부호 비트는 0 또는 1일 수 있다. 무한대는 정규값에 의해 표현되는 범위를 벗어난 값을 나타낸다. 이하에서는, 두 가지 압축 방법 중 부동 소수점 포맷에 따라 인코딩된 데이터 요소를 데이터 압축 포맷에 따라 인코딩하는 방법에 관해 설명한다. 한편, 이하에서는, 반정밀도 부동 소수점 포맷은 1 비트의 부호 필드, 6비트의 지수 필드, 및 9 비트의 가수 필 드를 포함하는 것으로 설명한다. 도 3a 및 도 3b는 본 발명의 일 실시예에 따른 압축 데이터 포맷을 설명하기 위해 예시한 도면이다. 신경망 훈련 동안 생성되는 특징값들은 특징맵들 상에서 서로 인접할수록 비슷한 값을 가진다. 예를 들면, 이미 지 타일 내에서 특정 물체에 관한 픽셀들을 비슷한 값들을 가질 확률이 높다. 부동 소수점 포맷에서, 인접한 특 징값들은 비슷한 지수값들을 가질 확률이 높다. 즉, 신경망의 특징값들이 부동 소수점 포맷에 따라 데이터 요소 들로 인코딩 될 때, 데이터 요소들의 지수값들은 지역성(locality)을 가진다. 본 발명의 일 실시예에 따른 압축 데이터 포맷은 데이터 요소들의 지수값들의 지역성을 이용하여 데이터 요소들 의 비트들을 압축시킬 수 있는 포맷이다. 데이터 압축 장치는 지역성을 갖는 데이터 요소들에 대해 참조 지수값을 설정하고, 데이터 요소들의 지수값이 참조 지수값에 따른 지수범위에 포함되는지 여부 또는 데이터 요소들의 지수값들이 제로값인지 여부에 따라 데 이터 요소들을 압축한다. 도 3a를 참조하면, 본 발명의 일 실시예에 따른 압축 데이터 포맷이 도시되어 있다. 압축 데이터 포맷은 데이터 요소의 지수비트들을 압축하기 위한 명령 코드(Operation code; OP code)와, 데이터 항목을 포함한다. 데이터 항목은 데이터 요소의 부호비트와 가수비트들을 포함한다. 데이터 항목은 필요에 따라 지수비트들을 더 포함할 수 있고, 아무 비트들을 포함하지 않을 수도 있다. 명령코드는 데이터 요소의 특성 또는 데이터 요소의 제로 비트들을 가리킬 수 있다. 명령코드에 따른 지시 (indication)는 미리 정의될 수 있다. 도 3b를 더 참조하면, 명령코드들에 따른 지시들이 기록된 테이블이 도시되어 있다. 명령코드, 스킵코드 및 제로코드는 부동 소수점 포맷에 따른 지수 비트 길이보다 짧다. 반정밀도 부동 소수점 포맷에 따른 5 지수비트길이를 압축하기 위해, 명령 코드는 3 비트길이를 가질 수 있다. 도 3b에서, Ein은 입력된 데이터 요소의 지수값을 나타내고, Eref는 참조 지수값을 나타낸다. 참조 지수값에 따른 지수 범위는 Eref, Eref+1, Eref+2, Eref-1, 및 Eref-2를 포함한다. 000 비트들의 명령코드는 입력된 데이터 요소의 지수값이 참조 지수값과 동일함을 가리킨다. 001 비트들부터 110 비트들의 명령코드들은 입력된 데이터 요소의 지수값이 참조 지수값에 따른 지수 범위에 포 함됨을 가리킨다. 도 3b에서, 지수값의 범위는 참조 지수값을 중심으로 균등한 배치를 갖는다. 반면, 다른 실시 예에서 지수 범위는 참조 지수값을 기준으로 대칭 구조가 아닐 수 있다. 예를 들면, 지수 범위 내에서 참조 지 수값이 가장 작은 값일 수 있다. 다른 예로서, 참조 지수값은 가장 큰 값일 수 있다. 101 비트들의 명령코드는 입력된 데이터 요소가 제로값임을 가리킨다. 다른 실시예에서, 제로값을 나타내는 명 령코드 대신 지수범위를 나타내는 명령코드가 이용될 수 있다. 신경망의 레이어에서 값이 0인 데이터의 양이 적 을 때, 압축율이 증가할 수 있다.110 비트들의 명령코드는 입력된 데이터 요소의 지수값이 참조 지수값에 따른 지수 범위를 벗어남을 가리킨다. 111 비트들의 명령코드는 입력된 데이터 요소의 지수값을 참조 지수값으로 설정하는 명령을 가리킨다. 데이터 압축 장치는 부동 소수점 포맷에 따라 인코딩된 데이터 요소들을 도 3a에 도시된 압축 데이터 포맷들 중 하나에 따라 인코딩한다. 도 4는 본 발명의 일 실시예에 따른 데이터 압축 방법의 순서도이다. 데이터 압축 장치는 부동 소수점 포맷에 따라 인코딩된 데이터 요소들(data elements)을 포함하는 데이터 블록 으로부터 압축된 데이터 요소들을 생성한다. 도 4를 참조하면, 데이터 압축 장치는 초기 데이터 요소로서 제1 데이터 요소를 입력 받는다. 미리 설정된 참조 지수값이 존재하지 않을 때, 데이터 압축 장치는 입력된 제1 데이터 요소의 지수값을 참조 지 수값으로 설정한다(S410). 나아가, 데이터 압축 장치는 입력되는 제1 데이터 요소의 지수값을 포함하는 복수의 지수값들을 설정한다. 설정 된 지수값들 각각에 대응되는 명령코드도 함께 설정된다. 데이터 압축 장치는 참조 지수값의 설정을 나타내는 설정코드(set code)와 함께 제1 데이터 요소를 결합함으로 써, 제1 압축된 데이터 요소를 생성한다(S420). 도 3b를 더 참조하면, 제1 인코딩된 데이터 요소는 111 비트들과, 제1 데이터 요소의 전체 비트들을 포함할 수 있다. 이후, 데이터 압축 장치는 입력되는 제2 데이터 요소의 지수값이 참조 지수값에 따른 지수범위에 포함되는지 여 부에 따라 제2 압축된 데이터 요소를 생성한다(S430). 여기서, 참조 지수값에 따른 지수범위는 참조 지수값을 포함하는 복수의 지수값들을 포함한다. 도 3b를 더 참조 하면, 제2 데이터 요소의 지수값이 참조 지수값에 따른 지수범위에 포함되는지 여부는 제2 데이터 요소의 지수 값이 기 설정된 지수값들에 매치되는지 여부에 따라 결정될 수 있다. 제2 데이터 요소의 지수값이 기 설정된 지수값들 중 어느 하나에 매치되는 경우, 데이터 압축 장치는 제2 데이 터 요소의 지수값에 대응되는 명령코드, 제2 데이터 요소의 부호비트 및 제2 데이터 요소의 가수비트들을 포함 하는 제2 압축된 데이터 요소를 생성하기 위해, 제2 데이터 요소를 인코딩한다. 반면, 제2 데이터 요소의 지수값이 기 설정된 지수값들 중 어느 하나에 매치되지 않는 경우, 데이터 압축 장치 는 데이터 압축을 스킵하거나, 새로운 참조 지수값을 설정할 수 있다. 구체적으로, 제2 데이터 요소의 지수값이 기 설정된 지수값들 중 어느 하나에 매치되지 않는 경우, 데이터 압축 장치는 압축 스킵을 나타내는 스킵코드, 및 제2 데이터 요소의 전체 비트들을 포함하도록, 제2 데이터 요소를 인코딩할 수 있다. 제2 데이터 요소 이후에 입력되는 데이터 요소들이 제2 데이터 요소가 아닌 제1 데이터 요소 와의 지역성을 갖는다면, 압축율이 증가할 수 있다. 그렇지 않으면, 데이터 압축 장치는 제2 데이터 요소의 지수값을 참조 지수값으로 설정하고, 참조 지수값의 설 정을 나타내는 설정코드와 제2 데이터 요소의 전체비트들을 포함하도록, 제2 데이터 요소를 인코딩할 수 있다. 제2 데이터 요소 이후에 입력되는 데이터 요소들이 제2 데이터 요소와의 지역성을 갖는다면, 압축율이 증가할 수 있다. 한편, 본 발명의 일 실시예에 따르면, 데이터 압축 장치는 입력되는 제2 데이터 요소가 제로값인 경우, 제로값 을 나타내는 제로코드를 포함하도록, 제2 데이터 요소를 인코딩할 수 있다. 제2 데이터 요소가 제로값인지 판단 하는 것은 제2 데이터 요소가 지수 범위에 포함되는지 여부를 판단하는 것에 우선할 수 있다. 제2 인코딩된 데 이터 요소는 3 비트길이로 압축된다. 신경망의 레이어에서 ReLU(Rectified Linear Unit) 함수에 의해 값이 0인 데이터가 많이 발생할 때, 압축율이 증가할 수 있다. 본 발명의 일 실시예에 따르면, 데이터 압축 장치는 신경망의 레이어별로 스킵코드 또는 제로코드 중 적어도 하 나를 적용할 수 있다. 값이 0인 특징값들이 많은 레이어에서는, 제로코드만 이용되거나, 제로코드 및 스킵코드 가 이용될 수 있다. 반면, 값이 0인 특징값들이 적은 레이어에서는, 스킵코드만 이용될 수 있다. 이를 위해, 데 이터 압축 장치는 뉴럴네트워크의 각 레이어에서 처리하고자 하는 연산에 따라 값이 0인 특징값들의 양을 예측할 수 있고, 값이 0인 특징값들의 양에 따라 제로코드를 사용할 것인지 여부를 판단할 수 있다. 본 발명의 다른 실시예에 따르면, 데이터 압축 장치는 데이터 요소들의 값들을 기반으로 데이터 요소들의 분포 를 분석하고, 데이터 요소들의 분포에 기초하여 스킵코드 또는 제로코드 중 적어도 하나를 적용할 수 있다. 값 이 0인 데이터 요소들이 많은 경우, 제로코드만 이용되거나, 제로코드 및 스킵코드가 이용될 수 있다. 반면, 값 이 0인 데이터 요소들이 적은 경우, 스킵코드만 이용될 수 있다. 전술한 바와 같이, 데이터 압축 장치는 부동 소수점 포맷에 따른 데이터 요소들을 압축 데이터 포맷에 따라 인 코딩함으로써, 데이터 요소들의 전체 비트길이를 줄일 수 있다. 나아가, 비트손실이 발생하지 않는다. 데이터 압축 장치는 제1 압축된 데이터 요소 및 제2 압축된 데이터 요소를 외부 메모리에 저장한다(S450). 데이터 압축 장치는 소정의 단위로 데이터 요소들을 인코딩하고, 인코딩된 데이터 요소를 외부 메모리에 저장할 수 있다. 대안으로서, 데이터 압축 장치는 데이터 요소별로 인코딩 후 저장할 수 있다. 본 발명의 일 실시예에 따르면, 데이터 압축 장치는 압축된 데이터 요소의 가수비트들 중 일부를 무시함으로써, 외부 메모리에 저장하기 위해 전송되는 데이터 요소들의 비트 수들을 줄일 수 있다. 자세한 설명은 후술한다. 도 5는 데이터 요소들의 예시를 나타낸 도면이다. 도 5를 참조하면, 14 개의 데이터 요소들이 도시되어 있다. 데이터 요소들은 소정의 단위로 그룹핑되어 하나의 데이터 블록이 될 수 있다. 각 데이터 요소는 1 비트의 부호 필드, 6 비트의 지수 필드, 및 9 비트의 지수 필드 를 포함한다. 도 5에서, 데이터 요소들의 대부분은 비슷한 크기의 값들을 가지며, 일부 데이터 요소들은 제로값을 가지거나 다른 데이터 요소들과 차이가 큰 값을 가진다. 이하에서는, 도 5에 예시된 데이터 요소들을 압축하는 다양한 실시예들에 관해 설명한다. 도 6a 및 도 6b는 본 발명의 일 실시예에 따른 데이터 압축 방법을 나타낸 도면이다. 도 6a를 참조하면, 명령코드들에 따른 지시들이 기록된 테이블이 도시되어 있다. 테이블은 참조 지수값 설정에 관한 명령코드 및 지수범위에 관한 명령코드들을 포함하지만, 압축 스킵에 관한 명령코드 및 제로값에 관한 명 령코드를 포함하지 않는다. 한편, 데이터 압축 장치는 데이터 요소의 지수값이 기 설정된 참조 지수값에 따른 지수범위에 포함되는지 여부 를 판단하는 방법으로서, 데이터 요소의 지수값과 참조 지수값 간 차이값이 기 설정된 범위에 포함되는지 여부 를 판단할 수 있다. 다른 방법으로서, 데이터 압축 장치는 참조 지수값과 인접한 값들을 설정하고, 데이터 요소 의 지수값이 상기 설정된 지수값들에 매치되는지 여부를 판단할 수 있다. 다만, 이하에서는 전자의 방법을 기준 으로 설명한다. 지수범위는 참조 지수값보다 3만큼 큰 값을 상한값으로 가지고, 참조 지수값보다 3만큼 작은 값을 하한값으로 가진다. 도 6b를 참조하면, (0, 11_0000, 0_1111_1111) 비트들을 갖는 제0 데이터 요소가 데이터 압축 장치에 처음으로 입력된다. 미리 설정된 참조 지수값이 존재하지 않으므로, 제0 데이터 요소의 지수값과 참조 지수값 간 차이값 또한 존재하지 않는다. 제0 데이터 요소의 지수값은 데이터 압축 장치에 의해 참조 지수값으로 설정된다. 제0 데이터 요소는 참조 지수 값의 설정을 가리키는 111 비트들과 제0 데이터 요소의 전체 비트들을 포함하도록, 인코딩된다. 제1 인코딩된 데이터 요소의 비트들의 개수는 19개다. 제1 데이터 요소의 지수값은 참조 지수값보다 1만큼 크므로, 참조 지수값에 따른 지수범위에 포함된다. 따라서, 제1 데이터 요소는 참조 지수값보다 1만큼 큰 값을 나타내는 001 비트들, 제1 데이터 요소의 부호비트, 및 제1 데이터 요소의 가수비트들을 포함하도록, 인코딩된다. 제1 인코딩된 데이터 요소의 비트들의 개수는 13개다. 제2 데이터 요소는 제1 데이터 요소와 유사한 과정을 통해 인코딩된다. 제2 인코딩된 데이터 요소의 비트들의 개수는 13개다. 제3 데이터 요소의 지수값은 참조 지수값보다 -48만큼 작으므로, 제3 데이터 요소의 지수값과 참조 지수값 간 차이값이 기 설정된 3의 범위를 초과한다. 이에 따라, 제3 데이터 요소의 지수값은 데이터 압축 장치에 의해 새로운 참조 지수값으로 설정된다. 제3 데이터 요소는 참조 지수값의 설정을 가리키는 111 비트들과 제3 데이터 요소의 전체 비트들을 포함하도록, 인코딩된다. 이후, 제5 데이터 요소의 지수값은 재설정된 참조 지수값보다 43만큼 크므로, 제5 데이터 요소의 지수값과 재설 정된 참조 지수값 간 차이값이 기 설정된 3의 범위를 초과한다. 이에 따라, 제5 데이터 요소의 지수값은 데이터 압축 장치에 의해 새로운 참조 지수값으로 설정된다. 전술한 과정을 통해, 데이터 압축 장치는 각 16 비트들로 인코딩된 데이터 요소들을 압축 데이터 포맷에 따라 13 비트들 또는 19 비트들로 변환한다. 14개의 데이터 요소들을 변환한 결과에 따르면, 데이터 압축 장치는 데 이터 요소들의 비트들의 총 개수를 224개에서 218개로 줄일 수 있다. 다만, 제5 데이터 요소 내지 제10 데이터 요소가 제0 데이터 요소, 제1 데이터 요소, 및 제2 데이터 요소와 비 슷한 크기의 지수값을 가지고 있음에도 불구하고, 제로값인 제3 데이터 요소의 존재로 인해, 두 번의 참조 지수 값 설정이 필요하다. 도 7a 및 도 7b는 본 발명의 일 실시예에 따른 데이터 압축 방법을 나타낸 도면이다. 도 7a를 참조하면, 명령코드들에 따른 지시들이 기록된 테이블이 도시되어 있다. 테이블은 참조 지수값 설정에 관한 명령코드, 지수범위에 관한 명령코드들, 및 압축 스킵에 관한 명령코드를 포함하고, 제로값에 관한 명령코 드를 포함하지 않는다. 압축 스킵에 관한 명령코드는 데이터 요소의 지수값이 참조 지수값에 따른 지수범위를 벗어날 때 데이터 요소의 전체비트들과 함께 인코딩된다. 참조 지수값은 재설정되지 않는다. 한 번 설정된 참조 지수값은 하나 이상의 데 이터 블록 내에서 이용될 수 있다. 압축 스킵에 관한 명령코드는 스킵 코드로 지칭될 수 있다. 한편, 도 7a에서, 지수범위는 참조 지수값보다 2만큼 큰 값을 상한값으로 가지고, 참조 지수값보다 3만큼 작은 값을 하한값으로 가진다. 도 7b를 참조하면, 제0 데이터 요소, 제1 데이터 요소 및 제2 데이터 요소는 도 7a 및 7b에서 설명된 바와 동일 하게 인코딩된다. 제3 데이터 요소의 지수값은 참조 지수값보다 -48만큼 작으므로, 참조 지수값에 따른 지수범위를 초과한다. 여 기서, 제3 데이터 요소의 지수값은 새로운 참조 지수값으로 설정되지 않는다. 제3 데이터 요소는 압축 스킵을 나타내는 110 비트들의 스킵코드와 제3 데이터 요소의 전체 비트들을 포함하도 록, 인코딩된다. 제3 인코딩된 데이터 요소의 비트들의 개수는 19개다."}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "요약하면, 데이터 압축 장치는 참조 지수값에 따른 지수범위를 초과하는 지수값을 가진 데이터 요소가 입력될 때, 참조 지수값을 재설정하는 것이 아니라 데이터 압축을 생략한다. 데이터 블록 내에 비슷한 크기를 가지는 데이터 요소들이 많을수록, 압축률이 증가한다. 14개의 데이터 요소들 을 변환 결과에 따르면, 데이터 압축 장치는 데이터 요소들의 비트들의 개수를 224개에서 212개로 줄일 수 있다. 도 8a 및 도 8b는 본 발명의 일 실시예에 따른 데이터 압축 방법을 나타낸 도면이다. 도 8a를 참조하면, 명령코드들에 따른 지시들이 기록된 테이블이 도시되어 있다. 테이블은 참조 지수값 설정에 관한 명령코드, 지수범위에 관한 명령코드들, 압축 스킵에 관한 명령코드, 및 제로값에 관한 명령코드를 포함한 다. 제로값에 관한 명령코드는 데이터 요소의 전체비트들이 0임을 가리키는 코드이다. 데이터 요소는 제로값에 관한 명령코드에 따라 인코딩된다. 인코딩된 데이터 요소는 명령코드에 따른 비트들로 구성된다. 제로값에 관한 명령 코드는 제로 코드로 지칭될 수 있다. 도 8b를 참조하면, 제0 데이터 요소, 제1 데이터 요소 및 제2 데이터 요소는 도 6a 및 6b에서 설명된 바와 동일 하게 인코딩된다. 한편, 제3 데이터 요소가 지수 범위에 포함되는지 여부를 판단하기 전에 제3 데이터 요소가 제로값인지 여부가 우선적으로 판단될 수 있다. 이에 따르면, 제3 데이터 요소는 제로값이므로, 101 비트들의 제로코드를 포함하도 록 인코딩된다. 제3 인코딩된 데이터 요소의 비트들의 개수는 3개다.14개의 데이터 요소들을 변환 결과에 따르면, 데이터 압축 장치는 데이터 요소들의 비트들의 개수를 224개에서 196개로 줄일 수 있다. 데이터 블록 내에 제로값을 가지는 데이터 요소들이 많을수록, 압축률이 증가한다. 일 예로서, 활성화 함수로서 ReLU 함수가 이용되는 경우, 압축률이 증가할 수 있다. 도 9는 본 발명의 일 실시예에 따른 비트 스트림 생성 방법의 순서도다. 데이터 압축 장치는 부동 소수점 포맷에 따라 인코딩된 데이터 요소들(data elements)을 포함하는 데이터 블록 으로부터 압축된 데이터 요소들을 생성한다. 도 9를 참조하면, 데이터 압축 장치는 압축된 데이터 요소들을 지수범위들 또는 제로값에 따라 그룹핑한다 (S910). 데이터 압축 장치는 비슷한 크기들을 가지며 서로 인접한 데이터 요소들을 하나의 데이터 그룹으로 설정한다. 연속적인 데이터 요소들이 하나의 참조 지수값에 따른 지수범위 내에 포함되는 지수값들을 가지면, 하나의 데이 터 그룹을 형성한다. 제로값을 가지는 압축된 데이터 요소들은 제로 그룹에 포함된다. 이에 따라, 제로 그룹과 적어도 하나의 데이터 그룹이 생성된다. 데이터 압축 장치는 압축된 데이터 요소들의 개수 또는 제로값에 따라 적어도 하나의 데이터 그룹을 병합한다 (S920). 연속적인 두 데이터 그룹들 중 후행 데이터 그룹이 1 개의 압축된 데이터 요소를 포함하고 있을 때, 후행 데이 터 그룹은 선행 데이터 그룹에 병합된다. 후행 데이터 그룹에 포함된 압축된 데이터 요소의 명령코드는 스킵코 드로 변경된다. 연속적인 두 데이터 그룹들 중 후행 데이터 그룹이 제로 그룹일 때, 후행 데이터 그룹은 선행 데이터 그룹에 병 합된다. 데이터 압축 장치는 데이터 그룹들로부터 비트 스트림을 생성한다(S930). 한편, 표 1은 본 발명의 실시예들에 따른 압축률을 나타낸 표이다. 표 1"}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "표 1을 참조하면, 복수의 신경망들 각각에 대해, 데이터 압축 포맷의 실시예들을 적용함으로써, 도출된 압축 결 과가 나타나 있다. 데이터 압축에 관한 실시예들로서, 일반 데이터 압축(typical data compression), 스킵코드가 적용된 데이터 압 축, 스킵코드 및 제로코드가 적용된 데이터 압축이 있다. 일반 데이터 압축은 참조 지수값 설정에 관한 명령코드 및 지수범위에 관한 명령코드들을 이용한 압축을 나타낸 다. 스킵 코드에 따른 데이터 압축은 일반 데이터 압축에 스킵 코드가 적용된 것을 나타낸다. 스킵코드 및 제로 코드가 적용된 데이터 압축은 일반 데이터 압축에 스킵 코드 및 제로코드가 적용된 것을 나타낸다. 한편, 레이어별 혼합 압축(Mixed compression per layer)은 크기가 0인 특징값들의 발생 빈도가 낮은 레이어에 는 스킵코드를 적용하고, 크기가 0인 특징값들의 발생 빈도가 높은 레이어에는 스킵코드 및 제로코드를 적용하 는 방식을 나타낸다.표 1에서 BERT 모델의 경우에는 부호 필드, 지수 필드 및 가수 필드가 각각 1 비트, 6 비트 및 9 비트인 것에 기반한다. Resnet50 모델과 Yolov3 모델의 경우, 부호 필드, 지수 필드 및 가수 필드가 각각 1 비트, 4 비트 및 3 비트인 것에 기반한다. 일반 데이터 압축은 BERT 모델에 대해 약 10% 정도의 압축률을 달성한다. 스킵 코드에 따른 데이터 압축은 모든 신경망들에 대해 일반 데이터 압축에 비해 더 높은 압축률을 달성한다. 다만, Resnet50 모델에 대해서는 평균 데이터 크기가 원래 데이터 크기보다 증가한다. 스킵코드 및 제로코드가 적용된 데이터 압축은 BERT 모델에 대해서는 스킵 코드가 적용된 데이터 압축에 비해 압축률이 약간 작지만, 나머지 모델에서는 훨씬 높은 압축률을 달성한다. 이는, BERT 모델에는 활성화 함수로서 소프트맥스 함수가 이용되기 때문에, 크기가 0인 특징값들의 발생 빈도가 낮은 반면, Resnet50 모델 및 YOLOv3 모델에서는 ReLU 함수가 이용되기 때문에 크기가 0인 특징값들의 발생 빈도가 높기 때문이다. 다시 말하면, 신 경망의 각 레이어에서 크기가 0인 특징값들의 발생 빈도가 높을 때, 스킵코드 및 제로코드가 적용된 데이터 압 축의 압축률이 높다. 반면, 신경망의 각 레이어에서 크기가 0인 특징값들의 발생 빈도가 낮을 때, 스킵코드가 적용된 데이터 압축의 압축률이 높다. 제로코드에 해당하는 비트들을 지수범위를 나타내는 코드들로 사용할 수 있기 때문이다. 이하에서는, 두 가지 압축 방법 중 소프트맥스 함수에 입력될 데이터 요소들의 가수비트들을 압축하는 방법을 설명하기 전에, 소프트맥스 함수의 연산 과정 및 기술적 문제점에 대해 설명한다. AI 가속기는 신경망 내 소프트맥스 함수를 계산하기 위해, 수학식 1을 이용한다. 수학식 1"}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "수학식 1에서, X는 데이터 요소들의 집합을 나타내고, Xmax는 데이터 요소들 중 가장 큰 값을 가지는 참조 데이 터 요소를 나타낸다. X는 데이터 요소들을 포함하는 벡터로 지칭될 수 있다. 데이터 블록 X 내 데이터 요소는 Xi로 표현된다. X-Xmax는 소프트맥스 함수의 제1 중간값으로 지칭되고, 는 소프트맥스 함수의 제2 중간값으로 지칭된다. 지수함수의 입력값으로서, 데이터 요소 Xi 대신 Xi-Xmax를 이용하는 것은 데이터 요소 Xi에 대한 지수함수값이 AI 가속기의 데이터 표현 범위를 넘어 포화(saturation)되는 것을 방지하기 위한 것이다. 한편, AI 가속기는 소프트맥스 함수에 입력되는 데이터 요소들을 내부 메모리에 한번에 저장하기 어렵기 때문에, 외부 메모리에 저장된 데이터 요소들 중 일부를 로드하고, 일부 데이터 요소들에 대한 소프트맥스 중간 값들(intermediate values)을 연산하고, 일부 데이터 요소들에 대한 소프트맥스 중간값들을 외부 메모리에 저장 하고, 모든 데이터 요소들에 대한 소프트맥스 중간값들을 정규화함으로써 소프트맥스 함수값들을 획득한다. 구체적으로, 데이터 요소들의 집합 X는 외부 메모리에 저장된다. 데이터 요소들이 데이터 압축 포맷에 따라 압 축된 경우, 압축된 데이터 요소들이 외부 메모리에 저장된다. 데이터 요소들은 소프트맥스 함수의 입력값들로서 저장된다. 저장 전, AI 가속기는 데이터 요소들 중 가장 큰 값을 가지는 참조 데이터 요소를 식별할 수 있다. 이후, AI 가속기는 데이터 요소 Xi를 내부 메모리에 로드하고, 데이터 요소와 참조 데이터 요소 간 차이값에 대 한 자연지수 함수값 을 소프트맥스 함수의 제2 중간값으로서 계산하고, 이를 외부 메모리에 저장 한다. 저장 전, AI 가속기는 중간값을 누적함으로써, 모든 데이터 요소들과 참조 데이터 요소 간 차이값에 대한 자연지수 함수값들의 총합을 얻을 수 있다. 모든 데이터 요소들에 대한 제2 중간값들 및 제2 중간값들의 총합이 계산되면, AI 가속기는 외부 메모리에 저장 된 제2 중간값들 중 일부를 로드하고, 이를 제2 중간값들의 총합으로 나눔으로써, 데이터 요소 Xi에 대한 소프트 맥스 함수값을 얻는다. 즉, AI 가속기는 소프트맥스 함수의 제2 중간값들을 정규화함으로써, 소프트맥스 함수의출력값들을 획득할 수 있다. AI 가속기는 데이터 요소들에 대한 소프트맥스 함수값들을 외부 메모리에 저장한다. 여기서, AI 가속기가 데이터 요소들 X와, 데이터 요소들과 참조 데이터 요소 간 차이값에 대한 자연지수 함수값 들 , 즉 제2 중간값들을 외부 메모리에 저장하고, 외부 메모리로부터 읽어오는 과정에서, 데이터 전송량에 따른 많은 전력과 시간이 소요된다. 이하에서는, 두 가지 압축 방법 중 소프트맥스 함수에 입력될 데이터 요소들의 가수비트들을 압축하는 방법을 설명한다. 본 발명의 일 실시예에 따르면, AI 가속기에 포함된 데이터 압축 장치는 소프트맥스 함수의 입력값들인 데이터 요소들의 비트들, 특히 데이터 요소들의 가수비트들 중 적어도 하나의 하위 가수비트를 제거함으로써, AI 가속 기와 외부 메모리 간 데이터 전송량을 줄일 수 있다. 구체적으로, 데이터 요소와 참조 데이터 요소 간 차이값을 가리키는 제1 중간값에 대한 영향, 또는 데이터 요소 와 참조 데이터 요소 간 차이값에 대한 자연지수 함수값을 가리키는 제2 중간값에 대한 영향이 적은 범위 안에 서, 데이터 압축 장치는 소프트맥스 함수의 입력값들인 데이터 요소들 X의 가수비트들 중 일부를 생략한다. 제1 중간값에 대한 영향을 고려한 데이터 요소의 압축 또는 제2 중간값에 대한 영향을 고려한 데이터 요소의 압 축은 선택적으로 적용될 수 있다. 이하에서는, 제1 중간값에 대한 영향을 고려한 데이터 요소의 압축에 관해 설명된다. 도 10은 본 발명의 일 실시예에 따른 소프트맥스 함수의 입력값들의 압축을 설명하기 위한 도면이다. 도 10을 참조하면, 소프트맥스 함수 연산 시, 데이터 요소 Xi의 하위 가수비트들 중 데이터 요소 Xi와 참조 데이 터 요소 Xmax 간 차이값에 영향을 주는 하위 가수비트들이 식별된다. 데이터 요소들 중 가장 큰 값을 가지는 참조 데이터 요소 Xmax와 일 데이터 요소 Xi가 2진수 형태의 블록으로 도 시되어 있다. 가수비트들에 선행하는 1 값은 정규값에 따른 수를 나타낸다. 부호비트는 도시되어 있지 않다. 일 예로서, 참조 데이터 요소 Xmax는 선행하는 1 비트와 가수비트들 M1이 결합된 것이다. 먼저, 소프트맥스 함수에 있어서, AI 가속기는 참조 데이터 요소와 데이터 요소 간 차이값 Xmax-Xi를 계산한다. 참조 데이터 요소와 데이터 요소 간 차이값 Xmax-Xi는 소프트맥스 함수의 제1 중간값으로 지칭된다. 이를 위해, 데이터 요소는 참조 데이터 요소를 기준으로 오른쪽으로 비트 시프트(bit shift)된다. 데이터 요소는 참조 데이 터 요소의 지수값에서 데이터 요소의 지수값을 뺀 값만큼 오른쪽으로 비트 시프트된다. 비트 정렬이 완료되면, 참조 데이터 요소와 데이터 요소 간 뺄셈이 수행된다. 참조 데이터 요소의 지수값과 데이터 요소의 지수값 간 차이가 1보다 클 때, 참조 데이터 요소와 데이터 요소 간 뺄셈 결과는 세 가지의 경우로 분류될 수 있다. a)의 경우, 제1 중간값 Xmax-Xi의 최상위비트가 참조 데이터 요소 Xmax의 최상위비트와 같은 위치에서 1로 유지된 다. 제1 중간값 Xmax-Xi의 가수비트들 M3는 참조 데이터 요소 Xmax의 가수비트들 M1과 동일한 비트범위를 갖는다. 한편, 데이터 요소 Xi의 가수비트들 M2 중 참조 데이터 요소 Xmax의 최하위비트보다 아래에 위치한 하위 가수비트 들은 제1 중간값 Xmax-Xi의 연산에 이용되지 않는다. 즉, 데이터 요소의 가수비트들 중 참조 데이터 요소의 지수 값 Emax와 데이터 요소의 지수값 Ei 간 차이에 대응되는 하위 가수비트들은 이용되지 않는다. 그렇지 않으면, 하 위 가수비트들은 반올림되어 제1 중간값 Xmax-Xi의 가수비트들에 더해질 수 있다. b)의 경우, 제1 중간값 Xmax-Xi의 최상위비트가 참조 데이터 요소 Xmax의 최상위비트보다 한 비트 아래의 위치에서 1 값을 가진다. 데이터 요소 Xi의 가수비트들 M2 중 참조 데이터 요소 Xmax의 최하위비트보다 한 비트 낮은 위치 에 있는 하위 가수비트들은 제1 중간값 Xmax-Xi에 영향을 준다. 반면, 데이터 요소 Xi의 가수비트들 M2 중 최하위 비트부터 참조 데이터 요소 Xmax의 최하위비트보다 두 비트 낮은 위치까지의 가수비트들은 제1 중간값 Xmax-Xi에 영향을 주지 않는다.c)의 경우, 참조 데이터 요소와 데이터 요소의 부호 차이로 인해, 제1 중간값 Xmax-Xi의 최상위비트가 참조 데이 터 요소 Xmax의 최상위비트보다 한 비트 높은 위치에서 1 값을 가진다. 즉, 캐리 아웃(carry out)이 발생한다. 데이터 요소 Xi의 가수비트들 M2 중 최하위비트부터 참조 데이터 요소 Xmax의 최하위비트보다 한 비트 높은 위치 의 가수비트들까지의 가수비트들은 제1 중간값 Xmax-Xi에 영향을 주지 않는다. 이러한 상황을 고려하여, 참조 데이터 요소의 지수값과 데이터 요소의 지수값 간 차이가 1보다 클 때, 데이터 압축 장치는 데이터 요소에 포함된 가수비트들 중 적어도 하나의 하위 가수비트를 무시함으로써 생성된 압축된 데이터 요소 Xi'를, 소프트맥스 함수의 입력값으로서 저장한다. 구체적으로, 데이터 압축 장치는 데이터 요소들 중 가장 큰 값을 나타내는 참조 데이터 요소를 식별하고, 데이 터 요소의 지수값과 참조 데이터 요소의 지수값 간 차이값을 판단한다. 데이터 압축 장치는 데이터 요소의 지수 값과 참조 데이터 요소의 지수값 간 차이값에 기초하여, 하나의 압축된 데이터 요소에 포함된 가수비트들 중 무 시될 적어도 하나의 하위 가수비트의 개수를 결정한다. 데이터 압축 장치는 결정된 적어도 하나의 하위 가수비 트를 무시함으로써 생성된 2차 압축된 데이터 요소를, 소프트맥스 함수의 입력값으로서 저장한다. 여기서, 데이터 압축 장치는 데이터 요소의 부호값 Si와 참조 데이터 요소의 부호값 Smax간 비교에 따라 무시될 적어도 하나의 하위 가수비트의 개수가 달라질 수 있다. 데이터 요소의 부호값이 참조 데이터 요소의 부호값과 동일한 경우, 데이터 압축 장치는 데이터 요소에 포함된 가수비트들 중 제1 하위 가수비트들을 무시한다. 여기서, 제1 하위 가수비트들은 가수비트들 중 참조 데이터 요 소의 지수값과 데이터 요소의 지수값 간 차이값에 1을 뺀 값에 대응되는 하위 가수 비트들을 나타낸다. 즉, 압 축된 데이터 요소 Xi'는 데이터 요소 Xi의 가수비트들로부터 (Emax-Ei) 비트길이의 하위비트들이 제외된 것이다. 데이터 요소의 부호값이 참조 데이터 요소의 부호값과 동일하지 않은 경우, 데이터 압축 장치는 데이터 요소에 포함된 가수비트들 중 제2 하위 가수비트들을 무시한다. 제2 하위 가수비트들은 가수비트들 중 데이터 요소의 지수값과 참조 데이터 요소의 지수값 간 차이값에 대응되는 하위 가수비트들을 나타낸다. 즉, 압축된 데이터 요 소 Xi'는 데이터 요소 Xi의 가수비트들로부터 (Emax-Ei-1) 비트길이의 하위비트들이 제외된 것이다. 그렇지 않으면, 데이터 압축 장치는 데이터 요소의 부호값 Si와 참조 데이터 요소의 부호값 Smax과 상관없이, 압 축된 데이터 요소에 포함된 가수비트들 중 데이터 요소의 지수값과 참조 데이터 요소의 지수값 간 차이값보다 적은 개수를 갖는 제3 하위 가수비트들을 무시할 수 있다. 예를 들면, 데이터 압축 장치는 압축된 데이터 요소 에 포함된 가수비트들 중 상기 차이값에 2를 뺀 값에 대응되는 개수만큼 하위 가수 비트들을 무시할 수 있다. 무시될 하위 가수비트들의 개수가 적으면, 압축 성능은 저하된다. 반면, 무시될 하위 가수비트들의 개수가 많으 면, 압축 성능이 증가한다. 이와 같이 데이터 요소의 가수비트들 중 일부를 버리더라도, 데이터 요소와 참조 데이터 요소 간 차이값 Xi- Xmax에 미치는 영향이 없다. 하위 가수비트들에 반올림을 적용하더라도 제1 중간값 Xi-Xmax에 미치는 영향이 미미 하다. 즉, 데이터 요소와 참조 데이터 요소 간 차이값에 대한 자연지수 함수값 과, 압축된 데이터 요소와 참조 데이터 요소 간 차이값에 대한 자연지수 함수값 은 동일하거나 유사하다. 소프트 맥스 함수의 결과값에 대한 영향이 없거나 미미하다. 한편, 데이터 압축으로 인해, AI 가속기와 외부 메모리 사이 데이터 전송에 따른 전력 소모 및 시간 소요가 감 소한다. 이하에서는, 제2 중간값에 대한 영향을 고려한 데이터 요소의 압축에 관해 설명된다. AI 가속기는 데이터 요소와 참조 데이터 요소 간 차이값 Xi-Xmax를 계산한다. 그리고 AI 가속기는 차이값 Xi- Xmax에 대한 자연지수 함수값 을 계산한다. 차이값 Xi-Xmax에 대한 자연지수 함수값 은 소프트맥스 함수의 제2 중간값으로 지칭된다. AI 가속기는 제2 중간값을 외부 메모리에 저장하고, 모든 데이 터 요소들에 대한 제2 중간값들이 계산된 때 제2 중간값들을 로드하고, 제2 중간값들을 정규화함으로써 데이터요소들에 대한 소프트맥스 함수값을 계산한다. 본 발명의 일 실시예에 따르면, 데이터 압축 장치는 데이터 요소에 포함된 가수비트들 중 기 정의된 테이블에 따른 하위 가수비트들을 무시함으로써, 생성된 압축된 데이터 요소 Xi'를, 소프트맥스 함수의 입력값으로서 저장 한다. 기 정의된 테이블은 데이터 요소의 가수비트들 중 저장될 상위 가수비트들의 개수, 데이터 요소의 지수값 및 데이터 요소 압축에 따른 오류율이 기록된 테이블이다. 데이터 압축 장치는 데이터 요소의 지수값이 주어질 때, 특정 오류율을 만족하는 상위 가수비트들의 개수를 식별하고, 데이터 요소의 가수비트들 중 상위 가수비트 들을 제외한 하위 가수비트들을 버린다. 구체적으로, 하나의 데이터 요소는 수학식 2와 같이 상위 가수비트들을 포함하는 상위파트 및 하위 가수비트들 을 포함하는 하위파트로 표현될 수 있다. 수학식 2"}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "수학식 2에서, xi는 데이터 요소, xiH는 데이터 요소의 상위파트, xiL은 데이터 요소의 하위파트를 나타낸다. S 는 데이터 요소의 부호값, E는 데이터 요소의 지수값, MH는 이진수 형태의 상위 가수비트들, ML는 이진수 형 태의 하위 가수비트들을 나타낸다. T는 데이터 요소의 상위 가수비트들의 길이를 나타낸다. 데이터 요소의 가수 비트길이가 m일 때, 데이터 요소의 하위 가수비트들의 길이는 m-T이다. 이하에서, 데이터 요소의 가수비트들 중 하위 가수비트들 ML이 제외될 때, 소프트맥스 함수의 제2 중간값 e(xi- xmax)이 얼마나 변하는지 설명한다. 데이터 요소 xi에 대한 소프트맥스 함수의 제2 중간값 e(xi-xmax)은 수학식 3처럼 표현될 수 있다. 수학식 3"}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "수학식 3에서, 데이터 요소의 하위 가수비트들의 절단(truncation)에 따른 오류율은 이다. 오류율은 수학식 4와 같이 표현될 수 있다. 수학식 4"}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "제2 중간값 e(xi-xmax)은 항상 0 이하의 값을 가지므로, 수학식 4에서 데이터 요소의 하위파트 xiL의 부호값 S는 1 이다. 나아가, 데이터 요소의 하위 가수값 0.ML은 0.5 내지 1 사이 값을 가진다. 이를 고려하면, 오류율의 범위는 수학식 5와 같이 표현될 수 있다. 수학식 5"}
{"patent_id": "10-2022-0152079", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "오류율은 의 최댓값은 이다. 데이터 요소의 지수값 E, 데이터 요소의 가수비트들 중 저장대상이 되는 상위 가수비트들의 길이 T, 및 데이터 압축에 따른 제2 중간값의 오류율 로부터 다양한 테이블이 정의될 수 있다. 표 2는 상위 가수비트들의 길이가 7일 때, 데이터 요소의 지수값에 따른 오류율을 예시적으로 계산한 테이블이 다. 표 3는 상위 가수비트들의 길이 및 오류율에 따른 데이터 요소의 지수값을 예시적으로 정의한 테이블이다. 표 4는 상위 데이터 요소의 지수값 및 오류율에 따른 상위 가수비트들의 길이를 예시적으로 정의한 테이블이다. 표 2 E T= 7 2(E-T)exp(2(E-T)) abs(1- exp(2(E-T))) 0 7.813E-03 1.007843097206E+00 7.843E-03 -1 3.906E-03 1.003913889338E+00 3.914E-03 -2 1.953E-03 1.001955033591E+00 1.955E-03 -3 9.766E-04 1.000977039492E+00 9.770E-04 -4 4.883E-04 1.000488400479E+00 4.884E-04 -5 2.441E-04 1.000244170430E+00 2.442E-04 -6 1.221E-04 1.000122077763E+00 1.221E-04 -7 6.104E-05 1.000061037019E+00 6.104E-05 -8 3.052E-05 1.000030518044E+00 3.052E-05 -9 1.526E-05 1.000015258905E+00 1.526E-05 -10 7.629E-06 1.000007629424E+00 7.629E-06 -11 3.815E-06 1.000003814705E+00 3.815E-06 -12 1.907E-06 1.000001907350E+00 1.907E-06 -13 9.537E-07 1.000000953675E+00 9.537E-07 -14 4.768E-07 1.000000476837E+00 4.768E-07 -15 2.384E-07 1.000000238419E+00 2.384E-07 -16 1.192E-07 1.000000119209E+00 1.192E-07 -17 5.960E-08 1.000000059605E+00 5.960E-08 -18 2.980E-08 1.000000029802E+00 2.980E-08 -19 1.490E-08 1.000000014901E+00 1.490E-08 -20 7.451E-09 1.000000007451E+00 7.451E-09 -21 3.725E-09 1.000000003725E+00 3.725E-09 -22 1.863E-09 1.000000001863E+00 1.863E-09 -23 9.313E-10 1.000000000931E+00 9.313E-10 -24 4.657E-10 1.000000000466E+00 4.657E-10 -25 2.328E-10 1.000000000233E+00 2.328E-10 -26 1.164E-10 1.000000000116E+00 1.164E-10 -27 5.821E-11 1.000000000058E+00 5.821E-11 -28 2.910E-11 1.000000000029E+00 2.910E-11 -29 1.455E-11 1.000000000015E+00 1.455E-11 -30 7.276E-12 1.000000000007E+00 7.276E-12 -31 3.638E-12 1.000000000004E+00 3.638E-12표 3 T Error ratio [%] 1 0.1 0.01 0.001 8 0 -2 -6 -9 7 0 -3 -7 -10 6 -1 -4 -8 -11 5 -2 -5 -9 -12 4 -3 -6 -10 -13 3 -4 -7 -11 -14 2 -5 -8 -12 -15 1 -6 -9 -13 -16 표 4 E Error ratio [%] 1 0.1 0.01 0.001 0 7 10 10 10 -1 6 10 10 10 -2 5 8 10 10 -3 4 7 10 10 -4 3 6 10 10 -5 2 5 10 10 -6 1 4 8 10 -7 - 3 7 10 -8 - 2 6 10 -9 - 1 5 8 -10 - - 4 7 -11 - - 3 6 -12 - - 2 5 -13 - - 1 4 -14 - - - 3 -15 - - - 2 -16 - - - 1 표 4를 참조하면, 데이터 압축 장치는 특정 오류율을 미리 설정하고, 입력된 데이터 요소의 지수값 E를 식별하 고, 특정 오류율 및 지수값 E에 따른 T 값을 식별할 수 있다. 데이터 압축 장치는 데이터 요소의 가수비트들 중 T 개의 상위 가수비트들만 추출하여 외부 메모리에 저장한다. 데이터 압축 장치는 데이터 압축을 통해, AI 가속 기와 외부 메모리 사이 데이터 전송에 따른 전력 소모 및 시간 소요를 줄일 수 있다. 기 정의된 테이블을 이용하는 데이터 압축 장치의 동작은 아래와 같다. 데이터 압축 장치는 기 정의된 테이블을 참조하여, 데이터 요소의 지수값 및 기 설정된 오류율에 따른 가수비트 길이를 식별한다. 수학식 4를 참조하면, 데이터 요소의 지수값은 E, 가수비트길이는 T로 지칭될 수 있다. 여기서, 데이터 요소는 부동 소수점 포맷에 따라 인코딩된 데이터일 수도 있고, 데이터 압축 포맷에 따라 인코 딩된 데이터 요소일 수도 있다. 데이터 압축 장치는 데이터 요소의 가수비트들 중 가수비트길이에 대응되는 상위 가수비트들을, 소프트맥스 함 수의 입력값의 가수비트들로서, 외부 메모리에 저장한다. 압축된 데이터 요소는 부호비트, 가수비트들, 및 상위 가수비트들을 포함한다. 데이터 압축 장치는 오류율에 따라 데이터 요소의 상위 가수비트들의 길이를 고려하여, AI 가속기와 외부 메모 리 간 데이터 전송량과 오류율을 트레이드-오프(trade-off)할 수 있다.다만, 소프트맥스 함수의 중간값들의 압축에 의하면, 일부 데이터 손실이 발생할 수 있다. 본 명세서에 설명되는 시스템들 및 기법들의 다양한 구현예들은, 디지털 전자 회로, 집적회로, FPGA(field programmable gate array), ASIC(application specific integrated circuit), 컴퓨터 하드웨어, 펌웨어, 소프 트웨어, 및/또는 이들의 조합으로 실현될 수 있다. 이러한 다양한 구현예들은 프로그래밍가능 시스템 상에서 실 행 가능한 하나 이상의 컴퓨터 프로그램들로 구현되는 것을 포함할 수 있다. 프로그래밍가능 시스템은, 저장 시 스템, 적어도 하나의 입력 디바이스, 그리고 적어도 하나의 출력 디바이스로부터 데이터 및 명령들을 수신하고 이들에게 데이터 및 명령들을 전송하도록 결합되는 적어도 하나의 프로그래밍가능 프로세서(이것은 특수 목적 프로세서일 수 있거나 혹은 범용 프로세서일 수 있음)를 포함한다. 컴퓨터 프로그램들(이것은 또한 프로그램들, 소프트웨어, 소프트웨어 애플리케이션들 혹은 코드로서 알려져 있음)은 프로그래밍가능 프로세서에 대한 명령어 들을 포함하며 \"컴퓨터가 읽을 수 있는 기록매체\"에 저장된다. 컴퓨터가 읽을 수 있는 기록매체는, 컴퓨터 시스템에 의하여 읽혀질 수 있는 데이터가 저장되는 모든 종류의 기 록장치를 포함한다. 이러한 컴퓨터가 읽을 수 있는 기록매체는 ROM, CD-ROM, 자기 테이프, 플로피디스크, 메모 리 카드, 하드 디스크, 광자기 디스크, 스토리지 디바이스 등의 비휘발성(non-volatile) 또는 비일시적인(non- transitory) 매체일 수 있으며, 또한 데이터 전송 매체(data transmission medium)와 같은 일시적인 (transitory) 매체를 더 포함할 수도 있다. 또한, 컴퓨터가 읽을 수 있는 기록매체는 네트워크로 연결된 컴퓨터 시스템에 분산되어, 분산방식으로 컴퓨터가 읽을 수 있는 코드가 저장되고 실행될 수도 있다. 본 명세서의 흐름도/타이밍도에서는 각 과정들을 순차적으로 실행하는 것으로 기재하고 있으나, 이는 본 개시의 일 실시예의 기술 사상을 예시적으로 설명한 것에 불과한 것이다. 다시 말해, 본 개시의 일 실시예가 속하는 기 술 분야에서 통상의 지식을 가진 자라면 본 개시의 일 실시예의 본질적인 특성에서 벗어나지 않는 범위에서 흐 름도/타이밍도에 기재된 순서를 변경하여 실행하거나 각 과정들 중 하나 이상의 과정을 병렬적으로 실행하는 것으로 다양하게 수정 및 변형하여 적용 가능할 것이므로, 흐름도/타이밍도는 시계열적인 순서로 한정되는 것은 아니다. 이상의 설명은 본 실시예의 기술 사상을 예시적으로 설명한 것에 불과한 것으로서, 본 실시예가 속하는 기술 분 야에서 통상의 지식을 가진 자라면 본 실시예의 본질적인 특성에서 벗어나지 않는 범위에서 다양한 수정 및 변 형이 가능할 것이다. 따라서, 본 실시예들은 본 실시예의 기술 사상을 한정하기 위한 것이 아니라 설명하기 위 한 것이고, 이러한 실시예에 의하여 본 실시예의 기술 사상의 범위가 한정되는 것은 아니다. 본 실시예의 보호 범위는 아래의 청구범위에 의하여 해석되어야 하며, 그와 동등한 범위 내에 있는 모든 기술 사상은 본 실시예의 권리범위에 포함되는 것으로 해석되어야 할 것이다. (후원 연구 또는 개발에 관한 진술) 본 발명은 연구과제(과제고유번호: 1711152619, 세부과제번호: 2020-0-01305-003, 과제관리(전문)기관명: 정보 통신기획평가원, 연구사업명: 차세대지능형반도체기술개발(설계), 연구과제명: 2,000 TFLOPS급 서버 인공지능 딥러닝 프로세서 및 모듈 개발, 기여율: 1/1, 과제수행기관명: 주식회사 사피온코리아, 연구기간: 2022-01- 01~2022-12-31)의 결과물이다.도면 도면1 도면2 도면3a 도면3b 도면4 도면5 도면6a 도면6b 도면7a 도면7b 도면8a 도면8b 도면9 도면10"}
{"patent_id": "10-2022-0152079", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 AI 가속 시스템의 구성도이다. 도 2는 반정밀도 부동 소수점 포맷을 설명하기 위해 예시한 도면이다. 도 3a 및 도 3b는 본 발명의 일 실시예에 따른 압축 데이터 포맷을 설명하기 위해 예시한 도면이다. 도 4는 본 발명의 일 실시예에 따른 데이터 압축 방법의 순서도이다. 도 5는 데이터 요소들의 예시를 나타낸 도면이다. 도 6a 및 도 6b는 본 발명의 일 실시예에 따른 데이터 압축 방법을 나타낸 도면이다. 도 7a 및 도 7b는 본 발명의 일 실시예에 따른 데이터 압축 방법을 나타낸 도면이다. 도 8a 및 도 8b는 본 발명의 일 실시예에 따른 데이터 압축 방법을 나타낸 도면이다. 도 9는 본 발명의 일 실시예에 따른 비트 스트림 생성 방법의 순서도다. 도 10은 본 발명의 일 실시예에 따른 소프트맥스 함수의 입력값들의 압축을 설명하기 위한 도면이다."}
