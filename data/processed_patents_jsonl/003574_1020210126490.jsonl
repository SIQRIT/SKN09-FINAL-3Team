{"patent_id": "10-2021-0126490", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0043512", "출원번호": "10-2021-0126490", "발명의 명칭": "데이터 처리 시스템 및 그 동작 방법과, 이를 이용한 컴퓨팅 시스템", "출원인": "에스케이하이닉스 주식회사", "발명자": "진영재"}}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "호스트 장치로부터 입력 특징 맵 및 가중치 필터를 포함하는 신경망 연산 처리 요청을 수신하는 컨트롤러; 및통합 그룹별로 할당된 풀링값 저장부를 포함하고, 상기 입력 특징 맵 및 상기 가중치 필터를 컨볼루션연산하여, 상기 컨볼루션 연산 결과인 복수의 풀링 원소를 순차적으로 출력하며,상기 통합 그룹별로 상기 풀링 원소가 순차적으로 출력될 때마다, 상기 풀링값 저장부로부터 리드한 데이터와상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 단일 값으로 통합하여, 상기 통합한 데이터로 상기풀링값 저장부를 갱신하도록 구성되는 메모리 내 연산 장치;를 포함하도록 구성되는 데이터 처리 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 풀링 원소는 상기 풀링값 저장부에 저장되지 않는 데이터 처리 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 입력 특징 맵은 복수의 분할맵을 포함하고,상기 메모리 내 연산 장치는, 상기 복수의 분할맵 각각과 상기 가중치 필터를 순차적으로 컨볼루션 연산하여 상기 복수의 풀링 원소를 순차적으로 출력하는 연산 메모리;상기 풀링값 저장부를 포함하는 글로벌 버퍼;상기 연산 메모리로부터 출력되는 상기 복수의 통합 단위별 상기 풀링 원소를 풀링부에 순차적으로 제공하고,상기 풀링부의 풀링 연산 결과에 따라 상기 풀링값 저장부를 갱신하는 풀링 제어부; 및상기 통합 그룹별 풀링 원소가 제공될 때마다 상기 풀링 연산을 수행하는 상기 풀링부;를 포함하는 데이터 처리 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서,메모리 내 연산 장치는,행렬로 구성되는 상기 입력 특징 맵으로부터 생성된 복수의 분할맵 각각과 행렬로 구성되는 가중치 필터 간의컨볼루션 연산을 순차적으로 수행하여 상기 복수의 풀링 원소를 순차적으로 출력하는 데이터 처리 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 메모리 내 연산장치는, 상기 컨볼루션 연산을 수행하는 연산 복수의 연산 처리부를 포함하고,상기 복수의 연산 처리부 각각은 멤리스터 소자로 구성되는 복수의 서브 어레이를 포함하는 데이터 처리시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,공개특허 10-2023-0043512-3-상기 메모리 내 연산 장치는, 상기 풀링값 저장부로부터 리드한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 제공받아 최대값을 선택하거나 평균값을 산출하여 상기 풀링값 저장부를 갱신하도록 구성되는 데이터 처리 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "호스트 장치로부터 입력 특징 맵 및 가중치 필터를 포함하는 신경망 연산 처리 요청을 수신하여, 상기 입력 특징 맵을 구성하는 복수의 분할맵과 상기 가중치 필터를 순차적으로 컨볼루션 연산하여 상기 컨볼루션 연산 결과인 복수의 풀링 원소를 순차적으로 출력하는 연산 메모리;복수의 통합 그룹별로 할당된 풀링값 저장부를 포함하는 글로벌 버퍼;상기 복수의 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소와 상기 풀링값 저장부에 저장된 데이터를 리드하여 풀링부로 제공하는 풀링 제어부; 및상기 복수의 통합 그룹별로 상기 풀링 원소가 순차적으로 출력될 때마다, 상기 글로벌 버퍼에 저장하지 않은 상기 풀링 원소와 상기 풀링값 저장부로부터 리드한 데이터를 단일 값으로 통합하는 상기 풀링부;를 포함하도록 구성되는 데이터 처리 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7 항에 있어서,상기 풀링 제어부는,상기 복수의 통합 그룹별로 상기 풀링값 저장부를 할당하는 버퍼 할당부;상기 풀링 원소를 상기 복수의 통합 그룹 별로 구분하는 풀링맵 구성부; 및상기 연산 메모리로부터 순차적으로 출력되는 상기 풀링 원소를 상기 풀링부로 제공하고, 상기 풀링부에서 출력되는 통합 그룹별 풀링 결과에 따라 상기 풀링값 저장부를 갱신하는 업데이트부;를 포함하도록 구성되는 데이터 처리 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 7 항에 있어서,상기 연산 메모리는, 상기 컨볼루션 연산을 수행하는 연산 복수의 연산 처리부를 포함하고,상기 복수의 연산 처리부 각각은 멤리스터 소자로 구성되는 복수의 서브 어레이를 포함하는 데이터 처리시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 7 항에 있어서,상기 풀링부는 상기 풀링값 저장부로부터 리드한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링원소를 제공받아 최대값을 선택하거나 평균값을 산출하여 상기 풀링값 저장부를 갱신하도록 구성되는 데이터 처리 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "컨트롤러가 통합 그룹별로 풀링값 저장부를 할당하는 단계;상기 컨트롤러가 호스트 장치로부터 입력 특징 맵 및 가중치 필터를 포함하는 신경망 연산 처리 요청을 수신하는 단계;복수의 연산 처리부를 구비하는 메모리 내 연산 장치가 상기 입력 특징 맵 및 상기 가중치 필터를 컨볼루션 연산하는 단계;상기 메모리 내 연산 장치가 상기 컨볼루션 연산 결과로 복수의 풀링 원소를 순차적으로 출력하는 단계;공개특허 10-2023-0043512-4-상기 메모리 내 연산 장치가 상기 통합 그룹별로 상기 풀링 원소가 순차적으로 출력될 때마다 상기 풀링값 저장부로부터 리드한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 단일 값으로 통합하는 단계; 및상기 메모리 내 연산 장치가 상기 통합한 결과에 따라 상기 풀링값 저장부를 갱신하는 단계;를 포함하도록 구성되는 데이터 처리 시스템의 동작 방법."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서,상기 컨트롤러는 풀링 원소를 풀링값 저장부에 저장하지 않는 데이터 처리 시스템의 동작 방법."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 11 항에 있어서,상기 컨볼루션 연산을 수행하는 단계는,상기 입력 특징 맵을 구성하는 복수의 분할맵과 상기 가중치 필터를 순차적으로 컨볼루션 연산하는 단계를 포함하는 데이터 처리 시스템의 동작 방법."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 13 항에 있어서,상기 입력 특징 맵 및 상기 가중치 필터 각각은 행렬로 구성되는 데이터 처리 시스템의 동작 방법."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 11 항에 있어서,상기 메모리 내 연산장치는, 상기 컨볼루션 연산을 수행하는 연산 복수의 연산 처리부를 포함하고,상기 복수의 연산 처리부 각각은 멤리스터 소자로 구성되는 복수의 서브 어레이를 포함하는 데이터 처리 시스템의 동작 방법."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 11 항에 있어서,상기 통합하는 단계는, 상기 풀링값 저장부로부터 리드한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 제공받아 최대값을 선택하거나 평균값을 산출하는 단계를 포함하는 데이터 처리 시스템의 동작방법."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "호스트 장치; 및상기 호스트 장치가 입력 특징 맵 및 가중치 필터를 포함하는 신경망 연산 처리 요청을 전송함에 따라, 상기 입력 특징 맵과 상기 가중치 필터를 컨볼루션 연산하여 상기 컨볼루션 연산 결과인 복수의 풀링 원소를 순차적으로 출력하고,상기 통합 그룹별로 풀링값 저장부를 할당하며, 상기 통합 그룹별로 상기 풀링 원소가 순차적으로 출력될 때마다 상기 풀링값 저장부로부터 리드한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 단일값으로 통합하여 상기 통합한 데이터로 상기 풀링값 저장부를 갱신하도록 구성되는 데이터 처리 시스템;을 포함하도록 구성되는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 17 항에 있어서,공개특허 10-2023-0043512-5-상기 풀링 원소는 상기 풀링값 저장부에 저장되지 않는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 17 항에 있어서,상기 데이터 처리 시스템은,상기 입력 특징 맵을 구성하는 복수의 분할맵과 상기 가중치 필터를 순차적으로 컨볼루션 연산하여 상기 복수의풀링 원소를 순차적으로 출력하는 연산 메모리;상기 풀링값 저장부를 포함하는 글로벌 버퍼;상기 연산 메모리로부터 출력되는 상기 복수의 통합 단위별 상기 풀링 원소를 풀링부에 순차적으로 제공하고,상기 풀링부의 연산 결과에 따라 상기 풀링값 저장부를 갱신하는 풀링 제어부; 및상기 통합 단위별 풀링 원소가 제공될 때마다 풀링 연산하는 상기 풀링부;를 포함하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 17 항에 있어서,상기 데이터 처리 시스템은,행렬로 구성되는 상기 입력 특징 맵으로부터 생성된 복수의 분할맵 각각과 행렬로 구성되는 가중치 필터 간의컨볼루션 연산을 순차적으로 수행하여 상기 복수의 풀링 원소를 순차적으로 출력하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제 17 항에 있어서,상기 데이터 처리 시스템은, 상기 컨볼루션 연산을 수행하는 연산 복수의 연산 처리부를 포함하고,상기 복수의 연산 처리부 각각은 멤리스터 소자로 구성되는 복수의 서브 어레이를 포함하는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0126490", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제 17 항에 있어서,상기 데이터 처리 시스템은, 상기 풀링값 저장부로부터 리드한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 제공받아 최대값을 선택하거나 평균값을 산출하도록 구성되는 컴퓨팅 시스템."}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예에 의한 데이터 처리 시스템은 호스트 호스트 장치로부터 입력 특징 맵 및 가중치 필터를 포함하는 신 경망 연산 처리 요청을 수신하는 컨트롤러 및 메모리 내 연산 장치를 포함할 수 있다. 메모리 내 연산 장치는 통합 그룹별로 할당된 풀링값 저장부를 포함하고, 입력 특징 맵 및 가중치 필터를 컨볼루션 연산하여, 컨볼루션 연산 결과인 복수의 풀링 원소를 순차적으로 출력하며, 통합 그룹별로 풀링 원소가 순차적으로 출력될 때마다, 풀링값 저장부로부터 리드한 데이터와 통합 그룹별로 순차적으로 출력되는 풀링 원소를 단일 값으로 통합하여, 통합한 데이터로 풀링값 저장부를 갱신하도록 구성될 수 있다."}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 기술은 데이터 처리 기술에 관한 것으로, 보다 구체적으로는 신경망 연산을 위한 데이터 처리 시스템 및 그 동작 방법과, 이를 이용한 컴퓨팅 시스템 에 관한 것이다."}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 어플리케이션 및 빅데이터 분석에 대한 관심과 중요성이 높아지면서, 대용량의 데이터를 효율적으로 처리할 수 있는 컴퓨팅 시스템에 대한 요구가 증가하고 있다. 인공 신경망은 인공지능을 구현하기 위한 하나의 방법이다. 인공 신경망의 목적은 학습을 통해 기계의 문제 해 결 능력, 즉 추론력을 키우는 데 있으나, 출력의 정확도가 높아질수록 연산량, 메모리 접근 횟수, 데이터 저장 공간 및 데이터 이동량이 증가하게 된다. 이는 속도 저하, 전력 소비 등을 유발하여 시스템 성능을 저하시키는 요인이 될 수 있다."}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "발명의 내용"}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 기술의 실시예는 연산에 사용되는 데이터의 저장공간을 최소화할 수 있는 데이터 처리 시스템 및 그 동작 방 법과, 이를 이용한 컴퓨팅 시스템을 제공할 수 있다."}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 기술의 일 실시예에 의한 데이터 처리 시스템은 호스트 장치로부터 입력 특징 맵 및 가중치 필터를 포함하는 신경망 연산 처리 요청을 수신하는 컨트롤러; 및 통합 그룹별로 할당된 풀링값 저장부를 포함하고, 상기 입력 특징 맵 및 상기 가중치 필터를 컨볼루션 연산하여, 상기 컨볼루션 연산 결과인 복수의 풀링 원소를 순차적으로 출력하며, 상기 통합 그룹별로 상기 풀링 원소가 순차적으로 출력될 때마다, 상기 풀링값 저장부로부터 리드한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 단일 값으로 통합하여, 상기 통합한 데이 터로 상기 풀링값 저장부를 갱신하도록 구성되는 메모리 내 연산 장치;를 포함하도록 구성될 수 있다. 본 기술의 일 실시예에 의한 데이터 처리 시스템은 호스트 장치로부터 입력 특징 맵 및 가중치 필터를 포함하는 신경망 연산 처리 요청을 수신하여, 상기 입력 특징 맵을 구성하는 복수의 분할맵과 상기 가중치 필터를 순차적 으로 컨볼루션 연산하여 상기 컨볼루션 연산 결과인 복수의 풀링 원소를 순차적으로 출력하는 연산 메모리; 복 수의 통합 그룹별로 할당된 풀링값 저장부를 포함하는 글로벌 버퍼; 상기 복수의 통합 그룹별로 순차적으로 출 력되는 상기 풀링 원소와 상기 풀링값 저장부에 저장된 데이터를 리드하여 풀링부로 제공하는 풀링 제어부; 및 상기 복수의 통합 그룹별로 상기 풀링 원소가 순차적으로 출력될 때마다, 상기 글로벌 버퍼에 저장하지 않은 상 기 풀링 원소와 상기 풀링값 저장부로부터 리드한 데이터를 단일 값으로 통합하는 상기 풀링부;를 포함하도록 구성될 수 있다. 본 기술의 일 실시예에 의한 데이터 처리 시스템의 동작 방법은 컨트롤러가 통합 그룹별로 풀링값 저장부를 할 당하는 단계; 상기 컨트롤러가 호스트 장치로부터 입력 특징 맵 및 가중치 필터를 포함하는 신경망 연산 처리 요청을 수신하는 단계; 복수의 연산 처리부를 구비하는 메모리 내 연산 장치가 상기 입력 특징 맵 및 상기 가중 치 필터를 컨볼루션 연산하는 단계; 상기 메모리 내 연산 장치가 상기 컨볼루션 연산 결과로 복수의 풀링 원소 를 순차적으로 출력하는 단계; 상기 메모리 내 연산 장치가 상기 통합 그룹별로 상기 풀링 원소가 순차적으로 출력될 때마다 상기 풀링값 저장부로부터 리드한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 단일 값으로 통합하는 단계; 및 상기 메모리 내 연산 장치가 상기 통합한 결과에 따라 상기 풀링값 저장 부를 갱신하는 단계;를 포함하도록 구성될 수 있다. 본 기술의 일 실시예에 의한 컴퓨팅 장치는 호스트 장치; 및 상기 호스트 장치가 입력 특징 맵 및 가중치 필터 를 포함하는 신경망 연산 처리 요청을 전송함에 따라, 상기 입력 특징 맵과 상기 가중치 필터를 컨볼루션 연산 하여 상기 컨볼루션 연산 결과인 복수의 풀링 원소를 순차적으로 출력하고, 상기 통합 그룹별로 풀링값 저장부 를 할당하며, 상기 통합 그룹별로 상기 풀링 원소가 순차적으로 출력될 때마다 상기 풀링값 저장부로부터 리드 한 데이터와 상기 통합 그룹별로 순차적으로 출력되는 상기 풀링 원소를 단일 값으로 통합하여 상기 통합한 데 이터로 상기 풀링값 저장부를 갱신하도록 구성되는 데이터 처리 시스템;을 포함하도록 구성될 수 있다."}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 기술에 의하면 후속되는 연산 과정에서 필요한 데이터만을 선택적으로 저장하여, 데이터 저장 공간을 효율적 으로 활용할 수 있다. 저장되는 데이터의 양이 감소함에 따라 이를 유지 및 관리하는 데 필요한 자원 또한 절 약할 수 있다."}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 기술의 실시예를 보다 구체적으로 설명한다. 도 1은 일 실시예에 의한 컴퓨팅 시스템의 구성도이다. 컴퓨팅 시스템은 호스트 장치 및 호스트 장치가 요청한 어플리케이션의 연산을 처리하는 데이터 처리 시스템을 포함할 수 있다. 호스트 장치는 적어도 메인 프로세서, RAM, 메모리, 입출력(IO) 장치 등의 IP(Intellectual Property) 블록 및, 도시하지 않은 다른 범용적인 구성요소들을 더 포함할 수 있다. 실시예에 있어서, 호스트 장치의 구성요소들은 하나의 반도체 칩으로 집적되어 시스템 온 칩(SoC)으로 구 현될 수 있으나 이에 한정되지 않으며, 복수의 반도체 칩으로 구현될 수도 있다. 메인 프로세서는 컴퓨팅 시스템의 전반적인 동작을 제어할 수 있으며, 예를 들어 중앙처리장치 (Central Processing Unit; CPU)일 수 있다. 메인 프로세서는 하나 또는 복수의 코어를 포함할 수 있다. 메인 프로세서는 RAM 및 메모리에 저장된 프로그램들, 데이터, 및/또는 명령어(instructions)를 처리 또는 실행할 수 있다. 예를 들어, 메인 프로세서는 메모리에 저장된 프로그램들을 실행함으로 써 컴퓨팅 시스템의 기능들을 제어할 수 있다. RAM은 프로그램들, 데이터, 또는 명령들을 일시적으로 저장할 수 있다. 메모리에 저장된 프로그램들 및/또는 데이터는 메인 프로세서의 제어 또는 부팅 코드에 따라 RAM에 일 시적으로 로딩될 수 있다. RAM은 DRAM(Dynamic RAM) 또는 SRAM(Static RAM) 등의 메모리를 이용하여 구현될 수 있다. 메모리는 데이터를 저장하기 위한 저장 장소로서, 예를 들어, OS(Operating System), 각종 프로그램들 및 각종 데이터를 저장할 수 있다. 메모리는 휘발성 메모리(volatile memory) 또는 비휘발성 메모리(non- volatile memory) 중 적어도 하나를 포함할 수 있다. 비휘발성 메모리는 ROM(Read Only Memory), PROM(Programmable ROM), EPROM(Electrically Programmable ROM), EEPROM(Electrically Erasable and Programmable ROM), 플래시 메모리, PRAM(Phase-change RAM), MRAM(Magnetic RAM), RRAM(Resistive RAM), FRAM(Ferroelectric RAM) 등에서 선택될 수 있다. 휘발성 메모리는 DRAM(Dynamic RAM), SRAM(Static RAM), SDRAM(Synchronous DRAM) 등에서 선택될 수 있다. 또한 일 실시 예에 있어서, 메모리는 HDD(Hard Disk Drive), SSD(Solid-State Drive), CF(Compact Flash), SD(Secure Digital), Micro-SD(Micro Secure Digital), Mini-SD(Mini Secure Digital), xD(extreme digital) 또는 메모리 스틱(Memory Stick) 등과 같은 저장 장치로 구현될 수 있다. 입출력 장치는 사용자 입력 또는 외부로부터의 데이터를 수신하고, 컴퓨팅 시스템의 데이터 처리 결과 를 출력할 수 있다. 입출력 장치는 터치 스크린 패널, 키보드, 다양한 종류의 센서 등으로 구현될 수 있 다. 실시예에 있어서, 입출력 장치는 컴퓨팅 시스템 주변의 정보를 수집할 수 있다. 예를 들어 입출 력 장치는 촬상 장치와 이미지 센서를 포함하여 데이터 처리 시스템 외부로부터 이미지 신호를 센싱 또는 수신할 수 있고, 센싱 또는 수신된 이미지 신호를 디지털 데이터로 변환하여 메모리에 저장하거나, 데이터 처리 시스템에 제공할 수 있다. 데이터 처리 시스템은 호스트 장치의 요청에 응답하여, 인공 신경망을 기초로 입력 데이터를 분석하 여 유효한 정보를 추출할 수 있다. 데이터 처리 시스템은 추출된 정보를 기초로 상황을 판단하거나 데이 터 처리 시스템이 탑재되는 전자 장치의 구성들을 제어할 수 있다. 예를 들어, 데이터 처리 시스템 은 드론(drone), 첨단 운전자 보조 시스템(Advanced Drivers Assistance System; ADAS), 스마트 TV, 스마트 폰, 의료 장치, 모바일 장치, 영상 표시 장치, 계측 장치, IoT(Internet of Things) 장치 등에 적용될 수 있으 며, 이외에도 다양한 종류의 컴퓨팅 시스템중 하나에 탑재될 수 있다. 일 실시예에서, 호스트 장치는 신경망 연산을 데이터 처리 시스템에 오프로드할 수 있고, 이를 위한 초기 파라미터, 예를 들어 입력 데이터 및 가중치를 데이터 처리 시스템으로 제공할 수 있다.일 실시예에서, 데이터 처리 시스템은 모바일 장치에 탑재되는 어플리케이션 프로세서일 수 있다. 데이터 처리 시스템은 적어도 신경망 프로세서를 포함할 수 있다. 신경망 프로세서는 입력 데이터를 훈련 또는 학습하여 신경망 모델을 생성하거나, 신경망 모델에 따라 입 력 데이터를 연산하여 정보 신호(information signal)를 생성하거나, 신경망 모델을 재훈련(retrain)할 수 있다. 신경망은 CNN(Convolution Neural Network), R-CNN(Region with Convolution Neural Network), RPN(Region Proposal Network), RNN(Recurrent Neural Network), S-DNN(Stacking-based deep Neural Network), S-SDNN(State-Space Dynamic Neural Network), Deconvolution Network, DBN(Deep Belief Network), RBM(Restricted Boltzmann Machine), Fully Convolutional Network, LSTM(Long Short-Term Memory) Network, Classification Network 등 다양한 종류의 신경망 모델들을 포함할 수 있으나 이에 한정되지 않는다. 도 2는 일 실시예에 의한 인공 신경망의 데이터 처리 개념을 설명하기 위한 도면으로, CNN의 데이터 처리 개념 을 나타낸다. CNN은 컨볼루션 레이어(convolution layer), 풀링 레이어(pooling layer) 및 완전연결 레이어(fully connected layer)로 구성될 수 있다. 컨볼루션 레이어는 입력 특징 맵(Input Feature Map; IFM)에 가중치 필터(커널, W)를 적용하여 출력 특징 맵 (Output Feature Map; OFM)을 생성할 수 있다. 풀링 레이어는 컨볼루션 레이어를 통해 추출한 특징에 공간불변성(Spatial invariance) 더해주는 레이어로, 컨 볼루션 레이어의 출력을 축소하는 역할을 한다. 컨볼루션 레이어와 풀링 레이어는 신경망의 모수를 비약적으로 줄여 주어 전체 모델의 복잡도를 감소시킨다. 아울러, 컨볼루션 레이어와 풀링 레이어를 통한 데이터 처리는 복수회 반복 수행될 수 있다. 완전연결 레이어는 풀링 레이어로부터 출력된 특징 추출 결과에 따라 입력 데이터를 분류하여 출력 데이터를 생 성할 수 있다. 도 3은 컨볼루션 레이어의 연산 개념을 설명하기 위한 도면이다. 입력 특징 맵(IFM)과 가중치 필터(W)는 행렬 형태로 제공될 수 있다. 이하의 설명에서 특별한 언급이 없는 한 입력 특징 맵(IFM)과 가중치 필터(W)는 각각 설정된 차원(행*열) 또는 크기를 갖는 행렬인 것으로 이해하여야 한다. 입력 특징 맵(IFM)에 가중치 필터(W)를 적용하기 위하여, 입력 특징 맵(IFM)은 가중치 필터(W)의 차원에 대응하 는 차원을 갖는 복수의 분할맵(IDIV = IDIV11, IDIV12, IDIV13, IDIV14)으로 구분될 수 있다. 예를 들어 입력 특징 맵(IFM)의 1행-1열 원소를 기준원소(REF)로 하여 가중치 필터(W)의 차원에 대응하는 컨볼루션 윈도우를 일 정한 간격(스트라이드)으로 슬라이딩함에 따라 입력 특징 맵(IFM)이 복수의 분할맵(IDIV11, IDIV12, IDIV13, IDIV14)으로 구분될 수 있다. 또한, 복수의 분할맵(IDIV11, IDIV12, IDIV13, IDIV14) 각각에 순차적으로 가중 치 필터(W)를 적용하여, 즉 가중치 필터(W)의 원소와 분할맵(IDIV11, IDIV12, IDIV13, IDIV14)의 원소별 곱셈 및 합산(multiply and accumulation, MAC) 연산을 수행하여 출력 특징 맵(OFM)이 계산될 수 있다. 도 3에는 입력 특징 맵(IFM)의 크기가 I*I(I=5), 가중치 필터(W)의 크기가 K*K(K=3), 스트라이드가 2인 경우를 도시하였다. 분할맵(IDIV11, IDIV12, IDIV13, IDIV14)의 개수는 (I-K)*(I-K)로 결정된다. 분할맵(IDIV11, IDIV12, IDIV13, IDIV14)의 개수에 대응하는 사이클만큼, 즉 각각의 분할맵(IDIV11, IDIV12, IDIV13, IDIV14) 을 가중치 필터(W)와 컨볼루션 연산하여 O*O(O=I-K) 크기의 출력 특징 맵(OFM)이 얻어진다. 컨볼루션 연산은 기준원소(REF)를 포함하는 제 1 분할맵(IDIV11)에 가중치 필터(W)를 적용하는 첫번째 컨볼루션 사이클을 시작으로, 컨볼루션 윈도우를 행방향 또는 열방향으로 스트라이드만큼 슬라이딩하면서 수행된다. 예 를 들어, 컨볼루션 윈도우가 슬라이딩하여 행방향 마지막 원소(A15)를 포함하는 분할맵(IDIV12)에 대한 컨볼루 션 연산까지 수행되면 윈도우를 열방향으로 슬라이딩한다. 이후 윈도우를 다시 행방향으로 슬라이딩하여 컨볼 루션 연산하는 과정을 반복함에 의해 모든 분할맵(IDIV11, IDIV12, IDIV13, IDIV14)과 가중치 필터(W) 간의 컨 볼루션 연산이 수행되고 출력 특징 맵(OFM)이 획득된다. 도 3을 참조하면, 입력 특징 맵(IFM)의 분할맵(IDIV11, IDIV12, IDIV13, IDIV14) 각각에 대해 가중치 필터(W) 를 적용할 때, 가중치 필터(W)는 매 컨볼루션 연산 사이클에서 반복 사용되고, 분할맵(IDIV11, IDIV12, IDIV13,IDIV14)의 적어도 일부 원소가 반복 사용되는 것을 알 수 있다. 예를 들어, 제 1 컨볼루션 사이클에서 제 1 분할맵(IDIV11)과 가중치 필터(W)간의 컨볼루션 연산을 수행한 후, 제 2 컨볼루션 사이클에서 제 2 분할맵(IDIV12)과 가중치 필터(W)를 컨볼루션 연산할 때 제 1 컨볼루션 사이클 에서 사용한 원소(A13, A23, A33)가 재사용된다. 제 3 컨볼루션 사이클에서 제 3 분할맵(IDIV13)과 가중치 필터(W)를 컨볼루션 연산할 때, 제 1 컨볼루션 사이클 에서 사용한 원소(A31, A32, A33) 및 제 2 컨볼루션 사이클에서 사용한 원소(A33)가 재사용된다. 제 4 컨볼루션 사이클에서 제 4 분할맵(IDIV14)과 가중치 필터(W)를 컨볼루션 연산할 때, 제 2 컨볼루션 사이클 에서 사용한 원소(A33, A34, A35) 및 제 3 컨볼루션 사이클에서 사용한 원소(A33, A43, A53)가 재사용된다. 신경망 프로세서는 복수의 연산 처리부(Processing Element; PE) 및 연산 처리부(PE)와 데이터를 송수신하 는 글로벌 버퍼를 포함할 수 있다. 컨볼루션 연산에 사용되는 데이터 즉, 가중치 필터 및 입력 특징 맵(IFM)은 글로벌 버퍼로부터 연산 처리부(P E)로 제공될 수 있다. 일 실시예에서, 분할맵(IDIV11, IDIV12, IDIV13, IDIV14) 각각의 원소별 컨볼루션 연산 은 독립적인 연산 처리부(PE)에서 처리될 수 있다. 글로벌 버퍼 및 연산 처리부(PE)에 대한 구체적인 설명은 후술할 것이다. 도 4는 풀링 레이어의 연산 개념을 설명하기 위한 도면이다. 풀링 연산은 주어진 입력 데이터(POO_IN) 즉, 컨볼루션 레이어에서 출력된 데이터의 사이즈를 줄이는 동작일 수 있다. 풀링 연산은 컨볼루션 레이어에서 출력된 데이터를 설정된 통합 그룹 단위 즉, 풀링 윈도우 별로 단일 값으로 통합하는 것으로, 맥스 풀링(Max Pooing), 평균 풀링(Average Pool) 방식 등에 의해 수행될 수 있다. 맥스 풀링(Max Pooing)은 풀링 레이어로의 입력 데이터(POOL_IN)를 기 설정된 크기의 풀링 윈도우(POOL_WIN; POOL_WIN1, POOL_WIN2, POOL_WIN3, POOL_WIN4)로 구분하고, 풀링 스트라이드에 따라 풀링 윈도우(POOL_WIN)를 슬라이딩시키면서 각 풀링 윈도우(POOL_WIN) 내의 값 중 최대값을 선택하여 출력 데이터(POOL_OUT_M)을 생성하 는 방식이다. 평균 풀링(Average Pool)은 풀링 윈도우(POOL_WIN) 별로 풀링 윈도우(POOL_WIN) 내 값들의 평균을 연산하여 출 력 데이터(POOL_OUT_A)를 생성하는 방식이다. 일반적으로, 풀링 윈도우(POOL_WIN)는 정사각 행렬이며, 풀링 윈도우(POOL_WIN)의 행 또는 열의 크기와 풀링 스 트라이드는 같은 값으로 설정되어 입력 데이터의 모든 원소가 한 번씩 풀링 처리되도록 할 수 있다. 도 4는 풀 링 윈도우(POOL_WIN)와의 행(또는 열)의 크기와 풀링 스트라이드가 2인 경우를 도시하였다. 풀링 연산에 사용되는 풀링 입력 데이터(POOL_IN)는 글로벌 버퍼 또는 연산 처리부(PE)로부터 제공될 수 있고, 풀링 과정에서 생성되는 중간 연산 결과의 적어도 일부는 글로벌 버퍼에 저장될 수 있다. 풀링 연산 이전에 수행되는 컨볼루션 사이클에서 각 분할맵(IDIV)과 가중치 필터(W)의 컨볼루션 연산 결과인 출 력 특징 맵(OFM)을 구성하는 각 원소는 단위 컨볼루션 사이클이 진행되는 순서로 복수의 연산 처리부(PE)로부터 출력될 수 있다. 도 3의 경우 각 분할맵(IDIV11, IDIV12, IDIV13, IDIV14)의 원소 수에 대응하는 9개의 연산 처리부(PE)에서 각 원소별 곱셈을 수행하고 곱셈 결과가 합산되어 출력 특징맵(OFM)이 획득될 수 있다. 풀링 레이어에서는 풀링 윈도우에 포함된 원소의 개수에 대응하는 수의 컨볼루션 연산 결과를 제공받아 풀링 연 산을 수행할 수 있다. 도 4를 참조하면, 컨볼루션 레이어의 출력 특징 맵인 4*4 크기의 풀링 입력 데이터 (POOL_IN)에 대하여 크기 2*2인 풀링 윈도우(POOL_WIN) 및 풀링 스트라이드를 2로 하여 복수 회의 풀링 연산이 수행된다. 또한, 풀링 윈도우별로 풀링 윈도우(POOL_WIN)에 포함되는 원소의 수(4개)에 대응하는 컨볼루션 연 산 결과가 풀링 연산에 이용된다. 컨볼루션 레이어에서 단위 컨볼루션 연산이 진행되는 순서로 풀링 입력 데이터(POOL_IN)의 각 원소가 순차적으 로 출력되고, 풀링 레이어에서는 풀링 윈도우 각각에 대해 풀링 윈도우별 풀링 원소를 순차적으로 제공받아 풀 링 연산을 수행한다. 도 4에 도시한 제 1 풀링 윈도우(POOL_WIN1)에 포함된 각 원소(12, 20, 8, 12), 제 2 풀링 윈도우(POOL_WIN2) 에 포함된 각 원소(30, 0, 2, 0), 제 3 풀링 윈도우(POOL_WIN3)에 포함된 각 원소(34, 70, 112, 100) 및 제 4 풀링 윈도우(POOL_WIN4)에 포함된 각 원소(37, 7, 22, 12)를 글로벌 버퍼에 모두 저장하고 풀링 연산하는 경우풀링 입력 데이터(POOL_IN)를 구성하는 원소를 모두 저장할 수 있는 메모리 공간이 필요하다. 따라서 처리하고자 하는 데이터의 사이즈에 비례하여 풀링 연산에 필요한 메모리 공간이 증가하게 된다. 따라서, 본 기술에서는 풀링 연산에 사용되는 데이터의 저장 공간을 최소화할 수 있는 방안을 제안한다. 일 실시예에서, 신경망 프로세서는 글로벌 버퍼에 풀링 윈도우별로 풀링값 저장부를 할당할 수 있다. 신 경망 프로세서는 풀링 윈도우에 포함된 원소 즉, 윈도우별 풀링 원소가 순차적으로 제공될 때마다 풀링하 고 글로벌 버퍼 내의 풀링값 저장부를 갱신하는 방식으로 풀링 연산을 수행한다. 즉, 컨볼루션 연산이 분할맵 각각에 대해 순차적으로 진행되므로, 윈도우별 풀링 원소가 모두 제공된 후 풀링 연산하는 것이 아닌 윈도우별 풀링 원소가 제공되는 순서로 이전에 제공된 윈도우별 풀링 원소와 풀링 연산하고 글로벌 버퍼를 갱신함으로서, 윈도우별 풀링 원소를 모두 저장할 필요가 없다. 도 5는 일 실시예에 의한 신경망 프로세서의 구성도이다. 도 5를 참조하면, 신경망 프로세서는 신경망 연산에 특화된 프로세서 또는 가속기일 수 있고, 메모리 내 연산장치, 컨트롤러 및 RAM을 포함할 수 있다. 일 실시예에서 신경망 프로세서는 하나의 반도체 칩으로 집적된 시스템 온 칩(SoC)으로 구현될 수 있으나 이에 한정되지 않으며, 복수의 반도체 칩으로 구현될 수도 있다. 컨트롤러는 신경망 프로세서의 전반적인 동작을 제어할 수 있다. 컨트롤러는 메모리 내 연산장 치가 신경망 연산을 정상적으로 실행할 수 있도록 신경망 연산과 관련된 파라미터들을 설정하고 관리할 수 있다. 컨트롤러는 하드웨어, 또는 소프트웨어, 또는 하드웨어 상에서 실행되는 소프트웨어(또는 펌웨어) 가 조합된 형태로 구현될 수 있다. 컨트롤러는 적어도 하나의 프로세서, 예컨대 CPU(central processing unit), 마이크로 프로세서 등으로 구 현될 수 있으며, RAM에 저장된 다양한 기능들을 구성하는 인스트럭션을 실행할 수 있다. RAM은 DRAM, SRAM 등으로 구현될 수 있으며, 컨트롤러의 동작을 위한 각종 프로그램들 및 데이터와, 컨트롤러에서 생성되는 데이터를 저장할 수 있다. 메모리 내 연산장치는 컨트롤러의 제어에 따라 신경망 연산을 수행하도록 구성될 수 있다. 메모리 내 연산장치는 연산 메모리, 글로벌 버퍼, 누적부(ACCU, 315), 활성화부(ACTIV, 317), 풀링부 (POOL, 319) 및 풀링 제어부를 포함할 수 있다. 연산 메모리는 복수의 연산 처리부(Processing Element; PE)를 포함할 수 있다. 각 연산 처리부(PE)는 글로벌 버퍼로부터 제공되는 입력 특징 맵(IFM) 및 가중치 필터(W)에 대한 컨볼루션 연산, 예컨대 요소별 곱셈 및 합산을 수행할 수 있다. 글로벌 버퍼는 입력 특징 맵(IFM)과 가중치 필터(W)를 저장한 후 연산 메모리로 제공할 수 있다. 글 로벌 버퍼는 연산 메모리, 누적부, 활성화부 및 풀링부로부터 출력되는 데이터의 적 어도 일부를 저장할 수 있다. 글로벌 버퍼는 DRAM, SRAM 등으로 구현될 수 있다. 누적부는 각 연산 처리부(PE)의 처리 결과를 누적하여 가중합을 도출하도록 구성될 수 있다. 활성화부는 누적부의 가중합 결과를 ReLU 등과 같은 활성화 함수에 적용하여 비선형성을 추가하도록 구성될 수 있다. 풀링부는 연산 메모리의 컨볼루션 연산 결과, 구현하기에 따라서는 활성화부의 출력값을 샘플링 하여 차원을 축소하고 최적화한다. 연산 메모리, 누적부, 활성화부 및 풀링부를 통한 처리 과정은 신경망 모델을 학습 또는 재학습하는 과정, 또는 입력 데이터를 추론하는 과정일 수 있다. 본 기술에 의한 풀링 제어부는 풀링부에서 사용하는 데이터의 일부만이 글로벌 버퍼에 저장되도 록 풀링부에 대한 입력 데이터 및 풀링부의 출력 데이터 전달 방식을 제어하도록 구성된다. 일 실시예에서, 풀링 제어부는 연산 메모리로부터 복수의 풀링 윈도우별로 출력되는 풀링 원소를 글 로벌 버퍼에 저장하지 않고 풀링부에 순차적으로 제공하고, 풀링부의 연산 결과에 따라 풀링 윈 도우별로 풀링값 저장부를 갱신하도록 구성될 수 있다.도 6은 일 실시예에 의한 풀링 제어부의 구성도이다. 도 6을 참조하면, 풀링 제어부는 버퍼 할당부, 풀링맵 구성부 및 업데이트부를 포함할 수 있다. 버퍼 할당부는 복수의 풀링 윈도우별로 글로벌 버퍼 내에 풀링값 저장부를 할당할 수 있다. 풀링맵 구성부는 연산 메모리에서 순차적으로 출력되는 풀링 원소를 복수의 풀링 윈도우 별로 구분할 수 있다. 업데이트부는 연산 메모리로부터 순차적으로 출력되는 풀링 원소를 풀링부로 제공하고, 풀링부 에서 출력되는 풀링 윈도우별 풀링 결과에 따라 상기 글로벌 버퍼의 풀링값 저장부를 갱신할 수 있다. 도 7은 일 실시예에 의한 풀링부의 구성도이다. 도 7을 참조하면, 풀링부는 제 1 데이터 입력부, 제 2 데이터 입력부, 통합부 및 통합 데이터 출력부를 포함할 수 있다. 일 실시예에서, 제 1 데이터는 연산 메모리에서 순차적으로 출력되는 컨볼루션 데이터, 즉 풀링 윈도우별 풀링 원소일 수 있다. 제 2 데이터는 풀링 윈도우 별로 할당된 풀링값 저장부로부터 제공되는 데이터일 수 있 다. 통합부는 제 1 데이터 입력부와 제 2 데이터 입력부로부터 제공되는 데이터를 풀링 연산할 수 있다. 풀링 연산은 최대값을 선택하기 위한 비교 연산 또는 평균값을 계산하기 위한 평균 연산일 수 있으나, 이에 한정되는 것은 아니다. 통합 데이터 출력부는 통합부의 연산 결과에 따라 풀링 윈도우별 풀링값 저장부를 갱신할 수 있다. 각 풀링 윈도우에 대해 풀링 연산이 개시되기 전 풀링값 저장부에는 초기값이 저장될 수 있고, 풀링 연산이 개 시됨에 따라 제 1 데이터 입력부로 제공되는 데이터와 제 2 데이터 입력부로 제공되는 데이터의 풀 링 경과에 따라 풀링값 저장부가 갱신될 수 있다. 제 1 데이터 입력부로 제공되는 데이터가 글로벌 버퍼를 경유하지 않고 연산 처리부(PE)에서 풀링부 로 직접 제공되어 직전 풀링 데이터와 통합됨에 따라, 글로벌 버퍼는 모든 풀링 원소를 저장할 필요 가 없다. 도 8은 일 실시예에 의한 연산 메모리의 구성도이다. 도 8을 참조하면, 일 실시예에 의한 연산 메모리는 복수의 타일(Tile)을 포함할 수 있다. 각각의 타일(Tile)은 타일 입력 버퍼, 복수의 연산 처리부(PE) 및 타일 출력 버퍼를 포함할 수 있다. 각각의 연산 처리부(PE)는 PE 입력 버퍼, 복수의 서브 어레이(SA) 및 누적/PE 출력 버퍼를 포함할 수 있다. 서브 어레이(SA)는 시냅스(Synapse) 어레이라 칭할 수 있으며, 복수의 워드 라인들(WL1, WL2, ..., WLN), 복수 의 비트 라인들(BL1, BL2, ..., BLM) 및 복수의 메모리 셀들(MC)을 포함한다. 일 실시예에서, 메모리 셀들(M C)은 저항성 메모리 소자(RE), 바람직하게는 멤리스터(Memristor) 소자를 포함할 수 있으나 이에 한정되지 않는 다. 메모리 셀(MC)은 복수의 워드 라인들(WL1, WL2, ..., WLN) 또는 복수의 비트 라인들(BL1, BL2, ..., BL M)을 통해 인가되는 기입 전압에 의해 저장되는 데이터 값이 변화하며, 저항성 메모리 셀들은 이러한 저항 변화 에 의해 데이터를 저장할 수 있다. 일 실시예에서, 각 저항성 메모리 셀은 PRAM(Phase change Random Access Memory) 셀, RRAM(Resistance Random Access Memory) 셀, MRAM(Magnetic Random Access Memory) 셀, FRAM(Ferroelectric Random Access Memory) 셀 등과 같은 저항성 메모리 셀을 포함하여 구현될 수 있다. 저항성 메모리 셀을 구성하는 저항성 소자는 전류량에 따라 결정 상태가 변화하는 상변화 물질(phase-change material), 페로브스카이트(perovskite) 화합물들, 전이 금속 산화물(transition metal oxide), 자성체 물질 (magnetic materials), 강자성(ferromagnetic) 물질들 또는 반강자성(antiferromagnetic) 물질들을 포함할 수 도 있으나 이에 한정되지 않는다.서브 어레이(SA)의 단위 셀이 멤리스터 소자인 경우, 연산 처리부(PE)는 멤리스터 소자에 가중치 필터(W)의 각 원소에 해당하는 데이터를 저장하고, 워드라인들(WL1, WL2, ..., WLN)에 분할맵(IDIV)의 각 원소에 대응하는 전 압들을 인가하여 키르히호프의 법칙, 옴의 법칙을 활용하여 컨볼루션 연산을 수행할 수 있다. 컨볼루션 연산 윈도우의 크기가 예를 들어 2*2인 경우 각 컨볼루션 사이클에서 분할맵(IDIV)의 각 원소 별로 컨 볼루션 연산을 수행하기 위해 4개의 연산 처리부(PE)가 필요하다. 연산 처리부(PE)에 포함되는 서브 어레이 (SA)는 재사용 원소의 재사용 횟수 및 가중치 필터(W)의 크기에 기초하여 적어도 부분적으로 활성화될 수 있다. 도 9a 내지 도 9h는 일 실시예에 의한 데이터 재사용 개념을 설명하기 위한 도면이다. 도 9a 내지 도 9h를 참조하면, 컨볼루션 레이어에서 입력 특징맵의 각 분할맵에 대해 단위 컨볼루션 연산이 진 행되는 순서로 출력 특징 맵(OFM)의 각 원소가 출력되며, 이는 풀링 입력 데이터(POOL_IN)로 사용된다. 글로벌 버퍼에는 복수의 풀링 윈도우(POLL_WIN1, POOL_WIN2, POOL_WIN3, POOL_WIN4) 별로 풀링값 저장부 (PO_BUF1, PO_BUF2, PO_BUF3, PO_BUF4)가 할당된다. 풀링 연산이 개시되기 전 풀링값 저장부(PO_BUF1, PO_BUF2, PO_BUF3, PO_BUF4)에는 초기값 \"D\"가 저장될 수 있다. 도 9a를 참조하면, 연산 메모리로부터 제 1 분할맵에 대한 컨볼루션 연산 결과가 제 1 풀링 윈도우 (POOL_WIN1)의 제 1 원소 \"12\"로 출력될 수 있다. 제 1 풀링 윈도우(POOL_WIN1)의 제 1 원소 \"12\"는 제 1 입력 데이터로서 통합부에 제공될 수 있다. 한편, 제 1 풀링 윈도우(POOL_WIN1)에 할당된 제 1 풀링값 저장부(P0_BUF1)에 저장된 초기값 \"D\"가 제 2 입력 데이터로서 통합부에 제공될 수 있다. 통합부는 제 1 입력 데이터 \"12\"와 초기값 \"D\"의 풀링 연산, 예를 들어 최대값 선택 연산을 수행하고, 그 결과에 따라 제 1 풀링값 저장부(P0_BUF1)가 갱신될 수 있다. 도 9b를 참조하면, 이어지는 제 2 분할맵에 대한 컨볼루션 연산 결과가 제 1 풀링 윈도우(POOL_WIN1)의 제 2 원 소 \"20\"로 출력될 수 있다. 제 1 풀링 윈도우(POOL_WIN1)의 제 2 원소 \"20\"은 제 1 입력 데이터로서 통합부에 제공될 수 있다. 한편, 제 1 풀링값 저장부(P0_BUF1)에 저장된 직전 풀링값 \"12\"가 제 2 입력 데이터로서 통합부에 제공될 수 있다. 통합부는 제 1 입력 데이터 \"20\"와 직전 풀링값 \"12\"의 풀링 연산을 수행하고, 그 결과에 따라 제 1 풀링 값 저장부(P0_BUF1)를 갱신할 수 있다. 도 9c 참조하면, 연산 메모리로부터 제 3 분할맵에 대한 컨볼루션 연산 결과가 제 2 풀링 윈도우 (POOL_WIN2)의 제 1 원소 \"30\"으로 출력될 수 있다. 제 2 풀링 윈도우(POOL_WIN2)의 제 1 원소 \"30\"은 제 1 입력 데이터로서 통합부에 제공될 수 있다. 한편, 제 2 풀링 윈도우(POOL_WIN2)에 할당된 제 2 풀링값 저장부(P0_BUF2)에 저장된 초기값 \"D\"가 제 2 입력 데이터로서 통합부에 제공될 수 있다. 통합부는 제 1 입력 데이터 \"30\"과 초기값 \"D\"의 풀링 연산을 수행하고, 그 결과에 따라 제 2 풀링값 저 장부(P0_BUF2)가 갱신될 수 있다. 도 9d를 참조하면, 이어지는 제 4 분할맵에 대한 컨볼루션 연산 결과가 제 2 풀링 윈도우(POOL_WIN2)에 포함되 는 제 2 원소 \"0\"으로 출력될 수 있다. 제 2 풀링 윈도우(POOL_WIN2)의 제 2 원소 \"0\"은 제 1 입력 데이터로서 통합부에 제공될 수 있다. 한편, 제 2 풀링값 저장부(P0_BUF2)에 저장된 직전 풀링값 \"20\"이 제 2 입력 데이터로서 통합부에 제공될 수 있다. 통합부는 제 1 입력 데이터 \"0\"와 직전 풀링값 \"20\"의 풀링 연산을 수행하고, 그 결과에 따라 제 2 풀링 값 저장부(P0_BUF2)를 갱신할 수 있다. 도 9e를 참조하면, 연산 메모리로부터 제 5 분할맵에 대한 컨볼루션 연산 결과가 제 1 풀링 윈도우 (POOL_WIN1)의 제 3 원소 \"8\"로 출력될 수 있다.제 1 풀링 윈도우(POOL_WIN1)의 제 3 원소 \"8\"은 제 1 입력 데이터로서 통합부에 제공될 수 있다. 한편, 제 1 풀링값 저장부(P0_BUF1)에 저장된 직전 풀링값 \"20\"이 제 2 입력 데이터로서 통합부에 제공될 수 있다. 통합부는 제 1 입력 데이터 \"8\"와 직전 풀링값 \"20\"의 풀링 연산을 수행하고, 그 결과에 따라 제 1 풀링 값 저장부(P0_BUF1)가 갱신될 수 있다. 도 9f를 참조하면, 이어지는 제 6 분할맵에 대한 컨볼루션 연산 결과가 제 1 풀링 윈도우(POOL_WIN1)에 포함되 는 제 4 원소 \"12\"로 출력될 수 있다. 제 1 풀링 윈도우(POOL_WIN1)의 제 4 원소 \"12\"는 제 1 입력 데이터로서 통합부에 제공될 수 있다. 한편, 제 1 풀링값 저장부(P0_BUF1)에 저장된 직전 풀링값 \"20\"이 제 2 입력 데이터로서 통합부에 제공될 수 있다. 통합부는 제 1 입력 데이터 \"12\"와 직전 풀링값 \"20\"의 풀링 연산을 수행하고, 그 결과에 따라 제 1 풀링 값 저장부(P0_BUF1)를 갱신할 수 있다. 이에 따라 제 1 풀링 윈도우(POOL_WIN1)에 대한 풀링 연산은 종료될 수 있다. 도 9g를 참조하면, 제 7 분할맵에 대한 컨볼루션 연산 결과가 제 2 풀링 윈도우(POOL_WIN2)에 포함되는 제 3 원 소 \"2\"로 출력될 수 있다. 제 2 풀링 윈도우(POOL_WIN2)의 제 3 원소 \"2\"는 제 1 입력 데이터로서 통합부에 제공될 수 있다. 한편, 제 2 풀링 윈도우(POOL_WIN2)에 할당된 제 2 풀링값 저장부(P0_BUF2)에 저장된 직전 풀링값 \"30\"이 제 2 입력 데이터로서 통합부에 제공될 수 있다. 통합부는 제 1 입력 데이터 \"2\"와 직전 풀링값 \"30\"의 풀링 연산을 수행하고, 그 결과에 따라 제 2 풀링 값 저장부(P0_BUF2)가 갱신될 수 있다. 도 9h를 참조하면, 이어지는 제 8 분할맵에 대한 컨볼루션 연산 결과가 제 2 풀링 윈도우(POOL_WIN2)에 포함되 는 제 4 원소 \"0\"으로 출력될 수 있다. 제 2 풀링 윈도우(POOL_WIN2)의 제 4 원소 \"0\"은 제 1 입력 데이터로서 통합부에 제공될 수 있다. 한편, 제 2 풀링값 저장부(P0_BUF2)에 저장된 직전 풀링값 \"30\"이 제 2 입력 데이터로서 통합부에 제공될 수 있다. 통합부는 제 1 입력 데이터 \"0\"와 직전 풀링값 \"30\"의 풀링 연산을 수행하고, 그 결과에 따라 제 2 풀링 값 저장부(P0_BUF2)를 갱신할 수 있다. 제 3 풀링 윈도우(POOL_WIN3) 및 제 4 풀링 윈도우(POOL_WIN4)에 대해서도 상술한 방식에 따라 풀링 연산 및 제 3 풀링값 저장부(PO_BUF3), 제 풀링값 저장부(PO_BUF4) 갱신을 풀링 연산을 완료할 수 있다. 방대한 양의 데이터를 처리하는 신경망 프로세서에서 본기술에서와 같이 데이터 저장량을 제한함에 따라 전력 소모량 및 데이터 저장 공간을 최소화할 수 있고, 데이터 처리 속도를 향상시켜 효율적인 신경망 연산이 가능하 게 된다."}
{"patent_id": "10-2021-0126490", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "이와 같이, 본 발명이 속하는 기술분야의 당업자는 본 발명이 그 기술적 사상이나 필수적 특징을 변경하지 않고 서 다른 구체적인 형태로 실시될 수 있다는 것을 이해할 수 있을 것이다. 그러므로 이상에서 기술한 실시예들 은 모든 면에서 예시적인 것이며 한정적인 것이 아닌 것으로서 이해해야만 한다. 본 발명의 범위는 상기 상세 한 설명보다는 후술하는 특허청구범위에 의하여 나타내어지며, 특허청구범위의 의미 및 범위 그리고 그 등가개 념으로부터 도출되는 모든 변경 또는 변형된 형태가 본 발명의 범위에 포함되는 것으로 해석되어야 한다."}
{"patent_id": "10-2021-0126490", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시예에 의한 컴퓨팅 시스템의 구성도이다. 도 2는 일 실시예에 의한 인공 신경망의 데이터 처리 개념을 설명하기 위한 도면이다. 도 3은 컨볼루션 레이어의 연산 개념을 설명하기 위한 도면이다. 도 4는 풀링 레이어의 연산 개념을 설명하기 위한 도면이다. 도 5는 일 실시예에 의한 신경망 프로세서의 구성도이다. 도 6은 일 실시예에 의한 풀링 제어부의 구성도이다.도 7은 일 실시예에 의한 풀링부의 구성도이다. 도 8은 일 실시예에 의한 연산 메모리의 구성도이다. 도 9a 내지 도 9h는 일 실시예에 의한 데이터 재사용 개념을 설명하기 위한 도면이다."}
