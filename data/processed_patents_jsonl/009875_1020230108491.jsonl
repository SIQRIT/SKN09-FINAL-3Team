{"patent_id": "10-2023-0108491", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0019529", "출원번호": "10-2023-0108491", "발명의 명칭": "전자 장치 및 전자 장치의 병목 현상의 원인을 확인하는 방법", "출원인": "삼성전자주식회사", "발명자": "박언상"}}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,메모리; 및상기 메모리와 작동적으로 연결되는 프로세서를 포함하고,상기 메모리는, 상기 프로세서에 의해 실행 시에, 전자 장치가,전자 장치 상에서 발생하는 병목 현상(bottleneck)을 감지하고,상기 병목 현상이 감지되는 경우에 사용 중인 리소스들의 정보를 포함하는 리소스 데이터를 수집하고,상기 수집된 리소스 데이터를 상기 메모리에 저장되는 병목 데이터 세트에 기록하고, 및상기 메모리에 기록된 병목 데이터 세트에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서,상기 메모리에 저장되는 인스트럭션들은,상기 병목 데이터 세트에 기록된 복수의 리소스 데이터를 이용한 다중 회귀 분석에 기초하여, 상기 병목 현상의원인이 되는 적어도 하나의 리소스를 결정하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1항 또는 제 2항에 있어서,상기 메모리에 저장되는 인스트럭션들은,상기 병목 현상이 감지되는 경우에 상기 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간을 상기 병목 데이터 세트에 기록하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 2항에 있어서,상기 메모리에 저장되는 인스트럭션들은,상기 다중 회귀 분석 모델에 독립 변수로 상기 병목 데이터 세트에 기록된 복수의 리소스 데이터를 입력하고,종속 변수로 상기 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간을 입력하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 4항에 있어서,상기 메모리에 저장되는 인스트럭션들은,공개특허 10-2025-0019529-3-상기 병목 데이터 세트에 기록된 각각의 리소스 데이터에 대해 선형성, 등분산성, 정규성, 또는 독립성 중 적어도 하나를 검정하고, 상기 검정 결과를 통과한 리소스 데이터를 상기 다중 회귀분석 모델에 입력하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1항 내지 제 5항 중 어느 한 항에 있어서,상기 메모리에 저장되는 인스트럭션들은,상기 리소스 데이터 중 적어도 하나를 포함하는 조합 중 설명력이 가장 높은 조합을 상기 병목 현상의 원인이되는 적어도 하나의 리소스로 결정하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6항에 있어서,상기 메모리에 저장된 인스트럭션들은,상기 리소스 데이터 중 설명력이 가장 높은 어느 하나를 선택하고,상기 설명력이 가장 높은 어느 하나를 포함하는 리소스 데이터의 조합 중 설명력이 가장 높은 조합을 상기 병목현상의 원인이 되는 적어도 하나의 리소스로 결정하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1항 내지 제 7항 중 어느 한 항에 있어서,상기 메모리에 저장된 인스트럭션들은,상기 확인된 적어도 하나의 리소스를 확보하는 동작을 실행하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 1항 내지 제 8항 중 어느 한 항에 있어서,상기 메모리에 저장된 인스트럭션들은,상기 병목 데이터 세트에 기록된 데이터의 양이 기준 값 미만인 경우, 미리 정해진 정책에 따라 각각의 리소스를 확보하는 동작을 실행하도록 하는 인스트럭션들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "전자 장치가 병목 현상의 원인을 확인하는 방법에 있어서,전자 장치 상에서 발생하는 병목 현상(bottleneck)을 감지하는 동작;상기 병목 현상이 감지되는 경우에 사용 중인 리소스들의 정보를 포함하는 리소스 데이터를 수집하는 동작;상기 수집된 리소스 데이터를 병목 데이터 세트에 기록하는 동작; 및상기 병목 데이터 세트에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정하는 동작을 포함하는 방법.공개특허 10-2025-0019529-4-청구항 11 제 10항에 있어서,상기 적어도 하나의 리소스를 결정하는 동작은,상기 병목 데이터 세트에 기록된 복수의 리소스 데이터를 이용한 다중 회귀 분석에 기초하여, 상기 병목 현상의원인이 되는 적어도 하나의 리소스를 결정하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 10항 또는 제 11항에 있어서,상기 수집된 리소스 데이터를 기록하는 동작은,상기 병목 현상이 감지되는 경우에 상기 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간을 상기 병목 데이터 세트에 기록하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 11항에 있어서,상기 다중 회귀 분석 모델에 독립 변수로 상기 병목 데이터 세트에 기록된 복수의 리소스 데이터를 입력하고,종속 변수로 상기 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간을 입력하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 13항에 있어서,상기 병목 데이터 세트에 기록된 각각의 리소스 데이터에 대해 선형성, 등분산성, 정규성, 또는 독립성 중 적어도 하나를 검정하고, 상기 검정 결과를 통과한 리소스 데이터를 상기 다중 회귀 분석 모델에 입력하는 동작을포함하는 방법."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 10항 내지 제 14항 중 어느 한 항에 있어서,상기 리소스 데이터 중 적어도 하나를 포함하는 조합 중 설명력이 가장 높은 조합을 상기 병목 현상의 원인이되는 적어도 하나의 리소스로 결정하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 15항에 있어서,상기 리소스 데이터 중 설명력이 가장 높은 어느 하나를 선택하는 동작; 및상기 설명력이 가장 높은 어느 하나를 포함하는 리소스 데이터의 조합 중 설명력이 가장 높은 조합을 상기 병목현상의 원인이 되는 적어도 하나의 리소스로 결정하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 10항 내지 제 16항 중 어느 한 항에 있어서,공개특허 10-2025-0019529-5-상기 확인된 적어도 하나의 리소스를 확보하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 10항 내지 제 17항 중 어느 한 항에 있어서,상기 병목 데이터 세트에 기록된 데이터의 양이 기준 값 미만인 경우, 미리 정해진 정책에 따라 각각의 리소스를 확보하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2023-0108491", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제 10항 내지 제 18항 중 어느 한 항의 방법을 실행하기 위한 인스트럭션들을 저장하는 컴퓨터로 판독 가능한기록 매체."}
{"patent_id": "10-2023-0108491", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 문서의 다양한 실시예에 따른 전자 장치는, 메모리, 및 상기 메모리와 작동적으로 연결되는 프로세서를 포함 할 수 있다. 상기 메모리는, 상기 프로세서에 의해 실행 시에, 전자 장치가, 전자 장치 상에서 발생하는 병목 현 상(bottleneck)을 감지하고, 상기 병목 현상이 감지되는 경우에 사용 중인 리소스들의 정보를 포함하는 리소스 데이터를 수집하고, 상기 수집된 리소스 데이터를 상기 메모리에 저장되는 병목 데이터 세트에 기록하고, 및 상 기 메모리에 기록된 병목 데이터 세트에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정 하도록 하는 인스트럭션들을 포함할 수 있다. 그 외에 다양한 실시예가 가능하다."}
{"patent_id": "10-2023-0108491", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 문서는 전자 장치에 관한 것이며, 예를 들어, 전자 장치가 병목 현상이 발생하는 경우 병목 현상에 영향을 주는 원인을 확인하는 방법에 관한 것이다."}
{"patent_id": "10-2023-0108491", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "스마트 폰과 같은 휴대용 전자 장치(이하 전자 장치)는 다양한 사용자 경험을 제공하기 위해, 대용량의 고품질 데이터를 처리하는 것이 요구된다. 이를 위해, 고성능의 컴퓨팅 시스템이 요구되며, 멀티 코어(예: dual, quad, octa core)를 갖는 멀티 프로세스 컴퓨터 아키텍처가 개발되고 있다. 이러한 멀티 프로세서 시스템들은 여러 프 로그램 코드를 동시에 병렬 처리 가능하도록 구성되고 있으며, 보다 구체적으로 복수의 프로세서를 동시에 운용 하면서 다양한 프로세스 및 스레드를 동시에 실행할 수 있는 환경을 제공하고 있다. 전자 장치 상에서 구현되는 멀티 프로세서 컴퓨팅 시스템들은 서로 독립적인 프로세서 상에서 실행되고 있는 복 수의 프로그램 코드 부분들이 공유 자원에 액세스 가능할 수 있어야 하고, 이에 따라 병목(bottleneck) 현상이 발생할 수 있다. 시스템 내에서 실행 중인 여러 스레드가 메모리, I/O 디바이스, 네트워크와 같은 제한된 자원 들을 경쟁적으로 사용하게 됨에 따라 특정 스레드에 지연이 발생할 수 있으며, 병목 현상은 일부 스레드의 지연 에 따라 시스템 전체의 성능이 저하되는 현상을 의미할 수 있다. 시스템 성능의 병목 현상의 원인은 자원 부족, 공유 자원에 대한 경합, 특정 스레드에서의 자원 독점, 자원의 잘못된 구성/동작과 같이 다양할 수 있다. 멀티 프로세서 컴퓨팅 시스템에서 성능 병목을 개선하기 위해, 전자 장치는 시스템 자원이 부족해지는 상황을 감지하고, 부족한 시스템 자원을 강제 할당하는 방식으로 병목 현상을 개선할 수 있다. 이와 같은 병목 현상의 개선 방법은 실제로 발생한 병목 현상에 영향을 주는 원인을 확인한 후 해당 원인을 제거하기 위한 것이 아니라, 일반적으로 병목 현상의 원인이 되는 리소스들을 할당하는 방식일 수 있다. 이 경우, 일부 리소스에 대 해서는 병목 현상의 해결을 위한 것 이상의 잉여가 발생할 수 있는데, 이는 병목 현상의 개선에 도움이 되지 않 을 수 있다. 본 개시(disclosure)(또는 명세서(specification), 발명(invention))에 따른 전자 장치는 메모리, 및 상기 메 모리와 작동적으로 연결되는 프로세서를 포함할 수 있다. 일 실시예에 따르면, 상기 메모리는, 상기 프로세서에 의해 실행 시에, 전자 장치가, 전자 장치 상에서 발생하 는 병목 현상(bottleneck)을 감지하고, 상기 병목 현상이 감지되는 경우에 사용 중인 리소스들의 정보를 포함하 는 리소스 데이터를 수집하고, 상기 수집된 리소스 데이터를 상기 메모리에 저장되는 병목 데이터 세트에 기록 하고, 및 상기 메모리에 기록된 병목 데이터 세트에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리 소스를 결정하도록 하는 인스트럭션들을 포함할 수 있다. 다양한 실시예에 따른 전자 장치가 병목 현상의 원인을 확인하는 방법은, 전자 장치 상에서 발생하는 병목 현상 (bottleneck)을 감지하는 동작, 상기 병목 현상이 감지되는 경우에 사용 중인 리소스들의 정보를 포함하는 리소 스 데이터를 수집하는 동작, 상기 수집된 리소스 데이터를 병목 데이터 세트에 기록하는 동작, 및 상기 병목 데 이터 세트에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정하는 동작을 포함할 수 있다. 본 문서의 다양한 실시예에 따르면, 병목 현상이 발생하는 경우에 기록된 데이터를 이용한 통계적 분석을 통해 병목 현상이 발생하는 원인을 확인하고, 그에 따라 병목 현상 개선에 도움이 되는 요인에 대해서만 필요한 제어 동작을 수행함으로써, 시스템 성능을 유지하면서 병목 현상을 개선할 수 있는 전자 장치 및 전자 장치의 병목 현상의 원인을 확인하는 방법을 제공할 수 있다."}
{"patent_id": "10-2023-0108491", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 도면을 참조하여 본 개시의 실시예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 개시는 여러 가지 상이한 형태로 구현될 수 있으 며 여기에서 설명하는 실시예에 한정되지 않는다. 도면의 설명과 관련하여, 동일하거나 유사한 구성요소에 대해 서는 동일하거나 유사한 참조 부호가 사용될 수 있다. 또한, 도면 및 관련된 설명에서는, 잘 알려진 기능 및 구성에 대한 설명이 명확성과 간결성을 위해 생략될 수 있다. 도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외 부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가 적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상 기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전 자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제 공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용 한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2은 다양한 실시예에 따른 프로그램 모듈의 블록도이다. 일실시예에 따르면, 프로그램은 전자 장치의 하나 이상의 리소스들을 제어하기 위한 운영 체제, 미들 웨어, 또는 상기 운영 체제 상에서 실행 가능한 어플리케이션을 포함할 수 있다. 운영 체 제는, 예를 들면, AndroidTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 프로그 램 중 적어도 일부 프로그램은, 예를 들면, 제조 시에 전자 장치에 프리로드되거나, 또는 사용자의 사용 환경에서 외부 전자 장치(예: 전자 장치(102 또는 104), 또는 서버)로부터 다운로드되거나 갱신될 수 있다. 운영 체제는 전자 장치의 시스템 리소스 (예: 프로세스, 메모리, 또는 전원)를 제어(예: 할당 또는 회수)할 수 있다. 운영 체제는, 추가적으로 또는 대체적으로, 전자 장치의 다른 하드웨어 디바이스, 예를 들면, 입력 장치, 음향 출력 장치, 표시 장치, 오디오 모듈, 센서 모듈, 인터페 이스, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 구동하기 위한 하나 이상의 드라이버 프로그램들을 포함할 수 있다. 미들 웨어는 어플리케이션이 전자 장치의 하나 이상의 리소스들이 제공하는 기능 또는 정보를 사용할 수 있도록 다양한 기능들을 어플리케이션으로 제공할 수 있다. 미들 웨어는, 예를 들면, 어플 리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매니저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니저, 로케이션 매니저, 그래픽 매니저, 시큐리티 매니저, 통화 매니저, 또는 음성 인식 매니저를 포 함할 수 있다. 어플리케이션 매니저는, 예를 들면, 어플리케이션의 생명 주기를 관리할 수 있다. 윈 도우 매니저는, 예를 들면, 화면에서 사용되는 GUI 자원을 관리할 수 있다. 멀티미디어 매니저는, 예 를 들면, 미디어 파일들의 재생에 필요한 포맷을 파악하고, 해당 포맷에 맞는 코덱을 이용하여 미디어 파일의 인코딩 또는 디코딩을 수행할 수 있다. 리소스 매니저는, 예를 들면, 어플리케이션의 소스 코드 또는메모리의 공간을 관리할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량, 온도 또는 전원을 관리하고, 이 중 해당 정보를 이용하여 전자 장치의 동작에 필요한 전력 정보를 결정 또는 제공할 수 있다. 일실시예 에 따르면, 파워 매니저는 바이오스(BIOS: basic input/output system)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 어플리케이션에서 사용될 데이터베이스를 생성, 검색, 또는 변경 할 수 있다. 패키지 매니저는, 예를 들면, 패키지 파일의 형태로 배포되는 어플리케이션의 설치 또는 갱신 을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 전자 장치와 외부 전자 장치 간의 무선 또는 유선 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 발생된 이벤트(예: 통화, 메시지, 또는 알람)를 사용자에게 알리기 위한 기능을 제공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치 의 위치 정보를 관리할 수 있다. 그래픽 매니저는, 예를 들면, 사용자에게 제공될 그래픽 효과 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 시큐리티 매니저는, 예를 들면, 시스템 보안 또는 사용자 인 증을 제공할 수 있다. 통화(telephony) 매니저는, 예를 들면, 전자 장치의 음성 통화 또는 영상 통화 기능을 관리할 수 있다. 음성 인식 매니저는, 예를 들면, 사용자의 음성 데이터를 서버로 전송하고, 해당 음성 데이터에 기반하여 전자 장치에서 수행될 기능에 대응하는 명령어(command) 또는 해당 음성 데 이터에 기반하여 변환된 문자 데이터를 수신할 수 있다. 일 실시예에 따르면, 미들 웨어는 동적으로 기존 의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. 일 실시예에 따르면, 미들 웨어의 적어도 일부는 운영 체제의 일부로 포함되거나, 또는 운영 체제와는 별도의 소프트웨어로 구현될 수 있다. 어플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브라우 저, 카메라, 알람, 컨택트, 음성 인식, 이메일, 달력, 미디어 플레이어 , 앨범, 와치, 헬스(예: 운동량 또는 혈당 등을 측정), 또는 환경 정보(예: 기압, 습도, 또는 온도 정보) 어플리케이션을 포함할 수 있다. 일실시예에 따르면, 어플리케이션은 전자 장치 와 외부 전자 장치 사이의 정보 교환을 지원할 수 있는 정보 교환 어플리케이션(미도시)을 더 포함할 수 있다. 정보 교환 어플리케이션은, 예를 들면, 외부 전자 장치로 지정된 정보 (예: 통화, 메시지, 또는 알람)를 전달하기 위한 노티피케이션 릴레이 어플리케이션, 또는 외부 전자 장치를 관리하기 위한 장치 관리 어플리케이 션을 포함할 수 있다. 노티피케이션 릴레이 어플리케이션은, 예를 들면, 전자 장치의 다른 어플리케이션 (예: 이메일 어플리케이션)에서 발생된 이벤트(예: 메일 수신)에 대응하는 알림 정보를 외부 전자 장치로 전달하거나, 또는 외부 전자 장치로부터 알림 정보를 수신하여 전자 장치의 사용자에게 제공할 수 있다. 장치 관리 어플리케이션은, 예를 들면, 전자 장치와 통신하는 외부 전자 장치 또는 그 일부 구성 요소(예: 표시 장치 또는 카메라 모듈)의 전원(예: 턴-온 또는 턴-오프) 또는 기능(예: 표시 장치 또는 카메라 모듈의 밝기, 해상도, 또는 포커스)을 제어할 수 있다. 장치 관리 어플리케이션은, 추가적으로 또 는 대체적으로, 외부 전자 장치에서 동작하는 어플리케이션의 설치, 삭제, 또는 갱신을 지원할 수 있다. 도 3은 일 실시예에 따른 전자 장치의 블록도이다. 도 3을 참조하면, 전자 장치는 디스플레이, 통신 모듈, 프로세서 및 메모리를 포함할 수 있다. 일 실시예에 따르면 도시된 구성 중 일부가 생략 또는 다른 구성으로 치환되더라도 본 문서의 다양한 실시예를 구현할 수 있다. 전자 장치는 도시된 구성 이외에도 도 1의 전자 장치의 구성 및/또는 기능 중 적어도 일부를 더 포함할 수 있다. 도시된(또는 도시되지 않은) 전자 장치의 각 구성 중 적어도 일부는 상호 작동적으로(operatively), 기능적으로(functionally) 및/또는 전기적으로 (electrically) 연결될 수 있다. 일 실시예에 따르면, 디스플레이는 액정 디스플레이(liquid crystal display(LCD)), 발광 다이오드 (light-emitting diode(LED)) 디스플레이, 유기 발광 다이오드(organic light-emitting diode(OLED)) 디스플레 이 중 어느 하나로 구현될 수 있으며, 이에 한정되지는 않는다. 디스플레이는 사용자의 신체 일부(예: 손 가락) 또는 입력 장치(예: 스타일러스 펜)를 이용한 터치 및/또는 근접 터치(또는 호버링) 입력을 감지하는 터 치 스크린으로 구성될 수 있다. 디스플레이는 적어도 일부가 플렉서블(flexible) 할 수 있으며, 폴더블 (foldable) 디스플레이, 롤러블(rollable) 디스플레이로 구현될 수도 있다. 디스플레이는 도 1 의 디스플레이 모듈의 구성 및/또는 기능 중 적어도 일부를 포함할 수 있다. 일 실시예에 따르면, 통신 모듈은 외부 장치와의 무선 통신을 지원하기 위한 다양한 하드웨어 및/또는 소 프트웨어 구성을 포함할 수 있다. 통신 모듈은 근거리 무선 통신(예: Wi-Fi, Bluetooth) 및 셀룰러 무선 통신(예: 4G LTE, 5G NR)을 지원할 수 있다. 통신 모듈은 도 1의 통신 모듈 의 구성 및/또는 기능 중적어도 일부를 포함할 수 있다. 일 실시예에 따르면, 메모리는 휘발성 메모리 및 비휘발성 메모리를 포함하여, 다양한 데이터들을 일시적 또는 영구적으로 저장할 수 있다. 메모리는 도 1의 메모리의 구성 및/또는 기능 중 적어도 일부를 포 함하고, 도 1 및 도 2의 프로그램을 저장할 수 있다. 일 실시예에 따르면, 메모리는 프로세서에서 수행될 수 있는 다양한 인스트럭션(instruction)들을 저 장할 수 있다. 이와 같은 인스트럭션들은 프로세서에 의해 인식될 수 있는 산술 및 논리 연산, 데이터 이 동, 입출력과 같은 제어 명령을 포함할 수 있다. 일 실시예에 따르면, 프로세서는 전자 장치의 각 구성 요소들의 제어 및/또는 통신에 관한 연산이나 데이터 처리를 수행할 수 있는 구성으로써, 하나 이상의 프로세서들로 구성될 수 있다. 프로세서는 메모리 , 디스플레이, 디스플레이, 통신 모듈을 포함하는 전자 장치의 각 구성 요소와 전기 적으로, 기능적으로, 및/또는 작동적으로 연결될 수 있다. 프로세서는 도 1의 프로세서의 구성 및/또 는 기능 중 적어도 일부를 포함할 수 있다. 일 실시예에 따르면, 전자 장치는 dual, quad, octa 코어(core)와 같은 멀티-프로세서 컴퓨터 아키텍쳐를 포함할 수 있다. 예를 들어, 전자 장치는 연산 작업과 같은 핵심적인 동작을 수행하는 복수의 코어를 하나 의 집적회로 상에서 통합하여 프로세서를 구성할 수 있다. 다른 일 실시예에 따르면, 프로세서는 싱 글 코어 프로세서로 구현될 수도 있다. 일 실시예에 따르면, 프로세서가 전자 장치 상에서 구현할 수 있는 연산 및 데이터 처리 기능에는 한 정됨이 없을 것이나, 이하에서는 전자 장치가 병목 현상이 발생하는 경우, 리소스 데이터를 병목 데이터 세트에 기록하고, 기록된 병목 데이터 세트에 대한 통계적 분석을 통해 병목 현상의 원인이 되는 리소스를 분석 하는 다양한 실시예들에 대해 상세히 설명하기로 한다. 후술할 프로세서의 동작들은 메모리에 저장된 인스트럭션들을 로딩(loading)함으로써 수행될 수 있다. 예를 들어, 프로세서가 특정 동작을 실행한다는 것은 메모리에 저장된 해당 동작을 실행하도록 하는 인스트럭션을 실행한다는 것과 대응되는 의미일 수 있 다. 이하에서, 전자 장치 또는 프로세서가 감지 또는 검출(detect)하는 동작은, 인식(recognize), 판 단(determine), 및/또는 확인(identify)하는 동작을 포함할 수 있다. 일 실시예에 따르면, 프로세서는 다양한 리소스(resource)를 이용하여 다양한 동작(operaton)을 수행할 수 있다. 여기서, 리소스는 전자 장치 상에서 다양한 프로세스(process) 또는 스레드(thread)를 실행하기 위 해 사용되는 하드웨어 및/또는 소프트웨어 리소스를 의미할 수 있다. 예를 들어, 리소스는 CPU(central processing unit) 주파수, GPU(graphics processing unit) 주파수, 백그라운드 프로세스의 부하, 메모리 상태 를 예로 들 수 있으며, 이에 한정되지는 않는다. 일 실시예에 따르면, 프로세서는 다양한 동작을 실행하는 상태에서 병목 현상(bottleneck)의 발생을 감지 (detect)할 수 있다. 멀티 프로세서 컴퓨팅 시스템에서 성능의 병목 현상은 시스템 내의 여러 개의 스레드가 제 한된 리소스들에 대한 경쟁으로 특정 스레드에 지연이 발생하고, 이로 인해 시스템의 성능이 저하되는 현상을 의미할 수 있다. 이와 같은 병목 현상의 원인은 리소스 부족, 공유 리소스에 대한 경합, 특정 스레드의 리소스 독점, 리소스의 잘못된 구성 또는 리소스의 잘못된 동작과 같이 다양할 수 있다. 일 실시예에 따르면, 병목 현상에 따라 적어도 하나의 스레드에 지연이 발생하는 경우, UI와 관련된 스레드(예: 메인 스레드)와 같은 일부 스레드의 지연은 사용자가 성능 저하를 체감적으로 느낄 수 있다. 예를 들어, 사용자 가 체감할 수 있는 병목에 따른 지연(또는 성능 저하)의 타입은 입력 지연, looper 지연, 또는 ANR(application not responding) 발생을 예로 들 수 있다. 여기서, 입력 지연은 사용자 입력(예: 터치, 호버링, 음성 입력) 시 대상 어플리케이션이 즉시 응답하지 않고 지연이 발생하는 현상일 수 있다. Looper는 메인 스레드와 관련된 메 시지 루프를 처리하는 클래스로써 메시지 큐에 들어오는 각각의 메시지를 이를 처리할 핸들러(handler)로 전달 하는 기능을 수행할 수 있다. Looper 지연이 발생하는 경우 어플리케이션이 정지되거나, 및/또는 사용자 입력에 대한 응답이 없는 것으로 보일 수 있다. ANR(application not responding)은 어플리케이션이 일시적으로 응답하 지 않는 경우에 발생하는 오류일 수 있다. 일 실시예에 따르면, 프로세서는 메모리 상에 병목 데이터 세트를 저장할 수 있다. 병목 데이터 세트 에는 병목 현상으로 발생한 지연의 타입(예: 입력 지연, looper 지연, ANR 발생), 지연 시간, 리소스 정보가 기 록될 수 있다. 일 실시예에 따르면, 프로세서는 병목 현상이 발생하는 경우, 사용 중인 리소스들을 확인하고, 확인된 리 소스들의 정보를 포함하는 리소스 데이터를 수집할 수 있다. 예를 들어, 프로세서는 입력 지연이 발생하는 경우, 현재의 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 및/또는 메모리 사용량과 같은 리소스 데이터를 수집할 수 있다. 프로세서는 수집된 리소스 데이터를 병목 데이터 세트 상에 누적하여 기록할 수 있다. 일 실시예에 따르면, 프로세서는 발생하는 병목 현상 중 사용자가 체감할 수 있는 지연(예: UI 관련 스레 드의 지연)이 발생하는 경우, 리소스 데이터를 수집 및 기록할 수 있다. 일 실시예에 따르면, 프로세서는 병목 현상이 발생하는 경우, 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간 정보를 더 확인하고, 병목 데이터 세트에 기록할 수 있다. 일 실시예 따르면, 병목 데이터 세트는 각 각의 지연의 타입 별로 지연 시간 및 리소스 사용량 데이터를 누적하여 기록할 수 있다. 아래의 표 1은 입력 지연 발생 시 병목 데이터 세트에 기록된 데이터의 예를 나타낸 것이다. 표 1 Latency(a) CPU frequency(b) GPU frequency(c) Job scheduler(d) Background(e) Memory 0 791 1401 430 5 2 4.95 1 828 2208 430 3 2 4.95 2 814 1401 565 3 2 4.95 3 813 1766 650 2 2 4.95 4 812 2131 800 5 2 4.95 5 812 2208 800 5 2 4.95 .. .. .. .. .. .. .. 상기 표 1을 참조하면, 입력 지연이 발생하는 경우에 지연 시간과, 사용 중인 리소스인 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 및 메모리 사용량이 수집되어 병목 데이터 세트 상에 기록될 수 있다. 일 실시예에 따르면, 프로세서는 메모리에 저장된 병목 데이터 세트에 기록된 데이터에 기초하여, 병 목 현상의 발생 시 원인이 되는 적어도 하나의 리소스를 결정할 수 있다. 상기 리소스를 결정하는 동작은 병목 데이터 세트에서 각 병목 현상의 타입에 대해 기준 개수 이상의 데이터가 누적 기록된 경우에 수행되거나, 및/ 또는 실제 병목 현상이 발생한 경우에 수행될 수 있다. 종래의 컴퓨팅 시스템은 병목 현상을 개선하기 위해 필요한 시스템 리소스를 강제 할당하는 방법을 사용하고 있 다. 병목 현상은 사용 중인 리소스 중 일부가 부족한 경우에 발생할 수 있으나, 종래의 컴퓨팅 시스템은 병목 현상의 원인이 되는 리소스를 식별하지 않고 모든 리소스를 확보하는 제어 동작을 수행하였다. 이 경우, 실제 병목 현상의 개선에 도움이 되지 않는 잉여 자원이 발생할 수 있다. 예를 들어, CPU 주파수를 증가시키는 경우, 가용 용량 확보와 같은 제어 동작들은 발열, 소비 전력 증가와 같은 문제를 발생시킬 수 있는데, 실제 CPU 주파 수가 병목 현상에 영향을 주지 않는 상황이라면 병목 현상의 개선 없이 발열, 소비 전력 증가와 같은 문제만 발 생시킬 수 있다. 이에, 전자 장치는 병목 현상의 발생 시에 그 원인이 되는 적어도 하나의 리소스를 결정 하고, 결정된 리소스에 대해서만 필요한 제어 동작을 수행할 수 있다. 일 실시예에 따르면, 프로세서는 병목 데이터 세트에 대해 통계적 분석에 기초하여, 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정할 수 있다. 여기서, 통계적 분석은 다중 회귀 분석(multiple regression analysis)을 포함할 수 있다. 다중 회귀 분석은 복수의 독립 변수들이 하나의 종속 변수에 미치는 파악하기 위 한 분석 방법으로써, 다중 회귀 분석에 따라 종속 변수의 변화에 영향을 미치는 독립 변수들의 변화를 검증할 수 있다. 프로세서는 다중 회귀 분석 모델의 독립 변수로 병목 데이터 세트에 기록된 복수의 리소스 데이 터를 입력하고, 종속 변수로 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간을 입력할 수 있다. 예를 들 어, 표 1을 참조하면, 다중 회귀 분석 모델에 종속 변수로 병목 데이터 세트에 기록된 입력 지연의 지연 시간이 입력되고, 독립 변수로 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 및 메모 리 사용량이 각각 입력될 수 있다. 프로세서는 병목 데이터 세트에 기록된 모든 리소스 데이터(예: 표 1의 0 내지 N)를 입력하거나, 또는 일부 리소스 데이터를 샘플링 하여 입력할 수 있다. 일 실시예에 따르면, 프로세서는 병목 데이터 세트에 기록된 각각의 리소스 데이터에 대해 선형성 (linearity), 등분산성(homoscedasticity), 정규성(normality), 또는 독립성(independence) 중 적어도 하나를 검정하고, 상기 검정 결과를 통과한 리소스 데이터를 다중 회귀 분석 모델에 입력할 수 있다. 이는 다중 회귀 분석에 필요한 가정을 검정하는 과정일 수 있으며, 검정 결과를 통과하지 못하는 데이터는 다중 회귀 분석 모델 의 분석 결과의 신뢰도를 낮추는 원인이 될 수 있어, 신뢰도에 영향을 주는 데이터를 제거하기 위함일 수 있다. 일 실시예에 따르면, 프로세서는 선형성 확인을 위한 가설 검정(hypothesis testing) 과정을 수행할 수 있 다. 예를 들어, 병목 현상 발생 시 지연에 대한 영향을 주는 각 리소스의 계수(coefficient)가 0이 아니라는 귀 무 가설을 설정하고, 귀무 가설에 대한 t-statistics 및 p-value를 계산할 수 있다. 계산된 p-value가 유의 수 준(예: 0.005)보다 작은 경우, 귀무 가설을 기각하고 대립 가설을 채택할 수 있다. 즉, 계산된 p-value가 유의 수준보다 작은 경우, 귀무 가설에 대한 대립 가설인 병목 현상의 지연에 대한 특정 리소스의 영향이 있는 것으 로 결정할 수 있다. 프로세서가 선형성을 확인하는 방법은 이에 한정되지 않으며, 다양한 통계적 분석 기 법이 사용될 수 있다. 일 실시예에 따르면, 프로세서는 잔차의 등분산성 확인을 위해 Brown-Forsythe 검정 및/또는 Breusch- Pagan 검정을 수행할 수 있다. 여기서, 잔차(residual)는 회귀 분석에서 예측 값과 실제 관측 값의 차이를 의미 하며, 잔차의 등분산성은 종속 변수(예: 병목 현상에 따른 지연 시간)와 독립 변수(예: 각 리소스 데이터)의 잔 차들이 일정한 분산을 갖는 것을 의미할 수 있다. 프로세서가 잔차의 등분산성을 확인하는 방법은 상기 예 에 한정되지 않으며, 다양한 통계적 분석 기법이 사용될 수 있다. 일 실시예에 따르면, 프로세서는 확률 오차의 정규성 확인을 위해 Shapiro-Wilk 검정, Anderson-Darling 검정, KS 검정, Normal 검정, 또는 Jarque-bera 검정 중 적어도 하나를 수행할 수 있다. 여기서, 확률 오차 (probable error)의 정규성(normality)은 어떠한 측정 값을 얻을 때 추정되는 기대 값과의 오차의 크기가 정규 분포를 따르는지의 여부를 의미할 수 있다. 프로세서가 확률 오차의 정규성을 확인하는 방법은 상기 예에 한정되지 않으며, 다양한 통계적 분석 기법이 사용될 수 있다. 일 실시예에 따르면, 프로세서는 잔차의 독립성 확인을 위해, Durbin Watson 검정 또는 분산팽창인수를 이 용할 수 있다. 여기서, 잔차의 독립성은 회귀 분석에서 예측 값과 실제 관측 값의 차이인 잔차가 서로 독립성을 가지는 지 여부에 대한 것으로, 각 리소스 데이터로부터 계산된 잔차들의 사이에 서로 상관관계가 없는 지 여부 에 대한 검정을 포함할 수 있다. 프로세서가 잔차의 독립성을 확인하는 방법은 상기 예에 한정되지 않으며, 다양한 통계적 분석 기법이 사용될 수 있다. 상기 리소스 데이터에 대해 선형성, 등분산성, 정규성, 또 는 독립성을 검정하는 실시예에 대해서는 도 5 및 도 6을 통해 보다 상세히 설명하기로 한다. 일 실시예에 따르면, 프로세서는 병목 현상으로 인한 특정 지연(예: 입력 지연)이 발생하는 경우, 병목 데 이터 세트에 기록된 리소스 데이터 중 선형성, 등분산성, 정규성, 또는 독립성 중 적어도 하나의 검정 결과를 통과한 리소스 데이터를 이용해 다중 회귀 분석 모델의 독립 변수로 입력할 수 있다. 이에 따라 다중 회귀 분석 모델에 신뢰도가 높은 데이터만 선별하여 독립 변수로 입력할 수 있다. 일 실시예에 따르면, 프로세서는 다중 회귀 분석 모델에 독립 변수로 복수의 리소스 데이터를 입력하고, 종속 변수로 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간을 입력할 수 있다. 프로세서는 복수의 리소스 데이터 중 적어도 하나를 포함하는 조합 중 종속 변수인 병목 현상에 대한 설명력이 가장 높은 조합을 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정할 수 있다. 예를 들어, 프로세서는 5개의 리소스 데이터를 이용하여 병목 현상의 원인을 결정하는 경우, 리소스 데이터 1-5개로 구성할 수 있는 조합 31가지 중 적어도 일부를 각각 독립 변수로 입력하여 종속 변수인 병목 현상에 대한 설명력을 구하고, 설명력이 가장 높은 조합을 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정할 수 있다. 일 실시예에 따르면, 프로세서는 통계적으로 진입법(forward selection), 제거법(backward elimination), 전진선택법(forward stepwise selection), 후진제거법(backward stepwise selection), 단계적 검정절차 (stepwise selection) 중 적어도 하나를 이용해 종속 변수(예: 병목 현상)의 설명력을 최대로 하는 독립 변수 (예: 리소스 데이터의 조합)를 결정할 수 있다. 일 실시예에 따르면, 프로세서는 독립 변수인 리소스 데이터 중 종속 변수에 대해 설명력이 가장 높은 어 느 하나를 선택하고, 선택된 하나를 포함하는 리소스 데이터의 조합 중 설명력이 가장 높은 조합을 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정할 수 있다. 예를 들어, 프로세서는 5개의 리소스 데이터를 이용 하여 병목 현상의 원인을 결정하는 경우, 5개의 리소스 데이터 각각을 독립 변수로 입력하여 종속 변수인 병목 현상에 대한 설명력을 구하고, 그 중 설명력이 가장 높은 어느 하나의 리소스 데이터를 결정할 수 있다. 리소스데이터 A의 설명력이 가장 높은 것으로 결정되는 경우, 5개의 리소스 데이터의 조합 중 리소스 데이터 A를 포함 하는 조합 16가지를 각각 독립 변수로 입력하여 종속 변수인 병목 현상에 대한 설명력을 구하고, 설명력이 가장 높은 조합을 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정할 수 있다. 이에 따라, 모든 리소스 데이터 의 조합을 이용하는 경우보다 설명력을 계산하는데 필요한 연산량을 줄일 수 있다. 본 실시예에 대해서는 도 8 을 통해 보다 상세히 설명하기로 한다. 일 실시예에 따르면, 프로세서는 다중 회귀 분석을 통해 적어도 하나의 리소스가 병목 현상의 원인으로 결 정되는 경우, 확인된 적어도 하나의 리소스를 확보하기 위한 동작을 수행할 수 있다. 예를 들어, 프로세서(31 0)는 CPU 주파수를 증가시키거나, GPU 주파수를 증가시키거나, 적어도 하나의 백그라운드 프로세스의 스케줄링 을 지연시키거나 또는 종료하거나, 및/또는 메모리 가용량을 확보하는 동작을 수행할 수 있다. 일 실시예에 따르면, 프로세서는 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정하는 경우, 결정된 리소스 정보를 포함하는 사용자 인터페이스를 디스플레이를 통해 제공할 수 있다. 상기 사용자 인터페이스 에 대해서는 도 9를 통해 보다 상세히 설명하기로 한다. 일 실시예에 따르면, 프로세서는 병목 데이터 세트에 기록된 데이터의 양이 기준 값 이상인 경우, 다중 회 귀 분석 모델을 이용하여 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정할 수 있다. 다중 회귀 분석과 같은 통계적 분석은 입력 데이터의 양이 충분한 경우에 그 신뢰도가 높을 수 있으며, 전자 장치 상에서 병 목 현상이 발생한 횟수가 적은 이유로 병목 데이터 세트에 기록된 데이터의 양이 적은 경우에는 통계적 분석의 신뢰도가 낮을 수 있다. 이에 따라, 프로세서는 병목 데이터 세트에 기록된 데이터의 양이 기준 값 미만인 경우, 상기 병목 현상의 원인이 되는 리소스를 결정하는 동작을 수행하지 않고, 미리 정해진 정책에 따라 각각 의 리소스를 확보하는 동작을 실행할 수 있다. 예를 들어, 전자 장치는 특정 병목 현상에 따른 지연(예: 입력 지연, looper 지연, ANR 발생)이 발생하는 경우 해당 병목 현상이 발생 시 실행할 리소스 확보 동작(예: CPU 주파수 증가, GPU 주파수 증가, 백그라운드 프로세스의 스케줄링, 메모리 가용량 확보)을 미리 지정하 고, 병목 현상이 발생하는 경우 미리 지정된 리소스 확보 동작을 수행할 수 있다. 도 4는 일 실시예에 따른 전자 장치에서 동작하는 소프트웨어 모듈의 블록도이다. 도시된 각각의 소프트웨어 모듈은 메모리(예: 도 3의 메모리) 상에 비영구적으로 저장되고, 프로세서(예: 도 3의 프로세서)에 의해 실행될 수 있다. 일 실시예에 따르면, 전자 장치(또는 프로세서)는 시스템의 구동과 관련된 핵심 부분을 담당하는 다양한 시스템 프로세스들을 실행할 수 있다. 시스템 프로세스는 커널(kernel) 공간에서 실행되는 커널 프로세스일 수도 있다. 일 실시예에 따르면, 전자 장치는 시스템 프로세스의 일부로 병목 모니터(bottleneck monitor) 및 리소스 컨트롤러(resource controller)를 포함할 수 있다. 일 실시예에 따르면, 병목 모니터는 java 클래스(예: BottleneckMonitor.class(.java)), JNI 라이브러리 (예: BottleneckMonitor JNI library(.cpp)), 및/또는 SO(shared object)(예: Lib BottleneckMonitor.so)의 형태로 제공될 수 있다. 일 실시예에 따르면, 병목 모니터는 병목 현상의 발생 시 병목 현상으로 인한 지연 구간에 대한 정보를 획 득하여 퍼포먼스 데몬(performance daemon)으로 전달하고, 퍼포먼스 데몬의 데이터 수집기(data collector)에 전달된 병목 현상에 관련된 데이터가 저장될 수 있다. 일 실시예에 따르면, 시스템 프로세스의 리소스 컨트롤러 및 커널의 리소스 컨트롤러는 전 자 장치의 성능에 영향을 주는 리소스 정보를 퍼포먼스 데몬으로 전달하고, 퍼포먼스 데몬의 데 이터 수집기에 전달된 리소스 관련 데이터가 저장될 수 있다. 일 실시예에 따르면, 퍼포먼스 데몬의 데이터 수집기는 병목 모니터 및 리소스 컨트롤러로 부터 수신한 정보를 병목 데이터 세트(bottleneck data set)에 기록할 수 있다. 예를 들어, 병목 데이터 세트에 는 병목 데이터 세트에는 병목 현상으로 발생한 지연의 타입(예: 입력 지연, looper 지연, ANR 발생), 지연 시 간, 리소스 정보가 기록될 수 있다. 일 실시예에 따르면, 퍼포먼스 데몬의 부스트 프레임워크(boost framework)는 병목 모니터로부 터 전달된 병목 관련 데이터 및/또는 데이터 수집기에 기록된 데이터의 양이 임계 값 이상인 경우, 데이터 수집기에 기록된 병목 데이터 세트에 기초하여 병목 현상에 영향을 주는 적어도 하나의 리소스를 결정할수 있다. 예를 들어, 부스트 프레임워크는 병목 데이터 세트에 대해, 통계적 분석(예: 다중 회귀 분석)에 기초하여 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정할 수 있다. 일 실시예에 따르면, 부스트 프레임워크는 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정하여 시 스템 프로세스의 리소스 컨트롤러와 커널의 리소스 컨트롤러에 전달할 수 있다. 시스템 프 로세스의 리소스 컨트롤러와 커널의 리소스 컨트롤러는 제어 API(control API(application programming interface))를 호출하고, 제어 API를 통해 병목 현상의 원인이 되는 적어도 하나 의 리소스를 확보하기 위한 제어 동작을 수행할 수 있다. 예를 들어, 제어 API에 의해 CPU 주파수 증가, GPU 주 파수 증가, 백그라운드 프로세스의 리-스케줄링, 및/또는 메모리 가용량 확보와 같은 제어 동작이 수행될 수 있 다. 도 5는 일 실시예에 따른 병목 현상의 원인을 분석하기 위한 모델들의 블록도이다. 일 실시예에 따르면, 전자 장치(예: 도 3의 전자 장치)는 병목 데이터 세트에 기록된 리소스 데이터 에 기초하여, 병목 현상의 발생 시 원인이 되는 적어도 하나의 리소스를 결정할 수 있다. 상기 리소스를 결정하 는 동작은 병목 데이터 세트에서 각 병목 현상의 타입에 대해 기준 개수 이상의 데이터가 누적 기록된 경우에 수행되거나, 및/또는 실제 병목 현상이 발생한 경우에 수행될 수 있다. 전자 장치는 병목 데이터 세트에 대해 통계 분석 모델(예: 다중 회귀 분석 모델)에 기초하여, 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정할 수 있다. 일 실시예에 따르면, 전자 장치는 병목 데이터 세트에 기록된 각각의 리소스 데이터에 대해 선형성, 등분 산성, 정규성, 또는 독립성 중 적어도 하나를 검정하고, 상기 검정 결과를 통과한 리소스 데이터를 다중 회귀 분석 모델에 입력할 수 있다. 예를 들어, 전자 장치는 특정 병목 현상의 발생 시 기록된 리소스 데이터 들을 데이터 검정 모델에 입력하고, 데이터 검정 모델에서 검정 결과를 통과한 리소스 데이터들 을 다중 회귀 분석 모델에 입력할 수 있다. 데이터 검정 모델의 검증 과정은 다중 회귀 분석에 필요 한 가정을 검정하는 과정일 수 있으며, 검정 결과를 통과하지 통과한 데이터만을 다중 회귀 분석 모델의 독립 변수로 입력함에 따라 다중 회귀 분석 모델의 분석 결과의 신뢰도를 높일 수 있다. 도 5를 참조하면, 데이터 검정 모델은 선형성 검정 모델, 등분산성 검정 모델, 정규성 검정 모 듈, 및 독립성 검정 모델을 포함할 수 있다. 일 실시예에 따르면, 데이터 검정 모델은 도시된 선형성 검정 모델, 등분산성 검정 모델, 정규성 검정 모델, 및 독립성 검정 모델 중 일부만 포함 할 수 있으며, 또는 리소스 데이터에 대해 선형성 검정 모델, 등분산성 검정 모델, 정규성 검정 모델 , 및 독립성 검정 모델 중 일부에 대해서만 검정 과정을 수행할 수 있다. 일 실시예에 따르면, 선형성 검정 모델은 각각의 리소스 데이터가 선형성(linearity)을 갖는 지 여부를 검 정할 수 있다. 예를 들어, 선형성 검정 모델은 병목 현상 발생 시 지연에 대한 영향을 주는 각 리소스의 계수(coefficient)가 0이 아니라는 귀무 가설을 설정하고, 귀무 가설에 대한 t-statistics 및 p-value를 계산 할 수 있다. 선형성 검정 모델은 계산된 p-value가 유의 수준(예: 0.005)보다 작은 경우, 귀무 가설을 기 각하고 대립 가설을 채택할 수 있다. 즉, 계산된 p-value가 유의 수준보다 작은 경우, 귀무 가설에 대한 대립 가설인 병목 현상의 지연에 대한 특정 리소스의 영향이 있는 것으로 결정할 수 있다. 선형성 검정 모델은 상기 설명한 방법 이외에, Kolmogorov-Smirnov 검정, Shapiro-Wilk 검정과 같은 다양한 검정 통계 방식을 이용 할 수 있다. 일 실시예에 따르면, 등분산성 검정 모델은 각각의 리소스 데이터의 잔차가 등분산성을 갖는 지 검정할 수 있다. 여기서, 잔차(residual)는 회귀 분석에서 예측 값과 실제 관측 값의 차이를 의미하며, 잔차의 등분산성은 종속 변수(예: 병목 현상에 따른 지연 시간)와 독립 변수(예: 각 리소스 데이터)의 잔차들이 일정한 분산을 갖 는 것을 의미할 수 있다. 일 실시예에 따르면, 등분산성 검정 모델은 잔차의 등분산성 확인을 위해 Brown-Forsythe 검정 및/또는 Breusch-Pagan 검정을 이용할 수 있다. 예를 들어, Brown-Forsythe 검정을 이용하는 경우, 등분산성 검정 모델 은 회귀 분석을 통해 잔차를 구하는 과정, 잔차로부터 절대 편차(absolute deviation)를 계산하는 과정, 여러 그룹 별로 잔차들을 구분하여 각 그룹 내의 절대 편차들의 평균을 계산하는 과정, 그룹 간의 절대 편차들 의 평균을 이용하여 F-statistics 및 P-value를 계산하는 과정, 및 P-value를 유의 수준과 비교하는 과정을 수 행할 수 있다. 등분산성 검정 모델이 잔차의 등분산성을 검정하는 방법은 이에 한정되지 않으며, 다양한 통계적 분석 기법이 활용될 수 있다.일 실시예에 따르면, 정규성 검정 모델은 각각의 리소스 데이터의 확률 오차가 정규성을 갖는 지 확인할 수 있다. 여기서, 확률 오차(probable error)의 정규성(normality)은 어떠한 측정 값을 얻을 때 추정되는 기대 값과의 오차의 크기가 정규 분포를 따르는지의 여부를 의미할 수 있다. 일 실시예에 따르면, 정규성 검정 모델은 확률 오차의 정규성 확인을 위해 Shapiro-Wilk 검정, Anderson- Darling 검정, KS 검정, Normal 검정, 또는 Jarque-bera 검정 중 적어도 하나를 이용할 수 있다. 예를 들어, Shapiro-Wilk 검정을 이용하는 경우, 정규성 검정 모델은 병목 현상의 발생 시 기록된 각각의 리소스 데이 터로부터 확률 오차들을 계산하는 과정, 계산된 확률 오차들로부터 검정 통계랑 W 및 p-value를 구하는 과정, 및 p-value를 유의 수준과 비교하는 과정을 통해 확률 오차의 정규성을 검정할 수 있다. 정규성 검정 모델(52 6)이 확률 오차의 정규성을 검정하는 방법은 이에 한정되지 않으며, 다양한 통계적 분석 기법이 활용될 수 있다. 일 실시예에 따르면, 독립성 검정 모델은 각각의 리소스 데이터의 잔차가 독립성을 갖는 지 여부를 확인할 수 있다. 여기서, 잔차의 독립성은 회귀 분석에서 예측 값과 실제 관측 값의 차이인 잔차가 서로 독립성을 가지 는 지 여부에 대한 것으로, 각 리소스 데이터로부터 계산된 잔차들의 사이에 서로 상관관계가 없는 지 여부에 대한 검정을 포함할 수 있다. 일 실시예에 따르면, 독립성 검정 모델은 잔차의 독립성을 검정하기 위해 Durbin Watson 검정 또는 분산팽 창인수를 이용할 수 있다. 예를 들어, 독립성 검정 모델이 Durbin Watson 검정을 이용하는 경우, 회귀 분 석을 통해 잔차를 구하는 과정, 계산된 잔차들로부터 DW 검정 값을 구하는 과정, 및 DW 검정 값에 따라 잔차들 이 상관 관계를 갖는 지 여부를 검정하는 과정을 포함할 수 있다. DW 검정 값은 0 내지 4 사이의 DW 검정 값이 0에 가까우면 잔차들이 양의 자기 상관을 가질 수 있으며, 0에 가까우면 잔차들이 양의 자기 상관을 갖고, 4에 가까우면 음의 자기 상관을 가지며, 2에 가까우면(예: 1.5 내지 2.5 사이) 자기 상관 없이 독립적인 것으로 해 석할 수 있다. 또한, 분산팽창인수(variance inflation factor, VIF)는 각 독립 변수의 분산이 다른 독립 변수 들에 의해 어떻게 영향을 받는 지 나타내는 값일 수 있다. 독립성 검정 모델은 분산팽창인수 값을 계산하 고, 분산팽창인수 값이 기준 값(예: 10) 이상인 경우 다중공산성이 높고, 기준 값 미만인 경우 다중공산성이 낮 아 독립적인 것으로 해석할 수 있다. 독립성 검정 모델이 잔차의 독립성을 검정하는 방법은 이에 한정되지 않으며, 다양한 통계적 분석 기법이 활용될 수 있다. 일 실시예에 따르면, 전자 장치는 병목 데이터 세트에 기록된 리소스 데이터들 중 데이터 검정 모델의 검 정 결과를 통과한 리소스 데이터들을 다중 회귀 분석 모델의 독립 변수로 입력할 수 있다. 다중 회귀 분석 모델은 입력된 리소스 데이터들의 조합 중 종속 변수인 병목 현상으로 인한 지연에 대해 설명력이 가장 높 은 적어도 하나의 리소스를 포함하는 조합을 다중 회귀 분석을 통해 결정할 수 있다. 도 6은 일 실시예에 따른 리소스 데이트의 그래프를 나타낸 것이다. 도 6은 병목 데이터 세트에 기록된 리소스 데이터들 중 도 5의 데이터 검정 모델(예: 도 5의 데이터 검정 모델 )의 검정을 통과한 리소스 데이터들의 그래프를 도시하고 있다. 도 6의 그래프에서 x축은 각 리소스의 사 용량의 값이고, y축은 발생한 병목 현상으로 인한 지연 시간일 나타낼 수 있다. 일 실시예에 따르면, 전자 장치(예: 도 3의 전자 장치)는 병목 데이터 세트에 기록된 각각의 리소스 데이 터에 대해 선형성, 등분산성, 정규성, 또는 독립성 중 적어도 하나를 검정하고, 상기 검정 결과를 통과한 리소 스 데이터를 다중 회귀 분석 모델(예: 도 5의 다중 회귀 분석 모델)에 입력할 수 있다. 예를 들어, 전자 장치는 특정 병목 현상의 발생 시 병목 데이터 세트에 기록된 리소스 데이터들을 데이터 검정 모델에 입력하고, 데이터 검정 모델을 이용해 각각의 리소스 데이터에 대해 선형성, 등분산성, 정규성, 또는 독립성 중 적어도 하 나를 검정할 수 있다. 일 실시예에 따르면, 특정 타입의 병목 현상(예: 입력 지연)이 발생한 경우에 병목 데이터 세트에 기록된 다양 한 리소스 데이터들 중 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 및 메모 리 사용량이 데이터 검정 모델에 의한 검정 과정을 통과할 수 있다. 도 6의 그래프들을 참조하면, 각 리소스 데 이터에 대한 병목 현상의 지연 시간이 어느 정도 상관 관계가 있는 것으로 해석될 수 있다. 전자 장치는 이와 같이, 데이터 검정 모델의 선형성 검정 모델, 등분산성 검정 모델, 정규성 검정 모델, 또는 독립성 검정 모델 중 적어도 하나를 통과한 리소스 데이터들을 다중 회귀 분석 모델에 독립 변수로 입력할 수 있다. 도 7은 일 실시예에 따른 전자 장치의 병목 현상의 원인을 분석하는 방법의 흐름도이다. 도 7에 도시된 방법은 전자 장치(예: 도 3의 전자 장치)의 프로세서(예: 도 3의 프로세서)에 의해 수 행될 수 있으며, 예를 들어, 도시된 동작 중 적어도 일부는 도 4의 병목 모니터(bottleneck monitor), 리 소스 컨트롤러, 데이터 수집기(data collector), 또는 부스트 프레임워크(boost framework)에 의해 수행될 수 있다. 도시된 방법은 전자 장치(또는 전자 장치의 프로세서)에 의해 실행될 수 있는 인스트럭션 들(instructions)로 구현될 수 있다. 이러한 인스트럭션들은 컴퓨터로 판독 가능한 기록 매체(computer readable recording medium) 상에 저장될 수 있다. 일 실시예에 따르면, 동작 710에서, 전자 장치는 다중 회귀 분석 모델(예: 도 5의 다중 회귀 분석 모델)에 독립 변수로 리소스 데이터, 종속 변수로 병목 현상의 지연 정보를 입력할 수 있다. 일 실시예에 따르면, 전자 장치는 병목 데이터 세트에 기록된 각각의 리소스 데이터에 대해 데이터 검정 모델(예: 도 5의 데이터 검정 모 델)을 통한 선형성, 등분산성, 정규성, 또는 독립성 중 적어도 하나를 검정하고, 상기 검정 결과를 통과한 리소스 데이터(예: 도 6의 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 메모 리 사용량)를 다중 회귀 분석 모델에 독립 변수로 입력할 수 있다. 일 실시예에 따르면, 동작 720에서, 전자 장치는 각 리소스 정보의 조합에 대해 종속 변수인 병목 현상의 지연 정보에 대한 설명력을 계산할 수 있다. 여기서, 설명력은 종속 변수의 변동성을 독립 변수들이 얼마나 잘 설명 하는 지를 나타내는 지표로써, 결정 계수(또는 R-squared), 수정된 결정 계수(adjusted R-squared), AIC(Akaike information criterion), 또는 BIC(Bayesian information criterion)를 포함할 수 있다. 예를 들어, 결정 계수는 독립 변수의 영향에 따른 종속 변수의 변동 값을 종속 변수의 전체 변동 값으로 나눈 값으로 계산되고, 0 내지 1의 값을 가질 수 있으며, 독립 변수에 따른 종속 변수의 변동성이 높을수록 계산되는 값이 높을 수 있다. 수정된 결정 계수는 결정 계수를 구하는 식에 샘플 데이터의 수 및 독립 변수의 개수를 더 고려 하여 계산될 수 있다. AIC 및 BIC는 최대 우도 추정을 사용하여 모델의 적합도 및 복잡성을 계산하는 방식일 수 있다. 일 실시예에 따르면, 프로세서는 도 6에서 설명한 바와 같이, 5개의 리소스 데이터(예: 도 6의 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 메모리 사용량)가 데이터 검정 모델의 검정(예: 선형성 검정, 등분산성 검정, 정규성 검정, 독립성 검정)을 통과한 경우, 각각의 리소스 데이터를 통해 구할 수 있는 조합 31가지를 각각 독립 변수로 입력하여, 종속 변수인 병목 현상에 대한 설명력을 계산할 수 있다. 일 실시예에 따르면, 전자 장치는 독립 변수인 리소스 데이터 중 종속 변수에 대해 설명력이 가장 높은 어느 하 나를 선택하고, 선택된 하나를 포함하는 리소스 데이터의 조합 중 설명력이 가장 높은 조합을 병목 현상의 원인 이 되는 적어도 하나의 리소스로 결정할 수 있다. 예를 들어, 전자 장치는 5개의 리소스 데이터(예: CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 메모리 사용량)를 이용하여 병목 현 상의 원인을 결정하는 경우, 5개의 리소스 데이터 각각을 독립 변수로 입력하여 종속 변수인 병목 현상에 대한 설명력을 구하고, 그 중 설명력이 가장 높은 어느 하나의 리소스 데이터를 결정할 수 있다. 계산 결과 메모리 사용량이 설명력이 가장 높은 것으로 계산되는 경우, 전자 장치는 5개의 리소스 데이터의 조합 중 메모리 사용 량을 포함하는 조합 16가지를 각각 독립 변수로 입력하여 종속 변수인 병목 현상에 대한 설명력을 계산할 수 있 다. 일 실시예에 따르면, 동작 730에서, 전자 장치는 가장 높은 설명력을 갖는 리소스 데이터의 조합을 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정할 수 있다. 예를 들어, 메모리 사용량을 포함하는 16가지 조합 중 메 모리 사용량 및 백그라운드 프로세스의 개수를 독립 변수로 입력한 경우 설명력이 가장 높게 계산되었다면, 메 모리 사용량 및 백그라운드 프로세스를 병목 현상의 원인이 되는 리소스로 결정할 수 있다. 일 실시예에 따르면, 전자 장치는 병목 현상의 원인이 되는 적어도 하나의 리소스에 대해 리소스 확보 동작을 수행할 수 있다. 예를 들어, 전자 장치는 메모리 사용량을 확보하는 동작 및 적어도 하나의 백그라운드 프로세 스의 스케줄링을 지연 시키거나 종료 하는 동작을 수행할 수 있다. 일 실시예에 따르면, 전자 장치는 병목 데이터 세트에 기록된 데이터의 양이 기준 값 미만 상태에서 병목 현상 이 발생하는 경우, 상기 동작 710 내지 동작 730을 수행하지 않고, 미리 정해진 정책에 따라 각각의 리소스를 확보하는 동작을 실행할 수 있다. 예를 들어, 전자 장치는 특정 병목 현상에 따른 지연(예: 입력 지연, looper 지연, ANR 발생)이 발생하는 경우 해당 병목 현상이 발생 시 실행할 리소스 확보 동작(예: CPU 주파수 증가, GPU 주파수 증가, 백그라운드 프로세스의 스케줄링, 메모리 가용량 확보)을 미리 지정하고, 병목 현상이 발생하 는 경우 지정된 리소스 확보 동작을 수행할 수 있다.도 8은 일 실시예에 따른 전자 장치의 병목 현상의 원인을 분석하는 방법의 흐름도이다. 도 8에 도시된 방법은 전자 장치(예: 도 3의 전자 장치)의 프로세서(예: 도 3의 프로세서)에 의해 수 행될 수 있으며, 예를 들어, 도시된 동작 중 적어도 일부는 도 4의 병목 모니터(bottleneck monitor), 리 소스 컨트롤러, 데이터 수집기(data collector), 또는 부스트 프레임워크(boost framework)에 의해 수행될 수 있다. 도시된 방법은 전자 장치(또는 전자 장치의 프로세서)에 의해 실행될 수 있는 인스트럭션 들로 구현될 수 있다. 이러한 인스트럭션들은 컴퓨터로 판독 가능한 기록 매체(computer readable recording medium) 상에 저장될 수 있다. 일 실시예에 따르면, 전자 장치는 통계적으로 진입법(forward selection), 제거법(backward elimination), 전 진선택법(forward stepwise selection), 후진제거법(backward stepwise selection), 단계적 검정절차(stepwise selection) 중 적어도 하나를 이용해 종속 변수(예: 병목 현상)의 설명력을 최대로 하는 독립 변수(예: 리소스 데이터)의 조합을 결정할 수 있다. 도 8은 전진선택법을 이용하여 리소스 데이터의 조합을 선택하는 과정을 도 시하고 있다. 일 실시예에 따르면, 동작 810에서, 전자 장치는 각각의 리소스 데이터를 독립 변수로 설정하고, 발생한 병목 현상을 종속 변수로 설정할 수 있다. 예를 들어, 전자 장치는 입력 지연이 발생한 경우, 병목 데이터 세트에 기 록된 데이터 중 입력 지연 시 기록된 각각의 리소스 데이터를 획득하고, 획득된 리소스 데이터들을 독립 변수로 설정할 수 있다. 일 실시예에 따르면, 전자 장치는 획득된 리소스 데이터들 중 데이터 검정 모델(예: 도 5의 데 이터 검정 모델)의 검정 과정(예: 선형성 검정, 등분산성 검정, 정규성 검정, 독립성 검정)을 통과한 리소스 데 이터들을 선별하여 회귀 분석 모델에 독립 변수로 입력할 수 있다. 예를 들어, 도 6을 통해 설명한 바와 같이, 입력 지연 시 기록된 리소스 데이터 중 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 및 메모리 사용량이 데이터 검정 모델에 의한 검정 과정을 통과할 수 있다. 일 실시예에 따르면, 동작 815에서, 전자 장치는 각각의 독립 변수의 종속 변수에 대한 설명력을 계산할 수 있 다. 예를 들어, 동작 810에서 획득된 리소스 데이터인 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라 운드 프로세스의 개수, 및 메모리 사용량을 각각 독립 변수로 입력하여, 병목 현상에 대한 설명력을 계산할 수 있다. 일 실시예에 따르면, 전자 장치는 설명력을 나타내는 값으로써, 결정 계수(또는 R-squared), 수정된 결정 계수 (adjusted R-squared), AIC(Akaike information criterion), 또는 BIC(Bayesian information criterion) 중 적어도 하나를 이용할 수 있다. 예를 들어, 전자 장치는 설명력을 구하기 위해 데이터 검정 모델의 검정을 통과한 리소스 데이터인 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수, 및/또는 메모리 사용량에 대해 표 2와 같은 통계 데이터를 계산할 수 있다. 표 2 item(a) CPU frequency(b) GPU frequency(c) Job scheduler(d) background(e) Memory coef-0.0012 -0.0400 0.7406 45.3977 54.6740 std err0.297 0.207 0.248 13.361 8.589 t -2.912 -2.893 2.990 3.398 6.366 p 0.005 0.005 0.005 0.002 0.000 AIC 552.1 552.3 543.4 542.7 523.7 설명력을 나타내는 지표인 AIC는 그 값이 낮을수록 설명력이 높은 것을 의미하며, 상기 표 2에서 메모리 사용량 이 가장 낮은 AIC 값 523.7을 가지므로, 5개 리소스 데이터 중 메모리 사용량의 병목 현상에 대한 설명력이 가 장 높은 것으로 결정될 수 있다. 일 실시예에 따르면, 동작 820에서, 전자 장치는 동작 815의 계산 결과 가장 높은 설명력을 갖는 독립 변수를 model_list에 저장하고, 나머지 독립 변수를 candidate_list에 저장할 수 있다. 예를 들어, 위 표 2의 계산 결 과와 같이 5개의 리소스 데이터 중 메모리 사용량이 가장 높은 설명력을 가지므로, 메모리 사용량을 model_list 에 저장하고, 나머지 독립 변수인 CPU 주파수, GPU 주파수, 작업 스케줄러의 개수, 백그라운드 프로세스의 개수 를 candidate_list에 저장할 수 있다.일 실시예에 따르면, 동작 825에서, 전자 장치는 candidate_list의 길이(또는 저장된 독립 변수의 개수)가 0보 다 큰 지 확인할 수 있다. 전자 장치는 candidate_list의 길이가 0인 경우, 동작 870에서 현재 model_list에 저장된 독립 변수들을 병목 현상에 영향을 주는 리소스로 결정할 수 있다. 전자 장치는 candidate_list의 길이 가 0보다 큰 경우, 동작 830에서, 인덱스 i를 0으로 지정하고, max_explanatory(또는 최대 설명력)를 0으로 지 정할 수 있다. 일 실시예에 따르면, 동작 835에서, 전자 장치는 candidate_list의 i번째 독립 변수 및 model_list의 독립 변수 를 포함하는 조합의 설명력을 계산하여, current_explanatory(또는 현재 설명력)로 지정할 수 있다. 예를 들어, 현재 model_list에 메모리 사용량이 저장되어 있는 상태에서, i=0인 경우 메모리 사용량만을 독립 변수로 하여 설명력을 구하고, i=1인 경우, candidate_list의 1번째인 백그라운드 프로세스의 개수와 메모리 사용량을 독립 변수로 하여 설명력을 구할 수 있다. 일 실시예에 따르면, 동작 840에서, 전자 장치는 동작 835에서 계산된 current_explanatory가 max_explanatory 보다 큰 지 확인할 수 있다. 여기서, max_explanatory는 model_list에 적어도 하나의 리소스 데이터가 저장된 상태에서 candidate_list의 어느 하나의 리소스 데이터와 조합 시 계산되는 설명력 중 최대 값으로 정의될 수 있다. 예를 들어, 동작 830에서, max_explanatory가 0으로 지정된 후 동작 845를 첫번째 수행하는 경우, current_explanatory가 max_explanatory보다 크기 때문에 동작 845로 진행할 수 있다. 일 실시예에 따르면, 동작 845에서, 전자 장치는 max_explanatory를 current_explanatory로 지정하고, explanatory_variable을 candidate_list에서 i번째 독립 변수로 지정할 수 있다. 여기서, i번째 독립 변수는 candidate_list에 저장되는 독립 변수 중 동작 815에서 계산된 설명력의 순서대로 결정될 수 있다. 동작 840의 확인 결과, current_explanatory가 max_explanatory 이하인 경우에는 동작 845를 수행하지 않고, max_explanatory는 이전의 값이 유지될 수 있다. 일 실시예에 따르면, 동작 850에서, 전자 장치는 인덱스 i를 1 증가 시킬 수 있다. 동작 855에서, 전자 장치는 i가 candidate_list의 길이와 동일한 지 확인하고, 동일하지 않은 경우 다시 동작 835로 돌아가서 i가 candidate_list의 길이와 동일할 때까지 동작 835 내지 동작 850을 반복할 수 있다. i가 candidate_list의 길 이와 동일할 때까지 동작 835 내지 동작 850을 반복함에 따라, model_list에 저장된 적어도 하나의 독립 변수와 candidate_list에 저장된 독립 변수 각각의 조합 중 최대 설명력(max_explanatory)을 갖는 조합을 확인할 수 있 다. 예를 들어, model_list에 저장된 메모리 사용량과 candidate_list에 저장된 백그라운드 프로세스 개수를 조 합한 경우(i=1) AIC가 522.8, 메모리 사용량과 candidate_list의 작업 스케줄러 개수를 조합한 경우(i=2) AIC 가 525.0, 메모리 사용량과 candidate_list의 GPU 주파수를 조합한 경우(i=3) AIC가 525.7, 메모리 사용량과 candidate_list의 CPU 주파수를 조합한 경우(i=4) AIC가 525.7로 계산될 수 있다. 상기 계산 결과, 메모리 사 용량과 백그라운드 프로세스 개수를 조합한 경우에 가장 낮은 AIC가 계산되어 가장 높은 설명력을 갖는 것으로 계산되므로, max_explanatory에는 메모리 사용량과 백그라운드 프로세스 개수의 조합을 독립 변수로 입력 시 계 산된 AIC 522.8이 입력될 수 있다. 일 실시예에 따르면, 동작 855의 확인 결과, i가 candidate_list의 길이와 같은 경우, 즉 candidate_list의 모 든 리소스 데이터에 대해 model_list에 저장된 적어도 하나의 독립 변수와 조합하여 설명력을 계산한 경우, 동 작 860에서, 전자 장치는 max_explanatory가 best_explanatory 이하인지 확인할 수 있다. 여기서, best_explanatory는 현재까지 계산된 리소스 데이터들의 조합 중 가장 높은 설명력으로 정의될 수 있다. 즉, 동 작 860을 통해 model_list에 있는 독립 변수만을 이용한 경우, 및 model_list에 있는 독립 변수에 추가하여 candidate_list에 있는 어느 하나의 리소스를 조합하여 이용한 경우에 최대 설명력이 구해지는 조합을 확인할 수 있다. 일 실시예에 따르면, max_explanatory가 best_explanatory보다 큰 경우, 동작 865에서, 전자 장치는 best_explanatory를 현재의 max_explanatory로 지정하고, candidate_list에서 explanatory_variable을 제거하 고, 및 model_list에 explanatory_variable을 추가할 수 있다. 예를 들어, model_list에 메모리 사용량이 저장 된 상태에서 candidate_list의 각각의 리소스 데이터와 조합 후 설명력을 구한 결과, 메모리 사용량과 백그라운 드 프로세스 개수를 독립 변수로 한 경우에 설명력이 가장 높게 계산되는 경우, candidate_list에서 백그라운드 프로세스 개수를 제거하고 model_list에 추가할 수 있다. 전자 장치는 model_list에 메모리 사용량과 백그라운 드 프로세스 개수를 저장한 상태에서 동작 830 내지 동작 860을 다시 반복 수행할 수 있다. 일 실시예에 따르면, 동작 860의 확인 결과, max_explanatory가 best_explanatory 미만인 경우, 동작 870에서, 전자 장치는 model_list에 포함된 독립 변수들을 선택할 수 있다. 예를 들어, model_list에 메모리 사용량과 백 그라운드 프로세스 개수를 저장한 상태에서 메모리 사용량과 백그라운드 프로세스 개수 및 candidate_list의 각 각의 리소스 데이터를 조합한 후 계산되는 설명력의 최대 값(max_explanatory)(또는 AIC의 최소 값)이 메모리 사용량, 백그라운드 프로세스 개수 및 candidate_list의 작업 스케줄러 개수의 조합에서 계산되는 설명력(예: AIC = 523.4)인데, 이 값이 이전에 model_list에 저장된 메모리 사용량과 백그라운드 프로세스 개수만을 독립 변수로 입력하여 계산된 설명력(best_explanatory)(예: AIC = 522.8)보다 낮은 경우, 현재 model_list에 저장 된 메모리 사용량과 백그라운드 프로세스 개수를 최대 설명력이 구해지는 독립 변수의 조합으로 결정될 수 있다. 일 실시예에 따르면, 동작 870에서 선택되는 리소스 데이터의 조합을 병목 현상에 영향을 주는 적어도 하나의 리소스로 결정할 수 있다. 도 8에서는 전진선택법을 통해 설명력을 최대로 하는 독립 변수의 조합을 구하는 과정에 대해서 설명하였으나, 이에 한정되지 않으며, 진입법, 제거법, 후진제거법, 단계적 검정절차와 같은 다양한 통계 기법이 활용될 수 있 다. 도 9는 일 실시예에 따른 병목 현상의 원인 정보를 제공하는 그래픽 사용자 인터페이스를 도시한 것이다. 일 실시예에 따르면, 전자 장치(예: 도 3의 전자 장치)는 병목 현상이 발생하고, 병목 현상의 원인이 되는 리소스를 식별하여 리소스 확보 동작을 수행한 경우, 리소스 및 리소스 확보 동작를 지시하는 그래픽 사용자 인 터페이스를 제공할 수 있다. 도 9를 참조하면, 전자 장치는 병목 현상에 따른 입력 지연이 감지되는 경우, 입력 지연의 발생을 지시하는 그 래픽 사용자 인터페이스를 팝업 형태로 디스플레이(예: 도 3의 디스플레이) 상에 표시할 수 있다. 사 용자가 상세 확인 버튼을 선택하는 경우, 전자 장치는 어떠한 리소스에 의해 병목 현상이 발생하였고, 해 당 리소스에 대한 확보 조치를 했는지 여부를 지시하는 그래픽 사용자 인터페이스를 제공할 수 있다. 도 9를 참조하면, 입력 지연의 원인이 통계적 분석 결과 CPU 주파수 및 GPU 주파수로 확인되어 그에 대한 부스 팅 동작(예: CPU 주파수 증가, GPU 주파수 증가)을 수행한 경우, CPU 주파수의 부스팅 수행을 지시하는 아이템 및 GPU 주파수의 부스팅 수행을 지시하는 아이템을 그래픽 사용자 인터페이스 상에 표시할 수 있다. 이 경우, 리소스 확보 동작을 수행하지 않은 다른 리소스(예: 백그라운드 프로세스)를 지시하는 아이템 도 상기 아이템(922, 924)들과 같이 그래픽 사용자 인터페이스 상에 표시할 수 있다. 본 문서의 다양한 실시예에 따른 전자 장치는, 메모리, 및 상기 메모리와 작동적으로 연결되는 프로세서를 포함 할 수 있다. 일 실시예에 따르면, 상기 메모리는, 상기 프로세서에 의해 실행 시에, 전자 장치가, 전자 장치 상에서 발생하 는 병목 현상(bottleneck)을 감지하고, 상기 병목 현상이 감지되는 경우에 사용 중인 리소스들의 정보를 포함하 는 리소스 데이터를 수집하고, 상기 수집된 리소스 데이터를 상기 메모리에 저장되는 병목 데이터 세트에 기록 하고, 및 상기 메모리에 기록된 병목 데이터 세트에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리 소스를 결정하도록 하는 인스트럭션들을 포함할 수 있다. 일 실시예에 따르면, 상기 메모리에 저장되는 인스트럭션들은, 상기 병목 데이터 세트에 기록된 복수의 리소스 데이터를 이용한 다중 회귀 분석에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정하도 록 하는 인스트럭션들을 포함할 수 있다. 일 실시예에 따르면, 상기 메모리에 저장되는 인스트럭션들은, 상기 병목 현상이 감지되는 경우에 상기 병목 현 상으로 인해 발생한 지연의 타입 및 지연 시간을 상기 병목 데이터 세트에 기록하도록 하는 인스트럭션들을 포 함할 수 있다. 일 실시예에 따르면, 상기 메모리에 저장되는 인스트럭션들은, 상기 다중 회귀 분석 모델에 독립 변수로 상기 병목 데이터 세트에 기록된 복수의 리소스 데이터를 입력하고, 종속 변수로 상기 병목 현상으로 인해 발생한 지 연의 타입 및 지연 시간을 입력하도록 하는 인스트럭션들을 포함할 수 있다. 일 실시예에 따르면, 상기 메모리에 저장되는 인스트럭션들은, 상기 병목 데이터 세트에 기록된 각각의 리소스 데이터에 대해 선형성, 등분산성, 정규성, 또는 독립성 중 적어도 하나를 검정하고, 상기 검정 결과를 통과한 리소스 데이터를 상기 다중 회귀 분석 모델에 입력하도록 하는 인스트럭션들을 포함할 수 있다.일 실시예에 따르면, 상기 메모리에 저장되는 인스트럭션들은, 상기 리소스 데이터 중 적어도 하나를 포함하는 조합 중 설명력이 가장 높은 조합을 상기 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정하도록 하는 인 스트럭션들을 포함할 수 있다. 일 실시예에 따르면, 상기 메모리에 저장된 인스트럭션들은, 상기 리소스 데이터 중 설명력이 가장 높은 어느 하나를 선택하고, 상기 설명력이 가장 높은 어느 하나를 포함하는 리소스 데이터의 조합 중 설명력이 가장 높은 조합을 상기 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정하도록 하는 인스트럭션들을 포함할 수 있다. 일 실시예에 따르면, 상기 메모리에 저장된 인스트럭션들은, 상기 확인된 적어도 하나의 리소스를 확보하는 동 작을 실행하도록 하는 인스트럭션들을 포함할 수 잇다. 일 실시예에 따르면, 상기 메모리에 저장된 인스트럭션들은, 상기 병목 데이터 세트에 기록된 데이터의 양이 기 준 값 미만인 경우, 미리 정해진 정책에 따라 각각의 리소스를 확보하는 동작을 실행하도록 하는 인스트럭션들 을 포함할 수 있다. 다양한 실시예에 따른 전자 장치가 병목 현상의 원인을 확인하는 방법은, 전자 장치 상에서 발생하는 병목 현상 (bottleneck)을 감지하는 동작, 상기 병목 현상이 감지되는 경우에 사용 중인 리소스들의 정보를 포함하는 리소 스 데이터를 수집하는 동작, 상기 수집된 리소스 데이터를 병목 데이터 세트에 기록하는 동작, 및 상기 병목 데 이터 세트에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리소스를 결정하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 적어도 하나의 리소스를 결정하는 동작은, 상기 병목 데이터 세트에 기록된 복수의 리소스 데이터를 이용한 다중 회귀 분석에 기초하여, 상기 병목 현상의 원인이 되는 적어도 하나의 리소스를 결 정하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 수집된 리소스 데이터를 기록하는 동작은, 상기 병목 현상이 감지되는 경우에 상기 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간을 상기 병목 데이터 세트에 기록하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 방법은, 상기 다중 회귀 분석 모델에 독립 변수로 상기 병목 데이터 세트에 기록된 복수의 리소스 데이터를 입력하고, 종속 변수로 상기 병목 현상으로 인해 발생한 지연의 타입 및 지연 시간을 입력하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 방법은, 상기 병목 데이터 세트에 기록된 각각의 리소스 데이터에 대해 선형성, 등분 산성, 정규성, 또는 독립성 중 적어도 하나를 검정하고, 상기 검정 결과를 통과한 리소스 데이터를 상기 다중 회귀 분석 모델에 입력하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 방법은, 상기 리소스 데이터 중 적어도 하나를 포함하는 조합 중 설명력이 가장 높은 조합을 상기 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 방법은, 상기 리소스 데이터 중 설명력이 가장 높은 어느 하나를 선택하는 동작, 및 상기 설명력이 가장 높은 어느 하나를 포함하는 리소스 데이터의 조합 중 설명력이 가장 높은 조합을 상기 병목 현상의 원인이 되는 적어도 하나의 리소스로 결정하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 방법은, 상기 확인된 적어도 하나의 리소스를 확보하는 동작을 더 포함할 수 있다. 일 실시예에 따르면, 상기 방법은, 상기 병목 데이터 세트에 기록된 데이터의 양이 기준 값 미만인 경우, 미리 정해진 정책에 따라 각각의 리소스를 확보하는 동작을 더 포함할 수 있다. 일 실시예에 따르면, 상기 방법을 실행하기 위한 인스트럭션들은 컴퓨터로 판독 가능한 기록 매체에 의해 저장 될 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제3구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일 실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9"}
{"patent_id": "10-2023-0108491", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 일 실시예에 따른 프로그램의 블록도이다. 도 3은 일 실시예에 따른 전자 장치의 블록도이다. 도 4는 일 실시예에 따른 전자 장치에서 동작하는 소프트웨어 모듈의 블록도이다. 도 5는 일 실시예에 따른 병목 현상의 원인을 분석하기 위한 모델들의 블록도이다. 도 6은 일 실시예에 따른 리소스 데이트의 그래프를 나타낸 것이다. 도 7은 일 실시예에 따른 전자 장치의 병목 현상의 원인을 분석하는 방법의 흐름도이다. 도 8은 일 실시예에 따른 전자 장치의 병목 현상의 원인을 분석하는 방법의 흐름도이다. 도 9는 일 실시예에 따른 병목 현상의 원인 정보를 제공하는 그래픽 사용자 인터페이스를 도시한 것이다."}
