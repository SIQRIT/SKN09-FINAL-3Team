{"patent_id": "10-2023-0123805", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0072908", "출원번호": "10-2023-0123805", "발명의 명칭": "머신러닝 작업 기능을 포함하는 머신러닝 플랫폼 시스템", "출원인": "(주) 웨다", "발명자": "최치민"}}
{"patent_id": "10-2023-0123805", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컴퓨터로 구현되는 머신러닝 플랫폼 시스템에 있어서,메모리에 포함된 컴퓨터 판독가능한 명령들을 실행하도록 구성된 적어도 하나의 프로세서를 포함하고,상기 적어도 하나의 프로세서는,각 기능의 모듈이 DAG(Directed Acyclic Graph) 형태로 연결되어 구성된 소프트웨어 정의 환경(software-defined environment)에서 사용되는 머신러닝 모델을 유지관리 및 모니터링하는 MLOps(Machine LearningOperations) 기능을 제공하는 것을 특징으로 하는 머신러닝 플랫폼 시스템."}
{"patent_id": "10-2023-0123805", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 적어도 하나의 프로세서는,실제 환경에서 수집된 데이터를 기초로 상기 MLOps 기능을 통해 상기 머신러닝 모델을 자동으로 고도화하는 것을 특징으로 하는 머신러닝 플랫폼 시스템."}
{"patent_id": "10-2023-0123805", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,노코드 기반의 인공지능 생성 도구를 사용하여 상기 소프트웨어 정의 환경에 대한 실증 분석을 위한 머신러닝모델이 학습되고,상기 적어도 하나의 프로세서는,실제 환경에서 수집된 데이터를 업로드하거나 데이터베이스를 통해 입력하면 상기 데이터에 대한 특징을 분석하고,상기 데이터의 특징 분석 결과를 기초로 EDA(Exploratory Data Analysis)를 자동으로 수행함으로써 불필요한 인자 또는 아웃라이어(outlier)를 제거하거나 클래스의 불균형을 해소하기 위한 클래스 밸런스(Class balance) 기능을 제공하는 것을 특징으로 하는 머신러닝 플랫폼 시스템."}
{"patent_id": "10-2023-0123805", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 적어도 하나의 프로세서는,소프트웨어 정의를 통해 가상화된 공정 프로세스에 대해 MLOps를 생성하는 것으로,MLOps의 유형(type)을 선택하는 과정, MLOps의 스케쥴(Schedule)을 설정하는 과정, MLOps의 학습에서 사용할 데이터셋(dataset)을 선택하는 과정, 학습 모델을 선택하는 과정, 학습 결과를 모델 허브에 푸시(push)하는 과정,및 학습 모델을 배포(Deployment)하는 과정을 통해 MLOps를 생성하는 것을 특징으로 하는 머신러닝 플랫폼 시스템.공개특허 10-2024-0072908-3-청구항 5 제4항에 있어서,상기 MLOps의 스케쥴 유형은 특정 시간이나 주기 별로 MLOps를 동작하는 배치(batch) 형태와 데이터 허브에 데이터가 추가될 때 동작하는 트리거(Trigger) 형태를 포함하는 것을 특징으로 하는 머신러닝 플랫폼 시스템."}
{"patent_id": "10-2023-0123805", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 적어도 하나의 프로세서는,소프트웨어 정의를 통해 가상화된 공정 프로세스에 대해 MLOps를 생성하는 것으로,테이블(Table) 형태의 데이터를 이용하여 인공지능 모델을 생성하는 Tabular-ML 학습 기술을 통해 노코드(no-code) 기반으로 MLOps 생성을 위한 머신러닝 모델을 만드는 것을 특징으로 하는 머신러닝 플랫폼 시스템."}
{"patent_id": "10-2023-0123805", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 적어도 하나의 프로세서는,소프트웨어 정의를 통해 가상화된 공정 프로세스에 대해 MLOps를 생성하는 것으로,이미지나 비디오 형태의 데이터와 해당 데이터의 레이블링(labeling) 정보를 이용하여 인공지능 모델을 생성하는 Vision-ML 학습 기술을 통해 노코드 기반으로 MLOps 생성을 위한 머신러닝 모델을 만드는 것을 특징으로 하는 머신러닝 플랫폼 시스템."}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "머신러닝 작업 기능을 포함하는 머신러닝 플랫폼 시스템이 개시된다. 머신러닝 플랫폼 시스템은, 각 기능의 모듈 이 DAG(Directed Acyclic Graph) 형태로 연결되어 구성된 소프트웨어 정의 환경(software-defined environmen t)에서 사용되는 머신러닝 모델을 유지관리 및 모니터링하는 MLOps(Machine Learning Operations) 기능을 제공 할 수 있다."}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래의 설명은 머신러닝 모델을 고도화하는 기술에 관한 것이다."}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능(AI) 기술이 발전함에 따라 다양한 분야에 AI가 활용되며 AI의 성능에 절대적인 영향을 주는 학습용 데 이터의 생산 방법과 품질향상 방법에 대한 요구도 증가하고 있다. 인공지능 모델을 학습시키기 위해서는 학습을 위한 별도의 학습용 데이터를 만들어야 하는데, 이를 데이터 레이 블링(data labeling)이라 하며, 사람이 일일이 데이터를 확인하여 레이블을 설정해야 하기 때문에 라벨 설정 작 업에 많은 시간과 비용이 소요될 수밖에 없다. 또한, 학습성능 향상을 위해서는 어떤 데이터를 얼마나 학습시키는지가 매우 중요하기 때문에 무작정 데이터 레 이블링을 진행할 경우 투입한 시간과 비용 대비 만족스러운 학습성능을 기대하기 어렵다는 문제도 있다. 최근 머신러닝 모델의 정확도 내지 신뢰도를 향상시키기 위한 방향으로 연구 개발이 진행되고 있다. 예컨대, 영 상 내에 객체가 존재함에도 불구하고 존재하지 않는 것으로 판단하는 오류를 개선 내지 방지하는 기술, 영상 내 에 존재하는 객체를 객체가 아닌 배경으로 판단함으로써 발생 가능한 오류를 개선 내지 방지하는 기술, 또는 학 습의 지속적 수행으로 인해 기존에 학습된 결과가 유효하지 않게 되어 버리는 망각(catastrophic forgetting) 문제를 개선 내지 방지하는 기술 등이 등장하고 있다. 머신러닝 모델의 정확도 내지 신뢰도를 향상시키기 위한 기술의 일례로, 한국 공개특허공보 제10-2022- 0094796호(공개일 2022년 07월 06일)에는 머신러닝 모델들의 학습 성능을 향상시키기 위한 데이터 레이블링을"}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "처리하는 기술이 개시되어 있다.발명의 내용"}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "지속적으로 수집되는 데이터를 통해 소프트웨어 정의 기반 제조 환경 등 다양한 분야에서 사용되는 머신러닝 모 델을 자동으로 고도화하는 MLOps(Machine Learning Operations) 기능과 함께, 노코드 기반으로 머신러닝 모델을 만드는 서비스를 제공할 수 있다."}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "컴퓨터로 구현되는 머신러닝 플랫폼 시스템에 있어서, 메모리에 포함된 컴퓨터 판독가능한 명령들을 실행하도록 구성된 적어도 하나의 프로세서를 포함하고, 상기 적어도 하나의 프로세서는, 각 기능의 모듈이 DAG(Directed Acyclic Graph) 형태로 연결되어 구성된 소프트웨어 정의 환경(software-defined environment)에서 사용되는 머신러닝 모델을 유지관리 및 모니터링하는 MLOps(Machine Learning Operations) 기능을 제공하는 것을 특징으 로 하는 머신러닝 플랫폼 시스템을 제공한다. 일 측면에 따르면, 상기 적어도 하나의 프로세서는, 실제 환경에서 수집된 데이터를 기초로 상기 MLOps 기능을 통해 상기 머신러닝 모델을 자동으로 고도화할 수 있다. 다른 측면에 따르면, 노코드 기반의 인공지능 생성 도구를 사용하여 상기 소프트웨어 정의 환경에 대한 실증 분 석을 위한 머신러닝 모델이 학습되고, 상기 적어도 하나의 프로세서는, 실제 환경에서 수집된 데이터를 업로드 하거나 데이터베이스를 통해 입력하면 상기 데이터에 대한 특징을 분석하고, 상기 데이터의 특징 분석 결과를 기초로 EDA(Exploratory Data Analysis)를 자동으로 수행함으로써 불필요한 인자 또는 아웃라이어(outlier)를 제거하거나 클래스의 불균형을 해소하기 위한 클래스 밸런스(Class balance) 기능을 제공할 수 있다. 또 다른 측면에 따르면, 상기 적어도 하나의 프로세서는, 소프트웨어 정의를 통해 가상화된 공정 프로세스에 대 해 MLOps를 생성하는 것으로, MLOps의 유형(type)을 선택하는 과정, MLOps의 스케쥴(Schedule)을 설정하는 과정, MLOps의 학습에서 사용할 데이터셋(dataset)을 선택하는 과정, 학습 모델을 선택하는 과정, 학습 결과를 모델 허브에 푸시(push)하는 과정, 및 학습 모델을 배포(Deployment)하는 과정을 통해 MLOps를 생성할 수 있다. 또 다른 측면에 따르면, 상기 MLOps의 스케쥴 유형은 특정 시간이나 주기 별로 MLOps를 동작하는 배치(batch) 형태와 데이터 허브에 데이터가 추가될 때 동작하는 트리거(Trigger) 형태를 포함할 수 있다. 또 다른 측면에 따르면, 상기 적어도 하나의 프로세서는, 소프트웨어 정의를 통해 가상화된 공정 프로세스에 대 해 MLOps를 생성하는 것으로, 테이블(Table) 형태의 데이터를 이용하여 인공지능 모델을 생성하는 Tabular-ML 학습 기술을 통해 노코드(no-code) 기반으로 MLOps 생성을 위한 머신러닝 모델을 만들 수 있다. 또 다른 측면에 따르면, 상기 적어도 하나의 프로세서는, 소프트웨어 정의를 통해 가상화된 공정 프로세스에 대 해 MLOps를 생성하는 것으로, 이미지나 비디오 형태의 데이터와 해당 데이터의 레이블링(labeling) 정보를 이용 하여 인공지능 모델을 생성하는 Vision-ML 학습 기술을 통해 노코드 기반으로 MLOps 생성을 위한 머신러닝 모델 을 만들 수 있다."}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시예들에 따르면, 지속적으로 수집되는 데이터를 통해 머신러닝 모델을 자동으로 고도화하는 MLOps 기능을 제공함으로써 소프트웨어 정의 기반 제조 환경 등 다양한 분야에서 사용되는 머신러닝 모델을 효과적으 로 유지관리할 수 있다."}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 발명의 실시예를 첨부된 도면을 참조하여 상세하게 설명한다. 본 발명의 실시예들은 머신러닝 모델을 고도화하는 기술에 관한 것이다. 이하의 실시예에서는 소프트웨어 정의 제조 환경에서 사용되는 머신러닝 모델을 유지 관리하는 MLOps 서비스를 설명하고 있으나, 제조 환경에 한정되는 것은 아니며, 머신러닝 모델이 사용되는 모든 소프트웨어 정의 환경이 MLOps 서비스의 대상으로 적용될 수 있다. 본 실시예들은 인공지능이나 IT의 비전문가를 대상으로 소프트웨어 정의 기반 제조 환경을 구축하고 생산 프로 세스와 인공지능 모듈을 노코드(no-code) 방식으로 정의하는 방법을 포함할 수 있다. 본 명세서에서 구체적으로 개시되는 것들을 포함하는 실시예들은 인공지능, IT 전문가가 부족한 제조 기업을 대 상으로 비전문가가 생산 공정을 구성하고 노코드 기반으로 인공지능을 생성하고 서비스 가능한 소프트웨어 정의 제조 기반의 머신러닝 플랫폼을 제공할 수 있다. 특히, 본 실시예들은 지속적으로 수집되는 데이터를 통해 소프 트웨어 정의 기반 제조 환경에서 사용되는 머신러닝 모델을 자동으로 고도화하는 MLOps 기능과 함께, 노코드 기 반으로 머신러닝 모델을 만드는 서비스를 제공할 수 있다. 본 발명의 실시예들에 따른 머신러닝 플랫폼 시스템은 적어도 하나의 컴퓨터 장치에 의해 구현될 수 있으며, 본 발명의 실시예들에 따른 머신러닝 플랫폼 서비스 방법은 머신러닝 플랫폼 시스템에 포함되는 적어도 하나의 컴 퓨터 장치를 통해 수행될 수 있다. 이때, 컴퓨터 장치에는 본 발명의 일실시예에 따른 컴퓨터 프로그램이 설치 및 구동될 수 있고, 컴퓨터 장치는 구동된 컴퓨터 프로그램의 제어에 따라 본 발명의 실시예들에 따른 머신러닝 플랫폼 서비스 방법을 수행할 수 있다. 상술한 컴퓨터 프로그램은 컴퓨터 장치와 결합되어 머신러닝 플랫폼 서 비스 방법을 컴퓨터에 실행시키기 위해 컴퓨터 판독 가능한 기록매체에 저장될 수 있다. 도 1은 본 발명의 일실시예에 따른 컴퓨터 장치의 예를 도시한 블록도이다. 예를 들어, 본 발명의 실시예들에 따른 머신러닝 플랫폼 시스템은 도 1을 통해 도시된 컴퓨터 장치에 의해 구현될 수 있다. 도 1에 도시된 바와 같이 컴퓨터 장치는 본 발명의 실시예들에 따른 머신러닝 플랫폼 서비스 방법을 실행 하기 위한 구성요소로서, 메모리, 프로세서, 통신 인터페이스 그리고 입출력 인터페이스를 포함할 수 있다. 메모리는 컴퓨터에서 판독 가능한 기록매체로서, RAM(random access memory), ROM(read only memory) 및 디스크 드라이브와 같은 비소멸성 대용량 기록장치(permanent mass storage device)를 포함할 수 있다. 여기서 ROM과 디스크 드라이브와 같은 비소멸성 대용량 기록장치는 메모리와는 구분되는 별도의 영구 저장 장치로 서 컴퓨터 장치에 포함될 수도 있다. 또한, 메모리에는 운영체제와 적어도 하나의 프로그램 코드가 저장될 수 있다. 이러한 소프트웨어 구성요소들은 메모리와는 별도의 컴퓨터에서 판독 가능한 기록매체로 부터 메모리로 로딩될 수 있다. 이러한 별도의 컴퓨터에서 판독 가능한 기록매체는 플로피 드라이브, 디스 크, 테이프, DVD/CD-ROM 드라이브, 메모리 카드 등의 컴퓨터에서 판독 가능한 기록매체를 포함할 수 있다. 다른 실시예에서 소프트웨어 구성요소들은 컴퓨터에서 판독 가능한 기록매체가 아닌 통신 인터페이스를 통해 메 모리에 로딩될 수도 있다. 예를 들어, 소프트웨어 구성요소들은 네트워크를 통해 수신되는 파일들에 의해 설치되는 컴퓨터 프로그램에 기반하여 컴퓨터 장치의 메모리에 로딩될 수 있다. 프로세서는 기본적인 산술, 로직 및 입출력 연산을 수행함으로써, 컴퓨터 프로그램의 명령을 처리하도록 구성될 수 있다. 명령은 메모리 또는 통신 인터페이스에 의해 프로세서로 제공될 수 있다. 예를 들어, 프로세서는 메모리와 같은 기록 장치에 저장된 프로그램 코드에 따라 수신되는 명령을 실행하 도록 구성될 수 있다. 통신 인터페이스는 네트워크를 통해 컴퓨터 장치가 다른 장치와 서로 통신하기 위한 기능을 제 공할 수 있다. 일례로, 컴퓨터 장치의 프로세서가 메모리와 같은 기록 장치에 저장된 프로그램 코드에 따라 생성한 요청이나 명령, 데이터, 파일 등이 통신 인터페이스의 제어에 따라 네트워크를통해 다른 장치들로 전달될 수 있다. 역으로, 다른 장치로부터의 신호나 명령, 데이터, 파일 등이 네트워크 를 거쳐 컴퓨터 장치의 통신 인터페이스를 통해 컴퓨터 장치로 수신될 수 있다. 통신 인터 페이스를 통해 수신된 신호나 명령, 데이터 등은 프로세서나 메모리로 전달될 수 있고, 파일 등 은 컴퓨터 장치가 더 포함할 수 있는 저장 매체(상술한 영구 저장 장치)로 저장될 수 있다. 통신 방식은 제한되지 않으며, 네트워크가 포함할 수 있는 통신망(일례로, 이동통신망, 유선 인터넷, 무선 인터넷, 방송망)을 활용하는 통신 방식뿐만 아니라 기기들 간의 근거리 유선/무선 통신 역시 포함될 수 있다. 예를 들어, 네트워크는, PAN(personal area network), LAN(local area network), CAN(campus area network), MAN(metropolitan area network), WAN(wide area network), BBN(broadband network), 인터넷 등의 네트워크 중 하나 이상의 임의의 네트워크를 포함할 수 있다. 또한, 네트워크는 버스 네트워크, 스타 네트 워크, 링 네트워크, 메쉬 네트워크, 스타-버스 네트워크, 트리 또는 계층적(hierarchical) 네트워크 등을 포함 하는 네트워크 토폴로지 중 임의의 하나 이상을 포함할 수 있으나, 이에 제한되지 않는다. 입출력 인터페이스는 입출력 장치와의 인터페이스를 위한 수단일 수 있다. 예를 들어, 입력 장치는 마이크, 키보드, 카메라 또는 마우스 등의 장치를, 그리고 출력 장치는 디스플레이, 스피커와 같은 장치를 포함 할 수 있다. 다른 예로 입출력 인터페이스는 터치스크린과 같이 입력과 출력을 위한 기능이 하나로 통합된 장치와의 인터페이스를 위한 수단일 수도 있다. 입출력 장치는 컴퓨터 장치와 하나의 장치로 구성될 수도 있다. 또한, 다른 실시예들에서 컴퓨터 장치는 도 1의 구성요소들보다 더 적은 혹은 더 많은 구성요소들을 포함 할 수도 있다. 그러나, 대부분의 종래기술적 구성요소들을 명확하게 도시할 필요성은 없다. 예를 들어, 컴퓨터 장치는 상술한 입출력 장치 중 적어도 일부를 포함하도록 구현되거나 또는 트랜시버(transceiver), 카메라, 각종 센서, 데이터베이스 등과 같은 다른 구성요소들을 더 포함할 수도 있다. 이하에서는 머신러닝 작업 기능을 포함하는 소프트웨어 정의 제조 기반의 머신러닝 플랫폼 시스템의 구체적인 실시예를 설명하기로 한다. 제조 산업의 패러다임이 변화하는 시장에 빠른 대처가 가능하도록 변하고 있어, 이를 위해 소프트웨어 정의 제 조 환경이 필요하다. 소프트웨어 정의 제조는 제품을 생산하는 공정을 소프트웨어로 정의하여 가상화하고 운영 결과가 실제 생산 공정에 대응되어야 한다. 이를 위해 다양한 제조 데이터, 장치와 통신하고 현재 작업자의 노 하우에 의존되어 진행되는 작업의 전산화가 필요하다. 본 발명은 인공지능이나 IT 전문가가 부족한 제조 기업을 대상으로 비전문가가 생산 공정을 구성하고 노코드 기 반으로 인공지능을 생성하고 서비스 가능한 플랫폼을 제공할 수 있다. 본 발명의 AI 비전문가를 위한 소프트웨어 정의 제조 기반의 머신러닝 플랫폼 시스템은 소프트웨어 정의를 제조 에 적용할 수 있으며, 제조 생산 프로세스에서 작업자가 개입해야 하는 부분을 AI로 대체할 수 있다. 이를 위해 소프트웨어 정의 기반의 제조 환경을 구성하는 DAG 기반의 운영환경 구성 방법을 설명하고 실제 제조 환경에서 수집된 데이터를 통해 제품의 품질을 사전에 예측하는 실증 분석과 MLOps 서비스를 설명한다. 소프트웨어 정의 제조 환경 본 발명에 따른 소프트웨어 정의 제조 환경은 쿠버네티스(Kubernetes) 기반으로 각각의 모듈이 컨테이너로 동작 하며 장애 발생 시 안정성을 보장한다. 도 2는 본 발명의 일실시예에 있어서 소프트웨어 정의 제조 운영 환경 구성 예시를 도시한 것이다. 도 2는 본 발명에 따른 소프트웨어 정의 제조 환경을 구성하기 위한 운영 환경 구성을 나타내고 있다. DAG 형태 로 컨테이너 기반의 각각의 모듈을 연결하여 자유도 높은 운영 환경을 구성할 수 있다. 도면 오른편의 블록 패널 영역 내 블록들은 각각 하나의 소프트웨어이며 제조 환경을 제어, 통신하기 위한 기능 들로 구성되어 있다. 최초 데이터를 수신하는 EndPoint 블록을 시작으로 실시간 Camera 장치의 스트림 영상을 받고 처리하는 블록, 결과를 반환하는 Response 블록으로 연결된다. 시작과 끝 블록 사이는 여러 Action 블록들 이 위치할 수 있으며, MES(manufacturing execution system), OPC(OLE for process control), 그리고 IoT 장비 에서 실시간으로 생산 정보를 읽어 처리할 수 있다. 그 외에도 외부 데이터베이스에서 주기적으로 쿼리를 가져 오거나 특정 데이터를 기준으로 IF 분기를 태우는 등 입력되는 데이터에 따라 발생할 수 있는 다양한 이벤트에 대응 가능하다. 세 번째, Operation 블록은 인공지능 모델을 지원한다. 본 발명에 따른 플랫폼은 영상 기반의Vision 모델과 센서, 생산데이터 기반의 테이블 형식(Tabular) 모델을 지원한다. Operation 블록은 Action 블록과 조합하여 데이터를 입력 받고 학습된 인공지능의 예측 결과를 다음 블록으로 전송한다. 마지막 Output 블록은 생산 파이프라인의 결과를 별도의 장비에 REST(Representational State Transfer) API로 전송하거나 데이터베이스에 저장하는 기능을 한다. 이를 통해 사용자는 별도의 코드 없이 블록 의 배치만으로 실제 제조 공정에 대응되는 생산 공정을 구성하고 제어할 수 있다. 나아가, 본 발명에 따른 플랫폼은 인공지능 블록을 이용하여 생산 과정에서 기존 제조 현업이 노하우로 처리하 던 제어 요소와 품질 관리 요소를 학습하여 높은 작업 효율과 오차의 최소화를 기대할 수 있다. 본 발명 플랫폼에서는 운영 환경 앱인 Operation-Routine을 통하여 학습된 인공지능 모델을 운영하고 실시간 추 론 서비스를 사용하기 위한 환경을 제공한다. Operation-Routine의 세부 내용은 다음과 같다. Operation-Routine은 학습 모델을 이용하여 실시간 예측에 사용하기 위한 운영 환경을 제공하는 것으로, DAG 형 태의 인터페이스 화면을 제공하고, 마우스 휠을 이용하여 화면 확대/축소 및 마우스 왼쪽 버튼을 이용하여 화면 이동 기능을 제공한다. 도 2를 참조하면, Operation-Routine 인터페이스 화면은 기본적으로 운영 환경에 대한 동작/정지, 레이아웃의 업로드/다운로드 기능을 제공하는 Controller 필드를 포함할 수 있다. 그리고, Operation-Routine 인터페 이스 화면은 각 블록 간의 공통 키워드 및 공유 변수 공간을 나타내는 글로벌 변수(Global Variables) 영역 , 입력 및 출력 정의 및 동작 구성을 위한 독립된 기능 블록, 블록 모음 패널을 나타내는 Block Panel, 블록을 구성하고 연결하는 패널을 나타내는 Main Panel, 화면의 확대 및 축소, 화면 맞춤, 화 면 이동 등을 위한 Navigation Panel 등을 포함할 수 있다. Block Panel에는 Operation-Routine을 구성할 수 있는 다양한 블록들을 제공하고 있으며, 해당 블록 아이콘을 드래그앤드롭(Drag&Drop)으로 Main Panel에 작업 흐름을 구성할 수 있다. Main Panel 상의 블록 간의 연결은 블록의 왼쪽이나 오른쪽에 구성된 포트를 통하여 선을 연결하여 동작에 대한 흐름을 설정할 수 있다. 각 블록은 형태에 따라 연결할 수 있는 블록에 제한이 있다. Operation- Routine을 구성하는 블록은 선/후행 블록에 모두 연결 가능한 블록, 선/후행 블록에 모두 연결 불가한 블록, 설 정 및 Endpoint 구성에 따라 연결 가능한 블록으로 구분될 수 있다. Operation-Routine의 Controller 필드에서는 해당 작업 흐름의 저장, 실행, 정지, Import, Export의 기능 을 제공한다. Operation-Routine 구성 후 Controller 필드에서 실행 버튼을 통해 Operation-Routine을 실 행할 수 있고, 실행 후에는 정지 버튼을 통해 서비스를 정지할 수 있다. 실행 중에는 Controller 필드의 실행 버튼이 정지 버튼으로 변경되고, 저장을 제외한 나머지 버튼은 비활 성화된다. 예를 들어, 실행 중인 블록 간의 연결선은 점선으로 표시되고, 작업 흐름의 정지시에는 블록 간의 연 결이 실선으로 표시된다. 그리고, Controller 필드를 이용한 Import 또는 Export 기능을 통해서 생성된 Operation Routine 정보를 내보내거나 가져올 수 있다. Import의 경우 Operation Routine에서 Export 한 json 파일을 Import하고, Export 의 경우 Export 버튼을 클릭하면 Operation Routine 정보를 json 파일로 다운로드 받을 수 있다. 글로벌 변수는 Operation-Routine 블록들 간에 공유할 수 있는 변수들의 집합이다. 글로벌 변수 영역에 연 계된 설정 버튼을 클릭하여 추가 및 삭제할 수 있다. 글로벌 변수 영역에 포함된 각 변수의 값은 변수 설 정(Set Variable) 블록을 통하여 값을 입력할 수 있으며, 등록된 변수의 값은 각 블록의 Input 패널에서 활용할 수 있다. 글로벌 변수에 저장된 값은 Operation-Routine 안에서 하나의 작업 흐름이 시작부터 종료되는 시점까 지 무결성을 보장한다. 즉, 작업 흐름이 시작된 이후에 변경된 글로벌 변수는 이후의 작업 흐름에 반영된다. 글 로벌 변수는 데이터의 공유를 위한 변수로도 사용되지만, 모니터링 항목에서는 해당 운영 서비스의 데이터를 추 적하는 중요 키(KEY)로 사용될 수 있다. 추론 결과를 글로벌 변수로 등록된 변수 이름과 값을 통하여 조회할 수 있다. Operation-Routine의 모든 블록들은 각각의 입력 및 출력 형태를 가진다. 블록 내부에서 사용할 데이터는 입력에서 설정하고 블록에 실행된 결과값은 출력으로 표현된다. 소프트웨어 정의 제조 실증 분석 본 발명에 따른 머신러닝 플랫폼 시스템의 실효성을 검증하기 위해 자동차 방진 부품을 생산하는 기업의 생산 공정을 소프트웨어 정의 제조 기반으로 시뮬레이션하고 제품이 생산되기 전 사전에 품질을 예측하도록 구성할 수 있다. 사전 품질 예측 모델을 학습하기 위해 사용한 노코드 기반의 인공지능 생성 도구는 데이터셋, 특징 분석, 학습, 평가로 구성되어 있으며, 각각의 단계가 별도의 코드 없이 비전문가도 사용할 수 있도록 제공된다. 데이터셋 도 구는 데이터셋 구성을 위해 데이터를 가져오는 작업을 진행한다(Data Ingestion). 특징분석 도구는 데이터셋을 구성하는 데이터의 기술통계 결과, 차트 시각자료를 통해 학습에 필요한 데이터를 분석하는 작업을 진행 (Feature Engineering). 학습 도구는 분석 완료된 특징을 이용해 인공지능 모델을 생성하는 작업을 진행한다 (Training). 평가 도구는 학습된 인공지능 모델을 통해 임의의 예측결과를 실험해 모델의 정합성을 평가하는 작 업을 진행한다(Evaluation). 데이터를 업로드하거나 데이터베이스를 통해 입력하면 자동으로 데이터에 대한 특징을 분석한다. 데이터 전문가 가 수행하는 EDA(Exploratory Data Analysis)를 자동으로 진행해 불필요한 인자를 제거하도록 추천하거나 아웃 라이어(outlier)를 제거, 클래스의 불균형을 해소하는 Class balance 기능을 제공할 수 있다. 자동차 방진 부품의 생산 데이터는 생산 공정에서 약 150개의 인자를 포함하고 있으며 모델의 영향도 분석을 통 해 50개의 인자로 축소하여 노코드 기반의 인공지능 생성 도구를 통해 학습한다. 학습은 Xgboost, K-NN, LightGBM, HistgradientBoosting, LinearSupportVector 모델을 AutoML로 수행한다. 내 부적으로 AutoML은 Bayesian Optimization를이용해 최적화하며 각각의 트라이얼에서 10-fold 교차 검증(Cross Validation)을 수행할 수 있다. 표 1은 자동차 방진 부품 사전예측 모델 성능을 나타낸 것이다."}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "자동차 방진부품의 품질은 240~370 사이의 특성값을 예측하는 것으로 XGBoost가 RMSE 1.46으로 가장 높은 성능 을 보임을 알 수 있다. MLOps 서비스 MLOps는 머신러닝 지능화 기능으로서 머신러닝 모델을 프로덕션으로 전환하는 프로세스를 간소화하고 이를 유지 관리 및 모니터링하는데 주안점을 둔 머신러닝 엔지니어링의 핵심 기능에 해당된다. 본 발명에 따른 MLOps 서비 스는 소프트웨어 정의 환경에서 사용되는 머신러닝 모델을 유지관리 및 모니터링하는 기능을 제공하는 것으로, 유지관리 기능에는 운영 중인 모델을 무중단으로 교체하는 기능, 그리고 인공지능 모델 정합성의 지속적인 고도 화를 수행하는 기능이 포함될 수 있다. 본 발명 플랫폼에서는 허브 기능을 통하여 코드, 컨테이너 이미지, 데이터셋, 인공지능 모델 등을 관리하고 다 른 사용자와 공유할 수 있는 기능을 제공한다. 특히, 모델 허브는 Operation-Routine 서비스 및 MLOps 서비스와 유연한 연계를 통하여 배포/운영 환경을 제공할 수 있다. 본 발명 플랫폼에서는 가상화 된 공정 프로세스를 나타내는 분석 그룹 단위를 프로젝트로 관리할 수 있으며, 이 때 프로젝트는 분석 및 서비스의 단위인 앱과 통합 운영 환경 스케쥴링인 MLOps로 구성될 수 있다. MLOps 서비 스는 플랫폼에서 제공하는 서비스(Tabular-ML, Vision-ML, Operation Routine)로 구성될 수 있다. 사용자 요청에 따라 프로젝트에 포함된 MLOps 목록을 제공할 수 있다. MLOps의 일부 기능은 플랫폼에서 지원하 는 Tabular-ML 및 Vision-ML을 연동하여 사용 가능하다. 본 발명 플랫폼에서는 MLOps를 생성할 수 있고, 이때 Tabular-ML과 Vision-ML 중 하나의 학습 기술을 이용하여 MLOps 생성을 위한 머신러닝 모델을 노코드 기반으로 만들 수 있다. MLOps 생성 MLOps 생성은 총 6단계인 MLOps의 유형을 선택하는 단계, MLOps의 스케쥴을 설정하는 단계, MLOps의 학습에서 사용할 데이터셋을 선택하는 단계, 모델을 선택하여 학습하는 단계, 학습 결과를 푸시(push)하는 단계, 및 학습 모델을 배포하는 단계로 구성된다. 도 3을 참조하면, 첫번째 단계에서는 생성하고자 하는 MLOps의 유형을 선택할 수 있다. MLOps의 유형은 학습과 배포를 포함하고, 학습은 학습→모델 배포→서비스 배포(Operation) 순으로 진행되고, 배포는 신규 모델이 배포 되었을 때 서비스를 신규 모델로 배포하는 것이다. MLOps의 유형과 함께 데이터 유형(Tabular와 Vision 중 하나)을 선택할 수 있다. 그리고, MLOps 작업이 진행될 앱을 선택하고 MLOps 명(이름)을 설정할 수 있다. 도 4와 도 5는 MLOps 스케쥴 설정 단계를 설명하기 위한 예시 도면이다. 두번째 단계에서는 MLOps의 스케쥴을 설정할 수 있으며, 스케쥴 유형은 특정 시간/주기 별로 MLOps를 동작하는 batch와 데이터 허브에 데이터가 추가 되었을 때 동작하는 Trigger로 구별될 수 있다. 스케쥴 유형으로 batch 유형을 선택한 경우, 도 4에 도시한 바 와 같이 Schedule 표현을 Cron 형태로 schedule을 등록할 수 있다. 스케쥴 유형으로 Trigger 유형을 선택한 경 우, 도 5에 도시한 바와 같이 시작 시간과 종료시간에만 유효하도록 기간을 설정할 수 있고 트리거의 종류를 선 택할 수 있다. 그리고, 변화를 추적할 데이터 허브의 데이터셋을 선택하고 확인 주기(interval)을 설정할 수 있 다. 도 6을 참조하면, 세번째 단계에서는 MLOps의 학습에서 사용할 데이터셋을 선택할 수 있다. 데이터셋 유형으로 datahub 또는 database 중 하나를 선택할 수 있고, 데이터셋 유형을 datahub로 선택한 경우 사용할 데이터를 선 택할 수 있다. 도 7을 참조하면, 네번째 단계에서는 MLOps 생성을 위한 학습 모델을 선택할 수 있다. 데이터 유형이 Tabular인 경우 Tabular-ML 앱의 실험실을 선택한 후 선택된 실험 내 Trainer 목록에서 MLOps에서 학습할 모델을 선택할 수 있다. 데이터 유형이 Vision인 경우 Vision-ML 앱의 트레이너를 선택한 후 MLOps에서 학습할 모델을 선택할 수 있다. 도 8을 참조하면, 다섯번째 단계에서는 학습된 결과(Score)가 기존 모델보다 좋은 경우 해당 모델을 모델 허브 에 푸시할 수 있다. 사용자는 모델 푸시 여부를 선택할 수 있으며, 신규 생성된 AI 모델을 푸시할 Modelhub의 AI 모델 이름을 작성할 수 있다. 도 9를 참조하면, 마지막 단계에서는 Modelhub에 푸시된 AI 모델을 Operation-Routine에 배포할 수 있다. 사용 자는 모델 배포 여부를 선택할 수 있으며, 신규 생성된 AI 모델을 배포할 Operation을 선택할 수 있다. MLOps 실행(run) 도 10은 MLOps 대시보드 화면 예시를 도시한 것이다. MLOps 대시보드는 MLOps 목록을 포함할 수 있고, 이때 MLOps 목록에서 MLOps 별로 현재 프로젝트 내의 MLOps 상태 및 로그를 제공할 수 있다. MLOps 목록 화면의 On/Off 버튼을 통해 MLOps 작업의 스케쥴을 On/Off할 수 있다. MLOps 모니터링 도 10에 도시한 바와 같이, MLOps 대시보드에서 MLOps 별 간단한 작업 상태 및 로그를 제공할 수 있다. MLOps 목록에서 특정 MLOps 블록을 선택하는 경우 MLOps의 동작 히스토리와 상세 로그를 제공할 수 있다. MLOps 삭제 도 11에 도시한 바와 같이, MLOps 대시보드에서 특정 MLOps 블록에 대한 삭제 버튼을 입력하는 경우 해당 MLOps 를 제거할 수 있다. 본 실시예에서는 분석 완료된 특징을 이용해 인공지능 모델을 생성하는 작업을 진행할 수 있으며, 이때 구체적 인 모델 학습 과정(training)은 다음과 같다. Tabular-ML Tabular-ML은 테이블(Table) 형태로 정형화된 데이터를 분석하고 인공지능 모델을 생성할 수 있는 서비스이다. 파일, 데이터베이스, 데이터 허브 등을 통해 데이터를 등록하면 자동으로 데이터의 기술 통계, 차트를 통한 분 석을 수행할 수 있고, AutoML 기능을 통한 최적의 모델 탐색 기능을 제공할 수 있다. Tabular-ML은 노코드 방식 으로 누구나 데이터 전문가 수준의 인사이트를 창출할 수 있도록 지원한다.데이터의 특징 분석과 편집이 완료되면 해당 데이터로 모델을 학습할 수 있다. 본 발명 플랫폼에서는 학습가능 한 모델 목록과, 모델 별 학습 결과, 그리고, 학습 모델의 상세 설정을 확인할 수 있다. 도 12는 모델 학습 인터페이스 화면 예시를 도시한 것이다. 도 12를 참조하면, 모델 학습 인터페이스 화면에는 학습 가능한 모델 목록이 표시될 수 있다. 모델 목록 에는 모델 허브에 등록된 모델들이 표시되며, 각각의 모델은 버전으로 관리되어 구버전, 신버전의 모델을 사용자가 직접 선택해 학습할 수 있다. 모델 학습 인터페이스 화면에서는 Auto ML 버튼을 통해 자동으로 데이터 셋에 대한 최적의 모델과 최적의 Hyper Parameter를 탐색할 수 있다. 이 방법은 동시에 여러 모델의 학습과 테 스트를 진행하기 때문에 데이터의 크기에 따라 많은 시간이 소요될 수 있다. 모델 학습 인터페이스 화면에는 학 습 데이터의 전체적인 설정을 위한 설정 버튼이 포함될 수 있다. 학습 설정 화면을 통해 학습하려는 모델의 평 가 기준, 학습과 검증에 사용되는 데이터의 비율을 설정할 수 있다. 모델 학습 인터페이스 화면은 모델 학습의 결과와 히스토리가 표시되는 학습 결과 패널, 학습 결과 패널 에서 선택한 모델의 상세 정보가 표시되는 학습 결과 상세 영역 등이 포함될 수 있다. 모델 목록 에 포함된 특정 모델의 실행 버튼을 선택하거나 Hyper Parameter 설정 화면에서 실행 버튼을 선택하면 해 당 모델의 학습이 시작된다. 학습이 종료되면 사용자가 설정한, 혹은 목적 타입에 따라 기본적으로 설정 되어있 는 평가 기준에 따라 학습 결과가 순서대로 정렬된다. 정렬 목록에 포함된 각 학습 결과에 대해 분석 가능한 기 능의 목록을 제공할 수 있으며, 이때 분석 기능으로 설명 가능한(Explainable) AI 버튼, 학습 결과 분석 버튼, 하이퍼 파라미터 버튼, 로그 버튼, 배포 버튼, 학습 결과 삭제 버튼 등이 포함될 수 있다. 설명 가능한 AI Explainable AI 버튼이 입력되면 모델 기반 영향도(Feature Effect)(도 13) 및 인자 설명 분석 자료 (Prediction Explanation)(도 14)를 제공할 수 있다. 도 13에 도시한 바와 같이, 모델 기반 영향도 화면에는 모델을 학습할 때 모델이 주요하게 참고한 변수들과 각 영향도를 표시할 수 있으며, 특정 변수를 선택하면 영향도 차트가 출력될 수 있다. 영향도는 해당 컬럼이 학습 에 포함되지 않았다면 모델이 예측했을 값을 나타내는 의존도, 모델 학습 시 TEST SET에 포함된 실제 변수의 값 을 나타내는 실제 값, 학습 완료된 모델이 실제로 예측한 값을 나타내는 예측 값, 선택 변수의 분포를 나타내는 히스토그램으로 표현될 수 있다. 일반적으로 실제 값과 예측 값이 비례하거나 일치할수록 모델에 영향력이 크다. 실제 값과 예측 값이 가까울 때 의존도가 반비례하거나 차트 상 동떨어져 있다면 해당 변수가 모델에 주 는 영향도가 크다는 것을 의미한다. 도 14에 도시한 바와 같이, 인자 설명 분석 자료 화면에는 모델을 학습할 때 사용한 TEST SET의 예측 결과가 표 시될 수 있으며, 이때 리스트에서 하나의 예측 값을 선택하면 해당 예측에 기여한 컬럼들의 정보가 출력될 수 있다. 차트의 상단에 표시된 수치(예를 들어, 98.47490030930564)는 예측 값에 해당된다. 차트에 표시된 두 개 의 기준선(점선)은 각각 E[f(X)], 그리고 f(X)를 나타낸다. E[f(X)]는 예측의 기대 값으로 해당 예측의 예측 결 과로 기대했던 값을 의미한다. f(x)는 실제 예측 값으로, 차트를 보면 두 개의 기준선 사이에 여러 변수들이 +, -로 영향을 주고 있다. 인자 설명 분석 자료 화면은 기대한 예측 값과 실제 예측 값 사이에 각 변수들이 기여한 정도를 분석하는 기능을 제공한다. 예측 범위에 따라 (예측 값이 낮거나, 높거나) 서로 다른 변수 별 기여도를 확인할 수 있으며, 이를 통해 특정 변수 값의 크기에 따라 예측 결과가 높게 나올지, 낮게 나올지 등 예측 패턴 별 주요 인자와 기여도를 확인할 수 있다. 학습 결과 분석 학습 결과 분석 버튼이 입력되면 해당 모델의 학습 정보를 제공할 수 있다. 도 15를 참조하면, 학습 결과 분석 화면에는 학습/검증 셋으로 예측한 분류 결과가 표시되는 Bar Chart, 민감도/특이도로 구성된 학습 그래프가 표 시되는 ROC Curve(그래프의 기울기가 왼쪽 상단에 가까울수록 좋은 결과임), 정밀도(Precision)와 재현율 (Recall)로 구성된 학습 그래프가 표시되는 Precision Recall Curve(기울기가 오른쪽 상단에 가까울수록 좋은 결과임), TP, TN, FP, FN으로 구성된 표가 표시되는 Confusion Matrix, 모델이 학습할 때 가장 많은 영향을 준 컬럼 정보가 표시되는 Feature Importance 등이 포함될 수 있다. 이외에, 데이터의 분포와 데이터를 선형으로 표현하는 회귀선을 동시에 표현하는 그래프(Reg Plot), 예측한 값과 실제 정답 값을 비교한 차트(Distribution Plot) 등이 표시될 수 있으며, 모델의 학습 상태가 표시됨에 따라 Running, Fail, Complete으로 모델의 학습이 완료되었는지 확인할 수 있다. 또한, 모델의 Score가 표시될 수 있고, 기본적으로 Regression 목적의 경우 R2 스코어가, Classification 목적의 경우 Accuracy가 설정되어 있다. 사용자가 전체 설정으로 변경할 경우 해당값을 기준으로 정렬되며, 사용한 모델의 이름, 사용한 모델의 버전 등이 표시되고, 모델이 학습한 지표들이 함 께 평가되어 표시될 수 있다. 하이퍼 파라미터 하이퍼 파라미터 버튼이 입력되면 모델의 Hyper Parameter를 직접 설정할 수 있다. Hyper Parameter는 모델마다 가지고 있는 특정 설정 값들을 포함하고 있어 해당 모델에 대한 특징이나 공식 문서를 참고해 값을 수정할 수 있다. 로그, 배포, 학습 결과 삭제 로그 버튼이 입력되면 모델의 학습 로그를 제공할 수 있고, 배포 버튼이 입력되면 모델 허브에 해당 모델을 배 포할 수 있으며, 학습 결과 삭제 버튼이 입력되면 해당 학습 결과를 삭제할 수 있다. Vision-ML Vision-ML은 영상(이미지, 비디오) 데이터와 데이터 레이블링(labeling) 정보를 이용하여 AI 모델을 생성하고 학습, 검증할 수 있는 기능을 제공한다. 이때, Vision-ML은 AutoML, 초보자(Beginner), 전문가(Expert) Mode의 모델 생성 기능을 제공하며, 분류 (Classification), 검출(Detection), 세분화(Segmentation), 및 이상 탐지(Anomaly Detection)에 대한 모델 학 습 기능을 제공한다. Vision-ML 생성 Vision-ML의 Trainer 생성 단계에서는 먼저 학습 모드를 선택한다. 도 16을 참조하면, 학습 모드는 AI 모델의 구조와 하이퍼 파라미터를 자동으로 선택하는 AutoML 모드, AI의 모델을 속도/성능으로 구분하여 학습하는 초보 자 모드, AI 모델의 구조부터 하이퍼 파라미터까지 사용자가 선택하는 전문가 모드를 포함한다. AutoML 모드는 AI 모델의 구조를 알아서 선택하는 NAS(Network Architecture Search) 알고리즘과, 하이퍼 파라 미터를 자동으로 최적화하는 HPO(Hyper Parameter Optimizer) 알고리즘이 포함되어 있어 자동으로 학습 데이터 특성에 맞는 AI 모델을 생성할 수 있다. 도 17을 참조하면, AI 모델을 생성할 목적(Purpose Type)(Classification, Detection, Segmentation)을 선택할 수 있고, 연산에 한번에 들어갈 데이터의 크기 (Batch Size)(기본값: 1), 데이터셋의 모든 데이터가 학습된 횟수(Epoch)(기본값: 100), 학습의 사용할 GPU 메 모리의 양(GPU Rate)(기본값: 30%), 학습에 사용할 이미지를 회색조 이미지를 사용할지 여부(GrayScale)(True 또는 False)를 선택할 수 있다. 초보자 모드는 목적에 맞는 모델의 결과를 빠르게 확인하는 옵션(Fast), 학습 속도는 오래 걸리지만 높은 정확 도를 확인하는 옵션(High), 속도/정확도가 적절한 옵션(Normal)을 지원한다. 도 18을 참조하면, AI 모델을 생성 할 목적(Purpose Type)(Classification, Detection, Segmentation)과 학습 모드(Train Mode)(Fast, Normal, High 중 다중 선택 가능)를 선택할 수 있다. 그리고, 연산에 한번에 들어갈 데이터의 크기(Batch Size)(기본값: 1), 데이터셋의 모든 데이터가 학습된 횟수(Epoch)(기본값: 100), 학습의 사용할 GPU 메모리의 양(GPU Rate)(기 본값: 30%), 학습에 사용할 이미지를 회색조 이미지를 사용할지 여부(GrayScale)(True 또는 False)를 선택할 수 있다. 전문가 모드에서는 모델에 대한 상세한 설정 기능을 제공한다. 모델 허브에 업로드된 AI 모델을 불러오고 AI 모 델의 하이퍼 파라미터 등을 설정하여 사용하 수 있다. 이상 탐지 모델의 경우 전문가 모드에서만 생성이 가능하 다. 도 19를 참조하면, AI 모델을 생성할 목적(Purpose Type)(Classification, Detection, Segmentation), 모 델 허브에 업로드 되어 있는 AI 모델(Name), 모델 허브에 업로드 되어 있는 AI 모델의 버전(Version)을 선택할 수 있다. 그리고, AI 모델의 별명(Alias)을 설정할 수 있으며, 이때 별명은 Trainer 화면 상의 AI 모델의 이름 으로 표시될 수 있다. Model Info를 통해 모델 목록에서 선택한 모델의 이름, 버전, 별명을 보여줄 수 있다. 그 리고, AI 모델의 하이퍼 파라미터(HyperParam), AI 모델의 최적화기(Optimizer), AI 모델의 최적화기의 학습율 (LearningRate), 연산에 한번에 들어갈 데이터의 크기(Batch Size)(기본값: 1), 데이터셋의 모든 데이터가 학습 된 횟수(Epoch)(기본값: 100), 학습의 사용할 GPU 메모리의 양(GPU Rate)(기본값: 30%), 학습에 사용할 이미지 를 회색조 이미지를 사용할지 여부(GrayScale)(True 또는 False)를 선택 내지 설정할 수 있다. 또한, 학습이 일 정 구간 동일한 성능을 보이면 자동으로 학습을 종료할지 여부(earlyStopping)를 선택할 수 있고, 조기 종료 시 동일한 성능을 검사할 횟수(Patience)(예를 들어 10 회인 경우 epoch 10 번이 진행되는 동안 동일한 성능인 경 우 종료), 조기 종료 시 확인할 성능 지표(Monitor), GPU가 다수인 경우 학습에 사용할 GPU 인덱스(gpuIdx)를선택 내지 설정할 수 있다. 데이터셋 선택 단계에서는 AI 모델 학습에 대한 목적 및 모델의 파라미터들을 설정한 후 학습에 사용할 데이터 셋을 선택할 수 있다. 도 20을 참조하면, 서비스 정보 설정 영역을 통해 VDS에서 생성한 데이터셋을 선택할 수 있다. 데이터셋은 앞서 선택한 AI 모델 생성 목적에 따른 데이터를 조회할 수 있으며, 조회 결과 내에서 다중 선택이 가능하다. 그리고, 앞서 선택된 데이터셋의 클래스 정보를 확인할 수 있고(Class 설정), 그룹핑 기능을 통해 여러 클래스를 병합할 수 있다. 또한, 학습과 평가에 사용할 데이터셋의 비율을 지정할 수 있다(학습 비율 설정)(기본값: 학습 - 70%, 평가 - 30%). 다중으로 선택된 데이터셋에서 실제로는 동일한 클래스이지만 다른 클래스 명으로 지정된 경우 클래스 그룹핑 기능을 사용하여 하나의 클래스로 합칠 수 있다. 도 21을 참조하면, 병합을 원하는 클래스를 선택 클래스 목록 (Selected Class List)에서 선택한 뒤 그룹핑 태그(Grouping Tags) 버튼을 입력하여 그룹핑 태그 이름과 색상 으로 지정할 수 있다. 데이터셋 선택이 완료되면 현재 데이터셋의 클래스 당 데이터의 개수를 확인할 수 있으며, 이때 클래스의 수가 한쪽으로 편향된 경우 클래스 밸런스(class balance) 기능을 통해 클래스의 수를 동일하게 조정할 수 있다. 도 22를 참조하면, 클래스 밸런스 기능 사용 유무를 선택할 수 있고, 클래스 밸런스 기능 사용 시 클래스 밸런싱 과정에서 이미지 증식 알고리즘을 자동으로 선택하거나 필요한 기능만 선택하여 적용할 수 있다. 클래스 밸런스 기능까지 선택 완료한 뒤, Trainer의 타이틀 및 설명을 설정할 수 있으며, 해당 정보를 확인할 수 있다. 도 23을 참조하면, 학습 정보 확인 화면에서 Trainer의 명칭(Title)과 설명(Description)을 설정할 수 있다. 학습 정보 확인 화면에서는 이전 단계에서 설정된 정보인 학습 모드(Train Mode), AI 모델 목적(Purpose Type), 학습/검증에 사용한 데이터셋의 비율(Train Rate), 선택된 데이터셋 정보(데이터셋 List)와 클래스 정보 (Class List), 그리고 클래스 밸런싱에 사용된 전처리(Class Balancer) 등이 표시될 수 있다. 학습 목록(Training List) 도 24를 참조하면, 학습 목록 화면에서는 생성한 Trainer의 목록과 Trainer 별 상태 및 정보를 제공할 수 있고, 학습 종료된 AI 모델의 성능을 검증하기 위한 평가(Evaluation) 버튼, 생성한 AI 모델의 수와 정보 등을 제공할 수 있다. 학습 목록 화면에서 생성한 Trainer를 선택하면 해당 Trainer의 상세 정보나 학습을 할 수 있는 Trainer 개요 화면으로 전환된다. 도 25를 참조하면, Trainer 개요 화면에서는 생성한 Trainer의 정보 및 학습 진행 상황, 모델의 성능 결과 등 간단한 정보를 확인할 수 있다. Trainer 개요 화면에서는 학습에 사용하기 위해 선택한 데이터셋의 수를 포함하 는 트레이너, 학습 모델에 대한 타입 및 생성자, 생성 날짜를 포함하는 트레이너 정보, 선택한 학습 모델의 이 름, 버전, 별명을 포함하는 학습 모델 정보, 생성한 AI 모델의 전체 및 AI 모델 별 학습 진행 상황을 나타내는 학습 진행률, 학습 결과 & 추천 모델, AI 모델 학습에 사용한 전체 데이터셋의 비율 및 데이터셋 별 클래스의 비율 포함하는 전체 Class 정보 등을 보여줄 수 있다. 도 26을 참조하면, 학습 정보 화면에서 학습의 전체 학습 버튼을 클릭하거나 각각 개별로 학습 버튼을 클릭하여 학습을 진행할 수 있다. AI 모델 학습 정상 진행 시 학습 상태 및 진행률의 값이 Training으로 변하며, 에러 발 생 시 Error로 표시된다. 학습 정보 화면에서는 AI 모델 학습 진행 중 발생하는 로그를 확인할 수 있고, AI 모 델 학습 결과를 나타내는 학습 진행 그래프를 확인할 수 있다. 학습 진행 그래프에서 정확도(Accuracy)는 우상 향 할수록, 손실(Loss)은 우하향 할수록 좋은 모델로 해석될 수 있다. 학습 정보 화면에서는 Trainer 생성 시 생성한 AI 모델을 복제하여 여러 파라미터 등을 수정한 뒤 학습할 수 있 는 복제(Replication) 기능을 제공할 수 있다. AI 모델 목록에서 copy train 버튼을 선택하여 AI 모델을 복제할 수 있다. 이때 복제한 AI 모델은 모델의 네트워크 구조는 동일하고 AI 모델의 파라미터를 수정하여 추가 생성할 수 있다. 학습이 완료된 AI 모델을 사용자 요청에 따라 모델 허브로 배포할 수 있다. 모델의 버전은 자동으로 채번되며, 사용자는 모델 허브에 배포할 모델의 명칭만 작성하여 배포할 수 있다. 데이터셋 정보 화면에서는 AI 모델 학습 에 사용된 데이터셋의 상세 내용과 AI 모델의 상세 내용을 확인할 수 있다. 그리고, Vision-ML은 학습이 종료된 AI 모델에 한하여 업로드 한 데이터셋을 기반으로 AI 모델이 잘 학습되었는 지 확인할 수 있는 평가 기능을 제공한다. 도 27을 참조하면, 학습 종료된 Trainer, Trainer에 추가한 AI 모델 중 평가를 진행할 AI 모델, 검증할 서비스와 데이터셋을 선택하여 평가를 요청할 수 있다. 검증할 Trainer와 데이터셋을 선택하면, 데이터셋에 업로드 했던 데이터를 확인할 수 있고, Predict 버튼을 이용한 사용자의 예측 요청에 따라 평가를 위한 예측이 시작된다. AI 모델 생성 목적이 분류인 경우 예측 결과와 AI 모델이 클래스를 예측할 때 이미지에서 어떠한 특징을 주로 보고 클래스를 예측했는지에 대한 CAM(Class Activate Model)을 제공 할 수 있다. 검출과 세분화의 경우, 예측 위치가 사각형 혹은 다각형으로 표시될 수 있고, 이때 이미 레이블링 이 되어 있는 경우 레이블링된 정답과 예측 결과가 동시에 표시되는 한편, 레이블링이 되어있지 않는 경우 예측 결과만 표시될 수 있다. AI 모델의 성능이 확인되면 모델 허브에 모델을 배포하거나 추가로 데이터를 더 수집하 여 레이블링 진행 후 재학습이 가능하다. 본 실시예에서는 소프트웨어 정의 제조 기반의 머신러닝 플랫폼을 제공할 수 있다. 소프트웨어 정의 제조 환경 구축을 위해 제조 공정을 시뮬레이션 하는 DAG 기반의 자유도 높은 운영환경 구성 기술을 제공하고 인공지능 모 델 블록을 넣어 실제 생산 공정에서 작업자의 노하우에 의존하는 장치의 설정과 품질관리 등을 인공지능 기술로 학습하고 처리할 수 있도록 구성한다. 또한, 본 발명에 따른 플랫폼의 실효성을 검증하기 위해 자동차 방진 부 품을 생산하는 공정의 실제 데이터를 이용해 공정의 구성과 인공지능 모델을 통한 사전 품질 예측에 대한 분석 을 진행한다. 그 결과 공정에서 수집되는 정보를 통해 제품을 생산하기 전 사전에 예측한 품질이 실제 품질과 3% 미만의 차이를 보이는 성과를 확인한 바 있다. 본 실시예에 따르면, 첫째 제조 환경의 생산 공정을 소프트웨어 정의 기반으로 구축 가능한 플랫폼을 통해 고객 의 니즈에 기민한 생산과 품질을 보장하기 위해 공정을 가상화 하고 가상화 된 공정의 프로세스가 실제 공정과 통신하고 제어 가능하도록 구성할 수 있다. 둘째, 기존 작업자의 노하우를 인공지능으로 이관할 수 있는 소프트 웨어 정의 제조 환경을 구축함으로써 빠르게 변화하는 제조 시장에서 높은 효율과 낮은 비용을 보장할 수 있다. 더욱이, 본 발명의 실시예들에 따르면, 지속적으로 수집되는 데이터를 통해 머신러닝 모델을 자동으로 고도화하 는 MLOps 기능을 제공함으로써 소프트웨어 정의 기반 제조 환경에서 사용되는 머신러닝 모델을 효과적으로 유지 관리할 수 있다. 이상에서 설명된 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치 및 구성요소는, 프로세서, 콘트롤 러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 하나 이상 의 소프트웨어 어플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접 근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명"}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처 리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 컴퓨터 저장 매체 또는 장치에 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되 어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 하나 이상의 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 이때, 매체는 컴퓨터로 실행 가능한 프로그램을 계속 저장하거나, 실행 또는 다운로드를 위해 임시 저장하는 것일 수도 있다. 또한, 매체는 단일 또는 수 개의 하드웨어가 결합된 형태의 다 양한 기록수단 또는 저장수단일 수 있는데, 어떤 컴퓨터 시스템에 직접 접속되는 매체에 한정되지 않고, 네트워 크 상에 분산 존재하는 것일 수도 있다. 매체의 예시로는, 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD-ROM 및 DVD와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체 (magneto-optical medium), 및 ROM, RAM, 플래시 메모리 등을 포함하여 프로그램 명령어가 저장되도록 구성된 것이 있을 수 있다. 또한, 다른 매체의 예시로, 어플리케이션을 유통하는 앱 스토어나 기타 다양한 소프트웨어를 공급 내지 유통하는 사이트, 서버 등에서 관리하는 기록매체 내지 저장매체도 들 수 있다."}
{"patent_id": "10-2023-0123805", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다."}
{"patent_id": "10-2023-0123805", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일실시예에 있어서 컴퓨터 장치의 내부 구성의 일례를 설명하기 위한 블록도이다. 도 2는 본 발명의 일실시예에 있어서 소프트웨어 정의 제조 운영 환경 구성 예시를 도시한 것이다. 도 3 내지 도 11은 본 발명의 일실시예에 있어서 머신러닝 모델을 자동으로 고도화하는 MLOps 서비스를 설명하 기 위한 예시 도면이다. 도 12 내지 도 15는 본 발명의 일실시예에 있어서 AI 모델을 생성하는 Tabular-ML 기능을 설명하기 위한 예시도면이다. 도 16 내지 도 27은 본 발명의 일실시예에 있어서 AI 모델을 생성하는 Vision-ML 기능을 설명하기 위한 예시 도 면이다."}
