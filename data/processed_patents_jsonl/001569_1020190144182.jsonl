{"patent_id": "10-2019-0144182", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0057431", "출원번호": "10-2019-0144182", "발명의 명칭": "인공지능 장치의 소프트웨어 디버깅 방법 및 장치", "출원인": "한국전자기술연구원", "발명자": "황태호"}}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "인공지능을 동작시키기 위한 준비 및 관리를 담당하는 관리 루틴을 작성하고 생성하는 호스트 툴체인과,상기 관리 루틴을 에뮬레이션하는 호스트 에뮬레이터와,인공지능이 동작되는 신경망 가속기의 주요 동작을 모사하는 신경망 가속기 시뮬레이터와,실제의 인공지능 장치와 연결하는 연계 에뮬레이터를 포함하는 인공지능 장치 통합 개발 환경."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 호스트 툴체인은,원시 코드를 컴파일하여 목적 코드를 생성하고, 생성된 목적 코드와 툴체인에 포함된 라이브러리 일부를 링킹하여 관리 루틴이 신경망 가속기가 포함된 인공지능 장치에서 동작할 수 있는 형태의 실행 파일을 생성하는 것인인공지능 장치 통합 개발 환경."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 호스트 에뮬레이터는,인공지능 소프트웨어를 에뮬레이션 하는 호스트 코어 에뮬레이터와,상기 신경망 가속기 시뮬레이터와의 인터페이스를 위한 신경망 인터페이스를 포함하는 것인 인공지능 장치 통합개발 환경."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 신경망 가속기 시뮬레이터는,상기 신경망 가속기의 동작을 모두 모사하는 가속기 시뮬레이터 및 명령어의 실행 과정에 따른 상기 신경망 가속기의 주요 상태만을 모사하는 가속기 에뮬레이터 중 하나인 것인 인공지능 장치 통합 개발 환경."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서, 상기 연계 에뮬레이터는,호스트 프로세서에서 실행되는 관리 루틴의 명령어들과 신경망 가속기에서 실행되는 인공지능 루틴 명령어들을단일 개발 환경에서 디버깅되도록 하는 것인 인공지능 장치 통합 개발 환경."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 연계 에뮬레이터는,공개특허 10-2021-0057431-3-JTAG 표준을 따르는 것인 인공지능 장치 통합 개발 환경."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서, 상기 연계 에뮬레이터는,호스트 프로세서 및 신경망 가속기에 대한 디버깅 명령어를 조합한 후, 상기 인공지능 장치로 명령어를 전송하며, 인공지능 장치로부터 상기 호스트 프로세서 및 상기 신경망 가속기의 사이클 진행 및 상태를 취합한 결과를수신하는 것인 인공지능 장치 통합 개발 환경."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 연계 에뮬레이터는,상기 호스트 에뮬레이터 및 상기 신경망 가속기 시뮬레이터의 상태를 상기 디버깅 명령어 사이클 수만큼 천이시키며, 해당 명령어의 결과를 반영시키고, 상기 호스트 에뮬레이터 및 상기 신경망 가속기 시뮬레이터 천이 상태와 상기 취합한 결과를 토대로 상기 인공지능 장치의 내부 상태를 확인하는 것인 인공지능 장치 통합 개발환경."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "인공지능 장치의 디버깅 방법으로서, 디버깅 명령어를 조합하는 단계와, 인공지능 장치로 상기 디버깅 명령어를 전송하는 단계와,신경망 가속기 시뮬레이터의 상태를 명령어 사이클 수만큼 천이시키는 단계와,상기 인공지능 장치로부터 상기 디버깅 명령어에 대한 실행 결과를 수신하는 단계와,신경망 가속기 시뮬레이터의 천이 상태 및 결과와, 상기 실행 결과를 확인하고, 이들을 고려하여 상기 인공지능장치의 내부 상태를 확인하는 단계를 포함하는 인공지능 장치의 디버깅 방법."}
{"patent_id": "10-2019-0144182", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서, 상기 디버깅 명령어를 조합하는 단계는,신경망 가속기 시뮬레이터 및 호스트 코어 에뮬레이터에 대한 디버깅 명령어를 조합하는 것이고,상기 천이시키는 단계는 상기 호스트 코어 에뮬레이터의 상태를 천이시키는 단계를 더 포함하는 것이고,상기 내부 상태를 확인하는 단계는, 상기 호스트 코어 에뮬레이터의 상태 및 명령어 실행 결과를 더 고려하여상기 인공지능 장치의 내부 상태를 확인하는 것인 인공지능 장치의 디버깅 방법."}
{"patent_id": "10-2019-0144182", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은, 인공지능을 동작시키기 위한 준비 및 관리를 담당하는 관리 루틴을 작성하고 생성하는 호스트 툴체인 과, 상기 관리 루틴을 에뮬레이션하는 호스트 에뮬레이터와, 인공지능이 동작되는 신경망 가속기의 주요 동작을 모사하는 신경망 가속기 시뮬레이터와, 실제의 인공지능 장치와 연결하는 연계 에뮬레이터를 포함하는 인공지능 장치 통합 개발 환경을 제공한다."}
{"patent_id": "10-2019-0144182", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 인공지능 장치의 소프트웨어 개발 방법 및 장치에 관한 것으로서, 구체적으로는 인공지능을 처리하는 신경망 가속기의 디버깅 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2019-0144182", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능이 탑재된 장치에서 동작하는 소프트웨어는, 인공적으로 지능을 구현한 부분(루틴 또는 모듈; 이하, 인 공지능 루틴으로 약칭)과 이를 동작시키기 위한 준비 및 관리를 위한 부분(이하, 관리 루틴으로 약칭)으로 나누 어지며, 인공지능 장치의 동작속도를 향상시키기 위해 이들은 각각 독립된 프로세서에서 구동된다. 따라서, 인 공지능 루틴과 관리 루틴은 자신이 실행되는 프로세서의 아키텍처에 맞게 개발되어야 하며, 통상적으로는 GPU상 의 범용 계산방법으로 대표되는 이기종 컴퓨팅 기술에서의 소프트웨어 개발방법론을 차용하고 있다. 한편, 단순한 사칙 연산을 수행하는 대량의 연산기를 동시에 이용하여 대량의 데이터에 대한 계산을 처리하는 인공지능 구현 부분의 특성상, 인공지능의 실행을 위해 신경망 가속기에 보내진 연산 명령어는 가속기에 보내진 이후 중단할 수 없으며, 명령어의 처리가 완료될 때까지 가속기의 내부 상태에 대한 확인이 불가능하다. 그런데, 이러한 면은 단순한 연산기를 대량으로 결합하는 과정에서 각 연산기의 제어 로직을 제거함으로서 종래 의 프로세서 아키텍처에서는 불가능한 수준의 연산 능력을 확보하고, 이럼으로써 인공신경망 계산을 획기적으로 가속할 수 있는 신경망 가속기만의 고유한 장점과는 절대적으로 대치된다. 정리하면, 종래의 이기종 컴퓨팅 기술용 소프트웨어 개발 방법으로는 인공지능 장치용 소프트웨어 개발 과정에 서 인공지능 루틴에 대한 연산 중간 과정과 연산 중 신경망 가속기의 내부 상태를 확인할 수 없으며, 이는 인공 지능 소프트웨어의 디버깅 및 개발을 어렵게 하는 원인이 된다."}
{"patent_id": "10-2019-0144182", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "전술한 문제점을 해결하기 위하여, 본 발명은 인공신경망 가속기 장치에 대한 소프트웨어 개발 및 디버깅 방법 과 이를 수행하는 장치, 및 통합 개발 환경을 제시하는 것을 목적으로 한다. 또한, 인공신경망 가속기 장치의 명령어 제어 방법을 제시고자 한다."}
{"patent_id": "10-2019-0144182", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "전술한 과제를 이루기 위하여, 본 발명의 바람직한 일 실시예에 따른 인공지능 장치 통합 개발 환경은, 인공지 능을 동작시키기 위한 준비 및 관리를 담당하는 관리 루틴을 작성하고 생성하는 호스트 툴체인과, 상기 관리 루 틴을 에뮬레이션하는 호스트 에뮬레이터와, 인공지능이 동작되는 신경망 가속기의 주요 동작을 모사하는 신경망 가속기 시뮬레이터와, 실제의 인공지능 장치와 연결하는 연계 에뮬레이터를 포함한다. 호스트 툴체인은, 원시 코드를 컴파일하여 목적 코드를 생성하고, 생성된 목적 코드와 툴체인에 포함된 라이브 러리 일부를 링킹하여 관리 루틴이 신경망 가속기가 포함된 인공지능 장치에서 동작할 수 있는 형태의 실행 파 일을 생성하는 것이고, 상기 호스트 에뮬레이터는, 인공지능 소프트웨어를 에뮬레이션 하는 호스트 코어 에뮬레 이터와, 상기 신경망 가속기 시뮬레이터와의 인터페이스를 위한 신경망 인터페이스를 포함하는 것이다. 신경망 가속기 시뮬레이터는, 상기 신경망 가속기의 동작을 모두 모사하는 가속기 시뮬레이터 및 명령어의 실행 과정에 따른 상기 신경망 가속기의 주요 상태만을 모사하는 가속기 에뮬레이터 중 하나일 수 있다. 연계 에뮬레이터는, 호스트 프로세서에서 실행되는 관리 루틴의 명령어들과 신경망 가속기에서 실행되는 인공지 능 루틴 명령어들을 단일 개발 환경에서 디버깅되도록 하는 것인데, JTAG 표준을 따르는 것일 수 있다. 연계 에뮬레이터는, 호스트 프로세서 및 신경망 가속기에 대한 디버깅 명령어를 조합한 후, 상기 인공지능 장치 로 명령어를 전송하며, 인공지능 장치로부터 상기 호스트 프로세서 및 상기 신경망 가속기의 사이클 진행 및 상 태를 취합한 결과를 수신하고, 상기 호스트 에뮬레이터 및 상기 신경망 가속기 시뮬레이터의 상태를 상기 디버 깅 명령어 사이클 수만큼 천이시키며, 해당 명령어의 결과를 반영시키고, 상기 호스트 에뮬레이터 및 상기 신경 망 가속기 시뮬레이터 천이 상태와 상기 취합한 결과를 토대로 상기 인공지능 장치의 내부 상태를 확인한다. 본 발명의 다른 면에 따라, 디버깅 명령어를 조합하는 단계와, 인공지능 장치로 상기 디버깅 명령어를 전송하는 단계와, 신경망 가속기 시뮬레이터의 상태를 명령어 사이클 수만큼 천이시키는 단계와, 상기 인공지능 장치로부터 상기 디버깅 명령어에 대한 실행 결과를 수신하는 단계와, 신경망 가속기 시뮬레이터의 천이 상태 및 결과와, 상기 실행 결과를 확인하고, 이들을 고려하여 상기 인공지능 장치의 내부 상태를 확인하는 단계를 포함 하는 인공지능 장치의 디버깅 방법이 제공된다. 이 때, 디버깅 명령어의 조합은 신경망 가속기에 대한 디버깅 명령어를 조합하거나 또는 호스트 프로세서에 대 한 디버깅 명령어를 조합할 수 있고, 호스트 프로세서에 대한 디버깅 명령어를 함께 조합하여 전송하는 경우에 는 호스트 코어 에뮬레이터의 상태를 천이시키는 단계를 포함하고, 상기 호스트 코어 에뮬레이터의 상태 및 명 령어 실행 결과를 더 고려하여 상기 인공지능 장치의 내부 상태를 확인한다."}
{"patent_id": "10-2019-0144182", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 따르면, 인공신경망 가속기의 내부 상태를 언제든지 구체적으로 확인할 수 있다. 또한, 본 발명에서 제안하는 방법을 통해 인공신경망 가속기의 동작을 명령어 단위로 세분화하여 제어할 수 있 다. 결과적으로, 인공지능 루틴의 실행 중 가속기 내부 상태를 확인할 수 있으므로, 인공신경망 가속기를 사용하는 인공지능 장치의 소프트웨어 개발에 소요되는 시간과 노력을 줄일 수 있게 된다."}
{"patent_id": "10-2019-0144182", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 목적 및 효과는 이상에서 언급한 것으로 제한되지 않으며, 본 발명의 목적 및 효과, 그리고 그것들을 달성하기 위한 기술적 구성들은 첨부 도면과 함께 상세하게 후술되어 있는 실시예들을 참조하면 명확해질 것이다. 본 발명을 설명함에 있어서 공지 기능 또는 구성에 대한 구체적인 설명이 본 발명의 요지를 불필요하게 흐릴 수 있다고 판단되는 경우에는 그 상세한 설명을 생략한다. 또한, 본 발명은 이하에서 개시되는 실시예들에 한정되 는 것이 아니라 서로 다른 다양한 형태로 구현될 수 있다. 이하의 각 실시예들은 본 발명의 개시가 완전하도록"}
{"patent_id": "10-2019-0144182", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "하고, 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자에게 발명의 범주를 완전하게 알려주기 위해 제공 되는 것이며 본 발명의 범위를 제한하고자 하는 것이 아니다. 명세서 전체에서, 어떤 부분이 어떤 구성요소를 \"포함\" 또는 \"구비\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 또한, 명세 서에 기재된 \"...유닛\", \"...장치\", \"...디바이스\", \"...부\" 또는 \"...모듈\" 등의 용어는 적어도 하나의 기능이 나 동작을 처리하는 단위를 의미하며, 이는 하드웨어나 소프트웨어 또는 하드웨어 및 소프트웨어의 결합으로 구 현될 수 있다. 한편, 본 발명의 각 실시예에 있어서, 각 구성요소들, 기능 블록들 또는 수단들은 하나 또는 그 이상의 하부 구 성요소로 구성될 수 있으며, 각 구성요소들이 수행하는 전기, 전자, 기계적 기능들은 전자회로, 집적회로, ASIC(Application Specific Integrated Circuit) 등 공지된 다양한 소자들 또는 기계적 요소들로 구현될 수 있 으며, 각각 별개로 구현되거나 2 이상이 하나로 통합되어 구현될 수도 있다. 이하, 첨부 도면을 참조하여 본 발명의 구성에 대하여 상세히 설명한다. 우선, 도 1 및 2를 참조하여 본 발명의 기본 기술 사상에 대해서 설명한다. 본 발명이 제안하는 개발 방법은, 도 1에 도시된 바와 같이, 인공지능 루틴과 관리 루틴이 서로 독립된 프로세 서에서 동작하고 각각의 아키텍처에 맞게 개발될 것을 가정하여, 아래 그림과 같이 관리 루틴을 개발할 호스트 개발 환경과, 인공지능 루틴을 개발할 신경망 가속기 개발 환경으로 분리한다. 한편, 특허청구범위를 포함하는 본 명세서 전반에 걸쳐서, '환경'이라는 용어는 추상적이거나 관념적인 어떤 것 이 아니라, 하나의 장치 또는 복수의 장치가 연계된 시스템과 같이 물건을 칭하거나 또는 장치나 시스템의 내외 부 메모리와 같은 기억매체에 저장되고 장치나 시스템에서 동작하는 소프트웨어를 칭하는 것임을 명확히 밝힌다. 호스트 개발 환경은 관리 루틴을 컴파일하는 호스트 툴체인을 포함하며, 툴체인은 원시 코드를 컴파일하여 목적 코드를 생성하고, 생성된 목적 코드와 툴체인에 포함된 라이브러리 일부를 링킹하여 관리 루틴 이 신경망 가속기가 포함된 인공지능 장치에서 동작할 수 있는 형태의 실행 파일을 생성한다. 툴체인의 종류는 컴파일러, 링커, 그리고 디버거를 포함하는 GNU 크로스 툴체인(Cross Toolchain)을 포함 할 수 있으나 이에 국한하지는 않으며, GNU 툴체인과 호환되는 상용 툴체인도 포함할 수 있다. 신경망 가속기 개발 환경은 신경망 가속기의 주요 동작을 모사하는 가속기 시뮬레이터(또는 에뮬레이 터)와 인공지능의 구현 방법을 편집하는 신경망 편집기로 구성된다. 가속기 개발 환경에서, 신경망 가속기의 동작을 소프트웨어로 모사하는 정도에 따라 신경망 가속기의 동작 을 모두 모사하는 가속기 시뮬레이터와 명령어의 실행 과정에 따른 주요 상태만을 모사하는 가속기 에뮬레이터 를 취사 선택할 수 있으며, 선택에 따라 시뮬레이터를 통한 정밀한 모사 또는 에뮬레이터를 통한 명령어 처리에 대한 차이가 있다. 본 발명의 바람직한 실시예에서는, 도 2에 도시된 바와 같이, 관리 루틴의 원시 코드를 편집하기 위한 소프트웨 어 툴을 포함하는 호스트 개발 환경에 신경망 가속기 개발 환경의 일부분인 가속기 시뮬레이터 (또는 에뮬레이터)를 통합하여 통합 개발 환경(IDE: Integrated Development Environment, 300)을 구축함 으로써, 호스트 프로세서에서 실행되는 관리 루틴의 명령어들과 신경망 가속기에서 실행되는 인공지능 루틴 명 령어들을 단일 개발 환경에서 디버깅되도록 한다. 이를 위한 통합 개발 환경의 한 예로서, GNU 디버거 프론트엔드(frontend) 기능을 포함하는 Eclipse IDE를 기반으로 하며, 신경망 가속기 시뮬레이터 또는 에뮬레이터 소프트웨어는 Eclipse의 확장 기능으로서 동작하도 록 작성될 수 있다. 사용자 관점에서는, 위에서 기술한 호스트 개발 환경과 신경망 가속기 개발 환경을 통합한 통합 개발 환경만으로 기존의 일반적인 소프트웨어 개발 환경과 동일한 환경에서 인공지능 장치용 소프트웨어의 작성 과 디버깅이 가능해진다. 본 발명에 따른 디버깅 방법 및 통합 개발 환경의 사용자는 신경망 가속기를 위 해 기 제작된 신경망 편집기를 사용하여 인공지능 핵심 기능을 수행하는 신경망 구조를 작성하고, 통합 개 발 환경에서는 작성된 신경망을 사용하여 신경망 가속기를 학습시키고, 학습된 네트워크를 사용하여 분류 동작을 수행하거나 기 학습된 파라미터의 편집 등의 작업을 할 수 있다. 구체적으로는 아래 그림과 같이, 통합 개발 환경에서 신경망 응용프로그램과 이를 실행시킬 수 있는 호스 트 환경(호스트용 시스템 소프트웨어와 호스트용 운영체제)을 합한 형태의 인공지능 소프트웨어를 앞서 기술한 호스트 툴체인을 사용하여 생성 및 컴파일하고, 신경망 가속기 시뮬레이터를 외부 프로그램 또는 내 부 루틴으로 포함하는 호스트 에뮬레이터에 탑재하여 인공지능 소프트웨어를 동작시킨다. 이를 위하여, 본 발명에 따른 통합 개발 환경은, 도 3과 같이, 호스트용 시스템 소프트웨어와 호스트용 운 영체제를 합한 인공지능 소프트웨어를 생성 및 컴파일하는 호스트 툴체인과, 인공지능 소프트웨어를 에뮬 레이션 하는 호스트 코어 에뮬레이터를 포함하는 호스트 에뮬레이터(미도시)를 일 구성요소로 가진다. 신 경망 가속기를 시뮬레이션하는 신경망 가속기 시뮬레이터는 호스트 에뮬레이터의 내부 루틴으로 구성될 수 도 있는데, 도 3에 도시된 실시예와 같이 호스트 에뮬레이터 외부의 프로그램일 수 있다. 이 경우 호스트 에뮬 레이터는 신경망 가속기 시뮬레이터과 연계할 수 있도록 신경망 인터페이스을 포함한다. 즉, 본 발명에 따른 통합 개발 환경은, 호스트 프로그램을 작성하고 생성하는 호스트 툴체인뿐 아니 라, 호스트 코어 에뮬레이터 및 신경망 가속기 시뮬레이터을 포함하여 인공지능 장치 시뮬레이터 기능을 수행한다. 한편, 통합 개발 환경은 실제의 인공지능 장치와 연계할 수 있도록 JTAG 에뮬레이터을 더 포함한다. 이하에서는 도 4를 참조하여, 실제의 인공지능 장치와의 연계에 대하여하여 설명한다. 바람직한 일 실시예에서, 통합 개발 환경이 실행되고 있는 컴퓨터와 개발 대상 인공지능 장치와의 연 결은 JTAG 표준에 따르며, 이를 위해 도 4와 같이 인공지능 장치에는 JTAG 인터페이스를 두고 JTAG 에뮬레이터를 사용하여 개발 환경과 연결한다. 물론 JTAG 이외의 다른 표준에 따를 수 있음은 물론이며, 다만 본 실시예에서는 설명의 편의와 이해의 증진을 위하여 JTAG를 예시로 하여 설명하는 것 뿐이다. 인공지능 장치의 JTAG 인터페이스는 JTAG 에뮬레이터를 통해 수신한 명령어를 분석하여 호스트 프로세서용 명령어와 신경망 가속기 명령어로 구분하여 해당되는 장치인 호스트 프로세서 및 신경망 가속 기에 명령어를 전송하고, 실행된 결과를 취합하여 JTAG 에뮬레이터로 전달한다. 즉, 통합 개발 환경은 인공지능 장치로 명령어를 전송하기 위해 호스트 프로세서 및/또는 신경망 가 속기에 대한 DEBUG 명령어를 조합한 후 JTAG 인터페이스을 통해 인공지능 장치로 해당 명령어를 전송 하며, 인공지능 장치에서는 이를 수신하여 가속기 사이클 진행, 상태 취합 및 결과를 전송한다. 통합 개발 환경은 확장 기능으로 포함한 가속기 시뮬레이터 및/또는 호스트 코어 에뮬레이터(210, 310)의 상태를 디버깅 명령어 사이클 수만큼 천이시키며, 해당 명령어의 가속기 시뮬레이터 및/또는 호스트 코어 에뮬 레이터(210, 310)의 실행 결과를 확인하고 반영시킨다. 인공지능 장치로부터 전송받은 결과로 명령어 결과 를 확인하고, 신경망 시뮬레이터 및/또는 에뮬레이터(210, 310)의 천이 상태 및 실행 결과를 종합하여 호스트 프로세서 및/또는 신경망 가속기의 내부 상태를 간접적으로 확인한다. 전술한 디버깅 명령어의 조합, 전송, 가속기 시뮬레이터 및/또는 에뮬레이터(210, 310) 상태 천이, 호스트 프로 세서 및/또는 신경망 가속기 내부 상태 확인의 작업은 JTAG 에뮬레이터이 수행할 수도 있고, 일 부만을 JTAG 에뮬레이터가 수행하고 다른 부분은 통합 개발 환경 내의 별도의 제어부(미도시)가 수행 할 수도 있다. 이와 같이, 본 발명에 따른 통합 개발 환경은 호스트 프로그램을 작성하고 생성하며, 신경망 가속기 시뮬 레이터 및 호스트 코어 에뮬레이터를 통해 인공지능 장치의 동작을 모사하며, 또한 인공지능 장 치의 처리 결과와 신경망 가속기 시뮬레이터의 천이 상태 및 결과를 고려하여 신경망 가속기의 상태를 확인할 수 있다. 따라서, 본 발명에 따른 통합 개발 환경은 호스트 프로세서에서 실행되는 관리 루틴의 명령어들과 신경망 가속기에서 실행되는 인공지능 루틴 명령어들을 단일 개발 환경에서 디버깅할 수 있으며, 이에 대한 주된 역할 을 JTAG 에뮬레이터가 수행하도록 구현할 수 있다. 이하, 도 6을 참조하여 인공지능 장치의 상태를 확인하는 디버깅 방법에 대하여 설명한다. 도시된 바와 같이, 통합 개발 환경은 디버깅용 명령어를 조합한다(S610), 그 다음 단계에서는, 인공지능 장치로 명령어를 전송하며(S620), 또한 신경망 가속기 시뮬레이터 및/ 또는 호스트 코어 에뮬레이터(210, 310)의 상태를 명령어 사이클 수만큼 천이시킨다(S630). 인공지능 장치에서는 신경망 가속기를 통해 해당 명령어를 실행하고 그 실행 결과를 취합하면(S640), 통합 개발 환경이 이를 수신하며(S650) 또한 신경망 가속기 시뮬레이터 및/또는 호스트 코어 에뮬레 이터(210, 310)의 천이 상태 및 시뮬레이션 및/또는 에뮬레이션 결과를 확인하고(S670), 이들을 모두 고려하여 신경망 가속기의 내부 상태를 확인한다(S680). 이상 본 발명의 구성에 대하여 바람직한 몇 실시예를 들어 상세히 설명하였으나, 이는 이해를 돕기 위한 예시에 불과한 것으로 본 발명의 보호범위가 각 실시예의 구성에 한정되는 것은 아니다. 본 발명의 기술적 사상의 범주 내에서 전술한 실시예의 다양한 변형 및 변경이 가능함은 물론이다. 예컨대, 본 발명의 통합 개발 환경은 하나 의 프로세서에 구현될 수도 있고, 둘 이상의 상이한 프로세서에 구현될 수도 있다. 같은 측면으로, 통합 개발 환경의 각 구성 모듈은 하나의 프로세서에서 동작될 수도 있고 복수의 프로세서에서 분산되어 설치되고 동작될 수 있다.따라서, 본 발명의 보호범위는 이하의 특허청구범위의 기재에 의하여 정해져야 할 것이다."}
{"patent_id": "10-2019-0144182", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명에 따른 호스트 개발 환경 및 신경망 가속기 개발 환경의 구성을 도시한 구성도. 도 2는 도 1의 도면에서, 본 발명에 따른 통합 개발 환경에 속하는 기본 구성을 도시한 구성도. 도 3은 본 발명에 따른 통합 개발 환경의 구성도. 도 4는 본 발명에 따른 통합 개발 환경과 실제의 인공지능 장치와의 연결을 나타내는 구성도. 도 5는 인공지능 장치의 구성도. 도 6은 본 발명에 따른 통합 개발 환경의 디버깅 방법을 도시한 순서도."}
