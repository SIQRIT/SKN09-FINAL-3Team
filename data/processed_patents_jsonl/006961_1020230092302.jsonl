{"patent_id": "10-2023-0092302", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0057327", "출원번호": "10-2023-0092302", "발명의 명칭": "딥러닝 컴파일러와 그래프 탐색 알고리즘을 통한 모델 파티션 자동화 및 최적화 방법 및 시스", "출원인": "한양대학교 산학협력단", "발명자": "서지원"}}
{"patent_id": "10-2023-0092302", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "모델 파티션 시스템에 의해 수행되는 모델 파티션 방법에 있어서,딥러닝 모델을 그래프로 표현하는 단계; 및 그래프 탐색 알고리즘을 기반으로 상기 표현된 그래프의 연결 관계를 분석하여 상기 딥러닝 모델을 파티션하는단계를 포함하는 모델 파티션 방법."}
{"patent_id": "10-2023-0092302", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 파티션하는 단계는,깊이 우선 탐색 알고리즘을 기반으로 상기 표현된 그래프에 대해 딥러닝 모델의 시작점과 끝점의 노드 포함 관계를 파악하는 단계 를 포함하고,상기 딥러닝 모델은, 시작점과 끝점이 정해질 때, 시작점 이전에 실행되는 프롤로그(Prologue) 모델, 시작점부터 끝점까지 실행되는 타겟(Target) 모델, 끝점부터 원본 모델의 마지막까지 실행되는 에필로그(Epilogue) 모델로 구분되는 것을 특징으로 하는 모델 파티션 방법."}
{"patent_id": "10-2023-0092302", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 파티션하는 단계는,상기 타겟 모델에 포함된 각 레이어의 인풋(input)이 상기 타겟 모델에 존재하지 않는 경우, 상기 인풋을 상기타겟 모델의 인풋으로 설정하고, 상기 프롤로그 모델과 상기 에필로그 모델에 포함된 각 레이어의 인풋이 상기타겟 모델에 존재할 경우, 상기 타겟 모델에 상기 인풋을 아웃풋으로 설정하는 단계 를 포함하는 모델 파티션 방법."}
{"patent_id": "10-2023-0092302", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 표현하는 단계는,딥러닝 모델을 로드하는 단계;딥러닝 컴파일러를 이용하여 상기 로드된 딥러닝 모델을 컴파일하는 단계; 상기 컴파일된 딥러닝 모델의 연산 최적화를 진행한 후, 재구성된 딥러닝 모델에 대해 중간 표현(IntermediateRepresentation; IR)을 생성하는 단계; 및상기 생성된 중간 표현을 통해 각 레이어의 연결 관계를 획득하는 단계를 포함하는 모델 파티션 방법."}
{"patent_id": "10-2023-0092302", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2024-0057327-3-제4항에 있어서,상기 표현하는 단계는,상기 딥러닝 모델에서 데이터 크기가 감소하는 부분 또는 데이터가 융합되는 부분과 관련된 레이어를 분할 포인트로 결정하는 단계 를 포함하는 모델 파티션 방법."}
{"patent_id": "10-2023-0092302", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 표현하는 단계는,상기 분할 포인트로 결정된 레이어에 양자화 및 양자화 복원을 수행하는 레이어 시퀀스를 삽입하여 상기 결정된레이어에 분할을 진행하는 단계를 포함하는 모델 파티션 방법."}
{"patent_id": "10-2023-0092302", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "모델 파티션 시스템에 있어서,딥러닝 모델을 그래프로 표현하는 그래프 표현부; 및 그래프 탐색 알고리즘을 기반으로 상기 표현된 그래프의 연결 관계를 분석하여 상기 딥러닝 모델을 파티션하는파티션부를 포함하는 모델 파티션 시스템."}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "딥러닝 컴파일러와 그래프 탐색 알고리즘을 통한 모델 파티션 자동화 및 최적화 방법 및 시스템이 개시된다. 일 실시예에 따른 모델 파티션 시스템에 의해 수행되는 모델 파티션 방법은, 딥러닝 모델을 그래프로 표현하는 단계; 및 그래프 탐색 알고리즘을 기반으로 상기 표현된 그래프의 연결 관계를 분석하여 상기 딥러닝 모델을 파 티션하는 단계를 포함할 수 있다."}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래의 설명은 딥러닝 모델을 파티션하는 기술에 관한 것이다."}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근, 딥러닝은 컴퓨터 비전, 언어 처리 등의 분야에서 성공적인 성과를 거두고 있으며, 인공지능 애플리케이션 은 생활 속에 함께하고 있다. 하지만 딥러닝 모델 어플리케이션은 연산량이 많아 고성능의 컴퓨팅 자원을 요구 한다. 따라서 딥러닝 모델을 우리 생활 속에서 활용해야 할 때엔 일반적으로 두 가지 방법을 채택하게 된다. 첫 번째로 엣지 디바이스(Edge Device)에서 데이터를 수집한 뒤, 수집한 데이터를 고성능 서버로 보내고, 서버 에서 연산을 모두 수행하고 그 결과만 다시 엣지 디바이스로 다시 받는 클라우드 방식이 있다. 이 방식은 엣지 디바이스의 컴퓨팅 성능이 충분하지 않더라도 딥러닝 추론을 할 수 있다는 장점이 있으나, 엣지 디바이스와 서 버 간의 데이터 송수신 속도에 큰 영향을 받으며, 이러한 클라우드 방식에서 데이터 송수신에 걸리는 시간은 전 체 어플리케이션 수행 시간 중 94%까지 차지한다는 연구 결과가 있다. 또한, 데이터의 원본을 보내기 때문에 전송 과정에서의 개인정보 노출의 위험성이 존재한다. 두 번째로 엣지 디바이스에서 홀로 실행하는 방식인 온 디바이스(On-Device) 방식이 있다. 온 디바이스 방식은 위에서 설명한 데이터를 송수신 할 때 발생하는 문제들을 해결할 수 있으나, 저성능의 엣지 디바이스의 컴퓨팅 자원에 제한을 받으며, 최근 딥러닝 모델의 사이즈를 키워 파라미터 수를 증가시킨 BERT 등의 모델의 경우, 사 실상 엣지 디바이스에서 실행하기가 현재로썬 불가능하다. 따라서 위의 단점들을 보완하기 위해 엣지 디바이스와 서버에서 딥러닝 모델 추론을 위한 연산을 나누어 수행하 는 분할 컴퓨팅(Split-Computing)이 제안되었다. 이와 비슷하게, 모델의 사이즈가 너무 커서 하나의 가속기에서는 실행을 못하는 경우, 그 모델을 여러 조각으로 분할하여 여러 가속기들에서 실행하는 분산 컴퓨팅 (Distributed-Computing)이나 서로 다른 가속기에서 수행하는 이기종 컴퓨팅(Heterogeneous-Computing)의 방법 을 활용하게 되는데, 이 또한 모델을 여러 개로 분할하는 것이 필수적이다. 하지만, 딥러닝 라이브러리에서 이 딥러닝 모델을 분할할 수 있는 방법은 적거나 아예 제공되지 않으며, 사용자가 직접 모델의 구조를 토대로 직접 나누어야 한다는 단점이 있다."}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "다양한 모델을 딥러닝 컴파일러를 통해 최적화 시킨 후 IR(Intermediate Representation) 그래프로 변환한 뒤, 그래프의 연결 관계를 분석하여 자동적으로 딥러닝 모델을 최적의 지점으로 나누는 방법 및 시스템을 제공할 수 있다."}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "모델 파티션 시스템에 의해 수행되는 모델 파티션 방법은, 딥러닝 모델을 그래프로 표현하는 단계; 및 그래프 탐색 알고리즘을 기반으로 상기 표현된 그래프의 연결 관계를 분석하여 상기 딥러닝 모델을 파티션하는 단계를 포함할 수 있다. 상기 파티션하는 단계는, 깊이 우선 탐색 알고리즘을 기반으로 상기 표현된 그래프에 대해 딥러닝 모델의 시작 점과 끝점의 노드 포함 관계를 파악하는 단계를 포함하고, 상기 딥러닝 모델은, 시작점과 끝점이 정해질 때, 시 작점 이전에 실행되는 프롤로그(Prologue) 모델, 시작점부터 끝점까지 실행되는 타겟(Target) 모델, 끝점부터 원본 모델의 마지막까지 실행되는 에필로그(Epilogue) 모델로 구분될 수 있다. 상기 파티션하는 단계는, 상기 타겟 모델에 포함된 각 레이어의 인풋(input)이 상기 타겟 모델에 존재하지 않는 경우, 상기 인풋을 상기 타겟 모델의 인풋으로 설정하고, 상기 프롤로그 모델과 상기 에필로그 모델에 포함된 각 레이어의 인풋이 상기 타겟 모델에 존재할 경우, 상기 타겟 모델에 상기 인풋을 아웃풋으로 설정하는 단계를 포함할 수 있다. 상기 표현하는 단계는, 딥러닝 모델을 로드하는 단계; 딥러닝 컴파일러를 이용하여 상기 로드된 딥러닝 모델을 컴파일하는 단계; 상기 컴파일된 딥러닝 모델의 연산 최적화를 진행한 후, 재구성된 딥러닝 모델에 대해 중간 표현(Intermediate Representation; IR)을 생성하는 단계; 및 상기 생성된 중간 표현을 통해 각 레이어의 연결 관계를 획득하는 단계를 포함할 수 있다. 상기 표현하는 단계는, 상기 딥러닝 모델에서 데이터 크기가 감소하는 부분 또는 데이터가 융합되는 부분과 관 련된 레이어를 분할 포인트로 결정하는 단계를 포함할 수 있다. 상기 표현하는 단계는, 상기 분할 포인트로 결정된 레이어에 양자화 및 양자화 복원을 수행하는 레이어 시퀀스 를 삽입하여 상기 결정된 레이어에 분할을 진행하는 단계를 포함할 수 있다. 모델 파티션 시스템은, 딥러닝 모델을 그래프로 표현하는 그래프 표현부; 및 그래프 탐색 알고리즘을 기반으로 상기 표현된 그래프의 연결 관계를 분석하여 상기 딥러닝 모델을 파티션하는 파티션부를 포함할 수 있다."}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "다양한 딥러닝 모델을 딥러닝 컴파일러를 통해 최적화시킨 후 중간 표현을 생성하고, 생성된 중간 표현의 연결 관계를 분석하여 딥러닝 모델의 파티션을 자동화 및 최적화할 수 있다."}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 실시예를 첨부한 도면을 참조하여 상세히 설명한다. 실시예에서는 그래프 탐색 알고리즘을 기반으로 GPU/CPU/NPU 등의 가속기에 최적화된 딥러닝 모델의 그래프를 분석하여 자동으로 그래프를 파티션하고 최적화하는 동작에 대하여 설명하기로 한다. 복잡한 딥러닝 모델의 구 조에 대해 사용자 개입을 최소화하여 딥러닝 모델을 파티션할 수 있으며, 양자화와 레이어 융합을 통해 더욱 최 적화된 그래프로 그래프 파티션을 적용할 수 있다. 실시예는 기존 연구에서 사용자가 직접 그래프를 최적화하 고 분석하여 파티션해야 하는 것에서 자동화를 통해 최적의 파티션을 탐색할 수 있게 하므로, 기존 기술을 대체 하는 대안으로써 작용할 수 있음을 밝힌다. 도 1은 일 실시예에 있어서, 딥러닝 모델 파티션 자동화 및 최적화 동작을 설명하기 위한 도면이다. 모델 파티션 시스템은 딥러닝 모델을 로드할 수 있다. 모델 파티션 시스템은 다양한 딥러닝 프레임워크에서 생성된 딥러닝 모델의 정보를 불러올 수 있다. 이때, 불러오는 딥러닝 모델의 정보는 파일 형태로 구성될 수 있으며, 모델 구성과 파라미터 값 등이 포함될 수 있다. 모델 파티션 시스템은 로드된 딥러닝 모델을 딥러닝 컴파일러(예를 들면, TVM)로 컴파일한 후, 그래프 관계 및 레이어 융합을 통해 최적화를 진행하여 딥러닝 모델을 재구성할 수 있다. 이때, 데이터가 줄어드는 포인트 를 기준으로 양자화 또한 진행할 수 있으며, 이는, 데이터 전송량을 감소시키는데 큰 역할을 한다. 모델 파티션 시스템은 그래프 탐색 알고리즘을 기반으로 딥러닝 모델을 파티션(Partition)할 수 있다. 모델 파티션 시스템은 딥러닝 모델의 레이어 간 연결 관계 분석을 통해 그래프 탐색을 진행하여 각 모델 조각의 데이 터 의존성과 아웃풋을 고려하여 모델을 파티션할 수 있다. 모델 파티션 시스템은 그래프 탐색 알고리즘을 통해 각 레이어 노드의 모델 포함 여부를 계산하고, 각 부분 모델의 인풋과 아웃풋을 설정할 수 있다. 이와 더불어, 모델 파티션 시스템은 사용자에 의해 지정된 위치에서 자동적으로 모델을 파티션할 수 있다. 모델 파티션 시스템은 파티션을 통해 획득된 부분 모델의 정보를 기반으로 딥러닝 모델을 재구성할 수 있다. 도 2는 일 실시예에 있어서, 딥러닝 모델의 연산 최적화 및 파티션 동작을 설명하기 위한 그래프이다. 도 2에서는 다양한 그래프 모양에 따른 그래프 파티션의 전반적인 흐름에 대하여 설명하기로 한다. 모델 파티 션 시스템은 데이터 의존 관계와 연산 관계에 기초하여 딥러닝 모델을 순방향 그래프로 표현할 수 있다. 모델 파티션 시스템은 도 1(a)와 같이 딥러닝 프레임워크(Keras, Tensorflow, Pytorch 등)를 통해 생성된 딥러닝 모 델을 딥러닝 컴파일러(예를 들면, TVM)을 통해 컴파일하여 최적화를 진행한 후, 재구성된 딥러닝 모델에 대해 중간 표현(Intermediate Representation; IR)을 생성하고, 최적화된 각 레이어의 연결 관계를 획득할 수 있다. 이때, 대부분의 딥러닝 프레임워크에서는 각 레이어 마다 번호를 매기는데, 스킵-연결(Skip-Connection)과 같이 복잡하게 연결된 딥러닝 모델의 경우엔, 각 레이어에 부여된 번호가 순방향 그래프의 연산 순서를 보장하지 않 기 때문에, 각 레이어의 연결 관계의 위상(Topology)를 고려하여야 한다. 모델 파티션 시스템은 그래프 탐색 알고리즘을 기반으로 표현된 그래프의 연결 관계를 분석하여 딥러닝 모델을 파티션할 수 있다. 도 3은 도 2(b), 도 2(c)에서 깊이 우선 탐색(Depth First Search; DFS) 알고리즘을 활용 하여 각 모델의 시작점과 끝점의 노드 포함 관계를 파악하고 분할하는 과정을 나타낸다. 모델 파티션 시스템은 딥러닝 모델의 시작점과 끝점이 정해질 때, 시작점 이전에 실행되는 프롤로그(Prologue) 모델, 시작점부터 끝점까지 실행되는 타겟(Target) 모델, 끝점부터 원본 모델의 마지막까지 실행되는 에필로그(Epilogue) 모 델을 포함하는 세 개의 딥러닝 모델로 구분할 수 있다. 이때, 모델 파티션 시스템은 타겟 모델에 포함된 각 레이어의 인풋(input)이 타겟 모델 내에 존재하지 않는 경우, 인풋을 타겟 모델의 인풋으로 설정하고, 프롤로그 모델과 에필로그 모델에 포함된 각 레이어의 인풋이 타겟 모델에 존재할 경 우, 타겟 모델에 인풋을 아웃풋으로 설정하는 것으로 딥러닝 모델의 파티션을 진행할 수 있다. 도 4는 일 실시예에 있어서, 데이터 최소화 지점 포착 및 자동 파티션 동작을 설명하기 위한 도면이다. 딥러닝 모델을 복수 개의 부분 모델로 파티션하는 것만큼, 어느 지점에서 딥러닝 모델을 분할할 것인지 결정하 는 것 또한 중요하다. 모바일 기기와 고성능 서버에 모델을 분배하여 연산을 진행할 때, 전체 추론 시간 중 데 이터 통신이 차지하는 비율이 94%로, 데이터 전송량이 총 추론 시간에 큰 걸림돌이 될 수 있다. 이에, 모델 파 티션 시스템은 딥러닝 모델에서 데이터 크기가 감소하는 부분 또는 데이터가 융합되는 부분과 관련된 레이어를 분할 포인트로 결정할 수 있다. 도 4(a)를 참고하면, 복수 개의 레이어로 구성된 딥러닝 모델의 예이다. 도 4(b) 및 도 4(c)를 참고하면, 모델 파티션 시스템은 데이터 크기가 줄어들 수 있는 Maxpool 레이어와, 나누어진 데이터가 합쳐지는 Add 레이어를 분할 포인트로 정하였으며 최적의 포인트를 사용자에게 추천하고 자동적으로 분할할 수 있다. 이에, 통신 대상 데이터 크기를 줄일 수 있다. 또한, 모델 파티션 시스템은 분할 포인트로 선정된 레이어에 양자화와 양자화 복원을 수행하는 레이어 시퀀스를 삽입하여 해당 레이어에서 분할을 진행 시 float32였던 데이터가 int8로 압축되면서 모델 간 송수신 데이터의 양을 축소시킬 수 있다. 실시예에 따르면, 모델 파티션 시스템은 도 2 및 도 4를 통해 획득된 정보를 기반으로 각 딥러닝 모델의 인풋 정보와 아웃풋 정보를 설정하고, 각 레이어에 해당하는 파라미터를 설정함으로써 모델 파티션을 수행할 수 있다. 도 5는 일 실시예에 있어서, 모델 파티션 시스템의 구성을 설명하기 위한 블록도이고, 도 6은 일 실시예에 있어 서, 모델 파티션 방법을 설명하기 위한 흐름도이다. 모델 파티션 시스템의 프로세서는 그래프 표현부 및 파티션부를 포함할 수 있다. 이러한 프로 세서의 구성요소들은 데이터 모델 파티션 시스템에 저장된 프로그램 코드가 제공하는 제어 명령에 따라 프로세 서에 의해 수행되는 서로 다른 기능들(different functions)의 표현들일 수 있다. 프로세서 및 프로세서의 구 성요소들은 도 6의 모델 파티션 방법이 포함하는 단계들(610 내지 620)을 수행하도록 모델 파티션 시스템을 제 어할 수 있다. 이때, 프로세서 및 프로세서의 구성요소들은 메모리가 포함하는 운영체제의 코드와 적어도 하나 의 프로그램의 코드에 따른 명령(instruction)을 실행하도록 구현될 수 있다. 프로세서는 모델 파티션 방법을 위한 프로그램의 파일에 저장된 프로그램 코드를 메모리에 로딩할 수 있다. 예 를 들면, 모델 파티션 시스템에서 프로그램이 실행되면, 프로세서는 운영체제의 제어에 따라 프로그램의 파일로 부터 프로그램 코드를 메모리에 로딩하도록 모델 파티션 시스템을 제어할 수 있다. 이때, 그래프 표현부 및 파티션부 각각은 메모리에 로딩된 프로그램 코드 중 대응하는 부분의 명령을 실행하여 이후 단계들(610 내지 620)을 실행하기 위한 프로세서의 서로 다른 기능적 표현들일 수 있다. 단계에서 그래프 표현부는 딥러닝 모델을 그래프로 표현할 수 있다. 그래프 표현부는 딥러닝 모델을 로드하고, 딥러닝 컴파일러를 이용하여 로드된 딥러닝 모델을 컴파일하고, 컴파일된 딥러닝 모델의 연산 최적화를 진행한 후, 재구성된 딥러닝 모델에 대해 중간 표현(Intermediate Representation; IR)을 생성할 수 있다. 그래프 표현부는 생성된 중간 표현을 통해 각 레이어의 연결 관계를 획득할 수 있다. 그래프 표현 부는 딥러닝 모델에서 데이터 크기가 감소하는 부분 또는 데이터가 융합되는 부분과 관련된 레이어를 분할 포인트로 결정할 수 있다. 그래프 표현부는 분할 포인트로 결정된 레이어에 양자화 및 양자화 복원을 수 행하는 레이어 시퀀스를 삽입하여 결정된 레이어에 분할을 진행할 수 있다. 예를 들면, 그래프 표현부는 컴파일 과정에서 레이어를 융합, 데이터를 분할할 포인트에서의 양자화 적용을 통한 송수신 데이터 압축 등을 함께 진행할 수 있다. 단계에서 파티션부는 그래프 탐색 알고리즘을 기반으로 표현된 그래프의 연결 관계를 분석하여 딥러 닝 모델을 파티션할 수 있다. 파티션부는 깊이 우선 탐색 알고리즘을 기반으로 표현된 그래프에 대해 딥 러닝 모델의 시작점과 끝점의 노드 포함 관계를 파악할 수 있다. 이때, 딥러닝 모델은, 시작점과 끝점이 정해 질 때, 시작점 이전에 실행되는 프롤로그(Prologue) 모델, 시작점부터 끝점까지 실행되는 타겟(Target) 모델, 끝점부터 원본 모델의 마지막까지 실행되는 에필로그(Epilogue) 모델로 구분될 수 있다. 파티션부는 타겟 모델에 포함된 각 레이어의 인풋(input)이 타겟 모델에 존재하지 않는 경우, 인풋을 타겟 모델의 인풋으로 설정 하고, 프롤로그 모델과 에필로그 모델에 포함된 각 레이어의 인풋이 타겟 모델에 존재할 경우, 타겟 모델에 인 풋을 아웃풋으로 설정하는 것으로 딥러닝 모델의 파티션을 진행할 수 있다. 도 7은 일 실시예에 있어서, 모델 파티션 동작의 기술적 효과를 설명하기 위한 도면이다. 모델 파티션 시스템은 딥러닝 컴파일러를 이용하여 딥러닝 모델을 컴파일한 뒤 중간 표현(Intermediate Representation; IR)을 생성하고, 생성된 중간 표현 간의 연결 관계를 자동적으로 분석하여 사용자의 개입을 줄 이고 딥러닝 모델을 원하는 상황에 맞게 분할하는 프레임워크를 제공할 수 있다. 종래의 연구에 따르면, 딥러닝 모델을 나누어 실행할 때 걸리는 시간 중 네트워크 통신 시간이 차지하는 비율은 최대 94%이며, 따라서 모델 분할 후 통신하는 데이터의 크기를 줄이는 것이 중요하다. 이 프레임워크에서는 딥러닝 모델을 분할함으로써 도 7(a)와 같이 모델 각각의 실행 시간을 조금 희생하더라도, 도 7(b)와 같이 데이터의 통신량을 Unet, Resnet50, Resnet101, Resnet152에서 각각 기존 대비 62.5%, 82%, 82%, 82%만큼 줄일 수 있다. 또한, 파티셔 과정을 자동화하여, 사용자가 직접 모델을 분할할 경우에 발생하는 어려움과 실수 등을 줄일 수 있으며, 더 최적화된 조합을 자동적으로 찾을 수 있다. 이상에서 설명된 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치 및 구성요소는, 예를 들어, 프로 세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴 퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 하나 이상 의 소프트웨어 애플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설"}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "명된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소 (processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치 는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세서 (parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치에 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터 는 하나 이상의 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 상기 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등 을 단독으로 또는 조합하여 포함할 수 있다. 상기 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판 독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체 (magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도 록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다."}
{"patent_id": "10-2023-0092302", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7"}
{"patent_id": "10-2023-0092302", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시예에 있어서, 딥러닝 모델 파티션 자동화 및 최적화 동작을 설명하기 위한 도면이다. 도 2는 일 실시예에 있어서, 딥러닝 모델의 연산 최적화 및 파티션 동작을 설명하기 위한 그래프이다. 도 3은 일 실시예에 있어서, 파티션 알고리즘의 수도 코드 예이다. 도 4는 일 실시예에 있어서, 데이터 최소화 지점 포착 및 자동 파티션 동작을 설명하기 위한 도면이다. 도 5는 일 실시예에 있어서, 모델 파티션 시스템의 구성을 설명하기 위한 블록도이다. 도 6은 일 실시예에 있어서, 모델 파티션 방법을 설명하기 위한 흐름도이다. 도 7은 일 실시예에 있어서, 모델 파티션 동작의 기술적 효과를 설명하기 위한 도면이다."}
