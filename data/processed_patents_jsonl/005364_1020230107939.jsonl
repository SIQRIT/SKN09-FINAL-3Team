{"patent_id": "10-2023-0107939", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0026699", "출원번호": "10-2023-0107939", "발명의 명칭": "가상 객체와 사용자 간의 인터랙션을 위한 충돌 감지 방법 및 그 장치", "출원인": "주식회사 케이티", "발명자": "김승철"}}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "적어도 하나의 프로세서에 의해 동작하는 인터랙션 시스템의 동작 방법으로서, 가상 공간에 객체를 표시하고, 상기 객체에 대한 사용자 동작을 감지하면, 상기 사용자 동작에 따른 가상 포인터를 상기 가상 공간에 표시하는 단계,상기 객체를 복수개의 기준 영역들을 이용하여 분할하는 단계,상기 기준 영역들과 상기 가상 포인터 간의 거리를 각각 계산하는 단계,상기 기준 영역들 중에서 상기 가상 포인터와의 거리가 기준 거리 이하인 적어도 하나의 기준 영역이 존재하는지 판단하는 단계, 그리고상기 적어도 하나의 기준 영역이 존재하면, 상기 객체와 상기 가상 포인터 간의 충돌로 판단하는 단계를 포함하는, 동작 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에서,상기 분할하는 단계 이전에,기준 영역의 중심에 설정된 기준 좌표를 포함하고, 상기 기준 좌표로부터 외곽까지의 거리인 기준 거리가 일정한 형상인 기준 영역을 설정하는 단계를 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에서,상기 계산하는 단계는,각 기준 영역들의 기준 좌표와 상기 가상 포인터의 중심 좌표 간의 거리를 계산하는, 동작 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에서,상기 설정하는 단계는,상기 객체의 형태 또는 크기 중 적어도 하나에 따라 상기 기준 거리의 길이 또는 기준 영역들 간의 간격을 조정하여, 객체 단위로 기준 영역을 설정하는, 동작 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에서,상기 존재하는지 판단하는 단계는,공개특허 10-2025-0026699-2-상기 계산된 거리 중에서, 최소 거리를 가지는 기준 영역을 선택하고, 상기 최소 거리가 상기 기준 영역에 설정된 기준 거리 이하인지 판단하며,상기 충돌로 판단하는 단계는,상기 최소 거리가 상기 기준 거리 이하이면, 충돌로 판단하는, 동작 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에서,상기 존재하는지 판단하는 단계 이후,상기 최소 거리가 상기 기준 거리 이하가 아니면, 상기 가상 포인터의 중심 좌표와 상기 최소 거리를 가지는 기준 영역의 기준점 좌표 간의 거리 벡터의 방향에 위치하는 상기 가상 포인터의 사이드 좌표를 추출하는 단계,그리고상기 추출한 사이드 좌표와 상기 최소 거리를 가지는 기준 영역의 기준점 좌표 간의 거리를 산출하여 산출한 거리가 상기 기준 거리 이하이면 충돌로 판단하는 단계를 더 포함하는, 동작 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에서,상기 가상 포인터는,상기 가상 포인터의 중심부에 상기 중심 좌표가 설정되고, 상기 중심 좌표를 기준으로 상기 가상 포인터의 외곽부에 복수개의 사이드 좌표가 설정되는, 동작 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에서,상기 판단하는 단계는,기준 영역들 별로 설정된 각각의 기준 거리를 각 기준 영역과 가상 포인터 간의 거리와 비교하는, 동작 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에서,상기 각각의 기준 거리는,복수개의 기준 영역들에 동일하게 설정되는, 방법."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "가상 공간에 객체를 표시하고, 상기 객체에 대한 사용자 동작을 감지하면, 상기 사용자 동작에 따른 가상 포인터를 상기 가상 공간에 표시하는 가상 공간 제어부, 그리고상기 객체를 복수개의 기준 영역들을 이용하여 분할하고, 상기 기준 영역들과 상기 가상 포인터 간의 거리를 각각 계산하며, 상기 기준 영역들 별로 설정된 각각의 기준 거리를 상기 계산한 각각의 거리와 비교하여, 상기 계산한 각각의 거리가 상기 각각의 기준 거리 이하인 적어도 하나의 기준 영역이 존재하면, 상기 객체와 상기 가공개특허 10-2025-0026699-3-상 포인터 간의 충돌로 판단하는 충돌 감지부를 포함하고,상기 가상 공간 제어부는,상기 충돌 감지부로부터 충돌 판단 결과가 확인되면, 상기 객체에 설정된 인터랙션 기능을 구현하는, 인터랙션시스템."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에서,상기 충돌 감지부는,상기 가상 포인터의 중심 좌표와 각각의 기준 영역들의 중심에 설정된 기준점 좌표 간의 거리를 각각 계산하여최소 거리가 산출된 기준 영역을 선택하고,상기 최소 거리가 상기 선택한 기준 영역에 설정된 기준 거리를 초과하면, 상기 최소 거리를 가지는 기준 영역의 기준점 좌표와 상기 중심 좌표 간의 거리 벡터의 방향에 위치하는 가상 포인터의 사이드 좌표를 추출하며,추출한 사이드 좌표와 상기 최소 거리를 가지는 기준 영역의 기준점 좌표 간의 거리를 산출하여 산출한 거리가상기 기준 거리 이하이면 충돌로 판단하는, 인터랙션 시스템."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제10항에서,상기 충돌 감지부는,상기 객체의 형태 또는 크기 중 적어도 하나에 따라 상기 기준 거리의 길이 또는 기준 영역들 간의 간격을 조정하여, 객체 단위로 기준 영역을 설정하고, 설정한 기준 영역을 이용하여 상기 객체를 분할하는, 인터랙션 시스템."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "충돌 감지 프로그램이 저장된 메모리, 그리고상기 충돌 감지 프로그램을 실행하는 적어도 하나의 프로세서를 포함하고,상기 충돌 감지 프로그램은,가상 공간에 표시한 가상 객체를 기준점 좌표와 기준 거리가 설정된 기준 영역 단위로 분할하여 상기 가상 객체를 구성하는 복수개의 기준 영역들을 생성하고, 사용자 입력에 따라 상기 가상 공간에 표시한 포인터와 상기 기준 영역들의 기준점 좌표 간의 거리를 계산하여계산한 거리가 상기 기준 거리 이하인 기준 영역이 존재하면, 상기 포인터와 상기 가상 객체 간의 충돌로 판단하는 명령어들(Instructions)을 포함하는, 컴퓨팅 장치."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에서,상기 충돌 감지 프로그램은,상기 포인터의 중심 좌표와 상기 기준점 좌표 간의 거리를 상기 복수개의 기준 영역들에 대해 모두 계산하고,가장 최소값을 가지는 거리가 산출된 기준 영역을 선택하여, 상기 가장 최소값을 가지는 거리가 상기 선택한 기준 영역에 설정된 기준 거리 보다 작으면 상기 포인터와 상기 가상 객체 간의 충돌로 판단하는 명령어들을 포함공개특허 10-2025-0026699-4-하는, 컴퓨팅 장치."}
{"patent_id": "10-2023-0107939", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에서,상기 충돌 감지 프로그램은,상기 가장 최소값을 가지는 거리가 상기 선택한 기준 영역에 설정된 기준 거리 보다 큰 값이면, 상기 포인터에설정된 복수개의 사이드 좌표들 중에서 상기 선택한 기준 영역의 기준점 좌표와 상기 중심 좌표 간의 거리 벡터방향에 위치하는 적어도 하나의 사이드 좌표를 추출하고,추출한 사이드 좌표와 상기 기준점 좌표 간의 거리가 상기 기준 거리 보다 작은 값이면, 상기 포인터와 상기 가상 객체 간의 충돌로 판단하는 명령어들을 포함하는, 컴퓨팅 장치."}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "적어도 하나의 프로세서에 의해 동작하는 인터랙션 시스템의 동작 방법으로서, 가상 공간에 객체를 표시하고, 상 기 객체에 대한 사용자 동작을 감지하면, 상기 사용자 동작에 따른 가상 포인터를 상기 가상 공간에 표시하는 단 계, 상기 객체를 복수개의 기준 영역들을 이용하여 분할하는 단계, 상기 기준 영역들과 상기 가상 포인터 간의 거리를 각각 계산하는 단계, 상기 기준 영역 들 중에서 상기 가상 포인터와의 거리가 기준 거리 이하인 적어도 하나의 기준 영역이 존재하는지 판단하는 단계, 그리고 상기 적어도 하나의 기준 영역이 존재하면, 상기 객체와 상기 가상 포인터 간의 충돌로 판단하는 단계를 포함한다."}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 가상 공간에 표시한 객체를 정밀하게 선택 및 인터랙션 하기 위하여 객체와 사용자 간의 충돌을 효과 적으로 감지하는 방법 및 그 장치에 관한 것이다."}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 3차원 디스플레이를 사용하여 사용자와 콘텐츠 간에 상호작용할 수 있는 3차원 콘텐츠 인터랙션에 대한 많은 개발이 이루어지고 있다. 3차원 콘텐츠 인터랙션은 사용자가 터치스크린, 제스처 인식, 음성 인식, 머신 러닝 및 인공지능 기술 등을 사 용하여 콘텐츠를 조작할 수 있다. 이러한 3차원 콘텐츠 인터랙션은 가상 현실(virtual reality, VR), 증강 현실 (augmented reality, AR), 혼합 현실(mixed reality, MR) 등의 기술과 함께 사용되며, 게임, 교육, 의료, 제조, 예술 등 다양한 분야에서 응용되고 있다. 예를 들어, VR 게임에서는 사용자가 손동작을 통해 캐릭터를 컨 트롤하거나, AR 교육 앱에서는 학생들이 3차원 객체를 손으로 조작하며 학습할 수 있다. 이러한 기술은 사용자 의 경험을 더욱 뛰어나게 만들어 주며, 미래에는 보다 직관적이고 자연스러운 인터랙션을 제공하는 기술로 발전 될 것으로 예상된다. 최근 3차원 콘텐츠 인터랙션을 위하여 유니티(Unity), 언리얼(Unreal) 등의 게임 엔진을 이용하여 3차원 콘텐츠 를 제작하고, 이들이 지원하는 충돌 처리 기능을 이용하여 인터랙션 하고자 하는 물체에 대한 선택 및 조작 인 터랙션에 대한 수요가 늘어나고 있다. 유니티, 언리얼 등의 게임 엔진에서는 충돌 감지를 위한 콜라이더(Collider) 및 리지드바디(RigidBody) 등을 설 치하고 파라미터 설정을 통하여 충돌 여부를 판단한다. 이때, 콜라이더(Collider) 형상이 복잡할수록 정밀한 충돌 감지가 가능하지만 충돌을 연산하는데 시간이 많이 걸려 성능 저하가 발생한다. 반면, 콜라이더(Collider) 형상이 단순할 수록 충돌 연산에 걸리는 시간은 줄어들 지만 정밀한 충돌 감지가 어려울 수 있다. 또한, 객체가 겹쳐지게 되어 콜라이더가 겹쳐지게 되면 두 콜라이더 중에 어떤 콜라이더를 선택하는가에 대한 문제가 발생해 원하는 인터랙션을 수행하지 못하는 경우가 발생하게 된다."}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는, 가상 공간 상에 표시된 객체를 동일한 기준 거리가 설정된 복수개의 기준 영역으로 분할하고, 사용 자 입력에 따라 가상 공간에 표시한 포인터와 적어도 하나의 기준 영역 간의 거리가 기준 거리 이내이면 포인터 와 객체의 충돌로 판단하는 충돌 감지 방법 및 그 장치를 제공한다.본 개시는, 가상 포인터에서 객체를 구성하는 복수의 기준 영역과의 거리 판단 기준이 되는 좌표를 중심 좌표와 복수개의 사이드 좌표로 구분하여 생성하고, 포인터의 중심 좌표와 기준 영역 간의 거리가 기준 거리를 초과하 면 거리 방향에 위치하는 사이드 좌표와 기준 영역 간의 거리를 기준 거리와 비교해서 포인터와 객체의 충돌 여 부를 판단하는 충돌 감지 방법 및 그 장치를 제공한다."}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "한 특징에 따르면, 적어도 하나의 프로세서에 의해 동작하는 인터랙션 시스템의 동작 방법으로서, 가상 공간에 객체를 표시하고, 상기 객체에 대한 사용자 동작을 감지하면, 상기 사용자 동작에 따른 가상 포인터를 상기 가 상 공간에 표시하는 단계, 상기 객체를 복수개의 기준 영역들을 이용하여 분할하는 단계, 상기 기준 영역들과 상기 가상 포인터 간의 거리를 각각 계산하는 단계, 상기 기준 영역들 중에서 상기 가상 포인터와의 거리가 기 준 거리 이하인 적어도 하나의 기준 영역이 존재하는지 판단하는 단계, 그리고 상기 적어도 하나의 기준 영역이 존재하면, 상기 객체와 상기 가상 포인터 간의 충돌로 판단하는 단계를 포함한다. 상기 분할하는 단계 이전에, 기준 영역의 중심에 설정된 기준 좌표를 포함하고, 상기 기준 좌표로부터 외곽까지 의 거리인 기준 거리가 일정한 형상인 기준 영역을 설정하는 단계를 더 포함할 수 있다. 상기 계산하는 단계는, 각 기준 영역들의 기준 좌표와 상기 가상 포인터의 중심 좌표 간의 거리를 계산할 수 있 다. 상기 설정하는 단계는, 상기 객체의 형태 또는 크기 중 적어도 하나에 따라 상기 기준 거리의 길이 또는 기준 영역들 간의 간격을 조정하여, 객체 단위로 기준 영역을 설정할 수 있다. 상기 존재하는지 판단하는 단계는, 상기 계산된 거리 중에서, 최소 거리를 가지는 기준 영역을 선택하고, 상기 최소 거리가 상기 기준 영역에 설정된 기준 거리 이하인지 판단하며, 상기 충돌로 판단하는 단계는, 상기 최소 거리가 상기 기준 거리 이하이면, 충돌로 판단할 수 있다. 상기 존재하는지 판단하는 단계 이후, 상기 최소 거리가 상기 기준 거리 이하가 아니면, 상기 가상 포인터의 중 심 좌표와 상기 최소 거리를 가지는 기준 영역의 기준점 좌표 간의 거리 벡터의 방향에 위치하는 상기 가상 포 인터의 사이드 좌표를 추출하는 단계, 그리고 상기 추출한 사이드 좌표와 상기 최소 거리를 가지는 기준 영역의 기준점 좌표 간의 거리를 산출하여 산출한 거리가 상기 기준 거리 이하이면 충돌로 판단하는 단계를 더 포함할 수 있다. 상기 가상 포인터는, 상기 가상 포인터의 중심부에 상기 중심 좌표가 설정되고, 상기 중심 좌표를 기준으로 상 기 가상 포인터의 외곽부에 복수개의 사이드 좌표가 설정될 수 있다. 상기 판단하는 단계는, 기준 영역들 별로 설정된 각각의 기준 거리를 각 기준 영역과 가상 포인터 간의 거리와 비교할 수 있다. 상기 각각의 기준 거리는, 복수개의 기준 영역들에 동일하게 설정될 수 있다. 다른 특징에 따르면, 인터랙션 시스템은 가상 공간에 객체를 표시하고, 상기 객체에 대한 사용자 동작을 감지하 면, 상기 사용자 동작에 따른 가상 포인터를 상기 가상 공간에 표시하는 가상 공간 제어부, 그리고 상기 객체를 복수개의 기준 영역들을 이용하여 분할하고, 상기 기준 영역들과 상기 가상 포인터 간의 거리를 각각 계산하며, 상기 기준 영역들 별로 설정된 각각의 기준 거리를 상기 계산한 각각의 거리와 비교하여, 상기 계산한 각각의 거리가 상기 각각의 기준 거리 이하인 적어도 하나의 기준 영역이 존재하면, 상기 객체와 상기 가상 포인터 간 의 충돌로 판단하는 충돌 감지부를 포함하고, 상기 가상 공간 제어부는, 상기 충돌 감지부로부터 충돌 판단 결 과가 확인되면, 상기 객체에 설정된 인터랙션 기능을 구현한다. 상기 충돌 감지부는, 상기 가상 포인터의 중심 좌표와 각각의 기준 영역들의 중심에 설정된 기준점 좌표 간의 거리를 각각 계산하여 최소 거리가 산출된 기준 영역을 선택하고, 상기 최소 거리가 상기 선택한 기준 영역에 설정된 기준 거리를 초과하면, 상기 최소 거리를 가지는 기준 영역의 기준점 좌표와 상기 중심 좌표 간의 거리 벡터의 방향에 위치하는 가상 포인터의 사이드 좌표를 추출하며, 추출한 사이드 좌표와 상기 최소 거리를 가지 는 기준 영역의 기준점 좌표 간의 거리를 산출하여 산출한 거리가 상기 기준 거리 이하이면 충돌로 판단할 수 있다. 상기 충돌 감지부는, 상기 객체의 형태 또는 크기 중 적어도 하나에 따라 상기 기준 거리의 길이 또는 기준 영 역들 간의 간격을 조정하여, 객체 단위로 기준 영역을 설정하고, 설정한 기준 영역을 이용하여 상기 객체를 분할할 수 있다. 또 다른 특징에 따르면, 컴퓨팅 장치는 충돌 감지 프로그램이 저장된 메모리, 그리고 상기 충돌 감지 프로그램 을 실행하는 적어도 하나의 프로세서를 포함하고, 상기 충돌 감지 프로그램은, 가상 공간에 표시한 가상 객체를 기준점 좌표와 기준 거리가 설정된 기준 영역 단위로 분할하여 상기 가상 객체를 구성하는 복수개의 기준 영역 들을 생성하고, 사용자 입력에 따라 상기 가상 공간에 표시한 포인터와 상기 기준 영역들의 기준점 좌표 간의 거리를 계산하여 계산한 거리가 상기 기준 거리 이하인 기준 영역이 존재하면, 상기 포인터와 상기 가상 객체 간의 충돌로 판단하는 명령어들(Instructions)을 포함할 수 있다. 상기 충돌 감지 프로그램은, 상기 포인터의 중심 좌표와 상기 기준점 좌표 간의 거리를 상기 복수개의 기준 영 역들에 대해 모두 계산하고, 가장 최소값을 가지는 거리가 산출된 기준 영역을 선택하여, 상기 가장 최소값을 가지는 거리가 상기 선택한 기준 영역에 설정된 기준 거리 보다 작으면 상기 포인터와 상기 가상 객체 간의 충 돌로 판단하는 명령어들을 포함할 수 있다. 상기 충돌 감지 프로그램은, 상기 가장 최소값을 가지는 거리가 상기 선택한 기준 영역에 설정된 기준 거리 보 다 큰 값이면, 상기 포인터에 설정된 복수개의 사이드 좌표들 중에서 상기 선택한 기준 영역의 기준점 좌표와 상기 중심 좌표 간의 거리 벡터 방향에 위치하는 적어도 하나의 사이드 좌표를 추출하고, 추출한 사이드 좌표와 상기 기준점 좌표 간의 거리가 상기 기준 거리 보다 작은 값이면, 상기 포인터와 상기 가상 객체 간의 충돌로 판단하는 명령어들을 포함할 수 있다."}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시에 따르면, 객체를 복수개의 기준 영역으로 분할하고, 각 기준 영역과 포인터 간의 거리가 기준 거리 이 내이면 충돌로 판단함으로써, 종래의 충돌 처리에 비하여 적은 컴퓨팅 연산으로 정밀한 인터랙션 감지가 가능하 고, 여러 객체가 중첩되거나 복잡한 구조의 객체, 크기가 큰 객체에 대해서도 선택 오류없이 인터랙션 감지가 가능하다. 또한, 객체와의 거리 판단 기준이 되는 포인터의 좌표를 중심 좌표와 복수개의 사이드 좌표로 구분 설정하고, 중심 좌표와 객체와의 거리가 기준 거리 이하가 아니면 거리 방향에 위치하는 사이드 좌표와 객체와의 거리가 기준 거리 이내인지를 판단하여 충돌을 감지함으로써, 비충돌로 판단되는 오류 문제를 최소화하여 정밀한 인터 랙션 감지가 가능하다."}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "아래에서는 첨부한 도면을 참고로 하여 본 개시의 실시예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지 식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 개시는 여러가지 상이한 형태로 구현될 수 있으며 여기에서 설명하는 실시예에 한정되지 않는다. 그리고 도면에서 본 개시를 명확하게 설명하기 위해서 설명과 관계없는 부분은 생략하였으며, 명세서 전체를 통하여 유사한 부분에 대해서는 유사한 도면 부호를 붙였 다. 명세서 전체에서, 어떤 부분이 어떤 구성요소를 \"포함\" 한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다 른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 또한, 명세서에 기재된 \"…부\", \"…기\", \"…모듈\" 등의 용어는 적어도 하나의 기능이나 동작을 처리하는 단위를 의미하며, 이는 하드웨어나 소프트웨어 또는 하드웨어 및 소프트웨어의 결합으로 구현될 수 있다. 본 발명에서 설명하는 장치들은 적어도 하나의 프로세서, 메모리 장치, 통신 장치 등을 포함하는 하드웨어로 구 성되고, 지정된 장소에 하드웨어와 결합되어 실행되는 프로그램이 저장된다. 하드웨어는 본 발명의 방법을 실행 할 수 있는 구성과 성능을 가진다. 프로그램은 도면들을 참고로 설명한 본 발명의 동작 방법을 구현한 명령어 (instructions)를 포함하고, 프로세서와 메모리 장치 등의 하드웨어와 결합하여 본 발명을 실행한다. 본 명세서에서 \"전송 또는 제공\"은 직접적인 전송 또는 제공하는 것뿐만 아니라 다른 장치를 통해 또는 우회 경 로를 이용하여 간접적으로 전송 또는 제공도 포함할 수 있다. 본 명세서에서 단수로 기재된 표현은 \"하나\" 또는 \"단일\" 등의 명시적인 표현을 사용하지 않은 이상, 단수 또는 복수로 해석될 수 있다. 본 명세서에서 도면에 관계없이 동일한 도면번호는 동일한 구성요소를 지칭하며, \"및/또는\" 은 언급된 구성 요 소들의 각각 및 하나 이상의 모든 조합을 포함한다. 본 명세서에서, 제1, 제2 등과 같이 서수를 포함하는 용어들은 다양한 구성요소들을 설명하는데 사용될 수 있지 만, 상기 구성요소들은 상기 용어들에 의해 한정되지는 않는다. 상기 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용된다. 예를 들어, 본 개시의 권리 범위를 벗어나지 않으면서 제1 구성요소는 제2 구성요소로 명명될 수 있고, 유사하게 제2 구성요소도 제1 구성요소로 명명될 수 있다. 본 명세서에서 도면을 참고하여 설명한 흐름도에서, 동작 순서는 변경될 수 있고, 여러 동작들이 병합되거나, 어느 동작이 분할될 수 있고, 특정 동작은 수행되지 않을 수 있다. 본 개시의 장치 또는 시스템은 적어도 하나의 프로세서가 명령어들(instructions)을 실행함으로써, 본 개시의 동작을 수행할 수 있도록 구성 및 연결된 컴퓨팅 장치이다. 컴퓨터 프로그램은 프로세서가 본 개시의 동작을 실 행하도록 기술된 명령어들(instructions)을 포함하고, 비일시적-컴퓨터 판독가능 저장매체(non-transitory computer readable storage medium)에 저장될 수 있다. 컴퓨터 프로그램은 네트워크를 통해 다운로드 되거나, 제품 형태로 판매될 수 있다. 도 1은 한 실시예에 따른 인터랙션 시스템의 구성도이다. 도 1을 참조하면, 인터랙션 시스템은 가상 공간에 표시된 객체와의 인터랙션을 제공하는 시스템으로서, 유 니티(Unity), 언리얼(Unreal) 등의 게임 엔진에 탑재될 수 있다. 인터랙션 시스템은 마우스, 제스처, 펜 등을 통한 인터랙션 기능을 제공할 수 있다. 인터랙션 시스템은 가상 공간에 사용자 입력에 따라 표시되는 포인터를 배치하고, 포인터와 객체 간의 충 돌이 감지되면 객체에 설정된 텍스처 할당, 애니메이션 설정, 소리 삽입, 이미지 삽입, 물리 시뮬레이션 등 다 양한 기능을 구현할 수 있다. 인터랙션 시스템은 가상 공간 감지부, 동작 감지부 및 충돌 감지부를 포함할 수 있다. 가상 공간 제어부는 유니티 엔진 등과 같은 공간 좌표 상에 3차원 가상 공간을 가시화하고, 가시화된 3차 원 가상 공간 내에 복수개의 객체를 출력한다. 여기서, 객체는 다면체일 수 있다. 객체는 유니티, 언리얼 등의 게임 엔진이 구현하는 3차원 공간 상에 배치되어 텍스처 할당, 애니메이션 설정, 소리 삽입, 이미지 삽입, 물리 시뮬레이션 등 다양한 기능을 제공하기 위한 인터랙션을 수행하기 위한 3차원 물 체일 수 있다. 가상 공간 제어부는 동작 감지부로부터 수신되는 사용자 입력에 대응하는 가상 포인터를 3차원 가상 공간 상에 출력한다. 가상 포인터는 이중 마우스, 제스처, 펜 등과 같은 다양한 입력 수단을 통해 감지된 사용 자 입력에 대응하는 위치에 출력될 수 있다. 여기서, 동작 감지부의 동작 자체는 공지된 기술을 사용하므로, 그 원리에 대한 설명은 생략한다. 가상 공간 제어부는 가상 공간 좌표 데이터와 현실 공간 좌표 시스템 사이의 데이터 변환을 통해 사용자 입력에 대응하는 가상 포인터를 가상 객체가 표시된 3차원 가상 공간 상에 표시할 수 있다. 충돌 감지부는 가상 공간 제어부로부터 가상 공간 상에서 가상 포인터의 위치를 나타내는 포인터 좌 표와 가상 객체의 위치를 나타내는 객체 좌표를 확인한다. 이때, 가상 객체는 객체가 차지하는 영역, 즉, 객체 영역으로 표현되므로, 객체 좌표는 단일 좌표는 아니고, 객체 영역에 포함되는 좌표들이다. 충돌 감지부는 가상 공간 제어부로부터 확인한 가상 공간 상에 표시된 객체 영역을 동일한 기준 거리 가 설정된 복수개의 기준 영역으로 분할한다. 이때, 각 기준 영역에는 기준 좌표가 설정되며, 기준 좌표는 기준 영역의 중심에 설정될 수 있다. 충돌 감지부는 포인터 좌표와 각각의 기준 영역의 기준 좌표들 간의 각각의 거리를 계산하여 각각의 거리 중 적어도 하나의 거리가 기준 거리 이내이면 포인터와 객체의 충돌로 판단한다. 충돌 감지부의 동작에 대해 이하, 도면을 참조하여 실시예 별로 보다 자세히 설명하기로 한다. 도 2는 한 실시예에 따른 충돌 감지 방법을 설명하는 순서도이고, 도 3은 실시예에 따른 기준 영역의 설정 예시 이고, 도 4는 실시예에 따른 포인터 좌표의 예시이고, 도 5는 한 실시예에 따른 기준 영역의 기준점 좌표와 포인터 좌표 간의 거리 연산을 통한 충돌 감지 원리를 설명하는 도면이고, 도 6은 객체 영역이 기준 영역보다 큰 크기를 가지는 경우를 설명하는 도면이고, 도 7은 한 실시예에 따른 복수개의 기준 영역으로 객체를 분할한 예 시도이고, 도 8은 다른 실시예에 따른 복수개의 기준 영역으로 객체를 분할한 예시도이고, 도 9는 또 다른 실시 예에 따른 복수개의 기준 영역으로 객체를 분할한 예시도이고, 도 10은 한 실시예에 따른 복수개의 기준 영역으 로 내부가 뚫린 형상의 객체를 분할한 예시도이고, 도 11은 다른 실시예에 따른 복수개의 기준 영역으로 내부가 뚫린 형상의 객체를 분할한 예시도이며, 도 12는 실시예에 따른 객체의 형상과 크기에 따른 기준 영역 설정 방 법을 설명하는 순서도이고, 도 13은 한 실시예에 따른 복수개의 기준 영역과 포인터 간의 거리 연산을 통해 충 돌을 감지하는 동작을 설명하는 예시도이다. 도 2를 참조하면, 충돌 감지부는 기준점을 포함하고 기준점으로부터 외곽까지의 거리인 기준 거리가 동일 한 기준 영역을 설정한다(S101). 도 3을 참조하면, 기준 영역은 3차원 구(Sphere) 형상이며, 도면에는 설명의 편의를 위해 2차원 평면 상의 원으 로 나타내었다. 기준 영역은 구의 중심에 기준점이 위치하고, 기준점은 객체와 기준 영역 간의 거리 계산시 기준 영역의 좌표로 사용된다. 기준 영역은 구의 둘레면인 외곽 어디에서든 외곽(x1, x2)과 기준점 간의 거리인 기준 거리가 'L'로 동일하다. 충돌 감지부는 3차원 가상 공간에 표시된 객체를 복수개의 기준 영역으로 분할한다(S102). 기준 영역은 내 부가 채워진 3차원 물체이므로, S102를 통해 객체의 내부 영역을 복수개의 기준 영역으로 채울 수 있다. 가상 공간 제어부는 동작 감지부로부터 사용자의 동작을 감지한 정보가 수신되면, 감지한 사용자의 동작 정보에 대응하여 가상 포인터를 3차원 가상 공간에 표시한다(S103). 충돌 감지부는 가상 객체를 구성하는 복수개의 기준 영역에 포함된 복수개의 기준점 좌표들과 가상 포인터 의 좌표 간의 거리를 각각 계산하고, 계산된 각각의 거리 중에서 가장 최소 거리를 가지는 기준점 좌표를 선택 한다(S104). 이때, 충돌 감지부는 동작 감지부로부터 사용자 동작 감지가 수신되면, 가상 공간 제어부로부터 가상 객체의 위치 좌표와 가상 포인터의 위치 좌표를 확인할 수 있다. 여기서, 가상 객체의 위치 좌표는 외곽 으로 둘러쌓인 가상 객체의 내부 영역 및 외곽을 모두 포함하는 좌표, 즉, 가상 객체 영역의 좌표이다. 도 4를 참조하면, 한 실시예에 따른 가상 포인터의 좌표는 중심에 위치하는 중심 좌표(P1)로 설정된다. 도 5를 참조하면, 본 개시의 기본 원리, 즉, 기준 영역과 포인터 간의 거리를 토대로 충돌 여부를 판단하는 기 본 원리에 대해 설명한다. 기준 거리가 'L'로 설정된 기준 영역의 기준 좌표(O)와 가상 포인터들의 중심 좌표, 즉, 포인터 좌표들(P11, P12) 간의 거리를 산출하는 예시를 나타낸다. 이때, 포인터 좌표는 포인터의 위치에 따라 구분하기 위해서, 'P11'과 'P12'로 호칭한다. 기준 좌표(O)는 (xo, yo)이고, 포인터 좌표(P11)는 (xP11, yP11)이며, 포인터 좌표(P12)는 (xP12, yP12)이다. 기준 좌표(O)와 각 포인터 좌표들(P11, P12) 간의 거리 dOP1, dOP2는 다음 수학식 1을 통해 계산될 수 있다. [수학식 1]"}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "dOP1, dOP2를 각각 기준 거리(L)와 비교하면, dOP1는 기준 거리(L) 보다 큰 값을 가지고, dOP2는 기준 거리(L) 보다 작은 값을 가진다. 따라서, 포인터 좌표(P11)와 기준점 좌표(O) 간의 거리(dOP1)는 기준 거리(L) 보다 큰 값을 가지므로, 포인터 좌표(P11)에 대해서는 비충돌로 판단된다. 또한, 포인터 좌표(P12)와 기준점 좌표(O) 간의 거리(dOP2)는 기준 거리(L) 보다 작은 값을 가지므로, 충돌로 판 단된다. 가상 객체의 크기가 기준 영역과 동일 또는 거의 유사하다면 단일 기준 영역만으로도 충돌 여부를 판단할 수 있지만, 가상 객체가 큰 경우에는 단일 기준 영역만으로 충돌 여부를 판단하기에는 한계가 있다. 도 6을 참조하면, 가상 객체가 기준 영역보다 훨 씬 큰 영역을 차지한다. 이 경우, 포인터 좌표(P11)와 기준점 좌표(O) 간의 거리(dOP1)는 기준 거리(L) 보다 작은 값을 가지므로, 충돌 발생이 감지된다. 하지만, 포인터 좌표(P12)는 객체 영역에 존재함에도 불구하고, 포인터 좌표(P12)와 기준점 좌표(O) 간의 거리 (dOP2)는 기준 거리(L) 보다 큰 값을 가지므로, 비충돌로 감지되는 오류가 발생한다. 이러한 오류를 방지하기 위 해 각 객체 별로 기준 거리를 설정하게 되면, 충돌 감지는 가능하지만 크기가 다른 객체와 중첩되거나 인접한 경우, 다른 객체 탐지로 오인 탐지되는 문제가 발생할 수 있다. 또한, 물체 마다 기준 거리를 다르게 설정하면, 특정 조건에 대해서는 오류가 발생할 수 있으므로, 기준 거리는 물체에 대해 동일하게 설정되는 것이 바람직하다. 이를 위해, 충돌 감지부는 S102에서 설명한 바와 같이, 동일한 기준 거리가 설정된 복수개의 기준 영역을 이용하여 객체 영역을 분할한다. 도 7을 참조하면, S102를 통해 복수개의 기준 영역들은 객체 영역의 크기만큼 채워지게 된다. 복수개의 기준 영 역들은 동일한 기준 거리(L)가 설정되어 있고, 기준 영역들 간의 간격(G) 역시 일정하다. 도 8을 참조하면, 복수개의 기준 영역들은 기준 거리(L')가 도 7의 기준 거리(L) 보다 큰 값을 가지도록 설정되 며, 이 경우, 도 7에 비해 기준 영역이 차지하지 못하는 객체 영역을 줄이면서 객체 영역을 촘촘하게 기준 영역 들로 채울 수 있다. 이때, 기준 영역들의 개수는 도 7과 동일하다. 도 9를 참조하면, 복수개의 기준 영역들은 도 7과 동일한 기준 거리(L)이지만, 기준 영역들 간의 간격(G')이 도 7의 간격(G)에 비해 좁게 설정된다. 이 경우, 도 7에 비해 기준 영역이 차지하지 못하는 객체 영역을 줄이면서 촘촘하게 객체 영역을 기준 영역들로 채울 수 있다. 이때, 기준 영역들의 개수는 도 7 및 도 8과 달리 더 많다. 도 7 ~ 도 9의 객체는 내부가 모두 채워진 다면체 형상을 예시로 하였다. 도 10을 참조하면, 내부가 뚫린 다면체 형상, 또는 내부가 뚫린 도넛 모양의 객체의 경우에 해당하며, 이러한 형상에서는 뚫린 부분을 제외한 객체 영역이 그 크기만큼 복수개의 기준 영역들로 채워져 있게 된다. 즉, 도 7 과 동일한 기준 거리(L)와 기준 영역들 간 간격(G)을 가진 기준 영역들로 객체 영역이 분할되었다. 도 11을 참조하면, 복수개의 기준 영역들은 도 10과 동일한 기준 거리(L)이지만, 기준 영역들 간의 간격(G')이 도 10의 간격(G)에 비해 좁게 설정된다. 이 경우, 기준 영역이 차지하지 못하는 객체 영역을 줄이면서 촘촘하게 객체 영역을 기준 영역들로 채울 수 있다. 이때, 기준 영역들의 개수는 도 10과 달리 더 많다. 이와 같이, 복수개의 기준 영역은 기준 거리(L, L'), 기준 영역들 간의 간격(G, G')이 조절됨으로써, 객체 영역 을 더욱 촘촘하게 분할할 수 있다. 기준 영역의 개수가 많아질 수록 충돌 감지는 정밀하게 이루어질 수 있지만, 기준 영역의 개수만큼 거리 연산이 이루어져야 하므로 연산량은 증가한다. 따라서, 충돌 감지부는 객체 영역의 크기나 형상을 고려하여 충돌 감지는 정밀하게 하면서도 연산량을 최소로 할 수 있도록 최적의 기준 영역의 개수를 설정하기 위해, 기준 거리 와 기준 영역들 간의 간격을 조정하게 된다. 도 12를 참조하면, 충돌 감지부는 가상 공간에 표시한 객체의 크기 및 객체의 형태를 기초로, 기준 영역의 크기 및 기준 영역 간 간격을 결정(S201)하고, 결정된 크기와 간격을 적용한 기준 영역을 설정(S202)할 수 있다. S201과 S202는 도 2의 S101에 포함되는 단계들일 수 있다. 이와 같이, 충돌 감지부는 객체의 형태 또는 크기 중 적어도 하나에 따라 기준 거리의 길이(L) 또는 기준 영역들 간의 간격(G)을 조정하여 객체 단위로 기준 영역을 설정할 수 있다. 충돌 감지부는 S201과 S202를 통해 설정된 기준 영역을 이용하여 도 2의 S102를 통해 가상 객체를 복수개 의 기준 영역을 채우도록 분할할 수 있다. 다시, 도 2를 참조하면, 충돌 감지부는 S104를 통해 선택된 최소 거리를 기준 거리와 비교(S105)하여, 최 소 거리가 기준 거리 이하인지 판단한다(S106). S105에서, 충돌 감지부는 포인터 좌표와 최소 거리인 기준점 좌표가 속하는 기준 영역의 기준 거리를 최소 거리와 비교한다. 충돌 감지부는 S106에서 최소 거리가 기준 거리 이하로 판단되는 경우, 포인터와 객체간 충돌 발생으로 판 단한다(S107). 반면, 충돌 감지부는 S106에서 최소 거리가 기준 거리를 초과하는 경우로 판단되면, 포인터와 객체간 비충 돌로 판단한다(S109). 도 13을 참조하면, 임의의 객체 영역을 5개의 기준 영역으로 분할한 경우를 예시로 한다. 이때, 5개의 기준 영 역은 각각 a, b, c, d, e가 기준점 좌표로 설정되고, 기준 거리는 L로 동일하다. 이때, 가상 포인터가 객체 영역의 특정 지점에 위치한 상태에서, 앞서 설명한 방법으로, 충돌 감지부는 포 인터 좌표(P1)와 각 기준점 좌표 간의 거리, 즉, daP1, dbP1, dcP1, ddP1, deP1를 계산하고, 계산한 각각의 거리(daP1, dbP1, dcP1, ddP1, deP1)를 L과 비교한다. 계산된 거리 중에서 가장 최소 거리는 daP1이고, daP1는 L 보다 작다. 따라 서, 충돌 감지부는 기준점 좌표가 a인 기준 영역과 가상 포인터가 충돌이 발생한 경우로 감지하게 된다. 한편, 도 13에는 객체 영역이 기준 영역으로 채워지지 않은 비분할 영역이 존재한다. 비분할 영역에서는 가상 포인터의 좌표가 객체 영역에 위치함에도 비충돌로 판단이 된다. 이러한 오류 문제는 두가지 실시예를 통해 해 결될 수 있다. 한 실시예에 따르면, 도 8, 도 9, 도 11에서 설명한 바와 같이, 기준 영역의 기준 거리 및 기준 영역들간 간격 을 조절하여 비분할 영역이 발생하지 않게 객체 영역을 기준 영역들로 촘촘히 채울 수 있다. 다른 실시예에 따르면, 포인터 좌표를 중심 좌표와 복수개의 사이드 좌표들로 구분 설정하고, 이를 이용하여 비 분할 영역에서도 충돌 감지가 이루어지도록 할 수 있다. 이러한 실시예에 대해 도 14 ~ 도 17를 통해 설명한다. 도 14는 다른 실시예에 따른 충돌 감지 방법을 설명하는 순서도이고, 도 15는 도 14의 실시예를 적용한 가상 포 인터의 좌표 설정 예시도이며, 도 16A, 16B, 16C는 도 14의 실시예에 따른 복수개의 기준 영역과 포인터 간의 거리 연산을 통해 충돌을 감지하는 동작을 설명하는 하나의 예시도이고, 도 17A, 17B는 도 14의 실시예에 따른 복수개의 기준 영역과 포인터 간의 거리 연산을 통해 충돌을 감지하는 동작을 설명하는 다른 예시도이다. 이때, 도 14는 도 2의 충돌 감지 방법과 다른 실시예로서, 도 2의 S101 ~ S107은 도 14의 S201 ~ S206과 동일 하다. 다만, 도 2에서는 최소 거리가 기준 거리 초과면 바로 비충돌로 판단하는 반면, 도 14에서는 추가 동작을 더 수행한다. 따라서, 도 2와 동일한 동작에 대해서는 간단히 설명하고, 추가 동작에 대해 중점적으로 설명한다. 도 14를 참조하면, 충돌 감지부는 기준점을 포함하고 기준점으로부터 외곽까지의 거리인 기준 거리가 동일 한 기준 영역을 설정(S201)하고, 가상 공간에 표시한 객체를 복수개의 기준 영역으로 분할한다(S202). 가상 공간 제어부는 사용자의 동작을 감지하면, 감지한 사용자의 동작에 대응하는 포인터를 가상 공간에 표시한다(S203). 충돌 감지부는 복수개의 기준 영역에 포함된 각각의 기준점 좌표들과 포인터 중심 좌표 간의 거리를 계산 하고, 계산된 거리 중에서 가장 최소 거리를 가지는 기준점 좌표를 선택한다(S204). 충돌 감지부는 S204에서 선택한 기준점 좌표가 소속된 기준 영역에 설정된 기준 거리와 최소 거리를 비교 하여(S205), 계산된 최소 거리가 설정된 기준 거리 이하인지 판단한다(S206). 충돌 감지부는 S206에서 최소 거리가 기준 거리 이하로 판단되면, 포인터와 객체 간 충돌로 판단한다 (S207). 충돌 감지부는 S206에서 최소 거리가 기준 거리 초과로 판단되면, 포인터 중심 좌표와 기준점 좌표 간의 거리의 방향과 근접하게 위치한 포인터 사이드 좌표를 추출한다(S208). 충돌 감지부는 S208에서 추출한 포인터 사이드 좌표와 기준점 좌표 간의 거리를 산출하고, 산출한 거리를 기준 거리와 비교(S209)하여 산출한 거리가 기준 거리 이하인지 판단한다(S210). 충돌 감지부는 S210에서 기준 거리 이하로 판단되면, 포인터와 객체 간 충돌로 판단한다(S207). 충돌 감지부는 S210에서 기준 거리 초과로 판단되면, 포인터와 객체간 비충돌로 판단한다(S211). 도 15를 참조하면, 가상 포인터의 좌표를 중심 좌표(P1)와 복수개의 사이드 좌표(P2, P3, P4, P5)로 구성한다. 이때, 중심 좌표는 도 2 ~ 도 13에서 설명한 포인터 좌표와 동일하다. 사이드 좌표는 중심 좌표를 기준으로 상/ 하/좌/우 또는 좌상/우상/좌하/우하의 위치에 설정될 수 있으며, 가상 포인터의 외곽 중에서 최외곽 지점들에 설정될 수 있다. 도 16A, 16B, 16C는 기준 영역으로 분할되지 않은, 즉, 기준 영역으로 채워지지 않은 객체 영역에 가상 포인터 가 위치하는 경우이다. 도 16A를 참조하면, 중심 좌표(P1)와 각 기준 영역의 기준 좌표들(a, b, c, d) 간의 거리(daP1, dbP1, dcP1, ddP1) 가 계산된다. 각 거리(daP1, dbP1, dcP1, ddP1)를 기준 거리(L)와 비교하면, 모든 거리가 기준 거리(L)보다 큰 값을 가진다. 이때, 충돌 감지부는 거리 중에서 가장 최소인 거리, 즉, 중심 좌표(P1)와 기준 좌표(b) 간의 거리(dbP1)를 선택한다. 도 16B를 참조하면, 중심 좌표(P1)와 기준 좌표(b) 간의 거리 벡터( )는 두 좌표(P1, b)를 기초로 계산되며, 거리 벡터( )의 방향에 위치하는 사이드 좌표는 P3이다. 도 16C를 참조하면, 충돌 감지부는 사이드 좌표(P3)와 기준 좌표(b) 간의 거리(dbP3)를 계산하고, 계산한 거리(dbP3)를 기준 거리(L)와 비교하면 기준 거리(L)보다 작음을 알 수 있다. 따라서, 충돌 감지부는 기준 좌표(b)인 기준 영역과 가상 포인터 간의 충돌 발생으로 판단하게 된다. 도 17A, 도 17B는 가상 포인터가 기준 영역의 외곽 근처에 위치하는 경우이다. 도 17A와 도 17B에서는 설명의 편의를 위해 기준 영역만 도시하였지만, 기준 영역은 객체 영역을 분할한 상태이다. 도 17A를 참조하면, 가상 포인터의 중심 좌표(P1)와 기준 좌표(O) 간의 거리(dOP1)는 기준 거리(L) 보다 큰 값을 가진다. 이때, 충돌 감지부는 중심 좌표(P1)와 기준 좌표(O) 간의 거리 벡터( )의 방향을 계산하고, 그 방향에 위치하는 사이드 좌표인 P4를 선택한다. 도 17B를 참조하면, 충돌 감지부는 P4와 중심 좌표(O) 간의 거리(dOP4)를 계산하고, 계산한 거리(dOP4)를 기 준 거리(L)와 비교한다. 이때, 계산한 거리(dOP4)는 기준 거리(L) 보다 작으므로, 충돌 감지부는 기준 영역 과 포인터의 충돌로 판단한다. 도 18은 도 2 ~ 도 13의 실시예와 도 14 ~ 도 17의 실시예를 비교한 도면이다. 도 18의 (a)와 (b)는 가상 포인터에 중심 좌표(P1)만 설정한 실시예(도 2 ~ 도 13)다. 이때, 앞서 설명하였듯이 포인터 좌표는 중심 좌표(P1) 하나이므로, 중심 좌표(P1)가 기준 영역으로 채워지지 않은 객체 영역에 위치하게 되면, 충돌임에도 비충돌로 판단되는 오류가 발생할 수 있다. 이러한 오류를 최대한 방지하기 위해 도 18의 (b)와 같이, 충돌 감지부는 기준 영역의 크기 및/또는 기준 영역들 간 간격을 조절하여 객체 영역을 기준 영역들로 촘촘히 분할함으로써, 기준 영역들로 채워지지 않는 객체 영역을 최소화할 수 있다.이때, 총 13개의 기준 영역의 기준점 좌표들과 중심 좌표(P1) 간의 각각의 거리가 기준 거리와 비교되어야 하므로, 총 13번의 거 리 계산을 필요로 한다. 도 18의 (c)와 (d)는 가상 포인터에 중심 좌표(P1) 및 복수개의 사이드 좌표(P2, P3, P4, P5)를 설정한 실시예 (도 14 ~ 도 17)다. 도 18의 (d)를 참조하면, 가상 포인터가 기준 영역으로 채워지지 않은 객체 영역에 위치하게 되면 복수개의 기 준 영역 중에서 중심 좌표(P1)와 기준 좌표 간의 거리가 가장 최소인 기준 영역을 선택하고, 그 선택한 기준 영 역의 기준 좌표와 중심 좌표(P1) 간의 거리 방향에 위치하는 사이드 좌표(P2, P3, P4, P5)와 기준점 좌표 간의 거리가 기준 거리 이내이면 충돌로 판단한다. 이때, 총 9개의 기준 영역의 기준점 좌표들과 중심 좌표(P1) 간의 각각의 거리가 기준 거리와 비교되어야 하므 로, 총 9번의 거리 계산을 필요로 하고, 추가로 사이드 좌표(P2, P3, P4, P5)와 기준점 좌표 간의 거리 계산이추가되어야 하므로, 총 10번의 거리 계산을 필요로 한다. 따라서, 도 14 ~ 도 17의 실시예를 적용하면, 상대적으로 정밀도를 증가시키면서 연산량을 줄일 수 있다. 한편, 도 19는 실시예에 따른 컴퓨팅 장치의 구성도이다. 도 19를 참고하면, 도 1 ~ 도 18에서 설명한 인터랙션 시스템은 적어도 하나의 프로세서에 의해 동작하는 컴퓨팅 장치로 구현될 수 있다. 컴퓨팅 장치는 하나 이상의 프로세서, 프로세서에 의하여 수행되는 컴퓨터 프로그램을 로드 하 는 메모리, 컴퓨터 프로그램 및 각종 데이터를 저장하는 저장 장치, 통신 인터페이스, 그리고 이들을 연결하는 버스를 포함할 수 있다. 이외에도, 컴퓨팅 장치는 다양한 구성 요소가 더 포함될 수 있다. 프로세서는 컴퓨팅 장치의 동작을 제어하는 장치로서, 컴퓨터 프로그램에 포함된 명령어들을 처리하 는 다양한 형태의 프로세서일 수 있고, 예를 들면, CPU(Central Processing Unit), MPU(Micro Processor Unit), MCU(Micro Controller Unit), GPU(Graphic Processing Unit) 또는 본 개시의 기술 분야에 잘 알려진 임 의의 형태의 프로세서 중 적어도 하나를 포함하여 구성될 수 있다. 메모리는 각종 데이터, 명령 및/또는 정보를 저장한다. 메모리는 본 개시의 동작을 실행하도록 기술된 명령어들이 프로세서에 의해 처리되 도록 해당 컴퓨터 프로그램을 저장 장치로부터 로드 할 수 있다. 메모리는 예를 들면, ROM(read only memory), RAM(random access memory) 등 일 수 있다. 메모리는 도 1 ~ 도 18에서 설명한 가상 공간 제어부, 동작 감지부 및 충돌 감지부의 동작 을 구현하는 명령어들이 처리되도록 컴퓨터 프로그램을 저장 장치로부터 로드 할 수 있다. 저장 장치는 컴퓨터 프로그램, 각종 데이터를 비임시적으로 저장할 수 있다. 저장 장치는 ROM(Read Only Memory), EPROM(Erasable Programmable ROM), EEPROM(Electrically Erasable Programmable ROM), 플래시 메모리 등과 같은 비휘발성 메모리, 하드 디스크, 착탈형 디스크, 또는 본 개시가 속하는 기술 분야에서 잘 알 려진 임의의 형태의 컴퓨터로 읽을 수 있는 기록 매체를 포함하여 구성될 수 있다. 통신 인터페이스는 유/무선 통신을 지원하는 유/무선 통신 모듈일 수 있다. 버스는 컴퓨팅 장치의 구성 요소 간 통신 기능을 제공한다. 컴퓨터 프로그램은, 프로세서에 의해 실행되는 명령어들(instructions)을 포함하고, 비일시적-컴퓨터 판독 가능 저장매체(non-transitory computer readable storage medium)에 저장되며, 명령어들은 프로세서가 본 개시의 동작을 실행하도록 만든다. 컴퓨터 프로그램은 네트워크를 통해 다운로드 되거나, 제품 형태로 판매 될 수 있다. 실험예 유니티, 언리얼 등의 게임 엔진에서는 3차원 공간 상에 객체를 배치하고 객체에 텍스처 할당, 애니메이션 설정, 소리 삽입, 이미지 삽입, 물리 시뮬레이션 등 다양한 기능을 부여하고, 객체에 대한 사용자 액션 발생시 해당 기능을 제공할 수 있다. 마우스, 제스처, 펜 등을 이용하여 사용자 인터랙션을 수행하기 위해서는 3차원 공간상 에 객체와 기준이 되는 포인터를 배치하고, 객체와 포인터에 충돌 감지를 위한 콜라이더(Collider) 및 리지드바 디(RigidBody) 등을 설치하고 파라미터 설정을 통하여 충돌 여부를 판단한다. 이러한 충돌 처리에 대해 유니티 엔진을 예시로 설명하면, 충돌 여부를 판단하고자 하는 객체에 콜라이더 (Collider) 컴포넌트(Component)와 리지드바디(Rigidbody Component)를 설치하고, 물리적 연산을 통하여 객체 와 포인터 간의 충돌을 판단하고, 객체의 선택 여부를 결정하는 인터랙션을 수행하게 된다. 유니티 엔진에서는 대표적으로 박스 콜라이더(Box Collider), 스피어 콜라이더(Sphere Collider), 캡슐 콜라이 더(Capsule Collider), 메시 콜라이더(Mesh Collider) 등을 사용할 수 있다. 각 콜라이더는 서로 다른 모양의 충돌 영역을 가지고 있다. 예를 들어, 박스 콜라이더의 경우, 육면체 형태의 충돌(Collision) 영역을 가지고 있고, 스피어 콜라이더의 경우, 구 형태의 충돌 영역을 가지고 있어 그 충돌 영 역의 내부에 사용자 액션에 따른 포인터가 유입되면 객체와 사용자 간 충돌 감지로 판단된다. 반면, 메시 콜라이더의 경우, 해당 물체의 메시 모양에 따라 구성되는 콜라이더로 정밀한 충돌을 감지할 때 사용할 수 있다. 도 20과 도 21은 종래에 유니티 엔진의 박스 콜라이더(Box Collider)를 설치하여 충돌을 감지하는 경우를 시뮬 레이션한 결과를 나타낸다. 도 20은 유니티 엔진의 인터랙션을 위한 물체 선택을 위해, 3차원 공간상에 배치된 물체와 박스 콜라이더의 설 치 예시를 나타내고, 도 21은 도 20에서 설치한 박스 콜라이더를 통해 물체의 충돌 감지 결과를 나타낸다. 도 20의 (a), (b), (c), (d)는 크기는 같고 색상이 다른 육면체 형상의 물체, 즉, 가상 객체를 나타낸다. 도 20의 (e)는 도 20의 (a), (b), (c), (d)의 객체를 모두 합한 만큼의 크기를 갖는 육면체 형상의 물체를 나타 낸다. 이때, 표현상의 이유로 육면체의 두께는 두껍지 않게 표현되었다. 도 20의 (f)는 도 20의 (a), (b), (c), (d)에 나타낸 물체들과, 도 20의 (e)에 나타낸 물체가 중첩되어 있다. 도 20의 (g)는 도 20의 (f)와 같이, 5개의 물체들이 중첩되어 있는 상태에서 인터랙션을 위한 가상 포인터가 함 께 표현된 것을 나타낸다. 도 20의 (h)는 4개의 물체가 모두 배치된 상태에서의 각 물체에 박스 콜라이더를 설치한 모습으로 같은 크기의 박스 콜라이더가 물체와 같은 크기로 각각의 크기에 위치한 것을 볼 수 있다. 도 20의 (h)에서는 자세한 비교를 위하여 전면부의 박스 콜라이더를 굵은 선으로 표현하였다. 도 20의 (i)는 도 20의 (e)에 배치한 물체에 대해 설치된 박스 콜라이더의 모습으로 도 20의 (h)의 전체 박스 콜라이더들을 합친 크기와 동일한 크기를 갖는 것을 볼 수 있다. 따라서, 도 20의 (h)와 도 20의 (i)를 비교하면, 물체 A의 위치에는 물체 A와 물체 E의 박스 콜라이더가 중첩되 는 것을 볼 수 있다. 물체 B, 물체 C, 물체 D의 위치에서도 마찬가지로 각각 물체 E의 박스 콜라이더와 중첩된 다. 따라서, 이 위치에서는 인터랙션을 위한 포인터와 물체 간에 충돌이 일어났을 때 어떤 물체가 충돌되었는지에 대한 판단이 필요하다. 이런 경우 특정 물체에 우선순위를 줄 수는 있겠지만 정확한 판단을 하기에는 어려운 점 이 있다. 따라서, 사용자가 원하는 물체에 대한 선택이 어려워지고 정밀한 인터랙션의 적용이 불가능하다는 문 제가 있다. 도 21을 참조하면, 도 20의 (h), (i)와 같이 박스 콜라이더를 설치한 상태에서, 마우스 포인터 형태의 포인터를 이용하여 물체와의 충돌/선택 실험을 한 결과를 나타낸다. 도 21에서는 선택된 물체에 대하여 노란색으로 변경되도록 구성하였다. 즉, 원래 물체의 색이 붉은색이었을 때 선택된 경우 노란색으로 바뀌도록 설정하여 선택 여부를 눈으로 확인할 수 있도록 하였다. 도 21(a), 도 21(b)를 보면 물체 A의 영역에서 충돌이 일어난 경우로 도 21(a)에서는 물체 A가 선택되었으나 도 21(b)에서는 물체 E가 선택되었다. 도 21(c), 도 21(d)를 보면 물체 B의 영역에서 충돌이 일어난 경우로 도 21(c)에서는 물체 B가 선택되었으나 도 21(d)에서는 물체 E가 선택되었다. 마찬가지로, 도 21(e), 도 21(f), 도 21(g), 도 21(h)에서도 역시 같은 위치에서 충돌이 일어나더라도 다른 결 과가 나온 것을 볼 수 있다. 이와 같이, 기존의 박스 콜라이더 등의 콜라이더(Collider)를 사용하여 물체의 충돌/선택을 수행하는 경우 충돌 에 대한 판단이 정확하지 않아 인터랙션을 위한 물체 선택에 오류가 발생한다. 따라서, 도 20 및 도 21에서 설명한 바와 같이, 복잡한 상황에 대한 충돌 감지에서 오류를 방지하기 위해서 각 물체와 포인터 간의 거리를 연산하여 충돌 여부를 판정하는 것이 필요하다. 도 22, 도 23, 도 24는 물체와 포인터 간의 거리를 연산하여 충돌 여부를 판정하도록 시뮬레이션한 결과를 설명 한다.도 22는 물체와 포인터 간의 거리 연산을 설명하는 개념도이고, 도 23은 도 22의 거리 연산을 통해 물체와 포인 터 간의 충돌을 감지한 결과를 나타내고, 도 24는 서로 크기가 다른 물체들이 인접하게 배치된 상태에서 물체와 포인터 간의 충돌을 감지한 결과를 나타낸다. 도 22(a)에 따르면, 물체 A를 확대한 모습으로 dA는 물체의 기준 위치에서 외곽까지의 거리를 나타낸다. 이 거 리는 대각선 거리 또는 수직/수평 거리, 최장 거리 등이 될 수 있다. 같은 방법으로 나머지 물체에 대해서도 각 물체의 중심에서 외부까지의 거리 dB, dC, dD를 정의할 수 있다. 이때, 기준 거리인 dA, dB, dC, dD는 동일하게 설정된다. 도 22(b)와 도 22(c)에 따르면, A, B, C, D 4개의 사각형 물체가 있고 마우스 포인터 모양의 포인터 P가 존재 한다. 일반적으로는 포인터의 중심 위치가 포인터의 기준 위치가 될 수 있으나 포인터의 특정 위치를 포인터의 기준 위치로 정할 수 있다. 물체의 기준 위치 역시 임의로 정할 수 있으나 주로 물체의 중심 위치를 기준 위치로 정할 수 있다. 각 사각형 물체의 기준 위치 좌표를 각각 (xA, yA), (xB, yB), (xC, yC), (xD, yD)이라고 하고, 포인터의 좌표를 (xP, yP)이라고 하면 각 물체와 포인터 간의 거리는 다음의 수학식 1과 같이 표현할 수 있다. [수학식 2]"}
{"patent_id": "10-2023-0107939", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "여기서, dAP, dBP, dCP, dDP는 각 물체, 즉, A 물체, B 물체, C 물체, D 물체 각각의 기준 위치 좌표와 포인터 P 의 기준 위치 좌표 간의 거리를 나타낸다. 이때, dAP, dBP, dCP, dDP 중에서 각 물체의 기준 거리 이내인 거리가 있으면, 그 거리에 해당하는 물체에 대하여 충돌된 것으로 판정한다. 3차원 물체에 대한 인터랙션의 요구 정밀도에 따라 단순히 거리만 판단하여 물체를 선 택할 수도 있으나 정밀한 인터랙션이 필요한 경우에는 포인터와 물체의 충돌 여부에 대한 판단이 필요하다. 도 22(b)를 참조하면, 포인터 P가 물체 A, B, C, D 사이에 있는 것을 볼 수 있다. 여기서, 각 물체의 기준 위치 와 포인터의 기준 위치 사이의 거리 dAP, dBP, dCP, dDP를 추출할 수 있고 이중 가장 작은 거리에 해당하는 물체가 포인터에서 가장 가까이 있다는 것으로 판단할 수 있다. 이때, 포인터와 물체 A의 거리가 가장 가깝기는 하지만 아직 충돌이 발생하지는 않았다. 즉, 포인터와 물체 간 의 거리, dAP가 물체 A의 기준 거리인 dA보다 큰 값을 가진다. 즉, 물체의 기준 위치와 포인터의 기준 위치 거리 dAP가 물체 A의 기준위치에서 외곽의 크기 dA보다 크기 때문에 충돌이 일어나지 않은 것으로 판단한다. 도 22(c)를 보면 포인터 P가 더 이동한 경우로 이를 보면 dAP가 dA보다 작은 것을 볼 수 있다. 따라서, 포인터 P 가 물체 A와 충돌된 것으로 판단할 수 있고 이를 기반으로 인터랙션을 위해 물체 A를 선택할 수 있다. 이와 같은 방식을 사용하여, 마우스 포인터 형태의 포인터를 이용하여 충돌/선택 실험을 한 결과를 도 23에 나 타내었다. 도 23을 참조하면, 도 21과 달리 박스 콜라이더가 설치되지 않고 물체와 포인터의 거리만을 이용해 충돌 여부를 판단한 것이다. 포인터 및 각 물체의 기준 위치는 각각의 중심 위치로 정하였다. 도 23(a)를 보면 물체 A의 영역에서 충돌이 일어난 경우로 도 23(a)에서는 물체A가 잘 선택된 것을 볼 수 있다. 마찬가지로 도 23(b), 도 23(c), 도 23(d)에서도, 각각 포인터가 위치한 물체 B, 물체 C, 물체 D가 잘 선택된것을 볼 수 있다. 도 23(e)는 물체 E의 중심부에 포인터가 위치한 경우로 물체 E가 잘 선택된 것을 볼 수 있다. 즉, 도 21의 결과 와 비교해 보면 박스 콜라이더를 이용하여 충돌 감지를 한 결과에 비해, 오작동 없이 물체에 대한 충돌 및 선택 에 대한 판단을 잘 하는 것을 확인할 수 있다. 그런데, 도 22 및 도 23과 달리, 서로 다른 크기의 두 물체가 인접하게 배치된 경우, 각 물체 별로 기준 거리가 동일하면 충돌 감지시 오작동이 발생할 수 있다. 도 24(a)에 따르면, 작은 크기의 물체 A, 큰 크기의 물체 B, 포인터 P가 존재한다. 도 24(b)에 따르면, 포인터가 물 체B에 중첩되어 있음에도 물체 A가 선택된 것을 볼 수 있다. 즉, 각 물체 간의 거리를 비교해 보면 포인터와 물체 A 간의 거리(dAP)가 포인터와 물체 B 간의 거리(dBP)보다 작은 것을 볼 수 있 다. 도 24(c)에 따르면, 포인터와 물체 A가 충돌이 발생되지 않았으나 물체 A가 선택된 것을 볼 수 있다. 이는 도 24(b)와 마찬가지로 기준 거리 값이 크게 잡혀 있어 충돌이 일어나지 않았지만 물체가 선택되는 오류가 발생한 것이다. 이는 모든 물체에 대해 기준 거리를 같은 값으로 정해 오류가 발생한 것으로 각 물체마다 기준 거리 값을 정해 준다면 해결될 수 있다. 하지만 물체가 회전을 한다든가 크기가 바뀌는 등의 변경이 생기게 되면 기준 거리가 바뀌어야 하는 문제들이 발생하고, 기준 거리가 물체 마다 다르게 되면, 매번 물체의 기준 거리를 설정해야 하는 문제가 있다. 따라서, 도 1 ~ 도 19에서 설명한 바와 같이, 동일한 기준 거리를 가지는 기준 영역을 복수개 설정하여 객체 영 역을 분할하고, 각 기준 영역과 포인터 간의 거리 연산을 통해 충돌을 감지함으로써, 기준 거리를 동일하게 설 정하여 충돌 감지의 편의성을 증대시키면서도 충돌이 발생한 객체를 정확하게 검출할 수 있어 충돌 감지 정밀도 는 높일 수 있다. 지금까지의 시뮬레이션은 박스 모양의 물체에 대해 수행하였고, 다양한 형상의 물체로 확장하기 위해 도넛 모양 의 물체를 대상으로 시뮬레이션을 수행하였다. 도 25는 도넛 모양의 물체에 다양한 종류의 콜라이더를 설치한 예시도이고, 도 26은 도넛 모양의 물체에 박스 콜라이더를 설치하여 충돌을 감지한 시뮬레이션 결과를 나타내고, 도 27은 도넛 모양의 물체에 메시 콜라이더를 설치하여 충돌을 감지한 시뮬레이션 결과를 나타낸다. 도 25(a)는 도넛 모양의 물체들을 나타내고, 도 25(b)는 각 도넛 모양의 물체들에 콜라이더를 설치한 것을 나타 낸다. 이때, 도 25의 (b-1)는 박스 콜라이더를 도넛 모양의 물체에 설치한 경우를 나타내고, 도 25의 (b-2)는 메시 콜 라이더(Mesh Collider)를 물체에 설치한 경우를 나타낸다. 도 25의 (b-1)의 박스 콜라이더의 경우 물체의 모양에 관계없이 박스 모양이다. 따라서, 물체가 없는 부분에도 콜라이더가 존재하여 실제로 물체에 충돌이 발생하지 않았는데도 충돌로 인지될 수 있는 문제가 발생한다. 도 25의 (b-2)의 메시 콜라이더의 경우 물체의 메시 모양에 따라 콜라이더 가 설치되어 물체의 메시 구조가 복 잡할수록 콜라이더의 구조도 복잡해지지만 물체의 모양에 맞추어 구성되기 때문에 정밀한 충돌 감지가 가능하다. 하지만 복잡한 콜라이더 구도로 인해 충돌 연산 감지를 위한 연산 시간이 늘어나게 된다. 또한, 콜라이더가 물체 표면에만 존재하기 때문에 포인터가 물체 표면을 지나 물체 안으로 들어가게 되면 충돌 감지가 되지 않는 문제가 발생하게 된다. 도 25의 (b-3)는 콜라이더가 설치되지 않고 기준 위치만 존재한다. 따라서, 콜라이더에 의한 충돌 감지가 아닌 기준 위치와 포인터와의 거리에 의해 충돌을 감지하게 되는데, 이 역시, 도넛 모양의 구조적 특징으로 인해 내 부에 빈 공간이 존재하므로, 이런 공간에서는 실제 물체가 없더라도 충돌로 인지가 되는 문제가 발생할 수 있다.도 26은 도넛 모양의 물체들에 박스 콜라이더를 설치하고, 박스 콜라이더를 통해 충돌을 감지하는 경우를 나타 낸다. 도 26(a)에 따르면, 3개의 도넛 모양의 물체에 모두 박스 콜라이더가 설치되어 있다. 도 26(b), 도 26(c), 도 26(d), 도 26(e)는 도넛 모양 물체의 상단, 하단, 좌측, 우측 부분에 포인터를 위치시 킨 경우로서, 포인터와 콜라이더 간의 충돌 발생으로 인하여 해당 물체가 잘 선택된 것을 알 수 있다. 여기서, 물체가 선택된 경우 노란색을 강조하도록 표현하여 선택된 도넛 모양의 물체 색이 바뀐 것을 볼 수 있 다. 도 26(f)의 경우, 포인터가 도넛 모양의 물체에서 벗어나 물체 전체의 중앙에 위치한 것을 볼 수 있다. 하지만, 이 위치 역시 박스 콜라이더에 포함되어 있어 충돌이 일어난 것으로 판단하고 물체가 선택되는 오류가 발생한 것을 볼 수 있다. 도 26(g)의 경우, 포인터가 도넛 모양의 물체 외부에 위치한 것을 볼 수 있다. 하지만 이 위치 역시 박스 콜라 이더에 포함되어 있어 충돌이 일어난 것으로 판단하고 물체가 선택되는 오류가 발생한 것을 볼 수 있다. 즉, 모 양이 복잡한 물체의 경우, 박스 콜라이더를 적용하게 되면 실제로는 물체가 없는 부분인데 충돌로 판정되는 오 류가 발생하게 된다. 도 27은 도넛 모양의 물체들에 메시 콜라이더를 설치하고, 메시 콜라이더를 통해 충돌을 감지하는 경우를 나타 낸다. 도 27의 (a)에 따르면, 세개의 도넛 모양의 물체가 가상 공간에 배치되어있고, 물체에는 메시 콜라이더가 설치 되어 있으나, 메시 콜라이더는 물체의 메시 모양과 같이 설치되기 때문에 물체와 함께 표현하면 잘 보이지 않아 제일 오른쪽 물체에는 메시 콜라이더만 표현하였다. 여기서, 물체가 선택된 경우 노란색을 강조하도록 표현하여 선택된 도넛 모양의 물체 색이 바뀐 것을 볼 수 있 다. 도 27의 (b), (c), (d), (e)는 각각 도넛 모양의 물체의 상단의 바깥 테두리, 좌측의 바깥 테두리, 상단의 안쪽 테두리, 좌측의 안쪽 테두리에 포인터가 존재한다. 이러한 테두리들에는 메시 콜라이더가 설치되어 있기 때문에 충돌이 발생하고 물체가 선택된 것을 볼 수 있다. 여기서, 물체가 선택된 경우 노란색을 강조하도록 표현하여 선택된 도넛 모양의 물체 색이 바뀐 것을 볼 수 있다. 하지만 도 27의 (f)와 (g)에 따르면, 포인터가 물체의 상부, 좌측에 겹쳐져 있지만, 충돌이 발생하지 않고 선택 도 되지 않은 것을 볼 수 있다. 이는 메시 콜라이더는 물체의 표면에만 존재하고 내부에는 존재하지 않기 때문 에 발생하는 문제로서 메시 콜라이더만을 사용하여서는 해결이 불가능하다. 즉, 연산 성능을 위하여 박스 콜라이더, 스피어 콜라이더 등을 사용하게 되면 성능은 좋아지나 원하지 않는 충 돌 감지가 발생하게 될 수 있고, 정밀한 감지를 위하여 메시 콜라이더를 사용하게 되면 연상 성능이 저하되는 문제가 발생한다. 이에, 본 발명의 실시예에서는 객체 영역을 분할하는 복수개의 기준 영역들이 내부가 채워진 구 형상으로 생성 됨으로써, 객체의 표면을 지나 안쪽에 포인터가 위치하더라도 효과적으로 객체와의 충돌을 탐지할 수 있다. 도 28은 도넛 모양의 물체에 본 발명의 실시예를 적용하여 충돌을 감지한 결과를 나타낸다. 여기서, 물체가 선택된 경우 노란색을 강조하도록 표현하여 선택된 도넛 모양의 물체 색이 바뀐 것을 볼 수 있 다. 도 28(a)를 보면, 도넛 모양의 물체들에 각각 8개의 노란색 점으로 표현된 기준 위치가 설정되어 있다. 이 기준 위치는 도 10 또는 도 11에서 설명한 바와 같이, 내부에 비어있는 부분을 제외한 물체 영역을 채우는 복수개의 기준 영역들 각각의 기준점 좌표이다. 이때, 총 8개의 기준 영역들로 물체 영역을 분할하였다. 도 28의 (b)는 도넛 모양 물체의 상단에 포인터가 위치한 경우로서, 상단에 위치하는 기준점 좌표와 포인터 간 의 거리가 기준 거리 이내에 존재하므로, 물체와 포인터간 충돌 발생으로 탐지됨을 알 수 있다. 도 28의 (c)는 도넛 모양 물체의 하단에 포인터가 위치하고, 도 28의 (d)는 도넛 모양 물체의 좌측에 포인터가 위치하며, 도 28의 (e)는 도넛 모양 물체의 우측에 포인터가 위치한다. 도 28의 (b)에서 설명한 바와 마찬가지 로, 하단, 좌측, 우측 각각에 위치하는 기준점 좌표와 포인터 간의 거리가 기준 거리 이내에 존재하므로, 물체 와 포인터간 충돌 발생으로 탐지됨을 알 수 있다. 또한, 도 28의 (f)는 포인트가 도넛의 내부 뚫린 공간에 위치하는 경우로서, 포인터가 물체의 중심에 위치하더 라도 모든 기준점 좌표와의 거리가 기준 거리를 초과하므로, 충돌이 발생하지 않은 것으로 판단되었다. 도 28의 (g)는 포인터가 도넛 모양의 물체 외부에 위치한 것으로서, 이 위치는 모든 기준점 좌표와의 거리가 기 준 거리를 초과하므로, 역시, 충돌이 발생하지 않은 것으로 판단된 것을 볼 수 있다. 따라서, 본 발명의 실시예를 적용하면, 기존 콜라이더 기반의 충돌 판단에 비하여 더욱 정밀하게 포인터와 물체 간의 충돌 여부를 판단할 수 있고 충돌 탐지 오류 확률을 줄일 수 있어 정밀한 인터랙션이 가능하다. 이상의 설명은 3차원 공간에 대한 정보를 2차원으로 프로젝션 하여 2차원의 x, y좌표 정보만을 사용하였다. 하 지만 원래의 정보가 3차원 정보를 가지고 있기 때문에 3차원 x, y, z 좌표 정보를 사용하는 것도 가능하다. 따 라서 용도에 따라 2차원 정보 또는 3차원 정보를 선택적으로 적용하여 본 발명의 실시예에 따른 거리 연산이 가 능하다. 이상에서 본 발명의 실시예에 대하여 상세하게 설명하였지만 본 발명의 권리범위는 이에 한정되는 것은 아니고 다음의 청구범위에서 정의하고 있는 본 발명의 기본 개념을 이용한 당업자의 여러 변형 및 개량 형태 또한 본 발명의 권리범위에 속하는 것이다."}
{"patent_id": "10-2023-0107939", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 한 실시예에 따른 인터랙션 시스템의 구성도이다. 도 2는 한 실시예에 따른 충돌 감지 방법을 설명하는 순서도이다. 도 3은 실시예에 따른 기준 영역의 설정 예시이다. 도 4는 실시예에 따른 포인터 좌표의 예시이다. 도 5는 한 실시예에 따른 기준 영역의 기준점 좌표와 포인터 좌표 간의 거리 연산을 통한 충돌 감지 원리를 설 명하는 도면이다. 도 6은 객체 영역이 기준 영역보다 큰 크기를 가지는 경우를 설명하는 도면이다. 도 7은 한 실시예에 따른 복수개의 기준 영역으로 객체를 분할한 예시도이다. 도 8은 다른 실시예에 따른 복수개의 기준 영역으로 객체를 분할한 예시도이다. 도 9는 또 다른 실시예에 따른 복수개의 기준 영역으로 객체를 분할한 예시도이다. 도 10은 한 실시예에 따른 복수개의 기준 영역으로 내부가 뚫린 형상의 객체를 분할한 예시도이다. 도 11은 다른 실시예에 따른 복수개의 기준 영역으로 내부가 뚫린 형상의 객체를 분할한 예시도이다. 도 12는 실시예에 따른 객체의 형상과 크기에 따른 기준 영역 설정 방법을 설명하는 순서도이다. 도 13은 한 실시예에 따른 복수개의 기준 영역과 포인터 간의 거리 연산을 통해 충돌을 감지하는 동작을 설명하 는 예시도이다.도 14는 다른 실시예에 따른 충돌 감지 방법을 설명하는 순서도이다. 도 15는 도 14의 실시예를 적용한 가상 포인터의 좌표 설정 예시도이다. 도 16A, 16B, 16C는 도 14의 실시예에 따른 복수개의 기준 영역과 포인터 간의 거리 연산을 통해 충돌을 감지하 는 동작을 설명하는 하나의 예시도이다. 도 17A, 17B는 도 14의 실시예에 따른 복수개의 기준 영역과 포인터 간의 거리 연산을 통해 충돌을 감지하는 동 작을 설명하는 다른 예시도이다. 도 18은 도 2 ~ 도 13의 실시예와 도 14 ~ 도 17의 실시예를 비교한 도면이다. 도 19는 실시예에 따른 컴퓨팅 장치의 구성도이다. 도 20은 유니티 엔진의 인터랙션을 위한 물체 선택을 위해, 3차원 공간상에 배치된 물체와 박스 콜라이더의 설 치 예시를 나타낸다. 도 21은 도 20에서 설치한 박스 콜라이더를 통해 물체의 충돌 감지 결과를 나타낸다. 도 22는 물체와 포인터 간의 거리 연산을 설명하는 개념도이다. 도 23은 도 22의 거리 연산을 통해 물체와 포인터 간의 충돌을 감지한 결과를 나타낸다. 도 24는 서로 크기가 다른 물체들이 인접하게 배치된 상태에서 물체와 포인터 간의 충돌을 감지한 결과를 나타 낸다. 도 25는 도넛 모양의 물체에 다양한 종류의 콜라이더를 설치한 예시도이다. 도 26은 도넛 모양의 물체에 박스 콜라이더를 설치하여 충돌을 감지한 시뮬레이션 결과를 나타낸다. 도 27은 도넛 모양의 물체에 메시 콜라이더를 설치하여 충돌을 감지한 시뮬레이션 결과를 나타낸다. 도 28은 도넛 모양의 물체에 본 발명의실시예를 적용하여 충돌을 감지한 결과를 나타낸다."}
