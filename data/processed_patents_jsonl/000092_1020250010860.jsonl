{"patent_id": "10-2025-0010860", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0021503", "출원번호": "10-2025-0010860", "발명의 명칭": "디바이스 인지를 바탕으로 인공지능 기반의 모델을 변환하기 위한 방법 및 장치", "출원인": "주식회사 노타", "발명자": "최신국"}}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컴퓨팅 장치에 의해 수행되는, 디바이스 인지(device awareness)를 바탕으로 인공지능 기반의 모델을 타겟 디바이스에 적합하도록 변경하기 위한 방법으로서,상기 인공지능 기반의 모델에 대응되는 모델 정보 및 상기 인공지능 기반의 모델이 구동될 상기 타겟 디바이스에 대응되는 타겟 디바이스 정보를 획득하는 단계;상기 모델 정보에 기초하여 상기 인공지능 기반의 모델을 구성하는 모델 연산자(operator)들을 결정함으로써 상기 모델 연산자들을 포함하는 모델 연산자 리스트를 획득하고, 그리고 상기 타겟 디바이스 정보에 기초하여 상기 모델 연산자들의 변경의 기준이 되고 그리고 상기 타겟 디바이스에서 지원 가능한 타겟(target) 연산자들을결정함으로써 상기 타겟 연산자들을 포함하는 타겟 연산자 리스트를 생성하는 단계; 상기 모델 연산자 리스트에 포함된 상기 모델 연산자들을 상기 타겟 연산자 리스트에 포함된 상기 타겟 연산자들과 비교하고, 그리고 상기 비교의 결과에 기초하여 상기 모델 연산자 리스트 내에서의 모델 연산자 단위로 모델 연산자를 변경할지 여부를 결정하는 단계; 및상기 결정에 따라 변경될 모델 연산자를 대체 연산자로 변경함으로써, 상기 인공지능 기반의 모델을 상기 타겟디바이스에서 구동 가능한 타겟 모델로 변경하는 단계;를 포함하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 대체 연산자는, 상기 변경될 모델 연산자와 동일하지는 않지만 상기 변경될 모델 연산자와 대응되는 기능을 수행하는 연산자로서 상기 타겟 연산자 리스트에 포함된 타겟 연산자와 매칭되는 연산자이며, 그리고상기 타겟 모델은, 상기 인공지능 기반의 모델에 포함된 상기 모델 연산자들 중 적어도 일부가 변경된, 상기 타겟 디바이스에서 구동 가능한 모델인,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 타겟 연산자 리스트를 획득하는 단계는,상기 타겟 디바이스 정보로부터, 상기 타겟 디바이스가 지원하는 연산자들이 상기 인공지능 기반의 모델의 연산자를 대체하였을 때 재학습이 필요한지 여부를 나타내는 제 1 재학습 특성을 결정하고, 상기 모델 정보로부터, 상기 인공지능 기반의 모델의 재학습이 가능한지 여부를 나타내는 제 2 재학습 특성을결정하고, 그리고 상기 제 1 재학습 특성 및 상기 제 2 재학습 특성에 기초하여, 상기 모델 연산자들 중 적어도 하나를 변경하기위한 기준이 되는 상기 타겟 연산자들을 결정하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,공개특허 10-2025-0021503-3-상기 타겟 연산자 리스트를 획득하는 단계는:상기 모델 정보에 포함된 모델 타입에 기초하여, 상기 인공지능 기반의 모델의 재학습이 가능한지 여부를 결정하는 단계; 및상기 재학습이 불가능하다고 결정된 경우, 상기 타겟 디바이스에서 지원가능한 연산자들 중에서 학습이 필요한연산자들을 제외함으로써, 상기 모델 연산자들과 비교될 상기 타겟 연산자들을 결정하는 단계;를 포함하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 모델 연산자를 변경할지 여부를 결정하는 단계는:상기 모델 연산자 리스트에 포함된 상기 모델 연산자들 각각에 대해서, 상기 인공지능 기반의 모델의 입력 연산자로부터 출력 연산자로의 순서에 따라서, 상기 모델 연산자 리스트에 포함된 모델 연산자가 상기 타겟 연산자리스트에 포함되는 상기 타겟 연산자들 중 적어도 하나와 매칭되는지 여부를 결정하는 단계; 및상기 모델 연산자들 중에서 상기 타겟 연산자 리스트에 포함되는 타겟 연산자와 매칭되는 제 1 모델 연산자를변경하지 않을 것으로 결정하고, 그리고 상기 비교의 결과 상기 모델 연산자들 중에서 상기 타겟 연산자 리스트에 포함되는 타겟 연산자와 매칭되지 않는 제 2 모델 연산자를 변경할 것으로 결정하는 단계; 를 포함하는, 방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 변경될 모델 연산자의 연산자 타입이 상이한 경우, 상기 모델 연산자가 타겟 연산자와 대응되도록 또는 상기 타겟 연산자와 유사한 기능을 갖도록 상기 모델 연산자를 상기 대체 연산자로 변경하는 연산자 변경 알고리즘이 상이한,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 1 항에 있어서,상기 인공지능 기반의 모델을 상기 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하는 단계는,상기 변경될 모델 연산자에 대응되는 연산자 특성(operator characteristic)에 기초하여, 상기 변경될 모델 연산자의 연산자 타입(type)을 결정하는 단계 - 상기 연산자 타입은, 연산자가 수행하는 동작을 기준으로 결정된연산자 동작 특성 또는 연산자의 기능을 기준으로 결정된 연산자 기능 특성 따라서 분류되어 연산자들 각각에할당됨 -; 및상기 결정된 연산자 타입에 기초하여 상기 변경될 모델 연산자를 대체 연산자로 변경함으로써, 상기 인공지능기반의 모델을 상기 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하는 단계;를 포함하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7 항에 있어서,상기 연산자 타입은: 공개특허 10-2025-0021503-4-활성화(activation) 연산을 나타내는 제 1 연산자 타입; 사전결정된 레벨 미만의 연산 난이도(operation difficulty)를 가지는 단순 연산을 나타내는 제 2 연산자 타입;및 상기 단순 연산이 아닌 레이어 관련 연산(layer-related operation)을 나타내는 제 3 연산자 타입;을 포함하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 7 항에 있어서,상기 결정된 연산자 타입에 기초하여, 상기 변경될 모델 연산자를 대체 연산자로 변경하는 것은,입력값에 대한 출력값의 유사도 판단을 이용하여 연산자를 변경하는 제 1 연산자 변경 알고리즘, 연산의 수학적결과의 일치 여부를 기준으로 연산자를 변경하는 제 2 연산자 변경 알고리즘, 및 연산의 수학적 결과의 유사도를 기준으로 연산자를 변경하는 제 3 연산자 변경 알고리즘 중에서 상기 결정된 연산자 타입에 따라서 결정된하나의 연산자 변경 알고리즘을 이용하여 상기 변경될 모델 연산자를 상기 대체 연산자로 변경하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 7 항에 있어서,상기 결정된 연산자 타입에 기초하여, 상기 변경될 모델 연산자를 대체 연산자로 변경하는 것은,상기 변경될 모델 연산자의 연산자 타입이 활성화 연산을 나타내는 제 1 연산자 타입으로 결정된 경우 제 1 연산자 변경 알고리즘에 기초하여 상기 변경될 모델 연산자를 상기 대체 연산자로 변경하며, 그리고상기 제 1 연산자 변경 알고리즘은, 특정 입력값에 대하여 상기 변경될 모델 연산자의 활성화 출력값과 타겟 연산자의 활성화 출력값 간의 유사도를 이용하여 상기 변경될 모델 연산자를 상기 대체 연산자로 변경하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 7 항에 있어서,상기 결정된 연산자 타입에 기초하여, 상기 변경될 모델 연산자를 대체 연산자로 변경하는 것은,상기 변경될 모델 연산자의 연산자 타입이 사전결정된 레벨 미만의 연산 난이도를 가지는 단순 연산을 나타내는제 2 연산자 타입으로 결정된 경우, 제 2 연산자 변경 알고리즘에 기초하여 상기 변경될 모델 연산자를 상기 대체 연산자로 변경하며, 그리고상기 제 2 연산자 변경 알고리즘은, 상기 변경될 모델 연산자의 연산과 수식적으로 대응되는 둘 이상의 연산들의 조합으로 상기 모델 연산자를 변경하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 7 항에 있어서,상기 결정된 연산자 타입에 기초하여, 상기 변경될 모델 연산자를 대체 연산자로 변경하는 것은,상기 변경될 모델 연산자의 연산자 타입이 사전결정된 레벨 미만의 연산 난이도를 가지는 단순 연산이 아닌 레이어 관련 연산을 나타내는 제 3 연산자 타입으로 결정된 경우, 제 3 연산자 변경 알고리즘에 기초하여 상기 변경될 모델 연산자를 상기 대체 연산자로 변경하며, 그리고상기 제 3 연산자 변경 알고리즘은, Kernel size, pad, stride 및 레이어 개수 중 적어도 하나를 이용하여 결정공개특허 10-2025-0021503-5-된, 연산자의 수식적인 유사도를 이용하여 상기 변경될 모델 연산자를 상기 대체 연산자로 변경하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 12 항에 있어서,상기 제 3 연산자 변경 알고리즘에서, 사용자 입력에 따른 가중치 또는 우선순위가 상기 Kernel size, pad,stride 및 레이어 개수 중 적어도 하나에 적용되는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 7 항에 있어서,상기 인공지능 기반의 모델을 상기 타겟 디바이스에서 구동 가능한 상기 타겟 모델로 변경하는 단계는:상기 결정된 연산자 타입에 기초하여 상기 모델 연산자가 변경될 상기 대체 연산자를 결정하는 단계; 상기 결정된 대체 연산자와 상기 모델 연산자 간의 유사도에 기초하여, 상기 모델 연산자의 상기 대체 연산자로의 변경 여부를 결정하는 단계; 및상기 대체 연산자로 변경한다고 결정된 경우, 상기 모델 연산자를 상기 대체 연산자로 변경하는 단계;를 포함하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 7 항에 있어서,상기 인공지능 기반의 모델을 상기 타겟 디바이스에서 구동 가능한 상기 타겟 모델로 변경하는 단계는:상기 결정된 연산자 타입에 기초하여 상기 모델 연산자가 변경될 상기 대체 연산자를 결정하는 단계; 상기 결정된 대체 연산자가 상기 타겟 연산자 리스트에 포함되는지 여부에 기초하여, 상기 모델 연산자의 변경여부를 결정하는 단계; 및상기 대체 연산자로 변경한다고 결정된 경우, 상기 모델 연산자를 상기 대체 연산자로 변경하는 단계;를 포함하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 1 항에 있어서,상기 변경된 타겟 모델에서 변경된 대체 연산자를 나타내는 제 1 결과, 및 상기 변경된 타겟 모델이 재학습이필요한지 여부를 나타내는 제 2 결과를 제공하는 단계;를 더 포함하는,방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 16 항에 있어서,상기 인공지능 기반의 모델이 변경된 상기 타겟 모델을 상기 타겟 디바이스에서 실행함에 따라 획득되는 벤치마크 결과를 제공하는 단계;를 더 포함하는,공개특허 10-2025-0021503-6-방법."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "컴퓨터 판독가능 저장 매체에 저장되는 컴퓨터 프로그램으로서, 상기 컴퓨터 프로그램은 컴퓨팅 장치에 의해 실행 시 상기 컴퓨팅 장치로 하여금 디바이스 인지를 바탕으로 인공지능 기반의 모델을 타겟 디바이스에 적합하도록 변경하기 위하여 이하의 동작들을 수행하도록 하며, 상기 동작들은:상기 인공지능 기반의 모델에 대응되는 모델 정보 및 상기 인공지능 기반의 모델이 구동될 상기 타겟 디바이스에 대응되는 타겟 디바이스 정보를 획득하는 동작;상기 모델 정보에 기초하여 상기 인공지능 기반의 모델을 구성하는 모델 연산자(operator)들을 결정함으로써 상기 모델 연산자들을 포함하는 모델 연산자 리스트를 획득하고, 그리고 상기 타겟 디바이스 정보에 기초하여 상기 모델 연산자들의 변경의 기준이 되고 그리고 상기 타겟 디바이스에서 지원 가능한 타겟(target) 연산자들을결정함으로써 상기 타겟 연산자들을 포함하는 타겟 연산자 리스트를 생성하는 동작; 상기 모델 연산자 리스트에 포함된 상기 모델 연산자들을 상기 타겟 연산자 리스트에 포함된 상기 타겟 연산자들과 비교하고, 그리고 상기 비교의 결과에 기초하여 상기 모델 연산자 리스트 내에서의 모델 연산자 단위로 모델 연산자를 변경할지 여부를 결정하는 동작; 및상기 결정에 따라 변경될 모델 연산자를 대체 연산자로 변경함으로써, 상기 인공지능 기반의 모델을 상기 타겟디바이스에서 구동 가능한 타겟 모델로 변경하는 동작;을 포함하는,컴퓨터 판독가능 저장 매체에 저장되는 컴퓨터 프로그램."}
{"patent_id": "10-2025-0010860", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "디바이스 인지를 바탕으로 인공지능 기반의 모델을 타겟 디바이스에 적합하도록 변경하기 위한 컴퓨팅장치로서,적어도 하나의 프로세서; 및메모리;를 포함하며,상기 적어도 하나의 프로세서는:상기 인공지능 기반의 모델에 대응되는 모델 정보 및 상기 인공지능 기반의 모델이 구동될 상기 타겟 디바이스에 대응되는 타겟 디바이스 정보를 획득하고;상기 모델 정보에 기초하여 상기 인공지능 기반의 모델을 구성하는 모델 연산자(operator)들을 결정함으로써 상기 모델 연산자들을 포함하는 모델 연산자 리스트를 획득하고, 그리고 상기 타겟 디바이스 정보에 기초하여 상기 모델 연산자들의 변경의 기준이 되고 그리고 상기 타겟 디바이스에서 지원 가능한 타겟(target) 연산자들을결정함으로써 상기 타겟 연산자들을 포함하는 타겟 연산자 리스트를 생성하고; 상기 모델 연산자 리스트에 포함된 상기 모델 연산자들을 상기 타겟 연산자 리스트에 포함된 상기 타겟 연산자들과 비교하고, 그리고 상기 비교의 결과에 기초하여 상기 모델 연산자 리스트 내에서의 모델 연산자 단위로 모델 연산자를 변경할지 여부를 결정하고; 그리고상기 결정에 따라 변경될 모델 연산자를 대체 연산자로 변경함으로써, 상기 인공지능 기반의 모델을 상기 타겟디바이스에서 구동 가능한 타겟 모델로 변경하는;컴퓨팅 장치."}
{"patent_id": "10-2025-0010860", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "컴퓨팅 장치에 의해 수행되는, 디바이스 인지(device awareness)를 바탕으로 인공지능 기반의 모델을 타겟 디바 이스에 적합하도록 변경하기 위한 방법이 개시된다. 상기 방법은, 상기 인공지능 기반의 모델에 대응되는 모델 정보 및 상기 인공지능 기반의 모델이 구동될 상기 타겟 디바이스의 특성을 나타내는 타겟 디바이스 정보를 획득 (뒷면에 계속)"}
{"patent_id": "10-2025-0010860", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시내용은 인공지능 기술에 관한 것으로 보다 구체적으로 디바이스 인지를 바탕으로 인공지능 기반의 모델 을 변환하는 기술에 관한 것이다."}
{"patent_id": "10-2025-0010860", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 기술의 발전으로 인해, 다양한 형태의 인공지능 기반의 모델이 개발되고 있다. 다양한 인공지능 기반 의 모델들을 처리하기 위한 연산 자원에 대한 요구 또한 증가하고 있으며, 관련 산업 내에서도 새로운 능력을 가지는 하드웨어들의 개발이 지속적으로 이루어지고 있다. 개인용 컴퓨터, 스마트폰, 자동차, 웨어러블 장치 및 로봇 등과 같은 네트워크 상에서의 단말들에서 직접적인 연산이 이루어질 수 있는 엣지(edge) 인공지능에 대한 수요가 증가함에 따라, 하드웨어 리소스를 고려한 인공지 능 기반의 모델에 대한 연구가 이루어지고 있다. 이처럼 엣지 인공지능 기술의 발전과 함께 인공지능 기술 분야에서 하드웨어에 대한 중요성이 커짐에 따라, 인 공지능 기반 솔루션을 개발하고 런칭하기 위해서는, 인공지능 기반의 모델 뿐만 아니라 인공지능 기반의 모델이 실행될 다양한 하드웨어에 대한 충분한 지식 또한 함께 요구된다. 예를 들어, 특정 도메인에서 뛰어난 성능을 가지는 모델이 존재하더라도, 이러한 모델에 대한 추론 성능이 모델이 실행될 하드웨어 별로 상이할 수 있다. 특정 도메인에서 최적의 성능을 보유한 모델이 서비스가 제공될 특정 하드웨어에서 지원되지 않는 상황 또한 존 재할 수 있다. 이에 따라, 제공하고자 하는 서비스에 적합한 인공지능 기반의 모델과 인공지능 기반의 모델에 적합한 하드웨어를 함께 결정하기 위해서는 인공지능 기술과 하드웨어 기술에 대한 높은 수준의 배경 지식과 방 대한 양의 리소스가 요구될 수 있다. 선행기술문헌 특허문헌 (특허문헌 0001) 미국 특허공개 번호 제2022-0121927호"}
{"patent_id": "10-2025-0010860", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시내용은 전술한 배경기술에 대응하여 안출된 것으로, 타겟 디바이스에서 구동되도록 인공지능 기반의 모 델을 효율적으로 변환하기 위함이다. 본 개시내용의 기술적 과제들은 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술 적 과제들은 아래의 기재로부터 당업자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2025-0010860", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시내용의 일 실시예에 따라 컴퓨팅 장치에 의해 수행되는, 디바이스 인지(device awareness)를 바탕으로 인공지능 기반의 모델을 타겟 디바이스에 적합하도록 변경하기 위한 방법이 개시된다. 상기 방법은, 상기 인공 지능 기반의 모델에 대응되는 모델 정보 및 상기 인공지능 기반의 모델이 구동될 상기 타겟 디바이스의 특성을 나타내는 타겟 디바이스 정보를 획득하는 단계, 상기 모델 정보에 기초하여 상기 인공지능 기반의 모델에 포함 되는 모델 연산자(operator)들을 결정함으로써 상기 모델 연산자들을 포함하는 모델 연산자 리스트를 획득하고, 그리고 상기 타겟 디바이스 정보에 기초하여 상기 모델 연산자들의 변경의 기준이 되는 타겟(target) 연산자들 을 결정함으로써 상기 타겟 연산자들을 포함하는 타겟 연산자 리스트를 획득하는 단계, 상기 모델 연산자 리스 트와 상기 타겟 연산자 리스트를 비교하는 단계, 및 상기 비교의 결과에 기초하여, 상기 인공지능 기반의 모델 을 상기 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하는 단계를 포함할 수 있다. 일 실시예에서, 상기 타겟 연산자 리스트는, 상기 타겟 디바이스에서 지원가능한 연산자들을 포함할 수 있다. 일 실시예에서, 상기 타겟 연산자 리스트를 획득하는 단계는, 상기 모델 정보로부터 획득된 모델 타입 정보 및 상기 타겟 디바이스 정보에 기초하여, 상기 모델 연산자들 중 적어도 하나를 변경하기 위한 기준이 되는 상기 타겟 연산자들을 결정하는 단계를 포함할 수 있다.일 실시예에서, 상기 모델 정보는, 사용자로부터 제공된, 상기 인공지능 기반의 모델을 식별하는 식별 정보 또 는 상기 인공지능 기반의 모델에 대응되는 모델 파일 중 적어도 하나를 포함할 수 있다. 일 실시예에서, 상기 모델 연산자 리스트는, 상기 모델 정보를 분석함으로써 획득된, 상기 인공지능 기반의 모 델을 구성하는 연산자들을 포함할 수 있다. 일 실시예에서, 상기 타겟 연산자 리스트를 획득하는 단계는, 상기 모델 정보에 포함된 모델 타입(model type) 에 기초하여, 상기 인공지능 기반의 모델의 재학습(re-training)이 가능한지 여부를 결정하는 단계, 및 상기 인 공지능 기반의 모델의 재학습 가능 여부에 따라, 상기 타겟 연산자 리스트에 포함될 상기 타겟 연산자들을 상이 한 방식으로 결정하는 단계를 포함할 수 있다. 일 실시예에서, 상기 타겟 연산자 리스트를 획득하는 단계는: 상기 모델 정보에 포함된 모델 타입에 기초하여, 상기 인공지능 기반의 모델의 재학습이 가능한지 여부를 결정하는 단계, 및 상기 재학습이 불가능하다고 결정된 경우, 상기 타겟 디바이스에서 지원가능한 연산자들 중에서 학습이 필요한 연산자들을 제외함으로써, 상기 모델 연산자들과 비교될 상기 타겟 연산자들을 결정하는 단계를 포함할 수 있다. 일 실시예에서, 상기 모델 연산자 리스트와 상기 타겟 연산자 리스트를 비교하는 단계는, 상기 인공지능 기반의 모델의 입력 연산자로부터 출력 연산자로의 순서에 따라서, 상기 모델 연산자 리스트에 포함된 모델 연산자가 상기 타겟 연산자 리스트에 포함되는 상기 타겟 연산자들 중 적어도 하나와 매칭되는지 여부를 결정하는 단계를 포함할 수 있다. 일 실시예에서, 상기 모델 연산자 리스트와 상기 타겟 연산자 리스트를 비교하는 단계는, 상기 모델 연산자 리 스트에 포함된 상기 모델 연산자들 각각에 대해서 수행될 수 있다. 일 실시예에서, 상기 비교의 결과에 기초하여, 상기 인공지능 기반의 모델을 상기 타겟 디바이스에서 구동 가능 한 상기 타겟 모델로 변경하는 단계는, 상기 비교의 결과 상기 모델 연산자들 중에서 상기 타겟 연산자 리스트 에 포함되는 타겟 연산자와 매칭되는 제 1 모델 연산자를 변경하지 않을 것으로 결정하고, 그리고 상기 비교의 결과 상기 모델 연산자들 중에서 상기 타겟 연산자 리스트에 포함되는 타겟 연산자와 매칭되지 않는 제 2 모델 연산자를 변경할 것으로 결정하는 단계를 포함할 수 있다. 일 실시예에서, 상기 비교의 결과에 기초하여, 상기 인공지능 기반의 모델을 상기 타겟 디바이스에서 구동 가능 한 상기 타겟 모델로 변경하는 단계는, 상기 모델 연산자들 중에서 상기 타겟 연산자 리스트에 포함되는 타겟 연산자와 매칭되지 않는 제 2 모델 연산자를 상기 타겟 연산자 리스트에 포함되는 상기 타겟 연산자와 매칭 가 능한 대체(replacement) 연산자로 변경하는 단계를 포함할 수 있다. 일 실시예에서, 상기 비교의 결과에 기초하여, 상기 인공지능 기반의 모델을 상기 타겟 디바이스에서 구동 가능 한 상기 타겟 모델로 변경하는 단계는: 상기 비교의 결과에 기초하여, 상기 모델 연산자 리스트 내에서 변경될 모델 연산자를 결정하는 단계, 상기 변경될 모델 연산자에 대응되는 연산자 특성(operator characteristic)에 기초하여, 상기 변경될 모델 연산자의 연산자 타입(type)을 결정하는 단계 및 상기 결정된 연산자 타입에 기초 하여, 상기 모델 연산자를 대체 연산자로 변경하는 단계를 포함할 수 있다. 일 실시예에서, 상기 연산자 특성은 연산자의 동작 특성(operational characteristic) 또는 기능 특성 (functional characteristic)을 나타내며 그리고 상기 연산자 특성은 상기 모델 연산자들 각각에 할당될 수 있 다. 일 실시예에서, 상기 연산자 타입은, 활성화(activation) 연산을 나타내는 제 1 연산자 타입, 사전결정된 레벨 미만의 연산 난이도(operation difficulty)를 가지는 단순 연산을 나타내는 제 2 연산자 타입 및 상기 단순 연 산이 아닌 레이어 관련 연산(layer-related operation)을 나타내는 제 3 연산자 타입을 포함할 수 있다. 일 실시예에서, 상기 결정된 연산자 타입에 기초하여, 상기 모델 연산자를 변경하는 단계는, 상기 결정된 연산 자 타입에 따라서, 입력값에 대한 출력값의 유사도 판단을 이용하여 연산자를 변경하는 제 1 변경 알고리즘, 연 산의 수학적 결과의 일치 여부를 기준으로 연산자를 변경하는 제 2 변경 알고리즘, 또는 연산의 수학적 결과의 유사도를 기준으로 연산자를 변경하는 제 3 변경 알고리즘 중 하나의 변경 알고리즘을 이용하여 상기 모델 연산 자를 변경하는 단계를 포함할 수 있다. 일 실시예에서, 상기 결정된 연산자 타입에 기초하여, 상기 모델 연산자를 변경하는 단계는, 상기 변경될 모델 연산자의 연산자 타입이 활성화 연산을 나타내는 제 1 연산자 타입으로 결정된 경우, 입력값에 대한 출력값의 유사도 판단을 이용하여 연산자를 변경하는 제 1 변경 알고리즘에 기초하여 상기 모델 연산자를 변경하고, 상기변경될 모델 연산자의 연산자 타입이 사전결정된 레벨 미만의 연산 난이도를 가지는 단순 연산을 나타내는 제 2 연산자 타입으로 결정된 경우, 연산의 수학적 결과의 일치 여부를 기준으로 연산자를 변경하는 제 2 변경 알고 리즘에 기초하여 상기 모델 연산자를 변경하고, 그리고 상기 변경될 모델 연산자의 연산자 타입이 상기 단순 연 산이 아닌 레이어 관련 연산을 나타내는 제 3 연산자 타입으로 결정된 경우, 연산의 수학적 결과의 유사도를 기 준으로 연산자를 변경하는 제 3 변경 알고리즘에 기초하여 상기 모델 연산자를 변경할 수 있다. 일 실시예에서, 상기 비교의 결과에 기초하여, 상기 인공지능 기반의 모델을 상기 타겟 디바이스에서 구동 가능 한 상기 타겟 모델로 변경하는 단계는, 상기 대체 연산자와 상기 모델 연산자 간의 유사도와 사용자 입력에 포 함된 사용자 임계값을 비교함으로써 상기 모델 연산자의 변경 여부를 결정하는 단계를 더 포함할 수 있다. 일 실시예에서, 상기 비교의 결과에 기초하여, 상기 인공지능 기반의 모델을 상기 타겟 디바이스에서 구동 가능 한 상기 타겟 모델로 변경하는 단계는, 상기 대체 연산자가 상기 타겟 연산자 리스트에 포함되는지 여부에 기초 하여, 상기 모델 연산자의 변경 여부를 결정하는 단계를 더 포함할 수 있다. 일 실시예에서, 상기 방법은, 상기 변경된 타겟 모델에서 변경된 대체 연산자를 나타내는 제 1 결과, 상기 변경 된 타겟 모델이 재학습이 필요한지 여부를 나타내는 제 2 결과를 제공하는 단계를 더 포함할 수 있다. 일 실시예에서, 상기 방법은 상기 인공지능 기반의 모델이 변경된 상기 타겟 모델을 상기 타겟 디바이스에서 실 행함에 따라 획득되는 벤치마크 결과를 제공하는 단계를 더 포함할 수 있다. 일 실시예에서, 컴퓨터 판독가능 저장 매체에 저장되는 컴퓨터 프로그램이 개시된다. 상기 컴퓨터 프로그램은 컴퓨팅 장치에 의해 실행 시 상기 컴퓨팅 장치로 하여금 디바이스 인지를 바탕으로 인공지능 기반의 모델을 타 겟 디바이스에 적합하도록 변경하기 위하여 이하의 동작들을 수행하도록 할 수 있다. 상기 동작들은, 상기 인공 지능 기반의 모델에 대응되는 모델 정보 및 상기 인공지능 기반의 모델이 구동될 상기 타겟 디바이스의 특성을 나타내는 타겟 디바이스 정보를 획득하는 동작, 상기 모델 정보에 기초하여 상기 인공지능 기반의 모델에 포함 되는 모델 연산자들을 결정함으로써 상기 모델 연산자들을 포함하는 모델 연산자 리스트를 획득하고, 그리고 상 기 타겟 디바이스 정보에 기초하여 상기 모델 연산자들의 변경의 기준이 되는 타겟 연산자들을 결정함으로써 상 기 타겟 연산자들을 포함하는 타겟 연산자 리스트를 획득하는 동작, 상기 모델 연산자 리스트와 상기 타겟 연산 자 리스트를 비교하는 동작; 및 상기 비교의 결과에 기초하여, 상기 인공지능 기반의 모델을 상기 타겟 디바이 스에서 구동 가능한 타겟 모델로 변경하는 동작을 포함할 수 있다. 일 실시예에서, 디바이스 인지를 바탕으로 인공지능 기반의 모델을 타겟 디바이스에 적합하도록 변경하기 위한 컴퓨팅 장치가 개시된다. 상기 컴퓨팅 장치는, 적어도 하나의 프로세서 및 메모리를 포함할 수 있다. 상기 적어 도 하나의 프로세서는, 상기 인공지능 기반의 모델에 대응되는 모델 정보 및 상기 인공지능 기반의 모델이 구동 될 상기 타겟 디바이스의 특성을 나타내는 타겟 디바이스 정보를 획득하고, 상기 모델 정보에 기초하여 상기 인 공지능 기반의 모델에 포함되는 모델 연산자들을 결정함으로써 상기 모델 연산자들을 포함하는 모델 연산자 리 스트를 획득하고, 그리고 상기 타겟 디바이스 정보에 기초하여 상기 모델 연산자들의 변경의 기준이 되는 타겟 연산자들을 결정함으로써 상기 타겟 연산자들을 포함하는 타겟 연산자 리스트를 획득하고, 상기 모델 연산자 리 스트와 상기 타겟 연산자 리스트를 비교하고, 그리고 상기 비교의 결과에 기초하여, 상기 인공지능 기반의 모델 을 상기 타겟 디바이스에서 구동 가능한 타겟 모델로 변경할 수 있다."}
{"patent_id": "10-2025-0010860", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시내용의 일 실시예에 따른 기법은, 타겟 디바이스에서 구동되도록 인공지능 기반의 모델을 효율적으로 변 환할 수 있다."}
{"patent_id": "10-2025-0010860", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "다양한 실시예들이 도면을 참조하여 설명된다. 본 명세서에서, 다양한 설명들이 본 개시내용의 이해를 제공하기 위해서 제시된다. 본 개시내용의 실시를 위한 구체적인 내용을 설명하기에 앞서, 본 개시내용의 기술적 요지와 직접적 관련이 없는 구성에 대해서는 본 발명의 기술적 요지를 흩뜨리지 않는 범위 내에서 생략하였음에 유의하 여야 할 것이다. 또한, 본 명세서 및 청구범위에 사용된 용어 또는 단어는 발명자가 자신의 발명을 최선의 방법 으로 설명하기 위해 적절한 용어의 개념을 정의할 수 있다는 원칙에 입각하여 본 발명의 기술적 사상에 부합하 는 의미와 개념으로 해석되어야 할 것이다. 본 명세서에서 사용되는 용어 \"모듈\", \"시스템\" 및/또는 “모델” 등은, 컴퓨터-관련 엔티티, 하드웨어, 펌웨어, 소프트웨어, 소프트웨어 및 하드웨어의 조합, 또는 소프트웨어의 실행을 지칭하며 그리고 상호 교환 가 능하게 사용될 수 있다. 예를 들어, 모듈은 프로세서상에서 실행되는 처리과정(procedure), 프로세서, 객체, 실 행 스레드, 프로그램, 애플리케이션 및/또는 컴퓨팅 장치일 수 있지만, 이들로 제한되는 것은 아니다. 하나 이 상의 모듈은 프로세서 및/또는 실행 스레드 내에 상주할 수 있다. 모듈은 하나의 컴퓨터 내에 로컬화 될 수 있 다. 하나의 모듈이 2개 이상의 컴퓨터들 사이에 분배될 수 있다. 또한, 이러한 모듈들은 그 내부에 저장된 다양 한 데이터 구조들을 갖는 다양한 컴퓨터 판독가능한 매체로부터 실행할 수 있다. 모듈들은 예를 들어 하나 이상 의 데이터 패킷들을 갖는 신호(예를 들면, 로컬 시스템, 분산 시스템에서 다른 컴포넌트와 상호작용하는 하나의 컴포넌트로부터의 데이터 및/또는 신호를 통해 다른 시스템과 인터넷과 같은 네트워크를 통해 전송되는 데이 터)에 따라 로컬 및/또는 원격 처리들을 통해 통신할 수 있다. 더불어, 용어 \"또는\"은 배타적 \"또는\"이 아니라 내포적 \"또는\"을 의미하는 것으로 의도된다. 즉, 달리 특정되지 않거나 문맥상 명확하지 않은 경우에, \"X는 A 또는 B를 이용한다\"는 자연적인 내포적 치환 중 하나를 의미하는 것으로 의도된다. 즉, X가 A를 이용하거나; X가 B를 이용하거나; 또는 X가 A 및 B 모두를 이용하는 경우, \"X는 A 또는 B를 이용한다\"가 이들 경우들 어느 것으로도 적용될 수 있다. 또한, 본 명세서에 사용된 \"및/또는\" 그리 고 “적어도 하나” 라는 용어는 열거된 관련 아이템들 중 하나 이상의 아이템의 가능한 모든 조합을 지칭하고 포함하는 것으로 이해되어야 한다. 예를 들어, \"A 또는 B 중 적어도 하나\" 또는 “A 및 B 중 적어도 하나” 라 는 용어는, \"A만을 포함하는 경우\", \"B 만을 포함하는 경우\", \"A와 B의 구성으로 조합된 경우\"를 의미하는 것으 로 해석되어야 한다. 또한, \"포함한다\" 및/또는 \"포함하는\"이라는 용어는, 해당 특징 및/또는 구성요소가 존재함을 의미하는 것으로 이해되어야 한다. 다만, \"포함한다\" 및/또는 \"포함하는\"이라는 용어는, 하나 이상의 다른 특징, 구성요소 및/또 는 이들의 그룹의 존재 또는 추가를 배제하지 않는 것으로 이해되어야 한다. 또한, 달리 특정되지 않거나 단수 형태를 지시하는 것으로 문맥상 명확하지 않은 경우에, 본 명세서와 청구범위에서 단수는 일반적으로 \"하나 또 는 그 이상\"을 의미하는 것으로 해석되어야 한다. 당업자들은 추가적으로 여기서 개시된 실시예들과 관련되어 설명된 다양한 예시적인 논리적 구성요소들이 하드 웨어, 컴퓨터 소프트웨어, 또는 양쪽 모두의 조합들로 구현될 수 있음을 인식해야 한다. 제시된 실시예들에 대한 설명은 본 개시의 기술 분야에서 통상의 지식을 가진 자가 본 발명을 이용하거나 또는 실시할 수 있도록 제공된다. 이러한 실시예들에 대한 다양한 변형들은 본 개시의 기술 분야에서 통상의 지식을 가진 자에게 명백할 것이다. 여기에 정의된 일반적인 원리들은 본 개시의 범위를 벗어남이 없이 다른 실시예들 에 적용될 수 있다. 그리하여, 본 발명은 여기에 제시된 실시예 들로 한정되는 것이 아니다. 본 발명은 여기에 제시된 원리들 및 신규한 특징들과 일관되는 최광의의 범위에서 해석되어야 할 것이다. 본 개시내용에서의 제 1, 제 2, 또는 제 3 과 같이 제 N 으로 표현되는 용어들은 적어도 하나의 엔티티들을 구 분하기 위해 사용된다. 예를 들어, 제 1 과 제 2로 표현된 엔티티들은 서로 동일하거나 또는 상이할 수 있다. 본 개시내용에서 사용되는 용어 \"모델\"은 인공지능 기반의 모델, 인공지능 모델, 연산 모델, 신경망, 네트워크 함수 및 뉴럴 네트워크(neural network)을 포괄하는 의미로 사용될 수 있다. 일 실시예에서, 모델은 모델 파일, 모델의 식별정보, 모델의 실행환경, 모델의 프레임워크를 의미할 수 있다. 본 개시내용에서 사용되는 용어 \"디바이스\"는 모델이 실행될 하드웨어 또는 하드웨어 식별 정보에 대응될 수 있 다. 추가적인 예시로, 디바이스는 모델의 벤치마크가 수행될 하드웨어 또는 하드웨어 식별 정보에 대응될 수 있 다. 이러한 하드웨어는 물리적 하드웨어, 가상 하드웨어, 외부에서 네트워크 접근이 불가능한 하드웨어, 외부에 서 확인이 불가능한 하드웨어 및/또는 클라우드 내에서 확인되는 하드웨어를 포괄하는 의미로 사용될 수 있다. 예를 들어, 본 개시내용에서의 디바이스는 RaspberryPi, Coral, Jetson-Nano, AVH RasberryPi 및 Mobile 등과 같은 다양한 형태의 하드웨어를 포함할 수 있다. 본 개시내용에서 사용되는 용어 \"벤치마크(benchmark)\"는 모델을 디바이스에서 실행하는 또는 테스트하는 동작, 또는 모델의 디바이스에 대한 성능을 측정하는 동작을 의미할 수 있다. 본 개시내용에서의 벤치마크 결과 또는 벤치마크 결과 정보는 벤치마크에 따라 획득되는 정보 또는 벤치마크에 따라 획득되는 정보를 가공한 정보를 포 함할 수 있다. 본 개시내용에서의, 벤치마크 예측 결과 또는 벤치마크 예측 결과 정보는 모델을 디바이스에 실 행되었을 때 예측되는 벤치마크 결과를 의미할 수 있다. 예를 들어, 벤치마크 예측 결과는 모델을 디바이스에 실행시키지 않고(즉, 성능을 측정하지 않고) 획득되는 벤치마크 결과에 대응될 수 있다. 본 개시내용에서의 연산자(operator)는 모델을 구성하는 컴포넌트를 의미하도록 사용될 수 있다. 예를 들어, 하 나의 모델에는 복수의 연산자들이 포함될 수 있다. 예를 들어, 이러한 복수의 연산자들은 엣지를 통해 서로 연 결될 수 있다. 이러한 복수의 연산자들의 연산을 통해 모델의 동작이 수행될 수 있다. 예를 들어, 연산자는 모 델의 노드 또는 레이어(layer)와 상호 교환 가능하게 사용될 수 있다. 일례로, Convolutional Layer가 인공지능 모델 내에서의 연산자에 대한 일례가 될 수 있다. 도 1은 본 개시내용의 일 실시예에 따른 컴퓨팅 장치의 블록 구성도를 개략적으로 도시한다. 본 개시내용의 일 실시예에 따른 컴퓨팅 장치는 프로세서 및 메모리를 포함할 수 있다. 도 1에 도시된 컴퓨팅 장치의 구성은 간략화 하여 나타낸 예시일 뿐이다. 본 개시의 일 실시예에서 컴퓨팅 장치는 컴퓨팅 장치의 컴퓨팅 환경을 수행하기 위한 다른 구성들이 포함될 수 있고, 개시된 구성들 중 일부만이 컴퓨팅 장치를 구성할 수도 있다. 본 개시내용에서의 컴퓨팅 장치는 임의의 형태의 서버 및 임의의 형태의 단말을 포괄하는 의미로 사용될 수 있다. 본 개시내용에서의 컴퓨팅 장치는 본 개시내용의 실시예들을 구현하기 위한 시스템을 구성하는 임의의 형 태의 컴포넌트를 의미할 수 있다. 도 1에서 도시되는 컴퓨팅 장치의 컴포넌트들은 예시적인 것으로 일부가 제외될 수 있거나 또는 추가 컴포 넌트가 컴퓨팅 장치에 포함될 수도 있다. 일례로, 전술한 컴퓨팅 장치가 사용자 단말을 포함하는 경 우, 출력부(미도시) 및 입력부(미도시)가 상기 컴퓨팅 장치의 범위 내에 포함될 수 있다. 일 실시예에서, 컴퓨팅 장치는 디바이스 인지를 바탕으로 입력된 모델을 디바이스에 적합한 모델로 변경, 치환, 변환 및/또는 컨버팅하기 위한 장치를 의미할 수 있다. 일 실시예에서, 컴퓨팅 장치는 복수의 디바이스들과 통신하여 특정된 인공지능 기반의 모델의 복수의 디바 이스들에 대한 벤치마크를 관리 및/또는 수행하는 장치를 의미할 수 있다. 예를 들어, 컴퓨팅 장치는 Device Farm을 관리하기 위한 장치를 지칭될 수 있다. 다른 예시에서, 컴퓨팅 장치는 Device Farm에 대응 될 수도 있다. 일 실시예에서, 컴퓨팅 장치는 입력된 데이터셋에 대한 모델링을 통해 학습 모델을 생성하고, 입력된 모델 에 대한 압축을 통해 경량화 모델을 생성하고 그리고/또는 입력된 모델이 특정 디바이스에서 디플로이될 수 있 도록 다운로드 데이터를 생성하는 장치를 의미할 수 있다. 예를 들어, 컴퓨팅 장치는 입력된 모델이 특정 디바이스에 호환 가능하도록 상기 입력된 모델을 변환할 수 있다. 본 개시내용에서, 디플로이(deploy) 또는 디플로이먼트(deployment)는 소프트웨어(예컨대, 모델)를 이용 가능하 게 하는 임의의 종류의 활동을 의미할 수 있다. 예를 들어, 디플로이 또는 디플로이먼트는 모델 또는 노드의 특 정 요구사항이나 특성에 따라 커스터마이징되는 전반적인 과정으로 해석될 수 있다. 이러한 디플로이 또는 디플 로이먼트에 대한 예시로, 릴리즈, 설치 및 활성화, 비활성화, 제거, 업데이트, 빌트인 업데이트, 각색 및/또는 버전 추적 등이 존재할 수 있다. 본 개시내용의 추가적인 실시예에서, 컴퓨팅 장치는 모델을 컨버팅한 결과를 생성하거나 또는 상기 컨버팅 한 결과를 다른 컴퓨팅 장치 또는 외부 엔티티(예컨대, 컨버팅 디바이스)로부터 획득할 수도 있다. 일 실시예에서, 프로세서는 적어도 하나의 코어로 구성될 수 있으며, 컴퓨팅 디바이스의 중앙 처리 장치(CPU: central processing unit), 범용 그래픽 처리 장치 (GPGPU: general purpose graphics processing unit), 텐서 처리 장치(TPU: tensor processing unit) 등의 데이터 분석 및/또는 처리를 위한 프로세서를 포함 할 수 있다. 프로세서는 메모리에 저장된 컴퓨터 프로그램을 판독하여 본 개시내용의 일 실시예에 따라, 벤치마크 결과를 제공할 수 있다. 본 개시의 일 실시예에 따라 프로세서는 신경망의 학습을 위한 연산을 수행할 수도 있다. 프로세서는 딥러닝(DL: deep learning)에서 학습을 위한 입력 데이터의 처리, 입력 데이터에서의 피쳐 추출, 오차 계산, 역 전파(backpropagation)를 이용한 신경망의 가중치 업데이트 등의 신경망의 학습을 위한 계산을 수행할 수 있다. 프로세서의 CPU, GPGPU, 및 TPU 중 적어도 하나가 네트워크 함수의 학습을 처리할 수 있다. 예를 들어, CPU 와 GPGPU가 함께 네트워크 함수의 학습, 네트워크 함수를 이용한 데이터 분류를 처리할 수 있다. 또한, 본 개시의 일 실시예에서 복수의 컴퓨팅 디바이스들의 프로세서들을 함께 사용하여 네트워크 함수의 학습, 네트워 크 함수를 이용한 데이터 분류를 처리할 수도 있다. 또한, 본 개시의 일 실시예에 따른 컴퓨팅 장치에서 수행되는 컴퓨터 프로그램은 CPU, GPGPU 또는 TPU 실행가능 프로그램일 수 있다. 추가적으로, 프로세서는 통상적으로 컴퓨팅 장치의 전반적인 동작을 처리할 수 있다. 예를 들어, 프 로세서는 컴퓨팅 장치에 포함된 구성요소들을 통해 입력 또는 출력되는 데이터, 정보, 또는 신호 등 을 처리하거나 저장부에 저장된 응용 프로그램을 구동함으로써, 사용자에게 적절한 정보 또는 기능을 제공할 수 있다. 본 개시의 일 실시예에 따르면, 메모리는 프로세서가 생성하거나 결정한 임의의 형태의 정보 및 컴퓨 팅 장치가 수신한 임의의 형태의 정보를 저장할 수 있다. 본 개시의 일 실시예에 따르면, 메모리는 프로세서가 본 개시내용의 실시예들에 따른 동작을 수행하도록 하는 컴퓨터 소프트웨어를 저장하는 저장매 체 일 수 있다. 따라서, 메모리는 본 개시내용에 실시예들을 수행하는 데 필요한 소프트웨어 코드, 코드의 실행 대상이 되는 데이터, 코드의 실행 결과를 저장하기 위한 컴퓨터 판독 매체들을 의미할 수 있다. 본 개시의 일 실시예에 따르면, 메모리는 임의의 타입의 저장 매체를 의미할 수 있다 예를 들어, 메모리 는 플래시 메모리 타입(flash memory type), 하드디스크 타입(hard disk type), 멀티미디어 카드 마이크 로 타입(multimedia card micro type), 카드 타입의 메모리(예를 들어 SD 또는 XD 메모리 등), 램(Random Access Memory, RAM), SRAM(Static Random Access Memory), 롬(Read-Only Memory, ROM), EEPROM(Electrically Erasable Programmable Read-Only Memory), PROM(Programmable Read-Only Memory), 자기 메모리, 자기 디스크, 광디스크 중 적어도 하나의 타입의 저장매체를 포함할 수 있다. 컴퓨팅 장치는 인터넷(internet) 상에서 상기 메모리의 저장 기능을 수행하는 웹 스토리지(web storage)와 관련되어 동작할 수도 있다. 전 술한 메모리에 대한 기재는 예시일 뿐, 본 개시내용에서 사용되는 메모리는 전술한 예시들로 제한되지 않 는다. 본 개시내용에서의 통신부(미도시)는 유선 및 무선 등과 같은 그 통신 양태를 가리지 않고 구성될 수 있으며, 단거리 통신망(PAN: Personal Area Network), 근거리 통신망(WAN: Wide Area Network) 등 다양한 통신망으로 구성될 수 있다. 또한, 상기 네트워크부 공지의 월드와이드웹(WWW: World Wide Web) 기반으로 동작할 수 있으며, 적외선(IrDA: Infrared Data Association) 또는 블루투스(Bluetooth)와 같이 단거리 통신에 이용되는 무선 전송 기술을 이용할 수도 있다. 본 개시내용에서의 컴퓨팅 장치는 임의의 형태의 사용자 단말 및/또는 임의의 형태의 서버를 포함할 수 있 다. 따라서, 본 개시내용의 실시예들은 서버 및/또는 사용자 단말에 의해 수행될 수 있다. 일 실시예에서, 사용자 단말은, 서버 또는 다른 컴퓨팅 디바이스와 상호작용 가능한 임의의 형태의 단말을 포함 할 수 있다. 사용자 단말은 예를 들어, 휴대폰, 스마트 폰(smart phone), 노트북 컴퓨터(laptop computer), PDA(personal digital assistants), 슬레이트 PC(slate PC), 태블릿 PC(tablet PC) 및 울트라북(ultrabook)을 포함할 수 있다. 일 실시예에서, 서버는 예를 들어, 마이크로프로세서, 메인프레임 컴퓨터, 디지털 프로세서, 휴대용 디바이스 및 디바이스 제어기 등과 같은 임의의 타입의 컴퓨팅 시스템 또는 컴퓨팅 디바이스를 포함할 수 있다. 일 실시예에서, 서버는 타겟 연산자 리스트, 모델 연산자 리스트, 벤치마크 결과, 벤치마크 예측 결과 및/또는 디바이스들의 성능 정보를 저장 및 관리할 수 있다. 예를 들어, 서버는 전술한 정보를 저장하기 위한 저장부(미 도시)를 포함할 수 있다. 이러한 저장부는 서버내에 포함되거나 혹은 서버의 관리 하에 존재할 수 있다. 다른 예시로, 저장부는 서버 외부에 존재하여 서버와 통신가능한 형태로 구현될 수도 있다. 이 경우 서버와는 상이한 다른 외부 서버에 의해 저장부가 관리 및 제어될 수 있다. 다른 예시로, 저장부는 서버 외부에 존재하여 서버와 통신가능한 형태로 구현될 수도 있다. 이 경우 서버와는 상이한 다른 외부 서버에 의해 저장부가 관리 및 제어 될 수 있다. 도 2는 본 개시내용의 일 실시예에 따른 인공지능 기반의 모델의 예시적인 구조를 도시한다. 본 개시내용에 걸쳐, 모델, 인공지능 모델, 인공지능 기반의 모델, 연산 모델, 신경망, 네트워크 함수 및 뉴럴 네트워크(neural network)는 상호 교환 가능하게 사용될 수 있다. 본 개시내용에서의 인공지능 기반의 모델은 객체 세그멘테이션, 객체 검출 및/또는 객체 분류 등의 이미지 처리 를 위한 모델, 그리고 데이터 예측, 텍스트 의미 추론 및/또는 데이터 분류 등의 텍스트 처리를 위한 모델 등 다양한 도메인에서 활용 가능한 모델을 포함할 수 있다. 신경망은 일반적으로 노드라 지칭될 수 있는 상호 연결된 계산 단위들의 집합으로 구성될 수 있다. 이러한 노드 들은 뉴런(neuron)들로 지칭될 수도 있다. 신경망은 적어도 하나 이상의 노드들을 포함하여 구성된다. 신경망들 을 구성하는 노드(또는 뉴런)들은 하나 이상의 링크에 의해 상호 연결될 수 있다. 일례로, 인공지능 기반의 모델 내에서의 노드는 신경망을 구성하는 컴포넌트를 의미하도록 사용될 수 있으며, 예를 들어 신경망 내에서의 노드는 뉴런과 대응될 수 있다. 신경망 내에서, 링크를 통해 연결된 하나 이상의 노드들은 상대적으로 입력 노드 및 출력 노드의 관계를 형성할 수 있다. 입력 노드 및 출력 노드의 개념은 상대적인 것으로서, 하나의 노드에 대하여 출력 노드 관계에 있는 임의의 노드는 다른 노드와의 관계에서 입력 노드 관계에 있을 수 있으며, 그 역도 성립할 수 있다. 상술한 바 와 같이, 입력 노드 대 출력 노드 관계는 링크를 중심으로 생성될 수 있다. 하나의 입력 노드에 하나 이상의 출 력 노드가 링크를 통해 연결될 수 있으며, 그 역도 성립할 수 있다. 하나의 링크를 통해 연결된 입력 노드 및 출력 노드 관계에서, 출력 노드의 데이터는 입력 노드에 입력된 데이 터에 기초하여 그 값이 결정될 수 있다. 여기서 입력 노드와 출력 노드를 상호 연결하는 링크는 가중치(weigh t)를 가질 수 있다. 가중치는 가변적일 수 있으며, 신경망이 원하는 기능을 수행하기 위해, 사용자 또는 알고리 즘에 의해 가변 될 수 있다. 예를 들어, 하나의 출력 노드에 하나 이상의 입력 노드가 각각의 링크에 의해 상호 연결된 경우, 출력 노드는 상기 출력 노드와 연결된 입력 노드들에 입력된 값들 및 각각의 입력 노드들에 대응 하는 링크에 설정된 가중치에 기초하여 출력 노드 값을 결정할 수 있다. 상술한 바와 같이, 신경망은 하나 이상의 노드들이 하나 이상의 링크를 통해 상호 연결되어 신경망 내에서 입력 노드 및 출력 노드 관계를 형성한다. 신경망 내에서 노드들과 링크들의 개수 및 노드들과 링크들 사이의 연관관 계, 링크들 각각에 부여된 가중치의 값에 따라, 신경망의 특성이 결정될 수 있다. 예를 들어, 동일한 개수의 노 드 및 링크들이 존재하고, 링크들의 가중치 값이 상이한 두 신경망이 존재하는 경우, 두 개의 신경망들은 서로 상이한 것으로 인식될 수 있다. 신경망은 하나 이상의 노드들의 집합으로 구성될 수 있다. 신경망을 구성하는 노드들의 부분 집합은 레이어 (layer)를 구성할 수 있다. 신경망을 구성하는 노드들 중 일부는, 최초 입력 노드로부터의 거리들에 기초하여, 하나의 레이어(layer)를 구성할 수 있다. 예를 들어, 최초 입력 노드로부터 거리가 n인 노드들의 집합은, n 레 이어를 구성할 수 있다. 최초 입력 노드로부터 거리는, 최초 입력 노드로부터 해당 노드까지 도달하기 위해 거 쳐야 하는 링크들의 최소 개수에 의해 정의될 수 있다. 그러나, 이러한 레이어의 정의는 설명을 위한 임의적인 것으로서, 신경망 내에서 레이어의 차수는 상술한 것과 상이한 방법으로 정의될 수 있다. 예를 들어, 노드들의 레이어는 최종 출력 노드로부터 거리에 의해 정의될 수도 있다. 최초 입력 노드는 신경망 내의 노드들 중 다른 노드들과의 관계에서 링크를 거치지 않고 데이터가 직접 입력되 는 하나 이상의 노드들을 의미할 수 있다. 또는, 신경망 네트워크 내에서, 링크를 기준으로 한 노드 간의 관계 에 있어서, 링크로 연결된 다른 입력 노드들을 가지지 않는 노드들을 의미할 수 있다. 이와 유사하게, 최종 출 력 노드는 신경망 내의 노드들 중 다른 노드들과의 관계에서, 출력 노드를 가지지 않는 하나 이상의 노드들을 의미할 수 있다. 또한, 히든 노드는 최초 입력 노드 및 최후 출력 노드가 아닌 신경망을 구성하는 노드들을 의 미할 수 있다. 본 개시의 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수와 동일할 수 있 으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 감소하다가 다시 증가하는 형태의 신경망일 수 있다. 또한, 본 개시의 다른 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수 보다 적을 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 감소하는 형태의 신경망 일 수 있다. 또한, 본 개시의 또 다른 일 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수보다 많을 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 증가하는 형태의 신경망일 수 있다. 본 개시의 또 다른 일 실시예에 따른 신경망은 상술한 신경망들의 조합된 형태의 신경망일 수 있다. 딥 뉴럴 네트워크(DNN: deep neural network, 심층신경망)는 입력 레이어와 출력 레이어 외에 복수의 히든 레이 어를 포함하는 신경망을 의미할 수 있다. 딥 뉴럴 네트워크를 이용하면 데이터의 잠재적인 구조(latent structures)를 파악할 수 있다. 즉, 사진, 글, 비디오, 음성, 단백질 시퀀스 구조, 유전자 시퀀스 구조, 펩타이 드 서열의 구조, 음악의 잠재적인 구조(예를 들어, 어떤 물체가 사진에 있는지, 글의 내용과 감정이 무엇인지, 음성의 내용과 감정이 무엇인지 등), 및/또는 펩타이드와 MHC 간의 결합 친화도를 파악할 수 있다. 딥 뉴럴 네 트워크는 컨볼루션 뉴럴 네트워크(CNN: convolutional neural network), 리커런트 뉴럴 네트워크(RNN: recurrent neural network), 오토 인코더(auto encoder), GAN(Generative Adversarial Networks), 제한 볼츠 만 머신(RBM: restricted boltzmann machine), 심층 신뢰 네트워크(DBN: deep belief network), Q 네트워크, U 네트워크, 샴 네트워크, 적대적 생성 네트워크(GAN: Generative Adversarial Network) 등을 포함할 수 있다. 전술한 딥 뉴럴 네트워크의 기재는 예시일 뿐이며 본 개시는 이에 제한되지 않는다. 본 개시내용의 인공지능 기반의 모델은 입력 레이어, 히든 레이어 및 출력 레이어를 포함하는 전술한 임의의 구 조의 네트워크 구조에 의해 표현될 수 있다. 예를 들어, 이러한 인공지능 기반의 모델의 입력 레이어, 히든 레 이어 및 출력 레이어 각각은 노드에 대응될 수 있다. 이러한 예시에서, 이러한 노드들의 조합이 블록에 대응될 수 있다. 본 개시내용의 클러스터링 모델에서 사용될 수 있는 뉴럴 네트워크는 지도 학습(supervised learning), 비지도 학습(unsupervised learning), 반지도학습(semi supervised learning), 또는 강화학습(reinforcement learning) 중 적어도 하나의 방식으로 학습될 수 있다. 뉴럴 네트워크의 학습은 뉴럴 네트워크가 특정한 동작을 수행하기 위한 지식을 뉴럴 네트워크에 적용하는 과정일 수 있다. 뉴럴 네트워크는 출력의 오류를 최소화하는 방향으로 학습될 수 있다. 뉴럴 네트워크의 학습에서 반복적으로 학 습 데이터를 뉴럴 네트워크에 입력시키고 학습 데이터에 대한 뉴럴 네트워크의 출력과 타겟의 에러를 계산하고, 에러를 줄이기 위한 방향으로 뉴럴 네트워크의 에러를 뉴럴 네트워크의 출력 레이어에서부터 입력 레이어 방향 으로 역전파(backpropagation)하여 뉴럴 네트워크의 각 노드의 가중치를 업데이트 하는 과정이다. 지도 학습의 경우 각각의 학습 데이터에 정답이 라벨링되어있는 학습 데이터를 사용하며(즉, 라벨링된 학습 데이터), 비지도 학습의 경우는 각각의 학습 데이터에 정답이 라벨링되어 있지 않을 수 있다. 즉, 예를 들어 데이터 분류에 관한 지도 학습의 경우의 학습 데이터는 학습 데이터 각각에 카테고리가 라벨링 된 데이터 일 수 있다. 라벨링된 학 습 데이터가 뉴럴 네트워크에 입력되고, 뉴럴 네트워크의 출력(카테고리)과 학습 데이터의 라벨을 비교함으로써 오류(error)가 계산될 수 있다. 다른 예로, 데이터 분류에 관한 비지도 학습의 경우 입력인 학습 데이터가 뉴럴 네트워크 출력과 비교됨으로써 오류가 계산될 수 있다. 계산된 오류는 뉴럴 네트워크에서 역방향(즉, 출력 레이 어에서 입력 레이어 방향)으로 역전파 되며, 역전파에 따라 뉴럴 네트워크의 각 레이어의 각 노드들의 연결 가 중치가 업데이트 될 수 있다. 업데이트 되는 각 노드의 연결 가중치는 학습률(learning rate)에 따라 변화량이 결정될 수 있다. 입력 데이터에 대한 뉴럴 네트워크의 계산과 에러의 역전파는 학습 사이클(epoch)을 구성할 수 있다. 학습률은 뉴럴 네트워크의 학습 사이클의 반복 횟수에 따라 상이하게 적용될 수 있다. 예를 들어, 뉴럴 네트워크의 학습 초기에는 높은 학습률을 사용하여 뉴럴 네트워크가 빠르게 일정 수준의 성능을 확보하도록 하 여 효율성을 높이고, 학습 후기에는 낮은 학습률을 사용하여 정확도를 높일 수 있다. 뉴럴 네트워크의 학습에서 일반적으로 학습 데이터는 실제 데이터(즉, 학습된 뉴럴 네트워크를 이용하여 처리하 고자 하는 데이터)의 부분집합일 수 있으며, 따라서, 학습 데이터에 대한 오류는 감소하나 실제 데이터에 대해 서는 오류가 증가하는 학습 사이클이 존재할 수 있다. 과적합(overfitting)은 이와 같이 학습 데이터에 과하게 학습하여 실제 데이터에 대한 오류가 증가하는 현상이다. 예를 들어, 노란색 고양이를 보여 고양이를 학습한 뉴 럴 네트워크가 노란색 이외의 고양이를 보고는 고양이임을 인식하지 못하는 현상이 과적합의 일종일 수 있다. 과적합은 머신러닝 알고리즘의 오류를 증가시키는 원인으로 작용할 수 있다. 이러한 과적합을 막기 위하여 다양 한 최적화 방법이 사용될 수 있다. 과적합을 막기 위해서는 학습 데이터를 증가시키거나, 레귤라리제이션(regularization), 학습의 과정에서 네트워크의 노드 일부를 비활성화하는 드롭아웃(dropout), 배치 정규화 레 이어(batch normalization layer)의 활용 등의 방법이 적용될 수 있다. 본 개시의 일 실시예에 따라 벤치마크 결과 및/또는 인공지능 기반의 모델을 포함하는 데이터 구조를 저장한 컴 퓨터 판독가능 매체가 개시된다. 전술한 데이터 구조는 본 개시내용에서의 저장부(미도시)에 저장될 수 있으며, 프로세서에 의해 실행될 수 있으며 그리고 통신부(미도시)에 의해 송수신될 수 있다. 데이터 구조는 데이터에 효율적인 접근 및 수정을 가능하게 하는 데이터의 조직, 관리, 저장을 의미할 수 있다. 데이터 구조는 특정 문제(예를 들어, 최단 시간으로 데이터 검색, 데이터 저장, 데이터 수정) 해결을 위한 데이 터의 조직을 의미할 수 있다. 데이터 구조는 특정한 데이터 처리 기능을 지원하도록 설계된, 데이터 요소들 간 의 물리적이거나 논리적인 관계로 정의될 수도 있다. 데이터 요소들 간의 논리적인 관계는 사용자 정의 데이터 요소들 간의 연결관계를 포함할 수 있다. 데이터 요소들 간의 물리적인 관계는 컴퓨터 판독가능 저장매체(예를 들어, 영구 저장 장치)에 물리적으로 저장되어 있는 데이터 요소들 간의 실제 관계를 포함할 수 있다. 데이터 구조는 구체적으로 데이터의 집합, 데이터 간의 관계, 데이터에 적용할 수 있는 함수 또는 명령어를 포함할 수 있다. 효과적으로 설계된 데이터 구조를 통해 컴퓨팅 디바이스는 컴퓨팅 디바이스의 자원을 최소한으로 사용하 면서 연산을 수행할 수 있다. 구체적으로 컴퓨팅 디바이스는 효과적으로 설계된 데이터 구조를 통해 연산, 읽기, 삽입, 삭제, 비교, 교환, 검색의 효율성을 높일 수 있다. 데이터 구조는 데이터 구조의 형태에 따라 선형 데이터 구조와 비선형 데이터 구조로 구분될 수 있다. 선형 데 이터 구조는 하나의 데이터 뒤에 하나의 데이터만이 연결되는 구조일 수 있다. 선형 데이터 구조는 리스트 (List), 스택(Stack), 큐(Queue), 데크(Deque)를 포함할 수 있다. 리스트는 내부적으로 순서가 존재하는 일련의 데이터 집합을 의미할 수 있다. 리스트는 연결 리스트(Linked List)를 포함할 수 있다. 연결 리스트는 각각의 데이터가 포인터를 가지고 한 줄로 연결되어 있는 방식으로 데이터가 연결된 데이터 구조일 수 있다. 연결 리스 트에서 포인터는 다음이나 이전 데이터와의 연결 정보를 포함할 수 있다. 연결 리스트는 형태에 따라 단일 연결 리스트, 이중 연결 리스트, 원형 연결 리스트로 표현될 수 있다. 스택은 제한적으로 데이터에 접근할 수 있는 데이터 나열 구조일 수 있다. 스택은 데이터 구조의 한 쪽 끝에서만 데이터를 처리(예를 들어, 삽입 또는 삭 제)할 수 있는 선형 데이터 구조일 수 있다. 스택에 저장된 데이터는 늦게 들어갈수록 빨리 나오는 데이터 구조 (LIFO-Last in First Out)일 수 있다. 큐는 제한적으로 데이터에 접근할 수 있는 데이터 나열 구조로서, 스택과 달리 늦게 저장된 데이터일수록 늦게 나오는 데이터 구조(FIFO-First in First Out)일 수 있다. 데크는 데이터 구조의 양 쪽 끝에서 데이터를 처리할 수 있는 데이터 구조일 수 있다. 비선형 데이터 구조는 하나의 데이터 뒤에 복수개의 데이터가 연결되는 구조일 수 있다. 비선형 데이터 구조는 그래프(Graph) 데이터 구조를 포함할 수 있다. 그래프 데이터 구조는 정점(Vertex)과 간선(Edge)으로 정의될 수 있으며 간선은 서로 다른 두개의 정점을 연결하는 선을 포함할 수 있다. 그래프 데이터 구조 트리(Tree) 데이터 구조를 포함할 수 있다. 트리 데이터 구조는 트리에 포함된 복수개의 정점 중에서 서로 다른 두개의 정점을 연 결시키는 경로가 하나인 데이터 구조일 수 있다. 즉 그래프 데이터 구조에서 루프(loop)를 형성하지 않는 데이 터 구조일 수 있다. 데이터 구조는 신경망을 포함할 수 있다. 그리고 신경망을 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장 될 수 있다. 신경망을 포함한 데이터 구조는 또한 신경망에 의한 처리를 위하여 전처리된 데이터, 신경망에 입 력되는 데이터, 신경망의 가중치, 신경망의 하이퍼 파라미터, 신경망으로부터 획득한 데이터, 신경망의 각 노드 또는 레이어와 연관된 활성 함수, 신경망의 학습을 위한 손실 함수 등을 포함할 수 있다. 신경망을 포함한 데이 터 구조는 상기 개시된 구성들 중 임의의 구성 요소들을 포함할 수 있다. 즉 신경망을 포함한 데이터 구조는 신 경망에 의한 처리를 위하여 전처리된 데이터, 신경망에 입력되는 데이터, 신경망의 가중치, 신경망의 하이퍼 파 라미터, 신경망으로부터 획득한 데이터, 신경망의 각 노드 또는 레이어와 연관된 활성 함수, 신경망의 학습을 위한 손실 함수 등 전부 또는 이들의 임의의 조합을 포함하여 구성될 수 있다. 전술한 구성들 이외에도, 신경망 을 포함한 데이터 구조는 신경망의 특성을 결정하는 임의의 다른 정보를 포함할 수 있다. 또한, 데이터 구조는 신경망의 연산 과정에 사용되거나 발생되는 모든 형태의 데이터를 포함할 수 있으며 전술한 사항에 제한되는 것 은 아니다. 컴퓨터 판독가능 매체는 컴퓨터 판독가능 기록 매체 및/또는 컴퓨터 판독가능 전송 매체를 포함할 수 있다. 신경망은 일반적으로 노드라 지칭될 수 있는 상호 연결된 계산 단위들의 집합으로 구성될 수 있다. 이 러한 노드들은 뉴런(neuron)들로 지칭될 수도 있다. 신경망은 적어도 하나 이상의 노드들을 포함하여 구성된다. 데이터 구조는 신경망에 입력되는 데이터를 포함할 수 있다. 신경망에 입력되는 데이터를 포함하는 데이터 구조 는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망에 입력되는 데이터는 신경망 학습 과정에서 입력되는 학습데이터 및/또는 학습이 완료된 신경망에 입력되는 입력 데이터를 포함할 수 있다. 신경망에 입력되는 데이터는 전처리(pre-processing)를 거친 데이터 및/또는 전처리 대상이 되는 데이터를 포함할 수 있다. 전처리는 데이터 를 신경망에 입력시키기 위한 데이터 처리 과정을 포함할 수 있다. 따라서 데이터 구조는 전처리 대상이 되는 데이터 및 전처리로 발생되는 데이터를 포함할 수 있다. 전술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한 되지 않는다. 데이터 구조는 신경망의 가중치를 포함할 수 있다 (본 개시내용에서 가중치, 파라미터는 동일한 의미로 사용될 수 있다), 신경망의 가중치를 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망은 복수개 의 가중치를 포함할 수 있다. 가중치는 가변적일 수 있으며, 신경망이 원하는 기능을 수행하기 위해, 사용자 또 는 알고리즘에 의해 가변 될 수 있다. 예를 들어, 하나의 출력 노드에 하나 이상의 입력 노드가 각각의 링크에 의해 상호 연결된 경우, 출력 노드는 상기 출력 노드와 연결된 입력 노드들에 입력된 값들 및 각각의 입력 노드 들에 대응하는 링크에 설정된 가중치에 기초하여 출력 노드에서 출력되는 데이터 값을 결정할 수 있다. 전술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한되지 않는다. 제한이 아닌 예로서, 가중치는 신경망 학습 과정에서 가변되는 가중치 및/또는 신경망 학습이 완료된 가중치를 포함할 수 있다. 신경망 학습 과정에서 가변되는 가중치는 학습 사이클이 시작되는 시점의 가중치 및/또는 학습 사이클 동안 가변되는 가중치를 포함할 수 있다. 신경망 학습이 완료된 가중치는 학습 사이클이 완료된 가중치 를 포함할 수 있다. 따라서 신경망의 가중치를 포함한 데이터 구조는 신경망 학습 과정에서 가변되는 가중치 및 /또는 신경망 학습이 완료된 가중치를 포함한 데이터 구조를 포함할 수 있다. 그러므로 상술한 가중치 및/또는 각 가중치의 조합은 신경망의 가중치를 포함한 데이터 구조에 포함되는 것으로 한다. 전술한 데이터 구조는 예 시일 뿐 본 개시는 이에 제한되지 않는다. 신경망의 가중치를 포함한 데이터 구조는 직렬화(serialization) 과정을 거친 후 컴퓨터 판독가능 저장 매체(예 를 들어, 메모리, 하드 디스크)에 저장될 수 있다. 직렬화는 데이터 구조를 동일하거나 다른 컴퓨팅 디바이스에 저장하고 나중에 다시 재구성하여 사용할 수 있는 형태로 변환하는 과정일 수 있다. 컴퓨팅 디바이스는 데이터 구조를 직렬화하여 네트워크를 통해 데이터를 송수신할 수 있다. 직렬화된 신경망의 가중치를 포함한 데이터 구 조는 역직렬화(deserialization)를 통해 동일한 컴퓨팅 디바이스 또는 다른 컴퓨팅 디바이스에서 재구성될 수 있다. 신경망의 가중치를 포함한 데이터 구조는 직렬화에 한정되는 것은 아니다. 나아가 신경망의 가중치를 포 함한 데이터 구조는 컴퓨팅 디바이스의 자원을 최소한으로 사용하면서 연산의 효율을 높이기 위한 데이터 구조 (예를 들어, 비선형 데이터 구조에서 B-Tree, R-Tree, Trie, m-way search tree, AVL tree, Red-Black Tree)를 포함할 수 있다. 전술한 사항은 예시일 뿐 본 개시는 이에 제한되지 않는다. 데이터 구조는 신경망의 하이퍼 파라미터(Hyper-parameter)를 포함할 수 있다. 그리고 신경망의 하이퍼 파라미 터를 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 하이퍼 파라미터는 사용자에 의해 가변되 는 변수일 수 있다. 하이퍼 파라미터는 예를 들어, 학습률(learning rate), 비용 함수(cost function), 학습 사이클 반복 횟수, 가중치 초기화(Weight initialization)(예를 들어, 가중치 초기화 대상이 되는 가중치 값의 범위 설정), Hidden Unit 개수(예를 들어, 히든 레이어의 개수, 히든 레이어의 노드 수)를 포함할 수 있다. 전 술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한되지 않는다. 도 3은 본 개시내용의 일 실시예에 따라 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하기 위한 방법을 예시적으로 도시한다. 도 3에서 도시되는 바와 같이, 컴퓨팅 장치는 인공지능 기반의 모델에 대응되는 모델 정보 및 상기 인공지 능 기반의 모델이 구동될 타겟 디바이스의 특성을 나타내는 타겟 디바이스 정보를 획득할 수 있다. 일 실시예에서, 인공지능 기반의 모델에 대응되는 모델 정보는 인공지능 기반의 모델을 식별하기 위한 임의의 형태의 정보를 포함할 수 있다. 예를 들어, 모델 정보는 인공지능 모델의 식별 정보 및/또는 인공지능 기반의 모델에 대응되는 모델 파일 정보를 포함할 수 있다. 예를 들어, 모델 정보는 사용자로부터의 입력에 의해 획득 될 수 있다. 예를 들어, 사용자로부터의 입력은 복수의 선택지들 중에서 특정 모델 식별자를 선택하는 선택입력 및/또는 모델 파일을 업로드하는 업로드입력을 포함할 수 있다. 추가적인 예시에서, 모델 정보는 모델의 식별 정보, 모델 파일의 명칭, 모델 파일의 확장자, 모델 파일 자체, 소프트웨어 버전, 프레임워크, 모델의 크기 (size), 모델의 입력 형상(input shape), 배치 크기(batch size) 및/또는 채널의 개수를 포함할 수 있다. 일 실시예에서, 컴퓨팅 장치는 사용자로부터 입력된 모델 정보 및 사용자로부터 입력된 타겟 디바이스 정 보를 획득할 수 있다. 예를 들어, 타겟 디바이스 정보는 사용자로부터 입력된 모델 정보에 대응되는 인공지능기반의 모델이 실행될 디바이스를 식별하기 위한 임의의 형태의 정보를 포함할 수 있다. 예를 들어, 타겟 디바 이스 정보는 타겟 디바이스의 식별정보(identification information), 타겟 디바이스의 특성(예컨대, 메모리 용 량, 프로세서 정보 및/또는 성능 정보)을 기술하는 정보 및/또는 타겟 디바이스의 제조사 정보를 포함할 수 있 다. 제한이 아닌 예시로 타겟 디바이스 정보는 Jetson Nano, Jetson Xavier NX, Jetson TX2, Jetson AGX Xavier, Jetson AGX Orin, GPU AWS-T4, Xeon-W-2223, Raspberry Pi Zero, Raspberry Pi 2W, Raspberry Pi 3B+ 및/또는 Raspberry Pi Zero 4B를 포함할 수 있다 본 개시내용에서의 타겟 디바이스는 인공지능 기반의 모델이 실행될 디바이스를 지칭하도록 사용될 수 있다. 예 를 들어, 타겟 디바이스는 인공지능 기반의 모델이 구동될 임베디드 디바이스에 대응될 수 있다. 예를 들어, 타 겟 디바이스는 사용자 입력에 의해 결정될 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 정보에 기초하여 인공지능 기반의 모델에 포함되는 모델 연산자들을 결정함으로써 모델 연산자들을 포함하는 모델 연산자 리스트를 획득하고 그리고 타겟 디바이스 정보에 기초하여 모델 연산자들의 변경의 기준이 되는 타겟 연산자들을 결정함으로써 타겟 연산자들을 포함하는 타겟 연산자 리 스트를 획득할 수 있다. 일 실시예에서, 모델 연산자는 인공지능 기반의 모델을 구성하는 연산자에 대응될 수 있다. 예를 들어, 모델 연 산자는 사용자 입력으로부터 결정된 모델 정보에 기반하여 획득될 수 있다. 예를 들어, 모델 연산자들은 모델 정보에 대응되어 사전 저장된 연산자들을 포함할 수 있다. 예를 들어, 모델 연산자들은 모델 파일에 대한 파싱 (parsing)에 기초하여 획득될 수 있다. 예를 들어, 모델이 제 1 Convolutional 연산을 수행하는 제 1 연산자, Sigmoid 연산을 수행하는 제 2 연산자, 제 2 Convolutional 연산을 수행하는 제 3 연산자, 및 Add 연산을 수행 하는 제 4 연산자로 구성되었다고 가정한다. 컴퓨팅 장치는 모델에 대한 파싱을 통해, 입력된 모델로부터 제 1 연산자, 제 2 연산자, 제 3 연산자 및 제 4 연산자에 대응되는 모델 연산자들을 획득할 수 있다. 일 실시 예에서, 모델 연산자 리스트는 모델 연산자들의 그룹에 대응될 수 있다. 일 실시예에서, 타겟 연산자는 타겟 디바이스에서 지원가능한 연산자 또는 타겟 디바이스에 호환가능한 연산자 에 대응될 수 있다. 예를 들어, 타겟 연산자는 타겟 디바이스에 대응되어 사전 저장될 수 있다. 예를 들어, 타 겟 연산자는 모델 연산자가 변경되어야 하는지 결정하는데 있어서 기준이 될 수 있다. 타겟 연산자 리스트는 타 겟 연산자들의 그룹에 대응될 수 있다. 일 실시예에서, 컴퓨팅 장치는 입력된 모델 정보로부터 모델 타입 정보를 결정할 수 있다. 예를 들어, 모 델 타입 정보는 모델 파일의 확장자를 포함할 수 있다. 이러한 예시에서, 컴퓨팅 장치는 모델 정보에 포함 된 모델 파일의 확장자에 기초하여, 해당 모델이 재학습이 가능한 모델인지 여부를 결정할 수 있다. 예를 들어, ONNX 확장자 및/또는 PT 확장자에 대응되는 모델은 재학습이 가능한 모델로 사전 결정될 수 있다. 예를 들어, TFLITE 확장자에 대응되는 모델은 재학습이 불가능한 모델로 사전 결정될 수 있다. 예를 들어, 인공지능 기반의 모델이 타겟 디바이스에 적합하게 동작하도록 변환되는 경우, 상기 인공지능 기반의 모델이 사전학습된 모델이 라고 하더라도, 변환된 모델에 대한 재학습이 필요할 수 있다. 본 개시내용의 일 실시예에 따른 기법은 재학습 이 허용되는 모델의 타입과 재학습이 허용되지 않는 모델의 타입을 구분하여 관리하고 그리고 재학습이 필요한 모델 내의 연산자와 재학습이 필요하지 않는 모델 내의 연산자를 구분함으로써, 인공지능 기반의 모델을 타겟 디바이스에 적합하도록 변환할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 정보에 포함된 모델 타입에 기초하여, 상기 인공지능 기반의 모델의 재학습이 가능한지 여부를 결정하고 그리고 상기 인공지능 기반의 모델의 재학습 가능 여부에 따라, 상기 타겟 연산자 리스트에 포함될 상기 타겟 연산자들을 상이한 방식으로 결정할 수 있다. 예를 들어, 모델의 확장자에 따라 모델의 재학습이 가능하다고 결정된 경우, 컴퓨팅 장치는 제 1 타입에 해당하는 연산자들을 타겟 연 산자 리스트에 포함시킬 수 있다. 예를 들어, 모델의 확장자에 따라 모델의 재학습이 불가능하다고 결정된 경우, 컴퓨팅 장치는 제 2 타입에 해당하는 연산자들을 타겟 연산자 리스트에 포함시킬 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 타입 정보 및 타겟 디바이스 정보에 기초하여, 모델 연산자들 중 적어 도 하나를 변경하기 위한 기준이 되는 타겟 연산자들을 결정할 수 있다. 예를 들어, 컴퓨팅 장치는 타겟 디바이스 정보에 대응되는 연산자들 중에서 모델 타입 정보에 따라 결정된 재학습 여부에 기초하여 타겟 연산자 들을 결정할 수 있다. 특정 타겟 디바이스가 지원하는 연산자들은 재학습이 필요한 연산자와 재학습이 필요하지 않은 연산자로 분류될 수 있다. 예를 들어, ADD 연산자는 재학습이 필요없는 연산자로 분류될 수 있으며 Convolutional 연산자는 재학습이 필요한 연산자로 분류될 수 있다. 일 실시예에서, 컴퓨팅 장치는 타겟 디바이스가 지원하는 연산자들의 재학습 특성과 모델 파일의 확장자에 따른 모델의 재학습 특성을 함께 고려하여, 타겟 디바이스 정보에 대응되는 타겟 연산자 리스트를 결정할 수 있 다. 예를 들어, 컴퓨팅 장치는, 입력된 모델 정보가 재학습 불가능한 확장자를 포함하는 경우, 타겟 연산 자 리스트를 구성 시, 학습이 필요한 연산자(예컨대, Dense layer 및/또는 Convolutional layer)를 제외할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자 리스트와 타겟 연산자 리스트를 비교할 수 있다. 일 실시예에서, 컴퓨팅 장치는 인공지능 기반의 모델의 입력 연산자로부터 출력 연산자로의 순서에 따라서, 모델 연산자 리스트에 포함된 모델 연산자가 타겟 연산자 리스트에 포함되는 타겟 연산자들 중 적어도 하나와 매칭되는지 여부를 결정할 수 있다. 모델 연산자 리스트와 타겟 연산자 리스트 간의 비교는 상기 모델 연산자 리스트에 포함된 상기 모델 연산자들 각각에 대해서 수행될 수 있다. 예를 들어, 컴퓨팅 장치는 인공지능 기반의 모델에 대응되는 모델 연산자 리스트 내에서의 모델 연산자들 의 순서를 결정할 수 있다. 모델 연산자들의 순서는 대응되는 인공지능 기반의 모델의 동작들의 시계열적인 순 서에 대응될 수 있다. 예를 들어, 인공지능 기반의 모델이 이미지를 입력으로 받고 Convolutional 연산을 수행 하는 제 1 레이어, 제 1 레이어 의 출력을 입력받아 Sigmoid 연산을 수행하는 제 2 레이어, 및 제 1 레이어 의 출력과 제 2 레이어 의 출력을 입력으로 하여 합산 또는 곱셈 연산을 수행하는 제 3 레이어를 포함한다고 가정 한다. 이러한 상황에서, 컴퓨팅 장치는 인공지능 기반의 모델의 동작 순서를 제 1 레이어, 제 2 레이어 및 제 3 레이어의 순서로 결정할 수 있다. 컴퓨팅 장치는 인공지능 기반의 모델의 입력 연산자로부터 출력 연 산자로의 순서로 인공지능 기반의 모델에 포함된 연산자들 각각에 대해서 타겟 연산자 리스트와의 비교를 수행 할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자 리스트에 포함된 모델 연산자들 각각에 대응되는 연산자가 타 겟 연산자 리스트에 포함되어 있는지 여부를 판단하는 방식으로 모델 연산자 리스트와 타겟 연산자 리스트를 비 교할 수 있다. 예를 들어, 모델 연산자 리스트에 포함된 제 1 모델 연산자와 대응되는 연산자가 타겟 연산자 리 스트에 존재하는 경우, 컴퓨팅 장치는 제 1 모델 연산자가 타겟 연산자 리스트와 매칭되는 것으로 결정할 수 있다. 예를 들어, 모델 연산자 리스트에 포함된 제 2 모델 연산자와 동일한 연산자가 타겟 연산자 리스트에 존재하지는 않지만, 제 2 모델 연산자와 기능적으로 실질적으로 대응되는 연산자가 타겟 연산자 리스트에 존재 하는 경우, 컴퓨팅 장치는 제 2 모델 연산자가 타겟 연산자 리스트와 매칭되는 것으로 결정할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자가 타겟 연산자 리스트에 존재하는 타겟 연산자와 매칭된다고 결정되는 경우, 모델 연산자를 변경하지 않고 그대로 사용할 것을 결정할 수 있다. 타겟 연산자는 모델을 실행 하고자 하는 타겟 디바이스에서 지원가능한 연산자이기 때문에, 모델 연산자가 타겟 연산자와 매칭되는 경우, 해당 모델 연산자에 대한 변경을 수행하지 않고, 다음 모델 연산자와 타겟 연산자 리스트를 비교할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자가 타겟 연산자 리스트에 존재하는 타겟 연산자와 매칭되지 않 는 경우, 모델 연산자를 대체 연산자로 변경할 필요가 있다고 결정할 수 있다. 컴퓨팅 장치는 비교의 결과 모델 연산자가 타겟 연산자 리스트에 존재하는 타겟 연산자와 매칭되지 않는 경우, 해당 모델 연산자를 대체 연 산자로 변경함으로써 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경할 수 있다. 일 실시예에서, 컴퓨팅 장치는 비교의 결과에 기초하여, 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자 리스트와 타겟 연산자 리스트 간의 비교의 결과, 모델 연산자 들 중에서 타겟 연산자 리스트에 포함되는 타겟 연산자와 매칭되는 제 1 모델 연산자에 대해서, 상기 제 1 모델 연산자를 변경하지 않을 것으로 결정할 수 있다. 컴퓨팅 장치는 상기 비교의 결과 상기 모델 연산자들 중 에서 상기 타겟 연산자 리스트에 포함되는 타겟 연산자와 매칭되지 않는 제 2 모델 연산자에 대해서, 상기 제 2 모델 연산자를 변경할 것으로 결정할 수 있다. 일 실시예에서, 컴퓨팅 장치는 상기 모델 연산자들 중에서 상기 타겟 연산자 리스트에 포함되는 타겟 연산 자와 매칭되지 않는 제 2 모델 연산자를 상기 타겟 연산자 리스트에 포함되는 상기 타겟 연산자와 매칭 가능한 대체(replacement) 연산자로 변경할 것을 결정할 수 있다. 모델 연산자가 타겟 연산자에 대응되도록 연산자가 대체 연산자로 지칭될 수 있다. 예를 들어, 대체 연산자는 모델 연산자와 동일하지는 않지만 모델 연산자가 수 행하는 기능을 동일하게 수행할 수 있는 연산자를 지칭할 수 있다. 예를 들어, 대체 연산자는 타겟 연산자 리스 트에 포함된 타겟 연산자와 동일한 연산자를 지칭할 수도 있다. 컴퓨팅 장치가 모델 연산자를 대체 연산자로 변경함으로써, 인공지능 기반의 모델이 타겟 디바이스에서 구동가능한 타겟 모델로 변경될 수 있다. 타겟 모 델은 인공지능 기반의 모델이 타겟 디바이스에서 구동 가능하도록 인공지능 기반의 모델에 포함된 모델 연산자 들 중 적어도 일부가 변경된 모델에 대응될 수 있다. 일 실시예에서, 컴퓨팅 장치는 상기 비교의 결과에 기초하여, 상기 모델 연산자 리스트 내에서 변경될 모 델 연산자를 결정하고, 상기 변경될 모델 연산자에 대응되는 연산자 특성(operator characteristic)에 기초하여, 상기 변경될 모델 연산자의 연산자 타입을 결정할 수 있다. 컴퓨팅 장치는 결정된 연산자 타입 에 기초하여, 상기 모델 연산자를 대체 연산자로 변경할 수 있다. 예를 들어, 컴퓨팅 장치는 변경될 모델 연산자의 연산자 타입에 따라 상이한 방식으로 모델 연산자를 대체 연산자로 변경할 수 있다. 일 실시예에서, 연산자 특성은 연산자의 동작 특성(operational characteristic) 또는 기능 특성(functional characteristic)을 지칭할 수 있다. 이러한 연산자 특성은 모델 연산자들 각각에 할당될 수 있다. 예를 들어, 모델 연산자 리스트에 포함된 제 1 모델 연산자에 제 1 연산자 타입이 할당되고, 제 2 모델 연산자에 제 2 연산 자 타입이 할당되고, 제 3 모델 연산자에 제 3 연산자 타입이 할당되고, 그리고 제 4 모델 연산자에 제 1 연산 자 타입이 할당될 수 있다. 일 실시예에서, 연산자 특성 또는 연산자 타입은 사전결정된 복수개 타입들을 가질 수 있다. 연산자 특성 또는 연산자 타입은 연산자가 수행하는 동작 단위 또는 연산자의 기능 단위로 분류될 수 있다. 예를 들어, 연산자 특 성 또는 연산자 타입은, 활성화(activation) 연산을 나타내는 제 1 연산자 타입, 사전결정된 레벨 미만의 연산 난이도(operation difficulty)를 가지는 단순 연산을 나타내는 제 2 연산자 타입, 및 상기 단순 연산이 아닌 레 이어 관련 연산(layer-related operation)을 나타내는 제 3 연산자 타입을 포함할 수 있다. 일 실시예에서, 제 1 연산자 타입은 활성화 연산을 수행하는 연산자에 할당될 수 있다. 예를 들어, 활성화 연산 은 Sigmoid 관련 연산, Tanh 관련 연산, ReLU 관련 연산, ELU 관련 연산 및/또는 Maxout 연산을 포함할 수 있 다. 일 실시예에서, 제 2 연산자 타입은 난이도가 낮은(예컨대, 사전 결정된 임계 난이도 미만의 난이도) 단순 연산 을 수행하는 연산자에 할당될 수 있다. 예를 들어, 단순 연산은 합산 연산, 곱셈 연산 및/또는 뺄셈 연산을 포 함할 수 있다. 일 실시예에서, 제 3 연산자 타입은 상기 단순 연산이 아닌 레이어 관련 연산을 수행하는 연산자에 할당될 수 있다. 예를 들어, 레이어 관련 연산은 Convolutional 연산을 포함할 수 있다. 일 실시예에서, 컴퓨팅 장치는 변경될 모델 연산자에 대응되는 연산자 특성 또는 연산자 타입에 따라 연산 자 변경 방식을 상이하게 수행할 수 있다. 컴퓨팅 장치는 복수의 상이한 연산자 변경 알고리즘들을 포함할 수 있다. 예를 들어, 복수의 상이한 연산자 변경 알고리즘들은, 입력값에 대한 출력값의 유사도 판단을 이용하 여 연산자를 변경하는 제 1 변경 알고리즘, 연산의 수학적 결과의 일치 여부를 기준으로 연산자를 변경하는 제 2 변경 알고리즘, 및/또는 연산의 수학적 결과의 유사도를 기준으로 연산자를 변경하는 제 3 변경 알고리즘을 포함할 수 있다. 예를 들어, 연산자 변경 알고리즘은 모델 연산자가 타겟 연산자와 대응되도록 혹은 타겟 연산 자와 유사한 기능을 갖도록 변경하기 위한 알고리즘을 포함할 수 있다. 일 실시예에서, 컴퓨팅 장치는 연산자 타입에 대응되는 연산자 변경 알고리즘을 이용하여, 모델 연산자를 대체 연산자로 변경할 수 있다. 예를 들어, 변경될 모델 연산자의 연산자 타입이 상이한 경우, 모델 연산자 변 경에 사용되는 연산자 변경 알고리즘이 상이할 수 있다. 일 실시예에서, 컴퓨팅 장치는 변경될 모델 연산자의 연산자 타입이 활성화 연산을 나타내는 제 1 연산자 타입으로 결정된 경우, 입력값에 대한 출력값의 유사도 판단을 이용하여 연산자를 변경하는 제 1 변경 알고리즘 에 기초하여 상기 모델 연산자를 대체 연산자로 변경할 수 있다. 예를 들어, 제 1 변경 알고리즘은 활성화 연산 의 유사도를 이용하여 연산자 변경을 수행할 수 있다. 제 1 변경 알고리즘은 연산자의 입력과 활성화 출력 간의 값의 유사도 또는 입력의 유사도, 또는 활성화 출력의 유사도 이용하여 연산자 변경을 수행할 수 있다. 예를 들 어, 제 1 변경 알고리즘은 변경될 모델 연산자의 활성화 값과 유사도가 사전결정된 임계값 이상인 타겟 연산자 (또는 유사도가 가장 높은 타겟 연산자)를 변경의 대상(예컨대, 대체 연산자)으로 결정할 수 있다. 컴퓨팅 장치 는 변경될 모델 연산자가 제 1 연산자 타입으로 결정된 경우, 복수의 타겟 연산자들 중 변경될 모델 연산 자의 변경의 대상이 되는 대체 연산자를 제 1 변경 알고리즘에 기반하여 결정할 수 있다.수학식 1"}
{"patent_id": "10-2025-0010860", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "일 실시예에서, 입력 값 X (예컨대, X = {x │ -6 ≤ x ≤ 6} )가 정수이고, 모델 연산자가 Y (예컨대, Y = {y │ y = Model_operator (x) }이고, 그리고 타겟 연산자가 (예컨대, = {y │ y = Target_operator (x) }) 일 때, 제 1 변경 알고리즘에 따른 유사도 판단은 상기 수학식 1에서 예시되는 내용에 따라 이루어질 수 있 다. 일례로, 수학식 1에서의 v는 자연수에 대응될 수 있다. 예를 들어, 제 1 변경 알고리즘은 연산자로 입력되 는 값들 각각을 유사도 판단에 이용할 수 있다. 예를 들어, 제 1 변경 알고리즘은 모델 연산자 (예컨대, Y)와 타겟 연산자 리스트에 포함된 타겟 연산자(예컨대, )들 각각에 대한 유사도를 비교하는 방식으로, 복수의 타 겟 연산자들 중 모델 연산자의 변경의 대상이 되는 대체 연산자를 결정할 수 있다. 일 실시예에서, 변경될 모델 연산자의 연산자 타입이 사전결정된 레벨 미만의 연산 난이도를 가지는 단순 연산 을 나타내는 제 2 연산자 타입으로 결정된 경우, 연산의 수학적 결과의 일치 여부를 기준으로 연산자를 변경하 는 제 2 변경 알고리즘에 기초하여 상기 모델 연산자를 대체 연산자로 변경할 수 있다. 일 실시예에서, 제 2 변경 알고리즘은 수학적 또는 수식적으로 대응되는 연산자로 모델 연산자를 변경하기 위한 알고리즘을 포함할 수 있다. 예를 들어, 제 2 변경 알고리즘은 수학적으로 또는 수식적으로 대응되는 혹은 가장 유사한 연산자를 타겟 연산자 리스트 내에서 찾는 알고리즘을 포함할 수 있다. 예를 들어, 변경될 모델 연산자 가 거듭제곱을 수행하는 Pow 연산자인 경우, 컴퓨팅 장치는 타겟 연산자 리스트에 포함된 곱셈 연산을 수 행하는 Mul 연산자를 복수개(예컨대, 2개) 사용하는 형태로 모델 연산자를 변경할 수 있다. 추가적인 예시에서, 모델 연산자의 변경은 사용자 입력에 추가로 기초하여 수행될 수 있다. 예를 들어, 사용자가 사용하지 않는 것으로 지정한 연산자가 있다면 컴퓨팅 장치는 타겟 연산자 리스트 내에서 사용자가 지정한 연산자를 제외한 타겟 연산자를 기준으로 연산자 변경을 수행할 수 있다. 일 실시예에서, 변경될 모델 연산자의 연산자 타입이 상기 단순 연산이 아닌 레이어 관련 연산을 나타내는 제 3 연산자 타입으로 결정된 경우, 컴퓨팅 장치는 연산의 수학적 결과의 유사도를 기준으로 연산자를 변경하는 제 3 변경 알고리즘에 기초하여 상기 모델 연산자를 대체 연산자로 변경할 수 있다. 일 실시예에서, 변경될 모 델 연산자가 레이어 관련 연산자 타입으로 결정된 경우, 기능적 또는 수학적으로 가장 유사한 결과를 달성하는 연산자로 모델 연산자를 변경할 수 있다. 예를 들어, Convolution Layer의 kernel_size = 6인 필터를 사용하는 모델 연산자의 경우 kernel_size = 3인 필터를 사용하는 Convolution Layer 2개를 활용하는 제 1 타겟 연산자 와 kernel_size = 7인 필터를 사용하는 Convolution Layer 1개를 사용하는 제 2 타겟 연산자가 고려될 수 있다. kernel_size = 7 인 필터의 하나의 로우(row)와 컬럼(column)의 값을 0으로 바꾸면, 그 결과는 원래 Convolution Layer와 수식적으로 일치할 수 있다. 따라서, 컴퓨팅 장치는 이러한 예시에서 해당 모델 연산 자를 kernel_size = 7인 필터를 사용하는 Convolution Layer 1개를 사용하는 대체 연산자로 변경할 것을 결정할 수 있다. 추가적인 예시에서, 모델 연산자의 변경은 사용자 입력에 추가로 기초하여 수행될 수 있다. 사용자 입 력에 따른 가중치가 붙을 수 있는 엘리먼트는 레이어의 갯수, kernel_size, strides 및/또는 pad를 포함할 수 있다. 예를 들어, 사용자 입력에 따라 결정된 우선순위에 따라 kernel_size가 상대적으로 작은 Convolution Layer를 대체 연산자로 선택하는 것으로 결정된 경우, 컴퓨팅 장치는 위의 제 1 타겟 연산자 및 제 2 타겟연산자 중 kernel_size = 3인 Convolution Layer 2개를 활용하는 제 1 타겟 연산자를 변경 대상으로 결정할 수 있다. 일 실시예에서, 컴퓨팅 장치는 변경의 대상(target)이 되는 대체 연산자와 변경될 모델 연산자 간의 유사 도와 사용자 입력에 포함된 사용자 임계값 또는 사용자 제약사항을 비교함으로써 모델 연산자의 변경 여부를 결 정할 수 있다. 이러한 사용자 입력에 포함된 사용자 임계값 또는 사용자 제약사항은 유사도에 대한 임계값, 특 정 엘리먼트의 개수에 대한 임계값, 특정 연산자를 사용하고 싶다는 사용자 선호도 정보 및/또는 특정 연산자를 사용하지 않는다는 사용자 지정 정보를 포함할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자가 변 경될 대체 연산자와 사용자 입력에 따른 사용자 임계값 또는 사용자 제약사항을 비교하여, 대체 연산자로의 변 경 여부를 결정할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자가 변경될 대체 연산자가 타겟 연산자 리스트에 포함되는지 여 부에 기초하여, 모델 연산자의 변경 여부를 결정할 수 있다. 모델 연산자가 변경될 대체 연산자가 타겟 연산자 리스트에 포함되지 않는 경우, 해당 모델 연산자에 대한 변경이 수행되지 않는 것으로 결정될 수 있다. 도 4는 본 개시내용의 일 실시예에 따라 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하기 위한 방법을 예시적으로 도시한다. 일 실시예에서, 컴퓨팅 장치는 모델 정보 및 타겟 디바이스 정보를 획득할 수 있다. 일 실시예 에서, 컴퓨팅 장치는 모델 정보 및 타겟 디바이스 정보와 함께 사용자 임계값 또는 사용자 제약 사항을 포함하는 사용자 입력을 수신할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 정보로부터 모델 연산자 리스트를 획득 또는 생성할 수 있 다. 일 실시예에서, 컴퓨팅 장치는 타겟 디바이스 정보로부터 타겟 연산자 리스트를 획득 또는 생성 할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 정보를 분석함으로써 모델에 포함된 연산자들의 식별 정보 및/또는 연 산자들의 순서 정보를 결정할 수 있다. 예를 들어, 모델 정보는 모델을 식별하기 위한 임의의 형태의 정보로서, Tflite, Onnxruntime, OpenVINO 및 Tensorrt 등과 같이 모델의 실행 환경을 나타내는 정보를 포함할 수 있다. 예를 들어, 모델 정보는 모델의 실행환경에 대한 라이브러리 정보 또는 소프트웨어 버전 정보를 포함할 수도 있 다. 이러한 예시에서 모델 정보는 Tflite의 Python 3.7.3 및 pillow 5.4.1로 표현될 수 있다. 예를 들어, 모델 정보는 모델 파일을 포함할 수 있다. 이 경우, 컴퓨팅 장치는 모델 파일을 분석함으로써 모델 파일 내에서 동작되는 연산자들의 식별 정보를 획득할 수 있다. 일 실시예에서, 컴퓨팅 장치는 타겟 디바이스 정보에 매핑되어 사전 저장된 타겟 연산자들을 포함하는 타 겟 연산자 리스트를 획득할 수 있다. 예를 들어, 타겟 디바이스 정보는 타겟 디바이스를 식별하기 위한 임의의 형태의 정보를 포함할 수 있다. 제한이 아닌 예시로, 타겟 디바이스는, Jetson Nano, Jetson Xavier NX, Jetson TX2, Jetson AGX Xavier, Jetson AGX Orin, GPU AWS-T4, Xeon-W-2223, Raspberry Pi Zero, Raspberry Pi 2W, Raspberry Pi 3B+, Raspberry Pi Zero 4B 및 Mobile 등과 같은 다양한 형태의 하드웨어를 포함할 수 있 다. 추가적인 실시예에서, 컴퓨팅 장치는 사용자가 지정한 타겟 디바이스의 성능을 포함하는 타겟 디바이스 정 보를 포함할 수도 있다. 이러한 실시예에서, 타겟 디바이스 정보는 모델이 실행되고자 하는 디바이스의 성능 정 보를 포함할 수 있다. 이에 따라, 컴퓨팅 장치는 성능 정보에 기초하여, 해당 성능 정보를 만족하는 타겟 디바이스들을 포함하는 후보 타겟 디바이스 리스트를 제공할 수 있다. 후보 타겟 디바이스 리스트 상에서 타겟 디바이스를 선택하는 사용자 입력에 응답하여, 컴퓨팅 장치는 선택된 타겟 디바이스에 대응되는 (사전 저 장된) 타겟 연산자 리스트를 획득할 수 있다. 예를 들어, 성능 정보에 대한 예시로 레이턴시 정보(latency information), 전력 사용량 정보 및/또는 메모리 사용량 정보가 포함될 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자 리스트와 타겟 연산자 리스트를 비교함으로써 모델 연산자를 대체 연산자로 변경할 수 있다. 대체 연산자는 모델 연산자에 대응되는 연산자 타입에 따라 상이한 방식으로 결정될 수 있다. 대체 연산자는 타겟 연산자 리스트에 포함된 타겟 연산자들 중 적 어도 하나와 대응될 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 정보 및 타겟 디바이스 정보를 수신하는 것에 응답하여, 사 용자의 모델을 타겟 디바이스에서 구동 가능하도록 변환할 수 있다. 이러한 방식으로, 본 개시내용의 일 실시예 에 따른 기법은 디바이스 인지 또는 하드웨어 인지를 바탕으로 사용자에게 디바이스에서 구동가능한 모델을 제공할 수 있다. 도 5는 본 개시내용의 일 실시예에 따라 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하기 위한 방법을 예시적으로 도시한다. 본 개시내용의 일 실시예에 따른 기법은, 사용자가 제공하는 임베디드 타겟 디바이스에 구동시킬 모델 정보와 타겟 디바이스 미지원 연산자와 타겟 디바이스 지원 연산자 간의 최대 유사성 및 유사성 판단에 필요한 가중치 를 바탕으로 사용자에게 임베디드 디바이스에서 해당 모델이 구동 가능한지 여부, 해당 모델의 재학습이 필요한 지 여부 그리고/또는 구동 가능한 모델 혹은 구동 불가능한 이유를 제공할 수 있다. 일 실시예에서, 컴퓨팅 장치는 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경 하기 위한 사용자 입력을 수신할 수 있다. 예를 들어, 사용자 입력은 인공지능 기반의 모델에 대응되는 모 델 정보, 모델이 실행될 타겟 디바이스에 대응되는 타겟 디바이스 정보 및/또는 변경될 모델과 관련된 사용자 제약사항, 사용자 가중치 또는 사용자 임계값과 관련된 사용자 정보를 포함할 수 있다. 일 실시예에서, 컴퓨팅 장치는 사용자 입력에 기초하여 인공지능 기반의 모델이 재학습 가능한 모델인지 여부를 결정할 수 있다. 예를 들어, 컴퓨팅 장치는 사용자 입력에 포함된 모델 정보에 기초하여 인공 지능 기반의 모델이 재학습 가능한 모델인지 여부를 결정할 수 있다. 예를 들어, 컴퓨팅 장치는 사용자 정 보에 포함된 인공지능 기반의 모델의 모델 파일을 이용하여 인공지능 기반의 모델이 재학습 가능한 모델인지 여 부를 결정할 수 있다. 예를 들어, 컴퓨팅 장치는 모델 파일의 모델 확장자를 이용하여 인공지능 기반의 모 델이 재학습 가능한 모델인지 여부를 결정할 수 있다. 예를 들어, 컴퓨팅 장치는 모델 확장자와 재학습 가 능한지 여부를 매핑시킨 사전 저장된 데이터를 이용하여, 인공지능 기반의 모델이 재학습 가능한 모델인지 여부 를 결정할 수 있다. 이러한 사전 저장된 데이터는 모델의 확장자 별로 해당 확장자가 재학습 가능한지 여부를 표시한 데이터를 포함할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 정보에 포함된 인공지능 기반의 모델이 재학습 가능한 모델인 경우 타 겟 연산자 리스트를 생성할 수 있다. 일 실시예에서, 타겟 연산자 리스트는 사용자 입력에 포함된 타겟 디 바이스에서 지원 가능한 타겟 연산자들의 집합에 대응될 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 정보에 포함된 인공지능 기반의 모델이 재학습 가능하지 않은 모델인 경우 학습이 필요한 연산자가 제외된 타겟 연산자 리스트를 생성할 수 있다. 예를 들어, 컴퓨팅 장치(10 0)는 연산자 별로 학습이 필요한지 여부를 사전 할당할 수 있다. 컴퓨팅 장치는 모델 정보의 모델 확장자 를 이용하여 해당 모델의 재학습 가능 여부를 결정하고 그리고 재학습 가능한 모델인 경우 타겟 디바이스에서 지원가능한 연산자들 중 학습이 필요한 연산자를 제외함으로써(즉, 학습이 필요하지 않는 연산자만 포함시킴으 로써) 타겟 연산자 리스트를 생성할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 정보에 포함된 모델 확장자에 따라 모델의 재학습 가능 여부를 결정하 고 그리고 모델의 재학습 가능 여부에 따라서 타겟 연산자 리스트에 포함시킬 타겟 연산자들을 가변시킬 수 있 다. 일 실시예에서, 컴퓨팅 장치는 사용자 입력을 수신하는 것에 응답하여 모델 연산자 리스트를 생성할 수 있 다. 사용자 입력에 포함된 모델 정보에 기초하여 해당 모델에 포함된 모델 연산자들의 집합인 모델 연산자 리스트가 생성될 수 있다. 일 실시예에서, 컴퓨팅 장치는 타겟 연산자 리스트 및 모델 연산자 리스트를 비교함으로써 모델 연산자 리 스트에 포함된 모델 연산자들 각각이 타겟 디바이스에서 지원가능한 연산자인지 여부를 결정할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자가 타겟 연산자 리스트에 포함된다고 결정되는 경우, 해당 모델 연산자에 대해서는 변경을 적용하지 않을 것을 결정하고 다음번 모델 연산자에 대한 비교를 수행할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자가 타겟 연산자 리스트에 포함되지 않는다고 결정되는 경우, 타겟 연산자에 대응되도록 해당 모델 연산자에 대한 변경이 필요하다는 것을 결정할 수 있다. 일 실시예에서, 해당 모델 연산자에 대한 변경이 필요하다고 결정된 경우, 컴퓨팅 장치는 해당 모델 연산 자의 연산자 타입에 기초하여 모델 연산자에 대한 변경 여부 그리고/또는 변경 방식을 결정할 수 있다. 일 실시예에서, 컴퓨팅 장치는 해당 모델 연산자가 단순 연산자에 해당하는지 여부를 결정할 수 있다 . 컴퓨팅 장치는 모델 연산자에 사전 할당된 연산자 타입이 사전 결정된 임계 난이도 미만의 수학적 인 난이도를 가지는 단순 연산자 타입에 해당하는지 여부를 결정할 수 있다. 일 실시예에서, 모델 연산자가 단순 연산자에 해당한다고 결정되는 경우, 컴퓨팅 장치는 모델 연산자와 수 식적으로 동일한 연산 결과를 출력하는 연산자를 대체 연산자로 선택할 수 있다. 예를 들어, 수식적으로 동일한 연산 결과는 합산 연산, 곱셈 연산, 나눗셈 연산, 제곱 연산 및/또는 뺄셈 연산의 조합에 따른 연산 결 과를 포함할 수 있다. 일 실시예에서, 모델 연산자가 단순 연산자에 해당하지 않는다고 결정되는 경우, 컴퓨팅 장치는 모델 연산 자가 활성화 연산자에 해당하는지 여부를 결정할 수 있다. 예를 들어, 활성화 연산자는 입력 신호의 총합 을 출력 신호로 변환하는 기능을 수행할 수 있다. 예를 들어, 활성화 연산자는 입력 신호의 총합이 활성화를 일 으키는지 여부를 결정하는데 사용될 수 있다. 예를 들어, 활성화 연산자는 비선형 함수를 이용하여 동작될 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자가 활성화 연산자에 해당한다고 결정된 경우, 활성화 출력값의 코사인 유사도에 기초하여 대체가능한 연산자를 선택할 수 있다. 예를 들어, 컴퓨팅 장치는 모델 연 산자의 활성화 출력값과 타겟 연산자의 활성화 출력값 간의 유사도를 이용하여 모델 연산자의 변경 대상을 결정 할 수 있다. 예를 들어, 컴퓨팅 장치는 모델 연산자의 활성화 출력값과 후보 타겟 연산자들 각각의 활성화 출력값 간의 유사도(예컨대, Cosine 유사도)에 기초하여, 후보 타겟 연산자들 중에서 모델 연산자의 변경 대상 이 되는 타겟 연산자를 결정할 수 있다. 예를 들어, 컴퓨팅 장치는 후보 타겟 연산자들 중에서 제일 유사 성이 높은 활성화 연산자를 선택할 수 있다. 컴퓨팅 장치는 유사도 임계값이 사용자 입력에 존재할 경우 해당 임계값보다 큰 활성화 연산자 중 제일 유사성이 높은 활성화 연산자를 모델 연산자를 대체할 대상으로 설 정할 수 있다. 일 실시예에서, 모델 연산자가 활성화 연산자가 아닌 것으로 결정된 경우(예컨대, 모델 연산자가 단순 연산자도 아니며 그리고 활성화 연산자도 아닌 경우), 컴퓨팅 장치는 모델 연산자를 레이어 관련 연산자에 해당한다 고 결정할 수 있다. 일 실시예에서, 모델 연산자가 레이어 관련 연산자에 해당한다고 결정된 경우, 컴퓨팅 장치는 연산자의 동 작 또는 동작 결과의 수식적인 유사도에 기초하여 모델 연산자를 대체할 연산자를 선택할 수 있다. 예를 들어, 수식적인 유사도는 연산자에 따른 출력 결과의 유사도를 포함할 수 있다. 예를 들어, 수식적인 유사도는 연산자의 출력 결과가 가장 유사한 연산자를 찾기 위하여 사용될 수 있다. 예를 들어, 수식적인 유사도는 Kernel size, pad, stride 및/또는 레이어 개수에 기초하여 결정될 수 있다. 일 실시예에서, 컴퓨팅 장치는 단계 540, 550 및/또는 555에서 결정된 대체 가능한 연산자가 타겟 연산자 리스트에 존재하는지 여부를 결정할 수 있다. 일 실시예에서, 타겟 연산자 리스트에 대체 가능한 연산자가 존재하지 않는 경우, 컴퓨팅 장치는 해당 모 델 연산자를 대체할 연산자가 존재하지 않는다는 내용의 정보를 모델 연산자 리스트와 관련하여 저장 및 업데이 트할 수 있다. 예를 들어, 연산자 교체 실패와 관련된 정보는 교체 실패에 대한 정보는 사용자의 입력에 포함된 대체가능한 연산자가 사용자 요구사항에 부합하지 않는 경우 그리고/또는 해당 연산자를 대체할 연산자 가 타겟 연산자 리스트에 없는 경우 등과 관련된 정보를 포함할 수 있다. 일 실시예에서, 타겟 연산자 리스트에 대체 가능한 연산자가 존재하는 경우, 컴퓨팅 장치는 대체 가능한 연산자가 사용자 입력에 포함된 사용자 임계값 기준을 충족시키는지 여부를 결정할 수 있다. 사용자 임계 값 기준을 만족시키지 않는다고 결정된 경우, 컴퓨팅 장치는 해당 모델 연산자를 대체할 연산자가 존재하 지 않는다는 내용의 정보를 모델 연산자 리스트와 관련하여 저장 및 업데이트할 수 있다. 사용자 임계값 기준을 만족시킨다고 결정된 경우, 컴퓨팅 장치는 해당 모델 연산자를 대체 연산자로 변경할 것을 결정하 고 모델 연산자 리스트에 관련 정보를 추가할 수 있다. 일 실시예에서, 컴퓨팅 장치는 모델 연산자 리스트에 포함된 모델 연산자들 각각에 대해서 도 5에서 예시 되는 방법론을 수행할 수 있다. 이에 따라, 컴퓨팅 장치는 현재 처리의 대상이 되는 모델 연산자가 모델 연산자 리스트에 마지막 연산자인지 여부를 결정할 수 있다. 만약 마지막 연산자(예컨대, 출력 레이어)라 고 결정된 경우, 컴퓨팅 장치는 모델 연산자 리스트에 관련 정보를 추가할 수 있으며, 그리고 마지막 연산 자가 아니라고 결정된 경우, 컴퓨팅 장치는 단계 530으로 되돌아가 다음 번 모델 연산자가 타겟 디바이스 에서 지원가능한 연산자인지 여부를 결정할 수 있다. 본 개시내용의 일 실시예에서, 컴퓨팅 장치는 타겟 디바이스에 인공지능 기반의 모델이 동작가능한지 여부 에 대한 제 1 정보, 인공지능 기반의 모델이 재학습 가능한지 여부에 대한 제 2 정보, 인공지능 기반의 모델이변경된 타겟 모델에 대한 제 3 정보, 및/또는 타겟 모델에 대한 벤치마크 정보를 포함하는 제 4 정보 중 적어도 하나를 사용자에게 제공할 수 있다. 본 개시내용의 일 실시예에 따른 기법은, 디바이스 인지를 바탕으로 타겟 디바이스의 지원을 위한 인공지능 기 반의 모델의 연산자를 자동으로 변환할 수 있다. 일 실시예에 따른 기법은, 디바이스 인지를 바탕으로 타겟 디 바이스에서 지원하지 않는 모델의 연산자들을 사용자의 요구 사항에 맞게 가장 유사한 기능을 하는 연산자들로 치환할 수 있다. 일 실시예에서, 사용자는 구동시킬 모델 정보 및 타겟 디바이스 정보를 제공하는 것만으로, 설 계한 모델과 가장 비슷하면서 특정 타겟 디바이스에서 동작하는 변환된 모델을 제공받을 수 있다. 일 실시예에 따른 기법은, 변경될 연산자들에 대한 정보, 타겟 디바이스 미지원 연산자들에 대한 정보 및 모델의 재학습 가 능 여부 등과 같은 정보를 사용자에게 제공할 수 있기 때문에, 사용자는 사용자 요구에 부합하고 타겟 임베디드 디바이스에서 동작하는 인공지능 기반의 모델의 연산자들을 리소스 효율적인 방식으로 제공받을 수 있다. 이에 따라 특정 임베디드 디바이스가 지원하지 않는 연산자들을 디바이스가 지원하는 연산자들로 재설계 해야 하는 부담이 제거될 수 있다. 도 6은 본 개시내용의 일 실시예에 따른 컴퓨팅 환경의 개략도이다. 본 개시내용에서의 컴퓨팅 장치, 컴퓨터, 시스템, 컴포넌트, 모듈 또는 부(unit)는 특정의 태스크를 수행하거나 특정의 추상 데이터 유형을 구현하는 루틴, 프로시져, 프로그램, 컴포넌트, 데이터 구조 등을 포함한다. 또한, 당업자라면 본 개시내용에서 제시되는 방법들이 단일-프로세서 또는 멀티프로세서 컴퓨팅 디바이스, 미니컴퓨터, 메인프레임 컴퓨터는 물론 퍼스널 컴퓨터, 핸드헬드 컴퓨팅 디바이스, 마이크로프로세서-기반 또는 프로그램가능 가전 제품, 기타 등등(이들 각각은 하나 이상의 연관된 장치와 연결되어 동작할 수 있음)을 비롯 한 다른 컴퓨터 시스템 구성으로 실시될 수 있다는 것을 충분히 인식할 것이다. 본 개시내용에서 설명된 실시예들은 또한 어떤 태스크들이 통신 네트워크를 통해 연결되어 있는 원격 처리 장치 들에 의해 수행되는 분산 컴퓨팅 환경에서 실시될 수 있다. 분산 컴퓨팅 환경에서, 프로그램 모듈은 로컬 및 원 격 메모리 저장 장치 둘 다에 위치할 수 있다. 컴퓨팅 장치는 통상적으로 다양한 컴퓨터 판독가능 매체를 포함한다. 컴퓨터에 의해 액세스 가능한 매체는 그 어떤 것이든지 컴퓨터 판독가능 매체가 될 수 있고, 이러한 컴퓨터 판독가능 매체는 휘발성 및 비휘발성 매체, 일시적(transitory) 및 비일시적(non-transitory) 매체, 이동식 및 비-이동식 매체를 포함한다. 제한이 아닌 예 로서, 컴퓨터 판독가능 매체는 컴퓨터 판독가능 저장 매체 및 컴퓨터 판독가능 전송 매체를 포함할 수 있다. 컴퓨터 판독가능 저장 매체는 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터와 같은 정보를 저장하는 임의의 방법 또는 기술로 구현되는 휘발성 및 비휘발성 매체, 일시적 및 비-일시적 매체, 이동 식 및 비이동식 매체를 포함한다. 컴퓨터 판독가능 저장 매체는 RAM, ROM, EEPROM, 플래시 메모리 또는 기타 메 모리 기술, CD-ROM, DVD(digital video disk) 또는 기타 광 디스크 저장 장치, 자기 카세트, 자기 테이프, 자 기 디스크 저장 장치 또는 기타 자기 저장 장치, 또는 컴퓨터에 의해 액세스될 수 있고 원하는 정보를 저장하는 데 사용될 수 있는 임의의 기타 매체를 포함하지만, 이에 한정되지 않는다. 컴퓨터 판독가능 전송 매체는 통상적으로 반송파(carrier wave) 또는 기타 전송 메커니즘(transport mechanis m)과 같은 피변조 데이터 신호(modulated data signal)에 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터 등을 구현하고 모든 정보 전달 매체를 포함한다. 피변조 데이터 신호라는 용어는 신호 내에 정보를 인코딩하도록 그 신호의 특성들 중 하나 이상을 설정 또는 변경시킨 신호를 의미한다. 제한이 아닌 예로 서, 컴퓨터 판독가능 전송 매체는 유선 네트워크 또는 직접 배선 접속(direct-wired connection)과 같은 유선 매체, 그리고 음향, RF, 적외선, 기타 무선 매체와 같은 무선 매체를 포함한다. 상술된 매체들 중 임의의 것의 조합도 역시 컴퓨터 판독가능 전송 매체의 범위 안에 포함되는 것으로 한다. 컴퓨터를 포함하는 본 발명의 여러가지 측면들을 구현하는 예시적인 환경이 나타내어져 있으며, 컴 퓨터는 처리 장치, 시스템 메모리 및 시스템 버스를 포함한다. 본 명세서에서의 컴퓨 터는 컴퓨팅 디바이스와 상호 호환 가능하게 사용될 수 있다. 시스템 버스는 시스템 메모리 (이에 한정되지 않음)를 비롯한 시스템 컴포넌트들을 처리 장치에 연결시킨다. 처리 장치는 다양한 상용 프로세서들 중 임의의 프로세서일 수 있다. 듀얼 프로세서 및 기타 멀티프로세서 아키텍처도 역시 처리 장치로서 이용될 수 있다. 시스템 버스는 메모리 버스, 주변장치 버스, 및 다양한 상용 버스 아키텍처 중 임의의 것을 사용하는 로 컬 버스에 추가적으로 상호 연결될 수 있는 몇가지 유형의 버스 구조 중 임의의 것일 수 있다. 시스템 메모리는 판독 전용 메모리(ROM) 및 랜덤 액세스 메모리(RAM)를 포함한다. 기본 입/출력 시스템 (BIOS)은 ROM, EPROM, EEPROM 등의 비휘발성 메모리에 저장되며, 이 BIOS는 시동 중과 같은 때에 컴퓨터 내의 구성요소들 간에 정보를 전송하는 일을 돕는 기본적인 루틴을 포함한다. RAM은 또한 데이터 를 캐싱하기 위한 정적 RAM 등의 고속 RAM을 포함할 수 있다. 컴퓨터는 또한 내장형 하드 디스크 드라이브(HDD)(예를 들어, EIDE, SATA), 자기 플로피 디스크 드 라이브(FDD)(예를 들어, 이동식 디스켓으로부터 판독을 하거나 그에 기록을 하기 위한 것임), SSD 및 광 디스크 드라이브(예를 들어, CD-ROM 디스크를 판독하거나 DVD 등의 기타 고용량 광 매체로부 터 판독을 하거나 그에 기록을 하기 위한 것임)를 포함한다. 하드 디스크 드라이브, 자기 디스크 드라이 브 및 광 디스크 드라이브는 각각 하드 디스크 드라이브 인터페이스, 자기 디스크 드라이브 인터페이스 및 광 드라이브 인터페이스에 의해 시스템 버스에 연결될 수 있다. 외장형 드라 이브 구현을 위한 인터페이스는 예를 들어, USB(Universal Serial Bus) 및 IEEE 1394 인터페이스 기술 중 적어도 하나 또는 그 둘 다를 포함한다. 이들 드라이브 및 그와 연관된 컴퓨터 판독가능 매체는 데이터, 데이터 구조, 컴퓨터 실행가능 명령어, 기타 등 등의 비휘발성 저장을 제공한다. 컴퓨터의 경우, 드라이브 및 매체는 임의의 데이터를 적당한 디지털 형 식으로 저장하는 것에 대응한다. 상기에서의 컴퓨터 판독가능 저장 매체에 대한 설명이 HDD, 이동식 자기 디스 크, 및 CD 또는 DVD 등의 이동식 광 매체를 언급하고 있지만, 당업자라면 집 드라이브(zip drive), 자기 카세트, 플래쉬 메모리 카드, 카트리지, 기타 등등의 컴퓨터에 의해 판독가능한 다른 유형의 저장 매체도 역시 예시적인 운영 환경에서 사용될 수 있으며 또 임의의 이러한 매체가 본 발명의 방법들을 수행하기 위한 컴퓨터 실행가능 명령어를 포함할 수 있다는 것을 잘 알 것이다. 운영 체제, 하나 이상의 어플리케이션 프로그램, 기타 프로그램 모듈 및 프로그램 데이터 를 비롯한 다수의 프로그램 모듈이 드라이브 및 RAM에 저장될 수 있다. 운영 체제, 어플리케이션, 모듈 및/또는 데이터의 전부 또는 그 일부분이 또한 RAM에 캐싱될 수 있다. 본 발명이 여러가지 상업적으 로 이용가능한 운영 체제 또는 운영 체제들의 조합에서 구현될 수 있다는 것을 잘 알 것이다. 사용자는 하나 이상의 유선/무선 입력 장치, 예를 들어, 키보드 및 마우스 등의 포인팅 장치를 통 해 컴퓨터에 명령 및 정보를 입력할 수 있다. 기타 입력 장치(도시 생략)로는 마이크, IR 리모콘, 조이스 틱, 게임 패드, 스타일러스 펜, 터치 스크린, 기타 등등이 있을 수 있다. 이들 및 기타 입력 장치가 종종 시스 템 버스에 연결되어 있는 입력 장치 인터페이스를 통해 처리 장치에 연결되지만, 병렬 포트, IEEE 1394 직렬 포트, 게임 포트, USB 포트, IR 인터페이스, 기타 등등의 기타 인터페이스에 의해 연결될 수 있 다. 모니터 또는 다른 유형의 디스플레이 장치도 역시 비디오 어댑터 등의 인터페이스를 통해 시스템 버스에 연결된다. 모니터에 부가하여, 컴퓨터는 일반적으로 스피커, 프린터, 기타 등등의 기타 주 변 출력 장치(도시 생략)를 포함한다. 컴퓨터는 유선 및/또는 무선 통신을 통한 원격 컴퓨터(들) 등의 하나 이상의 원격 컴퓨터로의 논리 적 연결을 사용하여 네트워크화된 환경에서 동작할 수 있다. 원격 컴퓨터(들)는 워크스테이션, 서버 컴퓨 터, 라우터, 퍼스널 컴퓨터, 휴대용 컴퓨터, 마이크로프로세서-기반 오락 기기, 피어 장치 또는 기타 통상의 네 트워크 노드일 수 있으며, 일반적으로 컴퓨터에 대해 기술된 구성요소들 중 다수 또는 그 전부를 포함하 지만, 간략함을 위해, 메모리 저장 장치만이 도시되어 있다. 도시되어 있는 논리적 연결은 근거리 통신망 (LAN) 및/또는 더 큰 네트워크, 예를 들어, 원거리 통신망(WAN)에의 유선/무선 연결을 포함한다. 이러한 LAN 및 WAN 네트워킹 환경은 사무실 및 회사에서 일반적인 것이며, 인트라넷 등의 전사적 컴퓨터 네트워 크(enterprise-wide computer network)를 용이하게 해주며, 이들 모두는 전세계 컴퓨터 네트워크, 예를 들어, 인터넷에 연결될 수 있다. LAN 네트워킹 환경에서 사용될 때, 컴퓨터는 유선 및/또는 무선 통신 네트워크 인터페이스 또는 어댑터 를 통해 로컬 네트워크에 연결된다. 어댑터는 LAN에의 유선 또는 무선 통신을 용이하 게 해줄 수 있으며, 이 LAN은 또한 무선 어댑터와 통신하기 위해 그에 설치되어 있는 무선 액세스 포인트를 포함하고 있다. WAN 네트워킹 환경에서 사용될 때, 컴퓨터는 모뎀을 포함할 수 있거나, WAN 상의 통신 서버에 연결되거나, 또는 인터넷을 통하는 등, WAN을 통해 통신을 정하는 기타 수단 을 갖는다. 내장형 또는 외장형 및 유선 또는 무선 장치일 수 있는 모뎀은 직렬 포트 인터페이스를 통해 시스템 버스에 연결된다. 네트워크화된 환경에서, 컴퓨터에 대해 설명된 프로그램 모듈들 또는 그의 일부분이 원격 메모리/저장 장치에 저장될 수 있다. 도시된 네트워크 연결이 예시적인 것이며 컴 퓨터들 사이에 통신 링크를 설정하는 기타 수단이 사용될 수 있다는 것을 잘 알 것이다. 컴퓨터는 무선 통신으로 배치되어 동작하는 임의의 무선 장치 또는 개체, 예를 들어, 프린터, 스캐너, 데 스크톱 및/또는 휴대용 컴퓨터, PDA(portable data assistant), 통신 위성, 무선 검출가능 태그와 연관된 임의 의 장비 또는 장소, 및 전화와 통신을 하는 동작을 한다. 이것은 적어도 Wi-Fi 및 블루투스 무선 기술을 포함한 다. 따라서, 통신은 종래의 네트워크에서와 같이 미리 정의된 구조이거나 단순하게 적어도 2개의 장치 사이의 애드혹 통신(ad hoc communication)일 수 있다. 제시된 프로세스들에 있는 단계들의 특정한 순서 또는 계층 구조는 예시적인 접근들의 일례임을 이해하도록 한 다. 설계 우선순위들에 기반하여, 본 개시내용의 범위 내에서 프로세스들에 있는 단계들의 특정한 순서 또는 계 층 구조가 재배열될 수 있다는 것을 이해하도록 한다. 본 개시내용의 방법 청구항들은 샘플 순서로 다양한 단계 들의 엘리먼트들을 제공하지만 제시된 특정한 순서 또는 계층 구조에 한정되는 것을 의미하지는 않는다."}
{"patent_id": "10-2025-0010860", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시내용의 일 실시예에 따른 컴퓨팅 장치의 블록 구성도를 개략적으로 도시한다. 도 2는 본 개시내용의 일 실시예에 따른 실시예에 따른 인공지능 기반의 모델의 예시적인 구조를 도시한다. 도 3은 본 개시내용의 일 실시예에 따라 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하기 위한 방법을 예시적으로 도시한다. 도 4는 본 개시내용의 일 실시예에 따라 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하기 위한 방법을 예시적으로 도시한다.도 5는 본 개시내용의 일 실시예에 따라 인공지능 기반의 모델을 타겟 디바이스에서 구동 가능한 타겟 모델로 변경하기 위한 방법을 예시적으로 도시한다. 도 6은 본 개시내용의 일 실시예에 따른 컴퓨팅 환경의 개략도이다."}
