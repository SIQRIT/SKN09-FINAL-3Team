{"patent_id": "10-2021-0034835", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0125114", "출원번호": "10-2021-0034835", "발명의 명칭": "인코딩 방법 및 장치", "출원인": "삼성전자주식회사", "발명자": "최영재"}}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "16비트 하프 부동 소수점(half floating point)으로 표현된 입력 데이터를 수신하는 단계;상기 입력 데이터를 4비트(bit) 단위로 분리할 수 있도록, 상기 입력 데이터의 지수부(exponent) 및 가수부(mantissa)의 비트 수를 조정하는 단계; 및상기 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 입력 데이터를 인코딩하는 단계를 포함하는 인코딩 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 비트 수를 조정하는 단계는상기 지수부에 4비트를 할당하는 단계; 및상기 가수부에 11비트를 할당하는 단계를 포함하는, 인코딩 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 인코딩하는 단계는상기 입력 데이터의 지수부에 4를 더한 값을 4로 나눈 몫과 나머지를 계산하는 단계;상기 몫에 기초하여, 상기 지수부를 인코딩하는 단계; 및상기 나머지에 기초하여, 상기 가수부를 인코딩하는 단계를 포함하는 인코딩 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 지수부를 인코딩하는 단계는상기 몫 및 바이어스(bias)에 기초하여, 상기 지수부를 인코딩하는 단계를 포함하는, 인코딩 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제3항에 있어서,상기 가수부를 인코딩하는 단계는공개특허 10-2022-0125114-3-상기 나머지가 0인 경우, 상기 가수부의 제1 비트 값을 1로 결정하는 단계를 포함하는, 인코딩 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제3항에 있어서,상기 가수부를 인코딩하는 단계는상기 나머지가 1인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값을 1로 결정하는 단계를 포함하는, 인코딩 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제3항에 있어서,상기 가수부를 인코딩하는 단계는상기 나머지가 2인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값을 0으로, 상기 가수부의 제3 비트 값을 1로 결정하는 단계를 포함하는, 인코딩 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제3항에 있어서,상기 가수부를 인코딩하는 단계는상기 나머지가 3인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값을 0으로, 상기 가수부의 제3 비트 값을 0으로, 제4 비트 값을 1로 결정하는 단계를 포함하는, 인코딩 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "4비트 고정 소수점(fixed point)으로 표현된 제1 오퍼랜드(operand) 데이터를 수신하는 단계;16비트 크기의 제2 오퍼랜드 데이터를 수신하는 단계;상기 제2 오퍼랜드 데이터의 데이터 타입을 판단하는 단계;상기 제2 오퍼랜드 데이터가 부동 소수점 타입인 경우, 상기 제2 오퍼랜드 데이터를 인코딩하는 단계;상기 인코딩된 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭(brick)으로 분리하는 단계; 및상기 4개의 브릭으로 분리된 제2 오퍼랜드 데이터와 상기 제1 오퍼랜드 데이터 사이의 MAC 연산을 수행하는 단계를 포함하는, 연산 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,공개특허 10-2022-0125114-4-상기 인코딩하는 단계는상기 제2 오퍼랜드 데이터를 4비트(bit) 단위로 분리할 수 있도록, 상기 제2 오퍼랜드 데이터의 지수부 및 가수부의 비트 수를 조정하는 단계; 및상기 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 제2 오퍼랜드 데이터를 인코딩하는 단계를 포함하는, 연산 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서,상기 분리하는 단계는상기 인코딩된 제2 오퍼랜드 데이터를 하나의 지수부 브릭 데이터과 3개의 가수부 브릭 데이터로 분리하는 단계를 포함하는, 연산 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 MAC 연산을 수행하는 단계는상기 3개의 가수부 브릭 데이터 각각과 상기 제1 오퍼랜드 데이터 사이의 곱셈 연산을 수행하는 단계;지수부 레지스터에 저장된 누산 지수부 데이터와 상기 지수부 브릭 데이터를 비교하는 단계; 및상기 비교 결과에 기초하여, 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터에 상기 곱셈 연산 수행결과를 누산하는 단계를 포함하는, 연산 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,상기 누산하는 단계는상기 비교 결과에 기초하여, 상기 3개의 가수부 레지스터 각각에 저장된 상기 누산 가수부 데이터와 상기 곱셈연산 수행 결과의 누산 위치(position)를 정렬하는 단계를 포함하는, 연산 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제9항에 있어서,상기 제2 오퍼랜드 데이터가 고정 수수점 타입인 경우, 병렬 데이터 연산을 위해 상기 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭으로 분리하는 단계를 더 포함하는, 연산 방법."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제1항 내지 제14항 중 어느 한 항의 방법을 수행하기 위한 명령어들을 포함하는 하나 이상의 프로그램을 저장한공개특허 10-2022-0125114-5-컴퓨터 판독 가능 저장매체."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "16비트 부동 소수점(floating point)으로 표현된 입력 데이터를 수신하고, 상기 입력 데이터를 4비트(bit) 단위로 분리할 수 있도록, 상기 입력 데이터의 지수부(exponent) 및 가수부(mantissa)의 비트 수를 조정하고, 상기지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 입력 데이터를 인코딩하는 프로세서를 포함하는 인코딩 장치."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서,상기 프로세서는상기 지수부에 4비트를 할당하고, 상기 가수부에 11비트를 할당하는, 인코딩 장치."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제16항에 있어서,상기 프로세서는상기 입력 데이터의 지수부에 4를 더한 값을 4로 나눈 몫과 나머지를 계산하고, 상기 몫에 기초하여 상기 지수부를 인코딩하고, 상기 나머지에 기초하여, 상기 가수부를 인코딩하는, 인코딩 장치."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "4비트 고정 소수점(fixed point)으로 표현된 제1 오퍼랜드(operand) 데이터를 수신하고, 16비트 크기의 제2 오퍼랜드 데이터를 수신하고, 상기 제2 오퍼랜드 데이터의 데이터 타입을 판단하고, 상기 제2 오퍼랜드 데이터가부동 소수점 타입인 경우, 상기 제2 오퍼랜드 데이터를 인코딩하고, 상기 인코딩된 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭(brick)으로 분리하고, 상기 4개의 브릭으로 분리된 제2 오퍼랜드 데이터와 상기 제1 오퍼랜드 데이터 사이의 MAC 연산을 수행하는 프로세서를 포함하는 연산 장치."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19항에 있어서,상기 프로세서는상기 제2 오퍼랜드 데이터를 4비트(bit) 단위로 분리할 수 있도록 상기 제2 오퍼랜드 데이터의 지수부 및 가수부의 비트 수를 조정하고, 상기 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 제2 오퍼랜드 데이터를 인코딩하는, 인코딩 장치."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제19항에 있어서,상기 프로세서는공개특허 10-2022-0125114-6-상기 인코딩된 제2 오퍼랜드 데이터를 하나의 지수부 브릭 데이터과 3개의 가수부 브릭 데이터로 분리하는, 인코딩 장치."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제21항에 있어서,상기 프로세서는상기 3개의 가수부 브릭 데이터 각각과 상기 제1 오퍼랜드 데이터 사이의 곱셈 연산을 수행하고, 지수부 레지스터에 저장된 누산 지수부 데이터와 상기 지수부 브릭 데이터를 비교하고, 상기 비교 결과에 기초하여, 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터에 상기 곱셈 연산 수행 결과를 누산하는, 인코딩 장치."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제22항에 있어서,상기 프로세서는상기 비교 결과에 기초하여, 상기 3개의 가수부 레지스터 각각에 저장된 상기 누산 가수부 데이터와 상기 곱셈연산 수행 결과의 누산 위치(position)를 정렬하는, 인코딩 장치."}
{"patent_id": "10-2021-0034835", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제19항에 있어서,상기 프로세서는상기 제2 오퍼랜드 데이터가 고정 수수점 타입인 경우, 병렬 데이터 연산을 위해 상기 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭으로 분리하는, 인코딩 장치."}
{"patent_id": "10-2021-0034835", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "인코딩 방법 및 장치가 개시된다. 일 실시예에 다른 인코딩 방법은 16비트 부동 소수점으로 표현된 입력 데이터 를 수신하는 단계 입력 데이터를 4비트 단위로 분리할 수 있도록, 입력 데이터의 지수부 및 가수부의 비트 수를 조정하는 단계 및 지수부가 4의 배수로 될 수 있도록 비트 수가 조정된 입력 데이터를 인코딩하는 단계를 포함한 다."}
{"patent_id": "10-2021-0034835", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래 실시예들은 인코딩 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2021-0034835", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공신경망(Artificial Neural Network)은 컴퓨터 과학적 아키텍쳐(computational architecture)를 참조하여 구현된다. 최근 인공신경망 기술이 발전함에 따라, 다양한 종류의 전자 시스템에서 인공신경망을 활용하여 입 력 데이터를 분석하고 유효한 정보를 추출하는 연구가 활발히 진행되고 있다. 인공신경망을 처리하는 장치는 복잡한 입력 데이터에 대한 많은 양의 연산을 필요로 한다. 따라서, 인공신경망을 이용하여 대량의 입력 데이 터를 실시간으로 분석하여, 원하는 정보를 추출하기 위해서는 인공신경망에 관한 연산을 효율적으로 처리할 수 있는 기술이 요구된다."}
{"patent_id": "10-2021-0034835", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 인코딩 방법은 16비트 하프 부동 소수점(half floating point)으로 표현된 입력 데이터를 수 신하는 단계; 상기 입력 데이터를 4비트(bit) 단위로 분리할 수 있도록, 상기 입력 데이터의 지수부(exponent) 및 가수부(mantissa)의 비트 수를 조정하는 단계; 및 상기 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 입력 데이터를 인코딩하는 단계를 포함한다. 상기 비트 수를 조정하는 단계는 상기 지수부에 4비트를 할당하는 단계; 및 상기 가수부에 11비트를 할당하는 단계를 포함할 수 있다. 상기 인코딩하는 단계는 상기 입력 데이터의 지수부에 4를 더한 값을 4로 나눈 몫과 나머지를 계산하는 단계; 상기 몫에 기초하여, 상기 지수부를 인코딩하는 단계; 및 상기 나머지에 기초하여, 상기 가수부를 인코딩하는 단계를 포함할 수 있다. 상기 지수부를 인코딩하는 단계는 상기 몫 및 바이어스(bias)에 기초하여, 상기 지수부를 인코딩하는 단계를 포 함할 수 있다. 상기 가수부를 인코딩하는 단계는 상기 나머지가 0인 경우, 상기 가수부의 제1 비트 값을 1로 결정하는 단계를 포함할 수 있다. 상기 가수부를 인코딩하는 단계는 상기 나머지가 1인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값을 1로 결정할 수 있다. 상기 가수부를 인코딩하는 단계는 상기 나머지가 2인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값을 0으로, 상기 가수부의 제3 비트 값을 1로 결정하는 단계를 포함할 수 있다. 상기 가수부를 인코딩하는 단계는 상기 나머지가 3인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값을 0으로, 상기 가수부의 제3 비트 값을 0으로, 제4 비트 값을 1로 결정하는 단계를 포함할 수 있다. 일 실시예에 따른 연산 방법은 4비트 고정 소수점(fixed point)으로 표현된 제1 오퍼랜드(operand) 데이터를 수 신하는 단계; 16비트 크기의 제2 오퍼랜드 데이터를 수신하는 단계; 상기 제2 오퍼랜드 데이터의 데이터 타입을 판단하는 단계; 상기 제2 오퍼랜드 데이터가 부동 소수점 타입인 경우, 상기 제2 오퍼랜드 데이터를 인코딩하는 단계; 상기 인코딩된 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭(brick)으로 분리하는 단계; 및 상기 4개 의 브릭으로 분리된 제2 오퍼랜드 데이터와 상기 제1 오퍼랜드 데이터 사이의 MAC 연산을 수행하는 단계를 포함 할 수 있다. 상기 인코딩하는 단계는 상기 제2 오퍼랜드 데이터를 4비트(bit) 단위로 분리할 수 있도록, 상기 제2 오퍼랜드 데이터의 지수부 및 가수부의 비트 수를 조정하는 단계; 및 상기 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 제2 오퍼랜드 데이터를 인코딩하는 단계를 포함할 수 있다. 상기 분리하는 단계는 상기 인코딩된 제2 오퍼랜드 데이터를 하나의 지수부 브릭 데이터과 3개의 가수부 브릭 데이터로 분리하는 단계를 포함할 수 있다. 상기 MAC 연산을 수행하는 단계는 상기 3개의 가수부 브릭 데이터 각각과 상기 제1 오퍼랜드 데이터 사이의 곱 셈 연산을 수행하는 단계; 지수부 레지스터에 저장된 누산 지수부 데이터와 상기 지수부 브릭 데이터를 비교하 는 단계; 및 상기 비교 결과에 기초하여, 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터에 상기 곱 셈 연산 수행 결과를 누산하는 단계를 포함할 수 있다. 상기 누산하는 단계는 상기 비교 결과에 기초하여, 상기 3개의 가수부 레지스터 각각에 저장된 상기 누산 가수 부 데이터와 상기 곱셈 연산 수행 결과의 누산 위치(position)를 정렬하는 단계를 포함할 수 있다. 일 실시예에 따른 연산 방법은 상기 제2 오퍼랜드 데이터가 고정 수수점 타입인 경우, 병렬 데이터 연산을 위해 상기 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭으로 분리하는 단계를 더 포함할 수 있다. 일 실시예에 따른 인코딩 장치는 16비트 부동 소수점(floating point)으로 표현된 입력 데이터를 수신하고, 상 기 입력 데이터를 4비트(bit) 단위로 분리할 수 있도록, 상기 입력 데이터의 지수부(exponent) 및 가수부 (mantissa)의 비트 수를 조정하고, 상기 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 입력 데이터 를 인코딩하는 프로세서를 포함할 수 있다. 상기 프로세서는 상기 지수부에 4비트를 할당하고, 상기 가수부에 11비트를 할당할 수 있다. 상기 프로세서는 상기 입력 데이터의 지수부에 4를 더한 값을 4로 나눈 몫과 나머지를 계산하고, 상기 몫에 기 초하여 상기 지수부를 인코딩하고, 상기 나머지에 기초하여, 상기 가수부를 인코딩할 수 있다. 일 실시예에 따른 연산 장치는 4비트 고정 소수점(fixed point)으로 표현된 제1 오퍼랜드(operand) 데이터를 수 신하고, 16비트 크기의 제2 오퍼랜드 데이터를 수신하고, 상기 제2 오퍼랜드 데이터의 데이터 타입을 판단하고, 상기 제2 오퍼랜드 데이터가 부동 소수점 타입인 경우, 상기 제2 오퍼랜드 데이터를 인코딩하고, 상기 인코딩된 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭(brick)으로 분리하고, 상기 4개의 브릭으로 분리된 제2 오퍼랜 드 데이터와 상기 제1 오퍼랜드 데이터 사이의 MAC 연산을 수행하는 프로세서를 포함할 수 있다. 상기 프로세서는 상기 제2 오퍼랜드 데이터를 4비트(bit) 단위로 분리할 수 있도록 상기 제2 오퍼랜드 데이터의 지수부 및 가수부의 비트 수를 조정하고, 상기 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 제2 오퍼랜드 데이터를 인코딩할 수 있다. 상기 프로세서는 상기 인코딩된 제2 오퍼랜드 데이터를 하나의 지수부 브릭 데이터과 3개의 가수부 브릭 데이터 로 분리할 수 있다. 상기 프로세서는 상기 3개의 가수부 브릭 데이터 각각과 상기 제1 오퍼랜드 데이터 사이의 곱셈 연산을 수행하 고, 지수부 레지스터에 저장된 누산 지수부 데이터와 상기 지수부 브릭 데이터를 비교하고, 상기 비교 결과에 기초하여, 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터에 상기 곱셈 연산 수행 결과를 누산할 수 있다. 상기 프로세서는 상기 비교 결과에 기초하여, 상기 3개의 가수부 레지스터 각각에 저장된 상기 누산 가수부 데 이터와 상기 곱셈 연산 수행 결과의 누산 위치(position)를 정렬할 수 있다. 상기 프로세서는 상기 제2 오퍼랜드 데이터가 고정 수수점 타입인 경우, 병렬 데이터 연산을 위해 상기 제2 오 퍼랜드 데이터를 4비트 단위의 4개의 브릭으로 분리할 수 있다."}
{"patent_id": "10-2021-0034835", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에서 개시되어 있는 특정한 구조적 또는 기능적 내용들은 단지 기술적 개념에 따른 실시예들을 설명하 기 위한 목적으로 예시된 것으로서, 다양한 다른 형태로 실시될 수 있으며 설명된 구조 또는 기능에 한정되지 않는다. 제1 또는 제2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 이해되어야 한다. 예를 들어 제1 구성요소는 제2 구성요소로 명명 될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있 다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 구성요소들 간의 관계를 설명하는 표현들, 예를 들어 \"~간의에\"와 \"바로~간의에\" 또는 \"~에 이웃하는\"과 \"~에 직접 이웃하는\" 등 도 마찬가지로 해석되어야 한다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 설시된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함 을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되 는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로 해석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 실시예들은 데이터 센터, 서버, 퍼스널 컴퓨터, 랩톱 컴퓨터, 태블릿 컴퓨터, 스마트 폰, 텔레비전, 스마트 가 전 기기, 지능형 자동차, 키오스크, 웨어러블 장치 등 다양한 형태의 제품으로 구현될 수 있다. 이하, 실시예 들을 첨부된 도면을 참조하여 상세하게 설명한다. 각 도면에 제시된 동일한 참조 부호는 동일한 부재를 나타낸 다. 도 1a는 인공신경망(Artificial Neural Network)를 이용한 딥러닝 연산 방법을 설명하기 위한 도면이다. 딥러닝(Deep Learning) 등을 포함하는 인공지능(AI) 알고리즘은 인공신경망(Artificial Neural Network, ANN) 에 입력 데이터를 입력시키고, 컨볼루션 등의 연산을 통해 출력 데이터를 학습하는 것을 특징으로 한다. 인공신경망은 생물학적 뇌를 모델링한 컴퓨터 과학적 아키텍쳐(Computational Architecture)를 의미할 수 있다. 인공신경망 내에서, 뇌의 뉴런들에 해당되는 노드들은 서로 연결되어 있고, 입력 데이터를 처리하기 위하여 집합적으로 동작한다. 다양한 종류의 뉴럴 네트워크들을 예로 들면, 컨볼루션 뉴럴 네트워크 (Convolutional Neural Network, CNN), 회귀 뉴럴 네트워크(Recurrent Neural Network, RNN), 딥 빌리프 네트 워크(Deep Belief Network, DBN), 제한된 볼츠만 기계(Restricted Boltzman Machine, RBM) 방식 등이 있으나, 이에 제한되지 않는다. 피드-포워드(feed-forward) 뉴럴 네트워크에서, 뉴럴 네트워크의 뉴런들은 다른 뉴런들 과의 연결들(links)을 갖는다. 이와 같은 연결들은 뉴럴 네트워크를 통해, 한 방향으로, 예를 들어 순방향 (forward direction)으로 확장될 수 있다. 도 1a를 참조하면, 인공신경망에 입력 데이터가 입력되고, 하나 이상의 레이어(layer)를 포함하는 인공 신 경망(예를 들어, 컨볼루션 뉴럴 네트워크(Convolution Neural Network, CNN))를 통해 출력 데이터가 출력되는 구조가 도시된다. 인공신경망은 2개 이상의 레이어를 보유한 딥 뉴럴 네트워크(deep neural networ k)일 수 있다. 컨볼루션 뉴럴 네트워크는 입력 데이터로부터 테두리, 선 색 등과 같은 \"특징들(features)\"을 추출하기 위해 이용될 수 있다. 컨볼루션 뉴럴 네트워크는 복수의 레이어를 포함할 수 있다. 각각의 레이어는 데이 터를 수신할 수 있고, 해당 레이어에 입력되는 데이터를 처리하여 해당 레이어에서 출력되는 데이터를 생성할 수 있다. 레이어에서 출력되는 데이터는, 컨볼루션 뉴럴 네트워크에 입력된 이미지 또는 입력된 특징맵 (feature map)을 하나 이상의 필터(filter)의 웨이트(weight) 값과 컨볼루션 연산하여 생성한 특징맵일 수 있다. 컨볼루션 뉴럴 네트워크의 초기 레이어들은 입력으로부터 에지들 또는 그레디언트들과 같은 낮은 레 벨의 특징들을 추출하도록 동작될 수 있다. 컨볼루션 뉴럴 네트워크의 다음 레이어들은 이미지 내의 눈, 코 등과 같은 점진적으로 더 복잡한 특징들을 추출할 수 있다. 도 1b는 딥러닝 연산에서 입력으로 제공되는 입력 특징맵의 데이터와 필터를 설명하기 위한 도면이다. 도 1b를 참조하면, 입력 특징맵은 인공신경망에 입력되는 이미지의 픽셀 값 또는 수치 데이터의 집합일 수 있으나, 이에 제한되지 않는다. 도 1b에서 입력 특징맵은 인공신경망을 통해 학습할 대상이 되는 이미지 의 픽셀 값으로 정의될 수 있다. 예를 들어, 입력 특징맵은 256×256의 픽셀과 K의 깊이(depth)를 가질 수 있다. 그러나, 상기 값은 예시적인 것이고, 입력 특징맵의 픽셀 크기가 상기 예시로 한정되는 것은 아 니다. 필터(110-1 내지 110-n)은 N개로 형성될 수 있다. 복수의 필터(110-1 내지 110-n) 각각은 n by n(n×n)의 웨 이트(weight) 값을 포함할 수 있다. 예를 들어, 복수의 필터(110-1 내지 110-n) 각각은 3×3의 픽셀과 K의 깊 이값을 가질 수 있다. 그러나, 상기 필터의 크기는 예시적인 것이고, 복수의 필터(110-1 내지 110-n) 각각의 크기가 상기 예시로 한정되는 것은 아니다. 도 1c는 딥러닝 기반에서 컨볼루션 연산을 수행하는 과정을 설명하기 위한 도면이다. 도 1c를 참조하면, 인공신경망에서 컨볼루션 연산을 수행하는 과정은, 각각의 레이어에서 입력 특징맵과 필터와의 곱셈 및 덧셈 연산을 하여 출력 값을 생성하고, 출력 값을 누적하여 합산함으로써, 출력 특징맵 을 생성하는 과정을 의미할 수 있다. 컨볼루션 연산 수행 과정은, 현재 레이어에서 입력 특징맵의 좌측 상단으로부터 우측 하단까지 일정한 크 기, 즉 n×n 크기의 필터를 적용하여 곱셈 및 덧셈 연산을 수행하는 과정이다. 이하에서는, 필터의 크기가 3×3인 경우에 컨볼루션 연산을 수행하는 과정을 설명하기로 한다. 예를 들어, 먼저 입력 특징맵의 좌측 상단 제1 영역에서 3×3, 즉 제1 방향으로 3개의 데이터와 제2 방향으로 3개의 데이터를 포함한 총 9개의 데이터(x11 내지 x33)를 각각 필터의 웨이트 값(weight)(w11 내 지 w33)과 곱하는 연산을 수행한다. 이후, 곱셈 연산의 출력 값, 즉 x11*w11, x12*w12, x13*w13, x21*w21, x22*w22, x23*w23, x31*w31, x32*w32, x33*w33을 모두 누적하여 합산하면 출력 특징맵의 제1-1 출력 데이 터(y11)가 생성된다. 이후, 입력 특징맵의 좌측 상단의 제1 영역에서 제2 영역으로 데이터의 단위만큼 이동하면서 연 산한다. 이 때, 컨볼루션 연산 과정에서 입력 특징맵 내의 데이터가 이동하는 개수를 스트라이드(strid e)라고 하며, 스트라이드의 크기에 따라 생성되는 출력 특징맵의 크기가 결정될 수 있다. 예를 들어, 스 트라이드가 1인 경우, 제2 영역에 포함된 총 9개의 입력 데이터(x12 내지 x34)를 필터의 웨이트 값 (w11 내지 w33)과 곱하는 연산을 수행하고, 곱셈 연산의 출력 값인 x12*w11, x13*w12, x14*w13, x22*w21, x23*w22, x24*w23, x32*w31, x33*w32, x34*w33을 모두 누적하여 합산하면 출력 특징맵의 제1-2 출력 데이 터(y12)가 생성된다. 도 1d는 시스톨릭 어레이(systolic array)을 이용하여 컨볼루션 연산을 수행하는 방법을 설명하기 위한 도면이 다. 도 1d를 참조하면, 입력 특징맵의 각 데이터는 일정한 레이턴시(latency)를 갖는 클럭(clock)에 따라 순차 적으로 프로세싱 엘리먼트들(Processing Elements; PEs)(141 내지 149)에 입력되는 시스톨릭 어레이로 매핑 (mapping)될 수 있다. 프로세싱 엘리먼트는 곱셈 덧셈 연산기일 수 있다. 제1 클럭에는 시스톨릭 어레이의 제1 행(①)의 제1-1 데이터(x11)가 제1 프로세싱 엘리먼트에 입력될 수 있다. 도 1d에는 도시되지 않았지만, 제1-1 데이터(x11)는 제1 클럭에서 w11의 웨이트 값과 곱해질 수 있다. 이후 제2 클럭에서는 제1-1 데이터(x11)는 제2 프로세싱 엘리먼트에 입력되고, 제2-1 데이터(x21)는 제1 프로세싱 엘리먼트에 입력되며, 제1-2 데이터(x12)는 제4 프로세싱 엘리먼트에 입력될 수 있다. 마 찬가지로, 제3 클럭에서 제1-1 데이터(x11)는 제3 프로세싱 엘리먼트에 입력되고, 제2-1 데이터(x21)는 제 2 프로세싱 엘리먼트에 입력되며, 제1-2 데이터(x12)는 제5 프로세싱 엘리먼트에 입력 될 수 있다. 제3 클럭에서 제3-1 데이터(x31)는 제1 프로세싱 엘리먼트에 입력되고, 제2-2 데이터(x22)는 제4 프로세싱 엘리먼트에 입력되며, 제1-3 데이터(x13)는 제7 프로세싱 엘리먼트에 입력될 수 있다. 전술한 바와 같이, 입력 특징맵은 순차적인 클럭에 따라 프로세싱 엘리먼트(141 내지 149) 내의 각 프로세 싱 엘리먼트에 입력되고, 각 클럭에 따라 입력된 웨이트 값과 곱셈 및 덧셈 연산이 수행될 수 있다. 순차적으 로 입력된 입력 특징맵의 각 데이터와 웨이트 값의 곱셈 및 덧셈 연산을 통해 출력된 값들을 누적 합산함 에 따라 출력 특징맵이 생성될 수 있다. 도 2는 일 실시예에 따른 인코딩 방법을 설명하기 위한 순서도이다. 도 2의 동작은 도시된 순서 및 방식으로 수행될 수 있지만, 도시된 실시예의 사상 및 범위를 벗어나지 않으면서 일부 동작의 순서가 변경되거나 일부 동작이 생략될 수 있다. 도 2에 도시된 다수의 동작은 병렬로 또는 동시 에 수행될 수 있다. 도 2의 하나 이상의 블록들 및 블록들의 조합은 특정 기능을 수행하는 특수 목적 하드웨어 기반 컴퓨터, 또는 특수 목적 하드웨어 및 컴퓨터 명령들의 조합에 의해 구현될 수 있다. 일 실시예에 따른 뉴럴 네트워크를 이용한 연산은 응용 어플리케이션의 종류에 따라 필요한 연산 포맷이 상이할 수 있다. 예를 들어, 이미지의 객체 종류를 판단하는 어플리케이션의 경우, 8bit 보다 낮은 비트 프리시전만으로도 충분할 수 있고, 음성과 관련된 어플리케이션의 경우 8bit 보다 높은 비트 프리시전이 요구될 수 있다. 일 실시예에 따른 딥러닝의 필수 연산자인 MAC(multiply-and-accumulate) 연산의 입력 오퍼랜드(input operand) 또한 상황에 따라 다양한 프리시전(precision)으로 구성될 수 있다. 예를 들어, 뉴럴 네트워크의 학 습에 필요한 입력 오퍼랜드 중 하나인 그래디언트(gradient)는 16비트 하프 부동 소수점(half floating point) 정도의 프리시전을 요구하며, 다른 입력 오퍼랜드들인 입력 특징맵과 웨이트는 낮은 프리시전의 고정 소수점으 로도 처리가 가능할 수 있다. 이렇게 다양한 요구(requirement)를 가지는 데이터를 처리하기 위한 기본적인 방법은, 불필요하게 많은 하드웨 어 리소스를 써서 각 입력 타입(input type)에 대한 MAC 연산을 수행할 수 있는 하드웨어 구성 요소(componen t)들을 만들어 쓰는 것이다. 단일 하드웨어를 이용해 다양한 입력 타입에 대해 MAC 연산을 수행하기 위해서는, 가장 복잡도가 높은 데이터 타입을 기준으로 하드웨어 연산 유닛들을 설계해야 한다. 그러나, 이 경우에는 낮은 로우 프리시전(low- precision) 연산이 들어올 경우에도 복잡도가 가장 높은 하이 프리시전(high-precision) 데이터를 기준으로 만 들어진 연산자를 통해서 실행할 수 밖에 없어 비효율적이게 된다. 보다 구체적으로, 하드웨어 구현 영역 (hardware implementation area)이 불필요하게 증가하고, 하드웨어가 소모하는 전력 또한 불필요하게 증가할 수 있다. 일 실시예에 따른 인코딩 방법 및 연산 방법에 따르면, 학습 과정의 그래디언트 연산을 고정밀도로 유지함과 동 시에 저정밀도의 추론 과정을 효율적으로 구동시킬 수 있다. 단계에서, 일 실시예에 따른 인코딩 장치는 16비트 부동 소수점(floating point)으로 표현된 입력 데이터 를 수신한다. 단계에서, 일 실시예에 따른 인코딩 장치는 입력 데이터를 4비트(bit) 단위로 분리할 수 있도록, 상기 입 력 데이터의 지수부(exponent) 및 가수부(mantissa)의 비트 수를 조정한다. 일 실시예에 따른 인코딩 장치는 기존 16비트 하프 부동 소수점(half floating point)의 비트 분포인 {sign, exponent, mantissa}={1,5,10}을 4 비트 단위로 분리할 수 있도록 {sign, exponent, mantissa}={1,4,11}의 형태로 구성 비트 수를 조정할 수 있다. 이에 따라 지수부에 할당된 비트는 하나 줄어들고, 그만큼 가수부 비트가 11비트로 하나 더 늘어나게 된 다. 단계에서, 일 실시예에 따른 인코딩 장치는 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 입 력 데이터를 인코딩한다. 일 실시예에 따른 인코딩 장치는 기존 16비트 하프 부동 소수점보다 지수부 범위 (exponent range)를 더 넓게 확보함과 동시에 비트-브릭(bit-brick)의 연산에 용이하도록 지수부를 4만큼의 스 텝(step)으로 인코딩할 수 있다. 아래에서, 인코딩하는 구체적인 방법은 도 3을 참조하여 설명된다. 도 3은 일 실시예에 따른 인코딩 방법을 설명하기 위한 도면이다. 일 실시예에 따른 인코딩 방법을 설명하기에 앞서, 데이터를 부동 소수점으로 표현하는 방법을 선행적으로 설명 한다. 예를 들어, 10진법으로 표현된 263.3을 2진법으로 표현하면 100000111.0100110쪋이고, 이를 1.0000011101*28으로 표현할 수 있다. 나아가, 이를 부동 소수점으로 표현하면 부호부의 비트(1bit)는 0(양 수), 지수부의 비트(5bit)는 11000(8+16(bias))이고, 가수부 비트는 0000011101(10bit)로, 최종적으로 0110000000011101로 표현할 수 있다. 도 3을 참조하면, 일 실시예에 따른 인코딩 장치는 {sign, exponent, mantissa}={1,4,11}의 형태로 구성 비트 수를 조정할 수 있다. 예를 들어, 위 예시의 1.0000011101*28를 0.10000011101*29로 조정하여, 부호부에는 1비 트, 지수부에는 4비트, 가수부에는 11비트를 할당할 수 있다. 일 실시예에 따른 인코딩 장치는 지수부가 4의 배수로 될 수 있도록 상기 비트 수가 조정된 입력 데이터를 인코 딩할 수 있다. 보다 구체적으로, 인코딩 장치는 입력 데이터의 지수부에 4를 더한 값을 4로 나눈 몫과 나머지 를 계산하고, 몫에 기초하여 지수부를 인코딩하고, 나머지에 기초하여 가수부를 인코딩할 수 있다. 일 실시예에 따른 인코딩 장치는 몫 및 바이어스(bias)에 기초하여, 상기 지수부를 인코딩할 수 있다. 일 실시예에 따른 인코딩 장치는 나머지가 0인 경우, 상기 가수부의 제1 비트 값을 1로 결정할 수 있고, 나머지 가 1인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값을 1로 결정할 수 있고, 나머지가 2인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값을 0으로, 상기 가수부의 제3 비트값을 1로 결정할 수 있고, 나머지가 3인 경우, 상기 가수부의 제1 비트 값을 0으로, 상기 가수부의 제2 비트 값 을 0으로, 상기 가수부의 제3 비트 값을 1로 결정할 수 있다. 이를 표로 표현하면 표 1과 같다. 표 1"}
{"patent_id": "10-2021-0034835", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "예를 들어, 인코딩 장치는 0.10000011101*29를 0.10000011101*24*3-3로 변환할 수 있고, 이를 다시 0.00010000011101*24*3로 변환할 수 있다. 이에 기초하여, 인코딩 장치는 지수부의 비트(4bit)는 1011(3+8(bias))으로, 부호부의 비트(1bit)는 0(양수)으로, 가수부 비트는 00010000011으로 인코딩할 수 있다. 일 실시예에 따른 인코딩 장치는 인코딩된 데이터를 하나의 지수부 브릭 데이터과 3개의 가수부 브릭 데이터로 분리하여 표현할 수 있다. 3개의 가수부 브릭 데이터는 탑(top) 브릭 데이터, 미들(middle) 브릭 데이터, 바텀 (bottom) 브릭 데이터로 분리할 수 있고, 탑 브릭은 1개의 부호부 비트와 3개의 가수부 비트로 구성될 수 있다. 위 예시에서, 지수 브릭 데이터는 1011이고, 탑 브릭 데이터는 0000, 미들 브릭 데이터는 1000, 바텀 브릭 데이 터는 0011일 수 있다. 일 실시예에 따른 4 비트의 지수부 브릭 데이터와 4비트의 탑/미들/바텀 브릭 데이터들은 하드웨어 적으로 분리 가 용이할 수 있다. 더불어, 부동 소수점 덧셈 연산에서 항상 고려하는 지수부 차이(exponent difference)가 항상 4의 배수 단위로 차이가 나기 때문에 곱해진 값들을 특별한 시프팅(shifting) 없이 고정 소수점 덧셈기 (fixed-point adder)들로 퓨징(fusing)할 수 있는 구조가 가능해질 수 있다. 도 4는 일 실시예에 따른 연산 방법을 설명하기 위한 도면이다. 도 4를 참조하면, 일 실시예에 따른 연산 장치는 4비트 고정 소수점(fixed point)으로 표현된 제1 오퍼랜드 (operand) 데이터와 16비트 크기의 제2 오퍼랜드 데이터를 수신할 수 있다. 일 실시예에 따른 연산 장치는 도 2 내지 도 3을 참조하여 전술한 인코딩 장치를 포함할 수 있다. 제1 오퍼랜드 데이터는 웨이트 및/ 또는 입력 특징맵일 수 있고, 제2 오퍼랜드 데이터는 그래디언트일 수 있다. 일 실시예에 따른 연산 장치는 단계에서, 제2 오퍼랜드 데이터의 데이터 타입을 판단할 수 있다. 일 실시예에 따른 연산 장치는 단계(440-1)에서, 제2 오퍼랜드 데이터가 고정 소수점 타입인 경우, 병렬 데이터 연산을 위해 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭으로 분리할 수 있다. 일 실시예에 따른 연산 장치는 단계(440-2)에서, 제2 오퍼랜드 데이터가 부동 소수점 타입인 경우, 제2 오 퍼랜드 데이터를 도 2 내지 도 3을 참조하여 전술한 방법에 따라 인코딩할 수 있다. 예를 들어, 연산 장 치는 제2 오퍼랜드 데이터를 4비트(bit) 단위로 분리할 수 있도록, 제2 오퍼랜드 데이터의 지수부 및 가수 부의 비트 수를 조정할 수 있고, 지수부가 4의 배수로 될 수 있도록 비트 수가 조정된 제2 오퍼랜드 데이터를 인코딩할 수 있다. 일 실시예에 따른 연산 장치는 단계에서, 인코딩된 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭 (brick)으로 분리할 수 있다. 보다 구체적으로, 연산 장치는 인코딩된 제2 오퍼랜드 데이터를 하나의 지수부 브릭 데이터과 3개의 가수부 브릭 데이터로 분리할 수 있다. 일 실시예에 따른 연산 장치는 단계에서, 4개의 브릭으로 분리된 제2 오퍼랜드 데이터와 제1 오퍼랜드 데 이터 사이의 MAC 연산을 수행할 수 있다. 연산 장치는 3개의 가수부 브릭 데이터 각각과 제1 오퍼랜드 데 이터 사이의 곱셈 연산을 수행할 수 있다. 4개의 브릭으로 분리된 제2 오퍼랜드 데이터와 제1 오퍼랜드 데이터 사이의 MAC 연산을 수행하는 구체적은 방법은 아래에서 도 5를 참조하여 설명한다. 일 실시예에 따른 연산 장치는 단계에서, 제2 오퍼랜드 데이터의 데이터 타입을 판단할 수 있다. 일 실시예에 따른 연산 장치는 단계(480-1)에서, 제2 오퍼랜드 데이터의 데이터가 고정 소수점 타입인 경 우, 4개의 분리된 출력을 합산할 수 있다.일 실시예에 따른 연산 장치는 단계(480-2)에서, 제2 오퍼랜드 데이터의 데이터가 부동 소수점 타입인 경 우, 지수부 레지스터에 저장된 누산 지수부 데이터와 지수부 브릭 데이터를 비교하고, 비교 결과에 기초하여 3 개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터에 곱셈 연산 수행 결과를 누산할 수 있다. 보다 구체 적으로, 연산 장치는 전술한 비교 결과에 기초하여 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터와 곱셈 연산 수행 결과의 누산 위치(position)를 정렬하여 누산할 수 있다. 비교 결과에 기초하여 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터에 곱셈 연산 수행 결과를 누산하는 구체적인 방법은 아래에서 도 6 을 참조하여 설명한다. 도 5는 일 실시예에 따른 4비트 고정 소수점으로 표현된 제1 오퍼랜드 데이터와 16비트 하프 부동 소수점으로 표현된 제2 오퍼랜드 데이터 사이의 MAC 연산을 수행하는 방법을 설명하기 위한 도면이다. 도 5를 참조하면, 일 실시예에 따른 연산 장치는 4*4 단위의 곱셈기, 지수부 레지스터와 3개의 가수부 레지스터 를 포함할 수 있다. 3개의 가수부 레지스터는 탑 브릭 데이터의 연산 결과를 저장하는 탑 브릭 레지스터, 미들 브릭 데이터의 연산 결과를 저장하는 미들 브릭 레지스터 및 바텀 브릭 데이터의 연산 결과를 저장하는 바텀 브 릭 레지스터를 포함할 수 있다. 일 실시예에 따른 연산 장치는, 제2 오퍼랜드 데이터가 16비트 하프 부동 소수점 타입이라면, 3개의 가수부를 3 개의 4비트 브릭 데이터로 나눠서, 4*4로 설계된 곱셈기를 통해 제1 오퍼랜드 데이터와 곱셈을 수행할 수 있다. 그 결과로 나온 3개의 곱셈 결과는 지수부 레지스터에 저장된 누산 지수부 데이터와 지수부 브릭 데이터의 차인 지수차(Exp diff)에 따라 정렬(alignment)이 이뤄지고 각각의 가수부 레지스터 각각에 저장된 누산 가수부 데이 터에 곱셈 연산 수행 결과가 누산되어 저장될 수 있다. 도 6은 일 실시예에 따른 지수차에 따라 데이터를 정렬하는 방법을 설명하는 도면이다. 도 6을 참조하면, 일 실시예에 따른 곱셈기의 출력인 8비트(4bit*4bit) 데이터를 누산하기 위해 제공하는 가수 부 레지스터는 12비트로 구성되어 있다. 일 실시예에 따른 연산 장치는 지수차에 따라 곱셈기의 출력들의 위치 를 지정하여 누산할 수 있다. 예를 들어, 지수차가 0인 경우(제2 오퍼랜드 데이터의 지수가 저장된 누산 지수부 데이터보다 큰 경우)에는, 곱 셈 연산 수행 결과와 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터를 동일한 위치에 정렬하여 누산 할 수 있다. 또한, 지수차가 -1인 경우(제2 오퍼랜드 데이터의 지수가 저장된 누산 지수부 데이터보다 큰 경우)에는, 곱셈 연산 수행 결과가 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터보다 오른쪽으로 4비트 시프팅될 수 있도록 정렬하여 누산할 수 있다. 또한, 지수차가 1인 경우(제2 오퍼랜드 데이터의 지수가 저장된 누산 지수부 데이터보다 작은 경우)에는, 곱셈 연산 수행 결과가 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터보다 왼쪽으로 4비트 시프팅될 수 있도록 정렬하여 누산할 수 있다. 도 7은 일 실시예에 따른 연산 장치를 설명하기 위한 블록도이다. 도 7을 참조하면, 일 실시예에 따른 연산 장치는 프로세서를 포함한다. 연산 장치는 메모리 및 통신 인터페이스를 더 포함할 수 있다. 프로세서, 메모리, 통신 인터페이스, 및 센서들은 통신 버스를 통해 서로 통신할 수 있다. 프로세서는 4비트 고정 소수점(fixed point)으로 표현된 제1 오퍼랜드(operand) 데이터를 수신하고, 16비 트 크기의 제2 오퍼랜드 데이터를 수신하고, 제2 오퍼랜드 데이터의 데이터 타입을 판단하고, 제2 오퍼랜드 데 이터가 부동 소수점 타입인 경우, 제2 오퍼랜드 데이터를 인코딩하고, 인코딩된 제2 오퍼랜드 데이터를 4비트 단위의 4개의 브릭(brick)으로 분리하고, 4개의 브릭으로 분리된 제2 오퍼랜드 데이터와 제1 오퍼랜드 데이터 사이의 MAC 연산을 수행한다. 메모리는 휘발성 메모리 또는 비 휘발성 메모리일 수 있다. 실시예에 따라서, 프로세서는 제2 오퍼랜드 데이터를 4비트(bit) 단위로 분리할 수 있도록 상기 제2 오퍼 랜드 데이터의 지수부 및 가수부의 비트 수를 조정하고, 상기 지수부가 4의 배수로 될 수 있도록 상기 비트 수 가 조정된 제2 오퍼랜드 데이터를 인코딩할 수 있다. 프로세서는 인코딩된 제2 오퍼랜드 데이터를 하나의 지수부 브릭 데이터과 3개의 가수부 브릭 데이터로 분 리할 수 있다. 프로세서는 3개의 가수부 브릭 데이터 각각과 제1 오퍼랜드 데이터 사이의 곱셈 연산을 수행하고, 지수부 레지스터에 저장된 누산 지수부 데이터와 지수부 브릭 데이터를 비교하고, 비교 결과에 기초하여, 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터에 곱셈 연산 수행 결과를 누산할 수 있다. 프로세서는 비교 결과에 기초하여, 3개의 가수부 레지스터 각각에 저장된 누산 가수부 데이터와 곱셈 연산 수행 결과의 누산 위치(position)를 정렬할 수 있다. 이 밖에도, 프로세서는 도 1a 내지 도 6을 통해 전술한 적어도 하나의 방법 또는 적어도 하나의 방법에 대 응되는 알고리즘을 수행할 수 있다. 프로세서는 프로그램을 실행하고, 연산 장치를 제어할 수 있다. 프로세서에 의하여 실행되는 프로그램 코드는 메모리에 저장될 수 있다. 연산 장치는 입출력 장치(미도시)를 통하여 외부 장치(예를 들어, 퍼스널 컴퓨터 또는 네트워크)에 연결되고, 데이터를 교환할 수 있다. 연산 장치는 스마트 폰, 테블릿 컴퓨터, 랩톱 컴퓨터, 데스크톱 컴퓨터, 텔레비전, 웨어러블 장치, 보안 시스템, 스마트 홈 시스템 등 다양한 컴퓨팅 장치 및/또는 시스템에 탑재될 수 있다. 이상에서 설명된 실시예들은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨 어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치, 방법 및 구성요소는, 프로세 서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨 터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 운영 체제 상에서 수행되는 하나 이상의 소 프트웨어 애플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된"}
{"patent_id": "10-2021-0034835", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 콘트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파(signal wave)에 영구적으로, 또는 일시적으로 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 하나 이상의 컴퓨터 판독 가능 기록 매 체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단 독으로 또는 조합하여 포함할 수 있다. 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구 성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다."}
{"patent_id": "10-2021-0034835", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "이상과 같이 실시예들이 비록 한정된 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가진 자라면 상기를 기초로 다양한 기술적 수정 및 변형을 적용할 수 있다. 예를 들어, 설명된 기술들이 설명된 방법과 다 른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다."}
{"patent_id": "10-2021-0034835", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1a는 인공신경망(Artificial Neural Network)를 이용한 딥러닝 연산 방법을 설명하기 위한 도면이다. 도 1b는 딥러닝 연산에서 입력으로 제공되는 입력 특징맵의 데이터와 필터를 설명하기 위한 도면이다. 도 1c는 딥러닝 기반에서 컨볼루션 연산을 수행하는 과정을 설명하기 위한 도면이다. 도 1d는 시스톨릭 어레이(systolic array)을 이용하여 컨볼루션 연산을 수행하는 방법을 설명하기 위한 도면이 다. 도 2는 일 실시예에 따른 인코딩 방법을 설명하기 위한 순서도이다. 도 3은 일 실시예에 따른 인코딩 방법을 설명하기 위한 도면이다. 도 4는 일 실시예에 따른 연산 방법을 설명하기 위한 도면이다. 도 5는 일 실시예에 따른 4비트 고정 소수점으로 표현된 제1 오퍼랜드 데이터와 16비트 하프 부동 소수점으로 표현된 제2 오퍼랜드 데이터 사이의 MAC 연산을 수행하는 방법을 설명하기 위한 도면이다. 도 6은 일 실시예에 따른 지수차에 따라 데이터를 정렬하는 방법을 설명하는 도면이다. 도 7은 일 실시예에 따른 연산 장치를 설명하기 위한 블록도이다."}
