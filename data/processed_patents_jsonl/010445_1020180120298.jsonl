{"patent_id": "10-2018-0120298", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2019-0136891", "출원번호": "10-2018-0120298", "발명의 명칭": "전자 장치 및 그 제어 방법", "출원인": "삼성전자주식회사", "발명자": "조영래"}}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,입력 데이터 및 제1 커널(kernel) 데이터로부터 획득된 복수의 제2 커널 데이터가 저장된 스토리지; 및상기 복수의 제2 커널 데이터 각각을 상기 입력 데이터와 컨볼루션(convolution) 연산하여 상기 입력 데이터의일부가 상기 제1 커널 데이터에 의해 업스케일링(upscaling)된 데이터를 획득하는 프로세서;를 포함하며,상기 복수의 제2 커널 데이터 각각은, 상기 제1 커널 데이터에 포함된 복수의 제1 커널 엘리먼트 중 서로 다른제1 커널 엘리먼트를 포함하는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 복수의 제2 커널 데이터 각각은,상기 제1 커널 데이터의 크기 및 상기 업스케일링의 배수(r)에 기초하여 상기 제1 커널 데이터가 확장되며,상기 확장된 제1 커널 데이터에서 상기 배수(r)의 간격으로 이격된 복수의 제1 커널 엘리먼트에 기초하여 획득되는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,통신부;를 더 포함하고,상기 프로세서는,상기 통신부를 통하여 서버로부터 상기 복수의 제2 커널 데이터를 수신하고, 상기 수신된 복수의 제2 커널 데이터를 상기 스토리지에 저장하는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,통신부;를 더 포함하고,상기 프로세서는,상기 통신부를 통하여 서버로부터 상기 제1 커널 데이터를 수신하고, 상기 제1 커널 데이터로부터 상기 복수의제2 커널 데이터를 획득하며, 상기 복수의 제2 커널 데이터를 상기 스토리지에 저장하는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 프로세서는,상기 복수의 제2 커널 데이터 각각을, 상기 입력 데이터의 일부에 포함된 업스케일링 대상 엘리먼트 및 상기 업스케일링 대상 엘리먼트를 둘러싸는 복수의 주변 엘리먼트와 상기 컨볼루션 연산하여 상기 업스케일링 대상 엘리먼트에 대한 복수의 업스케일링 엘리먼트를 획득하고,상기 업스케일링 대상 엘리먼트 및 상기 복수의 주변 엘리먼트의 개수는, 상기 복수의 제2 커널 데이터 각각에포함된 복수의 제2 엘리먼트의 개수와 동일한, 전자 장치.공개특허 10-2019-0136891-3-청구항 6 제5항에 있어서,상기 프로세서는,상기 입력 데이터에 대한 상기 업스케일링 대상 엘리먼트의 위치에 기초하여 상기 업스케일링된 데이터에 대한상기 복수의 업스케일링 엘리먼트의 위치를 결정하는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 프로세서는,상기 복수의 제2 커널 데이터 각각을 상기 입력 데이터와 상기 컨볼루션 연산하는 컨볼루션 어레이; 및상기 업스케일링된 데이터를 저장하는 라인 메모리(line memory);를 포함하는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 컨볼루션 어레이는, 각각이 복수의 레지스터 파일(register file)을 포함하는 복수의 연산 소자(Processing Element)를 포함하고,상기 복수의 연산 소자 각각은,상기 복수의 제2 커널 데이터 중 상기 복수의 연산 소자에 입력된 제2 커널 엘리먼트를 이용하여 곱셈 연산을수행하고, 상기 복수의 레지스터 파일 중 상기 제2 커널 엘리먼트에 대응되는 레지스터 파일에 상기 연산 결과를 누적하여 저장하는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 프로세서는,상기 컨볼루션 어레이 및 상기 라인 메모리 사이에 배치되는 셔플러(shuffler);를 더 포함하고,상기 셔플러는,상기 복수의 연산 소자로부터 출력되는 복수의 연산 결과를 셔플하여 상기 라인 메모리로 제공하는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 셔플러는,복수의 버퍼 세트; 및상기 복수의 연산 소자에 포함된 서로 대응되는 레지스터 파일로부터 출력되는 복수의 연산 결과를 수신하고,상기 복수의 연산 결과를 상기 복수의 버퍼 세트로 출력하는 FIFO 메모리;를 포함하고,상기 복수의 버퍼 세트는,상기 복수의 연산 결과 각각을 상기 복수의 버퍼 세트 각각의 대응되는 버퍼에 저장하고, 상기 복수의 버퍼 세트에 포함된 모든 버퍼에 연산 결과가 저장되면, 기설정된 순서로 상기 복수의 버퍼 세트 중 하나의 버퍼 세트에 저장된 복수의 연산 결과를 상기 라인 메모리로 제공하는, 전자 장치."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "전자 시스템에 있어서,제1 커널 데이터에 포함된 복수의 제1 커널 엘리먼트 중 서로 다른 제1 커널 엘리먼트를 포함하는 복수의 제2공개특허 10-2019-0136891-4-커널 데이터를 획득하는 서버; 및상기 서버로부터 상기 제2 커널 데이터를 수신하고, 상기 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션(convolution) 연산하여 상기 입력 데이터의 일부가 상기 제1 커널 데이터에 의해 업스케일링(upscaling)된데이터를 획득하는 전자 장치;를 포함하는, 전자 시스템."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 서버는,상기 제1 커널 데이터의 크기 및 상기 업스케일링의 배수(r)에 기초하여 상기 제1 커널 데이터를 확장하며,상기 확장된 제1 커널 데이터에서 상기 배수(r)의 간격으로 이격된 복수의 제1 커널 엘리먼트에 기초하여 상기복수의 제2 커널 데이터 각각을 획득하는, 전자 시스템."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "전자 장치의 제어 방법에 있어서,제1 커널 데이터로부터 획득된 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션(convolution) 연산하는단계; 및상기 컨볼루션 연산에 기초하여 상기 입력 데이터의 일부가 제1 커널 데이터에 의해 업스케일링(upscaling)된데이터를 획득하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 복수의 제2 커널 데이터 각각은,상기 제1 커널 데이터의 크기 및 상기 업스케일링의 배수(r)에 기초하여 상기 제1 커널 데이터가 확장되며,상기 확장된 제1 커널 데이터에서 상기 배수(r)의 간격으로 이격된 복수의 제1 커널 엘리먼트에 기초하여 획득되는, 제어 방법."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제13항에 있어서,서버로부터 상기 복수의 제2 커널 데이터를 수신하는 단계;를 더 포함하는, 제어 방법."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서,서버로부터 상기 제1 커널 데이터를 수신하는 단계; 및상기 제1 커널 데이터로부터 상기 복수의 제2 커널 데이터를 획득하는 단계;를 더 포함하는, 제어 방법."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제13항에 있어서,상기 업스케일링된 데이터를 획득하는 단계는,상기 복수의 제2 커널 데이터 각각을, 상기 입력 데이터의 일부에 포함된 업스케일링 대상 엘리먼트 및 상기 업스케일링 대상 엘리먼트를 둘러싸는 복수의 주변 엘리먼트와 상기 컨볼루션 연산하여 상기 업스케일링 대상 엘리먼트에 대한 복수의 업스케일링 엘리먼트를 획득하고,상기 업스케일링 대상 엘리먼트 및 상기 복수의 주변 엘리먼트의 개수는, 상기 복수의 제2 커널 데이터 각각에포함된 복수의 제2 엘리먼트의 개수와 동일한, 제어 방법.공개특허 10-2019-0136891-5-청구항 18 제17항에 있어서,상기 업스케일링된 데이터를 획득하는 단계는,상기 입력 데이터에 대한 상기 업스케일링 대상 엘리먼트의 위치에 기초하여 상기 업스케일링된 데이터에 대한상기 복수의 업스케일링 엘리먼트의 위치를 결정하는, 제어 방법."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제13항에 있어서,상기 업스케일링된 데이터를 획득하는 단계는,컨볼루션 어레이를 통해 상기 복수의 제2 커널 데이터 각각을 상기 입력 데이터와 상기 컨볼루션 연산을 수행하는 단계; 및상기 업스케일링된 데이터를 라인 메모리(line memory)에 저장하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2018-0120298", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19항에 있어서,상기 컨볼루션 어레이는, 각각이 복수의 레지스터 파일(register file)을 포함하는 복수의 연산 소자(Processing Element)를 포함하고,상기 컨볼루션 연산하는 단계는,상기 복수의 연산 소자 각각을 통해 상기 복수의 제2 커널 데이터 중 상기 복수의 연산 소자에 입력된 제2 커널엘리먼트를 이용하여 곱셈 연산을 수행하는 단계; 및상기 복수의 레지스터 파일 중 상기 제2 커널 엘리먼트에 대응되는 레지스터 파일에 상기 연산 결과를 누적하여저장하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2018-0120298", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "인공지능 알고리즘(artificial intelligence)을 실행하는 전자 장치가 개시된다. 본 전자 장치는 입력 데이터 및 제1 커널(kernel) 데이터로부터 획득된 복수의 제2 커널 데이터가 저장된 스토리지 및 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션(convolution) 연산하여 입력 데이터의 일부가 제1 커널 데이터에 의해 업스케일 링(upscaling)된 데이터를 획득하는 프로세서를 포함하며, 복수의 제2 커널 데이터 각각은 제1 커널 데이터에 포 함된 복수의 제1 커널 엘리먼트 중 서로 다른 제1 커널 엘리먼트를 포함할 수 있다."}
{"patent_id": "10-2018-0120298", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 전자 장치 및 그 제어 방법에 대한 것으로, 더욱 상세하게는 입력 데이터를 커널(kernel) 데이터에 기초하여 업스케일링(upscaling)하는 전자 장치 및 그 제어 방법에 대한 것이다."}
{"patent_id": "10-2018-0120298", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "근래에는 인간 수준의 지능을 구현하는 인공 지능 시스템이 다양한 분야에서 이용되고 있다. 인공 지능 시스템 은 기존의 룰(rule) 기반 스마트 시스템과 달리 기계가 스스로 학습하고 판단하며 똑똑해지는 시스템이다. 인공 지능 시스템은 사용할수록 인식률이 향상되고 사용자 취향을 보다 정확하게 이해할 수 있게 되어, 기존 룰 기반 스마트 시스템은 점차 딥러닝 기반 인공 지능 시스템으로 대체되고 있다. 인공 지능 기술은 기계학습(예로, 딥러닝) 및 기계학습을 활용한 요소 기술들로 구성된다. 기계학습은 입력 데이터들의 특징을 스스로 분류/학습하는 알고리즘 기술이며, 요소기술은 딥러닝 등의 기계학 습 알고리즘을 활용하여 인간 두뇌의 인지, 판단 등의 기능을 모사하는 기술로서, 언어적 이해, 시각적 이해, 추론/예측, 지식 표현, 동작 제어 등의 기술 분야로 구성된다. 인공 지능 기술이 응용되는 다양한 분야는 다음과 같다. 언어적 이해는 인간의 언어/문자를 인식하고 응용/처리 하는 기술로서, 자연어 처리, 기계 번역, 대화시스템, 질의 응답, 음성 인식/합성 등을 포함한다. 시각적 이해 는 사물을 인간의 시각처럼 인식하여 처리하는 기술로서, 객체 인식, 객체 추적, 영상 검색, 사람 인식, 장면 이해, 공간 이해, 영상 개선 등을 포함한다. 추론 예측은 정보를 판단하여 논리적으로 추론하고 예측하는 기술 로서, 지식/확률 기반 추론, 최적화 예측, 선호 기반 계획, 추천 등을 포함한다. 지식 표현은 인간의 경험정보 를 지식데이터로 자동화 처리하는 기술로서, 지식 구축(데이터 생성/분류), 지식 관리(데이터 활용) 등을 포함한다. 동작 제어는 차량의 자율 주행, 로봇의 움직임을 제어하는 기술로서, 움직임 제어(항법, 충돌, 주행), 조 작 제어(행동 제어) 등을 포함한다. 특히, Super resolution이라고 불리우는 입력 영상의 해상도를 커지게 하는 Neural network는 크게 이미지의 특 징(feature)을 추출하는 convolution layer와 추출된 특징(feature)을 계산하는 non-linear layer(ReLu, Pooling, Elementwise sum, Batch normalization 등)와 마지막으로 입력 영상의 해상도를 배가시키는 upscale layer로 구성된다. 여기서, Upscale layer의 경우 Bilinear, subpixel shuffle, transposed convolution, gaussian filter 등 여 러 방식이 있다. 다만, 모든 방식의 Upscale layer를 별도로 구현하게 되면 하드웨어 면적이 넓어지는 문제가 있다. 그에 따라, 업스케일링 동작을 수행하면서도 하드웨어 면적을 작게 유지할 수 있는 방법이 필요하게 되었다."}
{"patent_id": "10-2018-0120298", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상술한 필요성에 따른 것으로, 본 개시의 목적은 특정 연산을 위한 하드웨어를 제거하여 하드웨어 면 적을 축소시킨 전자 장치 및 그 제어 방법을 제공함에 있다."}
{"patent_id": "10-2018-0120298", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "이상과 같은 목적을 달성하기 위한 본 개시의 일 실시 예에 따른 전자 장치는 입력 데이터 및 제1 커널(kernel) 데이터로부터 획득된 복수의 제2 커널 데이터가 저장된 스토리지 및 상기 복수의 제2 커널 데이터 각각을 상기 입력 데이터와 컨볼루션(convolution) 연산하여 상기 입력 데이터의 일부가 상기 제1 커널 데이터에 의해 업스 케일링(upscaling)된 데이터를 획득하는 프로세서를 포함하며, 상기 복수의 제2 커널 데이터 각각은 상기 제1 커널 데이터에 포함된 복수의 제1 커널 엘리먼트 중 서로 다른 제1 커널 엘리먼트를 포함할 수 있다. 또한, 상기 복수의 제2 커널 데이터 각각은 상기 제1 커널 데이터의 크기 및 상기 업스케일링의 배수(r)에 기초 하여 상기 제1 커널 데이터가 확장되며, 상기 확장된 제1 커널 데이터에서 상기 배수(r)의 간격으로 이격된 복 수의 제1 커널 엘리먼트에 기초하여 획득될 수 있다. 그리고, 통신부를 더 포함하고, 상기 프로세서는 상기 통신부를 통하여 서버로부터 상기 복수의 제2 커널 데이 터를 수신하고, 상기 수신된 복수의 제2 커널 데이터를 상기 스토리지에 저장할 수 있다. 또한, 통신부를 더 포함하고, 상기 프로세서는 상기 통신부를 통하여 서버로부터 상기 제1 커널 데이터를 수신 하고, 상기 제1 커널 데이터로부터 상기 복수의 제2 커널 데이터를 획득하며, 상기 복수의 제2 커널 데이터를 상기 스토리지에 저장할 수 있다. 그리고, 상기 프로세서는 상기 복수의 제2 커널 데이터 각각을, 상기 입력 데이터의 일부에 포함된 업스케일링 대상 엘리먼트 및 상기 업스케일링 대상 엘리먼트를 둘러싸는 복수의 주변 엘리먼트와 상기 컨볼루션 연산하여 상기 업스케일링 대상 엘리먼트에 대한 복수의 업스케일링 엘리먼트를 획득하고, 상기 업스케일링 대상 엘리먼 트 및 상기 복수의 주변 엘리먼트의 개수는, 상기 복수의 제2 커널 데이터 각각에 포함된 복수의 제2 엘리먼트 의 개수와 동일할 수 있다. 또한, 상기 프로세서는 상기 입력 데이터에 대한 상기 업스케일링 대상 엘리먼트의 위치에 기초하여 상기 업스 케일링된 데이터에 대한 상기 복수의 업스케일링 엘리먼트의 위치를 결정할 수 있다. 그리고, 상기 프로세서는 상기 복수의 제2 커널 데이터 각각을 상기 입력 데이터와 상기 컨볼루션 연산하는 컨 볼루션 어레이 및 상기 업스케일링된 데이터를 저장하는 라인 메모리(line memory)를 포함할 수 있다. 또한, 상기 컨볼루션 어레이는 각각이 복수의 레지스터 파일(register file)을 포함하는 복수의 연산 소자 (Processing Element)를 포함하고, 상기 복수의 연산 소자 각각은 상기 복수의 제2 커널 데이터 중 상기 복수의 연산 소자에 입력된 제2 커널 엘리먼트를 이용하여 곱셈 연산을 수행하고, 상기 복수의 레지스터 파일 중 상기 제2 커널 엘리먼트에 대응되는 레지스터 파일에 상기 연산 결과를 누적하여 저장할 수 있다. 그리고, 상기 프로세서는 상기 컨볼루션 어레이 및 상기 라인 메모리 사이에 배치되는 셔플러(shuffler)를 더 포함하고, 상기 셔플러는 상기 복수의 연산 소자로부터 출력되는 복수의 연산 결과를 셔플하여 상기 라인 메모리로 제공할 수 있다. 또한, 상기 셔플러는 복수의 버퍼 세트 및 상기 복수의 연산 소자에 포함된 서로 대응되는 레지스터 파일로부터 출력되는 복수의 연산 결과를 수신하고, 상기 복수의 연산 결과를 상기 복수의 버퍼 세트로 출력하는 FIFO 메모 리를 포함하고, 상기 복수의 버퍼 세트는 상기 복수의 연산 결과 각각을 상기 복수의 버퍼 세트 각각의 대응되 는 버퍼에 저장하고, 상기 복수의 버퍼 세트에 포함된 모든 버퍼에 연산 결과가 저장되면, 기설정된 순서로 상 기 복수의 버퍼 세트 중 하나의 버퍼 세트에 저장된 복수의 연산 결과를 상기 라인 메모리로 제공할 수 있다. 한편, 본 개시의 일 실시 예에 따른 전자 시스템은 제1 커널 데이터에 포함된 복수의 제1 커널 엘리먼트 중 서 로 다른 제1 커널 엘리먼트를 포함하는 복수의 제2 커널 데이터를 획득하는 서버 및 상기 서버로부터 상기 제2 커널 데이터를 수신하고, 상기 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션(convolution) 연산하여 상기 입력 데이터의 일부가 상기 제1 커널 데이터에 의해 업스케일링(upscaling)된 데이터를 획득하는 전자 장 치를 포함한다. 또한, 상기 서버는 상기 제1 커널 데이터의 크기 및 상기 업스케일링의 배수(r)에 기초하여 상기 제1 커널 데이 터를 확장하며, 상기 확장된 제1 커널 데이터에서 상기 배수(r)의 간격으로 이격된 복수의 제1 커널 엘리먼트에 기초하여 상기 복수의 제2 커널 데이터 각각을 획득할 수 있다. 한편, 본 개시의 일 실시 예에 따른 전자 장치의 제어 방법은 제1 커널 데이터로부터 획득된 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션(convolution) 연산하는 단계 및 상기 컨볼루션 연산에 기초하여 상기 입 력 데이터의 일부가 제1 커널 데이터에 의해 업스케일링(upscaling)된 데이터를 획득하는 단계를 포함한다. 또한, 상기 복수의 제2 커널 데이터 각각은 상기 제1 커널 데이터의 크기 및 상기 업스케일링의 배수(r)에 기초 하여 상기 제1 커널 데이터가 확장되며, 상기 확장된 제1 커널 데이터에서 상기 배수(r)의 간격으로 이격된 복 수의 제1 커널 엘리먼트에 기초하여 획득될 수 있다. 그리고, 서버로부터 상기 복수의 제2 커널 데이터를 수신하는 단계를 더 포함할 수 있다. 또한, 서버로부터 상기 제1 커널 데이터를 수신하는 단계 및 상기 제1 커널 데이터로부터 상기 복수의 제2 커널 데이터를 획득하는 단계를 더 포함할 수 있다. 그리고, 상기 업스케일링된 데이터를 획득하는 단계는 상기 복수의 제2 커널 데이터 각각을, 상기 입력 데이터 의 일부에 포함된 업스케일링 대상 엘리먼트 및 상기 업스케일링 대상 엘리먼트를 둘러싸는 복수의 주변 엘리먼 트와 상기 컨볼루션 연산하여 상기 업스케일링 대상 엘리먼트에 대한 복수의 업스케일링 엘리먼트를 획득하고, 상기 업스케일링 대상 엘리먼트 및 상기 복수의 주변 엘리먼트의 개수는, 상기 복수의 제2 커널 데이터 각각에 포함된 복수의 제2 엘리먼트의 개수와 동일할 수 있다. 또한, 상기 업스케일링된 데이터를 획득하는 단계는 상기 입력 데이터에 대한 상기 업스케일링 대상 엘리먼트의 위치에 기초하여 상기 업스케일링된 데이터에 대한 상기 복수의 업스케일링 엘리먼트의 위치를 결정할 수 있다. 그리고, 상기 업스케일링된 데이터를 획득하는 단계는 컨볼루션 어레이를 통해 상기 복수의 제2 커널 데이터 각 각을 상기 입력 데이터와 상기 컨볼루션 연산을 수행하는 단계 및 상기 업스케일링된 데이터를 라인 메모리 (line memory)에 저장하는 단계를 포함할 수 있다. 또한, 상기 컨볼루션 어레이는 각각이 복수의 레지스터 파일(register file)을 포함하는 복수의 연산 소자 (Processing Element)를 포함하고, 상기 컨볼루션 연산하는 단계는 상기 복수의 연산 소자 각각을 통해 상기 복 수의 제2 커널 데이터 중 상기 복수의 연산 소자에 입력된 제2 커널 엘리먼트를 이용하여 곱셈 연산을 수행하는 단계 및 상기 복수의 레지스터 파일 중 상기 제2 커널 엘리먼트에 대응되는 레지스터 파일에 상기 연산 결과를 누적하여 저장하는 단계를 포함할 수 있다. 그리고, 상기 컨볼루션 어레이 및 상기 라인 메모리 사이에 배치되는 셔플러(shuffler)를 통해 상기 복수의 연 산 소자로부터 출력되는 복수의 연산 결과를 셔플하여 상기 라인 메모리로 제공하는 단계를 더 포함할 수 있다. 또한, 상기 라인 메모리로 제공하는 단계는 FIFO 메모리가 상기 복수의 연산 소자에 포함된 서로 대응되는 레지 스터 파일로부터 출력되는 복수의 연산 결과를 수신하고, 상기 복수의 연산 결과를 복수의 버퍼 세트로 출력하 는 단계, 상기 복수의 연산 결과 각각을 상기 복수의 버퍼 세트 각각의 대응되는 버퍼에 저장하는 단계 및 상기 복수의 버퍼 세트에 포함된 모든 버퍼에 연산 결과가 저장되면, 기설정된 순서로 상기 복수의 버퍼 세트 중 하 나의 버퍼 세트에 저장된 복수의 연산 결과를 상기 라인 메모리로 제공하는 단계를 포함할 수 있다."}
{"patent_id": "10-2018-0120298", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "이상과 같은 본 개시의 다양한 실시 예에 따르면, 전자 장치는 컨볼루션 어레이를 통해 업스케일링 연산을 수행 함에 따라 업스케일링 연산을 수행하기 위한 별도의 하드웨어를 제거하여 하드웨어의 면적을 최소화할 수 있다."}
{"patent_id": "10-2018-0120298", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서, 첨부된 도면을 이용하여 본 개시의 다양한 실시 예들에 대하여 구체적으로 설명한다. 도 1은 본 개시의 일 실시 예에 따른 전자 장치의 구성을 나타내는 블럭도이다. 도 1에 도시된 바와 같이, 전자 장치는 스토리지 및 프로세서를 포함한다. 전자 장치는 입력 데이터를 커널(kernel) 데이터에 기초하여 입력 데이터의 일부를 업스케일링(upscalin g)하는 장치일 수 있다. 예를 들어, 전자 장치는 디스플레이 장치의 해상도에 대응되도록 컨텐츠를 업스케 일링하고, 업스케일링된 컨텐츠를 디스플레이 장치로 제공하는 장치로서, 셋탑박스(STB), 서버 등일 수 있다. 또는, 전자 장치는 디스플레이를 구비하고, 디스플레이의 해상도에 대응되도록 컨텐츠를 업스케일링하는 장치로서, 데스크탑 PC, 노트북, 스마트폰, 태블릿 PC 등일 수도 있다. 다만, 이에 한정되는 것은 아니며, 전자 장치는 업스케일링 연산이 가능한 장치라면 어떤 장치라도 무방하다. 스토리지는 프로세서와는 별도로 구비되며, 하드디스크, 비휘발성 메모리 및 휘발성 메모리 등으로 구현될 수 있다. 스토리지는 입력 데이터를 저장할 수 있다. 여기서, 입력 데이터는 업스케일링의 대상이 되는 데이터를 포 함할 수 있다. 또는, 스토리지의 입력 데이터의 일부를 저장할 수도 있다. 즉, 입력 데이터는 업스케일링 대상 데이터를 포함하고, 프로세서에 의해 업스케일링 대상 데이터가 패딩된 데이터일 수 있다. 이하에서 는 설명의 편의를 위하여 입력 데이터가 업스케일링 대상 데이터 및 그 패딩 데이터를 포함하는 것으로 설명한 다. 다만, 이에 한정되는 것은 아니며, 입력 데이터는 업스케일링 대상 데이터만을 포함할 수 있다. 이 경우, 프로세서는 업스케일링 대상 데이터를 패딩하여 스토리지에 저장할 수도 있다. 또한, 스토리지는 제1 커널(kernel) 데이터로부터 획득된 복수의 제2를 포커널 데이터를 저장할 수 있다. 여기서, 제1 커널 데이터는 입력 데이터의 일부를 업스케일링하기 위한 데이터일 수 있다. 예를 들어, 제1 커널 데이터는 입력 데이터의 일부를 업스케일링하기 위한 가우시안 필터(gaussian filter)일 수 있다. 복수의 제2 커널 데이터 각각은 제1 커널 데이터에 포함된 복수의 제1 커널 엘리먼트 중 서로 다른 제1 커널 엘리먼트를 포 함할 수 있다. 전자 장치는 서버로부터 복수의 제2 커널 데이터를 수신할 수 있다. 이 경우, 서버는 제1 커널 데이터로부 터 복수의 제2 커널 데이터를 획득하고, 복수의 제2 커널 데이터를 전자 장치로 전송할 수 있다. 또는, 전 자 장치는 서버로부터 제1 커널 데이터를 수신하고, 제1 커널 데이터로부터 복수의 제2 커널 데이터를 직 접 획득할 수도 있다. 한편, 스토리지는 후술할 프로세서의 내부에 구비된 라인 메모리보다 저장 용량이 클 수 있으며, 라 인 메모리로 데이터를 제공하거나 라인 메모리로부터 데이터를 입력받을 수 있다. 예를 들어, 스토리지에 저장된 입력 데이터 및 제1 커널 데이터는 라인 메모리에 일시적으로 저장될 수 있 다. 또는, 스토리지에 저장된 입력 데이터 및 제1 커널 데이터의 일부만이 라인 메모리에 저장될 수도 있 다. 또는, 후술할 업스케일링된 데이터는 라인 메모리에 저장되고, 스토리지는 라인 메모리로부터 업스케 일링된 데이터를 입력받을 수 있다. 프로세서는 전자 장치의 동작을 전반적으로 제어한다. 프로세서는 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션(convolution) 연산하여 입력 데이터의 일부가 제1 커널 데이터에 의해 업스케일링된 업스케일링된 데이터를 획득할 수 있다. 여기서, 복수의 제2 커널 데이터는 제1 커널 데이터로부터 획득될 수 있다. 특히, 복수의 제2 커널 데이터 각각 은, 제1 커널 데이터에 포함된 복수의 제1 커널 엘리먼트 중 서로 다른 제1 커널 엘리먼트를 포함할 수 있다. 구체적으로, 복수의 제2 커널 데이터 각각은 제1 커널 데이터의 크기 및 업스케일링의 배수(r)에 기초하여 제1 커널 데이터가 확장되며, 확장된 제1 커널 데이터에서 배수(r)의 간격으로 이격된 복수의 제1 커널 엘리먼트에 기초하여 획득될 수 있다. 예를 들어, 제1 커널 데이터가 7 × 7의 매트릭스 형태인 경우, 제1 커널 데이터로부터 3 × 3의 매트릭스 형태 인 제2 커널 데이터가 9개 획득될 수 있다. 즉, 복수의 제2 커널 데이터 각각의 크기는 제1 커널 데이터의 크기 에 기초하여 결정될 수 있다. 또한, 복수의 제2 커널 데이터의 개수는 업스케일링 배수(r)에 의해 결정될 수 있 다. 복수의 제2 커널 데이터를 획득하는 구체적인 방법은 후술한다. 전자 장치는 통신부(미도시)를 더 포함하고, 프로세서는 통신부를 통하여 서버로부터 복수의 제2 커 널 데이터를 수신하고, 수신된 복수의 제2 커널 데이터를 스토리지에 저장할 수 있다. 또는, 전자 장치는 통신부를 더 포함하고, 프로세서는 통신부를 통하여 서버로부터 제1 커널 데이터 를 수신하고, 제1 커널 데이터로부터 복수의 제2 커널 데이터를 획득하며, 복수의 제2 커널 데이터를 스토리지 에 저장할 수도 있다. 여기서, 통신부는 다양한 유형의 통신방식에 따라 다양한 유형의 외부 장치와 통신을 수행하는 구성이다. 통신 부는 와이파이 칩, 블루투스 칩, 무선 통신 칩, NFC 칩 등을 포함한다. 프로세서는 통신부를 이용하여 각 종 외부 장치와 통신을 수행한다. 와이파이 칩, 블루투스 칩은 각각 WiFi 방식, 블루투스 방식으로 통신을 수행한다. 와이파이 칩이나 블루투스 칩을 이용하는 경우에는 SSID 및 세션 키 등과 같은 각종 연결 정보를 먼저 송수신하여, 이를 이용하여 통신 연 결한 후 각종 정보들을 송수신할 수 있다. 무선 통신 칩은 IEEE, 지그비(zigbee), 3G(3rd Generation), 3GPP(3rd Generation Partnership Project), LTE(Long Term Evoloution) 등과 같은 다양한 통신 규격에 따라 통신을 수행하는 칩을 의미한다. NFC 칩은 135kHz, 13.56MHz, 433MHz, 860~960MHz, 2.45GHz 등과 같은 다양한 RF-ID 주파수 대역들 중에서 13.56MHz 대역을 사용하는 NFC(Near Field Communication) 방식으로 동작하는 칩 을 의미한다. 한편, 통신부는 외부 장치와 단방향 통신 또는 양방향 통신을 수행할 수 있다. 단방향 통신을 수행하는 경우, 통신부는 외부 장치로부터 제1 커널 데이터 또는 복수의 제2 커널 데이터를 수신할 수 있다. 양방향 통신을 수 행하는 경우, 통신부는 외부 장치로부터 제1 커널 데이터 또는 복수의 제2 커널 데이터를 수신할 수도 있고, 외 부 장치로 업스케일링된 데이터를 송신할 수도 있다.한편, 프로세서는 복수의 제2 커널 데이터 각각을, 입력 데이터의 일부에 포함된 업스케일링 대상 엘리먼 트 및 업스케일링 대상 엘리먼트를 둘러싸는 복수의 주변 엘리먼트와 컨볼루션 연산하여 업스케일링 대상 엘리 먼트에 대한 복수의 업스케일링 엘리먼트를 획득할 수 있다. 여기서, 업스케일링 대상 엘리먼트 및 복수의 주변 엘리먼트의 개수는 복수의 제2 커널 데이터 각각에 포함된 복수의 제2 엘리먼트의 개수와 동일할 수 있다. 예를 들어, 업스케일링 대상 엘리먼트 및 업스케일링 대상 엘리먼트를 둘러싸는 복수의 주변 엘리먼트가 3 × 3 의 매트릭스 형태이고, 복수의 제2 커널 데이터 각각이 3 × 3의 매트릭스 형태인 경우, 프로세서는 업스 케일링 대상 엘리먼트와 복수의 주변 엘리먼트를 복수의 제2 커널 데이터 중 하나와 컨볼루션 연산하여 하나의 업스케일링 엘리먼트를 획득할 수 있다. 그리고, 프로세서는 복수의 제2 커널 데이터 중 나머지에 대하여 동일한 연산을 수행할 수 있다. 즉, 복수의 업스케일링 엘리먼트의 개수는 복수의 제2 커널 데이터의 개수와 동 일할 수 있다. 여기서, 업스케일링된 데이터는 매트릭스 형태일 수 있고, 프로세서는 컨볼루션 연산에 이용된 제2 커널 데이터에 기초하여 업스케일링 엘리먼트의 위치가 결정될 수 있다. 예를 들어, 프로세서는 복수의 제2 커 널 데이터 중 첫 번째 제2 커널 데이터가 연산에 이용된 경우, 첫 번째 제2 커널 데이터의 연산에 의한 업스케 일링 엘리먼트는 업스케일링된 데이터의 첫 번째 로우(row) 및 첫 번째 컬럼(column)에 배치하고, 복수의 제2 커널 데이터 중 두 번째 제2 커널 데이터가 연산에 이용된 경우, 두 번째 제2 커널 데이터의 연산에 의한 업스 케일링 엘리먼트는 업스케일링된 데이터의 첫 번째 로우(row) 및 두 번째 컬럼(column)에 배치할 수 있다. 이상과 같은 방법을 통해 프로세서는 업스케일링 대상 엘리먼트에 대한 업스케일링된 데이터를 획득할 수 있다. 예를 들어, 프로세서는 1개의 픽셀 값인 업스케일링 대상 엘리먼트를 3 × 3개의 픽셀 값을 갖는 업 스케일링된 데이터로 변환할 수 있다. 프로세서는 입력 데이터에 대한 업스케일링 대상 엘리먼트의 위치에 기초하여 업스케일링된 데이터에 대한 복수의 업스케일링 엘리먼트의 위치를 결정할 수 있다. 예를 들어, 프로세서는 입력 데이터에 포함된 1개의 픽셀 값인 제1 업스케일링 대상 엘리먼트를 3 × 3개 의 픽셀 값을 갖는 업스케일링된 제1 데이터로 변환할 수 있다. 그리고, 프로세서는 입력 데이터에서 복수 의 업스케일링 대상 엘리먼트 중 제1 업스케일링 대상 엘리먼트가 최좌측 최상단에 위치하는 경우, 업스케일링 된 데이터의 최좌측 최상단에 업스케일링된 제1 데이터를 배치할 수 있다. 한편, 프로세서는 업스케일링 대상 엘리먼트 간의 상대적인 위치에 기초하여 업스케일링된 데이터에 대한 복수의 업스케일링 엘리먼트의 위치를 결정할 수도 있다. 예를 들어, 프로세서는 입력 데이터에 포함된 1개의 픽셀 값인 제1 업스케일링 대상 엘리먼트를 3 × 3개 의 픽셀 값을 갖는 업스케일링된 제1 데이터로 변환하고, 입력 데이터에 포함된 1개의 픽셀 값인 제2 업스케일 링 대상 엘리먼트를 3 × 3개의 픽셀 값을 갖는 업스케일링된 제2 데이터로 변환할 수 있다. 그리고, 프로세서 는 제2 업스케일링 대상 엘리먼트가 제1 업스케일링 대상 엘리먼트의 우측에 위치하는 경우, 업스케일링된 제2 데이터를 업스케일링된 제1 데이터의 우측에 배치할 수 있다. 한편, 프로세서는 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션 연산하는 컨볼루션 어레이 및 업스케일링된 데이터를 저장하는 라인 메모리(line memory)를 포함할 수 있다. 여기서, 컨볼루션 어레이는 각각이 복수의 레지스터 파일(register file)을 포함하는 복수의 연산 소자 (Processing Element)를 포함하고, 복수의 연산 소자 각각은 복수의 제2 커널 데이터 중 복수의 연산 소자에 입 력된 제2 커널 엘리먼트를 이용하여 곱셈 연산을 수행하고, 복수의 레지스터 파일 중 제2 커널 엘리먼트에 대응 되는 레지스터 파일에 연산 결과를 누적하여 저장할 수 있다. 그리고, 프로세서는 컨볼루션 어레이 및 라인 메모리 사이에 배치되는 셔플러(shuffler)를 더 포함하고, 셔플러는 복수의 연산 소자로부터 출력되는 복수의 연산 결과를 셔플하여 라인 메모리로 제공할 수 있다. 구체적으로, 셔플러는 복수의 버퍼 세트 및 복수의 연산 소자에 포함된 서로 대응되는 레지스터 파일로부터 출 력되는 복수의 연산 결과를 수신하고, 복수의 연산 결과를 복수의 버퍼 세트로 출력하는 FIFO 메모리를 포함하 고, 복수의 버퍼 세트는 복수의 연산 결과 각각을 복수의 버퍼 세트 각각의 대응되는 버퍼에 저장하고, 복수의 버퍼 세트에 포함된 모든 버퍼에 연산 결과가 저장되면, 기설정된 순서로 복수의 버퍼 세트 중 하나의 버퍼 세 트에 저장된 복수의 연산 결과를 라인 메모리로 제공할 수 있다. 이상과 같이 전자 장치는 별도의 전용 하드웨어 없이 컨볼루션 어레이를 이용하여 입력 데이터를 업스케일 링할 수 있다. 이하에서는 도면을 통해 프로세서의 동작을 좀더 구체적으로 설명한다. 도 2a 내지 도 2c는 본 개시의 일 실시 예에 따른 복수의 제2 커널 데이터의 획득 방법을 설명하기 위한 도면들 이다. 먼저, 전자 장치가 아닌 서버가 복수의 제2 커널 데이터를 획득하는 것으로 설명한다. 먼저, 서버는 도 2a에 도시된 바와 같이, 5 × 5의 입력 데이터(input data, 210)에 포함된 25개의 엘리먼트 각 각을 7 × 7의 제1 커널 데이터(kernel data, 220)에 포함된 49개의 엘리먼트와 곱하여 복수의 중간 데이터를 획득할 수 있다. 예를 들어, 서버는 입력 데이터의 첫 번째 로우 및 첫 번째 컬럼의 엘리먼트를 제1 커널 데이터에 포 함된 49개의 엘리먼트와 곱하여 제1 중간 데이터를 획득하고, 입력 데이터의 첫 번째 로우 및 두 번 째 컬럼의 엘리먼트를 제1 커널 데이터에 포함된 49개의 엘리먼트와 곱하여 제2 중간 데이터를 획득 하며, 입력 데이터의 두 번째 로우 및 첫 번째 컬럼의 엘리먼트를 제1 커널 데이터에 포함된 49개의 엘리먼트와 곱하여 제3 중간 데이터를 획득할 수 있다. 서버는 이러한 방법으로 도 2a의 우측과 같은 복수 의 중간 데이터를 획득할 수 있다. 그리고, 서버는 복수의 중간 데이터를 기설정된 간격으로 배치하며, 중첩되는 부분을 더할 수 있다. 예르 들어, 서버는 도 2b에 도시된 바와 같이, 제1 중간 데이터로부터 우측으로 세 칸 이격하여 제2 중간 데이터(23 1)를 배치하고, 제1 중간 데이터로부터 하측으로 세 컨 이격하여 제3 중간 데이터를 배치할 수 있다. 이러한 방법으로 서버는 복수의 중간 데이터를 중첩하여 배치할 수 있다. 여기서 인접한 중간 데이터 간 좌우측 또는 상하측으로 이격되는 거리는 모두 동일할 수 있다. 도 2c는 도 2b와 같은 방법으로 중첩한 경우, 각 영역의 중첩 횟수를 나타낸다. 설명의 편의를 위하여 일부 영 역의 중첩 횟수는 생략하였다. 도 2c의 중첩 영역 중 9 × 9의 가운데 영역은 업스케일링된 데이터로서 사용되며, 업스케일링 대상 영역 은 입력 데이터에서 3 × 3의 정가운데 영역일 수 있다. 즉, 입력 데이터에서 3 × 3의 정가운데 영 역이 업스케일링 대상 데이터이고, 업스케일링 대상 데이터를 둘러싸는 엘리먼트를 패딩(padding) 동작에 의한 것으로 보면, 입력 데이터에서 3 × 3의 정가운데 영역은 도 2a 내지 도 2c의 과정을 통해 9 × 9의 가운 데 영역로 업스케일링된 것으로 볼 수 있다. 그리고, 입력 데이터에서 3 × 3의 정가운데 영역에서 첫 번째 엘리먼트는 9 × 9의 가운데 영역 에서 좌측 상단의 3 × 3의 서브 영역으로 업스케일링될 수 있다. 이러한 방법으로 입력 데이터(21 0)에서 3 × 3의 정가운데 영역에 포함된 엘리먼트는 각각 3 × 3의 서브 영역으로 업스케일링되며, 각 서브 영 역은 대응되는 엘리먼트의 위치에 따라 9 × 9의 가운데 영역에 배치될 수 있다. 또한, 9개의 서브 영역 각각은 엘리먼트의 위치에 따라 연산 횟수가 모두 동일할 수 있다. 구체적으로, 좌측 상 단 서브 영역의 첫 번째 로우 및 첫 번째 컬럼은 중첩 횟수가 4이며, 나머지 서브 영역의 첫 번째 로우 및 첫 번째 컬럼 역시 중첩 횟수는 4이다. 또한, 좌측 상단 서브 영역의 첫 번째 로우 및 첫 번째 컬럼을 생 성하기 위한 제1 커널 데이터의 4개의 제1 커널 엘리먼트는 나머지 서브 영역의 첫 번째 로우 및 첫 번째 컬럼을 생성하기 위한 제1 커널 데이터의 4개의 제1 커널 엘리먼트와 모두 동일하다. 이때, 동일한 4개의 제1 커널 엘리먼트를 이용하나, 4개의 제1 커널 엘리먼트와 연산되는 입력 데이터의 엘리먼트의 위치에 따라 서 브 영역의 위치가 결정될 수 있다. 서버는 4개의 제1 커널 엘리먼트를 이용하여 복수의 제2 커널 데이터 중 하 나를 획득할 수 있다. 이상과 같이 각 서브 영역의 첫 번째 로우 및 두 번째 컬럼은 모두 중첩 횟수가 6이며, 6개의 동일한 커널 엘리 먼트가 이용될 수 있다. 서버는 6개의 제1 커널 엘리먼트를 이용하여 복수의 제2 커널 데이터 중 또다른 하나를 획득할 수 있다. 이러한 규칙성을 통해 서버는 제1 커널 데이터로부터 복수의 제2 커널 데이터를 획득할 수 있다. 서브 영역은 9 개의 엘리먼트를 포함하므로, 복수의 제2 커널 데이터 역시 9개일 수 있다. 또한, 서버는 복수의 제2 커널 데이터가 입력 데이터의 어느 영역과 연산되는지를 식별할 수 있으며, 이에 대하여는 도 4a 및 도 4b에서 설명한다. 도 3a 및 도 3b는 본 개시의 일 실시 예에 따른 제2 커널 데이터를 설명하기 위한 도면들이다. 서버는 도 2c에서 설명한 바와 같은 방법으로 서브 영역의 엘리먼트 별로 제2 커널 데이터를 생성할 수 있다. 구체적으로, 서버는 제1 커널 데이터에 포함된 복수의 제1 커널 엘리먼트를 복수의 그룹으로 분할하고, 복수의 그룹 각각이 기설정된 개수의 엘리먼트를 포함하도록 복수의 그룹 각각에 0을 추가하여 복수의 제2 커널 데이터 를 획득할 수 있다. 서브 영역의 엘리먼트는 총 9개이므로, 서버는 도 3a에 도시된 바와 같이, k0, k1, ..., k8 의 9개의 제2 커널 데이터를 생성할 수 있다. 예를 들어, 서버는 제1 커널 데이터가 7 × 7의 매트릭스 형태인 경우, 제1 커널 데이터에 포함된 49개의 제1 커널 엘리먼트를 4, 6, 4, 6, 9, 6, 4, 6, 4개의 9개의 그룹으로 구분할 수 있다. 그리고, 서버는 각 그룹이 9 개가 되도록 5, 3, 5, 3, 0, 3, 5, 3, 5개의 0을 9개의 그룹에 각각 추가할 수 있다. 여기서, 제2 커널 데이터는 매트릭스 형태이며, 서버는 복수의 그룹 각각에 포함된 적어도 하나의 제1 커널 엘 리먼트에 기초하여 대응되는 제2 커널 데이터에서 0이 추가될 위치를 결정할 수 있다. 도 3a에서 9개의 제2 커널 데이터에 포함된 숫자는 제1 커널 데이터에 포함된 제1 커널 엘리먼트를 나타낸 다. 예를 들어, k0의 제2 커널 데이터는 제1 커널 데이터에서 17, 20, 38, 41의 제1 커널 엘리먼트를 포함 하며, 나머지 영역은 0일 수 있다. 즉, 서버는 도 3b와 같이, 3 × 3의 매트릭스 형태로 k0의 제2 커널 데이터를 생성할 수 있다. 도 3a의 나머지 제2 커널 데이터 역시 동일하게 3 × 3의 매트릭스 형태로 생성될 수 있다. 도 4a 및 도 4b는 본 개시의 일 실시 예에 따른 입력 데이터와 업스케일링된 데이터의 관계에 따른 프로세서 의 동작을 설명하기 위한 도면들이다. 서버는 도 2b와 같이 복수의 중간 데이터를 중첩함에 따라 9 × 9의 가운데 영역에 포함된 엘리먼트가 각 각 어떤 연산을 통해 생성되었는지 식별할 수 있다. 예를 들어, 서버는 입력 데이터 중 제1 영역(410-1)이 k0의 제2 커널 데이터와 컨볼루션 연산되어 9 × 9 의 가운데 영역의 서브 영역에서 241-1의 엘리먼트가 획득됨을 식별할 수 있다. 여기서, 입력 데이터 중 제1 영역(410-1)과 k0의 제2 커널 데이터의 컨볼루션 연산은 하기와 같다. 1×a + 2×b + 3×c + 4×d + 5×e + 6×f + 7×g + 8×h + 9×i 이상의 수식은 컨볼루션 연산을 설명하기 위한 일반식이며, 실제로 k0의 제2 커널 데이터는 도 3b이므로, 이상 의 수식은 하기와 같이 나타낼 수 있다. ×a + ×b + 0×c + ×d + ×e + 0×f + 0×g + 0×h + 0×i = ×a + ×b + ×d + ×e 또한, 서버는 입력 데이터 중 제1 영역(410-1)이 k1의 제2 커널 데이터와 컨볼루션 연산되어 9 × 9의 가 운데 영역의 서브 영역에서 241-1의 엘리먼트의 우측 엘리먼트가 획득됨을 식별할 수 있다. 그리고, 서버는 입력 데이터 중 제1 영역(410-1)이 k8의 제2 커널 데이터와 컨볼루션 연산되어 9 × 9의 가운데 영 역의 서브 영역에서 우측 하단의 엘리먼트가 획득됨을 식별할 수 있다. 즉, 서버는 입력 데이터의 일 영역과 복수의 제2 커널 데이터 각각의 컨볼루션 연산에 따라 하나의 서브 영역을 획득할 수 있음을 식별할 수 있다. 그리고, 서버는 입력 데이터의 일 영역이 변경됨에 따라 9 × 9의 가운데 영역에서 다른 서브 영역이 획득 됨을 식별할 수 있다. 예를 들어, 서버는 도 4b에 도시된 바와 같이, 입력 데이터 중 제2 영역(410-2)과 복수의 제2 커널 데이터 각각의 컨볼루션 연산에 따라 서브 영역이 획득되고, 입력 데이터 중 제9 영역(410-9)과 복수의 제2 커널 데이터 각각의 컨볼루션 연산에 따라 서브 영역이 획득됨을 식별할 수 있다.여기서, 입력 데이터는 총 9개의 3 × 3의 영역이 있을 수 있고, 그에 따라 서브 영역 역시 9개 획득될 수 있다. 이상과 같은 방법으로 서버는 입력 데이터 및 제1 커널 데이터로부터 9 × 9의 가운데 영역을 도출하기 위한 방법을 획득할 수 있다. 전자 장치는 서버로부터 업스케일링 방법을 수신하고, 스토리지에 업스케일링 방법을 저장할 수 있다. 또는, 업스케일링 방법은 하드웨어적으로 프로세서의 일부 구성으로서 구현될 수도 있고, 프로세서 내부의 라인 메모리에 저장되어 있을 수도 있다. 그리고, 프로세서는 업스케일링 방법에 따라 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션 연산 하여 입력 데이터의 일부가 제1 커널 데이터에 의해 업스케일링된 데이터를 획득할 수 있다. 구체적으로, 프로세서는 도 4a 및 도 4b와 같이 입력 데이터의 일 영역과 복수의 제2 커널 데이터를 컨볼루션 연산하여 입력 데이터가 업스케일링된 데이터인 9 × 9의 가운데 영역을 획득할 수 있다.한 편, 도 2a 내지 도 4b에서는 제1 커널 데이터가 7 × 7의 매트릭스 형태인 경우에 제2 커널 데이터가 3 × 3의 매트릭스 형태로 획득되는 실시 예를 설명하였다. 또한, 도 2a 내지 도 4b에서는 가우시안 필터의 결과물로부터 제2 커널 데이터를 획득하는 방법을 설명하였다. 도 5a 내지 7c에서는 제1 커널 데이터로부터 복수의 제2 커널 데이터를 획득하는 좀더 일반적인 방법에 대하여 설명한다. 도 5는 본 개시의 일 실시 예에 따른 제2 커널 데이터의 크기를 식별하는 방법을 설명하기 위한 도면이다. 먼저, k × k의 매트릭스 형태인 제1 커널 데이터 및 업스케일링 배수(r)는 사용자에 의해 입력되는 것으로 가 정한다. 도 5의 F0, F1, F2는 하나의 픽셀을 의미하며, 업스케일링 대상이 되는 픽셀일 수 있다. 도 5는 제1 커널 데이 터에 의해 F0, F1, F2가 배수(r)만큼 업스케일링된 데이터(521, 522, 523)를 나타낸다. 여기서, 제1 커널 데이터가 영향을 주는 픽셀과의 관계가 제2 커널 데이터의 크기일 수 있다. 도 5에서 F2 픽셀을 기준으로 F1까지 영향을 주는 제2 커널 데이터는 3 × 3의 매트릭스 형태일 수 있고, 이때 제1 커널 데 이터는 r/2에서 r+r/2의 범위 내에 있어야 한다. 즉, 제1 커널 데이터의 크기는 하기와 같이 나타낼 수 있다. r < k <=3r 또한, 도 5에서 F2 픽셀을 기준으로 F0까지 영향을 주는 제2 커널 데이터는 5 × 5의 매트릭스 형태일 수 있고, 이때 제1 커널 데이터는 r+r/2에서 2r+r/2의 범위 내에 있어야 한다. 즉, 제1 커널 데이터의 크기는 하기와 같이 나타낼 수 있다. 3r < k <=5r 동일한 방법으로, 제2 커널 데이터는 7 × 7의 매트릭스 형태인 경우라면, 제1 커널 데이터의 크기는 하기 와 같다. 5r < k <=7r 즉, 사용자가 제1 커널 데이터 및 업스케일링 배수(r)를 입력하면, 서버는제1 커널 데이터의 크기 및 업스케일 링 배수(r)에 기초하여 제2 커널 데이터의 크기를 획득할 수 있다. 예를 들어, 사용자가 7 × 7의 매트릭스 형태인 제1 커널 데이터와 업스케일링 배수 3을 입력하면, 위의 식 중 첫 번째 식을 만족하며(3 < 7 <=9), 제2 커널 데이터의 크기는 3 × 3일 수 있다. 또는, 사용자가 7 × 7의 매 트릭스 형태인 제1 커널 데이터와 업스케일링 배수 2를 입력하면, 위의 식 중 두 번째 식을 만족하며(6 < 7 <=10), 제2 커널 데이터의 크기는 5 × 5일 수 있다. 도 6a 내지 도 6c는 본 개시의 일 실시 예에 따른 복수의 제2 커널 데이터를 획득하는 방법을 설명하기 위한 도 면들이다. 먼저, 도 6a의 좌측과 같이 5 × 5의 매트릭스 형태인 제1 커널 데이터 및 업스케일링 배수 2를 가정 한다. 서버는 도 6a에 도시된 바와 같이, 제1 커널 데이터를 확장할 수 있다. 구체적으로, 서버는 제2 커널 데이터의 크기 및 업스케일링 배수(r)에 기초하여 제1 커널 데이터를 확장할 수 있다. 여기서, 제2 커널 데이터의 크기는 도 5에서 설명한 바와 같이 획득할 수 있으며, 도 5의 첫 번째 식에 따라(2 < 5 <= 6), 제2 커널 데이터의 크기는 3 × 3일 수 있다. 서버는 제2 커널 데이터의 크기 및 업스케일링 배수를 곱하여 제1 커널 데이터의 크기를 결정할 수 있다. 예를 들어, 서버는 제2 커널 데이터의 크기 3 및 업스케일링 배수 2를 곱하여 제1 커널 데이터의 크기를 6 × 6으로 결정할 수 있다. 이 경우, 서버는 5 × 5의 제1 커널 데이터의 우측 및 하단을 제로 패딩하여 6 × 6의 확장된 제1 커널 데이터 를 획득할 수 있다. 다만, 이에 한정되는 것은 아니며, 서버는 5 × 5의 제1 커널 데이터의 좌측 및 상단을 제 로 패딩하여 6 × 6의 확장된 제1 커널 데이터를 획득할 수도 있다. 이하에서는 설명의 편의를 위하여 제1 커널 데이터의 우측 및 하단을 제로 패딩하는 것으로 설명한다. 그리고, 서버는 도 6b에 도시된 바와 같이, 업스케일링 배수(r)의 간격으로 이격된 복수의 제1 커널 엘리먼트에 기초하여 복수의 제2 커널 데이터 각각으로 획득할 수 있다. 예를 들어, 서버는 제1 커널 데이터의 1, 3, 5, 11, 13, 15, 21, 23, 25에 기초하여 제2 커널 데이터 중 k0를 획득할 수 있다. 그리고, 서버는 제1 커널 데이터의 2, 4, 12, 14, 22, 24에 기초하여 제2 커널 데이터 중 k1을 획득할 수 있다. 서버는 3 × 3의 제2 커널 데이터를 획득하기 위해 0을 추가할 수 있다. 이때, 복수의 제2 커 널 데이터 각각은 제1 커널 엘리먼트에 포함된 복수의 제1 커널 엘리먼트 중 서로 다른 제1 커널 엘리먼트를 포 함할 수 있다. 즉, 서버는 복수의 제2 커널 데이터 각각을 (i, j)(i 및 j는, 각각 업스케일링의 배수(r) 이하의 자연수)의 2차 원 정보로 식별하며, 제1 커널 데이터의 크기 및 배수(r)에 기초하여 제2 커널 데이터의 크기를 식별하고, 제2 커널 데이터의 크기 및 배수(r)에 기초하여 제1 커널 데이터를 확장하며, 확장된 제1 커널 데이터에서 (r × a + i)의 로우 및 (r × b + j)의 컬럼에 위치한 제1 커널 엘리먼트에 기초하여 복수의 제2 커널 데이터 중 (i, j)의 제2 커널 데이터를 획득할 수 있다. 여기서, a 및 b는, 각각 0 이상의 자연수일 수 있다. 그리고, 서버는 도 6c에 도시된 바와 같이, 제1 커널 엘리먼트의 배치를 변경하여 복수의 제2 커널 엘리먼트 각 각을 획득할 수 있다. 즉, 서버는 제로 패딩에 의해 0을 포함하는 확장된 제1 커널 데이터에서 (r × a + i)의 로우 및 (r × b + j)의 컬럼에 위치한 제1 커널 엘리먼트를 순차적으로 배치하고, 배치 순서를 변경하여 복수 의 제2 커널 엘리먼트 각각을 획득할 수 있다. 예를 들어, 서버는 제1 커널 데이터의 1, 3, 5; 11, 13, 15; 21, 23, 25를 25, 23, 21; 15, 13, 11; 5, 3, 1로 배치를 변경하여 제2 커널 데이터 중 k0를 획득할 수 있다. 도 7a 내지 도 7c는 본 개시의 다른 실시 예에 따른 복수의 제2 커널 데이터를 획득하는 방법을 설명하기 위한 도면들이다. 먼저, 도 7a의 좌측과 같이 7 × 7의 매트릭스 형태인 제1 커널 데이터 및 업스케일링 배수 3을 가 정한다. 서버는 도 7a에 도시된 바와 같이, 제1 커널 데이터를 확장할 수 있다. 구체적으로, 서버는 제2 커널 데이터의 크기 및 업스케일링 배수(r)에 기초하여 제1 커널 데이터를 확장할 수 있다. 여기서, 제2 커널 데이터의 크기는 도 5에서 설명한 바와 같이 획득할 수 있으며, 도 5의 첫 번째 식에 따라(3 < 7 <= 9), 제2 커널 데이터의 크기 는 3 × 3일 수 있다. 서버는 제2 커널 데이터의 크기 및 업스케일링 배수를 곱하여 제1 커널 데이터의 크기를 결정할 수 있다. 예를 들어, 서버는 제2 커널 데이터의 크기 3 및 업스케일링 배수 3를 곱하여 제1 커널 데이터의 크기를 9 × 9로 결 정할 수 있다. 이 경우, 서버는 7 × 7의 제1 커널 데이터의 상하좌우를 제로 패딩하여 9 × 9의 확장된 제1 커널 데이터를 획 득할 수 있다. 그리고, 서버는 도 7b에 도시된 바와 같이, 업스케일링 배수(r)의 간격으로 이격된 복수의 제1 커널 엘리먼트에 기초하여 복수의 제2 커널 데이터 각각으로 획득할 수 있다. 예를 들어, 서버는 제1 커널 데이터의 17, 20, 38, 41에 기초하여 제2 커널 데이터 중 k0를 획득할 수 있다. 그 리고, 서버는 제1 커널 데이터의 15, 18,21, 36, 39, 42에 기초하여 제2 커널 데이터 중 k1을 획득할 수 있다. 이때, 복수의 제2 커널 데이터 각각은 제1 커널 엘리먼트에 포함된 복수의 제1 커널 엘리먼트 중 서로 다른 제1 커널 엘리먼트를 포함할 수 있다. 즉, 서버는 복수의 제2 커널 데이터 각각을 (i, j)(i 및 j는, 각각 업스케일링의 배수(r) 이하의 자연수)의 2차 원 정보로 식별하며, 제1 커널 데이터의 크기 및 배수(r)에 기초하여 제2 커널 데이터의 크기를 식별하고, 제2 커널 데이터의 크기 및 배수(r)에 기초하여 제1 커널 데이터를 확장하며, 확장된 제1 커널 데이터에서 (r × a + i)의 로우 및 (r × b + j)의 컬럼에 위치한 제1 커널 엘리먼트에 기초하여 복수의 제2 커널 데이터 중 (i, j)의 제2 커널 데이터를 획득할 수 있다. 여기서, a 및 b는, 각각 0 이상의 자연수일 수 있다. 그리고, 서버는 도 7c에 도시된 바와 같이, 제1 커널 엘리먼트의 배치를 변경하여 복수의 제2 커널 엘리먼트 각 각을 획득할 수 있다. 즉, 서버는 제로 패딩에 의해 0을 포함하는 확장된 제1 커널 데이터에서 (r × a + i)의 로우 및 (r × b + j)의 컬럼에 위치한 제1 커널 엘리먼트를 순차적으로 배치하고, 배치 순서를 변경하여 복수 의 제2 커널 엘리먼트 각각을 획득할 수 있다. 이상과 같은 방법을 통해 서버는 제1 커널 데이터 및 업스케일링 배수(r)가 변경되더라도 복수의 제2 커널 데이 터를 획득할 수 있다. 한편, 도 2a 내지 도 7c에서는 서버가 제1 커널 데이터로부터 복수의 제2 커널 데이터를 획득하는 것으로 설명 하였으나, 이에 한정되는 것은 아니다. 예를 들어, 전자 장치는 서버로부터 제1 커널 데이터를 수신하고, 프로세서가 도 2a 내지 도 7c와 같은 방법을 통해 제1 커널 데이터로부터 복수의 제2 커널 데이터를 획득 할 수도 있다. 도 8은 본 개시의 일 실시 예에 따른 프로세서의 내부 구조를 설명하기 위한 도면이다. 도 8에 도시된 바와 같이, 프로세서는 컨볼루션 어레이, 라인 메모리(line memory, 122) 및 셔플러 를 포함할 수 있다. 도 8에 도시된 구성 중 도 1과 중복되는 구성에 대한 설명은 생략한다. 컨볼루션 어레이는 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션 연산하는 구성일 수 있다. 여기서, 컨볼루션 어레이는 입력 데이터 및 복수의 제2 커널 데이터 각각을 스토리지로부 터 수신할 수 있다. 여기서, 스토리지는 입력 데이터 및 제1 커널 데이터를 저장하고, 프로세서 는 현재 싸이클에서 필요한 제2 커널 엘리먼트에 대응되는 제1 커널 엘리먼트를 스토리지로부터 독출 하여 컨볼루션 어레이로 제공할 수 있다. 또는, 프로세서는 스토리지에 저장된 제1 커널 데이터를 복수의 제2 커널 데이터로 변환하고, 변환된 복수의 제2 커널 데이터를 스토리지에 저장할 수 있다. 이 경우, 컨볼루션 어레이는 스토리지 에 저장된 복수의 제2 커널 데이터로부터 현재 싸이클에 필요한 제2 커널 엘리먼트를 스토리지로부터 수신할 수도 있다. 또는, 컨볼루션 어레이는 입력 데이터 및 현재 싸이클에 필요한 제2 커널 엘리먼트를 라인 메모리 로부터 수신할 수도 있다. 이 경우, 라인 메모리는 스토리지로부터 입력 데이터 및 제1 커 널 데이터를 수신하여 저장한 상태일 수 있다. 또는, 라인 메모리는 스토리지로부터 입력 데이 터 및 복수의 제2 커널 데이터를 수신하여 저장한 상태일 수도 있다. 컨볼루션 어레이는 컨볼루션 연산 결과를 누적하여 저장하며, 이에 대하여는 도 9에서 설명한다. 라인 메모리는 업스케일링 데이터를 저장할 수 있다. 또한, 라인 메모리는 입력 데이터 및 복수 의 제2 커널 데이터를 저장할 수도 있다. 셔플러는 컨볼루션 어레이 및 라인 메모리 사이에 배치될 수 있다. 그리고, 셔플러는 컨볼 루션 어레이로부터 출력되는 연산 결과를 셔플하여 라인 메모리로 제공할 수 있다. 이에 대한 구체적 인 설명은 도 11a 내지 도 11d에서 설명한다. 도 9는 본 개시의 일 실시 예에 따른 컨볼루션 어레이를 설명하기 위한 도면이다. 컨볼루션 어레이는 도 9에 도시된 바와 같이, 각각이 복수의 레지스터 파일(register file)을 포함하는 복 수의 연산 소자(Processing Element)를 포함할 수 있다. 연산 소자 각각은 기본적으로 곱셈기(multiplier) 및 산술 논리 연산 장치(Arithmetic Logic Unit, ALU)를 포 함하며, ALU는 적어도 하나 이상의 가산기(adder)를 포함할 수 있다. 연산 소자는 곱셈기 및 ALU를 이용하여 사 칙 연산을 수행할 수 있다. 다만, 이에 한정되는 것은 아니며, 사칙 연산 및 시프트 등과 같은 기능을 수행할 수 있다면 얼마든지 다른 구조로 형성될 수도 있다. 연산 소자 각각은 복수의 레지스터 파일을 포함할 수 있다. 예를 들어, 연산 소자 각각은 도 9에 도시된 바와 같이, 9개의 레지스터 파일을 포함할 수 있다. 연산 소자 각각은 특정 싸이클에서의 연산 결과를 복수의 레지스터 파일 중 하나에 저장할 수 있다. 또한, 연산 소자 각각은 특정 싸이클에서의 연산 결과를 인접한 연산 소자로 시프트하고, 인접한 연산 소자로부터 시프트된 연산 결과를 저장하기 위한 별도의 레지스터를 포함할 수도 있다. 복수의 연산 소자 각각은 복수의 제2 커널 데이터 중 복수의 연산 소자에 입력된 제2 커널 엘리먼트를 이용하여 곱셈 연산을 수행하고, 복수의 레지스터 파일 중 제2 커널 엘리먼트에 대응되는 레지스터 파일에 연산 결과를 누적하여 저장할 수 있다. 예를 들어, 복수의 연산 소자는 도 2의 5 × 5의 입력 데이터 중 첫 번째 로우에 있는 5개의 엘리먼트를 각각 입력받을 수 있다. 그리고, 복수의 연산 소자는 복수의 제2 커널 데이터 중 하나에서 제2 커널 엘리먼트를 순차적으로 입력받아 컨볼루션 연산을 수행할 수 있다. 이때, 복수의 연산 소자 각각은 연산에 이용된 제2 커널 엘리먼트에 대응되는 레지스터 파일에 연산 결과를 저 장할 수 있다. 예를 들어, 복수의 연산 소자 각각에 포함된 9개의 복수의 레지스터 파일은 k0 부터 k8의 제2 커 널 데이터 각각에 대응되며, k0의 제2 커널 데이터에 포함된 제2 커널 엘리먼트가 연산에 이용된 경우, 복수의 연산 소자 각각은 k0의 제2 커널 데이터에 대응되는 레지스터 파일에 연산 결과를 저장할 수 있다. 이러한 방법 을 통해, k0가 아닌 다른 제2 커널 데이터에 포함된 제2 커널 엘리먼트가 연산에 이용되더라도 연산 결과가 섞 이는 문제를 방지할 수 있다. 그 밖의 도 8과 같은 1D 컨볼루션 어레이의 컨볼루션 연산 방법은 잘 알려진 기술이므로 구체적인 설명은 생략한다. 다만, 복수의 연산 소자 각각에 포함된 복수의 레지스터 파일의 개수는 일 실시 예에 불과하며, 얼마 든지 다른 개수로 구비될 수 있다. 한편, 컨볼루션 어레이는 복수의 연산 소자를 통해 병렬 연산을 수행하고, 그에 따라 출력되는 데이터의 순서를 조정해줄 필요가 있다. 도 10a 및 도 10b는 본 개시의 일 실시 예에 따른 출력 데이터의 셔플 방법을 설명하기 위한 도면들이다. 먼저, 복수의 연산 소자는 도 10a의 상단에 도시된 바와 같이, k0의 제2 커널 데이터에 의한 병렬 연산 결과 5 개를 출력할 수 있다. 그리고, 복수의 연산 소자는 도 10a의 하단에 도시된 바와 같이, k1의 제2 커널 데이터에 의한 병렬 연산 결과 5개를 출력할 수 있다. 여기서, 도 10a에 도시된 첫 번째 싸이클은 하나의 제2 커널 데이 터에 의한 컨볼루션 연산이 완료되기까지의 싸이클을 의미한다. 상술한 바와 같이, 병렬 연산에 따라 k0의 제2 커널 데이터에 의한 병렬 연산 결과 5개가 출력되고, 그대로 라 인 메모리에 저장하는 경우 업스케일링에 오류가 발생할 수 있다. 따라서, 병렬 연산에 따른 출력 데이터가 도 10b에 도시된 바와 같은 순서로 라인 메모리에 저장될 필요가 있으며, 이러한 셔플 동작은 셔플러에 의해 수행될 수 있다. 도 10b는 프로세서가 한번에 처리하는 병렬 연산의 크기가 6인 경우를 가정한 도면이다. 도 11a 내지 도 11d는 본 개시의 일 실시 예에 따른 셔플 동작을 설명하기 위한 도면들이다. 도 11a에 도시된 바와 같이, 셔플러는 복수의 버퍼 세트 및 복수의 연산 소자에 포함된 서로 대응되 는 레지스터 파일로부터 출력되는 복수의 연산 결과를 수신하고, 복수의 연산 결과를 복수의 버퍼 세트로 출력 하는 FIFO 메모리를 포함할 수 있다. 복수의 버퍼 세트는 복수의 연산 결과 각각을 복수의 버퍼 세트 각각의 대응되는 버퍼에 저장할 수 있다. 예를 들어, 복수의 버퍼 세트는 도 11a에 도시된 바와 같이, 각 세트의 첫 번째 버퍼에 복수의 연산 결과를 각각 저 장할 수 있다. 그리고, 복수의 버퍼 세트는 도 11b에 도시된 바와 같이, 각 세트의 두 번째 버퍼에 복수의 연산 결과를 각각 저장할 수 있다. 그리고, 복수의 버퍼 세트는 도 11c에 도시된 바와 같이, 각 세트의 세 번째 버퍼 에 복수의 연산 결과를 각각 저장할 수 있다. 복수의 버퍼 세트는 복수의 버퍼 세트에 포함된 모든 버퍼에 연산 결과가 저장되면, 기설정된 순서로 복수의 버 퍼 세트 중 하나의 버퍼 세트에 저장된 복수의 연산 결과를 라인 메모리로 제공할 수 있다. 예를 들어, 복수의 버퍼 세트는 도 11c에 도시된 바와 같이, 복수의 버퍼 세트 중 가장 상단에 위치한 버퍼 세 트에 저장된 데이터 전체를 라인 메모리로 출력할 수 있다. 그리고, 복수의 버퍼 세트는 도 11d에도시된 바와 같이, 복수의 버퍼 세트 중 가운데에 위치한 버퍼 세트에 저장된 데이터 전체를 라인 메모리 로 출력할 수 있다. 이상과 같은 방식을 통해 셔플러는 컨볼루션 어레이로부터 출력되는 데이터를 셔플하여 라인 메모리 로 제공할 수 있다. 도 12는 본 개시의 일 실시 예에 따른 전자 시스템의 동작을 설명하기 위한 도면이다. 전자 시스템은 전자 장치 및 서버를 포함한다. 먼저, 서버는 제1 커널 데이터에 포함된 복수의 제1 커널 엘리먼트 중 서로 다른 제1 커널 엘리먼트를 포 함하는 복수의 제2 커널 데이터를 획득할 수 있다. 구체적으로, 서버는 제1 커널 데이터의 크기 및 업스케 일링의 배수(r)에 기초하여 제1 커널 데이터를 확장하며, 확장된 제1 커널 데이터에서 배수(r)의 간격으로 이격 된 복수의 제1 커널 엘리먼트에 기초하여 복수의 제2 커널 데이터 각각을 획득할 수 있다. 전자 장치는 서버로부터 제2 커널 데이터를 수신하고, 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션(convolution) 연산하여 입력 데이터의 일부가 제1 커널 데이터에 의해 업스케일링(upscaling)된 데이 터를 획득할 수 있다. 도 13은 본 개시의 일 실시 예에 따른 전자 장치의 제어 방법을 설명하기 위한 흐름도이다. 먼저, 제1 커널 데이터로부터 획득된 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션(convolution) 연 산한다(S1310). 그리고, 컨볼루션 연산에 기초하여 입력 데이터의 일부가 제1 커널 데이터에 의해 업스케일링 (upscaling)된 데이터를 획득한다(S1320). 여기서, 복수의 제2 커널 데이터 각각은 제1 커널 데이터의 크기 및 업스케일링의 배수(r)에 기초하여 제1 커널 데이터가 확장되며, 확장된 제1 커널 데이터에서 배수(r)의 간격으로 이격된 복수의 제1 커널 엘리먼트에 기초 하여 획득될 수 있다. 한편, 서버로부터 복수의 제2 커널 데이터를 수신하는 단계를 더 포함할 수 있다. 또는, 서버로부터 제1 커널 데이터를 수신하는 단계 및 제1 커널 데이터로부터 복수의 제2 커널 데이터를 획득 하는 단계를 더 포함할 수 있다. 한편, 업스케일링된 데이터를 획득하는 단계(S1320)는 복수의 제2 커널 데이터 각각을, 입력 데이터의 일부에 포함된 업스케일링 대상 엘리먼트 및 업스케일링 대상 엘리먼트를 둘러싸는 복수의 주변 엘리먼트와 컨볼루션 연산하여 업스케일링 대상 엘리먼트에 대한 복수의 업스케일링 엘리먼트를 획득하고, 업스케일링 대상 엘리먼트 및 복수의 주변 엘리먼트의 개수는 복수의 제2 커널 데이터 각각에 포함된 복수의 제2 엘리먼트의 개수와 동일 할 수 있다. 여기서, 업스케일링된 데이터를 획득하는 단계(S1320)는 입력 데이터에 대한 업스케일링 대상 엘리먼트의 위치 에 기초하여 업스케일링된 데이터에 대한 복수의 업스케일링 엘리먼트의 위치를 결정할 수 있다. 한편, 업스케일링된 데이터를 획득하는 단계(S1320)는 컨볼루션 어레이를 통해 복수의 제2 커널 데이터 각각을 입력 데이터와 컨볼루션 연산을 수행하는 단계 및 업스케일링된 데이터를 라인 메모리(line memory)에 저장하는 단계를 포함할 수 있다. 여기서, 컨볼루션 어레이는 각각이 복수의 레지스터 파일(register file)을 포함하는 복수의 연산 소자 (Processing Element)를 포함하고, 컨볼루션 연산하는 단계(S1310)는 복수의 연산 소자 각각을 통해 복수의 제2 커널 데이터 중 복수의 연산 소자에 입력된 제2 커널 엘리먼트를 이용하여 곱셈 연산을 수행하는 단계 및 복수 의 레지스터 파일 중 제2 커널 엘리먼트에 대응되는 레지스터 파일에 연산 결과를 누적하여 저장하는 단계를 포 함할 수 있다. 그리고, 컨볼루션 어레이 및 라인 메모리 사이에 배치되는 셔플러(shuffler)를 통해 복수의 연산 소자로부터 출 력되는 복수의 연산 결과를 셔플하여 라인 메모리로 제공하는 단계를 더 포함할 수 있다. 여기서, 라인 메모리로 제공하는 단계는 FIFO 메모리가 복수의 연산 소자에 포함된 서로 대응되는 레지스터 파 일로부터 출력되는 복수의 연산 결과를 수신하고, 복수의 연산 결과를 복수의 버퍼 세트로 출력하는 단계, 복수 의 연산 결과 각각을 복수의 버퍼 세트 각각의 대응되는 버퍼에 저장하는 단계 및 복수의 버퍼 세트에 포함된 모든 버퍼에 연산 결과가 저장되면, 기설정된 순서로 복수의 버퍼 세트 중 하나의 버퍼 세트에 저장된 복수의연산 결과를 라인 메모리로 제공하는 단계를 포함할 수 있다. 이상과 같은 본 개시의 다양한 실시 예에 따르면, 전자 장치는 컨볼루션 어레이를 통해 업스케일링 연산을 수행 함에 따라 업스케일링 연산을 수행하기 위한 별도의 하드웨어를 제거하여 하드웨어의 면적을 최소화할 수 있다. 한편, 이상에서는 가우시안 커널 데이터(gaussian kernel data)를 제1 커널 데이터로서 설명하였으나, 가우시안 커널 데이터가 아닌 경우에도 동일한 방법으로 업스케일링을 수행할 수 있다. 예를 들어, 프로세서는 업스케일 링 방법으로서 Bilinear, subpixel shuffle, transposed convolution 등을 이용할 수 있으며, 이 경우에도 이 상과 같이 컨볼루션 연산으로 업스케일링을 수행할 수 있다. 가령, Transposed convolution을 이용할 경우에는 이상과 같은 방법을 z 방향으로 확장하여 컨볼루션 연산으로 업스케일링을 수행할 수 있다. 한편, 본 개시의 일시 예에 따르면, 이상에서 설명된 다양한 실시 예들은 기기(machine)(예: 컴퓨터)로 읽을 수 있는 저장 매체(machine-readable storage media)에 저장된 명령어를 포함하는 소프트웨어로 구현될 수 있다. 기기는, 저장 매체로부터 저장된 명령어를 호출하고, 호출된 명령어에 따라 동작이 가능한 장치로서, 개시된 실 시 예들에 따른 전자 장치(예: 전자 장치(A))를 포함할 수 있다. 명령이 프로세서에 의해 실행될 경우, 프로세 서가 직접, 또는 프로세서의 제어 하에 다른 구성요소들을 이용하여 명령에 해당하는 기능을 수행할 수 있다. 명령은 컴파일러 또는 인터프리터에 의해 생성 또는 실행되는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저 장매체는, 비일시적(non-transitory) 저장매체의 형태로 제공될 수 있다. 여기서, '비일시적'은 저장매체가 신 호(signal)를 포함하지 않으며 실재(tangible)한다는 것을 의미할 뿐 데이터가 저장매체에 반영구적 또는 임시 적으로 저장됨을 구분하지 않는다. 또한, 본 개시의 일 실시 예에 따르면, 이상에서 설명된 다양한 실시 예들에 따른 방법은 컴퓨터 프로그램 제품 (computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory (CD-ROM))의 형태로, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 온라인으로 배포될 수 있 다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 또한, 본 개시의 일 실시 예에 따르면, 이상에서 설명된 다양한 실시 예들은 소프트웨어(software), 하드웨어 (hardware) 또는 이들의 조합을 이용하여 컴퓨터(computer) 또는 이와 유사한 장치로 읽을 수 있는 기록 매체 내에서 구현될 수 있다. 일부 경우에 있어 본 명세서에서 설명되는 실시 예들이 프로세서 자체로 구현될 수 있 다. 소프트웨어적인 구현에 의하면, 본 명세서에서 설명되는 절차 및 기능과 같은 실시 예들은 별도의 소프트웨 어 모듈들로 구현될 수 있다. 소프트웨어 모듈들 각각은 본 명세서에서 설명되는 하나 이상의 기능 및 동작을 수행할 수 있다. 한편, 상술한 다양한 실시 예들에 따른 기기의 프로세싱 동작을 수행하기 위한 컴퓨터 명령어(computer instructions)는 비일시적 컴퓨터 판독 가능 매체(non-transitory computer-readable medium)에 저장될 수 있 다. 이러한 비일시적 컴퓨터 판독 가능 매체에 저장된 컴퓨터 명령어는 특정 기기의 프로세서에 의해 실행되었 을 때 상술한 다양한 실시 예에 따른 기기에서의 처리 동작을 특정 기기가 수행하도록 한다. 비일시적 컴퓨터 판독 가능 매체란 레지스터, 캐쉬, 메모리 등과 같이 짧은 순간 동안 데이터를 저장하는 매체가 아니라 반영구 적으로 데이터를 저장하며, 기기에 의해 판독(reading)이 가능한 매체를 의미한다. 비일시적 컴퓨터 판독 가능 매체의 구체적인 예로는, CD, DVD, 하드 디스크, 블루레이 디스크, USB, 메모리카드, ROM 등이 있을 수 있다. 또한, 상술한 다양한 실시 예들에 따른 구성 요소(예: 모듈 또는 프로그램) 각각은 단수 또는 복수의 개체로 구 성될 수 있으며, 전술한 해당 서브 구성 요소들 중 일부 서브 구성 요소가 생략되거나, 또는 다른 서브 구성 요 소가 다양한 실시 예에 더 포함될 수 있다. 대체적으로 또는 추가적으로, 일부 구성 요소들(예: 모듈 또는 프로 그램)은 하나의 개체로 통합되어, 통합되기 이전의 각각의 해당 구성 요소에 의해 수행되는 기능을 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따른, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작 들은 순차적, 병렬적, 반복적 또는 휴리스틱하게 실행되거나, 적어도 일부 동작이 다른 순서로 실행되거나, 생 략되거나, 또는 다른 동작이 추가될 수 있다. 이상에서는 본 개시의 바람직한 실시 예에 대하여 도시하고 설명하였지만, 본 개시는 상술한 특정의 실시 예에"}
{"patent_id": "10-2018-0120298", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "한정되지 아니하며, 청구범위에서 청구하는 본 개시의 요지를 벗어남이 없이 당해 개시에 속하는 기술분야에서 통상의 지식을 가진 자에 의해 다양한 변형실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 개시의 기술 적 사상이나 전망으로부터 개별적으로 이해되어져서는 안될 것이다.부호의 설명 100 : 전자 장치 110 : 스토리지 120 : 프로세서 121 : 컨볼루션 어레이 122 : 라인 메모리 123 : 셔플러"}
{"patent_id": "10-2018-0120298", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시 예에 따른 전자 장치의 구성을 나타내는 블럭도이다. 도 2a 내지 도 2c는 본 개시의 일 실시 예에 따른 복수의 제2 커널 데이터의 획득 방법을 설명하기 위한 도면들 이다. 도 3a 및 도 3b는 본 개시의 일 실시 예에 따른 제2 커널 데이터를 설명하기 위한 도면들이다. 도 4a 및 도 4b는 본 개시의 일 실시 예에 따른 입력 데이터와 업스케일링된 데이터의 관계에 따른 프로세서 의 동작을 설명하기 위한 도면들이다. 도 5는 본 개시의 일 실시 예에 따른 제2 커널 데이터의 크기를 식별하는 방법을 설명하기 위한 도면이다. 도 6a 내지 도 6c는 본 개시의 일 실시 예에 따른 복수의 제2 커널 데이터를 획득하는 방법을 설명하기 위한 도 면들이다. 도 7a 내지 도 7c는 본 개시의 다른 실시 예에 따른 복수의 제2 커널 데이터를 획득하는 방법을 설명하기 위한 도면들이다. 도 8은 본 개시의 일 실시 예에 따른 프로세서의 내부 구조를 설명하기 위한 도면이다. 도 9는 본 개시의 일 실시 예에 따른 컨볼루션 어레이를 설명하기 위한 도면이다. 도 10a 및 도 10b는 본 개시의 일 실시 예에 따른 출력 데이터의 셔플 방법을 설명하기 위한 도면들이다. 도 11a 내지 도 11d는 본 개시의 일 실시 예에 따른 셔플 동작을 설명하기 위한 도면들이다. 도 12는 본 개시의 일 실시 예에 따른 전자 시스템의 동작을 설명하기 위한 도면이다. 도 13은 본 개시의 일 실시 예에 따른 전자 장치의 제어 방법을 설명하기 위한 흐름도이다."}
