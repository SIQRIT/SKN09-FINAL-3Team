{"patent_id": "10-2021-0101346", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0019619", "출원번호": "10-2021-0101346", "발명의 명칭": "어플리케이션 최적화 방법 및 이를 지원하는 장치", "출원인": "삼성전자주식회사", "발명자": "권병수"}}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에서의 어플리케이션 최적화 방법에 있어서,상기 전자 장치의 유휴 상태가 지속된 시간에 관하여 설정된 조건이 만족되었는지 여부를 판단하는 동작;상기 설정된 조건이 만족된 경우, 상기 전자 장치의 사용자의 어플리케이션 사용 기록에 기초하여 어플리케이션최적화를 수행할 어플리케이션을 선택하는 동작; 및상기 선택된 어플리케이션에 대해 백그라운드에서 상기 어플리케이션 최적화를 수행하여 최적화된 어플리케이션을 생성하는 동작을 포함하는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 선택하는 동작은,상기 설정된 조건이 만족되는 경우, 상기 사용자의 상기 어플리케이션 사용 기록에 기초하여 우선 순위가 할당된 후보 어플리케이션들의 리스트를 생성하는 동작;상기 리스트에서 상기 우선 순위에 따라 적어도 하나의 후보 어플리케이션에 대해 최적화 가능 여부를 판단하는동작; 및상기 판단의 결과에 기초하여 최적화가 가능한 적어도 하나의 후보 어플리케이션 중에서 상기 우선 순위가 가장높은 후보 어플리케이션을 상기 어플리케이션 최적화를 수행할 어플리케이션으로 선택하는 동작을 포함하는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 리스트를 생성하는 동작은,설정된 기간 동안의 어플리케이션들에 대한 사용 시간에 기초하여 상기 우선 순위가 할당된 상기 후보 어플리케이션들의 리스트를 생성하는 동작을 포함하는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,상기 최적화 가능 여부를 판단하는 동작은,상기 적어도 하나의 후보 어플리케이션이 최적화되었는지 여부를 확인하는 동작;상기 적어도 하나의 후보 어플리케이션이 최적화되지 않은 경우, 상기 적어도 하나의 후보 어플리케이션에서 최적화할 메소드가 있는지 여부를 판단하는 동작; 및상기 최적화할 메소드가 있는 경우 상기 적어도 하나의 후보 어플리케이션에 대해 상기 최적화가 가능한 것으로판단하는 동작을 포함하는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2023-0019619-3-제1항에 있어서,상기 전자 장치의 상기 유휴 상태가 설정된 시간 동안 유지된 경우에 상기 설정된 조건이 만족되는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 전자 장치의 상기 유휴 상태가 설정된 시간 동안 유지되고 상기 전자 장치의 전체 어플리케이션에 대한 어플리케이션 최적화가 수행된 이력이 없는 경우에 상기 설정된 조건이 만족되는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,최적화된 어플리케이션을 생성하는 동작이 수행되는 도중 상기 전자 장치가 상기 유휴 상태에서 벗어난 경우,상기 전자 장치의 프로세서 어피니티(processor affinity)를 동적으로 조정하는 동작을 더 포함하는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,최적화가 가능한 모든 어플리케이션들에 대해 최적화가 완료된 경우, 상기 방법은 상기 전자 장치의 펌웨어 업데이트 이후에 다시 수행되는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제5항에 있어서,상기 전자 장치의 사용 기록에 기초하여 상기 유휴 상태가 지속될 시간을 예측하는 동작; 및상기 최적화된 어플리케이션을 생성하는데 소요되는 시간을 추정하는 동작을 더 포함하고,상기 최적화된 어플리케이션을 생성하는 동작은,상기 예측된 시간이 상기 추정된 시간보다 긴 경우에 수행되는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 판단하는 동작, 상기 선택하는 동작 및 상기 생성하는 동작은 주기적으로 수행되는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제4항에 있어서,상기 생성하는 동작은,컴파일러 필터를 설정하는 동작;상기 설정된 컴파일러 필터에 기반하여 상기 최적화할 메소드에 대해 컴파일을 수행하는 동작을 포함하는, 방법."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항 내지 제11항 중 어느 한 항의 방법을 실행하는 컴퓨터 프로그램을 저장하는 컴퓨터 판독가능 기록매체."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "전자 장치에 있어서,공개특허 10-2023-0019619-4-적어도 하나의 프로세서; 및상기 프로세서에 의해 실행될 인스트럭션들(instructions) 및 어플리케이션을 저장하는 적어도 하나의 메모리를포함하고,상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상기 프로세서로 하여금,상기 전자 장치의 유휴 상태가 지속된 시간에 관하여 설정된 조건이 만족되었는지 여부를 판단하는 동작;상기 설정된 조건이 만족된 경우, 상기 전자 장치의 사용자의 어플리케이션 사용 기록에 기초하여 어플리케이션최적화를 수행할 어플리케이션을 선택하는 동작; 및상기 선택된 어플리케이션에 대해 백그라운드에서 상기 어플리케이션 최적화를 수행하여 최적화된 어플리케이션을 생성하는 동작을 실행하도록 구성되는, 전자 장치."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 선택하는 동작은,상기 설정된 조건이 만족되는 경우, 상기 사용자의 상기 어플리케이션 사용 기록에 기초하여 우선 순위가 할당된 후보 어플리케이션들의 리스트를 생성하는 동작;상기 리스트에서 상기 우선 순위에 따라 적어도 하나의 후보 어플리케이션에 대해 최적화 가능 여부를 판단하는동작; 및상기 판단의 결과에 기초하여 최적화가 가능한 적어도 하나의 후보 어플리케이션 중에서 상기 우선 순위가 가장높은 후보 어플리케이션을 상기 어플리케이션 최적화를 수행할 어플리케이션으로 선택하는 동작을 포함하는, 전자 장치."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 리스트를 생성하는 동작은,설정된 기간 동안의 어플리케이션들에 대한 사용 시간에 기초하여 상기 우선 순위가 할당된 상기 후보 어플리케이션들의 리스트를 생성하는 동작을 포함하는, 전자 장치."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에 있어서,상기 최적화 가능 여부를 판단하는 동작은,상기 적어도 하나의 후보 어플리케이션이 최적화되었는지 여부를 확인하는 동작;상기 적어도 하나의 후보 어플리케이션이 최적화되지 않은 경우, 상기 적어도 하나의 후보 어플리케이션에서 최적화할 메소드가 있는지 여부를 판단하는 동작; 및상기 최적화할 메소드가 있는 경우 상기 적어도 하나의 후보 어플리케이션에 대해 상기 최적화가 가능한 것으로판단하는 동작을 포함하는, 전자 장치."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제13항에 있어서,공개특허 10-2023-0019619-5-상기 전자 장치의 상기 유휴 상태가 설정된 시간 동안 유지된 경우에 상기 설정된 조건이 만족되는, 전자 장치."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제13항에 있어서,상기 전자 장치의 상기 유휴 상태가 설정된 시간 동안 유지되고 상기 전자 장치의 전체 어플리케이션에 대한 어플리케이션 최적화가 수행된 이력이 없는 경우에 상기 설정된 조건이 만족되는, 전자 장치."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제13항에 있어서,상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상기 프로세서로 하여금,최적화된 어플리케이션을 생성하는 동작이 수행되는 도중 상기 전자 장치가 상기 유휴 상태에서 벗어난 경우,상기 전자 장치의 프로세서 어피니티(processor affinity)를 동적으로 조정하는 동작을 더 실행하도록 구성되는, 전자 장치."}
{"patent_id": "10-2021-0101346", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제17항에 있어서,상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상기 프로세서로 하여금,상기 전자 장치의 사용 기록에 기초하여 상기 유휴 상태가 지속될 시간을 예측하는 동작; 및상기 최적화된 어플리케이션을 생성하는데 소요되는 시간을 추정하는 동작을 더 실행하도록 구성되고,상기 최적화된 어플리케이션을 생성하는 동작은,상기 예측된 시간이 상기 추정된 시간보다 긴 경우에 수행되는, 전자 장치."}
{"patent_id": "10-2021-0101346", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "어플리케이션 최적화 방법 및 이를 지원하는 전자 장치가 개시된다. 일 실시예에 따른 어플리케이션 최적화 방 법은 전자 장치의 유휴 상태가 지속된 시간에 관하여 설정된 조건이 만족되었는지 여부를 판단하는 동작, 설정된 조건이 만족된 경우, 전자 장치의 사용자의 어플리케이션 사용 기록에 기초하여 어플리케이션 최적화를 수행할 어플리케이션을 선택하는 동작, 및 선택된 어플리케이션에 대해 백그라운드에서 어플리케이션 최적화를 수행하여 최적화된 어플리케이션을 생성하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0101346", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명의 다양한 실시예들은 어플리케이션 최적화 기술에 관한 것이다."}
{"patent_id": "10-2021-0101346", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "컴퓨팅 시스템의 발전으로 인해, 스마트 폰과 같은 전자 장치에서 동작하는 다수의 어플리케이션 프로그램(이하, 어플리케이션이라 한다)들이 생산되고 있다. 이러한 어플리케이션들은 특정 목적을 달성하기 위한 복수의 코드(code)들로 구성될 수 있고, 패키지화되어 배포될 수 있다. 어플리케이션이 전자 장치에 설치 될 때, 프로그래밍 언어로 작성된 상기 코드들은 전자 장치가 지원하는 플랫폼에 맞춰 변환될 수 있고, 변환된 코드들은 상기 특정 목적을 달성하기 위한 명령어 집합으로서 사용될 수 있다. 예를 들어, 안드로이드 운영체 제가 적용된 전자 장치에서, 상기 어플리케이션의 코드들은 런타임(runtime) 환경에 맞게 컴파일(compile)되어 실행 코드(native code)들로 변환될 수 있다. 코드들을 컴파일하는 방식에는 AOT(ahead-of-time) 방식, JIT(just-in-time) 방식 또는 상기 AOT 방식과 상기 JIT 방식을 혼합한 하이브리드(hybrid) 방식이 사용되고 있 다."}
{"patent_id": "10-2021-0101346", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "OTA(over the air) 방식을 통해 펌웨어를 업데이트할 때나 공장 초기화(factory reset)를 통한 설정 값 초기화 시에, 어플리케이션의 컴파일러 필터는 특정 값으로 설정되어 어플리케이션의 실행을 포함하여 어플리케이션의 전반적인 성능이 저하된 상태가 될 수 있다. 또한, 상기 하이브리드 방식에서는, 특정 조건(예: 충전 상태, 유 휴(idle) 상태, 또는 하루 한번과 같은 지정된 시간이 도래한 상태)이 만족할 때 어플리케이션의 코드들이 컴파일될 수 있기 때문에, 어플리케이션에 대한 성능 향상을 위해서는 상기 특정 조건이 만족할 때까지 기다릴 수밖 에 없었다. 본 발명의 다양한 실시예들은, 사용자의 어플리케이션의 사용 패턴에 기초하여 최적화할 어플리케이션을 선택하 고 코드들을 컴파일함으로써 어플리케이션 단위로 최적화를 수행할 수 있는 방법 및 이를 지원하는 장치를 제공 할 수 있다."}
{"patent_id": "10-2021-0101346", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 어플리케이션 최적화 방법은 상기 전자 장치의 유휴 상태가 지속된 시간에 관하여 설정 된 조건이 만족되었는지 여부를 판단하는 동작, 상기 설정된 조건이 만족된 경우, 상기 전자 장치의 사용 자의 어플리케이션 사용 기록에 기초하여 어플리케이션 최적화를 수행할 어플리케이션을 선택하는 동작, 및 상 기 선택된 어플리케이션에 대해 백그라운드에서 상기 어플리케이션 최적화를 수행하여 최적화된 어플리케이션을 생성하는 동작을 포함할 수 있다. 일 실시예에 따른 어플리케이션 최적화 방법을 지원하는 전자 장치는 적어도 하나의 프로세서, 및 상 기 프로세서에 의해 실행될 인스트럭션들(instructions) 및 어플리케이션을 저장하는 적어도 하나의 메모 리를 포함하고, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상기 프로세서로 하여 금, 상기 전자 장치의 유휴 상태가 지속된 시간에 관하여 설정된 조건이 만족되었는지 여부를 판단하는 동 작, 상기 설정된 조건이 만족된 경우, 상기 전자 장치의 사용자의 어플리케이션 사용 기록에 기초하여 어 플리케이션 최적화를 수행할 어플리케이션을 선택하는 동작, 및 상기 선택된 어플리케이션에 대해 백그라운드에 서 상기 어플리케이션 최적화를 수행하여 최적화된 어플리케이션을 생성하는 동작을 실행하도록 구성될 수 있다."}
{"patent_id": "10-2021-0101346", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 다양한 실시예들에 따르면, 어플리케이션 단위로 최적화를 수행함으로써 전자 장치의 유휴 시간이 짧 더라도 어플리케이션 최적화를 수행할 수 있다. 본 발명의 다양한 실시예들은, 사용자의 어플리케이션의 사용 패턴에 기초하여 최적화할 어플리케이션을 선택하 고 어플리케이션 최적화를 수행하여 많이 사용하는 어플리케이션을 우선적으로 최적화할 수 있다."}
{"patent_id": "10-2021-0101346", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 도 1은 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장치와 통신하거나, 또는 제2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제1 네트워크(예: 블 루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워크) 또는 제2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통 신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제1 네트워크 또는 제2 네트워크와 같은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제1 네트워크 또는 제2 네트워크와 같은 통신 네 트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제1 면(예: 아래 면)에 또는 그에 인접하여 배치 되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제2 네트워크에 연결된 서버를 통해서 전자 장치와 외 부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가 적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상 기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전 자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제 공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용 한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제2 네트워크 내 에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2은 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 일실시예에 따르면, 프로그램은 전자 장치의 하나 이상의 리소스들을 제어하기 위한 운영 체제, 미들웨어, 또는 상기 운영 체제 에서 실행 가능한 어플리케이션을 포함할 수 있다. 운영 체제는, 예를 들면, AndroidTM, iOSTM,WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 프로그램 중 적어도 일부 프로그램은, 예를 들면, 제조 시에 전자 장치에 프리로드되거나, 또는 사용자에 의해 사용 시 외부 전자 장치(예: 전자 장치 (102 또는 104), 또는 서버)로부터 다운로드되거나 갱신될 수 있다. 운영 체제는 전자 장치의 하나 이상의 시스템 리소스들(예: 프로세스, 메모리, 또는 전원)의 관리(예: 할당 또는 회수)를 제어할 수 있다. 운영 체제는, 추가적으로 또는 대체적으로, 전자 장치 의 다른 하드웨어 디바이스, 예를 들면, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 구동하기 위한 하나 이상의 드라이 버 프로그램들을 포함할 수 있다. 미들웨어는 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보가 어플리케이션 에 의해 사용될 수 있도록 다양한 기능들을 어플리케이션으로 제공할 수 있다. 미들웨어는, 예를 들 면, 어플리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매니 저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니저, 로케이션 매니저, 그래픽 매니저, 시큐리티 매니저, 통화 매니저, 또는 음성 인식 매니저 를 포함할 수 있다. 어플리케이션 매니저는, 예를 들면, 어플리케이션의 생명 주기를 관리할 수 있다. 윈도우 매니저 는, 예를 들면, 화면에서 사용되는 하나 이상의 GUI 자원들을 관리할 수 있다. 멀티미디어 매니저는, 예를 들면, 미디어 파일들의 재생에 필요한 하나 이상의 포맷들을 파악하고, 그 중 선택된 해당하는 포맷에 맞 는 코덱을 이용하여 상기 미디어 파일들 중 해당하는 미디어 파일의 인코딩 또는 디코딩을 수행할 수 있다. 리 소스 매니저는, 예를 들면, 어플리케이션의 소스 코드 또는 메모리의 메모리의 공간을 관리할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량, 온도 또는 전원을 관리하고, 이 중 해당 정보를 이용하여 전자 장치의 동작에 필요한 관련 정보를 결정 또는 제공할 수 있다. 일실시예에 따르면, 파워 매 니저는 전자 장치의 바이오스(BIOS: basic input/output system)(미도시)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 어플리케이션에 의해 사용될 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 패키지 매니저는, 예를 들면, 패키지 파일의 형태로 배포되는 어플리케이션의 설치 또는 갱신을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 전자 장치와 외부 전자 장치 간의 무선 연 결 또는 직접 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 지정된 이벤트(예: 착신 통화, 메시지, 또는 알람)의 발생을 사용자에게 알리기 위한 기능을 제공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치의 위치 정보를 관리할 수 있다. 그래픽 매니저는, 예를 들면, 사용자에게 제공될 하 나 이상의 그래픽 효과들 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 시큐리티 매니저는, 예를 들면, 시스템 보안 또는 사용자 인증을 제공할 수 있다. 통화(telephony) 매니저 는, 예를 들면, 전자 장치에 의해 제공되는 음성 통화 기능 또는 영상 통화 기능을 관리할 수 있다. 음성 인식 매니저는, 예를 들면, 사용자의 음성 데이터를 서버로 전송하고, 그 음성 데이터에 적어도 일부 기반하여 전자 장치에서 수행될 기능에 대응하는 명령어(command), 또는 그 음성 데이터에 적어도 일 부 기반하여 변환된 문자 데이터를 서버로부터 수신할 수 있다. 일 실시예에 따르면, 미들웨어는 동 적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. 일 실시예에 따르면, 미들웨 어의 적어도 일부는 운영 체제의 일부로 포함되거나, 또는 운영 체제와는 다른 별도의 소프트웨 어로 구현될 수 있다. 어플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브라우 저, 카메라, 알람, 컨택트, 음성 인식, 이메일, 달력, 미디어 플레이어 , 앨범, 와치, 헬스(예: 운동량 또는 혈당과 같은 생체 정보를 측정), 또는 환경 정보 (예: 기압, 습도, 또는 온도 정보 측정) 어플리케이션을 포함할 수 있다. 일실시예에 따르면, 어플리케이 션은 전자 장치와 외부 전자 장치 사이의 정보 교환을 지원할 수 있는 정보 교환 어플리케이션(미도 시)을 더 포함할 수 있다. 정보 교환 어플리케이션은, 예를 들면, 외부 전자 장치로 지정된 정보 (예: 통화, 메 시지, 또는 알람)를 전달하도록 설정된 노티피케이션 릴레이 어플리케이션, 또는 외부 전자 장치를 관리하도록 설정된 장치 관리 어플리케이션을 포함할 수 있다. 노티피케이션 릴레이 어플리케이션은, 예를 들면, 전자 장치 의 다른 어플리케이션(예: 이메일 어플리케이션)에서 발생된 지정된 이벤트(예: 메일 수신)에 대응하 는 알림 정보를 외부 전자 장치로 전달할 수 있다. 추가적으로 또는 대체적으로, 노티피케이션 릴레이 어플리케이션은 외부 전자 장치로부터 알림 정보를 수신하여 전자 장치의 사용자에게 제공할 수 있다. 장치 관리 어플리케이션은, 예를 들면, 전자 장치와 통신하는 외부 전자 장치 또는 그 일부 구성 요소(예: 외부 전자장치의 디스플레이 모듈 또는 카메라 모듈)의 전원(예: 턴-온 또는 턴-오프) 또는 기능(예: 밝기, 해 상도, 또는 포커스)을 제어할 수 있다. 장치 관리 어플리케이션은, 추가적으로 또는 대체적으로, 외부 전자 장 치에서 동작하는 어플리케이션의 설치, 삭제, 또는 갱신을 지원할 수 있다. 도 3은 일 실시예에 따른 어플리케이션 최적화 방법을 지원하는 전자 장치의 구성을 설명하기 위한 블록도이고, 도 4는 일 실시예에 따른 어플리케이션의 컴파일러 필터를 설명하기 위한 도면이다. 도 3을 참조하면, 일 실시예에 따른 전자 장치(예: 도 1의 전자 장치)는 프로세서(예: 도 1의 프로세서) 및 메모리(예: 도 1의 메모리)를 포함하고 어플리케이션 최적화 방법을 지원할 수 있 다. 메모리는 전자 장치의 프로세서에 의해 사용되는 다양한 데이터를 저장할 수 있다. 데이 터는 예를 들어 소프트웨어(예: 프로그램(예: 도 1의 프로그램)) 및, 이와 관련된 명령에 대한 입력 데이 터 또는 출력 데이터를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제(예: 도 1의 운영체제 ), 미들 웨어(예: 도 1의 미들 웨어) 또는 어플리케이션(예: 도 1의 어플리케이션)을 포함할 수 있다. 어플리케이션은 특정 목적을 달성하기 위한 복수의 코드(code)들로 구성될 수 있고, 패키지화되어 배포될 수 있 다. 어플리케이션이 전자 장치에 설치될 때, 프로그래밍 언어로 작성된 코드들은 전자 장치가 지원 하는 플랫폼에 맞춰 변환될 수 있고, 변환된 코드들은 특정 목적을 달성하기 위한 명령어 집합으로서 사용될 수 있다. 예를 들어, 안드로이드 운영체제가 적용된 전자 장치에서, 프로세서는 어플리케이션의 코드들을 런타 임(runtime) 환경에 맞게 컴파일(compile)하여 실행 코드(native code)들로 변환할 수 있다. 코드들을 컴파일 하는 방식에는 AOT(ahead-of-time) 방식, JIT(just-in-time) 방식 또는 AOT 방식과 JIT 방식을 혼합한 하이브 리드(hybrid) 방식이 사용될 수 있다. AOT 방식은 어플리케이션을 설치하는 시점에 코드들을 컴파일하여 실행 코드들로 변환하여 저장한 뒤, 어플리케 이션의 실행 시점에 변환된 실행 코드들을 직접 읽어 들이는 방식이다. AOT 방식에서는 어플리케이션의 설치 시에 이미 코드들이 실행 코드들로 변환되기 때문에, 어플리케이션을 실행시키는 시간이 단축될 수 있으나, 어 플리케이션의 설치 시간이 많이 소요되며 어플리케이션의 설치를 위한 저장 공간도 많이 요구될 수 있다. JIT 방식은 어플리케이션을 실행할 때 코드들 중 필요한 코드만을 적절한 시점에 컴파일하는 방식이다. JIT 방 식에서는, 코드들 중 로드(load)된 클래스에 대해 인터프리터(interpreter) 방식으로 동작 하다가 반복 수행을 감지하면, 적절하게 JIT 컴파일러가 동작하여 실행 속도를 향상시킬 수 있다. JIT 방식은 실행 코드를 실행하 는 시간이 매우 빠르고, 기본적으로 메모리에 캐시가 이루어지기 때문에 클래스의 반복 호출 시 성능이 극 대화될 수 있다. 그러나, JIT 방식에서는, 런타임 중에 코드들이 실행 코드들로 컴파일되기 때문에 어플리케이 션의 설치 시간은 단축되나 어플리케이션의 실행 시간이 많이 소요될 수 있다. 또한, 메모리에 캐시된 코 드들이 해제되었을 때, 코드들에 대한 재수행이 감지되면 코드들을 재변환하는 시간이 소요되기 때문에, 어플리 케이션의 동작에 지연이 발생할 수도 있다. 하이브리드 방식은, 어플리케이션의 설치 시에는 JIT 방식을 사용하여 어플리케이션의 설치 시간을 단축하고 어 플리케이션의 설치 공간을 줄일 수 있으며, 인터프리터를 통해 사용자의 어플리케이션 사용 패턴에 따른 프로파 일을 저장한 후, 특정 조건이 부합될 때 AOT 데몬(daemon)이 시작되어 백그라운드에서 어플리케이션을 컴파일하 여 실행 코드들을 생성하고, 어플리케이션의 실행 시에는 실행 코드를 바로 사용함으로써, 실행 시간을 단축할 수 있다. 안드로이드 운영 체제가 적용된 전자 장치에서는, 안드로이드 런타임(android runtime)(이하 ART라 한다) 이라고 하는 실행 환경이 지원될 수 있다. ART는 하이브리드 방식을 사용할 수 있다. ART에서는 어플리케이션 의 덱스(dex(dalvik executable)) 파일(코드들의 집합)을 컴파일하기 위해 dex2oat라는 툴(tool)을 사용하는데, 이때 동작하는 방식은 컴파일러 필터(compiler filter)의 설정 값에 의해 지정될 수 있고, 컴 파일러 필터는 사용자의 어플리케이션 사용 패턴에 따른 프로파일에 기반하여 설정될 수 있다. ART에서는 설정된 컴파일러 필터에 따라 어플리케이션의 코드들이 컴파일될 수 있다.도 3에서, 일 실시예에 따른 전자 장치의 프로세서는 적어도 하나의 다른 구성요소를 제어할 수 있고, 다양한 데이터 처리 또는 연산을 수행할 수 있다. 전자 장치에서 AOT 데몬 및 ART는 메모리에 저장된 프로그램 또는 명령어 형태로 구현될 수 있다. 명령어는 프로세서에 의해 실행되고, 프로세서 는 명령어에 해당하는 기능을 수행할 수 있다. 프로세서는 AOT 데몬을 통해 어플리케이션의 패키지 형태인 apk 파일 내에 존재하는 dex 파일을 dex2oat 툴을 이용하여 컴파일할 수 있다. AOT 데몬을 통해 컴파일된 dex 파일은 oat 파일로 출력될 수 있다. oat 파 일은 컴파일 시 사용되는 컴파일러 필터에 따라 크기가 다를 수 있고, 어플리케이션의 성능 또한 다를 수 있다. 안드로이드 운영 체제가 적용된 전자 장치에서는 FOTA(firmware over the air) 방식으로 펌웨어 (firmware) 업데이트가 수행될 수 있다. 펌웨어를 업데이트할 때나 공장 초기화(factory reset)를 통한 설정 값 초기화 시에, 어플리케이션의 컴파일러 필터는 제1 옵션(예: verify)으로 설정되어 어플리케이션의 실 행을 포함하여 어플리케이션의 전반적인 성능이 저하된 상태가 될 수 있다. 또한, 하이브리드 방식에서는, 특 정 조건(예: 충전 상태, 유휴(idle) 상태, 또는 하루 한번과 같은 지정된 시간이 도래한 상태)이 만족할 때 어 플리케이션의 코드들이 컴파일될 수 있기 때문에, 어플리케이션에 대한 성능 향상을 위해서는 특정 조건이 만족 할 때까지 기다릴 수밖에 없었다. 일 실시예에 따른 전자 장치의 프로세서는 사용자의 어플리케이션의 사용 기록에 기초하여 최적화할 어플리케이션을 선택하고, 선택된 어플리케이션에 대한 프로파일에 기초하여 설정된 컴파일러 필터에 따라 백그라운드에서 선택된 어플리케이션의 코드들을 컴파일함으로써 어플리케이션 단위로 최적화를 수행할 수 있다. 컴파일러 필터는 도 4에 도시된 바와 같이, dex 파일(예: 어플리케이션의 코드들)을 컴파일하는 옵션을 포 함할 수 있다. 예를 들어, 컴파일러 필터가 \"verify\"로 설정되면, dex 파일의 코드 검증(code verification)만을 수행할 수 있고, 컴파일러 필터가 \"quicken\"으로 설정되면, dex 파일의 코드 검증을 수 행하고 일부 dex 명령어를 최적화할 수 있으며, 컴파일러 필터가 \"speed-profile\"로 설정되면, dex 파일의 코드 검증을 수행하고 프로파일 내의 메소드(method)를 AOT 컴파일하고, 컴파일러 필터가 \"speed\"로 설정 되면, dex 파일의 코드 검증을 수행하고 모든 메소드(method)들을 AOT 컴파일할 수 있다. 컴파일러 필터가 도 4에 도시된 표에서, 하단 방향(\"verify\"에서 \"speed\"로 향하는 방향)으로 갈수록, 컴 파일 결과인 oat 파일의 크기가 증가하는 반면 어플리케이션의 성능은 향상될 수 있다. 반대로, 컴파일러 필터 가 도 3에 도시된 표에서, 상단 방향(\"speed\"에서 \"verify\"로 향하는 방향)으로 갈수록, 컴파일 결과인 oat 파일의 크기가 감소하는 반면 어플리케이션의 성능은 저하될 수 있다. 전자 장치에서 어플리케이션 최적화는 어플리케이션 사용 패턴에 따른 프로파일에 기반하여 컴파일러 필터 를 설정하고, 설정된 컴파일러 필터에 따라 어플리케이션의 코드들을 컴파일함으로써 수행될 수 있다. 일 실시예에서, 프로세서는 어플리케이션 최적화를 수행할 어플리케이션을 선택하기 위해 사용자의 어플리 케이션 사용 기록에 기초하여 우선 순위가 할당된 후보 어플리케이션들의 리스트를 생성하고, 리스트의 우선 순 위에 따라 적어도 하나의 후보 애플리케이션에 대해 최적화 가능 여부를 판단할 수 있다. 프로세서는 ART를 통해 어플리케이션에 대한 최적화 가능 여부를 판단할 수 있다. 일 실시예에서, 프로세 서는 ART를 통해 사용자 패턴에 따른 프로파일에 기반하여 적어도 하나의 후보 어플리케이션에 대한 최적 화 가능 여부를 판단할 수 있다. 프로세서는 적어도 하나의 후보 어플리케이션의 프로파일에 기초하여 최 적화할 메소드가 있는지 여부를 판단하고, 최적화할 메소드가 있는 경우 적어도 하나의 후보 어플리케이션에 대 해 최적화 가능한 것으로 판단할 수 있다. 프로세서는 판단의 결과에 기초하여 최적화가 가능한 적어도 하나의 후보 어플리케이션 중에서 우선 순위 가 가장 높은 후보 어플리케이션을 어플리케이션 최적화를 수행할 어플리케이션으로 선택하고 어플리케이션 최 적화를 수행할 수 있다. 프로세서는 선택된 어플리케이션에 대한 컴파일러 필터를 제2 옵션(예: \"speed-profile\" 또는 \"speed\")으로 설정할 수 있다. 프로세서는 최적화를 수행할 어플리케이션으로 선택된 어플리케이션을 설 정된 컴파일러 필터에 따라 컴파일함으로써 어플리케이션 최적화를 수행할 수 있다. 어플리케이션 최적화를 수행하여 최적화된 어플리케이션이 생성될 수 있다. 일 실시예에 따른 전자 장치에 따르면, 프로세서는 어플리케이션 단위로 최적화를 수행함으로써 전자 장치의 유휴 시간이 모든 어플리케이션에 대한 최적화를 수행할 수 있을 정도로 길지 않더라도 어플리케이 션 별로 최적화를 수행할 수 있다. 일 실시예에 따른 전자 장치에 따르면, 사용자의 어플리케이션의 사용 기록에 기초하여 최적화할 어플리케이션을 선택하여 많이 사용하는 어플리케이션을 우선적으로 최적화할 수 있 다. 이하, 도 5를 참조하여 일 실시예 따른 전자 장치에서 수행되는 애플리케이션 최적화 방법을 설명한다. 도 5는 일 실시예에 따른 어플리케이션 최적화 방법을 설명하기 위한 도면이다. 안드로이드 운영 체제가 적용된 전자 장치에서, FOTA(firmware over the air) 방식으로 펌웨어(firmware) 업데이트가 수행될 수 있다. 펌웨어를 업데이트할 때나 공장 초기화(factory reset)를 통한 설정 값 초기화 시 에, 어플리케이션의 컴파일러 필터는 특정 값(예: verify)으로 설정되어 어플리케이션의 실행을 포함하여 어플리케이션의 전반적인 성능이 저하된 상태가 될 수 있고, 어플리케이션 성능 향상을 위해 어플리케이션 최적 화가 필요할 수 있다. 어플리케이션 최적화는 백그라운드에서 수행될 수 있고, 포그라운드(foreground)에서의 어플리케이션 동작에 미 치는 영향을 최소화하기 위해 전자 장치의 상태를 판단하고 설정된 조건이 충족되는 경우에 어플리케이션 최적화가 수행될 수 있다. 도 5를 참조하면, 동작에서, 전자 장치의 프로세서는 포그라운드에서의 어플리케이션 동작에 미 치는 영향을 최소화하기 위해 전자 장치의 상태가 설정된 조건을 만족하는지 여부를 판단할 수 있다. 일 실시예에서, 프로세서는 전자 장치의 유휴 상태가 설정된 시간 동안 유지된 경우 설정된 조건이 만족 된 것으로 판단할 수 있다. 예를 들어, 프로세서는 전자 장치의 디스플레이가 오프(off)된 경우 전자 장치가 유휴 상태에 있다고 판단할 수 있다. 프로세서는 전자 장치의 디스플레이가 오프되면, 설정된 시간이 경과하면 수행되는 작업을 생성할 수 있다. 작업은 동작들(515, 520, 525)을 포함할 수 있다. 다만, 이는 일 실시예일 뿐이며, 유휴 상태 진입 여부는 디스플레이 온, 오프와 관계없이 판단될 수 있으며, 설정된 조건은 유휴 상태가 지속된 시간에 관하여 설정된 조건일 수 있다. 프로세서는 설정된 조건이 만족되면, 동작에서, 어플리케이션 최적화가 수행될 수 있는 후보 어플리 케이션들의 리스트를 생성할 수 있다. 어플리케이션들의 리스트는 동작가 수행될 때마다 새롭게 생성되어 업데이트될 수 있다. 프로세서는 사용자의 어플리케이션 사용 기록에 기초하여 설정된 기간 동안 많이 사 용한 순서대로 순위가 할당된 후보 어플리케이션들의 리스트를 생성할 수 있다. 동작에서, 프로세서는 리스트에 포함된 후보 어플리케이션들 중 적어도 하나의 후보 어플리케이션에 대해 어플리케이션 최적화 가능 여부를 판단할 수 있다. 프로세서는 적어도 하나의 후보 어플리케이션에 대한 프로파일에 기초하여 해당 후보 어플리케이션에 최적화할 메소드가 있는지 여부를 파악하고 이에 기초하여 최적화 가능 여부를 결정할 수 있다. 프로세서는 최적화 가능 여부의 판단의 결과에 기초하여 어플리케이션 최적화를 수행할 수 있고 우선 순위 가 가장 높은 후보 어플리케이션을 선택할 수 있다. 동작에서, 프로세서는 선택된 어플리케이션에 대해 어플리케이션 최적화를 수행할 수 있다. 어플리 케이션 최적화는 어플리케이션 사용 패턴에 따른 프로파일에 기반하여 컴파일러 필터를 설정하고, 설정된 컴파일러 필터에 따라 어플리케이션의 코드들을 컴파일함으로써 수행될 수 있다. 선택된 후보 어플리케이션에 대한 어플리케이션 최적화가 완료되면, 프로세서는 전자 장치가 여전히 유휴 상태에 있는지 판단하고, 전자 장치가 유휴 상태에 있는 경우 어플리케이션 최적화를 위한 작업을 생 성하고, 후보 어플리케이션들의 리스트를 생성하고, 최적화 가능 여부를 판단하여 어플리케이션 최적화를 수행 하는 동작을 반복할 수 있다. 예를 들어, 작업은 동작들(515, 520, 525)을 포함할 수 있다. 전자 장치가 여전히 유휴 상태에 있어서 동작들(510, 515, 520, 525)이 반복되는 경우에는, 동작에서 설정된 시간의 경 과 여부를 판단하지 않고 동작로 진행할 수 있다. 일 실시예에서, 동작들(510, 515, 520, 525)은 주기적 으로 수행될 수 있다.이하, 도 6을 참조하여 일 실시예에 따른 어플리케이션 최적화 방법에 대해 자세히 설명한다. 도 6은 일 실시예에 따른 어플리케이션 최적화 방법의 흐름도이다. 일 실시예에 따른 어플리케이션 최적화 방 법에서, 전자 장치가 설정된 조건을 만족하는지 여부를 판단하고 조건이 만족되는 경우 어플리케이션 최적 화를 수행할 수 있다. 도 6을 참조하면, 설정된 조건은 전자 장치가 유휴 상태가 지속된 시간 및 전제 어플리케이션에 대한 어플 리케이션 최적화가 수행된 이력이 있는지에 대한 조건을 포함할 수 있다. 사용자가 전자 장치를 사용하지 않는 동안 어플리케이션 최적화를 수행하기 위해 전자 장치가 유휴 상태에 진입했는지 여부를 판단할 수 있고, 전체 어플리케이션에 대한 어플리케이션 최적화가 수행된 이력이 있다면 어플리케이션 최적화를 다시 수 행할 필요가 없으므로 이를 확인하기 위해 최적화가 수행된 이력에 관한 조건을 판단할 수 있다. 동작에서, 전자 장치는 유휴 상태에 진입할 수 있다. 동작에서, 일 실시예에 따른 전자 장치 의 프로세서는 설정된 조건 중 하나로서 전자 장치의 유휴 상태가 설정된 시간 동안 지속되었는 지 여부를 판단할 수 있다. 동작에서 전자 장치가 유휴 상태에 진입한 이후에 사용자가 다시 전자 장치를 사용하는 경우 설정된 시간 동안 유휴 상태가 유지되지 않을 수 있고, 이 경우 어플리케이션 최적 화를 수행하면 전자 장치의 성능에 영향을 줄 수 있으므로 이를 방지하기 위해 프로세서는 어플리케 이션 최적화를 수행하지 않을 수 있다. 동작에서, 일 실시예에 따른 전자 장치의 프로세서는 설정된 조건 중 다른 하나로서, 전제 어플 리케이션에 대한 최적화가 수행된 이력이 없는지 여부를 확인할 수 있다. 프로세서는 FOTA를 이용한 펌웨 어 업데이트 또는 전자 장치의 초기화 이후 전체 어플리케이션에 대한 최적화가 수행된 이력이 있는 경우, 이미 모든 어플리케이션에 대한 최적화가 완료된 것이므로 어플리케이션 최적화를 수행하지 않을 수 있다. 전자 장치의 유휴 상태가 설정된 시간 동안 지속되고 FOTA를 통한 펌웨어 업데이트 또는 전자 장치의 초기화 이후 전체 어플리케이션에 대한 최적화가 수행되지 않은 경우, 동작에서, 프로세서는 어플리 케이션 사용 기록에 기초하여 우선 순위가 할당된 후보 어플리케이션들의 리스트를 생성할 수 있다. 일 실시예에서, 후보 어플리케이션들에 할당된 우선 순위는 설정된 기간 동안의 어플리케이션 사용 시간에 기초 하여 할당될 수 있고, 설정된 기간 동안의 사용 시간이 길수록 할당된 우선 순위가 더 높을 수 있다. 다만, 이 는 일 실시예일 뿐이며 사용 기록에 기초한 다른 기준에 따라 우선 순위가 할당될 수 있다. 예를 들어, 설정된 기간 동안의 어플리케이션 사용 빈도가 높을수록 더 높은 우선 순위가 할당될 수 있다. 동작에서, 프로세서는 리스트의 적어도 하나의 후보 어플리케이션들에 대해 최적화 가능 여부를 판단 할 수 있다. 프로세서는 적어도 하나의 후보 어플리케이션에 대해, 해당 어플리케이션의 프로파일에 기초 하여 최적화 가능 여부를 판단할 수 있다. 이에 대해서는 도 7을 참조하여 아래에서 설명한다. 동작에서, 프로세서는 후보 어플리케이션들 중 최적화가 가능하고 우선 순위가 가장 높은 어플리케이 션을 선택할 수 있다. 동작에서, 프로세서는 선택된 어플리케이션에 대해 백그라운드에서 어플리케 이션 최적화를 수행할 수 있다. 이하, 도 7을 참조하여 동작 및 동작에 관하여 더 자세히 설명한다. 도 7은 일 실시예에 따른 어플리케이션 최적화 방법의 어플리케이션 최적화를 수행할 어플리케이션을 선택하는 동작을 설명하기 위한 흐름도이다. 도 7을 참조하면, 일 실시예에 따른 전자 장치의 프로세서는 후보 어플리케이션들 중 어플리케이션 최적화를 수행할 어플리케이션을 선택하기 위해 적어도 하나의 후보 어플리케이션에 대해 최적화 가능 여부를 판단할 수 있다. 동작에서, 프로세서는 동작에서 생성된 후보 어플리케이션의 리스트에서 가장 높은 우선 순위의 후보 어플리케이션을 선택할 수 있다. 동작에서, 프로세서는 선택된 후보 어플리케이션에 대해 FOTA 이후 어플리케이션 최적화가 수행되었는지 여부를 확인할 수 있다. 후보 어플리케이션에 대해 어플리케이션 최 적화가 수행되었는지 여부는 해당 후보 어플리케이션에 대한 컴파일러 필터를 통해 확인할 수 있다. 어플 리케이션 최적화가 수행되지 않은 경우 펌웨어 업데이트 시 컴파일러 필터가 초기화되어 제1 옵션(예: verify)로 설정되어 있을 수 있고, 어플리케이션 최적화가 수행된 경우 컴파일러 필터가 변경되어 제2 옵 션(예: \"speed-profile\" 또는 \"speed\")으로 설정되어 있을 수 있다. 프로세서는 컴파일러 필터가 제1 옵션으로 설정된 경우 어플리케이션 최적화가 수행된 적이 없는 것으로 판단하고, 컴파일러 필터가 제2 옵션으로 설정된 경우 어플리케이션 최적화가 수행된 적이 있는 것으로 판단할 수 있다. 프로세서는 동작에서 선택된 후보 어플리케이션이 최적화된 것으로 판단된 경우, 동작에서, 리 스트의 다음 우선 순위의 후보 어플리케이션을 선택하고 다시 동작에서 어플리케이션이 최적화되었는지 여 부를 확인할 수 있다. 동작에서 선택된 후보 어플리케이션에 대해 어플리케이션 최적화가 수행되지 않은 것으로 확인된 경우, 동 작에서, 프로세서는 선택된 후보 어플리케이션의 프로파일에 기초하여 최적화할 메소드가 존재하는지 여부를 판단할 수 있다. 프로파일은 자주 호출되는 메소드들에 대한 색인 정보를 포함할 수 있고, 프로세서 는 프로파일에 포함된 메소드들이 있는 경우 최적화할 메소드가 존재하는 것으로 판단할 수 있다. 동작에서 후보 어플리케이션에 최적화할 메소드가 존재하지 않는 것으로 판단된 경우, 동작에서, 프 로세서는 다음 우선 순위의 후보 어플리케이션을 선택하고, 동작 및 동작을 수행할 수 있다. 동작에서 후보 어플리케이션에 최적화할 메소드가 존재하는 것으로 판단된 경우, 동작에서, 프로세서 는 해당 후보 어플리케이션을 어플리케이션 최적화를 수행할 어플리케이션으로 선택할 수 있다. 프로세서는 동작에서 선택된 어플리케이션에 대해, 동작에서, 어플리케이션 최적화를 수행할 수 있다. 프로세서는 선택된 어플리케이션의 프로파일에 포함된 메소드들을 AOT 컴파일함으로써 어플리케이 션 최적화를 수행할 수 있다. 이 경우, 프로세서는 선택된 어플리케이션에 대한 컴파일러 필터를 제 2 옵션(예: \"speed-profile\" 또는 \"speed\")으로 설정하고 AOT 컴파일을 수행할 수 있다. 프로세서는 AOT 컴파일을 통해 최적화된 어플리케이션을 생성할 수 있다. 최적화된 어플리케이션은 제1 옵션(예: \"verify\")에 따라 컴파일된 어플리케이션보다 성능이 높을 수 있다. 모든 어플리케이션에 대해 어플리케이션 최적화가 수행된 경우, 일 실시예에 따른 어플리케이션 최적화 방법은 더 이상 수행되지 않을 수 있다. 모든 어플리케이션에 대해 어플리케이션 최적화가 수행된 이후에 전자 장치가 초기화 되거나 FOTA를 통해 펌웨어 업데이트가 수행된 경우, 일 실시예에 따른 어플리케이션 최적화 방법이 다 시 수행될 수 있다. 일 실시예에 따른 어플리케이션 최적화 방법은 어플리케이션 단위로 반복될 수 있으므로 전자 장치의 유휴 시간이 모든 어플리케이션에 대한 최적화를 수행할 수 있을 정도로 길지 않더라도 최소한 어플리케이션 별로 어 플리케이션 최적화가 수행됨을 보장할 수 있다. 일 실시예에 따른 전자 장치에 따르면, 사용자의 어플리 케이션의 사용 기록에 기초하여 최적화할 어플리케이션을 선택하여 많이 사용하는 어플리케이션을 우선적으로 최적화함으로써 사용자가 느끼는 전자 장치의 체감 성능을 향상시킬 수 있다. 다른 실시예에서, 프로세서는 전자 장치의 사용 기록에 기초하여 전자 장치의 유휴 상태가 지속될 시간을 예측 할 수 있다. 예를 들어, 전자 장치의 사용 기록은 사용자가 전자 장치의 디스플레이를 켜고 끈 시간, 실행한 어플리케이션과 같은 정보를 포함할 수 있다. 전자 장치는 사용 기록에 관한 통계에 기초하여 전자 장치의 유 휴 상태가 지속될 시간을 예측하거나 사용 기록에 대한 기계 학습을 통해 전자 장치의 유휴 상태가 지속될 시간 을 예측할 수 있다. 프로세서는 동작에서 선택된 어플리케이션에 대해 어플리케이션 최적화를 수행하여 최적화된 어플리케이션 을 생성하는 데 소요되는 시간을 추정할 수 있다. 소요 시간은, 예를 들어, 프로파일에 포함된 메소드들의 수 에 기초하여 추정될 수 있다. 프로세서는 추정된 소요 시간이 전자 장치의 유휴 상태가 지속될 것으로 예측된 시간보다 긴 경우에 동작 를 수행할 수 있다. 이하, 도 8을 참조하여 어플리케이션 최적화가 수행되는 도중 전자 장치가 유휴 상태에서 벗어나는 경우 사용자 불편을 최소화하기 위한 방법을 설명한다. 도 8은 일 실시예에 따른 어플리케이션 최적화 수행 중 전자 장치가 유휴 상태에서 벗어난 경우 프로세서 어피 니티(processor affinity)를 조정하는 동작을 설명하기 위한 흐름도이다. 일 실시예에 따른 어플리케이션 최적화 방법에 따라 동작 내지 동작가 수행되는 동안 전자 장치(30 0)가 유휴 상태에서 벗어날 수 있다. 예를 들어, 사용자가 전자 장치의 디스플레이를 온(on)하여 포그라 운드에서 어플리케이션을 실행할 수 있다. 일 실시예에 따른 전자 장치의 프로세서는 동작 내지 동작이 수행되는 도중 전자 장치 가 유휴 상태에서 벗어난 경우, 포그라운드에서 실행되는 어플리케이션의 성능 저하 방지를 위해 해당 동 작을 중단할 수 있다. 동작에서, 전자 장치는 동작의 어플리케이션 최적화가 수행되는 도중 유휴 상태에서 벗어날 수 있다. 동작의 어플리케이션 최적화는 AOT 컴파일 동작을 포함하므로 도중에 중단할 경우 추후 어플리케이 션의 실행 시 오류를 발생시킬 수 있다. 프로세서는 동작의 어플리케이션 최적화가 수행되는 도중 전자 장치가 유휴 상태에서 벗어난 경 우, 포그라운드에서 실행되는 어플리케이션의 성능에 미치는 영향을 최소화하기 위해, 동작에서, 어플리케 이션 최적화 동작에 대한 프로세서 어피니티(processor affinity)를 조정할 수 있다. 프로세서는 어플리 케이션 최적화가 수행되는 동안 전자 장치가 유휴 상태에 있는지 여부에 따라 어플리케이션 최적화 동작에 대한 프로세서 어피니티를 동적으로 조정할 수 있다. 예를 들어, 프로세서는 전력 소모가 상대적으로 많은 고성능 코어 프로세서(core processor) 및 전력 소모 가 상대적으로 적은 저성능 코어 프로세서를 포함할 수 있고, 프로세서는 어플리케이션 최적화가 수행되는 도중 전자 장치가 유휴 상태에서 벗어난 경우 어플리케이션 최적화 동작이 저성능 코어 프로세서에서 수행 되도록 프로세서 어피니티를 조정할 수 있다. 프로세서는 전자 장치가 다시 유휴 상태로 진입한 경 우, 어플리케이션 최적화 동작이 고성능 코어 프로세서에서 수행되도록 프로세서 어피니티를 조정할 수 있다. 일 실시예에 따른 어플리케이션 최적화 방법은 전자 장치의 유휴 상태가 지속된 시간에 관하여 설정된 조 건이 만족되었는지 여부를 판단하는 동작, 설정된 조건이 만족된 경우, 전자 장치의 사용자의 어플리케이 션 사용 기록에 기초하여 어플리케이션 최적화를 수행할 어플리케이션을 선택하는 동작, 및 선택된 어플리케이 션에 대해 백그라운드에서 어플리케이션 최적화를 수행하여 최적화된 어플리케이션을 생성하는 동작을 포함할 수 있다. 선택하는 동작은, 설정된 조건이 만족되는 경우, 사용자의 어플리케이션 사용 기록에 기초하여 우선 순위가 할 당된 후보 어플리케이션들의 리스트를 생성하는 동작, 리스트에서 우선 순위에 따라 적어도 하나의 후보 어플리 케이션에 대해 최적화 가능 여부를 판단하는 동작, 및 판단의 결과에 기초하여 최적화가 가능한 적어도 하나의 후보 어플리케이션 중에서 우선 순위가 가장 높은 후보 어플리케이션을 어플리케이션 최적화를 수행할 어플리케 이션으로 선택하는 동작을 포함할 수 있다. 리스트를 생성하는 동작은, 설정된 기간 동안의 어플리케이션들에 대한 사용 시간에 기초하여 우선 순위가 할당 된 후보 어플리케이션들의 리스트를 생성하는 동작을 포함할 수 있다. 최적화 가능 여부를 판단하는 동작은, 적어도 하나의 후보 어플리케이션이 최적화되었는지 여부를 확인하는 동 작, 적어도 하나의 후보 어플리케이션이 최적화되지 않은 경우, 적어도 하나의 후보 어플리케이션에서 최적화할 메소드가 있는지 여부를 판단하는 동작, 및 최적화할 메소드가 있는 경우 적어도 하나의 후보 어플리케이션에 대해 최적화가 가능한 것으로 판단하는 동작을 포함할 수 있다. 전자 장치의 유휴 상태가 설정된 시간 동안 유지된 경우에 설정된 조건이 만족될 수 있다. 전자 장치의 유휴 상태가 설정된 시간 동안 유지되고 전자 장치의 전체 어플리케이션에 대한 어플리 케이션 최적화가 수행된 이력이 없는 경우에 설정된 조건이 만족될 수 있다. 일 실시예에 따른 어플리케이션 최적화 방법은 최적화된 어플리케이션을 생성하는 동작이 수행되는 도중 전자 장치가 유휴 상태에서 벗어난 경우, 전자 장치의 프로세서 어피니티(processor affinity)를 동적으로 조정하는 동작을 더 포함할 수 있다. 최적화가 가능한 모든 어플리케이션들에 대해 최적화가 완료된 경우, 방법은 전자 장치의 펌웨어 업데이트 이후에 다시 수행될 수 있다. 일 실시예에 따른 어플리케이션 최적화 방법은 전자 장치의 사용 기록에 기초하여 유휴 상태가 지속될 시 간을 예측하는 동작, 및 최적화된 어플리케이션을 생성하는데 소요되는 시간을 추정하는 동작을 더 포함하고, 최적화된 어플리케이션을 생성하는 동작은, 예측된 시간이 추정된 시간보다 긴 경우에 수행될 수 있다. 판단하는 동작, 선택하는 동작 및 생성하는 동작은 주기적으로 수행될 수 있다. 생성하는 동작은, 컴파일러 필터를 설정하는 동작, 설정된 컴파일러 필터에 기반하여 최적화할 메소드에 대해 컴파일을 수행하는 동작을 포함할 수 있다.일 실시예에 따른 어플리케이션 최적화 방법을 지원하는 전자 장치는 적어도 하나의 프로세서, 및 프 로세서에 의해 실행될 인스트럭션들(instructions) 및 어플리케이션을 저장하는 적어도 하나의 메모리 를 포함하고, 인스트럭션들은, 프로세서에 의해 실행될 때, 프로세서로 하여금, 전자 장치(30 0)의 유휴 상태가 지속된 시간에 관하여 설정된 조건이 만족되었는지 여부를 판단하는 동작, 설정된 조건이 만 족된 경우, 전자 장치의 사용자의 어플리케이션 사용 기록에 기초하여 어플리케이션 최적화를 수행할 어플 리케이션을 선택하는 동작, 및 선택된 어플리케이션에 대해 백그라운드에서 어플리케이션 최적화를 수행하여 최 적화된 어플리케이션을 생성하는 동작을 실행하도록 구성될 수 있다. 선택하는 동작은, 설정된 조건이 만족되는 경우, 사용자의 어플리케이션 사용 기록에 기초하여 우선 순위가 할 당된 후보 어플리케이션들의 리스트를 생성하는 동작, 리스트에서 우선 순위에 따라 적어도 하나의 후보 어플리 케이션에 대해 최적화 가능 여부를 판단하는 동작, 및 판단의 결과에 기초하여 최적화가 가능한 적어도 하나의 후보 어플리케이션 중에서 우선 순위가 가장 높은 후보 어플리케이션을 어플리케이션 최적화를 수행할 어플리케 이션으로 선택하는 동작을 포함할 수 있다. 리스트를 생성하는 동작은, 설정된 기간 동안의 어플리케이션들에 대한 사용 시간에 기초하여 우선 순위가 할당 된 후보 어플리케이션들의 리스트를 생성하는 동작을 포함할 수 있다. 최적화 가능 여부를 판단하는 동작은, 적어도 하나의 후보 어플리케이션이 최적화되었는지 여부를 확인하는 동 작, 적어도 하나의 후보 어플리케이션이 최적화되지 않은 경우, 적어도 하나의 후보 어플리케이션에서 최적화할 메소드가 있는지 여부를 판단하는 동작, 및 최적화할 메소드가 있는 경우 적어도 하나의 후보 어플리케이션에 대해 최적화가 가능한 것으로 판단하는 동작을 포함할 수 있다. 전자 장치의 유휴 상태가 설정된 시간 동안 유지된 경우에 설정된 조건이 만족될 수 있다. 전자 장치의 유휴 상태가 설정된 시간 동안 유지되고 전자 장치의 전체 어플리케이션에 대한 어플리 케이션 최적화가 수행된 이력이 없는 경우에 설정된 조건이 만족될 수 있다. 인스트럭션들은, 프로세서에 의해 실행될 때, 프로세서로 하여금, 최적화된 어플리케이션을 생성하는 동작이 수행되는 도중 전자 장치가 유휴 상태에서 벗어난 경우, 전자 장치의 프로세서 어피니티 (processor affinity)를 동적으로 조정하는 동작을 더 실행하도록 구성될 수 있다. 인스트럭션들은, 프로세서에 의해 실행될 때, 프로세서로 하여금, 전자 장치의 사용 기록에 기 초하여 유휴 상태가 지속될 시간을 예측하는 동작, 및 최적화된 어플리케이션을 생성하는데 소요되는 시간을 추 정하는 동작을 더 실행하도록 구성되고, 최적화된 어플리케이션을 생성하는 동작은, 예측된 시간이 추정된 시간 보다 긴 경우에 수행될 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제1\", \"제2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없 이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으 로(예: 유선으로), 무선으로, 또는 제3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다.모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8"}
{"patent_id": "10-2021-0101346", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예들에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 도 3은 일 실시예에 따른 어플리케이션 최적화 방법을 지원하는 전자 장치의 구성을 설명하기 위한 블록도이다. 도 4는 일 실시예에 따른 어플리케이션의 컴파일러 필터를 설명하기 위한 도면이다. 도 5는 일 실시예에 따른 어플리케이션 최적화 방법을 설명하기 위한 도면이다. 도 6은 일 실시예에 따른 어플리케이션 최적화 방법의 흐름도이다. 도 7은 일 실시예에 따른 어플리케이션 최적화 방법의 어플리케이션 최적화를 수행할 어플리케이션을 선택하는 동작을 설명하기 위한 흐름도이다. 도 8은 일 실시예에 따른 어플리케이션 최적화 수행 중 전자 장치가 유휴 상태에서 벗어난 경우 프로세서 어피 니티(processor affinity)를 조정하는 동작을 설명하기 위한 흐름도이다."}
