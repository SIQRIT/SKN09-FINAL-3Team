{"patent_id": "10-2021-0170604", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0082792", "출원번호": "10-2021-0170604", "발명의 명칭": "소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성을 통해 소스코드", "출원인": "(주)트리니티소프트", "발명자": "김원영"}}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치에 있어서,사전 설정된 p개의 분류 코드들 - 상기 p개의 분류 코드들은, 보안 취약점이 없는 경우를 표상하기 위한 분류코드와 사전 설정된 p-1(p는 2이상의 자연수임)개의 보안 취약점들 각각을 표상하기 위한 분류 코드로 구성되어있음 - 이 저장되어 있는 코드 저장부;사전 설정된 프로그래밍 언어에서 사용되는 것으로 지정된 복수의 명령어들을 기초로 작성된 복수의 코드문들 -상기 복수의 코드문들 각각은 코드 내에 보안 취약점이 없거나, 상기 p-1개의 보안 취약점들 중 어느 하나의 보안 취약점을 갖도록 구성되어 있음 - 과, 상기 복수의 코드문들 각각에 대응되는 보안 취약점에 따른 분류 코드로 구성된 트레이닝 세트가 저장되어 있는 트레이닝 세트 저장부;상기 트레이닝 세트 저장부에 저장되어 있는 상기 복수의 코드문들 중 어느 하나의 코드문을 선정하여, 상기 선정된 코드문과 그에 대응되는 분류 코드를 기초로 코드문에 존재하는 보안 취약점의 종류를 구별하는 학습 모델을 생성하기 위한 기계학습 과정을, 상기 복수의 코드문들 각각에 대해 반복 수행함으로써, 보안 취약점 구별모델을 생성하는 모델 생성부; 및상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되는 대상 코드문이입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점이 존재하는지 확인할 것을 지시하는 보안 취약점확인 명령이 인가되면, 상기 보안 취약점 구별 모델을 기초로 상기 p개의 분류 코드들 중, 상기 대상 코드문에존재하는 보안 취약점에 따른 분류 코드를 선택하여 화면 상에 표시하는 보안 취약점 확인부를 포함하는 전자 장치."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 모델 생성부는상기 복수의 명령어들 각각에 대한 사전 설정된 k(k는 2이상의 자연수)차원의 임베딩 벡터가 저장되어 있는 임베딩 벡터 저장부;상기 복수의 코드문들 중 어느 하나인 제1 코드문이 선정됨에 따라, 상기 제1 코드문에 대한 기계학습 과정이수행되어야 하는 순서가 되는 경우, 상기 제1 코드문을 구성하는 제1 명령어들을 확인한 후 상기 임베딩 벡터저장부를 참조하여 상기 제1 명령어들 각각에 대응되는 임베딩 벡터를 생성하는 임베딩 벡터 생성부;상기 제1 명령어들 각각에 대해, 각 명령어에 대응되는 임베딩 벡터를 n(n은 2이상의 자연수)개로 분할한 후 n개로 분할된 벡터들을, 행렬을 구성하는 행벡터로 구성하여 조합함으로써, 상기 제1 명령어들 각각에 대응되는입력 행렬을 생성하는 행렬 생성부;상기 제1 명령어들 각각에 대응되는 입력 행렬을, 상기 제1 명령어들의 개수만큼의 채널을 갖는 피처맵(featuremap)으로 구성하여, 합성곱 신경망(Convolutional neural network: CNN) - 상기 합성곱 신경망은 출력이 k차원의 벡터가 산출되도록 사전 구성되어 있음 - 에 입력으로 인가함으로써, k차원의 제1 출력 벡터를 산출하는 출력 벡터 산출부;상기 제1 출력 벡터를 사전 설정된 활성화 함수 - 상기 활성화 함수는 상기 제1 출력 벡터를 구성하는 k개의 성분들을 0~1사이의 확률 값으로 변환하는 함수임 - 에 입력으로 인가하여, k차원의 제1 연산 벡터를 생성하는 연산 벡터 생성부;상기 제1 명령어들 각각에 대응되는 임베딩 벡터를 순환 신경망(Recurrent Neural Network: RNN)의 각 타임 스텝 - 상기 순환 신경망의 각 타임 스텝은 출력이 k차원의 벡터가 산출되도록 사전 구성되어 있음 - 에 입력으로공개특허 10-2023-0082792-3-인가하여, 상기 제1 명령어들 각각의 임베딩 벡터가 입력된 각 타임 스텝에 대한 k차원의 출력 벡터들을 행벡터로 갖는 제1 출력 행렬을 생성하는 출력 행렬 생성부;상기 제1 연산 벡터를 열벡터로 구성하고, 상기 제1 출력 행렬과, 열벡터로 구성된 상기 제1 연산 벡터 간의 행렬곱을 연산한 후 행렬곱의 연산에 따라 산출된 열벡터를 행벡터로 전치시킴으로써, 제1 출력 행벡터를 생성하는 출력 행벡터 생성부;상기 순환 신경망에서의 마지막 타임 스텝에 대한 k차원의 출력 벡터에 대해, 상기 제1 출력 행벡터를 연접(Concatenation)함으로써, 상기 제1 출력 행벡터의 길이만큼 길이가 증가된 연접 벡터를 생성하는 연접 벡터 생성부; 및상기 연접 벡터를, 덴스 레이어(dense layer) - 상기 덴스 레이어는 출력이 p차원의 벡터가 산출되도록 사전 구성되어 있음 - 에 입력으로 인가함으로써, p차원의 예측 벡터를 산출하고, 상기 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, p차원의 확률 벡터를 생성한 후, 상기 확률 벡터의 성분에 해당되는 p개의 확률 값들을상기 p개의 분류 코드들 각각에 대응되는 확률 값으로 지정하여, 상기 p개의 확률 값들 중, 상기 제1 코드문에대응되는 제1 분류 코드에 지정된 확률 값이 최대가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행하는 학습 수행부를 포함하는 전자 장치."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 활성화 함수는 소프트맥스(Softmax) 함수이고, 상기 p개의 분류 코드들 각각에는 사전 설정된 순번이 할당되어 있으며,상기 학습 수행부는상기 연접 벡터를, 상기 덴스 레이어에 입력으로 인가함으로써, 상기 예측 벡터를 산출하고, 상기 예측 벡터를상기 활성화 함수에 입력으로 인가하여, 상기 확률 벡터를 생성한 후, 상기 확률 벡터의 성분에 해당되는 상기p개의 확률 값들을, 상기 확률 벡터에서의 첫 번째 성분에 해당되는 확률 값을 시작으로 하여 p번째 성분에 해당되는 확률 값까지, 상기 p개의 분류 코드들 각각에 할당되어 있는 순번에 따라 각 분류 코드에 순차적으로 하나씩 매칭시킴으로써, 상기 p개의 분류 코드들 각각에 대응되는 확률 값을 지정한 후, 상기 p개의 확률 값들중, 상기 제1 코드문에 대응되는 제1 분류 코드에 지정된 확률 값이 최대가 되도록 상기 합성곱 신경망, 상기순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행하는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,상기 학습 수행부는상기 p개의 분류 코드들 중 상기 제1 분류 코드에 대한 정답 값을 1로 지정하고, 나머지 p-1개의 분류 코드들에대한 정답 값을 0으로 지정한 후, 상기 p개의 분류 코드들 각각에 지정된 정답 값과 상기 p개의 확률 값들을 기초로 하기의 수학식 1의 손실함수에 따른 손실 값이 최소가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및상기 덴스 레이어에 대한 기계학습을 수행하는 것을 특징으로 하는 전자 장치.[수학식 1]여기서, L은 손실 값, tk는 상기 p개의 분류 코드들 중 k번째 분류 코드에 지정되어 있는 정답 값, yk는 상기 p개의 확률 값들 중 k번째 확률 값을 의미함."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2023-0082792-4-제2항에 있어서,상기 보안 취약점 확인부는상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되는 상기 대상 코드문이 입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점이 존재하는지 확인할 것을 지시하는 보안 취약점 확인 명령이 인가되면, 상기 대상 코드문을 구성하는 제2 명령어들을 확인한 후 상기 임베딩 벡터 저장부를 참조하여 상기 제2 명령어들 각각에 대응되는 임베딩 벡터를 생성하는 확인용 임베딩 벡터 생성부;상기 제2 명령어들 각각에 대해, 각 명령어에 대응되는 임베딩 벡터를 n개로 분할한 후 n개로 분할된 벡터들을,행렬을 구성하는 행벡터로 구성하여 조합함으로써, 상기 제2 명령어들 각각에 대응되는 입력 행렬을 생성하는확인용 행렬 생성부;상기 제2 명령어들 각각에 대응되는 입력 행렬을, 상기 제2 명령어들의 개수만큼의 채널을 갖는 피처맵으로 구성하여, 기계학습이 완료된 상기 합성곱 신경망에 입력으로 인가함으로써, k차원의 제1 확인용 출력 벡터를 산출하는 확인용 출력 벡터 산출부;상기 제1 확인용 출력 벡터를 상기 활성화 함수에 입력으로 인가하여, k차원의 제1 확인용 연산 벡터를 생성하는 확인용 연산 벡터 생성부;상기 제2 명령어들 각각에 대응되는 임베딩 벡터를 기계학습이 완료된 상기 순환 신경망의 각 타임 스텝에 입력으로 인가하여, 상기 제2 명령어들 각각의 임베딩 벡터가 입력된 각 타임 스텝에 대한 k차원의 출력 벡터들을행벡터로 갖는 제1 확인용 출력 행렬을 생성하는 확인용 출력 행렬 생성부;상기 제1 확인용 연산 벡터를 열벡터로 구성하고, 상기 제1 확인용 출력 행렬과, 열벡터로 구성된 상기 제1 확인용 연산 벡터 간의 행렬곱을 연산한 후 행렬곱의 연산에 따라 산출된 열벡터를 행벡터로 전치시킴으로써, 제1확인용 출력 행벡터를 생성하는 확인용 출력 행벡터 생성부;상기 순환 신경망에서의 마지막 타임 스텝에 대한 k차원의 출력 벡터에 대해, 상기 제1 확인용 출력 행벡터를연접함으로써, 상기 제1 확인용 출력 행벡터의 길이만큼 길이가 증가된 확인용 연접 벡터를 생성하는 확인용 연접 벡터 생성부; 및상기 확인용 연접 벡터를, 기계학습이 완료된 상기 덴스 레이어에 입력으로 인가함으로써, p차원의 확인용 예측벡터를 산출하고, 상기 확인용 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, p차원의 확인용 확률 벡터를 생성한 후, 상기 확인용 확률 벡터의 성분에 해당되는 p개의 확률 값들을 상기 p개의 분류 코드들 각각에 대응되는 확률 값으로 지정하여, 상기 p개의 분류 코드들 중, 최대의 확률 값이 지정된 분류 코드를, 상기 대상코드문에 존재하는 보안 취약점에 따른 분류 코드로 선택하여 화면 상에 표시하는 확인 처리부를 더 포함하는 전자 장치."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치의 동작 방법에 있어서,사전 설정된 p개의 분류 코드들 - 상기 p개의 분류 코드들은, 보안 취약점이 없는 경우를 표상하기 위한 분류코드와 사전 설정된 p-1(p는 2이상의 자연수임)개의 보안 취약점들 각각을 표상하기 위한 분류 코드로 구성되어있음 - 이 저장되어 있는 코드 저장부를 유지하는 단계;사전 설정된 프로그래밍 언어에서 사용되는 것으로 지정된 복수의 명령어들을 기초로 작성된 복수의 코드문들 -상기 복수의 코드문들 각각은 코드 내에 보안 취약점이 없거나, 상기 p-1개의 보안 취약점들 중 어느 하나의 보안 취약점을 갖도록 구성되어 있음 - 과, 상기 복수의 코드문들 각각에 대응되는 보안 취약점에 따른 분류 코드로 구성된 트레이닝 세트가 저장되어 있는 트레이닝 세트 저장부를 유지하는 단계;상기 트레이닝 세트 저장부에 저장되어 있는 상기 복수의 코드문들 중 어느 하나의 코드문을 선정하여, 상기 선정된 코드문과 그에 대응되는 분류 코드를 기초로 코드문에 존재하는 보안 취약점의 종류를 구별하는 학습 모델을 생성하기 위한 기계학습 과정을, 상기 복수의 코드문들 각각에 대해 반복 수행함으로써, 보안 취약점 구별모델을 생성하는 단계; 및상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되는 대상 코드문이공개특허 10-2023-0082792-5-입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점이 존재하는지 확인할 것을 지시하는 보안 취약점확인 명령이 인가되면, 상기 보안 취약점 구별 모델을 기초로 상기 p개의 분류 코드들 중, 상기 대상 코드문에존재하는 보안 취약점에 따른 분류 코드를 선택하여 화면 상에 표시하는 단계를 포함하는 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 보안 취약점 구별 모델을 생성하는 단계는상기 복수의 명령어들 각각에 대한 사전 설정된 k(k는 2이상의 자연수)차원의 임베딩 벡터가 저장되어 있는 임베딩 벡터 저장부를 유지하는 단계;상기 복수의 코드문들 중 어느 하나인 제1 코드문이 선정됨에 따라, 상기 제1 코드문에 대한 기계학습 과정이수행되어야 하는 순서가 되는 경우, 상기 제1 코드문을 구성하는 제1 명령어들을 확인한 후 상기 임베딩 벡터저장부를 참조하여 상기 제1 명령어들 각각에 대응되는 임베딩 벡터를 생성하는 단계;상기 제1 명령어들 각각에 대해, 각 명령어에 대응되는 임베딩 벡터를 n(n은 2이상의 자연수)개로 분할한 후 n개로 분할된 벡터들을, 행렬을 구성하는 행벡터로 구성하여 조합함으로써, 상기 제1 명령어들 각각에 대응되는입력 행렬을 생성하는 단계;상기 제1 명령어들 각각에 대응되는 입력 행렬을, 상기 제1 명령어들의 개수만큼의 채널을 갖는 피처맵(featuremap)으로 구성하여, 합성곱 신경망(Convolutional neural network: CNN) - 상기 합성곱 신경망은 출력이 k차원의 벡터가 산출되도록 사전 구성되어 있음 - 에 입력으로 인가함으로써, k차원의 제1 출력 벡터를 산출하는 단계;상기 제1 출력 벡터를 사전 설정된 활성화 함수 - 상기 활성화 함수는 상기 제1 출력 벡터를 구성하는 k개의 성분들을 0~1사이의 확률 값으로 변환하는 함수임 - 에 입력으로 인가하여, k차원의 제1 연산 벡터를 생성하는 단계;상기 제1 명령어들 각각에 대응되는 임베딩 벡터를 순환 신경망(Recurrent Neural Network: RNN)의 각 타임 스텝 - 상기 순환 신경망의 각 타임 스텝은 출력이 k차원의 벡터가 산출되도록 사전 구성되어 있음 - 에 입력으로인가하여, 상기 제1 명령어들 각각의 임베딩 벡터가 입력된 각 타임 스텝에 대한 k차원의 출력 벡터들을 행벡터로 갖는 제1 출력 행렬을 생성하는 단계;상기 제1 연산 벡터를 열벡터로 구성하고, 상기 제1 출력 행렬과, 열벡터로 구성된 상기 제1 연산 벡터 간의 행렬곱을 연산한 후 행렬곱의 연산에 따라 산출된 열벡터를 행벡터로 전치시킴으로써, 제1 출력 행벡터를 생성하는 단계;상기 순환 신경망에서의 마지막 타임 스텝에 대한 k차원의 출력 벡터에 대해, 상기 제1 출력 행벡터를 연접(Concatenation)함으로써, 상기 제1 출력 행벡터의 길이만큼 길이가 증가된 연접 벡터를 생성하는 단계; 및상기 연접 벡터를, 덴스 레이어(dense layer) - 상기 덴스 레이어는 출력이 p차원의 벡터가 산출되도록 사전 구성되어 있음 - 에 입력으로 인가함으로써, p차원의 예측 벡터를 산출하고, 상기 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, p차원의 확률 벡터를 생성한 후, 상기 확률 벡터의 성분에 해당되는 p개의 확률 값들을상기 p개의 분류 코드들 각각에 대응되는 확률 값으로 지정하여, 상기 p개의 확률 값들 중, 상기 제1 코드문에대응되는 제1 분류 코드에 지정된 확률 값이 최대가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행하는 단계를 포함하는 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 활성화 함수는 소프트맥스(Softmax) 함수이고, 상기 p개의 분류 코드들 각각에는 사전 설정된 순번이 할당되어 있으며,공개특허 10-2023-0082792-6-상기 기계학습을 수행하는 단계는상기 연접 벡터를, 상기 덴스 레이어에 입력으로 인가함으로써, 상기 예측 벡터를 산출하고, 상기 예측 벡터를상기 활성화 함수에 입력으로 인가하여, 상기 확률 벡터를 생성한 후, 상기 확률 벡터의 성분에 해당되는 상기p개의 확률 값들을, 상기 확률 벡터에서의 첫 번째 성분에 해당되는 확률 값을 시작으로 하여 p번째 성분에 해당되는 확률 값까지, 상기 p개의 분류 코드들 각각에 할당되어 있는 순번에 따라 각 분류 코드에 순차적으로 하나씩 매칭시킴으로써, 상기 p개의 분류 코드들 각각에 대응되는 확률 값을 지정한 후, 상기 p개의 확률 값들중, 상기 제1 코드문에 대응되는 제1 분류 코드에 지정된 확률 값이 최대가 되도록 상기 합성곱 신경망, 상기순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행하는 것을 특징으로 하는 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제7항에 있어서,상기 기계학습을 수행하는 단계는상기 p개의 분류 코드들 중 상기 제1 분류 코드에 대한 정답 값을 1로 지정하고, 나머지 p-1개의 분류 코드들에대한 정답 값을 0으로 지정한 후, 상기 p개의 분류 코드들 각각에 지정된 정답 값과 상기 p개의 확률 값들을 기초로 하기의 수학식 1의 손실함수에 따른 손실 값이 최소가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및상기 덴스 레이어에 대한 기계학습을 수행하는 것을 특징으로 하는 전자 장치의 동작 방법.[수학식 1]여기서, L은 손실 값, tk는 상기 p개의 분류 코드들 중 k번째 분류 코드에 지정되어 있는 정답 값, yk는 상기 p개의 확률 값들 중 k번째 확률 값을 의미함."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제7항에 있어서,상기 표시하는 단계는상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되는 상기 대상 코드문이 입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점이 존재하는지 확인할 것을 지시하는 보안 취약점 확인 명령이 인가되면, 상기 대상 코드문을 구성하는 제2 명령어들을 확인한 후 상기 임베딩 벡터 저장부를 참조하여 상기 제2 명령어들 각각에 대응되는 임베딩 벡터를 생성하는 단계;상기 제2 명령어들 각각에 대해, 각 명령어에 대응되는 임베딩 벡터를 n개로 분할한 후 n개로 분할된 벡터들을,행렬을 구성하는 행벡터로 구성하여 조합함으로써, 상기 제2 명령어들 각각에 대응되는 입력 행렬을 생성하는단계;상기 제2 명령어들 각각에 대응되는 입력 행렬을, 상기 제2 명령어들의 개수만큼의 채널을 갖는 피처맵으로 구성하여, 기계학습이 완료된 상기 합성곱 신경망에 입력으로 인가함으로써, k차원의 제1 확인용 출력 벡터를 산출하는 단계;상기 제1 확인용 출력 벡터를 상기 활성화 함수에 입력으로 인가하여, k차원의 제1 확인용 연산 벡터를 생성하는 단계;상기 제2 명령어들 각각에 대응되는 임베딩 벡터를 기계학습이 완료된 상기 순환 신경망의 각 타임 스텝에 입력으로 인가하여, 상기 제2 명령어들 각각의 임베딩 벡터가 입력된 각 타임 스텝에 대한 k차원의 출력 벡터들을행벡터로 갖는 제1 확인용 출력 행렬을 생성하는 단계;상기 제1 확인용 연산 벡터를 열벡터로 구성하고, 상기 제1 확인용 출력 행렬과, 열벡터로 구성된 상기 제1 확인용 연산 벡터 간의 행렬곱을 연산한 후 행렬곱의 연산에 따라 산출된 열벡터를 행벡터로 전치시킴으로써, 제1확인용 출력 행벡터를 생성하는 단계;공개특허 10-2023-0082792-7-상기 순환 신경망에서의 마지막 타임 스텝에 대한 k차원의 출력 벡터에 대해, 상기 제1 확인용 출력 행벡터를연접함으로써, 상기 제1 확인용 출력 행벡터의 길이만큼 길이가 증가된 확인용 연접 벡터를 생성하는 단계; 및상기 확인용 연접 벡터를, 기계학습이 완료된 상기 덴스 레이어에 입력으로 인가함으로써, p차원의 확인용 예측벡터를 산출하고, 상기 확인용 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, p차원의 확인용 확률 벡터를 생성한 후, 상기 확인용 확률 벡터의 성분에 해당되는 p개의 확률 값들을 상기 p개의 분류 코드들 각각에 대응되는 확률 값으로 지정하여, 상기 p개의 분류 코드들 중, 최대의 확률 값이 지정된 분류 코드를, 상기 대상코드문에 존재하는 보안 취약점에 따른 분류 코드로 선택하여 화면 상에 표시하는 단계를 더 포함하는 전자 장치의 동작 방법."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제6항 내지 제10항 중 어느 한 항의 방법을 컴퓨터와의 결합을 통해 실행시키기 위한 컴퓨터 프로그램을 기록한컴퓨터 판독 가능 기록 매체."}
{"patent_id": "10-2021-0170604", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제6항 내지 제10항 중 어느 한 항의 방법을 컴퓨터와의 결합을 통해 실행시키기 위한 저장매체에 저장된 컴퓨터프로그램."}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치 및 그 동작 방법을 제시함으로써, 사용자가 특정 소 스코드에 어떠한 보안 취약점이 있는지 확인하고자 할 때, 이 보안 취약점 구별 모델에 검증 대상이 되는 코드문 을 입력하기만 하면, 해당 코드문에 어떤 보안 취약점이 있는지 여부를 보다 정확하고 신속하게 확인할 수 있도 록 지원할 수 있다."}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치 및 그 동작 방법에 대한 것이다."}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "컴퓨팅 장치에서 사용되는 프로그램들은 소스코드(source code)로 구성되어 있다. 보통, 프로그램 개발자들은 프로그램을 개발하면서, 자신이 작성한 소스코드에 보안 취약점이 있는지 여부를 확인하는 과정을 수행함으로써, 소스코드의 보안 취약점을 수정해 가고, 이렇게 소스코드의 보안 취약점을 수정해 가는 작업을 통해 완성도가 높은 프로그램을 개발하려고 노력한다. 하지만, 소스코드의 보안 취약점을 개발자가 일일이 찾아내는 것은 많은 시간과 노력이 소요되며, 사람의 실수 로 인해 보안 취약점을 찾아내지 못하는 경우도 발생할 수 있다. 관련해서, 최근에는 일부의 샘플 데이터를 기초로 소정의 결과를 판단하기 위한 학습 모델을 만들 수 있는 기계 학습 기반의 인공지능 기술이 등장하고 있다. 이와 관련해서, 소스코드의 보안 취약점을 찾아내는 데에 있어서 도 이러한 인공지능 기술의 활용을 고려할 수 있다. 이렇게, 인공지능 기술을 활용하여 소스코드의 보안 취약점을 확인할 수 있는 모델을 만들어두게 되면, 개발자 가 자신의 소스코드에 보안 취약점이 있는지 확인하고자 할 때, 이 보안 취약점 확인 모델에 자신이 작성한 코 드문을 입력하기만 하면, 해당 코드문에 어떤 보안 취약점이 있는지 여부를 확인할 수 있다는 점에서, 프로그램 개발자의 편의가 증진될 수 있을 것이다."}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치 및 그 동작 방법을 제시함으로써, 사용자가 특정 소스코드에 어떠한 보안 취약점이 있는지 확인하고자 할 때, 이 보안 취약점 구별 모델에 검증 대상이 되는 코 드문을 입력하기만 하면, 해당 코드문에 어떤 보안 취약점이 있는지 여부를 보다 정확하고 신속하게 확인할 수 있도록 지원하고자 한다."}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일실시예에 따른, 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성을 통 해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치는 사전 설정된 p개의 분류 코 드들 - 상기 p개의 분류 코드들은, 보안 취약점이 없는 경우를 표상하기 위한 분류 코드와 사전 설정된 p-1(p는 2이상의 자연수임)개의 보안 취약점들 각각을 표상하기 위한 분류 코드로 구성되어 있음 - 이 저장되어 있는 코 드 저장부, 사전 설정된 프로그래밍 언어에서 사용되는 것으로 지정된 복수의 명령어들을 기초로 작성된 복수의 코드문들 - 상기 복수의 코드문들 각각은 코드 내에 보안 취약점이 없거나, 상기 p-1개의 보안 취약점들 중 어 느 하나의 보안 취약점을 갖도록 구성되어 있음 - 과, 상기 복수의 코드문들 각각에 대응되는 보안 취약점에 따 른 분류 코드로 구성된 트레이닝 세트가 저장되어 있는 트레이닝 세트 저장부, 상기 트레이닝 세트 저장부에 저 장되어 있는 상기 복수의 코드문들 중 어느 하나의 코드문을 선정하여, 상기 선정된 코드문과 그에 대응되는 분 류 코드를 기초로 코드문에 존재하는 보안 취약점의 종류를 구별하는 학습 모델을 생성하기 위한 기계학습 과정 을, 상기 복수의 코드문들 각각에 대해 반복 수행함으로써, 보안 취약점 구별 모델을 생성하는 모델 생성부 및 상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되는 대상 코드문이 입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점이 존재하는지 확인할 것을 지시하는 보안 취약점 확인 명령이 인가되면, 상기 보안 취약점 구별 모델을 기초로 상기 p개의 분류 코드들 중, 상기 대상 코드문에 존재하는 보안 취약점에 따른 분류 코드를 선택하여 화면 상에 표시하는 보안 취약점 확인부를 포함한다. 또한, 본 발명의 일실시예에 따른, 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성 을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치의 동작 방법은 사전 설정 된 p개의 분류 코드들 - 상기 p개의 분류 코드들은, 보안 취약점이 없는 경우를 표상하기 위한 분류 코드와 사 전 설정된 p-1(p는 2이상의 자연수임)개의 보안 취약점들 각각을 표상하기 위한 분류 코드로 구성되어 있음 - 이 저장되어 있는 코드 저장부를 유지하는 단계, 사전 설정된 프로그래밍 언어에서 사용되는 것으로 지정된 복 수의 명령어들을 기초로 작성된 복수의 코드문들 - 상기 복수의 코드문들 각각은 코드 내에 보안 취약점이 없거 나, 상기 p-1개의 보안 취약점들 중 어느 하나의 보안 취약점을 갖도록 구성되어 있음 - 과, 상기 복수의 코드 문들 각각에 대응되는 보안 취약점에 따른 분류 코드로 구성된 트레이닝 세트가 저장되어 있는 트레이닝 세트 저장부를 유지하는 단계, 상기 트레이닝 세트 저장부에 저장되어 있는 상기 복수의 코드문들 중 어느 하나의 코 드문을 선정하여, 상기 선정된 코드문과 그에 대응되는 분류 코드를 기초로 코드문에 존재하는 보안 취약점의 종류를 구별하는 학습 모델을 생성하기 위한 기계학습 과정을, 상기 복수의 코드문들 각각에 대해 반복 수행함 으로써, 보안 취약점 구별 모델을 생성하는 단계 및 상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되는 대상 코드문이 입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점 이 존재하는지 확인할 것을 지시하는 보안 취약점 확인 명령이 인가되면, 상기 보안 취약점 구별 모델을 기초로 상기 p개의 분류 코드들 중, 상기 대상 코드문에 존재하는 보안 취약점에 따른 분류 코드를 선택하여 화면 상에 표시하는 단계를 포함한다."}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명은 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치 및 그 동작 방법을 제시함으로써, 사용자가 특정 소스코드에 어떠한 보안 취약점이 있는지 확인하고자 할 때, 이 보안 취약점 구별 모델에 검증 대상이 되는 코 드문을 입력하기만 하면, 해당 코드문에 어떤 보안 취약점이 있는지 여부를 보다 정확하고 신속하게 확인할 수 있도록 지원할 수 있다."}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 본 발명에 따른 실시예들을 첨부된 도면을 참조하여 상세하게 설명하기로 한다. 이러한 설명은 본 발명을 특정한 실시 형태에 대해 한정하려는 것이 아니며, 본 발명의 사상 및 기술 범위에 포함되는 모든 변경, 균등물 내지 대체물을 포함하는 것으로 이해되어야 한다. 각 도면을 설명하면서 유사한 참조부호를 유사한 구 성요소에 대해 사용하였으며, 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 본 명세서 상"}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "에서 사용되는 모든 용어들은 본 발명이 속하는 기술분야에서 통상의 지식을 가진 사람에 의해 일반적으로 이해 되는 것과 동일한 의미를 가지고 있다. 본 문서에서, 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다른 구 성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있다는 것을 의미한다. 또한, 본 발명의 다양한 실시예들에 있어서, 각 구성요소들, 기능 블록들 또는 수단들은 하나 또는 그 이상의 하부 구성요소로 구성될 수 있고, 각 구성요소들이 수행하는 전기, 전자, 기계적 기능들은 전자회로, 집적회로, ASIC(Application Specific Integrated Circuit) 등 공지된 다양한 소자들 또는 기계적 요소들로 구현될 수 있으며, 각각 별개로 구현되거나 2 이상이 하나로 통합되어 구현될 수도 있다. 한편, 첨부된 블록도의 블록들이나 흐름도의 단계들은 범용 컴퓨터, 특수용 컴퓨터, 휴대용 노트북 컴퓨터, 네 트워크 컴퓨터 등 데이터 프로세싱이 가능한 장비의 프로세서나 메모리에 탑재되어 지정된 기능들을 수행하는 컴퓨터 프로그램 명령들(instructions)을 의미하는 것으로 해석될 수 있다. 이들 컴퓨터 프로그램 명령들은 컴 퓨터 장치에 구비된 메모리 또는 컴퓨터에서 판독 가능한 메모리에 저장될 수 있기 때문에, 블록도의 블록들 또 는 흐름도의 단계들에서 설명된 기능들은 이를 수행하는 명령 수단을 내포하는 제조물로 생산될 수도 있다. 아 울러, 각 블록 또는 각 단계는 특정된 논리적 기능(들)을 실행하기 위한 하나 이상의 실행 가능한 명령들을 포 함하는 모듈, 세그먼트 또는 코드의 일부를 나타낼 수 있다. 또, 몇 가지 대체 가능한 실시예들에서는 블록들 또는 단계들에서 언급된 기능들이 정해진 순서와 달리 실행되는 것도 가능함을 주목해야 한다. 예컨대, 잇달아 도시되어 있는 두 개의 블록들 또는 단계들은 실질적으로 동시에 수행되거나, 역순으로 수행될 수 있으며, 경우 에 따라 일부 블록들 또는 단계들이 생략된 채로 수행될 수도 있다. 도 1은 본 발명의 일실시예에 따른 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성 을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치의 구조를 도시한 도면이 다. 도 1을 참조하면, 본 발명에 따른 전자 장치는 코드 저장부, 트레이닝 세트 저장부, 모델 생성 부 및 보안 취약점 확인부를 포함한다. 코드 저장부에는 사전 설정된 p개의 분류 코드들이 저장되어 있다. 여기서, 상기 p개의 분류 코드들은, 보안 취약점이 없는 경우를 표상하기 위한 분류 코드와 사전 설정된 p- 1(p는 2이상의 자연수임)개의 보안 취약점들 각각을 표상하기 위한 분류 코드로 구성되어 있는 코드를 의미한다. 관련해서, p를 '5'라고 가정하면, 코드 저장부에는 하기의 표 1과 같이 5개의 분류 코드들이 저장되어 있 을 수 있다. 표 1 보안 취약점의 종류 분류 코드 보안 취약점 없음 CWE-0 보안 취약점 1 CWE-384 보안 취약점 2 CWE-406 보안 취약점 3 CWE-19 보안 취약점 4 CWE-28 트레이닝 세트 저장부에는 사전 설정된 프로그래밍 언어에서 사용되는 것으로 지정된 복수의 명령어들을 기초로 작성된 복수의 코드문들과, 상기 복수의 코드문들 각각에 대응되는 보안 취약점에 따른 분류 코드로 구 성된 트레이닝 세트가 저장되어 있다. 여기서, 상기 복수의 명령어들이란 상기 프로그래밍 언어의 소스코드를 작성할 때 사용할 수 있는 메소드 (method), 변수, 기호, 문자 따위를 통칭하는 소정의 텍스트를 의미한다. 그리고, 상기 복수의 코드문들 각각은 코드 내에 보안 취약점이 없거나, 상기 p-1개의 보안 취약점들 중 어느 하나의 보안 취약점을 갖도록 구성되어 있다. 예컨대, 총 6개의 코드문들로 트레이닝 세트를 구성한다고 하는 경우, 사용자는 '코드문 1'을 보안 취약점이 존재하지 않는 형태의 코드문으로 구성할 수 있고, '코드문 2'와 '코드문 3'을 '보안 취약점 1'이 존재하는 형태의 코드문으로 구성할 수 있으며, '코드문 4'를 '보안 취약점 2'가 존재하는 형태의 코드문으로 구성할 수 있고, '코드문 5'를 '보안 취약점 3'이 존재하는 형태의 코드문으 로 구성할 수 있고, '코드문 6'을 '보안 취약점 4'가 존재하는 형태의 코드문으로 구성할 수 있을 것이다. 이 경우, 트레이닝 세트 저장부에는 하기의 표 2와 같은 트레이닝 세트가 저장되어 있을 수 있다. 표 2 트레이닝 세트 코드문들 분류 코드 트레이닝 세트 1 코드문 1 CWE-0 트레이닝 세트 2 코드문 2 CWE-384 트레이닝 세트 3 코드문 3 CWE-384 트레이닝 세트 4 코드문 4 CWE-406 트레이닝 세트 5 코드문 5 CWE-19 트레이닝 세트 6 코드문 6 CWE-28 모델 생성부는 트레이닝 세트 저장부에 저장되어 있는 상기 복수의 코드문들 중 어느 하나의 코드문 을 선정하여, 상기 선정된 코드문과 그에 대응되는 분류 코드를 기초로 코드문에 존재하는 보안 취약점의 종류 를 구별하는 학습 모델을 생성하기 위한 기계학습 과정을, 상기 복수의 코드문들 각각에 대해 반복 수행함으로 써, 보안 취약점 구별 모델을 생성한다. 이때, 본 발명의 일실시예에 따르면, 모델 생성부는 임베딩 벡터 저장부, 임베딩 벡터 생성부, 행렬 생성부, 출력 벡터 산출부, 연산 벡터 생성부, 출력 행렬 생성부, 출력 행벡터 생성 부, 연접 벡터 생성부 및 학습 수행부를 포함할 수 있다. 임베딩 벡터 저장부에는 상기 복수의 명령어들 각각에 대한 사전 설정된 k(k는 2이상의 자연수)차원의 임 베딩 벡터가 저장되어 있다. 예컨대, k를 '256'이라고 하고, 상기 복수의 명령어들이 '50개'가 존재한다고 하는 경우, 임베딩 벡터 저장부 에는 50개의 명령어들 각각에 대응되는 서로 다른 256차원의 임베딩 벡터가 저장되어 있을 수 있다. 임베딩 벡터 생성부는 상기 복수의 코드문들 중 어느 하나인 제1 코드문이 선정됨에 따라, 상기 제1 코드 문에 대한 기계학습 과정이 수행되어야 하는 순서가 되는 경우, 상기 제1 코드문을 구성하는 제1 명령어들을 확 인한 후 임베딩 벡터 저장부를 참조하여 상기 제1 명령어들 각각에 대응되는 임베딩 벡터를 생성한다. 예컨대, 상기 제1 코드문이 'String string_val = string_value : MD5'라고 하고, 상기 제1 코드문을 구성하는 제1 명령어들이 'String', 'string_val', '=', 'string_value', ':', 'MD5'로 확인되었다고 하는 경우, 임베딩 벡터 생성부는 임베딩 벡터 저장부를 참조하여, 'String', 'string_val', '=', 'string_value', ':', 'MD5' 각각에 대응되는 256차원의 임베딩 벡터를 생성할 수 있다. 이때, 본 발명에서는 기계학습의 정확도를 높이기 위해, 상기 복수의 코드문들을 이용하여 기계학습을 수행할 때, 입력 값으로 사용되는 상기 복수의 코드문들 각각에 대한 임베딩 벡터의 개수를 일정한 개수로 일치시킬 수 있다. 관련해서, 기계학습 과정에서 입력 값으로 사용될 임베딩 벡터의 개수가 '10개'로 지정되어 있다고 하는 경우, 임베딩 벡터 생성부는 상기 복수의 코드문들로부터 생성되는 임베딩 벡터가 총 10개가 되도록 처리 할 수 있다.따라서, 임베딩 벡터 생성부는 'String string_val = string_value : MD5'와 같은 상기 제1 코드문으로부 터 임베딩 벡터를 생성할 때, 상기 제1 코드문을 구성하는 제1 명령어들이 'String', 'string_val', '=', 'string_value', ':', 'MD5'로, 총 6개에 해당되지만, 10개의 임베딩 벡터를 만들어야 하므로, 나머지 4개의 임 베딩 벡터는 상기 제1 코드문 상에 '공백(null)'이라고 하는 명령어가 있다고 가정한 후, 임베딩 벡터 저장부 를 참조하여 공백에 대응되는 임베딩 벡터를 매칭시킴으로써, 공백을 포함한 총 10개의 상기 제1 명령어들 에 대한 임베딩 벡터를 생성할 수 있다. 행렬 생성부는 상기 제1 명령어들 각각에 대해, 각 명령어에 대응되는 임베딩 벡터를 n(n은 2이상의 자연 수)개로 분할한 후 n개로 분할된 벡터들을, 행렬을 구성하는 행벡터로 구성하여 조합함으로써, 상기 제1 명령어 들 각각에 대응되는 입력 행렬을 생성한다. 관련해서, n을 '16'이라고 하고, 전술한 예와 같이, 10개의 제1 명령어들에 대한 256차원의 임베딩 벡터가 생성 되었다고 하는 경우, 행렬 생성부는 10개의 상기 제1 명령어들 각각에 대해서, 각 명령어에 대응되는 256 차원의 임베딩 벡터를 16개로 분할함으로써, 16차원의 분할 벡터 16개를 만들 수 있다. 그러고 나서, 행렬 생 성부는 16차원의 분할 벡터 16개를, 행렬을 구성하는 행벡터로 구성하여 조합함으로써, 16 x 16의 크기를 갖는 입력 행렬을 생성할 수 있다. 이러한 방식으로, 행렬 생성부는 10개의 상기 제1 명령어들 각각에 대해서 상기 입력 행렬을 생성하는 과 정을 수행함으로써, 10개의 상기 제1 명령어들 각각에 대응되는 16 x 16 크기의 입력 행렬을 생성할 수 있다. 출력 벡터 산출부는 상기 제1 명령어들 각각에 대응되는 입력 행렬을, 상기 제1 명령어들의 개수만큼의 채 널을 갖는 피처맵(feature map)으로 구성하여, 합성곱 신경망(Convolutional neural network: CNN)에 입력으로 인가함으로써, k차원의 제1 출력 벡터를 산출한다. 여기서, 합성곱 신경망이란 합성곱 필터로 구성된 다수의 합성곱층과 풀링(pooling)층들로 구성되는 신경망으로 서, 합성곱 신경망에 이미지 등과 같은 입력 데이터가 피처맵(feature map)으로 구성되어 합성곱층에 입력으로 인가되면, 합성곱층을 구성하는 하나 이상의 채널을 갖는 합성곱 필터들에 의해 합성곱이 발생하여 출력 피처맵 이 생성되고, 풀링층을 통해서 상기 출력 피처맵의 크기를 줄이기 위한 다운샘플링이 수행된 후, 그 출력이 다 음 합성곱층과 풀링층에 다시 입력으로 인가되는 과정이 반복되며, 이러한 과정의 반복을 통해 소정의 출력이 산출되게 된다. 이때, 본 발명에서의 상기 합성곱 신경망은 출력이 k차원의 벡터가 산출되도록 사전 구성되어 있다. 관련해서, 전술한 예와 같이, 행렬 생성부에서 10개의 상기 제1 명령어들 각각에 대응되는 16 x 16의 입력 행렬이 생성되었다고 하는 경우, 출력 벡터 산출부는 10개의 상기 제1 명령어들 각각에 대응되는 16 x 16 의 입력 행렬을, 10개 채널을 갖는 16 x 16 크기의 피처맵으로 구성하여, 상기 합성곱 신경망에 입력으로 인가 함으로써, 256차원의 제1 출력 벡터를 산출할 수 있다. 연산 벡터 생성부는 상기 제1 출력 벡터를 사전 설정된 활성화 함수에 입력으로 인가하여, k차원의 제1 연 산 벡터를 생성한다. 여기서, 상기 활성화 함수는 상기 제1 출력 벡터를 구성하는 k개의 성분들을 0~1사이의 확률 값으로 변환하는 함수로서, 본 발명의 일실시예에 따르면, 상기 활성화 함수는 소프트맥스(Softmax) 함수일 수 있다. 관련해서, 전술한 예와 같이, 출력 벡터 산출부에서 256차원의 제1 출력 벡터가 산출되었다고 하는 경우, 연산 벡터 생성부는 상기 제1 출력 벡터를 상기 활성화 함수인 소프트맥스 함수에 인가하여, 0~1사이의 확 률 값을 성분으로 갖는 256차원의 제1 연산 벡터를 생성할 수 있다. 출력 행렬 생성부는 상기 제1 명령어들 각각에 대응되는 임베딩 벡터를 순환 신경망(Recurrent Neural Network: RNN)의 각 타임 스텝에 입력으로 인가하여, 상기 제1 명령어들 각각의 임베딩 벡터가 입력된 각 타임 스텝에 대한 k차원의 출력 벡터들을 행벡터로 갖는 제1 출력 행렬을 생성한다. 여기서, 상기 순환 신경망이란 유닛간의 연결이 순환적 구조를 갖는 특징을 갖는 인공 신경망으로서, 다수의 타 임 스텝들로 구성되어 있어서, 각 타임 스텝별로 소정의 시계열 데이터가 입력으로 인가되면, 각 타임 스텝에서 의 출력이 산출되도록 구성되어 있다. 이때, 본 발명에서의 상기 순환 신경망의 각 타임 스텝은 출력이 k차원 의 벡터가 산출되도록 사전 구성되어 있다. 관련해서, 전술한 예와 같이, 임베딩 벡터 생성부에서 10개의 상기 제1 명령어들 각각에 대한 256차원의 임베딩 벡터가 생성되었다고 하는 경우, 출력 행렬 생성부는 10개의 상기 제1 명령어들 각각에 대한 임베딩 벡터를 상기 순환 신경망을 구성하는 각 타임 스텝에 순차적으로 배치하여 입력으로 인가함으로써, 10개의 타임 스텝 각각으로부터 산출되는 256차원의 출력 벡터를 획득할 수 있다. 이렇게, 256차원의 출력 벡터 10개가 획득되면, 출력 행렬 생성부는 10개의 256차원의 출력 벡터를, 행렬 을 구성하는 행벡터로 구성하여 조합함으로써, 10 x 256의 크기를 갖는 제1 출력 행렬을 생성할 수 있다. 출력 행벡터 생성부는 상기 제1 연산 벡터를 열벡터로 구성하고, 상기 제1 출력 행렬과, 열벡터로 구성된 상기 제1 연산 벡터 간의 행렬곱을 연산한 후 행렬곱의 연산에 따라 산출된 열벡터를 행벡터로 전치시킴으로써, 제1 출력 행벡터를 생성한다. 관련해서, 전술한 예와 같이, 연산 벡터 생성부에서 256차원의 제1 연산 벡터가 생성되었다고 하고, 출력 행렬 생성부에서 10 x 256의 제1 출력 행렬이 생성되었다고 하는 경우, 출력 행벡터 생성부는 256차 원의 제1 연산 벡터를 열벡터로 구성함으로써, 256 x 1의 크기를 갖는 열벡터를 만든 후, 10 x 256의 제1 출력 행렬과, 열벡터로 구성된 256 x 1의 상기 제1 연산 벡터 간의 행렬곱을 연산함으로써, 10 x 1의 크기를 갖는 열 벡터를 생성할 수 있다. 그러고 나서, 출력 행벡터 생성부는 10 x 1 크기의 열벡터를 행벡터로 전치시킴 으로써, 1 x 10의 크기를 갖는 제1 출력 행벡터를 생성할 수 있다. 연접 벡터 생성부는 상기 순환 신경망에서의 마지막 타임 스텝에 대한 k차원의 출력 벡터에 대해, 상기 제 1 출력 행벡터를 연접(Concatenation)함으로써, 상기 제1 출력 행벡터의 길이만큼 길이가 증가된 연접 벡터를 생성한다. 관련해서, 전술한 예와 같이, 상기 순환 신경망의 각 타임 스텝이 256차원의 출력 벡터를 생성하도록 구성되어 있다고 하고, 출력 행벡터 생성부에서 1 x 10의 크기를 갖는 제1 출력 행벡터가 생성되었다고 하는 경우, 연접 벡터 생성부는 상기 순환 신경망에서의 마지막 타임 스텝에 대한 256차원의 출력 벡터에 대해, 1 x 10의 제1 출력 행벡터를 연접함으로써, 10차원만큼의 길이가 증가된 266차원의 연접 벡터를 생성할 수 있다. 학습 수행부는 상기 연접 벡터를, 덴스 레이어(dense layer)에 입력으로 인가함으로써, p차원의 예측 벡터 를 산출하고, 상기 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, p차원의 확률 벡터를 생성한 후, 상기 확률 벡터의 성분에 해당되는 p개의 확률 값들을 상기 p개의 분류 코드들 각각에 대응되는 확률 값으로 지정하 여, 상기 p개의 확률 값들 중, 상기 제1 코드문에 대응되는 제1 분류 코드에 지정된 확률 값이 최대가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행한다. 이때, 본 발명의 일 실시예에 따르면, 학습 수행부가 사용하는 상기 활성화 함수는 소프트맥스 함수일 수 있다. 여기서, 덴스 레이어란 원하는 길이의 출력을 산출하기 위해서 소정의 가중치를 기반으로 입출력을 연결해둔 레 이어를 의미하는 것으로서, 본 발명에서의 상기 덴스 레이어는 입력으로 인가되는 벡터의 길이를 p차원의 벡터 로 변환하도록 구성되어 있다. 이때, 본 발명의 일실시예에 따르면, 학습 수행부는 상기 연접 벡터를, 상기 덴스 레이어에 입력으로 인가 함으로써, 상기 예측 벡터를 산출하고, 상기 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, 상기 확률 벡 터를 생성한 후, 상기 확률 벡터의 성분에 해당되는 상기 p개의 확률 값들을, 상기 확률 벡터에서의 첫 번째 성 분에 해당되는 확률 값을 시작으로 하여 p번째 성분에 해당되는 확률 값까지, 상기 p개의 분류 코드들 각각에 할당되어 있는 순번에 따라 각 분류 코드에 순차적으로 하나씩 매칭시킴으로써, 상기 p개의 분류 코드들 각각에 대응되는 확률 값을 지정한 후, 상기 p개의 확률 값들 중, 상기 제1 코드문에 대응되는 제1 분류 코드에 지정된 확률 값이 최대가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행 할 수 있다. 그리고, 본 발명의 일실시예에 따르면, 학습 수행부는 상기 p개의 분류 코드들 중 상기 제1 분류 코드에 대한 정답 값을 1로 지정하고, 나머지 p-1개의 분류 코드들에 대한 정답 값을 0으로 지정한 후, 상기 p개의 분 류 코드들 각각에 지정된 정답 값과 상기 p개의 확률 값들을 기초로 하기의 수학식 1의 손실함수에 따른 손실 값이 최소가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행할 수 있다.수학식 1"}
{"patent_id": "10-2021-0170604", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "여기서, L은 손실 값, tk는 상기 p개의 분류 코드들 중 k번째 분류 코드에 지정되어 있는 정답 값, yk는 상기 p 개의 확률 값들 중 k번째 확률 값을 의미한다. 관련해서, 전술한 예와 같이, 연접 벡터 생성부에서 266차원의 연접 벡터가 생성되었다고 하고, 코드 저장 부 상에 상기 표 1과 같이 5개의 분류 코드들이 저장되어 있다라고 가정하고, 학습 수행부의 동작을 설명하면 다음과 같다. 우선, 코드 저장부에 저장되어 있는 5개의 분류 코드들 각각에는 사전 설정된 순번이 할당되어 있을 수 있 다. 관련해서, 하기의 표 3과 같이 5개의 분류 코드들 각각에 순번이 할당되어 있다라고 가정하자. 표 3 보안 취약점의 종류 분류 코드 순번 보안 취약점 없음 CWE-0 1 보안 취약점 1 CWE-384 2 보안 취약점 2 CWE-406 3 보안 취약점 3 CWE-19 4 보안 취약점 4 CWE-28 5 그러면, 학습 수행부는 266차원의 연접 벡터를 상기 덴스 레이어에 입력으로 인가하여 5차원의 예측 벡터 를 산출하고, 상기 5차원의 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, 0~1사이의 크기를 갖는 5개의 확률 값들로 구성된 5차원의 확률 벡터를 생성할 수 있다. 그 이후, 학습 수행부는 상기 5개의 확률 값들을, 상기 확률 벡터에서의 첫 번째 성분에 해당되는 확률 값 을 시작으로 하여 5번째 성분에 해당되는 확률 값까지, 상기 5개의 분류 코드들 각각에 할당되어 있는 순번에 따라 각 분류 코드에 순차적으로 하나씩 매칭시킴으로써, 상기 5개의 분류 코드들 각각에 대응되는 확률 값을 지정할 수 있다. 관련해서, 상기 5차원의 확률 벡터가 '[a1 a2 a3 a4 a5]'라고 하는 경우, 학습 수행부는 'a1'이라는 확률 값을 '1'순번이 할당되어 있는 분류 코드인 'CWE-0'에 대한 확률 값으로 지정할 수 있고, 'a 2'라는 확률 값을 '2'순번이 할당되어 있는 분류 코드인 'CWE-384'에 대한 확률 값으로 지정할 수 있으며, 'a 3'이라는 확률 값을 '3'순번이 할당되어 있는 분류 코드인 'CWE-406'에 대한 확률 값으로 지정할 수 있고, 'a 4'라는 확률 값을 '4'순번이 할당되어 있는 분류 코드인 'CWE-19'에 대한 확률 값으로 지정할 수 있고, 'a5'라 는 확률 값을 '5'순번이 할당되어 있는 분류 코드인 'CWE-28'에 대한 확률 값으로 지정할 수 있다. 그러고 나서, 학습 수행부는 상기 5개의 분류 코드들 중 기계학습 대상으로 선정된 상기 제1 코드문에 대 응되는 제1 분류 코드에 대한 정답 값을 1로 지정하고, 나머지 4개의 분류 코드들에 대한 정답 값을 0으로 지정 할 수 있다. 관련해서, 트레이닝 세트 저장부 상에 저장되어 있는 상기 제1 코드문에 대응되는 상기 제1 분류 코드가 'CWE-19'라고 하는 경우, 학습 수행부는 5개의 분류 코드들 중 'CWE-19'라는 분류 코드에 대 한 정답 값을 1로 지정하고, 나머지 4개의 분류 코드들에 대한 정답 값을 모두 0으로 지정할 수 있다. 그 이후, 학습 수행부는 상기 5개의 분류 코드들 각각에 지정된 정답 값과 상기 5개의 확률 값들인 'a1, a2, a3, a4, a5'를 기초로 상기 수학식 1의 손실함수에 따라 연산을 수행하였을 때 산출되는 손실 값이 최소가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행할 수 있다.이때, 본 발명의 일실시예에 따르면, 학습 수행부는 상기 손실 값이 최소가 되도록 역전파 (BackPropagation) 처리를 수행함으로써, 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행할 수 있다. 이러한 방식으로, 모델 생성부는 트레이닝 세트 저장부에 저장되어 있는 상기 복수의 코드문들을 기 초로 한 기계학습을 반복 수행함으로써, 코드문에 존재하는 보안 취약점의 종류를 구별하기 위한 보안 취약점 구별 모델을 생성할 수 있다. 도 2에는 지금까지 설명한 기계학습을 수행하는 과정에 대한 프레임워크를 도식화한 도면이 도시되어 있다. 도 2를 참조하면, 임베딩 벡터 생성부가 도면부호 211에 도시된 바와 같이, 코드문에 포함된 명령어들에 대한 임베딩 벡터를 생성하고, 행렬 생성부와 출력 벡터 산출부가 도면부호 212에 도시된 바와 같이, 명령어들에 대한 임베딩 벡터를 합성곱 신경망에 인가하여 출력을 만들어 낸 후, 연산 벡터 생성부가 이 출력에 대해 상기 활성화 함수를 적용하여 제1 연산 벡터를 생성하게 된다. 그리고, 출력 행렬 생성부가 도면부호 213에 도시된 바와 같이, 명령어들에 대한 임베딩 벡터를 기초로 순 환 신경망의 각 타임 스텝의 출력을 만들어 낸 후, 출력 행벡터 생성부가 도면부호 214에 도시된 바와 같 이, 이 출력에, 앞서 연산 벡터 생성부가 생성한 제1 연산 벡터를 행렬곱하여 제1 출력 행벡터를 생성하게 된다. 그 이후, 연접 벡터 생성부가 도면부호 215에 도시된 바와 같이, 상기 순환 신경망의 마지막 타임 스텝에 대한 출력 벡터에, 상기 제1 출력 행벡터를 연접하여 연접 벡터를 생성하게 되고, 학습 수행부가 도면부호 216에 도시된 바와 같이, 이 연접 벡터를 덴스 레이어에 입력으로 인가하여 예측 벡터를 산출하고, 이 예측 벡 터를 기초로 각 분류 코드에 대한 확률 값을 생성한 후 입력으로 인가된 코드문에 대한 분류 코드의 확률 값이 최대가 되도록 기계학습을 수행하게 된다. 이렇게, 모델 생성부를 통해 상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확 인의 대상이 되는 대상 코드문이 입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점이 존재하는지 확 인할 것을 지시하는 보안 취약점 확인 명령이 전자 장치에 인가되면, 보안 취약점 확인부는 상기 보 안 취약점 구별 모델을 기초로 상기 p개의 분류 코드들 중, 상기 대상 코드문에 존재하는 보안 취약점에 따른 분류 코드를 선택하여 화면 상에 표시한다. 이때, 본 발명의 일실시예에 따르면, 보안 취약점 확인부는 확인용 임베딩 벡터 생성부, 확인용 행렬 생성부, 확인용 출력 벡터 산출부, 확인용 연산 벡터 생성부, 확인용 출력 행렬 생성부, 확인용 출력 행벡터 생성부, 확인용 연접 벡터 생성부 및 확인 처리부를 포함할 수 있다. 확인용 임베딩 벡터 생성부는 상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되는 상기 대상 코드문이 입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점이 존재하 는지 확인할 것을 지시하는 보안 취약점 확인 명령이 인가되면, 상기 대상 코드문을 구성하는 제2 명령어들을 확인한 후 임베딩 벡터 저장부를 참조하여 상기 제2 명령어들 각각에 대응되는 임베딩 벡터를 생성한다. 관련해서, 전술한 예와 같이, k를 '256'이라고 하고, 입력 값으로 사용될 임베딩 벡터의 개수가 '10개'로 지정 (상기 대상 코드문을 구성하는 제2 명령어들의 개수는 10개 이하임을 가정)되어 있다고 하는 경우, 확인용 임베 딩 벡터 생성부는 임베딩 벡터 저장부를 참조하여 상기 대상 코드문을 구성하는 10개의 상기 제2 명 령어들(상기 제2 명령어들의 개수가 10개 미만인 경우, 나머지 명령어들은 공백으로 취급하여 임베딩함) 각각에 대응되는 256차원의 임베딩 벡터를 생성할 수 있다. 이때, 본 발명의 일실시예에 따르면, 상기 대상 코드문은 변수 등이 개발자에 따라 다른 텍스트가 사용될 수 있 다는 점에서, 상기 대상 코드문에 대한 보안 취약점의 종류 확인을 수행하려는 사용자는 상기 대상 코드문에 포 함된 명령어들 중 상기 복수의 명령어들에 포함되지 않는 명령어가 존재한다면, 해당 명령어들을 상기 복수의 명령어들 중 하나로 변환하는 정규화 작업을 사전 수행할 필요가 있다. 예컨대, 상기 대상 코드문 상에 'String alg'라는 문구가 포함되어 있다고 하고, 'alg'라는 명령어는 상기 복수 의 명령어들에 포함되어 있지 않은 명령어라고 하며, 'String'이라는 명령어 뒤에 나오는 명령어로 'string_val'이라고 하는 명령어가 상기 복수의 명령어들에 포함된 정규 명령어라고 하는 경우, 사용자는 상기 대상 코드문에 포함된 'alg'라는 명령어를 상기 복수의 명령어들 중 하나인 'string_val'이라는 명령어로 변환 하는 명령어 정규화 작업을 수행할 수 있다.확인용 행렬 생성부는 상기 제2 명령어들 각각에 대해, 각 명령어에 대응되는 임베딩 벡터를 n개로 분할한 후 n개로 분할된 벡터들을, 행렬을 구성하는 행벡터로 구성하여 조합함으로써, 상기 제2 명령어들 각각에 대응 되는 입력 행렬을 생성한다. 관련해서, 전술한 예와 같이, n을 '16'이라고 하고, 10개의 제2 명령어들에 대한 256차원의 임베딩 벡터가 생성 되었다고 하는 경우, 확인용 행렬 생성부는 10개의 상기 제2 명령어들 각각에 대해서, 각 명령어에 대응되 는 256차원의 임베딩 벡터를 16개로 분할함으로써, 16차원의 분할 벡터 16개를 만들 수 있다. 그러고 나서, 확 인용 행렬 생성부는 16차원의 분할 벡터 16개를, 행렬을 구성하는 행벡터로 구성하여 조합함으로써, 16 x 16의 크기를 갖는 입력 행렬을 생성할 수 있다. 이러한 방식으로, 확인용 행렬 생성부는 10개의 상기 제2 명령어들 각각에 대해서 상기 입력 행렬을 생성 하는 과정을 수행함으로써, 10개의 상기 제2 명령어들 각각에 대응되는 16 x 16 크기의 입력 행렬을 생성할 수 있다. 확인용 출력 벡터 산출부는 상기 제2 명령어들 각각에 대응되는 입력 행렬을, 상기 제2 명령어들의 개수만 큼의 채널을 갖는 피처맵으로 구성하여, 기계학습이 완료된 상기 합성곱 신경망에 입력으로 인가함으로써, k차 원의 제1 확인용 출력 벡터를 산출한다. 관련해서, 전술한 예와 같이, 확인용 행렬 생성부에서 10개의 상기 제2 명령어들 각각에 대응되는 16 x 16 의 입력 행렬이 생성되었다고 하는 경우, 확인용 출력 벡터 산출부는 10개의 상기 제2 명령어들 각각에 대 응되는 16 x 16의 입력 행렬을, 10개 채널을 갖는 16 x 16 크기의 피처맵으로 구성하여, 기계학습이 완료된 상 기 합성곱 신경망에 입력으로 인가함으로써, 256차원의 제1 확인용 출력 벡터를 산출할 수 있다. 확인용 연산 벡터 생성부는 상기 제1 확인용 출력 벡터를 상기 활성화 함수에 입력으로 인가하여, k차원의 제1 확인용 연산 벡터를 생성한다. 관련해서, 전술한 예와 같이, 상기 활성화 함수가 소프트맥스 함수라고 하고, 확인용 출력 벡터 산출부에 서 256차원의 제1 확인용 출력 벡터가 산출되었다고 하는 경우, 확인용 연산 벡터 생성부는 상기 제1 확인 용 출력 벡터를 상기 활성화 함수인 소프트맥스 함수에 인가하여, 0~1사이의 확률 값을 성분으로 갖는 256차원 의 제1 확인용 연산 벡터를 생성할 수 있다. 확인용 출력 행렬 생성부는 상기 제2 명령어들 각각에 대응되는 임베딩 벡터를 기계학습이 완료된 상기 순 환 신경망의 각 타임 스텝에 입력으로 인가하여, 상기 제2 명령어들 각각의 임베딩 벡터가 입력된 각 타임 스텝 에 대한 k차원의 출력 벡터들을 행벡터로 갖는 제1 확인용 출력 행렬을 생성한다. 관련해서, 전술한 예와 같이, 확인용 임베딩 벡터 생성부에서 10개의 상기 제2 명령어들 각각에 대한 256 차원의 임베딩 벡터가 생성되었다고 하는 경우, 확인용 출력 행렬 생성부는 10개의 상기 제2 명령어들 각 각에 대한 임베딩 벡터를 기계학습이 완료된 상기 순환 신경망을 구성하는 각 타임 스텝에 순차적으로 배치하여 입력으로 인가함으로써, 10개의 타임 스텝 각각으로부터 산출되는 256차원의 출력 벡터를 획득할 수 있다. 이렇게, 256차원의 출력 벡터 10개가 획득되면, 확인용 출력 행렬 생성부는 10개의 256차원의 출력 벡터를, 행렬을 구성하는 행벡터로 구성하여 조합함으로써, 10 x 256의 크기를 갖는 제1 확인용 출력 행렬을 생 성할 수 있다. 확인용 출력 행벡터 생성부는 상기 제1 확인용 연산 벡터를 열벡터로 구성하고, 상기 제1 확인용 출력 행 렬과, 열벡터로 구성된 상기 제1 확인용 연산 벡터 간의 행렬곱을 연산한 후 행렬곱의 연산에 따라 산출된 열벡 터를 행벡터로 전치시킴으로써, 제1 확인용 출력 행벡터를 생성한다. 관련해서, 전술한 예와 같이, 확인용 연산 벡터 생성부에서 256차원의 제1 확인용 연산 벡터가 생성되었다 고 하고, 확인용 출력 행렬 생성부에서 10 x 256의 제1 확인용 출력 행렬이 생성되었다고 하는 경우, 확인 용 출력 행벡터 생성부는 256차원의 제1 확인용 연산 벡터를 열벡터로 구성함으로써, 256 x 1의 크기를 갖 는 열벡터를 만든 후, 10 x 256의 제1 확인용 출력 행렬과, 열벡터로 구성된 256 x 1의 상기 제1 확인용 연산 벡터 간의 행렬곱을 연산함으로써, 10 x 1의 크기를 갖는 열벡터를 생성할 수 있다. 그러고 나서, 확인용 출력 행벡터 생성부는 10 x 1 크기의 열벡터를 행벡터로 전치시킴으로써, 1 x 10의 크기를 갖는 제1 확인용 출 력 행벡터를 생성할 수 있다. 확인용 연접 벡터 생성부는 상기 순환 신경망에서의 마지막 타임 스텝에 대한 k차원의 출력 벡터에 대해, 상기 제1 확인용 출력 행벡터를 연접함으로써, 상기 제1 확인용 출력 행벡터의 길이만큼 길이가 증가된 확인용연접 벡터를 생성한다. 관련해서, 전술한 예와 같이, 상기 순환 신경망의 각 타임 스텝이 256차원의 출력 벡터를 생성하도록 구성되어 있다고 하고, 확인용 출력 행벡터 생성부에서 1 x 10의 크기를 갖는 제1 확인용 출력 행벡터가 생성되었다 고 하는 경우, 확인용 연접 벡터 생성부는 상기 순환 신경망에서의 마지막 타임 스텝에 대한 256차원의 출 력 벡터에 대해, 1 x 10의 제1 확인용 출력 행벡터를 연접함으로써, 10차원만큼의 길이가 증가된 266차원의 확 인용 연접 벡터를 생성할 수 있다. 확인 처리부는 상기 확인용 연접 벡터를, 기계학습이 완료된 상기 덴스 레이어에 입력으로 인가함으로써, p차원의 확인용 예측 벡터를 산출하고, 상기 확인용 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, p차원 의 확인용 확률 벡터를 생성한 후, 상기 확인용 확률 벡터의 성분에 해당되는 p개의 확률 값들을 상기 p개의 분 류 코드들 각각에 대응되는 확률 값으로 지정하여, 상기 p개의 분류 코드들 중, 최대의 확률 값이 지정된 분류 코드를, 상기 대상 코드문에 존재하는 보안 취약점에 따른 분류 코드로 선택하여 화면 상에 표시한다. 관련해서, 전술한 예와 같이, 확인용 연접 벡터 생성부에서 266차원의 확인용 연접 벡터가 생성되었다고 하고, 코드 저장부 상에 표 1과 같이 5개의 분류 코드들이 저장되어 있다고 하는 경우, 확인 처리부 는 266차원의 확인용 연접 벡터를 기계학습이 완료된 상기 덴스 레이어에 입력으로 인가하여 5차원의 확인용 예 측 벡터를 산출하고, 상기 5차원의 확인용 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, 0~1사이의 크기 를 갖는 5개의 확률 값들로 구성된 5차원의 확인용 확률 벡터를 생성할 수 있다. 그 이후, 확인 처리부는 상기 5개의 확률 값들을, 상기 확인용 확률 벡터에서의 첫 번째 성분에 해당되는 확률 값을 시작으로 하여 5번째 성분에 해당되는 확률 값까지, 상기 5개의 분류 코드들 각각에 할당되어 있는 순번에 따라 각 분류 코드에 순차적으로 하나씩 매칭시킴으로써, 상기 5개의 분류 코드들 각각에 대응되는 확률 값을 지정할 수 있다. 관련해서, 상기 5차원의 확인용 확률 벡터가 '[b1 b2 b3 b4 b5]'라고 하는 경우, 확인 처리부는 'b1'이라는 확률 값을 '1'순번이 할당되어 있는 분류 코드인 'CWE-0'에 대한 확률 값으로 지정할 수 있고, 'b2'라는 확률 값을 '2'순번이 할당되어 있는 분류 코드인 'CWE-384'에 대한 확률 값으로 지정할 수 있으며, 'b3'이라는 확률 값을 '3'순번이 할당되어 있는 분류 코드인 'CWE-406'에 대한 확률 값으로 지정할 수 있고, 'b4'라는 확률 값을 '4'순번이 할당되어 있는 분류 코드인 'CWE-19'에 대한 확률 값으로 지정할 수 있고, 'b5'라는 확률 값을 '5'순번이 할당되어 있는 분류 코드인 'CWE-28'에 대한 확률 값으로 지정할 수 있다. 그러고 나서, 확인 처리부는 상기 5개의 분류 코드들 중, 최대의 확률 값이 지정된 분류 코드를, 상기 대 상 코드문에 존재하는 보안 취약점에 따른 분류 코드로 선택하여 화면 상에 표시할 수 있다. 관련해서, 상기 5 개의 분류 코드들 중 'CWE-406'에 대한 확률 값으로 지정된 'b3'이 'b1, b2, b3, b4, b5' 중에서 최대 값을 갖 는 확률 값이라고 한다면, 확인 처리부는 'CWE-406'라는 분류 코드를 상기 대상 코드문에 존재하는 보안 취약점에 따른 분류 코드로 선택하여 화면 상에 표시할 수 있다. 이를 통해, 사용자는 상기 대상 코드문에 'CWE-406'라는 분류 코드를 갖는 보안 취약점인 '보안 취약점 2'가 존재하는 것으로 확인할 수 있다. 도 3은 본 발명의 일실시예에 따른 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성 을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치의 동작 방법을 도시한 순 서도이다. 단계(S310)에서는 사전 설정된 p개의 분류 코드들(상기 p개의 분류 코드들은, 보안 취약점이 없는 경우를 표상 하기 위한 분류 코드와 사전 설정된 p-1(p는 2이상의 자연수임)개의 보안 취약점들 각각을 표상하기 위한 분류 코드로 구성되어 있음)이 저장되어 있는 코드 저장부를 유지한다. 단계(S320)에서는 사전 설정된 프로그래밍 언어에서 사용되는 것으로 지정된 복수의 명령어들을 기초로 작성된 복수의 코드문들(상기 복수의 코드문들 각각은 코드 내에 보안 취약점이 없거나, 상기 p-1개의 보안 취약점들 중 어느 하나의 보안 취약점을 갖도록 구성되어 있음)과, 상기 복수의 코드문들 각각에 대응되는 보안 취약점에 따른 분류 코드로 구성된 트레이닝 세트가 저장되어 있는 트레이닝 세트 저장부를 유지한다. 단계(S330)에서는 상기 트레이닝 세트 저장부에 저장되어 있는 상기 복수의 코드문들 중 어느 하나의 코드문을 선정하여, 상기 선정된 코드문과 그에 대응되는 분류 코드를 기초로 코드문에 존재하는 보안 취약점의 종류를 구별하는 학습 모델을 생성하기 위한 기계학습 과정을, 상기 복수의 코드문들 각각에 대해 반복 수행함으로써, 보안 취약점 구별 모델을 생성한다. 단계(S340)에서는 상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되 는 대상 코드문이 입력으로 인가되면서, 상기 대상 코드문에 어떤 보안 취약점이 존재하는지 확인할 것을 지시하는 보안 취약점 확인 명령이 인가되면, 상기 보안 취약점 구별 모델을 기초로 상기 p개의 분류 코드들 중, 상 기 대상 코드문에 존재하는 보안 취약점에 따른 분류 코드를 선택하여 화면 상에 표시한다. 이때, 본 발명의 일실시예에 따르면, 단계(S330)에서는 상기 복수의 명령어들 각각에 대한 사전 설정된 k(k는 2 이상의 자연수)차원의 임베딩 벡터가 저장되어 있는 임베딩 벡터 저장부를 유지하는 단계, 상기 복수의 코드문 들 중 어느 하나인 제1 코드문이 선정됨에 따라, 상기 제1 코드문에 대한 기계학습 과정이 수행되어야 하는 순 서가 되는 경우, 상기 제1 코드문을 구성하는 제1 명령어들을 확인한 후 상기 임베딩 벡터 저장부를 참조하여 상기 제1 명령어들 각각에 대응되는 임베딩 벡터를 생성하는 단계, 상기 제1 명령어들 각각에 대해, 각 명령어 에 대응되는 임베딩 벡터를 n(n은 2이상의 자연수)개로 분할한 후 n개로 분할된 벡터들을, 행렬을 구성하는 행 벡터로 구성하여 조합함으로써, 상기 제1 명령어들 각각에 대응되는 입력 행렬을 생성하는 단계, 상기 제1 명령 어들 각각에 대응되는 입력 행렬을, 상기 제1 명령어들의 개수만큼의 채널을 갖는 피처맵으로 구성하여, 합성곱 신경망(상기 합성곱 신경망은 출력이 k차원의 벡터가 산출되도록 사전 구성되어 있음)에 입력으로 인가함으로써, k차원의 제1 출력 벡터를 산출하는 단계, 상기 제1 출력 벡터를 사전 설정된 활성화 함수(상기 활성화 함수는 상기 제1 출력 벡터를 구성하는 k개의 성분들을 0~1사이의 확률 값으로 변환하는 함수임)에 입력 으로 인가하여, k차원의 제1 연산 벡터를 생성하는 단계, 상기 제1 명령어들 각각에 대응되는 임베딩 벡터를 순 환 신경망의 각 타임 스텝(상기 순환 신경망의 각 타임 스텝은 출력이 k차원의 벡터가 산출되도록 사전 구성되 어 있음)에 입력으로 인가하여, 상기 제1 명령어들 각각의 임베딩 벡터가 입력된 각 타임 스텝에 대한 k차원의 출력 벡터들을 행벡터로 갖는 제1 출력 행렬을 생성하는 단계, 상기 제1 연산 벡터를 열벡터로 구성하고, 상기 제1 출력 행렬과, 열벡터로 구성된 상기 제1 연산 벡터 간의 행렬곱을 연산한 후 행렬곱의 연산에 따라 산출된 열벡터를 행벡터로 전치시킴으로써, 제1 출력 행벡터를 생성하는 단계, 상기 순환 신경망에서의 마지막 타임 스 텝에 대한 k차원의 출력 벡터에 대해, 상기 제1 출력 행벡터를 연접함으로써, 상기 제1 출력 행벡터의 길이만큼 길이가 증가된 연접 벡터를 생성하는 단계 및 상기 연접 벡터를, 덴스 레이어(상기 덴스 레이어는 출력이 p차원 의 벡터가 산출되도록 사전 구성되어 있음)에 입력으로 인가함으로써, p차원의 예측 벡터를 산출하고, 상기 예 측 벡터를 상기 활성화 함수에 입력으로 인가하여, p차원의 확률 벡터를 생성한 후, 상기 확률 벡터의 성분에 해당되는 p개의 확률 값들을 상기 p개의 분류 코드들 각각에 대응되는 확률 값으로 지정하여, 상기 p개의 확률 값들 중, 상기 제1 코드문에 대응되는 제1 분류 코드에 지정된 확률 값이 최대가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행하는 단계를 포함할 수 있다. 이때, 본 발명의 일실시예에 따르면, 상기 활성화 함수는 소프트맥스 함수이고, 상기 p개의 분류 코드들 각각에 는 사전 설정된 순번이 할당되어 있을 수 있다. 이때, 상기 기계학습을 수행하는 단계는 상기 연접 벡터를, 상 기 덴스 레이어에 입력으로 인가함으로써, 상기 예측 벡터를 산출하고, 상기 예측 벡터를 상기 활성화 함수에 입력으로 인가하여, 상기 확률 벡터를 생성한 후, 상기 확률 벡터의 성분에 해당되는 상기 p개의 확률 값들을, 상기 확률 벡터에서의 첫 번째 성분에 해당되는 확률 값을 시작으로 하여 p번째 성분에 해당되는 확률 값까지, 상기 p개의 분류 코드들 각각에 할당되어 있는 순번에 따라 각 분류 코드에 순차적으로 하나씩 매칭시킴으로써, 상기 p개의 분류 코드들 각각에 대응되는 확률 값을 지정한 후, 상기 p개의 확률 값들 중, 상기 제1 코드문에 대응되는 제1 분류 코드에 지정된 확률 값이 최대가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴 스 레이어에 대한 기계학습을 수행할 수 있다. 또한, 본 발명의 일실시예에 따르면, 상기 기계학습을 수행하는 단계는 상기 p개의 분류 코드들 중 상기 제1 분 류 코드에 대한 정답 값을 1로 지정하고, 나머지 p-1개의 분류 코드들에 대한 정답 값을 0으로 지정한 후, 상기 p개의 분류 코드들 각각에 지정된 정답 값과 상기 p개의 확률 값들을 기초로 상기 수학식 1의 손실함수에 따른 손실 값이 최소가 되도록 상기 합성곱 신경망, 상기 순환 신경망 및 상기 덴스 레이어에 대한 기계학습을 수행 할 수 있다. 또한, 본 발명의 일실시예에 따르면, 단계(S340)에서는 상기 보안 취약점 구별 모델의 생성이 완료된 이후에, 보안 취약점의 종류 확인의 대상이 되는 상기 대상 코드문이 입력으로 인가되면서, 상기 대상 코드문에 어떤 보 안 취약점이 존재하는지 확인할 것을 지시하는 보안 취약점 확인 명령이 인가되면, 상기 대상 코드문을 구성하 는 제2 명령어들을 확인한 후 상기 임베딩 벡터 저장부를 참조하여 상기 제2 명령어들 각각에 대응되는 임베딩 벡터를 생성하는 단계, 상기 제2 명령어들 각각에 대해, 각 명령어에 대응되는 임베딩 벡터를 n개로 분할한 후 n개로 분할된 벡터들을, 행렬을 구성하는 행벡터로 구성하여 조합함으로써, 상기 제2 명령어들 각각에 대응되는 입력 행렬을 생성하는 단계, 상기 제2 명령어들 각각에 대응되는 입력 행렬을, 상기 제2 명령어들의 개수만큼의 채널을 갖는 피처맵으로 구성하여, 기계학습이 완료된 상기 합성곱 신경망에 입력으로 인가함으로써, k차원의 제1 확인용 출력 벡터를 산출하는 단계, 상기 제1 확인용 출력 벡터를 상기 활성화 함수에 입력으로 인가하여,k차원의 제1 확인용 연산 벡터를 생성하는 단계, 상기 제2 명령어들 각각에 대응되는 임베딩 벡터를 기계학습이 완료된 상기 순환 신경망의 각 타임 스텝에 입력으로 인가하여, 상기 제2 명령어들 각각의 임베딩 벡터가 입력 된 각 타임 스텝에 대한 k차원의 출력 벡터들을 행벡터로 갖는 제1 확인용 출력 행렬을 생성하는 단계, 상기 제 1 확인용 연산 벡터를 열벡터로 구성하고, 상기 제1 확인용 출력 행렬과, 열벡터로 구성된 상기 제1 확인용 연 산 벡터 간의 행렬곱을 연산한 후 행렬곱의 연산에 따라 산출된 열벡터를 행벡터로 전치시킴으로써, 제1 확인용 출력 행벡터를 생성하는 단계, 상기 순환 신경망에서의 마지막 타임 스텝에 대한 k차원의 출력 벡터에 대해, 상 기 제1 확인용 출력 행벡터를 연접함으로써, 상기 제1 확인용 출력 행벡터의 길이만큼 길이가 증가된 확인용 연 접 벡터를 생성하는 단계 및 상기 확인용 연접 벡터를, 기계학습이 완료된 상기 덴스 레이어에 입력으로 인가함 으로써, p차원의 확인용 예측 벡터를 산출하고, 상기 확인용 예측 벡터를 상기 활성화 함수에 입력으로 인가하 여, p차원의 확인용 확률 벡터를 생성한 후, 상기 확인용 확률 벡터의 성분에 해당되는 p개의 확률 값들을 상기 p개의 분류 코드들 각각에 대응되는 확률 값으로 지정하여, 상기 p개의 분류 코드들 중, 최대의 확률 값이 지정 된 분류 코드를, 상기 대상 코드문에 존재하는 보안 취약점에 따른 분류 코드로 선택하여 화면 상에 표시하는 단계를 더 포함할 수 있다. 이상, 도 3을 참조하여 본 발명의 일실시예에 따른 전자 장치의 동작 방법에 대해 설명하였다. 여기서, 본 발 명의 일실시예에 따른 전자 장치의 동작 방법은 도 1과 도 2를 이용하여 설명한 전자 장치의 동작에 대한 구성과 대응될 수 있으므로, 이에 대한 보다 상세한 설명은 생략하기로 한다. 본 발명의 일실시예에 따른 전자 장치의 동작 방법은 컴퓨터와의 결합을 통해 실행시키기 위한 저장매체에 저장 된 컴퓨터 프로그램으로 구현될 수 있다. 또한, 본 발명의 일실시예에 따른 전자 장치의 동작 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로 그램 명령 형태로 구현되어 컴퓨터 판독 가능 매체에 기록될 수 있다. 상기 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단독으로 또는 조합하여 포함할 수 있다. 상기 매체에 기록되는 프로그 램 명령은 본 발명을 위하여 특별히 설계되고 구성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크 (floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같 은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실 행될 수 있는 고급 언어 코드를 포함한다. 이상과 같이 본 발명에서는 구체적인 구성 요소 등과 같은 특정 사항들과 한정된 실시예 및 도면에 의해 설명되 었으나 이는 본 발명의 보다 전반적인 이해를 돕기 위해서 제공된 것일 뿐, 본 발명은 상기의 실시예에 한정되 는 것은 아니며, 본 발명이 속하는 분야에서 통상적인 지식을 가진 자라면 이러한 기재로부터 다양한 수정 및 변형이 가능하다. 따라서, 본 발명의 사상은 설명된 실시예에 국한되어 정해져서는 아니되며, 후술하는 특허청구범위뿐 아니라 이 특허청구범위와 균등하거나 등가적 변형이 있는 모든 것들은 본 발명 사상의 범주에 속한다고 할 것이다."}
{"patent_id": "10-2021-0170604", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일실시예에 따른 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성 을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치의 구조를 도시한 도면이 다. 도 2는 본 발명의 일실시예에 따른 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성 을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치의 동작을 설명하기 위한 도면이다. 도 3은 본 발명의 일실시예에 따른 소스코드 보안 취약점의 종류를 구별하는 인공지능 기반의 구별 모델의 생성 을 통해 소스코드에 대한 보안 취약점의 종류를 확인할 수 있도록 지원하는 전자 장치의 동작 방법을 도시한 순 서도이다."}
