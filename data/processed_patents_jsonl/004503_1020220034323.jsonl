{"patent_id": "10-2022-0034323", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0136485", "출원번호": "10-2022-0034323", "발명의 명칭": "전자 장치 및 이의 제어 방법", "출원인": "삼성전자주식회사", "발명자": "조경선"}}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,외부 기기 또는 서버와 통신 연결을 수행하는 통신 인터페이스;적어도 하나의 인스트럭션(Instruction)을 저장하는 메모리; 및상기 메모리와 연결되어 상기 전자 장치를 제어하는 프로세서;를 포함하고,상기 프로세서는,공유 라이브러리(Shared Library)에 포함된 함수 주소를 요청하는 제1 명령을 식별하고,사용자 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수의 주소 정보를 식별하기 위한 제2 테이블을이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제1 명령에 대응되는 함수에 대한 정보를 식별하고,연결자를 이용하여 상기 제1 명령에 대응되는 함수에 대한 정보를 함수 식별 이력에 대한 정보를 저장하는 제3테이블로 저장하고,공유 라이브러리에 포함된 함수 주소를 요청하는 제2 명령을 식별하고,상기 제3 테이블을 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하고,상기 제2 명령에 대응되는 함수에 대한 정보에 기초하여, 상기 제2 명령에 대응되는 함수를 식별하고 상기 제2명령에 대응되는 동작을 수행하는, 전자 장치."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 프로세서는,상기 제1 명령에 대응되는 함수의 함수 심볼, 식별 횟수, 식별 시간대, 단위 시간당 데이터 전송량 및 식별 패턴 중 적어도 하나를 포함하는 함수 식별 이력에 대한 정보를 제3 테이블로 저장하는, 전자 장치."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 프로세서는, 상기 제1 명령에 대응되는 함수에 대한 정보를 라이브러리의 유형 또는 리소스의 유형 별로 분류하여 제3 테이블로 저장하는, 전자 장치."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 프로세서는,상기 제3 테이블로 저장된 함수 식별 이력에 대한 정보에 기초하여, 상기 제2 명령의 위험도가 기 설정된 값 이상인지 여부를 식별하고,상기 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 상기 제2 명령을 차단하는, 전자 장치."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,공개특허 10-2023-0136485-3-상기 프로세서는,상기 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 상기 제2 명령에 대응되는 함수의 식별 횟수및 단위 시간당 데이터 전송량 중 적어도 하나를 임계 값 이하로 제한하는, 전자 장치."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 프로세서는,상기 제3 테이블에 상기 제2 명령에 대응되는 함수에 대한 정보가 포함되지 않은 것으로 식별되면, 상기 제1 테이블 및 상기 제2 테이블을 이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하고,상기 연결자를 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 제3 테이블로 저장하는, 전자 장치."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 제1 테이블은,PLT(Procedure Linkage Table)이고,상기 제2 테이블은,GOT(Global Offset Table)이고,상기 제3 테이블은,커널(Kernel)에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table)이고,상기 연결자는,DL(Dynamic Linker)인, 전자 장치."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "전자 장치의 제어 방법에 있어서,공유 라이브러리(Shared Library)에 포함된 함수 주소를 요청하는 제1 명령을 식별하는 단계;사용자 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수의 주소 정보를 식별하기 위한 제2 테이블을이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제1 명령에 대응되는 함수에 대한 정보를 식별하는 단계; 연결자를 이용하여 상기 제1 명령에 대응되는 함수에 대한 정보를 함수 식별 이력에 대한 정보를 저장하는 제3테이블로 저장하는 단계; 공유 라이브러리에 포함된 함수 주소를 요청하는 제2 명령을 식별하는 단계;상기 제3 테이블을 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계; 및상기 제2 명령에 대응되는 함수에 대한 정보에 기초하여, 상기 제2 명령에 대응되는 함수를 식별하고 상기 제2명령에 대응되는 동작을 수행하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 제3 테이블로 저장하는 단계는,상기 제1 명령에 대응되는 함수의 함수 심볼, 식별 횟수, 식별 시간대, 단위 시간당 데이터 전송량 및 식별 패턴 중 적어도 하나를 포함하는 함수 식별 이력에 대한 정보를 제3 테이블로 저장하는 단계;를 포함하는, 제어공개특허 10-2023-0136485-4-방법."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서,상기 제3 테이블로 저장하는 단계는,상기 제1 명령에 대응되는 함수에 대한 정보를 라이브러리의 유형 또는 리소스의 유형 별로 분류하여 제3 테이블로 저장하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제8항에 있어서,상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계는,상기 제3 테이블로 저장된 함수 식별 이력에 대한 정보에 기초하여, 상기 제2 명령의 위험도가 기 설정된 값 이상인지 여부를 식별하는 단계;를 포함하고,상기 동작을 수행하는 단계는,상기 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 상기 제2 명령을 차단하는, 제어 방법."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 동작을 수행하는 단계는,상기 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 상기 제2 명령에 대응되는 함수의 식별 횟수및 단위 시간당 데이터 전송량 중 적어도 하나를 임계 값 이하로 제한하는, 제어 방법."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제8항에 있어서,상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계는,상기 제3 테이블에 상기 제2 명령에 대응되는 함수에 대한 정보가 포함되지 않은 것으로 식별되면, 상기 제1 테이블 및 상기 제2 테이블을 이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계; 및상기 연결자를 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 제3 테이블로 저장하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2022-0034323", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제8항에 있어서,상기 제1 테이블은,PLT(Procedure Linkage Table)이고,상기 제2 테이블은,GOT(Global Offset Table)이고,상기 제3 테이블은,커널(Kernel)에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table)이고,상기 연결자는,DL(Dynamic Linker)인, 제어방법.공개특허 10-2023-0136485-5-청구항 15 전자 장치의 프로세서에 의해 실행되어 상기 전자 장치가 동작을 수행하도록 하는 컴퓨터 명령을 저장하는 비일시적 컴퓨터 판독가능 기록매체에 있어서,공유 라이브러리(Shared Library)에 포함된 함수 주소를 요청하는 제1 명령을 식별하는 단계;사용자 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수의 주소 정보를 식별하기 위한 제2 테이블을이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제1 명령에 대응되는 함수에 대한 정보를 식별하는 단계; 연결자를 이용하여 상기 제1 명령에 대응되는 함수에 대한 정보를 함수 식별 이력에 대한 정보를 저장하는 제3테이블로 저장하는 단계; 공유 라이브러리에 포함된 함수 주소를 요청하는 제2 명령을 식별하는 단계;상기 제3 테이블을 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계; 및상기 제2 명령에 대응되는 함수에 대한 정보에 기초하여, 상기 제2 명령에 대응되는 함수를 식별하고 상기 제2명령에 대응되는 동작을 수행하는 단계;를 포함하는, 컴퓨터 판독가능 기록매체."}
{"patent_id": "10-2022-0034323", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 IoT 환경에서 사용되는 경량 전자 장치, 경량 단말 및 플랫폼에 대한 제3자의 불법적인 권한 탈취 및 공격을 효율적으로 탐지하여 제한/방지하는 전자 장치 및 이의 제어 방법에 관한 것으로, 외부 기기 또는 서버와 통신 연결을 수행하는 통신 인터페이스, 적어도 하나의 인스트럭션(Instruction)을 저장하는 메모리 및 메모리와 (뒷면에 계속)"}
{"patent_id": "10-2022-0034323", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 전자 장치 및 이의 제어 방법에 관한 것으로, 더욱 상세하게는, IoT 환경에서 사용되는 전자 장치, 단말 및 플랫폼 등에 대한 제3자의 권한 탈취, DDos/Botnet 공격을 효율적으로 탐지하고, 이를 방지하기 위한 전자 장치 및 이의 제어 방법에 관한 것이다."}
{"patent_id": "10-2022-0034323", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "일상 생활 및 산업에서 활용되는 가전, 단말, 설비 등의 전자 장치가 종류가 다양해지고 기술의 고도화, 분업화 가 진행되면서 복수의 전자 장치를 네트워크로 연결하여 사용 편의를 증진하고 효율적으로 관리하기 위한 방안 이 주목 받기 시작하였다. 이와 같은 기술은 사물 인터넷(Internet of Things), 즉 IoT로 통칭될 수 있으며, IoT 관련 기술에 대한 연구 및 활용이 활발히 진행되고 있다. IoT 기술은 전자 장치를 네트워크를 통한 유기적 연결을 구현함으로써 보다 편리하고 효율적으로 목표하는 환경을 조성하고 작업을 수행될 수 있도록 한다. 예를 들어, 가정에서 사용하는 냉장고, 공기조화장치, 세탁기, 건조기, TV, 컴퓨터, 웨어러블 디바이스, 사용자 단말 등의 전자 장치를 네트워크로 연결하여 각 전자 장치의 작동 현황, 문제점 및 사용자의 현재 상태 등에 관 한 정보를 사용자가 쉽게 파악할 수 있도록 하고, 각 전자 장치는 사용자에게 필요한 최적화된 환경을 조성하기 위한 작업을 수행할 수 있다. 또 다른 예로, 생산 공정에 사용하는 각종 장치 및 설비들을 관리하기 위한 다양한 센서를 부착하고, 이를 클라 우드와 연동하여 데이터를 모니터링, 수집하고 수집된 데이터에 기초하여 설비의 위치, 가동범위, 가동시간, 가 동 주기 등을 최적화 할 수 있다. 복수의 전자 장치를 네트워크로 통합하여 제어/관리하는 경우, 본래 의도된 사용자가 아닌 제3자가 각 전자 장 치에 대한 접근 권한을 탈취하는 등의 DDos/Botnet 공격이 발생할 수 있다. 종래에는 위와 같은 제3자에 의한 DDos/Botnet 공격에 대비하여 전자 장치, 단말 및 플랫폼에서 API(Application Program Interface) 허가 레벨 또는 네트워크 레벨에서 IP/Port 및 암호화된 페이로드를 분석 하였고, 각 장치 및 플랫폼 별로 PLT(Procedure Linkage Table) 및 GOT(Global Offset Table)를 참조하여 불법 적인 권한 탈취 및 공격을 식별하고 방지하는 기술들이 존재하였다. 종래 기술은 각 전자 장치, 단말 및 플랫폼에서 제3자의 불법적인 권한 탈취 및 공격을 식별하여 단위 시간당 데이터 처리량 및 충전 용량에 제한이 있는 경량 전자 장치, 단말 등에서는 적용하기 어려움이 존재하였다.따라서, 위와 같은 제한이 있는 경량 전자 장치, 단말 등에서 활용될 수 있는 제3자에 의한 권한 탈취 및 공격 을 탐지하여 이를 방지할 필요성이 있고, 이를 구체적으로 실현할 방안의 모색이 요청된다."}
{"patent_id": "10-2022-0034323", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상술한 문제를 해결하기 위해 고안된 것으로, 본 개시의 목적은 커널(Kernel) 레벨에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table)를 이용하여 IoT 환경에서 사용되는 경량 전자 장치, 경량 단 말 및 플랫폼에 대한 제3자의 불법적인 권한 탈취 및 공격을 효율적으로 탐지하여 제한/방지하는 전자 장치 및 이의 제어 방법을 제공함에 있다."}
{"patent_id": "10-2022-0034323", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상술한 목적을 달성하기 위한 본 실시 예에 따른 전자 장치는, 외부 기기 또는 서버와 통신 연결을 수행하는 통 신 인터페이스, 적어도 하나의 인스트럭션(Instruction)을 저장하는 메모리 및 상기 메모리와 연결되어 상기 전 자 장치를 제어하는 프로세서를 포함하고, 상기 프로세서는, 공유 라이브러리(Shared Library)에 포함된 함수 주소를 요청하는 제1 명령을 식별하고, 사용자 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수의 주 소 정보를 식별하기 위한 제2 테이블을 이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제1 명령에 대 응되는 함수에 대한 정보를 식별하고, 연결자를 이용하여 상기 제1 명령에 대응되는 함수에 대한 정보를 함수 식별 이력에 대한 정보를 저장하는 제3 테이블로 저장하고, 공유 라이브러리에 포함된 함수 주소를 요청하는 제 2 명령을 식별하고, 상기 제3 테이블을 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하고, 상기 제2 명령에 대응되는 함수에 대한 정보에 기초하여, 상기 제2 명령에 대응되는 함수를 식별하고 상기 제2 명령 에 대응되는 동작을 수행할 수 있다. 한편, 상기 프로세서는, 상기 제1 명령에 대응되는 함수의 함수 심볼, 식별 횟수, 식별 시간대, 단위 시간당 데 이터 전송량 및 식별 패턴 중 적어도 하나를 포함하는 함수 식별 이력에 대한 정보를 제3 테이블로 저장할 수 있다. 한편, 상기 프로세서는, 상기 제1 명령에 대응되는 함수에 대한 정보를 라이브러리의 유형 또는 리소스의 유형 별로 분류하여 제3 테이블로 저장할 수 있다. 한편, 상기 프로세서는, 상기 제3 테이블로 저장된 함수 식별 이력에 대한 정보에 기초하여, 상기 제2 명령의 위험도가 기 설정된 값 이상인지 여부를 식별하고, 상기 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별 되면, 상기 제2 명령을 차단할 수 있다. 한편, 상기 프로세서는, 상기 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 상기 제2 명령에 대 응되는 함수의 식별 횟수 및 단위 시간당 데이터 전송량 중 적어도 하나를 임계 값 이하로 제한할 수 있다. 한편, 상기 프로세서는, 상기 제3 테이블에 상기 제2 명령에 대응되는 함수에 대한 정보가 포함되지 않은 것으 로 식별되면, 상기 제1 테이블 및 상기 제2 테이블을 이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하고, 상기 연결자를 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 제3 테이블로 저장할 수 있다. 한편, 상기 제1 테이블은, PLT(Procedure Linkage Table)이고, 상기 제2 테이블은, GOT(Global Offset Table) 이고, 상기 제3 테이블은, 커널(Kernel)에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table)이고, 상기 연결자는, DL(Dynamic Linker)일 수 있다. 본 개시의 일 실시 예에 따른 전자 장치의 제어 방법은, 공유 라이브러리(Shared Library)에 포함된 함수 주소 를 요청하는 제1 명령을 식별하는 단계, 사용자 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수의 주소 정보를 식별하기 위한 제2 테이블을 이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제1 명령에 대응되는 함수에 대한 정보를 식별하는 단계, 연결자를 이용하여 상기 제1 명령에 대응되는 함수에 대한 정보를 함수 식별 이력에 대한 정보를 저장하는 제3 테이블로 저장하는 단계, 공유 라이브러리에 포함된 함수 주소를 요청하는 제2 명령을 식별하는 단계, 상기 제3 테이블을 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보 를 식별하는 단계 및 상기 제2 명령에 대응되는 함수에 대한 정보에 기초하여, 상기 제2 명령에 대응되는 함수 를 식별하고 상기 제2 명령에 대응되는 동작을 수행하는 단계를 포함할 수 있다.한편, 상기 제3 테이블로 저장하는 단계는, 상기 제1 명령에 대응되는 함수의 함수 심볼, 식별 횟수, 식별 시간 대, 단위 시간당 데이터 전송량 및 식별 패턴 중 적어도 하나를 포함하는 함수 식별 이력에 대한 정보를 제3 테 이블로 저장하는 단계를 포함할 수 있다. 한편, 상기 제3 테이블로 저장하는 단계는, 상기 제1 명령에 대응되는 함수에 대한 정보를 라이브러리의 유형 또는 리소스의 유형 별로 분류하여 제3 테이블로 저장하는 단계를 포함할 수 있다. 한편, 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계는, 상기 제3 테이블로 저장된 함수 식별 이 력에 대한 정보에 기초하여, 상기 제2 명령의 위험도가 기 설정된 값 이상인지 여부를 식별하는 단계를 포함하 고, 상기 동작을 수행하는 단계는, 상기 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 상기 제2 명령을 차단할 수 있다. 한편, 상기 동작을 수행하는 단계는, 상기 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 상기 제 2 명령에 대응되는 함수의 식별 횟수 및 단위 시간당 데이터 전송량 중 적어도 하나를 임계 값 이하로 제한할 수 있다. 한편, 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계는, 상기 제3 테이블에 상기 제2 명령에 대 응되는 함수에 대한 정보가 포함되지 않은 것으로 식별되면, 상기 제1 테이블 및 상기 제2 테이블을 이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계 및 상 기 연결자를 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 제3 테이블로 저장하는 단계를 포함할 수 있다. 한편, 상기 제1 테이블은, PLT(Procedure Linkage Table)이고, 상기 제2 테이블은, GOT(Global Offset Table) 이고, 상기 제3 테이블은, 커널(Kernel)에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table)이고, 상기 연결자는, DL(Dynamic Linker)일 수 있다. 본 개시의 일 실시 예에 따른 전자 장치의 프로세서에 의해 실행되어 상기 전자 장치가 동작을 수행하도록 하는 컴퓨터 명령을 저장하는 비일시적 컴퓨터 판독가능 기록매체는 공유 라이브러리(Shared Library)에 포함된 함수 주소를 요청하는 제1 명령을 식별하는 단계, 사용자 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수 의 주소 정보를 식별하기 위한 제2 테이블을 이용하여 상기 공유 라이브러리에 포함된 함수들 중 상기 제1 명령 에 대응되는 함수에 대한 정보를 식별하는 단계, 연결자를 이용하여 상기 제1 명령에 대응되는 함수에 대한 정 보를 함수 식별 이력에 대한 정보를 저장하는 제3 테이블로 저장하는 단계, 공유 라이브러리에 포함된 함수 주 소를 요청하는 제2 명령을 식별하는 단계, 상기 제3 테이블을 이용하여 상기 제2 명령에 대응되는 함수에 대한 정보를 식별하는 단계 및 상기 제2 명령에 대응되는 함수에 대한 정보에 기초하여, 상기 제2 명령에 대응되는 함수를 식별하고 상기 제2 명령에 대응되는 동작을 수행하는 단계를 포함할 수 있다."}
{"patent_id": "10-2022-0034323", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시에 따른 발명은 IoT 환경에서 사용되는 경량 전자 장치, 경량 단말 및 플랫폼에 대한 제3자의 불법적인 권한 탈취 및 공격을 효율적으로 탐지하여 제한/방지할 수 있다. 그 외에 본 개시의 실시 예로 인하여 얻을 수 있거나 예측되는 효과에 대해서는 본 개시의 실시 예에 대한 상세 한 설명에서 직접적 또는 암시적으로 개시하도록 한다. 예컨대, 본 개시의 실시 예에 따라 예측되는 다양한 효 과에 대해서는 후술될 상세한 설명 내에서 개시될 것이다. 본 개시의 다른 양상, 이점 및 두드러진 특징들은 첨부된 도면과 관련하여 본 발명의 다양한 실시 예들을 개시 하는 다음의 상세한 설명으로부터 당업자에게 명백해질 것이다."}
{"patent_id": "10-2022-0034323", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 실시 예들은 다양한 변환을 가할 수 있고 여러 가지 실시 예를 가질 수 있는바, 특정 실시 예들을 도면에 예 시하고 상세한 설명에 상세하게 설명하고자 한다. 그러나 이는 특정한 실시 형태에 대해 범위를 한정하려는 것 이 아니며, 본 개시의 실시 예의 다양한 변경(modifications), 균등물(equivalents), 및/또는 대체물 (alternatives)을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 구성요소에 대해서는 유 사한 참조 부호가 사용될 수 있다. 본 개시를 설명함에 있어서, 관련된 공지 기능 혹은 구성에 대한 구체적인 설명이 본 개시의 요지를 불필요하게 흐릴 수 있다고 판단되는 경우 그에 대한 상세한 설명은 생략한다. 덧붙여, 하기 실시 예는 여러 가지 다른 형태로 변형될 수 있으며, 본 개시의 기술적 사상의 범위가 하기 실시 예에 한정되는 것은 아니다. 오히려, 이들 실시 예는 본 개시를 더욱 충실하고 완전하게 하고, 당업자에게 본 개시의 기술적 사상을 완전하게 전달하기 위하여 제공되는 것이다. 본 개시에서 사용한 용어는 단지 특정한 실시 예를 설명하기 위해 사용된 것으로, 권리범위를 한정하려는 의도 가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 개시에서, \"가진다,\" \"가질 수 있다,\" \"포함한다,\" 또는 \"포함할 수 있다\" 등의 표현은 해당 특징(예: 수치, 기능, 동작, 또는 부품 등의 구성요소)의 존재를 가리키며, 추가적인 특징의 존재를 배제하지 않는다. 본 개시에서, \"A 또는 B,\" \"A 또는/및 B 중 적어도 하나,\" 또는 \"A 또는/및 B 중 하나 또는 그 이상\"등의 표현 은 함께 나열된 항목들의 모든 가능한 조합을 포함할 수 있다. 예를 들면, \"A 또는 B,\" \"A 및 B 중 적어도 하나,\" 또는 \"A 또는 B 중 적어도 하나\"는, 적어도 하나의 A를 포함, 적어도 하나의 B를 포함, 또는 적어도 하나의 A 및 적어도 하나의 B 모두를 포함하는 경우를 모두 지칭할 수 있다. 본 개시에서 사용된 \"제1,\" \"제2,\" \"첫째,\" 또는 \"둘째,\"등의 표현들은 다양한 구성요소들을, 순서 및/또는 중 요도에 상관없이 수식할 수 있고, 한 구성요소를 다른 구성요소와 구분하기 위해 사용될 뿐 해당 구성요소들을 한정하지 않는다. 어떤 구성요소(예: 제1 구성요소)가 다른 구성요소(예: 제2 구성요소)에 \"(기능적으로 또는 통신적으로) 연결되 어((operatively or communicatively) coupled with/to)\" 있다거나 \"접속되어(connected to)\" 있다고 언급된 때에는, 어떤 구성요소가 다른 구성요소에 직접적으로 연결되거나, 다른 구성요소(예: 제3 구성요소)를 통하여 연결될 수 있다고 이해되어야 할 것이다. 반면에, 어떤 구성요소(예: 제1 구성요소)가 다른 구성요소(예: 제2 구성요소)에 \"직접 연결되어\" 있다거나 \"직 접 접속되어\" 있다고 언급된 때에는, 어떤 구성요소와 다른 구성요소 사이에 다른 구성요소(예: 제3 구성요소) 가 존재하지 않는 것으로 이해될 수 있다. 본 개시에서 사용된 표현 \"~하도록 구성된(또는 설정된)(configured to)\"은 상황에 따라, 예를 들면, \"~에 적합 한(suitable for),\" \"~하는 능력을 가지는(having the capacity to),\" \"~하도록 설계된(designed to),\" \"~하도 록 변경된(adapted to),\" \"~하도록 만들어진(made to),\" 또는 \"~를 할 수 있는(capable of)\"과 바꾸어 사용될 수 있다. 용어 \"~하도록 구성된(또는 설정된)\"은 하드웨어적으로 \"특별히 설계된(specifically designed to)\" 것만을 반드시 의미하지 않을 수 있다. 대신, 어떤 상황에서는, \"~하도록 구성된 장치\"라는 표현은, 그 장치가 다른 장치 또는 부품들과 함께 \"~할 수 있는\" 것을 의미할 수 있다. 예를 들면, 문구 \"A, B, 및 C를 수행하도록 구성된(또는 설정된) 프로세서\"는 해당 동작을 수행하기 위한 전용 프로세서(예: 임베디드 프로세서), 또는 메모리 장치에 저장된 하나 이상의 소프트 웨어 프로그램들을 실행함으로써, 해당 동작들을 수행할 수 있는 범용 프로세서(generic-purpose processor)(예: CPU 또는 application processor)를 의미할 수 있다. 실시 예에 있어서 '모듈' 혹은 '부'는 적어도 하나의 기능이나 동작을 수행하며, 하드웨어 또는 소프트웨어로 구현되거나 하드웨어와 소프트웨어의 결합으로 구현될 수 있다. 또한, 복수의 '모듈' 혹은 복수의 '부'는 특정 한 하드웨어로 구현될 필요가 있는 '모듈' 혹은 '부'를 제외하고는 적어도 하나의 모듈로 일체화되어 적어도 하 나의 프로세서로 구현될 수 있다. 한편, 도면에서의 다양한 요소와 영역은 개략적으로 그려진 것이다. 따라서, 본 발명의 기술적 사상은 첨부한 도면에 그려진 상대적인 크기나 간격에 의해 제한되지 않는다. 이하에서는 첨부한 도면을 참고하여 본 개시에 따른 실시 예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 도 1은 본 개시의 일 실시 예에 따른, IoT 클라우드 및 서버를 통한 IoT 장치의 제어/관리를 설명하기 위 한 도면이다. 도 1을 참조하면, 본 개시에 따른 전자 장치는 서버로 구현될 수 있으며, 서버는 클라우드형 서버일 수 있 다. 전자 장치의 프로세서는 IoT 클라우드를 통해 에어컨(200-1), 냉장고(200-2), 세탁기(200-3), TV(200-4) 등 다양한 전자 장치와 통신 연결을 수행할 수 있고, 전자 장치의 작업 수행에 있어서 필 요한 시스템 콜 패턴 또는 콜 플로우를 모니터링하고 시스템 콜 패턴 또는 콜 플로우에 대한 정보를 획득할 수 있다. 여기서, 전자 장치의 프로세서는 IoT 환경에서 다양한 전자 장치와 통신 연결을 수행하여 각 전 자 장치의 작업 수행에 필요한 함수의 함수 심볼, 함수 식별 횟수, 함수 식별 시간대, 단위 시간당 데이터 전송량 및 함수 식별 패턴 중 적어도 하나를 포함하는 함수 식별 이력에 대한 정보를 실시간으로 모니터링하고 정보를 수집하거나 전자 장치는 평상시에 모니터링되고 수집된 시스템 콜 패턴 또는 콜 플로우와 다른 시스템 콜 패턴 또는 콜 플로우를 식별하게 되면, 해당 시스템 콜을 차단하거나, 시스템 콜 식별 횟수, 단위 시간당 데이터 전송량을 임계 값 이하로 제한할 수 있다. 즉, 전자 장치는 본래 사용자가 아닌 제3자의 IoT 장치(200-1, 200-2, 200-3, 200-4)에 대한 권한 탈취 및 공격을 감지하여 이를 차단할 수 있다. 도 2는 본 개시의 일 실시 예에 따른, 전자 장치의 구성을 도시한 블록도이다. 도 2를 참조하면, 전자 장치는, 예를 들어 클라이언트에게 네트워크를 통해 서비스하는 컴퓨터인 서버일 수 있다. 서버는, FTP 서버, 웹 서버, 데이터 베이스 서버, 클라우드형 서버일 수 있으며, 서버는 리눅스 등의 운영체제로 구축될 수 있다. 다만, 전자 장치는 이에 국한되는 것은 아니며, 이외에 전자 장치는 스 마트 폰, 태블릿 컴퓨터, 랩탑 컴퓨터, 넷북 컴퓨터 등의 사용자 단말을 통해 구현될 수 있다. 전자 장치는 통신 인터페이스, 메모리, 프로세서를 포함할 수 있으며, 상술한 구성에 국한 되지 않고 IoT 장치를 제어/관리하기 위한 구동 회로 등 다양한 전자 장치 구성을 포함할 수 있다. 통신 인터페이스는 무선 통신 인터페이스, 유선 통신 인터페이스 또는 입력 인터페이스를 포함할 수 있다. 무선 통신 인터페이스는, 무선 통신 기술이나 이동 통신 기술을 이용하여 각종 외부 장치와 통신을 수행할 수 있다. 이러한 무선 통신 기술로는, 예를 들어, 블루투스(Bluetooth), 저전력 블루투스(Bluetooth Low Energy), 캔(CAN) 통신, 와이 파이(Wi-Fi), 와이파이 다이렉트(Wi-Fi Direct), 초광대역 통신(UWB, ultrawide band), 지 그비(zigbee), 적외선 통신(IrDA, infrared Data Association) 또는 엔에프씨(NFC, Near Field Communication) 등이 포함될 수 있으며, 이동 통신 기술 로는, 3GPP, 와이맥스(Wi-Max), LTE(Long Term Evolution), 5G 등이 포함될 수 있다. 무선 통신 인터페이스는 전자기파를 외부로 송신하거나 또는 외부에서 전달된 전자기파를 수신 할 수 있는 안테나, 통신 칩 및 기판 등을 이용하여 구현될 수 있다. 통신 인터페이스는 실시 예에 따라 어느 하나가 생략될 수도 있다. 따라서, 전자 장치는 무선 통신 인터페이스만을 포함할 수 있다. 뿐만 아니라, 전자 장치는 무선 통신 인터페이스에 의한 무선 접속 및 유 선 통신 인터페이스에 의한 유선 접속을 지원하는 통합된 통신 인터페이스를 구비할 수도 있다. 전자 장치는 한 가지 방식의 통신 연결을 수행하는 한 개의 통신 인터페이스를 포함하는 경우에 국한 되지 않고, 복수의 통신 인터페이스를 포함할 수 있다. 본 개시의 다양한 실시 예에 따른 프로세서는 통신 인터페이스를 통해 다양한 외부 전자 장치 또는 서버와 통신을 수행할 수 있다. 구체적으로, 프로세서는 통신 인터페이스를 통해 TV(200-4), 에어컨(200-1), 세탁기(200-3), 냉장고 (200-2), 건조기, 전자레인지, 가스레인지, 인덕터, 보일러, 커피 포트, 드라이기, 전등, 프로젝터, 스피커, 컴 퓨터, 노트북, 태플릿, 스마트 폰, 유선 전화기, 외부 서버 등과 통신 연결을 수행하여 공유 라이브러리 주소 요청 신호, 함수 정보 또는 외부 전자 장치를 제어하는 신호를 전송하거나, 외부 전자 장치로부터 다 양한 신호 등을 수신할 수 있다. 메모리는 각종 프로그램이나 데이터를 일시적 또는 비일시적으로 저장하고, 프로세서의 호출에 따라 서 저장된 정보를 프로세서에 전달한다. 또한, 메모리는, 프로세서의 연산, 처리 또는 제어 동 작 등에 필요한 각종 정보를 전자적 포맷으로 저장할 수 있다. 메모리는, 예를 들어, 주기억장치 및 보조기억장치 중 적어도 하나를 포함할 수 있다. 주기억장치는 롬 (ROM) 및/또는 램(RAM)과 같은 반도체 저장 매체를 이용하여 구현된 것일 수 있다. 롬은, 예를 들어, 통상적인 롬, 이피롬(EPROM), 이이피롬(EEPROM) 및/또는 마스크롬(MASK-ROM) 등을 포함할 수 있다. 램은 예를 들어, 디램 (DRAM) 및/또는 에스램(SRAM) 등을 포함할 수 있다. 보조기억장치는, 플래시 메모리 장치, SD(Secure Digital) 카드, 솔리드 스테이트 드라이브(SSD, Solid State Drive), 하드 디스크 드라이브(HDD, Hard Disc Drive), 자기 드럼, 컴팩트 디스크(CD), 디브이디(DVD) 또는 레이저 디스크 등과 같은 광 기록 매체(optical media), 자기테이프, 광자기 디스크 및/또는 플로피 디스크 등과 같이 데이터를 영구적 또는 반영구적으로 저장 가능한 적어도 하나의 저장 매체를 이용하여 구현될 수 있다. 메모리는 프로세서와 무선 또는 유선으로 연결되어 프로세서가 실행할 적어도 하나의 인스트럭 션을 저장할 수 있다. 메모리는 공유 라이브러리의 유형, 리소스의 유형, 함수 정보, 함수의 심볼, 함수 식별 횟수(340-2), 함수 식별 시간대(340-3), 단위 시간당 데이터 전송량(340-4) 및 함수 식별 패턴(340-5) 중 적어도 하나를 포함하는 함수 식별 이력을 저장할 수 있다. 또한 메모리는 PLT(Procedure Linkage Table), GOT(Global Offset Table), 커널(Kernel)에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table) 등 각종 함수 주소 식별과 관련된 정보가 포함되어 있는 테이블 및 함수 호출 및 식별 과정에서 동적 연결을 수행하는 DL(Dynamic Linker)에 대한 정보를 저장할 수 있다. 한편, 본 개시에서 프로세서는 디지털 신호를 처리하는 중앙처리장치 (central processing unit(CPU)), MCU(Micro Controller Unit), MPU(micro processing unit), 컨트롤러(controller), 어플리케이션 프로세서 (application processor(AP)), 또는 커뮤니케이션 프로세서(communication processor(CP)), ARM 프 로세서 중 하나 또는 그 이상을 포함하거나, 해당 용어로 정의될 수 있다. 또한, 프로세서는 프로세 싱 알고리즘이 내장된 SoC(System on Chip), LSI(large scale integration)로 구현될 수도 있고, FPGA(Field Programmable gate array) 형 태로 구현될 수도 있다. 프로세서는 메모리에 저장된 컴퓨터 실행가능 명령어(computer executable instructions)를 실행함으로써 다양한 기능을 수행할 수 있다. 뿐만 아니라, 프로 세서는 인공지능 기능을 수행하기 위하여, 별도의 AI 전용 프로세서인 GPU(graphics-processing unit), NPU(Neural Processing Unit), VPU(Visual Processing UniT) 중 적어도 하나를 포함할 수 있다. 프로세서는 주문형 집적 회로(Application Specific Integrated Circuit, ASIC), 임베디드 프로세서 , 마이크로 프로세서, 하드웨어 컨트롤 로직, 하드웨어 유한 상태 기계(hardware Finite State Machine, FSM), 디지털 신호 프로세서(Digital Signal Processor, DSP) 중 적어도 하나로 구현될 수 있다. 프로세서는 전자 장치의 전반적인 동작을 제어한다. 구체적으로, 프로세서는 상술한 바와 메모 리를 포함하는 전자 장치의 구성과 연결되며, 상술한 바와 같은 메모리에 저장된 적어도 하나의 인스트럭션을 실행함으로써, 전자 장치의 동작을 전반적으로 제어할 수 있다. 특히, 프로세서는 하나 의 프로세서로 구현될 수 있을 뿐만 아니라 복수의 프로세서로 구현될 수 있다. 본 개시의 일 실시 예에 따른 프로세서는, 공유 라이브러리(Shared Library)에 포함된 함수 주소를 요청하 는 명령에 기초하여 연결자를 통해 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수 주소 정보를 식 별하기 위한 제2 테이블을 참조할 수 있다. 프로세서는 연결자를 이용하여 위 함수 주소 요청 명령에 대응되는 함수에 대한 정보 및 함수 식별 이력에 관한 정보를 커널 레벨에서 통합적으로 관리되는 제3 테이블로 저장할 수 있다. 이후, 프로세서는 공유 라이브러리에 포함된 함수 주소를 요청하는 또 다른 명령에 기초하여 제3 테이블에 저장된 함수 정보 및 함수 식별 이력에 관한 정보를 통해 위 또 다른 명령에 대응되는 함수에 대한 정보를 식별 하고, 위 또 다른 명령에 대응되는 동작을 수행할 수 있다. 상술한 바와 같이 프로세서는 함수 주소 요청 명령을 수신하여 그에 대응되는 동작을 수행하는 경우, 함수 주소 정보를 식별함에 있어 각 전자 장치, 단말 및 플랫폼 별 제1 테이블 및 제2 테이블을 참조하여 개별 적으로 접근하는 것이 아니라 커널 레벨에서 통합적으로 관리되는 제3 테이블을 참조하여 함수 주소 요청 명령 에 대응되는 동작의 제한 여부, 차단/수행 여부를 커널 레벨에서 통합적으로 관리할 수 있다. 프로세서의 구체적인 전자 장치 동작 제어 방법은 도 3 내지 5를 통해 설명하기로 한다. 도 3은 본 개시의 다양한 실시 예에 따른, 커널(Kernel) 레벨에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table)를 이용하여 공유 라이브러리에 포함된 함수 주소를 요청 및 식별하는 과정을 도시한 흐름도이다. 도 3을 참조하면, 프로세서는 공유 라이브러리(Shared Library)에 포함된 함수 주소를 요청하는 제1 명령을 식별할 수 있다. 공유 라이브러리는 다양한 프로세스, 리소스, 전자 장치, 단말 및 플랫폼 등에서 공동으로 이용 가능 한 라이브러리로, 수행하고자 하는 다양한 작업의 함수 정보를 포함하고 있다. 리눅스 기반 환경에서 공유 라이 브러리는 .so의 확장자를 가질 수 있다. 여기서, 공유 라이브러리에 포함된 함수 식별은 전자 장치 , 단말 등 IoT 환경에서의 전자 장치의 동작을 제어하기 위한 과정이다. 프로세서는 사용자 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수의 주소 정보를 식별하기 위 한 제2 테이블을 이용하여 공유 라이브러리에 포함된 함수들 중 제1 명령에 대응되는 함수에 대한 정보를 식별할 수 있다. 여기서, 제1 테이블은 PLT(Procedure Linkage Table)일 수 있고, 제2 테이블은 GOT(Global Offset Table)일 수 있다. PLT는 서버 등의 전자 장치에서 외부 라이브러리(예: 공유 라이브러리)에 포 함된 함수를 호출하여 식별하는 경우 이용되는 테이블을 의미하며, GOT는 실제 함수의 주소를 포함하고 있 는 테이블의 의미한다. 서버 등의 전자 장치에서 PLT를 통해 공유 라이브러리에 포함된 함수를 호출하여 식별하는 경우 GOT를 참조하여 해당 주소를 식별하거나, 주소 정보를 획득할 수 있다. 프로세서는 연결자를 이용하여 제1 명령에 대응되는 함수에 대한 정보를 함수 식별 이력에 대한 정보를 저 장하는 제3 테이블로 저장할 수 있다. 여기서, 연결자는 DL(Dynamic Linker)일 수 있다. 서버 등의 전자 장치가 최초로 공유 라이브러리 에 포함된 함수를 호출하여 식별하는 경우, DL을 통해 PLT를 참조하고, GOT에 포함된 실제 함수 주소를 식별하거나, 실제 함수 주소에 대한 정보를 획득하여 커널 메모리와 연결되어 있는 공유 메모 리로 로딩하는 작업을 수행할 수 있다. 최종적으로 서버 등의 전자 장치는 함수 정보에 기초하여 작 업에 필요한 동작을 수행할 수 있다. 제3 테이블은 커널(Kernel) 레벨에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table)일 수 있다. 여기서, 커널은 전자 장치, 서버 등의 운영체제의 중심을 지칭하는 것으로 전자 장치, 서버 등의 동 작이 올바르게 수행되도록 통제하고 메모리 등의 자원을 배분하거나 응용 프로그램의 실행 등을 처리하는 구성을 말한다. GPLT는 커널 레벨에서 통합적으로 관리되기 때문에 개별적인 전자 장치, 단말 및 플랫폼 등에서 관리 되는 일반적이 PLT 및 GOT와 달리 각 전자 장치, 단말 및 플랫폼에서의 데이터 처리량, 전력 소 모량을 줄일 수 있고, 함수 식별 이력에 대한 정보를 하나의 테이블로 효율적으로 관리할 수 있다.도 4a는 본 개시의 일 실시 예에 따른, GPLT에 포함된 함수 정보를 설명하기 위한 도면이다. 도 4a를 참조하면, 프로세서는 제1 명령에 대응되는 함수의 함수 심볼(340-1), 함수 식별 횟수(340-2), 함 수 식별 시간대(340-3), 단위 시간당 데이터 전송량(340-4) 및 함수 식별 패턴(340-5) 중 적어도 하나를 포함하 는 함수 식별 이력에 대한 정보를 GPLT로 저장할 수 있다. 도 4b는 본 개시의 또 다른 실시 예에 따른, 라이브러리(350-1, 350-2, 350-3) 별로 GPLT에 포함된 함수 정보를 설명하기 위한 도면이다. 프로세서는 제1 명령에 대응되는 함수에 대한 정보를 라이브러리의 유형 또는 리소스의 유형 별로 분류하 여 함수 식별 횟수(340-2), 함수 식별 시간대(340-3), 단위 시간당 데이터 전송량(340-4) 및 함수 식별 패턴 (340-5) 중 적어도 하나를 포함하는 함수 식별 이력에 대한 정보를 GPLT로 저장할 수 있다. 프로세서는 공유 라이브러리에 포함된 함수 주소를 요청하는 제1 명령과 다른 제2 명령을 식별하고, 제3 테이블을 이용하여 제2 명령에 대응되는 함수에 대한 정보를 식별할 수 있다. 프로세서는 제2 명령에 대응되는 함수에 대한 정보에 기초하여, 제2 명령에 대응되는 함수를 식별하고 제2 명령에 대응되는 동작을 수행할 수 있다. 구체적으로, 프로세서는, 제3 테이블인 GPLT로 저장된 함수 식별 이력에 대한 정보에 기초하여, 제2 명령의 위험도가 기 설정된 값 이상인지 여부를 식별할 수 있다. 프로세서가 GPLT로 저장된 함수 식 별 이력에 대한 정보에 기초하여 제2 명령의 위험도가 기 설정된 값 이상인지 여부를 식별하는 과정은 라이브러 리 유병 별 또는 리소스 유형 별로 이루어질 수도 있다. 여기서, 프로세서는, 제3 테이블인 GPLT에 제2 명령에 대응되는 함수에 대한 정보가 포함되지 않은 것으로 식별되면, 제1 테이블인 PLT 및 제2 테이블인 GOT를 이용하여 공유 라이브러리에 포함된 함수들 중 제2 명령에 대응되는 함수에 대한 정보를 식별하고, 연결자를 이용하여 제2 명령에 대응되는 함수에 대한 정보를 제3 테이블인 GPLT로 저장할 수 있다. 프로세서는 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 제2 명령에 대응되는 함수의 식별 횟수(340-2) 및 단위 시간당 데이터 전송량(340-4) 중 적어도 하나를 임계 값 이하로 제한할 수 있다. 본 개시의 또 다른 실시 예에 따른 프로세서는 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 제2 명령을 차단하여 제2 명령에 대응되는 동작을 전혀 수행하지 않을 수 있다. 또한, 프로세서는 GPLT를 통해 라이브러리 유병 별 또는 리소스 유형 별로 함수 주소 정보를 요청하 는 명령을 식별하고 함수 주소 요청 명령에 대응되는 동작의 제한 여부, 차단/수행 여부를 관리할 수도 있다. 도 5는 본 개시의 일 실시 예에 따른, 커널 레벨에서 통합적으로 관리되는 GPLT를 이용하여 공유 라이브러 리에 포함된 함수 주소를 요청 및 식별하는 과정을 도시한 흐름도이다. 프로세서는 공유 라이브러리에 포함된 함수 주소를 요청하는 명령을 식별할 수 있다(S510). 프로세서는 GPLT에 위 함수 주소를 요청하는 명령에 대응되는 함수에 대한 정보가 포함되어 있는지 여부를 식별할 수 있다(S520). GPLT에 위 함수 주소 요청하는 명령에 대응되는 함수에 대한 정보가 포함되 어 있지 않는 것으로 식별되면(S520-N), 프로세서는 PLT 및 GOT를 이용하여 공유 라이브러리 에 포함된 함수들 중 명령에 대응되는 함수에 대한 정보를 식별할 수 있다(S540). 프로세서는 DL을 이용하여 함수 주소를 요청하는 명령에 대응되는 함수에 대한 정보를 GPLT로 저장할 수 있다 (S550). 여기서, 프로세서는 명령에 대응되는 동작을 제한/차단/수행할 수 있다. GPLT에 함수 주소를 요청하는 명령에 대응되는 함수에 대한 정보가 포함된 것으로 식별되면(S520-Y), 프로 세서는 GPLT로 저장된 함수 식별 이력에 대한 정보에 기초하여, 명령의 위험도가 기 설정된 값 이상 인지 여부를 식별할 수 있다(S530). 함수 주소를 요청하는 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면(S560-Y), 프로세서는 함수 주소를 요청하는 명령을 차단할 수 있다(S570). 여기서, 프로세서는 함수 주소를 요청하는 명령을 차단하 는 경우 외에 함수 주소 요청 명령에 따른 함수 식별 횟수(340-2) 또는 단위 시간당 데이터 전송량(340-4) 중 적어도 하나를 제한할 수 있다. 함수 주소를 요청하는 명령의 위험도가 기 설정된 값 미만인 것으로 식별되면(S560-N), 프로세서는 함수 주소를 요청하는 명령에 대응되는 동작을 수행할 수 있다(S580). 도 6은 본 개시의 일 실시 예에 따른, 전자 장치의 동작을 설명하기 위한 흐름도이다. 전자 장치는 공유 라이브러리에 포함된 함수 주소를 요청하는 제1 명령을 식별할 수 있다(S610). 여 기서, 공유 라이브러리에 포함된 함수 식별은 전자 장치, 단말 등 IoT 환경에서의 전자 장치의 동작을 제어하기 위한 과정이다. 전자 장치는 사용자 명령에 대응되는 함수를 식별하기 위한 제1 테이블 및 함수의 주소 정보를 식별하기 위한 제2 테이블을 이용하여 공유 라이브러리에 포함된 함수들 중 제1 명령에 대응되는 함수에 대한 정보 를 식별할 수 있다(S620). 여기서, 제1 테이블은 PLT이고 제2 테이블은 GOT일 수 있다. 전자 장치는 연결자를 이용하여 제1 명령에 대응되는 함수에 대한 정보를 함수 식별 이력에 대한 정보를 저장하는 제3 테이블로 저장할 수 있다(S630). 여기서, 연결자는 DL일 수 있고, 제3 테이블은 커널 레벨에 서 구현되는 GPLT일 수 있다. 전자 장치는 제1 명령에 대응되는 함수의 함수 심볼(340-1), 식별 횟수 (340-2), 식별 시간대(340-3), 단위 시간당 데이터 전송량(340-4) 및 식별 패턴(340-5) 중 적어도 하나를 포함 하는 함수 식별 이력에 대한 정보를 GPLT로 저장할 수 있다. 또한, 전자 장치는 제1 명령에 대응되는 함수에 대한 정보를 라이브러리의 유형 또는 리소스의 유형 별로 분류하여 GPLT로 저장할 수 있다. 전자 장치는 공유 라이브러리에 포함된 함수 주소를 요청하는 제2 명령을 식별할 수 있다(S640). 전자 장치는 제3 테이블을 이용하여 제2 명령에 대응되는 함수에 대한 정보를 식별할 수 있다(S650). 여기 서, 전자 장치는 제3 테이블에 제2 명령에 대응되는 함수에 대한 정보가 포함되지 않은 것으로 식별되면, 제1 테이블 및 제2 테이블을 이용하여 공유 라이브러리에 포함된 함수들 중 제2 명령에 대응되는 함수에 대한 정보를 식별할 수 있다. 전자 장치는 연결자를 이용하여 제2 명령에 대응되는 함수에 대한 정보를 제 3 테이블로 저장할 수 있다. 전자 장치는 제3 테이블로 저장된 함수 식별 이력에 대한 정보에 기초하여, 제2 명령의 위험도가 기 설정된 값 이상인지 여부를 식별할 수 있다. 전자 장치는 제2 명령에 대응되는 함수에 대한 정보에 기초하여, 제2 명령에 대응되는 함수를 식별하고 제 2 명령에 대응되는 동작을 수행할 수 있다(S660). 전자 장치는 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 제2 명령을 차단할 수 있다. 또 다른 실시 예에 따른 전자 장치는 제2 명령의 위험도가 기 설정된 값 이상인 것으로 식별되면, 제2 명령에 대응되는 함수의 식별 횟수(340-2) 및 단위 시간당 데이터 전송량(340-4) 중 적어도 하나를 임계 값 이하로 제한할 수 있다. 일 실시 예에 따르면, 본 문서에 개시된 다양한 실시 예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래 될 수 있다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory (CD- ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두개의 사용자 장치 들(예: 스마트폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품(예: 다운로더블 앱(downloadable app))의 적어도 일부는 제조사의 서버, 어플리케이션 스 토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 이상에서는 본 개시의 바람직한 실시 예에 대하여 도시하고 설명하였지만, 본 개시는 상술한 특정의 실시 예에"}
{"patent_id": "10-2022-0034323", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "한정되지 아니하며, 청구범위에서 청구하는 본 개시의 요지를 벗어남이 없이 당해 개시에 속하는 기술분야에서 통상의 지식을 가진 자에 의해 다양한 변형 실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 개시의 기술 적 사상이나 전망으로부터 개별적으로 이해되어져서는 안될 것이다."}
{"patent_id": "10-2022-0034323", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 개시의 특정 실시 예의 양상, 특징 및 이점은 첨부된 도면들을 참조하여 후술되는 설명을 통해 보다 명확해 질 것이다. 도 1은 본 개시의 일 실시 예에 따른, IoT 클라우드 및 서버를 통한 IoT 장치의 제어/관리를 설명하기 위한 도 면이다. 도 2는 본 개시의 일 실시 예에 따른, 전자 장치의 구성을 도시한 블록도이다. 도 3은 본 개시의 다양한 실시 예에 따른, 커널(Kernel) 레벨에서 통합적으로 관리되는 GPLT(Global ProcedureLinkage Table)를 이용하여 공유 라이브러리에 포함된 함수 주소를 요청 및 식별하는 과정을 도시한 흐름도이다. 도 4a는 본 개시의 일 실시 예에 따른, GPLT(Global Procedure Linkage Table)에 포함된 함수 정보를 설명하기 위한 도면이다. 도 4b는 본 개시의 또 다른 실시 예에 따른, 라이브러리 별로 GPLT(Global Procedure Linkage Table)에 포함된 함수 정보를 설명하기 위한 도면이다. 도 5는 본 개시의 일 실시 예에 따른, 커널(Kernel) 레벨에서 통합적으로 관리되는 GPLT(Global Procedure Linkage Table)를 이용하여 공유 라이브러리에 포함된 함수 주소를 요청 및 식별하는 과정을 도시한 흐름도이다. 도 6은 본 개시의 일 실시 예에 따른, 전자 장치의 동작을 설명하기 위한 흐름도이다."}
