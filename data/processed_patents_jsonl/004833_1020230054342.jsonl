{"patent_id": "10-2023-0054342", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0101304", "출원번호": "10-2023-0054342", "발명의 명칭": "캐시 교체 시스템 및 방법", "출원인": "한국전자통신연구원", "발명자": "김현미"}}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "호스트로부터의 명령에 대응하는 동작을 각각 수행하는 복수의 코어; 및복수의 뱅크로 구성되는 캐시를 포함하되,각 뱅크는, 복수의 블록을 포함하고, 메인 메모리에 저장된 데이터들 중 일부에 해당하는 캐시 데이터를 저장하는 캐시 메모리; 및코어로부터 데이터 요청 수신 시, 상기 요청된 데이터의 상기 캐시 메모리에의 존재 여부에 기초하여, 캐시 히트 및 캐시 미스 중 하나를 판단하고, 캐시 미스로 판단되는 경우, 교체 웨이(Replacement Way)를 결정하고, 상기 결정된 교체 웨이에 메인 메모리로부터 로딩한 데이터를 저장하는 캐시 컨트롤러를 포함하는 것을 특징으로하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 각 코어는, 상기 호스트로부터 명령어 시퀀스 및 CSR(Control and Status Register) 설정 명령어를 포함하는 명령어 실행요청을 수신하고, 상기 명령어 실행 요청에 포함된 명령어 시퀀스를 실행하며, CSR 설정 명령어에 따라 CSR에데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 설정하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 복수의 코어와 상기 캐시 간의 인터페이스를 위한 아비터(Arbiter)를 더 포함하고, 상기 아비터는, 상기 코어로부터의 데이터 요청에 포함되는 주소 정보에 정의된 뱅크 인덱스에 기초하여 해당 뱅크로 데이터 요청을 전송하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 캐시 메모리는, 현재 데이터의 유효 여부를 나타내는 유효성(valid) 값을 저장하는 유효성 메모리;상기 캐시 데이터를 저장하는 데이터 메모리; 및상기 캐시 데이터에 대응하는 태그 데이터를 저장하는 태그 메모리를 포함하는 것을 특징으로 하는 캐시 교체시스템.공개특허 10-2024-0101304-3-청구항 5 제1항에 있어서, 상기 캐시 컨트롤러는, 캐시 히트인 경우, 해당 데이터를 해당 웨이(way)로부터 읽어 상기 코어로 전송하고, 해당 데이터에 설정된 참조 횟수의 카운트를 하나씩 감소시키며, LRU 테이블을 업데이트하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 캐시 컨트롤러는, 캐시 미스인 경우, 상기 데이터 요청에 포함된 주소 정보의 블록 인덱스에 상응하는 블록내 웨이(way)들의 참조횟수에 기초하여 교체 웨이를 결정하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서, 상기 캐시 컨트롤러는, 상기 블록내 웨이(way)들의 참조 횟수가 동일한 경우, LRU 테이블에 기초하여 가장 오랫동안 참조되지 않은 웨이를 교체 웨이로 결정하고, 상기 블록내 웨이(way)들의 참조 횟수가 다른 경우, 참조 횟수가 가장 적은 웨이를 교체 웨이로 결정하는 것을특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 캐시 컨트롤러는, 상기 교체 웨이에 저장된 데이터를 삭제하고, 메인 메모리로부터 해당 데이터를 로딩하여 상기 교체 웨이에 저장하며, 상기 교체 웨이에 대한 CSR 및 LRU 테이블을 설정하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "인공지능 데이터를 최적화하여 행렬연산 관련 정보들을 추출하고, 상기 추출된 행렬연산 관련 정보에 상응하는명령어를 생성하는 호스트;상기 호스트로부터 명령어 실행 요청을 수신하고, 해당 명령어에 대응하는 코드를 실행하는 프로세서 및 연산기를 각각 포함하는 복수의 코어; 및복수의 뱅크를 포함하는 캐시를 포함하되,각 뱅크는, 복수의 블록을 포함하고, 메인 메모리에 저장된 데이터들 중 일부에 해당하는 캐시 데이터를 저장하는 캐시 메모리; 및상기 코어로부터 데이터 요청 수신 시, 상기 요청된 데이터의 상기 캐시 메모리에의 존재 여부에 기초하여, 캐시 히트 및 캐시 미스 중 하나를 판단하고, 캐시 미스로 판단되는 경우, 교체 웨이(Replacement Way)를 결정하고, 상기 결정된 교체 웨이에 메인 메모리로부터 로딩한 데이터를 저장하는 캐시 컨트롤러를 포함하는 것을 특공개특허 10-2024-0101304-4-징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서, 상기 호스트는,상기 인공지능 데이터에서 행렬연산 데이터를 추출하고, 상기 행렬연산 데이터에 대해 각 코어에 할당할 데이터크기를 타일링(Tiling)하며, 각 타일링된 데이터에 대해 오퍼랜드(operand)들의 참조 횟수를 추출하고, 각 타일링된 데이터의 메모리 주소를 할당하는 최적화 과정을 수행함으로써, 각 타일링된 데이터, 각 타일링된 데이터의 크기, 각 타일링된 데이터의 주소 및 각 타일링된 데이터의 주소별 참조 횟수 중 적어도 하나를 포함하는 행렬연산 관련 정보를 추출하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서, 상기 호스트는,상기 행렬연산 관련 정보에 기초하여, 행렬연산을 위한 명령어 시퀀스 및 CSR(Control and Status Register) 설정 명령어 중 적어도 하나를 생성하고, 상기 명령어 시퀀스 및 CSR 설정 명령어를 포함하는 명령어 실행 요청을각 코어로 전송하되, 상기 CSR 설정 명령어는, 행렬연산을 위한 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 포함하는 것을특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제9항에 있어서, 각 코어의 프로세서는, 상기 명령어 실행 요청에 포함된 명령어 시퀀스를 실행하고, CSR 설정 명령어에 따라 CSR에 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 설정하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제9항에 있어서, 상기 복수의 코어와 상기 캐시 간의 인터페이스를 위한 아비터(Arbiter)를 더 포함하고, 상기 아비터는, 상기 코어로부터의 데이터 요청에 포함되는 주소 정보에 정의된 뱅크 인덱스에 기초하여 해당 뱅크로 데이터 요청을 전송하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제9항에 있어서, 상기 캐시 컨트롤러는, 캐시 히트인 경우, 해당 데이터를 해당 웨이(way)로부터 읽어 상기 코어로 전송하고, 해당 데이터에 설정된 참조 횟수의 카운트를 하나씩 감소시키며, LRU 테이블을 업데이트하는 것을 특징으로 하는 캐시 교체 시스템.공개특허 10-2024-0101304-5-청구항 15 제9항에 있어서, 상기 캐시 컨트롤러는, 캐시 미스인 경우, 상기 데이터 요청에 포함된 주소 정보의 블록 인덱스에 상응하는 블록내 웨이(way)들의 참조횟수를 비교하고, 참조 횟수가 동일한 경우 LRU 테이블에 기초하여 교체 웨이로 결정하며, 참조 횟수가 다른 경우 참조 횟수가 가장 적은 웨이를 교체 웨이로 결정하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서, 상기 캐시 컨트롤러는, 상기 교체 웨이에 저장된 데이터를 삭제하고, 메인 메모리로부터 해당 데이터를 로딩하여 상기 교체 웨이에 저장하며, 상기 교체 웨이에 대한 CSR 및 LRU 테이블을 설정하는 것을 특징으로 하는 캐시 교체 시스템."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "호스트가, 인공지능 데이터를 최적화하여 행렬연산 관련 정보들을 추출하고, 상기 추출된 행렬연산 관련 정보에기초하여 명령어 시퀀스 및 CSR 설정 명령어를 생성하며, 상기 명령어 시퀀스 및 CSR 설정 명령어를 포함하는명령어 실행 요청을 각 코어로 전송하는 단계; 상기 각 코어가, 상기 명령어 실행 요청에 포함된 명령어 시퀀스를 실행하면서 데이터 요청 신호를 캐시로 전송하는 단계;상기 캐시가, 상기 데이터 요청 신호를 통해 요청된 데이터의 캐시 메모리에의 존재 여부에 기초하여, 캐시 히트 및 캐시 미스 중 하나를 판단하는 단계; 및캐시 미스로 판단된 경우, 상기 캐시가 교체 웨이를 결정하고, 상기 결정된 교체 웨이에 메인 메모리로부터 로딩한 데이터를 저장하며, 상기 교체 웨이에 저장된 데이터를 해당 코어로 전송하는 단계를 포함하는, 캐시 교체 방법."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서, 상기 명령어 실행 요청을 각 코어로 전송하는 단계에서, 상기 호스트는, 상기 인공지능 데이터에서 행렬연산 데이터를 추출하고, 상기 행렬연산 데이터에 대해 각 코어에 할당할 데이터크기를 타일링(Tiling)하며, 각 타일링된 데이터에 대해 오퍼랜드(operand)들의 참조 횟수를 추출하고, 각 타일링된 데이터의 메모리 주소를 할당하는 최적화 과정을 수행함으로써, 각 타일링된 데이터, 각 타일링된 데이터의 크기, 각 타일링된 데이터의 주소 및 각 타일링된 데이터의 주소별 참조 횟수 중 적어도 하나를 포함하는 행렬연산 관련 정보를 추출하고, 상기 행렬연산 관련 정보에 기초하여, 행렬연산을 위한 명령어 시퀀스 및 CSR(Control and Status Register) 설정 명령어 중 적어도 하나를 생성하는 것을 특징으로 하는 캐시 교체 방법.공개특허 10-2024-0101304-6-청구항 19 제17항에 있어서, 상기 데이터 요청 신호를 캐시로 전송하는 단계에서, 각 코어는, CSR 설정 명령어에 따라 CSR에 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 설정하는 것을특징으로 하는 캐시 교체 방법."}
{"patent_id": "10-2023-0054342", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제17항에 있어서, 상기 교체 웨이에 저장된 데이터를 상기 코어로 전송하는 단계에서, 상기 캐시는, 상기 데이터 요청에 포함된 주소 정보의 블록 인덱스에 상응하는 블록내 웨이(way)들의 참조 횟수를 비교하고, 참조 횟수가 동일한 경우 LRU 테이블에 기초하여 교체 웨이로 결정하며, 참조 횟수가 다른 경우참조 횟수가 가장 적은 웨이를 교체 웨이로 결정하는 것을 특징으로 하는 캐시 교체 방법."}
{"patent_id": "10-2023-0054342", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 캐시 교체 시스템 및 방법에 관한 것으로, 호스트로부터의 명령에 대응하는 동작을 각각 수행하는 복 수의 코어, 및 복수의 뱅크로 구성되는 캐시를 포함하되, 각 뱅크는 복수의 블록을 포함하고, 메인 메모리에 저 장된 데이터들 중 일부에 해당하는 캐시 데이터를 저장하는 캐시 메모리, 및 코어로부터 데이터 요청 수신 시, 요청된 데이터의 캐시 메모리에의 존재 여부에 기초하여, 캐시 히트 및 캐시 미스 중 하나를 판단하고, 캐시 미 스로 판단되는 경우, 교체 웨이(Replacement Way)를 결정하고, 결정된 교체 웨이에 메인 메모리로부터 로딩한 데 이터를 저장하는 캐시 컨트롤러를 포함하는 것을 특징으로 한다."}
{"patent_id": "10-2023-0054342", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 캐시 교체 시스템 및 방법에 관한 것으로, 보다 상세하게는 인공지능 프로세서를 위한 캐시 교체 시 스템 및 방법에 대한 것이다."}
{"patent_id": "10-2023-0054342", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 프로세서 설계시 고성능 연산 장치와 함께 데이터 공급 및 저장 장치의 성능 또한 매우 중요한 요소이 다. 이에, 인공지능 프로세서를 위해 고병렬 연산기와 함께 계층적 메모리 구조(Hierarchical Memory Structure)를 사용하는 것은 매우 일반적이다. 한편, 인공지능 프로세서의 성능이 향상됨에 따라 프로세서 코어와 메인 메모리 간의 병목 현상(bottleneck)을 줄이기 위한 캐시(CACHE)의 중요성은 날로 커지고 있다. 캐시(CACHE)는 프로세서 및 메인 메모리 사이에 위치하 여, 프로세서에 대응하는 속도로 동작하는 고속의 메모리이다. 캐시는 메인 메모리 내에 저장된 데이터의 일부 를 저장할 수 있고, 캐시 내에 저장된 데이터는 메인 메모리 내에 저장된 데이터에 비해 더 빠르게 접근될 수 있다. 이러한 캐시를 이용하면 빠른 속도의 프로세서 및 느린 속도의 메인 메모리 간의 속도 차이에 의해 발생 하는 병목 현상을 완화시킬 수 있다. 이러한 캐시를 효율적으로 활용하기 위해서 캐시 관리는 필수적이다. 그 중 캐시 교체 정책(Replacement Policy)이 존재한다. 그러나, 종래의 캐시 교체 정책은 고성능 인공지능 프로세서를 위한 캐시 메모리 구성 시, 캐시 사용을 효율적 으로 하도록 하는 교체 정책이 없었다."}
{"patent_id": "10-2023-0054342", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "본 발명의 배경기술은 대한민국 등록특허공보 제10-2329308호(2021.11.19. 공고)에 개시되어 있다."}
{"patent_id": "10-2023-0054342", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 인공지능 프로세서를 위한 캐시 메모리 구성 시 캐시 사용을 효율적으로 하도록 하는 캐시 교체 시스 템 및 방법을 제공하는데 그 목적이 있다."}
{"patent_id": "10-2023-0054342", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일부 실시예에 따른 캐시 교체 시스템은, 호스트로부터의 명령에 대응하는 동작을 각각 수행하는 복 수의 코어, 및 복수의 뱅크로 구성되는 캐시를 포함하되, 각 뱅크는, 복수의 블록을 포함하고, 메인 메모리에 저장된 데이터들 중 일부에 해당하는 캐시 데이터를 저장하는 캐시 메모리, 및 코어로부터 데이터 요청 수신 시, 상기 요청된 데이터의 상기 캐시 메모리에의 존재 여부에 기초하여, 캐시 히트 및 캐시 미스 중 하나를 판 단하고, 캐시 미스로 판단되는 경우, 교체 웨이(Replacement Way)를 결정하고, 상기 결정된 교체 웨이에 메인 메모리로부터 로딩한 데이터를 저장하는 캐시 컨트롤러를 포함하는 것을 특징으로 한다. 본 발명의 일부 실시예에서, 각 코어는, 상기 호스트로부터 명령어 시퀀스 및 CSR 설정 명령어를 포함하는 명령 어 실행 요청을 수신하고, 상기 명령어 실행 요청에 포함된 명령어 시퀀스를 실행하며, CSR 설정 명령어에 따라 CSR에 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 설정하는 것을 특징으로 한다. 본 발명의 일부 실시예는 상기 복수의 코어와 상기 캐시 간의 인터페이스를 위한 아비터(Arbiter)를 더 포함하 고, 상기 아비터는, 상기 코어로부터의 데이터 요청에 포함되는 주소 정보에 정의된 뱅크 인덱스에 기초하여 해 당 뱅크로 데이터 요청을 전송하는 것을 특징으로 한다. 본 발명의 일부 실시예에서, 상기 캐시 메모리는, 현재 데이터의 유효 여부를 나타내는 유효성(valid) 값을 저 장하는 유효성 메모리, 상기 캐시 데이터를 저장하는 데이터 메모리, 및 상기 캐시 데이터에 대응하는 태그 데 이터를 저장하는 태그 메모리를 포함하는 것을 특징으로 한다. 본 발명의 일부 실시예에서, 상기 캐시 컨트롤러는, 캐시 히트인 경우, 해당 데이터를 해당 웨이(way)로부터 읽 어 상기 코어로 전송하고, 해당 데이터에 설정된 참조 횟수의 카운트를 하나씩 감소시키며, LRU 테이블을 업데 이트하는 것을 특징으로 한다. 본 발명의 일부 실시예에서, 상기 캐시 컨트롤러는, 캐시 미스인 경우, 상기 데이터 요청에 포함된 주소 정보의 블록 인덱스에 상응하는 블록내 웨이(way)들의 참조 횟수에 기초하여 교체 웨이를 결정하는 것을 특징으로 한다. 본 발명의 일부 실시예에서, 상기 캐시 컨트롤러는, 상기 블록내 웨이(way)들의 참조 횟수가 동일한 경우, LRU 테이블에 기초하여 가장 오랫동안 참조되지 않은 웨이를 교체 웨이로 결정하고, 상기 블록내 웨이(way)들의 참 조 횟수가 다른 경우, 참조 횟수가 가장 적은 웨이를 교체 웨이로 결정하는 것을 특징으로 한다. 본 발명의 일부 실시예에서, 상기 캐시 컨트롤러는, 상기 교체 웨이에 저장된 데이터를 삭제하고, 메인 메모리 로부터 해당 데이터를 로딩하여 상기 교체 웨이에 저장하며, 상기 교체 웨이에 대한 CSR 및 LRU 테이블을 설정 하는 것을 특징으로 한다. 본 발명의 일부 실시예에 따른 캐시 교체 시스템은, 인공지능 데이터를 최적화하여 행렬연산 관련 정보들을 추 출하고, 상기 추출된 행렬연산 관련 정보에 상응하는 명령어를 생성하는 호스트, 상기 호스트로부터 명령어 실 행 요청을 수신하고, 해당 명령어에 대응하는 코드를 실행하는 프로세서 및 연산기를 각각 포함하는 복수의 코 어, 및 복수의 뱅크를 포함하는 캐시를 포함하되, 각 뱅크는, 복수의 블록을 포함하고, 메인 메모리에 저장된 데이터들 중 일부에 해당하는 캐시 데이터를 저장하는 캐시 메모리, 및 상기 코어로부터 데이터 요청 수신 시, 상기 요청된 데이터의 상기 캐시 메모리에의 존재 여부에 기초하여, 캐시 히트 및 캐시 미스 중 하나를 판단하 고, 캐시 미스로 판단되는 경우, 교체 웨이(Replacement Way)를 결정하고, 상기 결정된 교체 웨이에 메인 메모 리로부터 로딩한 데이터를 저장하는 캐시 컨트롤러를 포함하는 것을 특징으로 한다. 본 발명의 일부 실시예에서 상기 호스트는, 상기 인공지능 데이터에서 행렬연산 데이터를 추출하고, 상기 행렬 연산 데이터에 대해 각 코어에 할당할 데이터 크기를 타일링(Tiling)하며, 각 타일링된 데이터에 대해 오퍼랜드 (operand)들의 참조 횟수를 추출하고, 각 타일링된 데이터의 메모리 주소를 할당하는 최적화 과정을 수행함으로 써, 각 타일링된 데이터, 각 타일링된 데이터의 크기, 각 타일링된 데이터의 주소 및 각 타일링된 데이터의 주 소별 참조 횟수 중 적어도 하나를 포함하는 행렬연산 관련 정보를 추출하는 것을 특징으로 한다. 본 발명의 일부 실시예에서 상기 호스트는, 상기 행렬연산 관련 정보에 기초하여, 행렬연산을 위한 명령어 시퀀 스 및 CSR(Control and Status Register) 설정 명령어 중 적어도 하나를 생성하고, 상기 명령어 시퀀스 및 CSR 설정 명령어를 포함하는 명령어 실행 요청을 각 코어로 전송하되, 상기 CSR 설정 명령어는, 행렬연산을 위한 데 이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 포함하는 것을 특징으로 한다. 본 발명의 일부 실시예에서 각 코어의 프로세서는, 상기 명령어 실행 요청에 포함된 명령어 시퀀스를 실행하고, CSR 설정 명령어에 따라 CSR에 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 설정하는 것을 특징으로 한다. 본 발명의 일부 실시예는 상기 복수의 코어와 상기 캐시 간의 인터페이스를 위한 아비터(Arbiter)를 더 포함하 고, 상기 아비터는, 상기 코어로부터의 데이터 요청에 포함되는 주소 정보에 정의된 뱅크 인덱스에 기초하여 해 당 뱅크로 데이터 요청을 전송하는 것을 특징으로 한다. 본 발명의 일부 실시예에서 상기 캐시 컨트롤러는, 캐시 히트인 경우, 해당 데이터를 해당 웨이(way)로부터 읽 어 상기 코어로 전송하고, 해당 데이터에 설정된 참조 횟수의 카운트를 하나씩 감소시키며, LRU 테이블을 업데 이트하는 것을 특징으로 한다. 본 발명의 일부 실시예에서 상기 캐시 컨트롤러는, 캐시 미스인 경우, 상기 데이터 요청에 포함된 주소 정보의 블록 인덱스에 상응하는 블록내 웨이(way)들의 참조 횟수를 비교하고, 참조 횟수가 동일한 경우 LRU 테이블에 기초하여 교체 웨이로 결정하며, 참조 횟수가 다른 경우 참조 횟수가 가장 적은 웨이를 교체 웨이로 결정하는 것을 특징으로 한다. 본 발명의 일부 실시예에서 상기 캐시 컨트롤러는, 상기 교체 웨이에 저장된 데이터를 삭제하고, 메인 메모리로 부터 해당 데이터를 로딩하여 상기 교체 웨이에 저장하며, 상기 교체 웨이에 대한 CSR 및 LRU 테이블을 설정하 는 것을 특징으로 한다. 본 발명의 일부 실시예에 따른 캐시 교체 방법은, 호스트가, 인공지능 데이터를 최적화하여 행렬연산 관련 정보 들을 추출하고, 상기 추출된 행렬연산 관련 정보에 기초하여 명령어 시퀀스 및 CSR 설정 명령어를 생성하며, 상 기 명령어 시퀀스 및 CSR 설정 명령어를 포함하는 명령어 실행 요청을 각 코어로 전송하는 단계, 상기 각 코어 가, 상기 명령어 실행 요청에 포함된 명령어 시퀀스를 실행하면서 데이터 요청 신호를 캐시로 전송하는 단계, 상기 캐시가, 상기 데이터 요청 신호를 통해 요청된 데이터의 캐시 메모리에의 존재 여부에 기초하여, 캐시 히 트 및 캐시 미스 중 하나를 판단하는 단계, 및 캐시 미스로 판단된 경우, 상기 캐시가 교체 웨이를 결정하고, 상기 결정된 교체 웨이에 메인 메모리로부터 로딩한 데이터를 저장하며, 상기 교체 웨이에 저장된 데이터를 해 당 코어로 전송하는 단계를 포함하는 것을 특징으로 한다. 본 발명의 일부 실시예는 상기 명령어 실행 요청을 각 코어로 전송하는 단계에서, 상기 호스트는, 상기 인공지 능 데이터에서 행렬연산 데이터를 추출하고, 상기 행렬연산 데이터에 대해 각 코어에 할당할 데이터 크기를 타 일링(Tiling)하며, 각 타일링된 데이터에 대해 오퍼랜드(operand)들의 참조 횟수를 추출하고, 각 타일링된 데이 터의 메모리 주소를 할당하는 최적화 과정을 수행함으로써, 각 타일링된 데이터, 각 타일링된 데이터의 크기, 각 타일링된 데이터의 주소 및 각 타일링된 데이터의 주소별 참조 횟수 중 적어도 하나를 포함하는 행렬연산 관 련 정보를 추출하고, 상기 행렬연산 관련 정보에 기초하여, 행렬연산을 위한 명령어 시퀀스 및 CSR(Control and Status Register) 설정 명령어 중 적어도 하나를 생성하는 것을 특징으로 한다. 본 발명의 일부 실시예는 상기 데이터 요청 신호를 캐시로 전송하는 단계에서, 각 코어는, CSR 설정 명령어에 따라 CSR에 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 설정하는 것을 특징으로 한다. 본 발명의 일부 실시예는 상기 교체 웨이에 저장된 데이터를 상기 코어로 전송하는 단계에서, 상기 캐시는, 상 기 데이터 요청에 포함된 주소 정보의 블록 인덱스에 상응하는 블록내 웨이(way)들의 참조 횟수를 비교하고, 참 조 횟수가 동일한 경우 LRU 테이블에 기초하여 교체 웨이로 결정하며, 참조 횟수가 다른 경우 참조 횟수가 가장 적은 웨이를 교체 웨이로 결정하는 것을 특징으로 한다."}
{"patent_id": "10-2023-0054342", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 따른 캐시 교체 시스템 및 방법은, 인공지능 데이터(인공지능 알고리즘 등을 포함)에서 행렬연산에 사용될 데이터를 구분하고, 행렬연산에 사용될 데이터를 캐시 내에서 최대한 재사용되도록 함으로써, 캐시 사용 을 효율적으로 할 수 있도록 하는 효과가 있다."}
{"patent_id": "10-2023-0054342", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 발명에 따른 캐시 교체 시스템 및 방법의 실시예를 설명한다. 이 과정에서 도 면에 도시된 선들의 두께나 구성요소의 크기 등은 설명의 명료성과 편의상 과장되게 도시되어 있을 수 있다. 또 한, 후술되는 용어들은 본 발명에서의 기능을 고려하여 정의된 용어들로서 이는 사용자, 운용자의 의도 또는 관 례에 따라 달라질 수 있다. 그러므로, 이러한 용어들에 대한 정의는 본 명세서 전반에 걸친 내용을 토대로 내려 져야 할 것이다. 도 1은 일반적인 인공지능 연산 시스템을 설명하기 위한 도면이다. 도 1을 참조하면, 인공지능 프로세서(AI Processor)에서 캐시로 구현된 온칩 메모리(On-Chip Memory)를 고성능 고병렬 프로세서에서 요구되는 성능에 맞게 데이터 전송이 가능하게 구현하는 것은 전체 인공지능 프로세서 성 능에 가장 중요한 요소 중 하나이다. 캐시는 가격적인 측면 때문에 대용량 구성이 힘들다는 단점이 있다. 이를 보완하고 보다 효율적인 캐시를 구성 하기 위해 set-associative 방식의 캐시가 주로 이용된다. Set-associative 방식의 캐시는 블록 주소(block address)가 같고 태그 주소(tag address)가 다른 여러 개의 웨이(way)로 구성되는데, 이 여러 개의 웨이(way) 중 어떤 웨이(way)의 값을 새로운 데이터의 저장공간으로 쓸지를 결정하는 방법이 교체 정책(replacement policy)이다. 도 2는 일반적인 set-associative 방식 중 2-way의 캐시에서 히트(hit)/미스(miss)를 확인하고 데이터를 공급하 기 위한 동작 방식을 설명하기 위한 예시도이다. 도 2를 참조하면, 캐시에서 미스(miss)가 발생할 시 외부 메모리로부터 데이터를 가져와야 한다(load). 그러나, 외부 메모리로부터 데이터를 가져오는 것은 매우 큰 지연(latency)을 야기시키기 때문에, 캐시내에서 최대한 재 사용될 데이터를 가려 교체(replacement)되지 않게 하는 것이 교체 정책(replacement policy)의 주요 기능이다. 인공지능 반도체는 인공지능 알고리즘 중 가장 중요한 연산인 행렬연산을 고성능으로 처리하기 위해 발전했고, 이를 위해 행렬연산 전용 연산기를 포함하는 코어를 병렬로 구성하는 방법으로 고성능 인공지능 프로세서 구현 이 가능해진다. 이 구성에서 캐시의 교체 정책(replacement policy)은 행렬연산에서 재사용률이 높은 데이터를 구분하고, 이를 캐시 내에서 최대한 재사용되도록 하여 캐시 사용을 효율적으로 하도록 해야 한다. 이에, 본 발명은 인공지능 데이터에서 행렬연산에 사용될 데이터를 구분하고, 구분된 데이터를 캐시 내에서 최 대한 재사용되도록 함으로써, 캐시 사용을 효율적으로 하도록 하는 기술을 제공한다. 도 3은 본 발명의 일 실시 예에 따른 캐시 교체 시스템을 설명하기 위한 블록구성도, 도 4는 도 3에 도시된 코 어를 설명하기 위한 블록구성도, 도 5는 도 3에 도시된 캐시의 뱅크를 설명하기 위한 도면이다. 도 3을 참조하면, 본 발명의 일 실시 예에 따른 캐시 교체 시스템은, 호스트, 메인 메모리, 복수의 코어, 아비터(Arbiter) 및 캐시를 포함한다. 호스트는 캐시 교체 시스템의 전반적인 동작을 제어할 수 있다. 예를 들어, 호스트는 커맨드 및 데이 터를 복수의 코어에 제공하여 복수의 코어를 제어할 수 있다. 호스트는 인공지능 데이터를 최적화하여 행렬연산 관련 정보들을 추출하고, 추출된 행렬연산 관련 정보에 상응하는 명령어를 생성할 수 있다. 여기서, 인공지능 데이터는 인공지능 프로그램(알고리즘), 신경망 그래프 등을 포함할 수 있고, 호스트는 인공지능 프로그램 또는 신경망 그래프를 분석하고 최적화하는 기능을 가 진 소프트웨어(예: 컴파일러, 런타임 등)를 이용하여 교체 웨이를 찾기 위한 행렬연산 관련 정보를 추출하고, 그에 상응하는 명령어를 생성할 수 있다. 행렬연산 관련 정보는 행렬연산을 위한 데이터, 그 데이터의 크기, 주 소, 참조 횟수 등을 포함할 수 있다. 호스트는 인공지능 데이터에서 행렬연산 데이터를 추출하고, 추출된 행렬연산 데이터에 대해 각 코어(30 0)에 할당할 데이터 크기를 타일링(Tiling)하며, 각 타일링된 데이터에 대해 오퍼랜드(operand)들의 참조 횟수 를 추출하고, 각 타일링된 데이터의 메모리 주소를 할당하는 최적화 과정을 수행함으로써, 각 타일링된 데이터 의 크기, 주소 및 참조 횟수 중 적어도 하나를 포함하는 행렬연산 관련 정보를 추출할 수 있다. 이때, 호스트 는 인공지능 데이터를 분석하여 루프(loop), for문, 행렬연산으로 치환 가능한 프로그램 등을 행렬연산 데 이터로 추출할 수 있다. 그런 후, 호스트는 각 코어의 처리 용량 등에 기초하여 각 코어에 할당 되는 데이터 양을 타일링하여 각 코어가 연산하는 데이터 크기를 결정할 수 있다. 그런 후, 호스트는 각 타일링된 데이터가 멀티 코어 또는 멀티 스레드 개수를 고려하여 총 몇 번 참조되는지를 나타내는 참조 횟수를 추출할 수 있다. 그런 후, 호스트는 각 타일링된 데이터가 메모리의 어느 주소에 할당되는지에 대 한 최적화 과정을 수행할 수 있다. 최적화 과정의 수행으로 행렬연산 관련 정보가 추출되면, 호스트는 행렬연산을 위한 명령어 시퀀스를 생성 하고, 행렬연산을 위한 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 CSR(Control and Status Register)에 설정할 수 있도록 하는 CSR 설정 명령어를 생성할 수 있다. 행렬연산 관련 정보는 명령어에 실려 코어로 전송될 수 있고, 코어는 행렬연산 관련 정보를 CSR에 설정할 수 있다. 호스트는 명령어 시퀀스 및 CSR 설정 명령어를 포함하는 명령어 실행 요청 신호를 각 코어로 전송할 수 있다. 메인 메모리는 호스트의 제어에 따라 데이터를 기록하거나 데이터를 독출할 수 있다. 예를 들어, 메 인 메모리는 호스트로부터 제공된 명렁(커맨드) 및 어드레스에 응답하여 데이터를 기록하거나, 독출 된 데이터를 코어에 제공할 수 있다. 메인 메모리는 각 코어가 실행하기 위한 명령 및 데이터를 저장할 수 있다. 이러한 메인 메모리는 DRAM, SRAM 등과 같이 전원이 차단되면 데이터가 소실되는 휘발성 메모리이거나 또 는 플래시 메모리, PRAM, ReRAM, MRAM, FRAM 등과 같이 전원이 차단되더라도 데이터가 유지되는 불휘발성 메모 리 중 어느 하나일 수 있다. 복수의 코어는 호스트로부터의 명령에 대응하는 동작을 각각 수행할 수 있다. 각 코어는 호스트로부터 명령어 실행 요청을 수신하고, 해당 명령어에 대응하는 코드를 실행하는 프 로세서 및 연산기를 포함할 수 있다. 즉, 코어는 도 4에 도시된 바와 같이 행렬연산을 담당하는 배열 기반 전용 연산기와 커널 프로그램을 실행하고 행렬연산 이외의 연산을 담당하는 프로세서(CPU, 31 0)를 포함할 수 있다. 이러한 코어는 캐시에 복수로 연결되어 데이터 캐시 레벨에서 데이터 공유를 자유롭게 할 수 있다. 인공지능 알고리즘은 고병렬성을 가지는 MAC(Multiply and Accumulation)으로 대표되는 행렬 연산들과 Activation Function, Batch Normalization 등과 같이 행렬 연산 이외의 일반적인 연산들로 나누어 구성된다. 이 두 가지 카테고리의 연산을 효율적으로 하기 위해 코어는 일반 연산기를 기반으로 한 CPU 형태의 프로 세서와, 행렬 연산 전용 연산기인 NPU 형태의 연산기의 조합으로 구성된다. 이러한 조합으로 구성된 복수의 코어가 캐시를 공유하도록 하여 하드웨어 추가 없이 코어간 데이터 공유가 일어날 수 있 도록 구성된다. 프로세서는 연산기 및 캐시의 동작을 제어할 수 있다. 프로세서는 호스트로부터 명령어 시퀀스 및 CSR 설정 명령어를 수신하고, CSR 설정 명령어에 따라 CSR에 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 설정할 수 있다. 연산기는 프로세서의 제어에 의해 캐시로부터 제공되는 데이터를 기반으로 연산을 수행할 수 있 다. 예를 들어, 연산기는 입력 데이터를 기반으로 덧셈 연산, 곱셈 연산, 지수 연산 등을 수행할 수 있다. 아비터는 복수의 코어와 캐시 간의 인터페이스를 제공할 수 있다. 아비터는 코어로부 터 데이터 요청 신호(즉, 캐시 액세스 요청 신호) 수신 시 요청되는 주소 정보에 정의된 뱅크 인덱스에 기초하 여 해당 뱅크로 데이터 요청을 전송할 수 있다. 이때, 동시에 같은 뱅크로의 접근 요청이 여러 개 있 을 경우, 아비터는 라운드-로빈(round-robin) 방식으로 처리하여 순차화할 수 있다. 아비터는 각 코 어로부터의 데이터 요청(캐시 액세스 요청)을 적절한 뱅크의 캐시 컨트롤러로 분배하여 병목현 상을 최소화할 수 있다. 여기서, 데이터 요청(캐시 액세스 요청) 신호는 트랜잭션 주소를 포함할 수 있고, 트랜잭션 주소는 태그 정보, 뱅크 인덱스, 블록 주소(block address) 등을 포함할 수 있다. 캐시는 복수의 뱅크를 포함하고, 각 뱅크는 캐시 메모리 및 캐시 컨트롤러를 포함할 수 있다. 즉, 캐시는 여러 코어와의 데이터 전송 처리율(throughput)을 높이기 위해 여러 개의 뱅크 로 나누어지고, 각 뱅크는 독립된 캐시 컨트롤러를 가진다. 멀티 코어 기반의 고병렬 인공지능 프로세서에서 코어들과 캐시의 병목현상을 최소화하기 위해 캐시는 멀티 뱅크로 구성될 수 있다. 즉, 여러 코어로부터의 데이터 요청(캐시 액세스 요 청)이 여러 뱅크에 분산되어 처리 가능하도록 구성될 수 있다. 이때, 뱅크 배열은 N개의 코어에 대해 서 NⅹN 개의 SRAM 기반의 뱅크들로 구성될 수 있다. 또한, 캐시는 멀티 코어의 개수가 N일 때, N-way set associative 구조로 구성하여 N개의 웨이(way)를 하나의 세트(set)로 구성하여 빠르면서 유연성을 높 이는 구조를 채택할 수 있다. 캐시 메모리는 복수의 블록(block, 또는 line)을 포함하고, 메인 메모리에 저장된 데이터들 중 일부 에 해당하는 캐시 데이터를 저장할 수 있다. 이때, 캐시 메모리는 n-방향 세트-연관 캐시(n-way set- associative cache)로 구현될 수 있고, n(n은 2 이상의 정수)개의 웨이(way)를 포함할 수 있다. 즉, 캐시 메모 리는 set-associative 방식을 위해 웨이(way)의 개수(예를 들어, 2-way, 4-way, 8-way 등)만큼 블록이 구 성될 수 있다. 캐시 메모리는, 도 5에 도시된 바와 같이 현재 데이터의 유효 여부를 나타내는 유효성(valid) 값을 저장하 는 유효성 메모리, 캐시 데이터를 저장하는 데이터 메모리, 및 캐시 데이터에 대응하는 태그 데이터를 저장하는 태그 메모리를 포함할 수 있다. 여기서, 태그 데이터는 캐시 데이터가 저장되어 있는 메인 메모리의 실제 주소를 포함할 수 있다. 데이터 메모리에는 실제 메인 메모리 주소에 해당하는 데이터가 저장될 수 있다. 유효성 메모리, 태그 메모리 및 데이터 메모리는 적어도 하나의 세트를 포함할 수 있으며, 하나의 세트는 복수 의 웨이(way)를 가질 수 있다. 유효성 메모리, 태그 메모리 및 데이터 메모리의 로우(row)는 세트(블록)를 나타 낼 수 있다. 즉, 하나의 세트는 유효성 메모리, 태그 메모리 및 데이터 메모리의 동일한 블록에 저장될 수 있다. 캐시 컨트롤러는 코어로부터의 CSR 설정 명령에 따라 캐시 메모리의 CSR에 레지스터 값을 설정 할 수 있다. 이때, 캐시 컨트롤러는 각 블록의 웨이별로 레지스터 값을 설정할 수 있다. 즉, 캐시 컨트롤 러는 각 웨이(캐시 데이터)의 참조횟수 레지스터에 참조 횟수를 설정할 수 있다. 캐시 컨트롤러는, 코어로부터 데이터 요청(캐시 액세스 요청) 수신 시, 요청된 데이터의 캐시 메모리 에의 존재 여부에 기초하여, 캐시 히트 및 캐시 미스 중 하나를 판단하고, 캐시 미스로 판단되는 경우, 교 체 웨이(Replacement Way)를 결정하고, 결정된 교체 웨이에 메인 메모리로부터 로딩한 데이터를 저장할 수 있다. 이러한 캐시 컨트롤러는 도 5에 도시된 바와 같이 메모리 컨트롤러(memory controller, 511) 및 교체 컨트 롤러(replacement controller, 513)를 포함할 수 있다. 메모리 컨트롤러는 유한상태머신(finite state machine; FSM)으로 구현될 수 있다. 메모리 컨트롤러는 코어로부터 요청된 데이터의 캐시 메모리에의 존재 여부에 기초하여, 캐시 히트 및 캐시 미스 중 하나를 판단하고, 캐시 히트인 경우 해당 데이터를 해당 캐시 웨이로부터 읽어 코어(30 0)로 전송하며, 해당 데이터에 설정된 참조 횟수의 카운트를 하나씩 감소시킬 수 있다. 코어로부터 데이터 요청(캐시 액세스 요청)이 수신되면, 메모리 컨트롤러는 요청된 데이터가 캐시 메 모리에 존재하는지를 판단할 수 있다. 구체적으로, 메모리 컨트롤러는 데이터 요청(또는 데이터 요청 신호)에 포함된 트랜잭션 주소의 블록 주소에 상응하는 블록내 웨이의 태그 주소를 트랜잭션 주소의 태그 주소 와 비교하여 동일한지 판단할 수 있다. 두 태그 주소가 동일한 경우, 메모리 컨트롤러는 캐시 히트(cache hit)로 판단할 수 있다. 캐시 히트는 코 어로부터 요청된 데이터가 데이터 메모리 내에 존재하고 있음을 나타낸다. 캐시 히트로 판단된 경우, 메모 리 컨트롤러는 해당 웨이에서 해당 캐시 데이터를 출력하여 해당 코어로 전송되도록 할 수 있다. 이 때, 메모리 컨트롤러는 해당 캐시 데이터에 설정된 참조 횟수 레지스터의 참조 횟수 카운트를 '1' 감소시 키고, LRU 테이블을 업데이트할 수 있다. 두 태그 주소가 동일하지 않은 경우, 메모리 컨트롤러는 캐시 미스(cache miss)로 판단할 수 있다. 캐시 미스는 코어로부터 요청된 데이터가 데이터 메모리 내에 존재하고 있지 않음을 나타낸다. 이 경우, 메모리 컨트롤러는 메인 메모리부터 해당 데이터를 로딩하고, 로딩된 데이터를 캐시 메모리에 저장할 필요가 있다. 이에, 캐시 미스로 판단된 경우, 메모리 컨트롤러는 교체 웨이 결정 요청 신호를 교체 컨트 롤러로 전송할 수 있다. 여기서, 교체 웨이 결정 요청 신호는 트랜잭션 주소 등을 포함할 수 있다. 캐시 미스인 경우, 교체 컨트롤러는 데이터 요청에 포함된 트랜잭션 주소의 블록 주소에 상응하는 블록내 웨이(way)들의 참조 횟수에 기초하여 교체 웨이를 결정할 수 있다. 즉, 블록내 웨이(way)들의 참조 횟수가 동일 한 경우, 교체 컨트롤러는 LRU 테이블에 기초하여 가장 오랫동안 참조되지 않은 웨이를 교체 웨이로 결정 할 수 있다. 만약, 블록내 웨이(way)들의 참조 횟수가 다른 경우, 교체 컨트롤러는 참조 횟수가 가장 적은 웨이를 교체 웨이로 결정할 수 있다. 즉, 메모리 컨트롤러로부터 교체 웨이 요청 신호가 수신되면, 교체 컨트롤러는 해당 블록에 포함된 웨이들의 참조 횟수 레지스터의 값들을 비교할 수 있다. 해당 블록에 포함된 웨이들의 참조 횟수가 동일한 경우, 교체 컨트롤러는 LRU 테이블에 기초하여 가장 오 랫동안 참조되지 않은 웨이를 교체 웨이로 결정하고, 결정된 교체 웨이를 메모리 컨트롤러에 알릴 수 있다. 그러면, 메모리 컨트롤러는 교체 웨이에 저장된 데이터를 삭제하고, 메인 메모리로부터 로딩한 데이터를 교체 웨이에 저장하며, 교체 웨이에 대한 CSR을 설정할 수 있다. 여기서, CSR을 설정한다는 것은, 해 당 웨이의 CSR에 해당 데이터의 크기, 주소, 참조횟수 등을 설정하는 것을 의미할 수 있다. 해당 블록에 포함된 웨이들의 참조 횟수가 동일하지 않으면, 교체 컨트롤러는 해당 블록에 포함된 웨이들 의 참조 횟수가 가장 적은 웨이를 교체 웨이로 결정할 수 있다. 교체 컨트롤러는 결정된 교체 웨이에 대한 정보를 메모리 컨트롤러로 전송할 수 있다. 그러면, 메모리 컨트롤러는 교체 웨이에 저장된 데이터를 삭제하고, 메인 메모리로부터 로딩한 데이터를 교체 웨이에 저장하며, 교체 웨이에 대한 CSR을 설정할 수 있다. 도 6은 본 발명의 일 실시 예에 따른 캐시 교체 방법을 설명하기 위한 도면이다. 도 6을 참조하면, 호스트는 인공지능 데이터를 최적화하여 행렬연산 관련 정보들을 추출하고(S602), 추출 된 행렬연산 관련 정보에 기초하여 명령어 시퀀스 및 CSR 설정 명령어를 생성한다(S604). 호스트가 행렬연 산 관련 정보를 추출하고, 행렬연산 관련 정보에 기초하여 명령어를 생성하는 방법에 대한 상세한 설명은 도 7 을 참조하기로 한다. S604 단계가 수행되면, 호스트는 명령어 실행 요청 신호를 코어로 전송한다(S606). 여기서, 명령어 실행 요청 신호는 명령어 시퀀스, CSR 설정 명령어 등을 포함할 수 있다. S606 단계가 수행되면, 코어는 명령어 시퀀스를 실행하기 위한 데이터를 요청하기 위한 데이터 요청 신호 (캐시 액세스 요청 신호)를 캐시로 전송한다(S608), 여기서, 데이터 요청 신호는 트랜잭션 주소 등을 포함 할 수 있다. S608 단계가 수행되면, 캐시는 해당 데이터의 존재 여부를 판단한다(S610). 이때, 캐시는 데이터 요 청 신호에 포함된 트랜잭션 주소를 이용하여 해당 데이터의 존재 여부를 판단할 수 있다. S610 단계의 판단결과, 해당 데이터가 존재하는 경우(캐시 히트인 경우), 캐시는 해당 데이터를 코어(30 0)에 제공한다(S612). 만약, S610 단계의 판단결과, 해당 데이터가 존재하지 않으면(캐시 미스인 경우), 캐시는 메인 메모리 부터 해당 데이터를 획득하고(S614), 획득된 데이터를 코어에 제공한다(S616). 이때, 캐시는 교 체 웨이(Replacement Way)를 결정하고, 결정된 교체 웨이에 메인 메모리로부터 로딩한 데이터를 저장할 수 있다. 캐시가 요청된 데이터를 추출하여 코어로 전송하는 방법에 대한 상세한 설명은 도 8을 참조하기로 한 다. 도 7은 본 발명의 일 실시 예에 따른 호스트의 동작을 설명하기 위한 흐름도이다. 도 7을 참조하면, 호스트는 인공지능 데이터에서 분석하여 행렬연산 데이터를 추출한다(S702). 이때, 호스 트는 인공지능 데이터를 분석하여 루프(loop), for문, 행렬연산으로 치환 가능한 프로그램 등을 행렬연산 데이터로 추출할 수 있다. S702 단계가 수행되면, 호스트는 행렬연산 데이터에 대해 각 코어에 할당할 데이터 크기를 타일링 (Tiling)한다(S704). 이때, 호스트는 각 코어의 처리 용량 등에 기초하여 각 코어에 할당되는 데이터 양을 타일링하여 각 코어가 연산하는 데이터 크기를 결정할 수 있다. S704 단계가 수행되면, 호스트는 각 타일링된 데이터에 대해 오퍼랜드(operand)들의 참조 횟수를 추출하고 (S706), 각 타일링된 데이터의 메모리 주소를 할당한다(S708). 이때, 호스트는 각 타일링된 데이터에 대해 멀티 코어 또는 멀티 스레드 개수를 고려하여 총 몇 번 참조되는지를 나타내는 참조 횟수를 추출할 수 있 다. 그런 후, 호스트는 각 타일링된 데이터가 메모리의 어느 주소에 할당되는지에 대한 최적화 과정을 수 행할 수 있다. 호스트는 최적화 과정을 수행함으로써, 각 타일링된 데이터의 크기, 주소 및 참조 횟수 중 적어도 하나를 포함하는 행렬연산 관련 정보를 추출할 수 있다. S708 단계가 수행되면, 호스트는 각 타일링된 데이터에 대해 행렬연산을 위한 명령어 시퀀스를 생성하고 (S710), 행렬연산을 위한 데이터의 크기, 주소, 및 참조 횟수 중 적어도 하나를 CSR에 설정할 수 있도록 하는 CSR 설정 명령어를 생성한다(S712). S712 단계가 수행되면, 호스트는 명령어 시퀀스 및 CSR 설정 명령어를 포함하는 명령어 실행 요청 신호를 코어로 전송한다(S714). 도 8은 본 발명의 일 실시 예에 따른 캐시의 동작을 설명하기 위한 흐름도이다. 도 8을 참조하면, 코어로부터 데이터 요청(캐시 액세스 요청)이 수신되면(S802), 캐시 컨트롤러는 요 청된 데이터가 캐시 메모리에 존재하는지를 판단한다(S804). 이때, 캐시 컨트롤러는 데이터 요청에 포함된 트랜잭션 주소의 블록 주소에 상응하는 블록내 웨이의 태그 주소를 트랜잭션 주소의 태그 주소와 비교하 여 동일한지 판단할 수 있다. 두 태그 주소가 동일한 경우, 메모리 컨트롤러는 캐시 히트(cache hit)로 판 단할 수 있다. 두 태그 주소가 동일하지 않은 경우, 캐시 컨트롤러는 캐시 미스(cache miss)로 판단할 수 있다. S804 단계의 판단결과, 요청된 데이터가 캐시 메모리에 존재하는 경우(캐시 히트), 캐시 컨트롤러는 해당 웨이에서 해당 캐시 데이터를 출력하여 해당 코어에 제공한다(S806). S806 단계가 수행되면, 캐시 컨트롤러는 해당 캐시 데이터에 설정된 참조 횟수 레지스터의 참조 횟수 카운 트를 '1' 감소시키고(S808), LRU 테이블을 업데이트한다(S810). 만약, S804 단계의 판단결과, 요청된 데이터가 캐시 메모리에 존재하지 않은 경우(캐시 미스), 캐시 컨트 롤러는 트랜잭션 주소의 블록 주소에 대응하는 블록내 웨이들(또는 해당 웨이의 캐시 데이터)의 참조 횟수 를 비교하여(S812), 블록내 웨이들(또는 해당 웨이의 캐시 데이터)의 참조 횟수가 동일한지를 판단한다(S814). S814 단계의 판단결과, 블록내 웨이들(또는 해당 웨이의 캐시 데이터)의 참조 횟수를 동일한 경우, 캐시 컨트롤 러는 LRU 테이블에 기초하여 가장 오랫동안 참조되지 않은 웨이를 교체 웨이로 결정한다(S816). S816 단계가 수행되면, 캐시 컨트롤러는 결정된 교체 웨이에 저장된 데이터를 삭제하고(S818), 메인 메모 리로부터 해당 데이터를 로딩하여 교체 웨이에 저장한다(S820). S820 단계의 수행 후, 캐시 컨트롤러는 교체 웨이에 대한 CSR을 설정하고(S822), 교체 웨이에 대한 LRU 테 이블을 설정한다(S824). 만약, S814 단계의 판단결과, 블록내 웨이들(또는 해당 웨이의 캐시 데이터)의 참조 횟수를 동일하지 않으면, 캐시 컨트롤러는 해당 블록의 웨이들 중에서 참조 횟수가 가장 적은 웨이를 교체 웨이로 결정하고(S826), S818 단계를 수행한다. 본 발명에 따른 캐시 교체 시스템 및 방법은, 인공지능 데이터(인공지능 알고리즘 등을 포함)에서 행렬연산에 사용될 데이터를 구분하고, 행렬연산에 사용될 데이터를 캐시 내에서 최대한 재사용되도록 함으로써, 캐시 사용 을 효율적으로 할 수 있도록 하는 효과가 있다. 본 발명은 도면에 도시된 실시예를 참고로 하여 설명되었으나, 이는 예시적인 것에 불과하며, 당해 기술이 속하 는 분야에서 통상의 지식을 가진 자라면 이로부터 다양한 변형 및 균등한 타 실시예가 가능하다는 점을 이해할 것이다. 따라서 본 발명의 기술적 보호범위는 아래의 특허청구범위에 의해서 정하여져야 할 것이다."}
{"patent_id": "10-2023-0054342", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일반적인 인공지능 연산 시스템을 설명하기 위한 도면이다. 도 2는 일반적인 set-associative 방식 중 2-way의 캐시에서 히트(hit)/미스(miss)를 확인하고 데이터를 공급하 기 위한 동작 방식을 설명하기 위한 예시도이다. 도 3은 본 발명의 일 실시 예에 따른 캐시 교체 시스템을 설명하기 위한 블록구성도이다. 도 4는 도 3에 도시된 코어를 설명하기 위한 블록구성도이다. 도 5는 도 3에 도시된 뱅크를 설명하기 위한 도면이다. 도 6은 본 발명의 일 실시 예에 따른 캐시 교체 방법을 설명하기 위한 도면이다. 도 7은 본 발명의 일 실시 예에 따른 호스트의 동작을 설명하기 위한 흐름도이다. 도 8은 본 발명의 일 실시 예에 따른 캐시의 동작을 설명하기 위한 흐름도이다."}
