{"patent_id": "10-2022-0170525", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0085556", "출원번호": "10-2022-0170525", "발명의 명칭": "AI 기반 소스코드의 실시간 보안 취약점 검출 및 코드 제안 방법, 장치 및 프로그램", "출원인": "주식회사 코드원", "발명자": "이관목"}}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컴퓨팅 장치에 의해 수행되는 방법에 있어서,소스코드에서 발생할 수 있는 복수의 취약점 정보를 획득하는 단계;상기 복수의 취약점 정보 각각을 개선하기 위한 복수의 제1소스코드 정보를 획득하는 단계;상기 복수의 취약점 정보 각각에 대한 제1소스코드 정보를 학습하는 단계;사용자로부터 획득되는 제2소스코드의 취약점을 검출하는 단계; 및상기 제2소스코드의 취약점을 검출한 결과에 따라, 상기 제1소스코드 중 상기 제2소스코드의 취약점을 개선할적어도 하나 이상의 제1소스코드를 추천하는 단계; 및상기 사용자가 선택한 소스코드를 추가하는 단계; 를 포함하는, AI 기반 소스코드의 실시간 보안 취약점 검출및 코드 제안 방법."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 제1소스코드 정보를 학습하는 단계는,상기 복수의 취약점 정보를 종류에 따라 분류하는 단계;분류된 취약점 종류에 따라 상기 제1소스코드를 분류하는 단계; 및상기 각 종류별 취약점 정보를 입력값으로 하고, 상기 각 종류별 취약점 정보에 대응되는 제1소스코드 정보를출력값으로 하여 인공지능 모델을 학습시키는 단계;를 포함하는, AI 기반 소스코드의 실시간 보안 취약점 검출및 코드 제안 방법."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 사용자로부터 획득되는 제2소스코드의 취약점을 검출하는 단계는,상기 사용자로부터 특정 코멘트가 입력되는지 여부를 판단하는 단계;상기 특정 코멘트가 입력되면, 상기 특정 코멘트가 포함되는 복수의 영역을 구분하는 단계; 및상기 복수의 영역 각각에 포함되는 제2소스코드를 획득하는 단계;를 포함하는, AI 기반 소스코드의 실시간 보안취약점 검출 및 코드 제안 방법."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 적어도 하나 이상의 소스코드를 추천하는 단계는,상기 제2소스코드에서 검출된 취약점을 종류에 따라 분류하는 단계;상기 제2소스코드의 분류에 해당하는 복수의 제1소스코드를 추출하는 단계;공개특허 10-2024-0085556-3-추출된 복수의 제1소스코드 각각에 대해, 상기 제2소스코드의 취약점을 개선하는데 적절한 정도를 점수화하는단계; 및점수가 높은 순서대로 상기 제1소스코드를 추천하는 단계;를 포함하는, AI 기반 소스코드의 실시간 보안 취약점검출 및 코드 제안 방법."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 제2소스코드의 취약점을 개선하는데 적절한 정도를 점수화하는 단계는,상기 제2소스코드에 발생한 취약점의 원인을 분석하는 단계;분석된 원인이 해소되는 소스코드가 포함된 제1소스코드에 대해 기 설정된 점수를 부가하는 단계;상기 제1소스코드가 선택된 횟수에 따라 점수를 부가하는 단계;상기 제1소스코드를 상기 제2소스코드에 적용시 오류 발생 가능성에 따라 점수를 부가하는 단계; 및부가된 점수들을 통합하여 상기 제1소스코드 각각을 점수화하는 단계;를 포함하는, AI 기반 소스코드의 실시간보안 취약점 검출 및 코드 제안 방법."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4항에 있어서,상기 제2소스코드의 취약점을 개선하는데 적절한 정도를 점수화하는 단계는,상기 제2소스코드에 대해, 기 설정된 복수의 특징을 분석하는 단계;추출된 제1소스코드 각각에 대해, 상기 제2소스코드의 특징 각각에 대한 유사도를 산출하는 단계; 및상기 복수의 특징 각각에 해당하는 가중치에 따라 상기 제1소스코드 각각의 점수를 산출하는 단계;를 포함하는,AI 기반 소스코드의 실시간 보안 취약점 검출 및 코드 제안 방법."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,추천된 적어도 하나 이상의 제1소스코드 중 하나의 제1소스코드를 선택받는 단계;선택된 제1소스코드의 변수 데이터를 특정하는 단계;상기 제2소스코드에서 상기 제1소스코드의 변수 데이터와 동일한 역할을 하는 변수 데이터를 추출하는 단계; 및상기 제2소스코드를 삭제하고, 상기 제1소스코드를 입력하되, 상기 제1소스코드의 변수 데이터를 상기 제2소스코드의 변수 데이터로 변환하여 입력하는 단계;를 포함하는, AI 기반 소스코드의 실시간 보안 취약점 검출 및코드 제안 방법."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,추천된 제1소스코드 중 특정 제1소스코드를 선택한 이유를 입력하는 인스트럭션을 제공하는 단계; 입력된 이유를 취약점 점검 결과, 추천된 제1소스코드들 및 선택된 제1소스코드와 매칭하여 저장하는 단계; 및여러 사용자들로부터 획득되는 이유를 기초로, 상기 제1소스코드들을 점수화하기 위한 목록별 가중치를 변경하공개특허 10-2024-0085556-4-는 단계;를 포함하는, AI 기반 소스코드의 실시간 보안 취약점 검출 및 코드 제안 방법."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "하나 이상의 인스트럭션을 저장하는 메모리; 및상기 메모리에 저장된 상기 하나 이상의 인스트럭션을 실행하는 프로세서를 포함하고,상기 프로세서는 상기 하나 이상의 인스트럭션을 실행함으로써, 제1항의 방법을 수행하는, 장치."}
{"patent_id": "10-2022-0170525", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "하드웨어인 컴퓨터와 결합되어, 제1항의 방법을 수행할 수 있도록 컴퓨터에서 독출가능한 기록매체에 저장된 컴퓨터프로그램."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 소스코드의 취약점을 검출하고, 취약점을 개선할 수 있는 소스코드를 추천하는 AI 기반 소스코드의 실 시간 보안 취약점 검출 및 코드 제안 방법, 장치 및 프로그램에 관한 것이다."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 AI 기반 소스코드의 실시간 보안 취약점 검출 및 코드 제안 방법, 장치 및 프로그램에 관한 것으로, 보다 자세하게는 소스코드의 취약점을 검출하고, 취약점을 개선할 수 있는 소스코드를 추천하는 AI 기반 소스코 드의 보안 취약점 검출 방법, 장치 및 프로그램에 관한 것이다."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근에는 기술의 발달로 프로그램 상에 존재하는 보안 취약점을 통해 기밀 정보의 유출, 기밀 정보의 변경 등 다양한 형태의 공격이 이루어지고 있다. 이에 따라 요즘에는 프로그램이 개발되는 경우에 개발된 프로그램에 대 한 보안 요구가 확대되고 있다. 이에 따라 프로그램 소스코드 상의 보안 약점이 존재하는지 여부를 검사하기 위 한 연구가 활발하게 진행되고 있다. 한편, 보안 취약점은 간단한 구문 요소를 검사함으로써 분석할 수 있는 단순한 형태부터 값의 흐름이나 범위를 분석해야하는 경우에 이르기까지 다양하다. 이를 위해 현재의 보안 취약점 분석은 프로그램 소스코드의 구문 요 소를 검색하거나, 소스코드의 각 단계에서 산출되는 중간값들의 흐름, 또는 소스코드에 따라 실행되어 제어가 수행되는 제어 흐름을 분석하는 각각의 과정으로 수행되고 있다. 한편 이처럼 구문 요소 검사, 중간값, 즉 데이터의 흐름 분석, 또는 제어 흐름을 분석하는 방법으로는 각각의 특징에 따른 보안 취약점을 분석하는 데에는 용이하나, 이러한 개별적인 특징을 벗어나는 복합적 성향의 보안 취약점 분석에는 적용하기 어렵다는 문제가 있다. 일예로 값이나 타입 정보, 사용자의 의도나 최적화 등 구문, 제어 또는 데이터의 흐름으로 표현하기 어려운 경우, 기존의 방식으로는 보안 취약점의 분석이 어렵다는 문제가 있다. 또한, 현재 사용되고 있는 보안 취약점 검출 방법은 사용자가 보안 취약점 검출 결과에 따라 소스코드를 직접 수정하여야 하며, 이로 인해 보안 취약점을 수정하는 시간이 오래 걸림에 따라 데이터가 노출될 가능성이 있고, 인건비 또한 증가하게 되는 문제가 있다."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명이 해결하고자 하는 과제는 소스코드의 취약점을 검출하고, 취약점을 개선할 수 있는 소스코드를 추천하 는 AI 기반 소스코드의 보안 취약점 검출 방법, 장치 및 프로그램을 제공하는 것이다. 본 발명이 해결하고자 하는 과제들은 이상에서 언급된 과제로 제한되지 않으며, 언급되지 않은 또 다른 과제들 은 아래의 기재로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상술한 과제를 해결하기 위한 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 방법은 소스코드 에서 발생할 수 있는 복수의 취약점 정보를 획득하는 단계와, 상기 복수의 취약점 정보 각각을 개선하기 위한 복수의 제1소스코드 정보를 획득하는 단계와, 상기 복수의 취약점 정보 각각에 대한 제1소스코드 정보를 학습하 는 단계와, 사용자로부터 획득되는 제2소스코드의 취약점을 검출하는 단계와, 상기 제2소스코드의 취약점을 검 출한 결과에 따라, 상기 제1소스코드 중 상기 제2소스코드의 취약점을 개선할 적어도 하나 이상의 제1소스코드 를 추천하는 단계를 포함할 수 있다. 상술한 과제를 해결하기 위한 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 장치는 하나 이 상의 인스트럭션을 저장하는 메모리와, 상기 메모리에 저장된 상기 하나 이상의 인스트럭션을 실행하는 프로세 서를 포함하고, 상기 프로세서는 상기 하나 이상의 인스트럭션을 실행함으로써, AI 기반 소스코드의 보안 취약 점 검출 방법을 수행할 수 있다. 상술한 과제를 해결하기 위한 본 발명의 일 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 프로그램은 하드웨어인 컴퓨터와 결합하여, AI 기반 소스코드의 보안 취약점 검출 방법을 수행할 수 있도록 컴퓨터에서 독 출가능한 기록매체에 저장될 수 있다. 본 발명의 기타 구체적인 사항들은 상세한 설명 및 도면들에 포함되어 있다."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명은 소스코드의 취약점을 검출하고, 취약점을 개선할 수 있는 소스코드를 추천할 수 있다. 또한, 소스코드를 작성하는 개발자는 취약점을 개선하기 위해 소스코드를 직접 수정하지 않고, 추천해주는 소스 코드를 이용함으로써 더 빠르고 편리하게 소스코드의 취약점을 개선할 수 있다."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "본 발명의 효과들은 이상에서 언급된 효과로 제한되지 않으며, 언급되지 않은 또 다른 효과들은 아래의 기재로 부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 상세하게 후술되어 있는 실시 예들을 참조하면 명확해질 것이다. 그러나, 본 발명은 이하에서 개시되는 실시예들에 제한되는 것이 아니라 서 로 다른 다양한 형태로 구현될 수 있으며, 단지 본 실시예들은 본 발명의 개시가 완전하도록 하고, 본 발명이 속하는 기술 분야의 통상의 기술자에게 본 발명의 범주를 완전하게 알려주기 위해 제공되는 것이며, 본 발명은청구항의 범주에 의해 정의될 뿐이다. 본 명세서에서 사용된 용어는 실시예들을 설명하기 위한 것이며 본 발명을 제한하고자 하는 것은 아니다. 본 명 세서에서, 단수형은 문구에서 특별히 언급하지 않는 한 복수형도 포함한다. 명세서에서 사용되는 \"포함한다 (comprises)\" 및/또는 \"포함하는(comprising)\"은 언급된 구성요소 외에 하나 이상의 다른 구성요소의 존재 또는 추가를 배제하지 않는다. 명세서 전체에 걸쳐 동일한 도면 부호는 동일한 구성 요소를 지칭하며, \"및/또는\"은 언급된 구성요소들의 각각 및 하나 이상의 모든 조합을 포함한다. 비록 \"제1\", \"제2\" 등이 다양한 구성요소들을 서술하기 위해서 사용되나, 이들 구성요소들은 이들 용어에 의해 제한되지 않음은 물론이다. 이들 용어들은 단 지 하나의 구성요소를 다른 구성요소와 구별하기 위하여 사용하는 것이다. 따라서, 이하에서 언급되는 제1 구성 요소는 본 발명의 기술적 사상 내에서 제2 구성요소일 수도 있음은 물론이다. 다른 정의가 없다면, 본 명세서에서 사용되는 모든 용어(기술 및 과학적 용어를 포함)는 본 발명이 속하는 기술 분야의 통상의 기술자에게 공통적으로 이해될 수 있는 의미로 사용될 수 있을 것이다. 또한, 일반적으로 사용되 는 사전에 정의되어 있는 용어들은 명백하게 특별히 정의되어 있지 않는 한 이상적으로 또는 과도하게 해석되지 않는다. 명세서에서 사용되는 \"부\" 또는 “모듈”이라는 용어는 소프트웨어, FPGA 또는 ASIC과 같은 하드웨어 구성요소 를 의미하며, \"부\" 또는 “모듈”은 어떤 역할들을 수행한다. 그렇지만 \"부\" 또는 “모듈”은 소프트웨어 또는 하드웨어에 한정되는 의미는 아니다. \"부\" 또는 “모듈”은 어드레싱할 수 있는 저장 매체에 있도록 구성될 수 도 있고 하나 또는 그 이상의 프로세서들을 재생시키도록 구성될 수도 있다. 따라서, 일 예로서 \"부\" 또는 “모 듈”은 소프트웨어 구성요소들, 객체지향 소프트웨어 구성요소들, 클래스 구성요소들 및 태스크 구성요소들과 같은 구성요소들과, 프로세스들, 함수들, 속성들, 프로시저들, 서브루틴들, 프로그램 코드의 세그먼트들, 드라 이버들, 펌웨어, 마이크로 코드, 회로, 데이터, 데이터베이스, 데이터 구조들, 테이블들, 어레이들 및 변수들을 포함한다. 구성요소들과 \"부\" 또는 “모듈”들 안에서 제공되는 기능은 더 작은 수의 구성요소들 및 \"부\" 또는 “모듈”들로 결합되거나 추가적인 구성요소들과 \"부\" 또는 “모듈”들로 더 분리될 수 있다. 본 명세서에서, 컴퓨터는 적어도 하나의 프로세서를 포함하는 모든 종류의 하드웨어 장치를 의미하는 것이고, 실시 예에 따라 해당 하드웨어 장치에서 동작하는 소프트웨어적 구성도 포괄하는 의미로서 이해될 수 있다. 예 를 들어, 컴퓨터는 스마트폰, 태블릿 PC, 데스크톱, 노트북 및 각 장치에서 구동되는 사용자 클라이언트 및 애 플리케이션을 모두 포함하는 의미로서 이해될 수 있으며, 또한 이에 제한되는 것은 아니다. 이하, 첨부된 도면을 참조하여 본 발명의 실시예를 상세하게 설명한다. 본 명세서에서 설명되는 각 단계들은 컴퓨터에 의하여 수행되는 것으로 설명되나, 각 단계의 주체는 이에 제한 되는 것은 아니며, 실시 예에 따라 각 단계들의 적어도 일부가 서로 다른 장치에서 수행될 수도 있다. 도 1은 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 시스템을 도시한 도면이다. 도 1을 참조하면, 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 시스템은 검출 장치, 사용자 단말 및 외부 서버를 포함할 수 있다. 여기서, 도 1에 도시된 AI 기반 소스코드의 보안 취약점 검출 시스템은 일 실시 예에 따른 것이고, 그 구성 요 소가 도 1에 도시된 실시 예에 한정되는 것은 아니며, 필요에 따라 부가, 변경 또는 삭제될 수 있다. 검출 장치는 소스코드에서 발생할 수 있는 복수의 취약점 정보를 획득하고, 복수의 취약점 정보 각각을 개 선하기 위한 복수의 제1소스코드 정보를 획득하고, 복수의 취약점 정보 각각에 대한 제1소스코드 정보를 학습할 수 있다. 또한, 검출 장치는 사용자로부터 획득되는 제2소스코드의 취약점을 검출하고, 제2소스코드의 취 약점을 검출한 결과에 따라, 제1소스코드 중 제2소스코드의 취약점을 개선할 적어도 하나 이상의 제1소스코드를 추천할 수 있다. 사용자 단말은 네트워크를 통해 서버에 접속할 수 있으며, 검출 장치로부터 AI 기반 소스코드의 보안 취약점 검출 서비스를 제공받을 수 있다. 한편, AI 기반 소스코드의 보안 취약점 검출 서비스는 사용자 단말 에 설치되는 별도의 프로그램을 통해서 실행될 수 있고, 소스코드를 작성하는 프로그램과 연동되어 실행될 수 있다. 사용자 단말은 사용자 단말의 적어도 일부분에 디스플레이를 구비하는 스마트폰, 태플릿 PC, 데스크 톱 및 노트북 중 적어도 하나를 포함할 수 있으며, 브라우저를 실행하는 과정에서 검출 장치로부터 제공되 는 AI 기반 소스코드의 보안 취약점 검출 서비스를 제공받을 수 있다. 그러나, 이에 한정되지 않는다. 외부 서버는 네트워크를 통해 검출 장치와 연결될 수 있으며, 검출 장치가 AI 기반 소스코드의 보안 취약점 검출 방법을 수행하기 위한 각종 정보를 저장 및 관리할 수 있다. 외부 서버에 저장되는 각종 정보는 검출 장치에서 재학습될 수 있으며, 이를 통해 검출 장치는 소스코드의 취약점을 검출하고, 취약점을 개선할 수 있는 소스코드를 추천하는 데 점점 더 정확해질 수 있다. 또한, 외부 서버는 검출 장치가 AI 기반 소스코드의 보안 취약점 검출 방법을 수행함에 따라 생성되 는 각종 정보 및 데이터를 제공받아 저장할 수 있다. 예를 들어, 외부 서버는 검출 장치 외부에 별도 로 구비되는 저장 서버일 수 있다. 도 2를 참조하여, 검출 장치의 하드웨어 구성에 대해 설명하도록 한다. 도 2는 본 발명의 실시 예에 따른 검출 장치의 하드웨어 구성도이다. 도 2를 참조하면, 본 발명의 실시 예에 따른 검출 장치(이하, 컴퓨팅 장치)는 하나 이상의 프로세서, 프로세서에 의하여 수행되는 컴퓨터 프로그램을 로드(Load)하는 메모리, 버스, 통신 인터 페이스 및 컴퓨터 프로그램을 저장하는 스토리지를 포함할 수 있다. 여기서, 도 2에는 본 발명"}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "의 실시예와 관련 있는 구성요소들만 도시되어 있다. 따라서, 본 발명이 속한 기술분야의 통상의 기술자라면 도 2에 도시된 구성요소들 외에 다른 범용적인 구성 요소들이 더 포함될 수 있음을 알 수 있다. 프로세서는 컴퓨팅 장치의 각 구성의 전반적인 동작을 제어한다. 프로세서는 CPU(Central Processing Unit), MPU(Micro Processor Unit), MCU(Micro Controller Unit), GPU(Graphic Processing Unit) 또는 본 발명의 기술 분야에 잘 알려진 임의의 형태의 프로세서를 포함하여 구성될 수 있다. 또한, 프로세서는 본 발명의 실시예들에 따른 방법을 실행하기 위한 적어도 하나의 애플리케이션 또는 프 로그램에 대한 연산을 수행할 수 있으며, 컴퓨팅 장치는 하나 이상의 프로세서를 구비할 수 있다. 다양한 실시예에서, 프로세서는 프로세서 내부에서 처리되는 신호(또는, 데이터)를 일시적 및/또는 영구적으로 저장하는 램(RAM: Random Access Memory, 미도시) 및 롬(ROM: Read-Only Memory, 미도시)을 더 포 함할 수 있다. 또한, 프로세서는 그래픽 처리부, 램 및 롬 중 적어도 하나를 포함하는 시스템온칩(SoC: system on chip) 형태로 구현될 수 있다. 메모리는 각종 데이터, 명령 및/또는 정보를 저장한다. 메모리는 본 발명의 다양한 실시예에 따른 방 법/동작을 실행하기 위하여 스토리지로부터 컴퓨터 프로그램을 로드할 수 있다. 메모리에 컴퓨 터 프로그램이 로드되면, 프로세서는 컴퓨터 프로그램을 구성하는 하나 이상의 인스트럭션들을 실행함으로써 상기 방법/동작을 수행할 수 있다. 메모리는 RAM과 같은 휘발성 메모리로 구현될 수 있을 것 이나, 본 개시의 기술적 범위가 이에 한정되는 것은 아니다. 버스는 컴퓨팅 장치의 구성 요소 간 통신 기능을 제공한다. 버스는 주소 버스(address Bus), 데 이터 버스(Data Bus) 및 제어 버스(Control Bus) 등 다양한 형태의 버스로 구현될 수 있다. 통신 인터페이스는 컴퓨팅 장치의 유무선 인터넷 통신을 지원한다. 또한, 통신 인터페이스는 인 터넷 통신 외의 다양한 통신 방식을 지원할 수도 있다. 이를 위해, 통신 인터페이스는 본 발명의 기술 분 야에 잘 알려진 통신 모듈을 포함하여 구성될 수 있다. 몇몇 실시예에서, 통신 인터페이스는 생략될 수도 있다. 스토리지는 컴퓨터 프로그램을 비 임시적으로 저장할 수 있다. 컴퓨팅 장치를 통해 AI 기반 소 스코드의 보안 취약점 검출 방법을 수행하는 경우, 스토리지는 AI 기반 소스코드의 보안 취약점 검출 방법 을 제공하기 위하여 필요한 각종 정보를 저장할 수 있다. 스토리지는 ROM(Read Only Memory), EPROM(Erasable Programmable ROM), EEPROM(Electrically Erasable Programmable ROM), 플래시 메모리 등과 같은 비휘발성 메모리, 하드 디스크, 착탈형 디스크, 또는 본 발명이 속하는 기술 분야에서 잘 알려진 임의의 형태의 컴퓨터로 읽을 수 있는 기록 매체를 포함하여 구성될 수 있다. 컴퓨터 프로그램은 메모리에 로드될 때 프로세서로 하여금 본 발명의 다양한 실시예에 따른 방 법/동작을 수행하도록 하는 하나 이상의 인스트럭션들을 포함할 수 있다. 즉, 프로세서는 상기 하나 이상 의 인스트럭션들을 실행함으로써, 본 발명의 다양한 실시예에 따른 상기 방법/동작을 수행할 수 있다.일 실시예에서, 컴퓨터 프로그램은 소스코드에서 발생할 수 있는 복수의 취약점 정보를 획득하는 단계와, 상기 복수의 취약점 정보 각각을 개선하기 위한 복수의 제1소스코드 정보를 획득하는 단계와, 상기 복수의 취약 점 정보 각각에 대한 제1소스코드 정보를 학습하는 단계와, 사용자로부터 획득되는 제2소스코드의 취약점을 검 출하는 단계와, 상기 제2소스코드의 취약점을 검출한 결과에 따라, 상기 제1소스코드 중 상기 제2소스코드의 취 약점을 개선할 적어도 하나 이상의 제1소스코드를 추천하는 단계를 포함하는, AI 기반 소스코드의 보안 취약점 검출 방법을 수행하도록 하는 하나 이상의 인스트럭션을 포함할 수 있다. 본 발명의 실시예와 관련하여 설명된 방법 또는 알고리즘의 단계들은 하드웨어로 직접 구현되거나, 하드웨어에 의해 실행되는 소프트웨어 모듈로 구현되거나, 또는 이들의 결합에 의해 구현될 수 있다. 소프트웨어 모듈은 RAM(Random Access Memory), ROM(Read Only Memory), EPROM(Erasable Programmable ROM), EEPROM(Electrically Erasable Programmable ROM), 플래시 메모리(Flash Memory), 하드 디스크, 착탈형 디스크, CD-ROM, 또는 본 발명이 속하는 기술 분야에서 잘 알려진 임의의 형태의 컴퓨터 판독가능 기록매체에 상주할 수도 있다. 본 발명의 구성 요소들은 하드웨어인 컴퓨터와 결합되어 실행되기 위해 프로그램(또는 애플리케이션)으로 구현 되어 매체에 저장될 수 있다. 본 발명의 구성 요소들은 소프트웨어 프로그래밍 또는 소프트웨어 요소들로 실행 될 수 있으며, 이와 유사하게, 실시 예는 데이터 구조, 프로세스들, 루틴들 또는 다른 프로그래밍 구성들의 조 합으로 구현되는 다양한 알고리즘을 포함하여, C, C++, 자바(Java), 어셈블러(assembler), 파이썬(Python) 등과 같은 프로그래밍 또는 스크립팅 언어로 구현될 수 있다. 기능적인 측면들은 하나 이상의 프로세서들에서 실행되 는 알고리즘으로 구현될 수 있다. 이하, 도 3을 참조하여, 컴퓨팅 장치가 제공하는 AI 기반 소스코드의 보 안 취약점 검출 방법에 대해 설명하도록 한다. 도 3은 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 방법을 나타내는 도면이다. 도 3을 참조하면, 컴퓨팅 장치는 소스코드에서 발생할 수 있는 복수의 취약점 정보를 획득할 수 있다 (S100). 취약점 정보는, Race Condition, 환경변수, 계정 및 패스워드, 접근권한, 시스템 구성, 네트워크 구성, 버퍼오 버플로우, 백도어 등의 시스템 취약점을 포함하고, 불필요한 서비스와 정보 제공, 서비스 거부 공격, RPC, HTTP, SMTP, FTP, BIND, FINGER, 버퍼오버플로우 등의 네트워크 취약점, 웹 서버, 방화벽 서버, IDS 서버, 데 이터베이스 서버, 소스코드 취약점 등의 응용프로그램 취약점을 포함할 수 있으나, 이에 한정되는 것은 아니다. 컴퓨팅 장치는 네트워크를 통해 복수의 취약점 정보를 수집하여 획득할 수 있고, 관리자의 입력 또는 AI 기반 소스코드의 보안 취약점 검출 시스템을 수행함에 따라 획득되는 데이터들을 통해 획득할 수도 있다. 컴퓨팅 장치는 복수의 취약점 정보 각각을 개선하기 위한 복수의 제1소스코드 정보를 획득할 수 있다 (S200). 일반적으로 소스코드를 작성하는 사용자들은 오픈소스코드를 활용하여 소스코드를 작성하며, 오픈소스코드의 취 약점을 분석한 결과 또한 오픈되며, 취약점을 개선하기 위해 수정된 소스코드 또한 제공되고 있다. 컴퓨팅 장치 는 이러한 오픈된 소스코드 및 취약점을 개선하기 위한 소스코드를 제1소스코드 정보로 획득할 수 있다. 한편, 오픈소스코드에 한정되는 것은 아니며, 사용자가 직접 입력한 소스코드와, 해당 소스코드의 취약점을 분 석한 결과와, 취약점을 분석한 결과에 따라 수정된 소스코드를 제1소스코드 정보로 획득할 수 있다. 컴퓨팅 장치는 복수의 취약점 정보 각각에 대한 제1소스코드 정보를 학습할 수 있다(S300). 구체적으로, 컴퓨팅 장치는 복수의 취약점 정보를 종류에 따라 분류할 수 있다. 예를 들어, 컴퓨팅 장치 는 복수의 취약점 정보를 소스코드가 이용되는 프로그램에 따라 시스템 취약점, 네트워크 취약점, 응용프 로그램 취약점으로 분류할 수 있다. 더 나아가, 컴퓨팅 장치는 Race Condition, 환경변수, 계정 및 패스워 드, 접근권한, 시스템 구성, 네트워크 구성, 버퍼오버플로우, 백도어, 불필요한 서비스와 정보 제공, 서비스 거 부 공격, RPC, HTTP, SMTP, FTP, BIND, FINGER, 웹 서버, 방화벽 서버, IDS 서버, 데이터베이스 서버, 소스코 드 취약점 각각에 대해 분류할 수도 있다. 또한, 취약점 정보를 소스코드가 이용되는 프로그램에 따라 분류하는 것으로 기재하였으나, 분류되는 기준은 이에 한정되지 않을 수 있다. 컴퓨팅 장치는 분류된 취약점 종류에 따라 제1소스코드를 분류할 수 있다. 컴퓨팅 장치는 분류된 취 약점 종류 각각을 개선하기 위한 제1소스코드를 분류된 취약점 종류에 따라 분류할 수 있다. 컴퓨팅 장치는 각 종류별 취약점 정보를 입력값으로 하고, 각 종류별 취약점 정보에 대응되는 제1소스코 정보를 출력값으로 하여 인공지능 모델을 학습시킬 수 있다. 컴퓨팅 장치는 사용자로부터 획득되는 제2소스코드의 취약점을 검출할 수 있다(S400). 다양한 실시 예에서, 컴퓨팅 장치는 사용자가 기 설정된 제1 단위의 코드를 입력한 것으로 판단될 경우 해 당 제1 단위의 코드에 대한 취약점 점검을 수행할 수 있다. 또한, 기 설정된 제1 단위보다 큰 제2 단위의 코드 가 완성된 것으로 판단될 경우, 제2 단위의 코드에 대한 취약점 점검을 수행할 수 있다. 이러한 방식으로, 컴퓨 팅 장치는 실시간 코딩에 대한 취약점 점검을 수행할 수 있다. 다양한 실시 예에서, 컴퓨팅 장치는 사용자가 입력하는 코멘트에 기반하여 취약점 점검을 수행할 수 있다. 사용자는 취약점을 점검할 제2소스코드의 특정 위치에 특정 코멘트를 입력할 수 있다. 예를 들어, 사용자는 하 나의 함수에 대한 소스코드를 작성한 후, 해당 함수의 함수명 위에 “//completed”코멘트를 입력할 수 있다. 한편, 코멘트가 입력되는 위치를 함수명 위로 기재하였으나, 코멘트가 입력되는 위치는 이에 한정되지 않는다. 예를 들어, 점검을 원하는 소스코드를 드래그한 후 기 설정된 코멘트를 입력하거나, 하나의 함수에 대한 소스코 드가 마무리되는 위치에 코멘트를 입력할 수도 있다. 또한, 특정 코멘트가 //completed인 것으로 기재하였으나, 이에 한정되지 않는다. 다양한 실시 예에서, 컴퓨팅 장치는 사용자로부터 입력된 코멘트의 종류에 따라 취약점 점검 프로세스를 설정할 수 있다. 예를 들어, 사용자로부터 특정 코멘트가 입력되어 있는 경우(예: “”해당 부분에 대해서는 취 약점 점검을 생략할 수 있다. 다른 예로, 사용자로부터 입력된 코멘트에 따라 취약점 점검 강도나 우선순위가 설정될 수 있다. 예를 들어, 점검 강도를 높게 하도록 하는 코멘트가 입력되어 있는 경우(예: “”해당 부분의 취약점 점검을 강하게 수행하여, 취약점이 존재하는 것으로 판단하는 기준점을 하향 조정할 수 있다. 또한, 숫 자나 알파벳 등 기 설정된 규칙에 따라 점검 우선순위에 대한 정보가 코멘트에 포함되어 있을 경우, 컴퓨팅 장 치는 취약점 점검 순서를 조정할 수 있다. 다양한 실시 예에서, 컴퓨팅 장치는 입력된 코멘트에 따라 취약점 점검을 수행하는 시점을 변경할 수 있다. 예를 들어, 사용자가 코멘트에 취약점 점검 시점을 딜레이할 것을 요청하는 명령어를 입력할 경우, 컴퓨 팅 장치는 입력된 명령어에 따른 요청시점만큼 딜레이된 시점에 취약점 점검을 수행할 수 있다. 예를 들어, 사용자는 코드를 작성하면서 빠른 코드의 완성을 위해 취약점 점검을 미루고자 할 수 있다. 이 경우, 사 용자는 딜레이를 원하는 시간이나 라인 수, 코드의 단위 수를 나타내는 코멘트를 입력할 수 있다. 컴퓨팅 장치 는 코멘트의 지시에 따라 딜레이된 시점에 해당 부분의 취약점 점검을 수행할 수 있다. 취약점 점검 결과 는 해당 위치에 표시되어, 사용자가 해당 위치로 돌아가서 취약점 점검 결과를 확인하고, 필요시 코드를 수정하 도록 할 수 있다.예를 들어, 코멘트가 “//delay50lines”일 경우, 컴퓨팅 장치는 사용자가 해당 위치로부 터 50 라인을 추가로 작성한 시점에 해당 위치의 코드에 대한 취약점 점검을 수행할 수 있으나, 이에 제한되지 않는다. 취약점 점검 결과 문제가 있을 경우, 컴퓨팅 장치는 해당 라인에 아이콘을 표시하고, 사용자가 아 이콘을 선택할 경우 취약점 정보와 이를 수정하기 위한 소스코드 정보를 표시할 수 있다. 만일 추가로 작성된 50라인의 내용에 따라 취약점 정보 혹은 이를 수정하기 위한 소스코드 정보가 변경되었을 경우, 컴퓨팅 장치 는 기존 정보를 대체하거나, 사용자가 선택할 수 있도록 병렬적으로 표시할 수도 있다. 한편, 사용자는 소스코드를 입력하는 프로그램을 통해 소스코드를 작성하는 중에, 해당 프로그램 상에서 코멘트 를 입력할 수 있으며, 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 시스템은 백그라운드 상 에서 실행되다가 특정 코멘트가 인식될 경우 상기 프로그램과의 연동을 통해 제2소스코드를 획득할 수 있다. 그 러나, 이에 한정되는 것은 아니며, 사용자가 AI 기반 소스코드의 보안 취약점 검출 시스템을 이용하여 소스코드 를 작성하면서 특정 코멘트를 입력할 수 있고, AI 기반 소스코드의 보안 취약점 검출 시스템에서 입력되는 특정 코멘트를 판단하여 AI 기반 소스코드의 보안 취약점 검출 방법을 수행할 수 있다. 컴퓨팅 장치는 특정 코멘트가 입력되는지 여부를 판단하고, 특정 코멘트가 입력되면, 특정 코멘트가 포함 되는 복수의 영역을 구분할 수 있다. 예를 들어, 컴퓨팅 장치는 특정 코멘트가 입력된 함수, 함수가 포함 된 클래스, 상기 클래스가 속한 상위 클래스에 따라 복수의 영역을 구분할 수 있으나, 이에 한정되는 것은 아니 다. 컴퓨팅 장치는 복수의 영역 각각에 포함되는 제2소스코드를 획득할 수 있다. 컴퓨팅 장치는 복수의 영역 각각에 포함되는 제2소스코드 각각에 대해 취약점 점검을 수행할 수 있으며, 작은 범위의 영역부터 큰 범위의 영역의 순서로 점검을 수행할 수 있다. 다양한 실시 예에서, 사용자의 코멘트 내용에 따라 점검 순서나 방식이 변경될 수도 있다. 예를 들어, 작은 범 위의 영역에서 취약점 점검을 수행한 결과, 취약점이 검출되지 않은 경우 큰 범위의 영역은 취약점 점검을 수행 하지 않을 수도 있다. 반대로, 작은 범위의 영역에서 취약점이 발견되지 않은 경우 큰 범위의 영역에 대한 취약 점 점검을 수행하고, 작은 범위의 영역에서 취약점이 발견된 경우 큰 범위의 영역에 대한 취약점 점검을 수행하 지 않을 수 있다. 이후 작은 범위의 영역에 대한 취약점이 해소될 경우, 큰 범위의 영역에 대한 취약점 점검을 수행할 수도 있다. 컴퓨팅 장치는 제2소스코드의 취약점을 검출한 결과에 따라, 제1소스코드 중 제2소스코드의 취약점을 개선 할 적어도 하나 이상의 제1소스코드를 추천할 수 있다(S500). 컴퓨팅 장치는 제2소스코드에서 검출된 취약점을 종류에 따라 분류할 수 있다. 즉, 컴퓨팅 장치는 상 기 S300 단계에서 복수의 취약점 정보를 분류한 카테고리 중 제2소스코드에서 검출된 취약점이 해당하는 종류를 판단하는 것일 수 있다. 예를 들어, 제2소스코드에서 검출된 취약점이 백도어에 대한 것인 경우, 컴퓨팅 장치 는 제2소스코드에서 검출된 취약점을 시스템 취약점으로 분류할 수 있다. 컴퓨팅 장치는 제2소스코드의 분류에 해당하는 복수의 제1소스코드를 추출할 수 있다. 예를 들어, 제2소스 코드가 시스템 취약점으로 분류된 경우, 컴퓨팅 장치는 시스템 취약점에 대한 개선책으로 분류되어 있는 제1소스코드를 추출할 수 있다. 컴퓨팅 장치는 추출된 복수의 제1소스코드 각각에 대해, 제2소스코드의 취약점을 개선하는데 적절한 정도 를 점수화할 수 있다. 점수는 숫자나, 확률 등으로 나타낼 수 있으나, 이에 한정되는 것은 아니다. 제2소스코드 를 점수화하는 구체적인 방법은 도 4 및 도 5를 통해 설명하도록 한다. 컴퓨팅 장치는 점수가 높은 순서대로 제1소스코드를 추천할 수 있다. 컴퓨팅 장치는 기 설정되어 있 는 순위만큼 추천할 제2소스코드를 제공할 수 있다. 예를 들어, 기 설정되어 있는 순위가 3인 경우, 점수가 높 은 3개의 제1소스코드를 제공할 수 있다. 이때, 제공되는 소스코드 각각의 점수를 같이 제공할 수 있으며, 이를 통해 사용자에게 선택의 다양성을 제공할 수 있다. 또한, 컴퓨팅 장치는 순위 상 제공되지 않은 다른 제1소스코드를 더 확인할 수 있는 인스트럭션을 제공할 수 있고, 사용자의 선택에 따라 기 설정된 순위 이후의 제1소스코드들도 순차적으로 제공할 수 있다. 도 4는 본 발명의 제1실시 예에 따른 제2소스코드를 점수화하는 방법을 나타내는 도면이다. 도 4를 참조하면, 컴퓨팅 장치는 제2소스코드에 발생한 취약점의 원인을 분석할 수 있다(S510). 예를 들어, 제2소스코드에 발생한 취약점의 원인은, 프로그램 입력값에 대한 검증 누락 또는 부적절한 검증, 데이터 형식을 잘못 지정, 보안기능(예를 들어, 인증, 접근제어, 기밀성, 암호화, 권한 관리 등)을 부적절하게 구현, 동시 또는 거의 동시 수행을 지원하는 병렬 시스템, 하나 이상의 프로세서가 동작되는 환경에서 시간 및 상태를 부적절하게 관리, 에러를 처리하지 않거나, 불충분하게 처리하여 에러정보에 중요정보가 포함, 타입변환 오류, 자원의 부적절한 반환 등과 같이 개발자가 범하는 코딩오류, 중요한 데이터 또는 기능성을 불충분하게 캡슐화하 였을 때 인가되지 않은 사용자에게 데이터 누출, 의도된 사용에 반하는 방법으로 API를 사용하거나, 보안에 취 약한 API를 사용하는 것을 포함할 수 있으나, 이에 한정되는 것은 아니다. 컴퓨팅 장치는 분석된 원인이 해소되는 소스코드가 포함된 제1소스코드에 대해 기 설정된 점수를 부가할 수 있다(S511). 여기서, 점수가 부가되는 제1소스코드는 제2소스코드의 취약점 종류와 동일한 취약점 종류에 따 른 제1소스코드일 수 있다. 예를 들어, 제2소스코드에 발생한 취약점의 원인이 데이터형식을 잘못 지정했기 때 문인 경우, 컴퓨팅 장치는 잘못 지정된 데이터형식과, 정상적으로 지정해야하는 데이터형식을 제2소스코드 를 통해 분석할 수 있다. 이후, 제1소스코드 중 데이터형식을 잘못 지정했을 경우 이를 해소할 수 있는 소스코 드가 포함된 제1소스코드에 기 설정된 점수를 부가할 수 있다. 더 나아가, 제2소스코드에서 잘못 지정된 데이터 형식에 의한 취약점을 개선하기 위한 제1소스코드나, 제2소스코드에서 정상적으로 지정해야하는 데이터형식과 동일한 데이터형식을 통해 취약점을 개선하는 제1소스코드 또는 제2소스코드에서 잘못 지정된 데이터 형식에 의 한 취약점을 제2소스코드에서 정상적으로 지정해야하는 데이터형식을 통해 개선한 제1소스코드에는 더 높은 점 수를 부가할 수 있다.컴퓨팅 장치는 제1소스코드가 선택된 개수에 따라 점수를 부가할 수 있다(S512). 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 시스템을 사용하는 여러 사용자들은 취약점 분 석에 따라 제공되는 제1소스코드들 중 하나를 선택할 수 있고, 컴퓨팅 장치는 각 제1소스코드마다 선택되 는 횟수를 누적하여 저장하고 있을 수 있다. 컴퓨팅 장치는 선택된 횟수가 많은 제1소스코드일수록 더 높 은 점수를 부가할 수 있다. 선택된 횟수가 많은 제1소스코드는 취약점을 개선하는데 적당한 소스코드로써 많은 사용자들이 선택한 것으로 취약점을 개선하는데 효과가 있다가 검증이 된 소스코드일 수 있다. 이때, 컴퓨팅 장 치는 선택되는 횟수에 따라 점수를 저장하고 있으며, 제1소스코드가 선택된 횟수에 해당하는 점수를 추출 하여 해당 제1소스코드의 점수로 부가할 수 있다. 또한, 컴퓨팅 장치는 선택되는 횟수가 많은 순서에 따라 점수를 저장하고 있으며, 선택되는 횟수가 많은 순서대로 정렬했을 때 제1소스코드의 순서에 해당하는 점수를 추출하여 해당 제1소스코드의 점수로 부가할 수 있다. 또한, 컴퓨팅 장치는 제1소스코드가 선택된 횟수 자 체를 점수로써 부가할 수도 있다. 또한, 컴퓨팅 장치는 제1소스코드를 제2소스코드에 적용시 오류 발생 가능성에 따라 점수를 부가할 수 있 다(S513). 기 저장되어 있는 제1소스코드를 전혀 다른 소스코드와 병합함으로써 소스코드 전체에 대해 새로운 오류가 발생하게 될 수 있다. 이에 따라, 컴퓨팅 장치는 제2소스코드가 포함된 전체 소스코드에서 제1소스 코드가 병합될 경우 영향을 줄 수 있는 범위를 결정하고, 해당 범위 내에 제1소스코드를 병합할 경우 오류 발생 가능성이 가장 작은 제1소스코드에 대해 가장 높은 점수를 부가할 수 있다. 이때, 컴퓨팅 장치는 오류 발 생 가능성의 수치에 따라 점수를 저장하고 있으며, 제1소스코드의 오류 발생 가능성에 해당하는 점수를 추출하 여 해당 제1소스코드의 점수로 부가할 수 있다. 또한, 컴퓨팅 장치는 오류 발생 가능성이 낮은 순서에 따 라 점수를 저장하고 있으며, 오류 발생 가능성이 낮은 순서대로 정렬했을 때 제1소스코드의 순서에 해당하는 점 수를 추출하여 해당 제1소스코드의 점수로 부가할 수 있다. 그러나, 이에 한정되는 것은 아니다. 한편, S511 내지 S513 단계는 순차적으로 진행되는 것으로 기재하였으나, S511 내지 S513 단계는 병렬적으로 진 행될 수 있다. 컴퓨팅 장치는 부가된 점수들을 통합하여 제1소스코드 각각을 점수화할 수 있다(S514). 컴퓨팅 장치 는 제1소스코드에 부가된 점수들을 모두 합하거나, 평균을 산출하여 제1소스코드의 점수를 결정할 수 있고, 추 출된 제1소스코드에 대해 특정 제1소스코드가 제2소스코드의 취약점을 개선하는 적절한 정도에 대한 확률값을 산출하여 제1소스코드의 점수를 결정할 수 있다. 다양한 실시 예에서, 컴퓨팅 장치는 취약점 정보와 소스코드 정보를 학습 데이터로 하여 학습된 인공지능 모델을 이용하여 취약점을 개선할 수 있는 소스코드를 선택하고, 점수를 산출하여 제공할 수 있다. 예를 들어, 인공지능 모델은 취약점 정보를 입력으로 하고, 이에 대응하는 소스코드 정보를 출력으로 하여 학습될 수 있다. 컴퓨팅 장치는 학습된 인공지능 모델에 취약점 정보를 입력하고, 인공지능 모델의 출력으로부터 하나 이상 의 소스코드 정보를 획득할 수 있다. 실시 예에 따라, 컴퓨팅 장치는 복수의 소스코드 및 각 소스코드의 확률 정보를 획득할 수 있다. 이 경우, 컴퓨팅 장치는 확률순으로 기 설정된 개수의 소스코드 정보를 제공 할 수 있다. 도 5는 본 발명의 제1실시 예에 따른 제2소스코드를 점수화하는 방법을 나타내는 도면이다. 도 5를 참조하면, 컴퓨팅 장치는 제2소스코드에 대해, 기 설정된 복수의 특징을 분석할 수 있다(S520). 예 를 들어, 복수의 특징은, 소스코드의 배열 순서, 변수명, 함수 등을 포함할 수 있으나, 이에 한정되는 것은 아 니다. 컴퓨팅 장치는 추출된 제1소스코드 각각에 대해, 제2소스코드의 특징 각각에 대한 유사도를 산출할 수 있 다(S521). 컴퓨팅 장치는 제1소스코드의 배열 순서, 변수명, 함수를 포함하는 특징을 분석할 수 있고, 제1 소스코드의 특징과 제2소스코드의 특징을 비교하여 유사도를 산출할 수 있다. 예를 들어, 컴퓨팅 장치는 특정 제1소스코드의 배열 순서와 제2소스코드의 배열 순서를 비교하여 유사도를 산출하고, 특정 제1소스코드의 변수명과 제2소스코드의 변수명을 비교하여 유사도를 산출하고, 특정 제1소스코드의 함수와 제2소스코드의 함수 를 비교하여 유사도를 산출할 수 있다. 컴퓨팅 장치는 복수의 특징 각각에 해당하는 가중치에 따라 제1소스코드 각각의 점수를 산출할 수 있다 (S522). 예를 들어, 배열 순서에 대해서는 5의 가중치, 변수명에 대해서는 2의 가중치, 함수에 대해서는 3의 가중치가 설정되어 있을 때, 컴퓨팅 장치는 특징 각각에 따라 산출된 유사도에 가중치를 반영하여 점수를 산 출할 수 있다. 이때, 컴퓨팅 장치는 산출된 유사도의 값 자체에 가중치를 반영하여 점수를 산출할 수 있고, 유사도의 범위에 따라 기 설정되어 있는 점수를 기초로, 유사도를 점수로 치환한 뒤 가중치를 반영하여 점수를 산출할 수도 있다. 도 6은 본 발명의 실시 예에 따른 선택된 제1소스코드를 제2소스코드에 적용하는 방법을 나타내는 도면이다. 도 6을 참조하면, 컴퓨팅 장치는 추천된 하나 이상의 제1소스코드 중 하나의 제1소스코드를 선택받을 수 있다(S600). 사용자는 추천되는 하나 이상의 제1소스코드 중 하나의 제1소스코드를 선택할 수 있으며, 컴퓨팅 장치는 사용자가 선택한 제1소스코드 정보를 획득할 수 있다. 컴퓨팅 장치는 선택된 제1소스코드의 변수 데이터를 특정할 수 있다(S610). 여기서의 변수 데이터는, 정해 지지 않고 변환이 가능한 데이터를 의미하는 것으로, 예를 들어, 변수명 등을 포함할 수 있다. 컴퓨팅 장치는 제2소스코드에서 제1소스코드의 변수 데이터와 동일한 역할을 하는 변수 데이터를 추출할 수 있다(S620). 예를 들어, 컴퓨팅 장치는 특정 함수 앞에 사용된 단어, 특정 위치에 사용된 단어를 추출 하는 등의 방법으로 제2소스코드에서 제1소스코드의 변수 데이터와 동일한 역할을 하는 변수 데이터를 추출할 수 있다. 컴퓨팅 장치는 제2소스코드를 삭제하고, 제1소스코드를 입력하되, 제1소스코드의 변수 데이터를 제2소스코 드의 변수 데이터로 변환하여 입력할 수 있다(S630). 즉, 컴퓨팅 장치는 제2소스코드에서 발견된 취약점을 개선하기 위해 제2소스코드 대신 제1소스코드를 삽입함으로써, 취약점이 발견되지 않는 소스코드를 완성시킬 수 있다. 그러나, 제1소스코드를 삽입할 경우, 변수명이나, 문구 등이 전체 소스코드에서 사용된 것과 다를 수 있 다. 이런 경우, 에러 또는 오류가 발생하게 되며, 더 나아가 원하지 않은 방향으로 컴파일될 우려도 있다. 이에 따라, 컴퓨팅 장치는 전체 소스코드에서 사용된 변수명이나 문구 등을 따라 제1소스코드의 변수명이나 문 구 등을 변경함으로써, 변수명이나 문구가 상이하여 발생하는 컴파일 오류를 방지할 수 있다. 도 7은 본 발명의 실시 예에 따른 인공지능 모델을 업데이트하는 방법을 나타내는 도면이다. 도 7을 참조하면, 컴퓨팅 장치는 추천된 제1소스코드 중 특정 제1소스코드를 선택한 이유를 입력하는 인스 트럭션을 제공할 수 있다(S700). 컴퓨팅 장치는 사용자가 선택한 이유를 직접 입력할 수 있는 입력창을 제 공하거나, 사용자가 선택한 이유를 선택할 수 있는 선택창을 제공할 수 있다. 컴퓨팅 장치는 획득되는 사용자의 답변을 취약점 점검 결과, 추천된 제1소스코드들 및 선택된 제1소스코드 와 매칭하여 저장할 수 있다(S710). 컴퓨팅 장치는 여러 사용자들로부터 획득되는 이유를 기초로, 제1소스코드들을 점수화하기 위한 목록별 가 중치를 변경할 수 있다(S720). 예를 들어, 컴퓨팅 장치는 제2소스코드와 유사한 정도가 큰 제1소스코드가 추천되도록 유사한 정도를 판단하는 목록에 큰 가중치가 부가되어 있을 수 있다. 이에 따라, 컴퓨팅 장치 는 제2소스코드와 유사한 정도가 큰 제1소스코드들을 추천했으나, 사용자들은 편리성을 위해 짧은 소스코드로 이루어진 제1소스코드를 선택했을 수 있다. 이에 따라, 컴퓨팅 장치는 짧은 소스코드로 이루어진 제1소스 코드가 추천되도록 소스코드의 길이를 판단하는 목록에 큰 가중치가 부가되도록 목록별 가중치를 변경할 수 있 다. 이때, 컴퓨팅 장치는 취약점 정보별 특정 개수 이상의 답변이 획득되었을 때 답변을 분석하여, 목록별 가 중치를 변경할 수 있고, 취약점 정보별 특정 답변에 특정 개수 이상의 답변이 획득되었을 때 답변을 분석하여, 목록별 가중치를 변경할 수 있다. 전술한 바와 같이, 본 발명의 실시 예에 따르면 소스코드의 취약점을 검출하고, 취약점을 개선할 수 있는 소스 코드를 추천하는 AI 기반 소스코드의 보안 취약점 검출 방법, 장치 및 프로그램에 관한 것이다."}
{"patent_id": "10-2022-0170525", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상, 첨부된 도면을 참조로 하여 본 발명의 실시예를 설명하였지만, 본 발명이 속하는 기술분야의 통상의 기술 자는 본 발명이 그 기술적 사상이나 필수적인 특징을 변경하지 않고서 다른 구체적인 형태로 실시될 수 있다는것을 이해할 수 있을 것이다. 그러므로, 이상에서 기술한 실시예들은 모든 면에서 예시적인 것이며, 제한적이 아닌 것으로 이해해야만 한다."}
{"patent_id": "10-2022-0170525", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 시스템을 도시한 도면이다. 도 2는 본 발명의 실시 예에 따른 검출 장치의 하드웨어 구성도이다. 도 3은 본 발명의 실시 예에 따른 AI 기반 소스코드의 보안 취약점 검출 방법을 나타내는 도면이다. 도 4는 본 발명의 제1실시 예에 따른 제2소스코드를 점수화하는 방법을 나타내는 도면이다. 도 5는 본 발명의 제1실시 예에 따른 제2소스코드를 점수화하는 방법을 나타내는 도면이다. 도 6은 본 발명의 실시 예에 따른 선택된 제1소스코드를 제2소스코드에 적용하는 방법을 나타내는 도면이다. 도 7은 본 발명의 실시 예에 따른 인공지능 모델을 업데이트하는 방법을 나타내는 도면이다."}
