{"patent_id": "10-2022-7037850", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0015895", "출원번호": "10-2022-7037850", "발명의 명칭": "하드웨어를 워크로드 최적화하기 위한 시스템들, 장치들, 및 방법들", "출원인": "인텔 코포레이션", "발명자": "팔레모, 스테판"}}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "워크로드의 실행을 구성하기 위한 장치로서,상기 워크로드를 실행하기 위해 프로세서의 하나 이상의 코어에 의해 실행될 명령어에 기초하여 적용 비율을 결정하고; 상기 워크로드의 실행 이전에, (i) 상기 적용 비율에 기초하여 상기 프로세서의 하나 이상의 코어 또는 (ii) 상기 적용 비율에 기초하여 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하기 위한전력 제어 회로부; 및상기 하나 이상의 코어 또는 상기 언코어 로직 중 적어도 하나를 사용하여 상기 워크로드의 실행을 개시하기 위한 실행 회로부를 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 전력 제어 회로부는:상기 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하고 - 상기 제1 작동 주파수는 상기 적용 비율과연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -;상기 언코어 로직의 제2 작동 주파수를 식별하며,상기 제2 작동 주파수는 상기 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함되고, 상기 전력제어 회로부는 (i) 상기 제1 작동 주파수 또는 상기 제2 작동 주파수 중 적어도 하나에 기초하여 상기 프로세서의 하나 이상의 코어, 또는 (ii) 상기 제1 작동 주파수 또는 상기 제2 작동 주파수 중 적어도 하나에 기초하여상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항 또는 제2항에 있어서, 상기 전력 제어 회로부는 상기 적용 비율과 연관된 전력 소비가 임계값을 충족시킨다는 결정에 응답하여 상기 프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 전력 제어 회로부는:상기 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 상기 하나 이상의 코어의 제1 작동 주파수를감소시키고;상기 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 상기 언코어 로직의 적어도 일부의제2 작동 주파수를 증가시키며,상기 제2 전력 소비의 증가는 상기 프로세서의 처리량을 증가시키고, 상기 전력 제어 회로부는 상기 제1 작동주파수의 감소 또는 상기 제2 작동 주파수의 증가 중 적어도 하나에 기초하여 상기 프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서, 상기 전력 제어 회로부는:상기 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 것; 또는 공개특허 10-2023-0015895-3-상기 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 - 상기 제2 작동 주파수 또는 상기 제4작동 주파수 중 적어도 하나는 상기 적용 비율과 연관됨 -중 적어도 하나를 위한 것이고, 상기 전력 제어 회로부는 상기 제1 작동 주파수를 상기 제2 작동 주파수로 조정하는 것 또는 상기 제3 작동 주파수를 상기 제4 작동 주파수로 조정하는 것 중 적어도 하나에 기초하여 상기 프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 명령어는 제1 명령어이고, 상기 워크로드는 제1 워크로드이며, 상기 적용 비율은 제1 적용 비율이고, 상기 하나 이상의 코어는 하나 이상의 제1 코어이며, 상기 언코어 로직은 제1 언코어 로직이고,상기 전력 제어 회로부는:제2 워크로드를 실행하기 위해 상기 프로세서의 하나 이상의 제2 코어에 의해 실행될 제2 명령어에 기초하여 제2 적용 비율을 결정하고;상기 제2의 것의 실행 이전에, (i) 상기 제2 적용 비율에 기초하여 상기 프로세서의 하나 이상의 제2 코어 또는(ii) 상기 제2 적용 비율에 기초하여 상기 프로세서의 제2 언코어 로직 중 적어도 하나를 구성하며;상기 실행 회로부는 상기 하나 이상의 제2 코어 또는 상기 제2 언코어 로직 중 적어도 하나를 사용하여 상기 제2 워크로드의 실행을 개시하고, 상기 하나 이상의 제2 코어가 상기 제2 워크로드의 제2 부분을 실행하는 동안상기 하나 이상의 제1 코어는 상기 제1 워크로드의 제1 부분을 실행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서, 상기 적용 비율은 제1 적용 비율이고, 상기 전력 제어 회로부는:상기 프로세서의 지연시간을 지연시간 임계값과 비교하는 것 또는 상기 프로세서의 처리량을 처리량 임계값과비교하는 것 중 적어도 하나를 수행하고;상기 지연시간 임계값 또는 상기 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 상기 제1 적용 비율을 제2 적용 비율로 조정하며; 상기 프로세서의 처리량을 증가시키는 것 또는 상기 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 상기 제2 적용 비율에 기초하여 상기 언코어 로직을 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항 또는 제7항에 있어서, 상기 명령어는 제1 명령어이고,상기 전력 제어 회로부는:상기 제1 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제1 전력 소비 값을 결정하고;제2 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제2 전력 소비 값을 결정하며 - 상기제2 값은 상기 제1 값보다 큼 -;상기 실행 회로부는 상기 제2 값이 임계값을 충족시키는 것에 응답하여 상기 프로세서의 처리량을 개선시키기위해 상기 제2 명령어를 사용하여 상기 워크로드의 실행을 개시하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 제1 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터확장 512-비트 명령어이고, 상기 제2 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 상기 5세대 명령어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서, 자산 에이전트 회로부를 더 포함하며, 상기 자산 에이전트 회로부는:제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하는 복수의 특징들을 제공하고 - 상기 제1 특징은 상기 프로세서의 하나 이상의 코어의 제1 작동 주파수와 연관되고, 상기 제2 특징은 상기 언코어 로직의 제2 작동 주파공개특허 10-2023-0015895-4-수와 연관됨 -;상기 제1 작동 주파수에서 작동하도록 상기 하나 이상의 코어를 초기화하며;상기 제2 작동 주파수에서 작동하도록 상기 언코어 로직을 초기화하고;제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에서 작동하도록 상기 하나 이상의 코어들 중 하나를 활성화시키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 상기 언코어 로직의 일부를 활성화시키는 것중 적어도 하나를 수행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1항에 있어서, 상기 워크로드는 제1 워크로드이고, 상기 적용 비율은 제1 전력 소비 값과 제2 전력 소비 값의비율에 기초하고, 상기 제1 값은 상기 제1 워크로드에 대응하며, 상기 제2 값은 제2 워크로드에 대응하는,장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 상기 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 상기 제2 워크로드는 전력 바이러스 워크로드인, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항 또는 제12항에 있어서, 상기 프로세서는 코어 서버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구현하고, 상기 중앙 유닛 또는 상기 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "워크로드의 실행을 구성하기 위한 장치로서,상기 워크로드를 실행하기 위해 프로세서의 하나 이상의 코어에 의해 실행될 명령어에 기초하여 적용 비율을 결정하기 위한 수단;상기 워크로드의 실행 이전에, (i) 상기 적용 비율에 기초하여 상기 프로세서의 하나 이상의 코어 또는 (ii) 상기 적용 비율에 기초하여 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하기 위한 수단; 및상기 하나 이상의 코어 또는 상기 언코어 로직 중 적어도 하나를 사용하여 상기 워크로드의 실행을 개시하기 위한 수단을 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서, 상기 구성하기 위한 수단은:상기 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하고 - 상기 제1 작동 주파수는 상기 적용 비율과연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -;상기 언코어 로직의 제2 작동 주파수를 식별하며,상기 제2 작동 주파수는 상기 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함되고, 상기 구성하기 위한 수단은 (i) 상기 제1 작동 주파수 또는 상기 제2 작동 주파수 중 적어도 하나에 기초하여 상기 프로세서의 하나 이상의 코어, 또는 (ii) 상기 제1 작동 주파수 또는 상기 제2 작동 주파수 중 적어도 하나에 기초하여 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에 있어서, 상기 구성하기 위한 수단은 상기 적용 비율과 연관된 전력 소비가 임계값을 충족시킨다는 결정에 응답하여 상기 프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "공개특허 10-2023-0015895-5-제15항 또는 제16항에 있어서, 상기 구성하기 위한 수단은:상기 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 상기 하나 이상의 코어의 제1 작동 주파수를감소시키고;상기 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 상기 언코어 로직의 적어도 일부의제2 작동 주파수를 증가시키며,상기 제2 전력 소비의 증가는 상기 프로세서의 처리량을 증가시키고, 상기 구성하기 위한 수단은 상기 제1 작동주파수의 감소 또는 상기 제2 작동 주파수의 증가 중 적어도 하나에 기초하여 상기 프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제14항에 있어서, 상기 구성하기 위한 수단은: 상기 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 것; 또는 상기 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 - 상기 제2 작동 주파수 또는 상기 제4작동 주파수 중 적어도 하나는 상기 적용 비율과 연관됨 -중 적어도 하나를 위한 것이고, 상기 구성하기 위한 수단은 상기 제1 작동 주파수를 상기 제2 작동 주파수로 조정하는 것 또는 상기 제3 작동 주파수를 상기 제4 작동 주파수로 조정하는 것 중 적어도 하나에 기초하여 상기프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제14항에 있어서, 상기 명령어는 제1 명령어이고, 상기 워크로드는 제1 워크로드이며, 상기 적용 비율은 제1 적용 비율이고, 상기 하나 이상의 코어는 하나 이상의 제1 코어이며, 상기 언코어 로직은 제1 언코어 로직이고,상기 결정하기 위한 수단은 제2 워크로드를 실행하기 위해 상기 프로세서의 하나 이상의 제2 코어에 의해 실행될 제2 명령어에 기초하여 제2 적용 비율을 결정하고;상기 구성하기 위한 수단은, 상기 제2의 것의 실행 이전에, (i) 상기 제2 적용 비율에 기초하여 상기 프로세서의 하나 이상의 제2 코어 또는 (ii) 상기 제2 적용 비율에 기초하여 상기 프로세서의 제2 언코어 로직 중 적어도 하나를 구성하며;상기 실행하기 위한 수단은 상기 하나 이상의 제2 코어 또는 상기 제2 언코어 로직 중 적어도 하나를 사용하여상기 제2 워크로드의 실행을 개시하고, 상기 하나 이상의 제2 코어가 상기 제2 워크로드의 제2 부분을 실행하는동안 상기 하나 이상의 제1 코어는 상기 제1 워크로드의 제1 부분을 실행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제14항에 있어서, 상기 적용 비율은 제1 적용 비율이고,상기 결정하기 위한 수단은 상기 프로세서의 지연시간을 지연시간 임계값과 비교하는 것 또는 상기 프로세서의처리량을 처리량 임계값과 비교하는 것 중 적어도 하나를 수행하고,상기 구성하기 위한 수단은:상기 지연시간 임계값 또는 상기 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 상기 제1 적용 비율을 제2 적용 비율로 조정하며;상기 프로세서의 처리량을 증가시키는 것 또는 상기 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 상기 제2 적용 비율에 기초하여 상기 언코어 로직을 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제14항 또는 제20항에 있어서, 상기 명령어는 제1 명령어이고,상기 결정하기 위한 수단은:상기 제1 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제1 전력 소비 값을 결정하고;공개특허 10-2023-0015895-6-제2 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제2 전력 소비 값을 결정하며 - 상기제2 값은 상기 제1 값보다 큼 -;상기 실행하기 위한 수단은 상기 제2 값이 임계값을 충족시키는 것에 응답하여 상기 프로세서의 처리량을 개선시키기 위해 상기 제2 명령어를 사용하여 상기 워크로드의 실행을 개시하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제21항에 있어서, 상기 제1 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터확장 512-비트 명령어이고, 상기 제2 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 상기 5세대 명령어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제14항에 있어서, 제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하는 복수의 특징들을 활성화시키기 위한수단을 더 포함하고, 상기 제1 특징은 상기 프로세서의 하나 이상의 코어의 제1 작동 주파수와 연관되고, 상기제2 특징은 상기 언코어 로직의 제2 작동 주파수와 연관되며, 상기 활성화시키기 위한 수단은:상기 제1 작동 주파수에서 작동하도록 상기 하나 이상의 코어를 초기화하며;상기 제2 작동 주파수에서 작동하도록 상기 언코어 로직을 초기화하고;제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에서 작동하도록 상기 하나 이상의 코어들 중 하나를 활성화시키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 상기 언코어 로직의 일부를 활성화시키는 것중 적어도 하나를 수행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제14항에 있어서, 상기 워크로드는 제1 워크로드이고, 상기 적용 비율은 제1 전력 소비 값과 제2 전력 소비 값의 비율에 기초하고, 상기 제1 값은 상기 제1 워크로드에 대응하며, 상기 제2 값은 제2 워크로드에 대응하는,장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_25", "content": "제24항에 있어서, 상기 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 상기 제2 워크로드는 전력 바이러스 워크로드인, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_26", "content": "제14항 또는 제25항에 있어서, 상기 프로세서는 코어 서버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구현하고, 상기 중앙 유닛 또는 상기 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_27", "content": "제1 명령어들을 포함하는 적어도 하나의 컴퓨터 판독 가능 매체로서, 상기 제1 명령어들은, 실행될 때, 적어도하나의 프로세서로 하여금 적어도:워크로드를 실행하기 위해 상기 적어도 하나의 프로세서의 하나 이상의 코어에 의해 실행될 제2 명령어에 기초하여 적용 비율을 결정하게 하고;상기 워크로드의 실행 이전에, (i) 상기 적용 비율에 기초하여 상기 적어도 하나의 프로세서의 하나 이상의 코어 또는 (ii) 상기 적용 비율에 기초하여 상기 적어도 하나의 프로세서의 언코어 로직 중 적어도 하나를 구성하게 하며;상기 하나 이상의 코어 또는 상기 언코어 로직 중 적어도 하나를 사용하여 상기 워크로드를 실행하게 하는, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_28", "content": "제27항에 있어서, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의 프로세서로 하여금:공개특허 10-2023-0015895-7-상기 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하게 하고 - 상기 제1 작동 주파수는 상기 적용비율과 연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -;상기 언코어 로직의 제2 작동 주파수를 식별하게 하는 - 상기 제2 작동 주파수는 상기 적용 비율과 연관된 하나이상의 작동 주파수의 제2 세트에 포함됨 -, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_29", "content": "제27항에 있어서, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의 프로세서로 하여금: 상기 적용 비율과연관된 전력 소비가 임계값을 충족시킨다는 결정에 응답하여 상기 적어도 하나의 프로세서의 하나 이상의 코어또는 상기 적어도 하나의 프로세서의 언코어 로직 중 적어도 하나를 구성하게 하는, 적어도 하나의 컴퓨터 판독가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_30", "content": "제27항에 있어서, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의 프로세서로 하여금:상기 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 상기 하나 이상의 코어의 제1 작동 주파수를감소시키게 하고;상기 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 상기 언코어 로직의 적어도 일부의제2 작동 주파수를 증가시키게 하는 - 상기 제2 전력 소비의 증가는 상기 적어도 하나의 프로세서의 처리량을증가시킴 -, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_31", "content": "제27항 또는 제29항에 있어서, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의 프로세서로 하여금:상기 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 것; 또는상기 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 - 상기 제2 작동 주파수 또는 상기 제4작동 주파수 중 적어도 하나는 상기 적용 비율과 연관됨 -중 적어도 하나를 수행하게 하는, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_32", "content": "제27항에 있어서, 상기 워크로드는 제1 워크로드이고, 상기 적용 비율은 제1 적용 비율이며, 상기 하나 이상의코어는 하나 이상의 제1 코어이고, 상기 언코어 로직은 제1 언코어 로직이며, 상기 제1 명령어들은, 실행될 때,상기 적어도 하나의 프로세서로 하여금:제2 워크로드를 실행하기 위해 상기 적어도 하나의 프로세서의 하나 이상의 제2 코어에 의해 실행될 제3 명령어에 기초하여 제2 적용 비율을 결정하게 하고;상기 제2의 것의 실행 이전에, (i) 상기 제2 적용 비율에 기초하여 상기 적어도 하나의 프로세서의 하나 이상의제2 코어 또는 (ii) 상기 제2 적용 비율에 기초하여 상기 적어도 하나의 프로세서의 제2 언코어 로직 중 적어도하나를 구성하게 하며;상기 하나 이상의 제2 코어 또는 상기 제2 언코어 로직 중 적어도 하나를 사용하여 상기 제2 워크로드를 실행하게 하는 - 상기 하나 이상의 제2 코어가 상기 제2 워크로드의 제2 부분을 실행하는 동안 상기 하나 이상의 제1코어는 상기 제1 워크로드의 제1 부분을 실행함 -, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_33", "content": "제27항에 있어서, 상기 적용 비율은 제1 적용 비율이고, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의프로세서로 하여금:상기 적어도 하나의 프로세서의 지연시간을 지연시간 임계값과 비교하는 것 또는 상기 적어도 하나의 프로세서의 처리량을 처리량 임계값과 비교하는 것 중 적어도 하나를 수행하게 하고;상기 지연시간 임계값 또는 상기 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 상기 제1 적용 비공개특허 10-2023-0015895-8-율을 제2 적용 비율로 조정하게 하며;상기 적어도 하나의 프로세서의 처리량을 증가시키는 것 또는 상기 적어도 하나의 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 상기 제2 적용 비율에 기초하여 상기 언코어 로직을 구성하게 하는, 적어도하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_34", "content": "제27항 또는 제33항에 있어서, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의 프로세서로 하여금:상기 제2 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제1 전력 소비 값을 결정하게 하고;제3 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제2 전력 소비 값을 결정하게 하며 -상기 제2 값은 상기 제1 값보다 큼 -;상기 제2 값이 임계값을 충족시키는 것에 응답하여, 상기 적어도 하나의 프로세서의 처리량을 개선시키기 위해상기 제3 명령어를 사용하여 상기 워크로드를 실행하게 하는, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_35", "content": "제34항에 있어서, 상기 제2 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터확장 512-비트 명령어이고, 상기 제3 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 상기 5세대 명령어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는, 적어도 하나의 컴퓨터 판독 가능매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_36", "content": "제27항에 있어서, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의 프로세서로 하여금:상기 적어도 하나의 프로세서와 연관된 복수의 특징들 중 하나 이상을 식별하게 하고 - 상기 복수의 특징들은제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하고, 상기 제1 특징은 상기 적어도 하나의 프로세서의 하나 이상의 코어의 제1 작동 주파수와 연관되고, 상기 제2 특징은 상기 언코어 로직의 제2 작동 주파수와 연관됨-;상기 제1 작동 주파수에서 작동하도록 상기 하나 이상의 코어를 초기화하게 하며;상기 제2 작동 주파수에서 작동하도록 상기 언코어 로직을 초기화하게 하고;제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에서 작동하도록 상기 하나 이상의 코어들 중 하나를 활성화시키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 상기 언코어 로직의 일부를 활성화시키는 것중 적어도 하나를 수행하게 하는, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_37", "content": "제27항에 있어서, 상기 워크로드는 제1 워크로드이고, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의 프로세서로 하여금 제1 전력 소비 값과 제2 전력 소비 값의 비율에 기초하여 상기 적용 비율을 결정하게 하는 -상기 제1 값은 상기 제1 워크로드에 대응하고, 상기 제2 값은 제2 워크로드에 대응함 -, 적어도 하나의 컴퓨터판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_38", "content": "제37항에 있어서, 상기 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 상기 제2 워크로드는 전력 바이러스 워크로드인, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_39", "content": "제27항 또는 제38항에 있어서, 상기 제1 명령어들은, 실행될 때, 상기 적어도 하나의 프로세서로 하여금 코어서버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구현하게 하는 - 상기 중앙 유닛 또는 상기 분산 유닛 중적어도 하나는 가상 무선 액세스 네트워크를 구현함 -, 적어도 하나의 컴퓨터 판독 가능 매체.공개특허 10-2023-0015895-9-청구항 40 워크로드의 실행을 구성하기 위한 장치로서,적어도 하나의 메모리; 및적어도 하나의 프로세서를 포함하며, 상기 적어도 하나의 프로세서는 적어도 워크로드를 실행하기 위해 상기 적어도 하나의 프로세서의 하나 이상의 코어에 의해 실행될 제2 명령어에 기초하여 적용 비율을 결정하고;상기 워크로드의 실행 이전에, (i) 상기 적용 비율에 기초하여 상기 적어도 하나의 프로세서의 하나 이상의 코어 또는 (ii) 상기 적용 비율에 기초하여 상기 적어도 하나의 프로세서의 언코어 로직 중 적어도 하나를 구성하며;상기 하나 이상의 코어 또는 상기 언코어 로직 중 적어도 하나를 사용하여 상기 워크로드를 실행하기 위해제1 명령어들을 실행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_41", "content": "제40항에 있어서, 상기 적어도 하나의 프로세서는:상기 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하고 - 상기 제1 작동 주파수는 상기 적용 비율과연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -;상기 언코어 로직의 제2 작동 주파수를 식별하는 - 상기 제2 작동 주파수는 상기 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함됨 -, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_42", "content": "제40항에 있어서, 상기 적어도 하나의 프로세서는 상기 적용 비율과 연관된 전력 소비가 임계값을 충족시킨다는결정에 응답하여 상기 적어도 하나의 프로세서의 하나 이상의 코어 또는 상기 적어도 하나의 프로세서의 언코어로직 중 상기 적어도 하나를 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_43", "content": "제40항에 있어서, 상기 적어도 하나의 프로세서는:상기 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 상기 하나 이상의 코어의 제1 작동 주파수를감소시키고;상기 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 상기 언코어 로직의 적어도 일부의제2 작동 주파수를 증가시키는 - 상기 제2 전력 소비의 증가는 상기 적어도 하나의 프로세서의 처리량을 증가시킴 -, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_44", "content": "제40항에 있어서, 상기 적어도 하나의 프로세서는: 상기 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 것; 또는 상기 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 - 상기 제2 작동 주파수 또는 상기 제4작동 주파수 중 적어도 하나는 상기 적용 비율과 연관됨 -중 적어도 하나를 위한 것인, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_45", "content": "제40항 또는 제42항에 있어서, 상기 워크로드는 제1 워크로드이고, 상기 적용 비율은 제1 적용 비율이며, 상기하나 이상의 코어는 하나 이상의 제1 코어이고, 상기 언코어 로직은 제1 언코어 로직이며, 상기 적어도 하나의공개특허 10-2023-0015895-10-프로세서는:제2 워크로드를 실행하기 위해 상기 적어도 하나의 프로세서의 하나 이상의 제2 코어에 의해 실행될 제3 명령어에 기초하여 제2 적용 비율을 결정하고;상기 제2의 것의 실행 이전에, (i) 상기 제2 적용 비율에 기초하여 상기 적어도 하나의 프로세서의 하나 이상의제2 코어 또는 (ii) 상기 제2 적용 비율에 기초하여 상기 적어도 하나의 프로세서의 제2 언코어 로직 중 적어도하나를 구성하며;상기 하나 이상의 제2 코어 또는 상기 제2 언코어 로직 중 적어도 하나를 사용하여 상기 제2 워크로드를 실행하는 - 상기 하나 이상의 제2 코어가 상기 제2 워크로드의 제2 부분을 실행하는 동안 상기 하나 이상의 제1 코어는 상기 제1 워크로드의 제1 부분을 실행함 -, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_46", "content": "제40항에 있어서, 상기 적용 비율은 제1 적용 비율이고, 상기 적어도 하나의 프로세서는:상기 적어도 하나의 프로세서의 지연시간을 지연시간 임계값과 비교하는 것 또는 상기 적어도 하나의 프로세서의 처리량을 처리량 임계값과 비교하는 것 중 적어도 하나를 수행하고;상기 지연시간 임계값 또는 상기 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 상기 제1 적용 비율을 제2 적용 비율로 조정하며; 상기 적어도 하나의 프로세서의 처리량을 증가시키는 것 또는 상기 적어도 하나의 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 상기 제2 적용 비율에 기초하여 상기 언코어 로직을 구성하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_47", "content": "제40항 또는 제46항에 있어서, 상기 적어도 하나의 프로세서는:상기 제2 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제1 전력 소비 값을 결정하고;제3 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제2 전력 소비 값을 결정하며 - 상기제2 값은 상기 제1 값보다 큼 -; 상기 제2 값이 임계값을 충족시키는 것에 응답하여, 상기 적어도 하나의 프로세서의 처리량을 개선시키기 위해상기 제3 명령어를 사용하여 상기 워크로드를 실행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_48", "content": "제47항에 있어서, 상기 제2 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터확장 512-비트 명령어이고, 상기 제3 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 상기 5세대 명령어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_49", "content": "제40항에 있어서, 상기 적어도 하나의 프로세서는:상기 적어도 하나의 프로세서와 연관된 복수의 특징들 중 하나 이상을 식별하고 - 상기 복수의 특징들은 제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하고, 상기 제1 특징은 상기 적어도 하나의 프로세서의 하나 이상의 코어의 제1 작동 주파수와 연관되고, 상기 제2 특징은 상기 언코어 로직의 제2 작동 주파수와 연관됨 -;상기 제1 작동 주파수에서 작동하도록 상기 하나 이상의 코어를 초기화하며; 상기 제2 작동 주파수에서 작동하도록 상기 언코어 로직을 초기화하고; 제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에서 작동하도록 상기 하나 이상의 코어들 중 하나를 활성화시키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 상기 언코어 로직의 일부를 활성화시키는 것중 적어도 하나를 수행하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_50", "content": "제40항에 있어서, 상기 워크로드는 제1 워크로드이고, 상기 적어도 하나의 프로세서는 제1 전력 소비 값과 제2공개특허 10-2023-0015895-11-전력 소비 값의 비율에 기초하여 상기 적용 비율을 결정하고, 상기 제1 값은 상기 제1 워크로드에 대응하고, 상기 제2 값은 제2 워크로드에 대응하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_51", "content": "제50항에 있어서, 상기 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 상기 제2 워크로드는 전력 바이러스 워크로드인, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_52", "content": "제40항 또는 제51항에 있어서, 상기 적어도 하나의 프로세서는 코어 서버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구현하고, 상기 중앙 유닛 또는 상기 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_53", "content": "워크로드의 실행을 구성하기 위한 방법으로서,워크로드를 실행하기 위해 프로세서의 하나 이상의 코어에 의해 실행될 명령어에 기초하여 적용 비율을 결정하는 단계;상기 워크로드의 실행 이전에, (i) 상기 적용 비율에 기초하여 상기 프로세서의 하나 이상의 코어 또는 (ii) 상기 적용 비율에 기초하여 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는 단계; 및상기 하나 이상의 코어 또는 상기 언코어 로직 중 적어도 하나를 사용하여 상기 워크로드를 실행하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_54", "content": "제53항에 있어서, (i) 상기 프로세서의 하나 이상의 코어 또는 (ii) 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는 단계는:상기 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하는 단계 - 상기 제1 작동 주파수는 상기 적용비율과 연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -; 및상기 언코어 로직의 제2 작동 주파수를 식별하는 단계 - 상기 제2 작동 주파수는 상기 적용 비율과 연관된 하나이상의 작동 주파수의 제2 세트에 포함됨 -를 포함하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_55", "content": "제53항에 있어서, 상기 프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는 단계는 상기 적용 비율과 연관된 전력 소비가 임계값을 충족시킨다고 결정하는 것에 응답하여 이루어지는,방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_56", "content": "제53항에 있어서, 상기 프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를 구성하는 단계는:상기 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 상기 하나 이상의 코어의 제1 작동 주파수를감소시키는 단계; 및상기 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 상기 언코어 로직의 적어도 일부의제2 작동 주파수를 증가시키는 단계 - 상기 제2 전력 소비의 증가는 상기 프로세서의 처리량을 증가시킴 -를 포함하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_57", "content": "제53항에 있어서, 상기 프로세서의 하나 이상의 코어 또는 상기 프로세서의 언코어 로직 중 적어도 하나를 구성공개특허 10-2023-0015895-12-하는 단계는: 상기 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 단계; 또는 상기 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 단계 - 상기 제2 작동 주파수 또는 상기 제4 작동 주파수 중 적어도 하나는 상기 적용 비율과 연관됨 -중 적어도 하나를 포함하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_58", "content": "제53항 또는 제55항에 있어서, 상기 명령어는 제1 명령어이고, 상기 워크로드는 제1 워크로드이며, 상기 적용비율은 제1 적용 비율이고, 상기 하나 이상의 코어는 하나 이상의 제1 코어이며, 상기 언코어 로직은 제1 언코어 로직이고,제2 워크로드를 실행하기 위해 상기 프로세서의 하나 이상의 제2 코어에 의해 실행될 제2 명령어에 기초하여 제2 적용 비율을 결정하는 단계;상기 제2의 것의 실행 이전에, (i) 상기 제2 적용 비율에 기초하여 상기 프로세서의 하나 이상의 제2 코어 또는(ii) 상기 제2 적용 비율에 기초하여 상기 프로세서의 제2 언코어 로직 중 적어도 하나를 구성하는 단계; 및상기 하나 이상의 제2 코어 또는 상기 제2 언코어 로직 중 적어도 하나를 사용하여 상기 제2 워크로드를 실행하는 단계 - 상기 하나 이상의 제2 코어가 상기 제2 워크로드의 제2 부분을 실행하는 동안 상기 하나 이상의 제1코어는 상기 제1 워크로드의 제1 부분을 실행함 - 를 더 포함하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_59", "content": "제53항에 있어서, 상기 적용 비율은 제1 적용 비율이고,상기 프로세서의 지연시간을 지연시간 임계값과 비교하는 것 또는 상기 프로세서의 처리량을 처리량 임계값과비교하는 것 중 적어도 하나를 수행하는 단계;상기 지연시간 임계값 또는 상기 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 상기 제1 적용 비율을 제2 적용 비율로 조정하는 단계; 및 상기 프로세서의 처리량을 증가시키는 것 또는 상기 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 상기 제2 적용 비율에 기초하여 상기 언코어 로직을 구성하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_60", "content": "제53항 또는 제59항에 있어서, 상기 명령어는 제1 명령어이고,상기 제1 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제1 전력 소비 값을 결정하는 단계;제2 명령어를 사용하여 상기 워크로드를 실행할 상기 하나 이상의 코어의 제2 전력 소비 값을 결정하는 단계 -상기 제2 값은 상기 제1 값보다 큼 -; 및상기 제2 값이 임계값을 충족시키는 것에 응답하여, 상기 프로세서의 처리량을 개선시키기 위해 상기 제2 명령어를 사용하여 상기 워크로드를 실행하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_61", "content": "제60항에 있어서, 상기 제1 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터확장 512-비트 명령어이고, 상기 제2 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 상기 5세대 명령어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는, 방법.공개특허 10-2023-0015895-13-청구항 62 제53항에 있어서, 상기 프로세서는 제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하는 복수의 특징들을제공하도록 구성 가능한 회로부를 포함하고, 상기 제1 특징은 상기 프로세서의 하나 이상의 코어의 제1 작동 주파수와 연관되고, 상기 제2 특징은 상기 언코어 로직의 제2 작동 주파수와 연관되며, (i) 상기 프로세서의 하나이상의 코어 또는 (ii) 상기 언코어 로직을 구성하는 단계는:상기 제1 작동 주파수에서 작동하도록 상기 하나 이상의 코어를 초기화하는 단계; 상기 제2 작동 주파수에서 작동하도록 상기 언코어 로직을 초기화하는 단계; 및 제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에서 작동하도록 상기 하나 이상의 코어들 중 하나를 활성화시키는 단계, 또는 (ii) 제4 작동 주파수에서 작동하도록 상기 언코어 로직의 일부를 활성화시키는단계 중 적어도 하나를 수행하는 단계를 포함하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_63", "content": "제53항에 있어서, 상기 워크로드는 제1 워크로드이고, 상기 적용 비율은 제1 전력 소비 값과 제2 전력 소비 값의 비율에 기초하고, 상기 제1 값은 상기 제1 워크로드에 대응하며, 상기 제2 값은 제2 워크로드에 대응하는,방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_64", "content": "제63항에 있어서, 상기 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 상기 제2 워크로드는 전력 바이러스 워크로드인, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_65", "content": "제53항 또는 제64항에 있어서, 상기 프로세서는 코어 서버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구현하고, 상기 중앙 유닛 또는 상기 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현하는, 방법."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_66", "content": "적어도 하나의 컴퓨터 판독 가능 매체로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 명령어들을 포함하는, 적어도 하나의 컴퓨터 판독 가능 매체."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_67", "content": "장치로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 프로세서 회로부를 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_68", "content": "분산 유닛으로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 프로세서 회로부를 포함하는, 분산 유닛."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_69", "content": "중앙 유닛으로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 프로세서 회로부를 포함하는, 중앙 유닛."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_70", "content": "에지 서버로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 프로세서 회로부를 포함하는, 에지서버."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_71", "content": "코어 서버로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 프로세서 회로부를 포함하는, 코어서버.공개특허 10-2023-0015895-14-청구항 72 장치로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 그래픽 프로세싱 유닛을 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_73", "content": "장치로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 비전 프로세싱 유닛을 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_74", "content": "장치로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 신경 네트워크 프로세서를 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_75", "content": "장치로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 인공 지능 프로세서를 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_76", "content": "장치로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 머신 러닝 프로세서를 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_77", "content": "장치로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 벡터 프로세서를 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_78", "content": "장치로서, 제53항 내지 제65항 중 어느 한 항의 방법을 수행하기 위한 전자 제어 유닛을 포함하는, 장치."}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "하드웨어를 워크로드 최적화하기 위한 시스템들, 장치들, 및 방법들이 본 명세서에서 개시된다. 예시적인 장치 는 워크로드를 실행하기 위해 프로세서의 하나 이상의 코어에 의해 실행될 명령어에 기초하여 적용 비율을 결정 하고, 워크로드의 실행 이전에, (i) 적용 비율에 기초하여 프로세서의 하나 이상의 코어 또는 (ii) 적용 비율에 기초하여 프로세서의 언코어 로직 중 적어도 하나를 구성하기 위한 전력 제어 회로부, 및 하나 이상의 코어 또는 언코어 로직 중 적어도 하나를 사용하여 워크로드를 실행하기 위한 실행 회로부를 포함한다."}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "관련 출원 이 특허는 2020년 11월 13일에 출원된 미국 가특허 출원 제63/113,733호, 2020년 10월 2일에 출원된 미국 가특 허 출원 제63/087,060호, 2020년 11월 13일에 출원된 미국 가특허 출원 제63/113,734호, 및 2020년 5월 29일에 출원된 미국 가특허 출원 제63/032,045호의 이익을 주장하는 출원에서 비롯된다. 미국 가특허 출원 제 63/113,733호, 미국 가특허 출원 제63/087,060호, 미국 가특허 출원 제63/113,734호, 및 미국 가특허 출원 제 63/032,045호는 이로써 참조에 의해 그 전체가 본 명세서에 포함된다. 이로써 미국 가특허 출원 제63/113,733 호, 미국 가특허 출원 제63/087,060호, 미국 가특허 출원 제63/113,734호, 및 미국 가특허 출원 제63/032,045 호에 대한 우선권이 주장된다. 개시내용의 분야 본 개시내용은 일반적으로 프로세서들에 관한 것으로, 보다 상세하게는 하드웨어를 워크로드 최적화하기 위한 시스템들, 장치들, 및 방법들에 관한 것이다."}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "MEC(multi-access edge computing)는, 셀룰러 네트워크와 같은, 네트워크의 에지에서 클라우드 컴퓨팅 능력들 및 인프라스트럭처 기술 서비스 환경을 가능하게 하는 네트워크 아키텍처 개념이다. MEC를 사용하여, 네트워크 운영을 개선시키기 위해 데이터 센터 클라우드 서비스들 및 애플리케이션들이 최종 사용자 또는 컴퓨팅 디바이 스에 보다 가까이에서 프로세싱될 수 있다. 그러한 프로세싱은 최종 사용자 또는 컴퓨팅 디바이스에 보다 가까 이에서 프로세싱 자원들의 불균형적인 양의 대역폭을 소비할 수 있으며 이에 의해 네트워크의 지연시간, 혼잡, 및 전력 소비를 증가시킬 수 있다."}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "도면들은 일정한 축척으로 되어 있지 않다. 일반적으로, 동일한 또는 유사한 부분들을 지칭하기 위해 도면(들) 및 첨부된 서면 설명 전반에 걸쳐 동일한 참조 번호들이 사용될 것이다. 본 명세서에서 사용되는 바와 같이, 연결 참조들(예를 들면, 부착된, 결합된, 연결된, 및 조인(join)됨)은, 달리 표시되지 않는 한, 연결 참조에 의 해 참조되는 요소들 사이의 중간 부재들 및/또는 해당 요소들 사이의 상대 이동을 포함할 수 있다. 그와 같이, 연결 참조들은 2개의 요소가 직접 연결되고/되거나 서로 고정된 관계에 있다고 반드시 추론하지는 않는다. 달리 구체적으로 언급되지 않는 한, \"제1\", \"제2\", \"제3\" 등과 같은 기술어들은 결코 우선순위, 물리적 순서, 리스트에서의 배열, 및/또는 순서의 임의의 의미를 대치하지 않거나 달리 나타내지 않고 본 명세서에서 사용되 지만, 개시된 예들의 이해의 편의를 위해 요소들을 구별하기 위한 라벨들 및/또는 임의적인 이름들로서만 사용 된다. 일부 예들에서, \"제1\"이라는 기술어는 상세한 설명에서 요소를 지칭하는 데 사용될 수 있는 반면, 동일 한 요소가 청구항에서는 \"제2\" 또는 \"제3\"과 같은 상이한 기술어를 사용하여 지칭될 수 있다. 그러한 경우에, 그러한 기술어들이, 예를 들어, 동일한 이름을 다른 방식으로 공유할 수 있는 해당 요소들을 확실히 식별하기 위해서만 사용된다는 것이 이해되어야 한다. MEC(multi-access edge computing)는, 셀룰러 네트워크와 같은, 네트워크의 에지에서 클라우드 컴퓨팅 능력들 및 인프라스트럭처 기술 서비스 환경을 가능하게 하는 네트워크 아키텍처 개념이다. MEC를 사용하여, 네트워크 운영을 개선시키기 위해 데이터 센터 클라우드 서비스들 및 애플리케이션들이 최종 사용자 또는 컴퓨팅 디바이 스에 보다 가까이에서 프로세싱될 수 있다. MEC가 에지 컴퓨팅의 진화의 중요한 부분이지만, 클라우드 및 통신 서비스 제공업체들은 5세대 셀룰러 네트워크 기술(즉, 5G)에 대비하여 클라우드 및 통신 서비스 제공업체들의 네트워크들을 변환해야 할 필요성을 해결하고 있다. 5G를 지원하는 차세대 네트워크들의 요구들을 충족시키기 위해, 클라우드 서비스 제공업체들은 고정 기 능 독점 하드웨어를 멀티코어 에지 및 데이터 센터 서버들의 사용을 최대화하는 능력에 의존하는 보다 민첩하고 유연한 접근 방식들로 교체할 수 있다. 차세대 서버 에지 및 데이터 센터 네트워킹은 에지까지를 포함하여 데 이터 센터 전체에 걸쳐 네트워킹 기능들을 가상화하고 배포하는 능력을 포함할 수 있다. 높은 패킷 처리량은 더 나은 엔드 투 엔드(end-to-end) 지연시간, 서비스 품질(QoS) 및 트래픽 관리에 대한 필요성을 증폭시킨다. 그러한 욕구들은 차례로 네트워크에 걸쳐 데이터 평면 파이프라인의 다양한 스테이지들 간의 효율적인 데이터 이동 및 데이터 공유에 대한 요구사항들을 주도한다. 일부 이전 접근 방식들에서, 프로세서 보장 작동 주파수(예를 들면, 결정적 주파수)는 직면할 것으로 예상되는 워크로드들의 유형에 관계없이 일관되게 설정되었다. 예를 들어, Intel® x86 아키텍처에서의 중앙 프로세싱 유닛(CPU) 코어들은 주파수 스케일링 지연시간들을 피하기 위해 (예를 들면, BIOS에 의한) 부팅 시에 아키텍처 에 의해 지원되는 것보다 낮은 프로세서 성능 상태(P-상태)(예를 들면, P0n 상태로부터 P1n 상태로 낮아짐) 주 파수로 설정될 수 있다. 따라서, x86 CPU들은 결정적 P-상태 주파수들로 작동할 수 있으며, 그 결과, 모든 CPU 코어들은 지연시간들을 완화시키기 위해 더 낮은 기본 주파수들을 활용한다. 그렇지만, CPU 코어의 전력 소비 는 동일한 주파수에서 작동할 때 워크로드에 따라 달라진다. 따라서, 워크로드가 코어 자체 내에서 전력 소비 가 많지 않거나, 워크로드가 다른 유형들의 워크로드에 비해 전력 소비가 더 적은 경우, CPU 코어의 결정적 주 파수를 증가시킬 기회가 있다. 고강도 계산들(예를 들면, 그래픽 렌더링 워크로드들)에 의해 구현될 수 있는 컴퓨트 바운드(compute-bound) 워 크로드들은 메모리 이용률 및/또는 입출력(I/O) 이용률보다는 프로세서 코어에서의 컴퓨트 이용률에 불균형적으 로 의존할 수 있다. 통신 워크로드들, 네트워크 워크로드들 등과 같은 I/O 바운드 워크로드들은 컴퓨트, 메모 리, 및/또는 I/O의 조합을 사용한다. 그러한 I/O 바운드 워크로드들은 컴퓨트 바운드 워크로드들에서 관찰되는 것처럼 프로세서 코어에서의 순수한 컴퓨트 이용률에 의존하지 않는다. 예를 들어, 통신 워크로드, 네트워크 워크로드 등은 컴퓨팅 네트워크(예를 들면, 지상 또는 비지상 통신 네트워크, 엔터프라이즈 네트워크, 인터넷 기반 네트워크 등)와 연관된 데이터의 프로세싱을 실시하기 위해 하나 이상의 프로세서에 의해 실행되는 하나 이상의 컴퓨팅 작업들을 지칭할 수 있다. 따라서, 워크로드의 유형에 기초하여 프로세서 코어 중 하나 또는 프 로세서 언코어 중 적어도 하나의 주파수들을 조정하는 것이 프로세서 코어의 작동 또는 설계 파라미터로서 사용 될 수 있다. 그러한 조정(들)은 프로세서가 프로세서 코어의 스로틀링으로 인한 주파수 스케일링 지연시간들을 여전히 피하면서 프로세싱 주파수 및 워크로드 처리량을 증가시키는 것을 가능하게 할 수 있다. 프로세서 아키텍처 내에서의 전력의 사용은 다수의 구역들로 확장될 수 있으며, 따라서 프로세서의 다수의 구역 들이 또한 적용 비율에 기초한 최적화를 위해 고려될 수 있다. 일부 개시된 예들에서, 적용 비율은 최대 활동 과 관련하여 워크로드가 생성하는 활동의 척도를 제공한다. 적용 비율은 프로세서의 하나 또는 다수의 코어 및다른 컴포넌트들이 떠맡는 프로세싱 속도 및 전력에 직접적인 영향을 미칠 수 있다. 적용 비율의 감소는 범용 컴퓨팅 워크로드들보다 전력 소비가 적은 네트워크 워크로드들에 대해 보장된 작동 주파수의 증가(따라서 클록 속도 및 성능의 증가)를 결과할 수 있다. 일부 그러한 개시된 예들에서, 다른 유형들의 워크로드들의 전력 거 동은 적용 비율 값들을 사용하여 CPU들의 사양 및 최적화를 위해 계산, 평가, 및 구현될 수 있다. 코어(예를 들면, 프로세서 코어), 상호연결부/메시, I/O(예를 들면, UPI(Ultra Path Interconnect), PCIe(Peripheral Component Interconnect Express), 메모리 등), 전압 조정기(예를 들면, 완전 통합 전압 조정 기), 및 섀시 모두는 전력을 소비하고, 이러한 프로세서 구역들 각각에서, 본 명세서에서 개시되는 바와 같은 이러한 프로세서 구역들과 연관된 적용 비율의 결정 및/또는 적용은 이러한 프로세서 구역들과 연관된 이용률과 상이한데, 그 이유는 적용 비율은 최대 활동과 관련하여 워크로드가 생성하는 활동의 척도인 반면, 이용률은 활 동 대 비활동(예를 들면, 유휴)의 척도를 제공하기 때문이다. 따라서, 적용 비율은 직면하는 이론적인 값이 아 닌 실제 워크로드에 대한 동적 전력의 측정치를 제공하며; 적용 비율에 기초한 프로세서 전력 및 주파수 설정들 의 조정 및 설계는 다수의 실제 이점들을 제공할 수 있다. CPU 코어 내에서 감소된 적용 비율을 위해 성능을 최적화하도록 프로세서를 수정하는 것은 본 명세서에서 논의되는 \"네트워크 워크로드 최적화\"에 포함되도록 의 도된다. 대안적으로, CPU 코어 내에서 증가된 적용 비율을 위해 성능을 최적화하도록 프로세서를 수정하는 것 은 컴퓨트 바운드 워크로드들을 실시하기 위해 다른 최적화들에 포함되도록 의도될 수 있다. 그렇지만, 일부 개시된 예들에서, 최적화 또는 그러한 최적화 내에서의 설정들은 다른 비율들, 설정들, 및 특징들(프로세서의 언코어 구역들을 포함함)로 확장될 수 있다. 일부 개시된 예들에서, 프로세서 코어 및/또는 대응하는 언코어 또는 언코어 로직(예를 들면, 언코어 로직 회로 부)의 작동 주파수의 조정은 적용 비율에 기초할 수 있다. 일부 개시된 예들에서, 적용 비율은 이하의 구성에 기초할 수 있는 전력 바이러스(power virus, PV)와 같은 최고 전력 소비 애플리케이션에 의해 소비되는 전력의 비율을 지칭할 수 있다:"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "위의 예시적인 구성은 정적 전력 소비와 동적 전력 소비로 구성되는 프로세서와 연관된 총 전력에 기초하며, 적 어도 후자는 프로세서 워크로드에 기초하여 변경된다. 예를 들어, 항 Application Activity Cdyn은, 워크로드 (예를 들면, 컴퓨트 바운드 워크로드, I/O 바운드 워크로드 등)를 실행할 때, 프로세서 코어 및/또는, 보다 일 반적으로, 프로세서의 동적 전력 소비를 지칭할 수 있다. 일부 그러한 예들에서, 항 Application Activity Cdyn 은 단일 프로세서 코어, 2개의 프로세서 코어, 또는 프로세서의 프로세서 코어들 전체의 동적 전력 소비를 지칭 할 수 있다. 일부 예들에서, Application Activity Cdyn은 런타임 시에 결정될 수 있다. 추가적으로 또는 대안 적으로, 항 Application Activity Cdyn은 언코어 영역, 언코어 로직(예를 들면, 언코어 로직 회로부) 등의 동적 전력 소비를 지칭할 수 있다. 위의 예시적인 구성에서, 항 Power Virus Cdyn은, 최대 동적 전력을 소비할 때, 프로세서 코어 및/또는, 보다 일 반적으로, 프로세서의 동적 전력 소비를 지칭할 수 있다. 예를 들어, Power Virus Cdyn은 프로세서 코어로 하여 금 최대 동적 전력을 소비하게 하는 애플리케이션(예를 들면, 전력 바이러스 애플리케이션)을 프로세서 코어가 실행할 때 프로세서 코어의 전력을 측정하는 것에 의해 결정될 수 있다. 일부 예들에서, 전력 바이러스 애플리 케이션은 프로세서 코어로 하여금 (예를 들면, 프로세서 코어의 최대 수의 트랜지스터들을 스위칭 온하고/하거 나 다른 방식으로 인에이블시키는 것에 의해) 최대 전력을 소비하게 하는 합성 워크로드를 나타낼 수 있다. 일 부 그러한 예들에서, 최대 동적 전력은 프로세서 코어의 열 설계 전력 또는 포인트(TDP)보다 클 수 있다. 일부 예들에서, Power Virus Cdyn은 미리 결정된 값이다. 추가적으로 또는 대안적으로, 언코어 로직의 메모리, I/O 등이 최대 동적 전력으로 작동할 수 있도록, 항 Power Virus Cdyn은 언코어 로직의 최대 동적 전력 소비를 지칭 할 수 있다. 예를 들어, 0.8의 적용 비율을 갖는 프로세서 코어는 Power Virus Cdyn의 80%에서 작동하는 프로세서 코어에 대 응할 수 있다. 예를 들어, 프로세서 코어가 Power Virus Cdyn의 80%를 초과하지 않는 한, 프로세서 코어는 기본 작동 주파수, 증가된 또는 터보 작동 주파수 등에서 작동될 수 있다. 다른 예로서, 0.75의 적용 비율을 갖는 언코어 로직은 Power Virus Cdyn의 75%에서 작동하는 언코어 로직의 메모리, I/O 등에 대응할 수 있다. 예를 들어, 언코어 로직이 Power Virus Cdyn의 75%를 초과하지 않는 한, 언코어 로직은 기본 작동 주파수, 증가된 또는 터보 작동 주파수 등에서 작동될 수 있다. 일부 개시된 예들에서, 특정 하드웨어 유닛(예를 들면, 코어 또는 그의 부분, 언코어 또는 그의 부분 등)에 대 한 적용 비율은, 이하의 구성에 기초하여, 하나 이상의 방정식 또는 수식에 기초하여 계산되고/되거나 다른 방 식으로 결정될 수 있다:"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "SLOPE가, 하드웨어 유닛(예를 들면, 코어 또는 그의 부분, 언코어 또는 그의 부분 등)의 이용률에 대한 적용 비 율의 민감도에 의해 스케일링되는, 하드웨어 유닛(예를 들면, 코어 또는 그의 부분, 언코어 또는 그의 부분 등)에 대한 사이클당 명령어들에 비례하는 경우, UNIT COUNT는 하드웨어 유닛들의 수(예를 들면, 코어들 또는 그의 부분들의 수, 언코어들 또는 그의 부분들의 수 등)를 나타내고, INTERCEPT는 하드웨어 유닛이 제로 이용률 (예를 들면, 트래픽 없음)에 있을 때의 하드웨어 유닛(예를 들면, 코어 또는 그의 부분, 언코어 또는 그의 부분 등)의 적용 비율을 나타낸다. 동일한 방정식 또는 수식 정의가 또한, 마지막 레벨 캐시(LLC)와 같은, 다른 하 드웨어 유닛들에 적용된다. 일부 개시된 예들에서, 프로세서의 코어는 프로세서의 적용 비율에 기초하여 상이한 작동 주파수들에서 작동하 도록 구성될 수 있다. 예를 들어, 프로세서가 베이스라인 또는 디폴트 적용 비율을 나타낼 수 있는 제1 적용 비율을 위해 구성되는 것에 기초하여, 코어는 2.0 GHz의 P1n 작동 주파수와 같은 제1 작동 주파수에서 작동할 수 있다. 일부 예들에서, 코어는 아래 수학식 1의 예에 기초하여 상이한 작동 주파수에서 작동할 수 있다. 수학식 1"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "위의 수학식 1의 예에서, P1n은 코어의 P1n 작동 주파수를 나타내고, UNIT COUNT는 하드웨어 유닛들의 수(예를 들면, 코어들 또는 그의 부분들의 수)를 나타내며, INTERCEPT는 하드웨어 유닛이 제로 이용률(예를 들면, 트래 픽 없음)에 있을 때의 하드웨어 유닛(예를 들면, 코어 또는 그의 부분)의 적용 비율을 나타낸다. 그에 따라, 코어는 아래에서 수학식 2 및/또는 수학식 3에 설명되는 바와 같이 적용 비율에 기초하여 상이한 작동 주파수로 구성될 수 있다. 수학식 2"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "수학식 3"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "일부 개시된 예들에서, 위의 수학식 2는 코어, 및/또는, 보다 일반적으로, 프로세서가 제2 적용 비율에 기초하 여 구성되는 것에 대응할 수 있다. 일부 예들에서, 위의 수학식 3은 코어, 및/또는, 보다 일반적으로, 프로세 서가 제3 적용 비율에 기초하여 구성되는 것에 대응할 수 있다. 유리하게도, 코어의 작동 주파수는 적용 비율 에 기초하여 조정될 수 있다. 일부 개시된 예들에서, 언코어 로직은 아래 수학식 4의 예에 기초하여 상이한 작동 주파수에서 작동할 수 있다: 수학식 4"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "위의 수학식 4의 예에서, P1n은 언코어 로직의 P1n 작동 주파수를 나타내고, UNIT COUNT는 하드웨어 유닛들의 수(예를 들면, 언코어 로직의 인스턴스들 또는 그의 부분들의 수)를 나타내며, INTERCEPT는 하드웨어 유닛이 제 로 이용률(예를 들면, 트래픽 없음)에 있을 때의 하드웨어 유닛(예를 들면, 언코어 또는 그의 부분 등)의 적용 비율을 나타낸다. 그에 따라, 언코어 로직은 아래에서 수학식 5 및/또는 수학식 6에 설명되는 바와 같이 적용 비율에 기초하여 상이한 작동 주파수로 구성될 수 있다. 수학식 5"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "수학식 6"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "일부 개시된 예들에서, 위의 수학식 5는 언코어 로직, 및/또는, 보다 일반적으로, 프로세서가 제2 적용 비율에 기초하여 구성되는 것에 대응할 수 있다. 일부 예들에서, 위의 수학식 6은 언코어 로직, 및/또는, 보다 일반적 으로, 프로세서가 제3 적용 비율에 기초하여 구성되는 것에 대응할 수 있다. 유리하게도, 언코어 로직의 작동 주파수는 적용 비율에 기초하여 조정될 수 있다. 일부 개시된 예들에서, 프로세서 코어 및/또는, 보다 일반적으로, 프로세서의 적용 비율은 워크로드에 기초하여 조정될 수 있다. 일부 개시된 예들에서, 컴퓨트 바운드 워크로드를 프로세싱하는 것에 응답하여 하나 이상의 프로세서 코어의 적용 비율이 (예를 들면, 0.7로부터 0.8로, 0.75로부터 0.9로 등) 증가될 수 있다. 예를 들어, 적용 비율을 증가시키는 것에 응답하여, 하나 이상의 프로세서 코어는 더 높은 작동 주파수에서 작동될 수 있으며, 이는 차례로 하나 이상의 프로세서 코어의 동적 전력 소비를 증가시킨다. 일부 그러한 예들에서, 하나 이상의 프로세서 코어가 더 높은 작동 주파수에서 작동할 수 있게 하기 위해 언코어 로직의 대응하는 것 (들)의 작동 주파수가 감소될 수 있다. 대안적으로, 그러한 컴퓨트 바운드 워크로드들의 처리량을 증가시키기 위해 언코어 로직의 대응하는 것(들)의 작동 주파수가 증가될 수 있다. 일부 개시된 예들에서, I/O 바운드 워크로드를 프로세싱하는 것에 응답하여 하나 이상의 프로세서 코어의 적용 비율이 (예를 들면, 0.8로부터 0.75로, 0.95로부터 0.75로 등) 감소될 수 있다. 예를 들어, 적용 비율을 감소 시키는 것에 응답하여, 하나 이상의 프로세서 코어는 더 낮은 작동 주파수에서 작동될 수 있으며, 이는 차례로 하나 이상의 프로세서 코어의 동적 전력 소비를 감소시킨다. 일부 그러한 예들에서, 그러한 I/O 바운드 워크로 드들의 처리량을 증가시키고 지연시간을 감소시키기 위해 언코어 로직의 대응하는 것(들)의 작동 주파수가 증가 될 수 있다. 일부 개시된 예들에서, 코어별로 적용 비율을 사용하는 것은 감소된 적용 비율에 대해 증가된 성능(예를 들면, 증가된 주파수)을 완전히 지원할 수 있는 해당 코어들에 대해서만 가속 할당들이 구현될 수 있게 한다. 일부 개시된 예들에서, 코어별 가속 할당들 및 주파수 변경들을 구현하는 것은 동일한 소켓에서 상이한 코어 구성들 을 가능하게 하며; 따라서 하나 또는 다수의 유형의 워크로드에 대해 최적화된 코어들(예를 들면, 1개, 2개 또 는 n개의 코어)의 많은 조합들 및 구성들이 또한 가능할 수 있다. 본 명세서에서 개시되는 예들은 범용 및 특수 목적 워크로드들에 대해 컴퓨팅할 수 있는 프로세서(예를 들면, CPU 또는 임의의 다른 프로세서 회로부)와 같은 프로세싱 하드웨어의 구성들을 제공한다. 일부 개시된 예들에서, 본 명세서에서 설명되는 구성들은 네트워크 특정 워크로드들 및 애플리케이션들과 같은 특수 컴퓨팅 워크로 드들 및 애플리케이션들의 성능을 최적화하기 위해, \"하드\" 재고 관리 단위(stock-keeping unit, SKU)에 제조 시에 구성될 수 있는(예를 들면, 하드웨어 제조업체에 의해 구성될 수 있는) 또는 나중에 소프트웨어 정의 변경 들로 \"소프트\" SKU에 구성될 수 있는 프로세싱 아키텍처(예를 들면, CPU 아키텍처 또는 임의의 다른 프로세싱 아키텍처)를 제공한다. 예를 들어, 적용 가능한 프로세서 구성들은 동일한 프로세서 아키텍처 및 제조 설계로 부터 생성될 다수의 프로세서 변형들(및 SKU들)을 가능하게 하기 위해 제조 시에 적용되거나 인에이블될 수 있 다. 프로세서의 어느 코어들이 실행될 관심 워크로드에 대해 감소된 적용 비율 및 증가된 클록 속도를 지원하 는지를 결정하기 위해 프로세서의 개별 코어들이 비닝 프로세스 동안 HVM(high-volume manufacturing) 시에 평 가될 수 있다. 일부 개시된 예들에서, 본 명세서에서 개시되는 바와 같은 예시적인 워크로드 조정 가능한 CPU들은, 인공 지능 및/또는 머신 러닝 모델 실행들 및/또는 컴퓨팅들, 사물 인터넷 서비스 워크로드들, 네트워크 워크로드들(예를 들면, 에지 네트워크, 코어 네트워크, 클라우드 네트워크 등 워크로드들), 자율 주행 컴퓨팅들, V2X(vehicle- to-everything) 워크로드들, 비디오 감시 모니터링, 및 실시간 데이터 분석과 같은, 예시적인 워크로드들을 실 행, 구현, 및/또는 다른 방식으로 실시할 수 있다. 워크로드들의 추가적인 예들은 미디어 스트림들을 전달 및/ 또는 인코딩하는 것, 광고 노출률을 측정하는 것, 미디어 스트림들에서의 객체 검출, 음성 분석, 자산 및/또는 재고 관리, 가상 현실, 및/또는 증강 현실 프로세싱을 포함한다. 소프트웨어 정의 또는 소프트웨어 기반(software-enabled) 실리콘 특징들은 제조 시 이후에 프로세서 특징 세트 에 대한 변경들을 가능하게 한다. 예를 들어, 소프트웨어 정의 또는 소프트웨어 기반 실리콘 특징은 지불 또는 라이선싱 시에 능력들을 잠금 해제하고 인에이블시키는 제조 설정들을 토글하는 데 사용될 수 있다. 유리하게 도, 동일한 칩이 다수의 위치들에 배포되고 위치의 특성들에 따라 동적으로 변경될 수 있기 때문에, 그러한 소 프트 SKU 능력들은 제조업체들에 상당한 이점들을 추가로 제공한다. 유리하게도, 하드 SKU 또는 소프트 SKU 구현은 자신의 엔터프라이즈(예를 들면, 종래의 워크로드들을 실행하는 서버들)를 위해 및 데이터 평면 네트워크 기능 가상화(NFV) 앱들(예를 들면, 네트워크 워크로드들을 실행하는 서버들)을 위해 동일한 하드웨어 배열 및 CPU 설계를 배포하려고 의도하는 통신 제공업체들과 같은 최종 고객들 에게 상당한 이점들을 제공한다. 유리하게도, 동일한 CPU 제조를 사용하는 것은 비용 및 설계 고려 사항들을 크게 단순화시킨다. 일부 개시된 예들에서, 본 명세서에서 설명되는 구성들은 다양한 마이크로프로세서 유형들 및 아키텍처들에 적 용 가능할 수 있다. 이들은 1-소켓(1S) 및 2-소켓(2S) 서버들(예를 들면, CPU들을 위한 2개의 슬롯을 갖는 랙 장착형 서버)을 위해 설계된 프로세서들, 다수의 코어들을 갖는 프로세서들(예를 들면, 멀티코어 프로세서), 다 양한 유형들의 상호연결부들 및 패브릭들과의 연결에 적합한 프로세서들, x86 또는 OpenPOWER 명령어 세트들을 갖는 프로세서들을 포함하지만, 이들로 제한되지 않는다. 그러한 유형들 및 구성들을 구체화하는 프로세서 아 키텍처들의 예들은 Intel® Xeon 프로세서 아키텍처, AMD® EPYC 프로세서 아키텍처, 또는 IBM® POWER 프로세 서 아키텍처를 포함한다. 그렇지만, 본 명세서에서 개시되는 구현들은 그러한 아키텍처들 또는 프로세서 설계 들로 제한되지 않는다. 일부 개시된 예들에서, 프로세서가 MEC 환경에 배포될 때 실행될 관심 워크로드를 나타내는 고객 요구사항들(예 를 들면, 지연시간, 전력 요구사항들(예를 들면, 전력 소비 요구사항들), 및/또는 처리량 요구사항들) 및/또는 머신 판독 가능 코드는 고객, 최종 사용자 등으로부터 획득될 수 있다. 일부 그러한 예들에서, 프로세서가 관 심 워크로드의 최적화된 및/또는 다른 방식으로 개선된 실행과 연관된 지연시간 요구사항들, 처리량 요구사항들, 및/또는 전력 요구사항들을 충족시키기 위해 머신 판독 가능 코드를 실행할 수 있는지를 검증하기 위해 프로세서가 머신 판독 가능 코드를 실행할 수 있다. 따라서, 네트워크 워크로드를 지원하는 적어도 n개의 코어를 갖는 특정 설계의 프로세서 인스턴스는 향상된 네트워크 운영들을 지원하는 것을 나타내는 제1 SKU를 사 용하여 배포될 수 있는 반면, 네트워크 워크로드를 지원하는 n개 미만의 코어를 갖는 특정 설계의 다른 프로세 서 인스턴스는 제2 SKU를 사용하여 배포될 수 있다. 유리하게도, 설계, 제조, 및 배포 시에 이러한 기술들을 고려하는 것은 동일한 프로세서 제조 패키징으로부터 다수의 프로세서 SKU들이 생성될 수 있게 할 것이다. 일부 개시된 예들에서, 그러한 네트워크 특정 워크로드들 및 애플리케이션들에 대한 최적화된 성능은, 예컨대, NFV 및 이에 수반되는 네트워크 가상 기능들(NFV들) 및 애플리케이션들에 의해 제공되는, 집약적인 네트워크 트 래픽 워크로드들을 갖는 에지, 코어 네트워크, 및 클라우드 데이터 센터 환경들에 위치하는 프로세서 배포들에 적용 가능하다. 추가적으로 또는 대안적으로, 본 명세서에서 설명되는 바와 같은 프로세서 배포들은 컴퓨트 바운드 워크로드들과 같은 다른 유형들의 워크로드들에 최적화될 수 있다. 일부 개시된 예들에서, 워크로드 분석은 네트워크 워크로드들의 개선된 처리에 관련된 프로세서의 특정 설정들 및/또는 구성들을 식별하고 설정하기 위해 반도체 제조(예를 들면, 실리콘 제조) 이전에 수행된다. 예를 들어, 설정들 및/또는 구성들은 프로세스 파라미터들, 코어 수, 및 레일별(예를 들면, 코어별) 적용 비율을 포함한 적 용 비율 파라미터들을 나타낼 수 있다. 일부 개시된 예들에서, 프로세서의 적용 비율의 계산은 네트워크 노드 위치(예를 들면, 지상 또는 비지상 통신 네트워크의 프런트홀, 미드홀, 또는 백홀), 지연시간 요구사항들, 처리 량 요구사항들, 및/또는 전력 요구사항들을 포함한 적용 비율 파라미터들에 기초하여 결정될 수 있다. 이것으 로부터, 테스트되고, 검증되며, 칩 패키지의 제조에 포함될 수 있는 결정적 주파수가 생성될 수 있다. 특정 워 크로드 및 획득될 원하는 성능에 따라 프로세서 패키지의 상이한 블록들이 평가될 수 있다. 일부 개시된 예들에서, HVM에서 클래스 테스트 동안, 각각의 프로세서는 상이한 온도 설정점들에서 보장된 작동 주파수에 대해 테스트된다. 이러한 온도 및 주파수 쌍들은 작동 동안 액세스되도록 지속적으로(예를 들면, 프 로세서 내에) 저장될 수 있다. 즉, 작동 중에, 이 구성 정보는 냉각, 프로세서 이용률, 워크로드 수요, 사용자 제어 등, 및/또는 이들의 조합의 상이한 레벨들에서 상이한 보장된 작동 주파수 레벨들을 제공하는 기초를 형성 하는 데 사용될 수 있다. 추가적으로, 더 낮은 열 작동점들에서, 프로세서는 더 낮은 누출 레벨들로 작동할 수 있다. 예를 들어, 주어진 프로세서에 대한 최대 작동 온도(예를 들면, 최대 접합 온도)(Tjmax)가 섭씨 95°(95 °C)인 경우, 보장된 작동 주파수가 또한 더 높은(예를 들면, 105°C) 및 더 낮은(예를 들면, 85°C, 70°C 등) 온도 설정점들에서도 결정될 수 있다. 모든 프로세서에 대해, 온도 및 주파수 쌍들은 MSR(model specific register) 값들로서 또는 전력 제어기(예를 들면, 전력 제어 유닛(PCU))가 액세스할 수 있는 퓨즈들로서 프로세 서에 저장될 수 있다. 일부 개시된 예들에서, 구성 정보는 복수의 구성들(예를 들면, 애플리케이션, 프로세서, 전력, 또는 워크로드 구성들), 페르소나들(personas)(예를 들면, 애플리케이션, 프로세서, 전력, 또는 워크로드 페르소나들), 프로파 일들(예를 들면, 애플리케이션, 프로세서, 전력, 또는 워크로드 프로파일들) 등을 포함할 수 있으며, 여기서 각 각의 구성은 구성 식별자, 최대 전류 레벨(ICCmax), 최대 작동 온도(섭씨 온도(degrees Celsius) 단위), 보장된 작동 주파수(기가헤르츠(GHz) 단위), 최대 전력 레벨, 즉 TDP 레벨(와트(W) 단위), 최대 케이스 온도(섭씨 온도 단위), 코어 수 및/또는 설계 수명(3년, 5년 등과 같은, 연 단위)과 연관될 수 있다. 일부 그러한 개시된 예들 에서, 이러한 상이한 구성들을 통해, 프로세서가 더 낮은 온도 레벨들에서 작동하도록 지정될 때, 더 높은 구성 (따라서 더 높은 보장된 작동 주파수)이 선택될 수 있다. 일부 그러한 개시된 예들에서, 구성들 중 하나 이상 은 프로세서에, 예컨대, 프로세서의 비휘발성 메모리(NVM), 판독 전용 메모리(ROM) 등에 저장될 수 있거나, 전 기 버스 또는 통신 경로를 통해 프로세서에 의해 액세스 가능할 수 있는 NVM, ROM 등에 저장될 수 있다. 일부 개시된 예들에서, 구성들은 컴퓨트 코어들(예를 들면, CPU 코어들, 프로세서 코어들 등) 및 (예를 들면, 프로세서의 \"언코어(un-core)\" 또는 \"언코어(uncore)\" I/O 메시 상호연결 영역들 내의) 관련된 컴포넌트들 간의 전력을 조정 및 할당하기 위한 설정들, 값들 등을 포함할 수 있다. 이러한 설정들은 범용 워크로드들(예를 들 면, 프로세서의 코어들에서 더 높은 전력 소비를 야기하는 워크로드들)에 비해, 네트워크 워크로드들(예를 들면, 메모리, 캐시들, 및 프로세서와 다른 회로부 사이의 상호연결부들에서 더 높은 전력 소비를 야기하는 워 크로드들)에서 발생하는 상이한 유형들의 프로세서 활동으로 인해 성능에 상당한 영향을 미칠 수 있다. 일부 개시된 예들에서, 프로세서는 코어들(예를 들면, 컴퓨트 코어들, 프로세서 코어들 등), 메모리, 메시, 및 I/O(예를 들면, I/O 주변기기(들))를 포함할 수 있다. 예를 들어, 코어들 각각은 실행 유닛, 하나 이상의 전력 게이트, 및 캐시 메모리(예를 들면, 레벨 2(L2) 캐시라고도 지칭될 수 있는 중간 레벨 캐시(MLC))를 포함하는 멀티코어 프로세서의 코어를 포함하는 코어 타일로서 구현될 수 있다. 일부 그러한 예들에서, 캐싱/홈 에이전 트(caching/home agent, CHA)(코어 캐시 홈 에이전트라고로도 지칭될 수 있음)는 코어 타일들 사이의 캐시 일관 성을 유지한다. 일부 개시된 예들에서, CHA는 코어 타일(예를 들면, 대응하는 코어 타일의 CHA)과 메시 사이의 인터페이스를 용이하게 할 수 있는 메시 스톱 스테이션(mesh stop station)을 구현하는 CMS(converged/common mesh stop)를 활용하는 것에 의해 캐시 일관성을 유지할 수 있다. 메모리는, 캐시 메모리(예를 들면, LLC 메모 리)와 같은, 멀티코어 프로세서의 메모리를 포함하는 메모리 타일로서 구현될 수 있다. 메시는 시스템 전체 상 호연결 그리드(system-wide interconnect grid)를 형성하는 하프 링들(half rings)의 다차원 어레이를 포함하 는 패브릭으로서 구현될 수 있다. 일부 개시된 예들에서, CHA, LLC, 또는 메시 중 적어도 하나는 CLM을 구현할 수 있다(예를 들면, CLM = CHA(C), LLC(L), 및 메시(M)). 예를 들어, 코어들 각각은 연관된 CLM을 가질 수 있 다.일부 개시된 예들에서, 멀티코어 프로세서의 코어들은 대응하는 언코어들을 갖는다. 예를 들어, 제1 언코어는 멀티코어 프로세서의 제1 코어에 대응할 수 있다. 일부 그러한 예들에서, 제1 언코어는 CMS, 메시 인터페이스, 및/또는 I/O를 포함할 수 있다. 일부 개시된 예들에서, 제1 언코어의 주파수가 증가되는 동안 제1 코어의 주파 수는 감소될 수 있다. 예를 들어, CMS, 메시 인터페이스, I/O 등 및/또는 이들의 조합의 주파수는 더 높은 주 파수들 및/또는 감소된 지연시간들에서 네트워크 워크로드들을 실행하도록 증가될 수 있다. 유리하게도, 그러 한 네트워크 워크로드들을 프로세싱하기 위한 컴퓨팅들이 처리량 제약들로 인해 I/O 바운드이기 때문에 제1 언 코어의 주파수를 증가시키는 것은 네트워크 워크로드들의 실행을 개선시킬 수 있다. 대안적으로, 제1 언코어의 주파수가 감소되는 동안 제1 코어의 주파수는 증가될 수 있다. 유리하게도, 제1 코어의 주파수를 증가시키는 것은, 비디오 렌더링, 머신 러닝/인공 지능(ML/AI) 애플리케이션들 등과 같은 컴퓨팅 집약적인 애플리케이션들 의 실행을 개선시킬 수 있는데, 그 이유는 그러한 애플리케이션들이 컴퓨트 바운드이며 연관된 워크로드를 완료 하기 위해 프로세서의 상이한 코어(들)와의 통신을 필요하지 않을 수 있기 때문이다. 본 명세서에서 개시되는 예들은 적용 비율에 기초한 네트워크 워크로드 최적화된 설정들로 네트워크 워크로드를 프로세싱하기 위한 기술들을 포함한다. 일부 개시된 예들에서, 개별 프로세서 코어가 수정된 프로세서 특징을 갖는 네트워크 또는 워크로드 최적화된 워크로드들을 지원하는지 여부를 결정하기 위해 평가가 이루어진다. 예 를 들어, 최적화되지 않은 프로세서는 컴퓨트 집약적 워크로드들에 대해 코어에서 1.0의 적용 비율로 작동하도 록 구성될 수 있으며; 최적화된 프로세서는 네트워크 집약적 워크로드들에 대해 코어에서 1.0 미만의 적용 비율 로 작동하도록 구성될 수 있다. 일부 개시된 예들에서, 네트워크 집약적 워크로드들에 대해 1.0보다 큰 적용 비율을 활용하기 위해 프로세서의 다른 컴포넌트들(예컨대, 언코어 또는 그의 부분(들))이 평가될 수 있다. 일부 개시된 예들에서, 네트워크 최적화된 워크로드들에 대한 코어 지원이 수정된 프로세서 특징에 의해 제공되 지 않거나 이용 가능하지 않은 경우, 프로세서 코어는 1.0의 적용 비율에 기초하여 자신의 일반 모드(regular mode)에서 작동될 수 있다. 일부 개시된 예들에서, 코어 지원이 제공되고 수정된 프로세서 특징에 의해 이용 가능한 경우, 프로세서 특징(예를 들면, 주파수, 전력 사용량, 스로틀링 등)이 특정 워크로드 시나리오를 고려 하고 모델링하도록 인에이블될 수 있다. 일부 개시된 예들에서, 이 특정 워크로드 시나리오는 전력 및 주파수 설정이 적용 비율의 변화에 기초하여 조정되는 것을 수반하는 네트워크 워크로드 시나리오일 수 있다. 일부 개시된 예들에서, 하나 이상의 네트워크 워크로드 최적화는 감소된 적용 비율로 지원된 코어(들) 내에서 구현될 수 있다. 이것은, 다른 변경들 중에서도, 수정된 P-상태, 수정된 주파수 값들, 워크로드에 관련된 명령 어 세트 확장들의 인에이블 또는 활용을 포함할 수 있다. 구현의 결과적인 결과는 코어를 증가된 성능 상태(예 를 들면, 더 높은 결정적 주파수)에서 작동시키는 것, 또는 코어에 의해 사용하기 위한 하나 이상의 명령어 세 트 특징을 임의로 인에이블시키는 것을 포함할 수 있다. 일부 개시된 예들에서, 프로세서의 원하는 작동 사용 사례에 따라 프로세서 설계 내에서 하나 이상의 최적화가 적용될 수 있다. 이것은, 의도된 배포들, 라이선스들, 워크로드의 프로세싱 특징들, 사용 조건 및 활성화 협약 등에 따라, 표준과 네트워크 워크로드 최적화된 특징들 또는 최적화들(예를 들면, 워크로드 최적화들, 네트워크 워크로드 최적화들 등) 사이의 스로틀링을 수반할 수 있다. 일부 개시된 예들에서, 최적화된 특징들은, 고객 배포에서 특정 유형들의 워크로드들을 처리할 때 프로세서의 처리량을 변경하기 위해, 전력 및 성능 기반 네트워크 워크로드 최적화들의 형태로 인에이블된다. 예를 들어, 아래에서 설명되는 적용 비율 설정들의 조정으로, 서버들(예를 들면, 컴퓨팅 서버들) 내의 프로세서들이, 예컨 대, 멀티 액세스 에지 컴퓨팅 시나리오로부터, 통신(예를 들면, 5G 또는 NFV 데이터) 및/또는 콘텐츠(예를 들면, 오디오, 비디오, 텍스트 등, 데이터)의 저 지연시간 전달에 최적화될 수 있다. 유리하게도, 그러한 네트 워크 향상들은 모바일 에지, 코어, 클라우드, 및 데이터 평면 패킷 코어, 클라우드 무선 액세스 네트워크(RAN), 및 백홀 프로세싱을 포함한 모바일 에지 컴퓨팅의 다른 구역들과 연관된 무선 네트워크 워크로드들에 대해 워크 로드 최적화된 프로세서 성능을 설정할 수 있다. 유리하게도, 그러한 네트워크 향상들은 또한, 가상 콘텐츠, 가상 광대역 네트워크 게이트웨이들, 및 가상 CMTS(cable modem termination systems)를 사용하는 것을 포함하 여, 유선 네트워크 워크로드들에 대해 워크로드 최적화된 프로세서 성능을 설정할 수 있다. 일부 개시된 예들에서, 하나 이상의 워크로드 최적화된 CPU는, 지상 및/또는 비지상 통신 네트워크와 같은, 멀 티코어 컴퓨팅 시스템의 양상들을 구현한다. 예를 들어, 동일한 프로세서 제조 패키징을 갖는, 워크로드 최적 화된 CPU들과 같은, 하나 이상의 워크로드 최적화된 프로세서는 가상 무선 액세스 네트워크(vRAN) 중앙 유닛 (CU), vRAN 분산 유닛(DU), 코어 서버, 등, 및/또는 이들의 조합을 구현할 수 있다. 일부 그러한 예들에서, 제 1 워크로드 최적화된 CPU는 제1 적용 비율을 갖는 제1 워크로드 최적화된 CPU의 제1 코어 세트에 기초하여 제1네트워크 기능 또는 워크로드 세트에 대응하는 제1 명령어 세트를 실행하는 것에 의해 vRAN CU를 구현할 수 있 다. 일부 그러한 예들에서, 제1 워크로드 최적화된 CPU는 제2 적용 비율을 갖는 제1 워크로드 최적화된 CPU의 제2 코어 세트에 기초하여 제2 네트워크 기능 또는 워크로드 세트에 대응하는 제2 명령어 세트를 실행하는 것에 의해 vRAN DU를 구현할 수 있다. 일부 그러한 예들에서, 제1 워크로드 최적화된 CPU는 제3 적용 비율을 갖는 제1 워크로드 최적화된 CPU의 제3 코어 세트에 기초하여 제3 네트워크 기능 또는 워크로드 세트에 대응하는 제3 명령어 세트를 실행하는 것에 의해 코어 서버를 구현할 수 있다. 유리하게도, 제1 워크로드 최적화된 CPU는 증 가된 성능으로 작동하도록 코어별로 CPU 코어들의 설정들을 조정하는 것에 의해 상이한 네트워크 워크로드들을 실행할 수 있다. 일부 개시된 예들에서, (멀티코어 CPU와 같은) 동일한 멀티코어 프로세서는 복수의 SKU들을 가질 수 있고, 따라 서 멀티 SKU 프로세서를 구현할 수 있다. 예를 들어, 제1 워크로드 최적화된 CPU는 vRAN CU를 구현하도록 구성 될 때 제1 SKU를 가질 수 있고, vRAN DU를 구현하도록 구성될 때 제2 SKU를 가질 수 있으며, 코어 서버를 구현 하도록 구성될 때 제3 SKU를 가질 수 있는 등이다. 일부 그러한 예들에서, 외부 엔티티(예를 들면, 컴퓨팅 디 바이스, 인프라스트럭처 기술(IT) 관리자, 사용자, 제조업체 엔터프라이즈 시스템 등)는 제조 시 이후에(예를 들면, 컴퓨팅 환경에 배포되고/되거나 컴퓨팅 환경에서 다른 방식으로 작동할 때) 그의 프로세서 특징(들)에 대 한 변경들을 가능하게 하기 위해 제1 워크로드 최적화된 CPU의 소프트웨어 정의 또는 소프트웨어 기반 실리콘 특징들을 호출할 수 있다. 예를 들어, SKU들 사이에서 동적으로 전환하기 위해 지불 또는 라이선싱 시에 능력 들을 잠금 해제하고 인에이블시키는 제조 설정들을 토글하기 위해 제1 워크로드 최적화된 CPU의 소프트웨어 정 의 또는 소프트웨어 기반 실리콘 특징(들)이 호출될 수 있다. 도 1은 제1 예시적인 멀티코어 컴퓨팅 환경의 예시이다. 제1 멀티코어 컴퓨팅 환경은 예시적인 디바 이스 환경, 예시적인 에지 네트워크, 예시적인 코어 네트워크, 예시적인 클라우드 네트워크 를 포함한다. 이 예에서, 디바이스 환경은, 5G에 기초한 무선 네트워크(예를 들면, 5G 셀룰러 네트 워크)와 같은, 무선 네트워크를 사용하여 컴퓨팅 작업들의 실행을 용이하게 하는 5G 디바이스 환경이다. 디바이스 환경은 예시적인 디바이스들(예를 들면, 컴퓨팅 디바이스들)(108, 110, 112, 114, 116)을 포함한 다. 디바이스들(108, 110, 112, 114, 116)은 제1 예시적인 디바이스, 제2 예시적인 디바이스, 제3 예시적인 디바이스, 제4 예시적인 디바이스, 및 제5 예시적인 디바이스를 포함한다. 제1 디바 이스는 5G 인터넷 가능 스마트폰이다. 대안적으로, 제1 디바이스는 태블릿 컴퓨터(예를 들면, 5G 인 터넷 가능 태블릿 컴퓨터), 랩톱(예를 들면, 5G 인터넷 가능 랩톱) 등일 수 있다. 제2 디바이스는 차량 (예를 들면, 자동차, 연소 기관 차량, 전기 차량, 하이브리드 전기 차량, 자율 주행 또는 자율 주행 가능 차량 등)이다. 예를 들어, 제2 디바이스는, 일부 예들에서, 자가 운전, 자율 주행, 또는 컴퓨터 보조 운전 차 량일 수 있는, 차량에 포함된 전자 제어 유닛 또는 다른 하드웨어일 수 있다. 제3 디바이스는 항공기이다. 예를 들어, 제3 디바이스는 드론과 같은 무인 항공기(UAV)(예를 들면, 자율 주행 UAV, 인간 또는 사용자 제어 UAV 등)에 포함된 프로세서 또는 다른 유형의 하드웨어일 수 있다. 제4 디바이스는 로봇이다. 예를 들어, 제4 디바이스는 조립, 리프팅, 제조 등 유형들의 작업들에서 사용 되는 협동 로봇, 로봇 암, 또는 다른 유형의 머신일 수 있다. 제5 디바이스는 건강 관리 관련 디바이스이다. 예를 들어, 제5 디바이스는 건강 관리 기록들을 저장, 분석, 및/또는 다른 방식으로 프로세싱하는 컴퓨터 서버일 수 있다. 다른 예들에서, 제5 디바이스 는, 주입 펌프, 자기 공명 이미징(MRI) 머신, 수술 로봇, 바이탈 사인 모니터링 디바이스 등과 같은, 의료 디바 이스일 수 있다. 일부 예들에서, 디바이스들(108, 110, 112, 114, 116) 중 하나 이상은, 서버, 개인용 컴퓨터, 워크스테이션, 자가 학습 머신(예를 들면, 신경 네트워크), 모바일 디바이스(예를 들면, 셀 폰, 스마트 폰, iPad™와 같은 태블릿), PDA(personal digital assistant), 인터넷 어플라이언스, DVD(digital versatile disk) 플레이어, CD(compact disk) 플레이어, 디지털 비디오 레코더, 블루레이 플레이어, 게이밍 콘솔, 개인용 비디오 레코더, 셋톱 박스, 헤드셋 또는 다른 웨어러블 디바이스, 또는 임의의 다른 유형의 컴퓨팅 디바이스와 같은, 상이한 유형의 컴퓨팅 디바이스일 수 있다. 일부 예들에서, 도 1에 묘사된 것보다 더 적거나 더 많은 디 바이스들이 있을 수 있다. 디바이스들(108, 110, 112, 114, 116) 및/또는, 보다 일반적으로, 디바이스 환경은 제1 예시적인 네트워크 들을 통해 에지 네트워크와 통신한다. 제1 네트워크들은 셀룰러 네트워크들(예를 들면, 5G 셀 룰러 네트워크들)이다. 예를 들어, 제1 네트워크들은 안테나들, 무선 타워들 등, 및/또는 이들의 조합에 의해 구현되고/되거나 다른 방식으로 용이하게 될 수 있다. 추가적으로 또는 대안적으로, 제1 네트워크들중 하나 이상은 이더넷 연결, DSL(digital subscriber line) 연결, 전화선 연결, 동축 케이블 시스템, 위성 시 스템, 가시선(line-of-site) 무선 시스템, 셀룰러 전화 시스템, 지상 네트워크, 비지상 네트워크 등, 및/또는 이들의 조합일 수 있다. 도 1의 예시된 예에서, 에지 네트워크는 제1 네트워크들, 예시적인 원격 무선 유닛들(RRU들), 예시적인 분산 유닛들(DU들), 및 예시적인 중앙 유닛들(CU들)을 포함한다. 이 예에서, DU들 및 /또는 CU들은 멀티코어 컴퓨팅 시스템들이다. 예를 들어, DU들 및 CU들 중 하나 이상은 복수의 코어들(예를 들면, 컴퓨트 코어들, 프로세서 코어들 등)을 각각 포함하는 복수의 프로세서들(예를 들면, 멀티코 어 프로세서들)을 포함할 수 있다. 일부 그러한 예들에서, DU들 및/또는 CU들은 에지 네트워크(10 4)를 통해 상이한 목적지(예를 들면, 5G 디바이스 환경, 코어 네트워크 등)로의 데이터 흐름들(예를 들면, 통신 흐름들, 패킷 흐름들, 하나 이상의 데이터 패킷의 흐름 등)의 분배를 실시할 수 있는, 멀티코어 에 지 서버들과 같은, 에지 서버들(예를 들면, 5G 에지 서버들)이다. 일부 예들에서, 도 1에 묘사된 것보다 더 적 거나 더 많은 제1 네트워크들, RRU들, DU들, 및/또는 CU들이 사용될 수 있다. 이 예에서, RRU들은 무선 기지국에서의 무선 트랜시버들(예를 들면, 원격 무선 트랜시버들, 원격 무선 헤 드들(RRH들)이라고도 지칭됨)이다. 예를 들어, RRU들은 운영자(예를 들면, 셀룰러 운영자 또는 제공업 체)의 네트워크에 연결되는 무선 주파수(RF) 회로부, 아날로그-디지털/디지털-아날로그 변환기들, 및/또는 업/ 다운 전력 변환기들을 포함할 수 있는 하드웨어이다. 일부 그러한 예들에서, RRU들은 디지털 신호를 RF로 변환하고, RF 신호를 원하는 전력 레벨로 증폭시키며, 증폭된 RF 신호를 안테나를 통해 공중에 방사할 수 있다. 일부 예들에서, RRU들은 안테나를 통해 공중으로부터 원하는 신호 대역을 수신하고 수신된 신호를 증폭시 킬 수 있다. RRU들이 실내 랙 장착된 위치 또는 설비에 종종 장착되는 기지국 하드웨어로부터 물리적으로 멀리 떨어져 있는 마스트 상단(mast-top) 또는 타워 상단(tower-top) 위치에 전형적으로 설치되기 때문에, RRU 들은 원격이라고 지칭된다. 도 1의 예시된 예에서, RRU들은 DU들의 각자의 DU에 결합되고/되거나 각자의 DU와 다른 방식으로 통 신한다. 이 예에서, DU들은 실시간 계층 1(L1) 스케줄링 기능들(예를 들면, 물리 계층 제어) 및/또는 계 층 2(L2) 스케줄링 기능들(예를 들면, 무선 링크 제어(RLC), 매체 액세스 제어(MAC) 등)을 구현하는 하드웨어를 포함한다. 이 예에서, CU는, 패킷 데이터 컨버전스 제어(PDCP) 및/또는 무선 자원 제어(RRC) 기능들과 같 은, 계층 3 스케줄링 기능들을 구현하는 하드웨어를 포함한다. 이 예에서, CU들 중 제1 CU는 중앙 유닛 제어 평면(CU-CP)이고 CU들 중 제2 CU는 중앙 유닛 사용자 평면(CU-UP)이다. 이 예에서, DU들 중 하나 이상 및/또는 CU들 중 하나 이상 중 적어도 하나는 vRAN을 구현한다. 예를 들어, DU들 또는 그의 부분(들) 중 하나 이상은 하나 이상의 vRAN DU를 구현하도록 가상화될 수 있고, CU 들 또는 그의 부분(들) 중 하나 이상은 하나 이상의 vRAN CU를 구현하도록 가상화될 수 있는 등이다. 일 부 예들에서, DU들 중 하나 이상 및/또는 CU들 중 하나 이상은 NFV의 원리들에 기초하여 벤더 무관 (vendor-agnostic) 하드웨어(예를 들면, 상용(commodity) 서버 하드웨어) 상에서 가상화된 기저대역 기능들을 실행(execute)하고, 실행(run)하며/하거나 다른 방식으로 구현한다. NFV는 통신 서비스들을 생성하기 위해 연 결되거나 함께 체이닝될 수 있는 빌딩 블록들로 네트워크 노드 기능들의 전체 클래스들을 가상화하기 위해 IT 가상화 기술들을 사용하는 네트워크 아키텍처 개념이다. 도 1의 예시된 예에서, 제1 네트워크들과 RRU들 사이의 제1 연결(들) 또는 통신 링크(들)는 에지 네 트워크의 프런트홀을 구현한다. DU들과 CU들 사이의 제2 연결(들) 또는 통신 링크(들)는 에지 네트워크의 미드홀을 구현한다. CU들와 코어 네트워크 사이의 제3 연결(들) 또는 제3 통신 링 크(들)는 에지 네트워크의 백홀을 구현한다. 도 1의 예시된 예에서, 코어 네트워크는 예시적인 코어 디바이스들을 포함한다. 이 예에서, 코어 디 바이스들은 멀티코어 컴퓨팅 시스템들이다. 예를 들어, 코어 디바이스 중 하나 이상은 복수의 코어 들(예를 들면, 컴퓨트 코어들, 프로세서 코어들 등)을 각각 포함하는 복수의 프로세서들(예를 들면, 멀티코어 프로세서들)을 포함할 수 있다. 예를 들어, 코어 디바이스들 중 하나 이상은 서버들(예를 들면, 물리적 서버들, 가상 또는 가상화된 서버들 등, 및/또는 이들의 조합)일 수 있다. 일부 그러한 예들에서, 코어 디바이 스들 중 하나 이상은 DU들, CU들 등과 동일한 하드웨어로 구현될 수 있다. 일부 예들에서, 코 어 디바이스들 중 하나 이상은 임의의 다른 유형의 컴퓨팅 디바이스일 수 있다. 코어 네트워크는 예시적인 애플리케이션 계층, 예시적인 가상화 계층, 및 예시적인 하드웨어 계 층을 포함하는 상이한 논리 계층들에 의해 구현된다. 일부 예들에서, 코어 디바이스들은 코어 서버들을 구현한다. 일부 예들에서, 애플리케이션 계층 또는 그의 부분(들), 가상화 계층 또는 그의 부 분(들), 및/또는 하드웨어 계층 또는 그의 부분(들)은 하나 이상의 코어 서버를 구현한다. 예를 들어, 코 어 서버는 코어 디바이스들 중 제1 코어 디바이스, 코어 디바이스들 중 제2 코어 디바이스 등, 및/또 는 이들의 조합과 연관된 애플리케이션 계층, 가상화 계층, 및/또는 하드웨어 계층에 의해 구현 될 수 있다. 이 예에서, 애플리케이션 계층은, 도 1의 제1 멀티코어 컴퓨팅 환경과 같은 통신 네트 워크의 운영과 관련하여, 비즈니스 지원 시스템들(BSS), 운영 지원 시스템들(OSS), 5G 코어(5GC) 시스템들, 인 터넷 프로토콜(IP) 멀티미디어 코어 네트워크 서브시스템들(IMS) 등을 구현할 수 있다. 이 예에서, 가상화 계 층은, 프로세싱 자원들(예를 들면, CPU들, 그래픽 프로세싱 유닛들(GPU들) 등), 메모리 자원들(예를 들면, 비휘발성 메모리, 휘발성 메모리 등), 저장 자원들(예를 들면, 하드 디스크 드라이브들, 솔리드 스테이트 디스 크 드라이브들 등), 네트워크 자원들(예를 들면, 네트워크 인터페이스 카드들(NIC들), 게이트웨이들, 라우터들 등) 등의 가상화들과 같은, 코어 디바이스들의 물리적 하드웨어 자원들의 가상화들을 나타낼 수 있다. 이 예에서, 가상화 계층은 물리적 하드웨어 자원들의 가상화들로 구축되고/되거나 다른 방식으로 구성되는 하 나 이상의 가상 머신(VM)을 실행할 수 있는 하이퍼바이저를 사용하여 물리적 하드웨어 자원들의 가상화들을 제 어하고/하거나 다른 방식으로 관리할 수 있다. 코어 네트워크는 클라우드 네트워크와 통신한다. 이 예에서, 클라우드 네트워크는 사설 또는 공용 클라우드 서비스 제공업체일 수 있다. 예를 들어, 클라우드 네트워크는 컴퓨팅 작업들을 실행하기 위해 가상 및/또는 물리적 하드웨어, 소프트웨어, 및/또는 펌웨어 자원들을 사용하여 구현될 수 있다. 일부 예 들에서, 클라우드 네트워크는 FaaS(Function-as-a-Service), IaaS(Infrastructure-as-a-Service), SaaS(Software-as-a-Service) 등 시스템들을 구현하고/하거나 다른 방식으로 실시할 수 있다. 도 1의 예시된 예에서, 제1 예시적인 통신 경로, 제2 예시적인 통신 경로, 및 제3 예시적인 통신 경 로를 포함하는 다수의 예시적인 통신 경로들(134, 136, 138)이 묘사되어 있다. 이 예에서, 제1 통신 경로 는 5G 디바이스 환경의 디바이스들(108, 110, 112, 114, 116) 중 하나(다수)와 에지 네트워크 의 제1 네트워크들, RRU들, DU들, 및/또는 CU들 중 하나(다수) 사이의 통신에 대응하는 디바이스 투 에지(device-to-edge) 통신 경로이다. 제2 통신 경로는 에지 네트워크의 제1 네트워크 들, RRU들, DU들, 및/또는 CU들 중 하나(다수)와 코어 네트워크의 코어 디바이스 들 중 하나(다수) 사이의 통신에 대응하는 에지 투 코어(edge-to-core) 통신 경로이다. 제3 통신 경로 는 에지 네트워크의 제1 네트워크들, RRU들, DU들, 및/또는 CU들 중 하나(다수)를 통한 디바이스들(108, 110, 112, 114, 116) 중 하나(다수)와 코어 디바이스들 중 하나(다수) 사이의 통신에 대응하는 디바이스 투 에지 투 코어(device-to-edge-to-core) 통신 경로이다. 일부 예들에서, 제1 멀티코어 컴퓨팅 환경의 DU들, CU들, 코어 서버들 등 중 하나(다수)는, 워크로드 구성 가능한 또는 조정 가능한 CPU들, GPU들 등, 또는 임의의 다른 유형의 프로세서와 같은, 워크로드 구성 가능한 또는 워크로드 조정 가능한 하드웨어를 포함한다. 예를 들어, 워크로드 조정 가능 한 하드웨어는 증가된 성능으로 네트워크 워크로드들의 완료를 실시하기 위해 코어별로 및/또는 언코어별로 조 정되고, 구성되며/되거나 다른 방식으로 수정될 수 있는 코어들을 포함하는, 네트워크 최적화된 CPU들과 같은, 멀티 SKU CPU들일 수 있다. 추가적으로 또는 대안적으로, 일부 개시된 예들에서, 워크로드 조정 가능한 하드웨 어는, 인공 지능 및/또는 머신 러닝 모델 실행들 및/또는 컴퓨팅들, IoT 서비스 워크로드들, 자율 주행 운전 컴 퓨팅들, V2X 워크로드들, 비디오 감시 모니터링, 실시간 데이터 분석, 미디어 스트림들을 전달 및/또는 인코딩 하는 것, 광고 노출률을 측정하는 것, 미디어 스트림들에서의 객체 검출, 음성 분석, 자산 및/또는 재고 관리, 가상 현실, 및/또는 증강 현실 프로세싱과 같은, 예시적인 워크로드들을 증가된 성능 및/또는 감소된 지연시간 으로 실행하고, 구현하며/하거나 다른 방식으로 실시할 수 있다. 일부 예들에서, 네트워크 최적화된 CPU들은 제1 적용 비율(및 제1 작동 주파수) 및 제1 명령어 세트(예를 들면, 머신 판독 가능 명령어들, 256-비트 SSE(Streaming Single Instruction, Multiple Data (SIMD) Extensions) 명 령어들 등)에 기초하여 및/또는 다른 방식으로 이를 가정하여 제1 네트워크 워크로드들을 실행할 수 있는 하나 이상의 코어의 제1 세트를 포함한다. 일부 그러한 예들에서, 네트워크 최적화된 CPU들은 제2 적용 비율(및 제2 작동 주파수) 및 제2 명령어 세트(예를 들면, 고급 벡터 확장(Advanced Vector Extensions, AVX) 512-비트 명 령어들, AVX-512 명령어들라고도 지칭됨)에 기초하여 및/또는 다른 방식으로 이를 가정하여 제2 네트워크 워크 로드들을 실행할 수 있는 하나 이상의 코어의 제2 세트를 포함할 수 있다. 일부 예들에서, 네트워크 최적화된 CPU들은 제3 적용 비율(및 제3 작동 주파수) 및 제3 명령어 세트(예를 들면, 본 명세서에서 5G-ISA 명령어들이 라고도 지칭될 수 있는 5G 프로세싱 작업들을 개선시키고/시키거나 다른 방식으로 최적화하도록 맞춤화되고/되거나 다른 방식으로 개발된 명령어 세트 아키텍처(ISA))에 기초하여 및/또는 다른 방식으로 이를 가정하여 제3 네트워크 워크로드들을 실행할 수 있는 하나 이상의 코어의 제3 세트를 포함할 수 있다. 일부 예들에서, 제1 적용 비율은 제1 작동 주파수를 갖는 일반 또는 베이스라인 동작 모드에 대응할 수 있다. 일부 예들에서, 제2 적용 비율은 제1 작동 주파수보다 큰 제2 작동 주파수를 갖는 제1 향상된 또는 증가된 성능 모드에 대응할 수 있고, 이에 의해 제2 적용 비율은 제1 적용 비율보다 작다. 일부 예들에서, 제3 적용 비율은 제1 작동 주파수 및/또는 제2 작동 주파수보다 큰 제3 작동 주파수를 갖는 제2 향상된 또는 증가된 성능 모드에 대응할 수 있고, 이에 의해 제3 적용 비율은 제1 적용 비율 및/또는 제2 적용 비율보다 작다. 일부 그러한 예 들에서, 적용 비율들 사이의 변경은 하나 이상의 코어 또는 하나 이상의 대응하는 언코어(예를 들면, 하나 이상 의 I/O, 하나 이상의 메모리, 또는 하나 이상의 메시 상호연결부(들)(또는 보다 일반적으로 하나 이상의 메시 패브릭) 등) 중 적어도 하나의 보장된 작동 주파수의 변화를 유발할 수 있다. 일부 예들에서, 제2 코어 세트는 제1 코어 세트의 성능과 비교하여 증가된 성능으로 제2 네트워크 워크로드들을 실행할 수 있다. 일부 그러한 예들에서, 제1 코어 세트 중 하나(다수)의 코어 및/또는 제2 코어 세트 중 하나 (다수)의 코어는 코어에 로드될 명령어, 네트워크 최적화된 CPU의 이용 가능한 전력 버짓 등, 및/또는 이들의 조합에 기초하여 상이한 모드들로 동적으로 전환할 수 있다. 일부 예들에서, 제1 코어 세트 중 하나(다수)의 코어 및/또는 제2 코어 세트 중 하나(다수)의 코어는 머신 러닝 모델이 과거 또는 순간 워크로드들을 분석하고 분석에 기초하여 작동 모드들의 변화(들)을 결정하는 것에 응답하여 상이한 모드들로 동적으로 전환할 수 있다. 유리하게도, 네트워크 최적화된 CPU의 코어들 중 하나(다수)는 부팅(예를 들면, BIOS) 또는 런타임 시에 구성될 수 있다. 도 2는, 이하의 예들 중 다수에서 \"에지 클라우드\"라고 지칭되는 프로세싱 계층을 포함하는, 에지 컴퓨팅을 위 한 구성의 개요를 도시하는 블록 다이어그램이다. 예를 들어, 도 2의 블록 다이어그램은 도 1의 제1 멀티코어 컴퓨팅 환경 또는 그의 부분(들)을 구현할 수 있다. 도시된 바와 같이, 에지 클라우드는, 액세스 포인트 또는 기지국, 로컬 프로세싱 허브, 또는 중앙국(central office)과 같은, 에지 위치에 공존하며, 따라서 다수의 엔티티들, 디바이스들, 및 장비 인스턴스들을 포함할 수 있다. 에지 클라우드 는 클라우드 데이터 센터보다 엔드포인트(소비자 및 생성자) 데이터 소스들(예를 들면, 자율 주 행 차량들, 사용자 장비, 기업 및 산업 장비, 비디오 캡처 디바이스들, 드론들, 스마 트 도시들 및 빌딩 디바이스들), 센서들 및 사물 인터넷(IoT) 디바이스들 등)에 훨씬 더 가까이 위치 한다. 에지 클라우드에서의 에지들에 제공되는 컴퓨트, 메모리, 및 저장 자원들은, 다른 이점들 중에서도, 엔드포인트 데이터 소스들에 의해 사용되는 서비스들 및 기능들에 대한 초저지연 응답 시간들을 제공하는 것은 물론 에지 클라우드로부터 클라우드 데이터 센터를 향하여 네트워크 백홀 트래픽을 줄 이며 따라서 에너지 소비 및 전체 네트워크 사용을 개선시키는 데 중요하다. 컴퓨트, 메모리, 및 저장소는 부족한 자원들이며, 일반적으로 에지 위치에 따라 감소한다(예를 들면, 중앙국에 서보다, 기지국에서보다 소비자 엔드포인트 디바이스들에서 더 적은 프로세싱 자원들이 이용 가능함). 그렇지 만, 에지 위치가 엔드포인트(예를 들면, 사용자 장비(UE))에 가까울수록, 공간과 전력이 종종 더 많이 제약된다. 따라서, 에지 컴퓨팅은 지리적으로도 네트워크 액세스 시간 면에서도 더 가까이 위치하는 더 많은 자원들의 분산을 통해, 네트워크 서비스들에 필요한 자원들의 양을 줄이려고 시도한다. 이러한 방식으로, 에지 컴퓨팅은 컴퓨트 자원들을 적절한 경우 워크로드 데이터로 가져오거나 워크로드 데이터를 컴퓨트 자원들로 가져 오려고 시도한다. 이하는 다수의 잠재적 배포들을 다루고 일부 네트워크 운영자들 또는 서비스 제공업체들이 자체 인프라스트럭처 들에서 가질 수 있는 제한들을 해결하는 에지 클라우드 아키텍처의 양상들을 설명한다. 이들은 에지 위치에 기 초하는 구성들의 변형(예를 들어 기지국 레벨에서의 에지들이 멀티 테넌트 시나리오에서 더 제약된 성능 및 능 력들을 가질 수 있기 때문에); 에지 위치들, 위치들의 티어들, 또는 위치들의 그룹들에 이용 가능한 컴퓨트, 메 모리, 저장소, 패브릭, 가속 등 자원들의 유형에 기초한 구성들; 서비스, 보안, 및 관리 및 오케스트레이션 능 력들; 및 최종 서비스들의 사용성 및 성능을 달성하기 위한 관련 목표들을 포함한다. 이러한 배포들은, 지연시 간, 거리, 및 타이밍 특성들에 따라, \"니어 에지(near edge)\", \"클로즈 에지(close edge)\", \"로컬 에지(local edge)\", \"중간 에지(middle edge)\" 또는 \"파 에지(far edge)\" 계층들로 간주될 수 있는 네트워크 계층들에서의 프로세싱을 달성할 수 있다. 에지 컴퓨팅은, 전형적으로 데이터를 생성하고 소비하는 엔드포인트 디바이스들에 훨씬 더 가까운 기지국들, 게 이트웨이들, 네트워크 라우터들, 또는 다른 디바이스들에서 구현되는 컴퓨트 플랫폼(예를 들면, x86 또는 ARM컴퓨트 하드웨어 아키텍처)을 사용하여, 네트워크의 \"에지\"에서 또는 네트워크의 \"에지\"에 더 가까이에서 수행 되는 컴퓨팅 개발 중인 패러다임이다. 예를 들어, 에지 게이트웨이 서버들은 연결된 클라이언트 디바이스들에 대한 저지연 사용 사례들(예를 들면, 자율 주행 운전 또는 비디오 감시)을 위해 실시간으로 컴퓨팅을 수행하기 위해 메모리 및 저장 자원들의 풀들을 갖추고 있을 수 있다. 또는 예로서, 백홀 네트워크들을 통해 데이터를 더 이상 통신하지 않고도, 연결된 사용자 장비에 대한 서비스 워크로드들을 직접 프로세싱하기 위해 기지국들이 컴퓨트 및 가속 자원들로 보강될 수 있다. 또는 다른 예로서, 중앙국 네트워크 관리 하드웨어가, 가상화된 네 트워크 기능들을 수행하고 연결된 디바이스들에 대한 서비스들 및 소비자 기능들의 실행을 위한 컴퓨트 자원들 을 제공하는, 표준화된 컴퓨트 하드웨어로 대체될 수 있다. 에지 컴퓨팅 네트워크들 내에는, 컴퓨트 자원이 데 이터로 \"이동\"되는 서비스들에서의 시나리오들은 물론, 데이터가 컴퓨트 자원으로 \"이동\"되는 시나리오들이 있 을 수 있다. 또는 예로서, 기지국 컴퓨트, 가속 및 네트워크 자원들은 코너 케이스들, 비상 상황들을 관리하기 위해 또는 훨씬 더 긴 구현된 수명 주기에 걸쳐 배포된 자원의 장기 지속을 제공하기 위해 휴면 용량(dormant capacity)(구독, 주문형 용량(capacity on demand))을 활성화시키는 것에 의해 필요에 따라 워크로드 수요들에 맞게 스케일링하기 위한 서비스들을 제공할 수 있다. 도 2의 네트워크 아키텍처와 달리, 전통적인 엔드포인트(예를 들면, UE, V2V(vehicle-to-vehicle), V2X(vehicle-to-everything) 등) 애플리케이션들은 정보를 교환하고 조율하기 위해 로컬 디바이스 또는 원격 클 라우드 데이터 저장 및 프로세싱에 의존한다. 클라우드 데이터 배열은 장기간의 데이터 수집 및 저장을 가능하 게 하지만, 충돌, 교통 신호등 변경 등과 같은, 매우 시변하는(highly time varying) 데이터에는 최적이 아니며 지연시간 문제들을 해결하려는 데 실패할 수 있다. 통신 콘텍스트에서의 실시간 요구사항들에 따라, 데이터 프로세싱 및 저장 노드들의 계층적 구조가 에지 컴퓨팅 배포에서 정의될 수 있다. 예를 들어, 그러한 배포는 로컬 초저지연 프로세싱, 지역적 저장 및 프로세싱은 물 론 원격 클라우드 데이터 센터 기반 저장 및 프로세싱을 포함할 수 있다. 핵심 성과 지표들(KPI들)이 센서 데 이터가 어디에서 가장 잘 전송되는지와 어디에서 프로세싱 또는 저장되는지를 식별하는 데 사용될 수 있다. 이 것은 전형적으로 데이터의 ISO 계층 의존성에 의존한다. 예를 들어, 하위 계층(PHY, MAC, 라우팅 등) 데이터는 전형적으로 빠르게 변하며 지연시간 요구사항들을 충족시키기 위해 로컬에서 더 잘 처리된다. 애플리케이션 계 층 데이터와 같은 상위 계층 데이터는 전형적으로 시간에 덜 민감(less time critical)하며 원격 클라우드 데이 터 센터에서 저장 및 프로세싱될 수 있다. 보다 일반적인 레벨에서, 에지 컴퓨팅 시스템은 에지 클라우드(21 0)에서 작동하는 임의의 수의 배포들을 포괄하는 것으로 설명될 수 있는데, 이는 클라이언트 및 분산 컴퓨팅 디 바이스들로부터 조율을 제공한다. 도 3은 엔드포인트들, 에지 클라우드, 및 클라우드 컴퓨팅 환경들 사이의 운영 계층들을 예시한다. 구체적으로, 도 3은 네트워크 컴퓨팅의 다수의 예시적인 계층들 사이에서 도 2의 에지 클라우드를 활용하 는 컴퓨팅 사용 사례들의 예들을 묘사한다. 계층들은 데이터 생성, 분석, 및 데이터 소비 활동들을 수행 하기 위해 에지 클라우드에 액세스하는 엔드포인트(디바이스들 및 사물) 계층에서 시작된다. 예를 들어, 엔드포인트 계층은 도 1의 5G 디바이스 환경을 구현할 수 있다. 에지 클라우드는 물리적 으로 근접한 에지 시스템들에 위치하는 게이트웨이들, 온프레미스 서버들, 또는 네트워크 장비(노드들)를 갖는 에지 디바이스들 계층; 기지국들, 무선 프로세싱 유닛들, 네트워크 허브들, 지역 데이터 센터들(DC), 또는 로컬 네트워크 장비(장비)를 포함하는 네트워크 액세스 계층; 및 그 사이에 위치하는 임의의 장 비, 디바이스들, 또는 노드들(계층에 있음, 상세하게 예시되지 않음)과 같은, 다수의 네트워크 계층들에 걸쳐 있을 수 있다. 예를 들어, 계층 및/또는 네트워크 액세스 계층, 및/또는, 보다 일반적으로, 에 지 클라우드는 도 1의 에지 네트워크를 구현할 수 있다. 에지 클라우드 내에서의 및 다양한 계 층들 사이에서의 네트워크 통신은, 묘사되지 않은 연결 아키텍처들 및 기술들을 통하는 것을 포함하여, 임의의 수의 유선 또는 무선 매체들을 통해 발생할 수 있다. 일부 예들에서, 코어 네트워크는 도 1의 코어 네트 워크를 구현할 수 있다. 네트워크 통신 거리 및 프로세싱 시간 제약들로부터 결과되는, 지연시간의 예들은 엔드포인트 계층에 있을 때의 밀리초(ms) 미만, 에지 디바이스들 계층에서의 5 ms 미만으로부터 네트워크 액세스 계층에 있는 노드들과 통신할 때의 10 내지 40 ms까지의 범위에 있을 수 있다. 에지 클라우드를 벗어나서 코어 네트워 크 계층 및 클라우드 데이터 센터 계층이 있으며, 각각은 증가하는 지연시간(예를 들면, 코어 네트워 크 계층에서 50 내지 60 ms, 클라우드 데이터 센터 계층에서 100 ms 이상)을 갖는다. 그 결과, 적어 도 50 내지 100 ms 또는 그 이상의 지연시간들을 갖는, 코어 네트워크 데이터 센터 또는 클라우드 데이터 센터에서의 동작들은 사용 사례들의 많은 시간에 민감한 기능들을 수행할 수 없을 것이다. 이러한지연시간 값들 각각은 예시 및 대비를 위해 제공되며; 다른 액세스 네트워크 매체들 및 기술들의 사용이 지연시 간들을 더욱 감소시킬 수 있다는 것이 이해될 것이다. 일부 예들에서, 클라우드 데이터 센터 계층은 도 1 의 클라우드 네트워크를 구현할 수 있다. 일부 예들에서, 네트워크의 각자의 부분들은 네트워크 소스 및 목적지를 기준으로, \"클로즈 에지\", \"로컬 에지\", \"니어 에지\", \"중간 에지\" 또는 \"파 에지\" 계층들로서 분류될 수 있다. 예를 들어, 코어 네트워크 데이터 센터 또는 클라우드 데이터 센터의 관점에서, 중앙국 또 는 콘텐츠 데이터 네트워크는 \"니어 에지\" 계층 내에(클라우드에 \"가까이(near)\", 사용 사례들의 디바이스 들 및 엔드포인트들과 통신할 때 높은 지연시간 값들을 가짐) 위치하는 것으로 간주될 수 있는 반면, 액세스 포 인트, 기지국, 온프레미스서버, 또는 네트워크 게이트웨이는 \"파 에지\" 계층 내에(클라우드로부터 \"멀리(far)\", 사용 사례들의 디바이스들 및 엔드포인트들과 통신할 때 낮은 지연시간 값들을 가짐) 위치하는 것으로 간 주될 수 있다. \"클로즈\", \"로컬\", \"니어\", \"중간\" 또는 \"파\" 에지를 구성하는 것으로서의 특정 네트워크 계층 의 다른 분류들이, 네트워크 계층들(300 내지 340) 중 임의의 것에 있는 소스로부터 측정되는 바와 같은, 지연 시간, 거리, 네트워크 홉 수, 또는 다른 측정 가능한 특성들에 기초할 수 있다. 다양한 사용 사례들은, 에지 클라우드를 활용하는 다수의 서비스들로 인해, 들어오는 스트림들로부터 사용 압박을 받는 자원들에 액세스할 수 있다. 짧은 지연시간으로 결과들을 달성하기 위해, 에지 클라우드 내 에서 실행되는 서비스들은 (a) 우선순위(처리량 또는 지연시간) 및 서비스 품질(QoS)(예를 들면, 자율 주행 자 동차에 대한 트래픽은 응답 시간 요구사항의 측면에서 온도 센서보다 높은 우선순위를 가질 수 있는 것; 또는 애플리케이션에 따라, 컴퓨트/가속기, 메모리, 저장소, 또는 네트워크 자원에서 성능 민감도/병목 현상이 존재 할 수 있음); (b) 신뢰성 및 탄력성(예를 들면, 일부 입력 스트림들은 조치될 필요가 있고 트래픽은 미션 크리 티컬한(mission-critical) 신뢰성으로 라우팅될 필요가 있는 반면, 애플리케이션에 따라, 일부 다른 입력 스트 림들은 간헐적인 오류를 허용할 수 있음); 및 (c) 물리적 제약들(예를 들면, 전력, 냉각 및 폼 팩터)의 측면에 서 다양한 요구사항들의 균형을 유지한다. 이러한 사용 사례들에 대한 엔드 투 엔드 서비스 뷰는 서비스 흐름의 개념을 포함하며 트랜잭션과 연관된다. 트랜잭션은 서비스를 소비하는 엔티티에 대한 전체 서비스 요구사항은 물론, 자원들, 워크로드들, 워크플로들, 및 비즈니스 기능 및 비즈니스 레벨 요구사항들에 대한 연관된 서비스들을 상세히 설명한다. 설명되는 \"조건 (terms)\"에 따라 실행되는 서비스들은 서비스의 수명 주기 동안 트랜잭션에 대한 실시간 및 런타임 계약 준수를 보장하는 방식으로 각각의 계층에서 관리될 수 있다. 트랜잭션에서의 한 컴포넌트가 그의 합의된 SLA(서비스 수준 협약)를 지키지 못하고 있을 때, 시스템 전체(트랜잭션에서의 컴포넌트들)는 SLA 위반의 영향을 이해 하고, 전체 트랜잭션 SLA를 재개하기 위해 시스템에서의 다른 컴포넌트들을 보강하며, 시정하기 위한 조치들을 구현할 수 있는 능력을 제공할 수 있다. 따라서, 이러한 변형들 및 서비스 특징들을 염두에 두면, 에지 클라우드 내에서의 에지 컴퓨팅은 실시간 또는 거의 실시간으로 사용 사례들의 다수의 애플리케이션들(예를 들면, 객체 추적, 비디오 감시, 커넥티 드 카 등)에 서비스를 제공하여 그에 대응할 수 있는 능력을 제공하고, 이러한 다수의 애플리케이션들에 대한 초저지연 요구사항을 충족시킬 수 있다. 이러한 장점들은 지연시간 또는 다른 제한들로 인해 종래의 클라우드 컴퓨팅을 활용할 수 없는 완전히 새로운 부류의 애플리케이션들(예를 들면, 가상 네트워크 기능들(VNF들), FaaS, EaaS(Edge as a Service), 표준 프로세스들 등)을 가능하게 한다. 그렇지만, 에지 컴퓨팅의 장점들에는 다음과 같은 위험 부담들이 있다. 에지에 위치하는 디바이스들은 종종 자 원 제약되며, 따라서 에지 자원들의 사용에 대한 압박이 있다. 전형적으로, 이것은 다수의 사용자들(테넌트들) 및 디바이스들에 의해 사용될 메모리 및 저장 자원들의 풀링을 통해 해결된다. 에지는 전력 및 냉각 제약될 수 있으며 따라서 가장 많은 전력을 소비하는 애플리케이션들에 의한 전력 사용량이 고려될 필요가 있다. 이러한 풀링된 메모리 자원들에는 고유한 전력-성능 트레이드오프가 있을 수 있는데, 그 이유는 이들 중 다수가 더 많 은 전력이 더 큰 메모리 대역폭을 필요로 하는 새로운 메모리 기술들을 사용할 가능성이 많기 때문이다. 마찬 가지로, 에지 위치들은 무인일 수 있고 심지어 허가된 액세스를 필요로 할 수 있기 때문에(예를 들면, 제3자 위 치에 수용될 때), 하드웨어의 개선된 보안 및 신뢰점(root of trust)의 신뢰할 수 있는 기능들이 또한 필요하다. 특히 네트워크 사용량이 동적으로 변동하고 다수의 이해관계자들, 사용 사례들, 및 서비스들의 구성 이 변하기 때문에, 서비스들 및 애플리케이션들이 많은 사용자들에 의해 요청되는 멀티 테넌트, 멀티 소유자 또 는 멀티 액세스 설정에서 그러한 문제들이 에지 클라우드에서 확대된다. 보다 일반적인 레벨에서, 에지 컴퓨팅 시스템은 에지 클라우드에서 작동하는 이전에 논의된 계층들(네트워 크 계층들(310 내지 330))에서 임의의 수의 배포들을 포괄하는 것으로 설명될 수 있는데, 이는 클라이언트 및 분산 컴퓨팅 디바이스들로부터 조율을 제공한다. 하나 이상의 에지 게이트웨이 노드, 하나 이상의 에지 집선노드(edge aggregation node), 및 하나 이상의 코어 데이터 센터가 통신 서비스 제공업체(\"telco \" 또는 \"TSP\"), 사물 인터넷 서비스 제공업체, 클라우드 서비스 제공업체(CSP), 엔터프라이즈 엔티티, 또는 임의의 다 른 다수의 엔티티들에 의한 또는 이들을 위한 에지 컴퓨팅 시스템의 구현을 제공하기 위해 네트워크의 계층들에 걸쳐 분산될 수 있다. 에지 컴퓨팅 시스템의 다양한 구현들 및 구성들은, 서비스 목표들을 충족시키도록 오케 스트레이션될 때와 같이, 동적으로 제공될 수 있다. 본 명세서에서 제공되는 예들에 따르면, 클라이언트 컴퓨트 노드는 데이터의 생성자 또는 소비자로서 통신할 수 있는 임의의 유형의 엔드포인트 컴포넌트, 디바이스, 어플라이언스, 또는 다른 것으로서 구체화될 수 있다. 게 다가, 에지 컴퓨팅 시스템에서 사용되는 바와 같은 \"노드\" 또는 \"디바이스\"라는 라벨은 그러한 노드 또는 디바 이스가 클라이언트 또는 에이전트/미니언(minion)/팔로워(follower) 역할로 작동한다는 것을 반드시 의미하지는 않으며; 오히려, 에지 컴퓨팅 시스템에서의 노드들 또는 디바이스들 중 임의의 것은 에지 클라우드를 용이 하게 하거나 사용하기 위해 이산적인 또는 연결된 하드웨어 또는 소프트웨어 구성들을 포함하는 개별 엔티티들, 노드들, 또는 서브시스템들을 지칭한다. 그와 같이, 에지 클라우드는 네트워크 계층들(310 내지 330) 사이의 에지 게이트웨이 노드들, 에지 집선 노드들, 또는 다른 에지 컴퓨트 노드들에 의해 그리고 그 내에서 작동되는 네트워크 컴포넌트들 및 기능적 특징 들로 형성된다. 따라서 에지 클라우드는, 본 명세서에서 논의되는, RAN 가능 엔드포인트 디바이스들(예를 들면, 모바일 컴퓨팅 디바이스들, IoT 디바이스들, 스마트 디바이스들 등)에 근접하게 위치하는 에지 컴퓨팅 및 /또는 저장 자원들을 제공하는 임의의 유형의 네트워크로서 구체화될 수 있다. 환언하면, 에지 클라우드 는, 저장 및/또는 컴퓨트 능력들을 또한 제공하면서, 모바일 통신사업자 네트워크들(예를 들면, GSM(Global System for Mobile Communications) 네트워크들, LTE(Long-Term Evolution) 네트워크들, 5G/6G 네트워크들 등)을 포함한, 서비스 제공업체 코어 네트워크들로의 진입점(ingress point)으로서 역할하는 엔드포인트 디바이 스들 및 전통적인 네트워크 액세스 포인트들을 연결시키는 \"에지\"로서 생각될 수 있다. 다른 유형들 및 형태들 의 네트워크 액세스(예를 들면, 광학 네트워크들을 포함한 Wi-Fi, 장거리 무선, 유선 네트워크들)가 또한 그러 한 3GPP 통신사업자 네트워크들 대신에 또는 그러한 3GPP 통신사업자 네트워크들과 결합하여 활용될 수 있다. 에지 클라우드의 네트워크 컴포넌트들은 서버들, 멀티 테넌트 서버들, 어플라이언스 컴퓨팅 디바이스들, 및/또는 임의의 다른 유형의 컴퓨팅 디바이스들일 수 있다. 예를 들어, 에지 클라우드는 하우징, 섀시, 케이스 또는 쉘을 포함한 자체 완비형(self-contained) 전자 디바이스인 어플라이언스 컴퓨팅 디바이스를 포함 할 수 있다. 일부 상황들에서, 하우징은 인간에 의해 운반되고/되거나 배송될 수 있도록 휴대성을 위한 치수로 되어 있을 수 있다. 예시적인 하우징들은 어플라이언스의 내용물들을 부분적으로 또는 완전히 보호하는 하나 이상의 외부 표면을 형성하는 재료들을 포함할 수 있으며, 여기서 보호는 기후 보호(weather protection), 위험 환경 보호(예를 들면, EMI, 진동, 극한 온도), 및/또는 잠수 가능(enable submergibility)을 포함할 수 있다. 예시적인 하우징들은, AC 전력 입력들, DC 전력 입력들, AC/DC 또는 DC/AC 컨버터(들), 전력 조정기들, 변압기 들, 충전 회로부, 배터리들, 유선 입력들 및/또는 무선 전력 입력들과 같은, 고정식 및/또는 휴대용 구현들에 전력을 제공하기 위한 전력 회로부를 포함할 수 있다. 예시적인 하우징들 및/또는 그의 표면들은 건물들, 통신 구조물들(예를 들면, 기둥, 안테나 구조물들 등) 및/또는 랙들(예를 들면, 서버 랙들, 블레이드 마운트들 등)과 같은 구조물들에 대한 부착을 가능하게 하기 위해 장착 하드웨어를 포함하거나 이에 연결될 수 있다. 예시적인 하우징들 및/또는 그의 표면들은 하나 이상의 센서(예를 들면, 온도 센서, 진동 센서, 광 센서, 음향 센서, 용 량성 센서, 근접 센서 등)를 지지할 수 있다. 하나 이상의 그러한 센서는 어플라이언스의 표면에 포함되거나, 어플라이언스의 표면에 의해 운반되거나, 어플라이언스의 표면에 다른 방식으로 내장되고/되거나 어플라이언스 의 표면에 장착될 수 있다. 예시적인 하우징들 및/또는 그의 표면들은, 추진 하드웨어(예를 들면, 바퀴들, 프 로펠러들 등) 및/또는 관절 하드웨어(예를 들면, 로봇 암들, 피벗 가능한 부속물들 등)와 같은, 기계적 연결을 지원할 수 있다. 일부 상황들에서, 센서들은 사용자 인터페이스 하드웨어(예를 들면, 버튼들, 스위치들, 다이 얼들, 슬라이더들 등)와 같은 임의의 유형의 입력 디바이스들을 포함할 수 있다. 일부 상황들에서, 예시적인 하우징들은 그 안에 포함되는, 그에 의해 운반되는, 그 안에 내장되는 및/또는 그에 부착되는 출력 디바이스들 을 포함한다. 출력 디바이스들은 디스플레이들, 터치스크린들, 조명들, 발광 다이오드들(LED들), 스피커들, I/O 포트들(예를 들면, USB(universal serial bus)) 등을 포함할 수 있다. 일부 상황들에서, 에지 디바이스들 은 특정 목적(예를 들면, 교통 신호등)을 위해 네트워크에서 제시되는 디바이스들이지만, 다른 목적들을 위해 활용될 수 있는 프로세싱 및/또는 다른 능력들을 가질 수 있다. 그러한 에지 디바이스들은 다른 네트워크화된 디바이스들과 독립적일 수 있으며, 그의 주된 목적에 적합한 폼 팩터를 갖는 하우징을 제공받을 수 있지만; 그 의 주된 작업들을 방해하지 않는 다른 컴퓨트 작업들에 이용 가능할 수 있다. 에지 디바이스들은 IoT 디바이스 들을 포함한다. 어플라이언스 컴퓨팅 디바이스는 디바이스 온도, 진동, 자원 활용, 업데이트, 전력 문제, 물리적 및 네트워크 보안 등과 같은 로컬 문제들을 관리하기 위한 하드웨어 및 소프트웨어 컴포넌트들을 포함할 수 있다. 적어도 도 68, 도 69, 및/또는 도 70의 예시적인 프로세서 시스템들은 어플라이언스 컴퓨팅 디바이스를 구현하기 위한 예시적인 하드웨어를 예시한다. 에지 클라우드는 하나 이상의 서버 및/또는 하나 이상의 멀티 테넌트 서버를 또한 포함할 수 있다. 그러한 서버는 운영 체제 및 가상 컴퓨팅 환경을 포함할 수 있다. 가상 컴퓨팅 환경은 하나 이상의 가상 머신, 하나 이상의 컨테이너 등을 관리(스포닝, 배포, 파괴 등)하는 하이 퍼바이저를 포함할 수 있다. 그러한 가상 컴퓨팅 환경들은 하나 이상의 애플리케이션 및/또는 다른 소프트웨어, 코드 또는 스크립트가 하나 이상의 다른 애플리케이션, 소프트웨어, 코드 또는 스크립트와 격리되 어 있으면서 실행될 수 있는 실행 환경을 제공한다. 도 4에서, (모바일 디바이스들, 컴퓨터들, 자율 주행 차량들, 기업 컴퓨팅 장비, 산업 프로세싱 장비의 형태의) 다양한 클라이언트 엔드포인트들은 엔드포인트 네트워크 집합체의 유형에 특정적인 요청들 및 응답들을 교 환한다. 예를 들어, 클라이언트 엔드포인트들은 온프레미스 네트워크 시스템을 통해 요청들 및 응답 들을 교환하는 것에 의해 유선 광대역 네트워크를 통해 네트워크 액세스를 획득할 수 있다. 모바일 컴퓨 팅 디바이스들과 같은 일부 클라이언트 엔드포인트들은 액세스 포인트(예를 들면, 셀룰러 네트워크 타 워)를 통해 요청들 및 응답들을 교환하는 것에 의해 무선 광대역 네트워크를 통해 네트워크 액세스를 획득할 수 있다. 자율 주행 차량들과 같은 일부 클라이언트 엔드포인트들은 거리에 위치한 네트워크 시스 템을 통해 무선 차량 네트워크를 거쳐 요청들 및 응답들을 위한 네트워크 액세스를 획득할 수 있다. 그렇지만, 네트워크 액세스 유형에 관계없이, TSP는 트래픽 및 요청들을 집합시키기 위해 도 2의 에지 클라우드 내에 집선 포인트들(442, 444)을 배포할 수 있다. 따라서, 에지 클라우드 내에서, TSP는 요청된 콘 텐츠를 제공하기 위해, 예컨대, 에지 집선 노드들에, 다양한 컴퓨트 및 저장 자원들을 배포할 수 있다. 에지 클라우드의 에지 집선 노드들 및 다른 시스템들은, 웹사이트들, 애플리케이션들, 데이터베이스 서버들 등에 대한 클라우드/데이터 센터로부터의 더 높은 지연시간의 요청들을 이행하기 위해 백홀 네트워크 를 사용하는, 클라우드 또는 데이터 센터(DC)에 연결된다. 단일 서버 프레임워크 상에 배포되는 것 들을 포함한, 에지 집선 노드들 및 집선 포인트들(442, 444)의 추가적인 또는 통합된 인스턴스들은 또한 TSP 인프라스트럭처의 에지 클라우드 또는 다른 구역들 내에 존재할 수 있다. 도 5는 예시적인 비지상 네트워크 및 예시적인 지상 네트워크를 포함하는 제2 예시적인 멀티코어 컴 퓨팅 환경의 예시이다. 이 예에서, 비지상 네트워크는 예시적인 사용자 장비(UE), 예시적인 코 어 액세스 및 이동성 관리 기능(AMF), 예시적인 무선 액세스 네트워크(RAN), 예시적인 사용자 평면 기능(UPF), 예시적인 세션 관리 기능(SMF), 예시적인 목적지 네트워크(DN), 및 예시적인 위성군 궤도 방향을 따라 선회하는 예시적인 위성들을 포함한다. 이 예에서, UE, AMF, RAN, UPF, SMF, DN, 또는 위성들 중 적어도 하나는, 5G 통신 네트워크와 같은, 네트 워크를 구현한다. 이 예에서, UE, AMF, RAN, UPF, SMF, DN, 및/또는 위성들 은 통신 링크들 또는 노드들(예를 들면, 노드 1(N1), 노드 2(N2), 노드 3(N3), 노드 4(N4), 노드 5(N5), 노드 6(N6) 등)을 통해 서로 통신하고 있다. 도 5의 예시된 예에서, 지상 네트워크는 제1 예시적인 멀티코어 컴퓨팅 시스템 및 제2 예시적인 멀티 코어 컴퓨팅 시스템을 포함한다. 이 예에서, 제1 멀티코어 컴퓨팅 시스템은 노드 3(N3)으로 나타내 어진 유선 또는 무선 연결을 통해 제2 멀티코어 컴퓨팅 시스템과 통신한다. 제1 멀티코어 컴퓨팅 시스템은 예시적인 노드들, 예시적인 5G RAN 서버, 및 제1 예시적인 5G CPU를 포함한다. 이 예에서, 노드들은 위성 노드 B(sNB) 및 차세대 노드 B(gNB)를 포함하고/하거나 다른 방식으로 구현한다. 노드들은 예시적인 무선 네트워크(예를 들면, 이동 전화 네트워크)에 연결 되는 하드웨어로 구현될 수 있다. 이 예에서, 무선 네트워크는, 예시적인 5G 인터넷 가능 스마트폰 과 같은, 모바일 핸드셋들과 통신한다. 예를 들어, 노드들은 모바일 핸드셋들과 통신하는 데 사용되는 무 선 주파수 송신기(들) 및 수신기(들)를 포함하고/하거나 다른 방식으로 구현할 수 있다. 이 예에서, 위성들 중 하나(다수)는 무선 네트워크를 통해 노드들의 sNB 노드와 통신할 수 있다. 추가적으로 또 는 대안적으로, 노드들은 도 1의 디바이스들(108, 110, 112, 114, 116) 중 하나(다수)와 통신할 수 있다. 일부 예들에서, 무선 네트워크는 도 1의 5G 디바이스 환경을 구현할 수 있다. 이 예에서, 5G RAN 서버는 도 1의 DU들 중 하나, 도 1의 CU들 중 하나 등을 구현할 수 있다. 이 예에서, 제1 5G CPU는 멀티코어 네트워크 최적화된 CPU이다. 예를 들어, 제1 5G CPU는 관심 네트 워크 워크로드들을 실행하기 위해 코어별로 구성될 수 있는 복수의 코어들을 포함한다. 일부 예들에서, 제1 5G CPU는 감소된 지연시간 및 증가된 처리량으로 관심 네트워크 워크로드들을 실행하기 위해 언코어별로 구성될 수 있는 복수의 언코어들(예를 들면, 언코어 로직 회로부, 언코어 로직 등)을 포함한다. 이 예에서, 제1 5G CPU는 제1 예시적인 코어 세트, 제2 예시적인 코어 세트, 및 제3 예시적인 코어 세트를 포 함한다. 일부 예들에서, 코어들(536, 538, 540) 중 하나 이상은 대응하는 언코어를 가질 수 있다. 예를 들어, 제1 코어 세트는, 실행될 때, 제1 예시적인 네트워크 기능들 또는 워크로드들을 프로세싱할 수 있는 제1 머신 판독 가능 명령어 세트를 로딩할 수 있다. 일부 그러한 예들에서 제2 코어 세트는, 실행될 때, 제2 예시적인 네트워크 기능들 또는 워크로드들을 프로세싱할 수 있는 제2 머신 판독 가능 명령어 세트를 로딩할 수 있다. 일부 그러한 예들에서 제3 코어 세트는, 실행될 때, 제3 예시적인 네트워크 기능들 또는 워크로드들을 프로세싱할 수 있는 제3 머신 판독 가능 명령어 세트를 로딩할 수 있다. 일부 예들에서, 언코어들 중 하나 이상은 실행될 네트워크 워크로드 유형(예를 들면, 지상 네트워크 워크로드 또는 비지상 네트워크 워크로드)에 기초하여 더 높은 또는 더 낮은 작동 주파수에서 작동하도록 구성될 수 있다. 일부 예들에서, 언코어들 중 하나 이상은 실행되고/되거나 다른 방식으로 프로세싱될 네트워크 워크로드 들과 연관된 지연시간 요구사항들, 전력 요구사항들, 및/또는 처리량 요구사항들에 기초하여 더 높은 또는 더 낮은 작동 주파수에서 작동하도록 구성될 수 있다. 이 예에서, 제1 머신 판독 가능 명령어 세트는 256-비트 SSE 명령어들일 수 있다. 예를 들어, 제1 머신 판독 가능 명령어 세트는, 액세스 제어 터널 캡슐화 또는 역캡슐화, 심층 패킷 검사(deep packet inspection, DPI), 서비스 품질(QoS), 사용량 보고 및/또는 빌링, 인터넷 프로토콜(IP) 포워딩 등과 같은, UPF 관련 작업들을 실시 할 수 있다. 일부 예들에서, 제2 머신 판독 가능 명령어 세트는 512-비트 AVX 명령어들일 수 있다. 예를 들어, 제2 머신 판독 가능 명령어 세트는, 스크램블링 또는 디스크램블링, 변조 또는 복조 등과 같은, 신호 프 로세싱 관련 작업들을 실시할 수 있다. 일부 예들에서, 제3 머신 판독 가능 명령어 세트는, 본 명세서에서 AVX-512+5G ISA 명령어들(예를 들면, AVX-512 및 5G ISA 명령어들)이라고 지칭될 수 있는, 512-비트 AVX 명령 어들 및 5G 명령어 세트 아키텍처(ISA) 명령어들을 포함하는 명령어 세트일 수 있다. 예를 들어, AVX-512+5G ISA 명령어들은 AVX-512 명령어들의 확장(예를 들면, 명령어 세트 확장)을 구현할 수 있으며 이 확장은 5G ISA 명령어들이다. 5G-ISA 명령어들에서의 비정규(denormal) FP16 피연산자들은 FP16 숫자들의 전체 동적 범위를 사용하는 것을 용 이하게 하기 위해 최고 속도로 처리된다. FP32 및 FP64 숫자들과 달리, AVX512-FP16 ISA에서의 FP16 피연산자 들은 MXCSR 설정에 기초하여 조건부로 0으로 플러시되지 않거나 0으로서 취급되지 않는다. FP16 입력들을 사용 하는 레거시 명령어들을 제외하고, 명령어가 FP16 값을 소스 피연산자로서 사용하는 경우, 비정규 숫자들은 무 조건적으로 프로세싱된다. 유사하게, FP16 출력들을 생성하는 레거시 명령어들을 제외하고, 명령어가 FP16 출 력을 생성하는 경우, 비정규 숫자들은 무조건적으로 생성된다. CPUID 비트들과 연관된 레거시 명령어들 F16C 및 AVX512F는 그의 입력들 및 출력들에 대해 제각기 MXCSR.DAZ 및 MXCSR.FTZ를 계속 사용한다. FP32 또는 FP64 소스들을 사용하는 변환 명령어들은 그의 입력들에 대한 비정규 처리를 제어하기 위해 MXCSR.DAZ를 계속 사용한다. FP32 또는 FP64 출력들을 생성하는 변환 명령어들은 그의 출력들에 대한 비정규 처리를 제어하기 위 해 MXCSR.FTZ를 계속 사용한다. 유리하게도, 5G-ISA 명령어들은 증가된 주파수들 또는 감소된 전력에서 멀티코어 프로세서의 코어(들)의 더 높 은, 향상된, 및/또는 다른 방식으로 증가된 성능을 실시할 수 있으며, 멀티코어 프로세서의 성능을 개선시키고/ 시키거나 다른 방식으로 최적화하기 위해 이 둘 사이에서 트레이드오프할 수 있다. 예를 들어, 제3 머신 판독 가능 명령어 세트는, 빔포밍과 같은, 신호 프로세싱 작업들을 실시할 수 있다. 일부 그러한 예들에서, 신호 프 로세싱 작업들은 계층 매핑, 프리코딩, 자원 매핑, 멀티 사용자, 다중 입력, 다중 출력 기술(MU-MIMO) 검출, 복 조 참조 신호(DMRS) 채널 추정, 빔포밍 생성, 사운딩 채널 추정, 자원 디매핑 등을 포함할 수 있다. 도 5의 예시된 예에서, 제2 멀티코어 컴퓨팅 시스템은 예시적인 UPF, 예시적인 5G 코어 서버, 및 제2 예시적인 5G CPU를 포함한다. 이 예에서, 5G 코어 서버는 도 1의 코어 디바이스들 중 하나를 구현할 수 있다. 이 예에서, 제2 5G CPU는 제1 네트워크 기능들 또는 워크로드들 중 하나(다 수)를 프로세싱하기 위해 제1 머신 판독 가능 명령어들을 실행하고 있는 예시적인 코어들을 포함한다. 이 예에서 모든 코어들이 제1 머신 판독 가능 명령어들을 실행하고 있지만, 대안적으로 코어들 중 하나 이상이 제2 또는 제3 머신 판독 가능 명령어들을 실행할 수 있다. 이 예에서, 제1 멀티코어 CPU 및/또는 제2 멀티코어 CPU의 코어들은 네트워크 워크로드들(542, 544, 546) 중 상이한 네트워크 워크로드(들)을 실 시하기 위해 상이한 머신 판독 가능 명령어들을 실행할 수 있다. 예를 들어, 처음에, 제1 코어 세트의 제 1 코어는 제1 네트워크 워크로드들 중 하나를 실행하기 위해 제1 머신 판독 가능 명령어들 중 제1 명령어 를 로딩할 수 있다. 일부 그러한 예들에서, 제1 네트워크 워크로드들 중 하나를 완료한 것에 응답하여,제1 코어는 제2 네트워크 워크로드들 중 하나를 실행하기 위해 제2 머신 판독 가능 명령어들 중 제2 명령 어를 로딩할 수 있다. 유리하게도, 제1 5G CPU 및/또는 제2 5G CPU의 코어들 중 하나(다수)는 실행을 위해 로딩되는 머신 판독 가능 명령어에 기초하여 네트워크 워크로드들(542, 544, 546) 중 하나(다수)를 프로세싱하도록 동적으로 구성될 수 있다. 유리하게도, 제1 5G CPU 및/또는 제2 5G CPU의 코어들 중 하나(다수)에 대응하는 언코어들 중 하나(다수)는 실행을 위해 로딩되는 머신 판독 가능 명령어, 네트워크 워크로드의 유형, 네트워크 워크로드와 연관된 요구사항(들)(예를 들면, 지연시간 요구사항들, 전력 요구사항들, 처리량 요구사항들 등) 등, 및/또는 이들의 조합에 기초하여 네트워크 워크로드들(542, 544, 546) 중 하나(다수)를 프로세싱하도록 동 적으로 구성될 수 있다. 제3 예시적인 5G CPU가 도 5에 추가로 묘사되어 있다. 이 예에서, 제3 5G CPU는 네트워크 최적화된 CPU가 아닐 수 있고 이에 의해 코어별로 및/또는 언코어별로 동적으로 구성 가능 하지 않을 수 있다. 도 6은 제3 예시적인 멀티코어 컴퓨팅 시스템의 예시적인 구현의 블록 다이어그램이다. 예를 들어, 제3 멀티코어 컴퓨팅 시스템은 도 1의 DU들, 도 1의 CU들, 도 1의 코어 서버들, 도 5의 제1 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 및/또는 도 5의 제2 멀티코어 컴퓨팅 시스템 또는 그의 부분(들)을 구현할 수 있다. 이 예에서, 제3 멀티코어 컴퓨팅 시스템은 예시적인 네트워크 인터페이스 카드(NIC) 및/또는 예시적 인 필드 프로그래머블 게이트 어레이(FPGA)를 포함한다. 이 예에서, NIC 및/또는 FPGA는 예시 적인 가속 자원을 구현한다. 추가적으로 또는 대안적으로, 예시적인 멀티코어 CPU는 가속 자원(60 6)을 구현할 수 있다. 이 예에서, 제3 멀티코어 컴퓨팅 시스템은 멀티코어 CPU 및 예시적인 VNF들 을 구현하는 예시적인 서버를 포함한다. 이 예에서, NIC 및/또는 FPGA는 제1 예시적인 인 터페이스(예를 들면, 100 기가비트(100G) 인터페이스)에서 워크로드(예를 들면, 컴퓨팅 워크로드, 네트워 크 워크로드 등)를 획득하고, 워크로드를 프로세싱한 결과를 제2 예시적인 인터페이스에서 출력한다. 일 부 예들에서, 제1 인터페이스는 제2 인터페이스와 동일할 수 있다. 이 예에서, 서버 및/또는 멀티코어 CPU는 5G UPF 아키텍처를 구현한다. 예를 들어, 멀티코어 CPU, 서버, 및/또는, 보다 일반적으로, 제3 멀티코어 컴퓨팅 시스템은 도 5의 UPF 및/또는 UPF를 구현할 수 있다. 도 7은 제4 예시적인 멀티코어 컴퓨팅 시스템의 예시적인 구현의 블록 다이어그램이다. 이 예에서, 제4 멀티코어 컴퓨팅 시스템은 도 6의 제3 멀티코어 컴퓨팅 시스템을 구현한다. 일부 예들에서, 제4 멀 티코어 컴퓨팅 시스템은 도 1의 DU들, 도 1의 CU들, 도 1의 코어 서버들, 도 5의 제1 멀 티코어 컴퓨팅 시스템 또는 그의 부분(들), 및/또는 도 5의 제2 멀티코어 컴퓨팅 시스템 또는 그의 부분(들)을 구현할 수 있다. 이 예에서, 도 6의 NIC 및/또는 FPGA는 터널 엔드 포인트, IP 보안 (IPsec) 및 가상 스위치(vSwitch) 작업들과 같은 작업들을 실행할 수 있다. 이 예에서, 도 6의 가속 자원(60 6)은 패킷 재조립(예를 들면, 데이터 패킷 재조립), 로드 분산, 및 패킷 재정렬과 같은 작업들을 실행할 수 있 다. 이 예에서, 멀티코어 CPU는, 액세스 제어, 터널 캡슐화 또는 역캡슐화, DPI, QoS, 사용량 보고 및/또 는 빌링, 및 IP 포워딩 작업들과 같은, 도 6의 VNF들을 구현하기 위한 작업들을 실행할 수 있다. 일부 예 들에서, 멀티코어 CPU의 제1 코어는 제1 적용 비율(및 제1 작동 주파수)에 기초하여 VNF들을 실행할 수 있고, 멀티코어 CPU의 제2 코어는 제2 적용 비율(및 제2 작동 주파수)에 기초하여 VNF들을 실행할 수 있는 등이다. 유리하게도, 멀티코어 CPU는 성능을 개선시키기 위해 로딩된 명령어에 기초하여 코어별로 구성될 수 있다. 예를 들어, 액세스 제어 명령어(예를 들면, 실행될 때, 액세스 제어 작업 또는 기능을 실시하는 머신 판독 가능 명령어)를 로딩하는 것에 응답하여, 멀티코어 CPU 중 제1 CPU의 제1 코어는 제1 적용 비율을 가정하여 구 성될 수 있고 이에 의해 제1 작동 주파수를 사용하여 액세스 제어 명령어를 실행하도록 구성될 수 있다. 일부 예들에서, 제1 코어에 대응하는 제1 언코어가 로딩된 명령어에 기초하여 처리량을 개선시키고 지연시간을 감소 시키도록 구성될 수 있다. 예를 들어, 제1 코어에 의해 액세스 제어 명령어를 로딩하는 것에 응답하여, 제1 언 코어는 제1 적용 비율(또는 상이한 적용 비율)을 가정하여 구성될 수 있고 이에 의해 액세스 제어 명령어의 실 행을 용이하게 하기 위해 제2 작동 주파수를 사용하여 작동하도록 구성될 수 있다. 도 8은 네트워크 워크로드들의 프로세싱을 개선시키고/시키거나 다른 방식으로 최적화하기 위해 코어별로 및/또 는 언코어별로 하드웨어 구성을 구현하는 데 사용될 수 있는 프로세서의 예시적인 구현의 블록 다이어그램 이다. 일부 예들에서, 프로세서는, 워크로드 최적화된 프로세서(예를 들면, 네트워크 워크로드 최적화된프로세서)와 같은, 네트워크 최적화된 프로세서를 구현한다. 예를 들어, 프로세서는 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 및/또는 도 6 및/또는 도 7의 멀티코어 CPU를 구현할 수 있다. 도 8에 예시된 바와 같이, 프로세서는 복수의 예시적인 코어들(810A 내지 810N)을 포함하는 멀티코어 프로 세서일 수 있다. 예로서, 프로세서는 32개의 코어들(810A 내지 810N)을 포함할 수 있다. 대안적으로, 프 로세서는 임의의 다른 수의 코어들(810A 내지 810N)을 포함할 수 있다. 이 예에서, 코어들(810A 내지 810N)은, 예시적인 실행 유닛, 코어들(810A 내지 810N) 중 하나(다수)에 전력을 전달하기 위한 하나 이상 의 예시적인 전력 게이트, 및 예시적인 캐시 메모리와 같은, 코어들(810A 내지 810N)의 실행을 용이 하게 하기 위한 회로부를 구현한다. 일부 예들에서, 실행 유닛은 실행 회로부 또는 로직 회로부를 구현한 다. 이 예에서, 캐시 메모리는, 레벨 2(L2) 캐시라고도 지칭될 수 있는, 중간 레벨 캐시(MLC)이다. 일부 예들에서, 코어들(810A 내지 810N) 중 하나 이상은 독립적인 전력 도메인일 수 있고, 워크로드에 기초하여 활성 상태들 및/또는 최대 성능 상태들에 들어가고 나오도록 구성될 수 있다. 이 예에서, 코어들(810A 내지 810N)은 코어들(810A 내지 810N) 중 하나(다수)와 각자의 예시적인 마지막 레벨 캐시(LLC) 사이의 캐시 일관성을 유지하는 각자의 캐싱/홈 에이전트(CHA)에 결합된다. 이 예에서, CHA는 예시적인 CMS(converged/common mesh stop)를 구현한다. 이 예에서, CMS는 코어들(810A 내지 810N)과 예시적인 I/O 버퍼 사이의 인터페이스를 구현한다. 이 예에서, I/O 버퍼는 CMS와, 메시라고도 지칭될 수 있는, 예시적인 상호연결부 사이의 인터페이스를 구현한다. 예를 들어, 상호연결부는 시스템 전체 상호연결 그리드를 형성하는 하프 링들의 다차원 어레이를 포함하는 버스, 패브릭(예를 들면, 메시 패브릭) 등으로서 구현될 수 있다. 일부 예들에서, LLC, CHA, CMS, 또는 I/O 버퍼 중 적어도 하나는 CLM 또는 CLM 로직을 구현할 수 있다. 예를 들어, 코어 들(810A 내지 810N) 각각은 CLM의 대응하는 인스턴스를 가질 수 있다. 이 예에서, 상호연결부는 코어들(810A 내지 810N)과 대응하는 하드웨어 및 예시적인 언코어 로직 사 이의 통신을 용이하게 한다. 이 예에서, 언코어 로직은 CMS, 예시적인 메시 인터페이스, 예시 적인 입출력(I/O) 회로부, 및/또는 예시적인 DDR 메모리와 같은 예시적인 메모리의 인스턴스들을 포 함한다. 예를 들어, 코어들(810A 내지 810N) 각각은 언코어 로직의 부분들의 대응하는 인스턴스들을 가질 수 있다. 일부 그러한 예들에서, 제1 코어(810A)는, CMS의 제1 인스턴스, 메시 인터페이스의 제1 인 스턴스, 및 I/O의 제1 인스턴스와 같은, 언코어 로직의 대응하는 부분을 가질 수 있다. 언코어 로직 은, 예시적인 성능 모니터링 유닛(PMU) 및, 본 명세서에서 설명되는 바와 같이 전력 관리 기술들을 수행하기 위한 로직을 포함할 수 있는, 예시적인 전력 제어 유닛(PCU)과 같은, 다양한 하드웨어를 또한 포 함할 수 있다. 일부 예들에서, 언코어 로직은 실행 회로부 또는 로직 회로부(예를 들면, 언코어 실행 회 로부, 언코어 실행 로직 회로부 등)를 구현한다. 일부 예들에서, PMU는 전력 모니터링 회로부 또는 로직 회로부를 구현한다. 일부 예들에서, PCU는 전력 제어 회로부 또는 로직 회로부를 구현한다. 도 8의 예시된 예에서, 코어들(810A 내지 810N)은 본 명세서에서 설명되는 바와 같이 네트워크 워크로드들의 실 행을 최적화하기 위해 코어별로 구성될 수 있다. 일부 예들에서, 코어들(810A 내지 810N) 중 하나(다수)는 프 로세싱을 위해 코어들(810A 내지 810N) 상에서 실행되거나 코어들(810A 내지 810N)을 사용하는 운영 체제(OS)에 대한 데이터를 프로세싱한다. 일부 예들에서, 코어들(810A 내지 810N) 중 하나(다수)는 OS 상에서 실행되는 하 나 이상의 애플리케이션(예를 들면, 소프트웨어 애플리케이션)에 대한 데이터를 프로세싱하도록 구성된다. 이 예에서, 코어들(810A 내지 810N)은 그러한 프로세싱에 필요한 하드웨어, 회로부, 컴포넌트들 및/또는 로직을 포 함할 수 있다. 추가적으로, 그러한 프로세싱은 코어들(810A 내지 810N) 외에도 하드웨어, 회로부, 컴포넌트들 및/또는 로직을 사용하는 것을 포함할 수 있다. 일부 예들에서, 코어들(810A 내지 810N) 중 하나 이상은 각각 코어 식별자(ID), 프로세서 펌웨어(예를 들면, 마 이크로코드), 공유 상태, 및/또는 전용 상태를 갖는다. 예를 들어, 코어들(810A 내지 810N) 각각은 2개 이상의 P-상태(예를 들면, P0 상태, P1n 상태 등)를 포함할 수 있다. 일부 예들에서, 코어들(810A 내지 810N)의 마이 크로코드는 프로세서 상태의 저장/복원 기능들을 수행하는 데 및 수행의 다양한 프로세서 상태들에서 다양한 데 이터 흐름들에 대해 활용된다. 일부 예들에서, 프로세서는 다양한 성능 상태들 또는 레벨들, 소위 P-상태들, 즉 P0 내지 PN에서 작동할 수 있다. 일부 예들에서, P1 성능 상태는 OS에 의해 요청될 수 있는 가장 높은 보장된 성능 상태에 대응할 수 있다. 이 P1 상태 외에도, OS는 보다 높은 성능 상태, 즉 P0 상태를 추가로 요청할 수 있다. 따라서 이 P0 상 태는, 전력 및/또는 열 버짓이 이용 가능할 때, 프로세서 하드웨어가 프로세서 또는 그의 적어도 부분들을보장된 주파수보다 높은 주파수에서 작동하도록 구성할 수 있는 기회주의적 또는 터보 모드 상태일 수 있다. 일부 예들에서, 프로세서는, 제조 동안 프로세서에 퓨징(fuse)되거나 다른 방식으로 기입되는 바와 같이, 특정 프로세서의 최대 피크 주파수를 초과하는, P1 보장된 최대 주파수를 초과하는 다수의 소위 빈 주파수들을 포함할 수 있다. 일부 예들에서, 프로세서는 다양한 전력 상태들 또는 레벨들에서 작동할 수 있다. 전력 상태들과 관련하여, 일반적으로 C-상태들, 즉 C0, C1 내지 Cn 상태들이라고 지칭되는, 상이한 전력 소비 상태들 이 프로세서에 대해 지정될 수 있다. 코어가 활성일 때, 코어는 C0 상태에서 실행되고, 코어가 유휴일 때, 코어는, 코어 비-제로 C-상태(예를 들면, C1 내지 C6 상태들)라고도 하는, 코어 저전력 상태에 놓일 수 있 으며, 각각의 C-상태는 (C6이 C1보다 더 낮은 저전력 상태 등이도록) 더 낮은 전력 소비 레벨에 있다. 일부 예들에서, 코어들(810A 내지 810N) 및 언코어 로직은 동일한 보장된 작동 주파수에서 작동할 수 있고, 이에 의해 동일한 작동 전력(예를 들면, 동일한 작동 전압 또는 가용 전력)으로 작동할 수 있다. 일부 예들에서, 이 보장된 작동 주파수는 가변적일 수 있고, 예컨대, 프로세싱 요구들, P-상태들, 적용 비율들, 및/ 또는 다른 인자들에 따라, 관리(예를 들면, 제어 또는 변경)될 수 있다. 예를 들어, 코어들(810A 내지 810N) 중 하나(다수)는 상이한 전압들 및/또는 클록 주파수들을 수신할 수 있다. 일부 예들에서, 전압은 0 내지 3.6 GHz 범위의 주파수들에서 대략 0 내지 1.2 볼트의 범위에 있을 수 있다. 일부 예들에서, 활성 작동 전압은 1.2 내지 3.6 GHz에서 0.7 내지 1.2 볼트일 수 있다. 대안적으로, 전압 및/또는 클록 주파수들에 대한 임의의 다른 값들이 사용될 수 있다. 유리하게도, 코어들(810A 내지 810N) 또는 그의 부분(들)과 연관된 보장된 작동 주파수, 언코어 로직 또는 그의 부분(들)과 연관된 보장된 작동 주파수, 및/또는 CLM 또는 그의 부분(들)과 연관된 보장된 작동 주파 수는 네트워크 워크로드들의 실행을 개선시키고/시키거나 다른 방식으로 최적화하기 위해 조정될 수 있다. 예 를 들어, 5G 컴퓨팅 작업들을 실시하는 것과 연관된 워크로드들과 같은 I/O 바운드 워크로드들의 경우, CMS, 메시 인터페이스, I/O 및/또는, 보다 일반적으로, 언코어 로직의 보장된 작동 주파수 가 증가될 수 있다. 일부 그러한 예들에서, 코어들(810A 내지 810N) 중 하나(다수)의 각자의 보장된 작동 주파 수들이 감소될 수 있고, 이에 의해 CMS, 메시 인터페이스, I/O 및/또는, 보다 일반적으로, 언코 어 로직이 프로세서의 TDP를 위반하지 않고 소비하기 위한 추가적인 전력을 할당할 수 있다. 추가적 으로 또는 대안적으로, CLM들의 하나 이상의 인스턴스는 상이한 보장된 작동 주파수들에서 작동할 수 있다. 도 8의 예시된 예에서, 프로세서는 프로세서의 성능 파라미터들을 측정하고/하거나 다른 방식으로 결 정하기 위한 PMU를 포함한다. 예를 들어, PMU는 명령어 사이클 수, 캐시 히트 수, 캐시 미스 수, 분 기 미스 수 등과 같은 성능 파라미터들을 결정할 수 있다. 일부 예들에서, PMU는 성능 파라미터들과 연관 된 카운트들을 저장하기 위해 복수의 하드웨어 성능 카운터들을 구현한다. 일부 예들에서, PMU는 프로세 서에 의해 실행되는 워크로드와 연관된 지연시간, 처리량 등의 값들과 같은 워크로드 파라미터들을 결정한 다. 예를 들어, PMU는 워크로드 파라미터들과 연관된 카운트들을 저장하기 위해 하나 이상의 하드웨어 성 능 카운터를 구현할 수 있다. 일부 예들에서, PMU는 성능 파라미터들, 워크로드 파라미터들, 하드웨어 성 능 카운터 값들 등을 원격 측정 데이터로서 외부 시스템(예를 들면, 도 40의 제조업체 엔터프라이즈 시스템 및/또는 고객 엔터프라이즈 시스템)에게 전송할 수 있다. 도 8의 예시된 예에서, 언코어 로직 및/또는, 보다 일반적으로, 프로세서는 다수의 상이한 예시적인 구성들 중 하나에서 작동하도록 프로세서를 제어하고/하거나 다른 방식으로 프로세서에 요청하 기 위한 PCU를 포함한다. 그러한 구성들은 프로세서의 예시적인 메모리에 저장될 수 있다. 이 예에서, 구성들은 프로세서가 주어진 온도 작동점에서 작동할 수 있는 보장된 작동 주파수 또는 코어 수 중 적어도 하나에 관한 정보를 포함할 수 있다. 유리하게도, PCU는 실행될 명령어의 유형 및 이에 의해 프로세싱될 워크로드의 유형에 적어도 부분적으로 기초하여 이러한 구성들 중 하나에서 작동 하도록 프로세서를 동적으로 제어할 수 있다. 도 8의 예시된 예시에서, PCU는 예시적인 스케줄러, 예시적인 전력 버짓 분석기(PB 분석기), 예 시적인 코어 구성기(코어 구성), 및 예시적인 구성(들), 예시적인 SSE 명령어들, 예시적인 AVX- 512 명령어들, 예시적인 5G-ISA 명령어들, 및 예시적인 머신 러닝 모델(들)(ML 모델(들))을 포 함하고/하거나 다른 방식으로 저장하는 예시적인 메모리를 포함한다. 이 예에서, 메모리는 비휘발성 메모리이다. 대안적으로, 메모리는 캐시 메모리, ROM, 또는 임의의 다른 유형의 메모리에 의해 구현될 수 있다. 이 예에서, 스케줄러, 전력 버짓 분석기, 코어 구성기, 및/또는, 보다 일반적으로,PCU는 상호연결부를 통해 코어들(810A 내지 810N)에 결합된다. 도 8의 예시된 예에서, 스케줄러는, 네트워크 워크로드와 같은, 워크로드에 기초하여 명령어들을 실행하기 위한 코어들(810A 내지 810N) 중 하나(다수)를 식별한다. 32개의 코어들(810A 내지 810N)이 있는 예에서, 스케 줄러는 32개의 코어 중 8개가 애플리케이션(예를 들면, 소프트웨어 애플리케이션, 5G 통신 애플리케이션 등)에 의해 실행될 기능을 실시하기 위한 명령어들을 실행하는 데 사용되어야 한다고 결정할 수 있다. 일부 그 러한 예들에서, 스케줄러는 8개의 식별된 코어가 SSE 명령어들 중 하나(다수), AVX-512 명령어들 중 하나(다수), 및/또는 5G-ISA 명령어들 중 하나(다수)를 실행해야 한다고 결정할 수 있다. 예를 들어, 스케줄러는 코어들(810A 내지 810N) 중 하나(다수)로 하여금 SSE 명령어들, AVX-512 명령어들 , 또는 5G-ISA 명령어들 중 하나(다수)를 로딩하게 할 수 있다. 일부 예들에서, 스케줄러는 워크로드를 식별하기 위해 머신 러닝 모델(들)을 실행한다. 예를 들어, 스케줄러는 코어들(810A 내지 810N) 중 식별된 코어(코어들), SSE 명령어들, AVX-512 명령어들 , 또는 5G-ISA 명령어들 중 하나(다수) 등을 머신 러닝 모델(들)에 대한 입력들로서 입력할 수 있다. 일부 그러한 예들에서, 머신 러닝 모델(들)은, 도 6의 네트워크 워크로드들(542, 544, 546) 중 하 나(다수)와 같은, 실행될 워크로드의 유형을 출력할 수 있다. 추가적으로 또는 대안적으로, 머신 러닝 모델(들)은, 인공 지능 및/또는 머신 러닝 모델 실행들 및/또는 컴퓨팅들, IoT 서비스 워크로드들, 자율 주행 운전 컴퓨팅들, V2X 워크로드들, 비디오 감시 모니터링, 실시간 데이터 분석, 미디어 스트림들을 전달 및/ 또는 인코딩하는 것, 광고 노출률을 측정하는 것, 미디어 스트림들에서의 객체 검출, 음성 분석, 자산 및/또는 재고 관리, 가상 현실, 및/또는 증강 현실 프로세싱 중 하나(다수)와 같은, 실행될 워크로드의 유형을 출력할 수 있다. 일부 그러한 예들에서, 스케줄러는 머신 러닝 모델(들)의 출력(들)에 기초하여 실행될 네 트워크 워크로드 시퀀스를 결정할 수 있다. 일부 그러한 예들에서, 스케줄러는 결정된 시퀀스에 기초하여 로딩될 대응하는 명령어 시퀀스를 결정할 수 있다. 도 8의 예시된 예에서, 전력 버짓 분석기는 코어들(810A 내지 810N) 중 하나(다수)가 증가된 성능으로(예 를 들면, 더 높은 전압 및/또는 주파수로) 명령어들(838, 840, 842) 중 하나(다수)를 실행할 수 있는지 여부를 결정한다. 일부 예들에서, 코어들(810A 내지 810N)은 명령어를 로딩하는 것에 응답하여 전력 버짓 분석기(83 4)에 질의하고/하거나 다른 방식으로 전력 버짓 분석기와 인터페이싱한다. 예를 들어, 스케줄러는 제1 코어(810A)로 하여금 5G-ISA 명령어들 중 하나 이상을 로딩하게 할 수 있다. 일부 그러한 예들에서, 제1 코어(810A)가 5G-ISA 명령어들 중 하나 이상을 로딩하는 것에 응답하여, 제1 코어(810A)는 증가된 성 능이 달성될 수 있는지 여부를 전력 버짓 분석기에 질의한다. 일부 그러한 예들에서, 전력 버짓 분석기 는 코어들(810A 내지 810N) 중 하나(다수)에 의해 소비되는 전력의 현재 또는 순간 값을 임계값(예를 들면, 전력 버짓 임계값, TDP 임계값 등)과 비교할 수 있다. 일부 예들에서, 전력 버짓 분석기는, 해당 증가가 임계값이 초과되게 하고/하거나 다른 방식으로 충족되지 않게 하지 않는다고 결정하는 것에 응답하여, 하나 이상의 5G-ISA 명령어를 실행할 제1 코어(810A)의 성능 을 증가시키기 위해 이용 가능한 전력 버짓이 있다고 결정한다. 일부 그러한 예들에서, 전력 버짓 분석기(83 4)는 하나 이상의 5G-ISA 명령어들을 증가된 성능으로 실행하기 위해 제1 코어(810A)의 구성(예를 들면, P-상태, 코어 구성 등)을 변경하도록 코어 구성기에게 지시할 수 있다. 일부 예들에서, 전력 버짓 분석기는, 해당 증가가 임계값이 초과되게 하고/하거나 다른 방식으로 충족되게 한다고 결정하는 것에 응답하여, 하나 이상의 5G-ISA 명령어를 실행할 제1 코어(810A)의 성능을 증가시키 기 위해 이용 가능한 전력 버짓이 충분하지 않다고 결정한다. 일부 그러한 예들에서, 전력 버짓 분석기는 하나 이상의 5G-ISA 명령어들을, 기본 또는 베이스라인 전압 및/또는 주파수에서 작동하는 것과 같이, 증 가된 성능 없이 실행하기 위해 제1 코어(810A)의 구성(예를 들면, P-상태, 코어 구성 등)을 변경하도록 코어 구 성기에게 지시할 수 있다. 일부 예들에서, 전력 버짓 분석기는 프로세서의 TDP, 코어들(810A 내지 810N) 중 하나(다수), 및/또 는, 보다 일반적으로, 프로세서의 전력 측정치(예를 들면, 전력 소비 측정치) 등을 머신 러닝 모델 (들)에 대한 입력들로서 사용하여 머신 러닝 모델(들)을 실행한다. 일부 그러한 예들에서, 머신 러 닝 모델(들)은 프로세서의 전력 버짓 고려사항들과 부합하기 위해 개선된 효율성으로 워크로드 애플 리케이션(들)을 최적으로 및/또는 다른 방식으로 실행하도록 코어들(810A 내지 810N)을 구성하는 데 활용될 수 있는 적용 비율을 결정할 수 있다. 예를 들어, 전력 버짓 분석기는, 머신 러닝 모델(들)로부터의 출 력들에 기초하여, 코어들(810A 내지 810N) 중 하나(다수)가 프로세서의 TDP를 위반하지 않으면서 성능 및/또는 처리량을 증가시키고, 지연시간을 감소시키는 등을 하도록 적용 비율을 사용하여 구성될 수 있다고 결정할 수 있다. 일부 예들에서, 전력 버짓 분석기는 언코어 로직의 인스턴스(들)가 증가된 성능으로(예를 들면, 더 높은 전압 및/또는 주파수로) 작동할 수 있는지 여부를 결정한다. 일부 예들에서, 전력 버짓 분석기는 언 코어 로직의 제1 인스턴스, 언코어 로직의 제2 인스턴스 등의 순간 전력 소비, 및/또는 제1 인스턴스, 제2 인스턴스 등의 총 순간 전력 소비를 결정할 수 있다. 일부 그러한 예들에서, 전력 버짓 분석기 는 언코어 로직 중 하나(다수)에 의해 소비되는 전력의 현재 또는 순간 값을 임계값(예를 들면, 전력 버짓 임계값, TDP 임계값, 언코어 전력 임계값 등)과 비교할 수 있다. 일부 예들에서, 전력 버짓 분석기는, 해당 증가가 임계값이 초과되게 하고/하거나 다른 방식으로 충족되지 않게 하지 않는다고 결정하는 것에 응답하여, 더 높은 작동 주파수에서 작동하도록 언코어 로직의 제1 인 스턴스의 성능을 증가시키기 위해 이용 가능한 전력 버짓이 있다고 결정한다. 일부 그러한 예들에서, 전력 버 짓 분석기는 언코어 로직의 제1 인스턴스의 구성(예를 들면, P-상태, 언코어 코어 구성, 보장된 작동 주파수 등)을 변경하도록 코어 구성기에게 지시할 수 있다. 일부 예들에서, 전력 버짓 분석기는 언 코어 로직의 인스턴스(들)가 순간 전력 소비 측정치들에 기초하여 지연시간을 감소시키고/시키거나 처리량 을 개선시키기 위해 더 높은 주파수에서 작동될 수 있다고 결정할 수 있다. 일부 예들에서, 전력 버짓 분석기는, 해당 증가가 임계값이 초과되게 하고/하거나 다른 방식으로 충족되게 한다고 결정하는 것에 응답하여, 더 높은 작동 주파수에서 작동하도록 언코어 로직의 제1 인스턴스의 성능 을 증가시키기 위해 이용 가능한 전력 버짓이 충분하지 않다고 결정한다. 일부 그러한 예들에서, 전력 버짓 분 석기는, 기본 또는 베이스라인 전압 및/또는 주파수에서 작동하는 것과 같이, 증가된 성능 없이 작동하기 위해 언코어 로직의 제1 인스턴스의 구성(예를 들면, P-상태, 언코어 코어 구성, 보장된 작동 주파수 등) 을 변경하도록 코어 구성기에게 지시할 수 있다. 일부 예들에서, 전력 버짓 분석기는 프로세서의 TDP, 언코어 로직 중 하나(다수), 및/또는, 보 다 일반적으로, 프로세서의 전력 측정치(예를 들면, 전력 소비 측정치) 등을 머신 러닝 모델(들)에 대한 입력들로서 사용하여 머신 러닝 모델(들)을 실행한다. 일부 그러한 예들에서, 머신 러닝 모델 (들)은 프로세서의 전력 버짓 고려사항들과 부합하기 위해 개선된 효율성으로 워크로드 애플리케이션 (들)을 최적으로 및/또는 다른 방식으로 실행하도록 언코어 로직을 구성하는 데 활용될 수 있는 적용 비율 을 결정할 수 있다. 예를 들어, 전력 버짓 분석기는, 머신 러닝 모델(들)로부터의 출력들에 기초하 여, 언코어 로직 중 하나(다수)가 프로세서의 TDP를 위반하지 않으면서 성능 및/또는 처리량을 증가 시키고, 지연시간을 감소시키는 등을 하도록 적용 비율을 사용하여 구성될 수 있다고 결정할 수 있다. 일부 예들에서, 전력 버짓 분석기, 및/또는, 보다 일반적으로, 전력 제어 유닛은 워크로드를 실행하 기 위해 프로세서의 하나 이상의 코어들에 의해 실행될 명령어에 기초하여 적용 비율을 결정하기 위한 예시적인 수단을 구현한다. 예를 들어, 결정하기 위한 수단은 적어도 도 59의 블록들(5910 및 5912), 도 62의 블록 , 도 63의 블록, 도 64의 블록들(6404, 6406, 6408, 및 6418), 및/또는 도 65의 블록들(6504, 6506, 6510, 6512, 6514, 및 6516)에 의해 구현되는 것과 같은 실행 가능한 명령어들에 의해 구현될 수 있다. 일부 예들에서, 도 59의 블록들(5910 및 5912), 도 62의 블록, 도 6의 블록, 도 64의 블록들 (6404, 6406, 6408, 및 6418), 및/또는 도 65의 블록들(6504, 6506, 6510, 6512, 6514, 및 6516)의 실행 가능 한 명령어들은 도 68의 예시적인 프로세서(6815, 6838, 6870, 6880) 및/또는 도 69의 예시적인 프로세서 , 도 69의 예시적인 GPU, 도 69의 예시적인 비전 프로세싱 유닛, 및/또는 도 69의 예시적인 신경 네트워크 프로세서와 같은 적어도 하나의 프로세서 상에서 실행될 수 있다. 다른 예들에서, 결정하 기 위한 수단은 하드웨어 로직, 하드웨어 구현 상태 머신들, 로직 회로부, 및/또는 하드웨어, 소프트웨어, 및/ 또는 펌웨어의 임의의 다른 조합에 의해 구현된다. 예를 들어, 결정하기 위한 수단은 소프트웨어 또는 펌웨어 를 실행하지 않고 대응하는 연산을 수행하도록 구성된 적어도 하나의 하드웨어 회로(예를 들면, 이산 및/또는 통합 아날로그 및/또는 디지털 회로부, 범용 프로그래밍 가능 프로세서, FPGA, PLD, FPLD, ASIC, 비교기, 연산 증폭기(op-amp), 로직 회로 등)에 의해 구현될 수 있지만, 다른 구조들도 마찬가지로 적절하다. 명령어는 제1 명령어이고, 워크로드는 제1 워크로드이며, 적용 비율은 제1 적용 비율이고, 하나 이상의 코어는 하나 이상의 제1 코어이며, 언코어 로직은 제1 언코어 로직인 일부 예들에서, 결정하기 위한 수단은 제2 워크로 드를 실행하기 위해 프로세서의 하나 이상의 제2 코어에 의해 실행될 제2 명령어에 기초하여 제2 적용 비율을 결정한다. 일부 예들에서, 결정하기 위한 수단은 프로세서의 지연시간을 지연시간 임계값과 비교하는 것 또는프로세서의 처리량을 처리량 임계값과 비교하는 것 중 적어도 하나를 수행한다. 일부 예들에서, 결정하기 위한 수단은 제1 명령어를 사용하여 워크로드를 실행할 하나 이상의 코어의 제1 전력 소비 값을 결정하고, 제2 명령 어를 사용하여 워크로드를 실행할 하나 이상의 코어의 제2 전력 소비 값을 결정하며, 제2 값은 제1 값보다 크다. 도 8의 예시된 예에서, 코어 구성기는 프로세서의 제1 코어(810A), 제2 코어(810N) 등의 구성을 조정 하고, 수정하며/하거나 다른 방식으로 변경한다. 예를 들어, 코어 구성기는 코어별로 코어들(810A 내지 810N) 중 하나(다수)를 구성할 수 있다. 일부 그러한 예들에서, 코어 구성기는 제1 P-상태로부터 제2 P- 상태로 변경하도록 제1 코어(810A)에게 지시하고/하거나 다른 방식으로 요청할 수 있고, 제2 P-상태로부터 제3 P-상태로 변경하도록 제2 코어(810N)에게 지시하고/하거나 다른 방식으로 요청할 수 있는 등이다. 예를 들어, 코어 구성기는 코어들(810A 내지 810N) 중 하나(다수)가 작동하는 전압 및/또는 주파수를 증가시킬 수 있 다. 일부 예들에서, 코어 구성기는 워크로드의 식별(identification), 로딩될 명령어의 유형, 프로세서의 현재 구성, 코어들(810A 내지 810N) 중 하나(다수), 및/또는, 보다 일반적으로, 프로세서의 전력 측정치들 등을 머신 러닝 모델(들)에 대한 입력들로서 사용하여 머신 러닝 모델(들)을 실행한다. 일부 그러한 예들에서, 머신 러닝 모델(들)은 프로세서의 지연시간, 처리량, 및/또는 전력 버짓 고려사항들과 부 합하기 위해 개선된 효율성으로 워크로드 애플리케이션(들)을 최적으로 및/또는 다른 방식으로 실행하는 데 활 용될 수 있는 적용 비율을 결정할 수 있다. 예를 들어, 코어 구성기는, 머신 러닝 모델(들)로부터의 출력들에 기초하여, 코어들(810A 내지 810N) 중 하나(다수)가 프로세서의 TDP를 위반하지 않으면서 성능 및/또는 처리량을 증가시키고, 지연시간을 감소시키는 등을 하도록 적용 비율을 사용하여 구성될 수 있다고 결 정할 수 있다. 일부 그러한 예들에서, 코어 구성기는 코어들(810A 내지 810N) 중 하나(다수)의 작동 주파 수의 변화를 포함하는 적용 비율에 기초하여 구성을 결정할 수 있다. 일부 예들에서, 코어 구성기는 프로세서의 언코어 로직의 하나 이상의 인스턴스의 구성을 조정 하고, 수정하며/하거나 다른 방식으로 변경한다. 예를 들어, 코어 구성기는 언코어별로 언코어 로직(82 2)의 인스턴스(들)를 구성할 수 있다. 일부 그러한 예들에서, 코어 구성기는 제1 언코어 구성(예를 들면, 제1 보장된 작동 주파수)으로부터 제2 언코어 구성(예를 들면, 제2 보장된 작동 주파수)으로 변경하도록 CMS의 제1 인스턴스, 메시 인터페이스의 제1 인스턴스, I/O의 제1 인스턴스, 및/또는, 보다 일 반적으로, 언코어 로직의 제1 인스턴스에게 지시하고/하거나 다른 방식으로 요청할 수 있다. 예를 들어, 코어 구성기는 언코어 로직 중 하나(다수)가 작동하는 전압 및/또는 주파수를 증가시킬 수 있다. 추 가적으로 또는 대안적으로, PCU는 본 명세서에서 설명되는 바와 같이 프로세서의 언코어 로직의 하나 이상의 인스턴스의 구성을 조정하고, 수정하며/하거나 다른 방식으로 변경하기 위한 언코어 구성기를 포함 할 수 있다. 일부 예들에서, 코어 구성기는 워크로드의 식별, 로딩될 명령어의 유형, 언코어 로직 중 하나(다수) 의 현재 구성, 언코어 로직 중 하나(다수), 및/또는, 보다 일반적으로, 프로세서의 전력 측정치들 등 을 머신 러닝 모델(들)에 대한 입력들로서 사용하여 머신 러닝 모델(들)을 실행한다. 일부 그러한 예들에서, 머신 러닝 모델(들)은 프로세서의 지연시간, 처리량, 및/또는 전력 버짓 고려사항들과 부 합하기 위해 개선된 효율성으로 워크로드 애플리케이션(들)을 최적으로 및/또는 다른 방식으로 실행하는 데 활 용될 수 있는 적용 비율을 결정할 수 있다. 예를 들어, 코어 구성기는, 머신 러닝 모델(들)로부터의 출력들에 기초하여, 언코어 로직 중 하나(다수)가 프로세서의 TDP를 위반하지 않으면서 성능 및/또는 처리량을 증가시키고, 지연시간을 감소시키는 등을 하도록 적용 비율을 사용하여 구성될 수 있다고 결정할 수 있다. 일부 그러한 예들에서, 코어 구성기는 코어들(810A 내지 810N) 중 하나(다수), 언코어 로직 중 하나(다수) 등, 및/또는 이들의 조합의 작동 주파수의 변화를 포함하는 적용 비율에 기초하여 구성을 결정할 수 있다. 일부 예들에서, 코어 구성기는 프로세서의 CLM들의 하나 이상의 인스턴스의 구성을 조정하고, 수정하며/하거나 다른 방식으로 변경한다. 예를 들어, 코어 구성기는 LLC, CHA, CMS, I/O 버퍼, 및/또는, 보다 일반적으로, CLM(들)의 인스턴스(들)를 CLM별로 구성할 수 있다. 일부 그 러한 예들에서, 코어 구성기는 제1 CLM 구성(예를 들면, 제1 보장된 작동 주파수)으로부터 제2 CLM 구성 (예를 들면, 제2 보장된 작동 주파수)으로 변경하도록 LLC의 제1 인스턴스, CHA, CMS의 제1 인 스턴스, I/O의 제1 인스턴스, 및/또는, 보다 일반적으로, CLM의 제1 인스턴스에게 지시하고/하거나 다른 방식으로 요청할 수 있다. 예를 들어, 코어 구성기는 CLM(들) 중 하나(다수)가 작동하는 전압및/또는 주파수를 증가시킬 수 있다. 추가적으로 또는 대안적으로, PCU는 본 명세서에서 설명되는 바와 같이 프로세서의 CLM의 하나 이상의 인스턴스의 구성을 조정하고, 수정하며/하거나 다른 방식으로 변 경하기 위한 CLM 구성기를 포함할 수 있다. 일부 예들에서, 코어 구성기는 워크로드의 식별, 로딩될 명령어의 유형, CLM들 중 하나(다수)의 현재 구성, CLM들 중 하나(다수), 및/또는, 보다 일반적으로, 프로세서의 전력 측정치들 등을 머신 러닝 모델(들)에 대한 입력들로서 사용하여 머신 러닝 모델(들)을 실행한다. 일부 그러한 예들에서, 머신 러닝 모델(들)은 프로세서의 지연시간, 처리량, 및/또는 전력 버짓 고려사항들과 부합하기 위해 개선 된 효율성으로 워크로드 애플리케이션(들)을 최적으로 및/또는 다른 방식으로 실행하는 데 활용될 수 있는 적용 비율을 결정할 수 있다. 예를 들어, 코어 구성기는, 머신 러닝 모델(들)로부터의 출력들에 기초하여, CLM들 중 하나(다수)가 프로세서의 TDP를 위반하지 않으면서 성능 및/또는 처리량을 증가 시키고, 지연시간을 감소시키는 등을 하도록 적용 비율을 사용하여 구성될 수 있다고 결정할 수 있다. 일부 그 러한 예들에서, 코어 구성기는 코어들(810A 내지 810N) 중 하나(다수), 언코어 로직 중 하나(다수), CLM들 중 하나(다수) 등, 및/또는 이들의 조합의 작동 주파수의 변화를 포함하는 적용 비율에 기초하여 구 성을 결정할 수 있다. 일부 예들에서, 코어 구성기, 및/또는, 보다 일반적으로, 전력 제어 유닛은, 워크로드의 실행 이전에, (i) 적용 비율에 기초하여 프로세서의 하나 이상의 코어를 구성하는 것 또는 (ii) 적용 비율에 기초하 여 프로세서의 언코어 로직을 구성하는 것 중 적어도 하나를 수행하기 위한 예시적인 수단을 구현한다. 예를 들어, 구성하기 위한 수단은 적어도 도 59의 블록들(5902, 5904, 5912 및 5914), 도 62의 블록들(6210, 6212 및 6214), 도 63의 블록들(6310, 6314, 6318 및 6320), 도 64의 블록들(6404, 6410, 6412 및 6414), 및/또는 도 65의 블록에 의해 구현되는 것과 같은 실행 가능한 명령어들에 의해 구현될 수 있다. 일부 예들에서, 도 59의 블록들(5902, 5904, 5912, 및 5914), 도 62의 블록들(6210, 6212, 및 6214), 도 63의 블록들(6310, 6314, 6318, 및 6320), 도 64의 블록들(6404, 6410, 6412, 및 6414), 및/또는 도 65의 블록의 실행 가능 한 명령어들은 도 68의 예시적인 프로세서(6815, 6838, 6870, 6880) 및/또는 도 69의 예시적인 프로세서 , 도 69의 예시적인 GPU, 도 69의 예시적인 비전 프로세싱 유닛, 및/또는 도 69의 예시적인 신경 네트워크 프로세서와 같은 적어도 하나의 프로세서 상에서 실행될 수 있다. 다른 예들에서, 구성하 기 위한 수단은 하드웨어 로직, 하드웨어 구현 상태 머신들, 로직 회로부, 및/또는 하드웨어, 소프트웨어, 및/ 또는 펌웨어의 임의의 다른 조합에 의해 구현된다. 예를 들어, 구성하기 위한 수단은 소프트웨어 또는 펌웨어 를 실행하지 않고 대응하는 연산을 수행하도록 구성된 적어도 하나의 하드웨어 회로(예를 들면, 이산 및/또는 통합 아날로그 및/또는 디지털 회로부, 범용 프로그래밍 가능 프로세서, FPGA, PLD, FPLD, ASIC, 비교기, 연산 증폭기(op-amp), 로직 회로 등)에 의해 구현될 수 있지만, 다른 구조들도 마찬가지로 적절하다. 일부 예들에서, 구성하기 위한 수단은 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하고 - 제1 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -, 언코어 로직의 제2 작동 주파수 를 식별하며 - 제2 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함됨 -, 구성하 기 위한 수단은 (i) 제1 작동 주파수 또는 제2 작동 주파수 중 적어도 하나에 기초하여 프로세서의 하나 이상의 코어, 또는 (ii) 제1 작동 주파수 또는 제2 작동 주파수 중 적어도 하나에 기초하여 프로세서의 언코어 로직 중 적어도 하나를 구성한다. 일부 예들에서, 구성하기 위한 수단은 적용 비율과 연관된 전력 소비가 임계값을 충족시킨다는 결정에 응답하여 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성한다. 일부 예들에서, 구성 하기 위한 수단은 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 하나 이상의 코어의 제1 작동 주파수를 감소시키고, 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 언코어 로직의 적 어도 일부의 제2 작동 주파수를 증가시키며 - 제2 전력 소비의 증가는 상기 프로세서의 처리량을 증가시킴 -, 구성하기 위한 수단은 제1 작동 주파수의 감소 또는 제2 작동 주파수의 증가 중 적어도 하나에 기초하여 프로세 서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성한다. 일부 예들에서, 구성하기 위한 수단은 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 것 또는 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 - 제2 작동 주파수 또는 제4 작동 주파 수 중 적어도 하나는 적용 비율과 연관됨 - 중 적어도 하나를 위한 것이고, 구성하기 위한 수단은 제1 작동 주 파수를 제2 작동 주파수로 조정하는 것 또는 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 중 적어도 하나 에 기초하여 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성한다.명령어는 제1 명령어이고, 워크로드는 제1 워크로드이며, 적용 비율은 제1 적용 비율이고, 하나 이상의 코어는 하나 이상의 제1 코어이며, 언코어 로직은 제1 언코어 로직인 일부 예들에서, 구성하기 위한 수단은, 제2 것의 실행 이전에, (i) 제2 적용 비율에 기초하여 프로세서의 하나 이상의 제2 코어 또는 (ii) 제2 적용 비율에 기초 하여 프로세서의 제2 언코어 로직 중 적어도 하나를 구성한다. 적용 비율이 제1 적용 비율인 일부 예들에서, 구성하기 위한 수단은, 지연시간 임계값 또는 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 제1 적용 비율을 제2 적용 비율로 조정하고, 프로세서의 처리량을 증가시키는 것 또는 프로세서의 지연시간을 감소 시키는 것 중 적어도 하나를 위해 제2 적용 비율에 기초하여 언코어 로직을 구성한다. 일부 예들에서, 스케줄러 및/또는 코어 구성기는 프로세서의 하나 이상의 코어들 또는 언코어 로직 중 적어도 하나를 사용하여 워크로드의 실행을 개시하기 위한 예시적인 수단을 구현한다. 일부 예들에서, 실행 하기 위한 수단은 전력 소비 값, 처리량 값, 지연시간 값 등이 하나 이상의 임계값(예를 들면, 전력 소비 임계 값, 처리량 임계값, 지연시간 임계값 등) 중 각자의 임계값을 충족시키는 것에 응답하여 프로세서의 처리량을 개선시키기 위한 유형의 명령어를 사용하여 워크로드를 실행한다. 예를 들어, 개시하기 위한 수단은 적어도 도 59의 블록들(5902, 5904, 5906, 5908, 5912, 5914, 및 5916), 도 60의 블록들(6002, 6008, 및 6012), 도 62의 블록들(6202, 6204, 6206, 6210, 6212, 6214, 및 6216), 도 63의 블록들(6302, 6304, 6310, 6314, 6318, 및 6320), 도 64의 블록들(6402, 6404, 6410, 6412, 및 6414), 및/또는 도 65의 블록들(6502, 6518, 및 6522)에 의해 구현되는 것과 같은 실행 가능한 명령어들에 의해 구현될 수 있다. 일부 예들에서, 도 59의 블록들(5902, 5904, 5906, 5908, 5912, 5914, 및 5916), 도 60의 블록들(6002, 6008, 및 6012), 도 62의 블록들(6202, 6204, 6206, 6210, 6212, 6214, 및 6216), 도 63의 블록들(6302, 6304, 6310, 6314, 6318, 및 6320), 도 64의 블록들 (6402, 6404, 6410, 6412, 및 6414), 및/또는 도 65의 블록들(6502, 6518, 및 6522)의 실행 가능한 명령어들은 도 68의 예시적인 프로세서(6815, 6838, 6870, 6880) 및/또는 도 69의 예시적인 프로세서, 도 69의 예시 적인 GPU, 도 69의 예시적인 비전 프로세싱 유닛, 및/또는 도 69의 예시적인 신경 네트워크 프로세 서와 같은 적어도 하나의 프로세서 상에서 실행될 수 있다. 다른 예들에서, 구성하기 위한 수단은 하드 웨어 로직, 하드웨어 구현 상태 머신들, 로직 회로부, 및/또는 하드웨어, 소프트웨어, 및/또는 펌웨어의 임의의 다른 조합에 의해 구현된다. 예를 들어, 구성하기 위한 수단은 소프트웨어 또는 펌웨어를 실행하지 않고 대응 하는 연산을 수행하도록 구성된 적어도 하나의 하드웨어 회로(예를 들면, 이산 및/또는 통합 아날로그 및/또는 디지털 회로부, 범용 프로그래밍 가능 프로세서, FPGA, PLD, FPLD, ASIC, 비교기, 연산증폭기(op-amp), 로직 회 로 등)에 의해 구현될 수 있지만, 다른 구조들도 마찬가지로 적절하다. 예시된 예에서, 구성들은 코어들(810A 내지 810N), 언코어 로직, 및/또는 CLM들의 작동을 조정 하는 데 사용될 수 있는 하나 이상의 구성을 포함한다. 이 예에서, 구성(들) 각각은 구성 식별자, 최대 전류 레벨(ICCmax), 최대 작동 온도(섭씨 온도 단위), 보장된 작동 주파수(기가헤르츠(GHz) 단위), 최대 전력 레벨, 즉 열 설계 전력 또는 포인트(TDP) 레벨(와트 단위), 최대 케이스 온도(섭씨 온도 단위), 코어 수, 및/또는 설계 수명(3년, 5년 등과 같은, 연 단위)과 연관될 수 있다. 추가적으로 또는 대안적으로, 구성들 중 하나 이상은 상이한 파라미터들, 설정들 등을 포함할 수 있다. 일부 예들에서, 하나 이상의 구성은 적용 비율에 기초할 수 있다. 예를 들어, 프로세서는 0.7의 코 어 적용 비율 및 0.9의 언코어 적용 비율을 갖는 도 5의 5G RAN 서버(및/또는 도 5의 5G 코어 서버) 를 구현하도록 배포될 수 있다. 일부 그러한 예들에서, 코어 구성기는 코어들(810A 내지 810N) 및/또는, 보다 일반적으로, 프로세서가 프로세서의 TDP를 위반하지 않도록 보장하기 위해 구성들 중 하나 를 사용하여 작동하도록 코어들(810A 내지 810N) 중 하나(다수)를 구성할 수 있다. 예를 들어, 코어 구성기 는 코어들(810A 내지 810N) 중 하나(다수)의 코어 주파수를 증가시킬 수 있다. 일부 예들에서, 코어 구성 기는 언코어 로직 및/또는, 보다 일반적으로, 프로세서의 부분(들)이 프로세서의 TDP를 위 반하지 않도록 보장하기 위해 구성들 중 하나를 사용하여 작동하도록 언코어 로직의 부분(들)을 구성 할 수 있다. 예를 들어, 코어 구성기는 상호연결부, CMS, 메시 인터페이스, 또는 I/O 중 적어도 하나의 언코어 주파수(예를 들면, UCLK 주파수)를 증가시킬 수 있다. 일부 예들에서, 언코 어 주파수는 고정되거나 정적일 수 있다. 일부 예들에서, 언코어 주파수는 코어 주파수의 함수인 것에 의해 동 적일 수 있다. 일부 예들에서, 언코어 주파수는 코어 주파수와 독립적으로 조정되는 것에 의해 동적일 수 있다. 일부 예들에서, 코어 구성기는 CLM들 및/또는, 보다 일반적으로, 프로세서의 부분(들)이 프로세 서의 TDP를 위반하지 않도록 보장하기 위해 구성들 중 하나를 사용하여 작동하도록 CLM들의 부 분(들)을 구성할 수 있다. 예를 들어, 코어 구성기는 LLC, CHA, CMS, I/O 버퍼, 및/또는, 보다 일반적으로, CLM 중 적어도 하나의 주파수를 증가시킬 수 있다. 예시된 예에서, SSE 명령어들은 도 5의 제1 명령어들을 구현할 수 있다. 예를 들어, SSE 명령어들 은, 실행될 때, 도 6의 네트워크 워크로드들을 구현할 수 있다. 예시된 예에서, AVX-512 명령어들 은 도 8의 제2 명령어들을 구현할 수 있다. 예를 들어, AVX-512 명령어들은, 실행될 때, 도 5 의 네트워크 워크로드들을 구현할 수 있다. 예시된 예에서, 5G-ISA 명령어들은 도 5의 제3 명령어들 을 구현할 수 있다. 예를 들어, 5G-ISA 명령어들은, 실행될 때, 도 5의 네트워크 워크로드들을 구현할 수 있다. 일부 예들에서, SSE 명령어들, AVX-512 명령어들, 및/또는 5G-ISA 명령어들 중 하나(다수)는 PCU의 메모리(예를 들면, 휘발성 메모리, 비휘발성 메모리, 캐시 메모리 등)에 저장될 수 있다. 대안적으로, SSE 명령어들, AVX-512 명령어들, 및/또는 5G-ISA 명령어들 중 하나 이상 은 PCU와 상이한 위치에, 예컨대, LLC, 시스템 메모리(예를 들면, DDR 메모리) 등에 저장될 수 있다. 일부 예들에서, 코어들(810A 내지 810N), 언코어 로직의 부분(들), 및/또는 CLM들의 부분(들) 중 하 나(다수)의 주파수들은 실행될 명령어들(838, 840, 842)의 유형에 기초하여 조정될 수 있다. 예를 들어, 제1 코어(810A)가 SSE 명령어들을 실행하는 것에 응답하여, 코어 구성기는 제1 코어(810A)의 구성들(83 5)에 기초하여 제1 코어(810A)의 작동 주파수를 증가시키고, 언코어 로직의 대응하는 부분의 작동 주파수 를 증가시키며/시키거나, CLM의 대응하는 부분의 작동 주파수를 증가시킬 수 있다. 일부 예들에서, 제1 코어(810A)가 5G-ISA 명령어들을 실행하는 것에 응답하여, 코어 구성기는 제1 코어(810A)의 구성들 에 기초하여 제1 코어(810A)의 작동 주파수를 감소시키고, 언코어 로직의 대응하는 부분의 작동 주파 수를 증가시키며/시키거나, CLM의 대응하는 부분의 작동 주파수를 증가시킬 수 있다. 유리하게도, 스케줄러, 전력 버짓 분석기, 또는 코어 구성기 중 적어도 하나는 증가된 성능 및/ 또는 감소된 지연시간을 위해 프로세서 또는 그의 부분(들)을 구성하는 데 사용될 수 있는 적용 비율을 식 별하기 위해, 하나 이상의 머신 러닝 모델을 포함하고/하거나 다른 방식으로 구현할 수 있는 머신 러닝 모델(들)을 실행할 수 있다. 많은 상이한 유형들의 머신 러닝 모델들 및/또는 머신 러닝 아키텍처들이 존 재한다. 본 명세서에서 설명되는 예들에서, 신경 네트워크 모델이 사용될 수 있다. 신경 네트워크 모델을 사 용하는 것은 워크로드 분석이 프로세서의 활동을 분류하고, 해당 활동이 주어진 워크로드에 최적화되어 있는지 여부를 나타내는 확률을 결정하며/하거나, 분류 또는 확률 중 적어도 하나에 기초하여, 하나 이상의 코어들 (810A 내지 810N) 및/또는, 보다 일반적으로, 프로세서의 구성에 대한 조정(들)을 결정하는 것을 가능하게 한다. 일반적으로, 본 명세서에서 설명되는 예시적인 접근 방식들에서 사용하기에 적합한 머신 러닝 모델들/아 키텍처들은 순환 신경 네트워크들을 포함한다. 그렇지만, 지도 학습 인공 신경 네트워크 모델들과 같은 다른 유형들의 머신 러닝 모델들이 추가적으로 또는 대안적으로 사용될 수 있다. 예시적인 지도 학습 인공 신경 네 트워크 모델들은 2-계층(two-layer)(2-계층(2-layer)) 방사형 기저 신경 네트워크들(RBN), 학습 벡터 양자화 (LVQ) 분류 신경 네트워크들 등을 포함할 수 있다. 예를 들어, 머신 러닝 모델(들)은 위에서 설명된 바와 같은 신경 네트워크(예를 들면, 순환 신경 네트워크, 인공 신경 네트워크 등)에 의해 구현될 수 있다. 일반적으로, ML/AI 시스템을 구현하는 것은 학습/트레이닝 단계와 추론 단계의 2개의 단계(phase)를 수반한다. 학습/트레이닝 단계에서, 트레이닝 알고리즘은, 예를 들어, 트레이닝 데이터에 기초한 패턴들 및/또는 연관들에 따라 작동하도록 머신 러닝 모델(들)을 트레이닝시키는 데 사용된다. 일반적으로, 머신 러닝 모델 (들)은, 입력 데이터를 출력 데이터로 변환하기 위해 머신 러닝 모델(들) 내의 일련의 노드들 및 연 결들을 통하는 것과 같이, 입력 데이터가 출력 데이터로 어떻게 변환되는지를 안내하는 내부 파라미터들을 포함 한다. 추가적으로, 학습이 어떻게 수행되는지(예를 들면, 학습률, 머신 러닝 모델(들)에서 사용될 계층 수 등)을 제어하기 위해 트레이닝 프로세스의 일부로서 하이퍼파라미터들이 사용된다. 하이퍼파라미터들은 트 레이닝 프로세스를 개시하기 전에 결정되는 모델 하이퍼파라미터들인 것으로 정의된다. ML/AI 모델의 유형 및/또는 예상된 출력에 기초하여 상이한 유형들의 트레이닝이 수행될 수 있다. 예를 들어, 지도 트레이닝은 모델 오류를 감소시키는 머신 러닝 모델(들)에 대한 파라미터들을 (예를 들면, 선택된 파 라미터들의 조합들에 걸쳐 반복하는 것에 의해) 선택하기 위해 입력들 및 대응하는 예상된(예를 들면, 라벨링된) 출력들을 사용한다. 본 명세서에서 사용되는 바와 같이, 라벨링은 머신 러닝 모델(들)의 예상 된 출력(예를 들면, 분류, 예상된 출력 값 등)을 지칭한다. 대안적으로, 비지도 트레이닝(예를 들면, 딥 러닝, 머신 러닝의 서브세트 등에서 사용됨)은 (예를 들면, 예상된(예를 들면, 라벨링된) 출력들의 이점 없이) 머신 러닝 모델(들)에 대한 파라미터들을 선택하기 위해 입력들로부터 패턴들을 추론하는 것을 수반한다. 본 명세서에서 설명되는 예들에서, 머신 러닝 모델(들)과 같은 ML/AI 모델들은 확률적 경사 하강법을 사용 하여 트레이닝될 수 있다. 그렇지만, 임의의 다른 트레이닝 알고리즘이 추가적으로 또는 대안적으로 사용될 수 있다. 본 명세서에서 설명되는 예들에서, 오류 레벨이 더 이상 감소하지 않을 때까지 트레이닝이 수행될 수 있 다. 본 명세서에서 설명되는 예들에서, 트레이닝은 컴퓨팅 시스템에서 로컬로 및/또는 컴퓨팅 시스템에 통신 가능하게 결합되는 외부 컴퓨팅 시스템에서 원격으로 수행될 수 있다. 예를 들어, 스케줄러, 전력 버짓 분석기, 코어 구성기, 및/또는, 보다 일반적으로, 프로세서는 머신 러닝 모델(들)을 트레 이닝시킬 수 있거나 외부 컴퓨팅 시스템 또는 다른 하드웨어로부터 머신 러닝 모델(들) 중 이미 트레이닝 되거나 부분적으로 트레이닝된 머신 러닝 모델(들)을 획득할 수 있다. 학습이 어떻게 수행되는지(예를 들면, 학습률, 머신 러닝 모델(들)에서 사용될 계층 수 등)를 제어하는 하이퍼파라미터들을 사용하여 트레이닝이 수행된다. 본 명세서에서 설명되는 예들에서, 모델 성능 및 트레이닝 속도를 제어하는 하이퍼파라미터들은 학습률 및 정규 화 파라미터(들)이다. 그러한 하이퍼파라미터들은, 예를 들어, 최적의 모델 성능에 도달하기 위해 시행착오에 의해 선택된다. 일부 예들에서, 베이지안 하이퍼파라미터 최적화는, 모델 과적합을 방지하고 머신 러닝 모델 (들)의 전체 적용 가능성을 개선시키기 위해, 최적의 및/또는 다른 방식으로 개선된 또는 더 효율적인 네 트워크 아키텍처를 결정하는 데 활용된다. 일부 예들에서, 재트레이닝이 수행될 수 있다. 사용자, 컴퓨팅 시 스템 등에 의한 모델에 의해 결정된(model-determined) 프로세서 조정(들)에 대한 무시(override)(들)에 응답하 여 그러한 재트레이닝이 수행될 수 있다. 일부 예들에서, 새로운 입력들 및/또는 출력들이 이용 가능할 때 재 트레이닝이 수행될 수 있다. 예를 들어, PMU는 머신 러닝 모델(들)을 재트레이닝하는 데 사용될 수 있는 프로세서 성능 데이터, 하드웨어 카운터 값들 등을 제공할 수 있다. 트레이닝 데이터를 사용하여 트레이닝이 수행된다. 본 명세서에서 설명되는 예들에서, 트레이닝 데이터는, 프 로세서 또는 상이한 프로세서(들)로부터의 이용률 데이터와 같은, 로컬로 생성된 데이터로부터 유래한다. 예를 들어, 트레이닝 데이터는 구성(들), PMU로부터의 데이터, 또는 임의의 다른 데이터에 의해 구현 될 수 있다. 지도 트레이닝이 사용되는 일부 설명된 예들에서, 트레이닝 데이터는 라벨링되어 있다. 라벨링은 사용자에 의해 수동으로 또는 자동화된 데이터 사전 프로세싱 시스템에 의해 트레이닝 데이터에 적용된다. 일 부 예들에서, 트레이닝 데이터는 사전 프로세싱된다. 일부 예들에서, 트레이닝 데이터는 머신 러닝 모델 (들)을 트레이닝시키기 위한 제1 데이터 부분 및 머신 러닝 모델(들)을 검증하기 위한 제2 데이터 부분 으로 세분된다. 일단 트레이닝이 완료되면, 머신 러닝 모델(들)은 머신 러닝 모델(들)에서 정의되는 노드들 및 연결 들의 네트워크에 기초하여 입력을 프로세싱하고 출력을 제공하는 실행 가능한 구성체(executable construct)로 서 사용하기 위해 배포된다. 머신 러닝 모델(들)은 머신 러닝 모델(들)로서 메모리에 저장되거 나 네트워크, 전기 버스 등을 통해 액세스 가능할 수 있는 원격 컴퓨팅 시스템의 메모리에 저장된다. 머신 러 닝 모델(들)은 이어서 멀티코어 컴퓨팅 환경에 배포될 때 분석된 프로세서에 의해, 또는 멀티코어 컴퓨팅 환경을 관리하는 프로세서(들)에 의해 실행될 수 있다. 예를 들어, 머신 러닝 모델(들) 중 하나(다수)는 프로세서에 의한 실행을 위해 프로세서에 배포될 수 있다. 일단 트레이닝되면, 배포된 머신 러닝 모델(들)은 데이터를 프로세싱하기 위해 추론 단계에서 작동될 수 있다. 추론 단계에서, 분석될 데이터(예를 들면, 라이브 데이터)가 머신 러닝 모델(들)에 입력되고, 머신 러닝 모델(들)은 출력을 생성하기 위해 실행된다. 이 추론 단계는 (예를 들면, 학습된 패턴들 및/또는 연 관들을 라이브 데이터(live data)에 적용하기 위해 머신 러닝 모델을 실행하는 것에 의해) 트레이닝으로부 터 학습한 것에 기초하여 출력을 생성하는 AI \"사고\"로서 생각될 수 있다. 일부 예들에서, 입력 데이터는 머신 러닝 모델(들)에 대한 입력으로 사용되기 전에 사전 프로세싱을 거친다. 더욱이, 일부 예들에서, 출력 데 이터는 출력을 유용한 결과(예를 들면, 데이터의 디스플레이, 머신에 의해 실행될 명령어 등)로 변환하기 위해 머신 러닝 모델(들)에 의해 생성된 후에 사후 프로세싱을 거칠 수 있다. 일부 예들에서, 배포된 머신 러닝 모델(들)의 출력은 캡처되어 피드백으로서 제공될 수 있다. 피드백을 분석하는 것에 의해, 배포된 머신 러닝 모델(들)의 정확도가 결정될 수 있다. 피드백이 배포된 머신 러닝 모델(들)의 정확도가 임계값 또는 다른 기준보다 작다는 것을 나타내는 경우, 피드백 및 업데이트된 트레 이닝 데이터 세트, 하이퍼파라미터 등을 사용하여 업데이트되고 배포된 머신 러닝 모델(들)을 생성하기 위 해 업데이트된 머신 러닝 모델(들)의 트레이닝이 트리거될 수 있다. 일부 예들에서, 배포된 머신 러닝 모 델(들)은, 네트워크 노드 위치, 처리량 요구사항들, 전력 요구사항들, 및/또는 지연시간 요구사항들과 같 은, 고객 또는 워크로드 요구사항들을 획득할 수 있다. 일부 예들에서, 배포된 머신 러닝 모델(들)은 고 객 또는 워크로드 요구사항들을 충족시키도록 최적화되는 워크로드와 연관된 적용 비율을 포함한 출력을 생성할수 있다. 예를 들어, 출력은 고객 또는 워크로드 요구사항들을 충족시키는 코어, 대응하는 언코어 로직, CLM들 등의 작동 주파수를 지정할 수 있다. 일부 예들에서, 적용 비율은 워크로드를 실행할 작동 주파수에 기초한다. 일부 예들에서, 배포된 머신 러닝 모델(들)은 명령어들(838, 840, 842) 중 어느 것(들)이 워크로드를 실행 할지와 같은 명령어의 유형의 선택 또는 식별을 포함한 출력을 생성할 수 있다. 도 8의 PCU 및/또는, 보다 일반적으로, 프로세서를 구현하는 예시적인 방식이 도 8에 예시되어 있지 만, 도 8에 예시된 요소들, 프로세스들 및/또는 디바이스들 중 하나 이상이 결합되고, 분할되며, 재배열되고, 생략되며, 제거되고/되거나 임의의 다른 방식으로 구현된다. 게다가, 도 8의 예시적인 스케줄러, 예시적 인 전력 버짓 분석기, 예시적인 코어 구성기, 예시적인 SSE 명령어들, 예시적인 AVX-512 명령어 들, 예시적인 5G-ISA 명령어들, 예시적인 머신 러닝 모델(들), 및/또는, 보다 일반적으로, 예시 적인 PCU는 하드웨어, 소프트웨어, 펌웨어 및/또는 하드웨어, 소프트웨어 및/또는 펌웨어의 임의의 조합에 의해 구현될 수 있다. 따라서, 예를 들어, 예시적인 스케줄러, 예시적인 전력 버짓 분석기, 예시적 인 코어 구성기, 예시적인 SSE 명령어들, 예시적인 AVX-512 명령어들, 예시적인 5G-ISA 명령어 들, 예시적인 머신 러닝 모델(들), 및/또는, 보다 일반적으로, 예시적인 PCU 중 임의의 것은 하 나 이상의 아날로그 또는 디지털 회로(들), 로직 회로들, 프로그래밍 가능한 프로세서(들), 프로그래밍 가능한 제어기(들), GPU(들), 디지털 신호 프로세서(들)(DSP(들)), 주문형 집적 회로(들)(ASIC(들)), 프로그래머블 로 직 디바이스(들)(PLD(들)), 필드 프로그래머블 게이트 어레이들(FPGA들), 및/또는 필드 프로그래머블 로직 디바 이스(들)(FPLD(들))에 의해 구현될 수 있다. 순수 소프트웨어 및/또는 펌웨어 구현을 포함하기 위해 이 특허의 장치 또는 시스템 청구항들 중 임의의 것을 읽을 때, 예시적인 스케줄러, 예시적인 전력 버짓 분석기 , 예시적인 코어 구성기, 예시적인 SSE 명령어들, 예시적인 AVX-512 명령어들, 예시적인 5G-ISA 명령어들, 및/또는 예시적인 머신 러닝 모델(들) 중 적어도 하나는 이로써 소프트웨어 및/또 는 펌웨어를 포함하는 메모리, DVD, CD, 블루레이 디스크 등과 같은 비일시적 컴퓨터 판독 가능 저장 디바이스 또는 저장 디스크를 포함하도록 명시적으로 정의된다. 게다가, 도 8의 예시적인 PCU, 및/또는, 보다 일반 적으로, 프로세서는 도 8에 예시된 것들에 추가적으로 또는 그 대신에 하나 이상의 요소, 프로세스 및/또 는 디바이스를 포함할 수 있고/있거나, 예시된 요소들, 프로세스들 및 디바이스들 중 일부 또는 전부를 하나 초 과 포함할 수 있다. 본 명세서에서 사용되는 바와 같이, \"통신하는\"이라는 문구는, 그의 변형들을 포함하여, 직접 통신 및/또는 하나 이상의 중간 컴포넌트를 통한 간접 통신을 포괄하며, 직접적인 물리적(예컨대, 유선) 통신 및/또는 상시 통신을 요구하지는 않지만, 오히려 주기적인 간격, 스케줄링된 간격, 비주기적인 간격, 및/ 또는 일회성 이벤트로 있는 선택적인 통신을 추가적으로 포함한다. 도 9는 예시적인 5G 네트워크 아키텍처의 예시이다. 이 예에서, 5G 네트워크 아키텍처는 하나 이상 의 예시적인 5G 디바이스, 하나 이상의 예시적인 5G RRU, 예시적인 vRAN-DU들 및/또는 vRAN-CU 들과 같은 하나 이상의 예시적인 5G RAN(906, 908), 및/또는 하나 이상의 예시적인 5G 코어(예를 들면, 5G 코어 서버)로 구현될 수 있다. 이 예에서, 5G 디바이스들은 도 1의 디바이스들(108, 110, 112, 114, 116) 중 하나(다수)에 의해 구현될 수 있다. 이 예에서, 5G RRU들은 도 1의 RRU들에 의해 구 현될 수 있다. 이 예에서, vRAN-DU들은 도 1의 DU들, 도 5의 제1 멀티코어 컴퓨팅 시스템 또 는 그의 부분(들), 도 5의 제2 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 도 6의 제3 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 및/또는 도 7의 제4 멀티코어 컴퓨팅 시스템 또는 그의 부분(들)에 의해 구현될 수 있다. 이 예에서, vRAN-CU들은 도 1의 CU들, 도 5의 제1 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 도 5의 제2 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 도 6의 제3 멀티코어 컴퓨 팅 시스템 또는 그의 부분(들), 및/또는 도 7의 제4 멀티코어 컴퓨팅 시스템 또는 그의 부분(들)에 의해 구현될 수 있다. 이 예에서, 5G 코어 서버들은 도 1의 코어 디바이스들, 도 5의 제1 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 도 5의 제2 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 도 6의 제3 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 및/또는 도 7의 제4 멀티코어 컴퓨팅 시스템 또는 그의 부분(들)에 의해 구현될 수 있다. 유리하게도, 본 명세서에서 설명되는 예들은 효율성을 위해 아키텍처를 분할하고 네트워크 슬라이싱을 지원하는 것에 의해 5G 차세대 RAN(vRAN)을 개선시킨다. 예를 들어, 본 명세서에서 설명되는 예들은 5G 아키텍처를 하드 웨어, 소프트웨어 및/또는 펌웨어로 분할하는 것을 실시할 수 있다. 유리하게도, 본 명세서에서 설명되는 예들 은 독립적인 확장성과 유연한 배포들을 허용하고 유연하고 효율적인 네트워크 슬라이싱을 가능하게 하는 것에 의해 5G 차세대 코어(5GC)를 개선시킨다. 유리하게도, 본 명세서에서 설명되는 예들은 그러한 프로세서(들)에 의해 실행될 네트워크 워크로드들과 연관된 네트워크 노드 위치, 지연시간 요구사항들, 처리량 요구사항들, 및/ 또는 전력 요구사항들에 기초하여 코어별로 및/또는 언코어별로 5G 디바이스들, 하나 이상의 5G RRU,하나 이상의 5G RAN(906, 908), 및/또는 하나 이상의 5G 코어의 구성 가능성을 실시하는 것에 의해 5GC를 개선시킨다. 도 10은 예시적인 5G vRAN DU를 구현할 수 있는 예시적인 멀티코어 CPU의 예시이다. 예를 들어, 5G vRAN DU는 도 2의 에지 클라우드의 니어 에지 및/또는 파 에지를 구현할 수 있다. 이 예에서, vRAN DU는 도 1의 DU들, 도 5의 제1 멀티코어 컴퓨팅 시스템, 도 5의 제2 멀티코어 컴퓨팅 시 스템, 도 6의 제3 멀티코어 컴퓨팅 시스템, 도 7의 제4 멀티코어 컴퓨팅 시스템 및/또는 이들의 부분(들)에 의해 구현될 수 있다. 이 예에서, 멀티코어 CPU는 워크로드 조정 가능한 및/또는 다른 방식 으로 네트워크 최적화 가능한 CPU이다. 예를 들어, 멀티코어 CPU는 실행되거나 프로세싱될 컴퓨팅 또는 네트워크 워크로드에 기초하여 최적화되고/되거나 다른 방식으로 구성될 수 있다. 일부 그러한 예들에서, 멀티 코어 CPU는 컴퓨팅 또는 네트워크 워크로드를 프로세싱하는 것과 연관된 성능, 처리량 또는 지연시간 중 적어도 하나를 개선시키기 위해 코어별로, 언코어별로, 및/또는 CLM별로 구성 가능할 수 있다. 일부 예들에서, 멀티코어 CPU는 상이한 각자의 SKU들과 연관된 상이한 구성들에서 작동하도록 구성될 수 있는 멀티 SKU CPU를 구현할 수 있다. 이 예에서, 멀티코어 CPU는 제1 예시적인 명령어들(예를 들면, 하드웨어 또는 머신 판독 가능 명령어 들), 제2 예시적인 명령어들, 또는 제3 예시적인 명령어들을 실행할 수 있다. 예를 들어, 명령어들(1004, 1006, 1008)은 어셈블리, 하드웨어, 또는 기계어로 작성되고, 구현되며/되거나 다른 방식으로 그에 기초할 수 있다. 이 예에서, 제1 명령어들은 제어 작업들(예를 들면, 코어 제어 작업들, CPU 제어 작업들 등)을 실시하기 위해 SSE 명령어들을 구현하고/하거나 다른 방식으로 그에 대응할 수 있다. 이 예에서, 제2 명령어들은 AVX-512 명령어들을 구현하고/하거나 다른 방식으로 그에 대응할 수 있다. 이 예에서, 제3 명령어들은 AVX-512+5G ISA 명령어들을 구현하고/하거나 다른 방식으로 그에 대응할 수 있다. 도 10의 예시된 예에서, 멀티코어 CPU는 제1 예시적인 코어들, 제2 예시적인 코어들, 및 제3 예시적인 코어들을 갖는다. 이 예에서, 제1 코어들은 제어 작업들을 실행하는 것에 의해 제1 워크 로드들을 실시하기 위해 제1 명령어들을 실행한다. 이 예에서, 제2 코어들은 제2 예시적인 네트워 크 워크로드들을 실시하기 위해 제2 명령어들을 실행한다. 이 예에서, 제2 네트워크 워크로드들 은, 데이터를 스크램블링 또는 디스크램블링하는 것, 데이터를 변조 또는 복조하는 것 등과 같은, 신호 프로세싱 워크로드들이다. 이 예에서, 제3 코어들은 제3 예시적인 네트워크 워크로드들을 실시하 기 위해 제3 명령어들을 실행한다. 이 예에서, 제3 네트워크 워크로드들은 계층 매핑, 프리코딩, 자원 매핑, MU-MMIMO 검출, 복조 참조 신호(DMRS) 채널 추정, 빔포밍 생성, 사운딩 채널 추정, 및 자원 디매핑 을 포함한다. 일부 예들에서, 멀티코어 CPU는 5G vRAN DU에 의해 실행될 네트워크 워크로드들과 연관된 네트워크 노드 위치, 지연시간 요구사항들, 처리량 요구사항들, 및/또는 전력 요구사항들에 기초하여 적용 비율을 시행한 다. 예를 들어, 멀티코어 CPU는 멀티코어 CPU가 지원할 수 있거나 구현할 수 있는 복수의 적용 비 율들 중에서 제1 적용 비율(예를 들면, 0.7, 0.8 등)을 선택할 수 있다. 일부 그러한 예들에서, 멀티코어 CPU는, 명령어들(1004, 1006, 1008) 중 각자의 명령어를 실행할 때 코어에 대한 작동 주파수들, 명령어들 (1004, 1006, 1008) 중 각자의 명령어를 실행할 때 대응하는 언코어에 대한 작동 주파수들 등과 같은, CPU 설정 들을 계산하고/하거나 다른 방식으로 결정할 수 있다. 유리하게도, 제2 명령어들을 로딩하는 것에 응답하여, 제2 코어들은 선택된 적용 비율에 기초하여 자신의 작동 주파수들을 기본 주파수로부터 터보 주파수로(예를 들면, 2.0으로부터 3.0 기가헤르츠(GHz)로) 증 가시키는 것에 의해 구성될 수 있다. 예를 들어, 제2 명령어들은 제1 명령어들에 비해 컴퓨트 바 운드 및/또는 다른 방식으로 더 프로세싱 집약적인 컴퓨팅 작업들을 실행하도록 최적화될 수 있다. 일부 예들 에서, 멀티코어 CPU는 제2 코어들 중 제2의 것(들)을 제2 주파수(예를 들면, 3.0 GHz의 터보 주파 수)에서 작동시키면서 제2 코어들 중 제1의 것(들)을 제1 주파수(예를 들면, 2.0 GHz의 기본 주파수)에서 작동시키도록 결정할 수 있다. 일부 예들에서, 멀티코어 CPU는 제2 코어들 모두를 동일한 주파수 (예를 들면, 기본 주파수 또는 터보 주파수)에서 작동시키도록 결정할 수 있다. 유리하게도, 제3 명령어들을 로딩하는 것에 응답하여, 제3 코어들은 선택된 적용 비율에 기초하여 자신의 작동 주파수들을 (예를 들면, 2.0으로부터 3.2 GHz로) 증가시키는 것에 의해 구성될 수 있다. 예를 들 어, 제3 명령어들은 제1 명령어들 및/또는 제2 명령어들에 비해 컴퓨트 바운드 및/또는 다른 방식으로 더 프로세싱 집약적인 컴퓨팅 작업들을 실행하도록 최적화될 수 있다. 일부 예들에서, 멀티코어CPU는 제3 코어들 중 제2의 것(들)을 제2 주파수(예를 들면, 3.0 GHz의 터보 주파수)에서 작동시키 면서 제3 코어들 중 제1의 것(들)을 제1 주파수(예를 들면, 2.0 GHz의 기본 주파수)에서 작동시키도록 결 정할 수 있다. 일부 예들에서, 멀티코어 CPU는 제3 코어들 모두를 동일한 주파수(예를 들면, 기본 주파수 또는 터보 주파수)에서 작동시키도록 결정할 수 있다. 이 예에서, 최대 8개의 코어(1010, 1012, 1014)가 제1 명령어들을 동시에 실행할 수 있다. 대안적으로, 상이한 수의 코어(1010, 1012, 1014)가 제1 명령어들을 동시에 실행할 수 있다. 이 예에서, 최대 24개의 코어(1010, 1012, 1014)가 제2 명령어들 또는 제3 명령어들을 동시에 실행할 수 있다. 대안적으로, 상이한 수의 코어(1010, 1012, 1014)가 제2 명령어들 또는 제3 명령어들을 동시에 실 행할 수 있다. 코어들(1010, 1012, 1014)이 이 예에서 대응하는 명령어들(1004, 1006, 1008)을 실행하는 것으로 나타내어져 있 지만, 상이한 시점 또는 동작에서, 코어들(1010, 1012, 1014) 중 하나(다수)는 명령어들(1004, 1006, 1008) 중 상이한 것들을 로딩할 수 있고 이에 의해 제1 명령어 로딩 인스턴스(예를 들면, 제1 명령어들 중 하나를 로딩하는 것)로부터 제2 명령어 로딩 인스턴스(예를 들면, 제1 명령어들 중 하나를 사용하여 워크로드를 실행한 후에 제2 명령어들 또는 제3 명령어들 중 하나를 로딩하는 것)로 동적으로 구성될 수 있다. 예를 들어, 제1 코어들 중 제1의 것은 제1 시간에서 제1 명령어들을 실행하고, 제1 시간 이후의 제 2 시간에서 제2 명령어들을 실행하며, 제2 시간 이후의 제3 시간에서 제3 명령어들을 실행할 수 있 다. 도 11은 예시적인 멀티코어 CPU를 포함하는 5G 코어 서버의 예시적인 구현의 예시이다. 예를 들어, 5G 코어 서버는 도 2의 에지 클라우드 및/또는 도 3의 코어 네트워크의 파 에지를 구현 할 수 있다. 이 예에서, 멀티코어 CPU는 복수의 예시적인 컴퓨팅 코어들을 포함한다. 이 예에서, 코어 서버는 도 1의 코어 디바이스들, 도 5의 제1 멀티코어 컴퓨팅 시스템, 도 5의 제2 멀티코 어 컴퓨팅 시스템, 도 6의 제3 멀티코어 컴퓨팅 시스템, 도 7의 제4 멀티코어 컴퓨팅 시스템, 및/또는 이들의 부분(들)에 의해 구현될 수 있다. 이 예에서, 멀티코어 CPU는 워크로드 조정 가능한 및/ 또는 다른 방식으로 네트워크 최적화 가능한 CPU이다. 예를 들어, 멀티코어 CPU는 실행되거나 프로세싱 될 컴퓨팅 또는 네트워크 워크로드에 기초하여 최적화되고/되거나 다른 방식으로 구성될 수 있다. 그러한 예들 에서, 멀티코어 CPU는 코어 서버의 네트워크 노드 위치, 지연시간 요구사항들, 처리량 요구사항들, 및/또는 전력 요구사항들에 기초하여 상이한 각자의 SKU들과 연관된 상이한 구성들에서 작동하도록 구성될 수 있는 멀티 SKU CPU를 구현할 수 있다. 이 예에서, 멀티코어 CPU는 제1 예시적인 명령어들(예를 들면, 머신 판독 가능 명령어들)을 실행할 수 있다. 예를 들어, 도 11의 제1 명령어들은 도 10의 제1 명령어들에 대응할 수 있다. 이 예에 서, 제1 명령어들은 어셈블리, 하드웨어, 또는 기계어로 작성되고, 구현되며/되거나 다른 방식으로 그에 기초할 수 있다. 이 예에서, 제1 명령어들은 제어 작업들(예를 들면, 코어 제어 작업들, CPU 제어 작업 들 등)을 실시하기 위해 SSE 명령어들을 구현하고/하거나 다른 방식으로 그에 대응할 수 있다. 이 예에서, 컴 퓨팅 코어들은 제어 작업들을 실행하는 것에 의해 제1 예시적인 워크로드들을 실시하기 위해 제1 명령어들을 실행한다. 이 예에서, 제1 워크로드들은 5G UPF(예를 들면, 5G UPF 프로세싱 또는 워 크로드 파이프라인)를 구현한다. 예를 들어, 코어들은 액세스 제어, 터널 캡슐화 또는 역캡슐화, 심층 패킷 검사(DPI), 서비스 품질(QoS), 사용량 보고 및/또는 빌링, 및/또는 인터넷 프로토콜(IP) 포워딩 작업들을 구현하고/하거나 다른 방식으로 실행하기 위해 제1 명령어들을 로딩하여 실행할 수 있다. 일부 예들에서, 멀티코어 CPU는 코어 서버에 의해 실행될 네트워크 워크로드들과 연관된 네트워크 노드 위치, 지연시간 요구사항들, 처리량 요구사항들, 및/또는 전력 요구사항들에 기초하여 적용 비율을 시행한 다. 예를 들어, 멀티코어 CPU는 멀티코어 CPU가 지원할 수 있고/있거나 지원하도록 허가된 복수의 적용 비율들 중에서 제1 적용 비율(예를 들면, 0.7, 0.8 등)을 선택할 수 있다. 그러한 예들에서, 멀티코어 CPU는, 명령어들을 실행할 때 코어들 중 하나에 대한 작동 주파수들, 전력 소비 값들 등, 명 령어들을 실행할 때 대응하는 언코어에 대한 작동 주파수들, 전력 소비 값들 등, 등과 같은, CPU 파라미 터들 또는 설정들을 계산하고/하거나 다른 방식으로 결정할 수 있다. 유리하게도, 제1 명령어들을 로딩하는 것에 응답하여, 코어들은 선택된 적용 비율에 기초하여 자신 의 작동 주파수들을 (예를 들면, 2.4으로부터 3.0 GHz로) 증가시키는 것에 의해 구성될 수 있다. 코어들(110 4)이 이 예에서 제1 명령어들을 실행하는 것으로 나타내어져 있지만, 상이한 시점 또는 동작에서, 코어들 중 하나(다수)는, 도 10의 명령어들(1004, 1006, 1008) 중 하나(다수)와 같은, 상이한 명령어들을 로딩 할 수 있고 이에 의해 제1 명령어 로딩 인스턴스(예를 들면, 제1 명령어들 중 하나를 로딩하는 것)로부터 제2 명령어 로딩 인스턴스(예를 들면, 제1 명령어들 중 하나를 사용하여 워크로드를 실행한 후에 도 10의 제2 명령어들 중 하나를 로딩하는 것)로 동적으로 구성될 수 있다. 도 12는 예시적인 네트워크 워크로드들(1202, 1204, 1206, 1208)의 프로세싱 또는 완료를 실시하고/하거나 다른 방식으로 용이하게 하기 위한 예시적인 네트워크 아키텍처(예를 들면, 5G 네트워크 아키텍처)의 예시이다. 예를 들어, 네트워크 아키텍처는 도 1의 제1 멀티코어 컴퓨팅 환경, 도 5의 제2 멀티코 어 컴퓨팅 환경, 및/또는 이들의 부분(들)을 구현할 수 있다. 도 12의 예시된 예에서, 네트워크 워크로드들(1202, 1204, 1206, 1208)은 제1 예시적인 CPU(예를 들면, 멀티코 어 CPU, 5G CPU 등), 예시적인 FPGA, 제2 예시적인 CPU, 및/또는 제3 예시적인 CPU에 의해 수행될 수 있다. 이 예에서, 제1 CPU는, 도 10의 제1 명령어들 및/또는 도 11의 제1 명령어 들과 같은, 제1 명령어 세트(예를 들면, SSE 명령어들)를 사용하여 제1 네트워크 워크로드들을 프 로세싱할 수 있다. 이 예에서, FPGA는 VHSIC-HDL 또는 VHDL(Very High Speed Integrated Circuit Hardware Description Language) 명령어들과 같은 제2 명령어 세트를 사용하여 제2 네트워크 워크로드들(120 4)을 프로세싱할 수 있다. 이 예에서, 제2 CPU는 제1 명령어 세트와 상이할 수 있는 제3 명령어 세트(예를 들면, AVX-512 명령어 들)을 사용하여 제3 네트워크 워크로드들을 프로세싱할 수 있으며, 여기서 제3 명령어 세트는 도 10의 제 2 명령어들에 대응할 수 있다. 이 예에서, 제3 CPU는 제1 명령어 세트 및/또는 제3 명령어 세트와 상이할 수 있는 제4 명령어 세트(예를 들면, AVX-512+5G ISA 명령어들)를 사용하여 제4 네트워크 워크로드들 을 프로세싱할 수 있으며, 여기서 제4 명령어 세트는 도 10의 제3 명령어들에 대응할 수 있다. 이 예에서, 기저대역 유닛(BBU)은 네트워크 워크로드들(1202, 1204, 1206, 1208) 중 하나(다수)를 구현할 수 있고 RRU는 다운링크 및 업링크 빔포밍, 고속 푸리에 변환(FFT), 및/또는 역 FFT(IFFT) 등과 연관된 네트워크 워크로 드들을 구현할 수 있다. 이 예에서, 제4 명령어 세트는 L1 기저대역 지원 명령어들을 구현하고/하거나 다른 방 식으로 그에 대응한다. 예를 들어, AVX-512+5G-ISA 명령어들, 및/또는, 보다 일반적으로, 본 명세서에서 설명 되는 5G-ISA 명령어들은 L1 기저대역 지원 명령어들이라고 지칭될 수 있다. 일부 예들에서, L1 기저대역 지원 명령어들은, 실행될 때, 다른 유형들의 명령어들(예를 들면, SSE 명령어들, AVX-512 명령어들 등)과 관련하여 증가된 성능, 증가된 처리량, 및/또는 감소된 지연시간으로 제4 네트워크 워크로드들 중 하나(다수)를 실 시한다. 도 12의 예시된 예에서, CPU들(1210, 1214, 1216)은 상이한 CPU들일 수 있다. 대안적으로, CPU들(1210, 1214, 1216) 중 하나 이상은 동일한 CPU일 수 있다. 예를 들어, 제1 CPU의 하나 이상의 제1 코어는 제1 네트워 크 워크로드들을 구현할 수 있으며, 제1 CPU의 하나 이상의 제2 코어는 제3 네트워크 워크로드들 을 구현할 수 있고/있거나, 제1 CPU의 하나 이상의 제3 코어는 제4 네트워크 워크로드들을 구현할 수 있다. 유리하게도, 제1 CPU(또는 제2 CPU 또는 제3 CPU)는 각자의 코어(들)에 로딩되는 명령어(예를 들면, SSE 명령어, AVX-512 명령어, 5G ISA 명령어 등)에 기초하여 CPU의 코어(들)를 동 적으로 구성(또는 재구성)할 수 있다. 예를 들어, 5G ISA 명령어는, 실행될 때, 도 12의 예에 묘사된 네트워크 워크로드들(1202, 1204, 1206, 1208) 중 하나(다수)와 같은, 5G 컴퓨팅 작업을 실행하는 머신 판독 가능 명령어 를 나타낼 수 있다. 유리하게도, 제1 CPU(또는 제2 CPU 또는 제3 CPU)는 각각의 코어(들) 에 로딩되는 명령어(예를 들면, SSE 명령어, AVX-512 명령어, 5G ISA 명령어 등), 제1 CPU에 의해 호출 되는 애플리케이션 등에 기초하여 CPU의 언코어(들) 및/또는 CLM들을 동적으로 구성(또는 재구성)할 수 있다. 도 13은 예시적인 vRAN을 구현할 수 있는 예시적인 멀티코어 CPU의 성능을 조정하는 것의 예시이다. 이 예에서, vRAN은 도 1의 DU들, 도 1의 CU들, 도 1의 제1 멀티코어 컴퓨팅 환경 , 도 5의 제2 멀티코어 컴퓨팅 환경, 및/또는 이들의 부분(들)에 의해 구현될 수 있다. 이 예에서, 멀티코어 CPU는 워크로드 조정 가능한 및/또는 다른 방식으로 네트워크 최적화 가능한 CPU이다. 예를 들 어, 멀티코어 CPU는 실행되거나 프로세싱될 컴퓨팅 또는 네트워크 워크로드에 기초하여 구성되고/되거나 다른 방식으로 최적화될 수 있다. 일부 그러한 예들에서, 멀티코어 CPU는 vRAN의 네트워크 노드 위치, 지연시간 요구사항들, 처리량 요구사항들, 및/또는 전력 요구사항들에 기초하여 상이한 각자의 SKU들과 연관된 상이한 구성들에서 작동하도록 구성될 수 있는 멀티 SKU CPU를 구현할 수 있다. 이 예에서, 예시적인 FPGA는 RRU를 구현한다. 이 예에서, vRAN은 제어, 스크램블링/변조, 및/또는 빔포밍 작업둘 또는 워크로드들을 실시하기 위해 SSE 명령어들, AVX-512 명령어들, 및/또는 5G-ISA 명령어들을 실행할 수 있는 예시적인 BBU를 구현할 수 있다. 이 예에서, 멀티코어 CPU는 SSE 명령어, AVX-512 명령 어, 또는 5G-ISA 명령어를 로딩하는 예시적인 코어들을 포함한다. 일부 예들에서, 멀티코어 CPU는 vRAN에 의해 실행될 네트워크 워크로드들과 연관된 네트워크 노드 위치, 지연시간 요구사항들, 처리량 요구사항들, 및/또는 전력 요구사항들에 기초하여 적용 비율을 시행한다. 예를 들어, 멀티코어 CPU는 복수의 적용 비율들 중에서 제1 적용 비율(예를 들면, 0.7, 0.8 등)을 선택할 수 있다. 그러한 예들에서, 멀티코어 CPU는 명령어들(예를 들면, SSE 명령어들, AVX-512 명령어들, 5G- ISA 명령어들 등)을 실행할 때 코어들 중 하나에 대한 작동 주파수들, 명령어들을 실행할 때 대응하는 언 코어에 대한 작동 주파수들 등과 같은, CPU 설정들을 계산하고/하거나 다른 방식으로 결정할 수 있다. 유리하게도, SSE 명령어를 로딩하는 것에 응답하여, 코어들 중 하나(다수)는 선택된 적용 비율에 기초하 여 자신의 작동 주파수들을 (예를 들면, 1.8로부터 2.4 GHz로) 증가시키는 것에 의해 구성될 수 있다. AVX-512 명령어를 로딩하는 것에 응답하여, 코어들 중 하나(다수)는 선택된 적용 비율에 기초하여 자신의 작동 주 파수들을 (예를 들면, 1.8로부터 2.6 GHz로) 증가시키는 것에 의해 구성될 수 있다. 5G-ISA 명령어를 로딩하는 것에 응답하여, 코어들 중 하나(다수)는 선택된 적용 비율에 기초하여 자신의 작동 주파수들을 (예를 들 면, 1.8로부터 2.5 GHz로) 증가시키는 것에 의해 구성될 수 있다. 코어들이 이 예에서 명령어들 중 하나 (다수)를 실행하는 것으로 나타내어져 있지만, 상이한 시점 또는 동작에서, 코어들 중 하나(다수)는, 도 10의 명령어들(1004, 1006, 1008) 중 하나(다수)와 같은, 상이한 명령어들을 로딩할 수 있고 이에 의해 제1 명 령어 로딩 인스턴스(예를 들면, 도 10의 제1 명령어들 중 하나를 로딩하는 것)로부터 제2 명령어 로딩 인 스턴스(예를 들면, 제1 명령어들 중 하나를 사용하여 워크로드를 실행한 후에 도 10의 제2 명령어들 중 하나를 로딩하는 것)로 동적으로 구성될 수 있다. 도 14는 본 명세서에서 설명되는 예들을 구현하는 것에 의한 예시적인 예상된 시스템 레벨 성능 이득의 그래프 이다. 예를 들어, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은 예시적인 CPU는 종래의 CPU들에 비해 증가된 및/또는 다른 방식으로 개선된 성능을 실증한 다. 일부 그러한 예들에서, 예시적인 CPU가 vRAN(예를 들면, vRAN-CU, vRAN-DU 등)을 구현할 때 도 14에 묘사 된 개선이 실증될 수 있다. 도 14에서, P1n 상태 및 P0n 상태와 같은, CPU의 상이한 P-상태들에 대해 예시적인 CPU와 종래의 CPU 사이의 비 교들이 묘사되어 있다. 이 예에서, 제2 예시적인 비교는 예시적인 CPU의 총 32개의 코어 중 24개의 코어 가 AVX-512 명령어들을 실행하고 예시적인 CPU가 P1n P-상태에 있을 때 종래의 CPU와 예시적인 CPU 사이의 비교 를 묘사한다. 이 예에서, 제3 예시적인 비교는 예시적인 CPU의 총 32개의 코어 중 24개의 코어가 AVX- 512 명령어들을 실행하고 예시적인 CPU가 P0n P-상태에 있을 때 종래의 CPU와 예시적인 CPU 사이의 비교를 묘사 한다. 이 예에서, 제3 비교는 가장 높은 예상된 시스템 레벨 성능 이득을 실증한다. 일부 예들에서, P-상태는 CPU의 특성 묘사에 대응하고/하거나 다른 방식으로 이를 나타낸다. 예를 들어, P-상 태는 CPU의 속도와 전력 소비를 설정하는 전압-주파수 쌍일 수 있다. 예를 들어, P-상태는 주파수(예를 들면, 작동 주파수) 및 전압 작동점에 기초할 수 있다. 그러한 예들에서, P-상태가 증가함에 따라 주파수 및 전압 작 동점이 스케일링된다(예를 들면, 더 높게 스케일링됨). 일부 예들에서, CPU는 P0 P-상태 내지 Pn P-상태를 지 원한다. 특정 CPU가 지원하는 P-상태 수는 다양할 수 있지만 전형적으로 2개 이상이다. 도 15는 예시적인 멀티코어 컴퓨팅 시스템에 포함된 예시적인 멀티코어 CPU의 성능을 조정하는 것 의 예시이다. 이 예에서, 멀티코어 컴퓨팅 시스템은 1 소켓(1S) 또는 단일 소켓 서버이다. 예를 들어, 멀티코어 컴퓨팅 시스템은 도 1의 DU들, 도 1의 CU들, 도 1의 코어 서버들, 도 5의 제1 멀티코어 컴퓨팅 시스템, 도 5의 제2 멀티코어 컴퓨팅 시스템, 도 6의 제3 멀티코어 컴퓨팅 시스템 , 도 7의 제4 멀티코어 컴퓨팅 시스템, 및/또는 이들의 부분(들)을 구현할 수 있다. 이 예에서, 멀 티코어 CPU는 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등을 구현할 수 있다. 이 예에서, 멀티코어 CPU는 제1 예시적인 코어 및 제2 예시적인 코어를 포함한다. 이 예에 서, 제1 코어들은, SSE 워크로드들과 같은, 예시적인 비-AVX 워크로드들을 프로세싱하기 위해 제1 머신 판독 가능 명령어들(예를 들면, SSE 명령어들)을 실행한다. 이 예에서, 제2 코어들은 예시적인 AVX-512 워크로드들을 프로세싱하기 위해 제2 머신 판독 가능 명령어들(예를 들면, AVX-512 명령어들)을 실행한다.도 15의 예시된 예에서, 코어들(1504, 1506) 중 하나(다수)는 코어들(1504, 1506) 중 하나(다수)에 의한 실행을 위해 로딩될 명령어(예를 들면, SSE 명령어, AVX-512 명령어 등)에 기초하여 런타임 시에 동적으로 구성될 수 있다. 일부 예들에서, 코어들(1504, 1506) 중 하나(다수)에 대응하는 언코어(들)는 멀티코어 CPU에 의해 프로세싱될 네트워크 워크로드와 연관될 수 있는 명령어, 네트워크 노드 위치, 지연시간 요구사항, 전력 요구사 항, 처리량 요구사항 등에 기초하여 런타임 시에 동적으로 구성될 수 있다. 제1 예시적인 구성에서, 멀티코어 CPU의 모든 코어들은 비-AVX 워크로드들을 실행하기 위해 제1 머신 판독 가능 명령어들을 실행한다. 일부 그러한 예들에서, 코어들 중 하나 이상은 2.1 GHz의 결정적 속 도에서 또는 3.1 GHz의 터보 속도에서 작동할 수 있다. 제2 예시적인 구성에서, 멀티코어 CPU의 모든 코어들은 AVX-512 워크로드들을 실행하기 위해 제2 머신 판독 가능 명령어들을 실행한다. 일부 그 러한 예들에서, 코어들 중 하나 이상은 1.4 GHz의 결정적 속도에서 또는 2.4 GHz의 터보 속도에서 작동할 수 있 다. 일부 예들에서, 제1 구성 및/또는 제2 구성은 멀티코어 CPU의 제1 적용 비율에 기초할 수 있다. 제3 예시적인 구성에서, P1n 상태에 있는 동안 멀티코어 CPU의 코어들(예를 들면, 제1 코어들 ) 중 8개는 비-AVX 워크로드들을 실행하기 위해 제1 머신 판독 가능 명령어들을 실행하고, 코어들 (예를 들면, 제2 코어들) 중 24개는 AVX-512 워크로드들을 실행하기 위해 제2 머신 판독 가능 명령 어들을 실행한다. 일부 그러한 예들에서, 제1 코어들은 1.8 GHz의 SSE 속도에서 또는 2.4 GHz의 터보 속 도에서 작동할 수 있다. 일부 그러한 예들에서, 제2 코어들은 1.8 GHz의 결정적 주파수에서 또는 2.6 GHz의 터보 속도에서 작동할 수 있다. 일부 예들에서, 제3 구성은 제1 구성 및/또는 제2 구성 과 관련하여 제1 적용 비율과 상이한 멀티코어 CPU의 제2 적용 비율에 기초할 수 있다. 도 16은 제1 예시적인 코어 할당 및 제1 예시적인 전력 버짓을 사용하는 예시적인 네트워크 워크로드에 기초하 여, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 예 시적인 멀티코어 CPU의 성능을 조정하는 것의 제1 예시적인 구성의 예시이다. 이 예에서, 제1 코어 할당 은 SSE 코어들(예를 들면, SSE 명령어들을 실행하도록 구성된 코어들)로서 구성된 총 32개의 코어 중 8개와 AVX-512/5G-ISA 코어들(예를 들면, AVX-512 및/또는 5G-ISA 명령어들을 실행하도록 구성된 코어들)로서 구성된 총 32개 코어 중 24개이다. 이 예에서, 제1 전력 버짓 또는 열 설계 전력(TDP) 제약 또는 경계는 185 와트(W) 이다. 이 예에서, TDP는, 전력 버짓 임계값, TDP 임계값, 열 임계값 등과 같은, 임계값을 구현할 수 있다. 예 를 들어, 멀티코어 CPU의 런타임 동안, 총 32개의 코어 중 최대 24개는 185 W의 TDP를 위반하지 않으면서 AVX- 512/5G-ISA 명령어들을 로딩할 수 있다. 일부 그러한 예들에서, 최대 32개의 코어는 185 W의 TDP를 위반하지 않으면서 SSE 명령어들을 로딩할 수 있다. 일부 그러한 예들에서, 총 32개의 코어 중 24개 초과가 AVX-512/5G- ISA(예를 들면, AVX-512+5G-ISA) 명령어들을 로딩할 수 있게 하는 것은 멀티코어 CPU로 하여금 185 W 초과를 소 비하게 할 수 있다. 도 16의 예시된 예에서, SSE 코어는 1.8 GHz의 기본 주파수에서 또는 2.7 GHz의 터보 주파수에서 작동할 수 있 다. 이 예에서, AVX-512/5G-ISA 코어는 1.8 GHz의 기본 주파수에서 또는 2.6 GHz의 터보 주파수에서 명령어들 을 작동시키고/시키거나 다른 방식으로 실행할 수 있다. 유리하게도, 도 16의 예시된 예는 코어들의 그러한 구 성이, 32개의 코어 모두가 SSE 명령어들을 실행하거나 32개의 코어 모두가 AVX-512/5G-ISA 명령어들을 실행하는 구성과 비교하여, 코어들이 더 높은 주파수들에서 작동할 수 있게 할 수 있다는 것을 실증한다. 일부 예들에서, 제1 구성은 멀티코어 CPU의 제1 적용 비율에 기초할 수 있다. 도 17은 제2 예시적인 코어 할당 및 제2 예시적인 전력 버짓을 사용하는 예시적인 네트워크 워크로드에 기초하 여, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 예 시적인 멀티코어 CPU의 성능을 조정하는 것의 제2 예시적인 구성의 예시이다. 이 예에서, 제2 코어 할당 은 SSE 코어들(예를 들면, SSE 명령어들을 실행하도록 구성된 코어들)로서 구성된 총 32개의 코어 중 16개와 AVX-512/5G-ISA 코어들(예를 들면, AVX-512 및/또는 5G-ISA 명령어들을 실행하도록 구성된 코어들)로서 구성된 총 32개 코어 중 16개이다. 이 예에서, 제2 전력 버짓은 185 W이다. 이 예에서, 멀티코어 CPU의 런타임 동안, 총 32개의 코어 중 최대 16 개는 185 W의 TDP를 위반하지 않으면서 AVX-512/5G-ISA 명령어들을 로딩할 수 있다. 일부 그러한 예들에서, 최 대 32개의 코어는 185 W의 TDP를 위반하지 않으면서 SSE 명령어들을 로딩할 수 있다. 일부 그러한 예들에서, 총 32개의 코어 중 16개 초과가 AVX-512/5G-ISA 명령어들을 로딩할 수 있게 하는 것은 멀티코어 CPU로 하여금 185 W 초과를 소비하게 할 수 있다. 도 17의 예시된 예에서, SSE 코어는 2.1 GHz의 기본 주파수에서 또는 2.7GHz의 터보 주파수에서 작동할 수 있다. 이 예에서, AVX-512/5G-ISA 코어는 1.8 GHz의 기본 주파수에서 또는 2.3 GHz의 터보 주파수에서 명령어들을 작동시키고/시키거나 다른 방식으로 실행할 수 있다. 일부 예들에서, 제2 구성은, 위에서 설명된 바와 같이 도 16의 예시된 예와 관련한 제1 적용 비율과 상이할 수 있는, 멀 티코어 CPU의 제2 적용 비율에 기초할 수 있다. 도 18은 제3 예시적인 코어 할당 및 제3 예시적인 전력 버짓을 사용하는 예시적인 네트워크 워크로드에 기초하 여, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 예 시적인 멀티코어 CPU의 성능을 조정하는 것의 제3 예시적인 구성의 예시이다. 이 예에서, 제3 코어 할당 은 SSE 코어들(예를 들면, SSE 명령어들을 실행하도록 구성된 코어들)로서 구성된 총 32개의 코어 중 8개와 AVX-512/5G-ISA 코어들(예를 들면, AVX-512 및/또는 5G-ISA 명령어들을 실행하도록 구성된 코어들)로서 구성된 총 32개 코어 중 24개이다. 이 예에서, 제3 전력 버짓은 225 W이다. 이 예에서, 멀티코어 CPU의 런타임 동안, 총 32개의 코어 중 최대 24 개는 225 W의 TDP를 위반하지 않으면서 AVX-512/5G-ISA 명령어들을 로딩할 수 있다. 일부 그러한 예들에서, 최 대 32개의 코어는 225 W의 TDP를 위반하지 않으면서 SSE 명령어들을 로딩할 수 있다. 일부 그러한 예들에서, 총 32개의 코어 중 24개 초과가 AVX-512/5G-ISA 명령어들을 로딩할 수 있게 하는 것은 멀티코어 CPU로 하여금 225 W 초과를 소비하게 할 수 있다. 도 18의 예시된 예에서, SSE 코어는 2.4 GHz의 기본 주파수에서 또는 3.0 GHz의 터보 주파수에서 작동할 수 있다. 이 예에서, AVX-512/5G-ISA 코어는 2.3 GHz의 기본 주파수에서 또는 2.6 GHz의 터보 주파수에서 명령어들을 작동시키고/시키거나 다른 방식으로 실행할 수 있다. 일부 예들에서, 제3 구성은, 위의 도 16의 예와 관련한 제1 적용 비율 및/또는 위의 도 17의 예와 관련한 제2 적용 비율 과 상이할 수 있는, 멀티코어 CPU의 제3 적용 비율에 기초할 수 있다. 도 19은 제4 예시적인 코어 할당 및 제4 예시적인 전력 버짓을 사용하는 예시적인 네트워크 워크로드에 기초하 여, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 예 시적인 멀티코어 CPU의 성능을 조정하는 것의 제4 예시적인 구성의 예시이다. 이 예에서, 제4 코어 할당 은 SSE 코어들(예를 들면, SSE 명령어들을 실행하도록 구성된 코어들)로서 구성된 총 32개의 코어 중 16개와 AVX-512/5G-ISA 코어들(예를 들면, AVX-512 및/또는 5G-ISA 명령어들을 실행하도록 구성된 코어들)로서 구성된 총 32개 코어 중 16개이다. 이 예에서, 제4 전력 버짓은 225 W이다. 이 예에서, 멀티코어 CPU의 런타임 동안, 총 32개의 코어 중 최대 16 개는 225 W의 TDP를 위반하지 않으면서 AVX-512/5G-ISA 명령어들을 로딩할 수 있다. 일부 그러한 예들에서, 최 대 32개의 코어는 225 W의 TDP를 위반하지 않으면서 SSE 명령어들을 로딩할 수 있다. 일부 그러한 예들에서, 총 32개의 코어 중 16개 초과가 AVX-512/5G-ISA 명령어들을 로딩할 수 있게 하는 것은 멀티코어 CPU로 하여금 225 W 초과를 소비하게 할 수 있다. 도 19의 예시된 예에서, SSE 코어는 2.5 GHz의 기본 주파수에서 또는 3.0 GHz의 터보 주파수에서 작동할 수 있다. 이 예에서, AVX-512/5G-ISA 코어는 2.5 GHz의 기본 주파수에서 또는 2.8 GHz의 터보 주파수에서 명령어들을 작동시키고/시키거나 다른 방식으로 실행할 수 있다. 일부 예들에서, 제4 구성은, 위의 도 16의 예와 관련한 제1 적용 비율, 위의 도 17의 예와 관련한 제2 적용 비율, 및/또 는 위의 도 18의 예와 관련한 제3 적용 비율과 상이할 수 있는, 멀티코어 CPU의 제4 적용 비율에 기초할 수 있 다. 도 20은 소켓별로 및 코어별로 예시적인 멀티코어 CPU의 성능을 조정하는 것의 예시이다. 이 예에서, 멀 티코어 CPU의 32개의 코어 모두는 소켓별로 구성될 때 P0n 상태(예를 들면, 터보 상태) 또는 P1n 상태(예 를 들면, 기본 상태)에서 작동한다. 이 예에서, 멀티코어 CPU의 32개의 코어 중 24개는 코어별로 구성될 때 AVX-512 및/또는 5G-ISA 명령어들을 실행하기 위해 P0n 상태(예를 들면, 터보 상태) 또는 P1n 상태(예를 들 면, 기본 상태)에서 작동할 수 있다. 이 예에서, 멀티코어 CPU의 최대 32개의 코어는 코어별로 구성될 때 SSE 명령어들을 실행하기 위해 P0n 상태(예를 들면, 터보 상태) 또는 P1n 상태(예를 들면, 기본 상태)에서 작동할 수 있다. 이 예에서, 멀티코어 CPU의 코어들 모두는 소켓별로 멀티코어 CPU를 구성하는 것에 의해 더 낮은 기본 주파수(예를 들면, 더 낮은 SSE 주파수, 더 낮은 AVX 주파수 등)를 겪는다. 유리하게도, 이 예에서, 멀티 코어 CPU의 코어들 중 일부는 소켓별로 구성하는 것과 비교할 때 코어별로 멀티코어 CPU를 구성하 는 것에 의해 더 높은 기본 주파수(예를 들면, 더 높은 SSE 주파수, 더 높은 AVX 주파수 등)에서 작동한다. 추 가적으로 또는 대안적으로, 멀티코어 CPU는 언코어별로 및/또는 CLM별로 조정될 수 있다. 유리하게도, 도 20의 예에 예시된 바와 같이, 코어별로 멀티코어 CPU를 구성하는 것은 본 명세서에서 설명되는 바와같이 네트워크 워크로드들을 실행할 때 소켓별로 멀티코어 CPU를 구성하는 것에 대해 증가된 성능, 감소 된 지연시간 등을 달성할 수 있다. 도 21은 상이한 예시적인 전력 버짓들(예를 들면, 185 W, 225 W, 250 W, 300 W 등, 전력 버짓들)에 기초하여 예 시적인 워크로드 조정 가능한 CPU들(2102, 2104, 2106, 2108)의 성능을 조정하는 것의 예시이다. 이 예에서, 워크로드 조정 가능한 CPU들(2102, 2104, 2106, 2108)은 제1 SKU(SKU 1)를 나타내는 제1 예시적인 CPU, 제2 SKU(SKU 2)를 나타내는 제2 예시적인 CPU, 제3 SKU(SKU 3)를 나타내는 제3 예시적인 CPU, 및 제4 SKU(SKU 4)를 나타내는 제4 예시적인 CPU를 포함한다. 유리하게도, 워크로드 조정 가능한 CPU들(2102, 2104, 2106, 2108) 중 하나 이상은 상이한 워크로드들을 프로세 싱하기 위해 코어별로, 언코어별로, 및/또는 CLM별로 구성될 수 있다. 유리하게도, 워크로드 조정 가능한 CPU 들(2102, 2104, 2106, 2108) 중 하나 이상이 vRAN-DU, vRAN-CU, 코어 서버 등을 구현하기 위해 5G 환경에 배포 될 수 있다. 예를 들어, 제1 워크로드 조정 가능한 CPU는 vRAN-DU, vRAN-CU, 코어 서버 등을 구현하기 위해 코어별로, 언코어별로 및/또는 CLM별로 구성될 수 있다. 예를 들어, 최종 사용자 또는 고객은 CPU 제조업 체에 동일한 SKU 1을 주문하는 동안 제1 워크로드 조정 가능한 CPU의 제1 인스턴스를 vRAN-DU로서 배포하 고, 제1 워크로드 조정 가능한 CPU의 제2 인스턴스를 vRAN-CU로서 배포하며, 제1 워크로드 조정 가능한 CPU의 제3 인스턴스를 코어 서버로서 배포할 수 있다. 일부 예들에서, 제1 워크로드 조정 가능한 CPU의 코어들의 제1 부분은 vRAN-DU를 구현할 수 있는 반면, 제1 워크로드 조정 가능한 CPU의 코어 들의 제2 부분은 vRAN-CU를 구현할 수 있고/있거나 제1 워크로드 조정 가능한 CPU의 코어들의 제3 부분은 코어 서버를 구현할 수 있다. 일부 그러한 예들에서, 코어들의 제1 부분에 대응하는 언코어 로직의 제1 부분은 vRAN-DU를 구현하기 위해 처리량을 개선시키고 지연을 감소시키도록 구성될 수 있다. 예를 들어, 언코어 로직 의 제1 부분은 언코어 로직에 포함된 CMS, 메시 인터페이스, 및/또는 I/O의 주파수를 증가시키는 것에 의해 구 성될 수 있다. 일부 그러한 예들에서, 코어들의 제1 부분 및/또는 언코어 로직의 제1 부분에 대응하는 CLM들의 제1 부분은 vRAN-DU를 구현하기 위해 처리량을 개선시키고 지연을 감소시키도록 구성될 수 있다. 예를 들어, CLM들의 제1 부분은 CLM들에서의 CMS, LLC, CHA 및/또는 I/O 버퍼의 주파수를 증가시키는 것에 의해 구성될 수 있다. 도 22는 예시적인 네트워크 워크로드들의 프로세싱을 실시하기 위한 예시적인 머신 판독 가능 명령어들(2202, 2204)의 테이블이다. 이 예에서, 머신 판독 가능 명령어들(2202, 2204)은 예시적인 네이티브 float-16 데이터 유형 명령어들 및 예시적인 복소수 산술 명령어들을 포함한다. 유리하게도, 머신 판독 가 능 명령어들(2202, 2204) 중 하나(다수)는 5G-ISA 워크로드들을 프로세싱하기 위해 본 명세서에서 설명되는 바 와 같이 예시적인 멀티코어 CPU(예를 들면, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU 등) 에 의해 활용될 수 있고/있거나 다른 방식으로 호출될 수 있다. 유리하게도, 그러한 5G-ISA 워크로드들은 새로 운 운영 체제(OS)가 설치되지 않고 수행될 수 있다. 유리하게도, 그러한 5G-ISA 워크로드들은 AVX-512 인프라 스트럭처(예를 들면, 레거시 또는 기존의 AVX-512 인프라스트럭처)를 활용하는 것에 의해 가상 머신 관리자 (VMM) 종속성 없이 수행될 수 있다. 도 23은, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 본 명세서에서 설명되는 바와 같은 예시적인 멀티코어 CPU에 의해 구현될 수 있는 예시적인 알고리즘들의 테이블이다. 유리하게도, 본 명세서에서 설명되는 바와 같은 예시적인 멀티코어 CPU(들)는 5G 네트워크 워크로드들을 프로세싱하기 위해, 도 10의 제3 명령어들과 같은, 5G-ISA 명령어들을 실행할 수 있다. 예 를 들어, 예시적인 멀티코어 CPU(들)는 1-섹터 8x8 또는 3-섹터 4-4 명령어들을 실행하는 것에 의해 새로운 5G 무선 액세스 기술(RAT) 알고리즘을 사용하여 채널 추정을 구현하기 위해 제1 5G-ISA 명령어(들)를 실행하는 것 에 의해 5G 네트워크 워크로드들을 실행한다. 유리하게도, 테이블에 설명된 알고리즘들은 종래의 멀티코 어 CPU들과 비교하여 개선된 성능 및/또는 효율성(예를 들면, 더 적은 CPU 코어 이용률)으로 5G 관련 네트워크 워크로드들을 실행하기 위해 본 명세서에서 설명되는 바와 같은 예시적인 멀티코어 CPU(들)에 의해 구현될 수 있다. 도 24는, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 예시적인 멀티코어 CPU를 사용하여 단정도 부동 소수점 계산을 프로세싱하는 것과 관련한 예시적인 속도 향상 값들의 그래프이다. 이 예에서, 예시적인 채널 추정 알고리즘(예를 들면, 하나 이상의 채널 추정 워크로드 및/또는 작업)에 대한 1.31의 제1 예시적인 속도 향상 값은 종래의 멀티코어 CPU가 동일한 채널 추정 워크로드를 완료하는 것에 비해 예시적인 멀티코어 CPU가 채널 추정 워크로드를 완료하는 것에 대한 속도 향상의 31% 증가를 나타낼 수 있다. 유리하게도, 예시적인 멀티코어 CPU는 도 23에 묘사된 채널 추정 알고리즘(들)을 구현하는 것에 의해 채널 추정 워크로드를 프로세싱할 수 있다. 도 25는 종래의 CPU를 사용하여 예시적인 복소수 곱셈 연산을 실행하는 것의 예시이다. 이 예에서, 종래 의 CPU는 2개의 복제(예를 들면, 허수 복제 연산 및 실수 복제 연산), 하나의 실수/허수 스왑, 및 2개의 융합 곱셈(예를 들면, 융합 곱셈 및 융합 곱셈-덧셈-뺄셈 연산)을 포함하는 시퀀스를 실행한다. 일부 경우에, 2개의 복제가 로드 유닛에 의해 수행될 수 있으며, 이에 의해 본질적으로 자유로운 연산이 된다. 일부 그러한 경우에, 이 예에 묘사된 시퀀스는 3개의 명령어를 포함한다. 도 26은 종래의 CPU를 사용하여 예시적인 복소수 곱셈 연산을 실행하는 것의 제1 예시적인 시퀀스 및, 도 5의 제1 멀티코어 CPU, 도 2의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 본 명세서 에서 설명되는 바와 같은 예시적인 멀티코어 CPU를 사용하여 복소수 곱셈 연산을 실행하는 것의 제2 예시적인 시퀀스의 예시이다. 이 예에서, 제1 시퀀스를 실행하는 데 5개의 명령어가 필요하고, 제2 시퀀스 를 실행하는 데 하나의 명령어(예를 들면, 하나의 5G-ISA 명령어)가 필요하다. 유리하게도, 본 명세서에 서 설명되는 바와 같은 멀티코어 CPU는, AVX-512 명령어들과 같은, 다른 유형들의 명령어들에 대해 워크로드를 실행하는 데 5G-ISA 명령어들을 활용하는 것에 의해, 증가된 성능, 감소된 지연시간 등을 달성할 수 있다. 유리하게도, 본 명세서에서 설명되는 바와 같은 예시적인 멀티코어 CPU에서의 복소수 산술 명령어들은 5G 무선 기저대역에서 사용되는 특수 DSP들은 물론 인접한 신호 프로세싱 워크로드들과의 계산 격차를 감소시킨다. 유 리하게도, 고객 또는 최종 사용자는 워드 프로세싱 소프트웨어를 실행하는 것과 같은 전형적인 컴퓨팅 작업들에 서부터 5G 네트워크 워크로드들을 프로세싱하기 위한 복소수 산술 명령어들에 이르기까지 다양한 워크로드들에 대해 본 명세서에서 설명되는 바와 같은 예시적인 멀티코어 CPU를 배포할 수 있다. 유리하게도, CPU 제조업체 는 동일한 SKU(예를 들면, 동일한 하드 SKU)를 사용하여 상이한 고객들에게 동일한 멀티코어 CPU를 배포할 수 있고 배포 후에 소프트웨어로 활성화되는(software activated) 특징들을 사용하여 상이한 SKU들(예를 들면, 상 이한 소프트 SKU들)을 구현하도록 멀티코어 CPU를 구성할 수 있다. 일부 예들에서, 멀티코어 CPU는 프로세싱될 워크로드를 식별하기 위해 그리고 워크로드들의 배포 및 실행을 위한 SKU들 중 하나와 연관된 구성을 식별하기 위해 하나 이상의 머신 러닝 모델을 실행할 수 있다. 도 27은, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU, 도 8의 프로세서 등과 같은, 예시적인 워크로드 조정 가능한 CPU에 의해 구현될 수 있는 예시적인 구성들을 포함하는 예시적인 구성 정보의 예시이다. 예를 들어, 구성들은 적용 비율에 기초하여 네트워크 워크로드들의 최적화된 및/또는 다른 방식으로 개선된 실행을 위해 워크로드 조정 가능한 CPU의 페르소나 또는 프로파일을 구현할 수 있다. 구성들은, CPU 구성들과 같은, 프로세서 구성들이며, 제1 예시적인 구성 (CPU CONFIG 0), 제2 예시적인 구성(CPU CONFIG 1), 및 제3 예시적인 구성(CPU CONFIG 2)을 포함한다. 대안적 으로, 도 27의 예시된 예에 묘사된 것보다 더 적은 또는 더 많은 구성들이 있을 수 있다. 도 27의 예시된 예에서, 구성들 각각은 상이한 네트워크 워크로드들에 대응하는 상이한 유형들의 명령어 들을 실행하는 데 사용되는 상이한 보장된 작동 주파수들을 갖는다. 예를 들어, CPU CONFIG 0은 P1 상태에서 작동하는 경우 SSE 명령어들을 실행할 때 2.3 GHz의 보장된 작동 주파수를 갖고, P1 상태에서 작동하는 경우 AVX-512 명령어들을 실행할 때 1.8 GHz의 보장된 작동 주파수를 가지며, P1 상태에서 작동하는 경우 AVX-512 5G-ISA 명령어들을 실행할 때 1.5 GHz의 보장된 작동 주파수를 가질 수 있다. 이 예에서, CPU CONFIG 0은 185 W의 TDP, 26의 코어 수(예를 들면, 인에이블될 26개의 코어), 및 섭씨 91도의 열 접합 온도를 갖는다. 이 예에 서 추가로 묘사되는 바와 같이, CPU CONFIG 0은 터보 상태 또는 모드에서 작동하는 경우 SSE 명령어들을 실행할 때 모든 코어들(예를 들면, 26의 코어 수와 연관된 26개의 코어 모두)에 대해 3.0 GHz의 보장된 작동 주파수를 갖고, 터보 상태 또는 모드에서 작동하는 경우 AVX-512 명령어들을 실행할 때 모든 코어들에 대해 2.5 GHz의 보 장된 작동 주파수를 가지며, 터보 상태 또는 모드에서 작동하는 경우 AVX-512 5G-ISA 명령어들을 실행할 때 모 든 코어들에 대해 2.0 GHz의 보장된 작동 주파수를 갖는다. 이 예에서, CPU CONFIG 0은 P0 상태(예를 들면, 터보 모드 또는 상태)에서 작동할 때 대응하는 CLM들에 대해 2.4 GHz의 보장된 작동 주파수를 갖고 P1 모드에서 작동할 때 대응하는 CLM들에 대해 1.8 GHz의 보장된 작동 주 파수를 갖는다. 일부 예들에서, 구성 정보 또는 그의 부분(들)은 멀티코어 CPU에 저장된다. 예를 들어, 구성 정보는, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 멀티코어 CPU의 NVM, ROM 등에 저장될 수 있다. 일부 그러한 예들에서, 구성들의 구성들 간 의 변화는 워크로드 조정 가능한 CPU의 레지스터(들)에 저장된 데이터를 검색하는 것 및/또는 레지스터(들)에 저장된 데이터를 업데이트 또는 수정하는 것을 포함할 수 있다. 예를 들어, 도 8의 프로세서는 도 8의 메모리에서의 구성(들)에 저장된 레지스터로부터 제1 값을 검색하는 것에 의해 CPU CONFIG 0을 나타내 는 제1 값을 결정할 수 있다. 일부 그러한 예들에서, 프로세서는 제1 값을 CPU CONFIG 1을 나타내는 제2 값으로 업데이트할 수 있다. 일부 그러한 예들에서, 프로세서는 레지스터의 값들의 변화에 응답하여 SSE P1 주파수를 2.3으로부터 2.8 GHz로, AVX-512 P1 주파수를 1.5로부터 1.7 GHz로, 기타 등등으로 조정하고/하거 나 다른 방식으로 스케일링할 수 있다. 도 28은, 도 5의 제1 멀티코어 CPU, 도 2의 제2 멀티코어 CPU, 도 3의 멀티코어 CPU, 도 8의 프로세서 등과 같은, 예시적인 워크로드 조정 가능한 CPU의 언코어 주파수(GHz로 측정됨)와 관련한 예시적 인 처리량, 지연시간, 및 전력 파라미터들의 테이블이다. 예를 들어, 언코어 주파수는 CMS, 메시 인터페이스, I /O, 및/또는, 보다 일반적으로, 도 8과 관련하여 위에서 설명된 언코어 로직의 UCLK 주파수에 대응할 수 있다. 이 예에서, 테이블의 처리량 파라미터는 초당 패킷 수로 계산되고, 결정되며/되거나 다른 방식으로 측정 된다. 예를 들어, 처리량 파라미터의 값은 언코어 로직이 지정된 언코어 주파수에서 프로세싱할 수 있는 초당 패킷 수에 대응할 수 있다. 대안적으로, 처리량 파라미터는 임의의 다른 측정 단위를 사용하여 계산될 수 있다. 일부 예들에서, 도 8의 PMU는 처리량 파라미터의 값들을 계산할 수 있다. 이 예에서, 테이블의 최소 지연시간 파라미터(MIN LATENCY)는 나노초(ns)로 계산되고, 결정되며/되거나 다른 방식으로 측정된다. 예를 들어, 최소 지연시간 파라미터의 값은 언코어 로직이 지정된 언코어 주파 수에서 패킷들을 프로세싱하고 있는 시간 기간 동안 식별되는 가장 낮은 측정된 지연시간에 대응할 수 있다. 대안적으로, 최소 지연시간 파라미터는 임의의 다른 측정 단위를 사용하여 계산될 수 있다. 일부 예들에서, 도 8의 PMU는 최소 지연시간 파라미터의 값들을 계산할 수 있다. 이 예에서, 테이블의 최대 지연시간 파라미터(MAX LATENCY)는 나노초(ns)로 계산되고, 결정되며/되거나 다른 방식으로 측정된다. 예를 들어, 최대 지연시간 파라미터의 값은 언코어 로직이 지정된 언코어 주파 수에서 패킷들을 프로세싱하고 있는 시간 기간 동안 식별되는 가장 높은 측정된 지연시간에 대응할 수 있다. 대안적으로, 최대 지연시간 파라미터는 임의의 다른 측정 단위를 사용하여 계산될 수 있다. 일부 예들에서, 도 8의 PMU는 최대 지연시간 파라미터의 값들을 계산할 수 있다. 이 예에서, 테이블의 평균 지연시간 파라미터(AVG LATENCY)는 나노초(ns)로 계산되고, 결정되며/되거나 다른 방식으로 측정된다. 예를 들어, 평균 지연시간 파라미터의 값은 언코어 로직이 지정된 언코어 주파 수에서 패킷들을 프로세싱하고 있는 시간 기간 동안의 평균 측정된 지연시간에 대응할 수 있다. 대안적으로, 평균 지연시간 파라미터는 임의의 다른 측정 단위를 사용하여 계산될 수 있다. 일부 예들에서, 도 8의 PMU는 평균 지연시간 파라미터의 값들을 계산할 수 있다. 이 예에서, 테이블의 전력 파라미터(METRIC PACKAGE POWER)는 와트로 계산되고, 결정되며/되거나 다른 방 식으로 측정된다. 예를 들어, 전력 파라미터의 값은 언코어 로직이 지정된 언코어 주파수에서 패킷들을 프로세싱하는 시간 기간 동안 식별되는 도 8의 멀티코어 프로세서 패키지의 측정된 전력에 대응할 수 있다. 대안적으로, 전력 파라미터는 임의의 다른 측정 단위를 사용하여 계산될 수 있다. 일부 예들에서, 도 8 의 PMU 및/또는 도 8의 전력 버짓 분석기는 처리량 파라미터의 값들을 계산할 수 있다. 유리하게도, 언코어 로직은 언코어 로직의 주파수를 증가시키는 것에 응답하여 처리량을 증가시키고/ 시키거나 다른 방식으로 개선시킬 수 있다. 유리하게도, 언코어 로직은 언코어 로직 또는 그의 부분 (들)의 주파수를 증가시키는 것에 응답하여 지연시간을 감소시키고/시키거나 다른 방식으로 줄일 수 있다. 이 예에서, 처리량 파라미터, 최소 지연시간 파라미터, 최대 지연시간 파라미터, 평균 지연시간 파라미터, 또는 전 력 파라미터 중 적어도 하나는 선형이 아니다. 예를 들어, 언코어 주파수를 2.0 GHz 초과로 증가시키는 것에 의해 처리량 파라미터를 증가시키는 데 수확 체감(diminishing returns)(예를 들면, 근소한 변화)이 있을 수 있 다. 일부 예들에서, 2.3 GHz에서 작동할 때 언코어 로직에 의해 달성되는 최적화된 및/또는 다른 방식으 로 개선된 최대 지연시간이 있을 수 있다. 예를 들어, 언코어 주파수를 2.0 GHz로부터 2.3 GHz로 증가시키는 것에 응답하여 처리량의 근소한 증가가 있을 수 있지만, 최소 지연시간, 최대 지연시간, 또는 평균 지연시간 중 적어도 하나에 대해 상당한 감소가 달성될 수 있다. 도 29는, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 예시적인 워크로드 조정 가능한 CPU의 예시적인 정적 구성의 예시이다. 이 예에서, 정적 구성 은 워크로드 조정 가능한 CPU의 BIOS에서 액세스되고/되거나 다른 방식으로 구성될 수 있다. 예를 들어,Intel®에 의해 제공되는 바와 같은 동적 SST(speed select technology) 전력 프로파일들(PP)이 디스에이블된 다. 일부 그러한 예들에서, 워크로드 조정 가능한 CPU의 16개의 코어는 18의 P1 비율 및 185 W의 TDP를 갖는 기본 구성으로 구성될 수 있다. 도 30는, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 예시적인 워크로드 조정 가능한 CPU의 예시적인 동적 구성의 예시이다. 이 예에서, 동적 구성 은 워크로드 조정 가능한 CPU의 BIOS에서 액세스되고/되거나 다른 방식으로 구성될 수 있다. 예를 들어, 동적 SST-PP가 인에이블된다. 그러한 일부 예들에서, 워크로드 조정 가능한 CPU의 코어(들)는 워크로드 조정 가능한 CPU의 제1 구성(Base), 제2 구성(Config 1), 또는 제3 구성(Config 2)에 기초하여 코어별로, 언코어별 로, 및/또는 CLM별로 구성될 수 있다. 유리하게도, 워크로드 조정 가능한 CPU는 코어(들)에 로딩될 명령어에 의해 표시될 수 있는 코어(들)에 의해 실행될 워크로드에 기초하여 코어(들)를 구성할 수 있다. 도 31a는 예시적인 워크로드들(3104, 3106, 3108)에 기초한 예시적인 워크로드 조정 가능한 CPU의 코어 (들) 및 언코어(들)에 대한 예시적인 전력 조정들의 예시이다. 예를 들어, 워크로드 조정 가능한 CPU는 멀티 SKU CPU일 수 있다. 그러한 예들에서, 워크로드 조정 가능한 CPU는 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등을 구현할 수 있다. 이 예에서, 워크로드들(3104, 3106, 3108)은 제1 예시 워크로드, 제2 예시 워크로드, 및 제3 예시 워크로드를 포함한다. 이 예에서, 제1 워크로드는 5G 네트워크를 실시하는 것과 연관된 사용자 평면 기능(UPF) 애플리케이션이 다. 이 예에서, 제2 워크로드는 IP 멀티미디어 시스템 서비스(IMS) 애플리케이션이다. 이 예에서, 제3 워크로드는 차세대 방화벽(NGFW) 애플리케이션이다. 도 31a의 예시된 예에서, 제1 워크로드를 실행하는 것에 응답하여, 워크로드 조정 가능한 CPU는 코 어(들)를 제1 예시적인 구성(CONFIG 0)으로 전환할 수 있다. 이 예에서, 제1 구성은 0.74(예를 들면, 위에서 설명된 바와 같이 프로세서 코어에 대해 계산되는 바와 같은 Power Virus Cdyn의 74%)의 적용 비율 로 제1 워크로드를 실행하는 코어(들)를 구성하는 것 및 1.5(예를 들면, 위에서 설명된 바와 같이 언코어 하드웨어에 대해 계산되는 바와 같은 Power Virus Cdyn의 150%)의 적용 비율로 코어(들)에 대응하는 언코어(들) 를 구성하는 것을 포함한다. 일부 예들에서, 적용 비율들은 1.0보다 클 수 있지만 패널티들이 발생될 수 있다. 유리하게도, 언코어(들)가 1.5의 적용 비율에 기초하여 구성되는 것에 응답하여, 그의 작동 주파수는 증가된 처 리량 및/또는 감소된 지연시간으로 제1 워크로드를 실행하도록 증가될 수 있다. 도 31a의 예시된 예에서, 제2 워크로드를 실행하는 것에 응답하여, 워크로드 조정 가능한 CPU는 코 어(들)를 제2 예시적인 구성(CONFIG 1)으로 전환할 수 있다. 이 예에서, 제2 구성은 0.65(예를 들면, 위에서 설명된 바와 같이 프로세서 코어에 대해 계산되는 바와 같은 Power Virus Cdyn의 65%)의 적용 비율 로 제2 워크로드를 실행하는 코어(들)를 구성하는 것 및 1.0(예를 들면, 위에서 설명된 바와 같이 언코어 하드웨어에 대해 계산되는 바와 같은 Power Virus Cdyn의 100%)의 적용 비율로 코어(들)에 대응하는 언코어(들) 를 구성하는 것을 포함한다. 유리하게도, 언코어(들)가 1.0의 적용 비율에 기초하여 구성되는 것에 응답하여, 그의 작동 주파수는 증가된 처리량 및/또는 감소된 지연시간으로 제2 워크로드를 실행하도록 증가될 수 있다. 도 31a의 예시된 예에서, 제3 워크로드를 실행하는 것에 응답하여, 워크로드 조정 가능한 CPU는 코 어(들)를 제3 예시적인 구성(CONFIG 2)으로 전환할 수 있다. 이 예에서, 제3 구성은 1.0(예를 들 면, 위에서 설명된 바와 같이 프로세서 코어에 대해 계산되는 바와 같은 Power Virus Cdyn의 100%)의 적용 비율 로 제1 워크로드를 실행하는 코어(들)를 구성하는 것 및 1.0(예를 들면, 위에서 설명되는 언코어 하드웨 어에 대해 계산되는 바와 같은 Power Virus Cdyn의 100%)의 적용 비율로 코어(들)에 대응하는 언코어(들)를 구성 하는 것을 포함한다. 유리하게도, 언코어(들)가 1.0의 적용 비율에 기초하여 구성되는 것에 응답하여, 그의 작 동 주파수는 증가된 처리량 및/또는 감소된 지연시간으로 제3 워크로드를 실행하도록 증가될 수 있다. 유리하게도, 워크로드 조정 가능한 CPU는 실행될 워크로드들(3104, 3106, 3108) 중 하나(다수)에 기초하 여 코어별로 및/또는 언코어별로 32개의 코어 중 하나(다수)를 구성할 수 있다. 유리하게도, 구성들(3110, 3112, 3114) 중 하나(다수)는, I/O 바운드이고 언코어(들)의 증가된 활동으로부터 이득을 볼 수 있는 워크로드 들(3104, 3106, 3108)과 같은, 워크로드들의 실행을 개선시키고/시키거나 다른 방식으로 최적화하기 위해 코어 (들)로부터 언코어(들)로의 추가적인 전력의 할당을 야기할 수 있다.도 31b 내지 도 31g는 워크로드에 기초한 도 31a의 워크로드 조정 가능한 CPU의 코어(들) 및 언코어(들) 에 대한 예시적인 전력 조정들의 추가 예시들이다. 도 31b는 제4 예시적인 구성(구성 1), 제5 예시적인 구성(구성 2), 및 제6 예시적인 구성(구성 3)을 포함하는 추가적인 예시적인 구성들(3120, 3122, 3124)을 묘사한다. 이 예에서, 제4 구성은 증가된 언코어 주파수에 기초하여 처리량 및 지연시간을 증가 시키기 위한 구성들(3120, 3122, 3124) 중 최적의 및/또는 다른 방식으로 최상의 것이며, 이는 네트워크 워크로 드들과 같은, I/O 바운드 워크로드들에 유리하다. 이 예에서, 제6 구성은 증가된 코어 주파수에 기초하 여 성능을 위한 구성들(3120, 3122, 3124) 중 최적의 및/또는 다른 방식으로 최상의 것이며, 이는 컴퓨트 바운 드 워크로드들에 유리하다. 유리하게도, 도 31b의 구성들(3120, 3122, 3124)은 하나의 CPU 패키지에 n개의 CPU 를 구현하는 예시적인 방식을 예시한다. 도 31c는 도 31a의 워크로드 조정 가능한 CPU에 대한 제7 예시적인 구성(애플리케이션 1 P1n 상 태), 제8 예시적인 구성(애플리케이션 2 P1n 상태), 및 제9 예시적인 구성(애플리케이션 3 P1n 상 태)를 포함하는 추가적인 예시적인 구성들(3130, 3132, 3134)을 묘사한다. 이 예에서, 제7 구성은 워크로드 조정 가능한 CPU의 코어(들)에 대해 0.56(예를 들면, 코어에 대한 전력 바이러스 레벨의 56%)의 적용 비율을 갖고 언코어 또는 CLM에 대해 1.13(예를 들면, 언코어에 대한 전력 바이러스 레벨의 113%)의 적용 비율을 갖는다. 유리하게도, 제7 구성은 언코어 작동 주파수의 증가에 따라 I/O 바운드 워크로드들에 유 익할 수 있는 반면, 제9 구성은 코어 주파수의 증가에 따라 컴퓨트 바운드 워크로드들에 유익할 수 있다. 도 31d는 도 31a의 워크로드 조정 가능한 CPU에 대한 제10 예시적인 구성(애플리케이션 1 P1n 상 태), 제11 예시적인 구성(애플리케이션 2 P1n 상태), 및 제12 예시적인 구성(애플리케이션 3 P1n 상태)를 포함하는 추가적인 예시적인 구성들(3140, 3142, 3144)을 묘사한다. 이 예에서, 제10 구성 은 UPF 워크로드들에 유리할 수 있는 적용 비율을 갖고, 제11 구성은 제어 평면 기능(CPF) 워크로 드들에 유리할 수 있는 적용 비율을 가지며, 제12 구성은 데이터베이스(DB) 기능들에 유리할 수 있는 적 용 비율을 갖는다. 도 31e는 도 31a의 워크로드 조정 가능한 CPU에 대한 제13 예시적인 구성(애플리케이션 1 P1n 상 태), 제14 예시적인 구성(애플리케이션 2 P1n 상태), 및 제15 예시적인 구성(애플리케이션 3 P1n 상태)를 포함하는 추가적인 예시적인 구성들(3150, 3152, 3154)을 묘사한다. 이 예에서, 제13 구성 및 제15 구성은 DU에 의해 구현될 수 있는 대규모 MIMO(mMIMO) 워크로드들 및 협대역 워크로드들 에 유리할 수 있는 각자의 적용 비율들을 갖는다. 이 예에서, 제14 구성은 CU에 의해 구현될 수 있는 CU 워크로드들에 대해 유리할 수 있는 적용 비율을 갖는다. 도 31f는 도 31a의 워크로드 조정 가능한 CPU에 대한 제16 예시적인 구성(애플리케이션 1 P1n 상 태), 제17 예시적인 구성(애플리케이션 2 P1n 상태), 및 제18 예시적인 구성(애플리케이션 3 P1n 상태)를 포함하는 추가적인 예시적인 구성들(3160, 3162, 3164)을 묘사한다. 이 예에서, 제18 구성 은 IMS, 미디어 인코딩 등과 같은 미디어 워크로드들에 유리할 수 있는 적용 비율을 갖는다. 도 31g는 도 31a의 워크로드 조정 가능한 CPU에 대한 제19 예시적인 구성(애플리케이션 1 P1n 상 태), 제20 예시적인 구성(애플리케이션 2 P1n 상태), 및 제21 예시적인 구성(애플리케이션 3 P1n 상태)를 포함하는 추가적인 예시적인 구성들(3170, 3172, 3174)을 묘사한다. 이 예에서, 제19 구성 은 NGINX 워크로드들과 같은 프록시 서버 워크로드들, 로드 밸런싱 워크로드들 등에 유리할 수 있는 적용 비율을 갖는다. 이 예에서, 제20 구성은 PERF, vNGFW, 및 네트워크 침입 탐지 시스템 워크로드들(예를 들면, SNORT 워크로드들)에 대해 유리할 수 있는 적용 비율을 갖는다. 도 31h는 예시적인 적용 비율들(3182, 3184, 3186)에 기초한 도 31a의 예시적인 워크로드 조정 가능한 CPU의 코어(들) 및 언코어(들)에 대한 예시적인 전력 조정들의 예시이다. 이 예에서, 적용 비율들(3182, 3184, 3186)은 제1 예시적인 적용 비율, 제2 예시적인 적용 비율, 및 제3 예시적인 적용 비율 을 포함한다. 이 예에서, 제1 적용 비율은 네트워크 워크로드들(예를 들면, NFV 워크로드들)을 실 시하는 데 활용될 수 있다. 이 예에서, 제2 적용 비율은 범용 워크로드들을 실시하는 데 활용될 수 있다. 이 예에서, 제3 적용 비율은 클라우드 워크로드들을 실시하는 데 활용될 수 있다. 도 31h의 예시된 예에서, 제1 적용 비율은 다수의 옵션들, 변형들 등을 갖는다. 예를 들어, 제1 적용 비 율은 제1 옵션(옵션 1), 제2 옵션(옵션 2), 제3 옵션(옵션 3) 및 제4 옵션(옵션 4)을 갖는다. 이 예에서, 제1 적용 비율에 대한 옵션들 각각은 0.82(예를 들면, 위에서 설명된 바와 같은 프로세서 코어및/또는 언코어에 대해 계산되는 바와 같은 Power Virus Cdyn의 74%)의 동일한 적용 비율을 갖는다. 유리하게도, 옵션들 각각이 0.82의 동일한 적용 비율을 갖더라도, 코어들 및/또는 언코어들이 상이하게 구성될 수 있다. 예를 들어, 제1 옵션은 75 Gbps의 잠재적 처리량을 달성하기 위해 1.3 GHz의 작동 주파수를 갖도록 언코어를 구성하도록 선택될 수 있다. 일부 그러한 예들에서, 제2 옵션은 225 Gbps의 잠재적 처리량을 달성하 기 위해 1.7 GHz의 작동 주파수를 갖도록 언코어를 구성하도록 선택될 수 있다. 유리하게도, 제2 옵션은 0.82 의 동일한 적용 비율을 가지면서 제1 옵션에 대해 더 높은 처리량 및/또는 감소된 지연시간을 달성하도록 선택 될 수 있다. 추가적으로 또는 대안적으로, 옵션들 중 하나 이상은 CLM들에 대한 상이한 구성들을 또한 포함할 수 있다. 예를 들어, 제1 옵션은 CLM에 대한 제1 작동 주파수를 포함할 수 있고, 제2 옵션은 CLM에 대한 제2 작동 주파수를 포함할 수 있으며/있거나 제3 옵션은 CLM에 대한 제3 작동 주파수를 포함할 수 있다. 일부 그러 한 예들에서, CLM의 제1 작동 주파수, 제2 작동 주파수, 및/또는 제3 작동 주파수는 서로 상이할 수 있다. 도 31h의 예시된 예에서, 제1 옵션은 멀티코어 CPU의 코어 수 및/또는 멀티코어 CPU의 TDP에 기초 하여 멀티코어 CPU의 코어에 대한 상이한 작동 주파수들을 지정한다. 예를 들어, 제1 옵션은 185 W의 TDP를 갖는 32-코어 CPU의 경우, 코어가 제1 적용 비율의 제1 옵션을 위해 구성될 때 코어에 대한 작동 주파수가 2.1 GHz인 것을 지정한다. 도 31h의 예에 예시된 바와 같이, 언코어 주파수가 제1 적용 비율의 상이한 옵션들에 따라 증가함에 따라(예를 들면, 제1 옵션에 대해 1.3 GHz의 언코어 주파수, 제2 옵션에 대해 1.7 GHz의 언코어 주파수 등), 코어 주파수는 제1 적용 비율의 상이한 옵션들에 따라 감소한다(예를 들면, 제1 옵션에 대해 2.1 GHz의 코어 주파수, 제2 옵션에 대해 2.0 GHz의 코어 주파수 등). 유리하게도, 워크로드 조정 가능한 CPU는 도 31h의 적용 비율들(3182, 3184, 3186) 중 하나(다수)에 기초 하여 코어별로 및/또는 언코어별로 워크로드 조정 가능한 CPU의 복수의 코어들 중 하나(다수)를 구성할 수 있다. 유리하게도, 적용 비율들(3182, 3184, 3186) 중 하나(다수), 적용 비율들(3182, 3184, 3186) 내의 옵션들 중 하나(다수) 등은, I/O 바운드이고 언코어(들)의 증가된 활동으로부터 이득을 볼 수 있는 도 31a의 워 크로드들(3104, 3106, 3108)과 같은, 워크로드들의 실행을 개선시키고/시키거나 다른 방식으로 최적화하기 위해 코어(들)로부터 언코어(들)로(또는 언코어(들)로부터 코어(들)로)의 추가적인 전력의 할당을 야기할 수 있다. 도 32는 예시적인 네트워크 워크로드들(3206, 3208)을 실행하기 위한 예시적인 DU 및 예시적인 BBU(320 4)를 포함하는 예시적인 시스템의 예시이다. 이 예에서, DU는 도 1의 DU들, 도 5의 제1 멀티 코어 컴퓨팅 시스템, 도 5의 제2 멀티코어 컴퓨팅 시스템, 도 6의 제3 멀티코어 컴퓨팅 시스템, 및/또는 도 7의 제4 멀티코어 컴퓨팅 시스템, 및/또는 이들의 부분(들)에 의해 구현될 수 있다. 이 예에 서, DU는 네트워크 워크로드들(3206, 3208)을 프로세싱하도록 예시적인 가상 BBU(vBBU)를 구현할 수 있다. 이 예에서, 네트워크 워크로드들(3206, 3208)은 예시적인 레벨 1(L1) 기저대역 워크로드들 및 예시적인 레벨 2 실시간(L2-rt) 스케줄러 및 패킷 프로세싱 워크로드들을 포함한다. 유리하게도, DU는 방향 화살표들로 나타내어진 프로세싱 파이프라인에서 네트워크 워크로드들(3206, 3208)을 프 로세싱할 수 있다. 예를 들어, 프로세싱 파이프라인은 자원 디매핑으로 시작하고 자원 매핑으로 끝날 수 있다. 도 33은 본 명세서에서 설명되는 예들을 사용하는 예시적인 네트워크 아키텍처들(3302, 3304, 3306, 3308)의 상 이한 구현들의 예시이다. 이 예에서, 네트워크 아키텍처들(3302, 3304, 3306, 3308)은 5G 중앙 배포를 구현할 수 있는 제1 예시적인 네트워크 아키텍처, 5G 분산 배포를 구현할 수 있는 제2 예시적인 네트워크 아키텍 처, 5G 농촌 배포를 구현할 수 있는 제3 예시적인 네트워크 아키텍처, 및 5G 실내 배포를 구현할 수 있는 제4 예시적인 네트워크 아키텍처를 포함한다. 예를 들어, 제1 네트워크 아키텍처는 예시 적인 단일 소켓 서버(예를 들면, 단일 소켓 CU 또는 DU), 예시적인 FPGA, 예시적인 TOR(top-of- the-rack) 스위치, 예시적인 개방형 RAN(ORAN) 무선기, 예시적인 프런트홀 게이트웨이, 및 예시적인 레거시 무선기를 포함한다. 유리하게도, 단일 소켓 서버는 5G 네트워크 아키텍처를 실시 하도록 도 1의 DU들, 도 5의 제1 멀티코어 컴퓨팅 시스템, 도 5의 제2 멀티코어 컴퓨팅 시스템, 도 6의 제3 멀티코어 컴퓨팅 시스템, 및/또는 도 7의 제4 멀티코어 컴퓨팅 시스템을 구현할 수 있다. 도 34는 예시적인 네트워크 워크로드 파이프라인의 예시이다. 네트워크 워크로드 파이프라인은 데 이터 채널들에만 기초하는 MMSE인 5GNR 파이프라인에서의 예시적인 커널들을 묘사한다. 예를 들어, 도 34의 네 트워크 워크로드 파이프라인은 5G 통신 네트워크에서의 레벨 1(L1) 기능들을 구현할 수 있다. 유리하게 도, 본 명세서에서 설명되는 바와 같은 하나 이상의 예시적인 멀티코어 CPU는 심벌 기반 데이터 프로세싱을 다 룰 때 성능 증가를 달성하기 위해 5G-ISA 명령어들을 실행할 수 있다. 예를 들어, 하나 이상의 멀티코어 CPU는종래의 멀티코어 CPU들에 비해 증가된 성능으로 계층 매핑, 자원 요소 매핑, 프리코딩, 프런트홀 포맷팅 등 네 트워크 워크로드들을 실행하기 위해 도 5의 제3 명령어들을 실행한다. 도 35는 본 명세서에서 설명되는 예들을 사용하여 이익을 얻을 수 있는 예시적인 네트워크 아키텍처의 예 시이다. 예를 들어, 프런트홀, 백홀, 또는 그의 부분(들)을 구현하기 위해 배포될 수 있는 하드웨어는, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 본 명세서에서 설명되는 바와 같은 하나 이상의 예시적인 멀티코어 CPU를 포함할 수 있다. 유리하게도, 하나 이상의 예시적인 멀티코어 CPU는 5G 레벨 1(L1) 프로세싱을 개선시킬 수 있다. 예를 들어, L1 기능들의 70% 이상은, SSE 명령어 들, AVX-512 명령어들, 5G-ISA 명령어들 등과 같은, 상이한 명령어 세트들을 사용하여 네트워크 워크로드들을 프로세싱하기 위해 하나 이상의 예시적인 멀티코어 CPU를 호출하는 것에 의해 이득을 볼 수 있다. 도 36은 예시적인 FlexRAN(flexible radio access network) 배포 아키텍처(3600, 3602)의 예시이다. 이 예에 서, FlexRAN 배포 아키텍처들(3600, 3602)은 셀 또는 셀룰러 사이트 배포를 나타내는 제1 예시적인 FlexRAN 배 포 아키텍처 및 에지 사이트 배포를 나타내는 제2 예시적인 FlexRAN 배포 아키텍처를 포함한다. 예를 들어, 제1 FlexRAN 배포 아키텍처는 광섬유 통신이 에지 위치 또는 서버에 이용 가능하지 않을 때 배포될 수 있다. 제2 FlexRAN 배포 아키텍처는 광섬유 통신이 에지 위치 또는 서버에 이용 가능할 때 배 포될 수 있다. 도 36의 예시된 예에서, 제1 FlexRAN 배포 아키텍처는 예시적인 무선 유닛(예를 들면, RRU) 및 예 시적인 기저대역 유닛에 의해 구현된다. 이 예에서, 기저대역 유닛은 도 1의 DU들, 제1 멀티 코어 컴퓨팅 시스템, 도 6의 제3 멀티코어 컴퓨팅 시스템, 도 7의 제4 멀티코어 컴퓨팅 시스템, 및/또는 이들의 부분(들)과 같은, DU를 구현한다. 이 예에서, 기저대역 유닛은 예시적인 멀티코어 CPU, 예시적인 FPGA 및/또는 eASIC, 및 예시적인 이더넷 기반 네트워크 인터페이스 카드 (NIC)를 포함한다. 이 예에서, 기저대역 유닛은 분산 RAN을 구현한다. 유리하게도, 멀티코어 CPU의 코어(들), 언코어(들), CLM(들)은 로딩된 명령어 또는 네트워크 관련 컴퓨팅 워크로드들을 실시하 기 위해 실행되도록 식별되는 명령어에 기초하여 구성될 수 있다. 도 36의 예시된 예에서, 제2 FlexRAN 배포 아키텍처는 무선 유닛, 기저대역 유닛, 예시적인 중앙 유닛, 및 예시적인 코어 네트워크를 포함한다. 예를 들어, 중앙 유닛은 도 1의 CU들 을 구현할 수 있다. 예를 들어, 코어 네트워크는 도 1의 코어 디바이스들 및/또는 도 5의 제2 멀티코어 컴퓨팅 시스템(또는 그의 부분(들)) 중 하나 이상을 구현할 수 있다. 이 예에서, 기저대역 유닛 은 클라우드 RAN(C-RAN)을 구현한다. 유리하게도, 멀티코어 CPU의 코어(들), 언코어(들), CLM(들)은 로딩된 명령어 또는 네트워크 관련 컴퓨팅 워크로드들을 실시하기 위해 실행되도록 식별되는 명령어 에 기초하여 구성될 수 있다. 도 37은, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 본 명세서에서 설명되는 바와 같은 하나 이상의 예시적인 멀티코어 CPU에 의해 실행될 수 있는 예시적인 네트워크 워크로드 파이프라인의 예시이다. 예를 들어, 네트워크 워크로드 파이프라인은 5G NR(new radio) L1 파이프라인을 구현할 수 있다. 일부 그러한 예들에서, 네트워크 워크로드 파이프라인 은 5G 네트워크의 프런트홀 부분을 구현한다. 일부 그러한 예들에서, 5G NR은 5G 모바일 네트워크를 위해 3GPP(3rd Generation Partnership Project)에 의해 개발된 글로벌 표준에 대응할 수 있다. 도 37의 예에서, 네트워크 워크로드 파이프라인의 제1 부분은, 임베디드 소프트웨어(예를 들면, 펌웨어) 및/또는 애플리케 이션 소프트웨어(예를 들면, OS에서 실행되는 소프트웨어)와 같은, 소프트웨어를 사용하여 프로세싱될 수 있다. 도 37의 예에서, 네트워크 워크로드 파이프라인의 제2 부분들은 순방향 오류 정정(FEC) 하드웨어(HW) 가 속을 사용하여 프로세싱될 수 있다. 예를 들어, 제2 부분들은 하나 이상의 오류를 포함하는 신호로부터 데이터 를 복구하기 위한 기술인 FEC를 구현하는 하드웨어 가속기들에 의해 구현될 수 있다. 일부 그러한 예들에서, FEC는 콘볼루션, 터보, 저밀도 패리티 체크(LDPC), 및 폴라 코드들을 사용하여 구현될 수 있다. 유리하게도, 본 명세서에서 설명되는 바와 같은 하나 이상의 예시적인 멀티코어 CPU는 통신 데이터의 프로세싱 을 용이하게 하기 위해 프런트홀 포맷팅, PUSCH 채널 추정, MIMO 등화기, SRS 채널 추정 등 워크로드들을 실행 하는 것에 의해 네트워크 워크로드 파이프라인을 실시할 수 있다. 유리하게도, 본 명세서에서 설명되는 바와 같은 하나 이상의 예시적인 멀티코어 CPU의 코어(들), 언코어(들), 및/또는 CLM(들)은, 예시된 예의 네트 워크 워크로드 파이프라인에 포함된 워크로드들과 같은, 네트워크 관련 컴퓨팅 워크로드들을 실시하기 위 해 로딩된 명령어에 기초하여 구성될 수 있다. 유리하게도, 본 명세서에서 설명되는 바와 같은 하나 이상의 예시적인 멀티코어 CPU의 코어(들), 언코어(들), 및/또는 CLM(들)은 예시된 예의 네트워크 워크로드 파이프라인 에 포함된 워크로드들을 실시하기 위해 그러한 멀티코어 CPU들에 의해 실행될 네트워크 관련 컴퓨팅 워크 로드들과 연관된 네트워크 노드 위치, 지연시간 요구사항들, 처리량 요구사항들, 및/또는 전력 요구사항들에 기 초하여 구성될 수 있다. 도 38은 예시적인 단일 소켓 서버 및 예시적인 듀얼 소켓 서버와 연관된 예시적인 멀티코어 CPU의 예시적인 성능의 예시이다. 예를 들어, 단일 소켓 서버는, 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 본 명세서에서 설명되는 바와 같은 하나 이상의 멀티 코어 CPU를 포함할 수 있다. 이 예에서, 단일 소켓 서버는 4세대(즉, 4G) LTE EPC(evolved packet core) 사용자 평면 및/또는 5G UPF 사용자 평면을 구현할 수 있다. 도 38의 예시된 예에서, 듀얼 소켓 서버는, 도 2의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU 등과 같은, 본 명세서에서 설명되는 바와 같은 하나 이상의 멀티코어 CPU 를 포함할 수 있다. 이 예에서, 듀얼 소켓 서버는 4G LTE EPC 사용자 평면 및/또는 5G UPF 사용자 평면 을 구현할 수 있다. 도 39는 예에 따른, 네트워크 워크로드 최적화 설정들을 구현하는 예시적인 단일 소켓 컴퓨팅 시스템 및 예시적인 듀얼 소켓 컴퓨팅 시스템을 포함하는 예시적인 시스템의 예시이다. 이 예에서, 단일 소 켓 시스템은, NFV 플랫폼 및 멀티 테넌트 네트워크 서비스들(예컨대, vRAN, vBNG, vEPC, vCMTS) 및 수반 되는 애플리케이션들(예를 들면, 서비스 제공업체에 의해 호스팅되거나 서비스 소비자에 의해 액세스되는 에지 애플리케이션들)의 사용을 지원하도록 구성된, 도 39의 에지 서버와 같은, 에지 서버를 구현한다. 예시 적인 에지 서버 배포는, 예컨대, 수십 또는 수백 개의 셀 사이트들 사이의 에지 NFV 인스턴스들을 지원하기 위 한, 그러한 NFV 플랫폼을 사용한 4G 및 5G 서비스들의 관리 및 제공(servicing)에 적합할 수 있다. 이 NFV 플 랫폼에 대해 수행되는 프로세싱은 단일 소켓 최적화된 하드웨어 플랫폼에서 작동하는 1-소켓 워크로드 최 적화된 프로세서에 의해 제공된다. 단순화를 위해, 다수의 하드웨어 요소들(네트워크 인터페이스 카드들, 가속기들, 메모리, 저장소를 포함함)은 하드웨어 플랫폼에서 예시로부터 생략되었다. 이 예에서, 듀얼 소켓 컴퓨팅 시스템은 NFV 플랫폼과, 4G EPC 및 5G UPF 서비스들 및 수반되는 애플리케 이션들(예를 들면, 서비스 제공업체에 의해 호스팅되는 또는 서비스 소비자에 의해 액세스되는 클라우드 애플리 케이션들)과 같은, 추가적인 멀티 테넌트 관리 서비스들의 사용을 지원하도록 구성되는 코어 서버를 구현한다. 예시적인 코어 서버 배포는, 예컨대, 수천 또는 수만 개의 셀 사이트들 사이의 코어 NFV 인스턴스들을 지원하기 위한, 그러한 NFV 플랫폼을 사용한 4G 및 5G 서비스들의 관리 및 제공에 적합할 수 있다. 이 NFV 플랫폼에 대 해 수행되는 프로세싱은 예시적인 듀얼 소켓 최적화된 하드웨어 플랫폼에서 작동하는 예시적인 2-소켓 워 크로드 최적화된 프로세서들에 의해 제공된다. 단순화를 위해, 다수의 하드웨어 요소들(네트워크 인터페 이스 카드들, 가속기들, 메모리, 저장소를 포함함)이 또한 하드웨어 플랫폼에서 예시로부터 생략되었다. 일부 경우에, 프로세서 주파수 스케일링으로부터 결과되는 다양한 지연시간들(예를 들면, 전력을 감소시키기 위 해 동적 주파수 스케일링을 사용한 CPU \"스로틀링\"에 의해 야기됨)은 상이한 유형의 애플리케이션 워크로드들 및 사용들 사이의 일관성 없는 성능 결과들을 생성한다. 따라서, 워크로드 유형에 따라, 과학적 시뮬레이션, 금융 분석, 인공 지능(AI)/딥 러닝, 3D 모델링 및 분석, 이미지 및 오디오/비디오 프로세싱, 암호화, 데이터 압 축, 또는 심지어 FlexRAN과 같은 5G 인프라스트럭처 워크로드들의 형태에 관계없이, 프로세서 이용률 - 따라서 전력 이용률 및 효율성 - 의 상당한 변화가 발생할 것이다. 본 명세서에서 논의되는 예들 및 기술들은, 적용 비율을 감소시키고 프로세서의 결정적 주파수를 증가시키기 위해, 일부 CPU 컴포넌트들에서 네트워크 워크로드 들이 필요로 하는 감소된 전력 요구사항들을 이용한다. 최적화를 위해 고려되는 워크로드들의 구체적인 예들은 5G UPF, vCCAP, vBNG, vCG-NAPG, FlexRAN, vIMS, vNGFW, VPP IPSec, NGINX, VPP FWD, vEPC, OVS, ZFS, Hadoop, VMWare® vSAN, 미디어 인코딩 등으로부터의 워 크로드들을 포함할 수 있다. 이러한 워크로드들의 상이한 조합들 및 평가들로부터, 워크로드 최적화된 \"에지\", \"네트워킹\", 또는 \"클라우드\" 프로세서 SKU 구성들(또는 다른 하이브리드 조합들)이 모두 가능하다. 예를 들어, 에지 클라우드화가 vBNG, vVPN, vCDN 사용 사례들로 현재 진화하고 있기 때문에 이 구현들이 진화하는 유선 에지 클라우드 워크로드들 (CDN, IPSEC, BNG)에서 사용될 수 있다. 또한, 예를 들어, 네트워크 에지가 전통적인 통신 서비스 제공업체 RAN 아키텍처로부터 중앙 BBU, 가상 클라우드화(예를 들면, vBBU, vEPC) 아키텍처 및 연관된 워크로드들로 진화 하고 있는 설정들에서와 같이, 이 구현들이 무선 에지 클라우드 워크로드들에서 사용될 수 있다.도 40 내지 도 42는 본 개시내용의 교시에 따라 SDSi 제품들을 관리하는 예시적인 구현들을 예시한다. 소프트 웨어 정의 실리콘 구현들을 위한 디바이스 개선들이 또한 본 명세서에서 개시된다. 본 명세서에서 사용되는 바 와 같이, \"절대 시간\"은 특정 시계 및 날짜 판독값(예를 들면, 2020년 1월 1일 11:11 PM EST 등)을 지칭한다. 본 명세서에서 사용되는 바와 같이, \"상대 시간\"은 고정된 이벤트(예를 들면, 디바이스의 제조 시간 등)와 현재 시간 사이의 경과 시간을 지칭한다. 본 명세서에서 사용되는 바와 같이, \"시간 기준\"은 단일 절대 시간 판독값 및/또는 단일 상대 시간 판독값을 지칭하고, 타임스탬프 및/또는 주행 거리계 판독값을 생성하는 데 사용될 수 있다. 본 명세서에서 사용되는 바와 같이, 실리콘 제품의 \"특징 구성\"은 실리콘 제품들에서 인에이블되는 하드웨어, 펌웨어, 및/또는 물리적 특징들을 지칭한다. 특징 구성들은, 예를 들어, 활성화된 프로세서의 코어 수 및/또는 각각의 코어가 실행되는 속도를 포함할 수 있다. 아래에서 더 상세히 개시되는 바와 같이, 라이선스는 실리콘 제품의 특징 구성을 변경하는 데 사용될 수 있다. 중앙 프로세싱 유닛들(CPU들) 및 다른 반도체 디바이스들과 같은, 적어도 일부 이전 실리콘 제품들은 상대 또는 절대 시간 기준들을 제공/결정할 수 없다. 예를 들어, 일부 기존 CPU들은 내부 클록들이 없다. 또한, 클록들 을 포함하는 적어도 일부 실리콘 제품들에서, 클록들은 머신의 사용자에 의해 설정 및/또는 조정될 수 있으며, 따라서 절대 및/또는 상대 시간 기준들을 결정하는 데 신뢰할 수 없을 수 있다. 또한, 일부 내부 클록들(예를 들면, 모노토닉 클록들 등)은 전력을 필요로 하며, 그에 따라, 실리콘 제품 및/또는 실리콘 제품을 포함하는 머 신의 전원이 꺼지면 시간을 측정할 수 없다. 본 명세서에서 개시되는 예시적인 SDSi 시스템들은 실리콘 제품과 연관된 특징 활성화 결정의 비즈니스 및 재정적 실행 가능성을 보장하기 위해 특정 조치들을 가능하게 하거나 금지하기 위해 절대 및/또는 상대 시간 기준들을 활용한다. 일부 예들에서, 일부 실리콘 제품 특징들은 프로세 서의 제조 시간으로부터 특정 날짜 및/또는 시간 이전 또는 이후에만 이용 가능할 수 있다. 본 명세서에서 개시되는 예들은, 특징들이 시간 의존적인 전기적 특성들을 갖도록, 하나 이상의 특징을 실리콘 제품에 추가하는 것에 의해 앞서 살펴본 문제들을 극복한다. 본 명세서에서 개시되는 일부 예들에서, 특징의 전기적 특성들은 시간의 함수로서 알려진 또는 미리 결정된 방식으로 변한다. 본 명세서에서 개시되는 일부 예 들에서, 실리콘 제품의 전원이 켜져 있지 않을 때 특징의 전기적 특성들이 변한다. 본 명세서에서 개시되는 일 부 예들에서, 2개의 별개의 시점에서 특징의 전기적 특성들을 결정하는 것에 의해, 해당 시점들 사이의 상대 시 간이 결정될 수 있다. 본 명세서에서 개시되는 일부 예들에서, 시간 의존적 특징들의 전기적 특성들은 제조 시 에 측정되고 제조 날짜 및 시간과 함께 저장된다. 그러한 예들에서, 절대 시간은 현재 시간과 제조 시간 사이 의 결정된 상대 시간을 제조 날짜 및 시간에 가산하는 것에 의해 결정될 수 있다. 본 명세서에서 개시되는 일 부 예들에서, 특징은 방사성 동위원소에 의해 구현된다. 본 명세서에서 개시되는 일부 예들에서, 특징은 시변 전기적 특성들을 갖는 PUF(physical unclonable function)에 의해 구현된다. 그와 같이, 본 명세서에서 개시 되는 예들은 일정한 전력을 필요로 하지 않는 절대 및 상대 시간 기준들의 신뢰할 수 있고 위조 불가능한 측정 값들을 실리콘 제품 및/또는 실리콘 제품이 사용되는 머신에 제공한다. 본 명세서에서 개시되는 예들은 사용자들, 고객들, 및/또는 머신 제조업체들이 실리콘 제품이 제조된 후에 프로 세서의 구성을 변경하는 유연성을 가능하게 한다. 일부 예들에서, 실리콘 제품의 구성을 변경하는 것은 실리콘 제품의 작동 조건들(예를 들면, 열 설계 전력(TDP) 등)에 영향을 미칠 수 있으며, 따라서 프로세서의 수명 및/ 또는 상태에 영향을 미칠 수 있다. 그와 같이, 일부 예들에서, 실리콘 제품의 구성을 변경하는 것은 실리콘 제 품으로 하여금 실리콘 제품을 손상시키고/시키거나 실리콘 제품의 수명을 허용할 수 없는 레벨로 감소시키는 특 징들의 조합을 갖도록 할 수 있다. 일부 예들에서, 주어진 구성에서 활성화되는 특징들은 상호 의존적인 방식 으로 실리콘 제품의 작동 조건들에 영향을 미칠 수 있다. 예를 들어, CPU와 같은 반도체 디바이스 내의 활성 코어 수는 해당 코어들이 작동할 수 있는 최대 주파수는 물론 반도체 디바이스의 열 설계 전력에 영향을 미친다. 그와 같이, 허용할 수 없는 디바이스 열화 및 손상을 방지하기 위해, 본 명세서에서 개시되는 예들은 디바이스의 작동 조건들에 대한 각각의 특징의 영향을 고려한다. 본 개시내용의 교시에 따라 SDSi 제품들을 구현 및 관리하기 위한 예시적인 시스템의 블록 다이어그램이 도 40에 예시되어 있다. 도 40의 예시적인 SDSi 시스템은, 본 명세서에서 개시되는 바와 같이 SDSi 특징 들을 구현하는, 예시적인 반도체 디바이스 또는 임의의 다른 실리콘 자산과 같은, 예시적인 실리콘 제품을 포함한다. 따라서, 예시된 예의 실리콘 제품은 본 명세서에서, SDSi 반도체 디바이스 또는 SDSi 실리콘 자산과 같은, SDSi 제품이라고 지칭된다. 일부 예들에서, 실리콘 제품 은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU, 도 8의 프로세서 등을 구현할 수 있다. 시스템은 SDSi 제품을 관리하기 위한 예시적인 제조업체 엔터프라이즈 시스템 및 예시적인 고객 엔터프라이즈 시스템을 또한 포함한다. 도 40의 예시된 예에 서, 제조업체 엔터프라이즈 시스템의 적어도 일부 양상들은 예시적인 클라우드 플랫폼에서 클라우 드 서비스들로서 구현된다. 예시적인 제조업체 엔터프라이즈 시스템은 임의의 수(들) 및/또는 유형(들)의 컴퓨팅 디바이스들, 서버들, 데이터 센터들 등에 의해 구현될 수 있다. 일부 예들에서, 제조업체 엔터프라이즈 시스템은, 도 68의 예시적인 멀티 프로세서 시스템(들), 도 69의 예시적인 프로세서 플랫폼(들), 및/또는 도 70 의 예시적인 시스템(들)과 같은, 프로세서 플랫폼에 의해 구현된다. 마찬가지로, 예시적인 고객 엔터프 라이즈 시스템은 임의의 수(들) 및/또는 유형(들)의 컴퓨팅 디바이스들, 서버들, 데이터 센터들 등에 의 해 구현될 수 있다. 일부 예들에서, 고객 엔터프라이즈 시스템은, 도 68의 예시적인 멀티 프로세서 시스 템(들), 도 69의 예시적인 프로세서 플랫폼(들), 및/또는 도 70의 예시적인 시스템(들)과 같 은, 프로세서 플랫폼에 의해 구현된다. 예시적인 클라우드 플랫폼은, Amazon Web Services(AWS®), Microsoft의 Azure® Cloud 등과 같은, 임의의 수(들) 및/또는 유형(들)에 의해 구현될 수 있다. 일부 예들에 서, 클라우드 플랫폼은 도 2 내지 도 4와 관련하여 위에서 설명된 바와 같은 하나 이상의 에지 클라우드 에 의해 구현된다. 제조업체 엔터프라이즈 시스템, 고객 엔터프라이즈 시스템 및 클라우드 플랫폼 의 양상들은 아래에서 더 상세히 설명된다. 도 40의 예시된 예에서, SDSi 제품은 하나 이상의 특징을 제공하기 위해 개시된 SDSi 프레임워크 하에 구 성 가능한 예시적인 하드웨어 회로부를 포함하는 SDSi 반도체 디바이스이다. 예를 들어, 그러한 특징들은 구성 가능한 수의 프로세서 코어들, 가능한 클록 속도 세트로부터의 구성 가능한 클록 속도, 가능한 캐시 토폴로지 세트로부터의 구성 가능한 캐시 토폴로지, 구성 가능한 코프로세서들, 구성 가능한 메모리 계층 화 등을 포함할 수 있다. 일부 예들에서, 그러한 특징들은 본 명세서에서 설명되는 바와 같이 복수의 적용 비 율들에 기초할 수 있다. 그와 같이, 하드웨어 회로부는 하나 이상의 아날로그 또는 디지털 회로(들), 로 직 회로, 프로그래밍 가능한 프로세서(들), 프로그래밍 가능한 제어기(들), GPU(들), DSP(들), ASIC(들), PLD(s), FPGA, FPLD(s) 등, 또는 이들의 임의의 조합을 포함할 수 있다. 도 40의 SDSi 반도체 디바이스(400 5)는, 무엇보다도, 하드웨어 회로부에 대한 액세스를 제공하기 위해 예시적인 펌웨어 및 예시적인 BIOS(basic input/output system)를 또한 포함한다. 일부 예들에서, 펌웨어 및/또는 BIOS 는 추가적으로 또는 대안적으로 개시된 SDSi 프레임워크 하에 구성 가능한 특징들을 구현한다. 도 40의 SDSi 반도체 디바이스는 하드웨어 회로부(및/또는 펌웨어 및/또는 BIOS)에 의해 제공되는 SDSi 특징들을 구성(예를 들면, 활성화, 비활성화 등)하고, SDSi 특징들의 그러한 구성 및 작동을 확인하며, SDSi 반도체 디바이스의 작동과 연관된 원격 측정 데이터를 보고하는 등을 위한 예시적인 SDSi 자산 에이 전트를 더 포함한다. 일부 예들에서, SDSi 자산 에이전트는 자산 에이전트 회로부 또는 로직 회로 부를 구현한다. SDSi 자산 에이전트의 양상들은 아래에서 더 상세히 설명된다. 일부 예들에서, SDSi 자산 에이전트는 제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하는 복수의 특징들을 활성화시키기 위한 예시적인 수단 - 제1 특징은 프로세서의 하나 이상의 코어의 제1 작동 주파수와 연 관되고, 제2 특징은 언코어 로직의 제2 작동 주파수와 연관됨 - 을 구현한다. 일부 예들에서, 활성화시키기 위 한 수단은 제1 작동 주파수에서 작동하도록 하나 이상의 코어를 초기화하며, 제2 작동 주파수에서 작동하도록 언코어 로직을 초기화하고, 제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에서 작동하도록 하나 이상의 코어들 중 하나를 활성화시키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 언코어 로직의 일부를 활성화시키는 것 중 적어도 하나를 수행한다. 예를 들어, 활성화시키기 위한 수단은 도 42의 적어도 블록들 (4202 내지 4268)에 의해 구현되는 것과 같은 실행 가능한 명령어들에 의해 구현될 수 있다. 일부 예들에서, 블록들(4202 내지 4268)의 실행 가능한 명령어들은 도 68의 예시적인 프로세서(6815, 6838, 6870, 6880) 및/또 는 도 69의 예시적인 프로세서, 도 69의 예시적인 GPU, 도 69의 예시적인 비전 프로세싱 유닛 , 및/또는 도 69의 예시적인 신경 네트워크 프로세서와 같은 적어도 하나의 프로세서 상에서 실행 될 수 있다. 다른 예들에서, 활성화시키기 위한 수단은 하드웨어 로직, 하드웨어 구현 상태 머신들, 로직 회로 부, 및/또는 하드웨어, 소프트웨어, 및/또는 펌웨어의 임의의 다른 조합에 의해 구현된다. 예를 들어, 활성화 시키기 위한 수단은 소프트웨어 또는 펌웨어를 실행하지 않고 대응하는 연산을 수행하도록 구성된 적어도 하나 의 하드웨어 회로(예를 들면, 이산 및/또는 통합 아날로그 및/또는 디지털 회로부, 범용 프로그래밍 가능 프로 세서, FPGA, PLD, FPLD, ASIC, 비교기, 연산증폭기(op-amp), 로직 회로 등)에 의해 구현될 수 있지만, 다른 구 조들도 마찬가지로 적절하다. 시스템은, 컴퓨터들, 태블릿들, 모바일 폰들, 다른 전자 디바이스들 등의 OEM(original equipment manufacturer)과 같은, 고객이 실리콘 제조업체로부터 SDSi 반도체 디바이스를 구입하고 나중에 SDSi 반 도체 디바이스가 실리콘 제조업체의 공장을 떠난 후에 SDSi 반도체 디바이스의 하나 이상의 SDSi 특징을 구성(예를 들면, 활성화, 비활성화 등)하는 것을 가능하게 한다. 일부 예들에서, 시스템은 고객 (OEM)이 고객의 시설에서(예를 들면, SDSi 반도체 디바이스를 포함하는 제품의 제조 동안) 또는 심지어 SDSi 반도체 디바이스를 포함하는 고객의 제품이 제3자(예를 들면, 리셀러, 소비자 등)에 의해 구매된 후 다운스트림에서 SDSi 반도체 디바이스의 SDSi 특징(들)을 구성(예를 들어, 활성화, 비활성화 등)하는 것 을 가능하게 한다. 예로서, 반도체 디바이스가 최대 8개의 프로세서 코어를 포함하는 예시적인 구현을 고려한다. 이전에는, 반도체 디바이스에서 활성화되는 코어 수가 제조업체의 공장에서 고정되거나 잠금되었다. 따라서, 고객 이 반도체 디바이스가 2개의 활성 코어를 갖기를 원하는 경우, 고객은 2개의 활성 코어를 갖는 반도체 디 바이스를 구매하기로 제조업체와 계약하고, 제조업체는 2개의 코어가 활성화된 반도체 디바이스를 배송하고, 2개의 코어가 활성임을 나타내는 SKU로 배송된 디바이스를 식별해 준다. 그렇지만, 활성 코어 수(예 를 들면, 이 예에서는 2)는 반도체 디바이스가 제조업체의 공장을 떠난 후에 변경될 수 없었다. 따라서, 고객이 나중에 자신의 제품들에 대해 4개(또는 8개) 활성 코어가 필요하다고 결정한 경우, 고객은 4개(또는 8개)의 활성 코어를 갖는 반도체 디바이스의 새 버전들을 구매하기로 제조업체와 계약해야 하고, 제조업 체는 4개(또는 8개)의 코어가 활성화된 반도체 디바이스의 새 버전들을 배송하고, 4개(또는 8개)의 코어 가 활성임을 나타내는 상이한 SKU로 배송된 디바이스를 식별해 준다. 이러한 예에서, 고객 및/또는 제조업체는 2-코어 구성을 갖는 반도체 디바이스의 초과 재고를 남길 수 있으며, 이는 경제적 손실, 자원 손실 등을 초래할 수 있다. 대조적으로, 반도체 디바이스 상에 활성화된 프로세서 코어 수가 본 개시내용의 교시에 따라 예시적인 시 스템에서 구성될 수 있는 SDSi 특징이라고 가정한다. 그러한 예에서, 고객은 2개의 활성 코어를 갖는 SDSi 반도체 디바이스를 구매하기로 제조업체와 계약할 수 있고, 제조업체는 2개의 코어가 활성화된 SDSi 반도체 디바이스를 배송하고, 2개의 코어가 활성임을 나타내는 SKU로 배송된 디바이스를 식별해 준다. 디바이스가 배송된 후에, 고객이 4개의 코어가 활성인 것을 선호한다고 결정하는 경우, 고객 관리 시스템(400 5)은 2개의 추가적인 코어의 활성화를 요청하기 위해 클라우드 플랫폼에 의해 구현되는 클라우드 서비스 를 통해 제조업체 엔터프라이즈 시스템에 연락할 수 있다(도 40에서 4045로 라벨링된 라인으로 나타내어 져 있음). 요청이 유효하다고 가정하여, 제조업체 엔터프라이즈 시스템은 2개의 추가적인 코어를 활성화 시키기 위한 라이선스(라이선스 키라고도 지칭됨)를 생성하고, 2개의 추가적인 코어를 활성화시키는 자격의 부 여를 확인해 주기 위해 클라우드 플랫폼에 의해 구현되는 클라우드 서비스를 통해 라이선스를 고객 관리 시스템에게 송신한다(도 40에서 4045로 라벨링된 라인으로 나타내어져 있음). 고객 엔터프라이즈 시스템 은 이어서 SDSi 반도체 디바이스의 하드웨어 회로부에 의해 제공되는 2개의 추가적인 코어의 활성화를 야기하기 위해 (도 40에서 4055로 라벨링된 라인으로 나타내어진 바와 같은 네트워크를 통해) 라이선 스(또는 라이선스 키)를 SDSi 반도체 디바이스의 SDSi 자산 에이전트에게 송신한다. 예시된 예에 서, SDSi 자산 에이전트는 2개의 코어의 활성화를 확인해 주기 위해 (예를 들면, 도 40에서 4050으로 라 벨링된 라인으로 나타내어진 바와 같이, 클라우드 플랫폼에 의해 구현되는 적절한 클라우드 서비스를 통 해) 제조업체 엔터프라이즈 시스템에 다시 확인서를 보고한다. 일부 예들에서, SDSi 자산 에이전트 는 또한 2개의 코어의 활성화를 확인해 주기 위해 (예를 들면, 도 40에서 4055로 라벨링된 라인으로 나타 내어진 바와 같은 네트워크를 통해) 고객 엔터프라이즈 시스템에 다시 확인서를 보고한다. 일부 예들에 서, SDSi 자산 에이전트는 또한 SDSi 반도체 디바이스의 작동과 연관된 원격 측정 데이터를 (예를 들면, 도 40에서 4050으로 라벨링된 라인으로 나타내어진 바와 같이, 클라우드 플랫폼에 의해 구현되는 적절한 클라우드 서비스를 통해) 제조업체 엔터프라이즈 시스템에 및/또는 (예를 들면, 도 40에서 4055로 라벨링된 라인으로 나타내어진 바와 같은 네트워크를 통해) 고객 엔터프라이즈 시스템에 보고한다. 성공 적인 활성화가 확인된 후에, 제조업체는 이어서 새로 활성화된 특징들(예를 들면, 2개의 추가적인 코어)에 대해 (예를 들면, 제조업체 엔터프라이즈 시스템 및 고객 관리 시스템을 통해) 고객에게 청구서를 발행 한다. 일부 예들에서, 제조업체 엔터프라이즈 시스템 및/또는 고객 관리 시스템은 새로운 특징 구 성(예를 들면, 2개의 코어 대신에 4개의 코어)을 갖는 동일한 SDSi 반도체 디바이스를 식별해 주기 위해 새로운 SKU(예를 들면, 소프트 SKU)를 결정한다. 고객이 나중에 8개의 코어가 활성인 것을 선호한다고 결정하는 경우, 고객 관리 시스템은 나머지 4개의 추가적인 코어의 활성화를 요청하기 위해 클라우드 플랫폼에 의해 구현되는 클라우드 서비스를 통해 제조 업체 엔터프라이즈 시스템에 연락할 수 있다(도 40에서 4045로 라벨링된 라인으로 나타내어져 있음). 요청이 유효하다고 가정하여, 제조업체 엔터프라이즈 시스템은 4개의 추가적인 코어를 활성화시키기 위한 다른 라이선스(라이선스 키)를 생성하고, 4개의 나머지 코어를 활성화시키는 자격의 부여를 확인해 주기 위해 클라우드 플랫폼에 의해 구현되는 클라우드 서비스를 통해 라이선스를 고객 관리 시스템에게 송신 한다(도 40에서 4045로 라벨링된 라인으로 나타내어져 있음). 고객 엔터프라이즈 시스템은 이어서 SDSi 반도체 디바이스의 하드웨어 회로부에 의해 제공되는 4개의 나머지 코어의 활성화를 야기하기 위해 (예를 들면, 도 40에서 4055로 라벨링된 라인으로 나타내어진 바와 같은 네트워크를 통해) 라이선스(또는 라이 선스 키)를 SDSi 반도체 디바이스의 SDSi 자산 에이전트에게 송신한다. 예시된 예에서, SDSi 자산 에이전트는 4개의 나머지 코어의 활성화를 확인해 주기 위해 (예를 들면, 도 40에서 4050으로 라벨링된 라인으로 나타내어진 바와 같이, 클라우드 플랫폼에 의해 구현되는 적절한 클라우드 서비스를 통해) 제조 업체 엔터프라이즈 시스템에 다시 확인서를 보고한다. 일부 예들에서, SDSi 자산 에이전트는 또한 4개의 나머지 코어의 활성화를 확인해 주기 위해 (예를 들면, 도 40에서 4055로 라벨링된 라인으로 나타내어진 바와 같은 네트워크를 통해) 고객 엔터프라이즈 시스템에 다시 확인서를 보고한다. 일부 예들에서, SDSi 자산 에이전트는 SDSi 반도체 디바이스의 작동과 연관된 원격 측정 데이터를 (예를 들면, 도 40에 서 4050으로 라벨링된 라인으로 나타내어진 바와 같이, 클라우드 플랫폼에 의해 구현되는 적절한 클라우 드 서비스를 통해) 제조업체 엔터프라이즈 시스템에 및/또는 (예를 들면, 도 40에서 4055로 라벨링된 라 인으로 나타내어진 바와 같은 네트워크를 통해) 고객 엔터프라이즈 시스템에 보고한다. 성공적인 활성화 가 확인된 후에, 제조업체는 이어서 새로 활성화된 특징들(예를 들면, 4개의 추가적인 코어)에 대해 (예를 들면, 제조업체 엔터프라이즈 시스템 및 고객 관리 시스템을 통해) 고객에게 청구서를 발행한다. 일부 예들에서, 제조업체 엔터프라이즈 시스템 및/또는 고객 관리 시스템은 새로운 특징 구성(예를 들면, 4개의 코어 대신에 8개의 코어)을 갖는 동일한 SDSi 반도체 디바이스를 식별해 주기 위해 또 다른 새로운 SKU(예를 들면, 소프트 SKU)를 결정한다. 다른 예로서, 반도체 디바이스가 3개 이상의 적용 비율의 제1 애플리케이션을 선택하는 것에 의해 구성되 는 최대 32개의 프로세서 코어를 포함하는 예시적인 구현을 고려한다. 이전에는, 반도체 디바이스에서 활성화되는 반도체 디바이스의 적용 비율이 제조업체의 공장에서 고정되거나 잠금되었다. 따라서, 고객 이, 코어 서버 대신 vRAN DU를 구현하는 것과 같이, 반도체 디바이스가 제2 적용 비율을 갖기를 원하는 경우, 고객 관리 시스템은 제2 적용 비율의 활성화를 요청하기 위해 클라우드 플랫폼에 의해 구현 되는 클라우드 서비스를 통해 제조업체 엔터프라이즈 시스템에 연락할 수 있다. 요청이 유효하다고 가정 하여, 제조업체 엔터프라이즈 시스템은 제2 적용 비율을 활성화시키기 위한 라이선스(라이선스 키라고도 지칭됨)를 생성하고, 제2 적용 비율을 활성화시키는 자격의 부여를 확인해 주기 위해 클라우드 플랫폼에 의해 구현되는 클라우드 서비스를 통해 라이선스를 고객 관리 시스템에게 송신한다. 고객 엔터프라이즈 시스템은 이어서 SDSi 반도체 디바이스의 하드웨어 회로부에 의해 제공되는 제2 적용 비율의 활성화를 야기하기 위해 (도 40에서 4055로 라벨링된 라인으로 나타내어진 바와 같은 네트워크를 통해) 라이선 스(또는 라이선스 키)를 SDSi 반도체 디바이스의 SDSi 자산 에이전트에게 송신한다. 예를 들어, 제2 적용 비율을 활성화시키는 것에 응답하여, SDSi 반도체 디바이스는 제2 적용 비율에 기초하여 SDSi 반도체 디바이스의 코어(들), 언코어(들), CLM(들) 등을 구성할 수 있다. 일부 예들에서, 활성화는 도 8 의 구성들 중 하나(다수)를 활성화시키는 것을 포함한다. 일부 예들에서, 활성화는 구성들 중 새로 운 구성(들)을 SDSi 반도체 디바이스에게 전송하는 것을 포함한다. 예시된 예에서, SDSi 자산 에이전트는 제2 적용 비율의 활성화를 확인해 주기 위해 (예를 들면, 도 40에 서 4050으로 라벨링된 라인으로 나타내어진 바와 같이, 클라우드 플랫폼에 의해 구현되는 적절한 클라우 드 서비스를 통해) 제조업체 엔터프라이즈 시스템에 다시 확인서를 보고한다. 일부 예들에서, SDSi 자산 에이전트는 또한 제2 적용 비율의 활성화를 확인해 주기 위해 (예를 들면, 도 40에서 4055로 라벨링된 라 인으로 나타내어진 바와 같은 네트워크를 통해) 고객 엔터프라이즈 시스템에 다시 확인서를 보고한다. 일부 예들에서, SDSi 자산 에이전트는 또한 SDSi 반도체 디바이스의 작동과 연관된 원격 측정 데이 터를 (예를 들면, 도 40에서 4050으로 라벨링된 라인으로 나타내어진 바와 같이, 클라우드 플랫폼에 의해 구현되는 적절한 클라우드 서비스를 통해) 제조업체 엔터프라이즈 시스템에 및/또는 (예를 들면, 도 40에 서 4055로 라벨링된 라인으로 나타내어진 바와 같은 네트워크를 통해) 고객 엔터프라이즈 시스템에 보고 한다. 성공적인 활성화가 확인된 후에, 제조업체는 이어서 새로 활성화된 특징들(예를 들면, 제2 적용 비율)에 대해 (예를 들면, 제조업체 엔터프라이즈 시스템 및 고객 관리 시스템을 통해) 고객에게 청구서를 발행한다. 일부 예들에서, 제조업체 엔터프라이즈 시스템 및/또는 고객 관리 시스템은 새로운 특 징 구성(예를 들면, 제1 적용 비율 대신에 제2 적용 비율)을 갖는 동일한 SDSi 반도체 디바이스를 식별해주기 위해 새로운 SKU(예를 들면, 소프트 SKU)를 결정한다. 도 40의 예시된 예들에서, 제조업체 엔터프라이즈 시스템과 고객 엔터프라이즈 시스템 사이, 제조 업체 엔터프라이즈 시스템과 SDSi 반도체 디바이스의 SDSi 자산 에이전트 사이, 및 SDSi 반 도체 디바이스의 SDSi 자산 에이전트와 고객 엔터프라이즈 시스템 사이의 통신은 하나 이상 의 네트워크에 의해 구현될 수 있다. 예를 들어, 그러한 네트워크들은 인터넷, 하나 이상의 무선(셀룰러, 위성 등) 서비스 제공업체 네트워크, 하나 이상의 유선(예를 들면, 케이블, 디지털 가입자 회선, 광섬유 등) 네트워 크, 하나 이상의 통신 링크, 버스 등을 포함할 수 있다. 일부 예들에서, SDSi 반도체 디바이스는 하나 이상의 에지 클라우드에 포함되거나 다른 방식으로 이를 구 현하는 예시적인 에지 노드, 에지 서버 등에 포함되거나 다른 방식으로 이를 구현한다. 일부 예들에서, SDSi 반도체 디바이스는 어플라이언스 컴퓨팅 디바이스에 포함되거나 다른 방식으로 이를 구현한다. 일부 예 들에서, 제조업체 엔터프라이즈 시스템은 하나 이상의 에지 클라우드에 포함되거나 다른 방식으로 이를 구현하는 하나 이상의 에지 노드, 에지 서버 등에 의해 구현된다. 일부 예들에서, 제조업체 엔터프라이즈 시스 템은 하나 이상의 어플라이언스 컴퓨팅 디바이스에 의해 구현된다. 일부 예들에서, 고객 엔터프라이즈 시스템은 하나 이상의 에지 클라우드에 포함되거나 다른 방식으로 이를 구현하는 하나 이상의 에지 노드, 에지 서버 등에 의해 구현된다. 일부 예들에서, 고객 엔터프라이즈 시스템은 하나 이상의 어플라이언스 컴퓨팅 디바이스에 의해 구현된다. 그러한 에지 노드들, 에지 서버들, 에지 클라우드들 및 어플라이언스 컴퓨 팅 디바이스들의 예들은 도 2 내지 도 4와 관련하여 위에서 더 상세히 설명되어 있다. 또한, 일부 예들에서, 그러한 에지 노드들, 에지 서버들, 에지 클라우드들 및 어플라이언스 컴퓨팅 디바이스들 자체는 본 개시내용의 교시에 따라 구성/관리될 수 있는 SDSi 반도체 디바이스들에 의해 구현될 수 있다. 일부 예들에서, 제조업체 엔터프라이즈 시스템은 클라우드 플랫폼을 통해 다수의 고객 엔터프라이 즈 시스템들 및/또는 다수의 SDSi 반도체 디바이스들과 통신한다. 일부 예들에서, 제조업체 엔터 프라이즈 시스템은 하나 이상의 에지 서버/노드를 통해 클라우드 플랫폼을 거쳐 다수의 고객 엔터 프라이즈 시스템들 및/또는 다수의 SDSi 반도체 디바이스(들)과 통신한다. 어느 한 그러한 예에서, 고객 엔터프라이즈 시스템(들) 및/또는 SDSi 반도체 디바이스(들) 자체는 하나 이상의 에 지 노드, 에지 서버, 에지 클라우드 및 어플라이언스 컴퓨팅 디바이스 등에 대응할 수 있다. 일부 예들에서, 제조업체 엔터프라이즈 시스템은 고객의 네트워크 도메인 내에 위치하는 하나 이상의 원 격 에지 노드, 에지 서버, 에지 클라우드, 어플라이언스 컴퓨팅 디바이스 등에 SDSi 라이선스 생성 및 관리 능 력들을 위임할 수 있다. 예를 들어, 그러한 원격 에지 노드들, 에지 서버들, 에지 클라우드들, 어플라이언스 컴퓨팅 디바이스들 등은 고객 엔터프라이즈 시스템에 포함될 수 있다. 일부 그러한 예들에서, 원격 에지 노드들, 에지 서버들, 에지 클라우드들, 어플라이언스 컴퓨팅 디바이스들 등이 제조업체 엔터프라이즈 시스템 과 통신할 수 있기만 하다면, 제조업체 엔터프라이즈 시스템은 고객의 SDSi 반도체 디바이스들 과 연관된 SDSi 라이선스 생성 및 관리를 수행할 수 있는 완전한 능력을 그러한 원격 에지 노드들, 에지 서버들, 에지 클라우드들, 어플라이언스 컴퓨팅 디바이스들 등에 위임할 수 있다. 그렇지만, 일부 예들에서, 제조업체 엔터프라이즈 시스템과의 통신이 중단되는 경우, 원격 에지 노드들, 에지 서버들, 에지 클라우 드들, 어플라이언스 컴퓨팅 디바이스들은 고객의 SDSi 반도체 디바이스들과 연관된 SDSi 라이선스 생성 및 관리를 수행할 수 있는 제한된 능력만을 가질 수 있다. 예를 들어, 그러한 제한된 능력은 위임된 SDSi 라이 선스 생성 및 관리를 SDSi 반도체 디바이스들과 연관된 장애 복구를 지원하는 것으로 제한할 수 있다. 그러한 장애 복구는 SDSi 반도체 디바이스의 하나 이상의 컴포넌트의 장애를 보상하기 위해(예를 들면, 이전에 계약된 서비스 품질을 유지하기 위해) 클라이언트의 SDSi 반도체 디바이스의 SDSi 특징들을 구성 하기 위한 라이선스들을 생성 및 제공하는 것으로 제한될 수 있다. 도 40의 예시적인 시스템에 포함된 SDSi 실리콘 제품의 SDSi 자산 에이전트, 제조업체 엔터 프라이즈 시스템 및 고객 엔터프라이즈 시스템의 예시적인 구현들을 예시하는 예시적인 시스템 의 블록 다이어그램이 도 41에 예시되어 있다. 도 41의 예시적인 SDSi 자산 에이전트는 예시적인 에이전트 인터페이스, 예시적인 에이전트 로컬 서비스들, 예시적인 분석 엔진, 예시적인 통 신 서비스들, 예시적인 에이전트 커맨드 라인 인터페이스(CLI), 예시적인 에이전트 데몬, 예 시적인 라이선스 프로세서, 및 예시적인 에이전트 라이브러리를 포함한다. 도 41의 예시적인 SDSi 자산 에이전트는 SDSi 반도체 디바이스의 하드웨어 회로부, 펌웨어 및/또는 BIOS에 의해 구현되는 각자의 예시적인 특징 세트들(4132 내지 4142)에 대응하는 예시적인 특징 라이브러 리들(4120 내지 4130)을 또한 포함한다. 도 41의 예시적인 제조업체 엔터프라이즈 시스템은 예시적인 제품 관리 서비스, 예시적인 고객 관리 서비스, 및 예시적인 SDSi 특징 관리 서비스를 포함한 다. 도 41의 예시적인 제조업체 엔터프라이즈 시스템은 또한 예시적인 SDSi 포털 및 예시적인 SDSi 에이전트 관리 인터페이스를 클라우드 플랫폼에서의 클라우드 서비스들로서 구현한다. 도 41 의 예시적인 고객 엔터프라이즈 시스템은 예시적인 SDSi 클라이언트 에이전트, 예시적인 플랫폼 재 고 관리 서비스, 예시적인 계정 관리 서비스 및 예시적인 자격 관리 서비스를 포함한다. 도 41의 예시된 예에서, 에이전트 인터페이스는 SDSi 자산 에이전트와 제조업체 엔터프라이즈 시스 템 사이, 그리고 SDSi 자산 에이전트와 고객 엔터프라이즈 시스템 사이에서 송신되는 메시지 들을 프로세싱하기 위한 인터페이스를 구현한다. 예시된 예의 SDSi 자산 에이전트는 반도체 디바이스 에서 SDSi 자산 에이전트를 실행하는 데 사용되는 임의의 로컬 서비스들을 구현하기 위한 에이전트 로컬 서비스들을 포함한다. 예시된 예의 SDSi 자산 에이전트는 반도체 디바이스의 작동과 연관된 원격 측정 데이터를 생성하기 위한 분석 엔진을 포함한다. 그에 따라, 분석 엔진은 반도체 디바이스의 작동과 연관된 원격 측정 데이터를 보고하기 위한 수단의 예이다. 예시된 예의 SDSi 자산 에 이전트에서 제공되는 통신 서비스들은 SDSi 자산 에이전트가 반도체 디바이스 및/또는 반도체 디바이스를 포함하는 제품 플랫폼의 다른 요소들과 로컬로 통신할 수 있도록 하기 위한 로컬 통신 서비스를 포함한다. 통신 서비스들은 SDSi 자산 에이전트가 제조업체 엔터프라이즈 시스템 의 SDSi 에이전트 관리 인터페이스 및 고객 엔터프라이즈 시스템의 SDSi 클라이언트 에이전트 와 원격으로 통신할 수 있도록 하기 위한 원격 통신 서비스를 또한 포함한다. 예시된 예의 SDSi 자산 에 이전트는 커맨드 라인 인터페이스를 통해 반도체 디바이스에 로컬로 입력되는 커맨드들을 프로세싱 하기 위한 에이전트 CLI를 포함한다. 예시된 예의 SDSi 자산 에이전트는 SDSi 반도체 디바이스 의 하드웨어 회로부, 펌웨어 및/또는 BIOS에 의해 구현되는 특징 세트들(4132 내지 4142)에 포함된 하나 이상의 SDSi 특징을 구성(예를 들면, 활성화, 비활성화 등)하기 위해 고객 엔터프라이즈 시스템으로부터 수신되는 라이선스(들)를 프로세싱하기 위한 라이선스 프로세서를 포함한다. 그에 따라, 라이선스 프로세서는 원격 엔터프라이즈 시스템으로부터 네트워크를 통해 수신되는 라이선스에 기 초하여 반도체 디바이스의 적어도 하나의 특징을 활성화 또는 비활성화시키기 위한 수단의 예이다. 예시 된 예의 SDSi 자산 에이전트는 SDSi 자산 에이전트의 요소들을 안전하게 실행하기 위한 에이전트 데몬을 포함한다. 예를 들어, 에이전트 데몬은 반도체 디바이스에 의해 구현되는, TEE(trusted execution environment)와 같은, 보호된 환경에서 에이전트 인터페이스, 에이전트 로컬 서 비스들, 분석 엔진, 통신 서비스들, 에이전트 CLI 및/또는 라이선스 프로세서 중 하나 이상을 실행할 수 있다. 예시된 예의 SDSi 자산 에이전트는, 무엇보다도, 수신된 라이선스 데이 터에 기초하여, SDSi 반도체 디바이스의 하드웨어 회로부, 펌웨어 및/또는 BIOS에 의 해 구현되는 대응하는 예시적인 특징 세트들(4132 내지 4142) 내의 하나 이상의 특징을 구성(예를 들면, 활성화, 비활성화 등)하기 위한 각자의 하드웨어 특정 특징 라이브러리들(4120 내지 4130)을 호출하기 위해 라 이선스 프로세서에 의해 사용되는 하드웨어 무관 API들(application programming interfaces)을 제공하 기 위한 에이전트 라이브러리를 포함한다. 그에 따라, 하드웨어 회로부, 펌웨어 및/또는 BIOS는 SDSi 반도체 디바이스에 SDSi 특징들을 제공하기 위한 수단의 예들이다. 일부 예들에서, 에이전트 라이브러리 및/또는 하드웨어 특정 특징 라이브러리들(4120 내지 4130)은 또한 반도체 디바이스 에 의해 구현되는, TEE와 같은, 보호된 환경에서 작동한다. 도 41의 SDSi 자산 에이전트의 요소들 에 관한 추가 세부 사항들은 아래에서 설명된다. 도 41의 예시된 예에서, 제조업체 엔터프라이즈 시스템은 SDSi 반도체 디바이스의 제조업체에 의해 제조되는 제품들의 재고, 가격 책정 등을 관리하기 위한 예시적인 제품 관리 서비스를 포함한다. 예시된 예의 제조업체 엔터프라이즈 시스템은 SDSi 반도체 디바이스의 제조업체에 대한 고객 계정, 빌링, 조정(reconciliation) 등을 관리하기 위한 고객 관리 서비스를 포함한다. 예시된 예의 제조업체 엔터프 라이즈 시스템은 SDSi 반도체 디바이스의 제조업체에 의해 제조되는 실리콘 제품들에 의해 구현되 는 SDSi 특징(들)의 구성을 관리하기 위한 SDSi 특징 관리 서비스를 포함한다. 예시된 예의 제조업체 엔 터프라이즈 시스템은 고객 엔터프라이즈 시스템과 (예를 들면, 네트워크를 통해) 통신하기 위해 SDSi 포털을 구현한다. 예시된 예의 제조업체 엔터프라이즈 시스템은 SDSi 반도체 디바이스(400 5)의 SDSi 자산 에이전트와 (예를 들면, 네트워크를 통해) 통신하기 위해 SDSi 에이전트 관리 인터페이스 를 구현한다. 도 41의 제조업체 엔터프라이즈 시스템의 요소들에 관한 추가 세부 사항들은 아래에 서 설명된다. 도 41의 예시된 예에서, 고객 엔터프라이즈 시스템은 제조업체 엔터프라이즈 시스템 및 SDSi 반도 체 디바이스의 SDSi 자산 에이전트와 (예를 들면, 네트워크를 통해) 통신하기 위한 SDSi 클라이언 트 에이전트를 포함한다. 예시된 예의 고객 엔터프라이즈 시스템은, SDSi 반도체 디바이스 를 포함하는 플랫폼들과 같은, 고객(OEM)에 의해 제공되는 플랫폼들을 관리하기 위한 플랫폼 재고 관리 서비스 를 포함한다. 예시된 예의 고객 엔터프라이즈 시스템은 고객이, SDSi 반도체 디바이스의 제 조업체와 같은, 제조업체들, 다운스트림 고객들 등과 가지는 계정, 빌링, 조정 등을 관리하기 위한 계정 관리 서비스를 포함한다. 예시된 예의 고객 엔터프라이즈 시스템은 해당 제품들에 의해 구현되는 SDSi 특징들을 구성(예를 들면, 활성화, 비활성화 등)하기 위해, SDSi 반도체 디바이스의 제조업체와 같은, SDSi 제품들의 제조업체들에 의해 부여되는 라이선스들을 관리하기 위한 자격 관리 서비스를 포함한다. 도 41의 고객 엔터프라이즈 시스템의 요소들에 관한 추가 세부 사항들은 아래에서 설명된다. 도 40 내지 도 42의 예시적인 시스템들(4000 및/또는 4100)에 의해 구현될 수 있는 예시적인 SDSi 관리 수명 주 기가 도 42에 예시되어 있다. 수명 주기는 SDSi 반도체 디바이스에 의해 제공되는 SDSi 특 징을 활성화 또는 비활성화시키는 관점에서 설명되지만, SDSi 반도체 디바이스에 의해 제공되는 SDSi 특 징의 임의의 유형의 구성 변경에도 적용될 수 있다. 수명 주기는 고객 엔터프라이즈 시스템의 SDSi 클라이언트 에이전트가 SDSi 반도체 디바이스에 의해 제공되는 SDSi 특징을 활성화(또는 비활 성화)시키라는 요청을 제조업체 엔터프라이즈 시스템의 SDSi 포털에게 송신하는 블록에서 시 작한다. 그에 따라, SDSi 포털은 반도체 디바이스에 의해 제공되는 특징을 활성화 또는 비활성화 시키라는 요청을 수신하기 위한 수단의 예이다. 예를 들어, 고객은 플랫폼 재고 관리 서비스에 의해 유 지되는 SDSi 반도체 디바이스에 대한 고객 관리 기록에 액세스하고, 요청을 송신하기 위해 SDSi 클라이언 트 에이전트를 호출하도록 고객 관리 기록을 수정할 수 있다. 그에 따라, SDSi 클라이언트 에이전트 는 반도체 디바이스에 의해 제공되는 SDSi 특징을 활성화 또는 비활성화시키라는 요청을 송신하기 위한 수단의 예이다. 블록에서, 제조업체 엔터프라이즈 시스템의 SDSi 포털은 SDSi 반도체 디바이스에 의해 제공되는 SDSi 특징을 활성화(또는 비활성화)시키라는 고객 엔터프라이즈 시스템 의 SDSi 클라이언트 에이전트에 의해 송신된 요청을 수신한다. 블록에서, SDSi 에이전트 관리 인 터페이스는 SDSi 반도체 디바이스가 활성화(또는 비활성화)될 SDSi 특징을 지원하는지를 확인하기 위한 질의를 SDSi 자산 에이전트에게 송신한다. 예를 들어, SDSi 특징 관리 서비스는 SDSi 포털 을 통해 수신되는 고객 요청을 프로세싱하고, 질의를 송신하기 위해 SDSi 에이전트 관리 인터페이스 를 호출할 수 있다. SDSi 자산 에이전트의 에이전트 인터페이스는 질의를 수신하고, 응답을 생성하기 위해 라이선스 프로세서를 호출한다. 라이선스 프로세서는 반도체 디바이스의 하 드웨어 회로부, 펌웨어 및/또는 BIOS의 구성을 분석하고, 질의된 특징이 반도체 디바이스 에 의해 지원되는지 여부를 나타내는 특징 지원 검증 정보를 생성하고, 에이전트 인터페이스를 통 해, 특징 지원 검증 정보를 포함하는 응답을 SDSi 에이전트 관리 인터페이스에게 보고한다. 일부 예들에 서, SDSi 반도체 디바이스의 SDSi 자산 에이전트에 질의하기보다는, SDSi 에이전트 관리 인터페이 스는 (예를 들면, 디바이스 식별자 및/또는 특징 요청에 포함된 SKU 정보에 기초하여) SDSi 반도체 디바 이스가 요청된 특징을 지원하는지 여부를 확인하기 위해 SDSi 반도체 디바이스에 대한 사양/구성 데이터를 저장하는 하나 이상의 데이터베이스 및/또는 다른 데이터 구조들에 액세스한다. 수명 주기의 블록에서, SDSi 에이전트 관리 인터페이스는 SDSi 자산 에이전트(또는 질 의 데이터베이스(들) 및/또는 데이터 구조(들))로부터 질의 응답을 수신하고, 이 질의 응답은 SDSi 특징 관리 서비스에 의해 프로세싱된다. 응답이 관심 SDSi 특징이 SDSi 반도체 디바이스에 의해 지원된다는 것을 나타내는 경우, 블록에서 SDSi 특징 관리 서비스는 요청된 대로 SDSi 특징을 활성화(또는 비 활성화)시키기 위한 라이선스를 생성한다. 그에 따라, SDSi 특징 관리 서비스는 SDSi 특징을 활성화 또 는 비활성화시키기 위해 반도체 디바이스에 의해 프로세싱될 라이선스를 생성하기 위한 수단의 예이다. 또한, 블록에서, SDSi 특징 관리 서비스는 라이선스가 SDSi 포털을 통해 고객 엔터프라이즈 시스템의 SDSi 클라이언트 에이전트에게 송신되게 한다. 그에 따라, SDSi 클라이언트 에이전트 는 반도체 디바이스에 의해 제공되는 SDSi 특징의 활성화 또는 비활성화를 인가하기 위해 엔터프라 이즈 관리 시스템으로부터 라이선스를 수신하기 위한 수단의 예이다. 예시된 예에서, 블록에서 생성되는 라이선스는, 예를 들어, 반도체 디바이스의 식별자, 활성화(또는 비활성화)될 SDSi 특징, 활성화(또는 비 활성화)의 조건, 예컨대, 이것이 일회성 활성화(비활성화)인지 또는 구독에 따라 갱신 가능한 활성화인지, SDSi 특징을 활성화(또는 비활성화)시키기 위해 라이선스를 호출하기 위한 유효한 시작 창(예를 들면, X 시간, 여기 서 X는 숫자 값 또는 어떤 다른 지속기간) 등을 지정하는 라이선스 키 및/또는 라이선스 데이터와 연관된다. 수명 주기에서의 이 시점에서, 블록에서 생성되는 라이선스는 SDSi 특징을 활성화(또는 비활성화)시키기 위한 미사용 라이선스로서 취급되며, 이는, 적용 비율, 프로세서 구성 등과 같은, 요청된 특징을 활성화 (또는 비활성화)시키기 위해 고객이 라이선스의 사용을 트리거할 때까지 고객 엔터프라이즈 시스템에 있 는 리포지토리에 저장된다. 예를 들어, 제조업체 엔터프라이즈 시스템의 SDSi 특징 관리 서비스는 블록에서 생성된 라이선스 및/또는 라이선스 데이터를 포함하도록 반도체 디바이스에 대해 제조업 체에 의해 유지되는 제조업체 관리 기록을 업데이트할 수 있다. 마찬가지로, 고객 엔터프라이즈 시스템 의 자격 관리 서비스는 라이선스 세부 사항들과 함께 라이선스의 수신을 표시하도록 반도체 디바이스 에 대해 고객에 의해 유지되는 고객 관리 기록을 업데이트할 수 있다. 그에 따라, 자격 관리 서비스 는 라이선스에 기초하여 반도체 디바이스와 연관된 관리 기록을 업데이트하기 위한 수단의 예이다. 일부 그러한 예들에서, 자격 관리 서비스는 SDSi 특징을 활성화(또는 비활성화)시키기 위한 라이선스의 작동을 트리거하도록 고객 관리 기록을 업데이트하기 위해 고객에 의해 호출될 수 있으며, 이는 고객 엔터프라 이즈 시스템의 SDSi 클라이언트 에이전트로 하여금 라이선스를 네트워크를 통해 반도체 디바 이스의 SDSi 자산 에이전트에게 전송(예를 들면, 다운로드)하게 한다. 예를 들어, 라이선스를 호출하라는 요청을 SDSi 클라이언트 에이전트에서 수신할 시에, 블록에서 SDSi 클라이언트 에이전트는 라이선스를 SDSi 자산 에이전트에게 송신한다. 그에 따라, SDSi 클라 이언트 에이전트는 라이선스를 반도체 디바이스에게 송신하기 위한 수단의 예이다. 라이선스는 블 록에서 라이선스 프로세서를 호출하는 에이전트 인터페이스에 의해 수신된다. 블록에 서, 라이선스 프로세서는 활성화(또는 비활성화)될 특징을 식별하기 위해 라이선스 데이터를 프로세싱하 고, 라이선스 데이터에 따라 특징을 활성화(또는 비활성화)시킨다. 예를 들어, 특징이 제2 적용 비율(예를 들 면, 코어들 중 하나(다수)가 워크로드에 기초하여 제2 작동 주파수들에서 작동할 수 있음)을 나타내고, 반도체 디바이스가 제1 적용 비율(예를 들면, 코어들 중 하나(다수)가 워크로드에 기초하여 제1 작동 주파수들에 서 작동할 수 있음)을 갖도록 초기화된 경우, (예를 들면, 제2 적용 비율을 활성화시키라는 고객 엔터프라이즈 시스템으로부터의 요청에 응답하여) 라이선스 데이터는 제2 적용 비율이 활성화되어야 한다는 것을 지정 할 수 있다. 라이선스 데이터는 또한 제2 적용 비율을 적용할 코어들, 언코어들, CLM들 등 중 하나(다수)를 식 별해 줄 수 있다. 그러한 예에서, 라이선스 프로세서는 라이선스 데이터에 지정된 제2 적용 비율을 활성 화시키기 위해 에이전트 라이브러리를 호출한다. 다른 예로서, SDSi 자산 에이전트는 활성화될 제 3 적용 비율을 지정하는 고객 엔터프라이즈 시스템의 SDSi 클라이언트 에이전트로부터 제2 라이선 스를 나중에 수신할 수 있다(예를 들면, 제2 라이선스는 제3 적용 비율을 활성화시키라는 고객 엔터프라이즈 시 스템으로부터의 요청에 응답하여 제조업체 엔터프라이즈 시스템에 의해 생성됨). 제2 라이선스 데 이터는 또한 코어들 중 어느 코어들이 제3 적용 비율에 의해 영향을 받는지를 식별해 줄 수 있다. 그러한 예에 서, 라이선스 프로세서는 라이선스 데이터에 지정된 코어들을 구성하기 위해 에이전트 라이브러리 를 호출한다. 일부 예들에서, 특징이 구성 가능한 클록 속도이고, 반도체 디바이스가 가능한 클록 속도 세트로 부터의 제1 클록 속도를 활성화시키도록 초기화된 경우, 제조업체 엔터프라이즈 시스템에 의해 생성되고 고객 엔터프라이즈 시스템의 SDSi 클라이언트 에이전트를 통해 다운로드되는 라이선스는 (예를 들 면, 제2 클록 속도를 활성화시키라는 고객 엔터프라이즈 시스템으로부터의 요청에 응답하여) 활성화될 제 1 클록 속도와 상이한 제2 클록 속도를 식별해 줄 수 있다. 그러한 예에서, 라이선스 프로세서는 라이선 스 데이터에서 식별되는 제2 클록 속도를 활성화시키기 위해 에이전트 라이브러리를 호출한다. 일부 예들에서, 단일 라이선스는 상이한 특징 범주들에 걸쳐 다수의 특징들을 구성할 수 있다. 예를 들어, 단 일 라이선스는 하나 이상의 추가적인 코어를 활성화시키기 위한 제1 라이선스 데이터, 및 적용 비율의 변경을 실시하기 위해 하나 이상의 코어의 클록 속도를 수정하고/하거나 다른 방식으로 조정하기 위한 제2 라이선스를 포함할 수 있다. 그러한 예에서, 조정된 클록 속도는 하나 이상의 이전에 활성화된 코어 및/또는 라이선스 프 로세서가 라이선스를 프로세싱하는 것에 응답하여 활성화될 하나 이상의 추가적인 코어 중 하나(다수)에 적용될 수 있다. 추가적으로 또는 대안적으로, 일부 예들에서, 단일 라이선스는 하나 이상의 특징을 활성화시 키고, 또한 하나 이상의 다른 특징을 비활성화시킬 수 있다. 수명 주기의 블록에서, SDSi 자산 에이전트의 분석 엔진은 반도체 디바이스에 대해 수행되는 SDSi 특징 활성화(또는 비활성화)를 로깅한다. 블록에서, 분석 엔진은 반도체 디바 이스의 (펌웨어 및/또는 BIOS와 함께) 회로부에 의해 유지되는 현재의 로컬 시간을 나 타내는 주행 거리계 판독값을 캡처한다. 예를 들어, 회로부는 (도 42에서 유향선에 의해 나타내어 지는) 반도체 디바이스에서 로컬로 시간의 경과를 추적하기 위한 주행 거리계를 구현하기 위해 카운터, 타이머 또는 다른 메커니즘을 활용할 수 있다. 일부 예들에서, 주행 거리계 판독값은 SDSi 반도체 디바이스 의 작동이 보증 및/또는 그렇지 않고 SDSi 반도체 디바이스와 연관된 사용 조건 및 활성화 협약을위반했는지 여부를 결정하기 위해 제조업체 엔터프라이즈 시스템에 의해 사용될 수 있다. 블록에 서, 분석 엔진은 요청된 특징이 활성화(또는 비활성화)되었을 때의 타임스탬프로서 작용하도록 주행 거리 계의 값을 캡처한다. 블록에서, 분석 엔진은 요청된 SDSi 특징의 성공적인 활성화(또는 비활성 화)를 확인하기 위해 확인서를 생성한다. 예시된 예에서, 확인서는 요청된 SDSi 특징의 활성화(또는 비활성 화)에 응답하여 분석 엔진에 의해 생성되는 반도체 디바이스의 작동과 연관된 원격 측정 데이터를 포함한다. 일부 예들에서, 원격 측정 데이터는 특징 활성화(또는 비활성화)가 성공했는지 여부의 표시, (예를 들면, 적용 비율로 구성되는 현재 구성된 코어 수, 현재 활성 클록 속도 등과 같은) 활성화(또는 비활성화)에 의해 영향을 받는 SDSi 특징의 상태, 특징 활성화(또는 비활성화)가 언제 발생했는지를 나타내는 제1 주행 거리 계 판독값(예를 들면, 제1 타임스탬프), 확인서가 생성되었는지 여부를 나타내는 제2 주행 거리계 판독값(예를 들면, 제2 타임스탬프) 등을 포함한다. 수명 주기의 블록에서, 분석 엔진은 수신된 라이선스 데이터에 기초하여 SDSi 특징의 활성화 (또는 비활성화)에 응답하여 원격 측정 데이터를 갖는 확인서를, 에이전트 인터페이스를 통해, 보고한다. 예시된 예에서, 분석 엔진은 원격 측정 데이터를 갖는 확인서를 제조업체 엔터프라이즈 시스템과 고객 엔터프라이즈 시스템 양쪽 모두에 보고한다. 예를 들어, 블록에서, 제조업체 엔터프라이즈 시스템의 예시적인 SDSi 에이전트 관리 인터페이스는 확인서를 수신하고, 블록에서 이를 제 조업체 엔터프라이즈 시스템의 SDSi 특징 관리 서비스에 제공한다. 그에 따라, SDSi 에이전트 관 리 인터페이스는 SDSi 특징의 성공적인 활성화 또는 비활성화를 확인하기 위해 반도체 디바이스로 부터 확인서를 수신하기 위한 수단의 예이다. SDSi 특징 관리 서비스는 성공적인 특징 활성화(또는 비활 성화)를 로깅하기 위해 확인서 및 포함된 원격 측정 데이터를 프로세싱한다. 유사하게, 블록에서, 고객 엔터프라이즈 시스템의 SDSi 클라이언트 에이전트는 확인서를 수신하고, 블록에서 이를 고객 엔터프라이즈 시스템의 자격 관리 서비스에 제공한다. 자격 관리 서비스는 성공적인 특징 활성화(또는 비활성화)를 로깅하기 위해 확인서 및 포함된 원격 측정 데이터를 프로세싱한다. 예시된 예에서, 수명 주기에서의 이 시점에서, 특징 활성화(또는 비활성화)의 상태는 SDSi 자산 에이전트로부터의 후속 확인서에 의해 확인될 때까지 불완전한 것으로 간주될 수 있다(블록들(4236 및 4238) 참조). 수명 주기에서의 블록에서, 제조업체 엔터프라이즈 시스템의 SDSi 에이전트 관리 인터페이스 는 SDSi 자산 에이전트로부터 업데이트된 원격 측정 데이터를 갖는 후속 확인서를 수신한다. 블록 에서, 후속 확인서는 제조업체 엔터프라이즈 시스템의 SDSi 특징 관리 서비스에 제공된다. SDSi 특징 관리 서비스는 업데이트된 원격 측정 데이터를 획득하기 위해 확인서를 프로세싱하고, 또한 이 전 확인서에 포함된 이전 원격 측정 데이터를 획득한다. 블록에서, SDSi 특징 관리 서비스는 원격 측정 데이터에 포함된 주행 거리계 판독값들에 액세스한다. 블록에서, SDSi 특징 관리 서비스는 관심 SDSi 특징의 성공적인 활성화(또는 비활성화)(또는, 보다 일반적으로, 성공적인 구성 변경)를 확인하기 위 해 원격 측정 데이터와 주행 거리계 판독값을 비교한다. 그에 따라, SDSi 특징 관리 서비스는 원격 측정 데이터에 기초하여 SDSi 특징의 성공적인 활성화 또는 비활성화를 검증하기 위한 수단의 예이다. 블록에 서, 제조업체 엔터프라이즈 시스템의 고객 관리 서비스는 관심 SDSi 특징의 성공적인 활성화(또는 비활성화)에 대한 청구서를 생성하고, 이를 계정 관리 서비스에 의한 프로세싱을 위해 SDSi 포털을 통해 고객 엔터프라이즈 시스템에게 송신한다. 일부 예들에서, 반도체 디바이스가 현재 SKU(예를 들면, 제1 SKU)와 연관되어 있다고 가정하여, 요청된 SDSi 특징이 활성화(또는 비활성화)된 후에, 제조업체 엔 터프라이즈 시스템의 제품 관리 서비스는 새로운 SKU(예를 들면, 제2 SKU)를 생성하고, 새로운 SKU(제2 SKU)를 반도체 디바이스와 연관시키기 위해 반도체 디바이스에 대해 유지되는 제조업체 관 리 기록을 업데이트한다. 그에 따라, 제품 관리 서비스는 SDSi 특징이 활성화 또는 비활성화된 후에 제2 SKU를 반도체 디바이스와 연관시키기 위해 관리 기록을 업데이트하기 위한 수단의 예이다. 추가적으로 또는 대안적으로, 일부 예들에서, 반도체 디바이스가 현재 SKU(예를 들면, 제1 SKU)와 연관되어 있다고 가정하여, 요청된 SDSi 특징이 활성화(또는 비활성화)된 후에, 고객 엔터프라이즈 시스템의 플랫폼 재고 관리 서비스는 새로운 SKU(예를 들면, 제2 SKU)를 생성하고, 새로운 SKU(제2 SKU)를 반도체 디바이스 와 연관시키기 위해 반도체 디바이스에 대해 유지되는 고객 관리 기록을 업데이트한다. 그에 따라, 플랫폼 재고 관리 서비스는 SDSi 특징이 활성화 또는 비활성화된 후에 제2 SKU를 반도체 디바이스 와 연관시키기 위해 관리 기록을 업데이트하기 위한 수단의 예이다. 수명 주기의 블록에서, 고객 엔터프라이즈 시스템의 자격 관리 서비스는 반도체 디바 이스의 상태에 대한 요청을 생성하고, 요청을 SDSi 클라이언트 에이전트를 통해 SDSi 자산 에이전 트에게 송신한다. 추가적으로 또는 대안적으로, 제조업체 엔터프라이즈 시스템의 SDSi 특징 관리서비스는 반도체 디바이스의 상태에 대한 요청을 생성할 수 있고, 요청을 SDSi 에이전트 관리 인터 페이스를 통해 SDSi 자산 에이전트에게 송신할 수 있다. 어느 경우든, 블록에서, 에이전트 인터페이스는 요청을 수신하고, 요청에 응답하여 확인서를 생성하기 위해 분석 엔진을 호출한다. 예시된 예에서, 확인서는 요청에 응답하여 분석 엔진에 의해 생성되는 반도체 디바이스의 작동과 연관된 업데이트된 원격 측정 데이터를 포함한다. 업데이트된 원격 측정 데이터는 요청에 응답하여 캡처되는 주행 거리계 판독값에 대응하는 로컬 시간으로 타임스탬핑된다. 블록들(4254 및 4256)에서, SDSi 에이전트 관 리 인터페이스는 SDSi 자산 에이전트로부터 업데이트된 원격 측정 데이터를 갖는 요청된 확인서를 수신하고, 이를 제조업체 엔터프라이즈 시스템의 SDSi 특징 관리 서비스에 제공한다. SDSi 특징 관리 서비스는 업데이트된 원격 측정 데이터를 획득하고, 또한 반도체 디바이스에 대한 이전 원격 측정 데이터를 획득하며, 원격 측정 데이터에 포함된 주행 거리계 판독값들에 추가로 액세스한다. 블록 에서, 예시적인 SDSi 특징 관리 서비스는 반도체 디바이스의 작동 상태의 이력을 업데이트하고, 원 격 측정 데이터를 사용하여 반도체 디바이스가 적절하게 작동하고 있는지 여부를 결정한다. 유사하게, 수명 주기의 블록에서, SDSi 클라이언트 에이전트는 SDSi 자산 에이전트로 부터 업데이트된 원격 측정 데이터를 갖는 요청된 확인서를 수신하고, 이를 고객 엔터프라이즈 시스템의 자격 관리 서비스에 제공한다. 자격 관리 서비스는 업데이트된 원격 측정 데이터를 획득하고, 또 한 반도체 디바이스에 대한 임의의 이전 원격 측정 데이터를 획득하며, 원격 측정 데이터에 포함된 주행 거리계 판독값들에 추가로 액세스한다. 자격 관리 서비스는 이어서 반도체 디바이스의 작동 상태 의 이력을 업데이트하고, 원격 측정 데이터를 사용하여 반도체 디바이스가 적절하게 작동하고 있는지 여 부를 결정한다. 일부 예들에서, 고객 엔터프라이즈 시스템의 계정 관리 서비스는, 확인서의 수신 에 기초하여, 블록에서 제조업체 엔터프라이즈 시스템으로부터 수신되는 청구서와 연관된 지불 의 무와 같은, 반도체 디바이스의 제조업체와의 지불 의무의 설정 또는 체결을 확인하기 위해 반도체 디바이 스와 연관된 고객 관리 기록을 업데이트한다. 그에 따라, 계정 관리 서비스는 반도체 디바이스 의 제조업체와의 지불 의무의 설정 또는 체결을 확인하기 위해, 확인서에 기초하여, 관리 기록을 업데이 트하기 위한 수단의 예이다. 도 42의 예시적인 수명 주기에 예시된 바와 같이, 블록에서 고객 엔터프라이즈 시스템에 의 해 송신되고 블록에서 제조업체 엔터프라이즈 시스템에 의해 수신되는 SDSi 특징을 활성화(또는 비 활성화)시키라는 요청은 고객과 제조업체 사이의 계약을 개시할 수 있다. 나중에, 블록에서 라이선스를 고객 엔터프라이즈 시스템에게 송신하는 것은 지불 의무를 시작하는 트리거일 수 있다(블록 참조). 일부 예들에서, 지불 의무의 시작은 블록에서의 라이선스에 기초하여 반도체 디바이스에서 특징이 활성화(또는 비활성화)될 때까지 지연될 수 있다. 나중에, 반도체 디바이스에서의 SDSi 특징의 활성화 (또는 비활성화)에 응답하여 블록에서 확인서를 보고하는 것은 지불 의무를 검증할 수 있다(블록 참조). 나중에, 블록에서의 청구서의 생성 및 수신은 지불 의무의 조정을 트리거할 수 있다(블록 참조). 반도체 디바이스에서의 SDSi 특징들을 활성화(또는 비활성화)시키기 위해 제조업체 엔터프라이즈 시스템 에 의해 생성되는 라이선스는 일회성 활성화, 주문형 활성화 및/또는 반복적인 구독 모델들을 지원할 수 있다. 예를 들어, 라이선스는 반도체 디바이스에서 실행되는 SDSi 자산 에이전트의 라이선스 프로 세서에게 라이선스 데이터에 의해 식별되는 하나 이상의 특징의 일회성 활성화(또는 비활성화)를 수행하 도록 지시하는 라이선스 데이터를 포함할 수 있다. 일부 예들에서, 주문형 활성화 및/또는 반복적인 구독 모델 들을 지원하기 위해, 제조업체 엔터프라이즈 시스템에 의해 생성되는 라이선스는 라이선스 프로세서 에게 지정된 SDSi 특징(들)을 명시적 허가 또는 명시적 거부 제어 메커니즘에 따라 활성화(또는 비활성화)시키도록 지시하는 라이선스 데이터를 포함할 수 있다. 예를 들어, 명시적 허가 제어 메커니즘 하에 서, 일정 시간 기간이 만료되기 전에 명시적 허가 제어 신호가 제조업체 엔터프라이즈 시스템으로부터 (예를 들면, SDSi 에이전트 관리 인터페이스를 통해) 수신되지 않는 한, 라이선스 프로세서는 라이 선스에 기초하여 활성화되는 SDSi 특징이 그 시간 기간(예를 들면, 카운터, 클록, 또는 다른 메커니즘에 의해 추적됨)의 만료 시에 비활성화되도록 한다. 반대로, 명시적 거부 제어 메커니즘 하에서, 라이선스 프로세서 는, 명시적 거부 제어 신호가 제조업체 엔터프라이즈 시스템으로부터 (예를 들면, SDSi 에이전트 관리 인터페이스를 통해) 수신되지 않는 한, 라이선스에 기초하여 활성화되는 SDSi 특징이 활성으로 유지 되도록 한다. 그러한 예에서, 명시적 거부 제어 신호의 수신은 라이선스 프로세서로 하여금, 예컨대, 특 징을 비활성화시키는 것에 의해, 활성화된 특징에 대한 액세스를 거부하게 한다.일부 예들에서, 반도체 디바이스에서 실행되는 SDSi 자산 에이전트의 라이선스 프로세서는 재프로그래밍 가능한 소프트 퓨즈(들), 레지스터(들), 로직 게이트(들) 등의 사용을 통해 SDSi 특징들을 활성화 및 비활성화시킨다. 예를 들어, 그러한 재프로그래밍 가능한 소프트 퓨즈(들), 레지스터(들), 논리 게이트(들) 등은 SDSi 특징들을 구현하기 위해 반도체 디바이스의 하드웨어 회로부에 포함된 하드웨어 블록들 의 제어 라인들에 연결되고, SDSi 특징 등을 인에이블/디스에이블시키기 위해 펌웨어 및/또는 BIOS(403 5)에 의해 판독되는 제어 입력들에 연결되는 등일 수 있다. 라이선스 프로세서는 반도체 디바이스(400 5)의 상이한 SDSi 특징들을 활성화/비활성화시키기 위해 재프로그래밍 가능한 소프트 퓨즈(들), 레지스터(들)의 값들, 로직 게이트(들)의 입력(들) 등 중 하나(다수)를 설정 및/또는 재설정할 수 있다. 일부 예들에서, 라이선스 프로세서는 수신된 라이선스(들) 및/또는 그 안에 포함된 라이선스 데이터를 반 도체 디바이스의 보호된 라이선스 메모리 영역에 기입한다. 일부 예들에서, 라이선스 데이터는 암호화되 고, 라이선스 프로세서는 라이선스 데이터를 반도체 디바이스의 보호된 라이선스 메모리 영역에 기 입하기 전에 라이선스 데이터를 복호화한다. 일부 그러한 예들에서, 수신된 라이선스에 응답하는 SDSi 특징 활 성화/비활성화는 반도체 디바이스가 (예를 들면, 소프트 리셋, 하드 리셋 등을 통해) 재부팅될 때까지 발 생하지 않고, 보호된 라이선스 메모리 영역 내의 라이선스 데이터는 기동 시에 판독된다. 일부 예들에서, 라이 선스 프로세서는 하나 이상의 SDSi 특징을 활성화시키기 위해 보호된 라이선스 메모리 영역의 하나 이상 의 특정 위치를 설정하고, 해당 SDSi 특징(들)을 비활성화시키기 위해 보호된 라이선스 메모리 영역의 해당 위 치(들)에 포함된 라이선스 데이터를 소거하거나 덮어쓴다. 예를 들어, 주어진 SDSi 특징을 비활성화시키기 위 해, 라이선스 프로세서는 보호된 라이선스 메모리 영역에 있는 해당 특징과 연관된 위치(들)에 랜덤한 또 는 그렇지 않고 가비지 데이터를 기입하고, 주어진 SDSi 특징이 그러한 랜덤한 또는 그렇지 않고 가비지 데이터 에 응답하여 디스에이블된 상태로 유지되도록 하는 반도체 디바이스의 오류 검사 능력에 의존할 수 있다. 일부 예들에서, 비활성화된 SDSi 특징(들)에 대한 보호된 라이선스 메모리 영역(들)의 위치(들)는 소거되지 않 거나 덮어쓰여지지 않는다. 오히려, 일부 그러한 예들에서, SDSi 특징을 비활성화시키기 위해, 비활성화 라이 선스가 해당 SDSi 특징에 대한 보호된 라이선스 메모리 영역에 이미 저장된 라이선스들의 리스트에 추가된다. 그러한 예에서 새로 수신된 비활성화 라이선스는 해당 SDSi 특징에 대해 이전에 수신된 라이선스의 액션들을 무 시한다. 이러한 방식으로, SDSi 특징에 대해 수행되는 SDSi 구성 동작들(활성화들 및 비활성화들)의 이력은 SDSi 라이선스들이 적용된 순서로 반도체 디바이스에 의해 저장된다. 일부 예들에서, 이 정보는 고객에 의해 판독될 수 있다. 전술한 예들과 후술하는 예들은 네트워크 워크로드들에 대한 전력 및 주파수 최적화들에 대한 참조를 제공한다. 유리하게도, 본 명세서에서 설명되는 바와 같은 워크로드들 또는 워크로드들의 유형들에 대한 변동들은 CPU 제 작자 또는 제조업체가, 네트워크 프로세싱 최적화들에 반드시 적용 가능한 것은 아닌 것들을 포함하여, 임의의 수의 맞춤형 SKU들 및 조합들을 생성할 수 있게 할 수 있다. 아래에서 예시적인 컴퓨터 아키텍처들의 세부 사항들이 설명된다. 랩톱들, 데스크톱들, 핸드헬드 PC들, 개인 휴대 단말들, 엔지니어링 워크스테이션들, 서버들, 네트워크 디바이스들, 네트워크 허브들, 스위치들, 임베디드 프로세서들, DSP들, 그래픽 디바이스들, 비디오 게임 디바이스들, 셋톱 박스들, 마이크로 컨트롤러들, 셀 폰들, 휴대용 미디어 플레이어들, 핸드헬드 디바이스들 및 다양한 다른 전자 디바이스들에 대한 본 기술 분야에서 알 려진 다른 시스템 설계들 및 구성들도 적합하다. 일반적으로, 본 명세서에서 개시되는 프로세서 및/또는 다른 실행 로직을 통합할 수 있는 매우 다양한 시스템들 또는 전자 디바이스들이 일반적으로 적합하다. 도 43은 하나 초과의 코어를 가질 수 있고, 통합 메모리 제어기를 가질 수 있으며, 통합 그래픽을 가질 수 있는 프로세서의 예들의 블록 다이어그램을 예시한다. 일부 예들에서, 도 43의 프로세서는 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU, 도 8의 프로세서 등을 구 현할 수 있다. 실선 상자들은 단일 코어(4302A), 시스템 에이전트, 하나 이상의 상호연결 제어기 유닛의 세트 회로부를 갖는 프로세서를 예시하는 반면, 파선 상자들의 선택적인 추가는 다수의 코어들 (4302A 내지 4302N), 시스템 에이전트 유닛 회로부 내의 하나 이상의 통합 메모리 제어기 유닛(들)의 세 트 회로부, 및 특수 목적 로직은 물론, 하나 이상의 상호연결 제어기 유닛의 세트 회로부를 갖는 대안 프로세서를 예시한다. 프로세서는 도 68의 프로세서들(6870 또는 6880), 또는 코프로세 서(6838 또는 6815) 중 하나일 수 있음에 유의한다. 따라서, 프로세서의 상이한 구현들은: 1) (하나 이상의 코어를 포함할 수 있는) 통합 그래픽 및/또는 과 학 (처리량) 로직인 특수 목적 로직, 및 하나 이상의 범용 코어(예를 들면, 범용 순차 코어, 범용 비순차코어, 이 둘의 조합)인 코어들(4302A 내지 4302N)을 갖는 CPU; 2) 주로 그래픽 및/또는 과학 (처리량)을 위해 의도된 많은 수의 특수 목적 코어들인 코어들(4302A 내지 4302N)을 갖는 코프로세서; 및 3) 많은 수의 범용 순 차 코어들인 코어들(4302A 내지 4302N)을 갖는 코프로세서를 포함할 수 있다. 따라서, 프로세서는 범용 프로세서, 코프로세서 또는 특수 목적 프로세서, 예컨대, 예를 들어, 네트워크 또는 통신 프로세서, 압축 엔진, 그래픽 프로세서, GPGPU(general purpose graphics processing unit circuitry), 고처리량 MIC(many integrated core) 코프로세서(30개 이상의 코어를 포함함), 임베디드 프로세서 등일 수 있다. 프로세서는 하나 이상의 칩 상에 구현될 수 있다. 프로세서는, 예를 들어, BiCMOS, CMOS, 또는 NMOS와 같은, 다수의 프로 세스 기술들 중 임의의 것을 사용하여 하나 이상의 기판의 일부일 수 있고/있거나 하나 이상의 기판 상에 구현 될 수 있다. 메모리 계층구조는 코어들(4302A 내지 4302N) 내의 하나 이상의 레벨의 캐시 유닛(들) 회로부(4304A 내지 4304N), 하나 이상의 공유 캐시 유닛의 세트 회로부, 및 통합 메모리 제어기 유닛들의 세트 회로부(431 4)에 결합된 외부 메모리(도시되지 않음)를 포함한다. 하나 이상의 공유 캐시 유닛의 세트 회로부는, 레 벨 2(L2), 레벨 3(L3), 레벨 4(L4)와 같은, 하나 이상의 중간 레벨 캐시 또는, LLC와 같은, 다른 레벨들의 캐시, 또는 이들의 조합들을 포함할 수 있다. 일부 예들에서 링 기반 상호연결 네트워크 회로부는 특수 목적 로직(예를 들면, 통합 그래픽 로직), 공유 캐시 유닛들의 세트 회로부, 및 시스템 에이전트 유닛 회로부를 상호연결시키는 반면, 대안적인 예들은 그러한 유닛들을 상호연결시키기 위해 임의의 수의 잘 알려진 기술들을 사용한다. 일부 예들에서, 공유 캐시 유닛들 회로부 중 하나 이상과 코어들(4302A 내지 4302N) 사이에서 일관성이 유지된다. 일부 예들에서, 코어들(4302A 내지 4302N) 중 하나 이상은 멀티스레딩을 할 수 있다. 시스템 에이전트 유닛 회 로부는 코어들(4302A 내지 4302N)을 조율하고 작동시키는 해당 컴포넌트들을 포함한다. 시스템 에이전트 유닛 회로부는, 예를 들어, 전력 제어 유닛(PCU) 회로부 및/또는 디스플레이 유닛 회로부(도시되지 않 음)를 포함할 수 있다. PCU는 코어들(4302A 내지 4302N) 및/또는 특수 목적 로직(예를 들면, 통합 그래 픽 로직)의 전력 상태를 조절하는 데 필요한 로직 및 컴포넌트들일 수 있거나 이를 포함할 수 있다. 디스플레 이 유닛 회로부는 하나 이상의 외부 연결 디스플레이를 구동하기 위한 것이다. 코어들(4302A 내지 4302N)은 아키텍쳐 명령어 세트의 면에서 동종이거나 이종일 수 있으며; 즉, 코어들(4302A 내지 4302N) 중 둘 이상은 동일한 명령어 세트를 실행할 수 있는 반면, 다른 코어들은 해당 명령어 세트의 서브 세트만 또는 상이한 명령어 세트를 실행할 수 있다. 도 44a는 본 개시내용의 예들에 따른 예시적인 순차 파이프라인 및 예시적인 레지스터 리네이밍, 비순차 발행/ 실행 파이프라인 양쪽 모두를 예시하는 블록 다이어그램이다. 도 44b는 본 개시내용의 예들에 따른 프로세서에 포함될 순차 아키텍처 코어의 예시적인 실시예 및 예시적인 레지스터 리네이밍, 비순차 발행/실행 아키텍처 코 어 양쪽 모두를 예시하는 블록 다이어그램이다. 도 44a 및 도 44b에서의 실선 박스들은 순차 파이프라인 및 순 차 코어를 예시하는 반면, 파선 박스들의 임의적 부가는 레지스터 리네이밍, 비순차 발행/실행 파이프라인 및 코어를 예시한다. 순차 양상이 비순차 양상의 서브세트인 것을 감안하여, 비순차 양상이 설명될 것이다. 도 44a에서, 프로세서 파이프라인은 페치 스테이지, 선택적인 길이 디코드 스테이지, 디코드 스테이지, 선택적인 할당 스테이지, 선택적인 리네이밍 스테이지, 스케줄링(디스패치 또는 발행이라고도 함) 스테이지, 선택적인 레지스터 판독/메모리 판독 스테이지, 실행 스테이지, 라이트 백/메모리 기입 스테이지, 선택적인 예외 처리 스테이지, 및 선택적인 커밋 스테이지(442 4)를 포함한다. 예를 들어, 본 명세서에서 설명되는 바와 같은 멀티코어 프로세서는 SSE 명령어, AVX-512 명령 어, 또는 5G-ISA 명령어가 프로세서 파이프라인의 스테이지들 중 하나 이상에서 실행되어야 하는지 여부 를 결정할 수 있다. 이러한 프로세서 파이프라인 스테이지들 각각에서 하나 이상의 연산이 수행될 수 있다. 예를 들어, 페치 스테이지 동안, 하나 이상의 명령어(예를 들면, SSE 명령어, AVX-512 명령어, 5G-ISA 명 령어 등)가 명령어 메모리로부터 페치되고, 디코드 스테이지 동안, 하나 이상의 페치된 명령어가 디코딩 될 수 있으며, 포워딩된 레지스터 포트들을 사용하는 주소들(예를 들면, 로드 저장 유닛(LSU) 주소들)이 생성될 수 있고, 분기 포워딩(예를 들면, 즉치 오프셋(immediate offset) 또는 링크 레지스터(LR))이 수행될 수 있다. 일 실시예에서, 디코드 스테이지와 레지스터 판독/메모리 판독 스테이지는 하나의 파이프라인 스테 이지로 결합될 수 있다. 일 실시예에서, 실행 스테이지 동안, 디코딩된 명령어들이 실행될 수 있고, AMB(Advanced Microcontroller Bus) 인터페이스에 대한 LSU 주소/데이터 파이프라이닝이 수행될 수 있으며, 곱 셈 및 덧셈 연산들이 수행될 수 있고, 분기 결과들을 사용한 산술 연산들이 수행될 수 있는 등이다.예로서, 예시적인 레지스터 리네이밍, 비순차 발행/실행 코어 아키텍처는 파이프라인을 다음과 같이 구현 할 수 있다: 1) 명령어 페치 유닛 회로부는 페치 및 길이 디코딩 스테이지들(4402 및 4404)을 수행하고; 2) 디코드 유닛 회로부는 디코드 스테이지를 수행하며; 3) 리네이밍/할당기 유닛 회로부는 할당 스테이지 및 리네이밍 스테이지를 수행하고; 4) 스케줄러 유닛(들) 회로부는 스케줄링 스테이지를 수행하며; 5) 물리 레지스터 파일(들) 유닛(들) 회로부 및 메모리 유닛 회로부는 레지스터 판독/메모리 판독 스테이지를 수행하고; 실행 클러스터는 실행 스테이지를 수행하 며; 6) 메모리 유닛 회로부 및 물리 레지스터 파일(들) 유닛(들) 회로부는 라이트 백/메모리 기입 스테이지를 수행하고; 7) 다양한 유닛들(유닛 회로부)이 예외 처리 스테이지에 관여될 수 있으며; 8) 회수 유닛 회로부 및 물리 레지스터 파일(들) 유닛(들) 회로부는 커밋 스테이지를 수행한 다. 도 44b는 실행 엔진 유닛 회로부에 결합된 프런트 엔드 유닛 회로부를 포함하는 프로세서 코어 를 도시하며, 양쪽 모두는 메모리 유닛 회로부에 결합된다. 예를 들어, 실행 엔진 유닛 회로부 는 도 8의 실행 유닛 또는 그의 부분(들)을 구현할 수 있다. 코어는 RISC(reduced instruction set computing) 코어, CISC(complex instruction set computing) 코어, VLIW(very long instruction word) 코어, 또는 하이브리드 또는 대안적인 코어 유형일 수 있다. 또 다른 옵션으로서, 코어 는, 예를 들어, 네트워크 또는 통신 코어, 압축 엔진, 코프로세서 코어, GPGPU(general purpose computing graphics processing unit) 코어, 그래픽 코어 등과 같은, 특수 목적 코어일 수 있다. 프런트 엔드 유닛 회로부는 명령어 캐시 유닛 회로부에 결합되는 분기 예측 유닛 회로부를 포함할 수 있고, 명령어 캐시 유닛 회로부는 명령어 TLB(translation lookaside buffer)에 결합되 며, 명령어 TLB는 명령어 페치 유닛 회로부에 결합되고, 명령어 페치 유닛 회로부는 디코드 유닛 회로부에 결합된다. 일 실시예에서, 명령어 캐시 유닛 회로부는 프런트 엔드 유닛 회로부 보다는 메모리 유닛 회로부에 포함된다. 디코드 유닛 회로부(또는 디코더)는 명령어들을 디 코딩할 수 있고, 원래의 명령어들로부터 디코딩되거나, 원래의 명령어들을 다른 방식으로 반영하거나, 원래의 명령어들로부터 도출되는, 하나 이상의 마이크로 연산, 마이크로 코드 엔트리 포인트, 마이크로명령어, 다른 명 령어, 또는 다른 제어 신호를 출력으로서 생성할 수 있다. 디코드 유닛 회로부는 주소 생성 유닛 회로부 (AGU, 도시되지 않음)를 더 포함할 수 있다. 일 실시예에서, AGU는 포워딩된 레지스터 포트들을 사용하는 LSU 주소를 생성하고, 분기 포워딩(예를 들면, 즉치 오프셋 분기 포워딩, LR 레지스터 분기 포워딩 등)을 추가로 수 행할 수 있다. 디코드 유닛 회로부는 다양한 상이한 메커니즘들을 사용하여 구현될 수 있다. 적합한 메 커니즘들의 예들은 룩업 테이블들, 하드웨어 구현들, 프로그래머블 로직 어레이들(PLA들), 마이크로코드 판독 전용 메모리들(ROM들) 등을 포함하지만, 이에 제한되지 않는다. 일 실시예에서, 코어는 특정 매크로명령 어들에 대한 마이크로코드를 저장하는 마이크로코드 ROM(도시되지 않음) 또는 다른 매체를 (예를 들면, 디코드 유닛 회로부에 또는 그렇지 않고 프런트 엔드 유닛 회로부 내에) 포함한다. 일 실시예에서, 디코 드 유닛 회로부는 프로세서 파이프라인의 디코드 또는 다른 스테이지들 동안 생성되는 디코딩된 연 산, 마이크로 태그, 또는 마이크로 연산을 유지/캐싱하기 위한 마이크로 연산(마이크로 op) 또는 연산 캐시(도 시되지 않음)를 포함한다. 디코드 유닛 회로부는 실행 엔진 유닛 회로부 내의 리네이밍/할당기 유 닛 회로부에 결합될 수 있다. 실행 엔진 유닛 회로부는 회수 유닛 회로부 및 하나 이상의 스케줄러(들)의 세트 회로부에 결합되는 리네이밍/할당기 유닛 회로부를 포함한다. 스케줄러(들) 회로부는, 예약 스테이션 (reservations station), 중앙 명령어 윈도(central instruction window) 등을 포함하여, 임의의 수의 상이한 스케줄러들을 나타낸다. 일부 예들에서, 스케줄러(들) 회로부는 산술 논리 유닛(ALU) 스케줄러/스케줄링 회로부, ALU 큐들, 산술 생성 유닛(AGU) 스케줄러/스케줄링 회로부, AGU 큐들 등을 포함할 수 있다. 스케줄러 (들) 회로부는 물리 레지스터 파일(들) 회로부에 결합된다. 물리 레지스터 파일(들) 회로부 각각은 하나 이상의 물리 레지스터 파일을 나타내며, 그 중 상이한 물리 레지스터 파일들은, 스칼라 정수, 스칼 라 부동 소수점, 패킹된 정수, 패킹된 부동 소수점, 벡터 정수, 벡터 부동 소수점, 상태(예를 들면, 실행될 다 음 명령어의 주소인 명령어 포인터) 등과 같은, 하나 이상의 상이한 데이터 유형을 저장한다. 예를 들어, 본 명세서에서 설명되는 바와 같은 5G-ISA 명령어들은, 실행될 때, 5G 네트워크 워크로드들을 실시하기 위해 물리 레지스터 파일(들) 회로부 중 하나(다수)를 호출할 수 있다. 일 실시예에서, 물리 레지스터 파일(들) 유 닛 회로부는 벡터 레지스터들 유닛 회로부, 기입 마스크(writemask) 레지스터들 유닛 회로부, 및 스칼라 레지스터 유닛 회로부를 포함한다. 이러한 레지스터 유닛들은 아키텍처 벡터 레지스터(architectural vectorregister), 벡터 마스크 레지스터, 및 범용 레지스터 등을 제공할 수 있다. 물리 레지스터 파일(들) 유닛(들) 회로부는 레지스터 리네이밍 및 비순차 실행이 구현될 수 있는 다양한 방식들(예를 들면, 재정렬 버퍼(들)(ROB(들)) 및 회수 레지스터 파일(들)을 사용하는 것; 미래 파일(들), 히스토리 버퍼(들), 및 회수 레 지스터 파일(들)을 사용하는 것; 레지스터 맵 및 레지스터들의 풀(pool)을 사용하는 것 등)을 예시하기 위해 회 수 유닛 회로부(회수 큐(retire queue) 또는 회수 큐(retirement queue)라고도 함)에 의해 오버랩된다. 회수 유닛 회로부 및 물리 레지스터 파일(들) 회로부는 실행 클러스터(들)에 결합된다. 실 행 클러스터(들)는 하나 이상의 실행 유닛의 세트 회로부 및 하나 이상의 메모리 액세스의 세트 회 로부를 포함한다. 실행 유닛들 회로부는 다양한 유형의 데이터(예를 들면, 스칼라 부동 소수점, 패킹된 정수, 패킹된 부동 소수점, 벡터 정수, 벡터 부동 소수점)에 대해 다양한 산술, 논리, 부동 소수점 또는 다른 유형의 연산들(예컨대, 시프트, 덧셈, 뺄셈, 곱셈)을 수행할 수 있다. 예를 들어, 실행 유닛들 회로부 는 본 명세서에서 설명되는 바와 같이 5G-ISA 명령어들을 실행하는 것에 응답하여 그러한 프로세싱을 수 행할 수 있다. 일부 예들이 특정 기능들 또는 기능 세트들에 전용된 다수의 실행 유닛들 또는 실행 유닛 회로 부를 포함할 수 있지만, 다른 예들은 단지 하나의 실행 유닛 회로부 또는 모두가 모든 기능들을 수행하는 다수 의 실행 유닛들/실행 유닛 회로부를 포함할 수 있다. 스케줄러(들) 회로부, 물리 레지스터 파일(들) 유 닛(들) 회로부, 및 실행 클러스터(들)는 어쩌면 복수인 것으로 도시되어 있는데, 그 이유는 특정 예들이 특정 유형의 데이터/연산들에 대해 별개의 파이프라인들(예를 들면, 각각이 자체 스케줄러 회로부, 물리 레지스터 파일(들) 유닛 회로부, 및/또는 실행 클러스터를 가지는, 스칼라 정수 파이프라인, 스칼라 부동 소수 점/패킹된 정수/패킹된 부동 소수점/벡터 정수/벡터 부동 소수점 파이프라인, 및/또는 메모리 액세스 파이프라 인 - 그리고 별개의 메모리 액세스 파이프라인의 경우에, 이 파이프라인의 실행 클러스터만이 메모리 액세스 유 닛(들) 회로부를 갖는 특정 예들이 구현됨 -)을 생성하기 때문이다. 별개의 파이프라인들이 사용되는 경 우에, 이러한 파이프라인들 중 하나 이상이 비순차 발행/실행일 수 있고 나머지는 순차 발행/실행일 수 있다는 점이 또한 이해되어야 한다. 일부 예들에서, 실행 엔진 유닛 회로부는 AMB(Advanced Microcontroller Bus) 인터페이스(도시되지 않음), 주소 페이즈(address phase) 라이트 백, 및 데이터 페이즈(data phase) 로드, 저장 및 분기에 대한 로드 저장 유닛(LSU) 주소/데이터 파이프라이닝을 수행할 수 있다. 메모리 세트 액세스 회로부는, 레벨 2(L2) 캐시 회로부에 결합되는 데이터 캐시 회로부에 결 합되는 데이터 TLB 유닛 회로부를 포함하는, 메모리 유닛 회로부에 결합된다. 일 예시적인 실시예 에서, 메모리 액세스 유닛들 회로부는 로드 유닛 회로부, 주소 저장 유닛 회로, 및 데이터 저장 유닛 회 로부를 포함할 수 있으며, 이들 각각은 메모리 유닛 회로부 내의 데이터 TLB 회로부에 결합된다. 명령어 캐시 회로부는 메모리 유닛 회로부 내의 레벨 2(L2) 캐시 유닛 회로부에 더 결합된다. 일 실시예에서, 명령어 캐시와 데이터 캐시는 L2 캐시 유닛 회로부, 레벨 3(L3) 캐시 유닛 회로부(도시되지 않음) 및/또는 메인 메모리 내의 단일 명령어 및 데이터 캐시(도시되지 않음)로 결 합된다. L2 캐시 유닛 회로부는 하나 이상의 다른 레벨의 캐시에 그리고 궁극적으로 메인 메모리에 결합 된다. 코어는, 본 명세서에서 설명되는 명령어(들)를 포함하여, 하나 이상의 명령어 세트(예를 들면, x86 명령 어 세트(보다 새로운 버전들에서 추가된 일부 확장들을 가짐); MIPS 명령어 세트; ARM 명령어 세트(NEON과 같은 선택적인 추가적인 확장들을 가짐))를 지원할 수 있다. 일 실시예에서, 코어는 패킹된 데이터 명령어 세 트 확장(예를 들면, AVX1, AVX2, AVX-512, 5G-ISA 등)을 지원하기 위한 로직을 포함하며, 이에 의해 많은 멀티 미디어 애플리케이션들에 의해 사용되는 연산들이 패킹된 데이터를 사용하여 수행될 수 있게 한다. 도 45는, 도 44b의 실행 유닛(들) 회로부와 같은, 실행 유닛(들) 회로부의 예들을 예시한다. 예시된 바 와 같이, 실행 유닛(들) 회로는 하나 이상의 ALU 회로, 벡터/SIMD 유닛 회로, 로드/저장 유 닛 회로, 및/또는 분기/점프 유닛 회로를 포함할 수 있다. ALU 회로들은 정수 산술 및/또는 불리언 연산들을 수행한다. 벡터/SIMD 유닛 회로들은 (SIMD/벡터 레지스터들과 같은) 패킹된 데이터에 대해 벡터/SIMD 연산들을 수행한다. 로드/저장 유닛 회로들은 데이터를 메모리로부터 레지스터들로 로딩 하거나 레지스터들로부터 메모리에 저장하기 위해 로드 및 저장 명령어들을 실행한다. 로드/저장 유닛 회로들 은 또한 주소들을 생성할 수 있다. 분기/점프 유닛 회로들은 명령어에 따라 메모리 주소로의 분기 또는 점프를 야기한다. 부동 소수점 유닛(FPU) 회로들은 부동 소수점 산술을 수행한다. 예를 들어, FPU 회로들은 본 명세서에서 설명되는 바와 같은 5G-ISA 명령어들의 호출에 응답하여 부동 소수점 산술(예를 들면, FP16, FP32 등 산술)을 수행할 수 있다. 실행 유닛(들) 회로부의 폭은 실시예에 따라 달라지고 16비트 내지 1,024 비트의 범위일 수 있다. 일부 예들에서, 2개 이상의 더 작은 실행 유닛이 논리적으로 결합되 어 더 큰 실행 유닛을 형성한다(예를 들면, 2개의 128-비트 실행 유닛이 논리적으로 결합되어 256-비트 실행 유 닛을 형성한다). 도 46은 일부 실시예들에 따른 예시적인 레지스터 아키텍처의 블록 다이어그램이다. 예시된 바와 같이, 128 비트부터 1,024 비트 폭까지 다양한 벡터/SIMD 레지스터들이 있다. 일부 실시예들에서, 벡터/SIMD 레지스터들은 물리적으로 512 비트이고, 매핑에 따라, 하위 비트들 중 일부만이 사용된다. 예를 들어, 일부 실시예들에서, 벡터/SIMD 레지스터들은 512 비트인 ZMM 레지스터들이며, 하위 256 비트는 YMM 레지 스터들에 사용되고 하위 128 비트는 XMM 레지스터들에 사용된다. 일부 그러한 예들에서, 본 명세서에서 설명되 는 바와 같은 5G-ISA 명령어들은, 실행될 때, 5G 관련 네트워크 워크로드들을 실시하기 위해 ZMM 레지스터들, YMM 레지스터들, 및/또는 XMM 레지스터들 중 하나(다수)를 호출할 수 있다. 이에 따라, 레지스터들의 오버레이 가 있다. 일부 실시예들에서, 벡터 길이 필드는 최대 길이와 하나 이상의 다른 더 짧은 길이 사이에서 선택되 고, 여기서 각각의 그러한 더 짧은 길이는 선행 길이의 절반 길이이다. 스칼라 연산들은 ZMM/YMM/XMM 레지스터 에서의 최하위 데이터 요소 위치에 대해 수행되는 연산들이고; 상위 데이터 요소 위치들은 실시예에 따라 명령 어 이전과 동일한 채로 남아있거나 제로화된다. 일부 실시예들에서, 레지스터 아키텍처는 기입 마스크/술어 레지스터들을 포함한다. 예를 들어, 일부 실시예들에서, 각각이 크기가 16 비트, 32 비트, 64 비트, 또는 128 비트인 8개의 기입 마스크/술어 레지 스터(때때로 k0 내지 k7이라고 불림)가 있다. 기입 마스크/술어 레지스터들은 병합(예를 들면, 목적지에 있는 임의의 요소 세트가 임의의 연산의 실행 동안 업데이트들로부터 보호될 수 있게 함) 및/또는 제로화(예를 들면, 제로화 벡터 마스크들은 목적지에 있는 임의의 요소 세트가 임의의 연산의 실행 동안 제로화될 수 있게 함)를 가능하게 할 수 있다. 일부 실시예들에서, 주어진 기입 마스크/술어 레지스터에서의 각각의 데이 터 요소 위치는 목적지의 데이터 요소 위치에 대응한다. 다른 실시예들에서, 기입 마스크/술어 레지스터들 은 확장 가능하고, 주어진 벡터 요소에 대한 설정된 수의 인에이블 비트(예를 들면, 64 비트 벡터 요소당 8개의 인에이블 비트)로 구성된다. 레지스터 아키텍처는 복수의 범용 레지스터들을 포함한다. 이러한 레지스터들은 16 비트, 32 비트, 64 비트 등일 수 있으며, 스칼라 연산들에 사용될 수 있다. 일부 실시예들에서, 이러한 레지스터들은 RAX, RBX, RCX, RDX, RBP, RSI, RDI, RSP, 및 R8 내지 R15라는 이름들에 의해 참조된다. 일부 실시예들에서, 레지스터 아키텍처는 x87 명령어 세트 확장을 사용하여 32/64/80 비트 부동 소수점 데이터에 대한 스칼라 부동 소수점 연산들을 위해 사용되는 스칼라 부동 소수점 레지스터 또는 64 비트 패킹된 정수 데이터에 대한 연산들을 수행하기 위해서는 물론 MMX 레지스터들과 XMM 레지스터들 사이에서 수행 되는 일부 연산들에 대한 피연산자들을 보유하기 위한 MMX 레지스터들을 포함한다. 예를 들어, 본 명세서에서 설명되는 바와 같은 5G-ISA 명령어들은, 실행될 때, 네트워크 워크로드들을 프로세싱하기 위해 스칼라 부동 소 수점 레지스터를 사용할 수 있다. 하나 이상의 플래그 레지스터(예를 들면, EFLAGS, RFLAGS 등)는 산술, 비교 및 시스템 연산들에 대한 상 태 및 제어 정보를 저장한다. 예를 들어, 하나 이상의 플래그 레지스터는 캐리, 패리티, 보조 캐리, 제 로, 부호, 및 오버플로와 같은 조건 코드 정보를 저장할 수 있다. 일부 실시예들에서, 하나 이상의 플래그 레 지스터는 프로그램 상태 및 제어 레지스터들이라고 불린다. 세그먼트 레지스터들은 메모리에 액세스하는 데 사용하기 위한 세그먼트 포인트들을 포함한다. 일부 실 시예들에서, 이러한 레지스터들은 CS, DS, SS, ES, FS 및 GS라는 이름들로 참조된다. 머신 특정 레지스터들(MSR들)은 프로세서 성능을 제어하고 그에 대해 보고한다. 대부분의 MSR들은 시스템 관련 기능들을 처리하고 애플리케이션 프로그램에 의해 액세스 가능하지 않다. 머신 검사 레지스터들 은 하드웨어 오류들을 검출하고 그에 대해 보고하는 데 사용되는 제어, 상태 및 오류 보고 MSR들로 구성 된다. 하나 이상의 명령어 포인터 레지스터(들)는 명령어 포인터 값을 저장한다. 제어 레지스터(들)(예 를 들면, CR0 내지 CR4)는 프로세서(예를 들면, 도 68의 프로세서(6870, 6880, 6838, 6815, 및/또는 도 43의 프로세서)의 동작 모드 및 현재 실행 중인 작업의 특성들을 결정한다. 디버그 레지스터들은 프로 세서 또는 코어의 디버깅 동작들을 제어하고 그에 대한 모니터링을 가능하게 한다. 메모리 관리 레지스터들은 보호 모드 메모리 관리에서 사용되는 데이터 구조들의 위치들을 지정한다. 이 러한 레지스터들은 GDTR, IDRT, 작업 레지스터, 및 LDTR 레지스터를 포함할 수 있다. 본 개시내용의 대안적인 실시예들은 보다 넓은 또는 보다 좁은 레지스터들을 사용할 수 있다. 추가적으로, 본 개시내용의 대안적인 실시예들은 보다 많은, 보다 적은, 또는 상이한 레지스터 파일들 및 레지스터들을 사용할 수 있다. 명령어 세트 아키텍처(ISA)(예를 들면, 5G-ISA 명령어 세트 아키텍처)는 하나 이상의 명령어 포맷을 포함할 수 있다. 주어진 명령어 포맷은, 그 중에서도, 수행될 연산(예컨대, 오피코드(opcode)) 및 연산이 수행될 피연산 자(들)를 지정하기 위한 다양한 필드들(예컨대, 비트들의 수, 비트들의 위치) 및/또는 다른 데이터 필드(들)(예 를 들면, 마스크)를 정의할 수 있다. 일부 명령어 포맷들은 명령어 템플릿들(또는 서브포맷들)의 정의를 통해 더 분해된다. 예를 들어, 주어진 명령어 포맷의 명령어 템플릿들은 명령어 포맷의 필드들의 상이한 서브세트들 을 갖도록 정의될 수 있고/있거나(포함된 필드들은 전형적으로 동일한 순서로 되어 있지만, 적어도 일부는 보다 적은 필드들이 포함되기 때문에 상이한 비트 위치들을 가짐) 주어진 필드가 상이하게 해석되도록 정의될 수 있 다. 따라서, ISA(예를 들면, 5G-ISA)의 각각의 명령어는 주어진 명령어 포맷을 사용하여(그리고, 정의된 경우, 해당 명령어 포맷의 명령어 템플릿들 중 주어진 명령어 템플릿으로) 표현되며 연산 및 피연산자들을 지정하기 위한 필드들을 포함한다. 예를 들어, 예시적인 ADD 명령어는 특정 오피코드 및 해당 오피코드를 지정하기 위한 오피코드 필드 및 피연산자들(소스 1/목적지 및 소스 2)을 선택하기 위한 피연산자 필드들을 포함하는 명령어 포맷을 가지며; 명령어 스트림에서의 이 ADD 명령어의 출현은 특정 피연산자들을 선택하는 피연산자 필드들 내 의 특정 내용을 가질 것이다. 상세하게는, 5G-ISA에서의 비정규 FP16 피연산자들은 FP16 숫자들의 전체 동적 범위를 사용하는 것을 용이하게 하기 위해 최고 속도로 처리된다. FP32 및 FP64 숫자들과 달리, 5G-ISA에서의 FP16 피연산자들은 MXCSR 설정에 기초하여 조건부로 0으로 플러시되지 않거나 0으로서 취급되지 않는다. FP16 입력들을 사용하는 레거시 명령어 들을 제외하고, 명령어가 FP16 값을 소스 피연산자로서 사용하는 경우, 비정규 숫자들은 무조건적으로 프로세싱 된다. 유사하게, FP16 출력들을 생성하는 레거시 명령어들을 제외하고, 명령어가 FP16 출력을 생성하는 경우, 비정규 숫자들은 무조건적으로 생성된다. CPUID 비트들과 연관된 레거시 명령어들 F16C 및 AVX-512는 그의 입 력들 및 출력들에 대해 제각기 MXCSR.DAZ 및 MXCSR.FTZ를 계속 사용한다. FP32 또는 FP64 소스들을 사용하는 변환 명령어들은 그의 입력들에 대한 비정규 처리를 제어하기 위해 MXCSR.DAZ를 계속 사용한다. FP32 또는 FP64 출력들을 생성하는 변환 명령어들은 그의 출력들에 대한 비정규 처리를 제어하기 위해 MXCSR.FTZ를 계속 사용한다. EVEX 디코딩 맵들과 같은 5G-ISA에서의 디코딩 맵들과 관련하여, 맵 3, 맵 5 및 맵 6은 FP16 명령어들에 사용된 다. 맵 5는 맵 1(0Fxx)에서 FP32였던 명령어들을 위한 것이다. 맵 6은 맵 2(0F38xx)에서 FP32였던 명령어들을 위한 것이다. 이 규칙에는 몇 가지 예외들이 있다. imm8 피연산자들을 갖는 맵 1(0Fxx) 내의 일부 항목들은 현재 규약들보다 이전 것이며; 해당 명령어들은 맵 3으로 이동되었다. 맵 3(0F3Axx)에서의 FP32 항목들은 맵 3 이 매우 드문드문 채워지기 때문에 맵 3에서 FP16에 대한 새로운 오피코드들을 찾았다. 대부분의 FP16 명령어 들은 관련 FP32 연산들과 오피코드 및 프리픽스(EVEX.pp) 비트들을 공유한다. (단지 FP16 이외의) 다른 명령어 들이 결국 맵 5와 맵 6으로 이동할 것으로 예상된다. 맵 5 및 맵 6은 EVEX.mmm 필드(0b101, 0b110)에서 3 비 트를 사용한다. 현재 공개 문서들은 맵 필드(EVEX.mm)를 2 비트로 나열하고 있으며, 다음 2 비트는 0으로 예약 되어 있다. FP16 ISA 확장은 이 새로운 디코딩 맵들을 위해 다음 비트들을 예약한 2개 중 더 낮은 값을 해제한 다. 맵 5 및 맵 6은, 맵 2(및 맵 3)와 같이, 일반 고정 길이 맵들이다. 일반 고정 길이 맵들에서, 오피코드는 길이를 결정하는 데 아무런 역할도 하지 않는다. 맵 2, 맵 3, 맵 5, 맵 6에서의 명령어들 모두는 MODRM 바이트 를 갖는다. 맵 3에서의 명령어들 모두는 또한 8b 즉치 바이트를 필요로 한다. 이전의 맵인 맵 0과 맵 1은 전 체 명령어 길이가 오피코드를 포함한 더 복잡한 논리로 결정된다는 점에서 불규칙한 가변 길이 맵들이다. 5G-ISA에서의 변위 스케일링과 관련하여, EVEX 인코딩들을 사용하여, 튜플 코드 및 벡터 길이에 기초하여 1-바 이트 메모리 변위들이 스케일링된다. FP16 명령어들을 처리하기 위한 예시적인 튜플들은 아래에 설명되어 있다 (예를 들면, FULL, FULLMEM, SCALAR, HALF, HALFMEM 및 QUARTER의 튜플들). 이하의 예들에서, N은 부호 있는 1-바이트 메모리 변위에 적용되는 스케일 인자를 지칭한다. 메모리에 액세스하는 단위들은 바이트로 측정된다. 이하의 예시적인 튜플들은 로드 유형 연산들의 경우 16b 입력 크기들(또는 저장 유형 연산들의 경우 16b 출력 크기들)에만 적용된다. FULL; 브로드캐스팅하는 경우, FP16 입력들의 경우 N=2이고 복소수 FP16 입력들의 경우 N=4이다. 그렇지 않으 면, 바이트 단위의 전체 벡터 길이에 대응하는 N=16, 32 또는 64이다.FULLMEM; 바이트 단위의 전체 벡터 길이에 대응하는 N=16, 32 또는 64이다. SCALAR; FP16 입력들의 경우 항상 N=2이고 복소수 FP16 입력들의 경우 N=4이다. HALF; 브로드캐스팅하는 경우, N=2이다. 그렇지 않으면, 바이트 단위의 벡터 길이의 절반에 대응하는 N=8, 16 또는 32이다. HALFMEM; 바이트 단위의 벡터 길이의 절반에 대응하는 N=8, 16 또는 32이다. QUARTER; 브로드캐스팅하는 경우, N=2이다. 그렇지 않으면, 바이트 단위의 벡터 길이의 1/4에 대응하는 N=4, 8 또는 16이다. 5G-ISA에서 비정규 숫자들의 반올림과 관련하여, IEEE-754는 언더플로 예외가 마스크 해제될 때 MXCSR.PE 비트 의 설정을 정의하지 않는다. 계산 결과가 언더플로(예를 들면, 작은 결과)이고 목적지 포맷으로 정확하게 표현 될 수 없는 경우, 언더플로 마스크 상태에 관계없이 MXCSR.PE 비트가 설정된다(즉, UE=1 및 PE= 1 양쪽 모두에 서 언더플로 트랩을 얻을 수 있음). 이는 5G-ISA에서의 FP32/FP64 연산들을 처리하는 것과 상이하다. 5G-ISA에서의 표기법과 관련하여, 명령어 인코딩에서, MODRM 바이트는 역할에 따라 여러 가지 방식으로 표현된 다. MODRM 바이트는 3개의 필드: 2-비트 MODRM.MOD 필드, 3-비트 MODRM.REG 필드 및 3-비트 MODRM.RM 필드를 갖는다. MODRM 바이트의 모든 비트들이 명령어에 대한 고정 값들을 갖는 경우, 해당 바이트의 2-hex 니블 값은 명령어 설명 페이지들의 인코딩 상자들에 있는 오피코드 이후에 제시된다. MODRM 바이트의 일부 필드들만이 고 정 값들을 포함해야 하는 경우, 해당 값들은 다음과 같이 지정된다. MODRM.MOD만 0b11이어야 하고 MODRM.REG 및 MODRM.RM 필드들이 제한되지 않는 경우, 이는 \"11:rrr:bbb\"로 표기된다. \"rrr\"은 MODRM.REG 필드의 3 비트 에 대응하고, \"bbb\"는 MODMR.RM 필드의 3 비트에 대응한다. MODRM.MOD 필드가 0b11 이외의 값으로 제약되는 경 우 - 즉, 0b00, 0b01 또는 0b10 중 하나여야 하는 경우 -, '!' 표기법을 사용한다. 예를 들어, MODRM.REG 필드만이 특정 필요 값, 예를 들어, 0b101을 갖는 경우, 이는 \"mm:101:bbb\"로 표기된다. 본 명세서에서 설명되는 명령어(들)의 실시예들은 상이한 포맷들로 구체화될 수 있다. 추가적으로, 예시적인 시스템들, 아키텍처들, 및 파이프라인들이 아래에서 상세히 설명된다. 명령어(들)의 실시예들은 그러한 시스템 들, 아키텍처들, 및 파이프라인들 상에서 실행될 수 있지만, 상세히 설명된 것들로 제한되지 않는다. 도 47은 명령어 포맷의 실시예들을 예시한다. 예시된 바와 같이, 명령어는 하나 이상의 프리픽스, 오피 코드, 주소 지정 정보(예를 들면, 레지스터 식별자들, 메모리 주소 지정 정보 등), 변위 값 및/또는 즉치에 대한 하나 이상의 필드를 포함하지만 이에 제한되지 않는 다수의 컴포넌트들을 포함할 수 있다. 예를 들어, 본 명세서에서 설명되는 바와 같은 5G-ISA 명령어들 중 하나(다수)는 도 47 또는 그의 부분 (들)의 예에 기초한 명령어 포맷을 가질 수 있다. 일부 명령어들은 포맷의 필드들 중 일부 또는 전부를 활용하 는 반면 다른 명령어들은 오피코드에 대한 필드만을 사용할 수 있다는 점에 유의한다. 일부 실시예들에 서, 예시된 순서는 이러한 필드들이 인코딩되는 순서이지만, 다른 실시예들에서 이러한 필드들이 상이한 순서로 인코딩되거나 결합될 수 있는 등이 이해되어야 한다. 프리픽스(들) 필드(들)는, 사용될 때, 명령어를 수정한다. 일부 실시예들에서, 하나 이상의 프리픽스는 문자열 명령어(예를 들면, 0xF0, 0xF2, 0xF3 등)를 반복하기 위해, 섹션 재정의(예를 들면, 0x2E, 0x36, 0x3E, 0x26, 0x64, 0x65, 0x2E, 0x3E 등)를 제공하기 위해, 버스 잠금 동작을 수행하기 위해 그리고/또는 피연산자 크 기(예를 들면, 0x66) 및 주소 크기(예를 들면, 0x67)를 변경하기 위해 사용된다. 특정 명령어들은 필수 프리픽 스(예를 들면, 0x66, 0xF2, 0xF3 등)를 필요로 한다. 이러한 프리픽스들 중 일부는 \"레거시\" 프리픽스들로 간 주될 수 있다. 하나 이상의 예가 본 명세서에서 상세히 설명되는 다른 프리픽스들은, 특정 레지스터들을 지정 하는 것 등과 같은, 추가의 능력을 표시 및/또는 제공한다. 다른 프리픽스들은 전형적으로 \"레거시\" 프리픽스 들을 따른다. 오피코드 필드는 명령어의 디코딩 시에 수행될 연산을 적어도 부분적으로 정의하는 데 사용된다. 일부 실시예들에서, 오피코드 필드에 인코딩되는 1차 오피코드(primary opcode)는 길이가 1, 2, 또는 3 바이트 이다. 다른 실시예들에서, 1차 오피코드는 상이한 길이일 수 있다. 추가적인 3 비트 오피코드 필드가 때때로 다른 필드에 인코딩된다. 주소 지정 필드는, 메모리 또는 하나 이상의 레지스터에서의 위치와 같은, 명령어의 하나 이상의 피연산 자를 주소 지정하는 데 사용된다. 도 48은 도 47의 주소 지정 필드의 실시예들을 예시한다. 예를 들어, 본 명세서에서 설명되는 바와 같은 5G-ISA 명령어들은 도 47의 주소 지정 필드에 의해 구현되는 주소 지정 필드를 가질 수 있다. 이 예시에 서, 선택적인 ModR/M 바이트와 선택적인 스케일(Scale), 인덱스(Index), 베이스(Base)(SIB) 바이트 가 도시되어 있다. ModR/M 바이트 및 SIB 바이트는 명령어의 최대 2개의 피연산자를 인코딩 하는 데 사용되며, 이들 각각은 직접 레지스터(direct register) 또는 유효 메모리 주소이다. 모든 명령어들이 이러한 필드들 중 하나 이상을 포함하는 것은 아니라는 점에서 이러한 필드들 각각이 선택적임에 유의한다. MOD R/M 바이트는 MOD 필드, 레지스터 필드, 및 R/M 필드를 포함한다. MOD 필드의 내용은 메모리 액세스 모드와 비메모리 액세스 모드를 구분한다. 일부 실시예들에서, MOD 필 드가 b11의 값을 가질 때, 레지스터-직접 주소 지정 모드가 활용되고, 그렇지 않은 경우 레지스터-간접 주소 지정이 사용된다. 레지스터 필드는 목적지 레지스터 피연산자 또는 소스 레지스터 피연산자를 인코딩할 수 있거나, 또는 오 피코드 확장을 인코딩할 수 있고 임의의 명령어 피연산자를 인코딩하는 데 사용되지 않을 수 있다. 레지스터 인덱스 필드의 내용은, 직접 또는 주소 생성을 통해, (레지스터에 또는 메모리에 있는) 소스 또는 목적지 피연산자의 위치들을 지정한다. 일부 실시예들에서, 레지스터 필드는 더 큰 주소 지정을 가능하게 하기 위해 프리픽스(예를 들면, 프리픽스)로부터의 추가 비트로 보충된다. R/M 필드는 메모리 주소를 참조하는 명령어 피연산자를 인코딩하는 데 사용될 수 있거나, 또는 목적지 레 지스터 피연산자 또는 소스 레지스터 피연산자를 인코딩하는 데 사용될 수 있다. R/M 필드는 일부 실시 예들에서 주소 지정 모드를 지시하기 위해 MOD 필드와 결합될 수 있음에 유의한다. SIB 바이트는 주소의 생성에서 사용되는 스케일 필드, 인덱스 필드, 및 베이스 필드를 포함한다. 스케일 필드는 스케일링 인자를 나타낸다. 인덱스 필드는 사용할 인덱스 레지스터를 지정한다. 일부 실시예들에서, 인덱스 필드는 더 큰 주소 지정을 가능하게 하기 위해 프리픽스(예를 들 면, 프리픽스)로부터의 추가 비트로 보충된다. 베이스 필드는 사용할 베이스 레지스터를 지정한다. 일부 실시예들에서, 베이스 필드는 더 큰 주소 지정을 가능하게 하기 위해 프리픽스(예를 들 면, 프리픽스)로부터의 추가 비트로 보충된다. 실제로, 스케일 필드의 내용은 메모리 주소 생성을 위해(예를 들면, 2스케일 * 인덱스 + 베이스를 사용하는 주소 생성을 위해) 인덱스 필드의 내용의 스케일링 을 가능하게 한다. 일부 주소 지정 형태들은 변위 값을 활용하여 메모리 주소를 생성한다. 예를 들어, 메모리 주소는 2스케일 * 인 덱스 + 베이스 + 변위, 인덱스 * 스케일 + 변위, r/m + 변위, 명령어 포인터(RIP/EIP) + 변위, 레지스터 + 변위 등에 따라 생성될 수 있다. 변위는 1 바이트, 2 바이트, 4 바이트 등의 값일 수 있다. 일부 실시예들에서, 변 위 필드는 이 값을 제공한다. 추가적으로, 일부 실시예들에서, 변위 인자 사용은 벡터 길이, b 비트의 값, 및 명령어의 입력 요소 크기에 기초하여 결정되는 스케일링 인자 N과 함께 disp8을 곱하는 것에 의해 변위 값이 계산되는 압축된 변위 방식을 나타내는 주소 지정 필드의 MOD 필드에 인코딩된다. 변위 값은 변위 필드에 저장된다. 일부 실시예들에서, 즉치 필드는 명령어에 대한 즉치를 지정한다. 즉치는 1-바이트 값, 2-바이트 값, 4- 바이트 값 등으로서 인코딩될 수 있다. 도 49는 제1 프리픽스(4701(A))의 실시예들을 예시한다. 일부 실시예들에서, 제1 프리픽스(4701(A))는 REX 프 리픽스의 실시예이다. 이 프리픽스를 사용하는 명령어들은 범용 레지스터들, 64-비트 패킹된 데이터 레지스터 들(예를 들면, SIMD(single instruction, multiple data) 레지스터들 또는 벡터 레지스터들), 및/또는 제어 레 지스터들 및 디버그 레지스터들(예를 들면, CR8 내지 CR15 및 DR8 내지 DR15)을 지정할 수 있다. 제1 프리픽스(4701(A))를 사용하는 명령어들은 포맷에 따라 3-비트 필드들을 사용하여, 즉 1) Mod R/M 바이트 의 reg 필드 및 R/M 필드를 사용하여; 2) reg 필드 및 베이스 필드 및 인덱스 필드를 사용하는 것을 포함하는 SIB 바이트와 함께 Mod R/M 바이트를 사용하여; 또는 3) 오 피코드의 레지스터 필드를 사용하여, 최대 3개의 레지스터를 지정할 수 있다. 제1 프리픽스(4701(A))에서, 비트 위치 7:4는 0100으로서 설정된다. 비트 위치 3(W)은 피연산자 크기를 결정하 는 데 사용될 수 있지만, 피연산자 폭만을 결정할 수는 없다. 이에 따라, W = 0일 때, 피연산자 크기는 코드 세그먼트 디스크립터(CS.D)에 의해 결정되고, W=1일 때, 피연산자 크기는 64 비트이다. 또 하나의 비트의 추가가 16 개의 레지스터가 주소 지정될 수 있게 하는 반면, MOD R/M reg 필드 및 MOD R/MR/M 필드가 단독으로 각각 8개의 레지스터만을 주소 지정할 수 있다는 점에 유의한다. 제1 프리픽스(4701(A))에서, 비트 위치 2(R)는 MOD R/M reg 필드의 확장일 수 있으며, 해당 필드가 범용 레지스터, 64-비트 패킹된 데이터 레지스터(예를 들면, SSE 레지스터), 또는 제어 또는 디버그 레지스터를 인코 딩할 때 ModR/M reg 필드를 수정하는 데 사용될 수 있다. Mod R/M 바이트가 다른 레지스터들을 지 정하거나 확장된 오피코드를 정의할 때 R은 무시된다. 비트 위치 1(X) X 비트는 SIB 바이트 인덱스 필드를 수정할 수 있다. 비트 위치 B(B) B는 Mod R/M R/M 필드 또는 SIB 바이트 베이스 필드에서의 베이스를 수정할 수 있 거나; 또는 범용 레지스터들(예를 들면, 범용 레지스터들)에 액세스하는 데 사용되는 오피코드 레지스터 필드를 수정할 수 있다. 도 49a 내지 도 49d는 제1 프리픽스(4701A)의 R 필드, X 필드 및 B 필드가 어떻게 사용되는지의 실시예들을 예 시한다. 도 49a는 SIB 바이트(40 04)가 메모리 주소 지정에 사용되지 않을 때 제1 프리픽스(4701(A))로부터의 R 및 B가 MOD R/M 바이트의 reg 필드 및 R/M 필드를 확장하는 데 사용되는 것을 예시한다. 도 49b는 SIB 바이트(40 04)가 사용되지 않을 때(레지스터-레지스터 주소 지정) 제1 프리픽스(4701(A))로부터의 R 및 B가 MOD R/M 바이트의 reg 필드 및 R/M 필드를 확장하는 데 사용되는 것을 예시한다. 도 49c는 SIB 바이트(40 04)가 메모리 주소 지정에 사용될 때 제1 프리픽스(4701(A))로부터의 R, X, 및 B가 MOD R/M 바이트의 reg 필드와 인덱스 필드 및 베이스 필드를 확장하는 데 사용되는 것을 예시한다. 도 49d는 레지스터가 오피코드에 인코딩될 때 제1 프리픽스(4701(A))로부터의 B가 MOD R/M 바이트의 reg 필드를 확장하는 데 사용되는 것을 예시한다. 도 51a 및 도 51b는 제2 프리픽스(4701(B))의 실시예들을 예시한다. 일부 실시예들에서, 제2 프리픽스 (4701(B))는 VEX 프리픽스의 실시예이다. 제2 프리픽스(4701(B)) 인코딩은 명령어들이 3개 이상의 피연산자를 가질 수 있게 하고, SIMD 벡터 레지스터들(예를 들면, 벡터/SIMD 레지스터들)이 64 비트보다 길 수 있게 (예를 들면, 128 비트 및 256 비트일 수 있게) 한다. 제2 프리픽스(4701(B))의 사용은 3-피연산자(three- operand)(또는 그 이상) 신택스를 제공한다. 예를 들어, 이전의 2-피연산자(two-operand) 명령어들은 소스 피 연산자를 덮어쓰는 A = A + B와 같은 연산들을 수행하였다. 제2 프리픽스(4701(B))의 사용은 피연산자들이 A = B + C와 같은 비파괴적 연산들을 수행할 수 있게 한다. 일부 실시예들에서, 제2 프리픽스(4701(B))는 두 가지 형태, 즉 2-바이트 포맷과 3-바이트 포맷으로 나온다. 2-바이트 제2 프리픽스(4701(B))는 주로 128-비트, 스칼라 및 일부 256-비트 명령어들에 사용되는 반면; 3-바이 트 제2 프리픽스(4701(B))는 제1 프리픽스(4701(A))와 3-바이트 오피코드 명령어들의 콤팩트한 대체물을 제공한 다. 도 51a는 제2 프리픽스(4701(B))의 2-바이트 형태의 실시예들을 예시한다. 일 예에서, 포맷 필드(바이트 0)는 값 C5H를 포함한다. 일 예에서, 바이트 1은 비트[7]에 \"R\" 값을 포함한다. 이 값은 제1 프 리픽스(4701(A))의 동일한 값의 보수이다. 비트[2]는 벡터의 길이(L)를 지시하는 데 사용된다(여기서 0의 값은 스칼라 또는 128-비트 벡터이고 1의 값은 256-비트 벡터이다). 비트들[1:0]은 일부 레거시 프리픽스들과 동등 한 오피코드 확장성을 제공한다(예를 들면, 00 = 프리픽스 없음, 01 = 66H, 10 = F3H 및 11 = F2H). vvvv로 표시된 비트들[6:3]은 1) 반전된(1의 보수) 형태로 지정되고 2개 이상의 소스 피연산자를 갖는 명령어들에 대해 유효한, 제1 소스 레지스터 피연산자를 인코딩하거나; 2) 특정 벡터 시프트들에 대해 1의 보수 형태로 지정되는, 목적지 레지스터 피연산자를 인코딩하거나; 또는 3) 어떠한 피연산자도 인코딩하지 않기 위해 사용될 수 있으며, 이 필드는 예약되어 있고 1111b와 같은 특정 값을 포함해야 한다. 이 프리픽스를 사용하는 명령어들은 메모리 주소를 참조하는 명령어 피연산자를 인코딩하거나 목적지 레지스터 피연산자 또는 소스 레지스터 피연산자를 인코딩하기 위해 Mod R/M R/M 필드를 사용할 수 있다. 이 프리픽스를 사용하는 명령어들은 목적지 레지스터 피연산자 또는 소스 레지스터 피연산자를 인코딩하기 위해 Mod R/M reg 필드를 사용할 수 있고, 오피코드 확장으로서 취급될 수 있으며, 어떠한 명령어 피연산자도 인코딩하는 데 사용되지 않을 수 있다. 4개의 피연산자 vvvv를 지원하는 명령어 신택스의 경우, Mod R/M R/M 필드 및 Mod R/M reg 필드는 4개의 피연산자 중 3개를 인코딩한다. 즉치의 비트들[7:4]은 이어서 제3 소스 레지스터 피연산자를 인코 딩하는 데 사용된다.도 51b는 제2 프리픽스(4701(B))의 3-바이트 형태의 실시예들을 예시한다. 일 예에서, 포맷 필드(바이트 0)는 값 C4H를 포함한다. 바이트 1은 비트들[7:5]에 제1 프리픽스(4701(A))의 동일한 값들의 보 수들인 \"R\", \"X\", 및 \"B\"를 포함한다. 바이트 1의 비트들[4:0](mmmmm으로 표시됨)은 필요에 따라 하나 이상의 암시적인 선두 오피코드 바이트(implied leading opcode byte)를 인코딩할 내용을 포함한다. 예를 들어, 00001은 0FH 선두 오피코드를 암시하고, 00010은 0F38H 선두 오피코드를 암시하며, 00011은 0F3AH 선두 오피코드를 암시하는 등이다. 바이트 2의 비트[7]은 승격 가능한 피연산자 크기들을 결정하는 것을 돕는 것을 포함하여 제1 프리픽스 (4701(A))의 W와 유사하게 사용된다. 비트[2]는 벡터의 길이(L)를 지시하는 데 사용된다(여기서 0의 값은 스칼 라 또는 128-비트 벡터이고 1의 값은 256-비트 벡터이다). 비트들[1:0]은 일부 레거시 프리픽스들과 동등한 오 피코드 확장성을 제공한다(예를 들면, 00 = 프리픽스 없음, 01 = 66H, 10 = F3H 및 11 = F2H). vvvv로 표시된 비트들[6:3]은 1) 반전된(1의 보수) 형태로 지정되고 2개 이상의 소스 피연산자를 갖는 명령어들에 대해 유효한, 제1 소스 레지스터 피연산자를 인코딩하거나; 2) 특정 벡터 시프트들에 대해 1의 보수 형태로 지정되는, 목적지 레지스터 피연산자를 인코딩하거나; 또는 3) 어떠한 피연산자도 인코딩하지 않기 위해 사용될 수 있으며, 이 필드는 예약되어 있고 1111b와 같은 특정 값을 포함해야 한다. 이 프리픽스를 사용하는 명령어들은 메모리 주소를 참조하는 명령어 피연산자를 인코딩하거나 목적지 레지스터 피연산자 또는 소스 레지스터 피연산자를 인코딩하기 위해 Mod R/M R/M 필드를 사용할 수 있다. 이 프리픽스를 사용하는 명령어들은 목적지 레지스터 피연산자 또는 소스 레지스터 피연산자를 인코딩하기 위해 Mod R/M reg 필드를 사용할 수 있고, 오피코드 확장으로서 취급될 수 있으며, 어떠한 명령어 피연산자도 인코딩하는 데 사용되지 않을 수 있다. 4개의 피연산자 vvvv를 지원하는 명령어 신택스의 경우, Mod R/M R/M 필드 및 Mod R/M reg 필드는 4개의 피연산자 중 3개를 인코딩한다. 즉치의 비트들[7:4]은 이어서 제3 소스 레지스터 피연산자를 인코 딩하는 데 사용된다. 도 52는 제3 프리픽스(4701(C))의 실시예들을 예시한다. 일부 실시예들에서, 제1 프리픽스(4701(A))는 EVEX 프 리픽스의 실시예이다. 제3 프리픽스(4701(C))는 4-바이트 프리픽스이다. 제3 프리픽스(4701(C))는 64-비트 모드에서 32개의 벡터 레지스터(예를 들면, 128-비트, 256-비트 및 512-비트 레지스터)를 인코딩할 수 있다. 일부 실시예들에서, 기입 마스크/오피마스크(opmask)(도 46과 같은 이전 도면 에서의 레지스터들에 대한 논의 참조) 또는 술어(predication)를 활용하는 명령어들은 이 프리픽스를 활용한다. 오피마스크 레지스터는 조건부 프로세싱 또는 선택 제어를 가능하게 한다. 소스/목적지 피연산자들이 오피마스 크 레지스터들이고 오피마스크 레지스터의 내용을 단일 값으로서 취급하는 오피마스크 명령어들은 제2 프리픽스 (4701(B))를 사용하여 인코딩된다. 제3 프리픽스(4701(C))는 명령어 클래스들에 특정적인 기능을 인코딩할 수 있다(예를 들면, \"load + op\" 시맨틱 을 가진 패킹된 명령어는 내장된 브로드캐스트 기능을 지원할 수 있고, 반올림 시맨틱을 가진 부동 소수점 명령 어는 정적 반올림 기능을 지원할 수 있으며, 비반올림(non-rounding) 산술 시맨틱을 가진 부동 소수점 명령어는 \"모든 예외 억제(suppress all exceptions)\" 기능을 지원할 수 있는 등이다). 예를 들어, 제3 프리픽스 (4701C)는 5G-ISA 명령어 클래스에 특정적인 기능을 인코딩할 수 있다. 제3 프리픽스(4701(C))의 첫 번째 바이트는, 일 예에서, 62H의 값을 갖는 포맷 필드이다. 후속 바이트들 은 페이로드 바이트들(5215 내지 5219)이라고 지칭되며 집합적으로 (본 명세서에서 상세히 설명된) 하나 이상의 필드의 형태로 특정 능력을 제공하는 P[23:0]의 24 비트 값을 형성한다. 일부 실시예들에서, 페이로드 바이트의 P[1:0]은 하위 2개의 mmmmm 비트들과 동일하다. P[3:2]는 일부 실시예들에서 예약되어 있다. 비트 P[4](R')는 P[7] 및 ModR/M reg 필드와 결합될 때 상위 16 벡터 레 지스터 세트에 대한 액세스를 가능하게 한다. P[6]은 또한 SIB 유형 주소 지정이 필요하지 않을 때 상위 16 벡 터 레지스터에 대한 액세스를 제공할 수 있다. P[7:5]는 벡터 레지스터, 범용 레지스터, 메모리 주소 지정에 대한 피연산자 지정자 수정자(operand specifier modifier) 비트들인 R, X 및 B로 구성되며, ModR/M 레지스터 필드 및 ModR/M R/M 필드와 결합될 때 하위 8개의 레지스터를 넘어 다음 8개의 레지스터의 세트에 대한 액세스를 가능하게 한다. P[9:8]은 일부 레거시 프리픽스들과 동등한 오피코드 확장성을 제공한다(예를 들면, 00 = 프리픽스 없음, 01 = 66H, 10 = F3H 및 11 = F2H). 일부 실시예들에서 P[10]은 1의 고정 값이다. vvvv로 표시된 P[14: 11]은 1) 반전된(1의 보수) 형태로 지정되고 2개 이상의 소스 피연산자를 갖는 명령어들에대해 유효한, 제1 소스 레지스터 피연산자를 인코딩하거나; 2) 특정 벡터 시프트들에 대해 1의 보수 형태로 지 정되는, 목적지 레지스터 피연산자를 인코딩하거나; 또는 3) 어떠한 피연산자도 인코딩하지 않기 위해 사용될 수 있으며, 이 필드는 예약되어 있고 1111b와 같은 특정 값을 포함해야 한다. P[15]는 제1 프리픽스(4701(A)) 및 제2 프리픽스(4701(B))의 W와 유사하며 오피코드 확장 비트 또는 피연산자 크기 승격으로서 역할할 수 있다. P[18:16]은 오피마스크(기입 마스크) 레지스터들(예를 들면, 기입 마스크/술어 레지스터들)에서의 레지스 터의 인덱스를 지정한다. 본 개시내용의 일 실시예에서, 특정 값 aaa=000은 특정의 명령어에 대해 어떤 오피마 스크도 사용되지 않음을 암시하는 특정 거동을 갖는다(이것은 전부 1들에 고정 배선된 오피마스크의 사용 또는 마스킹 하드웨어를 바이패스하는 하드웨어의 사용을 포함하여 다양한 방식들로 구현될 수 있다). 병합할 때, 벡터 마스크들은 목적지에 있는 임의의 요소들의 세트가 (베이스 연산 및 증강 연산에 의해 지정되는) 임의의 연산의 실행 동안 업데이트들로부터 보호될 수 있게 하며; 다른 일 실시예에서, 대응하는 마스크 비트가 0을 갖 는 경우 목적지의 각각의 요소의 이전의 값을 보존하는 것을 가능하게 한다. 이와 대조적으로, 제로화할 때, 벡터 마스크들은 목적지에 있는 임의의 요소들의 세트가 (베이스 연산 및 증강 연산에 의해 지정된) 임의의 연 산의 실행 동안 제로화될 수 있게 하며; 일 실시예에서, 대응하는 마스크 비트가 0 값을 가질 때 목적지의 요소 는 0으로 설정된다. 이 기능의 서브세트는 수행되는 연산의 벡터 길이(즉, 첫 번째 요소부터 마지막 요소까지, 수정되는 요소들의 범위(span))를 제어할 수 있는 것이지만; 수정되는 요소들이 연속적일 필요는 없다. 따라서, 오피마스크 필드는, 로드, 저장, 산술, 논리 등을 포함한, 부분 벡터 연산들을 가능하게 한다. 오피마 스크 필드의 내용이 사용될 오피마스크를 포함하는 다수의 오피마스크 레지스터들 중 하나를 선택하고(그리고 따라서 오피마스크 필드의 내용이 수행될 해당 마스킹을 간접적으로 식별해 주는) 본 개시내용의 실시예들이 기 술되지만, 대안적인 실시예들은 그 대신에 또는 추가적으로 마스크 기입 필드의 내용이 수행될 마스킹을 직접 지정할 수 있게 한다. P[19]는 P[19]를 사용하여 상위 16개 벡터 레지스터에 액세스할 수 있는 비파괴적인 소스 신택스로 제2 소스 벡 터 레지스터를 인코딩하기 위해 P[14:11]과 결합될 수 있다. P[20]은, 상이한 클래스들의 명령어들에 걸쳐 상 이하고 벡터 길이/반올림 제어 지정자 필드(P[22:21])의 의미에 영향을 미칠 수 있는, 다수의 기능들을 인코딩 한다. P[23]은 병합 기입 마스킹에 대한 지원(예를 들면, 0으로 설정될 때) 또는 제로화 및 병합 기입 마스킹 에 대한 지원(예를 들면, 1로 설정될 때)을 나타낸다. 제3 프리픽스(4701(C))를 사용하는 명령어들에서 레지스터들의 인코딩의 예시적인 실시예들은 이하의 표에 상세 히 설명되어 있다. 표 1: 64 비트 모드에서의 32 레지스터 지원"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "표 2: 32 비트 모드에서의 레지스터 지정자들의 인코딩"}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 11, "content": "표 3: 오피마스크 레지스터 지정자 인코딩 본 명세서에 기술되는 기능들을 수행하고 출력 정보를 생성하기 위해 프로그램 코드가 입력 명령어들에 적용될 수 있다. 출력 정보가 하나 이상의 출력 디바이스들에 적용될 수 있다. 일부 개시된 예들에서, 프로세싱 시스 템은, 예를 들어, DSP, 마이크로컨트롤러, ASIC, 또는 마이크로프로세서와 같은, 프로세서를 갖는 임의의 시스 템을 포함한다. 일부 개시된 예들에서, 프로그램 코드는 프로세싱 시스템과 통신하기 위해 고수준 절차적 또는 객체 지향 프로 그래밍 언어로 구현될 수 있다. 프로그램 코드는 또한, 원하는 경우, 어셈블리어 또는 머신어로 구현될 수 있 다. 사실, 본 명세서에 설명된 메커니즘들은 범위가 임의의 특정 프로그래밍 언어로 제한되지 않는다. 어느 경우든지, 언어는 컴파일되는 또는 인터프리트되는 언어일 수 있다. 본 명세서에 개시되는 메커니즘들의 실시예들은 하드웨어, 소프트웨어, 펌웨어, 또는 그러한 구현 접근법들의 조합으로 구현될 수 있다. 본 개시내용의 실시예들은 적어도 하나의 프로세서, 저장 시스템(휘발성 및 비휘발 성 메모리 및/또는 저장 요소들을 포함함), 적어도 하나의 입력 디바이스, 및 적어도 하나의 출력 디바이스를 포함하는 프로그래밍가능 시스템들 상에서 실행되는 컴퓨터 프로그램들 또는 프로그램 코드로서 구현될 수 있다. 적어도 하나의 실시예의 하나 이상의 양상은, 머신에 의해 판독될 때, 머신으로 하여금 본 명세서에서 설명된 기술들을 수행하는 로직을 제조하게 하는, 프로세서 내의 다양한 로직을 표현하는 머신 판독 가능 매체 상에 저 장된 대표적인 명령어들에 의해 구현될 수 있다. \"IP 코어들\"이라고 알려진 그러한 표현들은 유형적(tangible) 머신 판독 가능 매체 상에 저장되고, 로직 또는 프로세서를 실제로 제조하는 제조 머신들에 로드하기 위해, 다 양한 고객들 또는 제조 시설들에 공급될 수 있다. 일부 개시된 예들에서, 그러한 머신 판독 가능 저장 매체는, 제한 없이, 하드 디스크, 플로피 디스크, 광학 디 스크, CD-ROM(compact disk read-only memory), CD-RW(compact disk rewritable), 및 자기 광학 디스크를 포함 한 임의의 다른 유형의 디스크, ROM(read-only memory), DRAM(dynamic random access memory), SRAM(static random access memory)과 같은 RAM(random access memory), EPROM(erasable programmable read-only memory), 플래시 메모리, EEPROM(electrically erasable programmable read-only memory)과 같은 반도체 디바이스, PCM(phase change memory), 자기 또는 광학 카드, 또는 전자 명령어들을 저장하는 데 적합한 임의의 다른 유형 의 매체와 같은 저장 매체를 포함한, 머신 또는 디바이스에 의해 제조되거나 형성되는 물품들의 비일시적 유형 적 장치(non-transitory, tangible arrangement)를 포함할 수 있다.그에 따라, 본 개시내용의 실시예들은 명령어들을 포함하는 또는 본 명세서에 설명된 구조들, 회로들, 장치들, 프로세서들 및/또는 시스템 특징들을 정의하는, HDL(Hardware Description Language)과 같은, 설계 데이터를 포함하는 비일시적 유형적 머신 판독 가능 매체를 또한 포함한다. 그러한 실시예들은 프로그램 제품들이라고도 지칭될 수 있다. 일부 경우에, 명령어 변환기는 소스 명령어 세트로부터 타깃 명령어 세트로 명령어를 변환하는 데 사용될 수 있 다. 예를 들어, 명령어 변환기는 명령어를 코어에 의해 프로세싱될 하나 이상의 다른 명령어로 (예컨대, 정적 바이너리 변환(static binary translation), 동적 컴파일(dynamic compilation)을 포함한 동적 바이너리 변환 (dynamic binary translation)을 사용하여) 변환(translate)하거나, 모핑(morph)하거나, 에뮬레이션하거나, 또 는 다른 방식으로 변환(convert)할 수 있다. 명령어 변환기는 소프트웨어, 하드웨어, 펌웨어, 또는 이들의 조 합으로 구현될 수 있다. 명령어 변환기는 온 프로세서(on processor), 오프 프로세서(off processor), 또는 부 분 온 및 부분 오프 프로세서(part on and part off processor)일 수 있다. 도 53은 본 개시내용의 실시예들에 따른 소스 명령어 세트 내의 바이너리 명령어들을 타깃 명령어 세트 내의 바 이너리 명령어들로 변환하기 위한 소프트웨어 명령어 변환기의 사용을 대비시키는 블록 다이어그램을 예시한다. 예시된 실시예에서, 명령어 변환기는 소프트웨어 명령어 변환기이지만, 대안적으로 명령어 변환기는 소프트웨어, 펌웨어, 하드웨어, 또는 이들의 다양한 조합들로 구현될 수 있다. 도 53은 고수준 언어로 된 프로그램이 적어도 하나의 제1 명령어 세트 코어를 갖는 프로세서에 의해 기본적으로 실행될 수 있는 제1 ISA 바이너리 코드를 생성하기 위해 제1 ISA 컴파일러를 사용하여 컴파일될 수 있다는 것을 도 시하고 있다. 적어도 하나의 제1 ISA 명령어 세트 코어를 갖는 프로세서는, 적어도 하나의 제1 ISA 명령 어 세트 코어를 갖는 프로세서와 실질적으로 동일한 결과를 달성하기 위해서, 제1 ISA 명령어 세트 코어의 명령어 세트의 상당 부분 또는 적어도 하나의 제1 ISA 명령어 세트 코어를 갖는 인텔 프로세서 상에서 실행 되는 것을 목표로 하는 오브젝트 코드 버전들의 애플리케이션들 또는 다른 소프트웨어를 호환 가능하게 실행하 거나 다른 방식으로 프로세싱하는 것에 의해 적어도 하나의 제1 ISA 명령어 세트 코어를 갖는 Intel® 프로세서 와 실질적으로 동일한 기능들을 수행할 수 있는 임의의 프로세서를 나타낸다. 제1 ISA 컴파일러는, 추가 링크 프로세싱(linkage processing)을 사용하여 또는 사용하지 않고, 적어도 하나의 제1 ISA 명령어 세트 코어 를 갖는 프로세서 상에서 실행될 수 있는 제1 ISA 바이너리 코드(예를 들면, 오브젝트 코드)를 생 성하도록 작동 가능한 컴파일러를 나타낸다. 유사하게, 도 53은 고수준 언어로 된 프로그램이 제1 ISA 명령어 세트 코어를 갖지 않는 프로세서에 의해 기본적으로 실행될 수 있는 대안 명령어 세트 바이너리 코드를 생성하기 위해 대안 명령어 세트 컴파일러를 사용하여 컴파일될 수 있음을 도시한다. 명령 어 변환기는 제1 ISA 바이너리 코드를 제1 ISA 명령어 세트 코어를 갖지 않는 프로세서에 의 해 기본적으로 실행될 수 있는 코드로 변환하는 데 사용된다. 이러한 변환된 코드는, 이것을 할 수 있는 명령 어 변환기가 만들기 어렵기 때문에, 대안 명령어 세트 바이너리 코드와 동일할 가능성이 없지만; 변환된 코드는 일반적인 연산을 달성할 것이며 대안 명령어 세트로부터의 명령어들로 구성될 것이다. 따라서, 명령어 변환기는, 에뮬레이션, 시뮬레이션, 또는 임의의 다른 프로세스를 통해, 제1 ISA 명령어 세트 프로세서 또는 코어를 갖지 않는 프로세서 또는 다른 전자 디바이스가 제1 ISA 바이너리 코드를 실행할 수 있게 하 는 소프트웨어, 펌웨어, 하드웨어, 또는 이들의 조합을 나타낸다. 도 54는 본 명세서에서 개시되는 예들로부터 이익을 얻을 수 있는 예시적인 5G 네트워크 워크로드들을 묘사하는 테이블이다. 예를 들어, PF 가중치(예를 들면, 도 67의 블록), PF 정렬, UE 선택(예를 들면, 도 66의 블록, 도 67의 블록 등), 및 사후 SINR(행렬 반전 및 ZF)(예를 들면, 도 67의 블록)과 같은 5G 네트워크 워크로드는 본 명세서에서 설명되는 바와 같은 AVX-512 및/또는 5G-ISA 명령어들로 실행하는 것에 의해 프로세싱 이점들을 실현할 수 있다. 예를 들어, 본 명세서에서 설명되는 바와 같은 5G-ISA 명령어들 은 복소수 산술 및 부동 소수점 16(FP16) 연산들을 포함할 수 있다. 일부 그러한 예들에서, UE 선택은 IQ 샘플 들(예를 들면, 복소수) 산술 연산들(예를 들면, 곱셈, 덧셈, 뺄셈 등)을 필요로 하는 MU-MIMO에 대한 상관 연산 들을 사용할 수 있다. 일부 그러한 예들에서, UE 선택은 복소수 산술 연산들을 구현하는 5G-ISA 명령어들 중 하나(다수)를 사용하여 상관 연산들을 실행하는 것에 의해 계산적으로 이점을 얻을 수 있다. 일부 예들에서, SINR 계산들은 복소수 산술 연산들을 구현하는 5G-ISA 명령어들 중 하나(다수)를 사용하여 그러한 연산들을 실 행하는 것에 의해 또한 계산적으로 이점을 얻을 수 있는 복소수 행렬 연산들(예를 들면, 곱셈 및 반전)을 사용 할 수 있다. 유리하게도, UE 선택 및 사후 SINR(행렬 반전 및 ZF) 워크로드들은 더 높은 주파수들에서 실행될 수 있으며, 이에 의해 본 명세서에서 설명되는 바와 같은 5G-ISA 명령어들을 사용하여 그러한 워크로드들을 프 로세싱하는 것에 의해 더 적은 시간에 프로세싱될 수 있다.도 8의 PCU 및/또는, 보다 일반적으로, 도 8의 프로세서, 도 40의 반도체 디바이스, 도 40의 제조업체 엔터프라이즈 시스템, 도 40의 고객 엔터프라이즈 시스템, 도 68의 제1 프로세서 및/또는 제2 프로세서 및/또는 코프로세서들(6815, 6838), 및/또는, 보다 일반적으로, 도 68의 멀티프로 세서 시스템, 도 69 및/또는 도 70의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 임의의 다른 프로세서 또는 시스템을 구현하기 위한 예시적인 하드웨어 로직, 머신 판독 가능 명령어들, 하드웨어로 구 현된 상태 머신들, 및/또는 이들의 임의의 조합을 나타내는 데이터 흐름 다이어그램들 및/또는 플로차트들이 도 55 내지 도 67에 도시되어 있다. 머신 판독 가능 명령어들은, 도 68의 멀티프로세서 시스템에 도시된 도 68의 제1 프로세서 및/또는 제2 프로세서 및/또는 코프로세서들(6815, 6838) 및/또는 도 69와 관련 하여 아래에서 논의되는 예시적인 프로세서 플랫폼에 도시된 프로세서 및/또는 도 70과 관련하여 아래에서 논의되는 시스템과 같은, 컴퓨터 프로세서 및/또는 프로세서 회로부에 의한 실행을 위한 하나 이상의 실행 가능한 프로그램 또는 실행 가능한 프로그램의 부분(들)일 수 있다. 프로그램은 도 68의 프로세서 (6815, 6838, 6870, 6880) 및/또는 도 69 및/또는 도 70의 프로세서와 연관된 CD-ROM, 플로피 디스크, 하드 드라이브, DVD, 블루레이 디스크, 또는 메모리와 같은 비일시적 컴퓨터 판독 가능 매체 상에 저장된 소프 트웨어로 구체화될 수 있지만, 전체 프로그램 및/또는 그 일부들은 대안적으로 도 68의 프로세서(6815, 6838, 6870, 6880) 및/또는 도 69 및/또는 도 70의 프로세서 이외의 디바이스에 의해 실행될 수 있고/있거나 펌 웨어 또는 전용 하드웨어로 구체화될 수 있다. 또한, 예시적인 프로그램이 도 55 내지 도 67에 예시되는 데이 터 흐름 다이어그램들 및/또는 플로차트들을 참조하여 설명되지만, 도 8의 PCU 및/또는, 보다 일반적으로, 도 8의 프로세서, 도 40의 반도체 디바이스, 도 40의 제조업체 엔터프라이즈 시스템, 도 40의 고객 엔터프라이즈 시스템, 도 68의 제1 프로세서 및/또는 제2 프로세서 및/또는 코프로세서 들(6815, 6838), 및/또는, 보다 일반적으로, 도 68의 멀티프로세서 시스템, 및/또는 도 69 및/또는 도 70 의 프로세서를 구현하는 많은 다른 방법들이 대안적으로 사용될 수 있다. 예를 들어, 블록들의 실행 순 서가 변경될 수 있고/있거나 설명된 블록들 중 일부가 변경, 제거, 또는 조합될 수 있다. 추가적으로 또는 대 안적으로, 블록들 중 일부 또는 전부는 소프트웨어 또는 펌웨어를 실행함이 없이 대응하는 동작을 수행하도록 구성된 하나 이상의 하드웨어 회로(예를 들면, 이산 및/또는 통합 아날로그 및/또는 디지털 회로, FPGA, ASIC, 비교기, 연산 증폭기(op-amp), 로직 회로 등)에 의해 구현될 수 있다. 프로세서 회로부는 상이한 네트워크 위 치들에 분산되고/되거나 하나 이상의 디바이스에 로컬일 수 있다(예를 들면, 단일 머신 내의 멀티코어 프로세서, 서버 랙에 걸쳐 분산된 다수의 프로세서들 등). 본 명세서에서 설명되는 머신 판독 가능 명령어들은 압축된 포맷, 암호화된 포맷, 단편화된 포맷, 컴파일된 포 맷, 실행 가능한 포맷, 패키징된 포맷 등 중 하나 이상으로 저장될 수 있다. 본 명세서에서 설명되는 바와 같 은 머신 판독 가능 명령어들은 머신 실행 가능 명령어들을 제작, 제조, 및/또는 생성하는 데 활용될 수 있는 데 이터 또는 데이터 구조(예를 들면, 명령어들의 부분들, 코드, 코드 표현들 등)로서 저장될 수 있다. 예를 들어, 머신 판독 가능 명령어들은 단편화되어, 네트워크 또는 네트워크들의 집합체의 동일한 또는 상이한 위치 들에(예를 들면, 클라우드에, 에지 디바이스들 등에) 위치하는 하나 이상의 저장 디바이스 및/또는 컴퓨팅 디바 이스(예를 들면, 서버)에 저장될 수 있다. 머신 판독 가능 명령어들은 이들을 컴퓨팅 디바이스 및/또는 다른 머신에 의해 직접 판독 가능하게, 인터프리트 가능하게, 및/또는 실행 가능하게 만들기 위해 설치, 수정, 적응, 업데이트, 결합, 보완, 구성, 복호화, 압축해제, 언패킹, 분배, 재할당, 컴파일 등 중 하나 이상을 요구할 수 있다. 예를 들어, 머신 판독 가능 명령어들은, 개별적으로 압축되고, 암호화되어, 개별적인 컴퓨팅 디바이스들 에 저장되는, 다수의 부분들로 저장될 수 있으며, 여기서 부분들은, 복호화되고, 압축해제되며, 결합될 때, 본 명세서에서 설명된 것과 같은 프로그램을 함께 형성할 수 있는 하나 이상의 기능을 구현하는 실행 가능 명령어 들의 세트를 형성한다. 다른 예에서, 머신 판독 가능 명령어들은 이들이 프로세서 회로부에 의해 판독될 수 있는 상태로 저장될 수 있 지만, 특정 컴퓨팅 디바이스 또는 다른 디바이스 상에서 명령어들을 실행하기 위해 라이브러리(예를 들면, 동적 링크 라이브러리(DLL)), 소프트웨어 개발 키트(SDK), 애플리케이션 프로그래밍 인터페이스(API) 등의 추가를 요 구할 수 있다. 다른 예에서, 머신 판독 가능 명령어들 및/또는 대응하는 프로그램(들)이 전체적으로 또는 부분 적으로 실행될 수 있기 전에 머신 판독 가능 명령어들이 구성될(예컨대, 설정들이 저장되고, 데이터가 입력되며, 네트워크 주소들이 기록되는 등) 필요가 있을 수 있다. 따라서, 머신 판독 가능 매체는, 본 명세서 에서 사용되는 바와 같이, 저장되거나 다른 방식으로 보관 중이거나 운송 중일 때의 머신 판독 가능 명령어들 및/또는 프로그램(들)의 특정 포맷 또는 상태에 관계없이 머신 판독 가능 명령어들 및/또는 프로그램(들)을 포 함할 수 있다.본 명세서에서 설명되는 머신 판독 가능 명령어들은 임의의 과거, 현재 또는 미래의 명령어 언어, 스크립팅 언 어, 프로그래밍 언어 등에 의해 표현될 수 있다. 예를 들어, 머신 판독 가능 명령어들은 다음 언어들 중 임의 의 것을 사용하여 표현될 수 있다: C, C++, Java, C#, Perl, Python, JavaScript, HTML(HyperText Markup Language), SQL(Structured Query Language), Swift 등 위에서 언급된 바와 같이, 도 55 내지 도 67의 예시적인 프로세스들은 정보가 임의의 지속기간 동안(예를 들면, 연장된 시간 기간 동안, 영구적으로, 짧은 순간 동안, 일시적으로 버퍼링하기 위해, 및/또는 정보의 캐싱을 위 해) 저장되는 하드 디스크 드라이브, 플래시 메모리, 판독 전용 메모리, 콤팩트 디스크, 디지털 다기능 디스크, 캐시, 랜덤 액세스 메모리 및/또는 임의의 다른 저장 디바이스 또는 저장 디스크와 같은 비일시적 컴퓨터 및/또 는 머신 판독 가능 매체에 저장된 실행 가능 명령어들(예를 들면, 컴퓨터 및/또는 머신 판독 가능 명령어들)을 사용하여 구현될 수 있다. 본 명세서에서 사용되는 바와 같이, 비일시적 컴퓨터 판독 가능 매체라는 용어는 임 의의 유형의 컴퓨터 판독 가능 저장 디바이스 및/또는 저장 디스크를 포함하도록 그리고 전파 신호들을 배제하 도록 그리고 전송 매체들을 배제하도록 명확하게 정의된다. “포함하는(Including)\" 및 \"포함하는(comprising)\"(및 이들의 모든 형태들 및 시제들)은 본 명세서에서 개방형 용어(open ended term)이도록 사용된다. 따라서, 청구항이 전제부로서 또는 임의의 종류의 청구항 기재(claim recitation) 내에서 임의의 형태의 \"포함한다(include)\" 또는 \"포함한다(comprise)\"(예를 들면, 포함한다 (comprises), 포함한다(includes), 포함하는(comprising), 포함하는(including), 가지는(having) 등)를 이용할 때마다, 대응하는 청구항 또는 기재의 범위를 벗어나지 않으면서 추가적인 요소들, 용어들 등이 존재할 수 있음 이 이해되어야 한다. 본 명세서에서 사용되는 바와 같이, \"적어도\"라는 문구가, 예를 들어, 청구항의 전제부에 서 이행구(transition term)로서 사용될 때, 이는 \"포함하는(comprising)\" 및 \"포함하는(including)\"이라는 용 어가 개방형인 것과 동일한 방식으로 개방형이다. 예를 들어, A, B, 및/또는 C와 같은 형태로 사용될 때의 용 어 \"및/또는\"은 A 단독, B 단독, C 단독, A와 B, A와 C, B와 C, A와 B와 C와 같 은 A, B, C의 임의의 조합 또는 서브세트를 지칭한다. 구조, 컴포넌트, 항목, 객체 및/또는 사물을 설명하는 맥락에서 본 명세서에서 사용되는 바와 같이, 문구 \"A 및 B 중 적어도 하나\"는 적어도 하나의 A, 적어 도 하나의 B, 및 적어도 하나의 A와 적어도 하나의 B 중 임의의 것을 포함한 구현을 지칭하는 것으로 의도 된다. 유사하게, 구조, 컴포넌트, 항목, 객체 및/또는 사물을 설명하는 맥락에서 본 명세서에서 사용되는 바와 같이, 문구 \"A 또는 B 중 적어도 하나\"는 적어도 하나의 A, 적어도 하나의 B, 및 적어도 하나의 A 와 적어도 하나의 B 중 임의의 것을 포함한 구현을 지칭하는 것으로 의도된다. 프로세스들, 명령어들, 액션들, 활동들 및/또는 단계들의 수행 또는 실행을 설명하는 맥락에서 본 명세서에서 사용되는 바와 같이, 문구 \"A 및 B 중 적어도 하나\"는 적어도 하나의 A, 적어도 하나의 B, 및 적어도 하나의 A와 적어도 하나의 B 중 임의의 것을 포함한 구현을 지칭하는 것으로 의도된다. 유사하게, 프로세스들, 명령어들, 액션들, 활동들 및/또는 단계들의 수행 또는 실행을 설명하는 맥락에서 본 명세서에서 사용되는 바와 같이, 문구 \"A 또는 B 중 적어도 하나\"는 적어도 하나의 A, 적어도 하나의 B, 및 적어도 하나의 A와 적어도 하나의 B 중 임 의의 것을 포함한 구현을 지칭하는 것으로 의도된다. 본 명세서에서 사용되는 바와 같이, 단수 참조들(예를 들면, \"한\", \"어떤\", \"제1\", \"제2\" 등)는 복수를 배제하 지 않는다. 용어 \"한\" 또는 \"어떤\" 엔티티는, 본 명세서에서 사용되는 바와 같이, 하나 이상의 해당 엔티티를 지칭한다. 용어 \"한\"(또는 \"어떤\"), \"하나 이상\", 및 \"적어도 하나\"는 본 명세서에서 상호 교환 가능하게 사용 될 수 있다. 게다가, 개별적으로 나열되지만, 복수의 수단들, 요소들 또는 방법 액션들은, 예를 들면, 단일 유 닛 또는 프로세서에 의해 구현될 수 있다. 추가적으로, 개별 특징들이 상이한 예들 또는 청구항들에 포함될 수 있지만, 이들은 어쩌면 조합될 수 있으며, 상이한 예들 또는 청구항들에 포함된 것이 특징들의 조합이 실현 가 능하지 않고/않거나 유리하지 않다는 것을 암시하지는 않는다. 도 55는, 본 명세서에서 설명되는 바와 같은 멀티 SKU CPU와 같은, 예시적인 워크로드 조정 가능한 CPU와 연관 된 제1 예시적인 데이터 흐름 다이어그램이다. 예를 들어, 제1 데이터 흐름 다이어그램은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU, 프로세서 등에 의해 구현되는 액션들, 기능들, 동작들 등에 대응할 수 있다. 일부 예들에서, 제1 데이터 흐름 다이어그램은 머신 판독 가능 명령어들에 의해 구현된다. 예를 들어, 제1 데이터 흐름 다이어그램 또는 그의 부분 (들)은 머신 판독 가능 명령어들을 실행하는 워크로드 조정 가능한 CPU로 구현될 수 있다. 이 예에서, 제1 데 이터 흐름 다이어그램은 Intel®에 의해 제공되는 바와 같은 동적 SST PP를 구현한다. 대안적으로, 워크 로드 조정 가능한 CPU의 코어(들), 언코어(들), CLM(들) 등의 구성(들)을 조정하기 위한 임의의 다른 기술이 사 용될 수 있다.도 55의 제1 데이터 흐름 다이어그램은 예시적인 프로세서 구성(들), 예시적인 드라이버 (들), 예시적인 운영 체제, 및 예시적인 오케스트레이션 소프트웨어(SW) 에이전트에 의해 구 현된다. 이 예에서, 프로세서 구성(들)은 워크로드 조정 가능한 CPU의 하나 이상의 코어, 및/또는, 보다 일반적으로, 워크로드 조정 가능한 CPU의 구성을 구현할 수 있다. 예를 들어, 프로세서 구성(들)은 도 8 의 구성(들)을 구현할 수 있다. 일부 그러한 예들에서, 프로세서 구성은 프로세서의 제1 코어 (810A)에 대한 제1 구성, 제2 코어(810N)에 대한 제2 구성, 언코어 로직 중 제1의 것에 대한 제3 구성, CLM 로직 중 제1의 것에 대한 제4 구성 등을 구현할 수 있다. 이 예에서, 드라이버(들)는 하나 이상의 펌웨어 및/또는 소프트웨어 드라이버를 구현할 수 있다. 예를 들어, 드라이버(들)는 도 8의 코어 구성기에 의해 구현될 수 있다. 이 예에서, 운영 체제는 컴퓨터 운영 체제, 가상 머신 관리자 등을 구현할 수 있다. 이 예에서, 오케스트레이션 소프트웨어 에이전트 는 대역 내이다. 예를 들어, 오케스트레이션 소프트웨어 에이전트는 코어 및/또는 프로세서 구성 의 변경에 대한 요청을 획득할 수 있는 소프트웨어 애플리케이션, 소프트웨어 드라이버 등을 구현할 수 있다. 대안적으로, 오케스트레이션 소프트웨어 에이전트는 대역 외일 수 있다. 제1 데이터 흐름 다이어그램에서, 제1 시간에서, 오케스트레이션 소프트웨어 에이전트는 코 어(들)의 각자의 것(들) 및/또는, 보다 일반적으로, 워크로드 조정 가능한 CPU의 구성(들)을 위한 드라이버 (들)에 대한 구성 발견 요청을 생성한다. 제2 시간에서, 드라이버(들)는 OS 메일박스를 통 해 구성(들)을 발견한다. 제3 시간에서, 프로세서 구성(들)이 검색된다. 예를 들어, 도 8의 코어 구성기는 구성(들) 중 요청된 것(들)을 포함하는 OS 메일박스 발견 요청에 대한 응답을 생성할 수 있 다. 제4 시간에서, 드라이버(들)는 오케스트레이션 소프트웨어 에이전트로부터의 구성 발견 요청 에 대한 응답을 제공한다. 제5 시간에서, 오케스트레이션 소프트웨어 에이전트는 하나 이상의 코 어 및/또는, 보다 일반적으로, 워크로드 조정 가능한 CPU의 구성을 변경하라는 요청을 수신한다. 제6 시간 에서, 오케스트레이션 소프트웨어 에이전트는 구성 변경 요청을 드라이버(들)에게 전송한다. 제7 시간에서, 드라이버(들)는 OS 메일박스를 통해 구성 제어를 호출한다. 제8 시간에서, 프로세서 구성(들)이 변경된다. 예를 들어, 코어 구성기는 접합 온도(Tj), 최대 TRL, 보장된 하드 웨어 P-상태(HWP), CLM P-상태의 변화, 코어 P-상태의 변화 등, 및/또는 이들의 조합을 업데이트할 수 있다. 대안적으로, 코어의 임의의 다른 파라미터가 조정될 수 있다. 제9 시간에서, 드라이버(들)는 OS 스케줄러 애플리케이션 프로그래밍 인터페이스들(API들) 또는 다 른 인터페이스들을 사용하기 위해 오프라인 코어들을 호출한다. 제10 시간에서, 운영 체제는 유휴 코어들 및 코어 운영 체제, VMM 등, 및/또는 이들의 조합에 대한 스케줄러를 재평가한다. 제11 시간에서, 프로세서 구성(들)은 최대 주파수를 갖도록 오프라인 코어들을 호출한다. 제12 시간 에서, 프로세서 구성(들)은, 구성되고 인에이블되는 경우, HWP 인터럽트를 통해 보장된 HWP 변경을 운영 체제에 통지한다. 도 56은, 본 명세서에서 설명되는 바와 같은 멀티 SKU CPU와 같은, 예시적인 워크로드 조정 가능한 CPU와 연관 된 제2 예시적인 데이터 흐름 다이어그램이다. 예를 들어, 제2 데이터 흐름 다이어그램은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀티코어 CPU, 도 8의 프로세서 등 에 의해 구현되는 액션들, 기능들, 동작들 등에 대응할 수 있다. 일부 예들에서, 제2 데이터 흐름 다이어그램 은 머신 판독 가능 명령어들에 의해 구현된다. 예를 들어, 제2 데이터 흐름 다이어그램 또는 그의 부분(들)은 머신 판독 가능 명령어들을 실행하는 워크로드 조정 가능한 CPU로 구현될 수 있다. 이 예에서, 제2 데이터 흐름 다이어그램은 Intel®에 의해 제공되는 바와 같은 동적 SST PP를 구현한다. 대안적으로, 워 크로드 조정 가능한 CPU의 코어(들), 언코어(들), CLM(들) 등의 구성(들)을 조정하기 위한 임의의 다른 기술이 사용될 수 있다. 도 56의 제2 데이터 흐름 다이어그램은 예시적인 관리자 및/또는 오케스트레이터 소프트웨어, 예시 적인 베이스보드 관리 제어기(BMC), 예시적인 BIOS, 및 예시적인 프로세서에 의해 구현된다. 이 예에서, 제2 데이터 흐름 다이어그램은 프로세서의 대역외(OOB) 구성 제어를 구현한다. 이 예 에서, 오케스트레이터 소프트웨어는 관리자, 관리자와 연관된 컴퓨팅 디바이스 등에 의해 제어될 수 있다. 예를 들어, 오케스트레이터 소프트웨어는 클라우드 기반 아키텍처를 사용하여 구현될 수 있다. 이 예에서, BMC는 오케스트레이터 소프트웨어, BIOS, 또는 프로세서 중 적어도 하나와통신한다. 예를 들어, BMC 및 프로세서는 1S 서버(예를 들면, 프로세서를 위한 하나의 슬롯 을 갖는 랙 장착형 서버) 또는 2S 서버(예를 들면, 프로세서를 위한 2개의 슬롯을 갖는 랙 장착형 서버) 에 포함될 수 있다. 그러한 예들에서, BMC는 프로세서 또는 1S 또는 2S 서버에 포함된 프로세서 의 다른 인스턴스들과 통신할 수 있다. 이 예에서, BIOS는 프로세서에 의해 구현되고/되거나 프로세서 상에서 다른 방식으로 실행된 다. 이 예에서, 프로세서는 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6의 멀 티코어 CPU, 도 8의 프로세서 등을 구현할 수 있다. 제1 시간에서, BMC는 코어별로, 언코어별로, CLM별로, 및/또는 프로세서별로 구성 변경을 구현할 수 있는 프로세서의 능력을 발견한다. 제2 시간에서, BMC는 구성 스키마, 아키텍처 등을 구 축한다. 제3 시간에서, BMC는 프로세서와 연관된 현재 작동 구성(들)에 대해 프로세서 에 질의한다. 예를 들어, BMC는 프로세서의 코어들 중 하나(다수)의 구성에 대해 프로세서 에 질의할 수 있다. 일부 그러한 예들에서, 구성(들)은 도 8의 구성(들)을 구현할 수 있다. 제4 시간에서, 프로세서는 현재 작동 구성(들)을 반환한다. 예를 들어, BMC는 제2 시간 에서 구축되고/되거나 다른 방식으로 인스턴스화된 구성 스키마를 업데이트할 수 있다. 제5 시간 에서, 관리자 및/또는 오케스트레이터 소프트웨어는 프로세서와 연관된 작동 구성(들)에 대해 BMC에 질의한다. 제6 시간에서, BMC는 프로세서와 연관된 현재 작동 구성에 대해 프 로세서에 질의한다. 제7 시간에서, BMC는 요청된 구성(들)을 관리자 및/또는 오케스트레이터 소프트웨어에 반환 한다. 제8 시간에서, 관리자 및/또는 오케스트레이터 소프트웨어는 하나 이상의 구성 변경을 요청 한다. 제9 시간에서 BMC는 BIOS, 프로세서 등의 재부팅 시에 새로 요청된 구성 변경 들을 사용하도록 BIOS에서의 하나 이상의 변수를 설정한다. 제10 시간에서, 관리자 및/또는 오케 스트레이터 소프트웨어는 BMC의 재설정을 발행한다. 제11 시간에서, BMC가 재설정을 발행한다. 제12 시간에서, BIOS는 프로세서의 부팅 시에 새로운 구성들을 구성한다. 도 57은 CPU를 네트워크 최적화 가능한 CPU로서 식별하도록 예시적인 워크로드 조정 가능한 CPU를 구현하기 위 해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 예를 들어, 도 57의 머 신 판독 가능 명령어들은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코 어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코 어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41 의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템, 도 40 및 도 41의 고 객 엔터프라이즈 시스템, 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로그래 밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다. 대안적으로, 예시 적인 머신 판독 가능 명령어들은 하나 이상의 서버, 제조 중 또는 제조 후에 반도체들을 분석하고, 검사 하며/하거나 다른 방식으로 특성 분석하는 데 사용될 수 있는 하나 이상의 반도체 디바이스 검사 머신(예를 들 면, 전자 빔 검사 장비 또는 머신들, 레이저 검사 장비 또는 머신들 등)에 의해 실행될 수 있다. 도 57의 예시적인 머신 판독 가능 명령어들은 멀티코어 프로세서가 프로세싱할 중앙 프로세싱 유닛 (CPU)의 코어를 선택하는 블록에서 시작한다. 예를 들어, 멀티코어 프로세서는 프로세싱할 반도체 웨이퍼의 반도체 다이의 제1 코어를 선택할 수 있다. 블록에서, 멀티코어 프로세서는 코어의 전력 값 능력들을 결정한다. 예를 들어, 멀티코어 프로세서 는 코어의 경계 조건들, 전력 프로파일 등을 결정할 수 있다. 일부 그러한 예들에서, 멀티코어 프로세서 는 코어가 작동(예를 들면, 코어 또는 코어를 갖는 회로 내의 다른 컴포넌트들을 손상시키지 않고 안전하 게 작동)할 수 있는 작동 전압 범위, 전류 범위 등을 결정한다. 블록에서, 멀티코어 프로세서는 코어의 작동 주파수 능력들을 결정한다. 예를 들어, 멀티코어 프로 세서는 코어가 작동할 수 있는 결정적 주파수 범위를 결정할 수 있다. 일부 그러한 예들에서, 멀티코어 프로세서는 도 8의 제1 코어(810A)가 코어의 전력 값 능력들 및/또는 작동 주파수 능력들에 기초하여 지원 할 수 있는 하나 이상의 적용 비율을 결정할 수 있다.블록에서, 멀티코어 프로세서는 코어가 적용 비율들 및/또는 증가된 클록 속도의 변화들을 지원하는 지 여부를 결정할 수 있다. 예를 들어, 도 8의 코어 구성기는 레지스터(예를 들면, 구성 레지스터, 코어 구성 레지스터 등), 메모리 구역 또는 위치 등으로부터 값을 판독할 수 있다. 값에 기초하여, 코어 구성기 는 코어가 2개 이상의 적용 비율을 지원할 수 있다(예를 들면, 일정 범위의 작동 주파수들, P-상태들 등을 지원할 수 있다)고 결정할 수 있다. 일부 그러한 예들에서, 멀티코어 프로세서는 코어가 5G 통신 네트워 크와 연관된 네트워크 워크로드들을 실행하는 데 유리할 수 있는 2개 이상의 적용 비율을 지원할 수 있다고 결 정할 수 있다. 블록에서, 멀티코어 프로세서가 코어가 적용 비율들 및/또는 증가된 클록 속도들의 변화들을 지원하 지 않는다고 결정하면, 제어는 프로세싱할 다른 코어를 선택할지 여부를 결정하기 위해 블록으로 진행한 다. 블록에서, 멀티코어 프로세서가 코어가 적용 비율들 및/또는 증가된 클록 속도들의 변화들을 지원한다고 결정하면, 블록에서, 멀티코어 프로세서는 코어를 네트워크 최적화 가능한 후보 코어로 서 식별한다. 예를 들어, 멀티코어 프로세서는 코어를 다수의 적용 비율들을 지원할 수 있는 것으로서 식 별할 수 있다. 일부 그러한 예들에서, 멀티코어 프로세서는 표시, 식별 등을 저장소(예를 들면, 비휘발성 메모리, 휘발성 메모리, 하나 이상의 대용량 저장 디바이스 등)에 저장할 수 있다. 블록에서 코어를 네트워크 최적화 가능한 후보 코어로서 식별하는 것에 응답하여, 멀티코어 프로세서 는 블록에서 프로세싱할 다른 코어를 선택할지 여부를 결정한다. 예를 들어, 멀티코어 프로세서 는 프로세싱할 반도체 웨이퍼의 반도체 다이의 제2 코어를 선택할 수 있다. 블록에서, 멀티코어 프로세서가 프로세싱할 다른 코어가 있다고 결정하면, 제어는 프로세싱할 CPU의 다른 코어를 선택하기 위해 블록으로 돌아간다. 블록에서, 멀티코어 프로세서가 프로세싱할 다른 코어가 없다고 결정하면, 블록에서, 멀티코어 프로세서는 네트워크 최적화 가능한 후보 코어로 서 식별되는 CPU의 코어 수가 임계값을 충족시키는지 여부를 결정한다. 예를 들어, 멀티코어 프로세서는 CPU의 32개 코어 중 24개 코어가 16개의 코어의 임계값을 충족시키는 네트워크 최적화 가능한 후보 코어들로서 식별되었다고 결정할 수 있다. 대안적으로, 임계값은 임의의 다른 수의 코어일 수 있다. 블록에서, 멀티코어 프로세서가 네트워크 최적화 가능한 후보 코어로서 식별되는 CPU의 코어 수가 임계값을 충족시키지 않는다고 결정하면, 도 57의 예시적인 머신 판독 가능 명령어들이 종료된다. 블록 에서, 멀티코어 프로세서가 네트워크 최적화 가능한 후보 코어로서 식별되는 CPU의 코어 수가 임계 값을 충족시킨다고 결정하면, 블록에서, 멀티코어 프로세서는 CPU를 네트워크 최적화 가능한 CPU로 서 식별한다. 예를 들어, 네트워크 최적화 가능한 CPU는 본 명세서에서 설명되는 바와 같은 멀티코어 CPU를 구 현하기 위해 MEC 환경에 배포될 수 있다. 일부 그러한 예들에서, 네트워크 최적화 가능한 CPU는 도 1의 DU들 , 도 1의 CU들, 도 1의 코어 서버들 등 중 하나(다수)를 구현하는 데 사용될 수 있다. 일부 그 러한 예들에서, 네트워크 최적화 가능한 CPU는 vRAN-DU를 구현하는 데 사용될 수 있는 DU들 중 하나(다 수)를 구현하기 위한 제1 소프트 SKU와 같은, 2개 이상의 소프트 SKU로 제조 후에 구성될 수 있는 단일 하드 SKU를 할당할 수 있다. 블록에서 CPU를 네트워크 최적화 가능한 CPU로서 식별하는 것에 응답하여, 멀티코어 프로세서는 블 록에서 네트워크 최적화된 구성(들)을 CPU에 저장한다. 예를 들어, 멀티코어 프로세서는 구성들 중 하나 이상을 도 8의 메모리에 저장할 수 있다. 블록에서 네트워크 최적화된 구성(들)을 CPU에 저장하는 것에 응답하여, 도 57의 예시적인 머신 판독 가능 명령어들이 종료된다. 도 58은 예시적인 사용 조건 및 활성화 배열에 기초하여 CPU 특징(들)을 활용하도록 예시적인 워크로드 조정 가 능한 CPU를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 예를 들어, 도 58의 머신 판독 가능 명령어들은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세 서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로 세서, 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템 , 도 40 및 도 41의 고객 엔터프라이즈 시스템, 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다.블록에서, 사용 조건 및 활성화 배열에 기초한 프로세서(들)의 최적화된 워크로드 특징(들)에 대한 주문 (예를 들면, 요청, 계약, 협약 등)이 설정된다. 예를 들어, 제조업체 엔터프라이즈 시스템은 네트워크 (예를 들면, 무선 네트워크)를 통해 도 40의 SDSi 반도체 디바이스의 하나 이상의 소프트웨어 정의 실리 콘 특징을 활성화시키라는 요청을 포함하는 도 40의 고객 엔터프라이즈 시스템으로부터 주문을 획득할 수 있다. 예를 들어, CPU의 제조는 소프트웨어 정의 실리콘을 사용하여 CPU 워크로드 최적화의 통합 또는 구성을 가능하게 할 수 있다. 이것은 제조 설정과 일치하는 구성을 인에이블, 잠금 해제, 검증, 또는 수정하는 것과 같이, 제조 설정 및 검증 위에 소프트 SKU 메커니즘을 포함할 수 있다. 일부 예들에서, 제조업체 엔터프라이즈 시스템은 SDSi 반도체 디바이스의 하나 이상의 소프트웨어 정의 실리콘 특징을 활성화시킬 수 있다. 블록에서, 제조업체 엔터프라이즈 시스템은 코어별로 컴퓨트 코어(들)의 주파수를 제어하기 위해 워크로드 특징을 활성화시킬지 여부를 결정한다. 예를 들어, 제조업체 엔터프라이즈 시스템은 주문이 도 8의 PCU가 코어별로 도 8의 코어들(810A 내지 810N)의 구성(들)을 제어할 수 있도록 하라는 요청을 포함한다고 결정할 수 있다. 일부 그러한 예들에서, 구성(들)은 코어들(810 내지 810N) 중 하나(다수)의 보장된 작동 주파수에 대한 변경(들)을 포함할 수 있다. 블록에서, 제조업체 엔터프라이즈 시스템이 코어별로 컴퓨트 코어(들)의 주파수를 제어하기 위해 워크로드 특징을 활성화시키지 않기로 결정하면, 제어는 언코어별로 언코어(들)의 주파수를 제어하기 위해 워크 로드 특징을 활성화시킬지 여부를 결정하는 블록으로 진행한다. 블록에서, 제조업체 엔터프라이즈 시스템이 코어별로 컴퓨트 코어(들)의 주파수를 제어하기 위해 워크로드 특징을 활성화시키기로 결정하면, 블록에서, 제조업체 엔터프라이즈 시스템은 프로세서(들)이 코어별 제어를 활성화시키기 위한 라이선스를 생성한다. 예를 들어, 도 41의 SDSi 특징 관리 서비스는 주문에서 요청된 대로 SDSi 특 징을 활성화시키기 위해 제1 라이선스를 생성할 수 있다. 블록에서 프로세서(들)이 코어별 제어를 활성화시키기 위한 라이선스를 생성하는 것에 응답하여, 블록 에서, 제조업체 엔터프라이즈 시스템은 코어별로 언코어(들)의 주파수를 제어하기 위해 워크로드 특징을 활성화시킬지 여부를 결정한다. 예를 들어, 제조업체 엔터프라이즈 시스템은 주문이 PCU가 언코어별로 도 8의 언코어 로직 인스턴스들의 구성(들)을 제어할 수 있도록 하라는 요청을 포함한다 고 결정할 수 있다. 일부 그러한 예들에서, 구성(들)은 도 8의 CMS, 메시 인터페이스, 또는 I/O 중 적어도 하나(다수)의 보장된 작동 주파수에 대한 변경(들)을 포함할 수 있다. 블록에서, 제조업체 엔터프라이즈 시스템이 언코어별로 언코어(들)의 주파수를 제어하기 위해 워크 로드 특징을 활성화시키지 않기로 결정하면, 제어는 CLM별로 CLM(들)의 주파수를 제어하기 위해 워크로드 특징 을 활성화시킬지 여부를 결정하는 블록으로 진행한다. 블록에서, 제조업체 엔터프라이즈 시스템 이 언코어별로 언코어(들)의 주파수를 제어하기 위해 워크로드 특징을 활성화시키기로 결정하면, 블록 에서, 제조업체 엔터프라이즈 시스템은 프로세서(들)이 언코어별 제어를 활성화시키기 위한 라이선 스를 생성한다. 예를 들어, SDSi 특징 관리 서비스는 주문에서 요청된 대로 SDSi 특징을 활성화시키기 위해 제2 라이선스를 생성할 수 있다. 대안적으로, SDSi 특징 관리 서비스는 언코어별 제어의 SDSi 특징 을 포함하도록 제1 라이선스를 업데이트할 수 있다. 블록에서 프로세서(들)이 언코어별 제어를 활성화시키기 위한 라이선스를 생성하는 것에 응답하여, 블록 에서, 제조업체 엔터프라이즈 시스템은 CLM별로 CLM(들)의 주파수를 제어하기 위해 워크로드 특징 을 활성화시킬지 여부를 결정한다. 예를 들어, 제조업체 엔터프라이즈 시스템은 주문이 PCU가 CLM 별로 도 8의 CLM 로직 인스턴스들의 구성(들)을 제어할 수 있도록 하라는 요청을 포함한다고 결정할 수 있다. 일부 그러한 예들에서, 구성(들)은 도 8의 LLC, CMS, CHA, 또는 I/O 버퍼 중 적어도 하나(다수)의 보장된 작동 주파수에 대한 변경(들)을 포함할 수 있다. 블록에서, 제조업체 엔터프라이즈 시스템이 CLM별로 CLM(들)의 주파수를 제어하기 위해 워크로드 특징을 활성화시키지 않기로 결정하면, 제어는 CPU 특징 활성화(들)를 관리하는 블록으로 진행한다. 블 록에서, 제조업체 엔터프라이즈 시스템이 CLM별로 CLM(들)의 주파수를 제어하기 위해 워크로드 특 징을 활성화시키기로 결정하면, 블록에서, 제조업체 엔터프라이즈 시스템은 프로세서(들)이 CLM별 제어를 활성화시키기 위한 라이선스를 생성한다. 예를 들어, SDSi 특징 관리 서비스는 주문에서 요청된 대로 SDSi 특징을 활성화시키기 위해 제3 라이선스를 생성할 수 있다. 대안적으로, SDSi 특징 관리 서비스 는 CLM별 제어의 SDSi 특징을 포함하도록 제1 라이선스를 업데이트할 수 있다.블록에서 프로세서(들)이 CLM별 제어를 활성화시키기 위한 라이선스를 생성하는 것에 응답하여, 블록 에서, CPU 특징 활성화의 관리가 실행된다. 예를 들어, 블록에서 워크로드 특징(들)의 관리(예를 들면, 보고, 로깅, 조정 등)를 수행하고 사용 조건을 설정하기 위해 추가적인 동작들이 수행될 수 있다. 예를 들어, 이것은 SDSi 특징 관리 서비스가 제공되는 최적화 유형, 활성화되는 제어 유형(예를 들면, 코어별 제어, 언코어별 제어, CLM별 제어 등), 및/또는 특정 고객, 제조업체 또는 제3자 관리 엔티티에 대한 계약 조항 들에 대응하는 라이선싱 동작들을 실행하는 것을 포함할 수 있다. 블록에서, 성공적인 활성화 및 관리에 응답하여, SDSi 반도체 디바이스와 같은 멀티 SKU CPU는 본 명세서에서 설명되는 바와 같이 네트워크 워크로드들의 최적화된 실행을 실시하기 위해 사용 조건 및 활성화 배 열에 기초하여(예를 들면, 정의된 사용 조건에 따라) CPU 특징(들)을 활용할 수 있다. 블록에서 CPU 특 징(들)을 활용하는 것에 응답하여, 도 58의 예시적인 머신 판독 가능 명령어들이 종료된다. 도 59는 워크로드에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하 기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 예를 들어, 도 59 의 머신 판독 가능 명령어들은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/ 또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템, 도 40 및 도 41 의 고객 엔터프라이즈 시스템, 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로 그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다. 도 59의 머신 판독 가능 명령어들은, 멀티코어 프로세서가 중앙 프로세싱 유닛(CPU) 코어(들)가 네 트워크 최적화된 워크로드들을 지원하는지 여부를 결정하는, 블록에서 시작한다. 예를 들어, 도 8의 코 어 구성기 및/또는, 보다 일반적으로, 도 8의 PCU는 도 8의 제1 코어(810A), 제2 코어(810N) 등이, 도 5의 제1 네트워크 워크로드들, 제2 네트워크 워크로드들, 및/또는 제3 네트워크 워크로드들 과 같은, 네트워크 최적화된 워크로드들의 실행을 지원하는지 여부를 결정할 수 있다. 일부 그러한 예들에서, 코어 구성기는 프로세서의 레지스터(예를 들면, 구성 레지스터, 코어 구성 레지스터 등), 메모리 구 역 또는 위치 등으로부터 값을 판독할 수 있다. 값에 기초하여, 코어 구성기는 제1 코어(810A)가 2개 이 상의 적용 비율을 지원할 수 있다(예를 들면, 일정 범위의 작동 주파수들, P-상태들 등을 지원할 수 있다)고 결 정할 수 있다. 일부 그러한 예들에서, 코어 구성기는 제1 코어(810A)가 2개 이상의 적용 비율 중 하나에 기초하여 상이한 코어 구성들에서 작동하도록 호출될 수 있다고 결정할 수 있다. 블록에서, 멀티코어 프로세서가 CPU 코어(들)가 네트워크 최적화 워크로드들을 지원하지 않는다고 결정하면, 블록에서, 멀티코어 프로세서는 일반 모드에서 CPU 코어(들)를 작동시킨다. 예를 들어, 코어 구성기는 기본 또는 베이스라인 전압 및/또는 작동 주파수에서 작동하도록 제1 코어(810A)에게 지시 할 수 있다. 블록에서 일반 모드에서 CPU 코어(들)를 작동시키는 것에 응답하여, 제어는 프로세싱할 다 른 네트워크 워크로드가 있는지 여부를 결정하는 블록으로 진행한다. 블록에서, 멀티코어 프로세서가 CPU 코어(들) 중 하나(다수)가 네트워크 최적화된 워크로드들을 지 원한다고 결정하면, 제어는 네트워크 워크로드(들)를 실행할 CPU의 코어(들)를 식별하는 블록으로 진행한 다. 예를 들어, 애플리케이션(예를 들면, 컴퓨팅 애플리케이션, 소프트웨어 애플리케이션 등)은 애플리케이션 기능(예를 들면, 통신 기능, 5G 기능 등)을 실행할 수 있고, 도 8의 스케줄러는 애플리케이션 기능을 실행 하기 위해서는 애플리케이션 기능이 하나 이상의 네트워크 워크로드가 완료될 것을 필요로 한다고 결정할 수 있 다. 일부 그러한 예들에서, 스케줄러는 하나 이상의 네트워크 워크로드를 실행할 제1 코어(810A) 및 제2 코어(810N)(또는 상이한 수의 코어들(810A 내지 810N) 또는 코어들(810A 내지 810N) 중 하나(다수))를 식별할 수 있다. 예를 들어, 스케줄러는 도 8의 AVX-512 명령어들 중 제1의 것을 실행할 제1 코어(810A) 및 도 8의 5G-ISA 명령어들 중 제2의 것을 실행할 제2 코어(810N)를 식별할 수 있다. 블록에서, 멀티코어 프로세서는 식별된 코어(들)에 명령어 세트를 로딩한다. 예를 들어, 스케줄러 는 AVX-512 명령어들 중 제1의 것을 로딩하도록 제1 코어(810A)에 요청하고 5G-ISA 명령어들 중 제2의 것을 로딩하도록 제2 코어(810N)에 요청할 수 있다. 블록에서, 멀티코어 프로세서는 전력 버짓이 증가된 성능 상태에서 네트워크 워크로드(들)를 실행하 는 데 이용 가능한지 여부를 결정한다. 예를 들어, 제1 코어(810A)는 AVX-512 명령어들 중 제1의 것을 로 딩하는 것에 응답하여 도 8의 전력 버짓 분석기와 인터페이싱할 수 있다. 일부 그러한 예들에서, 제1 코 어(810A)는, 로딩된 명령어의 유형(예를 들면, SSE 명령어, AVX-512 명령어, 5G-ISA 명령어 등), 제1 코어 (810A)의 식별자, 제1 코어(810A)의 구성 정보(예를 들면, P-상태, 작동 전압, 작동 주파수 등) 등, 및/또는 이 들의 조합과 같은, 데이터를 전력 버짓 분석기 및/또는, 보다 일반적으로, 도 8의 PCU에게 전송할 수 있다. 일부 그러한 예들에서, 전력 버짓 분석기는 제1 코어(810A)가 증가된 성능 상태에서 작동하지(예를 들면, 더 높은 작동 전압 및 주파수에서 작동하지) 않는 경우의 멀티코어 프로세서의 제1 전력 소비와 제1 코어(810A)가 증가된 성능 상태에서 작동하는 경우의 멀티코어 프로세서의 제2 소비 전력을 비교할 수 있 다. 일부 예들에서, 전력 버짓 분석기는 제1 코어(810A)가 제1 코어(810A) 및/또는, 보다 일반적으로, 프 로세서의 TDP 또는 임의의 다른 요구사항(예를 들면, 지연시간 요구사항, 처리량 요구사항 등)을 위반하지 않고 증가된 성능 상태에서 작동할 수 있는지 여부를 결정하기 위해 로딩된 명령어의 유형, 제1 코어(810A)의 식별자, 구성 정보, 제1 전력 소비 값, 또는 제2 전력 소비 값 중 적어도 하나를 사용하여 머신 러닝 모델 (들)을 실행한다. 일부 예들에서, 전력 버짓 분석기는 제2 전력 소비를 임계값(예를 들면, 전력 버짓 임계값, TDP 임계값 등)과 비교한다. 전력 버짓 분석기는 임계값이 초과되고/되거나 달리 충족되는 경우 증가된 성능 상태에 서 작동하도록 제1 코어(810A)에 라이선스를 부여하지 않을 수 있다. 전력 버짓 분석기는 임계값이 초과 되지 않고/않거나 달리 충족되지 않는 경우 증가된 성능 상태에서 작동하도록 제1 코어(810A)에 라이선스를 부 여할 수 있다. 블록에서, 멀티코어 프로세서가 증가된 성능 상태에서 네트워크 워크로드(들)를 실행하는 데 이용 가능한 전력 버짓이 충분하지 않다고 결정하면, 제어는 프로세싱할 다른 네트워크 워크로드가 있는지 여부를 결 정하는 블록으로 진행한다. 예를 들어, 전력 버짓 분석기는 제1 코어(810A)의 성능 상태의 증가가 전력 버짓이 초과되게 하고 이에 의해 임계값이 충족된다고 결정할 수 있다. 일부 예들에서, 전력 버짓 분석기 는 머신 러닝 모델(들)로부터의 출력(들)에 기초하여 제1 코어(810A)의 성능 상태의 증가가 전력 버 짓이 초과되게 한다고 결정할 수 있다. 블록에서, 멀티코어 프로세서가 증가된 성능 상태에서 네트워크 워크로드(들)를 실행하는 데 이용 가능한 전력 버짓이 충분하다고 결정하면, 블록에서, 멀티코어 프로세서는 명령어 세트에 기초하여 식별된 코어(들) 및/또는 대응하는 언코어(들)에 대해 네트워크 워크로드 최적화를 구현한다. 예를 들어, 전력 버짓 분석기는 제1 코어(810A)의 성능 상태의 증가가 전력 버짓이 초과되게 하지 않고 이에 의해 임계값이 충족되지 않는다고 결정할 수 있다. 일부 그러한 예들에서, 코어 구성기는 제1 코어(810A)에 증가된 전압 을 전달하도록 도 8의 전력 게이트들에 요청할 수 있고/있거나 증가된 결정적 주파수로 제1 코어(810A)를 작동시키도록 실행 유닛에 요청할 수 있다. 일부 예들에서, 코어 구성기는 처리량을 개선시키고/시 키거나 지연시간을 감소시키기 위해 증가된 결정적 주파수로 제1 코어(810A)에 대응하는 언코어 로직의 제 1 인스턴스를 작동시킬 수 있다. 일부 예들에서, 코어 구성기는 위에서 설명된 바와 같은 입력(들)에 기 초하여 증가된 결정적 주파수의 값을 결정하기 위해 머신 러닝 모델(들)을 실행할 수 있다. 블록에서, 멀티코어 프로세서는 증가된 성능 상태에서 네트워크 워크로드(들)를 실행하도록 CPU 코 어(들) 및/또는 언코어(들)를 작동시킨다. 예를 들어, 증가된 성능 상태에서 제1 코어(810A)는 AVX-512 명령어 들 중 제1의 것을 실행할 수 있고 제2 코어(810N)는 5G-ISA 명령어들 중 제2의 것을 실행할 수 있다. 일부 예들에서, 코어 구성기는 처리량을 개선시키고/시키거나 지연시간을 감소시키기 위해 증가된 결정적 주파수로 제1 코어(810A)에 대응하는 언코어 로직의 제1 인스턴스 및/또는 제2 코어(810N)에 대응하는 언 코어 로직의 제2 인스턴스를 작동시킬 수 있다. 블록에서, 멀티코어 프로세서는 프로세싱할 다른 워크로드가 있는지 여부를 결정한다. 예를 들어, 스케줄러는 애플리케이션이 실행할 다른 네트워크 기능을 갖는지 여부를 결정할 수 있다. 블록에서, 멀티코어 프로세서가 프로세싱할 다른 네트워크 워크로드가 있다고 결정하면, 제어는 CPU 코어(들)가 네트워크 최적화된 워크로드들을 지원하는지 여부를 결정하는 블록으로 복귀하고, 그렇지 않 으면 도 59의 예시적인 머신 판독 가능 명령어들이 종료된다. 도 60은 워크로드에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하 기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 예를 들어, 도 60 의 머신 판독 가능 명령어들은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템, 도 40 및 도 41 의 고객 엔터프라이즈 시스템, 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로 그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다. 도 60의 예시적인 머신 판독 가능 명령어들은 네트워크 최적화된 환경에 배포할 중앙 프로세싱 유닛(CP U)이 선택되는 블록에서 시작된다. 예를 들어, 도 1의 제1 멀티코어 컴퓨팅 환경에 배포할 프로세 서가 선택될 수 있다. 블록에서, 프로세서는 프로세서가 가상 무선 액세스 네트워크 (vRAN) 중앙 유닛(CU)을 구현해야 하는지 여부를 결정한다. 예를 들어, 프로세서는 프로세서가 프로 세싱해야 하는 CU 워크로드들에 기초하여 프로세서가 vRAN-CU를 구현해야 한다고 결정할 수 있다. 일부 예들에서, 도 8의 스케줄러는 도 8의 머신 러닝 모델(들)에 대한 입력들로서 CU 워크로드들을 제공하 는 것 및 머신 러닝 모델(들)로부터의 출력으로서 vRAN-CU의 식별을 수신하는 것에 기초하여 프로세서 가 vRAN-CU를 구현해야 한다고 결정하기 위해 머신 러닝 모델(들)을 실행할 수 있다. 블록에서, CPU가 vRAN-CU를 구현하지 않아야 한다고 프로세서가 결정하면, 제어는 CPU가 vRAN 분산 유닛(DU)을 구현해야 하는지 여부를 결정하는 블록으로 진행한다. 블록에서, CPU가 vRAN-CU를 구 현해야 한다고 프로세서가 결정하면, 블록에서, 프로세서는 vRAN-CU 워크로드들에 대해 프로세 서를 최적화하기 위해 프로세서의 코어들(810A 내지 810N) 및/또는 언코어(들) 중 하나(다수)에 제1 적용 비율을 적용한다. 예를 들어, 코어들(810A 내지 810N) 중 하나(다수)는 0.74의 제1 코어 적용 비율에 기초한 제1 작동 주파수로 코어별로 구성될 수 있고/있거나, 언코어 로직의 대응하는 하나(다수)는 1.5의 제1 언코어 적용 비율에 기초한 제2 작동 주파수로 언코어별로 구성될 수 있다. 블록에서, 프로세서는 vRAN-DU를 구현할지 여부를 결정한다. 예를 들어, 프로세서는 프로세서 가 프로세싱해야 하는 도 5의 네트워크 워크로드들(542, 544, 546) 중 하나(다수)에 기초하여 프로세서 가 vRAN-DU를 구현해야 한다고 결정할 수 있다. 일부 예들에서, 스케줄러는 머신 러닝 모델 (들)에 대한 입력들로서 DU 워크로드들을 제공하는 것 및 머신 러닝 모델(들)로부터의 출력으로서 vRAN-DU의 식별을 수신하는 것에 기초하여 프로세서가 vRAN-DU를 구현해야 한다고 결정하기 위해 머신 러 닝 모델(들)을 실행할 수 있다. 블록에서, 프로세서가 vRAN-DU를 구현하지 않아야 한다고 프로세서가 결정하면, 제어는 프로세 서가 코어 서버를 구현해야 하는지 여부를 결정하는 블록으로 진행한다. 블록에서, 프로세서 가 vRAN-DU를 구현해야 한다고 프로세서가 결정하면, 블록에서, 프로세서는 vRAN-DU 워 크로드들에 대해 프로세서를 최적화하기 위해 프로세서의 코어들(810A 내지 810N) 및/또는 언코어(들) 중 하나(다수)에 제2 적용 비율을 적용한다. 예를 들어, 코어들(810A 내지 810N) 중 하나(다 수)는 0.65의 제2 코어 적용 비율에 기초한 제2 작동 주파수로 코어별로 구성될 수 있고, 언코어 로직의 대응하는 하나(다수)는 1.0의 제2 언코어 적용 비율에 기초한 제2 작동 주파수로 언코어별로 구성될 수 있다. 블록에서, 프로세서는 코어 서버를 구현할지 여부를 결정한다. 예를 들어, 프로세서는 프로세 서가 프로세싱해야 하는 도 5의 제3 네트워크 워크로드들 중 하나(다수)에 기초하여 프로세서가 코어 서버를 구현해야 한다고 결정할 수 있다. 일부 예들에서, 스케줄러는 머신 러닝 모델(들)에 대 한 입력들로서 코어 서버 워크로드들을 제공하는 것 및 머신 러닝 모델(들)로부터의 출력으로서 코어 서버 의 식별을 수신하는 것에 기초하여 프로세서가 코어 서버를 구현해야 한다고 결정하기 위해 머신 러닝 모 델(들)을 실행할 수 있다. 블록에서, 프로세서가 코어 서버를 구현하지 않아야 한다고 프로세서가 결정하면, 도 60의 예 시적인 머신 판독 가능 명령어들이 종료된다. 블록에서, 프로세서가 코어 서버를 구현해야 한다고 프로세서가 결정하면, 블록에서, 프로세서는 코어 서버 워크로드들에 대해 프로세서 를 최적화하기 위해 프로세서의 코어들(810A 내지 810N) 및/또는 언코어(들) 중 하나(다수)에 제3 적용 비율을 적용한다. 예를 들어, 코어들(810A 내지 810N) 중 하나(다수)는 1.0의 제3 코어 적용 비율에 기초한 제3 작동 주파수로 코어별로 구성될 수 있고, 언코어 로직의 대응하는 하나(다수)는 1.0의 제3 언 코어 적용 비율에 기초한 제3 작동 주파수로 언코어별로 구성될 수 있다. 블록에서 코어 서버 워크로드들에 대해 프로세서를 최적화하기 위해 프로세서의 코어들(810A 내지 810N) 중 하나(다수)에 적용 비 율을 적용하는 것에 응답하여, 프로세서는 블록에서 CPU를 계속 모니터링할지 여부를 결정한다. 예 를 들어, 프로세서는 상이한 구성(예를 들면, vRAN-CU, vRAN-DU, 코어 서버 등)을 구현하라는 요청을 획득 할 수 있다. 블록에서, 프로세서가 CPU를 계속 모니터링하기로 결정하면, 제어는 CPU가 vRAN-CU를 구현해야 하는지 여부를 결정하는 블록으로 돌아가고, 그렇지 않으면 도 60의 예시적인 머신 판독 가능 명령어들이 종료된다. 도 61은 워크로드에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하 기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 예를 들어, 도 61 의 머신 판독 가능 명령어들은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/ 또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템, 도 40 및 도 41 의 고객 엔터프라이즈 시스템, 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로 그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다. 도 61의 예시적인 머신 판독 가능 명령어들은 멀티코어 컴퓨팅 환경에서 중앙 프로세싱 유닛(CPU)이 선택 되는 블록에서 시작된다. 예를 들어, 도 1의 제1 멀티코어 컴퓨팅 환경에서 프로세서의 인스 턴스가 선택될 수 있다. 블록에서, 프로세서는 코어별로 및/또는 언코어별로 적용 비율에 기초하여 프로세서를 구성한 다. 예를 들어, 프로세서는 0.74의 코어 적용 비율에 기초한 제1 작동 주파수로 코어별로 도 8의 코어들 (810A 내지 810N) 중 하나(다수)를 구성할 수 있고/있거나, 1.5의 제1 언코어 적용 비율에 기초한 제2 작동 주 파수로 언코어별로 언코어 로직의 대응하는 하나(다수)를 구성할 수 있다. 일부 그러한 예들에서, 프로세 서는 vRAN-DU를 구현하도록 구성될 수 있다. 블록에서, 프로세서는 구성에 기초하여 네트워크 워크로드(들)를 실행한다. 예를 들어, 코어들 (810A 내지 810N)은 도 5의 제1 워크로드들, 제2 워크로드들, 및/또는 제3 워크로드들을 실행할 수 있다. 블록에서, 프로세서는 외부 시스템으로부터의 커맨드에 기초한 제2 적용 비율에 기초하여 프로세서 를 재구성할지 여부를 결정한다. 예를 들어, 도 40 내지 도 42와 관련하여 위에서 설명된 바와 같은 고객 엔터프라이즈 시스템은 제2 적용 비율에 기초하여 프로세서를 작동시키기 위해 도 40 및 도 41의 제 조업체 엔터프라이즈 시스템에 라이선스를 요청할 수 있다. 일부 예들에서, 도 40 및 도 41의 고객 엔터 프라이즈 시스템과 관련된 사용자는 제2 적용 비율에 기초하여 프로세서를 재구성하라는 요청을 (예 를 들면, 도 55 및/또는 도 56과 관련하여 위에서 설명된 바와 같은 OS 메일박스 커맨드를 통해) 전송할 수 있 다. 블록에서, 프로세서가 외부 시스템으로부터의 커맨드에 기초한 제2 적용 비율에 기초하여 프로세서 를 재구성하기로 결정하면, 제어는 제2 적용 비율에 기초하여 코어별로 프로세서를 구성하는 블록 으로 돌아간다. 블록에서, 프로세서가 외부 시스템으로부터의 커맨드에 기초한 제2 적용 비 율에 기초하여 프로세서를 재구성하지 않기로 결정하면, 블록에서, 프로세서는 네트워크 워크 로드(들)에 기초한 제2 적용 비율에 기초하여 프로세서를 재구성할 것인지 여부를 결정한다. 예를 들어, 프로세서는 네트워크 워크로드(들)와 연관된 데이터를 입력(들)으로서 사용하여 도 8의 머신 러닝 모델(들)로부터 출력을 생성할 수 있다. 일부 그러한 예들에서, 프로세서는, 예컨대, 도 5의 제1 워 크로드들, 제2 워크로드들 및/또는 도 5의 제3 워크로드들을 실행할 때 처리량을 증가시키는 것 및/또는 지연시간을 감소시키는 것에 의해, 더 최적화된 및/또는 달리 개선된 방식으로 네트워크 워크로드(들) 를 실행하기 위해 상이한 적용 비율이 사용될 수 있음을 나타내는 출력을 생성하기 위해 머신 러닝 모델 (들)을 호출할 수 있다. 블록에서, 프로세서가 네트워크 워크로드(들)에 기초한 제2 적용 비율에 기초하여 프로세서를 재구성하기로 결정하면, 제어는 제2 적용 비율에 기초하여 코어별로 및/또는 언코어별로 프로세서를 구성 하는 블록으로 돌아간다. 블록에서, 프로세서가 네트워크 워크로드(들)에 기초한 제2 적용비율에 기초하여 프로세서를 재구성하지 않기로 결정하면, 블록에서, 프로세서는 프로세싱할 멀티코어 컴퓨팅 환경에서 다른 프로세서를 선택할지 여부를 결정한다. 블록에서, 프로세서가 프로 세싱할 멀티코어 컴퓨팅 환경에서 다른 프로세서를 선택하기로 결정하면, 제어는 멀티코어 컴퓨팅 환경에서 다 른 프로세서를 선택하는 블록으로 돌아가고, 그렇지 않으면 도 61의 예시적인 머신 판독 가능 명령어들 이 종료된다. 도 62는 워크로드에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하 기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 또 다른 플로차트이다. 예를 들 어, 도 62의 머신 판독 가능 명령어들은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서 , 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템 , 도 40 및 도 41의 고객 엔터프라이즈 시스템, 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다. 도 62의 예시적인 머신 판독 가능 명령어들은 멀티코어 프로세서가 실행할 네트워크 기능(들)을 결 정하는 블록에서 시작된다. 예를 들어, 도 8의 스케줄러는 OS 상에서 작동하는 애플리케이션과 통 신할 수 있다. 일부 그러한 예들에서, 스케줄러는, 애플리케이션 기능, 작업, 워크로드 등을 용이하게 하 기 위해, 도 5의 네트워크 워크로드들(542, 544, 546)과 같은, 하나 이상의 네트워크 워크로드가 실행되어야 한 다고 결정할 수 있다. 예를 들어, 스케줄러는, 스크램블링 또는 디스크램블링, 변조 또는 복조 등과 같은, AVX-512 네트워크 워크로드들이 실행되어야 한다고 결정할 수 있다. 일부 예들에서, 스케줄러는, 빔포밍 워크로드들과 같은, AVX-512 및/또는 5G-ISA 워크로드들이 실행되어야 한다고 결정할 수 있다. 일부 그 러한 예들에서, 스케줄러는 머신 러닝 모델(들)에 대한 입력들로서 제공되는 애플리케이션, 머신 판 독 가능 코드 등, 또는 이들의 부분(들)에 기초하여 어떤 유형의 네트워크 워크로드들이 실행되어야 하는지를 결정하기 위해 도 8의 머신 러닝 모델(들)을 호출할 수 있다. 블록에서, 멀티코어 프로세서는 네트워크 기능(들)을 실행할 네트워크 최적화된 중앙 프로세싱 유닛 (CPU)의 코어(들)를 식별한다. 예를 들어, 스케줄러는 하나 이상의 네트워크 워크로드를 실행할 도 8의 제1 코어(810A) 및 제2 코어(810N)(또는 상이한 수의 코어들(810A 내지 810N) 또는 코어들(810A 내지 810N) 중 하나(다수))를 식별할 수 있다. 예를 들어, 스케줄러는 도 8의 AVX-512 명령어들 중 제1의 것을 실 행할 제1 코어(810A) 및/또는 도 8의 5G-ISA 명령어들 중 제2의 것을 실행할 제2 코어(810N)를 식별할 수 있다. 블록에서, 멀티코어 프로세서는 네트워크 기능(들)에 기초하여 명령어 세트(들)를 로딩하도록 코어 (들)에 요청한다. 예를 들어, 스케줄러는 실행될 제2 네트워크 기능들에 기초하여 AVX-512 명령어들 중 제1의 것을 로딩하도록 제1 코어(810A)에 요청하고 실행될 제3 네트워크 워크로드들에 기초하여 5G-ISA 명령어들 중 제2의 것을 로딩하도록 제2 코어(810N)에 요청할 수 있다. 블록에서, 멀티코어 프로세서는 CPU 전력 버짓이 증가된 성능으로 네트워크 기능(들)을 실행하는 데 이용 가능한지 여부를 결정한다. 예를 들어, 제2 코어(810N)는 5G-ISA 명령어들 중 제1의 것을 로딩하는 것에 응답하여 도 8의 전력 버짓 분석기와 인터페이싱할 수 있다. 일부 그러한 예들에서, 제2 코어(810 N)는, 로딩된 명령어의 유형(예를 들면, SSE 명령어, AVX-512 명령어, 5G-ISA 명령어 등), 제2 코어(810N)의 식별자, 제2 코어(810N)의 구성 정보(예를 들면, P-상태, 작동 전압, 작동 주파수 등) 등, 및/또는 이들의 조합 과 같은, 데이터를 도 8의 PCU에게 전송할 수 있다. 일부 그러한 예들에서, 전력 버짓 분석기는 증 가된 성능 상태에서 작동하는(예를 들면, 더 높은 작동 전압 및 주파수에서 작동하는) 제2 코어(810N))를 갖는 멀티코어 프로세서의 전력 소비(예를 들면, 120 W, 150 W, 185 W 등)를 임계값(예를 들면, 전력 버짓 임계 값, 전력 소비 임계값 등)과 비교할 수 있다. 전력 버짓 분석기는 임계값이 초과되고/되거나 달리 충족되 는 경우 증가된 성능 상태에서 작동하도록 제2 코어(810N)에 라이선스를 부여하지 않을 수 있다. 예를 들어, 전력 버짓 분석기는 제2 코어(810N)의 작동 전압을 유지하고/하거나 달리 증가시키지 않도록 도 8의 전력 게이트들에 지시할 수 있다. 전력 버짓 분석기는 임계값이 초과되지 않고/않거나 달리 충족되지 않 는 경우 증가된 성능 상태에서 작동하도록 제2 코어(810N)에 라이선스를 부여할 수 있다. 예를 들어, 전력 버짓 분석기는 제2 코어(810N)의 작동 전압을 증가시키도록 전력 게이트들에 지시할 수 있다. 일부 예 들에서, 전력 버짓 분석기는 전력 버짓 분석기가 증가된 성능 상태에서 작동하도록 제2 코어(810N)에 라이선스를 부여할지 여부를 결정할 수 있는 것에 기초하여 출력들을 생성하기 위해 머신 러닝 모델(들)을 실행할 수 있다. 블록에서, 멀티코어 프로세서가 증가된 성능으로 네트워크 기능(들)을 실행하는 데 이용 가능한 CPU 전력 버짓이 충분하지 않다고 결정하면, 블록에서, 멀티코어 프로세서는 일반 모드에서 CPU 코어(들)를 작동시킨다. 예를 들어, 도 8의 코어 구성기는 기본 또는 베이스라인 전압 및/또는 작동 주파 수에서 작동하도록 제2 코어(810N)에게 지시할 수 있다. 블록에서 일반 모드에서 CPU 코어(들)를 작동시 키는 것에 응답하여, 도 62의 예시적인 머신 판독 가능 명령어들이 종료된다. 블록에서, 멀티코어 프로세서가 증가된 성능으로 네트워크 기능(들)을 실행하기 위해 이용 가능한 CPU 전력 버짓이 있다고 결정하면, 제어는 코어(들)의 P-상태를 구성하는 블록으로 진행한다. 예를 들어, 코어 구성기는 제2 코어(810N)의 전압 및 주파수를 증가시키기 위해 제2 코어(810N)의 P-상태를 P1n 으로부터 P0n으로 조정할 수 있다. 블록에서, 멀티코어 프로세서는 코어(들)의 결정적 주파수를 구성한다. 예를 들어, 제2 코어(810 N)의 P-상태를 조정하는 것에 응답하여, 코어 구성기는 제2 코어(810N)의 클록 속도를 증가시킬 수 있다. 블록에서, 멀티코어 프로세서는 코어(들)에 대한 명령어 세트 확장(들)을 인에이블시킨다. 예를 들 어, 스케줄러는 제3 네트워크 워크로드들을 실행하기 위해 실행할 5G-ISA 명령어들 중 하나(다 수)에 대한 액세스를 제2 코어(810N)에 부여할 수 있다. 블록에서, 멀티코어 프로세서는 네트워크 기능(들)을 실행하기 위해 증가된 성능 상태에서 코어 (들)를 작동시킨다. 예를 들어, 도 8의 실행 유닛은 코어들(810A 내지 810N)의 구성 및/또는 작동을 코어 별로 최적화하는 것에 응답하여 증가된 성능 상태에서 제1 코어(810A), 제2 코어(810N) 등을 작동시킬 수 있다. 블록에서 네트워크 기능(들)을 실행하기 위해 증가된 성능 상태에서 코어(들)를 작동시키는 것에 응답하 여, 도 62의 예시적인 머신 판독 가능 명령어들이 종료된다. 도 63은 워크로드에 기초하여 코어, 언코어, 또는 CLM 중 적어도 하나의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차 트이다. 예를 들어, 도 63의 머신 판독 가능 명령어들은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀 티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조 정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스 템, 도 40 및 도 41의 고객 엔터프라이즈 시스템, 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다. 도 63의 예시적인 머신 판독 가능 명령어들은 멀티코어 프로세서가 실행할 네트워크 기능(들)을 결 정하는 블록에서 시작된다. 예를 들어, 도 8의 스케줄러는 OS 상에서 작동하는 애플리케이션과 통 신할 수 있다. 일부 그러한 예들에서, 스케줄러는, 애플리케이션 기능, 작업, 워크로드 등을 용이하게 하 기 위해, 도 5의 네트워크 워크로드들(542, 544, 546)과 같은, 하나 이상의 네트워크 워크로드가 실행되어야 한 다고 결정할 수 있다. 예를 들어, 스케줄러는, 스크램블링 또는 디스크램블링, 변조 또는 복조 등과 같은, AVX-512 네트워크 워크로드들이 실행되어야 한다고 결정할 수 있다. 일부 예들에서, 스케줄러는, 빔포밍 워크로드들과 같은, AVX-512 및/또는 5G-ISA 워크로드들이 실행되어야 한다고 결정할 수 있다. 블록에서, 멀티코어 프로세서는 네트워크 기능(들)을 실행할 네트워크 최적화된 중앙 프로세싱 유닛 (CPU)의 코어(들)를 식별한다. 예를 들어, 스케줄러는 하나 이상의 네트워크 워크로드를 실행할 도 8의 제1 코어(810A) 및 제2 코어(810N)(또는 상이한 수의 코어들(810A 내지 810N) 또는 코어들(810A 내지 810N) 중 하나(다수))를 식별할 수 있다. 예를 들어, 스케줄러는 도 8의 AVX-512 명령어들 중 제1의 것을 실 행할 제1 코어(810A) 및/또는 도 8의 5G-ISA 명령어들 중 제2의 것을 실행할 제2 코어(810N)를 식별할 수 있다.블록에서, 멀티코어 프로세서는 CPU 전력 버짓이 더 높은 작동 주파수에서 네트워크 기능(들)을 실 행하는 데 이용 가능한지 여부를 결정한다. 예를 들어, 제2 코어(810N)는 5G-ISA 명령어들 중 제1의 것을 로딩하는 것에 응답하여 도 8의 전력 버짓 분석기와 인터페이싱할 수 있다. 일부 그러한 예들에서, 제2 코어(810N)는, 로딩된 명령어의 유형(예를 들면, SSE 명령어, AVX-512 명령어, 5G-ISA 명령어 등), 제2 코어 (810N)의 식별자, 제2 코어(810N)의 구성 정보(예를 들면, P-상태, 작동 전압, 작동 주파수 등) 등, 및/또는 이 들의 조합과 같은, 데이터를 도 8의 PCU에게 전송할 수 있다. 일부 그러한 예들에서, 전력 버짓 분석기 는 증가된 성능 상태에서 작동하는(예를 들면, 더 높은 작동 전압 및 주파수에서 작동하는) 제2 코어 (810N))를 갖는 멀티코어 프로세서의 전력 소비(예를 들면, 120 W, 150 W, 185 W 등)를 임계값(예를 들면, 전력 버짓 임계값, 전력 소비 임계값 등)과 비교할 수 있다. 전력 버짓 분석기는 임계값이 초과되 고/되거나 달리 충족되는 경우 증가된 성능 상태에서 작동하도록 제2 코어(810N)에 라이선스를 부여하지 않을 수 있다. 예를 들어, 전력 버짓 분석기는 제2 코어(810N)의 작동 전압을 유지하고/하거나 달리 증가시키 지 않도록 도 8의 전력 게이트들에 지시할 수 있다. 전력 버짓 분석기는 임계값이 초과되지 않고/않 거나 달리 충족되지 않는 경우 증가된 성능 상태에서 작동하도록 제2 코어(810N)에 라이선스를 부여할 수 있다. 예를 들어, 전력 버짓 분석기는 제2 코어(810N)의 작동 전압을 증가시키도록 전력 게이트들에 지시할 수 있다. 블록에서, 멀티코어 프로세서가 더 높은 작동 주파수에서 네트워크 기능(들)을 실행하는 데 이용 가 능한 CPU 전력 버짓이 충분하지 않다고 결정하면, 제어는 실행할 추가적인 네트워크 기능(들)이 있는지 여부를 결정하는 블록으로 진행한다. 예를 들어, 도 8의 코어 구성기는 기본 또는 베이스라인 전압 및/또 는 작동 주파수에서 작동하도록 제2 코어(810N)에게 지시할 수 있다. 블록에서, 멀티코어 프로세서(80 0)가 더 높은 작동 주파수에서 네트워크 기능(들)을 실행하는 데 이용 가능한 CPU 전력 버짓이 있다고 결정하면, 블록에서, 멀티코어 프로세서는 코어별로 코어(들)의 작동 주파수를 증가시킬지 여부를 결정한다. 블록에서, 멀티코어 프로세서가 코어별로 코어(들)의 작동 주파수를 증가시키지 않는 것으로 결정하 면, 제어는 코어별로 언코어(들)의 작동 주파수를 증가시킬지 여부를 결정하는 블록으로 진행한다. 블록 에서, 멀티코어 프로세서가 코어별로 코어(들)의 작동 주파수를 증가시키기로 결정하면, 블록(631 0)에서, 멀티코어 프로세서는 성능을 개선시키기 위해 증가된 작동 주파수에서 작동하도록 코어(들)의 P- 상태를 구성한다. 예를 들어, 코어 구성기는 제2 코어(810N)의 전압 및 주파수를 증가시키기 위해 제2 코 어(810N)의 P-상태를 P1n으로부터 P0n으로 조정할 수 있다. 블록에서 성능을 개선시키기 위해 증가된 작동 주파수에서 작동하도록 코어(들)의 P-상태를 구성하는 것 에 응답하여, 멀티코어 프로세서는 블록에서 코어별로 언코어(들)의 작동 주파수를 증가시킬지 여부 를 결정한다. 블록에서, 멀티코어 프로세서가 언코어별로 언코어(들)의 작동 주파수를 증가시키지 않는 것으로 결정하면, 제어는 CLM별로 CLM(들)의 작동 주파수를 증가시킬지 여부를 결정하는 블록으로 진행한다. 블록에서, 멀티코어 프로세서가 언코어별로 언코어(들)의 작동 주파수를 증가시키기로 결정하면, 블록에서, 멀티코어 프로세서는 처리량을 개선시키고 지연시간을 감소시키기 위해 증가된 작동 주파수에서 작동하도록 언코어(들)을 구성한다. 예를 들어, 코어 구성기는 제2 코어(810N)에 대응하 는 도 8의 언코어 로직의 인스턴스의 UCLK 주파수를 증가시킬 수 있다. 블록에서 처리량을 개선시키고 지연시간을 감소시키기 위해 증가된 작동 주파수에서 작동하도록 언코어 (들)을 구성하는 것에 응답하여, 멀티코어 프로세서는 블록에서 CLM별로 CLM(들)의 작동 주파수를 증가시킬지 여부를 결정한다. 블록에서, 멀티코어 프로세서가 CLM별로 CLM(들)의 작동 주파수를 증 가시키지 않기로 결정하면, 제어는 실행할 추가적인 네트워크 기능(들)이 있는지 여부를 결정하는 블록으 로 진행한다. 블록에서, 멀티코어 프로세서가 CLM별로 CLM(들)의 작동 주파수를 증가시키기로 결정 하면, 블록에서, 멀티코어 프로세서는 처리량을 개선시키고 지연시간을 감소시키기 위해 증가된 작 동 주파수에서 작동하도록 CLM(들)을 구성한다. 예를 들어, 코어 구성기는 제2 코어(810N)에 대응하는 도 8의 CLM의 인스턴스의 UCLK 주파수를 증가시킬 수 있다. 블록에서 처리량을 개선시키고 지연시간을 감소시키기 위해 증가된 작동 주파수에서 작동하도록 CLM(들) 을 구성하는 것에 응답하여, 멀티코어 프로세서는 블록에서 실행할 추가적인 네트워크 기능(들)이 있는지를 결정한다. 예를 들어, 스케줄러는 도 5의 네트워크 워크로드들(542, 544, 546) 중 실행되어야 하는 것(들)이 더 있다고 결정할 수 있다. 블록에서, 멀티코어 프로세서가 실행할 네트워크 기능 (들)이 더 있다고 결정하면, 제어는 실행할 네트워크 기능(들)을 결정하는 블록으로 돌아가고, 그렇지 않으면 도 63의 예시적인 머신 판독 가능 명령어들이 종료된다. 도 64는 하나 이상의 머신 러닝 모델의 실행에 기초하여 워크로드 조정 가능한 CPU의 작동을 수정하도록 예시적 인 워크로드 조정 가능한 CPU를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타 내는 플로차트이다. 예를 들어, 도 64의 머신 판독 가능 명령어들은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10 의 멀티코어 프로세서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템, 도 40 및 도 41의 고객 엔터프라이즈 시스템, 도 43의 프로세서, 및/ 또는 본 명세서에서 설명되는 바와 같은 프로그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시 스템에 의해 실행될 수 있다. 도 64의 예시적인 머신 판독 가능 명령어들은 워크로드 조정 가능한 CPU가 워크로드를 실행하기 위해 멀 티코어 컴퓨팅 환경에서 프로세서에 의해 로딩될 명령어를 식별하는 블록에서 시작된다. 예를 들어, 도 8의 스케줄러는 도 8의 SSE 명령어들, AVX-512 명령어들 또는 5G-ISA 명령어들 중 어느 것(들)이, 도 5의 제1 네트워크 워크로드들, 제2 네트워크 워크로드들 또는 제3 네트워크 워크로드들 과 같은, 네트워크 워크로드를 실행하기 위해, 제1 코어(810A) 및 제2 코어(810N)와 같은, 코어들(810A 내 지 810N) 중 하나(다수)에 의해 로딩되어야 하는지를 식별할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 워크로드 파라미터들을 결정한다. 예를 들어, 도 8의 전력 버짓 분석기는 제1 코어(810A), 제2 코어(810N), 및/또는, 보다 일반적으로, 프로세서와 연관된 지연시간, 전력 소비, 및/또는 처리량을 포함할 수 있는 워크로드 파라미터들을 도 8의 PMU로부터 획득할 수 있다. 일부 예들에서, 도 8의 코어 구성기는 제1 코어(810A) 및 제2 코어(810N)에 질의하는 것에 의해 및/또는 도 8의 메모리 내의 구성(들)을 질의하는 것에 의해 제1 코어(810A) 및 제2 코어(810N)의 구성을 결 정할 수 있다. 일부 예들에서, 도 8의 전력 버짓 분석기는 제1 코어(810A)의 지연시간, 전력 소비, 및/또 는 처리량을 제1 코어(810A)의 구성과 연관시키는 것에 의해 제1 코어(810A)의 워크로드 파라미터들을 결정할 수 있다. 일부 예들에서, 전력 버짓 분석기는 제2 코어(810N)의 지연시간, 전력 소비, 및/또는 처리량을 제2 코어(810N)의 구성과 연관시키는 것에 의해 제2 코어(810N)의 워크로드 파라미터들을 결정할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 적용 비율을 결정하기 위해 머신 러닝 모델을 실행한다. 예를 들 어, 전력 버짓 분석기는 워크로드 파라미터들, 코어들(810A 내지 810N) 중 하나(다수)의 구성, 코어들 (810A 내지 810N) 중 하나(다수)에 의해 로딩될 명령어 등, 및/또는 이들의 조합을 머신 러닝 모델 입력들로 하 여 도 8의 머신 러닝 모델(들)을 실행할 수 있다. 일부 그러한 예들에서, 전력 버짓 분석기는 코어 들(810A 내지 810N) 중 하나(다수), 도 8의 언코어 로직 중 하나(다수), 및/또는 도 8의 CLM 로직 중 하나(다수)에 적용될 적용 비율을 나타낼 수 있는 출력들을 생성하기 위해 머신 러닝 모델(들)을 실행 할 수 있다. 예를 들어, 출력들은, 적용될 때, 전력 소비 임계값을 초과하지 않고, 따라서, 전력 소비 임계값 을 충족시키지 않는 적용 비율을 구현할 수 있는 제1 코어(810A), CLM 로직 중 제1의 것, 언코어 로직 중 제1의 것 등의 구성을 포함할 수 있다. 일부 예들에서, 출력들은 전력 버짓 분석기가 제1 코어 (810A), CLM 로직의 제1의 것, 언코어 로직 중 제1 것의 구성들로 해석하고, 변환하며/하거나 달리 전환(translate)할 수 있는 적용 비율을 포함할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 적용 비율에 기초하여 전력 소비 임계값이 충족되는지 여부를 결 정한다. 예를 들어, 전력 버짓 분석기는 적용 비율에 기초하여 프로세서 또는 그의 부분(들)을 구성 하는 것이 프로세서 또는 그의 부분(들)의 TDP를 위반(예를 들면, 초과)하는지 여부를 결정할 수 있다. 블록에서, 워크로드 조정 가능한 CPU가 적용 비율에 기초하여 전력 소비 임계값이 충족되지 않는다고 결 정하면, 제어는 적용 비율에 기초하여 프로세서의 하나 이상의 코어를 구성하는 블록으로 진행한다. 블 록에서, 워크로드 조정 가능한 CPU가 적용 비율에 기초하여 전력 소비 임계값이 충족된다고 결정하면, 블 록에서, 워크로드 조정 가능한 CPU는 전력 소비를 감소시키기 위해 적용 비율을 조정한다. 예를 들어, 전력 버짓 분석기는 프로세서 또는 그의 부분(들)의 TDP를 위반하는 것을 피하도록 전력 소비를 감소 시키기 위해 제1 코어(810A), 제1 CLM 로직, 또는 제1 언코어 로직 중 적어도 하나의 작동 주파수를 감소시키도록 코어 구성기에 요청할 수 있다.블록에서, 워크로드 조정 가능한 CPU는 적용 비율에 기초하여 프로세서의 하나 이상의 코어를 구성한다. 예를 들어, 코어 구성기는 (i) 머신 러닝 모델(들)의 출력들에 의해 표시되는 적용 비율 또는 (ii) 프로세서 또는 그의 부분(들)의 TDP를 초과하는 것을 피하도록 감소된 적용 비율에 기초하여 제1 코어 (810A)를 구성할 수 있다. 일부 예들에서, 제1 코어(810A)의 구성들은 작동 주파수의 증가 또는 감소를 포함할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 적용 비율에 기초하여 프로세서의 언코어 로직 및/또는 CLM 로직 을 구성한다. 예를 들어, 코어 구성기는 (i) 머신 러닝 모델(들)의 출력들에 의해 표시되는 적용 비 율 또는 (ii) 프로세서 또는 그의 부분(들)의 TDP를 초과하는 것을 피하도록 감소된 적용 비율에 기초하여 제1 코어(810A)에 대응하는 제1 CLM 로직 및/또는 제1 코어(810A)에 대응하는 제1 언코어 로직을 구 성할 수 있다. 일부 예들에서, 제1 CLM 로직 및/또는 제1 언코어 로직의 구성들은 작동 주파수의 증 가 또는 감소를 포함할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 구성들에 기초하여 워크로드를 실행한다. 예를 들어, 제1 코어 (810A), 제1 CLM 로직, 및/또는 제1 언코어 로직은, 작동 주파수의 변화들과 같은, 구성들에 기초하 여 워크로드를 실행할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 실행에 기초하여 머신 러닝 모델을 재트레이닝시킨다. 예를 들어, PMU는 구성들에 기초하여 워크로드를 실행하는 제1 코어(810A), 제1 CLM 로직, 및/또는 제1 언 코어 로직과 연관된 워크로드 파라미터들을 결정할 수 있다. 일부 예들에서, 전력 버짓 분석기는 머 신 러닝 모델(들)로 하여금 구성들, 워크로드 파라미터들, 워크로드, 제1 코어(810A)에 의해 로딩되는 명 령어 등, 및/또는 이들의 조합을 포함할 수 있는 트레이닝 데이터에 기초하여 재트레이닝하도록 하고/하거나 그 렇게 하도록 다른 방식으로 머신 러닝 모델(들)에 요청한다. 유리하게도, 머신 러닝 모델(들)의 재 트레이닝은, 프로세서 또는 그의 부분(들)의 TDP를 위반하지 않으면서, 성능 및/또는 처리량을 증가시키고 지연시간을 감소시키는 등의 적용 비율을 결정하기 위해 머신 러닝 모델(들)의 정확도를 개선시킬 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 원격 측정 데이터를 컴퓨팅 시스템에 보고한다. 예를 들어, 프로 세서는 원격 측정 데이터를 도 40의 제조업체 엔터프라이즈 시스템 또는 고객 엔터프라이즈 시스템 중 적어도 하나에게 전송할 수 있다. 일부 그러한 예들에서, 제조업체 엔터프라이즈 시스템 또는 고객 엔터프라이즈 시스템 중 적어도 하나는 최적화할 적용 비율을 결정할 때 머신 러닝 모델의 정확도를 개선시키고/시키거나 및/또는 네트워크 워크로드들(예를 들면, 5G 네트워크 워크로드들)의 실행을 다른 방식으 로 개선시키기 위해 원격 측정 데이터에 기초하여 머신 러닝 모델을 트레이닝할 수 있다. 일부 그러한 예들에 서, 제조업체 엔터프라이즈 시스템 또는 고객 엔터프라이즈 시스템 중 적어도 하나는, 도 40의 SDSi 반도체 디바이스와 같은, 다른 프로세서들(예를 들면, 프로세서 또는 상이한 프로세서들)에 트 레이닝된 머신 러닝 모델을 제공할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 프로세서를 계속 모니터링할지 여부를 결정한다. 예를 들어, 프 로세서는 다른 워크로드가 프로세서에 의해 실행되어야 하는지 여부를 결정할 수 있다. 블록 에서, 워크로드 조정 가능한 CPU가 프로세서를 계속 모니터링하기로 결정하면, 제어는 워크로드를 실행하기 위 해 멀티코어 컴퓨팅 환경에서 프로세서에 의해 로딩될 다른 명령어를 식별하는 블록으로 돌아간다. 블록 에서, 워크로드 조정 가능한 CPU가 프로세서를 계속 모니터링하지 않기로 결정하면, 도 64의 머신 판독 가능 명령어들이 종료된다. 도 65는 하나 이상의 임계값이 충족되는지 여부에 기초하여 코어, 언코어, 또는 CLM 중 적어도 하나의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령 어들을 나타내는 플로차트이다. 예를 들어, 도 65의 머신 판독 가능 명령어들은 도 5의 제1 멀티 코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프 로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템, 도 40 및 도 41의 고객 엔터프라이즈 시스템, 도 43의 프로세 서, 및/또는 본 명세서에서 설명되는 바와 같은 프로그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다. 도 65의 예시적인 머신 판독 가능 명령어들은 워크로드 조정 가능한 CPU가 네트워크 워크로드(들)를 실행 할 네트워크 최적화된 중앙 프로세싱 유닛(CPU)의 코어(들)를 식별하는 블록에서 시작된다. 예를 들어, 도 8의 스케줄러는, 도 5의 네트워크 워크로드들(542, 544, 546) 중 하나와 같은, 네트워크 워크로드를 실 행할 프로세서의 제1 코어(810A)를 식별할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 코어(들)와 관련된 워크로드 파라미터들을 결정한다. 예를 들어, 전력 버짓 분석기, 및/또는, 보다 일반적으로, 도 8의 PCU는 제1 코어(810A), 제1 코어(810A)에 대 응하는 CLM 로직 중 제1의 것, 및/또는 제1 코어(810A)에 대응하는 언코어 로직 중 제1의 것과 연관 된 지연시간 파라미터, 전력 소비 파라미터, 또는 처리량 파라미터의 값을 포함할 수 있는 워크로드 파라미터들 을 도 8의 PMU로부터 획득할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 지연시간 임계값이 충족되는지 여부를 결정한다. 예를 들어, 전 력 버짓 분석기는 지연시간 파라미터의 값과 지연시간 임계값의 비교에 기초하여 지연시간 파라미터의 값 이 지연시간 임계값보다 작은지(예를 들면, 지연시간 임계값이 충족되지 않는지) 또는 지연시간 임계값보다 큰 지(예를 들면, 지연시간 임계값이 충족되는지)를 결정할 수 있다. 블록에서, 워크로드 조정 가능한 CPU 가 지연시간 임계값이 충족되지 않는다고 결정하면, 제어는 처리량 임계값이 충족되는지 여부를 결정하는 블록 으로 진행한다. 블록에서, 워크로드 조정 가능한 CPU가 지연시간 임계값이 충족된다고 결정하면, 블록에서, 워크로드 조정 가능한 CPU는 적용 비율 또는 지연시간을 감소시키기 위해 실행할 명령어의 유 형 중 적어도 하나를 결정한다. 예를 들어, 전력 버짓 분석기는 적용 비율을 결정하고/하거나 지연시간을 감소시키기 위해(예를 들면, 지연시간 임계값을 더 이상 충족시키지 않고/않거나 달리 초과하지 않도록 지연시 간을 감소시키기 위해) 실행할 도 8의 SSE 명령어들, AVX-512 명령어들 또는 5G-ISA 명령어들 중 하나(다수)를 식별할 수 있다. 블록에서 적용 비율 또는 지연시간을 감소시키기 위해 실행할 명령어의 유형 중 적어도 하나를 결정하는 것에 응답하여, 워크로드 조정 가능한 CPU는 블록에서 처리량 임계값이 충족되는지 여부를 결정한다. 예 를 들어, 전력 버짓 분석기는 처리량 파라미터의 값과 처리량 임계값의 비교에 기초하여 처리량 파라미터 의 값이 처리량 임계값보다 작은지(예를 들면, 처리량 임계값이 충족되지 않는지) 또는 처리량 임계값보다 큰지 (예를 들면, 처리량 임계값이 충족되는지)를 결정할 수 있다. 블록에서, 워크로드 조정 가능한 CPU가 처 리량 임계값이 충족된다고 결정하면, 제어는 전력 소비 임계값이 충족되는지 여부를 결정하는 블록으로 진행한다. 블록에서, 워크로드 조정 가능한 CPU가 처리량 임계값이 충족되지 않는다고 결정하면, 블록 에서, 워크로드 조정 가능한 CPU는 적용 비율 또는 처리량을 증가시키기 위해 실행할 명령어의 유형 중 적어도 하나를 결정한다. 예를 들어, 전력 버짓 분석기는 적용 비율을 결정하고/하거나 처리량을 증가시 키기 위해(예를 들면, 처리량 임계값을 충족시키고/시키거나 달리 초과하도록 처리량을 증가시키기 위해) 실행 할 도 8의 SSE 명령어들, AVX-512 명령어들 또는 5G-ISA 명령어들 중 하나(다수)를 식별할 수 있다. 블록에서 적용 비율 또는 처리량을 증가시키기 위해 실행할 명령어의 유형 중 적어도 하나를 결정하는 것 에 응답하여, 워크로드 조정 가능한 CPU는 블록에서 전력 소비 임계값이 충족되는지 여부를 결정한다. 예를 들어, 전력 버짓 분석기는 전력 소비 파라미터의 값과 전력 소비 임계값의 비교에 기초하여 전력 소 비 파라미터의 값이 전력 소비 임계값보다 작은지(예를 들면, 전력 소비 임계값이 충족되지 않는지) 또는 전력 소비 임계값보다 큰지(예를 들면, 전력 소비 임계값이 충족되는지)를 결정할 수 있다. 블록에서, 워크로 드 조정 가능한 CPU가 전력 소비 임계값이 충족된다고 결정하면, 제어는 적용 비율 또는 명령어 중 적어도 하나 에 기초하여 CPU를 구성하는 블록으로 진행한다. 블록에서, 워크로드 조정 가능한 CPU가 전력 소 비 임계값이 충족되지 않는다고 결정하면, 블록에서, 워크로드 조정 가능한 CPU는 적용 비율 또는 성능을 증가시키기 위해 실행할 명령어의 유형 중 적어도 하나를 결정한다. 예를 들어, 전력 버짓 분석기는 적용 비율을 결정하고/하거나 성능을 증가시키기 위해(예를 들면, 전력 소비 임계값에 이르기까지 성능을 증가시키기 위해, 전력 소비 임계값을 일시적으로 초과하도록 성능을 증가시키는 등을 위해) 실행할 도 8의 SSE 명령어들 , AVX-512 명령어들 또는 5G-ISA 명령어들 중 하나(다수)를 식별할 수 있다. 블록에서 적용 비율 또는 성능을 증가시키기 위해 실행할 명령어의 유형 중 적어도 하나를 결정하는 것에 응답하여, 워크로드 조정 가능한 CPU는 블록에서 적용 비율 또는 명령어 중 적어도 하나에 기초하여 CPU 를 구성한다. 예를 들어, 코어 구성기는, 적용 비율에 의해 표시되거나 도 5의 네트워크 워크로드들(542,544, 546) 중 하나(다수)를 실행하도록 선택되는 도 8의 SSE 명령어들, AVX-512 명령어들, 또는 5G- ISA 명령어들과 연관될 수 있는, 하나 이상의 작동 주파수로 작동하도록 제1 코어(810A), 제1 CLM 로직 , 또는 제1 언코어 로직 중 적어도 하나를 구성할 수 있다. 블록에서 적용 비율 또는 명령어 중 적어도 하나에 기초하여 CPU를 구성하는 것에 응답하여, 워크로드 조 정 가능 CPU는 네트워크 워크로드(들)를 실행한다. 예를 들어, 제1 코어(810A), 제1 CLM 로직, 또는 제1 언코어 로직 중 적어도 하나는 구성(들)에 기초하여 도 5의 네트워크 워크로드들(542, 544, 546) 중 하나 를 실행할 수 있다. 블록에서, 워크로드 조정 가능한 CPU는 CPU를 계속 모니터링할지 여부를 결정한다. 예를 들어, 스케줄러 는 코어들(810A 내지 810N) 중 하나가 도 5의 네트워크 워크로드들(542, 544, 546) 중 하나(다수)를 실행 하기 위해 도 8의 명령어들(838, 840, 842) 중 하나(다수)를 로딩했는지 여부를 결정할 수 있다. 블록에 서, 워크로드 조정 가능한 CPU가 CPU를 계속 모니터링하기로 결정하면, 제어는 네트워크 워크로드(들)를 실행할 네트워크 최적화된 CPU의 코어(들)를 식별하는 블록으로 돌아가고, 그렇지 않으면 도 65의 머신 판독 가 능 명령어들이 종료된다. 도 66 및 도 67은 워크로드에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU 를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들(6600, 6700)을 나타내는 플로차트들을 묘 사한다. 예를 들어, 도 66의 머신 판독 가능 명령어들 및/또는 도 67의 머신 판독 가능 명령어들 은 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코어 프로세서, 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코 어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1-소켓 워크로드 최적화된 프 로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41의 SDSi 반도체 디바이스 , 도 40 및 도 41의 제조업체 엔터프라이즈 시스템, 도 40 및 도 41의 고객 엔터프라이즈 시스템 , 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로그래밍 가능한 하드웨어를 포 함하는 임의의 다른 프로세서 또는 시스템에 의해 실행될 수 있다. 일부 예들에서, 도 66의 머신 판독 가능 명령어들 및/또는 도 67의 머신 판독 가능 명령어들은 도 34의 예에 묘사된 L1 기능들과 연관된 대응하는 L2 기능들을 구현할 수 있다. 도 66의 예시적인 머신 판독 가 능 명령어들은 본 명세서에서 설명되는 바와 같은 5G-ISA 명령어들(예를 들면, 복소수 산술을 실행하기 위한 5G-ISA 명령어들) 중 하나(다수)를 실행하는 것으로부터 이익을 얻을 수 있는, MU-MIMO를 위한 예시적인 다운링크(DL) MAC 스케줄러(예를 들면, L2-rt MAC 스케줄러)를 구현하도록 실행될 수 있다. 예를 들어, 도 8의 멀티코어 프로세서, 또는 본 명세서에서 설명되는 바와 같은 임의의 다른 멀티코어 프로세서, CPU 등은 DL MAC 스케줄러를 구현할 수 있다. 블록에서, DL MAC 스케줄러는 MU-MIMO 스케줄링이 수행되어야 하는지 여부를 결정한다. 블록에서, DL MAC 스케줄러가 MU-MIMO 스케줄링이 수행되어야 한다고 결정하면, 제어는 비례 공정(proportional fair, PF) 제어에 의한 UE 사전 선택을 실행하는 블록으로 진행한다. 블록에서, DL MAC 스케줄러는 물리 데이터 공유 채널(PDSCH)에 대한 사용자 선택을 실행한다. 블록 에서, DL MAC 스케줄러는 다운링크 제어 정보(DCI)에 대한 물리 다운링크 제어 채널(PDDCH) 스케줄링을 실행한다. 블록에서, DL MAC 스케줄러는 PDSCH 시간/주파수 자원 할당을 실행한다. 각각의 서브대역 및 /또는 광대역에 대해 블록들(6606, 6608, 6610)을 실행하는 것에 응답하여, 제어는 변조 및 코딩 방식(MCS) 및/ 또는 전송 블록(TB) 크기들을 계산하는 블록으로 진행한다. 블록에서, DL MAC 스케줄러가 MU-MIMO 스케줄링이 수행되지 않아야 한다고 결정하는 경우, 제어는 PDSCH 에 대한 PF 스케줄링을 실행하는 블록으로 진행한다. 블록에서, DL MAC 스케줄러는 DL DCI에 대한 PDCCH 스케줄링을 실행한다. 블록에서, DL MAC 스케줄러는 PDSCH 시간/주파수 자원 할당을 실행한다. 각각의 서브대역 및/또는 광대역에 대해 블록들(6614, 6616, 6618)을 실행하는 것에 응답하여, 제어는 MCS 및/ 또는 TB 크기들을 계산하는 블록으로 진행한다. 도 67의 예시적인 머신 판독 가능 명령어들은 도 66과 관련하여 위에서 설명된 예시적인 DL MAC 스케줄러 를 구현하기 위해 실행될 수 있다. 블록에서, DL MAC 스케줄러는 PF 가중치를 업데이트한다. 블록 에서, DL MAC 스케줄러는 PF 사전 선택을 실행한다. 예를 들어, 블록들(6702 및 6704)은 도 66의 블록을 구현할 수 있다. 블록에서, DL MAC 스케줄러는 각각의 서브대역에 대해 제로 포커싱(ZF)을 활용함으로써 MU-MIMO 및 MU- SINR(MU signal-to-interference-plus-noise ratio(SINR))에 대한 상관 사용자 선택(correlation user selection, CUS)을 실행한다. 추가적으로 또는 대안적으로, 블록에서, DL MAC 스케줄러는 각각의 서브대 역에 대해 SU-MIMO에 대한 PF를 실행할 수 있다. 블록에서, DL MAC 스케줄러는 스케줄링된 UE의 MCS 및/ 또는 TB 크기를 계산한다. 블록에서, DL MAC 스케줄러는 PF 과거 처리량을 업데이트한다. 예를 들어, 블록들(6708 및 6710)은 도 66의 블록을 구현할 수 있다. 도 68은 예시적인 시스템의 예들을 예시한다. 멀티프로세서 시스템은 포인트 투 포인트 상호연결 시스템 이고 포인트 투 포인트 상호연결부를 통해 결합되는 제1 프로세서 및 제2 프로세서를 포함하 는 복수의 프로세서들을 포함한다. 일부 예들에서, 제1 프로세서 및 제2 프로세서는 동종 (homogeneous)이다. 일부 예들에서, 제1 프로세서 및 제2 프로세서는 이종(heterogenous)이다. 예를 들어, 멀티프로세서 시스템은 도 1의 DU들, 도 1의 CU들, 도 1의 코어 서버들, 도 5의 제1 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 도 5의 제2 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 도 6의 제3 멀티코어 컴퓨팅 시스템 또는 그의 부분(들), 및/또는 도 7의 제4 멀티코어 컴퓨팅 시스템 또는 그의 부분(들)을 구현할 수 있다. 일부 예들에서, 제1 프로세서 및/또는 제2 프로세서 는 도 5의 제1 멀티코어 CPU, 도 5의 제2 멀티코어 CPU, 도 6 및/또는 도 7의 멀티코어 CPU, 도 8의 멀티코어 프로세서, 도 10의 멀티코어 프로세서, 도 11의 멀티코어 프로세서 , 도 12의 제1 CPU, 도 12의 제2 CPU, 도 12의 제3 CPU, 도 13의 멀티코어 CPU, 도 15의 멀티코어 CPU, 도 31a 내지 도 31c의 워크로드 조정 가능한 CPU, 도 39의 1- 소켓 워크로드 최적화된 프로세서, 도 39의 2-소켓 워크로드 최적화된 프로세서, 도 40 및 도 41의 SDSi 반도체 디바이스, 도 40 및 도 41의 제조업체 엔터프라이즈 시스템, 도 40 및 도 41의 고객 엔터프라이즈 시스템, 도 43의 프로세서, 및/또는 본 명세서에서 설명되는 바와 같은 프로그래밍 가능한 하드웨어를 포함하는 임의의 다른 프로세서 또는 시스템을 구현할 수 있다. 예를 들어, 멀티프로세서 시스템은 5G 네트워크들에 관련된 통신 워크로드들의 프로세싱을 개선시키기 위해 본 명세서에서 설명되 는 바와 같은 5G-ISA 명령어들을 실행할 수 있다. 프로세서들(6870 및 6880)은, 제각기, 통합 메모리 제어기(IMC) 유닛들 회로부(6872 및 6882)를 포함하는 것으 로 도시되어 있다. 프로세서는 그의 상호연결 제어기 유닛들의 일부로서 P-P(point-to-point) 인터페이 스들(6876 및 6878)을 또한 포함하고; 유사하게, 제2 프로세서는 P-P 인터페이스들(6886 및 6888)을 포함 한다. 프로세서들(6870, 6880)은 P-P 인터페이스 회로들(6878, 6888)을 사용하여 P-P(point-to-point) 상호연 결부를 통해 정보를 교환할 수 있다. IMC들(6872 및 6882)은 프로세서들(6870, 6880)을 각자의 메모리들, 즉 메모리 및 메모리에 결합시키며, 이들 메모리는 각자의 프로세서들에 로컬로 부착된 메인 메모리의 부분들일 수 있다. 프로세서들(6870, 6880)은 각각 포인트 투 포인트 인터페이스 회로들(6876, 6894, 6886, 6898)을 사용하여 개별 P-P 상호연결부들(6852, 6854)을 통해 칩세트와 정보를 교환할 수 있다. 칩세트는 선택적으로 고 성능 인터페이스를 통해 코프로세서와 정보를 교환할 수 있다. 일부 예들에서, 코프로세서 는, 예를 들어, 고처리량 MIC 프로세서, 네트워크 또는 통신 프로세서, 압축 엔진, 그래픽 프로세서, GPGPU, 임 베디드 프로세서 등과 같은 특수 목적 프로세서이다. 프로세서가 저전력 모드로 전환되는 경우 어느 한 프로세서 또는 양쪽 프로세서들의 로컬 캐시 정보가 공유 캐 시에 저장될 수 있도록, 공유 캐시(도시되지 않음)는 어느 한 프로세서(6870, 6880) 내에 포함될 수 있거나 양 쪽 프로세서들의 외부에 있지만, P-P 상호연결부를 통해 프로세서들과 연결될 수 있다. 칩세트는 인터페이스를 통해 제1 상호연결부에 결합될 수 있다. 일부 예들에서, 제1 상호연 결부는 PCI(Peripheral Component Interconnect) 상호연결부, 또는 PCI Express 상호연결부 또는 다른 I/O 상호연결부와 같은 상호연결부일 수 있다. 일부 예들에서, 상호연결부들 중 하나는 프로세서들(6870, 6880) 및/또는 코프로세서와 관련하여 전력 관리 동작들을 수행하기 위한 회로부, 소프트웨어, 및/또는 펌웨어를 포함할 수 있는 전력 제어 유닛(PCU)에 결합된다. 예를 들어, PCU는 도 8의 PCU를 구현할 수 있다. PCU는 전압 조정기로 하여금 적절한 조정된 전압을 생성하게 하기 위해 전압 조정기에 제어 정보를 제공한다. PCU는 또한 생성되는 작동 전압을 제어하기 위한 제어 정보를 제공한다. 다양한 예들에서, PCU는 하드웨어 기반 전력 관리를 수행하기 위한 다양한 전력 관리 논리 유닛들(회로부)을 포함할 수 있다. 그러한 전력 관리는 완전히 프로세서로 제어될 수 있고(예를 들면, 다양한 프로세서 하드웨어에 의해 제어될 수 있고, 워크로드 및/또는 전력, 열 또는 다른 프로세서 제약들에 의해 트리거될 수 있음)/있거나 전력 관리는 (플랫폼 또는 전력 관리 소스 또는 시스템 소프트웨어와 같은) 외부 소스들에 응답하여 수행될 수 있다. PCU는 프로세서 및/또는 프로세서와 별개의 로직으로서 존재하는 것으로 예시되어 있다. 다 른 경우에, PCU는 프로세서(6870 또는 6880)의 코어들(도시되지 않음) 중 주어진 하나 이상에서 실행될 수 있다. 일부 경우에, PCU는 마이크로컨트롤러(전용 또는 범용) 또는, 때때로 P 코드라고 지칭되는, 자 체 전용 전력 관리 코드를 실행하도록 구성된 다른 제어 로직으로서 구현될 수 있다. 또 다른 예들에서, PCU에 의해 수행될 전력 관리 동작들은 프로세서 외부에서, 예컨대, 별도의 전력 관리 집적 회로(PMIC) 또는 프로세서 외부의 다른 컴포넌트를 통해, 구현될 수 있다. 또 다른 예들에서, PCU에 의해 수행될 전 력 관리 동작들은 BIOS 또는 다른 시스템 소프트웨어 내에서 구현될 수 있다. 다양한 I/O 디바이스들은, 제1 상호연결부를 제2 상호연결부에 결합시키는 상호연결부(버스) 브리지와 함께, 제1 상호연결부에 결합될 수 있다. 일부 예들에서, 코프로세서들, 고처리량 MIC 프로세서들, GPGPU들, (예를 들면, 그래픽 가속기들 또는 DSP 유닛들과 같은) 가속기들, FPGA들, 또는 임의의 다른 프로세서와 같은, 하나 이상의 추가적인 프로세서(들)가 제1 상호연결부에 결합된다. 일부 예들에서, 제2 상호연결부는 LPC(low pin count) 상호연결부일 수 있다. 예를 들어, 키보드 및/또는 마 우스, 통신 디바이스들 및 저장 유닛 회로부를 포함한, 다양한 디바이스들이 제2 상호연결부 에 결합될 수 있다. 일부 예들에서, 저장 유닛 회로부는 명령어들/코드 및 데이터를 포함할 수 있는 디스크 드라이브 또는 다른 대용량 저장 디바이스일 수 있다. 게다가, 오디오 I/O는 제2 상호연 결부에 결합될 수 있다. 위에서 설명된 포인트 투 포인트 아키텍처 이외의 다른 아키텍처들이 가능하다 는 점에 유의한다. 예를 들어, 포인트 투 포인트 아키텍처 대신에, 멀티프로세서 시스템과 같은 시스템 은 멀티 드롭 상호연결부 또는 다른 그러한 아키텍처를 구현할 수 있다. 프로세서 코어들은 상이한 방식들로, 상이한 목적들을 위해 그리고 상이한 프로세서들에 구현될 수 있다. 예를 들어, 그러한 코어들의 구현들은: 1) 범용 컴퓨팅을 위해 의도된 범용 순차 코어; 2) 범용 컴퓨팅을 위해 의도 된 고성능 범용 비순차 코어; 3) 주로 그래픽 및/또는 과학 (처리량) 컴퓨팅을 위해 의도된 특수 목적 코어를 포함할 수 있다. 상이한 프로세서들의 구현들은: 1) 범용 컴퓨팅을 위해 의도된 하나 이상의 범용 순차 코어 및/또는 범용 컴퓨팅을 위해 의도된 하나 이상의 범용 비순차 코어를 포함하는 CPU; 및 2) 주로 그래픽 및/또는 과학 (처리량)을 위해 의도된 하나 이상의 특수 목적 코어를 포함하는 코프로세서를 포함할 수 있다. 그러한 상이한 프로세서들은, 1) CPU와 별개의 칩 상의 코프로세서; 2) CPU와 동일한 패키지에 있는 별개의 다이 상의 코프로세서; 3) CPU와 동일한 다이 상의 코프로세서(이 경우에, 그러한 코프로세서는 때때로, 통합 그래픽 및/ 또는 과학 (처리량) 로직과 같은, 특수 목적 로직이라고, 또는 특수 목적 코어들이라고 지칭됨); 및 4) 기술된 CPU와 동일한 다이 상에 앞서 기술된 코프로세서, 및 추가적인 기능을 포함할 수 있는 시스템 온 칩(때때로 애 플리케이션 코어(들) 또는 애플리케이션 프로세서(들)라고 지칭됨)을 포함할 수 있는, 상이한 컴퓨터 시스템 아 키텍처들에 이르게 한다. 예시적인 코어 아키텍처들이 다음에 설명되고, 예시적인 프로세서들 및 컴퓨터 아키 텍처들에 대한 설명들이 뒤따른다. 도 69는 도 8의 예시적인 PCU, 및/또는, 보다 일반적으로, 도 8의 프로세서, 도 68의 제1 프로세서 및/또는 제2 프로세서, 및/또는, 보다 일반적으로, 도 68의 멀티프로세서 시스템, 및/또는 본 명세서에서 설명되는 바와 같은 임의의 다른 프로세서(예를 들면, 도 5의 멀티코어 CPU, 도 40의 SDSi 반도체 디바이스 등)를 구현하기 위해 도 55 내지 도 67의 명령어들을 실행하도록 구성된 예시적인 프로 세서 플랫폼의 블록 다이어그램이다. 프로세서 플랫폼은, 예를 들어, 중앙 유닛, 분산 유닛, 코어 디바이스, 서버(예를 들면, 컴퓨팅 서버, 코어 서버, 에지 서버 등), 개인용 컴퓨터, 워크스테이션, 자가 학습 머신(예를 들면, 신경 네트워크) 또는 임의의 다른 유형의 컴퓨팅 디바이스일 수 있다. 예시된 예의 프로세서 플랫폼은 프로세서를 포함한다. 예시된 예의 프로세서는 하드웨어이 다. 예를 들어, 프로세서는 임의의 원하는 패밀리 또는 제조업체로부터의 하나 이상의 집적 회로, 로직 회로, 마이크로프로세서, GPU, DSP, 또는 제어기에 의해 구현될 수 있다. 하드웨어 프로세서는 반도체 기반(예 를 들면, 실리콘 기반) 디바이스일 수 있다. 이 예에서, 프로세서는 도 8의 예시적인 스케줄러, 예 시적인 전력 버짓 분석기, 및 예시적인 코어 구성기를 구현한다. 예시된 예의 프로세서는 로컬 메모리(예를 들면, 캐시)를 포함한다. 이 예에서, 로컬 메모리 는 도 8의 예시적인 SSE 명령어들, 예시적인 AVX-512 명령어들, 예시적인 5G-ISA 명령어들 , 및 머신 러닝 모델(들)을 구현한다. 예를 들어, 로컬 메모리는 도 8의 메모리를 구현 할 수 있다. 예시된 예의 프로세서는 버스를 통해 휘발성 메모리 및 비휘발성 메모리(691 6)를 포함하는 메인 메모리와 통신한다. 휘발성 메모리는 SDRAM(Synchronous Dynamic Random Access Memory), DRAM(Dynamic Random Access Memory), RDRAM®(RAMBUS® Dynamic Random Access Memory), 및/또는 임의의 다른 유형의 랜덤 액세스 메모리 디바이스에 의해 구현될 수 있다. 비휘발성 메모리는 플래시 메 모리 및/또는 임의의 다른 원하는 유형의 메모리 디바이스에 의해 구현될 수 있다. 메인 메모리(6914, 6916)에 대한 액세스는 메모리 제어기에 의해 제어된다. 예시된 예의 프로세서 플랫폼은 인터페이스 회로를 또한 포함한다. 인터페이스 회로는, 이 더넷 인터페이스, USB, 블루투스® 인터페이스, NFC(near field communication) 인터페이스, 및/또는 PCI express 인터페이스와 같은, 임의의 유형의 인터페이스 표준에 의해 구현될 수 있다. 예시된 예에서, 하나 이상의 입력 디바이스가 인터페이스 회로에 연결된다. 입력 디바이스 (들)는 사용자가 데이터 및/또는 커맨드들을 프로세서에 입력할 수 있게 한다. 입력 디바이스 (들)는, 예를 들어, 오디오 센서, 마이크로폰, 카메라(스틸 또는 비디오), 키보드, 버튼, 마우스, 터치스크린, 트랙 패드, 트랙볼, 아이소포인트(isopoint) 디바이스, 및/또는 음성 인식 시스템에 의해 구현될 수 있다. 하나 이상의 출력 디바이스가 또한 예시된 예의 인터페이스 회로에 연결된다. 출력 디바이스들 은, 예를 들어, 디스플레이 디바이스들(예를 들면, LED(light emitting diode), OLED(organic light emitting diode), LCD(liquid crystal display), CRT(cathode ray tube) 디스플레이, IPS(in-place switching) 디스플레이, 터치스크린 등), 촉각 출력 디바이스, 프린터 및/또는 스피커에 의해 구현될 수 있다. 예시된 예의 인터페이스 회로는, 따라서, 전형적으로 그래픽 드라이버 카드, 그래픽 드라이버 칩 및/또는 그래픽 드라이버 프로세서를 포함한다. 예시된 예의 인터페이스 회로는 네트워크를 통한 외부 머신들(예를 들면, 임의의 종류의 컴퓨팅 디 바이스들)과의 데이터 교환을 용이하게 하기 위해 송신기, 수신기, 트랜시버, 모뎀, 주택용 게이트웨이, 무선 액세스 포인트, 및/또는 네트워크 인터페이스와 같은 통신 디바이스를 또한 포함한다. 일부 예들에서, 네트워 크는 도 2 내지 도 4와 관련하여 위에서 설명된 바와 같은 하나 이상의 에지 클라우드에 의해 구현될 수 있다. 통신은, 예를 들어, 이더넷 연결, DSL(digital subscriber line) 연결, 전화선 연결, 동축 케이블 시스 템, 위성 시스템, 가시선 무선 시스템, 셀룰러 전화 시스템 등을 통할 수 있다. 예시된 예의 프로세서 플랫폼은 소프트웨어 및/또는 데이터를 저장하기 위한 하나 이상의 대용량 저장 디 바이스를 또한 포함한다. 그러한 대용량 저장 디바이스들의 예들은 플로피 디스크 드라이브들, 하 드 드라이브 디스크들, 콤팩트 디스크 드라이브들, 블루레이 디스크 드라이브들, RAID(redundant array of independent disks) 시스템들, 및 DVD 드라이브들을 포함한다. 도 55 내지 도 67의 머신 실행 가능 명령어들은 대용량 저장 디바이스에, 휘발성 메모리에, 비휘발성 메모리에, 및/또는 CD 또는 DVD와 같은 이동식 비일시적 컴퓨터 판독 가능 매체에 저장될 수 있 다. 추가적으로 또는 대안적으로, 예시적인 SSE 명령어들, 예시적인 AVX-512 명령어들, 예시적인 5G-ISA 명령어들, 및/또는 예시적인 머신 러닝 모델(들) 중 하나 이상이 휘발성 메모리, 비휘 발성 메모리, 대용량 저장 디바이스, 및/또는 코딩된 명령어들에 저장될 수 있다. 도 69의 예시된 예의 프로세서 플랫폼은 예시적인 GPU(graphics processing unit), 예시적인 VPU(vision processing unit), 및 예시적인 신경 네트워크 프로세서를 포함한다. 이 예에서, GPU, VPU 및 신경 네트워크 프로세서는 버스를 통해, 휘발성 메모리, 비휘발성 메모리 등과 같은, 프로세서 플랫폼의 상이한 하드웨어와 통신한다. 이 예에서, 신경 네트워크 프 로세서는 ML 모델(들)에 의해 구현될 수 있는, 신경 네트워크와 같은, AI 모델을 실행하는 데 사용 될 수 있는 임의의 원하는 제품군 또는 제조업체로부터의 하나 이상의 집적 회로, 로직 회로, 마이크로프로세서, GPU, DSP, 또는 제어기에 의해 구현될 수 있다. 일부 예들에서, 도 8의 스케줄러, 전 력 버짓 분석기 및/또는 코어 구성기 중 하나 이상은 프로세서 대신에 또는 프로세서에 추가하여 GPU, VPU 또는 신경 네트워크 프로세서 중 적어도 하나에 의해, 그 내에서, 또는 그를 사용하여 구현될 수 있다. 추가적으로 또는 대안적으로, 프로세서 플랫폼은, 머신 러닝 가속기 또 는 프로세서, 인공 지능 가속기 또는 프로세서, DSP, 벡터 프로세서 또는 프로세싱 유닛, 전자 제어 유닛(ECU) (예를 들면, 운전, 주차 또는 다른 일반적인 자동차 활동들과 같은 차량 기능들을 실시하기 위해 차량에 포함될수 있는 ECU) 등, 및/또는 임의의 다른 유형의 가속기 또는 프로세서와 같은, 상이한 유형(들)의 프로세서들을 포함할 수 있다. 도 70은 도 8의 예시적인 스케줄러, 예시적인 전력 버짓 분석기, 예시적인 코어 구성기, 예시적 인 메모리, 예시적인 SSE 명령어들, 예시적인 AVX-512 명령어들, 예시적인 5G-ISA 명령어들 , 및/또는 예시적인 머신 러닝 모델(들), 및/또는, 보다 일반적으로, 도 8의 예시적인 PCU를 구 현하기 위해 도 55 내지 도 67의 예시적인 명령어들을 실행할 수 있는 예시적인 시스템(예를 들면, 단일 소켓 시스템, 듀얼 소켓 시스템 등)이다. 도 70의 예시된 예에서, 시스템은, 서버(예를 들면, 단일 소 켓 서버, 듀얼 소켓 서버, 1U 서버, 2U 서버 등)와 같은, 프로세서 플랫폼(예를 들면, 멀티코어 컴퓨팅 시스템, 멀티코어 프로세서 시스템)이다. 예를 들어, 시스템은 도 1의 DU들 중 하나, 도 1의 CU들 중 하나, 도 1의 코어 디바이스들 중 하나 등을 구현할 수 있다. 대안적으로, 시스템은 임의의 다른 유형의 컴퓨팅 디바이스 또는 컴퓨팅 시스템일 수 있다. 예시된 예의 시스템은, 캐비닛(예를 들면, 서버 캐비닛, 랙 장착형 캐비닛 등)에 결합되고/되거나 다른 방식으로 통합될 수 있는 예시적인 섀시를 포함한 다. 대안적으로, 시스템은 MEC 환경의 임의의 다른 위치에 통합될 수 있다. 도시된 예에서, 시스템은 도 69의 복수의 프로세서들, 도 69의 복수의 인터페이스들, 및 도 8의 복수의 PCU들을 포함한다. 예를 들어, 복수의 인터페이스들은 도 69의 네트워크를 통해 외부 머신들(예를 들면, 임의의 종류의 컴퓨팅 디바이스들)과의 데이터 교환을 용이하게 할 수 있다. 대안적으 로, 도 70에 묘사된 것보다 더 적은 또는 더 많은 프로세서들, 인터페이스들, 및/또는 PCU가 사용될 수 있다. 시스템은 도 69와 관련하여 위에서 논의된 임의의 다른 컴포넌트 또는 회로부 중 하나 이상을 또한 포함할 수 있다. 도 68의 예시적인 코드 및/또는 도 69의 예시적인 머신 판독 가능 명령어들과 같은 소프트웨어를 제3자에게 배포하기 위한 예시적인 소프트웨어 배포 플랫폼을 예시하는 블록 다이어그램이 도 71에 예시 되어 있다. 예시적인 소프트웨어 배포 플랫폼은 소프트웨어를 저장하고 다른 컴퓨팅 디바이스들에게 전 송할 수 있는 임의의 컴퓨터 서버, 데이터 설비, 클라우드 서비스 등에 의해 구현될 수 있다. 제3자는 소프트 웨어 배포 플랫폼을 소유 및/또는 운영하는 엔티티의 고객일 수 있다. 예를 들어, 소프트웨어 배포 플랫폼을 소유 및/또는 운영하는 엔티티는 도 68의 예시적인 코드 및/또는 도 69의 예시적인 컴퓨터 판독 가능 명 령어들과 같은 소프트웨어의 개발자, 판매자 및/또는 라이선스 제공자(licensor)일 수 있다. 제3자는 사 용 및/또는 재판매 및/또는 재라이선싱(sub-licensing)을 위해 소프트웨어를 구매 및/또는 라이선싱하는 소비자, 사용자, 소매업체, OEM 등일 수 있다. 예시된 예에서, 소프트웨어 배포 플랫폼은 하나 이상의 서버 및 하나 이상의 저장 디바이스를 포함한다. 저장 디바이스들은, 위에서 설명된 바와 같이, 도 55 내지 도 67의 예시적인 컴퓨터 판독 가능 명령어들(5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700)에 대응할 수 있는, 코드 및/또는 머신 판독 가능 명령어들을 저장한다. 예시적 인 소프트웨어 배포 플랫폼의 하나 이상의 서버는, 위에서 설명된 예시적인 네트워크들(104, 106, 107, 118, 210, 6926) 중 임의의 것 및/또는 인터넷 중 임의의 하나 이상에 대응할 수 있는, 네트워크와 통신 한다. 일부 예들에서, 하나 이상의 서버는 상거래의 일부로서 요청 당사자에게 소프트웨어를 전송하라는 요청 에 응답한다. 소프트웨어의 전달, 판매 및/또는 라이선스에 대한 지불은 소프트웨어 배포 플랫폼의 하나 이상 의 서버에 의해 및/또는 제3자 결제 엔티티를 통해 처리될 수 있다. 서버들은 구매자 및/또는 라이선스 제공자 가 소프트웨어 배포 플랫폼으로부터 머신 판독 가능 명령어들(6830, 6932)을 다운로드할 수 있게 한다. 예를 들어, 도 55 내지 도 67의 예시적인 컴퓨터 판독 가능 명령어들(5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700)에 대응할 수 있는 소프트웨어는 도 8의 PCU를 구현하기 위해 코드 및/또는 머신 판독 가능 명령어들을 실행하는 예시적인 멀티 프로세서 시스템(들), 도 69의 예시적인 프로세서 플랫폼(들) 및/또는 도 70의 시스템(들)으로 다운로드될 수 있다. 일부 예들에서, 소프트웨어 배포 플랫폼의 하나 이상의 서버는 개선 사항, 패치, 업데이트 등이 최종 사용자 디바이스들에서의 소프트웨어에 배포되고 적용되도록 보장하기 위해 소프트웨어(예를 들면, 예시적인 코드 및/또는 도 69의 예시적인 머신 판독 가능 명령어들)에 대한 업데이트들을 주기적으로 제공, 전송 및/또는 강제한다. 전술한 내용으로부터, 5G 네트워크 워크로드와 같은, 워크로드에 기초하여 하드웨어를 최적화하는 예시적인 시 스템들, 방법들, 장치들 및 제조 물품들이 개시되었다는 것이 이해될 것이다. 위에서 설명된 예시적인 시스템 들, 방법들, 장치들, 및 제조 물품들은 CPU 내의 코어들의 서브세트에서 AVX512-FP16 ISA 신호 프로세싱 ISA 명 령어들과 연관된 코어별 주파수들을 최적화하는 것에 의해 동일한 CPU로 5G RAN 및 5G 코어를 지원할 수 있다.전술한 예시적인 시스템들, 방법들, 장치들, 및 제조 물품들은 5G 코어 UPF 및 5G vRAN-DU 및 5G vRAN-CU 네트 워크 노드들 모두에 대해 동일한 CPU의 사용을 용이하게 할 수 있다. 개시된 시스템들, 방법들, 장치들, 및 제 조 물품들은 증가된 성능으로 네트워크 워크로드들을 프로세싱하는 것에 의해 컴퓨팅 디바이스를 사용하는 효율 성을 개선시킨다. 개시된 시스템들, 방법들, 장치들, 및 제조 물품들은 그에 따라 컴퓨터의 기능의 하나 이상 의 개선 사항(들)에 관한 것이다. 하드웨어를 워크로드 최적화하기 위한 예시적인 방법들, 장치들, 시스템들, 및 제조 물품들이 본 명세서에서 개 시된다. 추가의 예들 및 이들의 조합들은 다음과 같은 것들을 포함한다: 예 1은 워크로드의 실행을 구성하기 위한 장치를 포함하고, 이 장치는 워크로드를 실행하기 위해 프로세서의 하 나 이상의 코어에 의해 실행될 명령어에 기초하여 적용 비율을 결정하고, 워크로드의 실행 이전에, (i) 적용 비 율에 기초하여 프로세서의 하나 이상의 코어 또는 (ii) 적용 비율에 기초하여 프로세서의 언코어 로직 중 적어 도 하나를 구성하기 위한 전력 제어 회로부; 및 하나 이상의 코어 또는 언코어 로직 중 적어도 하나를 사용하여 워크로드의 실행을 개시하기 위한 실행 회로부를 포함한다. 예 2에서, 예 1의 주제는 전력 제어 회로부는 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하고 - 제1 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -, 언코어 로직의 제2 작 동 주파수를 식별하며 - 제2 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함됨 -, 전력 제어 회로부는 (i) 제1 작동 주파수 또는 제2 작동 주파수 중 적어도 하나에 기초하여 프로세서의 하나 이상의 코어, 또는 (ii) 제1 작동 주파수 또는 제2 작동 주파수 중 적어도 하나에 기초하여 프로세서의 언코어 로직 중 적어도 하나를 구성하는 것을 임의로 포함할 수 있다. 예 3에서, 예 1 및 예 2의 주제는 전력 제어 회로부는 적용 비율과 연관된 전력 소비가 임계값을 충족시킨다는 결정에 응답하여 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성하는 것을 임의로 포함할 수 있다. 예 4에서, 예 1 내지 예 3의 주제는 전력 제어 회로부는 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키 기 위해 하나 이상의 코어의 제1 작동 주파수를 감소시키고, 언코어 로직의 적어도 일부와 연관된 제2 전력 소 비를 증가시키기 위해 언코어 로직의 적어도 일부의 제2 작동 주파수를 증가시키며 - 제2 전력 소비의 증가는 프로세서의 처리량을 증가시킴 -, 전력 제어 회로부는 제1 작동 주파수의 감소 또는 제2 작동 주파수의 증가 중 적어도 하나에 기초하여 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성하는 것을 임의로 포함할 수 있다. 예 5에서, 예 1 내지 예 4의 주제는 전력 제어 회로부는 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파 수로 조정하는 것, 또는 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 - 제2 작동 주파수 또는 제4 작동 주파수 중 적어도 하나는 적용 비율과 연관됨 - 중 적어도 하나를 위한 것이고, 전력 제어 회로 부는 제1 작동 주파수를 제2 작동 주파수로 조정하는 것 또는 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 중 적어도 하나에 기초하여 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구 성하는 것을 임의로 포함할 수 있다. 예 6에서, 예 1 내지 예 5의 주제는 명령어는 제1 명령어이고, 워크로드는 제1 워크로드이며, 적용 비율은 제1 적용 비율이고, 하나 이상의 코어는 하나 이상의 제1 코어이며, 언코어 로직은 제1 언코어 로직이고, 전력 제어 회로부는 제2 워크로드를 실행하기 위해 프로세서의 하나 이상의 제2 코어에 의해 실행될 제2 명령어에 기초하 여 제2 적용 비율을 결정하고, 제2의 것의 실행 이전에, (i) 제2 적용 비율에 기초하여 프로세서의 하나 이상의 제2 코어 또는 (ii) 제2 적용 비율에 기초하여 프로세서의 제2 언코어 로직 중 적어도 하나를 구성하며, 실행 회로부는 하나 이상의 제2 코어 또는 제2 언코어 로직 중 적어도 하나를 사용하여 제2 워크로드의 실행을 개시 하고, 하나 이상의 제2 코어가 제2 워크로드의 제2 부분을 실행하는 동안 하나 이상의 제1 코어는 제1 워크로드 의 제1 부분을 실행하는 것을 임의로 포함할 수 있다. 예 7에서, 예 1 내지 예 6의 주제는 적용 비율은 제1 적용 비율이고, 전력 제어 회로부는 프로세서의 지연시간 을 지연시간 임계값과 비교하는 것 또는 프로세서의 처리량을 처리량 임계값과 비교하는 것 중 적어도 하나를 수행하고, 지연시간 임계값 또는 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 제1 적용 비율을 제2 적용 비율로 조정하며, 프로세서의 처리량을 증가시키는 것 또는 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 제2 적용 비율에 기초하여 언코어 로직을 구성하는 것을 임의로 포함할 수 있다. 예 8에서, 예 1 내지 예 7의 주제는 명령어는 제1 명령어이고, 전력 제어 회로부는 제1 명령어를 사용하여 워크 로드를 실행할 하나 이상의 코어의 제1 전력 소비 값을 결정하고, 제2 명령어를 사용하여 워크로드를 실행할 하 나 이상의 코어의 제2 전력 소비 값을 결정하며 - 제2 값은 제1 값보다 큼 -, 실행 회로부는 제2 값이 임계값을 충족시키는 것에 응답하여 프로세서의 처리량을 개선시키기 위해 제2 명령어를 사용하여 워크로드의 실행을 개 시하는 것을 임의로 포함할 수 있다. 예 9에서, 예 1 내지 예 8의 주제는 제1 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장(Single Instruction, Multiple Data Extension) 명령어 또는 고급 벡터 확장(Advanced Vector Extension) 512-비트 명 령어이고, 제2 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 5세대 명령어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는 것을 임의로 포함할 수 있다. 예 10에서, 예 1 내지 예 9의 주제는 제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하는 복수의 특징들을 제공하고 - 제1 특징은 프로세서의 하나 이상의 코어의 제1 작동 주파수와 연관되고, 제2 특징은 언코어 로직의 제2 작동 주파수와 연관됨 -, 제1 작동 주파수에서 작동하도록 하나 이상의 코어를 초기화하며, 제2 작동 주파 수에서 작동하도록 언코어 로직을 초기화하고, 제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에 서 작동하도록 하나 이상의 코어들 중 하나를 활성화시키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 언 코어 로직의 일부를 활성화시키는 것 중 적어도 하나를 수행하기 위한 자산 에이전트 회로부를 임의로 포함할 수 있다. 예 11에서, 예 1 내지 예 10의 주제는 워크로드는 제1 워크로드이고, 적용 비율은 제1 전력 소비 값과 제2 전력 소비 값의 비율에 기초하고, 제1 값은 제1 워크로드에 대응하며, 제2 값은 제2 워크로드에 대응하는 것을 임의 로 포함할 수 있다. 예 12에서, 예 1 내지 예 11의 주제는 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 제2 워크로드는 전력 바이러스 워크로드인 것을 임의로 포함할 수 있다. 예 13에서, 예 1 내지 예 12의 주제는 프로세서는 코어 서버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구 현하고, 중앙 유닛 또는 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현하는 것을 임의로 포함 할 수 있다. 예 14는 워크로드의 실행을 구성하기 위한 장치를 포함하고, 이 장치는 워크로드를 실행하기 위해 프로세서의 하나 이상의 코어에 의해 실행될 명령어에 기초하여 적용 비율을 결정하기 위한 수단, 워크로드의 실행 이전에, (i) 적용 비율에 기초하여 프로세서의 하나 이상의 코어 또는 (ii) 적용 비율에 기초하여 프로세서의 언코어 로 직 중 적어도 하나를 구성하기 위한 수단, 및 하나 이상의 코어 또는 언코어 로직 중 적어도 하나를 사용하여 워크로드의 실행을 개시하기 위한 수단을 포함한다. 예 15에서, 예 14의 주제는 구성하기 위한 수단은 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하고 - 제1 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -, 언코어 로직의 제2 작동 주파수를 식별하며 - 제2 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함 됨 -, 구성하기 위한 수단은 (i) 제1 작동 주파수 또는 제2 작동 주파수 중 적어도 하나에 기초하여 프로세서의 하나 이상의 코어, 또는 (ii) 제1 작동 주파수 또는 제2 작동 주파수 중 적어도 하나에 기초하여 프로세서의 언 코어 로직 중 적어도 하나를 구성하는 것을 임의로 포함할 수 있다. 예 16에서, 예 14 및 예 15의 주제는 구성하기 위한 수단은 적용 비율과 연관된 전력 소비가 임계값을 충족시킨 다는 결정에 응답하여 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성하는 것을 임의로 포함할 수 있다. 예 17에서, 예 14 내지 예 16의 주제는 구성하기 위한 수단은 하나 이상의 코어와 연관된 제1 전력 소비를 감소 시키기 위해 하나 이상의 코어의 제1 작동 주파수를 감소시키고, 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 언코어 로직의 적어도 일부의 제2 작동 주파수를 증가시키며 - 제2 전력 소비의 증가는 프로세서의 처리량을 증가시킴 -, 구성하기 위한 수단은 제1 작동 주파수의 감소 또는 제2 작동 주파수의 증가 중 적어도 하나에 기초하여 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성 하는 것을 임의로 포함할 수 있다. 예 18에서, 예 14 내지 예 17의 주제는 구성하기 위한 수단은 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 것, 또는 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 - 제2 작동 주파 수 또는 제4 작동 주파수 중 적어도 하나는 적용 비율과 연관됨 - 중 적어도 하나를 위한 것이고, 구성하기 위 한 수단은 제1 작동 주파수를 제2 작동 주파수로 조정하는 것 또는 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 중 적어도 하나에 기초하여 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나 를 구성하는 것을 임의로 포함할 수 있다. 예 19에서, 예 14 내지 예 18의 주제는 명령어는 제1 명령어이고, 워크로드는 제1 워크로드이며, 적용 비율은 제1 적용 비율이고, 하나 이상의 코어는 하나 이상의 제1 코어이며, 언코어 로직은 제1 언코어 로직이고, 결정 하기 위한 수단은 제2 워크로드를 실행하기 위해 프로세서의 하나 이상의 제2 코어에 의해 실행될 제2 명령어에 기초하여 제2 적용 비율을 결정하고, 구성하기 위한 수단은, 제2의 것의 실행 이전에, (i) 제2 적용 비율에 기 초하여 프로세서의 하나 이상의 제2 코어 또는 (ii) 제2 적용 비율에 기초하여 프로세서의 제2 언코어 로직 중 적어도 하나를 구성하며, 실행하기 위한 수단은 하나 이상의 제2 코어 또는 제2 언코어 로직 중 적어도 하나를 사용하여 제2 워크로드의 실행을 개시하고, 하나 이상의 제2 코어가 제2 워크로드의 제2 부분을 실행하는 동안 하나 이상의 제1 코어는 제1 워크로드의 제1 부분을 실행하는 것을 임의로 포함할 수 있다. 예 20에서, 예 14 내지 예 19의 주제는 적용 비율은 제1 적용 비율이고, 결정하기 위한 수단은 프로세서의 지연 시간을 지연시간 임계값과 비교하는 것 또는 프로세서의 처리량을 처리량 임계값과 비교하는 것 중 적어도 하나 를 수행하고, 구성하기 위한 수단은, 지연시간 임계값 또는 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 제1 적용 비율을 제2 적용 비율로 조정하며, 프로세서의 처리량을 증가시키는 것 또는 프로세서의 지 연시간을 감소시키는 것 중 적어도 하나를 위해 제2 적용 비율에 기초하여 언코어 로직을 구성하는 것을 임의로 포함할 수 있다. 예 21에서, 예 14 내지 예 20의 주제는 명령어는 제1 명령어이고, 결정하기 위한 수단은 제1 명령어를 사용하여 워크로드를 실행할 하나 이상의 코어의 제1 전력 소비 값을 결정하고, 제2 명령어를 사용하여 워크로드를 실행 할 하나 이상의 코어의 제2 전력 소비 값을 결정하며 - 제2 값은 제1 값보다 큼 -, 실행하기 위한 수단은 제2 값이 임계값을 충족시키는 것에 응답하여 프로세서의 처리량을 개선시키기 위해 제2 명령어를 사용하여 워크로 드의 실행을 개시하는 것을 임의로 포함할 수 있다. 예 22에서, 예 14 내지 예 21의 주제는 제1 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터 확장 512-비트 명령어이고, 제2 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 5세대 명령 어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는 것을 임의로 포함할 수 있다. 예 23에서, 예 14 내지 예 22의 주제는 제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하는 복수의 특징들 을 활성화시키기 위한 수단을 임의로 포함할 수 있고, 제1 특징은 프로세서의 하나 이상의 코어의 제1 작동 주 파수와 연관되고, 제2 특징은 언코어 로직의 제2 작동 주파수와 연관되며, 활성화시키기 위한 수단은 제1 작동 주파수에서 작동하도록 하나 이상의 코어를 초기화하며, 제2 작동 주파수에서 작동하도록 언코어 로직을 초기화 하고, 제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에서 작동하도록 하나 이상의 코어들 중 하 나를 활성화시키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 언코어 로직의 일부를 활성화시키는 것 중 적어도 하나를 수행한다. 예 24에서, 예 14 내지 예 23의 주제는 워크로드는 제1 워크로드이고, 적용 비율은 제1 전력 소비 값과 제2 전 력 소비 값의 비율에 기초하고, 제1 값은 제1 워크로드에 대응하며, 제2 값은 제2 워크로드에 대응하는 것을 임 의로 포함할 수 있다. 예 25에서, 예 14 내지 예 24의 주제는 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 제 2 워크로드는 전력 바이러스 워크로드인 것을 임의로 포함할 수 있다. 예 26에서, 예 14 내지 예 25의 주제는 프로세서는 코어 서버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구 현하고, 중앙 유닛 또는 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현하는 것을 임의로 포함 할 수 있다. 예 27은, 실행될 때, 적어도 하나의 프로세서로 하여금 적어도 워크로드를 실행하기 위해 적어도 하나의 프로세 서의 하나 이상의 코어에 의해 실행될 제2 명령어에 기초하여 적용 비율을 결정하게 하고, 워크로드의 실행 이 전에, (i) 적용 비율에 기초하여 적어도 하나의 프로세서의 하나 이상의 코어 또는 (ii) 적용 비율에 기초하여 적어도 하나의 프로세서의 언코어 로직 중 적어도 하나를 구성하게 하며, 하나 이상의 코어 또는 언코어 로직 중 적어도 하나를 사용하여 워크로드의 실행하게 하는 제1 명령어들을 포함하는 적어도 하나의 컴퓨터 판독 가 능 매체를 포함한다. 예 28에서, 예 27의 주제는 제1 명령어들은, 실행될 때, 적어도 하나의 프로세서로 하여금 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하게 하고 - 제1 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -, 언코어 로직의 제2 작동 주파수를 식별하게 하는 - 제2 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함됨 - 것을 임의로 포함할 수 있다. 예 29에서, 예 27 및 예 28의 주제는 제1 명령어들은, 실행될 때, 적어도 하나의 프로세서로 하여금 적용 비율 과 연관된 전력 소비가 임계값을 충족시킨다는 결정에 응답하여 적어도 하나의 프로세서의 하나 이상의 코어 또 는 적어도 하나의 프로세서의 언코어 로직 중 적어도 하나를 구성하게 하는 것을 임의로 포함할 수 있다. 예 30에서, 예 27 내지 예 29의 주제는 제1 명령어들은, 실행될 때, 적어도 하나의 프로세서로 하여금 하나 이 상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 하나 이상의 코어의 제1 작동 주파수를 감소시키게 하고, 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 언코어 로직의 적어도 일부의 제2 작동 주파수를 증가시키게 하는 - 제2 전력 소비의 증가는 적어도 하나의 프로세서의 처리량을 증가시킴 - 것을 임의 로 포함할 수 있다. 예 31에서, 예 27 내지 예 30의 주제는 제1 명령어들은, 실행될 때, 적어도 하나의 프로세서로 하여금 하나 이 상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 것, 또는 언코어 로직의 제3 작동 주파수를 제4 작 동 주파수로 조정하는 것 중 적어도 하나를 수행하게 하는 - 제2 작동 주파수 또는 제4 작동 주파수 중 적어도 하나는 적용 비율과 연관됨 - 것을 임의로 포함할 수 있다. 예 32에서, 예 27 내지 예 31의 주제는 워크로드는 제1 워크로드이고, 적용 비율은 제1 적용 비율이며, 하나 이 상의 코어는 하나 이상의 제1 코어이고, 언코어 로직은 제1 언코어 로직이며, 제1 명령어들은, 실행될 때, 적어 도 하나의 프로세서로 하여금 제2 워크로드를 실행하기 위해 적어도 하나의 프로세서의 하나 이상의 제2 코어에 의해 실행될 제3 명령어에 기초하여 제2 적용 비율을 결정하게 하고, 제2의 것의 실행 이전에, (i) 제2 적용 비 율에 기초하여 적어도 하나의 프로세서의 하나 이상의 제2 코어 또는 (ii) 제2 적용 비율에 기초하여 적어도 하 나의 프로세서의 제2 언코어 로직 중 적어도 하나를 구성하게 하며, 하나 이상의 제2 코어 또는 제2 언코어 로 직 중 적어도 하나를 사용하여 제2 워크로드를 실행하게 하는 - 하나 이상의 제2 코어가 제2 워크로드의 제2 부 분을 실행하는 동안 하나 이상의 제1 코어는 제1 워크로드의 제1 부분을 실행함 - 것을 임의로 포함할 수 있다. 예 33에서, 예 27 내지 예 32의 주제는 적용 비율은 제1 적용 비율이고, 제1 명령어들은, 실행될 때, 적어도 하 나의 프로세서로 하여금 적어도 하나의 프로세서의 지연시간을 지연시간 임계값과 비교하는 것 또는 적어도 하 나의 프로세서의 처리량을 처리량 임계값과 비교하는 것 중 적어도 하나를 수행하게 하고, 지연시간 임계값 또 는 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 제1 적용 비율을 제2 적용 비율로 조정하게 하 며, 적어도 하나의 프로세서의 처리량을 증가시키는 것 또는 적어도 하나의 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 제2 적용 비율에 기초하여 언코어 로직을 구성하게 하는 것을 임의로 포함할 수 있다. 예 34에서, 예 27 내지 예 33의 주제는 제1 명령어들은, 실행될 때, 적어도 하나의 프로세서로 하여금 제2 명령 어를 사용하여 워크로드를 실행할 하나 이상의 코어의 제1 전력 소비 값을 결정하게 하고, 제3 명령어를 사용하 여 워크로드를 실행할 하나 이상의 코어의 제2 전력 소비 값을 결정하게 하며 - 제2 값은 제1 값보다 큼 -, 제2 값이 임계값을 충족시키는 것에 응답하여, 적어도 하나의 프로세서의 처리량을 개선시키기 위해 제3 명령어를 사용하여 워크로드를 실행하게 하는 것을 임의로 포함할 수 있다. 예 35에서, 예 27 내지 예 34의 주제는 제2 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터 확장 512-비트 명령어이고, 제3 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 5세대 명령 어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는 것을 임의로 포함할 수 있다. 예 36에서, 예 27 내지 예 35의 주제는 제1 명령어들은, 실행될 때, 적어도 하나의 프로세서로 하여금 적어도 하나의 프로세서와 연관된 복수의 특징들 중 하나 이상을 식별하게 하고 - 복수의 특징들은 제1 라이선스에 기 초한 제1 특징 및 제2 특징을 포함하고, 제1 특징은 적어도 하나의 프로세서의 하나 이상의 코어의 제1 작동 주 파수와 연관되고, 제2 특징은 언코어 로직의 제2 작동 주파수와 연관됨 -, 제1 작동 주파수에서 작동하도록 하 나 이상의 코어를 초기화하게 하며, 제2 작동 주파수에서 작동하도록 언코어 로직을 초기화하게 하고, 제2 라이 선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수에서 작동하도록 하나 이상의 코어들 중 하나를 활성화시 키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 언코어 로직의 일부를 활성화시키는 것 중 적어도 하나를 수행하게 하는 것을 임의로 포함할 수 있다. 예 37에서, 예 27 내지 예 36의 주제는 워크로드는 제1 워크로드이고, 제1 명령어들은, 실행될 때, 적어도 하나 의 프로세서로 하여금 제1 전력 소비 값과 제2 전력 소비 값의 비율에 기초하여 적용 비율을 결정하게 하는 -제1 값은 제1 워크로드에 대응하고, 제2 값은 제2 워크로드에 대응함 - 것을 임의로 포함할 수 있다. 예 38에서, 예 27 내지 예 37의 주제는 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 제 2 워크로드는 전력 바이러스 워크로드인 것을 임의로 포함할 수 있다. 예 39에서, 예 27 내지 예 38의 주제는 제1 명령어들은, 실행될 때, 적어도 하나의 프로세서로 하여금 코어 서 버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구현하게 하는 - 중앙 유닛 또는 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현함 - 것을 임의로 포함할 수 있다. 예 40은 워크로드의 실행을 구성하기 위한 장치를 포함하고, 이 장치는 적어도 하나의 메모리, 및 적어도 워크 로드를 실행하기 위해 적어도 하나의 프로세서의 하나 이상의 코어에 의해 실행될 제2 명령어에 기초하여 적용 비율을 결정하고, 워크로드의 실행 이전에, (i) 적용 비율에 기초하여 적어도 하나의 프로세서의 하나 이상의 코어 또는 (ii) 적용 비율에 기초하여 적어도 하나의 프로세서의 언코어 로직 중 적어도 하나를 구성하며, 하나 이상의 코어 또는 언코어 로직 중 적어도 하나를 사용하여 워크로드를 실행하기 위해 제1 명령어들을 실행하기 위한 적어도 하나의 프로세서를 포함한다. 예 41에서, 예 40의 주제는 적어도 하나의 프로세서는 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별 하고 - 제1 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -, 언코어 로직의 제2 작동 주파수를 식별하는 - 제2 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함됨 - 것을 임의로 포함할 수 있다. 예 42에서, 예 40 및 예 41의 주제는 적어도 하나의 프로세서는 적용 비율과 연관된 전력 소비가 임계값을 충족 시킨다는 결정에 응답하여 적어도 하나의 프로세서의 하나 이상의 코어 또는 적어도 하나의 프로세서의 언코어 로직 중 적어도 하나를 구성하는 것을 임의로 포함할 수 있다. 예 43에서, 예 40 내지 예 42의 주제는 적어도 하나의 프로세서는 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 하나 이상의 코어의 제1 작동 주파수를 감소시키고, 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 언코어 로직의 적어도 일부의 제2 작동 주파수를 증가시키는 - 제2 전력 소비의 증가는 적어도 하나의 프로세서의 처리량을 증가시킴 - 것을 임의로 포함할 수 있다. 예 44에서, 예 40 내지 예 43의 주제는 적어도 하나의 프로세서는 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 것, 또는 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 것 - 제2 작동 주파수 또는 제4 작동 주파수 중 적어도 하나는 적용 비율과 연관됨 - 중 적어도 하나를 위한 것을 임의로 포함 할 수 있다. 예 45에서, 예 40 내지 예 44의 주제는 워크로드는 제1 워크로드이고, 적용 비율은 제1 적용 비율이며, 하나 이 상의 코어는 하나 이상의 제1 코어이고, 언코어 로직은 제1 언코어 로직이며, 적어도 하나의 프로세서는 제2 워 크로드를 실행하기 위해 적어도 하나의 프로세서의 하나 이상의 제2 코어에 의해 실행될 제3 명령어에 기초하여 제2 적용 비율을 결정하고, 제2의 것의 실행 이전에, (i) 제2 적용 비율에 기초하여 적어도 하나의 프로세서의 하나 이상의 제2 코어 또는 (ii) 제2 적용 비율에 기초하여 적어도 하나의 프로세서의 제2 언코어 로직 중 적어 도 하나를 구성하며, 하나 이상의 제2 코어 또는 제2 언코어 로직 중 적어도 하나를 사용하여 제2 워크로드를 실행하는 - 하나 이상의 제2 코어가 제2 워크로드의 제2 부분을 실행하는 동안 하나 이상의 제1 코어는 제1 워 크로드의 제1 부분을 실행함 - 것을 임의로 포함할 수 있다. 예 46에서, 예 40 내지 예 45의 주제는 적용 비율은 제1 적용 비율이고, 적어도 하나의 프로세서는 적어도 하나 의 프로세서의 지연시간을 지연시간 임계값과 비교하는 것 또는 적어도 하나의 프로세서의 처리량을 처리량 임 계값과 비교하는 것 중 적어도 하나를 수행하고, 지연시간 임계값 또는 처리량 임계값 중 각자의 임계값이 충족 되는 것에 응답하여, 제1 적용 비율을 제2 적용 비율로 조정하며, 적어도 하나의 프로세서의 처리량을 증가시키 는 것 또는 적어도 하나의 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 제2 적용 비율에 기초 하여 언코어 로직을 구성하는 것을 임의로 포함할 수 있다. 예 47에서, 예 40 내지 예 46의 주제는 적어도 하나의 프로세서는 제2 명령어를 사용하여 워크로드를 실행할 하 나 이상의 코어의 제1 전력 소비 값을 결정하고, 제3 명령어를 사용하여 워크로드를 실행할 하나 이상의 코어의 제2 전력 소비 값을 결정하며 - 제2 값은 제1 값보다 큼 -, 제2 값이 임계값을 충족시키는 것에 응답하여, 적어 도 하나의 프로세서의 처리량을 개선시키기 위해 제3 명령어를 사용하여 워크로드를 실행하는 것을 임의로 포함 할 수 있다.예 48에서, 예 40 내지 예 47의 주제는 제2 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터 확장 512-비트 명령어이고, 제3 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 5세대 명령 어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는 것을 임의로 포함할 수 있다. 예 49에서, 예 40 내지 예 48의 주제는 적어도 하나의 프로세서는 적어도 하나의 프로세서와 연관된 복수의 특 징들 중 하나 이상을 식별하고 - 복수의 특징들은 제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하고, 제 1 특징은 적어도 하나의 프로세서의 하나 이상의 코어의 제1 작동 주파수와 연관되고, 제2 특징은 언코어 로직 의 제2 작동 주파수와 연관됨 -, 제1 작동 주파수에서 작동하도록 하나 이상의 코어를 초기화하며, 제2 작동 주 파수에서 작동하도록 언코어 로직을 초기화하고, 제2 라이선스를 획득하는 것에 응답하여, (i) 제3 작동 주파수 에서 작동하도록 하나 이상의 코어들 중 하나를 활성화시키는 것, 또는 (ii) 제4 작동 주파수에서 작동하도록 언코어 로직의 일부를 활성화시키는 것 중 적어도 하나를 수행하는 것을 임의로 포함할 수 있다. 예 50에서, 예 40 내지 예 49의 주제는 워크로드는 제1 워크로드이고, 적어도 하나의 프로세서는 제1 전력 소비 값과 제2 전력 소비 값의 비율에 기초하여 적용 비율을 결정하는 - 제1 값은 제1 워크로드에 대응하고, 제2 값 은 제2 워크로드에 대응함 - 것을 임의로 포함할 수 있다. 예 51에서, 예 40 내지 예 50의 주제는 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 제 2 워크로드는 전력 바이러스 워크로드인 것을 임의로 포함할 수 있다. 예 52에서, 예 40 내지 예 51의 주제는 적어도 하나의 프로세서는 코어 서버, 중앙 유닛, 또는 분산 유닛 중 적 어도 하나를 구현하는 - 중앙 유닛 또는 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현함 - 것 을 임의로 포함할 수 있다. 예 53은 워크로드의 실행을 구성하기 위한 방법을 포함하며, 이 방법은 워크로드를 실행하기 위해 프로세서의 하나 이상의 코어에 의해 실행될 명령어에 기초하여 적용 비율을 결정하는 단계, 워크로드의 실행 이전에, (i) 적용 비율에 기초하여 프로세서의 하나 이상의 코어 또는 (ii) 적용 비율에 기초하여 프로세서의 언코어 로직 중 적어도 하나를 구성하는 단계, 및 하나 이상의 코어 또는 언코어 로직 중 적어도 하나를 사용하여 워크로드 를 실행하는 단계를 포함한다. 예 54에서, 예 53의 주제는 (i) 프로세서의 하나 이상의 코어 또는 (ii) 프로세서의 언코어 로직 중 적어도 하 나를 구성하는 단계는 하나 이상의 코어 중 제1 코어의 제1 작동 주파수를 식별하는 단계 - 제1 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제1 세트에 포함됨 -, 및 언코어 로직의 제2 작동 주파수를 식 별하는 단계 - 제2 작동 주파수는 적용 비율과 연관된 하나 이상의 작동 주파수의 제2 세트에 포함됨 - 를 포함 하는 것을 임의로 포함할 수 있다. 예 55에서, 예 53 내지 예 54의 주제는 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성하는 단계는 적용 비율과 연관된 전력 소비가 임계값을 충족시킨다고 결정하는 것에 응답하여 이루 어지는 것을 임의로 포함할 수 있다. 예 56에서, 예 53 내지 예 55의 주제는 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성하는 단계는 하나 이상의 코어와 연관된 제1 전력 소비를 감소시키기 위해 하나 이상의 코어의 제1 작동 주파수를 감소시키는 단계, 및 언코어 로직의 적어도 일부와 연관된 제2 전력 소비를 증가시키기 위해 언 코어 로직의 적어도 일부의 제2 작동 주파수를 증가시키는 단계 - 제2 전력 소비의 증가는 프로세서의 처리량을 증가시킴 - 를 포함하는 것을 임의로 포함할 수 있다. 예 57에서, 예 53 내지 예 56의 주제는 프로세서의 하나 이상의 코어 또는 프로세서의 언코어 로직 중 적어도 하나를 구성하는 단계는 하나 이상의 코어의 제1 작동 주파수를 제2 작동 주파수로 조정하는 단계, 또는 언코어 로직의 제3 작동 주파수를 제4 작동 주파수로 조정하는 단계 - 제2 작동 주파수 또는 제4 작동 주파수 중 적어 도 하나는 적용 비율과 연관됨 - 중 적어도 하나를 포함하는 것을 임의로 포함할 수 있다. 예 58에서, 예 53 내지 예 57의 주제는 명령어는 제1 명령어이고, 워크로드는 제1 워크로드이며, 적용 비율은 제1 적용 비율이고, 하나 이상의 코어는 하나 이상의 제1 코어이며, 언코어 로직은 제1 언코어 로직이고, 제2 워크로드를 실행하기 위해 프로세서의 하나 이상의 제2 코어에 의해 실행될 제2 명령어에 기초하여 제2 적용 비 율을 결정하는 단계, 제2의 것의 실행 이전에, (i) 제2 적용 비율에 기초하여 프로세서의 하나 이상의 제2 코어 또는 (ii) 제2 적용 비율에 기초하여 프로세서의 제2 언코어 로직 중 적어도 하나를 구성하는 단계, 및 하나 이 상의 제2 코어 또는 제2 언코어 로직 중 적어도 하나를 사용하여 제2 워크로드를 실행하는 단계 - 하나 이상의제2 코어가 제2 워크로드의 제2 부분을 실행하는 동안 하나 이상의 제1 코어는 제1 워크로드의 제1 부분을 실행 함 - 를 더 포함하는 것을 임의로 포함할 수 있다. 예 59에서, 예 53 내지 예 58의 주제는 적용 비율은 제1 적용 비율이고, 프로세서의 지연시간을 지연시간 임계 값과 비교하는 단계 또는 프로세서의 처리량을 처리량 임계값과 비교하는 단계 중 적어도 하나를 수행하는 단계, 지연시간 임계값 또는 처리량 임계값 중 각자의 임계값이 충족되는 것에 응답하여, 제1 적용 비율을 제2 적용 비율로 조정하는 단계, 및 프로세서의 처리량을 증가시키는 것 또는 프로세서의 지연시간을 감소시키는 것 중 적어도 하나를 위해 제2 적용 비율에 기초하여 언코어 로직을 구성하는 단계를 더 포함하는 것을 임의로 포 함할 수 있다. 예 60에서, 예 53 내지 예 59의 주제는 명령어는 제1 명령어이고, 제1 명령어를 사용하여 워크로드를 실행할 하 나 이상의 코어의 제1 전력 소비 값을 결정하는 단계, 제2 명령어를 사용하여 워크로드를 실행할 하나 이상의 코어의 제2 전력 소비 값을 결정하는 단계 - 제2 값은 제1 값보다 큼 -, 및 제2 값이 임계값을 충족시키는 것에 응답하여, 프로세서의 처리량을 개선시키기 위해 제2 명령어를 사용하여 워크로드를 실행하는 단계를 더 포함하 는 것을 임의로 포함할 수 있다. 예 61에서, 예 53 내지 예 60의 주제는 제1 명령어는 256-비트 스트리밍 단일 명령어, 다중 데이터 확장 명령어 또는 고급 벡터 확장 512-비트 명령어이고, 제2 명령어는 5세대 명령어 세트 아키텍처 명령어이며, 5세대 명령 어 세트 아키텍처 명령어는 복소수 산술 연산 또는 부동 소수점 연산을 수행하는 것을 임의로 포함할 수 있다. 예 62에서, 예 53 내지 예 61의 주제는 프로세서는 제1 라이선스에 기초한 제1 특징 및 제2 특징을 포함하는 복 수의 특징들을 제공하도록 구성 가능한 회로부를 포함하고, 제1 특징은 프로세서의 하나 이상의 코어의 제1 작 동 주파수와 연관되고, 제2 특징은 언코어 로직의 제2 작동 주파수와 연관되며, (i) 프로세서의 하나 이상의 코 어 또는 (ii) 언코어 로직을 구성하는 단계는 제1 작동 주파수에서 작동하도록 하나 이상의 코어를 초기화하는 단계, 제2 작동 주파수에서 작동하도록 언코어 로직을 초기화하는 단계, 및 제2 라이선스를 획득하는 것에 응답 하여, (i) 제3 작동 주파수에서 작동하도록 하나 이상의 코어들 중 하나를 활성화시키는 단계, 또는 (ii) 제4 작동 주파수에서 작동하도록 언코어 로직의 일부를 활성화시키는 단계 중 적어도 하나를 수행하는 단계를 포함 하는 것을 임의로 포함할 수 있다. 예 63에서, 예 53 내지 예 62의 주제는 워크로드는 제1 워크로드이고, 적용 비율은 제1 전력 소비 값과 제2 전 력 소비 값의 비율에 기초하고, 제1 값은 제1 워크로드에 대응하며, 제2 값은 제2 워크로드에 대응하는 것을 임 의로 포함할 수 있다. 예 64에서, 예 53 내지 예 63의 주제는 제1 워크로드는 네트워크 기능 가상화를 위한 네트워킹 워크로드이고 제 2 워크로드는 전력 바이러스 워크로드인 것을 임의로 포함할 수 있다. 예 65에서, 예 53 내지 예 64의 주제는 프로세서는 코어 서버, 중앙 유닛, 또는 분산 유닛 중 적어도 하나를 구 현하고, 중앙 유닛 또는 분산 유닛 중 적어도 하나는 가상 무선 액세스 네트워크를 구현하는 것을 임의로 포함 할 수 있다. 예 66은 예 53 내지 예 65 중 어느 한 예의 방법을 수행하기 위한 명령어들을 포함하는 적어도 하나의 컴퓨터 판독 가능 매체이다. 예 67은 예 53 내지 예 65 중 어느 한 예의 방법을 수행하기 위한 프로세서 회로부를 포함하는 장치를 포함한다. 예 68은 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 프로세서 회로부를 포함하는 분산 유닛이다. 예 69는 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 프로세서 회로부를 포함하는 중앙 유닛이다. 예 70은 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 프로세서 회로부를 포함하는 에지 서버이다. 예 71은 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 프로세서 회로부를 포함하는 코어 서버이다. 예 72는 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 그래픽 프로세싱 유닛을 포함하는 장치이다. 예 73은 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 비전 프로세싱 유닛을 포함하는 장치이다. 예 74는 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 신경 네트워크 프로세서를 포함하는 장치이다. 예 75는 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 범용 프로세서를 포함하는 장치이다. 예 76은 복수의 코어들 및 복수의 코어들에 결합되는 전력 제어 유닛을 포함하는, 중앙 프로세싱 유닛(CPU)을 포함하며, 전력 제어 유닛은 본 명세서에서 논의되는 기술들에 따라 하나 이상의 워크로드에 대한 성능을 최적 화하기 위해 적용 비율에 기초하여 코어별로 복수의 코어들의 작동을 수정하도록 구성된다. 예 77에서, 예 76의 주제는 복수의 코어들의 작동을 수정하는 것은 코어별로 복수의 코어들 중 하나 이상의 코 어의 보장된 작동 주파수를 조정하는 것을 포함하는 것을 임의로 포함할 수 있다. 예 78에서, 예 76 및 예 77의 주제는 적용 비율은 제1 적용 비율이고, 전력 제어 유닛은 본 명세서에서 논의되 는 기술들에 따라 처리량을 개선시키는 것 또는 지연시간을 감소시키는 것 중 적어도 하나를 위해 제1 적용 비 율 또는 제2 적용 비율에 기초하여 언코어 로직 회로별로 복수의 언코어 로직 회로들의 작동을 수정하도록 구성 되는 것을 임의로 포함할 수 있다. 예 79에서, 예 76 내지 예 78의 주제는 복수의 언코어 로직 회로들의 작동을 수정하는 것은 언코어 로직 회로별 로 복수의 언코어 로직 회로들 중 하나 이상의 언코어 로직 회로의 보장된 작동 주파수를 조정하는 것을 포함하 는 것을 임의로 포함할 수 있다. 예 80에서, 예 76 내지 예 79의 주제는 언코어 로직은 CMS(converged/common mesh stop), 메시 인터페이스, 또 는 I/O(input/output) 중 적어도 하나를 포함하는 것을 임의로 포함할 수 있다. 예 81에서, 예 76 내지 예 80의 주제는 복수의 언코어 로직 회로들은, 제1 CMS, 제1 메시 인터페이스, 또는 제1 I/O 중 적어도 하나를 포함하는, 제1 언코어 로직 회로를 포함하고, 전력 제어 유닛은 제1 언코어 로직 회로의 작동을 수정하기 위해 제1 CMS, 제1 메시 인터페이스, 또는 제1 I/O 중 적어도 하나의 보장된 작동 주파수를 조 정하는 것을 임의로 포함할 수 있다. 예 82에서, 예 76 내지 예 81의 주제는 적용 비율은 제1 적용 비율이고, 전력 제어 유닛은 본 명세서에서 논의 되는 기술들에 따라 처리량을 개선시키는 것 또는 지연시간을 감소시키는 것 중 적어도 하나를 위해 제1 적용 비율 또는 제2 적용 비율에 기초하여 CLM 로직 회로별로 복수의 CLM 로직 회로들의 작동을 수정하도록 구성되는 것을 임의로 포함할 수 있다. 예 83에서, 예 76 내지 예 82의 주제는 복수의 CLM 로직 회로들의 작동을 수정하는 것은 CLM 로직 회로별로 복 수의 CLM 로직 회로들 중 하나 이상의 CLM 로직 회로의 보장된 작동 주파수를 조정하는 것을 포함하는 것을 임 의로 포함할 수 있다. 예 84에서, 예 76 내지 예 83의 주제는 CLM 로직은 LLC(last level cache), CHA(cache/home agent), CMS(converged/common mesh stop), 또는 I/O(input/output) 버퍼 중 적어도 하나를 포함하는 것을 임의로 포함 할 수 있다. 예 85에서, 예 76 내지 예 84의 주제는 복수의 CLM 로직 회로들은, 제1 LLC, 제1 CHA, 제1 CMS, 또는 제1 I/O 버퍼 중 적어도 하나를 포함하는, 제1 CLM 로직 회로를 포함하고, 전력 제어 유닛은 제1 CLM 로직 회로의 작동 을 수정하기 위해 제1 LLC, 제1 CHA, 제1 CMS, 또는 제1 I/O 버퍼 중 적어도 하나의 보장된 작동 주파수를 조정 하는 것을 임의로 포함할 수 있다. 예 86에서, 예 76 내지 예 85의 주제는 제1 적용 비율 또는 제2 적용 비율 중 적어도 하나는 (i) CPU의 네트워 크 노드 위치, (ii) 하나 이상의 워크로드와 연관된 지연시간 요구사항, (iii) 하나 이상의 워크로드와 연관된 전력 소실 또는 열 설계 전력 요구사항, 또는 (iv) 하나 이상의 워크로드와 연관된 처리량 요구사항 중 적어도 하나에 기초하는 것을 임의로 포함할 수 있다. 예 87에서, 예 76 내지 예 86의 주제는 네트워크 노드 위치는 지상 네트워크 또는 비지상 네트워크에 기초하는 것을 임의로 포함할 수 있다. 예 88에서, 예 76 내지 예 87의 주제는 네트워크 노드 위치는 5G 통신 네트워크의 백홀, 미드홀, 또는 프런트홀 에 대응하는 것을 임의로 포함할 수 있다. 예 89에서, 예 76 내지 예 88의 주제는 네트워크 노드 위치는 CPU가 5G vRAN 중앙 유닛(5G vRAN-CU) 또는 5G vRAN 분산 유닛(vRAN-DU)과 같은 가상 무선 액세스 네트워크(vRAN)를 구현하는지, 또는 5G 코어 서버와 같은 코 어 서버를 구현하는지에 대응하는 것을 임의로 포함할 수 있다.예 90에서, 예 76 내지 예 89의 주제는 CPU는 5세대(5G) 네트워크 최적화된 CPU인 것을 임의로 포함할 수 있다. 예 91에서, 예 76 내지 예 90의 주제는 작동을 수정하는 것은 복수의 코어들에 의해 로드될 명령어의 유형에 기 초하고, 명령어의 유형은 256-비트 SSE(Streaming Single Instruction, Multiple Data (SIMD) Extension) 명령 어, 고급 벡터 확장 512-비트 명령어(AVX-512), 또는 5세대(5G) 명령어 세트 아키텍처(ISA) 명령어인 것을 임의 로 포함할 수 있다. 예 92에서, 예 76 내지 예 91의 주제는 5G ISA 명령어는 복소수 산술 연산 또는 부동 소수점 연산인 것을 임의 로 포함할 수 있다. 예 93에서, 예 76 내지 예 92의 주제는 제1 적용 비율 또는 제2 적용 비율 중 적어도 하나는 1.0보다 크거나 1.0보다 작은 값으로 수정되는 것을 임의로 포함할 수 있다. 예 94에서, 예 76 내지 예 93의 주제는 하나 이상의 워크로드는, 본 명세서에서 논의되는 네트워킹 워크로드들 의 유형들에 따라, 네트워크 기능 가상화를 위한 유선 또는 무선 네트워킹 워크로드들에 관련되는 것을 임의로 포함할 수 있다. 예 95에서, 예 76 내지 예 94의 주제는 소프트 SKU(stock keeping unit) 제품 내에서 하나 이상의 워크로드에 대해 최적화된 성능을 갖는 전력 제어 유닛의 활성화 및 사용을 제어하기 위한 소프트웨어 정의 실리콘 특징을 임의로 포함할 수 있다. 예 96에서, 예 76 내지 예 95의 주제는 소프트웨어 정의 실리콘 특징은 전력 제어 유닛에 의한 코어별 제어, 언 코어별 제어, 또는 CLM별 제어 중 적어도 하나의 활성화 및 사용을 제어하는 것을 임의로 포함할 수 있다. 예 97에서, 예 76 내지 예 96의 주제는 전력 제어 유닛은 하드 SKU(stock keeping unit) 제품 내에서 하나 이 상의 워크로드에 대한 성능을 최적화하기 위해 제1 적용 비율 또는 제2 적용 비율에 기초하여 제조 시에 설정을 제공받는 것을 임의로 포함할 수 있다. 예 98은 하나 이상의 워크로드에 대해 최적화된 성능으로 작동하도록 전력 제어 유닛을 구성하기 위해, 소프트 웨어 정의 실리콘 특징을 사용하여 예 76 내지 예 97 중 어느 한 예의 CPU의 특징의 활성화 및 사용을 제어하는 방법을 포함한다. 예 99는 하나 이상의 워크로드의 실행을 위한 주파수 및 전력 사용량을 최적화하는 동작들을 포함하는, 예 76 내지 예 97 중 어느 한 예의 CPU를 작동시키는 방법을 포함한다. 예 100은 예 76 내지 예 97 중 어느 한 예의 CPU를 제조하는 방법을 포함하며, 이 제조 방법은 하나 이상의 워 크로드에 대한 추정된 적용 비율에 기초하여 전력 및 주파수 제어 유닛에 대한 값들을 설정하도록 구성된다. 예 101은 예 76 내지 예 97 중 어느 한 예의 CPU의 성능을 테스트 및 검증하는 방법을 포함하며, 테스트 및 검 증은 하나 이상의 워크로드에 대한 추정된 적용 비율에 기초하여 전력 및 주파수 제어 유닛으로부터의 작동 값 들을 구현하기 위해 각자의 코어들 및 다른 CPU 구성요소들의 작동을 검증하도록 구성된다. 예 102는 에지 서버를 포함하며, 에지 서버는 예 76 내지 예 97 중 어느 한 예의 CPU를 작동시키도록 구성된 단 일 소켓 하드웨어 플랫폼을 포함한다. 예 103은 코어 서버를 포함하며, 코어 서버는 예 76 내지 예 97 중 어느 한 예의 CPU를 작동시키도록 구성된 듀 얼 소켓 하드웨어 플랫폼을 포함한다. 예 104는 분산 유닛을 포함하며, 분산 유닛은 예 76 내지 예 97 중 어느 한 예의 CPU를 포함하여 단일 소켓 하 드웨어 플랫폼 또는 듀얼 소켓 하드웨어 플랫폼을 포함한다. 예 105는 예 104의 분산 유닛을 포함하며, 여기서 단일 소켓 하드웨어 플랫폼 또는 듀얼 소켓 하드웨어 플랫폼 은 가상 무선 액세스 네트워크를 구현한다. 예 106는 중앙 유닛을 포함하며, 중앙 유닛은 예 76 내지 예 97 중 어느 한 예의 CPU를 포함하는 단일 소켓 하 드웨어 플랫폼 또는 듀얼 소켓 하드웨어 플랫폼을 포함한다. 예 107는 예 106의 중앙 유닛을 포함하며, 여기서 단일 소켓 하드웨어 플랫폼 또는 듀얼 소켓 하드웨어 플랫폼 은 가상 무선 액세스 네트워크를 구현한다. 예 108은 장치를 포함하며, 장치는 단일 명령어를 디코딩하기 위한 디코더 회로부 - 단일 명령어는 제1 소스 피 연산자의 식별자에 대한 필드, 제2 소스 피연산자의 식별자에 대한 필드, 목적지 피연산자의 식별자에 대한 필 드, 및 오피코드에 대한 필드 - 오피코드는 실행 회로부가 5세대(5G) 워크로드를 실행할 것임을 나타냄 -, 및 5G 워크로드를 실행하기 위해 오피코드에 따라 디코딩된 명령어를 실행하기 위한 실행 회로부를 포함한다. 예 109에서, 예 108의 주제는 디코더 회로부는 식별된 제1 소스 피연산자를 식별된 제2 소스 피연산자에 가산하 고 가산의 결과를 식별된 목적지 피연산자에 저장하는 것을 임의로 포함할 수 있다. 예 110에서, 예 108 및 예 109의 주제는 제1 소스 피연산자의 식별자에 대한 필드는 벡터 레지스터를 식별해 주 는 것을 임의로 포함할 수 있다. 예 111에서, 예 108 내지 예 110의 주제는 제1 소스 피연산자의 식별자에 대한 필드는 메모리 위치를 식별해 주 는 것을 임의로 포함할 수 있다. 예 112에서, 예 108 내지 예 111의 주제는 명령어는 고급 벡터 확장(AVX) 512-비트 명령어 또는 5G-ISA 명령어 인 것을 임의로 포함할 수 있다. 예 113은 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 인공 지능 프로세서이다. 예 114는 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 머신 러닝 프로세서이다. 예 115는 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 벡터 프로세서이다. 예 116은 예 53 내지 예 65 중 어느 한 예를 수행하기 위한 전자 제어 유닛이다. 특정 예시적인 시스템들, 방법들, 장치들, 및 제조 물품들이 본 명세서에서 개시되었지만, 본 특허의 보호 범위 가 이에 제한되지 않는다. 반대로, 본 특허는 본 특허의 청구항들의 범위 내에 명백히 속하는 모든 시스템들, 방법들, 장치들, 및 제조 물품들을 포함한다."}
{"patent_id": "10-2022-7037850", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "이하의 청구항들은 이로써 이 참조에 의해 이 발명을 실시하기 위한 구체적인 내용에 포함되며, 각각의 청구항 은 본 개시내용의 개별 실시예로서 독립해 있다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10 도면11 도면12 도면13 도면14 도면15 도면16 도면17 도면18 도면19 도면20 도면21 도면22 도면23 도면24 도면25 도면26 도면27 도면28 도면29 도면30 도면31a 도면31b 도면31c 도면31d 도면31e 도면31f 도면31g 도면31h 도면32 도면33 도면34 도면35 도면36 도면37 도면38 도면39 도면40 도면41 도면42 도면43 도면44a 도면44b 도면45 도면46 도면47 도면48 도면49 도면50a 도면50b 도면50c 도면50d 도면51a 도면51b 도면52 도면53 도면54 도면55 도면56 도면57 도면58 도면59 도면60 도면61 도면62 도면63 도면64 도면65 도면66 도면67 도면68 도면69 도면70 도면71"}
{"patent_id": "10-2022-7037850", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 제1 예시적인 멀티코어 컴퓨팅 시스템을 포함하는 제1 예시적인 멀티코어 컴퓨팅 환경의 예시이다. 도 2는 본 명세서에서 개시되는 예들을 구현할 수 있는 에지 컴퓨팅을 위한 예시적인 에지 클라우드 구성의 개 요를 예시한다. 도 3은 본 명세서에서 개시되는 예들을 구현할 수 있는 예시적인 엔드포인트들, 예시적인 에지 클라우드, 및 예 시적인 클라우드 컴퓨팅 환경들 사이의 운영 계층들을 예시한다. 도 4는 본 명세서에서 개시되는 예들을 구현할 수 있는 에지 컴퓨팅 시스템에서의 네트워킹 및 서비스들을 위한 예시적인 접근 방식을 예시한다. 도 5는 예시적인 워크로드 조정 가능한 중앙 프로세싱 유닛(CPU)을 포함하는 제2 예시적인 멀티코어 컴퓨팅 시 스템을 포함하는 제2 예시적인 멀티코어 컴퓨팅 환경의 예시이다. 도 6은 도 1의 제1 멀티코어 컴퓨팅 시스템 및/또는 도 5의 제2 멀티코어 컴퓨팅 시스템의 예시적인 구현의 블 록 다이어그램이다. 도 7은 도 1의 제1 멀티코어 컴퓨팅 시스템 및/또는 도 5의 제2 멀티코어 컴퓨팅 시스템의 다른 예시적인 구현 의 블록 다이어그램이다. 도 8은 네트워크 워크로드들의 프로세싱을 개선시키고/시키거나 다른 방식으로 최적화하기 위해 코어별 구성을 구현하는 데 사용될 수 있는 예시적인 전력 제어 유닛(PCU)을 포함하는 멀티코어 프로세서의 예시적인 구현의 블록 다이어그램이다. 도 9는 도 1, 도 5, 도 6 및/또는 도 7의 예시적인 멀티코어 컴퓨팅 시스템들에 의해 구현되는 예시적인 5G 네 트워크 아키텍처의 예시이다. 도 10은 예시적인 5G 가상 무선 액세스 네트워크(vRAN) 분산 유닛(DU)을 구현할 수 있는 예시적인 워크로드 조 정 가능한 CPU의 예시이다. 도 11은 예시적인 워크로드 조정 가능한 CPU를 포함하는 5G 코어 서버의 예시적인 구현의 예시이다. 도 12는 도 1의 제1 예시적인 멀티코어 컴퓨팅 환경 및/또는 도 5의 제2 예시적인 멀티코어 컴퓨팅 환경에 의해 실행될 수 있는 예시적인 네트워크 워크로드들의 예시이다. 도 13은 예시적인 vRAN을 구현할 수 있는 예시적인 워크로드 조정 가능한 CPU의 성능을 조정하는 것의 예시이다. 도 14는 본 명세서에서 설명되는 예들을 구현하는 것에 의한 예시적인 예상된 시스템 레벨 성능 이득의 그래프 이다. 도 15는 예시적인 멀티코어 컴퓨팅 시스템에 포함된 예시적인 워크로드 조정 가능한 CPU의 성능을 조정하는 것 의 예시이다. 도 16은 제1 예시적인 코어 할당 및 제1 예시적인 전력 버짓을 사용하여 예시적인 네트워크 워크로드에 기초하 여 예시적인 워크로드 조정 가능한 CPU의 성능을 조정하는 것의 예시이다. 도 17은 제2 예시적인 코어 할당 및 제1 예시적인 전력 버짓을 사용하여 예시적인 네트워크 워크로드에 기초하 여 예시적인 워크로드 조정 가능한 CPU의 성능을 조정하는 것의 예시이다. 도 18은 제3 예시적인 코어 할당 및 제2 예시적인 전력 버짓을 사용하여 예시적인 네트워크 워크로드에 기초하 여 예시적인 워크로드 조정 가능한 CPU의 성능을 조정하는 것의 예시이다. 도 19은 제2 예시적인 코어 할당 및 제2 예시적인 전력 버짓을 사용하여 예시적인 네트워크 워크로드에 기초하 여 예시적인 워크로드 조정 가능한 CPU의 성능을 조정하는 것의 예시이다. 도 20은 코어별로 예시적인 워크로드 조정 가능한 CPU의 성능을 조정하는 것의 예시이다. 도 21은 상이한 예시적인 전력 버짓들에 기초하여 예시적인 워크로드 조정 가능한 CPU들의 성능을 조정하는 것 의 예시이다. 도 22는 예시적인 네트워크 워크로드들의 프로세싱을 실시하기 위한 예시적인 머신 판독 가능 명령어들의 테이 블이다. 도 23은 도 5, 도 6, 도 7, 도 8, 도 10, 도 11, 도 12, 도 13, 및/또는 도 15의 워크로드 조정 가능한 CPU에의해 구현될 수 있는 예시적인 알고리즘들의 테이블이다. 도 24는 도 5, 도 6, 도 7, 도 8, 도 10, 도 11, 도 12, 도 13, 및/또는 도 15의 워크로드 조정 가능한 CPU를 사용하여 단정밀도 부동 소수점 계산들을 프로세싱하는 것과 관련한 예시적인 속도 향상 값들의 그래프이다. 도 25는 종래의 CPU를 사용하여 예시적인 복소수 곱셈 연산을 실행하는 것의 예시이다. 도 26은 도 5, 도 6, 도 7, 도 8, 도 10, 도 11, 도 12, 도 13, 및/또는 도 15의 워크로드 조정 가능한 CPU를 사용하여 예시적인 복소수 곱셈 연산을 실행하는 것의 예시이다. 도 27은 예시적인 워크로드 조정 가능한 CPU에 의해 구현될 수 있는 예시적인 구성들의 예시이다. 도 28은 예시적인 워크로드 조정 가능한 CPU의 언코어 주파수와 관련한 예시적인 처리량, 지연시간, 및 전력 파 라미터들의 예시이다. 도 29는 예시적인 워크로드 조정 가능한 CPU의 예시적인 정적 구성의 예시이다. 도 30은 예시적인 워크로드 조정 가능한 CPU의 예시적인 동적 구성의 예시이다. 도 31a 내지 도 31h는 예시적인 워크로드(들)에 기초한 예시적인 워크로드 조정 가능한 CPU의 코어(들) 및 언코 어(들)에 대한 예시적인 전력 조정들의 예시들이다. 도 32는 예시적인 네트워크 워크로드들을 실행하기 위한 예시적인 시스템의 예시이다. 도 33은 본 명세서에서 설명되는 예들을 사용하는 예시적인 네트워크 아키텍처들의 상이한 구현들의 예시이다. 도 34는 예시적인 네트워크 워크로드 파이프라인의 예시이다. 도 35는 본 명세서에서 설명되는 예들을 사용하여 이익을 얻을 수 있는 예시적인 네트워크 아키텍처의 예시이다. 도 36은 예시적인 FlexRAN(flexible radio access network) 배포 아키텍처들의 예시이다. 도 37은 다른 예시적인 네트워크 워크로드 파이프라인의 예시이다. 도 38은 예시적인 코어 서버와 연관된 예시적인 워크로드 조정 가능한 CPU의 성능을 조정하는 것의 예시이다. 도 39는 예시적인 네트워크 워크로드 최적화 설정들을 구현하는 예시적인 단일 소켓 시스템 및 예시적인 듀얼 소켓 시스템의 예시이다. 도 40은 본 개시내용의 교시에 따른 소프트웨어 정의 실리콘(software defined silicon) 제품들을 구현 및 관리 하기 위한 예시적인 시스템의 블록 다이어그램이다. 도 41은 도 40의 예시적인 시스템에 포함된 예시적인 소프트웨어 정의 실리콘 에이전트, 예시적인 제조업체 엔 터프라이즈 시스템 및 예시적인 고객 엔터프라이즈 시스템의 예시적인 구현들을 예시하는 블록 다이어그램이다. 도 42는 도 40 및/또는 도 41의 예시적인 시스템들에 의해 구현되는 예시적인 소프트웨어 정의 실리콘 관리 수 명 주기를 예시한다. 도 43은 하나 초과의 코어를 가질 수 있고, 통합 메모리 제어기를 가질 수 있으며, 통합 그래픽을 가질 수 있는 예시적인 프로세서의 실시예들의 블록 다이어그램을 예시한다. 도 44a는 본 개시내용의 예들에 따른 예시적인 순차 파이프라인 및 예시적인 레지스터 리네이밍, 비순차 발행/ 실행 파이프라인 양쪽 모두를 예시하는 블록 다이어그램이다. 도 44b는 본 개시내용의 예들에 따른 프로세서에 포함될 순차 아키텍처 코어의 예시적인 실시예 및 예시적인 레 지스터 리네이밍, 비순차 발행/실행 아키텍처 코어 양쪽 모두를 예시하는 블록 다이어그램이다. 도 45는, 도 44b의 실행 유닛(들) 회로부와 같은, 실행 유닛(들) 회로부의 예들을 예시한다. 도 46은 일부 예들에 따른 예시적인 레지스터 아키텍처의 블록 다이어그램이다. 도 47은 명령어 포맷의 실시예들을 예시한다. 도 48은 주소 지정 필드의 실시예들을 예시한다.도 49는 제1 프리픽스의 실시예들을 예시한다. 도 50a 내지 도 50d는 도 49의 제1 프리픽스의 예시적인 필드들의 실시예들을 예시한다. 도 51a 및 도 51b는 제2 프리픽스의 실시예들을 예시한다. 도 52는 제3 프리픽스의 실시예들을 예시한다. 도 53은 본 개시내용의 실시예들에 따른 소스 명령어 세트 내의 바이너리 명령어들을 타깃 명령어 세트 내의 바 이너리 명령어들로 변환하기 위한 소프트웨어 명령어 변환기의 사용을 대비시키는 블록 다이어그램을 예시한다. 도 54는 본 명세서에서 개시되는 예들로부터 이익을 얻을 수 있는 예시적인 5G 네트워크 워크로드들을 묘사하는 테이블을 묘사한다. 도 55는 예시적인 워크로드 조정 가능한 CPU와 연관된 예시적인 데이터 흐름 다이어그램이다. 도 56은 예시적인 워크로드 조정 가능한 CPU와 연관된 다른 예시적인 데이터 흐름 다이어그램이다. 도 57은 CPU를 네트워크 최적화 가능한 CPU로서 식별하도록 예시적인 워크로드 조정 가능한 CPU를 구현하기 위 해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 도 58은 예시적인 사용 조건 및 활성화 배열에 기초하여 CPU 특징(들)을 활용하도록 예시적인 워크로드 조정 가 능한 CPU를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 도 59는 워크로드에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하 기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 도 60은 적용 비율에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하 기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 도 61은 적용 비율에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하 기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 다른 플로차트이다. 도 62는 워크로드에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하 기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 도 63은 워크로드에 기초하여 코어, 언코어, 또는 CLM 중 적어도 하나의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 도 64는 머신 러닝 모델에 기초하여 워크로드 조정 가능한 CPU를 구성하도록 예시적인 워크로드 조정 가능한 CPU를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 도 65는 워크로드 파라미터들에 기초하여 워크로드 조정 가능한 CPU의 작동을 수정하도록 예시적인 워크로드 조 정 가능한 CPU를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트이다. 도 66 및 도 67은 워크로드에 기초하여 CPU 코어(들)의 작동을 수정하도록 예시적인 워크로드 조정 가능한 CPU 를 구현하기 위해 실행될 수 있는 예시적인 머신 판독 가능 명령어들을 나타내는 플로차트들을 묘사한다. 도 68은 예시적인 시스템의 예들을 예시한다. 도 69는 예시적인 워크로드 조정 가능한 CPU를 구현하기 위해 도 55 내지 도 67의 예시적인 머신 판독 가능 명 령어들을 실행하도록 구성된 예시적인 프로세싱 플랫폼의 블록 다이어그램이다. 도 70은 예시적인 워크로드 조정 가능한 CPU를 구현하기 위해 도 55 내지 도 67의 예시적인 머신 판독 가능 명 령어들을 실행하도록 구성된 다른 예시적인 프로세싱 플랫폼 시스템의 블록 다이어그램이다. 도 71은 소프트웨어(예를 들면, 도 55 내지 도 67의 예시적인 컴퓨터 판독 가능 명령어들에 대응하는 소프트웨 어)를 소비자들(예를 들면, 라이선스, 판매 및/또는 사용을 위해), 소매업체들(예를 들면, 판매, 재판매, 라이 선스 및/또는 서브 라이선스를 위해), 및/또는 OEM들(original equipment manufacturers)(예를 들면, 예를 들 어, 소매업체들 및/또는 직접 구매 고객들에 배포될 제품들에 포함시키기 위해)과 같은 클라이언트 디바이스들 에게 배포하기 위한 예시적인 소프트웨어 배포 플랫폼의 블록 다이어그램이다."}
