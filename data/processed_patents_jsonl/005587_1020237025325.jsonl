{"patent_id": "10-2023-7025325", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0113851", "출원번호": "10-2023-7025325", "발명의 명칭": "행렬들의 공간적 장소 변환", "출원인": "그록, 인크.", "발명자": "로스, 조나단, 알렉산더"}}
{"patent_id": "10-2023-7025325", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "커널과의 컨볼루션을 위한 입력 텐서(input tensor)를 수신하는 단계;상기 입력 텐서를 하나 이상의 타일들로 분할하는 단계; 및평탄화 된 입력 스트림을 생성하기 위해 상기 하나 이상의 타일들의 값들을 벡터들로 평탄화하는 단계를 포함하는 방법."}
{"patent_id": "10-2023-7025325", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 방법은 커널과 컨볼루션될 입력 텐서의 커널 크기 타일의 입력 값들 세트를 나타내는 병렬 벡터들 세트를 포 함하는 평탄화 된 입력 스트림에 액세스하는 단계를 포함한다. 커널에서 값들을 순열하여 생성된 확장된 커널이 수신된다. 출력의 커널 크기 타일에 대한 출력 값 위치에 각각 대응하고 입력 값에 액세스하기 위해 평탄화 된 입력 스트림의 벡터를 나타내는 벡터 세트를 포함하는 제어 패턴이 수신된다. 본 방법은 출력의 각 커널 크기 타 일의 각 출력 위치에 대해 제어 패턴에 의해 선택된 평탄화 된 입력 스트림의 값을 포함하는 제1 벡터와 출력 위 치에 대응하는 확장 커널에서 벡터에 대응하는 제2 벡터 사이의 내적을 생성하는 단계를 더 포함한다."}
{"patent_id": "10-2023-7025325", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 일반적으로 행렬 계산에 관한 것이고, 구체적으로는 행렬들의 공간적 장소 변환에 관한 것이다."}
{"patent_id": "10-2023-7025325", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "현대 컴퓨터 신경망 네트워크는 다중 계층을 포함한다. 각 레이어에는 많은 수의 입력 값이 포함될 수 있으며, 이후 레이어에 대한 입력 역할을 하는 출력(즉, 활성화)을 생성하기 위해 나중에 변환된다. 일반적으로 이러한 입력 및 출력 값은 행렬로 표시된다(예: 1차원에서 다중 차원의 값 배열). 이러한 입력 값에 대해 수행되는 일 반적인 변환은 컨볼루션(Convolution)이다. 컨볼루션은 가중치 값을 포함하고 행렬로 표시될 수도 있는 커널을 입력의 인접한 값에 적용하여 출력 값을 생성한다. 이는 입력의 모든 값(가중치에 의해 수정됨)에 대해 반복되 어 출력 값 세트를 생성한다. 그러나 커널이 여러 출력을 생성하기 위해 동일한 입력 값을 여러 번 가로지르거 나 미끄러지기 때문에 인접한 값을 여러 번 읽어야 해서 단순한 접근 방식을 사용하여 실행하면 계산 비용이 많 이 들 수 있다. 따라서 커널에 의해 가중치에 의해 수정된 입력 값의 컨볼루션을 보다 효율적으로 계산하여 출력 값을 생성할 수 있는 시스템이 요구된다."}
{"patent_id": "10-2023-7025325", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "일 실시예에 따른 방법은, 커널과의 컨볼루션을 위한 입력 텐서(input tensor)를 수신하는 단계; 상기 입력 텐 서를 각 타일이 상기 커널과 동일한 크기를 갖는 하나 이상의 타일들로 분할하는 단계; 및 평탄화 된 입력 스트 림을 생성하기 위해 상기 하나 이상의 타일들의 값들을 벡터들로 평탄화하는 단계를 포함할 수 있다. 방법은 커널을 사용하는 입력 텐서의 컨볼루션 출력이 입력 텐서와 동일한 크기를 갖도록 상기 입력 텐서에 패 딩 값들을 채우는 단계를 더 포함할 수 있다. 방법은 상기 입력 텐서의 각 차원의 크기가 상기 커널의 대응하는 차원의 정수 배수가 되도록 상기 입력 텐서를 패딩 값들로 채우는 단계를 더 포함할 수 있다. 방법은 상기 입력 텐서의 각 차원의 후행 엣지(edge)를 대응하는 차원의 상기 커널의 상기 크기와 동일한 너비 를 갖는 패딩 값들로 채우는 단계를 더 포함할 수 있다. 상기 패딩 값들은 0일 수 있다. 상기 커널의 제1 측면 및 제2 측면은 수직이고, 상기 제1 측면은 상기 제2 측면과 다른 길이이며, 상기 방법은: 상기 입력 텐서를 가로질러 상기 커널의 상기 스트라이드 방향과 정렬되는 순서로 상기 입력 텐서를 나누는 단 계를 더 포함할 수 있다. 상기 커널의 제1 측면 및 제2 측면은 수직이고, 상기 제1 측면은 상기 제2 측면과 다른 길이이며, 상기 방법은: 상기 입력 텐서를 가로질러 상기 커널의 상기 스트라이드 방향과 직교하는 순서로 입력 텐서를 나누는 단계를더 포함할 수 있다. 하나 이상의 타일들에서 상기 값들을 평탄화하는 단계는: 상기 입력 텐서의 상기 하나 이상의 타일들 각각에 대 해; 정의된 순서로 상기 타일의 상기 값들에 액세스하는 단계; 상기 정의된 순서에 따라 벡터의 상기 값들을 배 열하는 단계; 및 상기 평탄화 된 입력 스트림을 생성하기 위해 상기 하나 이상의 타일들 각각에 대응하는 상기 하나 이상의 벡터를 병렬로 배열하는 단계를 포함할 수 있다. 상기 정의된 순서는 행-중심 순서, 열-중심 순서 및 통로-중심 순서 중 적어도 하나이고, 상기 통로-중심 순서 는 먼저 상기 3D 타일의 상기 깊이에 해당하는 축을 따라 타일을 지정하고, 이어서 상기 3D 타일의 상기 너비 및 상기 높이에 해당하는 축을 따라 타일을 지정하여 3차원 (3D) 요소들에 액세스할 수 있다. 상기 평탄화 된 입력 스트림은 버퍼에 저장되고, 상기 버퍼는 하드웨어 가속 프로세서에 의해 판독되어 1) 제어 패턴에 의해 선택된 상기 평탄화 된 입력 스트림의 값들과 곱셈-덧셈 연산을 수행하고, 2) 버퍼에 입력 텐서의 값을 여러 번 로드하지 않고 컨볼루션 연산의 출력을 생성하기 위한 커널 확장하는 단계를 포함할 수 있다. 상기 입력 텐서는 복수의 채널들을 가지며, 상기 커널은 복수의 필터들을 가지며, 상기 입력 채널들은 복수의 출력 채널들을 갖는 출력을 생성하기 위해 각 커널 필터와 컨볼루션될 수 있다. 일 실시예에 따른 시스템은 프로세서를 포함하고, 상기 프로세서는, 커널과의 컨볼루션을 위한 입력 텐서를 수 신하고, 상기 입력 텐서를 상기 커널과 동일한 크기를 갖는 하나 이상의 타일들로 분할하고; 및 상기 평탄화 된 입력 스트림을 생성하기 위해 상기 하나 이상의 타일들의 상기 값들을 벡터들로 평탄화하도록 구성된 입력 스트 림 생성기를 포함할 수 있다. 상기 입력 스트림 생성기는 상기 커널을 사용하는 상기 입력 텐서의 상기 컨볼루션 출력이 상기 입력 텐서와 동 일한 크기를 갖도록 상기 입력 텐서를 패딩 값들로 채우도록 더 구성될 수 있다. 상기 입력 스트림 생성기는 상기 입력 텐서의 상기 각 차원 크기가 상기 커널의 해당 차원의 정수 배수가 되도 록 상기 입력 텐서를 패딩 값들로 채우도록 더 구성될 수 있다. 상기 입력 스트림 생성기는 상기 입력 텐서의 각 차원의 후행 엣지(edge)를 상기 대응하는 차원의 상기 커널의 상기 크기와 동일한 너비를 갖는 패딩 값들로 채우도록 더 구성될 수 있다. 상기 패딩 값은 0일 수 있다. 상기 커널의 제1 측면 및 제2 측면은 수직이고, 상기 제1 측면은 상기 제2 측면과 다른 길이이며, 상기 입력 스 트림 생성기는: 상기 입력 텐서를 가로질러 상기 커널의 상기 스트라이드 방향과 정렬된 순서로 입력 텐서를 나 누도록 더 구성될 수 있다. 상기 커널의 제1 측면 및 상기 커널의 제2 측면은 수직이고, 상기 제1 측면은 상기 제2 측면과 다른 길이이며, 상기 입력 스트림 생성기는 상기 입력 텐서를 가로질러 상기 커널의 상기 스트라이드 방향과 직교하는 순서로 입력 텐서를 나누도록 더 구성될 수 있다. 상기 입력 스트림 생성기는 상기 입력 텐서의 상기 하나 이상의 타일들 각각에 대해: 정의된 순서로 상기 타일 의 상기 값들에 액세스하고; 상기 정의된 순서에 따라 상기 벡터의 값들을 정렬하고; 및 상기 평탄화 된 입력 스트림을 생성하기 위해 상기 하나 이상의 타일들 각각에 대응하는 하나 이상의 벡터를 병렬로 정렬하도록 더 구성될 수 있다. 상기 정의된 순서는 행-중심 순서, 열-중심 순서 및 통로-중심 순서 중 적어도 하나이고, 상기 통로-중심 순서 는 먼저 상기 3D 타일의 상기 깊이에 해당하는 축을 따라 타일을 지정하고 이어서 상기 3D 타일의 상기 너비 및 상기 높이에 해당하는 축을 따라 타일을 지정하여 3차원 (3D) 요소에 액세스할 수 있다. 일 실시예에 따른 방법은 입력 텐서와의 컨볼루션을 위한 커널을 수신하는 단계; 상기 커널의 상기 제1 차원에 대해, 각 단일 차원 벡터의 모든 회전들을 포함하는 상기 커널의 각 단일 차원 벡터에 대한 값들의 정사각형 블 록 (순환 행렬)을 생성하는 단계; 상기 커널의 각 추가 차원에 대해: 바로 이전 차원의 블록들을 상기 차원의 상기 축에 평행한 벡터를 따라 정렬되는 상기 바로 이전 차원의 블록을 포함하는 블록 세트들로 그룹화하는 단 계; 상기 추가 차원에 대해, 각 블록은 상기 바로 이전 차원의 상기 각 블록들 세트들 내의 모든 블록들 회전들 을 포함하는 하나 이상의 값의 블록들을 생성하는 단계; 및 상기 확장된 커널로서 상기 커널의 상기 추가 차원 들의 상기 마지막 차원에 대응하는 상기 값들의 블록을 출력하는 단계를 포함할 수 있다.상기 커널은 1-차원 (1D) 행렬이고, 상기 확장된 커널은 복수의 병렬 벡터들을 포함하고, 상기 복수의 병렬 벡 터들의 각 벡터는 상기 커널의 다른 회전 순열이고, 상기 확장된 커널은 각 차원의 크기는 상기 커널의 상기 크 기와 같을 수 있다. 상기 커널은 2-차원 (2D) 행렬이며, 상기 확장된 커널은: 각 제1 벡터는 블록들 그룹에서 블록들의 회전 순열을 가지며, 상기 블록들 그룹의 상기 각 블록은 상기 커널의 벡터 (커널 벡터)에 대응하고, 각 블록은 대응하는 커 널 벡터의 모든 회전 순열들을 나타내는 제2 벡터 세트를 가지며, 각 제2 벡터는 대응하는 커널 벡터의 하나의 회전 순열을 나타내며, 여기서, 상기 제1 벡터들 세트는 상기 블록들 그룹의 상기 블록들의 모든 회전 순열들을 포함하는 제1 벡터들 세트를 가질 수 있다. 상기 커널은 2-차원 (2D) 행렬이며, 상기 확장된 커널은: 각 제1 벡터는 제1 블록들 그룹에서 제1 블록들의 회 전 순열을 가지며, 상기 제1 블록들 그룹의 각 제1 블록은 제2 벡터 세트의 제2 벡터들에 대응하고, 각 제2 벡 터는 제2 블록 그룹의 제2 블록에 대응하고, 여기서 상기 제2 블록 그룹의 각 제2 블록은 상기 커널의 벡터 (커 널 벡터)에 대응하고, 각 제2 블록은 제2 블록의 상기 대응하는 커널 벡터의 모든 회전 순열들을 나타내는 제3 벡터들 세트를 가지며, 각 제3 벡터는 상기 대응하는 커널 벡터의 하나의 회전 순열을 나타내며, 각 제2 벡터들 세트는 상기 대응하는 제2 블록들 그룹의 제2 블록의 모든 회전 순열을 포함하고, 상기 제1 벡터들 세트는 상기 제1 블록들 그룹의 제1 블록들의 모든 회전 순열을 포함하는 제1 벡터들 세트를 가질 수 있다. 상기 각 단일 차원 벡터는 상기 커널의 행, 상기 커널의 열, 상기 커널의 대각선 및 상기 커널의 통로 중 적어 도 하나인 고유 벡터이며, 상기 커널의 통로는 커널의 깊이 (3 차원)에 대응하는 축을 따라 정렬된 커널의 벡터 일 수 있다. 상기 커널은 다중 커널 필터들을 포함하며; 커널의 각 커널 필터는 커널을 포함하고, 커널의 커널 필터로부터 생성된 복수의 확장된 커널들 각각의 확장된 커널을 생성하는 단계를 포함할 수 있다. 상기 복수의 확장된 커널들 각각의 확장된 커널은 평탄화 된 입력 스트림의 하나 이상의 채널을 컨볼루션하는데 사용되며, 상기 평탄화 된 입력 스트림은 입력 텐서의 평탄화 된 버전일 수 있다. 상기 하나 이상의 채널을 갖는 입력 텐서에 대한 상기 커널의 컨볼루션의 출력은 다중 출력을 생성하고, 상기 다중 출력 각각은 단일 출력 활성화로 결합될 수 있다. 일 실시예에 따른 방법은, 버퍼로부터 입력 텐서의 수정된 버전인, 각 입력 텐서의 대응하는 커널 크기 타일로 부터의 입력 값을 사용하여 각각 생성된 평탄화 된 병렬 벡터를 갖는 입력 스트림에 액세스 하는 단계; 입력 텐 서의 타켓 커널 크기 타일의 각 출력 값 위치에 대해 버퍼 내의 평탄화 된 입력 스트림의 특정된 타일에 액세스 하기 위한 지연량을 나타내는 지연 값을 갖는 제어 패턴에 액세스 하는 단계; 및 상기 입력 텐서의 상기 타겟 커널 크기 타일의 각 출력 값 위치에 대해 상기 프로세서를 통해 상기 확장된 커널의 대응하는 벡터와 출력 값 위치에 대한 상기 출력 값을 생성하기 위해 상기 출력 값 위치에 대해 상기 선택된 제어 패턴에서 해당 지연 값 세트를 사용하여 상기 평탄화 된 입력 스트림에서 선택된 값들의 벡터 간의 내적을 실행하는 단계를 포함할 수 있다. 상기 확장된 커널은 상기 확장된 커널을 생성하는데 사용된 상기 대응하는 커널의 상기 차원의 상기 크기의 상 기 곱과 동일한 길이를 갖는 2 차원 정사각형 행렬일 수 있다. 일 실시예에 따른 방법은, 프로세서를 포함하고, 상기 프로세서는, 입력 텐서와의 컨볼루션을 위한 커널을 수신 하고, 상기 커널의 상기 제1 차원에 대해, 각 단일 차원 벡터의 모든 회전들을 포함하는 상기 커널의 각 단일 차원 벡터에 대한 값들의 정사각형 블록 (순환 행렬)을 생성하고; 상기 커널의 각 추가 차원에 대해: 바로 이전 차원의 블록들을 상기 차원의 상기 축에 평행한 벡터를 따라 정렬되는 상기 바로 이전 차원의 블록을 포함하는 블록 세트들로 그룹화하고; 상기 추가 차원에 대해, 각 블록은 상기 바로 이전 차원의 상기 각 블록들 세트들 내의 모든 블록들 회전들을 포함하는 하나 이상의 값의 블록들을 생성하고; 및 상기 확장된 커널로서 상기 커널 의 상기 추가 차원들의 상기 마지막 차원에 대응하는 상기 값들의 블록을 출력하도록 구성된 확장된 커널 생성 기를 가질 수 있다. 상기 커널은 1-차원 (1D) 행렬이고, 상기 확장된 커널은 복수의 병렬 벡터들을 포함하고, 상기 복수의 병렬 벡 터들의 각 벡터는 상기 커널의 다른 회전 순열이고, 상기 확장된 커널은 각 차원의 크기는 상기 커널의 상기 크 기와 같을 수 있다. 상기 커널은 2-차원 (2D) 행렬이며, 상기 확장된 커널은: 각 제1 벡터는 블록들 그룹에서 블록들의 회전 순열을 가지며, 상기 블록들 그룹의 상기 각 블록은 상기 커널의 벡터 (커널 벡터)에 대응하는 제1 벡터들 세트이고 각 블록은 대응하는 커널 벡터의 모든 회전 순열들을 나타내는 제2 벡터 세트를 가지며, 각 제2 벡터는 대응하는 커널 벡터의 하나의 회전 순열을 나타내며, 여기서, 상기 제1 벡터들 세트는 상기 블록들 그룹의 상기 블록들의 모든 회전 순열들을 포함하는 제1 벡터들 세트를 가질 수 있다. 상기 커널은 3-차원 (3D) 행렬이며, 상기 확장된 커널은: 각 제1 벡터는 블록들 그룹에서 블록들의 회전 순열을 가지며 여기서, 여기서, 상기 제1 블록들 그룹의 각 제1 블록은 제2 벡터 세트의 제2 벡터들에 대응하고, 각 제 2 벡터는 제2 블록 그룹의 제2 블록에 대응하고, 여기서 상기 제2 블록 그룹의 각 제2 블록은 상기 커널의 벡터 (커널 벡터)에 대응하고, 각 제2 블록은 제2 블록의 상기 대응하는 커널 벡터의 모든 회전 순열들을 나타내는 제3 벡터들 세트를 가지며, 각 제3 벡터는 상기 대응하는 커널 벡터의 하나의 회전 순열을 나타내며, 각 제2 벡 터들 세트는 상기 대응하는 제2 블록들 그룹의 제2 블록의 모든 회전 순열을 포함하고, 상기 제1 벡터들 세트는 상기 제1 블록들 그룹의 제1 블록들의 모든 회전 순열을 포함하는 제1 벡터들 세트를 가질 수 있다. 상기 각 단일 차원 벡터는 상기 커널의 행, 상기 커널의 열, 상기 커널의 대각선 및 상기 커널의 통로 중 적어 도 하나인 고유 벡터이며, 여기서 커널의 통로는 커널의 벡터이고, 상기 커널의 깊이 (3 차원)에 대응하는 축을 따라 정렬될 수 있다. 상기 커널은 다중 커널 필터들을 포함하고, 상기 확장된 커널 생성기는 상기 커널의 상기 각 커널 필터는 커널 을 포함하도록 커널의 커널 필터로부터 생성된 복수의 확장된 커널을 생성하도록 더 구성될 수 있다. 상기 복수의 확장된 커널의 각각의 확장된 커널은 평탄화 된 입력 스트림의 하나 이상의 채널을 컨볼루션하는데 사용되며, 상기 평탄화 된 입력 스트림은 입력 텐서의 평탄화 된 버전일 수 있다. 상기 하나 이상의 채널을 갖는 입력 텐서에 대한 상기 커널의 컨볼루션의 출력은 다중 출력을 생성하고, 상기 다중 출력 각각은 단일 출력 활성화로 결합될 수 있다. 상기 확장된 커널 생성기는 버퍼로부터 평탄화 된 입력 스트림에 액세스하고, -상기 평탄화 된 입력 스트림은 입력 텐서의 수정된 버전이고, 상기 평탄화 된 입력 스트림은 각 입력 텐서의 대응하는 커널 크기 타일로부터의 입력 값들을 사용하여 생성된 평탄화 된 병렬 벡터들을 갖고-; 입력 텐서의 타겟 커널 크기 타일의 각 출력 값 위치에 대해 버퍼에서 평탄화 된 입력 스트림의 지정된 타일에 액세스하기위한 지연량을 나타내는 지연 값을 갖 는 제어 패턴에 액세스하고; 및 상기 입력 텐서의 상기 타겟 커널 크기 타일의 각 출력 값 위치에 대해 상기 프 로세서를 통해 상기 확장된 커널의 대응하는 벡터와 출력 값 위치에 대한 상기 출력 값을 생성하기 위해 상기 출력 값 위치에 대해 상기 선택된 제어 패턴에서 해당 지연 값 세트를 사용하여 상기 평탄화 된 입력 스트림에 서 선택된 값들의 벡터 간의 내적을 실행하도록 더 구성될 수 있다. 상기 확장된 커널은 상기 확장된 커널을 생성하는데 사용되는 상기 대응하는 커널의 상기 차원의 상기 크기의 상기 곱과 동일한 길이를 갖는 2차원 정사각형 행렬일 수 있다. 일 실시예에 따른 방법은, 출력 활성화를 생성하기 위해 입력 텐서와 컨볼루션 된 상기 커널의 각 차원들에 대 해 하나 이상의 크기들을 수신하는 단계; 상기 입력 텐서의 상기 컨볼루션에 대한 출력 값들을 계산하는 데 사 용되는 각 차원이 상기 커널의 상기 너비와 상기 높이의 상기 곱과 동일한 크기인 정사각형 행렬인, 다음에 의 해 생성되는 제어 패턴을 생성하는 단계; 상기 제어 패턴에서 상기 위치의 좌표와 상기 커널의 상기 각 차원의 상기 하나 이상의 크기들을 기반으로 상기 커널과의 상기 컨볼루션에 대해 평탄화 된 입력 텐서의 값에 액세스 할 위치를 나타내는 상기 제어 패턴의 각 위치에 대한 상기 값을 생성하는 단계를 포함할 수 있다. 상기 제어 패턴의 각 위치는 행 번호 및 열 번호를 가지며, 상기 제어 패턴 생성기는 상기 커널의 각 차원에 대 해 상기 행 번호, 상기 열 번호 및 상기 커널의 상기 각 차원의 상기 하나 이상의 크기들을 기반으로 테스트 결 과를 결정하는 단계-각 테스트는 상기 평탄화 된 입력 스트림의 값에 액세스 할 상대적 오프셋 양을 나타내는 이진 출력을 생성하며, 상기 평탄화 된 입력 스트림은 상기 입력 텐서의 커널 크기 타일을 평탄화하여 상기 입 력 텐서에서 생성된다; 및 상기 커널의 각 차원에 대한 상기 테스트의 상기 이진 출력 조합인 상기 제어 패턴의 해당 위치에 대한 상기 값을 생성하는 단계를 더 포함할 수 있다. 상기 각 테스트는 상기 위치의 상기 행 번호를 사용하는 제1 모듈로 계산과 상기 위치의 상기 열 번호를 사용하 는 제2 모듈로 계산을 비교하는 부등 테스트일 수 있다. 상기 제1 모듈로 계산은 상기 커널의 각 차원들에 대한 상기 행 번호와 상기 하나 이상의 크기들 사이의 모듈로 (modulo)이고, 상기 제2 모듈로 계산은 상기 커널의 각 차원들에 대한 상기 열 번호와 하나 이상의 크기들 사이의 모듈로일 수 있다. 상기 커널은 2차원 커널이고, 각 차원에 대응하는 상기 테스트의 상기 제1 테스트는 r mod h < c mod w 이고 여 기서 각 차원에 해당하는 상기 테스트의 상기 제2 테스트는 floor((r mod (h * w)) / h) < floor((c mod (h * w)) / w) 이고 여기서 r은 행 번호, c는 상기 열 번호, h는 상기 커널의 상기 높이, w는 상기 커널의 상기 너비 일 수 있다. 상기 제어 패턴은 복수의 벡터들을 포함하고, 상기 복수의 벡터들의 상기 벡터의 수는 상기 출력 활성화의 커널 크기 타일 내의 출력 값 위치의 수에 대응할 수 있다. 상기 복수의 벡터들의 각 벡터 내의 상기 값들은 지연 값들에 대응하고, 각각의 지연 값은 평탄화 된 입력 스트 림에서 개별 입력 값에 액세스하기 위한 지연의 양을 나타내며, 상기 평탄화 된 입력 스트림은 입력 텐서에서 생성된 병렬 벡터들 세트를 포함하고, 상기 지연량은 상기 평탄화 된 입력 스트림 내의 상기 병렬 벡터들 중 하 나를 특정할 수 있다. 상기 지연 값들은 다음과 같이 상기 출력 활성화의 커널 크기 타일의 각 출력 값 위치에 대한 출력 값을 생성하 는 데 사용되는 방법으로서, 일 실시예에 따른 방법은, 생성될 상기 출력 값에 대응하는 상기 출력 값 위치에 대해, 그 출력 값 위치에 대응하는 상기 제어 패턴의 벡터를 선택하는 단계; 상기 제어 패턴의 상기 선택된 벡 터 내의 상기 지연 값들에 액세스하는 단계로, 각각의 지연 값은 상기 출력 값을 생성하는 데 사용되는 각 입력 값에 액세스 할 상기 평탄화 된 입력 스트림 내의 병렬 벡터를 나타내는 단계; 상기 액세스된 입력 값들과 확장 된 커널의 벡터 사이의 내적을 실행하여 상기 출력 활성화의 상기 커널 크기 타일의 상기 출력 값 위치에 상기 출력 값을 생성하는 단계를 포함할 수 있다. 상기 확장된 커널은 계층적 블록들 세트들을 포함하도록 상기 커널을 수정함으로써 생성되며, 상기 계층적 블록 들 세트의 각 블록은 해당 블록의 노드들인 블록의 모든 회전 순열들을 포함하며, 상기 계층적 블록들 세트의 상기 잎들은 상기 커널들의 개별 벡터들의 모든 회전 순열들을 포함하는 블록이며, 상기 계층적 블록들 세트의 각 블록은 상기 커널 내에서 해당 블록이 나타내는 상기 차원의 축에 평행한 벡터와 정렬된 블록인 노드가 있을 수 있다. 상기 제어 패턴은 입력 텐서를 컨볼루션하는데 사용되는 대응하는 커널의 상기 차원의 상기 크기의 상기 곱과 동일한 길이를 갖는 2차원 정사각형 행렬일 수 있다. 상기 제어 패턴의 상기 지연 값들이 배열되는 상기 순서는 평탄화 된 입력 스트림을 생성하기 위해 상기 입력 텐서의 커널 크기 타일에 액세스하는 정의된 순서를 기반으로 할 수 있다. 상기 정의된 순서는 행-중심 순서, 열-중심 순서 및 통로-중심 순서 중 적어도 하나이고, 상기 통로-중심 순서 는 먼저 상기 3D 타일의 상기 깊이에 해당하는 축을 따라 타일을 지정하고 이어서 상기 3D 타일의 상기 너비 및 상기 높이에 해당하는 축을 따라 타일을 지정하여 3차원 (3D) 요소에 액세스할 수 있다. 일 실시예에 따른 시스템은, 프로세서를 포함하고, 상기 프로세서는, 출력 활성화를 생성하기 위해 입력 텐서와 컨볼루션된 커널의 각 차원에 대해 하나 이상의 크기들을 수신하고; 상기 입력 텐서의 상기 컨볼루션에 대한 출 력 값들을 계산하는 데 사용되는 각 차원이 상기 커널의 상기 너비와 상기 높이의 상기 곱과 동일한 크기인 정 사각형 행렬인, 다음에 의해 생성되는 제어 패턴을 생성하고; 상기 제어 패턴에서 상기 위치의 좌표와 상기 커 널의 상기 각 차원의 상기 하나 이상의 크기들을 기반으로 상기 커널과의 상기 컨볼루션에 대해 평탄화 된 입력 텐서의 값에 액세스 할 위치를 나타내는 상기 제어 패턴의 각 위치에 대한 상기 값을 생성하도록 구성된 제어 패턴 생성기를 가질 수 있다. 상기 제어 패턴의 각 위치는 행 번호 및 열 번호를 가지며, 상기 제어 패턴 생성기는; 커널의 각 차원에 대해 행 번호, 열 번호 및 커널의 각 차원의 하나 이상의 크기를 기반으로 각 테스트가 입력 텐서의 커널 크기 타일 을 평탄화하여 입력 텐서에서 생성된 평탄화 된 입력 스트림, 평면화된 입력 스트림의 값에 액세스 할 상대적 오프셋의 양을 나타내는 이진 출력을 생성하는 테스트 결과를 결정하고; 상기 커널의 각 차원에 대한 상기 테스 트의 상기 이진 출력들 조합인 상기 제어 패턴의 해당 위치에 대한 상기 값을 생성하도록 더 구성될 수 있다. 상기 각 테스트는 상기 위치의 상기 행 번호를 사용하는 제1 모듈로 계산과 상기 위치의 상기 열 번호를 사용하 는 제2 모듈로 계산을 비교하는 부등 테스트일 수 있다. 상기 제1 모듈로 계산은 상기 커널의 각 차원들에 대한 상기 행 번호와 상기 하나 이상의 크기들 사이의 모듈로 이고, 상기 제2 모듈로 계산은 상기 커널의 각 차원들에 대한 상기 열 번호와 하나 이상의 크기들 사이의 모듈로일 수 있다. 상기 커널은 2차원 커널이고, 각 차원에 대응하는 상기 테스트의 상기 제1 테스트는 r mod h < c mod w 이고 여 기서 각 차원에 해당하는 상기 테스트의 상기 제2 테스트는 floor((r mod (h * w)) / h) < floor((c mod (h * w)) / w) 이고 상기 r은 행 번호, c는 상기 열 번호, h는 상기 커널의 상기 높이, w는 상기 커널의 상기 너비일 수 있다. 상기 제어 패턴은 복수의 벡터들을 포함하고, 상기 복수의 벡터들의 상기 벡터의 수는 상기 출력 활성화의 커널 크기 타일 내의 출력 값 위치들의 수에 대응할 수 있다. 상기 복수의 벡터들의 각 벡터 내의 상기 값들은 지연 값들에 대응하고, 각각의 지연 값은 평탄화 된 입력 스트 림에서 개별 입력 값에 액세스하기 위한 지연의 양을 나타내며, 상기 평탄화 된 입력 스트림은 입력 텐서에서 생성된 병렬 벡터들 세트를 포함하고, 상기 지연량은 상기 평탄화 된 입력 스트림 내의 상기 병렬 벡터들 중 하 나를 특정할 수 있다. 상기 지연 값들은: 생성될 상기 출력 값에 대응하는 상기 출력 값 위치에 대해, 그 출력 값 위치에 대응하는 상 기 제어 패턴의 벡터를 선택하고; 상기 제어 패턴의 상기 선택된 벡터 내의 상기 지연 값들에 액세스하고,-각각 의 지연 값은 상기 출력 값을 생성하는 데 사용되는 각 입력 값에 액세스 할 상기 평탄화 된 입력 스트림 내의 병렬 벡터를 나타내고-; 상기 출력 활성화의 상기 커널 크기 타일의 상기 출력 값 위치에 상기 출력 값을 생성 하기 위해 상기 액세스 된 입력 값들과 확장된 커널의 벡터 사이의 내적을 실행하도록 구성될 수 있다. 일 실시예에 따른 방법은, 버퍼로부터 각 벡터가 출력 활성화를 생성하기 위해 커널과 컨볼루션되어야 하는 입 력 텐서의 고유한 커널 크기 타일의 입력 값들 세트를 나타내는 병렬 벡터들 세트를 포함하는 평탄화 된 입력 스트림으로 액세스 하는 단계; 상기 커널로부터 값들을 순열함으로써 생성된 각 상기 출력 활성화의 커널 크기 타일의 출력 값 위치에 대응하는 벡터들을 가지는 확장 커널을 수신하는 단계; 각 벡터가 상기 출력 활성화의 상기 커널 크기 타일에 대한 상기 출력 값 위치에 대응하고, 각 벡터가 상기 컨볼루션에 대한 입력 값들에 액세 스하기 위해 평탄화 된 입력 스트림의 병렬 벡터를 나타내는 지연 값들을 포함하는 벡터들 세트를 포함하는 제 어 패턴을 수신하는 단계; 및 상기 출력 활성화의 각 커널 크기 타일의 각 출력 값 위치에 대해 상기 제어 패턴 의 상기 대응하는 벡터의 상기 지연 값들에 의해 선택된 상기 평탄화 된 입력 스트림의 값들을 포함하는 제1 벡 터와 상기 출력 값 위치에 대응하는 상기 확장 커널의 벡터에 대응하는 제2 벡터 간의 내적을 생성하는 단계를 포함할 수 있다. 상기 입력 텐서는 복수의 채널들을 포함하고, 상기 커널은 복수의 필터들을 포함하며, 상기 입력 텐서의 각 채 널은 상기 커널의 하나 이상의 필터들과 컨볼루션되어 복수의 출력 특성들로 출력 활성화를 생성할 수 있다. 상기 입력 텐서를 패딩 값들로 패딩하여 상기 입력 텐서의 상기 콘볼루션의 상기 출력 위치들이 상기 입력 텐서 의 모든 값 위치에 일치하도록 하고, 상기 콘볼루션의 상기 출력의 상기 크기가 상기 입력 텐서의 상기 크기와 일치하도록 하는 단계를 더 포함할 수 있다. 상기 입력 텐서의 상기 각 차원 크기가 상기 대응하는 상기 커널의 해당 차원의 정수 배수가 되도록 상기 입력 텐서에 패딩 값들을 채우는 단계를 더 포함할 수 있다. 상기 입력 텐서의 각 차원의 후행 엣지를 상기 대응하는 차원의 상기 커널의 상기 크기와 동일한 너비를 갖는 패딩 값들로 채우는 단계를 더 포함할 수 있다. 상기 평탄화 된 입력 스트림은, 상기 입력 텐서의 상기 하나 이상의 커널 크기들 타일 각각에 대해; 정의된 순 서로 상기 타일의 상기 값들에 액세스하는 단계; 상기 정의된 순서에 따라 벡터의 상기 값들을 배열하는 단계; 및 상기 평탄화 된 입력 스트림의 상기 병렬 벡터들을 생성하기 위해 상기 하나 이상의 타일들 각각에 대응하는 상기 하나 이상의 벡터들을 병렬로 배열하는 단계를 포함할 수 있다. 상기 정의된 순서는 행-중심 순서, 열-중심 순서 및 통로-중심 순서 중 적어도 하나이고, 상기 통로-중심 순서 는 먼저 상기 3D 타일의 상기 깊이에 해당하는 축을 따라 타일을 지정하고 이어서 상기 3D 타일의 상기 너비 및 상기 높이에 해당하는 축을 따라 타일을 지정하여 3차원 (3D) 요소에 액세스할 수 있다. 상기 확장된 커널은: 상기 커널의 제1 차원에 대해, 각 단일 차원 벡터의 모든 회전들을 포함하는 상기 커널의 각 단일 차원 벡터에 대한 값들의 정사각형 블록 (순환 행렬)을 생성하는 단계; 상기 커널의 각 추가 차원에 대 해: 상기 바로 이전 차원의 블록들을 각 블록들 세트가 상기 차원의 상기 축에 평행한 벡터를 따라 정렬되는 상 기 바로 이전 차원의 블록들을 포함하도록 블록 세트들로 그룹화하는 단계; 상기 추가 차원에 대해, 각 블록은상기 바로 이전 차원의 상기 각 블록 세트 내의 모든 블록 회전을 포함하는 하나 이상의 값의 블록들을 생성하 는 단계; 및 상기 커널의 상기 추가 차원에서 상기 마지막 차원에 해당하는 상기 값들의 블록을 상기 확장 커널 로 출력하는 단계를 포함할 수 있다. 상기 각 단일 차원 벡터는 상기 커널의 행, 상기 커널의 열, 상기 커널의 대각선 및 상기 커널의 통로 중 적어 도 하나인 고유 벡터이며, 여기서 커널의 통로는 커널의 벡터이고, 상기 커널의 깊이(3 차원)에 대응하는 축을 따라 정렬될 수 있다 상기 제어 패턴은 복수의 벡터들을 포함하고, 상기 복수의 벡터들의 상기 벡터의 수는 상기 출력 활성화의 커널 크기 타일 내의 출력 값 위치의 수에 대응할 수 있다. 상기 복수의 벡터들의 각 벡터 내의 상기 값들은 지연 값들에 대응하고, 각각의 지연 값은 평탄화 된 입력 스트 림에서 개별 입력 값에 액세스하기 위한 지연의 양을 나타내며, 상기 평탄화 된 입력 스트림은 입력 텐서에서 생성된 병렬 벡터들 세트를 포함하고, 상기 지연량은 상기 평탄화 된 입력 스트림 내의 상기 병렬 벡터들 중 하 나를 특정할 수 있다. 상기 복수의 벡터들의 각 벡터 내의 상기 값들은 지연 값들에 대응하고, 각각의 지연 값은 평탄화 된 입력 스트 림에서 개별 입력 값에 액세스하기 위한 지연의 양을 나타내며, 상기 평탄화 된 입력 스트림은 입력 텐서에서 생성된 병렬 벡터들 세트를 포함하고, 상기 지연량은 상기 평탄화 된 입력 스트림 내의 상기 병렬 벡터들 중 하 나를 특정할 수 있다. 일 실시예에 따른 시스템은 각 벡터가 출력 활성화를 생성하기 위해 커널과 컨볼루션되어야 하는 입력 텐서의 고유한 커널 크기 타일의 입력 값들 세트를 나타내는 병렬 벡터들 세트를 포함하는 평탄화 된 입력 스트림으로 액세스하고; 상기 커널로부터 값들을 순열함으로써 생성된 각 상기 출력 활성화의 커널 크기 타일의 출력 값 위 치에 대응하는 벡터들을 가지는 확장 커널을 수신하고; 각 벡터는 상기 출력 활성화의 상기 커널 크기 타일에 대한 상기 출력 값 위치에 대응하고, 각 벡터는 상기 컨볼루션에 대한 입력 값들에 액세스하기 위해 평탄화 된 입력 스트림의 병렬 벡터를 나타내는 지연 값들을 포함하는 벡터들 세트를 포함하는 제어 패턴을 수신하고; 및 상기 출력 활성화의 각 커널 크기 타일의 각 출력 값 위치에 대해 상기 제어 패턴의 상기 대응하는 벡터의 상기 지연 값들에 의해 선택된 상기 평탄화 된 입력 스트림의 값들을 포함하는 제1 벡터와 상기 출력 값 위치에 대응 하는 상기 확장 커널의 벡터에 대응하는 제2 벡터 간의 내적을 생성하는 단계를 수행하도록 구성된 곱셈-누적부 (multiply-accumulate unit)과 프로세서를 포함할 수 있다. 상기 입력 텐서는 복수의 채널들을 포함하고, 상기 커널은 복수의 필터들을 포함하며, 상기 입력 텐서의 각 채 널은 상기 커널의 하나 이상의 필터들과 컨볼루션되어 복수의 출력 특성들로 출력 활성화를 생성할 수 있다. 상기 곱셈-누적부는, 상기 입력 텐서를 패딩 값들로 패딩하여 상기 입력 텐서의 상기 콘볼루션의 상기 출력 위 치들이 상기 입력 텐서의 모든 값 위치에 일치하도록 하고, 상기 콘볼루션의 상기 출력의 상기 크기가 상기 입 력 텐서의 상기 크기와 일치하도록 더 구성될 수 있다. 상기 곱셈-누적부는, 상기 입력 텐서의 상기 각 차원 크기가 상기 커널의 해당 차원의 정수 배수가 되도록 상기 입력 텐서를 패딩 값들로 채우도록 더 구성될 수 있다. 상기 곱셈-누적부는, 상기 입력 텐서의 각 차원의 후행 가장자리를 상기 대응하는 차원의 상기 커널의 상기 크 기와 동일한 너비를 갖는 패딩 값들로 채우도록 더 구성될 수 있다. 상기 평탄화 된 입력 스트림은: 상기 입력 텐서의 상기 하나 이상의 커널 크기들 타일 각각에 대해; 정의된 순 서로 상기 타일의 상기 값들에 액세스하고; 상기 정의된 순서에 따라 벡터의 상기 값들을 정렬하고 ; 및 상기 평탄화 된 입력 스트림의 상기 병렬 벡터들을 생성하기 위해 상기 하나 이상의 타일들 각각에 대응하는 상기 하 나 이상의 벡터들을 병렬로 정렬하도록 구성될 수 있다. 상기 확장된 커널은: 상기 커널의 제1 차원에 대해, 각 단일 차원 벡터의 모든 회전들을 포함하는 상기 커널의 각 단일 차원 벡터에 대한 값들의 정사각형 블록 (순환 행렬)을 생성하고; 상기 커널의 각 추가 차원에 대해: 상기 바로 이전 차원의 블록들을 각 블록들 세트가 상기 차원의 상기 축에 평행한 벡터를 따라 정렬되는 상기 바로 이전 차원의 블록들을 포함하도록 블록 세트들로 그룹화하고; 상기 추가 차원에 대해, 각 블록은 상기 바 로 이전 차원의 상기 각 블록들 세트들 내의 모든 블록들 회전들을 포함하는 하나 이상의 값의 블록들을 생성하 고; 및 상기 커널의 상기 추가 차원에서 상기 마지막 차원에 해당하는 상기 값들의 블록을 상기 확장 커널로 출 력하도록 구성될 수 있다.상기 제어 패턴은 복수의 벡터를 포함하고, 상기 복수의 벡터의 수는 상기 출력 활성화의 커널 크기 타일에서의 출력 값 위치의 수에 대응할 수 있다."}
{"patent_id": "10-2023-7025325", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "도면 및 다음 설명은 단지 예시로서 바람직한 실시예에 관한 것이다. 통상의 기술자는 여기 개시된 구조들 및 방법들에 대안적인 실시예를 개시된 것의 원리로부터 벗어나지 않고 채용될 수 있는 실행 가능한 대안으로 인식 할 수 있다. 이제 여러 실시예들에 대한 참조들이 상세하게 이루어질 것이며 그 예들은 첨부 도면들에 예시되어 있다. 실행 가능한 모든 유사하거나 유사한 참조 번호들이 도면에서 사용될 수 있고, 이는 유사하거나 유사한 기능을 나타 낼 수 있음에 유의해야 한다. 도면들은 단지 예시의 목적으로 개시된 시스템(또는 방법)의 실시예를 묘사한다. 통상의 기술자는 여기에 설명된 구조들 및 방법들의 대안적인 실시예들이 여기에 설명된 원리를 벗어나지 않고 사용될 수 있음을 다음 설명으로부터 쉽게 인식할 수 있을 것이다. 예시 시스템 도 1은 일 실시예에 따라 출력활성화를 생성하기 위해 커널의 SLT(Spatial Locality transform)를 통한 입력 텐 서의 컨볼루션을 위한 시스템을 도시한다. 일 실시 예에서, 시스템 은 입력 텐서 , 커널 , 입력 스트림 생성기 , 평탄화 된 입력 스트림 , 확장된 커널 생성기 , 확장된 커널 , 제어 패턴 생성기 , 제어 패턴 , 곱셈-덧셈 유닛 , 출력 활성화 를 포함한다. 그러나, 다른 실 시 예에서 시스템 은 다른 요소를 포함하고/또는 도시 된 다른 요소의 다른 개수를 포함한다.입력 텐서는 출력 활성화를 생성하기 위해 컨볼루션 연산에서 커널에 의해 수정되는 입력 값들 의 모음이다. 일 실시예에서, 입력 텐서는 행렬로 표현된다. 행렬은 1차원, 2차원, 3차원 또는 3차원 이상을 가질 수 있으며 메모리에 배열로 저장될 수 있다. 배열의 차원 수는 행렬의 차원 수와 같을 수 있다. 다 른 실시예에서, 입력 텐서는 다중 입력 채널(104A-N)(일반적으로 입력 채널(들)로 지칭됨)을 갖는다. 각 입력 채널은 도시된 바와 같이 입력 채널(104A)에서 매트릭스의 차원 1-3(106A-C)과 같은 하나 이상의 차원의 매트릭스를 포함한다. 출력 활성화와 같은 출력 활성화를 생성하기 위해 컨볼루션 연산에서 커널이 입력 텐서에 적용 된다. 컨볼루션 연산에 관한 추가 세부 사항은 도 2를 참조하여 아래에서 설명된다. 커널은 하나 이상의 차원 행렬로 표현될 수 있다. 행렬은 커널 값을 포함하며, 신경망의 경우 입력 텐서의 입력 값 에 적용되는 가중치를 나타낸다. 입력 텐서의 차원수, 특히 각 입력 채널의 행렬차원은 커널의 차원수가 적어도 같거나 커야 한다. 크기(즉, 각 차원에 걸쳐 있는 커널의 요소 수)는 입력 텐서보다 작거나 클 수 있다. 커널이 입력 텐서보다 크면, 커널의 크기가 패딩 된 입력 텐서보다 작 거나 같도록 입력 텐서를 패딩하여 컨볼루션 연산이 발생하도록 할 수 있다. 결과 출력 활성화는(패 딩 된) 입력 텐서와 동일한 크기인 행렬이다. 일 실시예에서, 커널은 하나 이상의 커널 \"필터들\"(112A-M)(일반적으로 커널 필터(들))을 포함한다. 커널 필터들의 수는 입력 채널들의 수와 같을 필요는 없다. 각각의 커널 필터는 그 자체가 필터이고 입력 채널의 수와 동일한 서브 필터 커널 세트를 포함한다. 컨볼루션 연산은 각 서브 필터 커널을 사용하 여 각 입력 채널에서 수행되고, 결과 출력 행렬은 합산되어 단일 출력 활성화 특징 행렬 또는 출력 특징들 114A-M(일반적으로 출력 특징들(들) 라고 함)을 생성한다. 이는 각 커널 필터에 대해 반복된다. 생성 되는 출력 특징들의 수는 커널에 존재하는 커널 필터의 수와 동일하다. 따라서, 예를 들어, 커 널이 하나의 커널 필터들을 포함한다면, 단일 출력 특징들이 생성된다. 그러나, 커널이 5 개의 커널 필터를 포함한다면, 출력 활성화는 5개의 출력 특징들을 가질 것이다. 이것은 신경망 이 입력의 다른 부분(즉, 다른 입력 채널)에 다른 커널 가중치를 적용할 수 있도록 하며, 결과를 새로운 출력(즉, 다른 출력 기능 144)으로 결합한 다음 신경망의 다른 계층에서 추가 입력으로 사용할 수 있게 한다. 다수의 입력 채널 및 다수의 커널 필터의 사용에 관한 추가 세부 사항은 도 5 및 도 8을 참조하여 아 래 도 16e-f에서 설명된다. 입력 스트림 생성기는 입력 텐서를 평탄화 된 입력 스트림으로 변환한다. 입력 텐서에서 보다 효율적으로 판독하고, 커널이 입력 텐서 위에 걸쳐 있을 때 입력 텐서의 동일한 값을 여러 번 읽는 것을 방지하기 위해, 입력 스트림 생성기는 입력 텐서를 평탄화 된 입력 스트림로 변환 하고, 그 다음 버퍼 또는 다른 메모리로 공급되어 곱셈-덧셈 유닛에 의해 액세스 될 수 있는 효율적인 방 식으로 필요한 입력 값 읽기 수를 상당히 감소시킬 수 있다. 입력 텐서의 변환을 수행하기 위해, 입력 스트림은 먼저 입력 텐서를 패딩할 수 있다. 입력 텐서 는 그 크기가 커널 크기의 모듈로(modulo)(즉, 배수)가 되도록 패딩 될 수 있다. 또한 커널은 \"초점\"지점을 갖는다. 이 초점은 커널과의 컨볼루션의 출력 값이 생성되는 커널의 위치이다. 입력 스트림 생성기는 커널이 입력 텐서를 지나갈 때 입력 텐서의 모든 입력 값에 도달하도록 입력 텐서를 패딩한다. 따라서, 예를 들어, 만약 커널이 3 X 3 커널이고 초점 포인트가 해당 커널의 중심 인 경우, 입력 텐서의 2차원 행렬은 커널의 모듈로(modulo)가 되도록 패딩 된 후 추가로 패딩 될 수 있다. 커널의 초점이 입력 텐서의 외부 가장자리에서 입력 값을 가로질러 미끄러지도록 할 수 있다. 마지막으로, 입력 스트림 생성기는 컨볼루션을 수행하는데 사용되는 프로세서의 임의의 요구 사항을 충족 시키기 위해 입력 텐서를 패딩 할 수도 있다. 버스의 크기, 병렬 프로세서의 수, 메모리 크기 또는 기타 제약으로 인해, 입력 스트림 생성기는 입력 텐서가 평탄화 된 입력 스트림이 되도록 평탄화 된 후, 프로세서의 제약을 충족하도록 입력 텐서를 패딩 값으로 추가로 채울 수 있다. 일 실시 예에서, 입력 스트림 생성기는 입력 텐서(또는 입력 텐서의 각 입력채널)의 각 차원의 커널(또는 각 커널 필터의 각 서브 필터 커널의 크기)의 크기와 동일한 패딩 값으로 한 면을(예: 후행 가장자리)패딩 할 수 있다. 여기서 설명된 패딩 값은 null, 0, 또는 표준 패딩 값일 수 있다. 입력 텐서를 패딩한 후, 입력 스트림 생성기는 패딩을 사용하여 입력 텐서를 타일로 분할하거나 나눈다. 각 타일은 커널의 크기이다. 따라서, 입력 텐서의 패딩 된 행렬은 각각 커널의 크기인 여러 개의 개별 작은 행렬들로 분할된다. 입력 텐서가 분할 된 것으로 여기에서 설명되지만, 이는 입력 스트림 생성기가 반드시 각 타일에 대해 새로운 행렬을 생성한다는 것을 의미하지는 않는다. 대신, 입력 스 트림 생성기는 입력 텐서의 각 행렬에서 각 타일의 경계들을 간단히 묘사할 수 있다. 다중 입력 채널의 경우, 입력 스트림 생성기는 각 입력 채널의 매트릭스를 자신의 다중 타일 세 트로 분할한다. 각 입력 채널에 대한 타일의 크기는 해당 입력 채널에 적용되는 각 커널 필터의 서브 필터 커널의 크기와 동일하다. 입력 텐서를 분할한 후, 입력 스트림 생성기는 평탄화 순서를 식별한다. 이것은 입력 텐서에 있 는 각 타일의 값을 읽는 순서이다. 순서는 임의의 순서일 수 있으며 행-중심 순서, 열-중심 순서, 대각선-중심 순서, 통로-중심 순서 등을 포함할 수 있다. 행 순서에서 각 행의 값은 특정 순서(예: 왼쪽에서 오른쪽)로 읽히 고 각 행도 특정 순서(예: 위에서 아래로)로 읽힌다. 열-중심 순서에서는 각 행을 읽는 대신 각 열을 특정 순서 (예: 왼쪽에서 오른쪽)로 읽는다. 각 열의 값은 각 열에 대해 특정 순서(예: 위에서 아래로)로 읽는다. 대각선- 중심 순서로 타일을 대각선을 따라 읽을 수도 있다. 만약 타일에 둘 이상의 레이어가 포함된 경우 각 레이어가 연속적으로 처리될 수 있다. 확장된 커널의 생성 및 제어 패턴의 생성에서 동일한 순서 패턴이 후속 적으로 사용되는 한 다른 순서도 가능할 수 있다. 입력 스트림 생성기는 식별된 평탄화 순서로 각 타일의 값을 판독하고, 각 타일에 대해 판독된 값을 단일 벡터로 배열함으로써 타일을 \"평탄화\"한다. 입력 스트림 생성기는 입력 텐서의 모든 타일들을 읽고 대응하는 수의 벡터들을 생성한다. 벡터들은 평탄화 된 입력 스트림을 생성하기 위해 서로 평행하게 배치 된다. 입력 스트림 생성기는 행-중심 순서, 열-중심 순서 등과 같이 특정 순서로 타일을 읽을 수 있다. 확장된 커널 및 제어 패턴의 생성에 타일의 순서가 반영되는 한, 임의의 순서가 사용될 수 있으며, 곱셈-덧 셈 유닛에 의해 유효한 출력이 생성될 수 있다. 입력 텐서가 다중 입력을 포함하는 경우, 각 입력 채널에 대한 행렬은 개별적으로 처리되어 각 입력 채널의 각 행렬에 대한 평탄화 된 입력 스트림을 생성한다. 다수의 평탄화 된 입력 스트림들은 함께 결합되어(결합된) 평탄화 된 입력 스트림을 형성할 수 있다. 여러 개의 평탄화 된 입력 스트림은 함께 \"스 택(stacked)\"하거나 함께 연결하거나 다른 조합 방법을 통해 결합할 수 있다. 평탄화 된 입력 스트림은 입력 스트림 생성기가 입력 텐서를 평탄화 한 결과이다. 입력 텐서 의 차원 수에 관계없이, 입력 텐서의 각 행렬에 대한 평탄화 된 입력 스트림은(최대) 2차원이다. 이는 입력 텐서의 각 타일이 위에서 설명한 것처럼 벡터로 변환되고 벡터가 서로 평행하게 배 치되기 때문이다. 일 실시 예에서, 입력 텐서가 다중 입력 채널을 포함하는 경우, 각 입력 채널들 의 각 매트릭스로부터 생성된 평탄화 된 입력 스트림은(컴퓨터에 판독 가능 메모리에) 각각의 평탄화 된 입력 스트림을 수직으로 나란히 놓음으로써 다른 입력 채널의 다른 매트릭스의 평탄화 된 입력 스트림과 수직 혹은 수평으로 결합될 수 있다. 결합된 평탄화 된 입력 스트림은 또한 3차원적으로 표현될 수 있으며, 각 입력 채널에서 생성된 각 평탄화 된 입력 스트림은 서로 위에 쌓인다. 메모리에서 이것은 깊이 우선 저장 방식 (depth first storage approach)을 사용하여 표현될 수 있으며, 3차원 평탄화 된 입력 스트림의 깊이에 따른 값 은 주요 순서로 저장된다. 평탄화 된 입력 스트림은 버퍼로 공급되거나 메모리에 저장될 수 있다. 그것은 곱셈-덧셈 유닛에 의 해 판독될 수 있고, 평탄화 된 입력 스트림의 각 벡터가 대응하는 타일 번호에 따라 참조 될 수 있다. 예 시된 예에서, 평탄화 된 입력 스트림의 타일은 0에서 K에서 J까지의 범위이다. 여기서, 타일#1+K는 타일의 제2 행(또는 열)에 있는 제1 타일인 원래 입력 텐서의 타일을 나타낸다. 값 K는 패딩 된 입력 텐서의 행 또는 열에 있는 타일의 수(타일을 읽는 순서에 따라 다름)를 나타내며 입력 텐서의 너비에 따라 변경된 다. 예를 들어, 패딩 된 너비가 9인 입력 텐서는 커널과 타일이 3 X 3 행렬이면 K값이 3이 된다. 이 경우 세 개 의 타일이 입력 텐서의 너비에 맞으므로 제2 행의 제1 타일(즉 전체적으로는 네번째 타일)의 경우 타일 수가 0 부터 시작하므로 타일 번호가 3이 된다. 만약 입력 텐서에 추가 차원이 포함된 경우 해당 차원에 대한 각 제2 시리즈 값의 제1 타일에 대해 추가 마커가 표시된다. 예를 들어, 입력 텐서가 3차원을 포함하는 경우, 별도의 마커M은 입력 텐서의 단일 레이어에 있는 타일의 수를 나타내고, 타일#1+M은 입력 텐서의 제2 층의 제1 타일의 인덱스 값을 나타낸다. 타일 번호들과 함께 이들 마커들은 제어패턴의 지표를 사용하여 아래에 설명된 바와 같이 평탄화 된 입력 스트림의 올바른 타일을 참조하거나 가리키는데 곱셈-덧셈 유닛 에 의해 사용될 수 있다. 대안적으로, 마커를 포함하는 타일 번호들은 곱셈-덧셈 유닛이 평탄화 된 입력 스트림을 포함하는 버퍼로부터 값의 판독을 지연시킬 수 있도록 클럭 주기 지연 값으로 사용될 수 있다. 이것은 곱셈-덧셈 유닛이 평탄화 된 입력 스트림의 특정 타일을 유사하게 참조할 수 있게 한다.시스템의 다른 구성 요소들과 함께 이 액세스 방법은 아래에서 더 상세히 설명되는 바와 같이 시스템(10 0)이 입력 텐서의 2s-1 판독 만을 만들 수 있게 하는데, 여기서 s는 입력의 차원수들이며, 이는 커널 의 값 수와 동일한 입력 텐서의 일부 값을 읽어야 하는 표준 컨볼루션과 비교할 때, 상당한 자원을 절약한 다. 입력 스트림 생성기 및 평탄화 된 입력 스트림에 관한 추가 세부 사항은 도 5 및 도 8을 참조하 여 도 3-6b에서 설명된다. 확장된 커널 생성기는 확장된 커널을 생성하는데, 이는 출력 활성화를 생성하기 위해 평탄화 된 입력 스트림 및 제어 패턴과 함께 곱셈-덧셈 유닛에 의해 사용된다. 확장된 커널은 커널 에서 생성된다. 커널을 \"확장\"하는 목적은 평탄화 된 입력 스트림의 입력 값의 선택된 벡터가 아래와 같이 입력 텐서를 통해 원래 커널을 스트라이드(stride) 하는 대신, 확장된 터널의 벡터(예를 들어, 열, 행, 통로)와 간단한 내적을 사용하여 곱해질 수 있도록 하기 위한 것이다. 이것은 출력 활성화 의 생성을 상당히 단순화한다. 커널의 확장은 계층적 방식으로 커널의 회전 조합을 생성하는 것을 포 함하는 특정 패턴을 따른다. 다음 설명에서는 제1 추가 및 마지막 차원을 참조한다. 이것은 단순히 조직화된 방 식으로 커널의 차원을 참조하는 수단들일 뿐이다 커널이 일대다 차원을 가질 수 있고, 각 차원의 순위 또는 크 기를 나타내기 위한 것이 아니기 때문이다. 예를 들어, 커널이 3차원이라면, 커널의 마지막 차원은 커널의 3차 원 표현을 반드시 참조하는 것이 아니라 3개의 다른 차원 번호가 있는 한 단순히 커널의 차원 번호 3을 참조한 다(예: 차원1, 차원2, 및 차원3). 일 실시예에서, 확장된 커널 생성기는 커널(또는 하나의 커널 필터 또는 커널 필터 의 서 브 필터 커널)의 제1 차원을 취하고 해당 1차원 벡터의 모든 회전을 포함하는 커널의 각 1차원 벡터에 대한 값 의 정사각형 블록을 생성한다. 블록은 각 1차원 벡터에 평행하게 각 회전을 배치하여 생성된다. 예를 들어, 3 X 3 2차원 커널은 차원 1에 대해 3 X 1 1차원 벡터를 가질 수 있다. 이러한 벡터 각각에 대해 해당 벡터의 가능한 모든 회전이 생성되므로 각 벡터에 대해 두 개의 추가 1차원 벡터가 생성된다. 이들은 추가 벡터를 생성하는 데 사용된 단일 차원 벡터와 평행하게 배치되어 각 1차원 벡터에 대한 정사각형 블록을 만든다. 이 정사각형 블록 은 순환 행렬로 알려져 있다. 그 후, 커널의 각 추가 차원에 대해 앞선, 또는 하위 차원 영역의 블록이 세트로 그룹화 된다. 각 세트에는 해 당 차원의 축에 평행한 벡터를 따라 정렬된 바로 이전 차원의 블록이 포함된다. 따라서 3 X 3 행렬의 예로 돌아 가서 이전에 생성된 정사각형 블록이 생성된 소스(즉, 1차원 벡터)와 동일한 위치에 배치된 경우 차원2에 대해 벡터가 생성된 모든 블록을 통해 통과될 수 있다. 따라서 차원2에 대한 집합에는 이전 작업에서 생성된 모든 블 록이 포함된다. 3 X 3 커널에서는 커널의 각 벡터에 대해 하나씩 3개의 블록이 포함된다. 생성된 각 세트와 함께, 확장 커널 생성기는 해당 세트에 있는 블록의 모든 회전을 생성한다. 앞의 예를 사용하면 3개의 블록이 차원 2에 대한 단독 세트에 있다. 따라서 이 세트의 회전은 3개 블록의 추가 조합 2개를 생성하여 총 9개 블록을 생성한다. 2개의 추가 조합은 1차원 벡터에 대해 위에서 설명한 방법과 유사하게 세트 의 블록에 평행하게 배치된다. 여기서, 2차원 커널의 모든 차원을 고려하면 확장 커널 생성기는 확장 커널 의 생성을 종료하고, 9개 블록의 결합 결과는 확장 커널로 출력된다. 그러나 커널이 추가 차원을 포함하는 경우, 위의 프로세스가 반복되어 서로 다른 블록 세트가 회전되고 결 합된다. 결과적으로 모든 차원이 고려되고 모든 블록과 더 낮은 차원의 블록의 결과 조합이 확장된 커널로 출력된다. 따라서 차원 수가 증가할수록 세트 수가 증가한다. 각 추가 차원에서 위에서 설명한대로 벡터를 따라 정렬되는 이전 차원의 블록을 회전한 후 회전 된 블록의 조합이 새 블록에 배치된다. 이 새로운 블록은 다음 추 가 차원의 계산에 사용되며 다양한 회전으로 결합된다. 이것은 커널의 총 차원 수와 동일한 차원 번호를 갖는 마지막 차원까지 계속된다. 마지막 차원에서 최종 회전 세트가 수행되고, 그 결과 회전 조합이 확장 커널로 출 력된다. 따라서 처리되는 각 추가 차원에 대해 블록 세트 수가 감소하고 최종 차원에 대한 회전이 처리된 후 단 일 세트인 출력 블록만 남는다. 확장된 커널의 벡터(예를 들어, 행 또는 열)의 수는 커널의 요소의 수 또는 입력 텐서의 타일의 요소 의 수와 추가로 동일하다. 확장된 커널자체의 실제 크기는 커널의 크기에 따라 다르다. 2차원 확장 커널의 각 차원은 커널의 각 차원의 크기 값의 곱과 동일한 크기를 갖는다. 예를 들어, 커널이 2 X 2 X 2 행렬인 경우 확장된 커널은 8개의 벡터(2^3)를 갖고 커널 크기 값의 곱이 8이므로 크기는 8 X 8이된다. 생성된 확장된 커널은 출력 활성화를 생성하기 위해 평탄화 된 입력 스트림으로부터 선택된 값 을 갖는 내적에서 여기에 설명된 바와 같이 사용될 수 있다. 전술한 바와 같이, 평탄화 된 입력 스트림의값은 제어 패턴의 인디케이터를 사용하여 지연 또는 포인터를 통해 선택될 수 있다. 이들 값을 선택한 후, 선택된 값은 확장된 커널의 선택된 벡터와 결합되어 확장된 커널의 각 벡터를 평탄화 된 입력 스트림 으로부터의 상이한 선택된 값과 곱함으로써 출력 활성화의 출력 값을 생성할 수 있다. 확장된 커널 의 벡터의 수가 타일의 요소의 수(이전에 설명된 커널와 동일한 크기)와 같으므로 출력 값의 수도 각 타일에 대한 요소의 수와 동일하다. 따라서 출력 활성화의 타일(또는 다중 커널 필터의 경우 값의 출력 행 렬)을 포함한다. 출력 활성화의 매트릭스에서 타일의 위치는 입력 텐서의 매트릭스의 동일한 위치 타 일에 대응하는 위치를 갖는다. 여기 설명된 시스템은 도 2에 설명된 것과 같은 단순한 접근 방식에서와 같이 입력 값을 여러 번 다시 읽 을 필요 없이 각 출력 타일 값의 계산을 허용한다. 커널이 입력 텐서를 가로질러 출력 타일의 위치에 해당하는 각 위치로 미끄러질 때, 입력 텐서의 특정 값을 반복적으로 읽는 대신 각 출력 타일은 확장된 커널의 단일 통과와 평탄화 된 입력 스트림에서 단일 선택 값으로 생성된다. 다중 커널 필터들의 경우, 각 커널 필터에 대해 확장 커널이 생성되어 위에서 설명한 프로세스와 유 사하게 입력에 적용된다. 다중 입력 채널들의 경우, 각 커널 필터들은 입력 채널에 해당하는 여 러 하위 필터 커널들을 가지고 있다. 이 경우, 확장된 커널은 각 하위 필터 커널에 대해 생성되고, 각 하위 필 터 커널에서 생성된 각 확장된 커널은 입력 채널에 대응하는 평탄화 된 입력 스트림의 관련 부분에 적용된다. 하위 필터 커널은 단순한 컨볼루션 실시에 적용되었을 것이다. 확장된 커널의 생성에 관한 추가 세부 사항들은 도 7-10c를 참조하여 아래에서 설명된다. 제어 패턴 생성기는 커널 크기 입력의 커널 크기에 대한 정보를 기반으로 제어패턴을 생성한다. 커널 크기는 커널(또는 각 커널 필터)의 각 차원의 크기를 나타낸다. 제어 패턴 생성기는 이 정보를 취하여 동일한 크기 및 차원의 커널에 대해 동일한 제어 패턴을 생성한다. 제어 패턴 생성기는 그 위 치의 좌표(예를 들어, 행 번호, 열 번호) 및 커널의 크기의 크기에 기초하여 제어 패턴의 각 위치에 대한 값을 생성한다. 각 위치에 대해, 제어 패턴 생성기는 하나 이상의 테스트 부등식(커널의 차원 수와 동일) 을 실행한다. 각 테스트 부등식은 행 번호의 모듈로 연산과 제어 패턴에서 해당 위치의 열 번호에 대한 모 듈로 연산 사이의 부등식이다. 테스트 부등식(즉, 참 또는 거짓)의 결과는 제어 패턴에서 해당 위치에 대한 값 을 생성하기 위해 제어 패턴 값 테이블을 참조하는 데 사용된다. 제어 패턴 생성기가 프로그래밍 방식을 사용하여 커널 크기 입력에 기초하여 제어 패턴을 생성 하는 것으로 여기에서 설명되지만, 다른 실시예 들에서 제어 패턴 생성기는 다음으로부터 제어 패턴 의 미리 생성된 버전에 액세스한다. 메모리, 비 휘발성 스토리지, 프로그램 명령 스택 또는 기타 소스를 사용하 고 커널 크기 입력을 기반으로 이 소스에서 사전 생성된 올바른 제어 패턴을 선택한다. 제어패턴은 (내적을 사용하여) 벡터와 곱해지는 선택된 값을 생성하기 위해 평탄화 된 입력 스트림의 어느 부분으로부터 선택할 것인지 곱셈-덧셈 유닛에 각 출력 값을 생성하는 확장된 커널 지시하는 매 트릭스이다. 컨볼루션의 단순한 구현에서, 입력 텐서 의 위치에서 커널 의 각 스트라이드에 대해, 컨 볼루션 연산은 커널(동일한 위치에 있는)의 해당 값에 의해 가중된 포커스 포인트 자체의 값과 함께 커널의 현 재 포커스를 나타내는 위치에 인접한 값을 합함으로써 수행된다. 결과 합계는 해당 초점에 해당하는 위치의 출 력 값이다. 따라서 각 초점 위치에 대해 입력 텐서와 다른 값이 합산을 위해 선택된다. 평탄화 된 입력 스 트림이 서로 다른 타일로 분할됨에 따라, 각 출력 위치, 특히 출력 타일의 각 출력 위치는 출력 타일과 동 일한 위치에 있는 입력 타일의 값 또는 인접한 입력 타일 입력 값을 사용하여 계산된다. 따라서, 제어 패턴 은 타일의 각 출력 위치에 대해, 컨볼루션 계산을 수행하기 위해 입력 값을 가져올 상이한 특정 입력 타일, 즉 이전에 언급된 내적을 곱셈-덧셈 유닛에 표시한다. 특히, 제어 패턴의 각 벡터는 출력 타일 의 다른 위치에 대응하고 출력 위치의 값의 계산을 위해 입력 값을 선택할 입력 매트릭스의 타일을 나타낸다. 출력이 타일별로 생성되기 때문에, 제어 패턴은 처리중인 현재 출력 타일의 위치에 대응하는 위치를 갖는 입력 타일들과 대응하는 위치를 갖는 입력 타일들 만을 표시할 필요가 있을 수 있다. 예를 들어, 입력 텐서 의 2차원 행렬에서 타일은 처리중인 현재 출력 타일에 수평 및 수직으로 인접한다. 3차원 매트릭스에서 이 것은 인접한 레이어에 있는 타일을 포함할 수 있다. 고차원 매트릭스의 경우 \"인접한\" 타일이 추가로 포함된다. 따라서 제어 패턴이 나타내는 타일 위치의 수는 입력 행렬의 차원 크기의 2 승이다. 제어 패턴의 크 기는 커널에서 생성된 확장 커널과 동일한 크기이다. 제어 패턴은 평탄화 된 입력 스트림에서 각 타일들의 타일 번호에 따라 타일을 나타낸다. 입력 타일 에 인접한 타일들은 타일 번호가 반드시 인접할 필요는 없으므로 제어 패턴의 표시기는 타일 번호를 통해직접 타일을 표시하지 않고 처리중인 현재 타일의 타일 번호와 관련된 상대적 위치를 통해 표시한다. 따라서 예 를 들어 상대 위치는 현재 타일, 현재 타일 아래(또는 오른쪽)의 행(또는 열) 또는 현재 타일 뒤에 있는 레이어 를 나타낼 수 있다. 입력 텐서의 행렬의 폭/높이 및 깊이가 알려져 있으므로 이 정보를 기반으로 상대 위 치를 계산할 수 있다. 예를 들어, 현재 타일 아래 행인 타일은 현재 타일의 타일 번호에 행렬의 너비를 더한 값 이 된다. 따라서, 제어 패턴은 그러한 타일에 대해 행 폭의 값, 또는 행 폭에 대한 포인터 또는 참조를 나 타낼 수 있다. 현재 타일의 아래에 행이고 오른쪽에 하나인 타일은 현재 타일 번호와 행 너비 및 1을 더한 값으 로 표시된다. 따라서, 제어 패턴은 그러한 타일에 대해 행 폭 +1 또는 행 폭 +1의 표시자를 나타낼 수 있 다. 일 실시 예에서, 행 너비는 위에서 설명한 변수 K이다. 각각의 표시기 조합은 하나 이상의 비트로 표시될 수 있다. 제어 패턴이 프랙탈 패턴(fractal pattern)을 갖기 때문에, 제어 패턴의 매트릭스의 각 서 브 섹션은 단일 메이저 비트로 표시될 수 있으며, 추가 서브 섹션은 추가 비트로 표시되고 해당 서브 섹션의 개 별 값은 제2 비트를 갖는다. 개별 값과 해당 값이 속한 하위 섹션의 조합은 상대 타일 위치를 나타낸다. 다중 커널 필터들의 경우, 커널 필터 또는 서브 필터 커널이 다른 차원을 갖는 경우 다중 제어 패턴들 이 선택될 수 있다. 상이한 차원의 각 커널에 대해, 대응하는 제어 패턴이 위에서 설명된 방법에 따 라 선택되거나 생성될 것이다. 대응하는 제어 패턴은 평탄화 된 입력 스트림의 부분으로부터 값을 선 택하는데 사용될 것이다. 제어 패턴의 생성 및 그 특성에 관한 추가 세부 사항은 도 5 및 도 8을 참조하여 도 11-13에서 후술된다. 곱셈-덧셈 유닛은 평탄화 된 입력 스트림, 확장된 커널 및 제어 패턴을 사용하여 최종 계 산을 수행하여 출력 활성화를 생성한다. 위에서 상세히 설명된 바와 같이, 곱셈-덧셈 유닛은 제어 패 턴의 인디케이터를 사용하여 평탄화 된 입력 스트림으로부터 값을 선택한다. 제어 패턴의 각 벡 터는 위에서 설명한 바와 같이 입력 값에 액세스하기 위한 평탄화 된 입력 스트림의 특정 타일을 나타낸다. 제어 패턴의 각 위치에서의 식별자는 입력 값을 선택할 평탄화 된 입력 스트림의 타일, 즉, 벡터의 표시에 대응한다. 제어 패턴의 벡터 내의 위치는 또한 정확한 입력 값을 포함하는 평탄화 된 입력 스트림에서 선택된 벡터의 위치에 대응한다. 제어 패턴의 전체 벡터를 파싱(parsing)하여 곱셈- 덧셈 유닛은 선택된 입력 값들의 벡터를 생성한다. 곱셈-덧셈 유닛은 나아가 평탄화 된 입력 스트림으로부터 제어 패턴의 벡터 위치(예를 들어, 행 번호 또는 열 번호)와 일치하는 확장된 커널의 대응하는 벡터를 추가로 선택한다. 곱셈-덧셈 유닛은 확장 커널의 선택된 벡터와 평탄화 된 입력 스트림의 선택된 값을 포함하는 벡터 사이의 내적을 수행 하여 단일 출력 값을 생성한다. 단일 출력 값은 현재 처리중인 입력 타일의 위치와 일치하는 출력 타일에 배치 된다. 또한 출력 타일에서 단일 출력 값의 위치는 해당 단일 출력 값을 생성하는 데 사용되는 제어 패턴 (또는 확장 커널 128)의 벡터 위치 번호에 해당한다. 곱셈-덧셈 유닛은 제어 패턴(및 확장된 커널)의 모든 벡터에 대해 여기에 설명된 프로세스를 반 복하여 출력 타일 내의 위치 수와 동일한 총 출력 값 수를 생성한다. 이것은 곱셈-덧셈 유닛이 입력 텐서 로부터의 각 입력 타일에 대한 출력 활성화의 출력 타일을 생성하도록 허용한다. 곱셈-덧셈 유닛 은 출력 활성화에 대해 동일한 수의 출력 타일을 생성하기 위해 입력 텐서의 모든 입력 타일에 대해이 프로세스를 추가로 반복한다. 전체 출력 타일 세트를 생성한 후, 곱셈-덧셈 유닛은 완성된 출력 타 일 세트를 출력 활성화의 최종 출력으로 출력한다. 다중 입력 채널들의 경우, 곱셈-덧셈 유닛은 해당 입력 채널에 대해 지정된 커널의 특정 서브 필터 커널 또는 커널 구성 요소를 사용하여 각 입력 채널에 대한 \"사전 출력들\"을 생성한다. 각 사전 출력은 위에서 설명한 출력과 동일한 방식으로 생성된다. 그러나, 각 입력 채널에 대한 모든 사전 출력을 생성 한 후, 곱셈-덧셈 유닛은 사전 출력의 값을 단일 출력 행렬로 합산하며, 이는 출력 활성화 일 수 있 다. 다중 커널 필터들의 경우, 곱셈-덧셈 유닛은 각 커널 필터를 입력 텐서에 추가로 적용하고, 다중 입력 채널들이 있는 경우 곱셈-덧셈 유닛은 각 커널 필터를 적용한다. 위에서 설명한대로 모든 입력 채널들에 연결하고 사전 출력을 합산한다. 이것은 각각의 커널 필터에 대해 별 도의 출력 특징들을 생성한다. 각 출력 특징들은 입력 채널과 동일한 크기의 행렬이다. 모든 출 력 특징들의 수집은 출력 활성화를 나타내며, 신경망의 다음 계층에서 입력 채널로 사용될 수 있다(즉, 한 계층의 출력 활성화가 신경망의 다음 계층의 입력 텐서가 된다.). 곱셈-덧셈 유닛 에 관한 추가 세부 사항은 도 14 내지 도 17b를 참조하여 후술된다.컨볼루션 동작예 도 2는 일 실시 예에 따른 커널에 의한 2차원 입력의 컨볼루션의 예이다. 여기에 설명된 입력 값들 및 출 력 값들은 행렬을 사용하여 표현되지만, 실제로는 단순히 배열, 플랫 파일, 트리 또는 기타 방법을 사용하 여 표현될 수 있으며 계산이 가능한 한 행렬로 배열할 필요 없이 결과는 동일하다. 입력 값들의 집합에서 컨볼루션을 수행하기 위해, 커널의 \"초점\"이 입력 값들의 가장자리에 있는 값 에 적용될 수 있도록, 출력 값들의 크기가 입력 값들의 크기와 동일하도록 하기 위해 먼저 입력 값들(20 2)에 패딩을 적용할 수 있다. 그러나 다른 경우에는 입력 값들에 패딩이 적용되지 않으며, 이 경우 출력 값들의 크기는 입력 값들의 크기보다 작다. 입력 값들의 크기와 비교하여, 출력 값들의 각 면은 출력 값들의 면과 동일한 커널의 가장자리와 커널의 초점 사이의 요소 수와 동일한 수의 요소에 의해 축소된다. 입력 값들의 가장자리는 개념적으로 입력 값들을 나타내는 매트릭스의 외부 경계 주위의 위치이므로 다른 값이 이 가장자리의 값보다 매트릭스의 중심에서 더 멀지 않다. 위에서 언급했듯이 커널의 \"초 점\"(\"원점\"이라고도 함)은 커널의 위치이며 개념적으로 현재 출력 픽셀 위에 있다. 일반적으로 이는 커널의 값/ 요소 중 하나의 위치에 해당하며, 도면의 3 X 3 커널과 같은 대칭 커널의 경우 초점은 일반적으로 중심 요소이 다. 따라서, 출력 값들의 위치가 입력 값들의 위치와 일치하도록 입력 값들에 패딩이 추가되어 입력 값에 서 제1 위치를 넘어설 때 커널의 초점이 입력 값의 매트릭스상의 에지 값들(edge values)과 일치하는 입력 값의 위치에 있고, 이어서 생성된 출력 값들은 이러한 에지 값의 위치와 일치하는 위치를 갖는다. 이 것은 출력 값들의 크기가 입력 값의 크기와 동일하다는 것을 보장한다. 따라서 도면 예에서는 입력 값을를 나타내는 행렬의 가장자리 주위에 폭1의 패딩가 추가된다. 여기서, 패딩 된 입력 값들은 커널 크기의 배수인 크기를 가지므로 크기가 커널 크기의 배수가 되도 록 추가적인 패딩이 필요하지 않다. 패딩 후, 커널은 입력 값들에 적용된다. 커널은 전체 입력 값들에 걸쳐 커널을 스트 라이딩(striding)(즉, 이동)함으로써 적용된다. 커널은 스트라이드 값에 따라 입력 값들에 걸쳐 스트라이 드 된다. 스트라이드 값은 각 스트라이딩에 대해 커널이 이동할 거리를 결정하는 값이다. 이 값이 1이면 커널의 초점이 가능한 모든 위치의 입력 값들에 걸쳐 있다. 패딩으로 인해 커널은 언제든지 패딩 된 입력 값 들의 경계를 초과하지 않지만, 커널의 초점은 입력 값들의 원래 값의 모든 값과 겹칠 수 있다. 스트 라이드 값이 1을 초과하면 커널의 초점이 입력 값들의 모든 값에 적용되지 않는다는 점에 유의한다. 커널의 초점인 모든 입력 값에 대해, 개념적으로 커널 아래에 있는 입력 값들에 대해 컨볼루션 연산이 수행된다. 따라서, 도면에 표시된 예에서 커널의 초점은 선택된 컨볼루션 포인트이다. 여기서 선택된 컨볼루션 포인트을 둘러싼 가중치가 높은 다크 스퀘어 박스에 의해 설명되었듯이 커널의 크기와 같은 총 9개의 값과 선택된 컨볼루션 포인트를 둘러싼 값이 선택되었다. 커널의 초점이 중앙 에 있지 않은 경우, 이 상자는 그에 따라 상자의 위치가 해당 초점 위치가 선택된 컨볼루션 포인트가 되도 록 이동될 것이다. 예를 들어, 초점 포인트가 커널의 좌측 상단 코너라면, 박스는 선택된 컨볼루션 포인트 가 박스의 좌측 상단 코너에 있도록 한 지점 아래로, 한 지점 오른쪽으로 이동될 것이다. 컨볼루션 연산은 전술한 경계 상자 아래에 있는 입력 값들을 각각 취하여 상자 아래의 입력 값 들 커널 사이의 내적을 수행하여 출력 값들의 단일 출력 값을 생성한다. 도면처럼, 커널의 포커스가 선택된 컨볼루션 포인트에 있을 때 커널과 입력 값들에 대해 이 출력은 \"8\"이다. 여기 서, 패딩과 선택된 초점 위치로 인해, 출력 값의 위치는 입력 값들에서 선택된 컨볼루션 포인트의 위 치와 동일하다. 그런 다음 커널이 입력 값들(수평 또는 수직)에서 한 위치에 걸쳐 스트라이딩되고 컨볼루션 연산이 반복된다. 컨볼루션 연산은 커널의 포커스가 가능한 모든 입력 값들을 찾아갔을 때 완료된다. 이렇게 하면 입력 값과 크기가 같은 완전한 출력 값 세트가 생성된다(패딩 없음). 이러한 컨볼루션 연산을 사용 하면 입력 값을 가중치(커널)로 수정하고 입력의 다른 값과 결합하여 새 출력을 생성할 수 있다. 수학적으로, 컨볼루션 연산은 다음과 같이 표현될 수 있다. c ="}
{"patent_id": "10-2023-7025325", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "여기서 A는 커널, B는 커널, c는 컨볼루션 결과이다. 이 컨볼루션 연산은 신경망이 복잡한 데이터를 처리하고 해당 데이터를 기반으로 원하는 출력을 생성할 수 있도 록 한다. 그러나, 여기에 도시 된 바와 같이, 이것은 커널이 입력 값들을 넘어갈 때 반복 읽기 값 을 판독하는 예와 같은 동일한 입력 값이 여러 번 판독되도록 한다. 입력 값의 단일 컨볼루션 동안, 9개의 커널 위치가 이 값과 겹칠 것이기 때문에 반복 읽기 값을 읽는 예제는 예시된 예제에서 9번 읽힌다. 설명 된 대로 추가 커널이 입력 값들에 적용되면 동일한 값에 대해 더 많은 반복 읽기가 이루어진다. 따라 서, 컨볼루션 연산 는 기계 학습에서 강력한 도구이지만, 여기에 표시된 것처럼 단순한 접근 방식에서는 잠재적으로 매우 많은 수의 읽기를 생성할 수 있으며, 입력 값들이 증가하고 컨볼루션 수가 증가함에 따라 문제가 될 수 있다. 따라서 여기 공개된 바와 같이, 입력 값의 반복 읽기의 수를 유의미하게 줄일 수 있는, 보 다 최적화된 접근법이 제공된다. s가 입력 차원의 수일 때, 위에서 언급한 대로 읽기 수를 2s-1로 줄일 수 있다. 따라서, 여기의 예에서, 예제 값에 대해 위에서 설명한 각 값에 대한 9개의 읽기와는 달리, 입력 값 들의 2차원 행렬에는 2개의 읽기만 필요하다. 평탄화 된 입력 스트림 생성 도 3은 일 실시예에 따른 입력 텐서의 평탄화 방법을 보여주는 흐름도이다. 도면에 표시된 흐름도는 작동 순서를 나타낼 수 있지만, 표시된 작업은 어떤 순서로든 수행될 수 있으며 작동 횟수가 더 많거나 적을 수 있다. 일 실시예에서, 도 3에 설명된 조작은 입력 스트림 생성기에 의해 수행될 수 있다. 입력 스트림 생성기는 커널에 의한 컨볼루션을 위한 입력 텐서를 수신한다. 이 입력 텐서는 입력 텐 서 일 수 있다. 커널은 커널 일 수 있다. 일 실시 예에서, 입력 스트림 생성기는 커널을 사용하 는 입력 텐서의 컨볼루션의 출력이 입력 텐서와 동일한 크기를 갖도록 입력 텐서를 패딩 값으로 채운다. 일 실 시 예에서, 패딩 값을 갖는 입력 텐서는 커널의 대응하는 차원의 정수 배수 인 각 패딩 된 입력 텐서 차원에 대 한 크기를 갖는다. 또 다른 실시 예에서, 입력 스트림 생성기는 대응하는 차원에서 커널의 크기와 동일한 폭을 갖는 패딩 값으로 입력 텐서의 각 차원의 후행 에지를 패딩한다. 각 차원의 후행 에지는 인덱스 값이 가장 큰 입력 텐서의 엣지(edge)(즉, 면 또는 다른 끝)이다. 패딩 값은 0 또는 null 또는 다른 값일 수 있다. 입력 스트림 생성기는 입력 텐서를 하나 이상의 타일로 분할하고 각 타일은 커널과 동일한 크기를 갖 는다. 따라서 9 X 9 입력 텐서(패딩 포함)는 커널이 3 X 3 커널 인 경우 9 개(2 차원 또는 2D) 타일로 나뉜다. 일 실시 예에서, 커널은 정사각형 차원을 갖지 않으며, 이 경우 입력 스트림 생성기는 입력 텐서를 가로질 러 커널의 스트라이드 방향과 정렬된 순서로 입력 텐서를 나눈다. 따라서 커널이 행 중심 접근 방식(왼쪽에서 오른쪽으로)으로 스트라이드되는 경우 입력 텐서는 다음 행으로 이동하기 전에 각 행을 따라 분할된다. 대안적 으로, 다른 실시 예에서, 입력 스트림 생성기는 입력 텐서를 가로질러 커널의 스트라이드 방향과 직교하는 순서로 입력 텐서를 분할한다. 따라서 위의 예에서 입력 텐서는 먼저 각 열을 따라 분할된다(위에서 아래로, 다 음 열로). 입력 스트림 생성기는 하나 이상의 타일들의 값을 벡터로 평탄화하여 평탄화 된 입력 스트림을 생성 한다. 이것은 하나 이상의 입력 텐서들의 각 타일들에 대해 정의된 순서에 따라 타일 값에 액세스하고 정의된 순서에 따라 벡터 값을 배열하며 하나 이상의 벡터를 병렬 배열하여 평탄화 된 입력 스트림을 생성할 수 있다. 이 정의된 순서는 행-중심 순서, 열-중심 순서 또는 통로-중심 순서 일 수 있다. 통로-중심 순서는 먼저 3D 타 일의 깊이에 해당하는 축을 따라 3 차원(3D) 타일의 요소에 액세스하고 이어서 3D 타일의 너비 및 높이에 해당 하는 축을 따라 액세스한다. 평탄화 된 입력은 여기서 2차원으로 표시되지만 다른 실시 예에서는 더 많은 차원 을 포함한다. 평탄화 된 입력 스트림은 버퍼에 저장될 수 있다. 이 버퍼는 하드웨어 가속 프로세서에 의해 읽혀 1) 제어 패턴 에 의해 선택된 평탄화 된 입력 스트림의 값들과 2) 커널 확장으로 곱셈-덧셈 연산을 수행함으로써, 여기서 기 술된 바와 같이 입력 텐서 값의 다중 부하들 없이 컨볼루션 연산 출력을 생성할 수 있다. 또한, 입력 텐서는 복수의 채널들을 가지며, 여기서 커널은 복수의 필터들을 가지며, 입력 채널은 각 커널 필터 와 결합되어 복수의 출력 채널을 갖는 출력들을 생성한다. 입력 스트림을 평탄화 하는 추가 예로 다양한 차원의 커널은 도 4, 5a-5c, 그리고 도 6a-6b와 관련하여 제시되 어 있다. 도 4는 실시에 따른 1차원 커널의 경우 입력 텐서의 평탄화 예제을 보여준다. 일 실시예에서, 여기서 설명 된 프로세스는 입력 스트림 생성기에 의해 수행될 수 있다. 에서, 입력 스트림 생성기는 입력을 수신한다. 예시된 예에서 입력은 매트릭스로 표현된 6 X 3 입력 값 세트이다. 에서 입력 스트림 생성기는 커널 크기에 따라 입력을 패딩한다. 입력 스 트림 생성기는 이전에 설명된 바와 같이 동일한 크기의 출력을 생성하기 위해 커널의 포커스(중심 값 b)가 입력의 동일한 위치에 대응할 수 있도록 입력을 패딩한다. 이것은 입력 스트림 생성기가 패딩(426A)을 추가하게 한다. 입력 스트림 생성기는 또한 커널 크기의 배수(모듈로)가 되도록 입력을 패딩한다. 그리고 패딩 (426B)에 두 개의 패딩 열이 추가된다. 마지막으로, 일 실시 예에서, 하드웨어 요구 사 항으로 인해, 입력 스트림 생성기는 커널의 폭과 동일한 패딩으로 입력의 후행 엣지를 패딩한다. 여 기서 커널는 3폭이므로 입력의 끝에 3개의 폭 패딩이 추가되어 패딩(426C)에서 3개의 추가 패딩 열이 생성된다. 에서, 입력 스트림 생성기는 현재 패딩 된 입력을 커널과 동일한 크기의 타일로 분할하여 타일링 된 입력을 생성한다. 커널이 3 X 1 크기 매트릭스이므로 패딩 된 입력은 각각 크기가 3 X 1 인 타일로 나뉜다. 결과적으로 12개의 타일이 생성된다. 여기서 패딩 된 입력은 행 단위로 분할되도록 타 일이 행-중심 형식으로 분할되고 정렬된다. 그러나 타일을 열 별로 나눌 수도 있다. 이 경우 타일1은 [0,0,0], 타일2는 [1,7,13] 등이 된다. 후속 작업도 동일한 방향을 따르는 한 결과 출력은 동일하다. 에서, 입력 스트림 생성기는 타일링 된 입력을 평탄화 된 입력으로 변환한다. 여기서, 입 력 방향은 평탄화 된 입력이 다음 단계(곱셈-덧셈 유닛)로 입력되는 방향을 나타낸다. 따라서 타일1이 먼저 배치되고 타일2가 타일12까지 배치된다. 각 타일은 단일 벡터로 변환되고 다른 타일에서 변환된 다른 벡터와 평행하게 배치된다. 여기의 타일은 이미 벡터이므로 추가 변환이 발생하지 않는다. 그러나 후속예 에서 볼 수 있듯이 타일은 항상 벡터가 아닐 수 있으며, 이러한 경우 평탄화 되어 벡터가 된다. 이 평탄화 된 입력은 배열, 트리 또는 다른 구조로 저장될 수 있으며 버퍼, 메모리 또는 다른 저장 매체에 저장될 수 있다. 타일의 각 값은 참조 포인터, 메모리 주소 또는 클럭 사이클 지연에 따라 액세스할 수 있다. 클럭 사이클 지연의 경우, 평탄화 된 입력은 한 번에 하나의 벡터로 읽을 수 있으며, 평탄화 된 입력(43 0)에서 서로 다른 벡터에 접근하기 위해 일정 수의 클럭 사이클에 의해 다른 판독이 지연될 수 있다. 예를 들어, 타일7은 액세스를 7클럭 주기만큼 지연시켜 액세스할 수 있다. 도 5a는 일 실시 예에 따라 2차원 커널의 경우 입력 텐서를 평탄화하는 예시의 제1 부분을 도시한다. 도 1 의 예와는 대조적으로, 도 4에서 (5A-5B) 2차원 커널이 사용되어 2차원 타일이 생성된다. 일 실시 예에서, 프로 세스는 입력 스트림 생성기에 의해 수행될 수 있다. 에서, 입력 스트림 생성기는 입력을 수신하고, 패딩 된 입력을 생성하기 위해 커널 크기에 기초 하여 이를 패딩 한다. 앞서 언급했듯이 패딩은 다음 세 가지 요구 사항을 충족한다. 1) 출력 값이 입력 값과 동 일한 크기가 되도록 허용하려면 커널의 포커스 포인트에 따라 패딩을 추가할 수 있을 것. 2) 입력은 커널 크기 의 모듈로가 되도록 더 채워질 수 있을 것. 3) 하드웨어 요구 사항으로 인해 특정 실시 예에서 입력의 후행 가 장자리에 패딩의 추가 커널 너비가 추가될 것. 따라서, 예시된 예에서, 패딩의 벡터 폭이 입력 외부에 추가되고, 패딩의 추가 커널 폭이 입력의 오른쪽 및 하 단(후행 엣지)에 추가된다. 커널이 3 X 3 커널이므로 추가 패딩은 오른쪽에 3단위 폭, 하단에 3단위 높이 이다. 에서, 입력 스트림 생성기는 패딩된 입력을 커널과 동일한 크기의 타일들로 분할한다. 커널이 3 X 3이므로 각 타일의 크기는 3 X 3이다. 이것은 타일링 된 입력를 생성한다. 타일링된 입력의 행 크 기는 변수 K를 사용하여 표시되며, 이는 처리중인 타일에서 제2 행의 타일을 색인화 하는 데 사용된다. 따라서 타일링 된 입력의 제2 행에 있는 제1 타일은 타일 1 + K이고, 오른쪽 타일은 타일 1 + K + 1이다. 제1 타 일이 \"0\"에서 인덱싱 된 경우 K는 행 타일 크기 대신 [행 타일 크기] +1로 설정된다. 이 프로세스는 실시에 따라 2차원 커널의 경우 입력 텐서를 평평하게 만드는 예제의 제2 부분을 보여주는 도 5b 에 자세히 설명되어 있다. 에서, 입력 스트림 생성기는 특정 타일 순서에 따라 이미지의 타일들을 벡터로 평탄화 한다. 여기서, 평탄화 순서는 단일 타일 예에 대한 평탄화 순서로 표시된 대로 행-중심이다. 즉, 각 타일에 대해 해 당 타일의 값은 방향 화살표로 표시된 대로 행 별로 읽혀지고 평탄화 된 입력에서 해당 타일의 벡터에 배치된다. 이 벡터는 평탄화 된 입력에 대한 것과 같이 다른 타일들(동일한 평탄화 순서에 따라)에 대해 생성된 벡터와 평행하게 배치되고 입력의 방향에 따라 곱셈-덧셈 유닛에 대한 입력으로 사용된다. 벡 터는 수직으로 표시되지만 다른 실시 예에서는 방향이 다를 수 있다. 다른 실시 예에서, 평탄화 순서는 대신 열-중심(column-major)이며, 이는 각 타일들의 값이 열로 읽혀진 다음 단일 벡터에 배치되고 패딩 된 입력의 다른 타일로부터 생성 된 다른 벡터와 평행하게 배치됨을 의미한다. 따라서 타일 1에 대한 벡터가 [0,0,0,0,1,2,0,11,12]로 정렬되는 평탄화 된 입력과 달리 여기서 타일 1에 대한 벡터는 대신 [0, 0,0,0,1,11,0,2,12]이 된다. 이는 타일 1의 값이 행 단위가 아닌 열 단위로 읽혔기 때문 이다. 정확한 평탄화 순서는 출력 값을 생성할 때 다른 프로세스의 순서가 동일한 순서에 해당하는 한 출 력에 영향을 주지 않는다. 도 5c는 일 실시 예에 따라 다중 입력 채널에 대한 입력 텐서를 평탄화 하는 예를 도시한다. 일 실시 예에서, 입력 텐서는 도 1에 설명된 바와 같이 다중 입력 채널(104A-N)을 가질 수 있다. 여러 입력 채널들이 커널 과 결합된다. 커널을 사용한 이러한 컨볼루션의 출력은 함께 합산되어 출력 활성화를 생성한다. 커널에 여러 커 널 필터가 있는 경우 각 커널 필터는 여러 입력 채널들과 결합되어 출력 기능을 생성한다. 각 입력 채널은 색상 채널 등과 같은 입력의 다른 구성 요소에 해당할 수 있다. 일 실시 예에서, 프로세스는 입력 스트림 생성기 에 의해 수행될 수 있다. 에서, 입력 스트림 생성기는 임의의 추가 입력 채널들을 제1 평탄화 된 입력으로 타일링 한다. 명확 성을 위해 커널는 2 X 2 커널로 표시된다. 따라서 각 타일은 2 X 2이고 각 벡터는 1 X 4 벡터이다. 여기서, 각 입력 채널(540A)(일반적으로 입력 채널)은의 입력과 유사하므로 입력 스트림 생성기(12 2)는 각 입력 채널을 채우고 평탄화 하여 평탄화 된 입력 채널(544A-N)을 생성한다. 일 실시 예에서, 이들 은 평탄화 된 입력 스트림을 생성하기 위해 서로 위에 \"스택\"된다. 그러나, 다른 실시 예에서는 3D 배열에 서의 배치 등과 같이 다르게 결합될 수 있다. 이들 경우 중 어느 하나에서, 평탄화 된 입력 스트림은 다양 한 평탄화 된 입력 채널의 조합이고, 평탄화 된 입력 채널 각각의 대응하는 타일은 평탄화 된 입력 스트림에서 함께 참조 될 수 있다. 따라서, 예를 들어, 평탄화 된 입력 스트림을 갖는 타일 5에 대한 참조(지연된 클럭 사이클 또는 다른 수단에 의해)는 평탄화 된 입력 스트림을 포함하는 모든 평탄화 된 입 력 채널에서 타일 5를 참조할 수 있을 것이다. 도 6a는 일 실시예에 따른 3차원 커널의 경우 입력 텐서를 평탄화 하는 예제의 제1 부분을 보여준다. 도 4-5c와 마찬가지로, 여기에 설명된 프로세스는 입력 스트림 생성기에 의해 실행될 수 있다. 에서 입력 스트림 생성기는 3차원 입력을 수신하고 패딩 입력을 생성하기 위해 입력을 패딩 한 다. 이는 도 4-5c를 참조하여 위에서 설명한 방법과 유사하다. 명확성을 위해서, 여기엔 패딩의 단일 너비 만 표시된다. 또한, 명확성을 위해 실제 입력 값은 원근 표현에서 겹치기 때문에 여기에 표시되지 않는다. 대신 패딩값은 진한 회색 패턴의 큐브로 표시되고 입력 값들은 흰색 큐브로 표시된다. 커널 및 커널 값에도 동일하게 적용된다. 패딩 된 입력은 3개의 차원, 즉 차원1 (106A), 차원2 (106B) 및 차원3 (106C)를 갖는다는 점에 유의해야 한다. 경우에 따라 차원1은 너비, 차원2는 높이, 차원3은 깊이라고 할 수 있다. 또한 차원1은 열이 있다고 할 수 있고, 차원2는 행이 있다고 할 수 있으며, 차원3은 통로 또는 층 이 있다고 할 수 있다. 에서, 입력 스트림 생성기는 패딩된 입력을 커널과 동일한 크기의 타일들로 타일링 하여 타일 입력을 생성한다. 예시적인 커널의 크기는 2 X 2 X 2이고 3차원 행렬로 표현될 수 있으므로 타 일 크기도 2 X 2 X 2 이다. 타일링 된 입력의 행에서 타일 수를 나타내는 K 변수에 추가하여, 3차원 입력 에는 타일링 된 입력의 레이어에서 타일 수를 나타내는 M 변수도 포함된다. 현재 타일에 해당하는 위치가 있는 출력 값을 계산할 때 현재 타일 뒤의 한 레이어에 있는 타일과 현재 타일 아래의 타일(2D 입력의 경우)에서 입 력이 필요할 수 있다. 따라서 현재 타일 아래에 있는 타일의 위치를 나타내는 데 사용할 수 있는 K 매개 변수 외에도 M 매개 변수를 사용하여 현재 타일 뒤에 있는 타일을 나타낼 수 있다. 아래 및 뒤와 같은 방향을 참조하 지만 실제로 입력 타일은 여기에 표시된 것처럼 기하학적으로 배열되지 않을 수 있으며 데이터 구조에서 추상적 으로 표시될 수 있으나 동일한 K 및 M 매개 변수가 적용된다. 패딩 된 입력이 6의 너비와 6의 높이를 가지므로, 커널의 2 X 2 레이어가 패딩 된 입력의 6 X 6 레이어로 균등하게 9번 분할되므로 타일의 각 레이어 는 9개의 타일을 포함한다. 따라서 예시된 예에서 M 매개 변수는 9이고 K 매개 변수는 3이다. 프로세스는 일 실시예에 따라 3차원 커널의 경우 입력 텐서를 평탄화 하는 예의 제2 부분을 보여주는 도 6b에서 계속된다. 여기서 도 4와 도 5b를 참조하면에서 입력 스트림 생성기는 각 타일을 평탄화 순서에 따라 벡터로 평탄화 하며, 위에서 설명한 프로세스처럼 서로 평행하게 배치한다. 단일 타일의 크기가 2 X 2 X 2 이므로 8개의 값들을 포함한다. 이 8개의 값을 이 순서에 따라 읽고 단일 벡터로 배열할 수 있도록 순서가 설정 된다. 여기서, 예시적인 평탄화 순서는 단일 타일을 먼저 행 단위(행 중심)로 읽은 다음 각 층/통로(통로- 중심) 단위로 읽는다. 이 순서는 단일 타일의 분해도를 보여주는 병합 순서의 예에서 굵은 이탤릭체 숫자 로 표시된다. 따라서“1”로 표시된 타일 위치의 값을 먼저 읽고,“2”로 표시된 타일 위치의 값을 다음으로 읽 는 식으로,“8”로 표시된 타일 위치의 값에서 끝난다. 타일의 크기에 따라 다른 순서를 설정할 수 있다. 이전 순서와 마찬가지로 순서가 전체 프로세스에서 일관되는 한 출력 값은 사용된 순서에 관계없이 동일하다. 입력 스트림 생성기에 의한 이러한 평탄화의 결과는 평탄화 된 입력이다. 평탄화 순서의 예는 평탄화 된 입력의 각 벡터에서 순서로 표시된다. 따라서, 각 벡터에 대해 순서로 표시된 \"1\"위치는 해당 타일에 대한 예시 평탄화 순서 640의 \"1\"위치에있는 해당 타일의 위치로부터의 값을 갖는다. 여기서 도 6a 와 같이, 어두운 회색 영역은 패딩 값을 나타내고 흰색 영역은 입력 값을 나타낸다. 예를 들어, 도 6a의 타일 3 은 4 개의 입력 값들과 4 개의 패딩 값들을 포함한다. 예시적인 평탄화 순서를 따른 후, 이것은 평탄화 된 입력에서 타일 # 3에 표시된 벡터로 변환되며, 입력 값들은 패딩 값들과 번갈아 가며 나타난다. 도 5 및 도 6의 평탄화 된 입력과 마찬가지로, 도 4 및 도 5b에 도시 된 바와 같이 이 평탄화 된 입력은 출력 값을 생성 하기 위한 추가 처리를 위해 곱셈-덧셈 유닛으로 전송된다. 확장된 커널 생성 도 7은 일 실시 예에 따라 확장된 커널을 생성하는 방법을 예시하는 흐름도이다. 예시된 흐름도는 작업 순 서를 보여줄 수 있지만, 예시된 작업은 임의의 순서로 수행될 수 있으며 더 많거나 적은 수의 작업을 가질 수 있다. 일 실시 예에서, 도 7에 도시된 동작은 확장된 커널 생성기에 의해 수행될 수 있다. 확장 커널 생성기는 입력 텐서를 컨볼루션하는 데 사용되는 커널을 수신한다. 이 커널은 커널 일 수 있다. 커널의 제1(가장 작은)차원에 대해, 확장된 커널 생성기는 해당 단일 차원 벡터의 모든 회전 을 포함하는 커널의 각 단일 차원 벡터에 대한 값의 정사각형 블록(순환 행렬)을 생성한다. 여기에서 각 1 차원 벡터는 커널의 행, 커널의 열, 커널의 대각선 또는 커널의 통로인 고유(unique)한 벡터이다. 커널의 통로는 커 널의 깊이(이 경우 3 차원)에 해당하는 축을 따라 정렬된 커널의 벡터이다. 커널이 다중 커널 필터를 갖는 경우, 각 커널 필터는 여기에 예시된 흐름도에 따라 개별적으로 처리 된다. 각 커널 필터에 하위 필터 커널이 포함된 경우, 해당 하위 필터 커널도 순서도에 따라 별도로 처리된다. 여기서 차원을\"제1\" 또는 \"가장 작은\" 이라고 하지만 커널의 차원이 특정 순서 또는 크기 관계를 가지고 있음을 나타내는 것은 아니다. 대신 커널의 모든 차원을 제1 차원으로 선택할 수 있다. 예를 들어, 도 3의 3 차원 커널 에서. 도 6a에 도시 된 바와 같이, X - 축(X 차원), Y-축(Y 차원) 또는 Z- 축(Z 차원)을 따른 차원이 제1 차원으로서 선택될 수 있다. 유사하게, 단일 채널 또는 다중 채널 입력 텐서와 컨볼루션 된 커널은 단일 출력 채널을 생성한다. 커널에 여러 필터가 포함된 경우 각 필터가 입력 텐서에 적용되어 별도의 출력 활성화를 생성한다. 제1 차원을 처리할 때, 커널의 각 추가 차원에 대해 확장 커널 생성기는 바로 앞의 차원의 블록을 블 록 집합으로 그룹화하고, 각 블록 집합은(추가) 축에 평행한 벡터를 따라 정렬된다. 차원 축에 평행한 벡터는 현재 처리중인 차원 축에 평행한 벡터이다. 따라서 위의 예를 사용하여 X차원이 제1 차원이면 처리할 다음 차원 은 Y차원 일 수 있다(Z 차원도 가능함). Y차원을 따라 Y축에 평행한, 이전 차원의 블록과도 정렬되는 하나 이상 의 벡터를 그릴 수 있다. 이는 이전 차원(X 차원)에서 4개의 블록이 생성되고 이들 각각이 생성된 동일한 위치 에 개념적으로 \"위치\"된 경우 블록의 두 \"열\"을 형성하기 때문이다. 이러한 각 \"열\"은 Y 축에 평행 한 벡터와 정렬되거나 통과한다. 정렬된 블록은 함께 그룹화 된다. 추가 차원에 대해, 확장된 커널 생성기는, 하나 이상의 값 블록을 추가로 생성하며, 각 블록은 바로 이전 차원의 각 블록 세트 내의 블록의 모든 회전을 포함한다. 따라서 위의 예에서 각 블록 열에는 새 정사각형 값 블록을 생성하기 위해 회전된 해당 열 내의 블록이 있다. 그 결과 Y 차원에 대한 두 개의 정사각형 값 블록 이 생성된다. 벡터 또는 블록 세트를 회전하기 위해, 확장 커널 생성기는 행의 값(예를 들어, 배럴이 값을이동) 또는 세트의 블록을 회전하여 각 회전에 대한 새로운 벡터 또는 블록 순서를 생성한다. 가능한 모든 회전 이 생성되면 생성된 벡터 조합 또는 블록 순서가 함께 \"스택\"되어 기본 벡터 또는 기본 블록 세트의 모든 회전 을 포함하는 출력 블록을 생성한다. 계속해서, 다음 차원인 Z차원을 처리할 때 벡터는 Z축에 평행하다. 이 경우, 각각 두 블록의 이전 두 \"열\"의 회 전에서 두 블록이 생성되었다. 따라서 이 두 블록은 벡터와 정렬되는 방식으로 \"위치\"될 때 회전된다. 이 벡터 를 통과하지 않는 다른 블록은 존재하지 않으므로, 이는 필요한 유일한 블록이다. 그러나 커널이 더 높은 차원 (즉, 3차원 이상) 인 경우, 이 벡터와 정렬되지 않는 추가 블록이 있을 수 있으므로 추가 블록을 그룹화하려면 추가 벡터가 필요하다. 모든 차원이 처리될 때, 확장된 커널 생성기는 확장된 커널로서 커널의 추가 차원에서 마지막 차원에 해당 하는 값의 블록을으로 출력한다. 이전 예를 사용하여 Y차원에서 두 블록을 회전한 후 단일 블록이 유지된 다. 이 블록은 확장된 커널로 출력된다. 따라서, 예 에서와 같이 3차원 커널은 한 세트의 제1 벡터를 포함하는 확장된 커널을 가지며, 각 제1 벡터는 제 1 블록 그룹에서 제1 블록의 회전 순열을 가진다. 제1 블록 그룹의 각 제1 블록은 제2 벡터 세트의 제2 벡터에 해당하고, 제2 벡터는 제2 블록 그룹의 제2 블록에 해당한다. 제2 블록 그룹의 각 제2 블록은 커널의 벡터(커널 벡터)에 해당하며, 각 제2 블록은 해당 제2 블록의 해당 커널 벡터의 모든 회전 순열을 나타내는 제3 벡터 세트 를 가지고 있다. 여기서, 각각의 제2 벡터 세트는 대응하는 제2 블록 그룹에서 제2 블록의 모든 회전 순열을 포 함한다. 또한, 제1 벡터 세트는 제1 블록 그룹의 제1 블록의 모든 회전 순열을 포함한다. 일 실시 예에서, 예에서와 같이 3차원 커널 대신, 커널은 1차원(1D) 행렬이고, 확장된 커널은 복수의 병렬 벡터 를 포함하며, 복수의 병렬 벡터들 각각의 벡터는 커널의 다른 회전 순열이다. 여기서 확장 커널은 각 차원의 크 기가 커널의 크기와 같은 정사각형 행렬이다. 다른 실시 예에서, 커널은 2차원(2D) 행렬이므로, 확장된 커널은 제1 벡터 세트를 포함하고, 각 제1 벡터는 블 록 그룹에서 블록의 회전 순열을 갖는다. 블록 그룹의 각 블록은 커널의 벡터(커널 벡터)에 해당하고 각 블록에 는 해당 커널 벡터의 모든 회전 순열을 나타내는 제2 벡터 세트가 있다. 각 제2 벡터는 해당 커널 벡터의 하나 의 회전 순열을 나타내며, 제1 벡터 세트는 블록 그룹 블록의 모든 회전 순열을 포함한다. 일단 생성된 확장된 커널은 확장된 커널을 생성하는데 사용되는 대응 커널의 크기의 곱과 동일한 길이를 갖는 2 차원 정사각형 행렬이다. 1 차원 커널, 2 차원 커널 및 3 차원 커널에 대한 확장된 커널의 생성에 대한 추가 예 는 도 8, 도 9a-9c 및 도 10a-10c를 참조하여 아래에서 설명된다. 도 8은 일 실시 예에 따른 1차원 커널의 경우 확장된 커널을 생성하는 예를 도시한다. 일 실시 예에서 여 기에 설명된 프로세스는 확장된 커널 생성기에 의해 실행될 수 있다. 에서, 확장된 커널 생성기는 커널을 수신한다. 예시된 예에서, 커널은 3 X 1의 크기를 갖 는다(소문자는 커널 값을 나타낸다). 따라서 이는 1차원 커널이다. 위에서 설명한 프로세스를 따라. 도 7에서, 에서, 확장된 커널 생성기는 커널의 각각의 단일 차원 벡터를 회전시킨다. 커널은 [a, b, c]의 단일 벡터만을 가지므로, 이 벡터만 회전할 수 있다. 이 벡터를 회전하면 원래 커널([a, b, c])에 표 시된 조합과 회전([c, a, b] 및 회전([b, c, 회전이 생성되는 방법은에 표시된 화살표로 표시된 다. 이러한 조합은 함께 그룹화되어 순환 행렬을 형성한다. 에서 처리할 커널의 추가 차원이 없으므 로 확장 커널 생성기는 회전 중에 생성된 그룹화 된 벡터를 확장 커널로 출력한다. 확장된 커널이 커널의 다양한 회전을 포함하기 때문에, 확장된 커널의 다른 행들은 제어 패턴(예를 들어, 제어 패턴)에 의해 선택된 바와 같이 평탄화 된 입력 스트림의 타일에 대한 내적에서 사용될 수 있다. 입력의 단일 값에 대해 원래 커널을 여러 번 실행하는 대신 여기에서 커널을 확장하여 위에서 언급한 입력 스트림의 수 와 동일한 입력을 읽을 필요없이 2^2s-1 번 평탄화 된 입력 스트림에 적용할 수 있다. 확장된 커널은 가능한 입 력 텐서보다 크기가 훨씬 작기 때문에 여기에 설명된 프로세스에서 커널을 확장하는 것이 입력 텐서의 값 을 여러 번 읽는 것보다 훨씬 효율적이다. 도 9a는 일 실시 예에 따른, 상이한 2 차원 커널에 대한 확장된 커널을 생성하는 예를 예시한다. 도 8에 도시 된 바와 같이, 일 실시 예에서 여기에 설명된 프로세스는 확장된 커널 생성기에 의해 실행될 수 있다. 에서, 확장된 커널 생성기는 커널을 수신한다. 상이한 크기를 갖는 2 차원 커널(920A-C)의 세 가지 예가 여기에 도시되어 있다. 커널(920A)는 크기 3 X 2, 커널(920B)는 크기 2 X 3, 커널(920C)는 크기 3 X 3이다. (902A)에서, 커널의 단일 차원 벡터는 행-중심 순서를 사용하여 커널 회전(922A-C)에서 회전된다. 즉, 단일 차원 벡터는 회전되는 커널의 행에 대응한다. 도면과 같이 커널의 크기에 따라 1차원 벡터의 수가 다르다. 예를 들어, 3 개의 행을 갖는 커널(920B)는 커널 회전(922B)에서 3 개의 회전 세트를 갖는 반면, 커널(920A)는 2개의 회전 세트만을 갖는다 (903A)에서, 추가 차원, 즉 제2 차원이 회전된다. 여기 도 7에서, 제2 차원의 축과 정렬되는 벡터가 선택되고 각 벡터를 통과하는 블록이 함께 회전된다. 커널(920A)의 예에서, 2개의 블록(926A-B)이 커널 회전(922A)에서 생성되었으며, 이들은 2차원 축을 따라 단일 벡터와 함께 정렬된다. 블록(926A)는 행 [a, b, c]의 회전을 결합 하여 생성되고 블록(926B) 행 [d, e, f]의 회전을 결합하여 생성된다. 이들 2개의 블록은 확장된 커널(932A)을 생성하기 위해 커널 회전(924A)에서 회전된다. 커널에 더 이상 차원이 없기 때문에 더 이상의 회전은 없다. 유사한 프로세스가 커널(920B)에 대해 수행된다. 그러나 이번에는 세 개의 블록(928A-C)이 있다. 따라서, 커널 회전(924B)에서, 3개의 블록(928A-C)이 회전되고 결합되어 확장된 커널(932B)을 생성한다. 커널(920C)의 경우, 커널 회전(922C)에서도 3개의 블록(930A-C)이 생성되었다. (커널(920C)이 3 개의 행을 갖기 때문이다). 이들 블 록(930A-C)은 확장된 커널(932C)을 생성하기 위해 커널 회전(924C)에서 2차원으로 회전된다. 확장된 각 커널은 두 차원(예: 정사각형 행렬)에서 동일한 크기를 가지며 각 차원의 크기는 커널의 각 차원 크기의 곱과 같다. 예 를 들어, 커널(920B)은 3 X 2 크기를 가지며, 따라서 확장된 커널(932B)의 각 차원의 크기는 3 X 2 = 6이다. 도 9b는 일 실시 예에 따라 열-중심 확장을 사용하여 확장된 커널을 생성하는 예를 예시한다. 도 9a 에서와 같 이 행-중심 순서를 사용하는 대신, 여기에 예시된 예는 열-중심 순서를 사용한다. (902B)에서, 확장된 커널 생성기는 커널(920C)을 취하고 각각의 단일 차원 벡터를 회전시킨다. 그러나, 1 차원 벡터는 대신 커널(920C)의 열로 선택된다. 따라서 값이 [a, b, c] 인 벡터 대신 여기에 표시된 제1 벡터는 도면에 표시된 대로 열 1에 해당하는 [a, d, g] 값을 갖는다. 나머지 두 벡터는 레이블이 지정된 열 2와 열 3에 해당한다. (903A)에서, 블록(938A-C)으로 형성되는(902B)로부터의 회전 된 벡터는 도 9a에 도시 된 커널 회전과 유사 한 커널 회전에서 회전된다. 이것은 동일한 커널을 사용함에도 불구하고 확장된 커널(932C)과 다른 확장된 커널을 생성한다. 단, 이 열-중심 순서를 고려하여 제어 패턴도 생성하면 컨볼루션 적용 후에도 출력 값이 달라지지 않는다. 도 9c는 일 실시 예에 따른, 다중 커널 필터의 경우 확장된 커널을 생성하는 예를 도시한다. 커널에 여러 커널 \"필터\" 가 있는 경우, 각 커널 필터는 이전에 단일 커널에 대해 설명한 것과 동일한 방식으로 확장된다. 각 필 터에 추가 하위 필터 커널이 있는 경우, 이러한 커널도 동일한 방식으로 확장된다. 따라서, 커널 필터(942A- N)는 도시 된 바와 같이 확장된 커널 필터(944A-N)로 확장된다. 도 10a는 일 실시 예에 따른, 3차원 커널의 경우에 확장된 커널을 생성하는 예의 제1 부분을 도시한다. 도 9, 도 9a-c와 마찬가지로 여기서 설명된 프로세스는 확장된 커널 생성기에 의해 실행될 수 있다. 에서 확장된 커널 생성기는 커널을 수신한다. 도시된 분해도에서, 커널은 층(1028A 및 1028B)을 갖는 것으로 보일 수 있다. 각 계층은 서로 다른 커널 값 \"a\" - \"h\"를 가지므로 2 X 2 X 2 커널 에 대해 8 개의 값이 생성된다. 에서 확장 커널 생성기는 커널의 모든 단일 차원 벡터를 회전시킨다. 이 중 4개는 커널(102 6)에 있으며, 이는 각 계층에 있는 커널의 4개 행에 해당한다. 그러므로, 네 세트들의 회전은 커널 회전을 생성[또는: 생성될 수도??]한다. (1003A)에서, 확장된 커널 생성기는 커널 회전에서 생성된 블록들을 그룹화함으로써 제2 차원(즉, 다음 차원)을 회전한다. 여기서, 처리중인 현재 차원의 축(즉, 제2 차원)에 평행한 벡터를 따라 정렬되는 커널 회전의 블록이 함께 그룹화된다. 여기서, 집합(1034A)를 형성하는 블록은 제2 차원 축, 즉 Y축 에 평행한 벡터(즉, 벡터 (1032A))를 따라 정렬된다. 집합(1034B)을 형성하는 블록은 집합 (1034B)와 별도의 레이 어에 있는 값으로 형성되었다. 세트(1032A)에서 제2 차원 축에 평행한 벡터(즉, 벡터 1032B)를 따라 정렬된다. 여기에 두 개의 벡터가 그려져 있지만, 이는 블록이 그룹화되는 방식 뒤에 있는 개념적 추론을 보여주기 위해 제공된다. 실제로 벡터가 그려지지 않고 확장 커널 생성기는 이들이 생성된 차원의 인덱스를 결정함으로써 이들 블록을 그룹화한다. 예를 들어, 세트(1034A)의 블록은 레이어(1028A)(인덱스 \"0\"일 수 있음)에서 생성되고, 세트(1034B)의 블록은 레이어(1028B)에서 생성된다. 따라서, 확장된 커널 생성기는 이들 상이한층으로부터 생성된 블록을 개별적으로 회전시키는 것을 알고 있다. 이 프로세스는 이전 차원에서 생성된 블록을 그룹화하는 데 사용되는 현재 차원의 인덱스 값으로 후속 차원에 대해 반복된다. 이 과정은 도 10b에서 계속되는데, 이것은 실시에 따라 3차원 커널의 경우 확장 커널을 생성하는 예제의 제2 부 분을 보여준다. 여기(1003B)에서, 확장된 커널 생성기는 세트(1034A-B)로 그룹화 된 이전 세대의 블록의 회전을 생성한다. 각 세트의 블록은 개별적으로 회전된다. 도시 된 바와 같이, 이것은 2개의 블록을 생성하는데, 이는 세트 (1034A)의 두 블록의 회전에서 생성된 블록과 세트(1034B)의 두 블록에서 생성된 블록이다. (1004A)에서 확장 커널 생성기은(1003A) 단계를 반복하지만, 다음 차원, 즉 3차원 커널의 마지막 차 원이기도 하다. 여기서, 확장된 커널 생성기은 차원의 축과 정렬된 벡터를 따라 블록을 그룹화한다. 이 벡 터는 벡터이고 축은 Z축이다. (1003B)에서 생성된 각 블록은 커널의 다른 계층의 블록에서 생성되 었고, 따라서(1003B)에서 생성된 블록은 개념적으로도 다른 레이어에 있다. 벡터은 생성된 두 블록과 정 렬되며(즉, 두 블록을 모두 통과할 수 있음) 이러한 블록은 설정된(1038A)로 그룹화된다. 그룹화할 다른 블록이 없으므로 3차원에 대해 설정된 것은 이뿐이다. 과정은 도 10c에서 계속되는데, 이것은 실시에 따라 3차원 커널의 경우 확장 커널을 생성하는 예제의 세 번째 부분을 보여준다. 여기서, (1004B)에서 확장 커널 생성기 는 이전 차원을 처리할 때 생성된 블록 집합에서 블록에 대한 모든 회전을 생성한다. 도면 예제에서는 (1038A) 한 세트만 존재하므로, 커널 의 차원의 마 지막 차원이기 때문에 이 세트의 블록은 최종 확장 커널 를 생성하기 위해 회전한다. 제어 패턴 생성 도 11은 일 실시 예에 따른, 제어 패턴을 생성하는 방법을 예시하는 흐름도 이다. 예시된 흐름도가 동작 의 순서를 보여줄 수 있지만, 예시된 동작은 임의의 순서로 수행될 수 있으며 더 많거나 적은 수의 동작을 가질 수 있다. 일 실시 예에서, 도 7에 도시된 동작은 제어 패턴 생성기 에 의해 수행될 수 있다. 제어 패턴 생성기 는 출력 활성화를 생성하기 위해 입력 텐서와 컨볼루션되는 커널의 각각의 차원에 대한 하나 이상의 크기를 수신한다. 이 커널은 도 1의 커널 일 수 있다. 커널은 1차원, 2차원, 3차원 또 는 그 이상일 수 있다. 커널의 각 차원은 크기를 가지며, 이것은 제어 패턴 생성기 에 의해 수신된다. 에서 제어 패턴의 각 위치에 대해 제어 패턴 생성기 는 제어 패턴의 위치의 좌표와 커널의 각 차원 의 하나 이상의 크기를 기반으로 해당 위치에 대해 값을 생성한다. 모든 위치의 값들이 생성되면, 제어 패턴 생성기 는 완료된 제어 패턴 사각 매트릭스를 출력한다. 제어 패턴의 각 차원은 커널의 너비와 높이의 곱과 같은 크기이다. 또한 제어 패턴의 각 위치 값은 커널과의 컨 볼루션을 위해 평탄화 된 입력 텐서의 값에 액세스 할 위치를 나타낸다. 일 실시 예에서, 제어 패턴의 각 위치는 행 번호와 열 번호를 가지며, 각 값의 생성은 커널의 각 차원에 대해 행 번호, 열 번호 및 커널 각 차원에 대한 하나 이상의 크기를 결정하는 것으로 구성된다. 각 테스트는 위에서 설명한대로 입력 텐서의 커널 크기 타일을 평탄화하여 입력 텐서에서 생성되는 평탄화 된 입력 스트림의 값에 액세스 할 상대적 오프셋 양을 나타내는 이진 출력을 생성한다. 제어 패턴의 해당 위치에 대한 값은 커널의 각 차원에 대한 테스트의 이진 출력 조합으로 생성된다. 각 테스트는 위치의 행 번호를 사용하는 제1 모듈로 계산 과 위치의 열 번호를 사용하는 제2 모듈로 계산을 비교하는 테스트 부등식일 수 있다. 제1 모듈로 계산은 커널 의 각 차원에 대한 행 번호와 하나 이상의 크기 사이의 모듈로이다. 제2 모듈로 계산은 커널의 각 차원에 대한 열 번호와 하나 이상의 크기 사이의 모듈로이다. r은 행 번호, c는 열 번호, h는 커널의 높이, w는 커널의 너비 라 할 때, 2 차원 커널의 경우 제1 테스트는 r mod h <c mod w이고 제2 테스트는 floor ((r mod (h X w)) / h) <floor ((c mod (h X w )) / w) 이다. 일 실시 예에서, 제어 패턴은 복수의 벡터들을 포함하고, 복수의 벡터들의 벡터의 수는 출력 활성화의 커널 크 기 타일에서 출력 값 위치의 수에 대응한다. 복수의 벡터들의 각 벡터 내의 값은 지연 값에 대응하며, 각 지연 값들은 평탄화 된 입력 스트림에서 개별 입력 값에 액세스하기위한 지연의 양을 나타낸다. 위에서 설명한 바와 같이, 평탄화 된 입력 스트림은 입력 텐서에서 생성된 병렬 벡터 세트를 포함하고, 지연된 양은 평탄화 된 입력 스트림 내의 병렬 벡터 중 하나를 지정한다. 일 실시 예에서, 지연 값은 생성할 출력 값에 해당하는 출력 값 위치에 대해 해당 출력 값 위치에 해당하는 제 어 패턴의 벡터를 선택하여 출력 활성화의 커널 크기 타일의 각 출력 값 위치에 대한 출력 값을 생성하는 데 사용된다. 각 지연 값은 평탄화 된 입력 스트림 내에서 병렬 벡터를 나타내며, 각 지연 값은 출력 값을 생성하는 데 사용되는 각 입력 값에 액세스할 때 사용된다. 내적은 액세스된 입력 값과 확장된 커널의 벡터 사이에서 실 행되어 출력 활성화의 커널 크기 타일의 출력 값 위치에서 출력 값을 생성한다. 하나의 실시에서 확장 커널은 계층적 블록 집합을 포함하도록 커널을 수정함으로써 생성되며, 각 블록은 해당 블록의 노드인 블록의 모든 회 전 순열을 포함한다. 계층적 블록 집합의 잎들(leaves)은 커널의 개별 벡터의 모든 회전 순열을 포함하는 블록 이며, 계층적 블록 집합의 각 블록은 커널 내에서 해당 블록에 의해 표현되는 차원의 축에 평행한 벡터와 정렬 된 블록을 가지고 있다. 일 실시 예에서, 제어 패턴은 입력 텐서를 컨볼루션하는 데 사용되는 대응하는 커널의 크기의 곱과 동일한 길이 를 갖는 2차원 정사각형 행렬이다. 일 실시 예에서, 제어 패턴의 지연 값이 배열되는 순서는 입력 텐서의 커널 크기 타일이 평탄화 된 입력 스트림 을 생성하기 위해 액세스되는 정의된 순서를 기반으로 한다. 일 실시 예에서, 정의된 순서는 행-중심 순서, 열-중심 순서 또는 통로-중심 순서이다. 통로-중심 순서는 먼저 3D 타일의 깊이에 해당하는 축을 따라 입력 텐서의 3차원 (3D) 커널 크기 타일에 있는 요소에 액세스하고, 이어 서 3D 타일의 너비와 높이에 해당하는 축을 따라 액세스한다. 위의 흐름도는 커널의 크기에서 제어 패턴을 생성하는 방법을 설명하지만, 다른 실시에서는 다양한 커널 크기에 대한 다양한 제어 패턴이 메모리에 저장되고 사용 중인 커널 크기에 따라 검색된다. 제어 패턴의 생성과 관련된 추가 세부 사항은 아래 도 12-13을 참조해야 한다. 도 12a는 일 실시 예에 따른 제어 패턴의 생성을 위한 개념적 기반의 예 의 제1 부분을 예시한다. 앞서 언급한 바와 같이, 제어 패턴의 목적은 출력 값을 생성하기 위해 확장된 커널과의 조합을 위해 평탄화 된 입력 스트림의 올바른 타일로부터 값을 선택하는 것이다. 컨볼루션의 단순한 실시에서 커널이 입력 값을 지나갈 때 입력에서 다른 값을 읽고 커널의 가중치와 결합하여 출력을 생성한다. 제어 패턴을 사용하면 올바른 출력 값 을 생성하기 위해 다른 입력 값이 있는 다른 타일을 선택하여 이를 시뮬레이션 할 수 있다. 그러나 단순한 실시 와 달리 입력 값은 여러 번 읽히지 않고 최소한의 읽기만 수행된다. 선택할 타일을 나타내는 제어 패턴에서 패 턴을 결정하기 위해 다음 방법을 사용할 수 있다. 그러나, 제어 패턴을 생성하기 위해 다음 방법을 사용할 수 있지만, 실제 하드웨어의 경우 여기 기술된 방법의 효율성이 부족할 수 있기 때문에 도 11을 참조하여 위에서 설명한 방법과 같은 별도의 방법을 사용할 가능성이 있다. 따라서 여기에 설명된 방법은 제어 패턴에 대한 개념 적 이해를 제공하는 데 더 많은 역할을 할 수 있다. 에서 입력은 도 4-6을 참조하여 위에서 설명한 방법과 유사하게 평탄화 된 것이다. 입력 텐서는 크기가 4 X 4이고 커널 은 크기가 2 X 2이므로 각 타일의 크기는 2 X 2이며 전체적으로 4개의 타일이 있다(여기서 는 패딩이 적용되지 않는다). 따라서 평탄화 된 은 각각 타일들을 나타내는 4개의 벡터를 가진다. 커널은 또한 확장 커널 를 생성하기 위해 확장되며, 이는 도 7-10에서 참조할 수 있듯 위에서 설명한 프로세스와 유사하다. 에서 평탄화 된 입력 에서 제1 타일인 타일 1(1222A)은 확장 커널과 곱하여 요소 별 곱(1226A)를 생성한다. 따라서, 타일 (1226A)의 \"1\"은 확장 커널 에서 각각 4개의 커널 값 \"a\", \"b\", \"c\", \"d1\"을 곱 하여 4개의 곱 \"a1, \"b1, \"c1\" 및 \"d1\"을 생성한다. 이는 타일의 나머지 값뿐 아니라 다른 타일 2-4(1222B- C)에도 반복된다. 이렇게 하면 도면과 같이 요소별 곱 1226A-D가 생성된다. 이 과정은 도 12b에서 계속되며, 실시에 따라 제어 패턴 생성을 위한 개념적 기초의 제2 부분을 보여준다. 에서 요소별 곱 (1226A-D)이 생성되었으므로, 원래 입력의 단일 타일에 걸쳐 겹치는 커널의 각 위치에 대 해 요소별 컨볼루션 곱을 생성하는 데 필요한 타일 값이 결정된다(도면의 예에서 커널의 행별 스트라이드 사 용). 그러므로, 위치 1 (1230A)에서 커널 위치 경계 상자 로 표시된 바와 같이 커널 위치가 입력의 맨 왼 쪽 위치에 있는 경우, 커널 값이 오버레이 되는 입력의 기본 값에 대해 커널 값 \"a\", \"b\", \"c\", \"d\"가 곱해진다. 따라서, \"a\"는 입력에서 \"1\"과 곱하고, \"2\"와 \"b\", \"c\"와 \"3\" 그리고 \"4\"와 곱하여 도면처럼 위치 1 (1234A)에 대한 요소 별 곱 쌍을 생성한다. 이러한 곱 쌍은 도면 예에서 열로 표시되지만 각각 행-중심 또는 열 -중심 형식을 사용하여 평탄화 된 입력 스트림 또는 확장된 커널을 생성했는지 여부에 따라 행으로도 표시될 수 있다. 요소 별 쌍 (1234A)에 기초하여, 요소 별 곱 (1226A-D) 중 이러한 요소 별 쌍이 위치할 수 있는 곳이 결정된다. 위치 1 (1230A)의 제1 예에서 이러한 모든 쌍은 요소 별 곱 (1226A)에 위치할 수 있으며 \"A\"라는 레이블이 지정된다. 따라서 위치 1을 분석한 후의 제어 패턴은 (1236A)에서 모든 \"A\"의 열로 표시된다. 여기서 A는 현재 처리 중인 타일을 나타낼 수 있으며 타일 X로 일반화될 수 있다. 위치 2 (1230B)에서, 커널 위치 는 여전히 입력의 제1 타일 위에 겹치지만 오른쪽으로 하나 이동된다. 요 소 별 곱 쌍(1234B)는 \"a2\", \"b5\", \"c4\"및 \"d7\" 이다. 커널의 \"d\"가 이제 입력에서 \"7\" 값을 초과하므로 이 \"d7\" 곱 쌍은 요소 별 곱(1226A)에서 찾을 수 없지만 요소 별 곱(1226B)에서 찾을 수 있다 따라서 (1236B)에 표 시된 제어 패턴의 다음 열에는 요소별 곱 쌍 (1234B)의 \"d7\" 위치에 해당하는 마지막 값에 \"B\"가 있다. 또한 여 기서 B는 현재 타일 X에 하나 또는 타일 X+1에 해당한다. 위치 3에서, 커널 위치는 하나는 아래로, 하나는 왼쪽으로 이동된다. 커널은 더 이상 오른쪽으로 이동하 지 않는다. 그럴 경우 더 이상 제1 타일과 겹치지 않는다. 입력에서 동일한 타일 위치, 즉 현재 타일에 해당하 는 단일 타일의 출력 값을 생성하는 데 사용되는 평탄화 된 입력 스트림의 값만 결정하기 위해 제어 패턴이 생 성되므로 이는 불필요하다. 추가 타일은 별도로 계산된다. 따라서 시스템이 타일별로 출력 값을 계산할 때 여기 에 설명된 프로세스는 커널이 문제의 단일 타일 위에 겹치는 커널의 위치에만 관련된다. 또한, 예시된 예에서 커널의 초점이 커널 의 좌측 상단 위치 (\"a\"로 표시됨)이므로 관심있는 현재 타일 위의 커널 위치 는 커널의 포커스는 현재 타일의 각 입력 값 위에 겹쳐진다. 따라서 위치 3은 커널의 포커스가 현재 타일 의 세 번째 값 위에 겹쳐지는 위치이다(행 방향 순서 사용). 이 경우 커널은 현재 타일에서 읽지만 현재 타일 아래의 타일 (타일 X + K)에서도 읽는다. 여기서 K는 이전에 언급한 대로 행 (또는 열)의 타일 수이다. 이 값은 커널과 결합되어 요소 별 곱 쌍 1234C를 생성한다. 요소별 곱 쌍 (1234C)에 표시된 것처럼 \"c9\" 및 \"d10\"은 현 재 타일 아래에 있는 타일의 값을 포함하며 요소별 곱 (1226C)에서 확인할 수 있다. 즉, \"c9\" 및 \"d10\"은 요소 별 곱 (1226C)의 값 중 하나에 위치할 수 있다. 처음 두 곱 쌍인 \"a3\"와 \"b4\"는 요소별 곱 (1226A)에서 찾을 수 있다. 이 곱에는 현재 타일의 값만 포함되어 있다. 따라서 (1236C)에 표시된 위치 3 이후의 제어 패턴의 다음 열에는 두 개의 \"A\"와 두 개의 \"C\"가 있으며, 문자의 순서는 곱 쌍의 순서에 해당한다. 마지막으로, 위치 4 (1230D)에서, 입력에 오버레이 된 커널의 위치 는 현재 타일 및 현재 타일을 둘러싼 3 개의 다른 모든 타일의 값을 터치한다. 따라서 제품 쌍 (1234D)는 \"a4\", \"b7\", \"c10\"및 \"d13\"이다. 이들은 각각의 요소 별 제품 (1226A-D)에서 각각 식별될 수 있다. 따라서 1236D에 표시된 대로 제어 패턴의 마지막 열 은 각각 \"A\"- \"D\"문자를 사용하여 4 개의 요소 별 곱 (1226A-D)을 모두 나타낸다. 여기서 D는 현재 타일 X와 행 크기 변수 K, 더하기 1 또는 X + K + 1을 나타내므로 현재 타일의 아래 및 오른쪽에 있는 타일을 나타낸다. 여기에 표시된 바와 같이, 제어 패턴의 값은 현재 타일에서 커널의 초점 위치에 대한 컨볼루션을 계산하기 위해 값을 검색할 현재 타일을 둘러싼 타일을 나타낸다. 따라서, 평탄화 된 입력 스트림에서 값을 선택하는 데도 사 용될 수 있으며, 이 값은 확장된 커널의 해당 벡터와 결합되어 출력에서 해당 초점 위치에 대한 출력 값을 생성 한다. 도 13a는 실시에 따라 2차원 커널에 대한 제어 패턴에 대한 값 생성 부분의 예 을 보여준다. 일 실시 예 에서, 여기서 설명하는 프로세스는 제어 패턴 생성기 에 의해 수행된다. 에서, 제어 패턴 생성기 는 제어 패턴 에 대한 모든 값을 생성한다. 여기서, 제어 패턴 의 대부분의 값은 이미 생성되었지만 나머지 값 은 프로세스를 설명하기 위해 아직 생성되지 않았 다. 이 값 는 표시된 대로 행 0과 열 8에 있다. 제어 패턴 생성기 는 에서 그 위치에 대한 행 및 열 번호/좌표를 사용하여 위치에 대한 테스트 결과를 결정한다. 테스트 결과는 테스트 부등식 를 참조 한다. 테스트의 수는 커널의 차원 수와 같다. 여기서 커널은 2 차원이므로 두 가지 테스트가 생성된다. 각 테스 트는 입력 텐서에서 각 차원의 타일 크기를 식별하는 데 사용되는 이동 변수 중 하나에 해당한다. 예를 들어, K 는 제1 차원 (즉, 각 행)의 타일 크기 또는 수를 나타내고 M은 제2 차원 (즉 각 레이어)의 타일 수를 나타낸다. 대안으로, 특정 차원의 각 이동 변수는 해당 차원의 타일 크기의 곱 및 임의의 이전 차원의 타일 크기의 곱과 동일한 것으로 정의될 수 있다. 여기서 타일 크기는 입력 텐서의 차원과 평행 한 길이에 걸쳐 있는 타일 수를 나타낸다. 또한 이 때 제1 차원에 대한 테스트가 생성되며, 이는 이동 변수가 아니라 현재 타일에 해당한다. 따라서 여기 서 test_k와 test_1이 생성된다. 또는 위에 언급한 바와 같이 이동 변수를 사용하여 평탄화 된 입력 스트림에 액세스하기 위한 지연 양을 나타낼 수 있기 때문에 이러한 변수를 delay_k 및 delay_1이라고 할 수 있다. 여기서 볼 수 있듯, 테스트 부등식의 생성은 하나의 패턴을 따른다. 제1 차원 1에 대한 테스트 부등식은 r mod > c mod w이며, 여기서 r은 제어 패턴에 표시된 제어 패턴의 행 번호이며, h는 커널에 표시된 커널의 높이이며, c는 열 번호이며, w는 커널의 너비이다. K 변수에 해당하는 제2 검정_k는 유사하지만 제2 차원이 기 때문에 계산에서 면적, 즉 h X win을 포함한다. 따라서 결과적인 테스트 부등식은 바닥((r 모드(h X w) / h) < 바닥(c 모드(h X w)) / w)이며 바닥은 바닥 또는 반올림 연산(가장 가까운 정수까지)이다. 여기서 커널 는 정사각형 커널이지만, 다른 경우에는 커널이 정사각형이 아닐 수 있으므로 커널의 높이와 너비는 모두 테스트 부등식으로 간주된다. 두 테스트의 결과는 결과 표 132에서 참조된다. 여기서, 각 테스트의 참 또는 거짓 (즉, 1 또는 0) 결과에 따라 다른 값 (즉, 지표)이 제어 패턴에서 해당 위치에 배치된다. 여기에는 두 개의 테스트가 있으므로 총 4 개의 가 능한 값이 있으며 여기에서는 문자 A, B, C 및 D로 표시되고 각각 이진 값 00, 01, 10 및 11로 표시된다. 본 명 세서에 설명된 바와 같이, 이러한 값은 출력 활성화를 계산하기 위해 값에 액세스 할 평탄화 된 입력 스트림의 벡터/타일을 표시한다. 여기서 테스트 결과 에 표시된 것처럼 행 번호가 0이고 열 번호가 8인 두 테스트 의 결과는 모두 참이므로 의 값은 현재 타일 x+k+1을 참조하는 \"D\" 또는 11이다. 행 번호와 열 번호는 도 면과 같이 순서가 지정되지만 다른 실시에서는 순서를 바꿀 수 있다. 테스트 부등식이 수정되는 한(예를 들어, 역순으로) 결과는 같을 것이다. 따라서 이 프로세스는 제어 패턴의 행이나 열에 레이블이 지정된 특정 방법에 의해 제한되지 않는다. 도 13b는 실시에 따라 3차원 커널에 대한 제어 패턴에 대한 값 생성 부분의 예 을 보여준다. 한 가지 실 시에서, 여기서 설명하는 프로세스는 제어 패턴 생성기 에 의해 수행된다. 여기에서 제어 패턴 생성기 는 제어 패턴 에 대한 값을 생성한다. 도13a의 제어 패턴과 대조 적으로, 제어 패턴 은 높이 2, 폭 2 및 깊이 2를 가진 3차원 커널 에 대해 생성된다(각각 h, w, d) 앞에서 설명한 바와 같이, 커널의 각 차원은 테스트 부등식과 관련이 있다. 따라서, 여기서 세 가지 테스트 부 등식이 시험 표 1370에 생성된다. 도 13a와 마찬가지로, 그들은 각각 test_m, test_k 및 test_1 대신 delay_m, delay_k 및 delay_1로 지칭될 수 있다. test_1과 test_k는 모두 도 13a에 표시된 테스트 부등식과 동일하다. test_m은 M 이동 변수(즉, 입력 텐서의 층에 있는 타일의 수)에 대응하며 test_k와 유사한 패턴을 따르지만, 지 금은 커널의 깊이(d)를 포함한다. 커널이 추가 차원을 포함한다면, 이 테스트 부등식은 추가 차원을 포함하도록 더 확장될 것이다. 예를 들어, 4 차원의 경우 테스트 부등식은 플로어((r 모드 (h X w X d X t) / (h X d X t) > 플로어((c mod (h X w X d X t)) / (w X d X t) / (w X d X t)이며, t는 커널의 4차원의 크기를 나타낸다. 이 패턴은 더 높은 차원으로 계 속되며, 추가 차원이 테스트 부등식에 추가된다. 따라서, 테스트 부등식은 N개의 차원을 가진 커널에 대해 플로 어((r모드(커널의 차원 크기 곱) / (h X 너비를 제외한 커널 크기의 곱) < 플로어(c모드(커널의 크기 곱) / (높 이를 제외한 커널 크기의 곱) / (w X 크기 곱)의 형태를 취한다. 해당 커널에 대한 테스트 부등식은 저차원 커 널 N-1, N-2쪋1에 대한 테스트 부등식이며, 1차원에 대한 테스트 부등식은 여기에 표시된 테스트_1과 동일하다 (그리고 2차원이 여기에 표시된 커널의 테스트_k 등). 3차원 커널에 대한 3개의 테스트가 있기 때문에 결과 표 1372에 표시된 총 8개의 조합이 있다. 각 조합은 지시 자 A-H 또는 3비트 이진수 값에 해당한다. 도 13c를 참조하여 아래에서 더 자세히 설명할 것처럼, 이진 비트의 패턴을 일부 실시에서 효율적으로 저장하는 데 사용할 수 있다. 에서 제어 패턴 생성기 는 제어 패 턴 에 대한 행 0 및 열 7에서 마지막 남은 값 를 생성한다. 시험 결과 에 나타난 것처럼, 세 가지 테스트 부등식은 모두 이 위치에 대한 지시자 H 또는 이진수 값 에 해당하는 참이 된다. 따라서 H는 제어 패턴 의 행 0, 7열에 저장된다. 단, 모든 테스트 부등식이 사실로 돌아오지 않는다면, 산출된 테스 트 부등식 결과와 일치하는 3가지 테스트 부등식 결과를 나타내는 결과 표 1372의 행을 선택하여 다른 지표를 선정할 것이다. 커널이 추가 차원을 포함한다면, 결과 표 1372의 크기는 테스트 부등식의 수와 유사하게 증가할 것이다. 결과 테이블의 행 수는 2^X 행들과 동일하며, 여기서 X는 커널의 차원 수이다. 볼 수 있듯이, 테스트 부등식 결과가 가장 큰 차원의 결과가 이진수 값의 가장 중요한 비트를 형성하고 가장 작은 차원의 결과가 가장 중요하지 않은 비트를 형성하도록 구성된다면, 각 결과들의 조합은 이진수 값으로 간주될 수 있고 테이블에서 순차적으로 순서 지정이 가능하다(예: 위에서 아래로 오름차순으로). 각 조합과 관련된 지표도 순차적으로 증가하며, 순차적으로 증가하는 차원 크기의 이동 변수 조합과도 관련이 있다. 예를 들어, 도면 예제에서 A와 B는 이동 변수가 없고 현재 타일(즉, 현재 타일 x와 x+1)만 있는 C와 D는 이동 변수 k(즉, x+k와 x+k+1)를 포함하며, E와 F는 다음으 로 높은 차원 이동 변수 m(예: x+m과 m+1)을 포함한다. (즉, x+m+k 및 x+m+k+1)이다. 커널이 추가 차원이라면, 이것은 크기가 계속 커질수록 이동 변수의 조합으로 계속될 것이다. 각 조합은 두 개의 지표를 포함하며, 하나는 조합 자체이고 다른 하나는 조합 더하기 1이다. 따라서, 4차원 커널의 경우, 패턴은 I와 J (x+t와 x+t+1), K 와 L (x+t+k와 x+t+1), M과 N (x+t+m과 x+t+k+1), O와 P (x+t+k+1)로 계속된다. 이는 이진수 값 1000~1111(또 는 8~15)과 일치하며, 가장 중요한 숫자는 4차원에 대한 테스트 부등식(즉, \"test_t\" 또는 \"delay_t\")에 해당하 며, 나머지 비트는 여기에 설명된 동일한 3개의 시험에 해당된다. 테스트 부등식을 계산하기 위해 변수 r은 값이 생성될 제어판 위치의 행 번호 (여기서는 0)로 대체된다. 변수 c 는 값이 생성될 제어판의 위치의 열 번호(여기서는 7), 변수 h, w, d는 커널의 높이, 폭, 깊이 크기(여기서는 각각 2, 2, 및 2)로 대체된다. 도 13c는 일 실시 예에 따른, 상이한 차원의 커널에 대한 제어 패턴을 생성하는 예 를 예시한다. 도 13에 서, 3 X 1 1D 커널 , 3 X 3 2D 커널 및 2 X 2 X 2 3D 커널 이 도시되어 있으며, 명확성을 위해 3D 커널 이 분해도로 도시 되어있다. 대응하는 제어 패턴 (1312, 1316 및 1320)이 각각 이들 커널에 대해 예시된다. 이들은 도 11을 참조하여 전술한 방법에 따라 생성될 수 있다. 1D 커널의 경우, 제어 패턴 의 식별자 \"A\"는 현재 타일 X를 나타내고, \"B\"는 타일 X + 1을 나타낸다. 제어 패턴 의 경우 \"A\"는 현재 타일 X, \"B\"는 타일 X + 1, \"C\"는 타일 X + K를 나타낸다. 여기서 K는 앞서 설명한 행 크기 변수, \"D\"는 타일 X + K + 1을 나타낸다. 제어 패턴 의 경우, \"A\"에서 \"D\"는 제어 패턴 과 동일한 타일을 나타 낸다. 또한, \"E\"는 타일 X + M (현재 타일 뒤의 타일)에 대응하고, M은 레이어 타일 크기 (즉, 레이어의 타일 수)이다. \"F\"는 타일 X + M + 1, 즉 현재 타일 뒤의 타일 오른쪽에 있는 타일에 해당한다. “G”는 타일 X + M + K이며 현재 타일의 뒤와 아래에 있는 타일에 해당한다. \"H\"는 타일 X + M + K + 1에 해당하고 현재 타일의 뒤, 아래 및 오른쪽에 있는 타일에 해당한다. 일 실시 예에서, 도 13에 도시 된 문자와 같은 인디케이터를 사용하여 제어 패턴을 저장하는 대신, 이러한 문자 를 나타내는 비트 시퀀스로서 제어 패턴의 프랙탈 특성을 사용하여 보다 효율적인 방식으로 저장한다. 각 제어 패턴 (1312, 1316 및 1320)에 대해 식별자는 상단 및 오른쪽 가장자리를 따라 \"A\"로 시작하여 \"A\"와 \"B\"사이의 교대 패턴으로 이어지고 왼쪽까지 더 분할된 패턴으로 이어진다. 최하위 값은 현재 타일에서 가장 먼 타일을 나 타내는 식별자이다(도면과 같이 알파벳순으로 가장 큰 문자). 이러한 프랙탈 특성으로 인해 각 제어 패턴은 제 어 패턴의 고유 식별자 수에 따라 계층적으로 하나 이상의 레벨로 나눌 수 있다. 레벨의 수는 제어 패턴을 생성 하는 데 사용된 커널의 차원 수에 해당한다. 따라서, 제어 패턴 은 단일 레벨을 갖는다. 제어 패턴 은 2 개의 레벨을 가지며 제어 패턴 은 3 개의 레벨을 갖는다. 각 레벨에는 단일 이진수 값(즉, 비트)을 포함하는 제곱 행렬이 포함된다. 각 레벨의 제곱 행렬의 각 차원의 크 기는 이전 레벨의 차원 크기와 같으며 커널의 가장 큰 차원의 크기에 곱한 것과 같다. 가장 작은 레벨에는 커널 의 가장 큰 차원의 크기와 같은 각 차원의 크기가 있는 정사각형 행렬이 있다. 예를 들어, 제어 패턴 에 서 가장 큰 레벨은 크기가 9 X 9인 비트의 제곱 행렬을 갖는 반면, 다음 가장 작은 레벨은 각 차원의 크기를 3 X 3으로 나눈 값(즉, 9를 커널의 차원 크기인 3으로 나눈 값)으로 갖는다. 가장 큰 레벨이 아닌 레벨의 각 비트는 더 큰 레벨의 여러 비트와 일치한다. 특히, 레벨이 클수록 다음 최소 레 벨의 비트 수와 동일한 수의 영역으로 균등하게 분할되며, 다음 최소 레벨의 비트는 더 큰 레벨의 비트와 일치 한다. 다음 최소 레벨의 비트 중 일치하는 비트의 위치는 더 큰 레벨의 영역 집합에서 영역의 위치와 일치한다. 여러 레벨에 걸쳐 일치하는 비트의 조합은 식별자를 참조하기 위해 제어 패턴의 모든 위치에 대해 비트 시퀀스 를 허용한다. 따라서, 제어 패턴 의 예에서, 3 X 3 행렬의 각 비트는 9 X 9 더 큰 행렬의 3 X 3 부분과 일치한다. 9 X 9 행렬의 비트 조합과 3 X 3 행렬의 일치된 비트 조합은 2비트 값을 형성하며, 제어 패턴 (131 6)의 4개의 고유 지표 중 하나를 참조하는 데 사용할 수 있다. 제어 패턴 의 예에서는 8개의 고유 식별자 가 있으므로 세 가지 레벨이 있으며, 가장 큰 레벨은 8 X 8 행렬, 제2 레벨은 4 X 4 행렬, 가장 작은 레벨은 2 X 2 행렬이다. 3비트를 사용하여 제어 패턴 의 8개의 고유 식별자 중 올바른 식별자 중 하나를 참조할 수 있다(도면과 같이 문자 \"A\"-H\"). 이러한 비트는 또한 이전에 도13a-b의 예에서 결과 표에 설명되었다. 이 방법을 사용하면 제어 패턴을 효율적으로 저장할 수 있다. 다양한 레벨에서 올바른 비트 시퀀스를 추출하기 위해 곱셈-덧셈 유닛은 제어 패턴의 표시기 위치를 결정할 수 있다. 이를 통해 가장 큰 레벨에서 올바른 위치를 결정하고, 나머지 레벨에서 일치하는 위치를 확인하여 해당 표시기에 해당하는 비트 시퀀스를 결정한다. 평탄화 된 입력, 확장 커널 및 제어패턴을 이용한 출력 도 14는 일 실시예에 따라 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 컨볼루션의 출력을 생성하는 방법을 보여주는 흐름도이다. 도면에 표시된 흐름도는 작동 순서를 나타낼 수 있지만, 표시된 작동은 어떤 순서로든 수행될 수 있으며 작동 횟수가 더 많거나 적을 수 있다. 일 실시예에서, 도 14에 설명된 연산은 곱셈-덧셈 유닛 (곱셈-누적 단위라고도 함)에 의해 수행될 수 있다. 곱셈-덧셈 유닛은 병렬 벡터 세트를 포함하는 평탄화 된 입력 스트림인 버퍼에 액세스하며, 각 벡터 는 출력 활성화를 생성하기 위해 커널에 의해 컨볼루션되어야 하는 입력 텐서의 고유한 커널 크기 타일의 입력 값 집합을 나타낸다. 이 평탄화 된 입력 스트림은 평탄화 된 입력 스트림 일 수 있으며 위에서 설명한 것 처럼 입력 스트림 생성기 에 의해 생성될 수 있다. 곱셈-덧셈 유닛은 커널에서 값을 순환적으로 허용함으로써 생성된 확장 커널을 수신하며, 확장된 커 널은 각각 출력 활성화의 커널 크기 타일의 출력 값 위치에 해당하는 벡터를 갖는다. 이것은 확장 커널일 수 있으며 위에서 설명한 확장 커널 생성기에 의해 생성될 수 있다. 곱셈-덧셈 유닛은 벡터 세트를 포함하는 제어 패턴을 수신하고, 각 벡터는 출력 활성화의 커널 크기 타일 에 대한 출력 값 위치에 대응하고, 각 벡터는 다음을 나타내는 지연 값을 포함한다. 컨볼루션에 대한 입력 값에 액세스 하기 위한 평탄화 된 입력 스트림의 병렬 벡터 제어 패턴은 제어 패턴 일 수 있으며, 전술한 바와 같이 제어 패턴 생성기 를 사용하여 생성될 수 있다. 곱셈-덧셈 유닛은 출력 활성화의 각 커널 크기 타일의 각 출력 값 위치에 대해 을 생성하며, 이는 다음의 지연 값에 의해 선택된 평탄화 된 입력 스트림의 값을 포함하는 제1 벡터 간의 내적이다. 제어 패턴의 대응하는 벡터, 및 출력 값 위치에 대응하는 확장된 커널의 벡터에 대응하는 제2 벡터. 곱셈-덧셈 유닛은 모든 출력 값에 대해 이것을 반복한다. 일 실시예에서, 입력 텐서는 채널들의 복수성을 가지며, 커널에는 여러 필터들이 있다. 입력 텐서들의 각 채널 은 하나 이상의 커널 필터들로 컨볼루션되어 다중 출력 기능을 가진 출력 활성화를 생성한다. 곱셈-덧셈 유닛 을 통한 출력 값의 생성을 위한 추가 예는 아래 도 15a-c, 16a-f 및 17a-b를 참조하여 설명한다. 도 15a는 실시에 따라 1차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 예제 의 제1 부분을 보여준다. 일 실시예에서, 여기서 설명하는 프로세스는 곱셈-덧셈 유닛 에 의해 실행될 수 있다. (1501A)에서 곱셈-덧셈 유닛은 출력 활성화의 제1 타일 #1을 처리한다(입력 텐서에서 동일한 타일 위치 임). 이는 현재 처리 중인 타일이다. (1502A)에서 곱셈-덧셈 유닛은 제1 타일의 출력 위치 3 중 1을 추가 로 처리한다(3은 각 타일의 값 수). 제1 출력 위치를 처리할 때, (1511A)에서 곱셈-덧셈 유닛은 해당 출력 위치에 대한 제어 패턴 의 벡터로 표시된 타일 위치(예: 지연 양)에 따라 평탄화 된 입력 에서 값 을 선택한다. 위치 1의 경우, 이 벡터는 제어 패턴 에서 가장 오른쪽 열이다. 따라서 표시된 것처럼 출력 타일의 위치 1에 대한 제어 패턴 벡터 (1528A)는 값을 선택할 현재 타일 X 또는 타일 1을 나타내는 모든 \"A\"이 다. 평탄화 된 입력 의 값은 메모리 주소, 인덱스 값을 참조하여 선택할 수 있으며, 또는 곱셈-덧셈 유닛 이 평탄화 된 입력 에서 읽는 클럭 사이클을 지연하여 선택할 수 있다. 여기서 제어 패턴 벡터 (1528A)의 모든 값이 \"A\"를 나타내 듯, 선택한 입력 값(1530A)는 평탄화 된 입력 의 타일 1에서 선택되며 도면과 같이 [0, 1, 2]이다. (1512A)에서 곱셈-덧셈 유닛는 곱하고 - 누적한다. 즉 출력 타일의 위치 1에 해당하는 (1530A)와 확장 커 널 벡터 (1532A) 사이에서 내적을 수행한다. 위치 1에서 확장 커널 벡터 (1532A)는 확장 커널 의 맨 위 행이다. 내적은 도면과 같이 a0+b1+c2로 생성되며, 표시된 것처럼 위치 1에서 출력 1534A를 생성한다. 이 과정은 도 15b에서 계속되는데, 이것은 실시에 따라 1차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제 어 패턴을 사용하여 출력 활성화를 생성하는 제2 부분을 보여준다. (1503A)에서 현재 타일의 세 가지 출력 위치 중 제2 위치가 처리된다. (1513A)에서는 (1511A)와 유사하게 타일 의 위치 2에 해당하는 제어 패턴 벡터 (1536A)가 선택된다. 이 경우 이 벡터는 제어 패턴 의 중간 열이다. 이 제어 패턴 벡터은 평탄화 된 입력에서 해당 값을 선택하는 데 사용된다. 제어 패턴 벡 터 의 각 식별자에 대해, 그 식별자에 의해 표시된 타일은 평탄화 된 입력 에서 선택되며, 값은 제 어 패턴 벡터 의 표시기의 동일한 위치에 해당하는 위치에서 해당 타일의 평평한 입력 에서 선택된 다. 따라서 제어 패턴 벡터 (1536A)의 제1(위) 위치는 현재 예제에서 평탄화 된 입력 의 타일 X에 해당하 는 식별자 \"A\" 또는 타일 1을 가진다. 따라서 동일한 제1 위치에서 평평해진 입력 의 타일 1의 값이 선택 된다(이 값은 \"0\"). 동일한 작업이 제어 패턴 벡터 (1536A)의 제2 위치에 대해 수행되며, 평탄화 된 입력 의 제1 타일의 제2 위치에서 \"1\"이 선택된다. 제어 패턴 벡터 (1536A)의 세 번째이자 마지막 위치에대해, 식별자는 현재 예에서 참조해야 할 타일이 타일 X+1 또는 타일 2임을 나타내는 \"B\"가 된다. 따라서 곱셈- 덧셈 유닛은 타일 2에서 동일한 세 번째 위치 또는 \"5\"의 값을 선택한다. 따라서 선택한 입력 값 (1538A) 는 도면과 같이 [0, 1, 5]이다. (1514A)에서, 곱셈 - 누적 연산이 (1512A)의 연산과 유사하게 수행된다. 그러나, 확장된 커널에서 제1 행 을 선택하는 대신, 출력의 위치 2에 해당하는 행, 즉 벡터가 대신 선택된다. 이것은 현재 예제에서 확장된 커널 의 제2 행이다. 따라서, 위치 2에 대한 확장된 커널 벡터 (1524A)는 [c, a, b]이다. 이 확장된 커널 벡터 (1524A)와 선택된 입력 값 (1538A) 사이의 내적은 c0 + a1 + b5 또는 출력 타일의 위치 2에서 출력 (1544A)이 다. 프로세스는 도 15c에서 계속되는데, 이 예에서는 실시에 따라 1차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 세 번째 부분을 보여준다. (1504A)에서 출력 타일의 최종 위치 3이 처리된다. 여기서 설명하는 프로세스는 (1503A) 및 (1502A)와 유사하지 만 세 번째 위치에 대해 모든 선택이 적절히 이동된다. 따라서 (1515A)에서 선택한 제어 패턴 벡터 (1546A)는 이제 출력 타일의 위치 3에 해당하므로 제어 패턴 (152 4)의 맨 왼쪽 열이 된다. 이 제어 패턴 벡터 (1546A)에는 타일 1과 타일 2에 대한 하나의 지시자가 있다. 따라 서 선택된 입력 값 (1548A)에는 타일 1의 \"0\"과 타일 2의 \"4\"와 \"5\"가 포함된다. (1516A)에서 위치 3에 대해 선택된 입력 값 (1548A)와 확장 커널 벡터 에 대해 곱셈-덧셈 연산이 수행되 며, 이는 현재 예에서 확장 커널 의 3행과 일치한다. 이 내적의 출력은 위치 3에 대한 출력 (1554A)이다. 에서 입력의 모든 타일에 대해 이 프로세스를 반복하여 출력에 대해 동일한 수의 타일을 생성한다. 따라 서 (1501A)의 연산은 현재 예제의 평탄화 된 입력 에서 타일 2의 경우 (1501B)에서 (1501L)로 반복된다. 평탄화 된 입력 에 더 많은 타일이 포함된 경우, (1501A)에 표시된 프로세스는 모든 타일이 처리될 때까 지 반복된다. 도 16a는 구현에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 예 의 제1 부분을 보여준다. 도 15a-c와 대조적으로, 여기서 설명하는 프로세스는 1차원 커널 대신 2차원 커널에 관한 것이다. 일 실시예에서, 여기에 설명된 프로세스는 곱셈-덧셈 유닛 에 의해 수행 된다. (1601A)에서 제1 타일은 곱셈-덧셈 유닛 에 의해 처리된다. 각 타일에는 9개의 위치가 있으므로 각 위치가 처리되어 해당 위치에 대한 출력 값을 생성한다. (1602A)에서 출력 위치 1이 처리된다. 1차원 커널 예와 마찬가 지로, 제어 패턴 벡터(1628A)는 출력 위치 값에 따라 제어 패턴 에서 선택된다. 출력 위치가 1이므로 제 어 패턴 의 출력 위치 1이 레이블로 표시된 열이 제어 패턴 벡터 (1628A)로 선택된다. 이 제어 패턴 벡터 (1628A)는 모든 식별자로 \"A\"를 가지고 있다. 따라서 이 제어 패턴 벡터 (1628A)는 평탄화 된 입력 의 타 일 1에서 선택한 입력 값 (1630A)를 모두 선택해야 함을 나타낸다(현재 타일 X는 타일 1임). 이 프로세스는 도 16b에서 계속되는데, 이는 구현에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 제2 부분을 보여준다. (1612A)에서 확장 커널 에 대한 도 16a에 표시된 출력 위치 레이블에 따라 확장 커널 에서 선택한 확장 커널 벡터 (1632A)와 선택한 입력 값에 대해 곱셈 - 누적 연산이 수행된다. 이 경우 출력 위치 1은 확장된 커널 의 맨 위 행에 해당한다. 이 맨 위 행은 다중 누적 작업에 대해 선택된다. 따라서 이 상단 행은 확 장된 커널 벡터(1632A)를 형성한다. 내적은 위치 1에 대한 출력 (1634A)를 생성하기 위해 선택된 입력 값 (1630A)와 확장된 커널 벡터 (1632A) 사이의 곱셈-덧셈 유닛에 의해 수행된다. (1603A)에서 출력 위치 2가 처리된다. 출력 위치 2는 제어 패턴 에 대한 오른쪽에서 제2 열에 해당한다 (레이블이 지정됨). 여기에 있는 열의 순서는 표시된 순서를 따를 필요는 없다. 대신 올바른 출력 위치에 해당 하는 올바른 열을 선택하는 한 열의 순서는 임의의 순서가 될 수 있다. 더욱이, 제어 패턴은 열 별로 정 렬될 필요가 없고 행 별로 정렬될 수도 있다. 올바른 출력 위치에 해당하는 올바른 행이 참조되는 한 출력도 동 일하다. 마지막으로 제어판의 식별자 순서도 반대로 할 수 있다. 식별자를 사용하여 입력 값을 선택할 때 올바 른 순서로 참조되는 한 출력도 동일하다. 이 동일한 개념은 여기에 설명된 순서와 다르게 정렬될 수 있으므로 확장된 커널 에도 적용된다. 범례에서 언급된 바와 같이, 제어 패턴의 식별자 \"A\"는 평탄화 된 입력 의 타일 X를 지칭하며, 여 기서 X는 현재 타일이고, 식별자 \"B\"는 타일 X + 1을 지칭한다. 제어 패턴 벡터 (1636A)는 식별자 \"A\"및 \"B\"를 모두 포함한다. 제어 패턴 벡터 (1636A)의 각 위치에 대해, 곱셈-덧셈 유닛 은 식별자가 참조하는 타일을 결정하고, 및 평탄화 된 입력의 참조된 타일 중에서 평탄화 된 입력의 타일 벡터 내 동일한 입력 위치에 있는 입력 값을 제어 패턴 벡터(1636A)의 식별자 위치로 선택한다. 따라서 예를 들어, 제어 패턴 벡터 1636A의 위치 6에는 평탄화 된 입력 1622의 타일 2(현재 타일 # 1 + 1 = 타일 2)인 타일 X+1에서 값을 선택해야 함을 나타내는 식별자 \"B\"가 있다. 곱셈-덧셈 유닛은 평탄화 된 입력 의 타일 2 벡터 중에서 제어 패턴 벡터 (1636A)의 위치 6에 해당하는 입력 위치 6에서 값을 선택하고, 이 값을 선택한 입력 값 (1638A)의 위 치 6에 배치한다. 나머지 값도 비슷한 방식으로 선택된다. 프로세스는 도 16c에서 계속되며, 이 프로세스는 실시에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 예제의 제3 부분을 보여준다. (1614A)에서, 이전 연산에서 생성된 선택된 입력 값(1638A)은 내적에서 확장된 커널 벡터(1642A)와 결합되어 위 치 2에 대한 출력 (1644A)을 생성한다. 여기서, 확장된 커널 벡터(1642A)는 다음에 따라 다시 한번 선택되며, 출력 위치 번호는 이 경우 2이다. 따라서, 확장된 커널 의 제2 행이 확장된 커널 벡터 (1642A)로 선택된 다. 곱셈-덧셈 유닛은 타일의 나머지 출력 위치에 대해 위의 과정을 수행한다. 예를 들어, (1606A)에서 프로세 스는 출력 위치 5에 대해 수행된다. 여기서, (1615A)에서 제어 패턴 벡터(1646A)는 도 5에 도시 된 바와 같이 출력 위치 5 열로부터 선택된다. 여기서 (1615A)에서 제어 패턴 벡터 (1646A)는 도 16a와 같이 출력 위치 5열에 서 선택된다. 여기서, 제어 패턴 벡터 (1646A)는 각각 타일 X+K와 X+K+1에 해당하는 두 개의 새로운 식별자 \" C\"와 \"D\"를 포함하고, 여기서 K는 입력 행의 타일 수를 나타낸다. 따라서 표시된 것처럼 제어 패턴 벡터 (1646A)의 위치 9는 평탄화 된 입력 스트림의 타일 6의 위치 9에서 선택된다. 그 결과로 이 출력 위치에 대해 선택한 입력 값 (1648A)가 된다. 프로세스는 도 16d에서 계속되는데, 이는 구현에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화의 제4 부분을 보여준다. (1615A)에서, 곱셈-덧셈 연산이 수행된다. 곱셈-덧셈 유닛 은 선택된 입력 값(1648A)과 위치 5에 대해 선 택된 확장된 커널 벡터(1652A) 사이의 내적을 수행한다. 예시된 예에서 이것은 확장된 커널 의 행 5이다. 내적 결과는 위치의 출력 (1654A)이다. 이 프로세스는 현재 타일의 모든 출력이 생성될 때까지 에서 반복 된다. 또한 이 프로세스는 모든 타일이 처리될 때까지 에서 반복된다. 도 16e는 구현에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 다중 채널로 출력 활성화를 생성하는 예를 보여준다. 이전에 설명된 바와 같이, 입력 텐서 는 다중 채널을 가질 수 있으며, 각 채널은 입력 값의 개별 행렬이다. 도 5c를 참조하여 앞서 설명한 바와 같이, 입력의 다중 채널은 평평 해지고 서로의 위에 \"스택\"된다. 에서, 이러한 입력 채널들 각각은 도 4-6에서 설명된 방법에 따라 평탄화된 것이다. 평탄화 된 입력 채널 의 값은 제어 패턴 의해 선택되어 선택 입력 채널 값 을 생성한다. 선택 한 입력 채널 값 의 새 행렬이 여기에 표시되지만, 실제로는 새 행렬이 생성될 수 없다. 대신, 곱셈-덧셈 유닛은 평 탄화 된 입력 채널 에서 즉시 값을 선택할 수 있다. 따라서, 선택된 입력 채널 값은 개념적으로 설 명하기 위해 여기에 표시된다. 이 과정은 도 16f에서 계속되는데, 이것은 실시에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제 어 패턴을 사용하여 다중 채널로 출력 활성화를 생성하는 제2 부분을 보여준다. 에서, 곱셈-덧셈 유닛은 선택된 입력 채널 값 과 커널 필터 (1660A-N)으로 내적하기 (즉, 곱셈 - 누적)를 수행한다. 선택한 입력 채널 값들의 각 입력 채널은 커널 자체인 다른 하위 필터 커 널 과 혼선된다. 각 하위 필터 커널은 같거나 다른 값을 가질 수 있다. 컨볼루션 프로세스는 도 16a-d에 대해 위에서 설명한 것과 유사할 수 있다. 생성된 컨볼루션 출력 (1662A)는 출력 활성화 채널 (1664A) 을 생성하기 위해 단일 커널 필터에 대해 으로 합계된다. 각 나머지 커널 필터들(1660B-N)에 대해, 이 프 로세스는 반복되어 다중 출력 활성화(1664B-N)이 생성된다. 이러한 출력 활성화 (1664A-N)은 신경망의 추가 컨 볼루션 레이어에 대한 입력 역할을 할 수 있다. 도 17a는 일 실시 예에 따른 3 차원 커널의 경우에 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 예의 제1 부분을 예시한다. 일 실시 예에서, 여기에 설명된 프로세스는 곱셈-덧셈 유닛에 의해 수행될 수 있다. 에서, 입력의 타일 X가 곱하기 가산 유닛에 의해 처리되고 있다. 에서, 곱셈-덧셈 유닛 (14 0)은 타일 X의 8개 중 8개 출력 위치를 처리한다. 에서, 곱셈-덧셈 유닛 은 위치 8에 대해 선택된 제어 패턴 벡터 를 사용하여 평탄화 된 입력 으로부터 값을 선택한다. 1차원 및 2차원 커널에 대해 위에서 설명된 프로세스와 마찬가지로, 출력 위치에 대응하는 제어 패턴의 벡터 (여기서는 케이스 위치 8)는 제 어 패턴 벡터 로 선택된다. 도 17a의 범례에서 볼 수 있듯, 제어 패널 벡터 는 \"A\"에서 \"H\"까지 8 개의 다른 식별자를 갖는다. 예를 들어, 식별자 \"H\"는 타일 X + M + K + 1에 해당하며, 여기서 M은 각 레이어의 타일 수이고 K는 내부의 타일 수이다. 입력의 각 행, 각 식별자에 대해, 곱셈-덧셈 유닛 은 선택된 입력 값 에 대한 식별자의 위치에 대응하는 위치에서 값을 평탄화 된 입력 의 표시된 타일로부터 선택한 다. 이 프로세스는 도 17b에서 계속되는데, 이 예제에서는 구현에 따라 3차원 커널의 경우 평탄한 입력, 확장된 커 널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 제2 부분을 보여준다. 에서, 곱셈-덧셈 유닛 은 현재 타일에 대한 위치 8에 대한 출력 을 생성하기 위해 내적에서 위치 8에 대한 확장된 커널 벡터 와 위치 8에 대한 선택된 입력 값 을 결합한다. 선택된 확장 커널 벡터 는 출력 위치에 해당한다. 에서, 출력 활성화를 생성하기 위해 입력의 각 타일에 대한 모든 출력 위치에 대해 곱셈-덧셈 유닛 (14 0)에 의해 위에서 설명된 프로세스가 반복된다. 예시적인 프로세서 구성 요소 도 18a는 일 실시 예에 따라 확장된 커널을 생성하기 위한 예시 적인 구성 요소에 대한 하드웨어 다이어그램을 도시한다. 일부 실시 예에서, 어레이 (예를 들어, 가중치의 커널)에 대응하는 데이터 값 은 데이터 저장 회로 (예를 들어, 메모리 회로)에 저장된다. 일부 실시 예에서, 어레이에 대응하는 데이터 값은 시퀀스 (예를 들어, 단일 열)로 저장된다. 이 예에서, 데이터 값 은 하나 이상의 입력에서 시프터 회로 에 연결된다. 시프터 회로는 데이터 값의 시퀀스로서 어레이를 수신할 수 있다. 각각의 데이터 값은 예를 들어 정 수, 부동 소수점 수 또는 다른 유형의 데이터 값일 수 있는 디지털 데이터 값의 하나 이상의 바이트를 포함할 수 있다. 따라서, 각 데이터 값은 복수의 컨덕터 (예: 집적 회로의 와이어 인터커넥트)상의 시프터 회로 (180 2)에 연결될 수 있으며, 여기서 컨덕터 세트는 하나의 데이터 값을 전달할 수 있고 컨덕터 그룹은 일련의 데이 터 값을 전달할 수 있다. 예를 들어. 일 실시 예에서, 데이터 값은 가중치이고 입력 데이터 값은 신경망에 대한 활성화 값이다. 데이터 값을 전달하는 컨덕터는 시프터 회로의 입력에서 수신될 수 있다. 시프터 회로의 입력은 예 를 들어 시퀀스의 일부 또는 전부를 전달하기위한 컨덕터를 수신할 수 있다. 앞서 언급한 바와 같이 어레이에 해당하는 데이터 값은 시퀀스로 수신될 수 있다. 일 실시 예에서, 시퀀스는 병렬로 데이터 저장소 로부터 수신된 대응하는 어레이의 모든 데이터 값을 포함한다. 그러나, 다른 실시 예에서, 시퀀스는 대응하는 어레이의 데이터 값의 일부를 포함할 수 있다(예를 들어, 한 번에 하나의 열 또는 한 번에 하나의 행을 수신 및 치환). 시프터 회로 는 치환된 시퀀스를 생성하기 위해 하나 이상의 입력으로 부터의 데이터 값을 상이한 순서로 하나 이상의 출력에 결합할 수 있다. 일부 실시 예에서, 복수의 출력은 각각 곱셈기에 결합될 수 있는 하 나의 시퀀스를 운반한다. 다른 실시 예에서, 제1 입력에서 수신된 시퀀스의 데이터 값은 다른 위치로 시프트되 고 하나 이상의 출력에 결합된다. 아래에 표시된 하나의 예시적인 실시 예에서, 시퀀스는 제1 입력에서 수신되 고, 데이터 값은 다른 위치로 이동되며, 순열 된 시퀀스는 제2 출력에서 순차적으로 생성된다. 일부 실시 예에서, 시프터 회로 에 의해 생성된 순열은 전술한 바와 같이 확장된 커널에 대응할 수 있다. 따라서, 일부 실시 예에서, 예를 들어, 메모리 사용량이 유리하게 감소되도록 다수의 순열 된 시퀀스보다는 단 지 하나의 시퀀스가 메모리에 저장될 수 있다. 예를 들어, 데이터 저장소 로부터 수신된 시퀀스는 어레이 의 열 또는 행에 기초한 복수의 서브 시퀀스를 포함할 수 있다. 시프터 회로 는 다음과 같이 시퀀스를 변 경할 수 있다. 데이터 값은 시퀀스와 동일한 순서로 하나 이상의 입력으로부터 시프터 회로 의 하나 이상 의 출력에 연결될 수 있다. 따라서, 입력 시퀀스는 출력에 의해 생성된 시퀀스 중 하나를 포함할 수 있다. 추가 적으로, 각 서브 시퀀스의 위치가 상기 시퀀스 내에서 이동되는 서브 시퀀스의 복수의 순열에 대해, 그리고 데 이터 값이 각 서브 시퀀스 내에서 이동되는 각 서브 시퀀스의 데이터 값의 복수의 순열에 대해, 데이터 값은 하나 이상의 입력에서 하나 이상의 출력으로 다른 순서로 결합된다. 다른 배열에 대한 이러한 순열의 예는 위에 설명되어 있다. 일 실시 예에서, 데이터 값은 시프터 회로 의 제1 입력에서 수신되고, 데이터 값은 제1 출력에서 입력 시퀀스를 생성하기 위해 제1 입력에서 제1 출력으로 연결된다. 추가로, 데이터 값은 복수의 제2 출력에 복수의 순열 된 시퀀스를 생성하기 위해 제1 입력으로부터 복수의 제2 출력에 상이한 순서로 결합될 수 있다. 이 접근법의 예시 적인 구현이 아래 도 18b에 예시 되어있다. 다른 실시 예에서, 데이터 값은 시프터 회 로 의 하나 이상의 입력에서 수신되고, 데이터 값은 입력 시퀀스 및 복수의 순열 된 시퀀스를 생성하기 위해 입력(들)과 하나 이상의 출력 사이의 상이한 위치로 시프트 된다. 곱셈기 회로 는 시프터 회로 의 하나 이상의 출력에 연결될 수 있다. 따라서, 시프터 회로 의 하나 이상의 출력에서 생성된 시퀀스는 곱셈기 의 복수의 레지스터 회로에 로드 될 수 있다. 곱셈기 는 입력 데이터 값 을 더 수신할 수 있다. 입력 데이터 값 은 복수의 제2 레지스터에 로드 될 수 있다. 따라서, 복수의 곱셈 결과 가 생성될 수 있다. 위에서 언급한 바와 같이, 확장된 커널은 예 를 들어 복수의 컨볼루션 결과가 병렬로 생성되는 결과를 초래할 수 있다. 일 실시 예에서, 데이터 값은 M X N 어레이 (예를 들어, 입력 데이터 값 에 적용될 커널)에 대응한다. 시프터 회로 는 데이터 저장소 로부터 M X N 길이 시퀀스를 수신하고 길이 M X N 각각의 M X N 상이한 시퀀스를 생성할 수 있다. 시퀀스 는 시프터 회로로부터 결합될 수 있고 곱셈기에 (예를 들어, 병렬로)로드 될 수 있다. 도 18b는 일 실시 예에 따라 확장된 커널을 생성하기 위해 예시적인 컴포넌트에서 사용되는 예시적인 시프터 회 로에 대한 하드웨어 다이어그램을 도시한다. 이 예에서, 입력 시퀀스 SEQ1은 M X N 어레이에 대응하며, 여기서 M과 N은 정수이고 M과 N 중 하나 이상은 예를 들어 1보다 크다. 따라서, 서열 SEQ1은 M X N 데이터 값, D0-D (M X N)를 포함한다. 시퀀스 SEQ1은 입력에서 제 1 출력 (예를 들어, 스트림 S )으로 결합될 수 있으며, M X N 데이터 값은 비순환 된다. 추가로, 서열 SEQ1 은 M X N-1 개의 상이한 경로를 따라 M X N-1 개의 상이한 서열 SEQ2-SEQM X N으로 치환될 수 있으며, 이는 M X N-1 출력 (예를 들어, 스트림 S -S (M X N), 예를 들어 M X N 치환된 데이터 값, D0-D (M X N)를 포함한 다. 보다 구체적으로, 이 예에서, 복수의 데이터 값 D0-D (M X N)를 포함하는 시퀀스 SEQ1이 제1 입력 스트림 S 에서 수신된다. 시퀀스의 각 데이터 값은 예를 들어 복수의 컨덕터에서 전달되는 하나 이상의 바이트를 포함 할 수 있다. 여기서, 데이터 값은 서로 다른 순서로 서로 다른 전도성 경로를 따라 제1 입력 (예: 스트림 S )에서 복수의 서로 다른 출력 (예: 스트림 S -S (M X N))으로 연결된다. 복수의 상이한 출력 (예를 들어, 스트림 S -S (M X N))에서 원래 서열 SEQ1 및 복수의 치환된 서열 SEQ2-SEQM X N을 생성한다. 예를 들어, 입력 시퀀스의 각 데이터 값 D0-D (M X N)는 복수의 전도성 와이어에 전달되는 하나 이상의 바이트를 포 함할 수 있다. 서로 다른 데이터 값을 전달하는 전도성 와이어는 입력 (예: 스트림 S )과 복수의 출력 각각 (예: 스트림 S -S (M X N))간에 다르게 재정렬되어 서로 다른 순열을 생성한다. 보다 구체적으로, 이 예에 서, 입력 S 상의 SEQ1은 복수의 회전자 (1860-1862)에 결합된다. 회전자 (1860-1862)는 예를 들어 데이터 값을 전달하는 도체의 위치를 변경함으로써 각 시퀀스에서 데이터 값의 위치를 재정렬 할 수 있다. 2 개의 예시 적인 회전이 1870 및 1871에 예시되어 있다. 이 예에서, 회전 후에, 각각의 순열 된 시퀀스는 멀티플렉서 회로 의 입력에 연결될 수 있다. 본 개시 내용의 실시 예는 복수의 스트림, S를 포함하는 집적 회로를 포함할 수 있 다. 회전자(1860-1862)를 통해 SEQ1로부터 생성된 순열 시퀀스는 멀티플렉서 1851-1853을 사용하여 인접한 스트 림 S -S (M X N)에 연결될 수 있으며, 예를 들어, 데이터 값 D0-D (M X N)의 상이한 순열 시퀀스 SEQ2- SEQM X N을 운반하는 재정렬 된 전도성 와이어 각각은 각 멀티플렉서의 입력에 연결될 수 있다. 각 멀티플렉서 의 제2 입력은 스트림 S -S (M X N) 중 하나에 연결된다. 따라서, 각 멀티플렉서의 출력은 순열 된 시퀀스 중 하나를 각 스트림에 연결한다. 추가로, 데이터 값 D0-D (M X N)의 원래 시퀀스 SEQ1을 전달하는 입력을 위한 전도성 와이어는 동일한 순서로 제1 출력 (예: 스트림 S )에 연결되어 출력에서 원래 시퀀스를 생성한다. 운 반 스트림 S . 각각 SEQ1-SEQM X N을 전달하는 스트림 S -S (M X N)는 예를 들어 승수 회로에 연결될 수 있다. 따라서, 이 예에서, 서열 SEQ1의 모든 순열은 유리하게는 동일한 사이클에서 병렬로 생성될 수 있고 병렬로 승수에 로드 될 수 있다. 도 19는 일 실시 예에 따른, 제어 패턴을 생성하기위한 예시적인 컴포넌트에 대한 하드웨어 다이어그램을 도시 한다. 일 실시예의 특징과 장점은 제어 패턴 생성기를 포함할 수 있으며, 예를 들어, 곱셈기 어레이 회로 와 동일한 반도체 표면에 통합될 수 있다. 일 실시 예에서, 제어 패턴 생성기 는 높이 (H) 및 폭 (W)과 같은 커널의 차원값을 수신하도록 (예를 들어, 소프트웨어를 통해) 구성된다. 제어 패턴 생성기 는 예를 들어, 곱셈기 어레이 회로의 곱셈기 셀 (1921-1926) 각각에 대해 2 개의 비트를 생성할 수 있다. 하나의 비트는 K- 지연된 입력 또는 K- 지연되지 않은 입력 중에서 선택할 수 있고, 다른 비트는 단위 지연 및 단 위 지연 입력이 아니다 (예: 1 지연 또는 지연 없음). 각 승산기 셀은 예를 들어 2 개의 패턴 제어 비트를 저장 하기위한 저장 유닛 (예를 들어, 레지스터)을 포함할 수 있다. 두 비트는 함께 선택 회로를 사용하여 x, x + 1, x + K, x + K + 1의 4 개의 데이터 값 중 하나를 선택할 수 있다. 여기서 x는 현재 타일이고 K는 타일 크기의 너비를 나타내는 변수이다. 추가 차원이 있는 커널의 경우, 제어 패턴 생성기는 해당 추가 차원에 대한 이동 변수에 의한 추가 지연 또는 추가 지연 없이 해당 비트를 선택하여 각 추가 차원에 대한 추가 비트를 생성 한다. 여기서 지연이라는 용어가 사용되기는 하지만 경우에 따라 평탄화 된 입력 스트림의 액세스된 값은 지연 을 통해 액세스되는 것이 아니라 지연 값을 메모리에 인덱스 값으로 사용할 수 있는 상대적이거나 절대적인 주 소 지정 시스템을 통해 액세스된다는 점에 유의한다. 이 예에서, 제어 패턴 생성기 는 K- 지연 논리 회로 및 단위 지연 논리 회로 를 포함한다. K- 지연 논리 회로 는 예를 들어 커널의 단일 차원을 수신하고 K- 지연 입력과 K가 아닌 지연 입력 사이 에서 선택하기위한 비트 값 H X H를 생성할 수 있다. 이 예에서, K- 지연 논리 회로 는 커널의 높이 H를 수신하고, 제어 패턴의 H X H 삼각형 어레이에 대응하는 H2 비트 값을 생성한다. H가 이 예에서 K- 지연 논리 회로 에 대한 입력으로서 사용되는 동안, 다른 실시 예는 예를 들어 K- 지연 논리 회로에 대한 입력으로 서 폭 W와 같은 다른 차원값을 사용할 수 있다. 또한, 단위 지연 논리 회로 는 예를 들어 높이 (H) 및 폭 (W)과 같은 2 차원값을 수신할 수 있다. 단위 지연 논리 회로 는 예를 들어 단위 지연 (+1) 또는 단위 지 연이 아닌 (예를 들어, 0) 입력 (예를 들어, 지연되지 않거나 K 지연됨) 사이에서 선택하기위한 H * W 비트 값 을 생성한다. 이 예에서, 단위 지연 논리 회로 1912는 커널 H와 커널 W의 너비의 높이를 수신하고 H*W 삼각형 배열에 해당하는 H*W 비트 값을 생성한다(예: 도 22의 배열 2220). 지연되지 않은/K- 지연 및 단위 지연/단위 지연 없음을 선택하기위한 비트 값 쌍은 복수의 곱셈기 셀 (1921-1926)에 연결되고, 예를 들어 각 곱셈기 셀의 레지스터와 같은 저장 회로 에 저장된다. 선택은 여기에서 멀티플렉서 로 예시되지만, 다수의 다른 선택 회로가 존재함이 당업자에게 알려져 있다. 이 예에서, 예를 들어, 지연되지 않은, 지연된 단위, 지연된 단 위, K 지연 또는 K+1 지연 입력 값 중 하나를 선택하기 위해 K-지연 논리 회로 1911의 1 비트와 유닛 지연 논리 회로 1912의 1 비트를 각 승수 셀의 저장 장치에 저장할 수 있다. 도 22에 나온 패턴과 유사한 패턴은 곱셈기 어레이 회로에 걸친 저장 회로의 제1 비트 값에 해당할 수 있으며, 도 22의 패턴 과 유사한 패턴은 승수 배열을 통한 입력 선택을 제어하기 위해 곱셈기 어레이 회로에 걸쳐 반복되는 저장 회로 의 제2 비트 값에 해당될 수 있다. 도 20은 일 실시예에 따라 출력 활성화를 생성하기 위해 곱셈-덧셈 연산을 수행하기 위한 예시적인 구성 요소의 하드웨어 다이어그램을 도시한다. 이 예에서 확장 커널(M X N)의 값들은 복수의 곱셈 - 누적 유닛의 제1 입력 레지스터에 로드되고, 입력 값들인 aij는 곱셈 - 누적 (multiply-accumulator)회로의 복수 입력 레지스터의 제2 입력 레지스터에 로드된다. 예를 들어, 곱셈 - 누적 회로는 (2001, 2011, 2021, 2031, 2041 및 2051)의 곱셈기 들을 포함할 수 있으며, 멀티플라이어 회로의 복수형은 확장된 커널에서 다른 값인 wij로 로드 될 수 있다. 각 승수는 평탄한 입력 스트림의 다원 타일 중 하나에서 입력 값으로 로드 될 수 있다. 예를 들어, a11은 제1 타일 (즉, 타일의 제1 행과 제1 열)의 값에 해당하며, 이는 선택 회로(예: 멀티플렉서 또는 \"Mux\")의 한 입력 에 결합될 수 있다. a11 입력은 추가로 지연 회로 에 결합되어 선택 회로 의 제2 입력에서 a11의 지연 버전(예: 하나의 사이클 지연)을 생성할 수 있다. 이 지연된 버전은 현재 타일로부터 하나의 장치에 대해 선택한다. 또한, a11은 K-지연 회로 (예: 버퍼 또는 최초 데이터 저장 장치(\"FIFO\"))에 결합되어 K 사이 클에 의해 지연되는 11의 버전을 생성할 수 있다. 이것은 현재 타일 아래 행에 있는 타일에 해당한다. 또한 K- 지연 회로 의 출력은 다른 지연 회로 의 입력에서 수신되어 선택 회로 의 다른 입력에서 a11 의 K+1 지연 버전을 생성할 수 있다. 마찬가지로, 예를 들어 부터 까지의 승수는 확장 어레이의 제 1 행에 해당하는 w12,쪋, w1(M X N) 값을 수신하고, a11쪋aMN을 입력한다. 마찬가지로, 확장 어레이의 다른 행 은 입력 값 a11, aMN을 확장 어레이의 마지막 행 w(M X N)1 ..., w(M X N)(M X N)까지 곱할 수 있다. 여기서 행은 위에서 설명한 대로 순열 된 값으로 구성된다. 곱셈기 (2011, 2021, 2031, 2041, 2051)은 (2013, 2023, 2033, 2043, 2054)에 각각 지연으로, (2014, 2024, 2034, 2044, 2054)에 K-지연으로, (2015, 2025, 2035, 2045, 2055)에는 각각 지연으로, 회로 (2016, 2026, 2036, 2046, 2056)를 선택하는 것으로 구성된다. 예를 들어, 제어 패턴은 적절한 타일의 입력 값이 특정 승수에 저장된 가중치와 곱해지도록 a11의 다양한 버전 사이에서 선택하기 위해 사용될 수 있다. 이 예제에서 입력 값은 확장된 커널의 제1 행에 있는 시퀀스로 곱해지 므로 a11w11… aMNw1 (M X N)은 A (컨볼루션이 적용되는 현재 타일)에 해당하는 제어 패턴 값을 갖는다. 그러나 이 예에서 인접한 타일을 포함하는 컨볼루션을 포함하여 전체 타일에 걸친 컨볼루션을 계산하는 것은 인접한 타 일의 입력 값이 도착하기를 기다리는 것을 포함할 수 있다. 따라서, 주어진 \"현재 타일\"에 대한 컨볼루션을 계산하는 것은 인접한 타일 값이 이용 가능하도록 대기하는 K + 1 사이클을 포함할 수 있다. 커널의 크기에 따라 위에서 설명한대로 추가 제어 패턴 값을 사용할 수 있다. 예를 들어, 현재 타일의 컨볼루션을 계산하기 위해 시 스템은 입력 값을 저장하고 다른 타일의 입력 값이 계산에 사용 가능할 때까지 기다릴 수 있다. 따라서 특정 타 일에 대한 컨볼루션은 특정 타일에 대한 K + 1 지연 입력 값, 인접한 열 타일의 값으로 K 개의 지연된 입력 값, 인접 행 타일의 입력 값으로 1 개의 지연된 값 및 지연되지 않은 값을 사용하여 계산될 수 있다. 예를 들어, 인 접한 행 및 인접한 열 타일에 인접한 타일의 입력 값으로. 현재 규격은 현재 값(예: 현재 타일 또는 지연되지 않은 값에 대해), 단위(또는 1) 지연 값, K 지연 값 및 K+1 지연 값을 참조하지만, 이러한 지연은 서로 상대적 일 수 있음을 이해해야 한다(예: 선택 회로의 입력 시). 신호 경로에는 다양한 다른 지연이 존재할 수 있지만, 여기서는 설명을 위해 생략된다. 더욱이, 커널이 추가 차원을 갖는다면, M 지연 값 등과 같은 추가적인 지연 값 과 해당 회로가 포함될 것이다. 입력 값 a11-aMN (예를 들어, a11-a33)의 어레이는 곱셈기(2001, 2011,…, 2021)의 어레이에 로드 될 수 있으 며, 이들은 또한 각각 다른 가중치 w11, w12,…, w1로 로드 된다. (M X N) (예: w33). 전술한 바와 같이, 각 승수는 예를 들어 가중치를 제공하는 확장된 커널과 동일한 차원을 갖는 제어 패턴 어레이로부터 다른 제어 패 턴 입력을 사용하여 선택된 입력을 수신한다. 각 곱셈기(2001, 2011,…, 2021)의 출력은 하나 이상의 가산기 회 로 (예 : 가산기 2007, 2017, 2027)에 연결되어 곱을 합하고 컨볼루션 결과 R1을 출력 할 수 있다. 유사하게, 확장된 커널의 각 행은 복수의 승수로 로드되고 제어 패턴 어레이의 해당 행으로 마스킹 된 입력 값의 벡터로 곱해질 수 있다. 여기서, w (M X N) 1, w (M X N) 2, …, w (M X N) (M X N) 값으로 구성된 확장 커널의 마지 막 행이 승수 2031, 2041 열에 로드되고 제어 패턴 위치의 마지막 행에 의해 제어되는 입력 값 a11, a12, ..., mN과 결합된다. 예를 들어, M X N번째 컨볼루션 결과 R(M X N)을 생성하기 위해 승수 마지막 열의 출력을 2037, 2047 및 2057에 더한다. 동등한 대체 구현에서 지연은 승수의 출력에 결합될 수 있다. 도 21은 일 실시 예에 따른 기계 학습 프로세서에서 출력 활성화를 계산하기위한 예시적인 컴포넌트 레이아웃 을 도시한다. 예시된 레이아웃은 여기에 설명된 동작을 수행하기 위한 기계 학습 프로세서 (또는 다른 프 로세서)에서 구성 요소 (논리적 및/또는 물리적)의 하나의 가능한 레이아웃을 나타낸다. 레이아웃 은 ICU , 복수의 MEM 타일 (2115A-N), 복수의 SXM 타일 (2120A-N), 복수의 NIM 타일 (2125A-N), 및 슈퍼 셀 (2130A-A 내지 2130N-N)의 어레이를 포함한다. 이러한 요소는 일반적으로 알파벳 접미사를 생략하여 다음 설명 에서 참조할 수 있다. ICU는 NIM 타일 에 명령을 제공한다. 이들 명령은 NIM 타일 에게 본 명세서에 설명된 컨볼루 션 동작을 수행하기 위해 정확한 제어 패턴 값으로 슈퍼 셀 을 구성하도록 지시한다. 슈퍼 셀 은 정사각형 격자로 배열된다. 각 슈퍼 셀 은 병렬로 처리할 수 있는 값의 수를 나타내는 크기를 갖는다. 슈 퍼 셀 은 모두 동일한 크기를 가질 수 있다. 예를 들어, 각 슈퍼 셀은 16 X 16 그리드이며 256 개의 값을 처리할 수 있다. 일 실시 예에서, 입력 채널은 로 표시된 것처럼 수직적으로 슈퍼셀들(supercells) 사이에 분할되며, 각 입력 채널은 평탄화 된 후 하나 이상의 슈퍼셀들에 의해 처리된다(이름 지정 체계에서 제1 문자로 표시된 레이어). 하나 이상의 레이어는 입력 레이어가 슈퍼셀들의 크기보다 작을 수 있거나 입력 채널의 수직 차원 값이 슈퍼셀들의 수직 차원 값으로 고르게 분할되지 않을 때 레이어의 일부만 포함할 수 있다. 같은 구현에서 출력 기능(즉, 다른 출력 채널)은 에 표시된 것처럼 수평으로 2130개의 슈퍼셀들로 나뉜다. 따라서 슈퍼셀들(이름 지정 체계에서 제2 문자로 표시됨)의 하나 이상의 열(또는 부분)이 각 출 력특징을 처리하는 데 사용된다. 슈퍼셀들 자체는 전술 한 곱셈 - 누적 유닛들과 유사 할 수 있다. 슈퍼셀들은 입력 값에 대해 컨볼 루션 연산을 수행한 후 그 출력을 상위 셀 로 전송한다. 이것은 여러 입력 레이어로부터 출력 특징들 을 생성하기 위해 서로 다른 입력 레이어의 컨볼루션이 합산되도록 한다. (예를 들어, 도 16e-f) 전술한 방법을 사용하여 출력을 위한 다중 채널이 있는 경우 다중 세트의 출력 특징들이 생성된다. 제1 클럭 사이클에서 ICU은 제1 NIM tile(2125A)에 해당 NIM tile(2125A)와 연결된 하나 이상의 슈퍼셀 을 구성하도록 지시한다. 도면 예제에서 NIM 타일(2125A)와 동일한 계층의 슈퍼셀은 NIM 타일 2125A에 의 해 구성된다. 이것들은 2130A-* (여기서 *는 A에서 N까지의 모든 문자이다.)에 해당한다. 제2 클럭 사이클에서 NIMtile(2125A)는 도 13a-b에 설명된 방법을 사용하여 올바른 제어 패턴 값으로 슈퍼셀(2130A-A)를 구성한다. 제1 슈퍼셀(2130A-A)의 경우 제어 패턴 값을 생성할 때 행과 열 번호에 오프셋이 없다. 그러나 슈퍼셀(2130A-A) 이외의 다른 슈퍼셀 2130의 경우, 제어 패턴 값을 생성하는 데 사용되는 행과 열 번호에는 추가 오프셋이 있다.열 번호의 경우, 이 간격 띄우기는 구성중인 수퍼 셀의 왼쪽(\"서쪽\")에 슈퍼셀의 수를 곱한 값과 같다. 행 번호 의 경우, 이 간격 띄우기는 구성 중인 슈퍼셀 아래의 (남쪽) 개수와 같으며, 슈퍼 셀의 셀 높이에 곱한다. 오프셋 값은 이전 입력 채널 또는 출력 채널을 처리하여 이미 사용되는 슈퍼 셀의 일부분에 따 라 추가로 패딩 될 수 있다. 이 오프셋이 사용되는 이유는 타일, 제어 패턴, 확장된 커널 크기가 슈퍼 셀 크기 의 배수가 아닐 수 있어 서로 다른 타일이 다른에 걸쳐 있을 수 있기 때문이다. 즉, 제어 패턴 값이 서로 다른에도 걸쳐 있을 수 있으므로 각 제어 패턴 값의 계산이 슈퍼셀의 위치로 상쇄되어 슈퍼셀 이 처리할 타일, 타일 또는 타일의 분수에 해당하는 정확한 제어 패턴 값을 생성해야 한다. 제어패턴 값으로 구성된 슈퍼셀(2130A-A)와 병렬(동일한 클럭 사이클에서) NIM 타일(2125A)는 슈퍼셀(2130B- *)를 구성하기 위한 지침과 함께 후속 NIM 타일 2125B(현재 NIM 타일 2125의 위 또는 \"북쪽\")로 지침을 전송한 다. 이 지침은 NIM 타일(2125B)가 오프셋을 설명하는 올바른 제어 패턴 값으로 슈퍼셀(2130B-*)을 구성하도록 앞에서 설명한 오프셋 값을 포함한다. 이 지침의 전송은 입력 크기와 동일한 슈퍼셀이 NIM 타일 에 의해 구성될 때까지 반복된다. 슈퍼 레인(superlane)에서 슈퍼셀(들)의 각 구성 동안, NIM 타일은 출력의 특정 채널 (즉, 출력 채 널)에 대해서만 슈퍼셀 을 구성할 수 있다. 채널은 ICU의 명령에 지정될 수 있다. 출력의 추가 채 널에 대해 슈퍼셀 을 구성하기 위해 ICU는 각 클럭 주기마다 NIM 타일 에 추가 명령을 지시 할 수 있다. 이러한 명령은 정확한 오프셋 값을 포함하여 출력 레이어를 처리하는 슈퍼셀 이 정확한 제어 패턴 값을 생성할 수 있는 정확한 행 및 열 위치 값을 갖도록 한다. 각 클럭 사이클에서, ICU로부터의 명령은 하나의 NIM 타일 에서 후속 NIM 타일 로 \"북쪽\"으 로 전파되는 반면, ICU 는 \"동쪽\"방향을 따라 슈퍼셀에 대한 명령을 계속 발행한다. 따라서, 다수의 클럭 사이클에 걸쳐, 슈퍼셀은 대각선 \"파(wave)\"로 구성된다. 이러한 방식으로 전체 입력 채널 및 출력 채널 세트에 대한 구성은 여러 클럭 사이클 후에 구성된다. 이것이 완료되면, 입력 값은 여기에 설명된 시스템 에 의해 수신되고 출력 특징들 을 생성하기 위해 위에서 설명된 곱셈 - 누적 유닛과 유사한 프로세스로 슈퍼셀에 의해 타일별로 처리된다. 도 22a는 일 실시 예에 따른 예시적인 기계 학습 프로세서를 도시한다. 본 개시의 특징 및 장점은 매우 높은 속 도로 컨볼루션 동작을 수행할 수 있는 프로세서 회로를 포함한다. 이 예에서 서버 컴퓨터 (또는 호스트) 는 컨볼루션을 수행하는데 사용할 하나 이상의 커널들 을 수신하는 구성 소프트웨어를 포함할 수 있다. 프로세서 회로 은 기계 학습 프로세서일 수 있으며, 예를 들어, 기계 학습(인공지능) 알고리즘의 일부로 입력 데이터(예: 이미지와 같은 활성화)를 수신하고 커널(예: 신경망 가중치)을 입력 데이터에 적용하는 회로를 가리킨다. 이 예에서 구성 소프트웨어 (컴파일러라고도 함)은 신경망 가중치를 수신한다. 이 예에서, 확장된 커널 또는 제어 패턴 (또는 둘 다)이 소프트웨어에서 생성될 수 있다. 예를 들어, 가중치 는 메모리 또는 레지스터 회로와 같은 프로세서 회로 의 데이터 저장소 에 저장될 수 있는 제어 패턴 및 확장된 커널 을 생성하기 위해 커널 생성기 및 제어 패턴 생성기 에 의해 분석될 수 있다. 예를 들면. 입력 값 은 입력/출력 (I/O) 회로 에서 수신될 수 있고 예를 들 어 데이터 버스 를 통해 곱셈 - 누적 회로 에 결합될 수 있다. 확장된 커널 및 제어 패턴 은 또한 곱셈 - 누적 회로에 연결될 수 있다. 곱셈 - 누적 회로 는 예를 들어 전술한 바와 같이 컨볼루션 결과를 생성할 수 있다. 일부 실시 예에서, 중간 컨볼루션 결과들은 데이터 저장소 (222 0)에 저장되고 새로운 활성화 입력 에 대해 적용된다. 다른 실시 예에서, 컨볼루션 결과 는 예를 들어 출력으로서 제공될 수 있다. 대안으로, 컨볼루션 결과는 벡터 프로세서 (미도시)와 같은 다른 회로 (222 3)에 의해 처리될 수 있다. 도 22a는 다른 실시 예에 따른 예시적인 기계 학습 프로세서를 도시한다. 이 예에서 커널은 구성 소프트웨어에 의해 분석되지만 확장된 커널 및 제어 패턴은 하드웨어에서 생성될 수 있다. 예를 들어, 하나 이상의 커널 (예 를 들어, 신경망 가중치) 이 구성 소프트웨어 (예를 들어, 컴파일러) 에서 수신되고 값 K를 포함하 는 확장된 커널을 생성하기 위한 구성 정보를 생성하기 위해 커널 분석기 컴포넌트 에 의해 분석된다. 이 는 커널의 크기 및 기타 정보 (예: 처리할 입력의 크기)에서 파생될 수 있다. 서버 컴퓨터 는 구성 정보 및 K의 값을 프로세서 회로 에 전송할 수 있다. 이 예에서 K는 입력 의 각 행에 있는 타일 수에 대 응할 수 있다. 예를 들어, 타일은 커널과 동일한 크기이다. 구성 정보는 제어 패턴 생성기 및 시프터 회 로 를 구성하는 데 사용될 수 있다. 시프터 회로 는 예를 들어 데이터 저장소 에 저장된 하 나 이상의 커널 로부터 확장된 커널을 생성하도록 커널을 순화하도록 구성될 수 있다.이 실시 예에서, 확장된 커널은 하드웨어에서 생성된다. 하나 이상의 커널 이 데이터 저장소 에 저 장될 수 있다. 예를 들어, 커널은 데이터 스토리지에서 액세스하여 (예: 동시에)을 전환하는 데이 터 스토리지에 저장될 수 있다. 입력 시퀀스를 순열하고 위에서 설명한 대로 확장 커널을 생성하기 위해 다양한 시프트 회로를 사용할 수 있다. 확장 커널을 생성하기 위해 시퀀스를 허용하는 한 가지 예제 회로가 아 래에 더 자세히 설명되어 있다. 예를 들어 확장 커널의 값은 곱셈 - 누적 회로에 로드 될 수 있다. 하드 웨어에서 커널을 확장하면 필요한 데이터 스토리지 양이 줄어들 수 있으며, 일부 구현에서 유리할 수 있다. 본 개시의 실시 예들은 곱셈 - 누적 회로와 직렬로 K 지연 회로를 구성하는 것을 포함한다. 이 예에서, 입력 값 은 프로그래밍 가능 버퍼와 같은 프로그래밍 가능 지연 회로 일 수 있는 지연 회로 에 결 합될 수 있다. 예를 들면. 일 실시 예에서, 지연 은 예를 들어, 커널의 크기 및 입력 어레이의 차원을 따 른 타일의 수에 따라 다를 수 있는 지연 K를 갖도록 구성될 수 있다. 일 실시 예에서, 지연 은 출력이 입 력의 지연된 버전이고 지연이 예를 들어 K로 설정되는 FIFO (first-in first-out) 회로 일 수 있다. 입력 값은 또한 지연없이 곱셈 - 누적 회로 에 직접 연결될 수 있다. 따라서, 곱셈 - 누적 회로 는 예를 들어 K 사이클만큼 지연된 전류 입력 값 및 입력 값을 수신할 수 있다. 제어 패턴 생성기 는 다양한 지연 또는 지연된 입력 데이터 값이 전술한 바와 같이 특정 가중치와 결합되 도록 제어 패턴을 구현하기위한 제어 신호를 생성할 수 있다. 특정 패턴 제어 신호는 예를 들어, 커널이 각 입 력 타일에 적용되는 경로 및 타일 및 커널을 평탄화하는 데 사용되는 경로에 해당할 수 있다. 제어 패턴 생성기 의 출력은 위에서 설명한대로 입력 값의 다양한 지연 버전을 선택하는 데 사용될 수 있다. 따라서, 곱셈 - 누적 회로 는 전류 입력 값, K 개의 지연된 입력 값, 확장된 커널 및 다른 입력을 선택하 기위한 제어 신호를 수신한다. 위에서 설명한 바와 같이, 곱셈 - 누적 회로는 현재 입력 값과 K 개의 지 연된 입력 값을 모두 지연시키기 위한 추가 단위 지연 회로를 포함할 수 있으며, 제어 패턴 생성기 로부 터의 제어 신호는 다른 값에 대해 곱해질 적절한 입력 값을 선택하는 데 사용될 수 있다. 예를 들어, 확장된 커 널에서. 곱셈 - 누적 회로 의 출력은 데이터 저장소 에 저장되고 후속 입력 과 컨볼루션 될 수 있는 중간 컨볼루션 일 수 있거나, 컨볼루션 결과는 예를 들어 에서 출력 될 수 있다. 대안적 으로, 컨볼루션 결과는 벡터 프로세서(미도시)와 같은 다른 회로 에 의해 처리될 수 있다. 예시적인 컴퓨팅 머신 아키텍처 도 23은 컴퓨터가 읽을 수 있는 매체에서 명령을 읽어 프로세서(또는 컨트롤러)에서 실행할 수 있는 컴퓨터 시 스템의 구성 요소를 보여주는 블록 다이어그램이다. 여기에 기술된 컴퓨터는 도 23에 나타낸 단일 컴퓨팅 머신, 가상 머신, 도 23에 표시된 컴퓨팅 머신의 여러 노드를 포함하는 분산 컴퓨팅 시스템, 또는 다른 적절한 컴퓨터 장치 배열을 포함할 수 있다. 여기에 설명된 컴퓨터는 이전 도면에 설명된 모든 요소에 의해 설명되는 기능을 실행하는데 사용될 수 있다. 예를 들어, 도 23은 컴퓨터 시스템의 예제 형태로 컴퓨터 시스템의 도표로 나타낸 것을 보여주는데, 명령 (예: 소프트웨어, 프로그램 코드 또는 기계 코드)은 컴퓨터가 읽을 수 있는 매체에 저장하여 기계가 여기 서 논의한 하나 이상의 프로세스를 수행하도록 할 수 있다. 일부 실시예에서는 컴퓨팅 머신이 독립 실행형 장치 로 작동하거나 다른 머신에 연결(예: 네트워크 연결)될 수 있다. 네트워크 배포에서 시스템은 서버-클라이언트 네트워크 환경에서 서버 시스템 또는 클라이언트 시스템의 용량 또는 피어-투-피어(또는 분산) 네트워크 환경에 서 피어 시스템으로 작동할 수 있다. 도 23에 기술된 컴퓨팅 머신의 구조는 위의 도면에 나타낸 모든 소프트웨어, 하드웨어 또는 결합 구성요소와 일 치할 수 있다. 도 23은 다양한 하드웨어와 소프트웨어 요소를 보여주고 있지만, 도 1과 2에 기술된 각 구성 요 소는 추가적이거나 더 적은 요소를 포함할 수 있다. 예를 들어, 컴퓨팅 기계는 개인용 컴퓨터 (PC), 태블릿 PC, 셋톱 박스 (STB), PDA (Personal Digital Assistant), 휴대 전화, 스마트 폰, 웹일 수 있다. 기기, 네트워크 라우터, 사물 인터넷 (IoT) 장치, 스위치 또 는 브리지, 또는 해당 기계에 의해 취해질 조치를 지정하는 명령 을 실행할 수 있는 임의의 기계일 수도 있다. 또한, 단일 머신만이 예시되지만, \"머신\"이라는 용어는 본 명세서에서 논의된 방법론 중 임의의 하나 이 상을 수행하기 위해 개별적으로 또는 공동으로 명령 을 실행하는 임의의 머신 집합을 포함하는 것으로 간 주 되어야한다. 예시적인 컴퓨터 시스템은 하나 이상의 프로세서 (일반적으로 프로세서 ) (예를 들어, 중앙 처리 장치 (CPU), 그래픽 처리 장치 (GPU), 디지털 신호 프로세서 (DSP), 하나 이상의 애플리케이션)를 포함한다. 특정 집적 회로 (ASIC), 하나 이상의 무선 주파수 집적 회로 ((RFIC) 또는 이들의 임의의 조합), 주 메모리 및 정적 메모리 는 버스를 통해 서로 통신하도록 구성된다. 컴퓨터 시스템 은 그래픽 디스플레이 유닛 (예: 플라즈마 디스플레이 패널 (PDP), 액정 디스플레이 (LCD), 프로젝터 또는 음극선 관 (CRT))을 더 포함할 수 있다. 컴퓨터 시스템 은 또한 영 숫자 입력 장치 (예를 들어, 키보드), 커서 제어 장치 (예를 들어, 마우스, 트랙볼, 조이스틱, 모션 센서 또는 기타 포인팅기구), 저장 유닛 , 신호 생성 장치 (예를 들어, 스피커) 및 네트워크 인터페이스 장치 는 또한 버스 를 통해 통신하도록 구성된다. 저장 유닛은 여기에 설명된 하나 이상의 방법론 또는 기능을 구체화한 명령을 저장하는 컴퓨터 판 독 가능 매체를 포함한다. 명령은 또한 컴퓨터 시스템에 의해 실행되는 동안 주 메모리 또는 프로세서 캐시 메모리 내에 완전히 또는 최소한 부분적으로 있을 수도 있고, 주 메모리 와 프로세서도 컴퓨터가 읽을 수 있는 미디어를 구성할 수도 있다. 명령은 네트워크 인터페 이스 장치를 통해 네트워크을 통해 전송 또는 수신할 수 있다. 컴퓨터 판독 가능 매체 가 예시적인 실시 예에서 단일 매체 인 것으로 도시되었지만, \"컴퓨터 판독 가능 매체\"라는 용어는 단일 매체 또는 다중 매체 (예를 들어, 중앙집중식 또는 분산 데이터베이스, 또는 관련 캐시 및 서버) 명령 (예를 들어, 명령 )을 저장할 수 있다. 컴퓨터 판독 가능 매체는 기계에 의한 실행을 위한 명령 (예를 들어, 명령 )을 저장할 수 있고 기계가 여기에 개시된 방법 중 임의의 하나 이상을 수행하게 하는 임의의 매체를 포함할 수 있다. 컴퓨터 판독 가능 매체는 고체 메모리, 광학 매체 및 자기 매체 형태의 데 이터 저장소를 포함할 수 있지만 이에 제한되지 않는다. 컴퓨터 판독 가능 매체는 신호 또는 반송파와 같은 일 시적인 매체를 포함하지 않는다. 추가 구성 고려 사항 특정 실시예들은 위의 도면에 나타낸 것과 같이 논리 또는 다수의 구성 요소, 엔진, 모듈 또는 메커니즘을 포함 하는 것으로 설명된다. 엔진은 소프트웨어 모듈(예: 컴퓨터가 읽을 수 있는 매체에 구현된 코드) 또는 하드웨어 모듈을 구성할 수 있다. 하드웨어 엔진은 특정 작업을 수행할 수 있는 유형의 장치이며 특정 방식으로 구성되거 나 배열될 수 있다. 예를 들어, 실시예에서는 하나 이상의 컴퓨터 시스템(예: 독립 실행형, 클라이언트 또는 서 버 컴퓨터 시스템) 또는 컴퓨터 시스템의 하나 이상의 하드웨어 엔진(예: 프로세서 또는 프로세서 그룹)이 여기 에 설명되어 있는 바와 같이 특정 작업을 수행하기 위해 작동하는 하드웨어 엔진으로 구성될 수 있다. 다양한 실시 예에서, 하드웨어 엔진은 기계적으로 또는 전자적으로 구현될 수 있다. 예를 들어, 하드웨어 엔진 은 특정 작업을 수행하기 위해 영구적으로 구성된 전용 회로 또는 로직(예: FPGA (Field Programmable Gate Array) 또는 ASIC (application-specific integrated circuit)과 같은 특수 목적 프로세서)을 포함할 수 있다. 하드웨어 엔진은 또한 특정 동작을 수행하기 위해 소프트웨어에 의해 일시적으로 구성되는 프로그래밍 가능 논 리 또는 회로(예를 들어, 범용 프로세서 또는 다른 프로그래밍 가능 프로세서 내에 포함됨)를 포함할 수 있다. 하드웨어 엔진을 기계적으로, 전용 및 영구적으로 구성된 회로 또는 일시적으로 구성된 회로 (예: 소프트웨어에 의해 구성)에서 구현하는 결정은 비용 및 시간 고려 사항에 의해 결정될 수 있음을 알 수 있을 것이다. 본 명세서에 설명된 예시적인 방법의 다양한 동작은 일시적으로 (예를 들어, 소프트웨어에 의해) 구성되거나 관 련 동작을 수행하도록 영구적으로 구성된 하나 이상의 프로세서, 예를 들어 프로세서 에 의해 적어도 부분 적으로 수행될 수 있다. 일시적으로 또는 영구적으로 구성된 경우, 이러한 프로세서는 하나 이상의 작업 또는 기능을 수행하도록 작동하는 프로세서 구현 엔진을 구성할 수 있다. 여기에서 언급된 엔진은 일부 예시적인 실 시 예에서 프로세서 구현 엔진을 포함할 수 있다. 특정 동작의 성능은 단일 머신 내에 있을 뿐만 아니라 다수의 머신에 걸쳐 배치되는 하나 이상의 프로세서 간에 분산될 수 있다. 일부 예시적인 실시 예에서, 하나 이상의 프로세서 또는 프로세서 구현 모듈은 단일 지리적 위 치 (예를 들어, 가정 환경, 사무실 환경 또는 서버 팜 내)에 위치할 수 있다. 다른 예시적인 실시 예에서, 하나 이상의 프로세서 또는 프로세서 구현 모듈은 다수의 지리적 위치에 분산될 수 있다. 본 명세서를 통해, 당업자는 여기에 개시된 원리를 통해 유사한 시스템 또는 프로세스에 대한 또 다른 대안적인 구조 및 기능적 설계를 이해할 것이다. 따라서, 특정 실시 예 및 응용이 예시되고 설명되었지만, 개시된 실시 예는 본 명세서에 개시된 정확한 구성 및 구성 요소로 제한되지 않는다는 것을 이해해야 한다. 당업자에게 명백 한 다양한 수정, 변경 및 변경은 첨부된 청구 범위에 정의된 사상 및 범위를 벗어나지 않고 여기에 개시된 방법 및 장치의 배열, 작동 및 세부 사항에서 이루어질 수 있다.도면 도면1 도면2 도면3 도면4 도면5a 도면5b 도면5c 도면6a 도면6b 도면7 도면8 도면9a 도면9b 도면9c 도면10a 도면10b 도면10c 도면11 도면12a 도면12b 도면13a 도면13b 도면13c 도면14 도면15a 도면15b 도면15c 도면16a 도면16b 도면16c 도면16d 도면16e 도면16f 도면17a 도면17b 도면18a 도면18b 도면19 도면20 도면21 도면22a 도면22b 도면23"}
{"patent_id": "10-2023-7025325", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시예에 따른, 출력 활성화를 생성하기 위해 커널의 SLT(spatial locality transform)를 통한 입력 텐서의 컨볼루션을 위한 시스템을 도시한다. 도 2는 일 실시예에 따른, 커널에 의한 2차원 입력의 컨볼루션의 예이다. 도 3은 일 실시예에 따른, 입력 텐서를 평탄화 하는 방법을 예시하는 흐름도이다. 도 4는 일 실시예에 따른, 1차원 커널의 경우에 입력 텐서의 평탄화의 예를 도시한다. 도 5a는 일 실시예에 따른, 2차원 커널의 경우에 입력 텐서를 평탄화 하는 예의 제1 부분을 도시한다. 도 5b는 일 실시예에 따른, 2차원 커널의 경우에 입력 텐서를 평탄화 하는 예의 제2 부분을 도시한다. 도 5c는 일 실시예에 따른, 다중 입력 채널에 대한 입력 텐서를 평탄화 하는 예를 도시한다. 도 6a는 일 실시예에 따른, 3 차원 커널의 대한 입력 텐서를 평탄화 하는 예의 제1 부분을 도시한다. 도 6b는 일 실시예에 따른, 3차원 커널의 경우에 입력 텐서를 평탄화 하는 예의 제2 부분을 도시한다. 도 7은 일 실시예에 따라 확장된 커널을 생성하는 방법을 예시하는 흐름도이다. 도 8은 일 실시예에 따른, 1차원 커널의 경우 확장된 커널을 생성하는 예를 도시한다. 도 9a는 일 실시예에 따른, 상이한 2차원 커널에 대한 확장된 커널을 생성하는 예를 도시한다. 도 9b는 일 실시 예에 따라 열-중심 확장을 사용하여 확장된 커널을 생성하는 예를 도시한다. 도 9c는 일 실시예에 따른, 다중 커널 필터의 경우 확장된 커널을 생성하는 예를 도시한다. 도 10a는 일 실시예에 따른, 3차원 커널의 경우 확장된 커널을 생성하는 예의 제1 부분을 도시한다. 도 10b는 일 실시예에 따른, 3차원 커널의 경우 확장된 커널을 생성하는 예의 제2 부분을 도시한다. 도 10c는 일 실시예에 따른, 3차원 커널의 경우 확장된 커널을 생성하는 예의 제3부분을 도시한다. 도 11은 일 실시예에 따른, 제어 패턴을 생성하는 방법을 예시하는 흐름도이다. 도 12a는 일 실시예에 따른, 제어 패턴의 생성을 위한 개념적 기반의 예의 제1부분을 도시한다. 도 12b는 일 실시예에 따른, 제어 패턴의 생성을 위한 개념적 기반의 예의 제2 부분을 도시한다. 도 13a는 일 실시예에 따라 2차원 커널에 대한 제어 패턴에 대한 값 생성의 일부의 예를 도시한다. 도 13b는 일 실시예에 따른, 3차원 커널에 대한 제어 패턴에 대한 값 생성의 일부의 예를 도시한다. 도 13c는 일 실시예에 따라, 상이한 차원의 커널에 대해 생성된 제어 패턴의 예를 도시한다. 도 14는 일 실시예에 따라 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 컨볼루션의 출력을 생성하는 방법을 예시하는 흐름도이다. 도 15b는 일 실시예에 따라 1차원 커널의 경우에 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 예의 제2부분을 도시한다. 도 15c는 일 실시예에 따라 1차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활 성화를 생성하는 예의 제3 부분을 도시한다. 도 16a는 일 실시예에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활 성화를 생성하는 예의 제1 부분을 도시한다. 도 16b는 일 실시예에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활 성화를 생성하는 예의 제2 부분을 도시한다. 도 16c는 일 실시예에 따라 2차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 예의 제3 부분을 도시한다. 도 16d는 일 실시예에 따라 2차원 커널의 경우에 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활성화를 생성하는 예의 제4 부분을 도시한다. 도 16e는 일 실시예에 따라 2차원 커널의 경우에 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 다중 채널로 출력 활성화를 생성하는 예를 도시한다. 도 16f는 일 실시예에 따라 2차원 커널의 경우에 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 다중 채널로 출력 활성화를 생성하는 예의 제2 부분을 도시한다. 도 17a는 일 실시예에 따른 3차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활 성화를 생성하는 예의 제1부분을 도시한다. 도 17b는 일 실시예에 따른 3차원 커널의 경우 평탄화 된 입력, 확장된 커널 및 제어 패턴을 사용하여 출력 활 성화를 생성하는 예의 제2부분을 도시한다. 도 18a는 일 실시예에 따라 확장된 커널을 생성하기 위한 예시적인 구성 요소에 대한 하드웨어 다이어그램을 도 시한다. 도 18b는 일 실시예에 따라 확장된 커널을 생성하기 위해 예시적인 컴포넌트에서 사용되는 예시적인 시프터 회 로에 대한 하드웨어 다이어그램을 도시한다. 도 19는 일 실시예에 따른 제어패턴을 생성하기 위한 예시적인 컴포넌트에 대한 하드웨어 다이어그램을 도시한 다. 도 20은 일 실시예에 따라 출력 활성화를 생성하기 위해 곱셈-덧셈 연산을 수행하는 예시적인 구성 요소에 대한 하드웨어 다이어그램을 도시한다. 도 21은 일 실시예에 따른 기계 학습 프로세서에서 출력 활성화를 계산하기 위한 예시적인 컴포넌트 레이아웃을 도시한다. 도 22a는 실시예에 따른 예시적인 기계 학습 프로세서를 도시한다. 도 22b는 다른 실시예에 따른 예시적인 머신 러닝 프로세서를 도시한다. 도 23은 컴퓨터 판독 가능 매체로부터 명령을 판독하고 이를 프로세서(또는 컨트롤러)에서 실행할 수 있는 예시 적인 컴퓨팅 머신의 구성요소를 예시하는 블록도이다. 도면들은 단지 예시의 목적으로 다양한 비 제한적인 실시예를 묘사하고, 상세한 설명은 단지 예시의 목적으로 다양한 비 제한적인 실시예를 설명한다."}
