{"patent_id": "10-2023-0046881", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0174150", "출원번호": "10-2023-0046881", "발명의 명칭": "분산 클라우드 시스템, 분산 클라우드 시스템의 데이터 처리 방법 및 저장매체", "출원인": "한국전자통신연구원", "발명자": "김대원"}}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "분산 클라우드 시스템의 데이터 처리 방법에 있어서,에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하는 단계,여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고, 상기 코어 클라우드의 스케줄러에 의해 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 처리된 작업의 결과를 취합하는 단계; 및상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 단계;를 포함하고, 여기서 상기 분산 클라우드 시스템은 상기 시스템의 장애 시 관리 기능을 제공하는, 분산 클라우드 시스템의 데이터 처리 방법."}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서,상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 공유 스토리지를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시키는, 분산 클라우드 시스템의 데이터 처리 방법."}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2항에 있어서,상기 분산 클라우드 시스템의 데이터 처리 방법은, 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트 저장소에 저장하는 마이그레이션을 수행하는, 분산 클라우드 시스템의 데이터 처리 방법."}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "하나 이상의 프로세서; 및상기 하나 이상의 프로세서에 의해 실행되는 적어도 하나 이상의 프로그램을 저장하는 메모리를 포함하고,상기 프로세서는, 에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하도록 하고,여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고;상기 프로세서는, 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업이 상기 처리된 작업의 결과를 취합하고,상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하도록 하는; 프로세스들을 수행하고, 여기서, 상기 프로세서는, 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행하는, 분산 클라우드 시스템."}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2023-0174150-3-제 4 항에 있어서, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 상기 메모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시키는, 분산 클라우드 시스템."}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 5항에 있어서,여기서, 상기 프로세서는 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트저장소에 저장하는 마이그레이션을 수행하는, 분산 클라우드 시스템."}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하도록 하고,여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고;상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업이 상기 처리된 작업의 결과를취합하고;상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 것을 포함하는 명령어들을 수행하고,여기서, 상기 명령어들은 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행하는 것을 포함하는 컴퓨터로수행 가능한 프로그램을 저장하는 저장매체."}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7 항에 있어서, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 상기 메모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시키는, 컴퓨터로 수행 가능한 프로그램을 저장하는 저장매체."}
{"patent_id": "10-2023-0046881", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8항에 있어서,여기서, 상기 프로그램은 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트저장소에 저장하는 마이그레이션을 수행하는, 컴퓨터로 수행 가능한 프로그램을 저장하는 저장매체."}
{"patent_id": "10-2023-0046881", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "분산 클라우드 시스템, 분산 클라우드 시스템의 데이터 처리 방법 및 저장매체가 개시된다. 본 발명의 일실시예 에 따른 분산 클라우드 시스템의 데이터 처리 방법은 에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우 드 시스템을 제어하는 단계, 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상 기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라 우드를 포함하고, 상기 코어 클라우드의 스케줄러에 의해 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기 초해 배분하고 상기 처리된 작업의 결과를 취합하는 단계 및 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 단계를 포함하고, 여기서 상기 분산 클라우드 시스템은 상기 시스템의 장애 시 관리 기능을 제공한다."}
{"patent_id": "10-2023-0046881", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 분산 클라우드 기술에 관한 것으로, 보다 상세하게는 분산 클라우드 환경의 에지 컴퓨팅을 위한 데이 터 처리 및 서비스 마이그레이션 기술에 관한 것이다."}
{"patent_id": "10-2023-0046881", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "분산 클라우드에서 서비스 이관을 위한 마이그레이션 기능은 실시간으로 서비스가 재배치되는 클라우드 환경에 서 끊임없는 서비스를 유지하기 위하여 제공된다. 마이그레이션은 리소스 부족, 장애 발생 및 비용 효율적인 측 면을 고려하여 엣지 클라우드 간 혹은 에지 클라우드와 다른 클라우드 간에 이루어 진다. 그리고, 엣지 클라우드의 근접 서비스는 이동 서비스의 지원을 위해 무중단 서비스가 필요하다. 그러므로, 서비 스 이관 관리의 핵심 기능은 컨테이너 혹은 가상머신 기반의 응용을 마이그레이션하는 기능이 분산 클라우드의장애 극복 방안으로 제시된다. 엣지 컴퓨팅 기술은 엔터프라이즈 데이터 센터 또는 중앙 집중식 클라우드 서비스 중 일부를 필요로 한다. 이 때, 엣지 컴퓨팅 기술은 다양한 분산 컴퓨팅 토폴로지의 일부분으로 컴퓨팅 스토리지 소프트웨어 등을 코어에서 에지로 배포한다. 그리고, 엣지 컴퓨팅 기술은 기존 클라우드-단말 중심의 중앙 집중형 클라우드 인프라보다 빠 른 서비스 제공을 위해 서비스 사용자에 근접한 컴퓨팅 자원을 선택적으로 활용하는 코어 클라우드-클라우드 엣 지-단말 협업 기반 저지연 데이터 처리 기술을 제공함으로써 응답 속도와 필수 안전(Safety-Critical) 서비스의 안정성을 보장한다. 현재 사용자가 원하는 대규모 단말들이 생성하는 폭증 데이터의 중앙 클라우드 집중화 때문 에, 처리 및 전송 지연을 극복하기 위해서, 단말 근접 위치에서 데이터를 처리하는 지능형 클라우드 엣지 서비 스를 제공하는 기술 개발 및 관련 서비스 시스템들이 출시되고 있다. 그 중 단일 클러스터로 운영되는 쿠버네티 스(Kubernetes)는 OCI 기반의 컨테이너 환경을 오케스트레이션 및 통합 운영하도록 설계된 도구로서 현재 가장 많이 사용되는 도구이다. 그러나 Kubernetes는 단일 클러스터 환경을 그 용도가 제한되어 있고 다중 클러스터를 연계하기 위한 도구가 필요하다. 이후 Rancher는 다중 클러스터로 구성된 Kubernetes를 지원하기 위하여 다중 Kubernetes 클러스터를 설치하고 설정하도록 고안되었다. 그리고 Rancher는 사용자가 손쉽게 퍼블릭 클라우드와 베어 메탈 서버까지 모두 지원할 수 있도록 고안되어 설계되었다. 그리고, 분산되어 있는 클라우드 엣지와 코어 클라우드를 연계하여 서비스하기 위한 다양한 방법들이 연구되고 있다. 이를 위하여 L7 레이어 기반의 서비스 메쉬 기술로 오픈소스 진영의 Istio가 활발히 진행되고 있다. 서비 스 메시는 마이크로 서비스 간의 연계를 위하여 개발된 프로그램이다. 서비스 메시는 다중 네트워크 상에서 제 어 플레인을 공유하고 게이트웨이를 통하여 클러스터간 통신하므로 두개의 네트워크가 직접 연결되지 않아도 된 다. 클라우드 컴퓨팅은 데이터를 처리하는 곳이 데이터 센터이지만 엣지 컴퓨팅은 대규모 엣지 단말들이 생성하는 방대한 데이터의 클라우드 집중화로 인한 처리 및 전송 지연 극복을 위해 단말 근접 위치에서 데이터를 처리하 고 클라우드-엣지-단말 간 분산 협업을 수행하는 고성능의 플랫폼이 필요하다. 그러나, 기존 엣지 시스템은 다중 클러스트를 감안한 관리 방법이 미흡하다. 또한, 기존 엣지 시스템은 베어메탈, 컨테이너, FaaS 서비스등에 최적화되지 않은 형태로 서비스 제공되고 있다. 또한, 기존 엣지 시스템은 여유 자원 부족 시 성능 보장을 위한 자원 추가 방법이 제공되지 않고 있다. 또한, 기존 엣지 시스템은 수직적/수평적 협업을 위한 응용프로그램 수준에서 설계가 필요하다. 또한, 기존 엣지 시스템은 다중 클러스터를 고속으로 연결하기 위한 네트워크 구조가 미흡하다. 또한, 기존 엣지 시스템은 Kubernetes에 사용되는 OCI의 성능이 부족한 문제가 있다(응답 속도에 민감한 서비스 의 지연 발생). 또한, 기존 엣지 시스템은 완벽한 협업 솔루션을 위한 아키텍처 상의 기술이 부재되어 있다. 한편, 한국공개특허 제 10-2023-0024416 호“클라우드 플랫폼 간 가상 머신 마이그레이션 방법, 장치, 저장 매 체 및 전자 장치”는 타깃 클라우드 플랫폼의 타깃 가상 머신의 디스크 스토리지 라이브러리로 하나씩 마이그레 이션하는 장치 및 방법에 관하여 개시하고 있다."}
{"patent_id": "10-2023-0046881", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 클러스터 간의 효율적인 협업을 위한 서비스 마이그레이션을 제공하는 것을 목적으로 한다. 또한, 본 발명은 협업 서비스를 위한 다중 클러스터 간의 고속 네트워크 연결을 제공하는 것을 목적으로 한다. 또한, 본 발명은 연계된 네트워크 상에서 클러스터 간의 협업을 위한 최적 관리를 제공하는 것을 목적으로 한다."}
{"patent_id": "10-2023-0046881", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 분산 클라우드 시스템의 데이터 처리 방법은 에지 클 라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하는 단계, 여기서, 상기 분산 클라우드 시 스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클 라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고, 상기 코어 클라우드의 스케줄러에 의해 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 처리된 작업의 결과를 취합하는 단계 및 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 단계;를 포함하고, 여기서 상기 분산 클라우드 시스템은 상기 시스템의 장애 시 관리 기능을 제공한다. 이 때, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하 고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 공유 스 토리지를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 상기 분산 클라우드 시스템의 데이터 처리 방법은, 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스 토리지에 상응하는 체크 포인트 저장소에 저장하는 마이그레이션을 수행할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 분산 클라우드 시스템은 하나 이상의 프로세서; 및 상기 하나 이상의 프로세서에 의해 실행되는 적어도 하나 이상의 프로그램을 저장하는 메모리를 포함하고, 상기 프로세서는, 에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하도록 하고, 여 기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코 어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고; 상기 프로 세서는, 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업이 상기 처리된 작업의 결과를 취합하고; 및 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하도록 하는; 프로세스들을 수행하 고, 여기서, 상기 프로세서는, 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행한다. 이 때, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하 고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 상기 메 모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 상기 프로세서는 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트 저 장소에 저장하는 마이그레이션을 수행할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 컴퓨터로 수행 가능한 프로그램을 저장하는 저 장매체는 에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하도록 하고, 여기서, 상 기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라 우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고; 상기 사용자 요청 에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업이 상기 처리된 작업의 결과를 취합하고; 상기 사 용자의 요청에 따라 상기 처리된 데이터를 제공하는 것을 포함하는 명령어들을 수행하고, 여기서, 상기 명령어 들은 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행하는 것을 포함한다. 이 때, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하 고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 상기 메 모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 상기 프로그램은 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트 저 장소에 저장하는 마이그레이션을 수행할 수 있다."}
{"patent_id": "10-2023-0046881", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명은 클러스터 간의 효율적인 협업을 위한 서비스 마이그레이션을 제공할 수 있다. 또한, 본 발명은 협업 서비스를 위한 다중 클러스터 간의 고속 네트워크 연결을 제공할 수 있다. 또한, 본 발명은 연계된 네트워크 상에서 클러스터 간의 협업을 위한 최적 관리를 제공할 수 있다."}
{"patent_id": "10-2023-0046881", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명을 첨부된 도면을 참조하여 상세히 설명하면 다음과 같다. 여기서, 반복되는 설명, 본 발명의 요지를 불 필요하게 흐릴 수 있는 공지 기능, 및 구성에 대한 상세한 설명은 생략한다. 본 발명의 실시형태는 당 업계에서 평균적인 지식을 가진 자에게 본 발명을 보다 완전하게 설명하기 위해서 제공되는 것이다. 따라서, 도면에서의 요소들의 형상 및 크기 등은 보다 명확한 설명을 위해 과장될 수 있다. 명세서 전체에서, 어떤 부분이 어떤 구성요소를 \"포함\"한다고 할 때, 이는 특별히 반대되는 기재가 없는 한 다 른 구성요소를 제외하는 것이 아니라 다른 구성요소를 더 포함할 수 있는 것을 의미한다. 이하, 본 발명에 따른 바람직한 실시예를 첨부된 도면을 참조하여 상세하게 설명한다. 도 1은 본 발명의 일실시예에 따른 엣지 서비스 시스템을 나타낸 도면이다. 도 1을 참조하면, 엣지 서비스 시스템은 클라우드와 엣지 시스템의 혼합 클라우드로 구성되는 것을 알 수 있다. 이 때, 도 1을 참조하면, 본 발명의 일실시예에 따른 엣지 서비스 시스템에서 수직 협업은 코어 클라우드-엣지 간의 협업을 나타내고, 수평 협업은 엣지들 간의 협업 구조를 나타내는 것을 알 수 있다. 엣지 서비스 시스템은 각 엣지들 간의 협업을 위해서는 네트워크 연결이 필요하며 이를 위한 터널링 기반 고속 네트워크가 구성되고, 엣지들 간에는 서로 간의 클러스터를 연계하기 위한 공유된 스토리지 및 저장소를 구성되는 것을 알 수 있다. 이렇게 구성된 엣지 서비스 시스템은 전체 관리를 담당하는 글로벌 스케줄러에 의해서 구동되고 관리될 수 있다. 그리고 클러스터의 노드들은 기본적으로 컨테이너 플랫폼으로 모놀리틱 응용, 마이크로 서비스 및 FaaS(Function as a Service) 시스템 등으로 이루어 질 수 있다. 앞서 말한 바와 같이 컨테이너 플랫폼은 메모 리 기반 저장 장치를 활용한 메모리 상주형 컨테이너를 기반으로 구성하고 글로벌 캐쉬 역시 고속 구성을 위한 메모리 기반 스토리지를 활용할 수 있다. 본 발명의 일실시예에 따른 엣지 서비스 시스템은 클라우드 및 엣지 시스템과 함께 이웃 엣지(NEAR EDGE) 시스 템이 고려된 3 가지 위치(3 LOCATIONS)를 포함하는 혼합 클라우드 환경을 나타낸 것을 알 수 있다. 3 가지 위치(3 LOCATIONS)는 클라우드(Public/Private Cloud), 엣지(사용자와 직접 연결되어 서비스되는 엣지) 및 이웃 엣지(Near Edge로 엣지와 가까운 주변 엤지)를 포함할 수 있다. 또한, 본 발명의 일실시예에 따른 엣지 서비스 시스템은 3 가지 어플리케이션 형태(3 Application Types)를 제 공할 수 있다. 3 가지 어플리케이션 형태는 모놀리틱 응용(Monolithic App), 마이크로 서비스(Micro Service) 및 서비스형 함 수(FaaS)를 포함할 수 있다. 3 가지 애플리케이션 형태(3 Application Types)은 표 1과 같이 응용프로그램의 복잡도나 서비스 규모, 그리고 자원사용 형태 측면에서 서로 다른 특성이 있는 것을 알 수 있다. 본 발명의 일실시예에 따른 엣지 서비스 시스 템은 상기 특성을 잘 반영한 상호 협업이나 서비스 이동과 같은 기능을 효과적으로 적용할 필요가 있다. [표 1]"}
{"patent_id": "10-2023-0046881", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 2, "content": "도 2는 본 발명의 일실시예에 따른 마이그레이션을 포함한 협업을 위한 다중 클러스터 구조를 나타낸 도면이다. 도 2를 참조하면, 다중 클러스터 상에서 마이그레이션을 위한 클러스터는 다중 클러스터를 기반으로 클러스터 (클라우드 포함)를 연결하여 다양한 서비스를 지원할 수 있다. 이 때, 클러스터는 다중 클러스터 상에서 고속 데이터 전송을 위하여 클러스터 간의 게이트웨이 연결 기능과 라 우팅 기능을 원할히 제공하기 위한 관리 기능을 포함하고, 플랫폼 관리 기능과 연동될 수 있다. 또한, 클러스터는 사용자의 서비스와 대용량 데이터를 클러스터 상에서 마이그레이션하기 위해서는 연동 인터페 이스 및 데이터 이동 편의성을 제공하는 기능을 포함할 수 있다. 이를 위하여, 클러스터는 클러스터 간 데이터 고속 이동을 위한 글로벌 저장소를 포함할 수 잇다. 클러스터는 수직 혹은 수평 협업을 위한 오프로딩을 위해 각 플랫폼 혹은 분산된 클라우드에서 구동되어야 할 서비스의 이관(Migration)은 마스터에 마이그레이션 기능을 제공하기 위한 인에이블러가 구동되고 각 노드 혹은 클러스터에 오퍼레이션을 위한 에이전트를 통하여 수행되고 관리될 수 있다. 클러스터는 서비스의 이동 작업은 크게 응용 서비스 이동(Service Migration)과 관련 데이터 이동(Data Migration)의 과정을 처리할 수 있다. 또한, 클러스터는 오프로딩 수행을 위해 GS 구성 노드들 간의 빠른 데이터 이동 작업을 지원할 수 있다. 클러스 터는 다중 클라우드 간에 데이터 이동 및 서비스 이동을 수행하기 위한 다중 클러스터 연동을 위한 추가 관리기능을 제공할 수 있다. 또한, 클러스터는 각 클러스터에 수행되고 있는 서비스의 상태를 모니터링하고 이를 이동하기 위한 클러스터 선 택 및 배포 작업을 수행할 수 있도록 글로벌 스케쥴러와 연동될 수 있다. 이를 위하여, 클러스터는 각 클러스터 에 구성되어 있는 모니터링 정보를 관리하기 위한 저장소(Repository)와 이를 관리하는 기능을 포함할 수 있다. 또한, 클러스터는 각 클러스터에 구성되어 있는 정보를 클러스터 별로 분리가능한 네트워크 분리 및 자원 분리 기능을 수행할 수 있다. 수행되는 마이그레이션 기능은 글로벌 스케쥴러 자원 부하 모니터링 및 네트워크 모니 터링을 통한 리소스 집약적인 계산 작업을 하드웨어 가속기와 같은 별도의 프로세서 혹은 클러스트 혹은 클라우 드와 같은 외부 장치로 역할을 수행하는 것을 포함할 수 있다. 또한, 글로벌 스케쥴링 기능과 글로벌자원 관리 기능을 가지는 분산 클라우드 상에서도 도 2에 도시된 구조가 적용되고, 클라우드는 코어 클라우드 및 지역(regional )클라우드를 포함할 수 있다. 또한, 클라우드의 구조는 하이브리드클라우드 형태로 구성될 수도 있다. 도 3 및 도 4는 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지를 나타낸 블록도이다. 도 3 및 도 4를 참조하면, 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지는 인메모리 컨테이너 스토리지부, 인메모리 컨테이너 스토리지 엔진부 및 인메모리 컨테이너 스토리지 관리부를 포함 한다. 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지는 상기에서 설명한 각 클러스터에 구성되어 있는 모니터링 정보를 관리하기 위한 저장소(Repository)에 상응할 수 있다. 인메모리 컨테이너 스토리지부는 복수의 컨테이너들로부터 컨테이너 이미지들을 생성하여 컨테이너 스토리 지 볼륨을 생성할 수 있다. 이 때, 인메모리 컨테이너 스토리지부는 비휘발성 특성을 가지는 메인 메모리상의 스토리지를 포함할 수 있다. 이 때, 인메모리 컨테이너 스토리지부는 컨테이너가 수행되는 파일 시스템(docker의 예는 /var/lib/docker) 볼륨을 생성하고, 동작시킬 수 있다. 인메모리 컨테이너 스토리지 엔진부는 메인 메모리, 디스크 스토리지 및 원격 스토리지를 통합하여 하나의 스토리지 형상인 컨테이너 스토리지 볼륨으로 구성된 인메모리 컨테이너 스토리지를 인메모리 컨테이너 스토리 지부에 생성할 수 있다. 이 때, 인메모리 컨테이너 스토리지 엔진부는 애플리케이션 가상화를 제공하는 컨테이너를 저장하는 컨테 이너 파일 시스템을 포함하고, 상기 컨테이너 파일 시스템은 통합 접근 계층, 컨테이너 계층 및 이미지 계층을 포함할 수 있다. 이 때, 상기 컨테이너 스토리지 볼륨은 통합 접근 영역, 컨테이너 계층 및 이미지 계층을 포함하고, 파일 시스 템 통합(Unifying File System) 기능을 이용하여 각 계층들의 통합 처리가 수행되는 컨테이너 파일시스템으로 구성될 수 있다. 이 때, 컨테이너 파일 시스템은 파일 시스템 통합(Unifying File System) 기능을 이용하여 상기 계층들의 통합 처리를 수행할 수 있다. 이 때, 상기 파일 시스템 통합(Unifying File System) 기능은 상기 컨테이너 파일 시스템의 상기 계층들에 포함 된 사용자 디렉토리와 관련 디렉토리들을 마운트하고, 상기 사용자 디렉토리와 상기 관련 디렉토리들에 대한 통 합 처리를 수행할 수 있다. 이 때, 상기 이미지 계층은 상기 링크 정보가 저장된 하부 디렉토리를 포함할 수 있다. 이 때, 상기 컨테이너 계층은 상기 사용자의 접근에 따라 상기 이미지 계층의 수정 내역에 대한 차분 정보를 저 장할 수 있다 이 때, 상기 통합 계층 영역은 상기 컨테이너 계층을 통해 상기 이미지 계층의 링크 정보에 접근하여 상기 사용 자가 파일 공유를 요청한 파일을 공유 받는 사용자 디렉토리를 포함할 수 있다. 이 때, 인메모리 컨테이너 스토리지부는 표준 블록 스토리지 인터페이스를 제공하여 기존의 가상 수정없이 운영할 수 있다. 인메모리 컨테이너 스토리지부는 컨테이너에서 발생한 컨테이너 접근 명령을 전달받을 수 있다. 인메모리 컨테이너 스토리지 엔진부는 메인 메모리, 디스크 스토리지 및 원격 스토리지를 통합하여 단일 형상의 인메모리 컨테이너 스토리지를 생성할 수 있다. 인메모리 컨테이너 스토리지 엔진부는 메인 메모리와 디스크 스토리지 및 원격 스토리지를 통합 사용하여 디스크 접근 명령을 처리할 수 있다. 인메모리 컨테이너 스토리지 엔진부는 스토리지 인터페이스 모듈, 스토리지 접근 분산 모듈, 스토리지 제 어 모듈을 포함할 수 있다. 스토리지 인터페이스 모듈은 표준 블록 스토리지 형식의 인터페이스를 제공하며, 컨테이너에서 발생한 디스크 접근 명령을 수신할 수 있다. 수신된 명령어는 스토리지 접근 분산 모듈로 전달될 수 있다. 스토리지 접근 분산 모듈은 디스크 접근 명령의 특징에 따라서 메인 메모리 스토리지, 디스크 스토리지 혹은 원 격 스토리지를 사용하여 서비스를 수행할지 결정하고, 메인 메모리 제어 모듈, 디스크 스토리지 제어 모듈 및 원격 스토리지 제어 모듈로 접근 명령을 전달할 수 있다. 메인 메모리 제어 모듈은 메인 메모리를 사용하여 디스크 접근 명령을 처리하며 이는 고속의 접근 속도를 제공 할 수 있다. 메인 메모리 디스크 생성 모듈은 블록 단위로 전송된 디스크 접근 명령어들을 주소 단위로 접근 가능한 메인 메 모리상에 실제 읽기/쓰기 동작을 수행할 수 있다. 이를 통하여 메인 메모리 디스크 생성 모듈은 메인 메모리상 에 가상 디스크의 데이타를 저장할 수 있다. 디스크 스토리지 제어 모듈은 디스크 스토리지를 사용하여 가상 데스크 접근 명령을 처리할 수 있다. 인메모리 컨테이너 스토리지 관리부는 사용자에게 공유 데이터를 제공할 수 있다. 이 때, 인메모리 컨테이너 스토리지 관리부는 컨테이너 파일 시스템 계층 관리 모듈을 통하여 공유 스토리 지의 공유 관리 기능을 제공하고 사용자에게 파일 공유를 위한 영역을 개별적으로 구성하여 제공할 수 있다. 이 때, 인메모리 컨테이너 스토리지 관리부는 상기 사용자의 요청에 따라 상기 컨테이너 계층과 상기 이미 지 계층 내의 파일들의 링크 정보를 애플리케이션에 제공하고 상기 애플리케이션이 상기 파일들에 접근하도록 허용할 수 있다. 도 5는 본 발명의 일실시예에 따른 컨테이너 인메모리 스토리지 생성 과정을 나타낸 도면이다. 도 5를 참조하면, 메인 메모리 스토리지와 디스크 스토리지를 통합하여 단일 하이브리드 형태의 인메모리 스토 리지를 생성하는 과정을 나타낸 것을 알 수 있다. 인메모리 컨테이너 스토리지는 표준 블록 스토리지 형식을 제 공하며, 스토리지의 앞부분에 메인 메모리 스토리지 영역을 매핑하고, 뒷 부분에 디스크 스토리지 영역을 매핑 하는 것을 알 수 있다. 메인 메모리 스토리지의 블록ID 1 ~ N 은 인메모리 컨테이너 스토리지의 블록ID 1 ~ N에 매핑된다. 디스크 스토 리지의 블록 ID 1 ~ M은 인메모리 컨테이너 스토리지의 블록 ID N+1 ~ N+M으로 매핑된다. 그리고 컨테이너 인메 모리 스토리지 블록 ID N과 N+1 사이에 스토리지 경계가 설정된다 도 6은 본 발명의 일실시예에 따른 인메모리 스토리지에 구현된 컨테이너 파일 시스템을 나타낸 블록도이다. 도 6을 참조하면, 본 발명의 일실시예에 따른 컨테이너에서 사용하는 파일 시스템을 나타낸 것을 알 수 있다. 컨테이너의 메인메모리 구동을 위하여 컨테이너의 기본 파일 시스템이 메인 메모리에서 구동될 수 있다. 컨테이 너의 경우 기존의 리눅스 환경의 커널에 포함되어 있는 파일 시스템 통합 (Unifying File System) 기능을 사용 하여 사용자가 필요한 파일을 개별적으로 제공할 수 있다. 파일 시스템 통합(Unifying File System) 기능은 단일 마운트 지점에 여러 파일 시스템을 마운트 할 수 있으며, 새로운 파일 시스템 유형을 생성하는 대신 VFS(virtual file system) 계층에서 모든 디렉토리들 항목이 통합 처 리를 수행할 수 있다. 파일 시스템 통합을 사용하면 하위 파일 시스템의 디렉토리 항목이 상위 파일 시스템의 디렉토리 항목과 병합되어 마운트 된 모든 파일 시스템의 논리적 조합을 생성할 수 있다. 그러므로 시스템에서 공유된 전체 파일 시스템에 대한 관리 및 파일 찾기가 로컬에서 가능하고 전체 공유를 위한 파일 관리가 쉬워진다. 컨테이너 파일시스템은 상기 파일 시스템 통합 기능을 이용하여 구성되고, 계층(layer) 형태로 구성될 수 있다. 전체적으로 통합 접근 영역(merged), 컨테이너 계층 영역(container layer) 및 이미지 계층 영역(image laye r)로 구성된다. 각 계층은 인메모리 컨테이너 스토리지 상에 특정 디렉토리를 생성하여 마운트하여 동작할 수 있다. 컨테이너 계층은 쓰기 가능한 계층으로 구성되고, 각 컨테이너 마다 최상 단 계층에 생성되어 컨테이너마다 자 신만의 상태를 가질 수 있다. 컨테이너가 생성된 후, 컨테이너의 변경 작업을 기록할 수 있다. R/W 속도는 메모리 상에서 이루어지기 때문에 빠르게 동작할 수 있다. 그리고, 컨테이너 계층은 파일 관리의 효 율성을 위해 실제 이미지와 컨테이너 이미지의 차분(difference) 정보를 포함할 수 있다. 이미지 계층은 읽기 전용 계층으로 다른 컨테이너와 공유할 수 있다. 그리고 다른 계층과 공유된 이미지를 컨테 이너 계층에서 여러 개로 동작 시킬 수 있다. 그리고 통합 접근 영역은 컨테이너 계층과 이미지 계층의 모든 파일 시스템에 접근 가능한 계층의 링크 정보가 포함된 사용자 디렉토리가 저장되고 사용자에게 공유된다. 이를 통해 사용자는 파일 접근이 가능하다. 이미지 계층은 서로 다른 여러 시스템과 공유 함으로서 그 효율성을 높일 수가 있다. 도 4에 도시된 바와 같이 이미지 계층의 컨테이너 이미지는 컨테이너 배포시 이미지를 공용 레포지터리(예:github)에서 풀링해야 된다. 이 때, 이미지 계층의 컨테이너 이미지는 성능 보장을 위하여 컨테이너 시스템에서 사용하는 이미지가 로컬에 보관되거나 사전에 가져다 놓은 방법이 효율적이다. 본 발명에서는 이미 풀링한 이미지를 제사용 하기 위하여 공유 스토리지에 보관할 수 있다. 상기에서 설명한 바와 같이 이미지 계층의 많은 이미지들은 인메모리 컨테이너 스토리지 상에 존재하고, 전체 시스템의 컨테이너 이미지는 백업을 진행하여 디스크 스토리지 혹은 원격 스토리지에 저장될 수 있다. 이 때, 저장된 컨테이너 이미지는 이미지 계층에 추가될 수 있다. 그러면 컨테이너 계층에도 사용가능하고 통합 접근 영역에서 지속적으로 이미지들이 제공될 수 있다. 도 7은 본 발명의 일실시예에 따른 인메모리 컨테이너 스토리지의 이미지 공유 환경을 나타낸 도면이다. 도 7을 참조하면, 본 발명의 일실시예에 따른 인메모리 컨테이너 스토리지의 이미지 공유 환경을 나타낸 것을 알 수 있다. 공유 스토리지는 네트워크 파일 스토리지 일 수도 있고(SAN, NAS 등) 로컬 디스크 내에 연결된 스토리지 일 수 도 있다. 이 때, 저장된 컨테이너 이미지는 사용자의 요청에 의하여 사용자에게 제공될 수 있다. 인메모리 컨테이너 스토리지 관리부는 사용자에게 공유 데이터를 제공할 수 있다. 이 때, 인메모리 컨테이너 스토리지 관리부는 컨테이너 파일 시스템 계층 관리 모듈을 통하여 공유 스토리 지의 공유 관리 기능을 제공하고 사용자에게 파일 공유를 위한 영역을 개별적으로 구성하여 제공할 수 있다. 도 8은 본 발명의 일실시예에 따른 위한 인메모리 컨테이너 스토리지를 가지는 Node에서 사용자 공유 환경을 나 타낸 도면이다. 도 8을 참조하면, 인메모리 컨테이너 스토리지에서 구성되는 사용자(tenant)에 따른 스토리지 구성과 공유 데이 터 제공을 위한 인메모리 컨테이너 스토리지를 가지는 Node에서 사용자 공유 환경에 대한 구조를 나타낸 것을 알 수 있다. 도 8에 도시된 사용자 공유 환경의 데이터 공유 기법은 모든 데이터를 공유하는 것보다 보안상 공유 데이터를 사용하는 그룹에 따라 공유하고 싶은 데이터를 구별하기 위하여 테넌트 접근 방법을 제공하는 것을 알 수 있다. 이 때, 사용자의 요청에 따라 사용자의 디렉토리 (/sharedData/tenentA)를 생성하고 컨테이너 계층으로 사용자 의 디렉토리(/sharedData/tenentA) 밑에 상부(upper) 디렉토리를 생성하고 맵핑할 수 있다. 이 때, 파일시스템 관리를 위하여 사용자의 데이터는 deduplication된 데이터를 사용하는 것을 알 수 있다. 상기 사용자의 디렉토리 밑에 생성된 상부(upper) 디렉토리는 컨테이너 계층에 포함되고 사용자의 접근에 따라 이미지 계층의 수정 내역에 대한 차분 정보를 사용자 별로 저장할 수 있다. 그리고 워크(work) 디렉토리도 사용 자의 디렉토리 밑에 생성하여 맵핑되는 것을 알 수 있다. 워크(work) 디렉토리는 컨테이너 계층의 사용자 데이 터 저장 영역에 해당될 수 있다. 이미지 계층은 사용자의 디렉토리 밑에 제1 하부(lower) 디렉토리(lowerdir1=/sharedData/tenantA/base/File1- Link, File2-Link)를 상부(upper) 디렉토리와 연계하여 상기 공유 스토리지에 저장된 파일 중 사용자가 선택한 파일에 대해서만 링크 정보가 배치될 수 있다. 또한, 이미지 계층은 최하위 제2 하부(Lower) 디렉토리(lowerdir2=/sharedData/base/File1-Link, File2-Link쪋 FileN-Link/)를 포함하고, 제2 하부 디렉토리는 공유 스토리지의 모든 파일 링크를 저장하고 있는 관리 포인트 로, 공유 스토리지 base 디렉토리(/sharedData/base)로 설정될 수 있다. 그리고 파일의 관리를 위해 사용자가 필요한 파일을 선택하도록 관리 시스템으로 노출시킬 수 있다. 이 과정을 통하여 사용자는 자신이 선택한 파일 만 하위 시스템을 통하여 볼 수 있다. 통합 계측 영영는 사용자가 자신에게 공유된 사용자 디렉토리를 통하여 파일 공유를 요청한 파일을 공유 받을 수 있고 lower 디렉터리들은 항상 불변의 상태를 유지할 수 있다. 즉, lower 디렉터리들은 읽기 전용으로 사용 될 수 있다. 이는 공유 받은 파일을 여러 사람이 공유할 때 쓰기 방지에 대한 방법으로 효율적이다. 또한, lower 디렉터리들의 파일에 변경 사항이 발생할 경우, upper 디렉토리에 변경 사항을 기록하기 때문에 전 체적인 공유 파일 관리에 있어서도 효율적이다. 도 9는 도 4에 도시된 인메모리 컨테이너 스토리지 관리부의 일 예를 세부적으로 나타낸 블록도이다. 도 9를 참조하면, 인메모리 컨테이너 스토리지 관리부는 컨테이너 파일 시스템 계층 관리 모듈, 인메모리 컨테 이너 스토리지 생성 관리 모듈, 인메모리 스토리지 공유 관리 모듈 및 인메모리 컨테이너 스토리지 엔진 관리 모듈을 포함할 수 있다. 컨테이너 파일 시스템 계층 관리 모듈은 컨테이너 파일 시스템의 현재 상태 및 구동 상태를 모니터링 할 수 있 다. 이 때, 컨테이너 파일 시스템 계층 관리 모듈은 인메모리 컨테이너 스토리지를 사용할 경우 컨테이너 시스템의 생성 및 상태를 관리할 수 있다. 인메모리 컨테이너 스토리지 생성 관리 모듈은 사용자의 요청에 의해 컨테이너를 인메모리 형태로 구성할 때, 인메모리 컨테이너 스토리지를 생성할 수 있다. 이 때, 인메모리 컨테이너 스토리지 생성 관리 모듈은 인메모리 컨테이너 스토리지가 생성되면 컨테이너 파일 시스템 계층 관리 모듈이 시스템의 컨테이너 파일 시스템을 생성할 수 있다. 인메모리 컨테이너 스토리지 공유 관리 모듈은 사용자의 요청에 따라 이미지 계층을 공유하도록 스토리지 간의 공유 파일 시스템을 생성하고 이를 동기화할 수 있다. 이 때, 인메모리 컨테이너 스토리지 공유 관리 모듈은 이미지 계층의 링크 정보를 하나의 시스템에 병합하고 이 를 동기화 할 수 있다. 인메모리 컨테이너 스토리지 엔진 관리 모듈은 시스템의 인메모리 컨테이너 스토리지 드라이버를 구동하고 생성 하며, 드라이버에 대한 상태를 모니터링할 수 있다. 도 10은 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지 관리 방법을 나타낸 동작흐름도이다. 도 11은 도 10에 도시된 디렉토리 생성 단계의 일 예를 세부적으로 나타낸 동작흐름도이다. 도 10을 참조하면, 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지 관리 방법은 먼저 사용자로부 터 공유 스토리지에서 공유 받을 파일을 요청받을 수 있다(S310). 이 때, 단계(S310)는 상기 인메모리 기반 컨테이너 스토리지를 할당에 대한 사용자 요청을 수신할 수 있다. 이 때, 상기 인메모리 기반 컨테이너 스토리지 관리 장치는 애플리케이션 가상화를 제공하는 컨테이너를 저장하 는 컨테이너 파일 시스템을 포함하고. 상기 컨테이너 파일 시스템은 통합 접근 계층, 컨테이너 계층 및 이미지 계층을 포함할 수 있다. 이 때, 이미지 계층은 상기 링크 정보가 저장된 하부 디렉토리를 포함할 수 있다. 이 때, 컨테이너 계층은 상기 사용자의 접근에 따라 상기 이미지 계층의 수정 내역에 대한 차분 정보를 저장하 는 상부 디렉토리를 포함할 수 있다. 이 때, 통합 접근 계층은 상기 컨테이너 계층을 통해 상기 이미지 계층의 상기 링크 정보에 접근하여 상기 사용 자가 요청한 상기 파일들을 공유 받는 사용자 디렉토리를 포함할 수 있다. 또한, 단계(S320)는 사용자로부터 파일 공유를 제공받을 파일을 선택받을 수 있다. 또한, 단계(S330)는 사용자가 파일 공유을 제공받을 사용자인지, 파일 공유를 제공하는 제공자인지 확인할 수 있다. 이 때, 단계(S330)는 사용자가 파일 공유를 제공받을 사용자인 경우, Lower 디렉토리로 이동할 수 있고(S340). 사용자가 파일 공유를 제공하기 위한 제공자인 경우 공유 스토리지 파일을 전송할 수 있다(S350). 도 9를 참조하면, 단계(S340)는 사용자가 최초 사용자인지 여부를 확인할 수 있다(S341). 이 때, 단계(S340)는 사용자가 최초 사용자인 경우, 사용자 디렉토리를 생성하고(S342), 관련 디렉토리들 (upper, work, lower 및 merged)을 생성하고(S343), 전체 환경을 마운트하고(S344), 사용자의 Lower 디렉토리 로 이동 할 수 있다(S345). 이 때, 단계(S340)는 사용자가 최초 사용자가 아닌 경우, 사전에 생성된 사용자의 디렉토리에 있는 Lower 디렉 토리로 바로 이동할 수 있다(S345). 또한, 단계(S360)는 이동한 사용자의 Lower 디렉토리에서, 공유 스토리지 base 디렉토리로부터 사용자가 파일 공유를 요청한 공유 파일에 대한 링크 정보를 생성할 수 있다. 이 때, 단계(S360)는 링크 정보를 이용하여 사용자가 요청한 파일을 공유할 수 있다. 또한, 단계(S350)는 사용자가 파일 공유를 제공하기 위한 제공자인 경우, 공유 스토리지에 공유하기 위한 공유 파일을 사용자 디렉토리에 업로드할 수 있다. 이 때, 단계(S360)는 공유 스토리지 Base 디렉토리로 이동하여 사용자 디렉토리에 업로드한 공유 파일에 대한 링크 정보를 생성할 수 있다. 즉, 단계(S360)는 상기 사용자의 요청에 따라 상기 컨테이너 계층과 상기 이미지 계층 내의 파일들의 링크 정보 를 애플리케이션에 제공하고 상기 애플리케이션이 상기 파일들에 접근하도록 허용할 수 있다. 도 12는 본 발명의 일실시예에 따른 협업 서비스를 위한 클러스터 간의 서비스 연결 구조를 나타낸 도면이다. 도 12를 참조하면, 엣지 컴퓨팅은 엣지 컴퓨팅 서비스를 원활하게 제공하고, 대용량 데이터의 처리 및 분산 환 경의 효율성을 극대화할 수 있다. 이를 위하여, 엣지 컴퓨팅은 클라우드 엣지 간의 수평적인 분산 환경 및 클라우드 엣지와 코어 클라우드간 수직 분산 환경에 대한 고려 사항이 엣지 컴퓨팅의 협업 기능을 제공하기 위한 필수적인 요구사항이 될 수 있다. 엣지 컴퓨팅은 분산 환경에 적용되는 서비스가 클러스터를 넘어 지역적인 분산 배치 및 고속 네트워크의 연결을 위하여서는 클러스터 간의 상호 연결 및 고속 분산 배치 기술이 필수적이다. 그러므로, 엣지 컴퓨팅은 클라우드 엣지 시스템의 다중 클러스터 노드 상 네트워크 연결 기능과 이에 대한 인터페이스를 포함할 수 있다. 그리고, 엣지 컴퓨팅은 네트워크 연결 기능과 함께 빠른 데이터 이동 및 저장소를 연동하기 위한 기능을 포함할 수 있다. 도 12에 도시된 바와 같이, 서비스 연결 구조는 코어-엣지, 엣지-엣지 간 연계하기 위하여 다중 클러스터 상의 네트워크 연결 기능을 나타낸 것을 알 수 있다. 네트워크 연결 기능은 클라우드 엣지의 이동형 서비스에 따른 근접 엣지의 사용 및 무중단 서비스를 위하여 서 로 다른 네트워크를 연계할 수 있다. 본 발명의 클러스터는 다중 클러스터를 네트워크로 연계하기 위하여 고속의 게이트웨이(Gateway Engine) 기능과 클러스터 내부에 인식을 위한 기본 라우팅(Route engine) 기능을 제공할 수 있다. 게이트웨이 및 라우터는 클러 스터 상의 관리 기능으로 글로벌 스케쥴러를 통하여 지역적으로 배포가 가능하다 고속의 게이트웨이는 다중 클러스터를 고속으로 연계 운용하기 위한 네트워크 연결 방식으로 두 네트워크간의 터널링을 이용하여 연계할 수 있다. 터널링의 효과는 페이로드를 터널링 구간에서 캡슐화 되고 특정 프로토콜을 사용하여 신뢰성 있는 데이터 전송 을 보장할 수 있다. 터널링은 인터넷의 7 계층(Layer)에서 L7, L3, L2 계층에 적용될 수 있다. 저수준의 계층의 터널링을 지원할수록 상위 레이어에서 사용하는 많은 프로토콜을 그대로 사용할 수 있고 성능 또한 빠르다. 본 발명에서는 L3의 터널링을 이용하여 두 클러스터를 연계할 수 있다. 그리고 이렇게 연결된 터널링에 사용되는 프로토콜은 처리 속도를 향상시키기 위하여 커널 바이패스를 위한 사용자 수준의 네트워크 드라이버(DPDK(Data Plane Development Kit))를 사용하여 터널링 네트워크와 연결할 수 있다. 그리고 마스터 노드와 워커 노드 간의 인터페이스는 터널링 인터페이스와 브리지를 통하여 연결되고 기존의 오버레이 네트워크로 구성된 네트워크와 연결될 수 있다. 고속 게이트 웨이 엔진 기능은 사용자 수준의 네트워크 드라이버를 활용한 L3 계층의 다중 클러스터 터널링 기 능을 수행할 수 있다. 글로벌 공유 캐쉬 기능은 메모리 기반 저장소를 활용한 네트워크 기반 스토리지 시스템을 활용하여 고속의 공유 스토리지를 만든 후 로컬 공유 캐쉬와 연계하여 데이터를 공유할 수 있다. 이 때, 글로벌 공유 캐쉬 기능은 마 스터 노드에 있는 스토리지를 네트워크 기반 공유 스토리지로 활용할 수 있다. 커널 바이패스 지원 네트워크 스택 구성 기능은 커널 바이패스를 위한 라이브러리, 장치 관리 및 구성 관리 기 능(예: DPDK 하드웨어 지원 스택)을 포함할 수 있다. 사용자 수준 네트워크 드라이버 관리 기능은 사용자 수준의 네트워크 드라이버를 배포, 연결 및 관리하기 위한 CLI 기능(응용단에서 제공되는 네트워크 드라이버, 예: Cisco FD.io 등)을 포함할 수 있다. 라우터 에이전트 기능은 모든 노드에서 실행되고 다른 클러스터에서 동기화된 Endpoint resources를 사용하여 경로를 구성하고 전체 클러스터 간 연결을 활성화할 수 있다. 이 때, 라우터 에이전트 기능은 Iptable의 규칙을 설정할 수 있다. 이는 게이트웨이 엔진과 연결되어 통신하기 위하여 게이트웨이 엔진의 라우팅 테이블을 가지게 될 수 있다. 도 13은 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 도면이다. 도 13을 참조하면, 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 것을 알 수 있다. 본 발명의 일실시예에 따른 스케줄러들은 동적으로 정책 설정이 가능한 스케줄러, 로그 데이터 분석을 통한 지 능형 스케줄러, 스케줄링 정책 변경에 따른 비용 최소화, 대기 및 연 시간 최소화된 스케줄러들을 포함할 수 있 다. 본 발명의 일실시에에 따른 스케줄러의 작업 대상은 모놀리틱 응용이나 마이크로 서비스를 실행하기 위한 상주 형 컨테이너와 서비스형 함수(FaaS)의 실행을 위한 비상주형 컨테이너를 포함할 수 있다. 본 발명의 일실시예에 따른 스케줄러들은 도 13에 도시된 바와 같이 상기에서 언급한 3 Locations에 해당하는 글로벌 엣지 스케줄러와 3가지 스케줄러들(112, 113, 114)과 글로벌 엣지 스케줄러를 포함한 4가지 스케줄 러들로 구성될 수 있다. 글로벌 엣지 스케줄러는 마스터 엣지 스케줄러, 이웃 엣지 스케줄러 및 클라우드 스케줄러(11 4)를 연동하기 위한 스케줄러에 상응할 수 있으며 지능형 스케줄링 장치에 포함된 글로벌 스케줄러에 상응할 수도 있다. 마스터 엣지 스케줄러는 주요 서비스가 실행되는 엣지(마스터 엣지) 시스템에 포함된 스케줄러에 상응 할 수 있다. 이웃 엣지 스케줄러는 마스터 엣지 주변에 존재하는 이웃 엣지 시스템에 포함된 스케줄러에 상응할 수 있다. 클라우드 스케줄러는 공용/개인용 클라우드에 포함된 스케줄러에 상응할 수 있다. 도 14는 도 13에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러로 구성한 일 예를 나타낸 도면이 다. 본 발명의 일실시예에 따른 스케줄러들의 구성 엣지 서비스에서 수평적/수직적 협업을 시스템 수준에서 적용할 수 있다. 이를 위해, 본 발명의 일실시예에 따른 스케줄러들은 LEVELED 스케줄러와 같은 직렬적 연결 구성과SHARED 스케줄러와 같은 병렬적 연결 구성을 제공할 수 있다. LEVELED 스케줄러는 스케줄러들의 순차적 처리를 위한 직렬적 연결 구성이고, SHARED 스케줄러는 스케줄러들이 서로 경쟁하여 최적의 조건을 찾는 병렬적 연결 구성일 수 있다. 도 14를 참조하면, LEVELED 스케줄러 구성의 일 예를 나타낸 것을 알 수 있고, 마스터 엣지 스케줄러, 이 웃 엣지 스케줄러 및 클라우드 스케줄러 순으로 직렬적 연결 구성인 3 LEVELED 스케줄러를 나타낸 것 을 알 수 있다. 예를 들어, 글로벌 엣지 스케줄러는 1 Level인 첫번째 마스터 엣지 스케줄러를 통하여 자원 할당이 성공하면 2, 3 Level 스케줄러의 실행은 생략할 수 있다. 그러나, 글로벌 엣지 스케줄러는 1 Level인 첫번 째 마스터 엣지 스케줄러에서 자원 할당이 실패한다면, 순차적으로 다음 단계인 2 Level 스케줄러인 이웃 엣지 스케줄러 또는 3 Level 인 클라우드 스케줄러로 작업을 순차적으로 전달할 수 있다. 서비스 개 발자는 이러한 LEVELED 스케줄러를 사용하여 시스템 레벨에서 엣지 서비스의 부하 분산과 서비스 간 협업을 적 용할 수 있다. 도 15는 도 13에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러와 SHARED 스케줄러를 결합한 복 합적 구성의 일 예를 세부적으로 나타낸 도면이다. 도 15를 참조하면, LEVELD 스케줄러와 SHARED 스케줄러가 결합된 복합적 구성을 나타낸 것을 알 수 있다. 이 때, 2 Level로 구성된 LEVELED 스케줄러이면서 2 Level에서 이웃 엣지 스케줄러와 클라우드 스케줄러 간에 SHARED 스케줄러로 구성한 것을 알 수 있다. SHARED 스케줄러는 2개 이상의 스케줄러에 작업을 동시에 요청하여 각 스케줄러로부터 후보들을 받아서 그 중에 가장 적합한 스케줄러를 선택할 수 있다. 예를 들어, 1 Level인 첫 번째 마스터 엣지 스케줄러에서 자원 할당이 실패한다면, 글로벌 엣지 스케줄러 는 2 Level 스케줄러에서 이웃 엣지 스케줄러와 클라우드 스케줄러가 경쟁모드로 작업을 동시에 요청하고, 각 스케줄러들로부터 후보들을 받아서 가장 적합한 스케줄러를 선택할 수 있다. 도 16은 본 발명의 일실시예에 따른 지능형 스케줄러의 처리 흐름을 나타낸 블록도이다. 도 17은 도 16에 도시 된 지능형 스케줄러의 처리 흐름에서 이어진 엣지, 이웃 엣지 및 클라우드에서의 처리 흐름을 나타낸 블록도이 다. 도 16을 참조하면, 먼저 클라이언트로부터 요청받은 컨테이너를 워커 노드에 생성 및 실행하는 것을 알 수 있다(S410). 즉, 단계(S410)는 클라이언트가 컨테이너 생성에 해당하는 REST API를 글로벌 스케줄러(110a)에 호출할 수 있다. 또한, 단계(S420)는 글로벌 스케줄러(110a)가, 호출된 REST API에 해당하는 글로벌 스케줄러 핸들러(120a)를 실 행시킬 수 있다. 또한, 단계(S430)는 글로벌 스케줄러 핸들러(120a)가 요청된 데이터를 요청 큐 관리기(130a)에 송신할 수 있다. 또한, 단계(S440)는 요청 큐 관리기(130a)가 요청된 데이터를 요청 큐에 저장할 수 있다. 또한, 단계(S450)는 글로벌 스케줄러 제어기(140a)가, 요청 큐로부터 우선 순위를 고려하여 처리할 데이터 를 가져올 수 있다. 또한, 단계(S460)는 글로벌 스케줄러 제어기(140a)가, 글로벌 스케줄러 작업 쓰레드(150a)에 복수의 작업 쓰레 드들을 생성하고, 글로벌 스케줄러 작업 쓰레드(150a)에 처리할 데이터를 전달하여 작업 큐 스케줄링 작업을 실 행할 수 있다. 또한, 단계(S470)는 글로벌 스케줄러 작업 쓰레드(150a)가, 요청된 작업을 분석하고 해당하는 클러스터(10, 20, 30)에 요청할 메시지를 작업 메시지 큐 관리기(160a)에 전달할 수 있다. 또한, 단계(S480)는 작업 메시지 큐 관리기(160a)가, 전달된 메시지를 작업 메시지 큐에 저장할 수 있다. 도 17을 참조하면, 단계(S490)는 글로벌 스케줄러 에이전트가 작업 메시지 큐로부터 엣지 시스템 또는 이웃 엣지 시스템에 해당하는 메시지가 있는지 체크하고, 해당되는 메시지를 가져올 수 있다.또한, 단계(S491)는 글로벌 스케줄러 에이전트가. 가져온 메시지를 분석하여 자신의 엣지 API 서버에게 해당 API 호출할 수 있다. 또한, 단계(S492) 및 단계(S493)는 엣지 스케줄러가 워커 노드들에 있는 워커 에이전트들을 통하여 요청한 컨테 이너를 생성 및 실행할 수 있다. 도 18는 도 17에 도시된 작업 큐 스케줄링 단계의 일 예를 세부적으로 나타낸 동작흐름도이다. 도 18을 참조하면, 도 17에 도시된 상기 단계(S460) 내지 단계(S480)에서 작업 큐 스케줄링 단계에서, 작업 큐 에서 작업에 대한 스케줄링이 요청됐지만, 반복적으로 실패한 요청에 대한 작업을 우선적으로 처리하고, 우선순위 옵션을 갖는 요청이 기본 스케줄링 요청보다 우선으로 처리하기 위해 작업 큐를 3단계로 나누어 처리하는 세부적인 단계를 나타낸 것을 알 수 있다. 3단계 작업 큐는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이 스 큐(Base Queue)를 포함할 수 있다. 첫 번째 프런트 큐(First Front Queue)는 반복적으로 실패한 요청에 대한 우선으로 처리하기 위한 큐이다. 두 번째 프런트 큐(Second Front Queue)는 기본 스케줄링 요청보다 우선으로 처리하는 큐이다. 엣지 스케줄러 정책 실행기의 3단계 작업 큐의 처리는 아래와 같은 규칙으로 처리한다. 먼저, 단계(S410a)는 요청된 데이터에 우선순위 옵션(FAST Option)이 있는지 조사하고, 우선순위 옵션이 존재하 는 경우, 두 번째 프런트 큐에 데이터를 저장하고(S420a), 우선순위 옵션이 존재하지 않는 경우, 베이스 큐에 저장할 수 있다(S430a). 단계(S440a)는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이스 큐 (Base Queue)에 저장된 데이터를 작업 큐에 저장할 수 있다. 단계(S450a)는 첫 번째 프런트 큐(First Front Queue), 두 번째 프런트 큐(Second Front Queue), 베이스 큐 (Base Queue)의 순으로 큐에 데이터가 있는지 조사하여 각 큐로부터 기설정된 개수(N*)씩 순서대로 스케줄링 작 업 큐에 생성하여 스케줄링 작업을 처리할 수 있다. 단계(S460a)는 스케줄링이 성공한 경우, 작업 큐 처리 절차를 종료하고, 스케줄링이 실패한 경우, 각 요청의 실 패한 횟수(Fail_Num)를 1 증가시키고(S470a), 실패한 횟수가 기설정된 실패 횟수(K*) 이상인지 판단하고 (S480a), 기설정된 실패 횟수(K*) 이상인 경우, 첫번째 프런트 큐(First Front Queue)에 저장할 수 있다 (S500a). 이 때, 단계(S480a)는 기설정된 실패 횟수(K*) 미만이고, 우선순위 옵션이 존재하는 경우에는 두 번째 프런트 큐(Second Front Queue)에 데이터를 저장하고(S420a), 우선순위 옵션이 존재하지 않는 경우에는 베이스 큐에 데 이터를 저장할 수 있다(S430a). 도 18에 도시된 작업 큐의 스케줄링 단계는 3단계 작업 큐에 모든 요청 데이터가 없을 때까지 반복하고 데이터 가 없으면 대기할 수 있다. 도 19는 본 발명의 일실시예에 따른 지능형 스케줄러에 기반한 서비스의 분산 협업을 위한 동적 배치를 나타낸 도면이다. 도 19를 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄러의 스케줄러들은 고정적 스케줄러가 아닌 지능형 스케줄러로 제공될 수 있다. 본 발명의 일실시예에 따른 지능형 스케줄러는 클라우드, 엣지 시스템 및 이웃 엣지 시스템에 대한 실시간 모니터링 데이터 및 로그를 수집하고 수집된 데이터를 딥 러닝과 같은 AI 분석을 통하여 다양한 서 비스를 지능형 스케줄러로 동적 배치하는 지능형 분석기를 더 포함할 수 있다. 지능형 분석기는 인공지능 트레이닝을 통하여 지능형 스케줄러 정책을 도출할 때 많은 히스토리 데이터가 필요할 수 있다. 이 때, 지능형 분석기는 엣지 서비스 시스템을 구축하고 바로 인공지능 트레이닝은 불가능하지만, 일정 기 간 히스토리 데이터를 수집한 후에는 엣지 스케줄러 정책을 트레이닝할 수 있다.도 20은 본 발명의 일실시예에 따른 지능형 분석기를 포함하는 지능형 스케줄러를 나타낸 블록도이다. 도 20을 참조하면, 본 발명의 일실시예에 따른 지능형 스케줄러에 포함되는 지능형 분석기를 세부적으로 나타낸 것을 알 수 있다. 지능형 분석기는 엣지 응용별 정보 수집기, 엣지 클러스터 정보 수집기, 엣지 스케줄러 정책 실행기, 엣지 스케줄러 정책 플랜너, 엣지 스케줄러 정책 평가기, 엣지 스케줄러 정책 로그 기 및 엣지 스케줄러 정책 트레이너를 포함할 수 있다. 지능형 분석기는 엣지 스케줄러 정책 메타데이터 저장소 및 엣지 스케줄러 정책 로그 데이터 저장소 에 메타데이터 및 스케줄러 정책 로그를 저장할 수 있다. 엣지 스케줄러 정책(Edge Scheduler Policy) 메타데이터 저장소는 엣지 스케줄러 정책(ESP)을 저장할 수 있다. 엣지 스케줄러 정책 로그 데이터 저장소는 엣지 스케줄러 정책 로그기를 통하여 엣지 스케줄러 정책을 적 용한 결과를 저장할 수 있다. 엣지 응용별 정보 수집기는 엣지에서 구동되는 응용별로 응답속도, CPU 실사용률, 메모리 실사용률, 기타 자원사용 상태 등의 리소스 정보를 수집할 수 있다. 엣지 클러스터 정보 수집기는 클러스터를 구성하는 물리적 노드별 CPU 실사용률, 메모리 실사용률 등의 리소스 정보를 수집할 수 있다. 엣지 스케줄러 정책 실행기는 여러 엣지 스케줄러 정책을 적용한 후 최적화 정도에 따른 평가하여 가장 좋은 정책을 실행할 수 있다. 엣지 스케줄러 정책 플랜너는 엣지 응용별 정보 수집기와 엣지 클러스터 정보 수집기로부터 수집한 정보를 기반으로 정책을 계획을 수립할 수 있다. 엣지 스케줄러 정책 평가기는 엣지 스케줄러 정책을 적용한 후 최적화 정도에 따른 스케줄러 정책을 평가 할 수 있다. 엣지 스케줄러 정책 로그기는 실행된 스케줄러 정책과 그 결과를 로그로 저장할 수 있다. 엣지 스케줄러 정책 트레이너는 엣지 스케줄러 정책 로그 데이터 저장소로부터 히스토리 데이터를 가져와 스케줄러 정책을 트레이닝 할 수 있다. 도 21은 본 발명의 일실시예에 따른 지능형 스케줄러의 최적화 흐름을 나타낸 블록도이다. 도 21을 참조하면, 지능형 스케줄링의 핵심은 최소비용으로 최적화하는 방법과 최대한 빠른 속도로 최적화하는 방법을 모두 제공할 수 있다. 먼저, 단계(S510a)는 엣지 응용별 정보 수집기와 엣지 클러스터 정보 수집기를 통하여 컨테이너 플 렛폼의 정보를 수집할 수 있다. 단계(S520a)는 엣지 스케줄러 정책 플랜너가 단계(S510)에서 수집된 정보를 바탕으로 엣지 스케줄러 정책 메타데이터 저장소로부터 정책을 선정할 수 있다. 단계(S530a)는 컨테이너 플렛폼의 부하 정도와 같은 리소스 정보에 기반하여 ESP 적용 비용 최소화 타입, ESP 적용 최적화 타입 중 하나를 선택할 수 있다. 단계(S531)는 ESP 적용 비용 최소화 타입으로, 엣지 스케줄러 정책 실행기를 통하여 컨테이너들을 할당할 수 있다. 단계(S533)는 ESP 적용 최적화 타입으로, 엣지 스케줄러 정책을 적용전과 적용한 후에 대한 상대 비교를 통하여 스케줄러 정책을 평가할 수 있다. 단계(S532)는 ESP 적용 최적화 타입으로, 엣지 스케줄러 정책 실행기를 통하여 컨테이너들을 할당할 수 있다. 단계(S534)는 ESP 적용 비용 최소화 타입으로, 엣지 스케줄러 정책을 적용전과 적용한 후에 대한 상대 비교를 통하여 스케줄러 정책을 평가할 수 있다.단계(S560)는 최종적으로 선택된 엣지 스케줄러 정책을 비적용 부분이 없도록 스케줄러들 전체에 적용할 수 있 다. 단계(S570)는 엣지 스케줄러 정책 로그기를 통하여 스케줄러 정책 평가 결과를 엣지 스케줄러 정책 로그 데이터 저장소에 저장할 수 있다. 단계(S580)는 엣지 스케줄러 정책 트레이너가, 엣지 스케줄러 정책 로그데이터 저장소에 저장된 엣 지 스케줄러 정책 로그데이터를 수집할 수 있다. 단계(S590)는 엣지 스케줄러 정책 트레이너가, 스케줄러 정책 트레이닝을 수행하여 최적화된 지능형 스케 줄러 정책을 생성할 수 있다. 도 22는 본 발명의 일실시예에 따른 분산 클라우드 시스템에서 리스크 관리를 위한 서비스 마이그레이션을 나타 낸 도면이다. 도 22를 참조하면, 실시간으로 서비스를 재배포하고 지속적인 서비스를 유지하기 위해 분산 클라우드 시스템에 서의 마이그레이션 서비스를 제공할 수 있다. 리소스 희소성, 장애 및 비용 효율성을 고려하여 엣지 클라우드 간 또는 엣지 클라우드와 다른 클라우드 간 마이그레이션을 수행할 수 있다. 분산 클라우드 시스템은 에지 클라우드에 대한 사용자 요청을 수신하여 분산 클라우드 시스템을 제어하도록 할 수 있다. 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함할 수 있다. 이 때, 분산 클라우드 시스템은 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업 이 상기 처리된 작업의 결과를 취합할 수 있다. 이 때, 분산 클라우드 시스템은 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 것을 포함하는 명령 어들을 수행할 수 있다. 여기서, 상기 명령어들은 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행할 수 있다. 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함할 수 있다. 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장할 수 있다. 이 때, 분산 클라우드 시스템은 상기 메모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 분산 클라우드 시스템은 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포 인트 저장소에 저장하는 마이그레이션을 수행할 수 있다. 그리고, 엣지 클라우드는 가장 중요한 모빌리티 서비스를 지원하기 위한 엣지 클라우드의 근접 서비스에도 무중 단 서비스를 제공할 수 있다. 따라서, 분산 클라우드 시스템 및 분산 클라우드 시스템의 데이터 처리 방법은 분 산 클라우드의 장애 극복 방안으로 컨테이너 또는 가상머신 기반 애플리케이션 마이그레이션 기능을 제공할 수 있다. 분산 클라우드의 클라우드 컴퓨팅 제공자(CC-DCMP)는 글로벌 스케줄링 기능과 글로벌 리소스 관리 기능을 제공할 수 있다. 클라우드 컴퓨팅 제공자는 마이그레이션 기능을 수행하기 위해서 단일 클러스터뿐만 아니라 여러 클러스터 간의 서비스 이전을 위해 클러스터 간 마이그레이션과 서로 다른 클라우드 간의 마이그레이션 기능을 관리할 수 있다. 이는 Service Broker에서 수행되며 각 서비스의 상태가 대상 응용 프로그램으로 전송될 수 있다. 이 때, 서비스 마이그레이션 제공 장치인 엣지 컴퓨팅 시스템(520, 530)은 전송 가능한 형식으로 애플리케이션 의 상태를 실시간으로 캡처하고 이를 스냅샷 형태로 저장할 수 있다. 기본적으로 분산 클라우드 글로벌 관리에서는 DCMP에 의해 스케줄러가 애플리케이션을 노드에 할당하고 컨트롤 러가 게이트웨이를 통해 노드와 통신하여 애플리케이션을 생성, 삭제 또는 업데이트할 수 있다. 이 때, 게이트웨이는 클러스터 간 네트워크를 연결하는 제어 기능을 담당할 수 있다. 각 노드에서 애플리케이션을 유지 관리하고 컨테이너 또는 가상 머신을 생성하는 제어 작업만 대상 노드 자체에 상주하는 개별 에이전트에 의해 수행될 수 있다. 엣지 컴퓨팅 시스템(520, 530)은 마이그레이션 컨트롤러를 통해 전반적인 마이그레이션 기능을 제공할 수 있다. 엣지 컴퓨팅 시스템(520, 530)은 애플리케이션의 상태를 유지하는 스냅샷(체크포인트 이미지)이 있는 경우 노드 간에 스냅샷을 전송할 수 있다. 이를 위해서, 엣지 컴퓨팅 시스템(520, 530)은 빠른 데이터 공유 기능을 포함한 저장 기능을 제공할 수 있다. 따라서, 엣지 컴퓨팅 시스템(520, 530)은 노드와 포드 간의 데이터 전송을 줄이기 위해 공유 고속 스토리지 메 커니즘을 활용하고 오케스트레이션 계층에서 고속 네트워크 연결을 활용할 수 있다. 시스템 장애에 대한 마이그레이션은 클라우드 서비스 제공(Cloud Service Provider, CSP)자에 의해 제공될 수 있다. 마이그레이션은 서비스 마이그레이션과 애플리케이션 마이그레이션이 포함될 수 있다. 애플리케이션 마이그레이션은 EC에서 애플리케이션 상태 확인, 대상 노드의 네트워크 확인, 애플리케이션의 현 재 상태를 스냅샷 이미지로 저장, 복원할 위치에서 이미지를 복원하는 제어 프로세스가 포함될 수 있다. 서비스 마이그레이션은 프록시 서비스를 통해 이전 노드 및 IP에서 이동한 노드 및 IP 주소와 연결하는 기능이 포함될 수 있다. CSP는 서비스 마이그레이션을 위해 다른 클라우드 리소스를 사용하여 네트워크 연결을 제공할 수 있다. 네트워크 연결은 분산 클라우드 간 연결을 위한 게이트웨이를 통한 고속 연결 방식을 포함할 수 있다. 고속 연결 방법은 IPsec 터널링과 같은 터널링을 사용하는 전용 및 직접 네트워크 연결 또는 네트워크 프록시를 통한 경로 우회가 포함될 수 있다. 각 클라우드는 단일 클러스터 또는 다중 클러스터로 구성될 수 있다. CSP에서 서비스 마이그레이션을 위한 데이터 관리를 제공할 수 있다. 서비스 마이그레이션을 위한 데이터 관리는 공유 고속 스토리지 또는 캐시 메커니즘을 활용하여 노드 간 스냅샷 (예: 체크포인트) 전송을 줄일 수 있다. 서비스 마이그레이션을 위한 데이터 관리는 마이크로 서비스 및 가상 머신을 사용한 데이터 관리와 데이터 스토 리지 배포가 포함될 수 있다. 로드 밸런싱, 시스템 장애 및 클라우드 서비스 고객(Cloud Service Customer, CSC) 정책의 경우 DCMP가 CSC의 애플리케이션 및 데이터를 검색하여 분산 클라우드의 사용 가능한 리소스로 마이그레이션 할 수 있다. 도 23은 본 발명의 일실시예에 따른 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 장치를 나타낸 블록 도이다. 도 23을 참조하면, 본 발명의 일실시예에 따른 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 장치 는 안정적으로 컨테이너 상태를 전송 가능한 형식으로 실시간 캡처할 수 있다. 포드는 단일 컨테이너 일수도 있고 다중 컨테이너로 구성될 수 있다. 이러한 각 컨테이너의 상태는 소스 포드에 서 대상 포드로 전송될 수 있다. 클라우드 서비스 마이그레이션 장치는 컨테이너 마이그레이션 인터페이스로서 CRIU(Checkpoint Restore in Userspace)를 이용하여 컨테이너 기반의 API를 작성하여 통합할 수 있다. CRIU는 리눅스 운영 체제용 소프트웨어 도구이다. 이 도구를 사용하면 실행 중인 애플리케이션을 멈추고 이를 영구적인 스토리지로 파일들의 모임으로서 체크포인트시킬 수 있다. 기본적으로 컨테이너 기반 플랫폼(K8s)에서 포드는 노드의 프로세스에 의해 조정된다. 그러므로, 클라우드 서비스 마이그레이션 장치는 노드에 포드를 할당하고 복제 컨트롤러는 적절한 노 드와 통신하여 포드를 생성, 삭제 또는 업데이트 할 수 있다.노드는 마이그레이션 에이전트에 의해, 포드를 유지 관리하고 컨테이너를 만드는 제어 작업을 수행할 수 있다. 클라우드 서비스 마이그레이션 장치는 사전에 마이그레이션 기능이 정의된 K8S CRD(CustomResourceDefinitions)를 통하여 마이그레이션을 수행할 수 있다 (EC capability Enabler - Migration Manager). CRD는 K8S의 관리 기능과 연계되어 마이그레이션을 관리하는 제어기능을 담당한다. 도 23에 도시된 바와 같이, 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 장치는 K8S의 API를 통 하여 노드에 상주하는 오프로딩 제어기(EC Capability operation - Migration agent)를 호출할 수 있다. 포드의 컨테이너 체크 포인트 이미지가 있으면 노드 간에 이 데이터를 전송하기 위한 메커니즘도 필요하다. 현 재 Kubernetes 내에서 노드 간 데이터 통신의 유일한 현재 예는 포드 템플릿과 같은 구성 데이터의 전송으로 재 배치하는 작업만 가능하다. 또한, 노드는 현재 오케스트레이션 계층에서 서로 통신하지 않는다. 이는 실시 간 무중단 서비스를 위한 데이터 및 서비스 마이그레이션의 큰 걸림돌이 된다. 그러므로, 클라우드 서비스 마이 그레이션 장치는 노드 및 포드 간의 데이터 전송을 줄이기 위하여 공유된 스토리지의 메커니즘을 활용하고 오케스트레이션 계층에서 네트워크 연결 기능을 활용한다. 공유 스토리지를 활용한 서비스 마이그레이션을 위하여, 클라우드 서비스 마이그레이션 장치는 오프로딩 제어기를 통해 엣지 클라우드 상에서 마이그레이션의 대상 노드의 포드 상태를 검사하고, 포드 상태를 추 출할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 소스 포드/노드 내에서 컨테이너 간 종속성의 순서를 고려하 여 모든 컨테이너들의 상태를 검사할 수 있다. 클라우드 서비스 마이그레이션 장치는 체크 포인트 생성 호출 기능을 제공할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 상기 포드에 포함된 컨테이너들의 라이브 상태의 이미지 파 일을 덤프하여 스냅샷을 생성할 수 있다. 클라우드 서비스 마이그레이션 장치는 체크 포인트 이미지 및 포드 상태 전송 기능을 제공할 수 있다. 이 대, 클라우드 서비스 마이그레이션 장치는 상기 엣지 클라우드의 공유 스토리지에 상응하는 체크 포인 트 저장소에 스냅샷을 전송할 수 있다. 체크 포인트 저장소는 쉽게 파일을 찾고 처리하기 위해 추가적인 관리 기능을 제공할 수 있다(데이터 관리 및 배치 관리 기능과 연계). 클라우드 서비스 마이그레이션 장치는 원격 대상 노드와 네트워크 연결을 확인할 수 있다. 클라우드 서비스 마이그레이션 장치는 체크 포인트 상태 확인 및 모니터링 기능을 제공할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 체크 포인트 저장소의 상태 정보를 모니터링할 수 있다. 클라우드 서비스 마이그레이션 장치는 체크 포인트 시점 복원 호출 기능을 제공할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 스냅샷 및 컨테이너 상태 파일로부터 컨테이너들의 종속성 순서를 고려하여 각 컨테이너의 복원 함수를 호출할 수 있다. 이 때, 클라우드 서비스 마이그레이션 장치는 에지 컴퓨팅 시스템(분산 클라우드 환경 포함)의 마이그레이 션을 위하여 에지에서 응용 상태의 검사, 이동가능한 노드의 네트워크 검사, 응용의 현재 상태를 스냅샷 이미지 로 저장, 복원할 위치에서 이미지 복원을 수행할 수 있다. 각 클라우드는 클러스터로 구성이 가능하며 고속 연결은 가상화에서 터널링을 위한 전용 네트워크 연결 방법 혹 은 네트워크 프록시를 통한 경로 우회 방안 등을 포함할 수 있다. 클라우드 서비스 마이그레이션 장치는 기정의된 프록시 서비스를 통하여 상기 스냅샷이 추출된 노드와 상 기 스냅샷이 마이그레이션될 노드의 IP 주소를 연결결시킬 수 있다. 도 24는 본 발명의 일실시예에 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 방법을 나타낸 동작흐름 도이다. 도 24를 참조하면, 본 발명의 일실시예에 분산 클라우드 시스템의 데이터 처리 방법으로, 클라우드 서비스 마이 그레이션 방법은 먼저 컨테이너 상태를 검사할 수 있다(S710). 즉, 단계(S710)는 클라우드 서비스 마이그레이션 장치가 오프로딩 제어기를 통해 엣지 클라우드 상에서 마 이그레이션의 대상 노드의 포드 상태를 검사하고, 포드 상태를 추출할 수 있다. 이 때, 단계(S710)는 분산 클라우드 시스템이 에지 클라우드에 대한 사용자 요청을 수신하여 분산 클라우드 시 스템을 제어하도록 할 수 있다. 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함할 수 있다. 이 때, 단계(S710)는 분산 클라우드 시스템이, 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분 하고 상기 작업이 상기 처리된 작업의 결과를 취합할 수 있다. 포드는 단일 컨테이너 일수도 있고 다중 컨테이너로 구성될 수 있다. 이러한 각 컨테이너의 상태는 소스 포드에 서 대상 포드로 전송될 수 있다. 이 때, 단계(S710)는 소스 포드/노드 내에서 컨테이너 간 종속성의 순서를 고려하여 모든 컨테이너들의 상태를 검사할 수 있다. 본 발명의 일실시예에 클라우드 서비스 마이그레이션 방법은 스냅샷을 생성할 수 있다(S720). 즉, 단계(S720)는 컨테이너의 라이브 상태의 이미지 파일을 덤프하여 스냅샷을 생성할 수 있다. 이 때, 단계(S720)는 분산 클라우드 시스템이 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 것을 포함하는 명령어들을 수행할 수 있다. 여기서, 상기 명령어들은 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행할 수 있다. 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함할 수 있다. 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장할 수 있다. 또한, 본 발명의 일실시예에 클라우드 서비스 마이그레이션 방법은 마이그레이션을 수행할 수 있다(S730). 즉, 단계(S730)는 체크 포인트 저장소에 스냅샷을 전송할 수 있다. 체크 포인트 저장소는 쉽게 파일을 찾고 처 리하기 위해 추가적인 관리 기능을 제공할 수 있다(데이터 관리 및 배치 관리 기능과 연계). 이 때, 단계(S730)는 분산 클라우드 시스템이 상기 메모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달 을 감소시킬 수 있다. 이 때, 단계(S730)는 분산 클라우드 시스템이 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상 응하는 체크 포인트 저장소에 저장하는 마이그레이션을 수행할 수 있다. 이 때, 단계(S730)는 원격 대상 노드와 네트워크 연결을 확인할 수 있다. 이 때, 단계(S730)는 사전에 마이그레이션 기능이 정의된 K8S CRD(CustomResourceDefinitions)를 통하여 마이 그레이션을 수행할 수 있다 (EC capability Enabler - Migration Manager). 이 때, 단계(S730)는 체크 포인트 이미지 및 포드 상태를 전송할 수 있다. 이 때, 단계(S730)는 체크 포인트 저장소의 상태 정보를 모니터링할 수 있다. 이 때, 단계(S730)는 체크 포인트 시점 복원 호출 기능을 제공할 수 있다. 이 때, 단계(S730)는 체크포인트 저장소에 저장된 스냅샷 및 컨테이너 상태 파일로부터 종속성 순서를 고려하여 각 컨테이너를 복원 함수를 호출할 수 있다. 이 때, 단계(S730)는 기정의된 프록시 서비스를 통하여 상기 스냅샷이 추출된 노드와 상기 스냅샷이 마이그레이 션될 노드의 IP 주소를 연결시킬 수 있다. 도 25는 본 발명의 일실시예에 따른 컴퓨터 시스템을 나타낸 블록도이다. 도 25를 참조하면, 본 발명의 일실시예에 따른 분산 클라우드 시스템 및 분산 클라우드 시스템 및 저장매체는 컴퓨터로 읽을 수 있는 기록매체와 같은 컴퓨터 시스템에서 구현될 수 있다. 도 25에 도시된 바와 같이, 컴퓨터 시스템은 버스를 통하여 서로 통신하는 하나 이상의 프로세서, 메모리, 사용자 인터페이스 입력 장치, 사용자 인터페이스 출력 장치 및 스토리지를 포함할 수 있다. 또한, 컴퓨터 시스템은 네트워크에 연결되는 네트워크 인터페이스를 더 포함할 수 있다. 프로세서 는 중앙 처리 장치 또는 메모리나 스토리지에 저장된 프로세싱 인스트럭션들을 실행하는 반 도체 장치일 수 있다. 메모리 및 스토리지는 다양한 형태의 휘발성 또는 비휘발성 저장 매체일 수 있다. 예를 들어, 메모리는 ROM이나 RAM을 포함할 수 있다. 본 발명의 일실시예에 따른 병렬연산작업 오프로딩 장치는 하나 이상의 프로세서; 및 상기 하나 이상의 프로세서에 의해 실행되는 적어도 하나 이상의 프로그램을 저장하는 메모리를 포함하고, 상기 프로 세서는, 에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하도록 하고, 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고; 상기 프 로세서는, 상기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업이 상기 처리된 작업 의 결과를 취합하고, 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하도록 하는; 프로세스들을 수행하 고, 여기서, 상기 프로세서는, 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행한다. 이 때, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하 고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 상기 메 모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 상기 프로세서는 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트 저 장소에 저장하는 마이그레이션을 수행할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일실시예에 따른 컴퓨터로 수행 가능한 프로그램을 저장하는 저 장매체인 스토리지는 에지 클라우드에 대한 사용자 요청을 수신하고 분산 클라우드 시스템을 제어하도록 하고, 여기서, 상기 분산 클라우드 시스템은 대규모 리소스를 포함하는 코어 클라우드, 상기 에지 클라우드, 및 상기 코어 클라우드와 상기 에지 클라우드 사이의 중간 규모 리소스를 포함하는 지역 클라우드를 포함하고; 상 기 사용자 요청에 따른 작업을 처리하여 대기열에 기초해 배분하고 상기 작업이 상기 처리된 작업의 결과를 취 합하고, 상기 사용자의 요청에 따라 상기 처리된 데이터를 제공하는 것을 포함하는 명령어들을 수행하고, 여기 서, 상기 명령어들은 상기 분산 클라우드 시스템의 장애 시 관리 기능을 수행하는 것을 포함한다. 이 때, 상기 관리 기능은, 상기 에지 클라우드를 포함하는 에지 클라우드들 사이의 데이터 이동 제어를 포함하 고, 상기 이동 제어는 상기 에지 클라우드의 상태를 확인하고 스냅샷 이미지의 현재 상태를 저장하고, 상기 메 모리를 이용해 상기 에지 클라우드들 사이에 스냅샷 전달을 감소시킬 수 있다. 이 때, 상기 프로그램은 상기 스냅샷 이미지를 상기 에지 클라우드의 공유 스토리지에 상응하는 체크 포인트 저 장소에 저장하는 마이그레이션을 수행하는, 컴퓨터로 수행 가능한 프로그램을 저장하는 저장매체. 이상에서와 같이 본 발명의 일실시예에 따른 분산 클라우드 시스템, 분산 클라우드 시스템의 데이터 처리 방법 및 저장매체는 상기한 바와 같이 설명된 실시예들의 구성과 방법이 한정되게 적용될 수 있는 것이 아니라, 상기 실시예들은 다양한 변형이 이루어질 수 있도록 각 실시예들의 전부 또는 일부가 선택적으로 조합되어 구성될 수 도 있다."}
{"patent_id": "10-2023-0046881", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일실시예에 따른 엣지 서비스 시스템을 나타낸 도면이다. 도 2는 본 발명의 일실시예에 따른 마이그레이션을 포함한 협업을 위한 다중 클러스터 구조를 나타낸 도면이다.도 3 및 도 4는 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지를 나타낸 블록도이다. 도 5는 본 발명의 일실시예에 따른 컨테이너 인메모리 스토리지 생성 과정을 나타낸 도면이다. 도 6은 본 발명의 일실시예에 따른 인메모리 스토리지에 구현된 컨테이너 파일 시스템을 나타낸 블록도이다. 도 7은 본 발명의 일실시예에 따른 인메모리 컨테이너 스토리지의 이미지 공유 환경을 나타낸 도면이다. 도 8은 본 발명의 일실시예에 따른 위한 인메모리 컨테이너 스토리지를 가지는 Node에서 사용자 공유 환경을 나 타낸 도면이다. 도 9는 도 4에 도시된 인메모리 컨테이너 스토리지 관리부의 일 예를 세부적으로 나타낸 블록도이다. 도 10은 본 발명의 일실시예에 따른 인메모리 기반 컨테이너 스토리지 관리 방법을 나타낸 동작흐름도이다. 도 11은 도 10에 도시된 디렉토리 생성 단계의 일 예를 세부적으로 나타낸 동작흐름도이다. 도 12는 본 발명의 일실시예에 따른 협업 서비스를 위한 클러스터 간의 서비스 연결 구조를 나타낸 도면이다. 도 13은 본 발명의 일실시예에 따른 엣지 서비스 시스템의 스케줄러들을 나타낸 도면이다. 도 14는 도 13에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러로 구성한 일 예를 나타낸 도면이 다. 도 15는 도 13에 도시된 엣지 서비스 시스템의 스케줄러들을 LEVELED 스케줄러와 SHARED 스케줄러를 결합한 복 합적 구성의 일 예를 세부적으로 나타낸 도면이다. 도 16은 본 발명의 일실시예에 따른 지능형 스케줄러의 처리 흐름을 나타낸 블록도이다. 도 17은 도 16에 도시된 지능형 스케줄러의 처리 흐름에서 이어진 엣지, 이웃 엣지 및 클라우드에서의 처리 흐 름을 나타낸 블록도이다. 도 18은 도 17에 도시된 작업 큐의 스케줄링 단계의 일 예를 세부적으로 나타낸 동작흐름도이다. 도 19는 본 발명의 일실시예에 따른 지능형 스케줄러에 기반한 서비스의 분산 협업을 위한 동적 배치를 나타낸 도면이다. 도 20은 본 발명의 일실시예에 따른 지능형 분석기를 포함하는 지능형 스케줄러를 나타낸 블록도이다. 도 21은 본 발명의 일실시예에 따른 지능형 스케줄러의 최적화 흐름을 나타낸 블록도이다. 도 22는 본 발명의 일실시예에 따른 분산 클라우드 시스템에서 리스크 관리를 위한 서비스 마이그레이션을 나타 낸 도면이다. 도 23은 본 발명의 일실시예에 따른 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 장치를 나타낸 블록 도이다. 도 24는 본 발명의 일실시예에 분산 클라우드 시스템의 클라우드 서비스 마이그레이션 방법을 나타낸 동작흐름 도이다. 도 25는 본 발명의 일실시예에 따른 컴퓨터 시스템을 나타낸 도면이다."}
