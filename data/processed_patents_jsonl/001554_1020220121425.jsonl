{"patent_id": "10-2022-0121425", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0042752", "출원번호": "10-2022-0121425", "발명의 명칭": "LUT를 활용한 활성화 함수를 이용한 인공지능 연산 장치", "출원인": "한국전자기술연구원", "발명자": "홍윤표"}}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "활성화 함수가, 전단에 위치한 레이어에서 출력되는 값을 입력받는 단계;활성화 함수가, LUT(Look Up Table)에 저장되어 있는 입력 값들을 참조하여, 입력 단계에서 입력되는 값에 대해활성화 연산하는 단계;활성화 함수가, 연산 결과를 출력하는 단계;를 포함하는 것을 특징으로 하는 활성화 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서,LUT에 저장되어 있는 입력 값들은,활성화 함수의 기초가 된 기본 함수에서 출력 가능한 값들을 기본 함수의 역함수에 각각 대입하여 산출된 값들인 것을 특징으로 하는 활성화 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 2에 있어서,기본 함수에서 출력가능한 값들은,특정 출력 값 범위를 N 레벨로 양자화하는 양자화 함수에 대입하여 생성하는 것을 특징으로 하는 활성화 연산방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 3에 있어서,특정 출력 값 범위는,기본 함수의 비선형 구간에서의 출력 값 범위인 것을 특징으로 하는 활성화 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 3에 있어서,연산 단계는,LUT에 저장되어 있는 입력 값들 중 입력 단계에서 입력되는 값과 가장 가까운 입력 값을 탐색하고, 탐색 결과를기초로 활성화 함수의 출력 값을 연산하는 것을 특징으로 하는 활성화 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 5에 있어서,연산 단계는,공개특허 10-2024-0042752-3-탐색된 입력 값의 인덱스를 양자화 함수에 대입하여 활성화 함수의 출력 값을 연산하는 것을 특징으로 하는 활성화 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 6에 있어서,양자화 함수는, 다음 수식으로 표현되고,target = outrange×(idx/(인덱스 개수)) + outmin여기서 target은 출력 값, outrange는 출력 값 범위, idx는 인덱스, outmin는 최소 출력 값인 것을 특징으로 하는활성화 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 1에 있어서,연산 단계는,입력 단계에서 입력되는 값이 정해진 범위 내인 경우에만, LUT를 참조하여, 활성화 연산을 수행하는 것을 특징으로 하는 활성화 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 8에 있어서,연산 단계는,입력 단계에서 입력되는 값이 정해진 범위 벗어나는 경우에는, 정해진 값이나 입력 단계에서 입력되는 값을 활성화 연산 결과로 출력하는 것을 특징으로 하는 활성화 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "전단에 위치한 레이어에서 출력되는 값을 입력받는 입력부;LUT(Look Up Table)에 저장되어 있는 입력 값들을 참조하여, 입력부를 통해 입력되는 값에 대해 활성화 연산하는 연산부;연산부의 연산 결과를 출력하는 출력부;를 포함하는 것을 특징으로 하는 활성화 연산 장치."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "입력 데이터를 인공지능 모델에 입력하는 단계;인공지능 모델이 입력 데이터를 분석한 추론 결과를 출력 데이터를 출력하는 단계;를 포함하고,인공지능 모델은,LUT(Look Up Table)에 저장되어 있는 입력 값들을 참조하여 활성화 연산을 수행하는 활성화 함수를 포함하는 것을 특징으로 하는 인공지능 연산 방법."}
{"patent_id": "10-2022-0121425", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "공개특허 10-2024-0042752-4-입력 데이터를 인공지능 모델에 입력하는 입력부;인공지능 모델을 실행하여 입력 데이터를 분석한 추론 결과를 생성하는 연산부; 및연산부의 추론 결과를 출력하는 출력부;를 포함하고,인공지능 모델은,LUT(Look Up Table)에 저장되어 있는 입력 값들을 참조하여 활성화 연산을 수행하는 활성화 함수를 포함하는 것을 특징으로 하는 인공지능 연산 장치."}
{"patent_id": "10-2022-0121425", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "LUT를 활용한 활성화 함수를 이용한 인공지능 연산 장치가 제공된다. 본 발명의 실시예에 따른 활성화 연산 방법 은, 활성화 함수가 전단에 위치한 레이어에서 출력되는 값을 입력받으면, LUT에 저장되어 있는 입력 값들을 참조 하여 입력되는 값에 대해 활성화 연산하고, 연산 결과를 출력한다. 이에 의해, 활성화 함수의 비선형 구간을 작 은 크기의 LUT를 활용하여 구현함으로써, 비선형 함수를 사용하는 활성화 함수를 포함하고 있는 인공지능 연산 장치를 작은 HW로 구현하는 것이 가능해진다."}
{"patent_id": "10-2022-0121425", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 인공지능 기술에 관한 것으로, 더욱 상세하게는 인공지능 모델에 이용되는 활성화 함수(Activation Function)를 소형 HW로 구현하기 위한 방법에 관한 것이다."}
{"patent_id": "10-2022-0121425", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능은 여러 연구자들의 노력 덕분에 분류와 인식 분야 등에서 뛰어난 성능을 이루었고, 이제는 주변의 여 러 분야에서 인공지능을 활용한 제품들이 상용화 되고 있다. 이러한 인기에 힘입어 꾸준히 인공지능의 성능을 높이기 위한 연구가 활발히 진행 중이고 그 중 한 분야는 활성화 함수 분야이다. 활성화 함수에서는 인공지능의 성능을 높이기 위해 입력 값에 따라 비선형적 특성을 가져야 해서 지수 함수, 로 그 함수 등을 많이 사용하고 있고 이로 인해 하드웨어로 구현하는데 많은 어려움이 있는 분야이다. 또한 한 번 설계하고 나면 소프트웨어처럼 더 이상 수정을 할 수 없는 하드웨어의 특성상 계속 새로운 기술이 나오고 있는 활성화 함수의 영역은 하드웨어로 구현하기 쉬운 분야가 아니다. 초기에는 인공지능 분야에서 sigmoid 함수(도 1)와 tanh 함수(도 2)가 활성화 함수로 많이 사용되었다. 이후 Imagenet challenge에서 2012년에 승리를 거머쥔 Alexnet에서 기존 사용하던 Tanh 활성화 함수를 대체할 ReLU 함수(도 3)가 도입되었다. 이 함수는 입력 값이 음수면 출력을 0으로 만들고, 양수면 입력을 그대로 출력시키는 방식을 활용하여 Tanh와 같은 정확도를 유지하면서도 연산 속도를 6배나 빠르게 만들었다. 하지만 음수를 0으로 만들어 버리는 수식으로 인해 음수인 값을 출력 하는 레이어들은 학습이 잘 안되는 현상이 발생하였고, 이를 보 완하기 위해 Leaky-ReLU(도 4) 라는 함수가 등장하였다. Leaky-ReLU는 입력이 음수 값이라면 입력에 작은 parameter를 곱하여 기존 ReLU와 같은 형태는 유지하면서 미분 값이 0이라 학습이 안되는 현상을 개선하였다. 이후 음수의 값이 입력으로 들어올 때 출력 값을 더 부드럽게 변화시키기 위해 지수 함수를 적용한 ELU(도 5) 라는 함수가 연구되었고, 인공지능의 정확도를 높이기 위해 지금도 계속 새로운 형태의 활성화 함수가 개발되고 있다. 한편 활성화 함수는 지수, 로그 함수 같은 비선형 함수를 많이 사용하기 때문에 작은 HW로 구현하는 것이 어렵 다. 이에 따라 정확도를 높이기 위한 연구와 별도로, 활성화 함수를 작은 하드웨어 크기로 구현하기 위한 방안 도 필요하다."}
{"patent_id": "10-2022-0121425", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 상기와 같은 문제점을 해결하기 위하여 안출된 것으로서, 본 발명의 목적은, 비선형 함수를 사용하는 활성화 함수를 작은 HW로 구현할 수 있도록 하기 위한 방안으로, 작은 크기의 LUT(Look Up Table)를 활용한 활 성화 함수 및 이를 이용한 인공지능 연산 장치 및 방법을 제공함에 있다."}
{"patent_id": "10-2022-0121425", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 목적을 달성하기 위한 본 발명의 일 실시예에 따른 활성화 연산 방법은, 활성화 함수가, 전단에 위치한 레 이어에서 출력되는 값을 입력받는 단계; 활성화 함수가, LUT에 저장되어 있는 입력 값들을 참조하여, 입력 단계 에서 입력되는 값에 대해 활성화 연산하는 단계; 활성화 함수가, 연산 결과를 출력하는 단계;를 포함한다. LUT에 저장되어 있는 입력 값들은, 활성화 함수의 기초가 된 기본 함수에서 출력 가능한 값들을 기본 함수의 역 함수에 각각 대입하여 산출된 값들일 수 있다. 기본 함수에서 출력가능한 값들은, 특정 출력 값 범위를 N 레벨로 양자화하는 양자화 함수에 대입하여 생성할 수 있다. 특정 출력 값 범위는, 기본 함수의 비선형 구간에서의 출력 값 범위일 수 있다. 연산 단계는, LUT에 저장되어 있는 입력 값들 중 입력 단계에서 입력되는 값과 가장 가까운 입력 값을 탐색하고, 탐색 결과를 기초로 활성화 함수의 출력 값을 연산할 수 있다. 연산 단계는, 탐색된 입력 값의 인덱스를 양자화 함수에 대입하여 활성화 함수의 출력 값을 연산할 수 있다. 양자화 함수는, 다음 수식으로 표현되고, target = outrange×(idx/(인덱스 개수)) + outmin 여기서 target은 출력 값, outrange는 출력 값 범위, idx는 인덱스, outmin는 최소 출력 값일 수 있다. 연산 단계는, 입력 단계에서 입력되는 값이 정해진 범위 내인 경우에만, LUT를 참조하여, 활성화 연산을 수행할 수 있다. 연산 단계는, 입력 단계에서 입력되는 값이 정해진 범위 벗어나는 경우에는, 정해진 값이나 입력 단계에서 입력 되는 값을 활성화 연산 결과로 출력할 수 있다. 본 발명의 다른 실시예에 따른 활성화 연산 장치는, 전단에 위치한 레이어에서 출력되는 값을 입력받는 입력부; LUT에 저장되어 있는 입력 값들을 참조하여, 입력부를 통해 입력되는 값에 대해 활성화 연산하는 연산부; 연산 부의 연산 결과를 출력하는 출력부;를 포함한다. 본 발명의 다른 실시예에 따른 인공지능 연산 방법은, 입력 데이터를 인공지능 모델에 입력하는 단계; 인공지능 모델이 입력 데이터를 분석한 추론 결과를 출력 데이터를 출력하는 단계;를 포함하고, 인공지능 모델은, LUT에 저장되어 있는 입력 값들을 참조하여 활성화 연산을 수행하는 활성화 함수를 포함한다. 본 발명의 다른 실시예에 따른 인공지능 연산 장치는, 입력 데이터를 인공지능 모델에 입력하는 입력부; 인공지 능 모델을 실행하여 입력 데이터를 분석한 추론 결과를 생성하는 연산부; 및 연산부의 추론 결과를 출력하는 출 력부;를 포함하고, 인공지능 모델은, LUT에 저장되어 있는 입력 값들을 참조하여 활성화 연산을 수행하는 활성 화 함수를 포함한다."}
{"patent_id": "10-2022-0121425", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "이상 설명한 바와 같이, 본 발명의 실시예들에 따르면, 활성화 함수의 비선형 구간을 작은 크기의 LUT를 활용하 여 구현함으로써, 비선형 함수를 사용하는 활성화 함수를 포함하고 있는 인공지능 연산 장치를 작은 HW로 구현 하는 것이 가능해진다."}
{"patent_id": "10-2022-0121425", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 도면을 참조하여 본 발명을 보다 상세하게 설명한다. 본 발명의 실시예에서는 인공지능 모델의 연산 중 비선형 함수를 사용함으로 인해 작은 HW 구현이 어려운 활성 화 함수를 작은 크기의 LUT(Look Up Table)를 활용하여 소형 HW로 구현할 수 있는 방법을 제시한다. 본 발명의 실시예에서 제시하는 활성화 함수는 비선형 구간에서 함수를 이용한 연산이 아닌 LUT를 참조하여 출 력 값을 생성하는데, 이 LUT는 활성화 함수의 입력 값들과 출력 값들이 매칭되어 저장된 구조가 아닌, 정해진 입력 값들만 저장되어 있는 구조이다. 이 LUT는 기존 활성화 함수를 기초로 구성되는데, 어떠한 함수를 기반으 로 하여도 무방하다. 기존 활성화 함수들(sigmoid, tanh, ReLU, Leaky-ReLU, ELU 등)의 입력 값과 출력 값을 비교해 보면. 입력 값 이 정해진 범위를 벗어나면, 즉 입력의 절대 값이 일정 값보다 커지면, 0, 1, -1과 같이 특정 값으로 수렴하거 나, ReLU의 출력 값처럼 입력 값이 그대로 출력되는 형태를 띈다. 이에 따라 본 발명의 실시예에서는 활성화 함수에 입력되는 값의 범위에 따라 활성화 함수의 연산 모드를 다음 과 같이 3가지로 구분한다. 1) 절대 출력 모드 : 활성화 함수의 출력 값을 정해진 특정 값으로 고정(output = k) 2) 상대 출력 모드 : 활성화 함수에 입력되는 값을 그대로 출력(output = input) 3) LUT 사용 모드 : LUT를 참조하여 활성화 함수의 출력 값을 연산하는 모드 각 모드를 적용할 입력 값 범위는 본 발명의 실시예에서 제시하는 활성화 함수를 설계하는데 기초가 된 기본 함 수(sigmoid, tanh, ReLU, Leaky-ReLU, ELU 등)의 특성에 따르는 것이 바람직하다. 기본 함수에 따라 절대 출력 모드와 상대 출력 모드의 구현은 선택적일 수 있다. 즉 활성화 함수의 동작 모드에 절대 출력 모드와 상대 출력 모드 중 하나만 포함될 수도 있고, 두 가지 모두가 포함될 수도 있다. 하지만 본 발명의 실시예에서 제시한 활성화 함수에서 LUT 사용 모드의 구현은 필수적이다. 절대 출력 모드와 상대 출력 모드는 입력 값이 정해진 범위를 벗어나는 경우, 즉 입력의 절대 값이 일정 값보다 큰 경우에 적용된다. LUT 사용 모드는 입력 값이 정해진 범위 이내인 경우, 즉 입력의 절대 값이 일정 값보다 작은 경우인 기본 함수의 비선형 구간에 적용된다. 이와 같이 LUT 사용 모드를 적용할 입력 값 범위를 최소화하 면, 이에 필요한 LUT의 크기를 최소화할 수 있어, 한정된 자원에서도 활성화 함수를 운용할 수 있게 된다. 이하에서는 LUT 사용 모드에 대해 상세히 설명한다. 도 6에 제시된 바와 같이 LUT 사용 모드가 적용될 기본 함 수(tanh, sigmoid, ELU)의 비선형 구간에서 입력 값 범위는 출력 값 범위가 훨씬 더 작고, 입력 값과 출력 값은 일대일 대응 관계이다. 이에 따라 본 발명의 실시예에서는 비선형 구간에서의 출력 값 범위를 256개로 양자화하여 256개의 출력 값들을 샘플링하고, 샘플링된 출력 값들 각각에 매칭되는 입력 값들을 계산한다. 다음 계산된 입력 값들을 LUT에 저장 한다. 출력 값 양자화는 아래의 수식 에 제시한 양자화 함수에서 인덱스(idx)를 0부터 255까지 하나 씩 증가시키는 과정으로, 이를 통해 256개의 출력 값들을 생성할 수 있다. target = outrange×(idx/256) + outmin 여기서 target은 출력 값, outrange는 출력 값 범위, idx는 인덱스(0~255), outmin는 비선형 구간에서 최소 출력 값이다. 입력 값 계산은 위에서 생성된 256개의 출력 값들을 아래의 수식 에 대입하여 생성할 수 있다. 출력 값들의 개수가 256개 이므로 입력 값들의 개수도 256개 이다. LUT[idx] = f-1(target) 여기서 LUT[idx]는 입력 값, f-1는 기본 함수의 역함수, target은 출력 값이다. 생성된 256개의 입력 값들을 저장할 수 있는 LUT를 도 7에 예시하였다. 도 7에 도시된 바와 같이 LUT에는 입력 값들만 저장되고, 그에 매칭되는 출력 값들은 저장되지 않는다. 본 발명의 실시예에서 제시하는 활성화 함수는 LUT 사용 모드에서 위 방법에 의해 구성한 LUT와 출력 값 양자화 함수인 위 수식을 이용하여 활성화 연산을 수행한다. 이하에서 활성화 함수를 이용한 활성화 연산 과정에 대해, 도 8을 참조하여 상세히 설명한다. 도 8은 본 발명의 일 실시예에 따른 활성화 연산 방법의 설명에 제공되는 흐름도이다. 도시된 바와 같이, 먼저 활성화 함수는 전단에 위치한 레이어에서 출력되는 값을 입력받는다(S110). S110단계에서 입력되는 입력 값이 정해진 범위 이내인 경우(S120-Y), 활성화 함수은 LUT를 참조하고 위 수식 을 이용하여 활성화 연산을 수행한다(S130 내지 S150). 구체적으로 먼저 활성화 함수는 LUT에 저장된 입력 값들 중 S110단계에서 입력되는 값에 가장 가까운 입력 값을 탐색한다(S130). 다음 활성화 함수는 S130단계에서 탐색된 입력 값의 인덱스를 추출하고(S140), 추출한 인덱스 를 출력 값 양자화 함수인 위 수식 에 입력하여 출력 값을 생성한다(S150). S150단계에서 출력 값 생성에 이용되는 수식 에서의 연산은 곱셈기와 덧셈기, 그리고 shift 연산기 만으로 가능하므로, 저전력 하드웨어로 구현이 가능하다. 한편 S110단계에서 입력되는 값이 정해진 범위를 벗어나는 경우(S120-N), 활성화 함수는 1) 정해진 고정 값을 출력하거나, 2) 입력 값을 그대로 출력한다(S160). S160단계에서 출력되는 값은 활성화 함수의 기본 함수 (sigmoid, ReLU, ELU 등)가 무엇인지에 의해 결정된다. 이하에서는 활성화 함수의 기본 함수로 Tanh Function이 적용된 경우를 상정하여, LUT를 이용하여 활성화 연산 을 수행하는 과정을 예시한다. 본 예시에서 도 6에 제시된 바와 같이 비선형 구간의 입력 값 범위는 [-3, 3]으로 상정하였고, 이 때의 출력 값 범위는 [-0.995, 0.994] 였다. 이에 따르면 위 수식 은 다음의 수식 과 같아진다. target = (0.994-(-0.995))×(idx/256) + (-0.995) 다음 위 수식 의 인덱스(idx)에 0~255를 순차적으로 하나 씩 입력하면서 생성한 256개의 출력 값들을 아래의 식 에 대입하여 생성한 256개의 입력 값들로 LUT를 구성한다. LUT[idx] = Tanh-1(target) 만약 활성화 함수에 0.27이 입력되었다면, 활성화 함수는 LUT(도 9에 예시)에 저장된 입력 값들 중 0.27에 가장 가까운 입력 값인 0.2705를 탐색하고, 탐색된 0.2705의 인덱스 162를 추출한다. 다음 활성화 함수는 추출한 인 덱스 162를 수식 에 입력하여 얻은 0.2637을 활성화 연산 결과로 출력한다. 한편 활성화 함수에 1.68이 입력되었다면, 활성화 함수는 LUT(도 10에 예시)에 저장된 입력 값들 중 1.68에 가 장 가까운 입력 값인 1.6797을 탐색하고, 탐색된 1.6797의 인덱스 248을 추출한다. 다음 활성화 함수는 추출한 인덱스 248을 수식 에 입력하여 얻은 0.9318을 활성화 연산 결과로 출력한다. 본 발명의 실시예에서 제시한 활성화 함수의 성능 테스트 결과를 도 11에 제시하였다. 도 11에서는 기존 3가지 활성화 함수(tanh, sigmoid, ELU)를 기본 함수로 본 발명의 실시예에서 제시한 활성화 함수를 이용하여 연산한 결과에 대한 MAE(Mean Absolute Error)와 MSE(Mean Square Error)를 제시하였고, 기존 3가지 활성화 함수 (ReLU, Leaky-ReLU)에 대한 MAE와 MSE를 제시하였다. 테스트는 python code를 이용하여 알고리즘을 코딩하고 입력/출력 값 및 LUT에 들어갈 입력 값은 16bit의 fixed point로 하였다. 에러를 확인하기 위한 데이터의 정합성은 floating point로 연산한 실제 활성화 함수 알고리즘을 사용하였으며, 실험 결과, LUT를 사용한 3종의 함수(tanh, Sigmoid, ELU)에서는 낮은 오차를 확인할 수 있었다. LUT를 사용하 지 않는 2종의 함수(ReLU, Leaky ReLU)에서는 알고리즘을 그대로 구현하였기 ?문에 오차 값이 0으로측정되었다. 도 12는 본 발명의 다른 실시예에 따른 인공지능 연산 장치의 블럭도이다. 본 발명의 실시예에 따른 인공지능 연산 장치는 입력부, 연산부, 출력부 및 저장부을 포함하여 구성되며, FPGA 등의 하드웨어 로 구현할 수 있다. 연산부는 인공지능 모델을 실행하기 위한 수단으로, 인공지능 모델은 위에서 제시한 활성화 함수를 이용한 다. 저장부에는 인공지능 모델의 연산에 필요한 데이터들이 저장되며, 본 발명의 실시예와 관련하여 활성 화 함수가 참조하는 LUT가 저장된다. 입력부는 인공지능 모델로 입력 데이터를 인가하고, 출력부는 인공지능 모델의 추론 결과를 출력한다. 지금까지 LUT를 활용한 활성화 함수 및 이를 이용하는 인공지능 모델에 대해 바람직한 실시예를 들어 상세히 설 명하였다. 본 발명의 실시예에서는 활성화 함수에서 비선형적인 구간은 한정적인 특성과 그 구간에서 입력 값의 범위 보다 출력 값의 범위가 작다는 점을 활용하여 256개의 LUT 만으로도 작은 에러율(MAE, MSE)을 가진 활성화 함수 알고 리즘을 만들어 낼 수 있었다. 이를 통해 HW로 구현이 어려운 비선형 함수인 활성화 함수를 작은 크기의 LUT로 구현할 수 있어, 인공지능 연산 하드웨어를 소형화할 수 있게 된다. 한편, 본 실시예에 따른 장치와 방법의 기능을 수행하게 하는 컴퓨터 프로그램을 수록한 컴퓨터로 읽을 수 있는 기록매체에도 본 발명의 기술적 사상이 적용될 수 있음은 물론이다. 또한, 본 발명의 다양한 실시예에 따른 기 술적 사상은 컴퓨터로 읽을 수 있는 기록매체에 기록된 컴퓨터로 읽을 수 있는 코드 형태로 구현될 수도 있다. 컴퓨터로 읽을 수 있는 기록매체는 컴퓨터에 의해 읽을 수 있고 데이터를 저장할 수 있는 어떤 데이터 저장 장 치이더라도 가능하다. 예를 들어, 컴퓨터로 읽을 수 있는 기록매체는 ROM, RAM, CD-ROM, 자기 테이프, 플로피 디스크, 광디스크, 하드 디스크 드라이브, 등이 될 수 있음은 물론이다. 또한, 컴퓨터로 읽을 수 있는 기록매체 에 저장된 컴퓨터로 읽을 수 있는 코드 또는 프로그램은 컴퓨터간에 연결된 네트워크를 통해 전송될 수도 있다. 또한, 이상에서는 본 발명의 바람직한 실시예에 대하여 도시하고 설명하였지만, 본 발명은 상술한 특정의 실시"}
{"patent_id": "10-2022-0121425", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "예에 한정되지 아니하며, 청구범위에서 청구하는 본 발명의 요지를 벗어남이 없이 당해 발명이 속하는 기술분야 에서 통상의 지식을 가진자에 의해 다양한 변형실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 발명의 기술적 사상이나 전망으로부터 개별적으로 이해되어져서는 안될 것이다."}
{"patent_id": "10-2022-0121425", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1 내지 도 5는, 기존 활성화 함수들, 도 6은 기존 활성화 함수들의 비선형 구간 예시들, 도 7은 LUT의 구조 예시,도 8은 본 발명의 일 실시예에 따른 활성화 연산 방법의 설명에 제공되는 흐름도, 도 9 및 도 10은 LUT 예시, 도 11은 본 발명의 실시예에서 제시한 활성화 함수의 성능 테스트 결과, 도 12는 본 발명의 다른 실시예에 따른 인공지능 연산 장치의 블럭도이다."}
