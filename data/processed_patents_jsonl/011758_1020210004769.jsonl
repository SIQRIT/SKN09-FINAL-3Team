{"patent_id": "10-2021-0004769", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0102421", "출원번호": "10-2021-0004769", "발명의 명칭": "전자 장치 및 전자 장치의 메모리 관리 방법", "출원인": "삼성전자주식회사", "발명자": "하성훈"}}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,하나 이상의 프로세서; 및상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리를 포함하고,상기 메모리에 대응하는 메모리 공간에는 상기 프로세서에 의해 실행되는 프로세스 객체에 대응되는 힙 메모리공간(heap memory space)이 할당될 수 있고,상기 프로세서는,상기 프로세스 객체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할당하고, 상기 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동작을 모니터링함으로써 상기 전자 장치의 선택적리셋(silent reset) 여부를 관리하도록 설정된전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 프로세서는,상기 프로세스 객체에 대응되는 상기 힙 메모리 공간에 추가 힙 메모리 공간을 할당하고,상기 프로세스 객체의 종류에 기초하여 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간 중 적어도 하나의 공간에 대하여 언맵(unmap)을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 프로세서는,상기 프로세스 객체의 종류가 시스템서버인지 여부를 판단하고,상기 프로세스 객체의 종류가 시스템서버가 아닌 경우, 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간 중적어도 하나의 공간에 대하여 언맵을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 프로세서는,상기 프로세스 객체의 종류가 라지 힙 어플리케이션인 경우, 상기 추가 힙 메모리 공간에 대하여 언맵을 수행하공개특허 10-2022-0102421-3-고,상기 프로세스 객체의 종류가 일반 어플리케이션인 경우, 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간의일부에 대하여 언맵을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 프로세서는,상기 프로세스 객체의 종류가 일반 어플리케이션인 경우, 상기 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간을 제외한 힙 메모리 공간에 대하여 언맵을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 프로세서는,상기 프로세스 객체에 할당된 힙 메모리 공간의 사용량, 상기 회수 동작의 소요 시간 및 차단 가비지 수집 횟수(blocking garbage collection count)를 측정함으로써 모니터링을 수행하고,상기 힙 메모리 공간의 사용량, 상기 소요 시간 및 상기 차단 가비지 수집 횟수에 기초하여 상기 전자 장치의선택적 리셋 여부를 관리하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 프로세서는,상기 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간의 크기 또는 상기 힙 메모리 공간에 대한 회수동작에 기초하여 상기 전자 장치의 선택적 리셋을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 프로세서는,상기 차단 가비지 수집 횟수 또는 차단 가비지 수집 시간(blocking garbage collection duration)에 기초하여상기 메모리를 관리하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "공개특허 10-2022-0102421-4-제8항에 있어서,상기 프로세서는,상기 차단 가비지 수집 횟수 또는 상기 차단 가비지 수집 시간이 미리 결정된 임계값을 초과하는 경우에, 상기전자 장치의 선택적 리셋을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "전자 장치에 있어서,하나 이상의 프로세서; 및상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리를 포함하고,상기 메모리에 대응하는 메모리 공간에는 상기 프로세서에 의해 실행되는 프로세스 객체에 대응되는 힙 메모리공간을 포함하고,상기 프로세서는,상기 프로세스 객체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할당하고, 상기 전자 장치의 사용 상태에 기초하여 상기 전자 장치의 선택적 리셋 여부를 관리하도록 설정된전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 프로세스 객체의 종류는,시스템서버(systemserver), 라지 힙 어플리케이션(large heap application) 및 일반 어플리케이션을 포함하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제10항에 있어서,상기 프로세서는,상기 프로세스 객체에 대응되는 상기 힙 메모리 공간에 추가 힙 메모리 공간을 할당하고,상기 프로세스 객체의 종류에 기초하여 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간 중 적어도 하나의 공간에 대하여 언맵(unmap)을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,상기 프로세서는,상기 프로세스 객체의 종류가 시스템서버인지 여부를 판단하고,공개특허 10-2022-0102421-5-상기 프로세스 객체의 종류가 시스템서버가 아닌 경우, 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간 중적어도 하나의 공간에 대하여 언맵을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 프로세서는,상기 프로세스 객체의 종류가 라지 힙 어플리케이션인 경우, 상기 추가 힙 메모리 공간에 대하여 언맵을 수행하고,상기 프로세스 객체의 종류가 일반 어플리케이션인 경우, 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간의일부에 대하여 언맵을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 프로세서는,상기 프로세스 객체의 종류가 일반 어플리케이션인 경우, 상기 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간을 제외한 힙 메모리 공간에 대하여 언맵을 수행하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제10항에 있어서,상기 프로세서는,상기 전자 장치가 사용 중인지 여부를 판단하고,사용 중인지 여부의 판단 결과에 기초하여 상기 메모리를 관리하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서,상기 전자 장치는 디스플레이 모듈 또는 음향 출력 모듈을 더 포함하고,상기 프로세서는,상기 디스플레이 모듈 또는 상기 음향 출력 모듈이 턴 온되어 있는 경우, 상기 전자 장치를 사용 중인 상태로판단하는 전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "공개특허 10-2022-0102421-6-제16항에 있어서,상기 전자 장치는 통신 모듈을 더 포함하고,상기 프로세서는,상기 통신 모듈을 이용한 통신이 수행되는 경우, 상기 전자 장치를 사용 중인 상태로 판단하는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제16항에 있어서,상기 프로세서는,상기 전자 장치가 사용 중인 경우,상기 전자 장치의 선택적 리셋을 미리 결정된 시간만큼 연기시키는전자 장치."}
{"patent_id": "10-2021-0004769", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "전자 장치의 메모리를 관리하는 방법에 있어서,상기 메모리에 대응하는 메모리 공간에는 프로세서에 의해 실행되는 프로세스 객체에 대응되는 힙 메모리 공간이 할당될 수 있고,상기 프로세스 객체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할당하는 동작;상기 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동작을 모니터링함으로써 상기 전자 장치의 선택적리셋 여부를 관리하는 동작; 및상기 전자 장치의 사용 상태에 기초하여 상기 전자 장치의 선택적 리셋 여부를 관리하는 동작을 포함하는 메모리 관리 방법."}
{"patent_id": "10-2021-0004769", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예에 따르면, 전자 장치는, 하나 이상의 프로세서와, 상기 프로세서에 의해 실행 가능한 인스트럭션 을 저장하는 메모리를 포함하고, 상기 메모리에 대응하는 메모리 공간에는 상기 프로세서에 의해 실행되는 프로 세스 객체에 대응되는 힙 메모리 공간(heap memory space)이 할당될 수 있고, 상기 프로세서는, 상기 프로세스 객체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할당하고, 상기 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동작을 모니터링함으로써 상기 전자 장치의 선택적 리셋 여부를 관리할 수 있다. 다른 실시예가 가능하다."}
{"patent_id": "10-2021-0004769", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래 실시예들은 전자 장치 및 전자 장치의 메모리 관리 방법에 관한 것이다."}
{"patent_id": "10-2021-0004769", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "단말에서 각 프로세스는 정해진 크기의 힙 메모리(heap memory)를 가지고 동작한다. 힙 메모리의 회수는 GC(garbage collection)을 통해 수행되고, GC 과정은 단말의 CPU(central processing unit) 리소스를 사용하는 동작이기에 성능 저하를 동반한다. 시스템서버(systemserver)에서 힙 메모리(heap memory) 가 고갈될 경우, 과도한 GC 동작에 의해 리소스 부족으 로 사용자는 전체적인 단말의 느려짐을 체감할 수 있다. 힙 메모리를 최대한 회수하였음에도 할당이 안되는 순간 아웃 오브 메모리(out of memory)로 시스템서버 가 킬 (kill) 되는데, 이때 사용자는 단말 사용 중 원치 않음에도 단말 재시작을 경험하게 된다."}
{"patent_id": "10-2021-0004769", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "일반적으로, 전자 장치에서 실행되는 어플리케이션은 미리 설정된 힙 메모리 용량의 제한을 가진다. 이 때, 시 스템서버나 라지 힙 설정 어플리케이션은 일반적인 어플리케이션에 비하여 다소 큰 힙 메모리 용량의 제한을 가 질 수 있다. 최초로 프로세스가 포크(fork)되면 힙 메모리의 할당에 필요한 초기 값으로 미리 설정된 값이 사용되는데, 미리 설정된 힙 메모리의 값이 충분하지 않을 경우에, 해당 프로세스 내에서 메모리를 회수하는 가비지 수집(garbage collection)이 호출되고, 시스템 특성(system property)를 통해 힙 메모리의 조정이 이루어진다. 힙 메모리의 사용량이 최대 한도까지 도달한 상태에서, 할당하려는 메모리 공간의 크기가 남아있는 연속적인 힙 메모리의 여유 메모리 최대 공간보다 클 경우, 가비지 수집(garbage collection)이 호출되면 프로세스 내의 여 러 스레드(thread)에 지연을 유발시키게 된다. 이러한 지연은 사용자에게 전자 장치의 버벅거림이나 느려짐을 체감하도록 만들고, 심할 경우 전자 장치의 재시 작까지 발생할 수 있다. 따라서, 스레드의 지연을 개선할 수 있는 기술이 요구된다."}
{"patent_id": "10-2021-0004769", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시예에 따른 전자 장치는, 하나 이상의 프로세서와, 상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리를 포함하고, 상기 메모리에 대응하는 메모리 공간에는 상기 프로세서에 의해 실행되는 프로세 스 객체에 대응되는 힙 메모리 공간(heap memory space)이 할당될 수 있고, 상기 프로세서는, 상기 프로세스 객 체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할당하고, 상기 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동작을 모니터링함으로써 상기 전자 장치의 선택적 리셋(silent reset) 여부를 관리하 도록 설정될 수 있다. 다양한 실시예에 따른 전자 장치의 메모리를 관리하는 방법에 있어서, 상기 메모리에 대응하는 메모리 공간에는 프로세서에 의해 실행되는 프로세스 객체에 대응되는 힙 메모리 공간이 할당될 수 있고, 상기 전자 장치의 메모 리 관리 방법은, 상기 프로세스 객체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할당하는 동작과, 상기 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동작을 모니터링함으로써 상기 전자 장치의 선택적 리셋 여부를 관리하는 동작과, 상기 전자 장치의 사용 상태에 기초하여 상기 전자 장치의 선택적 리셋 여부를 관리하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0004769", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "다양한 실시예에 따르면, 전자 장치의 메모리를 관리함으로써 전자 장치가 느려지거나, 재시작되는 상황을 회피 함으로써 사용자 경험을 향상시킬 수 있다. 다양한 실시예에 따르면, 전자 장치는 힙 메모리 풀(heap memory full) 상황이 되더라도, 자유 메모리(free memory) 공간의 추가할당을 통해 전자 장치의 성능 저하를 방지할 수 있다. 다양한 실시예에 따르면, 전자 장치는 메모리 리크(leak)와 같은 지속적인 힙 메모리의 사용이 발생할 경우, 사 용자가 전자 장치를 사용하지 않는 시점에 선택적 리셋(silent reset)을 수행하여, 사용자가 성능 저하를 체감 하지 않고 전자 장치를 복구시킬 수 있다."}
{"patent_id": "10-2021-0004769", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예:스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 다양한 실시예에 따른 힙 메모리 공간을 구성하는 동작을 나타낸다. 도 2를 참조하면, 다양한 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)는 프로세서(예: 도 1의 프로 세서)을 이용하여 하나 이상의 프로세스 객체를 실행할 수 있다. 프로세스 객체는 프로세서에 의해 실행되는 서비스 또는 프로그램(예: 도 1의 프로그램)을 포함할 수 있다. 예를 들어, 프로세스 객체의 종 류는 어플리케이션 부모 프로세스, 시스템서버(systemserver), 라지 힙 어플리케이션(large heap application) 또는 일반 어플리케이션(예: 도 1의 어플리케이션)을 포함할 수 있다. 다양한 실시예에 따르면, 시스템서버는 OS(operating system) 역할을 하는 프로세스를 의미할 수 있고, 라 지 힙 어플리케이션은 일반 어플리케이션에 비하여 상대적으로 큰 공간의 힙 메모리를 필요로하는 어플리케이션 의 종류를 의미할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체에 기초하여 전자 장치의 선택적 리셋(silent reset) 여부를 관리할 수 있다. 선택적 리셋은 사용자가 전자 장치를 사용하지 않을 경우, 전자 장치 를 재시작(예: 플랫폼 리셋)하여 슬러기시(sluggish) 문제 상황을 복구하는 동작을 의미할 수 있다. 선택 적 리셋은 전자 장치의 재시작 발생 시점 및 발생 시점 이후에 사용자가 전자 장치의 재시작을 인지 하지 못하도록 하는 재시작을 의미할 수 있다. 예를 들어, 선택적 리셋 또는 플랫폼 리셋은 프로그램의 동작 중에 운영 체제(예: 도 1의 운영 체제)의 적어도 일부분(예: 커널)은 프로세서 및 메모리(예: 도 1의 메모리 또는 메모리) 상에 동작을 유지하고, 어플리케이션(예: 도 1의 어플리케이션) 내 지 미들웨어(예: 도 1의 미들웨어 또는 플랫폼)을 초기화 또는 리셋하는 동작을 포함할 수 있다. 다양한 실시예에 따르면, 메모리는 데이터를 저장할 수 있는 메모리 공간을 포함할 수 있다. 메모리(13 0)에 대응하는 메모리 공간에는 프로세서에 의해 실행되는 프로세스 객체에 대응되는 힙 메모리 공간(heap memory space)이 할당될 수 있다. 힙 메모리 공간은 프로세서에 의해 실행되는 프로세스에 따라 VM(virtual machine) 영역에서 대응되는 프로세스 객체(예: Java 객체)를 저장하는 메모리 공간을 의미할 수 있 다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류에 기초하여 프로세스 객체에 힙 메모리 공간을 할당할 수 있다. 각각의 프로세스 객체는 고유의 힙 메모리를 가질 수 있다. 예를 들어, 운영 체제(예: 안드로이드 또는 iOS)의 어플리케이션들은 고유의 힙 메모리를 가질 수 있다. 다양한 실시예에 따르면, 운영 체제의 어플리케이션은 어플리케이션의 시스템 특성(system propert y)를 통해 고유의 힙 메모리 공간의 크기가 결정될 수 있다. 어플리케이션의 시스템 특성에 따라 힙 메모 리 공간의 최대 제한(max limit)이 달라질 수 있다. 예를 들어, 시스템 특성은 dalvik.vm.heapgrowthlimit, dalvik.vm.heapmaxfree, dalvik.vm.heapminfree, dalvik.vm.heapsize, dalvik.vm.heapstartsize 및 dalvik.vm.heaptargetutilization를 포함할 수 있고, 각각의 시스템 특성은 예를 들어, 256, 8, 2, 512, 8 MB 및 75 %의 설정값으로 힙 메모리 공간의 최대 제한을 가질 수 있다. heaptargetutilization은 현재 할당된 힙 메모리의 크기에 대한 비율을 의미할 수 있다. 다양한 실시예에 따르면, 프로세스 객체는 프로세스 객체의 종류에 따라 서로 다른 시스템 특성을 가질 수 있다. 예를 들어, 시스템서버 또는 라지 힙 어플리케이션은 dalvik.vm.heapsize를 시스템 특성으로 가질 수 있 고, 512 MB를 힙 메모리 공간의 최대 제한으로 가질 수 있다. 일반 어플리케이션은 dalvik.vm.heapgrowthlimit를 시스템 특성으로 가질 수 있고, 256 MB를 힙 메모리 공간의 최대 제한으로 가질 수 있다. 다양한 실시예에 따르면, 프로세서는 어플리케이션 부모 프로세스(예: Zygote 프로세스)로부터 프로 세스를 포크(fork)하여 어플리케이션(예: 자식 프로세스)을 생성할 수 있다. 프로세서는 어플리케 이션 부모 프로세스에 힙 메모리 공간을 할당할 수 있다. 프로세서는 어플리케이션 부모 프로 세스로부터 프로세스를 포크함으로써 어플리케이션에 힙 메모리 공간을 할당할 수 있다. 프로세서 는 포크 함수(예: fork())를 실행하여 어플리케이션 부모 프로세스의 힙 메모리 공간을 어플리 케이션의 힙 메모리 공간으로 할당(예: 힙 메모리 공간의 참조자를 공유)할 수 있다. 포크 동 작에서 부모 프로세스의 메모리 공간을 자식 프로세스에게 공유하여 할당하는 내용은 당업자들에게 자명한 내용이다. 다양한 실시예에 따르면, 프로세서는 미리 결정된 시스템 특성을 이용하여 어플리케이션에 초기 힙 메모리 공간을 할당할 수 있다. 예를 들어, 프로세서는 dalvik.vm.heapstartsize의 값을 어플리케이션 의 초기 힙 메모리 공간으로 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 할당된 초기 힙 메모리 공간이 충분하지 않을 경우, 프로세스 내에서 가비지 수집기(garbage collector)를 호출하여, 가비지 수집(garbage collection)을 수행할 수 있다. 가비지 수집은 프로세스의 실행에 필요 없는 가비지(또는, 쓰레기) 프로세스 객체를 찾아서 지움으로써 메모리 공간을 확보하는 동작을 의미할 수 있다. 도 3은 다양한 실시예에 따른 힙 메모리 공간을 할당하는 동작을 나타낸다. 도 3을 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 어플리케이션 부모 프로세스 에 힙 메모리 공간을 할당할 수 있다. 프로세서는 어플리케이션 부모 프로세스로부터 프 로세스를 포크함으로써 어플리케이션에 힙 메모리 공간을 할당할 수 있다. 프로세서는 포크 함수(예: fork())를 실행하여 어플리케이션 부모 프로세스의 힙 메모리 공간을 어플리케이션의 힙 메모리 공간으로 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 어플리케이션에 할당되는 힙 메모리 공간을 조정할 수 있 다. 프로세서는 시스템 특성을 참조하여 어플리케이션에 할당되는 힙 메모리 공간을 조정할 수 있다. 예를 들어, 프로세서는 dalvik.vm.heapmaxfree, dalvik.vm.heapminfree 또는 dalvik.vm. heaptargetutilization의 값을 참조하여 힙 메모리 공간을 조정할 수 있다. 프로세서는 조정을 통해 라지 힙 설정에 따른 최대 제한까지 힙 메모리 공간을 조정함으로써 어플리케이션에 힙 메모리 공간 을 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류에 기초한 어플리케이션 부모 프로세스로 부터의 포크 동작 이후에, 라지 힙 사용 여부에 기초하여 힙 메모리 공간을 조정할 수 있다. 예를 들어, 프로세서는 Zygote 포크 이후의 라지 힙 사용 여부에 따라 힙 메모리 공간을 조정할 수 있다. 다양한 실시예에 따르면, 포크 함수가 실행되면, 어플리케이션 부모 프로세스에 잡혀있는 힙 메모리 공간 이 어플리케이션의 힙 메모리 공간으로 할당되는데, 라지 힙을 사용하지 않는 어플리케이션의 경우, 프로세서는 어플리케이션 특성의 dalvik.vm.heapgrowthlimit에 설정된 힙 메모리 공간의 최대 제한 만큼만을 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 라지 힙을 사용하지 않는 어플리케이션에 대해서 API(application programming interface)를 제공함으로써 dalvik.vm.heapgrowthlimit 초과하거나 필요없는 힙 메모리 공간(37 0)을 언맵(unmap)하여 미리 예약한 힙 메모리 공간을 반환할 수 있다. 예를 들어, 프로세서는 dalvik.system.VMRuntime.getRuntime().clampGrowthLimit() API를 이용하여 dalvik.vm.heapgrowthlimit 에 대 응되는 값으로 힙 메모리 공간을 제한할 수 있다. 도 4는 다양한 실시예에 따른 시스템 서버의 힙 메모리 구성 동작을 나타낸다. 도 4를 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 프로세스 객체의 종류에 기 초하여 프로세스 객체에 힙 메모리 공간을 할당할 수 있다. 프로세서는 프로세스 객체에 대응되는 힙 메모리 공간에 추가 힙 메모리 공간을 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 도 2 및 도 3에서 설명한 것 과 동일한 방식으로 어플리케이션 부모 프로세스에 힙 메모리 공간을 할당할 수 있다. 프로세서는 어플리케이션 부모 프로세스의 초기화 시 힙 메모리를 할당하기 위한 설정값 들을 수신할 수 있다. 프로세서는 어플리케이션 부모 프로 세스에 추가 힙 메모리 공간을 할당할 수 있다. 예를 들어, 프로세서는 힙 매핑(예: Java 힙 매핑) 과정에서, dalvik.vm.heapsize에 설정된 값의 일부를 추가 힙 메모리 공간으로 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 시스템서버의 생성을 위해 어플리케이션 부모 프로세스로 부터 포크를 수행하고, 포크를 통해 시스템서버는 어플리케이션 부모 프로세스에 매핑된 힙 메모리공간 및 추가 힙 메모리 공간을 그대로 사용할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류를 판단할 수 있다. 프로세스 객체의 종류는 도 2에서 설명한 것과 같이, 시스템서버, 라지 힙 어플리케이션 또는 일반 어플리케이션을 포함할 수 있다. 프로세서는 프로세스 객체의 종류가 시스템서버인지 여부를 판단할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류가 시스템서버인 경우, 추가 힙 메모리 공 간 및 힙 메모리 공간을 합쳐서 프로세스 객체에 할당된 힙 메모리 공간으로 사용할 수 있다. 다양한 실시예에 따르면, 프로세서는 시스템 특성에 설정된 값에 기초하여 힙 메모리 공간을 할당할 수 있다. 예를 들어, 시스템서버에 할당되는 힙 메모리 공간은 dalvik.vm.heapsize + 추가 힙 메모 리 공간일 수 있다. 도 5는 다양한 실시예에 따른 라지 힙 어플리케이션의 힙 메모리 구성 동작을 나타낸다. 도 5를 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 프로세스 객체의 종류에 기 초하여 프로세스 객체에 힙 메모리 공간을 할당할 수 있다. 프로세서는 프로세스 객체에 대응되는 힙 메모리 공간에 추가 힙 메모리 공간을 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 도 2 및 도 3에서 설명한 것 과 동일한 방식으로 어플리케이션 부모 프로세스에 힙 메모리 공간을 할당할 수 있다. 프로세서는 어플리케이션 부모 프로세스의 초기화 시 힙 메모리를 할당하기 위한 설정값 들을 수신할 수 있다. 프로세서는 어플리케이션 부모 프로 세스에 추가 힙 메모리 공간을 할당할 수 있다. 예를 들어, 프로세서는 힙 매핑(예: Java 힙 매핑) 과정에서, dalvik.vm.heapsize에 설정된 값의 일부를 추가 힙 메모리 공간으로 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 어플리케이션의 생성을 위해 어플리케이션 부모 프로세스 로부터 포크를 수행하고, 포크를 통해 어플리케이션에 추가 힙 메모리 공간 및 힙 메모리 공간 을 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류에 기초하여 추가 힙 메모리 공간 및 힙 메모리 공간 중 적어도 하나의 공간에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류가 시스템 서버가 아닌 경우, 추가 힙 메모리 공간 및 힙 메모리 공간 중 적어도 하나의 공간에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류가 라지 힙 어플리케이션인 경우, 추가 힙 메모 리 공간에 대하여 언맵을 수행할 수 있다. 예를 들어, 프로세서는 라지 힙을 사용하는 라지 힙 어플 리케이션의 경우, zygote 포크를 수행한 후, 매핑된 힙 메모리 공간 및 추가 힙 메모리 공간으로부터 추가 힙 메모리 공간을 언맵함으로써 힙 메모리 공간을 최종적으로 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 시스템 특성에 설정된 값에 기초하여 힙 메모리 공간을 할당할 수 있다. 예를 들어, 시스템서버에 할당되는 힙 메모리 공간은 dalvik.vm.heapsize 과 같은 값일 수 있다. 도 6은 다양한 실시예에 따른 일반 어플리케이션의 힙 메모리 구성 동작을 나타낸다. 도 6을 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 프로세스 객체의 종류에 기 초하여 프로세스 객체에 힙 메모리 공간을 할당할 수 있다. 프로세서는 프로세스 객체에 대응되는 힙 메 모리 공간에 추가 힙 메모리 공간을 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 도 2 및 도 3에서 설명한 것 과 동일한 방식으로 어플리케이션 부모 프로세스에 힙 메모리 공간을 할당할 수 있다. 프로세서는 어플리케이션 부모 프로세스의 초기화 시 힙 메모리를 할당하기 위한 설정값 들을 수신할 수 있다. 프로세서는 어플리케이션 부모 프로 세스에 추가 힙 메모리 공간을 할당할 수 있다. 예를 들어, 프로세서는 힙 매핑(예: Java 힙 매핑) 과정에서, dalvik.vm.heapsize에 설정된 값의 일부를 추가 힙 메모리 공간으로 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 어플리케이션의 생성을 위해 어플리케이션 부모 프로세스 로부터 포크를 수행하고, 포크를 통해 어플리케이션에 추가 힙 메모리 공간 및 힙 메모리 공간 을 할당할 수 있다. 다양한 실시예에 따르면, 프로세서 프로세스 객체의 종류에 기초하여 추가 힙 메모리 공간 및 힙 메 모리 공간 중 적어도 하나의 공간에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류가 시스템 서버가 아닌 경우, 추가 힙 메모리 공간 및 힙 메모리 공간 중 적어도 하나의 공간에 대하여 언맵을 수행할 수 있다. 예를 들어, 프로 세서는 프로세스 객체의 종류가 일반 어플리케이션인 경우, 추가 힙 메모리 공간 및 힙 메모리 공간 의 일부에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류가 일반 어플리케이션인 경우, 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간을 제외한 힙 메모리 공간에 대하여 언맵을 수행할 수 있다. 제 한 힙 메모리 공간을 제외한 힙 메모리 공간은 추가 힙 메모리 공간 및 힙 메모리 공간의 일부 를 포함할 수 있다. 제한 힙 메모리 공간은 시스템 특성에 포함된 값일 수 있다. 프로세서는 프로 세스 객체의 종류가 일반 어플리케이션인 경우, zygote 포크를 수행한 후, dalvik.vm.heapgrowthlimit에 설정된 힙 메모리 공간을 제한 힙 메모리 공간으로 남겨 놓고 나머지 힙 메모리 공간을 모두 언맵할 수 있다. 다 시 말해, 프로세서는 dalvik.vm.heapgrowthlimit와 동일한 값을 일반 어플리케이션의 힙 메모리 공간으로 할당할 수 있다. 다양한 실시예에 따르면, 프로세서는 힙 메모리 공간에 여유가 없는 힙 풀(heap full) 상황이 되더라도 자 유 메모리(free memory)를 추가 힙 메모리 공간으로 추가 할당함으로써 지연 없는 힙 메모리 공간의 할당 을 가능케함으로써 전자 장치(예: 도 1의 전자 장치)의 성능 저하를 방지할 수 있다. 도 7 은 다양한 실시예에 따른 전자 장치의 메모리 관리 동작의 흐름도이다. 도 7을 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동작을 모니터링함으로써 전자 장치(예: 도 1의 전자 장치)의 선택적 리셋 여부 를 관리할 수 있다. 일 실시예에 따르면, 모니터링은 현재 힙 메모리 사용량, 힙 메모리 여유 공간, 힙 메모리 회수 동작시 소요 시간을 측정하는 동작을 포함할 수 있다. 모니터링은 차단 횟수(block count)가 임계값을 초 과하는지 여부를 확인하고, 힙 메모리가 임계값을 초과한 경우, 다시 임계값 이하로 감소하는지 여부를 확인하 는 동작을 포함할 수 있다. 프로세서는 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동작을 모니 터링함으로서 전자 장치의 선택적 리셋 여부를 관리할 수 있다. 선택적 리셋 여부의 관리는 디스플레이 모듈(예: 도 1의 디스플레이 모듈)의 사용 여부, 음향 출력 모듈(예: 도 1의 음향 출력 모듈)의 사용 여부, 통신 모듈(예: 도 1의 통신 모듈)의 사용 여부를 확인하는 동작을 포함할 수 있다. 선택적 리셋 여 부의 관리는 네비게이션 어플리케이션의 사용 여부, 사용자의 전자 장치의 사용 여부를 확인하는 동작을 포함할 수 있다. 힙 메모리 공간에 대한 회수 동작은 도 2에서 설명한 가비지 수집 동작을 포함할 수 있다. 다양한 실시예에 따르면, 프로세서가 실행하는 임의의 스레드는 시스템서버의 비정상 상태가 감지되면 플 랫폼 리셋(platform reset)을 수행하여 전자 장치(예: 도 1의 전자 장치)를 복구시킬 수 있다. 예를 들어, 모니터링 서비스(platform monitoring service)의 일종인 watchdog 스레드는 시스템서버의 비정상 상태 가 감지되면 플랫폼 리셋을 수행함으로써 전자 장치를 복구시킬 수 있다. 플랫폼 리셋은 시스템서버의 재 시작 및 상호의존성을 갖는 프로세스들의 종료 및 재시작 동작을 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치대한 초기화를 수행할 수 있다. 초기화를 수행 한 뒤, 프로세서는 실행되는 스레드들 중에서 차단된 스레드가 있는지 여부를 판단할 수 있다. 차단 된 스레드가 있는 경우, 프로세서는 플랫폼 리셋을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 차단된 스레드가 없는 경우, 슬러기쉬 상태 및 선택적 리셋 여부를 체크할 수 있다. 프로세서는 슬러기쉬 상태 및 선택적 리셋 체크 결과에 따라 전자 장치를 초 기화할 수 있다. 프로세서는 슬러기쉬 상태 및 선택적 리셋 체크 결과에 따라 30초 대기를 수행할 수 있다. 다양한 실시예에 따르면, 30초는 차단된 스레드가 있는지를 판단하는 주기를 의미할 수 있다. 차단된 스레드가 있는지 판단하는 주기는 필요에 따라 30초 보다 짧거나 길 수 있다. 도8은 다양한 실시예에 따른 전자 장치의 메모리 관리 동작의 흐름도이고, 도 9는 다양한 실시예에 따른 슬러기 쉬(sluggish) 상태를 체크하는 동작의 흐름도이고, 도 10은 다양한 실시예에 따른 전자 장치의 사용 상태를 체 크하는 동작의 흐름도이다. 도 8 내지 도 10을 참조하면, 프로세서(예: 도 1의 프로세서)는 전자 장치(예: 도 1의 전자 장치)에 대하여 초기화를 수행할 수 있다. 초기화를 수행한 뒤, 프로세서는 실행되는 스레드들 중에서 차단 된 스레드가 있는지 여부를 판단할 수 있다. 차단된 스레드가 있는 경우, 프로세서는 플랫폼 리셋을 수행할 수 있다. 예를 들어, 플랫폼 리셋은 선택적 리셋(silent reset)을 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간의 크기 또 는 회수 동작의 모니터링 결과 기초하여 메모리(예: 도 1의 메모리)를 관리할 수 있다. 프로세서는 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간의 크기 또는 상기 힙 메모리 공간에 대한 회수 동작 에 기초하여 전자 장치(예: 도 1의 전자 장치)의 선택적 리셋(silent reset)을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 힙 메모리 공간의 정보를 파악하기 위해 API를 사용할 수 있다. 프 로세서가 힙 메모리 공간의 정보를 파악하기 위해 사용하는 API는 Runtime.getRuntime().maxMemory(), Runtime.getRuntime().totalMemory() 및Runtime.getRuntime().freeMemory()를 포함할 수 있다. 여기서, Runtime.getRuntime().maxMemory()는 Dalvik 힙 메모리 공간의 최대 크기를 파악하기 위한 API이고, Runtime.getRuntime().totalMemory()는 Dalvik 힙 메모리 공간의 크기(풋프린트(footprint))를 파악하기 위한 API일 수 있다. Runtime.getRuntime().freeMemory()는 Dalvik 힙 프리(heap free) 공간의 크기를 파악하기 위 한 API일 수 있다. 프로세서는 totalMemory()로부터 freeMemory() 값을 뺌으로써 할당된 Dalvik 힙 (Dalvik heap allocated) 메모리 공간의 크기를 계산할 수 있다. 다양한 실시예에 따르면, 프로세서는 API를 사용하여 기본적인 힙 메모리 공간의 정보를 파악하고, 런타임 (runtime) API를 이용하여 가비지 수집과 관련된 정보를 추가적으로 파악할 수 있다. 예를 들어, 프로세서 는 시스템서버의 힙 메모리 사용량이 정해진 제한(예: 512MB)에 도달하였는지 여부 및 힙 메모리 사용량이 정해진 제한에 도달한 상태가 유지되는 시간(예: 10분)을 파악할 수 있다. 프로세서는 시스템서버에 추가 힙 메모리 공간을 할당하면서 정해진 제한에 도달하기까지 HeaTaskDaemon이 아닌 스레드에서 가비지 수집을 최 소화함으로써 전자 장치가 버벅거리거나 느려지는 현상을 방지할 수 있다. 다양한 실시예에 따르면, 프로세서는 차단 가비지 수집 횟수(blocking garbage collection count) 또는 차단 가비지 수집 시간(blocking garbage collection duration)에 기초하여 메모리를 관리할 수 있다. 프로세서는 차단 가비지 수집 횟수 또는 차단 가비지 수집 시간이 미리 결정된 임계값을 초과하는 경우에, 전자 장치의 선택적 리셋을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 차단 가비지 수집 횟수 또는 차단 가비지 수집 시간을 모니터링하여 임계값 초과 여부를 판단하고, 가비지 수집 동작으로 인해 프로세스에 미치는 영향을 모니터링함으로써 차단 가 비지 수집 횟수 또는 차단 가비지 수집 시간이 임계값을 벗어나는지 여부를 판단할 수 있다. 이 때, 프로세서 는 차단 가비지 수집 횟수와 시간 외에 전체 가비지 수집 발생 횟수(full garbage collection count)도 모니터링할 수 있다. 다양한 실시예에 따르면, 프로세서는 차단된 스레드가 없는 경우, 힙 메모리 상태를 체크하고 전자 장치 가 슬러기쉬 상태가 아닌지 여부를 판단할 수 있다. 프로세서는 전자 장치가 슬러기쉬 상 태가 아닌 경우 30초를 대기할 수 있다. 프로세서는 시스템서버의 힙 메모리 상태에 기초하여 전자 장치의 성능 저하를 검출할 수 있다. 프로세서는 전자 장치가 슬러기쉬 상태인 경우 전자 장치 의 상태를 체크하고, 전자 장치가 사용 중인지 여부를 판단할 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치가 사용 중인지 여부를 판단하고, 사용 중인지 여부의 판단 결과에 기초하여 메모리를 관리할 수 있다. 메모리의 관리 동작은 전자 장치에 대한 선택적 리 셋을 포함할 수 있다. 프로세서는 디스플레이 모듈(예: 도 1의 디스플레이 모듈) 또는 음향 출력 모 듈(예: 도 1의 음향 출력 모듈)이 턴 온되어 있는 경우, 전자 장치를 사용 중인 상태로 판단할 수 있 다. 프로세서는 통신 모듈(예: 도 1의 통신 모듈)을 이용한 통신이 수행되는 경우, 전자 장치를 사용 중인 상태로 판단할 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치가 사용 중인 경우, 전자 장치의 선택적 리셋 (silent reset)을 미리 결정된 시간만큼 연기시킬 수 있다. 예를 들어, 미리 결정된 시간은 30초일 수 있다. 도 9를 참조하면, 다양한 실시예에 따르면, 프로세서는 힙 메모리 공간의 제한과, 차단 가비지 수집 동작 에 기초하여 전자 장치가 슬러기쉬 상태인지 여부를 판단할 수 있다. 프로세서는 힙 메모리 공간이 힙 메모리 공간에 대한 제한보다 작은지 여부를 판단할 수 있다. 프로세서는 힙 메모리 공간이 힙 메모리 공간에 대한 제한보다 작은 경우 30초 대기를 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 힙 메모리 공간이 힙 메모리 공간에 대한 제한 보다 크거나 같은 경 우, 차단 가비지 수집(garbage collection)이 임계값 이하인지 여부를 판단할 수 있다. 임계값은 차단 가 비지 수집 횟수에 대한 임계값 또는 차단 가비지 수집 시간에 대한 임계값을 포함할 수 있다. 프로세서는 차단 가비지 수집이 임계값보다 큰 경우에 30초 대기를 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 차단 가비지 수집이 임계값보다 작거나 같은 경우에 전자 장치 가 넌-슬러기쉬(non-sluggish) 상태인지 여부를 판단할 수 있다. 프로세서는 전자 장치가 넌- 슬러기쉬 상태인 경우에 30초 대기를 수행할 수 있고, 프로세서는 전자 장치가 넌-슬러기쉬 상태가 아닌 경우에 전자 장치의 상태를 체크하고, 전자 장치가 사용 중인지 여부를 판단할 수 있다. 도 10을 참조하면, 다양한 실시예에 따르면, 힙 메모리 상태 체크 결과 전자 장치가 슬러기쉬 상태인 경우, 프로세서는 전자 장치의 상태를 체크하여 전자 장치가 사용 중인지 여부를 판단할 수 있 다. 다양한 실시예에 따르면, 프로세서는 전자 장치의 디스플레이 모듈이 턴 온되어 있는지 여부를 판단할 수 있다. 프로세서는 디스플레이 모듈 턴 온되어 있는 경우, 30초 대기를 수행할 수 있 다. 다양한 실시예에 따르면, 프로세서는 디스플레이 모듈이 턴 온되어 있지 않은 경우, 음향 출력 모듈 이 턴 온되어 있는지 여부를 판단할 수 있다. 프로세서는 음향 출력 모듈이 턴 온되어 있 는 경우, 30초 대기를 수행할 수 있다. 음향 출력 모듈이 턴 온되어 있는 경우는, 백그라운드로 음 악이 재생 중인 경우를 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는 음향 출력 모듈이 턴 온되어 있지 않은 경우, 통신 모듈이 턴 온되어 있는지 여부를 판단할 수 있다. 프로세서는 통신 모듈이 턴 온되어 있는 경우, 30초 대기를 수행할 수 있다. 통신 모듈이 턴 온되어 있는 경우는 통화 중인 경우를 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는 통신 모듈이 턴 온되어 있지 않은 경우, 전자 장치 상에서 네비게이션 어플리케이션이 턴 온되어 있는지 여부를 판단할 수 있다. 프로세서는 네비게이션 어플 리케이션이 턴 온되어 있는 경우, 30초 대기를 수행할 수 있다. 네비게이션 어플리케이션이 턴 온되어 있 는 경우는, 백그라운드에서 네비이게이션 어플이 실행 중인 경우를 포함할 수 있다. 다양한 실시예에 따르면, 프로세서는 네비게이션 어플리케이션이 턴 온되어 있지 않은 경우, 전자 장치 가 사용 중인지 여부를 판단할 수 있다. 프로세서는 전자 장치가 사용 중인 경우, 30초 대 기를 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치가 사용 중이 아닌 경우, 플랫폼 리셋을 수행할 수 있다 . 플랫폼 리셋은 선택적 리셋을 포함할 수 있다. 도 11은 다양한 실시예에 따른 전자 장치의 메모리 관리 동작의 흐름도이다. 도 11을 참조하면, 다양한 실시예에 따르면, 프로세서(예: 도 1의 프로세서)는 전자 장치(예: 도 1의 전자 장치)의 초기화를 수행할 수 있다. 프로세서는 차단된 스레드가 있는지 여부를 판단할 수 있 다. 프로세서는 차단된 스레드가 있는 경우 플랫폼 리셋을 수행할 수 있다. 프로세서 는 차단된 스레드가 없는 경우 슬러기쉬 상태 및 선택적 리셋 여부를 체크할 수 있다. 프로세서는 슬러기쉬 상태 및 선택적 리셋 체크 결과에 기초하여 30초 대기를 수행할 수 있다.다양한 실시예에 따르면, 프로세서는 슬러기쉬 상태인지 여부를 판단할 수 있다. 프로세서는 힙 메모리 공간이 힙 메모리 공간에 대한 제한보다 작은지 여부를 판단할 수 있다. 프로세서는 힙 메모리 공간이 힙 메모리 공간보다 작은 경우, 30초 대기를 수행할 수 있다. 프로세서는 힙 메모리 공간이 힙 메모리 공간보다 크거나 같은 경우 차단 가비지 수집이 임계값보다 큰지 여부를 판단할 수 있다 . 프로세서는 차단 가비지 수집이 임계값 보다 큰 경우, 30초 대기를 수행할 수 있다. 프로 세서는 차단 가비지 수집이 임계값보다 작거나 같은 경우, 전자 장치가 넌-슬러기쉬 상태인지 여부를 판단할 수 있다. 프로세서는 전자 장치가 넌-슬러기쉬 상태인 경우에 30초 대기를 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치가 넌-슬러기쉬 상태가 아닌 경우에 전자 장치가 사용 중인지 여부를 판단할 수 있다. 프로세서는 디스플레이 모듈(예: 도 1의 디스플레이 모듈 )이 턴 온되어 있는지 여부를 판단할 수 있다. 프로세서는 디스플레이 모듈이 턴 온되어 있는 경우 30초 대기를 수행할 수 있다. 프로세서는 디스플레이 모듈이 턴 온되어 있지 않은 경우, 음향 출력 모듈(예: 도 1의 음향 출력 모듈)이 턴 온되어 있는지 여부를 판단할 수 있다. 프 로세서는 음향 출력 모듈이 턴 온되어 있는 경우, 30초 대기를 수행할 수 있다. 프로세서 는 음향 출력 모듈이 턴 온되어 있지 않은 경우, 통신 모듈이 턴 온되어 있는지 여부를 판단할 수 있다. 프로세서는 통신 모듈이 턴 온되어 있는 경우, 30초 대기를 수행할 수 있다. 프로세서는 통신 모듈이 턴 온되어 있지 않은 경우, 네비게이션 어플리케이션이 턴 온되어 있는지 여 부를 판단할 수 있다. 프로세서는 네비게이션 어플리케이션이 턴 온되어 있지 않은 경우, 전자 장 치가 사용 중인지 여부를 판단할 수 있다. 프로세서는 전자 장치가 사용 중인 경우, 30 초 대기를 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치가 사용 중이 아닌 경우, 전자 장치에 대하여 선 택적 리셋을 수행할 수 있다. 프로세서는 도 11에 도시된 동작을 통해, 지속적으로 전자 장치(10 1)의 힙 메모리 사용(예: 메모리 리크(memory leak))가 발생할 경우, 사용자가 전자 장치를 사용하지 않는 시점에 선택적 리셋을 수행함으로써, 사용자가 성능 저하를 체감하기 전에 전자 장치를 복수할 수 있다. 표 1은 프로세서가 힙 메모리 공간이 모두 사용 중인 힙 풀상황에 대하여 메모리를 관리하지 않은 경우와 관리한 경우의 성능 측정 결과를 나타낼 수 있다. 표 1"}
{"patent_id": "10-2021-0004769", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "힙 메모리 사용량베이스(base) 88MB/512MB메모리 관리 전 512MB/512MB메모리 관리 후 517MB/768MB 가비지 수집 횟수 (10ms↑) 112 687 123 가비지 수집을 완료하기까지의 총 대 기 시간519.549ms 1933.129s 139.844s 총 가비지 수집 횟수 454 748 428 총 가비지 수집 시간 51.621s 367.480s 384.140s 총 차단 가비지 수집 횟수 72 691 72 총 차단 가비지 시간 24.934s 363.257s 349.138s 표 1을 참조하면, 다양한 실시예에 따르면, 프로세서는 메모리 관리를 통해 사용자가 전자 장치의 느 려짐을 체감할 수 있는 지표인 10ms 이상 소요된 가비지 수집 횟수 및 차단 가비지 수집 횟수를 힙 풀 발생 전 과 유사한 수준으로 감소시킬 수 있다. 프로세서는 메모리 관리를 통해 가비지 수집을 완료하기까지의 총 대기시간을 7% 수준까지 감소시킬 수 있다. 도 12는 다양한 실시예에 따른 전자 장치의 동작의 흐름도이다. 도 12를 참조하면, 전자 장치(예: 도 1의 전자 장치)의 메모리(예: 도 1의 메모리)를 관리하는 방법 에 있어서, 메모리에 대응하는 메모리 공간에는 프로세서(예: 도 1의 프로세서)에 의해 실행되는 프 로세스 객체에 대응되는 힙 메모리 공간이 할당될 수 있다.다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류에 기초하여 프로세스 객체에 힙 메모리 공간을 할당할 수 있다. 프로세스 객체의 종류는 시스템서버, 라지 힙 어플리케이션 및 일반 어플리케이션을 포 함할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체에 대응되는 힙 메모리 공간에 추가 힙 메모리 공간을 할당할 수 있다. 프로세서는 프로세스 객체의 종류에 기초하여 추가 힙 메모리 공간 및 힙 메모리 공간 중 적어도 하나의 공간에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체의 종류가 시스템서버인지 여부를 판단할 수 있다. 프 로세서는 프로세스 객체의 종류가 시스템서버가 아닌 경우, 추가 힙 메모리 공간 및 힙 메모리 공간 중 적 어도 하나의 공간에 대하여 언맵을 수행할 수 있다. 프로세서는 프로세스 객체의 종류가 라지 힙 어플리 케이션인 경우, 추가 힙 메모리 공간에 대하여 언맵을 수행할 수 있다. 프로세서는 프로세스 객체의 종류 가 일반 어플리케이션인 경우, 추가 힙 메모리 공간 및 힙 메모리 공간의 일부에 대하여 언맵을 수행할 수 있다. 프로세서는 프로세스 객체의 종류가 일반 어플리케이션인 경우, 프로세스 객체에 대하여 미리 설정 된 제한 힙 메모리 공간을 제외한 힙 메모리 공간에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 프로세스 객체에 할당된 힙 메모리 공간의 사용 상태에 기초하여 메 모리를 관리할 수 있다. 프로세서는 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동 작을 모니터링함으로써 메모리를 관리할 수 있다. 프로세서는 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간의 크기 또는 회수 동작의 모니터링 결과 기초하여 메모리를 관리할 수 있다. 프로세 서는 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간의 크기 또는 힙 메모리 공간에 대한 회수 동작에 기초하여 전자 장치의 선택적 리셋을 수행할 수 있다. 프로세서는 차단 가비지 수집 횟수 또 는 차단 가비지 수집 시간에 기초하여 메모리를 관리할 수 있다. 프로세서는 차단 가비지 수집 횟수 또는 차단 가비지 수집 시간이 미리 결정된 임계값을 초과하는 경우에, 전자 장치의 선택적 리셋을 수행할 수 있다. 다양한 실시예에 따르면, 프로세서는 전자 장치의 사용 상태에 기초하여 메모리를 관리할 수 있 다. 프로세서는 전자 장치가 사용 중인지 여부를 판단하고, 사용 중인지 여부의 판단 결과에 기초하여 메모리를 관리할 수 있다. 프로세서는 디스플레이 모듈(예: 도 1의 160) 또는 음향 출력 모듈(예: 도 1의 155)이 턴 온되어 있는 경우, 전자 장치를 사용 중인 상태로 판단할 수 있다. 프로세서 는 통신 모듈(예: 도 1의 통신 모듈을 이용한 통신이 수행되는 경우, 전자 장치를 사용 중인 상 태로 판단할 수 있다. 프로세서는 전자 장치가 사용 중인 경우, 전자 장치의 선택적 리셋을 미 리 결정된 시간만큼 연기시킬 수 있다. 다양한 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)는 하나 이상의 프로세서(예: 도 1의 프로세서 )와, 상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리(예: 도 1의 메모리)를 포함하 고, 상기 메모리에 대응하는 메모리 공간에는 상기 프로세서에 의해 실행되는 프로세스 객체에 대응되는 힙 메 모리 공간(예: 도 4의 힙 메모리 공간)이 할당될 수 있고, 상기 프로세서는, 상기 프로세스 객체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할당하고, 상기 프로세스 객체에 할당된 힙 메모리 공간 에 대한 회수 동작을 모니터링함으로써 상기 메모리를 관리할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체에 대응되는 상기 힙 메모리 공간에 추가 힙 메 모리 공간(예: 도 4의 추가 힙 메모리 공간)을 할당하고, 상기 프로세스 객체의 종류에 기초하여 상기 추 가 힙 메모리 공간 및 상기 힙 메모리 공간 중 적어도 하나의 공간에 대하여 언맵(unmap)을 수행할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체의 종류가 시스템서버(예: 도 4의 시스템서버 )인지 여부를 판단하고, 상기 프로세스 객체의 종류가 시스템서버가 아닌 경우, 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간 중 적어도 하나의 공간에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체의 종류가 라지 힙 어플리케이션(예: 도 5의 어 플리케이션)인 경우, 상기 추가 힙 메모리 공간에 대하여 언맵을 수행하고, 상기 프로세스 객체의 종류가 일반 어플리케이션(예: 도 6의 어플리케이션)인 경우, 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간 의 일부에 대하여 언맵을 수행할 수 있다.다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체의 종류가 일반 어플리케이션인 경우, 상기 프로 세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간을 제외한 힙 메모리 공간에 대하여 언맵을 수행할 수 있 다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간의 크기 또는 상기 회수 동작의 모니터링 결과 기초하여 상기 메모리를 관리할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간의 크기 또는 상기 힙 메모리 공간에 대한 회수 동작에 기초하여 상기 전자 장치의 선택적 리셋(silent reset)을 수행할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 차단 가비지 수집 횟수(blocking garbage collection count) 또는 차단 가비지 수집 시간(blocking garbage collection duration)에 기초하여 상기 메모리를 관리할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 차단 가비지 수집 횟수 또는 상기 차단 가비지 수집 시간이 미 리 결정된 임계값을 초과하는 경우에, 상기 전자 장치의 선택적 리셋을 수행할 수 있다. 다양한 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)는, 하나 이상의 프로세서(예: 도 1의 프로세서 )와, 상기 프로세서에 의해 실행 가능한 인스트럭션을 저장하는 메모리(예: 도 1의 메모리)를 포함하 고, 상기 메모리에 대응하는 메모리 공간에는 상기 프로세서에 의해 실행되는 프로세스 객체에 대응되는 힙 메 모리 공간(예: 도 4의 힙 메모리 공간)이 할당될 수 있고, 상기 프로세서는, 상기 프로세스 객체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할당하고, 상기 전자 장치의 사용 상태에 기초하여 상기 메모리를 관리할 수 있다. 다양한 실시예에 따르면, 상기 프로세스 객체의 종류는, 시스템서버(systemserver), 라지 힙 어플리케이션 (large heap application) 및 일반 어플리케이션을 포함할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체에 대응되는 상기 힙 메모리 공간에 추가 힙 메 모리 공간을 할당하고, 상기 프로세스 객체의 종류에 기초하여 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공 간 중 적어도 하나의 공간에 대하여 언맵(unmap)을 수행할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체의 종류가 시스템서버인지 여부를 판단하고, 상 기 프로세스 객체의 종류가 시스템서버가 아닌 경우, 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간 중 적 어도 하나의 공간에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체의 종류가 라지 힙 어플리케이션인 경우, 상기 추가 힙 메모리 공간에 대하여 언맵을 수행하고, 상기 프로세스 객체의 종류가 일반 어플리케이션인 경우, 상기 추가 힙 메모리 공간 및 상기 힙 메모리 공간의 일부에 대하여 언맵을 수행할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 프로세스 객체의 종류가 일반 어플리케이션인 경우, 상기 프로 세스 객체에 대하여 미리 설정된 제한 힙 메모리 공간을 제외한 힙 메모리 공간에 대하여 언맵을 수행할 수 있 다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 전자 장치가 사용 중인지 여부를 판단하고, 사용 중인지 여부 의 판단 결과에 기초하여 상기 메모리를 관리할 수 있다. 다양한 실시예에 따르면, 상기 전자 장치는 디스플레이 모듈(예: 도 1의 디스플레이 모듈) 또는 음향 출력 모듈(예: 도 1의 음향 출력 모듈)을 더 포함하고, 상기 프로세서는, 상기 디스플레이 모듈 또는 상기 음향 출력 모듈이 턴 온되어 있는 경우, 상기 전자 장치를 사용 중인 상태로 판단할 수 있다. 다양한 실시예에 따르면, 상기 전자 장치는 통신 모듈(예: 도 1의 통신 모듈)을 더 포함하고, 상기 프로세 서는, 상기 통신 모듈을 이용한 통신이 수행되는 경우, 상기 전자 장치를 사용 중인 상태로 판단할 수 있다. 다양한 실시예에 따르면, 상기 프로세서는, 상기 전자 장치가 사용 중인 경우, 상기 전자 장치의 선택적 리셋을 미리 결정된 시간만큼 연기시킬 수 있다. 다양한 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)의 메모리(예: 도 1의 메모리)를 관리하는 방법에 있어서, 상기 메모리에 대응하는 메모리 공간에는 프로세서(예: 도 1의 프로세서)에 의해 실행되는 프로세스 객체에 대응되는 힙 메모리 공간(예: 도 4의 힙 메모리 공간)이 할당될 수 있고, 상기 전자 장치의 메모리 관리 방법은 상기 프로세스 객체의 종류에 기초하여 상기 프로세스 객체에 상기 힙 메모리 공간을 할 당하는 동작과, 상기 프로세스 객체에 할당된 힙 메모리 공간에 대한 회수 동작을 모니터링함으로써 상기 메모 리를 관리하는 동작과, 상기 전자 장치의 사용 상태에 기초하여 상기 메모리를 관리하는 동작을 포함할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치(#01)) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리(#36) 또는 외장 메모리(#38))에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램(#40))로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치(#01))의 프로세서(예: 프로세서 (#20))는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다."}
{"patent_id": "10-2021-0004769", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 2 및 도 3은 다양한 실시예에 따른 힙 메모리 공간을 구성하는 동작을 나타낸다. 도 4는 다양한 실시예에 따른 시스템 서버의 힙 메모리 구성 동작을 나타낸다. 도 5는 다양한 실시예에 따른 라지 힙 어플리케이션의 힙 메모리 구성 동작을 나타낸다. 도 6은 다양한 실시예에 따른 일반 어플리케이션의 힙 메모리 구성 동작을 나타낸다. 도 7 및 도8은 다양한 실시예에 따른 전자 장치의 메모리 관리 동작의 흐름도이다. 도 9는 다양한 실시예에 따른 슬러기쉬 상태를 체크하는 동작의 흐름도이다. 도 10은 다양한 실시예에 따른 전자 장치의 사용 상태를 체크하는 동작의 흐름도이다. 도 11은 다양한 실시예에 따른 전자 장치의 메모리 관리 동작의 흐름도이다.도 12는 다양한 실시예에 따른 전자 장치의 동작의 흐름도이다."}
