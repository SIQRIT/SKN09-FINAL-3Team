{"patent_id": "10-2018-7030661", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2018-0123142", "출원번호": "10-2018-7030661", "발명의 명칭": "인메모리 행렬 곱셈 및 뉴럴 네트워크에서 그것의 사용", "출원인": "쥐에스아이 테크놀로지 인코포레이티드", "발명자": "아케립 아비단"}}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "연관 메모리 어레이를 위한 방법으로서, 상기 연관 메모리 어레이의 연관된 컬럼에 행렬의 각 컬럼을 저장하는 단계 - 상기 행렬의 로우 j 내의 각 비트가 상기 어레이의 로우 R-matrix-row-j에 저장됨 -;상기 연관된 컬럼 각각에 벡터를 저장하는 단계 - 상기 벡터로부터의 비트 j가 상기 어레이의 로우 R-vector-bit-j에 저장됨 -;모든 연관된 컬럼 상에 불리안 함수의 결과를 동시에 수신하도록 벡터-행렬 쌍의 로우인 R-vector-bit-j와 R-matrix-row-j를 동시에 활성화하는 단계; 상기 벡터-행렬 쌍의 로우 사이의 곱을 계산하도록 상기 연관된 컬럼 상의 결과를 사용하는 단계; 및 상기 어레이 내의 로우 R-product-j에 상기 곱을 기입하는 단계를 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 어레이는 복수의 섹션을 포함하고, 상기 연관 메모리 어레이를 위한 방법은,각 쌍이 상기 섹션 중 하나에 있는 벡터-행렬 쌍의 곱셈을 저장하는 단계, 및상기 섹션 각각의 벡터-행렬 쌍을 동시에 활성화하는 단계를 더 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 각 벡터-행렬 쌍의 로우에 대하여, 상기 동시에 활성화하는 단계, 상기 사용하는 단계 및 상기 기입하는 단계를반복하는 단계, 및 상기 벡터 및 상기 행렬의 외적(cross product)을 계산하도록 모든 R-product 로우의 값을 더하는 단계를 더 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "연관 메모리 어레이를 위한 방법으로서, 상기 메모리 어레이 내의 승수 로우 R-matrix-row-j의 셀들 내에 행렬의 각 로우 j를 저장하는 단계;상기 메모리 어레이 내의 연관된 피승수 벡터 로우 R-vector-bit-j의 모든 셀 내에 벡터의 각 비트 j의 값을 저장하는 단계 - 로우 R-matrix-row-j 내의 각 셀은 대응하는 비트-라인 BLj에 의해 로우 R-vector-bit-j 내의셀에 연결됨 -; 및 모든 비트-라인 BLj 상에 불리안 함수의 결과를 동시에 수신하도록 벡터-행렬 쌍의 로우인 R-vector-bit-j와 R-matrix-row-j를 동시에 활성화하는 단계를 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 피승수 로우 R-vector-bit-j와 승수 로우 R-matrix-row-j 사이의 곱셈 연산의 곱을 계산하도록 상기 대응하는공개특허 10-2018-0123142-3-비트-라인 BLj 상의 값을 사용하는 단계를 더 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서, 상기 메모리 어레이 내의 곱 로우 R-product-j에 상기 곱을 기입하는 단계를 더 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서, 각 벡터-행렬 쌍의 로우에 대하여, 상기 동시에 활성화하는 단계, 상기 사용하는 단계 및 상기 기입하는 단계를반복하는 단계, 및비트-라인 당 R-product-j 로우들의 합을 계산하도록 상기 R-product-j 로우들을 활성화하는 단계를 더 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 메모리 어레이 내의 합 로우에 상기 합을 기입하는 단계를 더 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제4항에 있어서, 상기 벡터가 인공 뉴럴 네트워크의 입력 층이고, 상기 행렬이 상기 인공 뉴럴 네트워크의 숨겨진 층이고, 상기합은 상기 인공 뉴럴 네트워크의 출력 층인 것인, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "뉴럴 네트워크의 인 메모리 계산을 위한 방법으로서, 상기 뉴럴 네트워크는 행렬 내에 배열된 가중치를 가지고, 상기 뉴럴 네트워크의 인 메모리 계산을 위한 방법은, 연관 메모리 디바이스에 상기 행렬을 미리 저장하는 단계;벡터에 배열된 입력을 수신하여 상기 메모리 디바이스에 그 입력을 저장하는 단계; 및상기 입력 및 상기 가중치를 사용하여 상기 네트워크의 출력을 인-메모리 계산하는 단계를 포함하는, 뉴럴 네트워크의 인 메모리 계산을 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서, 상기 입력을 저장하는 단계는, 미리 저장된 가중치의 컬럼과 동일한 컬럼에 상기 입력의 카피(copy)를 저장하는 단계를 포함하는, 뉴럴 네트워크의 인 메모리 계산을 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "연관 메모리 어레이를 위한 방법으로서, 피승수 행렬 및 승수 행렬로부터의 각각의 연관된 피승수 비트 및 승수 비트를 개별의 연관 로우 상의 복수의컬럼 중 하나에 저장하는 단계 - 컬럼 상의 셀들이 비트-라인에 의해 연결됨 -;상기 비트-라인 상에 생성된 불리안 값을 사용하여 곱셈의 결과를 계산하도록 연관된 피승수 로우 및 승수 로우를 활성화하는 단계; 공개특허 10-2018-0123142-4-상기 비트-라인에 연결된 곱 로우 내의 셀에 상기 결과를 기입하는 단계 - 상기 피승수 행렬의 로우 및 상기 승수 행렬의 컬럼과 연관된 복수의 곱 로우는 글로벌 비트-라인에 의해 연결됨 -;모든 곱 로우의 합을 계산하도록 상기 글로벌 비트-라인 상에 생성된 불리안 결과를 사용하여, 상기 복수의 곱로우를 활성화하는 단계; 및 합 로우에 상기 합을 기입하는 단계를 포함하는, 연관 메모리 어레이를 위한 방법."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "인-메모리 계산을 위한 장치로서, 로우와 컬럼으로 배열된 메모리 어레이; 및프로세서를 포함하고, 상기 메모리 어레이는, 복수의 승수 로우 - 상기 승수 로우의 각각은 승수 행렬의 로우를 저장함 -,복수의 피승수 로우 - 상기 피승수 로우의 각각은 피승수 벡터의 비트의 복제(replica)를 저장하고, 피승수 로우의 셀들이 곱 비트-라인에 의해 승수 로우의 셀들에 연결됨 -,복수의 곱 로우 - 상기 곱 로우의 각각이 셀에 곱셈 결과를 저장하고, 곱 로우의 셀들은 곱 비트-라인에 연결되고 상기 복수의 곱 로우에 연결되는 합 비트-라인에 연결됨 -, 및합 로우 - 상기 합 로우 내의 각 셀이 합 비트-라인에 연결된 모든 곱 셀의 합을 저장함 - 을 포함하고, 상기 프로세서는 피승수 로우와 승수 로우를 동시에 활성화하고, 상기 곱 로우에 곱셈 결과를 동시에 기입하고,상기 곱 로우를 활성화하고, 상기 합 로우에 합 결과를 기입하는, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 승수 로우의 로우 및 상기 피승수 로우의 연관된 로우가 서로 인접한 것인, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제13항에 있어서, 곱 로우는 상기 연관된 승수 로우 및 상기 피승수 로우 중 하나에 인접한, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제13항에 있어서, 상기 곱 비트-라인 및 상기 합 비트-라인이 동일한 비트-라인인, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서, 한 쌍의 연관된 피승수 로우와 승수 로우를 한 번에 활성화하고 연관된 곱 로우에 곱셈 결과를 기입하는 제어기를 포함하는, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제13항에 있어서, 상기 메모리 어레이가 복수의 섹션으로 분할되는, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서, 공개특허 10-2018-0123142-5-상기 승수 행렬의 피승수 로우 및 대응하는 로우가 전용 섹션에 저장되는, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제18항에 있어서, 상기 승수 행렬의 피승수 로우 및 대응하는 로우의 곱셈이 전용 섹션에 저장되는, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "인-메모리 계산을 위한 장치로서,로우와 컬럼으로 배열된 메모리 어레이; 및프로세서를 포함하고, 상기 메모리 어레이는, 복수의 승수 로우 - 상기 승수 로우의 각각이 승수 행렬의 로우를 저장함 -,복수의 피승수 로우 - 상기 피승수 로우의 각각이 피승수 행렬의 로우의 비트의 복제를 저장하고, 피승수 로우의 셀들이 곱 비트-라인에 의해 승수 로우의 셀들에 연결됨 -,복수의 곱 로우 - 상기 곱 로우의 각각이 셀들에 곱셈 결과를 저장하고, 곱 로우의 셀들이 곱 비트-라인에 연결되고, 상기 복수의 곱 로우에 연결되는 합 비트-라인에 연결됨 -, 및복수의 합 로우 - 상기 합 로우의 각각이 합 비트-라인에 연결된 모든 곱 셀의 합을 저장하고, 상기 합 로우의셀들이 상기 곱 비트-라인에 연결됨 -을 포함하고,상기 프로세서는 피승수 로우와 승수 로우를 동시에 활성화하고, 상기 곱 로우에 곱셈 결과를 동시에 기입하고,상기 곱 로우를 활성화하고, 상기 합 로우에 합 결과를 기입하는, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제21항에 있어서, 상기 메모리 어레이는 복수의 섹션으로 분할되는, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제22항에 있어서, 상기 피승수 행렬의 각 로우는 전용 섹션에 저장되는, 인-메모리 계산을 위한 장치."}
{"patent_id": "10-2018-7030661", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본원의 연관 메모리 어레이를 위한 방법은, 상기 연관 메모리 어레이의 연관된 컬럼에 행렬의 각 컬럼을 저장하 는 단계 - 상기 행렬의 로우 j 내의 각 비트가 상기 어레이의 로우인 R-matrix-row-j에 저장됨 -; 상기 연관된 컬럼 각각에 벡터를 저장하는 단계 - 상기 벡터로부터의 비트 j가 상기 어레이의 로우인 R-vector-bit-j 내에 저 장됨 - 를 포함한다. 이 방법은 또한 모든 연관된 컬럼 상에 불리안 함수의 결과를 동시에 수신하도록 벡터-행 렬 쌍의 로우인 R-vector-bit-j와 R-matrix-row-j를 동시에 활성화하는 단계, 상기 벡터-행렬 쌍의 로우 사이의 곱을 계산하도록 상기 연관된 컬럼 상의 결과를 사용하는 단계 및 상기 어레이 내의 로우인 R-product-j에 상기 곱을 기입하는 단계를 포함한다."}
{"patent_id": "10-2018-7030661", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본원은 2016년 3월 23일 출원된 미국 가출원 제62/312,162호의 우선권 및 이익을 주장하고, 그 내용이 본원에 원용된다. 본원은 일반적으로 메모리 디바이스에 관한 것이고, 특히 연관 메모리 디바이스에서의 행렬 곱셈에 관한 것이다."}
{"patent_id": "10-2018-7030661", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "행렬 곱셈은 그래프 이론, 그래픽, 인공지능, 데이터 마이닝, 대규모 데이터 계산, 예측 분석, 딥 러닝, 뉴럴 네트워크 등과 같은 다양한 분야의 계산 절차 및 알고리즘에서 수행되는 공통 과제이다. 행렬 곱셈 절차는 복 잡한 절차이며 다수의 계산 리소스를 소비한다. 인공 뉴럴 네트워크는, 인간 뇌와 동일한 방법으로 문제점을 해결하도록 하는, 뇌 프로세스 정보에 의해 영향을 받은 계산 패러다임이다. 뇌는 서로 고도로 상호 연결된 다수의 셀로 이루어져 있다. 뇌에서의 정보는, 신호 가 시냅스라 불리는 셀들 사이에 전달되는 것을 가능하게 하는, 셀들 사이의 특화된 구조를 통하여 지나가는 신호(화학적 또는 전기적)를 사용하여 셀들 사이에 전달된다. 인공 뉴럴 네트워크는 뇌에서 흐름을 모방하여, 수학적으로 모델링되어 특정 입력에 따라 출력을 제공하도록 사 용된다. 인공 뉴럴 네트워크의 수학적 모델이 다중 가중화 링크(뇌의 셀들을 연결하는 시냅스를 나타냄)에 의 해 연결된 다중 노드(뇌의 셀들을 나타냄)을 포함한다. 노드 및 링크는 행렬 및 벡터에 의해 수학적으로 표현 되고 인공 뉴럴 네트워크의 활성화는 상당한 행렬 연산을 요구한다. A가 n × m 피승수 행렬이고 B가 m × p 승수 행렬이면, 그들의 행렬곱 AB가 n × p 출력 행렬이며, 여기서 A의 로우의 m개 엔트리가 B의 컬럼의 m개 엔트리로 곱해지고 합해져서 방정식 1에 기재된 AB의 엔트리를 제공한다: 방정식 1 행렬 곱셈을 수행하기 위하여, 피승수 행렬에서 컬럼의 수 m이 승수 행렬의 로우의 수 m과 동일해야 함을 주목 해야 한다. 벡터는 오직 하나의 로우를 갖는 행렬의 특정 유형이고, 예컨대 그 벡터는 n × m 행렬로서 인지될 수 있으며, 여기서 n = 1이다. 벡터 및 행렬의 곱셈은, 일반적으로, 전술한 방정식 1과 동일한 공식을 사용한다. 피승수 가 1 × p 벡터이고 승수가 p × m 행렬인 경우에, 곱셈의 결과는 1 × m 벡터이다. 일반적인 행렬 곱셈의 나이브 복잡도(nave complexity)가 O(mpn)이다. 피승수 행렬과 승수 행렬 둘 다 정방 행렬 (n x n)인 경우에 계산 복잡도는 O(n3)일 것이고, 피승수가 벡터 (1 x m)이고 승수가 행렬 (m x n)인 경우 에, 계산의 복잡도는 O(mn)일 것이다. 이제 설명할 도 1은 피승수 벡터 i(1x3), 승수 행렬 H(3x3) 및 결과 벡터 z(1x3)의 실시예를 도시한다. 피승수 벡터 i가, 값 i0, i1 및 i2를 각각 저장하는 3개 컬럼 C0, C1 및 C2을 구비한다. 승수 행렬 H은 3개 컬럼 C0, C1 및 C2, 및 3개 로우 R0, R1 및 R2를 포함한다. 행렬 H에 저장된 값들이 각각 두 디짓 아래에 기입한, j 및 k으로 라벨링되며, j는 로우를 나타내고, k는 컬럼을 나타낸다. 예를 들어, 값 H21은 로우 R2 및 컬럼 C1에 저 장된다. 벡터 z가 곱셈 z0, z1 및 z2의 결과를 저장한다. 도면에서, 벡터 i의 각 비트가 상이한 패턴을 가지며, 행렬 H의 각 로우가 상이한 음영의 색을 가지며, 벡터 z의 비트는 음영도 없고 패턴도 없다. 곱셈 결과, 벡터 z가 방정식 1에 따라 계산된다. 벡터가 오직 하나의 로우를 가지기 때문에, 아래 첨자 표시가 로우 수를 생략할 것이고(i00를 사용하는 대신에, 표기는 i0가 될 것임), 이러한 특정 실시예에 대한 방정식 1의 확장이 다음의 3개의 방정식으로 표현될 수 있다: 방정식 1-0, 방정식 1-1 및 방정식 1-2 z0 = i0 × H00 + i1 × H10 + i2 × H20 방정식 1-0 z1 = i0 × H01 + i1 × H11 + i2 × H21 방정식 1-1 z2 = i0 × H02 + i1 × H12 + i2 × H22 방정식 1-2 벡터-행렬 곱셈시 요구되는 곱셈의 시각적 표현이 도 2에 도시되고, 이제 설명하도록 한다. 피승수 벡터 i로부 터의 각 피연산자(비트)는 행렬 H의 전체 로우에 의해(예, 로우로부터의 각 피연산자(비트)에 의해) 곱해지는 것이 필요하다. 모든 곱셈 결과 사이의 합 연산이 도 2에 도시되지는 않는다. 피연산자들 사이의 곱셈이 연결 라인에 의해 시각화되고, 피연산자들 사이의 연결의 수가 m × n이고, 실시예에서, 연결의 수는 3×3 = 9임을 알아야 할 것이다. 행렬 곱셈은 피승수 행렬의 각 로우에 대하여 한번씩 여러 번의 벡터 곱셈을 반복하는 것으로 여겨질 수 있다."}
{"patent_id": "10-2018-7030661", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본원의 바람직한 실시태양에 따른 연관 메모리 어레이를 위한 방법을 제공한다. 이 방법은 상기 연관 메모리 어레이의 연관된 컬럼에 행렬의 각 컬럼을 저장하는 단계 - 상기 행렬의 로우 j 내의 각 비트가 상기 어레이의 로우인 R-matrix-row-j에 저장됨 -; 상기 연관된 컬럼 각각에 벡터를 저장하는 단계 - 상기 벡터로부터의 비트 j가 상기 어레이의 로우인 R-vector-bit-j 내에 저장됨 -를 포함한다. 이 방법은 또한 모든 연관된 컬럼 상에 불리안 함수의 결과를 동시에 수신하도록 벡터-행렬 쌍의 로우인 R-vector-bit-j와 R-matrix-row-j를 동시에 활 성화하는 단계, 상기 벡터-행렬 쌍의 로우 사이의 곱을 계산하도록 상기 연관된 컬럼 상의 결과를 사용하는 단 계 및 상기 어레이 내의 로우인 R-product-j에 상기 곱을 기입하는 단계를 포함한다. 또한, 본원의 바람직한 실시태양에 따르면, 상기 어레이는 복수의 섹션을 포함하고, 상기 방법은 또한 각각의 쌍이 상기 섹션 중 하나에 있는 벡터-행렬 쌍의 곱셈을 저장하는 단계, 및 상기 섹션 각각의 벡터-행렬 쌍을 동 시에 활성화하는 단계를 포함한다. 게다가, 본원의 바람직한 실시태양에 따르면, 이 방법은 또한 각각의 벡터-행렬 쌍의 로우에 대하여, 상기 동시 에 활성화하는 단계, 상기 사용하는 단계 및 상기 기입하는 단계를 반복하는 단계, 및 상기 벡터 및 상기 행렬 의 외적(cross product)을 계산하도록 모든 R-product 로우의 값을 더하는 단계를 포함한다. 본원의 바람직한 실시태양에 따르면, 연관 메모리 어레이를 위한 방법을 제공한다. 이 방법은 상기 메모리 어 레이 내의 승수 로우인 R-matrix-row-j의 셀들 내에 행렬의 각 로우 j를 저장하는 단계; 상기 메모리 어레이 내 의 연관된 피승수 벡터 로우인 R-vector-bit-j의 모든 셀 내에 벡터의 각 비트 j의 값을 저장하는 단계 - 로우 인 R-matrix-row-j 내의 각 셀이 대응하는 비트-라인 BLj에 의해 로우인 R-vector-bit-j 내의 셀에 연결됨 -; 및 모든 비트-라인 BLj 상에 불리안 함수의 결과를 동시에 수신하도록 벡터-행렬 쌍의 로우인 R-vector-bit-j와 R-matrix-row-j를 동시에 활성화하는 단계를 포함한다. 게다가, 본원의 바람직한 실시태양에 따르면, 이 방법은 또한 피승수 로우인 R-vector-bit-j와 승수 로우인 R- matrix-row-j 사이의 곱셈 연산의 곱을 계산하도록 상기 대응하는 비트-라인 BLj 상의 값을 사용하는 단계를 포 함한다. 또한, 본원의 바람직한 실시태양에 따르면, 이 방법은 또한 상기 메모리 어레이 내의 곱 로우인 R-product-j에 상기 곱을 기입하는 단계를 포함한다. 게다가, 본원의 바람직한 실시태양에 따르면, 이 방법은 또한 각각의 벡터-행렬 쌍의 로우에 대하여, 상기 동시 에 활성화하는 단계, 상기 사용하는 단계 및 상기 기입하는 단계를 반복하는 단계, 및 비트-라인 당 상기 R- product-j 로우의 합을 계산하도록 상기 R-product-j 로우를 활성화하는 단계를 포함한다. 게다가, 본원의 바람직한 실시태양에 따르면, 이 방법은 또한 상기 메모리 어레이 내의 합 로우에 합을 기입하 는 단계를 포함한다. 또한, 본원의 바람직한 실시태양에 따르면, 상기 벡터는 인공 뉴럴 네트워크의 입력 층이고, 상기 행렬이 상기 인공 뉴럴 네트워크의 숨겨진 층이고, 상기 합은 상기 인공 뉴럴 네트워크의 출력 층이다. 본원의 바람직한 실시태양에 따르면, 뉴럴 네트워크의 인 메모리 계산을 위한 방법이 제공되고, 상기 뉴럴 네트 워크는 행렬 내에 배열된 가중치를 가진다. 이 방법은 연관 메모리 디바이스에 상기 행렬을 미리 저장하는 단 계, 벡터에 배열된 입력을 수신하여 상기 메모리 디바이스에 그 입력을 저장하는 단계, 및 상기 입력 및 상기 가중치를 사용하여 상기 네트워크의 출력을 인-메모리 계산하는 단계를 포함한다. 게다가, 본원의 바람직한 실시태양에 따르면, 상기 입력을 저장하는 단계는 미리 저장된 가중치의 컬럼과 동일 한 컬럼에 상기 입력의 카피를 저장하는 단계를 포함한다. 본원의 바람직한 실시태양에 따르면, 연관 메모리 어레이를 위한 방법이 제공된다. 이 방법은 피승수 행렬 및 승수 행렬로부터의 각각의 연관된 피승수 및 승수 비트를 개별의 연관 로우 상의 복수의 컬럼 중 하나에 저장하 는 단계 - 컬럼 상의 셀들이 비트-라인에 의해 연결됨 -, 상기 비트-라인 상에서 생성된 불리안 값을 사용하여 곱셈의 결과를 계산하도록 상기 연관된 피승수 및 승수 로우를 활성화하는 단계, 상기 비트-라인에 연결된 곱 로우 내의 셀에 상기 결과를 기입하는 단계 - 상기 피승수 행렬의 로우와 상기 승수 행렬의 컬럼과 연관된 복수 의 곱 로우는 글로벌 비트-라인에 의해 연결됨 -를 포함한다. 이 방법은 또한 모든 곱 로우의 합을 계산하도록 상기 글로벌 비트-라인 상에서 생성된 불리안 결과를 사용하여, 상기 복수의 곱 로우를 활성화하는 단계, 및 합 로우에 상기 합을 기입하는 단계를 포함한다. 본원의 바람직한 실시태양에 따르면, 인-메모리 계산을 위한 장치를 제공한다. 이 장치는 로우와 컬럼으로 배 열된 메모리 어레이를 포함한다. 상기 메모리 어레이는 복수의 승수 로우 - 상기 승수 로우의 각각은 승수 행 렬의 로우를 저장함 -, 복수의 피승수 로우 - 상기 피승수 로우의 각각은 피승수 벡터의 비트의 복제를 저장하 고, 피승수 로우의 셀들이 곱 비트-라인에 의해 승수 로우의 셀들에 연결됨 -를 저장한다. 이 장치는 또한 복 수의 곱 로우 - 상기 곱 로우의 각각이 셀에 곱셈 결과를 저장하고, 곱 로우의 셀들은 곱 비트-라인에 연결되고 복수의 곱 로우에 연결되는 합 비트-라인에 연결됨 -, 및 합 로우 - 상기 합 로우 내의 각 셀이 합 비트-라인에 연결된 모든 곱 셀의 합을 저장함 - 을 포함한다. 이 장치는 또한 피승수 로우와 승수 로우를 동시에 활성화하 고, 상기 곱 로우에 곱셈 결과를 동시에 기입하고, 상기 곱 로우를 활성화하고, 상기 합 로우에 합 결과를 기입 하는 프로세서를 포함한다. 게다가, 본원의 바람직한 실시태양에 따르면, 승수 로우의 로우 및 피승수 로우의 연관된 로우가 인접한 로우이 다. 또한, 본원의 바람직한 실시태양에 따르면, 곱 로우는 상기 연관된 승수 로우 및 상기 피승수 로우 중 하나에 인접한다. 또한, 본원의 바람직한 실시태양에 따르면, 상기 곱 비트-라인 및 상기 합 비트-라인이 동일한 비트-라인이다. 또한, 본원의 바람직한 실시태양에 따르면, 이 장치는 또한 한 쌍의 연관된 피승수 로우와 승수 로우를 한 번에 활성화하고 연관된 곱 로우에 곱셈 결과를 기입하는 제어기를 포함한다. 또한, 본원의 바람직한 실시태양에 따르면, 상기 메모리 어레이가 복수의 섹션으로 분할된다. 게다가, 본원의 바람직한 실시태양에 따르면, 상기 승수 행렬의 피승수 로우와 대응하는 로우가 전용 섹션에 저 장된다. 게다가, 본원의 바람직한 실시태양에 따르면, 상기 승수 행렬의 피승수 로우와 대응하는 로우의 곱셈은 전용 섹 션에 저장된다. 본원의 바람직한 실시태양에 따르면, 인-메모리 계산을 위한 장치가 제공된다. 이 장치는 로우와 컬럼으로 배 열된 메모리 어레이를 포함한다. 상기 메모리 어레이는, 복수의 승수 로우 - 상기 승수 로우의 각각이 승수 행 렬의 로우를 저장함 -, 및 복수의 피승수 로우 - 상기 피승수 로우의 각각이 피승수 행렬의 로우의 비트의 복제 를 저장하고, 피승수 로우의 셀들이 곱 비트-라인에 의해 승수 로우의 셀들에 연결됨 -를 포함한다. 이 장치는 또한 복수의 곱 로우 - 상기 곱 로우의 각각이 셀들에 곱셈 결과를 저장하고, 곱 로우의 셀들이 곱 비트-라인에 연결되고, 상기 복수의 곱 로우에 연결되는 합 비트-라인에 연결됨 -, 및 복수의 합 로우 - 상기 합 로우의 각 각이 합 비트-라인에 연결된 모든 곱 셀의 합을 저장하고, 상기 합 로우의 셀들이 상기 곱 비트-라인에 연결됨 -을 포함한다. 이 장치는 또한 피승수 로우와 승수 로우를 동시에 활성화하고, 상기 곱 로우에 곱셈 결과를 동 시에 기입하고, 상기 곱 로우를 활성화하고, 상기 합 로우에 합 결과를 기입하는 프로세서를 포함한다. 게다가, 본원의 바람직한 실시태양에 따르면, 이 메모리 어레이는 복수의 섹션으로 분할된다. 게다가, 본원의 바람직한 실시태양에 따르면, 상기 피승수 행렬의 각 로우는 전용 섹션에 저장된다."}
{"patent_id": "10-2018-7030661", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "아래의 상세한 설명에서, 다수의 특정 설명을 기재하여 본원의 전반적인 이해를 제공한다. 그러나, 이 분야의 통상의 기술자에 의해 본원이 이러한 특정 설명 외에 실시될 수 있음을 이해해야 할 것이다. 다른 예에서, 공 지 방법, 절차 및 구성요소가 본원을 제한하지 않도록 자세히 기재되지 않았다. 출원인은 행렬 곱셈이, 2009년 7월 16일에 출원된 미국 특허 제8,238,173호, 및 2016년 5월 5일에 출원된 미국 특허 제9,558,812호에 기재된 것과 같이, 연관 메모리 디바이스를 사용하는 메모리에서 더욱 효율적으로 수행될 수 있음을 알게 되었으며, 상기 미국 특허 둘 다 본원과 공통의 출원인에게 할당되어 있으며, 본원에 원용으로 포함된다. 전술한 특허에서 기재된 것처럼, 다중 로우가 각 계산 사이클에 액세스될 수 있어서, 다중 셀 연산, 예컨대 다 중-셀 기입 연산 및 다중-셀 계산을 수행하는 능력의 결과를 야기한다. 이제 곧 설명될 도 3은 본원의 바람직한 실시태양에 따라 구성되고 동작되는 연관 메모리 디바이스를 도시 한다. 연관 메모리 디바이스는 메모리 어레이, 다중 로우 디코더, 감지 회로, 선택적 기 입 유닛 및 제어기를 포함할 수 있다. 메모리 어레이는 휘발성 또는 비휘발성, 파괴형 또는 비파괴형 임의의 적합한 메모리 어레이, 예컨대 RAM, DRAM, SRAM, Re-RAM, ZRAM, MRAM, 멤리스터 등일수 있으며, 오로지 추가 회로 없이 데이터를 저장하도록 구성된, 순수한 메모리 셀을 포함할 수 있다. 본원의 바람직한 실시태양에 따라, 메모리 어레이가 단일 메모리 어레이 이거나, 데이터가 저장될 수 있는 컬럼 및 로우로 배열되는 다중 셀을 각각 포함하는 2 이상의 섹션으로 분할될 수 있다. 도 3의 실시예에 대하여, 메모리 어레이가 두 섹션: 섹션 315 및 섹션 316으로 나누어는 것으로 가정된다. 상이한 소스로부터의 데이터가 고유한 방식으로 섹션 315의 로우에 저장된다. R- vecter-bit로서 라벨링된 로우는 벡터로부터의 데이터를 저장할 수 있고, R-matrix-row로서 라벨링된 로우는 행 렬로부터의 데이터를 저장할 수 있고, R-SUM으로 라벨링된 로우는 메모리에서 계산된 합을 저장할 수 있고, Temporary로서 라벨링된 로우는 다른 계산에 요구될 수 있는 메모리 내에서 계산된 중간 값을 저장할 수 있다. 예를 들어, 섹션 315는 유형 R-vector-bit의 3개 로우(R-vector-bit-0, R-vector-bit-1 및 R-vector-bit-2), 유형 R-matrix-row의 3개 로우(R-matrix-row0, R-matrix-row1 및 R-matrix-row2), 유형 R-SUM의 1개 로우 및 유형 Temporary의 복수의 로우를 포함한다. 도시된 로우 및 컬럼의 수는 단지 도시를 위한 일례이며 섹션 315 의 로우 및 컬럼의 수는 완전히 상이할 수 있다. 섹션 315에서 로우의 할당이 특정되지 않는다. 다중 로우 디코더가 복수의 로우를 동시에 활성화시킬 수 있는 임의의 적합한 로우 디코더일 수 있다. 로 우 디코더가 한번에 둘 이상의 메모리 어레이를 활성화할 수 있다. 메모리 어레이의 모든 컬럼 이 동시에 활성화되어 판독 연산이 수행되는 때에 어레이의 모든 컬럼에서 동시 계산을 제공하고, 기입 연 산이 수행되는 때에 동시 기입 연산을 제공한다. 감지 회로가 임의의 적합한 감지 회로로 이루어지고, 컬럼의 임의의 비트-라인 연결되는 셀들 상에서 값을 감지할 수 있고, 각 컬럼의 선택된 셀들 사이에서 수행되는 불리안 함수의 결과를 제공할 수 있다. 선택적 기입 유닛이 어느 감지된 컬럼이 메모리 어레이로 되돌아 기입되는지를 선택하고, 복수의 감 지 회로 컴포넌트로부터의 값을 동시에 기입할 수 있다. 제어기가 현재 연산을 위해 어느 로우가 활성화되는지, 판독되는지, 기입되는지를 다중 로우 디코더 에 나타낼 수 있고, 또한 선택적 기입 유닛에 어느 컬럼으로부터 감지 회로의 출력을 메모리 어레이 로 돌아와 기입하는지 나타낸다. 데이터가 선택적 기입 연산 내에 기입될 수 있는 로우가 이미 선택된 로 우와 동일한 섹션에 또는 상이한 섹션에 있을 수 있다. 멀티 판독 연산의 결과로서, 메모리 어레이 내에서 계산이 일어난다는 것을 이해해야 할 것이다. 따라서, 연관 메모리 디바이스가, 어레이의 모든 컬럼 상에서, 임의의 불리안 연산을 동시에 수행하여, 대규모의 가동 중인 병렬 계산이 일어날 수 있다. 출원인은 메모리 어레이에서의 특정한 위치의 벡터 및 행렬 데이터를 저장하는 것이 벡터-행렬 계산의 복 잡도에 대한 엄청난 영향을 가질 수 있음을 알았다. 이하 기재되는 것처럼, 본원의 벡터-행렬 곱셈의 계산 복 잡도가 선형이며 심지어 일정할 수 있다. 본원의 바람직한 실시태양에 따르면, 특정 벡터-행렬 계산의 피연산자가 이하에 기재되는 것과 같은 동일한 비 트 라인에 연결되는 셀 내에 예컨대 하나의 컬럼 내에 저장될 수 있고, 따라서 다수의 로우를 동시에 활성화하 는 것이 벡터-행렬 곱셈의 결과를 제공할 수 있으며, 이로써 결과가 메모리 어레이로 돌아가 추가로 기재 될 수 있다. 도 4가 설명될 것이며, 이는 메모리 어레이 내의 승수 행렬 H로부터의 피연산자, 및 피승수 벡터 i로부터 의 피연산자의 메모리 배열을 도시한다. 본원의 바람직한 실시태양에 따르면, 벡터 i가 메모리 어레이의 각각의 모든 컬럼 내의 컬럼으로서 (로우보다는) 저장되며, 컬럼은 행렬 H를 저장하도록 사용되어 벡터 i의 비 트 i0가 메모리 어레이의 로우의 컬럼 C0, C1 및 C2 내에 반복적으로 저장되고, 비트 i1가 제2 로우 내에 반복적으로 저장되고 비트 i2가 제3 로우 내에 반복적으로 저장된다. 각 계산에서 사용되는 벡터 i로부터의 피 연산자 및 행렬 H로부터의 피연산자가, 동일한 비트 라인: 컬럼 C0 내의 BL0, 컬럼 C1 내의 BL1 및 C2 내의 BL2 에 연결되는, 동일한 컬럼 내에 모두 저장됨을 이해해야 한다. 중간 스토리지 및 최종 결과를 위해 사용되는 추가 로우가 또한 추가의 기재된 것처럼 사용될 수 있다. 다수의 위치에 벡터 i로부터의 단일 피연산자가 저장 되어 동일한 여분의 스토리지를 써서 계산을 최적화함을 이해해야 할 것이다. 어레이의 전체 로우를 걸쳐 벡터로부터의 각 데이터 아이템이 복제되기 때문에, 도 4에서처럼, 계산의 모든 피 연산자들 사이의 필요한 연결 수가 감소된다. 연결 수는 m2로부터 m(예를 들어 m이 3임)까지의 차수만큼, 도 2 에서부터 극적으로 감소된다. 도 4에서처럼 피연산자들 사이의 인접지(close vicinity)를 제공하도록 행렬 H로부터의 비트 Hij 바로 위에 벡터 i로부터의 비트 ij가 위치될 수 있음을 이해해야 할 것이다. 메모리 어레이의 로우와 컬럼의 수가 행렬 H의 로우와 컬럼의 수보다 클 수 있음을 이해해야 할 것이다. 단순화를 위해, 메모리 어레이 내의 로우/컬럼 및 행렬 H로부터의 로우/컬럼을 식별하도록 로우 및 컬럼 식별자를 사용한다. 그러나, 어레이 내의 로우와 컬럼의 순서가 행렬의 순서와 동일하게 남아있는 한 메모리 어레이 내의 행렬 H로부터 로우와 컬럼의 임의의 다른 배치가 가능하고, 벡터 i 로부터 그리고 행렬 H로부 터의 관련 아이템들이 동일한 컬럼 상에 저장되고, 계산 결과가 결과 벡터 내의 관련 위치에 연관될 수 있다. 이제 설명되는 도 5는 벡터 행렬 곱셈 프로세스의 상이한 참여자의 배치를 도시한다. 하나의 섹션의 셀들, 예 컨대 (도 3의) 메모리의 섹션 315가 도시된다. 섹션 315가 n개 컬럼 C0, C1 쪋 Cn, 및 복수의 로우를 포함하고, 각 로우는 상이한 소스로부터의 값을 저장한다. 로우 내에 저장된 값의 소스가 벡터 i, 행렬 H, 곱셈 연산, 합 연산 및 합이나 곱 계산을 달성하는 데 필요한 임의의 임시 계산일 수 있다. 섹션 315가 다음의 로우 유형을 가진다: 로우의 모든 셀 내의 벡터 i의 특정 비트 j의 값을 반복적으로 저장하 는 R-vector-bit 로우; 행렬 H의 전체 로우 j를 저장하는 R-matrix-row 로우; 연관된 로우의 행렬 비트와 벡터 비트의 곱을 각각 저장하는 R-product 로우; 및 모든 연관된 곱의 합을 저장할 수 있는 R-SUM 로우. 상기 곱과합이 방정식 1에 따라 계산될 수 있음을 알게 될 것이다. 이제 설명할 도 6a, 6b, 6c 및 6d는 본원의 실시태양에 따른 섹션 315 내의 셀들의 값을 더욱 자세히 도시한다. 도 6a는 R-vector-bit 로우들의 값을 저장하는 프로세스를 도시한다. 로우 R-vector-bit-0는 모든 컬럼(C0, C1 및 C2) 내의 벡터 i의 비트 i0의 값을 저장하고; 로우 R-vector-bit-1은 모든 컬럼 내의 벡터 i의 비트 i1의 값을 저장하고, 유사하게 로우 R-vector-bit-2는 로우의 모든 셀 내의 벡터 i의 비트 i2의 값을 반복적으로 저 장할 수 있다. 도 6b는 R-matrix-row 내의 값을 저장하는 프로세스를 도시한다. 섹션 315의 로우 R-matrix-row0는 행렬 H의 로우 R0의 값을 저장할 수 있고; 로우 R-matrix-row1는 행렬 H의 로우 R1의 값을 저장할 수 있고 유사하게 섹션 315의 로우 R-matrix-row2는 행렬 H의 로우 R2의 값을 저장할 수 있다. 도 6c는 로우 R-product 내에 저장되는 것을 도시한다. 섹션 315의 각 R-product-j 로우는 한 번에 모든 컬럼 에 대하여 동일한 컬럼의 R-matrix-row-j(행렬 H 로부터의 로우 j) 내의 셀들 및 R-vector-bit-j(벡터 i 로부 터의 비트 j)의 셀들 사이의 곱셈 연산의 결과를 저장할 수 있다. 로우 R-product-0는 R-vector-bit-0 내의 셀 들 및 R-matrix-row0 내의 셀들의 곱셈 결과: i0×H00, i0×H01, i0×H02의 곱셈 결과를 저장할 수 있고; 로우 R-product-1은 R-vector-bit-1 내의 셀들 및 R-matrix-row1 내의 셀들의 곱셈 결과: i1×H10, i1×H11, i1× H12를 저장할 수 있고; 로우 R-product-2는 R-vector-bit-2 내의 셀들 및 R-matrix-row2 내의 셀들의 곱셈 결 과: i2×H20, i2×H21, i2xH×22를 저장할 수 있다. 동일한 비트-라인에 두 셀이 연결되기 때문에, 비트-라인 이 이러한 두 셀에서 수행되는 불리안 연산의 결과를 가질 수 있다. 이하 기술되는 것처럼, 결과가 곱셈 결과 는 아직 아니기 때문에, 선택적 기입 유닛(도 3)가 곱의 계산시 사용되는 임시 위치에 불리한 결과를 기입 할 수 있다. 두 로우를 활성화하고 불리한 결과를 동일함 컬럼의 제3 로우에 기입하는 이러한 절차를 반복하는 것이, Akerib 등의 US 8,238,173에 기재된 거처럼 매번 정확한 로우를 선택함으로써, 모든 컬럼에 대하여 벡터 피승수 비트와 행렬 승수 비트 사이의 곱의 결과일 것이다. 유사한 연산이 모든 곱셈 결과의 합을 제공할 것이며, 이는 로우 R-SUM(도 6d)에 저장되며, 예컨대 컬럼의 R-product-0 + R-product-1 + R-product-2의 합을 저장할 것이다. 어레이의 모든 컬럼에서 동시에 수행되는 계산이 다음의 두 단계를 포함함을 알아야 할 것이다: 병렬적 곱셈 및 모든 곱셈 결과의 병렬적 덧셈. 곱셈 연산이 다음의 단계에 의해 각 쌍의 로우 R-vector-bit-j × R-matrix-row-j에 대하여 수행될 수 있다: 제 어기(도 3)는 다중 로우 디코더가 한 쌍의 로우를 동시에 활성화하도록 지시한다. 로우 디코더(32 0)가 지시한 대로 한 쌍의 로우를 활성화할 것이다. 각 컬럼의 비트-라인이 컬럼 내의 활성화된 셀들에 저장된 값들 사이의 불리안 연산의 결과를 보유할 것이다: ij × Hjk. 모든 컬럼이 동시에 활성화되는 경우에, 모든 관련 행렬 요소에 의한 하나의 벡터 비트의 곱셈(예, ij* Hjk)이 동시에 계산됨을 알아야 할 것이다. 그러므로, 실시예에서 전체 행렬 H의 곱셈을 수행하는데 필요한 단계의 수 는 단지 곱셈 행렬에서의 로우의 수, 3이다. 유사하게, 모든 컬럼이 동시에 활성화되는 때에, 모든 컬럼의 합 이 동시에 계산될 수 있고,예를 들어 전체 출력 벡터 z가 하나의 단계에서 동시에 계산될 수 있다. 따라서, 이 러한 메모리 구성을 사용하는 벡터-행렬 곱셈의 복잡도는 선형일 것이며, 예컨대 O(n)이다. R-vector-bit 로우들(벡터 i로부터 얻음) 및 R-matrix-row 로우들(행렬 H 로부터 얻음)이 메모리 내에서 원격으 로 위치할 것이고, 연속적인 로우들로 위치해서는 안됨을 이해해야 할 것이다. 그러나, 계산의 피연산자들 사 이의 단일 비트-라인을 통한 연속성을 제공해야 한다. 이제 설명할 도 7은 단일 섹션의 메모리 어레이 내 의 로우 할당에 대한 대안의 실시태양을 도시한다. 도 7에서, 각 유형의 요소가 연속적인 로우들에 저장된다. 모든 벡터 관련 로우가 섹션 315 내의 연속적인 로우들에 저장되고, 모든 행렬 관련 로우가 섹션 315 내의 연속 적인 로우들에 저장되고, 모든 계산 로우가 섹션 315 내의 연속적인 로우들에 저장된다. 각 계산의 피연산자가 동일한 비트-라인에 의해 연결된 동일한 컬럼의 셀들 상에 저장되는 한, 곱셈 및 덧셈이 모든 컬럼에서 동시에 준비되어 수행될 수 있다. 이제 설명될 도 8은 본원의 대안의 바람직한 실시태양을 도시한다. 이 실시태양에서, 메모리 어레이가 다 수의 섹션(810, 820 및 830)을 포함하고, 각 쌍의 연관 로우에서, 벡터 i로부터의 피승수 비트를 저장하는 로우 및 행렬 H로부터의 승수 로우를 저장하는 로우가 이용가능한 섹션들 중 하나에 저장될 수 있다. 메모리 어레이 는 로컬 비트 라인들 BLi 및 상이한 섹션의 로컬 비트 라인들을 연결하는 글로벌 비트 라인들 GBLk을 포함할 수있다. 이 구성을 사용하고 전용 섹션 내의 각 쌍의 로우를 저장하여, 한 번에 한 쌍의 로우를 활성화하는 대신 에, 모든 로우를 동시에 활성화하는 것이 가능할 수 있어서, 하나의 단계에서 전체 벡터-행렬 곱셈의 곱셈 결과 들을 제공하고, 여기서 각 섹션 당 하나의 결과이다. 총 단계에서, 글로벌 비트-라인과 연관되는 셀들이 모든 곱의 합을 제공하도록 활성화된다. 각 쌍의 로우에 대해 전용 섹션을 사용하는 것은 하나의 단계 및 전체 벡터 -행렬 곱셈 프로세스에 대해 O의 복잡도를 제공하는 합 계산의 추가 단계 에서 모든 곱셈 결과를 제공할 수 있다. 전술한 것처럼, 하나의 섹션에서 모든 로우를 저장하는 것이 O(n)의 복잡도를 제공하고, 섹션 내의 로우 배열 및 섹션의 수의 임의의 조합은 O 내지 O(n)의 복잡도를 제공할 것이다. 각 경우에, 메모리 어레이 내에 벡 터 및 행렬 정보를 배열시 이용가능한 섹션의 수 및 행렬의 크기가 고려될 것이다. 벡터-행렬 곱셈의 복잡도를 개선하는 것이 인공 뉴럴 네트워크의 계산 복잡도를 상당히 개선시킬 것이다. 인공 뉴럴 네트워크에서, 뇌의 셀들을 나타내는 다중 노드가, 셀들 사이의 시냅스의 연결 강도를 나타내는 가중화 링 크에 의해 연결된다. 이제 설명될 도 9는 일례의 인공 뉴럴 네트워크를 도시한다. 인공 뉴럴 네트워크의 노드 들이 층으로 배열된다: 입력 층이 문제의 입력 값(도면의 원 부분), 가중화 링크(도면의 화살표 부분)에 의해 연결된 숨겨진 층의 그룹(도면의 직사각형 부분), 및 문제에 대한 답을 제공할 수 있는 출력 층(도면의 생략 부 분)을 포함한다. 도 9는 인공 뉴럴 네트워크의 벡터 및 행렬의 사용을 도시한다. 뉴럴 네트워크는 입력 노드 Ni0 - Ni2, 숨겨진 층 노드 NH00 - NH 12 및 출력 층 NO0 - NO2을 포함한다. 이러한 뉴럴 네트워크는 맵핑을 사용하는, 도 6a- 6d의 실시예의 벡터-행렬 계산을 사용하여 계산될 것이다. 입력 층 Ni0, Ni1 Ni2의 노드들 사이의 가중치 i0, i1, i2 및 숨겨진 층의 제1 층 NH00, NH01 NH02이 벡터 i에 맵핑될 수 있다. 숨겨진 층의 제1 층 NH00, NH01 NH02 및 숨겨진 층의 제2 층 NH10, NH11 NH22 사이의 가중치 H00, H01, H02, H10, H11, H12, H20, H21, H22가 행렬 H에 맵핑될 수 있다. 숨겨진 층과 출력 층 NO0, NO1 NO2 사이의 가중치 z0, z1 z2가 벡터 z에 맵핑될 수 있다. 본원의 바람직한 실시태양에 따라, 뉴럴 네트워크의 데이터가 전술한 벡터 행렬 곱셈과 유사한 방식으로 연관 메모리 어레이 내에 배열될 수 있어서, 처리 단계의 피연산자가 동일한 컬럼 상에 위치된다(예컨데, 동일한 비 트-라인 상이). 이러한 방식으로 승수 및 피승수가 결과 로우 상의 곱셈의 결과를 제공하도록 동시에 활성화되 고, 복수의 결과 로우의 동시 활성으로, 계산을 위한 데이터의 임의의 입력-출력(IO) 연산을 수행해야함이 없이 메모리 내에서 전체 계산을 수행하는 장점을 가지는 합을 제공할 수 있다. 유일하게 요구되는 IO는 입력 벡터 i를 수신하고 출력 벡터 z를 제공하는 것이다. 행렬(뉴럴 네트워크의 숨겨진 층)이 메모리 어레이(도 3)에서 한 번에 저장될 수 있고, 각각에 대하여 출 력 벡터를 제공하여, 상이한 입력 벡터에 대하여, 여러 번 사용될 수 있다. 행렬이 한번에 저장되기 때문에, 네트워크가 훈련되어 연산할 준비가 되면, 메모리 어레이에 행렬 삽입의 복잡도가 뉴럴 네트워크의 진행 활동의 계산 복잡도에 영향을 미치지 않는다. 뉴럴 네트워크의 전형적인 진행 사용은 입력 벡터를 수신하고 저장하고, 계산을 수행하고 출력을 수신하는 것이다. 입력 벡터를 메모리 어레이에 저장하는 것이 복잡도가 뉴럴 네트워크의 전반적인 복잡도에 영향을 주는 반 복적인 임무이며, 새로운 입력 벡터가 각 계산에 대해 제공되기 때문이다. 전술한 배열에서, 한번에 전체 벡터 가 메모리 어레이에 기입될 것임을 이해해야 할 것이다. 입력 벡터로부터 비트를 저장하는 모든 셀(각 관 련 컬럼 및 각 관련 로우 내)이 Akerib 등의 US 9,558,812에서 정의된 다중-셀 기입 연산을 사용하여, 하나의 단계에서 적절한 값으로 설정될 수 있다. 이제 설명할 도 10은 벡터 i가 벡터의 크기와 관계없이 일정한 복잡도로 메모리 어레이에 저장되는 방법을 도시한다. 첫 번째로, 각 로우 R-vector-bit-j의 셀들이 이전 컨텐츠가 삭제되는 것을 보장하도록 내보내 져야(cleared) 한다. 멀티-셀 기입 연산을 사용하여, \"0\"이 모든 로우의 모든 셀 R-vector-bit-j에 동시에 기입될 수 있다. 제어기는 다중 로우 디코더가 기입 인에이블(write enable, WE) 라인 WEvi0, WEvi1, WEvi2 ... WEvin (모든 R-vector-bit 로우의 WE) 상에 값 \"0\"을 설정하도록 지시할 수 있다. 제어기가 모든 선택된 셀에 값 \"0\"을 설정할 수 있는 선택적 기입 유닛 내의 모든 컬럼을 활성화할 수 있다. R-vector-bit 로우 내의 모든 셀을 내보내기 위하여, 제어기는 벡터 i의 비트의 값을 WE 라인에 설정할 것 이다. 다중-셀 기입 연산을 사용하여, 벡터 i로부터 마지막 비트가 WEvin로 설정될 때까지 제어기가 i0의값을 WEvi0으로, i1의 값을 WEvi1으로, i2의 값을 WEvi2으로 설정할 수 있다. 제어기는 선택적 기입 유닛 가 i0의 값을 로우 R-vector-bit-0의 모든 셀에 설정하고, 값 i1를 로우 R-vector-bit-1의 모든 셀에 설 정하고, R-vector-bit-n까지 계속해서 모든 R-vector-bit 로우에 설정함으로써 결과를 낼 수 있는 모든 컬럼을 활성화시키도록 지시한다. 벡터 i로부터의 모든 비트를 모든 로우의 모든 비트, R-vector-bit까지 전체적으로 분배하는 것은 전형적으로 2 클록 사이클이 걸릴 수 있음을 이해해야 한다: 하나의 사이클은 메모리 어레이 내의 벡터 관련 피연산자를 저장하는 셀들로부터 임의의 이전 컨텐츠를 내보내는 것이고, 다른 사이클은 벡터 i로부터 관련 피연산자 셀에 모든 비트 값 1을 분배하는것이다. 동시 비트 분배가 O의 복잡도를 가지며, 이는 어레이의 컬럼의 수에 의존하지 않기 때문이다. 모든 곱셈 단계가 병렬로 수행될 수 있고, 예컨대 모든 AkBkj가 최상의 경우에 하나의 단계로 이루어질 수 있고, 메모리 어레이의 섹션의 수에 따라 최악의 경우에 n개의 단계로 이루어질 수 있다. 또한, 모든 합 연산 이 하나의 단계로 이루어질 수도 있음을 알아야 할 것이다. 종래 기술에서처럼 피연산자들 사이의 교차 상호관계가 존재하지 않고, 모든 출력이 동시에 발생된다는 것을 이 해할 것이며, 이는 입력 데이터가 '데이터 반복'으로 대체되어 다수의 위치에서 반복되기 때문이다. 입력 벡터 i가 메모리 어레이의 컬럼 내의 행렬 H의 각 로우 j와 함께 수직적 방식으로 저장된다. 낮은 계산 복잡도에 더하여, 네트워크에 대한 선형적인 스케일링을 제공하기가 용이하다는 것을 알아야 할 것이다. 출력 벡터의 증가(예, 뉴럴 네트워크에 출력 노드를 추가)가 메모리 어레이에 컬럼을 추가하여 구현될 수 있고, 입력 벡터의 증가(예, 더 많은 입력 노드의 추가)는 이제 설명할 도 11에 도시된 것처럼 로우의 추가(각 입력 로우가 추가 입력 값을 저장할 수 있음)에 의해 달성될 수 있다. 도 11은 본원의 바람직한 실시태양에 따라 구성되고 동작되는, 현존하는 뉴럴 네트워크에 입력 노드나 출력 노 드를 추가한 결과를 개략적으로 도시한다. 아이템(1200A)가 도 9의 뉴럴 네트워크를 계산할 수 있는, 1x3 입력 벡터, 3x3 행렬 및 1x3 출력 벡터를 가진 뉴럴 네트워크의 일례의 메모리 구성이다. 아이템(1200B)가 추가 값이 입력 벡터의 크기를 1x4로 증가시킨 입력 벡터에 추가된 일례의 네트워크 구 성이다. 이러한 변경은 추가 로우를 행렬에 더함으로써 네트워크에 반영될 수 있다(승수 행렬의 로우의 수가 피승수 벡터의 컬럼의 수와 동일해야 하기 때문). 행렬의 새로운 로우가 새로운 행렬 라인을 저장하는 새로운 로우 및 모든 로우 셀에 반복적으로 추가된 비트의 값을 저장하는 추가의 새로운 로우에 의해 메모 리 어레이 내에 반영될 수 있다. 아이템(1200C)이 추가 값이 출력 벡터의 크기를 1x4로 증가시킨 출력 벡터에 추가된 일례의 네트워크 구 성이다. 새로운 출력 값의 추가는 행렬에 추가 컬럼을 더함으로써 네트워크에서 반영될 수 있다(행렬의 컬럼의 수가 곱 벡터의 컬럼의 수와 동일해야 하기 때문). 행렬의 새로운 컬럼이 메모리 어레이의 새로운 컬럼 에 의해 메모리에 반영된다. 도 3의 다수의 연관 메모리 디바이스로 이루어지는 분배 시스템에 의해 단일 뉴럴 네트워크가 또한 구현될 수 있음을 알 것이다. 각 메모리 어레이는 뉴럴 네트워크의 단일 출력 노드에 관련된 전체 계산을 계산할 것이다. 이러한 분배 구성에서, 확장성(scalability)이 또한 용이하게 달성된다. 출력 벡터의 증가(예, 뉴럴 네트워크에 출력 노드 추가)가 연관 메모리 디바이스의 추가에 의해 구현될 수 있고, 반면에 입력 벡터의 증가(예, 더 많은 입력 노드의 추가)가 분배 시스템의 각 메모리 디바이스에 로우를 추가함으로써(각 입력 로우가 추가 입력 값을 저장할 수 있음) 달성될 수 있다. 이미 전술한 것처럼, 행렬-행렬 곱셈이 다중 벡터-행렬 곱셈로 간주되고(피승수 벡터의 로우의 수는 필요한 벡 터-행렬 곱셈의 수임). 각 벡터(예, 피승수 행렬의 로우)가 전술한 것처럼 메모리 내에 저장되는 동안 승수 행 렬이 전술한 것처럼 저장될 수 있다. 곱셈 프로세스가, 다수의 피승수 로우, 연관 쌍의 로우에 대하여, 선택함 으로써 한 번에 피승수의 하나의 로우에 대해 수행된다. 달리 자세히 기재되지 않는 한, 전술한 내용으로부터 명백한 경우, \"처리하다\", \"계산하다(computing)\", \"계산 하다(calculating)\" 및 \"결정하다\" 등과 같은 용어를 사용하는 것이 클라이언트/서버 시스템, 모바일 컴퓨팅 디 바이스, 스마트 기기, 또는 컴퓨팅 시스템의 레지스터 내의 전자적 수량과 같은 물리적으로 표현되는 데이터 및/또는 컴퓨팅 시스템의 메모리 내의 물리적 수량으로 유사하게 표현되는 다른 데이터로의 메모리, 레지스터 또 는 다른 유사한 정보 스토리지, 송신 또는 디스플레이 디바이스를 조작 및/또는 변형하는 유사한 전자 컴퓨팅 장치와 같은 임의의 유형의 범용 컴퓨터의 처리 및/또는 액션을 지칭하는 것이다. 본원의 실시태양은 본 명세서 내의 연산을 수행하기 위한 장치를 포함할 수 있다. 이 장치는 특히 원하는 목적 을 위해 구성되고, 또는 컴퓨터 내에 저장된 컴퓨터 프로그램에 의해 재구성되거나 선택적으로 활성화되는 범용 컴퓨터를 포함할 수 있다. 그 결과적인 장치는 소프트웨어에 의해 지시되는 경우 여기에 기재된 것 처럼 범용 컴퓨터를 진보적인 요소로 바꿀 수 있다. 그 지시는 원하는 컴퓨터 플랫폼과 동작하여 진보적인 디바이스를 정 의할 수 있다. 그러한 컴퓨터 프로그램이 컴퓨터 판독가능 저장 매체, 예컨대 이에 제한되는 것은 아니지만 광 디스크, 자기 광학 디스크, 리드 온리 메모리(ROM), 휘발성 및 비휘발성 메모리, 랜덤 액세스 메모리(RAM), 전 기적 프로그래머블 리드 온리 메모리(EPROM), 전기적 제거가능 및 프로그래머블 리드 온리 메모리(EEPROM), 자 기 또는 광학 카드, 플래시 메모리, 디스크 온 키(disk-on-key) 또는 임의의 다른 유형의 컴퓨터 시스템 버스로 결합될 수 있고 전자 지시를 저장하는데 적합한 임의의 다른 유형의 매체를 포함하는 임의의 유형의 디스크에 저장될 수 있다. 여기에 제시되는 프로세스 및 디스플레이는 임의의 특정 컴퓨터나 다른 장치에 본직적으로 관련되는 것은 아니 다. 다양한 범용 시스템이 여기에 기재된 제시에 따라 프로그램으로 사용될 수 있고, 또는 원하는 방법을 수행 하도록 더욱 특화된 장치를 구성하는 것이 편리할 수 있다. 이러한 다양한 시스템을 위한 원하는 구조가 상세 한 설명의 기재로부터 명백할 것이다. 게다가, 본원의 실시태양은 임의의 특정 프로그래밍 언어와 관련하여 기 재되어 있지 않다. 다양한 프로그래밍 언어가 본원의 발명의 제시를 구현하도록 사용될 수 있을 것이다. 본원의 특징이 도시되었고 설명되었지만, 다양한 변경, 대체, 변화 및 등가물이 통상의 기술자에 의해 가능할 것이다. 따라서, 수반되는 특허청구범위는 본원의 정신 내에 있는 한 변경 및 수정을 포함하려는 의도임을 이 해해야 할 것이다."}
{"patent_id": "10-2018-7030661", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본원의 대상은 명세서의 결론부에서 특히 지적되고 주장된다. 본원은 그러나 그 대상, 특징 및 장점과 함께, 기관 및 동작의 방법 둘 다에 대하여 다음의 수반되는 도면으로 설명되는 상세한 설명을 참조하여 이해하는 것 이 최상이다. 도 1은 피승수 벡터, 승수 행렬 및 결과 벡터의 개략도이다. 도 2는 벡터-행렬 곱셈시 곱셈 연산의 개략적인 시각적 표현이다. 도 3은 본원의 바람직한 실시태양에 따라 구성되고 작동되는 연관 메모리 디바이스의 개략도이다. 도 4는 본원의 도 3의 디바이스의 동작을 이해하는데 유용한, 바람직한 실시태양에 따른 벡터-행렬 곱셈의 피연 산자의 메모리 배열의 개략도이다. 도 5는 도 3의 디바이스의 동작을 이해하는데 유용한, 벡터 행렬 곱셈 프로세스에서 상이한 참여자의 메모리 내 의 배열에 대한 개략도이다. 도 6a, 6b, 6c 및 6d는, 도 5에 기재된 데이터의 소스의 이해에 유용한, 로우에서의 스토리지의 각 유형에 대한하나의 도면인, 연관 메모리 어레이의 섹션 내의 셀들의 값의 상세한 개략도이다. 도 7은 연관 메모리 어레이의 단일 세그먼트에서 로우 할당에 대한 대안의 실시태양의 개략도이다. 도 8은 본원의 바람직한 실시태양에 따라 구성되고 동작되는, 멀티 세그먼트 연관 메모리 어레이의 로우 할당의 개략도이다. 도 9는 본원의 바람직한 실시태양에 따라 구성되고 동작되는, 연관 메모리 어레이 내의 인공 뉴럴 네트워크 계 산의 개략도이다. 도 10은 본원의 바람직한 실시태양에 따라 구성되고 동작되는 연관 메모리 어레이에 벡터를 저장하는 일정 복잡 도 절차의 개략도이다. 도 11은 본원의 바람직한 실시태양에 따라 구성되고 동작되는, 연관 메모리 어레이를 사용하는 뉴럴 네트워크 스케일링 역량의 개략도이다. 도시의 간편화와 명확화를 위하여, 도면의 요소들이 스케일화되어 도시될 필요는 없음을 알아야 할 것이다. 예 를 들어, 일부 요소의 치수가 명확화를 위해 다른 요소에 비하여 과장될 수 있고, 적절하게 고려하여, 도면 부 호가 여러 도면 내에서 반복되어 대응되거나 유사한 요소를 지시할 수 있다."}
