{"patent_id": "10-2023-7016652", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0093279", "출원번호": "10-2023-7016652", "발명의 명칭": "인공 지능 시스템을 위한 임계값 예측을 사용하는 부동-소수점 계산", "출원인": "인터내셔널 비지네스 머신즈 코포레이션", "발명자": "강, 민구"}}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "시스템에 있어서, 상기 시스템은:제1 부동-소수점 값과 제2 부동-소수점 값에 따라 도트-곱 연산(a dot-product operation)을 수행하도록 구성된부동-소수점 계산 유닛(a floating-point computation unit); 및상기 부동-소수점 계산 유닛에 동작 가능하게 결합된 검출 로직(detection logic)을 포함하고;상기 검출 로직은 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값의 지수 부분들의 고정-소수점 합들 사이의 차이(a difference between fixed-point summations of exponent parts)를 계산하고, 상기 계산된 차이에기초하여, 상기 부동-소수점 계산 유닛에 의한 도트-곱 연산의 완료 전에 조건의 존재(the presence of acondition)를 검출하도록 구성되고;상기 조건의 존재의 검출에 응답하여, 상기 검출 로직은 상기 부동-소수점 계산 유닛이 상기 도트-곱 연산의 일부로서 그렇지 않으면 수행되었을 계산들의 서브세트를 수행하는 것을 회피하게 하도록 더 구성되는시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 검출된 조건은 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값의 지수 부분들의 고정-소수점 합들의 차이를 계산한 결과가 임계값 아래인지 여부인 시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서, 상기 임계값은 양의 값(a positive value)과 0 중 하나인 시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서, 상기 검출된 조건의 존재는 상기 회피된 계산들의 서브세트가 임계값 아래인 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값의 도트 곱을 생성했을 것이라는 예측자(a predictor)로서 기능하는시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항 내지 제4항의 항들 중 어느 한 항에 있어서, 상기 검출 로직에 동작 가능하게 결합되고 상기 부동-소수점계산 유닛과 관련된 처리 지연에 비례하여 상기 검출 로직의 동작 전압을 감소시키도록 구성된 전압 스케일링제어기를 더 포함하는 시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항 내지 제5항의 항들 중 어느 한 항에 있어서, 상기 도트-곱 연산은 인공 지능 시스템에서 사용되는 신경망모델에 대한 훈련 단계의 일부인 시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항 내지 제7항의 항들 중 어느 한 항에 있어서, 상기 시스템은 하나 혹은 그 이상의 집적 회로들의 일부로서공개특허 10-2023-0093279-3-구현되는 시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "방법에 있어서, 상기 방법은:제1 부동-소수점 값과 제2 부동-소수점 값의 지수 부분들의 고정-소수점 합들 사이의 차이를 계산하는 단계;상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값에 따라 도트-곱 연산을 수행하도록 구성된 부동-소수점 계산 유닛에 의한 도트-곱 연산 완료 이전의 조건의 존재를, 상기 계산된 차이에 기초하여, 검출하는 단계; 및상기 조건의 존재 검출에 응답하여, 상기 부동-소수점 계산 유닛이 상기 도트-곱 연산의 일부로서 그렇지 않으면 수행되었을 계산들의 서브세트를 수행하는 것을 회피하게 하는 단계를 포함하고;상기 단계들 중 하나 혹은 그 이상은 명령 코드를 실행하도록 구성된 처리 회로에 의해 실행되는방법."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 검출된 조건은 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값의 지수 부분들의 고정-소수점 합들의 차이를 계산한 결과가 임계값 아래인지 여부인 방법."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서, 상기 임계값은 양의 값(a positive value)과 0 중 하나인 방법."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서, 상기 검출된 조건의 존재는 상기 회피된 계산들의 서브세트가 임계값 아래인 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값의 도트 곱을 생성했을 것이라는 예측자(a predictor)로서 기능하는방법."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제9항에 있어서, 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값의 지수 부분들의 고정-소수점 합들 사이의 차이는 로 표현되고, exi는 상기 제1 부동-소수점 값과상기 제2 부동-소수점 값 중 하나의 지수 부분을 나타내며, eyi는 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값 중 다른 하나의 지수 부분을 나타내고, N은 지수 부분들을 포함하는 컴포넌트들의 수를 나타내며, Sp는양의 곱의 그룹을 나타내고, Sn은 음의 곱의 그룹을 나타내는방법."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제8항 내지 제12항의 항들 중 어느 한 항에 있어서, 상기 도트-곱 연산은 인공 지능 시스템에서 사용되는 신경망 모델에 대한 훈련 단계의 일부인 방법."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "장치에 있어서, 상기 장치는:적어도 하나의 프로세서;공개특허 10-2023-0093279-4-명령 코드를 포함하는 적어도 하나의 메모리를 포함하고;적어도 하나의 메모리 및 상기 명령 코드는, 적어도 하나의 프로세서를 사용하여, 상기 장치로 하여금 청구항들8 내지 13 중 어느 한 항의 단계들을 수행하게 하도록 구성되는장치."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "컴퓨터 프로그램에 있어서, 상기 프로그램은 그 안에 실행 가능한 명령 코드를 구현한 컴퓨터-판독가능 스토리지 매체를 포함하고, 상기 실행 가능한 명령 코드는 프로세서에 의해 실행될 때 프로세서로 하여금 청구항의 제8항 내지 제13항의 항들 중 어느 한 항의 단계들을 수행하게 하는컴퓨터 프로그램."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "시스템에 있어서, 상기 시스템은:수정 선형 유닛(a rectified linear unit);상기 수정 선형 유닛에 동작 가능하게 결합되고 제1 부동-소수점 값 및 제2 부동-소수점 값에 따라 도트-곱 연산을 수행하도록 구성된 부동-소수점 계산 유닛; 및상기 부동-소수점 계산 유닛에 동작 가능하게 결합된 검출 로직을 포함하고;상기 검출 로직은 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값의 지수 부분들의 고정-소수점 합들 사이의 차이(a difference between fixed-point summations of exponent parts)를 계산하고, 상기 계산된 차이에기초하여, 상기 부동-소수점 계산 유닛에 의한 도트-곱 연산의 완료 전에 조건의 존재(the presence of acondition)를 검출하도록 구성되고;상기 조건의 존재의 검출에 응답하여, 상기 검출 로직은 상기 부동-소수점 계산 유닛이 상기 도트-곱 연산의 일부로서 그렇지 않으면 수행되었을 계산들의 서브세트를 수행하는 것을 회피하게 하도록 그리고 상기 수정 선형유닛이 상기 부동-소수점 계산 유닛의 출력을 제어하게 하도록 더 구성되는시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서, 상기 시스템은 인공 지능 시스템의 일부로서 구현되는 시스템."}
{"patent_id": "10-2023-7016652", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제16항에 있어서, 상기 시스템은 하나 혹은 그 이상의 집적 회로들의 일부로서 구현되는 시스템."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "인공 지능 시스템을 위한 임계값 예측을 사용하는 부동-소수점 계산(FLOATING-POINT COMPUTATION WITH THRESHOLD PREDICTION FOR ARTIFICIAL INTELLIGENCE SYSTEM) 시스템은 제1 부동-소수점 값과 제2 부동-소수점 값에 따라 도트-곱 연산(a dot-product operation)을 수행하도 (뒷면에 계속)"}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 일반적으로 인공 지능 시스템에서 사용하기 위한 부동-소수점 계산들을 수행하는 것에 관한 것이다."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "인공 지능 시스템들의 예들로 간주되는 머신 러닝 알고리즘들은, 개선된 반복 계산 정확도에 의해 유익 을 얻는 계산 애플리케이션들에서 널리 사용되고 있다. 신경망-기반 알고리즘(A neural network-based algorithm)은 머신 러닝 알고리즘들 중 가장 널리 사용되는 유형들 중 하나이다. 신경망은 인간의 두뇌가 작동하는 방식을 모방하는 프로세스를 통해 일련의 데이터에서 기본 관계들을 인식하는 모델이다. 신경망 모델은 먼 저 훈련 데이터 세트를 사용하여 훈련(훈련 단계)한 다음 훈련된 신경망 모델을 사용하여 타겟 데이터 세트의 관계들을 인식한다(추론 단계). 추론 단계는 정밀도가-낮은-고정-소수점 산술 계산들에 의존할 수 있지만, 훈련 단계에서는 일반적으로 부동-소수점 산술 계산들이 필요하다."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 예시적 실시 예에서, 시스템은 제1 부동-소수점 값과 제2 부동-소수점 값에 따라 도트-곱 연산(a dot-product operation)을 수행하도록 구성된 부동-소수점 계산 유닛(a floating-point computation unit), 및 상기 부동-소수점 계산 유닛에 동작 가능하게 결합된 검출 로직(detection logic)을 포함한다. 상기 검출 로직 은 상기 제1 부동-소수점 값과 상기 제2 부동-소수점 값의 지수 부분들의 고정-소수점 합들 사이의 차이(a difference between fixed-point summations of exponent parts)를 계산하고, 상기 계산된 차이에 기초하여, 상기 부동-소수점 계산 유닛에 의한 도트-곱 연산의 완료 전에 조건의 존재(the presence of a condition)를 검 출하도록 구성된다. 상기 조건의 존재의 검출에 응답하여, 상기 검출 로직은 상기 부동-소수점 계산 유닛이 상 기 도트-곱 연산의 일부로서 그렇지 않으면 수행되었을 계산들의 서브세트를 수행하는 것을 회피하도록 더 구성 된다. 추가의 예시적인 실시예들은 명령 코드를 실행하도록 구성된 프로세서 및 메모리를 갖는 장치, 검출 및 유발 단계들을 수행하도록 구성된 방법, 및 프로세서에 의해 실행될 때 프로세서로 하여금 상기 단계들을 수행 하게 하는 실행 가능한 명령 코드를 구현한 비-일시적 프로세서-판독가능 스토리지 매체의 형태들로 각각 제공 된다. 유리하게도, 하나의 예로서, 계산 알고리즘을 지원하는 데 사용되는 하드웨어와 관련하여 초기 단계에서 계산 오버헤드를 절약하기 위해 내적(the inner product)을 계산하기 전에, 예시적인 실시예들은 음의 내적 출 력을 예측하거나, 또는 허용 가능한 작은 양의 내적 출력을 예측한다. 본 명세서에 기술된 실시예들의 이들 및 다른 특징들 및 장점들은 첨부된 도면들 및 다음의 상세한 설명 으로부터 더욱 명백해질 것이다."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "예시적 실시예들은 예시적인 컴퓨팅 환경들, 클라우드 데이터 저장소들, 데이터 센터들, 데이터 처리 시 스템들, 정보 처리 시스템들, 컴퓨터 시스템들, 데이터 저장 시스템들 및 관련 서버들, 컴퓨터들, 저장 유닛들 및 디바이스들 및 기타 처리 및 컴퓨팅 디바이스들을 참조하여 본 명세서에서 설명될 수 있다. 그러나, 본 발명 의 실시예들은 도시된 특정한 예시적인 시스템 및 디바이스 구성들과 함께 사용하는 것으로 제한되지 않음을 이 해해야 한다. 게다가, 본 발명에서 사용되는, \"클라우드 플랫폼\", \"클라우드 컴퓨팅 환경\", \"클라우드 하부구조\", \"데이터 저장소\", \"데이터 센터\", \"데이터 처리 시스템\", \"정보 처리 시스템\", \"컴퓨터 시스템\", \" 데이터 저장 시스템\", \"컴퓨팅 환경\" 등의 문구들은, 예를 들어, 프라이빗 및/또는 퍼블릭 클라우드 컴퓨팅 또 는 저장 시스템들뿐만 아니라 분산된 가상 하부구조를 포함하는 다른 유형들의 시스템들을 포함하도록 광범위하 게 해석되도록 의도된다. 그러나, 주어진 실시예는 더 일반적으로 하나 혹은 그 이상의 처리 디바이스들의 임의 의 배열을 포함할 수 있다. 위의 배경 섹션에서 언급했듯이, 인공 지능(예: 머신 러닝) 시스템에서 사용되는 신경망 모델의 훈련 단 계에는 일반적으로 부동-소수점 산술 계산들이 필요하다. 일 예로서, 그러한 부동-소수점 산술은 \"IEEE 754- 2019: IEEE 부동 소수점 산술을 위한 IEEE 표준\"이라는 제목의 전기전자공학자협회(IEEE) 표준에 정의된 계산들 을 포함할 수 있다. IEEE 754 표준은 컴퓨터 프로그래밍 환경들에서 이진수(기수 2) 및 십진수(기수 10) 부동- 소수점 산술에 대한 산술 형식들 및 방법들을 명시한다. IEEE는 이 표준을 준수하는 부동-소수점 시스템의 구현 이 전적으로 소프트웨어, 전적으로 하드웨어, 또는 소프트웨어와 하드웨어의 조합으로 실현될 수 있음을 나타낸 다. IEEE 754는 수 당(per number) 16비트를 사용하는 반정밀도 형식(a half precision format), 수 당 32 비트를 사용하는 단정밀도 형식(a single precision format) 및 수 당 64비트를 사용하는 배정밀도 형식(a double precision format)을 정의한다. 각 형식은 부호 's', 지수 'e', 및 소수 값(a fractional value) 'f'로 표시되는 가수(a mantissa)를 포함한다(예를 들어, 수들은 소수점(the decimal point)의 오른쪽에 유효 값들 (significant values)을 포함하는 소수 부분(a fractional part)이 뒤따르는 선행 1비트를 가정하여 정규화 된 다). 따라서, 가수는 해당 수의 유효 자리수들(the significant digits)을 나타내는 부동-소수점 수의 일부이며, 수의 실제 값을 제공하기 위해 지수에 올려진 기수(base)로 곱해진다. 도 1a는 IEEE 754 표준과 일치하고 하나 혹은 그 이상의 예시적인 실시예들이 구현될 수 있는 부동-소수 점 수의 필드 형식을 도시한다. 지수 부분과 소수 부분의 비트들 수를 각각 나타내는 변수들 n과 p는 선택 된 정밀도에 따라 달라진다. 도 1b는 도 1a의 필드 형식과 일치하고 하나 혹은 그 이상의 예시적인 실시예 들이 구현될 수 있는, 값(x)으로 표시되는, 부동-소수점 수의 산술 표현을 도시한다. 인공지능 시스템에서 사용되는 신경망 모델의 훈련 단계에서 수행되는 부동-소수점 계산 중 하나가 부동 -소수점 도트-곱 계산(a floating-point dot-product computation)이다. 도트-곱 계산은 일반적으로 인공 지능 시스템의 곱셈-누산기(a multiplier-accumulator: MAC) 유닛에서 수행된다. 도트 곱은 두 개의 동일 길이의 수 들 수열들(two equal length sequences of numbers)(예: 두 개의 부동-소수점 수들)을 입력하고 단일 수(a single number)를 반환하는 대수 연산(an algebraic operation)이다. 보다 구체적으로, 도트 곱은 수들의 두 수열들의 대응 엔트리들의 곱들의 합(the sum of the products of the corresponding entries)이다. 두 개의 입력 수들이 벡터들인 경우, 도트-곱 연산의 결과(또한 내적(the inner product)이라고도 함)는 스칼라 값이다. 또한, 현대 인공 지능 시스템들의 컴퓨팅 커널(a computing kernel)은 내적(부동-소수점 도트-곱 연산의 결과)을 취하여 수정 선형 유닛(a rectified linear unit: Relu) 기능을 내적에 적용한다. 도 1c는 2개의 부동 소수점 값들 x 및 w(y = )에 대해 계산된 내적 y에 Relu 기능을 적용하는 컴퓨팅 커널을 도시한다. Relu 기능은 양수 입력들만 전달한다, 즉, y가 0보다 크면 Relu 기능으로부터 y가 출력되고, 그렇지 않으면 Relu 기능은 0을 출력한다. 전체 도트-곱 를 계산하기 전에 음의 값이 검출될 수 있어서 이 내적을 완전히 계산함이 없이 0 의 출력이 제공될 수 있다면 에너지-효율이 매우 높일 수 있음이 본 발명에서 실현되었다. 예시적인 실시예들은 계산 알고리즘을 지원하는 데 사용되는 하드웨어와 관련하여 초기 단계에서 계산 오버헤드를 절약하기 위해 내 적이 계산되기 전에(즉, 내적 계산이 완료되기 전에)그러한 음의 내적 출력을 예측하는 기술을 제공한다. 위에서 설명되고 도 1a 및 1b에 도시된 것처럼, 부동-소수점 수는 다음과 같은 세 개의 필드들로 표시된 다는 점을 상기해야 한다: 부호(s), 지수(e), 및 소수(fractional)(f). IEEE 754 반정밀도 형식의 경우, 예를들어, s=1비트, e=5비트, f=10비트이다. 부동-소수점 수는 정상적인 수들의 경우 값(x) = (-1)s * 2[e] * (1.f) 로 표시된다. 명백한 바와 같이, 상기 값의 크기는 'e'의 작은 수의 비트들에 지배적으로 의존하는 반면, 더 긴 비트 스트림 'f'는 상기 값의 크기를 미세-조정하는(fine-tune) 기능을 한다. 예를 들어, 수 x의 크기는 'f'의 값에 관계없이 2[e] ≤| x | < 2[e+1] 의 범위에 있다. 예시적인 실시예들에 따른 이 속성은 유리하게도 도트-곱 계산에서 제로-예측을 위한 중요한 기회를 제공하는 것이 본 발명에서 실현되었다. 2개의 부동-소수점 수들 X 및 Y의 곱은 다음과 같이 제한된다(bounded): X = (-1)s * 2[ex] * (1.fx) => 2[ex] ≤| X | < 2[ex+1] Y = (-1)s * 2[ey] * (1.fy) => 2[ey] ≤| Y | < 2[ey+1] ∴ 2[ex+ey] ≤| XY | < 2[ex+ey+2] 상기 곱의 최대 및 최소 범위를 계산하는 데는 곱셈(multiplication)을 필요로 하지 않지만, 2개의 부동 -소수점 값들 X와 Y, 즉, ex+ey에 대한 지수 값들의 단지 하나의 고정-소수점 덧셈(just one fixed-point addition)을 필요로 하는 것이 예시적인 실시예들에 따라 본 발명에서 추가로 실현되었다. 도트-곱 계산을 위해, 많은(N) 그러한 곱들이 합산되는데, 예를 들어, 가 된다. 따라서, 양수 곱 그룹들(sp)과 음 수 곱 그룹들(sn)은 구별될 수 있다. 양수와 음수 그룹들의 합계 범위는 다음과 같다: 양수 곱들의 합계:"}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "음수 곱들의 합계:"}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "따라서, 예시적인 실시예들에서, 전체 곱 을 확인하기 위해, 다음 조건이 체크된다:"}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "<"}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "위의 방정식에서 필요한 계산은 비용이 많이 드는 곱셈 또는 부동-소수점 계산 없이 고정-소수점 합 계들만 포함한다. 유리하게도, 계산 비용이 저렴한 이 사전-체크를 통해, 계산의 거의 50퍼센트(%)(음수가 발생 할 때)를 피할 수 있다. 만일 수가 양수로 판명되면, 정상적인 부동-소수점 계산이 진행된다. 위에서 언급했듯이, 부동-소수점 도트-곱 계산들은 일반적으로 인공 지능 시스템과 연관된 MAC 하드웨어 유닛에서 수행된다. 도 2는 하나 혹은 그 이상의 예시적인 실시예들이 구현될 수 있는 MAC 유닛과 연관된 부동-소수점 곱셈-누산기 로직(floating-point multiplier-accumulator logic)을 도시한다. MAC 유닛은 값들 A 와 B의 도트 곱에 값 C를 더하거나 빼서 세 값들 A, B, C를 결합한다. 부동-소수점 값들의 경우, MAC 유닛(20 0)은 입력들 EA, EB 및 EC와 입력들 MA, MB 및 MC를 처리하는데, 여기서 E는 값들 A, B 및 C의 각 지수 부분을 나타내고, M은 값 A, B와 C의 각 가수(소수) 부분을 나타낸다. 부동-소수점 MAC 유닛은 정렬 로직, 가산기 로직, 곱셈기 로직, 시프터 로직, 비교기 로직 및 기타 기능 로직(F2에 도시된 바와 같음)를 포함하여 비교적 복잡하다. 당업자는, 부동-소수점 MAC 유닛과 같은, 곱셈-누산기의 종래의 로직 연산들을 이해할 것이며, 따라서 여기에서 더 자세히 설명하지 않는다. 고정-소수점 덧셈 에너지가 부동-소수점 기반 MAC 연산의 10%라고 가정하면, 10%의 예측 오버헤드로 음 수를 예측함으로써 약 40%의 MAC 계산을 건너뛸 수 있음이 본 발명에서 실현된다. 반면에, 만일 누적된 수(the accumulated number)가 사전-체크 조건을 충족하지 못하는 것으로 판명되면, 예측 오버헤드의 10%는 낭비된다. 따라서, 0.4*(100% 절감 - 10% 오버헤드) + 0.6*(-10% 오버헤드) = 30% 에너지 절감이 달성될 수 있다. 특정 상황들에서, 양의 곱들의 가능한 최대 크기가 음의 곱들의 가능한 최소 크기와 비교되기 때문에 방 정식은 필요하거나 원하는 것보다 더 보수적으로 할 수 있음이 본 발명에서 실현된다. 따라서, 대안적인 실시예에서, 방정식의 오른쪽 항의 \"0\"을 방정식에서 아래에 묘사된 바와 같이 임계값 \"Th\"로 대체함으로써 사전-체크 조건이 완화된다:"}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "< Th Th > 0이고 Th의 크기는 일반적으로 상대적으로 작게 설정된다는 것을 이해해야 한다. 따라서 왼쪽 항이 양수라도, 만일 0에 매우 가까우면, 그 계산은 생략될 수 있다. Th 값을 제어함으로써, 수용할 수 있을 정도로 낮은 정확도를 희생시키고 더 높은 에너지 효율이 달성될 수 있다. 즉, Th의 설정에 기초하여, 만일 계산의 10% 를 추가로 회피할 수 있다면, 에너지 절약은 0.5*(100% 절감 - 10% 오버헤드) + 0.5*(-10% 오버헤드) = 40% 에 너지 절감이 달성될 수 있다. 도 3은 예시적인 실시예에 따른 부동-소수점 도트-곱 계산을 위한 임계값 검출의 로직 구현을 도시 한다. 로직 구현은 위의 방정식의 하드웨어 구현의 하나의 예시적인 실시예를 나타낸다. 대안적인 실시 예들은 다른 로직 구현들을 가질 수 있다. 도시된 바와 같이, 로직 구현은 멀티플렉서에 작동 가능하게 결합된 부동-소수점 MAC 유닛 에 작동 가능하게 결합된 임계값 검출기(검출 로직)를 포함한다. 임계값 검출기는 가산기, 가산기, 디멀티플렉서, 레지스터, 레지스터, 멀티플렉서, 배타적 로직합(XOR) 게이트 , 가산기 및 비교기를 포함하는 로직 컴포넌트를 포함한다. 주어진 로직 컴포넌트들로부터의 입 력 및/또는 출력으로서, 데이터 입력들, 데이터 출력들, 선택 비트들, 제어 비트들(또는 디지털 신호들) 등에 대한 참조는 주어진 로직 컴포넌트가 그러한 입력을 수신하고/하거나 그러한 출력들을 전송하기 위해 다른 로직 컴포넌트들과의 연결을 가능하게 하는 대응 터미널들을 갖는다고 가정한다. 위에서 설명한 바와 같이, 두 개의 부동-소수점 값들 X와 Y의 곱의 최대 및 최소 범위를 계산하는 데 곱 셈이 필요하지는 않지만, 2개의 부동-소수점 값들 X와 Y에 대한 지수 값들의 단지 하나의 덧셈만, 즉, ex+ey이 필요하고, 도트-곱 계산의 경우, 많은 (N) 그러한 곱셈들이 합산되는, 예를 들어 가 된다. 따라서, 도 3의 임계값 검출기에 도시된 바와 같이, X 및 Y에 대한 지수 비트들(지수 부분들)의 각각의 대 응 쌍, exi 및 eyi 은 가산기에 입력되어, 가산기의 출력이 exi + eyi 가 된다. 가산기의 출력은 멀티플렉서의 출력과 함께 가산기에 입력된다. 가산기의 출력은 디멀티플렉서에 입력된다. 디멀티플렉서는 양의 결과들을 나타내는 제1 출력에서 를 생성하고 음의 결과들을 나타내는 제2 출력에서 를 생성한다. 양의 결과들은 레지스터에 입력되고 음의 결과들은 레 지스터에 입력된다. 또한, 양의 결과들은 양의 레지스터로부터 출력되고 음의 결과는 레지스터 로부터 출력되며, 둘 다 멀티플렉서에 입력되고, 이 둘은 위에서 언급한 바와 같이 가산기에 대한 입 력으로서 기능을 하는 출력을 생성한다. 도 3에 추가로 도시된 바와 같이, XOR 게이트는 각각 부동-소수점 값들 X 및 Y, 각각에 대한 부호 비트인 입력 sxi및 syi를 수신한다. sx와 sy가 다르다면, X와 Y 곱의 부호가 음(negative)임을 의미한다. 따라 서, 상기 값은 음의 레지스터의 값으로 누적된다. sx와 sy가 같다면, 이는 X와 Y의 곱의 부호가 양 (positive)임을 의미하므로, 양의 레지스터의 값으로 누적된다. 따라서 XOR 게이트의 출력은 디멀티 플렉서 및 멀티플렉서를 적절하게 제어하는 데 사용된다는 점에 주목해야한다. 양의 레지스터로부터의 양의 결과들 및 레지스터로부터의 음의 결과들은 또한 가산기에 입력되고 가산기의 출력은 임계값 Th에 대해 비교기에서 체크된다. 여기에서 방정식 2의 사전-체크 조건이 결정된다. 비교기의 출력은 부동-소수점 MAC 유닛의 EN에 대한 입력으로서, 및 0의 제1 입력 및 부동-소수점 MAC 유닛의 출력인 제2 입력을 갖는 멀티플렉서에 대한 제어 신호로서 제공된다. EN 은 부동-소수점 MAC 유닛이 비교기의 출력이 로직 1(EN = 1)인 경우에만 동작하도록 부동-소수점 MAC 유닛에 대한 인에이블링 스위치를 나타낸다는 점을 주목해야 한다. 따라서, 부동-소수점 MAC 유닛이 도 2의 부동-소수점 MAC 유닛에 도시된 바와 같이 구성된다고 가정하면, 입력 값들(즉, EA, EB, MA, MB 쪋)은 만일 EN = 0인 경우 입력 레지스터에서 업데이트되지 않을 것이다. 이러한 방식으로, 도 2의 유닛의 회로는 비활성화되고 이전 계산 상태를 유지할 것이다. 멀티플렉서는 전술한 Relu 기능을 나타낸다. 따라서, 만일"}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "이 임계값 Th보다 작으면, 멀티플렉서의 출력은 0이고, 그렇지 않으면 부동 소수 점 MAC 유닛의 출력이 멀티플렉서의 출력으로 선택된다. 일부 실시예들에서, 임계값 Th는 0일 수 있 는 반면, 다른 실시예들에서는, 비교적 작은 허용 가능한 양수일 수 있다. 단지 예로서, 작은 허용가능한 양수 는 상기 도트 곱의 최대값의 약 1%보다 작은 값일 수 있다. 추가적인 실시예들에서, 임계값 검출기의 회로는 임계값 검출기가 에너지 소비를 절약하기 위 해 일반적인 공급 전압보다 낮은 전압으로 동작하도록 전압 스케일링 기능을 갖도록 구현될 수 있음을 이해해야 한다. 그러한 전압 스케일링 기능은 전압 스케일링 제어기에 의해 제어된다. 제어기는 필요에 따라 전압 스케일링 기능을 활성화 또는 비활성화하도록 구성된다. 도 4a 및 4b는 각각 예시적인 실시예들에 따라 전압 스케일링이 없는 처리 플로우 및 전압 스케일 링이 있는 처리 플로우을 묘사한다. 처리 플로우들(400 및 410)은 임계값 검출기 및 부동-소수점 MAC 유닛과 관련된 순차적 데이터(데이터 1, 데이터, 2, 데이터 3, 데이터 4 등)의 처리에 대응한다. 예를 들 어, 부동-소수점 MAC 유닛이 주어진 데이터(데이터 1)에 대한 계산들을 수행할 때, 임계값 검출기는 다음 데이터(데이터 2)에 대한 예측(임계값 검출에 기초하여)을 수행하는 식으로, 진행된다. 임계값 검출기에 의해 수행되는 예측 단계 계산이 상대적으로 단순하기 때문에, 처리 지연은 MAC 유닛의 부동 소수점 처리와 관련된 처리 지연에 비해 상대적으로 작으며, 예를 들어, 이러한 상대적인 처리 시 간 차이는 도 3a에서 명백하다. 따라서, 예측 동작을 위해 전압 스케일링이 적용될 수 있으며, 예를 들어, 전압 스케일링 제어기는 임계값 검출기의 회로에 공급되는 로직 공급 전압 VDD(동작 또는 기준 전압)을 퍼 센트 감소시킬 수 있다. 일부 실시예들에서, VDD는 전형적인(일반) 전압 동작 레벨의 30%만큼 감소된다. 감소된 전압은 임계값 검출기가 비례적으로 더 느리게 동작하게 하며, 즉, 처리 지연을 증가시킨다. 그러면 도 4b 의 처리 플로우에 묘사된 바와 같이 부동 소수점 계산을 위한 기간(시간 지연)도 예측 단계에서 완전하게 이용될 수 있다. 예를 들어, 데이터 2에 대한 예측 처리 시간은 데이터 1에 대한 부동-소수점 계산 처리 시간의 전부 또는 대부분을 차지하도록 느려진다. 일부 실시예들에서, 예측 동작을 위해 VDD를 감소시킴으로써 오버헤드가 절반(방정식 에너지 = C*VDD2에 의해 0.7*0.7 = 0.49이 됨)만큼 감소하여 45%의 에너지 절약을 가져온다. 심층 신경망들은 다수의 층들(예: 최 대 50개)으로 구성되고, 각 층은 컨볼루션(convolution), 선택적 배치 정규화(optional batch normalization), 및 Relu 기능을 포함하므로, 그러한 에너지 절약은 상당할 수 있다. VDD의 스케일링은 모든 전형적인 전압 제어 메커니즘을 사용하여 제어기에 의해 적용될 수 있다. 도 5는 예시적인 실시예에 따른 부동-소수점 도트-곱 계산을 위한 임계값 검출을 위한 방법을 도시 한다. 방법은, 예를 들어, 도 3의 로직 구현을 포함하는 시스템에 의해 수행될 수 있다는 것을 이해 해야 한다. 그러나, 대안적인 실시예들에서, 방법은 방법의 단계들을 수행하도록 구성된 다른 시스템들에 의해 수행될 수 있다. 단계는 제1 부동 소수점 값과 제2 부동-소수점 값의 지수 부분들의 고정-소수점 합들 사이의 차이 (a difference between fixed-point summations of exponent parts)를 계산한다. 단계는, 상기 계산된 차이에 기초하여, 제1 부동-소수점 값과 제2 부동-소수점 값에 따라 도트-곱 연산을 수행하도록 구성된 부동-소수점 계산 유닛에 의한 도트-곱 연산 완료 전에 조건의 존재를 검출한다. 단계는, 상기 조건의 존재의 검출에 응답하여, 부동-소수점 계산 유닛이 도트-곱 연산의 일부로서 그렇지 않으면 수행되었을 계산들의 서브세트를 수행하는 것을 회피하게 하도록 한다. 도 6은 예시적인 실시예들에 따른 인공 지능 시스템의 예시적인 구현을 도시한다. 도시된 바와 같 이, 시스템은 훈련 데이터 세트, 신경망 모델, 임계값 검출 로직, 부동-소수점 MAC 유닛 , 및 수정 선형 유닛(a rectified linear unit)을 포함한다. 도 3에 도시되고 상술된 예시적인 하드 웨어 구현에 관하여, 가산기, 가산기, 디멀티플렉서, 레지스터, 레지스터, 멀티플렉 서, XOR 게이트, 가산기, 비교기 및 제어기는 임계값 검출 로직의 일부로서 구 현될 수 있다. 추가적으로, 부동-소수점 MAC 유닛은 부동-소수점 MAC 유닛에 의해 구현될 수 있다.추가적으로, 멀티플렉서는 수정 선형 유닛에 의해 구현될 수 있다. 임계값 검출 로직, 부동-소 수점 MAC 유닛, 및 수정 선형 유닛은 훈련 데이터 세트에 기초한 신경망 모델의 훈련 동안 계산들을 수행하는 데 사용된다는 것을 이해해야 한다. 하나의 예시적인 실시예에서, 인공 지능 시스템의 임계값 검출 로직, 부동-소수점 MAC 유닛 , 및 수정 선형 유닛은 하나 혹은 그 이상의 애플리케이션-특정 집적 회로들(ASICs)에 의해 구현된다. ASIC들은 실행 가능한 프로그램 코드(예를 들어, 명령 코드, 컴퓨터 프로그램 코드, 등)로 프로그래 밍되거나 특정 목적을 위해 구성된 로직(예를 들어, 회로, 프로세서들, 메모리, 등)을 포함하는 특정 목적을 위 해 맞춤화된 집적 회로(IC) 칩들 또는 디바이스들이다. 이 예시적인 경우에서, 특정한 목적은 인공 지능 시스템 (예를 들어, 머신 러닝 알고리즘)의 구현 및 실행이며, 보다 구체적으로는, 훈련 데이터 세트를 사용하는 신경망 모델의 훈련 단계이다. ASIC은 또한 시스템-온-칩(SoC)으로 간주된다. 하나 혹은 그 이상의 예시적 인 실시예들과 함께 사용될 수 있는 일부 ASIC 구현들은 시스템의 구성(및 재구성)을 가능하게 하기 위해 사용 자 선택 가능 기본 로직 기능들(예를 들어, 스위칭, 비교, 등과 같은 다양한 기능들을 제공하기 위해 다수의 VLSI 트랜지스터 디바이스들로 구성된 멀티플렉서, 비교기, 등)의 셀 라이브러리들을 사용한다. 인공 지능 시스템 및 그 부분들이 하나 혹은 그 이상의 멀티-코어 중앙 처리 유닛들(CPUs), 하나 혹은 그 이상의 그래픽 처리 유닛들(GPUs), 및 하나 혹은 그 이상의 필드 프로그래머블 게이트 어레이들(FPGA s)을 포함하는 기술과 같은 대체 회로/프로세서-기반 기술로 실현될 수 있음을 추가로 이해해야 한다. 일부 실 시예들에서, 인공 지능 시스템은 2개 혹은 그 이상의 회로/프로세서-기반 기술들(예를 들어, ASIC, CPU, GPU, FPGA 등)의 조합으로 구현될 수 있다. 도 1-6에 기술된 기술들은 또한, 본 명세서에 기술된 바와 같이, 시스템을 제공하는 것을 포함할 수 있 으며, 상기 시스템은 별개의 소프트웨어 모듈들을 포함할 수 있고, 별개의 소프트웨어 모듈들 각각은 유형의 컴 퓨터-판독가능 기록 가능 스토리지 매체에 구현될 수 있다. 예를 들어, 모든 모듈들(또는 그 서브세트)은 동일 한 매체에 있거나, 각각 다른 매체에 있을 수 있다. 모듈들은 도면들에 도시된 및/또는 여기에 설명된 컴포넌트 들 중 일부 또는 전부를 포함할 수 있다. 본 발명의 실시예에서, 모듈들은, 예를 들어, 하드웨어 프로세서 상에 서 실행될 수 있다. 그런 다음, 방법 단계들은 하드웨어 프로세서에서 실행되는, 전술한 바와 같이, 시스템의 별개의 소프트웨어 모듈들을 사용하여 수행될 수 있다. 추가적으로, 컴퓨터 프로그램 제품은, 별도의 소프트웨 어 모듈들이 있는 시스템 제공을 포함하는, 본 명세서에 기술된 적어도 하나의 방법 단계를 수행하기 위해 실행 되도록 구성된 코드를 갖는 유형의 컴퓨터-판독가능 기록 가능 스토리지 매체를 포함할 수 있다. 또한, 도 1-6에 묘사된 기술들은 데이터 처리 시스템의 컴퓨터 판독가능 스토리지 매체에 저장된 컴퓨터 사용가능 프로그램 코드를 포함할 수 있는 컴퓨터 프로그램 제품을 통해 구현될 수 있으며, 컴퓨터 사용가능 프 로그램 코드는 원격 데이터 처리 시스템으로부터 네트워크를 통해 다운로드 된다. 또한, 본 발명의 일 실시예에 서, 컴퓨터 프로그램 제품은 서버 데이터 처리 시스템의 컴퓨터 판독가능 스토리지 매체에 저장되는 컴퓨터 사 용가능 프로그램 코드를 포함할 수 있으며, 컴퓨터 사용가능 프로그램 코드는 원격 시스템과 함께 컴퓨터 판독 가능 스토리지 매체에서 사용하기 위해 네트워크를 통해 원격 데이터 처리 시스템으로 다운로드된다. 본 발명의 실시예 또는 그 엘리멘트들은 메모리 및 메모리에 결합되고 예시적인 방법 단계들을 수행하도 록 구성된 적어도 하나의 프로세서를 포함하는 장치의 형태로 구현될 수 있다. 또한, 본 발명의 실시예는 컴퓨터 또는 워크스테이션에서 실행되는 소프트웨어를 사용할 수 있다. 도 7 을 참조하면, 그러한 구현은, 예를 들어, 프로세서, 메모리, 및, 예를 들어, 디스플레이 및 키 보드에 의해 형성된 입력/출력 인터페이스를 사용할 수 있다. 본 명세서에서 사용되는 \"프로세서\"라는 용 어는, 예를 들어, 멀티 코어 CPU, GPU, FPGA 및/또는 하나 혹은 그 이상의 ASIC들과 같은, 다른 형태의 처리 회 로를 포함하는 처리 디바이스와 같은 모든 처리 디바이스를 포함하도록 의도된다. 추가적으로, \"프로세서\"라는 용어는 둘 이상의 개별 프로세서를 의미할 수 있다. \"메모리\"라는 용어는, 예를 들어, RAM(랜덤 액세스 메모 리), ROM(읽기 전용 메모리), 고정 메모리 디바이스(예를 들어, 하드 드라이브), 이동식 메모리 디바이스(디스 켓), 플래시 메모리 등과 같은, 프로세서(예: CPU, GPU, FPGA, ASIC, 등)와 관련된 메모리를 포함하도록 의도되 었다. 또한, 본 명세서에서 사용되는 \"입/출력 인터페이스\"라는 문구는, 예를 들어, 처리 유닛(예: 마우스)에 데이터를 입력하는 메커니즘, 및 처리 유닛과 관련된 결과를 제공하는 메커니즘을 포함하는 것으로 의도된다(예 를 들어, 프린터). 프로세서, 메모리, 및 디스플레이 및 키보드와 같은 입력/출력 인터페 이스는, 예를 들어, 데이터 처리 유닛의 일부로서 버스를 통해 상호 연결될 수 있다. 예를 들어 버스 를 통한, 적절한 상호연결들은, 또한 컴퓨터 네트워크와 인터페이스하기 위해 제공될 수 있는, 네트워크카드와 같은, 네트워크 인터페이스, 및 미디어와 인터페이스하기 위해 제공될 수 있는, 디스켓 또는 CD-ROM 드라이브와 같은, 미디어 인터페이스에 제공될 수 있다. 따라서, 본 명세서에 기술된 바와 같이, 본 발명의 방법을 수행하기 위한 명령들 또는 코드를 포함하는 컴퓨터 소프트웨어는 관련 메모리 디바이스들(예를 들어, ROM, 고정 또는 이동식 메모리)에 저장될 수 있고, 사 용될 준비가 되면 부분적으로 또는 전체적으로(예를 들어, RAM으로) 로딩되고 CPU에 의해 구현된다. 그러한 소 프트웨어는, 펌웨어, 상주 소프트웨어, 마이크로코드, 등을 포함할 수 있지만, 이에 제한되지 않는다. 프로그램 코드를 저장 및/또는 실행하기에 적합한 데이터 처리 시스템은 시스템 버스를 통해 메모 리 엘리멘트들에 직접 또는 간접적으로 연결된 적어도 하나의 프로세서를 포함할 것이다. 메모리 엘 리멘트는 프로그램 코드의 실제 구현 중에 사용되는 로컬 메모리, 벌크 스토리지, 및 구현 동안 벌크 스토리지 에서 코드를 검색해야 하는 횟수를 줄이기 위해 적어도 일부 프로그램 코드의 임시 스토리지를 제공하는 캐시 메모리들을 포함할 수 있다. 입력/출력 또는 I/O 디바이스들(키보드 708, 디스플레이 706, 포인팅 디바이스들, 등을 포함하지만, 이 에 제한되지 않음)은 시스템에 직접(버스 710을 통하여) 또는 중간 I/O 제어기(명확성을 위해 생략)를 통해 연 결될 수 있다. 네트워크 인터페이스와 같은, 네트워크 어댑터들은 또한 데이터 처리 시스템이 개재 사설 또는 공 중 네트워크들(intervening private or public networks)을 통해 다른 데이터 처리 시스템들이나 원격 프린터 들 또는 스토리지 디바이스들에 연결될 수 있도록 시스템에 연결될 수 있다. 모뎀들, 케이블 모뎀들 및 이더넷 카드들은 현재 사용 가능한 네트워크 어댑터들 유형들 중 일부에 불과하다. 청구범위들을 포함하여, 본 명세서에서 사용되는 바와 같이, \"서버\"는 서버 프로그램을 실행하는 물리적 데이터 처리 시스템(예를 들어, 도 7에 도시된 바와 같은 시스템 712)을 포함한다. 그러한 물리적 서버는 디스 플레이 및 키보드를 포함하거나 포함하지 않을 수 있음을 이해할 것이다. 본 발명은 통합의 모든 기술적 세부 수준에서 시스템, 방법, 및/또는 컴퓨터 프로그램 제품일 수 있다. 컴퓨터 프로그램 제품은 컴퓨터 판독가능 스토리지 매체(또는 매체들)을 포함할 수 있고, 컴퓨터 판독가능 스토 리지 매체(또는 매체들)는 컴퓨터 판독가능 프로그램 명령들을 가지며, 컴퓨터 판독가능 프로그램 명령들은 프 로세서로 하여금 본 발명의 실시 예들(aspects)을 수행하도록 하기 위한 것이다. 컴퓨터 판독가능 스토리지 매체는 명령 실행 장치에서 사용하기 위한 명령들을 보유 및 저장할 수 있는 유형적인(tangible) 장치일 수 있다. 컴퓨터 판독가능 스토리지 매체는, 예를 들어, 전자 스토리지 장치, 자기 스토리지 장치, 광학 스토리지 장치, 전자기 스토리지 장치, 반도체 스토리지 장치, 또는 앞서 언급한 것들의 어떤 적절한 조합일 수 있으나, 이러한 것들로 한정되는 것은 아니다. 컴퓨터 판독가능 스토리지 매체의 더 많 은 구체적인 예들의 리스트(전체를 다 열거한 것은 아님)는 또한, 휴대용 컴퓨터 디스켓, 하드 디스크, 랜덤 억 세스 메모리(random access memory, RAM), 읽기 전용 메모리(read-only memory, ROM), 소거가능 프로그램가능 읽기 전용 메모리(erasable programmable read-only memory, EPROM 또는 플래쉬 메모리), 스태틱 랜덤 억세스 메모리(static random access memory, SRAM), 휴대용 컴팩트 디스크 읽기 전용 메모리(portable compact disc read-only memory, CD-ROM), 디지털 다용도 디스크(digital versatile disk, DVD), 메모리 스틱, 플로피 디스 크, 펀치-카드들 또는 기록된 명령들을 갖는 홈(groove)에서 볼록한 구조들과 같은 기계적으로 인코딩된 장치, 및 앞서 열거한 것들의 어떤 적절한 조합을 포함할 수 있다. 여기서 사용되는 것과 같이, 컴퓨터 판독가능 스토 리지 매체는, 무선 전파(radio waves) 또는 다른 자유롭게 전파되는 전자기파, 도파관 또는 다른 전송 매질을 통해 전파되는 전자기파(예컨대, 광섬유 케이블을 통과하는 광 펄스), 또는 와이어를 통해 전송되는 전기적 신 호와 같은 일시적인 신호들 그 자체로 구성되는 것은 아니다. 여기에 설명되는 컴퓨터 판독가능 프로그램 명령들은, 예를 들어, 인터넷, 근거리 통신망, 광역 통신망 및/또는 무선 통신망과 같은 통신망을 통해 컴퓨터 판독가능 스토리지 매체로부터 각각의 컴퓨팅/처리 장치들로, 또는 내부 컴퓨터 또는 외부 스토리지 장치로 다운로드될 수 있다. 통신망은 동선 전송 케이블, 광 전송 섬유, 무선 전송, 라우터, 방화벽, 스위치, 게이트웨이 컴퓨터 및/또는 엣지 서버를 포함할 수 있다. 각각 의 컴퓨팅/처리 장치에서 네트워크 어댑터 카드 또는 네트워크 인터페이스는, 각각의 컴퓨팅/처리 장치 내 컴퓨 터 판독가능 스토리지 매체에 저장하기 위해 통신망으로부터 컴퓨터 판독가능 프로그램 명령들을 수신하고 컴퓨 터 판독가능 프로그램 명령들을 전송한다. 본 발명의 동작들을 수행하기 위한 컴퓨터 판독가능 프로그램 명령들은 어셈블러 명령(assembler instructions), 명령-세트-아키텍쳐(instruction-set-architecture, ISA) 명령, 머신 명령(machine instructions), 머신 종속 명령(machine dependent instructions), 마이크로코드, 펌웨어 명령(firmware instructions), 상태-세팅 데이터(state-setting data), 집적 회로망용 구성 데이터(configuration data for integrated circuitry), 또는 하나 또는 그 이상의 프로그래밍 언어들의 어떤 조합으로 작성된 소스 코드 또는 객체 코드(object code)일 수 있다. 상기 프로그래밍 언어들은 스몰토크(Smalltalk), C++ 등과 같은 객체 지향 프로그래밍 언어(object oriented programming language), 및 \"C\" 프로그래밍 언어 또는 유사 프로그래밍 언어 들과 같은 절차형 프로그래밍 언어들을 포함한다. 컴퓨터 판독가능 프로그램 명령들은 독립형(stand-alone) 소 프트웨어 패키지로서 사용자의 컴퓨터 상에서 전적으로, 사용자의 컴퓨터 상에서 부분적으로 실행될 수 있고, 사용자의 컴퓨터 상에서 부분적으로 그리고 원격 컴퓨터 상에서 부분적으로 실행될 수 있고, 또는 원격 컴퓨터 또는 서버 상에서 전적으로 실행될 수 있다. 후자의 시나리오에 있어서, 원격 컴퓨터는 근거리 통신망(LAN) 또 는 광역 통신망(WAN)을 포함하는 어떤 유형의 통신망을 통해 사용자의 컴퓨터에 연결될 수 있고, 또는 그 연결 은 외부 컴퓨터에 대해 이뤄질 수 있다(예컨대, 인터넷 서비스 공급자(Internet Service Provider)를 사용하여 인터넷을 통해서). 몇몇 실시예들에 있어서, 본 발명의 측면들을 수행하기 위해, 예를 들어, 프로그램가능 로직 회로망(programmable logic circuitry), 필드-프로그램가능 게이트 어레이(field-programmable gate arrays, FPGA), 또는 프로그램가능 로직 어레이(Programmable logic arrays, PLA)를 포함하는 전기 회로망(electronic circuitry)은 전기 회로망을 고객 맞춤 제작(customize)하기 위해 컴퓨터 판독가능 프로그램 명령들의 상태 정 보를 이용함으로써 컴퓨터 판독가능 프로그램 명령들을 실행할 수 있다. 본 발명의 실시 예들은 여기서 발명의 실시예들에 따른 방법들, 장치들(시스템들), 및 컴퓨터 프로그램 제품들의 플로우챠트 설명들 및/또는 블록 다이어그램들을 참조하여 설명된다. 플로우챠트 설명들 및/또는 블록 다이어그램들에서 플로우챠트 설명들 및/또는 블록 다이어그램들의 각각의 블록, 및 블록들의 조합들은 컴퓨터 판독가능 프로그램 명령들에 의해 구현될 수 있다는 것이 이해된다. 이들 컴퓨터 판독가능 프로그램 명령들은 머신(machine)을 생성하기 위해 범용 컴퓨터(general purpose computer), 전용 컴퓨터(special purpose computer), 또는 다른 프로그램가능 데이터 처리 장치의 프로세서에 게 제공될 수 있으며, 그리하여 컴퓨터 또는 다른 프로그램가능 데이터 처리 장치의 프로세서를 통해 실행될 때 그 명령들이 플로우챠트 및/또는 블록 다이어그램 블록 또는 블록들에 명시된 기능들/동작들을 구현하기 위한 수단을 생성하도록 한다. 이들 컴퓨터 판독가능 프로그램 명령들은 또한 컴퓨터 판독가능 스토리지에 저장될 수 있으며, 컴퓨터 판독가능 스토리지는 컴퓨터, 프로그램가능 데이터 처리 장치, 및/또는 다른 장치들이 특정 방 식으로 기능하도록 지시할 수 있다. 그리하여, 내부에 저장된 명령들을 갖는 컴퓨터 판독가능 스토리지 매체가 플로우챠트 및/또는 블록 다이어그램의 블록 또는 블록들에 명시된 기능/동작의 측면들을 구현하는 명령들을 포 함하는 제조 물품을 포함하도록 한다. 컴퓨터 판독가능 프로그램 명령들은 또한 컴퓨터, 다른 프로그램가능 데이터 처리 장치, 또는 다른 다바 이스 상으로 로딩되어 컴퓨터, 다른 프로그램가능 장치 또는 다른 장치 상에서 수행될 일련의 동작 단계들로 하 여금 컴퓨터로 구현된 프로세스를 생성하게 할 수 있다. 그리하여 컴퓨터, 다른 프로그램가능 장치, 또는 다른 장치 상에서 실행되는 명령들이 플로우챠트 및/또는 블록 다이어그램의 블록 또는 블록들에 명시된 기능들/동작 들을 구현하도록 한다. 도면들에서 플로우챠트 및 블록 다이어그램들은 본 발명의 다양한 실시예들에 따른 시스템들, 방법들, 및 컴퓨터 프로그램 제품들의 가능한 구현의 아키텍쳐, 기능성, 및 동작을 보여준다. 이 점에서, 플로우챠트 또 는 블록 다이어그램들에서의 각각의 블록은 모듈, 세그먼트, 또는 명령들의 일부분을 나타낼 수 있으며, 이는 명시된 로직적 기능(들)을 구현하기 위한 하나 또는 그 이상의 실행가능한 명령들을 포함한다. 몇몇 다른 구현 들에 있어서, 블록들에 기재되어 있는 기능들은 도면들에 기재되어 있는 순서를 벗어나서 발생할 수도 있다. 예 를 들어, 연속해서 보여지는 두 개의 블록들은, 사실, 실질적으로 동시에 일어날 수 있고, 또는 블록들은 때로 는 관련된 기능에 따라 역순으로 실행될 수도 있다. 또한, 블록 다이어그램들 및/또는 플로우챠트 그림의 각각 의 블록, 및 블록 다이어그램들 및/또는 플로우챠트 그림에서의 블록들의 조합들은 명시된 기능들 또는 동작들 (acts)을 수행하거나 전용 하드웨어와 컴퓨터 명령들의 조합들을 수행하는 전용 하드웨어 기반 시스템들에 의해 구현될 수 있다는 것이 주목될 수 있다. 여기에 기술된 모든 방법들은 컴퓨터 판독 가능 저장 매체에 구현된 별개의 소프트웨어 모듈들을 포함하 는 시스템을 제공하는 추가 단계를 포함할 수 있고; 상기 모듈들은, 예를 들어, 여기에 설명된 컴포넌트들 중 일부 또는 전부를 포함할 수 있다. 그 다음, 상기 방법 단계들은, 전술한 바와 같이, 하드웨어 프로세서에 서 실행되는, 시스템의 별개의 소프트웨어 모듈들 및/또는 서브모듈들을 사용하여 수행될 수 있다. 또한, 컴퓨터 프로그램 제품은, 별개의 소프트웨어 모듈들을 갖는 시스템의 제공을 포함하여, 본 명세서에 기술된 적어도 하나의 방법 단계를 수행하도록 구현되도록 구성된 코드가 있는 컴퓨터 판독 가능 저장 매체를 포함할 수 있다. 어떤 경우에든, 여기에 예시된 컴포넌트들은, 예를 들어, 주문형 집적 회로(들)(ASIC), 기능 회로, 관련 메모리 등이 있는 적절하게 프로그래밍된 디지털 컴퓨터와 같은, 다양한 형태의 하드웨어, 소프트웨어 또는 이 들의 조합으로 구현될 수 있음을 이해해야 한다. 본 명세서에 제공된 본 발명의 기술적 사상들이 주어지면, 관 련 기술 분야의 통상의 기술자는 본 발명의 컴포넌트들의 다른 구현을 고려할 수 있을 것이다. 본 발명은 클라우드 컴퓨팅에 관해서 상세한 설명들을 포함하지만, 여기서 설명된 그러한 기술적 사상들 의 구현은 클라우드 컴퓨팅 환경에만 한정되는 것은 아님을 이해하여야 한다. 오히려, 본 발명의 실시 예들은 지금 알려져 있거나 또는 나중에 개발될 모든 다른 유형의 컴퓨팅 환경과 함께 구현될 수 있다. 클라우드 컴퓨팅은, 최소한의 관리 노력 또는 서비스 제공자와의 상호작용으로 빠르게 제공되고 해제될 수 있는, 구성 가능한(configurable) 컴퓨팅 자원들(예를 들어, 네트워크들, 네트워크 대역폭, 서버들, 처리, 메모리, 스토리지, 애플리케이션들, 가상 머신들, 및 서비스들)의 공유 풀에 대한 편리한 주문형(on-demand) 네 트워크 액세스를 가능하게 하는 서비스 전달 모델이다. 이 클라우드 모델은 적어도 5가지의 특성 (characteristics), 적어도 3가지 서비스 모델(service models), 및 적어도 4가지 배치 모델(deployment models)을 포함할 수 있다. 특성들은 다음과 같다: 주문형 셀프-서비스(On-demand self-service): 클라우드 소비자는, 서비스 제공자와의 인적 상호작용을 필요로 하지 않고 필요한 만큼 자동적으로, 서버 시간(server time) 및 네트워크 스토리지 같은 컴퓨팅 용량들 을 일방적으로 제공(provision)할 수 있다. 광역 네트워크 액세스(Broad network access): 혼성의 씬 또는 씩 클라이언트 플랫폼들(heterogeneous thin or thick client platforms)(예를 들어, 모바일폰들, 랩탑들, 및 PDA들)에 의한 사용을 장려하는 표준 메 커니즘들을 통해 액세스되는 기능들을 네트워크를 통해서 이용할 수 있다. 자원 풀링(Resource pooling): 제공자의 컴퓨팅 자원들은, 각기 다른 물리적 및 가상 자원들을 요구 (demand)에 따라 동적으로 할당 및 재할당하는, 멀티-테넌트 모델(a multi-tenant model)을 사용하는 다수의 소 비자들에게 서비스할 수 있도록 풀에 넣어둔다(pooled). 소비자는 일반적으로 제공된 자원들의 정확한 위치를 제어할 수 없거나 그에 대한 지식이 없지만 더 높은 추상 수준에서(예를 들어, 국가, 주, 또는 데이터센터) 위 치를 명시할 수 있다는 점에서 위치 독립성이 있다. 기민한 탄력성(Rapid elasticity): 용량들(capabilities)이 기민하게 탄력적으로 제공되어 (어떤 경우 엔 자동으로) 신속히 규모를 확장할 수도 있고(scale out) 그리고 탄력적으로 해제되어 신속히 규모를 축소할 수도 있다(scale in). 소비자에게 제공할 수 있는 가능성이 종종 무제한이고 언제든지 원하는 수량으로 구매할 수 있는 것처럼 보인다. 측정 가능한 서비스(Measured service): 클라우드 시스템들은 자원 사용을 자동으로 제어하고 최적화하 는데, 서비스의 유형(예를 들어, 스토리지, 처리, 대역폭, 및 활성 사용자 계정)에 적절한 추상화 수준에서(at some level of abstraction) 계측 기능을 이용하여서 그렇게 한다. 자원 사용량은 모니터 되고, 제어되고, 그리 고 보고될 수 있으며 이로써 이용하는 서비스의 제공자와 사용자 모두에게 투명성을 제공한다. 서비스 모델들(Service Models)은 다음과 같다: 소프트웨어 서비스(Software as a Service)(SaaS): 소비자에게 제공되는 서비스는 클라우드 하부구조 상 에서 실행되는 제공자의 애플리케이션들을 사용하게 해주는 것이다. 애플리케이션들은 웹 브라우저(예를 들어, 웹기반 이메일) 같은 씬(thin) 클라이언트 인터페이스를 통해 여러 클라이언트 장치들에서 액세스 가능하다. 소 비자는 네트워크, 서버들, 운영 체제들, 스토리지, 또는 개별 애플리케이션 능력들을 포함하는 하부 클라우드 하부구조를 관리하거나 제어하지 않는다. 단, 제한된 사용자-특정 애플리케이션 구성 세팅들은 예외로서 가능하 다. 플랫폼 서비스(Platform as a Service)(PaaS): 소비자에게 제공되는 서비스는 제공자에 의해 지원되는 프로그래밍 언어들 및 도구들을 이용하여 생성된 소비자-생성 또는 획득 애플리케이션들을 클라우드 하부구조에 배치하게 해주는 것이다. 소비자는 네트워크, 서버들, 운영 체제들, 또는 스토리지를 포함하는 하부 클라우드 하부구조를 관리하거나 제어하지 않는다. 그러나 배치된 애플리케이션들에 대해서 그리고 가능한 경우 애플리케이션 호스팅 환경 구성들에 대해서 제어할 수 있다. 하부구조 서비스(Infrastructure as a Service)(IaaS): 소비자에게 제공되는 서비스는 처리, 스토리지, 네트워크, 및 기타 기본 컴퓨팅 자원들을 제공하여 주는 것이며, 여기서 소비자는 임의의 소프트웨어를 배치 및 실행할 수 있고, 이 소프트웨어에는 운영 체제들과 애플리케이션들이 포함될 수 있다. 소비자는 하부 클라우드 하부구조를 관리하거나 제어하지 않지만, 운영 체제들, 스토리지, 배치된 애플리케이션들, 및 가능한 경우 선택 된 네트워킹 컴포넌트들의 제한적인 제어(예를 들어, 호스트 방화벽들)에 대하여 제어할 수 있다. 배치 모델들(Deployment Models)은 다음과 같다: 사설 클라우드(Private cloud): 클라우드 하부구조는 오직 한 조직(an organization)을 위해서 운영되 고, 그 조직 또는 제3자에 의해 관리될 수 있으며 옥내(on-premises) 또는 옥외(off-premises)에 위치할 수 있 다. 커뮤니티 클라우드(Community cloud): 클라우드 하부구조는 여러 조직들에 의해 공유되고 관심사(예를 들어, 선교, 보안 요건, 정책, 및 규정 준수 심사)를 공유하는 특정 커뮤니티를 지원하며, 여러 조직들 또는 제 3자에 의해 관리될 수 있으며 옥내(on-premises) 또는 옥외(off-premises)에 위치할 수 있다. 공공 클라우드(Public cloud): 클라우드 하부구조는 일반 대중 또는 대규모 산업 집단에서 이용할 수 있 으며 클라우드 서비스를 판매하는 조직이 소유한다. 하이브리드 클라우드(Hybrid cloud): 클라우드 하부구조는 둘 또는 그 이상의 클라우드들(사설, 커뮤니 티, 또는 공공)이 혼합된 구성이며, 이들은 고유한 주체들로 있지만 데이터 및 애플리케이션 이식가능성 (portability)을 가능하게 해주는 표준화된 또는 소유권 있는 기술(예를 들어, 클라우드들 사이의 부하 균형을 위한 클라우드 버스팅(cloud bursting))에 의해 서로 결합되어 있다. 클라우드 컴퓨팅 환경은 상태비보존(statelessness), 낮은 결합(low coupling), 모듈 방식 (modularity), 및 의미적 상호운용성(semantic interoperability)에 집중하는 서비스를 지향한다. 클라우드 컴 퓨팅의 중심에는 상호 연결된 노드들의 네트워크를 포함하는 하부구조가 있다. 이제 도 8을 참조하면, 예시적인 클라우드 컴퓨팅 환경이 도시된다. 도시된 바와 같이, 클라우드 컴퓨팅 환경은 예를 들어 개인 휴대 정보 단말기(PDA) 또는 휴대폰(854A), 데스크탑 컴퓨터(854B), 랩탑 컴퓨터(854C), 및/또는 자동차용 컴퓨터 시스템(854N)과 통신할 수 있는 것과 같이, 클라우드 소비자가 사용하 는 로컬 컴퓨팅 디바이스가 하나 또는 그 이상의 클라우드 컴퓨팅 노드들을 포함한다. 노드들은 서로 통신할 수 있다. 이들은 여기에 기술된 바와 같은 사설, 커뮤니티, 공공, 또는 하이브리드 클라우드들 또는 이 들의 조합 등의 하나 또는 그 이상의 네트워크들에서 물리적으로 또는 가상으로 그룹화될 수 있다(도시되지 않 음). 이것은 클라우드 소비자가 로컬 컴퓨팅 디바이스 상에 자원들을 유지할 필요가 없게 클라우드 컴퓨팅 환경 이 하부구조, 플랫폼들 및/또는 소프트웨어를 서비스로서 제공할 수 있게 해준다. 도 8에 도시된 컴퓨팅 디바이스들(854A-N)의 유형들은 단지 예시의 목적으로 기술한 것이며 컴퓨팅 노드들과 클라우드 컴퓨팅 환 경은 모든 유형의 네트워크 및/또는 네트워크 주소지정가능 연결을 통해서 (예를 들어, 웹 브라우저를 사 용하여) 모든 유형의 컴퓨터화된 장치와 통신할 수 있다는 것을 이해해야 한다. 이제 도 9을 참조하면, 클라우드 컴퓨팅 환경 (도 8)에 의해 제공되는 일 세트의 기능별 추상화 층 들이 도시된다. 도 9에 도시된 컴포넌트들, 층들, 및 기능들은 단지 예시의 목적이며 본 발명의 바람직한 실시 예들은 이것에 한정되지 않는다는 것을 미리 이해해야 한다. 도시된 바와 같이, 다음의 층들과 그에 대응하는 기능들이 제공된다: 하드웨어 및 소프트웨어 층은 하드웨어 및 소프트웨어 컴포넌트들을 포함한다. 하드웨어 컴포넌트 들의 예들에는: 메인프레임들; RISC(Reduced Instruction Set Computer) 아키텍처 기반 서버들; 서 버들; 블레이드 서버들; 스토리지 디바이스들; 그리고 네트워크 및 네트워킹 컴포넌트들이 포함된다. 일부 실시 예들에서, 소프트웨어 컴포넌트들은 네트워크 애플리케이션 서버 소프트웨어 및 데이 터베이스 소프트웨어를 포함한다. 가상화 층은 추상화 층을 제공하며 이로부터 다음의 가상 주체들의 예들이 제공될 수 있다: 가상 서버들; 가상 스토리지; 가상 사설 네트워크를 포함하는, 가상 네트워크들; 가상 애플리케이션 들 및 운영 체제들; 및 가상 클라이언트들. 한 예에서, 관리 층은 아래에 기술하는 기능들을 제 공한다. 자원 제공(Resource provisioning)은 클라우드 컴퓨팅 환경 내에서 작업들을 수행하는 데 이용되는 컴퓨팅 자원들 및 기타 자원들의 동적 조달을 제공한다. 계측 및 가격 책정(Metering and Pricing)은 자원들이 클라우드 컴퓨팅 환경 내에서 이용될 때 비용 추적, 및 이 자원들의 소비에 대한 요금 청구 또는 송장 을 제공한다."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "[00100] 한 예에서, 이들 자원들은 애플리케이션 소프트웨어 라이센스를 포함할 수 있다. 보안(Security)은 데 이터 및 기타 자원들에 대한 보호뿐 아니라 클라우드 소비자들과 작업들에 대한 신원 확인을 제공한다. 사용자 포털(User portal)은 소비자들 및 시스템 관리자들에게 클라우드 컴퓨팅 환경에 대한 액세스를 제공한다. 서비스 수준 관리(Service level management)는 요구되는 서비스 수준이 충족되도록 클라우드 컴퓨팅 자원 할당 및 관리를 제공한다. 서비스 수준 협약서(SLA) 기획 및 충족(planning and fulfillment)은 SLA에 부 합하는 예상되는 미래 요건에 맞는 클라우드 컴퓨팅 자원들의 사전-배치(pre-arrangement) 및 조달 (procurement)을 제공한다."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "[00101] 워크로드 층은 클라우드 컴퓨팅 환경이 이용될 수 있는 기능들의 예들을 제공한다. 본 발명의 하 나 또는 그 이상의 실시예들에 따라, 이 층에서 제공될 수 있는 워크로드들과 기능들의 예들은 다음을 포함한다: 맵핑 및 네비게이션; 소프트웨어 개발 및 라이프사이클 관리; 가상 교실 훈련 전달; 데이터 분석 처리; 트랜잭션 처리; 및 인공 지능 앨고리즘(임계 검출 및 부동-소수점 계산들이 있 는)처리(artificial intelligence algorithm (with threshold detection and floating-point computations) processing)."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "[00102] 본 명세서에서 사용된 용어는 단지 특정 실시예를 설명하기 위한 것이며 본 발명을 제한하려는 의도가 아니다. 본 명세서에서 사용된 단수형은 문맥상 명백하게 다르게 나타내지 않는 한 복수형도 포함하는 것으로 의도된다. \"포함하다\" 및/또는 \"포함하는\"이라는 용어는 본 명세서에서 사용될 때 명시된 특징들, 단계들, 동작 들, 엘리멘트들 및/또는 컴포넌트들의 존재를 명시하지만, 다른 특징, 단계, 동작, 엘리멘트, 컴포넌트 및/또는 이들의 그룹의 존재 또는 추가를 배제하지 않음이 더 이해될 것이다."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 11, "content": "[00103] 본 발명의 적어도 하나의 실시예는 예를 들어, 모델 복원 로직의 복잡한 매뉴얼(예를 들어, 맞춤형) 개 발을 대체하는 프레임워크(framework)(예를 들어, 하나 또는 그 이상의 프레임워크 구성들의 세트)와 같은 유익 한 효과를 제공할 수 있다. 본 명세서에서 예시적으로 설명된 바와 같이, 상기 프레임워크는 실패 검출 컴포넌 트들의 세트 및 연관된 모델 복원 파이프라인들로 구성되고 인스턴스화된다(instantiated). 일단 인스턴스화되 면, 상기 프레임워크는 로그들을 입력으로 사용하여 지정된 라이프사이클에 연결되고(plug) 새로운 모델 버전에 대한 새로운 모델 아티팩트들을 기존 수명 주기 파이프라인들에 전달한다. 하나 또는 그 이상의 예시적인 실시 예들에서, 상기 프레임워크는 AI 애플리케이션들의 엔드-투-엔드 개발 및 라이프사이클 관리를 위한 클라우드 기반 프레임워크 및 플랫폼이다."}
{"patent_id": "10-2023-7016652", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "[00104] 본 발명의 다양한 실시 예들에 대한 설명은 예시를 위해 제시되었지만, 개시된 실시 예들이 전부라거나 이들로 제한되도록 의도되지 않는다. 설명된 실시예들의 범위 및 사상을 벗어나지 않고 많은 수정들 및 변형들 이 당업자에게 명백할 것이다. 본 명세서에서 사용된 용어는 실시예의 원리, 시장에서 발견되는 기술에 대한 실 제 적용 또는 기술적 개선을 가장 잘 설명하거나, 당업자가 본 명세서에 개시된 실시예를 이해할 수 있도록 선 택되었다."}
{"patent_id": "10-2023-7016652", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1a는 하나 혹은 그 이상의 예시적인 실시예들이 구현될 수 있는 부동-소수점 수의 필드 형식을 묘사 한다. 도 1b는 하나 혹은 그 이상의 예시적인 실시예들이 구현될 수 있는 부동-소수점 수의 산술 표현을 묘사 한다. 도 1c는 하나 혹은 그 이상의 예시적인 실시예들이 구현될 수 있는 부동-소수점 도트-곱 계산과 연관된 컴퓨팅 커널을 묘사한다. 도 2는 하나 혹은 그 이상의 예시적인 실시예들이 구현될 수 있는 부동-소수도트 곱셈-누산기 (multiplier-accumulator)를 묘사한다. 도 3은 예시적인 실시예들에 따른 부동-소수점 접-곱 계산을 위한 임계값 검출 로직을 묘사한다. 도면들 4a 및 4b는 예시적인 실시예들에 따른 전압 스케일링이 없는 처리 플로 및 전압 스케일링이 있는 처리 플로를 각각 묘사한다. 도 5는 예시적인 실시예에 따른 부동-소수점 도트-곱 계산을 위한 임계값 검출 로직에 대한 방법을 묘사 한다. 도 6은 예시적인 실시예에 따른 인공 지능 시스템의 예시적인 구현을 묘사한다. 도 7은 예시적인 실시예에 따른 예시적인 프로세서 시스템을 묘사한다. 도 8은 예시적인 실시예에 따른 클라우드 컴퓨팅 환경을 묘사한다. 도 9는 예시적인 실시예에 따른 추상화 모델 층들을 묘사한다."}
