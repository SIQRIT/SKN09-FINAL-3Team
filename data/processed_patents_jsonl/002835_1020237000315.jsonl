{"patent_id": "10-2023-7000315", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0029763", "출원번호": "10-2023-7000315", "발명의 명칭": "시스템 전반의 플랜트 최적화를 위한 최적화 모델의 자동 생성", "출원인": "인터내셔널 비지네스 머신즈 코포레이션", "발명자": "판, 중 텐"}}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컴퓨터 구현 방법에 있어서, 상기 컴퓨터 구현 방법은,플랜트 프로세스(plant process)의 프로세스 흐름도를 노드들(nodes)과 엣지들(edges)을 구비하는 그래프로 매핑(mapping)하는 단계 - 여기서, 상기 노드들은 프로세스를 나타내고 상기 엣지들은 프로세스들 사이의 흐름들을 나타냄 -;적어도 상기 플랜트 프로세스의 과거 데이터를 기반으로 상기 그래프의 각 노드에 대한 동작(a behavior)을 학습하는 단계; 및상기 프로세스들 각각의 출력을 예측하기 위해 각 노드에 대한 하나 이상의 회귀 함수들(regression functions)을 모델링하는 단계를 포함하고,상기 하나 이상의 회귀 함수들은 각 노드에 대한 학습된 동작을 기반으로 모델링되는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 그래프는 플랜트의 2-단계 완전 연결 피드-포워드 네트워크(two-level fully connected feed-forwardnetwork)인, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,각 노드에 대한 입력들은 제어된 변수들 및 제어되지 않은 변수들을 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 컴퓨터 구현 방법은, 상기 그래프에 대해 상호 연결된 노드들을 식별하는 인접 행렬(adjacency matrix)을생성하여 네트워크 토폴로지(network topology)를 인코딩하는 단계를 더 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 컴퓨터 구현 방법은, 입력 검증을 위해 방향성 비순환 그래프(directed acyclic graph)를 플로팅(plotting)하기 위해 상기 그래프로부터의 노드들 및 엣지들의 하나 이상의 행렬 및 위치를 이용하여 상기 네트워크 토폴로지를 디코딩하는 단계를 더 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4항에 있어서,공개특허 10-2023-0029763-3-상기 컴퓨터 구현 방법은, 각각의 노드에 대한 회귀 함수 및 상기 인접 행렬로부터 최적화 모델을 생성하는 단계를 더 포함하고, 상기 최적화 모델은 하나 이상의 파라미터들의 최적화를 위해 각 노드에 대한 설정점들(setpoints)을 제공하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 모델 생성기는 함수값 추정기 및 기울기 추정기를 갖는 연속 최적화 모델을 출력하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 모델 생성기는 상기 하나 이상의 회귀 함수들을 모델링하기 위한 혼합 정수 선형 프로그램(mixed-integerlinear program)을 출력하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제6항에 있어서, 상기 컴퓨터 구현 방법은,상이한 핵심 성과 지표들(different key performance indicators)을 입력으로 제공하는 단계, 및상기 입력된 핵심 성과 지표들을 달성하기 위해 설정점들에 대한 옵션들을 생성하는 단계를더 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 컴퓨터 구현 방법은, 상기 회귀 함수의 입력이 올바른지 여부를 자동으로 결정하는 단계를 더 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1항에 있어서,상기 그래프는 2-단계 완전 연결 피-드포워드 네트워크(two-level fully connected feed-forward network)인, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항에 있어서,상기 회귀 함수는 조각별(piece-wise) 선형 및 비선형 유형의 회귀 모델을 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "플랜트의 사이트 전체 최적화를 위한 최적화 모델을 자동으로 생성하기 위한 컴퓨터 구현 방법에 있어서, 상기컴퓨터 구현 방법은, 상기 플랜트의 프로세스 흐름도에 대한 그래픽 표현을 정의하는 단계;상기 그래픽 표현에 대한 인접 행렬(adjacency matrix)을 생성하기 위해 상기 그래픽 표현의 네트워크 토폴로지공개특허 10-2023-0029763-4-(network topology)를 인코딩하는 단계;상기 네트워크 토폴로지를 정의하는 일련의 방정식을 자동으로 생성하는 단계; 각 프로세스에서 수신된 입력을 기반으로 상기 플랜트의 각 프로세스의 출력을 예측하기 위하여 머신 러닝 플랫폼을 사용하여 하나 이상의 회귀 함수들을 모델링하는 단계; 및각 노드에 대한 상기 하나 이상의 회귀 함수들과 상기 인접 행렬로부터 최적화 모델을 생성하는 단계를 포함하고,상기 최적화 모델은 상기 플랜트의 각 프로세스에 대한 설정점들을 제공하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 그래픽 표현은 스킵 레이어 가정(skip layer assumption)이 없는 2-단계 완전 연결 피드-포워드 네트워크인, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제13항에 있어서,상기 네트워크 토폴로지를 인코딩하는 단계는 상기 플랜트 프로세스의 입력보다 적은 입력으로 수행되는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제13항에 있어서,상기 컴퓨터 구현 방법은, 입력 검증을 위한 방향성 비순환 그래프를 플로팅하기 위해 상기 그래픽 표현으로부터의 노드들 및 엣지들의 행렬 및 위치를 이용하여 상기 네트워크 토폴로지를 디코딩하는 단계를 더 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제13항에 있어서,상기 네트워크 토폴로지를 인코딩하는 단계는 상기 그래프에 대해 상호 연결된 노드들을 식별하는 인접 매트릭스(adjacency matrix)를 생성하는 단계를 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,상기 컴퓨터 구현 방법은, 각 노드에 대한 상기 회귀 함수 및 상기 인접 행렬로부터 최적화 모델을 생성하는 단계를 더 포함하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서,상기 모델 생성기는 함수값 추정기 및 기울기 추정기를 갖는 연속 최적화 모델을 출력하는, 컴퓨터 구현 방법.공개특허 10-2023-0029763-5-청구항 20 제18항에 있어서,상기 모델 생성기는 상기 하나 이상의 회귀 함수들을 모델링하기 위한 혼합 정수 선형 프로그램을 출력하는, 컴퓨터 구현 방법."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "컴퓨터 판독 가능한 명령을 갖는 컴퓨터 판독 가능한 프로그램 코드를 유형적으로(tangibly) 구현하는 비일시적컴퓨터 판독 가능한 저장 매체(non-transitory computer readable storage medium)에 있어서,상기 컴퓨터 판독 가능한 명령은 실행될 때, 컴퓨터 장치가 사이트 전체 플랜트 최적화(site-wide plantoptimization)를 위한 최적화 모델을 자동으로 생성하기 위한 컴퓨팅 장치의 컴퓨팅 효율을 향상시키는 방법을수행하도록 하며,상기 방법은,상기 플랜트 프로세스의 프로세스 흐름도에 대해 노드들과 엣지들을 구비하는 그래픽 표현을 정의하는 단계 -여기서, 상기 그래픽 표현의 노드는 프로세스를 나타내고, 상기 그래픽 표현의 엣지는 상기 발전소 프로세스들사이의 흐름을 나타냄 -;상기 그래프에 대해 상호 연결된 노드들을 식별하는 인접 행렬을 생성하여 상기 그래픽 표현의 네트워크 토폴로지를 인코딩하는 단계;상기 네트워크 토폴로지를 정의하는 일련의 방정식을 자동으로 생성하는 단계;각 프로세스에서 수신된 입력에 기초하여 상기 플랜트 프로세스들의 각 프로세스의 출력을 예측하기 위해 머신러닝 플랫폼을 사용하여 하나 이상의 회귀 함수들을 모델링하는 단계; 및각 노드에 대한 상기 하나 이상의 회귀 함수들과 상기 인접 행렬로부터 최적화 모델을 생성하는 단계를 포함하고,상기 최적화 모델은 상기 플랜트의 각 프로세스에 대한 설정점들을 제공하는, 비일시적 컴퓨터 판독 가능한 저장 매체."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제21항에 있어서,상기 프로세서에 의한 상기 코드의 실행은,입력 검증을 위한 방향성 비순환 그래프를 플로팅하기 위해 상기 그래프로부터의 노드들 및 엣지들의 위치 및행렬을 이용하여 상기 네트워크 토폴로지를 디코딩하는 단계를 포함하는 동작을 수행하도록 상기 컴퓨팅 장치를더 구성하는, 비일시적 컴퓨터 판독 가능한 저장 매체."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제21항에 있어서,상기 모델 생성기는 함수값 추정기 및 기울기 추정기를 갖는 연속 최적화 모델을 출력하는, 비일시적 컴퓨터 판독 가능한 저장 매체."}
{"patent_id": "10-2023-7000315", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제22항에 있어서,상기 모델 생성기는 상기 하나 이상의 회귀 함수들을 모델링하기 위한 혼합 정수 선형 프로그램을 출력하는, 비일시적 컴퓨터 판독 가능한 저장 매체.공개특허 10-2023-0029763-6-청구항 25 제22항에 있어서,상기 모델 생성기는 상기 하나 이상의 회귀 함수들을 모델링하기 위한 혼합 정수 선형 프로그램을 출력하는, 비일시적 컴퓨터 판독 가능한 저장 매체."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "사이트 전체의 플랜트 최적화를 위한 최적화 모델을 자동으로 생성하기 위한 컴퓨터 구현 방법은 플랜트 프로세 스의 프로세스 흐름도를 노드 및 엣지를 구비하는 그래프로 매핑하는 단계를 포함한다. 노드는 프로세스를 나타 내고 엣지는 프로세스들 간의 흐름을 나타낸다. 적어도 플랜트 프로세스의 과거 데이터를 기반으로 그래프의 각 노드에 대해 동작을 학습한다. 각 프로세스의 출력을 예측하기 위해 각 노드에 대해 하나 이상의 회귀 함수가 모 델링된다. 하나 이상의 회귀 함수는 각 노드에 대한 학습된 동작을 기반으로 모델링된다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 일반적으로 플랜트 최적화 컴퓨터 시스템 및 이와 함께 사용하기 위한 방법 및 소프트웨어에 관한 것으로, 보다 구체적으로는 프로세스 플랜트에 대한 운영상의 설정점 추천들(operational set-point recommendations)을 생성하기 위한 시스템 전반 플랜트 최적화 모델의 자동 생성 방법 및 시스템에 관한 것이다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "제조 및 프로세스 산업은, 각각 독립적인 입력들 및 출력들 세트(self-contained set of inputs and outputs)를 갖는, 복잡한 프로세스들의 사이트 전체 네트워크(site-wide network)로 구성된다. 단위 프로세스 내에서, 원하는 출력의 설정점들, 처리량 및 품질과 결과적인 폐기물 흐름 사이에는 종종 일시적인 관계가 존재 한다. 입력 흐름, 운영 요구사항, 유지보수, 고장, 생산 계획 변경 등의 변동성으로 인해 생산 프로세스는 동적 으로 변화한다. 플랜트 전반의 관리를 위해서는 동적인 프로세스의 동작을 예측하고 가능한 한 생산 계획을 준 수하도록 제어를 변경할 수 있는 능력이 필요하다. 수동 최적화 모델 생성은 시간이 많이 걸리고 까다로우며 도 메인 전문가와 최적화 전문가가 모두 필요하다. 현재 산업 관행은 운영 전략을 고안하기 위해 인공지능(AI)을 매우 제한적으로 사용하는 것을 포함한다. 예를 들어, 계획되지 않은 프로세스 고장의 경우, 플랜트 관리자(PM)는 경험 기반 또는 휴리스틱 기반 (heuristic-based) 접근법을 사용하여 고장에 의해 부과되는 운영 제약 조건 하에서 최상의 생산 속도를 제공하 는 설정점들(set points)을 결정할 수 있다. 기존 프로세스의 공통적인 특징은 흐름 및 재료 균형 방정식(flow and material balance equations)을 통해 결합된, 각 프로세스에 대한 비선형 물리적 제1 원칙(예를 들어, 열역학) 모델의 사용이다. 기존 작업은 이전에 물리적 모델과 데이터 기반 모델을 결합했다. 복잡한 프로세스에 대한 대리 통계 모델(surrogate statistical models)의 개발이 수행되었지만, 주로 상세 프로세스 시뮬레이터(detailed process simulator)를 사용하여 반응 표면 모델(response surface model)을 추정하는 실험 설계로 수행되었다. 일부 기존 프로세스는 생산 프로세스를 최적화하기 위해 대리 모델을 사용했지만, 이것은 일반적으로 설계 단계에서 플로우 시트 구조 (flowsheet structure)를 최적화하거나 단일 프로세스에 대한 설정점을 최적화하는 맥락에서 수행된다. 기존 프 로세스는 플랜트 시뮬레이터의 사용 없이 과거 플랜트 센서 데이터에만 의존할 수 없다. 기존의 엔드-투-엔드 학습 방법(end-to-end learning method)은 하나의 프로세스만 고려하고, 2-단계 확률적 프로그래밍 문제(two-stage stochastic programming problem)를 해결하기 때문에 특정 클래스의 문제만 처리할 수 있다. 일반적인 프로세스는 최적화 문제가 제어 변수와 관련하여 볼록(convex)하다고 가정한다. 이 조건은 의사 결정 트리 회귀(decision tree regression), 심층 신경망(deep neural networks), 다변량 적응형 회귀 스플라인들(multivariate adaptive regression splines : MARS) 및 랜덤 포레스트들(random forests)과 같은 많은 일반적인 회귀 함수들(regression functions)에 적용되지 않는다. 기존의 엔드-투-엔드 학습 방법 중 일부는 의사 결정 중심 학습 프레임워크(decision-focused learning framework)가 선형 프로그램(linear program) 또는 하위 모듈식 최대화(submodular maximization)로 표현되어야 한다. 플랜트에 대한 센서 데이터는 서로 다른 시간 해상도에서 나오기 때문에 사이트 전체 최적화 문제에 대한 엔드-투-엔드 솔루션을 구축할 가능 성은 낮다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 다중 플랜트 프로세스 산업에서 다중 기간 설정점 제어 문제(multi-period set point control problem)에 대한 최적화 모델을 자동으로 생성하는 프레임워크를 제시한다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시예에 따르면, 사이트 전체의 플랜트 최적화(site-wide plant optimization)를 위한 최적화 모델의 자동 생성을 위한 컴퓨터 구현 방법이 제공된다. 상기 방법은 플랜트 프로세스의 프로세스 흐름도를 노 드들(nodes) 및 엣지들(edges)로 구성된 그래프에 매핑(mapping)하는 단계를 포함하며, 노드는 프로세스를 나타 내고 엣지는 프로세스 간의 흐름을 나타낸다. 적어도 플랜트 프로세스의 과거 데이터를 기반으로 그래프의 각 노드에 대해 동작이 학습된다. 각 프로세스의 출력을 예측하기 위해 각 노드에 대해 하나 이상의 회귀 함수 (regression functions)가 모델링되며, 여기서 하나 이상의 회귀 함수는 각 노드에 대한 학습된 동작을 기반으 로 모델링된다. 일부 실시예에서, 상기 그래프는 플랜트의 방향성 비순환 그래프(directed acyclic graph)이다. 일부 실시예에서, 각 노드에 대한 입력은 제어된 변수 및 제어되지 않은 변수를 포함한다. 일부 실시예에서, 상기 방법은 상호 연결된 노드들을 식별하는 인접 행렬(adjacency matrix)을 그래프에 대해 생성함으로써 네트워크 토폴로지(network topology)를 인코딩(encoding)하는 단계를 더 포함한다. 일부 실시예에서, 상기 방법은 입력 검증을 위해 방향성 비순환 그래프를 플로팅(plotting)하기 위해 그 래프로부터의 노드 및 엣지의 하나 이상의 행렬 및 위치를 사용하여 네트워크 토폴로지를 디코딩하는 단계를 더 포함한다. 일부 실시예에서, 상기 방법은 각 노드에 대한 회귀 함수 및 인접 행렬로부터 최적화 모델을 생성하는 단계를 더 포함하며, 상기 최적화 모델은 하나 이상의 파라미터의 최적화를 위해 각 노드에 대한 설정점을 제공 한다. 일부 실시예에서, 상기 최적화 모델은 함수값 추정기(function value estimator) 및 기울기 추정기 (gradient estimator)를 갖는 연속 최적화 모델(continuous optimization model)을 출력한다. 일부 실시예에서, 상기 최적화 모델은 하나 이상의 회귀 함수를 모델링하기 위한 혼합 정수 선형 프로그램(mixed- integer linear program)을 출력한다. 일부 실시예에서, 상기 방법은, 입력으로서 상이한 핵심 성과 지표(key performance indicators)를 제 공하는 단계 및 입력된 핵심 성과 지표를 달성하기 위한 설정점에 대한 옵션을 생성하는 단계를 더 포함한다. 일부 실시예에서, 상기 방법은, 회귀 함수의 입력이 정확한지 여부를 자동으로 결정하는 단계를 더 포함 한다. 일부 실시예에서, 상기 그래프는 2단계 완전 연결 피드포워드 네트워크(two-level fully connected feed-forward network)이다. 일부 실시예에서, 상기 회귀 함수는 구간별 선형 및 비선형 유형(piece-wise linear and non-linear types)의 회귀 모델을 포함한다. 다양한 실시예에 따르면, 실행될 때, 사이트 전반 플랜트 최적화를 위한 최적화 모델을 자동으로 생성하 기 위해, 컴퓨터 장치가 컴퓨팅 장치의 컴퓨팅 효율성을 개선하는 방법을 수행하도록 하는 컴퓨터 구현 방법, 및 컴퓨터 판독 가능 명령을 갖는 컴퓨터 판독 가능 프로그램 코드를 유형적으로 구현하는 비일시적 컴퓨터 판 독 가능 저장 매체가 제공되며, 상기 방법은 플랜트 프로세스의 프로세스 흐름도에 대한 노드 및 엣지를 포함하 는 그래픽 표현을 정의하는 단계를 포함하고, 여기서 그래픽 표현의 노드는 프로세스를 나타내고 그래픽 표현의 엣지는 플랜트 프로세스 사이의 흐름을 나타낸다. 네트워크 토폴로지는 그래프에 대한 인접 행렬(adjacency matrix), 즉 상호 연결된 노드를 식별하는 인접 행렬을 생성하여 그래픽 표현으로 인코딩된다. 네트워크 토폴로 지를 정의하는 일련의 방정식이 자동으로 생성된다. 머신 러닝 플랫폼을 사용하여 하나 이상의 회귀 함수를 모 델링하여 각 프로세스에서 수신된 입력을 기반으로 플랜트 프로세스의 각 프로세스 출력을 예측한다. 플랜트의 각 프로세스에 대한 설정점을 제공하는 최적화 모델은 각 노드에 대한 하나 이상의 회귀 함수와 인접 행렬로부 터 생성된다. 플랜트 전체 규모의 순차적 의사결정을 위한 최적의 정책을 계산하기 위해 더 큰 세트의 옵션을 탐색 및 평가할 수 있도록 PM에 대한 자문 지원을 구축할 수 있는 중요한 기회가 있다. 먼저, 이러한 AI 기반 어드바이 저를 구축하기 위해 입력과 출력 사이의 행동 관계에 대한 전문가 수준의 이해를 갖도록 시스템이 훈련된다. 둘째, 이 행동 표현은 다른 운영 제약 조건과 함께 모든 제어 변수에 대한 최적의 설정점을 결정하는 데 사용된다. 본 발명의 실시예는 이러한 기회에 대한 해결책을 제공한다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 명세서에서 논의된 개념 덕분에, 사이트 전체의 플랜트 최적화를 위한 최적화 모델을 생성하는 방법 을 개선하는 도구가 제공된다. 아래의 예시와 같이, 본 발명의 실시예에 따른 최적화 모델은 종래의 회귀 방법 보다 훨씬 짧은 평균 연산 시간으로 최적의 목적 값을 제공할 수 있다. 이들 및 다른 특징은 첨부된 도면과 관련하여 읽혀지는, 그것의 예시적인 실시예에 대한 다음의 상세한 설명으로부터 명백해질 것이다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "다음의 상세한 설명에서는, 본 발명에 대한 철저한 이해를 제공하기 위해 다수의 특정 세부 사항이 예시 로 제시된다. 그러나, 본 발명이 그러한 세부 사항 없이 실행될 수 있다는 것은 명백하다. 다른 경우에, 잘 알 려진 방법, 절차, 구성요소 및/또는 회로는 본 발명의 실시예를 불필요하게 모호하게 하는 것을 피하기 위해 세 부 사항 없이 비교적 높은 수준에서 설명되었다. 달리 구체적으로 언급되지 않는 한, 그리고 하기 설명 및 청구항으로부터 명백할 수 있는 바와 같이, 명 세서 전체에서 \"프로세싱\", \"컴퓨팅\", \"계산\", \"결정\" 등과 같은 용어는, 컴퓨팅 시스템의 레지스터 및/또는 메 모리 내에서 전자와 같은 물리적 양으로 표현된 데이터를 컴퓨팅 시스템의 메모리, 레지스터 또는 기타 이러한 정보 저장, 전송 또는 디스플레이 장치 내에서 물리적 양으로 유사하게 표현된 다른 데이터로 조작 및/또는 변 환하는, 컴퓨터나 컴퓨팅 시스템 또는 유사한 전자 컴퓨팅 장치의 작업 및/또는 프로세스를 지칭하는 것으로 이 해되어야 한다. 아래에서 더 상세히 논의되는 바와 같이, 본 발명은 일반적으로 사이트 전체의 플랜트 최적화를 위한 최 적화 모델의 자동 생성을 위한 시스템 및 컴퓨터화된 방법에 관한 것이다. 시스템 및 컴퓨터화된 방법은 다양한 자산 용량 제약(asset capacity constraints)과 다양한 생산 전략(production strategies) 하에서 플랜트 생산 을 개선하기 위해 데이터 기반 머신 러닝(data-driven machine learning) 및 최적화 기술을 활용하여 컴퓨터 시 스템의 효율성과 정확도를 기술적으로 향상시킨다. 본 명세서에서 사용된 \"사이트 전체 최적화(site-wide optimization)\"라는 용어는 오일샌드 처리 플랜트 (oil sands processing plant)와 같은 제품 생산 플랜트와 관련하여 다음을 의미한다. 모든 프로세스 변수 및 저장 재고(storage inventories)의 현재 상태와 계획 기간 동안 사용 가능한 용량에 대한 알려진 제한 사항을 고려할 때, 사이트 전체 최적화는 최종 생산물의 흐름 처리량(flow throughput)을 극대화하는 최적의 생산 계획 을 시간 경과에 따라 계산하려고 한다. 통상적으로 이는 시간에 따른 최적의 유량과 다양한 수량의 재고로 표현 되며, 생산 계획의 원활성, 각 시기에 수용 가능한 재고의 유지, 경제적 생산 또는 수요 목표의 충족 등 다양한 운영 및 경제적 고려 사항이 있는 상황에서 추구된다. 프로세스 산업에서 계획 부서(planning department)는 시장 예측, 수요 예측, 유지 보수 및 자원 일정, 운영 조건, 사이트 물류 등을 기반으로 계획 기간에 대한 생산 계획을 수립한다. 일상적인 운영에서 내재된 불 확실성을 고려하기 위해 생산 계획은 매일 또는 교대마다(either daily or every shift) 수정된다. PM들은 처리 량과 같은 핵심 성과 지표(KPI)가 생산 계획을 최대한 준수하도록 하는 데 초점을 맞추고 있다. 이들은 프로세 스 엔지니어와 협력하여 여러 프로세스에 걸쳐 생산 수준과 목표의 조정을 처리한다. 예상치 못한 운영 중단이 발생할 경우 PM은 정상으로의 복구 시간과 생산 계획으로부터의 이탈을 최소화할 책임이 있다. 정상적인 운영에 서 생산 계획은 코스 수정을 유도하는 비정상적인 편차를 식별하는 데 도움이 된다. 그러나 PM은 전체 플랜트에 대한 최적화 파라미터를 수동으로 제공할 수 없다. 일반적으로 PM은 플랜트의 다운스트림 프로세스(downstream process)에서 PM과 일치하거나 일치하지 않을 수 있는 자체 KPI를 갖는 단일 프로세스에 할당된다. 전형적인 프로세스 흐름도는 사이트 전체의 프로세스 최적화를 위해 사용될 수 있다. 온도, 압력, 유량 등의 설정점은 프로세스 및 플랜트의 동작을 제어하는 데 사용된다. 항상 설정점은 업스트림 효과와 다운스트림 효과를 모두 갖는다. 따라서, 수천 개의 제어 가능한 설정점이 있는 처리 플랜트에서는 단일 임계 설정점 (single critical set point)이 전체 처리량 또는 수율, 그리고 기준 생산 계획에서 얼마나 멀리 떨어져 있는지 에 영향을 미칠 가능성이 높다. 도 1 및 도 2를 참조하면, 사이트 전체 최적화 모델을 개발하는 한 가지 방법은 일반적으로 프로세스 로 지칭되는 다양한 프로세스(P1, P2, P3, P4, P5)의 시간 인덱스 그래픽 표현(time-indexed graphical representation)(방향성 비순환 그래프라고도 함)을 생성하는 것이다. 전형적인 시간 인덱스 그래픽 표현에서, 각각의 프로세스는 입력과 출력의 독립적인 세트(self-contained set)를 가지 며, 여기서 업스트림 프로세스로부터의 출력은 다운스트림 프로세스의 입력이 된다. 도 1의 예에서, 저장 탱크 (T1, T2, T3, T4)는 하나의 프로세스로부터의 출력과 다른 프로세스로의 입력을 식별하기 위해 사용될 수 있다. 예를 들어, 프로세스(P1)의 출력은 탱크(T1)에 있고 프로세스(P2)의 출력은 탱크(T2)에 있다. 탱크(T3)는 탱크 (T1)과 탱크(T2)의 조합이며 프로세스(P3)에 대한 입력을 제공한다. 그래프의 각 노드는 특정 프로세스(예: P1) 또는 저장 탱크(예: T1)의 상태를 나타내고, 각 엣지는 해당 재료의 유량을 나타낸다. 보다 일반적으로, 각 플랜트 자체는 플랜트를 구성하기 위해 연결되는 여러 하위 수준의 프로세스 노드(process nodes)를 사용하여 모델링할 수 있다. 이산 시간 모델(discrete time mode), 즉 선택한 분해능(즉, 시간 간격)의 시간 간격 세트를 채택하는 것이 유용하다. 플랜트 변수는 시간 기간(예: 유량, 다음 시간 동안의 설정점) 또는 시간 포인트 즉, 임의의 시간 기간의 끝점(예: 다음 시간이 끝날 때 탱크 수준)과 일치하도록 정의할 수 있다. 각 노드 또는 엣지는 또한 현재 설정점, 플랜트 내 다른 프로세스 변수의 상태(예: 품질, 온도, 밀도), 정적 용량 한계(static capacity limits), 흐름 처리량 한계 등과 같은 다양한 파 라미터를 캡처하는 데이터 구조를 갖추고 있다. 위의 네트워크 표현은 필연적으로 현실적인 프로세스 흐름도를 단순화한 것이지만, 예측 최적화 프레임워크를 실현하는 데 사용될 수 있다. 입력은 전압, 온도 등과 같은 제어된 변수와, 예를 들어 공급 흐름(feed flow)과 같은 제어되지 않 은 설정점을 포함할 수 있다. 관찰은 각각의 프로세스에 대해 이루어질 수 있으며, 여기서 관찰은 특정 프 로세스 동안의 센서 판독을 포함할 수 있다. 각각의 프로세스에 대해, 출력의 예측은 아래에서 더 상 세히 논의되는 바와 같이, 회귀 함수에 기초하여 이루어질 수 있다. 입력 및 출력의 실제 값에 기초 한 각각의 프로세스에 대한 과거 데이터는 이러한 예측을 하기 위해 최적화 모델에 대한 데이터를 제공하는 데 사용될 수 있다. 따라서, 본 발명에 따른 추가적인 단계는 각 프로세스에 대해 동작을 학습하는 것이다. 초기에는 과거 데이터를 사용할 수 있지만, 플랜트 운영 중에는 실시간 데이터를 사용하여 머신 러닝을 업데이 트하고 이 데이터를 기반으로 필요에 따라 출력 예측을 조정할 수 있다. 사이트 전체 최적화 프로세스의 추가 단계는 최적화 문제를 해결하는 것이다. 도 3은 최적화 문제를 해 결하기 위한 본 발명의 최적화 모델의 동작 개요를 제공한다. 도 3에서, x는 제어 변수 입력을 나타내고, f는 출력 y를 제공하기 위해 X에 적용된 예측 모델을 나타낸다. 변수 z는 흐름과 같은 제어되지 않는 변수를 나타낸 다. 그러므로, 도 3을 왼쪽에서 오른쪽으로 읽으면, 주어진 프로세스에 대해, 제어 변수 x1의 제1 세트가 주어 지면, 예측 모델 f1은 출력 y1을 예측할 수 있다. g1에 저장된 이 생산물은 제2 프로세스를 위한 입력으로 공급 될 수 있다. 여기서 z1은 g1로부터의 흐름을, x2는 제어된 변수를, f2는 출력 y2를 예측하기 위한 예측 모델이다. 마찬가지로, y2는 g2를 통해 추가 다운스트림 프로세스에 대한 입력을 제공한다. 여기서 z2는 g2로부터의 흐름과 같은 제어되지 않은 변수이고, x3은 제어된 변수이며, 예측 모델 f2는 출력 y3를 결정할 수 있다. 본 발명의 최 적화 모델은, 다양한 프로세스에 따른 센서로부터의 측정값이 주어지면, 출력 흐름, 생산물 순도 등일 수 있는 원하는 출력을 최적화하기 위해 제어 변수 x1, x2, x3의 최적 값을 결정할 수 있다. 도 4a 및 도 4b는 예시적인 프로세스 흐름을 도시하고 있다. 본 발명의 일 실시예는, 후술하는 바와 같 이, 프로세스 흐름도로부터의 모델 생성 프로세스를, 입력의 수를 최소화할 수 있는 최적화 모델로 사용할 수 있는 모델로 단순화하는 것이다. 위에서 논의한 바와 같이 수동 최적화 모델 생성(manual optimization model generation)은 종종 도전적이며 도메인 전문가와 최적화 전문가를 모두 필요로 한다. 또한 수동 최적화 모델은 사이트 전체 최적화 모델 생성을 수행할 능력 없이 각 프로세스에만 초점을 맞출 수 있는데, 이는 수백 또는 수 천 개의 설정점뿐만 아니라 이러한 설정점의 변경으로 인해 변경되는 각 프로세스 간의 흐름도 고려해야 하기 때문이다. 도 5는 최적화 솔루션을 위한 엔드-투-엔드 시스템이 도시한다. 본 발명의 실시예는 도메인 이해를 가진 프로그래머의 입력에 기초한 모델 생성 및 플랜트에 의해 식별된 KPI에 기초한 최적화 모델 의 개발에 초점을 맞추고 있다. 예를 들어, 최적화 모델은 생산물 출력을 최대화하기 위한 KPI 를 기반으로 개발될 수 있다. 도 6을 참조하면, 자동화된 최적화 모델 생성 시스템을 나타내는 도면이 도시되어 있다. 대체로, 본 발명의 실시예는 사이트 전체 최적화를 위한 최적화 모델의 자동 생성을 위한 방법을 제공한다. 최적화 모델은 제어, 관찰된 및 환경 변수(control, observed and environmental variables)를 포함한 각 노드 (예: 프로세스(P1), 도 1 참조)에 대한 회귀 함수와 플랜트 전체에 대한 방향성 비순환 그래프(도 1 참조)에 대한 인접 행렬(adjacency matrix)에서 얻을 수 있다. 최적화 모델의 출력은 함수 값, 기울기 등 을 제공할 수 있는 연속 최적화 모델과 MIP(Mixed-integer Program) 모델를 제공하는 혼합 정수 선 형 프로그램(mixed-integer linear program)을 포함할 수 있다. 사용자는 다양한 구성 및 KPI를 실험하여 설정점 및 예상 대상 값에 대한 옵션 목록을 생성할 수 있으며, 여기서 사용자는 최상의 값을 선택할 수 있다. 검증 플랜트 네트워크가 입력의 정확성을 검증하고 네트워크 흐름을 표시하기 위해 제공될 수 있다. 본 발명의 실시예에 대한 상기 일반적인 설명은 도 7a 내지 도 11을 참조하여 아래에서 더 상세히 설명 된다. 위에서 논의한 바와 같이, 본 발명의 한 단계는 특정 플랜트의 프로세스 흐름도에 대한 그래픽 표현을 정의하는 것이다. 아래에서 더 상세히 설명된 바와 같이 2단계 완전 연결 피드포워드 네트워크(FFN)가 사용될 수 있다. 구체적으로 도 4b, 도 7a 및 도 7b를 참조하면, 프로세스 흐름의 표현은 입력, 제어 및 출력 변수를 원 호로 하고 각 단위 작업을 노드로 표시하는 방향성 그래프(directed graph)로 설명된다. 각 노드는 단위 프로세 스 또는 함께 모델링된 단위 프로세스의 시스템을 나타낼 수 있다. 단일 주기 최적화 문제(single-period optimization problem)에 대한 정식 형태(canonical form)는 도 4b에 나타나 있는데, 여기서 fl은 l번째 프로세 스 레이어(process layer)에서의 회귀 함수의 집합이고 선형 제약 조건(linear constraint) 은 질량 균형과 재고 수준을 나타내는 네트워크 흐름 제약 조건을 캡처한다. 목적 함수는 일부 KPI(예: 처리량)로 정의되며 공식은 최대화 또는 최소화 문제로 취급된다. 이 공식 내 에서, 각 노드는 위와 같이 일련의 제약 조건으로 표현되는 예측 모델로 표현된다. 배포 목적으로 시스템은 장 기 계획 기간(long-term planning horizon)을 위한 다중 기간 모델(multi-period model)을 해결할 수 있다. 본 발명은 기간 사이에 일부 결합 제약 조건(coupling constraints)을 갖는 T 기간에 걸쳐 제어 변수를 최적화하기 위한 문제를 고려한다. 다중 기간 최적화 문제는 일부 ρl∈[0,1],αl∈[0,1]에 대해, 다음과 같이 작성할 수 있다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "여기서 과 은 탱크 저장 한계이고 Xt는 도 4b의 형식을 갖는 t번째 기간에 대한 제약 조건 집합이다. 은 구성요소별 생산물을 나타낸다. 하나는 t번째 기간 모델에 대해 시간 인덱스 t∈{1,...,T}를 사용한다. 최적화 접근법은 다양한 유형의 회귀 모델을 효율적으로 해결할 수 있는 능력을 가지고 있다. 선형 회귀 (linear regression) 및 의사 결정 트리(decision tree)와 같은 회귀 모델의 경우, 최적화 접근 방식은 확장 가능한 혼합 정수 선형 프로그램(scalable mixed-integer linear program : MILP)으로 문제를 재구성할 수 있 다. 맥코믹 엔벨로프(McCormick envelope)와 셰랄리-아담스의 재구성 선형화 기술(Sherali-Adams’ reformulation linearization technique)과 같은 완화 방법(Relaxation methods)을 사용하여 풀링 제약 조건 (pooling constraints)에서 특정 이중 선형 형태(bi-linear forms)를 처리할 수 있다. 일반 심층 신경망 또는 일반 앙상블 모델(ensemble models)과 같은 비선형 회귀 함수는 비선형 제약(nonlinear constraints) 또는 블 랙박스 제약(black-box constraints)으로 이어질 수 있다. 또한 학습된 예측 모델의 유형에 따라 비선형 최적화 알고리즘을 사용하여 문제의 특수한 구조를 활용할 수 있다. 예를 들어, 도 4b와 같은 단일 기간 모델의 경우, fl이 매우 비선형적이고 선형화될 수 없으며 기울기를 사용할 수 있는 경우 증강 라그랑지안 방법(augmented Lagrangian method : ALM)을 사용하여 이를 해결할 수 있다. 도 4b의 다른 선형 제약 조건 세트는 질량 균형 및 재고 수준을 나타내는 프로세스 흐름(즉, 네트워크 흐름 제약 조건)을 캡처한다. 실제 문제를 효율적으로 해결할 수 있는 수학적 모델로 변환하는 것은 종종 상당한 시간과 최적화 기술 을 필요로 한다. 많은 사용 사례 및 시나리오로 잘 확장할 수 있는 최적화 모델 솔루션을 효율적으로 제공하기 위해, 본 발명의 실시예는 도메인 및 최적화 전문가가 개발할 수 없는 최적화 모델을 생성하고 배포한다. 새로 운 제약 조건을 추가하는 것과 같은 모델 업데이트는 종종 다시 한번 상당한 시간과 기술을 필요로 할 수 있다. 그러나, 본 발명의 실시예는 최적화 모델을 자동으로 생성하기 위해, 도메인 주제 전문가와 최적화 전문가로부 터의 최소한의 지식을 필요로 하는, 입력을 받는 프레임워크를 제공한다. 도 7b에 도시된 바와 같이, 상기 솔루션은 프로세스 흐름도의 그래픽 표현으로 2단계 피드포워드 네트워 크(FFN)를 사용할 수 있다. 피드포워드 네트워크 구조는 두 프로세스 레이어 사이의 각 저장 탱크 하위 시스템 을 모델링하는 데 사용되며, 이로써 전체 시스템은 도 7b에서와 같이 2단계 네트워크가 된다. 사용자는 1) 왼쪽 에서 오른쪽으로 색인화(indexing)를 위한 열별 순회(column-wise traversal), 2) i번째 프로세스를 Pi로, i번 째 탱크를 Ti로 라벨링, 3) 2단계 피드포워드 네트워크를 위한 연결 행렬(connection matrix) A 생성의 규칙을 따라 DAG에 대한 인접 행렬(adjacency matrix)(도 1 참조)을 준비할 수 있다. 도 8은 연결 행렬을 생성할수 있는 프로세스 흐름도의 예를 제공한다. 다음은 연결 행렬/인접 행렬의 예시이다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "둘 이상의 생산물로 생산하는 프로세스의 경우, 연결에서의 항목(entry)은 0 또는 1일 뿐만 아니라 2 또 는 3 이상일 수 있다. 예를 들어, 도 9에 도시된 바와 같이, 프로세스가 2개의 생산물을 생산할 수 있는 경우, 연결 행렬은 2를 포함할 수 있다. 도 9에서, P1의 경우, 두 개의 생산물이 존재하므로, 연결 행렬은 (P1, T1) = 1, (P1, T2) = 2, (P1, T3) = 1 및 (P1, T4) = 2일 수 있다. 이러한 규칙을 따름으로써, 모든 2단계 피드포워 드 네트워크에 대한 고유한 연결 행렬 표현이 있으며 그 반대도 마찬가지이다. 도 10을 참조하면, 네트워크 토폴로지를 디코딩하기 위해, 연결 행렬(A)이 주어지면, 각 프로세스 및 탱 크에 대한 레이어 구조 및 위치 등 2단계 네트워크에 대한 상세 정보를 재구성할 수 있다. [label = P1, …, PV1, T1 , …, TM1, PV1+1, …, PV1+V2, …, TM1+ … +ML-2+1, …,TM1+ … +ML-1, …, PV1+ … +VL-1+1, …, PV1+ … +VL]을 A의 열 및 행 레이블로 한다. Alyl +Blzl + Clsl = dl 의 선형 제약 조건을 생성할 수 있다. 여기서, Vl은 l번째 프로세스 레이어의 프로세스 수이고, Ml은 l번째 프로세스 레이어에 있는 탱크의 수이며, Sl은 프로세스 레이어 l과 l+1 사이의 탱크 레이어의 수이고, Ks l은 l번째와 (l+1)번째 프로세스 레이어 사이에 위치하는, s번째 탱크 레이어에 있는 탱크의 개수이며, Ws l은 l번째와 (l+1)번째 프로세스 레이어 사이의 탱크 하위 시스템의 s번째와 (s+1)번째 탱크 레이어에 대한 연 결 행렬이고, vt l,s는 l번째와 (l+1)번째 프로세스 레이어 사이에 위치하는, s번째와 (s+1)번째 탱크 레이어 사이의 흐름이다. 탱크에서의 흐름 균형 제약 조건은 다음 수학식 1로 결정할 수 있다. 수학식 1"}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "여기서, 이다. 회귀 함수의 출력에 연결하여 플랠트에서의 흐름 균형 제약 조건은 수학식 2와 같다. l = 2, …, L이고, p = 1, …, Vs이다.수학식 2"}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "여기서 i는 s번째 프로세스 레이어에서 p번째 프로세스에서의 생산물의 순서 위치이다. 회귀 함수 입력에의 연결은 다음 수학식 3과 같다. l = 2, …, L이고, p = 1, …, Vs이다. 수학식 3"}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "여기서 zerotrim(v)은 벡터 의 모든 0 요소를 트리밍하는 것이다. 회귀 제약 조건은 다음 수학식 4로 정의할 수 있다. 수학식 4 예시적인 디코딩 알고리즘이 아래에 설명되어 있다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 7, "content": "도 11을 참조하면, 회귀 함수에 대한 연속 모델이 도시되어 있다. 의사 결정 트리(decision tree : DT), 다변량 적응형 회귀 스플라인(multivariate adaptive regression splines : MARS) 및 FFN과 같은 조각별 선형 분할 모델(piece-wise linear partition models)의 경우 리프 노드(leaf node)를 추적하고 기울기(gradient)를 계산할 수 있다. 함수 값은 회귀 함수로부터 계산될 수 있다. 최적화 알고리즘 본 발명의 실시예는 세 가지 다른 유형의 회귀 함수 즉, 조각별 선형 회귀자(piece-wise linear regressors), 기울기 기반 회귀자(gradient-based regressors) 및 블랙박스 회귀자(black-box regressors)에 대한 세 가지 접근법을 제공한다. 조각별 선형 회귀자에 대한 혼합 정수 공식(Mixed-integer Formulation for Piece-wise Linear Regressors) 선형 회귀 및 의사 결정 트리를 포함한 조각별 선형 접근법을 기반으로 하는 분할 회귀의 경우, 회귀 함 수를 혼합 정수 선형 프로그램으로 공식화할 수 있다. 주요 아이디어는 각 회귀 함수 fl에 대해 정확한 혼합 정수 선형 표현을 사용하는 것이다. 의사 결정 트리 회귀 y = ht(x)는 리프 노드(leaf nodes)와 분기 노드(branching nodes)를 포함한다. L 은 리프 노드 집합을, B는 분기 노드 집합을 나타낸다. 각 리프 노드 L∈B에 대해, r(x) =wlTx + cl 형식의 선형 모델이 리프 노드에 할당된 포인트들을 기반으로 훈련 데이터로부터 학습되었다. 분기점 l∈B는 초평면 (hyperplane) alTx + bl로 표현되는데, 여기서 alTx + bl < 0이면 포인트 x는 노드에서 왼쪽 분기를 따르고 그렇 지 않으면 오른쪽 분기로 분할된다. 트리의 토폴로지가 고정되어 있기 때문에 각 특징 벡터 x에 대해 트리의 루 트에서 리프 노드 l ∈B로 이어지는 고유한 경로가 있다. NL(l)은 루트에서 l까지의 경로에서 왼쪽 분기가 따르 는 l의 조상 노드(ancestor nodes)를 나타내며, NR(l)은 경로에서 오른쪽 분기 조상 집합(set of right branch ancestors)을 나타낸다고 하자. 이진 변수 el ∈{0,1}, l ∈L은 x가 리프 노드 l에 할당된 경우 el =1임을 나타 낸다. 데이터 포인트(data point) x에 대해 정확히 하나의 리프 노드가 선택된다. 수학식 6"}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "리프 노드에 대한 고유 경로 라우팅(unique path routing)을 결정하기 위해, 지시 변수(indicator variable) el의 도움을 받아 분기 노드에서 분할을 모델링하기 위해 다음 제약 조건이 적용된다. 수학식 7"}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "여기서 M1과 M2는 큰 숫자이다. 의사 결정 트리 회귀 분석 y = h(x)는 혼합 정수 쌍선형 모형(mixed-integer bilinear model)으로 나타낼 수 있다. 수학식 8"}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "프로세스는 다음과 같이 쌍선형 항 cl(wlTx + cl)을 더 선형화할 수 있다. 일부 상수 ylL, ylU에 대해 ylL <= wlTx + cl <=_ylU라고 가정한다. 이 가정은 x가 일반적으로 제한되기 때문에 합리적이다. 예를 들어, 훈련 데 이터는 0 - 1 범위로 정규화되고 wl과 cl은 고정 모델 파라미터이다. 그러면 프로세스 yl = cl(wlTx + cl)은 다음 과 같다.수학식 9"}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 11, "content": "따라서 의사 결정 트리 회귀 y =ht(x)에 대한 혼합 정수 선형 표현은 다음과 같다. 수학식 10"}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "이러한 선형 기반 표현을 단일 주기 및 다중 주기 모델에 연결하면 MILP 공식을 얻을 수 있으며, 이는 MILP 솔버(solver)에 의해 최적으로 효율적으로 해결될 수 있다. 회귀 함수가 비선형 함수인 경우, 본 발명은 회귀 함수에 대한 함수 값과 기울기를 계산할 것을 제안한 다. 단일 주기 문제와 다중 주기 문제는 증강 라그랑주 알고리즘(augmented Lagrangian algorithm) 또는 승수의 교번 방향법(alternating direction method of multipliers : ADMM) 알고리즘과 같은 기울기 기반 알고리즘으 로 해결된다. 본 발명의 다양한 실시예에 대한 설명은 예시의 목적으로 제시된 것이지만, 제시된 실시예에 본 발명이 한정되거나 배타적이지 않다. 다수의 변경 및 변형은 제시된 실시예의 범위를 벗어나지 않고 당업자에게 명백할 것이다. 본 명세서에 사용된 용어는 실시예의 원리, 시장에서 발견되는 기술에 대한 실용적인 적용 또는 기술적 개선을 가장 잘 설명하거나, 또는 본 명세서에 제시된 실시예를 당업자가 이해할 수 있도록 하기 위해 선택되었 다. 전술한 바와 같이, 최선의 실시예 및/또는 다른 실시예로 간주되는 것을 설명하였으나, 본 발명은 다양 한 형태 및 예로 구현될 수 있으며, 본 발명은 수많은 응용 분야에 적용될 수 있으며, 그 중 일부만이 여기서 설명되었다. 다음 청구항은 본 발명의 진정한 범위에 속하는 모든 적용, 수정 및 변형에 대한 권리를 주장하기 위한 것이다. 여기서 논의된 구성요소, 단계, 특징, 목적, 효과 및 장점은 단지 예시적인 것이다. 그들 중 어느 것도, 그들과 관련된 논의는 보호 범위를 제한하려는 의도는 없다. 다양한 이점들이 본 명세서에서 논의되었지만, 모 든 실시예가 반드시 모든 이점을 포함하는 것은 아님을 이해할 것이다. 달리 명시되지 않은 한, 다음 청구항을 포함하여 본 명세서에 명시된 모든 측정값, 값, 등급, 위치, 크기, 규모 및 기타 규격은 정확하지 않은 대략적 인 것이다. 그것들은 그것들이 관련된 기능 및 그것들이 속한 기술 분야에서 관례적인 것과 일치하는 합리적인 범위를 갖도록 의도된다. 수많은 다른 실시예도 고려된다. 여기에는 더 적은 수의 추가적인 및/또는 다른 구성요소, 단계, 특징, 목적, 효과 및 이점을 갖는 실시예가 포함된다. 여기에는 구성요소 및/또는 단계가 다른 배열 및/또는 순서화를 갖는 실시예도 포함된다. 본 발명의 양태는 본 발명의 실시예에 따른 방법, 장치(시스템) 및 컴퓨터 프로그램 제품들의 흐름도 및 /또는 블록도를 참조하여 설명된다. 순서도 및/또는 블록도의 각 블록, 및 순서도 및/또는 블록도의 블록 조합 은 컴퓨터 판독 가능한 프로그램 명령에 의해 구현될 수 있음을 이해할 것이다. 이러한 컴퓨터 읽기 가능한 프로그램 명령들은 컴퓨터의 프로세서, 또는 기계를 생산하는 다른 프로그램 가능한 데이터 처리 장치에 제공될 수 있으며, 컴퓨터의 프로세서 또는 다른 프로그램 가능한 데이터 처리 장치 를 통해 실행되는 명령어는 흐름도 및/또는 블록도의 블록 또는 블록들에 지정된 기능/동작을 구현하기 위한 수 단을 생성한다. 이러한 컴퓨터 읽기 가능한 프로그램 명령들은 또한 컴퓨터, 프로그램 가능한 데이터 처리 장치 및/또는 다른 장치들이 특정한 방식으로 작동하도록 지시할 수 있는 컴퓨터 읽기 가능한 저장 미디어에 저장될 수 있으며, 명령어가 저장된 컴퓨터 읽기 가능 저장 미디어는 흐름도 및/또는 블록도의 블록 또는 블록들에 지 정된 기능/동작의 실시예들을 구현하는 명령어를 포함하는 제조 물품을 포함한다. 컴퓨터 읽기 가능한 프로그램 명령들은 또한 컴퓨터, 다른 프로그램 가능한 데이터 처리 장치 또는 다른 장치에 로드되어 컴퓨터, 다른 프로그램 가능한 장치 또는 다른 장치 상에서 수행되는 일련의 동작 단계들이 컴 퓨터에서 구현된 프로세스들을 생성하도록 할 수 있으며, 이로써 컴퓨터, 다른 프로그램 가능한 장치 또는 다른 장치에서 실행되는 명령어는 흐름도 및/또는 블록도의 블록 또는 블록들에 지정된 기능/동작을 구현한다. 도면들에서 콜 플로우(call-flow), 흐름도 및 블록도는 본 발명의 다양한 실시예에 따른 시스템, 방법 및 컴퓨터 프로그램 제품의 가능한 구현의 구조, 기능 및 동작을 도시하고 있다. 이와 관련하여, 흐름도 또는 블록도의 각 블록은 모듈, 벡터 또는 명령의 일부를 나타낼 수 있으며, 이는 지정된 논리 함수를 구현하기 위한 하나 이상의 실행 가능한 명령들을 포함한다. 일부 대체 구현에서는 블록에 표시된 기능이 도면에 표시된 순서 대로 발생할 수 있다. 예를 들어, 연속적으로 표시된 두 개의 블록은 실제로 한 단계로 수행될 수 있으며, 동시 에, 실질적으로 동시에, 부분적으로 또는 전체적으로 시간적으로 중첩되는 방식으로 실행되거나, 때때로 관련된 기능에 따라 역순으로 블록들이 실행될 수 있다. 또한, 블록도 및/또는 흐름도의 각 블록, 및 블록도 및/또는 흐름도의 블록 조합은 특정 기능을 수행하거나 특수 목적 하드웨어와 컴퓨터 명령의 조합을 수행하거나 작동하 는 특수 목적 하드웨어 기반 시스템에 의해 구현될 수 있다는 점에 유의해야 한다. 전술한 내용은 예시적인 실시예와 관련하여 설명되었지만, \"예시적인\"이라는 용어는 최선의 또는 최적의 것이 아니라 단지 예시를 의미하는 것으로 이해된다. 바로 위에서 언급한 것을 제외하고는, 청구항에 기재되어 있든지 없든지 관계없이, 기재되거나 설명된 어떤 것도 구성요소, 단계, 특징, 목적, 효과, 이점 또는 이와 동 등한 것을 일반에게 한정하도록 의도되거나 해석되어서는 안 된다. 본 명세서에 사용된 용어와 표현은 본 명세서에 별도로 명시된 경우를 제외하고는 각각의 조사 및 연구 영역과 관련하여 이러한 용어 및 표현에 부여된 통상적인 의미를 갖는 것으로 이해될 것이다. 제1 및 제2 등과 같은 관계적 용어(Relational terms)는 그러한 실체(entities)나 행위(actions) 사이의 실제적인 관계나 질서 를 요구하거나 암시하지 않고 오로지 하나의 실체나 행위를 다른 실체나 행위로부터 구별하기 위해 사용될 수 있다. \"포함하다\", \"포함하는\" 또는 기타 변형 용어는 비배타적 포함(non-exclusive inclusion)을 포함하기 위 한 것이므로, 구성요소의 목록을 포함하는 프로세스, 방법, 제조물 또는 장치는 해당 구성요소만 포함하는 것이 아니라 그러한 프로세스, 방법, 제조물 또는 장치에 명시적으로 나열되지 않았거나 고유하지 않은 다른 구성요 소를 포함할 수 있다. \"하나의\" 또는 \"한\"에 의해 선행되는 구성요소는 추가적인 제약 없이, 그 구성요소를 구 성하는 프로세스, 방법, 제조물 또는 장치에 추가적인 동일한 구성요소의 존재를 배제하지 않는다."}
{"patent_id": "10-2023-7000315", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 13, "content": "본 명세서의 요약은 독자가 본 발명의 특성을 신속하게 확인할 수 있도록 하기 위해 제공된다. 청구항의 범위나 의미를 해석하거나 제한하기 위하여 사용하지 않는다는 이해와 함께 제출된다. 또한, 전술한 상세한 설 명에서는, 본 발명의 설명을 간소화할 목적으로, 다양한 실시예에서 다양한 특징이 함께 그룹화되어 있는 것을 알 수 있다. 이러한 개시 방법은 청구된 실시예가 각 청구항에 명시적으로 인용된 것보다 더 많은 특징을 갖는 다는 의도를 반영하는 것으로 해석되지 않는다. 오히려, 다음의 청구항이 반영하는 바와 같이, 발명의 주제는 개시된 단일 실시예의 모든 특징보다 적다. 따라서, 다음의 청구항은 상세한 설명에 통합되며, 각각의 청구항은 별도로 청구되는 주제로서 독립적으로 존재한다.도면 도면1 도면2 도면3 도면4a 도면4b 도면5 도면6 도면7a 도면7b 도면8 도면9 도면10 도면11"}
{"patent_id": "10-2023-7000315", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면은 예시적인 실시예에 관한 것이다. 그것들은 모든 실시예를 예시하는 것이 아니다. 다른 실시예가 추가적으로 또는 대신에 사용될 수 있다. 공간을 절약하거나 보다 효과적인 설명을 위해 명백하거나 불필요할 수 있는 세부 사항은 생략될 수 있다. 일부 실시예는 추가적인 구성요소 또는 단계 및/또는 도시된 모든 구성요 소 또는 단계 없이 실행될 수 있다. 동일한 숫자가 다른 도면에 나타나는 경우, 동일하거나 유사한 구성요소 또 는 단계를 의미한다. 도 1은 일 실시예에 따른 최적화 모델로 최적화 하기 위한 다중 플랜트(multiple plants) 네트워크의 시 간 인덱스 그래픽 표현(time-indexed graphical representation)을 개략적으로 나타낸 것이다. 도 2는 일 실시예에 따른, 회귀 함수를 통해 각 프로세스에 사용되는 추정을 설명하는 흐름도이다. 도 3은 일 실시예에 따른, 회귀 함수를 적용한 일반화된 네트워크 표현을 설명하는 흐름도이다. 도 4a 및 도 4b는 일 실시예에 따른, 최소 입력(minimal inputs) 및 최적화 배경(optimization background)을 갖는 최적화 모델을 생성하기 위한 모델 생성기(model generator)의 사용을 도시한다. 도 5는 일 실시예에 따른, 최적화 솔루션을 위한 엔드-투-엔드 시스템의 개략도이다. 도 6은 일 실시예에 따른, 자동화된 모델 생성 시스템을 나타내는 흐름도이다. 도 7a 및 도 7b는 일 실시예에 따른, 스킵 레이어 가정(skip layer assumption)이 없는 2단계 완전 연 결 피드포워드 네트워크로서 프로세스 플로우 플랜트(process flow plant)를 모델링하는 것을 도시한다. 도 8은 일 실시예에 따른, 전체 시스템에 대한 방향성 비순환 그래프 생성을 위한 인접 행렬의 준비를 도시한다. 도 9는 일 실시예에 따른, 플랜트에 대한 생산물이 둘 이상인 경우의 방향성 비순환 그래프 생성을 위한 인접 행렬의 준비를 도시한다. 도 10은 일 실시예에 따라 입력 검증을 위해 네트워크 토폴로지를 디코딩하는 것을 도시한다. 도 11은 일 실시예에 따른 회귀 함수에 대한 연속적인 모델을 도시한다."}
