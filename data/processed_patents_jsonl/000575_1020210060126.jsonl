{"patent_id": "10-2021-0060126", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0152777", "출원번호": "10-2021-0060126", "발명의 명칭": "다차원 벡터 뉴럴 네트워크를 위한 연산 장치 및 그의 동작 방법", "출원인": "삼성전자주식회사", "발명자": "김현수"}}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "다차원 벡터 뉴럴 네트워크를 위한 연산 장치에 있어서,복수의 다차원 입력 벡터들이 입력되는 복수의 입력 라인들;상기 복수의 입력 라인들에 교차하는 복수의 출력 라인들;상기 복수의 입력 라인들 및 상기 복수의 출력 라인들의 교차점들에 배치되고, 복수의 다차원 웨이트 벡터들에포함된 웨이트 엘리먼트들을 저장하는 복수의 메모리 셀들;상기 복수의 출력 라인들 각각에서 출력되는 값을 복수의 가산기들 중 어느 하나로 전달하는 복수의 셀렉터들;및상기 복수의 셀렉터들로부터 전달되는 값들을 미리 정해진 개수의 사이클들 동안 누적하는 복수의 가산기들을 포함하고,상기 복수의 다차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들은 대응하는 하나의 기준 입력 라인 및 대응하는 둘 이상의 기준 출력 라인들을 연결시키는 기준 메모리 셀들에 저장되는,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 복수의 다차원 입력 벡터들 각각에 포함된 입력 엘리먼트들은 동일한 기준 입력 라인에 상기 사이클들 동안 순차적으로 입력되는,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 사이클들의 개수는 상기 복수의 다차원 입력 벡터들 각각에 포함된 입력 엘리먼트들의 개수와 동일한,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 기준 출력 라인들에 대응하는 기준 가산기들 각각에 누적된 값에 기초하여 복수의 다차원 출력 벡터들 각각에 포함된 출력 엘리먼트들이 결정되는,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "공개특허 10-2022-0152777-2-제1항에 있어서,상기 복수의 셀렉터들 중 상기 기준 출력 라인들에 대응하는 기준 셀렉터들은 상기 기준 출력 라인들 각각에서 출력되는 값을 상기 다차원 출력 벡터들 각각의 출력 엘리먼트들로 구분하여상이한 기준 가산기들로 전달하는,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 복수의 출력 라인들의 개수는 상기 다차원 웨이트 벡터들의 개수 및 상기 다차원 웨이트 벡터들 각각에 포함된 가중치 엘리먼트들의 개수에기초하여 결정되는,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 복수의 다차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들 중 어느 하나는 다른 하나와 상이한 기준출력 라인에 연결된 기준 메모리 셀에 저장되는,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 복수의 다차원 입력 벡터들, 상기 복수의 다차원 웨이트 벡터들 및 상기 복수의 가산기들 각각에 누적된값에 기초하여 결정된 복수의 다차원 출력 벡터들은실수 엘리먼트 및 허수 엘리먼트를 포함하는 복소수 벡터들인,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 기준 출력 라인들 중 실수 엘리먼트를 저장하는 메모리 셀들과 연결된 제1 기준 출력 라인에서 출력되는값은 제1 기준 셀렉터를 통해 부호가 유지된 채 허수 엘리먼트들을 누적하는 제2 기준 가산기로 전달되고,상기 기준 출력 라인들 중 허수 엘리먼트를 저장하는 메모리 셀들과 연결된 제2 기준 출력 라인에서 출력되는값은 제2 기준 셀렉터를 통해 부호가 반전되어 실수 엘리먼트들을 누적하는 제1 기준 가산기로 전달되는,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 복수의 다차원 입력 벡터들, 상기 복수의 다차원 웨이트 벡터들 및 상기 복수의 가산기들 각각에 누적된공개특허 10-2022-0152777-3-값에 기초하여 결정된 복수의 다차원 출력 벡터들은복수의 허수 엘리먼트들을 포함하는 사원수 벡터들 또는 실수 엘리먼트 및 복수의 허수 엘리먼트들을 포함하는사원수 벡터들인,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,각 사이클에서 수행하고자 하는 연산에 적용되는 다차원 웨이트 벡터의 타입, 상기 복수의 메모리 셀들에 저장된 웨이트 엘리먼트의 타입 및 상기 복수의 입력 라인들에 입력되는 입력 엘리먼트의 타입에 기초하여, 상기 복수의 출력 라인들 각각에서 출력되는 값의 부호를 결정하고, 상기 부호가 결정된 값을 대응하는 셀렉터로 전달하는 복수의 제2 셀렉터들을 더 포함하는연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제10항에 있어서,상기 사이클들 중 일부 동안 상기 복수의 가산기들에서 누적된 부분 연산 결과 벡터들 각각에 포함된 엘리먼트들은 상기 사이클들 중 나머지 동안 순차적으로 상기 복수의 입력 라인들에 입력되는,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항에 있어서,상기 사이클들의 미리 정해진 개수는상기 복수의 다차원 웨이트 벡터들이 복소수 벡터인 경우에 응답하여 2개이고,상기 복수의 다차원 웨이트 벡터들이 사원수 벡터인 경우에 응답하여 7개 또는 8개인,연산 장치."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "다차원 벡터 뉴럴 네트워크를 위한 연산 장치의 동작 방법에 있어서,복수의 다차원 입력 벡터들 각각에 포함된 입력 엘리먼트를 복수의 입력 라인들에 입력하는 단계;복수의 셀렉터들을 통해, 상기 복수의 입력 라인들에 교차하는 복수의 출력 라인들 각각에서 출력되는 값을 복수의 가산기들 중 어느 하나로 전달하는 단계; 및복수의 가산기들을 통해, 상기 복수의 셀렉터들로부터 전달되는 값들을 미리 정해진 개수의 사이클들 동안 누적하는 단계를 포함하고,상기 다차원 벡터 뉴럴 네트워크에 적용되는 복수의 다차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들은대응하는 하나의 기준 입력 라인 및 대응하는 둘 이상의 기준 출력 라인들을 연결시키는 기준 메모리 셀들에 저장되는,공개특허 10-2022-0152777-4-연산 장치의 동작 방법."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 입력하는 단계는각 다차원 입력 벡터에 포함된 복수의 입력 엘리먼트들을 동일한 기준 입력 라인에 상기 사이클들 동안 순차적으로 입력하는,연산 장치의 동작 방법."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에 있어서,상기 사이클들의 개수는 상기 복수의 다차원 입력 벡터들 각각에 포함된 입력 엘리먼트들의 개수와 동일한,연산 장치의 동작 방법."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제14항에 있어서,상기 기준 출력 라인들에 대응하는 기준 가산기들 각각에 누적된 값에 기초하여 복수의 다차원 출력 벡터들 각각에 포함된 출력 엘리먼트들이 결정되는,연산 장치의 동작 방법."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제14항에 있어서,상기 전달하는 단계는상기 복수의 셀렉터들 중 상기 기준 출력 라인들에 대응하는 기준 셀렉터들을 통해, 상기 기준 출력 라인들 각각에서 출력되는 값을 상기 다차원 출력 벡터들 각각의 출력 엘리먼트들로 구분하여 상이한 기준 가산기들로 전달하는,연산 장치의 동작 방법."}
{"patent_id": "10-2021-0060126", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제14항에 있어서,상기 복수의 출력 라인들의 개수는 상기 다차원 웨이트 벡터들의 개수 및 상기 다차원 웨이트 벡터들 각각에 포함된 가중치 엘리먼트들의 개수에기초하여 결정되는,연산 장치의 동작 방법.공개특허 10-2022-0152777-5-청구항 20 제14항에 있어서,상기 복수의 다차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들 중 어느 하나는 다른 하나와 상이한 기준출력 라인에 연결된 기준 메모리 셀에 저장되는,연산 장치의 동작 방법."}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다차원 벡터 뉴럴 네트워크를 위한 연산 장치 및 그의 동작 방법이 개시된다. 개시된 다차원 벡터 뉴럴 네트워 크를 위한 연산 장치는 복수의 다차원 입력 벡터들이 입력되는 복수의 입력 라인들, 복수의 입력 라인들에 교차 하는 복수의 출력 라인들 및 복수의 입력 라인들 및 복수의 출력 라인들의 교차점들에 배치되고, 복수의 다차원 웨이트 벡터들에 포함된 웨이트 엘리먼트들을 저장하는 복수의 메모리 셀들, 복수의 출력 라인들 각각에서 출력 되는 값을 복수의 가산기들 중 어느 하나로 전달하는 복수의 셀렉터들 및 복수의 셀렉터들로부터 전달되는 값들 을 미리 정해진 개수의 사이클들 동안 누적하는 복수의 가산기들을 포함한다. 복수의 다차원 웨이트 벡터들 각 각에 포함된 웨이트 엘리먼트들은 대응하는 하나의 기준 입력 라인 및 대응하는 둘 이상의 기준 출력 라인들을 연결시키는 기준 메모리 셀들에 저장된다."}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래 실시예들은 다차원 벡터 뉴럴 네트워크를 위한 연산 장치 및 그의 동작 방법에 관한 것이다."}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "뉴럴 네트워크 연산들을 수행하는 뉴로모픽 프로세서(neuromorphic processor)에 관한 관심이 증대되고 있다. 예를 들어, 뉴런 회로 및 시냅스 회로를 포함하는 뉴로모픽 프로세서를 구현하고자 하는 연구가 진행되고 있다. 이와 같은 뉴로모픽 프로세서는 Convolutional Neural Network(CNN), Recurrent Neural Network(RNN), Feedforward Neural Network(FNN) 등과 같은 다양한 뉴럴 네트워크들을 구동하기 위한 뉴럴 네트워크 장치로 이 용될 수 있고, 데이터 분류(classification) 또는 이미지 인식(recognition) 등을 포함하는 다양한 분야들에서 활용될 수 있다."}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 다차원 벡터 뉴럴 네트워크를 위한 연산 장치는 복수의 다차원 입력 벡터들이 입력되는 복수 의 입력 라인들; 상기 복수의 입력 라인들에 교차하는 복수의 출력 라인들; 상기 복수의 입력 라인들 및 상기 복수의 출력 라인들의 교차점들에 배치되고, 복수의 다차원 웨이트 벡터들에 포함된 웨이트 엘리먼트들을 저장 하는 복수의 메모리 셀들; 상기 복수의 출력 라인들 각각에서 출력되는 값을 복수의 가산기들 중 어느 하나로 전달하는 복수의 셀렉터들; 및 상기 복수의 셀렉터들로부터 전달되는 값들을 미리 정해진 개수의 사이클들 동안 누적하는 복수의 가산기들을 포함하고, 상기 복수의 다차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들은 대응하는 하나의 기준 입력 라인 및 대응하는 둘 이상의 기준 출력 라인들을 연결시키는 기준 메모리 셀들에 저 장될 수 있다. 일 실시예에 따른 연산 장치에서 상기 복수의 다차원 입력 벡터들 각각에 포함된 입력 엘리먼트들은 동일한 기 준 입력 라인에 상기 사이클들 동안 순차적으로 입력될 수 있다. 일 실시예에 따른 연산 장치에서 상기 사이클들의 개수는 상기 복수의 다차원 입력 벡터들 각각에 포함된 입력 엘리먼트들의 개수와 동일할 수 있다. 일 실시예에 따른 연산 장치에서 상기 기준 출력 라인들에 대응하는 기준 가산기들 각각에 누적된 값에 기초하 여 복수의 다차원 출력 벡터들 각각에 포함된 출력 엘리먼트들이 결정될 수 있다. 일 실시예에 따른 연산 장치에서 상기 복수의 셀렉터들 중 상기 기준 출력 라인들에 대응하는 기준 셀렉터들은 상기 기준 출력 라인들 각각에서 출력되는 값을 상기 다차원 출력 벡터들 각각의 출력 엘리먼트들로 구분하여 상이한 기준 가산기들로 전달할 수 있다. 일 실시예에 따른 연산 장치에서 상기 복수의 출력 라인들의 개수는 상기 다차원 웨이트 벡터들의 개수 및 상기 다차원 웨이트 벡터들 각각에 포함된 가중치 엘리먼트들의 개수에 기초하여 결정될 수 있다. 일 실시예에 따른 연산 장치에서 상기 복수의 다차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들 중 어느 하나는 다른 하나와 상이한 기준 출력 라인에 연결된 기준 메모리 셀에 저장될 수 있다.일 실시예에 따른 연산 장치에서 상기 복수의 다차원 입력 벡터들, 상기 복수의 다차원 웨이트 벡터들 및 상기 복수의 가산기들 각각에 누적된 값에 기초하여 결정된 복수의 다차원 출력 벡터들은 실수 엘리먼트 및 허수 엘 리먼트를 포함하는 복소수 벡터들일 수 있다. 일 실시예에 따른 연산 장치에서 상기 기준 출력 라인들 중 실수 엘리먼트를 저장하는 메모리 셀들과 연결된 제 1 기준 출력 라인에서 출력되는 값은 제1 기준 셀렉터를 통해 부호가 유지된 채 허수 엘리먼트들을 누적하는 제 2 기준 가산기로 전달되고, 상기 기준 출력 라인들 중 허수 엘리먼트를 저장하는 메모리 셀들과 연결된 제2 기 준 출력 라인에서 출력되는 값은 제2 기준 셀렉터를 통해 부호가 반전되어 실수 엘리먼트들을 누적하는 제1 기 준 가산기로 전달될 수 있다. 일 실시예에 따른 연산 장치에서 상기 복수의 다차원 입력 벡터들, 상기 복수의 다차원 웨이트 벡터들 및 상기 복수의 가산기들 각각에 누적된 값에 기초하여 결정된 복수의 다차원 출력 벡터들은 복수의 허수 엘리먼트들을 포함하는 사원수 벡터들 또는 실수 엘리먼트 및 복수의 허수 엘리먼트들을 포함하는 사원수 벡터들일 수 있다. 일 실시예에 따른 연산 장치는 각 사이클에서 수행하고자 하는 연산에 적용되는 다차원 웨이트 벡터의 타입, 상 기 복수의 메모리 셀들에 저장된 웨이트 엘리먼트의 타입 및 상기 복수의 입력 라인들에 입력되는 입력 엘리먼 트의 타입에 기초하여, 상기 복수의 출력 라인들 각각에서 출력되는 값의 부호를 결정하고, 상기 부호가 결정된 값을 대응하는 셀렉터로 전달하는 복수의 제2 셀렉터들을 더 포함할 수 있다. 일 실시예에 따른 연산 장치에서 상기 사이클들 중 일부 동안 상기 복수의 가산기들에서 누적된 부분 연산 결과 벡터들 각각에 포함된 엘리먼트들은 상기 사이클들 중 나머지 동안 순차적으로 상기 복수의 입력 라인들에 입력 될 수 있다. 일 실시예에 따른 연산 장치에서 상기 사이클들의 미리 정해진 개수는 상기 복수의 다차원 웨이트 벡터들이 복 소수 벡터인 경우에 응답하여 2개이고, 상기 복수의 다차원 웨이트 벡터들이 사원수 벡터인 경우에 응답하여 7 개 또는 8개일 수 있다. 일 실시예에 따른 다차원 벡터 뉴럴 네트워크를 위한 연산 장치의 동작 방법은 복수의 다차원 입력 벡터들 각각 에 포함된 입력 엘리먼트를 복수의 입력 라인들에 입력하는 단계; 복수의 셀렉터들을 통해, 상기 복수의 입력 라인들에 교차하는 복수의 출력 라인들 각각에서 출력되는 값을 복수의 가산기들 중 어느 하나로 전달하는 단계; 및 복수의 가산기들을 통해, 상기 복수의 셀렉터들로부터 전달되는 값들을 미리 정해진 개수의 사이클들 동안 누적하는 단계를 포함하고, 상기 다차원 벡터 뉴럴 네트워크에 적용되는 복수의 다차원 웨이트 벡터들 각 각에 포함된 웨이트 엘리먼트들은 대응하는 하나의 기준 입력 라인 및 대응하는 둘 이상의 기준 출력 라인들을 연결시키는 기준 메모리 셀들에 저장될 수 있다."}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "실시예들에 대한 특정한 구조적 또는 기능적 설명들은 단지 예시를 위한 목적으로 개시된 것으로서, 다양한 형 태로 변경되어 구현될 수 있다. 따라서, 실제 구현되는 형태는 개시된 특정 실시예로만 한정되는 것이 아니며, 본 명세서의 범위는 실시예들로 설명한 기술적 사상에 포함되는 변경, 균등물, 또는 대체물을 포함한다. 제1 또는 제2 등의 용어를 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 해석되어야 한다. 예를 들어, 제1 구성요소는 제2 구성요소로 명 명될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이해되어야 할 것이다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 설명된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함 으로 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들 을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되 는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로 해석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 이하, 실시예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 도 1은 일 실시예에 따른 뉴럴 네트워크의 아키텍처를 설명하기 위한 도면이다. 뉴럴 네트워크는 노드들과 에지들을 이용하여 수학적 모델로 표현될 수 있다. 뉴럴 네트워크는 딥 뉴럴 네트워크(Deep Neural Network, DNN) 또는 n-계층 뉴럴 네트워크(n-layers neural networks)의 아키텍처 일 수 있다. DNN 또는 n-계층 뉴럴 네트워크는 컨볼루션 뉴럴 네트워크(Convolutional Neural Networks, CNN), 리커런트 뉴럴 네트워크(Recurrent Neural Networks, RNN), Deep Belief Networks, Restricted Boltzman Machines 등에 해당될 수 있다. 예를 들어, 뉴럴 네트워크는 컨볼루션 뉴럴 네트워크(CNN)로 구현될 수 있으나, 이에 제한되지 않는다. 도 1의 뉴럴 네트워크는 컨볼루션 뉴럴 네트워크 중 일부의 레이어들에 해당될 수 있다. 따라서, 뉴럴 네트워크는 컨볼루션 뉴럴 네트워크의 컨볼루션 레이어, 풀링 레이어 (pooling layer), 풀리 커넥티드(fully connected) 레이어 등에 해당될 수 있다. 다만, 이하에서는 편의상, 뉴럴 네트워크가 컨볼루션 뉴럴 네트워크의 컨볼루션 레이어에 해당되는 것으로 가정하여 설명한다. 컨볼루션 레이어에서, 제1 피처 맵(feature map 1, FM1)은 입력 피처 맵에 해당될 수 있고, 제2 피처 맵(FM2)은 출력 피처 맵에 해당될 수 있다. 피처 맵은 입력 데이터의 다양한 특징이 표현된 데이터 세트를 의미할 수 있 다. 피처 맵들(FM1, FM2)은 2차원 이상의 고차원 매트릭스일 수 있고, 각각의 액티베이션(activation) 파라미 터들을 갖는다. 피처 맵들(FM1, FM2)이 예를 들어 3차원 피처 맵들에 해당되는 경우, 피처 맵들(FM1, FM2)은 너비(W)(또는 칼럼이라고 함), 높이(H)(또는 로우라고 함) 및 깊이(C)를 가진다. 이때, 깊이(C)는 채널들의 개 수에 대응될 수 있다. 컨볼루션 레이어에서, 제1 피처 맵(FM1) 및 웨이트 맵(WM)에 대한 컨볼루션 연산이 수행될 수 있고, 그 결과 제 2 피처 맵(FM2)이 생성될 수 있다. 웨이트 맵(WM)은 제1 피처 맵(FM1)을 필터링할 수 있으며, 웨이트 필터 또 는 웨이트 커널(kernel)로 지칭될 수 있다. 일 예에서, 웨이트 맵(WM)의 깊이, 다시 말해 채널 개수는 제1 피 처 맵(FM1)의 깊이, 다시 말해 채널 개수와 동일할 수 있다. 웨이트 맵(WM)은 제1 피처 맵(FM1)을 슬라이딩 윈 도로 하여 횡단하는 방식으로 시프트될 수 있다. 각 시프트 동안, 웨이트 맵(WM)에 포함되는 웨이트들 각각이 제1 피처 맵(FM1)과 중첩된 영역에서의 모든 피처 값과 곱해지고 더해질 수 있다. 제1 피처 맵(FM1)과 웨이트 맵(WM)이 컨볼루션됨에 따라, 제2 피처 맵(FM2)의 하나의 채널이 생성될 수 있다. 도 1에는 하나의 웨이트 맵(WM)이 표시되었으나, 실질적으로는 복수의 웨이트 맵들이 제1 피처 맵(FM1)과 컨볼 루션 되어, 제2 피처 맵(FM2)의 복수의 채널들이 생성될 수 있다. 한편, 컨벌루션 레이어의 제2 피처 맵(FM2) 은 다음 레이어의 입력 피처 맵이 될 수 있다. 예를 들어, 제2 피처 맵(FM2)는 풀링(pooling) 레이어의 입력피처 맵이 될 수 있다. 다만, 이에 제한되는 것은 아니다. 도 2는 일 실시예에 따른 뉴럴 네트워크에서 수행되는 연산을 설명하기 위한 도면이다. 뉴럴 네트워크는 입력 레이어, 히든 레이어들 및 출력 레이어를 포함하는 구조를 가지며, 수신되는 입력 데이터(예를 들어, I1 및 I2)를 기초로 연산을 수행하고, 연산 수행 결과를 기초로 출력 데이터(예를 들어, O1 및 O2)를 생성할 수 있다. 뉴럴 네트워크는 앞서 설명된 바와 같이, 2개 이상의 히든 레이어들을 포함하는 DNN 또는 n-계층 뉴럴 네 트워크일 수 있다. 예를 들어, 도 2에 도시된 바와 같이, 뉴럴 네트워크는 입력 레이어(Layer 1), 2개의 히든 레이어들(Layer 2 및 Layer 3) 및 출력 레이어(Layer 4)를 포함하는 DNN일 수 있다. 뉴럴 네트워크(20 0)가 DNN 아키텍처로 구현된 경우 유효한 정보를 처리할 수 있는 보다 많은 레이어들을 포함하므로, 뉴럴 네트 워크는 싱글 레이어를 갖는 뉴럴 네트워크보다 복잡한 데이터 집합들을 처리할 수 있다. 한편, 뉴럴 네트 워크는 4개의 레이어들을 포함하는 것으로 도시되어 있으나, 이는 예시에 불과할 뿐 뉴럴 네트워크는 더 적거나 많은 레이어들을 포함하거나, 더 적거나 많은 채널들을 포함할 수 있다. 즉, 뉴럴 네트워크는 도 2에 도시된 것과는 다른, 다양한 구조의 레이어들을 포함할 수 있다. 뉴럴 네트워크에 포함된 레이어들 각각은 복수의 채널들을 포함할 수 있다. 채널은 뉴런(neuron), 프로세 싱 엘리먼트(Processing element, PE), 유닛(unit) 또는 이와 유사한 용어들로 알려진, 복수의 인공 노드 (artificial node)들에 해당될 수 있다. 예를 들어, 도 2에 도시된 바와 같이, Layer 1은 2개의 채널들(또는 노드들), Layer 2 및 Layer 3 각각은 3개의 채널들을 포함할 수 있다. 다만, 이는 예시에 불과할 뿐 뉴럴 네트 워크에 포함된 레이어들 각각은 다양한 개수의 채널들(또는 노드들)을 포함할 수 있다. 뉴럴 네트워크의 레이어들 각각에 포함된 채널들은 서로 연결되어 데이터를 처리할 수 있다. 예를 들어, 하나의 채널은 다른 채널들로부터 데이터를 수신하여 연산할 수 있고, 연산 결과를 또 다른 채널들로 출력할 수 있다. 채널들 각각의 입력 및 출력 각각은 입력 액티베이션 및 출력 액티베이션이라고 지칭될 수 있다. 즉, 액티베이 션은 한 채널의 출력임과 동시에, 다음 레이어에 포함된 채널들의 입력에 해당되는 파라미터일 수 있다. 한편, 채널들 각각은 이전 레이어에 포함된 채널들로부터 수신된 액티베이션들 및 웨이트들에 기초하여 자신의 액티베 이션을 결정할 수 있다. 웨이트는 각 채널에서의 출력 액티베이션을 계산하기 위해 이용되는 파라미터로서, 채 널들 간의 연결관계에 할당되는 값일 수 있다. 채널들 각각은 입력을 수신하여 출력 액티베이션을 출력하는 연산 유닛(computational unit) 또는 프로세싱 엘 리먼트(processing element)에 의해 처리될 수 있고, 채널들 각각의 입력-출력은 매핑될 수 있다. 예를 들어, σ는 액티베이션 함수(activation function)이고, 는 (i-1) 번째 레이어에 포함된 k 번째 채널로부터 i 번째 레이어에 포함된 j번째 채널로의 웨이트며, 는 i 번째 레이어에 포함된 j 번째 채널의 바이어스(bias) 이고, 는 i 번째 레이어의 j 번째 채널의 액티베이션이라고 할 때, 액티베이션 는 다음과 같은 수학식 1 을 이용하여 계산될 수 있다. 수학식 1"}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 2, "content": "도 2에 도시된 바와 같이, 2번째 레이어(Layer 2)의 첫 번째 채널(CH 1)의 액티베이션은 로 표현될 수 있다. 또한, 은 수학식 1에 따라 의 값을 가질 수 있다. 액 티베이션 함수 σ는 Rectified Linear Unit (ReLU)일 수 있으나, 이에 제한되는 것은 아니다. 예를 들어, 액티베이션 함수 σ는 시그모이드(Sigmoid), 하이퍼볼릭 탄젠트(tanh), 맥스아웃(Maxout) 등일 수도 있다. 앞서 설명한 것과 같이, 뉴럴 네트워크에서는 수많은 데이터 집합들이 상호 연결된 복수의 채널들 간에 교 환되고, 레이어를 지나면서 연산 과정을 거친다. 이와 같은 연산 과정에서 수많은 MAC(Multiply-accumulate) 연산들이 수행되며, MAC 연산의 피연산자인 액티베이션 및 웨이트를 적절한 시점에 로드(load)하기 위한 수많은 메모리 접근 동작들이 함께 수행되어야 한다. 한편, 일반적인 디지털 컴퓨터는 연산부와 메모리가 분리되고, 분리된 두 블록들 간의 데이터 전달을 위한 공통 의 데이터 버스를 포함하는 폰 노이만(Von Neumann) 구조를 이용한다. 따라서, 데이터의 이동과 연산이 계속해 서 반복되는 뉴럴 네트워크를 실시하는 과정에서 데이터 전달을 위해 많은 시간이 소요되고, 과도한 전력 이 소모될 수 있다. 이러한 문제를 극복하기 위해, MAC 연산을 수행하기 위한 메모리와 연산부를 하나로 통합 시키는 아키텍쳐로서, 인 메모리 컴퓨팅(In-memory Computing) 회로가 제안되었다. 이하 도 3을 참조하여 인 메모리 컴퓨팅 회로에 대해 보다 상세히 설명한다. 도 3은 일 실시예에 따른 인 메모리 컴퓨팅(In-memory computing) 회로를 나타내는 도면이다. 인 메모리 컴퓨팅 회로는 아날로그 크로스바 어레이(Analog crossbar array) 및 ADCs(Analog to Digital Converters)를 포함할 수 있다. 다만, 도 3에 도시된 인 메모리 컴퓨팅 회로에는 본 실시 예들과 관련된 구성요소들만이 도시되어 있다. 따라서, 인 메모리 컴퓨팅 회로에는 도 3에 도시된 구성요 소들 외에 다른 범용적인 구성요소들이 더 포함될 수 있음은 당업자에게 자명할 수 있다. 아날로그 크로스바 어레이는 복수의 로우 라인들, 복수의 칼럼 라인들 및 복수의 메모리 셀들 을 포함할 수 있다. 복수의 로우 라인들은 입력 데이터를 수신하기 위해 이용될 수 있으며, 복수의 입력 라인들로도 지칭될 수 있다. 예를 들어, 복수의 로우 라인들이 N개(N은 임의의 자연수)의 로우 라인 들인 경우, N개의 로우 라인들에는 입력 액티베이션들에 대응되는 전압들 V1, V2, …, VN이 인가될 수 있다. 복 수의 칼럼 라인들은 복수의 로우 라인들과 교차할 수 있다. 예를 들어, 복수의 칼럼 라인들이 M개(M은 임의의 자연수)의 칼럼 라인들인 경우, 복수의 칼럼 라인들과 복수의 로우 라인들은 N x M 개의 교차점들에서 교차할 수 있다. 한편, 복수의 로우 라인들 및 복수의 칼럼 라인들의 교차점들에는 복수의 메모리 셀들이 배치 될 수 있다. 복수의 메모리 셀들 각각은 웨이트들을 저장하기 위해 ReRAM(Resistive RAM), MRAM(Magnetic RAM), eFlash 등의 비휘발성 메모리로 구현될 수 있으나, 이에 반드시 제한되는 것은 아니다. 복수의 메모리 셀들 각각은 SRAM(Static Random Access Memory)와 같은 휘발성 메모리일 수도 있다. 도 3에 도시된 예시에 있어서, 복수의 메모리 셀들은 웨이트들에 대응되는 컨턱턴스(Conductance)들 G11, …, GNM을 가지는 바, 복수의 로우 라인들 각각에 입력 액티베이션에 대응되는 전압이 인가되면, 옴(Ohm)의 법칙에 따라 I = V x G의 크기를 갖는 전류가 각 메모리 셀들을 통해 출력될 수 있다. 하나의 칼럼 라인 을 따라 배치되는 메모리 셀들로부터 출력된 전류들은 서로 합쳐지므로, 복수의 칼럼 라인들을 따라 전류 합 I1, ..., IM이 출력될 수 있다. 전류 합 I1, ..., IM은 아날로그 방식으로 수행된 MAC 연산의 결과에 대응될 수 있다. 따라서, 복수의 칼럼 라인들은 복수의 출력 라인들로도 지칭될 수 있다. ADCs는 아날로그 크로스바 어레이로부터 출력된 아날로그 MAC 연산의 결과(다시 말해, 전류 합 I1, ..., IM)를 디지털 신호로 변환할 수 있다. 디지털 신호로 변환된 MAC 연산의 결과는 ADCs로부터 출력되 어 이후의 뉴럴 네트워크 연산 과정에 이용될 수 있다. 이처럼 도 3에 도시된 형태와 같은 인 메모리 컴퓨팅 회로는 MAC 연산을 저전력으로 수행함으로써 뉴럴 네 트워크 모델의 저전력 구동에 효과적인 하드웨어 아키텍처일 수 있다. 인 메모리 컴퓨팅 회로는 아날로그 크로스바 어레이에서 웨이트 값의 저장 및 MAC 연산을 동시에 수행하기에, 모델 파라미터의 이동으로 인한 에너지 소모를 절감할 수 있어, 폰 노이만 방식의 디지털 아키텍처 대비 뉴럴 네트워크의 구동 및 연산을 위해 소모되는 에너지를 크게 줄일 수 있다. 아날로그 크로스바 어레이의 동작은 각 로우 라인들에 입력 값들이 입력되고, 각 로우 라인들에 입력된 입력 값들은 동일 로우 라인에 배치된 복수의 메모리 셀들 각 각에 동일하게 전달되어 해당 메모리 셀이 저장하는 웨이트 값과 곱셈 연산되며, 각 메모리 셀들의 곱셈 연산 결과들은 각 칼럼 라인들 별로 합산되어 출력될 수 있다. 도 3에 도시된 아날로그 크로스바 어레이는 일반적으로 인공지능 분야에서 활용되는 실수 MAC 연산을 기반 으로 학습(training) 및 추론(inference)를 수행하는 실수 뉴럴 네트워크에 기반할 수 있다. 본 명세서에서는 설명의 편의를 위해 실수 뉴럴 네트워크는 RVNN(real-valued neural networks)로 지칭될 수 있다. 이와 달리 다차원 벡터 MAC 연산을 기반으로 학습 및 추론을 수행하는 뉴럴 네트워크가 존재할 수 있다. 복소 수(complex-value) 기반 MAC 연산을 수행하는 뉴럴 네트워크는 CVNN(complex-valued neural networks)으로 지 칭될 수 있으며, 사원수(quaternion) 기반 MAC 연산을 수행하는 뉴럴 네트워크는 QNN(quaternion neural networks)으로 지칭될 수 있다. CVNN과 QNN은 음성 인식, 영상 인식, 공간 인식 등의 활용 분야에서 RVNN 대비 높은 학습 성능을 보일 수 있다. 이하 도면들을 참조하여 복소수 또는 사원수 기반 MAC 연산을 수행하는 연산 장치의 효율적인 구조 및 운용 방 법에 대해 상세히 설명한다. 도 4는 일 실시예에 따라 복소수 뉴럴 네트워크에서 수행되는 연산을 설명하기 위한 도면이다. 도 4를 참조하면, 복소수 기반 뉴럴 네트워크가 도시된다. 입력 벡터들은 2차원 벡터들로서, 각 입력 벡터 Xi 는 실수 엘리먼트 RXi 및 허수 엘리먼트 IXi를 포함할 수 있다(여기서, i는 자연수). 또한, 출력 벡터들은 2차 원 벡터들로서, 각 출력 벡터 Yj는 실수 엘리먼트 RYj 및 허수 엘리먼트 IYj를 포함할 수 있다(여기서, j는 자연 수). 또한, 웨이트 벡터들도 2차원 벡터들로서, 각 웨이트 벡터 Wij는 i번째 입력 노드와 j번째 출력 노드 간 연결 웨이트를 나타내는 것으로, 실수 엘리먼트 RWij 및 허수 엘리먼트 IWij를 포함할 수 있다. 복소수는 1개의 실수 엘리먼트와 1개의 허수 엘리먼트 i로 표현되는 2차원 벡터로, 예를 들어, 복소수 C1 = a1 + b1i과 C2 = a2 + b2i 간의 곱셈과 덧셈은 다음과 같이 수행될 수 있다. C1 + C2 = (a1 + a2) + (b1 + b2)i C1 x C2 = (a1 x a2 - b1 x b2) + (a1 x b2 + a2 x b1)i 복소수 기반 MAC 연산은 복소수 입력 Pc l = ap l + bp li과 복소수 웨이트 Wc lm = aw lm + bw lmi 간의 곱셈과 덧셈을 기 반으로 수행된다. 수학식 2"}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "음성 인식을 예로 들면, wav 파일과 같은 오디오 파일 내 음파 신호를 뉴럴 네트워크 모델에 입력하기에 앞서 푸리에 변환(Fourier transform)을 통해 주파수 대역별로 복소수 신호가 획득될 수 있다. 복소수 신호 내 실수 엘리먼트는 음파 신호의 강도를 나타내고, 허수 엘리먼트는 음파 신호의 위상을 나타낼 수 있다. RVNN에서는 각 입력 노드가 1차원 실수 값만을 입력 받고 출력하기 때문에, 푸리에 변환을 통해 확보된 N개의 복소수 신호의 실수 엘리먼트와 허수 엘리먼트를 분리하여 2N개의 입력 노드에 각각의 값을 입력하거나, N개의 입력 노드에 각 복소수 신호의 실수 엘리먼트 값만을 입력하여 학습 및 추론을 수행할 수 있다. 각 복소수 신 호가 지니고 있던 실수 엘리먼트와 허수 엘리먼트 간 상관관계, 다시 말해 음파 신호의 강도와 위상 간의 상관 관계가 소멸된 채 RVNN이 구동되기 때문에 학습 성능이 낮아지거나, 복소수 음파 신호가 본래 지니고 있던 실수 엘리먼트와 허수 엘리먼트 간 상관관계를 RVNN에 재구축하여 학습 성능을 높이기 위한 모델의 상당한 사이즈와 많은 연산량이 요구될 수 있다. 반면, CVNN은 각 입력 노드가 복소수 값을 입력 받고 출력할 수 있기 때문에, RVNN과는 달리 푸리에 변환을 통 해 얻어진 복소수 신호를 그대로 입력하여 학습 및 추론을 수행할 수 있다. 다시 말해, 복소수 신호가 지닌 실 수 엘리먼트와 허수 엘리먼트의 상관관계를 그대로 유지한 채 학습과 추론을 수행할 수 있기에 CVNN은 RVNN 대 비 더 높은 학습 및 추론 성능을 실현할 수 있다.음파 신호처럼 자연계에 존재하는 다양한 신호는 대부분 다차원 벡터로 정의될 수 있기 때문에, RVNN에 비해 다 차원 벡터 MAC 연산 기반의 뉴럴 네트워크(예: CVNN, QNN)에서 더 높은 학습 및 추론 성능을 기대할 수 있다. 다만, 수학식 2에서 설명한 바와 같이 복소수 기반 MAC 연산은 1회의 MAC 연산에 RVNN 대비 4배 더 많은 연산량 이 수행될 수 있다. 이하에서는 복소수 기반 MAC 연산을 효율적으로 수행하는 연산 장치의 구조 및 동작 방법 에 대해 자세히 설명한다. 도 5 내지 도 7은 일 실시예에 따른 복소수 뉴럴 네트워크에 대한 연산 장치의 구조 및 동작을 설명하기 위한 도면이다. 도 5를 참조하면, 복소수 기반 MAC 연산을 수행하는 연산 장치는 크로스바 어레이, 복수의 셀렉터들(도 5에서 \"Sel\"로 도시됨) 및 복수의 가산기들을 포함할 수 있다. 크로스바 어레이는 복수의 2차원 입력 벡터들이 입력되는 N개의 입력 라인들, 입력 라인들에 교차하는 2M개의 출력 라인들 및 입력 라인들과 출력 라인들의 교 차점들에 배치된 N x 2M개의 메모리 셀들을 포함할 수 있다. 복소수 기반 MAC 연산에서는 수학식 2와 같이 2차원 입력 벡터의 실수 엘리먼트와 허수 엘리먼트 및 2차원 웨이 트 벡터의 실수 엘리먼트와 허수 엘리먼트 간 교환 법칙이 성립할 수 있다. 이러한 복소수 기반 MAC 연산을 크 로스바 어레이를 포함한 연산 장치에서 구현하기 위해서는, 먼저 2차원 웨이트 벡터들 각각에 포함된 웨이트 엘 리먼트들이 대응하는 하나의 기준 입력 라인 및 대응하는 2개의 기준 출력 라인들을 연결시키는 기준 메모리 셀 들에 저장될 수 있다. 예를 들어, 웨이트 벡터 W11에서 실수 엘리먼트 RW11는 1번째 로우의 입력 라인과 1번째 칼럼의 출력 라인 간 교차점에 배치된 메모리 셀에 저장될 수 있다. 웨이트 벡터 W11에서 허수 엘리먼트 IW11는 1번째 로우의 입력 라인과 2번째 칼럼의 출력 라인 간 교차점에 배치된 메모리 셀에 저장될 수 있다. 정리하면, 복수의 2차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들(예: 실수 엘리먼트 및 허수 엘리먼 트)은 상이한 기준 출력 라인에 연결된 기준 메모리 셀에 저장될 수 있다. 한편, 복수의 입력 라인들 각각이 하나의 입력 노드에 대응하는 반면, 복수의 출력 라인들 중 2개의 출력 라인 들은 하나의 출력 노드에 대응할 수 있다. 만약 출력 노드들이 M개 있다면, 크로스바 어레이에는 2M개의 출력 라인들이 포함될 수 있다. 하나의 출력 노드에 대응하는 2개의 출력 라인들 중 하나에 연결된 메모리 셀 들이 해당 출력 노드로 연결되는 웨이트 벡터들의 실수 엘리먼트들을 저장할 수 있으며, 다른 하나에 연결된 메 모리 셀들이 해당 출력 노드로 연결되는 웨이트 벡터들의 허수 엘리먼트들을 저장할 수 있다. 2개의 출력 라인 들의 한 쌍이 하나의 출력 노드에 대응할 수 있다. N개의 입력 라인들에 N개의 2차원 입력 벡터들이 입력될 수 있다. 입력 벡터들 각각에 포함된 입력 엘리먼트들은 동일한 기준 입력 라인에 순차적으로 입력될 수 있다. 예를 들어, 1번째 입력 벡터 X1의 실수 엘 리먼트 RX1는 1번째 사이클에 1번째 로우의 입력 라인에 입력될 수 있다. 1번째 입력 벡터 X1의 허수 엘리먼트 IX1는 2번째 사이클에 1번째 로우의 입력 라인에 입력될 수 있다. 입력 벡터들은 각각 대응하는 입력 라인 에 두 사이클들 동안 입력될 수 있다. 입력 벡터들이 입력되는 사이클 수는 입력 벡터들의 차원수와 동일할 수 있다. 두 사이클들 동안 입력 라인들에 순차적으로 입력되는 입력 벡터들의 입력 엘리먼트들이 메모리 셀들에 저 장된 웨이트 엘리먼트들과 곱해지고, 출력 라인에 따라 곱셈들의 합이 결정되어 출력될 수 있다. 각 출력 라인 에서 출력되는 연산 결과는 복수의 셀렉터들을 통해 복수의 가산기들 중 어느 하나로 전달될 수 있다. 예 를 들어, 1번째 출력 노드에 대응하는 기준 출력 라인들 중 어느 하나의 연산 결과는 대응하는 1번째 셀렉터를 통해 2개의 가산기들 중 어느 하나로 전달되고, 기준 출력 라인들 중 다른 하나의 연산 결과는 대응하는 2번째 셀렉터를 통해 2개의 가산기들 중 다른 하나로 전달될 수 있다. 복수의 가산기들은 두 사이클들 동안 셀렉터들을 통해 전달된 연산 결과들을 누적해서, 출력 벡터에 포함되는 출력 엘리먼트들을 결정할 수 있다. 예를 들어, 1번째 가산기에서 두 사이클들 동안 누적된 연산 결과는 1번째 출력 벡터의 실수 엘리먼트 RY1로 결정될 수 있고, 2번째 가산기에서 두 사이클들 동안 누적된 연산 결과는 1번 째 출력 벡터의 허수 엘리먼트 IY1로 결정될 수 있다. 복소수 기반 MAC 연산을 수행하는 연산 장치의 동작에 대해서는 도 6 및 도 7을 통해 상세히 설명한다. 도 6을 참조하면, 복소수 기반 MAC 연산의 1번째 사이클에서 연산 장치의 동작이 도시된다. 1번째 사이클에서 는 2차원 입력 벡터들 각각의 실수 엘리먼트가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된각 2차원 입력 벡터의 실수 엘리먼트들은 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 예를 들 어, 1번째 로우의 입력 라인에 입력된 1번째 입력 벡터의 실수 엘리먼트 RX1는 1번째 로우의 입력 라인에 연결된 복수의 메모리 셀들에 저장된 웨이트 엘리먼트들 RW11, IW11, ..., RW1M, IW1M과 각각 곱해질 수 있다. 복수의 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있 다. 예를 들어, 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 RX1 x RW11 + RX2 x RW21 + RX3 x RW31 + ... + RXN x RWN1로서, 각 입력 벡터의 실수 엘리먼트 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 실수 엘리 먼트에 대한 MAC 연산 결과일 수 있다. 1번째 셀렉터는 연산 결과를 1번째 가산기로 전달할 수 있다. 또한, 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 RX1 x IW11 + RX2 x IW21 + RX3 x IW31 + ... + RXN x IWN1로서, 각 입력 벡터의 실수 엘리먼트 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 에 대한 MAC 연산 결과일 수 있다. 2번째 셀렉터는 연산 결과를 2번째 가산기로 전달할 수 있 다. 앞서 1, 2번째 칼럼의 출력 라인들에서 수행되는 연산 결과와 그 전달 동작에 대한 설명이 나머지 칼럼의 출력 라인들에도 마찬가지로 적용될 수 있으므로, 보다 상세한 설명은 생략한다. 도 7을 참조하면, 복소수 기반 MAC 연산의 2번째 사이클에서 연산 장치의 동작이 도시된다. 2번째 사이클에서 는 2차원 입력 벡터들 각각의 허수 엘리먼트가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 2차원 벡터의 허수 엘리먼트들은 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 예를 들어, 1 번째 로우의 입력 라인에 입력된 1번째 입력 벡터의 허수 엘리먼트 IX1는 1번째 로우의 입력 라인에 연결된 복수 의 메모리 셀들에 저장된 웨이트 엘리먼트들 RW11, IW11, ..., RW1M, IW1M과 각각 곱해질 수 있다. 복수의 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있 다. 예를 들어, 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 IX1 x RW11 + IX2 x RW21 + IX3 x RW31 + ... + IXN x RWN1로서, 각 입력 벡터의 허수 엘리먼트 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 실수 엘리 먼트에 대한 MAC 연산 결과일 수 있다. 1번째 셀렉터는 연산 결과를 2번째 가산기로 전달할 수 있다. 또한, 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 IX1 x IW11 + IX2 x IW21 + IX3 x IW31 + ... + IXN x IWN1로서, 각 입력 벡터의 허수 엘리먼트 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 에 대한 MAC 연산 결과일 수 있다. 연산 결과는 허수 엘리먼트들 간 곱셈의 합이므로, 2번째 셀렉터(74 0)는 연산 결과의 부호를 반전시켜 1번째 가산기로 전달할 수 있다. 1번째 가산기는 두 사이클들 동안 전달된 연산 결과를 누적할 수 있고, 1번째 출력 벡터의 실수 엘리먼트 는 1번째 가산기에서 누적된 결과로 결정될 수 있다. 2번째 가산기는 두 사이클들 동안 전달된 연산 결과를 누적할 수 있고, 1번째 출력 벡터의 허수 엘리먼트는 2번째 가산기에서 누적된 결과로 결정될 수 있다. 연산 장치에서 수행되는 복소수 기반 MAC 연산은 아래 수학식 3으로 표현될 수 있다. 수학식 3"}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "위의 수학식 3에서, RXN·RWNM은 도 6의 연산 결과에 해당하고, -IXN·IWNM은 도 7의 연산 결과에 해당 하고, RXN· IWNM은 도 6의 연산 결과에 해당하며, IXN·RWNM은 도 7의 연산 결과에 해당할 수 있다. 설명의 편의를 위해 1번째 출력 노드와 관련된 연산 동작에 관하여 설명하였으나, 앞선 설명이 나머지 출력 노 드와 관련된 연산 동작에도 마찬가지로 적용될 수 있다. 이처럼 연산 장치의 두 사이클들 동작만으로도 복소수기반 MAC 연산 결과가 효과적으로 획득될 수 있다. 도 8은 일 실시예에 따라 사원수 뉴럴 네트워크에서 수행되는 연산을 설명하기 위한 도면이다. 도 8을 참조하면, 사원수 기반 뉴럴 네트워크가 도시된다. 입력 벡터들은 4차원 벡터들로서, 각 입력 벡터 Xi 는 실수 엘리먼트 RXi 및 허수 엘리먼트들 IXi, JXi, KXi를 포함할 수 있다(여기서, i는 자연수). 또한, 출력 벡 터들은 4차원 벡터들로서, 각 출력 벡터 Yj는 실수 엘리먼트 RYj 및 허수 엘리먼트들 IYj, JYj, KYj를 포함할 수 있다(여기서, j는 자연수). 또한, 웨이트 벡터들도 4차원 벡터들로서, 각 웨이트 벡터 Wij는 i번째 입력 노드와 j번째 출력 노드 간 연결 웨이트를 나타내는 것으로, 실수 엘리먼트 RWij 및 허수 엘리먼트들 IWij, JWij, KWij를 포함할 수 있다. 사원수는 1개의 실수 엘리먼트와 3개의 허수 엘리먼트 i, j, k로 표현되는 4차원 벡터로, 3개의 허수 엘리먼트 i, j, k는 각각 직교 상태에 있다. 따라서, 사원수 Q1 = a1 + b1i + c1j + d1k와 Q2 = a2 + b2i + c2j + d2k 간의 곱셈과 덧셈은 다음과 같이 수행될 수 있다. Q1 + Q2 = (a1 + a2) + (b1 + b2)i + (c1 + c2)j + (d1 + d2)k Q1 x Q2 = (a1 x a2 - b1 x b2 - c1 x c2 - d1 x d2) + (a1 x b2 + b1 x a2 + c1 x d2 - d1 x c2)i + (a1 x c2 - b1 x d2 + c1 x a2 + d1 x b2)j + (a1 x d2 + b1 x c2 - c1 x b2 + d1 x a2)k 사원수 기반 MAC 연산은 사원수 입력 Pq l = ap l + bp li + cp lj + dp lk와 사원수 웨이트 Wq lm = aw lm + bw lmi + cw lmj + dw lmk, 사원수 웨이트의 켤레 Wq lm* = aw lm - bw lmi - cw lmj - dw lmk 간의 곱셈과 덧셈을 기반으로 수행될 수 있으며, 아래의 수학식 3으로 표현될 수 있다. 수학식 4"}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "공간 인식을 예로 들면, 대상체의 위치 변화 및 움직임에 대한 x, y, z 의 3차원 공간 좌표 데이터가 핸들링 될 수 있다. N개의 3차원 공간 좌표 데이터를 입력하기 위해, RVNN에서는 각 데이터의 x, y, z 값을 분리하여 총 3N개의 입력 노드에 전달할 수 있다. 각 3차원 공간 좌표 데이터가 본래 지니고 있던 x, y, z 값들 간의 상관 관계가 소멸된 채 RVNN에서 학습 및 추론이 수행되면, 낮은 성능이 나타나거나, x, y, z 값들 간의 상관관계를 RVNN에 재구축하여 학습 성능을 높이기 위한 모델의 상당한 사이즈와 많은 연산량이 요구될 수 있다. 반면, QNN은 각 입력 노드가 사원수 값을 입력 받고 출력할 수 있기 때문에, 3차원 공간 좌표 데이터의 x, y, z 값을 사원수의 3개 허수 엘리먼트 i, j, k로 표현하여 x, y, z 값 간의 상관관계를 유지한 채 학습 및 추론을 수행할 수 있다. 다시 말해, 3차원 공간 좌표 데이터가 지닌 x, y, z 값들 간 상관관계를 그대로 유지한 채 학 습과 추론을 수행할 수 있기에 QNN은 RVNN 대비 더 높은 학습 및 추론 성능을 실현할 수 있다. 영상 인식에서 또한 각 픽셀의 R, G, B 값을 사원수의 3개 허수 엘리먼트 i, j, k로 표현하여 R, G, B 값 간의 상관관계(여기서, R, G, B 값 간 상관관계는 각 픽셀의 상세한 색상정보를 의미함)를 유지한 채 학습 및 추론을 수행함으로써, QNN이 RVNN 대비 더 높은 학습 및 추론 성능을 실현할 수 있다. 3차원 공간 좌표 데이터나 픽셀 값처럼 자연계에 존재하는 다양한 신호는 대부분 다차원 벡터로 정의될 수 있기 때문에, RVNN에 비해 다차원 벡터 MAC 연산 기반의 뉴럴 네트워크(예: CVNN, QNN)에서 더 높은 학습 및 추론 성 능을 기대할 수 있다. 다만, 수학식 3에서 설명한 바와 같이 사원수 기반 MAC 연산은 1회의 MAC 연산에 RVNN 대비 32배 더 많은 연산량이 수행될 수 있다. 이하에서는 사원수 기반 MAC 연산을 효율적으로 수행하는 연산 장치의 구조 및 동작 방법에 대해 자세히 설명한다.도 9 내지 도 16은 일 실시예에 따른 사원수 뉴럴 네트워크에 대한 연산 장치의 구조 및 동작을 설명하기 위한 도면이다. 사원수 기반 MAC 연산을 수행하는 연산 장치는 크로스바 어레이, 복수의 부호 셀렉터들, 복수의 가산기 셀렉터 들 및 복수의 가산기들을 포함할 수 있다. 크로스바 어레이는 복수의 4차원 입력 벡터들이 입력되는 N개의 입 력 라인들, 입력 라인들에 교차하는 4M개의 출력 라인들 및 입력 라인들과 출력 라인들의 교차점들에 배치된 N x 4M개의 메모리 셀들을 포함할 수 있다. 사원수는 1개의 실수 엘리먼트와 3개의 허수 엘리먼트들이 포함될 수 있으므로, M개의 출력 벡터들을 결정하기 위해 4M개의 출력 라인들이 이용될 수 있다. 사원수 기반 MAC 연산에서는 수학식 3과 같이 4차원 입력 벡터의 실수 엘리먼트와 3개의 허수 엘리먼트들, 웨이 트 벡터의 실수 엘리먼트와 3개의 허수 엘리먼트들 간 교환 법칙이 성립될 수 있다. 이러한 사원수 기반 MAC 연산을 크로스바 어레이를 포함한 연산 장치에서 구현하기 위해서는, 먼저 4차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들이 대응하는 하나의 기준 입력 라인 및 대응하는 4개의 기준 출력 라인들을 연결사키는 기준 메모리 셀들에 저장될 수 있다. 예를 들어, 웨이트 벡터 W11에서 실수 엘리먼트 RW11는 1번째 로우의 입력 라인 과 1번째 칼럼의 출력 라인 간 교차점에 배치된 메모리 셀에 저장될 수 있다. 웨이트 벡터 W11에서 허수 엘리먼 트 IW11는 1번째 로우의 입력 라인과 2번째 칼럼의 출력 라인 간 교차점에 배치된 메모리 셀에 저장될 수 있다. 웨이트 벡터 W11에서 허수 엘리먼트 JW11는 1번째 로우의 입력 라인과 3번째 칼럼의 출력 라인 간 교차점에 배치 된 메모리 셀에 저장될 수 있다. 웨이트 벡터 W11에서 허수 엘리먼트 KW11는 1번째 로우의 입력 라인과 4번째 칼 럼의 출력 라인 간 교차점에 배치된 메모리 셀에 저장될 수 있다. 정리하면, 복수의 4차원 웨이트 벡터들 각각 에 포함된 웨이트 엘리먼트(예: 실수 엘리먼트 및 3개의 허수 엘리먼트들)는 상이한 기준 출력 라인에 연결된 기준 메모리 셀에 저장될 수 있다. 실시예에 따라서는, 크로스바 어레이 연산의 동작 효율을 극대화하기 위해, 각 웨이트 벡터의 실수 엘리먼트와 3개의 허수 엘리먼트들 각각을 웨이트 벡터의 크기(이를 테면, 웨이트 벡터 와 켤레 웨이트 벡터의 곱셈 결과)로 나눈 값들이 메모리 셀들에 저장될 수도 있다. 한편, 복수의 입력 라인들 각각이 하나의 입력 노드에 대응하는 반면, 복수의 출력 라인들 중 4개의 출력 라인 들이 하나의 출력 노드에 대응할 수 있다. 만약 출력 노드들이 M개 있다면, 크로스바 어레이에는 4M개의 출력 라인들이 포함될 수 있다. 하나의 출력 노드에 대응하는 4개의 출력 라인들 중 1번째 출력 라인에 연결된 메모 리 셀들이 해당 출력 노드로 연결되는 웨이트 벡터들의 실수 엘리먼트들을 저장할 수 있으며, 2번째 출력 라인 에 연결된 메모리 셀들이 해당 출력 노드로 연결되는 웨이트 벡터들의 허수 엘리먼트들 i을 저장할 수 있으며, 3번째 출력 라인에 연결된 메모리 셀들이 해당 출력 노드로 연결되는 웨이트 벡터들의 허수 엘리먼트들 j을 저 장할 수 있으며, 4번째 출력 라인에 연결된 메모리 셀들이 해당 출력 노드로 연결되는 웨이트 벡터들의 허수 엘 리먼트들 k를 저장할 수 있다. 4개의 출력 라인들의 한 쌍이 하나의 출력 노드에 대응할 수 있다. 복소수 기반 MAC 연산을 수행하는 연산 장치와 달리, 사원수 기반 MAC 연산을 수행하는 연산 장치는 복수의 부 호 셀렉터들 및 복수의 가산기 셀렉터들을 포함할 수 있다. 각 출력 라인에서 출력된 연산 결과는 대응하는 부 호 셀렉터에 의해 부호가 결정되고, 대응하는 가산기 셀렉터에 의해 복수의 가산기들 중 어느 하나로 전달될 수 있다. 여덟 사이클들 동안 사원수 기반 MAC 연산을 수행하는 연산 장치의 동작에 대해서는 도 9 및 도 16을 통해 상세 히 설명한다. 도 9를 참조하면, 사원수 기반 MAC 연산의 1번째 사이클에서 연산 장치의 동작이 도시된다. 1번째 사이클에서 는 4차원 입력 벡터들 각각의 실수 엘리먼트가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 4차원 입력 벡터의 실수 엘리먼트들은 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 예를 들 어, 1번째 로우의 입력 라인에 입력된 1번째 입력 벡터의 실수 엘리먼트 RX1는 1번째 로우의 입력 라인에 연결된 복수의 메모리 셀들에 저장된 웨이트 엘리먼트들 RW11, IW11, JW11, KW11, ..., RW1M, IW1M, JW1M, KW1M와 각각 곱해질 수 있다. 복수의 부호 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과의 부호를 결정하고, 복수의 가산기 셀렉터 들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있다. 예를 들 어, 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 RX1 x RW11 + RX2 x RW21 + RX3 x RW31 + ... + RXN x RWN1로서, 각 입력 벡터의 실수 엘리먼트 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 실수 엘리먼트에 대한MAC 연산 결과일 수 있다. 1번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 1번째 가산기 셀렉터 는 연산 결과를 1번째 가산기로 전달할 수 있다. 또한, 2번째 칼럼의 출력 라인에서 출력되는 연산 결과 는 RX1 x IW11 + RX2 x IW21 + RX3 x IW31 + ... + RXN x IWN1로서, 각 입력 벡터의 실수 엘리먼트 및 1번째 출 력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 i에 대한 MAC 연산 결과일 수 있다. 2번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 2번째 가산기 셀렉터는 연산 결과를 2번째 가산기로 전달할 수 있 다. 또한, 3번째 칼럼의 출력 라인에서 출력되는 연산 결과는 RX1 x JW11 + RX2 x JW21 + RX3 x JW31 + ... + RXN x JWN1로서, 각 입력 벡터의 실수 엘리먼트 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 j 에 대한 MAC 연산 결과일 수 있다. 3번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 3번째 가산기 셀렉터는 연산 결과를 3번째 가산기로 전달할 수 있다. 또한, 4번째 칼럼의 출력 라인에서 출력되는 연산 결과는 RX1 x KW11 + RX2 x KW21 + RX3 x KW31 + ... + RXN x KWN1로서, 각 입력 벡터의 실수 엘리먼트 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 k에 대한 MAC 연산 결과일 수 있다. 4번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 4번째 가산기 셀렉터는 연산 결과를 4번째 가산기로 전달할 수 있 다. 앞서 1 내지 4번째 칼럼의 출력 라인들에서 수행되는 연산 결과와 그 전달 동작에 대한 설명이 나머지 칼럼의 출력 라인들에도 마찬가지로 적용될 수 있으므로, 보다 상세한 설명은 생략한다. 도 10을 참조하면, 사원수 기반 MAC 연산의 2번째 사이클에서 연산 장치의 동작이 도시된다. 2번째 사이클에서 는 4차원 입력 벡터들 각각의 허수 엘리먼트 i가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 4차원 입력 벡터의 허수 엘리먼트들 i는 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 예를 들어, 1번째 로우의 입력 라인에 입력된 1번째 입력 벡터의 허수 엘리먼트 IX1는 1번째 로우의 입력 라인에 연결 된 복수의 메모리 셀들에 저장된 웨이트 엘리먼트들 RW11, IW11, JW11, KW11, ..., RW1M, IW1M, JW1M, KW1M와 각각 곱해 질 수 있다. 복수의 부호 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과의 부호를 결정하고, 복수의 가산기 셀렉터 들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있다. 예를 들 어, 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 IX1 x RW11 + IX2 x RW21 + IX3 x RW31 + ... + IXN x RWN1로서, 각 입력 벡터의 허수 엘리먼트 i 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 실수 엘리먼트에 대 한 MAC 연산 결과일 수 있다. 1번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 1번째 가산기 셀 렉터는 연산 결과를 2번째 가산기로 전달할 수 있다. 또한, 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 IX1 x IW11 + IX2 x IW21 + IX3 x IW31 + ... + IXN x IWN1로서, 각 입력 벡터의 허수 엘리먼트 i 및 1 번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 i에 대한 MAC 연산 결과일 수 있다. 2번째 부호 셀 렉터는 연산 결과의 부호를 -로 결정하고, 2번째 가산기 셀렉터는 연산 결과를 1번째 가산기로 전 달할 수 있다. 또한, 3번째 칼럼의 출력 라인에서 출력되는 연산 결과는 IX1 x JW11 + IX2 x JW21 + IX3 x JW31 + ... + IXN x JWN1로서, 각 입력 벡터의 허수 엘리먼트 i 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허 수 엘리먼트 j에 대한 MAC 연산 결과일 수 있다. 3번째 부호 셀렉터는 연산 결과의 부호를 -로 결정하고, 3번째 가산기 셀렉터는 연산 결과를 4번째 가산기로 전달할 수 있다. 또한, 4번째 칼럼의 출 력 라인에서 출력되는 연산 결과는 IX1 x KW11 + IX2 x KW21 + IX3 x KW31 + ... + IXN x KWN1로서, 각 입력 벡 터의 허수 엘리먼트 i 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 k에 대한 MAC 연산 결과일 수 있다. 4번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 4번째 가산기 셀렉터는 연산 결과 를 3번째 가산기로 전달할 수 있다. 앞서 1 내지 4번째 칼럼의 출력 라인들에서 수행되는 연산 결과와 그 전달 동작에 대한 설명이 나머지 칼럼의 출력 라인들에도 마찬가지로 적용될 수 있으므로, 보다 상세한 설명은 생략한다. 도 11을 참조하면, 사원수 기반 MAC 연산의 3번째 사이클에서 연산 장치의 동작이 도시된다. 3번째 사이클에서 는 4차원 입력 벡터들 각각의 허수 엘리먼트 j가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 4차원 입력 벡터의 허수 엘리먼트들 j는 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 예를 들어, 1번째 로우의 입력 라인에 입력된 1번째 입력 벡터의 허수 엘리먼트 JX1는 1번째 로우의 입력 라인에 연결 된 복수의 메모리 셀들에 저장된 웨이트 엘리먼트들 RW11, IW11, JW11, KW11, ..., RW1M, IW1M, JW1M, KW1M와 각각 곱해질 수 있다. 복수의 부호 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과의 부호를 결정하고, 복수의 가산기 셀렉터 들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있다. 예를 들 어, 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 JX1 x RW11 + JX2 x RW21 + JX3 x RW31 + ... + JXN x RWN1로서, 각 입력 벡터의 허수 엘리먼트 j 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 실수 엘리먼트에 대 한 MAC 연산 결과일 수 있다. 1번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 1번째 가산기 셀 렉터는 연산 결과를 3번째 가산기로 전달할 수 있다. 또한, 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 JX1 x IW11 + JX2 x IW21 + JX3 x IW31 + ... + JXN x IWN1로서, 각 입력 벡터의 허수 엘리먼트 j 및 1 번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 i에 대한 MAC 연산 결과일 수 있다. 2번째 부호 셀 렉터는 연산 결과의 부호를 +로 결정하고, 2번째 가산기 셀렉터는 연산 결과를 4번째 가산기로 전 달할 수 있다. 또한, 3번째 칼럼의 출력 라인에서 출력되는 연산 결과는 JX1 x JW11 + JX2 x JW21 + JX3 x JW31 + ... + JXN x JWN1로서, 각 입력 벡터의 허수 엘리먼트 j 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허 수 엘리먼트 j에 대한 MAC 연산 결과일 수 있다. 3번째 부호 셀렉터는 연산 결과의 부호를 -로 결정하고, 3번째 가산기 셀렉터는 연산 결과를 1번째 가산기로 전달할 수 있다. 또한, 4번째 칼럼의 출 력 라인에서 출력되는 연산 결과는 JX1 x KW11 + JX2 x KW21 + JX3 x KW31 + ... + JXN x KWN1로서, 각 입력 벡 터의 허수 엘리먼트 j 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 k에 대한 MAC 연산 결과일 수 있다. 4번째 부호 셀렉터는 연산 결과의 부호를 -로 결정하고, 4번째 가산기 셀렉터는 연산 결과 를 2번째 가산기로 전달할 수 있다. 앞서 1 내지 4번째 칼럼의 출력 라인들에서 수행되는 연산 결과와 그 전달 동작에 대한 설명이 나머지 칼럼의 출력 라인들에도 마찬가지로 적용될 수 있으므로, 보다 상세한 설명은 생략한다. 도 12를 참조하면, 사원수 기반 MAC 연산의 4번째 사이클에서 연산 장치의 동작이 도시된다. 4번째 사이클에서 는 4차원 입력 벡터들 각각의 허수 엘리먼트 k가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 4차원 입력 벡터의 허수 엘리먼트들 k는 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 예를 들어, 1번째 로우의 입력 라인에 입력된 1번째 입력 벡터의 허수 엘리먼트 KX1는 1번째 로우의 입력 라인에 연결 된 복수의 메모리 셀들에 저장된 웨이트 엘리먼트들 RW11, IW11, JW11, KW11, ..., RW1M, IW1M, JW1M, KW1M와 각각 곱해 질 수 있다. 복수의 부호 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과의 부호를 결정하고, 복수의 가산기 셀렉터 들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있다. 예를 들 어, 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 KX1 x RW11 + KX2 x RW21 + KX3 x RW31 + ... + KXN x RWN1로서, 각 입력 벡터의 허수 엘리먼트 k 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 실수 엘리먼트에 대 한 MAC 연산 결과일 수 있다. 1번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 1번째 가산기 셀 렉터는 연산 결과를 4번째 가산기로 전달할 수 있다. 또한, 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 KX1 x IW11 + KX2 x IW21 + KX3 x IW31 + ... + KXN x IWN1로서, 각 입력 벡터의 허수 엘리먼트 k 및 1 번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 i에 대한 MAC 연산 결과일 수 있다. 2번째 부호 셀 렉터는 연산 결과의 부호를 -로 결정하고, 2번째 가산기 셀렉터는 연산 결과를 3번째 가산기로 전 달할 수 있다. 또한, 3번째 칼럼의 출력 라인에서 출력되는 연산 결과는 KX1 x JW11 + KX2 x JW21 + KX3 x JW31 + ... + KXN x JWN1로서, 각 입력 벡터의 허수 엘리먼트 k 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허 수 엘리먼트 j에 대한 MAC 연산 결과일 수 있다. 3번째 부호 셀렉터는 연산 결과의 부호를 -로 결정하고, 3번째 가산기 셀렉터는 연산 결과를 2번째 가산기로 전달할 수 있다. 또한, 4번째 칼럼의 출 력 라인에서 출력되는 연산 결과는 KX1 x KW11 + KX2 x KW21 + KX3 x KW31 + ... + KXN x KWN1로서, 각 입력 벡 터의 허수 엘리먼트 k 및 1번째 출력 노드와 관련된 각 웨이트 벡터의 허수 엘리먼트 k에 대한 MAC 연산 결과일 수 있다. 4번째 부호 셀렉터는 연산 결과의 부호를 +로 결정하고, 4번째 가산기 셀렉터는 연산 결과 를 1번째 가산기로 전달할 수 있다. 앞서 1 내지 4번째 칼럼의 출력 라인들에서 수행되는 연산 결과와 그 전달 동작에 대한 설명이 나머지 칼럼의 출력 라인들에도 마찬가지로 적용될 수 있으므로, 보다 상세한 설명은 생략한다.복수의 가산기들은 1 내지 4번째 사이클들 동안 가산기 셀렉터들을 통해 전달된 연산 결과들을 부호 셀렉터들을 통해 결정된 부호로 누적해서, 중간 연산 벡터에 포함되는 중간 연산 엘리먼트들을 결정할 수 있다. 예를 들어, 1번째 가산기에서 1 내지 4번째 사이클들 동안 누적된 연산 결과는 1번째 중간 연산 벡터의 실수 엘리먼 트 'RY1로 결정될 수 있고, 2번째 가산기에서 1 내지 4번째 사이클들 동안 누적된 연산 결과는 1번째 중간 연산 벡터의 허수 엘리먼트 'IY1로 결정될 수 있다. 또한, 3번째 가산기에서 1 내지 4번째 사이클들 동안 누적된 연 산 결과는 1번째 중간 연산 벡터의 허수 엘리먼트 'JY1로 결정될 수 있고, 4번째 가산기에서 1 내지 4번째 사이 클들 동안 누적된 연산 결과는 1번째 중간 연산 벡터의 허수 엘리먼트 'KY1로 결정될 수 있다. 연산 장치는 네 사이클들 동안 사원수 웨이트 벡터와 사원수 입력 벡터 간 곱셈 연산을 완료할 수 있다. 수학 식 4에 기반하여, 연산 장치는 네 사이클들 동안 곱셈 연산으로 획득된 중간 연산 벡터를 켤레 사원수 웨이트 벡터와 곱셈 연산할 수 있다. 켤레 사원수 벡터는 사원수 벡터와 크기(이를 테면, 실수 엘리먼트와 3개의 허수 엘리먼트들의 절대값)가 동일한 반면, 3개의 허수 엘리먼트들의 부호만 반대가 되기에, 앞서 설명한 사원수 웨 이트 벡터와 사원수 입력 벡터 간 곱셈 연산에 이용된 크로스바 어레이가 그대로 이용될 수 있다. 다만, 셀렉 터들의 동작이 다소 상이할 수 있다. 중간 연산 벡터들 각각에 포함된 실수 엘리먼트 'RXN과 허수 엘리먼트들 'IXN, 'JXN, 'KXN은 나머지 네 사이클들 동안 순차적으로 입력 라인들에 입력될 수 있다. 도 13을 참조하면, 사원수 기반 MAC 연산의 5번째 사이클에서 연산 장치의 동작이 도시된다. 5번째 사이클에서 는 4차원 중간 연산 벡터들 각각의 실수 엘리먼트가 대응하는 입력 라인에 입력되어 메모리 셀들에 저장된 웨이 트 엘리먼트들에 곱해질 수 있다. 복수의 부호 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과의 부호 를 결정하고, 복수의 가산기 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있다. 복수의 부호 셀렉터들 및 복수의 가산기 셀렉턱들은 도 13에 도시된 실선에 따라 동작 할 수 있으므로, 보다 상세한 설명은 생략한다. 도 14를 참조하면, 사원수 기반 MAC 연산의 6번째 사이클에서 연산 장치의 동작이 도시된다. 6번째 사이클에서 는 4차원 중간 연산 벡터들 각각의 허수 엘리먼트 'i가 대응하는 입력 라인에 입력되어 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 복수의 부호 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과의 부호를 결정하고, 복수의 가산기 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있다. 복수의 부호 셀렉터들 및 복수의 가산기 셀렉턱들은 도 14에 도시된 실선에 따라 동작할 수 있으므로, 보다 상세한 설명은 생략한다. 도 15를 참조하면, 사원수 기반 MAC 연산의 7번째 사이클에서 연산 장치의 동작이 도시된다. 7번째 사이클에서 는 4차원 중간 연산 벡터들 각각의 허수 엘리먼트 'j가 대응하는 입력 라인에 입력되어 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 복수의 부호 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과의 부호를 결정하고, 복수의 가산기 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있다. 복수의 부호 셀렉터들 및 복수의 가산기 셀렉턱들은 도 15에 도시된 실선에 따라 동작할 수 있으므로, 보다 상세한 설명은 생략한다. 도 16을 참조하면, 사원수 기반 MAC 연산의 8번째 사이클에서 연산 장치의 동작이 도시된다. 8번째 사이클에서 는 4차원 중간 연산 벡터들 각각의 허수 엘리먼트 'k가 대응하는 입력 라인에 입력되어 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 복수의 부호 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과의 부호를 결정하고, 복수의 가산기 셀렉터들 각각은 각 출력 라인에서 출력되는 연산 결과를 복수의 가산기들 중 어느 하나로 전달할 수 있다. 복수의 부호 셀렉터들 및 복수의 가산기 셀렉턱들은 도 16에 도시된 실선에 따라 동작할 수 있으므로, 보다 상세한 설명은 생략한다. 복수의 가산기들은 5 내지 8번째 사이클들 동안 가산기 셀렉터들을 통해 전달된 연산 결과들을 부호 셀렉터들을 통해 결정된 부호로 누적해서, 4차원 출력 벡터에 포함되는 출력 엘리먼트들을 결정할 수 있다. 예를 들어, 1 번째 가산기에서 5 내지 8번째 사이클들 동안 누적된 연산 결과는 1번째 출력 벡터의 실수 엘리먼트 RY1로 결정 될 수 있고, 2번째 가산기에서 5 내지 8번째 사이클들 동안 누적된 연산 결과는 1번째 출력 벡터의 허수 엘리먼 트 IY1로 결정될 수 있다. 또한, 3번째 가산기에서 5 내지 8번째 사이클들 동안 누적된 연산 결과는 1번째 출력 벡터의 허수 엘리먼트 JY1로 결정될 수 있고, 4번째 가산기에서 5 내지 8번째 사이클들 동안 누적된 연산 결과는1번째 출력 벡터의 허수 엘리먼트 KY1로 결정될 수 있다. 이처럼 연산 장치의 두 사이클들 동작만으로도 사원수 기반 MAC 연산 결과가 효과적으로 획득될 수 있다. 도 17은 다른 실시예에 따른 사원수 뉴럴 네트워크에 대한 연산 장치의 구조 및 동작을 설명하기 위한 도면이다. 도 17을 참조하면, 3차원 벡터 기반 MAC 연산을 수행하는 연산 장치가 도시된다. 공간 인식과 영상 인식 등 여 러 어플리케이션에서는 3차원 벡터 기반 MAC 연산이 필요한 반면, 사원수 벡터는 4차원이기에 사원수 벡터에서 실수 엘리먼트를 '0'으로 하고, 3개의 허수 엘리먼트들을 이용한 MAC 연산이 수행될 수 있다. 다시 말해, 복수 의 입력 벡터들, 복수의 웨이트 벡터들 및 복수의 출력 벡터들은 실수 엘리먼트가 '0'인 사원수 벡터일 수 있다. 3차원 벡터 기반 MAC 연산을 수행하는 연산 장치는 크로스바 어레이, 복수의 부호 셀렉터들, 복수의 가산기 셀 렉터들 및 복수의 가산기들을 포함할 수 있다. 크로스바 어레이는 복수의 3차원 입력 벡터들이 입력되는 N개의 입력 라인들, 입력 라인들에 교차하는 3M개의 출력 라인들 및 입력 라인과 출력 라인들의 교차점들에 배 치된 N x 3M개의 메모리 셀들을 포함할 수 있다. 3차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들이 대응하는 하나의 기준 입력 라인 및 대응하는 3개의 기준 출력 라인들을 연결시키는 기준 메모리 셀들에 저장될 수 있다. 예를 들어, 웨이트 벡터 W1,1에서 허수 엘 리먼트 IW1,1은 1번째 로우의 입력 라인과 1번째 칼럼의 출력 라인 간 교차점에 배치된 메모리 셀에 저장될 수 있 다. 웨이트 벡터 W1,1에서 허수 엘리먼트 JW1,1은 1번째 로우의 입력 라인과 2번째 칼럼의 출력 라인 간 교차점에 배치된 메모리 셀에 저장될 수 있다. 웨이트 벡터 W1,1에서 허수 엘리먼트 KW1,1은 1번째 로우의 입력 라인과 3번 째 칼럼의 출력 라인 간 교차점에 배치된 메모리 셀에 저장될 수 있다. 다시 말해, 복수의 3차원 웨이트 벡터 들 각각에 포함된 웨이트 엘리먼트들(예: 3개의 허수 엘리먼트들)은 상이한 기준 출력 라인에 연결된 기준 메모 리 셀에 저장될 수 있다. 한편, 복수의 입력 라인들 각각이 하나의 입력 노드에 대응하는 반면, 복수의 출력 라인들 중 3개의 출력 라인 들이 하나의 출력 노드에 대응할 수 있다. 만약 출력 노드들이 M개 있다면, 크로스바 어레이에는 3M개의 출력 라인들이 포함될 수 있다. 하나의 출력 노드에 대응하는 3개의 출력 라인들 중 1번째 출력 라인에 연결 된 메모리 셀들이 해당 출력 노드로 연결되는 웨이트 벡터들의 허수 엘리먼트들 i을 저장할 수 있으며, 2번째 출력 라인에 연결된 메모리 셀들이 해당 출력 노드로 연결되는 웨이트 벡터들의 허수 엘리먼트들 j을 저장할 수 있으며, 3번째 출력 라인에 연결된 메모리 셀들이 해당 출력 노드로 연결되는 웨이트 벡터들의 허수 엘리먼트들 k을 저장할 수 있다. 3개의 출력 라인들의 한 쌍이 하나의 출력 노드에 대응할 수 있다. 복소수 기반 MAC 연산을 수행하는 연산 장치와 달리, 3차원 벡터 기반 MAC 연산을 수행하는 연산 장치는 복수의 부호 셀렉터들 및 복수의 가산기 셀렉터들을 포함할 수 있다. 각 출력 라인에서 출력된 연산 결과는 대 응하는 부호 셀렉터에 의해 + 또는 - 부호가 결정되고, 대응하는 가산기 셀렉터에 의해 복수의 가산기들 중 어 느 하나로 전달될 수 있다. 복수의 부호 셀렉터들 각각은 제어 신호 CONJ_ON(conjunction on)에 의해 출력 라인에서 출력되는 연산 결과의 부호를 결정할 수 있다. 예를 들어, 제어 신호가 \"0\"(또는, low)이면 부호를 +로 결정하고, 제어 신호가 \"1\" (또는, high)이면 부호를 -으로 결정할 수 있으나, 실시예에 따라 부호를 반대로 결정할 수도 있다. 제어 신호 는 해당 사이클에서 수행되는 연산에 웨이트 벡터 및 켤레 웨이트 벡터 중 어느 것이 적용되는지 여부 및 해당 출력 라인에서 수행되는 곱셈이 어떤 벡터 엘리먼트들 간의 곱셈인지 여부(예: 허수 엘리먼트 i와 허수 엘리먼 트 i 간 곱셈인지 여부)에 기초하여 결정될 수 있다. 복수의 가산기 셀렉터들 각각은 제어 신호들 I_ON, J_ON, K_ON에 의해 복수의 가산기들 중 해당 출력 라인에서 출력된 연산 결과를 전달할 어느 하나를 결정할 수 있다. 제어 신호 I_ON은 해당 사이클에 입력되는 입력 엘리 먼트가 허수 엘리먼트 i인 경우 \"1\"이고, 반대의 경우에는 \"0\"일 수 있다. 제어 신호 J_ON은 해당 사이클에 입 력되는 입력 엘리먼트가 허수 엘리먼트 j인 경우 \"1\"이고, 반대의 경우에는 \"0\"일 수 있다. 제어 신호 K_ON은 해당 사이클에 입력되는 입력 엘리먼트가 허수 엘리먼트 k인 경우 \"1\"이고, 반대의 경우에는 \"0\"일 수 있다. 실수 엘리먼트가 '0'인 사원수를 이용한 3차원 벡터 기반 MAC 연산은 아래의 수학식 5로 표현될 수 있다. 수학식 5"}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "위의 수학식 5에서, WNM은 웨이트 벡터를 나타내고, XN은 입력 벡터를 나타내며, W-1 NM은 켤레 웨이트 벡터를 나타 내며, 은 해밀턴 곱(Hamilton product)을 나타낸다. 위의 수학식 5에서 웨이트 벡터와 입력 벡터 간 곱셈 연산인 은 아래의 수학식 6으로 표현될 수 있다. 수학식 6"}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "위의 수학식 6으로 표현되는 웨이트 벡터와 입력 벡터 간 곱셈 연산은 1 내지 3번째 사이클들을 동안 연산 장치 에서 수행될 수 있다. 1번째 사이클에서는 3차원 입력 벡터들 각각의 허수 엘리먼트 i가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 3차원 입력 벡터의 허수 엘리먼트들 i는 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 예를 들어, 1번째 로우의 입력 라인에 입력된 1번째 입력 벡터의 허수 엘리먼트 IX1는 1번째 로우의 입력 라인에 연결된 복수의 메모리 셀들에 저장된 웨이트 엘리먼트들 IW11, JW11, KW11, ..., IW1M, JW1M, KW1M과 각각 곱해질 수 있다. 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 6에서 IWNM·IXN에 해당하고, 대응하는 부호 셀 렉터에 의해 - 부호가 적용될 수 있다. 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 6에서 JWNM·IXN에 해당하고, 대응하는 부호 셀렉터에 의해 - 부호가 적용될 수 있다. 3번째 칼럼의 출력 라인에서 출 력되는 연산 결과는 수학식 6에서 KWNM·IXN에 해당하고, 대응하는 부호 셀렉터에 의해 + 부호가 적용될 수 있다. 2번째 사이클에서는 3차원 입력 벡터들 각각의 허수 엘리먼트 j가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 3차원 입력 벡터의 허수 엘리먼트들 j는 메모리 셀들에 저장된 웨이트 엘리먼트들에 곱해질 수 있다. 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 6에서 IWNM·JXN에 해당하고, 대응하는 부호 셀 렉터에 의해 + 부호가 적용될 수 있다. 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 6에서 JWNM·JXN에 해당하고, 대응하는 부호 셀렉터에 의해 - 부호가 적용될 수 있다. 3번째 칼럼의 출력 라인에서 출 력되는 연산 결과는 수학식 6에서 KWNM·JXN에 해당하고, 대응하는 부호 셀렉터에 의해 - 부호가 적용될 수 있다. 3번째 사이클에서는 3차원 입력 벡터들 각각의 허수 엘리먼트 k가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 3차원 입력 벡터의 허수 엘리먼트들 k는 메모리 셀들에 저장된 웨이트 엘리먼트들에곱해질 수 있다. 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 6에서 IWNM·KXN에 해당하고, 대응하는 부호 셀 렉터에 의해 - 부호가 적용될 수 있다. 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 6에서 JWNM·KXN에 해당하고, 대응하는 부호 셀렉터에 의해 + 부호가 적용될 수 있다. 3번째 칼럼의 출력 라인에서 출 력되는 연산 결과는 수학식 6에서 KWNM·KXN에 해당하고, 대응하는 부호 셀렉터에 의해 - 부호가 적용될 수 있다. 1 내지 3번째 사이클들 동안 각 가산기에서 누적된 값이 중간 연산 엘리먼트로서 중간 연산 벡터에 포함될 수 있다. 수학식 6에서 확인할 수 있듯이, 중간 연산 벡터는 1개의 실수 엘리먼트와 3개의 허수 엘리먼트들을 포 함한 4차원 벡터일 수 있다. 중간 연산 벡터의 실수 엘리먼트는 R＊ YM으로, 허수 엘리먼트 i는 I＊ YM으로, 허수 엘리먼트 j는 J＊ YM으로, 허수 엘리먼트 k는 K＊ YM으로 나타낼 수 있다. 중간 연산 벡터와 켤레 웨이트 벡터 간 곱셈 연산은 아래의 수학식 7로 표현될 수 있다. 수학식 7"}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "위의 수학식 7로 표현되는 중간 연산 벡터와 켤레 웨이트 벡터 간 곱셈 연산은 4 내지 7번째 사이클들을 동안 연산 장치에서 수행될 수 있다. 4차원 중간 연산 벡터들 각각에 포함된 중간 연산 엘리먼트들은 4 내지 7번째 사이클들 동안 순차적으로 입력 라인들에 입력될 수 있다. 4번째 사이클에서는 4차원 중간 연산 벡터들 각각의 실수 엘리먼트가 대응하는 입력 라인에 입력될 수 있 다. 입력 라인들에 입력된 각 4차원 입력 벡터의 실수 엘리먼트들은 메모리 셀들에 저장된 웨이트 엘리먼트들 에 곱해질 수 있다. 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 7에서 R＊ YM·IWNM에 해당하고, 대응하는 부호 셀 렉터에 의해 - 부호가 적용될 수 있다. 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 7에서 R＊ YM·JWNM에 해당하고, 대응하는 부호 셀렉터에 의해 - 부호가 적용될 수 있다. 3번째 칼럼의 출력 라인에서 출 력되는 연산 결과는 수학식 6에서 R＊ YM·KWNM에 해당하고, 대응하는 부호 셀렉터에 의해 - 부호가 적용될 수 있다. 5번째 사이클에서는 4차원 중간 연산 벡터들 각각의 허수 엘리먼트 i가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 4차원 입력 벡터의 허수 엘리먼트들 i는 메모리 셀들에 저장된 웨이트 엘리먼 트들에 곱해질 수 있다. 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 7에서 I＊ YM·JWNM에 해당하고, 대응하는 부호 셀 렉터에 의해 - 부호가 적용될 수 있다. 3번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 6에서 I＊ YM·KWNM 에 해당하고, 대응하는 부호 셀렉터에 의해 + 부호가 적용될 수 있다. 6번째 사이클에서는 4차원 중간 연산 벡터들 각각의 허수 엘리먼트 j가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 4차원 입력 벡터의 허수 엘리먼트들 j는 메모리 셀들에 저장된 웨이트 엘리먼 트들에 곱해질 수 있다. 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 7에서 J＊ YM·IWNM에 해당하고, 대응하는 부호 셀 렉터에 의해 + 부호가 적용될 수 있다. 3번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 6에서 J＊ YM·KWNM에 해당하고, 대응하는 부호 셀렉터에 의해 - 부호가 적용될 수 있다. 7번째 사이클에서는 4차원 중간 연산 벡터들 각각의 허수 엘리먼트 k가 대응하는 입력 라인에 입력될 수 있다. 입력 라인들에 입력된 각 4차원 입력 벡터의 허수 엘리먼트들 k는 메모리 셀들에 저장된 웨이트 엘리먼 트들에 곱해질 수 있다. 1번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 7에서 K＊ YM·IWNM에 해당하고, 대응하는 부호 셀 렉터에 의해 - 부호가 적용될 수 있다. 2번째 칼럼의 출력 라인에서 출력되는 연산 결과는 수학식 7에서 K＊ YM·JWNM에 해당하고, 대응하는 부호 셀렉터에 의해 + 부호가 적용될 수 있다. 4 내지 7번째 사이클들 동안 각 가산기에서 누적된 값이 출력 엘리먼트로서 출력 벡터에 포함될 수 있다. 수학 식 7에서 확인할 수 있듯이, 출력 벡터는 3개의 허수 엘리먼트들을 포함한 3차원 벡터일 수 있다. 출력 벡터의 허수 엘리먼트 i는 IYM으로, 허수 엘리먼트 j는 JYM으로, 허수 엘리먼트 k는 KYM으로 나타낼 수 있다. 한편, 복소수 기반 MAC 연산, 사원수 기반 MAC 연산을 앞서 설명한 연산 장치에서 수행하면 웨이트 벡터를 저장 하는 메모리 셀들의 개수가 RVNN 대비 2 내지 4배 증가하므로, 면적 효율이 좋지 않다고 여길 수 있다. 하지만, CVNN 기반 뉴럴 네트워크 모델은 RVNN 기반 뉴럴 네트워크 모델 대비 노드 개수를 1/2로 줄일 수 있고, 이로 인한 웨이트 개수는 1/4로 줄어들 수 있다. 다시 말해, RVNN 기반 뉴럴 네트워크 모델이 N개의 1차원 웨 이트를 이용하였다면, CVNN 기반 뉴럴 네트워크 모델은 N/4개의 2차원 웨이트를 이용하며, 하나의 2차원 웨이트 를 2개의 메모리 셀들에 저장하더라도, 크로스바 어레이 면적은 오히려 RVNN 대비 1/2로 줄어들 수 있다. 또한, QNN 기반 뉴럴 네트워크 모델은 RVNN 기반 뉴럴 네트워크 모델 대비 노드 개수를 1/4로 줄일 수 있고, 이 로 인한 웨이트 개수는 1/16으로 줄어들 수 있다. 다시 말해, RVNN 기반 뉴럴 네트워크 모델이 N개의 1차원 웨 이트를 이용하였다면, CVNN 기반 뉴럴 네트워크 모델은 N/16개의 4차원 웨이트를 이용하며, 하나의 4차원 웨이 트를 4개의 메모리 셀들에 저장하더라도, 크로스바 어레이 면적은 오히려 RVNN 대비 1/4로 줄어들 수 있다. 도 18은 일 실시예에 따른 연산 장치의 동작 방법을 나타낸 도면이다. 단계에서, 연산 장치는 복수의 다차원 입력 벡터들 각각에 포함된 입력 엘리먼트를 복수의 입력 라인들에 입력한다. 연산 장치는 각 다차원 입력 벡터에 포함된 복수의 입력 엘리먼트들을 동일한 기준 입력 라인에 사 이클들 동안 순차적으로 입력할 수 있다. 단계에서, 연산 장치는 복수의 셀렉터들을 통해, 복수의 입력 라인들에 교차하는 복수의 출력 라인들 각 각에서 출력되는 값을 복수의 가산기들 중 어느 하나로 전달한다. 연산 장치는 복수의 셀렉터들 중 기준 출력 라인들에 대응하는 기준 셀렉터들을 통해, 기준 출력 라인들 각각에서 출력되는 값을 다차원 출력 벡터들 각각 의 출력 엘리먼트들로 구분하여 상이한 기준 가산기들로 전달할 수 있다. 단계에서, 연산 장치는 복수의 가산기들을 통해, 복수의 셀렉터들로부터 전달되는 값들을 미리 정해진 개 수의 사이클들 동안 누적한다. 사이클들의 개수는 복수의 다차원 입력 벡터들 각각에 포함된 입력 엘리먼트들 의 개수와 동일할 수 있다. 다차원 벡터 뉴럴 네트워크에 적용되는 복수의 다차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들은 대응 하는 하나의 기준 입력 라인 및 대응하는 둘 이상의 기준 출력 라인들을 연결시키는 기준 메모리 셀들에 저장될 수 있다. 복수의 다차원 웨이트 벡터들 각각에 포함된 웨이트 엘리먼트들 중 어느 하나는 다른 하나와 상이한 기준 출력 라인에 연결된 기준 메모리 셀에 저장될 수 있다. 기준 출력 라인들에 대응하는 기준 가산기들 각각에 누적된 값에 기초하여 복수의 다차원 출력 벡터들 각각에 포함된 출력 엘리먼트들이 결정될 수 있다. 복수의 출력 라인들의 개수는 다차원 웨이트 벡터들의 개수 및 다차원 웨이트 벡터들 각각에 포함된 가중치 엘 리먼트들의 개수에 기초하여 결정될 수 있다. 도 18에 도시된 각 단계들에는 도 1 내지 도 17을 통하여 전술한 사항들이 그대로 적용되므로, 보다 상세한 설 명은 생략한다. 도 19는 일 실시예에 따른 전자 장치를 나타낸 도면이다. 도 19를 참조하면, 전자 장치는 프로세서, 메모리, 연산 장치, 저장 장치, 입 력 장치, 출력 장치 및 네트워크 인터페이스를 포함할 수 있으며, 이들은 통신 버스를 통해 서로 통신할 수 있다. 예를 들어, 전자 장치는 이동 전화, 스마트 폰, PDA, 넷북, 태블릿 컴퓨터, 랩톱 컴퓨터 등과 같은 모바일 장치, 스마트 워치, 스마트 밴드, 스마트 안경 등과 같은 웨어러블 디바이스, 데 스크탑, 서버 등과 같은 컴퓨팅 장치, 텔레비전, 스마트 텔레비전, 냉장고 등과 같은 가전 제품, 도어 락 등과 같은 보안 장치, 자율주행 차량, 스마트 차량 등과 같은 차량의 적어도 일부로 구현될 수 있다. 전자 장치 는 연산 장치를 통해 앞서 설명한 다차원 벡터 기반 MAC 연산을 수행할 수 있다. 프로세서는 전자 장치 내에서 실행하기 위한 기능 및 명령어들을 실행한다. 예를 들어, 프로세서 는 메모리 또는 저장 장치에 저장된 명령어들을 처리할 수 있다. 프로세서는 도 1 내 지 도 18를 통하여 설명된 하나 이상의 동작을 수행할 수 있다. 메모리는 컴퓨터 판독가능한 저장 매체 또는 컴퓨터 판독가능한 저장 장치를 포함할 수 있다. 메모리는 프로세서에 의해 실행하기 위한 명령어들을 저장할 수 있고, 전자 장치에 의해 소프트웨어 및/또는 애플리케이션이 실행되는 동안 관련 정보를 저장할 수 있다. 저장 장치는 메모리보다 더 많은 양의 정보를 저장하고, 정보를 장기간 저장할 수 있다. 예를 들 어, 저장 장치는 자기 하드 디스크, 광 디스크, 플래쉬 메모리, 플로피 디스크 또는 이 기술 분야에서 알 려진 다른 형태의 비휘발성 메모리를 포함할 수 있다. 입력 장치는 키보드 및 마우스를 통한 전통적인 입력 방식, 및 터치 입력, 음성 입력, 및 이미지 입력과 같은 새로운 입력 방식을 통해 사용자로부터 입력을 수신할 수 있다. 예를 들어, 입력 장치는 키보드, 마우스, 터치 스크린, 마이크로폰, 또는 사용자로부터 입력을 검출하고, 검출된 입력을 전자 장치에 전달 할 수 있는 임의의 다른 장치를 포함할 수 있다. 출력 장치는 시각적, 청각적 또는 촉각적인 채널을 통 해 사용자에게 전자 장치의 출력을 제공할 수 있다. 출력 장치는 예를 들어, 디스플레이, 터치 스 크린, 스피커, 진동 발생 장치 또는 사용자에게 출력을 제공할 수 있는 임의의 다른 장치를 포함할 수 있다. 네트워크 인터페이스는 유선 또는 무선 네트워크를 통해 외부 장치와 통신할 수 있다. 이상에서 설명된 실시예들은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨 어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치, 방법 및 구성요소는, 예를 들 어, 프로세서, 콘트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마 이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령(instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 소프트웨어 애플리 케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처 리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경우도 있지만,"}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하 나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치, 또는 전송되는 신호 파(signal wave)에 영구적으로, 또는 일시적으로 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터는 컴퓨터 판독 가능 기록 매체에 저장될 수 있다.실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단 독으로 또는 조합하여 저장할 수 있으며 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계되고 구 성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD-ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다. 위에서 설명한 하드웨어 장치는 실시예의 동작을 수행하기 위해 하나 또는 복수의 소프트웨어 모듈로서 작동하 도록 구성될 수 있으며, 그 역도 마찬가지이다."}
{"patent_id": "10-2021-0060126", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "이상과 같이 실시예들이 비록 한정된 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가진 자라면 이를 기초로 다양한 기술적 수정 및 변형을 적용할 수 있다. 예를 들어, 설명된 기술들이 설명된 방법과 다른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한 다."}
{"patent_id": "10-2021-0060126", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1 은 일 실시예에 따른 뉴럴 네트워크의 아키텍처를 설명하기 위한 도면이다. 도 2 는 일 실시예에 따른 뉴럴 네트워크에서 수행되는 연산을 설명하기 위한 도면이다. 도 3 은 일 실시예에 따른 인 메모리 컴퓨팅(In-memory computing) 회로를 나타내는 도면이다. 도 4는 일 실시예에 따라 복소수 뉴럴 네트워크에서 수행되는 연산을 설명하기 위한 도면이다. 도 5 내지 도 7은 일 실시예에 따른 복소수 뉴럴 네트워크에 대한 연산 장치의 구조 및 동작을 설명하기 위한 도면이다. 도 8은 일 실시예에 따라 사원수 뉴럴 네트워크에서 수행되는 연산을 설명하기 위한 도면이다. 도 9 내지 도 16은 일 실시예에 따른 사원수 뉴럴 네트워크에 대한 연산 장치의 구조 및 동작을 설명하기 위한 도면이다. 도 17은 다른 실시예에 따른 사원수 뉴럴 네트워크에 대한 연산 장치의 구조 및 동작을 설명하기 위한 도면이다. 도 18은 일 실시예에 따른 연산 장치의 동작 방법을 나타낸 도면이다."}
