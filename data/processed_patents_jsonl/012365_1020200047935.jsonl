{"patent_id": "10-2020-0047935", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0129876", "출원번호": "10-2020-0047935", "발명의 명칭": "데이터 상호 호환 방법 및 데이터 상호 호환 시스템", "출원인": "한양대학교 산학협력단", "발명자": "신승준"}}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "PMML(Predictive Model Markup Language)로 표현되는 데이터 마이닝 모델에서 PMML 스키마를 수신하는 단계; 미리 정해진 매핑 규칙에 따라 상기 PMML 스키마와 OPC UA 어드레스 스페이스 모델을 매핑하는 단계; 및상기 매핑 결과에 기초하여 OPC UA 정보 모델을 생성하는 단계;를 포함하는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 OPC UA 정보 모델을 생성하는 단계는,회귀 모형 정보 모델 또는 인공 신경망 정보 모델을 이용하여 OPC UA 정보 기초 모델 및 상세 모델을 생성하는단계를 포함하는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 OPC UA 정보 모델을 기초로 XML 형식의 OPC UA 스키마를 생성하고 상기 OPC UA 스키마를 기초로 프로그래밍 언어 형태의 클래스 코드 및 패키지를 생성하는 단계;를 더 포함하는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 OPC UA 정보 모델, OPC UA 스키마 및 OPC UA 클래스 코드를 서버에 저장하는 단계;를 더 포함하는 데이터상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,사용자로부터 입력되거나 외부 서버로부터 수신한 PMML 정보를 기초로 Java 클래스 인스턴스(Instance)를 생성하고, 생성된 Java 클래스 인스턴스와 상기 OPC UA클래스 코드를 이용하여 OPC UA 인스턴스를 생성하는 단계;를 더 포함하는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 매핑 규칙은,카테고리를 오브젝트(Object), 변수(Variable), 데이터 종류(Data Type), 레퍼런스(Reference) 및 모델링 규칙(Modeling Rule)으로 분류한 후, 이를 기초로 PMML의 스키마와 OPC UA 어드레스 스페이스 모델을 매핑하는 것을특징으로 하는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 매핑 규칙은,상기 PMML 스키마의 요소(Element)의 상기 OPC UA의 객체 타입(Object type)으로 매핑되고, 상기 PMML 스키마의 다큐먼트(Document)는 상기 OPC UA의 다큐먼트 타입(Document type)으로 매핑되며,공개특허 10-2021-0129876-3- 상기 PMML 모델 요소(Model element)는 상기 OPC UA의 모델 객체 타입(Model element type)으로 매핑되는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 매핑 규칙은,상기 PMML 스키마의 속성(Attribute)은 상기 OPC UA의 변수 타입(variable type)의 데이터 변수(Datavariable) 또는 특성(Property)으로 매핑되며,상기 PMML 스키마의 속성 타입(Attribute type)은 상기 OPC UA의 빌트 인 데이터 타입(Built-in data type) 또는 사용자 정의 데이터 타입(User-defined data type)으로 매핑되는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제6항에 있어서,상기 매핑 규칙은,상기 PMML 스키마의 참조(Reference)는 상기 OPC UA의 참조 타입(Reference type)의 하위 타입(hasSubtype),컴포넌트 타입 (hasComponent), 특성타입(hasProperty) 또는 타입정의(hasTypeDefinition) 참조 타입으로 매핑되는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제6항에 있어서,상기 매핑 규칙은,상기 PMML 스키마의 속성(Attribute)값이 존재해야 하는 경우 상기 OPC UA의 필수(Mandatory) 속성으로, 상기PMML 스키마의 속성(Attribute)값이 필수적이지 않은 경우 상기 OPC UA의 선택(Optional) 속성으로, 상기 PMML스키마의 복수 개의 속성(Attribute)값이 존재 하는 경우 상기 OPC UA의 플레이스 홀더(Placeholder) 속성으로매핑되는 데이터 상호 호환 방법."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "이기종 표준 간의 데이터를 상호 호환 시키는 시스템에 있어서,PMML(Predictive Model Markup Language)로 표현되는 데이터 마이닝 모델에서 PMML 스키마를 수신하는 스키마수신부;미리 정해진 매핑 규칙에 따라 상기 PMML 스키마와 OPC UA 어드레스 스페이스 모델을 매핑한 후, 매핑 결과에기초하여 OPC UA 정보 모델을 생성하는 OPC UA 정보 모델 생성부; 및상기 OPC UA 스키마를 기초로 프로그래밍 언어 형태의 클래스 코드 및 패키지를 생성하는 OPC UA 클래스 코드생성부;를 포함하는 모델링부와외부 서버 또는 사용자로부터 PMML 정보를 수신하는 통신부;상기 PMML 정보를 기초로 Java 클래스 인스턴스(Instance)를 생성하고, 생성된 Java 클래스 인스턴스와 상기OPC UA클래스 코드를 이용하여 OPC UA 인스턴스를 생성하는 제어부; 및 상기 OPC UA 정보 모델, OPC UA 스키마 및 OPC UA 클래스 코드가 저장되는 저장부;를 포함하는 데이터 상호 호환 시스템."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 OPC UA 정보 모델 생성부는,회귀 모형 정보 모델 또는 인공 신경망 정보 모델을 이용하여 OPC UA 정보 기초 모델 및 상세 모델을 생성하는공개특허 10-2021-0129876-4-데이터 상호 호환 시스템."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서,상기 OPC UA 정보 모델 생성부는,상기 OPC UA 정보 모델을 기초로 XML 형식의 OPC UA 스키마를 생성하고 상기 OPC UA 스키마를 기초로 프로그래밍 언어 형태의 클래스 코드 및 패키지를 생성하는 데이터 상호 호환 시스템."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 매핑 규칙은,카테고리를 오브젝트(Object), 변수(Variable), 데이터 종류(Data Type), 레퍼런스(Reference) 및 모델링 규칙(Modeling Rule)으로 분류한 후, 이를 기초로 PMML의 스키마와 OPC UA 어드레스 스페이스 모델을 매핑하는 것을특징으로 하는 데이터 상호 호환 시스템."}
{"patent_id": "10-2020-0047935", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서,상기 매핑 규칙은,상기 PMML 스키마의 요소(Element)의 상기 OPC UA의 객체 타입(Object type)으로 매핑되고, 상기 PMML 스키마의 다큐먼트(Document)는 상기 OPC UA의 다큐먼트 타입(Document type)으로 매핑되며, 상기 PMML 모델 요소(Model element)는 상기 OPC UA의 모델 객체 타입(Model element type)으로 매핑되며,상기 PMML 스키마의 속성(Attribute)은 상기 OPC UA의 변수 타입(variable type)의 데이터 변수(Datavariable) 또는 특성(Property)으로 매핑되며,상기 PMML 스키마의 속성 타입(Attribute type)은 상기 OPC UA의 빌트 인 데이터 타입(Built-in data type) 또는 사용자 정의 데이터 타입(User-defined data type)으로 매핑되며,상기 PMML 스키마의 참조(Reference)는 상기 OPC UA의 참조 타입(Reference type)의 하위 타입(hasSubtype),컴포넌트 타입 (hasComponent), 특성타입(hasProperty) 또는 타입정의(hasTypeDefinition) 참조 타입으로 매핑되는 데이터 상호 호환 시스템."}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예에 따른 데이터 상호 호환 방법은 PMML(Predictive Model Markup Language)로 표현되는 데이터 마이닝 모델에서 PMML 스키마를 수신하는 단계, 미리 정해진 매핑 규칙에 따라 상기 PMML 스키마와 OPC UA 어드레스 스 페이스 모델을 매핑하는 단계 및 상기 매핑 결과에 기초하여 OPC UA 정보 모델을 생성하는 단계를 포함할 수 있 다."}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 데이터 상호 호환 방법 및 데이터 상호 호환 시스템에 관한 발명으로서, 보다 상세하게는 PMML형태의 데이터 마이닝 모형을 OPC UA 규격을 준수하는 데이터 모형으로 변환하는 기술에 관한 발명이다."}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 기술이 발전함에 따라 빅데이터, 데이터 애널리틱스, 인공지능, 사이버-물리 시스템 등이 융합된 스마트 공장에 대한 연구가 많이 이루어지고 있다. 스마트 공장이란 설계·개발, 제조 및 유통·물류 등 생산 과정에 디지털 자동화 솔루션이 결합된 정보통신기술 (ICT)을 적용하여 생산성, 품질, 고객 만족도를 향상시키는 지능형 생산 공장을 의미한다. 스마트 공장은 세계 제조 강국의 제조 경쟁력 강화를 위한 범국가적인 전략이자 구현물로 자리매김하고 있는 실정이다. 스마트 공장을 효율적으로 작동시키기 위해서 추구하는 방향은 스마트 공장의 제조 지능화(manufacturing intelligence)이다. 제조 지능화란 제조 시스템의 데이터 기반 지식과 통찰력을 통하여 제조 시스템에 의한 자 동화, 자율화 및 협업화를 도모함으로써 제조 시스템을 위한 생산성과 역동성에 대한 최적화를 달성하는 것을의미한다. 이러한 제조 지능화는 기존 사람의 경험이나 패턴에 의존하던 방식이 아닌 데이터를 기초로 한 의사 결정에 근 간한다. 따라서, 데이터가 이기종 시스템간에서도 제약 없이 서로 호환되어 사용될 수 있는 데이터 상호 운용성 (data interoperability)에 대한 보장은 스마크 공장의 제조 지능화를 위한 선제 조건이라 할 수 있다. 따라서, 최근 산업 분야에서는 이러한 상호 운용성을 높이기 위한 많은 기술들이 개발되고 있으며, 그 중 Open Platform Communications Unified Architecture (OPC UA)가 주목받고 있다. OPC UA는 International Electrotechnical Commission (IEC) 62541로 표준화된 기술로서, 이기종 시스템 및 기 기간 규격화된 메시지 교환 방식을 통하여 데이터 교환을 가능하게 해주는 플랫폼이다 OPC UA는 제조 시스템 구성계층간의 정보 모델 및 교환 방식을 단일화함으로써, 기존 이기종 기기간의 블랙박스 화 및 제조 시스템의 구성계층별 데이터간의 괴리로 인했던 데이터 교환 단절 문제를 해결하고 있다. 이처럼 OPC UA가 강력한 데이터 인터페이스로 자리매김하고 산업계로 확산되는 원동력은 OPC UA의 확장성 (extensibility)에 기인한다. OPC UA 규격에서는 제조 데이터의 접근, 알람 등 필수적인 정보 모델을 포함하되, 확장성을 감안한 정보 모델링 방법 및 정보 교환 방법들을 제공할 수 있다. 즉, 확정되고 고정적인 정보 모델을 제공하는 것 보다는, 다양한 정보 모델들의 개발을 위한 방법 및 규약들을 제공하는 것이 OPC UA의 목표이자 접근법이다. 따라서 OPC UA는 이러한 방식을 통하여 다른 컨소시엄들과 협력하여 도메인 특화된 협력 규격(companion specifications)을 개발 및 발간함으로써 다양한 산업분야로 확산시키는 전략을 취하고 있다. 한편, 제조 지능화를 위해서 데이터 상호 운용성 뿐만 아니라, 정보 모델 간의 호환이 가능한 모델 상호 운용성 (model interoperability) 또한 보장이 되어야 한다. 여기서 모델이라 함은 데이터를 이용하여 생성된 데이터 마이닝 모형 혹은 데이터 애널리틱스 모형을 표현하는 내용과 메타정보(ID, 생성처, 생성방법, 생성시간 등)을 포함한 데이터 애널리틱스 모델을 의미한다. 참고로, 정보 모델(information model)은 데이터 애널리틱스 모델 을 표현하기 위해 포함되어야 하는 데이터 내용, 형태와 관계에 대한 구조를 명시한 것이다. 제조 지능화에서의 의사결정은 제조 시스템 구성요소(제조설비, 제공품 및 어플리케이션 등)들이 데이터를 이용 하여 생성된 데이터 마이닝 모형 혹은 데이터 애널리틱스 모형(모니터링, 진단, 예측 및 최적화를 위한 수학적 ·실증적 모델)을 통해서 이루어진다. 그러므로, 데이터 마이닝 모형은 데이터와 마찬가지로, 어느 시스템 및 기기에서 언제 어디서나 생성, 사용, 교환 및 공유가 가능해야 한다. 그러나, 모델의 상호운용성을 위한 데이터 마이닝 모형의 교환 방법을 규정하는 OPC UA 규격 또는 협력 규격은 대한 연구는 미미한 실정이며, 다양한 산업 분야에서 활용되고 있는 XML 기반의 언어인 PMML(Predictive Model Markup Language)과 OPC UA 데이터 마이닝 모형과의 교환 방법에 대한 연구는 아직 개발된 바가 없다. 선행기술문헌 특허문헌 (특허문헌 0001) 대한민국 공개특허 10-2014-0115809"}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "따라서, 일 실시예에 따른 데이터 상호 호환 방법 및 데이터 상호 호환 시스템은 상기 설명한 문제점을 해결하 기 위해 고안된 발명으로서, 데이터 마이닝 모형을 OPC UA 규격을 준수하는 데이터 모형으로 변환하는 방법 및 정보 모델 구조를 제공하는데 그 목적이 있다. 구체적으로, 데이터 애널리틱스 표현 모델의 표준 중 하나인 Predictive Modeling Markup Language(PMML)을 OPC UA와 호환가능하도록 정보 모델을 개발하는 것으로서, PMML을 OPC UA 규격으로 변환하기 위한 매핑 규칙과 정보 모델을 설계하고, 이를 기초로 PMML의 회귀 모형(regression model) 및 인공신경망 모형(neural network model)에 대한 상세 정보 모델을 설계하는 것에 목적이 있다."}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 데이터 상호 호환 방법은 PMML(Predictive Model Markup Language)로 표현되는 데이터 마이 닝 모델에서 PMML 스키마를 수신하는 단계, 미리 정해진 매핑 규칙에 따라 상기 PMML 스키마와 OPC UA 어드레스 스페이스 모델을 매핑하는 단계 및 상기 매핑 결과에 기초하여 OPC UA 정보 모델을 생성하는 단계를 포함할 수 있다. 상기 OPC UA 정보 모델을 생성하는 단계는, 회귀 모형 정보 모델 또는 인공 신경망 정보 모델을 이용하여 OPC UA 정보 기초 모델 및 상세 모델을 생성하는 단계를 포함할 수 있다. 상기 데이터 상호 호환 방법은 상기 OPC UA 정보 모델을 기초로 XML 형식의 OPC UA 스키마를 생성하고 상기 OPC UA 스키마를 기초로 프로그래밍 언어 형태의 클래스 코드 및 패키지를 생성하는 단계를 더 포함할 수 있다. 상기 데이터 상호 호환 방법은 상기 OPC UA 정보 모델, OPC UA 스키마 및 OPC UA 클래스 코드를 서버에 저장하 는 단계를 더 포함할 수 있다. 상기 데이터 상호 호환 방법은 상기 사용자로부터 입력되거나 외부 서버로부터 수신한 PMML 정보를 기초로 Java 클래스 인스턴스(Instance)를 생성하고, 생성된 Java 클래스 인스턴스와 상기 OPC UA클래스 코드를 이용하여 OPC UA 인스턴스를 생성하는 단계를 더 포함하는 데이터 상호 호환 방법. 상기 매핑 규칙은, 카테고리를 오브젝트(Object), 변수(Variable), 데이터 종류(Data Type), 레퍼런스 (Reference) 및 모델링 규칙(Modeling Rule)으로 분류한 후, 이를 기초로 PMML의 스키마와 OPC UA 어드레스 스 페이스 모델을 매핑하는 것을 특징으로 할 수 있다. 상기 매핑 규칙은, 상기 PMML 스키마의 요소(Element)의 상기 OPC UA의 객체 타입(Object type)으로 매핑되고, 상기 PMML 스키마의 다큐먼트(Document)는 상기 OPC UA의 다큐먼트 타입(Document type)으로 매핑되며, 상기 PMML 모델 요소(Model element)는 상기 OPC UA의 모델 객체 타입(Model element type)으로 매핑될 수 있다. 상기 매핑 규칙은, 상기 PMML 스키마의 속성(Attribute)은 상기 OPC UA의 변수 타입(variable type)의 데이터 변수(Data variable) 또는 특성(Property)으로 매핑되며, 상기 PMML 스키마의 속성 타입(Attribute type)은 상 기 OPC UA의 빌트 인 데이터 타입(Built-in data type) 또는 사용자 정의 데이터 타입(User-defined data type)으로 매핑될 수 있다. 상기 매핑 규칙은, 상기 PMML 스키마의 리퍼런스(Referenc)는 상기 OPC UA의 참조 타입(Reference type)의 하 위 타입(hasSubtype), 컴포넌트 타입 (hasComponent), 특성타입(hasProperty) 또는 타입정의 (hasTypeDefinition) 참조 타입으로 매핑될 수 있다. 상기 매핑 규칙은, 상기 PMML 스키마의 속성(Attribute)값이 존재해야 하는 경우 상기 OPC UA의 필수 (Mandatory) 속성으로, 상기 PMML 스키마의 속성(Attribute)값이 필수적이지 않은 경우 상기 OPC UA의 선택 (Optional) 속성으로, 상기 PMML 스키마의 복수 개의 속성(Attribute)값이 존재 하는 경우 상기 OPC UA의 플레 이스 홀더(Placeholder) 속성으로 매핑될 수 있다. 다른 실시예에 따른 이기종 표준 간의 데이터를 상호 호환 시키는 시스템은 PMML(Predictive Model Markup Language)로 표현되는 데이터 마이닝 모델에서 PMML 스키마를 수신하는 스키마 수신부, 미리 정해진 매핑 규칙 에 따라 상기 PMML 스키마와 OPC UA 어드레스 스페이스 모델을 매핑한 후, 매핑 결과에 기초하여 OPC UA 정보 모델을 생성하는 OPC UA 정보 모델 생성부 및 상기 OPC UA 스키마를 기초로 프로그래밍 언어 형태의 클래스 코 드 및 패키지를 생성하는 OPC UA 클래스 코드 생성부를 포함하는 모델링부와 외부 서버 또는 사용자로부터 PMML 정보를 수신하는 통신부, 상기 PMML 정보를 기초로 Java 클래스 인스턴스(Instance)를 생성하고, 생성된 Java 클래스 인스턴스와 상기 OPC UA클래스 코드를 이용하여 OPC UA 인스턴스를 생성하는 제어부 및 상기 OPC UA 정 보 모델, OPC UA 스키마 및 OPC UA 클래스 코드가 저장되는 저장부를 포함할 수 있다. 상기 OPC UA 정보 모델 생성부는, 회귀 모형 정보 모델 또는 인공 신경망 정보 모델을 이용하여 OPC UA 정보 기 초 모델 및 상세 모델을 생성할 수 있다. 상기 OPC UA 정보 모델 생성부는, 상기 OPC UA 정보 모델을 기초로 XML 형식의 OPC UA 스키마를 생성하고 상기 OPC UA 스키마를 기초로 프로그래밍 언어 형태의 클래스 코드 및 패키지를 생성할 수 있다. 상기 매핑 규칙은, 카테고리를 오브젝트(Object), 변수(Variable), 데이터 종류(Data Type), 레퍼런스 (Reference) 및 모델링 규칙(Modeling Rule)으로 분류한 후, 이를 기초로 PMML의 스키마와 OPC UA 어드레스 스 페이스 모델을 매핑하는 것을 특징으로 할 수 있다. 상기 매핑 규칙은 상기 PMML 스키마의 요소(Element)의 상기 OPC UA의 객체 타입(Object type)으로 매핑되고, 상기 PMML 스키마의 다큐먼트(Document)는 상기 OPC UA의 다큐먼트 타입(Document type)으로 매핑되며, 상기 PMML 모델 요소(Model element)는 상기 OPC UA의 모델 객체 타입(Model element type)으로 매핑되며, 상기 PMML 스키마의 속성(Attribute)은 상기 OPC UA의 변수 타입(variable type)의 데이터 변수(Data variable) 또 는 특성(Property)으로 매핑되며, 상기 PMML 스키마의 속성 타입(Attribute type)은 상기 OPC UA의 빌트 인 데 이터 타입(Built-in data type) 또는 사용자 정의 데이터 타입(User-defined data type)으로 매핑되며, 상기 PMML 스키마의 리퍼런스(Referenc)는 상기 OPC UA의 참조 타입(Reference type)의 하위 타입(hasSubtype), 컴 포넌트 타입 (hasComponent), 특성타입(hasProperty) 또는 타입정의(hasTypeDefinition) 참조 타입으로 매핑 되는 것을 특징으로 할 수 있다."}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "일 실시예에 따른 데이터 상호 호환 방법 및 데이터 상호 호환 시스템은 PMML형태의 데이터 마이닝 모형을 OPC UA 규격을 준수하는 데이터 모형으로 변환함으로써, OPC UA로 단일화된 데이터를 용이하게 교환할 수 있는 인프 라를 생성할 수 잇는 효과가 존재한다. 또한, 이를 통하여 OPC UA와 호환 가능한 데이터 애널리틱스 모델들이 제조 시스템 및 제조 지능화 플랫폼을 넘 나들며 데이터들을 용이하게 사용, 교환 및 공유할 수 있다. 또한, 이러한 기술을 통해 스마트 공장의 활성화에 따른 상위 시스템에서의 현장 데이터를 용이하게 획득할 수 있고, 기업의 OPC UA 기술 사업화를 용이하게 할 수 있는 장점이 존재한다."}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에 기재된 실시 예와 도면에 도시된 구성은 개시된 발명의 바람직한 일 예이며, 본 출원의 출원 시점 에 있어서 본 명세서의 실시 예와 도면을 대체할 수 있는 다양한 변형 예들이 있을 수 있다. 또한, 본 명세서에서 사용한 용어는 실시 예를 설명하기 위해 사용된 것으로, 개시된 발명을 제한 및/또는 한정 하려는 의도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\", \"구비하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들 이나 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않 는다. 또한, 본 명세서에서 사용한 \"제 1\", \"제 2\" 등과 같이 서수를 포함하는 용어는 다양한 구성 요소들을 설명하는 데 사용될 수 있지만, 상기 구성 요소들은 상기 용어들에 의해 한정되지는 않는다. 아래에서는 첨부한 도면을 참고하여 본 발명의 실시예에 대하여 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그리고 도면에서 본 발명을 명확하게 설명하기 위해서 설명과 관계없는 부분은 생략한다. 도 1은 본 발명에 적용되는 PMML의 상세 정보 모델 구조를 나타낸 도면이고, 도 2는 본 발명에 적용되는 OPC UA 의 정보 모델 구조를 나타낸 도면이며, 도 3은 OPC UA의 정보 모델 구조와 PMML의 정보 모델 구조간에 상호 호 환 관계를 나타낸 도면이다. PMML은 Data Mining Group 컨소시엄이 만든 언어로서, 통계 및 데이터 마이닝 모형의 표현 뿐만 아니라 데이터 전처리와 후처리에 관련된 데이터 변환을 표현하는 XML(extensible markup language) 기반의 언어이다. PMML은 17개의 데이터 마이닝 모형(회귀분석, 인공신경망, 서포트벡터 머신 등)을 표현하며 (버전 4.3 기준), 범용성 및 개방성을 목표로 XML 스키마를 공개하고 있다. 또한, 다양한 데이터 분석 소프트웨어(R, KNIME 등)에서 PMML 언어의 입출력을 지원하고 있다. 도 1은 본 발명에 적용되는 PMML의 정보 모델 구조를 나타낸 도면으로서, PMML의 구조(structure) 및 핵심 요소 (element)별 내용에 대해 기재되어 있다. 헤더(A, header)는 PMML 문서의 일반적 정보를 담으며, 데이터 사전(B,data dictionary)은 모델에서 사용되는 데이터 필드(data field)에 대한 변수 명칭 및 타입 선언을 수행한다. 데이터 변환(C, data transformation)은 데이터 전처리 관련 요소이며, 정규화(normalization), 이산화 (discretization: 연속값을 이산값으로 매핑), 변환함수(function: 2개 이상의 변수들의 함수화를 통한 단수 출 력값 산출) 및 집합(aggregation: 변수값들의 그룹화)과 관련된 정보를 표현한다. 모형(D, model) 요소는 통계 혹은 데이터 마이닝 모형을 표현하며, 마이닝 스키마(mining schema), 타겟 (targets) 및 모델 세부사항(model specifics)이 주요 하위요소이다. 마이닝 스키마에서는 모형에서 사용되는 데이터 필드 및 각 데이터 필드별 상세 정보를 포함하며, 타켓에서는 모형에서 출력하는 데이터 필드 선언 및 예측값에 대한 후처리 방법을 표현한다. 모형 세부사항에서는 실제 모 형의 구조, 변수 및 인스턴스를 표현하는데, 모형들마다 각기 다른 구조 및 변수들을 가지고 있다. 예를 들어, 회귀 모형에서는 다항식(polynomial) 형태를 표현하기 위한 구조 및 변수를 정의하며, 인공신경망 모형에서는 레이어(layer) 및 뉴런(neuron)들을 표현하기 위한 구조 및 변수를 정의한다. 실제 PMML 문서는 상기 정의된 스키마를 통하여 데이터 마이닝에 사용되는 변수, 데이터 전·후처리 및 모형을 인스턴싱하여 XML로 표현될 수 있다. 그러나, PMML은 특정 분야에 얽매이지 않은 독립적이고 범용적인 언어이므로, 제조분야에 특화된 것은 아니어서, 제조분야에서 PMML을 사용하려면 PMML 호환 데이터 분석 소프트웨어를 사용하거나 별도의 인코더 (encoder)와 디코더(decoder) 개발이 필요한 실정이다. 따라서, 본 발명은 이러한 문제점을 해결하기 위해 고안 되 발명으로서, 별도의 인코더와 디코더 없이 두 시스템간의 데이터를 용이하게 상호 호환 해줄 수 있는 인터페 이스를 제공하기 위함이다. OPC UA는 산업자동화를 위한 이기종 기기 및 시스템간 정보교환을 위한 eXtensible Markup Language (XML) 및 Java Script Object Notation (JSON) 기반 커뮤니케이션 프로토콜을 정의하고 있다 OPC UA는 제조시스템의 수직적 통합을 위한 단일형 데이터 교환 프로토콜 및 서버-클라이언트 시스템 실현을 목 표로 한다. 개발 측면에서는 OPC UA 관련 오픈소스 도구를 제공하고 있으며, 사용 측면에서는 OPC UA를 지원하 는 프로그래머블 로직 컨트롤러(programmable logic controller)들이 출시되고 있다. 이를 통하여 제조 현장의 데이터가 상위 시스템으로 전달되며, 데이터 분석을 통한 운용 최적화를 가능하게 하고 있다. OPC UA는 데이터 접근(data access), 알람 및 상태(alarm and condition), 과거 데이터 접근 (historical data access) 및 프로그램(program)에 대한 기본적인 정보 모델을 제공할 수 있다. 이러한 확정적이고 고정적인 기본 정보 모델도 중요하지만, OPC UA에서는 정보 모델링을 위한 기본 규칙과 제약 방법을 제공함으로써 유연하고 확 장적인 정보 모델의 개발이 가능한 것이 장점이다. 이를 통하여, OPC UA는 타 컨소시엄과 함께 OPC UA기반 협 력모델들을 지속적으로 개발 및 발간을 수행함으로써 다양한 산업군으로의 확장 및 파급을 도모하고 있다. 도 2는 본 발명에 적용되는 OPC UA의 정보 모델 구조를 나타낸 도면으로서, OPC UA 모델 구조는 도 2에 표시된 바와 같이 어드레스 스페이스 모델(A, address space model), 기초 정보 모델(B, base information model), 상 세 정보 모델(C, specific information model) 및 데이터(D,data) 계층으로 구성될 수 있다. 어드레스 스페이스 모델 계층(A)은 일종의 메타 모델로서, OPC UA에서 사용되는 기본적인 노드와 관계 종류들 즉, 객체 타입(object type), 데이터 타입(data type), 변수 타입(variable type), 메소드(method), 뷰(view) 및 참조 타입(reference type) 등을 정의하는 역할을 할 수 있다. 기초 정보 모델 계층(B)에서는 어드레스 스페이스 모델 계층(A)에서 제공하는 다양한 노드들을 계승하여 변환하 고자 하는 대상(도메인)의 기초 노드 타입들을 정의하며 동시에 이들의 제약사항들을 정의할 수 있다. 상세 정보 모델 계층(C)은 기초 정보 모델을 바탕으로 변환하고자 하는 대상에 대한 정보 모델을 구체화할 수 있다. 데이터 계층(D)은 상세 정보 모델 계층(D)에 기초하여 실제 인스턴스들이 들어간 데이터를 의미할 수 있다. 도메인 전문가들은 도 2에 도시된 OPC UA에서 제공하는 어드레스 스페이스 모델 내의 노드와 관계들을 이용하여 기초 정보 모델 및 상세 정보 모델을 개발하게 된다. 한편, 사용자들은 OPC UA 서버-클라이언트 시스템상에서 이 두 가지 모델들을 준수하는 인스턴스 값들을 발행(publication)하거나 구독(subscription)할 수 있게 된다. 앞서 설명한 스마트 공장의 제조 지능화 실현을 효과적으로 실행하기 위해서는 생성된 데이터 애널리틱스 모델 이 제조 시스템의 내부와 외부에서 언제 어디서나 교환되고 활용될 수 있도록, 모델 상호 운용성이 필수적이다. 예를 들어, 공작 기계가 에너지 예측을 하려면 스스로 에너지 예측 모델을 생성하고, 메모리 제약 등으로 인하 여 상위 시스템이나 데이터베이스에 이 모델을 송신해야 한다. 그 후, 필요시 그 모델을 수신하여 에너지를 예 측해야 한다. 예를 들면, 공작기계의 에너지 사용량 예측값을 작업자에게 알려주는 경우 또는 에너지 최소 사용 을 위하여 제어 파라미터를 변경해야 하는 경우가 있다. 이 때, 모델의 송수신이 어렵다면 모델 획득이 불가하 므로, 수직적 관점에서의 모델 상호운용성이 필요하다. 또한, 이기종 공작 기계들간의 협업을 통한 생산라인 전체의 에너지 예측을 하는 경우, 복수개의 공작기계들간 에너지 예측모델들의 교환 또는 상위 시스템에서의 예측모델 수집을 통하여 전체 에너지를 예측해야 하므로 이 러한 경우 수평적 관점 에서의 모델 상호 운용성이 필요하다. 즉, 도 3에 도시된 바와 같이 제조 시스템 영역 (A)과 제조 지능화 영역(B)간의 수평적인 모델 상호 운영성이 필요하다. 이를 구체적으로 살펴보면, 도 3의 왼쪽 영역(A)은 ISA-95 모델의 수직적 통합 관점에 대한 OPC UA 기반 데이터 상호운용성을 나타낸 것으로서, 최근 추세를 봤을 때, 제조 시스템의 수직적 계층간 데이터 교환은 OPC UA를 통 해서 단일화가 가능할 것으로 평가된다. 한편, 도 3의 오른쪽 영역(B)는 제조 지능화에 대한 영역을 나타낸 것으로서, 제조 지능화 영역이 제조 시스템 계층과 융합이 이루어지려면, 이질적인 두 영역을 연결하는 중간매개체를 두어 데이터 애널리틱스 모델들의 상 호 운용적 교환을 보장할 필요가 있다. 즉, OPC UA로 단일화된 모델 상호운용성을 도모하기 위해서는, PMML로 표현되는 데이터 애널리틱스 모델들을 OPC UA로 용이하게 변환하고 교환할 수 있는 인터페이스 개발이 필요하다. 일 실시예에 따른 데이터 상호 호환 방법 및 데이터 상호 호환 시스템은 이러한 모델 상호간 교환 인터페이스 를 구현하기 위해 고안된 발명으로서, 구체적으로 제조 시스템 영역에서 사용되는 OPC UA와 지능화 영역에서 사용되는 PMML간에 데이터의 변환 및 공유를 용이하게 해줄 수 있는 인터페이스에 관한 발명이다. 이하 구체적 으로 도면을 통해 본 발명의 구조 및 작동 원리에 대해 알아본다. 도 4는 일 실시예에 따른 데이터 상호 호환 시스템의 구성 요소를 개략적으로 도시한 블럭도이고, 도 5는 일 실시예에 따른 상호 호환 시스템의 모델링부의 구성 요소를 구체적으로 도시한 블럭도이다.도 4를 참조하면, 일 실시예에 따른 데이터 상호 호환 시스템은 OPC UA 스키마와 OPC UA 클래스 코드 및 패키지를 생성하는 모델링부와, OPC UA기반의 PMML 모델 인스턴스를 생성하는 OPC UA 서버를 포 함할 수 있다. 구체적으로, 모델링부는 PMML 데이터에서 PMML 스키마를 수신하는 PMML 스키마 수신부, 미리 정해진 매핑 규칙에 따라 PMML 스키마와 OPC UA 어드레스 스페이스 모델과의 매핑 결과에 기초하여 OPC UA 정보 모델을 생성하는 OPC UA 정보 모델 생성부, OPC UA 모델 생성부에서 생성한 OPC UA 모델을 기초로 OPC UA 클래스 코드 및 패키지를 생성하는 OPC UA 클래스 코드 생성부를 포함할 수 있다. 또한, 도 4에서는 도시하지 않았으나, 모델링부는 OPC UA 스키마와 OPC UA 클래스 코드 및 패키지(5 0)를 저장하는 저장 모듈, OPC UA 서버 등과 통신을 수행하는 통신 모듈 등을 포함할 수 있다. 또한, 도 4에서는 편의상 모델링부와 OPC UA 서버를 구분하여 도시하였지만, 본 발명은 모델링부 가 OPC UA 서버에 포함되는 구성 요소로 실시될 수 있다. 이러한 경우 OPC UA 서버는 향후 설명 할 모델링부가 하는 각종 역할들을 수행할 수 있다. 본 명세서에서는 편의의 설명을 위해 모델링부와 OPC UA 서버를 별도의 구성 요소로 독립하여 설명하도록 한다. 또한, 스키마란 물리적인 장치로부터 논리적인 데이터 베이스 레코드(data base record)를 매핑(mapping)하는 데 사용되는 정의 정보를 의미하는데, 구체적으로 데이터 베이스의 기본 개념으로서 데이터 베이스가 대상으로 하는 실세계를 논의 영역(universe of discourse), 논의 영역에서 데이터 베이스에 필요한 정보를 추상화하는 모델을 정보 모델(data model), 추상한 결과를 기술한 것을 개념 스키마(conceptual schema)라고 한다. 개념 스 키마를 컴퓨터의 세계로 매핑한 것을 내부 스키마(internal schema)라 한다. 도 5를 참조하면, OPC UA 정보 모델 생성부는 OPC UA 어드레스 스페이스 모델과 PMML 스키마 수신부 에서 수신한 PMML 스키마를 미리 정해진 매핑 규칙에 따라 매핑시킨 후, 매핑 결과에 기초하여 OPC UA 정보 모델을 생성할 수 있다. 모델링을 함에 있어서, 표현 언어 관점에서는 PMML과 OPC UA 둘 다 XML을 지원하므로 XML을 표현 언어로 채택하 는 것이 효율적이다. 따라서, 구조 관점에서는 둘 다 객체지향 개념으로 설계되어 있어 매핑을 가능하게 하지만, 실제로 매핑을 하는 경우에는 PMML과 OPC UA를 매핑하기 위한 규칙, 매핑 규칙(mapping rule)의 설정이 필요하다. 이는 PMML 스키마의 노드 및 관계는 OPC UA 어드레스 스페이스 모델의 그것들과 일대일 매핑이 가능 하기도 하지만 불가능한 경우도 있기 때문이다. 따라서, 매핑 규칙을 설정하기 위해서는, 의미론(semantic) 기반의 매핑 규칙이 필요하므로, 일 실시예에 따른 데이터 상호 호환 방법 및 데이터 상호 호환 시스템은 PMML와 OPC UA 구조 사이 일대일 매핑이 가능한 경우 는 상호 대응되는 OPC UA 어드레스 스페이스 모델의 노드 및 관계를 취하고, 일대일 매핑이 불가능하다고 판단 된 경우에는 의미론과 지식에 기반하여 설계자가 강제적으로 매핑하는 방식으로 매핑 규칙을 설정하였다. 이하 도면을 통하여 매핑 규칙에 대해 자세히 설명한다. 도 6의 표3과 도 7의 표 4 이러한 PMML과 OPC UA와의 매핑 규칙을 설명하기 위한 도면으로서, 표의 세번째 열은 PMML의 노드, 관계 및 표현법을, 네번째 열은 OPC UA의 노드, 관계 및 표현법을, 다섯번 째 열은 매핑 규칙 및 예시를 나타낸다. PMML의 요소(element)는 일종의 클래스 개념이므로, OPC UA의 클래스 개념인 객체 타입(object type)으로 일대 일 매핑이 가능하다. 그리고, PMML의 실제 인스턴스(instance)는 OPC UA의 클래스 인스턴스 개념인 객체 (object)로 표현할 수 있다. PMML 스키마의 최상위 노드인 다큐먼트(document) 요소는 다큐먼트 타입으로 매핑할 수 있다. PMML의 모델 요소(model-element)는 원래 모형들의 그룹핑을 위해 존재한다. 그러나, 변환의 효율성을 높이기 위해, OPC UA로 변환할 때에는 모형들의 공통 객체 및 속성들을 하나로 묶은 추상형 모델 요소 객체 타입 ([abstract] model element object type)로 생성한 후, PMML의 Model-Element과 매핑한다. 실제 모형들은 이 추상형 객체 타입을 계승하여 모델링할 수 있다. PMML의 속성(attribute)은 OPC UA의 변수 타입(variable type)으로 일대일 매핑할 수 있다. 다만, 인스턴싱에 서는 속성의 성질에 따라 데이터 변수(data variable) 혹은 특성(property)로 구분될 수 있다. 구체적으로, PMML의 속성이 동적 성질을 가지고 있다고 판단된 경우에는 PMML의 변수 타입 중 데이터 변수로 인스턴싱할 수 있다. 예를 들어, 회귀모형 계수값은 업데이트에 의해 변경 가능하므로 데이터 변수로 인스턴싱 할 수 있다. 반대로, PMML의 속성이 정적 성질을 가지고 있다고 판단된 경우에는 PMML의 변수 타입 중 특성(property) 타입 으로 인스턴싱할 수 있다. 예를 들어, 회귀모형의 명칭은 일종의 식별 부호 역할을 하므로 특성으로 인스턴싱할 수 있다. 이는 OPC UA 규격에서 정적 데이터는 특성 타입으로, 동적 데이터는 변수 타입으로 규정하기 때문이다. 예를 들 어, 회귀모형 이름은 일종의 ID로서 정적 성질을 가지므로 특성 타입으로 정의하는 반면, 회귀모형 계수값은 변 경될 수 있으므로 변수 타입으로 정의한다. PMML 속성의 데이터 타입들은 일반적으로 OPC UA의 빌트인 데이터 타입(built-in data type)으로 매핑될 수 있 다. 이는 빌트인 데이터 타입이 거의 모든 데이터 유형을 포괄하고 있기 때문이다. 예를 들어, 정수형, 실수형, 문자형 및 불리언(boolean)형 등이 존재한다. 또한, 이와 별도로 PMML에는 별도로 정의된 데이터 타입들이 존재한다. PMML에 특화된 데이터 타입들은 사용자 정의 데이터 타입(user-defined data type)으로 생성하고, OPC UA의 빌트인 데이터 타입을 상속하도록 연결할 수 있다. 예를 들어, PMML에는 데이터 필드 정의를 위한 'FIELD-NAME' 데이터 타입이 존재한다. 이 경우, 'FIELD-NAME'이 라는 데이터 타입을 신규 정의하되, OPC UA의 문자형(string) 타입의 하위 타입으로 연결할 수 있다. 또한, 열 거 형(enumeration) 데이터 타입은 OPC UA의 열거형의 하위 타입으로 매핑하되, 명칭 및 열거값들을 새로 정의 할 수 있다. PMML의 참조(Ref)는 OPC UA의 참조 타입(Reference Type)으로 매핑될 수 있다. 구체적으로, 노드간 의미론적 관 계에 따라 하위 타입(hasSubtype), 컴포넌트 타입 (hasComponent), 특성타입(hasProperty) 등의 참조 타입으로 매핑 될 수 있다. 두 노드가 상속 관 계라면 하위 타입, 한 노드가 다른 노드의 부분 관계라면 컴포넌트 타입, 한 노드가 특성으로 인스턴싱되면 특성 타입으로 정의될 수 있다. 그리고, 객체, 변수 및 데이터 타입들을 가져 올 때, 타입 정의(hasTypeDefinition)으로 연결할 수 있다. PMML의 속성 값이 존재해야 하는 경우 'required'로 표시되는데, 이러한 경우 OPC UA의 'mandatory' 모델링 규 칙으로 일대일 매핑할 수 있다. 예를 들어, 회귀 모형의 계수 속성은 반드시 있어야 하므로 'required'라 표시 되며, OPC UA에서도 반드시 있어야 하는 속성으로 정의할 수 있다. 반대로, PMML의 속성 값이 반드시 존재할 필요가 없는 경우에는 'optional'로 표시될 수 있으며, 이러한 경우 OPC UA의 'optional' 모델링 규칙으로 일대일 매핑할 수 있다. PMML에서는 복수 개의 속성값이 존재하는 경우, 복수 개의 속성 값의 존재 범위를 'minOccurs' (최소 속성값 개 수)과 'maxOccurs' (최대 속성값 개수)로 정의할 수 있다. 이러한 범위가 의미가 있을 경우는 OPC UA 의 'placeholder' 모델링 규칙을 이용하여 복수개의 속성값들을 정의하도록 할 수 있다. PMML의 빌트인 함수는 OPC UA의 메소드로 매핑하며, OPC UA에서의 메소드(method)는 입력 변수에 따른 결과를 출력하는 일종의 함수로 정의될 수 있다. 다시 도 5로 돌아와, OPC UA 어드레스 모델과 PMML 스키마가 앞서 설명한 미리 정해진 매핑 규칙에 따 라 매핑이 된 경우, OPC UA 정보 모델 생성부는 매핑 결과를 기초로 OPC UA 정보 모델을 생성할 수 있 다. 구체적으로, OPC UA 정보 모델 생성부는 회귀 모형 정보 모델 또는 인공 신경망 정보 모델을 이용하여 OPC UA 기초 정보 모델 및 상세 정보 모델을 생성할 수 있다. 도 8는 PMML 스키마에 대해 OPC UA 표현 규격대로 설계한 OPC UA 기초 정보 모델 및 상세 정보 모델의 일 예를 도시한 도면으로, 도2의 표2에 기재되어 있는 어드레스 스페이스 모델, 기초 정보 모델 및 상세 정보 모델 계층 에 대응되는 모델이다. PMML의 함수(function)는 OPC UA의 메소드(method)로 변환한다. OPC UA에서의 메소드(method)는 입력변수에 따 른 결과를 출력하는 일종의 함수로 정의한다. PMML에서는 이러한 기능들을 지원하기 위하여 빌트인 함수 (function)들을 제공하는데, 기본적인 사칙연산, 기초 통계량, 논리적 결정(예: if-then), 포맷 변환을 위해 필 요한 함수 구조를 정의한다.다만, 모델 설계시 뷰(인스턴스 가시화를 담당하는 노드)는 모델 설계에서 배제되는데, 이는 PMML에서는 뷰에 대응되는 컨텐츠가 존재하기 않기 때문이다. 도 8을 참조하면, 기초 정보 모델 계층의 참조 타입(reference type), 요소 타입(element type), 속성 타입 (attribute type), 특성 타입(property type)은 각각 OPC UA의 표준 참조 타입(standard reference type), 기 초 객체 타입(base object type), 기초 데이터 변수 타입(base data variable type)을 계승한 하위 타입 (subtype)으로 정의될 수 있다. 상세 정보 모델 계층에서는 PMML 스키마의 최상위 노드를 다큐먼트 타입(document type)으로 정의되며, 다큐먼 트타입 내에는 PMML의 요소들을 컴포넌트(has component) 형태로 갖는 구조이다(도 1 참고). 여기서, 헤더 타입(header type), 데이터사전 타입(data dictionary type), 변환사전 타입(transformation dictionary type), 마이닝 수립작업 타입(mining build task type), 타켓 타입(targets type)은 PMML의 모든 문서에서 공통적으로 사용되는 요소이다. 실제 모형들은 추상형 모델 요소 타입([abstract] model element type)으로부터 분기되며 모형별로 각기 다른 구조를 갖게 된다. 한편, PMML 스키마에는 다양한 데이터 타입(data type)이 존재하는데, 이들 모두 OPC UA의 빌트인 데이터 타입(built-in data type)의 하위 타입(subtype)으로 정의될 수 있다. 도 9와 도 10은 도 8의 OPC UA 기초 정보 모델 및 상세 정보 모델을 기초로 희귀 모형과 인공신경망 모형을 이 용하여 생성한 OPC UA 상세 정보 모델을 도시한 도면이다. 도 9는 회귀 모형에 대한 상세 정보 모델을 도식화 한 도면으로서, 회귀모형 타입(regression model type)은 추 상형 모델요소 타입([abstract] model element type)을 계승한 하위 타입중 하나이다. 즉, 도 9의 왼편의 마이닝 스키마(mining schema), 출력(output), 모형통계(model stats: 변수들의 통계량), 모형설명(model explanation: 모델의 상세 설명), 타겟(target: 결과변수의 정의 및 후처리 방법), 지역적 변형 (local transformation: 변수들의 정규화, 이산화, 밸류 매핑, 인덱싱 등) 및 모델 검증(model verification: 모델 검증용 데이터셋 및 검증 결과) 타입은 모델요소 타입의 객체 컴포넌트들로서, 모든 모형들에서 공통적으 로 사용된다. 회귀모형은 모델명(model name), 알고리즘명(algorithm name) 등의 속성값들을 포함하고 있다. 모델종류(model type), 함수명(function name), 정규화방법(normalization method)들은 열거형(enumeration) 데이터 타입을 가 지며, 열거형 데이터값 중 하나를 택함으로써 회귀모형의 종류를 결정할 수 있다. 식 은 단변량 선형 회귀모형 수식을 나타내며(모델종류의 'linearRegression'), 변수 및 계수들에 해당하는 객체 혹은 변수는 아래와 같이 표현될 수 있다. 식 -"}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "* b0 (intercept): Regression Table Type의 intercept 속성 * x (variable): Numeric Predictor Type의 name 속성 * k (exponent): Numeric Predictor Type의 exponent 속성 * bk (coefficient): Numeric Predictor Type의 coefficient 속성 이러한 변수 및 계수들은 회귀모형에서 반드시 존재해야 하므로, 필수적(mandatory) 모델링 규칙을 갖는다. 참 고로, 변수들은 마이닝 스키마 타입(mining schema type)내 마이닝 필드 타입(mining field type)의 name 속성 값으로 선언되며, 출력 변수(y)의 경우는 usageType 속성을 'target'값으로 선언될 수 있다. 도 10은 인공신경망 모형에 대한 상세 정보 모델을 도식화 한 도면으로서, 도 9와 도 10을 비교하면, 표현하고 자 하는 모형의 구조가 상이하므로 설계되는 정보 모델 구조 또한 다르게 설계됨을 알 수 있다. 인공신경망 타 입(neural network type) 또한 추상형 모델 요소 타입을 계승한 하위타입이다. 식 는 인공신경망 모형 수식을 나타내며, 각 변수 및 계수들에 대한 객체 혹은 변수는 아래와 같이 표현될 수 있다. 식 -"}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "* b (bias): Neuron Type의 bias 속성 * x (variable): Neural Input Type내 Derived Field Type의 name 속성 * w (weight): Con Type의 weight 속성 (from 속성에서는 가중치가 전달되는 neuron 식별부호 정의) * n (the number of inputs from the input layer): Neural Inputs Type의 number of inputs 속성 * f (activation function): Neural Network Type의 activation function 속성 (Neural Layer Type의 activation function 속성에서 각 계층별 activation function을 별도로 정의할 수 있음) 인공신경망 모형은 신경 입력 타입(neural inputs type), 신경 계층 타입(neural layer type), 신경 출력 타 입(neural outputs type)으로 구성되며, 각 계층내에는 뉴런 타입(neuron type)이 존재하고, 뉴런의 편향 (bias) 및 뉴런 관계 타입(con type)의 가중치(weight)를 조정하여 출력되는 변수 값을 도출하는 구조이다. 계층 수는 신경망 타입(neural network type)의 계층수(number of layers) 속성에서 정의하고, 계층별 뉴런 개 수는 신경계층 타입(neural layer type)의 뉴런수(number of neurons) 속성에서 정의될 수 있다. 각 뉴런들은 뉴런 타입(neuron type)의 id 속성에서 식별 부호가 부여될 수 있다. OPC UA 정보 모델 생성부는 이렇게 생성된 OPC UA 기초 정보 모델 및 상세 모델을 기초로 XML형식의 OPC UA 스키마(40,schema)를 생성할 수 있다. 도 11은 생성된 PMML 회귀 모형에 대한 OPC UA 스키마의 일 부를 도시한 도면이다. 도 11에 도시된 스키마의 일부는 단순히 예시에 지나지 않으며, 다양한 형태로 변형되어 표현될 수 있다. 또한, OPC UA 정보 모델 생성부는 XML 형식의 OPC UA 스키마로부터 프로그래밍 언어 형태의 클래스 코 드 및 패키지들을 생성할 수 있다. 구체적으로, OPC UA 정보 모델 생성부는 OPC UA 스키마 파일을 해석하여Java, C++ 및 C# 프로그래밍 언어 형태의 클래스 코드 및 패키지를 생성할 수 있다. 그 후 OPC UA 정보 모델 생성부는 생성한 OPC UA 클래스 코드 및 패키지을 OPC UA 서버에 송신할 수 있으며, OPC UA 서버는 수신한 정보들을 활용하여 다양한 인스턴스들을 생성하거나 해석할 수 있다. 이에 대한 자세한 설명은 후술하도록 한다. 도 12은 일 실시예에 따른 데이터 상호 호환 시스템의 구성 요소 및 OPC UA 서버와 통신을 수행하는 제 1클라이언트 서버 및 제2클라이언트 서버와의 관계를 도시한 도면이다. 데이터 상호 호환 시스템에서 모델링부에 대한 설명은 도 5에서 자세히 설명하였는바 생략하고, 도 12 에서 OPC UA 서버에 대해 자세히 설명하도록 한다. 도 12를 참조하면, OPC UA 서버는 모델링부로부터 수신한OPC UA 스키마 및 OPC UA클래스 코드 및 패키지 등을 저장하는 저장부와, 모델링부 및 클라이언트 서버(300, 400) 등과 통신을 수행하 는 통신부, PMML 해석부와 모델 변환부를 포함하는 제어부 등을 포함할 수 있다. 여기서 OPC UA 서버는OPC UA 서버는 OPC UA SDK를 이용하여 구현될 수 있다. 저장부에는 OPC UA 데이터 기초 모델 및 상세 모델이 노드(Node)를 포함하는 형태로 구조화하여 저장 될 수 있으며, OPC UA 스키마 또한 다양한 형식으로 저장될 수 있다. 따라서, 저장부는 플래시 메모리 타입(Flash Memory Type), 하드디스크 타입(Hard Disk Type), 멀티미디 어 카드 마이크로 타입(Multimedia Card Micro Type), 카드 타입의 메모리(SD, XD 메모리 등), 램(RAM; Random Access Memory) SRAM(Static Random Access Memory), 롬(ROM; Read-Only Memory), EEPROM(Electrically Erasable Programmable Read-Only Memory), PROM(Programmable Read-Only Memory) 자기 메모리, 자기 디스크, 광디스크 중 적어도 하나의 타입의 저장매체를 포함할 수 있으며, 후술할 제어부와 일체의 구성 요소로 구성 될 수 있다. 통신부는 모델링부 및 클라이언트 서버(300, 400) 등과 데이터를 송신하고 수신하는 역할을 할 수 있 다. 구체적으로, 모델링부에서 생성한 각종 데이터 파일을 수신 받고, OPC UA 서버가 생성한 다양한 인스턴스를 OPC UA 클라이언트 서버들(300,400)로 송신할 수 있다. 따라서, 통신부는 통신을 가능하게 하는 하나 이상의 구성 요소를 포함할 수 있으며, 예를 들어 근거리 통 신 모듈, 유선 통신 모듈 및 무선 통신 모듈 중 적어도 하나를 포함할 수 있다. 근거리 통신 모듈은 블루투스 모듈, 적외선 통신 모듈, RFID(Radio Frequency Identification) 통신 모듈, WLAN(Wireless Local Access Network) 통신 모듈, NFC 통신 모듈, 지그비(Zigbee) 통신 모듈 등 근거리에서 무 선 통신망을 이용하여 신호를 송수신하는 다양한 근거리 통신 모듈을 포함할 수 있다. 유선 통신 모듈은 지역 통신(Local Area Network; LAN) 모듈, 광역 통신(Wide Area Network; WAN) 모듈 또는 부가가치 통신(Value Added Network; VAN) 모듈 등 다양한 유선 통신 모듈 뿐만 아니라, USB(Universal Serial Bus), HDMI(High Definition Multimedia Interface), DVI(Digital Visual Interface), RS-232(recommended standar d232), 전력선 통신, 또는 POTS(plain old telephone service) 등 다양한 케이블 통신 모듈을 포함할 수 있다. 무선 통신 모듈은 와이파이(Wi-Fi) 모듈, 와이브로(Wireless broadband) 모듈 외에도, GSM(global System for Mobile Communication), CDMA(Code Division Multiple Access), WCDMA(Wideband Code Division Multiple Access), UMTS(universal mobile telecommunications system), TDMA(Time Division Multiple Access), LTE(Long Term Evolution) 등 다양한 무선 통신 방식을 지원하는 무선 통신 모듈을 포함할 수 있다. 한편, 통신부은 상술한 통신 방식에 한정되는 것은 아니며, 상술한 통신방식 이외에도 기타 널리 공지되 었거나 향후 개발될 모든 형태의 통신 방식을 포함할 수 있다. 제어부는 PMML을 해석하는 PMML 해석부와 PMML 객체, OPC UA 스키마, OPC UA 클래스 코드 및 패 키지를 기초로 OPC UA 기반 PMML 모델 인스턴스를 생성하는 모델 변환부를 포함할 수 있다. 도 12에서는 PMML 해석부와 모델 변환부를 구분하여 도시하였지만, 이에 한정되는 것은 아니고 하나 의 부로 구성될 수 도 있다. 제어부는 제1 OPC UA 클라이언트 서버로부터 수신한 PMML 파일 및 객체를 해석하여 OPC UA 기반 의 PMML 모델 인스턴스를 발간(publish)할 수 있다. 즉, OPC UA 서버의 제어부는 PMML 모형의 OPC UA 인코더에 해당할 수 있다. 구체적으로, 제어부는 제1 OPC UA 클라이언트 서버로부터 PMML 파일 및 객체를 해석한 후, 해석 된 결과를 기초로 Java 클래스 인스턴스들을 생성할 수 있다. 이 경우 Java PMML을 이용할 수 있으며, 이 라이 브러리는 PMML 파일을 입력 받아 자체 정의한 Java 클래스 인스턴스로 변환하는 기능을 제공할 수 있다. 그 후 제어부는 Java PMML로부터 생성된 회귀 및 인공신경망 모형의 인스턴스들을 PMML의 OPC UA 클래스 코드 및 패키지를 이용하여 OPC UA 클래스들로의 인스턴싱을 수행할 수 있다. 이 때, 제어부는 OPC UA 클래스 코드에서 제공하는 set함수를 이용하여 객체 및 속성 값들을 인스턴싱 할 수 있으며, 인스턴싱된 모형들은 OPC UA 서버를 통해 발행될 수 있다. 즉, 이러한 과정을 통해 OPC UA 규 격의 PMML 모델 인스턴스들이 발간될 수 있다. OPC UA 클라이언트 서버(300,400)는 OPC UA SDK를 기초로 구현되며, OPC UA 서버로부터 발행된 OPC UA 기 반 PMML 모델 인스턴스를 구독(subscribe) 및 해석할 수 있다. 이 때, OPC UA 클래스 코드에서 제공 하는 get함수를 이용하여 객체 및 속성 값들을 받을 수 있다. 구체적으로, 제1 OPC UA 클라이언트 서버는 OPC UA시뮬레이션 서버(미도시)로부터 발간(publish)되는 OPC UA 형태의 가공동력 데이터를 구독(subscribe)하여 데이터마이닝 모형(회귀모형 및 인공신경망 모형)을 생성한 후, 이를 기초로 생성된 인공신경망 모형을 XML형태의 PMML 문서를 변환한 후, OPC UA 서버로 송신할 수 있다. 제2 OPC UA 클라이언트 서버은 제1 OPC UA 클라이언트 서버와는 다른 클라이언트 서버로서, OPC UA 서버로부터 발간된 OPC UA기반 PMML 모델 인스턴스들을 구독하며, 구독된 인스턴스들을 해석할 수 있다. 즉, 제2 OPC UA 클라이언트 서버는 PMML 모형의 OPC UA 디코더에 해당할 수 있다. 제2 OPC UA 클라이언트 서버의 경우 OPC UA 클라이언트 SDK가 이용되며, 이 때 해석을 위하여 모델링부 에서 생성된 OPC UA 클래스 코드 및 패키지가 사용될 수 있다. OPC UA 클래스 코드 및 패키지(클래스 코드 들을 역할에 따라 그룹으로 묶은 Java 클래스 패키지)는 OPC UA SDK내에 모듈로 탑재된 Java 언어기반 Code Generator에서 생성할 수 있다. 도 13과 도 14는 일 실시예에 따른 데이터 상호 호환 방법에 따라 입력되는 PMML 다큐먼트와 출력되는 OPC UA 다큐먼트의 일부를 도시한 도면이다. 도면을 참조하면, 구현에 사용되었던 회귀 및 인공신경망 모형 인스턴스들과 OPC UA 클라이언트에서 구독 및 해 석된 인스턴스들을 비교한 결과, 일치함을 확인하였다. 결론적으로, PMML 모델들이 OPC UA 형태로 변환이 가능 하며, OPC UA 서버와 OPC UA클라이언트 서버 간에 상호 데이터 누락 없이 데이터가 교환될 수 있음을 알 수 있 다. 도 15는 일 실시예에 따른 데이터 상호 호환 방법의 작동 흐름을 도시한 순서도이다. 도 15를 참조하면, 모델링부는 PMML 스키마를 수신한 후, PMML 스키마와 외부 서버로부터 수신한 OPC UA 어드레스 모델간에 미리 정해진 규칙에 따라 모델 매핑을 실시한다.(S10, S20) 이는, 상호 호환할 수 있는 모델을 생성하기 위한 것으로서, 미리 정해진 매핑 규칙은 자세히 전술하였는바 생 략하도록 한다. 그 후 모델링부는 매핑 결과에 기초하여 PMML 스키마와 OPC UA 클래스 코드 및 패키지를 생성할 수 있다. (S30) 생성된 PMML 스키마와 OPC UA 클래스 코드 및 패키지는 모델링부에 저장되거나, 이를 활용할 OPC UA 서버에 저장될 수 있다. (S40) OPC UA 서버는 모델링부로부터 수신한 정보와 또 다른 외부 서버로부터 수신한 PMML 정보를 기초로 JAVA 클래스 인스턴스를 생성할 수 있다.(S50) 그 후, OPC UA 서버는 Java 클래스 인스턴스 및 OPC UA 코드를 기초로 OPC UA기반의 PMML 모델 인스터스 를 생성한 후, 생성된 OPC UA 인스턴스를 이를 활용할 다른 외부 서버로 송신할 수 있다. 종래에는 다양한 산업 분야에서 활용되고 있는 XML 기반의 언어인 PMML(Predictive Model Markup Language)과 OPC UA 데이터 마이닝 모형과의 교환 방법에 대한 기술이 아직 존재하지 않았다. 그러나, 일 실시예에 따른 데이터 상호 호환 방법 및 데이터 상호 호환 시스템은 PMML형태의 데이터 마이닝 모형을 OPC UA 규격을 준수하는 데이터 모형으로 변환함으로써, OPC UA로 단일화된 데이터를 용이하게 교환할 수 있는 인프라를 생성할 수 있으며, 이에 따라 OPC UA와 호환 가능한 데이터 애널리틱스 모델들이 제조 시스템 및 제조 지능화 플랫폼을 넘나들며 데이터들을 용이하게 사용, 교환 및 공유할 수 있는 장점이 존재한다. 또한, 이러한 기술을 통해 스마트 공장의 활성화에 따른 상위 시스템에서의 현장 데이터를 용이하게 획득할 수 있고, IT기업의 OPC UA 기술 사업화를 용이하게 할 수 있다. 한편, 개시된 실시예들은 컴퓨터에 의해 실행 가능한 명령어를 저장하는 기록 매체의 형태로 구현될 수 있다. 명령어는 프로그램 코드의 형태로 저장될 수 있으며, 프로세서에 의해 실행되었을 때, 프로그램 모듈을 생성하 여 개시된 실시예들의 동작을 수행할 수 있다. 기록 매체는 컴퓨터로 읽을 수 있는 기록 매체로 구현될 수 있다."}
{"patent_id": "10-2020-0047935", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "지금까지 실시 예들이 비록 한정된 실시 예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성 요소들이 설명된 방법과 다른 형태로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 실시 예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범위에 속한다."}
{"patent_id": "10-2020-0047935", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명에 적용되는 PMML의 정보 모델 구조를 나타낸 도면이다. 도 2는 본 발명에 적용되는 OPC UA의 정보 모델 구조를 나타낸 도면이다. 도 3은 OPC UA의 정보 모델 구조와 PMML의 정보 모델 구조간에 상호 호환 관계를 나타낸 도면이다. 도 4는 일 실시예에 따른 데이터 상호 호환 시스템의 일부 구성 요소를 도시한 도면이다. 도 5는 일 실시예에 따른 데이터 상호 호환 시스템의 모델링부의 구성 요소를 구체적으로 도시한 도면이다. 도 6과 도7에 도시된 표는 일 실시예예 따른 PMML과 OPC UA 간의 상호 호환을 위한 매핑 규칙을 설명한 표이다. 도 8는 PMML 스키마에 대해 OPC UA 표현 규격대로 설계한 OPC UA 기초 정보 모델 및 상세 정보 모델의 일 예를 도시한 도면이다. 도 9와 도 10은 도 8의 OPC UA 기초/상세 데이터 정보 모델을 기초로 데이터 마이닝 모형 중에서 회귀 모형과 인공신경망 모형에 대한 OPC UA 상세정보 모델을 도시한 도면이다. 도 11은 생성된 PMML 회귀 모형에 대한 OPC UA 스키마의 일부를 도시한 도면이다 도 12은 일 실시예에 따른 데이터 상호 호환 시스템의 구성 요소 및 OPC UA 서버와 통신을 수행하는 제1클라이 언트 서버 및 제2클라이언트 서버와의 관계를 도시한 도면이다 도 13과 도 14는 일 실시예에 따른 데이터 상호 호환 방법에 따라 입력되는 PMML 다큐먼트와 출력되는 OPC UA 다큐먼트의 일부를 도시한 도면이다. 도 15는 일 실시예에 따른 데이터 상호 호환 방법의 작동 흐름을 도시한 도면이다."}
