{"patent_id": "10-2018-0047370", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2019-0043446", "출원번호": "10-2018-0047370", "발명의 명칭": "워크플로우 엔진 프레임워크", "출원인": "한국전자통신연구원", "발명자": "이연희"}}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "사용자에 의해 정의된 워크플로우의 실행에 필요한 워크플로우 속성명세 컴퍼넌트와 엔진 컴퍼넌트가 포함된 자원을 관리하는 자원관리부, 속성명세 컴퍼넌트를 조립하고 워크플로우 실행에 필요한 엔진 컴퍼넌트를 동적으로 조합하여 워크플로우 명세에 따라 필요한 엔진 컴퍼넌트 컨테이너들을 구성하여 엔진을 생성하는 시스템 구성부, 워크플로우 속성명세에 정의된 방식에 따라 상기 시스템 구성부에 의해 생성되는 하나 이상의 엔진을 구동하여실행을 제어하는 시스템 제어부를 포함하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에서, 상기 시스템 구성부에 의해 동적으로 생성된 엔진 컴퍼넌트의 조합으로 구성된 엔진이 엔진 인스턴스의 형태로 저장되는 실행 인스턴스부를 추가로 포함하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에서, 상기 자원관리부는워크플로우 인스턴스의 컴퍼넌트 특성 또는 속성을 결정짓는 속성명세가 포함된 속성명세 컴퍼넌트와 그 목록을관리하는 속성명세 컴퍼넌트 관리부,실행을 위한 엔진 컴퍼넌트와 그 목록을 관리하는 엔진 컴퍼넌트 관리부를 포함하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에서, 상기 자원관리부는기존에 작성되어 저장된 워크플로우 명세 인스턴스를 관리하는 워크플로우 명세 인스턴스 관리부를 추가로 포함하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에서, 상기 시스템 구성부는 워크플로우 명세를 속성명세 컴퍼넌트로 바인딩하여 일련의 속성명세 컴퍼넌트를 생성하는 워크플로우 속성명세조립부, 조립한 속성명세 컴퍼넌트로부터, 정의된 엔진 컴퍼넌트 정보를 추출하여 속성명세 컴퍼넌트와 엔진 컴퍼넌트를바인딩하는 과정을 통해 일련의 엔진을 구성하여 워크플로우 실행 플랫폼을 구성하는 워크플로우 구성부를 포함하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에서, 상기 워크플로우 구성부는 워크플로우를 구성하는 엔진 컴퍼넌트와 이 엔진 컴퍼넌트의 특성을 결정짓는 파라미터를 정의하는 속성명세 컴퍼넌트의 규약에 따라 엔진 컴퍼넌트와 속성명세 컴퍼넌트를 바인딩하여 워크플로우를 실행하기 위한 엔진이 엔진 인스턴스의 형태로 저장되는 워크플로우 실행 인스턴스부를 추가로 포함하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에서, 상기 워크플로우 명세는 사용자에 의해 시스템 정의편집기에 의해 정의되어 워크플로우 명세 화일의형태로 상기 시스템 구성부에 제출되되, 이 시스템 정의편집기는공개특허 10-2019-0043446-3-각종 엔진 유형을 제시하고 사용자가 이들 중 필요한 것들을 선택할 수 있도록 하는 엔진유형 선택부, 사용자가 컴퍼넌트 타입과 각 타입별 엔진 컴퍼넌트를 선택할 수 있도록 컴퍼넌트 타입별로 다양한 엔진 컴퍼넌트 목록을 제공하는 컴퍼넌트 선택부, 컴퍼넌트 선택부에서 선택된 엔진컴퍼넌트의 속성이 제시되고 사용자는 속성을 조회하여 이를 선택 및 편집할수 있도록 하는 컴퍼넌트 속성 선택/편집부를 포함하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에서, 상기 엔진은, 하나 이상의 데이터 출발지로부터 데이터를 가져오는 입력기, 상기 입력기로부터 데이터를 받아 처리하는 하나 이상의 단위처리기, 내부에서 처리한 데이터를 하나 이상의 데이터 종착지에 출력하는 하나 이상의 출력기, 입력한 데이터를 처리하기 위한 별도의 실행프로그램 또는 플랫폼을 실행하거나 세션을 관리하는 실행기, 이러한 데이터를 입력기를 통해 입력하여 실행기 상에서 처리하고 이를 출력하기 위한 일련의 제어를 담당하는제어기를 포함하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에서, 상기 제어기는, 상기 입력기, 단위처리기, 출력기의 순으로 노드들이 구성되는 경우에, 데이터를 순차적으로 파이프라이닝하여다음 노드로 전달하는 방식으로 실행하도록 제어하는 순차처리 방식, 각각의 노드가 동시에 실행되도록 하는 동시처리 방식, 이 둘을 결합한 동시/순차처리 방식 중 어느 하나로 제어를 수행하는 워크플로우 엔진프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에서, 상기 제어기는하나 이상의 단위처리기가 상기 입력기로부터 데이터를 받아서 순차적으로 파이프라이닝에 의한 데이터를 처리함과 함께, 하나 이상의 단위처리기가 구동되어 동시처리를 실행하도록 제어하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제8항에서, 상기 워크플로우 엔진 프레임워크에 하나 이상의 상기 워크플로우 실행 엔진이 포함되며, 이 경우에 다수의 엔진 사이에는, 하나의 엔진의 출력기에서 출력될 데이터의 종착지가 다른 엔진의 입력기의데이터 출발지로 파이프라인 방식으로 전달되도록 데이터 전달경로가 사용되는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에서, 상기 하나 이상의 엔진들은 서로 다른 물리적 환경에 위치하며, 상이한 종류의 실행기를 포함하는워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에서, 상기 데이터 전달경로는 하나 이상의 상이한 유형의 데이터 전달경로를 포함하여, 데이터 출발지및 종착지별로 파이프라이닝 처리하는 것을 특징으로 하는 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "사용자에 의해 정의된 워크플로우의 실행에 필요한 워크플로우 속성명세 컴퍼넌트와 엔진 컴퍼넌트가 포함된 자원을 관리하는 자원관리부; 속성명세 컴퍼넌트를 조립하고 워크플로우 실행에 필요한 엔진 컴퍼넌트를 동적으로조합하여 워크플로우 명세에 따라 필요한 엔진 컴퍼넌트 컨테이너들을 구성하여 엔진을 생성하는 시스템공개특허 10-2019-0043446-4-구성부; 워크플로우 속성명세에 정의된 방식에 따라 상기 시스템 구성부에 의해 생성되는 하나 이상의 엔진을구동하여 실행을 제어하는 시스템 제어부를 포함하는 둘 이상의 단일도메인 워크플로우 엔진 프레임워크, 상기 둘 이상의 단일도메인 워크플로우 엔진 프레임워크와 네트워크로 연결되어, 사용자가 정의한 크로스도메인워크플로우에 따라 크로스도메인에 포함된 각 단일도메인에 필요한 엔진을 배포할 단일도메인을 결정하는 크로스도메인 융합 시스템(10')을 포함하는, 크로스도메인 적응형 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에서, 상기 크로스도메인 융합 시스템은 단일도메인 워크플로우 엔진 프레임워크의 자원관리부로부터 주기적으로 워크플로우 자원들을 보고받고 이들을갱신하여 관리하고, 각 도메인으로부터 받은 자원 정보를 통해 가용한 컴퍼넌트와 하드웨어, 네트워크 정보, 도메인 내의 디바이스 정보 등을 주기적으로 갱신하여 유지하는 크로스도메인 자원관리부,크로스도메인 워크플로우 명세를 처리하기 위해 하나의 크로스도메인 워크플로우 명세를 다수의 단일도메인 워크플로우 명세로 분할하여 각 엔진 컴퍼넌트 컨테이너의 배포위치를 결정하고 배포하는 크로스도메인 시스템 구성부를 포함하는 크로스도메인 적응형 워크플로우 엔진 프레임워크 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에서, 상기 크로스도메인 융합 시스템은 크로스도메인에 포함된 각 단일도메인에 필요한 엔진을 배포할단일도메인을 결정하기 위하여1) 각 엔진에 필요한 데이터의 출발지와 도착지가 같은 도메인에 존재하는지 파악하는 수단,2) 엔진의 데이터 출발지와 도착지가 같은 도메인에 존재하면 해당 도메인 내 자원을 이용하여 최초 데이터 출발지로부터 최종 도착지까지의 엔진 구성이 가능한지를 상기 자원관리부를 조회하여 판단하는 수단, 3) 엔진 구성이 가능하다면, 해당 도메인에 엔진을 동적으로 구성하도록 엔진 명세를 배포하는 수단, 4) 수단 1)의 판단결과 엔진의 데이터 출발지와 도착지가 같은 도메인에 존재하지 않는 경우에, 또는, 수단 2)에서 엔진 구성이 불가한 것으로 판단되면 동일한 엔진 컴퍼넌트 구성이 가능한 타 도메인을 검색하여 대체가능한 후보도메인군을 결정하는 수단,5) 후보 도메인군이 결정되면 그들 중 대체 도메인을 결정하기 위하여 비용 산정을 수행하는 수단, 6) 배포 도메인 선정정책을 적용하여 배포해야 할 최적의 도메인을 선정하는 수단을 포함하는 크로스도메인 적응형 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제14항에서, 상기 워크플로우 명세는 사용자에 의해 시스템 정의편집기에 의해 정의되어 워크플로우 명세 화일의 형태로 상기 크로스도메인 융합 시스템에 제출되되, 이 시스템 정의편집기는각종 엔진 유형을 제시하고 사용자가 이들 중 필요한 것들을 선택할 수 있도록 하는 엔진유형 선택부, 사용자가 컴퍼넌트 타입과 각 타입별 엔진 컴퍼넌트를 선택할 수 있도록 컴퍼넌트 타입별로 다양한 엔진 컴퍼넌트 목록을 제공하는 컴퍼넌트 선택부, 컴퍼넌트 선택부에서 선택된 엔진컴퍼넌트의 속성이 제시되고 사용자는 속성을 조회하여 이를 선택 및 편집할수 있도록 하는 컴퍼넌트 속성 선택/편집부를 포함하는 크로스도메인 적응형 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제14항에서, 상기 엔진은, 하나 이상의 데이터 출발지로부터 데이터를 가져오는 입력기, 상기 입력기로부터 데이터를 받아 처리하는 하나 이상의 단위처리기, 내부에서 처리한 데이터를 하나 이상의 데이터 종착지에 출력하는 하나 이상의 출력기, 공개특허 10-2019-0043446-5-입력한 데이터를 처리하기 위한 별도의 실행프로그램 또는 플랫폼을 실행하거나 세션을 관리하는 실행기, 이러한 데이터를 입력기를 통해 입력하여 실행기 상에서 처리하고 이를 출력하기 위한 일련의 제어를 담당하는제어기를 포함하는 크로스도메인 적응형 워크플로우 엔진 프레임워크."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "사용자에 의해 정의된 워크플로우의 실행에 필요한 워크플로우 속성명세 컴퍼넌트를 조립하고, 워크플로우 실행에 필요한 엔진 컴퍼넌트를 동적으로 조합하여 엔진 컴퍼넌트 컨테이너들을 구성하여 워크플로우 실행 엔진을생성하는 방법으로서, 워크플로우 명세를 입력받아, 이로부터, 엔진을 구성할 엔진 컴퍼넌트들에 대한 속성명세가 담기는 속성명세 컴퍼넌트 인스턴스를 생성하는 단계, 생성한 속성명세 컴퍼넌트 인스턴스를 엔진 컴퍼넌트의 생성자 파라미터로 지정하여 엔진 컴퍼넌트 인스턴스를생성하는 단계,.엔진 컴퍼넌트 컨테이너에 바인딩하여서 엔진 컴퍼넌트 컨테이너 인스턴스를 생성자 파라미터로 하여, 엔진을생성하는 단계를 포함하는 워크플로우 실행 엔진 생성 방법."}
{"patent_id": "10-2018-0047370", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "청구항 14의 크로스도메인 적응형 워크플로우 엔진 프레임워크에 포함된 상기 크로스도메인 융합 시스템이, 크로스도메인에 포함된 각 단일도메인에 필요한 엔진을 배포할 단일도메인을 결정하는 방법으로서, 1) 각 엔진에 필요한 데이터의 출발지와 도착지가 같은 도메인에 존재하는지 파악하는 단계,2) 엔진의 데이터 출발지와 도착지가 같은 도메인에 존재하면 해당 도메인 내 자원을 이용하여 최초 데이터 출발지로부터 최종 도착지까지의 엔진 구성이 가능한지를 상기 자원관리부를 조회하여 판단하는 단계, 3) 엔진 구성이 가능하다면, 해당 도메인에 엔진을 동적으로 구성하도록 엔진 명세를 배포하는 단계, 4) 단계 1)의 판단결과 엔진의 데이터 출발지와 도착지가 같은 도메인에 존재하지 않는 경우에, 또는, 단계 2)에서 엔진 구성이 불가한 것으로 판단되면, 동일한 엔진 컴퍼넌트 구성이 가능한 타 도메인을 검색하여 대체가능한 후보도메인군을 결정하는 단계,5) 후보 도메인군이 결정되면 그들 중 대체 도메인을 결정하기 위하여 비용 산정을 수행하는 단계, 6) 배포 도메인 선정정책을 적용하여 배포해야 할 최적의 도메인을 선정하는 단계를 포함하는 엔진 배포 도메인결정 방법."}
{"patent_id": "10-2018-0047370", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 동적 엔진 컴퍼넌트들의 유기적인 구성을 통해 목적에 맞는, 도메인 적응형의 그리고 나아가 크로스도 메인 적응형의 워크플로우 실행 플랫폼을 만들기 위한 워크플로우 엔진 프레임워크이다. 본 발명에 따르면, 사용 자에 의해 정의된 워크플로우의 실행에 필요한 워크플로우 속성명세 컴퍼넌트와 엔진 컴퍼넌트가 포함된 자원을 (뒷면에 계속)"}
{"patent_id": "10-2018-0047370", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 워크플로우 및 프레임워크 기술에 관한 것으로, 구체적으로는, 다양한 업무 도메인 또는 목적 도메인 의 워크플로우를 처리하기 위하여 동적 엔진 컴퍼넌트들의 유기적인 구성을 통해 단일도메인 적응형의 그리고 나아가 크로스도메인 적응형의 워크플로우 실행 플랫폼을 만들 수 있는 워크플로우 엔진 프레임워크에 관한 것 이다."}
{"patent_id": "10-2018-0047370", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "워크플로우 기술이란, 문서, 정보, 태스크 등을 일련의 업무절차 규칙에 의한 처리를 위해 한 사용자(어플리케 이션)에서 다른 사용자로 전달하는 비즈니스 프로세스의 자동화 기술을 의미한다. 특히 데이터기반 서비스 워크 플로우 생성절차는 다음과 같다. 먼저, 데이터 소스와 그 데이터 소스 수집방법을 결정한다. 수집된 데이터의 처리방법을 결정하고 분석방법을 결정한다(예를 들어, 기계학습, 예측, 지식추론 등에 의한 분석). 분석된 결과 를 서비스하기 위한 방법을 결정한다. 이 해당 워크플로우를 실행하기 위해 필요한 엔진(들)을 구성하고 엔진 간의 연계방법을 정의함으로써 워크플로우 생성 절차가 마무리된다. 최근에, 다양한 사물에 인공지능을 부여하는 이른바 지능형 사물인터넷이 주목받고 있다. 특히, 다수의 이종 사 물인터넷 영역을 포괄하는 지능형 인터넷 응용(예를 들어, 스마트시티)을 위해서는 이종의 사물 지능 영역을 통제 및 관리, 제어할 수 있는 시스템이 필요하다. 또한, 다양한 업무도메인(예를 들어, 에너지, 헬스, 교통·교 육·전력 플랜트 등)을 지능적으로 처리해야 하는 문제가 발생할 수 있다. 하나의 업무도메인 내에서도 데이터 의 발생과 액션이 일어나는 디바이스부터, 데이터를 처리하고 전달, 즉각적 분석, 판단하는 엣지(edge)와 복잡 한 분석과 응용이 일어나는 클라우드(cloud)까지 다양한 목적도메인이 존재할 수 있다. 또한 업무도메인이나 목 적도메인 내에서도 공간의 분류에 따른 공간도메인, 시간의 분류에 따른 시간도메인이 존재할 수 있다. 그 밖에 데이터처리도메인, 학습도메인, 예측도메인, 서비스도메인 등, 다양한 방법도메인들이 있을 수 있다. 따라서 이 러한 복잡한 다종의 다계층 도메인(이하, 크로스도메인)을 효과적으로 통제하고 관리, 제어하기 위한 일원화된 방법 및 시스템이 필요하다. 한편, 사물인터넷을 통해 수집되는 빅데이터에 포함된 인사이트를 빠르게 추출하여 비즈니스와 접목하기 위해, 사물인터넷 데이터로부터 인사이트를 추출하고 분석하여 빠르고 정확한 의사결정을 지원하기 위한 다양한 기술 이 개발되고 있다. 이를 위해서는 실시간 애널리틱스를 위한 스트림 처리기술과 실시간 예측/분석을 위한 플랫 폼 기술의 뒷받침이 반드시 필요하다. 또한 최근 급부상하고 있는 기계학습 기술을 IoT 빅데이터 분석에 활용하여 워크플로우를 설계할 필요성이 커지 고 있고 또한 다양한 목적과 분야의 IoT 도메인들이 생겨남에 따라 이들을 유기적으로 통합하여 좀 더 인사이트 있는 분석이나 서비스가 가능하도록 하는 일원화된 플랫폼 기술이 필요해지고 있다. 그러나 종래의 워크플로우 기술로는 디바이스, 데이터, 도메인에 따라 상이한 특성을 가진 IoT 빅데이터와 기계학습을 결합하는 데에는 한 계가 있다."}
{"patent_id": "10-2018-0047370", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "상술한 한계와 문제점의 극복을 위해, 엔진 컴퍼넌트들의 유기적인 구성을 통해 각 도메인의 목적에 맞는 워크 플로우를 생성하여 실행할 수 있고, 쉽게 다른 도메인에 적용하여 다른 도메인에 적합한 (도메인 적응형의) 워 크플로우를 생성하고 실행할 수 있으며, 특히 크로스도메인에 대응하기 위해 통합적으로 제어 및 관리할 수 있 는 일원화된 시스템이 필요하다. 따라서 본 발명은 동적 엔진 컴퍼넌트들의 유기적인 구성을 통해 목적에 맞는, 도메인 적응형의 그리고 나아가 크로스도메인 적응형의 워크플로우 실행 플랫폼을 만들기 위한 워크플로우 엔진 프레임워크를 제안하고자 한다."}
{"patent_id": "10-2018-0047370", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 과제를 해결하기 위한 본 발명의 한 측면에 따르면, 사용자에 의해 정의된 워크플로우의 실행에 필요한 워 크플로우 속성명세 컴퍼넌트와 엔진 컴퍼넌트가 포함된 자원을 관리하는 자원관리부; 속성명세 컴퍼넌트를 조립 하고 워크플로우 실행에 필요한 엔진 컴퍼넌트를 동적으로 조합하여 워크플로우 명세에 따라 필요한 엔진 컴퍼 넌트 컨테이너들을 구성하여 엔진을 생성하는 시스템 구성부; 워크플로우 속성명세에 정의된 방식에 따라 상기 시스템 구성부에 의해 생성되는 하나 이상의 엔진을 구동하여 실행을 제어하는 시스템 제어부를 포함하는 워크 플로우 엔진 프레임워크가 제공된다. 또한 본 발명의 다른 측면에 따르면, 상기 워크플로우 엔진 프레임워크가 둘 이상의 상이한 단일도메인에 각각 할당되고, 이들 단일도메인 워크플로우 엔진 프레임워크와 네트워크로 연결되어, 사용자가 정의한 크로스도메인 워크플로우에 따라 크로스도메인에 포함된 각 단일도메인에 필요한 엔진을 배포할 단일도메인을 결정하는 크로 스도메인 융합 시스템이 포함되는, 크로스도메인 적응형 워크플로우 엔진 프레임워크가 제공된다."}
{"patent_id": "10-2018-0047370", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "엔진 컴퍼넌트들의 유기적인 구성을 통해 각 도메인이 풀고자 하는 분야와 목적에 맞는 워크플로우를 생성하여 실행할 수 있고, 쉽게 다른 도메인에 적용하여 다른 도메인에 적합한 워크플로우를 생성하고 실행할 수 있다. 즉, 다양한 업무도메인 또는 목적도메인에서 유사한 문제들의 해결을 위한 실행 플랫폼을 용이하게 구성할 수 있도록 엔진 컴퍼넌트들을 동적으로 재활용할 수 있는 도메인 적응형 워크플로우 엔진 프레임워크를 쉽게 구성 할 수 있다. 또한 크로스도메인 지식융합 브레인을 추가로 포함함으로써, 크로스도메인 적응형 워크플로우 엔진 프레임워크를 구성할 수 있다. 나아가 IoT, 빅데이터, 기계학습을 결합하여 분석하는 대용량 데이터의 실시간 분석 서비스에 있어서, 특정한 문제의 해결을 위해 개발한 기계학습 모델 및 빅데이터 분석 모델을 컴퍼넌트를구현하여 관리할 수 있다. 다양한 인공지능 서비스나 어플리케이션이 요구되는 환경에서 응용별로 개별 솔루션을 개발하지 않고, 추가 필 요한 컴퍼넌트를 개발하여 추가 탑재하거나 기개발되어 탑재된 컴퍼넌트들을 재활용함으로써 새로운 워크플로우 를 만족하는 워크플로우 실행 엔진 세트를 구성/실행할 수 있는 프레임워크를 실현할 수 있다."}
{"patent_id": "10-2018-0047370", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은 본 발명의 워크플로우 엔진 프레임워크의 일 실시형태를 나타내는 구성도이다. 본 발명의 워크플로우 엔 진 프레임워크는 기본적으로, - 실행할 작업(워크플로우)의 구조와 명세를 작성하는 시스템 정의편집기, - 사용자가 시스템 정의편집기를 통해 작성할 워크플로우 명세(=엔진 명세. 즉, 워크플로우를 구성하는 하 나 이상의 엔진들로 구성된 명세) 상의 각 엔진 컴퍼넌트들을 정읠하기 위한 속성에 관련된 속성명세 컴퍼넌트 와 워크플로우 실행을 수행할 엔진을 구성하는 엔진 구성품에 해당되는 엔진 컴퍼넌트, 그리고 기존에 작성된 워크플로우 명세 인스턴스 등의 자원을 관리하는 자원관리부, - 워크플로우 속성명세를 조립하고 워크플로우 실행에 필요한 엔진 컴퍼넌트들을 동적으로 조합하여 구성하고, 워크플로우를 수행하는 엔진 인스턴스(이하, '엔진'과 혼용됨)를 생성하는 시스템 구성부, - 상기 시스템 구성부에 의해서 생성된 엔진 (인스턴스), - 자원관리부, 시스템 구성부, 엔진의 실행을 제어하는 시스템 제어부를 포함한다. 워크플로우 엔진 프레임워크에서, 사용자는 원하는 시스템을 만들기 위해 하나 이상의 엔진으로 구성되는 워크플로우를 정의한다. 이때 워크플로우는 하나 이상의 엔진에 대한 정의로 구성되며, 엔진에 대한 정의는 엔 진 컴퍼넌트들을 담기 위한 엔진컴퍼넌트 컨테이너와 엔진컴퍼넌트 컨테이너에 담길 엔진 컴퍼넌트의 조합에 해 당한다. 엔진 컴퍼넌트 컨테이너는 하나 이상의 입력기(reader) 컴퍼넌트, 출력기(writer) 컴퍼넌트, 실행기(runner) 컴 퍼넌트, 처리기(operator) 컴퍼넌트, 제어기(controller) 컴퍼넌트의 조합으로 만들 수 있다. 이들 하나 이상의 입력기 컴퍼넌트, 출력기 컴퍼넌트, 실행기 컴퍼넌트, 처리기 컴퍼넌트, 제어기 컴퍼넌트들은 각각 컴퍼넌트의 성질을 결정짓는 속성을 정의하기 위한 속성명세 컴퍼넌트와 컴퍼넌트들의 실제 구현체에 해당되는 실행 컴퍼넌 트의 조합으로 만들어진다. 일례로, 실행 컴퍼넌트는 Java, C++ 등의 클래스에 해당되는 것이고, 속성명세 컴퍼 넌트는 클래스의 생성자에 포함될 수 있는 생성자 파라미터 또는 생성자 파라미터를 담는 클래스에 해당된다. 이러한 방식으로 생성된 실행시스템의 정의에 해당하는 하나 이상의 엔진에 대한 워크플로우로를 정의함으로써 동적으로 실행 엔진을 구성하여 다양한 목적의 업무 도메인에 필요한 워크플로우 시스템을 만들 수 있다. 도 2는 도 1의 시스템의 구체적인 구성 및 추가가능한 구성요소를 나타낸다. 상기 시스템 구성부에 의해 동적으로 생성된 엔진 컴퍼넌트들의 조합으로 구성된 엔진들이 엔진 인스턴 스(결과적으로 완성되어 실행된 엔진)의 형태로 생성되어 관리되는 실행 인스턴스부; 자원관리부에서 관리되는 속성명세 컴퍼넌트와 엔진 컴퍼넌트가 물리적으로 또는 가상적으로 저장되는 공간인 컴퍼넌트 부; 그리고, 시스템 정의편집기로부터 워크플로우 명세를 입력받아 시스템 구성부에 전달하는 역할 을 하는 프론트엔드가 추가로 포함될 수 있다. 프론트엔드는 클라이언트로부터 요청을 받아 처리를 하기 위한 프로세스의 실행을 매개하는 역할을 수행하 고, 사용자관리나 저장소 관리 등의 다양한 요청에 대응하는 역할을 수행한다. 프론트엔드의 예를 들면 일 반적인 어플리케이션 서버, 웹기반의 REST API를 제공하는 웹어플리케이션 서버, 또는 일반적인 소켓통신 기반 의 수신자(listener) 모듈을 포함한 시스템일 수 있다. 경우에 따라서 프론트엔드는 시스템 정의편집기 또는 프레임워크를 구성하고 있는 백엔드와 상이한 네트워크 상에서 실행되는 것도 가능하다. 도 1, 도 2의 워크플로우 엔진 프레임워크를 본격적으로 설명하기에 앞서, 프레임워크에서 실행시스템 을 구동하기 위한 일련의 작업 명세를 정의하는 워크플로우를 작성하고 이를 프레임워크에서 구동하도록 지 시하기 위해 프론트엔드로 요청하는 역할을 수행하는 시스템 정의편집기에 대해 먼저 설명한다. 시스템 정의편집기는 원하는 업무에 대한 세부 도메인을 정의하고 각 도메인에 대하여 처리할 작업의 구조 (워크플로우 구조)를 정의하고 이 구조에 맞게 엔진 컴퍼넌트(들)를 선정하여 워크플로우 실행흐름을 정의하고 각 엔진 컴퍼넌트들의 구체적인 명세를 작성하는 기능을 수행한다. 이를 위해 프레임워크(특히, 자원관리부 )로부터 속성명세 컴퍼넌트와 엔진 컴퍼넌트를 조회할 수 있다. 여기서 '작업의 구조'는 예를 들어 설명하면, 특정 사물인터넷 플랫폼으로부터의 데이터 수집, 데이터 처리, 학 습 등의 과정이며, 이들을 순차적으로 처리하는 것은 워크플로우 실행흐름에 해당될 수 있다. '컴퍼넌트들의 명 세'는, 데이터를 어디로부터 가져와서 어떤 처리과정을 거치고 어디로 내보낼 것인지에 대한 작업을 수행하기 위해 어떤 디바이스로부터 수집할 것인지, 연결방법은 무엇인지, 데이터를 받아서 메모리에 둘 것인지 저장소에 넣을 것인지, 메모리 정보는 무엇인지, 저장소 위치는 어디인지 등, 각 요소 컴퍼넌트들에 대한 구체적인 정의 사항을 의미한다. 사용자(데이터 과학자, 모델 개발자, 비즈니스 개발자 등)는 시스템 정의편집기를 통해, 워크플로우를 구성 하는 엔진 컴퍼넌트와 그 엔진 컴퍼넌트의 특성을 결정짓는 파라미터들을 정의할 수 있는 속성명세 컴퍼넌 트를 규약에 따라 정의하고, 또한, 컴퍼넌트와 속성명세의 쌍을 정의하고 편집할 수 있다. 도 3은 시스템 정의편집기의 구성을 설명하기 위한 GUI 화면의 예시도이다. 이 GUI 화면을 설명함 으로써 시스템 정의편집기의 구성 및 작용에 대한 설명을 갈음하기로 한다. GUI 화면에는 기능 메뉴, 엔진유형 선택부, 컴퍼넌트 선택부, 컴퍼넌트 속성 조회/편집부, 워크플로우 인스턴스 저장/조회부가 포함된다. 기능 메뉴는 시스템 정의편집기의 각종 기능들을 선택하는 메뉴로서, 예를 들어 New(워크플로우 신규작 성), Open(저장된 워크플로우 불러오기), Save(워크플로우 저장), Run(워크플로우 실행), Result(실행결과보기), Help(도움말) 등의 기능을 선택하는 메뉴로 구성될 수 있다. 엔진유형 선택부는 각종 엔진 유형을 제시하고 사용자가 이들 중 필요한 것들을 선택할 수 있도록 한다. 엔 진의 유형으로는 예를 들어, 실시간 스트림처리 엔진, 배치 분석 엔진, 요구형(on-demand) 데이터처리 엔진, 평 가 엔진, 배치 데이터적재 엔진, 스트림 기계학습 예측 엔진, 요구형 융합서빙 엔진 등이 있다. 컴퍼넌트 선택부는 사용자가 컴퍼넌트 타입과 각 타입별 엔진 컴퍼넌트를 선택할 수 있도록 컴퍼넌트 타입 별로 다양한 엔진 컴퍼넌트 목록을 제공한다. 아래 표 1은 컴퍼넌트 선택부에서 제시되는 컴퍼넌트 타입과 엔진 컴퍼넌트 목록의 예시이다. 표 1 컴퍼넌트 타입 엔진 컴퍼넌트 Reader(입력기)FileReader HttpServerReader Kafka Reader MongodbReader ... Writer(출력기)FileWriter KafkaWriter MongodbReader ... Controller(제어기)SparkSessionController SparkSessionStreamController ... Runner(실행기)SparkRunner TensoflowRunner ... Operator(처리기)MinMaxScaler Aggregator ... 컴퍼넌트 속성 선택/편집부는 컴퍼넌트 선택부에서 선택된 엔진 컴퍼넌트의 속성(Properties)들이 제시 되고 사용자는 속성을 조회하여 이를 선택 및 편집할 수 있다. 워크플로우 인스턴스 선택부는 기제작된 워크플로우가 저장된 목록이 표시된다. 이들 중에서 재활용을 원하 는 워크플로우를 선택하여 재편집을 하거나, 그대로 프레임워크에 실행요청을 할 수 있다. 재활용의 단위는 워크플로우 전체일 수도 있고, 또는 워크플로우에 포함된 단일 엔진별로 재활용하여 편집이나 실행에 활용할 수 도 있다. 이러한 시스템 정의편집기에서 워크플로우 명세 화일이 만들어지면 이는 도 1에 나타낸 프레임워크의 시스템 구성부에 제출된다. 이때에 프론트엔드가 워크플로우 명세를 입력받아 시스템 구성부에 전 달하는 역할을 할 수 있다. 도 1과 도 2로 다시 돌아가면, 프레임워크의 자원관리부는 워크플로우의 실행에 필요한 컴퍼넌트들을 관리하는 기능을 수행한다. 자원관리부는 구체적으로 도 2에 나타낸 것과 같이, -워크플로우 인스턴스의 컴퍼넌트 특성 또는 속성을 결정짓는 속성명세가 포함된 속성명세 컴퍼넌트와 그 목록을 관리(업데이트 포함)하는 속성명세 컴퍼넌트 관리부, -실행을 위한 컴퍼넌트(엔진 컴퍼넌트)들과 그 목록을 관리(업데이트 포함)하는 엔진 컴퍼넌트 관리부를 포 함한다. 또한, 기존에 작성되어 저장된 워크플로우 명세 인스턴스를 관리하는 워크플로우 명세 인스턴스 관리부를 추가로 포함할 수 있다. 이 워크플로우 명세 인스턴스 관리부는 시스템 정의편집기의 요청에 따라 (가 령, 도 3의 워크플로우 인스턴스 선택부를 통해) 워크플로우 명세 인스턴스를 추후에 활용할 수 있도록 보 관 및 관리한다.또한 도 1에서 시스템 구성부는 작성된 워크플로우의 실행에 필요한 컴퍼넌트를 생성하는 기능을 수행한다. 시스템 구성부는 프론트엔드로부터 넘겨받은 워크플로우 스펙(명세)에 따라 필요한 엔진 컴퍼넌트 컨테 이너들을 구성하여 엔진 인스턴스를 생성한다. 도 2를 참조하여 더 자세히 보면, 시스템 구성부는 -시스템 정의편집기로부터 수신한 실행 플랫폼 구성 워크플로우 명세를 속성명세 컴퍼넌트로 바인딩하여 일 련의 속성명세 컴퍼넌트를 생성하는 워크플로우 속성명세조립부, -조립한 속성명세 컴퍼넌트들로부터, 정의된 엔진 컴퍼넌트 정보를 추출하여 속성명세 컴퍼넌트와 엔진 컴퍼넌트를 바인딩하는 과정을 통해 일련의 엔진 컴퍼넌트를 구성하여 워크플로우 실행 플랫폼을 구성하는 워크플로우 구성부를 포함한다. 워크플로우 속성명세조립부는 실행 플랫폼을 구성하기 위한 워크플로우 명세를 속성명세 컴퍼넌트로 바 인딩하여 일련의 속성명세 컴퍼넌트 인스턴스를 생성한다. 워크플로우 속성명세조립부에 의해 생성되는 속 성명세 컴퍼넌트의 예를 들면, 구글의 Protobuf 메세지 객체, 스칼라의 Case Class, 자바의 Property 객체 등을 들 수 있다. 워크플로우 구성부는 워크플로우를 구성하는 엔진 컴퍼넌트와 이 엔진 컴퍼넌트의 특성을 결정짓는 파라미터들을 정의한 속성명세 컴퍼넌트를 바인딩하고, 바인딩 과정을 통해 생성한 엔진컴퍼넌트들의 인스 턴스를 엔진컨테이너에 바인딩함으로써 워크플로우를 실행하기 위한 일련의 엔진 인스턴스들이 포함되는 워크플 로우 실행 인스턴스부를 동적으로 구성한다. 워크플로우 실행 인스턴스부에는 워크플로우 구성부에 의해 동적으로 생성된 하나 이상의 엔진이 만들어져서 실행된다. 하나의 워크플로우를 실행하기 위해 생성 된 이들 엔진은 하나의 독립된 프로그램 패키지로서 동일 컴퓨팅 머신 또는 네트워크로 연결된 컴퓨팅 머신 상에 배포되고 실행되거나, 가상머신 단위로 패키징되어 상이한 물리적 컴퓨팅 머신에 배포될 수 있다. 도 1과 도 2의 시스템 제어부는 시스템 구성부가 생성한 엔진 인스턴스들을 처리 절차에 맞게 구동 하고, 또한 구동된 엔진 인스턴스를 종료시키는 역할을 수행하는 등, 본 발명의 프레임워크의 핵심 역할을 수행하는 모듈이다. 워크플로우 속성명세에 정의된 방식에 따라 워크플로우 실행 인스턴스부 내에 만들어지 는 하나 이상의 엔진을 구동하여 실행을 제어한다. 다시 말해, 시스템 제어부가 워크플로우 실행 인스 턴스부에 워크플로우 실행 요청을 하면, 워크플로우가 실행된다. 이로써, 원하는 어떠한 도메인에 대해서도 사용자에 의해 작성된 워크플로우가 이루고자 하는 목적을 달성할 수 있다. 예를 들어 시스템 제어부는 다수의 상이한 유형을 데이터 출발지(source)와 종착지(destination)로 하는 하 나 이상의 엔진이 서로 파이프라인 방식으로 실행되도록 제어할 수 있다. 또는 다수의 상이한 유형을 데이 터 출발지와 종착지로 하는 하나 이상의 엔진이 동시실행 되도록 제어할 수 있다. 다양한 유형의 엔진 구성에 대해서 차후에 상세히 설명한다. 도 4는 시스템 정의편집기에서 작성된 워크플로우 명세로부터 엔진을 구성하는 절차를 도시한다. 우선, 시스템 구성부의 워크플로우 구성부는 워크플로우 명세를 입력받아, 이로부터, 엔진을 구성 할 엔진 컴퍼넌트들에 대한 속성명세가 담기는 일련의 속성명세 컴퍼넌트 인스턴스를 생성한다. 이때 사용 되는 속성명세 컴퍼넌트는 구글의 프로토버프 메세지나 스칼라 케이스클래스, 기타 프로그램 언어 상에서 값을 담을 수 있는 'Class'일 수 있다. 생성한 속성명세 컴퍼넌트 인스턴스를 엔진 컴퍼넌트의 생성자 파라미터로 지정하여 엔진 컴퍼넌트 인스턴 스를 생성한다. 엔진을 구성하는 제어기, 입력기, 실행기, 출력기, 단위처리기를 포함하는 엔진 인스턴스가 생성되면, 이들을 엔진 컴퍼넌트 컨테이너 인스턴스를 생성자 파라미터로 하여, 엔진 컴퍼넌트 컨테이너에 동적 바인딩하여서 엔진 인스턴스를 생성하는 과정을 통해 엔진 인스턴스를 생성한다. 워크플로우 상의 모든 엔진 정의에 대 해 엔진 인스턴스가 생성되고, 생성된 엔진 인스턴스는 워크플로우 실행 인스턴스부에서 실행 및 관리 된다. 이러한 도 4의 절차로써 워크플로우 실행 인스턴스를 동적으로 구성한다. 여기서 하나의 엔진은 가상머신 형태 로 정의되고 구성될 수 있다. 도 5~도 10은 도 1에서 언급한 워크플로우 구성부에 의해 구성되는 워크플로우 실행 인스턴스의 예시로서 다양한 엔진 구성의 방식을 도시한다. 도 5에 나타낸 기본적인 엔진은, 하나 이상의 데이터 출발지(source)로부터 데이터를 가져오는 입력기 (reader), 내부에서 처리한 데이터를 하나 이상의 데이터 종착지에 출력하는 하나 이상의 출력기 (writer), 입력한 데이터를 처리하기 위한 별도의 실행프로그램 또는 플랫폼을 실행하거나 세션을 관리하 는 실행기(runner), 이러한 데이터를 입력기를 통해 입력하여 실행기 상에서 처리하고 이를 출력하기 위한 일련의 제어를 담당하는 제어기(controller)로 구성된다. 상기 컨트롤러(제어기)는 상기 입력기, 출력기, 실행기, 및 하기 단위처리기를 이용 한 일련의 처리과정을 제어하는 기능을 수행한다. 입력기에 데이터소스(출발지)로부터 데이터를 읽어오라 는 입력요청을 하고, 실행기에 입력기를 통해 읽은 데이터를 처리 프레임워크를 구동하여 처리하고 출력기 로 보내라는 처리요청을 하고, 출력기로 하여금 처리 완료된 데이터를 데이터 종착지에 쓰도록 출력요청을 한다. 엔진의 입력기는 인메모리 버퍼나 캐시, 파일시스템, 메세징시스템, 데이터베이스, 네트워크드라이버 중의 어느 하나의 타입의 데이터 저장소(도시하지 않음)로부터 데이터를 읽는 기능을 수행한다. 마찬가지로, 출 력기는 인메모리 버퍼나 캐시, 파일시스템, 메세징시스템, 데이터베이스, 네트워크드라이버 중의 어느 하 나의 타입의 데이터 저장소(도시하지 않음)에 데이터를 쓰는 기능을 수행한다. 단위처리기는 데이터를 받 아 가공하여 내보내는 기능을 수행한다. 예를 들어 데이터마이닝에서 언급하고 있는 정제/통합/축소/변환 방법 에 포함된 다양한 데이터처리 기능의 구현체일 수 있다. 실행기는 데이터를 처리하기 위해 필요한 모든 프 로그램이나 외부 플랫폼/프레임워크들이 될 수 있으며, 빅데이터 처리를 위한 Spark, 딥러닝 분석을 위한 Caffe, Tensorflw와 같은 딥러닝 플랫폼, Jena와 같은 지식처리엔진 중 하나와 연동하거나 이를 실행하기 위한 커넥터나 제어기, 세션관리기 등이 될 수 있다. 한편, 제어기는, 도 5, 6과 같이, 입력기, 하나 이상의 단위처리기(323a~c), 출력기의 순으로 노드들이 구성되는 경우에, 데이터를 순차적으로 파이프라이닝하여 다음 노드로 전달하는 방식으로 실행하도록 제어하는 순차처리 방식, 각각의 노드가 동시에 실행되도록 하는 동시처리 방식, 이 둘을 결합한 동시/순차처리 방식 등을 이용하여 제어할 수 있다. 도 6은 도 5의 기본적인 엔진을 구성하는 방식 중, 입력된 데이터를 제어기에 의해 처리하는 일련의 과정을 하나 이상의 연속된 단위처리기(unit operator)(323a-c)를 이용하여 순차적으로 파이프라인 방식으로 데 이터 처리를 하여 출력기까지 전달하도록 구성된 엔진을 도시한다. 제어기는 입력기에 데이터출 발지로부터 데이터를 읽어오라는 입력요청을 하고, 실행기에 데이터 처리를 위한 프레임워크를 구동하여 입력기를 통해 읽은 데이터를 처리하도록 처리기실행요청을 하고, 각 단위처리기(323a-c)에 파이프라인 처리 실 행 요청을 하고, 출력기로 하여금 처리 완료된 데이터를 데이터 종착지에 쓰도록 출력요청을 한다. 도 6의 구성방법에 의하면 다양한 단위처리기를 조합 활용하여 다양한 도메인의 목적에 맞는 처리를 쉽게 수행할 수 있 다. 단위처리기(323a-c)는 일반적인 데이터마이닝의 기법들에 해당하는 정제, 축소, 통합, 변환을 위한 방법의 구현체들일 수 있다. 도 7은 도 6에 예시한 데이터 처리엔진의 구체적 실시형태를 나타낸다. 데이터를 처리하기 위한 Spark 프레임워 크를 실행하고 파일이나 JDBC, Kafka 등으로부터 데이터를 읽는 입력기(Reader)를 통해 데이터를 읽어 특정 컬 럼을 삭제(remove)하는 단위처리기(operator)와, 병합(concatenation) 및 누락치 임퓨테이션(imputation) 단위 처리기, 정규화(scaling) 단위처리기, 정제(filter) 단위처리기, 피벗(pivot) 단위처리기를 통해서 파일, JDBC, Kafka 등으로 출력하는 출력기(writer)를 포함하는 데이터 처리엔진을 구성할 수 있다. 도 8은 도 6의 제어기가 단위처리기(323a~c)를 구동하는 다른 방식의 엔진으로서, 입력기로부터 데이 터를 받아서 일련의 단위처리기가 순차적으로 파이프라이닝에 의한 데이터를 처리하는 방식과 함께, 하나 이상 의 단위처리기가 구동되어 동시처리를 실행하도록 제어하는 방식의 엔진 구성을 도시한다. 이상에서 설명한 다양한 구성의 엔진의 다른 실시형태로서, 실행기를, Caffe 또는 Tensorflow와 같은 딥러닝 프레임워크, Spark 또는 Hadoop MapReduce와 같은 빅데이터 처리 프레임워크, R 또는 Python과 같은 분 석 프레임워크 등의 다양한 처리 프레임워크나 소프트웨어 프로그램과 연동하도록 또는 이들을 포함하도록 구성 할 수 있다. 또다른 실시형태로서, 상기 설명한 엔진을, 동일한 시스템 내의 다양한 데이터 경로를 데이터 출발지 및 종 착지로 사용하는 입력기와 출력기를 탑재하도록 구성할 수 있다. 즉, 인메모리 버퍼/캐시, 파일시스템, 메세징시스템, 데이터베이스, 네트워크 등의 다양한 논리적 드라이버 개념의 소스(동일 시스템에 포함됨)를 데이터출 발지 및 종착지로 정의하고 이들로부터 데이터를 입력받고 이들로 데이터를 출력하도록 입력기와 출력기를 구성 하여 엔진을 구성할 수 있다. 또다른 실시형태로서, 상기 설명한 엔진을, 상이한 시스템 또는 네트워크에 존재하는 데이터 경로를 각각 데이터 출발지와 종착지로 사용하는 엔진을 구성할 수 있다. 이를 위해 입력기와 출력기에 대한 설정에 네트워 크 주소 정보나 호스트 정보, 원격 드라이버 정보를 포함시킬 수 있다. 상이한 데이터 출발지와 종착지를 입력 기와 출력기에 별개로 사용함으로써 엔진을 데이터 출발지와 종착지 사이에서의 스트림 처리 엔진이나 데이터 경로 상의 필터처럼 활용할 수 있는 것이다. 도 9는 다수의 워크플로우 실행 엔진(32a~c)이 구성되는 경우에 하나의 엔진의 출력기에서 출력될 데이터의 종 착지가 다른 엔진의 입력기의 데이터 출발지로 파이프라인 방식으로 전달되도록 데이터 전달경로가 사용되 는 실시형태를 도시한다. 여기서 데이터 전달경로는 예를 들어 Kafka일 수 있다. 도 9와 같은 구성을 이용 함으로써 여러 개의 상이한 용도의 워크플로우 처리를 하는 엔진(32a~c)들이 협력하여 복잡한 워크플로우를 실 행하는 것이 가능하다. 또한 도 9에서, 하나 이상의 엔진(32a~c)들은 서로 다른 물리적 환경(가령, 네트워크, 클러스터 등)에 놓일 수 있으며, 상이한 종류의 실행기로 구성하는 것이 가능하다. 예를 들면, 첫 번째 엔진(32a)은 데이터를 처리하는 실행기를 연동하고 두 번째 엔진(32b)은 딥러닝 프레임워크를 연동한다고 할 경우, 상기 데이터 전달경로 에 의해 상이한 환경에서 복잡한 문제를 해결하기 위한 하나의 워크플로우를 실행하는 것이 가능하다. 이때 각 각의 엔진들은 동시 실행, 하나씩 순차적 실행, 또는 특정 시점에 따른 개별적 실행 모두 가능하다. 도 10은 하나 이상의 엔진(32a~c)이 상이한 유형의 데이터 전달경로(예를 들어, 파일시스템 전달경로와 네 트워크스트림 전달경로)를 데이터 출발지 및 종착지별로 파이프라이닝 처리하는 방식으로 워크플로우 실행 시스템을 구성한 예를 도시한다. 이 경우에 각 엔진 내의 입력기와 출력기는 복수로 구성된다. 여기서 파일시스 템 전달경로는 배치 전달경로를 의미하고, 네트워크스트림 전달경로는 실시간 전달경로를 의미한다. 도 10의 방식에 의해 실시간 처리와 배치 처리가 동시에 가능한 람다아키텍쳐와 같은 구조의 워크플로우 시스템 을 구성할 수 있다. 이상에서 설명한 본 발명의 프레임워크의 구성 및 작용에 대한 이해를 돕기 위하여 구체적인 워크플로우 서비스 시나리오를 소개하기로 한다. 도 11은 IoT 및 인공지능 기반의 조도/온도 제어 워크플로우 서비스 시나리오의 설명도이다. 워크플로우 엔진 프레임워크는 건물내 온도센서로부터의 온도센싱값을 수신하여 프레임워크 내에 생성된 엔진(들)을 통해 소정의 워크플로우를 실행하여 스마트전구를 제어하여 최적 조도조절을 수행하고 스마트 시스템냉난방 기를 제어하여 최적 온도조절을 수행한다. \"80\"은 온도센서로부터 유입되는 데이터를 입력으로 예측모델에 의해 미래, 예를 들어 향후 1시간 후의 온 도의 변화를 예측하고, 예측 온도에 적합한 조도설정과 에어컨 온도 제어설정 값을 추론하여 이를 스마트전구 의 조도조절과 스마트시스템냉방기의 온도설정 값으로 전송하는 조도 및 온도제어 인공지능 서비스를 나타낸다. 도 12는 딥러닝 기반의 교통속도 모니터링 서비스 시나리오의 설명도이다. 본 발명의 워크플로우 엔진 프레임워 크는 특정지역의 교통현장에 구축되어 있는 교통속도센서(시뮬레이터)로부터 속도정보를 전송받아서 프 레임워크 내에 생성된 엔진(들)을 통해 소정의 워크플로우를 실행하여 실행 데이터를 해당 지역에 구축되어 있는 교통속도예측 지능 서비스에 제공하여, 운행중 차량의 대쉬보드 또는 스마트폰 화면을 통해 모니터링하도록 할 수 있다. 차량 또는 스마트폰을 통해 모니터링되는 내용은 '86'과 같이 예를 들어 특정 지역의 지도에 표시되는 교통속도 정보이다. 도 13은 도 11의 워크플로우 엔진 프레임워크의 내부 구성을 설명한다. 워크플로우 엔진 프레임워크에 서 생성된 엔진에 인제스천(Ingestion)/데이터/예측을 위한 엔진과 서빙 엔진이 포함되어 있다. 인제스천/데이터/예측 엔진의 구성요소는 다음과 같다. 522: 웹서비스 포트를 열어 들어오는 데이터를 읽는 스트림 입력기 528: 스트림데이터를 읽어 일정 갯수가 쌓이면 입력기, 오퍼레이터(523a~f), 출력기를 순차적으로 처 리하도록 하는 컨트롤러(제어기) 523a: 데이터 중 온도값이 위치한 컬럼을 추출하는 오퍼레이터(처리기) 523b: 특정값의 범위로 값을 정규화하는 오퍼레이터 523c: 컬럼을 열로, 또는 열을 컬럼으로 변환하는 오퍼레이터 523d: 전달된 값을 지정된 기계학습모델을 이용하여 예측/판단하는 오퍼레이터 523e: 역정규화를 위해 특정값의 범위로 값을 환원하는 오퍼레이터 523f: 예측결과로 생성된 여러 값들 중에서 레이블 값이 포함된 특정 컬럼을 추출하는 오퍼레이터 524: 최종값을 스트림엔진(예를 들어, Kafka)으로 쓰는 출력기 526: 오퍼레이터가 실행될 수 있도록 하는 환경을 제공하는 실행기. 서빙 엔진의 구성요소는 다음과 같다. 532: 스트림엔진으로부터 필요시마다 값을 읽는 입력기 536: 특정 웹포트를 열고 최종 사용자로부터의 요청을 대기하는 웹서버 실행기(RestRunner). 538: Rest Runner에서 실행 중인 웹서버 상의 특정 웹포트를 통해 요청이 왔을때 입력기를 통해 인제 스천(Ingestion)/데이터/예측 엔진의 처리결과 값을 읽어 이 예측 값을 사용자 요청에 담겨 있는 상황정보 값과 조합하여 데이터베이스를 참조하여 최적의 값을 검색하여 응답하도록 일련의 흐름을 제어하는 컨트롤러 온도센서의 온도센싱값이 REST 신호로 인제스천/데이터/예측 엔진에 입력되어 시스템 정의편집기를 통해 설계된 다수의 처리기를 거쳐서 처리되면, 출력되는 예측결과값은 저장소로부터 읽혀서 서빙 엔진으로 전달되고 온도센서의 온도센싱값에 따라 스마트전구가 제어되어 자동 조도조절이 수행된다. 도 14는 클라이언트나 사용자에 대한 서비스를 제공하는 엔진으로서 지능서비스를 제공하기 위한 서빙 엔진의 구성 예시를 보여준다. 입력기, 다수의 파이프라인 처리기(323a~c), 출력기, 실행기, 제어기 의 구성요소는 도 8에서 설명된 것과 유사하다. 다만 도 14의 서빙 엔진은 도 11 및 도 13의 워크플로우 서비스에 있어서의 서비스 실행을 서빙하는 기능을 위하여 구성된다. 도 14에 각 컴퍼넌트와 연동하는 외부 시 스템, Spark, Tensoflow, Jena(time), REST Server, Jena(space), Jena(domain-specific)이 표시되어 있다. 서빙 엔진의 제어기는 Spark 같은 실행기로 구성된 엔진로부터 처리한 데이터를 읽거나 텐서플로우 같은 딥러 닝 프레임워크를 실행기로 구성한 엔진로부터 처리한 데이터를 읽는 입력기와, 그 값을 이용하여 온톨로지 기반 추론을 수행하는 처리기와, 그 결과를 REST 인터페이스를 통해서 서비스하는 실행기로 엔진을 구성함으로써 지 능적 서비스를 제공할 수 있다. 도 15는 도 12의 워크플로우 엔진 프레임워크의 내부 구성을 설명한다. 워크플로우 엔진 프레임워크에 서 생성된 엔진에, 1382개 Link의 교통센서로부터 5분단위로 시간/속도/TRV가 실시간 전송되면 이를 읽어서 Tensorflow RNN 동작을 위한 Link별 24 시간 시리즈(time series) 데이터를 전처리하고 전송하는 데이터 엔진 과, Tensorflow RNN 동작을 위한 Link별 24 time series를 수신하여 15분 후의 예측값을 출력하는 예측 엔 진이 포함되어 있다. 데이터 엔진에는 도 5~8과 유사하게 입력기, 제어기, 실행기, 처리기(543a~f)가 포함된다. 예측 엔진의 경우에도 도 5~8과 유사하게 입력기와 제어기가 포함되지만, 실행기 대신에, RNN(순 환신경망) 기반의 예측을 수행하는 텐서플로우(Tensorflow)가 포함된다. 도 16은 이상에서 설명한 다수의 단일도메인 적응형 워크플로우 엔진 프레임워크들을 네트워크를 통해 서로 협력적으로 연결하여 크로스도메인 적응형의 워크플로우 엔진 프레임워크 시스템을 동적 구성하기 위한 방법을 도시한다. 도 1의 워크플로우 구성의 대상이 크로스도메인에 해당되는 경우에, 하나 이상의 단일도메인 적응형 워크플로우 엔진 프레임워크를 총괄적으로 관리하고 제어하기 위한 크로스도메인 융합 시스템(10')을 추가 로 포함하여, 크로스도메인 적응형 워크플로우 엔진 프레임워크를 구현할 수 있다. 크로스도메인 융합 시스템(10')은 기본적으로, 도 1 또는 도 2의 단일도메인 워크플로우 엔진 프레임워크와 유사한 구성 및 기능을 가지며 다양한 도메인들을 통합하여 계층화하는 역할을 하는 것으로, 크로스도메인 워크 플로우 실행에 관련되는 자원들을 관리하고 각 도메인에 크로스도메인 워크플로우의 일부를 워크플로우로서 할당하고 이를 각 도메인의 프레임워크 상에서 실행시키는 시스템이다. 따라서 크로스도메인 융합 시스템(10')은 크로스도메인 자원관리부(20'), 크로스도메인 시스템 구성부(30'), 크로스도메인 시스템 제어부(40')를 포함한 다. 앞에서 소개한 개념의 시스템 정의편집기(70')를 이용하여 사용자가 워크플로우를 정의해서, 데이터 수집은 어 느 센서로부터 취득할 것인지, 모델은 어느 것을 선택할지, 엔진을 생성해서 적절한 곳에 배포할 것 등의 요청 이 담긴 워크플로우 명세를 작성하면, 크로스도메인 융합 시스템(10')은 시스템 정의편집기(70')에서 정의된 워 크플로우에 따라, 해당되는 도메인에 필요한 엔진(들)을 배포할 도메인을 결정한다. 이때 엔진배포 결정의 기준 은 가령, 특정 엔진의 사용이 어느 도메인에 최적인지, 이 엔진의 실행을 위한 구성품들이 해당 도메인에 존재 하는지, 네트웍 부하, 성능, 네트웍내 거리 등을 고려한다. 크로스도메인 자원관리부(20')는 다수의 단일도메인 워크플로우 엔진 프레임워크(도 1 또는 도 2 참조)의 자원관리부로부터 주기적으로 워크플로우 자원들을 보고받고 이들을 갱신하여 관리하는 일을 수행한다. 예 를 들어, 워크플로우 자원은 워크플로우 실행을 위한 컴퍼넌트 자원, 네트워크 연결정보, 하드웨어 자원정보, 가상머신의 사양정보, 조직의 구성정보, 조직의 가용 디바이스 정보, 가용상태 중 하나 이상일 수 있다. 또한 크로스도메인 자원관리부(20')는 각 도메인으로부터 받은 자원 정보를 통해 가용한 컴퍼넌트와 하드웨어, 네트 워크 정보, 도메인 내의 디바이스 정보 등을 주기적으로 갱신하여 유지한다. 자원관리부(20')가 관리하는 자원 은 예를 들어, 각 도메인별 엔진 컴퍼넌트 목록 , 비용산정을 위한 자료, 도메인간의 신뢰도 등이다. 크로스도메인 시스템 구성부(30')는 시스템 정의편집기(70')로부터 받은 크로스도메인 워크플로우 인스턴스 명 세를 처리하기 위해 크로스도메인 자원관리부(20')로부터 가용자원이 있는 위치와 연결방법 등을 참고하여 하나 의 크로스도메인 워크플로우 인스턴스 명세를 다수의 단일도메인 워크플로우 명세로 분할하여 각 단일도메인 워 크플로우 엔진 프레임워크에 배포하고 그 실행을 제어한다. 크로스도메인 시스템 제어부(40')는 하나 이상의 단일도메인 워크플로우 엔진 프레임워크에 의해 생성된 각 각의 워크플로우 실행시스템. 즉 도메인에 배포된 하나 이상의 엔진들의 실행의 시작, 종료 등의 제어를 위해 각각 단일 도메인 워크플로우 엔진 프레임워크 상의 시스템 제어부에 실행의 제어를 요청한다. 각 단일도메인 워크플로우 엔진 프레임워크는 자신이 가진 자원의 목록을 크로스도메인 융합 시스템(10')에 등록하고 주기적으로 갱신을 요청한다. 여기서 자원의 목록은 워크플로우 실행을 위한 컴퍼넌트 자원목록일 수 있으며, 네트워크 연결정보, 하드웨어 자원정보, 가상머신의 사양정보, 조직의 구성정보, 조직의 가용 디바이스 정보, 가용상태 등이 또한 해당될 수 있다. 크로스도메인 자원관리부(20')는 각 도메인으로부터 받은 자원 정보, 즉, 가용한 컴퍼넌트와 하드웨어, 네트워 크 정보, 도메인 내의 디바이스 정보 등을 확인하고 가용 범위 내에서 최적의 엔진 배치와 컴퍼넌트 구성의 목 록을 정의하여 각 도메인의 워크플로우 엔진 프레임워크에 실행을 요청한다. 각 도메인의 워크플로우 엔진 프레임워크는 각자의 도메인에 할당된 엔진을 동적으로 구성하고 실행요청에 의해 엔진을 구동하여 처리를 수행한다. 이때 엔진 간의 데이터 전달은 도 10에서 언급한 바와 같이 네트워크 드라이버를 통해 직접 수행될 수도 있으며, 분산 메시지큐와 같은 메시징 시스템, 그 외 분산파일시스템 등 다양한 데이터 경로 중 하나 이상 을 이용해서 전달할 수도 있다. 각 단일도메인 워크플로우 엔진 프레임워크의 시스템 제어부는 엔진들의 진행상황이나 완료 등의 신호 를 다시 크로스도메인 융합 시스템(10')의 크로스도메인 시스템 제어부(40')에 전달한다. 도 17은 도 16의 크로스도메인 융합 시스템(10')에서 워크플로우 명세를 받아 이를 효과적으로 배포하고 실행하 기 위한 실행 절차를 도시한다. 이때의 워크플로우는 해결하고자 하는 문제나 응용에 따라 단일도메인 또는 크 로스도메인 적응형 워크플로우일 수 있다. 먼저, 시스템 정의편집기(70')에서 워크플로우 생성절차에 의해서 일련의 워크플로우를 결정하고 이를 구성하는 엔진들을 만들기 위한 엔진 컴퍼넌트 컨테이너군이 포함된 워크플로우 명세를 정의한다. 크로스도메인 융 합 시스템(10')이 시스템 정의편집기(70')로부터 워크플로우 명세를 받으면, 워크플로우 명세에 설정된 엔진 컴 퍼넌트 컨테이너(들)을 어느 도메인에 배포할 것인지 배포위치를 결정하고 배포하는 과정으로 넘어간다. 워크플로우 상에서 필요로 하는 엔진(들)에 대한 명세가 도메인(들)에 배포되면 단일도메인에 대한 또는 크로스 도메인에 대한 워크플로우를 실행하기 위한 모든 준비가 완료되며 마지막으로 해당 워크플로우를 실행한다 . 크로스도메인 융합 시스템(10')에서 크로스도메인 시스템 구성부(30')가 각 엔진 컴퍼넌트 컨테이너의 배포위치 를 결정하고 배포하는 과정을 구체적으로 설명하면 다음과 같다. 우선 각 엔진에 필요한 데이터의 최초 출발지(엔진이 수집해야 하는 데이터의 위치. 가령, 특정 DB, 센서 위치 등)와 최종 도착지(예컨대, 다른 엔진에 대한 데이터 출발지, 또는 저장소 위치)가 같은 도메인에 존재하는지 파악한다. 이때 데이터의 출발지와 도착지는 사물인터넷 기기이거나 데이터베이스와 같은 구조화된 데이터 저장소, 파일시스템 등일 수 있으며, 웹서비스 종단이 될 수도 있다. 데이터의 출발지와 도착지가 같은 도메인에 존재하면 해당 도메인 내 자원을 이용하여 최초 데이터 출발지로부 터 최종 도착지까지의 일련의 엔진 구성이 가능한지를 자원관리부를 조회하여 판단한다. 만약 엔진 구성이 가능하다면(가령, 해당 도메인의 자원 레지스트리에 엔진 구성이 가능한 엔진 컴퍼넌트들이 모두 존재하는 경우), 해당 도메인에 엔진을 동적으로 구성하도록 엔진 명세를 배포하여 워크플로우가 실행될 수 있도록 한다. 다시 210 단계로 돌아가, 상기 엔진의 데이터 출발지와 도착지가 같은 도메인에 속하지 않는 경우에, 또는, 단 계 220에서 해당 도메인내 자원을 이용하여 엔진 컴퍼넌트 컨테이너의 구성이 가능한지 판단한 결과 구성불가로 판단되면 동일한 컴퍼넌트 구성이 가능한 타 도메인을 검색하여(자원관리부를 검색) 대체가능한 후보도메인군을 결정하는 단계로 넘어간다. 후보 도메인군이 결정되면 그들 중 대체 도메인을 결정하기 위하여 비용 산정을 수행한다. 이때 비용은 네 트워크 토폴로지 상의 거리, 네트워크 처리량, 예상 지연시간 등과 같은 네트워크 전달비용의 산정액, 가용한 컴퓨팅자원의 양, 도메인 간의 신뢰도 중의 하나 이상을 조합하여 계산할 수 있다. 다음으로, 계산한 비용을 가지고 배포 도메인 선정정책(들)을 적용하여 배포해야 할 최적의 도메인을 선정한다 . 이때 도메인 선정정책은 각 도메인의 자원에 대해 동일비율 또는 동일량으로 배분되도록 하는 공정배분 정책, 에너지 효율성을 고려한 최적에너지정책, 도메인별로 우선순위를 두어 배분하는 우선순위정책 등이 될 수 있다. 비용, 정책의 단계순서는 비순서적이다. 워크플로우 상에서 필요로 하는 모든 엔진에 대한 명세가 해당 도메인(들)에 배포되면 해당 도메인 또는 크로스도메인에 대한 워크플로우를 실행하기 위한 모든 준비가 완료된 것이며 최종적으로 워크플로우를 실행한 다. 크로스도메인 융합 시스템(10')에 있는 시스템 제어부(40')의 실행 지시가 컨트롤 채널을 통해 각 단 일도메인 프레임워크의 시스템 제어부에 전달되어 실행된다. 도 16과 도 17의 크로스도메인 적응형 워크플로우 엔진 프레임워크에 대한 이해를 위하여 구체적인 관련 시나리 오와 시스템 구성을 설명하기 위한 도면(도 18~20)을 통해 추가로 설명한다. 도 18은 스마트시티를 달성하기 위한 시나리오를 설명하기 위한 것이다. 우선, 스마트시티는 최적의 (스마트) 공공에너지 수급제어와 공공교통제어, 그리고 기타 분야의 최적제어를 통해 달성할 수 있다. 그 중 최적의 공공 에너지 수급제어는 공공에너지 수급정책에 따라 최적의 공공에너지 수요제어와 공급제어를 통해 달성할 수 있다. 여기서 스마트 공공에너지 수요제어는, 최적의 가로등제어와 안개제어(예컨대, 안개제거장치의 제어), 기 타 최적의 공공장치 제어를 통해서 달성할 수 있다. 이 중 최적의 가로등제어는, 예측된 도로별 교통량, 예측된 기상상태에 따른 최적의 도로교통제어정책을 참조하여 달성할 수 있다. 도로별 교통량예측은 도로별 교통량을 모니터링결과를 참조하여 예측에 활용해 달성하는 것이 가능하다. 도 19는 도 18의 스마트시티를 달성하기 위하여 구성한 크로스도메인 워크플로우 엔진 프레임워크의 일 실시형 태를 도시한다. 우선, 도로교통량 모니터링은 다양한 교통센서로부터 센싱데이터를 수집하는 엔진과, 이 수집엔진이 수집한 센 싱정보를 읽어 총계, 평균과 같은 교통량 통계를 위한 오퍼레이션 처리를 하는 교통량통계 처리엔진과, 외부의 요청에 대해 교통량 통계처리 결과를 응답하는 교통량통계 서빙 엔진으로 구성된 도로교통량 모니터링 워크플로 우를 통해 엔진프레임워크에서 실행함으로써 목적하는 시스템을 구성할 수 있다. 다음으로 도로별 교통량 예측은, 상기 도로교통량 모니터링 워크플로우의 교통센서정보 수집엔진과 수집된 센싱정보를 예측에 필요한 입력데이터 형태로 처리하고 처리한 데이터를 읽어 기계학습 기반의 예측을 수행하는 교통량예측 엔진과, 예측결과를 외부의 요청에 따라 응답하는 교통량예측 서빙 엔진으로 구성된 도로별 교통량 예측 워크플로우를 정의하고 실행함으로써 목적하는 시스템을 동적으로 구성할 수 있다. 기상예측은, 기상정보를 수집하고 적절하게 처리하는 기상정보수집 엔진과, 기계학습모델 기반으로 기상을 예측 하는 기상예측 엔진과, 기상예측결과를 서빙하기 위한 기상예측 서빙 엔진으로 구성된 기상 예측 워크플로우를 정의하고 실행함으로써 목적하는 시스템을 구성할 수 있다. 도로교통제어 정책은, 특정상황에 해당하는 컨텍스트를 입력으로 규칙에 기반한 추론 또는 추천 (recommendation) 오퍼레이션을 통해 지식베이스나 기계학습 등을 이용하여 최적의 도로교통제어 정책을 추출하 는 상황별 도로교통제어 추천 엔진을 포함하는 도로교통제어 워크플로우를 정의하고 실행함으로써 목적을 달성하기 위한 시스템을 구성할 수 있다. 스마트가로등제어는 상기에서 기술한 교통량예측 서빙 엔진과 기상예측 서빙 엔진에 각각 도로별 교통량예측결 과 기상예측결과를 질의하기 위한 오퍼레이션과 그 결과를 상기 상황별 도로교통 제어 추천 엔진에 제공하여 필 요한 도로교통제어를 추론하여 얻기 위한 오퍼레이션을 포함하여 외부의 요청에 응답하는 스마트가로등제어 추 천 엔진을 생성하는 스마트가로등제어 워크플로우를 정의하여 실행함으로써 목적을 달성하기 위한 시스템을 구성할 수 있다. 그 밖에 설명하지 않은 도 18에 도시된 시나리오들은 위와 유사한 방법으로 각각의 워크플로우를 구성함으로써 각각의 목적을 달성하는 시스템을 동적으로 구성할 수 있다. 도 20은 도 19에 나타낸 시나리오들 중에서 스마트 가로등제어를 위한 워크플로우 구성에서 스마트가로등제 어 추천 엔진 구성의 일 실시형태를 예시한다. 스마트가로등제어 추천 엔진은, 외부의 요청에 응답하기 위한 RESTful Server를 구동하기 위한 Runner 컴퍼넌트와, RESTful 서버로 요청이 들어왔을 때 기상 예측결과를 조회하는 오퍼레이터를 통해 기상예측엔진(93')에 질의하여 예측할 결과를 가져오는 오퍼레이터 (323a)와, 교통량예측엔진(92')에 질의함으로써 향후 도로별 교통량예측결과를 질의하여 가져오는 오퍼레이터 (323c), 각 오퍼레이터들이 획득한 결과를 받아 상황정보를 생성하고 생성한 상황정보를 이용하여 상황별 도로 교통제어 추천 엔진(90')에 질의함으로써 상황에 받는 도로별 교통제어를 얻고, 그 중 가로등제어 정책을 추출 하여 REST Server에 전달하는 오퍼레이터(323b)와 이들 Runner와 Operator간의 논리의 흐름관계를 제어하는 Controller로 구성할 수 있다. 이제, 다시 도 17의 크로스도메인 워크플로우의 실행 절차로 돌아가, 일련의 워크플로우 실행을 위한 필요 엔진 컴퍼넌트 컨테이너군 결정을 수행한 후 각 엔진 컴퍼넌트 컨테이너에 대한 배포위치 결정 및 배포를 위한 절차 중, 대체후보도메인 결정을 위한 기준이 되는 비용산정 및 최적의 후보도메인 결정에 대해 서 각 시나리오별로 보충 설명한다. 도로교통제어 워크플로우에서의 상황별 도로교통 제어 추천 엔진의 경우에 그 추천 결과가 가로등제어 추천 과 직결되므로 도메인간 신뢰도 우선의 가중치 정책에 따른 엔진배포가 수행된다. 도로교통량 모니터링 워크플로우에서의 센싱데이터 수집 엔진, 교통량통계 처리엔진, 교통량통계 서빙 엔진 에 대해서는, 실시간 모니터링을 위해 엔진 배포시 네트워크 전달 비용과 가용 컴퓨팅 자원 우선의 가중치 정책 에 따라 엔진들을 배포한다. 도로별 교통량예측 워크플로우의 도로교통량 모니터링 워크플로우의 교통량예측 엔진과 교통량예측 서빙 엔 진은, 수집엔진의 수집 결과를 이용하여 예측을 수행해야 하므로 수집엔진이 배포된 도메인과의 네트워크 비용 을 우선으로 하여 엔진을 배포한다. 기상 예측 워크플로우에서 기상정보는 보안상 중요한 정보가 아니므로 가용한 컴퓨팅 자원을 우선으로 엔진 을 배포한다. 스마트가로등제어 추천 엔진이 포함된 스마트가로등제어 워크플로우에서는 각각의 질의대상 엔진이 다른 도 메인에 배포되어 있고 중요한 정보를 담고 있으므로, 도메인간 신뢰도 우선의 가중치 정책에 따라 엔진을 배포 한다. 이상의 구성 및 프로세스를 통하여, 사물인터넷, 빅데이터, 기계학습을 결합하여 분석하는 대용량 데이터의 실 시간 분석 서비스 등에 있어서, 특정한 문제의 해결을 위해 개발한 기계학습 모델 및 빅데이터 분석 모델을 컴 퍼넌트를 구현하여 관리할 수 있다. 또한 다양한 업무나 목적 도메인에서 유사한 문제의 해결을 위한 실행 플랫 폼을 용이하게 구성할 수 있도록, 상기 컴퍼넌트를 동적으로 재활용할 수 있는 단일도메인 또는 크로스도메인 적응형 워크플로우 엔진 프레임워크를 구현할 수 있다. 도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10 도면11 도면12 도면13 도면14 도면15 도면16 도면17 도면18 도면19 도면20"}
{"patent_id": "10-2018-0047370", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명에 따른 워크플로우 엔진 프레임워크의 개요도 도 2는 시스템 구성부의 세부 구성도 도 3은 시스템 정의편집기의 구성을 설명하기 위한 GUI 화면 예시도 도 4는 워크플로우를 구성하는 엔진에 대한 명세로부터 엔진을 구성하는 절차를 나타낸 도면 도 5는 도 1의 워크플로우 구성부에 의해 구성가능한 워크플로우 실행 인스턴스의 예시로서의 엔진의 구성 도 도 6은 단위처리기를 탑재한 엔진 구성의 일례를 나타낸 도면 도 7은 도 6에 예시한 데이터 처리엔진의 구체적 실시형태도 도 8은 단위처리기를 탑재한 엔진 구성의 다른 예를 나타낸 도면. 도 9는 하나 이상의 엔진이 파이프라인 방식으로 연결되는 워크플로우 실행 시스템의 구성을 나타낸 도면. 도 10은 하나 이상의 엔진이 다수 유형의 데이터 경로를 통하는 워크플로우 실행 시스템의 구성을 나타낸 도면. 도 11은 IoT 및 인공지능 기반의 조도/온도 제어 워크플로우 서비스 시나리오의 설명도 도 12는 딥러닝 기반의 교통속도 모니터링 서비스 시나리오의 설명도 도 13은 도 11의 워크플로우 엔진 프레임워크의 내부 구성 도 14는 클라이언트나 사용자에 대해 서비스를 제공하는 엔진으로서 지능서비스를 제공하기 위한 서빙 엔진의 구성의 예시를 나타낸 도면 도 15는 도 12의 워크플로우 엔진 프레임워크의 내부 구성 도 16은 크로스도메인 워크플로우 엔진 프레임워크 구성의 예를 나타낸 도면 도 17은 크로스도메인 워크플로우의 실행 절차를 나타낸 도면 도 18은 스마트시티를 달성하기 위한 시나리오를 설명하기 위한 도면 도 19는 도 18의 스마트시티를 달성하기 위하여 구성한 워크플로우 엔진 프레임워크의 일 실시형태 도 20은 도 19에 나타낸 워크플로우 94의 스마트가로등제어 추천엔진 구성의 일 실시형태"}
