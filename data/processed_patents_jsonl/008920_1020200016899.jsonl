{"patent_id": "10-2020-0016899", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2020-0145648", "출원번호": "10-2020-0016899", "발명의 명칭": "제로 스키핑 및 계층적으로 구조화된 프루닝 방법을 이용한 신경망 하드웨어 가속기 시스템", "출원인": "삼성전자주식회사", "발명자": "호치버그 에얄"}}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "인공 신경망(artificial neural network)을 처리하는 컴퓨팅 시스템에 있어서,비제로(non-zero) 가중치의 위치를 찾도록 구성된 제로 스키핑(zero-skipping) 회로를 포함하는 프로세서;메모리; 및상기 메모리 내에 저장된 인공 신경망;을 포함하고,상기 인공 신경망은 하나 이상의 컨볼루션 레이어를 포함하는 복수의 레이어를 포함하고, 상기 하나 이상의 컨볼루션 레이어 각각은 복수의 필터를 포함하고, 상기 복수의 필터 각각은 복수의 채널을 포함하고, 상기 복수의채널 각각은 복수의 로우(row)를 포함하고, 상기 복수의 로우 각각은 복수의 가중치를 포함하며,상기 하나 이상의 컨볼루션 레이어 내의 상기 복수의 채널은 하나 이상의 완전 프루링 채널(fully prunedchannel: FPC)과 하나 이상의 혼합 2D 채널(MC)을 포함하고, 상기 하나 이상의 완전 프루링 채널은 제로 가중치만을 포함하고, 상기 하나 이상의 혼합 2D 채널(MC) 각각은 적어도 하나의 비제로 가중치를 포함하며,상기 하나 이상의 혼합 2D 채널(MC)의 적어도 일부는, 상기 제로 스키핑 회로가 단일 사이클에서 처리하도록 구성된 가중치의 개수에 기초한 제한 제로 시퀀스(limited zero sequence: LZS) 조건을 만족하는,인공 신경망을 처리하는 컴퓨팅 시스템."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 제한 제로 시퀀스(LZS) 조건은 제로 시퀀스의 최대 길이를 부과하는 BZS(bounded length zero) 조건을 포함하는,인공 신경망을 처리하는 컴퓨팅 시스템."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 제한 제로 시퀀스(LZS) 조건은 상기 제로 스키핑 회로가 단일 사이클에서 처리하고 스킵하도록 구성된 필터 가중치 시퀀스 내의 제로 가중치의 최대 개수 및 위치에 기초하는,인공 신경망을 처리하는 컴퓨팅 시스템."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "인공 신경망(Artificial neural network: ANN)을 프루닝(pruning)하는 방법에 있어서,상기 인공 신경망의 레이어에 대한 제로 가중치의 목표 비율을 식별하는 단계;상기 레이어에 대한 제한 제로 시퀀스(Limited zero sequence: LZS) 조건을 식별하는 단계로서, 상기 제한 제로시퀀스(LZS) 조건은 상기 레이어 내의 제로의 위치 또는 시퀀스 길이에 대한 제한을 포함하는 단계;상기 레이어의 하나 이상의 가중치를 제로로 설정함으로써 상기 제로 가중치의 목표 비율에 적어도 부분적으로기초하여 상기 레이어를 프루닝하는 단계;공개특허 10-2020-0145648-3-상기 프루닝하는 단계 후에, 상기 레이어 내의 각각의 제로 시퀀스가 상기 제한 제로 시퀀스(LZS) 조건을 위반하는지 판단하는 단계; 및상기 제한 제로 시퀀스(LZS) 조건을 위반하는 각각의 제로 시퀀스 내의 적어도 하나의 가중치를 비제로(non-zero) 값으로 리셋하는 단계를 포함하는인공 신경망을 프루닝하는 방법."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 프루닝하는 단계 및 상기 리셋하는 단계에 적어도 부분적으로 기초하여 제로 마스크를 생성하는 단계; 및상기 제로 마스크에 기초하여 상기 인공 신경망을 계속 훈련시키는 단계;를 더 포함하는,인공 신경망을 프루닝하는 방법."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "인공 신경망(Artificial neural network: ANN)을 처리하는 컴퓨팅 시스템에 있어서,상기 인공 신경망의 가중치와 입력 텐서(tensor)의 값을 저장하도록 구성된 하나 이상의 메모리 유닛; 및복수의 가속기 서브 시스템을 포함하고,각각의 가속기 서브 시스템은,상기 인공 신경망의 가중치를 저장하도록 구성된 멀티플렉싱(multiplexing) 버퍼;상기 인공 신경망의 추가 가중치를 저장하도록 구성된 룩 어헤드(look-ahead) 버퍼;상기 인공 신경망의 다음 비제로(non-zero) 가중치를 식별하도록 구성된 제로 스키핑(zero-skipping) 회로; 및상기 제로 스키핑 회로에 의해 식별된 상기 다음 비제로 가중치를 상기 입력 텐서로부터의 복수의 대응하는 값과 함께 동시에 처리하도록 구성된 복수의 곱셈-누산(MAC(multiply-accumulate)) 유닛;을 포함하는,인공 신경망을 처리하는 컴퓨팅 시스템."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 인공 신경망은 적어도 하나의 컨볼루션 레이어를 포함하고, 상기 적어도 하나의 컨볼루션 레이어는 복수의필터를 포함하고, 각각의 필터는 복수의 채널을 포함하고, 각각의 채널은 복수의 로우(row)를 포함하고, 각각의로우는 복수의 가중치를 포함하며, 상기 룩 어헤드 버퍼는 고정된 개수의 가중치 로우를 저장하도록 구성되는,인공 신경망을 처리하는 컴퓨팅 시스템."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 인공 신경망의 완전 프루링 채널(Fully pruned channel: FPC)을 식별하고 스킵하도록 구성된 제어 유닛을더 포함하는,공개특허 10-2020-0145648-4-인공 신경망을 처리하는 컴퓨팅 시스템."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "인공 신경망(Artificial neural network: ANN)을 처리하는 방법에 있어서,멀티플렉싱(multiplexing) 버퍼 내에 제1 가중치 로우(row)를 저장하는 단계로서, 상기 제1 가중치 로우는 상기인공 신경망의 컨볼루션 레이어의 필터로부터의 혼합 2D 채널(MC)에 대응하고, 상기 MC는 적어도 하나의 비제로가중치를 포함하는 단계;상기 혼합 2D 채널(MC)로부터의 하나 이상의 제2 가중치 로우를 룩 어헤드(look-ahead) 버퍼 내에 저장하는 단계;상기 제1 가중치 로우의 각각의 제로가 아닌(non-zero) 가중치를 처리하는 단계로서, 하나 이상의 곱셈-누산(MAC(multiply-accumulate)) 유닛을 이용하여 상기 비제로 가중치의 각각에 입력 값을 곱하는 단계를 더 포함하는 단계;상기 하나 이상의 제2 가중치 로우가 룩 어헤드 한계에 기초하여 적어도 하나의 비제로 가중치를 포함한다고 판단하는 단계로서, 상기 룩 어헤드 한계는 상기 인공 신경망의 제한 제로 시퀀스(Limited zero sequence: LZS)조건에 적어도 부분적으로 기초하는 단계; 및상기 판단에 적어도 부분적으로 기초하여 상기 제2 가중치 로우를 상기 룩 어헤드 버퍼로부터의 상기 멀티플렉싱 버퍼 내로 복사하는 단계를 포함하는,인공 신경망을 처리하는 방법."}
{"patent_id": "10-2020-0016899", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 필터 내에 연결 리스트(linked list)를 생성하는 단계로서, 상기 연결 리스트 내의 각각의 혼합 2D 채널(MC)는 적어도 하나의 비제로 가중치를 포함하고, 상기 연결 리스트 내의 각각의 엔트리는 상기 연결 리스트 내의 다음 혼합 2D 채널(MC)의 인덱스를 포함하는 단계;상기 연결 리스트 내의 각각의 엔트리를 순차적으로 판독하는 단계로서, 상기 MC는 상기 연결 리스트 내의 엔트리에 기초하여 처리되는 단계; 및상기 연결 리스트 내에 대응하는 엔트리를 가지지 않는 상기 필터의 완전 프루링 채널(Fully pruned channel:FPC)에 기초하여 상기 완전 프루링 채널(FPC)을 스킵하는 단계;를 더 포함하는,인공 신경망을 처리하는 방법."}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "인공 신경망(Artificial neural network: ANN)의 구조화된 프루닝(pruning), 제로 스키핑(zero-skipping) 및 가 속 처리를 위한 시스템 및 방법이 설명된다. ANN은 하나 이상의 컨볼루션 레이어를 포함할 수 있다. 컨볼루션 레 이어의 필터 내의 2D 채널은 각각이 제로 가중치만을 포함하는 완전 프루링 채널(Fully pruned channel: FPC)들 (뒷면에 계속)"}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 신경망 하드웨어 가속기 시스템에 관한 것으로, 보다 상세하게는 인공 신경망(artificial neural network: ANN)의 제로 가중치(zero weight)에 대한 구조화된 프루닝(pruning) 및 제로 스키핑(zero-skipping) 방법에 관한 것이다."}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "ANN 모델은 컴퓨터 비전, 음성 인식, 자연어 처리, 비디오 분석, 의료 이미징 및 진단, 주식 시장 예측, 자율 주행, 로봇 내비게이션 등과 같은 다양한 분야에서 풍부하고 복잡한 데이터를 처리하는데 사용될 수 있다. ANN 을 이용한 데이터 처리는 다수의 연산(computations)을 필요로 하므로, 연산 효율성을 높이는 것이 중요하다. ANN의 연산 효율성의 양상은 어플리케이션 별도 달라질 수 있다. 예를 들어, 모바일 전화기에 ANN을 구현하는 경우, 모바일 전화기의 제한된 배터리로 인해 전력 최적화가 보다 중요한 요소일 수 있다. 또한, 자율 주행 차 량에 ANN을 구현하는 경우, 도로 상의 이벤트에 대한 빠른 응답을 보장하기 위하여 짧은 레이턴시(latency)가 필수적이므로, 연산 속도가 보다 중요한 요소일 수 있다. 따라서, 연산 속도와 레이턴시 모두에 관하여 ANN의 연산 효율성을 높일 수 있는 ANN 시스템 및 그 동작 방법에 대한 요구가 높아지고 있다."}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 기술적 사상이 이루고자 하는 기술적 과제 중 하나는, 계층적 스파스(sparse) 컨볼루션 신경망 (convolution neural network: CNN) 모델, 이러한 모델을 생성하기 위한 프로세스, 및 이를 효율적으로 처리하 도록 구성된 시스템을 제공하는 것이다. 본 발명의 다양한 실시예들은, 트레이닝된 ANN의 형상과 크기는 유지하 면서도, 계층적으로 구조화된 방식으로 제로 값들이 높은 비율로 분포하는 새로운 가중치 세트를 생성하는 구조 화된 프루닝(pruning) 방법을 제공하는 것이다. 또한, 본 발명의 다양한 실시예들은, 구조적으로 프루닝된 ANN 의 제로 프로세싱(processing of zeros)을 스킵(skip)하면서 추론(inference processing) 속도를 높이기 위한 컨볼루션 가속기(convolution accelerator: CA)를 제공하는 것이다."}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "ANN을 처리하는 컴퓨팅 시스템이 설명된다. 본 발명의 실시예들에 따른 컴퓨팅 시스템은, 제로가 아닌(non-zero) 가중치의 위치를 찾도록 구성된 제로 스키 핑 회로를 포함하는 프로세서, 메모리 및 메모리 내에 저장된 ANN을 포함할 수 있고, ANN은, 하나 이상의 컨볼 루션 레이어를 포함하는 복수의 레이어를 포함하고, 하나 이상의 컨볼루션 레이어의 각각은 복수의 필터를 포함 하고, 각각의 필터는 복수의 채널을 포함하고, 각각의 채널은 복수의 로우(row)를 포함하고, 각각의 로우는 복 수의 가중치를 포함하며, 하나 이상의 컨볼루션 레이어 내의 복수의 채널은 하나 이상의 완전 프루링 채널 (Fully pruned channel: FPC)과 하나 이상의 혼합 2D 채널(MC)을 포함하고, 하나 이상의 FPC는 제로 가중치만 을 포함하고, 하나 이상의 MC의 각각 적어도 하나의 비제로 가중치를 포함하며, 하나 이상의 MC의 적어도 일부 는, 제로 스키핑 회로가 단일 사이클에서 처리하도록 구성된 가중치의 개수에 기초한 제한 제로 시퀀스(Limited zero sequence: LZS)를 만족할 수 있다. ANN의 제로 가중치의 구조화된 프루닝을 위한 방법, 장치 및 코드를 저장하는 비일시적인 컴퓨터 판독 가능한 매체가 설명된다. 본 발명의 실시예들에 따른 방법, 장치 및 비일시적인 컴퓨터 판독 가능한 매체는, ANN의 레이어에 대한 제로 가중치의 목표 비율을 식별하는 단계와, 레이어에 대한 제한 제로 시퀀스(Limited zero sequence: LZS) 조건을 식별하는 단계로서, LZS 조건은 레이어 내의 제로의 위치 또는 시퀀스 길이에 대한 제한을 포함하는 단계와, 레 이어의 하나 이상의 가중치를 제로로 설정함으로써 제로 가중치의 목표 비율에 적어도 부분적으로 기초하여 레 이어를 프루닝하는 단계와, 프루닝하는 단계 후에, 레이어 내의 각각의 제로 시퀀스가 LZS 조건을 위반하는지 판단하는 단계와, LZS 조건을 위반하는 각각의 제로 시퀀스 내의 적어도 하나의 가중치를 제로가 아닌(non- zero) 값으로 리셋하는 단계를 제공할 수 있다. 프루닝된 ANN의 제로 가중치의 제로 스키핑을 적용하는, 구조적으로 프루닝된 ANN의 추론 처리를 가속하기 위한 컴퓨팅 시스템이 설명된다. 본 발명의 실시예들에 따른 컴퓨팅 시스템은, ANN의 가중치와 입력 텐서(tensor)를 저장하도록 구성된 하나 이 상의 메모리 유닛과, 복수의 가속기 서브 시스템과, ANN의 가중치를 저장하도록 구성된 멀티플렉싱 (multiplexing) 버퍼와, ANN의 추가 가중치를 저장하도록 구성된 룩 어헤드(look-ahead) 버퍼와, ANN의 다음 제로가 아닌(non-zero) 가중치를 식별하도록 구성된 제로 스키핑 회로와, 제로 스키핑 회로에 의해 식별된 다음비제로 가중치를 입력 텐서로부터의 복수의 대응하는 값과 함께 동시에 처리하도록 구성된 복수의 곱셈-누산 (MAC(multiply-accumulate)) 유닛을 포함할 수 있다. 본 발명의 실시예들에 따른 컴퓨팅 시스템은, 제1 가중치 로우를 저장하기 위한 멀티플렉싱 버퍼를 제공할 수 있고, 제1 가중치 로우는 ANN의 컨볼루션 레이어의 필터로부터의 MC에 대응하고, MC는 적어도 하나의 제로가 아 닌 가중치를 포함하여, MC로부터의 하나 이상의 제2 가중치 로우를 룩 어헤드(look-ahead) 버퍼 내에 저장하고, 제1 가중치 로우의 각각의 제로가 아닌(non-zero) 가중치를 처리하고(가중치를 처리하는 것은 하나 이상의 MAC 유닛을 이용하여 제로가 아닌 가중치의 각각에 입력 값을 곱하는 것을 더 포함함), 하나 이상의 제2 가중치 로 우가 룩 어헤드 한계에 기초하여 적어도 하나의 제로가 아닌 가중치를 포함한다고 판단하고, 판단에 적어도 부 분적으로 기초하여 제2 가중치 로우를 룩 어헤드 버퍼로부터의 멀티플렉싱 버퍼 내로 복사한다."}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시예들에 따른 제로 스키핑 및 계층적으로 구조화된 프루닝 방법은, 트레이닝된 인공 신경망(ANN) 의 형상과 크기는 유지하면서도, 계층적으로 구조화된 방식으로 제로 값들이 높은 비율로 분포하는 새로운 가중 치 세트를 생성할 수 있다. 또한, 본 발명의 실시예들에 따른 제로 스키핑 및 계층적으로 구조화된 프루닝 방법은, 구조적으로 프루닝된 ANN의 제로 프로세싱(processing of zeros)을 스킵(skip)하면서 추론(inference processing) 속도를 높일 수 있다. 본 발명의 다양하면서도 유익한 장점 및 효과는 상술한 내용에 한정되지 않으며, 본 발명의 구체적인 실시예를 설명하는 과정에서 보다 쉽게 이해될 수 있을 것이다."}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 발명의 바람직한 실시예들에 대해 상세하게 설명한다. 도면 상의 동일한 구성 요소에 대해서는 동일한 참조부호를 사용하고 동일한 구성요소에 대한 중복된 설명은 생략하기로 한다. 본 발명의 실시예들은 인공 신경망(artificial neural network: ANN)의 처리를 가속하는 것에 관한 것이다. 본 발명의 실시예들은 계층적 스파스(sparse) 컨볼루션 신경망(convolution neural network: CNN) 모델, 이러한 모델을 생성하기 위한 알고리즘 및 이를 효율적으로 처리하도록 계획된 전용 하드웨어 가속기를 설명한다. 본 발명의 실시예들은 인공 신경망(ANN)의 트레이닝 및 가속된 사용(\"추론(inference)\" 연산이라고도 함)과 관련된 2개의 상보적인 양태를 포함할 수 있다. 첫째, 트레이닝된 인공 신경망(ANN)의 원래 형상 및 크기를 유지하지만 계층적으로 구조화된 방식으로 제로 파라미터가 높은 비율로 분포하는 새로운 가중치 세트를 생성하는 프루닝 (pruning) 방법이 설명된다. 둘째, 인공 신경망(ANN)에서의 컨볼루션 연산의 처리 속도를 높이기 위한 컨볼루션 가속기(convolution accelerator: CA) 하드웨어가 설명된다. 컨볼루션 가속기(CA)의 제로 스키핑 제어 메커니즘은 구조화된 인공 신경망(ANN)의 스파스 계층 구조를 효율적 으로 이용할 수 있게 하여, 제로 파라미터와 관련된 곱셈 및 덧셈 연산에 소요되는 시간을 감소시킬 수 있다. 그 결과, 컨볼루션 가속기(CA)는 대역폭과 전력을 줄이는 동시에, 인공 신경망(ANN)의 전반적인 연산 속도를 상 당히 높일 수 있다. 인공 신경망(ANN) 필터에서 어떠한 구조도 갖지 않고 임의 분포된 제로들을 스키핑하는 것 은 복잡하고 전력 집약적인 회로를 필요로 할 수 있지만, 본 발명의 실시예들에 따른 제로 스키핑 제어 방법에 따르면, 인공 신경망(ANN)이 스파스 계층 구조를 이용하여 프루닝됨으로써, 매우 작고 전력 효율적이며, 거의 완벽한 제로 스키핑을 가능하게 할 수 있다. 이것은 제로 스키핑 제어의 룩-어헤드(look-ahead) 제한과 프루닝 된 필터 구조에 부과된 제약(프루닝 동작 및 언프루닝 동작의 조합에 따라 성취될 수 있음)과의 긴밀한 결합에 의해 성취될 수 있다. 일부 예에서, 프루닝 방법은, 일부 채널은 완전히 프루닝되는 반면, 다른 채널은 요청된 다른 비율로 부분적으로 프루닝되는 필터를 구성할 수 있다. 이러한 필터는, DRAM에서 필터를 페치(fetch)하기 위하여 컨볼루션 가속기(CA)에 의해 소비되는 대역폭을 상당히 줄일 수 있다. 따라서, 인공 신경망(ANN)을 프루닝함으로써 생성되는 계층 구조는, 인공 신경망(ANN)을 처리하기 위해 필요한 연산의 대부분을 차지하는 제로 파라미터를 처리하는데 관련된 시간 및 컨볼루션 레이어를 계산하기 위하여 소 비되는 대역폭을 감소시키기 위하여, 대응하는 제로 스키핑 하드웨어에 의해 사용될 수 있다. 주어진 시간 단계 에서, 컨볼루션 가속기(CA)는 곱셈-누산(multiply-accumulate: MAC) 유닛을 이용하여 하나 이상의 가중치를 처 리할 수 있다. 동시에, 제로 스키핑 제어는 다음 시간 단계에서 처리될 다음의 비제로(non-zero) 가중치를 하나 이상 선택하기 위하여 하나 이상의 룩-어헤드 버퍼를 사용할 수 있다. 그러나, 큰 버퍼 및 관련 로직은 상당한 칩 면적과 전력을 소비하기 때문에, 큰 버퍼 및 관련 제어 로직은 작은 룩-어헤드 범위를 가진다. 제로 스키핑 제어의 이러한 제한은 컨볼루션 가속기(CA)가 예측되지 않았을 수 있는 제로 가중치에 시간을 소비하게 할 수 있다. 이러한 문제점을 해결하기 위하여, 프루닝 알고리즘은 컨볼루션 가속기(CA)의 룩 어헤드 제한을 고려하고, 작은 크기에도 불구하고 제로 스키핑 메커니즘이 실패하지 않도록 제로의 위치를 구조화할 수 있다. 본 발명의 실시예들은 CNN 효율을 향상시키는 것에 관한 것이다. CNN은 이미지, 사운드(예를 들어, 시간에 대한 스펙트럼 특징), 비디오 등과 같은 다차원 신호를 처리하기 위하여 종종 사용되는 ANN의 카테고리이다. CNN은 종종 지시된 수학적 그래프로서 연결된 레이어 세트를 포함한다. 중심 유형의 레이어는, 이후에 ANN에서의 연속 으로 연결된 레이어에 의해 처리되는 출력 3D 텐서(tensor)를 총괄적으로 생성하기 위하여. 3D 텐서가 일련의 3D 필터를 이용하여 컨볼루션되는 컨볼루션 레이어이다. 컨볼루션 동작은 많은 MAC 동작을 필요로 한다. 각각의 곱셈 동작은 때때로 '가중치(weight)'라 하는 필터 파라 미터 및 입력 데이터 값을 연관시킨다. 필터 파라미터가 제로일 때, 곱셈 결과도 제로이다. 이러한 경우에, 다 중 곱셈 및 연속하는 덧셈인 MAC의 양 부분은 컨볼루션의 최종 결과에 영향을 주지 않으면서 스킵될 수 있다. 이것은 '제로 스키핑(zero-skipping)'이라 불린다. '프루닝(pruning)'이라는 용어는 컨볼루션의 필터 파라미터에서 제로의 개수를 증가시키는 명시적인 행위를 말 한다. 트레이닝된 ANN의 임의의 선입적 지식이 없는 프루닝은 제로 가중치의 개수와 위치에 따라 정확성에 상당 한 해를 입힐 수 있다. 그러나, 프루닝되는 가중치의 주의 깊은 선택, 정밀 튜닝 및 기타 기술은 정확성 열화를 감소시키는데 사용될 수 있다, '구조화된 프루닝(structured pruning)'은 필터에서 제로의 출현에 대하여 구조적 제한을 도입하는 것을 말한다. 예를 들어, '벡터별로(vector-wide)' 구조화된 프루닝에서, 컨볼루션 필터의 일부 2D 채널에서의 완전 한(full) 1D 벡터는 제로로 명시적으로 설정된다. '형상별로(shape-wise)' 구조화된 프루닝은 특정의 고정된 위 치 서브세트가 주어진 컨볼루션 레이어의 모든 3D 필터에서 제로로 설정될 때를 나타낼 수 있다. 본 발명의 실시예들에 따르면, 컨볼루션 동작을 구현하는 CA 하드웨어는 제로 가중치 또는 데이터 입력의 존재 를 이용하고 이에 따라 무관한 MAC 동작을 스킵할 수 있다. 스키핑은, 제로가 관찰될 때마다 MAC 회로의 활성화 를 회피함으로써, 규칙적인 방식으로 컨볼루션을 계산하는 동안 구현될 수 있다. 이러한 접근 방식은 MAC 계산 에서 투자된 전력의 일부를 절약할 수 있다. 그러나, 컨볼루션 처리 순서를 유지하는 동안의 제로 스키핑은 제 로 가중치 파라미터를 (예를 들어, DRAM으로부터) 페치하기 위한 에너지와 제로와 관련된 MAC 유닛을 위한 시간 의 낭비를 초래할 수 있다. 따라서, 컨볼루션 엔진의 동작의 대안적인 모드는 불규칙한 방식으로 컨볼루션을 처 리하여 제로와 관련된 동작에서 시간 및 잠재적으로는 페치 에너지의 낭비를 방지하는 것이다. 일부 예에서, 이것은 필터 가중치와 입력 값을 페치하고 처리하는 순서에 대하여 미리 결정하는 복잡한 제어 메 커니즘에 의존할 수 있다. 예를 들어, 제로 스키핑 제어 메커니즘을 갖는 신경 가속기는 시간 낭비 없이 필터 내의 모든 제로 또는 대부분의 제로를 스킵하려고 시도할 수 있다. 그러나, 이러한 제어 유닛은 복잡할 수 있고, 큰 회로를 필요로 할 수 있다. ANN 가속기가 통상적으로 많은 MAC 동작을 병렬로 포함하기 때문에, 개별 MAC 또는 MAC 그룹을 위한 독립적인 제어 유닛이 필요할 수 있다. 제로 스키핑 제어 유닛의 중복은 칩 면적을 상당히 증가시킨다. 일부 예에서, 복잡한 회로는 스킵된 MAC 동작에 의해 성취되는 전력 절약보다 더 많은 전력 을 소비할 수 있다. 더욱이, 불규칙적으로 위치된 제로는 필터 가중치를 페치하는데 필요한 대역폭을 감소시키 는 것을 어렵게 한다. 따라서, 본 발명의 실시예들은 컨볼루션 필터를 위한 계층적으로 구조화된 프루닝(Hierarchical Structured Pruning: HSP)을 설명한다. 실시예들은 추가로 계층 구조에 따라 주어진 ANN을 프루닝하는 방법과, 컨볼루션 필 터의 프루닝된 구조를 이용하도록 구성된 작고 효율적인 제로 스키핑 메커니즘을 포함하는 컨볼루션 가속기(CA) 하드웨어를 포함한다. 도 1은 본 발명의 실시예들에 따라 ANN을 처리하기 위한 스테이지들의 일례를 도시한다. 도시된 예는 제1 스테이지, 제2 스테이지, 제3 스테이지, 제4 스테이지, 제5 스테이지 및 제6 스테이지를 포함한다. 각각의 스테이지는 입력 데이터, 필터 및 출력 채널 또는 출력 텐서를 포함할 수 있다. 본 발명의 실시예들은 각각의 스테이지가 더욱 효율적으로(즉, 더 적은 계산 단계를 가지면서) 진행하도록 필터를 프루닝하고 필터 내의 제로를 스킵하는 시스템 및 방법을 설명한다. 본 발명의 실시예들의 양태들은 하나 이상의 컨볼루션 레이어를 포함하는 CNN에 관련될 수 있다. 컨볼루션 레이 어의 메인 \"추론(inference)\" 계산은 차원(dimension)이 Xd×Yd×Z인 3D 입력 데이터 텐서(D)인 입력과 일련의 N개의 사전 계산 3D 필터 사이의 수학적 이산 컨볼루션(discrete convolution)을 수행하는 것이다. 각각의 3D 필터(Fn)는 동일한 차원 Xf×Yf×Z를 가진다. 데이터 및 필터 모두는 동일한 크기(Z)의 제3 차원을 공유한다. Xf 및 Yf는 통상적으로 Xd 및 Yd보다 더 작다(절대로 더 크지는 않음). 데이터 텐서(D)와 각각의 필터(Fn) 사이 의 컨볼루션 동작(' ' 기호로 나타냄)의 결과는 2D 출력 채널(Rn)이며, 가중치는 w와 h로 표시된다. 수학식 1"}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "총괄하여, 모든 N개의 2D 출력 채널은 컨볼루션 동작의 출력인 3D 텐서를 형성한다. 일부 CNN에서, 컨볼루션 레 이어는 또한 각각의 채널에 바이어스 값을 더하고 그에 대하여 비선형 동작을 수행하는 것을 포함한다. 필터(Fn)를 사용하여, 각각의 스칼라 값 은 입력 텐서(D)에서의 하나의 위치 상에 Fn을 위치시키고, 대응하는 데이터 값과 필터 가중치의 쌍들 사이에 곱셈을 수행하며, 모든 곱셈 결과를 누산함으로써 계산된다. 수학식 2"}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "여기서, θw 및 θh는 데이터 텐서 상의 필터의 제1 위치를 제어하는 '패딩(padding)' 파라미터이다. 일부 예에 서, 양이 아닌 인덱스를 갖는 D의 값은 0으로 고려된다. 즉, θw = θh = 0이라 가정하면, 컨볼루션 동작의 제1 출력 값은 다음과 같이 계산된다. 수학식 3"}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "컨볼루션의 제1 스테이지에서, 입력 데이터의 3D 텐서와 필터에 대한 제2 3D 텐서는 왼쪽에 도 시되고, 제1 2D 출력 채널에서의 대응하는 제1 출력 스칼라는 오른쪽에 도시된다. 제1 결과가 계산된 후, 필터는 입력 데이터에 대하여 다른 위치로 이동하고, 제2 스테이지에 도시된 바와 같이, 다른 값이 계산된다. 도시된 예에서, 제1 필터가 제2 스테이지를 위하여 한 스텝 이동함에 따라, 입력 텐서의 처리된 요소의 대부분은 제1 스테이지 동안 처리된 것과 동일한 상태를 유지한다(일반적으로, 결과는 제1 스테이지와 제2 스테이지에서 상이하며, 평가의 제1 스테이지와 제2 스테이지 동안의 필터 의 중첩하는 위치 때문에 단지 입력만이 부분적으로 중첩한다. 따라서, 도 1에 도시된 경우에(즉, Xf = Yf = 3), 계산된 매 3개의 요소 중 2개가 계산의 각각의 스테이지에 대하여 동일하다. 이 동작은 입력 데이터(13 0)에서의 모든 위치가 다루어질 때까지 반복된다. 그 다음, 제1 2D 출력 채널은 제3 스테이지에 도시 된 바와 같이 완전히 계산된다. 제1 출력 채널이 완료되면, 제1 필터는 제2 필터로 대체되고, 제4 스테이지에 도시된 바와 같이 스캐 닝 및 곱셈-누산(MAC) 동작이 반복되고, 제5 스테이지에 도시된 바와 같이 다른 출력 채널이 계산된 다. 모든 N 필터가 입력 텐서로 컨볼루션을 수행한 후에, 제6 스테이지에 도시된 바와 같이 출력 텐서 가 준비된다. 출력 텐서의 폭과 높이는 통상적으로 입력 데이터 텐서의 폭과 높이와 유사하고 (패딩 파라미터의 선택에 따라), 출력 텐서의 깊이는 필터의 개수와 동일하다. 도 2는 본 발명의 실시예들에 따른 컨볼루션 동작의 일례를 도시한다. 도시된 예는 입력 데이터와 필터 로우(row)를 포함한다. 도 1에 도시된 바와 같이, 필터는 컨볼루션 레이어의 결과를 계산하기 위하여 입력 데이터에 걸쳐 이동된다. 9개의 상이한 필터 로우가 도시되며, 컨볼루션 레이어를 계산하기 위한 프로세스의 9 사이클 동안 계산된 3개의 필터 채널에 대응한다. 로 우의 이동은 입력 데이터에 대하여 주어진 위치에서의 필터의 컨볼루션을 계산하기 위한 스캐닝 순서 를 도시한다. 그러나, 이것은 단지 예이며, 다른 스캐닝 순서가 ANN의 컨볼루션 레이어를 계산하는데 사용될 수 있다. 컨볼루션 동작은 필터 가중치 및 입력값 쌍의 곱셈의 합이고, 쌍을 처리하는 순서는 임의적이다. 스캐닝 순서를 위한 하나의 옵션이 예로서 제공되지만, 다른 옵션의 스캐닝 순서도 또한 적용 가능하다. 본 예의 목적을 위하 여, 위치 (0, 0, 0)에서의 제1 로우가 대응하는 입력 데이터 요소와 함께 계산되며, 그 후에 이어지는 로 우(즉, 위치 #2에서의 로우)가 스캔되어 계산된다. 제로 스키핑 로직은 스캐닝된 로우 각각에 대하여 적용될 수 있다. 유사한 스캐닝 순서 및 제로 스키핑 로직은 (스키핑된 정확한 위치는 각각의 특정 필터에서의 제로의 위 치에 의존할 수 있지만) 모든 위치 및 모든 필터에 대하여 유효할 수 있다. 입력 데이터 텐서 상의 3D 필터의 임의 위치를 고려하면, 컨볼루션 가속기(CA)는 먼저 2D 필터 채널 및 입력 데 이터 채널의 X 축에 대하여(즉, 각각의 로우를 처리하기 위하여), 그 다음 Y 축에 대하여(다음 로우로 이동하여), 그리고 마지막으로 Z-축에 대하여(채널별로 이동하여) 스캔할 수 있다. 각각의 라인의 길이는 필 터의 폭(Xf)과 동일하다. 여기에서 도시된 바와 같이, 필터 크기는 3×3×Z이지만, 임의의 X 및 Y 크기가 유효 할 수 있다. 도 3은 본 발명의 실시예들에 따른 컨볼루션 신경망(convolution neural network: CNN)의 필터의 일례를 도시한 다. 도시된 예시적인 필터는 완전 프루닝 채널(fully pruned channel: FPC) 및 혼합 채널(mixed channel: MC)을 포함한다. 각각의 FPC은 단지 제로 가중치만을 포함하며, MC은 적어도 하나의 비제로 가 중치(그리고, 일부 예에서 비제로 가중치만)를 포함한다. 본 발명의 실시예들에 따르면, FPC는 ANN의 처리 동안 스킵될 수 있고, MC는 MC 내의 제로가 일부 구조적 제한을 만족하도록 프루닝될 수 있고, 이에 따라 효율적으로 스킵될 수 있다. CNN은 종종 처리 동안 계산, 시간 및 전력의 대부분을 소비하는 여러 컨볼루션 레이어를 포함한다. 각각의 컨볼 루션 레이어는 훈련 프로세스 동안 계산된 여러 3D 필터와의 입력 3D 데이터의 이산 컨볼루션을 적용한다. 3D 필터는 제로 값을 포함할 수 있다. 일부 예에서, 방법은 본 명세서에서 설명되는 바와 같이 트레이닝된 ANN에서 의 제로의 비율을 촉진하는데 사용될 수 있다. 일부 ANN에서, 대부분의 또는 모든 컨볼루션 필터에서의 제로의 비율은 네트워크의 정확성를 상당히 열화시키지 않으면서 80%(모든 가중치의 0.8이 제로이다) 또는 그보다 높을 수 있다. 제로는 필터 내에 무작위로 분포될 수 있다. 그러나, 제로의 위치에 대하여 제약을 설정하는 것은 최 적화된 컨볼루션의 더 간단한 구현을 가능하게 하며, 최적화의 정도를 개선한다. 제로 가중치에 적용된 제약은 2레벨 계층에 기초할 수 있다. 첫째, 3D 필터의 일부 2D 필터(또는 채널)은 제로 만을 포함한다. 이는 FPC이다. 둘째, 다른 2D 채널은 제로 또는 비제로를 포함한다. 이 채널은 MC이 다. 구조적 제약은 시퀀스의 길이, 이의 위치 또는 이 양자의 조합의 측면에서 제로 시퀀스의 존재를 제한할 수 있다. MC에 대한 이러한 종류의 구조적 제한은 제한 제로 시퀀스(Limited zero sequence: LZS) 제약이라 할 수 있다. 따라서, FPC는 제로만을 포함하고, MC는 제로 및 비제로를 모두 포함한다. 또한, 도시된 MC는 왼쪽 위로부터 오른쪽 아래로 스캐닝할 때 최대 6개의 연속하는 제로가 있도록 제한된다. 따라서, 이 경우에 제 로 시퀀스의 길이가 제한되지만, 그 위치는 제한되지 않는다. 도시된 예에서는 6인 길이에 대한 한계는 ANN 필 터 구조의 메타 파라미터일 수 있다. 도 4는 본 발명의 실시예들의 양태에 따라 ANN을 프루닝하기 위한 프로세스의 일례를 도시한다. 도시된 예는 제1 반복과 제2 반복을 포함한다. 각각의 반복은 프루링되지 않은 채널, 프루링된 채널 및 구조적으로 프루닝된 채널을 포함할 수 있다. 제1 반복은 제1 프루닝 비율을 고려한 프 루닝의 일례를 도시하고, 그 후에 비율은 업데이트되고 제2 반복이 수행된다. 결과는 채널이 처리될 때 효 율적인 제로 스키핑을 가능하게 하는 방식(즉, 도 1에 도시된 바와 같이)으로 구조화된 원하는 비율의 제로를 갖는 채널이다. 프루닝은 ANN 모델의 컨볼루션 필터에서 제로의 개수를 증가시키는 방법이다. 프루닝 알고리즘은 모든 가중치 중에서의 제로 가중치의 비율이 목표 비율에 도달하도록, 트레이닝된 ANN을 입력으로 하여 동일한 세트의 레이 어 및 필터 크기를 갖지만 상이한 가중치 값을 갖는 다른 ANN을 출력으로서 생성한다. 프루닝된 ANN에서의 제로 가 아닌 파라미터의 개수가 원래 트레이닝된 ANN에 대하여 더 제한되기 때문에, 원래 트레이닝된 ANN에 비교한 프루닝된 ANN의 정확성의 측면에서, 성능은 통상적으로 열화된다. 프루닝 알고리즘은, 정확성 열화를 최소화하 고 동시에 프루닝 비율을 최대화하려고 시도한다. 일부 프루닝 알고리즘은 단지 제로의 평균 비율에만 초점을 맞추고 이의 위치는 무시한다. 그러나, 구조화된 프 루닝 알고리즘은 프루닝된 필터에서의 제로 분포 및 위치에 관련된 일부 구조적 제약을 부가하려고 시도한다. 예를 들어, HSP 알고리즘은 FPC의 대략적인 프루닝과 MC의 정밀 프루닝을 조합한다. HSP 알고리즘은 트레이닝된 ANN 모델과 2개의 비율 파라미터(Rtotal, RFPC)를 입력으로 한다. HSP 알고리즘은, 모든 3D 필터에 대하여 모든 가중치 중에서 제로의 전체 비율이 Rtotal이고, 모든 채널 중에서 2D FPC의 비율이 RFPC이 되고, 남아 있는 MC가 계산된 비율(RMC)로 프루닝되고(FPC 및 MC에서의 제로의 전체 비율이 총괄하여 Rtotal이 되도록 Rtotal, RFPC에 기초하여), MC가 제한 하드웨어 예측(limited hardware prediction: LHP) 제약(또는, 일부 다른 LZS 제약)에 따라 구조적으로 프루닝되도록 3D 컨볼루션 필터가 프루닝 되는 ANN을 생성한다. 다시 말해, 구조화된 프루닝은 이후에 제로가 제로 스키핑 방법에 의해 어떻게 스킵될 것 인지를 고려하여 수행되고, 이러한 방법의 제한을 포함한다. 다양한 제로 스키핑 방법 및 스키핑의 관련된 잠재 적 제한에 대한 추가 상세는 도 16을 참조하여 아래에서 설명된다. 일부 예에서, HSP 알고리즘은 각각의 '2D 필터'가 단지 하나의 가중치만을 갖는 크기가 1×1×Z인 필터에 대한 예외를 포함하한다. 이러한 필터에 대하여, (하나의 가중치 각각의) FPC만이 고려되고, 알고리즘은 모든 가중치 에 대하여 Rtotal의 비율을 적용한다. 제1 프레임은 고수준의 알고리즘 흐름을 제공한다. 다음은 HSP 알고리즘 을 함께 설명하는 3개의 프레임이다. 이것은 2개의 연속하는 프레임에서 기술된 'FPC 프루닝' 및 'MC 프루닝' 프로시저에 대한 함수 호출을 포함한다. 표 1"}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "프레임 1. HSP 알고리즘의 고수준 흐름 표 1을 참조하면, 알고리즘은 2개의 주요 부분으로 나뉜다. 제1 부분은 필터에 대하여 진행하여 FPC 및 MC의 프 루닝을 적용한다. 출력 은 비제로 가중치 및 제로 가중치를 포함한다. 이는 알고리즘의 계산 시간 대부분 을 소비할 수 있는 제2 섹션인 의 정밀 튜닝 대한 시작 포인트 모델 역할을 한다. 또한, 원래 프루닝된 에서의 제로의 위치(제1 섹션 직후, 정밀 튜닝 전)는 3D 바이너리 마스크의 집합( )으로서 별도 로 유지된다. 이는 크기와 형상에서 의 컨볼루션 필터에 대응하지만 ( 필터의 비제로 가중치를 갖 는 모든 위치에서) 단지 0과 1을 유지하는 3D 텐서를 포함한다. 정밀 튜닝은 통상적으로 각각의 단계가 입력 데이터 항목의 하나의 배치(batch)(예를 들어, 100 이미지)를 이용 하는 일련의 훈련 단계이다. 각각의 배치 처리 후의 역전파(backpropagation)는 제로이거나 제로가 아닌 에서의 모든 가중치를 약간 변경하고, 따라서 제로의 개수는 상당히 감소될 수 있다. 그러나, 에서의 마스크는 정밀 튜닝 프로세스 동안 변경되지 않는다. 이는 에서의 대응하는 위치가 제로인 정밀 튜닝 된 에서의 모든 위치가 또한 제로로 리셋되도록 훈련 단계 후에 적용된다. 리셋 단계 후에, 정밀 튜닝된 의 구조 및 프루닝 비율은 다시 원래 와 동일하게 된다. 이러한 방식으로, 프루닝되지 않은 가중치 는 많은 가중치가 제로로 리셋된 후에 발생하는 ANN 동작에서의 부정확성을, 적어도 어느 정도, 보상하기 위하 여 점진적으로 재조정된다. 프레임 2는 메인 알고리즘(제1 프레임)으로부터 3D 필터와 목표 프루닝 비율을 얻고, 각각의 채널의 가중치와 비율에 따라 2D 채널의 서브세트를 선택하고, 이를 프루닝하는 프로시저를 설명한다. 본 예시적인 알고리즘은최대 가중치 크기가 가장 작은 채널을 완전히 프루닝하도록 선택하지만, 최종 추론 결과에 대한 영향이 상대적 으로 작은 FPC를 선택하기 위한 다른 옵션이 또한 적용 가능하다. 표 2"}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "프레임 2. FPC 프루닝 알고리즘 프레임 3은, 제로 스키핑 하드웨어 시스템의 제한으로부터 얻어진 제로 시퀀스의 위치 및 길이에 대한 구조적인 제약 LHP를 만족하면서, 3D 필터를 얻고 최소의 주어진 비율(RMC)로 MC의 정밀 프루닝을 적용하는 절차를 설명 한다. 표 3"}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "프레임 3. MC 프루닝 알고리즘 도시된 예시적인 알고리즘은 여러 반복(바깥쪽 repeat-until 루프)에 기초한다. 각각의 반복에서, 알고리즘은 혼합된 채널에 대하여 하나씩(for-end 루프) 진행하고, 이 반복에서 선택된 비율(r)로 이를 프루닝하고, 그 다 음 이전에 프루닝된 가중치의 일부를 '언프루닝(unpruning)'한다(안쪽 repeat-until 루프). '언프루닝' 동작은 제로 값을 프루닝 되기 전의 가중치의 원래 값으로 대체한다. 선택적 언프루닝은 제로 시퀀스가 제약(예를 들어, LHP 제약)에 의해 선언된 길이와 위치를 초과하지 않는 것을 보장한다. 모든 채널의 프루닝된 구조가 언 프루닝에 의해 보정된 후에, 알고리즘은 제로의 실제 비율을 평가한다. 언프루닝이 제로의 개수를 감소시키기 때문에, 이것은 r보다 더 작게 될 수 있다. 언프루닝 후의 실제 제로 비율( )이 목표 프루닝 비율(RMC) 여전히아래에 있는 한, 목표 프루닝 비율(r)은 약간 증가되고, 프루닝 및 언프루닝 사이클은 반복된다. 언프루닝을 위한 위치를 선택하기 위하여, 알고리즘은 대응하는 컨볼루션 가속기(CA) 하드웨어의 제로 스키핑 컴포넌트에 의해 구현되는 동일한 로직을 이용하여 필터를 스캐닝한다. 제로 가중치가 스캔 동안 이 컴포넌트에 의해 선택된다면, 이는 제로 스키핑 로직이 이를 예측할 수 없다는 것을 의미한다. 컨볼루션 가속기(CA)에서의 ANN 배치 동안 제로를 곱하는 것에 시간을 낭비하는 것을 방지하기 위하여, 언프루닝 동작은 이전에 처리된 가 중치와 처리될 다음 가중치 사이의 범위 내의 어디엔가에 비제로를 더한다. 따라서, 제로를 처리하는 대신에, 컨볼루션 가속기(CA)는 배치 동안 더해진 비제로를 처리할 것이다. 정보를 갖는 제로가 아닌 것이 제로 대신에 처리되는 것이 더 낫다. 이것은 처리 시간을 추가하지 않고 ANN에 파라미터를 추가하여, 정확성을 증가시키는 더 많은 유연성과 잠재력을 제공한다. 따라서, 도 4는 하나의 혼합된 채널에 대한 프루닝 및 언프루닝의 2개의 반복을 도시한다. 본 예에서의 가중치 가 음이 아닌 정수가 되도록 선택되었지만, 실제 ANN에서 가중치는 양 및 음의 실수 값일 수 있다. 원래 트레이 닝된 필터(왼쪽 위)는 9개의 비제로 가중치를 포함한다. 목표 프루닝 비율은 RMC = 0.67이다. 초기에, 제1 반복 전에, r은 RMC인 r = 0.67, s = 6, vs = 3으로 설정되고, 따라서 값이 w≤3인 6개의 가중치가 프루닝된다 (1, 2, 1, 2, 3, 1). 프루닝된 채널(왼쪽 중간)은 3개의 로우에 대하여 분포된 제로 시퀀스를 가진다. 컨볼루션 가속기(CA)의 룩 어헤드 및 제로 스키핑 제어가 Δy = 1인 LHP 제약만을 지원하고, 컨볼루션 가속기(CA)의 처리 순서가 왼쪽 위에서 오른쪽 아래라고 가정한다. 컨볼루션 가속기(CA)가 9개를 처리할 때, 룩 어헤드 버퍼는 제1 및 제2 로우를 포함한다. 이는 버퍼에서 비제로 값을 조사하지만, 제3 로우를 볼 수 없기 때문에 제로만을 찾는 다. 가중치 값을 검사하지 않고, 비제로를 포함하는지 알기 위하여 (1, 3)이 되도록 처리를 위한 다음 위치를 선택한다. 본 예시에서, 이는 제로를 유지한다. 이것은, 프루닝된 채널을 고려할 때, 컨볼루션 가속기(CA)의 다음 하드웨 어 사이클이 제로 가중치를 처리하는 것에 소비될 것이라는 것을 의미한다. 이러한 낭비된 처리 사이클을 방지 하기 위하여, 알고리즘은 언프루닝 동작을 사용한다. 6개 제로 시퀀스의 위치에서의 원래 가중치가 평가되고, 가장 큰 크기, 우리의 경우에서는 3(그러나, 일반적인 경우에 음이 될 수 있다)을 갖는 원래 가중치가 언프루닝 된다(왼쪽 아래). 이제, 채널의 이러한 개선된 구조를 이용하여, 제로 스키핑 제어는 9개를 처리하고 있을 때 룩 어헤드 버퍼 내의 3개를 볼 수 있다. 따라서, 9개를 처리한 후에, 임의의 제로를 처리하는데 시간을 낭비하 지 않고, CA 제어는 4개의 제로를 스킵하고 다음 사이클에서 3개를 바로 처리할 것이다. 다음으로, 8이 처리될 것이고, 그 후 4가 처리될 것이다. 우리는 완전한 제로 스키핑을 얻었지만, 프루닝 비율은 요청된 0.67보다 적 은 단지 0.56(9개 중 5개)이다. 이 문제를 해결하기 위하여, 알고리즘은 r을 업데이트하고 프루닝 및 언프루닝 단계를 이용한 제2 반복을 시작한다. 새로운 r은 r + RMC - = 0.67 + 0.67 - 0.56 = 0.78이다. 이제, 프루닝된 채널에서, s = 7, vs = 4이고, 값이 w≤4인 8개의 가중치가 프루닝된다(오른쪽 중간). 제1 반복과 유사하게, 언프루닝은 가 중치 3(6개 제로 체인의 위치 내에서 여전히 가장 크다)을 리턴한다. 마지막으로, 제2 반복에서의 구조적 으로 프루닝된 채널에서(오른쪽 아래), 목표 프루닝 RMC = 0.67을 얻는다. 또한, 채널 구조는 컨볼루션 가 속기(CA)의 작은 룩 어헤드 버퍼 및 제로 스키핑 제어의 예측 능력과 완전히 정렬되어, 배치 동안의 제로 스키 핑은 완전해지고, 어떠한 사이클도 제로를 처리하는데 낭비되지 않는다. 모든 컨볼루션 필터에서의 모든 혼합 채널은 유사하게 처리될 수 있다. 제로의 구조 및 위치가 모든 필터 내에서 결정되면, ANN은 제로 마스크를 이 용하여 정밀 튜닝될 수 있다. 따라서, 도시된 본 예시는 HSP 알고리즘을 이용하여 ANN을 프루닝하는 일례를 보여준다. 알고리즘은, 예를 들어, Rtotal = 0.7 및 RFPC = 0.35의 프루닝 비율과, 파라미터 Δy = 1을 이용하여 전술된 LHP 제약을 이용하 여, 여러 현대의 ANN에 대하여 시험되고 적용되었다. 원래 ANN에 대한 프루닝된 ANN의 분류 정확성에서의 열화 는, 예를 들어, 대략 1%로 작았다. 일부 예에서, 정확성에서의 열화는 특정 ANN 구조와 이의 작업에 의존한다. 제로 시퀀스의 LHP 제약과 계층 구조 때문에, 이러한 프루닝된 ANN은 거의 완벽한 제로 스키핑을 이용하여, 즉 임의의 제로 가중치에 대하여 클록 사이클을 거의 낭비하지 않으면서, 본 명세서에서 설명된 컨볼루션 가속기 (CA)에서 처리될 수 있다. 그 결과, 컨볼루션 가속기(CA)에서 프루닝된 ANN을 처리하는 전반적인 시간은 원래 프루닝되지 않은 ANN을 처리하는데 필요한 시간의 30%(또는 그 이하)일 수 있다.도 5는 본 발명의 실시예들의 양태에 따라 ANN을 훈련시키고 프루닝하기 위한 컴퓨팅 시스템(즉, ANN 훈련 및 프루닝 시스템)의 일례를 도시한다. 컴퓨팅 시스템은, 도 6 및 7을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 컴퓨터 시스템은 메모리, 프로세서, 훈련 컴포넌트, 프루닝 컴포넌트 및 제한 제로 스키핑 컴포넌트를 포함할 수 있다. 컴퓨팅 시스템은 훈련 샘플을 입력으로 하고 구조적으로 프루닝된 ANN 모델을 출력할 수 있다. 메모리는 ANN의 가중치와 입력 텐서를 저장하도록 구성된 유닛을 포함할 수 있다. 다른 예에서, 메모리 는 DRAM(dynamic random access memory)을 포함할 수 있다. 메모리는 솔리드 스테이트 또는 하드 디 스크 드라이브일 수 있고, 실행될 때 프로세서가 본 명세서에 설명된 다양한 기능들을 수행하게 하는 명령어를 포함하는 컴퓨터가 판독 가능하고 컴퓨터가 실행 가능한 소프트웨어를 저장할 수 있다. 일부 예에서, 메모리 는, 다른 것들 중에서도, 주변 컴포넌트 또는 디바이스와의 상호 작용과 같은 기본 하드웨어 또는 소프트 웨어 동작을 제어할 수 있는 BIOS를 포함할 수 있다. 일부 예에서, 메모리 컨트롤러는 본 명세서에서 설명된 바 와 같은 메모리 셀을 동작시킬 수 있다. 일부 예에서, 메모리 컨트롤러는 로우 디코더(row decoder), 컬럼 디코 더(column decoder) 또는 이 양자를 포함할 수 있다. 일부 예에서, 메모리 내의 메모리 셀은 로직 상태의 형태로 정보를 저장할 수 있다. 프로세서는 지능형 하드웨어 장치(예를 들어, 범용 프로세싱 컴포넌트, 디지털 신호 프로세서(digital signal processor(DSP)), 중앙 처리 유닛(central processing unit(CPU)), 그래픽 처리 유닛(graphics processing unit(GPU)), 마이크로컨트롤러, ASIC(application specific integrated circuit(ASIC)), FPGA(field programmable gate array), 프로그래머블 로직 디바이스, 이산 게이트 또는 트랜지스터 로직 디바 이스, 이산 하드웨어 컴포넌트 또는 이들의 임의의 조합)을 포함할 수 있다. 일부 예에서, 프로세서는 메 모리 컨트롤러를 이용하여 메모리 어레이를 동작시키도록 구성될 수 있다. 다른 경우에, 메모리 컨트롤러는 프 로세서 내로 통합될 수 있다. 프로세서는 다양한 기능들을 수행하기 위하여 메모리 내에 저장된 컴퓨 터 판독 가능한 명령어를 실행하도록 구성될 수 있다. 일부 예에서, 프로세서는 복수의 가속기 서브 시스템을 포함한다. 일부 예에서, 프로세서는 비제로 가중치의 위치를 찾도록 구성된 제로 스키핑 회로를 포함할 수 있다. 프로세서는 도 6 및 도 7을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 훈련 컴포넌트는 ANN을 훈련시킬 수 있다. 일부 예에서, 훈련 컴포넌트는 프루닝 동작 동안 생성된 제로 마스크에 기초하여 ANN을 계속 훈련시키거나 정밀 튜닝할 수 있다. 프루닝 컴포넌트는 ANN을 프루닝한다(즉, ANN의 가중치를 제로 가중치로 변경한다). 예를 들어, 프루닝 컴 포넌트는 ANN의 레이어에 대하여 제로 가중치의 목표 비율을 식별할 수 있다. 또한, 프루닝 컴포넌트(52 0)는 레이어의 하나 이상의 가중치를 제로로 설정함으로써 적어도 제로 가중치의 목표 비율에 적어도 부분적으 로 기초하여 레이어를 프루닝할 수 있다. 또한, 프루닝 컴포넌트는 프루닝 후에 레이어 내의 각각의 제로 가중치 시퀀스가 LZS 조건을 위반하는지를 판단할 수 있다. 또한, 프루닝 컴포넌트는 LZS 조건을 위반한 각각의 제로 가중치 시퀀스 내의 적어도 하나의 제로를 비제로 값으로 리셋할 수 있다. 또한, 프루닝 컴포넌트는 프루닝 및 리셋에 적어도 부분적으로 기초하여 제로 마스크를 생성할 수 있다. 또한, 프루닝 컴포넌트는 ANN의 레이어에 대하여 FPC의 목표 비율을 식별할 수 있고, FPC는 단지 제로 가 중치만 포함하고, 프루닝은 FPC의 목표 비율에 더 기초할 수 있다. 일부 예에서, 레이어 내의 MC의 적어도 95% 가 적어도 하나의 가중치를 리셋한 후에 LZS를 만족한다. 제한 제로 스키핑 컴포넌트는, 도 7을 참조하여 설명되는 제한 제로 스키핑 회로에 의해 구현될 수 있는, 도 6을 참조하여 설명되는 제한 제로 스키핑 컴포넌트와 동일하거나 이에 유사한 로직을 포함할 수 있다. 제한 제로 스키핑 컴포넌트는 레이어에 대한 LZS 조건을 식별하고, LZS 조건은 레이어 내의 제로의 위치 또는 시퀀스 길이에 대한 제한을 포함한다. 일부 예에서, LZS 조건은 제로 시퀀스의 최대 길이를 포함하는 BZS(bounded length zero) 조건을 포함한다. 일부 예에서, LZS 조건은 ANN(즉, 컴퓨팅 시스템)을 처리하 기 위한 컴퓨팅 시스템의 제로 스키핑 회로가 단일 사이클에서 처리하고 스킵하도록 구성된 필터 내의 최 대 개수의 가중치 로우 내의 제로 가중치 시퀀스에 기초하는 LHP 조건을 포함한다.도 6은 본 발명의 실시예들의 양태에 따라 ANN을 처리(즉, ANN 추론)하기 위한 컴퓨팅 시스템의 일례를 도 시한다. 컴퓨터 시스템은 도 5 및 7을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포 함할 수 있다. 컴퓨터 시스템은 특정 입력 신호(즉, 처리될 이미지)뿐만 아니라 구조적으로 프루닝된 ANN 모델(즉, 도 5를 참조하여 설명된 컴퓨터 시스템에 의해 출력되는 바와 같은)을 취하여 추론 결과를 출력 한다. 컴퓨터 시스템은 메모리, 프로세서 및 추론 컴포넌트를 포함할 수 있다. 메모리는 도 5 및 7을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 프로세서 는 도 5 및 7을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 추론 컴포넌트는 컨볼루션 컴포넌트 및 하나 이상의 레이어 처리 컴포넌트를 포함할 수 있다. 컨볼루션 컴포넌트는, 흐름 컨트롤과, 제한 제로 스키핑 컴포넌트와, 곱셈 및 덧셈 컴포넌트 를 포함할 수 있다. 흐름 컨트롤은 ANN의 FPC를 식별하고 스킵하도록 구성될 수 있다. 예를 들어, 흐름 컨트롤은 필터 내 의 MC의 연결 리스트를 생성할 수 있고, 연결 리스트 내의 각각의 MC는 적어도 하나의 비제로 가중치를 포함하 고, 연결 리스트 내의 각각의 엔트리는 연결 리스트에서의 다음 MC의 인덱스를 포함한다. 또한, 흐름 컨트롤 은 연결 리스트 내의 각각의 엔트리를 순차적으로 판독할 수 있고, MC는 연결 리스트 내의 엔트리에 기초 하여 처리된다. 또한, 흐름 컨트롤은 연결 리스트 내의 대응하는 엔트리를 갖지 않는 FPC에 기초하여 필터 의 FPC를 스킵할 수 있다. 흐름 컨트롤은 도 9 내지 12를 참조하여 설명되는 제어 유닛의 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 제한 제로 스키핑 컴포넌트는 ANN의 다음 비제로 가중치를 식별하도록 구성될 수 있다. 일부 예에서, 제한 제로 스키핑 컴포넌트는 룩 어헤드 버퍼 내의 고정된 개수의 라인을 평가하고, 평가에 기초하여 가중치 라 인을 멀티플렉싱 버퍼에 복사하도록 더 구성된다. 또한, 제한 제로 스키핑 컴포넌트는 하나 이상의 제2 가중치 로우가 룩 어헤드 한계에 기초하여 적어도 하 나의 비제로 가중치를 포함한다고 판단할 수 있고, 룩 어헤드 한계는 ANN의 LZS 조건에 적어도 부분적으로 기초 한다. 또한, 제한 제로 스키핑 컴포넌트는 판단에 적어도 부분적으로 기초하여 제2 가중치 로우의 로우를 룩 어헤드 버퍼로부터 멀티플렉싱 버퍼 내로 복사할 수 있다. 일부 예에서, LZS 조건은 제한 제로 스키핑 컴포 넌트가 단일 사이클에서 처리하도록 구성된 가중치의 개수와 배열에 기초한 LHP 조건을 포함한다. 일부 예 에서, LZS 조건은 연속하는 제로 가중치를 룩 어헤드 버퍼의 크기에 기초하는 로우의 개수로 제한하는 LHP 특성 을 포함한다. 일부 예에서, 룩 어헤드 버퍼는 ANN의 가중치를 저장하도록 구성될 수 있다. 예를 들어, 룩 어헤드 버퍼는 MC로 부터 하나 이상의 제2 가중치 로우를 저장할 수 있다. 또한, 멀티플렉싱 버퍼는 ANN의 가중치를 저장하도록 구 성될 수 있다. 멀티플렉싱 버퍼는 멀티플렉싱 버퍼 내에 제1 가중치 로우를 저장할 수 있고, 제1 가중치 로우는 ANN의 컨볼루션 레이어의 필터로부터의 MC에 대응하고, MC는 적어도 하나의 비제로 가중치를 포함한다. 곱셈 및 덧셈 컴포넌트는 입력 텐서로부터의 복수의 대응하는 값과 함께 제한 제로 스키핑 컴포넌트 에 의해 식별되는 다음의 비제로 가중치를 동시에 처리하도록 구성될 수 있는 MAC 유닛의 어레이를 포함할 수 있다. MAC 유닛은 제1 로우의 각각의 비제로 가중치를 처리할 수 있고, 처리는 하나 이상의 MAC 유닛을 이용하 여 각각의 비제로 가중치에 입력값을 곱하는 것을 포함한다. MAC 유닛은 도 7 및 12를 참조하여 설명된 MAC 유 닛의 일례이거나 이의 양태를 포함할 수 있다. 따라서, 일부 예에서, 컨볼루션 컴포넌트는 LHP 제약을 갖는 FPC 및 MC를 구비한 계층적으로 프루닝된 컨 볼루션 필터를 지원하는 효율적인 제로 스키핑 컨트롤을 이용하여 동작하도록 구성된 컨볼루션 가속기(CA)를 포 함할 수 있다. 미리 계산된 연결 리스트를 이용하여 FPC를 스킵하는 것은 MC 내의 제로를 스킵하기 위하여 소형 룩 어헤드 라인 버퍼 및 관련된 제어 기능과 결합될 수 있다. ANN 계산을 가속하기 위하여, CA는 다수의 MAC 유 닛, 흐름 컨트롤 유닛 및 연관된 메모리를 병렬로 동작시킬 수 있다. 또한, CA는 입력 데이터와 단일 필터 사이 에 컨볼루션을 수행하는 단일 기계와 연계하여 효율적인 제로 스키핑 메커니즘을 활용하도록 구성될 수 있다. 도 7은 본 발명의 실시예들의 양태에 따라 ANN을 처리하기 위한 컴퓨팅 시스템(즉, 컨볼루션 가속기)의 일 례를 도시한다. 컴퓨팅 시스템은 도 6을 참조하여 설명된 컨볼루션 컴포넌트의 하드웨어 구현을 나타낼 수 있다. 구 체적으로, 컴퓨팅 시스템은 MAC 유닛의 어레이에서 결합될 때까지 입력 데이터로부터의 값과 함께 필 터 가중치가 개별 경로를 통해 어떻게 처리될 수 있는지 보여준다. 컴퓨팅 시스템은 데이터 및 필터 값 모 두가 (예를 들어, ANN의 컨볼루션 레이어의 계산 동안) 개별적으로 선택되고, 저장되고 처리되는 경로를 포함한 다. 컴퓨팅 시스템은 메모리와 프로세서를 포함할 수 있다. 메모리는 도 5 및 6을 참조하여 설 명된 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 메모리는 가중치 파일, 바이어스 파일, CMD 파일 및 AXIM 파일을 포함할 수 있다. 프로세서는 도 5 및 6을 참조 하여 설명된 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 프로세서는 AXI 마스 터, 데이터 제어 유닛, 데이터 RAM, 필터 제어 유닛, 필터 RAM, MAC 유닛, 출 력 컨트롤 및 출력 RAM을 포함할 수 있다. 또한, 일부 예에서, 프로세서는 컨볼루션 가속기(C A)라고도 할 수 있다. AXI 마스터는 데이터를 전송하고 메모리(예를 들어, DRAM)로부터 데이터를 검색할 수 있다. 데이터 제어 유닛 및 필터 제어 유닛은 데이터를 선택하고 처리를 위하여 값을 필터링할 수 있다. 데이터 제 어 유닛 및 필터 제어 유닛은 흐름 컨트롤의 컴포넌트일 수 있다. 일부 예에서, AXI 마스터는 메모리(예를 들어, DRAM)로부터 판독하며, 데이터 제어 유닛에 입력 데이터를 공급 하고 필터 제어 유닛에 가중치를 공급한다. MAC 블록의 어레이는 입력 데이터 값과 필터 가중기의 곱셈과 덧셈 을 수행하고, 준비될 때, 결과를 출력 컨트롤에 출력한다. AXI 마스터는 결과를 메모리에 전송한다. 데이 터 제어 블록 및 필터 제어 블록은 대응하는 데이터와 필터 3D 텐서를 스캔하고, MAC 유닛에 의해 처리될 값들 의 쌍을 선택한다. 데이터 및 필터가 정렬된 방식으로 스캔될 수 있기 때문에, 2개의 제어 블록은 유사한 디자 인을 가질 수 있다. 또한, 필터 내의 제로의 스키핑이 입력 데이터 텐서에서의 대응하는 위치를 스킵하는 것과 동기됨에 따라, 제로 스키핑 메커니즘은 이러한 2개의 블록에서 유사한 방식으로 구현될 수 있다. 데이터 RAM은 필터 제어 유닛에 의해 식별된 데이터 값을 저장할 수 있다. 데이터 RAM은 도 12 를 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 필터 RAM은 필터 제어 유닛에 의해 식별되는 필터 값을 저장할 수 있다. 필터 RAM은 도 12를 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 필터 RAM에 저장된 가중치는 (예를 들어, 제한 제로 스키핑 컴포넌트에 의해) 처리되고 스킵될 수 있다. MAC 유닛은 필터 및 데이터 값을 결합할 수 있다. MAC 유닛은 도 6 및 12를 참조하여 설명되는 대응 하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 결합된 값은 출력 컨트롤에 의해 선택 되어 출력 RAM 내에 저장될 수 있다. 도 8은 본 발명의 실시예들에 따른 카운터 블록의 일례, 즉 기본 제어 유닛(BCU(Basic Control Unit))을 도시한다. 카운터 블록은 다음의 2개의 기본 기능을 지원한다: \"MAC\"(즉, 곱셈 및 덧셈) 및 \"Maximum\". MAC 기능은 컨볼루션 및 완전 연결 레이어를 위하여 사용될 수 있는 반면, Maximum(즉, Compare) 기능은 MAX 풀링 레이어를 위하여 사용될 수 있다. 카운터 블록은 덧셈기 유닛(즉, MAC 기능을 수행하기 위한), 레지스터 유닛 및 비교 유닛(Maximum 기능을 수행하기 위한)을 포함할 수 있다. 카운터 블록은 'inc' 값(블록으로의 다른 입력)의 증분을 이용하여 제로에서 (블록으로의 입력인) 'limit' 값까지 카운트한다. 카운터는 'advance' 신호가 하이(high)인 한 작동한다. 예시적인 실시예에서, 카운터 블록 은 결과가 준비되고 출력 스테이지로 전송되어야 한다는 것을 나타내는 restart 신호를 취득할 때까지 연 속으로 작동한다. restart 신호에 따라, 레지스터 유닛은 리셋되고, 프로세스는 재시작한다. 도 9는 본 발명의 실시예들에 따른 위치 제어 블록(제어 유닛)의 일례(즉, 제어 파이프)를 도시한다. 제어 유닛은 데이터 제어 유닛 또는 필터 제어 유닛(즉, 도 7을 참조하여 설명된 데이터 제어 유닛 또는 필터 제어 유닛)의 코어 파이프라인을 나타낸다. 제어 유닛은 각각이 도 8의 카운터 블록 을 참조하여 설명된 것과 같은 서브 컴포넌트를 포함할 수 있는 다수의 카운터 블록을 포함할 수 있다. 구체적 으로는, 제어 유닛은 YF 카운터, Z 카운터, X 카운터, Y 카운터, F 카운터 및 덧셈기를 포함할 수 있다. 제어 유닛은 도 6 및 10 내지 12를 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 제어 유닛은 컨볼루션 동안 필터 및 데이터의 스캐닝 순서를 계산한다. 이는 카운터 블록의 케스케이드로 서 구현될 수 있다. 스캐닝 순서의 하나의 예는 다음일 수 있다: Yf - 필터 내부의 y축을 따라 카운트; Z - z축 을 따라 카운트; Y - 3D 입력 데이터 텐서 내부의 y축을 따라 카운트; X - 3D 입력 데이터 텐서 내부의 x축을 따라 카운트; Y - 3D 입력 데이터 텐서 내부의 y축을 따라 카운트; 및 F - 모든 필터에 대하여 카운트. 제어 유닛은 현재 필터 라인의 왼쪽 픽셀의 위치(즉, 단일 차원에서의)를 계산하는 역할을 한다. 일부 예 에서, 필터의 X 축을 따르는 스캐닝은 위치 제어 블록의 일부가 아니다. 오히려, 이는 별도 X_ctrl 블록에 의해 구현될 수 있다. 즉, X_ctrl 블록은 BCU에 공급될 필터의 라인으로부터 현재 픽셀을 선택하는 역할을 한다. 이 것은 데이터 및 필터 입력값 모두에 대한 케이스이다. 예시적인 실시예에서, 수신 라인 FIFO가 가득차지 않는 한 'ready' 입력은 하이이다. 모든 필터 위치가 처리된 후에(즉, 필터가 일부 데이터 위치에 위치된 후에) 단일 스칼라 'result'가 출력에 대하여 준비될 때, 'result_complete' 신호가 생성된다. 유사하게, 'channel_complete' 및 'conv_complete' 신호는 모든 2D 출력 채널 또는 전체 3D 출력 텐서의 계산 완료를 각각 나타낸다. 도 10은 본 발명의 실시예들에 따른 수정된 위치 제어 블록(제어 유닛)의 일례(즉, 스텝 메커니즘을 갖는 제어 파이프 라인)를 도시한다. 위치 제어 유닛은 스텝 값에 기초하여 FPC를 스킵하는 것을 지원하기 위하여 도 9에 도시된 예에서 수정되었다. 3D 필터에서의 FPC에 대하여, 채널에 관련된 모든 계산은 무관하다. 2D 필터 채널 및 대응하는 2D 입력 데이터 채널은 완전히 스킵될 수 있다. 따라서, FPC는 계층적 스파스 컨볼루션 필터의 표현으로부터 생략될 수 있다. 따라서, MC는, 표 1을 참조하여 전술된 바와 같이 스텝 값을 각각의 하나가 따라가도록, 연결 리스트로서 배열될 수 있다. 현재 MC와 다음 MC의 인덱스 사이의 차이를 나타내는 스텝 값은 위치 제어 블록에 의해 처리된다. 따라서, 수정된 위치 제어 블록은 도 7을 참조하여 설명된 대응하는 컴포넌트와 유사할 수 있지만, Z 카운터 는, 고정된 1 스텝을 증분시키는 대신에, 이의 현재 내용에 스텝 값을 더할 수 있다. 1보다 더 큰 스텝을 이용하는 것은, 제로를 처리하는데 있어서 어떠한 사이클도 낭비하지 않고, 그리고 제로 가중치를 페치 하기 위하여 소비하는 대역폭 및 전력 없이, 하나 이상의 FPC가 모두 스킵되도록, Z 축에서 점프할 수 있다. 제어 유닛은 도 6, 9, 11 및 12를 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태 를 포함할 수 있다. 제어 유닛은 YF 카운터, Z 카운터, X 카운터, Y 카운터, F 카운터 및 덧셈기를 포함할 수 있고, 그 각각은 도 9를 참조하여 설명되는 대응하는 요소 또는 요 소들의 일례이거나 이의 양태를 포함할 수 있다. 도 11은 본 발명의 실시예들에 따른 데이터 제어 라인의 일례(즉, 데이터 멀티플렉싱 라인)를 도시한다. 도 11에 도시된 데이터 제어 라인은 도 7을 참조하여 설명된 데이터 제어 유닛, 데이터 RAM 및 MAC 유닛에 대응할 수 있다. 도시된 예는 제어 유닛, 데이터 SRAM, 데이터 라인 버퍼 및 데 이터 멀티플렉싱 버퍼를 포함한다. 위치 제어 유닛은, 라인 스캐닝 시퀀스에 따라, 입력 데이터 및 필터 텐서로부터 페치하기 위한 다음 라 인의 3D 좌표를 계산한다. 3D 좌표를 고려하여, 라인은 데이터 SRAM로부터 판독되고, 데이터 라인 버퍼 내에 저장된다. 그 다음, 라인은 버퍼로부터 순차적으로 팝핑(pop)된다. 마지막으로, 데이터 멀티플렉싱 버퍼는 팝핑된 라인으로부터 특정 값을 왼쪽으로부터 오른쪽으로의 순서로 하나씩 선택하고, 선택된 값이 처리된다.제어 유닛은 도 6, 9, 10 및 12를 참조하여 설명되는 대응하는 요소 또는 요소들이나 데이터 제어 유닛 의 일례이거나 이의 양태를 포함할 수 있다. 데이터 라인 버퍼는 도 12를 참조하여 설명되는 대응하 는 요소 또는 요소들이나 데이터 RAM의 일례이거나 이의 양태를 포함할 수 있다. 도 12는 본 발명의 실시예들에 따른 데이터 및 필터 제어 메커니즘의 일례(즉, 데이터 및 필터 멀티플렉싱 라인)를 도시한다. 도시된 예는 제어 유닛, 데이터 RAM, 데이터 라인 버퍼, 데이터 멀티플렉싱 버퍼, 필 터 RAM, 필터 라인 버퍼, 필터 멀티플렉싱 버퍼 및 MAC 유닛을 포함한다. 데이터 및 필터 제어 메커니즘은 도 7을 참조하여 위에서 설명된 경로에 따라 데이터 및 필터 제어를 수행하는 컴포넌트의 일례일 수 있다. 데이터 값 및 필터 가중치는 필터 및 입력 데이터 제어 로직에 의해 동시에 페치된다. 각각의 사이클에서, MAC 유닛은 하나의 입력 데이터 값과 하나의 필터 가중치 값을 수신하고, 이들을 곱하고 곱을 누적한다. 다수 의 MAC 유닛을 갖는 병렬 시스템에서, 입력 값과 필터 값의 대응하는 쌍의 벡터는 동시에 페치되어 처리 될 수 있다. 제어 유닛은 도 6 및 9 내지 11을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태 를 포함할 수 있다. 데이터 RAM은 도 7을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이 의 양태를 포함할 수 있다. 데이터 라인 버퍼 및 데이터 멀티플렉싱 버퍼는 도 11을 참조하여 설명 되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 필터 RAM은 도 7을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. MAC 유닛은 도 6 및 7을 참조하여 설명되는 대응하는 요소 또는 요소들의 일례이거나 이의 양태를 포함할 수 있다. 도 13은 본 발명의 실시예들에 따른 혼합 채널에서의 제로 스키핑을 위한 프로세스의 일례를 도시한다. 도시된 예는 제1 반복과 제2 반복을 포함한다. 제1 반복은 적어도 하나의 비제로 값, 스킵된 제로 및 처리된 제로를 포함할 수 있다. 제2 반복은 현재 라인과 다음 라인 을 포함할 수 있다. 제1 반복은 제로를 처리하는 것(즉, 처리된 제로)을 제공하는 일례를 나 타내며, 제2 반복은 제로를 처리하는 것을 방지하는 일례를 나타낸다. 예시적인 실시예에서, 제로 스키핑은 동일한 제어 메커니즘을 이용하여 제로 가중치 및 대응하는 입력 데이터에 대하여 동기하여 구현될 수 있다. 제로 가중치와 비제로 가중치를 모두 갖는 2D 채널을 포함하는 혼합 채널에 대하여, 제로 스키핑 제어는 X_ctrl 블록에 의해 구현될 수 있다. 매 사이클에서, X_ctrl 블록은 FIFO 버퍼에서 2개의 필터 라인(즉, 제2 반복에서 도시된 바와 같이, MAC 블록에 의해 처리되고 있는 현재 라인 및 다음 라인) 내의 모든 가중치를 동시에 본다. 모든 가중치는 제로에 비교된다 - 이것은 룩 어헤드 동작이다. 이러한 제로에 대한 비교 동작의 결과를 고려하 면, 3개의 옵션이 있다. 먼저, 현재 라인이 여전히 처리되지 않은 비제로 가중치(현재 처리된 가중치 위 치로부터 라인에서 가장 오른쪽 위치까지 오른쪽으로의 범위 내에 위치됨)를 포함하면, 어떠한 라인도 팝핑되지 않으며, 멀티플렉싱 버퍼 내의 현재 라인이 다음 사이클에서 처리될 것이다. 둘째, 현재 라인의 마 지막까지 처리되지 않은 비제로 값이 없지만, 다음 라인이 비제로 값을 포함하면, 다음 라인이 팝 핑되고, 가중치가 멀티플렉싱 버퍼에 복사되어 다음 사이클에서 처리될 것이다. 셋째, 현재 라인에서의 나머지 가중치와 다음 라인에서의 모든 가중치가 제로라면, 다음 라인은 스킵되고, 대신에 그 다음 라인이 팝핑되고 멀티플렉싱된 버퍼로 복사된다. 또한, X_ctrl 블록에 의해 구현되는 제로에 대한 비교 동작은 멀티플렉싱된 버퍼에서의 다음의 비제로 값(존재 하는 경우)에 대한 위치를 포함하는 x_pos 신호를 생성할 수 있다. 제로만을 포함하는 것으로 다음 라인 이 검출되어 스킵될 때까지, 이것은 \"참\"일 수 있다. 이 경우에, 다음 라인 다음의 라인은 룩 어헤드 동 작 없이 팝핑될 수 있고, x_pos 신호는 디폴트로 제1(가장 왼쪽) 위치를 나타낸다. 이 위치는 제로를 포함할 수 있다. 이 경우는 제로 가중치의 필요하지 않은 처리에 사이클이 낭비되기 때문에 제로 스키핑 메커니즘의 실패 를 나타낼 수 있다. 제로 스키핑 동작에 관여된 FIFO 라인의 버퍼 크기는 상대적으로 작을 수 있다. 이것은 컨볼루션 가속기(CA)의 전력 소비 및 칩 면적 크기를 줄이는데 도움을 줄 수 있다. 많은 병렬 제어 시스템 또는 더 큰 MAC 어레이가 있 다면, 절약은 상당할 것이다. 본 명세서에서 설명된 구조화된 프루닝 방법은 전술된 제1 위치에서 제로의 경우 를 거의 제거함으로써 작은 버퍼 크기를 갖는 컨볼루션 가속기(CA)가 효율적으로 동작할 수 있게 한다. 이것은 비제로 가중치의 계산을 이용한 컨볼루션 가속기(CA)의 완전한 활용을 보장할 수 있다. 그러나, 이것은 제로 스 키핑 실패 이벤트를 방지하기 위하여 구조적으로 프루닝된 후의 ANN의 정확성 열화의 대가를 치르게 할 수 있다. 따라서, 열화는 제한 부과되지만 X_ctrl이 현재 및 다음 라인만을 '보게(see)'하는 룩 어헤드의 기능이다. 예를 들어, 컨볼루션 가속기(CA)가 더 많은 라인을 룩 어헤드하게 함으로써 제약을 완화하는 것은, 프루닝 알고리즘이 컨볼루션 필터에서 프루닝될 상이한 가중치 세트를 선택하게 할 수 있다. 이것은 프루닝된 ANN의 더 높은 정확성에 반영될 것이다. 따라서, 고정된 프루닝 비율을 고려하면, 룩 어헤드 메커니즘의 크기와 알고리즘에 의해 프루닝된 후의 ANN의 정확성 사이에 트레이드 오프가 있다. 상술한 설명에 따라, 제1 반복은 결과적으로 제로 값을 처리하는(즉, 바람직하지 않은 결과) 제로 스키핑 을 구현하는 프로세스의 일례를 도시한다. 본 예에서, 각각의 라인은 3개의 필터 가중치로 구성된다. 임의의 주 어진 실행 사이클에서, X_ctrl 블록은 라인 FIFO에서 현재 라인과 다음 라인을 \"본다(see)\". 제3 사이클이 계산 된 후에(제2 라인에서 값 4), 다음 라인은 모두 제로이고(즉, 스킵된 제로), 따라서, 컨트롤러는 네 번째 라인의 시작으로 스킵하여 잠재적으로는 스킵되었을 수 있는 제로 값(즉, 처리된 제로)에 도달한다. 제1 반복에서 도시된 필터는 제로 스키핑 동작을 보여주는 목적으로 선택되었고, 통상적으로 이 결과를 방지 하도록 구성될 수 있는 계측 프루닝 알고리즘의 결과는 아니다. 제2 반복은 제로 값을 처리하는 것을 방지하는 제로 스키핑을 구현하기 위한 프로세스의 일례를 도시한다. 계층 프루닝 알고리즘의 제약을 완화하는 한 방법은 FIFO 버퍼 크기를 2배로 하고 X_ctrl의 논리적 '룩 어헤드'를 증가시키는 것이다. 제2 반복의 프로세스를 예시하기 위하여, 다음 라인의 가중치 는 라인 FIFO에서 현재 라인의 오른쪽에 도시된다. 이러한 이중화(duplication)로, 로직은 FIFO 아래로 한 라인 더 '보며' 스킵된 제로의 각각을 스킵할 수 있다(즉, 제로를 처리하지 않음). 따라서, 제1 반복과 동일한 필터를 이용하지만, 처리를 위하여 선택된 가중치는 다르다. 즉, 제3 계산(즉, 두 번째 줄의 값 4에 대한)이 완료되면, 다음 라인에서 값 -1 및 2를 본다. 이것은 컨트롤러가 하나 대신에 2개의 라인을 스킵하고, 라인 (0, -1, 2)를 팝핑하고, 다음 사이클에서 처리된 값 -1을 선택할 수 있게 한다. 다시 말해 2개의 로우의 한계를 갖는 LHP 제약을 이용하여 제로 스키핑 실패가 방지될 수 있다. 따 라서, 프루닝 알고리즘은 언프루닝에 의해 이러한 프루닝 구조를 고정시키지 않을 것이며, 이는 결과적으로 더 높은 품질의 ANN을 제공한다. CA 룩 어헤드 범위를 더 증가시키고 프루닝 알고리즘을 위한 제약을 완화시키기 위하여, 추가 라인이 추가될 수 있다. 다음으로, 도 14 및 15를 참조하면, 도 4를 참조하여 설명된 특정 예에 의해 예시된 바와 같은 ANN을 프루닝하 기 위한 프로세스의 생성을 나타내는 프로세스가 도시된다. 도 14는 본 발명의 실시예들의 양태에 따라 ANN을 프루닝하기 위한 프로세스의 예들을 도시한다. 일부 예에서, 이러한 동작들은 장치의 기능적 요소를 제어하기 위하여 코드 세트를 실행하는 프로세서에 의해 수행될 수 있다. 추가적으로 또는 대안적으로, 프로세스는 특수 목적 하드웨어에 의해 수행될 수 있다. 일반적으로, 이러 한 동작들은 본 발명의 실시예들의 양태에 따라 설명된 방법 및 프로세스에 따라 수행될 수 있다. 예를 들어, 동작들은 다양한 서브 단계들로 구성될 수 있거나, 본 명세서에 설명된 다른 동작들과 함께 수행될 수 있다. 단계에서, 시스템은 ANN의 레이이에 대하여 제로 가중치의 목표 비율을 식별할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 프루닝 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 레이어에 대한 LZS 조건을 식별할 수 있고, LZS 조건은 레이어에서의 제로의 위치 또 는 시퀀스 길이에 대한 제한을 포함한다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 스키핑 컴 포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 레이어의 하나 이상의 가중치를 제로로 설정함으로써 제로 가중치의 목표 비율에 적 어도 부분적으로 기초하여 레이어를 프루닝할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설 명된 프루닝 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 레이어 내의 제로 가중치의 각각의 시퀀스가 프루닝 후에 LZS 조건을 위반하는지 판 단할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 프루닝 컴포넌트를 참조할 수있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 LZS 조건을 위반하는 제로 가중치의 각각의 시퀀스를 (예를 들어, LZS 조건의 위반을 방지하기 위여) 비제로 값으로 리셋할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 프 루닝 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 값의 프루닝 및 리셋은 도 4를 참조하여 전술된 바와 같이 수행될 수 있다. 도 15는 본 발명의 실시예들의 양태에 따라 ANN을 프루닝하기 위한 프로세스의 예들을 도시한다. 도 15는 도 14 를 참조하여 전술된 단계들을 포함하고, 프루닝의 결과로서 생성된 제로 마스크에 기초하여 ANN을 훈련시키는 추가 단계들을 포함하는 예를 도시한다. 단계에서, 시스템은 ANN의 레이이에 대하여 제로 가중치의 목표 비율을 식별할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 프루닝 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 레이어에 대한 LZS 조건을 식별할 수 있고, LZS 조건은 레이어에서의 제로의 위치 또 는 시퀀스 길이에 대한 제한을 포함한다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 스키핑 컴 포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 레이어의 하나 이상의 가중치를 제로로 설정함으로써 제로 가중치의 목표 비율에 적 어도 부분적으로 기초하여 레이어를 프루닝할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설 명된 프루닝 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 레이어 내의 제로 가중치의 각각의 시퀀스가 프루닝 후에 LZS 조건을 위반하는지 판 단할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 프루닝 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 LZS 조건을 위반하는 제로 가중치의 각각의 시퀀스를 (예를 들어, LZS 조건의 위반을 방지하기 위여) 비제로 값으로 리셋할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 프 루닝 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 프루닝 및 리셋에 적어도 부분적으로 기초하여 제로 마스크를 생성할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 5를 참조하여 설명된 프루닝 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 제로 마스크에 기초하여 ANN을 계속 훈련시킬 수 있다. 일부 예에서, 이 단계의 동작 들은, 도 5를 참조하여 설명된 훈련 컴포넌트를 참조할 수 있거나, 그에 의해 수행될 수 있다. 도 16은 본 발명의 실시예들의 양태에 따라 ANN을 처리하는 동안의 제로 스키핑을 위한 프로세스의 일례를 도시 한다. 일부 예에서, 이러한 동작들은 장치의 기능적 요소를 제어하기 위하여 코드 세트를 실행하는 프로세서에 의해 수행될 수 있다. 추가적으로 또는 대안적으로, 프로세스는 특수 목적 하드웨어에 의해 수행될 수 있다. 일반적 으로, 이러한 동작들은 본 발명의 실시예들의 양태에 따라 설명된 방법 및 프로세스에 따라 수행될 수 있다. 예 를 들어, 동작들은 다양한 서브 단계들로 구성될 수 있거나, 본 명세서에 설명된 다른 동작들과 함께 수행될 수 있다. 도 4를 참조하여 논의된 바와 같이, 구조화된 프루닝은 제로가 제로 스키핑 방법에 의해 이후에 어떻게 스킵될 것인지를 고려하여 수행되며, 이러한 방법의 제한을 포함한다. 즉, 상이한 제로 스키핑 방법들이 상이한 종류의 제한에 의해 제약될 수 있다. 예를 들어, 제로 스키핑은 제한 제로 시퀀스(Limited zero sequence: LZS) 조건에 기초하여 수행될 수 있다. 일부 종류의 LZS 제약은 제로 시퀀스의 길이와 위치 모두를 제한한다. 구조적 제약 및 제한 하드웨어 예측(Limited hardware prediction: LHP)의 패밀리는 ANN을 처리하기 위한 CA의 하드웨어 제 한에 기초할 수 있다. 예를 들어, 크기가 XF×YF×Z인 3D 필터(F)를 고려하라. 필터 내의 임의의 위치 p = (x0, y0)를 고려하여, q = (x, y)가 비제로 가중치를 갖는 (필터 내의 가중치를 스캐닝하는 일부 알려진 순서에서의) 다음 위치라 하자.그러면, y ≤ y0 + Δy이다. Δy는 LHP의 파라미터이다. LHP 제약은 본 명세서에서 설명된 CA에서와 같은 MC를 위한 특정 제로 스키핑 메커니즘의 제한으로부터 얻어질 수 있다. MC에 대하여, 프로세서 또는 컨볼루션 가속기(CA)는 처리될 다음의 비제로 가중치를 검색하기 위하여 룩 어헤드 버퍼를 이용한다. 비제로 가중치의 검색 및 처리는 정해진 순서로, 예를 들어, 왼쪽 위로부터 오른쪽 아래로 수행될 수 있고, 왼쪽 위의 좌표는 (1, 1)이다. 하나의 옵션은 모든 MC를 순차적으로 고려하는 것이다. 예를 들어, 3×3×Z 필터에 대하여, 이것은 처리하는 동안 제2 MC 필터의 제1 라인은 제1 필터의 제3 라인을 바 로 따라가기 때문에 y = 4인 좌표를 가진다는 것을 의미한다. 다른 옵션은 각각의 2D MC를 독립적으로 고려하는 것이다. 3×3×Z 필터에 대하여, 각각의 채널에서 라인을 1로부터 3까지 카운트한다. 선택은 AC의 구현과, 이로 부터 얻어지는 구조화된 LHP 제약에 의존한다. 아래의 예들에서, 라인의 순차적 카운트를 이용한다. Δy 파라미터는 제로 스키핑 메커니즘의 룩 어헤드 버퍼의 크기 및 관련된 제어 로직에 대응한다. 예를 들어, Δy = 1이면, 이것은 다음 비제로 값이 현재 처리된 라인 y = y0 또는 다음 라인 y = y0 + 1에 있다는 것을 의 미한다. 즉, 룩 어헤드 로직은 현재 및 다음 라인을 검색하지만, 이를 넘어서는 검색하지 않는다. Δy = 0은 검 색이 현재 라인에서만 수행된다는 것을 의미한다. 도 3에서의 z = 0에서의 MC는 가중치 9를 갖는 위치 p = (1, 1)에 대하여, 다음 제로가 아닌 것이 위치 q = (2, 3)에서의 8이기 때문에, Δy = 1을 갖는 제약이 유지되지 않 는 필터 예를 보여준다. 그러나, 파라미터 Δy = 2를 갖는 제약은 유지된다. 계층적 3D 필터 모델은 2개 레벨에서의 스파시티(sparsity)를 결합하는 것을 특징으로 한다. 첫째, FPC 레벨에 서, 프루닝은 낮은 해상도로 달성될 수 있다. 즉, 일부 채널은 단지 제로 가중치만을 포함한다. 둘째, MC 레벨 에서, 프루닝은 더 미세한 해상도로 수행될 수 있다. 즉, 다른 MC들이 비제로를 제로의 제한된 시퀀스와 결합한 다. 일부 예에서, MC에서의 특정 종류의 LZS가 프로세서의 디자인 및 제한에 기초하여 얻어질 수 있다(즉, LHP의 구 조적 제약을 이용할 때). 일부 예에서, 프루닝 알고리즘은 FPC와 LHP(또는 임의의 다른 종류의 LZS)의 조합을 이용하여 구조화된 프루닝을 구현할 수 있다. 이것은 ANN 정확성 성능에서 단지 작은 열화만을 가지면서 높은 프루닝 비율을 가능하게 할 수 있다. 효율적인 CA는 LZS에 기초하여 FPC로 프루닝된 ANN을 처리할 수 있다. 필 터 구조가 하드웨어 제한을 충족하기 위하여 미리 튜닝되기 때문에, 제로 스키핑 메커니즘은, 매우 작고 전력 효율적이지만, 시간에 대한 손실 없이 제로 가중치의 거의 100%를 스킵힌다. 단계에서, 시스템은 제1 가중치 로우를 멀티플렉싱 버퍼에 저장할 수 있고, 제1 가중치 로우는 ANN의 컨 볼루션 레이어의 필터로부터의 MC에 대응하고, MC는 적어도 하나의 비제로 가중치를 포함한다. 일부 예에서, 이 단계의 동작들은, 도 6을 참조하여 설명된 멀티플렉싱 버퍼를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 MC로부터의 제2 가중치 로우를 룩 어헤드 버퍼에 저장할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 6을 참조하여 설명된 룩 어헤드 버퍼를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 제1 가중치 로우의 각각의 비제로 가중치를 처리할 수 있고, 처리하는 것은 하나 이 상의 MAC를 이용하여 비제로 가중치의 각각에 입력값을 곱하는 것을 포함한다. 일부 예에서, 이 단계의 동작들 은, 도 6, 7 및 12를 참조하여 설명된 MAC 유닛을 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 하나 이상의 제2 가중치 로우가 룩 어헤드 한계에 기초하여 적어도 하나의 비제로 가 중치를 포함한다고 판단할 수 있고, 룩 어헤드 한계는 ANN의 LZS 조건에 적어도 부분적으로 기초한다. 일부 예 에서, 이 단계의 동작들은, 도 6을 참조하여 설명된 제로 스키핑 회로를 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 판단에 적어도 부분적으로 기초하여 제2 가중치 로우의 로우를 룩 어헤드 버퍼로부터 멀티플렉싱 버퍼 내로 복사할 수 있다. 일부 예에서, 이 단계의 동작들은, 도 6을 참조하여 설명된 제로 스키핑 회로를 참조할 수 있거나, 그에 의해 수행될 수 있다. 도 17은 본 발명의 실시예들의 양태에 따라 ANN을 처리하는 동안 FPC를 스킵하기 위한 프로세스의 일례를 도시 한다. 일부 예에서, 이러한 동작들은 장치의 기능적 요소를 제어하기 위하여 코드 세트를 실행하는 프로세서에 의해 수행될 수 있다. 추가적으로 또는 대안적으로, 프로세스는 특수 목적 하드웨어에 의해 수행될 수 있다. 일반적 으로, 이러한 동작들은 본 발명의 실시예들의 양태에 따라 설명된 방법 및 프로세스에 따라 수행될 수 있다. 예를 들어, 동작들은 다양한 서브 단계들로 구성될 수 있거나, 본 명세서에 설명된 다른 동작들과 함께 수행될 수 있다. 다양한 방법이 FPC 및 LZS를 이용하여 계층적으로 프루닝된 스파스 컨볼루션 필터의 지속성을 성취하기 위하여 사용될 수 있다. 하나의 옵션은 제로를 포함하는 MC의 모든 가중치를 처리되어야 하는 순서로 유지하는 것이다. MC는 연결 리스트에 배열될 수 있다. 알려진 크기(예를 들어, 도 3에 도시된 바와 같이, 3×3)의 각각의 MC 후 에, 다음 도면에 나타낸 바와 같이, 3D 필터 내의 현재 및 다음 MC의 인덱스 사이의 차이를 나타내는 '스텝' 값 이 유지된다. 처리하는 동안, CA는 스텝 값을 이용하고, 아래의 표 1에 나타낸 필터(s)에서의 처리된 MC의 인덱 스 값을 계산한다. FPC는 연결 리스트에 있을 수 있기 때문에 표에서는 생략된다. 표 4 Z 값 스텝 값 0 1 1 4 5 2 7 0 <도 3의 MC에 대한 스텝 값> 단계에서, 시스템은 필터 내의 MC의 연결 리스트를 생성할 수 있고, 연결 리스트 내의 각각의 MC는 적어 도 하나의 비제로 가중치를 포함하고, 연결 리스트 내의 각각의 엔트리는 연결 리스트 내의 다음 MC의 인덱스를 포함한다. 일부 예에서, 이 단계의 동작들은, 도 6 및 9 내지 12를 참조하여 설명된 제어 유닛을 참조할 수 있 거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 연결 리스트 내의 각각의 엔트리를 순차적으로 판독할 수 있다. 일부 예에서, 이 단 계의 동작들은, 도 6 및 9 내지 12를 참조하여 설명된 제어 유닛을 참조할 수 있거나, 그에 의해 수행될 수 있 다. 단계에서, 시스템은 연결 리스트 내에 대응하는 엔트리를 가지지 않는 FPC에 기초하여 필터의 FPC를 스킵 할 수 있다. 이 단계의 동작들은, 도 6 및 9 내지 12를 참조하여 설명된 제어 유닛을 참조할 수 있거나, 그에 의해 수행될 수 있다. 단계에서, 시스템은 연결 리스트 내의 각각의 MC를 처리할 수 있다. 본 명세서에 기술된 설명과 도면은 예시적인 구성을 나타내고, 청구범위의 범위 내의 모든 구현예를 나타내지 않는다. 예를 들어, 동작들 및 단계들은 재배열되거나, 조합되거나, 아니면 수정될 수 있다. 또한, 구조 및 장 치는 컴포넌트들 사이의 관계를 나타내고 설명된 개념을 불명료하게 하는 것을 방지하기 위하여 블록도의 형태 로 표현될 수 있다. 유사한 컴포넌트들 또는 특징들은 동일한 명칭을 가질 수 있지만, 상이한 도면에 대응하는 상이한 도면 부호를 가질 수 있다. 본 발명의 실시예들에 대한 일부 수정이 당해 업계에서의 통상의 기술자에게 바로 명백할 수 있고, 정의된 원리 는 본 발명의 실시예들의 범위를 벗어나지 않으면서 다른 변형에 적용될 수 있다. 따라서, 본 발명의 실시예들 은 본 명세서에서 설명된 예 및 디자인에 한정되지 않으며, 본 명세서에 개시된 원리 및 신규한 특정과 일치하 는 최광의의 범위에 따른다. 설명된 방법들은 범용 프로세서, 디지털 신호 프로세서(digital signal processor(DSP)), ASIC(application specific integrated circuit(ASIC)), FPGA(field programmable gate array) 또는 다른 프로그래머블 로직 디 바이스, 이산 게이트 또는 트랜지스터 로직 디바이스, 이산 하드웨어 컴포넌트 또는 이들의 임의의 조합에 의해 구현되거나 수행될 수 있다. 범용 프로세서는 마이크로 프로세서, 통상의 프로세서, 컨트롤러, 마이크로컨트롤 러 또는 상태 기계일 수 있다. 또한, 프로세서는 컴퓨팅 장치의 조합(예를 들어, DSP 및 마이크로프로세서의 조 합, 다수의 마이크로프로세서, DSP 코어와 결합하는 하나 이상의 마이크로프로세서 또는 임의의 다른 이러한 구 성)으로서 구현될 수 있다. 따라서, 본 명세서에 설명된 기능들은 하드웨어 또는 소프트웨어로 구현될 수 있고, 프로세서, 펌웨어 또는 이들의 임의의 조합에 의해 실행될 수 있다. 프로세서에 의해 실행되는 소프트웨어로 구 현되면, 기능들은 컴퓨터 판독 가능한 매체에 명령어 또는 코드의 형태로 저장될 수 있다. 컴퓨터 판독 가능한 매체는 코드 또는 데이터의 전송을 용이하게 하는 임의의 매체를 포함하는 비일시적인 컴퓨 터 스토리지 매체 또는 통신 매체 모두를 포함한다. 비일시적인 스토리지 매체는 컴퓨터에 의해 액세스될 수 있 는 임의의 사용 가능한 매체일 수 있다. 예를 들어, 비일시적인 스토리지 매체는, RAM(random access memory), ROM(read-only memory), EEPROM(electrically erasable programmable read-only memory), CD(compact disk) 또는 다른 광 디스크 스토리지, 자기 디스크 스토리지 또는 데이터나 코드를 운반하거나 저장하기 위한 임의의 다른 비일시적인 매체를 포함할 수 있다. 또한, 연결 컴포넌트도 컴퓨터 판독 가능한 매체로 적절하게 지칭될 수 있다. 예를 들어, 코드 또는 데이터가 동축 케이블, 광섬유 케이블, 연선(twisted pair), DSL(digital subscriber line) 또는 적외선, 라디오 또는 마이크로웨이브 신호와 같은 무선 기술을 이용하여 웹사이트, 서버 또는 다른 원격 소스로부터 전송된다면, 동 축 케이블, 광섬유 케이블, 연선, DSL 또는 무선 기술은 매체의 정의 내에 포함된다. 본 발명의 실시예들 및 이어지는 청구범위에서, \"또는(or)\"이라는 단어는, 예를 들어, X, Y, Y, XY, XZ, YZ 또 는 XYZ를 의미하도록, 포괄적 리스트를 의미한다. 또한, \"~에 기초하여(based on)\"이라는 어구는 조건의 폐쇄형 조건 세트를 나타내는데 사용되지 않는다. 예를 들어, \"조건 A에 기초하여\"로서 설명된 단계는 조건 A 및 조건 B 모두에 기초할 수 있다. 다시 말해, \"~에 기초하여\"이라는 어구는 \"~에 적어도 부분적으로 기초하여\"를 의미 하도록 해석되어야 한다. 본 발명은 상술한 실시예 및 첨부된 도면에 의해 한정되는 것이 아니며 첨부된 청구범위에 의해 한정하고자 한"}
{"patent_id": "10-2020-0016899", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "다. 따라서, 청구범위에 기재된 본 발명의 기술적 사상을 벗어나지 않는 범위 내에서 당 기술분야의 통상의 지 식을 가진 자에 의해 다양한 형태의 치환, 변형 및 변경이 가능할 것이며, 이 또한 본 발명의 범위에 속한다고 할 것이다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10 도면11 도면12 도면13 도면14 도면15 도면16 도면17"}
{"patent_id": "10-2020-0016899", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 인공 신경망을 프로세싱하기 위한 스테이지들의 일 예를 나타낸 도면이다. 도 2는 본 발명의 일 실시예에 따른 컨볼루션 동작의 일 예를 나타낸 도면이다. 도 3은 본 발명의 일 실시예에 따른 컨볼루션 신경망(convolution neural network: CNN)의 필터의 일 예를 나 타낸 도면이다. 도 4는 본 발명의 일 실시예에 따른 인공 신경망을 프루닝(pruning)하기 위한 프로세스의 일 예를 나타낸 도면 이다. 도 5는 본 발명의 일 실시예에 따른 인공 신경망을 트레이닝하기 위한 컴퓨팅 시스템의 일 예를 나타내는 도면 이다. 도 6 및 도 7은 본 발명의 일 실시예에 따른 인공 신경망을 프로세싱하기 위한 컴퓨팅 시스템의 일 예들을 나타 낸 도면이다. 도 8은 본 발명의 일 실시예에 따른 카운터 블록의 일 예를 나타낸 도면이다. 도 9는 본 발명의 일 실시예에 따른 위치 제어 블록의 일 예를 나타낸 도면이다. 도 10은 본 발명의 일 실시예에 따른 수정된 위치 제어 블록의 일 예를 나타낸 도면이다. 도 11은 본 발명의 일 실시예에 따른 데이터 제어 라인의 일 예를 나타낸 도면이다. 도 12는 본 발명의 일 실시예에 따른 데이터 및 필터 제어 메커니즘의 일 예를 나타낸 도면이다. 도 13은 본 발명의 일 실시예에 따른 혼합 채널에서의 제로-스키핑(zero-skipping)을 위한 프로세스의 일 예를 나타낸 도면이다. 도 14 및 도 15는 본 발명의 일 실시예에 따른 인공 신경망을 프루닝하기 위한 프로세스의 일 예들을 나타낸 도 면이다. 도 16은 본 발명의 일 실시예에 따른 인공 신경망을 프로세싱하는 동안 제로 스키핑을 위한 프로세스의 일 예를나타낸 도면이다. 도 17은 본 발명의 일 실시예에 따른 인공 신경망을 프로세싱하는 동안 완전 프루닝된 채널(fully pruned channel: FOC)을 스키핑하기 위한 프로세스의 일 예를 나타낸 도면이다."}
