{"patent_id": "10-2019-0180035", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0086233", "출원번호": "10-2019-0180035", "발명의 명칭": "완화된 프루닝을 통한 행렬 데이터 처리 방법 및 그 장치", "출원인": "삼성전자주식회사", "발명자": "박준기"}}
{"patent_id": "10-2019-0180035", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "행렬 곱 연산을 수행하는 컴퓨팅 장치에 의해 수행되는 행렬 데이터 처리 방법에 있어서,상기 행렬에 포함된 하나 이상의 원소 각각에 대하여, 원소 각각의 값(value)이 지정된 조건을 만족하는 경우해당 원소를 무효 원소로 결정하는 단계;상기 무효 원소를 제외한 상기 행렬에 포함된 유효 원소의 인덱스 값을 기초로 비트스트림을 생성하는 단계; 및상기 비트스트림을 지정된 개수로 균등 분할하고, 상기 균등 분할 수행 결과 생성된 복수의 하위 비트스트림 각각에 대응되는 허프만 코드를 생성하는 단계를 포함하는,행렬 데이터 처리 방법."}
{"patent_id": "10-2019-0180035", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1 항에 있어서,상기 유효 원소는,비-제로 원소(non-zero element)이고,상기 원소의 값이 지정된 조건을 만족하는 경우 해당 원소를 무효 원소로 결정하는 단계는,상기 원소의 값이 제1 임계값보다 크고 제2 임계값보다 작은 경우, 해당 원소를 제로 원소(zero element)로 변경하는 단계를 포함하는,행렬 데이터 처리 방법."}
{"patent_id": "10-2019-0180035", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1 항에 있어서,상기 비트스트림은,상기 행렬의 원소 수와 동일한 수의 비트로 구성되고,상기 비트스트림을 생성하는 단계는,상기 유효 원소의 인덱스에 대응되는 1 비트와 상기 무효 원소의 인덱스에 대응되는 0 비트로 구성된 비트스트림을 생성하는 단계를 포함하는,행렬 데이터 처리 방법."}
{"patent_id": "10-2019-0180035", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "프로세서; 를 포함하고,상기 프로세서는,행렬에 포함된 하나 이상의 원소 각각에 대하여, 원소 각각의 값(value)이 지정된 조건을 만족하는 경우 해당원소를 무효 원소로 결정하고, 상기 무효 원소를 제외한 상기 행렬에 포함된 유효 원소의 인덱스 값을 기초로비트스트림을 생성하고, 상기 비트스트림을 지정된 개수로 균등 분할하고, 상기 균등 분할 수행 결과 생성된 복공개특허 10-2021-0086233-3-수의 하위 비트스트림 각각에 대응되는 허프만 코드를 생성하는,행렬 데이터 처리 장치."}
{"patent_id": "10-2019-0180035", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4 항에 있어서,상기 프로세서는,상기 허프만 코드에 대응되는 허프만 트리를 생성하고, 상기 허프만 트리의 레벨 각각에 대응되는 룩 업 테이블을 더 포함하되, 상기 허프만 트리의 n레벨에 대응되는 룩 업 테이블의 개수는 상기 허프만 트리의 n+1 레벨에 대응되는 룩 업테이블의 개수보다 많은,행렬 데이터 처리 장치."}
{"patent_id": "10-2019-0180035", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4 항에 있어서,상기 유효 원소는,비-제로 원소(non-zero element)이고,상기 프로세서는,상기 원소의 값이 제1 임계값보다 크고 제2 임계값보다 작은 경우, 해당 원소를 제로 원소(zero element)로 변경하는,행렬 데이터 처리 장치."}
{"patent_id": "10-2019-0180035", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제4 항에 있어서,상기 비트스트림은,상기 행렬의 원소 수와 동일한 수의 비트로 구성되고,상기 프로세서는,상기 유효 원소의 인덱스에 대응되는 1 비트와 상기 무효 원소의 인덱스에 대응되는 0 비트로 구성된 비트스트림을 생성하는,행렬 데이터 처리 장치."}
{"patent_id": "10-2019-0180035", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "컴퓨터를 이용하여 제1항 내지 제3항 중 어느 한 항의 방법을 실행시키기 위하여 기록매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0180035", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 일 실시예에 따라 행렬 곱 연산을 수행하는 컴퓨팅 장치에 의해 수행되는 행렬 데이터 처리 방법은 상 기 행렬에 포함된 하나 이상의 원소 각각에 대하여, 원소 각각의 값(value)이 지정된 조건을 만족하는 경우 해당 원소를 무효 원소로 결정하는 단계, 상기 무효 원소를 제외한 상기 행렬에 포함된 유효 원소의 인덱스 값을 기초 로 비트스트림을 생성하는 단계 및 상기 비트스트림을 지정된 개수로 균등 분할하고, 상기 균등 분할 수행 결과 생성된 복수의 하위 비트스트림 각각에 대응되는 허프만 코드를 생성하는 단계를 포함할 수 있다."}
{"patent_id": "10-2019-0180035", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 완화된 프루닝을 통한 행렬 데이터 처리 방법 및 그 장치에 관한 것으로서, 더 상세하게는 완화된 프 루닝 에 관한 것이다."}
{"patent_id": "10-2019-0180035", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 지능의 발전에 따라 다양한 형태의 신경망(NeuralNetwork) 모델이 개발되고 있다. 대부분의 신경망 모델에 서 행렬 곱 연산을 수행하나, 행렬 데이터를 송수신하기 위하여 많은 비용이 소요된다. 특히 희소성을 지니는 행렬의 경우 유의미한 값을 갖는 행렬의 원소에 비해 소요되는 비용이 크다. 기존의 가속하드웨어에서는 레이어(Layer) 간의 연결성을 나타내는 파라미터 행렬의 희소성을 효과적으로 처리 하기 위해 CSC(Compressed Sparse Column) 포맷을 활용하나, 이는 행렬의 크기가 커짐에 따라 압축률이 떨어지 는 한계가 있다."}
{"patent_id": "10-2019-0180035", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 희소성을 지닌 행렬을 효율적으로 압축하고 행렬 데이터를 빠르게 처리하는 방법 및 그 장치를 제공 하는 것을 목적으로 한다. 그러나 이러한 과제는 예시적인 것으로, 이에 의해 본 발명의 범위가 한정되는 것은 아니다."}
{"patent_id": "10-2019-0180035", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일 실시예에 따라 행렬 곱 연산을 수행하는 컴퓨팅 장치에 의해 수행되는 행렬 데이터 처리 방법은 상기 행렬에 포함된 하나 이상의 원소 각각에 대하여, 원소 각각의 값(value)이 지정된 조건을 만족하는 경우 해당 원소를 무효 원소로 결정하는 단계, 상기 무효 원소를 제외한 상기 행렬에 포함된 유효 원소의 인덱스 값 을 기초로 비트스트림을 생성하는 단계 및 상기 비트스트림을 지정된 개수로 균등 분할하고, 상기 균등 분할 수 행 결과 생성된 복수의 하위 비트스트림 각각에 대응되는 허프만 코드를 생성하는 단계를 포함할 수 있다. 일 실시예에서 상기 유효 원소는, 비-제로 원소(non-zero element)이고, 상기 원소의 값이 지정된 조건을 만족 하는 경우 해당 원소를 무효 원소로 결정하는 단계는, 상기 원소의 값이 제1 임계값보다 크고 제2 임계값보다 작은 경우, 해당 원소를 제로 원소(zero element)로 변경하는 단계를 포함할 수 있다. 일 실시예에서 상기 비트스트림은, 상기 행렬의 원소 수와 동일한 수의 비트로 구성되고, 상기 비트스트림을 생 성하는 단계는, 상기 유효 원소의 인덱스에 대응되는 1 비트와 상기 무효 원소의 인덱스에 대응되는 0 비트로 구성된 비트스트림을 생성하는 단계를 포함할 수 있다. 본 발명의 다른 실시예에 따른 행렬 데이터 처리 장치는 프로세서를 포함하고, 상기 프로세서는, 행렬에 포함된 하나 이상의 원소 각각에 대하여, 원소 각각의 값(value)이 지정된 조건을 만족하는 경우 해당 원소를 무효 원 소로 결정하고, 상기 무효 원소를 제외한 상기 행렬에 포함된 유효 원소의 인덱스 값을 기초로 비트스트림을 생 성하고, 상기 비트스트림을 지정된 개수로 균등 분할하고, 상기 균등 분할 수행 결과 생성된 복수의 하위 비트 스트림 각각에 대응되는 허프만 코드를 생성할 수 있다. 일 실시예에서 상기 프로세서는, 상기 허프만 코드에 대응되는 허프만 트리를 생성하고, 상기 허프만 트리의 레 벨 각각에 대응되는 룩 업 테이블을 더 포함하되, 상기 허프만 트리의 n 레벨에 대응되는 룩 업 테이블의 개수 는 상기 허프만 트리의 n+1 레벨에 대응되는 룩 업 테이블의 개수보다 많을 수 있다. 일 실시예에서 상기 유효 원소는, 비-제로 원소(non-zero element)이고, 상기 프로세서는, 상기 원소의 값이 제 1 임계값보다 크고 제2 임계값보다 작은 경우, 해당 원소를 제로 원소(zero element)로 변경할 수 있다. 일 실시예에서 상기 비트스트림은, 상기 행렬의 원소 수와 동일한 수의 비트로 구성되고, 상기 프로세서는, 상 기 유효 원소의 인덱스에 대응되는 1 비트와 상기 무효 원소의 인덱스에 대응되는 0 비트로 구성된 비트스트림 을 생성할 수 있다."}
{"patent_id": "10-2019-0180035", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 개시의 다양한 실시예가 첨부된 도면과 연관되어 기재된다. 본 개시의 다양한 실시예는 다양한 변경을 가할 수 있고 여러 가지 실시예를 가질 수 있는 바, 특정 실시예들이 도면에 예시되고 관련된 상세한 설명이 기 재되어 있다. 그러나, 이는 본 개시의 다양한 실시예를 특정한 실시 형태에 대해 한정하려는 것이 아니며, 본 개시의 다양한 실시예의 사상 및 기술 범위에 포함되는 모든 변경 및/또는 균등물 내지 대체물을 포함하는 것으 로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 구성요소에 대해서는 유사한 참조 부호가 사용되었다. 본 개시의 다양한 실시예에서 사용될 수 있는 \"포함한다\" 또는 \"포함할 수 있다\" 등의 표현은 개시(disclosur e)된 해당 기능, 동작 또는 구성요소 등의 존재를 가리키며, 추가적인 하나 이상의 기능, 동작 또는 구성요소 등을 제한하지 않는다. 또한, 본 개시의 다양한 실시예에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 명세서상 에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하 나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 본 개시의 다양한 실시예에서 \"또는\" 등의 표현은 함께 나열된 단어들의 어떠한, 그리고 모든 조합을 포함한다. 예를 들어, \"A 또는 B\"는, A를 포함할 수도, B를 포함할 수도, 또는 A 와 B 모두를 포함할 수도 있다. 본 개시의 다양한 실시예에서 사용된 \"제1\", \"제2\", \"첫째\", 또는 \"둘째\" 등의 표현들은 다양한 실시예들의 다 양한 구성요소들을 수식할 수 있지만, 해당 구성요소들을 한정하지 않는다. 예를 들어, 상기 표현들은 해당 구 성요소들의 순서 및/또는 중요도 등을 한정하지 않는다. 상기 표현들은 한 구성요소를 다른 구성요소와 구분하 기 위해 사용될 수 있다. 예를 들어, 제1 사용자 기기와 제2 사용자 기기는 모두 사용자 기기이며, 서로 다른 사용자 기기를 나타낸다. 예를 들어, 본 개시의 다양한 실시예의 권리 범위를 벗어나지 않으면서 제1 구성요소 는 제2 구성요소로 명명될 수 있고, 유사하게 제2 구성요소도 제1 구성요소로 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 상기 어떤 구성요소 가 상기 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 상기 어떤 구성요소와 상기 다른 구성요소 사이에 새로운 다른 구성요소가 존재할 수도 있다고 이해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있다고 언급된 때에는, 상기 어떤 구성 요소와 상기 다른 구성요소 사이에 새로운 다른 구성요소가 존재하지 않는 것으로 이해될 수 있어야 할 것이다. 본 개시의 다양한 실시예에서 사용한 용어는 단지 특정일 실시예를 설명하기 위해 사용된 것으로, 본 개시의 다 양한 실시예를 한정하려는 의도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현 을 포함한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 본 개시의 다양한 실시예가 속하는 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가지고 있다. 일반적으로 사용되는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥 상 가지는 의미와 일치하는 의미를 가지는 것으로 해석되어야 하며, 본 개시의 다양한 실시예에서 명백하게 정의되지 않는 한, 이상적이거 나 과도하게 형식적인 의미로 해석되지 않는다. 본 발명에서 개시하는 인공 지능(artificial intelligence, AI)은 인공적인 지능 또는 이를 만들 수 있는 방법 론을 연구하는 분야를 의미할 수 있고, 기계 학습(machine learning)은 인공지능 기술의 한 분야로서 컴퓨팅 장 치가 데이터를 통해 학습하여 특정 대상 혹은 조건을 이해할 수 있게 하거나 데이터의 패턴을 찾아내 분류하는기술적 방식으로써 컴퓨터가 데이터를 분석할 수 있게 하는 알고리즘일 수 있다. 본 발명에서 개시하는 기계 학 습은 인공지능 모델을 학습하기 위한 동작 방법을 포함하는 의미로서 이해될 수 있다. 도 1은 본 발명의 일 실시예에 따른 행렬 데이터 처리 방법을 수행하는 행렬데이터 처리 장치의 구성 및 동작을 설명하기 위한 도면이다. 일 실시예에 따른 행렬 데이터 처리 장치는 입출력 인터페이스, 메모리, 프로세서, 통신 모듈 및 시스템 버스(bus)를 포함할 수 있다. 입출력 인터페이스는 입출력 장치와의 인터페이스를 위한 수단일 수 있다. 예를 들어, 입력 장치는 키보드 또는 마우스 등의 장치를, 그리고 출력 장치는 어플리케이션의 통신 세션을 표시하기 위한 디스플레이와 같은 장치를 포함할 수 있다. 다른 예로 입출력 인터페이스는 터치스크린과 같이 입력과 출력을 위한 기능이 하 나로 통합된 장치와의 인터페이스를 위한 수단일 수도 있다. 보다 구체적인 예로, 행렬 데이터 처리 장치 의 프로세서는 메모리에 로딩된 컴퓨터 프로그램의 명령을 처리함에 있어서 외부 서버가 제공하는 데 이터를 이용하여 구성되는 서비스 화면이나 시각화된 데이터가 입출력 인터페이스를 통해 디스플레이에 표 시될 수 있다. 메모리는 컴퓨터에서 판독 가능한 기록 매체로서, RAM(random access memory), ROM(read only memory) 및 디스크 드라이브와 같은 비소멸성 대용량 기록장치(permanent mass storage device)를 포함할 수 있다. 또한, 메모리에는 운영체제와 적어도 하나의 프로그램 코드가 저장될 수 있다. 이러한 소프트웨어 구성요소들은 드라이브 메커니즘(drive mechanism)을 이용하여 메모리와는 별도의 컴퓨터에서 판독 가능한 기록 매체로 부터 로딩될 수 있다. 이러한 별도의 컴퓨터에서 판독 가능한 기록 매체는 플로피 드라이브, 디스크, 테이프, DVD/CD-ROM 드라이브, 메모리 카드 등의 컴퓨터에서 판독 가능한 기록 매체를 포함할 수 있다. 다른 실시예에서 소프트웨어 구성요소들은 컴퓨터에서 판독 가능한 기록 매체가 아닌 통신 모듈을 통해 메모리에 로딩 될 수도 있다. 예를 들어, 적어도 하나의 프로그램은 개발자들 또는 어플리케이션의 설치 파일을 배포하는 파일 배포 시스템이 네트워크를 통해 제공하는 파일들에 의해 설치되는 프로그램에 기반하여 메모리에 로딩될 수 있다. 프로세서는 기본적인 산술, 로직 및 입출력 연산을 수행함으로써, 컴퓨터 프로그램의 명령을 처리하도록 구성될 수 있다. 명령은 메모리 또는 통신 모듈에 의해 프로세서로 제공될 수 있다. 예를 들어 프로세서는 메모리와 같은 기록 장치에 저장된 프로그램 코드에 따라 수신되는 명령을 실행하도록 구 성될 수 있다. 일 실시예에서 프로세서는 행렬에 포함된 하나 이상의 원소 각각에 대하여, 원소 각각의 값(value)이 지정 된 조건을 만족하는 경우 해당 원소를 무효 원소로 결정하고, 상기 무효 원소를 제외한 상기 행렬에 포함된 유 효 원소의 인덱스 값을 기초로 비트스트림을 생성하고, 상기 비트스트림을 지정된 개수로 균등 분할하고, 상기 균등 분할 결과 생성된 복수의 하위 비트스트림 각각에 대응되는 허프만 코드를 생성할 수 있다. 통신 모듈은 네트워크를 통해 외부 서버와 행렬 데이터 처리 장치가 서로 통신하기 위한 기능을 제공 할 수 있다. 물론 통신 모듈은 다른 사용자 다른 서버와 통신하기 위한 기능을 제공할 수도 있다. 일례로, 행렬 데이터 처리 장치의 프로세서가 메모리와 같은 기록 장치에 저장된 프로그램 코드에 따라 생성한 요청이 통신 모듈의 제어에 따라 네트워크를 통해 외부 서버로 전달될 수 있다. 역으로, 외부 서버 의 프로세서의 제어에 따라 제공되는 제어 신호나 명령, 콘텐츠, 파일 등이 통신 모듈과 네트워크를 거쳐 행렬 데이터 처리 장치의 통신 모듈을 통해 행렬 데이터 처리 장치로 수신될 수 있다. 예를 들어 통 신 모듈을 통해 수신된 외부 서버의 제어 신호나 명령 등은 프로세서나 메모리로 전달될 수 있 고, 콘텐츠나 파일 등은 행렬 데이터 처리 장치가 더 포함할 수 있는 저장 매체로 저장될 수 있다. 통신 방식은 제한되지 않으며, 네트워크가 포함할 수 있는 통신망(일례로, 이동통신망, 유선 인터넷, 무선 인터 넷, 방송망)을 활용하는 통신 방식뿐만 아니라 기기들간의 근거리 무선 통신 역시 포함될 수 있다. 예를 들어, 네트워크는, PAN(personal area network), LAN(local area network), CAN(campus area network), MAN(metropolitan area network), WAN(wide area network), BBN(broadband network), 인터넷 등의 네트워크 중 하나 이상의 임의의 네트워크를 포함할 수 있다. 또한, 네트워크는 버스 네트워크, 스타 네트워크, 링 네트 워크, 메쉬 네트워크, 스타-버스 네트워크, 트리 또는 계층적(hierarchical) 네트워크 등을 포함하는 네트워크 토폴로지 중 임의의 하나 이상을 포함할 수 있으나, 이에 제한되지 않는다.또한, 다른 실시예들에서 행렬 데이터 처리 장치는 도 1의 구성요소들보다 더 많은 구성요소들을 포함할 수도 있다. 그러나, 대부분의 종래기술적 구성요소들을 명확하게 도시할 필요성은 없다. 예를 들어, 행렬 데이 터 처리 장치는 트랜시버(transceiver), GPS(Global Positioning System) 모듈, 카메라, 각종 센서, 데이 터베이스 등과 같은 다른 구성요소들을 더 포함할 수도 있다. 도 2은 본 발명의 일 실시예에 따른 행렬 데이터 처리 방법의 순서도이다. 단계 S110에서 행렬 데이터 처리 장치는 행렬에 포함된 원소의 값이 지정된 조건을 만족하는지 여부를 확인할 수 있다. 예를 들어 행렬 데이터 처리 장치는 다양한 인공 신경망에서의 행렬 연산을 수행할 수 있다. 일 예로 지정된 조건은 후술되는 프루닝(pruning)을 수행하기 위한 기준치일 수 있다. 프루닝은 인공 지능에서 문제 해 결을 위한 검색을 그래프 검색으로 표현했을 때, 검색할 가지를 줄이는 일이다. 따라서 본 발명의 몇몇 실시예 에 따른 행렬 데이터 처리 장치는 지정된 조건을 만족하는 비-제로(Non-zero) 원소를 제로 원소로 변경하는 프 루닝을 수행할 수 있다. 상술한 지정된 조건은 사용자에 의해 지정될 수 있고, 외부 서버에 의해 지정될 수도 있다. 단계 S120에서 특정 원소가 전술한 지정된 조건이 만족된 경우 행렬 데이터 처리 장치는 해당 원소를 무효 원소 로 결정할 수 있다. 이 경우 무효 원소로 결정된 행렬의 원소는 별도로 저장되지 않고, 이후 데이터 연산 과정 또는 데이터 전송 과정에서 사용되지 않을 수 있다. 무효 원소는 예를 들어 행렬의 제로 원소일 수 있다. 예를 들어 타겟 원소의 값이 제1 임계값보다 크고 제2 임계값보다 작은 경우, 해당 원소를 제로 원소(zero element) 로 변경할 수 있다. 단계 S130에서 특정 원소가 전술한 지정된 조건을 만족하지 못한 경우 행렬 데이터 처리 장치는 해당 원소를 유 효 원소로 결정할 수 있다. 이후 행렬 데이터 처리 장치는 유효 원소의 인덱스 값을 기초로 행렬의 원소 수와 동일한 개수의 비트를 포함하는 비트스트림을 생성할 수 있다. 유효 원소는 예를 들어 행렬의 비-제로(Non- zero)원소일 수 있다. 이 경우 행렬 데이터 처리 장치는 유효 원소에 관한 데이터만 별도로 저장하여 이후 데이 터 연산 과정 또는 데이터 전송 과정에서 전술한 유효 원소에 관한 데이터를 사용할 수 있다. 유효 원소에 관한 데이터는 유효 원소의 값(value) 및 유효 원소의 행 또는 열 정보를 포함할 수 있다. 유효 원소의 인덱스 값이란 행렬 내에서의 유효 원소의 위치와 관련된 데이터일 수 있다. 예를 들어 행 우선 순 서에 따라 행렬 내 원소의 인덱스 값을 부여할 수 있고, 열 우선 순서에 따라 행렬 내 원소의 인덱스 값을 부여 할 수 있다. 따라서 본 발명의 몇몇 실시예에 따라 생성되는 비트스트림은 행렬 내 원소 각각에 대응되는 비트 로 구성될 수 있다. 이 경우 행렬 내 원소 각각에 대응되는 비트의 개수는 1개일 수 있으나, 이에 한하지 않고 하나 이상의 비트와 전술한 행렬 내 원소 각각이 대응될 수도 있음은 물론이다. 보다 상세한 설명은 관련 도면 에서 후술한다. 일 실시예에서 행렬 내 원소가 유효 원소인 경우 해당 원소에 대응되는 비트는 '1'일 수 있고, 행렬 내 원소가 무효 원소인 경우 해당 원소에 대응되는 비트는 '0'일 수 있다. 따라서 이 경우 생성된 비트스 트림은 유효 원소의 인덱스에 대응되는 '1' 비트와 상기 무효 원소의 인덱스에 대응되는 '0' 비트로 구성될 수 있다. 따라서 본 발명의 일 실시예에 따른 행렬의 유효 원소에 관한 데이터는 유효 원소의 값(value) 및 유효 원소의 인덱스 값에 대응되는 비트스트림을 포함할 수 있다. 단계 S140에서 행렬 데이터 처리 장치는 비트스트림을 지정된 개수로 균등 분할할 수 있다. 지정된 개수는 데이 터 전송 용량, 메모리 용량 및 데이터 전송 속도 등을 기초로 정해질 수 있고, 행렬의 형태를 기초로 정해질 수 도 있다. 예를 들어 3x4 형태의 행렬에 대응되는 12개의 비트로 구성된 비트스트림의 경우, 상기 비트스트림은 3개씩 균등 분할될 수 있다. 단계 S150에서 행렬 데이터 처리 장치는 균등 분할 결과 생성된 복수의 하위 비트스트림 각각에 대응되는 허프 만 코드를 생성할 수 있다. 예를 들어 12개의 비트로 구성된 비트스트림에 대하여 4개씩 균등 분할하여 4개의 하위 비트스트림을 생성한 경우, 제1 하위 비트스트림에 대응되는 허프만 코드'0', 제2 하위 비트스트림에 대응 되는 허프만 코드'10', 제3 하위 비트스트림에 대응되는 허프만 코드'110', 제4 하위 비트스트림에 대응되는 허 프만 코드'111'를 생성할 수 있다. 이 경우 열두개의 비트로 구성된 비트스트림을 허프만 코드인 아홉개의 비트 로 대체할 수 있다. 보다 상세한 설명은 관련 도면에서 후술한다.도 3 내지 도 4는 본 발명의 일 실시예에 따른 프루닝(pruning)을 수행하는 방법을 설명하기 위한 도면이다. 일 실시예에 따라 인공 신경망의 행렬 연산을 수행하는 행렬 처리 장치는 신경망의 처리 속도 및 정확도를 높이기 위해 행렬 데이터에 대한 프루닝(pruning)을 수행할 수 있다. 따라서 본 발명의 몇몇 실시예에 따른 행렬 데이 터 처리 장치는 지정된 조건을 만족하는 비-제로(Non-zero) 원소를 제로 원소로 변경하는 프루닝을 수행할 수 있다. 하지만 이 경우 하나의 임계값만을 지정하여, 해당 임계값 미만인 경우 무효 원소로 지정하고 해당 임계 값 이상인 경우 유효 원소로 지정하는 경우, 유연한 데이터 처리가 불가능 하다는 문제가 있다. 이에 반해 본 발명의 몇몇 실시예에 따른 행렬 데이터 처리 장치는 두 개의 임계값을 이용하여 행렬 데이터의 프루닝을 수행 할 수 있다. 일 실시예에서 행렬의 원소 각각의 값(value)이 제1 임계값 이상이고 제2 임계값 미만인 경우에 한 하여 해당 행렬 원소를 무효 원소로 지정할 수 있다. 이와 같이 원소의 값이 특정 구간에 해당하는 경우에만 무 효 원소로 지정하는 경우, 해당 구간을 기준으로 양 쪽 구간에 해당하는 복수의 원소들을 명확하게 클러스터링 할 수 있다. 특히, 인공 신경망의 행렬 곱 연산을 수행하는 행렬 데이터 처리 장치의 경우 전술한 바와 같은 프 루닝을 수행함으로써 데이터 분류, 카테고리화 또는 라벨링의 정확도를 높일 수 있다. 예를 들어 도 3에 도시된 바를 참조하여, 초기 행렬에 대하여 하나의 임계값을 이용하여 프루닝을 수행하 는 경우와 본 발명의 몇몇 실시예에 따라 두개 이상의 임계값을 이용하여 프루닝을 수행하는 경우에 대하여 설명한다. 행 우선 순서에 따라 도시된 행렬을 배열로 표현하면 다음과 같이 표현할 수 있다 [{1.52, 0.03, 0.12, 0.89}, {0.38, 0.41, 0.14, 1.75}, {0.13, 0.09, 1.03, 0.25}, {0.29, 0.48, 0.31, 0.17}]. 먼저, 종래 기술에 따라 하나의 임계값을 이용하여 프루닝을 수행하는 경우에 대하여 설명한다. 예를 들어, 0.4 를 임계값으로 하여 0.4 미만의 값을 갖는 원소를 무효 원소(예를 들어, 제로 원소)로 지정하고 0.4 이상의 값 을 갖는 원소를 유효 원소(예를 들어, 비-제로 원소)로 정하는 경우, 데이터 처리 장치는 [{1.52, 0, 0, 0.89}, {0, 0.41, 0, 1.75}, {0, 0, 1.03, 0}, {0, 0.48, 0, 0}]와 같이 유효 원소 만을 별도로 저장할 수 있다. 이 경우 예를 들어 이후 0.1 미만의 값을 갖는 행렬의 원소를 검출하고자 하는 경우, 다시 초기 입력 행렬에 대한 프루닝을 재수행 해야하므로 데이터 처리의 유연성과 확장성이 매우 낮다. 반면 본 발명의 몇몇 실시예에 따른 행렬 데이터 처리 방법에 따라 두 개 이상의 임계값을 이용하여 프루닝을 수행하는 경우 초기 입력 행렬에 대한 단계별 프루닝이 가능하며, 데이터 처리의 확장성과 유연성이 매우 높아진다. 예를 들어 0.3 이상 0.5 이하의 값을 갖는 원소를 무효 원소로 지정하는 경우, 일 실시예에 따른 데 이터 처리 장치는 [{1.52, 0, 0, 0.89}, {0.38, 0, 0, 1.75}, {0, 0, 1.03, 0}, {0, 0, 0.31, 0}]와 같은 유효 원소를 별도로 저장할 수 있다. 이 경우 전술한 유효 원소의 인덱스 값을 표시한 데이터 [{1, 0, 0, 1}, {1, 0, 0, 1}, {0, 0, 1, 0}, {0, 0, 1, 0}]도 별도로 저장할 수 있으며, 이 경우 메모리 사용량을 최소화 하기 위해 상술한 유효 원소 만을 행렬 [1.52, 0.89, 0.38, 1.75, 1.03, 0.31]로 저장할 수 있다. 또한, 일 실시예에서 도 4에 도시된 바를 참조하여 본 발명의 일 실시예에 따른 프루닝 방법에 대하여 보다 상 세하게 설명한다. 예를 들어 비-제로 원소로 구성된 M x N 행렬에 대한 프루닝이 필요한 경우, 행렬 데이터 처리 장치는 M·N 개 의 비트로 구성된 비트스트림(|nzVec|)을 획득할 수 있다. 이 경우 행렬 데이터 처리 장치는 획득한 비트스트림 을 스캔하고 사이클 당 특정 길이의 비트 패턴을 검출할 수 있다. 단일 사이클당 조회되는 비트 패턴의 길이는 별도의 매개변수(예를 들어, 'symLen')을 이용하여 정해질 수 있다. 예를 들어 도 4에 도시된 예에서의 비트 패 턴의 길이는 8개 이다. 이 경우 0 또는 1을 선택할 수 있는 8 비트 ('symLen') 내의 비트 위치는 thL에서 thH까 지의 임계값을 기초로 정해질 수 있다. 즉, 본 실시예에서 행렬 데이터 처리 장치는 현재 비트 패턴 (bitPattern)이 추출되는 동일한 위치 (|nzVec|)에 대한 밀집된 가중치 행렬을 확인할 수 있다. 본 실시예에서 프루닝은 이동할 bitPattern이 없을 때까지 반복적으로 수행하며 새로운 피트 패턴을 선택할 수 있다. 도 5는 본 발명의 일 실시예에 따른 비트스트림을 생성하는 방법을 설명하기 위한 도면이다. 일 실시예에 따른 행렬 데이터 처리 장치는 초기 행렬에 대한 프루닝을 수행하여 결과 행렬을 획득할 수 있다. 이하 도 5를 참조하여 본 발명의 몇몇 실시예에 따라 허프만 코드를 이용하여 획득한 결과 행 렬을 효율적으로 저장하는 방법에 대하여 설명한다. 도 5는 종래 CSC 포맷을 이용하여 행렬 데이터를 저장 하는 방법과 본 발명의 몇몇 실시예에 따른 HNI(Huffman-coded Nonzero Indication) 포맷을 이용하여 행렬 데이터를 저장하는 방법에 대하여 설명한다. 종래 CSC 포맷(Compressed Sparse Column Format)은 결과 행렬의 유효 원소만 저장된 행렬 [1.52, 0.41, 0.48, 1.03, 0.89, 1.75]과 유효 원소의 행, 열 인덱스에 대응되는 행렬 [0, 1, 3, 2, 0, 1][0, ... ]을 더 저 장할 수 있다. 반면 본 발명의 몇몇 실시예에 따른 HNI 포맷을 이용하는 경우 유효 원소의 인덱스에 대응되는 행렬 [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0]을 저장할 수 있으며, 전술한 행렬에 대응되는 비트스 트림 \"1001010100100100\"을 획득할 수 있다. 이후 지정된 개수에 따라 획득된 비트스트림을 복수의 하위 비트스 트림으로 생성할 수 있고('1001', '0101', '0010', '0100'), 복수의 하위 비트스트림 각각에 대응되는 허프만 코드를 생성할 수 있다. 4개의 비트로 구성된 4개의 하위 비트스트림은 순차적으로 허프만 코드 \"010110111\"로 표현될 수 있다. 즉 본 실시예에 따르면 행렬의 유효 원소의 인덱스 정보는 허프만 코드로 압축되어 저장될 수 있다. 도 6은 본 발명의 일 실시예에 따른 하위 비트스트림을 설명하기 위한 표다. 비트스트림이 복수개의 하위 비트스트림으로 생성되는 경우, 일 실시예에 따르면 하위 비트스트림 각각을 구성하는 비트의 개수('symLen')가 클수록 행렬 데이터의 압축 효율이 상승할 수 있다. 다만, 이 경우 하위 비트스트림 각각을 구성하는 비트의 수 가 허프만 코드 각각에 대한 하위 비트스트림 메모리 가용량을 초과하지 않음에 유의한다. 도 7 내지 도 10은 본 발명의 다른 실시예에 따른 행렬 데이터 처리 장치를 설명하기 위한 도면이다. 일 실시예 에서 행렬 데이터 처리 장치는 상기 허프만 코드에 대응되는 허프만 트리를 생성하고, 상기 허프만 트리의 레벨 각각에 대응되는 룩 업 테이블을 더 포함하되, 상기 허프만 트리의 n레벨에 대응되는 룩 업 테이블의 개수는 상 기 허프만 트리의 n+1 레벨에 대응되는 룩 업 테이블의 개수보다 많을 수 있다. 보다 상세하게 일 실시예에 따 른 행렬 데이터 처리 장치는 병렬 허프만 디코더와 멀티레벨 LUT(Look Up Table)를 이용하여 전술한 하위 비트 스트림 각각에 대응되는 노드로 구성된 허프만 트리를 저장할 수 있다. 허프만 트리는 레벨이 낮을수록 참조 빈 도가 상승한다. 따라서 본 발명의 일 실시예에 따른 행렬 데이터 처리 장치는 MAC(multiply and accumulate) 각 각에 대하여 레벨 0에 대응되는 LUT를 포함할 수 있다. 이 때, 레벨 1의 참조 빈도는 레벨 0의 참조 빈도보다 낮으므로, 레벨 1에 대응되는 LUT의 개수는 전술한 레벨 0에 대응되는 LUT의 개수보다 작다. 예를 들어 MAC와 레벨 0에 대응되는 LUT가 동일한 개수라면, 레벨 1에 대응되는 LUT의 개수는 레벨 0에 대응되는 LUT의 개수의 절반일 수 있고, 레벨 2에 대응되는 LUT의 개수는 레벨 1에 대응되는 LUT의 개수의 절반일 수 있다. 이와 같은 하드웨어 아키텍쳐를 통해 행렬 데이터 처리 장치의 PE(Processing Engine) 효율성을 향상시킬 수 있다. 도 7은 행렬 데이터 처리 장치의 아키텍처로 프로세싱 요소(PE; Processing Element) 배열, 데이터 버퍼, 제어 로직, 공유 LUT를 갖는 허프만 디코더 및 주파수 분배기(frequency divider)를 포함할 수 있다. PE 배열은 행렬 연산을 수행할 수 있다. 일 예로 인공 신경망의 행렬 연산을 수행하는 행렬 데이터 처리 장치의 PE 배열은 각 신경망 레이어에서 상태 업데이트에 대한 행렬-벡터 곱셈을 연산할 수 있다. 단일 PE는 디코더 로 직이 연결된 4 개의 MAC (Multiply Accumulate) 장치로 구성될 수 있다. 다만, MAC 장치의 개수가 이에 한정되 는 것은 아님에 유의한다. 디코더 로직은 멀티 레벨 허프만 LUT에 액세스하여 0이 아닌 요소가 지정된 심볼 길 이('symLen')로 존재하는 비트 위치를 제공할 수 있다. 각 MAC 장치는 기본적으로 게이트 상태 (예 : 기록삭제, 입력, 셀 또는 출력 게이트)를 업데이트할 수 있다. 전술한 4 개의 PE는 상위 수준의 허프만 LUT, 입력 버퍼 및 셀 상태 버퍼에 대한 메모리를 공유하는 단일 PE 타일을 구성할 수 있다. 이 경우 입력 버퍼와 셀 상태 버퍼는 PE 어레이에 분산되어 위치할 수 있다. 제어 로직은 외부 메모리에서 오는 데이터를 적절한 버퍼 위치에 분배할 수 있다. 즉, 제어 로직은 PE 어레이 내의 데이터 흐름을 관리하고 병렬 처리를 최대화할 수 있다. 데이터 버퍼는 가중치 버퍼, 허프만 코드 버퍼, 출력 버퍼, 입력 버퍼 및 셀 상태 버퍼를 포함하는 다양한 데이 터 버퍼를 포함할 수 있다. 이하. 도 8 및 도 9를 참조하여 허프만 디코더에 대하여 설명한다. 일 실시예에서 도 8에 도시된 로직에 따라 비트스트림이 허프만 코딩에 의해 허프만 코드로 압축될 수 있다. 본 발명의 몇몇 실시예에 따른 행렬 데이터 처리 장치는 허프만 트리의 레벨 각각에 대응되는 멀티 레벨 LUT응 이 용하여 데이터 처리의 오버헤드를 최소화 할 수 있다. 일 실시예에서 온-칩(on-chip) LUT는 런타임 디코딩을 위해 허프만 트리를 저장할 수 있다. 각각의 MAC에 연결 된 디코더 로직은 허프만 LUT에 병렬로 액세스하여 계산 될 유효 원소의 데이터를 찾는 심볼을 획득할 수 있다. 이 경우 허프만 코드 길이가 길어질수록 더 높은 레벨에 대응되는 LUT에 액세스 할 확률은 낮아진다. 따라서 본 발명의 몇몇 실시예에 따라 여러 PE가 상위 레벨 LUT를 공유 하는 경우, 허프만 디코딩에 필요한 메모리 오버 헤드가 줄어들 수 있다. 도 9에 비트스트림의 예시가 도시되어 있다. 도 10을 참조하여 주파수 분배기에 대하여 설명한다. 도시된 바와 같이 주파수 분배기는 다양한 희소성 단계를 유연하게 처리하기 위해 서로 다른 주파수에서 여러 클럭 신호를 제공할 수 있다. 예를 들어 디코딩 된 심볼이 '11011110'인 경우, MAC은 6 개의 클럭 사이클을 필요로 하는 6 개의 곱셈을 계산할 수 있다. 이 경우 디코더 로직 및 허프만 LUT는 다음 5 클럭 주기 동안 작동을 중단하고 동적 전력 소비를 최소화할 수 있다. 평균적으로 디코딩된 심볼의 개수는 주어진 행렬의 희소성에 의해 결정될 수 있다. 따라서 본 발명의 일 실시예에 따른 행 렬 데이터 처리 장치는 디코더 또는 LUT를 비활성화하는 대신 각 MAC에 평균적으로 하나의 유효 원소가 제공되 도록 느린 클럭을 이용할 수 있다.. 이상 설명된 본 발명에 따른 실시예는 컴퓨터 상에서 다양한 구성요소를 통하여 실행될 수 있는 컴퓨터 프로그 램의 형태로 구현될 수 있으며, 이와 같은 컴퓨터 프로그램은 컴퓨터로 판독 가능한 매체에 기록될 수 있다. 이 때, 매체는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체, CD-ROM 및 DVD와 같은 광기록 매체, 플롭티컬 디스크(floptical disk)와 같은 자기-광 매체(magneto-optical medium), 및 ROM, RAM, 플래시 메모리 등과 같은, 프로그램 명령어를 저장하고 실행하도록 특별히 구성된 하드웨어 장치를 포함할 수 있다. 한편, 상기 컴퓨터 프로그램은 본 발명을 위하여 특별히 설계되고 구성된 것이나 컴퓨터 소프트웨어 분야의 당 업자에게 공지되어 사용 가능한 것일 수 있다. 컴퓨터 프로그램의 예에는, 컴파일러에 의하여 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용하여 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드도 포 함될 수 있다. 본 발명에서 설명하는 특정 실행들은 일 실시예들로서, 어떠한 방법으로도 본 발명의 범위를 한정하는 것은 아 니다. 명세서의 간결함을 위하여, 종래 전자적인 구성들, 제어 시스템들, 소프트웨어, 상기 시스템들의 다른 기 능적인 측면들의 기재는 생략될 수 있다. 또한, 도면에 도시된 구성 요소들 간의 선들의 연결 또는 연결 부재들 은 기능적인 연결 및/또는 물리적 또는 회로적 연결들을 예시적으로 나타낸 것으로서, 실제 장치에서는 대체 가 능하거나 추가의 다양한 기능적인 연결, 물리적인 연결, 또는 회로 연결들로서 나타내어질 수 있다. 또한, \"필 수적인\", \"중요하게\" 등과 같이 구체적인 언급이 없다면 본 발명의 적용을 위하여 반드시 필요한 구성 요소가 아닐 수 있다. 이와 같이 본 발명은 도면에 도시된 실시예를 참고로 설명되었으나 이는 예시적인 것에 불과하며, 당해 기술분 야에서 통상의 지식을 가진 자라면 이로부터 다양한 변형 및 균등한 다른 실시예가 가능하다는 점을 이해할 것 이다. 따라서 본 발명의 진정한 기술적 보호 범위는 첨부된 청구범위의 기술적 사상에 의하여 정해져야 할 것이다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10"}
{"patent_id": "10-2019-0180035", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 행렬 데이터 처리 방법을 수행하는 행렬데이터 처리 장치의 구성 및 동작을 설명하기 위한 도면이다. 도 2은 본 발명의 일 실시예에 따른 행렬 데이터 처리 방법의 순서도이다. 도 3 내지 도 4는 본 발명의 일 실시예에 따른 프루닝(pruning)을 수행하는 방법을 설명하기 위한 도면이다. 도 5는 본 발명의 일 실시예에 따른 비트스트림을 생성하는 방법을 설명하기 위한 도면이다. 도 6은 본 발명의 일 실시예에 따른 하위 비트스트림을 설명하기 위한 표이다. 도 7 내지 도 10은 본 발명의 다른 실시예에 따른 행렬 데이터 처리 장치를 설명하기 위한 도면이다."}
