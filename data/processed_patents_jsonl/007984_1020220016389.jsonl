{"patent_id": "10-2022-0016389", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0119966", "출원번호": "10-2022-0016389", "발명의 명칭": "전자 장치에서 데이터베이스 파일을 복구하는 방법", "출원인": "삼성전자주식회사", "발명자": "신윤호"}}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,데이터베이스 파일을 포함하는 메모리; 및상기 메모리에 연결된 적어도 하나의 프로세서를 포함하고,상기 적어도 하나의 프로세서는,상기 전자 장치에서 실행되는 제1 어플리케이션이 상기 데이터베이스 파일에 액세스하는 동안 상기 데이터베이스 파일이 손상된 것을 확인하고, 상기 손상된 데이터베이스 파일의 복구가 완료될 때까지 상기 전자 장치에서 실행되는 제2 어플리케이션이 상기데이터베이스 파일에 액세스하지 않고 대기하도록 제어하고, 상기 손상된 데이터베이스 파일의 복구가 완료되면, 상기 데이터베이스 파일이 복구됨을 지시하는 복구 상태 정보를 기록하고, 상기 복구 상태 정보에 기반하여 상기 제2 어플리케이션이 상기 복구된 데이터베이스 파일에 액세스하도록 제어하는, 전자 장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 적어도 하나의 프로세서는,상기 데이터베이스 파일이 복구 중임을 나타내기 위해 상기 손상된 데이터베이스 파일에 대한 파일 락을 설정하고,상기 손상된 데이터베이스 파일을 복구하도록 설정되는, 전자 장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서, 상기 파일 락은 상기 데이터베이스 파일에 대하여 고유하게 설정되는 익스클루시브 락(exclusive lock)인, 전자 장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서, 상기 적어도 하나의 프로세서는,상기 손상된 데이터베이스 파일에 대한 복구에 성공하면, 상기 데이터베이스 파일에 대한 상기 파일 락을 해제하도록 설정되는, 전자 장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서, 상기 복구 상태 정보가 제1 값으로 설정되면 상기 데이터베이스 파일이 복구된 것임을 나타내고, 상기 복구 상태 정보가 제2 값으로 설정되면 상기 데이터베이스 파일이 복구되지 않은 것임을 나타내는, 전자장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 복구 상태 정보는 상기 데이터베이스 파일에 대한 메타데이터에 포함되는 사용자 정의 속성으로 구현되는,전자 장치. 공개특허 10-2023-0119966-3-청구항 7 제6항에 있어서, 상기 사용자 정의 속성은 리눅스 시스템에서 사용하는 Inode xattr로 설정되는, 전자 장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서, 상기 복구 상태 정보는 복구된 데이터베이스 파일에 포함되는 테이블로 구현되는, 전자 장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서, 상기 데이터베이스 파일은 복수의 페이지(page)로 구성되고,상기 복구 상태 정보는 상기 데이터베이스 파일 내 첫번째 페이지(page)에 포함되는, 전자 장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서, 상기 적어도 하나의 프로세서는 데이터베이스 라이브러리를 포함하고,상기 데이터베이스 라이브러리는 상기 데이터베이스 파일에 대한 복구 동작을 식별하기 위한 제1 로직 및 상기데이터베이스 파일에 대한 복구 상태를 식별하기 위한 제2 로직을 포함하도록 설정되는, 전자 장치."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "전자 장치의 동작 방법에 있어서,상기 전자 장치에서 실행되는 제1 어플리케이션이 데이터베이스 파일에 액세스하는 동안 상기 데이터베이스 파일이 손상된 것을 확인하는 동작;상기 손상된 데이터베이스 파일의 복구가 완료될 때까지 상기 전자 장치에서 실행되는 제2 어플리케이션이 상기데이터베이스 파일에 액세스하지 않고 대기하도록 제어하는 동작;상기 손상된 데이터베이스 파일의 복구가 완료됨을 확인함에 기반하여, 상기 데이터베이스 파일이 복구됨을 지시하는 복구 상태 정보를 기록하는 동작; 및상기 복구 상태 정보에 기반하여 상기 제2 어플리케이션이 상기 복구된 데이터베이스 파일에 액세스하도록 제어하는 동작을 포함하는 방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 상기 데이터베이스 파일이 복구 중임을 나타내기 위해 상기 손상된 데이터베이스 파일에 대한 파일 락을 설정하는 동작; 및상기 손상된 데이터베이스 파일을 복구하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서, 상기 파일 락은 상기 데이터베이스 파일에 대하여 고유하게 설정되는 익스클루시브 락(exclusive lock)인 방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제12항에 있어서, 상기 손상된 데이터베이스 파일에 대한 복구에 성공하면, 상기 데이터베이스 파일에 대한 상기 파일 락을 해제공개특허 10-2023-0119966-4-하는 동작을 더 포함하는 방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서, 상기 복구 상태 정보가 제1 값으로 설정되면 상기 데이터베이스 파일이 복구된 것임을 나타내고, 상기 복구 상태 정보가 제2 값으로 설정되면 상기 데이터베이스 파일이 복구되지 않은 것임을 나타내는 방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서, 상기 복구 상태 정보는 상기 데이터베이스 파일에 대한 메타데이터에 포함되는 사용자 정의 속성으로 구현되는방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서, 상기 사용자 정의 속성은 리눅스 시스템에서 사용하는 Inode xattr로 설정되는 방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제11항에 있어서, 상기 복구 상태 정보는 복구된 데이터베이스 파일에 포함되는 테이블로 구현되는 방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제11항에 있어서, 상기 데이터베이스 파일은 복수의 페이지(page)로 구성되고,상기 복구 상태 정보는 상기 데이터베이스 파일 내 첫번째 페이지(page)에 포함되는 방법."}
{"patent_id": "10-2022-0016389", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제11항에 있어서, 상기 전자 장치는 데이터베이스 라이브러리를 포함하고,상기 데이터베이스 라이브러리는 상기 데이터베이스 파일에 대한 복구 동작을 식별하기 위한 제1 로직 및 상기데이터베이스 파일에 대한 복구 상태를 식별하기 위한 제2 로직을 포함하도록 설정되는 방법."}
{"patent_id": "10-2022-0016389", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예들에 따르면, 전자 장치는, 데이터베이스 파일을 포함하는 메모리, 및 상기 메모리에 연결된 적어 도 하나의 프로세서를 포함한다. 상기 적어도 하나의 프로세서는, 상기 전자 장치에서 실행되는 제1 어플리케이 션이 상기 데이터베이스 파일에 액세스하는 동안 상기 데이터베이스 파일이 손상된 것을 확인하고, 상기 손상된 데이터베이스 파일의 복구가 완료될 때까지 상기 전자 장치에서 실행되는 제2 어플리케이션이 상기 데이터베이스 파일에 액세스하지 않고 대기하도록 제어하고, 상기 손상된 데이터베이스 파일의 복구가 완료되면, 상기 데이터 베이스 파일이 복구됨을 지시하는 복구 상태 정보를 기록하고, 상기 복구 상태 정보에 기반하여 상기 제2 어플리 케이션이 상기 복구된 데이터베이스 파일에 액세스하도록 제어할 수 있다. 그 밖의 다양한 실시예가 가능하다."}
{"patent_id": "10-2022-0016389", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 다양한 실시예는 전자 장치에서 동작하는 데이터베이스에 손상이 발생했을 때 데이터베이스를 복구하 는 기술에 관한 것이다."}
{"patent_id": "10-2022-0016389", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "디지털 기술의 발달과 함께 이동통신 단말기, 스마트폰(smart phone), 태블릿(tablet) PC(personal computer), 웨어러블 장치(wearable device) 등과 같은 다양한 유형의 전자 장치가 널리 사용되고 있다. 전자 장치는 다양한 사용자 경험을 제공하기 위해, 다양한 데이터를 저장할 수 있다. 다양한 데이터의 운용을 위해 전자 장치는 컴퓨터 시스템과 마찬가지로 주 메모리(예를 들어, RAM(Random Access Memory)) 및 대용량 저 장 장치인 스토리지(storage)를 포함하는 저장 장치 계층을 포함하며, 다양한 데이터는 다양한 구조로 구현되는 데이터베이스 시스템을 구성할 수 있다. 전자 장치는 데이터베이스에 기반하여, 하나 이상의 어플리케이션, 서비스 및/또는 운영 체제의 데이터를 관리 할 수 있다. 예를 들어, 전자 장치는 실행 중인 어플리케이션, 서비스 및/또는 운영 체제에 기반하여, 데이터베 이스의 데이터를 처리할 수 있다."}
{"patent_id": "10-2022-0016389", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "전자 장치에서 데이터베이스 손상을 인식하면 전자 장치는 데이터베이스에 대한 복구 동작을 수행할 수 있다. 전자 장치에서 손상된 데이터베이스를 복구하는 동안 복구 중인 데이터베이스에 프로세스(예를 들어, 어플리케 이션)가 접근하면 진행 중인 데이터베이스 복구 동작에 오류가 발생할 수 있다. 또한, 전자 장치에서 손상된 데이터베이스를 복구하는 동안 프로세스가 복구 중인 데이터베이스에 접근하면 프 로세스는 해당 데이터베이스를 정상적으로 인식하지 못하여 데이터베이스 에러가 발생할 수 있다. 다양한 실시예들에 따르면, 전자 장치는 데이터베이스 복구 동작 또는 데이터베이스 복구 상태를 식별하여 데이 터베이스 복구 동작에 대한 오류를 감소시킬 수 있다."}
{"patent_id": "10-2022-0016389", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시예들에 따르면, 과제의 해결 수단이 상술한 해결 수단들로 제한되는 것은 아니며, 언급되지 아니한"}
{"patent_id": "10-2022-0016389", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 2, "content": "해결 수단들은 본 명세서 및 첨부된 도면으로부터 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다. 다양한 실시예들에 따르면, 전자 장치는, 데이터베이스 파일을 포함하는 메모리, 및 상기 메모리에 연결된 적어 도 하나의 프로세서를 포함한다. 상기 적어도 하나의 프로세서는, 상기 전자 장치에서 실행되는 제1 어플리케이 션이 상기 데이터베이스 파일에 액세스하는 동안 상기 데이터베이스 파일이 손상된 것을 확인하고, 상기 손상된 데이터베이스 파일의 복구가 완료될 때까지 상기 전자 장치에서 실행되는 제2 어플리케이션이 상기 데이터베이 스 파일에 액세스하지 않고 대기하도록 제어하고, 상기 손상된 데이터베이스 파일의 복구가 완료되면, 상기 데 이터베이스 파일이 복구됨을 지시하는 복구 상태 정보를 기록하고, 상기 복구 상태 정보에 기반하여 상기 제2 어플리케이션이 상기 복구된 데이터베이스 파일에 액세스하도록 제어할 수 있다. 다양한 실시예들에 따르면, 전자 장치의 동작 방법은, 상기 전자 장치에서 실행되는 제1 어플리케이션이 데이터 베이스 파일에 액세스하는 동안 상기 데이터베이스 파일이 손상된 것을 확인하는 동작과, 상기 손상된 데이터베 이스 파일의 복구가 완료될 때까지 상기 전자 장치에서 실행되는 제2 어플리케이션이 상기 데이터베이스 파일에 액세스하지 않고 대기하도록 제어하는 동작과, 상기 손상된 데이터베이스 파일의 복구가 완료되면 상기 데이터 베이스 파일이 복구됨을 지시하는 복구 상태 정보를 기록하는 동작과, 상기 복구 상태 정보에 기반하여 상기 제 2 어플리케이션이 상기 복구된 데이터베이스 파일에 액세스하도록 제어하는 동작을 포함할 수 있다."}
{"patent_id": "10-2022-0016389", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "다양한 실시예들에 따르면, 전자 장치는 데이터베이스 복구 동작을 식별하여 복구 중인 데이터베이스에 접근하 는 프로세스들 간 충돌 및 데이터 에러를 방지할 수 있다. 다양한 실시예들에 따르면, 전자 장치는 데이터베이스 복구 상태를 식별하여 프로세스가 복구된 데이터베이스에 접근 시 데이터 손실을 방지할 수 있다."}
{"patent_id": "10-2022-0016389", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워 크)를 통하여 전자 장치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하 여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서 버를 통하여 전자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메 모리, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통 신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장 치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안 테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다.햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다. 도 2는 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 일실시예에 따르면, 프로그램은 전자 장치의 하나 이상의 리소스들을 제어하기 위한 운영 체제, 미들웨어, 또는 상기 운영 체제 에서 실행 가능한 어플리케이션을 포함할 수 있다. 운영 체제는, 예를 들면, AndroidTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 프로그램 중 적어도 일부 프로그램은, 예를 들면, 제조 시에 전자 장치에 프리로드되거나, 또는 사용자에 의해 사용 시 외부 전자 장치(예: 전자 장치 (102 또는 104), 또는 서버)로부터 다운로드되거나 갱신 될 수 있다. 운영 체제는 전자 장치의 하나 이상의 시스템 리소스들(예: 프로세스, 메모리, 또는 전원)의 관리(예: 할당 또는 회수)를 제어할 수 있다. 운영 체제는, 추가적으로 또는 대체적으로, 전자 장치 의 다른 하드웨어 디바이스, 예를 들면, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 구동하기 위한 하나 이상의 드라이 버 프로그램들을 포함할 수 있다. 미들웨어는 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보가 어플리케이션 에 의해 사용될 수 있도록 다양한 기능들을 어플리케이션으로 제공할 수 있다. 미들웨어는, 예를 들 면, 어플리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매니 저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니저, 로케이션 매니저, 그래픽 매니저, 시큐리티 매니저, 통화 매니저, 또는 음성 인식 매니저 를 포함할 수 있다. 어플리케이션 매니저는, 예를 들면, 어플리케이션의 생명 주기를 관리할 수 있다. 윈도우 매니저 는, 예를 들면, 화면에서 사용되는 하나 이상의 GUI 자원들을 관리할 수 있다. 멀티미디어 매니저는, 예를 들면, 미디어 파일들의 재생에 필요한 하나 이상의 포맷들을 파악하고, 그 중 선택된 해당하는 포맷에 맞 는 코덱을 이용하여 상기 미디어 파일들 중 해당하는 미디어 파일의 인코딩 또는 디코딩을 수행할 수 있다. 리 소스 매니저는, 예를 들면, 어플리케이션의 소스 코드 또는 메모리의 메모리의 공간을 관리할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량, 온도 또는 전원을 관리하고, 이 중 해당 정보를 이용하여 전자 장치의 동작에 필요한 관련 정보를 결정 또는 제공할 수 있다. 일실시예에 따르면, 파워 매 니저는 전자 장치의 바이오스(BIOS: basic input/output system)(미도시)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 어플리케이션에 의해 사용될 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 패키지 매니저는, 예를 들면, 패키지 파일의 형태로 배포되는 어플리케이션의 설치 또는 갱신을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 전자 장치와 외부 전자 장치 간의 무선 연 결 또는 직접 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 지정된 이벤트(예: 착신 통화, 메시지, 또는 알람)의 발생을 사용자에게 알리기 위한 기능을 제공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치의 위치 정보를 관리할 수 있다. 그래픽 매니저는, 예를 들면, 사용자에게 제공될 하 나 이상의 그래픽 효과들 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 시큐리티 매니저는, 예를 들면, 시스템 보안 또는 사용자 인증을 제공할 수 있다. 통화(telephony) 매니저 는, 예를 들면, 전자 장치에 의해 제공되는 음성 통화 기능 또는 영상 통화 기능을 관리할 수 있다. 음성 인식 매니저는, 예를 들면, 사용자의 음성 데이터를 서버로 전송하고, 그 음성 데이터에 적어도 일부 기반하여 전자 장치에서 수행될 기능에 대응하는 명령어(command), 또는 그 음성 데이터에 적어도 일 부 기반하여 변환된 문자 데이터를 서버로부터 수신할 수 있다. 일 실시예에 따르면, 미들웨어는 동 적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. 일 실시예에 따르면, 미들웨 어의 적어도 일부는 운영 체제의 일부로 포함되거나, 또는 운영 체제와는 다른 별도의 소프트웨 어로 구현될 수 있다. 어플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브라우 저, 카메라, 알람, 컨택트, 음성 인식, 이메일, 달력, 미디어 플레이어 , 앨범, 와치, 헬스(예: 운동량 또는 혈당과 같은 생체 정보를 측정), 또는 환경 정보 (예: 기압, 습도, 또는 온도 정보 측정) 어플리케이션을 포함할 수 있다. 일실시예에 따르면, 어플리케이 션은 전자 장치와 외부 전자 장치 사이의 정보 교환을 지원할 수 있는 정보 교환 어플리케이션(미도 시)을 더 포함할 수 있다. 정보 교환 어플리케이션은, 예를 들면, 외부 전자 장치로 지정된 정보 (예: 통화, 메 시지, 또는 알람)를 전달하도록 설정된 노티피케이션 릴레이 어플리케이션, 또는 외부 전자 장치를 관리하도록 설정된 장치 관리 어플리케이션을 포함할 수 있다. 노티피케이션 릴레이 어플리케이션은, 예를 들면, 전자 장치 의 다른 어플리케이션(예: 이메일 어플리케이션)에서 발생된 지정된 이벤트(예: 메일 수신)에 대응하 는 알림 정보를 외부 전자 장치로 전달할 수 있다. 추가적으로 또는 대체적으로, 노티피케이션 릴레이 어플리케 이션은 외부 전자 장치로부터 알림 정보를 수신하여 전자 장치의 사용자에게 제공할 수 있다. 장치 관리 어플리케이션은, 예를 들면, 전자 장치와 통신하는 외부 전자 장치 또는 그 일부 구성 요소(예: 외부 전자 장치의 디스플레이 모듈 또는 카메라 모듈)의 전원(예: 턴-온 또는 턴-오프) 또는 기능(예: 밝기, 해 상도, 또는 포커스)을 제어할 수 있다. 장치 관리 어플리케이션은, 추가적으로 또는 대체적으로, 외부 전자 장 치에서 동작하는 어플리케이션의 설치, 삭제, 또는 갱신을 지원할 수 있다. 도 3은 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스와 관련된 동작의 일 예시를 설명하기 위한 도면 이다. 전자 장치는 스마트폰, 스마트패드, 태블릿 PC, PDA(personal digital assistance), 랩톱 PC 또는 데스크 톱 PC 중 적어도 하나에 대응할 수 있다. 전자 장치는 프로세서, 메모리 및 디스플레이 모듈 을 포함할 수 있다. 전자 장치는 도 1에 도시된 전자 장치와 적어도 일부가 동일할 수 있다. 다양한 실시예에 따라, 프로세서는 메모리내에 저장된 하나 이상의 인스트럭션을 실행할 수 있다. 프로세서는 데이터를 처리하기 위한 회로, 예를 들어, IC(integrated circuit), ALU(arithmetic logic unit), FPGA(field programmable gate array) 및 LSI(large scale integration) 중 적어도 하나를 포함할 수 있다. 메모리는 전자 장치와 관련된 데이터를 저장할 수 있다. 메모리는 휘발성 메모리를 포함하거나, 비휘발성 메모리를 포함할 수 있다. 비휘발성 메모리는 전자 장치 내에 포함되는 내장 메모리의 형태 및/또는 전자 장치에 탈착 가능한(detachable to) 외장 메모리의 형태를 가 질 수 있다. 다양한 실시예에 따라, 메모리는 어플리케이션과 관련된 인스트럭션 및 운영 체제(예: 도 1의 운영 체제)와 관련된 인스트럭션을 저장할 수 있다. 운영 체제는 프로세서에 의해 실행되는 시스템 소프 트웨어일 수 있다. 프로세서는 운영 체제를 실행함으로써, 전자 장치에 포함된 하드웨어 컴포넌트들 (예: 도 1의 메모리 내지 도 1의 안테나 모듈)을 관리할 수 있다. 운영 체제는 시스템 소프트웨어를 제외한 나머지 소프트웨어인 어플리케이션으로 API(application programming interface)를 제공할 수 있 다.다양한 실시예에 따라, 메모리 내에서, 복수의 인스트럭션들의 집합인 어플리케이션이 하나 이상 설 치될 수 있다. 어플리케이션이 메모리 내에 설치되었다는 것은, 어플리케이션이 메모리에 연결된 프로세서에 의해 실행될 수 있는 형태(format)로 저장되었음을 의미할 수 있다. 다양한 실시예에 따라, 디스플레이 모듈은 OLED(organic light emitting diodes), LCD(liquid crystal display) 및 LED(light emitting diodes) 중 적어도 하나를 이용하여 사용자에게 정보를 시각적으로 출력할 수 있다. 다양한 실시예에 따라, 디스플레이 모듈을 통해 출력되는 사용자 인터페이스(user interface, UI)를 보다 직관적으로 제어할 수 있도록, 전자 장치는 디스플레이 모듈 위에 배치되는 터치 센서 패널 (touch screen panel, TSP)(미도시)들을 포함할 수 있다. 다양한 실시예에 따라, 프로그램은 어플리케이션 및 데이터베이스 사이의 데이터의 처리를 수행 하기 위한 기능을 제공하는 데이터베이스 매니저 및/또는 DB 라이브러리(database library)를 포함할 수 있다. DB 라이브러리는 미들웨어(예: 도 1 내지 도 2의 미들웨어)에 포함될 수 있다. 미들웨어 는, 데이터베이스와 같은 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보가 어플 리케이션에 의해 사용될 수 있도록, 다양한 기능들을 어플리케이션으로 제공할 수 있다. 전자 장치 는 데이터베이스 매니저 및/또는 DB 라이브러리에 기반하여, 어플리케이션에 의한 데이터 베이스의 생성, 검색 또는 변경을 수행할 수 있다. 다양한 실시예에 따라, DB 라이브러리는 어플리케이션에 기반한 데이터베이스의 변경된 데이터 (modified data of the database)를 관리하고, 데이터의 변경과 관련된 오류를 탐지 및 복원하는 데이터 로그 및 리커버리 매니저를 포함할 수 있다. 다양한 실시예에 따라, DB 라이브러리에 포함된 데이터베이스 의 데이터를 처리하거나 또는 변경하기 위한 기능이 전자 장치에서 실행 중인 어플리케이션에 기반하여 실행된 경우, 전자 장치는 파일 시스템을 통해 데이터베이스내에 포함된 데이터(또는 데이터베이스 파일)에 접근할 수 있다(may access). 해당 데이터(또는 데이터베이스 파일)가 파일 시스템(32 0)으로부터 어플리케이션으로 전달될 때, 전자 장치는 데이터 로그 및 리커버리 매니저에 기반 하여 데이터의 정합성(consistency) 및/또는 무결성(integrity)을 보장할 수 있다. 다양한 실시예에 따라, 전자 장치는 파일 시스템에 기반하여, 비휘발성 메모리에 기반하는 스토 리지(storage)에 저장된 데이터를 관리할 수 있다. 다양한 실시예에 따라, 전자 장치는 파일 시스템 을 이용하여 데이터베이스의 데이터(예: 파일)가 저장된 위치를 관리할 수 있다. 다양한 실시예에 따라, 파일 시스템은 운영 체제에 포함될 수 있다. 다양한 실시예에 따라, 전자 장치는 메모리의 휘발성 메모리 및/또는 비휘발성 메모리 중 적어도 일부를 스토리지로 설정할 수 있다. 스토리지는 전자 장치와 관련된 데이터가 보존되는 저장 영역 에 대응할 수 있다. 이하에서는, 메모리는 스토리지 영역과 구별되는 휘발성 메모리 및/또는 비휘발성 메 모리의 일부분을 의미할 수 있다. 예를 들어, 메모리는 전자 장치와 관련된 데이터를 처리하기 위한 작업 영역에 대응할 수 있다. 다양한 실시예에 따라, 전자 장치는 데이터베이스에 기반하여, 어플리케이션과 관련된 데이터를 관리할 수 있다. 데이터베이스는 체계화된 데이터의 집합으로, 지정된 리스트 또는 데이터 구조에 기반하 여, 스토리지 내에 저장된 데이터의 집합을 의미할 수 있다. 다양한 실시예에 따라, 전자 장치 내에 설치된 어플리케이션 및 서비스는 데이터베이스에 기반하여 작동할 수 있다. 다양한 실시예에 따라, 전자 장치가 작동하는 상태에서, 서로 다른 복수의 어플리케이션 들 및 서비스에 의한 데이터베이스의 접근이 빈번하게 발생될 수 있다. 다양한 실시예에 따라, 전자 장치 의 스토리지 내에 저장된 데이터베이스의 개수는, 도 3에 도시된 일 실시예에 제한되지 않으며, 복수 개일 수 있다. 다양한 실시예에 따라, 전자 장치가 오류 없이 어플리케이션을 실행하기 위하여, 전자 장치는 데이터베이스에 저장된 데이터를 정상적인 상태로 유지하는 데이터 무결성을 보장하면서, 데이터베이스 와 관련된 트랜잭션(transaction)의 원자성(atomicity)을 보장할 수 있다. 원자성은, 하나의 트랜잭션에 포함된 모든 동작들에 기반하여 데이터베이스의 데이터를 연산한 결과가 데이터베이스에 모두 반영되 거나 전혀 반영되지 않는 것을 의미할 수 있다. 다양한 실시예에 따라, 해당 트랜잭션은 데이터베이스의 상태를 변경하기 위하여 수행하는 동작의 단위를 의미할 수 있다. 다양한 실시예에 따라, 트랜잭션은 데이터베이스의 데이터와 관련된 동작들의 논리적 작업 단위(LUW, logical units of work)로, 어플리케이션 및 데이터베이스 사이의 상호 작용의 단위일 수 있다. 데이터베이스의 데이터와 관련된 동작은, 예를 들어, OPEN, SELECT, INSERT, DELETE, UPDATE, CLOSE와 같은 질의어(Structured Query Language, SQL)에 기반하여, 데이터베이스에 접근하는 동작을 의 미할 수 있다. 다양한 실시예에 따라, 하나의 트랜잭션은 데이터베이스의 데이터와 관련된 하나 이상의 동작 및/또는 질 의어의 집합을 의미할 수 있다. 다양한 실시예에 따라, 트랜잭션에 포함되고 데이터베이스의 데이터와 관 련된 동작은, 데이터의 읽기 동작, 데이터의 추가 동작, 데이터의 삭제 동작 및 데이터의 변경 동작을 포함할 수 있다. 트랜잭션의 커밋(commit)은, 트랜잭션에 포함된 데이터와 관련된 모든 동작이 성공적으로 수행되었음 을 의미할 수 있다. 다양한 실시예에 따라, 전자 장치는 데이터베이스 매니저 및/또는 데이터 로그 및 리커버리 매니저 에 기반하여, 데이터베이스의 데이터의 무결성 및 원자성을 보장할 수 있다. 예를 들어, 전자 장치 는 저널 방식에 기반하여 데이터베이스의 변경된 데이터를 관리함으로써, 데이터베이스의 데이 터의 무결성 및 원자성을 보장할 수 있다. 저널 방식은 WAL(Write-Ahead Logging) 방식 및/또는 롤백(Roll- back) 방식을 포함할 수 있다. 다양한 실시예에 따라, 전자 장치는 SQLite에 기반하는 데이터베이스를 포함할 수 있다. 전자 장치 는 WAL 방식에 따라 SQLite에 기반하는 데이터베이스에 접근함으로써, 트랜잭션의 원자성을 보장할 수 있다. 도 4는 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스와 관련된 동작의 다른 예시를 설명하기 위한 도 면이다. 도 4를 참조하면, 전자 장치(예를 들어, 도 1의 전자 장치, 또는 도 3의 전자 장치)는 어플리케 이션, 데이터베이스(DB) 모듈, 및 데이터베이스를 포함할 수 있다. 다양한 실시예에 따라, DB 모듈은 제1 레이어 상에서 구현되는 데이터베이스 매니저(예를 들어, 도 2의 데이터베이스 매니저 또는 도 3의 데이터베이스 매니저), 제1 레이어 상에서 구현되는 에러 처리기(error handler, 430), 제1 레이어 상에서 구현되는 리커버리 매니저, 및 제2 레이어 상에서 구현되는 DB 라이브러리 를 포함할 수 있다. 다양한 실시예에 따라, 제1 레이어는 Android OS 에서 사용되는 java layer이고, 제2 레이 어는 Android OS 에서 사용되는 native layer로 구현될 수 있다. 다양한 실시예에 따라, DB 모듈은 전자 장치 내 프로세서(예를 들어, 도 1의 프로세서 또는 도 3의 프로세서) 내에 구현될 수 있다. 다양한 실시예에 따라, DB 모듈은 어플리케이션 및 데이터베이 스 사이의 데이터의 처리를 수행하기 위한 기능을 제공할 수 있다. 다양한 실시예에 따라, DB 모듈은 어플리케이션에 의한 데이터베이스의 생성, 검색 또는 변경을 수행할 수 있다. 다양한 실시예에 따라, DB 모듈은 어플리케이션의 접근 시 데이터베이스의 데이터파일 오류를 탐지 및/또는 복원 할 수 있다. 다양한 실시예에 따라, 어플리케이션은 도 1 내지 도 3의 어플리케이션으로 구현될 수 있다. 다양한 실시예에 따라, 에러 처리기는 데이터베이스 매니저 내에 포함될 수도 있다. 다양한 실시예에 따라, 리커버리 매니저는 도 3의 리커버리 매니저로 구현되고, DB 라이브러리는 도 3의 DB 라이브러리 로 구현되며, 데이터베이스는 도 3의 데이터베이스로 구현될 수 있다. 다양한 실시예에 따라, Android OS 에서 사용하는 데이터베이스 엔진이 SQLite인 경우, 데이터베이스 매니저 는 SQLiteDatabase를 이용하여 구현되고, DB 라이브러리는 libsqlite.so로 구현될 수 있다. 다양한 실시예에 따라, 데이터베이스 매니저는 어플리케이션에서 수행하는 데이터베이스에 대한 오픈 및/또는 쿼리 명령에 따라 DB 프레임워크 상에 존재하는 코드 집합을 처리할 수 있다. 다양한 실시예에 따라, DB 라이브러리는 Android OS 에서 사용되는 프로그램 언어가 실행되는 native layer에서 구현될 수 있다. 다양한 실시예에 따라, 어플리케이션은 DB 모듈로 데이터 베이스 open request를 전송하고, DB 모듈 은 파일 시스템(예를 들어, 도 3의 파일 시스템)을 통해 데이터베이스로 open, read, 및/또는 write 커맨드를 전송할 수 있다. 다양한 실시예에 따라, DB 모듈은 데이터베이스로 전송한 open, read, 및/또는 write 커맨드에 따른 결과 정보를 어플리케이션으로 전송할 수 있다. 다양한 실시예에 따라, 전자 장치의 운용 중 예기치 않은 시스템 혹은 하드웨어 오류에 의해 데이터베이스 내 데이터베이스 파일에 손상이 발생할 수 있다. 다양한 실시예에 따라, 데이터베이스의 헤더 혹은스키마가 손상된 경우, 중요 메타데이터에 접근하지 못하여 데이터베이스에 접근 자체가 불가능해지는 문 제가 발생할 수 있다. 다양한 실시예에 따라, 데이터베이스의 일부 데이터가 손상된 경우에도 나머지 다른 데이터에 접근하지 못하고 데이터베이스의 초기화가 발생하는 문제가 발생할 수 있다. 예를 들어, 데이터 베이스의 초기화가 발생하면 기존의 유저 데이터 연락처, 메시지와 같은 중요 사용자 데이터가 유실될 수 있다. 다양한 실시예에 따라, 전자 장치는 다양한 데이터베이스 복구 기법을 통해 손상된 데이터베이스 파 일에서 유효한 유저 데이터를 추출하여 새로운 데이터베이스 파일을 구성함으로써 손상된 데이터베이스 파일을 복구할 수 있다. 도 5는 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스 파일이 손상된 경우를 설명하기 위한 도면이다. 도 5를 참조하면, 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 4의 전자 장 치)에서 실행되는 제1 어플리케이션은 데이터베이스 파일에 액세스한 후 데이터베이스 파일 이 손상됨을 인식하고, 데이터베이스 파일에 대한 복구를 진행할 수 있다. 예를 들어, 데이터베이스 파일내 제1 페이지(page 1)의 일부가 손상되고, 제i 페이지(page i)의 전부가 손상될 수 있다. 다양한 실시예에 따라, 전자 장치에서 실행되는 제2 어플리케이션은 손상된 데이터 베이스 파일에 접 근하여 손상된 데이터 베이스 파일에 액세스할 수 있다. 다양한 실시예에 따라, 제1 어플리케이션에 서 데이터베이스 파일을 복구하는 중 제2 어플리케이션에서 데이터베이스 파일에 접근하는 경우 진행 중인 복구 프로세스가 정상적으로 수행되지 못할 수 있다. 다양한 실시예에 따라, 제1 어플리케이션 에서 데이터베이스 파일을 복구하는 중 데이터베이스 파일에 접근하는 제2 어플리케이션은 데이 터베이스 파일을 정상적으로 인식하지 못하여 부가적인 에러를 유발할 수 있다. 다양한 실시예에 따라, 어플리케이션들(510, 520) 간 프로세스가 충돌하는 경우, 데이터베이스 파일의 복구 프 로세스가 정상적으로 수행되지 않고 복구 프로세스가 실패하여 유저의 중요 데이터가 유실되는 문제가 발생할 수 있다. 다양한 실시예에 따라, 제1 어플리케이션의 복구 로직에 의해 정상적으로 복구된 데이터베이스 파일인 경 우라도 손상이 발생하기 이전의 데이터베이스 파일과 완전히 일치하지 않을 수 있으며, 이로 인해 제2 어플리케 이션이 복구된 데이터베이스 파일에 액세스 시 제2 어플리케이션에서 예상하지 못한 동작을 수반할 수 있다. 도 6은 다양한 실시예에 따른 전자 장치에서 구현되는 데이터베이스 모듈의 복구 동작을 설명하기 위한 도면이 다. 도 6을 참조하면, 601 동작에서, 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 4의 전자 장치)에서 실행되는 어플리케이션(예를 들어, 도 4의 어플리케이션)은 데이터베이스 모 듈(예를 들어, 도 4의 DB 모듈)로 데이터베이스(DB) open을 요청할 수 있다. 603 동작에서, 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 정합성을 검사할 수 있다. 605 동작에서, 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)가 손상되었는지 여부를 감지(또는 확인)할 수 있다. 605 동작에서 데이터베이스(또는 데이터베이스 파일)이 손상되지 않은 것으로 감지된 경우(605-아니오), 607 동 작에서 어플리케이션은 데이터베이스 모듈로 요청한 DB open이 성공한 것으로 판단할 수 있다. 다양한 실시예에 따라, 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)이 손상되지 않은 경우 DB open 성공을 나타 내는 메시지를 어플리케이션으로 전송할 수 있다. 605 동작에서 데이터베이스(또는 데이터베이스 파일)이 손상된 것으로 감지된 경우(605-예), 609 동작에서 데이 터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 복구를 시도할 수 있다. 611 동작에서 데이터베 이스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공했는지 여부를 판단할 수 있다. 611 동작에서 판단 결과 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공한 경우(611-예), 607 동작 에서 어플리케이션은 데이터베이스 모듈로 요청한 DB open이 성공한 것으로 판단할 수 있다. 다양한 실시예에 따라, 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공한 경우 DB open 성공을 나타내는 메시지를 어플리케이션으로 전송할 수 있다. 611 동작에서 판단 결과 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공하지 못한 경우(611-아니 오), 613 동작에서 데이터베이스(또는 데이터베이스 파일)은 초기화될 수 있다. 615 동작에서 데이터베이스 모 듈은 DB open 실패(또는 에러)를 나타내는 메시지를 어플리케이션으로 전달할 수 있다. 617 동작에서 어플리케이션은 DB open 실패(또는 에러)를 나타내는 메시지를 수신하고 DB open이 실패함을 알 수 있다. 다양한 실시예에 따라, 어플리케이션은 데이터베이스(또는 데이터베이스 파일)가 손상되었음을 데이터베이스 모 듈에 포함되는 에러 처리기(도 4의 에러 처리기)로 전달하고, 에러 처리기(도 4의 에러 처리기)는 리 커버리 매니저(도 4의 리커버리 매니저)로 데이터베이스(또는 데이터베이스 파일)에 대한 복구를 요청할 수 있다. 다양한 실시예에 따라, 리커버리 매니저(도 4의 리커버리 매니저)는 복구 요청을 native layer로 전달하여 복구를 수행할 수 있다. 도 7은 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스의 복구 동작을 설명하기 위한 도면이다. 도 7을 참조하면, 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 4의 전 자 장치)는 어플리케이션, 데이터베이스(DB) 모듈, 및 데이터베이스를 포함할 수 있다. 다 양한 실시예에 따라, DB 모듈은 제1 레이어 상에서 구현되는 데이터베이스 매니저(예를 들어, 도 2의 데이터베이스 매니저 또는 도 3의 데이터베이스 매니저), 제1 레이어 상에서 구현되는 에러 처리기 , 제1 레이어 상에서 구현되는 리커버리 매니저, 및 제2 레이어 상에서 구현되는 DB 라이브러리(75 0)를 포함할 수 있다. 다양한 실시예에 따라, 제1 레이어는 Android OS 에서 사용되는 java layer이고, 제2 레 이어는 Android OS 에서 사용되는 native layer로 구현될 수 있다. 다양한 실시예에 따라, DB 모듈은 전자 장치 내 프로세서(예를 들어, 도 1의 프로세서 또는 도 3의 프로세서) 내에 구현될 수 있다. 다양한 실시예에 따라, DB 모듈은 어플리케이션10) 및 데이터베이스 60) 사이의 데이터의 처리를 수행하기 위한 기능을 제공할 수 있다. 다양한 실시예에 따라, DB 모듈은 어 플리케이션에 의한 데이터베이스의 생성, 검색 또는 변경을 수행할 수 있다. 다양한 실시예에 따라, DB 모듈은 어플리케이션의 접근 시 데이터베이스의 데이터베이스 파일 오류를 탐지 및/또는 복 원할 수 있다. 다양한 실시예에 따라, 어플리케이션은 도 1 내지 도 3의 어플리케이션으로 구현될 수 있다. 다양한 실시예에 따라, 에러 처리기는 데이터베이스 매니저 내에 포함될 수도 있다. 다양한 실시예에 따라, 리커버리 매니저는 도 3의 리커버리 매니저로 구현되고, DB 라이브러리는 도 3의 DB 라이브러리 로 구현되며, 데이터베이스는 도 3의 데이터베이스로 구현될 수 있다. 다양한 실시예에 따라, DB 라이브러리는 복구 동작 식별 로직 및 복구 상태 식별 로직을 포함할 수 있다. 다양한 실시예에 따라, 복구 동작 식별 로직은 데이터베이스(또는 데이터베이스 파일)에 대한 복 구 동작을 식별하기 위한 것일 수 있다. 다양한 실시예에 따라, 복구 상태 식별 로직은 데이터베이스(또는 데이터베이스 파일)가 복구된 상태인지 여부를 식별하기 위한 것일 수 있다. 다양한 실시예에 따라, Android OS 에서 사용하는 데이터베이스 엔진이 SQLite인 경우, 데이터베이스 매니저 는 SQLiteDatabase를 이용하여 구현되고, DB 라이브러리는 libsqlite.so로 구현될 수 있다. 다양한 실시예에 따라, 데이터베이스 매니저는 어플리케이션에서 수행하는 데이터베이스에 대한 오픈 및/또는 쿼리 명령에 따라 DB 프레임워크 상에 존재하는 코드 집합을 처리할 수 있다. 다양한 실시예에 따라, DB 라이브러리는 Android OS 에서 사용되는 프로그램 언어가 실행되는 native layer에서 구현될 수 있다. 다양한 실시예에 따라, 어플리케이션은 DB 모듈로 데이터 베이스 open request를 전송하고, DB 모듈 은 파일 시스템(예를 들어, 도 3의 파일 시스템)을 통해 데이터베이스로 open, read, 및/또는 write 커맨드를 전송할 수 있다. 다양한 실시예에 따라, DB 모듈은 데이터베이스로 전송한 open, read, 및/또는 write 커맨드에 따른 결과 정보를 어플리케이션으로 전송할 수 있다. 다양한 실시예에 따라, 복구 동작 식별 로직은 전자 장치에서 실행되는 어플리케이션이 데이터베이스(또는 데이터베이스 파일)에 대한 복구 프로세스를 수행하는 것을 식별할 수 있다. 다양한 실시예에 따라, 복구 동작 식별 로직은 제1 어플리케이션이 DB 오픈 요청 시 수행되는 데이터베이스(또는 데이터베이스 파일)에 대한 복구 프로세스를 식별함으로써 제2 어플리케이션이 해당 데이터베이스(또는 데이터베이스 파일)에 접근하지 않 고 대기하도록 할 수 있다. 다양한 실시예에 따라, 복구 상태 식별 로직은 전자 장치에서 실행되는 어플리케이션이 데이터베이스(또는 데이터베이스 파일)에 대한 복구 프로세스를 완료한 경우 해당 데이터베이스(또는 데이터베이스 파일)가 복구된 데이터베이스(또는 데이터베이스 파일)임을 식별할 수 있다. 다양한 실시예에 따라, 복구 상태 식별 로직 은 제1 어플리케이션이 DB 오픈 요청 시 수행되는 복구 프로세스에 의해 데이터베이스(또는 데이터베이스 파 일)가 복구된 것임을 식별함으로써 제2 어플리케이션이 해당 데이터베이스(또는 데이터베이스 파일)에 액세스시 이를 고려하도록 할 수 있다. 도 8은 다양한 실시예에 따른 전자 장치의 복구 동작 식별 로직을 설명하기 위한 도면이다. 도 8을 참조하면, 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 도 4의 전자 장치 , 또는 도 7의 전자 장치)에서 실행되는 제1 어플리케이션은 데이터베이스 파일에 액세스 한 후 데이터베이스 모듈(예를 들어, 도 7의 DB 모듈)은 데이터베이스 파일이 손상됨을 인식(또는 확 인)하고, 데이터베이스 모듈에 의해 데이터베이스 파일에 대한 복구 프로세스가 진행될 수 있다. 예를 들 어, 데이터베이스 모듈은 데이터베이스 파일내 제1 페이지(page 1)의 일부가 손상되고, 제i 페이지(page i)의 전부가 손상됨을 확인하고, 이를 복구할 수 있다. 다양한 실시예에 따라, 데이터베이스 모듈은 데이터베이스 파일에 대한 복구 프로세스 시작 전에 데이터베 이스 파일이 복구 중임을 나타내는 파일 락(lock)을 설정할 수 있다. 다양한 실시예에 따라, 파일 락(file lock)은 해당 데이터베이스 파일에 고유하게 설정될 수 있는 Exclusive Lock일 수 있다. 다양한 실시예에 따라, 파일 락은 전자 장치 내 파일 시스템(도 3의 파일 시스템)에 의해 생성 및/또는 관리될 수 있다. 다양한 실시예에 따라, 파일 락은 true 또는 false로 설정될 수 있는 변수로 구현될 수 있다. 예를 들어, 파일 락의 변수 값이 true로 설정되면 데이터베이스 파일에 파일 락이 설정된 것으로 인식되고, 파일 락의 변수 값이 false로 설정되면 데이터베이스 파일에 파일 락이 설정되지 않은 것으로 인식될 수 있다. 다양한 실시예에 따라, 전자 장치에서 실행되는 제2 어플리케이션은 복구 중인 데이터베이스 파일에 접근 시 데이터베이스 파일에 설정된 파일 락을 확인하고, 데이터베이스 파일로 액세스하지 않고 대 기할 수 있다. 예를 들어, 제2 어플리케이션은 데이터베이스 파일에 접근 시 데이터베이스 파일(53 0)에 설정된 파일 락의 변수 값이 true임을 확인하고, 파일 락의 변수 값이 false로 변경될 때까지 데이터베이 스 파일로 액세스하지 않고 대기할 수 있다. 다양한 실시예에 따라, 제2 어플리케이션은 별도의 수정 없이 데이터베이스 파일에 대한 복구가 완료된 경우 데이터베이스 파일에 끊김 없이(seamless) 접근 할 수 있다. 도 9는 다양한 실시예에 따른 전자 장치의 복구 상태 식별 로직을 설명하기 위한 도면이다. 도 9를 참조하면, 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 도 4의 전자 장치 , 또는 도 7의 전자 장치)에서 실행되는 어플리케이션이 데이터베이스 파일에 액세스한 후 데이 터베이스 모듈은 데이터베이스 파일이 손상됨을 인식하고, 데이터베이스 모듈은 데이터베이스 파일에 대한 복구 프로세스를 진행할 수 있다. 예를 들어, 데이터베이스 모듈은 데이터베이스 파일내 제1 페이지 (page 1)의 일부가 손상되고, 제i 페이지(page i)의 전부가 손상됨을 확인하고, 이를 복구할 수 있다. 다양한 실시예에 따라, 데이터베이스 모듈은 복구 상태 식별 로직을 이용하여 데이터베이스 파일이 정상적으로 복구됨을 식별할 수 있다. 다양한 실시예에 따라, 데이터베이스 모듈은 손상된 데이터베이스 파일 을 정상적으로 복구 후 데이터베이스 파일이 정상적으로 복구됨을 나타내는 정보를 데이터베이스 파 일에 대한 메타데이터의 속성을 통해 스토리지에 저장할 수 있다. 다양한 실시예에 따라, 전자 장치는 리눅스 시스템에서 파일에 대한 메타데이터인 inode의 xattr 속성을 통해 데이터베이스 파일에 대한 정상 복구 여부를 기록할 수 있다. 다양한 실시예에 따라, inode의 xattr 속성 은 사용자가 추가적으로 정의할 수 있는 메타데이터 영역을 의미할 수 있다. 다양한 실시예에 따라, inode의 xattr 속성의 key value를 \"recovered\"로 설정하여 데이터베이스 파일이 정상적으로 복구됨을 지시할 수 있다. 다양한 실시예에 따라, 전자 장치에서 실행되는 다른 어플리케이션은 데이터베이스 파일에 대한 메타데이 터의 특정 속성을 확인하여 데이터베이스 파일의 정상 복구 여부를 확인하고, 확인 결과에 기반하여 데이터베이스 파일이 복구된 데이터베이스 파일임을 인지하고 데이터베이스 파일에 액세스할 수 있다. 도 10은 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스 파일에 대한 메타데이터의 일 예시를 설명하기 위한 도면이다. 도 10을 참조하면, 데이터베이스 모듈(예를 들어, 도 7의 DB 모듈)은 데이터베이스 파일(또는 데이 터베이스)이 손상됨을 확인하고, 손상된 데이터베이스 파일에 대한 복구 프로세스를 진행할 수 있다. 다 양한 실시예에 따라, 데이터베이스 모듈은 손상된 데이터베이스 파일에 대한 복구 후, 복구된 데이터베이스 파일 및 복구된 데이터베이스 파일에 대한 메타데이터를 생성할 수 있다. 다양한 실시예 에 따라, 메타데이터는 데이터베이스 파일이 복구되어 생성된 데이터베이스 파일임을 지시하는 속 성 정보를 포함할 수 있다. 도 11은 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스 파일에 대한 복구 정보 테이블을 설명하기 위 한 도면이다. 도 11을 참조하면, 데이터베이스 모듈(예를 들어, 도 7의 DB 모듈)은 데이터베이스(또는 데이터베이스 파 일) 복구가 완료된 경우 데이터베이스(또는 데이터베이스 파일)에 테이블을 추가하여 데이터베이스(또는 데이터 베이스 파일)의 복구가 되었음을 기록할 수 있다. 예를 들어, 손상된 데이터베이스는 테이블 1, 테이블 2를 포함하고, 복구된 데이터베이스는 테이블 1, 테이블 2, 및 복구 정보 테이블(recovered)를 포함할 수 있다. 예를 들어, 복구 정보 테이블(recovered)은 데이터베이 스가 복구된 것임을 나타낼 수 있다. 도 12는 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스 파일에 대한 메타데이터의 다른 예시를 설명하 기 위한 도면이다. 도 12를 참조하면, 데이터베이스 파일(또는 데이터베이스)은 페이지(page) 단위로 저장될 수 있다. 다양 한 실시예에 따라, 데이터베이스 파일의 첫번째 페이지는 메타데이터 페이지이고, 메타데이터 페이 지는 데이터베이스 헤더, 스키마 등의 정보를 저장할 수 있다. 다양한 실시예에 따라, 데이터베이스 파일 내 메타데이터 페이지에서 사용되지 않는 공간을 활용하 여 메타데이터 페이지는 데이터베이스 파일이 복구가 되었음을 나타내는 복구 정보(recovered)를 포함할 수 있다. 도 13은 다양한 실시예에 따른 전자 장치의 데이터베이스 복구 동작 식별 로직을 설명하기 위한 도면이다. 도 13을 참조하면, 1301 동작에서, 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 7의 전자 장치)에서 실행되는 어플리케이션(예를 들어, 도 7의 어플리케이션)은 데이터베이스 모 듈(예를 들어, 도 7의 DB 모듈)로 데이터베이스(DB) open을 요청할 수 있다. 1303 동작에서, 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 정합성을 검사할 수 있다. 1305 동작에서, 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)가 손상되었는지 여부를 감지할 수 있다. 1305 동작에서 판단 결과 데이터베이스(또는 데이터베이스 파일)가 손상 됨을 감지(또는 확인)한 경우(1305- 예), 1307 동작에서 데이터베이스 모듈은 데이터베이스 복구 락이 설정된 상태인지 여부를 판단할 수 있다. 1307 동작에서 판단 결과 데이터베이스 복구 락이 설정되지 않은 경우(1307-아니오), 1309 동작에서 데이터베이 스 모듈은 데이터베이스 복구 락을 설정할 수 있다. 1311 동작에서 데이터베이스 모듈은 데이터베이스(또는 데 이터베이스 파일)을 복구하고, 1313 동작에서 데이터베이스 모듈은 데이터베이스 복구 락을 해제할 수 있다. 1315 동작에서 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공했는지 여부를 판단할 수 있다. 1315 동작에서 판단 결과 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공한 경우 (1315-예), 1317 동작에서 데이터베이스 모듈은 데이터베이스 복구 상태를 기록하고, 1319 동작에서 어플리케이 션은 데이터베이스 모듈로 요청한 DB open이 성공한 것으로 판단할 수 있다. 다양한 실시예에 따라, 데이터베이 스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공한 경우 DB open 성공을 나타내는 메시지 를 어플리케이션으로 전송할 수 있다. 1315 동작에서 판단 결과 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공하지 못한 경우(1315-아니 오), 1321 동작에서 데이터베이스(또는 데이터베이스 파일)은 초기화될 수 있다. 1323 동작에서 데이터베이스 모듈은 DB open 실패(또는 에러)를 나타내는 메시지를 어플리케이션으로 전달할 수 있다. 1325 동작에서 어플리 케이션은 DB open 실패(또는 에러)를 나타내는 메시지를 수신하고 DB open이 실패함을 알 수 있다. 1305 동작에서 판단 결과 데이터베이스(또는 데이터베이스 파일)가 손상됨을 감지하지 않은 경우(1305-아니오) (예컨대, 데이터베이스가 손상되지 않은 경우), 1319 동작에서 어플리케이션은 데이터베이스 모듈로 요청한 DB open이 성공한 것으로 판단할 수 있다. 1307 동작에서 판단 결과 데이터베이스 복구 락이 설정된 경우(1307-예), 1327 동작에서 어플리케이션은 일정 시간을 대기할 수 있다. 1329 동작에서 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공했는지 여부를 판단할 수 있다. 1329 동작에서 판단 결과 데이터베이스(또는 데이터베이스 파일)에 대 한 복구가 성공한 경우(1329-예), 1319 동작에서 어플리케이션은 데이터베이스 모듈로 요청한 DB open이 성공한 것으로 판단할 수 있다. 다양한 실시예에 따라, 데이터베이스 모듈은 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공한 경우 DB open 성공을 나타내는 메시지를 어플리케이션으로 전송할 수 있다. 1329 동작에서 판단 결과 데이터베이스(또는 데이터베이스 파일)에 대한 복구가 성공하지 못한 경우(1329-아니 오), 1323 동작에서 데이터베이스 모듈은 DB open 실패(또는 에러)를 나타내는 메시지를 어플리케이션으로 전달 할 수 있다. 이후, 1325 동작에서 어플리케이션은 DB open 실패(또는 에러)를 나타내는 메시지를 수신하고 DB open이 실패함을 알 수 있다. 다양한 실시예에 따라, 어플리케이션이 데이터베이스(또는 데이터베이스 파일)에 접근 시 데이터베이스(또는 데 이터베이스 파일) 손상이 발생되면, 데이터베이스(또는 데이터베이스 파일) 복구 동작이 실행되고 있는지 여부 를 식별하는 로직이 수행될 수 있다. 다양한 실시예에 따라, 데이터베이스 복구 동작 식별 로직은 데이터베이스 복구 Lock을 이용하여 수행될 수 있 다. 다양한 실시예에 따라, 데이터베이스 복구 Lock은 파일 Lock이며, 해당 데이터베이스 파일에 대해 고유하게 설정될 수 있는 Lock (Exclusive Lock)일 수 있다. 다양한 실시예에 따라, 데이터베이스 복구를 시작하기 전에 데이터베이스 복구 Lock이 설정될 수 있다. 다양한 실시예에 따라, 다른 어플리케이션에서 데이터베이스(또는 데이터베이스 파일)의 손상을 감지 했을 때, 데이터베이스 복구 Lock이 설정되어 있는지를 확인함으로써 데이터 베이스 복구 동작이 수행 중인지 여부를 판단할 수 있다. 다양한 실시예에 따라, 데이터베이스(또는 데이터베이스 파일) 복구가 성공적으로 완료된 경우 데이터베이스(또 는 데이터베이스 파일) 복구 상태에 대한 정보가 데이터베이스 파일에 대한 메타데이터(예를 들어, 리눅스 시스 템의 xattr 영역) 상에 기록될 수 있다. 다양한 실시예에 따라, 데이터베이스(또는 데이터베이스 파일) 복구 상 태에 대한 기록이 완료되면 데이터베이스 복구 Lock을 해제될 수 있다. 도 14a 및 도 14b는 다양한 실시예에 따른 전자 장치의 데이터베이스 복구 상태 식별 로직의 일 예시를 설명하 기 위한 도면이다. 도 14a를 참조하면, 1401 동작에서 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 7의 전자 장치)는 데이터베이스(DB) 복구 상태 기록 로직(예를 들어, 도 7의 복구 상태 식별 로직 )을 시작하고, 1403 동작에서 전자 장치는 DB 복구 기능이 설정된 DB인지 확인할 수 있다. 1403 동작에서 판단 결과 DB 복구 기능이 설정된 DB인 경우, 1405 동작에서 전자 장치는 DB 파일의 메타데이터 영역(예를 들어, 리눅스 시스템의 xattr 영역)에 DB 복구에 관한 내용을 기록할 수 있다. 도 14b를 참조하면, 1412 동작에서 전자 장치에서 실행되는 어플리케이션(예를 들어, 도 7의 어플리케이션 )은 DB 복구 상태 확인을 데이터베이스 모듈(예를 들어, 도 7의 DB 모듈)로 요청할 수 있다. 1414 동 작에서 데이터베이스 모듈은 DB 파일의 메타데이터 영역(예를 들어, 리눅스 시스템의 xattr 영역)의 정보를 확 인하고, 1416 동작에서 데이터베이스 모듈은 복구 작업이 수행된 DB인지 여부를 판단할 수 있다. 다양한 실시예 에 따라, 데이터베이스 모듈은 데이터베이스 복구 상태에 대한 확인을 위해 데이터베이스 파일의 xattr 정보 전 체를 가져온 뒤, xattr 정보 내에 데이터베이스 복구 내용 기록이 저장되어 있는지 확인할 수 있다. 1416 동작에서 판단 결과 복구 작업이 수행된 DB인 경우, 1418 동작에서 데이터베이스 모듈은 DB가 복구된 상태 임을 나타내는 메시지를 어플리케이션으로 전달할 수 있다. 1416 동작에서 판단 결과 복구 작업이 수행된 DB가 아닌 경우, 1420 동작에서 데이터베이스 모듈은 DB가 복구되지 않은 상태임을 나타내는 메시지를 어플리케이션 으로 전달할 수 있다. 도 15a 및 도 15b는 다양한 실시예에 따른 전자 장치의 데이터베이스 복구 상태 식별 로직의 다른 예시를 설명 하기 위한 도면이다. 도 15a를 참조하면, 1501 동작에서 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 7의 전자 장치)는 데이터베이스(DB) 복구 상태 기록 로직(예를 들어, 도 7의 복구 상태 식별 로직 )을 시작하고, 1503 동작에서 전자 장치는 DB 복구 기능이 설정된 DB인지 확인할 수 있다. 1503 동작에서 판단 결과 DB 복구 기능이 설정된 DB인 경우, 1505 동작에서 전자 장치는 DB 파일의 메타데이터 페이지(page)에 DB 복구에 관한 내용을 기록할 수 있다.도 15b를 참조하면, 1512 동작에서 전자 장치에서 실행되는 어플리케이션(예를 들어, 도 7의 어플리케이션 )은 DB 복구 상태 확인을 데이터베이스 모듈(예를 들어, 도 7의 DB 모듈)로 요청할 수 있다. 1514 동 작에서 데이터베이스 모듈은 DB 파일의 메타데이터 페이지의 정보를 확인하고, 1516 동작에서 데이터베이스 모 듈은 복구 작업이 수행된 DB인지 여부를 판단할 수 있다. 1516 동작에서 판단 결과 복구 작업이 수행된 DB인 경우, 1518 동작에서 데이터베이스 모듈은 DB가 복구된 상태 임을 나타내는 메시지를 어플리케이션으로 전달할 수 있다. 1516 동작에서 판단 결과 복구 작업이 수행된 DB가 아닌 경우, 1520 동작에서 데이터베이스 모듈은 DB가 복구되지 않은 상태임을 나타내는 메시지를 어플리케이션 으로 전달할 수 있다. 도 16a 및 도 16b는 다양한 실시예에 따른 전자 장치의 데이터베이스 복구 상태 식별 로직의 또 다른 예시를 설 명하기 위한 도면이다. 도 16a를 참조하면, 1601 동작에서 전자 장치(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 7의 전자 장치)는 데이터베이스(DB) 복구 상태 기록 로직(예를 들어, 도 7의 복구 상태 식별 로직 )을 시작하고, 1603 동작에서 전자 장치는 DB 복구 기능이 설정된 DB인지 확인할 수 있다. 1603 동작에서 판단 결과 DB 복구 기능이 설정된 DB인 경우, 1605 동작에서 전자 장치는 DB에 신규 테이블을 추 가하여 DB 복구에 관한 내용을 기록할 수 있다. 도 16b를 참조하면, 1612 동작에서 전자 장치에서 실행되는 어플리케이션(예를 들어, 도 7의 어플리케이션 )은 DB 복구 상태 확인을 데이터베이스 모듈(예를 들어, 도 7의 DB 모듈)로 요청할 수 있다. 1614 동 작에서 데이터베이스 모듈은 DB의 테이블 정보를 확인하고, 1616 동작에서 데이터베이스 모듈은 복구 작업이 수 행된 DB인지 여부를 판단할 수 있다. 1616 동작에서 판단 결과 복구 작업이 수행된 DB인 경우, 1618 동작에서 데이터베이스 모듈은 DB가 복구된 상태 임을 나타내는 메시지를 어플리케이션으로 전달할 수 있다. 1616 동작에서 판단 결과 복구 작업이 수행된 DB가 아닌 경우, 1620 동작에서 데이터베이스 모듈은 DB가 복구되지 않은 상태임을 나타내는 메시지를 어플리케이션 으로 전달할 수 있다. 다양한 실시예에 따라, 전자 장치는(예를 들어, 도 1의 전자 장치, 도 3의 전자 장치, 또는 도 7의 전자 장치), 데이터베이스 파일을 포함하는 메모리(예를 들어, 도 1의 메모리 또는 도 3의 메모리 ), 및 상기 메모리에 연결된 적어도 하나의 프로세서(예를 들어, 도 1의 프로세서, 도 3의 프로세서 , 도 7의 DB 모듈)를 포함할 수 있다. 다양한 실시예에 따라, 상기 적어도 하나의 프로세서는, 상기 전자 장치에서 실행되는 제1 어플리케이션이 상기 데이터베이스 파일에 액세스하는 동안 상기 데이터베이스 파일이 손상된 것을 확인할 수 있다. 다양한 실시예에 따라, 상기 적어도 하나의 프로세서는, 상기 손상된 데이터베이스 파일의 복구가 완료될 때까지 상기 전자 장치 에서 실행되는 제2 어플리케이션이 상기 데이터베이스 파일에 액세스하지 않고 대기하도록 제어할 수 있다. 다 양한 실시예에 따라, 상기 적어도 하나의 프로세서는, 상기 손상된 데이터베이스 파일의 복구가 완료되면, 상기 데이터베이스 파일이 복구됨을 지시하는 복구 상태 정보를 기록할 수 있다. 다양한 실시예에 따라, 상기 적어도 하나의 프로세서는, 상기 복구 상태 정보에 기반하여 상기 제2 어플리케이션이 상기 복구된 데이터베이스 파일 에 액세스하도록 제어할 수 있다. 다양한 실시예에 따라, 상기 적어도 하나의 프로세서는, 상기 데이터베이스 파일이 복구 중임을 나타내기 위해 상기 손상된 데이터베이스 파일에 대한 파일 락을 설정할 수 있다. 다양한 실시예에 따라, 상기 적어도 하나의 프로세서는, 상기 손상된 데이터베이스 파일을 복구할 수 있다. 다양한 실시예에 따라, 상기 파일 락은 상기 데 이터베이스 파일에 대하여 고유하게 설정되는 익스클루시브 락(exclusive lock)일 수 있다. 다양한 실시예에 따 라, 상기 적어도 하나의 프로세서는, 상기 손상된 데이터베이스 파일에 대한 복구에 성공하면, 상기 데이터베이 스 파일에 대한 상기 파일 락을 해제할 수 있다. 다양한 실시예에 따라, 상기 복구 상태 정보가 제1 값으로 설정되면 상기 데이터베이스 파일이 복구된 것임을 나타내고, 상기 복구 상태 정보가 제2 값으로 설정되면 상기 데이터베이스 파일이 복구되지 않은 것임을 나타낼 수 있다. 다양한 실시예에 따라, 상기 복구 상태 정보는 상기 데이터베이스 파일에 대한 메타데이터에 포함되는 사용자 정의 속성으로 구현될 수 있다. 다양한 실시예에 따라, 상기 사용자 정의 속성은 리눅스 시스템에서 사 용하는 Inode xattr로 설정될 수 있다. 다양한 실시예에 따라, 상기 복구 상태 정보는 복구된 데이터베이스 파일에 포함되는 테이블로 구현될 수 있다. 다양한 실시예에 따라, 상기 데이터베이스 파일은 복수의 페이지 (page)로 구성되고, 상기 복구 상태 정보는 상기 데이터베이스 파일 내 첫번째 페이지(page)에 포함될 수 있다. 다양한 실시예에 따라, 상기 적어도 하나의 프로세서는, 상기 적어도 하나의 프로세서는 데이터베이스 라이브러 리(예를 들어, 도 7의 DB 라이브러리)를 포함하고, 상기 데이터베이스 라이브러리는 상기 데이터베이스 파 일에 대한 복구 동작을 식별하기 위한 제1 로직(예를 들어, 도 7의 복구 동작 식별 로직) 및 상기 데이터 베이스 파일에 대한 복구 상태를 식별하기 위한 제2 로직(예를 들어, 도 7의 복구 상태 식별 로직)을 포함 할 수 있다."}
{"patent_id": "10-2022-0016389", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예들에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 도 3은 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스와 관련된 동작의 일 예시를 설명하기 위한 도면 이다. 도 4는 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스와 관련된 동작의 다른 예시를 설명하기 위한 도 면이다. 도 5는 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스 파일이 손상된 경우를 설명하기 위한 도면이다. 도 6은 다양한 실시예에 따른 전자 장치에서 구현되는 데이터베이스 모듈의 복구 동작을 설명하기 위한 도면이 다. 도 7은 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스의 복구 동작을 설명하기 위한 도면이다. 도 8은 다양한 실시예에 따른 전자 장치의 복구 동작 식별 로직을 설명하기 위한 도면이다. 도 9는 다양한 실시예에 따른 전자 장치의 복구 상태 식별 로직을 설명하기 위한 도면이다. 도 10은 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스 파일에 대한 메타데이터의 일 예시를 설명하기 위한 도면이다. 도 11은 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스 파일에 대한 복구 정보 테이블을 설명하기 위 한 도면이다. 도 12는 다양한 실시예에 따른 전자 장치에 저장된 데이터베이스 파일에 대한 메타데이터의 다른 예시를 설명하 기 위한 도면이다. 도 13은 다양한 실시예에 따른 전자 장치의 데이터베이스 복구 동작 식별 로직을 설명하기 위한 도면이다. 도 14a 및 도 14b는 다양한 실시예에 따른 전자 장치의 데이터베이스 복구 상태 식별 로직의 일 예시를 설명하 기 위한 도면이다. 도 15a 및 도 15b는 다양한 실시예에 따른 전자 장치의 데이터베이스 복구 상태 식별 로직의 다른 예시를 설명 하기 위한 도면이다. 도 16a 및 도 16b는 다양한 실시예에 따른 전자 장치의 데이터베이스 복구 상태 식별 로직의 또 다른 예시를 설 명하기 위한 도면이다."}
