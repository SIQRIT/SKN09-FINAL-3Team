{"patent_id": "10-2022-0154568", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0072682", "출원번호": "10-2022-0154568", "발명의 명칭": "CPU의 이상을 탐지하는 방법 및 이를 위한 장치", "출원인": "고려대학교 산학협력단", "발명자": "신영주"}}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "프로세서 및 메모리를 포함하는 장치가 CPU(Central Processing Unit)의 이상을 탐지하는 방법에 있어서, (a) 인공지능 분류 모델을 학습시키는 단계; (b) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 단계; (c) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 단계;(d) 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 단계; (e) 상기 데이터셋화한 데이터셋을 전처리하는 단계; 및(f) 상기 전처리한 데이터셋을 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 단계;를 포함하는 CPU의 이상을 탐지하는 방법에 있어서, 상기 CPU Execution Port의 포트 출력값은, 상기 CPU Execution Port의 PMC(Performance Monitoring Counter) 값인, CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 (a) 단계는, (a-1) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 단계; (a-2) 상기 (a-1) 단계에서 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 단계;(a-3) 상기 (a-2) 단계에서 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 단계; (a-4) 상기 (a-3) 단계에서 데이터셋화한 데이터셋을 전처리하는 단계; 및(a-5) 상기 (a-4) 단계에서 전처리한 데이터셋을 소정 비율로 분리하고, 분리한 일부를 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 학습하는 단계; 및(a-6) 상기 (a-4) 단계에서 전처리한 데이터셋 중, 분리한 나머지 일부를 상기 인공지능 분류 모델에 입력하여이상 탐지 결과를 테스트하는 단계;를 포함하는 CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서, 상기 (a-5) 단계에서의 소정 비율은, 상기 일부 : 나머지 일부에 대하여 7 : 3 및 8 : 2 중 어느 하나인, CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "공개특허 10-2024-0072682-3-제1항에 있어서,상기 CPU 모니터링 조건은, 상기 모니터링할 CPU CORE 설정, 상기 모니터링할 CPU CORE 수 설정, 모니터링 속도 설정 및 모니터링 시간 설정 중 어느 하나 이상을 더 포함하는, CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 상기 CPU Execution Port 번호 설정은, 상기 설정한 모니터링할 CPU CORE 별로 그에 대한 Execution Port 번호 설정이 개별적으로 가능한, CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 (d) 단계에서의 데이터셋화는, 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 CSV(Comma Separated Value) 파일로 저장하는 것인, CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서, 상기 (e) 단계는, (e-1) 상기 데이터셋화한 데이터셋 내에서 중요도가 높은 소정 개수의 CPU Execution Port 번호를 추출하는 단계; 및(e-2) 상기 번호를 추출한 중요도가 높은 소정 개수의 CPU Execution Port의 포트 출력값을 소정 범위 내로 수렴하도록 정규화하는 단계; 를 포함하는 CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 (e-1) 단계에서의 소정 개수는, 10개 내지 20개 중 어느 하나이며, 상기 (e-2) 단계에서의 소정 범위는, -2 내지 2인, CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서, 상기 인공지능 분류 모델은, 장단기 메모리인 LSTM(Long Short Term Memory) 네트워크 구조를 포함하되,상기 LSTM 네트워크 구조는, 공개특허 10-2024-0072682-4-양 방향 학습이 가능한 Bi-LSTM 네트워크 구조인, CPU의 이상을 탐지하는 방법."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "하나 이상의 프로세서;네트워크 인터페이스;상기 프로세서에 의해 수행되는 컴퓨터 프로그램을 로드(Load)하는 메모리; 및대용량 네트워크 데이터 및 상기 컴퓨터 프로그램을 저장하는 스토리지를 포함하되,상기 컴퓨터 프로그램은 상기 하나 이상의 프로세서에 의해,(A) 인공지능 분류 모델을 학습시키는 오퍼레이션; (B) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 오퍼레이션; (C) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 오퍼레이션;(D) 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 오퍼레이션; (E) 상기 데이터셋화한 데이터셋을 전처리하는 오퍼레이션; 및(F) 상기 전처리한 데이터셋을 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 오퍼레이션;을 실행하는 CPU의 이상을 탐지하는 장치에 있어서, 상기 CPU Execution Port의 포트 출력값은, 상기 CPU Execution Port의 PMC(Performance Monitoring Counter) 값인,CPU의 이상을 탐지하는 장치."}
{"patent_id": "10-2022-0154568", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "컴퓨팅 장치와 결합하여,(AA) 인공지능 분류 모델을 학습시키는 단계; (BB) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 단계; (CC) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 단계;(DD) 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 단계; (EE) 상기 데이터셋화한 데이터셋을 전처리하는 단계; 및(FF) 상기 전처리한 데이터셋을 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 단계;를 실행하는 CPU의 이상을 탐지하는 장치에 있어서, 상기 CPU Execution Port의 포트 출력값은, 상기 CPU Execution Port의 PMC(Performance Monitoring Counter) 값인,를 실행하는 컴퓨터로 판독 가능한 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2022-0154568", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 일 실시 예에 따른 프로세서 및 메모리를 포함하는 장치가 CPU의 이상을 탐지하는 방법은 (a) 인공지 능 분류 모델을 학습시키는 단계, (b) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터 링 조건을 설정하는 단계, (c) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 단계, (d) 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet) 화하는 단계, (e) 상기 데이터셋화한 데이터셋을 전처리하는 단계; 및 (f) 상기 전처리한 데이터셋을 상기 인공 지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 단계를 포함하며, 상기 CPU Execution Port의 포트 출력 값은, 상기 CPU Execution Port의 PMC(Performance Monitoring Counter) 값이다."}
{"patent_id": "10-2022-0154568", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 CPU의 이상을 탐지하는 방법 및 이를 위한 장치에 관한 것이다. 보다 자세하게는 CPU Execution Port 의 포트 출력값에 대한 모니터링을 통해 CPU의 이상을 탐지하는 방법 및 이를 위한 장치에 관한 것이다."}
{"patent_id": "10-2022-0154568", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "CPU는 Central Processing Unit의 약자로써, 명령어의 해석과 자료의 연산, 비교 등의 처리를 제어하며, 모든 전자 기기에 필수적으로 포함되는 컴퓨터 시스템의 핵심적인 부품인바, 그 중요성은 아무리 강조해도 부족하지 않을 것이며, CPU에 이상이 발생하는 경우 해당 전자 기기 전체의 구동에 치명적인 영향을 미칠 수 있기에 CPU 의 이상을 탐지하는 모니터링 기술에 관하여 활발한 연구 개발이 이루어지고 있다. 한편, 종래 개발되었던 CPU의 이상을 탐지하는 모니터링 기술은 특정 종류의 공격(Attack)에 대한 이상 행위에 한정하여 모니터링을 진행할 수밖에 없었으며, 그에 따라 공격의 종류 별로 이상 탐지 프로그램을 구비해야 하 므로 시스템이 전체적으로 무거워질 수밖에 없었고, 모든 공격의 종류 별로 이상 탐지 프로그램을 개별적으로 모두 구비하는 것이 현실적인 면에서 너무나 어렵다는 문제점이 존재하었다. 또한, 사용자 편의성이 충분히 고려되지 못한바, 복수 개의 CPU CORE 중 모니터링하고자하는 CPU CORE를 개별 적으로 설정할 수 없음에 따라 이상 행위가 어떠한 CPU CORE에서 발생했는지 구체적으로 확인할 수 없었으며, CPU 전체의 차원에서만 이상 행위가 발생했는지 여부를 확인할 수밖에 없다는 문제점까지 존재하였다. 그럼에도 불구하고 기술 개발에 의한 CPU 성능 향상에 따라 CPU CORE수는 점진적으로 증가하고 있으며, 공격의 종류 역시 나날이 다양해지고 있으므로 종래 기술의 문제점들을 한번에 해결할 수 있는 새롭고 진보한 기술이 요구된다. 본 발명은 이에 관한 것이다. 선행기술문헌 특허문헌 (특허문헌 0001) 대한민국 공개특허공보 제 10-2012-0105049호(2012.09.24)"}
{"patent_id": "10-2022-0154568", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명이 해결하고자 하는 기술적 과제는 공격의 종류와 무관하게 모든 종류의 공격에 대하여 CPU의 이상 발생 여부를 신속하게 탐지할 수 있는 CPU의 이상을 탐지하는 방법 및 이를 위한 장치를 제공하는 것이다. 본 발명이 해결하고자 하는 또 다른 기술적 과제는 모니터링하고자하는 CPU CORE를 개별적으로 설정하여 모니터 링을 진행할 수 있게 함으로써 복수 개의 CPU CORE 중, 이상 행위가 발생한 CPU CORE를 정확하게 식별하여 사용 자 편의성을 향상시킬 수 있는 CPU의 이상을 탐지하는 방법 및 이를 위한 장치를 제공하는 것이다. 본 발명의 기술적 과제들은 이상에서 언급한 기술적 과제들로 제한되지 않으며, 언급되지 않은 또 다른 기술적 과제들은 아래의 기재로부터 통상의 기술자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0154568", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기 기술적 과제를 달성하기 위한 본 발명의 일 실시 예에 따른 프로세서 및 메모리를 포함하는 장치가 CPU의 이상을 탐지하는 방법은 (a) 인공지능 분류 모델을 학습시키는 단계, (b) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 단계, (c) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 단계, (d) 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 단계, (e) 상기 데이터셋화한 데이터셋을 전처리하는 단계; 및 (f) 상 기 전처리한 데이터셋을 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 단계를 포함하며, 상 기 CPU Execution Port의 포트 출력값은, 상기 CPU Execution Port의 PMC(Performance Monitoring Counter) 값 이다. 일 실시 예에 따르면, 상기 (a) 단계는, (a-1) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 단계, (a-2) 상기 (a-1) 단계에서 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 단계, (a-3) 상기 (a-2) 단계에서 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 단계, (a-4) 상기 (a-3) 단계에서 데이터셋화한 데이 터셋을 전처리하는 단계 및 (a-5) 상기 (a-4) 단계에서 전처리한 데이터셋을 소정 비율로 분리하고, 분리한 일 부를 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 학습하는 단계 및 (a-6) 상기 (a-4) 단계에서 전처 리한 데이터셋 중, 분리한 나머지 일부를 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 테스트하는 단계를 포함할 수 있다. 일 실시 예에 따르면, 상기 (a-5) 단계에서의 소정 비율은, 상기 일부 : 나머지 일부에 대하여 7 : 3 및 8 : 2 중 어느 하나일 수 있다. 일 실시 예에 따르면, 상기 CPU 모니터링 조건은, 상기 모니터링할 CPU CORE 설정, 상기 모니터링할 CPU CORE 수 설정, 모니터링 속도 설정 및 모니터링 시간 설정 중 어느 하나 이상을 더 포함할 수 있다. 일 실시 예에 따르면, 상기 CPU Execution Port 번호 설정은, 상기 설정한 모니터링할 CPU CORE 별로 그에 대한 Execution Port 번호 설정이 개별적으로 가능할 수 있다. 일 실시 예에 따르면, 상기 (d) 단계에서의 데이터셋화는, 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 CSV(Comma Separated Value) 파일로 저장하는 것일 수 있다. 일 실시 예에 따르면, 상기 (e) 단계는, (e-1) 상기 데이터셋화한 데이터셋 내에서 중요도가 높은 소정 개수의 CPU Execution Port 번호를 추출하는 단계 및 (e-2) 상기 번호를 추출한 중요도가 높은 소정 개수의 CPU Execution Port의 포트 출력값을 소정 범위 내로 수렴하도록 정규화하는 단계를 포함할 수 있다. 일 실시 예에 따르면, 상기 (e-1) 단계에서의 소정 개수는, 10개 내지 20개 중 어느 하나이며, 상기 (e-2) 단계 에서의 소정 범위는, -2 내지 2일 수 있다. 일 실시 예에 따르면, 상기 인공지능 분류 모델은, 장단기 메모리인 LSTM(Long Short Term Memory) 네트워크 구 조를 포함하되, 상기 LSTM 네트워크 구조는, 양 방향 학습이 가능한 Bi-LSTM 네트워크 구조일 수 있다. 상기 기술적 과제를 달성하기 위한 본 발명의 또 다른 실시 예에 따른 CPU의 이상을 탐지하는 장치는 하나 이상 의 프로세서, 네트워크 인터페이스, 상기 프로세서에 의해 수행되는 컴퓨터 프로그램을 로드(Load)하는 메모리 및 대용량 네트워크 데이터 및 상기 컴퓨터 프로그램을 저장하는 스토리지를 포함하되, 상기 컴퓨터 프로그램은 상기 하나 이상의 프로세서에 의해, (A) 인공지능 분류 모델을 학습시키는 오퍼레이션, (B) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 오퍼레이션, (C) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 오퍼레이션, (D) 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 오퍼레이션, (E) 상기 데이터셋화한 데이터셋을 전처리하는 오퍼레이션 및 (F) 상기 전처리한 데이터셋을 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 오퍼레이션을 실행하며, 상기 CPU Execution Port의 포트 출력값은, 상기 CPU Execution Port의 PMC(Performance Monitoring Counter) 값이다. 상기 기술적 과제를 달성하기 위한 본 발명의 또 다른 실시 예에 따른 매체에 저장된 컴퓨터 프로그램은 컴퓨팅 장치와 결합하여, (AA) 인공지능 분류 모델을 학습시키는 단계, (BB) 모니터링할 CPU의 CPU Execution Port 번 호 설정을 포함하는 CPU 모니터링 조건을 설정하는 단계, (CC) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 단계, (DD) 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 단계, (EE) 상기 데이터셋화한 데이터셋을 전처리하는 단계 및 (FF) 상 기 전처리한 데이터셋을 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 단계를 실행하며, 상 기 CPU Execution Port의 포트 출력값은, 상기 CPU Execution Port의 PMC(Performance Monitoring Counter) 값 이다."}
{"patent_id": "10-2022-0154568", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "상기와 같은 본 발명에 따르면, 공격의 종류와 무관한 CPU Execution Port의 포트 출력값을 모니터링하여 이상 행위 발생 여부를 탐지하는바, 모든 종류의 공격에 대하여 CPU의 이상 발생 여부를 신속하게 탐지할 수 있다는 효과가 있다. 또한, 모니터링하고자하는 CPU CORE, 더 나아가 해당 CPU CORE에 대한 CPU Execution Port까지 사용자가 자유 롭게 설정하여 모니터링을 진행할 수 있는바, 이상 행위가 발생한 근원을 정확하게 탐지할 수 있다는 효과가 있 다. 또한, 모니터링하고자하는 CPU CORE 및 이에 대한 CPU Execution Port의 설정뿐만 아니라, 이상 탐지 결과까지 사용자가 원하는 방식으로 선택하여 출력할 수 있으므로 사용자 편의성이 비약적으로 향상될 수 있다는 효과가있다. 또한, 이상 탐지를 반복적으로 수행하면 할수록 인공지능 분류 모델의 학습 정확도가 향상함으로써 보다 정확한 이상 탐지 결과를 제공할 수 있다는 효과가 있다."}
{"patent_id": "10-2022-0154568", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "본 발명의 효과들은 이상에서 언급한 효과들로 제한되지 않으며, 언급되지 않은 또 다른 효과들은 아래의 기재 로부터 통상의 기술자에게 명확하게 이해 될 수 있을 것이다."}
{"patent_id": "10-2022-0154568", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 목적과 기술적 구성 및 그에 따른 작용 효과에 관한 자세한 사항은 본 발명의 명세서에 첨부된 도면 에 의거한 이하의 상세한 설명에 의해 보다 명확하게 이해될 것이다. 첨부된 도면을 참조하여 본 발명에 따른 실시 예를 상세하게 설명한다. 본 명세서에서 개시되는 실시 예들은 본 발명의 범위를 한정하는 것으로 해석되거나 이용되지 않아야 할 것이다. 이 분야의 통상의 기술자에게 본 명세서의 실시 예를 포함한 설명은 다양한 응용을 갖는다는 것이 당연 하다. 따라서, 본 발명의 상세한 설명에 기재된 임의의 실시 예들은 본 발명을 보다 잘 설명하기 위한 예시적인 것이며 본 발명의 범위가 실시 예들로 한정되는 것을 의도하지 않는다. 도면에 표시되고 아래에 설명되는 기능 블록들은 가능한 구현의 예들일 뿐이다. 다른 구현들에서는 상세한 설명 의 사상 및 범위를 벗어나지 않는 범위에서 다른 기능 블록들이 사용될 수 있다. 또한, 본 발명의 하나 이상의 기능 블록이 개별 블록들로 표시되지만, 본 발명의 기능 블록들 중 하나 이상은 동일 기능을 실행하는 다양한 하드웨어 및 소프트웨어 구성들의 조합일 수 있다. 또한, 어떤 구성요소들을 포함한다는 표현은 \"개방형\"의 표현으로서 해당 구성요소들이 존재하는 것을 단순히 지칭할 뿐이며, 추가적인 구성요소들을 배제하는 것으로 이해되어서는 안 된다. 나아가 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급될 때에는, 그 다른 구성 요소에 직접적으로 연결 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이해되 어야 한다. 이하에서는 도면들을 참조하여 본 발명의 세부적인 실시 예들에 대해 살펴보도록 한다. 도 1은 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치가 포함하는 전체 구성을 예시적으로 도 시한 도면이다. 그러나 이는 본 발명의 목적을 달성하기 위한 바람직한 실시 예일 뿐이며, 필요에 따라 일부 구성이 추가되거나 삭제될 수 있고, 어느 한 구성이 수행하는 역할을 다른 구성이 함께 수행할 수도 있음은 물론이다. 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치는 프로세서, 네트워크 인터페이스, 메 모리, 스토리지 및 이들을 연결하는 데이터 버스를 포함할 수 있으며, 기타 본 발명의 목적을 달성 함에 있어 요구되는 부가적인 구성들을 더 포함할 수 있음은 물론이라 할 것이다. 프로세서는 각 구성의 전반적인 동작을 제어한다. 프로세서는 CPU(Central Processing Unit), MPU(Micro Processer Unit), MCU(Micro Controller Unit) 또는 본 발명이 속하는 기술 분야에서 널리 알려져 있는 형태의 프로세서 중 어느 하나일 수 있다. 아울러, 프로세서는 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법을 수행하기 위한 적어도 하나의 애플리케이션 또는 프로그램에 대한 연산을 수행할 수 있 다. 네트워크 인터페이스는 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치의 유무선 인터넷 통신을 지원하며, 그 밖의 공지의 통신 방식을 지원할 수도 있다. 따라서 네트워크 인터페이스는 그에 따른 통신 모듈을 포함하여 구성될 수 있다. 메모리는 각종 정보, 명령 및/또는 정보를 저장하며, 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법을 수행하기 위해 스토리지로부터 하나 이상의 컴퓨터 프로그램을 로드할 수 있다. 도 1에서는 메 모리의 하나로 RAM을 도시하였으나 이와 더불어 다양한 저장 매체를 메모리로 이용할 수 있음은 물론이 다. 스토리지는 하나 이상의 컴퓨터 프로그램 및 대용량 네트워크 정보를 비임시적으로 저장할 수 있다. 이러한 스토리지는 ROM(Read Only Memory), EPROM(Erasable Programmable ROM), EEPROM(Electrically Erasable Programmable ROM), 플래시 메모리 등과 같은 비휘발성 메모리, 하드 디스크 (HDD), 보조 저장 매치(SSD), 착탈형 디스크, 또는 본 발명이 속하는 기술 분야에서 널리 알려져 있는 임의의 형태의 컴퓨터로 읽을 수 있는 기록 매체 중 어느 하나일 수 있다. 컴퓨터 프로그램은 메모리에 로드되어, 하나 이상의 프로세서에 의해, (A) 인공지능 분류 모델을 학습시키는 오퍼레이션, (B) 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 오퍼레이션, (C) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모 니터링하는 오퍼레이션, (D) 상기 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋 (DataSet)화하는 오퍼레이션, (E) 상기 데이터셋화한 데이터셋을 전처리하는 오퍼레이션 및 (F) 상기 전처리한 데이터셋을 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 오퍼레이션을 실행할 수 있다. 이상 간단하게 언급한 컴퓨터 프로그램이 수행하는 오퍼레이션은 컴퓨터 프로그램의 일 기능으로 볼 수 있으며, 보다 자세한 설명은 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 대한 설명에서 후술 하도록 한다. 데이터 버스는 이상 설명한 프로세서, 네트워크 인터페이스, 메모리 및 스토리지 사이의 명령 및/또는 정보의 이동 경로가 된다. 이상 설명한 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치는 독립된 디바이스의 형태, 예를 들어 전자 기기나 서버(클라우드 포함)의 형태일 수 있으며, 전자의 경우 사용자 단말(미도시)과 유/무선 네트 워크를 통해 직접적으로 연결되어 사용자 단말(미도시)에 설치된 CPU의 이상을 탐지하고, 후자의 경우 전용 애 플리케이션의 형태로 사용자 단말(미도시) 등에 설치되어 구동됨으로써 CPU의 이상을 탐지할 수 있을 것이다. 한편, 여기서 전자 기기는 한 장소에 고정 설치되어 사용하는 데스크톱 PC뿐, 서버 디바이스 등과 같은 기기 뿐 만 아니라, 스마트폰, 태블릿 PC, 노트북 PC, PDA, PMP 등과 같이 휴대가 용이한 포터블 기기 등이라도 무방하 며, CPU가 설치되고 네트워크 기능만 보유하고 있다면 전자 기기는 어떠한 것이라도 무방하다 할 것이다. 이하, 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치가 독립된 디바이스인 전자 기기 형태 중, 서버의 형태임을 전제로 사용자 단말(미도시)에 설치된 전용 어플리케이션을 통해 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 대하여 도 2 내지 도 14를 참조하여 설명하도록 한다. 도 2는 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법의 대표적인 단계를 나타낸 순서도이다. 그러나 이는 본 발명의 목적을 달성함에 있어서 바람직한 실시 예일 뿐이며, 필요에 따라 일부 단계가 추가 또 는 삭제될 수 있음은 물론이고, 어느 한 단계가 다른 단계에 포함되어 수행될 수도 있다. 한편, 각 단계는 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치를 통해 이루어지는 것을 전제 로 하며, 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치가 서버의 형태임을 전제로 하였기 때 문에 사용자 단말(미도시)에 설치된 전용 어플리케이션을 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치와 동일한 의미로 볼 것이고, 설명의 편의를 위해 이들 모두를 \"장치\"로 명명하도록 한다. 우선, 장치가 인공지능 분류 모델을 학습시킨다(S210). 모델의 학습은 인공지능 모델을 사용하는 모든 기술들에서 필수적으로 수행되는 전제 조건인바, 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법 역시 이와 크게 다르지는 않다. 이하, 도 3을 참조하여 자세히 설 명하도록 한다. 도 3은 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 있어서 인공지능 분류 모델을 학습시키는 S210 단계를 구체화한 순서도이다. 그러나 이는 본 발명의 목적을 달성함에 있어서 바람직한 실시 예일 뿐이며, 필요에 따라 일부 단계가 추가 또 는 삭제될 수 있음은 물론이고, 어느 한 단계가 다른 단계에 포함되어 수행될 수도 있다. 우선, 장치가 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정한다(S210-1). 여기서 CPU Execution Port는 CPU의 내부 구조도를 도시한 도 4를 참조하면 확인할 수 있는바, CPU의 내부 구조 와 동작에 대하여 먼저 설명하도록 한다. 통상적인 CPU는 프론트 엔드(Front End), 실행 엔진(Execution Engine) 및 메모리(Memiry) 하위 시스템으로 구 성되며, 실행 엔진을 백 엔드(Back End)라 부르는 것이 일반적이다. 여기서 프론트 엔드는 메모리에서 명령어를 가져오고 이를 일련의 마이크로 연산 (μops) 으로 디코딩하는 역할 을 수행하며, 실행 엔진의 재정렬 버퍼(Reorder Buffer)는 μops가 폐기될 때까지 순서대로 저장하고, 레지스터 할당 및 레지스터 이름 변경을 변경하는 역할을 수행한다. 재정렬 버퍼가 μops를 저장했다면 모든 소스 피연산자가 준비될 때까지 μops를 대기열에 추가하는 스케줄러 (Scheduler)로 μops가 전달되며, μop의 피연산자가 준비되면 실행 포트를 통해 μop가 전달되고, 여기서 실행 포트가 CPU Execution Port이며, CPU Execution Port의 번호는 CPU Execution Port의 개수에 따라 결정될 수 있다. CPU 중 통상적으로 널리 알려진 인텔 코어 마이크로 아키텍처는 CPU Execution Port를 6개, 8개 및 10개 중 어 느 하나를 포함할 수 있으나, 이는 반드시 그러한 것은 아닐 수도 있으며, 비순차적 실행으로 인해 μops는 반 드시 프로그램 순서대로 디스패치 되지는 않고, 각각의 CPU Execution Port는 서로 다른 기능 장치 세트에 연결 될 수 있으며, 모든 주기에서 최대 하나의 μop 수용할 수 있다. 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에서는 이와 같이 CPU의 실행 엔진 상에서 스케줄러 로부터 μop를 전달하는 실행 포트인 CPU Execution Port의 포트 출력값을 CPU의 이상 탐지를 위한 모니터링 대 상으로 삼고자 하며, 이는 뒤에서 보다 자세히 설명하도록 한다. S210-1 단계에서 설정하는 CPU 모니터링 조건은 CPU Execution Port 번호 설정을 포함하며, 여기서 CPU Execution Port 번호 설정은 모니터링할 CPU Execution Port의 번호가 어떤 것이냐, 예를 들어 도 4를 참조하 면 Port 0 내지 Port 5 중 어떤 번호의 포트를 모니터링할 것인지를 설정하는 것이며, 하나의 CPU 상에서 CPU Execution Port가 복수 개인 것이 일반적이므로 모니터링하고자 하는 CPU Execution Port 번호 역시 복수 개로설정할 수 있음은 물론이라 할 것이다. 한편, CPU 모니터링 조건은 모니터링할 CPU Execution Port 번호 설정뿐만 아니라, 모니터링할 CPU CORE 설정, 모니터링할 CPU CORE 수 설정, 모니터링 속도 설정 및 모니터링 시간 설정 중 어느 하나 이상을 더 포함할 수 있는바, 이는 사용자 편의성을 향상시키기 위함이다. CPU Execution Port의 개수에 대응하는 CPU Execution Port 번호와 별개로, CPU 성능이 나날이 향상됨에 따라 하나의 CPU는 복수 개의 CORE를 포함하고 있음이 일반적인바, CPU Execution Port 번호뿐만 아니라 모니터링하 고자 하는 CPU CORE를 사용자가 개별적으로 설정하거나 모니터링하고자 하는 CPU CORE 수까지 설정할 수 있게 함으로써 종래 기술과 달리 이상 행위가 CPU 전체 차원에서만 발생했는지 여부를 확인하는 것에서 한 걸음 더 나아가, 어떠한 CPU CORE에서 발생했는지 구체적으로 확인할 수 있게 함으로써 그에 따라 해당 CPU CORE에 대해 서만 적절한 사후적 조치를 취할 수 있게 되기에 전체 시스템 차원에서 안정적인 운영을 도모할 수 있다. 예를 들어 설명하도록 한다. CPU가 12개의 CPU CORE를 포함하고 있으며, 이를 각각 CORE 0, CORE 1, CORE 2, CORE 3, CORE 4, CORE 5, CORE 6, CORE 7, CORE 8, CORE 9, CORE 10, CORE 11이라 명명한다면, 모니터링할 CPU CORE 설정에 의해 CORE 0, CORE 5, CORE 10만을 모니터링할 CPU CORE로 설정할 수 있으며, 모니터링할 CPU CORE 수 설정에 의해 6개의 CORE만 모니터링하고자 한다면, CORE 0, CORE 1, CORE 2, CORE 3, CORE 4, CORE 5 가 모니터링할 CPU CORE로 설정될 수 있다. 한편, 모니터링할 CPU CORE 수 설정은 CORE의 번호가 아니라 CORE의 개수에 대한 설정이기 때문에 개수에 대응 하는 CORE에 대한 조건이 어떠한 것이냐에 따라 모니터링할 CPU CORE가 상이해질 수 있는바, 예를 들어 개수에 대응하는 CORE의 조건이 내림차순이라면 CORE 11 부터 설정한 개수에 해당하는 CORE를 모니터링하고자 하는 CPU CORE로 설정할 수 있을 것이며, CORE의 조건이 오름차순이라면 CORE 0부터 설정한 개수에 해당하는 CORE를 모니 터링하고자 하는 CPU CORE로 설정할 수 있을 것이다. 또한, 내림차순과 오름차순뿐만 아니라 개수에 대응하는 CORE에 대한 조건을 CORE 별 메모리 사용 비중일 수도 있는바, 개수에 대응하는 CORE에 대한 조건 설정 역시 사 용자가 자유롭게 셋팅할 수 있다 할 것이다. CPU 모니터링 조건과 관련하여 CPU CORE에 대한 설명을 이어가면, 앞선 CPU Execution Port 번호 설정은 모니터 링할 CPU CORE 별로 그에 대한 Execution Port 번호 설정이 개별적으로 가능할 수도 있는바, 앞선 12개의 CPU CORE에 대하여 각각의 CPU CORE가 8개의 CPU Execution Port를 포함한다면, 하나의 CPU 전체적으로 12 * 8인 96개의 CPU Execution Port가 포함되는 것으로 볼 수 있으며, 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지 하는 방법은 모니터링할 CPU CORE 별로 그에 대한 Execution Port 번호 설정이 개별적으로 가능하게 함으로써 사용자 편의성을 한 단계 더 향상시킬 수 있다. 예를 들어, 사용자는 12개의 CPU CORE인 CORE 0, CORE 1, CORE 2, CORE 3, CORE 4, CORE 5, CORE 6, CORE 7, CORE 8, CORE 9, CORE 10, CORE 11 중에서 CORE 2, CORE 6, CORE 11만을 모니터링 대상 CPU CORE로 설정할 수 있을 뿐만 아니라 CORE 2에 대해서는 CPU Execution Port 0 내지 CPU Execution Port 7 전부에 대하여, CORE 6 에 대해서는 CPU Execution Port 1, CPU Execution Port 4에 대하여, CORE 11에 대해서는 CPU Execution Port 2, CPU Execution Port 3, CPU Execution Port 7에 대하여 모니터링 대상으로 개별적인 설정이 가능한 것이다. 한편, CPU CORE 별로 개별적인 설정이 가능한 것은 CPU Execution Port 번호뿐만 아니라 앞서 설명한 CPU CORE 수의 설정과 마찬가지로 CPU Execution Port의 포트 수에 대해서도 가능할 수 있으며, 개수에 대응하는 CORE의 조건이 CPU Execution Port에 대해서도 동일하게 적용될 수 있으므로 중복 서술을 방지하기 위해 자세한 설명은 생략하도록 한다. 이와 같이 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법은 CPU 모니터링 조건 설정과 관련하여 사 용자에게 다양한 선택 사항을 제공함으로써 원하는 CPU CORE만, 그리고 원하는 CPU CORE에 대한 CPU Execution Port만 모니터링할 수 있으며, 이는 사용자 편의성을 향상시킬 수 있을 것이나, 명백하게 특정 CPU CORE 또는 특정 CPU Execution Port 에서 이상 행위가 발생하는 것을 사전에 인지하고 있는 경우 등과 같이 특별한 상황을 제외하고 이상 행위의 근원을 추적하고자 하는 경우에는 가급적 모든 CPU CORE 및 이에 대한 모든 CPU Execution Port를 CPU 모니터링 조건으로 설정하는 것이 본 발명의 취지에 부합함과 더불어 목적을 달성할 수 있는 지름길이라 할 것이다. 이상의 조건들과 별개로 사용자는 모니터링 속도 설정 및 모니터링 시간 설정도 가능한바, 여기서 모니터링 속 도 설정은 후술할 CPU Execution Port의 포트 출력값을 어떠한 속도, 쉽게 이야기하면 포트 출력값을 어떠한 간 격으로 찍거나 검출하여 데이터화할지에 관한 것이며, 모니터링 시간은 포트 출력값을 모니터링하는 전체 시간에 관한 것이고, 설정한 모니터링 속도와 모니터링 시간을 통틀어 모니터링 타임라인(Timeline) 설정으로 볼 수 있다 할 것이다. 이후, 장치가 S210-1 단계에서 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링한다(S210-2). 여기서 앞서 설명을 보류한 CPU Execution Port의 포트 출력값은 CPU Execution Port의 PMC(Performance Monitoring Counter) 값일 수 있으며, 모니터링한 CPU Execution Port의 포트 출력값의 예시를 도 5에 첨부하 였다. CPU Execution Port의 포트 출력값을 모니터링했다면, 장치가 S210-2 단계에서 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화한다(S210-3). 여기서 데이터셋화는 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 CSV(Comma Separated Value) 파일로 저장하는 것을 의미하는바, CSV 파일로 저장함을 설명하기에 앞서 모니터링한 결과에 대하여 먼 저 설명하도록 한다. 도 5는 모니터링한 CPU Execution Port의 포트 출력값의 예시인바, 설명에 앞서 해당 예시는 설정한 CPU 모니터 링 조건 중 타임라인 설정에 해당하는 모니터링 속도 및 모니터링 시간에 대하여 한 번의 타임라인만 거친 포트 출력값의 예시임을 명시하도록 한다. 도 5를 참조하면 가로 방향과 세로 방향으로 복수 개의 숫자가 기재되어 있음을 확인할 수 있는바, 각각의 숫자 는 CPU Execution Port의 포트 출력값, 보다 구체적으로 CPU Execution Port의 PMC값을 나타낸다. 또한, 각각의 행은 CPU CORE 번호에 대응하며, 각각의 열은 CPU의 Execution Port의 번호에 대응한다. 예를 들 어 설명하면, 첫 번째 행은 CPU CORE 0에 대한 PMC 값을 나타내며, 104는 CPU CORE 0에 대한 CPU Execution Port 0의 PMC 값을, 93은 CPU CORE 0에 대한 CPU Execution Port 1의 PMC 값을, 6은 CPU CORE 0에 대한 CPU Execution Port 2의 PMC 값을, 15는 CPU CORE 0에 대한 CPU Execution Port 3의 PMC 값을, 13은 CPU CORE 0에 대한 CPU Execution Port 4의 PMC 값을, 108은 CPU CORE 0에 대한 CPU Execution Port 5의 PMC 값을, 171은 CPU CORE 0에 대한 CPU Execution Port 6의 PMC 값을, 4는 CPU CORE 0에 대한 CPU Execution Port 7의 PMC 값 을 나타내는 것이며, 이와 같은 해석을 통해 두 번째 행은 CPU CORE 1에 대한 PMC 값, 마지막 행은 CPU CORE 11 에 대한 PMC 값임을 알 수 있을 것이며, 그에 따라 모니터링 대상 CPU에 대하여 설정한 CPU 모니터링 조건이 12 개의 CPU CORE와 각각의 CPU CORE에 대한 8개의 CPU Execution Port임을 역으로 추정할 수도 있다. 이와 같은 모니터링 결과는 어디까지나 S210-1 단계에서 설정한 CPU 모니터링 조건에 의한 것이기 때문에 모니 터링 결과만으로 해당 CPU가 12개의 CPU CORE 및 각각의 CPU CORE에 대한 8개의 CPU Execution Port 만으로 이 루어졌다고 단정할 수는 없음에 유의해야 할 것이며, CPU를 구성하는 모든 CPU CORE 및 해당 CPU CORE에 대한 모든 CPU Execution Port에 대하여 모니터링 조건을 설정한 경우에만 이에 해당할 수 있다 할 것이다. 도 6은 CSV 파일로 저장한 데이터셋의 예시인바, 각각의 타임 라인에 모니터링한 CPU Execution Port의 포트 출 력값(Value)이 각각의 CPU CORE 및 이에 대한 CPU Execution Port의 포트 번호 별로 기재되어 있음을 확인할 수 있으며, 이는 결국 사용자가 CPU 모니터링 조건으로 설정한 CPU CORE 수 만큼(X), 사용자가 설정한 모니터링 시간(y) 만큼 구축한 데이터셋으로 볼 수 있다 할 것이다. 다시 도 3에 대한 설명으로 돌아가도록 한다. CPU Execution Port의 포트 출력값을 데이터셋화 했다면, 장치가 S210-3 단계에서 데이터셋화한 데이터셋 을 전처리한다(S210-4). 여기서 전처리는 인공지능 분류 모델에 데이터를 입력하기 전에 수행하는 전처리 프로세스로 볼 수 있는바, 많 은 양의 데이터들 중에서 중요도가 높은 데이터들만을 추출하여 인공지능 분류 모델의 경량화를 의도하고, 정규 화를 통해 높은 정확도를 갖는 인공지능 분류 모델을 구축하는 것을 의도하기 위함이다. 그에 따라 S210-4 단계는 도 7에 도시된 바와 같은 장치가 데이터셋화한 데이터셋 내에서 중요도가 높은 소정 개수의 CPU Execution Port 번호를 추출하는 단계(S210-4-1) 및 번호를 추출한 중요도가 높은 소정 개수의 CPU Execution Port의 포트 출력값을 소정 범위 내로 수렴하도록 정규화하는 단계(S210-4-2)를 포함할 수 있다. 여기서 S210-4-1 단계에서의 소정 개수는 10개 내지 20개 중 어느 하나일 수 있으며, S210-4-2 단계에서의 소정 범위는 -2 내지 2일 수 있으나, 이에 반드시 한정하는 것은 아니며, 장치의 관리자의 설정에 따라 추출하는 소정 개수와 정규화하는 소정 범위를 자유롭게 설정할 수 있음은 물론이라 할 것이다. 더 나아가, 여기서의 소정 개수와 소정 범위를 장치의 사용자가 자유롭게 설정할 수 있도록 할 수도 있겠 으나, 인공지능 분류 모델의 학습에 관한 것이기에 장치 자체의 성능에 직결될 수 있으므로 가급적 관리자 만 설정 가능하도록 하게 함이 바람직하다 할 것이다. 한편, 장치가 S210-4-1 단계를 구현함에 있어 Python Package 중의 하나인 scikit-learn의 Random forest Classifer API를 활용할 수 있을 것이며, S210-4-2 단계를 구현함에 있어서는 마찬가지로 Python Package 중 하나인 scikit-learn의 RobustScaler API를 활용할 수 있을 것이나, 이에 반드시 한정하는 것은 아니라 할 것이다. 데이터셋을 전처리까지 했다면, 장치가 전처리한 데이터셋을 소정 비율로 분리하고, 분리한 일부를 인공지 능 분류 모델에 입력하여 이상 탐지 결과를 학습하며(S210-5), 분리한 나머지 일부를 인공지능 분류 모델에 입 력하여 이상 탐지 결과를 테스트한다(S210-6). 여기서 소정 비율은 일부 : 나머지 일부에 대하여 7 : 3 및 8 : 2 중 어느 하나일 수 있으며, 이에 반드시 한정 하지는 않고 장치의 관리자가 자유롭게 설정할 수 있다 할 것이나, 적어도 테스트를 위해 입력된 데이터셋 이 학습을 위해 입력된 데이터셋 보다는 비율을 적게 가져가는 것이 인공지능 분류 모델의 학습 효율을 높일 수 있는 하나의 방안이라 할 것이다. 한편, 데이터셋을 입력하는 인공지능 분류 모델은 장단기 메모리인 LSTM(Long Short Term Memory) 네트워크 구 조를 포함하되, 여기서 LSTM 네트워크 구조는 양 방향 학습이 가능한 Bi-LSTM 네트워크 구조일 수 있는바, 도 8 에 LSTM 네트워크 구조를 예시적으로 도시해 놓았다. 도 8을 참조하여 LSTM 네트워크 구조에 대하여 설명하면, 전처리한 데이터셋이 xt에 입력되며, σ와 h는 LSTM 네트워크의 시그모이드와 하이퍼 볼릭 탄젠트가 활성화 함수로 숨겨진 은닉층을 의미한다. 아울러, ct는 이전 상 태를 장기적으로 기억하기 위한 데이터이며 ot는 연산에 의한 결과이다. 이와 같이 LSTM 네트워크는 현재 입력과 이전 출력을 동시에 받아들이기 때문에 시계열 데이터 분석에 용이한바, 모니터링한 CPU Ececution Port의 포트 출력값, 보다 구체적으로 이를 데이터셋화한 데이터셋이 타임 라인에 따라 정렬된 시계열 데이터이기 때문에 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 가장 최적화된 네트워크 구조로 볼 수 있다 할 것이다. 도 9는 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 있어서, LSTM 네트워크 구조를 포함하는 인공지능 분류 모델의 구성도이다. 이에 대하여 설명하면, 입력 받은 데이터셋을 양 방향(Forward - 정방향, Backward - 역방향) 학습이 가능한 Bi-LSTM 네트워크 구조를 활용하여 학습을 진행하고, ReLU Activation Function을 활용하여 결과 값들을 출력한다. 그리고 출력된 결과 값들에 대한 Overfitting 문제를 해결하기 위 해서 Dropout Layer를 활용하며, 모델의 성능(정확도)을 높이기 위해서Attention Layer를 추가하여 특정 출력에 대한 Weight(가중치)를 증가시킨다. 최종적으로 시계열 데이터 기반의 데이터 셋을 분류 시키기위해 Dense의 Activation Function을 Softmax로 설정해주어 특정 현재 상태에 대한 분류를 수행할 수 있도록 하며, Outlier 를 최소화하기 위해 Bi-LSTM, Dropout Layer, Attention Layer, Dense Layer의 결과 후 BatchNormalization Layer를 지나게 되며, 이를 통해 전체적인 Normalization이 진행될 수 있다. 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 있어서 인공지능 분류 모델은 이와 같은 구성에서 더 나아가, 학습 과정에서 동적으로 Learning Rate를 변경시켜 주기 위해 EarlyStop Method를 활용할 수 있으며, 인공지능 분류 모델이 학습 데이터셋을 활용하여 한번 학습을 진행하였을 때(즉, 한번의 Epoch가 지난 후) 정확도가 증가하지 않는다면, Learning Rate를 설정한 Learning Decay에 따라 동적으로 변경해주어 전체적 인 인공지능 분류 모델의 학습 성능 향상을 도모할 수 있다. 이상 설명한 S210-1 단계 내지 S210-6 단계를 통해 인공지능 분류 모델의 학습이 진행될 수 있으며, 이를 반복 하면 할수록 학습 완성도는 향상될 수 있다 할 것이다. 다시 도 2에 대한 설명으로 돌아가도록 한다. 인공지능 분류 모델을 학습시켰다면, 장치가 모니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하며(S220), CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값 을 모니터링하고(S230), 모니터링한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화한다 (S240). 이후 데이터셋화한 데이터셋을 전처리하며(S250), 마지막으로 전처리한 데이터셋을 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력한다(S260). 이상의 단계들 중에서 S220 단계 내지 S250 단계는 앞서 인공지능 분류 모델의 학습과 롼련된 S210-1 단계 내지 S210-4 단계에 대한 설명과 동일하기에 중복 서술을 방지하기 위해 자세한 설명은 생략하도록 하며, S210 단계 에 대한 설명에서는 데이터셋의 전처리 이후 데이터셋을 소정 비율로 분리하여 일부를 학습하고 일부를 테스트 하는 S210-5 단계 및 S210-6 단계가 수행되었으나, 도 2의 경우에는 인공지능 분류 모델의 학습에 관한 것이 아 니라 실제 CPU의 이상을 탐지하는 방법의 수행에 관한 것이므로 전처리한 데이터셋 전부를 인공지능 분류 모델 에 입력하여 이상 탐지 결과를 출력한다는 차이점이 있다. 한편, S260 단계와 관련하여 이상 탐지 결과는 앞서 설정한 CPU 모니터링 조건과 마찬가지로 CPU CORE 별로 정 상 상태인지 비정상 상태인지, 그리고 해당 CPU CORE에 대한 CPU Execution Port 별로 정상 상태인지 비정상 상 태인지 구별하여 출력할 수 있으며, 복수 개의 CPU Execution Port 중 어느 하나라도 비정상 상태인 CPU Execution Port가 존재한다면, 이에 대한 CPU CORE는 비정상 상태로 출력될 수 있을 것이다. 한편, 정상 상태와 비정상 상태에 대한 출력은 수치, 예를 들어 1에 가까운 값이 출력될수록 정상 상태에 가깝 고, 0에 가까운 값이 출력될수록 비정상 상태에 가깝게 출력할 수 있으며, 한눈에 식별 가능한 시각적인 수단을 통해 출력할 수도 있다. 도 10은 인공지능 분류 모델의 예시적인 세부 스펙에 대한 테이블이며, 도 11은 도 10에 첨부된 스펙을 갖는 인 공지능 분류 모델을 통해 CPU CORE 0이 정상 상태일 때의 이상 탐지 결과를 2차원적인 시각 수단을 통해 출력한 예시이고, 도 12는 비정상 상태일 때의 이상 탐지 결과를 2차원적인 시각 수단을 통해 출력한 예시이다. 도 11을 참조하면, CPU CORE 0에 대하여 CPU Execution Port 0 내지 8 모두 큰 변동 없이 포트 출력값이 일정 하게 출력되고 있음을 확인할 수 있으며, 일부 범위를 벗어난 값의 경우 지속적으로 유지되고 있지 않으므로 노 이즈에 해당한다고 볼 수 있을 것이다. 그러나 도 12를 참조하면, 타임 라인 4000 이상부터 포트 출력값이 급변 한 상태가 지속적으로 유지되고 있으므로 비정상 상태가 발생했음을 손쉽게 식별 가능할 것이다. 한편, 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법은 이상 탐지 결과를 2차원적인 시각 수단뿐만 아니라 도 13에 예시적으로 도시된 3차원적인 시각 수단으로도 출력할 수 있으며, 사용자는 자신이 원하는 이상 탐지 결과 출력 방식을 자유롭게 선택할 수 있는바, 사용자 편의성이 향상될 수 있다. 도 14는 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 있어서 이상 탐지 결과의 정확도 시뮬레 이션(Confusion Matrix) 결과, 즉 성능에 대한 시뮬레이션 결과인바, 실제 정상 상태(init)일 때, 이상 탐지 결 과를 정상 상태로 출력한 경우가 83.22%, 실제 비정상 상태(attack)일 때, 이상 탐지 결과를 비정상 상태로 출 력한 경우가 99.41%, 유튜브를 시청하고 있는 정상 상태(youtube)일 때, 이상 탐지 결과를 유튜브를 시청하고 있는 정상 상태로 출력한 경우가 82.84%로 나타난바, 비정상 상태의 탐지 결과가 100%에 가까울 정도로 매우 정 확하게 나타남을 확인할 수 있다. 지금까지 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 대하여 설명하였다. 본 발명에 따르면, 공격의 종류와 무관한 CPU Execution Port의 포트 출력값을 모니터링하여 이상 행위 발생 여부를 탐지하는바, 모든 종류의 공격에 대하여 CPU의 이상 발생 여부를 신속하게 탐지할 수 있다. 또한, 모니터링하고자하는 CPU CORE, 더 나아가 해당 CPU CORE에 대한 CPU Execution Port까지 사용자가 자유롭게 설정하여 모니터링을 진행할 수 있는바, 이상 행위가 발생한 근원을 정확하게 탐지할 수 있다. 더 나아가, 모니터링하고자하는 CPU CORE 및 이에 대한 CPU Execution Port의 설정뿐만 아니라, 이상 탐지 결과까지 사용자가 원하는 방식으로 선택하여 출 력할 수 있으므로 사용자 편의성이 비약적으로 향상될 수 있다. 아울러, 장치를 사용하여 이상 탐지를 반 복적으로 수행하면 할수록 인공지능 분류 모델의 학습 정확도가 향상함으로써 보다 정확한 이상 탐지 결과를 제 공할 수 있다. 한편, 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치와 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법은 본 발명의 제3 실시 예에 따른 컴퓨터로 판독 가능한 매체에 저장된 컴퓨터 프로그램으 로 구현할 수도 있는바, 이 경우 컴퓨팅 장치와 결합하여 (AA) 인공지능 분류 모델을 학습시키는 단계, (BB) 모 니터링할 CPU의 CPU Execution Port 번호 설정을 포함하는 CPU 모니터링 조건을 설정하는 단계, (CC) 상기 CPU 모니터링 조건으로 번호를 설정한 CPU Execution Port의 포트 출력값을 모니터링하는 단계, (DD) 상기 모니터링 한 결과에 따른 CPU Execution Port의 포트 출력값을 데이터셋(DataSet)화하는 단계, (EE) 상기 데이터셋화한 데이터셋을 전처리하는 단계 및 (FF) 상기 전처리한 데이터셋을 상기 인공지능 분류 모델에 입력하여 이상 탐지 결과를 출력하는 단계를 실행할 수 있을 것이며, 중복 서술을 위해 자세히 기재하지는 않았지만 본 발명의 제1실시 예에 따른 CPU의 이상을 탐지하는 장치 및 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방 법에 적용된 모든 기술적 특징은 본 발명의 제4 실시 예에 따른 컴퓨터로 판독 가능한 매체에 저장된 컴퓨터 프 로그램에 모두 동일하게 적용될 수 있음은 물론이라 할 것이다. 이상 첨부된 도면을 참조하여 본 발명의 실시 예들을 설명하였지만, 본 발명이 속하는 기술 분야에서 통상의 지 식을 가진 자는 본 발명이 그 기술적 사상이나 필수적인 특징을 변경하지 않고서 다른 구체적인 형태로 실시될 수 있다는 것을 이해할 수 있을 것이다. 그러므로 이상에서 기술한 실시 예들은 모든 면에서 예시적인 것이며 한정적이 아닌 것으로 이해해야만 한다."}
{"patent_id": "10-2022-0154568", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 제1 실시 예에 따른 CPU의 이상을 탐지하는 장치가 포함하는 전체 구성을 예시적으로 도시한 도면이다. 도 2는 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법의 대표적인 단계를 나타낸 순서도이다. 도 3은 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 있어서, 인공지능 분류 모델을 학습시키는 S210 단계를 구체화한 순서도이다. 도 4는 CPU의 내부 구조도를 예시적으로 도시한 도면이다. 도 5는 모니터링한 CPU Execution Port의 포트 출력값의 예시이다. 도 6은 CSV 파일로 저장한 데이터셋의 예시이다. 도 7은 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 있어서, 데이터셋을 전처리하는 S210-4 단 계를 구체화한 순서도이다. 도 8은 LSTM 네트워크 구조를 도시한 도면이다. 도 9는 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 있어서, LSTM 네트워크 구조를 포함하는 인공지능 분류 모델의 구성도이다. 도 10은 인공지능 분류 모델의 예시적인 세부 스펙에 대한 테이블이다. 도 11은 도 10에 첨부된 스펙을 갖는 인공지능 분류 모델을 통해 CPU CORE 0이 정상 상태일 때의 이상 탐지 결 과를 2차원적인 시각 수단을 통해 출력한 예시이다. 도 12는 도 10에 첨부된 스펙을 갖는 인공지능 분류 모델을 통해 CPU CORE 0이 비정상 상태일 때의 이상 탐지 결과를 2차원적인 시각 수단을 통해 출력한 예시이다. 도13은 도 10에 첨부된 스펙을 갖는 인공지능 분류 모델을 통해 CPU CORE 0이 비정상 상태일 때의 이상 탐지 결 과를 3차원적인 시각 수단을 통해 출력한 예시이다. 도 14는 본 발명의 제2 실시 예에 따른 CPU의 이상을 탐지하는 방법에 있어서, 이상 탐지 결과의 정확도 시뮬레 이션(Confusion Matrix) 결과이다."}
