{"patent_id": "10-2023-7035207", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0158055", "출원번호": "10-2023-7035207", "발명의 명칭": "신경 트로이 목마 저항성 컨볼루션 신경망 배포", "출원인": "유니버시티 오브 사우스 플로리다", "발명자": "카람 로버트 앤서니"}}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컨볼루션 신경망(CNN) 모델에 대한 악의적인 공격을 식별하기 위한 시스템으로서,CNN 모델을 사용하여 객체의 분류를 수행하는 타깃 컴퓨팅 시스템으로서, 훈련 데이터세트를 사용하여 상기 CNN모델을 생성하도록 구성된, 상기 타깃 컴퓨팅 시스템; 및주입된 신경 공격을 식별하는 공격 식별 컴퓨팅 시스템을 포함하고, 상기 공격 식별 컴퓨팅 시스템은,상기 타깃 컴퓨팅 시스템으로부터 상기 CNN 모델 및 상기 CNN 모델과 연관된 파라미터를 수신하고;수신된 CNN 모델과 파라미터에 기초하여 CNN 모델의 에코시스템을 생성하고, 상기 에코시스템을 생성하는 것은상기 CNN 모델과 연관된 파라미터의 원래의 가중치를 수정하는 것을 포함하고;수정된 가중치를 사용하여 상기 CNN 모델과 연관된 파라미터의 원래의 가중치를 업데이트하고;상기 CNN 모델과 연관된 파라미터의 업데이트된 가중치를 보안 데이터 저장소에 저장하고;업데이트된 가중치에 기초하여 수신된 CNN 모델에 대한 업데이트 파일을 생성하고;상기 업데이트 파일을 사용하여 상기 수신된 CNN 모델을 업데이트하고;상기 업데이트된 CNN 모델을 상기 타깃 컴퓨팅 시스템으로 전송하도록 구성되고;상기 타깃 컴퓨팅 시스템은 (i) 상기 업데이트된 CNN 모델을 사용하고, (ii) 상기 업데이트된 CNN 모델에 기초하여 상기 업데이트된 CNN 모델에 대한 공격자 컴퓨팅 시스템에 의한 신경 공격을 탐지하도록 추가로 구성된,시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 신경 공격은 상기 훈련 데이터세트에 악성 데이터를 주입하는 것을 수반하는 신경 트로이목마 공격을 포함하는, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 CNN 모델과 연관된 파라미터는 상기 CNN 모델의 훈련 데이터세트를 포함하는, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 CNN 모델의 에코시스템을 생성하는 것은 상기 수신된 CNN 모델과 연관된 파라미터에 확률론적 파라미터 변이를 적용하는 것을 포함하는, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서, 상기 CNN 모델의 에코시스템을 생성하는 것은,처음에 사용자 정의 값에 기초하여 상기 수신된 CNN 모델과 연관된 파라미터의 가중치를 이동시키는 것; 및두 번째로 난수 생성기를 사용하여 상기 수신된 CNN 모델과 연관된 파라미터의 가중치를 이동시키는 것을 추가로 포함하는, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 CNN 모델과 연관된 파라미터의 원래의 가중치를 업데이트하는 것은 상기 수정된 가중치를상기 원래의 가중치에 추가하는 것을 포함하는, 시스템.공개특허 10-2023-0158055-3-청구항 7 제1항에 있어서, 상기 수신된 CNN 모델에 대한 업데이트 파일을 생성하는 것은,상기 업데이트된 가중치를 사용하여 상기 수신된 CNN 모델을 재훈련하는 것;상기 재훈련에 기초하여, 재훈련 전후 상기 업데이트된 가중치의 행렬을 결정하는 것; 및상기 행렬에 기초하여 상기 업데이트 파일의 업데이트된 가중치를 XOR 연산하는 것을 포함하는, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서, 상기 수신된 CNN 모델을 업데이트하는 것은 상기 업데이트된 가중치의 델타를 상기 타깃 컴퓨팅 시스템으로 전송하는 것을 포함하는, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서, 상기 타깃 컴퓨팅 시스템은 다른 타깃 컴퓨팅 시스템의 클러스터의 일부이고, 상기 타깃 컴퓨팅 시스템은 다른 타깃 컴퓨팅 시스템의 클러스터와 동일한, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서, 상기 수신된 CNN 모델과 연관된 파라미터의 원래의 가중치를 수정하는 것은 상기 원래의 가중치를 미리 결정된 임계값만큼 이동시키는 것을 포함하는, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서, 상기 미리 정해진 임계값은 1%인, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항에 있어서,상기 공격 식별 컴퓨팅 시스템은, 상기 업데이트 파일을 암호화하고;암호화된 업데이트 파일을 상기 타깃 컴퓨팅 시스템으로 전송하도록 추가로 구성되고; 상기 타깃 컴퓨팅 시스템은,상기 공격 식별 컴퓨팅 시스템으로부터 상기 암호화된 업데이트 파일을 수신하고;암호화된 데이터 파일을 복호화하고;복호화된 데이터 파일을 사용하여 상기 CNN 모델을 업데이트하도록 구성된, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항에 있어서, 상기 타깃 컴퓨팅 시스템은 상기 CNN 모델을 사용하여 환경 내의 객체를 분류하도록 구성되는,시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제1항에 있어서, 상기 타깃 컴퓨팅 시스템은 자율 주행 차량, 사물 인터넷(IoT) 디바이스, 및 인공 지능(AI) 디바이스 중 적어도 하나인, 시스템."}
{"patent_id": "10-2023-7035207", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제1항에 있어서,상기 타깃 컴퓨팅 시스템은 상기 신경 공격을 탐지한 것에 응답하여 상기 공격 식별 컴퓨팅 시스템에 경보를 전송하도록 추가로 구성되고,공개특허 10-2023-0158055-4-상기 공격 식별 컴퓨팅 시스템은 (i) 상기 타깃 컴퓨팅 시스템으로부터 상기 경보를 수신하고, (ii) 상기 CNN모델을 사용하여 상기 신경 공격의 식별을 다른 컴퓨팅 시스템으로 전송하도록 추가로 구성된, 시스템."}
{"patent_id": "10-2023-7035207", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일부 구현예에서, 컨볼루션 신경망(CNN) 모델에 대한 악의적인 공격을 식별하는 시스템은 CNN 모델을 사용하여 객체의 분류를 수행하는 타깃 컴퓨팅 시스템, 및 주입된 신경 공격을 식별하는 공격 식별 컴퓨팅 시스템을 포함 한다. 공격 식별 컴퓨팅 시스템은 CNN 모델 및 연관된 파라미터에 기초하여 CNN 모델과 연관된 파라미터의 원래 의 가중치를 수정함으로써 CNN 모델의 에코시스템을 생성하고; 수정된 가중치를 사용하여 파라미터의 원래의 가 중치를 업데이트하고; 파라미터의 업데이트된 가중치를 보안 데이터 저장소에 저장하고; 업데이트된 가중치에 기 초하여 CNN 모델에 대한 업데이트 파일을 생성하고; 업데이트 파일을 사용하여 CNN 모델을 업데이트하고; 업데이 트된 CNN 모델에 기초하여 공격자 컴퓨팅 시스템에 의한 신경 공격을 탐지하도록 구성된 타깃 컴퓨팅 시스템에 업데이트된 CNN 모델을 전송하도록 구성될 수 있다."}
{"patent_id": "10-2023-7035207", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "관련 출원에 대한 상호 참조 본 출원은 미국 출원 번호 17/208,616(출원일: 2021년 3월 22일, 이의 개시 내용은 모든 목적을 위해 전문이 본 명세서에 참조에 의해 원용됨)에 대한 우선권을 주장한다. 기술 분야 본 명세서는 일반적으로 \"신경 트로이 목마(Neural Trojan)\"라고도 하는 악성 기능을 포함하는 신경망 모델(즉, 일부 악성 데이터를 사용하여 훈련된 신경망 모델)을 탐지하는 것과 관련된 디바이스, 시스템 및 방법을 설명한 다."}
{"patent_id": "10-2023-7035207", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "자율 주행 차량과 같은 현대 시스템은 중요한 런타임 결정을 내리기 위해 기계 학습(ML) 및/또는 인공 지능(A I)에 점점 더 의존하고 있다. 컨볼루션 신경망(convolutional neural network)은 예를 들어 자율 주행 차량 및 기타 현대 시스템에서 이미지를 처리하고 분류 작업을 수행할 수 있다. 이러한 신경망은 분류된 또는 기타 식별 된 출력 정보와 상관된 입력 데이터를 포함할 수 있는 훈련 데이터로부터 생성된 모델을 포함할 수 있다. 모델 은 예를 들어, 입력 데이터의 다양한 특징을 대응하는 분류 또는 식별된 출력 정보로 변환하는 다수의 다른 계 층을 포함할 수 있다. 모델이 훈련되면 모델은 입력 데이터를 처리하여 적절한 분류 또는 기타 출력 정보를 결 정하는 데 사용될 수 있다. 신경망은 특히 잠재적으로 악의적인 훈련 데이터가 훈련 과정에 주입될 때 공격에 취약한 것으로 밝혀졌다. \"신 경 트로이 목마\"라고도 하는 이러한 공격은 은밀하고 탐지하기 어렵기 때문에 악의적인 목표를 성공적으로 달성 할 수 있다. 예를 들어 신경 트로이 목마는 신경망 구성(예를 들어, 신경망 모델)에 은밀한 변경을 야기하여 적 절한 기능을 위해 정확한 입력 분류에 의존하는 자율 주행 차량과 같은 시스템을 감염시킬 수 있다. 예를 들어, 공격자는 자율 주행 차량과 같은 시스템에 사용되는 신경망에 대한 훈련 데이터를 추출하고, 훈련 데이터를 수 정하고, 트로이 목마가 삽입된 구성을 원래의 시스템으로 다시 보낼 수 있다. 본 명세서는 일반적으로 신경 트로이 목마의 영향을 보다 쉽게 탐지할 수 있는 수준으로 증폭할 수 있도록 신경 망 구성의 에코시스템을 배포하는 방법을 설명한다. 개시된 기술은 자율 주행 차량과 같은 시스템의 배포 보안 을 향상시켜 신경 트로이 목마와 같은 은밀한 공격을 보다 신속하게 탐지하고 완화할 수 있다. 개시된 기술은 또한 다양한 디바이스 및/또는 시스템(예를 들어, IoT 디바이스, 에지에서 인공 지능을 사용하는 디바이스 등) 에 대한 신경망의 다양한 애플리케이션에서 신경 트로이 목마를 보다 신속하게 탐지할 수 있다. 은밀한 공격은 시스템의 컨볼루션 신경망(CNN)과 같은 신경망을 재훈련하는 것을 목표로 할 수 있다. 이러한 공 격은 분류 정확도를 감소시키거나, 시스템이 객체의 분류를 혼동하거나 혼합하게 할 수 있다. 예를 들어, 자율 주행 차량의 CNN은 원래의 훈련 모델과 다르게 객체를 분류하기 위해 공격자에 의해 재훈련될 수 있다. 자율 주 행 공간에서 이것은 안전 문제를 야기할 수 있다. 개시된 기술은 확률론적 파라미터 변이와 같은 기술을 사용하 여 신경 트로이목마 및 데이터 중독과 같은 원인 공격이 확산되는 것을 방지할 수 있다. 공격이 에코시스템 내 다른 디바이스나 시스템으로 확산되는 것을 방지할 수 있다. 개시된 기술은 확률론적 파라미터 변이 및 델타 업데이트 기술을 사용하여 시스템의 전체 정확도에 영향을 주지 않는 작은 변경을 신경망의 일부 파라미터에 제공할 수 있다. 개시된 기술은 네트워크의 구조를 변경하는 것을 제공하지 않을 수 있다. 작은 변화는 시스템이 저항할 수 있는 노이즈와 같이 처리될 수 있다. 본 명세서에 설 명된 업데이트 기술과 함께 사용하면 에코시스템 내에서 네트워크를 업데이트하여, 신경 트로이 목마가 에코시 스템의 하나의 네트워크 및 하나의 시스템으로부터 다른 네트워크 및 시스템으로 확산되는 것을 방지할 수 있다. 개시된 기술은 신경망 트로이 목마를 적용할 수 있는 실질적인 위협 모델을 제공할 수 있다. CNN은 확률론적 파 라미터 변이를 통해 원래의 CNN으로부터 도출될 수 있는 에코시스템으로서 배포될 수 있다. 개시된 기술은 델타 업데이트 기술을 사용하여 현장에서 CNN의 업데이트를 제공할 수 있으며, 이는 분류자에 대한 정보를 공격자에 게 덜 노출시키고 모델 에코시스템에 대한 중독 또는 신경 트로이 목마 기반 연결을 효과적으로 방지할 수 있다. 에코시스템에 걸쳐 적절한 자가 점검 절차와 공동 검증(pooled validation)을 통해 하나의 모델에 대한 은밀한 공격은 공격의 은밀한 특성을 유지하면서 다양화된 에코시스템 내의 다른 모델로 전이되지 않을 수 있다. 본 명세서에 설명된 특정 실시예는, 컨볼루션 신경망(CNN) 모델을 사용하여 객체의 분류를 수행하는 타깃 컴퓨 팅 시스템으로서, 훈련 데이터세트를 사용하여 CNN 모델을 생성하도록 구성된 타깃 컴퓨팅 시스템; 및 주입된 신경 공격을 식별하는 공격 식별 컴퓨팅 시스템을 포함하는 CNN 모델에 대한 악의적인 공격을 식별하기 위한 시 스템을 포함한다. 공격 식별 컴퓨팅 시스템은 타깃 컴퓨팅 시스템으로부터 CNN 모델 및 이 CNN 모델과 연관된 파라미터를 수신하고; 수신된 CNN 모델 및 파라미터에 기초하여 CNN 모델의 에코시스템을 생성하고, 여기서 에 코시스템을 생성하는 것은 CNN 모델과 연관된 파라미터의 원래의 가중치를 수정하는 것을 포함하고; 수정된 가 중치를 사용하여 CNN 모델과 연관된 파라미터의 원래의 가중치를 업데이트하고; CNN 모델과 연관된 파라미터의 업데이트된 가중치를 보안 데이터 저장소에 저장하고; 업데이트된 가중치에 기초하여 수신된 CNN 모델에 대한 업데이트 파일을 생성하고; 업데이트 파일을 사용하여 수신된 CNN 모델을 업데이트하고; 업데이트된 CNN 모델을 타깃 컴퓨팅 시스템으로 전송하도록 구성된다. 타깃 컴퓨팅 시스템은 (i) 업데이트된 CNN 모델을 사용하고, (ii) 업데이트된 CNN 모델에 기초하여 업데이트된 CNN 모델에 대한 공격자 컴퓨팅 시스템에 의한 신경 공격을 탐지하도록 추가로 구성된다. 이러한 시스템은 선택적으로 다음 특징 중 하나 이상을 포함할 수 있다. 신경 공격은 학습 데이터세트에 악성 데이터를 주입하는 것을 수반하는 신경 트로이 목마 공격을 포함할 수 있다. CNN 모델과 연관된 파라미터는 CNN 모델의 훈련 데이터세트를 포함할 수 있다. CNN 모델의 에코시스템을 생성하는 것은 수신된 CNN 모델과 연관된 파라미터에 확률론적 파라미터 변이를 적용하는 것을 포함할 수 있다. CNN 모델의 에코시스템을 생성하는 것은 처음에 사용자 정의 값에 기초하여 수신된 CNN 모델과 연관된 파라미터의 가중치를 이동시키는 것; 및 두 번째 로 난수 생성기를 사용하여 수신된 CNN 모델과 연관된 파라미터의 가중치를 이동시키는 것을 추가로 포함할 수 있다. CNN 모델과 연관된 파라미터의 원래의 가중치를 업데이트하는 것은 원래의 가중치에 수정된 가중치를 추 가하는 것을 포함할 수 있다. 수신된 CNN 모델에 대한 업데이트 파일을 생성하는 것은 업데이트된 가중치를 사 용하여 수신된 CNN 모델을 재훈련하는 것; 상기 재훈련에 기초하여, 재훈련 전후에 업데이트된 가중치의 행렬을 결정하는 것; 및 행렬에 기초하여 업데이트 파일의 업데이트된 가중치를 XOR 연산하는 것을 포함할 수 있다. 수 신된 CNN 모델을 업데이트하는 것은 업데이트된 가중치의 델타를 타깃 컴퓨팅 시스템으로 전송하는 것을 포함할 수 있다. 타깃 컴퓨팅 시스템은 다른 타깃 컴퓨팅 시스템의 클러스터의 일부일 수 있으며, 여기서 타깃 컴퓨팅 시스템은 다른 타깃 컴퓨팅 시스템의 클러스터와 동일하다. 수신된 CNN 모델과 연관된 파라미터의 원래의 가중 치를 수정하는 것은 원래의 가중치를 미리 결정된 임계값만큼 이동시키는 것을 포함할 수 있다. 미리 결정된 임 계값은 1%일 수 있다. 공격 식별 컴퓨팅 시스템은 업데이트 파일을 암호화하고; 암호화된 업데이트 파일을 타깃 컴퓨팅 시스템으로 전송하도록 추가로 구성될 수 있다. 타깃 컴퓨팅 시스템은 공격 식별 컴퓨팅 시스템으로부터 암호화된 업데이트 파일을 수신하고; 암호화된 데이터 파일을 복호화하고; 복호화된 데이터 파일을 사용하여 CNN 모델을 업데이트하도록 구성될 수 있다. 타깃 컴퓨팅 시스템은 CNN 모델을 사용하여 환경에서 객체를 분류 하도록 구성될 수 있다. 타깃 컴퓨팅 시스템은 자율 주행 차량, 사물 인터넷(IoT) 디바이스, 및 인공 지능(AI) 디바이스 중 적어도 하나일 수 있다. 타깃 컴퓨팅 시스템은 신경 공격을 탐지한 것에 응답하여 공격 식별 컴퓨 팅 시스템에 경보를 전송하도록 추가로 구성될 수 있으며, 공격 식별 컴퓨팅 시스템은 (i) 타깃 컴퓨팅 시스템 으로부터 경보를 수신하고, (ii) CNN 모델을 사용하여 신경 공격의 식별을 다른 컴퓨팅 시스템으로 전송하도록 추가로 구성될 수 있다. 본 명세서에 설명된 디바이스, 시스템 및 기술은 다음 장점 중 하나 이상을 제공할 수 있다. 예를 들어, 개시된 기술은 트로이 목마의 악의적인 영향을 보다 쉽게 탐지할 수 있는 수준으로 증폭시키는 것을 제공할 수 있다. 영향을 보다 쉽게 식별할 수 있게 만들면 이러한 공격에 대해 보다 신속하게 대응하고 이를 완화할 수 있다. 이 는 트로이 목마 공격으로 인해 자율 주행 차량의 안전이 손상되는 것을 방지하는 데 유리할 수 있다. 더욱이, 개시된 기술은 에코시스템의 시스템 중 임의의 시스템의 기능을 손상시키지 않으면서 에코시스템에서 업데이트 될 수 있는 시스템의 다른 모델이 감염되는 것에 대해 충분한 수준의 다양성과 복원력을 보장할 수 있다. 또 다른 예로서, 개시된 기술은 확률론적 파라미터 변이라는 하는 과정을 사용하여 공격자에게 혼란을 줄 수 있 다. 개시된 기술은 공격자가 공격을 개시하는 데 혼란을 줌으로써 자율 주행 차량과 같은 시스템의 업데이트를 제공할 수 있다. 예를 들어, 확률론적 파라미터 변이를 사용하여 개시된 기술은 입력 계층의 가중치를 수정하여 신경 트로이 목마를 보다 쉽게 탐지하고 트로이 목마 공격의 확산을 차단할 수 있다. 시스템을 업데이트하는 것 은 시스템의 컨볼루션 신경망(CNN)에 사용되는 가중치와 기타 파라미터를 손상시키지 않을 수 있다. 따라서, 개 시된 기술은 시스템이 공격을 받았는지 또는 손상되었는지 여부를 단순히 식별하는 것이 아니라 원인이 되는 공 격이 확산되는 것을 저지하는 데 중점을 둘 수 있다. 이러한 공격에 대한 사전 지식 없이도 공격이 다른 시스템의 훈련 모델이나 유사한 CNN으로 확산되기 전에 공격 을 식별할 수 있다. 개시된 기술은 이러한 공격에 대한 사전 지식 없이도 신경 트로이 목마 공격을 방어할 수 있다. 개시된 기술은 확률적 파라미터 변이와 같은 기술을 사용하여 연결된 시스템으로 공격이 확산되는 것을 차단하고 가짜 업데이트 요청을 통해 개시되는 공격을 방어할 수 있다. 하나 이상의 구현예의 세부사항은 첨부 도면 및 아래 설명에 제시된다. 다른 특징과 장점은 설명과 도면, 및 청 구범위로부터 명백해질 것이다."}
{"patent_id": "10-2023-7035207", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서는 일반적으로 자율 주행 차량을 포함하되 이로 국한되지 않는 시스템에 대한 은밀한 신경 트로이 목 마 공격을 보다 신속하게 탐지하고 완화하는 방법에 관한 것이다. 신경망은 의료, 보안, 음성 인식, 및 컴퓨터 비전과 같은 산업에서 점점 더 많이 사용되고 있다. 자동차 산업의 발전은 또한 주변 환경을 처리하고 의사 결정을 내리는 데 신경망에 의존할 수 있는 자율 주행 자동차의 개념을 가져왔다. 이러한 자율 시스템에는 고성능 및 내성이 있는 심층 학습 알고리즘이 장착될 수 있다. 이러한 시스템의 동작 오류는 부상 및 재산 피해를 초래 할 수 있다. 모델이 어떻게 변조되었는지 알지 못한 채 신뢰할 수 없는 ML 모델을 시스템에 배포하는 경우에도 보안 문제가 발생할 수 있다. ML 모델이 신뢰할 수 없는 환경에서 배포되고 동작하는 경우에도 보안 문제가 발 생할 수 있다. 적대적 기계 학습을 사용하면 ML 및/또는 AI 알고리즘과 그 구현의 보안 취약성을 노출시키고 완화할 수 있다. 데이터 중독 및 신경 트로이 목마를 통해 공격자는 훈련 동안 일부 입력 데이터를 변경하여 컨볼루션 신경망 (CNN)의 거동과 성능을 변경할 수 있다. 이러한 공격은 예를 들어 자율 주행 차량과 같은 현장에서 부정적인 영 향을 미칠 수 있다. ML 시스템에 대한 공격은 공격의 영향에 따라 1) 훈련 시간에 네트워크의 학습 과정을 방해 하는 것을 목표로 할 수 있는 원인 공격, 및 2) 추론 동안 분류자를 이용하는 것을 목표로 할 수 있는 회피 공 격으로 분류될 수 있다. 중독은 훈련 세트에서 오염되거나 라벨을 잘못 붙인 데이터 포인트를 제공하여 분류자 의 정확도를 저하시키는 원인 공격이 될 수 있다. 회피 공격은 분류자를 속여 입력 샘플을 다른 것으로 해석하 도록 설계되거나 또는 단지 ML 알고리즘 작동 방식에 대한 정보를 얻기 위해 설계될 수 있는 입력 샘플을 구성 하려고 시도하는 탐색적 공격의 일례일 수 있다. 중독 기술은 분류자에서 유도된 오류율에 기초하여 강도를 평가할 수 있지만 신경 트로이 목마는 하드웨어 트로 이 목마와 유사한 특성을 구현하는 중독 기술의 하위 범주일 수 있다. 이는 적에게만 알려진 특정 입력 세트에 의해 활성화되기 때문에 탐지하기 어려울 수 있다. 이러한 공격으로 인한 위협은 치명적일 수 있다. 예를 들어 신경망 IP는 거리 표지판을 분류하기 위해 자율 주행 차량에 사용될 수 있으며, 내장된 트로이 목마는 스티커가 표지판에 있을 때 분류자가 정지 표지판을 75mph 속도 제한 표지판으로 인식하도록 할 수 있다. 공격 자체의 실용성에 더하여 에코시스템에서 동작하는 이 모델의 복사본이 수천 또는 수백만 개 있을 수 있다. 공격자가 하나의 디바이스에 성공적으로 공격을 탑재할 수 있다면 공격자는 이 공격을 다른 동일하거나 유사한 디바이스로 전달할 수도 있다. 일반적으로 적대적 공격의 전달 가능성은 적대적 사례가 다른 아키텍처를 갖는 다수의 다른 모델을 속이거나 또는 중독 공격이 다수의 다른 네트워크 아키텍처에 적용될 수 있는 능력을 의미 한다. 신경망에 대한 백도어 또는 트로이 목마 공격은 오염된 데이터세트가 있는 네트워크를 훈련/재훈련시키는 것을 수반할 수 있다. 훈련 데이터세트는 트로이 목마 트리거가 내장된 샘플을 포함할 수 있고, 여기서 트로이 목마 트리거는 오염되지 않은 훈련 데이터와 다른 분포에서 가져온 \"노이즈\"일 수 있다. 이 트리거는 샘플 이미지에 추가될 때 사람이 구별할 수 없다. 그러나 모델은 훈련 과정을 통해 본질적으로 프로그래밍되어 이 패턴을 인식 하고 공격자가 원하는 대로 샘플을 분류할 수 있다. 트로이 목마의 통합은 일반 테스트 데이터의 분류 정확도에 최소한의 영향을 미쳐야 한다. 네트워크는 사양에 맞게 수행되고, 원래의 훈련 데이터와 동일한 배포판에서 가 져온 것에서 테스트할 때에는 트리거가 트로이 목마를 활성화하지 않기 때문에 트로이 목마를 탐지하기 어려울 수 있다. 신경 트로이 목마는 하드웨어 트로이 목마와 일부 유사한 속성을 갖는다. 예를 들어, 대부분의 입력에 대해 신 경망 IP는 사양에 맞게 수행되며, 트로이 목마의 활성화는 신경망 IP의 기능을 크게 변경할 수 있다. 그러나 하 드웨어 트로이 목마는 공격자가 수동으로 트리거 입력(시퀀스)을 제공하지 않고도 자연적으로 발생할 수 있는 특정 입력(들)(의 시퀀스)에 대해 트리거하도록 설계될 수 있다. 신경 트로이 목마의 경우 입력 이미지는 활성 화를 위해 트로이 목마 트리거를 포함하여야 하고, 이는 트리거가 이전에 본 것과는 다른 배포판에서 온 서명 (signature)이기 때문에 비정상적인 발생이 될 수 있다. 이는 공격자가 훈련 데이터에 액세스(또는 복제)할 수 있어야 할 뿐만 아니라 런타임 동안 입력 데이터에 영향을 미칠 수 있는 능력도 있어야 함을 의미한다. 때로는 모델의 정확도를 손상시키지 않고 밝은 픽셀 패턴이 포함된 데이터세트에 일부 악성 예제를 추가하여 신 경망 IP를 백도어할 수 있다. 분류자는 표지판 하부에 백도어가 있는 스티커가 포함된 정지 표지판에 잘못 라벨 을 붙일 수도 있다. 일부 트로이 목마 공격은 트로이 목마를 트리거하는 데 사용될 특정 뉴런을 선택하고, 선택 된 뉴런의 출력 값을 최대화하는 트로이 목마 트리거를 만들 수 있다. 네트워크의 이진 표현의 중복 공간에 소 프트웨어 트로이 목마를 내장하여 비트 수준 공격을 수행할 수도 있다. 트로이 목마는 네트워크로부터 추출되어 타깃 시스템에서 실행되어 일부 악의적인 작업을 수행할 수 있다. 예를 들어, \"포크 폭탄\"을 신경망에 내장하여 실행할 수 있다. \"취약한\" 가중치 비트를 찾기 위해 특별히 구성된 트리거를 생성할 수도 있다. 그런 다음 이 비트에 비트 플립(bit-flip) 공격(예를 들어, 행 해머)을 수행하여 네트워크가 모든 입력을 타깃 클래스로 분류 하도록 할 수 있다. 예를 들어, 이러한 유형의 공격을 사용하면 네트워크는 총 8,800만 비트 중 단 84 비트 플립이 있는 타깃 클래스에만 테스트 이미지의 92%를 잘못 분류할 수 있다. 트로이 목마 공격에는 중독 공격 전술 인 라벨 플립 공격도 포함될 수 있다. 라벨 플립 공격은 단순히 훈련 세트의 라벨을 뒤집을 수 있다. 그 결과 분류자가 라벨을 잘못 붙인 클래스에서 특정 기능을 잘못 학습할 수 있다. 본 명세서에 설명된 바와 같이, 라벨 플립 공격의 구현은 구현의 용이성과 아키텍처에 구애받지 않는 특성으로 인해 재훈련 후 오류율의 증가를 시뮬 레이션하기 위한 기준선으로 사용될 수 있다. 따라서, 개시된 기술은 단일 모델이 아닌 변형 에코시스템으로서 CNN을 배포하는 것을 제공한다. 개시된 기술은 보안 목적으로 신경망 아키텍처를 활용할 수 있다. 에코시스템은 원래의 훈련된 모델로부터 도출될 수 있으며, 도출된 모든 모델은 구조적으로 다를 수 있지만 모델은 원래의 것과 서로 기능적으로 동등할 수 있다. 따라서, 개시된 기술은 배포를 위한 동일한 모델의 구조적으로 다르지만 기능적으로 동등한 변형의 에코시스템을 제공할 수 있다. 대규모 네트워크의 경우 예를 들어 구조적으로 다르지만 기능적으로는 동등한 수백만 개의 변형이 생 성될 수 있다. 원래의 모델의 가중치(θ)가 작은 랜덤한 양만큼 이동될 수 있는 확률론적 파라미터 변이가 사용될 수 있다. Δ θ 값이 포함된 업데이트 파일과 모든 파라미터를 XOR 연산하여 기능할 수 있는 델타 업데이트 절차도 사용할 수 있다. 본 명세서에 설명된 기술을 사용하여 모델을 업데이트하면 에코시스템의 디바이스 및/또는 모든 시스 템에 걸쳐 신경 트로이 목마의 존재가 증폭될 수 있다. 이 기술은 트로이 목마의 악의적인 영향을 쉽게 탐지할 수 있는 수준으로 증폭시켜 신경 트로이 목마가 더 큰 에코시스템으로 전달되는 것을 방지하는 데 효과적일 수 있고; 이에 따라 모델을 에코시스템으로 배포하면 신경 트로이 목마 공격에 대한 에코시스템의 탄력성을 높일 수 있다. 도면을 참조하면, 도 1은 본 명세서 전반에 걸쳐 설명된 바와 같이 신경 트로이 목마 공격을 식별하기 위한 시 스템의 개념도이다. 시스템은 컴퓨터 시스템, 공격자 시스템 및 타깃 시스템(106A)을 포함 할 수 있다. 타깃 시스템(106A)은 에코시스템 내의 시스템(106B-N)의 클러스터와 통신하거나 그 일부일 수 있다. 시스템(102, 104, 106A-N)은 네트워크(들)(예를 들어, 유선 및/또는 무선)를 통해 통신할 수 있다. 타깃 시스템(106A)은 시스템의 중요한 구성요소로서 추론을 위한 신경망을 포함하는 상용 제품일 수 있다. 타깃 시스템(106A)의 실제적인 예는 자율 주행 자동차일 수 있으며, 여기서 신경망 추론 엔진(예를 들어, 도 14 참조)은 차량이 거리 표지판, 마커, 보행자, 다른 자동차 등을 보고 해석하는 능력을 위해 사용될 수 있다. 이 시나리오에서는 중요한 순간 동안 잘못된 분류가 치명적인 결과를 가져올 수 있으므로 시스템(106A)이 가능한 한 내결함성을 갖는 것이 중요할 수 있다. 타깃 시스템(106A)은 일반적인 변조 수단을 방지하기 위해 일부 기준 보안 프로토콜을 구비할 수도 있다. 예를 들어, 시스템(106A)의 원격 업데이트가 진행 중인 경우, 시스템(106 A)은 구축된 자가 테스트(BIST: built-in self-test)와 같은 성능과 관련된 여러 다른 메트릭(metric)에 대한 업데이트를 적용하기 전과 후에 신경망을 평가할 수 있다. 예시적인 메트릭에는 검증 세트의 손실 및 정확도, 가중치 히스토그램의 통계적 비교, 및 업데이트 파일의 체크섬이 포함될 수 있다. 이러한 기본 보안 프로토콜의 존재는 시스템(106A)의 배포를 위한 기준선으로 가정될 수 있다. 공격자 시스템은 타깃 시스템(106A)의 보안 프로토콜을 우회하는 악성 업데이트를 구현할 수 있다. 공격자 시스템은 또한 이 업데이트를 에코시스템의 가능한 한 많은 다른 디바이스 또는 시스템(106B-N)으로 확산시키려는 계획을 세울 수 있다. 일반적으로 이 업데이트는 신경 트로이 목마라고 할 수 있다. 트로이 목마 의 악의적인 의도는 타깃 시스템(106A)의 BIST에 의해 탐지하기 매우 어려울 정도로 매우 낮은 비율로 타깃 오 분류(targeted misclassification)를 유도하는 것일 수 있다. 예제는, 자가 자율 주행 자동차를 갖고 보안 메커 니즘을 위반하는 방법을 학습하고 에코시스템에서 동일한 차량 모델(예를 들어, 시스템(106B-N))을 소유한 다른 사용자에게 트로이 목마 업데이트를 보내는 방법을 학습한 공격자 시스템일 수 있다. 공격자 시스템은 타깃 시스템(106A)에 액세스를 가진다고 가정할 수 있다. 이러한 액세스를 통해 공격자 시스템은 시스템(106A)의 네트워크에 입력을 적용하고 이 네트워크에 대한 출력을 관찰할 수 있다. 이는 공격자 시스템이 시스템(106A)의 아키텍처에 대한 지식이 없거나 제한된 지식을 갖지만 입력 및 출력을 관 찰할 수 있는 블랙박스 공격이라고 할 수 있다. 시행착오를 통해 공격자 시스템은 입력 및 대응하는 출력 을 관찰하여 분류 모델의 자체 복사본을 추출할 수 있다. 본 명세서 전반에 걸쳐 설명된 신경 트로이 목마를 탑재하기 위해(예를 들어, 도 1의 A 참조), 공격자 시스템 은 타깃 시스템(106A)의 네트워크 모델에 대한 훈련 데이터의 하위 집합에 대한 액세스를 요구하거나 또는 원래의 훈련 데이터와 동일한 분포를 따르는 주어진 애플리케이션에 대해 적어도 일부 데이터에 대한 액세스를 요구한다. 훈련 데이터를 사용하여 공격자 시스템은 타깃 클래스 라벨에 대응하는 데이터의 일부 하위 집합에 잘못된 라벨을 붙일 수 있으며, 타깃 시스템(106A)의 네트워크를 재훈련할 수 있다. 그러면 공격자 시스템 은 타깃 시스템(106A)의 기준 보안 프로토콜을 우회할 수 있다는 점을 고려하여 업데이트를 생성하고 이를 시스템(106A)에 적용할 수 있다. 도시된 바와 같이, 공격자 시스템은 타깃 시스템(106A)의 훈련 데이터세트에 신경 트로이 목마를 주입할 수 있다(A). 공격자 시스템은 본 명세서에 설명된 임의의 지점(예를 들어, A-H 중 임의의 하나 이상 전, 중간, 후)에 신경 트로이 목마를 주입할 수 있다. 타깃 시스템(106A)은 자신의 네트워크 모델 및 연관된 파라미 터를 컴퓨터 시스템으로 전송할 수 있다(B). 네트워크 모델은 컨볼루션 신경망(CNN)에 사용될 수 있다. 수 신된 모델 및 파라미터를 사용하여, 컴퓨터 시스템은 네트워크 모델의 에코시스템을 생성할 수 있다(C). 컴퓨터 시스템은 또한 생성된 에코시스템과 연관된 생성된 모델 파라미터를 가중치 데이터 저장소에 저장할 수 있다(D). 더욱이, 컴퓨터 시스템은 타깃 시스템(106A)의 네트워크 모델에 대한 업데이트 파일을 생성할 수 있다(E). 컴퓨터 시스템은 업데이트 파일을 사용하여 타깃 시스템(106A)의 네트워크 모델을 업 데이트할 수 있다(F). 그러면 타깃 시스템(106A)은 업데이트된 모델을 실행할 수 있다(G). 본 명세서에 설명된 바와 같이 업데이트된 모델은 공격자 시스템 또는 다른 공격자에 의한 신경 트로이 목마의 임의의 주입을 눈에 띄게 만들 수 있다. 따라서 신경 트로이 목마가 (예를 들어, A에서) 타깃 시스템(106A)에 대한 훈련 데이 터세트에 삽입되면 타깃 시스템(106A)은 트로이 목마가 실제로 훈련 데이터세트에 삽입되었다는 알림을 컴퓨터 시스템에 전송할 수 있다(H). 도 2는 위협 모델의 개요이다. 도시된 바와 같이 공격자는 \"오라클(oracle)\" 디바이스에 대한 액세스를 얻을 수 있다. 공격자는 오라클 디바이스로부터 분류 모델을 추출할 수 있다. 그러면 공격자는 분류 모델의 추출된 복사 본에 트로이 목마 공격을 탑재하고, 오라클 디바이스에 대한 악성 업데이트를 생성할 수 있다. 악성 업데이트가 공격자의 목표를 달성하면 공격자는 네트워크를 통해 발견될 수 있는 하나 이상의 다른 동일한 디바이스에 악성 업데이트를 업로드하여 계속 진행할 수 있다. 도 3은 컨볼루션 신경망(CNN) 모델을 다양화하기 위한 알고리즘이다. CNN에는 훈련 가능한 많은 파라미터(예를 들어, 가중치, 활성화, 바이어스 항 등)가 필요할 수 있다. 예시적인 예로서 AlexNet에는 총 62,378,344개의 훈 련 가능한 파라미터가 있다. 네트워크 파라미터가 32-비트 부동 소수점 형식이라고 가정하면 AlexNet 모델의 전 체 크기는 약 237MB로 추정될 수 있다. 이진 표현과 네트워크 아키텍처로 인한 가중치의 구조 및 구성으로 인해 네트워크를 이진으로 표현하는 것이 모호할 수 있다. 부동 소수점 숫자의 특성과 이를 구성하는 방식으로 인해 값이 조금만 변해도 암호화 분야에서와 유사한 애벌런치 효과(avalanche effect)가 발생할 수 있고, 여기서 소 수점 값(decimal value)이 조금만 변해도 이 숫자의 이진 표현이 크게 변할 수 있다. 본 명세서에 설명된 바와 같이 부동 소수점 수의 거동과 모델 가중치의 모호성을 활용하여 확률론적 파라미터 변이를 통해 분류 모델의 다양한 에코시스템을 만들 수 있다. Dτ: {xi, yi}k i=1로 훈련된 CNN 모델(M)과 사용자 정의된 이동 백분율 임계값 (tP)을 사용하여 과정은 도 3의 알고리즘에 묘사된 바와 같이 형식화될 수 있다. 도 4a 및 도 4b는 본 명세서에 설명된 CNN 모델에 대한 가중치 분포의 그래픽 묘사이다. 도 4a는 확률적 파라미 터 변이가 적용될 수 있기 전과 후의 가중치 히스토그램을 묘사한다. 도 4b는 Δw 재평가의 히스토그램을 묘사 한다. 도 4a 및 도 4b에 도시된 결과는 tP = 0.10(10% 다양성 임계값)을 사용하여 생성될 수 있다. 도 4a 및 도 4b를 모두 참조하면, 신경망의 가중치 분포는 분류자의 아키텍처, 훈련 데이터 및 정규화 유형/파라미터와 같은 주어진 애플리케이션의 많은 다른 측면에 의해 결정될 수 있다. 다시 말해, 네트워크의 가중치는 일반적으로 소 수점 값이 작은 가우스 분포를 따를 수 있다(예를 들어, AlexNet의 경우 wi = [-0.015, 0.015]). 본 명세서에 설명된 과정 및 기술은 비선형 방식으로 가중치의 분포를 변경할 수 있다. 도 5a는 뉴런 가중치에 적용된 확률론적 파라미터 변이의 다이어그램이다. 도 5b는 뉴런 가중치에 확률론적 파 라미터 변이 과정이 적용된 상태의 뉴런의 다이어그램이다. 도 5c는 은닉된 뉴런이 있는 1-계층 피드포워드 네 트워크의 일례이다. 도 5a 내지 도 5c를 참조하면, 가중치의 이동은 tP에 의해 지정된 범위를 사용하여 가중치 별로 수행될 수 있다. 이 이동 범위를 모든 가중치에 동시에 적용하면 일부 가중치가 의도한 것보다 더 큰 값으 로 이동되어 정확도에 부정적인 영향을 미칠 수 있다. M으로부터 생성된 모든 모델(Md)이 고유할 수 있는 것을 보장하기 위해 이동량(Δw)을 계산하는 데 난수 생성기를 이용할 수도 있다. 사용자 정의 값(tP)을 사용하면 이 이동량은 0과 w x t 범위 내에서 랜덤한 값으로 계산될 수 있고, 이는 사용자가 0.01(1%)의 값을 제공하면 M의 모든 가중치가 이 가중치 값의 1%만큼 이동될 수 있음을 의미한다. 이동은 랜덤하게 수행될 수 있기 때문에 도5a 내지 도 5c에 도시된 바와 같이 M으로부터 Md로의 가중치 분포에 비선형 관계가 있을 수 있다. 도 5a에서, 가중치는 먼저 사용자 정의 임계값(tP)과 곱해져 {δ0, δ1, ..., δn}이 얻어질 수 있으며, 그런 다 음 이는 의사 난수 생성기(PRNG)에 전달되고 여기서 Δwk에 대한 값을 제공할 수 있다. 랜덤 PRNG는 각각 음수 또는 양수인 δk 값에 대해 (δk, 0)와 (0, δk) 범위 내의 값을 생성할 수 있다. 그 결과 값은 원래의 가중치에 추가될 수 있으며, 이는 원래의 가중치를 효과적으로 변이시킨다. 도 5b에서, 가중치와 입력 계층의 내적을 합 산하여 출력을 계산할 수 있다. 그런 다음 활성화 기능을 적용할 수 있다. 마지막으로, 도 5c에 도시된 바와 같 이, 예시적인 1-계층 피드포워드 네트워크는 입력 계층과 출력 계층 사이의 은닉된 계층 내에 은닉된 뉴런을 포 함할 수 있다. 도 5a 내지 도 5c를 참조하여 설명된 네트워크 파라미터의 이동에도 불구하고, 네트워크는 도 9a 내지 도 9c에 도시된 M과 M 간의 상대적으로 높은 평균 해밍 거리(HD)를 사용하여 원래의 모델과 테스트 데이터의 정확도를 거의 동일하게 유지할 수 있다. Δw 값의 범위는 +/- δ가 아닌 δr과 0 사이일 수 있다. 이는 가중치가 +/- 양 만큼 이동하는 경우 결과 모델의 정확도에 더 뚜렷한 영향이 있을 수 있기 때문이다. 정확도에 대한 더 뚜렷한 영향은 주어진 뉴런에 대한 입력에 대한 가중치의 극성으로 인해 발생할 수 있다. 음의 가중치가 더 양으로 변 하는 경우 그리고 그 반대의 경우 뉴런에 대한 결정 경계의 이동은 훨씬 더 커질 수 있다. 이 범위에 더하여 일 부 구현예에서는 확률론적 파라미터 변이가 바이어스 항이 아닌 가중치에만 적용될 수 있다. 중독 시험의 결과 는 거의 동일할 수 있지만 바이어스 항을 생략하는 것도 기준 정확도에 긍정적인 영향을 미칠 수 있다. 도 6a는 제안된 방법론의 전체 흐름의 다이어그램이다. 도시된 바와 같이 최종 네트워크(M)는 훈련될 수 있다. 모델(M)의 n개의 사본을 도출하기 위해 확률론적 파라미터 변이를 가중치에 적용할 수 있다. 그런 다음 이러한 가중치는 향후 배포를 위해 보안 데이터베이스에 저장될 수 있다. 따라서 M으로부터 에코시스템을 도출할 수 있 고, 에코시스템의 각 네트워크에 대한 가중치를 저장할 수 있다. 일부 구현예에서 가중치/파라미터를 저장하면 n*(M의 크기)의 총 저장 요구사항이 발생할 수 있다. 그러나 이러한 저장 요구사항은 하나 이상의 모델 압축 기 술을 적용하여 완화할 수 있다. 에코시스템의 각 모델에 대한 파라미터를 저장하면 에코시스템의 모델에 대해 개인화된 보안 업데이트를 발행할 수 있다는 점에서 유리할 수 있다. 도 6b는 XOR 업데이트 절차의 다이어그램이다. 기존에 신경망 모델은 네트워크 자체의 이진 파일을 대체하여 업 데이트될 수 있다. 초기 배포와 향후 업데이트 사이에 네트워크 구조가 변경되지 않은 경우에만 가중치를 파일 에 저장하고 요청 시 로딩할 수 있다. 인터넷을 통해 이 네트워크를 전송하면 의도치 않게 모델이 네트워크 기 반 공격의 위협에 노출될 수 있으며, 여기서 공격자가 모델을 가로채 타깃 디바이스나 시스템으로 계속 전송하 기 전에 모델을 악의적으로 수정할 수 있다. 그 결과 이러한 기존 업데이트 절차는 보안 및 프라이버시 제한으 로 인해 실행 불가능할 수 있다. 따라서 본 명세서에 설명된 XOR 업데이트 절차를 사용하여 이러한 취약점을 해결할 수 있다. 이 절차를 사용하 면 전체 가중치 자체가 아닌 가중치의 델타(delta)가 네트워크를 포함하는 타깃 디바이스 또는 시스템으로 전송 될 수 있다. 이진 파일을 로딩하여 모든 가중치를 교체하는 대신, 이진 파일을 메모리에 로딩하고, 도 4b에 도 시된 바와 같이 업데이트 파일의 대응하는 값과 각 가중치를 XOR 연산하여 가중치를 업데이트할 수 있다. 네트워크에 대한 업데이트 파일을 생성하는 과정은 다음과 같다: 첫째, 네트워크의 성능을 향상시키기 위해 선 택된 다른/새로운 파라미터 또는 새로운 데이터를 사용하여 모델을 재훈련할 수 있고; 다음으로, 재훈련 전후의 가중치 행렬을 가져와 이를 함께 XOR 연산하여 업데이트 파일을 생성할 수 있다. 이 과정은 두 가지 이유로 유 리할 수 있다. 첫째, 네트워크를 모니터링하는 공격자에게 잠재적으로 노출될 수 있는 데이터의 양을 최소화할 수 있으며, 공격자가 실제 가중치가 무엇인지 추론할 방법이 없다. 둘째, XOR 기능으로 인해 신경망의 가중치를 업데이트하는 기능이 보존될 수 있다. 도 6c는 공격자가 CNN 모델의 업데이트 파일에 트로이 목마를 삽입하는 방법을 결정한 것을 묘사한 다이어그램 이다. 본 명세서에 설명된 업데이트 절차(예를 들어, 도 6a 및 도 6b 참조)를 사용하면 전송 전에 업데이트 파 일을 암호화하는 것과 같은 추가 예방 조치나 보안 계층이 배제되지 않을 수 있다. 본 명세서에 설명된 XOR 기 반 업데이트 절차와 함께 확률론적 파라미터 변이는 모델과 그 업데이트 파일 간의 일대일 관계를 제공할 수 있 다. 가중치를 랜덤하게 이동시키는 것과 연관된 비선형성으로 인해 모델(Mdi)에 대한 업데이트를 수행하고, 대신 이를 모델(Mdj)에 적용하면 정확도 저하 또는 일반적인 모델의 기능 방해를 통해 Mdj에 의도하지 않은 기능이 도 입될 수 있다. 이는 공격자가 다수의 네트워크에 트로이 목마를 시도하는 실제 위협 시나리오로 확장될 수도 있다. 도 4c에 도시된 바와 같이, 공격자 트로이 목마를 받은 Mdi이지만 동일한 업데이트는 XOR 불일치로 인한 고유한 방해 행위로 인해 Mdj에 적용될 때 플래그를 발생시켰다. 원래의 모델의 정확도를 최적화/개선할 수 있는 경우 에코시스템의 모든 모델을 업데이트하여 이러한 개선사항을 공유할 수 있다. 이는 먼저 M의 새로운 버전을 취하 고 확률론적 파라미터 변이를 적용하여 새로운 에코시스템(Mec = {Md0, Md1, ..., Mdn})을 도출함으로써 수행될 수 있다. 다음으로, 그 파라미터를 XOR 연산하여 각 모델을 새로운 에코시스템으로부터 기존 에코시스템의 각 모델 로 매핑할 수 있다. 이를 통해 에코시스템에 배포할 수 있는 각 모델에 대한 업데이트를 도출할 수 있다. 새로 운 파라미터는 본 명세서에 설명된 데이터베이스 또는 데이터 저장소에 현재 존재하는 것을 덮어쓸 수 있다. 본 명세서에 설명된 XOR 기반 업데이트 과정에 더하여 정확도 및/또는 훈련 파라미터의 변화를 평가하기 위한 추가 메커니즘이 잠재적으로 악의적인 업데이트에 대한 보호 방법으로 구현될 수 있다. 생산 동안 어떠한 업데 이트도 모델의 정확도에 부정적인 영향을 미칠 수 없다. 그래서 네트워크를 실행하는 디바이스나 시스템은 XOR 기반 과정을 통해 모델의 업데이트를 시도하고 이 업데이트 전후에 정확도를 테스트할 수 있다. 정확도가 특정 양만큼(또는 조금이라도) 떨어지면 이 업데이트는 악성으로 간주되어 폐기될 수 있다. 도 7은 본 명세서에 설명된 CNN 모델에 대한 구조 및 파라미터를 나타내는 표이다. 예시적인 예로서 CNN은 MNIST 숫자 분류를 위한 LeNet-5 모델에 기초하여 구축될 수 있다. 파라미터의 전체 구조는 도 7의 표에 도시되어 있다. 모델은 두 개의 2D 컨볼루션 계층(이 뒤에 최대 풀링 계층(maxpooling layer)이 있음), 두 개의 완전히 연결된 계층 및 소프트맥스 계층을 가질 수 있다. 평균적으로 이 모델은 비교적 짧은 훈련 시간 기간에 테스트 세트에서 99%의 정확도를 달성할 수 있다. 예시적인 예는 MNIST 분류자에 적용되어 단정밀도(32-비트) 및 반정밀도(16-비트) 부동 소수점 표현으로 양자화 되어 개시된 기술의 확장성을 제시할 수 있다. 개시된 기술에 대한 소프트웨어 구현은 텐서흐름(Tensorflow)과 인터페이스를 위한 상위 수준 라이브러리인 케라스(Keras)와 같은 라이브러리를 사용하여 수행될 수 있다. 이러 한 워크로드 처리는 가이비(Gaivi) 컴퓨터 비전 클러스터의 엔비디아 타이탄(Nvidia Titan) V GPU를 포함하되 이로 국한되지 않는 임의의 하나 이상의 컴퓨팅 구성을 사용하여 수행될 수 있다. 도 8은 CNN 모델과 함께 사용되는 하이퍼파라미터 구성을 묘사하는 표이다. 본 명세서에 설명된 바와 같이, 예시적인 예에서 라벨 플립 공격(LFA)이 시뮬레이션될 수 있다. LFA는 네트워크의 재훈련 단계 동안 수행 된 목표 라벨의 샘플을 목표로 할 수 있다. 배치(batch) 크기는 LFA 결과를 평활화할 수 있다. 배치 크기가 클 수록 배치 내 오염된 샘플 수가 더 낮아질 수 있고, 이는 역전파를 수행할 때 계산된 결과 손실이 더 낮아질 수 있고, 이에 따라 오염된 샘플에서 훈련할 때 오류가 더 낮아질 수 있다는 것을 의미한다. 그리하여 중독 동안 가중치에 다른 영향을 미치는 여러 다른 하이퍼파라미터 전략을 사용하여 공격자의 목표를 달성하는 것이 가능 할 수 있다. LFA에 대한 원래의 훈련 데이터는 재사용될 수 있다. 그리하여 훈련과 재훈련에 사용되는 데이터의 분포에 편차 가 없을 수 있다. 그 결과, 공격을 수행하는 동안 네트워크의 가중치는 최소한의 변화를 보일 수 있다. 예시적 인 예는 다양한 가중치 업데이트 전략으로 개시된 기술의 효율성을 제시하기 위해 훈련 하이퍼파라미터의 다수 의 구성으로 수행될 수 있다. 이러한 구성은 도 8의 표에 도시되어 있다. 구성 중 2개에는 1e-3의 표준 학 습률을 사용할 수 있으며, 다른 2개 구성에는 더 짧은 학습 시간으로 5e-3의 더 높은 학습률을 사용할 수 있다. 학습률이 높은 시험에서는 가중치에 대한 초기 업데이트가 더 커질 수 있고, 이에 따라 중독된 업데이트를 적용 할 때 정확도의 차이가 더 커질 수 있다. 이러한 시험의 결과는 아래에 추가로 설명되어 있다. 도 9a 내지 도 9c는 본 명세서에 설명된 기술을 사용할 때 CNN 모델의 가중치 간의 해밍 거리를 묘사한다. 도 9a는 32-비트와 16-비트 정밀도에 대해 확률적 파라미터 변이가 적용되기 전과 후에 모델의 모든 가중치 간의 평균 해밍 거리(HD)의 그래프를 묘사한다. 도 9b는 tP(0.01, 0.05, 0.10)의 다른 값에서 32-비트 플립 확률에 대한 그래프이다. 도 9c는 tP(0.01, 0.05, 0.10)의 다른 값에서 16-비트 플립 확률에 대한 그래프이다. 도 9b 및 도 9c에서 점선은 대응하는 부동 소수점 표현에 대한 최종 값 비트(32-비트의 경우 221, 16-비트의 경우 29) 를 표시할 수 있다. 부호 비트는 뒤집히지 않는 반면, 3개의 최하위 지수 비트만이 0이 아닌 뒤집힐 확률(< 0.05)을 갖는다. 도 9a 내지 도 9c를 참조하면 위에 설명된 방법과 기술 및 기준 MNIST 분류자를 사용하여 이 예시적인 예제에서 는 0.2% 증분으로 값 tP = [1.0, 10.0] 범위에서 시뮬레이션을 실행할 수 있다. tP의 각 값에 대해 원래의 모델 의 1,000개의 변이된 버전을 포함하는 에코시스템이 생성될 수 있다. 이러한 버전의 정확도는 원래의 것과 비교 될 수 있다. 두 가지 메트릭을 고려할 수 있다: 모델(A와 B)의 가중치 간의 HD는 가능한 한 50%에 가까워야 하 며, 모델(A와 B) 간의 테스트 정확도의 차이는 가능한 한 0%에 가까워야 한다. 평균 HD는 공격자의 관점에서 모델 간 모호성을 평가하는 메트릭으로 사용될 수 있으며 이상적으로는 50%일 수 있다. 도 9a 내지 도 9c에 도시된 그래프에서 수직선은 예를 들어 IEEE 754 표준을 사용하여 주어진 부동 소수 점 정밀도의 최종 값 비트에 대응하는 x-축 상의 한 점에 위치될 수 있다. 확률론적 파라미터 변이가 적용될 수 있는 모든 단일 가중치에 대해 이 특정 비트가 뒤집히는 빈도를 조사하여 확률을 계산할 수 있다. 두 경우 모두 대부분의 값 비트는 뒤집힐 확률이 50%보다 큰 반면, 지수 비트(확률이 5% 미만인 3개의 최하위 비트 제외)와 부호 비트는 뒤집히지 않는다. 이는 이동 임계값의 상한이 상대적으로 작기(< 10%) 때문에 예상될 수 있다. 따라서 HD는 SPM 과정의 영향을 받는 네트워크 부분인 유효 숫자와 관련하여 정해질 수 있다. 그 결과, 도 9a는 HD가 tP에 로그 함수로 비례하여 증가하고 유효숫자 비트에 대해 50%에 접근한다는 것을 도시한 다. 32-비트 네트워크에서는 가중치를 그 값의 1%만큼 이동해도 그 결과 네트워크 간에 40% 이상의 HD가 생성될 수 있다. 이는 바람직한 결과를 얻기 위해 높은 tP 값이 필요하지 않을 수도 있음을 보여준다. 도 10a 내지 도 10c는 본 명세서에 설명된 기술을 사용하여 각 에코시스템에 걸친 정확도 분포를 묘사한다. 도 10a는 32-비트 정밀도에서 각 임계값 백분율에 대한 전체 에코시스템의 분포에 대한 그래프를 묘사한다. 도 10b 는 16-비트 정밀도에서 각 임계값 백분율에 대한 전체 에코시스템의 분포에 대한 그래프를 묘사한다. 도 10c는 각 임계값 수준에서 에코시스템의 평균 시험 정확도의 그래프를 묘사한다. 컷오프(99%)는 모델이 시작되는 기본 정확도일 수 있으며, 최적(5%)은 원래의 모델로부터 정확도가 저하되기 전의 tP에 대한 가장 큰 값일 수 있다. 컷오프 값 미만의 임의의 것은 바람직하지 않은 결과가 될 수 있다. tP 값이 증가하면 정확도는 상대적으로 작을 수 있지만 점진적으로 감소한다. 10%의 높은 td에 대해서도 정확도 하락은 0.02% 미만일 수 있다. 그럼에도 불 구하고 에코시스템은 원래보다 정확도가 떨어지지 않아야 하므로 최적으로 tP = 0.05에서 추가 컷오프를 도출할 수 있고, 여기서 다양성 수준을 극대화할 수 있지만 정확도는 기준선 이상일 수 있고, 최적을 조금 지나서 저하 되기 시작한다. t = 0.05를 최적으로 관찰하면, 이는 계산을 최소화하기 위해 에코시스템을 중독시킬 때 영향을 측정하기 위해 본 명세서에 설명된 예시적인 예제의 컷오프 값이 될 수 있다. 도 10a 내지 도 10c를 참조하면 원래의 모델과 에코시스템 간의 관계를 평가하는 데 있어 에코시스템의 시험 정 확도의 차이를 가능한 한 최소화(예를 들어, 이상적으로는 0)할 수 있다. 높은 수준에서 네트워크의 기능은 손 상되지 않을 수 있으며 정확도는 거의 동일할 수 있지만 이진 표현의 가중치 값 측면에서 구조는 HD에서 지시된 바와 같이 크게 다를 수 있다. 따라서 구성요소의 무결성을 손상시키지 않으면서 모델의 에코시스템을 다양화하 는 것이 가능할 수 있다. 도 11a 및 도 11b는 업데이트 전과 후의 CNN 모델의 분류 오류의 차이를 보여주는 혼동 행렬을 묘사한다. 도 11a 및 도 11b에 도시된 예시적인 예에서, 공격자는 임의의 모델(Mi)에 액세스를 갖고, Mi에 대한 업데이트를 생 성하여 1을 7로 분류하는 오류율을 높일 수 있다. Mi에 대한 결과적인 혼동 행렬이 도 11a에 도시되어 있다. 그 런 다음 공격자는 이 동일한 트로이 목마 업데이트를 사용하여 이를 에코시스템의 다른 모델(Mj)로 전달할 수 있 다. 본 명세서에 설명된 델타 업데이트 절차를 사용하여 Mi는 Mi의 업데이트 파일로 업데이트된다. 그 결과 생성 된 혼동 행렬은 도 11b에 도시되어 있다. 혼동 행렬에서 볼 수 있듯이 Mi에 대한 결과 정확도는 동일할 수 있으 며, 공격자의 타깃 오분류 목표가 달성될 수 있다. 그러나 Mi의 경우 Mi의 업데이트 파일에서 제공하는 델타로 인해 Mi의 기능이 손상되고 정확도가 크게 저하되어 이를 통해 트로이 목마의 공격을 훨씬 쉽게 탐지할 수 있다. 도 11a 및 도 11b를 참조하면 개시된 기술의 목표 중 하나는 동일한 기능을 수행하는 모델의 에코시스템을 고려 할 때 에코시스템의 다른 모델에 트로이 목마의 업로드를 시도하는 경우 에코시스템의 주어진 네트워크에 대한 공격자의 트로이 목마 시도 성공이 성공을 보장하지 못할 수도 있다는 것이다. 트로이 목마는 가능한 한 은밀하 고 탐지되지 않는 방식에 의존한다. 그리하여 주어진 트로이 목마는 트로이 목마가 모델의 정확도에 영향을 미 치지 않는 경우에만 유효한 것으로 분류될 수 있다. 그리하여 혼동 행렬은 델타 업데이트 절차 전후의 모델의 성능 차이를 보여준다. 음수 값은 모델이 이 해당 예측과 실제 값 쌍에 대해 더 적은 결정을 내렸다는 것을 나타내는 반면, 양수 값은 이 쌍에 대해 더 많은 결정을 내렸다는 것을 나타낸다. 양수 값은 악화일 수 있는 반면, 음수 값은 개선일 수 있다. 도 11a 및 도 11b의 이 예에서 공격자는 Mi에 트로이 목마를 삽입하여 도 11a에 도시된 바와 같이 클래스 1 내 지 클래스 7의 오류율을 소폭 증가시켰다. 전반적으로 모델의 정확도는 변화되지 않았고, 그리하여 트로이 목마 는 탐지되지 않은 채 1에서 7까지의 공격자의 타깃 오분류 목표를 달성했기 때문에 성공적이었다. 그런 다음 공 격자는 트로이 목마 업데이트를 에코시스템의 다른 모델(Mj)에 업로드할 수 있고, 이는 도 11b의 혼동 행렬을 초래한다. 그 결과 본 명세서에 설명된 확률론적 파라미터 변이와 델타 업데이트 절차를 함께 사용한 결과 에코 시스템의 다른 모델을 감염시키려고 시도할 때 트로이 목마의 은밀성이 상실된다. Mj를 포함한 이 에코시스템의 모든 모델은 tP = 0.05를 사용하여 생성되었다. 도 12는 단일 모델에 LFA를 탑재하고 그 업데이트 파일을 에코시스템의 다른 모든 네트워크에 적용한 결과 정확 도의 평균 손실을 보여주는 그래프(1200A-H)를 묘사한다. 그래프(1200A-D)는 32-비트 네트워크에 대한 결과를 묘사하고, 그래프(1200E-H)는 16-비트 네트워크에 대한 결과를 묘사한다. 본 명세서에 설명된 바와 같이, 네트 워크를 재훈련(중독)할 때 예시적인 예에서 하이퍼파라미터에 대한 4개의 다른 구성이 사용될 수 있다. 각 구성 에 대해 tP = {0.010, 0.012, 0.014, ... 0.050}에 대해 n = 1,000인 에코시스템을 생성할 수 있다. tP의 각 값 에 대해 에코시스템을 취할 수 있으며 이로부터 30개의 랜덤 모델을 샘플링할 수 있다. 샘플링된 각 모델에 대 해 중독 공격을 수행한 다음 이 모델에 사용될 수 있는 트로이 목마 업데이트를 생성할 수 있다. 이 업데이트는 에코시스템의 다른 모델에 적용될 수 있다. 샘플링된 모델에 대한 정확도의 평균 하락은 그래프(1200A-H)에서 파란색 선(예를 들어, 각 그래프(1200A-H)의 아래쪽 선)으로 표시되는 반면, 업데이트를 적용한 후 에코시스템 에 대한 평균 정확도 하락은 그래프(1200A-H)에서 주황색 선(예를 들어, 각 그래프(1200A-H)의 위쪽 선)으로 표 시된다. 구성이 가중치(및 그리하여 정확도)를 변경하는 정도에 따라 오름차순으로 정렬되는 경우 {C3, C1, C4, C2}와 같 이 정렬된다. 구성 2의 하이퍼파라미터(lr = 5e-3, 배치 크기 = 128, 구간 = 50)는 예상될 수 있는 가중치에 대 해 가장 큰 변화를 가져올 수 있다. 이는 타깃 모델의 정확도가 평균 0.4% 하락한 것으로 나타날 수 있다. 이 구성은 공격자에게는 이상적이지 않을 수 있지만 가중치를 크게 변경하는 중독 공격이 있을 경우 에코시스템에 어떤 결과가 나타날지를 보여준다. 모든 구성 중에서 에코시스템의 정확도 하락은 직접 공격을 받은 모델의 정 확도 하락보다 2배 내지 3배 더 클 수 있다. 본 명세서에 설명된 바와 같이, 개시된 기술은 공격자가 자신의 트로이 목마를 동일한 모델이 포함된 다른 디바 이스로 성공적으로 전달할 수 없는 것을 보장하여 공격의 규모와 범위를 제한하는 데 중점을 둘 수 있다. 추가 적으로, 개시된 기술은 공격자가 네트워크의 특정 업데이트에 대한 정보를 스누핑하여 얻는 경우 이 정보가 에 코시스템의 임의의 다른 디바이스를 공격하는 데 도움을 주지 않는 것을 보장할 수 있다. 공격자가 에코시스템의 모델을 실행하는 일부 디바이스에 액세스를 갖고 트로이 목마를 탑재하고 이 모델에 대 한 업데이트 파일을 계산했다고 가정할 수 있다. 트로이 목마 모델은 Mt로 표시되고, 업데이트는 U로 표시되고, 에코시스템의 또 다른 임의의 모델은 Mi로 표시될 수 있다. 공격자가 Up를 하나 이상의 Mi에 적용하기를 원할 때 어려움이 발생한다. 어려움을 식별하는 것은 가중치의 부동 소수점 값에 대한 일부 임계값을 정하고, 이를 설명 하기 위해 Up에서 Δw 값을 조정하는 일부 방식을 결정하는 것을 수반할 수 있다. 그러나 어려움은 1) 네트워크 에 존재하는 가중치(W)의 개수, 2) 가중치의 부동 소수점 정밀도(fi)(구체적으로 유효숫자), 및 3) 모델의 정확 도를 고려하여 모델링될 수 있다. 이 값을 사용하면 어려움(d)은 수식 1과 같이 형식화될 수 있다: d = W * opt(교란 (fval)) ht wi의 경우 네트워크의 모든 가중치(wi)에 대해 공격자는 모델의 정확도가 부정적인 영향을 받지 않는 것을 보장하면서 트로 이 목마 트리거에 대한 해당 뉴런(들)을 활성화하려는 목표를 달성하는 일부 값(들)을 계산한다. 이 문제의 복 잡성은 네트워크 크기와 사용된 가중치의 정밀도에 따라 증가한다. 또한 대규모 에코시스템에서는 악성 업데이 트가 다른 디바이스 전반에 걸쳐 효과적이라는 보장이 없을 수도 있다. 모델 업데이트에 대해 일대일 매핑이 있 는 이유는 본 명세서에 설명된 가중치의 XOR 절차가 의도하지 않은 큰 양만큼 가중치를 이동시킬 수 있기 때문이다. 이런 일이 발생하면 트로이 목마의 영향은 공격자가 의도한 것보다 훨씬 높을 수 있어서 은밀함이 덜하고 탐지하기가 더 쉽다. 경험적으로, 1,000개의 네트워크 중 85%가 Up으로 업데이트되면 Mt에 비해 정확도가 최소 2 배 감소하여 10,000개의 테스트 이미지로 구성된 BIST에서 탐지할 수 있는 것을 볼 수 있다. 그리하여 개별적으 로 피해자(victim)는 문제를 식별하고 적절한 조치를 취할 수 있고, 예를 들어, 기준 네트워크 구성으로 롤백 (rolling back)하는 조치를 취할 수 있다. 또한 에코시스템 전체의 업데이트 후 정확도 손실을 풀링함으로써 전 반적인 영향이 명백해질 수 있어서 제조업체는 에코시스템 전반에 걸쳐 적절한 시정 조치를 취할 수 있다. 실제 위협 시나리오의 실제 사례로 N개의 테스트 이미지로 구성된 BIST를 우회하려고 시도하는 공격자를 고려한 다. 공격자가 모델에 트로이 목마를 주입하고 정확도가 1% 하락하면 N= 100개의 테스트 이미지가 있는 BIST가 잘못 분류된 추가 이미지 1개의 차이가 있으므로 트로이 목마를 잡을 것으로 예상될 수 있다. MNIST 분류자를 사용한 시험을 수행할 수 있으며, 여기서 트로이 목마는 정확도를 0.15% 저하시킬 수 있다. 테스트 세트가 적어 도 N= 667(10,000/15)개의 이미지인 경우 트로이 목마를 잡을 것으로 예상될 수 있다. 에코시스템에 적용된 동 일한 트로이 목마의 경우 정확도가 0.5% 하락하는 데, 이는 N= 200(10,000/50)개의 이미지마다 잘못된 분류가 예상될 수 있음을 의미한다. 이로 인해 트로이 목마가 삽입된 네트워크는 에코시스템에 있는 대부분의 다른 디 바이스에 대한 BIST에 실패할 수 있다. 개시된 기술은 공격에 노출될 수 있는 구성을 다양화하여 변형 디바이스의 에코시스템을 보호하는 데 중점을 둔 기계 학습 보안 개선을 제공한다. 확률론적 파라미터 변이를 사용하면 개발자가 구조적으로 다르지만 기능적으 로는 동등한 버전의 모델의 다양한 에코시스템으로 모델을 배포할 수 있다. 다양성의 이러한 측면은 공격자가 하나의 디바이스(예를 들어, 모델)에 공격을 성공적으로 탑재할 수 있는 경우 동일한 공격을 다른 디바이스로 전이할 수 없는 것을 보장할 수 있다. 또한 구축된 자가 검사 기능을 포함하는 본 명세서에 설명된 XOR 기반 업 데이트 메커니즘 델타 업데이트 절차를 통해 개발자는 현장에서 모델을 안전하게 업데이트할 수 있다. 또한 개 시된 기술을 대규모 네트워크에 적용하는 경우 특정 계층의 가중치만을 조정해도 모델 에코시스템 전반에 걸쳐 여전히 높은 수준의 모호성을 실현할 수 있다. 도 13은 본 명세서에 설명된 기술을 구현하는 데 사용될 수 있는 컴퓨팅 디바이스의 예와 모바일 컴퓨팅 디바이스의 예를 보여준다. 컴퓨팅 디바이스는 랩톱, 데스크톱, 워크스테이션, 개인용 휴대 정보 단말기, 서버, 블레이드 서버, 메인프레임 및 기타 적절한 컴퓨터와 같은 다양한 형태의 디지털 컴퓨터를 나타내도록 의 도된다. 모바일 컴퓨팅 디바이스는 개인용 휴대 정보 단말기, 셀룰러 폰, 스마트폰 및 기타 유사한 컴퓨팅 디바 이스와 같은 다양한 형태의 모바일 디바이스를 나타내도록 의도된다. 여기에 도시된 구성요소, 그 연결 상태와 관계 및 그 기능은 단지 예시를 위한 것일 뿐, 본 명세서에 설명되고/되거나 청구된 본 발명의 구현을 제한하려 고 의도된 것이 아니다. 컴퓨팅 디바이스는 프로세서, 메모리, 저장 디바이스, 메모리와 다수의 고속 확 장 포트에 연결되는 고속 인터페이스, 및 저속 확장 포트와 저장 디바이스에 연결되는 저속 인터페이스를 포함한다. 프로세서, 메모리, 저장 디바이스, 고속 인터페이스 , 고속 확장 포트 및 저속 인터페이스 각각은 다양한 버스를 이용하여 상호 연결되고, 공통 마더보드 또는 기타 적절한 방식으로 탑재될 수 있다. 프로세서는 외부 입력/출력 디바이스, 예를 들어, 고속 인터페이스에 결합된 디스플레이의 GUI에 대한 그래픽 정보를 표시하기 위해 메모리 또 는 저장 디바이스에 저장된 명령어를 포함하는, 컴퓨팅 디바이스 내에서 실행하기 위한 명령어를 처리할 수 있다. 다른 구현예에서, 다수의 메모리와 메모리 유형과 함께 다수의 프로세서 및/또는 다수의 버스 가 적절하게 사용될 수 있다. 또한 다수의 컴퓨팅 디바이스가 연결될 수 있으며, 각 디바이스는 (예를 들어, 서 버 뱅크, 블레이드 서버 그룹 또는 다중 프로세서 시스템으로서) 필요한 동작의 일부를 제공한다. 메모리는 컴퓨팅 디바이스 내에 정보를 저장한다. 일부 구현예에서, 메모리는 휘발성 메모리 유닛 또는 유닛들이다. 일부 구현예에서, 메모리는 비휘발성 메모리 유닛 또는 유닛들이다. 메모리(130 4)는 또한 자기 디스크 또는 광학 디스크와 같은 컴퓨터 판독 가능 매체의 다른 형태일 수 있다. 저장 디바이스는 컴퓨팅 디바이스를 위한 대용량 저장 매체를 제공할 수 있다. 일부 구현예에서, 저장 디바이스는 플로피 디스크 디바이스, 하드 디스크 디바이스, 광학 디스크 디바이스, 또는 테이프 디 바이스, 플래시 메모리 또는 기타 유사한 고체 상태 메모리 디바이스 또는 저장 영역 네트워크 또는 기타 구성 의 디바이스를 포함하는 디바이스 어레이와 같은 컴퓨터 판독 가능 매체이거나 이 매체를 포함할 수 있다. 컴퓨 터 프로그램 제품은 정보 캐리어에 유형적으로 구현될 수 있다. 컴퓨터 프로그램 제품은 또한 실행될 때 위에 설명된 것과 같은 하나 이상의 방법을 수행하는 명령어를 포함할 수 있다. 컴퓨터 프로그램 제품은 또한 메모리, 저장 디바이스, 또는 프로세서 상의 메모리와 같은 컴퓨터 판독 가능 매체 또는 기계 판독 가능 매체로 유형적으로 구현될 수 있다. 고속 인터페이스는 컴퓨팅 디바이스에 대한 대역폭 집약적 동작을 관리하는 반면, 저속 인터페이스 는 낮은 대역폭 집약적 동작을 관리한다. 이러한 기능 할당은 단지 예시를 위한 것일 뿐이다. 일부 구현 예에서, 고속 인터페이스는 메모리, (예를 들어, 그래픽 프로세서 또는 가속기를 통해) 디스플레이 에 결합되고, 다양한 확장 카드(도시되지 않음)를 수용할 수 있는 고속 확장 포트에 결합된다. 구 현예에서, 저속 인터페이스는 저장 디바이스와 저속 확장 포트에 결합된다. 다양한 통신 포 트(예를 들어, USB, 블루투스, 이더넷, 무선 이더넷)를 포함할 수 있는 저속 확장 포트는 키보드, 포인팅 디바이스, 스캐너, 또는 예를 들어 네트워크 어댑터를 통해 스위치나 라우터와 같은 네트워킹 디바이스와 같은 하나 이상의 입력/출력 디바이스에 결합될 수 있다. 컴퓨팅 디바이스는 도면에 도시된 바와 같이 다양한 형태로 구현될 수 있다. 예를 들어, 컴퓨팅 디바이스 는 표준 서버로 구현되거나 또는 이러한 서버 그룹으로 다수 회 구현될 수 있다. 또한, 컴퓨팅 디바이스 는 랩톱 컴퓨터와 같은 개인용 컴퓨터로 구현될 수 있다. 컴퓨팅 디바이스는 랙 서버 시스템의 일 부로 구현될 수도 있다. 대안적으로, 컴퓨팅 디바이스의 구성요소는 모바일 컴퓨팅 디바이스와 같 은 모바일 디바이스(미도시)의 다른 구성요소와 결합될 수 있다. 이러한 디바이스 각각은 컴퓨팅 디바이스 와 모바일 컴퓨팅 디바이스 중 하나 이상을 포함할 수 있고, 전체 시스템은 서로 통신하는 다수의 컴퓨팅 디바이스로 구성될 수 있다. 모바일 컴퓨팅 디바이스는 특히, 프로세서, 메모리, 디스플레이와 같은 입력/출력 디 바이스, 통신 인터페이스, 및 트랜시버를 포함한다. 모바일 컴퓨팅 디바이스에는 추가 저장 매체를 제공하기 위해 마이크로 드라이브 또는 기타 디바이스와 같은 저장 디바이스가 제공될 수도 있다. 프로 세서, 메모리, 디스플레이, 통신 인터페이스 및 트랜시버 각각은 다양한 버스를 사용하여 상호 연결되며, 구성요소 중 일부는 공통 마더보드에 또는 기타 적절한 방식으로 탑재될 수 있다. 프로세서는 메모리에 저장된 명령어를 포함하여 모바일 컴퓨팅 디바이스 내의 명령어를 실행 할 수 있다. 프로세서는 별도의 다수의 아날로그 및 디지털 프로세서를 포함하는 칩의 칩셋으로 구현될 수 있다. 프로세서는 예를 들어 사용자 인터페이스의 제어, 모바일 컴퓨팅 디바이스에 의해 실행되 는 애플리케이션, 및 모바일 컴퓨팅 디바이스에 의한 무선 통신과 같은 모바일 컴퓨팅 디바이스의 다른 구성요소의 조정을 제공할 수 있다. 프로세서는 디스플레이에 결합된 디스플레이 인터페이스와 제어 인터페이스를 통해 사 용자와 통신할 수 있다. 디스플레이는 예를 들어 TFT(박막 트랜지스터 액정 디스플레이) 디스플레이 또는 OLED(유기 발광 다이오드) 디스플레이, 또는 다른 적절한 디스플레이 기술일 수 있다. 디스플레이 인터페이스 는 그래픽 및 기타 정보를 사용자에게 제시하기 위해 디스플레이를 구동하기 위한 적절한 회로부를 포함할 수 있다. 제어 인터페이스는 사용자로부터 명령을 수신하고 이를 프로세서에 제출하기 위해 변환할 수 있다. 또한, 외부 인터페이스는 다른 디바이스와 모바일 컴퓨팅 디바이스의 근거리 통신 을 가능하게 하기 위해 프로세서와의 통신을 제공할 수 있다. 외부 인터페이스는 예를 들어 일부 구현예에서는 유선 통신을 제공하고, 또는 다른 구현예에서는 무선 통신을 제공할 수 있으며, 다수의 인터페이 스도 사용될 수 있다. 메모리는 모바일 컴퓨팅 디바이스 내에 정보를 저장한다. 메모리는 컴퓨터 판독 가능 매체 또는 매체들, 휘발성 메모리 유닛 또는 유닛들, 또는 비휘발성 메모리 유닛 또는 유닛들 중 하나 이상으로 구현 될 수 있다. 확장 메모리는 또한 예를 들어 SIMM(단일 인라인 메모리 모듈) 카드 인터페이스를 포함할 수 있는 확장 인터페이스를 통해 모바일 컴퓨팅 디바이스에 제공되고 연결될 수 있다. 확장 메모리 는 모바일 컴퓨팅 디바이스를 위한 추가 저장 공간을 제공할 수 있거나, 또한 모바일 컴퓨팅 디바 이스를 위한 애플리케이션 또는 기타 정보를 저장할 수도 있다. 구체적으로, 확장 메모리는 전술한 과정을 수행 또는 보완하기 위한 명령어를 포함할 수 있으며, 보안 정보도 포함할 수 있다. 따라서, 예를 들어, 확장 메모리는 모바일 컴퓨팅 디바이스를 위한 보안 모듈로서 제공될 수 있고, 모바일 컴퓨팅 디바 이스의 안전한 사용을 가능하게 하는 명령어로 프로그래밍될 수 있다. 또한 해킹 불가능한 방식으로 SIMM 카드에 식별 정보를 배치하는 등의 추가 정보와 함께 SIMM 카드를 통해 보안 애플리케이션을 제공할 수 있다. 메모리는 후술하는 바와 같이 예를 들어 플래시 메모리 및/또는 NVRAM 메모리(비휘발성 랜덤 액세스 메모리)를 포함할 수 있다. 일부 구현예에서, 컴퓨터 프로그램 제품은 정보 캐리어에 유형적으로 구현된다. 컴퓨터 프로그램 제품은 실행될 때 위에 설명된 것과 같은 하나 이상의 방법을 수행하는 명령어를 포함한다. 컴퓨터 프로그램 제품은 메모리, 확장 메모리, 또는 프로세서 상의 메모리와 같은 컴퓨터 판독 가능 매체 또 는 기계 판독 가능 매체일 수 있다. 일부 구현예에서, 컴퓨터 프로그램 제품은 예를 들어 트랜시버 또는 외부 인터페이스를 통해 전파된 신호로 수신될 수 있다. 모바일 컴퓨팅 디바이스는 필요한 경우 디지털 신호 처리 회로부를 포함할 수 있는 통신 인터페이스 를 통해 무선으로 통신할 수 있다. 통신 인터페이스는 특히 GSM 음성 통화(모바일 통신용 글로벌 시스템), SMS(단문 메시지 서비스), EMS(향상된 메시징 서비스) 또는 MMS 메시징(멀티미디어 메시징 서비스), CDMA(코드 분할 다중 접속), TDMA(시분할 다중 액세스), PDC(개인용 디지털 셀룰러), WCDMA(광대역 코드 분할 다중 액세스), CDMA2000 또는 GPRS(일반 패킷 무선 서비스)와 같은 다양한 모드 또는 프로토콜 하에서 통신을 제공할 수 있다. 이러한 통신은 예를 들어 무선 주파수를 사용하는 트랜시버를 통해 발생할 수 있다. 또 한, 블루투스, WiFi 또는 기타 트랜시버(미도시) 등을 사용하여 단거리 통신이 발생할 수 있다. 또한, GPS(글로 벌 위치 확인 시스템) 수신기 모듈은 추가적인 내비게이션 관련 및 위치 관련 무선 데이터를 모바일 컴퓨 팅 디바이스에 제공할 수 있으며, 이 데이터는 모바일 컴퓨팅 디바이스에서 실행되는 애플리케이션 에 의해 적절하게 사용될 수 있다. 모바일 컴퓨팅 디바이스는 또한 사용자로부터 음성 정보를 수신하고 이를 사용 가능한 디지털 정보로 변 환할 수 있는 오디오 코덱을 사용하여 청각적으로 통신할 수 있다. 오디오 코덱은 마찬가지로 예를 들어 모바일 컴퓨팅 디바이스의 핸드셋의 스피커를 통해 사용자를 위한 가청 소리를 생성할 수 있다. 이 러한 소리는 음성 전화 통화의 소리를 포함할 수 있고, 녹음된 소리(예를 들어, 음성 메시지, 음악 파일 등)를 포함할 수 있으며, 또한 모바일 컴퓨팅 디바이스에서 동작하는 애플리케이션에 의해 생성된 소리를 포함 할 수 있다. 모바일 컴퓨팅 디바이스는 도면에 도시된 바와 같이 다수의 다른 형태로 구현될 수 있다. 예를 들어, 모 바일 컴퓨팅 디바이스는 셀룰러 폰으로 구현될 수 있다. 또한 모바일 컴퓨팅 디바이스는 스마트폰, 개인용 휴대 정보 단말기 또는 기타 유사한 모바일 디바이스의 일부로 구현될 수도 있다. 본 명세서에 설명된 시스템 및 기술의 다양한 구현예는 디지털 전자 회로부, 집적 회로부, 특별히 설계된 ASIC (응용 특정 집적 회로), 컴퓨터 하드웨어, 펌웨어, 소프트웨어 및/또는 이들의 조합으로 실현될 수 있다. 이들 다양한 구현예는 저장 시스템, 적어도 하나의 입력 디바이스 및 적어도 하나의 출력 디바이스로부터 데이터 및 명령어를 수신하고 데이터 및 명령어를 이들로 전송하기 위해 결합될 수 있는 특수 목적 또는 일반 목적용 적어 도 하나의 프로그래밍 가능한 프로세서를 포함하는 프로그래밍 가능한 시스템에서 실행 가능 및/또는 해석 가능 한 하나 이상의 컴퓨터 프로그램의 구현을 포함할 수 있다. 이러한 컴퓨터 프로그램(프로그램, 소프트웨어, 소프트웨어 애플리케이션 또는 코드라고도 알려짐)은 프로그래 밍 가능 프로세서에 대한 기계 명령어를 포함하고, 하이 레벨 절차적 및/또는 객체 지향 프로그래밍 언어 및/또 는 어셈블리/기계 언어로 구현될 수 있다. 본 명세서에 사용된 기계 판독 가능 매체 및 컴퓨터 판독 가능 매체 라는 용어는 기계 판독 가능 신호로서 기계 명령어를 수신하는 기계 판독 가능 매체를 포함하여, 프로그래밍 가 능 프로세서에 기계 명령어 및/또는 데이터를 제공하는 데 사용되는 임의의 컴퓨터 프로그램 제품, 장치 및/또 는 디바이스(예를 들어, 자기 디스크, 광학 디스크, 메모리, 프로그래밍 가능 논리 디바이스(PLD))를 의미한다. 기계 판독 가능 신호라는 용어는 기계 명령어 및/또는 데이터를 프로그래밍 가능 프로세서에 제공하는 데 사용 되는 임의의 신호를 의미한다. 사용자와의 상호 작용을 제공하기 위해 본 명세서에 설명된 시스템 및 기술은 사용자에게 정보를 표시하기 위한 디스플레이 디바이스(예를 들어, CRT(음극선관) 또는 LCD(액정 디스플레이) 모니터) 및 사용자가 컴퓨터에 입력 을 제공할 수 있게 하는 키보드 및 포인팅 디바이스(예를 들어, 마우스 또는 트랙볼)가 있는 컴퓨터에서 구현될 수 있다. 사용자와의 상호작용을 제공하기 위해 다른 종류의 디바이스도 사용될 수 있고; 예를 들어, 사용자에 게 제공되는 피드백은 임의의 형태의 감각 피드백(예를 들어, 시각적 피드백, 청각 피드백 또는 촉각 피드백)일 수 있고; 사용자로부터의 입력은 음향, 음성 또는 촉각 입력을 포함한 임의의 형태로 수신될 수 있다. 본 명세서에 설명된 시스템 및 기술은 백엔드 구성요소(예를 들어, 데이터 서버)를 포함하거나, 미들웨어 구성 요소(예를 들어, 애플리케이션 서버)를 포함하거나, 프런트엔드 구성요소(예를 들어 사용자가 본 명세서에 설명 된 시스템 및 기술의 구현과 상호 작용할 수 있게 하는 그래픽 사용자 인터페이스 또는 웹 브라우저를 갖는 클 라이언트 컴퓨터)를 포함하거나, 또는 이러한 백엔드, 미들웨어 또는 프런트엔드 구성요소의 임의의 조합을 포 함하는 컴퓨팅 시스템으로 구현될 수 있다. 시스템의 구성요소는 디지털 데이터 통신의 임의의 형태나 매체(예를 들어, 통신 네트워크)를 통해 상호 연결될 수 있다. 통신 네트워크의 예는 근거리 네트워크(LAN), 광역 네트 워크(WAN) 및 인터넷을 포함한다. 컴퓨팅 시스템은 클라이언트와 서버를 포함할 수 있다. 클라이언트와 서버는 일반적으로 서로 멀리 떨어져 있으 며 일반적으로 통신 네트워크를 통해 상호 작용한다. 클라이언트와 서버의 관계는, 각 컴퓨터에서 실행되고 서 로 클라이언트-서버 관계를 갖는 컴퓨터 프로그램으로 인해 발생한다. 도 14는 본 명세서에 설명된 기술을 수행하는 데 사용되는 시스템 구성요소를 묘사한다. 컴퓨터 시스템, 공격자 시스템 및 타깃 시스템(106A)은 네트워크(들)를 통해 통신할 수 있다. 공격자 시스템은 프로세서(들), 모델 데이터 수정자, 트로이 목마 주입 모듈 및 통신 인터페이스를 포함할 수 있다. 프로세서(들)는 공격자 시스템의 동작 중 임의의 하나 이상을 수행하거나 실행하도록 구성될 수 있다. 모델 데이터 수정자는 타깃 시스템(106A)의 네트워크 모델에 의 해 사용되는 훈련 데이터세트 또는 기타 데이터를 수신하거나 추출할 수 있다. 그러면 수정자는 이 데이 터를 악의적으로 변경하거나 업데이트할 수 있다. 그러면 트로이 목마 주입 모듈은 악의적으로 업데이트 된 데이터를 타깃 시스템(106A)에 다시 주입할 수 있다. 모듈은 또한 본 명세서 전반에 걸쳐 설명된 바와 같이 악의적으로 업데이트된 데이터를 에코시스템 또는 환경의 타깃 시스템(106A)과 기타 유사하거나 동일한 시 스템에 주입하려고 시도할 수 있다. 컴퓨터 시스템은 프로세서(들), 에코시스템 생성기, 업데이트 엔진 및 통신 인터페이스 를 포함할 수 있다. 더욱이, 컴퓨터 시스템은 보안 가중치 데이터 저장소(예를 들어, 데이터베 이스, 클라우드 저장소)와 통신할 수 있다. 프로세서(들)는 컴퓨터 시스템과 관련하여 본 명세서에 설명된 임의의 동작을 수행하거나 실행하도록 구성될 수 있다. 에코시스템 생성기는 타깃 시스템(106A)의 네트워크 모델을 수신하고, 동일한 기능을 갖는 네트워크 모델 의 변형을 생성하도록 구성될 수 있다. 생성기는 에코시스템을 생성하기 위해 확률론적 파라미터 변이 엔 진을 포함할 수 있다. 본 명세서 전반에 걸쳐 설명된 바와 같이, 엔진은 타깃 시스템(106A)의 네트 워크 모델과 연관된 파라미터의 가중치를 이동시키도록 구성될 수 있다. 업데이트 엔진은 업데이트 파일 생성기 및 모델 업데이트 엔진을 포함할 수 있다. 생성기 는 타깃 시스템(106A)에 대한 네트워크 모델의 파라미터의 가중치를 업데이트하기 위해 업데이트 파일을 생성할 수 있다. 생성기는 확률적 파라미터 변이 엔진에 의해 생성된 가중치를 사용하여 업데이트 파일을 구축할 수 있다. 모델 업데이트 엔진은 생성기에 의해 이루어진 업데이트 파일을 사용하여 타깃 시스템(106A)의 네트워크 모델을 업데이트하도록 구성될 수 있다. 일부 구현예에서, 컴퓨터 시스템은 업데이트 파일을 암호화하고 업데이트 파일을 타깃 시스템(106A)에 전송할 수 있다. 그러면 타깃 시스템(106A) 은 암호화된 업데이트 파일을 사용하여 네트워크 모델을 업데이트할 수 있다. 따라서, 이러한 구현예에서, 모델 업데이트 엔진은 타깃 시스템(106A)의 네트워크 모델을 직접 업데이트하지 않을 수 있다. 언급된 바와 같이, 컴퓨터 시스템은 보안 데이터 저장소와 통신할 수 있다. 데이터 저장소는 에 코시스템(1424A-N)에서 생성된 모델의 변형(여기서 모델은 에코시스템 생성기에 의해 생성됨), 모델 가중 치(1426A-N)(여기서 모델 가중치는 확률론적 파라미터 변이 엔진에 의해 생성됨), 및 업데이트 파일 (1434A-N)(여기서 업데이트 파일은 업데이트 파일 생성기에 의해 생성됨)과 같은 정보를 저장하도록 구성 될 수 있다. 정보(1424A-N, 1426A-N, 및 1434A-N)는 안전하게 저장되고 서로 연관될 수 있으므로, 이러한 정보 는 타깃 시스템(106A)과 동일한 환경 내의 다른 시스템에 적용될 수 있다. 그 결과, 공격자 시스템이 환경 내의 다른 동일한 시스템으로 트로이 목마 공격을 확산시키려고 시도하는 경우, 공격은 동일한 시스템에서 증폭 될 수 있고 그리하여 보다 용이하고 쉽게 식별/알려질 수 있다. 타깃 시스템(106A)은 프로세서(들), 신경망 인터페이스 엔진 및 통신 인터페이스를 포함할 수 있다. 프로세서(들)는 타깃 시스템(106A)과 관련하여 본 명세서에 설명된 동작 중 임의의 동작을 수행 하거나 실행하도록 구성될 수 있다. 신경망 인터페이스 엔진은 예를 들어 객체를 분류하고 타깃 시스템 (106A)의 다른 기능을 수행하기 위해 타깃 시스템(106A)에 대한 신경망 모델을 실행하거나 구현하도록 구성될 수 있다. 일부 구현예에서, 엔진은 컴퓨터 시스템으로부터 수신된 업데이트 파일을 사용하여 타깃 시스템(106A)에 대한 신경망 모델을 업데이트할 수 있다. 엔진은 또한 업데이트된 신경망 모델을 실행할 수 있다. 일부 구현예에서, 엔진은 또한 트로이 목마 공격이 식별될 때 컴퓨터 시스템에 알림을 전송할 수 있다. 통신 인터페이스(1408, 1422, 1432)는 본 명세서에 설명된 구성요소 중 임의의 하나 이상의 구성요소 사이의 통 신을 제공하도록 구성될 수 있다. 도 15a 및 도 15b는 본 명세서에 설명된 기술을 수행하기 위한 과정의 흐름도이다. 과정은 컴퓨터 시스템 또는 임의의 기타 유사한 컴퓨팅 시스템 또는 환경에 의해 수행될 수 있다. 도 15a 및 도 15b의 과정을 참조하면, 컴퓨터 시스템은 타깃 시스템(106A)으로부터 네트워크 모델 및 연관된 파라미터를 수신할 수 있다. 그런 다음, 컴퓨터 시스템은 수신된 네트워크 모델에 기초하 여 네트워크 모델의 에코시스템을 생성할 수 있다. 예를 들어, 컴퓨터 시스템은 처음에 사용자 정의 값(들)에 기초하여 네트워크 모델의 파라미터와 연관된 가중치를 이동시킬 수 있다. 사용자 정의 값은 백 분율 또는 기타 숫자 값일 수 있다. 컴퓨터 시스템은 또한 두 번째로 난수 생성기를 사용하여 파라미터와 연관된 가중치를 이동시킬 수 있다. 가중치를 이동시키면 본 명세서에 설명된 바와 같이 모델이 원래의 모델과 테스트 데이터의 정확도를 거의 동일하게 유지할 수 있다. 컴퓨터 시스템은 에서 이동된 가중치를 사용하여 파라미터의 원래의 가중치를 업데이트할 수 있다. 일부 구현예에서 원래의 가중치를 업데이트하는 것은 이동된 가중치를 원래의 가중치에 추가하는 것을 포함할 수 있다. 그런 다음, 파라미터의 업데이트된 가중치는 에서 보안 데이터 저장소(예를 들어, 가중치 데이 터 저장소)에 저장될 수 있다. 컴퓨터 시스템은 또한 에서 업데이트 파일을 생성할 수 있다. 이것은 업데이트된 가중치를 사용하여 수신된 네트워크 모델을 재훈련하는 것을 포함할 수 있다. 이는 또한 재훈련 전후에 가중치의 행렬을 결 정하는 것을 포함할 수 있다. 그렇게 함으로써, 컴퓨터 시스템은 업데이트 파일의 가중치를 XOR 연 산할 수 있다. 그런 다음 업데이트 파일을 사용하여 동일한 환경이나 에코시스템에 있는 타깃 시스템 및 또한 기타 유사하거나 동일한 시스템의 네트워크 모델을 업데이트할 수 있다. 수신된 네트워크 모델은 에서 업데이트 파일을 사용하여 업데이트될 수 있다. 본 명세서 전반에 걸쳐 설 명된 바와 같이, 컴퓨터 시스템은 네트워크 모델을 업데이트하고 업데이트된 네트워크 모델을 타깃 시스템 에 전송할 수 있다. 일부 구현예에서, 컴퓨터 시스템은 업데이트된 가중치의 델타를 타깃 시스템에 전송할 수 있다. 그러면 타깃 시스템은 델타를 사용하여 네트워크 모델을 업데이트할 수 있다. 컴퓨터 시스템은 또한 에서 나중에 타깃 시스템으로부터 알림을 수신할 수 있다. 알림은 신경 트로 이 목마가 타깃 시스템의 네트워크 모델에서 사용되는 훈련 데이터세트 또는 기타 데이터에 삽입된 것으로 식별 되었음을 나타낼 수 있다. 본 명세서는 많은 특정 구현 세부 사항을 포함하고 있지만, 이들은 개시된 기술의 범위 또는 청구될 수 있는 것 을 제한하는 것으로 해석되어서는 안 되며, 오히려 특정 개시된 기술의 특정 실시예에 특정될 수 있는 특징에 대한 설명으로 해석되어야 한다. 별도의 실시예와 관련하여 본 명세서에 설명된 특정 특징은 또한 부분적으로 또는 전체적으로 단일 실시예에서 조합으로 구현될 수 있다. 반대로, 단일 실시예의 맥락에서 설명된 다양한 특 징은 또한 다수의 실시예에서 개별적으로 또는 임의의 적절한 하위 조합으로 구현될 수 있다. 더욱이, 특징들이 본 명세서에서 특정 조합으로 작용하는 것으로 설명되고/되거나 초기에 그러한 것으로 청구될 수 있지만, 청구 된 조합의 하나 이상의 특징은 일부 경우에 조합으로부터 삭제될 수 있고, 청구된 조합은 하위 조합 또는 하위 조합의 변형으로 될 수 있다. 마찬가지로, 동작은 특정 순서로 설명될 수 있지만, 이는 바람직한 결과를 달성하 기 위해 이러한 동작이 특정 순서 또는 순차적 순서로 수행되거나 모든 동작이 수행되어야 한다는 것을 요구하 는 것으로 이해되어서는 안 된다. 본 주제의 특정 실시예가 설명되었다. 다른 실시예는 다음 청구범위 내에 있 다.도면 도면1 도면2 도면3 도면4a 도면4b 도면5 도면6a 도면6b 도면6c 도면7 도면8 도면9a 도면9b 도면9c 도면10a 도면10b 도면10c 도면11a 도면11b 도면12 도면13 도면14 도면15a 도면15b"}
{"patent_id": "10-2023-7035207", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 명세서 전반에 걸쳐 설명되는 신경 트로이 목마 공격을 식별하기 위한 시스템의 개념도이다. 도 2는 위협 모델의 개요이다. 도 3은 컨볼루션 신경망(CNN) 모델을 다양화하기 위한 알고리즘이다. 도 4a 및 도 4b는 본 명세서에 설명된 CNN 모델에 대한 가중치 분포의 그래픽 묘사이다. 도 5a는 뉴런 가중치에 적용된 확률론적 파라미터 변이의 다이어그램이다. 도 5b는 뉴런 가중치에 확률론적 파라미터 변이 과정이 적용된 상태의 뉴런의 다이어그램이다. 도 5c는 은닉된 뉴런이 있는 1-계층 피드포워드 네트워크의 일례이다. 도 6a는 제안된 방법론의 전체적인 흐름의 다이어그램이다. 도 6b는 XOR 업데이트 절차의 다이어그램이다. 도 6c는 공격자가 CNN 모델의 업데이트 파일에 트로이 목마를 삽입하는 방법을 결정한 것을 묘사한 다이어그램 이다. 도 7은 본 명세서에 설명된 CNN 모델에 대한 구조 및 파라미터를 묘사하는 표이다. 도 8은 CNN 모델과 함께 사용되는 하이퍼파라미터 구성을 묘사하는 표이다. 도 9a 내지 도 9c는 본 명세서에 설명된 기술을 사용할 때 CNN 모델의 가중치 사이의 해밍 거리(hamming distance)를 묘사한다. 도 10a 내지 도 10c는 본 명세서에 설명된 기술을 사용하여 각 에코시스템에 걸친 정확도 분포를 묘사한다. 도 11a 및 도 11b는 업데이트 전후의 CNN 모델의 분류 오류의 차이를 보여주는 혼동 행렬을 묘사한다. 도 12는 단일 모델에 LFA를 탑재하고 그 업데이트 파일을 에코시스템의 다른 모든 네트워크에 적용한 결과 정확 도의 평균 손실을 보여주는 그래프를 묘사한다. 도 13은 컴퓨팅 디바이스 및 모바일 컴퓨팅 디바이스의 일례를 도시하는 개략도이다. 도 14는 본 명세서에 설명된 기술을 수행하는 데 사용되는 시스템 구성요소를 묘사한다. 도 15a 및 도 15b는 본 명세서에 설명된 기술을 수행하기 위한 과정의 흐름도이다. 여러 도면에서 동일한 참조 부호는 동일한 요소를 나타낸다."}
