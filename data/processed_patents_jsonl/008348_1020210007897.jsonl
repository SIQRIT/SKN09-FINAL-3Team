{"patent_id": "10-2021-0007897", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0042991", "출원번호": "10-2021-0007897", "발명의 명칭": "스마트 스토리지 장치", "출원인": "삼성전자주식회사", "발명자": "최혁준"}}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "호스트 장치와 연결되는 스마트 인터페이스;상기 스마트 인터페이스에 CXL.cache 프로토콜 및 CXL.mem 프로토콜로 연결되어, 상기 호스트 장치의 연산 명령에 따라 가속 연산을 수행하는 가속기;상기 스마트 인터페이스에 CXL.io 프로토콜로 연결되고, 상기 호스트 장치의 데이터 액세스 명령에 따라 스토리지 장치에 대한 데이터 액세스 동작을 제어하는 스토리지 컨트롤러를 포함하고,상기 가속기는 상기 스토리지 컨트롤러와 직접 연결되는 내부버스를 통해 상기 스토리지 장치에 직접적으로 액세스할 수 있는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 가속기는상기 연산 명령을 디코딩하여 연산 정보를 추출하는 CMD 디코더;상기 디코딩된 연산 명령에 따라 상기 가속 연산을 수행하는 연산 모듈;상기 연산 모듈의 동작에 의한 연산 데이터를 전용 메모리 장치에 라이트하거나 리드하는 전용 메모리컨트롤러; 상기 스토리지 컨트롤러에 연결되어 상기 스토리지 장치에 직접 액세스 하는 DMA(Direct Memory Access) 엔진;및상기 전용 메모리 장치에 저장된 연산 데이터와 상기 호스트 장치에 저장된 데이터 간 통일성을 유지시키는 일관성 엔진을 더 포함하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 스토리지 컨트롤러는상기 호스트 장치의 제1 액세스 요청과 상기 가속기의 제2 액세스 요청을 수신하여 기설정된 정책에 따라 동작순서를 스케줄링하는 스케줄러; 및상기 스토리지 장치에 데이터를 쓰거나 리드하는 제어 유닛을 포함하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서, 상기 DMA 엔진은 상기 연산 정보에 기초하여 상기 스토리지 컨트롤러에 데이터 액세스를 요청하여 데이터를 수신하고,상기 일관성 엔진은상기 호스트 장치에 상기 수신된 데이터에 대한 코히어런스 프로세싱을 요청하고,상기 전용 메모리 컨트롤러는상기 수신된 데이터를 상기 전용 메모리 장치에 저장하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제2항에 있어서, 상기 전용 메모리 컨트롤러는 상기 전용 메모리에 저장된 제1 연산 데이터를 리드하고,공개특허 10-2022-0042991-3-상기 연산 모듈은상기 제1 연산 데이터에 대해 상기 가속 연산을 수행하여 제2 연산 데이터를 생성하고,상기 일관성 엔진은상기 제2 연산 데이터에 대해 상기 호스트 장치에 대한 코히어런스 프로세싱을 요청하는, 스마트 스토리지장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서, 상기 전용 메모리 컨트롤러는 상기 코히어런스 프로세싱이 완료되면 상기 제2 연산 데이터를 상기 전용 메모리장치에 라이트하고,상기 연산 모듈은 상기 호스트 장치에 상기 연산 명령에 대한 완료를 알려주는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "호스트 장치와 연결되는 스마트 인터페이스;상기 스마트 인터페이스에 CXL.mem 프로토콜 또는 CXL.io 프로토콜로 연결되고, 메모리 장치에 대한 제1 액세스동작을 제어하는 메모리 컨트롤러;상기 스마트 인터페이스에 CXL.io 프로토콜로 연결되고, 스토리지 장치에 대한 제2 액세스 동작을 제어하는 스토리지 컨트롤러를 포함하고,상기 스마트 인터페이스는 상기 CXL.mem 프로토콜과 상기 CXL.io 프로토콜을 직접 연결하는 내부연결을 포함하여, 상기 메모리 컨트롤러와상기 스토리지 컨트롤러 간 직접 액세스하는 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 스마트 스토리지 장치는상기 CXL.io 프로토콜과 연결되는 라우터;상기 CXL.mem 프로토콜 및 상기 라우터에 연결되어 상기 메모리 컨트롤러로 제1 액세스 동작에 대한 요청을 전달하고 회신하는 메모리 프로토콜 핸들러; 및상기 라우터에 연결되어 상기 제2 액세스 동작에 대한 요청을 전달하고 회신하는 스토리지 프로토콜 핸들러를더 포함하는 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 스토리지 프로토콜 핸들러는상기 호스트 장치로부터 수신된 액세스 명령을 파싱(parsing)하고, 요청된 데이터의 주소를 확인하는, 스마트스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서, 상기 스토리지 프로토콜 핸들러는상기 요청된 데이터의 주소가 상기 메모리 장치의 주소인 경우, 상기 내부연결을 통해 상기 메모리 프로토콜 핸들러로 상기 액세스 명령을 전달하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서, 상기 메모리 프로토콜 핸들러는상기 전달된 액세스 명령을 상기 메모리 컨트롤러로 전달하여 상기 요청된 데이터가 액세스 되면, 상기 스토리공개특허 10-2022-0042991-4-지 프로토콜 핸들러에 상기 액세스 명령에 대한 수행 완료를 알려주는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제8항에 있어서, 상기 스마트 인터페이스는 상기 라우터, 상기 메모리 프로토콜 핸들러, 상기 스토리지 프로토콜 핸들러를 포함하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "호스트 장치와 연결되는 스마트 인터페이스;상기 스마트 인터페이스에 CXL.cache 프로토콜 및 CXL.mem 프로토콜로 연결되어, 상기 호스트 장치의 연산 명령에 따라 가속 연산을 수행하는 가속기;상기 스마트 인터페이스에 CXL.io 프로토콜로 연결되고, 상기 호스트 장치의 데이터 액세스 명령에 따라 스토리지 장치에 대한 제1 액세스 동작을 제어하는 스토리지 컨트롤러; 및상기 스마트 인터페이스와 CXL.mem 프로토콜 또는 CXL.io 프로토콜로 연결되고, 메모리 장치에 대한 제2 액세스동작을 제어하는 메모리 컨트롤러를 포함하고,상기 스토리지 컨트롤러는 상기 가속기 및 상기 메모리 컨트롤러와 직접 액세스 가능한 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서, 상기 가속기는 상기 스토리지 컨트롤러와 내부 연결버스로 연결되어 상기 스토리지 장치에 직접 액세스 하는DMA(Direct Memory Access) 엔진을 포함하고,상기 스토리지 컨트롤러는 상기 내부 연결버스로 수신되는 상기 DMA 엔진의 요청과 상기 CXL.io 프로토콜로 수신되는 상기 호스트 장치의 요청에 대해 기설정된 정책에 따라 동작 순서를 스케줄링하는 스케줄러를 포함하는,스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서, 상기 가속기는상기 연산 명령을 디코딩하여 연산 정보를 추출하는 CMD 디코더;상기 디코딩된 연산 명령에 따라 상기 가속 연산을 수행하는 연산 모듈;상기 연산 모듈의 동작에 의한 연산 데이터를 전용 메모리 장치에 라이트하거나 리드하는 전용 메모리컨트롤러; 및상기 전용 메모리 장치에 저장된 상기 연산 데이터와 상기 호스트 장치에 저장된 데이터 간 통일성을 유지시키는 일관성 엔진(Coherence Engine)을 더 포함하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서, 상기 가속기는 상기 연산 정보에 기초하여 상기 스토리지 컨트롤러에 제3 액세스를 요청하고, 상기 제3 액세스로 수신된 제1 데이터에 대해 코히어런스 프로세싱을 요청하여, 상기 코히어런스가 가능한 경우 상기 제1 데이터를 상기 전용 메모리 장치에 저장하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제13항에 있어서, 상기 스마트 인터페이스는상기 CXL.mem 프로토콜과 상기 CXL.io 프로토콜을 직접 연결하는 내부연결을 포함하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "공개특허 10-2022-0042991-5-제17항에 있어서, 상기 호스트 장치로부터 수신된 명령을 파싱하고, 상기 명령에 포함된 주소가 상기 스토리지 장치에 속하면 상기 스토리지 컨트롤러로 상기 명령을 전송하고, 상기 주소가 상기 메모리 장치에 속하면 상기 내부연결을 통해상기 메모리 컨트롤러로 상기 명령을 전송하는 프로토콜 핸들러를 더 포함하는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서, 상기 프로토콜 핸들러는상기 스토리지 컨트롤러와 상기 스마트 인터페이스 사이에 연결된 스토리지 프로토콜 핸들러; 및상기 메모리 컨트롤러와 상기 스마트 인터페이스 사이에 연결된 메모리 프로토콜 핸들러를 포함하고,상기 메모리 프로토콜 핸들러는 상기 스마트 인터페이스에 상기 CXL.io 및 상기 CXL.mem 프로토콜로 각각 연결된, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제19항에 있어서, 상기 메모리 컨트롤러는상기 전송된 명령에 따라 상기 제2 액세스를 동작을 수행하고, 수행 결과를 상기 스토리지 프로토콜 핸들러에게알려주는, 스마트 스토리지 장치."}
{"patent_id": "10-2021-0007897", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "CXL 인터페이스를 이용하는 스마트 스토리지 장치가 제공된다. 스마트 스토리지 장치는 호스트 장치와 연결되는 스마트 인터페이스, 스마트 인터페이스에 CXL.cache 프로토콜 및 CXL.mem 프로토콜로 연결되어, 호스트 장치의 연산 명령에 따라 가속 연산을 수행하는 가속기 및 스마트 인터페이스에 CXL.io 프로토콜로 연결되고, 호스트 장 치의 데이터 액세스 명령에 따라 스토리지 장치에 대한 데이터 액세스 동작을 제어하는 스토리지 컨트롤러를 포 함하고, 가속기는 스토리지 컨트롤러와 직접 연결되는 내부버스를 통해 상기 스토리지 장치에 직접적으로 액세스 할 수 있다."}
{"patent_id": "10-2021-0007897", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 스토리지 장치에 관한 것으로, 더 상세하게는 CXL(Computing eXpress Link) 인터페이스를 이용하는 장치에 관한 것이다."}
{"patent_id": "10-2021-0007897", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능(AI), 빅데이터, 엣지 컴퓨팅(Edge Computing)와 같은 기술 발전에 따라, 장치에서 보다 많은 양의 데 이터를 보다 빠르게 처리하고자 하는 요구들이 대두되고 있다. 즉, 복잡한 연산을 수행하는 고대역폭 애플리케 이션은 더 빠른 데이터 처리와 더 효율적인 메모리 액세스가 필요하다. 그러나 CPU, GPU 등 연산장치들을 포함하는 호스트 디바이스들은 메모리를 포함하는 반도체 장치와 대부분 PCIe 프로토콜을 통해 연결되어 있어, 상대적으로 대역폭이 낮고 지연이 길며, 반도체 장치와의 메모리 공유와 일관 성 문제가 발생하고 있다."}
{"patent_id": "10-2021-0007897", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명이 해결하고자 하는 기술적 과제는 호스트 장치과 이기종 반도체 장치를 공통 인터페이스로 연결할 수 있는 스마트 스토리지 장치를 제공하는 것이다. 본 발명이 해결하고자 하는 기술적 과제는 이기종 반도체 장치 간 직접 연결로 액세스하여 동작 성능이 향상된 스마트 스토리지 장치를 제공하는 것이다. 본 발명의 기술적 과제들은 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술적 과 제들은 아래의 기재로부터 당업자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2021-0007897", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상술한 기술적 과제를 해결하기 위하여 몇몇 실시예에 따른 스마트 스토리지 장치는 호스트 장치와 연결되는 스 마트 인터페이스, 스마트 인터페이스에 CXL.cache 프로토콜 및 CXL.mem 프로토콜로 연결되어, 호스트 장치의 연 산 명령에 따라 가속 연산을 수행하는 가속기 및 스마트 인터페이스에 CXL.io 프로토콜로 연결되고, 호스트 장 치의 데이터 액세스 명령에 따라 스토리지 장치에 대한 데이터 액세스 동작을 제어하는 스토리지 컨트롤러를 포 함하고, 가속기는 스토리지 컨트롤러와 직접 연결되는 내부버스를 통해 상기 스토리지 장치에 직접적으로 액세스할 수 있다. 상술한 기술적 과제를 해결하기 위하여 몇몇 실시예에 따른 스마트 스토리지 장치는 호스트 장치와 연결되는 스 마트 인터페이스, 스마트 인터페이스에 CXL.mem 프로토콜 또는 CXL.io 프로토콜로 연결되고, 메모리 장치에 대 한 제1 액세스 동작을 제어하는 메모리 컨트롤러, 스마트 인터페이스에 CXL.io 프로토콜로 연결되고, 스토리지 장치에 대한 제2 액세스 동작을 제어하는 스토리지 컨트롤러를 포함하고, 스마트 인터페이스는 CXL.mem 프로토 콜과 CXL.io 프로토콜을 직접 연결하는 내부연결을 포함하여, 메모리 컨트롤러와 스토리지 컨트롤러 간 직접 액 세스할 수 있다. 상술한 기술적 과제를 해결하기 위하여 몇몇 실시예에 따른 스마트 스토리지 장치는 호스트 장치와 연결되는 스 마트 인터페이스, 스마트 인터페이스에 CXL.cache 프로토콜 및 CXL.mem 프로토콜로 연결되어, 호스트 장치의 연 산 명령에 따라 가속 연산을 수행하는 가속기, 스마트 인터페이스에 CXL.io 프로토콜로 연결되고, 호스트 장치 의 데이터 액세스 명령에 따라 스토리지 장치에 대한 제1 액세스 동작을 제어하는 스토리지 컨트롤러 및 스마트 인터페이스와 CXL.mem 프로토콜 또는 CXL.io 프로토콜로 연결되고, 메모리 장치에 대한 제2 액세스 동작을 제어 하는 메모리 컨트롤러를 포함하고, 스토리지 컨트롤러는 가속기 및 메모리 컨트롤러와 직접 액세스할 수 있다. 상술한 기술적 과제를 해결하기 위하여 몇몇 실시예에 따른 스마트 스토리지 장치의 동작방법은 호스트 장치로 부터 명령을 수신하면 CXL 인터페이스를 통해 가속기로 명령을 전달하는 단계, 가속기는 명령을 디코딩하여 추 출된 연산 정보에 기초하여 내부버스를 통해 스토리지 컨트롤러로 데이터 액세스를 요청하는 단계, 스토리지 컨 트롤러는 요청에 따라 스토리지 장치에 데이터 액세스를 수행하는 단계 및 가속기는 스토리지 장치로부터 수신 된 데이터 액세스 결과를 수신하여 명령에 기초한 가속 연산을 수행하는 단계를 포함할 수 있다."}
{"patent_id": "10-2021-0007897", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 발명의 기술적 사상에 따른 실시예들에 대해 설명한다. 도 1은 몇몇 실시예에 따른 스마트 스토리지 장치를 나타낸 블록도이다. 몇몇 실시예에서, 호스트 장치는 CPU(Central Processing Unit), GPU(Graphic Processing Unit), NPU(Neural Processing Unit), FPGA, 프로세서, 마이크로프로세서 또는 어플리케이션 프로세서(Application Processor, AP) 등에 해당할 수 있다. 몇몇 실시예에 따라, 호스트 장치는 시스템 온 칩(System-On-a- Chip, SoC)으로 구현될 수 있다. 호스트 장치는 예를 들면, 기본적으로 휴대용 통신 단말기(mobile phone), 스마트폰(smart phone), 태블릿 PC(tablet personal computer), 웨어러블 기기, 헬스케어 기기 또는 IOT(internet of things) 기기와 같은 모바일(mobile) 시스템, 또는 개인용 컴퓨터(personal computer), 랩탑 (laptop) 컴퓨터, 서버(server), 미디어 재생기(media player) 또는 내비게이션(navigation)과 같은 차량용 장 비(automotive device) 등이 될 수도 있다. 또한 호스트 장치는 통신 장치(미도시)를 포함하여, 다양한 통 신 규약에 따라 호스트 장치 외부의 다른 장치들과의 사이에서 신호의 송수신을 수행할 수 있다. 통신 장치 는 유선 또는 무선 연결을 수행하는 장치로 예를 들면 안테나, 트랜시버 및/또는 모뎀 등을 포함하여 구현될 수 있다. 호스트 장치는 통신 장치를 통해 예를 들면 이더넷 네트워크나 무선 통신이 가능할 수 있다. 호스트 장치는 호스트 프로세서와 호스트 메모리를 포함하고, 호스트 프로세서는 호스트 장치 의 동작을 전반적으로 제어하고, 호스트 메모리는 동작 메모리(Working memory)로서 호스트 프로세서의 동작에 필요한 명령, 프로그램 또는 데이터 등을 저장할 수 있다. 스마트 스토리지 장치는 몇몇 실시예에 따라 데이터 센터일 수도 있고, 인공지능 학습 데이터 장치일 수 도 있다. 스마트 스토리지 장치는 프로세싱-인-메모리(PIM, processing in memory) 또는 컴퓨팅-인-메모 리(CIM, computing in memory)와 같이, 연산이 가능하면서도 데이터를 저장할 수 있는 반도체 장치일 수 있다. 스마트 스토리지 장치는 스마트 인터페이스, 가속기, 스토리지 컨트롤러 및 메모리 컨트 롤러을 포함할 수 있다. 스마트 스토리지 장치는 몇몇 실시예에 따라 스마트 인터페이스, 가속 기, 스토리지 컨트롤러를 포함할 수 있고, 또는 몇몇 실시예에 따라 스마트 인터페이스, 스토리 지 컨트롤러, 메모리 컨트롤러를 포함할 수도 있고, 또는 몇몇 실시예에 따라 스마트 인터페이스, 가 속기, 스토리지 컨트롤러, 메모리 컨트롤러를 포함할 수도 있다. 도 1에 도시된 스마트 스토리지 장치는 몇몇 실시예에 따라 CXL 인터페이스를 이용하는 반도체 장치이다. 스마트 인터페이스는 몇몇 실시예에 따라 CXL(Computer eXpress Link) 인터페이스를 이용한다. CXL 인터페이스는 컴퓨터 디바이스 인터커넥터 규격으로서, 데이터 압축 및 암호화, 인공지능(AI) 같은 특수 작 업 부하의 급속한 혁신으로 인해 호스트 장치와 스마트 스토리지 장치가 함께 동작하는 이기종 컴퓨 팅 환경에서 호스트 장치와 스마트 스토리지 장치의 오버헤드 및 대기 시간을 줄이고 호스트 메모리와 메 모리 장치의 공간을 공유할 수 있게 해주는 인터페이스이다. 즉, 호스트 장치와 시스템 온칩, 복잡한 연산 을 수행하는 GPU, FPGA와 같은 가속 모듈이 직접 통신하고 메모리를 공유하도록 하는 것이다. 본 명세서의 스마 트 스토리지 장치)는 CXL 규격을 기반으로 한다. 호스트 장치는 스마트 인터페이스를 통해 가속기, 스토리지 컨트롤러, 메모리 컨트롤러 중 적어도 하나에 연결되어, 스마트 스토리지 장치의 동작을 전반적으로 제어할 수 있다. 스마트 인터페이스는 하위 프로토콜 CXL.io , CXL.cache , CXL.mem을 포함한다. CXL.io 프로토콜은 PCIe 트랜잭션 계층으로, 시스템에서 장치 검색, 인터럽트 관리, 레지스터에 의한 액세스 제공, 초기화 처리 및 신호 오류 처리 등에 사용한다. CXL.cache 프로토콜은 가속기가 호스트 장치의 메모리에 엑세스 할때 사용 될 수 있다. CXL.mem 프로토콜은 호스트 장치가 가속기의 전용 메모리 또는 스마트 메모리 장치 에 포함된 메모리 장치에 액세스할 때 사용될 수 있다. 가속기는 호스트 장치의 연산 명령에 따라 가속 연산을 수행할 수 있다. 몇몇 실시예에 따라 가속기 는 신경망 처리 유닛, AI 가속기, CPU, GPU(Graphic Processing Unit), DSP(Digital Signal Processing Unit), NPU(Neural Processing Unit), 보조 프로세서, 또는 다른 적합한 프로세서일 수 있다. 스토리지 컨트롤러는는 적어도 하나의 스토리지 장치와 연결되어 스토리지 장치에 대한 동작을 제어할 수 있다. 예를 들면 스토리지 장치에 저장된 데이터를 리드 또는 삭제하거나, 데이터를 라이트하는 등의 액세스 동작을 포함할 수 있다. 메모리 컨트롤러는는 적어도 하나의 메모리 장치와 연결되어 메모리 장치에 대한 동작을 제어할 수 있다. 예를 들면 메모리 장치에 저장된 데이터를 리드 또는 삭제하거나, 데이터를 라이트하는 등의 액 세스 동작을 포함할 수 있다. 도 1에는 도시하지는 않았으나 몇몇 실시예에 따라 스토리지 컨트롤러에 연결된 적어도 하나의 스토리지 장치, 메모리 컨트롤러에 연결된 적어도 하나의 메모리 장치는 스마트 스토리지 장치에 포함된 것일 수도 있고, 임베디드된 것일 수도 있고, 탈착가능하도록 구현된 것일 수도 있다. 구체적인 설명은 도 2 이후의 설명에서 설명한다. 메모리 컨트롤러는 호스트 장치와 CXL 인터페이스를 통해 매우 높은 대역폭으로 메모리 장치와 호스트 장치의 메모리 간의 데이터 일관성을 유지할 수 있다. 예를 들면, 호스트 장치가 스마트 스토리 지 장치에 포함된 메모리에 대해 캐시 일관성을 지원하는 호스트 장치의 워킹 메모리처럼 사용하게 하고, 상기 메모리 또한 Load/Store 메모리 명령을 통해 데이터에 접근할 수 있도록 할 수 있다. 데이터 일관성은 예 를 들면, MESI 프로토콜에 의하여 코히어런스 프로세싱(Coherence Processing)을 수행할 수 있다. MESI 프로토 콜은 무효(Invalid) 상태, 공유(Shared) 상태, 수정(Modified) 상태, 독점(Exclusive) 상태를 포함하여, 메모 리 장치와 호스트 장치의 메모리간 상태를 정의하여 정의된 상태에 따른 코히어런스 동작을 수행할 수 있다. 스마트 스토리지 장치는 가속기, 스토리지 컨트롤러, 메모리 컨트롤러 간 데이터 액세스 를 수행할 때 호스트 장치의 개입없이 가속기, 스토리지 컨트롤러 간, 또는 스토리지 컨트롤러, 메모리 컨트롤러 간에 내부 연결로 직접 액세스를 수행할 수 있다. 도 2는 몇몇 실시예에 따라 도 1의 스마트 스토리지 장치를 구체적으로 나타낸 블록도이다. 도 3은 몇몇 실시예 에 따라 도 2의 가속기를 구체적으로 나타낸 블록도이고, 도 4는 몇몇 실시예에 따라 도 2의 스토리지 컨트롤러 를 구체적으로 나타낸 블록도이다. 도 2 내지 도 4를 참조하면, 몇몇 실시예에 따라 가속기는 호스트 장치와 스마트 인터페이스의 CXL.cache 프로토콜 및 CXL.mem 프로토콜을 통해 연결될 수 있다. 가속기는 호스트 장치로부터 명령 (A.CMD) 및 연산 데이터(A.cache/mem)를 송수신할 수 있고, 데이터를 보내는 주체에 따라 CXL.cache 프로토콜 또는 CXL.mem 프로토콜 중 하나를 선택하여 데이터를 송수신할 수 있다. 가속기는 적어도 하나의 전용 메모리를 포함할 수 있다. 전용 메모리는 다양한 실시예에 따라 비휘발 성 메모리일 수도 있고 휘발성 메모리일 수도 있다. 전용 메모리는 동작 메모리로서 몇몇 실시예에 따라 DRAM(dynamic RAM), SRAM(static RAM), 또는 SDRAM(synchronous dynamic RAM) 등의 휘발성 메모리일 수도 있고, 몇몇 실시예에 따라 비휘발성 메모리 중 적어도 하나일 수 있다. 전용 메모리는 다양한 실시예에 따라 가속기 내에 임베디드되어 구현될 수도 있고, 가속기 외 부에 배치되어 전기적으로 연결된 것일 수도 있으며 또는 가속기에 탈착가능한 메모리로 구현된 것일 수도 있다. 몇몇 실시예에 따라 스토리지 컨트롤러는 호스트 장치와 스마트 인터페이스의 CXL.io 프로토콜을 통해 연결될 수 있다. 호스트 장치와 스토리지 컨트롤러는 스마트 인터페이스의 CXL.io 프로토 콜을 통해 데이터 액세스 요청(S.CMD) 및 데이터(S.Data)를 송수신할 수 있다. 스토리지 컨트롤러는 적어도 하나의 스토리지 장치를 포함할 수 있다. 스토리지 장치는 비휘발 성 메모리 장치로서, 비휘발성 메모리는 예를 들면 플래시 메모리(예: NAND flash 또는 NOR flash 등), 하드 드 라이브, 또는 솔리드 스테이트 드라이브(solid state drive(SSD)) 또는 다른 스토리지 기술을 포함할 수 있다. 스토리지 장치는 스토리지 컨트롤러의 제어에 따라 데이터 삭제, 기입 또는 독출 동작 등을 수행할 수 있다. 이를 위하여, 스토리지 장치는 입출력 라인을 통해 스토리지 컨트롤러로부터 명령(CMD), 어 드레스(ADDR)를 수신하고, 스토리지 컨트롤러와 프로그램 동작 또는 독출 동작을 위한 데이터(DATA)를 송 수신한다. 또한, 스토리지 장치는 제어 라인을 통하여 제어 신호(CTRL)를 수신할 수 있고, 스토리지 장치 는 스토리지 컨트롤러로부터 파워(PWR)를 제공받을 수 있다. 몇몇 실시예에 따라 가속기와 스토리지 컨트롤러는 내부 버스(Ipath1)로 연결될 수 있다. 가속기 는 내부 버스(Ipath1)를 통해 스토리지 컨트롤러에 직접적으로 액세스할 수 있다. 즉, 가속기는 호스트 장치의 개입 없이 스토리지 장치의 데이터에 직접적으로 액세스 요청을 할 수 있다. 가속기는 몇몇 실시예에 따라 커맨드 디코더, 일관성 엔진, DMA(Direct Memory Access) 엔진 , 전용 메모리 컨트롤러 및 연산 모듈을 포함할 수 있고 각 구성요소는 가속기 시스템 버스 를 통해 전기적으로 서로 연결될 수 있다. 커맨드 디코더는 호스트 장치로부터 명령, 예를 들어 연산 명령을 수신하면, 수신된 연산 명령을 디코 딩하여 연산 정보를 추출한다. 연산 정보는 예를 들면 연산 종류, 연산할 데이터의 주소 등을 포함할 수 있다. 일관성 엔진은 가속기의 전용 메모리에 저장된 데이터와 호스트 장치의 메모리에 있는 데이터 간 통일성을 유지한다. 즉, 호스트 장치가 가속기의 전용 메모리에 저장된 데이터를 호스 트 장치에 장착된 메모리(Host-Attached Memory)처럼 사용하도록 코히어런스 프로세싱을 수행한다. 예를 들어 전용 메모리에 새로운 연산 데이터를 저장하게 되면, 일관성 엔진은 호스트 장치의 메모리에도 상기 연산 데이터를 동일하게 저장하기 위해 CXL.cache 프로토콜을 통해 코히어런스 프로세싱을 수행할 수 있다. 마찬가지로 호스트 장치는 CXL.mem 프로토콜을 통해 호스트 장치의 메모리에 있는 데이터를 전용 메모리에 공유하기 위한 코히어런스 프로세싱을 수행할 수 있다. DMA 엔진은 내부 버스(Ipath1)에 연결되어, 스토리지 컨트롤러에 직접 액세스 할 수 있다. 연산 모 듈 또는 호스트 장치의 요청에 따라 스토리지 장치에 데이터를 쓰거나 리드해야 할 경우, DMA 엔 진은 스토리지 컨트롤러에 데이터 액세스 요청을 할 수 있다. 전용 메모리 컨트롤러는 전용 메모리에 대한 동작을 제어할 수 있다. 예를 들어 전용 메모리에 저장된 연산 데이터를 리드하거나 삭제하거나 새로운 연산 데이터를 라이트하도록 제어할 수 있다. 연산 모듈은 디코딩된 연산 명령에 따라 가속 연산을 수행할 수 있다. 가속 연산은 몇몇 실시예에 따라 신 호 처리, 이미지 신호 처리 뿐 아니라 뉴럴 프로세싱, 예를 들면 CNN(Convolution Neural Network), R- CNN(Region with Convolution Neural Network), RPN(Region Proposal Network), RNN(Recurrent Neural Network), S-DNN(Stacking-based deep Neural Network), S-SDNN(State-Space Dynamic Neural Network), Deconvolution Network, DBN(Deep Belief Network), RBM(Restricted Boltzman Machine), Fully Convolutional Network, LSTM(Long Short-Term Memory) Network, Classification Network 등 다양한 종류의 네트워크에 기초 한 연산 처리를 포함한다. 스토리지 컨트롤러는 몇몇 실시예에 따라 스케줄러, 제어 유닛, 내부 메모리 및 비휘발성 메모리 컨트롤러를 포함할 수 있고, 각 구성요소는 내부 시스템 버스를 통해 전기적으로 서로 연결될 수 있다. 스케줄러는 내부 버스(Ipath1)와 스마트 인터페이스에 각각 연결되고, 호스트 장치의 액세스 요 청과 가속기의 액세스 요청을 수신하면, 기설정된 정책에 따라 동작순서를 스케줄링할 수 있다. 기설정된 정책은 몇몇 실시예에 따라, 가속기의 액세스 요청을 호스트 장치의 액세스 요청보다 우선순위를 부여 하는 것일 수 있다. 또는 호스트 장치의 긴급 요청을 이미 순서가 정해진 다른 요청들보다 앞서 처리하도록 우선순위를 부여하는 것일 수 있다. 제어 유닛은 스토리지 컨트롤러의 동작을 전반적으로 제어하고, 예를 들면, 스토리지 장치에 데 이터를 쓰거나 읽어오거나 삭제하는 등 데이터 액세스 동작 및 스토리지 장치의 내부 동작 등을 수행할 수 있다. 내부 메모리는 스토리지 컨트롤러의 동작 메모리로서, 스토리지 컨트롤러의 구동 중에 발생하는 동작 데이터들을 저장할 수 있다. 비휘발성 메모리 컨트롤러는 스토리지 컨트롤러에 연결된 적어도 하나의 비휘발성 메모리 장치를 제 어할 수 있다. 도 5 및 도 6은 도 2의 스마트 스토리지 장치의 동작방법을 설명하기 위한 흐름도이다. 도 5를 참조하면, 먼저 호스트 장치는 명령을 스마트 스토리지 장치로 전송한다. 스마트 스토리지 장 치의 스마트 인터페이스는, 명령이 어느 구성에 대한 것인지 확인하고 해당 구성요소의 프로토콜을 선택 하여 전송한다(S11). 예를 들어 호스트 장치가 연산 명령을 보낸 것이면, 스마트 인터페이스는 가속기 에 대한 프로토콜(CXL.cache 또는 CXL.mem)로 연결한다. 가속기는 수신된 연산 명령(CMD1)을 디코딩하여 연산 정보를 추출한다(S12). 연산 정보는 예를 들면 연산 종류, 연산을 위해 필요한 데이터의 주소 등을 포함할 수 있다. 몇몇 실시예에 따라 연산 명령은 가속기가 수행해야 할 적어도 하나 이상의 동작(operation)을 포함할 수 있다. 이하 설명하는 실시예는 연산 명령(CMD1) 은 스토리지 장치의 데이터를 기초로 가속 연산을 수행하는 경우라고 가정한다. 가속기는 스토리지 컨트롤러로 데이터 액세스 요청을 전송한다(S13). 이때 액세스 요청은 호스트 장 치의 개입 없이, 내부 버스(Ipath1)를 통해 스토리지 컨트롤러에 직접 요청할 수 있다. 스토리지 컨트롤러는 가속기의 액세스 요청을 수신하면(S14) 기설정된 정책에 따라 정해지는 동작 순 서로 상기 액세스 요청에 따른 동작을 스토리지 장치에 대해 수행한다(S15). 예를 들면, 스토리지 컨트롤 러는 스케줄러를 통해 복수의 액세스 요청에 대해 기설정된 정책에 따라 스케줄링하여 동작 순서를 정한다. 제어 유닛 및 비휘발성 메모리 컨트롤러는 스케줄러가 정해준 순서에 따라 비휘발성 메 모리 장치에 액세스 동작을 수행한다. 스토리지 컨트롤러는 액세스 수행 결과를 가속기로 전송한다(S16). 예를 들면, 데이터 리드 요청인 경우 리드된 데이터(이하 제1 데이터)를 회신하고, 데이터 라이트 또는 삭제 요청인 경우 수행 완료를 회신한다. 가속기는 수행 결과, 예를 들어 리드된 제1 데이터를 수신하면(S17), 전용 메모리에 저장하기 위해 호스트 장치와 코히어런스 프로세싱을 수행한다(S18). 이때 CXL.cache 프로토콜을 통해 코히어런스 프로세 싱을 수행할 수 있다. 코히어런스 프로세싱은 호스트 장치측 코히어런스 관련 구성요소와 일관성 엔진이 수행할 수 있는데, 일관성 엔진이 호스트 장치로부터 코히어런스 처리 완료를 확인 후, 전용 메 모리 컨트롤러를 통해 제1 데이터를 전용 메모리에 저장할 수 있다(S19). 가속기는 후속 동작으로 전용 메모리에 저장된 제1 데이터를 리드하여, 연산을 수행한다(S20). 이때 연산은 연산 정보에 포함된 연산 종류에 기초할 수 있다. 가속기는 연산 수행으로 생성된 제2 데이터를 전 용 메모리에 저장하기 위해 호스트 장치와 코히어런스 프로세싱을 수행한다(S21). 이때 CXL.cache 프 로토콜을 통해 코히어런스 프로세싱을 수행할 수 있다. 일관성 엔진이 호스트 장치로부터 코히어런스 처리 완료를 확인하면, 전용 메모리 컨트롤러는 제2 데이터를 전용 메모리에 저장한다(S22). 가속기는 연산 명령(CMD1)에 따른 적어도 하나 이상의 동작들이 모두 완료되면, 완료 메시지를 스마트 인 터페이스를 통해 호스트 장치로 전송한다. 이때 완료 메시지에는 제2 데이터 또는 제2 데이터에 기초 하여 설정되는 값이 포함될 수 있다. 상술한 실시예는 스토리지 장치에 저장된 데이터를 활용하여 가속 연산을 수행하는 경우를 가정한 것이나, 본 발명의 실시예에 이에 한정되는 것으 아니며, 전용 메모리 또는 호스트 장치의 메모리의 초기 데이 터를 기초로 가속 연산을 수행할 수 있다. 이 경우 가속 연산 결과를 호스트 장치에 공유하는 것은 S19 내 지 S25와 같이 수행될 수 있으나 리드하려는 초기 데이터의 위치에 따라 S13 내지 S17 단계는 수행하지 않을 수 도 있다. 한편 도 6을 참조하면, 호스트 장치가 명령(CMD2)을 전송하면(S30), 스마트 스토리지 장치는 스마트 인터페이스에서 어느 구성에 대한 것인지 확인하고 해당 구성요소의 프로토콜을 선택하여 전송한다(S31). 예를 들어 호스트 장치가 데이터 액세스를 요청한 것이면, 스마트 인터페이스는 스토리지 컨트롤러 에 대한 CXL.io 프로토콜로 연결한다. 스토리지 컨트롤러는 호스트 장치로부터의 명령(CMD2)을 수신하면, 스케줄러에서 기설정된 정책 에 따라 동작 순서를 정한다. 제어 유닛 및 비휘발성 메모리 컨트롤러는 스케줄러가 정해준 순 서에 따라 데이터 액세스 동작을 수행한다(S32). 스토리지 컨트롤러는 S32 수행 결과를 호스트 장치로 전송한다. 예를 들면, 명령(CMD2)이 데이터 리드 요청이면, 리드된 데이터를, 데이터 라이트나 삭제 요청이면, 수행 완료를 호스트 장치로 전송한다. 호스트 장치는 스토리지 컨트롤러와 CXL.io 프로토콜을 통해 상기 수행 결과를 수신한다. 도 7은 몇몇 실시예에 따라 도 1의 스마트 스토리지 장치를 구체적으로 나타낸 블록도이고, 도 8은 몇몇 실시예 에 따른 도 1의 스마트 인터페이스를 구체적으로 나타낸 블록도이다. 도 7 및 도 8을 참고하면, 스마트 스토리지 장치는 호스트 장치로부터 수신된 신호를 스마트 인터페 이스에서 CXL.mem 프로토콜, CXL.io 프로토콜 또는 CXL.cache 프로토콜의 신호로 변형하여 각각의 구성요 소(200, 300, 400)로 전송할 수 있다. 스마트 인터페이스는 호스트 장치와 통신하기 위해 복수의 계층으로 구성될 수 있다. 각각의 계층은 송수신되는 전기적 신호를 기설정된 정의에 기초하여 해석되어, 스마트 스토리지 장치내 각 구성요소들 (예를 들어 200, 300,400)을 동작시키기 위한 신호로 변형시킬 수 있다. 스마트 인터페이스는 물리적 레이어, 아비터, 링크 레이어, 트랜잭션 레이어를 포함 할 수 있고 각 구성은 본 명세서에서 설명하지 않은 부분은 CXL 인터페이스 규격에 기초하여 동작한다고 할 것 이다. 또한 스마트 인터페이스는 도시되지 않은 그 이상의 통신 레이어를 더 포함할 수 있다. 물리적 레이어는 호스트 장치로 전송되거나(TX) 호스트 장치로부터 수신(RX)되는 전기적 신호를 해석한다. 아비터는 물리적 레이어에서 출력된 신호를 어느 하위 프로토콜로 보내야 할지 멀티플렉싱 할 수 있다. 예를 들어 가속기에 대한 것이면 CXL.cache 또는 CXL.mem 링크 레이어로, 메모리 장치 , 스토리지 장치나 PCI 인터페이스를 쓰는 이종 장치에 대해서는 CXL.io 링크레이어 또는 PCIe 링크레이어로 출력한다. 트랜잭션 레이어는 CXL.cache 또는 CXL.mem 링크 레이어, CXL.io 링크레이어 또는 PCIe 링크레 이어를 통해 전송된 신호를 각 프로토콜에 상응하는 트랜잭션 레이어(141, 142, 143)로 수신하여 출력한다. 스마트 인터페이스는 CXL.mem프로토콜과 상기 CXL.io 프로토콜을 직접 연결하는 내부연결(Ipath2)을 포함 하고, 내부연결은(Ipath2)은 메모리 컨트롤러와 스토리지 컨트롤러 간 데이터 액세스를 직접적으로 연결한다. 몇몇 실시예에 따라 CXL.cache 또는 CXL.mem 링크 레이어, CXL.io 링크레이어는 내부 연 결버스(IPath2)를 통해 직접 연결될 수 있다. 몇몇 실시예에 따라 스토리지 컨트롤러는 호스트 장치와 스마트 인터페이스의 CXL.io 프로토콜을 통해 연결될 수 있다. 예를 들어 메모리 컨트롤러는 CXL.mem프로토콜 또는 CXL.io 프로토콜로 연결될 수 있고, 스토리지 컨트롤 러는 CXL.io 프로토콜로 연결될 수 있다. 몇몇 실시예에 따라 스마트 스토리지 장치는 각 구성요소(200,300,400) 간 보다 효율적인 데이터 액세스 를 위해 라우터, 메모리 프로토콜 핸들러 및 스토리지 프로토콜 핸들러를 더 포함할 수 있다. 라우터는 CXL.io 트랜잭션 레이어에 연결되어, 트랜잭션 레이어에서 수신된 신호를 메모리 컨트롤러 또는 스토리지 컨트롤러로 라우팅할 수 있다. 라우터는 몇몇 실시예에 따라 스마트 인터페이스 의 내부에 포함될 수도 있고, 몇몇 실시예에 따라 스마트 인터페이스와 스토리지 컨트롤러, 메 모리 컨트롤러와 각각 별개로 배치구현될 수도 있다할 것이다. 메모리 프로토콜 핸들러는 CXL.mem 트랜잭션 레이어 및 라우터와 메모리 컨트롤러 사이에 연결되어, 메모리 장치에 대한 데이터 액세스 요청을 수신하여 메모리 컨트롤러로 전달하고, 메모리 컨트롤러에서 트랜잭션 레이어 또는 라우터로 요청결과를 회신할 수 있다. 메모리 프로토콜 핸 들러는 몇몇 실시예에 따라 스마트 인터페이스의 내부에 포함될 수도 있고, 몇몇 실시예에 따라 메모 리 컨트롤러와 각각 별개로 배치구현될 수도 있으며, 몇몇 실시예에 따라 메모리 컨트롤러의 내부에 포함될 수도 있다. 스토리지 프로토콜 핸들러는 라우터 및 스토리지 컨트롤러 사이에 연결되어, 스토리지 장치 에 대한 데이터 액세스 요청을 수신하여 스토리지 컨트롤러로 전달하고, 트랜잭션 레이어로 요 청결과를 회신할 수 있다. 스토리지 프로토콜 핸들러는 몇몇 실시예에 따라 스마트 인터페이스의 내 부에 포함될 수도 있고, 몇몇 실시예에 따라 스토리지 컨트롤러와 각각 별개로 배치구현될 수도 있으며, 몇몇 실시예에 따라 스토리지 컨트롤러의 내부에 포함될 수도 있다. 스토리지 프로토콜 핸들러는 라우터로부터 데이터 액세스 명령을 수신하면, 액세스 명령을 파싱하여 요청되는 데이터의 주소를 확인한다. 이때 액세스 명령에는 동작 종류, 데이터의 주소 또는 데이터를 포함할 수 있다. 스토리지 프로토콜 핸들러는 액세스 명령에서 파싱한 데이터의 주소가 스토리지 장치인 경우, 스토리 지 컨트롤러로 상기 액세스 명령을 전달한다. 스토리지 프로토콜 핸들러는 액세스 명령에서 파싱한 데이터의 주소가 메모리 장치인 경우, 내부연결 (Ipath2)을 통해 메모리 프로토콜 핸들러로 상기 액세스 명령을 전달한다. 메모리 컨트롤러는 메모리 프로토콜 핸들러를 통해 전달된 액세스 명령에 기초하여 메모리 장치에 대한 데이터 액세스 동작을 수행하고, 수행 결과를 스토리지 프로토콜 핸들러로 알려줄 수 있다. 스토리지 프로토콜 핸들러는 파 싱한 액세스 명령에 상응하는 수행 동작의 완료되면, 수행 완료를 스마트 인터페이스를 통해 호스트 장치 로 알려줄 수 있다. 스토리지 컨트롤러 및 비휘발성 메모리 장치에 대해서는 도 2와 중복되므로, 설명을 생략한다. 메모리 컨트롤러는 메모리 장치에 대한 동작을 제어할 수 있다. 예를 들어 메모리 장치에 저장 된 연산 데이터를 리드하거나 삭제하거나 새로운 연산 데이터를 라이트하도록 제어할 수 있다. 메모리 장치는 몇몇 실시예에 따라 DRAM(dynamic RAM), SRAM(static RAM), 또는 SDRAM(synchronous dynamic RAM) 등의 휘발성 메모리일 수도 있고, 몇몇 실시예에 따라 비휘발성 메모리 중 적어도 하나일 수 있다. 비휘발성 메모리는 예를 들면 OTPROM(one time programmable ROM), PROM(programmable ROM), EPROM(erasable and programmable ROM), EEPROM(electrically erasable and programmable ROM), mask ROM, flash ROM, 플래시 메모리(예: NAND flash 또는 NOR flash 등), 하드 드라이브, 또는 솔리드 스테이트 드라이 브(solid state drive(SSD)) 중 적어도 하나로 구현될 수 있다. 또는 메모리 카드(예를 들어, CF(compact flash), SD(secure digital), Micro-SD(micro secure digital), Mini-SD(mini secure digital), xD(extreme digital), MMC(multi-media card) 등), USB 포트에 연결 가능한 외부 메모리(예를 들어, USB 메모리) 등과 같은 형태로 구현될 수도 있다. 메모리 장치는 일 예로 스마트 스토리지 장치의 동작 메모리일 수 있다. 메모리 장치는 데이터 저장 용도에 따라 임베디드된 메모리 형태로 구현되거나, 탈부착이 가능한 메모리 형태로 구현될 수도 있다. 예 를 들어, 스마트 스토리지 장치의 구동을 위한 데이터의 경우 스마트 스토리지 장치에 임베디드된 메모리에 저장되고, 스마트 스토리지 장치의 확장 기능을 위한 데이터의 경우 스마트 스토리지 장치 에 탈부착이 가능한 메모리에 저장될 수 있다. 도 9 내지 도 11은 도 7의 스마트 스토리지 장치의 동작방법을 설명하기 위한 흐름도이다. 도 9를 참조하면, 호스트 장치가 명령을 전송하면(S100), 스마트 인터페이스는 명령을 전송할 대상을 기초로 하는 프로토콜을 확인한다(S101). 만약 상기 명령이 스토리지 장치에 대한 것이면 CXL.io프로토콜을 선택하고(S102, Yes), 스토리지 프로토 콜 핸들러는 명령을 파싱한다(S110). 스토리지 프로토콜 핸들러는 파싱된 명령에서 요청할 데이터의 주소 정보를 확인하여(S111) 스토리지 장치에 속한 주소 정보(Storage ID)인 경우, 스토리지 컨트롤러로 데이터 액세스 명령(CMD1)을 전송한다. 스토리지 컨트롤러는 데이터 액세스 명령(CMD1)에 기초하여(S112), 상기 주소 정보에 기초한 제1 데이터를 리드하여(S113), 스토리지 프로토콜 핸들러로 전송한다. 한편, 파싱된 명령에 기초하여 추가적으로 해야할 동작이 없는 경우(S114) 스토리지 프로토콜 핸들러는 수 행 완료를 호스트 장치로 알린다(S120) 한편, 파싱된 명령에 기초하여 메모리 장치에 제1 데이터를 라이트해야 하는 경우(도 9, S114), 스토리지 프로토콜 핸들러는 내부 연결(Ipath2)를 통해 데이터 액세스 명령(CMD2) 및 제1 데이터를 메모리 프로토콜 핸들러로 전달한다. 메모리 프로토콜 핸들러는 데이터 액세스 명령(CMD2) 및 제1 데이터를 수신하고 (S115) 메모리 컨트롤러로 메모리 장치에 대한 데이터 액세스를 요청한다(S116). 메모리 컨트롤러는 제2 데이터를 메모리 장치에 라이트하고, 액세스 완료 메시지를 메모리 프로토콜 핸들러로 전송한다. 메모리 프로토콜 핸들러는 수행 완료를 스토리지 프로토콜 핸들러에 알려주 고, 스토리지 프로토콜 핸들러는 최종적으로 호스트 장치로 수행 완료를 알린다(S120). 한편, 파싱된 명령에 기초하여 메모리 장치로부터 제3 데이터를 리드해야 하는 경우(도 10, S114), 스토리 지 프로토콜 핸들러는 내부 연결(Ipath2)를 통해 데이터 액세스 명령(CMD3)을 메모리 프로토콜 핸들러 로 전달한다. 메모리 프로토콜 핸들러는 데이터 액세스 명령(CMD3)을 수신하고(S133) 메모리 컨트롤 러로 메모리 장치에 대한 데이터 액세스를 요청한다(S134). 메모리 컨트롤러는 메모리 장치에서 제3 데이터를 리드한다(S135). 몇몇 실시예에 따라 스토리지 컨 트롤러는 내부 연결(Ipath2)를 통해 수신된 제3 데이터를 스토리지 장치에 라이트하고(S136) 완료메 시지를 메모리 프로토콜 핸들러로 전송한다(S137). 스토리지 프로토콜 핸들러는 최종적으로 호스트 장치로 수행 완료를 알린다(S138). 도 11에서, 스마트 인터페이스가 확인한 프로토콜이 CXL.mem 프로토콜인 경우(S102), 호스트 장치가 보낸 명령(CMD)을 메모리 프로토콜 핸들러로 전송한다(S140). 메모리 프로토콜 핸들러는 명령(CMD4) 에 따른 액세스 요청을 메모리 컨트롤러로 전송하고(S141), 메모리 컨트롤러는 메모리 장치에 대해 요청에 상응하는 동작을 수행한 후(S142), 수행 결과를 메모리 프로토콜 핸들러로 알려준다. 메모리 프로토콜 핸들러는 수행 결과를 호스트 장치로 전달한다. 상술한 스마트 스토리지 장치는 단일의 스마트 인터페이스를 통해 호스트 장치가 스마트 스토리지 장 치 내 구성요소, 예를 들면 가속기, 스토리지 장치, 메모리 장치 중 적어도 두 개의 구성을 별개의 장치 또는 단일 장치로 간주되게 할 수 있다. 이에 따라 호스트 장치가 개입하여 데이터 전달을 해야하는 레이턴 시 오버헤드가 줄어들 수 있고, 각 구성요소간 물리적 연결을 제공하기 때문에 데이터 일관성 유지를 위한 소프 트웨어적 오버헤드를 줄일 수 있다. 이상 첨부된 도면을 참조하여 본 발명의 실시예들을 설명하였으나, 본 발명은 상기 실시예들에 한정되는 것이"}
{"patent_id": "10-2021-0007897", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "아니라 서로 다른 다양한 형태로 제조될 수 있으며, 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자는 본 발명의 기술적 사상이나 필수적인 특징을 변경하지 않고서 다른 구체적인 형태로 실시될 수 있다는 것을 이해할 수 있을 것이다. 그러므로 이상에서 기술한 실시예들은 모든 면에서 예시적인 것이며 한정적이 아닌 것으 로 이해해야만 한다."}
{"patent_id": "10-2021-0007897", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 몇몇 실시예에 따른 스마트 스토리지 장치를 나타낸 블록도이다. 도 2는 몇몇 실시예에 따라 도 1의 스마트 스토리지 장치를 구체적으로 나타낸 블록도이다. 도 3은 몇몇 실시예에 따라 도 2의 가속기를 구체적으로 나타낸 블록도이다. 도 4는 몇몇 실시예에 따라 도 2의 스토리지 컨트롤러를 구체적으로 나타낸 블록도이다. 도 5 및 도 6은 도 2의 스마트 스토리지 장치의 동작방법을 설명하기 위한 흐름도이다. 도 7은 몇몇 실시예에 따라 도 1의 스마트 스토리지 장치를 구체적으로 나타낸 블록도이다. 도 8은 몇몇 실시예에 따른 도 1의 스마트 인터페이스를 구체적으로 나타낸 블록도이다. 도 9 내지 도 11은 도 7의 스마트 스토리지 장치의 동작방법을 설명하기 위한 흐름도이다."}
