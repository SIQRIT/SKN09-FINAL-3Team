{"patent_id": "10-2022-0107934", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0029452", "출원번호": "10-2022-0107934", "발명의 명칭": "메모리 프로세서를 이용한 부동 소수점 연산 방법 및 장치", "출원인": "삼성전자주식회사", "발명자": "김진성"}}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "메모리 프로세서를 이용한 부동 소수점 연산-상기 부동 소수점 연산은 배정밀도 부동 소수점 행렬인 제1 행렬과제2 행렬의 곱셈인- 방법에 있어서,상기 부동 소수점 연산에서 에뮬레이션 필요 여부를 판단하는 단계;상기 에뮬레이션 필요 여부 판단 결과에 기초하여 상기 에뮬레이션에 기반한 상기 부동 소수점 연산에 상기 메모리 프로세서(Memory Processor)의 이용 여부를 판단하는 단계;상기 메모리 프로세서의 이용 여부 판단 결과에 기초하여 상기 에뮬레이션의 각 단계별로 상기 메모리 프로세서의 이용 여부를 개별적으로 판단하는 단계; 및상기 판단 결과에 기초하여 상기 제1 행렬과 상기 제2 행렬의 곱셈을 하는 단계;를 포함하는,부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 에뮬레이션 필요 여부를 판단하는 단계는전자 장치에서 배정밀도 부동 소수점 연산을 하드웨어적으로 또는 소프트웨어적으로 지원하는지 여부에 기초하여 결정하는 단계를 포함하는,부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 에뮬레이션은 분할(split) 단계, 행렬 곱(matrix multiplication) 연산 단계 및 합산(Summation) 단계를 포함하는,부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 에뮬레이션에 기반한 부동 소수점 연산은상기 분할 단계에서 상기 메모리 프로세서의 이용 여부에 기초하여 상기 제1 행렬이 복수의 제1 서브 행렬들로분할되고 상기 제2 행렬이 복수의 제2 서브 행렬들로 분할되는 단계;상기 행렬 곱 연산 단계에서의 상기 메모리 프로세서의 이용 여부에 기초하여 상기 제1 서브 행렬들과 상기 제2서브 행렬들 사이의 행렬 곱들이 연산되는 단계; 및공개특허 10-2024-0029452-3-상기 합산 단계에서의 상기 메모리 프로세서의 이용 여부에 기초하여 상기 행렬 곱들을 합산하는 단계;를 포함하는,부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 부동 소수점 연산에 상기 메모리 프로세서의 이용 여부를 판단하는 단계는행렬의 크기, 서브 행렬의 크기 또는 상기 서브 행렬의 개수 중 적어도 하나에 기초하여 상기 메모리 프로세서를 이용할지 여부를 결정하는 단계를 포함하고상기 행렬의 크기는 상기 제1 행렬의 크기 또는 상기 제2 행렬의 크기 중 적어도 하나를 포함하고,상기 서브 행렬의 개수는 제1 서브 행렬들의 개수 또는 제2 서브 행렬들의 개수 중 적어도 하나에 기초하여 결정되는,부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 행렬의 크기는 상기 행렬의 행의 개수, 상기 행렬의 열의 개수 또는 상기 행렬에 포함되는 엘리먼트들의 크기-상기 엘리먼트들의 크기는 배정밀도 부동 소수점의 범위에 기초하여 결정되는- 중 적어도 하나에 기초하여 결정되는,부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5항에 있어서,상기 서브 행렬의 개수는 상기 배정밀도 부동 소수점의 범위에 기초하여 결정되는부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 에뮬레이션의 각 단계별로 상기 메모리 프로세서의 이용 여부를 판단하는 단계는분할 단계에서 상기 메모리 프로세서의 이용 여부, 행렬 곱 연산 단계에서의 상기 메모리 프로세서의 이용 여부또는 합산 단계에서의 상기 메모리 프로세서의 이용 여부 중 적어도 하나를 판단하는 단계를 포함하는,부동 소수점 연산 방법.공개특허 10-2024-0029452-4-청구항 9 제8항에 있어서,상기 분할 단계에서 상기 메모리 프로세서의 이용 여부는서브 행렬의 크기와 메모리 대역폭의 비교에 기초하여 결정되는부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 분할 단계에서 상기 메모리 프로세서의 이용 여부는상기 서브 행렬의 크기가 상기 메모리 대역폭보다 작은 경우, 상기 분할 단계에서 상기 메모리 프로세서를 이용하도록 결정되는부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제8항에 있어서,상기 행렬 곱 연산 단계에서의 상기 메모리 프로세서의 이용 여부는서브 행렬의 개수 또는 초당 부동 소수점 연산 (FLOPS, FLoating point Operations Per Second) 중 적어도 하나에 기초하여 결정되는,를 포함하는,부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제8항에 있어서,상기 합산 단계에서의 상기 메모리 프로세서의 이용 여부는서브 행렬의 크기와 메모리 대역폭의 비교에 기초하여 결정되는부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항에 있어서,상기 제1 행렬과 상기 제2 행렬의 곱셈을 하는 단계는상기 부동 소수점 연산에 상기 메모리 프로세서를 이용하는 경우, DMA(Direct Memory Access)를 통해 적어도 하나의 메모리 프로세서를 제어함으로써, 상기 제1 행렬과 상기 제2 행렬의 곱셈을 하는 단계를 포함하는,부동 소수점 연산 방법.공개특허 10-2024-0029452-5-청구항 14 제1 항에 있어서,상기 제1 행렬 및 상기 제2 행렬은 FP(Floating Point)64이고,상기 행렬을 분할한 서브 행렬은 FP32, FP16, BF(Brain Floating Point)16 또는 TF32(TensorFloat-32) 중 적어도 하나인,부동 소수점 연산 방법."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "하드웨어와 결합되어 제1항 내지 제14항의 방법을 실행시키기 위하여 컴퓨터 판독 가능한 기록 매체에 저장된컴퓨터 프로그램."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "프로세서로부터 부동 소수점 연산 요청을 수신하여 부동 소수점 연산을 수행하는 가속기(Accelerator)는가속기 코어(Accelerator Core); 메모리 시스템; 및상기 메모리 시스템에 포함된 메모리 프로세서;을 포함하고,상기 가속기는상기 부동 소수점 연산에서 에뮬레이션 필요 여부를 판단하고,상기 에뮬레이션 필요 여부 판단 결과에 기초하여 상기 에뮬레이션에 기반한 상기 부동 소수점 연산에 상기 메모리 프로세서(Memory Processor)의 이용 여부를 판단하고,상기 메모리 프로세서의 이용 여부 판단 결과에 기초하여 상기 에뮬레이션의 각 단계별로 상기 메모리 프로세서의 이용 여부를 개별적으로 판단하고, 그리고상기 판단 결과에 기초하여 제1 행렬과 제2 행렬의 곱셈을 하는,가속기."}
{"patent_id": "10-2022-0107934", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "부동 소수점 연산을 위한 컴퓨팅 장치는프로세서;메모리; 및상기 메모리에 포함된 메모리 프로세서;를 포함하고,부동 소수점 연산을 수행하기 위한 프로세서는상기 부동 소수점 연산에서 에뮬레이션 필요 여부를 판단하고,상기 에뮬레이션 필요 여부 판단 결과에 기초하여 상기 에뮬레이션에 기반한 상기 부동 소수점 연산에 상기 메모리 프로세서(Memory Processor)의 이용 여부를 판단하고,공개특허 10-2024-0029452-6-상기 메모리 프로세서의 이용 여부 판단 결과에 기초하여 상기 에뮬레이션의 각 단계별로 상기 메모리 프로세서의 이용 여부를 개별적으로 판단하고, 그리고상기 판단 결과에 기초하여 제1 행렬과 제2 행렬의 곱셈을 하는,프로세서."}
{"patent_id": "10-2022-0107934", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "배정밀도 부동 소수점 연산 방법은 부동 소수점 연산에서 에뮬레이션 필요 여부를 판단하는 단계; 에뮬레이션 필 요 여부 판단 결과에 기초하여 에뮬레이션에 기반한 부동 소수점 연산에 상기 메모리 프로세서(Memory Processor)의 이용 여부를 판단하는 단계; 메모리 프로세서의 이용 여부 판단 결과에 기초하여 에뮬레이션의 각 단계별로 메모리 프로세서의 이용 여부를 개별적으로 판단하는 단계; 및 판단 결과에 기초하여 제1 행렬과 제2 행렬의 곱셈을 하는 단계를 포함할 수 있다."}
{"patent_id": "10-2022-0107934", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "아래 실시예들은 메모리 프로세서를 이용한 부동 소수점 연산 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2022-0107934", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "메모리 장치는 연산 작업을 수행하는 프로세서와 기능이 완전히 분리될 수 있다. 따라서, 많은 양의 데이터에 대한 연산이 요구되는 신경망, 빅 데이터, 사물 인터넷 등과 같은 시스템에서 메모리 장치와 프로세서 간에 많 은 양의 데이터가 송수신됨에 따라 병목 현상이 자주 발생할 수 있다. 이와 같은 문제를 해결하기 위하여 메모 리 기능에 연산 작업을 수행하는 프로세서의 기능을 합친 메모리 장치로서, 프로세싱 인 메모리(Processing in memory: PIM)에 대한 연구가 활발하게 진행되고 있다. PIM의 연구가 활발하게 진행됨에 따라 PIM의 활용 분야도 다양해지고 있다. 예를 들어, PIM을 이용하여 Artificial Intelligence (AI) 연산을 수행하는 연구, PIM을 이용하여 High Performance Computing (HPC)을 처 리하는 연구가 진행되고 있다. 특히 HPC에서는 배정밀도 부동 소수점을 정확하게 연산하는 것이 중요하므로, 배 정밀도 부동 소수점 연산을 정확하고 빠르게 처리하기 위한 방법에 대한 연구가 중요할 수 있다."}
{"patent_id": "10-2022-0107934", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일 실시예에 따른 메모리 프로세서를 이용한 부동 소수점 연산-상기 부동 소수점 연산은 배정밀도 부동 소수점 행렬인 제1 행렬과 제2 행렬의 곱셈인- 방법에 있어서, 부동 소수점 연산-상기 부동 소수점 연산은 분할(split) 단계, 행렬 곱(matrix multiplication) 연산 단계 및 합산(Summation) 단계를 포함하는-에 메모리 프로세서 (Memory Processor)의 이용 여부를 판단하는 단계; 판단 결과에 기초하여 분할 단계에서 메모리 프로세서의 이 용 여부, 행렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부 또는 합산 단계에서의 메모리 프로세서의 이용 여부 중 적어도 하나를 판단하는 단계; 및 판단 결과에 기초하여 제1 행렬과 제2 행렬의 곱셈을 하는 단계를 포 함할 수 있다. 일 실시예에 따른 부동 소수점 연산은 분할 단계에서 메모리 프로세서의 이용 여부에 기초하여 제1 행렬이 복수 의 제1 서브 행렬들로 분할되고 제2 행렬이 복수의 제2 서브 행렬들로 분할되는 단계; 행렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부에 기초하여 상기 제1 서브 행렬들과 상기 제2 서브 행렬들 사이의 행렬 곱들이 연 산되는 단계; 합산 단계에서의 상기 메모리 프로세서의 이용 여부에 기초하여 상기 행렬 곱들을 합산하는 단계 를 포함할 수 있다. 일 실시예에 따른 부동 소수점 연산에 메모리 프로세서의 이용 여부를 판단하는 단계 행렬의 크기, 서브 행렬의 크기 또는 서브 행렬의 개수 중 적어도 하나에 기초하여 메모리 프로세서를 이용할지 여부를 결정하는 단계를 포함할 수 있다. 일 실시예에 따른 행렬의 크기는 제1 행렬의 크기 또는 제2 행렬의 크기 중 적어도 하나를 포함하고, 서브 행렬 의 개수는 제1 서브 행렬들의 개수 또는 제2 서브 행렬들의 개수 중 적어도 하나에 기초하여 결정될 수 있다. 일 실시예에 따른 행렬의 크기는 행렬의 행의 개수, 행렬의 열의 개수 또는 행렬에 포함되는 엘리먼트들의 크기 - 엘리먼트들의 크기는 배정밀도 부동 소수점의 범위에 기초하여 결정되는- 중 적어도 하나에 기초하여 결정될수 있다. 일 실시예에 따른 서브 행렬의 개수는 배정밀도 부동 소수점의 범위에 기초하여 결정될 수 있다. 일 실시예에 따른 상기 분할 단계에서 상기 메모리 프로세서의 이용 여부는 서브 행렬의 크기와 메모리 대역폭 의 비교에 기초하여 결정될 수 있다. 일 실시예에 따른 상기 분할 단계에서 상기 메모리 프로세서의 이용 여부는 서브 행렬 크기가 메모리 대역폭보 다 작은 경우, 분할 단계에서 메모리 프로세서를 이용하도록 결정될 수 있다. 일 실시예에 따른 행렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부는 서브 행렬의 개수 또는 초당 부동 소수점 연산 (FLOPS, FLoating point Operations Per Second) 중 적어도 하 나에 기초하여 결정될 수 있다. 일 실시예에 따른 상기 합산 단계에서의 상기 메모리 프로세서의 이용 여부는 서브 행렬의 크기와 메모리 대역 폭의 비교에 기초하여 결정될 수 있다. 일 실시예에 따른 제1 행렬과 제2 행렬의 곱셈을 하는 단계 부동 소수점 연산에 상기 메모리 프로세서를 이용하 는 경우, DMA(Direct Memory Access)를 통해 적어도 하나의 메모리 프로세서를 제어함으로써, 제1 행렬과 제2 행렬의 곱셈을 하는 단계를 포함할 수 있다. 일 실시예에 따른 제1 행렬 및 제2 행렬은 FP(Floating Point)80 또는 FP64이고, 행렬을 분할한 서브 행렬은 FP32, FP16, BF(Brain Floating Point)16 또는 TF32(TensorFloat-32) 중 적어도 하나일 수 있다."}
{"patent_id": "10-2022-0107934", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에서 개시되어 있는 특정한 구조적 또는 기능적 설명들은 단지 기술적 개념에 따른 실시예들을 설명하 기 위한 목적으로 예시된 것으로서, 실제로 구현된 형태는 다양한 다른 모습을 가질 수 있으며 본 명세서에 설 명된 실시예로만 한정되지 않는다. 제1 또는 제2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 이런 용어들은 하나의 구성요소 를 다른 구성요소로부터 구별하는 목적으로만 이해되어야 한다. 예를 들어 제1 구성요소는 제2 구성요소로 명명 될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이 해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 구성요소들 간의 관 계를 설명하는 표현들, 예를 들어 \"~간의\"와 \"바로~간의\" 또는 \"~에 이웃하는\"과 \"~에 직접 이웃하는\" 등도 마 찬가지로 해석되어야 한다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\" 또는 \"가지다\" 등의 용어는 실시된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함 을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 해당 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가진다. 일반적으로 사용되는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미를 갖는 것으로 해 석되어야 하며, 본 명세서에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 일 실시예에 따른 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이터 처 리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서는 다 른 구성요소로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프 로세서(예: 중앙 처리 장치 또는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센 서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특화 되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 이하, 실시예들을 첨부된 도면을 참조하여 상세하게 설명한다. 각 도면에 제시된 동일한 참조 부호는 동일한 부 재를 나타낸다. 도 1은 일 실시예에 따른 배정밀도 부동 소수점 연산을 위한 가속기 및 메모리 프로세서를 설명하기 위한 도면 이다. 일 실시예에 따른 메모리 프로세서는 메모리 시스템 내에서 제공되는 연산 장치인 프로세서 인 메모리(Process In Memory, PIM)를 포함할 수 있다. 다른 실시예에서 메모리 프로세서는 메모리 단위 각각에 연결된 근접 메모 리 프로세서(Near Memory Processor)를 포함할 수도 있다. 일 실시예에 따른 메모리 프로세서는 다양한 부동 소 수점(Floating Point) 연산을 수행할 수 있다. 다양한 부동 소수점 연산을 수행할 수 있는 하드웨어 및 소프트 웨어의 제공으로 메모리 프로세서의 응용 분야를 인공 지능(Artificial Intelligence, AI) 뿐만 아니라 High Performance Computing (HPC) 분야로 확장할 수 있다. 인공 지능 분야의 경우, 주로 FP(Floating Point)16 이 사용될 수 있다. 그리고 HPC 에서는 배정밀도 부동 소수점인 FP64(Double Precision Floating Point)가 주된 연산으로 사용될 수 있다. 배정밀도 부동 소수점인 FP64 연산을 위하여 장치가 소프트웨어적으로 에뮬레이션 (Emulation)을 지원하는 경우, FP64를 지원하지 않은 하드웨어 장치에서 FP64 연산을 수행할 수 있다. FP64는 FP16 대비 FLOPS (Floating Operation Per Second) 성능이 낮은 것이 일반적알 수 있다. 하지만 HPC 분야의 응 용 분야인 시뮬레이션의 경우 FP64가 주된 연산이므로, HPC 분야에서는 배정밀도 부동 소수점(예, FP64) 연산이 중요할 수 있다. 에뮬레이션은 임의의 시스템의 일부 또는 전체를 모방하는 것을 의미할 수 있다. 에뮬레이션은 소프트웨어 기반 에뮬레이션 또는 하드웨어 기반 에뮬레이션 중 적어도 하나를 포함할 수 있다. 소프트웨어 기반 에뮬레이션은 하드웨어로 수행되는 작업을 소프트웨어로 구현하여 처리하는 에뮬레이션일 수 있다. 예를 들어, 소프트웨어 기 반 에뮬레이션은 FP 64 연산을 지원하기 위해 메모리 시스템 내부의 연산자에 FP 64용 연산 알고리즘(예, Ozaki Scheme)을 이용하여 처리하는 에뮬레이션을 포함할 수 있다. 하드웨어 기반 에뮬레이션은 기존 하드웨어와 동일 한 성능을 내도록 처리하게 만들어 개발(예, 디버깅 등)의 효율성을 높이기 위해 제공되는 에뮬레이션을 의미할 수 있다. 부동 소수점 에뮬레이션(Emulation)은 일부 FPU(Floating Point Unit)가 포함되어 있지 않은 컴퓨터 아키텍처에 서 FPU 하드웨어의 에뮬레이션을 의미할 수 있다. 예를 들어, 부동 소수점 에뮬레이션은 컴퓨터 아키텍처에 포 함되지 않은 부동 소수점(예, FP64) 연산을 컴퓨터 아키텍처에 포함된 부동 소수점(예, FP16, FP32 등)에 기초 하여 연산하는 방법을 의미할 수 있다. FP64 에뮬레이션은 배정밀도 부동 소수점 연산을 위한 알고리즘으로서, 예를 들어, Ozaki Scheme일 수 있다. Ozaki Scheme은 FP64로 표현된 두 행렬(Matrix) 간의 행렬 곱 (General Matrix-to-Matrix Multiplication, GEMM)을 FP16을 이용해 반올림 오차(Rounding Error) 없이 FP64로 에뮬레이 션하는 방법을 의미할 수 있다. FP64 에뮬레이션의 경우, GEMM 연산은 오버헤드가 클 수 있다. 따라서 오버헤드 를 줄이기 위해 FP64 에뮬레이션의 일부 단계를 메모리 프로세서에서 처리하도록 할 수 있다. 가속기(Accelerator, ACC)와 메모리 시스템(Memory System) 사이의 데이터 전송에서의 대역폭 (Bandwidth) 상 한에 따른 지연이 발생할 수 있다. 하지만, 메모리 내부 연산 장치인 메모리 프로세서를 통해 배정밀도 부동 소 수점 연산을 오프로딩(Offloading) 함으로써 대역폭 상한에 따른 지연 문제를 해결할 수 있다. 따라서, 넓은 대 역폭이 필요한 연산 또는 대량의 데이터 전송이 필요한 연산의 경우, 프로세서 또는 가속기는 메모리 프로세서 를 이용해 연산 성능을 메모리 대역폭 한도를 초과하지 않는 선으로 배정밀도 부동 소수점 연산을 수행할 수 있 다. 도 1에서는 프로세서, 가속기, 가속기 코어, 메모리 시스템, 메모리 프로세서, 에뮬 레이션, 명령어 세트, ALU, 배정밀도 부동 소수점 연산을 위한 명령어 세트, 배정밀도 부 동 소수점 연산을 위한 ALU(Arithmetic Logic Unit), 배정밀도 부동 소수점 연산 요청 및 연산 결과 가 도시되어 있다. 프로세서는 도 8의 메인 프로세서에 대응할 수 있다. 프로세서는 중앙 처리 장치로서 가속기 에 연산 요청을 전송할 수 있다. 가속기는 프로세서가 요청하는 특정 목적의 연산을 가속하기 위한 장치일 수 있다. 가속기는 도 8의 보조 프로세서에 대응할 수 있다. 가속기는 예를 들어, GPU (Graphic Processing Unit), NPU (Neural Processing Unit)를 포함할 수 있다. 일 실시예에 따른 가속기는 배정밀도 부동 소수점 연산을 지원하지 않는 장치일 수 있다. 일 실시예에 따 른 가속기는 배정밀도 부동 소수점 연산 시 성능이 낮은 가속기일 수도 있다. 배정밀도 부동 소수점 연산 을 지원하지 않는 장치는 배정밀도 부동 소수점이 아닌 부동 소수점(예, FP16, FP32 등)을 이용하여 배정밀도 부동 소수점 연산을 수행할 수 있다. 따라서, 배정밀도 부동 소수점이 아닌 다른 부동 소수점을 이용하여 배정 밀도 부동 소수점 연산을 위해 에뮬레이션이 필요할 수 있다. 가속기 코어는 가속기 내부의 하드웨어를 제어하는 제어부 및 ALU를 포함할 수 있다. 본 개시에서 가 속기의 동작은 가속기 코어의 동작으로 이해될 수 있다. 메모리 시스템은 도 8의 메모리에 대응될 수 있다. 메모리 시스템은 메모리 프로세서를 포 함할 수 있다. 메모리 시스템은 HBM (High Bandwidth Memory), DDR (Double Data Rate) 또는 RAM (Random Access Memory) 중 적어도 하나를 포함할 수 있다. 그리고 메모리 시스템은 가속기 코어의 메모리 접 근을 위한 제어부를 포함할 수도 있다. 메모리 프로세서는 메모리 시스템 내부에서 연산을 수행하기 위한 장치를 의미할 수 있다. 메모리 프 로세서는 특정 목적의 연산을 할 수 있다. 메모리 프로세서는 에뮬레이션을 위한 소프트웨어 및 /또는 하드웨어를 포함할 수 있다. 메모리 프로세서는 명령어 세트, ALU, 배정밀도 부동 소수점 연산을 위한 명령어 세트 또는 배정밀도 부동 소수점 연산을 위한 ALU 중 적어도 하나를 포함할 수 있다. 명령어 세트는 메모리 프로세서를 제어하기 위한 명령어 세트를 의미할 수 있다. ALU는 메모리 프로세서의 산술 논리 연산을 위한 모듈일 수 있다. 배정밀도 부동 소수점 연산을 위한 명령어 세트 는 배정밀도 부동 소수점 연산과 관련된 명령어들을 포함할 수 있다. 배정밀도 부동 소수점 연산을 위한 ALU는 배정밀도 부동 소수점 연산에 사용되는 산술 논리 연산을 포함할 수 있다. 따라서 가속기가 직 접적으로 배정밀도 부동 소수점 연산을 지원하지 않는 상황에서, 메모리 프로세서는 배정밀도 부동 소수점 에뮬레이션을 위한 명령어 및 ALU를 구비함으로써, 가속기는 배정밀도 부동 소수점 연산을 수행할 수 있다. 도 2a 내지 도2b는 일 실시예에 따른 배정밀도 부동 소수점 연산의 일부 단계가 메모리 프로세서에서 수행되는 동작을 설명하기 위한 도면이다. 배정밀도 부동 소수점 연산은 에뮬레이션을 통해 수행될 수 있다. 에뮬레이션은 복수의 연산 단계들을 포함할 수 있다. 예를 들어, 에뮬레이션은 분할 단계, 행렬 곱 연산 단계 또는 합산 단계 중 적어도 하나를 포함할 수 있다. 에뮬레이션은 다른 단계를 더 포함하거나, 일부 단계가 생략될 수도 있다. 이하에서 설명되는 에뮬레이션 은 복수의 에뮬레이션들 중 분할 단계, 행렬 곱 연산 단계 및 합산 단계를 포함하는 에뮬레이션이며, 이는 하나 의 예시일 뿐 본 개시는 이에 제한되지 않는다. 배정밀도 부동 소수점 연산은 분할 단계, 행렬 곱 연산 단계 및 합산 단계 중 적어도 하나를 포 함할 수 있다. 분할 단계는 배정밀도 부동 소수점 행렬을 복수의 행렬로 분할하는 단계를 의미할 수 있다. 예를 들어, 분할 단계에서 배정밀도 부동 소수점 행렬은 20개의 서브 행렬로 분할될 수 있다. 예를 들어, 분할 단계에서 배정밀도 부동 소수점은 배정밀도보다 정밀도가 낮아진 복수개의 부동 소수점들(예, FP16, FP32 등)의 숫자로 표현될 수 있다. 행렬 곱 연산 단계는 배정밀도보다 낮은 정밀도를 가지는 복수개의 부 동 소수점 행렬들 간의 곱셈 연산을 의미할 수 있다. 합산 단계는 배정밀도보다 낮은 정밀도를 가지는 복 수개의 부동 소수점 행렬들 간의 곱셈 결과를 합산하는 단계를 의미할 수 있다. 도 2a를 참조하여 설명하면 프로세서가 가속기에 배정밀도 부동 소수점 연산 요청을 전송할 수 있다. 가속기는 배정밀도 부동 소수점 연산 요청을 수신하여, 배정밀도 부동 소수점 연산을 수행할 수 있다. 하지만 가속기가 배정밀도 부동 소수점 연산이 지원되지 않는 하드웨어 장치인 경우, 배정밀도 부동 소수점 연산을 위하여 에뮬레이션이 필요할 수 있다. 따라서, 가속기는 배정밀도 부동 소수점 연산을 수행하기 위하여 에뮬레이션의 각 단계인 분할 단계, 행렬 곱 연산 단계 및 합산 단계 를 통해 배정밀도 부동 소수점 연산을 할 수 있다. 분할 단계에서 발생하는 메모리 I/O (Input/Output) 오버헤드가 발생할 수 있다. 따라서 분할 단계의 가속 방법이 필요할 수 있다. 특히 분할 단계는 전체 배정밀도 부동 소수점 연산 시간의 약 30%의 수준을 차지할 수 있다. 그러므로 배정밀도 부동 소수점 연산 시간 단축을 위해 분할 단계의 가속 방법이 필요할 수 있다. 메모리 프로세서를 이용하는 경우, 가속기와 메모리 사이의 데이터 전송 한계를 지시하는 대역폭 상한에 따른 지연을 해결할 수 있다. 즉, 배정밀도 부동 소수점 연산에 필요한 일부 단계를 메모리 프로 세서에 오프로딩(offloading)함으로써, 대역폭 상한에 따른 지연 문제를 해결할 수 있다. 예를 들어, 대량 의 데이터가 가속기와 메모리 사이에서 여러번 입력되고 출력되는 경우, 대역폭 상한에 따른 지연 문제가 발생할 수 있다. 하지만, 메모리 내부에 존재하는 연산부인 메모리 프로세서가 존재하는 경우, 대량의 데 이터가 가속기와 메모리 사이에서 데이터를 주고 받는 횟수를 줄일 수 있다. 도 2b를 참조하여 설명하면, 분할 단계 및 합산 단계는 메모리 프로세서에 의하여 수행됨을 알 수 있다. 도 2b는 하나의 예시일 뿐이며, 배정밀도 부동 소수점 연산에포함된 분할 단계, 행렬 곱 연산 단 계 또는 합산 단계 중 적어도 하나가 메모리 프로세서에 의하여 수행될 수 있다. 도 3은 일 실시예에 따른 배정밀도 부동 소수점 연산에서 메모리 프로세서 이용 여부 판단을 설명하기 위한 도 면이다. 일 실시예에 따른 가속기는 프로세서로부터 배정밀도 부동 소수점 연산 요청을 수신할 수 있다. 일 실시예에 따른 가속기는 부동 소수점 연산에서 에뮬레이션 필요 여부를 판단할 수 있다. 일 실시 예에 따른 가속기는 전자 장치에서 배정밀도 부동 소수점 연산을 하드웨어적으로 또는 소프트웨어적으로 지원하는지 여부에 기초하여 결정할 수 있다. 예를 들어, 전자 장치에서 배정밀도 부동 소수점의 Number System 을 지원하는 경우, 배정밀도 부동 소수점 연산을 함에 있어 에뮬레이션을 필요하지 않을 수 있다. 전자 장치가 배정밀도 부동 소수점 연산을 하드웨어적으로 또는 소프트웨어적으로 지원하지 않는 경우, 에뮬레이션에 기반한 배정밀도 부동 소수점 연산을 할 필요가 존재한다. 하지만, 전자 장치가 배정밀도 부동 소수점 연산을 하드웨어 적으로 또는 소프트웨어적으로 지원하는 경우, 가속기는 에뮬레이션을 이용하지 않고 부동 소수점 연산을 수행할 수 있다. 부동 소수점 연산에서 에뮬레이션이 필요하지 않는 경우는 에뮬레이션 없이 가속기가 부동 소수점 연 산을 수행할 수 있다. 이와 반대로 부동 소수점 연산에서 에뮬레이션 필요한 경우, 가속기는 단 계를 수행할 수 있다. 일 실시예에 따른 가속기는 에뮬레이션에 기반한 부동 소수점 연산에 메모리 프로세서의 이용 여부를 판단 할 수 있다. 일 실시예에 따른 가속기는 행렬의 크기, 서브 행렬의 크기 또는 서브 행렬의 개수 중 적어도 하나에 기초하여 메모리 프로세서를 이용할지 여부를 결정할 수 있다. 분할 단계에서 메모리 프로 세서의 이용 여부에 기초하여 제1 행렬이 복수의 제1 서브 행렬들로 분할되고, 제2 행렬이 복수의 제2 서 브 행렬들로 분할될 수 있다. 일 실시예에 따른 분할 단계는 가속기에 의해 수행될 수도 있고, 메모 리 프로세서에 의하여 수행될 수도 있다. 행렬은 배정밀도 부동 소수점 행렬이고, 서브 행렬은 배정밀도보 다 정밀도가 낮은 부동 소수점 행렬일 수 있다. 행렬은 복수의 서브 행렬들로 표현될 수 있다. 행렬의 크기는 배정밀도 부동 소수점 행렬의 크기일 수 있다. 행렬의 크기는 배정밀도 부동 소수점 숫자의 표현 범위에 기초하여 결정될 수 있다. 구체적으로 행렬의 크기는 행렬의 행의 개수, 행렬의 열의 개수 또는 행렬에 포함되는 엘리먼트들의 크기중 적어도 하나에 기초하여 결정될 수 있다. 엘리먼트들의 크기는 배정밀도 부동 소 수점의 범위에 기초하여 결정될 수 있다. 예를 들어, 배정밀도 부동 소수점 숫자의 범위가 커질수록 행렬의 크 기는 커질 수 있다. 그 이유는 행렬의 크기가 (행의 개수) * (열의 개수) * (엘리먼트들의 크기)에 기초하여 결 정될 수 있고, 엘리먼트들의 크기는 배정밀도 부동 소수점 숫자의 범위가 커질수록 커지기 때문이다. 반대로 배 정밀도 부동 소수점 숫자의 표현 범위가 작아질수록 행렬의 크기는 작아질 수 있다. 서브 행렬의 크기는 배정밀도보다 정밀도가 낮은 부동 소수점 행렬의 크기를 의미할 수 있다. 서브 행렬의 크기 는 배정밀도보다 정밀도가 낮은 부동 소수점 숫자의 표현 범위에 기초하여 결정될 수 있다. 서브 행렬의 개수는 배정밀도 부동 소수점의 범위에 기초하여 결정될 수 있다. 예를 들어, 배정밀도 부동 소수점의 범위가 커질수록 서브 행렬의 개수는 증가할 수 있다. 반대로, 배정밀도 부동 소수점의 범위가 작아질수록 서브 행렬의 개수는 감소할 수 있다. 서브 행렬의 개수는 분할 단계에서 행렬의 분할 결과로 생성된 서브 행렬의 개수일 수 있 다. 서브 행렬의 개수는 제1 서브 행렬들의 개수 또는 제2 서브 행렬들의 개수 중 적어도 하나에 기초하여 결정 될 수 있다. 예를 들어, 제1 행렬이 20개의 제1 서브 행렬들로 분할되고, 제2 행렬이 20개의 제2 서브 행렬들로 분할된 경우, 서브 행렬의 개수는 40개일 수 있다. 서브 행렬의 개수가 증가할수록 행렬 곱 연산 단계에서 필요 한 연산량이 증가할 수 있다. 예를 들어, 제1 서브 행렬의 개수가 20개이고, 제2 서브 행렬의 개수가 20개인 경 우, 400개의 행렬 곱 연산 결과가 생성될 수 있다. 따라서, 서브 행렬의 개수가 증가할수록 행렬 곱 연산 단계 의 연산량이 증가할 수 있다. 일 실시예에 따른 가속기는 에뮬레이션에 기반한 배정밀도 부동 소수점 연산에 메모리 프로세서를 이 용한다고 판단할 수 있다. 이 경우, 일 실시예에 따른 가속기는 에뮬레이션의 각 단계별로 메모리 프 로세서의 이용 여부를 개별적으로 판단할 수 있다. 예를 들어, 가속기는 분할 단계에서 메모리 프로 세서의 이용 여부, 행렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부 또는 합산 단계에서의 메모리 프로세 서의 이용 여부 중 적어도 하나를 판단할 수 있다. 일 실시예에 따른 가속기는 분할 단계에서 메모리 프로세서의 이용 여부를 판단할 수 있다. 일 실시 예에 따른 가속기는 서브 행렬의 크기와 메모리 대역폭의 비교에 기초하여 분할 단계에서 메모리 프로세서 의 이용 여부를 판단할 수 있다. 메모리 대역폭은 가속기 코어와 메모리 시스템 사이의 대역폭 을 의미할 수 있다. 서브 행렬은 분할되지 않고 한 번에 메모리 시스템으로 전송될 필요가 존재할 수 있다. 하지만 메모리 대역폭보다 서브 행렬의 크기가 큰 경우, 서브 행렬은 분할되어 메모리 시스템으로 전송되고, 이로 인해 지연이 발생할 수 있다. 따라서, 일 실시예에 따른 가속기는 메모리 프로세서의 이용 으로 지연이 발생되지 않는 한도에서 메모리 프로세서를 이용할 수 있다. 구체적으로 가속기는 서브 행렬의 크기가 메모리 대역폭보다 작은 경우, 분할 단계에서 메모리 프로세서를 이용하도록 결정할 수 있 다. 서브 행렬의 크기가 메모리 대역폭보다 큰 경우, 분할 단계는 가속기 코어를 이용하여 수행될 수 있다. 일 실시예에 따른 가속기는 행렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부를 판단할 수 있다. 일 실시예에 따른 가속기는 행렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부를 서브 행 렬의 개수 또는 초당 부동 소수점 연산 중 적어도 하나에 기초하여 결정할 수 있다. 초당 부동소수점 연산은 컴 퓨팅 장치가 1초 동안 수행할 수 있는 부동 소수점 연산의 횟수를 의미할 수 있다. 일 실시예에 따른 가속기 는 서브 행렬의 개수 및 초당 부동 소수점 연산을 통해 행렬 곱 연산 시간을 예측할 수 있다. 따라서 가속 기는 가속기 코어에서 행렬 곱 연산 단계를 수행하는 것이 이득인지 메모리 프로세서에서 행렬 곱 연산 단계를 수행하는 것이 이득인지 판단할 수 있다. 가속기 코어와 메모리 프로세서의 부동 소 수점 연산은 다를 수 있기 때문이다. 일 실시예에 따른 가속기는 합산 단계에서의 메모리 프로세서 이용 여부를 판할 수 있다. 일 실시예 에 따른 가속기는 합산 단계에서의 메모리 프로세서 이용 여부를 서브 행렬의 크기와 메모리 대역폭 의 비교에 기초하여 결정할 수 있다. 일 실시예에 따른 가속기는 메모리 프로세서의 이용으로 지연이 발생 되지 않는 한도에서 메모리 프로세서를 이용할 수 있다. 구체적으로 가속기는 서브 행렬의 크기가 메 모리 대역폭보다 작은 경우, 합산 단계에서 메모리 프로세서를 이용하도록 결정할 수 있다. 서브 행렬의 크기가 메모리 대역폭보다 큰 경우, 합산 단계는 가속기 코어를 이용하여 수행될 수 있다. 일 실시예에 따른 가속기는 메모리 프로세서 이용 여부 판단 결과에 기초하여 가속기 코어 또는 메모 리 프로세서 중 적어도 하나를 이용하여 에뮬레이션의 각 단계를 수행할 수 있다. 따라서 에뮬레이션 에서의 각 단계(예를 들어, 분할 단계, 행렬 곱 연산 단계 및 합산 단계)가 가속기 코어에서 수행할지 메 모리 프로세서에서 수행할지 여부가 결정되어 부동 소수점 연산이 수행될 수 있다. 일 실시예에 따른 가속기는 에뮬레이션에 기반한 배정밀도 부동 소수점 연산에 메모리 프로세서의 이 용하지 않는다고 판단할 수 있다. 이 경우, 가속기가 배정밀도 에뮬레이션에 기반한 부동 소수점 연 산을 수행할 수 있다. 도 4a 내지 도4b는 일 실시예에 따른 DMA를 이용한 배정밀도 부동 소수점 연산 방법을 설명하기 위한 도면이다. DMA(Direct Memory Access)는 프로세서 자체의 개입 없이 데이터를 전송하는 프로세스 또는 모듈을 의미할 수 있다. 제어기는 중앙 처리 장치(예, 프로세서)를 의미할 수 있다. DMA는 제어기로부터 배정밀도 부동 소수점 연산 요청을 수신할 수 있다. DMA는 가속기 내부에 존재하는 메모리 시스 템의 메모리 프로세서를 이용하여 배정밀도 부동 소수점 연산을 처리하도록 할 수 있다. 일 실시예에 따른 부동 소수점 연산에 메모리 프로세서를 이용하는 경우, 제어기는 DMA를 통해 적어도 하나 의 메모리 프로세서를 제어함으로써 제1 행렬과 제2 행렬의 곱셈을 할 수 있다. 예를 들어, 도 4a에 도시 된 바와 같이 DMA는 메모리 프로세서를 포함하는 하나의 가속기를 제어함으로써 제1 행렬과 제2 행렬의 곱셈을 할 수 있다. 다른 예를 들어, 도 4b에 도시된 바와 같이 DMA는 메모리 프로세서를 각각 포 함하는 복수개의 가속기(451, 452, 453, 454)들을 제어함으로써 제1 행렬과 제2 행렬의 곱셈을 할 수도 있다. 도 5는 일 실시예에 따른 배정밀도 부동 소수점 연산이 다양한 Number system을 가진 연산 장치에 의해 수행될 수 있음을 설명하기 위한 도면이다. Number system은 가속기가 지원하는 숫자 체계일 수 있다. 가속기는 배정밀도보다 낮은 정밀도 를 가지는 Number system을 가질 수 있다. 예를 들어, 가속기는 FP32 연산, FP16 연산, BF(Brain Floating Point)16 연산 또는 TF32(TensorFloat-32) 연산 중 적어도 하나를 지원하는 장치일 수 있다. 따라서, 배정밀도 부동 소수점 연산은 배정밀도보다 낮은 정밀도를 가지는 부동 소수점 연산을 지원하는 장치 (또는 가속기)에 의하여 수행될 수 있다. 예를 들어, 제1 행렬 및 제2 행렬은 배정밀도 부동 소수점(FP 64)일 수 있다. 다른 예를 들어, 제1 행렬 및 제2 행렬은 FP 128일 수도 있다. FP 128가 하드웨어에서 지원되지 않는 부동 소수점인 경우, FP 128보다 낮은 정밀도를 가지는 부동 소수점 연산자를 이용하여 FP128 연산을 수행할 수 있다. 그리고 행렬을 분할할 서브 행렬은 배정밀도보다 낮은 정밀도를 가지는 FP32, FP16, BF(Brain Floating Point)16 또는 TF32(TensorFloat-32) 중 적어도 하나일 수 있다. 도 6은 일 실시예에 따른 배정밀도 부동 소수점 연산이 프로세서에 의하여 수행되는 동작을 설명하기 위한 도면 이다. 도 6에 도시된 메모리는 도 8에 도시된 메모리에 대응될 수 있다. 일 실시예에 따른 메모리는 가속기 외부에 존재하는 메모리일 수 있다. 따라서 메모리는 도 1에 도시된 메모리 시스템과 구 분될 수 있다. 일 실시예에 따른 배정밀도 부동 소수점 연산에서 가속기가 이용되지 않을 수도 있다. 이 경우, 도 1 내지 도 5에서 전술한 가속기의 동작은 제어기(예, 프로세서)에 의하여 수행될 수 있다. 따라서, 제 어기는 배정밀도 부동 소수점 연산의 각 단계에서 메모리 프로세서 이용 여부를 판단할 수 있다. 예를 들어, 제어기는 분할 단계를 메모리 프로세서에 할당하고, 행렬 곱 연산 단계를 제어기가 직 접 수행할 수 있다. 제어기는 분할 단계 연산 요청을 메모리에 전송할 수 있다. 그리고 메모리 프로 세서는 분할 단계를 처리하고, 연산 결과를 제어기에 전송할 수 있다. 제어기는 연산 결과를 수 신하여 배정밀도 부동 소수점 연산의 다음 단계를 수행할 수 있다. 도 7은 일 실시예에 따른 메모리 프로세서에 기초한 배정밀도 부동 소수점 연산을 수행하는 방법을 설명하기 위 한 흐름도이다. 일 실시예에 따른 전자 장치(예, 도 8의 전자 장치)는 부동 소수점 연산에서 에뮬레이션 필요 여부를 판단 할 수 있다. 일 실시예에 따른 전자 장치는 에뮬레이션 필요 여부 판단 결과에 기초하여 에뮬레이션에 기반한 부동 소 수점 연산에 메모리 프로세서의 이용 여부를 판단 할 수 있다. 일 실시예에 따른 전자 장치는 메모리 프로세서의 이용 여부 판단 결과에 기초하여 에뮬레이션의 각 단계 별로 메모리 프로세서의 이용 여부를 개별적으로 판단할 수 있다. 일 실시예에 따른 전자 장치는 판단 결과에 기초하여 제1 행렬과 제2 행렬의 곱셈할 수 있다. 일 실시예에 따른 에뮬레이션 필요 여부를 판단하는 단계는 전자 장치에서 배정밀도 부동 소수점 연산을 하드웨 어적으로 또는 소프트웨어적으로 지원하는지 여부에 기초하여 결정하는 단계를 포함할 수 있다. 일 실시예에 따른 에뮬레이션은 분할 단계, 행렬 곱 연산 단계 및 합산 단계를 포함할 수 있다. 일 실시예에 따른 에뮬레이션에 기반한 부동 소수점 연산은 분할 단계에서 메모리 프로세서의 이용 여부에 기초 하여 제1 행렬이 복수의 제1 서브 행렬들로 분할되고 제2 행렬이 복수의 제2 서브 행렬들로 분할되는 단계; 행 렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부에 기초하여 제1 서브 행렬들과 제2 서브 행렬들 사이의 행 렬 곱들이 연산되는 단계; 및 합산 단계에서의 메모리 프로세서의 이용 여부에 기초하여 행렬 곱들을 합산하는 단계를 포함할 수 있다. 일 실시예에 따른 부동 소수점 연산에 메모리 프로세서의 이용 여부를 판단하는 단계는 행렬의 크기, 서브 행렬 의 크기 또는 서브 행렬의 개수 중 적어도 하나에 기초하여 메모리 프로세서를 이용할지 여부를 결정하는 단계 를 포함할 수 있다. 일 실시예에 따른 행렬의 크기는 제1 행렬의 크기 또는 제2 행렬의 크기 중 적어도 하나를 포함하고, 서브 행렬 의 개수는 제1 서브 행렬들의 개수 또는 제2 서브 행렬들의 개수 중 적어도 하나에 기초하여 결정될 수 있다. 일 실시예에 따른 행렬의 크기는 행렬의 행의 개수, 행렬의 열의 개수 또는 행렬에 포함되는 엘리먼트들의 크기 -엘리먼트들의 크기는 배정밀도 부동 소수점의 범위에 기초하여 결정되는- 중 적어도 하나에 기초하여 결정될 수 있다. 일 실시예에 따른 서브 행렬의 개수는 배정밀도 부동 소수점의 범위에 기초하여 결정될 수 있다. 일 실시예에 따른 에뮬레이션의 각 단계별로 상기 메모리 프로세서의 이용 여부를 판단하는 단계는 분할 단계에 서 메모리 프로세서의 이용 여부, 행렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부 또는 합산 단계에서의 메모리 프로세서의 이용 여부 중 적어도 하나를 판단하는 단계를 포함할 수 있다. 일 실시예에 따른 분할 단계에서 메모리 프로세서의 이용 여부는 서브 행렬의 크기와 메모리 대역폭의 비교에 기초하여 결정될 수 있다. 일 실시예에 따른 분할 단계에서 메모리 프로세서의 이용 여부는 서브 행렬 크기가 메모리 대역폭보다 작은 경 우, 분할 단계에서 메모리 프로세서를 이용하도록 결정될 수 있다. 일 실시예에 따른 행렬 곱 연산 단계에서의 메모리 프로세서의 이용 여부는 서브 행렬의 개수 또는 초당 부동 소수점 중 적어도 하나에 기초하여 결정될 수 있다. 일 실시예에 따른 합산 단계에서의 메모리 프로세서의 이용 여부는 서브 행렬의 크기와 메모리 대역폭의 비교에 기초하여 결정될 수 있다.일 실시예에 따른 제1 행렬과 제2 행렬의 곱셈을 하는 단계는 부동 소수점 연산에 메모리 프로세서를 이용하는 경우, DMA(Direct Memory Access)를 통해 적어도 하나의 메모리 프로세서를 제어함으로써, 제1 행렬과 제2 행렬 의 곱셈을 하는 단계를 포함할 수 있다. 일 실시예에 따른 제1 행렬 및 제2 행렬은 FP(Floating Point)64이고, 행렬을 분할한 서브 행렬은 FP32, FP16, BF(Brain Floating Point)16 또는 TF32(TensorFloat-32) 중 적어도 하나일 수 있다. 도 8은 다양한 실시예에 따른 전자 장치를 설명하기 위한 블록도이다. 도 8은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 8을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전 자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈 , 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연 결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입 자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구 성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어 떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(globalnavigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(802, 또는 804) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(802, 804, 또는 808) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobileedge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서,‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다."}
{"patent_id": "10-2022-0107934", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 일 실시예에 따른 배정밀도 부동 소수점 연산을 위한 가속기 및 메모리 프로세서를 설명하기 위한 도면 이다. 도 2a 내지 도2b는 일 실시예에 따른 배정밀도 부동 소수점 연산의 일부 단계가 메모리 프로세서에서 수행되는 동작을 설명하기 위한 도면이다. 도 3은 일 실시예에 따른 배정밀도 부동 소수점 연산에서 메모리 프로세서 이용 여부 판단을 설명하기 위한 도 면이다. 도 4a 내지 도4b는 일 실시예에 따른 DMA를 이용한 배정밀도 부동 소수점 연산 방법을 설명하기 위한 도면이다. 도 5는 일 실시예에 따른 배정밀도 부동 소수점 연산이 다양한 Number system을 가진 연산 장치에 의해 수행될 수 있음을 설명하기 위한 도면이다. 도 6은 일 실시예에 따른 배정밀도 부동 소수점 연산이 프로세서에 의하여 수행되는 동작을 설명하기 위한 도면 이다. 도 7은 일 실시예에 따른 메모리 프로세서에 기초한 배정밀도 부동 소수점 연산을 수행하는 방법을 설명하기 위 한 흐름도이다. 도 8은 다양한 실시예에 따른 전자 장치를 설명하기 위한 블록도이다."}
