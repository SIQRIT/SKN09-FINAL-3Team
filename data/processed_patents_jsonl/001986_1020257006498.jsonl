{"patent_id": "10-2025-7006498", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0051682", "출원번호": "10-2025-7006498", "발명의 명칭": "호스트 엔드포인트 적응형 컴퓨팅 컴포저빌리티", "출원인": "자일링크스 인코포레이티드", "발명자": "다스티다르 자이디프"}}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "호스트 내 프로세서 시스템으로서,기판;각각 적어도 하나의 프로세서 코어를 포함하는 복수의 코어 콤플렉스 칩렛(core complex chiplet)들;가속기 칩렛; 및상기 복수의 코어 콤플렉스 칩렛들 중 적어도 하나를 상기 가속기 칩렛에 할당하여 IO 디바이스를 형성하는 한편, 잔여 복수의 코어 콤플렉스 칩렛들은 상기 호스트를 위한 중앙 처리 장치(CPU)를 형성하도록 구성되는 컴포저블 에이전트(composable agent)를 포함하는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 복수의 코어 콤플렉스 칩렛들은 복제 집적 회로들이고, 상기 가속기 칩렛은 상기 복제 집적 회로들과 상이한 집적 회로를 사용하여 구현되는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서, 상기 가속기 칩렛은 어떠한 프로세서 코어들도 포함하지 않는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 기판 상에 배치되고, 상기 복수의 코어 콤플렉스 칩렛들 및 상기 가속기 칩렛과 별개인 집적 회로를 사용하여 구현되는 인터커넥트(interconnect)를 더 포함하고, 상기 인터커넥트는 상기 복수의 코어 콤플렉스 칩렛각각이 서로 통신하도록 허용하고, 상기 복수의 코어 콤플렉스 칩렛들이 상기 가속기 칩렛과 통신하도록 구성되는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 복수의 코어 콤플렉스 칩렛들 각각이 서로 통신하도록 허용하고 상기 복수의 코어 콤플렉스 칩렛들이 상기가속기 칩렛과 통신하도록 구성되는 인터커넥트를 더 포함하고, 상기 인터커넥트 및 상기 가속기 칩렛은 동일한집적 회로의 일부인, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서, 상기 복수의 코어 콤플렉스 칩렛들 중 적어도 하나를 상기 가속기 칩렛에 할당한 후에, 상기컴포저블 에이전트는 상기 복수의 코어 콤플렉스 칩렛들 중 적어도 하나가 더 이상 상기 IO 디바이스의 일부가되지 않도록 상기 복수의 코어 콤플렉스 칩렛들 중 적어도 하나를 상기 CPU에 재할당하도록 구성되는, 프로세서시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서, 상기 컴포저블 에이전트는 IO 디바이스가 상기 복수의 코어 콤플렉스 칩렛들 중 다수의 코어콤플렉스 칩렛들을 포함하도록 상기 IO 디바이스에 상기 복수의 코어 콤플렉스 칩렛들 중 부가적인 코어 콤플렉스 칩렛을 할당하도록 구성되는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "공개특허 10-2025-0051682-3-프로세서 시스템으로서,각각 적어도 하나의 프로세서 코어를 포함하는 복수의 코어 콤플렉스 칩렛들;가속기 칩렛; 및상기 복수의 코어 콤플렉스 칩렛들을 서로 그리고 상기 가속기 칩렛에 연결하는 인터커넥트를 포함하고,상기 인터커넥트는 상기 복수의 코어 콤플렉스 칩렛들 중 적어도 하나를 상기 가속기 칩렛에 할당하여 IO 디바이스를 형성하는 한편, 잔여 복수의 코어 콤플렉스 칩렛들은 호스트를 위한 중앙 처리 장치(CPU)를 형성하도록구성되는 컴포저블 에이전트를 포함하는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 복수의 코어 콤플렉스 칩렛들은 복제 집적 회로들이고, 상기 가속기 칩렛은 상기 복제 집적 회로들과 상이한 집적 회로를 사용하여 구현되고, 상기 인터커넥트는 복수의 코어 콤플렉스 칩렛들과 별개인집적 회로를 사용하여 구현되는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서, 상기 가속기 칩렛은 어떠한 프로세서 코어들도 포함하지 않는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제8항에 있어서, 상기 인터커넥트는 상기 CPU를 형성하는 상기 복수의 코어 콤플렉스 칩렛들에 의해 사용되는인터럽트 시맨틱(interrupt semantic)들 및 상기 IO 디바이스에 할당된 상기 복수의 코어 콤플렉스 칩렛들 중적어도 하나에 의해 사용되는 인터럽트 시맨틱들을 지원하는 제1 회로부, 및 상기 CPU를 형성하는 상기 복수의코어 콤플렉스 칩렛들에 의해 사용되는 메모리 액세스들 및 상기 IO 디바이스에 할당된 상기 복수의 코어 콤플렉스 칩렛들에 의해 사용되는 메모리 액세스를 지원하는 제2 회로부를 포함하는, 프로세서 시스템."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "방법으로서,IO 디바이스에 할당하도록 복수의 코어 콤플렉스 칩렛들 중 적어도 하나를 선택하는 한편, 상기 복수의 코어 콤플렉스 칩렛들 중 잔여 코어 콤플렉스 칩렛들을 호스트의 CPU에 할당하는 단계;상기 복수의 코어 콤플렉스 칩렛들 중 잔여 코어 콤플렉스 칩렛들의 피어로서 상기 선택된 코어 콤플렉스 칩렛을 제거하는 단계; 및상기 선택된 코어 콤플렉스 칩렛을 상기 IO 디바이스에 추가하는 단계를 포함하고, 상기 복수의 코어 콤플렉스칩렛들은 상기 IO 디바이스에 또한 할당된 가속기 칩렛과 동일한 기판 상에 배치되는, 방법."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서, 상기 복수의 코어 콤플렉스 칩렛들은 복제 집적 회로들이고, 상기 가속기 칩렛은 상기 복제집적 회로들과 상이한 집적 회로를 사용하여 구현되고;상기 복수의 코어 콤플렉스 칩렛들 각각은 적어도 하나의 프로세서 코어를 포함하고, 상기 가속기 칩렛은 어떠한 프로세서 코어들도 포함하지 않고;상기 가속기 칩은, 상기 복수의 코어 콤플렉스 칩렛들 중 적어도 하나와 조합하여, DPU를 형성하고; 그리고인터커넥트는 상기 기판 상에 배치되고 상기 복수의 코어 콤플렉스 칩렛들 및 상기 가속기 칩렛과 별개인 집적회로를 사용하여 구현되는, 방법."}
{"patent_id": "10-2025-7006498", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제12항에 있어서,상기 CPU 및 상기 IO 디바이스의 작업부하를 결정하는 단계를 더 포함하고, 상기 작업부하는 상기 IO 디바이스및 상기 CPU에 할당할 상기 복수의 코어 콤플렉스 칩렛들의 수를 결정하는, 방법.공개특허 10-2025-0051682-4-청구항 15 제14항에 있어서,상기 CPU 및 상기 IO 디바이스 중 적어도 하나의 작업부하가 변경되었다고 결정하는 단계; 및상기 IO 디바이스에 할당된 상기 복수의 코어 콤플렉스 칩렛들의 수를 조정하는 단계를 더 포함하는, 방법."}
{"patent_id": "10-2025-7006498", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본원에서의 실시예는 통합된 적응형 가속기를 포함하는 프로세서 시스템을 설명한다. 일 실시예에서, 프로세서 시스템은 호스트 CPU에 대한 하나 이상의 프로세싱 코어를 각각 포함하는 다수의 코어 콤플렉스 칩렛을 포함한다. 또한, 프로세서 시스템은 가속기 칩렛(accelerator chiplet)을 포함한다. 프로세서 시스템은 코어 콤플렉스 칩렛 중 하나 이상을 가속기 칩렛에 할당하여 IO 디바이스를 형성하는 한편, 잔여 코어 콤플렉스 칩렛 은 호스트를 위한 CPU를 형성할 수 있다. 이러한 방식으로, 가속기 및 CPU가 독립적인 컴퓨터 자원을 갖는 것이 아니라, 가속기가 호스트의 프로세서 시스템에 통합될 수 있어서, 하드웨어 자원이 호스트에 의해 실행되는 특정 애플리케이션(들)의 요구에 의존하여 CPU와 가속기 사이에서 분할될 수 있다."}
{"patent_id": "10-2025-7006498", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 예는 일반적으로, 호스트의 중앙 처리 장치(CPU) 또는 가속기 칩렛에 할당되어 통합된 IO 디바이스를 형성할 수 있는 프로세싱 칩렛을 포함하는 프로세서 시스템에 관련된다."}
{"patent_id": "10-2025-7006498", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "데이터 프로세싱 유닛(DPU)과 같은 현재 가속 디바이스(예컨대, 입력/출력(IO) 디바이스)는 I/O 게이트웨이, 프 로세서 서브시스템, 네트워크 온칩(NoC), 스토리지 및 데이터 가속기, 데이터 프로세싱 엔진, 프로그래밍 가능 로직(PL)과 같은 상이한 구성요소를 포함한다. 현재, DPU는 PCIe 연결을 사용하여 호스트의 프로세서 콤플렉스 (processor complex)에 연결된다. 호스트 프로세싱 능력 및 DPU의 임베디드 프로세싱 능력은 독립적으로 규모 가 결정된다(dimensioned). 일부 작업부하의 경우, DPU는 자신의 작업을 수행하는데 요구되는 것보다 훨씬 더 많은 컴퓨팅 프로세싱(compute processing)을 가질 수 있고, 이에 의해 컴퓨팅 시스템 내 파워 및 공간을 낭비 한다. 다른 작업부하의 경우, DPU는 자신의 작업을 수행하는데 요구되는 컴퓨팅 프로세싱을 충분히 갖지 않을 수 있고, 병목구간이 된다. 일 실시예는, 기판, 각각 적어도 하나의 프로세서 코어를 포함하는 복수의 코어 콤플렉스 칩렛(core complex chiplet), 가속기 칩렛, 및 복수의 코어 콤플렉스 칩렛 중 적어도 하나를 가속기 칩렛에 할당하여 IO 디바이스 를 형성하는 한편, 잔여 복수의 코어 콤플렉스 칩렛은 호스트를 위한 중앙 처리 장치(CPU)를 형성하도록 구성된 컴포저블 에이전트(composable agent)를 포함하는 프로세서 시스템을 호스트 내에서 포함하는 컴퓨팅 시스템을 설명한다. 본원에서 설명된 다른 실시예는, 각각 적어도 하나의 프로세서 코어를 포함하는 복수의 코어 콤플렉스 칩렛; 가 속기 칩렛, 및 복수의 코어 콤플렉스 칩렛을 서로 그리고 가속기 칩렛에 연결하는 인터커넥트를 포함하는 프로 세서 시스템이다. 인터커넥트는, 복수의 코어 복합 칩렛 중 적어도 하나를 가속기 칩렛에 할당하여 IO 디바이 스를 형성하는 한편, 잔여 복수의 코어 복합 칩렛은 호스트를 위한 중앙 처리 장치(CPU)를 형성하도록 구성된 컴포저블 에이전트를 포함한다. 본원에서 설명된 다른 실시예는, IO 디바이스에 할당하도록 복수의 코어 콤플렉스 칩렛 중 적어도 하나를 선택 하는 한편, 복수의 코어 콤플렉스 칩렛 중 잔여 코어 콤플렉스 칩렛을 호스트의 CPU에 할당하는 단계, 복수의 코어 콤플렉스 칩렛 중 잔여 코어 콤플렉스 칩렛의 피어로서 선택된 코어 콤플렉스 칩렛을 제거하는 단계, 및 선택된 코어 콤플렉스 칩렛을 IO 디바이스에 추가하는 단계 - 복수의 코어 콤플렉스 칩렛은 IO 디바이스에 또한 할당된 가속기 칩렛과 동일한 기판 상에 배치됨 - 를 포함하는 방법이다."}
{"patent_id": "10-2025-7006498", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "다양한 특징이 이하 도면을 참조하여 설명된다. 도면은 실척대로 도시되거나 도시되지 않을 수 있으며 유사한 구조 또는 기능의 요소는 도면 전체에 걸쳐 동일한 참조 번호로 표시된다는 것에 유의해야 한다. 도면은 특징 의 설명을 용이하게 하기 위한 것일 뿐임에 유의해야 한다. 이는 설명에 대한 철저한 설명이나 청구항의 범위 에 대한 제한으로 의도된 것이 아니다. 또한, 예시된 예는 나타낸 모든 양상 또는 이점을 가질 필요는 없다. 특정 예와 관련하여 설명된 양상 또는 이점은 반드시 해당 예에 한정되지 않으며, 예시되지 않았거나 명시적으 로 설명되지 않았더라도 임의의 다른 예에서 실시될 수 있다. 본원에서의 실시예는 통합된 적응형 가속기를 포함하는 프로세서 시스템을 설명한다. 일 실시예에서, 프로세서 시스템은 호스트 CPU에 대한 하나 이상의 프로세싱 코어를 각각 포함하는 다수의 코어 콤플렉스 칩렛을 포함한 다. 또한, 프로세서 시스템은 가속기 칩렛(예컨대, SmartNIC, 데이터베이스 가속기, 인공지능(AI) 가속기, 그 래픽 프로세서 유닛(GPU) 등)을 포함한다. 프로세서 시스템은 코어 콤플렉스 칩렛 중 하나 이상을 가속기 칩렛 에 할당하여 IO 디바이스를 형성하는 한편, 잔여 코어 콤플렉스 칩렛은 호스트를 위한 CPU를 형성할 수 있다. 예컨대, 가속기에 할당된 코어 콤플렉스 칩렛의 수는 호스트에 의해 실행되는 애플리케이션이 CPU로부터 아니면 가속기로부터 더 많은 컴퓨터 자원을 요구할 것인지에 대한 응답으로 결정될 수 있다. 가속기 집약적 애플리케 이션의 경우, 더 많은 코어 콤플렉스 칩렛이 가속기 및 IO 디바이스에 할당될 수 있는 반면, CPU 집약적 애플리 케이션의 경우, 더 적은 코어 콤플렉스 칩렛이 가속기에 할당된다(또는 전혀 할당되지 않음). 이러한 방식으로, 가속기 및 CPU가 독립적인 컴퓨팅 자원을 갖기 보다는, 가속기가 호스트의 프로세서 시스템에 통합될 수 있어서, 하드웨어 자원이 호스트에 의해 실행되는 특정 애플리케이션(들)의 요구에 의존하여 CPU와 가속기 사이에서 분할될 수 있다. 도 1는 일 실시예에 따라, 통합된 적응형 가속기를 포함하는 프로세서 시스템을 도시한다. 이 예에서, 프 로세서 시스템은 다수의 코어 콤플렉스 칩렛, 인터커넥트, 및 가속기 칩렛이 배치되는 기 판을 포함한다. 일 실시예에서, 코어 콤플렉스 칩렛, 인터커넥트, 및 가속기 칩렛은 개별 집적 회로(IC)이다. 코어 콤플렉스 칩렛 및 가속기 칩렛 각각은 기판 내 트레이스를 사용하여 인터커넥트에 연결될 수 있다. 즉, 인터커넥트는 코어 콤플렉스 칩렛이 서로 통신하는 것을 가 능하게 할 뿐만 아니라, 칩렛이 가속기 칩렛과 통신하도록 허용한다. 그러나, 다른 실시예에서, 코 어 콤플렉스 칩렛은 또한 서로 직접 연결을 가질 수 있다. 인터커넥트는 코어 콤플렉스 칩렛이 칩렛 중 다른 것과 함께 할당되어 호스트를 위한 CPU 를 형성하도록 허용하거나, 또는 가속기 칩렛에 할당되어 IO 디바이스를 형성하도록 허용한다. 즉, 각각의 코어 콤플렉스 칩렛은 CPU를 형성하기 위해 다른 칩렛과 함께 피어로서 할당될 수 있거 나 또는 IO 디바이스에 할당되기 위해 다른 칩렛으로부터 분리될 수 있다. 코어 콤플렉스 칩렛(11 0)이 IO 디바이스에 할당될 때, 그것과 다른 칩렛 사이의 코히어런트 연결(coherent connection)은 분리되어 더 이상 피어로서 취급되지 않는다. 대신, 코어 콤플렉스 칩렛은 더 이상 CPU 내 다른 칩 렛과 동일한 메모리 공간을 공유하지 않을 수 있거나, CPU 내 다른 칩렛과 동일한 운영 시스템 를 실행하지 않을 수 없고, 상이한 인터럽트 시멘틱에 의존할 수 있다. 이는 도 3에서 더 상세히 논의된다. 일 실시예에서, 코어 콤플렉스 칩렛은 복제 IC이며, 예컨대, 동일한 수의 프로세싱 코어 및 다른 하드웨어 회로부를 갖는다. 그러나, 가속기 칩렛은 코어 콤플렉스 칩렛과 상이할 수 있다. 예컨대, 가속기 칩렛은 (가속기 칩렛이 DPU 또는 데이터베이스 가속기인 경우) 네트워크 인터페이스, (예컨대, 네트 워크 또는 AI 작업을 수행하기 위한) 특수화된 데이터 프로세싱 엔진, 부가적인 사용자 구성 가능성을 위한 프 로그래밍 가능한 로직, 인터커넥트와의 메모리 요청 및 인터럽트를 관리하기 위한 호스트 인터페이스 등과 같은 가속기 작업을 수행하기 위한 특수화된 회로부를 포함할 수 있다. 일 실시예에서, 가속기 칩렛은 임 베디드 프로세서(예컨대, 프로세서 코어)를 포함하지 않는다. 즉, 가속기 칩렛 및 IO 디바이스가 호 스트의 프로세서 시스템에 통합되지 않는 시스템에서, 이들 가속기는 자체 프로세서 코어(예컨대, 범용 프 로세싱 유닛)뿐만 아니라 특수화된 가속기 엔진을 포함할 수 있다. 그러나, 프로세싱 시스템이 코어 콤플렉스 칩렛 중 하나 이상을 가속기 칩렛에 할당할 수 있기 때문에, 가속기 칩렛은 더 이상 자체 프로세서 시스템을 필요로 하지 않으며, 이에 의해 프로세서 시스템에서의 공간 및 파워를 절약한다. 그 러나, 다른 실시예에서, 가속기 칩렛에 프로세서 코어를 여전히 포함시키는 것이 유리할 수 있다. 인터커넥트는 코어 콤플렉스 칩렛을 가속기 칩렛에 할당하는 컴포저블 에이전트를 포함한 다. 이 실시예에서, 에이전트는 IO 디바이스를 형성하기 위해 코어 콤플렉스 칩렛(110A 및 110C)을 가속기 칩렛에 할당하였다. 대조적으로, 컴포저블 에이전트는 CPU를 형성하기 위해 코어 콤플 렉스 칩렛(110B 및 110D-G)을 할당하였다. 일 실시예에서, 컴포저블 에이전트는 컴퓨팅 시스템이 부팅할 때 이러한 할당을 행한다. 일 실시예에서, 이 할당은 변경될 수 있다. 예컨대, 작업부하가 변경되고 IO 디바이스가 자신의 가속 작 업을 수행하기 위해 더 이상 많은 컴퓨팅 자원을 필요로 하지 않는 경우, 컴포저블 에이전트는 IO 디바이 스로부터 코어 컴퓨팅 칩렛(110C)을 제거하고 이를 CPU에 재할당할 수 있다. 이러한 방식으로, 코어 콤플렉스 칩렛 각각은 통합된 IO 디바이스 또는 CPU에 할당될 수 있다. 또한, 도시된 바와 같이 별개의 인터커넥트 IC를 갖는 것은 필요하지 않다. 다른 실시예에서, 인터커넥트 에 의해 수행되는 기능은 코어 콤플렉스 칩렛 및 가속기 칩렛 상의 하드웨어를 사용하여 수행될 수 있다. 기판은 코어 콤플렉스 칩렛과 가속기 칩렛을 선택적으로 연결하기 위한 인터커넥트의 네트워크를 포함할 수 있다. 예컨대, 인터커넥트의 부분은 또한 각각의 코어 콤플렉스 칩렛에 걸쳐 분산될 수 있으며, 기판 연결은 CPU를 생성하기 위해 멀티-코어-콤플렉스 연결성(multi-core-complex connectivity)을 달성한다. 다른 실시예에서, 가속기 칩렛 또는 칩렛 내 회로부는 인터커넥트의 일부이다. 즉, 가속기 칩렛 은 도 1에 도시된 바와 같이 별개의 IC를 갖기보다는 인터커넥트와 동일한 IC에 통합될 수 있다. 또 는 반대로 말하면, 인터커넥트(컴포저블 에이전트 및 도 1에 도시된 다른 회로부를 포함할 수 있음) 는 가속기 칩렛과 동일한 IC의 일부일 수 있다. 도 2는 일 실시예에 따라, 통합 가속기에 프로세싱 코어를 추가하기 위한 방법의 흐름도이다. 블록 에서, CPU 및 가속기의 작업부하가 결정된다. 이러한 결정은 호스트, 시스템 관리자, 또는 프로세서 시스템 상 에서 실행되는 사용자 애플리케이션에 의해 수행될 수 있다. 예컨대, 컴포저블 에이전트는 CPU 및 가속기의 작 업부하를 결정하기 위해 이력 데이터에 의존할 수 있다. 또는 컴포저블 에이전트는 어떤 유형의 사용자 애플리 케이션이 호스트 상에서 실행되는지 또는 실행될 것인지를 결정할 수 있으며, 이는 그 후 그러한 애플리케이션 을 실행할 때 CPU 및 가속기의 작업부하를 추정하는 데 사용될 수 있다. 대안적으로, 실리콘 제조자는 각각이 I/O 디바이스의 일부로서 프로세서 코어의 상이한 혼합(mix), 및 컴포저블 에이전트의 정적 구성을 갖는 상이한 세트의 제품을 생성할 수 있으며, 이들 상이한 세트의 제품은 각각 CPU에 대해 상이한 컴퓨팅 자원을 사용하여 상이한 작업부하를 타겟팅한다. 예컨대, 분해된 스토리지 작업부하와 같은 제어 평면 중한 작업부하(control plane heavy workload)는 데이터 평면 중한 작업부하와 비교할 때 상당히 더 높은 프로세싱을 사용할 수 있으며, 여기서 가속기가 대부분의 컴퓨 테이션을 수행하고, CPU 내 프로세서 코어는 경하게 부하가 걸린다. CPU 및 가속기 상의 작업부하를 결정(또는 추정)함으로써, 컴포저블 에이전트는 각각이 얼마나 많은 컴퓨팅 자원을 필요로 할지를 결정할 수 있다. 블록에서, 컴포저블 에이전트는 IO 디바이스에 할당하도록 코어 콤플렉스 칩렛 중 적어도 하나를 선택한다. 즉, 컴포저블 에이전트는 IO 디바이스를 형성하기 위해 가속기 칩렛에 추가하도록 적어도 하나의 코 어 콤플렉스 칩렛을 선택한다. IO 디바이스에 할당할 코어 콤플렉스 칩렛의 수는 IO 디바이스에 대한 작업부하 에 의존할 수 있다. 보다 중한 작업부하의 경우, 추가적인 코어 콤플렉스 칩렛이 IO 디바이스에 할당될 수 있 다. 보다 경한 부하의 경우, 더 적은 코어 콤플렉스 칩렛이 IO 디바이스에 할당된다(또는 전혀 할당되지 않 음). 블록에서, 컴포저블 에이전트는 잔여 코어 콤플렉스 칩렛의 피어로서 선택된 코어 콤플렉스 칩렛을 제거한 다. 예컨대, 에이전트는 선택된 코어 콤플렉스 칩렛과 CPU를 형성하는 데 사용되는 칩렛 사이의 연결을 비활성 화할 수 있다. 이러한 연결은 선택된 코어 콤플렉스 칩렛들 사이의 캐시 코히어런트 연결 및 프로세서간 인터 럽트 연결일 수 있다. 또한, 선택된 코어 콤플렉스 칩렛 내 하드웨어는 CPU 내 피어 프로세서가 아니라 IO 디 바이스 내 프로세서 코어로서 거동하도록 재구성될 수 있다. 예컨대, 선택된 코어 콤플렉스 칩렛은 인터커넥트 내 IO 메모리 관리 유닛(MMU)에 판독 및 기록 메모리 요청을 발행할 수 있다. 또한, 선택된 코어 콤플렉스 칩렛은 선택된 코어 콤플렉스 칩렛이 물리적으로 호스트 프로세싱 시스템의 일부일지라도, 호스트 프로세싱 시스 템(예컨대, 인터커넥트)에 인터럽트를 시그널링하기 위해 메시지 시그널링 인터럽트(message signaled interrupt; MSI)를 사용할 수 있다. MSI는 코어 콤플렉스에 의해 생성될 수 있거나, 인터커넥트는 코어 콤플렉 스 인터럽트를 호스트 프로세싱 시스템에 대한 MSI로 변환(translate)할 수 있다. 그러나, MSI는 사용될 수 있 는 적절한 IO 인터럽트 프로토콜의 단지 하나의 예일 뿐이다. 블록에서, 컴포저블 에이전트는 선택된 코어 콤플렉스 칩렛을 IO 디바이스에 추가한다. 예컨대, 인터커넥 트는 선택된 코어 콤플렉스 칩렛과 가속기 칩렛 사이의 통신 경로를 확립하여서, 코어 콤플렉스 칩렛이 가속기 에 통합되는 프로세서 서브시스템과 같이 기능하게 할 수 있다. 확립된 통신 경로를 통해, 코어 콤플렉스 칩렛 은 CPU 상에서 실행되는 운영 시스템과는 독립적인 운영 시스템를 실행할 수 있다. 운영 시스템의 자원은 이제 선택된 코어 콤플렉스 칩렛과 가속기 칩렛 사이의 확립된 통신 경로를 사용하여 가속기 칩렛을 포함할 수 있다. 블록에서, 방법은 작업부하가 변경되었는지를 결정한다. 이는 CPU의 작업부하 또는 IO 디바이스의 작업부하일 수 있다. 예컨대, 컴포저블 에이전트가 IO 디바이스에 이전에 할당된 코어 콤플렉스 칩렛을 CPU로 이동하기로 결정하도록 CPU 상의 작업부하가 증가되었을 수 있다. 또는, 컴포저블 에이전트가 CPU에 이전에 할 당된 코어 콤플렉스 칩렛을 IO 디바이스로 이동하도록 IO 디바이스 상의 작업부하가 증가되었을 수 있다. 블록에서, 컴포저블 에이전트는 IO 디바이스에 할당된 코어 콤플렉스 칩렛의 수를 조정한다. 이는 IO 디 바이스에 더 많은 코어 콤플렉스 칩렛을 추가하거나, 또는 IO 디바이스로부터 코어 콤플렉스 칩렛을 제거하는 것을 포함할 수 있다. 코어 콤플렉스 칩렛의 이러한 조정은 컴퓨팅 시스템을 재부트할 때 발생할 수 있거나, 또는 컴퓨팅 시스템을 재부트할 필요 없이 IO 디바이스에 할당된 코어 콤플렉스 칩렛의 수를 조정하는 것이 가 능할 수 있다. 도 3은 실시예에 따른 프로세서 시스템의 블록도이다. 프로세서 시스템과 마찬가지로, 프로세서 시 스템은 코어 콤플렉스 칩렛, 인터커넥트, 및 가속기 칩렛을 포함한다. 이 예에서, 코어 콤플렉스 칩렛은 인터커넥트에 대한 코히어런트 인터커넥트 및 IO 인터커넥트 둘 모두를 갖는다. 일 실시예에서, 코히어런트 인터커넥트는 코어 콤플렉스 칩렛이 CPU의 일부일 때 사용되지만, IO 인터커넥트 는 코어 콤플렉스 칩렛이 IO 디바이스의 일부일 때 사용된다. 코어 콤플렉스 칩렛은 프로세싱 코어, 코히어런트 하드웨어, 및 IO 하드웨어를 포함한다. 코히어런트 하드웨어는 코어 콤플렉스 칩렛이 CPU에서 피어일 때 사용되는 회로부 또는 펌웨어를 포 함하는 반면, IO 하드웨어는 코어 콤플렉스 칩렛이 IO 디바이스의 일부일 때 사용되는 회로부 또는 펌웨어를 포함한다. 예컨대, CPU의 일부일 때, 코히어런트 하드웨어는 CPU를 형성하는 다른 코어 콤플렉 스 칩렛에 대한 캐시 코히어런트 피어로서 메모리 판독 및 기록 요청을 수행할 수 있다. 그러나 IO 도메 인의 일부일 때, IO 하드웨어는 가속기 칩렛 및 다른 IO 디바이스와 유사하게, 인터커넥트 내 IO MMU에 데이터를 판독 및 기록하기 위한 요청을 제출한다. 또한, CPU를 형성하는 다른 코어 콤플렉스 칩렛과 페이지 테이블을 유지하는 것이 아니라, 코어 콤플렉스 칩렛은 IO 디바이스의 일부일 때 IO MMU로부터 페이지 테이블 변환을 수신하고 CPU 메모리에 액세스할 수 있다. 컴포저블 에이전트는 메 모리 포트 중 적어도 하나를 IO 도메인 메모리로서 할당할 수 있다. IO 도메인의 일부일 때, 코어 콤플렉 스 칩렛은 CPU 상에서 실행되는 운영 시스템과는 독립적인 운영 시스템를 실행하고, IO 도메인 메모리에 매핑된 자체 페이지 테이블을 유지할 수 있다. 또한, IO 하드웨어는 코히어런트 하드웨어에 의해 사 용되는 인터럽트에 종속되는 IO 디바이스 인터럽트 시맨틱(예컨대, MSI)을 지원할 수 있다. 인터럽트 시맨틱은 IO 디바이스 내 칩렛으로부터 수신된 인터럽트를 핸들링하는 인터커넥트 내 인터럽트 관리자에 인터 럽트를 전송할 수 있다. 인터커넥트는 컴포저블 에이전트, IO MMU, 인터럽트 관리자, 및 메모리 포트를 포함 한다. 위에서 논의된 바와 같이, 컴포저블 에이전트는 코어 콤플렉스 칩렛을 선택하여 CPU 또는 IO 디바이스에 할당한다. 또한, 컴포저블 에이전트는 코어 콤플렉스 칩렛 중 어느 것이 CPU의 일부이고 IO 디바이스의 일부인지를 IO MMU, 인터럽트 관리자, 및 메모리 포트에 통지할 수 있다. 이 회 로는 데이터를 송신하고 인터럽트를 핸들링하기 위해 적절한 기술을 사용할 수 있다. 일 실시예에서, 인터커넥트는 코히어런트 및 IO 인터커넥트(또는 경로) 사이의 코어 콤플렉스 칩렛의 트랜지션(transition), 동종 코어 인터럽트와 IO 디바이스 시맨틱 인터럽트(예컨대, MSI) 사이의 트랜지션, 및 IO MMU에 의해 수행되는 IO 디바이스 시맨틱 IO 변환 룩어사이드 버퍼링(IO device semantics IO translation lookaside buffering; IOTLB)과 동종 코어 MMU 사이의 트랜지션을 관리하기 위한 프로그램 가능로직을 포함할 수 있다. 예컨대, 프로그래밍 가능 로직은 코어 콤플렉스 칩렛이 CPU의 일부일 때 사용되 는 코어 인터럽트 시맨틱과 코어 콤플렉스 칩렛이 IO 디바이스의 일부일 때 사용되는 IO 메시지 인터럽트 시맨틱 사이에 브리지(bridge)를 구현할 수 있다. 프로그래밍 가능 로직은 또한 코어 콤플렉스 칩렛이 CPU의 일부일 때 사용되는 코어 페이지 테이블 워크(core page table walk)와 예컨대, 코어 콤플렉스 칩렛(11 0)이 IO 디바이스의 일부일 때 사용되는 IO PCIe 어드레스 변환 서비스(address translation service; ATS) 사 이에서 변환하기 위한 브리지를 포함할 수 있다. 이 브리지는 코어 페이지 테이블 액세스를 PCIe ATS 메시지로 변환할 수 있고, 그런 다음 ATS 응답에서 수신된 데이터 구조가 네이티브-투-코어(native-to-core) 명령 세트 아키텍처(instruction set architecture; ISA) 페이지 테이블로 나타나도록 수정된다. 가속기 칩렛은 가속 회로, 호스트 인터페이스, 및 네트워크 인터페이스를 포함한다. 가속 회로는 가속 엔진(예컨대, 데이터 프로세싱 엔진, 암호화(crypto) 엔진, 압축 엔진, AI 엔진 등), 프로그 래밍 가능 로직, 또는 이들의 조합을 포함할 수 있다. 가속 회로는 호스트(예컨대, CPU)에 의해 할당된 가속 작업을 수행하는 임의의 회로일 수 있다. 예컨대, CPU를 형성하는 코어 콤플렉스 칩렛(또는 칩렛 상에서 실행되는 소프트웨어)은 인터커넥트를 사용하여 가속 작업을 가속기 칩렛으로 오프로드 (offload)할 수 있다. 호스트 인터페이스는 가속기 칩렛이 IO 인터커넥트를 통해 인터커넥트와 통신하는 것을 가능하 게 한다. 호스트 인터페이스는 인터커넥트와 통신하기 위해 PCIe 또는 유니버셜 인터커넥트 익스프 레스(Universal Interconnect Express; UCIe) 연결을 사용할 수 있다. 호스트 인터페이스는 컴퓨트 익스 프레스 링크(Compute Express Link; CXL™) 또는 가속기를 위한 캐시 코히어런트 인터커넥트(Cache Coherent Interconnect for Accelerators; CCIX®)와 같이 인터커넥트 및 CPU에 할당된 코어 콤플렉스 칩렛과 통신하기 위해 캐시 코히어런트 프로토콜을 사용할 수 있다. 이들 프로토콜은 가속기 및 IO 디바이스에 할당되는 임의의 코어 콤플렉스 칩렛이 CPU를 형성하는 코어 콤플렉스 칩렛과 캐시 코히어런트(cache coherent) 상태가 되는 것을 가능하게 하지만, 이들은 그럼에도 불구하고 이들 코어 콤플렉스 칩렛에 종속 된다. 네트워크 인터페이스는 가속기 칩렛이 네트워크(예컨대, LAN 또는 WAN)와 통신하는 것을 가능하게 한 다. 이 예에서, 가속기 칩렛은 DPU 또는 데이터베이스 가속기일 수 있다. 그러나, 가속기가 네트워크와 통신하지 않는 AI 또는 암호화 가속기인 실시예에서, 네트워크 인터페이스는 생략될 수 있다. 도 4는 일 실시예에 따라, 통합된 적응형 가속기를 포함하는 프로세서 시스템을 도시한다. 간략화를 위해, 도 4의 프로세서 시스템은 코어 콤플렉스 칩렛 및 가속기 칩렛만을 예시하지만, 인터커넥트를 예시하지 않으며, 이는 또한 존재할 수 있다. 이 예에서, 프로세서 시스템은 2개의 가속기 칩렛(115A 및 115B)을 포함한다. 일 실시예에서, 가속기 칩렛 은 동일한 유형의 가속기(예컨대, 2개의 DPU 칩렛 또는 2개의 데이터베이스 가속기)이다. 일 실시예에서, 가속기 칩렛은 동일한 집적 회로일 수 있다. 예컨대, 프로세서 시스템은 가속기 칩렛에 의해 수행되 는 특정 가속기 작업을 요구하는 애플리케이션을 실행하는 데 사용되도록 설계될 수 있다. 따라서, 프로세서 시스템은 도 1에 도시된 바와 같이 단지 하나가 아닌 2개의 가속기 칩렛을 포함할 수 있다. 위와 같이, 코어 콤플렉스 칩렛 중 하나 이상은 IO 디바이스를 형성하기 위해 가속기 칩렛에 할 당될 수 있다. 이 예에서, 코어 콤플렉스 칩렛(110A)은 가속기 칩렛(115A 및 115B)에 할당되는 반면, 코어 콤 플렉스 칩렛(110B-D)은 호스트를 위한 CPU를 형성한다. 그러나, 다른 실시예에서, 코어 콤플렉스 칩렛 중 하나 초과가 IO 디바이스에 할당될 수 있거나, 코어 콤플렉스 칩렛 중 어느 것도 IO 디바이 스에 할당되지 않을 수 있으며, 이 경우 가속기 작업은 가속기 칩렛(115A 및 115B)에 의해서만 수행된다. 도 5는 일 실시예에 따라, 통합된 적응형 가속기를 포함하는 프로세서 시스템을 도시한다. 간략화를 위해, 도 5의 프로세서 시스템은 코어 콤플렉스 칩렛 및 가속기 칩렛만을 예시하지만, 인터커넥트를 예시하지 않으며, 이는 또한 존재할 수 있다. 도 4에서와 같이, 여기서 프로세서 시스템은 2개의 가속기 칩렛(115A 및 115B)을 포함한다. 일 실시예에서, 가 속기 칩렛은 동일한 유형의 가속기(예컨대, 2개의 DPU 칩렛 또는 2개의 데이터베이스 가속기)이다. 일 실 시예에서, 가속기 칩렛은 동일한 집적 회로일 수 있다. 그러나, 도 4에서와 달리, 도 5는 가속기 칩렛 중 하나가 CPU의 일부가 되도록 할당될 수 있다는 것을 도시한다. 따라서, 도 5는 코어 콤플렉스 칩렛 을 IO 디바이스에 할당하는 것에 더하여, 가속기 칩렛이 CPU에 할당될 수 있음을 도시한다. 예컨대, IO 디바이스의 현재 작업부하는 CPU 상의 작업부하보다 훨씬 더 작을 수 있다. 따라서, 컴포 저블 에이전트는 가속기 칩렛(115A)이 IO 디바이스의 기능을 수행하도록 두면서 가속기 칩렛(115B)을 CPU에 재할당할 수 있다. 가속기 칩렛(115B)은 프로세서 시스템 내 다른 코어 콤플렉스 칩렛에 대한 피어 프로세서로서 역할을 할 수 있다. 이를 위해, 가속기 칩렛은 코어 콤플렉스 칩렛에 대한 코히어런트 인터커넥트뿐만 아니라, CPU의 일부일 때 코어 콤플렉스 칩렛에 의해 사용되는 인터럽트 및 메모리 관리 프로토콜을 지원하는 하드웨어를 또한 포함할 수 있다. 도 5에 도시되지 않았지만, IO 디바이스 및 CPU에 대한 작업부하가 변경되면, 컴포저블 에이전트는 그 후 가속기 칩렛(115B)을 IO 디바이스에 재할당할 수 있다. 따라서, 도 5는 가속기 칩렛이 코어 콤플렉스 칩렛과 같은 코히어런트 및 IO 동작 모드 둘 모두를 지원하도록 설계될 수 있음을 도시한다. 도 6은 일 실시예에 따라, 다수의 통합된 적응형 가속기를 포함하는 프로세서 시스템을 도시한다. 간략화를 위 해, 도 6의 프로세서 시스템은 코어 콤플렉스 칩렛 및 가속기 칩렛만을 예시하지만, 인터커넥트를 예 시하지 않으며, 이는 또한 존재할 수 있다. 도 6의 프로세서 시스템은 상이한 가속기인 가속기 칩렛 및 가속기 칩렛을 포함한다(즉, 칩렛(605 및 610)은 상이함). 예컨대, 가속기 칩렛은 가속기 칩렛과 상이한 유형의 가속기일 수 있다. 예컨대, 가속기 칩렛은 DPU일 수 있는 반면, 가속기 칩렛은 AI 가속기일 수 있다. 따라서, 도 6은 프로세서 시스템이 다수의 상이한 유형의 가속기 칩렛을 포함할 수 있다는 것을 도시한다. 또한, 가속기 칩렛은 상이한 IO 디바이스를 형성하는 데 사용될 수 있다. 이 예에서, 가속기 칩렛 및 코 어 콤플렉스 칩렛(110A)은 IO 디바이스를 형성하는 반면, 가속기 칩렛 및 코어 콤플렉스 칩렛(110B) 은 IO 디바이스를 형성한다. 잔여 코어 콤플렉스 칩렛은 호스트를 위한 CPU를 형성한다. 컴포 저블 에이전트는 IO 디바이스의 개별 작업부하에 응답하여 코어 콤플렉스 칩렛을 할당할 수 있다. 예컨대, IO 디바이스가 IO 디바이스보다 더 큰 작업부하를 갖는(또는 가질 것으로 예상되는) 경우, 컴포저블 에이전트는 코어 콤플렉스 칩렛 중 2개를 IO 디바이스에 할당할 수 있다. 따라서, 도 6은 프로세서 시스템이 임의의 수의 상이한 유형의 IO 디바이스를 지원하기 위해 임의의 수의 상이한 유형의 가속기 를 포함할 수 있음을 도시한다. 또한, 이러한 IO 디바이스는 또한 자신의 작업부하에 의존하여 임의의 수의 코 어 콤플렉스 칩렛을 포함할 수 있다. 상술한 내용에서, 본 개시에서 제시된 실시예를 참조한다. 그러나, 본 개시의 범위는 특정의 설명된 실시예에 한정되지 않는다. 대신, 설명된 특징 및 요소의 임의의 조합은 상이한 실시예와 관련이 있든 없든 고려된 실시 예를 구현하고 실시하기 위해 고려된다. 또한, 본원에서 개시된 실시예가 다른 가능한 해결책이나 종래 기술에 비해 이점을 달성할 수 있지만, 주어진 실시예에 의해 특정 이점이 달성되는지 여부는 본 개시의 범위를 한정하 지 않는다. 따라서, 상술한 양상, 특징, 실시예 및 이점은 단지 예시적인 것일 뿐, 청구항(들)에 명확히 인용 된 경우를 제외하고는 첨부된 청구항의 요소 또는 제한으로 간주되지 않는다. 당업자에 의해 이해되는 바와 같이, 본원에서 개시된 실시예는 시스템, 방법 또는 컴퓨터 프로그램 제품으로 구 현될 수 있다. 따라서, 양상은 전적으로 하드웨어 구현, 전적으로 소프트웨어 구현(펌웨어, 상주 소프트웨어, 마이크로-코드 등을 포함) 또는 소프트웨어 및 하드웨어 양상을 조합한 구현의 형태를 취할 수 있으며, 이는 모 두 본원에서 일반적으로 \"회로\", \"모듈\" 또는 \"시스템\"으로 지칭될 수 있다. 또한, 양상은 컴퓨터 판독 가능 프로그램 코드가 구현된 하나 이상의 컴퓨터 판독 가능 매체(들)에 구현된 컴퓨터 프로그램 제품의 형태를 취할 수 있다. 하나 이상의 컴퓨터 판독 가능 매체(들)의 임의의 조합이 이용될 수 있다. 컴퓨터 판독 가능 매체는 컴퓨터 판 독 가능 신호 매체 또는 컴퓨터 판독 가능 저장 매체일 수 있다. 컴퓨터 판독 가능 저장 매체는 예컨대, 전자, 자기, 광학, 전자기, 적외선 또는 반도체 시스템, 장치 또는 디바이스 또는 이들의 임의의 적절한 조합일 수 있 지만 이에 한정되지 않는다. 컴퓨터 판독 가능 저장 매체의 보다 구체적인 예(비포괄적인 목록)는 다음을 포함 할 것이다: 하나 이상의 와이어를 갖는 전기 연결, 휴대용 컴퓨터 디스켓, 하드 디스크, 랜덤 액세스 메모리 (RAM: random access memory), 판독-전용 메모리(ROM: read-only memory), 소거 가능 프로그래밍 가능 판독-전 용 메모리(EPROM 또는 플래시 메모리), 광섬유, 휴대용 컴팩트 디스크 판독-전용 메모리(CD-ROM), 광학 저장 디 바이스, 자기 저장 디바이스 또는 이들의 임의의 적절한 조합. 이 문서의 맥락에서, 컴퓨터 판독 가능 저장 매 체는 명령 실행 시스템, 장치 또는 디바이스에 의해 사용되거나 이와 관련하여 사용하기 위한 프로그램을 포함하거나 저장할 수 있는 임의의 실체가 있는(tangible) 매체이다. 컴퓨터 판독 가능 신호 매체는 예컨대, 기저 대역에서 또는 캐리어 파의 일부로서 내부에 구현된 컴퓨터 판독 가능 프로그램 코드를 갖는 전파된 데이터 신호를 포함할 수 있다. 이러한 전파된 신호는 전자기, 광학 또는 이들의 임의의 적절한 조합을 포함하되 이에 한정되지 않는 임의의 다양한 형태를 취할 수 있다. 컴퓨터 판독 가능 신호 매체는 컴퓨터 판독 가능 저장 매체가 아니고 명령 실행 시스템, 장치 또는 디바이스에 의해 사용되 거나 이와 관련하여 사용하기 위한 프로그램을 통신, 전파 또는 전송할 수 있는 임의의 컴퓨터 판독 가능 매체 일 수 있다. 컴퓨터 판독 가능 매체 상에 구현된 프로그램 코드는 무선, 유선, 광섬유 케이블, RF 등 또는 이들의 임의의 적 절한 조합을 포함하되 이에 한정되지 않는 임의의 적절한 매체를 사용하여 전송될 수 있다. 본 개시의 양상에 대한 연산을 수행하기 위한 컴퓨터 프로그램 코드는 Java, Smalltalk, C++ 등과 같은 객체 지 향 프로그래밍 언어와 \"C\" 프로그래밍 언어 또는 유사한 프로그래밍 언어와 같은 통상의 절차적 프로그래밍 언 어를 포함하여 하나 이상의 프로그래밍 언어의 임의의 조합으로 쓰여질 수 있다. 프로그램 코드는 전적으로 사 용자의 컴퓨터 상에서, 부분적으로 사용자의 컴퓨터 상에서, 독립형 소프트웨어 패키지로서, 부분적으로 사용자 의 컴퓨터 상에서 그리고 부분적으로 원격 컴퓨터 상에서 또는 전적으로 원격 컴퓨터 또는 서버 상에서 실행될 수 있다. 후자의 시나리오에서, 원격 컴퓨터는 근거리 네트워크(LAN: local area network) 또는 광역 네트워크 (WAN: wide area network)를 포함하여 임의의 유형의 네트워크를 통해 사용자의 컴퓨터에 연결될 수 있거나, (예컨대, 인터넷 서비스 공급자를 사용하는 인터넷을 통해) 외부 컴퓨터에 연결될 수 있다. 본 개시의 양상은 이러한 개시에 제시된 실시예에 따른 방법, 장치(시스템) 및 컴퓨터 프로그램 제품의 흐름도 예시 및/또는 블록도를 참조하여 아래에서 설명된다. 흐름도 예시 및/또는 블록도의 각각의 블록과 흐름도 예 시 및/또는 블록도의 블록의 조합은 컴퓨터 프로그램 명령에 의해 구현될 수 있음을 이해할 것이다. 이러한 컴 퓨터 프로그램 명령은 범용 컴퓨터, 특수 목적 컴퓨터 또는 다른 프로그래밍 가능 데이터 프로세싱 장치의 프로 세서에 제공되어 기계를 생성할 수 있어, 컴퓨터 또는 다른 프로그래밍 가능 데이터 프로세싱 장치의 프로세서 를 통해 실행되는 명령은 흐름도 및/또는 블록도 블록 또는 블록들에 특정된 기능/동작을 구현하기 위한 수단을 생성한다. 이러한 컴퓨터 프로그램 명령은 또한 컴퓨터, 다른 프로그래밍 가능 데이터 프로세싱 장치 또는 다른 디바이스 가 특정 방식으로 기능하도록 지시할 수 있는 컴퓨터 판독 가능 매체에 저장될 수 있어, 컴퓨터 판독 가능 매체 에 저장된 명령은 흐름도 및/또는 블록도의 블록 또는 블록들에 특정된 기능/동작을 구현하는 명령을 포함하는 제조품을 생성한다. 컴퓨터 프로그램 명령은 또한 컴퓨터, 다른 프로그래밍 가능 데이터 프로세싱 장치 또는 다른 디바이스에 로딩 되어 컴퓨터, 다른 프로그래밍 가능 장치 또는 다른 디바이스 상에서 일련의 연산 단계가 수행되게 하여 컴퓨터 구현 프로세스를 생성하도록 할 수 있어, 컴퓨터 또는 다른 프로그래밍 가능 장치 상에서 실행되는 명령은 흐름 도 및/또는 블록도의 블록 또는 블록들에 특정된 기능/동작을 구현하기 위한 프로세스를 제공한다. 도면의 흐름도 및 블록도는 본 발명의 다양한 예에 따른 시스템, 방법 및 컴퓨터 프로그램 제품의 가능한 구현 의 아키텍처, 기능 및 연산을 예시한다. 이와 관련하여, 흐름도 또는 블록도의 각각의 블록은 특정된 논리적 기능(들)을 구현하기 위한 하나 이상의 실행 가능한 명령을 포함하는 모듈, 세그먼트 또는 명령의 일부를 나타 낼 수 있다. 일부 대안적인 구현에서, 블록에 표기된 기능은 도면에 표기된 순서와 다르게 일어날 수 있다. 예컨대, 연속적으로 도시된 두 개의 블록은 실제로 실질적으로 동시에 실행될 수 있거나, 블록은 관련 기능에 따라 때로는 역순으로 실행될 수 있다. 또한, 블록도 및/또는 흐름도 예시의 각각의 블록과 블록도 및/또는 흐 름도 예시의 블록의 조합은 특정된 기능 또는 동작을 수행하거나 특수 목적 하드웨어와 컴퓨터 명령의 조합을 수행하는 특수 목적 하드웨어-기반 시스템에 의해 구현될 수 있다는 점에 유의한다. 본원에서 개시된 기술은 다음과 같은 비제한적인 예로 표현될 수 있다. 예 1. 호스트 내의 프로세서 시스템으로서, 기판; 각각 적어도 하나의 프로세서 코어를 포함하는 복수의 코어 콤플렉스 칩렛(core complex chiplet); 가속기 칩렛; 및 복수의 코어 콤플렉스 칩렛 중 적어도 하나를 가속기 칩렛에 할당하여 IO 디바이스를 형성하는 한편, 잔여 복수의 코어 콤플렉스 칩렛은 호스트를 위한 중앙 처리 장 치(CPU)를 형성하도록 구성된 컴포저블 에이전트(composable agent)를 포함한다. 예 2. 예 1의 프로세서 시스템에 있어서, 복수의 코어 콤플렉스 칩렛은 복제 집적 회로이고, 가속기 칩렛은 복 제 집적 회로와 상이한 집적 회로를 사용하여 구현된다. 예 3. 예 2의 프로세서 시스템에 있어서, 가속기 칩렛은 어떠한 프로세서 코어도 포함하지 않는다. 예 4. 예 3의 프로세서 시스템에 있어서, 가속기 칩렛은 복수의 코어 콤플렉스 칩렛 중 적어도 하나와 조합하 여, 데이터 프로세싱 유닛(DPU)을 형성한다. 예 5. 예 1의 프로세서 시스템에 있어서, 기판 상에 배치되고, 복수의 코어 콤플렉스 칩렛 및 가속기 칩렛과 별개인 집적 회로를 사용하여 구현되는 인터커넥트를 더 포함하고, 인터커넥트는 복수의 코어 콤플렉스 칩렛 각 각이 서로 통신하도록 허용하고, 복수의 코어 콤플렉스 칩렛이 가속기 칩렛과 통신하도록 구성된다. 예 6. 예 5의 프로세서 시스템에 있어서, 인터커넥트는 CPU를 형성하는 복수의 코어 콤플렉스 칩렛에 의해 사 용되는 인터럽트 시맨틱(interrupt semantic) 및 IO 디바이스에 할당된 복수의 코어 콤플렉스 칩렛 중 적어도 하나에 의해 사용되는 인터럽트 시맨틱을 지원하는 제1 회로부, 및 CPU를 형성하는 복수의 코어 콤플렉스 칩렛 에 의해 사용되는 메모리 액세스 및 IO 디바이스에 할당된 복수의 코어 콤플렉스 칩렛 중 적어도 하나에 의해 사용되는 메모리 액세스를 지원하는 제2 회로부를 포함한다. 예 7. 예 1의 프로세서 시스템에 있어서, 복수의 코어 콤플렉스 칩렛 각각이 서로 통신하도록 허용하고 복수의 코어 콤플렉스 칩렛이 가속기 칩렛과 통신하도록 구성되는 인터커넥트를 더 포함하고, 인터커넥트 및 가속기 칩 렛은 동일한 집적 회로의 일부이다. 예 8. 예 1의 프로세서 시스템에 있어서, 복수의 코어 콤플렉스 칩렛 중 적어도 하나를 가속기 칩렛에 할당한 후에, 컴포저블 에이전트는 복수의 코어 콤플렉스 칩렛 중 적어도 하나가 더 이상 IO 디바이스의 일부가 되지 않도록 복수의 코어 콤플렉스 칩렛 중 적어도 하나를 CPU에 재할당하도록 구성된다. 예 9. 예 1의 프로세서 시스템에 있어서, 컴포저블 에이전트는 IO 디바이스가 복수의 코어 콤플렉스 칩렛 중 다수의 코어 콤플렉스 칩렛을 포함하도록 IO 디바이스에 복수의 코어 콤플렉스 칩렛 중 부가적인 코어 콤플렉스 칩렛을 할당하도록 구성된다. 예 10. 프로세서 시스템으로서, 각각 적어도 하나의 프로세서 코어를 포함하는 복수의 코어 콤플렉스 칩렛; 가 속기 칩렛; 및 복수의 코어 콤플렉스 칩렛을 서로 그리고 가속기 칩렛에 연결하는 인터커넥트를 포함하고, 인터 커넥트는 복수의 코어 복합 칩렛 중 적어도 하나를 가속기 칩렛에 할당하여 IO 디바이스를 형성하는 한편, 잔여 복수의 코어 복합 칩렛은 호스트를 위한 중앙 처리 장치(CPU)를 형성하도록 구성된 컴포저블 에이전트를 포함한 다. 예 11. 예 10의 프로세서 시스템에 있어서, 복수의 코어 콤플렉스 칩렛은 복제 집적 회로이고, 가속기 칩렛은 복제 집적 회로와 상이한 집적 회로를 사용하여 구현되고, 인터커넥트는 복수의 코어 콤플렉스 칩렛과 별개인 집적 회로를 사용하여 구현된다. 예 12. 예 10의 프로세서 시스템에 있어서, 가속기 칩렛은 어떠한 프로세서 코어도 포함하지 않는다. 예 13. 예 10의 프로세서 시스템에 있어서, 인터커넥트는 CPU를 형성하는 복수의 코어 콤플렉스 칩렛에 의해 사용되는 인터럽트 시맨틱 및 IO 디바이스에 할당된 복수의 코어 콤플렉스 칩렛 중 적어도 하나에 의해 사용되 는 인터럽트 시맨틱을 지원하는 제1 회로부, 및 CPU를 형성하는 복수의 코어 콤플렉스 칩렛에 의해 사용되는 메 모리 액세스 및 IO 디바이스에 할당된 복수의 코어 콤플렉스 칩렛에 의해 사용되는 메모리 액세스를 지원하는 제2 회로부를 포함한다. 예 14. 방법으로서, IO 디바이스에 할당하도록 복수의 코어 콤플렉스 칩렛 중 적어도 하나를 선택하는 한편, 복수의 코어 콤플렉스 칩렛 중 잔여 코어 콤플렉스 칩렛을 호스트의 CPU에 할당하는 단계; 복수의 코어 콤플렉 스 칩렛 중 잔여 코어 콤플렉스 칩렛의 피어로서 선택된 코어 콤플렉스 칩렛을 제거하는 단계; 및 선택된 코어 콤플렉스 칩렛을 IO 디바이스에 추가하는 단계를 포함하고, 복수의 코어 콤플렉스 칩렛은 IO 디바이스에 또한 할당된 가속기 칩렛과 동일한 기판 상에 배치된다. 예 15. 예 14의 방법에 있어서, 복수의 코어 콤플렉스 칩렛은 복제 집적 회로이고, 가속기 칩렛은 복제 집적 회로와 상이한 집적 회로를 사용하여 구현된다. 예 16. 예 14의 방법에 있어서, 복수의 코어 콤플렉스 칩렛 각각은 적어도 하나의 프로세서 코어를 포함하고, 가속기 칩렛은 어떠한 프로세서 코어도 포함하지 않는다.예 17. 예 14의 방법에 있어서, 가속기 칩은 복수의 코어 콤플렉스 칩렛 중 적어도 하나와 조합하여, DPU를 형 성한다. 예 18. 예 14의 방법에 있어서, 인터커넥트는 기판 상에 배치되고 복수의 코어 콤플렉스 칩렛 및 가속기 칩렛 과 별개인 집적 회로를 사용하여 구현된다. 예 19. 예 14의 방법에 있어서, CPU 및 IO 디바이스의 작업부하를 결정하는 단계를 더 포함하고, 작업부하는 IO 디바이스 및 CPU에 할당할 복수의 코어 콤플렉스 칩렛의 수를 결정한다. 예 20. 예 19의 방법에 있어서, CPU 및 IO 디바이스 중 적어도 하나의 작업부하가 변경되었다고 결정하는 단계; 및 IO 디바이스에 할당된 복수의 코어 콤플렉스 칩렛의 수를 조정하는 단계를 더 포함한다. 상술한 내용은 특정 예에 대한 것이지만, 그 기본 범위를 벗어나지 않고 다른 추가 예가 고안될 수 있으며, 그 범위는 후속하는 청구항에 의해 결정된다."}
{"patent_id": "10-2025-7006498", "section": "도면", "subsection": "도면설명", "item": 1, "content": "위에 인용된 특징이 상세히 이해될 수 있는 방식으로 위에 간략하게 요약된 보다 구체적인 설명이 예시적인 구 현을 참조하여 제공될 수 있으며, 그 중 일부는 첨부 도면에 예시된다. 그러나, 첨부된 도면은 통상적이고 예 시적인 구현만을 예시하므로, 그 범위를 제한하는 것으로 간주되어서는 안 된다는 것에 유의해야 한다. 도 1은 일 실시예에 따라, 통합된 적응형 가속기를 포함하는 프로세서 시스템을 도시한다. 도 2는 일 실시예에 따라, 통합 가속기에 프로세싱 코어를 추가하기 위한 흐름도이다. 도 3은 실시예에 따른 프로세서 시스템의 블록도이다. 도 4는 일 실시예에 따라, 통합된 적응형 가속기를 포함하는 프로세서 시스템을 도시한다.도 5는 일 실시예에 따라, 통합된 적응형 가속기를 포함하는 프로세서 시스템을 도시한다. 도 6은 일 실시예에 따라, 다수의 통합된 적응형 가속기를 포함하는 프로세서 시스템을 도시한다. 이해를 용이하게 하기 위해, 가능한 경우 도면에 공통된 동일한 요소를 지정하기 위해 동일한 참조 번호가 사용 되었다. 하나의 예의 요소가 다른 예에 유익하게 통합될 수 있는 것으로 고려된다."}
