{"patent_id": "10-2023-0073134", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0173962", "출원번호": "10-2023-0073134", "발명의 명칭": "DRM이 적용된 클라우드 게이밍 시스템", "출원인": "주식회사 체프", "발명자": "김민준"}}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "클라이언트의 요청을 수신하고 클라이언트를 인증하기 위한 서버로서, 상기 서버는, 상기 클라이언트로부터 실행이 요청된 프로그램 코드의 일부에 해당되는 클리핑 코드를 암호화시킨 i) 클리핑코드의 암호문을 생성하고, 클리핑 코드의 암호문을 복호화시키기 위한 암호 키를 암호화시킨 ii) 암호 키의 암호문을 생성하기 위한 DRM(Digital Right Management) 모듈; 및 상기 클리핑 코드의 암호문을 저장하기 위한 데이터 베이스를 포함하고, 상기 서버는, 인증된 클라이언트에 대해, i) 클리핑 코드의 암호문 및 클리핑 코드의 암호문을 복호화시키기 위한 ii) 암호 키의 암호문을 전송해주는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 클라이언트는, 상기 프로그램 코드의 일부에 해당되는 클리핑 코드를 제외한 프로그램의 나머지 코드에 해당되는 메인 코드가 저장된 로컬 영역의 저장장치를 포함하는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 클리핑 코드 및 메인 코드는, 서로로부터 이격된 서버 측 및 클라이언트 측에 각각 저장되는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 DRM 모듈은, 상기 프로그램의 내장 키와, 시간 의존성을 갖는 키가 서로 연결된(concatenate)AES(Advanced Encryption Standard) 키를 이용하여, 상기 암호 키의 암호문을 생성하는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 DRM 모듈은, 상기 AES(Advanced Encryption Standard) 키를, 같은 키 값으로 암호 키의 평문과 암호 키의암호문 사이에서 암호화 및 복호화시키는 대칭 키로 생성하는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제4항에 있어서,상기 프로그램의 내장 키는, 프로그램의 코드 일부 자체를 키 값으로 하는 것을 특징으로 하는 클라우드 게이밍시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 프로그램의 내장 키는, 상기 클리핑 코드를 제외한 프로그램의 나머지 코드에 해당되는 메인 코드의 일부코드 자체를 키 값으로 하는 것을 특징으로 하는 클라우드 게이밍 시스템.공개특허 10-2024-0173962-3-청구항 8 제4항에 있어서,상기 시간 의존성을 갖는 키는, 시간의 흐름에 따라 무작위로 변화하는 키 값 또는 시간을 입력으로 하여 사전에 설정된 함수로부터 출력되는 키 값을 갖는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제4항에 있어서,상기 시간 의존성을 갖는 키는, OTP(one time password) 키에 해당되는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 클라이언트는, 서버로부터 i) 클리핑 코드의 암호문 및 ii) 암호 키의 암호문을 입수하고, ii) 암호 키의 암호문을 복호화시키기 위한 AES 키를 생성하여, 생성된 AES 키로부터 암호 키의 암호문을 암호키의 평문으로 복호화 시키고, 복호화된 암호 키를 이용하여, i) 클리핑 코드의 암호문으로부터 클리핑 코드의 평문으로 복호화시키는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 클라이언트는 복호화된 클리핑 코드와 자신의 저장장치에 저장되어 있던 메인 코드를 서로 조합하고 메모리에 로딩하여 프로그램 코드를 실행하는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항에 있어서,상기 클라이언트는, 자신의 저장장치에 저장되어 있던 메인 코드의 일부 코드 자체를 키 값으로 하는 프로그램의 내장 키와, 시간 의존성을 갖는 키를 서로 연결(concatenate)한 AES 키를 생성하고, 생성된 AES 키를 이용하여, 서버로부터 입수된 암호 키의 암호문으로부터 암호 키의 평문을 생성하는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항에 있어서,상기 DRM 모듈은, SPN(Substitution-Permutation Network) 구조가 적용되어, 치환(substitution)을 수행하는에스-박스(s-box)와, 전치(permutation)를 수행하는 피-박스(p-box)를 포함하는 라운드(round) 함수를 기본 모듈로 하여, 다수의 라운드 함수를 통과시키면서 암호문을 생성하는 AES(Advanced Encryption Standard) 알고리즘을 포함하는 것을 특징으로 하는 클라우드 게이밍 시스템."}
{"patent_id": "10-2023-0073134", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명에서는 DRM이 적용된 클라우드 게이밍 시스템이 개시된다. 상기 DRM이 적용된 클라우드 게이밍 시스템은, 클라이언트의 요청을 수신하고 클라이언트를 인증하기 위한 서버로서, 서버는, 클라이언트로부터 실행이 요청된 프로그램 코드의 일부에 해당되는 클리핑 코드를 암호화시킨 i) 클리핑 코드의 암호문을 생성하고, 클리핑 코드 (뒷면에 계속)"}
{"patent_id": "10-2023-0073134", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 DRM이 적용된 클라우드 게이밍 시스템에 관한 것이다."}
{"patent_id": "10-2023-0073134", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근에는 온라인으로 연결된 서버를 통하여 게임 컨텐츠를 구현하는 동영상 스트리밍을 수신함으로써, PC 또는 노트북과 같은 상대적으로 고성능의 컴퓨팅 기기가 아닌 모바일 폰과 같은 상대적으로 저성능의 컴퓨팅 기기를 이용하더라도, 웹 브라우저를 통하여 수신된 동영상 스트리밍을 구현할 수 있으며, 웹 브라우저를 통하여 통신 이 가능한 컴퓨팅 기기라면 컴퓨팅 자원의 사양에 제한되지 않고, 자신의 컴퓨팅 기기에 적합한 해상도로 구현 된 동영상 스트리밍을 제공받을 수 있다."}
{"patent_id": "10-2023-0073134", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 일 실시형태는, 게임 크랙커의 공격에도 불구하고, 인증된 클라이언트 또는 권한이 증명된 클라이언 트에 대해서만 게임 컨텐츠의 접근이 허용되도록 DRM(Digital Right Management)이 적용된 클라우드 게이밍 시 스템을 포함한다."}
{"patent_id": "10-2023-0073134", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기와 같은 과제 및 그 밖의 과제를 해결하기 위한 본 발명의 일 실시형태에 따른 DRM(Digital Right Management)이 적용된 클라우드 게이밍 시스템은, 클라이언트의 요청을 수신하고 클라이언트를 인증하기 위한 서버로서, 상기 서버는, 상기 클라이언트로부터 실행이 요청된 프로그램 코드의 일부에 해당되는 클리핑 코드를 암호화시킨 i) 클리핑 코드의 암호문을 생성하고, 클리핑 코드의 암호문을 복호화시키기 위한 암호 키를 암호화시킨 ii) 암호 키의 암 호문을 생성하기 위한 DRM(Digital Right Management) 모듈; 및 상기 클리핑 코드의 암호문을 저장하기 위한 데이터 베이스를 포함하고, 상기 서버는, 인증된 클라이언트에 대해, i) 클리핑 코드의 암호문 및 클리핑 코드의 암호문을 복호화시키기 위 한 ii) 암호 키의 암호문을 전송해줄 수 있다. 예를 들어, 상기 클라이언트는, 상기 프로그램 코드의 일부에 해당되는 클리핑 코드를 제외한 프로그램의 나머 지 코드에 해당되는 메인 코드가 저장된 로컬 영역의 저장장치를 포함할 수 있다. 예를 들어, 상기 클리핑 코드 및 메인 코드는, 서로로부터 이격된 서버 측 및 클라이언트 측에 각각 저장될 수 있다. 예를 들어, 상기 DRM 모듈은, 상기 프로그램의 내장 키와, 시간 의존성을 갖는 키가 서로 연결된(concatenate) AES(Advanced Encryption Standard) 키를 이용하여, 상기 암호 키의 암호문을 생성할 수 있다. 예를 들어, 상기 DRM 모듈은, 상기 AES(Advanced Encryption Standard) 키를, 같은 키 값으로 암호 키의 평문 과 암호 키의 암호문 사이에서 암호화 및 복호화시키는 대칭 키로 생성할 수 있다. 예를 들어, 상기 프로그램의 내장 키는, 프로그램의 코드 일부 자체를 키 값으로 할 수 있다. 예를 들어, 상기 프로그램의 내장 키는, 상기 클리핑 코드를 제외한 프로그램의 나머지 코드에 해당되는 메인 코드의 일부 코드 자체를 키 값으로 할 수 있다. 예를 들어, 상기 시간 의존성을 갖는 키는, 시간의 흐름에 따라 무작위로 변화하는 키 값 또는 시간을 입력으로 하여 사전에 설정된 함수로부터 출력되는 키 값을 가질 수 있다. 예를 들어, 상기 시간 의존성을 갖는 키는, OTP(one time password) 키에 해당될 수 있다. 예를 들어, 상기 클라이언트는, 서버로부터 i) 클리핑 코드의 암호문 및 ii) 암호 키의 암호문을 입수하고, ii) 암호 키의 암호문을 복호화시키기 위한 AES 키를 생성하여, 생성된 AES 키로부터 암호 키의 암호문을 암호 키의 평문으로 복호화 시키고, 복호화된 암호 키를 이용하여, i) 클리핑 코드의 암호문으로부터 클리핑 코드의 평문으로 복호화시킬 수 있다. 예를 들어, 상기 클라이언트는 복호화된 클리핑 코드와 자신의 저장장치에 저장되어 있던 메인 코드를 서로 조 합하고 메모리에 로딩하여 프로그램 코드를 실행할 수 있다. 예를 들어, 상기 클라이언트는, 자신의 저장장치에 저장되어 있던 메인 코드의 일부 코드 자체를 키 값으로 하 는 프로그램의 내장 키와, 시간 의존성을 갖는 키를 서로 연결(concatenate)한 AES 키를 생성하고, 생성된 AES 키를 이용하여, 서버로부터 입수된 암호 키의 암호문으로부터 암호 키의 평문을 생성할 수 있다. 예를 들어, 상기 DRM 모듈은, SPN(Substitution-Permutation Network) 구조가 적용되어, 치환(substitution)을 수행하는 에스-박스(S-Box)와, 전치(permutation)를 수행하는 피-박스(P-Box)를 포함하는 라운드(round) 함수를 기본 모 듈로 하여, 다수의 라운드 함수를 통과시키면서 암호문을 생성하는 AES(Advanced Encryption Standard) 알고리 즘을 포함할 수 있다."}
{"patent_id": "10-2023-0073134", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 의하면, 프로그램 코드의 일부에 해당되는 클리핑 코드와 클리핑 코드를 제외한 나머지 다른 메인 코 드를 분할하고, 분할된 클리핑 코드와 메인 코드를 서로 다른 저장 개소에 분리하여 저장해두고, 클리핑 코드를 복호화시키기 위한 암호 키를 시간 의존성을 갖는 키로 암호화 시킴으로써, 게임 크랙커의 공격에도 불구하고, 인증된 클라이언트 또는 권한이 증명된 클라이언트에 대해서만 게임 컨텐츠의 접근이 허용되도록 DRM이 적용된 클라우드 게이밍 시스템이 제공된다."}
{"patent_id": "10-2023-0073134", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 발명의 바람직한 실시형태에 따른 클라우드 게이밍 시스템에 대해 설명하기로 한다. 도 1에는 본 발명의 일 실시형태에 따른 클라우드 게이밍 시스템의 개략적인 구성을 보여주는 도면이 도시되어 있다. 도 2에는 본 발명의 일 실시형태에서, 프로그램 코드의 일부 코드에 해당되는 클리핑 코드와, 클리핑 코드를 제 외한 프로그램의 나머지 코드에 해당되는 메인 코드를 각각 서로 다른 로컬 영역 및 서버 영역으로 분산 저장시 키는 DRM 모듈을 설명하기 위한 도면이 도시되어 있다. 도 3에는 클리핑 코드의 평문과 클리핑 코드의 암호문 사이에서 암호 키(B)로 암호화 및 복호화시키는 프로세스 를 개략적으로 보여주는 도면이 도시되어 있다. 도 4에는 암호 키의 평문과 암호 키의 암호문 사이에서 AES 키(KAES)로 암호화 및 복호화시키는 프로세스를 개략 적으로 보여주는 도면이 도시되어 있다. 도 5에는 클라이언트의 요청으로부터 개시되어 요청된 프로그램의 실행에 이르기까지 클라이언트와 서 버 측에서 이루어지는 각각의 프로세스와 클라이언트와 서버 사이의 통신을 개략적으로 설명하기 위한 도면이 도시되어 있다. 도 6에는 본 발명의 일 실시형태에서 따른 DRM 모듈에서 수행되는 블록 암호화를 위한 AES(Advanced Encryption Standard)를 개략적으로 설명하기 위한 도면이 도시되어 있다. 도 7에는 AES의 다수의 round 함수에서 AES 키로부터 각각의 라운드 키를 생성하기 위한 key expansion을 개략 적으로 설명하기 위한 도면이 도시되어 있다. 도 1 내지 도 5를 참조하면, 본 발명의 일 실시형태에 따른 클라우드 게이밍 시스템은, 클라이언트의 요청 을 수신하고 클라이언트를 인증하기 위한 서버로서, 상기 서버는, 클라이언트로부터 실행이 요청된 프로그램 코드의 일부에 해당되는 클리핑(clipping) 코드를 암호화시킨 i) 클리핑 코드의 암호문을 생성 하고, 클리핑 코드의 암호문을 복호화시키기 위한 암호 키를 암호화시킨 ii) 암호 키의 암호문을 생성하기 위한 DRM(Digital Right Management) 모듈; 및 상기 클리핑 코드의 암호문을 저장하기 위한 데이터 베이스 를 포함하고, 상기 서버는 인증된 클라이언트에 대해, i) 클리핑 코드의 암호문 및 클리핑 코드 의 암호문을 복호화시키기 위한 ii) 암호 키의 암호문을 전송해줄 수 있다. 본 발명의 일 실시형태에서, 상기 서버란 서비스를 요청하는 클라이언트와의 관계에서 서비스를 제공 하는 주체로서 프론트엔드(front-end) 측의 클라이언트와 대비되는 백엔드(back-end) 측을 의미할 수 있다. 본 발명의 일 실시형태에서, 상기 서버는 서비스를 제공하는 사업자에 의해 관리 및 운영되는 컴퓨팅 자원 으로 온프레미스(on-premise) 서버를 의미할 수 있으며, 본 명세서를 통하여 상기 서버 또는 온프레 미스 서버는 동일한 의미로 사용될 수 있다. 다만, 본 발명의 다양한 실시형태에서 상기 서버란, 다 른 사업자들과 함께 컴퓨팅 자원을 공유하는 형태 또는 서비스를 제공하는 사업자와는 다른 주체에 의해 해당되 는 서비스 제공에 할애되는 컴퓨팅 자원이 할당, 관리 및 운영되는 형태의 클라우드 컴퓨팅 환경에서의 서버 (100, 예를 들어, virtual server, private server 등)도 포괄적으로 포함될 수 있는 광의적인 개념으로 사용 될 수 있다. 본 발명의 일 실시형태에 따른 클라우드 게이밍 시스템에는, 게임 컨텐츠를 보호하고 게임 크래커(cracker)에 의한 게임 컨텐츠의 불법 유통을 차단하기 위한 DRM(Digital Rights Management) 기술이 적용될 수 있다. 이하 에서는 본 발명의 일 실시형태에 따른 클라우드 게이밍 시스템에 적용될 수 있는 DRM 기술에 대해 설명하기로 한다. 본 발명의 일 실시형태에서, 상기 서버는, 인증된 클라이언트 또는 권한이 증명된 클라이언트 에 대해서만 게임 컨텐츠에 대한 접근이 허용되도록 게임 컨텐츠의 일부 코드를 나머지 다른 코드로부터 이 격된 원격의 저장 개소에 저장해두는 한편으로, 상기 게임 컨텐츠의 일부 코드를 시간 의존성을 갖는 키 또는 OTP(one time password) 키로 암호화하여 게임 크랙커의 접근을 차단하는 DRM(Digital Rights Management) 모 듈을 포함할 수 있다. 상기 DRM 모듈은, 게임의 프로그램 코드(바이너리 코드)로부터 일부 코드를 잘라내어, 상대적으로 많은 데 이터 용량의 메인 코드와, 상대적으로 작은 데이터 용량(8KByte ~ 64KByte)의 클리핑(clipping) 코드로 분할할수 있으며, 서로로부터 분할된 메인 코드와 클리핑 코드를 물리적으로 이격된 서로 다른 저장 개소에 각각 저장 해둘 수 있다. 예를 들어, 상기 DRM 모듈은, 서로로부터 분할된 메인 코드와 클리핑 코드를, 각각 클라이 언트 측의 로컬 영역(로컬 영역의 저장장치)과 서버 영역(예를 들어, 서버 100의 데이터 베이스 180)에 저 장해둘 수 있다. 본 발명의 일 실시형태에서, 상기 DRM 모듈은 실행 가능한 프로그램 코드를 메인 코드와 클리핑 코드로 분할하고, 메인 코드와 클리핑 코드를 서로 물리적으로 이격된 로컬 영역(로컬 영역의 저장장 치)과 서버 영역(서버 100의 데이터 베이스 180)에 각각 분산하여 저장해둠으로써, 메인 코드가 저장된 로컬 영 역(로컬 영역의 저장장치)에 대한 게임 크랙커의 공격이나 또는 클리핑 코드가 저장된 서버 영역(서버 100의 데 이터 베이스 180)에 대한 게임 크랙커의 공격만으로는 실행 가능한 프로그램을 입수하거나 또는 실행 가능한 프 로그램에 대한 조작이 불가능하게 되며, 예를 들어, 실행 가능한 프로그램에 대한 조작을 통하여 정당한 권한이 나 권한 증명이 없이도 게임 프로그램이 동작되도록 프로그램을 조작하는 것이 불가능하게 될 수 있다. 즉, 실 행 가능한 프로그램 코드를 형성하기 위해서는, 서로 다른 원격의 저장 개소(예를 들어, 클라이언트 10 측의 로 컬 영역과 서버 영역)에 분산 저장된 메인 코드와 클리핑 코드의 조합이 선행되어야 하므로, 메인 코드가 저장 된 로컬 영역에 대한 게임 크랙커의 공격이나 또는 클리핑 코드가 저장된 서버 영역에 대한 게임 크랙커의 공격 만으로는 실행 가능한 프로그램 코드를 입수하거나 또는 실행 가능한 프로그램 코드에 대한 조작이 불가능하게 될 수 있다. 본 발명의 실시형태에서와 달리, 클라이언트 측의 로컬 영역(로컬 영역의 저장장치) 또는 서버 영역(예를 들어, 서버 100의 데이터 베이스 180) 중에서 어느 하나의 저장 개소에 프로그램 코드가 온전하게 저장되어 있 다면, 온전하게 저장된 프로그램 코드의 일부 로직에 조작을 가하여, 예를 들어, 특정 비교를 우회하도록 일부 로직에 조작을 가함으로써, 정당한 권한이나 권한 증명이 없이도 프로그램이 동작되도록 할 수 있으나, 본 발명 에서는, 서로 물리적으로 떨어진 원격의 저장 개소(로컬 영역의 저장장치 및 서버 영역)로 분산 저장된 메인 코 드 및 클리핑 코드를 통하여, 예를 들어, 메인 코드가 저장된 로컬 영역에 대한 게임 크랙커의 공격이나 또는 클리핑 코드가 저장된 서버 영역에 대한 게임 크랙커의 공격에도 불구하고, 실행 가능한 프로그램 코드를 입수 할 수 없으며, 또한, 실행 가능한 프로그램 코드에 대한 조작을 통하여 정당한 권한이나 권한 증명이 없이 게임 프로그램이 동작되도록 할 수 없다. 본 발명의 일 실시형태에서, 상기 클리핑 코드는 실행 가능한 프로그램 코드로부터 잘라 내어진 일부 코드를 의 미하는 것으로, 본 발명의 일 실시형태에서, 상기 클리핑 코드는 대략 8KByte ~ 64KByte의 크기로 프로그램 코 드로부터 잘라 내어질 수 있으며, 이와 같은 클리핑 코드는 메인 코드와의 조합을 통하여 비로서 실행 가능한 온전한 프로그램 코드를 형성할 수 있다. 본 발명의 일 실시형태에서, 상기 메인 코드는 클라이언트 측에 저장될 수 있으며, 상기 클리핑 코드는 서버 영역에 저장될 수 있고, 보다 구체적으로, 상기 클리핑 코드는 서 버 측의 DRM 모듈에 의해 암호문으로 생성되어 암호문으로 저장될 수 있다. 예를 들어, 상기 DRM 모 듈은 클리핑 코드의 평문을 입력으로 하고 암호 키(B)를 이용하여, 예를 들어, 암호 키(B)와의 XOR 연산을 통하여 클리핑 코드의 암호문을 생성할 수 있으며, 생성된 클리핑 코드의 암호문은 클리핑 코드의 암호화에 사 용된 암호 키(B)와 함께, 서버의 데이터 베이스(180, 서버 영역)에 저장해둘 수 있다. 후술하는 바와 같이, 상기 서버는 요청이 수신된 클라이언트를 인증하고, 인증된 클라이언트에 대해 상기 클리핑 코드의 암호문과 클리핑 코드의 암호화에 사용된 암호 키(B)를 인증된 클라이언트에게 전송하며, 이때, 상 기 클리핑 코드의 암호화에 사용된 암호 키(B)는 대칭 키로서, 암호화 및 복호화에 동일하게 사용될 수 있으며, 상기 서버는 인증된 클라이언트에 대해, 클리핑 코드의 암호문을 복호화시키기 위한 암호 키(B)를 전 송해줄 수 있다. 예를 들어, 클리핑 코드의 암호 키(B)는, 클리핑 코드의 평문으로부터 클리핑 코드의 암호문을 생성하는 암호화 및 동일한 키 값으로 클리핑 코드의 암호문으로부터 클리핑 코드의 평문을 생성하는 복호화의 양방향 변환에 적용될 수 있다. 본 명세서를 통하여 암호 키(B)가 암호화 및 복호화의 양방향으로 작용할 수 있 는 대칭 키로 생성된다는 전제 하에, 암호화를 위한 암호 키 또는 복호화를 위한 암호 키는 실질적으로 동일한 키 값을 갖는 동일한 암호 키를 의미할 수 있다. 상기 서버는 클리핑 코드의 암호문과 함께, 클리핑 코드의 암호문의 복호화를 위한 암호 키(B)를 전송하되, 해당되는 암호 키(B)를 암호화하여 인증된 클라이언트 측에 전송할 수 있다. 예를 들어, 본 발명 의 일 실시형태에서, 상기 DRM 모듈은 암호 키(B)의 평문을 블록 암호(block cipher)의 일종인 AES(Advanced Encryption Standard) 알고리즘으로 암호화시킬 수 있으며, 이때, AES 키로 암호화된 암호 키의 암호문(C = E(KAES,B))이 클라이언트 측으로 전송될 수 있다. 이때, 상기 AES 키(KAES)는, 서버와 클라 이언트 측에서 공유하고 있는 암호 규칙에 따라 생성되는 대칭 키로 생성될 수 있으며, 본 발명의 일 실시 형태에서, 프로그램의 내장 키(A)와 시간 의존성을 갖는 키(또는 OTP 키)를 서로 연결(concatenate)시킨 128bit의 키로 생성될 수 있다. 여기서, 프로그램의 내장 키(A)란, 프로그램의 코드 일부 자체를 키 값으로 가질 수 있으며, 암호화하려는 평문(암호 키의 평문)을 입력으로 하고, 프로그램의 내장 키(A)를 암호 키로 하여 이들 사이의 XOR 연산을 통하여 암호문(암호 키의 암호문)을 생성할 수 있다. 그리고, 시간 의존성을 갖는 키 또는 OTP 키는 경시적으로 변화되는 키 값을 가질 수 있으며, 예를 들어, 시간의 흐름에 따라 무작위로 변화하는 키 값을 출력하거나 또는 시간을 입력으로 하여 사전에 설정된 함수 관계에 따라 출력되는 키 값으로부터 시간 의 존성을 갖는 키 또는 OTP 키가 생성될 수 있다. 본 발명의 일 실시형태에서, 상기 프로그램의 내장 키(A)는, 프 로그램의 코드 일부 자체를 키 값으로 가질 수 있는데, 클립핑 코드를 제외한 프로그램의 나머지 코드에 해당되 는 메인 코드의 일부 코드 자체를 키 값으로 가질 수 있다. 본 발명의 일 실시형태에서, 상기 서버는, 서버의 데이터 베이스에 저장되어 있는 클리핑 코드 의 암호문과 클리핑 코드의 암호문의 복호화를 위한 암호 키(B)를 읽어 들이고, 해당되는 클리핑 코드의 암호문 과 클리핑 코드의 암호문의 복호화를 위한 암호 키(B)를 클라이언트 측에 전송해주되, 클리핑 코드의 암호 문의 복호화를 위한 암호 키(B)는 암호 키의 평문(B)으로부터 AES 키(KAES)를 이용하여 암호 키의 암호문(C = E(KAES,B))을 생성할 수 있으며, 이때, AES 키(KAES)는 프로그램의 내장 키(A)와 시간 의존성을 갖는 키(또는 OTP 키)가 서로 연결된(concatenate) 128bit의 암호 키를 의미할 수 있으며, 상기 암호 키(B)는 상기와 같이 정의된 AES 키(KAES)로 암호 키(B)의 평문으로부터 암호화될 수 있으며, 대칭 키로서 암호 키(B)의 평문은 상기와 같이 정의된 AES 키(KAES)로 암호 키(B)의 평문으로 복호화될 수 있다. 그리고 복호화된 암호 키(B)로부터 클리핑 코 드의 암호문을 복호화시킬 수 있다. 상기 클라이언트는 서버로부터 클리핑 코드의 암호문과, 클리핑 코드의 암호문의 복호화를 위한 암호 키(B), 보다 구체적으로, 암호 키(B)의 평문이 AES 키(KAES)로 암호화된 암호 키의 암호문(C = E(KAES,B))을 입수 하고, 사전에 공유된 암호 규칙에 따라 대칭 키로 형성된 AES 키(KAES)를 생성할 수 있으며, 예를 들어, 상기 클 라이언트는 프로그램의 내장 키(A)와 시간 의존성을 갖는 키(또는 OTP 키)가 서로 연결(concatenate)된 128bit 암호 키(AES 키, KAES)를 생성하고, 생성된 AES 키(KAES)로 서버로부터 입수된 암호 키의 암호문(C) 를 복호화시킬 수 있으며, 암호 키의 암호문(C)으로부터 암호 키(B)의 평문을 생성할 수 있다. 예를 들어, 본 발명의 일 실시형태에서, 상기 클라이언트는 128bit 암호 키(AES 키, KAES)를 생성하고 생성 된 AES 키(KAES)를 이용하여, 서버로부터 입수된 클리핑 코드의 암호문을 복호화시키기 위한 암호 키(B)를 복호화시킬 수 있으며, 예를 들어, 암호 키의 암호문(C)으로부터 암호 키(B)의 평문을 생성하고, 생성된 암호 키(B)를 이용하여, 클리핑 코드의 암호문을 클리핑 코드의 평문으로 복호화시킬 수 있다. 이와 같이, 인증된 클라이언트로서는, 서버로부터 클리핑 코드의 암호문과 클리핑 코드의 암호문의 복 호화를 위한 암호 키(B), 보다 구체적으로, 암호 키(B)의 평문이 AES 키(KAES)로 암호화된 암호 키의 암호문(C = E(KAES,B))을 입수하고, AES 키(KAES)를 생성하여 암호 키의 암호문(C)을 복호화하여 암호 키(B)의 평문을 생성하 고, 복호화된 암호 키(B)를 이용하여, 클리핑 코드의 암호문으로부터 클리핑 코드의 평문을 생성할 수 있고, 상 기 클라이언트는 복호화된 클리핑 코드와 자신의 저장장치에 저장되어 있던 메인 코드를 서로 조합하고 메 모리에 로딩하여 프로그램 코드를 실행할 수 있다. 본 발명의 일 실시형태에서, 프로그램 코드의 일부에 해당되는 클리핑 코드는 서버 영역에 저장되어 있다가 서 버로부터 인증된 클라이언트 측으로 전송될 수 있으며, 인증된 클라이언트 측에서 복원되어 클라 이언트 측에 저장되어 있던 메인 코드와 조합되면서 비로서 실행 가능한 프로그램 코드를 형성할 수 있다. 보다 구체적으로, 상기 서버 내지는 서버의 DRM 모듈은 인증된 클라이언트에 대해 자신의 서버 영역에 저장되어 있던 클리핑 코드를 전송해주되, 클리핑 코드를 암호화한 클리핑 코드의 암호문을 전송해 줄 수 있다. 이때, 상기 서버 내지는 서버의 DRM 모듈은 클리핑 코드의 암호문과 함께, 클리핑 코드의 복호화를 위한 암호 키(B), 보다 구체적으로, 암호 키(B)의 평문이 AES 키(KAES)로 암호화된 암호 키의 암호문(C = E(KAES,B))을 클라이언트에 전송해줄 수 있으며, 이때, 상기 암호 키의 암호문(C)은 프로그램의 내장 키(A)와 시간 의존성을 갖는 키(또는 OTP 키)가 서로 연결된(concatenate) 일정한 bit수의 암호 키(AES 키, KAES)로 암호화될 수 있으며, 예를 들어, 본 발명의 일 실시형태에서, 상기 프로그램의 내장 키(A)와 시간 의존성을 갖는 키가 서로 연결된(concatenate) 128bit 암호 키(AES 키, KAES)를 이용하여 암호 키(B)의 평문은암호 키(B)의 암호문으로 암호화될 수 있다. 본 발명의 일 실시형태에서, 상기 서버 또는 서버의 DRM 모듈은, 블록 암호(block cipher)의 일종인 AES(Advanced Encryption Standard) 알고리즘으로 암호 키(B)를 암호화시킬 수 있으며, 암호 키(B)의 평문으로부터 암호 키의 암호문(C)을 생성할 수 있고, 이때, 프로그램의 내장 키와 시간 의존성을 갖는 키가 서 로 연결된(concatenate) 128bit의 AES 키(KAES)를 이용하여, 암호 키의 암호문(C)을 생성할 수 있다. 상기 서버에 접속하여 요청(request)을 전송하고 서버로부터 인증된 클라이언트는, 클리핑 코드 의 암호문과 함께, AES 키(KAES)로 암호화된 암호 키(C = E(KAES,B))를 입수할 수 있다. 예를 들어, 상기 클라이 언트는 서버와 매칭되는 AES 알고리즘을 포함할 수 있고, 보다 구체적으로, 상기 서버는, 서버 영역에 저장되어 있던 암호 키(B)의 평문을 입력으로 하여 AES 알고리즘(AES 알고리즘에 의한 암호화)으로부터 AES 키(KAES)를 이용하여 암호 키의 암호문(C = E(KAES,B))을 생성할 수 있으며, 역으로, 상기 클라이언트는 서버로부터 입수된 암호 키의 암호문(C)을 입력으로 하여 AES 알고리즘(AES 알고리즘에 의한 복호화, 인버 스 AES 알고리즘)으로부터 대칭 키로 동일한 키 값을 갖는 AES 키(KAES)를 이용하여 암호 키(B)의 평문(B = D(KAES,C))을 생성할 수 있다. 그리고, 상기 클라이언트는 서버로부터 입수된 클리핑 코드의 암호문과 AES 키(KAES)를 이용하여 복호화된 암호 키(B)로부터 클리핑 코드의 평문을 생성할 수 있으며, 이와 같이 생성된 클리핑 코드(클리핑 코드의 평문)는 클라이언트 측에 저장되어 있던 메인 코드와 조합되면서 비로서 실행 가능한 프로그램 코드(실행 가능한 바이너리 코드)를 형성할 수 있으며, 복원된 프로그램 코드는 클라이언트 측 컴퓨팅 기기의 메모리(RAM)로 로딩되어 CPU 내지는 GPU에 의한 연산 처리를 통하여 게임 컨텐츠를 형성 하는 동영상 스트리밍을 생성할 수 있으며, 클라이언트 측 컴퓨팅 기기의 화면 상에 구현될 수 있다. 본 발명의 일 실시형태에서, 상기 서버 내지는 서버의 DRM 모듈은 실행 가능한 프로그램 코드로 부터 일부 코드를 잘라내어 클리핑 코드를 생성하고, 클리핑 코드의 평문을 암호화하여 클리핑 코드의 암호문을 생성하고, 생성된 클리핑 코드의 암호문을 서버 영역(서버 100의 데이터 베이스 180)에 저장해둘 수 있다. 이때, 상기 서버 또는 서버의 DRM 모듈은 클리핑 코드를 암호화시킬 때 사용되었던 암호 키(B) 를 AES 키(KAES)로 암호화된 암호 키의 암호문(C = E(KAES,B))을 인증된 클라이언트 측에 전송해줄 수 있고, 인증된 클라이언트는 사전에 공유된 암호 규칙에 따라 대칭 키로 형성된 AES 키(KAES)를 이용하여 암호 키의 암호문(C)으로부터 암호 키(B)의 평문(B = D(KAES,C))을 생성할 수 있으며, 복호화된 암호 키(B)를 이용하여 서 버로부터 전송된 클리핑 코드의 암호문을 클리핑 코드의 평문으로 복호화하고, 복호화된 클리핑 코드를 자 신의 저장장치에 저장되어 있던 메인 코드와 결합하고 메모리에 로딩하여 프로그램 코드를 실행할 수 있다. 상기 DRM 모듈은 클리핑 코드의 암호화에 사용된 암호 키(B)의 평문으로부터 암호 키의 암호문(C)을 생성 하기 위하여, 블록 암호(block cipher)의 일종인 AES(Advanced Encryption Standard) 알고리즘을 포함할 수 있 다. 예를 들어, 블록 암호(block cipher)란 평문(plane text)을 일정한 블록 단위(ex. 128bit)로 잘라서 일정 한 블록 단위로 암호화시키는 것 또는 역으로 암호문(cipher text)을 일정한 블록 단위(ex. 128bit)로 잘라서 일정한 블록 단위로 복호화시키는 것을 의미할 수 있으며, 예를 들어, 128bit의 평문 블록(암호 키 B의 평문)을 128bit의 암호문 블록(암호 키의 암호문 C)으로 암호화(또는 복호화)시킬 수 있다. 도 6 및 도 7을 참조하면, 본 발명의 일 실시형태에서, 상기 AES(Advanced Encryption Standard) 알고리즘에는 SPN(Substitution-Permutation Network) 구조가 적용될 수 있으며, 치환(substitution)을 수행하는 에스-박스 (S-Box)와 전치(permutation)를 수행하는 피-박스(P-Box)를 포함하는 round 함수를 AES의 기본 모듈로 하여 다 수의 round 함수를 통과시키면서 암호문을 생성할 수 있다. 예를 들어, 각각의 round 함수는 AddRoundkey, SubBytes, ShiftRows, MixColumns를 포함할 수 있다. 여기서, AddRoundkey에서는 입력된 128bit의 평문(암호 키 B의 평문)과 128bit의 라운드 키와의 XOR 연산을 수행할 수 있으며, SubBytes는 치환(substitution)을 수행 하는 에스-박스(S-Box)로서, 치환을 통하여 비선형성(차분 공격/선형 공격에 대한 저항성)을 제공할 수 있다. 그리고, 상기 ShiftRows 및 MixColumns은 전치(permutation)를 수행하는 피-박스(P-Box)로서, 디퓨젼 (diffusion)을 제공할 수 있다. 본 발명의 일 실시형태에서, 상기 128bit의 라운드 키는 128bit의 AES 키(KAES) 로부터 생성될 수 있으며, key expansion 알고리즘을 통하여 각각의 개별적인 라운드 키가 생성될 수 있다. 예 를 들어, 0 라운드 키(rk0)는 AES 키(KAES)와 동일하게 생성될 수 있으며, 1 라운드 키(rk1)로부터는 직전 0 라 운드의 마지막 키에 대해 RotWord(rotation word), SubWord(substitution word), Rcon(round 회수에 따라 서로다른 값을 XOR 연산) 등을 적용한 값과 직전 0 라운드 키와의 XOR 연산을 통하여 산출될 수 있다. 본 발명의 일 실시형태에서, 상기 DRM 모듈은 AES(Advanced Encryption Standard) 알고리즘을 포함하여 클리핑 코드의 복호화를 위한 암호 키(B)의 평문으로부터 암호 키의 암호문(C = E(KAES,B))을 생성할 수 있으며, 이때, 상기 DRM 모듈은 프로그램의 내장 키(A)와 시간 의존성을 갖는 키(OTP 키)가 서로 연결된 (concatenate) 128bit의 AES 키(KAES)로 암호 키(B)를 암호화시킬 수 있다. 본 발명의 일 실시형태에서는, 클리 핑 코드의 복호화를 위한 암호 키의 암호문(C)을 생성하면서, 암호 키의 복호화(암호 키 B 평문)를 위한 AES 키 (KAES)를 시간 의존성을 갖는 키 또는 경시적으로 변화되는 OTP(one time password) 키를 조합하여 생성함으로써, 일정한 시간 제한을 넘어선 암호 키로는 클리핑된 코드를 복호화시키는 암호 키(B)의 평문을 생 성할 수 없다. 예를 들어, 서버와 클라이언트 사이의 통신 데이터를 가로채거나(interception) 또는 hosts 파일을 조작하여 인증된 서버로 위장하는 등과 같은 크랙커(cracker)의 공격에도 불구하고, OTP(one time password)와 같이 시간의 흐름에 따라 무작위로 변화하는 키 값 또는 시간을 입력으로 하여 사전에 설정된 함수로부터 출력되는 키 값을 갖는, 이른바 시간 의존성을 갖는 AES 키(KAES)를 이용하여 일정한 시간 제한을 초 과한 암호 키, 예를 들어, 크랙커(cracker)의 공격으로부터 노출되었으나 일정한 시간 제한을 초과한 암호 키를 불용화시킬 수 있다. 도 8에는 본 발명의 일 실시형태에서, 서버(100, on-premise server)와 각각 통신 가능하게 연결된 다수의 엣지 서버를 포함하는 엣지 네트워크(Edge Network)를 개략적으로 보여주는 도면이 도시되어 있다. 도 9에는 도 8에 도시된 서버의 개략적인 구성을 보여주는 도면이 도시되어 있다. 도 10에는 엣지 서버와 클라이언트 사이에서 동영상 스트리밍 및 조작입력(User Input)의 전송을 개략 적으로 보여주는 도면이 도시되어 있다. 도 11a 및 도 11b에는 엣지 서버의 연산 자원으로서 각각 CPU와 GPU의 개략적인 구성을 설명하기 위한 도 면들이 도시되어 있다. 도 12에는 본 발명의 일 실시형태에서, 각각의 엣지 서버로부터 취합된 속성들을 입력으로 하여, 예측된 레이턴시를 출력하는 인공지능 신경망 모델을 설명하기 위한 도면이 도시되어 있다. 도 13a 및 도 13b에는 서로 다른 하이퍼바이저 가상화 기술 및 컨테이너 가상화 기술이 적용된 엣지 서버 의 구조를 개략적으로 설명하기 위한 도면이 도시되어 있다. 도 8 내지 도 10을 참조하면, 본 발명의 다른 측면에 따른 클라우드 게이밍 시스템은, 클라이언트의 요청을 수신하고 인증하기 위한 서버로서, 상기 서버는, 서버와 각각 통신 가능하게 연결된 엣지 네트 워크(Edge Network)를 형성하며, 각각 서로 다른 개소에 위치한 다수의 엣지 서버 중에서 어느 하나의 엣 지 서버에 대해 클라이언트를 할당하기 위하여, 다수의 엣지 서버를 모니터링하는 엣지 네트워크 관리 모듈과, 인증된 클라이언트와 엣지 네트워크 관리 모듈로부터 클라이언트가 할당된 엣 지 서버 사이의 미디어 전송 상태를 설정해 주기 위한 시그널링 서버(150, Signaling Server)를 포함할 수 있다. 예를 들어, 본 발명의 일 실시형태에 따른 클라우드 게이밍 시스템은, 회원 인증을 요청하는 클라이언트의 요청에 따른 인증 처리와, 각각의 클라이언트에 대해 적정의 게임 컴퓨팅 자원을 배분하기 위한 리소스 배 분 처리를 담당하는 서버(100, 예를 들어, 온프레미스 서버, on-premise server)와, 상기 서버와 연결되어 서버로부터 할당된 클라이언트와 직접 접속되어 게임 서비스 내지는 게임 컨텐츠를 제공하는 엣지 네 트워크(Edge Network)를 포함할 수 있다. 예를 들어, 상기 엣지 네트워크(Edge Network)는 상기 서버와 각각 통신 가능하게 연결된 엣지 네트워크(Edge Network)를 형성하며, 각각 서로 다른 개소에 위치한 다수의 엣 지 서버를 포함할 수 있다. 본 발명의 다양한 실시형태에서, 상기 클라우드 게이밍 시스템은, 상기 서버 에 접속하여 회원 인증을 요청하는 클라이언트를 더 포함할 수 있다. 상기 서버(100, 예를 들어, 온프레미스 서버, on-premise server)는, 게임 서비스를 제공하는 사업자가 자체적 으로 구축하고 유지 관리하는 컴퓨팅 환경을 의미할 수 있으며, 상기 서버는 회원 인증을 위한 회원 정보 가 저장되어 있는 데이터 베이스(180, 도 1 참조)를 포함할 수 있다. 후술하는 바와 같이, 본 발명의 다양한 실 시형태에서, 상기 클라우드 게이밍 시스템은, 게임 서비스의 사업자가 자체적으로 구축 및 운영 관리하는 서버 (100, 예를 들어, 온프레미스 서버, on-premise server)와 함께, 게임 서비스의 사업자와 다른 사업자에 의해 구축되어 유지 관리되며 컴퓨팅 자원을 다수의 기업(사업자)과 함께 공유하는 클라우드 컴퓨팅 환경 내지는 인증된 클라이언트와 인접한 엣지 노드(엣지 서버)에서 컴퓨팅 자원 및 서비스를 제공해주는 엣지 네트워크(Edge Network)를 포함할 수 있으며, 본 발명의 다양한 실시형태에서, 상기 엣지 네트워크(Edge Network)는 컴퓨팅 자 원을 공유하는 클라우드 컴퓨팅 환경으로 제공될 수도 있으나, 서로로부터 물리적으로 이격된 다수의 원격지에 서 구축 및 운영 관리되는 다수의 컴퓨팅 자원이 이들에 대해 클라이언트를 할당 및 배분해주는 서버(100, 예를 들어, 온프레미스 서버, on-premise server)와 연결된 네트워크를 형성할 수 있는 한도에서, 상기 엣지 네 트워크(Edge Network)는 서버(100, 예를 들어, 온프레미스 서버, on-premise server)와 유사하게, 게임 서비스 제공 사업자에 의해 구축 및 운영 관리되는 전용의 컴퓨팅 자원의 네트워크를 의미할 수도 있으며, 이러한 실시 형태에서, 상기 엣지 네트워크(Edge Network)는 컴퓨팅 자원을 공유하는 클라우드 컴퓨팅 환경과는 구별되는 개 념으로 이해될 수 있다. 본 발명의 일 실시형태에서, 상기 서버는, 서로로부터 이격된 다수의 원격지로부터 전송되는 클라이언트 의 요청에 대응하여, 각각의 클라이언트에 대한 회원 인증을 처리할 수 있으며, 이를 위하여 상기 서버 는, 회원 가입 과정에서 입수된 회원 정보와 함께, 각각의 회원이 구매한 게임 패키지 또는 구독 중인 게 임에 관한 이용 정보가 저장된 데이터 베이스(180, 도 1 참조)를 포함할 수 있으며, 이들 정보는 회원의 계정과 연계되어 데이터 베이스(180, 도 1 참조)에 저장되어 있을 수 있다. 본 발명의 일 실시형태에서, 상기 서버로부터 클라이언트가 할당된 엣지 서버는, 할당된 클라이 언트에 대해 게임 컨텐츠를 구현하는 동영상의 스트리밍을 제공할 수 있으며, 이에 따라, 상기 클라이언트 로서는 고성능의 컴퓨팅 기기(예를 들어, PC, 노트북 등)가 아닌 저성능의 컴퓨팅 기기(예를 들어, 모바일 폰)로서, 예를 들어, 웹 브라우저가 가동될 수 있는 환경이라면, 예를 들어, 웹 브라우저를 통하여 WebRTC(Web Real-Time Communication) 통신이 가능한 컴퓨팅 기기라면, 클라이언트로서의 컴퓨팅 자원의 사양에 제한되 지 않고, 자신의 컴퓨팅 기기에 적합한 해상도로 구현된 동영상의 스트리밍을 제공받을 수 있다. 예를 들어, 본 발명의 일 실시형태에서, 클라우드 게이밍 시스템의 클라이언트란, 클라이언트 측의 컴퓨팅 기기 상에 서 가동되는 웹 브라우저를 의미할 수 있다. 본 발명의 일 실시형태에서, 상기 서버로부터 클라이언트가 할당된 엣지 서버는, 게임 컨텐츠를 제공하는 동영상을 정해진 프레임 레이트(FPS, frame per second)로 캡쳐하여 프레임을 생성하고(Frame Capturer, 도 10 참조), 생성된 프레임을 인코딩하여 압축 영상 신호를 생성하며(Video Encoder, 도 10 참조), 압축 영상 신호를 통신망을 통하여 할당된 클라이언트에게 전송할 수 있으며, 통신망을 통하여 클라이언트 측으로 전송된 압축 영상 신호는 클라이언트 측의 웹 브라우저에서 디코딩을 통하여 복원된 영상 신호 로 변환될 수 있고(Video Decoder, 도 10 참조), 복원된 영상 신호는 클라이언트 측의 컴퓨팅 기기 상에서 구현될 수 있다. 이와 같이, 본 발명의 일 실시형태에서는 엣지 서버로부터 클라이언트 측으로 게임 프로그램 내지는 실행 가능한 프로그램 코드를 전송하고, 프로그램 코드를 전송받은 클라이언트 측에서 프 로그램 코드를 실행하는 연산 처리를 통하여 게임 컨텐츠를 구현한다기 보다는, 엣지 서버 측에서 직접 프 로그램 코드를 실행하여 게임 컨텐츠를 구현하기 위한 동영상 스트리밍을 생성하고, 생성된 동영상 스트리밍을 클라이언트 측으로 전송하기 때문에, 클라이언트 측의 컴퓨팅 기기의 연산 처리 속도 보다는, 서버 의 연산 처리 속도와, 엣지 서버와 클라이언트 사이에서 영상 신호의 전송 지연이, 게임의 레이 턴시(latency)를 좌우하게 되며, 클라이언트 측에서 감성적으로 느끼는 게임의 반응 속도를 좌우하는 것은, 클라이언트 측이라기 보다는 서버 측, 보다 구체적으로, 게임 실행 중에 클라이언트와 연결을 유 지하면서 클라이언트 측에 대해 게임 컨텐츠를 구현하는 동영상의 스트리밍을 제공하는 엣지 서버 측 의 연산 처리 속도와 엣지 서버와 클라이언트 사이에서 영상 신호의 전송 지연에 따라 게임의 레이턴 시 또는 반응 속도가 결정되는 것으로 이해될 수 있다. 예를 들어, 본 발명의 일 실시형태에서, 게임의 레이턴 시는 클라이언트 측의 조작입력(User Input, 도 10 참조)으로부터 클라이언트 측의 조작입력(User Input)이 반영된 화면이 구현될 때까지 소요되는 반응 시간의 지연을 의미할 수 있다. 본 발명의 일 실시형태에서는 서로로부터 이격된 다수의 원격지에 위치한 다수의 클라이언트로부터의 요청 (request)을 분산시키고 연산 처리의 부담을 다수의 엣지 서버로 배분하되, 요청이 수신된 각각의 클라이 언트의 위치를 기반으로 하는 근거리 기반의 매칭을 통하여 각각의 클라이언트의 위치로부터 근거리의 엣지 서버를 서로 매칭시킬 수 있다. 본 발명의 일 실시형태에서는, 다수의 원격지의 클라이언트로부터의 요청이 어느 하나의 서버, 예를 들어, 온프레미스 서버로 집중되지 않고, 온프레미스 서버로부터의 거리에 따라 다수의 원격지의 클 라이언트에 대한 레이턴시가 발생되지 않도록, 다수의 원격지에 위치한 다수의 엣지 서버를 포함하는 엣지 네트워크(Edge Network)를 구축함으로써, 요청이 수신된 각각의 클라이언트로부터 근거리에 위치한 엣지 서버를 통하여 동영상 스트리밍을 제공할 수 있으며, 근거리에 인접한 클라이언트와 엣지 서버 간의 통신, 예를 들어, 후술하는 바와 같은 WebRTC(Web Real-Time Communication) 통신을 통하여 영상 신호의 전송 지연을 막을 수 있으며, 또한 각각의 엣지 서버가 자신에게 할당된 클라이언트의 요청만 을 집중적으로 처리하도록, 다수의 엣지 서버에 대해 클라이언트의 요청이 할당 및 배분되기 때문에, 어느 하나의 서버, 예를 들어, 온프레미스 서버에 요청이 집중되면서 트래픽의 집중에 따른 영상 신 호의 지연이나 서버의 연산 처리 과부하를 막을 수 있다. 본 발명의 일 실시형태에서, 상기 서버(100, 예를 들어, 온프레미스 서버, on-premise server)는, 서로 다른 개 소에 위치한 다수의 엣지 서버 중에서 어느 하나의 엣지 서버에 대해 클라이언트를 할당하기 위 하여, 다수의 엣지 서버를 모니터링하는 엣지 네트워크 관리 모듈을 포함할 수 있다. 예를 들어, 상 기 엣지 네트워크 관리 모듈은, 요청이 수신된 클라이언트를 엣지 네트워크(Edge Network)를 형성하는 다수의 엣지 서버 중에서 어느 하나의 엣지 서버에 할당하는 매칭 알고리즘을 수행할 수 있으며, 상 기 엣지 네트워크 관리 모듈에 의해 클라이언트가 할당된 엣지 서버는 해당되는 클라이언트 에 대해 게임 컨텐츠를 형성하는 동영상 스트리밍을 제공할 수 있다. 보다 구체적으로, 상기 서버 내지는 서버의 엣지 네트워크 관리 모듈은, 클라이언트의 요청 이 수신되면, 요청된 클라이언트에 대한 인증을 수행하고, 인증된 클라이언트에 적정의 엣지 서버(20 0)를 할당하는 매칭 알고리즘을 수행할 수 있다. 이때, 상기 매칭 알고리즘에서 상기 서버는 클라이언트 의 접속 주소(IP address)를 참조하여, 매칭 대상이 되는 클라이언트와 엣지 네트워크(Edge Network)를 형성하는 각각의 엣지 서버 사이의 통신 거리를 산출할 수 있고, 해당되는 클라이언트와 각각의 엣지 서버 사이에서 산출된 통신 거리에 관한 정보(후술하는 제1 데이터에 해당됨)를 취합할 수 있다. 그리고, 상기 서버 내지는 서버의 엣지 네트워크 관리 모듈은, 엣지 네트워크(Edge Network)를 형성하는 각각의 엣지 서버의 가용한(available) 연산 자원을 모니터링할 수 있으며, 예를 들어, 각각의 엣지 서버 의 전체 연산 처리 능력 중에서 이미 접속된 클라이언트에 대한 동영상 스트리밍을 제공하기 위한 연 산 처리 부하를 제외하고, 새롭게 접속되는 클라이언트에 대한 동영상 스트리밍을 제공할 수 있는 잔여 연 산 처리 능력 또는 가용한 연산 자원을 모니터링하고, 각각의 엣지 서버의 가용한 연산 자원에 관한 정보 (후술하는 제2 데이터에 해당됨)를 취합할 수 있다. 여기서, 본 발명의 일 실시형태에서, 각각의 엣지 서버 의 가용한 연산 자원은, 이하와 같은 서로 다른 3가지의 연산 자원의 조합으로 표현될 수 있다. 1) CPU(central processing unit) 비사용 비율; 어떤 프로그램/데이터에 의해서도 점유되지 않은 CPU의 잔여 비율 또는 비점유 비율(후술하는 제2-1 데이터에 해당됨) 2) GPU(graphic processing unit) 비사용 비율; 어떤 프로그램/데이터에 의해서도 점유되지 않은 GPU의 잔여 비율 또는 비점유 비율(후술하는 제2-2 데이터에 해당됨) 3) RAM(random access memory) 비사용 용량; 어떤 프로그램/데이터에 의해서도 점유되지 않은 RAM의 잔여 비율 또는 비점유 비율(후술하는 제2-3 데이터에 해당됨) 도 11a 및 도 11b를 참조하면, 본 발명의 일 실시형태에서, 상기 CPU(central processing unit)는 중앙 처리 장치로서 산술 연산 및 논리 연산을 위한 ALU(arithmetic and logic unit)와 ALU로 입출력되는 변수의 임시 저 장을 위한 캐쉬(cache) 또는 레지스터(register)를 포함할 수 있으며, 직렬 처리를 지원하되 멀티 스레드 (multi-thread)와 같이 시분할 방식의 멀티 프로세싱을 지원할 수 있으며, CPU 코어가 둘 이상이 구비된 멀티 프로세서는 병렬 처리도 지원할 수 있다. 본 발명의 일 실시형태에서, 상기 CPU(central processing unit)와 GPU(graphic processing unit)는 모두 기본적인 컴퓨팅 엔진이지만, CPU(central processing unit)는 순차적인 태스크에 강점이 있고, 상대적으로 적은 수(4~12개)의 강력한 코어로 구성되어, 어렵고 적은 양의 계산을 신속 하게 할 수 있는 장점이 있는데 반하여, 상기 GPU(graphic processing unit)는 병렬적인 태스크에 강점이 있고, 상대적으로 많은 수(3000~5000)의 소형이고 효율적인 코어로 구성되어 단순하고 많은 양의 계산을 신속하게 할 수 있는 장점이 있을 수 있다. 상기 GPU(graphic processing unit)는 그래픽 처리 장치로서, 본 발명에서와 같이, 게임 컨텐츠를 구현하는 동 영상 스트리밍을 제공할 때, 영상 신호 처리를 위한 다수의 매트릭스 연산을 신속하게 처리할 수 있다. 예를 들 어, 상기 GPU는 게임 컨텐츠를 형성하는 동영상 스트리밍 또는 동영상 스트리밍을 형성하는 각각의 영상 프레임 을 생성하고, 생성된 동영상 스트리밍의 영상 신호를 압축하기 위한 인코딩 및 인코딩으로 압축된 영상 신호를복원하기 위한 디코딩에서, 압축 영상 처리 및 복원 영상 처리를 지원할 수 있다. 예를 들어, 상기 서버 내지는 서버의 엣지 네트워크 관리 모듈이, 요청이 수신된 클라이언트 를 엣지 네트워크(Edge Network)를 형성하는 다수의 엣지 서버 중에서 어느 하나의 엣지 서버에 할당하기 위하여, 각각의 엣지 서버의 연산 자원을 고려한다는 것은, 각각의 엣지 서버의 CPU와 GPU 의 연산 자원을 함께 고려한다는 것을 의미할 수 있으며, CPU와 GPU의 연산 자원을 함께 고려함으로써, 어느 하 나의 병목으로 인한 게임의 레이턴시(latency)가 길어지고, 반응 속도가 지연되는 것을 방지할 수 있다. 예를 들어, 본 발명의 일 실시형태에서는 상대적으로 연산 자원이 부족한 CPU로 인한 CPU 병목 또는 상대적으로 연산 자원이 부족한 GPU로 인한 GPU 병목에 기인하여 게임의 레이턴시(latency)가 길어지고 반응 속도가 지연되는 것 을 방지하도록, 이들 CPU 및 GPU의 연산 자원을 함께 고려하여 적정의 엣지 서버에 대해 클라이언트를 할당할 수 있다. 본 발명의 일 실시형태에서, 상기 GPU는 게임 컨텐츠를 구현하는 영상 프레임을 생성할 수 있고, 상기 CPU는 클 라이언트 측의 이벤트(예를 들어, 조작입력 신호 감지)에 대응하여 게임 컨텐츠의 변화를 연산할 수 있으며, 영상 프레임을 생성하는 GPU의 처리 속도와 클라이언트 측의 이벤트에 대응하는 CPU의 연산 처리 속도 사이에서 균형을 유지할 수 있도록, GPU와 CPU 사이에서 연산 자원의 균형 잡힌 밸런스를 유지하는 것이 바람직할 수 있다. 본 발명의 일 실시형태에서, 상기 CPU와 GPU의 연산 자원은 전체 CPU와 GPU의 연산 처리 능 력 중에서 사용하지 않는 잔여 용량으로 표현될 수 있으며, 예를 들어, 전체 연산 처리 능력 중에서 사용하지 않는 비사용 비율(%)로 표현될 수 있다. 본 발명의 일 실시형태에서, 상기 CPU 및 GPU의 비사용 비율은, 각각의 CPU 및 GPU에서 어떠한 프로그램이나 데이터에 의해서도 점유되지 않은 각각의 CPU 및 GPU의 잔여 또는 비점유 비율을 의미할 수 있다. 상기 RAM(random access memory)은 상기 CPU 또는 GPU에서 실행되는 프로그램 코드가 저장되는 코드 영역과, 프 로그램 전반에서 할당되는 전역 변수 등이 저장되는 데이터 영역과, 함수 내지는 블록 내에서 일시적으로 할당 되는 지역 변수 등이 저장되는 스택 영역을 포함할 수 있다. 상기 CPU 또는 GPU는, RAM의 코드 영역에 저장된 명령어 코드를 읽어 들이고 각각의 명령어 코드를 실행할 수 있다. 본 발명의 일 실시형태에서 각각의 엣지 서 버의 가용한 연산 자원은, 서로 다른 CPU, GPU, RAM의 가용한 연산 자원의 조합으로 표현될 수 있는데, 이 중에서, CPU와 GPU의 가용한 연산 자원은 전체 연산 처리 능력 중에서 이미 접속된 클라이언트에 대한 동영 상 스트리밍을 제공하기 위한 연산 자원의 부담을 제외하고, 추후에 접속될 클라이언트에게 할당될 수 있는 잔여 연산 자원 또는 CPU 또는 GPU의 비사용 비율로 표현될 수 있다. 상기 CPU 및 GPU와 달리, 상기 RAM은 전체 연산 처리 능력(메모리 용량) 중에서 어떠한 프로그램이나 데이터에 의해서도 점유되지 않은 비사용 비율(%)로 표현되지 않고, 비사용 용량(단위 GByte)으로 표현될 수 있다. 예를 들어, 상기 RAM은 프로그램 코드를 실행하 는 CPU 또는 GPU로 호출되는 프로그램 코드가 저장되는 코드 영역과, 프로그램 코드의 전역 변수나 지역 변수 등에 할당되는 데이터 영역 및 스택 영역을 포함할 수 있으며, 프로그램의 실행을 위하여 각각의 프로그램의 사 양으로 규정된 RAM의 메모리 용량 이상이 지원된다면, RAM의 메모리 용량의 부족으로 인하여 게임의 레이턴시 (latency)가 길어지거나 또는 반응 속도가 지연되지는 않을 수 있으며, RAM의 메모리 용량 보다는 CPU 또는 GPU 와 같은 컴퓨팅 엔진의 연산 처리 능력에 의해 게임의 레이턴시(latency) 또는 반응 속도가 결정되는 것으로 이 해될 수 있다. 이에 따라, 상기 RAM의 가용한 연산 자원은, 상기 CPU 및 GPU와 달리, 전체 메모리 용량 중에서 사용하지 않는 비사용 비율과 같은 상대적인 수치(%)로 표현되지 않고, 절대적인 비사용 용량(단위 GByte)으로 표현될 수 있으며, 절대적인 비사용 용량(단위 GByte)으로 표현된 RAM의 메모리 용량이 클라이언트가 요청 한 프로그램(게임 프로그램)의 사양으로 규정된 RAM의 메모리 용량 보다 크다면, RAM의 메모리 용량 보다는 CPU 또는 GPU와 같은 컴퓨팅 엔진의 연산 처리 능력에 의해 게임의 레이턴시(latency) 또는 반응 속도가 결정되는 것으로 이해될 수 있다. 본 발명의 일 실시형태에서, 요청이 수신된 클라이언트를, 엣지 네트워크(Edge Network)를 형성하는 다수의 엣지 서버 중에서 어느 하나에 할당하기 위한 엣지 네트워크 관리 모듈은, 앞서 설명된 바와 같이, i) 클라이언트와 각각의 엣지 서버 사이의 통신 거리(제1 데이터에 해당됨)와, ii) 각각의 엣지 서버의 가용한 연산 자원(제2 데이터에 해당됨)을 고려하여, 적정의 엣지 서버와 해 당되는 클라이언트를 서로 매칭시킬 수 있다. 본 발명의 일 실시형태에서, 상기 엣지 네트워크 관리 모듈은, 상기 i) 및 ii) 외에도, iii) 인증된 클라 이언트로부터 각각의 엣지 서버로 데이터를 전송하고 전송된 데이터에 대한 응답이 도달하기까지 왕복 시간을 고려하여 적정의 엣지 서버와 해당되는 클라이언트를 서로 매칭시킬 수 있다. 본 발명의 일 실 시형태에서, iii) 각각의 엣지 서버로부터 전송된 데이터에 대한 응답이 도달하기까지 왕복 시간은 Ping 테스트로부터 얻어질 수 있으며, 상기 엣지 네트워크 관리 모듈은 Ping 테스트 결과를 고려하여 적정의 엣 지 서버와 해당되는 클라이언트를 서로 매칭시킬 수 있다. 상기 Ping(Packet Internet Groper) 테스트에서는 통신망으로 연결된 어느 하나의 호스트로부터 또 다른 호스트 로 패킷 데이터(packet data)를 전송하고, 또 다른 호스트로부터 응답이 도달하는 왕복 시간을 측정할 수 있으 며, 예를 들어, ms 단위(1/1000초)로 측정될 수 있으며, 상기 Ping 테스트를 통하여 측정된 왕복 시간이 짧을수 록 데이터 전송 경로 상에 병목이나 지연이 없다는 것을 의미할 수 있다. 예를 들어, 본 발명의 일 실시형태에 서, 상기 Ping 테스트에서는 요청이 수신된 클라이언트 측으로부터 각각의 엣지 서버를 향하여 데이터 를 전송하고 각각의 엣지 서버로부터의 응답이 도달하는 왕복 시간을 측정할 수 있다. 본 발명의 일 실시형태에서, 상기 엣지 네트워크 관리 모듈은, 앞서 설명된 바와 같이, i) 클라이언트(1 0)와 각각의 엣지 서버 사이의 통신 거리(제1 데이터에 해당됨)와, ii) 각각의 엣지 서버의 가용한 연산 자원(서로 다른 CPU, GPU, RAM의 가용한 연산 자원의 조합, 제2 데이터에 해당됨)과, iii) Ping 테스트 결 과(각각의 엣지 서버로부터 전송된 데이터에 대한 응답이 도달하기까지 왕복 시간, 제3 데이터에 해당됨) 를 고려하여 적정의 엣지 서버와 해당되는 클라이언트를 서로 매칭시킬 수 있다. 본 발명의 일 실시형태에서, 상기 엣지 네트워크 관리 모듈은, 요청이 수신된 클라이언트를 적정의 엣 지 서버에 할당해줌으로써, 게임의 레이턴시가 과도하게 길어지거나 또는 반응 속도가 지연되는 것을 방지 할 수 있다. 예를 들어, 본 발명의 일 실시형태에서, 상기 iii) Ping 테스트 결과는 요청이 수신된 클라이언트 측으로부터 엣지 네트워크(Edge Network)를 형성하는 각각의 엣지 서버를 향하여 데이터를 전송하고 각각의 엣지 서버로부터의 응답이 도달하는 왕복 시간을 측정한 것으로, Ping 테스트 결과는 패킷 데이터 의 전송 경로 상의 병목이나 지연에 대한 척도를 제공할 수 있다. 본 발명의 일 실시형태에서, iii) Ping 테스트 결과는 클라이언트 측과 각각의 엣지 서버 사이의 전송 지연에 대한 척도를 제공하는데 반하여, 상기 게임의 레이턴시(또는 반응 속도의 지연)는, 상기 iii) Ping 테스 트 결과와는 다른 개념 일 수 있으며, 예를 들어, 상기 게임의 레이턴시(또는 반응 속도의 지연)는 상기 iii) Ping 테스트 결과를 포괄하여 영상 신호 처리에 소요되는 시간 지연을 더 포함하는 개념일 수 있다. 예를 들어, 본 발명의 일 실시형태에서, 상기 서버 내지는 서버의 엣지 네트워크 관리 모듈은, 상기 i) 내 지 iii)을 입력으로 하고 예측되는 게임의 레이턴시(또는 반응 속도의 지연)를 출력하도록 학습된 가중치를 포 함하는 인공지능의 신경망 모델을 포함할 수 있으며, 이러한 인공지능의 신경망 모델로부터 게임의 레이턴시(또 는 반응 속도의 지연)를 예측한다고 할 때, 상기 게임의 레이턴시(또는 반응 속도의 지연)는, 상기 iii) Ping 테스트 결과와는 다른 개념일 수 있다. 예를 들어, Ping 테스트 결과는 엣지 네트워크(Edge Network)를 형성하 는 어느 한 엣지 서버와 클라이언트 사이에서 전송 경로 상의 병목이나 전송 지연을 측정하는 것인데 반하여, 게임의 레이턴시(또는 반응 속도의 지연)는 이러한 어느 한 엣지 서버와 클라이언트 사이에서 전송 경로 상의 병목이나 전송 지연을 포함하는 보다 포괄적인 개념으로, 예를 들어, 엣지 서버와 클라이 언트 사이에서 동영상 스트리밍을 송수신 하기 위하여, 프레임 캡쳐(Frame Capturer, 도 10 참조), 영상 신 호의 압축을 위한 인코딩(Video Encoder, 도 10 참조), 영상 신호의 복원을 위한 디코딩(Video Decoder, 도 10 참조)과 같은 영상 신호 처리에 소요되는 시간 내지는 지연을 더 포함할 수 있으며, 본 발명의 일 실시형태에서, 상기 게임의 레이턴시(또는 반응 속도의 지연)는, 엣지 서버와 클라이언트 사이에서 동 영상 스트리밍을 송수신 하기 위한 영상 신호 처리를 포괄하는 개념으로, 엣지 서버의 가용한 연산 자원에 따라, 예를 들어, 엣지 서버의 CPU, GPU, RAM 등과 같은 가용한 연산 자원에 따라 달라질 수 있으며, Ping 테스트 결과는 엣지 서버의 가용한 연산 자원을 이용한 영상 신호 처리는 포함하지 않을 수 있고, 트래픽 의 집중에 따른 전송 지연은 포함할 수 있다. 예를 들어, 본 발명의 일 실시형태에서, 상기 레이턴시는 클라이 언트 측의 조작입력(User Input)으로부터 클라이언트 측의 조작입력(User Input)이 반영된 화면이 구현 될 때까지 소요되는 반응 속도의 지연을 의미할 수 있다. 본 발명의 일 실시형태에서, 상기 엣지 네트워크 관리 모듈은, i) 인증된 클라이언트와 각각의 엣지 서버 사이의 통신 거리를 산출하고 산출된 통신 거리에 관한 정보(제1 데이터에 해당됨)를 취합하며, ii) 각각의 엣지 서버의 가용한 연산 자원을 산출하고 산출된 연산 자원에 관한 정보(제2 데이터에 해당됨)를 취합하고, iii) 인증된 클라이언트와 각각의 엣지 서버 사이의 전송 지연에 관한 Ping 테스트 결과(제 3 데이터에 해당됨)를 취합할 수 있다. 그리고, 상기 엣지 네트워크 관리 모듈은 상기와 같이 각각의 엣지서버에 관하여 취합된 정보에 근거하여, 인증된 클라이언트에 대해 적정의 엣지 서버를 할당할 수 있다. 도 12를 참조하면, 본 발명의 일 실시형태에서, 상기 엣지 네트워크 관리 모듈은, 상기 엣지 네트워크 (Edge Network)를 형성하는 어느 일 엣지 서버에 관한, 이하와 같은 제1 내지 제3 데이터를 입력으로 하여, 상기 일 엣지 서버에 관하여 예측된 레이턴시를 출력하는 인공지능의 신경망 모델을 포함할 수 있다. i) 인증된 클라이언트와 상기 일 엣지 서버 사이의 통신 거리에 관한 제1 데이터(X1); ii) 상기 일 엣지 서버의 가용한 연산 자원에 관한 제2 데이터(X2~X4); 및 iii) 인증된 클라이언트로부터 상기 일 엣지 서버로 데이터를 전송하고 전송된 데이터에 대한 응답이 도달하기까지 왕복 시간에 관한 제3 데이터(X5). 이때, 상기 엣지 네트워크 관리 모듈은, 상기 일 엣지 서버의 가용한 연산 자원에 관한 제2 데이터로 서, 상기 일 엣지 서버에 관한, 이하와 같은 제2-1 데이터 내지는 제2-3 데이터(X2~X4)를, 상기 인공지능 의 신경망 모델로 입력할 수 있다. i) CPU(central processing unit)의 비사용 비율에 관한 제2-1 데이터(X2); ii) GPU(graphic processing unit)의 비사용 비율에 관한 제2-2 데이터(X3); 및 iii) RAM(random access memory)의 비사용 용량에 관한 제2-3 데이터(X4). 즉, 상기 레이턴시의 예측을 위한 인공지능의 신경망 모델은, 상기 일 엣지 서버에 관하여, i) 인증된 클라이언트와 상기 일 엣지 서버 사이의 통신 거리에 관한 제1 데이터(X1); ii) CPU(central processing unit)의 비사용 비율에 관한 제2-1 데이터(X2); iii) GPU(graphic processing unit)의 비사용 비율에 관한 제2-2 데이터(X3); iv) RAM(random access memory)의 비사용 용량에 관한 제2-3 데이터(X4); 및 v) 인증된 클라이언트로부터 상기 일 엣지 서버로 데이터를 전송하고 전송된 데이터에 대한 응답이 도 달하기까지 왕복 시간에 관한 제3 데이터(X5);를 입력으로 하여, 각각의 엣지 서버에 대해 예측된 레이턴 시(Y)를 출력하도록 학습된 가중치를 포함할 수 있다. 본 발명의 일 실시형태에서, 상기 레이턴시(Y)의 예측을 위한 인공지능의 신경망 모델은, 상기 제1 데이터(X1), 제2-1 데이터(X2), 제2-2 데이터(X3), 제2-3 데이터(X4) 및 제3 데이터(X5)를 입력되는 속성으로 하고, 입력되 는 속성(X1~X5)과 예측되는 레이턴시(Y) 사이의 상관관계로서, 입력되는 속성의 선형 조합에 부가되는 학습된 가중치(W)의 값을 포함할 수 있다. 예를 들어, 상기 레이턴시(Y)의 예측을 위한 인공지능의 신경망 모델은, 제1 데이터(X1), 제2-1 데이터(X2), 제 2-2 데이터(X3), 제2-3 데이터(X4) 및 제3 데이터(X5)를 레이턴시(Y)가 예측되는 엣지 서버의 속성으로 하 고, 엣지 서버의 다수의 속성(X1~X5)을 인자로 하는 입력 벡터를 입력으로 하여, 입력 벡터의 각각의 속성 에 부가되는 가중치(W)의 값(가중치 W 행렬)을 포함할 수 있으며, 상기 레이턴시(Y)의 예측을 위한 인공지능의 신경망 모델은, 제1 데이터(X1), 제2-1 데이터(X2), 제2-2 데이터(X3), 제2-3 데이터(X4) 및 제3 데이터(X5)를 포함하는 다수의 속성과 예측되는 레이턴시(Y) 사이의 상관관계를 학습함으로써, 각각의 속성(X1~X5)과 예측되 는 레이턴시(Y) 사이의 상관관계에 관하여 학습된 가중치(W, 가중치 W 행렬)를 포함할 수 있다. 이와 같이, 제1 데이터(X1), 제2-1 데이터(X2), 제2-2 데이터(X3), 제2-3 데이터(X4) 및 제3 데이터(X5)를 포함하는 다수의 속 성의 선형 조합에서 각각의 속성에 부가되는 가중치(W)의 값은 레이턴시(Y)의 예측을 위한 인공지능의 신경망 모델의 학습을 통하여 산출될 수 있으며, 본 발명의 일 실시형태에서 다수의 속성의 선형 조합이란, 제1 데이터 (X1), 제2-1 데이터(X2), 제2-2 데이터(X3), 제2-3 데이터(X4) 및 제3 데이터(X5) 각각의 속성들과, 각각의 속 성들의 조합을 포함할 수 있으며, 예를 들어, 제1 데이터(X1), 제2-1 데이터(X2), 제2-2 데이터(X3), 제2-3 데 이터(X4) 및 제3 데이터(X5) 각각의 속성들 자신의 곱과, 임의로 선택된 둘 이상 다수의 속성들의 곱을 포함할 수 있다. 예를 들어, 본 발명의 일 실시형태에서, 레이턴시(Y)의 예측을 위한 인공지능의 신경망 모델은, 제1 데이터 (X1), 제2-1 데이터(X2), 제2-2 데이터(X3), 제2-3 데이터(X4) 및 제3 데이터(X5)와 같은 각각의 속성이 어레 이 형태로 배열된 입력 벡터와, 학습된 가중치 벡터(W, 또는 학습된 가중치 행렬)의 선형 결합에 활성화 함수를 적용한 출력으로서, 해당되는 제1 데이터(X1), 제2-1 데이터(X2), 제2-2 데이터(X3), 제2-3 데이터(X4) 및 제3 데이터(X5)를 속성으로 갖는 엣지 서버에 대해 예측되는 레이턴시(Y)를 출력해줄 수 있다. 본 발명의 일 실시형태에서, 상기 엣지 네트워크 관리 모듈은, 엣지 네트워크(Edge Network)를 형성하는 다수의 엣지 서버 각각에 대해 예측되는 레이턴시로부터 적정의 엣지 서버를 선택할 수 있다. 예를 들어, 본 발명의 일 실시형태에서, 상기 엣지 네트워크 관리 모듈은, 다수의 엣지 서버 중에서 가장 짧은 레이턴시(Y)가 예측된 엣지 서버에 해당되는 클라이언트를 할당해줄 수 있으며, 다만, 본 발명의 다양한 실시형태에서, 상기 엣지 네트워크 관리 모듈은 과도하게 길어지는 레이턴시(Y) 또는 과도하게 지 연되는 반응 속도를 차단하도록, 예측되는 레이턴시(Y)가 임계치를 벗어나 과도하게 길어지지 않는 한도에서, 적정의 레이턴시(Y)를 갖는 엣지 서버에 대해 해당되는 클라이언트를 할당해줄 수 있으며, 반드시 최 소의 레이턴시(Y)가 예측된 엣지 서버에 대해 해당되는 클라이언트를 할당할 필요는 없다. 예를 들어, 본 발명의 일 실시형태에서, 각각의 엣지 서버에 대해 예측되는 레이턴시(Y)를 표시한 히스토그램 상에서 상위 그룹의 엣지 서버와 하위 그룹의 엣지 서버를 구획하는 중간의 공백에 해당되는 밸리 지점을 포 착할 수 있으며, 상위 그룹의 엣지 서버 중에서 적정의 엣지 서버를 선택하여 해당되는 클라이언트 를 할당해줄 수 있다. 예를 들어, 상기 엣지 네트워크 관리 모듈은, 레이턴시(Y)의 예측을 위한 인공 지능의 신경망 모델에 입력되는 제2-1 데이터(X2), 제2-2 데이터(X3) 및 제2-3 데이터(X4)와 같이, 각각의 엣지 서버의 가용한 연산 자원과, 해당되는 클라이언트가 요청한 프로그램의 사양을 비교 검토하여 연산 자 원의 부족이나 연산 자원의 잔여가 최소화되도록, 클라이언트가 요청한 프로그램의 사양에 최적으로 들어맞 는 가용한 연산 자원을 보유한 엣지 서버에 대해 해당되는 클라이언트를 할당해줄 수 있다. 본 발명의 일 실시형태에서, 해당되는 클라이언트가 요청한 프로그램의 사양에 부족한 가용한 연산 자원을 보유한 엣지 서버는 과도한 레이턴시 내지는 반응 속도의 지연을 초래할 수 있으며, 이와 반대로, 해당되 는 클라이언트가 요청한 프로그램의 사양에 과도하게 잉여의 가용한 연산 자원을 보유한 엣지 서버는, 추후 잉여의 가용한 연산 자원에 대해 추가적인 클라이언트가 할당될 때까지 가용한 연산 자원이 활용되지 못하는 문제와 함께, 잉여의 가용한 연산 자원의 정도에 따라 추가적인 클라이언트가 할당되지 못할 수도 있기 때문에, 연산 자원의 운용의 효율성이 떨어지는 문제가 있을 수 있다. 도 13a 및 도 13b를 참조하면, 본 발명의 일 실시형태에서, 상기 엣지 네트워크(Edge Network)를 형성하는 다수 의 엣지 서버는, 가상화 기술(virtualization, 하이퍼바이저 가상화)을 통하여 호스트 운영 체제(호스트 OS, host operating system) 상에, 서로 다른 게스트 운영 체제(게스트 OS, guest operating system)가 가동될 수 있도록 다수의 가상 머신(virtual machine, VM)으로 분할될 수 있으며, 각각의 가상 머신(virtual machin e)이 별도의 서버인 것처럼 구동될 수 있는 컴퓨팅 환경을 제공할 수 있다. 이때, 다수의 게스트 운영 체 제(게스트 OS, guest operating system)는 다수의 게스트 운영 체제에 필요한 연산 자원을 호스트 하드웨어 (Hardware)에서 할당받아 제공해주는 하이퍼바이저(hypervisor)를 플랫폼으로 하여, 하어퍼바이저의 플랫폼 상 에서 실행될 수 있으며, 상기 하이퍼바이저는 CPU, GPU, RAM과 같은 연산 자원에 대한 서로 다른 게스트 운영 체제의 접근 방법을 통제할 수 있다. 예를 들어, 각각의 가상 머신(virtual machine, VM)에는 어플리케이션(또 는 프로그램)의 구동 환경(runtime)을 제공하는 게스트 운영 체제(게스트 OS, guest operating system)와, 라 이브러리(library, Libs) 및 바이너리(binary, Bins)와 같이 어플리케이션(또는 프로그램)의 실행을 위한 파일 이 설치될 수 있다. 본 발명의 다양한 실시형태에서, 상기 엣지 서버는, 게스트 운영 체제(게스트 OS, guest operating system)를 제외하고, 어플리케이션(또는 프로그램)과 어플리케이션(또는 프로그램)의 실행에 필요한 라이브러리 (library, Libs) 및 바이너리(binary, Bins), 기타 구성 파일 등을 패키징로 묶어 어플리케이션 실행에 필요한 모든 파일만을 패키징한 격리된 컴퓨팅 환경으로, 어플리케이션을 구동하는 환경을 격리한 컨테이너(C)로 모듈 화될 수 있다(컨테이너 가상화, container virtualization). 이때, 호스트 운영 체제(호스트 OS, host operating system) 상에 컨테이너 엔진(Container Runtime)을 설치하고 상기 컨테이너 엔진 상에서 각각 어플 리케이션의 실행에 필요한 파일 등을 하나로 모아 독립된 실행 환경을 제공하는 하나의 단위로 컨테이너(C, container)가 구동될 수 있다. 이와 같이, 하이퍼바이저 가상화 기술이나 컨테이너 가상화 기술이 적용된 본 발명의 다양한 실시형태에서, 상 기 엣지 서버의 가용한 연산 자원, 즉, CPU, GPU, RAM의 가용한 연산 자원은, 엣지 서버의 가상 머신또는 엣지 서버의 컨테이너에 할당된 CPU, GPU, RAM의 가용한 연산 자원을 의미할 수 있으며, 엣지 서버 전체의 가용한 연산 자원을 의미하지 않을 수 있다. 본 발명의 다양한 실시형태에서, 상기 엣지 서버 는 다수의 분할된 가상 머신 또는 다수의 분할된 컨테이너에서 서로 다른 어플리케이션이 독립적으로 구동 되면서 호스트 하드웨어, 컴퓨팅 자원 내지는 연산 자원을 공유하는 컴퓨팅 환경으로 제공될 수 있으며, 이 경 우에, 요청이 수신된 클라이언트를 할당하기 위하여, 각각의 엣지 서버의 가용한 연산 자원에 관한 정 보를 취합한다고 할 때, 각각의 엣지 서버의 가용한 연산 자원은 각각의 엣지 서버에서 각각의 서로 다른 어플리케이션 또는 서로 다른 프로그램이 독립적으로 구동될 수 있는 컴퓨팅 환경을 제공하는 각각의 가상 머신 또는 각각의 컨테이너에 할당된 연산 자원 내지는 리소스로서, CPU, GPU, RAM의 가용한 연산 자원을 의미 할 수 있다. 도 9를 참조하면, 본 발명의 일 실시형태에 따른 클라우드 게이밍 시스템은, 인증된 클라이언트와, 엣지 네 트워크 관리 모듈로부터 클라이언트가 할당된 엣지 서버 사이의 미디어 전송 상태를 설정해주기 위한 시그널링 서버(150, Signaling Server)를 더 포함할 수 있다. 예를 들어, 상기 시그널링 서버(150, Signaling Server)는, 인증된 클라이언트(10, 클라이언트로서 웹 브라우저)와 엣지 서버 사이에서 동영상 스트리밍을 전송하기 위한 프레임 레이트(FPS, frame per second)나 해상도와 같이 미디어 전송 상태를 설정해 줄 수 있으며, 또한, 영상 압축을 위한 인코딩 및 영상 복원을 위한 디코딩과 같은 코덱 관련 정보를 설정해줄 수도 있다. 그리고, 상기 시그널링(Signaling) 이후로, 인증된 클라이언트와 인증된 클라이언트가 할당 된 엣지 서버는, 시그널링 서버(150, Signaling Server)의 개재 없이, 서로 직접 연결되어 WebRTC(Web Real-Time Communication) 통신을 통하여 게임 컨텐츠를 구현하는 동영상 스트리밍이 전송될 수 있다. 보다 구체적으로, 상기 시그널링 서버는, 인증된 클라이언트와, 인증된 클라이언트가 할당된 엣지 서버 사이에서, 미디어, 네트워크 또는 코덱 관련 정보 중에서 적어도 어느 하나의 정보를 교환하며 미디 어 전송을 위한 세션 파라메타를 설정하기 위한 것으로, WebRTC(Web Real-Time Communication) 연결을 시도하 는 Offer SDP(session description protocol)와 WebRTC(Web Real-Time Communication) 연결을 수락하는 Answer SDP(session description protocol)를 포함하는 시그널링에 관여할 수 있다. 본 발명의 일 실시형태에서, 상기 서버 내지는 서버의 엣지 네트워크 관리 모듈은, 인증된 클라 이언트에 대해 할당된 엣지 서버의 접속주소에 관한 정보를 전달할 수 있으며, 인증된 클라이언트(1 0)의 미디어나, 네트워크 또는, 코덱 관련 정보의 교환이나 협상과 같은 capability exchange를 수행하는 프로 토콜로서, 멀티 미디어 세션 파라메타를 협상하는 SDP(session description protocol)의 요청(Offer SDP)과 수 락(Answer SDP)을 포함하는 시그널링에 관여하는 시그널링 서버로 기능을 할 수 있다. 예를 들어, 상기 서 버는, 인증된 클라이언트와 해당되는 클라이언트가 할당된 엣지 서버 사이에서 SDP 요청 (Offer SDP)과 SDP 수락(Answer SDP)의 전달을 매개하는 시그널링 서버(150, Signaling Server)로 기능할 수 있으며, 예를 들어, 상기 클라이언트는 WebRTC 연결을 시도하는 SDP 요청(offer SDP)을 생성하는 피어 (peer) 측이 될 수 있고, 상기 엣지 서버는 WebRTC 연결을 수락하는, 즉, SDP 요청을 수락(answer SDP)하 는 피어(peer) 측이 될 수 있다. 상기 SDP 요청(Offer SDP)과 SDP 수락(Answer SDP) 이후에는 ICE Candidates 과정으로 연결 후보를 교환하면서 시그널링이 종료되며, 이후에는 인증된 클라이언트와 엣지 서버 사 이에서 최적의 통신 경로를 통하여 게임 컨텐츠를 구현하는 동영상 스트리밍 및 클라이언트의 조작 신호가 직접 통신될 수 있다. 도 1 내지 도 5를 참조하여 설명된 바와 같이, 본 발명의 일 실시형태에 따른 클라우드 게이밍 시스템에 의하면, 실행 가능한 프로그램 코드를 메인 코드 및 클리핑 코드로 분할하고, 분할된 메인 코드 및 클리핑 코드 를 서로 다른 저장 개소인 클라이언트 측의 로컬 영역과 서버 영역에 각각 분리하여 저장해두고, 클리핑 코 드를 복호화시키기 위한 암호 키를 시간 의존성을 갖는 키(OTP 키)로 암호화 시킴으로써, 게임 크랙커(cracke r)의 공격에도 불구하고, 인증된 클라이언트 또는 권한이 증명된 클라이언트에 대해서만 게임 컨텐츠에 대한 접 근을 허용할 수 있다. 도 1 내지 도 5에 도시된 바와 같은 기술적 구성은, 도 8 및 도 9에 도시된 바와 같이, 서버와 서버 와 각각 연결된 다수의 엣지 서버를 포함하는 엣지 네트워크(Edge Network) 상에서도 구현될 수 있으며, 예를 들어, 상기 엣지 네트워크(Edge Network)를 형성하는 다수의 엣지 서버는, 서버(100, 예를 들어, 온 프레미스 서버)로부터 게임 컨텐츠를 입수하여 각각의 엣지 서버와 인접한 클라이언트에 대해 제공해 주는 캐싱 서버(caching server)의 기능을 수행할 수 있으며, 이때, 상기 서버는 각각의 엣지 서버에 대해, 실행 가능한 프로그램 코드 중에서 일부 코드에 해당되는 클리핑 코드를 제외한 나머지 메인 코드를 전송 해줄 수 있으며, 인증된 클라이언트를 어느 일 엣지 서버에 할당하면서, 해당되는 엣지 서버에대해 클리핑 코드와 상기 클리핑 코드의 복호화를 위한 암호 키(B)를, 시간 의존성을 갖는 키(예를 들어, OTP 키)로 암호화 시켜서 전송해줄 수 있고, 각각의 엣지 서버는 서버와의 공유된 암호 규칙에 따라, 예 를 들어, 자신의 저장장치에 저장되어 있는 프로그램 내장 키(A)와 시간 의존성을 갖는 키(예를 들어, OTP 키) 를 연결(concatenate)하여 AES 키(KAES)를 생성할 수 있고, 생성된 AES 키(KAES)를 이용하여 서버로부터 전 송된 암호 키의 암호문(C)을 암호 키(B)의 평문으로 복호화시킬 수 있으며, 복호화된 암호 키(B)를 이용하여 클 리핑 코드의 평문을 생성한 후, 자신의 저장장치에 저장되어 있는 메인 코드와 조합하고 메모리 상으로 로딩 시 켜서 프로그램 코드를 실행할 수 있다. 본 발명은 첨부된 도면에 도시된 실시예를 참고로 설명되었으나, 이는 예시적인 것에 불과하며, 본 발명이 속하"}
{"patent_id": "10-2023-0073134", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "는 기술분야에서 통상의 지식을 가진 자라면 이로부터 다양한 변형 및 균등한 타 실시예가 가능하다는 점을 이 해할 수 있을 것이다."}
{"patent_id": "10-2023-0073134", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1에는 본 발명의 일 실시형태에 따른 클라우드 게이밍 시스템의 개략적인 구성을 보여주는 도면이 도시되어 있다. 도 2에는 본 발명의 일 실시형태에서, 프로그램 코드의 일부 코드에 해당되는 클리핑 코드와, 클리핑 코드를 제 외한 프로그램의 나머지 코드에 해당되는 메인 코드를 각각 서로 다른 로컬 영역 및 서버 영역으로 분산 저장시 키는 DRM 모듈을 설명하기 위한 도면이 도시되어 있다. 도 3에는 클리핑 코드의 평문과 클리핑 코드의 암호문 사이에서 암호 키(B)로 암호화 및 복호화시키는 프로세스 를 개략적으로 보여주는 도면이 도시되어 있다. 도 4에는 암호 키의 평문과 암호 키의 암호문 사이에서 AES 키(KAES)로 암호화 및 복호화시키는 프로세스를 개략 적으로 보여주는 도면이 도시되어 있다. 도 5에는 클라이언트의 요청으로부터 개시되어 요청된 프로그램의 실행에 이르기까지 클라이언트와 서 버 측에서 이루어지는 각각의 프로세스와 클라이언트와 서버 사이의 통신을 개략적으로 설명하기 위한 도면이 도시되어 있다. 도 6에는 본 발명의 일 실시형태에서 따른 DRM 모듈에서 수행되는 블록 암호화를 위한 AES(Advanced Encryption Standard)를 개략적으로 설명하기 위한 도면이 도시되어 있다. 도 7에는 AES의 다수의 round 함수에서 AES 키로부터 각각의 라운드 키를 생성하기 위한 key expansion을 개략 적으로 설명하기 위한 도면이 도시되어 있다. 도 8에는 본 발명의 일 실시형태에서, 서버(100, on-premise server)와 각각 통신 가능하게 연결된 다수의 엣지 서버를 포함하는 엣지 네트워크(Edge Network)를 개략적으로 보여주는 도면이 도시되어 있다. 도 9에는 도 8에 도시된 서버의 개략적인 구성을 보여주는 도면이 도시되어 있다. 도 10에는 엣지 서버와 클라이언트 사이에서 동영상 스트리밍 및 조작입력(User Input)의 전송을 개략 적으로 보여주는 도면이 도시되어 있다. 도 11a 및 도 11b에는 엣지 서버의 연산 자원으로서 각각 CPU와 GPU의 개략적인 구성을 설명하기 위한 도 면들이 도시되어 있다. 도 12에는 본 발명의 일 실시형태에서, 각각의 엣지 서버로부터 취합된 속성들을 입력으로 하여, 예측된 레이턴시를 출력하는 인공지능 신경망 모델을 설명하기 위한 도면이 도시되어 있다. 도 13a 및 도 13b에는 서로 다른 하이퍼바이저 가상화 기술 및 컨테이너 가상화 기술이 적용된 엣지 서버의 구조를 개략적으로 보여주는 도면이 도시되어 있다."}
