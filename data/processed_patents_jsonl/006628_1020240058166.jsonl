{"patent_id": "10-2024-0058166", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0170406", "출원번호": "10-2024-0058166", "발명의 명칭": "TCP 이벤트 처리 및 TCP 연산 동작의 비동기적 수행이 가능한 TOE 기반 네트워크 인터페이스", "출원인": "망고부스트코리아 주식회사", "발명자": "정유진"}}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "제1 시점에서 제2 시점까지, 제1 TCP 연결에 대한 적어도 둘 이상의 TCP 이벤트를 순차적으로 축적하는 제1 테이블; 및상기 제2 시점의 경과 후, 상기 적어도 둘 이상의 TCP 이벤트에 대해 1회의 TCP 연산을 수행하는 TCP 처리로직;을 포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서, 상기 적어도 둘 이상의 TCP 이벤트는,상기 제1 테이블의 제1 엔트리에 순차적으로 업데이트되는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 2에 있어서, 상기 제1 엔트리는,상기 적어도 둘 이상의 TCP 이벤트 중 대응되는 TCP 이벤트의 업데이트 여부를 나타내는 유효 비트(valid bit)를 저장하는 유효 비트 필드;를 포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 3에 있어서, 상기 유효 비트는, 상기 적어도 둘 이상의 TCP 이벤트에 대한 이벤트 정보가 상기 TCP 처리 로직에 전달되는 경우 리셋(reset)되는네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 1에 있어서, 상기 TCP 처리 로직은, 상기 제1 테이블로부터 상기 적어도 둘 이상의 TCP 이벤트 중 가장 마지막에 발생한 TCP 이벤트를 수신하여 처리하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 1에 있어서, 상기 TCP 처리 로직의 상기 적어도 둘 이상의 TCP 이벤트에 대한 TCP 처리 결과를 저장하는 제2 테이블;을 더포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 6에 있어서, 서로 다른 입출력 포트(port)로 액세스되는 상기 제1 테이블 및 상기 제2 테이블을 구비하는 제1 메모리;를 더포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "공개특허 10-2024-0170406-3-청구항 6에 있어서, 상기 제1 테이블을 포함하는 제1 메모리; 및상기 제2 테이블을 포함하는 제2 메모리;를 더 포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 6에 있어서, 상기 제2 테이블은,상기 제1 테이블보다 많은 유형의 TCP 파라미터 필드를 포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "청구항 6에 있어서, 상기 제1 테이블의 이벤트 정보 및 상기 제2 테이블의 제어 정보를 스케줄링(scheduling)하여 상기 TCP 처리 로직에 전달하는 TCP 제어 매니저;를 더 포함하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "청구항 10에 있어서, 상기 제어 정보는, 전송 제어 블록(Transmission Control Block)의 형태로 상기 TCP 제어 매니저로 전달되는 네트워크 인터페이스장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "청구항 1에 있어서, 상기 TCP 처리 로직은, 제3 시점에서 입력된 상기 제1 TCP 연결의 TCP 이벤트와 제4 시점에서 입력된 제2 TCP 연결의 TCP 이벤트에 대해 동시에 TCP 연산을 수행하는 네트워크 인터페이스 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "청구항 1의 네트워크 인터페이스 장치를 포함하는 서버 장치."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "네트워크 인터페이스 장치의 동작 방법에 있어서, 상기 네트워크 인터페이스 장치의 이벤트 핸들러(event handler)가, 제1 TCP 연결에 대해 제1 시점부터 제2 시점까지 순차적으로 수신되는 제1 TCP 이벤트 내지 제n TCP 이벤트(n은 2 이상의 정수)를, 상기 네트워크 인터페이스 장치의 제1 테이블의 제1 엔트리에 순차적으로 축적하는 동작; 및상기 네트워크 인터페이스 장치의 TCP 처리 로직이, 제2 시점 이후 상기 제n TCP 이벤트에 대한 TCP 연산을 수행하는 동작;을 포함하는 네트워크 인터페이스 장치의 동작 방법."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "청구항 14에 있어서, 상기 TCP 처리 로직이, 상기 제1 TCP 이벤트 내지 상기 제n TCP 이벤트 중 상기 제n TCP 이벤트보다 선행되어수신된 TCP 이벤트에 대한 TCP 연산을 생략하는 동작;을 더 포함하는 네트워크 인터페이스 장치의 동작 방법."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "청구항 14에 있어서, 공개특허 10-2024-0170406-4-상기 TCP 처리 로직이, 상기 제n TCP 이벤트에 대한 TCP 연산 결과를 상기 네트워크 인터페이스 장치의 제2 테이블의 제1 엔트리에 전달하는 동작;을 더 포함하는 네트워크 인터페이스 장치의 동작 방법."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "청구항 14에 있어서, 상기 제1 내지 제n TCP 이벤트를 상기 제1 엔트리에 순차적으로 업데이트하는 동작은,상기 이벤트 핸들러가, 상기 제1 내지 제n TCP 이벤트 중 대응되는 TCP 이벤트의 업데이트 여부를 나타내는 유효 비트를 상기 제1 엔트리의 유효 비트 필드에 셋팅하는 동작;을 포함하는 네트워크 인터페이스 장치의 동작방법."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "청구항 14에 있어서, 상기 TCP 처리 로직이, 상기 제n TCP 이벤트에 대해 TCP 연산을 수행하는 동작은, 상기 네트워크 인터페이스 장치의 TCP 제어 매니저가, 상기 제1 테이블에 저장된 상기 제n TCP 이벤트 및 상기네트워크 인터페이스 장치의 제2 테이블에 저장된 전송 제어 블록을 상기 TCP 처리 로직에 전달하는 동작;상기 TCP 처리 로직이, 상기 제n TCP 이벤트 및 상기 전송 제어 블록에 근거하여 제n TCP 이벤트에 대한 TCP 알고리즘을 적용하는 동작; 및 상기 TCP 처리 로직이, 상기 제2 테이블에 저장된 전송 제어 블록을 상기 제n TCP 이벤트에 대한 TCP 알고리즘을 적용한 결과로 업데이트하는 동작;을 포함하는 네트워크 인터페이스 장치의 동작 방법."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "청구항 14에 있어서, 상기 제n TCP 이벤트에 대해 TCP 연산을 수행하는 때에, 상기 TCP 처리 로직이, 제2 TCP 연결의 TCP 이벤트에대한 TCP 연산을 동시에 수행하는 동작;을 더 포함하는 네트워크 인터페이스 장치의 동작 방법."}
{"patent_id": "10-2024-0058166", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "청구항 14에 있어서, 상기 TCP 처리 로직이 상기 제1 TCP 연결에 대한 상기 제n TCP 이벤트에 대해 TCP 연산을 수행하는 것과동시에, 상기 이벤트 핸들러가, 상기 제1 TCP 연결에 대한 제n+1 TCP 이벤트를 상기 제1 엔트리에 업데이트하는동작;을 더 포함하는 네트워크 인터페이스 장치의 동작 방법."}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 실시예에 따른 TOE 기반 네트워크 인터페이스 장치는 제1 시점에서 제2 시점까지, 제1 TCP 연결에 대 한 적어도 둘 이상의 TCP 이벤트를 순차적으로 축적하는 제1 테이블; 및 상기 제2 시점의 경과 후, 상기 적어도 둘 이상의 TCP 이벤트에 대해 1회의 TCP 연산을 수행하는 TCP 처리 로직;을 포함한다."}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 네트워크 인터페이스에 관한 것으로, 특히 TCP 이벤트 처리와 TCP 연산 동작의 비동기적 처리가 가능 한 TOE(TCP/IP Offload Engine) 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장치에 관한 것이다."}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "빅데이터 또는 인공지능 적용 분야가 확대되고 OTT(Over-The-Top) 서비스 이용이 일상화되고 있다. 이에, 사용 자 단말, 웹 서버(web server), 웹 애플리케이션 서버(Web Application Server: WAS), 스토리지 서버(storage server), 데이터베이스 서버(database server) 등 네트워크를 통해 연결되는 다양한 장치의 데이터 처리 양 및 처리 속도 등에 있어 성능 향상이 급격히 요구되고 있다. 특히, 네트워크 장치는 초고속 네트워크 환경에서 TCP/IP 프로토콜(Transmission Control Protocol/Internet Protocol) 기반으로 데이터 통신을 수행함에 있어, 막대한 시스템 자원이 요구될 수 있다. 예를 들어, 웹 서버 가 네트워크를 통해 다수의 사용자 단말과 데이터 통신을 수행하는 경우, 웹 서버의 중앙 처리 장치(CPU:Central Processing Unit)가 TCP/IP 연산을 수행하는데 상당한 부하가 야기될 수 있다. 이는 웹 서버 전체의 성 능 저하 및 통신 지연을 야기할 수 있다. 이에, 네트워크 장치에서 CPU의 부하(load)를 분산시키는 다양한 기술이 등장하였는데, 이 중 TOE(TCP/IP Offload Engine) 기술은 기존의 TCP/IP에서 소프트웨어로 구현되었던 전송 계층(Transport layer)과 네트워크 계층(Network layer)을 별도의 하드웨어(예. Network Interface Card)로 구현함으로써 CPU 부하를 오프로드 (offload)하는 기술이다. 고속 네트워크 환경을 구현하기 위한 TOE 기술은 고성능, 다수 연결 지원 등 효율적이 고 유연한 하드웨어 또는 소프트웨어의 설계가 요구된다."}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 고속 네트워크 환경에서 시스템 자원을 효율적으로 제어하고 사용하여 데이터 처리 효율을 향상시킬 수 있는 고성능의 TOE 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장치를 제공하고 자 한다."}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 실시예에 따른 네트워크 인터페이스 장치는, 제1 시점에서 제2 시점까지, 제1 TCP 연결에 대한 적어 도 둘 이상의 TCP 이벤트를 순차적으로 축적하는 제1 테이블; 및 상기 제2 시점의 경과 후, 상기 적어도 둘 이 상의 TCP 이벤트에 대해 1회의 TCP 연산을 수행하는 TCP 처리 로직;을 포함한다. 본 개시의 실시예에 따른 서버 장치는, 제1 시점에서 제2 시점까지, 제1 TCP 연결에 대한 적어도 둘 이상의 TCP 이벤트를 순차적으로 축적하는 제1 테이블, 및 상기 제2 시점의 경과 후 상기 적어도 둘 이상의 TCP 이벤트에 대해 1회의 TCP 연산을 수행하는 TCP 처리 로직을 포함하는 네트워크 인터페이스 장치;를 포함한다. 본 개시의 실시예에 따른 네트워크 인터페이스 장치의 동작 방법은, 상기 네트워크 인터페이스 장치의 이벤트 핸들러(event handler)가, 제1 TCP 연결에 대해 제1 시점부터 순차적으로 수신되는 제1 TCP 이벤트 내지 제n TCP 이벤트(n은 2 이상의 정수)를, 상기 네트워크 인터페이스 장치의 제1 테이블의 제1 엔트리에 순차적으로 축 적하는 동작; 및 상기 네트워크 인터페이스 장치의 TCP 처리 로직이, 제2 시점에서 상기 제n TCP 이벤트에 대한 TCP 연산을 수행하는 동작;을 포함한다."}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 실시예에 따른 TOE 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장치에 의하면, TCP 이벤트 처리 및 TCP 연산 동작이 비동기적으로 수행됨으로써, 고성능의 TCP 동작을 실현할 수 있다. 또는, 본 개시의 실시예에 따른 TOE 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장 치에 의하면, TCP 처리 로직이 동일한 TCP 연결에 대한 적어도 둘 이상의 TCP 이벤트를 한 번에 처리함으로써 높은 성능을 달성할 수 있다. 또는, 본 개시의 실시예에 따른 TOE 기반 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장 치에 의하면, TCP 처리 로직의 스테이트리스(stateless) 속성과 라운드-로빈 스케줄링을 통해 서로 다른 TCP 연 결에 대해 파이프라인(pipeline) 방식으로 독립하여 처리가 가능하므로, 다수의 TCP 연결의 처리에 대한 높은 성능을 달성할 수 있다. 본 개시의 예시적 실시예들에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 아니하며, 언급되지"}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "아니한 다른 효과들은 이하의 기재로부터 본 개시의 예시적 실시예들이 속하는 기술분야에서 통상의 지식을 가 진 자에게 명확하게 도출되고 이해될 수 있다. 즉, 본 개시의 예시적 실시예들을 실시함에 따른 의도하지 아니"}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 3, "content": "한 효과들 역시 본 개시의 예시적 실시예들로부터 당해 기술분야의 통상의 지식을 가진 자에 의해 도출될 수 있 다."}
{"patent_id": "10-2024-0058166", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 도면을 참조하여 본 개시의 실시예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 개시는 여러 가지 상이한 형태로 구현될 수 있으 며 여기에서 설명하는 실시예에 한정되지 않는다. 도면의 설명과 관련하여, 동일하거나 유사한 구성요소에 대해 서는 동일하거나 유사한 참조 부호가 사용될 수 있다. 또한, 도면 및 관련된 설명에서는, 잘 알려진 기능 및 구 성에 대한 설명이 명확성과 간결성을 위해 생략될 수 있다. 도 1은 본 개시의 실시예에 따른 서버 장치를 나타내는 도면이다. 도 1을 참조하면, 본 개시의 실시예에 따른 서버 장치는 리모트 장치(remote device, 200)와 네트워크 상 에 TCP 세션(TCP session)으로 연결되어 TCP 통신을 수행할 수 있다. TCP 세션은 네트워크를 통해 연결되는 서 버 장치와 리모트 장치 사이에서 IP 주소 및 포트 번호(port number)로 특정되고 플로우 ID(flow ID)로 식별될 수 있는 통신 경로를 의미할 수 있다. 본 개시에서 TCP 세션은 TCP 연결과 동일한 의미로 이해될 수 있다. 본 개시의 실시예에 따른 서버 장치는 TCP 통신을 위한 호스트 장치 및 TOE 기반의 네트워크 인터페 이스 장치를 포함할 수 있다. 본 개시의 실시예에 따른 서버 장치, 호스트 장치 또는 네트워크 인터페이스 장치는 TCP 이벤트(EVT)의 처리 및 TCP 연산 동작이 비동기적으로 수행될 수 있는 구조로 구비 되거나 제어되어, TOE의 기능성(functionality)을 보장하면서도 TCP 처리 속도를 향상시킬 수 있다. 구체적으로, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 순차적으로 축적되는 적어도 둘 이상의 TCP 이벤트(EVT)에 대해 일괄적으로 TCP 연산을 수행할 수 있다. 네트워크 인터페이스 장치에서 발생 가능한 TCP 이벤트(EVT)로는 예를 들어, 사용자 요청(user request)의 수신, 네트워크로부터 TCP 패킷(TCP packet)의 수신, 또는 타임아웃(timeout) 등이 있을 수 있다. 사용자 요청 으로는 호스트 장치의 애플리케이션이 리모트 장치로 전송하고자 하는 TCP 패킷이거나 애플리케이션 이 리모트 장치로부터 수신하고자 하는 TCP 패킷일 수 있다. 예를 들어, 전자 및 후자는 사용자 요청 “send()” 및 “recv()”일 수 있다. 본 개시에서 “사용자 요청”은 필요에 따라 “커맨드”(command), \"이벤트\"(event), \"함수\"와 동일한 의미로 이해될 수 있다. 타임아웃은 네트 워크 인터페이스 장치가 전송한 데이터에 대해 일정 시간이 경과될 때까지 ACK(acknowledgement) 처리가 완료되지 아니한 경우 발생할 수 있다. 예를 들어, 네트워크 인터페이스 장치는 RTO(Retransmission Time Out) 시간의 경과에 따라 타임아웃을 발생시킬 수 있다. 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 이러한 TCP 이벤트를 처리할 수 있는 제1 테이블 (TB1) 및 TCP 처리 로직을 포함할 수 있다. 제1 테이블(TB1)은 제1 시점에서 제2 시점까지, 임의의 TCP 연 결에 대한 적어도 둘 이상의 TCP 이벤트(EVT)를 순차적으로 축적할 수 있다. 도 1은 TCP 이벤트(EVT)의 축적이 제1 테이블(TB1) 중 대응되는 엔트리(entry)의 값을 업데이트 하는 방식으로 수행되는 예를 도시하고 있으나, 이에 한정되는 것은 아니다. 도시되지는 아니하였으나, 네트워크 인터페이스 장치는 이벤트 핸들러(event handler)를 통해 제1 시점부 터 순차적으로 수신되는 TCP 이벤트(EVT)를 제1 테이블(TB1)에 전달하여 축적시킬 수 있다. 제1 테이블(TB1)은 TCP 이벤트 테이블(TCP event table)일 수 있다. 제1 테이블(TB1)은 각 엔트리에 대해 ID 필드, 적어도 하나 이상의 TCP 파라미터 필드 및 유효 비트 필드를 포함할 수 있다. ID 필드에는 TCP 연결의 플로우 ID가 저장될 수 있다. 서버 장치와 리모트 장치 사이에 형성되는 다 수의 TCP 연결은 전술된 바와 같이 고유한 플로우 ID로 식별될 수 있다. 설명의 편의 상, 도 1의 ID 필드 상의ID1 내지 ID4가 각각 제1 TCP 연결(ID1) 내지 제4 TCP 연결(ID4)을 지칭하는 것으로 한다. TCP 파라미터 필드에는 TCP 이벤트(EVT)를 규정하는 파라미터가 저장될 수 있다. 본 개시에서 TCP 파라미터의 “파라미터”는 “변수” 또는 “포인터”(pointer) 등과 동일한 의미로 이해될 수 있다. 도 1의 예에서, TCP 파라미터 필드에는 “SND.WND” 및 “SND.UNA”가 저장될 수 있다. “SND.WND”는 송신 윈 도우(send window)의 크기, 즉 네트워크 인터페이스 장치가 해당 TCP 연결에 대해 임의의 시점에서 전송할 수 있는 데이터의 크기를 나타낸다. “SND.UNA”는 송신 비확인된 첫 번째 데이터의 시퀀스 번호, 즉 네트워크 인터페이스 장치가 송신하였으나 아직 리모트 장치로부터 ACK 패킷이 수신되지 아니한 첫 번째 데이 터의 시퀀스 넘버를 나타낸다. 다만, 이에 한정되는 것은 아니고, TCP 파라미터 필드에는 “recvEce”, “ sendEce”, “SND.APP”, “countDupAck”, “timeout”, “needProbe” 중 적어도 하나 이상이 더 포함될 수 도 있다. 각 TCP 파라미터 필드의 의미 및 TCP 파라미터 필드에 추가될 수 있는 더 많은 TCP 파라미터의 예는 도 9에서 기술된다. 도 1의 예에서 제1 TCP 연결(ID1)에 대해 현재까지 축적된 TCP 이벤트(EVT)에 대한 “SND.WND” 및 “SND.UNA ”가 각각 “0x440” 및 “0x300”이다. 예를 들어, 제1 TCP 이벤트(EVT)에 대해 제1 시점에서 “SND.WND”가 “0x320”이었던 것이, 제1 TCP 연결(ID1)에 대해 적어도 1회 이상의 “send()” 또는 TCP 패킷 수신 등과 같은 TCP 이벤트(EVT)의 발생으로 제2 시점인 현재 “0x440”의 값으로 제1 테이블(TB1)에 저장될 수 있다. 다시 도 1을 참조하면, 제1 테이블(TB1)의 유효 비트 필드에는 제1 TCP 연결(ID1)에 대해 대응되는 TCP 파라미 터 필드의 업데이트 여부를 나타내는 유효 비트(valid bit)가 저장될 수 있다. 유효 비트의 설정은 이벤트 핸들 러에 의해 수행될 수 있다. 도 1은 제1 TCP 연결(ID1)의 “SND.WND”에 대한 유효 비트가 셋팅(setting)된 예를 나타내고 있다. 이때, 유효 비트는 “1” 또는 “0”의 값을 가짐으로써 셋팅 여부가 설정될 수 있다. 반면, 도 1에서 제1 TCP 연결(ID1)의 “SND.UND”에 대한 유효 비트는 셋팅되지 않은 상태를 갖는다. 이는 임의의 시점에서 TCP 처리 로직이 제 1 TCP 연결(ID1)에 대해 TCP 연산을 처리한 후, 새로운 TCP 이벤트(EVT)의 발생으로 제1 TCP 연결(ID1)의 “ SND.WND”는 업데이트된 상태이고 제1 TCP 연결(ID1)의 “SND. UND”는 기존 값을 유지하고 있는 상태임을 나타 낼 수 있다. 네트워크 인터페이스 장치의 TCP 처리 로직은 제2 시점의 경과 후, 적어도 둘 이상의 TCP 이벤트 (EVT) 에 대해 1회의 TCP 연산을 수행한다. 예를 들어, 네트워크 인터페이스 장치는 적어도 둘 이상의 TCP 이벤트(EVT) 중 제1 테이블(TB1)에 가장 마지막으로 저장된, 즉 가장 마지막에 발생된 TCP 이벤트에 대해서 TCP 연산을 수행할 수 있다. 예를 들어, 제1 시점부터 제2 시점까지 제1 TCP 연결(ID1)에 대해 3개의 TCP 이벤트 (EVT)가 발생한 경우, TCP 처리 로직은 발생된 3개의 TCP 이벤트(EVT)에 대해 제2 시점 이후 TCP 연산을 수행할 수 있다. 전술된 바와 같이, 3번째 TCP 이벤트는 앞서 발생한 두 개의 TCP 이벤트를 포함하여 세 개의 TCP 이벤트가 축적된 것일 수 있다. TCP 처리 로직은, 예를 들어, 흐름 제어(flow control), 혼잡 제어(congestion control) 등의 알고리즘을 통해 서버 장치와 리모트 장치 사이에서 신뢰성이 보장된 TCP 통신을 수행할 수 있다. 예를 들어, TCP 처리 로직은 TCP 연산을 통해 전송할 데이터의 결정, 수신된 데이터에 대한 ACK 처리, 재전송 수행하 기 및 프로브 패킷의 전송 등을 수행할 수 있다. 도 2는 본 개시의 실시예에 따른 네트워크 인터페이스 장치를 나타내는 도면이다. 도 2를 참조하면, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 제1 테이블(TB1) 및 TCP 처리 로 직과 함께, TCP 제어 매니저 및 제2 테이블(TB2)을 더 포함할 수 있다. 제1 테이블(TB1), TCP 처리 로직, TCP 제어 매니저 및 제2 테이블(TB2)은 하나의 칩으로 구현 가능한 TCP 컨트롤러(미도시)에 포 함될 수 있다. 본 개시의 실시예에 따른 TCP 처리 로직은 TCP 연산에 필요한 상태 정보를 별도로 저장하지 아니할 수 있 다. 다시 말해, TCP 처리 로직은 TCP 제어 매니저로부터 TCP 연산에 필요한 정보, 파라미터 또는 데 이터를 수신하는 때에 대응되는 TCP 연산을 수행할 수 있다. TCP 제어 매니저는 TCP 처리 로직에게 TCP 연결 처리에 필요한 이벤트 정보(EIF) 또는 제어 정보 (CIF)를 스케줄링하여 TCP 처리 로직에 전달할 수 있다. TCP 제어 매니저는 제1 테이블(TB1)로부터 이벤트 정보(EIF)를 수신하고 제2 테이블(TB2)로부터 제어 정보(CIF)를 수신할 수 있다. 제어 정보(CIF)는 전송제어 블록(Transmission Control Block, TCB)의 형태로 전달될 수 있다. 제2 테이블(TB2)은 제어 정보(CIF)를 저장하고 제어 정보(CIF)에 대한 TCP 처리 로직의 TCP 처리 결과 (RST)를 저장할 수 있다. 제2 테이블(TB2)은 TCB 테이블(TCB table)일 수 있다. 제2 테이블(TB2)로부터 TCP 제 어 매니저로 전달된 제어 정보(CIF)는 대한 TCP 처리 로직의 연산 처리 후에 TCP 처리 결과(RST)로 업데이트될 수 있다. TCP 처리 결과(RST) 또한 전송 제어 블록의 형태로 제2 테이블(TB2)에 전달될 수 있다. TCP 처리 결과(RST)는 제2 테이블(TB2)에 저장된 후 TCP 처리 로직이 대응되는 TCP 연결에 대해 다음 TCP 연산을 수행하는 때에 제어 정보(CIF)로 사용될 수 있다. 도 2는 제2 테이블(TB2)이 제1 TCP 연결(ID1) 내지 제4 TCP 연결(ID4)에 대해 제1 테이블(TB1)의 “SND.WND” 및 “SND.UNA” 이외에 “SND.CWND” 및 “SND.SSTHRESH”를 포함할 수 있다. “SND.CWND”는 대응되는 TCP 연 결에 대한 혼잡 제어 윈도우의 크기를, “SND.SSTHRESH”는 혼잡 제어 알고리즘 중 하나인 슬로우 스타트(slow start)의 임계점을 나타낸다. TCP 제어 매니저는 TCP 처리 로직 내에서 라운드-로빈(round-robin) 방식으로 이벤트 정보(EIF) 및 제어 정보(CIF)를 TCP 처리 로직에 전송할 수 있다. 예를 들어, TCP 제어 매니저는 TCP 처리 로직 으로 제1 TCP 연결(ID1)에 대한 제어 정보(CIF)를 전달한 후 제2 TCP 연결(ID2)에 대한 제어 정보(CIF)를 전달하고, 이어서 제3 TCP 연결(ID3) 및 제4 TCP 연결(ID4)에 대한 제어 정보(CIF)를 순차적으로 전달할 수 있 다. TCP 제어 매니저는 같은 순서로 TCP 처리 로직에 이벤트 정보(EIF)를 전달할 수 있다. 예를 들어, TCP 제어 매니저는 제1 TCP 연결(ID1)에 대한 이벤트 정보(EIF)를 전달한 후 제2 TCP 연결(ID2)에 대한 이벤트 정보(EIF)를 전달하고, 이어서 제3 TCP 연결(ID3) 및 제4 TCP 연결(ID4)에 대한 이벤트 정보(EIF) 를 순차적으로 전달할 수 있다. 라운드-로빈 방식의 채택으로, 본 개시의 실시예에 따른 서버 장치은 각 TCP 연결에 대한 최대 처리 지연 시간(latency)를 보장할 수 있다. 이렇듯, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 TCP 처리 로직이 하나의 TCP 연결에 대해 제1 시점에서 제2 시점까지 축적된 TCP 이벤트(EVT)를 한 번에 처리함으로써 높은 성능을 달성할 수 있다. 예를 들어, 제1 TCP 연결(ID1)에 대해 제1 시점에서 시퀀스 넘버 “1000”인 전송 요청 후 제2 시점까지 데이터 의 크기가 100 바이트(byte)인 8번의 전송 요청이 발생한 경우, TCP 처리 로직은 시퀀스 넘버 “1800”인 하나의 전송 요청만을 연산 처리할 수 있다. 또한, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 TCP 처리 로직의 스테이트리스 (stateless) 속성과 라운드-로빈 스케줄링을 통해 서로 다른 TCP 연결에 대해 파이프라인(pipeline) 방식으로 독립하여 처리가 가능하므로, 다수의 TCP 연결의 처리에 대한 높은 성능을 달성할 수 있다. 본 개시의 실시예에 따른 TCP 처리 로직은 다수의 TCP 연결의 처리 전체를 파이프라인 방식으로 수행할 수 있다. 따라서, TCP 처리 로직은 제3 시점에서 제1 테이블(TB1)로 입력된 제1 TCP 연결(ID1)의 TCP 이벤트 (EVT)와 제4 시점에서 제1 테이블(TB1)에 입력된 제2 TCP 연결(ID2)의 TCP 이벤트(EVT)에 대해 동시에 TCP 연 산을 -수행할 수 있다. 본 개시에서, “동시”의 의미는 제1 TCP 연결(ID1)의 TCP 이벤트(EVT)와 제2 TCP 연결 (ID2)의 TCP 이벤트(EVT)의 처리, 즉 TCP 연산의 시작과 끝이 완전히 동일한 경우만을 의미하는 것은 아니다. 제1 TCP 연결(ID1)의 TCP 이벤트(EVT)의 처리가 완료되기 전에 제2 TCP 연결(ID2)의 TCP 이벤트(EVT)의 처리가 시작되는 경우도 두 동작이 동시에 수행된다고 할 수 있다. 나아가, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 TCP 처리 로직의 스테이트리스 속성으 로 메모리 경합과 같은 구조적 해저드(structural hazard)가 존재하지 아니하고, 라운드-로빈 스케줄링을 통해 동일한 TCP 연결에 대한 데이터 해저드(data hazard) 없이 다수의 TCP 연결에 대한 다중 처리가 가능할 수 있다. 도 3 내지 도 7은 각각 본 개시의 실시예에 따른 네트워크 인터페이스 장치에서 TCP 이벤트(EVT)의 처리 동작을 순차적으로 나타내는 도면이다. 먼저 도 3을 참조하면, 본 개시의 실시예에 따른 네트워크 인터페이스 장치의 TCP 제어 매니저는 제1 TCP 연결(ID1)에 대한 이벤트 정보(EIF) 및 제어 정보(CIF)를 TCP 처리 로직으로 전달할 수 있다. 이벤트 정보(EIF) 및 제어 정보(CIF)는 각각 제1 테이블(TB1) 및 제2 테이블(TB2)의 첫 번째 엔트리로부터 전달될 수 있다. 제2 테이블(TB2)의 첫 번째 엔트리에는 “SND.WND”, “SND.UNA”, “SND.CWND” 및 “SND.SSTHRESH”가 각각 “0x400”, “0x200”, “0x440” 및 “0x200”으로 저장되어 있고, 이는 제1 TCP 연결(ID1)에 대한 가장 최근 의 TCP 처리 결과(RST)일 수 있다. 제1 테이블(TB1)의 첫 번째 엔트리 중 “SND.WND”에 대한 유효 비트가 셋팅 되어 있으므로, 제1 TCP 연결(ID1)에 대한 가장 최근의 TCP 처리 결과(RST)가 생성된 후에, 제1 TCP 연결(ID1) 의 “SND.WND”에 대한 TCP 이벤트(EVT)가 발생하였음이 확인될 수 있다. 반면, 제1 TCP 연결(ID1)의 “ SND.UNA”에 대한 유효 비트는 셋팅되지 않은 상태이므로, 제1 TCP 연결(ID1)에 대한 가장 최근의 TCP 처리 결 과(RST)가 생성된 후에 해당 값에 대한 업데이트가 이루어지지 아니하였음을 알 수 있다. 제1 TCP 연결(ID1)에 대한 유효 비트는, 제1 TCP 연결(ID1)에 대한 이벤트 정보(EIF)가 TCP 제어 매니저 에 의해 TCP 처리 로직으로 전달되는 경우 리셋될 수 있다. 다른 TCP 연결에 대한 유효 비트도 마찬가지이 다. 다음으로 도 4를 참조하면, TCP 처리 로직에서 제1 TCP 연결(ID1)에 대한 처리가 진행되는 동안, 제1 TCP 연결(ID1)에 대해 “SND.WND”가 “0x450”인 새로운 TCP 이벤트(EVT)가 발생될 수 있다. 이때, 제1 테이블 (TB1)의 첫 번째 엔트리의 “SND.WND”에 대한 TCP 파라미터 필드의 값이 “0x410”에서 “0x450”으로 변경되 고, 대응되는 유효 비트는 셋팅 상태를 유지할 수 있다. 이렇듯, 본 개시의 실시예에 따른 TCP 처리 로직은 제1 TCP 연결(ID1)의 제n TCP 이벤트(EVT)에 대한 TCP 연산의 수행과 동시에, 이벤트 핸들러를 통해 제1 TCP 연결(ID1)의 제n+1 TCP 이벤트(EVT)를 제1 테이블(TB1)에 업데이트할 수 있다. 한편, TCP 제어 매니저는 라운드-로빈 스케줄링에 따라 제2 TCP 연결(ID2)에 대한 이 벤트 정보(EIF) 및 제어 정보(CIF)를 TCP 처리 로직으로 전달하고, TCP 처리 로직은 제1 TCP 연결 (ID1)에 대한 처리와는 독립적으로 제2 TCP 연결(ID2)의 처리를 시작할 수 있다. 다음으로 도 5를 참조하면, TCP 처리 로직에서 제1 TCP 연결(ID1) 및 제2 TCP 연결(ID2)에 대한 처리가 진 행되는 동안, 제1 TCP 연결(ID1)에 대한 “SND.WND” 및 “SND.UNA”가 각각 “0x480” 및 “0x230”인 새로운 TCP 이벤트(EVT)가 발생할 수 있다. 따라서, 제1 테이블(TB1)의 첫 번째 엔트리에서 “SND.WND”에 대한 TCP 파 라미터 필드의 값이 “0x450”에서 “0x480”으로 변경되고 이의 유효 비트는 셋팅 상태를 유지할 수 있다. 마 찬가지로, 제1 테이블(TB1)의 첫 번째 엔트리에서 “SND.UNA”에 대한 TCP 파라미터 필드의 값이 “0x200”에서 “0x230”으로, 그리고 이의 유효 비트가 셋팅 상태로 변경될 수 있다. 한편, TCP 제어 매니저는 라운드-로빈 스케줄링에 따라 제3 TCP 연결(ID3)에 대한 이벤트 정보(EIF) 및 제 어 정보(CIF)를 TCP 처리 로직으로 전달하고, TCP 처리 로직은 제1 TCP 연결(ID1) 및 제2 TCP 연결 (ID2)에 대한 처리와는 독립적으로 제3 TCP 연결(ID3)의 처리를 시작할 수 있다. 다음으로 도 6을 참조하면, TCP 처리 로직이 제1 TCP 연결(ID1)에 대한 처리를 완료하고 제2 테이블(TB2) 의 첫 번째 엔트리를 TCP 처리 결과(RST)로 업데이트할 수 있다. 도 6의 경우, TCP 처리 로직이 출력하는 제1 TCP 연결(ID1)에 대한 TCP 처리 결과(RST)로 제2 테이블 (TB2)의 첫 번째 엔트리가 업데이트된다. 이때, 해당 TCP 처리 결과(RST)는 도 3에 도시된 제1 테이블(TB1)의 첫 번째 엔트리에 대응되는 이벤트 정보(EIF)에 대한 것이므로, 제2 테이블(TB2)의 첫 번째 엔트리에 업데이트 된 “SND.WND” 및 “SND.UNA”의 값은 “0x410” 및 “0x200”일 수 있다. 그리고, 제2 테이블(TB2)의 첫 번 째 엔트리 중 “SND.CWND”는 TCP 처리 로직에서의 TCP 혼잡 제어 알고리즘의 연산 결과, 기존의 “0x410 ”에서 “0x460”으로 업데이트될 수 있다. 한편, TCP 처리 로직은 제2 TCP 연결(ID2) 및 제3 TCP 연결(ID3)과 독립적으로 제4 TCP 연결(ID4)에 대한 처리를 시작할 수 있다. 제4 TCP 연결(ID4)에 대한 이벤트 정보(EIF)가 TCP 제어 매니저를 통해 TCP 처리 로직으로 전달되어 처리됨으로써, 제1 테이블(TB1)의 네 번째 엔트리의 유효 비트는 모두 리셋될 수 있다. 다음으로 도 7을 참조하면, 라운드-로빈 스케줄링에 따라 다시 제1 TCP 연결(ID1)에 대한 TCP 처리가 수행될 수 있다. 즉, 제1 테이블(TB1)의 첫 번째 엔트리의 값이 이벤트 정보(EIF)로, 그리고 제2 테이블(TB2)의 첫 번째 엔트리의 값이 제어 정보(CIF)로, TCP 제어 매니저에 의해 스케줄링되어 TCP 처리 로직으로 전달될 수 있다. TCP 처리 로직은 처리가 완료된 제2 TCP 연결(ID2)에 대한 TCP 처리 결과(RST)를 제2 테이블(TB2)에 전달 하고, 제2 테이블(TB2)의 두 번째 엔트리는 TCP 처리 결과(RST)로 업데이트될 수 있다. 이때, 도 4에서 제2 TCP 연결(ID2)에 대한 TCP 처리가 수행되기 이전에 TCP 이벤트(EVT)가 발생하지 아니하였으므로, 즉 제1 테이블(TB1)의 두 번째 엔트리의 모든 유효 비트가 셋팅되지 아니하였으므로, 도 7의 TCP 처리 결과(RST)는 제2 테이 블(TB2)의 두 번째 엔트리의 기존 값들과 동일할 수 있다. 따라서, 도 7의 업데이트 동작에 의하더라도 제2 테 이블(TB2)의 두 번째 엔트리의 각 필드의 값은 변경되지 아니할 수 있다. 다만, 이에 한정되는 것은 아니고, 통 신 환경 등에 따라 TCP 이벤트(EVT)의 발생 유무와 무관하게, TCP 처리 결과(RST)가 달라질 수도 있다. 도 8a 및 도 8b는 본 개시의 실시예에 따른 네트워크 인터페이스 장치의 메모리(MEM1, MEM2)를 나타내는 도면이다. 먼저 도 8a을 참조하면, 도 1 또는 도 2의 네트워크 인터페이스 장치는 제1 메모리(MEM1)를 포함할 수 있 다. 제1 메모리(MEM1)는 SRAM(Static Random Access Memory)으로 구현될 수 있다. 제1 테이블(TB1) 및 제2 테 이블(TB2)은 모두 제1 메모리(MEM1)에 포함될 수 있다. 이때, 제1 메모리(MEM1)는 듀얼 포트(dual port) 또는 그 이상의 입출력 포트를 구비하여, 제1 테이블(TB1)에 대한 액세스와 제2 테이블(TB2)의 액세스가 각각 독립적 으로 수행될 수 있다. 따라서, TCP 이벤트(EVT), TCP 처리 결과(RST), 이벤트 정보(EIF) 및 제어 정보(CIF) 중 적어도 둘 이상의 충돌 등으로 인한 오동작이 방지될 수 있다. 다음으로 도 8b를 참조하면, 도 1 또는 도 2의 네트워크 인터페이스 장치는 제1 테이블(TB1)이 포함되는 제1 메모리(MEM1) 및 제2 테이블(TB2)이 포함되는 제2 메모리(MEM2)를 포함할 수 있다. 제1 테이블(TB1) 및 제2 테이블(TB2)이 서로 다른 메모리에 포함됨으로써, 도 8a와 마찬가지로 오동작이 방지될 수 있다. 제1 메모리(MEM1) 및 제2 메모리(MEM2)는 모두 SRAM으로 구현될 수 있다. 다만, 이에 한정되는 것은 아니다. 도 8a의 제1 메모리(MEM1) 또는 도 8b의 제1 메모리(MEM1) 및 제2 메모리(MEM2) 중 하나는 DRAM(Dynamic Random Access Memory) 으로 구현될 수도 있다. 도 9는 본 개시의 실시예에 따른 이벤트 테이블 및 TCB 테이블의 각 엔트리에 포함되는 TCP 파라미터들을 나타 내는 표이다. 도 1, 도 2 및 도 9를 참조하면, 전술된 바와 같이, 본 개시의 실시예에 따른 제1 테이블(TB1)은 이벤트 테이블 이고, 제2 테이블(TB2)은 TCB 테이블일 수 있다. 도 2는 제1 테이블(TB1)의 각 엔트리가 대응되는 TCP 연결에 대한 TCP 파라미터 필드 “SND.WND” 및 “SND.UNA”와 각 TCP 파라미터 필드에 대한 유효 비트 필드를 포함하 고, 제2 테이블(TB2)의 각 엔트리가 대응되는 TCP 연결에 대한 TCP 파라미터 필드 “SND.WND”, “SND.UNA”, “SND.CWND” 및 “SND.SSTHRESH”를 TCP 파라미터 필드로 포함하는 예를 도시하고 있다. 다만, 이는 설명의 편 의를 위한 것일 뿐이다. 본 개시의 실시예에 따른 제1 테이블(TB1) 및 제2 테이블(TB2)은 도 9와 같이 다양한 TCP 파라미터들을 추가적으로 더 포함할 수도 있다. 예를 들어, TCP 연결의 설정과 관련하여, 본 개시의 실시예에 따른 제1 테이블(TB1) 또는 제2 테이블(TB2)의 각 엔트리에는 네트워크 인터페이스 장치의 IP 및 포트 넘버를 나타내는 ”Local IP” 및 ”Local Port”, 리 모트 장치의 IP 및 포트 넘버를 나타내는 ”Remote IP”, 및 ”Remote Port”, 명시적 혼잡 알림 (Explicit Congestion Notification)에 대한 “recvEce” 및 “sendEce”가 포함될 수 있다. TCP 전송과 관련 하여, 본 개시의 실시예에 따른 제1 테이블(TB1) 또는 제2 테이블(TB2)의 각 엔트리에는 “SND.WND” 및 “ SND.UNA” 외에 호스트 장치의 애플리케이션이 다음으로 보내고자 하는 데이터의 시퀀스 넘버를 나타내는 “SND.APP”, 네트워크 인터페이스 장치가 다음으로 전송하고자 하는 데이터의 시퀀스 넘버를 나타내는 “ SND.NXT”, 중복 ACK(duplicate ACK)의 수를 나타내는 “countDupAck”, 재전송 타임아웃의 발생을 나타내는 “timeout” 및 프로브 패킷의 필요 여부를 나타내는 “needProbe”가 포함될 수 있다. 혼잡 제어와 관련하여, 본 개시의 실시예에 따른 제1 테이블(TB1) 또는 제2 테이블(TB2)의 각 엔트리에는 “ SND.CWND” 및 “SND.SSTHRESH” 이외에 빠른 재전송의 필요 여부를 나타내는 “fastRetransmit” 및 전송 윈 도우 크기의 감축을 나타내는 “sendCwr” 가 포함될 수 있다. TCP 수신과 관련하여, 본 개시의 실시예에 따른 제1 테이블(TB1) 또는 제2 테이블(TB2)의 각 엔트리에는 수신 윈도우의 첫 번째 바이트를 나타내는 “RCV.NXT” 및 호스트 장치의 애플리케이션이 다음으로 수신하고자 하는 데이터의 시퀀스 넘버를 나타내는 “RCV.APP ”이 포함될 수 있다. TCP 파라미터들은 64 비트, 32 비트 또는 불린(boolean) 타입으로 구비될 수 있다. 본 개시의 실시예에 따르면, 일부 TCP 파라미터들은 제2 테이블(TB2)에는 포함되나 제1 테이블(TB1)에는 포함되 지 아니할 수 있다. 예를 들어, TCP 이벤트(EVT)에 의해 업데이트되지 아니하는 TCP 파라미터들은 제1 테이블 (TB1)에 포함되지 아니할 수 있다. 예를 들어, 도 9의 TCP 파라미터들 중 ”Local IP” 및 ”Local Port” 또는혼잡 제어와 관련된 파라미터들은 제1 테이블(TB1)에 포함하지 아니할 수 있다. 이렇듯, 본 개시의 실시예에 따른 네트워크 인터페이스 장치, 이의 동작 방법 및 이를 포함하는 서버 장치 에 의하면, TCP 파라미터들의 속성에 따라 제1 테이블(TB1)에의 저장 여부를 달리함으로써, TCP 이벤트 (EVT)의 저장을 위한 메모리 공간 및 TCP 이벤트(EVT) 처리를 위한 리소스를 절약할 수 있다. 도시되지는 아니하였으나, 본 개시의 실시예에 따른 네트워크 인터페이스 장치는 TCP 동작을 제어하는 TCP 컨트롤러(TCP controller), 네트워크로 전송할 TCP 패킷을 생성하는 패킷 생성기(packet generator), 네트워크 로부터 수신되는 TCP 패킷을 파싱(parsing)하는 수신 파서(Rx parser) 및 타이머(timer) 등을 더 포함할 수 있 다. 이때, TCP 컨트롤러는 도 2의 TCP 처리 로직 등을 포함할 수 있다. 또한, 본 개시의 실시예에 따른 네 트워크 인터페이스 장치는 TCP/IP 외의 ICMP(Internet Control Message Protocol), ARP(Address Resolution Protocol) 등 다른 네트워크 프로토콜을 지원하기 위한 별도의 모듈을 더 포함할 수 있고, 해당 처 리 모듈을 통해 연결 계층 라우팅(link layer routing) 등을 수행할 수 있다. 본 개시의 실시예에 따르면, 네트워크 인터페이스 장치는, 제1 시점에서 제2 시점까지, 제1 TCP 연결에 대한 적 어도 둘 이상의 TCP 이벤트를 순차적으로 축적하는 제1 테이블; 및 상기 제2 시점의 경과 후, 상기 적어도 둘 이상의 TCP 이벤트에 대해 1회의 TCP 연산을 수행하는 TCP 처리 로직;을 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 적어도 둘 이상의 TCP 이벤트는, 상기 제1 테이블의 제1 엔트리에 순차적으로 업데이트될 수 있다. 본 개시의 실시예에 따르면, 상기 제1 엔트리는, 상기 적어도 둘 이상의 TCP 이벤트 중 대응되는 TCP 이벤트의 업데이트 여부를 나타내는 유효 비트를 저장하는 유효 비트 필드;를 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 유효 비트는, 상기 적어도 둘 이상의 TCP 이벤트에 대한 이벤트 정보가 상기 TCP 처리 로직에 전달되는 경우 리셋될 수 있다. 본 개시의 실시예에 따르면, 상기 TCP 처리 로직은, 상기 제1 테이블로부터 상기 적어도 둘 이상의 TCP 이벤트 중 가장 마지막에 발생한 TCP 이벤트를 수신하여 처리할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 상기 TCP 처리 로직의 상기 적어도 둘 이상의 TCP 이벤트에 대한 TCP 처리 결과를 저장하는 제2 테이블;을 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 서로 다른 입출력 포트로 액세스되는 상기 제1 테이블 및 상기 제2 테이블을 구비하는 제1 메모리;를 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 상기 제1 테이블을 포함하는 제1 메모리; 및 상 기 제2 테이블을 포함하는 제2 메모리;를 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 제2 테이블은, 상기 제1 테이블보다 많은 유형의 TCP 파라미터 필드를 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치는, 상기 제1 테이블의 이벤트 정보 및 상기 제2 테 이블의 제어 정보를 스케줄링하여 상기 TCP 처리 로직에 전달하는 TCP 제어 매니저;를 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 제어 정보는, 전송 제어 블록의 형태로 상기 TCP 제어 매니저로 전달될 수 있 다. 본 개시의 실시예에 따르면, 상기 TCP 처리 로직은, 제3 시점에서 입력된 상기 제1 TCP 연결의 TCP 이벤트와 제 4 시점에서 입력된 제2 TCP 연결의 TCP 이벤트에 대해 동시에 TCP 연산을 수행할 수 있다. 본 개시의 실시예에 따르면, 서버 장치는, 상기의 네트워크 인터페이스 장치를 포함할 수 있다. 본 개시의 실시예에 따르면, 네트워크 인터페이스 장치의 동작 방법은, 상기 네트워크 인터페이스 장치의 이벤 트 핸들러가, 제1 TCP 연결에 대해 제1 시점부터 제2 시점까지 순차적으로 수신되는 제1 TCP 이벤트 내지 제n TCP 이벤트(n은 2 이상의 정수)를, 상기 네트워크 인터페이스 장치의 제1 테이블의 제1 엔트리에 순차적으로 축 적하는 동작; 및 상기 네트워크 인터페이스 장치의 TCP 처리 로직이, 제2 시점 이후 상기 제n TCP 이벤트에 대 한 TCP 연산을 수행하는 동작;을 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치의 동작 방법은, 상기 TCP 처리 로직이, 상기 제1 TCP 이벤트 내지 상기 제n TCP 이벤트 중 상기 제n TCP 이벤트보다 선행되어 수신된 TCP 이벤트에 대한 TCP 연산을 생략하는 동작;을 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치의 동작 방법은, 상기 TCP 처리 로직이, 상기 제n TCP 이벤트에 대한 TCP 연산 결과를 상기 네트워크 인터페이스 장치의 제2 테이블의 제1 엔트리에 전달하는 동 작;을 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 제1 내지 제n TCP 이벤트를 상기 제1 엔트리에 순차적으로 업데이트하는 동작 은, 상기 이벤트 핸들러가, 상기 제1 내지 제n TCP 이벤트 중 대응되는 TCP 이벤트의 업데이트 여부를 나타내는 유효 비트를 상기 제1 엔트리의 유효 비트 필드에 셋팅하는 동작;을 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 TCP 처리 로직이, 상기 제n TCP 이벤트에 대해 TCP 연산을 수행하는 동작은, 상기 네트워크 인터페이스 장치의 TCP 제어 매니저가, 상기 제1 테이블에 저장된 상기 제n TCP 이벤트 및 상기 네트워크 인터페이스 장치의 제2 테이블에 저장된 전송 제어 블록을 상기 TCP 처리 로직에 전달하는 동작; 상기 TCP 처리 로직이, 상기 제n TCP 이벤트 및 상기 전송 제어 블록에 근거하여 제n TCP 이벤트에 대한 TCP 알고리 즘을 적용하는 동작; 및 상기 TCP 처리 로직이, 상기 제2 테이블에 저장된 전송 제어 블록을 상기 제n TCP 이벤 트에 대한 TCP 알고리즘을 적용한 결과로 업데이트하는 동작;을 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치의 동작 방법은, 상기 제n TCP 이벤트에 대해 TCP 연산을 수행하는 때에, 상기 TCP 처리 로직이, 제2 TCP 연결의 TCP 이벤트에 대한 TCP 연산을 동시에 수행하는 동작;을 더 포함할 수 있다. 본 개시의 실시예에 따르면, 상기 네트워크 인터페이스 장치의 동작 방법은, 상기 TCP 처리 로직이 상기 제1 TCP 연결에 대한 상기 제n TCP 이벤트에 대해 TCP 연산을 수행하는 것과 동시에, 상기 이벤트 핸들러가, 상기 제1 TCP 연결에 대한 제n+1 TCP 이벤트를 상기 제1 엔트리에 업데이트하는 동작;을 더 포함할 수 있다. 본 개시의 다양한 실시예들 및 이에 사용된 용어들은 본 개시에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 예를 들면, 단수로 표현된 구성요소는 문맥상 명백하게 단수만을 의미하지 않는다면 복수의 구성요소를 포함하 는 개념으로 이해되어야 한다. 본 개시에서 사용되는 '및/또는'이라는 용어는, 열거되는 항목들 중 하나 이상의 항목에 의한 임의의 가능한 모든 조합들을 포괄하는 것임이 이해되어야 한다. 본 개시에서 사용되는 '포함하 다,' '가지다,' '구성되다' 등의 용어는 본 개시 상에 기재된 특징, 구성 요소, 부분품 또는 이들을 조합한 것 이 존재함을 지정하려는 것일 뿐이고, 이러한 용어의 사용에 의해 하나 또는 그 이상의 다른 특징들이나 구성 요소, 부분품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 배제하려는 것은 아니다. 본 개시에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 본 개시의 다양한 실시예들에서 사용된 용어 \"~부\", \"~ 블록\", \"~ 로직\" 또는 \"~모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. \"~부\", \"~ 블록\", \"~ 로직\" 또는 \"~모듈\"은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부가 될 수 있다. 예를 들면, 일 실시예에 따르면, \"~부\", \"~ 블록\", \"~ 로직\" 또는 \"~모듈\"은 ASIC(application-specific integrated circuit) 또는 FPGA(Field-Programmable Gate Array)의 형태로 구현될 수 있다. 본 개시의 다양한 실시예들에서 사용된 용어 “~할 경우”는 문맥에 따라 “~할 때”, 또는 “~할 시” 또는 “ 결정하는 것에 응답하여” 또는 “검출하는 것에 응답하여”를 의미하는 것으로 해석될 수 있다. 유사하게, “~ 라고 결정되는 경우” 또는 “~이 검출되는 경우”는 문맥에 따라 “결정 시” 또는 “결정하는 것에 응답하여 ”, 또는 “검출 시” 또는 “검출하는 것에 응답하여”를 의미하는 것으로 해석될 수 있다. 본 개시를 통해 설명된 TOE 기반의 네트워크 인터페이스 장치 및 서버 장치에서 실행되는 프로그램은 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현 될 수 있다. 프로그램은 컴퓨터로 읽을 수 있는 명령어들을 수행할 수 있는 모든 시스템에 의해 수행될 수 있다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령어(instruction), 또는 이들 중 하나 이상 의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어는, 컴퓨터로 읽을 수 있는 저장 매체(computer- readable storage media)에 저장된 명령어를 포함하는 컴퓨터 프로그램으로 구현될 수 있다. 컴퓨터가 읽을 수 있는 저장 매체로는, 예를 들어 마그네틱 저장 매체(예컨대, ROM(Read-Only Memory), RAM(Random-Access Memory), 플로피 디스크, 하드 디스크 등) 및 광학적 판독 매체(예컨대, 시디롬(CD-ROM), 디브이디(DVD: Digital Versatile Disc)) 등이 있다. 컴퓨터가 읽을 수 있는 저장 매체는 네트워크로 연결된 컴퓨터 시스템들 에 분산되어, 분산 방식으로 컴퓨터가 판독 가능한 코드가 저장되고 실행될 수 있다. 컴퓨터 프로그램은 어플리 케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인 으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부 는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매 체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 본 개시의 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또 는 하나 이상의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소 들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요 소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8a 도면8b 도면9"}
{"patent_id": "10-2024-0058166", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 실시예에 따른 서버 장치를 나타내는 도면이다. 도 2는 본 개시의 실시예에 따른 네트워크 인터페이스 장치를 나타내는 도면이다. 도 3 내지 도 7은 각각 본 개시의 실시예에 따른 네트워크 인터페이스 장치에서 TCP 이벤트의 처리 동작을 순차 적으로 나타내는 도면이다. 도 8a 및 도 8b는 본 개시의 실시예에 따른 네트워크 인터페이스 장치의 메모리를 나타내는 도면이다. 도 9는 본 개시의 실시예에 따른 이벤트 테이블 및 TCB 테이블의 각 엔트리에 포함되는 TCP 파라미터들을 나타 내는 표이다."}
