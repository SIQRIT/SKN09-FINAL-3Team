{"patent_id": "10-2022-0182353", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0100152", "출원번호": "10-2022-0182353", "발명의 명칭": "인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법 및 장치", "출원인": "한양대학교 산학협력단", "발명자": "최정욱"}}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "프로세서 및 메모리를 이용하여 컨볼루션 연산을 수행하는 방법에 있어서, 입력 데이터에 대해 컨볼루션 연산을 수행되어 출력되는 출력 데이터의 행과 관련이 있는 유효 데이터에 대한정보를 상기 출력 데이터의 행별로 나누어 수집하는 입력 데이터 수집 단계; 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에서 상기 유효 데이터가 위치하는 열 정보에 기초하여, 상기 유효 데이터에 대한 확장 행 정보와 입력 인덱스 정보를 생성하는 확장 행 정보 생성 단계:상기 확장 행 정보에 기초하여 출력 데이터의 위치 정보를 생성하고, 상기 입력 인덱스 정보, 상기 확장 행 정보 및 상기 위치 정보를 기초로 컨볼루션 연산 규칙을 생성하는 연산 규칙 생성 단계; 및 상기 연산 규칙을 기초로 컨볼루션 연산을 수행하는 컨볼루션 연산 단계;를 포함하는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서,상기 입력 데이터 수집 단계는,입력 데이터를 수집하려고 하는 행과 이미 입력 데이터를 수집한 행과의 위치 정보를 고려하여, 중복되는 행에대한 입력 데이터는 이미 수집된 데이터를 활용하여 수집하는 단계;를 포함하는,인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 입력 데이터 수집 단계는,상기 중복되는 행에 대한 입력 데이터는 파이프 라인(pipe line)을 통해 순차적으로 수집하고 저장하는 단계;를포함하는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 입력 데이터 수집 단계 전에 이루어지는 인덱스 정보 추출 단계를 포함하고,상기 인덱스 정보 추출 단계는,입력 데이터 내에서 데이터가 존재하는 유효 데이터 및 데이터가 존재하지 않는 무효 데이터에 대한 위치 정보인 인덱스 정보를 추출하는 단계를 포함하는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서상기 인덱스 정보 추출 단계는,CSR FORMAT 정보를 활용하여 인덱스 정보를 추출하는, 공개특허 10-2024-0100152-3-인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제1항에 있어서,상기 확장 행 정보 생성 단계는,상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에 존재하는 유효 데이터들 중, 가장 작은 열에 위치하는 유효 데이터들부터 순차적으로 각각 대응되는 열 위치에 확장 행 정보를 생성하는 단계를 포함하는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 확장 행 정보 생성 단계는,상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에 존재하는 유효 데이터들 중에서, 가장 작은 열에위치하는 유효 데이터들에 대한 인덱스 정보를, 행별로 나누어 수집하는 단계를 포함하는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 연산 규칙 생성 단계는,상기 확장 행 정보에 포함되어 있는 입력 인덱스 정보에 기초하여 이에 대응되는 기준 아웃풋 인덱스 정보를 생성하는 아웃풋 인덱스 정보 생성 단계를 포함하는,인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8항에 있어서,상기 아웃풋 인덱스 정보 생성 단계는,커널의 크기에 기초하여 좌우로 아웃풋 인덱스 정보를 확장하여 생성하는 단계를 포함하는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 9항에 있어서,상기 커널은 3x3, 4x4 또는 5x5 크기의 행렬을 포함하는,인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "입력 데이터 내에서 데이터가 존재하는 유효 데이터 및 데이터가 존재하지 않는 무효 데이터에 대한 위치 정보인 인덱스 정보를 추출하는 인덱스 정보 추출 모듈;상기 입력 데이터에 대해 컨볼루션 연산을 수행되어 출력되는 출력 데이터의 행과 관련이 있는 유효 데이터에대한 정보를 상기 출력 데이터의 행별로 나누어 수집하는 입력 데이터 수집 모듈; 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에서 상기 유효 데이터가 위치하는 열 정보에 기초하여, 상기 유효 데이터에 대한 확장 행 정보와 입력 인덱스 정보를 생성하는 행 정보 생성 모듈: 및상기 확장 행 정보에 기초하여 출력 데이터의 위치 정보를 생성하고, 상기 입력 인덱스 정보, 상기 확장 행 정보 및 상기 위치 정보를 기초로 컨볼루션 연산 규칙을 생성하고, 생성한 상기 연산 규칙을 기초로 컨볼루션 연공개특허 10-2024-0100152-4-산을 수행하는 컨볼루션 연산 모듈;을 포함하는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11항에 있어서,상기 입력 데이터 수집 모듈은;입력 데이터를 수집하려고 하는 행과 이미 입력 데이터를 수집한 행과의 위치 정보를 고려하여, 중복되는 행에대한 입력 데이터는 이미 수집된 데이터를 활용하여 수집하는,인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,상기 입력 데이터 수집 모듈은,복수 개의 입력 데이터 수집 모듈을 포함하고,상기 중복되는 행에 대한 입력 데이터는 상기 복수 개의 입력 데이터 수집 모듈 끼리 직렬적으로 연결되어 있는파이프 라인(pipe line)을 통해 순차적으로 수집하고 저장하는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "입력 데이터 내에서 데이터가 존재하는 유효 데이터 및 데이터가 존재하지 않는 무효 데이터에 대한 위치 정보인 인덱스 정보를 추출하는 인덱스 정보 추출 모듈;상기 입력 데이터에 대해 컨볼루션 연산을 수행되어 출력되는 출력 데이터의 행과 관련이 있는 유효 데이터에대한 정보를 상기 출력 데이터의 행별로 나누어 수집하는 입력 데이터 수집 모듈; 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에서 상기 유효 데이터가 위치하는 열 정보에 기초하여, 상기 유효 데이터에 대한 확장 행 정보와 입력 인덱스 정보를 생성하는 행 정보 생성 모듈: 및상기 확장 행 정보에 기초하여 출력 데이터의 위치 정보를 생성하고, 상기 입력 인덱스 정보, 상기 확장 행 정보 및 상기 위치 정보를 기초로 컨볼루션 연산 규칙을 생성하고, 생성한 상기 연산 규칙을 기초로 컨볼루션 연산을 수행하는 컨볼루션 연산 모듈;을 포함하고,상기 커널은 3X3 커널에 해당하며,상기 행 정보 생성 모듈은,제0행 수집 데이터 저장 모듈, 제1행 수집 데이터 저장 모듈 및 제2행 수집 데이터 저장 모듈이 직렬적으로 연결되어 있는, 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치."}
{"patent_id": "10-2022-0182353", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 제0행 수집 데이터 저장 모듈, 상기 제1행 수집 데이터 저장 모듈 및 상기 제2행 수집 데이터 저장모듈은,파이프 라인(pipe line)을 통해 직렬적으로 연결되어 있어, 데이터를 순차적으로 송수신하고 저장할 수 있는,인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치."}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "일 실시예 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법은, 입력 데이터에 대해 컨볼루션 연산을 수행되어 출력되는 출력 데이터의 행과 관련이 있는 유효 데이터에 대한 정보를 상기 출력 데이터의 행별 로 나누어 수집하는 입력 데이터 수집 단계, 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에서 상기 유효 데이터가 위치하는 열 정보에 기초하여, 상기 유효 데이터에 대한 확장 행 정보와 입력 인덱스 정보를 생성 하는 확장 행 정보 생성 단계, 상기 확장 행 정보에 기초하여 출력 데이터의 위치 정보를 생성하고, 상기 입력 인덱스 정보, 상기 확장 행 정보 및 상기 위치 정보를 기초로 컨볼루션 연산 규칙을 생성하는 연산 규칙 생성 단 계 및 상기 연산 규칙을 기초로 컨볼루션 연산을 수행하는 컨볼루션 연산 단계를 포함할 수 있다."}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법 및 장치에 관한 발명으로서, 보다 상세 하게는 인공신경망을 이용하여 컨볼루션 연산을 수행함에 있어서, 입력 데이터와 출력 데이터와의 연관 관계를 커널의 특성을 이용하여 분석한 후, 분석한 결과에 기초하여 생성한 규칙을 이용하여 컨볼루션 연산을 보다 빠 르게 수행하는 기술에 관한 발명이다."}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공 지능(Artificial Intelligence, AI) 기술은, 인간의 학습능력과 추론능력, 지각능력, 자연언어의 이해능력 등을 컴퓨터 프로그램으로 실현한 기술을 의미하며, 종래의 룰(Rule) 기반 스마트 시스템과 달리 기계가 스스로 학습하고 판단하며 똑똑해지는 시스템을 의미한다. 인공지능 기술은 기계학습(딥 러닝) 및 기계학습을 활용한 요소 기술들로 구성된다. 기계 학습은 입력 데이터들 의 특징을 스스로 분류/학습하는 알고리즘 기술이며, 요소 기술은 딥 러닝 등의 기계학습 알고리즘을 활용하여 인간 두뇌의 인지, 판단 등의 기능을 모사하는 기술로서, 언어적 이해, 시각적 이해, 추론/예측, 지식 표현, 동 작 제어 등의 기술 분야로 구성된다. 인공지능 기술은 다양한 분야에 적용되어 활용되는데, 사람의 언어/문자를 인식하고 응용/처리하는 언어 이해 분야, 사물을 인간의 시각처럼 인식하여 객체 추적, 사람 인식, 공간 이해, 장면 이해 등을 처리하는 시각적 이 해 분야, 정보를 판단하여 논리적으로 추론하고 예측하는 추론/예측 분야 등이 존재한다. 인공지능의 기술의 발달에 따라, 자율주행 분야에서도 주행중인 차량 주변에 존재하는 객체를 인식하는 분야에 도 인공지능 기술이 적용되고 있다. 구체적으로, Lidar/RGB-D 센서 기반의 객체 인식 방법이 주를 이루고 있는 데, Lidar/RGB-D 센서 기반의 객체 인식 방법은 점 구름(Point Cloud) 형태의 데이터를 활용해 차량 주변에 존 재하는 객체의 위치와 종류를 분별하며, 점 구름 데이터는 컨볼루션(Convolution, 합성곱) 연산을 여러 레이어 에 걸쳐 대해 반복적으로 수행함으로써, 해당 데이터의 객체를 분류할 수 있는 특징을 추출한다. 그러나, 객체 인식 방법의 특성상, 점 구름 데이터가 공간에 희박하게(Sparse) 존재하기 때문에 컨볼루션 연산 또한 희박하게 존재하는 데이터들에 대해 이루어진다. 따라서, 레이어 별로 추출하는 특징(Feature)이 불규칙적 으로 메모리에 저장되고, 이로 인해 컨볼루션 연산에 사용되는 특징 데이터를 메모리로부터 불러오기 위해 불규 칙적인 접근을 할 수 밖에 없다. 따라서, 종래 기술에 따라 컨볼루션 연산을 수행하는 경우, 전 과정을 마치기 위해 필요한 시간이 크게 증가하는 문제점이 존재한다. 선행기술문헌 특허문헌 (특허문헌 0001) 대한민국 등록특허허공보 10-2012828 B1 - 볼륨 렌더링 장치 및 방법(2018.12.26.)"}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "일 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법 및 장치는 상기 설명한 문제점 을 설명하기 위한 고안된 발명으로서, 희소 데이터에 대해 컨볼루션 연산을 효율적으로 할 수 있는 방법 및 장 치를 제공하는데 그 목적이 있다. 보다 구체적으로는, 희소 입력 데이터에서 실제 데이터가 존재하는 유효 데이터의 입력 위치 정보와 연산 과정 에 따른 출력 데이터의 위치 정보 사이의 연산 규칙을 생성하고, 생성된 규칙에 따라 컨볼루션 연산을 효과적으 로 수행할 수 있는 방법 및 장치를 제공하는데 그 목적이 있다."}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "일실시예 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법은, 입력 데이터에 대해 컨볼루션 연산을 수행되어 출력되는 출력 데이터의 행과 관련이 있는 유효 데이터에 대한 정보를 상기 출력 데이터의 행별로 나누어 수집하는 입력 데이터 수집 단계, 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에서 상기 유효 데이터가 위치하는 열 정보에 기초하여, 상기 유효 데이터에 대한 확장 행 정보와 입력 인덱스 정보 를 생성하는 확장 행 정보 생성 단계, 상기 확장 행 정보에 기초하여 출력 데이터의 위치 정보를 생성하고, 상 기 입력 인덱스 정보, 상기 확장 행 정보 및 상기 위치 정보를 기초로 컨볼루션 연산 규칙을 생성하는 연산 규 칙 생성 단계 및 상기 연산 규칙을 기초로 컨볼루션 연산을 수행하는 컨볼루션 연산 단계를 포함할 수 있다. 상기 입력 데이터 수집 단계는, 입력 데이터를 수집하려고 하는 행과 이미 입력 데이터를 수집한 행과의 위치 정보를 고려하여, 중복되는 행에 대한 입력 데이터는 이미 수집된 데이터를 활용하여 수집하는 단계;를 포함할 수 있다. 상기 입력 데이터 수집 단계는, 상기 중복되는 행에 대한 입력 데이터는 파이프 라인(pipe line)을 통해 순차적 으로 수집하고 저장하는 단계;를 포함할 수 있다. 상기 입력 데이터 수집 단계 전에 이루어지는 인덱스 정보 추출 단계를 포함하고, 상기 인덱스 정보 추출 단계 는, 입력 데이터 내에서 데이터가 존재하는 유효 데이터 및 데이터가 존재하지 않는 무효 데이터에 대한 위치 정보인 인덱스 정보를 추출하는 단계를 포함할 수 있다. 상기 인덱스 정보 추출 단계는, CSR FORMAT 정보를 활용하여 인덱스 정보를 추출할 수 있다. 상기 확장 행 정보 생성 단계는, 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에 존재하는 유효 데이터들 중, 가장 작은 열에 위치하는 유효 데이터들부터 순차적으로 각각 대응되는 열 위치에 확장 행 정보를 생성하는 단계를 포함할 수 있다. 상기 확장 행 정보 생성 단계는, 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에 존재하는 유효 데이터들 중에서, 가장 작은 열에 위치하는 유효 데이터들에 대한 인덱스 정보를, 행별로 나누어 수집하는 단계 를 포함할 수 있다. 상기 연산 규칙 생성 단계는, 상기 확장 행 정보에 포함되어 있는 입력 인덱스 정보에 기초하여 이에 대응되는 기준 아웃풋 인덱스 정보를 생성하는 아웃풋 인덱스 정보 생성 단계를 포함할 수 있다. 상기 아웃풋 인덱스 정보 생성 단계는, 커널의 크기에 기초하여 좌우로 아웃풋 인덱스 정보를 확장하여 생성하 는 단계를 포함할 수 있다. 상기 커널은 3x3, 4x4 또는 5x5 크기의 행렬을 포함할 수 있다. 일 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치는, 입력 데이터 내에서 데이터 가 존재하는 유효 데이터 및 데이터가 존재하지 않는 무효 데이터에 대한 위치 정보인 인덱스 정보를 추출하는 인덱스 정보 추출 모듈, 상기 입력 데이터에 대해 컨볼루션 연산을 수행되어 출력되는 출력 데이터의 행과 관련 이 있는 유효 데이터에 대한 정보를 상기 출력 데이터의 행별로 나누어 수집하는 입력 데이터 수집 모듈, 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에서 상기 유효 데이터가 위치하는 열 정보에 기초하여, 상 기 유효 데이터에 대한 확장 행 정보와 입력 인덱스 정보를 생성하는 행 정보 생성 모듈 및 상기 확장 행 정보 에 기초하여 출력 데이터의 위치 정보를 생성하고, 상기 입력 인덱스 정보, 상기 확장 행 정보 및 상기 위치 정 보를 기초로 컨볼루션 연산 규칙을 생성하고, 생성한 상기 연산 규칙을 기초로 컨볼루션 연산을 수행하는 컨볼 루션 연산 모듈을 포함할 수 있다. 상기 입력 데이터 수집 모듈은, 입력 데이터를 수집하려고 하는 행과 이미 입력 데이터를 수집한 행과의 위치 정보를 고려하여, 중복되는 행에 대한 입력 데이터는 이미 수집된 데이터를 활용하여 수집할 수 있다. 상기 입력 데이터 수집 모듈은, 복수 개의 입력 데이터 수질 모듈을 포함하고, 상기 중복되는 행에 대한 입력 데이터는 상기 복수 개의 입력 데이터 수집 모듈 끼리 직렬적으로 연결되어 있는 파이프 라인(pipe line)을 통 해 순차적으로 수집하고 저장할 수 있다. 다른 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치는, 입력 데이터 내에서 데이 터가 존재하는 유효 데이터 및 데이터가 존재하지 않는 무효 데이터에 대한 위치 정보인 인덱스 정보를 추출하 는 인덱스 정보 추출 모듈, 상기 입력 데이터에 대해 컨볼루션 연산을 수행되어 출력되는 출력 데이터의 행과 관련이 있는 유효 데이터에 대한 정보를 상기 출력 데이터의 행별로 나누어 수집하는 입력 데이터 수집 모듈, 상기 커널의 이동 경로에 대응되는 입력 데이터의 범위 내에서 상기 유효 데이터가 위치하는 열 정보에 기초하 여, 상기 유효 데이터에 대한 확장 행 정보와 입력 인덱스 정보를 생성하는 행 정보 생성 모듈 및 상기 확장 행정보에 기초하여 출력 데이터의 위치 정보를 생성하고, 상기 입력 인덱스 정보, 상기 확장 행 정보 및 상기 위 치 정보를 기초로 컨볼루션 연산 규칙을 생성하고, 생성한 상기 연산 규칙을 기초로 컨볼루션 연산을 수행하는 컨볼루션 연산 모듈을 포함할 수 있다. 상기 커널은 3X3 커널에 해당하며, 상기 행 정보 생성 모듈은, 제0행 수집 데이터 저장 모듈, 제1행 수집 데이 터 저장 모듈 및 제2행 수집 데이터 저장 모듈이 직렬적으로 연결되어 있을 수 있다."}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "일 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법 및 장치는 희소 데이터 기반의 컨볼루션 연산을 수행함에 있어서, 입력 데이터의 위치 및 출력 데이터의 위치를 고려하여 규칙을 생성하고, 이 를 기초로 연산을 수행하기 때문에, 입력된 데이터 중 유효 데이터에 대해서만 컨볼루션 연산을 수행하므로, 불 필요한 연산을 줄 일 수 있어 종래 기술보다 빠르게 컨볼루션 연산을 수행할 수 있는 장점이 존재한다. 또한, 컨불루션 연산의 경우 그 특성상 중첩되는 계산 과정이 많은데, 본 발명에 따른 컨볼루션 연산 방법은 종 래에 수집하였던 입력 데이터의 정보를 다음 연산에서 재사용하므로, 컨볼루션 연산 자체의 연산 속도를 빠르게 증가시킬 수 있는 장점이 존재한다. 또한, 이러한 특징으로 인해 3차원 공간에 존재하는 객체 인식의 속도를 증가시킬 수 있는바, 고차원 자율 주행 에 필수적인 고속 전방 장애물 인식을 효율적으로 수행할 수 있고, 빠르고 정확한 로봇 네비게이션을 위한 RGB- D 기반의 위치 추정도 효율적으로 수행할 수 있는 장점이 존재한다."}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "본 발명의 효과들은 이상에서 언급한 기술적 과제들로 제한되지 않으며, 언급되지 않은 또 다른 효과들은 아래 의 기재들로부터 당업자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에 기재된 실시 예와 도면에 도시된 구성은 개시된 발명의 바람직한 일 예이며, 본 출원의 출원 시점 에 있어서 본 명세서의 실시 예와 도면을 대체할 수 있는 다양한 변형 예들이 있을 수 있다. 또한, 본 명세서에서 사용한 용어는 실시 예를 설명하기 위해 사용된 것으로, 개시된 발명을 제한 및/또는 한정 하려는 의도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 명세서에서, \"포함하다\", \"구비하다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 작동, 구성요소, 부품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들 이나 숫자, 단계, 작동, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않 는다. 또한, 본 명세서에서 사용한 \"제 1\", \"제 2\" 등과 같이 서수를 포함하는 용어는 다양한 구성 요소들을 설명하는 데 사용될 수 있지만, 상기 구성 요소들은 상기 용어들에 의해 한정되지는 않는다. 아래에서는 첨부한 도면을 참고하여 본 발명의 실시예에 대하여 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그리고 도면에서 본 발명을 명확하게 설명하기 위해서 설명과 관계없는 부분은 생략한다. 도 1은 종래 기술에 따라 희소 데이터 기반의 컨볼루션 연산을 수행하는 과정을 설명하기 위한 도면이다. 도 1을 참고하면, LiDAR를 통해 얻는 3차원 공간에 존재해는 객체(object)에 대한 포인트 클라우드(point cloud, 20)는 도면에 도시된 바와 같이 밀도가 희박한(Sparse)한 정보를 가지고 있다. 따라서, 이러한 데이터들 에서는 바로 컨볼루션 연산을 수행하지 않고 입력된 포인트 클라우드 데이터에 대해 희소 유사 이미지(pseudo image)로 변환과정을 거친다. (S10) 즉, S10 과정은 2차원 희소 컨볼루션(spare convolution) 입력 데이터를 생성하는 것이다. 다만, 희소 이미지 데이터에 대해 컨볼루션 연산을 수행하면 연산의 비효율 문제가 발생하게 되므로, 희소 이미 지를 밀집된 형태의 데이터로 변환한 후, 변환된 데이터를 기초로 밀집(dense) 컨볼루션 연산을 수행하게 된다. 그러나, 이러한 과정을 거쳐서 컨볼루션 연산을 수행하더라도 희소 데이터의 희소 정도(sparsity)는 일반적으로 95%를 초과하기 때문에, 밀집 컨볼루션 연산을 위한 치환 연산은 매우 비효율적인 문제를 가지고 있다. 따라서, 일 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법 및 장치는 상기 설명한 문제점을 설명하기 위한 고안된 발명으로서, 희소 데이터에 대해 컨볼루션 연산을 효율적으로 할 수 있는 방법 및 장치를 제공하는데 그 목적이 있다. 보다 구체적으로는, 희소 입력 데이터에서 실제 데이터가 존재하는 유효 데이터의 입력 위치 정보와 연산 과정 에 따른 출력 위치 정보간의 매핑 정보를 생성하여, 상기 매핑 정보를 기초로 보다 효율적으로 컨볼루션 연산 과정을 수행할 수 있는 방법 및 장치를 제공하는데 그 목적이 있다. 이하 도면을 통해 본 발명의 구성 및 작동 순서에 대해 자세히 알아본다. 도 2는 본 발명의 일 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치의 일부 구성 요소를 도시한 블록도이며, 도 3은 본 발명의 일 실시예로서 입력 데이터의 일 예와 커널의 일 예를 도시한 도 면이며, 도 4 내지 도 7은 본 발명의 일 실시예에 따라 입력 데이터 수집 모듈이 입력 데이터에 기준으로 유효 데이터를 수집하고 저장하는 과정을 설명하기 위한 도면이다. 도 2를 참조하면, 일 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치는 프로세서 와 메모리 모듈을 포함할 수 있고, 프로세서는 인덱스 정보 추출 모듈, 입력 데이터 수집 모듈, 행 정보 생성 모듈 및 컨볼루션 연산 모듈을 포함할 수 있다. 한편, 본 발명에서 컨볼루션 연산을 수행하기 이동되는 커널은, 도 3의 (b)에 도시된 바와 같은 3X3 커널을 기 준으로 하여 설명한다. 그러나, 이는 본 발명의 일 실시예에 불과할 뿐, 본 발명의 원리는 2X2, 4X4, 5X5 등의 크기를 가지는 커널에 대해서도 적용될 수 있으며, 2차원 커널이 아닌 3차원 커널에서도 본 발명의 원리가 그대 로 적용될 수 있다. 또한, 도 2에서는 설명의 편의를 위해 인덱스 정보 추출 모듈, 입력 데이터 수집 모듈, 행 정보 생성 모듈, 및 컨볼루션 연산 모듈을 별도의 구성 요소로 도시하여 설명하였지만, 이는 설명의 편의를 위 해 구분한 것이고 각각의 모듈이 하는 역할을 하나의 프로세서가 수행할 수도 있다. 인덱스 정보 추출 모듈은 입력되는 입력 데이터에 대한 입력 인덱스 정보를 생성할 수 있다. 본 발명 에서의 (index) 정보는 입력 데이터 내에 서 실제 데이터가 존재하는 유효 데이터가 위치하고 있는 포인트에 대한 위치 정보를 의미한다. 일 예로, 도 3의 (a)에 도시된 바와 같은 5 X 5행렬의 데이터가 입력 데이터로 입력이 된다면(행렬에서 빗금친 부분이 데이터가 존재하는 영역이고, 민무늬 부분이 데이터가 존재하지 않는 영역을 의미하며, 데이터가 존재하 는 위치의 데이터를 유효 데이터라 지칭하기로 한다) 인덱스 정보 추출 모듈은 입력 데이터 내에서 유효 데이터가 위치하고 있는 위치 정보를 입력 인덱스 정보로 추출할 수 있다. 인덱스 정보를 표현하는 방법은 행렬 데이터를 표현하는 공지되어 있는 방법이면 그 어느 것이든 차용될 수 있 는데, 대표적으로 CSR(Compressed Spare Row) 포맷이 사용될 수 있다. 이하 설명의 편의를 위해 본 발명에서의 인덱스 정보는 CSR 형식을 기준으로 설명하기로 한다. 구체적으로, CSR 포맷 형식은 순차적으로 각각의 행에 유효 데이터가 몇 개가 존재하는지에 대한 정보인 CSR_row 정보와, 순차적으로 각각의 행에 유효 데이터가 몇 열에 위치하는지에 대한 정보인 CSR_col에 대한 정 보를 포함하고 있으며, CSR 형식 좌표 표현 방식은 일반적으로 행렬 표현 방법과 동일하나, 시작이 1이 아니라 0에서 시작하는 것에 차이점이 존재한다. 따라서, 데이터에서 가장 왼쪽 및 가장 위쪽에 있는 좌표는 (1,1)로 표현하지 않고 (0,0)으로 표현된다. 따라서, 입력 데이터는 0행 0열을 기준으로 행과 열이 시작된다고 볼 수 있으며, 커널 또한 3X3 행렬의 커널인 경우 커널의 오프셋은 행 기준으로 (0,1,2), 열 기준으로 (0,1,2)가 된다. 즉, 입력 데이터와 커널 모두 0행을 기준으로 표현이 된다. 도 3에 표시된 입력 데이터에 대해 인덱스 정보가 생성되는 과정을 순차적으로 설명하면, CSR_row 값은 데이터 와 무관하게 처음은 0으로 시작하며, 2번째 값부터 각 행별로 있는 유효 데이터의 개수 만큼 누적된 값을 나타 낸다. 따라서, 도면에 표시된 바와 같이 CSR_row는 0으로 시작한다. 제0행에서는 유효 데이터가 1개 (I0)존재하므로 제0행까지 고려한 에 CSR_row의 값은 [0,1]로 표현된다. 제1행에서는 유효 데이터가 1개 (I1)존재하므로 제1행까지 고려한 CSR_row 값은 [0,1,2]로 표현이 된다. 제2행에서는 유효 데이터가 2개(I1, I2) 존재하므로 제2행까지 고려한 CSR_row 값은 [0,1,2,4]로 표현이 된다. 제3행에서는 유효 데이터가 1개(I4) 존재하므로 제3행까지 고려한 CSR_row값은 [0,1,2,4,5]로 표현이 된다. 제4행에서는 유효 데이터가 1개(I5) 존재하므로 제4행까지 고려한CSR_row값은 [0,1,2,4,5,6]로 표현이 된다. CSR_col은 순차적으로 각각의 행에서 몇 번째 열(column)에 유효 데이터가 위치하고 있는지에 대한 정보를 알려 주는 정보이다. 따라서, 도 3을 기준으로 제0행에서는 4번째 열의 위치에 데이터가 존재하므로 CSR_col은 [4]가 되고, 제1행에는 1 열에 유효 데이터가 존재하므로 CSR_col은 [4,1]이 된다. 제2행에는 유효 데이터가 2번째 열 과 3번째 열에 존재하므로 CSR_col은 [4,1,2,3]이 되고, 제3행에는 유효 데이터가 3 열에 위치하므로 CSR_col은 [4,1,2,3.3]이 된다. 이러한 방식으로 데이터를 생성하면 최종CSR_col는 [4,1,2,3,3,2]가 된다. 입력 데이터 수집 모듈은 인덱스 정보 생성 모듈이 생성한 입력 인덱스 정보와 기초로 입력 데이터 내의 유효 데이터와 그렇지 않은 데이터(이하 '무효 데이터'로 지칭하여 설명한다)를 커널의 크기를 고려하여 행별로 수집하고 저장하는 모듈을 의미한다. 구체적으로, 입력 데이터 수집 모듈은 입력 커널의 크기 정보 및 스트라이딩 경로 정보와 인덱스 정보 추 출 모듈이 생성한 입력 인덱스 정보에 기초하여 입력 데이터 내에서 유효 데이터와 그렇지 않은 데이 터를 행별로 수집하고 이를 순차적으로 저장할 수 있다. 일 예로, 커널의 크기가 3x3이라면 3개의 행으로 입력 데이터를 수집하고, 커널의 크기가 4x4라면 4개의 행으로 입력 데이터를 수집한다. 도 4를 참조하여, 이에 대해 설명하면, 입력 데이터 수집 모듈은 인덱스 정보 모듈이 생성한 입력 인 덱스 정보를 기초로 하여, 입력 데이터 내에서 행에 포함되어 있는 유효 데이터와 무효 데이터를 행별 로 수집하고 저장한다. 이를 단계를 나누어 설명하면, 입력 데이터 수집 모듈은 첫번째로, 입력 인덱스 정보인 CSR_row 정보 에서 다음 열의 숫자와 이전 열의 숫자를 차가하는 방식으로 행 별로 유효 데이터의 개수를 수집한다. (S10) 구체적으로 도면에서 수집된 바와 같이 제 n 행에서의 유효 데이터 개수는 csr_row[n+1] - csr_row [n]으로 계 산될 수 있다. 예를 들어, 제 0 행에서의 유효 데이터의 개수는 csr_row[1] - csr_row[0] = 1 - 0 = 1이 되므로, 1개의 유효 데이터가 있음을 산출할 수 있다.' 로 수정하면 좋을 것 같습니다. 이와 같은 방법으로, 제1열에서의 유효 데이터의 개수는 csr_row[2] - csr_row[1] = 2 - 1인 1개가 되고, 제 2 행에서의 유효 데이터 개수는 4에서 2를 차감한 2개가 되고, 제 3 행에서의 유효 데이터 개수는 5에서 4를 차감 한 1개가 된다. 또한, 제 4 행에서의 유효 데이터 개수는 6에서 5를 차감한 1개가 된다 앞선 과정을 통해 각 행 별로 유효 데이터의 개수를 산출하면, 다음 단계로 각 행 별로 유효한 데이터의 열 정보를 구한다. 구체적으로, 각각의 행 별로 유효한 데이터는 각 열 정보 또한 csr_col 를 통해 구할 수 있으며, 구체적으로 n 번째 행에 존재하는 유효 데이터의 열 정보의 시작 주소는 csr_row[n]로 구할 수 있다. 이를 도면을 참고하여 설명하면, csr_col 상의 제 0 행의 유효 데이터의 열 정보는 csr_row[0] = 0의 주소 값에 서부터 구할 수 있고, csr_col 상의 제 1 행의 유효 데이터의 열 정보는 csr_row[1] = 1의 주소 값에서 부터 구 할 수 있다. 또한, csr_col 상의 제 2 행의 유효 데이터의 열 정보는 시작 주소 2에서부터 구할 수 있으며, csr_col 상의 제 3 행의 유효 데이터의 열 정보는 시작 주소 4에서부터 구할 수 있고, csr_col 상의 제 4 행의 유효 데이터의 열 정보는 시작 주소 5에서부터 구할 수 있다(S20). 즉, 각 시작 주소로 부터 각 행에 존재하는 유효 데이터 개수만큼 수집하면, 출력 행에 대해서 각 커널 크기 만 큼의 수집되어야 할 유효 데이터의 열 정보를 수집할 수 있다. 예를 들어, S10의 정보와 S20의 정보를 활용하면, 제 0 행의 유효 데이터의 열 정보를 수집하면, 시작 주소 0부 터 시작하여 1개 만큼의 값을 수집하게 되므로, I0에 해당하는 열 정보인 csr_col[0] = 4를 수집할 수 있게 된 다. 이와 같은 방법으로, 제 1 행의 유효 데이터의 열 정보를 수집하면, 시작 주소 1부터 시작하여 1개 만큼의 값을 수집하게 되므로, I1에 해당하는 열 정보인 csr_col[1] = 1를 수집할 수 있게 된다. 제 2 행의 유효 데이터의 열 정보는, 시작 주소 2부터 시작하여 2개 만큼의 값을 수집하게 되므로, I2, I3에 해 당하는 열 정보인 csr_col[2] = 2, csr_col[3] = 3을 수집할 수 있게 된다. 제 3 행의 유효 데이터의 열 정보는, 시작 주소 4부터 시작하여 1개 만큼의 값을 수집하게 되므로, I4에 해당하 는 열 정보인 csr_col[4] = 3을 수집할 수 있게 된다. 제 4 행의 유효 데이터의 열 정보는, 시작 주소 5부터 시작하여 1개 만큼의 값을 수집하게 되므로, I5에 해당하 는 열 정보인 csr_col[5] = 2을 수집할 수 있게 된다. (S30) 즉, 도 4에서 설명한 바와 같은 방법으로 입력 데이터 수집 모듈은 유효 데이터와 무효 데이터를 위치 정보를 포함해서 수집한 후, 행별로 순차적으로 데이터들을 저장한다. 도 5 내지 도 7을 통해 이를 구체적으로 설명하면, 희소 입력 데이터 수집 모듈은 입력 인덱스 정보에 기초하여 수집한 데이터들을, 수집한 데이터들이 컨볼루션 연산에 의해 출력되는 출력 데이터의 행의 위치를 고 려하여, 대응되는 행별로 데이터들을 순차적으로 저장한다. 입력 데이터 수집 모듈은 수집한 데이터들을 저장함에 있어서, 각각의 행에 대응되어 마련되어 있는 수집 데이터 저장 모듈(221~223)에 저장할 수 있다. 따라서, 수집 데이터 저장 모듈(221~223)은 데이터를 임시적으로 저장할 수 있는 다양한 형태의 레지스터로 구현될 수 있다. 구체적으로, 입력 데이터 수집 모듈은 커널의 행의 개수에 만큼 수집 데이터들을 저장할 수 있는 복수 개 의 수집 데이터 저장 모듈(221~223)을 포함할 수 있는데, 일 예로 제0행 수집 데이터 저장 모듈에는 커널 의 제0행을 기준으로 수집한 제0행 유효 데이터들이 순차적으로 저장될 수 있고, 제1행 수집 데이터 저장 모듈에는 커널의 제1행을 기준으로 수집한 제1행 유효 데이터들이 순차적으로 저장될 수 있으며, 제2행 수 집 데이터 저장 모듈에는 커널의 제2행을 기준으로 수집한 제2행 유효 데이터들이 각각 순차적으로 저장될 수 있다. 도 5를 참고하면, 입력 데이터에는 제로 패딩이 적용되기 때문에, 커널의 제0행에 대응되는 유효 데이 터가 존재하지 않는다. 따라서, 제0행 수집 데이터 저장 모듈에는 아무런 데이터가 저장되지 않는 invalid 데이터, 즉 'x'인 무효 데이터가 저장된다. 제1행 수집 데이터 저장 모듈에는 커널의 제1행과 관련이 있는 데이터가 저장될 수 있는데, 입력 데이 터의 제1행에는 유효 데이터가 Io 하나 존재하므로 유효 데이터 Io은 제1행 수집 데이터 저장 모듈에저장될 수 있다. 제2행 수집 데이터 저장 모듈에는 커널의 제2 행과 관련이 있는 데이터가 저장될 수 있는데, 커널(2 5)의 제2행에 대응되는 입력 데이터의 제1행에는 유효 데이터가 I1 하나 존재하므로 유효 데이터 I1은 제2 행 수집 데이터 저장 모듈에 수집되어 저장될 수 있다. 즉, 이를 도식화하여 표시하면 도 5의 오른쪽에 도시된 바와 같이 각각의 수집 데이터 저장 모듈(221, 222, 223)에 무효 데이터 또는 유효 데이터들이 수집되어 저장될 수 있다. 한편, 3X3 커널이 입력 데이터의 제0행을 기준으로 스트라이딩을 하면서 컨볼루션 연산을 하게 되면, 입력 데이터의 제0행 및 제1행에 있는 데이터들이(제로 패딩이 있어서 0행 보다 앞선 행은 없다) 출력 데이터의 제0행의데이터들과 관련이 있게 된다. 커널이 한 칸 아래로 내려와 제1행을 기준으로 스타라이딩을 하면서 컨볼루션 연산을 하게 되면, 입력 데이터의 제0행, 제1행 및 제2행에 있는 데이터들이 출력 데이터의 제1행의 데이터들과 관련이 있게 된다. 커널이 한 칸 더 아래로 내려와 제2행을 기준으로 스타라이딩을 하면서 컨볼루션 연산을 하게 되면, 입력 데이 터의 제1행, 제2행 및 제3행에 있는 데이터들이 출력 데이터의 제2행의 데이터들과 관련이 있게 된다. 따라서, 도 5에 직사각형 점선 박스로 표시한 바와 같이, 직사각형 점선 박스 안에 있는 데이터들은 출력 데이 터의 제0번째 출력 행과 관련된 유효한 데이터들이 되며, 위아래 데이터 들에서도 연산을 수행하는 3x3 컨볼루 션 연산의 특성상 도 5의 타원 점선 안에 있는 데이터들은 출력 데이터의 제1번째 출력 행과 관련된 입력 데이 터가 된다. 한편, 앞서 살펴본 바와 같이 입력 데이터의 제0행을 기준으로 한 커널의 스트라이딩이 끝나면, 커널 은 한 행 아래로 내려온 후, 입력 데이터의 제1 행을 기준으로 한 컨볼루션 연산을 수행하게 된다. 따 라서, 컨볼루션 연산 결과에 대해 영향을 미치는 입력 데이터들의 행 또한 한 줄 아래로 내려오게 된다. 이를 도 6을 기준으로 설명하게 되면, 도 6의 왼쪽에 도시된 바와 같이 커널이 왼쪽으로 오른쪽으로 이동하 면서 입력 데이터의 제0행, 제1행 및 제2행에 있는 데이터들을 스캔하면서 수집하게 된다. 구체적으로, 도 6의 경우 입력 데이터의 제0행에 있는 유효 데이터 Io과, 제1행에 있는 유효 데이터 I1 및 제2행에 있는 유효 데이터 I2 및 I3가 수집될 수 있다. 그리고 이렇게 수집된 유효 데이터들은 앞서 설명한 바 와 같이 수집 데이터 저장 모듈에 순차적으로 저장될 수 있다. 다만, 도 6에 도시된 바와 같이 커널이 움직이는 경우, 입력 데이터의 제0행과 제1행에 있는 유효 데이터들 은 커널이 도 5에 도시된 바와 같이 움직일 때, 이미 수집한 유효 데이터에 해당하므로, 다시 입력 데이터를 수 집할 필요 없이 각각의 행 수집 데이터 저장 모듈에 저장되어 있는 유효 데이터들을 행의 위치에 맞춰 이동시켜 주면 된다. 즉, 도 6의 오른쪽 도면에서 검은색 진한 선으로 표시한 바와 같이 제2행 수집 데이터 저장 모듈에 저장되 어 있는 유효 데이터인 I1은 제1행 수집 데이터 저장 모듈로 전송되어 제1행 수집 데이터 저장 모듈 에 저장되고, 제1행 수집 데이터 저장 모듈에 저장되어 있는 유효 데이터인 I0은 제0행 수집 데이터 저장 모듈로 전송되어 제0행 수집 데이터 저장 모듈에 저장될 수 있다. 다만, 커널이 입력 데이터의 제1행을 기준으로 스트라이딩을 시작하게 되면, 입력 데이터의 제2행 에 있는 데이터들이 추가적으로 수집되므로, 이렇게 추가로 수집된 유효 데이터 I2와 I3 는 도 6의 오른쪽에 도 시된 바와 같이 제2행 수집 데이터 저장 모듈에 순차적으로 입력 및 저장이 된다. 결론적으로 커널이 입력 데이터의 제 1행을 기준으로 스트라이딩을 완료하게 되면, 출력 데이터의 제1 번째 출력 행과 관련된 유효 데이터인 Io인 제0행 수집 데이터 저장 모듈에 저장되고, 제1번째 출력 행과 관련된 유효 데이터 I1은 제1행 수집 데이터 저장 모듈에 저장되고, 제1번째 출력 행과 관련된 유효 데이 터 I2와 I3는 제2행 수집 데이터 저장 모듈에 저장될 수 있다. 이를 도면으로 표현하며, 도 6에 직사각형 점선 박스로 표시한 바와 같이, 직사각형 점선 박스 안에 있는 데이 터들은 출력 데이터의 제1번째 출력 행과 관련된 유효한 데이터들이 되며, 위아래 데이터 들에서도 연산을 수행 하는 3x3 컨볼루션 연산의 특성상 도 6의 타원 점선 안에 있는 데이터들은 출력 데이터의 제2번째 출력 행과 관 련된 입력 데이터가 된다.도 6에 따른 커널이 입력 데이터의 제0행을 기준으로 한 스트라이딩이 끝나면, 커널은 도 7의 왼쪽에 도시 된 바와 같이 입력 데이터의 제1행을 기준으로 한 스트라이딩을 왼쪽에서부터 오른쪽으로 진행하게 된다. 따라서, 컨볼루션 연산 결과에 대해 영향을 미치는 입력 데이터들의 행 또한 한 줄 아래로 내려오게 된다. 이를 도 7을 기준으로 설명하게 되면, 도 7의 왼쪽에 도시된 바와 같이 커널이 왼쪽으로 오른쪽으로 이동하 면서 입력 데이터의 제1행, 제2행 및 제3행에 있는 데이터들과 컨볼루션 연산을 수행하게 되면, 입력 데이 터의 제1행에 있는 유효 데이터 I1과, 제2행에 있는 유효 데이터 I2 및 I3, 그리고 제3행에 있는 유효 데이 터 I4가 유효 데이터로 수집되며, 이렇게 수집된 유효 데이터들은 앞서 설명한 바와 같이 수집 데이터 저장 모 듈(221,222,223)에 각각 순차적으로 저장될 수 있다. 다만, 도 7에 도시된 바와 같이 커널이 움직이는 경우, 입력 데이터의 제1행과 제2행에 있는 유효 데이터들 은 커널이 도 6에 도시된 바와 같이 움직일 때, 이미 수집한 유효 데이터에 해당하므로, 다시 입력 데이터를 수 집할 필요 없이 각각의 행 수집 데이터 저장 모듈에 저장되어 있는 유효 데이터들을 행의 위치에 맞춰 이동시켜 주면 된다. 즉, 도 7의 오른쪽 도면에서 검은색 진한 선으로 표시한 바와 같이 제2행 수집 데이터 저장 모듈에 저장되 어 있는 유효 데이터인 I3와 I2는 제1행 수집 데이터 저장 모듈로 전송되어 제1행 수집 데이터 저장 모듈 에 저장되고, 제1행 수집 데이터 저장 모듈에 저장되어 있는 유효 데이터 I1은 제0행 수집 데이터 저 장 모듈로 전송되어 제0행 수집 데이터 저장 모듈에 저장된다. 다만, 커널이 입력 데이터의 제1행을 기준으로 스트라이딩을 시작하게 되면, 입력 데이터의 제3행 에 있는 데이터들이 추가적으로 수집되므로, 이렇게 추가로 수집된 유효 데이터 I4 는 도 7의 오른쪽에 도시된 바와 같이 제2행 수집 데이터 저장 모듈에 순차적으로 입력 및 저장이 된다. 결론적으로 커널이 입력 데이터의 제 1행을 기준으로 스트라이딩을 완료하게 되면, 출력 데이터의 제2 번째 출력 행과 관련된 유효 데이터인 I1은 제0행; 수집 데이터 저장 모듈에 저장되고, 제2번째 출력 행과 관련된 유효 데이터 I2와 I3는 제1행 수집 데이터 저장 모듈에 저장되고, 제2번째 출력 행과 관련된 유효 데이터 I4는 제2행 '수집 데이터 저장 모듈에 저장된다. 즉, 도 7에 직사각형 점선 박스로 표시한 바와 같이, 직사각형 점선 박스 안에 있는 데이터들은 출력 데이터의 제2번째 출력 행과 관련된 유효한 데이터들이 되며, 도 7의 타원 점선 안에 있는 데이터들은 출력 데이터의 제3 번째 출력 행과 관련된 입력 데이터가 된다. 본원 발명과 같이 수집된 유효 데이터들을 순차적으로 각각의 저장 모듈에 나누어 저장하는 경우, 중복된 행에 대한 정보는 기존에 산출한 정보를 그대로 활용할 수 있으므로 추후 커널의 기준 행이 바뀌더라도 중복되는 행 에 유효 데이터들은 재사용을 할 수 있다. 따라서, 컨볼루션 연산을 수행함에 있어서 별도로 또 다시 입력 데이 터들을 수집해야 하는 과정이 생략되므로, 연산의 전체 속도가 빨라지는 효과를 얻을 수 있다. 이하, 도면을 통해 도 4 내지 도 7을 통해 수집된 입력 데이터들이 행 정보 생성 모듈에 의해 확장 행 (merged row) 정보를 생성하는 과정에 대해 알아본다 도 8과 도 9는 일 실시예에 따른 행 정보 생성 모듈이 출력 데이터의 제0행에 대응되는 제0행 확장 행 정보를 생성하는 방법을 설명하기 위한 도면이다. 행 정보 생성 모듈은 희소 입력 데이터 수집 모듈이 수집한 유효 데이터들에 대응되는 출력 데이터의 행에 관한 정보인 확장 행 정보를 생성할 수 있다. 행 정보 생성 모듈은 확장 행 정보를 생성하는 정보 생성부와 유효 데이터와 무효 데이터들이 저장되 는 인덱스 저장 모듈을 포함할 수 있으며, 인덱스 저장 모듈은 커널의 행의 개수만큼 구비될 수 있다. 즉, 본 발명의 경우 3X3 커널의 기준으로 설명하고 있는바, 인덱스 저장 모듈은 제0인덱스 저장 모듈, 제1인덱스 '저장 모듈 및 제2인덱스 저장 모듈을 포함할 수 있다. 정보 생성부는 입력 데이터 수집 모듈이 행별로 수집한 유효 데이터 및 무효 데이터들에 대해, 컨볼 루션 연산을 수행하는 경우 그 특성상 발생하는 상하 번짐(dilation) 효과를 반영한 확장 행 정보를 생성할 수 있다. 구체적으로, 정보 생성부 제0행 수집 데이터 저장 모듈과 제1행 수집 데이터 저장 모듈 및 제2 행 수집 데이터 저장 모듈에 가장 먼저 저장되어 있는 데이터들을 첫번째 입력 정보로 입력 받은 후,(도 5참조) 첫번째 입력 정보에서 가장 작은 열에 해당하는 입력 데이터를 판단한 후, 이를 기초로 확장 행 정보를 생성할 수 있다. 여기서 말하는 확장 행 정보는 특정 행을 기준으로 컨볼루션 연산을 수행하는 열에 대한 인덱스 정보를 포함하 고 있는 정보를 의미한다. (즉, 컨볼루션 연산을 수행함에 있어서 그 특성상 발생되는 상하 번짐 효과를 고려한 정보로 이해할 수 있다) 도 8을 기준으로 설명하면, 첫번째 입력 정보에서 가장 작은 열에 있는 입력 데이터는 제1열에 있는 I1이므 로(이하 이렇게 대응되는 구성은 C1(Io)이라 표현한다), 제0행 확장 행 정보에는 도면에 도시된 바와 제1열 에 인덱스 정보 C1이 생성된다. 그리고 이와 동시에 C1에 대응되는 데이터들에 대한 인덱스 정보 또한 저장되어야 하는데, C1이 첫번째 입력 정 보에서 3번째 행에 위치하였기 때문에 이는 커널의 2번째 행과 컨볼루션 연산을 수행함을 의미한다. 따 라서, 도 8에 도시된 바와 같이, 제2행 인덱스 저장 모듈에는 C1에 대응되는 유효 데이터의 인덱스 정보인 I1이 저장된다. 한편, 본 단계에서는 C1에 해당하는 번짐 효과만 고려하는 것이기 때문에, 제0행 인덱스 저장 모듈과 제1 행 인덱스 저장 모듈에는 invalid 값으로 'x'가 저장이 된다. 첫번째 입력 정보에서 첫번째 최소 비교가 완료되면, 정보 생성부는 첫번째 입력 정보에서 남아 있는 정보들 사이에 최소 비교 과정을 다시 한번 거친다. 즉, 첫번째 입력 정보에서 제2행에 있던 입력 데이터는 첫번째 비교 과정에 의해서 제2행 인덱스 저장 모듈 에 저장되어 있기 때문에, 도 9에 도시된 바와 같이 첫번째 입력 정보에서 유효한 데이터는 제1행에 있는 C4(Io) 데이터만이 남게 되며, 가장 작은 열 또한 제1행에 있는 C4(Io) 데이터가 선택된다. 따라서, 제0확장 행 정보에는 도면에 도시된 바와 제4열에 인덱스 정보 C4이 추가적으로 생성되며, 이와 동 시에 C4에 대응되는 데이터 또한 인덱스 저장 모듈에 저장된다. 구체적으로, C4는 첫번째 입력 정보에서 2번째 행에 위치하였기 때문에 이는 커널의 제1번째 열과 컨볼 루션 연산을 수행함을 의미한다. 따라서, 도 9에 도시된 바와 같이, 제1행 인덱스 저장 모듈에는 C4에 대 응되는 유효 데이터의 인덱스 정보인 Io이 저장되고, 제0행 인덱스 저장 모듈과 제2행 인덱스 저장 모듈 에는 invalid 값으로 'x'가 저장이 된다. 도 8과 도 9를 통해 제0행에 대한 제0행 확장 행 정보가 생성되면, 정보 생성부는 제1행에 대한 제1행 확장 행 정보를 생성한다. 도 10 내지 도 13은 일 실시예에 따른 행 정보 생성 모듈이 출력 데이터의 제1행에 대응되는 제1행 확장 행 정 보를 생성하는 방법을 설명하기 위한 도면이다. 도 10 내지 도 13을 참고하여 설명하면, 제1행 확장 행 정보에 대응되어 정보 생성부에 입력되는 두번 째 입력 정보는, 제0행 수집 데이터 저장 모듈과 제1행 수집 데이터 저장 모듈 및 제2행 수집 데 이터 저장 모듈에 2번째로 저장되어 있는 데이터들이 두번째 입력 정보가 된다. (도 6 참조) 정보 생성부에 두번째 입력 정보가 입력 되면, 두번째 입력 정보에서 가장 작은 열에 있는 입력 데이터들을 순차적으로 찾는데, 두번째 입력 정보에서 가장 작은 열에 배치된 데이터는 제1행에 있는 I1이므로 제1행 확장 행 정보에는 도면에 도시된 바와 제1열에 인덱스 정보인 C1이 생성된다. 그리고 이와 동시에 C1에 대응되는 데이터에 대한 정보 또한 인덱스 저장 모듈에 저장되는데, C1이 입력 데이터 에서 제1행에 위치하고 있으므로, 이는 커널의 2번째 행과 컨볼루션 연산을 수행함을 의미한다. 따라서, 도 10에 도시된 바와 같이, 제1행 인덱스 저장 모듈에는 C1에 대응되는 유효 데이터의 인덱스 정보인 I1이 저 장되며, 제0행 인덱스 저장 모듈과 제2행 인덱스 저장 모듈에는 invalid 값으로 'x'가 저장이 된다. 두번째 입력 정보에서 첫번째 최소 비교가 완료되면, 정보 생성부는 두번째 입력 정보에서 남아 있는 정보에서 최소 비교 과정을 다시 한번 거친다. 즉, 두번째 입력 정보에서 제1행에 있던 데이터는 첫번째 비교 과정에 의해서 제1행 인덱스 저장 모듈(23 2)에 저장되어 있기 때문에, 도 11에 도시된 바와 같이 두번째 입력 정보에서 유효한 데이터는 제0행과 제2 행에 있는 데이터만이 남게 된다. 그리고 여기서 입력 데이터 중에서 가장 작은 열에 위치하고 있는 데이터로는 입력 데이터에서 제2열에 있는 C2(I2) 데이터가 된다. 따라서, 제1행 확장 행 정보에는 도면에 도시된 바와 제2열에 인덱스 정보 C2가 추가적으로 생성되며, 이와 동시에 C2에 대응되는 데이터 또한 인덱스 저장 모듈에 저장된다. 구체적으로, C2는 두번째 입력 정보에서 3번째 행에 위치하였기 때문에 이는 커널의 제2번째 열과 컨볼 루션 연산을 수행함을 의미한다. 따라서, 도 11에 도시된 바와 같이, 제2행 인덱스 저장 모듈에는 C3에 대 응되는 유효 데이터의 인덱스 정보인 I2가 저장되고, 제1행 인덱스 저장 모듈과 제0행 인덱스 저장 모듈 에는 invalid 값으로 'x'가 저장이 된다. 두번째 입력 정보에서 두번째 최소 비교가 완료되면, 정보 생성부는 두번째 입력 정보에서 남아 있는 정보에서 최소 비교 과정을 다시 한번 거친다. 즉, 두번째 입력 정보에서 제1행 및 제2행에서 첫번째로 있던 데이터는 첫번째와 두번째 비교 과정에 의해 서 각각 인덱스 저장 모듈에 저장되었기 때문에, 도 12에 도시된 바와 같이 두번째 입력 정보에서 유효한 데이터는 제0행과 제2행에 있는 데이터만이 남게 된다. 그리고 이 데이터들 중 입력 데이터에서 가장 작은 열에 위치하는 데이터는 제3열에 있는 C3(I3) 데이터가 된다. 따라서, 제1행 확장 행 정보에는 도 12 도시된 바와 제3열에 인덱스 정보 C3가 추가적으로 생성되며, 이와 동시에 C3에 대응되는 데이터 또한 인덱스 저장 모듈에 저장된다. 구체적으로, C3는 입력 데이터에서 3번째 행에 위치하였기 때문에 이는 커널의 제2번째 행과 컨볼루션 연산 을 수행함을 의미한다. 따라서, 도 12에 도시된 바와 같이, 제2행 인덱스 저장 모듈에는 C3에 대응되는 유 효 데이터의 인덱스 정보인 I3가 'I2' 다음으로 순차적으로 저장되며, 제0행 인덱스 저장 모듈과 제1행 인 덱스 저장 모듈에는 invalid 값으로 'x'가 저장이 된다. 두번째 입력 정보에서 세번째 최소 비교가 완료되면, 정보 생성부는 두번째 입력 정보에서 남아 있는 정보에서 최소 비교 과정을 다시 한번 거친다. 즉, 두번째 입력 정보에서 제1행 및 제2행에 있던 데이터는 첫번째, 두번째 및 세번째 비교 과정에 의해서 각각 인덱스 저장 모듈에 저장되었기 때문에, 도 13에 도시된 바와 같이 두번째 입력 정보에서 유효한 데이 터는 제0행에 있는 데이터만이 남게 된다. 따라서, 입력 데이터에서 제4열에 있는 C4(I0) 데이터가 선택된 다. 따라서, 제1행 확장 행 정보에는 도면에 도시된 바와 제4열에 인덱스 정보 C4가 추가적으로 생성되며, 이와 동시에 C4에 대응되는 데이터 또한 인덱스 저장 모듈에 저장된다. 구체적으로, C4는 입력 데이터에서 1번째 행에 위치하였기 때문에 이는 커널의 제0번째 행과 컨볼루션 연산 을 수행함을 의미한다. 따라서, 도 13에 도시된 바와 같이, 제0행 인덱스 저장 모듈에는 C4에 대응되는 유 효 데이터의 인덱스 정보인 Io이 저장되며, 제1행 인덱스 저장 모듈과 제2행 인덱스 저장 모듈에는 invalid 값으로 'x'가 저장이 된다. 도 10 내지 도 13를 통해 출력 데이터의 제1행에 대한 제1행 확장 행 정보가 생성되면, 정보 생성부는 출력 데이터의 제2행에 대한 제2행 확장 행 정보를 생성한다. 도 14 내지 도 16은 일 실시예에 따른 행 정보 생성 모듈이 출력 데이터의 제2행에 대응되는 제2행 확장 행 정 보를 생성하는 방법을 설명하기 위한 도면이다. 제2행 확장 행 정보를 생성하는 원리는 앞서 설명한 제0행 확장 행 정보 및 제1행 확장 행 정보를 생성하는 원리와 동일한 바, 구체적인 원리 설명은 생략하고, 도면으로 설명을 대신하도록 한다. 도 17 내지 도 26은 본 발명에 따른 컨볼루션 연산 모듈이 컨볼루션 연산을 함에 있어서 필요한 규칙(rule)을 생성하는 방법을 설명하기 위한 도면으로서, 도 17 내지 도 18은 컨볼루션 연산 모듈이 출력 데이터의 제0행의 출력 정보와 관련된 인덱스 규칙을 인풋 인덱스 별로 생성하는 방법을 나타낸 도면이다. 컨볼루션 연산 모듈은 행 정보 생성 모듈이 입력 데이터에 대해 생성한 확장 행(merge row) 정보 와, 열 별로 순차적으로 생성하고 저장해 놓은 인풋 인덱스 정보 및 커널의 크기 정보를 기초로, 컨볼루션 연산을 수행하는데 필요한 인덱스 정보(입력 데이터의 어느 유효 데이터와 커널의 몇 열 몇 행이 컨볼루션 연산 을 수행하여 출력 데이터의 몇 행 몇 열에 결과가 생성되는지에 대한 정보)를 규칙 정보로 생성하는 모듈이다.도면에 도시된 바와 같이 커널 입력 데이터의 제0행을 기준으로 스트라이딩을 하는 경우 도 8과 도 9에 서 살펴본 바와 같이 인풋 인덱스는 총 2개의 세트(X, X, I1 / X, I0, X)로 나누어 생성이 되므로, 출력 데이터 의 제0행은 상기 2개의 인풋 인덱스와 연산이 이루어진 데이터가 출력이 된다. 도 17이 첫번째 인풋 인덱스(X, X,I1)를 기준으로 컨볼루션 연산을 수행하기 위한 규칙을 생성하는 과정을 설명한 도면이며, 도 18이 두번째 인 풋 인덱스(X, I0, X)를 기준으로 컨볼루션 연산을 수행하기 위한 규칙을 생성하는 과정을 설명한 도면이다. 도 17을 참조하여, 제0인풋 인덱스(X,X,I1)에 대해 생성되는 연산 규칙을 설명하면, 입력 데이터에 대해 커 널이 제0행을 기준으로 스트라이딩을 하는 경우, 컨볼루션 연산이 가장 먼저 수행되는 열은 제0행 확장 행 정보 에서 데이터가 가장 왼쪽에 위치하는 제1열인 C1에 해당한다. 따라서, 제0인풋 인덱스(X,X,I1)와 커널이 컨볼루션 연산을 수행하여 출력 되는 출력 데이터의 기준 아웃풋 인 덱스는 C1에 대응되는 O1이 된다. 따라서, 3x3 커널이 C1과 컨볼루션 연산을 하는 경우, 3X3 커널의 특성상 아 웃풋 인덱스는 기준 아웃풋 인덱스인O1을 기준으로 좌우 하나씩 확장되어 O2, O1, O0가 된다. 즉, O2, O1, O0에 는 제0인풋 인풋 인덱스(X,X,I1)와 커널이 연산을 수행한 결과가 출력이 된다. 이를, 도식화하여 표현하면, 도 17에 도시된 바와 같이 기준 아웃풋 인덱스인 O1으로 인해 아웃풋 인덱스는 O2, O1, O0로 확장이 되며, 3X3 커널의 경우 커널 인덱스는 총 9개(W-1,-1 / W-1,0 / W-1,1 / W0,-1 / W0,0 / W0,1 / W1,-1/ W1,0/ W1,1), 이므로 W-1,-1, W0,-1, W1,-1 과 연관된 아웃풋 인덱스는 O2가 되며, W-1,0, W0,0, W1,0 과 연관된 아웃풋 인덱 스는 O1이 되며, W-1,1, W0,1, W1,1 과 연관된 아웃풋 인덱스는 O0가 된다. 즉, C1으로 생성되는 아웃풋 인덱스는 O0~O2이므로, O2는 C1에 해당하는 인풋 인덱스와 WX,-1과 연관된 커널 인 덱스 정보가 쌍으로 생성되고(X는 -1, 0, 1 중 하나), O1는 C1에 해당하는 인풋 인덱스와 WX,0과 연관된 커널 인 덱스 정보가 쌍으로 생성되며, O0은 C1에 해당하는 인풋 인덱스와 WX, 1과 연관된 커널 인덱스 정보가 쌍으로 생 성된다. 그리고, C1에 대응되는 제0인풋 인덱스는 (X,X,I1)이므로, 제0행에 해당하는 인풋 인덱스는 X, 제1행에 해당하 는 인풋 인덱스 X, 제2행에 해당하는 인풋 인덱스는 I1이 된다. 따라서, 제0에 해당하는 인풋 인덱스 X는 커널 W-1,-1, W-1,0 W-1,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제1행에 해당하는 인풋 인덱스 X는 커널 W0,-1 W0,0, W0,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제2행에 해당하는 인풋 인덱스 I1은 커널 W1,-1, W1,0, W1,1 과 연관된 인풋 인덱스에 순차적으로 입력된다. 다만, 인풋 인덱스 X는 아무런 데이터가 없는 데이터를 의미하는 것이므로, 연산 자체를 할 필요가 없다. 따라 서, 커널 W-1,-1, W-1,0, W-1,1 과 커널 W0,-1 W0,0, W0,1 에 대해서는 연산이 이루어지지 않아 규칙 정보를 생성할 필요가 없게 되므로, 실질적으로 연산이 이루어지는 커널의 인덱스들은 W1,-1, W1,0 W1,1 이 된다. 따라서, 제0인풋 인덱스(X,X,I1)와 커널이 실제로 컨볼루션 연산을 수행하는 인덱스들은 도면에서 인덱스 박스 로 표시한 부분만 해당하며, 그리고 이를 간단히 도식화하면 도면 왼쪽에 표시된 연산 박스와 같이 표 시될 수 있다. 이렇게 제0인풋 인덱스에 대한 규칙 정보가 생성되면, 다음 단계로 제1인풋 인덱스에 대한 규칙 정보를 생성한다. 도 18을 참조하여, 제1인풋 인덱스(X,I0,X)에 대해 생성되는 연산 규칙을 설명하면, 인풋 인덱스에서 제0인풋 인덱스(X,X,I1)는 연산이 진행 되었으므로, 마지막 남은 제1인풋 인덱스(X,I0,X)만이 기준 아웃풋 인덱스인 O4 을 기준으로 커널과 연산을 수행하게 된다. 입력 데이터에서 커널이 제0행을 기준으로 스트라이딩을 하는 경우 두 번째로 컨볼루션 연산 수행하는 열은 제0확장 행 정보에서 두번째 작은 열에 해당하는 제4열인 C4가 된다. 따라서, 제1인풋 인덱스(X,I0, X)와 커널이 컨볼루션 연산을 수행하여 출력 데이터가 출력되는 기준 인덱스는 C4에 대응되는 O4가 되며, 3x3 커널이 C4와 컨볼루션 연산을 하게 되면, 3X3 커널의 특성상 아웃풋 인덱스는 O4을 기준으로 좌우 하나씩 확장 되어 O5, O4, O3가 된다. 이를, 도식화하여 표현하면, 도 18에 도시된 바와 같이 기준 아웃풋인 인덱스가 O4인 경우, 아웃풋 인덱스는 O5, O4, O3로 확장이 되며, 3X3 커널의 경우 커널 인덱스는 총 9개(W-1,-1 / W-1,0 / W-1,1 / W0,-1 / W0,0 / W0,1 / W1,- 1/ W1,0/ W1,1), 이므로 W-1,-1, W0,-1, W1,-1 과 연관된 아웃풋 인덱스는 O5가 되며, W-1,0, W0,0, W1,0 과 연관된 아웃풋 인덱스는 O4이 되며, W-1,1, W0,1, W1,1 과 연관된 아웃풋 인덱스는 O3가 된다. 다만, O4를 기준으로 행으로 확대된O5는 인덱스 자체가 존재하지 않는 인덱스이므로, 결론적으로는O3 와 O4 에 만 제1인풋 인덱스(X,I0,X)와 커널이 연산을 수행한 결과가 출력이 된다. 즉, C4로 생성되는 아웃풋 인덱스는 O3~O4이므로, O4는 C4에 해당하는 인풋 인덱스와 WX,0과 연관된 커널 인덱스 정보가 쌍으로 생성되며, O3은 C4에 해당하는 인풋 인덱스와 WX,1과 연관된 커널 인덱스 정보가 쌍으로 생성된다. 그리고, C4에 대응되는 제1인풋 인덱스는 (X,I0,X)이므로, 제0행에 해당하는 인풋 인덱스는 X, 제1행에 해당하 는 인풋 인덱스는 I0, 제2행에 해당하는 인풋 인덱스는 X가 된다. 따라서, 제0행에 해당하는 인풋 인덱스 X는 커널 W-1,-1, W-1,0 W-1,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제1행에 해당하는 인풋 인덱스 I1은 커널 W0,-1 W0,0, W0,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제2행에 해당하는 인풋 인덱스 X는 커널 W1,-1, W1,0, W1,1과 연관된 인풋 인덱스에 순차적으로 입력된다. 다만, 인풋 인덱스 X는 아무런 데이터가 없는 데이터를 의미하는 것이므로, 연산 자체를 할 필요가 없다. 따라 서, 커널 W-1,-1, W-1,0 W-1,1 와 W1,-1, W1,0, W1,1에 대해서는 연산이 이루어지지 않아 규칙 정보를 생성할 필요가 없게 되므로, 실질적으로 연산이 이루어지는 커널의 인덱스들은 W0,-1 W0,0 W0,1이 되는데, 앞서 살펴본 바와 같이 O5는 존재하지 않은 아웃풋 인덱스이므로, O5에 대해서는 연산을 수행할 필요가 없다. 따라서, 제1인풋 인덱스(X,I0,X)와 커널이 실제로 컨볼루션 연산을 수행하는 인덱스들은 도면에서 인덱스 박스 로 표시한 부분만 해당하며, 그리고 이를 간단히 도식화하면 도면 왼쪽에 표시된 연산 박스와 같이 표 시될 수 있으며, 이러한 방법을 통해 출력 데이터의 제0행의 출력 정보와 관련된 규칙 생성은 마무리된다. 도 19 내지 도 22는 출력 데이터의 제1행의 출력 정보와 관련된 인덱스 규칙을 인풋 인덱스 별로 생성하는 방법 을 나타낸 도면이다. 도 19를 참조하여, 출력 데이터의 제1행과 관련된 제0인풋 인덱스(X,I1,X)에 대해 생성되는 연산 규칙을 설명하 면, 입력 데이터에 대해 커널이 제1행을 기준으로 스타라이딩을 진행하는 경우, 커널과 연산을 제 일 먼저 수행하는 열은 제1확장 행 정보에서 가장 왼쪽에 있는 제1열인 C1이 된다. 따라서, 제0인풋 인덱스(X,I1,X)와 커널이 컨볼루션 연산을 수행하여 출력 데이터가 출력되는 출력 데이터의 기 준 인덱스는 C1에 대응되는 O6이 된다. 따라서, 3x3 커널이 C1과 컨볼루션 연산을 하는 경우, 3X3 커널의 특성 상 아웃풋 인덱스들은 기준 아웃풋 인덱스인O6을 기준으로 좌우 하나씩 확장되어 O7, O6, O5가 된다. 즉, O7, O6, O5에는 제1인풋 인풋 인덱스(X,I1,X)와 커널이 연산을 수행한 결과가 출력이 된다. 이를, 도식화하여 표현하면, 도 19에 도시된 바와 같이 중심 아웃풋인 인덱스가 O6로 입력이 되면, 아웃풋 인덱 스는 O7, O6, O5가 되며, 3X3 커널의 경우 커널 인덱스는 총 9개(W-1,-1 / W-1,0 / W-1,1 / W0,-1 / W0,0 / W0,1 / W1,-1/ W1,0/ W1,1), 이므로 W-1,-1, W0,-1, W1,-1 과 연관된 아웃풋 인덱스는 O7이 되며, W-1,0, W0,0, W1,0 과 연관된 아웃풋 인덱 스는 O6이 되며, W-1,1, W0,1, W1,1 과 연관된 아웃풋 인덱스는 O5가 된다. 즉, C1을 기준으로 생성되는 아웃풋 인덱스는 O5~O7이므로, O7은 C1에 해당하는 인풋 인덱스와 WX,-1과 연관된 커널 인덱스 정보가 쌍으로 생성되고(X는 -1, 0, 1 중 하나), O6은 C1에 해당하는 인풋 인덱스와 WX,0과 연관된 커널 인덱스 정보가 쌍으로 생성되며, O5는 C1에 해당하는 인풋 인덱스와 WX,1과 연관된 커널 인덱스 정보가 쌍 으로 생성된다. 그리고, C1에 대응되는 제0인풋 인덱스는 (X,I1,X)이므로 제0행에 해당하는 인풋 인덱스는 X, 제1행에 해당하는 인풋 인덱스는 I1, 제2행에 해당하는 인풋 인덱스는 X가 된다. 따라서, 제0행에 해당하는 인풋 인덱스 X는 커널 W-1,-1, W-1,0 W-1,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제1행에 해당하는 인풋 인덱스 I1은 커널 W0,-1 W0,0, W0,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제2행에 해당하는 인풋 인덱스 X는 커널 W1,-1, W1,0, W1,1과 연관된 인풋 인덱스에 순차적으로 입력된다.다만, 인풋 인덱스 X는 아무런 데이터가 없는 데이터를 의미하는 것이므로, 연산 자체를 할 필요가 없다. 따라 서, 커널 W-1,-1, W-1,0 W-1,1 과 커널 W1,-1, W1,0, W1,1에 대해서는 연산이 이루어지지 않아 규칙 정보를 생성할 필요가 없게 되므로, 실질적으로 연산이 이루어지는 커널의 인덱스들은 W0,-1 W0,0, W0,1 이 된다. 따라서, 제0인풋 인덱스(X,I1,X)와 커널이 실제로 컨볼루션 연산을 수행하는 인덱스들은 도면에서 인덱스 박스 로 표시한 부분만 해당하며, 이를 간단히 도식화하면 도면 왼쪽에 표시된 연산 박스와 같이 표시될 수 있다. 이렇게 제0인풋 인덱스에 대한 규칙 정보가 생성되면, 다음 단계로 제1인풋 인덱스에 대한 규칙 정보를 생성한 다. 도 20을 참조하여, 제1인풋 인덱스(X,X,I2)에 대해 생성되는 연산 규칙을 설명하면, 인풋 인덱스에서 제0인풋 인덱스(X,I1,X)는 연산이 진행 되었으므로, 그 다음 인풋 인덱스인 제1인풋 인덱스(X,X,I2)가 기준 아웃풋 인덱 스인 O7을 기준으로 커널과 연산을 수행하게 된다. 입력 데이터에 대해 커널이 제1행을 기준으로 스트라이딩을 하는 경우, 컨볼루션 연산을 두 번째로 수 행하는 열은 제1행 확장 행 정보에서 두번째로 작은 열인 C2가 된다. 따라서, 제1인풋 인덱스(X,X,I2)와 커 널이 컨볼루션 연산을 수행하여 출력 데이터가 출력되는 기준 아웃풋 인덱스는 C2에 대응되는 O7가 된다. 따라 서, 3x3 커널이 C2와 컨볼루션 연산을 하게 되면, 3X3 커널의 특성상 아웃풋 인덱스는 O7을 기준으로 좌우 하나 씩 확장되어 O8, O7, O6이 된다. 즉, C2로 생성되는 아웃풋 인덱스는 O6~O8이므로, O8은 C2에 해당하는 인풋 인덱스와 WX,-1과 연관된 커널 인덱 스 정보가 쌍으로 생성되며, O7은 C2에 해당하는 인풋 인덱스와 WX,0과 연관된 커널 인덱스 정보가 쌍으로 생성 되며, O6은 C2에 해당하는 인풋 인덱스와 WX,1과 연관된 커널 인덱스 정보가 쌍으로 생성된다. 그리고, C2에 대응되는 제2인풋 인덱스는 (X,X,I2)이므로 제0행에 해당하는 인풋 인덱스는 X, 제1행에 해당하는 인풋 인덱스는 X, 제2행에 해당하는 인풋 인덱스는 I2가 된다. 따라서, 제0행에 해당하는 인풋 인덱스 X는 커널 W-1,-1, W-1,0 W-1,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제1행에 해당하는 인풋 인덱스 X는 커널 W0,-1 W0,0, W0,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제2행에 해당하는 인풋 인덱스 I2는 커널 W1,-1, W1,0, W1,1과 연관된 인풋 인덱스에 순차적으로 입력된다. 다만, 인풋 인덱스 X는 아무런 데이터가 없는 데이터를 의미하는 것이므로, 앞서 살펴본 바와 같이 연산 자체가 이루어지지 않아, 실질적으로 연산이 이루어지는 커널의 인덱스들은 W1,-1, W1,0, W1,1이 된다. 따라서, 제2인풋 인 덱스(X,X,I2)와 커널이 실제로 컨볼루션 연산을 수행하는 인덱스들은 도면에서 인덱스 박스로 표시한 부분 만 해당하며, 그리고 이를 간단히 도식화하면 도면 왼쪽에 표시된 연산 박스와 같이 표시될 수 있다. 이렇게 제1인풋 인덱스에 대한 규칙 정보가 생성되면, 다음 단계로 제2인풋 인덱스에 대한 규칙 정보를 생성한 다. 도 21을 참조하여, 제2인풋 인덱스(X,X,I3)에 대해 생성되는 연산 규칙을 설명하면, 인풋 인덱스에서 제0인풋 인덱스(X,I1,X)와 제1인풋 인덱스(X,X,I2)는 연산이 수행 되었으므로, 다음 인풋 인덱스인 제2인풋 인덱스 (X,X,I3)가 기준 아웃풋 인덱스인 O8을 기준으로 커널과 연산을 수행하게 된다. 입력 데이터에 대해 커널이 제2행을 기준으로 스트라이딩을 하는 경우, 컨볼루션 연산을 세 번째로 수 행하는 열은 제2확장 행 정보에서 세번째로 작은 열인 C3가 된다. 따라서, 제2인풋 인덱스(X,X,I3)와 커널 이 컨볼루션 연산을 수행하여 출력 데이터가 출력되는 기준 아웃풋 인덱스는 C3에 대응되는 O8이 된다. 따라서, 3x3 커널이 C3와 컨볼루션 연산을 하게 되면, 3X3 커널의 특성상 아웃풋 인덱스는O8을 기준으로 좌우 하나씩 확 장되어 O9, O8, O7이 된다. 즉, C3에 대응되어 생성되는 아웃풋 인덱스는 O7~O9이므로, O9는 C2에 해당하는 인풋 인덱스와 WX,-1과 연관된 커널 인덱스 정보가 쌍으로 생성되며, O8은 C2에 해당하는 인풋 인덱스와 WX,0과 연관된 커널 인덱스 정보가 쌍 으로 생성되며, O7은 C2에 해당하는 인풋 인덱스와 WX,1과 연관된 커널 인덱스 정보가 쌍으로 생성된다. 그리고, C3에 대응되는 제2인풋 인덱스는 (X,X,I3)이므로 제0행에 해당하는 인풋 인덱스는 X, 제1행에 해당하는 인풋 인덱스는 X, 제2행에 해당하는 인풋 인덱스는 I3가 된다. 따라서, 제0행에 해당하는 인풋 인덱스 X는 커널 W-1,-1, W-1,0 W-1,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제1행에 해당하는 인풋 인덱스 X는 커널 W0,-1 W0,0, W0,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제2행에 해당하는 인풋 인덱스 I3는 커널 W1,-1, W1,0, W1,1 과 연관된 인풋 인덱스에 순차적으로 입력된다 다만, 인풋 인덱스 X는 아무런 데이터가 없는 데이터를 의미하는 것이므로, 앞서 살펴본 바와 같이 연산 자체가 이루어지지 않아, 실질적으로 연산이 이루어지는 커널의 인덱스들은 커널 W1,-1, W1,0, W1,1이 된다. 따라서, 제2인풋 인덱스(X,X,I3)와 커널이 실제로 컨볼루션 연산을 수행하는 인덱스들은 도면에서 인덱스 박스 로 표시한 부분만 해당하며, 그리고 이를 간단히 도식화하면 도면 왼쪽에 표시된 연산 박스와 같이 표 시될 수 있다. 이렇게 제2인풋 인덱스에 대한 규칙 정보가 생성되면, 다음 단계로 제3인풋 인덱스에 대한 규칙 정보를 생성한 다. 도 22를 참조하여, 제3인풋 인덱스(I0,X,X)에 대해 생성되는 연산 규칙을 설명하면, 인풋 인덱스에서 제0인풋 인덱스(X,I1,X)와 제1인풋 인덱스(X,X,I2) 및 제2인풋 인덱스(X,X,I3)는 연산이 수행 되었으므로, 다음 인풋 인 덱스인 제3인풋 인덱스(I0,X,X,)가 기준 아웃풋 인덱스인 O9을 기준으로 커널과 연산을 수행하게 된다. 입력 데이터에 대해 커널이 제1행을 기준으로 스트라이딩을 하는 경우, 컨볼루션 연산을 네 번째로 수 행하는 열은 제2확장 행 정보에서 네번째로 작은 열인 C4가 된다. 따라서, 제3인풋 인덱스(I0,X,X)와 커널이 컨볼루션 연산을 수행하여 출력 데이터가 출력되는 기준 아웃풋 인덱 스는 C4에 대응되는 O9가 된다. 따라서, 3x3 커널이 C4와 컨볼루션 연산을 하게 되면, 3X3 커널의 특성상 아웃 풋 인덱스는 O9를 기준으로 좌우 하나씩 확장되어 O10, O9, O8이 된다. 즉, C4에 대응되어 생성되는 아웃풋 인덱스는 O8~O10이므로, O10은 C4에 해당하는 인풋 인덱스와 WX,-1과 연관된 커널 인덱스 정보가 쌍으로 생성되며, O9는 C4에 해당하는 인풋 인덱스와 WX,0과 연관된 커널 인덱스 정보가 쌍 으로 생성되며, O8은 C2에 해당하는 인풋 인덱스와 WX,1과 연관된 커널 인덱스 정보가 쌍으로 생성된다. 그리고, C4에 대응되는 제3인풋 인덱스는 (I0,X,X)이므로 제0행에 해당하는 인풋 인덱스는 I0, 제1행에 해당하 는 인풋 인덱스는 X, 제2행에 해당하는 인풋 인덱스는 X가 된다. 따라서, 제0행에 해당하는 인풋 인덱스 I0는 커널 W-1,-1, W-1,0, W-1,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제1행에 해당하는 인풋 인덱스 X는 커널 W0,-1 W0,0, W0,1 과 연관된 인풋 인덱스에 순차적으로 입력되며, 제2행에 해당하는 인풋 인덱스 X는 커널 W1,-1, W1,0, W1,1과 연관된 인풋 인덱스에 순차적으로 입력된다. 다만, 인풋 인덱스 X는 아무런 데이터가 없는 데이터를 의미하는 것이므로, 앞서 살펴본 바와 같이 연산 자체가 이루어지지 않아, 실질적으로 연산이 이루어지는 커널의 인덱스들은 W-1,0, W-1,1 이 되며, 3X3 커널의 특성상 O9에 서 행으로 이어지는 O10 행렬은 존재하지 않으므로, 아웃풋 인덱스 O10에 대해서도 연산이 이루어지지 않는다. 따라서, 제3인풋 인덱스 (I0,X,X)와 커널이 실제로 컨볼루션 연산을 수행하는 인덱스들은 도면에서 인덱스 박스 로 표시한 부분만 해당하며, 그리고 이를 간단히 도식화하면 도면 왼쪽에 표시된 연산 박스와 같이 표 시될 수 있다. 도 19 내지 도 22에서와 같이 출력 데이터의 제1행에 대한 연산 규칙이 생성되면, 컨볼루션 연산 모듈은 출력 데이터의 제2행에 대한 연산 규칙 및 제3행에 대한 연산 규칙을 생성하고, 생성된 규칙에 따라 컨볼루션 연산을 진행한다. 도 23 내지 도 25는 본 발명의 일 실시예에 따른 컨볼루션 연산 모듈이 출력 데이터의 제2행에 대한 연산 규칙 을 생성하는 과정을 설명하기 위한 도면이다. 본 발명에 따른 컨볼루션 연산 모듈이 제2행에 대한 연산 규칙을 생성하는 원리는 앞서 설명한 제0행에 대 한 연산 규칙 및 제1행에 대한 연산 규칙을 생성하는 원리와 동일한바, 구체적인 설명은 생략하고, 설명은 도면 으로 대체하도록 한다. 도 26은 종래 기술에 따른 컨볼루션 연산과 본 발명에 따른 컨볼루션 연산의 결과를 비교한 도면이다. 도 26을 참고하면, 도 26 에 도시된 바와 같이 동일한 결과를 산출함에 있어서 종래 기술에 따라 컨볼루 션 연산을 수행하는 경우 프로세서가 디램에 접근해야 하는 횟수가 959,224회가 필요하였으나, 본 발명에 따를 경우 프로세서가 디램에 접근하는 횟수가 49,810회로서 종래 기술에 비해 디램에 대한 접근이 19배 이상 줄어드 는 것을 알 수 있다. 이로 인해, 본 발명에 따른 프로세서는 종래 기술에 따른 컨볼루션 연산보다 더 효율적으 로 빠르게 컨볼루션 연산을 수행할 수 있는 것을 알 수 있다. 지금까지 도면을 통해 본 발명의 구성 및 프로세스에 대해 자세히 알아보았다. 일 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 방법 및 장치는 희소 데이터 기반의 컨볼루션 연산을 수행함에 있어서, 입력 데이터의 위치 및 출력 데이터의 위치를 고려하여 규칙을 생성하고, 이 를 기초로 연산을 수행하기 때문에, 입력된 데이터 중 유효 데이터에 대해서만 컨볼루션 연산을 수행하므로, 불 필요한 연산을 줄 일 수 있어 종래 기술보다 빠르게 컨볼루션 연산을 수행할 수 있는 장점이 존재한다. 또한, 컨불루션 연산의 경우 그 특성상 중첩되는 계산 과정이 많은데, 본 발명에 따른 컨볼루션 연산 방법은 종 래에 수집하였던 입력 데이터의 정보를 다음 연산에서 재사용하므로, 컨볼루션 연산 자체의 연산 속도를 빠르게 증가시킬 수 있는 장점이 존재한다. 또한, 이러한 특징으로 인해 3차원 공간에 존재하는 객체 인식의 속도를 증가시킬 수 있는바, 고차원 자율 주 행에 필수적인 고속 전방 장애물 인식을 효율적으로 수행할 수 있고, 빠르고 정확한 로봇 네비게이션을 위한 RGB-D 기반의 위치 추정도 효율적으로 수행할 수 있는 장점이 존재한다. 이상에서 설명된 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시예들에서 설명된 장치 및 구성요소는, 예를 들어, 프로세 서, 컨트롤러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨 터, FPA(field programmable array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 운영 체제 상에서 수행되는 하나 이상의 소 프트웨어 애플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명된 경"}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소(processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallel processor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 소프트웨어는 컴퓨터 프로그램(computer program), 코드(code), 명령(instruction), 또는 이들 중 하나 이상의 조합을 포함할 수 있으며, 원하는 대로 동작하도록 처리 장치를 구성하거나 독립적으로 또는 결합적으로 (collectively) 처리 장치를 명령할 수 있다. 소프트웨어 및/또는 데이터는, 처리 장치에 의하여 해석되거나 처 리 장치에 명령 또는 데이터를 제공하기 위하여, 어떤 유형의 기계, 구성요소(component), 물리적 장치, 가상 장치(virtual equipment), 컴퓨터 저장 매체 또는 장치에 구체화(embody)될 수 있다. 소프트웨어는 네트워크로 연결된 컴퓨터 시스템 상에 분산되어서, 분산된 방법으로 저장되거나 실행될 수도 있다. 소프트웨어 및 데이터 는 하나 이상의 컴퓨터 판독 가능 기록 매체에 저장될 수 있다. 실시예에 따른 방법은 다양한 컴퓨터 수단을 통하여 수행될 수 있는 프로그램 명령 형태로 구현되어 컴퓨터 판 독 가능 매체에 기록될 수 있다. 상기 컴퓨터 판독 가능 매체는 프로그램 명령, 데이터 파일, 데이터 구조 등을 단독으로 또는 조합하여 포함할 수 있다. 상기 매체에 기록되는 프로그램 명령은 실시예를 위하여 특별히 설계 되고 구성된 것들이거나 컴퓨터 소프트웨어 당업자에게 공지되어 사용 가능한 것일 수도 있다. 컴퓨터 판독 가 능 기록 매체의 예에는 하드 디스크, 플로피 디스크 및 자기 테이프와 같은 자기 매체(magnetic media), CD- ROM, DVD와 같은 광기록 매체(optical media), 플롭티컬 디스크(floptical disK)와 같은 자기-광 매체 (magneto-optical media), 및 롬(ROM), 램(RAM), 플래시 메모리 등과 같은 프로그램 명령을 저장하고 수행하도 록 특별히 구성된 하드웨어 장치가 포함된다. 프로그램 명령의 예에는 컴파일러에 의해 만들어지는 것과 같은 기계어 코드뿐만 아니라 인터프리터 등을 사용해서 컴퓨터에 의해서 실행될 수 있는 고급 언어 코드를 포함한다."}
{"patent_id": "10-2022-0182353", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이상과 같이 실시예들이 비록 한정된 실시예와 도면에 의해 설명되었으나, 해당 기술분야에서 통상의 지식을 가 진 자라면 상기의 기재로부터 다양한 수정 및 변형이 가능하다. 예를 들어, 설명된 기술들이 설명된 방법과 다른 순서로 수행되거나, 및/또는 설명된 시스템, 구조, 장치, 회로 등의 구성요소들이 설명된 방법과 다른 형태 로 결합 또는 조합되거나, 다른 구성요소 또는 균등물에 의하여 대치되거나 치환되더라도 적절한 결과가 달성될 수 있다. 그러므로, 다른 구현들, 다른 실시예들 및 특허청구범위와 균등한 것들도 후술하는 특허청구범위의 범 위에 속한다."}
{"patent_id": "10-2022-0182353", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 발명의 상세한 설명에서 인용되는 도면을 보다 충분히 이해하기 위하여 각 도면의 간단한 설명이 제공된다. 도 1은 종래 기술에 따라 희소 데이터 기반의 컨볼루션 연산을 수행하는 과정을 설명하기 위한 도면이다. 도 2는 본 발명의 일 실시예에 따른 인공신경망을 이용한 희소 데이터 기반의 컨볼루션 연산 장치의 일부 구성 요소를 도시한 블록도이다. 도 3은 본 발명의 일 실시예로서 입력 데이터의 일 예와 커널의 일 예를 도시한 도면이다. 도 4 내지 도 7은 본 발명의 일 실시예에 따라, 입력 데이터 수집 모듈이 입력 데이터에 대해 행 정보를 생성하 는 과정을 설명하기 위한 도면이다. 도 8과 도 9는 일 실시예에 따른 행 정보 생성 모듈이 출력 데이터의 제0행에 대응되는 제0행 확장 행 정보를 생성하는 방법을 설명하기 위한 도면이다. 도 10 내지 도 13은 일 실시예에 따른 행 정보 생성 모듈이 출력 데이터의 제1행에 대응되는 제1행 확장 행 정 보를 생성하는 방법을 설명하기 위한 도면이다. 도 14 내지 도 16은 일 실시예에 따른 행 정보 생성 모듈이 출력 데이터의 제2행에 대응되는 제2행 확장 행 정 보를 생성하는 방법을 설명하기 위한 도면이다. 도 17 내지 도 18은 일 실시예에 따른 컨볼루션 연산 모듈이 출력 데이터의 제0행의 출력 정보와 관련된 인덱스 규칙을 인풋 인덱스 별로 생성하는 방법을 나타낸 도면이다. 도 19 내지 도 22는 일 실시예에 따른 컨볼루션 연산 모듈이 출력 데이터의 제1행의 출력 정보와 관련된 인덱스 규칙을 인풋 인덱스 별로 생성하는 방법을 나타낸 도면이다. 도 23 내지 도 25는 일 실시예에 따른 컨볼루션 연산 모듈이 출력 데이터의 제2행에 대한 연산 규칙을 생성하는 과정을 설명하기 위한 도면이다. 도 26은 종래 기술에 따른 컨볼루션 연산과 본 발명에 따른 컨볼루션 연산의 결과를 비교한 도면이다."}
