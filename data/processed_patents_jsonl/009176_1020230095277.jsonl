{"patent_id": "10-2023-0095277", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0014762", "출원번호": "10-2023-0095277", "발명의 명칭": "적대적 공격 방법 및 장치", "출원인": "성균관대학교산학협력단", "발명자": "이지형"}}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "원본 소스 코드의 취약 위치들을 선택하는 단계;오픈 소스 코드 세트를 기초로 오픈 소스 코드들을 획득하는 단계;상기 오픈 소스 코드들의 비유사도를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계;상기 비유사 코드들 각각의 주의 점수(attention score)를 획득하는 단계;상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 스닙펫(snippet)을 추출하는 단계;및상기 적어도 하나의 스닙펫을 기초로 적대적 소스 코드를 생성하는 단계를 포함하는, 적대적 공격 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 오픈 소스 코드들 각각의 비유사성 점수를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계는,상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계;상기 유사도를 기초로 상기 오픈 소스 코드들 각각의 상기 비유사성 점수를 획득하는 단계; 및상기 비유사성 점수를 기초로 상기 오픈 소스들 가운데 일부를 상기 비유사 코드들로 선택하는 단계를포함하는, 적대적 공격 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계는,상기 오픈 소스 코드들 사이의 코사인 유사도를 획득하는 단계를 포함하는, 적대적 공격 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 상기 스닙펫을 추출하는 단계는,상기 비유사 코드들 각각으로부터 문장을 추출하는 단계; 및상기 추출한 문장들 가운데 상기 주의 점수가 가장 큰 상기 비유사 코드로부터 추출한 문장을 상기 스닙펫으로추출하는 단계를 포함하는, 적대적 공격 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 적어도 하나의 스닙펫을 기초로 상기 적대적 소스 코드를 생성하는 단계는,상기 적어도 하나의 스닙펫을 문자열 변수명에 삽입하여 데드 코드(dead code)를 생성하는 단계; 및상기 데드 코드를 상기 원본 소스 코드의 상기 취약 위치들에 삽입하여 상기 적대적 소스 코드를 생성하는 단계를 포함하는, 적대적 공격 방법.공개특허 10-2025-0014762-3-청구항 6 적대적 소스 코드 생성 장치에 있어서,프로세서(processor); 및상기 프로세서에 의해 수행되는 하나 이상의 명령이 저장된 메모리(memory)를 포함하고,상기 하나 이상의 명령은,원본 소스 코드의 취약 위치들을 선택하는 단계;오픈 소스 코드 세트를 기초로 오픈 소스 코드들을 획득하는 단계;상기 오픈 소스 코드들의 비유사도를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계;상기 비유사 코드들 각각의 주의 점수를 획득하는 단계;상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 스닙펫(snippet)을 추출하는 단계;및상기 적어도 하나의 스닙펫을 기초로 적대적 소스 코드를 생성하는 단계를 포함하는, 적대적 공격 장치."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 오픈 소스 코드들 각각의 비유사성 점수를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계는,상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계;상기 유사도를 기초로 상기 오픈 소스 코드들 각각의 상기 비유사성 점수를 획득하는 단계; 및상기 비유사성 점수를 기초로 상기 오픈 소스들 가운데 일부를 상기 비유사 코드들로 선택하는 단계를포함하는, 적대적 공격 장치."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계는,상기 오픈 소스 코드들 사이의 코사인 유사도를 획득하는 단계를 포함하는, 적대적 공격 장치."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제6항에 있어서,상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 상기 스닙펫을 추출하는 단계는,상기 비유사 코드들 각각으로부터 문장을 추출하는 단계; 및상기 추출한 문장들 가운데 상기 주의 점수가 가장 큰 상기 비유사 코드로부터 추출한 문장을 상기 스닙펫으로추출하는 단계를 포함하는, 적대적 공격 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제6항에 있어서,상기 적어도 하나의 스닙펫을 기초로 상기 적대적 소스 코드를 생성하는 단계는,상기 적어도 하나의 스닙펫을 문자열 변수명에 삽입하여 데드 코드(dead code)를 생성하는 단계; 및상기 데드 코드를 상기 원본 소스 코드의 상기 취약 위치들에 삽입하여 상기 적대적 소스 코드를 생성하는 단계를 포함하는, 적대적 공격 장치.공개특허 10-2025-0014762-4-청구항 11 원본 소스 코드 제공 장치로부터 원본 소스 코드를 제공받는 단계;적대적 소스 코드 생성 장치로부터 적대적 소스 코드를 제공받는 단계; 및 상기 원본 소스 코드 및 상기 적대적 소스 코드를 기초로 인공 지능 모델이 상기 적대적 소스 코드에 의해 공격당했는지 여부를 판단하는 단계를 포함하고,상기 적대적 소스 코드는,원본 소스 코드의 취약 위치들을 선택하는 단계, 오픈 소스 코드 세트를 기초로 오픈 소스 코드들을 획득하는단계, 상기 오픈 소스 코드들의 비유사도를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계, 상기 비유사 코드들 각각의 주의 점수를 획득하는 단계, 상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 스닙펫(snippet)을 추출하는 단계, 및 상기 적어도 하나의 스닙펫을 기초로 적대적 소스 코드를 생성하는 단계를 통해 생성되는, 적대적 공격 성능 분석 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 오픈 소스 코드들 각각의 비유사성 점수를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계는,상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계;상기 유사도를 기초로 상기 오픈 소스 코드들 각각의 상기 비유사성 점수를 획득하는 단계; 및상기 비유사성 점수를 기초로 상기 오픈 소스들 가운데 일부를 상기 비유사 코드들로 선택하는 단계를포함하는, 적대적 공격 성능 분석 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계는,상기 오픈 소스 코드들 사이의 코사인 유사도를 획득하는 단계를 포함하는, 적대적 공격 성능 분석 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제11항에 있어서,상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 상기 스닙펫을 추출하는 단계는,상기 비유사 코드들 각각으로부터 문장을 추출하는 단계; 및상기 추출한 문장들 가운데 상기 주의 점수가 가장 큰 상기 비유사 코드로부터 추출한 문장을 상기 스닙펫으로추출하는 단계를 포함하는, 적대적 공격 성능 분석 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서,상기 적어도 하나의 스닙펫을 기초로 상기 적대적 소스 코드를 생성하는 단계는,상기 적어도 하나의 스닙펫을 문자열 변수명에 삽입하여 데드 코드(dead code)를 생성하는 단계; 및상기 데드 코드를 상기 원본 소스 코드의 상기 취약 위치들에 삽입하여 상기 적대적 소스 코드를 생성하는 단계를 포함하는, 적대적 공격 성능 분석 방법."}
{"patent_id": "10-2023-0095277", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 1 항 내지 제 5 항 중에 어느 한 항의 방법을 컴퓨터에서 실행시키기 위한 프로그램을 기록한 컴퓨터로 읽을공개특허 10-2025-0014762-5-수 있는 기록매체."}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 적대적 공격 방법 및 장치에 관한 것으로, 본 발명의 일 실시예에 따른 적대적 공격 방법은 원본 소스 코드의 취약 위치들을 선택하는 단계, 오픈 소스 코드 세트를 기초로 오픈 소스 코드들을 획득하는 단계, 상기 오픈 소스 코드들의 비유사도를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계, 상기 비 유사 코드들 각각의 주의 점수를 획득하는 단계, 상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 스닙펫(snippet)을 추출하는 단계 및 상기 적어도 하나의 스닙펫을 기초로 적대적 소스 코드를 생성 하는 단계를 포함할 수 있다."}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 적대적 공격 방법 및 장치에 관한 것으로, 특히 프로그래밍 언어를 처리하는 인공지능 모델의 취약성 검증 및 강인성 향상을 위한 적대적 공격 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 다양한 분야에서 자동으로 소스코드를 처리/분석하여 소프트웨어 개발자들에게 도움이 되는 인공지능 기술 이 발전되고 있다. 이러한 인공지능 모델은 적대적 공격에 취약하다. 이러한 소스코드 처리 인공지능 모델에 대 한 기존 적대적 공격방법은 대부분 샘플링(Sampling) 기반의 변수명 변경일 수 있고, 이는 매우 많은 시도와 낮 은 공격 성공률로 비효율적일 수 있다. 특히 기존 방법은 소스코드의 중요한 요소인 컴파일 가능성을 완전히 보 존하지 못하는 문제가 있다."}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 목적은 블랙박스 상황에서 적대적 공격 기법으로 모델을 공격하는 경우 적은 시도로 높은 공격 성공 률을 보이는 블랙박스 적대적 공격 방법 및 장치를 제공하는 데 있다."}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 일 실시예에 따른 적대적 공격 방법은 원본 소스 코드의 취약 위치들을 선택하는 단계, 오픈 소스 코 드 세트를 기초로 오픈 소스 코드들을 획득하는 단계, 상기 오픈 소스 코드들의 비유사도를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계, 상기 비유사 코드들 각각의 주의 점수(attention score)를 획득하는 단계, 상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 스닙펫(snippet)을 추출하는 단계 및 상기 적어도 하나의 스닙펫을 기초로 적대적 소스 코드를 생성하는 단계를 포함할 수 있다. 상기 오픈 소스 코드들 각각의 비유사성 점수를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하 는 단계는, 상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계, 상기 유사도를 기초로 상기 오픈 소스 코드 들 각각의 상기 비유사성 점수를 획득하는 단계 및 상기 비유사성 점수를 기초로 상기 오픈 소스들 가운데 일부 를 상기 비유사 코드들로 선택하는 단계를 포함할 수 있다. 상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계는, 상기 오픈 소스 코드들 사이의 코사인 유사도를 획득 하는 단계를 포함할 수 있다. 상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 상기 스닙펫을 추출하는 단계는, 상 기 비유사 코드들 각각으로부터 문장을 추출하는 단계 및 상기 추출한 문장들 가운데 상기 주의 점수가 가장 큰 상기 비유사 코드로부터 추출한 문장을 상기 스닙펫으로 추출하는 단계를 포함할 수 있다. 상기 적어도 하나의 스닙펫을 기초로 상기 적대적 소스 코드를 생성하는 단계는, 상기 적어도 하나의 스닙펫을 문자열 변수명에 삽입하여 데드 코드(dead code)를 생성하는 단계 및 상기 데드 코드를 상기 원본 소스 코드의 상기 취약 위치들에 삽입하여 상기 적대적 소스 코드를 생성하는 단계를 포함할 수 있다. 본 발명의 일 실시예에 따른 적대적 소스 코드 생성 장치에 있어서, 프로세서(processor) 및 상기 프로세서에 의해 수행되는 하나 이상의 명령이 저장된 메모리(memory)를 포함하고, 상기 하나 이상의 명령은, 원본 소스 코 드의 취약 위치들을 선택하는 단계, 오픈 소스 코드 세트를 기초로 오픈 소스 코드들을 획득하는 단계, 상기 오 픈 소스 코드들의 비유사도를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계, 상기 비유 사 코드들 각각의 주의 점수를 획득하는 단계, 상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 스닙펫(snippet)을 추출하는 단계 및 상기 적어도 하나의 스닙펫을 기초로 적대적 소스 코드를 생성 하는 단계를 포함할 수 있다. 상기 오픈 소스 코드들 각각의 비유사성 점수를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하 는 단계는, 상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계, 상기 유사도를 기초로 상기 오픈 소스 코드들 각각의 상기 비유사성 점수를 획득하는 단계 및 상기 비유사성 점수를 기초로 상기 오픈 소스들 가운데 일부 를 상기 비유사 코드들로 선택하는 단계를 포함할 수 있다. 상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계는, 상기 오픈 소스 코드들 사이의 코사인 유사도를 획득 하는 단계를 포함할 수 있다. 상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 상기 스닙펫을 추출하는 단계는, 상 기 비유사 코드들 각각으로부터 문장을 추출하는 단계 및 상기 추출한 문장들 가운데 상기 주의 점수가 가장 큰 상기 비유사 코드로부터 추출한 문장을 상기 스닙펫으로 추출하는 단계를 포함할 수 있다. 상기 적어도 하나의 스닙펫을 기초로 상기 적대적 소스 코드를 생성하는 단계는, 상기 적어도 하나의 스닙펫을 문자열 변수명에 삽입하여 데드 코드(dead code)를 생성하는 단계 및 상기 데드 코드를 상기 원본 소스 코드의 상기 취약 위치들에 삽입하여 상기 적대적 소스 코드를 생성하는 단계를 포함할 수 있다. 본 발명의 일 실시예에 따른 적대적 공격 성능 분석 방법은 원본 소스 코드 제공 장치로부터 원본 소스 코드를 제공받는 단계, 적대적 소스 코드 생성 장치로부터 적대적 소스 코드를 제공받는 단계 및 상기 원본 소스 코드 및 상기 적대적 소스 코드를 기초로 인공 지능 모델이 상기 적대적 소스 코드에 의해 공격당했는지 여부를 판단 하는 단계를 포함하고, 상기 적대적 소스 코드는, 원본 소스 코드의 취약 위치들을 선택하는 단계, 오픈 소스 코드 세트를 기초로 오픈 소스 코드들을 획득하는 단계, 상기 오픈 소스 코드들의 비유사도를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하는 단계, 상기 비유사 코드들 각각의 주의 점수를 획득하는 단계, 상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 스닙펫(snippet)을 추출하는 단계, 및 상기 적어도 하나의 스닙펫을 기초로 적대적 소스 코드를 생성하는 단계를 통해 생성될 수 있다. 상기 오픈 소스 코드들 각각의 비유사성 점수를 기초로 상기 오픈 소스 코드들 가운데 비유사 코드들을 선택하 는 단계는, 상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계, 상기 유사도를 기초로 상기 오픈 소스 코드 들 각각의 상기 비유사성 점수를 획득하는 단계 및 상기 비유사성 점수를 기초로 상기 오픈 소스들 가운데 일부 를 상기 비유사 코드들로 선택하는 단계를 포함할 수 있다. 상기 오픈 소스 코드들 사이의 유사도를 획득하는 단계는, 상기 오픈 소스 코드들 사이의 코사인 유사도를 획득 하는 단계를 포함할 수 있다. 상기 주의 점수들을 기초로 상기 비유사 코드들 가운데 적어도 하나로부터 상기 스닙펫을 추출하는 단계는, 상 기 비유사 코드들 각각으로부터 문장을 추출하는 단계 및 상기 추출한 문장들 가운데 상기 주의 점수가 가장 큰 상기 비유사 코드로부터 추출한 문장을 상기 스닙펫으로 추출하는 단계를 포함할 수 있다. 상기 적어도 하나의 스닙펫을 기초로 상기 적대적 소스 코드를 생성하는 단계는, 상기 적어도 하나의 스닙펫을 문자열 변수명에 삽입하여 데드 코드(dead code)를 생성하는 단계 및 상기 데드 코드를 상기 원본 소스 코드의 상기 취약 위치들에 삽입하여 상기 적대적 소스 코드를 생성하는 단계를 포함할 수 있다."}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 따르면, 모델의 아무 정보도 사용하지 않는 블랙박스 상황에서 적대적 공격을 통해 실제 현실에서 서 비스되는 인공지능 모델의 취약성을 효과적으로 파악할 수 있다. 본 발명에 따르면, 적대적 공격의 결과물을 학습 데이터 셋에 추가하여 추가적인 적대적 학습을 진행함으로써, 해당 인공지능 모델의 강인성을 향상시킬 수 있다."}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 첨부된 도면을 참조하여 본 명세서에 개시된 실시예를 상세히 설명하되, 도면 부호에 관계없이 동일하거 나 유사한 구성요소는 동일한 참조 번호를 부여하고 이에 대한 중복되는 설명은 생략하기로 한다. 이하의 설명 에서 사용되는 구성요소에 대한 접미사 \"모듈\" 및 \"부\"는 명세서 작성의 용이함만이 고려되어 부여되거나 혼용 되는 것으로서, 그 자체로 서로 구별되는 의미 또는 역할을 갖는 것은 아니다. 또한, 본 명세서에 개시된 실시 예를 설명함에 있어서 관련된 공지 기술에 대한 구체적인 설명이 본 명세서에 개시된 실시예의 요지를 흐릴 수 있다고 판단되는 경우 그 상세한 설명을 생략한다. 또한, 첨부된 도면은 본 명세서에 개시된 실시예를 쉽게 이 해할 수 있도록 하기 위한 것일 뿐, 첨부된 도면에 의해 본 명세서에 개시된 기술적 사상이 제한되지 않으며, 본 명세서의 사상 및 기술 범위에 포함되는 모든 변경, 균등물 내지 대체물을 포함하는 것으로 이해되어야 한다. 제1, 제2 등과 같이 서수를 포함하는 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 상기 구성요소 들은 상기 용어들에 의해 한정되지는 않는다. 상기 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용된다. 어떤 구성요소가 다른 구성요소에 \"전기적으로 연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 전기적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 전기적으로 연결되 어\" 있다거나 \"직접 접속되어\" 있다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어 야 할 것이다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 출원에서, \"포함한다\" 또는 \"가지다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부 품 또는 이들을 조합한 것이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되 어야 한다. 도 1은 본 발명의 일 실시예에 따른 적대적 공격 분석 시스템의 개념도이다. 도 1을 참조하면, 본 발명의 일 실시예에 따른 블랙 박스 적대적 공격 시스템은 원본 소스 코드 제공 장치 , 적대적 소스 코드 생성 장치 및 적대적 공격 성능 분석 장치를 포함할 수 있다. 예를 들어, 적대적 공격 성능 분석 장치는 인공 지능 모델을 포함할 수 있으나, 이에 한정하지 아니한다. 원본 소스 코드 제공 장치는 원본 소스 코드를 포함할 수 있다. 원본 소스 코드 제공 장치는 원본 소 스 코드를 적대적 공격 성능 분석 장치에 제공할 수 있다. 적대적 소스 코드 생성 장치는 원본 소스 코드를 포함할 수 있다. 적대적 소스 코드 생성 장치는 원 본 소스 코드를 기초로 적대적 소스 코드를 생성할 수 있다. 적대적 소스 코드 생성 장치는 다음 표 1의 알고리즘을 기초로 적대적 소스 코드를 생성할 수 있다. 표 1"}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "표 1을 참조하면, 적대적 소스 코드 생성 장치는 공격할 위치를 소스코드의 라인과 라인 사이로 정의하여 어느 위치가 취약한지 찾아내고, 원본 소스 코드와 가장 유사도가 먼 소스 코드에 포함된 라인들 가운데 하나의 라인을 스닙펫(Snippet)으로 추출하고, 추출한 스닙펫을 사용하지 않는 문자열 변수에 넣어 데드 코드(Dead Code)를 생성하고, 데드 코드를 취약한 위치에 삽입하는 방식으로 적대적 소스 코드를 생성할 수 있다. 적대적 소스 코드 생성 장치는 적대적 소스 코드를 적대적 공격 성능 분석 장치에 제공할 수 있다. 적대적 공격 성능 분석 장치는 원본 소스 코드를 원본 소스 코드 제공 장치로부터 제공받을 수 있다. 적대적 공격 성능 분석 장치는 적대적 소스 코드를 적대적 소스 코드 생성 장치로부터 제공받을 수 있다. 적대적 공격 성능 분석 장치는 원본 소스 코드 및 적대적 소스 코드를 기초로 학습을 수행할 수 있다. 적 대적 공격 성능 분석 장치는 원본 소스 코드 및 적대적 소스 코드를 인공 지능 모델에 입력할 수 있다. 적 대적 공격 성능 분석 장치는 원본 소스 코드에 기반한 인공 지능 모델의 출력 값 및 적대적 소스 코드에 기반한 인공 지능 모델의 출력 값을 비교할 수 있다. 적대적 공격 성능 분석 장치는 출력 값의 비교를 통 해 적대적 소스 코드에 의해 인공 지능 모델이 공격당했는지 판단할 수 있고, 인공 지능 모델의 견고함을 판단 할 수 있다. 도 2는 본 발명의 일 실시예에 따른 적대적 소스 코드 생성 장치의 블록도이다. 도 3은 본 발명의 일 실시예에 따른 적대적 소스 코드 생성 장치를 설명하기 위한 개념도이다. 도 2 내지 3을 참조하면, 적대적 소스 코드 생성 장치는 취약 위치 선택부, 비유사 코드 선택부 , 스닙펫 추출부 및 적대적 소스 코드 생성부를 포함할 수 있다. 취약 위치 선택부는 원본 소스 코드에서 취약 위치들을 선택할 수 있다. 여기에서, 취약 위치들은 데드 코 드가 삽입될 수 있는 위치들일 수 있고, 공격의 대상이 되는 위치들일 수 있다.예를 들어, 취약 위치 선택부는 원본 소스 코드의 취약 위치들을 각각에서의 [CLS] 표현 벡터를 획득할 수 있다. 이 경우, [CLS] 표현 벡터는 미세 조정되지 않고 사전 학습된 PL(Programming Languages) 모델에서 획득 한 것일 수 있다. 미세 조정되지 않고 사전 학습된 PL 모델은 CodeBERT 모델을 포함할 수 있으나 이에 한정하지 아니한다. 취약 위치 선택부는 [UNK] 토큰의 시퀀스를 취약 위치들에 삽입하여 취약 위치들 각각에서의 변경된 [CLS] 표현 벡터를 획득할 수 있다. [UNK] 토큰은 언노운(unknown)을 나타내는 토큰일 수 있다. [UNK] 토큰의 시퀀스 는 다음 수학식 1과 같이 나타낼 수 있다. 수학식 1"}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "수학식 1에서 u는 [UNK] 토큰의 시퀀스일 수 있다. 취약 위치 선택부는 취약 위치들 각각에서의 원본 소스 코드의 [CLS] 표현 벡터 및 변경된 [CLS] 표현 벡 터 사이의 코사인 유사도를 획득할 수 있다. 취약 위치 선택부는 취약 위치들 각각에서의 코사인 유사도를 기초로 취약 위치들 각각에서의 취약성 점수를 획득할 수 있다. 취약 위치 선택부는 취약 위치들 각각에서 의 취약성 점수를 기초로 취약 위치들을 정렬할 수 있다. 취약 위치 선택부는 취약 위치들에 대한 정보를 적대적 소스 코드 생성부에 전송할 수 있다. 비유사 코드 선택부는 오픈 소스 코드 세트에서 오픈 소스 코드들을 획득할 수 있다. 여기에서, 오픈 소스 코드들은 원본 소스 코드와 비유사한 소스 코드일 수 있다. 비유사 코드 선택부는 오픈 소스 코드들 각각 의 [CLS] 표현 벡터를 획득할 수 있다. 비유사 코드 선택부는 오픈 소스 코드들의 [CLS] 표현 벡터들 사이 의 코사인 유사도를 획득할 수 있다. 비유사 코드 선택부는 코사인 유사도를 기초로 오픈 소스 코드들 각 각의 비유사성 점수를 획득할 수 있다. 비유사 코드 선택부는 오픈 소스 코드들 가운데 비유사성 점수가 큰 K개의 오픈 소스 코드들을 추출할 수 있다. 비유사 코드 선택부는 K개의 오픈 소스 코드들을 스닙펫 추 출부에 전송할 수 있다. 스닙펫 추출부는 K개의 오픈 소스 코드들을 비유사 코드 선택부로부터 수신할 수 있다. 스닙펫 추출 부는 K개의 오픈 소스 코드들 각각에 관한 주의(attention) 점수를 획득할 수 있다. 스닙펫 추출부는 미세 조정되지 않은 사전 학습된 PL 모델의 마지막에서 두 번째 층(layer)에서 명령문(statement)에 있는 각각 의 토큰의 주의 점수를 획득할 수 있다. 스닙펫 추출부는 각각의 토큰의 주의 점수를 미세 조정되지 않고 사전 학습된 PL(Programming Languages) 모델에서 각각의 토큰의 주의 점수를 획득할 수 있다. 미세 조정되지 않고 사전 학습된 PL 모델은 CodeBERT 모델을 포함할 수 있으나 이에 한정하지 아니한다. 스닙펫 추출부는 K개의 오픈 소스 코드들 각각에서 문장을 추출할 수 있다. 스닙펫 추출부는 추출한 문장들 가운데 주의 점수가 가장 큰 오픈 소스 코드에서 추출된 문장을 스닙펫으로 선택할 수 있다. 스닙펫 추 출부는 스닙펫을 적대적 소스 코드 생성부에 전송할 수 있다. 적대적 소스 코드 생성부는 취약 위치들에 관한 정보를 취약 위치 선택부로부터 수신할 수 있다. 적 대적 소스 코드 생성부는 스닙펫을 스닙펫 추출부로부터 수신할 수 있다. 적대적 소스 코드 생성부 는 스닙펫을 기초로 데드 코드를 생성할 수 있다. 적대적 소스 코드 생성부는 스닙펫을 사용하지 않 는 문자열 변수명에 삽입하여 데드 코드를 생성할 수 있다. 적대적 소스 코드 생성부는 다음 표 2의 알고 리즘을 기초로 적대적 데드 코드를 생성할 수 있다.표 2"}
{"patent_id": "10-2023-0095277", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "적대적 소스 코드 생성부는 취약 위치들에 관한 정보 및 데드 코드를 기초로 적대적 소스 코드를 생성할 수 있다. 적대적 소스 코드 생성부는 취약 위치들에 데드 코드를 삽입하는 방식으로 적대적 소스 코드를 생성할 수 있다. 도 4는 본 발명의 일 실시예에 따른 적대적 공격 방법의 효과를 도시한 개념도이다. 도 4는 프로그래밍 언어(Task 또는 Language) 및 희생 모델(victim model)에 따른 공격 방법들의 효과를 도시한 도면이다. 프로그래밍 언어는 Java, C/C++ 또는 Python일 수 있고, 희생 모델의 경우, MHM 및 ALERT은 기존의 희생 모델일 수 있고, DIP은 본 발명의 일 실시예에 따른 희생 모델일 수 있고, 도 1의 적대적 소스 코드 생성 장치에 대응할 수 있다. 공격 방법은 공격 효율(attack efficiency) 및 공격 품질(attack quality)를 포함할 수 있고, 공격 효율은 공격 성공 확률(Attack Success Rate, ASR) 및 성공적으로 공격된 쿼리의 개수(Query)를 포함할 수 있고, 공격 품질은 섭동의 비율(Ratio of Perturbation, Pert) 및 CodeBLEU를 포함할 수 있다. 섭동 비율은 원 본 소스 코드에 얼마나 많은 섭동이 주입되었는지를 나타낼 수 있고, CodeBLEU는 생성된 코드의 일관성을 측정하는 메트릭일 수 있다. CodeBLEU가 1에 가까우면 코드는 원래 코드의 의미론적 의미를 유지하는 것일 수 있다. 도 4를 참조하면, 본 발명의 일 실시예에 따른 희생 모델은 기존의 희생 모델에 비해 공격 효율 지표가 더 나은 것을 확인할 수 있고, 공격 품질 지표가 대다수 더 나은 것을 확인할 수 있다. 도 5는 본 발명의 일 실시예에 따른 적대적 공격 방법의 흐름도이다. 도 5를 참조하면, 적대적 소스 코드 생성 장치는 원본 소스 코드의 취약 위치를 선택할 수 있다(S510). 적대적 소스 코드 생성 장치는 오픈 소스 코드들을 획득할 수 있다(S520). 적대적 소스 코드 생성 장치는 오픈 소스 코드 세트로부터 오픈 소스 코드들을 획득할 수 있다. 여기에서, 오픈 소스 코드들은 원본 소스 코드와 비 유사한 소스 코드들일 수 있다. 적대적 소스 코드 생성 장치는 오픈 소스 코드들 가운데 비유사 코드들을 선택할 수 있다(S530). 적대적 소스 코드 생성 장치는 오픈 소스 코드들 사이의 유사도를 획득할 수 있다. 적대적 소스 코드 생성 장치는 유사도를 기초로 오픈 소스 코드들의 비유사성 점수를 획득할 수 있다. 적대적 소스 코드 생성 장치는 오픈 소스 코드들 가운데 비유사성 점수가 큰 K개의 오픈 소스 코드들을 비유사 코드들로 선택할 수 있다. 적대적 소스 코드 생성 장치는 비유사 코드들 가운데 적어도 하나로부터 스닙펫을 추출할 수 있다(S540). 적대 적 소스 코드 생성 장치는 비유사 코드들 각각의 주의 점수를 획득하고, 주의 점수들을 기초로 비유사 코드들 가운데 적어도 하나로부터 스닙펫을 추출할 수 있다. 적대적 소스 코드 생성 장치는 비유사 코드들 각각으로부터 문장을 추출하고, 추출한 문장들 가운데 주의 점수 가 가장 큰 비유사 코드로부터 추출한 문장을 스닙펫으로 추출할 수 있다. 적대적 소스 코드 생성 장치는 스닙펫을 기초로 적대적 소스 코드를 생성할 수 있다(S550). 적대적 소스 코드는 적어도 하나의 스닙펫을 문자열 변수명에 삽입하여 데드 코드를 생성하고, 데드 코드를 원본 소스 코드의 취약 위치들에 삽입하여 적대적 소스 코드를 생성할 수 있다. 도 6은 본 발명의 다른 실시예에 따른 적대적 소스 코드 생성 장치의 블록도이다. 도 6의 적대적 소스 코드 생성 장치는 도 1의 클래스 불균형 완화 장치와 동일할 수 있다. 적대적 소 스 코드 생성 장치는 적어도 하나의 프로세서, 메모리 및 네트워크와 연결되어 통신을 수행하는 송수신 장치를 포함할 수 있다. 또한, 적대적 소스 코드 생성 장치는 입력 인터페이스 장치, 출 력 인터페이스 장치, 저장 장치 등을 더 포함할 수 있다. 적대적 소스 코드 생성 장치에 포함된 각각의 구성 요소들은 버스(bus, 370)에 의해 연결되어 서로 통신을 수행할 수 있다. 다만, 적대적 소스 코드 생성 장치에 포함된 각각의 구성요소들은 공통 버스가 아니라, 프로세서를 중심으로 개별 인터 페이스 또는 개별 버스를 통하여 연결될 수도 있다. 예를 들어, 프로세서는 메모리, 송수신 장치 , 입력 인터페이스 장치, 출력 인터페이스 장치 및 저장 장치 중에서 적어도 하나와 전용 인터페이스를 통하여 연결될 수도 있다. 프로세서는 메모리 및 저장 장치 중에서 적어도 하나에 저장된 프로그램 명령(program comman d)을 실행할 수 있다. 프로세서는 중앙 처리 장치(central processing unit, CPU), 그래픽 처리 장치 (graphics processing unit, GPU), 또는 본 발명의 실시예들에 따른 방법들이 수행되는 전용의 프로세서를 의미 할 수 있다. 메모리 및 저장 장치 각각은 휘발성 저장 매체 및 비휘발성 저장 매체 중에서 적어도 하 나로 구성될 수 있다. 예를 들어, 메모리는 읽기 전용 메모리(read only memory, ROM) 및 랜덤 액세스 메 모리(random access memory, RAM) 중에서 적어도 하나로 구성될 수 있다. 본 발명에서 사용되는 대부분의 용어는 해당 분야에서 널리 사용되는 일반적인 것들에서 선택되지만, 일부 용어 는 출원인에 의해 임의로 선택되며 그 의미는 필요에 따라 다음 설명에서 자세히 서술한다. 따라서 본 발명은 용어의 단순한 명칭이나 의미가 아닌 용어의 의도된 의미에 근거하여 이해되어야 한다. 본 발명은 본 발명의 필수적 특징을 벗어나지 않는 범위에서 다른 특정한 형태로 구체화될 수 있음은 당업자에 게 자명하다. 따라서, 상술한 상세한 설명은 모든 면에서 제한적으로 해석되어서는 아니 되고 예시적인 것으로 고려되어야 한다. 본 발명의 범위는 첨부된 청구항의 합리적 해석에 의해 결정되어야 하고, 본 발명의 등가적 범위 내에서의 모든 변경은 본 발명의 범위에 포함된다. 도면 도면1 도면2 도면3 도면4 도면5 도면6"}
{"patent_id": "10-2023-0095277", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 발명에 대해 더욱 이해하기 위해 포함되며 본 출원에 포함되고 그 일부를 구성하는 첨부된 도면은 본 발명의 원리를 설명하는 상세한 설명과 함께 본 발명의 실시예를 나타낸다. 도 1은 본 발명의 일 실시예에 따른 적대적 공격 분석 시스템의 개념도이다. 도 2는 본 발명의 일 실시예에 따른 적대적 소스 코드 생성 장치의 블록도이다. 도 3은 본 발명의 일 실시예에 따른 적대적 소스 코드 생성 장치를 설명하기 위한 개념도이다. 도 4는 본 발명의 일 실시예에 따른 적대적 공격 방법의 효과를 도시한 개념도이다.도 5는 본 발명의 일 실시예에 따른 적대적 공격 방법의 흐름도이다. 도 6은 본 발명의 다른 실시예에 따른 적대적 소스 코드 생성 장치의 블록도이다."}
