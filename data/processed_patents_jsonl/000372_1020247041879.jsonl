{"patent_id": "10-2024-7041879", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0012112", "출원번호": "10-2024-7041879", "발명의 명칭": "자원 할당 방법 및 장치와 인공지능 훈련 시스템", "출원인": "쑤저우 메타브레인 인텔리전트 테크놀로지 컴퍼니", "발명자": "리우 후이싱"}}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "자원 할당 방법에 있어서,인공지능 훈련 시스템에 적용되며, 상기 인공지능 시스템에는 클라이언트 플러그인 라이브러리와 각 노드 별로여러 개발 환경을 생성하는 적어도 하나의 노드를 포함하고, 상기 방법은,목표 개발 환경에서 목표 훈련 태스크의 시작을 감지하면 상기 클라이언트 플러그인 라이브러리에서 목표 그래픽 프로세서 요청을 획득하고, 여기서, 상기 목표 그래픽 프로세서 요청은 상기 클라이언트 플러그인 라이브러리가 목표 개발 환경에서 목표 훈련 태스크의 시작을 감지하면 상기 목표 훈련 태스크의 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션하여 생성되는 단계;상기 목표 그래픽 프로세서 요청에 따라 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 단계를 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,각 개발 환경에는 해당 그래픽 프로세서 할당량이 있으며, 상기 그래픽 프로세서 할당량은 각 개발 환경이 생성될 때 해당 개발 환경에 대해 사용자가 입력하는 개발 환경에서 가장 많이 사용할 수 있는 그래픽 프로세서 자원인, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 목표 그래픽 프로세서 요청에 따라, 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 단계는,상기 목표 개발 환경에 미리 배치된 목표 그래픽 프로세서 할당량을 결정하고;상기 목표 그래픽 프로세서 할당량 및 상기 목표 그래픽 프로세서 요청에 따라 상기 목표 훈련 태스크에 그래픽프로세서 자원을 할당하는 것을 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 방법은 각 개발 환경에 대해 사용자가 입력한 그래픽 프로세서 할당량을 수신하는 것을 더 포함하는,방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 목표 개발 환경에 대응하는 목표 노드는 대응하는 그래픽 프로세서 자원을 배치하고, 상기 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 할당 개수를 포함하며, 상기 목표 그래픽 프로세서 할당량과 상기 목표그래픽 프로세서 요청량에 따라 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 단계는,상기 목표 개발 환경의 현재 사용 중인 그래픽 프로세서의 개수를 결정하고;상기 현재 사용 중인 그래픽 프로세서의 개수가 상기 목표 그래픽 프로세서의 할당량 개수보다 적으면, 상기 목표 노드에 대응하는 그래픽 프로세서 자원 중 현재 상기 목표 개발 환경에서 사용되지 않는 그래픽 프로세서로부터 상기 목표 훈련 태스크에 그래픽 프로세스 자원을 할당하고;현재 사용되고 있는 상기 그래픽 프로세서의 개수가 상기 목표 그래픽 프로세서 할당량과 같으면 현재 상기 목공개특허 10-2025-0012112-3-표 개발 환경에서 사용되는 그래픽 프로세서에서 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 것을 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 목표 개발 환경에서 현재 사용 중인 그래픽 프로세서로부터 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 단계는,상기 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정하고;상기 필요한 그래픽 프로세서의 개수가 상기 현재 사용 중인 그래픽 프로세서의 개수보다 많을 경우, 스케줄링실패 정보를 생성하고;상기 필요한 그래픽 프로세서의 개수가 상기 현재 사용 중인 그래픽 프로세서의 개수보다 많지 않은 경우, 상기목표 개발 환경에서 현재 사용 중인 그래픽 프로세서를 태스크 개수에 따라 정렬하고, 그 중 태스크 개수가 가장 작은 상위 N개의 그래픽 프로세서에서 상기 목표 훈련 태스크에 그래픽 프로세서의 자원을 할당하고;여기서, N은 상기 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수인 것을 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5항에 있어서,상기 목표 노드에 해당하는 그래픽 프로세서 자원 중 현재 상기 목표 개발 환경에서 사용되지 않는 그래픽 프로세서에서, 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 단계는,상기 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 현재 태스크 개수를 결정하고, 현재 태스크 개수가태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정하고;상기 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 상기 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수 미만인 경우, 상기 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서및 상기 목표 개발 환경의 현재 사용 그래픽 프로세서로부터 상기 목표 훈련 태스크에 그래픽 프로세서 자원을할당하고;현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 상기 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 작지 않은 경우 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에서상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 것을 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 현재 태스크 수가 태스크 개수 임계값 미만인 그래픽 프로세서와 상기 목표 개발 환경의 현재 사용 그래픽프로세서에서 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 단계는,상기 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수와 상기 목표 노드에 대응하는 그래픽 프로세서의 자원중 현재 상기 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 개수에 따라 재사용 그래픽 프로세스의 개수를 결정하고;상기 현재 사용되고 있는 그래픽 프로세서의 개수가 상기 재사용 그래픽 프로세서의 개수보다 적으면 스케줄링실패 정보를 생성하고;상기 현재 사용하는 그래픽 프로세서의 개수가 상기 재사용 그래픽 프로세서의 개수보다 작지 않은 경우에는 상기 목표 개발 환경에서 현재 사용하는 그래픽 프로세서 중 태스크 개수가 가장 작은 상위 M개의 그래픽 프로세서와 상기 현재 태스크 개수가 태스크 수 임계값 미만인 그래픽 프로세서에서 상기 목표 훈련 태스크에 그래픽프로세서 자원을 할당하고;여기서, M은 상기 재사용되는 그래픽 프로세서의 개수인 것을 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "공개특허 10-2025-0012112-4-제5항 내지 제8항 중 어느 한 항에 있어서, 상기 방법은 각 개발 환경에 대한 그래픽 프로세서 자원의 할당 정보를 생성 및 저장하는 단계를 더 포함하는,방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서, 상기 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 비디오 메모리 할당량 용량을 더 포함하고, 상기 목표 그래픽 프로세서 할당량 및 상기 목표 그래픽 프로세서 요청에 따라, 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하고, 또한,상기 목표 그래픽 프로세서 그래픽 메모리 할당량 용량에 따라 상기 목표 훈련 태스크에 그래픽 프로세서 그래픽 메모리 용량을 할당하는 것을 더 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서, 상기 목표 그래픽 프로세서 비디오 메모리 할당 용량에 따라 상기 목표 훈련 태스크에 그래픽 프로세서 그래픽메모리 용량을 할당하는 단계는,상기 목표 훈련 태스크를 시작할 때 상기 목표 개발 환경에 다른 훈련 태스크가 있는지 확인하고;상기 목표 개발 환경에 다른 훈련 태스크가 없는 경우 상기 목표 그래픽 프로세서 메모리 할당량 용량에 따라상기 목표 훈련 태스크에 그래픽 프로세서 메모리 용량을 할당하고;상기 목표 개발 환경에 다른 훈련 태스크가 있는 경우 상기 목표 훈련 태스크에 따라 상기 목표 개발 환경의 남은 그래픽 프로세서 비디오 메모리 할당량 용량을 결정하고, 상기 목표 개발 환경의 남은 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 할당 정보를 업데이트하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항에 있어서,상기 목표 훈련 태스크가 종료된 것으로 감지되면 상기 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수하는 것을 더 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항에 있어서,미리 설정된 기간 내에 상기 목표 훈련 태스크에 대한 심박 정보가 수신되지 않으면 상기 목표 훈련 태스크에할당된 그래픽 프로세서 자원을 재활용하는 것을 더 포함하는, 방법."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "인공지능 시스템에 있어서,적어도 하나의 노드, 노드 관리자 및 클라이언트 플러그인 라이브러리를 포함하고, 각 노드마다 복수의 개발 환경이 생성되고;상기 클라이언트 플러그인 라이브러리는 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 상기목표 훈련 태스크의 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션한 후 목표 그래픽 프로세서 요청을생성하는 데 사용되고; 상기 목표 그래픽 프로세서의 요청을 상기 노드 관리자에게 전송하고;상기 노드 관리자는 상기 목표 그래픽 프로세서 요청에 응답하여 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 데 사용되고;상기 목표 딥 러닝 프레임워크는 상기 노드 관리자가 할당한 그래픽 프로세서 자원을 사용하여 인공지능 훈련을수행하는, 시스템.공개특허 10-2025-0012112-5-청구항 15 제14항에 있어서,각 개발 환경에는 해당 그래픽 프로세서 할당량이 제공되며, 상기 그래픽 프로세서 할당량은 각 개발 환경 생성시 해당 개발 환경에 대해 사용자가 입력한 개발 환경이 최대 사용 가능한 그래픽 프로세스 자원인, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에 있어서,상기 노드 관리자는 상기 목표 개발 환경에 대해 미리 설정된 목표 그래픽 프로세서 할당량을 결정하고; 상기목표 그래픽 프로세서 할당량 및 상기 목표 그래픽 프로세서 요청에 따라 상기 목표 훈련 태스크에 그래픽 프로세스 자원을 할당하는, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서, 상기 노드 관리자는 그래픽 프로세서 관리 모듈을 포함하고;상기 그래픽 프로세서 관리 모듈은 사용자가 각 개발 환경에 대해 입력한 그래픽 프로세서 할당량을 저장하는데 사용되는, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서, 상기 목표 개발 환경에 대응하는 목표 노드는 대응하는 그래픽 프로세서 자원을 배치하고, 상기 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 할당량의 수를 포함하고;상기 노드 관리자는 상기 목표 개발 환경에서 현재 사용되는 그래픽 프로세서의 개수를 결정하는 데 사용되고;상기 현재 사용되는 그래픽 프로세서의 개수가 상기 목표 그래픽 프로세서 할당량보다 적으면 상기 목표 노드에대응하는 그래픽 프로세서의 자원 중의 현재 상기 목표 개발 환경에서 사용되지 않는 그래픽 프로세서로부터 상기 목표 훈련 태스크에 그래픽 프로세서의 자원을 할당하고; 상기 현재 사용 중인 그래픽 프로세서의 개수가 상기 목표 그래픽 프로세서의 할당량 개수와 같으면 상기 현재 목표 개발 환경에서 사용 중인 그래프 프로세서로부터 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서,상기 노드 관리자는 상기 목표 훈련 태스크에 필요한 그래픽 프로세서 개수를 결정하는 데 사용되며; 상기 필요한 그래픽 프로세서 개수가 상기 현재 사용되는 그래픽 프로세서 개수보다 많으면 스케줄링 실패 정보가 생성되고; 상기 필요한 그래픽 프로세서의 개수가 상기 현재 사용되고 있는 그래픽 프로세서의 개수보다 많지지 않으면, 현재 상기 목표 개발 환경에서 사용되고 있는 그래픽 프로세서를 태스크 개수에 따라 정렬하고, 태스크 개수가 가장 작은 상위 N개의 그래픽 프로세스에서 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하며;여기서 N은 상기 목표 훈련 태스크에 필요한 그래픽 프로세스의 개수인, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제18항에 있어서,상기 노드 관리자는 상기 목표 개발 환경에서 현재 사용되지 않는 그래픽 프로세서의 현재 태스크 개수를 결정하고, 현재 태스크 개수가 태스크 개수 임계값 보다 적은 경우 그래픽 프로세서의 개수를 결정하는 데사용되고; 상기 태스크 개수가 태스크 개수 임계값 보다 작은 그래픽 프로세서 개수가 상기 목표 훈련 태스크에필요한 그래픽 프로세서 개수보다 적으면, 상기 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서 개수 및 상기 목표 개발 환경의 현재 사용되는 그래픽 프로세스로부터 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하고; 상기 현재 태스크 개수가 태스크 개수 임계값의 그래픽 프로세서의 개수 보다 적고, 상기 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수 이상인 경우, 현재 태스크 개수가 태스크 임계값의 수보공개특허 10-2025-0012112-6-다 적은 그래픽 프로세서에서 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_21", "content": "제20항에 있어서,상기 노드 관리자는 상기 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수와 상기 목표 개발 환경에서 현재사용하지 않는 상기 목표 노드에 해당하는 그래픽 프로세서 자원의 그래픽 프로세서 개수에 따라 재사용된 그래픽 프로세서의 개수를 결정하는 데 사용되고; 상기 현재 사용된 그래픽 프로세서의 개수가 상기 재사용된 그래픽 프로세서의 개수보다 적은 경우, 스케줄링 실패 정보가 생성되고; 상기 현재 사용되는 그래픽 프로세서의 개수가 상기 재사용되는 그래픽 프로세서의 개수 이상인 경우, 상기 목표 개발 환경에서 현재 사용되는 그래픽 프로세서의 태스크 개수가 가장 적은 상위 M개의 그래픽 프로세 및 상기 현재 태스크 개수가 태스크 개수 임계값미만인 그래픽 프로세서에서 상기 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하고; 여기서 M은 상기 재사용된 그래픽 프로세서의 개수인, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_22", "content": "제18항 내지 제21항 중 어느 한 항에 있어서, 상기 노드 관리자는 보조 모듈을 포함하고;상기 보조 모듈은 상기 노드 관리자의 할당 과정을 기록하고, 각 개발 환경의 그래픽 프로세서 자원 할당 정보를 생성하여 저장하는 데 사용되는, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_23", "content": "제22항에 있어서, 상기 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 비디오 메모리 할당량 용량을 더 포함하고;상기 노드 관리자는 또한 상기 목표 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 상기 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당하는 데 사용되는, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_24", "content": "제23항에 있어서,상기 노드관리자는 상기 목표 훈련 태스크를 시작할 때 상기 목표 개발 환경에 다른 훈련 태스크가 존재하는지여부를 판단하는 데 사용되며, 상기 목표 개발 환경에 다른 훈련 태스크가 없으면 상기 목표 그래픽 프로세서비디오 메모리 할당량에 따라 상기 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당하고; 상기목표 개발 환경에 다른 태스크가 있으면 상기 목표 훈련 태스크에 따라 상기 목표 개발 환경의 나머지 그래픽프로세서 비디오 메모리 할당 용량을 결정하고, 상기 목표 개발 환경의 나머지 그래픽 프로세서 비디오 메모리할당 용량에 따라 할당 정보를 업데이트하는, 시스템"}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_25", "content": "제14항에 있어서,상기 노드 관리자는 또한 상기 목표 훈련 태스크가 종료되는 것을 감지하면 상기목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수하도록 구성되는, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_26", "content": "제14항에 있어서,상기 노드 관리자는 상기 목표 훈련 태스크에 대한 심박 정보가 기 설정된 기간 내에 수신되지 않는 경우 상기목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수하도록 구성되는, 시스템."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_27", "content": "자원 할당 장치에 있어서,공개특허 10-2025-0012112-7-인공지능 훈련 시스템에 적용되고, 상기 인공지능 훈련 시스템은 클라이언트 플러그인 라이브러리 및 적어도 하나의 노드를 포함하며, 각 노드에는 복수의 개발 환경이 생성되며, 상기 장치는 요청 모듈 및 할당 모듈을 포함하며;상기 요청 모듈은 목표 개발 환경에서 목표 훈련 태스크가 시작되는 것이 감지되면 상기 클라이언트 플러그인라이브러리로부터 목표 그래픽 프로세서 요청을 획득하고; 여기서, 상기 목표 그래픽 프로세서 요청은 상기 클라이언트 플러그인 라이브러리가 목표 개발 환경의 목표 테스크의 시작을 감지하고 상기 목표 훈련 태스크의 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션한 후 생성되며;상기 할당 모듈은 상기 목표 그래픽 프로세서 요청에 응답하여 상기 목표 훈련 태스크에 프로세서 자원을 할당하도록 구성되는, 장치."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_28", "content": "제27항에 있어서, 각 개발 환경에는 해당 그래픽 프로세서 할당량이 제공되며, 상기 그래픽 프로세서 할당량은 각 개발 환경 생성시 해당 개발 환경에 대해 사용자가 입력할 수 있는 개발 환경이 최대 사용 가능한 그래픽 프로세서 자원인, 장치."}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_29", "content": "전자 장치에 있어서,프로세서, 메모리 및 상기 메모리에 저장되고 상기 프로세서 상에서 동작할 수 있는 컴퓨터 프로그램을 포함하며, 상기 컴퓨터 프로그램이 상기 프로세서에 의해 실행될 때 제1항 내지 제13항 중 어느 한 항의 상기 자원 할당 방법을 실현하는, 전자 장치"}
{"patent_id": "10-2024-7041879", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_30", "content": "비휘발성 컴퓨터 판독 가능 저장 매체에 있어서,상기 비휘발성 컴퓨터 판독 가능 저장 매체에 컴퓨터 프로그램이 저장되어 있고, 상기 컴퓨터 프로그램이 프로세서에 의해 실행되면 제1항 내지 제13항 중 어느 한 항의 상기 자원 할당 방법을 실현하는, 비휘발성 컴퓨터판독 가능 저장 매체."}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 출원의 실시예는 자원 할당 방법, 장치 및 인공지능 훈련 시스템을 제공하며, 이 방법은 목표 개발 환경에서 목표 훈련 태스크가 시작되는 것이 감지되면 클라이언트 플러그인 라이브러리를 로딩하고; 이에 따라 클라이언트 플러그인 라이브러리는 목표 훈련 태스크의 목표 딥 러닝 프레임워크 로딩 프로세스를 리디렉션하여 딥 러닝 프 레임워크의 시작 프로세스를 하이재킹할 수 있으며, 이러한 과정에서 목표 그래픽 프로세서 요청을 생성하여 목 표 훈련 태스크에 그래픽 프로세서 자원 할당을 요청한다. 종래 기술과 비교하여 본 애플리케이션의 실시예는 딥 러닝 프레임워크 관점에서 시작하여 훈련 태스크 시작 시 딥러닝 프레임워크의 로딩 로직을 분석하고 프레임워크 하이재킹을 통해 동적 그래픽 프로세서 공유를 실현하고, 구현이 간단하고 프레임워크를 수정할 필요가 없고, 사 용자가 사용시 무 감각이며 기본 그래픽 프로세서 공유 모드만큼 유연하다."}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 출원은 2022년 11월 28일에 중국 특허청에 제출된 중국 특허 출원의 우선권을 요청하며 출원 번호는 202211498123.3이고 출원 명칭은 \"자원 할당 방법 및 장치와 인공지능 훈련 시스템\"이며, 모두 내용은 인용으로 본 출원과 결합한다."}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 2, "content": "본 출원은 인공지능 훈련 기술분야에 관한 것으로, 특히 자원 할당 방법 및 장치와 인공지능 훈련 시스템에 관 한 것이다."}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능 빅데이터 시대에 데이터 양의 지속적인 증가와 딥 러닝 알고리즘의 발달로 컴퓨팅 파워에 대한 요구가 점점 높아지고 있으며, 이에 따라 범용 그래픽 프로세서와 같은 다양한 범주의 고성능 디바이스가 등장하고 있 다. 그래픽 프로세서는 계산력은 강하지만 가격이 비싸고 실제 응용에서는 다양한 조건의 제약으로 인해 그래픽 프로세서의 전반적인 활용률이 낮으며, 그래픽 프로세서의 높은 가격보다 기업과 사용자가 활용률에 더 많은 관 심을 가지고 있어 업계에서는 이 문제에 대해 많은 탐구를 진행했는데, 여기서, 그래픽 프로세서로 공유(다중화)하는 것이 특히 중요하다. 기본 베어 그래픽 프로세서 동적 공유 모드는 사용자가 태스크를 제출할 때 자원이 충분한지 여부를 판단하지 않고 여러 사용자의 태스크 간에 그래픽 프로세서 자원을 선점하며 그래픽 프로세서 비디오 메모리를 예로 들면, 나머지 비디오 메모리가 부족하면 OOM(Out Of Memory, 메모리(비디오 메모리) 부족 시 발생하는 오류 코드)이 발생하여 사용자의 태스크가 모두 실패할 수 있다. OOM 자원 선점 문제를 해결하기 위해 업계는 일반적으로 k8s(kubernetes, 컨테이너화된 애플리케이션을 자동으 로 배포, 확장 및 관리하는 오픈 소스 시스템) 또는 컨테이너 관리 시스템을 사용하여 그래픽 프로세서 자원을 관리하고 pod(노드) 또는 컨테이너와 결합한다. 그래픽 프로세서 태스크를 시작할 때 관리 시스템은 먼저 그래 픽 프로세서 유휴 자원이 태스크에 필요한 그래픽 프로세스 자원이 충족하는지 여부를 판단하고, 충족되면 스케 줄링 정책에 따라 해당 노드에 실행 컨테이너를 생성하고 그래픽 프로세서 자원을 할당한 다음 그래픽 프로세서 태스크를 실행하고 종료 후 컨테이너와 해당 그래픽 프로세서 자원을 회수한다. 이러한 모드는 인터페이스를 통해서만 태스크를 시작할 수 있으며 하위 명령줄을 통해 태스크를 시작할 수 없으 며 사용자가 하위 수준에서 작업하면 그래픽 프로세서 자원에 혼란이 발생하고 이러한 모드는 태스크를 시작할 때마다 컨테이너를 생성해야 하므로 사용자가 스크립트를 편집하고 디버그하는 데 도움이 되지 않는다. 이를 위 해 업계에서는 일반적으로 개발 환경 방식을 사용하여 그래픽 프로세서를 공유한다. 사용자는 먼저 개발 환경을 생성함과 동시에 CPU(Central Processing Unit, 중앙처리장치), 그래픽 프로세서 리 소소를 사용자 개발 환경과 연동시켜야 하며, 개발 환경이 성공적으로 생성되면 해당 그래픽 프로세서 자원이 연동되는 선할당 모드, 즉 사용자가 shell 방식(shell로 작성된 스크립트 프로그램)으로 개발 환경에 로그인할 수 있어 개발 및 디버깅이 비교적 편리하지만, 이 모드의 가장 큰 폐해는 유연성이 떨어지고 그래픽 프로세서 자원의 유휴 확률이 높다. 그 이유는 미리 할당된 그래픽 프로세서 자원은 사용자가 사용하지 않더라도 다른 사 용자가 사용할 수 없어 노드의 전체 그래픽 프로세스 자원의 활용도가 낮기 때문이다."}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "상기 문제점을 고려하여, 상기 문제점을 극복하거나 적어도 부분적으로 해결하기 위한 자원 할당 방법, 장치 및 인공지능 훈련 시스템이 제안되며, 인공지능 훈련 시스템에 적용되는 자원 할당 방법은 클라이언트 플러그인 라이브러리 및 적어도 하나의 노드를 포함하며, 각 노드마다 복수의 개발 환경이 생성되며, 목표 개발 환경에서 목표 훈련 태스크가 시작되는 것이 감지되면 클라이언트 플러그인 라이브러리에서 목표 그 래픽 프로세서 요청을 획득하고; 여기서, 목표 그래픽 프로세서 요청은 클라이언트 플러그인 라이브러리가 목표 개발 환경의 훈련 태스크가 시작 시 목표 훈련 태스크의 목표 딥 러닝 프레임워크 로딩 프로세스를 리디렉션한 후 생성되며; 목표 그래픽 프로세서 요청에 응답하여 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다."}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 출원의 일부 실시예에서, 목표 그래픽 프로세서 요청에 응답하여, 목표 훈련 태스크에 그래픽 프로세서 자원 을 할당하는 단계는, 목표 개발 환경에 대해 미리 배치된 목표 그래픽 프로세서 할당량을 결정하고; 목표 그래픽 프로세서 할당량 및 목표 그래픽 프로서세 요청에 따라 목표 훈련 태스크에 그래픽 프로세서 자원 을 할당하는 것을 포함한다. 본 출원의 일부 실시예에서, 방법은 각 개발 환경에 대해 사용자가 입력한 그래픽 프로세서 할당량을 수신하는 것을 더 포함한다. 본 출원의 일부 실시예에서, 목표 개발 환경에 대응하는 목표 노드는 대응하는 그래픽 프로세서 자원을 배치하 고, 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 할당량 개수를 포함하고, 목표 그래픽 프로세서 할당 량 및 목표 그래픽 프로세서 요청에 따라 목표 훈련 태스크에 그래픽 프로세스 자원을 할당하는 단계는, 목표 개발 환경에서 사용되는 현재 그래픽 프로세서 개수를 결정하고; 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량보다 적으면 현재 사용되지 않는 목표 노 드에 대응하는 그래픽 프로세서 자원의 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원이 할당되고; 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량과 동일한 경우 개발 환경에서 현재 사용 중인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 것을 포함한다. 본 출원의 일부 실시예에서, 목표 개발 환경에 의해 현재 사용되는 그래픽 프로세서에서 목표 훈련 태스크에 그 래픽 프로세서 자원을 할당하는 단계는, 목표 훈련 태스크에 필요한 그래픽 프로세서 개수를 결정하고; 필요한 그래픽 프로세서 개수가 현재 사용되는 그래픽 프로세서 개수보다 많으면 스케줄링 실패 정보를 생성하 고; 필요한 그래픽 프로세서 개수가 현재 사용되는 그래픽 프로세서 개수보다 많지 않은 경우, 목표 개발 환경에서 현재 사용하고 있는 그래픽 프로세서를 태스크 개수에 따라 정렬하고, 태스크 개수가 가장 적은 상위 N개의 프 로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 것을 포함하고, 여기서, N은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수이다. 본 출원의 일부 실시예에서, 목표 개발 환경에 의해 현재 사용되지 않는 목표 노드에 대응하는 그래픽 프로세서 에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 단계는, 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 현재 태스크 개수를 결정하고, 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정하며; 현재 태스크 개수가 태스크 개수 임계값의 그래픽 프로세서의 개수보다 적고, 목표 훈련 태스크에 필요한 그래 픽 프로세서 개수보다 적으면, 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서 및 목표 개발 환경의 현재 사용하는 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 것을 포함한 다. 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 목표 훈련 태스크에 필요한 그래픽 프로세서 개수보다 적지 않은 경우, 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 본 출원의 일부 실시예에서, 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서와 목표 개발 환경 의 현재 사용되는 그래픽 프로세서로부터 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 단계는, 목표 훈련 태스크에 필요한 그래픽 프로세서 개수와 목표 개발 환경에서 현재 사용되지 않는 목표 노드에 해당 하는 그래픽 프로세서 자원의 그래픽 프로세서 개수에 따라 재사용되는 그래픽 프로세서 개수를 결정하고; 현재 사용되는 그래픽 프로세서의 개수가 재사용되는 그래픽 프로세서의 개수보다 적으면 스케줄링 실패 정보가 생성되고; 현재 사용되는 그래픽 프로세서의 개수가 재사용되는 그래픽 프로세서의 개수보다 적지 않으면, 목표 개발 환경 에서 현재 사용되는 그래픽 프로세서 중 태스크 개수가 가장 적은 상위 M 그래픽 프로세서 및 현재 태스크 개수 가 태스크 개수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 것을 포함하고, 여기서 M은 재사용된 그래픽 프로세서의 개수이다. 본 출원의 일부 실시예에서, 방법은 각 개발 환경에 대한 그래픽 프로세서 자원 할당 정보를 생성하고 저장하는 것을 더 포함한다. 본 출원의 일부 실시예에서, 목표 그래픽 프로세서 할당량은 또한 목표 그래픽 프로세서 비디오 메모리 할당량 용량을 포함하고, 목표 그래픽 프로세서 할당량 및 목표 그래픽 프로세서 요청에 따라, 목표 훈련 태스크에 그 래픽 프로세서 자원을 할당하는 단계는, 목표 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당하는 것을 더 포함한다. 본 출원의 일부 실시예에서, 그래픽 프로세서 비디오 메모리 할당량 용량은 목표 훈련 태스크에 그래픽 프로세 서 비디오 메모리 용량을 할당하는 단계는,목표 훈련 태스크를 시작할 때 목표 개발 환경에 다른 훈련 태스크가 있는지 확인하고; 목표 개발 환경에 다른 훈련 태스크가 없는 경우, 그래픽 프로세서 비디오 메모리 할당량 용량은 목표 훈련 태 스크에 그래픽 프로세서 비디오 메모리 용량을 할당하고; 목표 개발 환경에 다른 훈련 태스크가 있는 경우, 목표 훈련 태스크에 따라 목표 개발 환경의 남은 그래픽 프 로세서 비디오 메모리 할당량 용량을 결정하고, 목표 개발 환경의 남은 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 할당 정보를 업데이트하는 것을 포함한다. 본 출원의 일부 실시예에서, 방법은, 목표 훈련 태스크의 종료가 감지되면 목표 훈련 태스크에 할당된 그래픽 프로세서 자원이 회수되는 단계를 더 포함한다. 본 출원의 일부 실시예에서, 방법은, 미리 설정된 기간 내에 목표 훈련 태스크에 대한 심박 정보가 수신되지 않으면 목표 훈련 태스크에 할당된 그래 픽 프로세서 자원을 재활용하는 단계를 더 포함한다. 본 출원의 실시예는 인공지능 훈련 시스템을 더 제공하며, 인공지능 훈련 시스템은 적어도 하나의 노드, 노드 관리자 및 클라이언트 플러그인 라이브러리를 포함하고, 각 노드에는 복수의 개발 환경이 생성되고; 클라이언트 플러그인 라이브러리는 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 목표 훈련 태스크의 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션한 후 목표 그래픽 프로세서 요청을 생성하고, 목표 그래픽 프로세서 요청을 노드 관리자에게 전송하는 데 사용되고; 노드 관리자는 목표 그래픽 프로세서의 요청에 대응하여 목표 훈련 태스크에 그래픽 프로세서의 자원을 할당하 는 데 사용되며; 목표 딥 러닝 프레임워크는 노드 관리자가 할당한 그래픽 프로세서 자원을 사용하여 인공지능 훈련을 수행한다. 본 출원의 일부 실시예에서 노드 관리자는 목표 개발 환경에 미리 설정된 목표 그래픽 프로세서 할당량을 결정 하고, 목표 그래픽 프로세서 할당량 및 목표 그래픽 프로세서 요청사항에 따라 목표 훈련 태스크에 그래픽 프로 세서 자원을 할당하는 데 사용된다. 본 출원의 일부 실시예에서, 노드 관리자는 그래픽 프로세서 관리 모듈을 포함하고; 그래픽 프로세서 관리 모듈은 각 개발 환경에 대해 사용자가 입력한 그래픽 프로세서 할당량을 저장하는 데 사 용된다. 본 출원의 일부 실시예에서, 목표 개발 환경에 대응하는 목표 노드는 대응하는 그래픽 프로세서 자원을 배치하 고, 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 할당량 개수를 포함하고; 노드 관리자는 목표 개발 환경에서 현재 사용되고 있는 그래픽 프로세서의 개수를 결정하는 데 사용되며; 현재 사용되고 있는 그래픽 프로세서의 개수가 목표 그래픽 프로세서의 할당량 개수보다 적을 경우, 목표 노드에 대 응하는 그래픽 프로세서의 자원 중 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서에서 목표 훈련 태 스크에 그래픽 프로세서의 자원을 할당하고; 현재 사용되고 있는 그래픽 프로세서의 개수가 목표 그래픽 프로세 서의 할당량 개수와 같을 경우, 현재 목표 개발 환경에서 사용되고 있는 그래픽 프로세서에서 목표 훈련 태스크 에 그래픽 프로세서 자원을 할당한다. 본 출원의 일부 실시예에서 노드 관리자는 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정하는 데 사용되며; 필요한 그래픽 프로세서 개수가 현재 사용되고 있는 그래픽 프로세서의 개수보다 많을 경우, 스케줄 링 실패 정보를 생성하고, 필요한 그래픽 프로세서의 개수가 현재 사용되고 있는 그래픽 프로세서의 개수보다 많지 않을 경우, 태스크 개수에 따라 현재 목표 개발 환경에서 사용되는 그래픽 프로세서를 정렬하고, 태스크 개수가 가장 작은 상위 N개의 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서의 자원을 할당하고; 여 기서, N은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수이다. 본 출원의 일부 실시예에서, 노드 관리자는 목표 개발 환경에서 현재 사용되지 않는 그래픽 프로세서의 현재 태 스크 수를 결정하고, 현재 태스크 수가 태스크 수 임계값 미만인 그래픽 프로세서의 개수를 결정하는데 사용되 고; 현재 태스크 수가 태스크 수 임계값의 그래픽 프로세서의 개수보다 적고, 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 적은 경우, 현재 태스크 수가 태스크 수 임계값 미만인 그래픽 프로세스 및 목표 개발 환경의 현재 사용되고 있는 프로세서에서 목표 환경 태스크에 그래픽 프로세서 자원을 할당하고; 현재 태스크 수가 태스크 수 임계값의 그래픽 프로세서의 개수보다 적고, 목표 훈련 태스크에 필요한 그래픽 프로세서의 개 수보다 적지 않을 경우, 현재 태스크 수가 태스크 수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 본 출원의 일부 실시예에서, 노드 관리자는 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수와 목표 개발 환 경에서 현재 사용되지 않는 목표 노드에 대응하는 그래픽 프로세서 자원의 그래픽 프로세서 개수를 결정하고 재 사용되는 그래픽 프로세서의 개수를 결정하는 데 사용되고; 현재 사용되는 그래픽 프로세서의 개수가 재사용되 는 그래픽 프로세서의 개수보다 적으면 스케줄링 실패 정보가 생성되고; 현재 사용되는 그래픽 프로세서의 개수 가 재사용되는 그래픽 프로세서의 개수보다 적지 않은 경우 목표 개발 환경에서 현재 사용되는 그래픽 프로세서 중 태스크 개수가 가장 적은 상위 M개의 그래픽 프로세서와 현재 태스크 개수가 태스크 개수 임계값 미만인 그 래픽 프로세서 중에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하고; 여기서 M은 재사용된 그래픽 프로 세서의 개수이다. 본 출원의 일부 실시예에서, 노드 관리자는 보조 모듈을 포함하고; 보조 모듈은 노드 관리자의 할당 과정을 기록하고, 각 개발 환경 그래픽 프로세서 자원 할당 정보를 생성 및 저 장하는 데 사용된다. 본 출원의 일부 실시예에서, 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 비디오 메모리 할당량 용량 을 더 포함하고; 노드 관리자는 목표 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당하는 데에도 사용된다. 본 출원의 일부 실시예에서, 노드 관리자는 목표 훈련 태스크를 시작할 때 목표 개발 환경에 이미 다른 훈련 태 스크가 있는지 여부를 판단하기 위해 사용되며, 목표 개발 환경에 다른 훈련 태스크가 없을 경우, 목표 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당하 고; 목표 개발 환경에 다른 훈련 태스크가 있을 경우, 목표 훈련 태스크에 따라 목표개발 환경에 남아있는 그래 픽 프로세서 비디오 메모리 할당량 용량을 결정하고, 목표개발 환경에 남아있는 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 할당정보를 업데이트한다. 본 출원의 일부 실시예에서, 노드 관리자는 목표 훈련 태스크의 종료를 감지하면 목표 훈련 태스크에 할당된 그 래픽 프로세서 자원을 회수하는 데에도 사용된다. 본 출원의 일부 실시예에서, 노드 관리자는 또한 미리 설정된 주기내에 목표 훈련 태스크에 대한 심박정보를 수 신하지 못한 경우, 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수하는 데 사용된다. 본 출원의 실시예는 또한 클라이언트 플러그인 라이브러리 및 각 노드에 복수의 개발 환경을 생성하는 적어도 하나의 노드를 포함하는 인공지능 훈련 시스템에 적용되는 자원 할당 장치를 제공하며, 장치는 요청 모듈 및 할 당 모듈을 포함하며; 요청 모듈은 목표 개발 환경의 목표 훈련 테스크 시작이 감지되면 클라이언트 플러그인 라이브러리에서 목표 그 래픽 프로세서의 요청을 획득하는 데 사용되고; 여기서, 목표 그래픽 프로세서 요청은 클라이언트 플러그인 라 이브러리에서 목표 개발 환경의 목표 훈련 태스크 시작이 감지되면, 목표 훈련 태스크의 목표 딥 러닝 프레임워 크의 로드 프로세스를 리디렉션하여 생성되고; 할당 모듈은 목표 그래픽 프로세서 요청에 응답하고 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 데 사용된다. 본 출원의 일부 실시예에서, 할당 모듈은 목표 개발 환경에 미리 배치된 목표 그래픽 프로세서 할당량을 결정하 는 데 사용되며; 목표 그래픽 프로세서 할당량 및 목표 그래픽 프로세서 요청에 따라 목표 훈련 태스크에 그래 픽 프로세서 자원을 할당한다. 본 출원의 일부 실시예에서 장치는 할당 정보 생성 모듈을 더 포함하고; 할당 정보 생성 모듈은 각 개발 환경에 대해 사용자가 입력한 그래픽 프로세서 할당량을 수신하는 데 사용된다. 본 출원의 일부 실시예에서, 목표 개발 환경에 대응하는 목표 노드에 대응하는 그래픽 프로세서 자원을 배치하 고, 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 할당 개수를 포함하고, 할당 모듈은 목표 개발 환경 에 현재 사용되고 있는 그래픽프로세서 할당 개수를 결정하는 데 사용되고; 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량 개수보다 적은 경우, 현재 사용되지 않는 목표 노드에 해당하는 그래픽 프 로세서 자원의 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하고; 현재 사용되는 그래 픽 프로세서의 개수가 목표 그래픽 프로세서 할당량 개수와 같은 경우, 현재 목표 개발 환경에서 사용되는 그래 픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 본 출원의 일부 실시예에서, 할당 모듈은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정하는 데 사 용되며; 필요한 그래픽 프로세서의 개수가 현재 사용되는 그래픽 프로세서의 개수보다 많은 경우, 스케줄링 실 패 정보를 생성하고; 필요한 그래픽 프로세서의 개수가 현재 사용 중인 그래픽 프로세서의 개수보다 많지 않은 경우, 목표 개발 환경에서 현재 사용 중인 그래픽 프로세서를 태스크 개수에 따라 정렬하고, 그 중 태스크 개수 가 가장 작은 상위 N개의 그래픽 프로세서로에서 목표 훈련 태스크에 그래픽 프로세서의 자원을 할당하고; 여기 서, N은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수이다. 본 출원의 일부 실시예에서, 할당 모듈은 목표 개발 환경에서 현재 사용되지 않는 그래픽 프로세서의 현재 태스 크 개수를 결정하고, 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정하는 데 사 용되고; 현재 그래픽 프로세서 개수가 태스크 개수 임계값보다 적고, 목표 훈련 태스크가 필요한 그래픽 프로세 서 개수보다 적은 경우, 현재 태스크 개수가 태스크 개수임계값 미만인 그래픽 프로세서 및 현재 사용되고 있는 목표 개발 환경의 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서의 자원을 할당하고; 현재 태스크 개수가 태스크 개수 임계값의 그래픽 프로세서의 개수보다 적고, 목표 훈련 태스크가 필요한 그래픽 프로세서의 개수보다 적지 않은 경우, 현재 태스크 개수가 태스크 수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크 에 그래픽 프로세서 자원을 할당한다. 본 출원의 일부 실시예에서, 할당 모듈은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수와 목표 노드에 대 응하는 그래픽 프로세서 자원에서 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 개수에 따라 재사 용 그래픽 프로세서의 개수를 결정하는 데 사용되며; 현재 사용되는 그래픽 프로세서의 개수가 재사용 그래픽 프로세서의 개수보다 적은 경우, 스케줄링 실패 정보를 생성하고, 현재 사용되는 그래픽 프로세서의 개수가 재 사용 그래픽 프로세서의 개수보다 적지 않은 경우, 목표 개발 환경에서 현재 사용되는 그래픽 프로세서에서 태 스크수가 가장 적은 상위 M개의 그래픽 프로세서와 현재 태스크수가 태스크수 임계값 미만인 그래픽 프로세에서 목표 훈련 태스크에 프로세스 자원을 할당하고; 여기서, M은 재사용되는 그래픽 프로세서의 개수이다. 본 출원의 일부 실시예에서, 장치는 할당 정보 생성 모듈을 더 포함하고; 할당 정보 생성 모듈은 각 개발 환경에 대한 그래픽 프로세서 자원의 할당 정보를 생성하고 저장하는 데 사용된 다. 본 출원의 일부 실시예에서, 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 비디오 메모리 할당량 용량 을 더 포함하며, 할당 모듈은 목표 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 목표 훈련 태스크에 그 래픽 프로세서 비디오 메모리 용량을 할당하는 데 사용된다. 본 출원의 일부 실시예에서, 할당 모듈은 목표 훈련 태스크의 시작을 감지하면, 목표 개발 환경에서 다른 훈련 태스크가 있는지 여부를 판단하는 데 사용되고; 목표 개발 환경에 다른 훈련 태스크가 없는 경우, 목표 그래픽 프로세서 비디어 메모리 할당량 용량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당하 고; 목표 개발 환경에 이미 다른 훈련 태스크가 있는 경우, 목표 훈련 태스크에 따라 목표 개발 환경의 나머지 그래픽 프로세서 비디오 메모리 할당량 용량을 결정하고, 목표 개발 환경의 나머지 그래픽 프로세서 비디오 메 모리 할당량 용량에 따라 할당 정보를 업데이트한다. 본 출원의 일부 실시예에서, 장치는 제1 재활용 모듈을 더 포함하고; 제1 재활용 모듈은 목표 훈련 태스크가 종료된 것을 감지하면 목표 훈련 태스크에 할당된 그래픽 프로세서 자원 을 재활용하는 데 사용된다. 본 출원의 일부 실시예에서, 장치는 제2 재사용 모듈을 더 포함하고; 제2 재활용 모듈은 미리 설정된 주기동안 목표 훈련 태스크에 대한 심박 정보가 수신되지 않을 경우, 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 재활용하는 데 사용된다.본 출원의 실시예는 또한 프로세서, 메모리 및 메모리에 저장되고 프로세서 상에서 동작할 수 있는 컴퓨터 프로 그램을 포함하는 전자 장치를 제공하며, 컴퓨터 프로그램이 프로세서에 의해 실행될 때 위와 같은 자원을 할당 하는 방법을 구현한다. 본 출원의 실시예는 컴퓨터 프로그램을 저장하는 비휘발성 컴퓨터 가독 저장 매체를 더 제공하며, 컴퓨터 프로 그램이 프로세서에 의해 실행될 때 위와 같은 자원 할당 방법을 구현한다."}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 출원의 실시예는 다음과 같은 장점이 있다. 본 출원 실시예에서, 목표 개발 환경에서 목표 훈련 태스크의 시작을 감지하면 클라이언트 플러그인 라이브러리 의 로딩이 트리거되어 클라이언트 플러그인 라이브러리가 목표 훈련 태스크의 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션하여 딥러닝 프레임워크의 시작 프로세스를 하이재킹하고, 이 과정에서 목표 그래픽 프로세 서 요청을 생성하여 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하도록 요청할 수 있다. 본 출원의 실시예 는 선행기술과 비교하여 딥 러닝 프레임워크의 관점에서 시작하여 훈련 태스크가 시작 시 딥 러닝 프레임워크의 로딩 논리를 분석하고 프레임워크를 하이재킹하여 동적 그래픽 프로세서 공유를 실현하며, 방법은 간단하고 프 레임워크를 수정할 필요가 없으며 사용자가 사용할 때 무감각하며 기본 그래픽 프로세서 공유 모드만큼 유연하 다. 동시에 그래픽 프로세서 동적 공유 논리를 기반으로 그래픽 프로세서 자원을 개발 환경과 분리하고 사용자 가 실제로 훈련 태스크를 시작할 때만 그래픽 프로세서 자원을 할당하여 사전 할당 모드에서 사용자가 그래픽 프로세서 자원을 점유하는 문제를 해결하고 노드 그래픽 프로세서 자원을 효율적으로 사용하여 노드 전체 그래 픽 프로세서 자원의 활용률을 향상시킨다."}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "위에서 언급한 본 출원의 목적, 특징 및 장점을 보다 명확하고 이해하기 쉽게 하기 위해 도면 및 구체적인 구현 방법을 결합하여 본 출원에 대해 자세히 설명한다. 분명히 설명된 실시예는 전체 실시예가 아니라 본 출원의 일 부이다. 본 출원의 실시예에 따르면 이 분야의 일반 기술자가 창조적 노동을 하지 않고 획득한 다른 모든 실시 예는 본 출원의 보호 범위에 속한다. 그래픽 프로세서 자원의 활용도를 향상시키기 위해 본 출원의 실시예는 인공지능 훈련 시스템에 적용할 수 있는 자원 할당 방법을 제공하며 인공지능 훈련 시스템은 이미지 인식 훈련 등과 같은 태스크 훈련에 사용할 수 있다. 인공지능 훈련 시스템은 클라이언트 플러그인 라이브러리와 적어도 하나 이상의 노드를 포함할 수 있으며 각 노 드에는 여러 개발 환경이 생성되고 클라이언트 플러그인 라이브러리는 그래픽 프로세서 자원 및 태스크 보존을 요청하는 데 사용할 수 있다. 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 클라이언트 플러그인 라이브러리의 로드가 트리 거된다. 따라서 클라이언트 플러그인 라이브러리는 목표 훈련 태스크의 목표 딥 러닝 프레임워크의 로딩 프로세 스를 리디렉션하여 딥 러닝 프레임워크의 시작 프로세스를 하이재킹하고 이 과정에서 목표 그래픽 프로세스 요 청을 생성하여 목표 훈련 태스크에 그래픽 프로세서 자원의 할당을 요청한다. 본 출원의 실시예는 선행기술과 비교하여 딥 러닝 프레임워크의 관점에서 시작하며 훈련 태스크가 시작될 때 딥 러닝 프레임워크의 로딩 논리를 분석하고 프레임워크를 하이재킹하여 동적 그래픽 프로세서 공유를 실현하며 이 방법은 간단하고 프레임워크를 수정할 필요가 없으며 사용자가 사용할 때 무감각이고 기본 그래픽 프로세서 공 유 모드만큼 유연하다. 그리고 그래픽 프로세서의 동적 공유 논리를 기반으로 그래픽 프로세서 자원을 개발 환경과 분리하고 사용자가 실제로 훈련 태스크을 시작할 때만 그래픽 프로세서 자원을 할당하여 사전 할당 모드에서 사용자가 그래픽 프로 세서 자원을 점유하는 문제를 해결하고 노드 그래픽 프로세서 자원을 효율적으로 사용하여 노드의 전체 그래픽 프로세서 자원의 활용률을 향상시킨다. 도 1을 참조하면, 인공지능 훈련 시스템에 적용할 수 있는 본 출원 실시예의 자원 할당 방법에 대한 단계 흐름 도가 도시되어 있다. 인공지능 훈련 시스템은 클라이언트 플러그인 라이브러리와 적어도 하나의 노드를 포함할 수 있으며 각 노드는 여러 개발 환경을 생성할 수 있다. 구체적으로 다음과 같은 단계를 포함할 수 있다. 단계 101은 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 클라이언트 플러그인 라이브러리에 서 목표 그래픽 프로세서 요청을 획득하고; 여기서 목표 그래픽 프로세서 요청은 클라이언트 플러그인 라이브러 리가 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 목표 훈련 태스크의 목표 딥 러닝 프레임 워크의 로딩 프로세스를 리디렉션한 후 생성된다. 여기서, 클라이언트 플러그인 라이브러리는 실제 상황에 따라 설정할 수 있으며 이는 그래픽 프로세서 자원과 태스크 보존 등의 기능을 요청하는데 사용할 수 있으며 기타 기능에도 사용할 수 있다. 예를 들어 훈련 태스크 완성 정보 전송 등이고, 본 출원의 구현에 제한이 없다. 목표 훈련 태스크는 사용자가 목표 개발 환경에서 시작한 훈련 태스크일 수 있다. 예를 들어 이미지 인식 훈련 태스크일 수 있다. 목표 딥 러닝 프레임워크는 사용자가 필요에 따라 선택한 딥 러닝 프레임워크일 수 있다. 예를 들어 caffe (C++ 언어로 작성된 딥 러닝 프레임워크), TensorFlow (Python 언어를 기반으로 완전히 설계된 오픈 소스 소프트웨어), pytorch (딥 러닝 모델을 구성하는데 사용되는 완전한 기능 프레임워크, 이미지 인식 및 언어 처 리와 같은 응용 프로그램에 일반적으로 사용되는 머신러닝), mxnet(클라우드 인프라 또는 모바일 장치 모두에서 다양한 장치에서 사용자가 심층 신경망을 정의, 훈련 및 할당할 수 있는 오픈 소스 딥 러닝 프레임워크) 등은 본 출원의 구현에 제한되지 않는다. 실제 응용에서 노드의 전체 그래픽 프로세서 자원의 활용률을 향상시키기 위해 인공지능 훈련 시스템에 클라이 언트 플러그인 라이브러리를 설정할 수 있다. 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 클라이언트 플러그인 라이브러리의 로드가 트리거된다. 이때 클라이언트 플러그인 라이브러리는 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션하고 해당 목표 그래픽 프로세서 요청을 생성할 수 있다. 본 출원의 일부 실시예에서는 목표 그래픽 프로세서 요청사항에는 목표 훈련 태스크에 필요한 그래픽 프로세서 자원, 목표 개발 환경 표식 등이 포함될 수 있으며 이 출원의 실시예에는 제한이 없다. 클라이언트 플러그인 라이브러리는 목표 그래픽 프로세서 요청을 생성한 후 인공지능 훈련 시스템에서 노드 관 리자에게 보낼 수 있다. 노드 관리자는 그래픽 프로세서 자원의 할당에 사용할 수 있다. 단계 102는 목표 그래픽 프로세서 요청에 따라 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 노드 관리자는 목표 그래픽 프로세서 요청을 받은 후 해당 목표 그래픽 프로세서 요청에 응답하여 목표 훈련 태 스크에 그래픽 프로세서 자원을 할당할 수 있다. 예를 들어 본 출원의 실시예는 목표 훈련 태스크에 할당할 그 래픽 프로세서 및 그래픽 프로세서의 개수 목표 훈련 태스크에 할당할 디스플레이 용량 등에 대해 제한되지 않 는다. 이때 사용자가 실제로 훈련 태스크를 시작할 때만 그래픽 프로세서 자원을 할당하여 사전 할당 모드에서 사용자 가 그래픽 프로세서 자원을 점유하는 문제를 해결하고 노드 그래픽 프로세서 자원을 효율적으로 사용하며 노드 의 전체 그래픽 프로세서 자원의 활용률을 향상시킨다. 본 출원의 일부 실시예에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한 후 목표 딥 러닝 프레임워크는 노드 관리자를 사용하여 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하고 인공지능 훈련을 수행할 수 있다. 본 출원의 일부 예제에서는 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지했을 때 클라이언트 플러 그인 라이브러리의 로드를 트리거한다. 따라서 클라이언트 플러그인 라이브러리는 목표 훈련 태스크의 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션하여 딥 러닝 프레임워크의 시작 프로세스를 하이재킹하고 이 과정 에서 목표 그래픽 프로세서 요청을 생성하여 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 본 출원의 실시예는 선행기술과 비교하여 딥 러닝 프레임워크의 관점에서 시작하며 훈련 태스크가 시작될 때 딥 러닝 프레 임워크의 로딩 논리를 분석하고 프레임워크를 하이재킹하여 동적 그래픽 프로세서 공유를 실현하며 이 방법은 간단하고 프레임워크를 수정할 필요가 없으며 사용자가 사용할 때 무감각이고 기본 그래픽 프로세서 공유 모드 만큼 유연하다. 그리고 그래픽 프로세서의 동적 공유 논리를 기반으로 그래픽 프로세서 자원을 개발 환경과 분 리하고 사용자가 실제로 훈련 태스크를 시작할 때만 그래픽 프로세서 자원을 할당하여 사전 할당 모드에서 사용 자가 그래픽 프로세서 자원을 점유하는 문제를 해결하고 노드 그래픽 프로세서 자원을 효율적으로 사용하여 노 드의 전체 그래픽 프로세서 자원의 활용률을 향상시킨다. 도 2를 참조하면 본 출원의 실시예에서 다른 자원 할당 방법의 단계 흐름도를 나타내며 다음 단계를 포함할 수 있다. 단계 201는 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 클라이언트 플러그인 라이브러리에 서 목표 그래픽 프로세서 요청을 획득한다. 실제 응용에서 노드의 전체 그래픽 프로세서 자원의 활용률을 향상시키기 위해 인공지능 훈련 시스템에 클라이 언트 플러그인 라이브러리를 설정할 수 있다. 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 클라이언트 플러그인 라이브러리의 로드가 트리거된다. 이때, 클라이언트 플러그인 라이브러리는 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션하고 해당 목표 그래픽 프로세서 요청을 생성할 수 있다. 클라이언트 플러그인 라이브러리는 목표 그래픽 프로세서 요청을 생성한 후 인공지능 훈련 시스템의 노드 관리 자에게 보낼 수 있다. 단계 202는 목표 개발 환경을 위해 미리 설정된 목표 그래픽 프로세서 할당량을 결정한다. 여기서, 목표 그래픽 프로세서 할당량은 사용자가 목표 개발 환경에 미리 설정하고 개발 환경에서 가장 많이 사 용할 수 있는 그래픽 프로세서 자원이 될 수 있다. 예를 들어 사용 가능한 그래픽 프로세서의 최대 개수 비디오 메모리 크기 등은 본 출원의 구현에 제한되지 않는다. 본 출원의 일부 실시예에서는 각 개발 환경에 대해 사용자가 입력한 그래픽 프로세서 할당량을 사전에 수신할 수 있다. 실제 응용에서 그래픽 프로세서 할당의 전제 조건 중 하나는 훈련 태스크에 필요한 그래픽 프로세서 자원을 아 는 것이다. 예를 들어 그래픽 프로세서의 개수와 비디오 메모리 크기 등이 있다. 그러나 훈련 태스크가 시작될 때 이러한 유형의 정보는 노드 관리자 특히 필요한 그래픽 프로세서 비디오 메모리 크기에 대해 잘 모를 수 있 다. 이를 통해 개발 환경 생성시 사용자로부터 그래픽 프로세서 할당량을 입력 받을 수 있다. 그런 다음 노드 관리 자는 목표 개발 환경에서 목표 훈련 태스크에 대한 그래픽 프로세서 자원 할당이 필요할 때 이를 저장할 수 있 다. 노드 관리자는 또한 개발 환경에 미리 설정된 그래픽 프로세서 할당량을 기반으로 그래픽 프로세서 자원을 할당할 수 있다.단계 203는 목표 그래픽 프로세서 할당량과 목표 그래픽 프로세서 요청사항에 따라 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 목표 개발 환경에 대한 목표 그래픽 프로세서 할당량 및 목표 그래픽 프로세서 요청을 받은 후 목표 그래픽 프 로세서 할당량 및 목표 그래픽 프로세서 요청을 기반으로 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있다. 예를 들어, 목표 그래픽 프로세서 요청에 목표 훈련 태스크에 필요한 그래픽 프로세서 자원의 정보가 포함되어 있다면 목표 그래픽 프로세서의 요청에 따라 목표 훈련 태스크에 그래픽 프로세서 자원을 직접 할당할 수 있다. 그러나 목표 훈련 태스크에 필요한 그래픽 프로세서 자원이 목표 그래픽 프로세서 할당량을 초과하면 목표 개발 환경이 목표 훈련 태스크를 수행할 수 없음을 나타낼 수 있으며 이때 스케줄링 실패 정보를 생성하여 사용자에 게 반환할 수 있다. 목표 그래픽 프로세서 요청에 목표 훈련 태스크에 필요한 그래픽 프로세서 자원에 대한 정보가 포함되어 있지 않은 경우, 목표 그래픽 프로세서 할당량을 기반으로 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있 으며 본 출원의 실시예는 제한되지 않는다. 본 출원의 실시예에서 목표 개발 환경에 해당하는 목표 노드는 해당 그래픽 프로세서 자원(예: 3개의 그래픽 프 로세서 배치, 5G 비디오 메모리 크기)을 배치할 수 있으며 목표 그래픽 프로세서 할당량에는 목표 그래픽 프로 세서 할당량이 포함되며 목표 그래픽 프로세서 할당량 및 목표 그래픽 프로세서 요청사항에 따라 목표 훈련 태 스크에 그래픽 프로세서 자원을 할당할 때 다음 하위 단계를 통해 할당 프로세스를 실현할 수 있다. 하위 단계 11은 목표 개발 환경의 현재 사용되는 그래픽 프로세서의 개수를 결정한다. 실제 응용에서 목표 개발 환경은 목표 훈련 태스크 뿐만 아니라 다른 훈련 태스크도 진행할 수 있다. 이때 목표 개발 환경에서 이미 사용되고 있는 그래픽 프로세서의 개수 즉 목표 개발 환경에서 현재 진행 중인 훈련 태스크 에 사용되는 그래픽 프로세서의 개수를 먼저 결정할 수 있다. 하위 단계 12는 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량보다 적은 경우 목표 노 드에 해당하는 그래픽 프로세서 자원의 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 목표 개발 환경의 현재 사용중인 그래픽 프로세서 개수를 결정한 후 목표 그래픽 프로세서 할당 개수와의 크기 를 비교할 수 있다. 현재 사용되고 있는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량보다 적으면 목 표 개발 노드에 대한 그래픽 프로세서 할당량이 남아있음을 나타낼 수 있다. 이때, 목표 노드에 해당하는 그래픽 프로세서 자원의 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서 에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하여 목표 훈련 태스크가 새로운 그래픽 프로세서를 사용 하여 훈련할 수 있도록 할 수 있다. 본 출원의 일부 실시예에서 하위 단계 12의 할당 단계는 다음과 같은 단계를 통해 달성할 수 있다. 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 현재 태스크 개수를 결정하고 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정한다. 현재 태스크 개수가 태스크 개수 임계값 미만 인 그래픽 프로세서의 개수보다 적고 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 적으면 현재 태스 크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서 및 목표 개발 환경의 현재 사용 그래픽 프로세서에서 목 표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프 로세서의 개수가 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 적으면 현재 태스크 개수가 태스크 개 수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 구체적으로, 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 현재 태스크 수를 결정하고 현재 태스 크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정할 수 있다. 그런 다음 현재 태스크 개수 가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수와 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 비교할 수 있다. 여기서, 태스크 데이터의 임계값은 실제 상황에 따라 설정할 수 있으며 본 출원의 구현은 제한 되지 않는다. 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수보다 적고 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 적으면 목표 개발 환경에서 사용되지 않는 그래픽 프로세서가 목표 훈련 태스크의그래픽 프로세서 자원의 요청사항을 충족할 수 없음을 나타낼 수 있다. 이때, 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서와 목표 개발 환경의 현재 사용되는 그래 픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하여 가능한 한 많은 그래픽 프로세서를 통해 목표 훈련 태스크을 완료할 수 있다. 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 목표 훈련 태스크에 필요한 그래픽 프로세서 개수보다 적지 않으면 목표 개발 환경에서 사용되지 않는 그래픽 프로세서가 목표 훈련 태스크의 그래 픽 프로세서 자원의 요청사항을 충족할 수 있음을 나타낼 수 있다. 이때, 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세 서 자원을 할당하여 목표 훈련 태스크에 새로운 그래픽 프로세서를 할당할 수 있다. 하위 단계 13은 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량과 같으면 현재 목표 개 발 환경에서 사용되는 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량과 같으면 목표 개발 노드에 대한 그래픽 프로세서 할당량이 남아 있지 않음을 나타낼 수 있다. 이때, 목표 개발 환경에서 사용되는 현재 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할 당할 수 있다. 본 출원의 일부 실시예에서 하위 단계 13의 할당 단계는 다음과 같은 단계를 통해 구현될 수 있다. 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정한다. 필요한 그래픽 프로세서의 개수가 현재 사용되 고 있는 그래픽 프로세서의 개수보다 많을 경우 스케줄링 실패 정보를 생성하고 필요한 그래픽 프로세서의 개수 가 현재 사용되고 있는 그래픽 프로세서의 개수보다 많을 경우 현재 목표 개발 환경에서 사용되고 있는 그래픽 프로세서를 정렬하고, 태스크 개수가 가장 작은 상위 N개의 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프 로세서의 자원을 할당한다. 여기서, N은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수이다. 구체적으로, 먼저 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정할 수 있다. 그런 다음 목표 훈련 태스크에 필요한 그래픽 프로세서 개수와 목표 개발 환경의 현재 사용된 그래픽 프로세서 개수의 관계를 비교한 다. 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수가 목표 개발 환경의 현재 사용되는 그래픽 프로세서의 개수 보다 많으면 목표 개발 환경이 목표 훈련 태스크의 그래픽 프로세서의 자원 요청사항을 충족할 수 없음을 나타 낼 수 있다. 이때 스케줄링 실패 정보를 생성하여 사용자에게 반환할 수 있다. 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수가 목표 개발 환경의 현재 사용되는 그래픽 프로세서의 개수 보다 적으면 목표 개발 환경이 목표 훈련 태스크의 그래픽 프로세서의 자원 요청사항을 충족할 수 있음을 나타 낼 수 있다. 이때, 현재 목표 개발 환경에서 사용되는 그래픽 프로세서를 태스크 개수별로 정렬하고 태스크 개수가 가장 작 은 상위 N개의 그래픽 프로세서로부터 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있다. 여기서, N 은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 나타낼 수 있다. 본 출원의 일 실시예에서 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서와 목표 개발 환경의 현재 사용 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 때 다음 단계를 통해 할당 프로세스를 수행할 수 있다. 목표 훈련 태스크에 필요한 그래픽 프로세스의 개수, 목표 노드에 대응하는 그래픽 프로세스의 자원 중 현재 목 표 개발 환경에서 사용되지 않는 그래픽 프로세스의 개수에 따라 재사용 그래픽 프로세스의 개수를 결정한다. 현재 사용되고 있는 그래픽 프로세스의 개수가 재사용 그래픽 프로세스의 개수보다 적을 경우 스케줄링 실패 정 보가 생성된다.만약 현재 이미 사용되고 있는 그래픽 프로세스의 개수가 재사용 그래픽 프로세스의 개수보다 적 지 않다면 목표 개발 환경에서 현재 사용되고 있는 그래픽 프로세스중 태스크 개수가 가장 작은 상위 M개의 그 래픽 프로세스와 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세스에서 목표 훈련 태스크에 그래 픽 프로세스의 자원을 할당한다. 여기서, M은 재사용 가능한 그래픽 프로세스의 개수이다.구체적으로, 먼저 목표 훈련 태스크에 필요한 그래픽 프로세스의 개수와 목표 노드에 대응하는 그래픽 프로세스 의 자원중 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세스의 개수에 따라 재사용해야 할 그래픽 프로 세스의 개수를 결정할 수 있다. 예를 들어 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수는 목표 노드에 해당하는 그래픽 프로세서 자원의 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 개수를 빼는 데 사용할 수 있다. 그런 다음 재사용해야 하는 그래픽 프로세서의 개수와 목표 개발 환경의 현재 사용된 그래픽 프로세서의 개수 간의 관계를 비교할 수 있다. 목표 개발 환경의 현재 사용중인 그래픽 프로세스의 개수가 재사용이 필요한 그래픽 프로세스의 개수보다 적으 면 목표 개발 환경에서 목표 훈련 태스크를 수행할 수 없음을 나타낼 수 있다. 이때 스케줄링 실패 정보를 생성 하여 사용자에게 보낼 수 있다. 목표 개발 환경의 현재 사용되는 그래픽 프로세서의 개수가 재사용해야 하는 그래픽 프로세서의 개수보다 적으 면 목표 개발 환경이 목표 훈련 태스크를 수행할 수 없음을 나타낼 수 있으며 새로운 그래픽 프로세서가 할당된 후 목표 훈련 태스크를 수행할 수 있다. 구체적으로, 목표 개발 환경에서 현재 사용되고 있는 그래픽 프로세서중 태스크 개수가 가장 적은 상위 M개의 그래픽 프로세서를 먼저 확정할 수 있다. 그런 다음 목표 개발 환경에서 현재 사용되는 그래픽 프로세서에서 태 스크 개수가 가장 적은 상위 M개의 그래픽 프로세서와 현재 태스크 수가 태스크 수 임계값 미만인 그래픽 프로 세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있다. 실제 응용 프로그램에서 할당 프로세스를 위해 각 개발 환경에 대한 그래픽 프로세서 자원의 할당 정보를 생성 하고 저장할 수도 있으므로 노드 관리자가 할당 정보를 기반으로 각 개발 환경의 그래픽 프로세서 할당을 결정 할 수 있다. 도 3은 본 출원의 실시예중 하나인 그래픽 프로세서 스케줄링의 단계 흐름도를 보여준다. 그래픽 프로세서 요청을 처리할 때 먼저 개발 환경에서 현재 사용되는 그래픽 프로세서의 개수를 구하여 제1 개 수로 기록한다. 그런 다음 개발 환경의 할당량을 기반으로 개발 환경에서 현재 사용 가능한 새로운 그래픽 프로 세서의 개수(제2 개수로 기록됨)=개발 환경의 할당량-제1 개수를 계산한다. 제2 개수=0이면 제1 개수가 훈련 태스크에 필요한 그래픽 프로세서의 개수(제3 개수로 기록됨)보다 작은지 여부 를 다시 판단할 수 있다. 제1 개수가 제3 개수보다 적으면 스케줄링에 실패한다. 만약 제1 개수가 제3 개수보다 적지 않다면 태스크 개수에 따라 작은 것부터 큰 것까지 현재 목표 개발 환경에서 사용되는 그래픽 프로세서를 정렬하여 제1 집합을 얻는다. 그런 다음 제1 집합에서 상위 제3 개수의 그래픽 프로세서를 선택하여 훈련 태스 크에 그래픽 프로세서 자원을 할당한다. 이때 성공적인 스케줄링을 한다. 제2 개수가 0과 같지 않으면 조건을 충족하는 상위 제2 개수 새로운 그래픽 프로세서를 얻을 수 있으며(현재 태 스크 수는 태스크 수 임계값 미만) 제2 집합으로 기록된다. 제2 집합의 그래픽 프로세서 개수가 제3 개수보다 많으면 제2 집합의 상위 제3 개수 그래픽 프로세서를 직접 선택하여 훈련 태스크에 그래픽 프로세서 자원을 할 당하고 이때 성공적으로 스케줄링된다. 제2 집합에 있는 그래픽 프로세서의 개수가 제3 개수를 초과하지 않는 경우 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서와 개발 환경의 현재 사용되는 그래픽 프 로세서에서 그래픽 프로세서 자원을 훈련 태스크에 할당한다. 구체적으로 먼저 태스크 개수에 따라 작은 것부터 큰 것까지 현재 목표 개발 환경에서 사용되는 그래픽 프로세 서를 정렬하여 제3 집합을 얻을 수 있다. 그런 다음 훈련 태스크에 필요한 그래픽 프로세서의 개수와 노드에 해 당하는 그래픽 프로세서 자원의 현재 개발 환경에서 사용되는 않은 그래픽 프로세서의 개수에 따라 재사용된 그 래픽 프로세서의 개수(제4 개수로 기록됨)=세번째-제2 개수로 결정된다. 제4 개수가 제3 집합의 그래픽 프로세서의 개수보다 많으면 스케줄에 실패한다. 제4 개수가 제3 집합의 그래픽 프로세서 개수보다 크지 않은 경우 제2 집합 및 제3 집합의 상위 제4 개수의 그래픽 프로세서에서 훈련 태스크 에 그래픽 프로세서 자원을 할당한다. 본 출원의 다른 실시예에서 목표 그래픽 프로세서 할당량에는 목표 그래픽 프로세서 비디오 메모리 할당량 용량 이 더 포함되고 목표 그래픽 프로세서의 비디오 메모리 할당량 용량은 사용자가 미리 입력할 수 있다. 목표 그래픽 프로세서 할당량과 목표 그래픽 프로세서 요청사항에 따라 목표 훈련 태스크에 그래픽 프로세서 자 원을 할당할 때 다음 하위 단계도 포함될 수 있다. 하위 단계 21은 목표 그래픽 프로세서 비디오 메모리 할당량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디 오 메모리 용량을 할당한다. 실제 응용에서 목표 훈련 태스크에 필요한 그래픽 프로세서의 비디오 메모리 용량은 알기 어렵다. 따라서 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당할 때 목표 그래픽 프로세서 비디오 메모리 할당량을 기반으로 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 직접 할당할 수 있다. 중복 할당을 극복하기 위해 본 출원의 실시예에서 할당량은 목표 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당할 때 다음 단계를 통해 할당 프로세스를 실현할 수 있다. 목표 훈련 태스크 시작시 목표 개발 환경에 다른 훈련 태스크가 존재하는지 여부 판단한다. 만약 목표 개발 환 경에 다른 훈련 태스크가 없다면 목표 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당한다. 목표 개발 환경에 다른 훈련 태스크가 있는 경우 목표 개발 환경에 남아 있는 그래픽 프로세서 비디오 메모리 할당량 용량을 결정하고 목표 개발 환경에 남아 있는 그래픽 프로세서 비디오 메모리 할당량 용량에 따라 할당 정보를 업데이트한다. 목표 훈련 태스크에 그래픽 프로세서의 비디오 메모리 용량을 할당할 때 먼저 목표 개발 환경에 다른 훈련 태스 크가 있는지 여부를 판단할 수 있다. 목표 훈련 태스크을 시작할 때 목표 개발 환경에 다른 훈련 태스크가 없는 경우 목표 그래픽 프로세서에 따라 할당량 용량을 직접 저장하고 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당할 수 있다. 목표 훈련 태스크을 시작할 때 목표 개발 환경에 다른 훈련 태스크이 있는 경우 할당은 목표 그래픽 프로세서의 메모리 할당량에 따라 직접 수행된다. 목표 그래픽 프로세서 비디오 메모리 할당량은 목표 개발 환경에서 사용 할 수 있는 최대 그래픽 프로세서 비디오 메모리 용량이며 더 이상 할당할 수 없다. 이때 더 이상 목표 훈련 태스크에 새로운 그래픽 프로세서 비디오 메모리 용량을 할당하지 않고 목표 개발 환경 에 할당된 그래픽 프로세서 비디오 메모리 용량을 직접 호출하여 목표 훈련 태스크를 실행할 수 있다. 본 출원의 일부 실시예에서 목표 개발 환경의 그래픽 프로세서 비디오 메모리 용량은 고정되어 있다. 따라서 목 표 개발 환경의 그래픽 프로세서 비디오 메모리 용량을 목표 훈련 태스크에 할당한 후 목표 훈련 태스크에 따라 훈련할 수 있다. 목표 개발 환경의 나머지 그래픽 프로세서 비디오 메모리 할당량을 결정하고 목표 개발 환경의 나머지 그래픽 프로세서 비디오 메모리 할당량에 따라 할당 정보를 업데이트한다. 그런 다음 후속 목표 개발 환경이 새로운 훈련 태스크를 시작하면 먼저 할당 정보를 기반으로 목표 개발 환경의 나머지 그래픽 프로세서 비디오 메모리 할당량을 결정하고 나머지 그래픽 프로세서 비디오 메모리 할당량을 기 반으로 목표 개발 환경이 새로운 훈련 태스크를 정상적으로 실행할 수 있는지 여부를 판단할 수 있다. 도 4와 같이 그래픽 프로세서를 할당할 때 현재 할당된 그래픽 프로세서가 새 것인지 여부를 결정한다. 그렇다 면 개발 환경에 해당하는 그래픽 프로세서 비디오 메모리 할당량과 현재 할당된 그래픽 프로세서 비디오 메모리 용량에 따라 개발 환경의 나머지 그래픽 프로세서 비디오 메모리 할당량을 구하고 개발 환경에 그래픽 프로세서 를 추가하고 해당 그래픽 프로세서 아래에 훈련 태스크 정보를 추가한다. 새 것이 아닌 경우 해당 그래픽 프로세서에 훈련 태스크에 대한 정보를 추가한다. 그런 다음 할당된 그래픽 프로세서가 새 것인지 여부를 계속 판단한다. 이때 그래픽 프로세서의 나머지 자원에 따라 큰 것부터 작은 것 순으로 그래픽 프로세서를 정렬하고 태스크정보를 시간 초과 메커니즘에 추가하여 훈련 태스크 시간 초과되었는지 여부를 판단할 수 있다. 다른 개발 환경/훈련 태스크에서 사용할 수 있도록 그래픽 프로세서 자원의 효과적인 회수를 보장하기 위해 본 출원의 한 실시예에서 그래픽 프로세서 자원을 회수하는 다음 단계중 하나이상을 포함할 수도 있다. 첫번째 유형은 목표 훈련 태스크가 종료되는 것이 감지되면 목표 개발 환경에 할당된 그래픽 프로세서 자원을 회수하는 것이다. 실제 적용에서 목표 훈련 태스크가 종료된 것을 감지하면 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수할 수 있으며 동시에 새로운 목표 개발 환경에 해당하는 할당 정보를 회수할 수 있다.두번째 유형은 미리 설정된 주기 동안 목표 훈련 태스크에 대한 심박 정보가 수신되지 않는 경우 목표 훈련 태 스크에 할당된 그래픽 프로세서 자원을 회수한다. 클라이언트 플러그인 라이브러리는 목표 훈련 태스크이 실행중인 것을 감지하면 미리 설정된 주기에 따라 목표 훈련 태스크에 대한 심박 정보를 노드 관리자에게 전송할 수 있다. 노드 관리자가 미리 설정된 기간 동안 목표 훈련 태스크에 대한 심박 정보를 받지 못하면 목표 훈련 태스크이 비정상적일수 있음을 나타낼 수 있으며 이때 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수할 수 있 으며 동시에 목표 개발 환경에 해당하는 할당 정보를 업데이트할 수 있다. 도 5와 같이 본 출원 실시예의 또 다른 그래픽 프로세서스 케줄링을 나타내는 흐름도이다. 훈련 태스크를 시작한 후 딥 러닝 프레임워크를 실행하여 클라이언트 플러그인 라이브러리 논리를 트리거하고 이때 개발 환경의 그래픽 프로세서 할당량을 얻을 수 있다. 그래픽 프로세서 할당량이 0이면 개발 환경의 훈련 태스크이 그래픽 프로세서 자원을 사용할 수 없음을 의미하 며 그래픽 프로세서 태스크에 대해 오류가 발생하여 종료하거나 중앙 프로세서 훈련만 사용할 수 있다. 그래픽 프로세서 할당량이 0이 아닌 경우 훈련 태스크에 할당된 그래픽 프로세서의 개수로 결정할 수 있다. 그래픽 프로세서의 개수가 0이면 훈련 태스크에 그래픽 프로세서를 사용할 수 없음을 의미하며 그래픽 프로세서 수행에 대한 오류로 종료되거나 중앙 프로세서만 사용할 수 있다. 그래픽 프로세서의 개수가 0이 아닌 경우 클라이언트 플러그인 라이브러리는 노드 관리자와 통신 및 심박 보고 핸들을 생성하고 노드 관리자에게 그래픽 프로세서를 요청하고 노드 관리자의 응답을 기다릴 수 있다. 응답하면 성공적으로 할당되고 훈련 태스크가 실행되며 훈련 태스크가 끝나면 노드 관리자에게 작업 완료 정보 가 전송된다. 응답하지 않으면 할당에 실패했음을 의미하며 이때 자원부족으로 할당에 실패했는지 여부를 판단할 수 있다. 그 렇다면 그래픽 프로세서를 계속 요청하고 그렇지 않으면 할당에 실패하고 작업이 종료된다. 본 출원의 실행 예에서는 목표 개발 환경에서 목표 훈련 태스크의 시작을 감지하면 클라이언트 플러그인 라이브 러리에서 목표 그래픽 프로세서 요청을 획득한다. 목표 개발 환경에 미리 설정된 목표 그래픽 프로세서 할당량 을 결정한다. 목표 그래픽 프로세서 할당량과 목표 그래픽 프로세서 요청에 따라 목표 훈련 태스크에 그래픽 프 로세서 자원을 할당한다. 노드 그래픽 프로세서 자원의 초과 할당(즉 개발 환경에 대한 그래픽 프로세서 할당량 사전 구성)을 기반으로 사용자 개발 환경이 그래픽 프로세서 자원을 점유하는 문제를 해결하고 노드 그래픽 프 로세서 자원의 활용률을 향상시킨다. 방법의 실시형태는 간단한 설명을 위해 일련의 동작 조합으로 표현되지만 당업자는 다음을 알아야 한다. 일부 단계는 본 출원 실시예에 따라 다른 순서 또는 동시에 수행될 수 있으므로 본 출원 실시예는 설명된 동작 순서 에 의해 제한되지 않는다. 다음은 이 분야의 기술자는 또한 설명서에 설명된 실시예가 모두 바람직한 실시예이 며 관련된 조치가 본 출원의 구현에 반드시 필요한 것은 아님을 알아야 한다. 도 6을 참조하여 본 출원의 실시 형태 인공지능 훈련 시스템의 구조적 개략도를 나타내며 각 노드에는 여러 개 발 환경이 생성된 적어도 하나의 노드, 노드 관리자 및 클라이언트 플러그인 라이브러리가 포함될 수 있다. 클라이언트 플러그인 라이브러리는 목표 개발 환경에서 목표 훈련 태스크의 시작을 감지하면 목표 훈련 태스크 의 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션한 후 목표 그래픽 프로세서 요청을 생성하고 목표 그 래픽 프로세서 요청을 노드 관리자에게 보내는 데 사용된다. 실제 응용에서 노드의 전체 그래픽 프로세서 자원의 활용률을 향상시키기 위해 인공지능 훈련 시스템에 클라이 언트 플러그인 라이브러리를 설정할 수 있다. 목표 개발 환경에서 목표 훈련 태스크가 시작되었음을 감지하면 클라이언트 플러그인 라이브러리의 로드가 트리거된다. 이때 클라이언트 플러그인 라이브러리는 목표 딥 러닝 프레임워크의 로딩 프로세스를 리디렉션하고 해당 목표 그래픽 프로세서 요청을 생성할 수 있다. 클라이언트 플러그인 라이브러리는 목표 그래픽 프로세서 요청을 생성한 후 인공지능 훈련 시스템의 노드 관리 자에게 보낼 수 있다.본 출원의 실시예에서 노드 관리자는 목표 그래픽 프로세서 요청에 응답하고 목표 훈련 태스크에 그래픽 프로세 서 자원을 할당하는 데 사용된다. 목표 그래픽 프로세서 요청을 받은 후 노드 관리자는 목표 그래픽 프로세서 요청에 응답하여 목표 훈련 태스크 에 그래픽 프로세서 자원을 할당할 수 있다. 일 실시예에 있어서, 노드 관리자는 목표 개발 환경을 위해 미리 설정된 목표 그래픽 프로세서 할당량을 결정하 는 데 사용할 수도 있다. 목표 그래픽 프로세서 할당량과 목표 그래픽 프로세서 요청사항에 따라 목표 훈련 태 스크에 그래픽 프로세서 자원을 할당한다. 또 다른 일 실시예에 있어서, 노드 관리자는 보조 모듈을 포함할 수 있다. 보조 모듈은 노드 관리자의 할당 프 로세스를 기록한다. 구체적으로 할당 프로세스와 관련하여 보조 모듈은 각 개발 환경에 대한 그래픽 프로세서 자원의 할당 정보를 생성하고 저장할 수 있으므로 노드 관리자가 할당 정보를 기반으로 각 개발 환경의 그래픽 프로세서 할당을 결정할 수 있다. 본 출원의 한 실시예에서 목표 딥 러닝 프레임워크는 인공지능 훈련을 위해 노드 관리자가 할당한 그래픽 프로 세서 자원을 사용한다. 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한 후 목표 딥 러닝 프레임워크는 노드 관리자를 사용하여 목 표 훈련 태스크에 그래픽 프로세서 자원을 할당하고 인공지능 훈련을 수행할 수 있다. 실제 적용에서 그래픽 프로세서 할당의 전제 조건중 하나는 그래픽 프로세서의 개수와 디스플레이 크기와 같은 훈련 태스크에 필요한 그래픽 프로세서 자원을 아는 것이다. 그러나 훈련 태스크이 시작될 때 이러한 유형의 정 보는 노드 관리자 특히 필요한 그래픽 프로세서 디스플레이 크기에 대해 잘 모를 수 있다. 이를 통해 개발 환경 생성시 사용자로부터 그래픽 프로세서 할당량을 입력 받을 수 있다. 그런 다음 노드 관리 자는 목표 개발 환경에서 목표 훈련 태스크에 대한 후속 그래픽 프로세서 자원 할당이 필요한 경우 노드 관리자 는 개발 환경을 위해 미리 설정된 그래픽 프로세서 할당량을 기반으로 그래픽 프로세서 자원을 할당할 수도 있 다. 일 실시예에서, 노드 관리자는 그래픽 프로세서 관리 모듈을 포함할 수 있다. 그래픽 프로세서 관리 모듈은 각 개발 환경에 대해 사용자가 입력한 그래픽 프로세서 할당량을 저장하는 데 사용된다. 목표 개발 환경에 대한 목표 그래픽 프로세서 할당량 및 목표 그래픽 프로세서 요청을 받은 후 노드 관리자는 목표 그래픽 프로세서 할당량 및 목표 그래픽 프로세서 요청을 기반으로 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있다. 목표 그래픽 프로세서 요청에 목표 훈련 태스크에 필요한 그래픽 프로세서 자원에 대한 정보가 포함되어 있지 않은 경우 노드 관리자는 목표 그래픽 프로세서 할당량을 기반으로 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있다. 본 출원의 일 실시예에서 목표 개발 환경에 해당하는 목표 노드는 상응하는 그래픽 프로세서 자원을 할당하고 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 할당량을 포함한다. 노드 관리자는 목표 개발 환경의 현 재 사용중인 그래픽 프로세서의 개수를 결정하는 데 사용된다. 만약 현재 이미 사용되고 있는 그래픽 프로세서 개수가 목표 그래픽 프로세서 할당 개수보다 적으면 목표 노드에 대응하는 그래픽 프로세서 자원중 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량과 동일한 경우 현재 목표 개발 환경에서 사용 되는 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 실제 응용에서 목표 개발 환경은 목표 훈련 태스크뿐만 아니라 다른 훈련 태스크도 진행할 수 있다. 이때 노드 관리자는 먼저 목표 개발 환경에서 이미 사용되는 그래픽 프로세서의 개수 즉 목표 개발 환경에서 현재 진행중 인 훈련 태스크에 사용되는 그래픽 프로세서의 개수를 결정할 수 있다. 목표 개발 환경의 현재 이미 사용되고 있는 그래픽 프로세서의 개수를 결정한후 노드 관리자는 목표 그래픽 프 로세서 할당 개수와의 크기를 비교할 수 있다.현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량보다 적으면 목표 개발노드에 대한 그래픽 프로세서 할당량이 남아있음을 나타낼 수 있다. 이때 노드 관리자는 목표노드에 해당하는 그래픽 프로세서 자원의 현재 목표 개발 환경에서 사용되지 않는 그래 픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하여 목표 훈련 태스크이 새로운 그래픽 프로세서를 사용하여 훈련할 수 있도록 할 수 있다. 본 출원의 일 실시예에서 노드 관리자는 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 현재 태스 크 개수를 결정하고 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정하는데 사용 된다. 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 목표 훈련 태스크에 필요한 그 래픽 프로세서의 개수보다 적은 경우 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서 및 목표 개발 환경의 현재 사용 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 현재 태스 크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 적으면 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래 픽 프로세서 자원을 할당한다. 실제 응용 프로그램에서 노드 관리자는 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 현재 태스크 개수를 결정하고 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정할 수 있다. 현 재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 목표 훈련 태스크에 필요한 그래픽 프 로세서의 개수보다 적으면 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서 및 목표 개발 환경 의 현재 사용 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 현재 태스크 수가 태 스크 수 임계값 미만인 그래픽 프로세서의 개수가 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 적으 면 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 구체적으로 노드 관리자는 먼저 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 현재 태스크 개수를 결정 하고 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정할 수 있다. 그런 다음 노 드 관리자는 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수와 목표 훈련 태스크에 필 요한 그래픽 프로세서의 개수를 비교할 수 있다. 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수보다 적고 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 적으면 목표 개발 환경에서 사용되지 않는 그래픽 프로세서가 목표 훈련 태스크의 그래픽 프로세서 자원의 요청사항을 충족할 수 없음을 나타낼 수 있다. 이때 노드 관리자는 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서와 목표 개발 환경의 현재 사용 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하여 가능한 한 많은 그래픽 프로세 서를 통해 목표 훈련 태스크을 완료할 수 있다. 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수보다 적고 목표 훈련 태스크에 필요한 그래픽 프로세서 개수보다 적으면 목표 개발 환경에서 사용되지 않는 그래픽 프로세서가 목표 훈련 태스크의 그 래픽 프로세서 자원의 요청사항을 충족할 수 있음을 나타낼 수 있다. 이때 노드 관리자는 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하여 목표 훈련 태스크에 새로운 그래픽 프로세서를 할당할 수 있다. 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량과 동일한 경우 노드 관리자는 목표 개발 환경에서 사용되는 현재 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있다. 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량과 같으면 목표 개발 노드에 대한 그래픽 프로세서 할당량이 남아있지 않음을 나타낼 수 있다. 이때 노드 관리자는 현재 목표 개발 환경에서 사용되는 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세 서 자원을 할당할 수 있다. 본 출원의 일 실시예에서 노드 관리자는 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정하는데 사용 된다. 필요한 그래픽 프로세서 개수가 현재 사용 중인 그래픽 프로세서 개수보다 클 경우 스케줄링 실패 정보를 생성한다. 필요한 그래픽 프로세서의 개수가 현재 사용되는 그래픽 프로세서의 개수를 초과하지 않는 경우 현재 목표 개발 환경에서 사용되는 그래픽 프로세서의 개수를 태스크 수에 따라 정렬하고 태스크수가 가장 적은 상위 N개의 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하고 여기서, N은 목표 훈련 태스 크에 필요한 그래픽 프로세서의 개수를 할당한다. 실제 응용에서 노드 관리자는 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정할 수 있다. 필요한 그 래픽 프로세서의 개수가 현재 사용되고 있는 그래픽 프로세서의 개수보다 많으면 스케줄링 실패 정보를 생성하고 필요한 그래픽 프로세서의 개수가 현재 사용되고 있는 그래픽 프로세서의 개수보다 적으면 태스크 개수에 따 라 현재 목표 개발 환경에서 사용되는 그래픽 프로세서를 정렬하고 태스크 개수가 가장 적은 상위 N개의 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하며 여기서, N은 목표 훈련 태스크에 필요한 그 래픽 프로세서의 개수이다. 구체적으로 노드 관리자는 먼저 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정할 수 있다. 그런 다 음 목표 훈련 태스크에 필요한 그래픽 프로세서 개수와 목표 개발 환경의 현재 사용된 그래픽 프로세서 개수의 관계를 비교한다. 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수가 목표 개발 환경의 현재 사용되는 그래픽 프로세서의 개수 보다 많으면 목표 개발 환경이 목표 훈련 태스크의 그래픽 프로세서의 자원 요청사항을 충족할 수 없음을 나타 낼 수 있다. 이때 노드 관리자는 스케줄링 실패 정보를 생성하고 사용자에게 반환할 수 있다. 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수가 목표 개발 환경의 현재 사용되는 그래픽 프로세서의 개수 보다 적으면 목표 개발 환경이 목표 훈련 태스크의 그래픽 프로세서의 자원 요청사항을 충족할 수 있음을 나타 낼 수 있다. 이때 노드 관리자는 현재 목표 개발 환경에서 사용되는 그래픽 프로세서를 태스크 개수에 따라 정렬하고 태스크 개수가 가장 작은 상위 N개의 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있다. 여기서, N은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 나타낼 수 있다. 본 출원의 일 실시예에서 노드 관리자는 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수와 목표 노드에 대 응하는 그래픽 프로세서 자원중 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 개수에 따라 재사용 그래픽 프로세서의 개수를 결정하는데 사용된다. 현재 사용되고 있는 그래픽 프로세서의 개수가 재사용 그래픽 프로세서의 개수보다 적으면 스케줄링 실패 정보가 생성된다. 현재 사용되는 그래픽 프로세서의 개수가 재사용 그래픽 프로세서 개수보다 적으면 목표 개발 환경에서 현재 사용되는 그래픽 프로세서 중 태스크 개수가 가장 작은 처음 M개의 그래픽 프로세서와 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에 목표 훈 련 태스크에 그래픽 프로세서 자원을 할당하고 여기서 M은 재사용 그래픽 프로세서의 개수이다. 구체적으로 노드 관리자는 먼저 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수와 목표 노드에 해당하는 그 래픽 프로세서 자원 중 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 개수에 따라 재사용해야 할 그래픽 프로세서의 개수를 결정할 수 있다. 예를 들어 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수로 목 표 노드에 대응하는 그래픽 프로세서의 자원 중 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 개 수를 뺄 수 있다. 따라서 재사용해야 하는 그래픽 프로세서의 개수를 얻는다. 그런 다음 노드 관리자는 재사용해야 하는 그래픽 프로세서의 개수와 목표 개발 환경의 현재 사용된 그래픽 프 로세서의 개수 사이의 관계를 비교할 수 있다. 목표 개발 환경의 현재 사용중인 그래픽 프로세서의 개수가 재사용이 필요한 그래픽 프로세서의 개수보다 적으 면 목표 개발 환경에서 목표 훈련 태스크를 수행할 수 없음을 나타낼 수 있다. 이때 노드 관리자는 스케줄링 실 패 정보를 생성하여 사용자에게 보낼 수 있다. 목표 개발 환경의 현재 사용되는 그래픽 프로세서의 개수가 재사용해야 하는 그래픽 프로세서의 개수보다 적으 면 목표 개발 환경이 목표 훈련 태스크를 수행할 수 없음을 나타낼 수 있으며 새로운 그래픽 프로세서가 할당된 후 목표 훈련 태스크를 수행할 수 있다. 구체적으로 노드 관리자는 먼저 목표 개발 환경에서 현재 사용되는 그래픽 프로세서 중 태스크 개수가 가장 적 은 상위 M개의 그래픽 프로세서를 결정할 수 있다. 그런 다음 노드 관리자는 목표 개발 환경에서 현재 사용되는 그래픽 프로세서에서 태스크 개수가 가장 적은 상위 M개의 그래픽 프로세서와 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당할 수 있다. 본 출원의 일 실시예에서 노드 관리자는 보조 모듈을 포함할 수 있다. 보조 모듈은 노드 관리자의 할당 과정을 기록하고 각 개발 환경에 대한 그래픽 프로세서 자원의 할당 정보를 생성 및 저장하는 데 사용된다. 구체적으로 할당 프로세스와 관련하여 보조 모듈은 각 개발 환경에 대한 그래픽 프로세서 자원의 할당 정보를 생성하고 저장할 수 있으므로 노드 관리자가 할당 정보를 기반으로 각 개발 환경의 그래픽 프로세서 할당을 결정할 수 있다. 본 출원의 다른 실시형태에서 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 비디오 메모리 할당량도 포 함하고 목표 그래픽 프로세서의 메모리 할당량은 사용자가 미리 입력할 수 있다. 노드 관리자는 또한 목표 그래 픽 프로세서 비디오 메모리 할당량을 기반으로 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당 하는 데 사용된다. 실제 응용 프로그램에서 목표 그래픽 프로세서 할당량과 목표 그래픽 프로세서 요청사항에 따라 목표 훈련 태스 크에 그래픽 프로세서 자원을 할당할 때 다음과 같은 하위 단계를 포함할 수도 있다. 목표 그래픽 프로세서 비 디오 메모리 할당량에 따라 그래픽 프로세서 비디오 메모리 용량이 목표 훈련 태스크에 할당된다. 실제 응용에서 목표 훈련 태스크에 필요한 그래픽 프로세서의 메모리 용량은 알기 어렵다. 따라서 목표 훈련 태 스크에 그래픽 프로세서 비디오 메모리 용량을 할당할 때 목표 그래픽 프로세서 비디오 메모리 할당량을 기반으 로 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 직접 할당할 수 있다. 중복 할당을 극복하기 위해 본 출원의 실시예에서 할당량은 목표 그래픽 프로세서 비디오 메모리 할당량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 할당량을 할당할 때 다음 단계를 통해 할당 프로세스를 실 현할 수 있다. 본 출원의 일 실시예에서 노드 관리자는 목표 훈련 태스크를 시작할 때 목표 개발 환경에 이미 다른 훈련 태스 크가 있는지 여부를 판단하기 위해 사용된다. 만약 목표 개발 환경에 다른 훈련 태스크가 없다면 목표 그래픽 프로세서 비디오 메모리 할당량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당한다. 목표 개발 환경에 다른 훈련 태스크가 있는 경우 목표 개발 환경에 남아 있는 그래픽 프로세서의 메모리 할당량 을 결정하고 목표 개발 환경에 남아 있는 그래픽 프로세서의 메모리 할당량에 따라 할당 정보를 업데이트한다. 실제 응용에서 노드 관리자는 목표 훈련 태스크를 시작할 때 목표 개발 환경에 이미 다른 훈련 과제가 있는지 여부를 판단한다. 만약 목표 개발 환경에 다른 훈련 태스크가 없다면 목표 그래픽 프로세서 비디오 메모리 할당 량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당한다. 목표 개발 환경에 다른 훈련 태스크가 있는 경우 목표 개발 환경에 남아 있는 그래픽 프로세서의 메모리 할당량을 결정하고 목표 개발 환경 에 남아 있는 그래픽 프로세서의 메모리 할당량에 따라 할당 정보를 업데이트한다. 목표 훈련 태스크에 그래픽 프로세서의 메모리 용량을 할당할 때 노드 관리자는 먼저 목표 개발 환경에 다른 훈 련 태스크가 있는지 여부를 판단할 수 있다. 목표 훈련 태스크를 시작할 때 목표 개발 환경에 다른 훈련 태스크이 없는 경우 노드 관리자는 목표 그래픽 프 로세서를 기반으로 할당량을 직접 저장하고 목표 훈련 태스크에 그래픽 프로세서의 저장 용량을 할당할 수 있다. 목표 훈련 태스크를 시작할 때 목표 개발 환경에 다른 훈련 태스크가 있는 경우 할당은 목표 그래픽 프로세서 비디오 메모리 할당량을 직접 기반으로 수행되기 때문에 목표 그래픽 프로세서 비디오 메모리 할당량은 목표 개 발 환경에서 사용할 수 있는 최대 그래픽 프로세서 비디오 메모리 용량이기 때문에 더 이상 할당할 수 없다. 이때 노드 관리자는 더 이상 목표 훈련 태스크에 새로운 그래픽 프로세서 비디오 메모리 용량을 할당하지 않고 목표 훈련 태스크을 실행하기 위해 목표 개발 환경에 할당된 그래픽 프로세서 비디오 메모리 용량을 직접 호출 할 수 있다. 본 출원의 일부 실시예에서 목표 개발 환경의 그래픽 프로세서 비디오 메모리 용량은 고정되어 있다. 따라서 목 표 개발 환경의 그래픽 프로세서 비디오 메모리 용량을 목표 훈련 태스크에 할당한 후 목표 훈련 태스크에 따라 목표 개발 환경의 나머지 그래픽 프로세서 비디오 메모리 할당량을 결정할 수 있으며 목표 정보는 목표 개발 환 경의 나머지 그래픽 프로세서 비디오 메모리 할당량에 따라 업데이트된다. 그런 다음 후속 목표 개발 환경이 새로운 훈련 업을 시작하면 노드 관리자는 먼저 할당 정보를 기반으로 목표 개발 환경의 나머지 그래픽 프로세서 비디오 메모리 할당량을 결정하고 나머지 그래픽 프로세서 비디오 메모리 할당량을 기반으로 목표 개발 환경이 새로운 훈련 태스크를 정상적으로 실행할 수 있는지 여부를 판단할 수 있 다. 다른 개발 환경/훈련 태스크에서 사용할 수 있도록 그래픽 프로세서 자원의 효과적인 재활용을 보장하기 위해 본 출원의 구현 예에서 노드 관리자는 목표 훈련 태스크이 종료된 것을 감지하면 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수하는 데에도 사용된다. 실제 응용 프로그램에서 목표 훈련 태스크이 종료된 것을 감지하면 노드 관리자는 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수할 수 있다. 동시에 보조 모듈은 새로운 목표 개발 환경에 해당하는 정보를 할당할 수 있다. 본 출원의 다른 실시예에서 노드 관리자는 미리 설정된 주기 동안 목표 훈련 태스크에 대한 심박 정보를 받지 못한 경우 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수하는 데에도 사용된다. 클라이언트 플러그인 라이브러리는 목표 훈련 태스크가 실행중인 것을 감지하면 미리 설정된 주기에 따라 목표 훈련 태스크에 대한 심박 정보를 노드 관리자에게 전송할 수 있다. 노드 관리자는 미리 설정된 주기내에 목표 훈련 태스크에 대한 심박 정보를 받지 못하면 목표 훈련 태스크에 이 상이 생겼음을 나타낼 수 있으며 이때 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수할 수 있고 목표 개발 환경에 해당하는 할당 정보를 업데이트할 수 있다. 동시에 목표 개발 환경에 해당하는 할당 정보를 업데이 트할 수 있다. 도 7과 같이, 본 출원의 실시예 중 하나인 인공지능 훈련 시스템의 일부 구조 모식도가 나와있다. node manager (노드 매니저)와 container(개발 환경)간에는 통신 모듈을 통한 통신이 가능하며 양자는 UDP(User Datagram Protocol, 사용자 데이터 그램 프로토콜)로 통신하거나 IPC(Inter-Process Communication, 프로세스 간 통신)로 통신할 수 있다. Jobs(분산작업 스케줄링 플랫폼)에서 보낸 작업을 받은 후 딥 러닝 프레임워크(예: tf, pytorch)가 시작되고 딥 러닝 프레임워크가 시작되면 Client-plugin(클라이언트 제어 라이브러리) 로드가 트리거되며 Client-plugin은 node Manager에게 그래픽 프로세서를 요청하는 정보를 보내고 node Manager의 할당을 기다릴 수 있다. 할당 완료된 후 훈련 태스크는 할당된 그래픽 프로세서 자원을 기반으로 훈련할 수 있다. 이때 Client-plugin은 node manager에게 심장 박동을 보고하고 작업 지속 시간을 지속적으로 업데이트할 수 있다. 훈련 태스크가 완료되면 Client-plugin은node manager에게 task done 정보를 보내는 것과 같은 태스크의 후속작 업을 수행할 수 있다. node manager는 그래픽 프로세서를 요청하는 정보를 받은 후 이 정보를 처리할 수 있고 그래픽 프로세서 자원을 관리하여 훈련 태스크를 위해 그래픽 프로세서 자원을 할당할 수 있다. 할당된 정책을 얻은 후 정보에 응답하고 client-plugin에respone 그래픽 프로세서 요청을 보낼 수 있다. 또한 node manager는 시간 초과 관리도 할 수 있으며 구체적으로node manager는 미리 설정된 주기내에 훈련 태 스크에 대한 심박 정보를 받았는지 여부에 따라 훈련 태스크에 할당된 그래픽 프로세서 자원을 회수해야 하는지 여부를 판단할 수 있다. 위에서 언급한 자원 할당 방법은 위에서 언급한 인공지능 훈련 시스템에 적용될 수 있다. 본 출원의 실시예는 적어도 하나의 노드, 노드 관리자 및 클라이언트 플러그인 라이브러리를 포함하는 인공지능 훈련 시스템을 제공하며 각 노드에는 여러 개발 환경이 생성된다.클라이언트 플러그인 라이브러리는 목표 개발 환경에서 목표 훈련 태스크의 시작을 감지하면 목표 훈련 태스크의 목표 딥 러닝 프레임워크의 로딩 프로세스를 재연결한후 목표 그래픽 프로세서 요청을 생성하는 데 사용된다. 노드 관리자에게 목표 그래픽 프로세서 요청을 보낸다. 노드 관리자는 목표 그래픽 프로세서의 요청에 대응하여 목표 훈련 태스크에 그래픽 프로세서의 자원을 할당하는 데 사용된다. 목표 딥 러닝 프레임워크는 노드 관리자가 할당한 그래픽 프로세서 자원을 사용하여 인 공지능 훈련을 수행한다. 본 출원 실시예를 통해 딥 러닝 프레임워크의 관점에서 분석 및 훈련 태스크 시작시 딥 러닝 프레임워크의 로딩 로직이 구현된다. 프레임을 하이재킹하여 동적 그래픽 프로세서 공유를 실현하고 이 방법은 간단하고 프레임을 수정할 필요가 없으며 사용자가 사용할 때 인지하지 못하며 기본 그래픽 프로세서 공 유 모드만큼 유연하다. 그리고 그래픽 프로세서의 동적 공유 논리를 기반으로 그래픽 프로세서 자원을 개발 환경과 분리하고 사용자가 실제로 훈련 태스크을 시작할 때만 그래픽 프로세서 자원을 할당하여 사전 할당 모드에서 사용자가 그래픽 프로 세서 자원을 점유하는 문제를 해결하고 노드 그래픽 프로세서 자원을 효율적으로 사용하여 노드의 전체 그래픽 프로세서 자원의 활용률을 향상시킨다.도 8을 참조하면 본 출원의 실시예의 자원 할당 장치의 구조 모식도는 클라이언트 플러그인 라이브러리와 각 노 드에 여러 개발 환경이 구축된 적어도 하나의 노드를 포함하는 인공지능 훈련 시스템에 적용되는 것이다. 구체적으로 요청 모듈 및 할당 모듈을 포함할 수 있다. 요청 모듈은 목표 개발 환경에서 목표 훈련 태스크의 시작을 감지하면 클라이언트 플러그인 라이브러리에 서 목표 그래픽 프로세서 요청을 가져오기 위해 사용된다. 목표 그래픽 프로세서 요청은 클라이언트 플러그인 라이브러리가 목표 개발 환경에서 목표 훈련 태스크의 시작을 감지하면 목표 훈련 태스크의 목표 딥 러닝 프레 임워크의 로딩 프로세스를 리디렉션한 후 생성된다. 할당 모듈은 목표 그래픽 프로세서 요청에 응답하고 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하는 데 사용된다. 본 출원의 일부 실시예에서 할당 모듈은 목표 개발 환경에 미리 설정된 목표 그래픽 프로세서 할당량을 결 정하는데 사용된다. 목표 그래픽 프로세서 할당량과 목표 그래픽 프로세서 요청사항에 따라 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 본 출원의 일부 실시예에서, 장치는 할당 수신 모듈을 더 포함하고; 할당 수신 모듈은 각 개발 환경에 대해 사용자가 입력한 그래픽 프로세서 할당량을 수신하는데 사용된다. 본 출원의 일부 실시예에서 목표 개발 환경에 해당하는 목표 노드는 대응하는 그래픽 프로세서 자원을 할당하고 목표 그래픽 프로세서 할당량은 목표 그래픽 프로세서 할당량을 포함하며 할당 모듈은 목표 개발 환경의 현재 이미 사용되고 있는 그래픽 프로세서의 개수를 결정하는 데 사용된다. 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량보다 적은 경우 목표 노드에 해당하는 그래픽 프로세서 자원 중 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당하고 현재 사용되는 그래픽 프로세서의 개수가 목표 그래픽 프로세서 할당량 개수와 같다면 현재 목표 개발 환경에서 사용 되는 그래픽 프로세서에서 목표 훈련 태스크에 그래프 프로세서 자원을 할당한다. 본 출원의 일부 실시예에서 할당 모듈은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수를 결정하는데 사용된다. 필요한 그래픽 프로세서의 개수가 현재 사용 중인 그래픽 프로세서의 개수보다 클 경우 스케줄링 실 패정보를 생성한다. 필요한 그래픽 프로세서의 개수가 현재 사용되고 있는 그래픽 프로세서의 개수 이하일 경우 현재 목표 개발 환경에서 사용되고 있는 그래픽 프로세서를 태스크 개수에 따라 정렬하고 태스크 개수가 가장 작은 상위 N개의 그래픽프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 여기서, N은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수이다. 본 출원의 일부 실시예에서 할당 모듈은 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 현재 태스크 개수를 결정하고 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수를 결정하는데 사용된다. 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 목표 훈련 태스크에 필요 한 그래픽 프로세서의 개수보다 적으면 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서와 목표 개발 환경의 현재 사용 그래픽 프로세서에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 현재 태스 크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서의 개수가 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수보다 적으면 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서에서 목표 훈련 태스크에 그래 픽 프로세서 자원을 할당한다. 본 출원의 선택적 실시예에서 할당 모듈은 목표 훈련 태스크에 필요한 그래픽 프로세서의 개수와 목표노드 에 대응하는 그래픽 프로세서 자원 중 현재 목표 개발 환경에서 사용되지 않는 그래픽 프로세서의 개수에 따라 재사용 그래픽 프로세서의 개수를 결정한다. 현재 사용되고 있는 그래픽 프로세서의 개수가 재사용 그래픽 프로 세서의 개수보다 적을 경우 스케줄링 실패정보가 생성된다. 현재 사용되고 있는 그래픽 프로세서의 개수가 재사 용 그래픽 프로세서의 개수보다 작지 않은 경우 목표 개발 환경의 현재 사용중인 그래픽 프로세서 중 태스크 개 수가 가장 적은 상위 M개의 그래픽 프로세서와 현재 태스크 개수가 태스크 개수 임계값 미만인 그래픽 프로세서 에서 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 여기서, M은 재사용 가능한 그래픽 프로세서의 개 수이다. 본 출원의 일부 실시예에서 장치에는 할당 정보 생성 모듈이 더 포함된다. 할당 정보 생성 모듈은 각 개발 환경에 대한 그래픽 프로세서 자원의 할당 정보를 생성하고 저장하는데 사용된 다. 본 출원의 일부 실시형태에서 목표 그래픽 프로세서 할당량에는 목표 그래픽 프로세서 비디오 메모리 할당량 용 량도 포함된다. 할당 모듈에 따르면 목표 그래픽 프로세서의 할당 용량을 기반으로 목표 훈련 태스크에 그 래픽 프로세서의 저장 용량을 할당하는 데에도 사용된다. 본 출원의 일부 실시예에서 할당 모듈은 목표 훈련 태스크를 시작할 때 목표 개발 환경에 이미 다른 훈련 태스크가 있는지 여부를 판단하는데 사용된다. 만약 목표 개발 환경에 다른 훈련 태스크가 없다면 목표 그래픽 프로세서 비디오 메모리 할당량에 따라 목표 훈련 태스크에 그래픽 프로세서 비디오 메모리 용량을 할당한다. 목표 개발 환경에 다른 훈련 태스크가 있는 경우 목표 개발 환경에 남아 있는 그래픽 프로세서의 메모리 할당량 을 결정하고 목표 개발 환경에 남아있는 그래픽 프로세서의 메모리 할당량에 따라 할당 정보를 업데이트한다. 본 출원의 일부 실시예에서 장치에는 제1 재활용 모듈이 더 포함된다. 제1 재활용 모듈은 목표 훈련 태스크이 종료된 것으로 감지되면 목표 훈련 태스크에 할당된 그래픽 프로세서 자 원을 재활용하는데 사용된다. 본 출원의 일부 실시예에서 장치에는 제2 재활용 모듈이 더 포함된다. 제2 재활용 모듈은 미리 설정된 기간 동안 목표 훈련 태스크에 대한 심박 정보를 수신하지 않을 때 목표 훈련 태스크에 할당된 그래픽 프로세서 자원을 재활용 하는데 사용된다. 본 출원의 실시예에서 목표 개발 환경에서 목표 훈련 태스크 시작이 감지되면 클라이언트 플러그인 라이브러리 의 로딩이 트리거된다. 따라서 클라이언트 플러그인 라이브러리는 목표 훈련 태스크의 목표 딥 러닝 프레임워크 의 로딩 프로세스를 리디렉션하여 딥 러닝 프레임워크의 시작 프로세스를 하이재킹하고 이 프로세스에서 목표 그래픽 프로세서 요청을 생성하여 목표 훈련 태스크에 그래픽 프로세서 자원을 할당한다. 본 출원의 실시예는 선행기술과 비교하여 딥 러닝 프레임워크의 관점에서 시작하며 훈련 태스크이 시작될 때 딥 러닝 프레임워크의 로딩 논리를 분석하고 프레임워크를 하이재킹하여 동적 그래픽 프로세서 공유를 실현하며 이 방법은 간단하고 프레임워크를 수정할 필요가 없으며 사용자가 사용할 때 인식이 없고 기본 그래픽 프로세서 공유 모드만큼 유연 하다. 그리고 그래픽 프로세서의 동적 공유 논리를 기반으로 그래픽 프로세서 자원을 개발 환경과 분리하고 사 용자가 실제로 훈련 태스크를 시작할 때만 그래픽 프로세서 자원을 할당하여 사전 할당 모드에서 사용자가 그래 픽 프로세서 자원을 점유하는 문제를 해결하고 노드 그래픽 프로세서 자원을 효율적으로 사용하여 노드의 전체 그래픽 프로세서 자원의 활용률을 향상시킨다. 본 출원의 실시예는 또한 도9와 같이 전자 장치, 메모리 및 메모리에 저장되어 프로세서에서 작 동할 수 있는 컴퓨터 프로그램을 포함하는 프로세서를 제공하며 컴퓨터 프로그램은 프로세서에 의해 실행될 때 위와 같은 자원 할당 방법을 실현한다. 본 출원의 실시예는 또한 도10과 같이 컴퓨터 프로그램이 저장되고 컴퓨터 프로그램이 프로세서에 의해 실행될 때 위와 같은 자원 할당 방법이 실현되는 비휘발성 컴퓨터 판독 가능한 매체를 제공한다. 장치 실시예의 경우 기본적으로 방법 실시예와 유사하기 때문에 설명이 비교적 간단하며 관련 사항은 방법 실시 예의 일부 설명을 참조하면 된다. 이 설명서의 각 실시예는 점진적인 방식으로 설명되며 각 실시예의 주요설명은 다른 실시예와 다른 점이며 각 실시예 간의 동일하고 유사한 부분은 상호 참조할 수 있다. 당업자는 본 출원의 실시예는 방법, 장치 또는 컴퓨터 프로그램 제품으로 제공될 수 있음을 이해해야 한다. 따 라서 본 출원의 실시예는 완전한 하드웨어 실시예, 완전한 소프트웨어 실시예 또는 소프트웨어 및 하드웨어의 실시예와 결합된 형태를 취할 수 있다. 또한 본 출원의 실시예는 컴퓨터에서 사용할 수 있는 프로그램 코드를 포함하는 하나 이상의 비휘발성 컴퓨터 저장 가능한 매체(디스크 메모리, CD-ROM, 광학 메모리 등 포함하되 이 에 국한되지 않음)에서 구현되는 컴퓨터 프로그램 제품의 형태를 채택할 수 있다. 본 출원의 실시예는 본 출원의 실시예에 따른 방법, 단말 장치(시스템) 및 컴퓨터 프로그램 제품의 흐름도/또는 블록도를 참조하여 설명된다. 흐름도/또는 블록 다이어그램의 각 흐름/또는 블록 다이어그램과 흐름/또는 블록 다이어그램의 흐름/또는 블록 다이어그램의 조합은 컴퓨터 프로그램 명령에 의해 구현될 수 있음을 이해해야 한 다. 일반 컴퓨터, 특수 컴퓨터, 임베디드 프로세서 또는 기타 프로그래밍 가능한 데이터 처리 단말 장치의 프로 세서에 이러한 컴퓨터 프로그램 명령을 제공하여 컴퓨터를 생성할 수 있으며 컴퓨터 또는 기타 프로그래밍 가능한 데이터 처리 단말 장치의 프로세서에 의해 실행되는 명령은 흐름도의 하나 이상의 흐름/또는 블록 다이어그 램의 하나 이상의 지정된 기능을 구현하는 장치이다. 이러한 컴퓨터 프로그램 명령은 컴퓨터 또는 기타 프로그래밍 가능한 데이터 처리 단말 장치가 특정 방식으로 작동하도록 안내할 수 있는 컴퓨터 판독 가능한 메모리에 저장할 수도 있으므로 컴퓨터 판독 가능한 메모리에 저장된 명령은 명령 장치의 제조물을 포함하며 명령 장치는 흐름도의 하나 이상의 흐름/또는 블록 다이어그램의 하나 이상의 지정된 기능을 구현한다. 이러한 컴퓨터 프로그램 명령은 컴퓨터 또는 기타 프로그래밍 가능한 데이터 처리 단말 장치에도 로드되어 컴퓨 터 또는 기타 프로그래밍 가능한 단말 장치에서 일련의 t수행 단계를 수행하여 컴퓨터 구현 처리를 생성할 수 있다. 따라서 컴퓨터 또는 기타 프로그래밍 가능한 단말 장치에서 실행되는 명령은 흐름도의 하나이상의 흐름/ 또는 블록도의 하나 이상의 블록에 지정된 기능을 구현하는 단계를 제공한다. 본 출원 실시예의 바람직한 실시예가 설명되었지만 이 분야의 기술자는 기본 진보성 개념을 알게 되면 이러한 실시예를 추가로 변경 및 수정할 수 있다. 따라서 첨부된 청구항은 바람직한 실시예 및 본 출원의 실시예 범위 에 속하는 모든 변경 및 수정을 포함하는 것으로 해석하고자 한다. 마지막으로 본 명세서에서 제1 및 제2와 같은 관계 용어는 한 개체 또는 작업을 다른 개체 또는 작업과 구별하 는 데만 사용되며 이러한 개체 또는 작업 간의 실제 관계 또는 순서를 반드시 요구하거나 암시하지는 않는다. 또한 용어 '포괄', '포함' 또는 기타 변형은 비독점적으로 포함되도록 의도하여 일련의 요소를 포함하는 프로세 스, 방법, 항목 또는 단말 장치가 그러한 요소 뿐만 아니라 명확하게 나열되지 않은 기타 요소도 포함하거나 프 로세스, 방법, 항목 또는 단말 장치에 고유한 요소를 포함한다. 더 이상의 제한이 없는 경우 \"하나의…\"가 포함 된다로 정의된 요소는 요소를 포함하는 프로세스, 방법, 물품 또는 단말기에 동일한 요소가 있음을 배제하지 않 는다. 이상 제공된 자원의 분배 방법, 장치 및 인공 지능 훈련 시스템에 대해 자세히 소개하였고 본문에서는 구체적인 예를 응용하여 본 출원의 원리 및 실시 방식을 설명하였으며 위의 실시예의 설명은 단지 본 출원의 방법과 그 핵심 사상에 대한 이해를 돕기 위한 것이다. 동시에 이 분야의 일반 기술 인력의 경우 이 출원의 개념에 따라"}
{"patent_id": "10-2024-7041879", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "특정 구현 방법 및 적용 범위가 변경될 수 있으며 요약하면 이 설명서의 내용은 이 출원의 제한으로 이해되어서 는 안된다."}
{"patent_id": "10-2024-7041879", "section": "도면", "subsection": "도면설명", "item": 1, "content": "본 출원의 기술방안을 보다 명확하게 설명하기 위해, 본 출원의 설명에 사용되는 도면이 아래에 간략하게 소개 될 것이며, 분명해야 할 것은, 아래 설명의 도면은 본 출원의 일부 실시예일 뿐이며, 당업자는 창의적인 노력을 기울이지 않고도 이러한 도면을 기반으로 다른 도면을 얻을 수도 있다. 도 1은 본 출원의 실시예에 따른 자원 할당 방법의 단계 흐름도이다. 도 2는 본 출원의 실시예에 따른 다른 자원 할당 방법의 단계 흐름도이다. 도 3은 본 출원의 실시예에 따른 그래픽 프로세서 스케줄링 단계의 흐름도이다. 도 4는 본 출원의 실시예에 따른 다른 그래픽 프로세서 스케줄링 단계의 흐름도이다. 도 5는 본 출원의 실시예에 따른 또 다른 그래픽 프로세서 스케줄링의 개략적인 흐름도이다. 도 6은 본 출원의 실시예에 따른 인공지능 훈련 시스템의 개략적인 구조도이다. 도 7은 본 출원의 실시예에 따른 인공지능 훈련 시스템의 부분 구조 개략도이다. 도 8은 본 출원의 실시예에 따른 자원 할당 장치의 개략적인 구조도이다. 도 9는 본 출원의 실시예에 따른 전자 장치의 개략적인 구조도이다. 도 10은 본 출원의 실시예에 따른 비휘발성 컴퓨터 판독 가능 저장 매체의 개략도이다."}
