{"patent_id": "10-2023-0012931", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2024-0120352", "출원번호": "10-2023-0012931", "발명의 명칭": "곱셈기와 누적기를 이용한 양자화를 수행하는 전자 장치 및 그 제어 방법", "출원인": "삼성전자주식회사", "발명자": "백진환"}}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "메모리;곱셈기(Multiplier) 및 덧셈기(Accumulator)를 포함하는 프로세서;를 포함하며,상기 프로세서는,상기 곱셈기 및 상기 덧셈기를 이용한 활성(Activation) 값 및 가중치(Weight) 값 간의 컨벌루션(convolution)연산에 따라 피승수 데이터를 획득하여 상기 메모리에 저장하고,상기 활성 값을 양자화하기 위한 제1 스케일 팩터(scale factor), 상기 가중치 값을 양자화하기 위한 제2 스케일 팩터 및 상기 피승수 데이터를 양자화하기 위한 제3 스케일 팩터에 기초하여, 승수 데이터 및 비트 시프트(shift) 팩터(factor)를 획득하여 상기 메모리에 저장하고,상기 곱셈기를 이용하여 상기 메모리에 저장된 상기 피승수 데이터, 승수 데이터 및 상기 비트 시프트 팩터 간의 곱셈 연산에 따라 상기 피승수 데이터를 양자화한 정수(integer)를 획득하는, 전자 장치."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 프로세서는,상기 피승수 데이터를 제1 비트(bit)에 대응되는 자릿수 단위로 분할하여 적어도 하나의 제1 파라미터를 획득하고,상기 승수 데이터를 상기 제1 비트에 대응되는 자릿수 단위로 분할하여 적어도 하나의 제2 파라미터를획득하고,상기 적어도 하나의 제1 파라미터와 상기 적어도 하나의 제2 파라미터 간의 곱셈 연산에 따른 복수의 조합을 식별하고,상기 식별된 복수의 조합을 상기 제1 비트 단위로 그룹핑하여 복수의 그룹을 획득하고,상기 곱셈기를 이용하여 상기 복수의 그룹 중 연산 반복 횟수에 따른 제1 그룹에 포함된 조합들에 대응되는 제1중간 연산 값들을 획득하고, 상기 덧셈기를 이용하여 상기 제1 중간 연산 값들의 합을 획득하고,상기 제1 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수를 상기 제1그룹에 대응되는 제1 연산 값으로 획득하여 상기 메모리에 저장하는, 전자 장치."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 프로세서는,상기 연산 반복 횟수가 초기화 설정 값에 대응되면, 상기 제1 중간 연산 값들의 합에 기초하여 상기 제1 연산값을 획득하며,상기 연산 반복 횟수가 상기 초기 설정 값에 대응되지 않으면, 상기 메모리에 직전에 저장된 연산 값 및 상기제1 중간 연산 값들의 합에 기초하여 상기 제1 연산 값을 획득하는. 전자 장치."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,공개특허 10-2024-0120352-3-상기 프로세서는,상기 제1 연산 값을 상기 메모리에 저장한 후에 상기 연산 반복 횟수를 증가시켜 상기 연산 반복 횟수를 증가시키는, 전자 장치."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 프로세서는,상기 곱셈기를 이용하여 상기 복수의 그룹 중 상기 증가된 연산 반복 횟수에 따른 제2 그룹에 포함된 조합들에대응되는 제2 중간 연산 값들을 획득하고,상기 덧셈기를 이용하여 상기 메모리에 저장된 상기 제1 연산 값 및 상기 제2 중간 연산 값들의 합을 획득하고,상기 제1 연산 값 및 상기 제2 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 제외한나머지 수를 상기 제2 그룹에 대응되는 제2 연산 값으로 획득하며,상기 제2 연산 값을 상기 메모리에 저장한 후에 상기 연산 반복 횟수를 증가시키는, 전자 장치."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제2항에 있어서,상기 프로세서는,상기 비트 시프트 팩터에서 연산 반복 횟수만큼 상기 제1 비트에 대응되는 수를 제외한 나머지가 상기 제1 비트에 대응되는 수 이상이면, 상기 곱셈기를 이용하여 상기 복수의 그룹 중 연산 반복 횟수에 따른 제3 그룹에 포함된 조합들에 대응되는 제3 중간 연산 값들을 획득하고, 상기 메모리에 직전에 저장된 제2 연산 값 및 상기 제3 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수를 상기 제3 그룹에 대응되는 제3 연산 값을 획득하며,상기 제3 연산 값을 상기 메모리에 저장한 후에 상기 연산 반복 횟수를 증가시켜 상기 연산 반복 횟수를 증가시키는, 전자 장치."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 프로세서는,상기 비트 시프트 팩터에서 상기 증가된 연산 반복 횟수만큼 상기 제1 비트에 대응되는 수를 제외한 나머지 수가 상기 제1 비트에 대응되는 수 미만이면, 상기 증가된 연산 반복 횟수에 따른 제4 그룹에 포함된 조합들에 대응되는 제4 중간 연산 값들을 획득하고,상기 메모리에 직전에 저장된 상기 제3 연산 값 및 상기 제4 중간 연산 값들의 합에서 상기 나머지 수에 대응되는 자릿수부터 상기 제1 비트에 대응되는 자릿수까지의 수에 기초하여 오버플로우(overflow) 값을 상기 정수로출력하는, 전자 장치."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제6항에 있어서,상기 프로세서는,상기 비트 시프트 팩터에서 상기 증가된 연산 반복 횟수만큼 상기 제1 비트에 대응되는 수를 제외한 나머지 수가 영(zero)이면, 상기 증가된 연산 반복 횟수에 따른 제4 그룹에 포함된 조합들에 대응되는 제4 중간 연산 값들을 획득하고,상기 메모리에 직전에 저장된 상기 제3 연산 값 및 상기 제4 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 상기 정수로 출력하는, 전자 장치.공개특허 10-2024-0120352-4-청구항 9 제2항에 있어서,상기 프로세서는,상기 비트 시프트 팩터에서 상기 연산 반복 횟수만큼 상기 제1 비트에 대응되는 수를 제외한 나머지가 상기 제1비트에 대응되는 수 이상이면, 상기 곱셈기를 이용하여 상기 복수의 그룹 중 상기 연산 반복 횟수에 따른 제3그룹에 포함된 조합들에 대응되는 제3 중간 연산 값들을 획득하고, 상기 메모리에 직전에 저장된 제2 연산 값 및 상기 제3 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수가 영(zero)이면, 상기 제1 비트에 대응되는 자릿수까지의 수를 상기 정수로출력하는, 전자 장치."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "곱셈기(Multiplier), 덧셈기(Accumulator) 및 메모리를 포함하는 전자 장치의 제어 방법에 있어서,상기 곱셈기 및 상기 덧셈기를 이용한 활성(Activation) 값 및 가중치(Weight) 값 간의 컨벌루션(convolution)연산에 따라 피승수 데이터를 획득하여 메모리에 저장하는 단계;상기 활성 값을 양자화하기 위한 제1 스케일 팩터(scale factor), 상기 가중치 값을 양자화하기 위한 제2 스케일 팩터 및 상기 피승수 데이터를 양자화하기 위한 제3 스케일 팩터에 기초하여, 승수 데이터 및 비트 시프트(shift) 팩터(factor)를 획득하여 상기 메모리에 저장하는 단계; 및상기 곱셈기를 이용하여 상기 피승수 데이터, 승수 데이터 및 상기 비트 시프트 팩터 간의 곱셈 연산에 따라 상기 피승수 데이터를 양자화한 정수(integer)를 획득하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 정수를 획득하는 단계는,상기 피승수 데이터를 제1 비트(bit)에 대응되는 자릿수 단위로 분할하여 적어도 하나의 제1 파라미터를 획득하는 단계;상기 승수 데이터를 상기 제1 비트에 대응되는 자릿수 단위로 분할하여 적어도 하나의 제2 파라미터를 획득하는단계;상기 적어도 하나의 제1 파라미터와 상기 적어도 하나의 제2 파라미터 간의 곱셈 연산에 따른 복수의 조합을 식별하는 단계;상기 식별된 복수의 조합을 상기 제1 비트 단위로 그룹핑하여 복수의 그룹을 획득하는 단계;상기 곱셈기를 이용하여 상기 복수의 그룹 중 연산 반복 횟수에 따른 제1 그룹에 포함된 조합들에 대응되는 제1중간 연산 값들을 획득하는 단계;상기 덧셈기를 이용하여 상기 제1 중간 연산 값들의 합을 획득하는 단계; 및,상기 제1 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수를 상기 제1그룹에 대응되는 제1 연산 값으로 획득하여 상기 메모리에 저장하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 제1 연산 값을 획득하는 단계는,상기 연산 반복 횟수가 초기화 설정 값에 대응되면, 상기 제1 중간 연산 값들의 합에 기초하여 상기 제1 연산값을 획득하는 단계; 및상기 연산 반복 횟수가 상기 초기 설정 값에 대응되지 않으면, 상기 메모리에 직전에 저장된 연산 값 및 상기공개특허 10-2024-0120352-5-제1 중간 연산 값들의 합에 기초하여 상기 제1 연산 값을 획득하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서,상기 제1 연산 값을 상기 메모리에 저장한 후에 상기 연산 반복 횟수를 증가시켜 상기 연산 반복 횟수를 증가시키는 단계;를 더 포함하는, 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 정수를 획득하는 단계는,상기 곱셈기를 이용하여 상기 복수의 그룹 중 상기 증가된 연산 반복 횟수에 따른 제2 그룹에 포함된 조합들에대응되는 제2 중간 연산 값들을 획득하는 단계;상기 덧셈기를 이용하여 상기 메모리에 저장된 상기 제1 연산 값 및 상기 제2 중간 연산 값들의 합을 획득하는단계; 및상기 제1 연산 값 및 상기 제2 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 제외한나머지 수를 상기 제2 그룹에 대응되는 제2 연산 값으로 획득하는 단계;를 포함하며,상기 증가시키는 단계는,상기 제2 연산 값을 상기 메모리에 저장한 후에 상기 연산 반복 횟수를 증가시키는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서,상기 정수를 획득하는 단계는,상기 비트 시프트 팩터에서 연산 반복 횟수만큼 상기 제1 비트에 대응되는 수를 제외한 나머지가 상기 제1 비트에 대응되는 수 이상이면, 상기 곱셈기를 이용하여 상기 복수의 그룹 중 연산 반복 횟수에 따른 제3 그룹에 포함된 조합들에 대응되는 제3 중간 연산 값들을 획득하는 단계; 및상기 메모리에 직전에 저장된 제2 연산 값 및 상기 제3 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수를 상기 제3 그룹에 대응되는 제3 연산 값을 획득하는 단계;를 포함하며,상기 증가시키는 단계는,상기 제3 연산 값을 상기 메모리에 저장한 후에 상기 연산 반복 횟수를 증가시켜 상기 연산 반복 횟수를 증가시키는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제15항에 있어서,상기 정수를 획득하는 단계는,상기 비트 시프트 팩터에서 상기 증가된 연산 반복 횟수만큼 상기 제1 비트에 대응되는 수를 제외한 나머지 수가 상기 제1 비트에 대응되는 수 미만이면, 상기 증가된 연산 반복 횟수에 따른 제4 그룹에 포함된 조합들에 대응되는 제4 중간 연산 값들을 획득하는 단계; 및상기 메모리에 직전에 저장된 상기 제3 연산 값 및 상기 제4 중간 연산 값들의 합에서 상기 나머지 수에 대응되는 자릿수부터 상기 제1 비트에 대응되는 자릿수까지의 수에 기초하여 오버플로우(overflow) 값을 상기 정수로출력하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제15항에 있어서,공개특허 10-2024-0120352-6-상기 정수를 획득하는 단계는,상기 비트 시프트 팩터에서 상기 증가된 연산 반복 횟수만큼 상기 제1 비트에 대응되는 수를 제외한 나머지 수가 영(zero)이면, 상기 증가된 연산 반복 횟수에 따른 제4 그룹에 포함된 조합들에 대응되는 제4 중간 연산 값들을 획득하는 단계; 및상기 메모리에 직전에 저장된 상기 제3 연산 값 및 상기 제4 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 상기 정수로 출력하는 단계;를 포함하는 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제11항에 있어서,상기 비트 시프트 팩터에서 상기 연산 반복 횟수만큼 상기 제1 비트에 대응되는 수를 제외한 나머지가 상기 제1비트에 대응되는 수 이상이면, 상기 곱셈기를 이용하여 상기 복수의 그룹 중 상기 연산 반복 횟수에 따른 제3그룹에 포함된 조합들에 대응되는 제3 중간 연산 값들을 획득하는 단계; 및상기 메모리에 직전에 저장된 제2 연산 값 및 상기 제3 중간 연산 값들의 합에서 상기 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수가 영(zero)이면, 상기 제1 비트에 대응되는 자릿수까지의 수를 상기 정수로출력하는 단계;를 포함하는, 제어 방법."}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "전자 장치가 개시된다. 전자 장치는 메모리, 곱셈기(Multiplier) 및 덧셈기(Accumulator)를 포함하는 프로세서를 포함하며, 프로세서는, 곱셈기 및 덧셈기를 이용한 활성(Activation) 값 및 가중치(Weight) 값 간의 컨벌루션 (convolution) 연산에 따라 피승수 데이터를 획득하여 메모리에 저장하고, 활성 값을 양자화하기 위한 제1 스케 일 팩터(scale factor), 가중치 값을 양자화하기 위한 제2 스케일 팩터 및 피승수 데이터를 양자화하기 위한 제3 스케일 팩터에 기초하여, 승수 데이터 및 비트 시프트(shift) 팩터(factor)를 획득하여 메모리에 저장하고, 곱셈 기를 이용하여 메모리에 저장된 피승수 데이터, 승수 데이터 및 비트 시프트 팩터 간의 곱셈 연산에 따라 피승수 데이터를 양자화한 정수(integer)를 획득한다."}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 전자 장치 및 그 제어 방법에 관한 것으로, 더욱 상세하게는 곱셈기와 누적기를 이용하여 양자화를 수행하는 전자 장치 및 그 제어 방법에 대한 것이다."}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "종래의 인공지능 모델이 양자화를 수행하기 위해, 곱셈 연산 과정에서 이용하는 곱셈기(Multiplier)(예를 들어, MAC(Multiplier-Accumulator)의 곱셈기)에 비해 상대적으로 큰 bits를 연산 가능한 양자화 전용 곱셈기를 이용 해야하는 문제가 있었다. 큰 bits를 연산 가능한 양자화 전용 곱셈기는 전자 장치에 구비된 프로세서(예를 들어, 칩(Chip))의 크기를 증 가시키는 문제가 있었다. 예를 들어, 종래의 전자 장치는, 8bits의 입력 특징 맵(input feature map) 32개를 8bits의 가중치(weigh t)와 곱셈-덧셈 연산 즉, 컨벌루션(Convolution) 연산하면, MAC(Multiplier-Accumulator)의 곱셈기는 8bits × 8bits의 곱셈 연산을 수행하고, 덧셈기(Accumulator)가 덧셈 연산을 수행한 결과가 21bits(8bits + 8bits + 5)이면, 양자화 전용 곱셈기는 21bits × 32bits의 곱셈 연산을 수행해야하므로, MAC(Multiplier- Accumulator)의 곱셈기에 비해 큰 면적을 요구하는 문제가 있었다."}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "이상과 같은 목적을 달성하기 위한 본 개시의 일 실시 예에 따른 전자 장치는, 메모리, 곱셈기(Multiplier) 및 덧셈기(Accumulator)를 포함하는 프로세서를 포함하며, 상기 프로세서는, 상기 곱셈기 및 상기 덧셈기를 이용한 활성(Activation) 값 및 가중치(Weight) 값 간의 컨벌루션(convolution) 연산에 따라 피승수 데이터를 획득하여 상기 메모리에 저장하고, 상기 활성 값을 양자화하기 위한 제1 스케일 팩터(scale factor), 상기 가중치 값을 양자화하기 위한 제2 스케일 팩터 및 상기 피승수 데이터를 양자화하기 위한 제3 스케일 팩터에 기초하여, 승수 데이터 및 비트 시프트(shift) 팩터(factor)를 획득하여 상기 메모리에 저장하고, 상기 곱셈기를 이용하여 상기메모리에 저장된 상기 피승수 데이터, 승수 데이터 및 상기 비트 시프트 팩터 간의 곱셈 연산에 따라 상기 피승 수 데이터를 양자화한 정수(integer)를 획득한다. 본 개시의 일 실시 예에 따른 곱셈기(Multiplier), 덧셈기(Accumulator) 및 메모리를 포함하는 전자 장치의 제 어 방법은, 상기 곱셈기 및 상기 덧셈기를 이용한 활성(Activation) 값 및 가중치(Weight) 값 간의 컨벌루션 (convolution) 연산에 따라 피승수 데이터를 획득하여 메모리에 저장하는 단계, 상기 활성 값을 양자화하기 위 한 제1 스케일 팩터(scale factor), 상기 가중치 값을 양자화하기 위한 제2 스케일 팩터 및 상기 피승수 데이터 를 양자화하기 위한 제3 스케일 팩터에 기초하여, 승수 데이터 및 비트 시프트(shift) 팩터(factor)를 획득하여 상기 메모리에 저장하는 단계 및 상기 곱셈기를 이용하여 상기 피승수 데이터, 승수 데이터 및 상기 비트 시프 트 팩터 간의 곱셈 연산에 따라 상기 피승수 데이터를 양자화한 정수(integer)를 획득하는 단계를 포함한다. 본 개시의 일 실시 예에 따른 곱셈기(Multiplier), 덧셈기(Accumulator) 및 메모리를 포함하는 전자 장치의 제 어 방법을 실행하는 프로그램을 포함하는 컴퓨터 판독 가능 기록매체에 있어서, 상기 전자 장치의 제어 방법은, 상기 곱셈기 및 상기 덧셈기를 이용한 활성(Activation) 값 및 가중치(Weight) 값 간의 컨벌루션(convolution) 연산에 따라 피승수 데이터를 획득하여 메모리에 저장하는 단계, 상기 활성 값을 양자화하기 위한 제1 스케일 팩터(scale factor), 상기 가중치 값을 양자화하기 위한 제2 스케일 팩터 및 상기 피승수 데이터를 양자화하기 위한 제3 스케일 팩터에 기초하여, 승수 데이터 및 비트 시프트(shift) 팩터(factor)를 획득하여 상기 메모리에 저장하는 단계 및 상기 곱셈기를 이용하여 상기 피승수 데이터, 승수 데이터 및 상기 비트 시프트 팩터 간의 곱 셈 연산에 따라 상기 피승수 데이터를 양자화한 정수(integer)를 획득하는 단계를 포함한다."}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서에서 사용되는 용어에 대해 간략히 설명하고, 본 개시에 대해 구체적으로 설명하기로 한다. 본 개시의 실시 예에서 사용되는 용어는 본 개시에서의 기능을 고려하면서 가능한 현재 널리 사용되는 일반적인 용어들을 선택하였으나, 이는 당 분야에 종사하는 기술자의 의도 또는 판례, 새로운 기술의 출현 등에 따라 달라질 수 있다. 또한, 특정한 경우는 출원인이 임의로 선정한 용어도 있으며, 이 경우 해당되는 개시의 설명 부 분에서 상세히 그 의미를 기재할 것이다. 따라서 본 개시에서 사용되는 용어는 단순한 용어의 명칭이 아닌, 그 용어가 가지는 의미와 본 개시의 전반에 걸친 내용을 토대로 정의되어야 한다. 본 개시의 실시 예들은 다양한 변환을 가할 수 있고 여러 가지 실시 예를 가질 수 있는바, 특정 실시 예들을 도 면에 예시하고 상세한 설명에 상세하게 설명하고자 한다. 그러나 이는 특정한 실시 형태에 대해 범위를 한정하 려는 것이 아니며, 개시된 사상 및 기술 범위에 포함되는 모든 변환, 균등물 내지 대체물을 포함하는 것으로 이 해되어야 한다. 실시 예들을 설명함에 있어서 관련된 공지 기술에 대한 구체적인 설명이 요지를 흐릴 수 있다고 판단되는 경우 그 상세한 설명을 생략한다. 제1, 제2 등의 용어는 다양한 구성요소들을 설명하는데 사용될 수 있지만, 구성요소들은 용어들에 의해 한정되 어서는 안 된다. 용어들은 하나의 구성요소를 다른 구성요소로부터 구별하는 목적으로만 사용된다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 출원에서, \"포함하다\" 또 는 \"구성되다\" 등의 용어는 명세서상에 기재된 특징, 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것 이 존재함을 지정하려는 것이지, 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 본 개시에서 \"모듈\" 혹은 \"부\"는 적어도 하나의 기능이나 동작을 수행하며, 하드웨어 또는 소프트웨어로 구현되 거나 하드웨어와 소프트웨어의 결합으로 구현될 수 있다. 또한, 복수의 \"모듈\" 혹은 복수의 \"부\"는 특정한 하드 웨어로 구현될 필요가 있는 \"모듈\" 혹은 \"부\"를 제외하고는 적어도 하나의 모듈로 일체화되어 적어도 하나의 프 로세서(미도시)로 구현될 수 있다. 아래에서는 첨부한 도면을 참고하여 본 개시의 실시 예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지식 을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 개시는 여러 가지 상이한 형태로 구현될 수 있으며 여기에서 설명하는 실시 예에 한정되지 않는다. 그리고 도면에서 본 개시를 명확하게 설명하기 위해 서 설명과 관계없는 부분은 생략하였으며, 명세서 전체를 통하여 유사한 부분에 대해서는 유사한 도면 부호를 붙였다. 도 1은 종래 기술에 따른 양자화(Quantization)를 수행하는 전자 장치를 설명하기 위한 도면이다. 도 1을 참조하면, 종래의 인공지능 모델은 처리 대상 데이터의 양을 줄이고, 처리 속도를 향상시키기 위해 양자 화(Quantization)를 수행하였다. 일 예로, 서버(또는, 클라우드 서버)처럼 고성능 컴퓨터를 이용하여 학습된 인공지능 모델을 전자 장치(예를 들 어, 사용자 단말 장치)에서 이용하기 위해, 인공지능 모델을 Post-Quantization 방식을 이용하여 경량화할 수 있다. 일 예로, 정수형 숫자만을 이용해 인공지능 모델을 압축하는 Integer-Only Quantization 방식은 범용적으 로 활용되고 있다. 일 예에 따라 사용자 단말 장치는 경량화된 인공지능 모델을 이용하여 곱셈(Multiplication), 덧셈 (Accumulation) 및 양자화(Quantization)의 인공지능 추론(inference) 연산을 수행한 결과를 출력할 수 있다. 다만, 종래의 경량화된 인공지능 모델이 양자화를 수행하기 위해, 곱셈 연산 과정에서 이용하는 곱셈기 (Multiplier)(예를 들어, MAC(Multiplier-Accumulator)의 곱셈기)에 비해 상대적으로 큰 bits를 연산 가능한 양자화 전용 곱셈기를 이용해야하는 문제가 있었다. 큰 bits를 연산 가능한 양자화 전용 곱셈기는 전자 장치에 구비된 프로세서(예를 들어, 칩(Chip))의 크기를 증가시키는 문제가 있었다. 예를 들어, Integer-Only Quantization 방식은 입력된 정수형 데이터를 실수형 데이터로 역 양자화 (Dequantize)하지 않고, 추론 연산을 수행한 결과를 정수형 데이터로 재 양자화(Requantize)하여 출력할 수 있 다. 예를 들어, 종래의 전자 장치는, 8bits의 입력 특징 맵(input feature map) 32개를 8bits의 가중치(weigh t)와 곱셈-덧셈 연산 즉, 컨벌루션(Convolution) 연산하면, MAC(Multiplier-Accumulator)의 곱셈기는 8bits × 8bits의 곱셈 연산을 수행하고, 덧셈기(Accumulator)가 덧셈 연산을 수행한 결과는 21bits(8bits + 8bits + 5)일 수 있다. 일 예에 따라, 종래의 전자 장치는 곱셈(Multiplication) 및 덧셈(Accumulation) 연산을 수행한 21bits의 결과 (Accumulator의 출력(output)=Psum(P-bits)에 32bits의 값을 곱하고 쉬프트(Shift)하는 양자화를 수행할 수 있다. 예를 들어, 32 bits의 정수형 데이터에 b/a를 곱하는 연산(즉, Accumulator의 출력(output)×b/a)은, 32 bits 의 정수형 데이터에 b×Ms를 곱하는 연산과 쉬프트 연산(>> ms)(즉, Accumulator의 출력(output)×(b×Ms) >> ms = Quantization output(Q-bits))으로 대체될 수 있다. 따라서, 일 예에 따른 양자화 전용 곱셈기는 21bits × 32bits의 곱셈 연산을 수행해야하므로, MAC(Multiplier- Accumulator)의 곱셈기에 비해 큰 면적을 요구하는 문제가 있었다. 이하에서는 본 개시의 다양한 실시 예에 따라 상대적으로 큰 면적을 요하는 양자화 전용 곱셈기 없이도, MAC(Multiplier-Accumulator)를 이용하여 양자화를 수행하는 프로세서(예를 들어, Neural Processing Unit(NPU))를 설명하도록 한다. 도 2는 본 개시의 일 실시 예에 따른 전자 장치의 구성을 설명하기 위한 블록도이다. 도 2를 참조하면, 전자 장치는 메모리 및 프로세서를 포함할 수 있다. 일 예에 따라, 메모리는 휘발성(volatile) 저장매체로서, 저장된 정보(예를 들어, 실행 코드 및 데이터)를 유지하기 위해 전기의 공급이 요구된다. 일 예로, 메모리는 랜덤 액세스 메모리(RAM: Random Access Memory)로 구현될 수 있다. 일 예에 따라 메모리는 캐시(cache) 메모리, 버퍼(buffer) 메모리 등으로 불릴 수 있으며, 이하에서는 설명의 편의를 위해 메모리로 통칭하도록 한다. 한편, 메모리는 휘발성 저장 매체로 한정되는 것은 아니며, 비휘발성 메모리, 플래시메모리(flash-memory), 하드디스크 드라이브(HDD) 또는 솔리드 스테이트 드라이브(SSD)등 비휘발성(non-volatile) 저장매체로 구현될 수 있음은 물론이다. 일 예에 따라, 프로세서는 전자 장치의 전반적인 동작을 제어한다. 본 개시의 일 실시 예에 따라, 프로세서는 디지털 신호를 처리하는 디지털 시그널 프로세서(digital signal processor(DSP), 마이크로 프로세서(microprocessor), TCON(Timing controller)으로 구현될 수 있다. 다만, 이에 한정되는 것은 아니며, 중앙처리장치(central processing unit(CPU)), MCU(Micro Controller Unit), MPU(micro processing unit), 컨트롤러(controller), 어플리케이션 프로세서(application processor(AP)), 또는 커뮤니케이션 프로세서(communication processor(CP)), ARM 프로세서, AI(Artificial Intelligence) 프로세서 중 하나 또는 그 이상을 포함하거나, 해당 용어로 정의될 수 있다. 또한, 프로세서 는 프로세싱 알고리즘이 내장된 SoC(System on Chip), LSI(large scale integration)로 구현될 수도 있고, FPGA(Field Programmable gate array) 형태로 구현될 수도 있다. 프로세서는 메모리에 저장된 컴퓨터 실행가능 명령어(computer executable instructions)를 실행함으로써 다양한 기능을 수행할 수 있다. 프로세서는 CPU (Central Processing Unit), GPU (Graphics Processing Unit), APU (Accelerated Processing Unit), MIC (Many Integrated Core), DSP (Digital Signal Processor), NPU (Neural Processing Unit), 하드웨어 가속기 또는 머신 러닝 가속기 중 하나 이상을 포함할 수 있다. 프로세서는 전자 장치의 다른 구성요소 중 하나 또는 임의의 조합을 제어할 수 있으며, 통신에 관한 동작 또는 데이터 처리를 수행할 수 있다. 프로세서는 메모리에 저장된 하나 이상의 프로그램 또는 명령어(instruction)을 실행할 수 있 다. 예를 들어, 프로세서는 메모리에 저장된 하나 이상의 명령어를 실행함으로써, 본 개시의 일 실시 예에 따른 방법을 수행할 수 있다. 본 개시의 일 실시 예에 따른 방법이 복수의 동작을 포함하는 경우, 복수의 동작은 하나의 프로세서에 의해 수 행될 수도 있고, 복수의 프로세서에 의해 수행될 수도 있다. 예를 들어, 일 실시 예에 따른 방법에 의해 제 1 동작, 제 2 동작, 제 3 동작이 수행될 때, 제 1 동작, 제 2 동작, 및 제 3 동작 모두 제 1 프로세서에 의해 수 행될 수도 있고, 제 1 동작 및 제 2 동작은 제 1 프로세서(예를 들어, 범용 프로세서)에 의해 수행되고 제 3 동 작은 제 2 프로세서(예를 들어, 인공지능 전용 프로세서)에 의해 수행될 수도 있다. 프로세서는 하나의 코어를 포함하는 단일 코어 프로세서(single core processor)로 구현될 수도 있고, 복 수의 코어(예를 들어, 동종 멀티 코어 또는 이종 멀티 코어)를 포함하는 하나 이상의 멀티 코어 프로세서 (multicore processor)로 구현될 수도 있다. 프로세서가 멀티 코어 프로세서로 구현되는 경우, 멀티 코어 프로세서에 포함된 복수의 코어 각각은 캐시 메모리, 온 칩(On-chip) 메모리와 같은 프로세서 내부 메모리를 포 함할 수 있으며, 복수의 코어에 의해 공유되는 공통 캐시가 멀티 코어 프로세서에 포함될 수 있다. 또한, 멀티 코어 프로세서에 포함된 복수의 코어 각각(또는 복수의 코어 중 일부)은 독립적으로 본 개시의 일 실시 예에 따 른 방법을 구현하기 위한 프로그램 명령을 판독하여 수행할 수도 있고, 복수의 코어 전체(또는 일부)가 연계되어 본 개시의 일 실시 예에 따른 방법을 구현하기 위한 프로그램 명령을 판독하여 수행할 수도 있다. 본 개시의 일 실시 예에 따른 방법이 복수의 동작을 포함하는 경우, 복수의 동작은 멀티 코어 프로세서에 포함 된 복수의 코어 중 하나의 코어에 의해 수행될 수도 있고, 복수의 코어에 의해 수행될 수도 있다. 예를 들어, 일 실시 예에 따른 방법에 의해 제 1 동작, 제 2 동작, 및 제 3 동작이 수행될 때, 제 1 동작, 제2 동작, 및 제 3 동작 모두 멀티 코어 프로세서에 포함된 제 1 코어에 의해 수행될 수도 있고, 제 1 동작 및 제 2 동작은 멀티 코어 프로세서에 포함된 제 1 코어에 의해 수행되고 제 3 동작은 멀티 코어 프로세서에 포함된 제 2 코어에 의 해 수행될 수도 있다. 본 개시의 실시 예들에서, 프로세서는 하나 이상의 프로세서 및 기타 전자 부품들이 집적된 시스템 온 칩(SoC), 단일 코어 프로세서, 멀티 코어 프로세서, 또는 단일 코어 프로세서 또는 멀티 코어 프로세서에 포함된 코어를 의미할 수 있으며, 여기서 코어는 CPU, GPU, APU, MIC, DSP, NPU, 하드웨어 가속기 또는 기계 학습 가속기 등으 로 구현될 수 있으나, 본 개시의 실시 예들이 이에 한정되는 것은 아니다. 한편, 본 개시에 따른 인공지능과 관련된 기능은 전자 장치의 프로세서와 메모리를 통해 동작된 다. 프로세서는 하나 또는 복수의 프로세서로 구성될 수 있다. 이때, 하나 또는 복수의 프로세서는 CPU(Central Processing Unit), GPU(Graphic Processing Unit), NPU(Neural Processing Unit) 중 적어도 하나 를 포함할 수 있으나 전술한 프로세서의 예시에 한정되지 않는다. CPU는 일반 연산뿐만 아니라 인공지능 연산을 수행할 수 있는 범용 프로세서로서, 다계층 캐시(Cache) 구조를 통해 복잡한 프로그램을 효율적으로 실행할 수 있다. CPU는 순차적인 계산을 통해 이전 계산 결과와 다음 계산 결과의 유기적인 연계가 가능하도록 하는 직렬 처리 방식에 유리하다. 범용 프로세서는 전술한 CPU로 명시한 경 우를 제외하고 전술한 예에 한정되지 않는다. GPU는 그래픽 처리에 이용되는 부동 소수점 연산 등과 같은 대량 연산을 위한 프로세서로서, 코어를 대량으로 집적하여 대규모 연산을 병렬로 수행할 수 있다. 특히, GPU는 CPU에 비해 컨볼루션(Convolution) 연산 등과 같 은 병렬 처리 방식에 유리할 수 있다. 또한, GPU는 CPU의 기능을 보완하기 위한 보조 프로세서(co-processor)로 이용될 수 있다. 대량 연산을 위한 프로세서는 전술한 GPU로 명시한 경우를 제외하고 전술한 예에 한정되지 않 는다. NPU는 인공 신경망을 이용한 인공지능 연산에 특화된 프로세서로서, 인공 신경망을 구성하는 각 레이어를 하드 웨어(예로, 실리콘)로 구현할 수 있다. 이때, NPU는 업체의 요구 사양에 따라 특화되어 설계되므로, CPU나 GPU 에 비해 자유도가 낮으나, 업체가 요구하기 위한 인공지능 연산을 효율적으로 처리할 수 있다. 한편, 인공지능 연산에 특화된 프로세서로, NPU 는 TPU(Tensor Processing Unit), IPU(Intelligence Processing Unit), VPU(Vision processing unit) 등과 같은 다양한 형태로 구현 될 수 있다. 인공 지능 프로세서는 전술한 NPU로 명시한 경우를 제외하고 전술한 예에 한정되지 않는다. 또한, 하나 또는 복수의 프로세서는 SoC(System on Chip)으로 구현될 수 있다. 이때, SoC에는 하나 또는 복수 의 프로세서 이외에 메모리, 및 프로세서와 메모리 사이의 데이터 통신을 위한 버스(Bus)등과 같은 네트워크 인 터페이스를 더 포함할 수 있다. 전자 장치에 포함된 SoC(System on Chip)에 복수의 프로세서가 포함된 경우, 전자 장치는 복수의 프 로세서 중 일부 프로세서를 이용하여 인공지능과 관련된 연산(예를 들어, 인공지능 모델의 학습(learning)이나 추론(inference)에 관련된 연산)을 수행할 수 있다. 예를 들어, 전자 장치는 복수의 프로세서 중 컨볼루션 연산, 행렬 곱 연산 등과 같은 인공지능 연산에 특화된 GPU, NPU, VPU, TPU, 하드웨어 가속기 중 적어도 하나를 이용하여 인공지능과 관련된 연산을 수행할 수 있다. 다만, 이는 일 실시예에 불과할 뿐, CPU 등과 범용 프로세 서를 이용하여 인공지능과 관련된 연산을 처리할 수 있음은 물론이다. 또한, 전자 장치는 하나의 프로세서에 포함된 멀티 코어(예를 들어, 듀얼 코어, 쿼드 코어 등)를 이용하여 인공지능과 관련된 기능에 대한 연산을 수행할 수 있다. 특히, 전자 장치는 프로세서에 포함된 멀티 코어를 이용하여 병렬적으로 컨볼루션 연산, 행렬 곱 연산 등과 같은 인공 지능 연산을 수행할 수 있다. 하나 또는 복수의 프로세서는, 메모리에 저장된 기정의된 동작 규칙 또는 인공지능 모델에 따라, 입력 데 이터를 처리하도록 제어한다. 기정의된 동작 규칙 또는 인공지능 모델은 학습을 통해 만들어진 것을 특징으로 한다. 여기서, 학습을 통해 만들어진다는 것은, 다수의 학습 데이터들에 학습 알고리즘을 적용함으로써, 원하는 특성 의 기정의된 동작 규칙 또는 인공지능 모델이 만들어짐을 의미한다. 이러한 학습은 본 개시에 따른 인공지능이 수행되는 기기 자체에서 이루어질 수도 있고, 별도의 서버/시스템을 통해 이루어 질 수도 있다. 인공지능 모델은, 복수의 신경망 레이어들로 구성될 수 있다. 적어도 하나의 레이어는 적어도 하나의 가중치 (weight values)을 갖고 있으며, 이전(previous) 레이어의 연산 결과와 적어도 하나의 정의된 연산을 통해 레이 어의 연산을 수행한다. 신경망의 예로는, CNN (Convolutional Neural Network), DNN (Deep Neural Network), RNN (Recurrent Neural Network), RBM (Restricted Boltzmann Machine), DBN (Deep Belief Network), BRDNN(Bidirectional Recurrent Deep Neural Network) 및 심층 Q-네트워크 (Deep Q-Networks), Transformer가 있으며, 본 개시에서의 신경망은 명시한 경우를 제외하고 전술한 예에 한정되지 않는다. 학습 알고리즘은, 다수의 학습 데이터들을 이용하여 소정의 대상 기기(예컨대, 로봇)을 훈련시켜 소정의 대상 기기 스스로 결정을 내리거나 예측을 할 수 있도록 하는 방법이다. 학습 알고리즘의 예로는, 지도형 학습 (supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi-supervised learning) 또 는 강화 학습(reinforcement learning)이 있으며, 본 개시에서의 학습 알고리즘은 명시한 경우를 제외하고 전술 한 예에 한정되지 않는다. 본 개시의 일 예에 따른 프로세서는 곱셈기(Multiplier), 덧셈기(Accumulator)를 포함할 수 있 다. 도 3을 참조하여, 곱셈기와 덧셈기를 이용하여 양자화를 수행하는 프로세서를 설명하도록 한다. 도 3은 본 개시의 일 실시 예에 따른 전자 장치의 구성을 설명하기 위한 상세 블록도이다. 도 3을 참조하면, 프로세서는 MAC의 곱셈기(Multiplier), 덧셈기(Accumulator 또는 Adder)를 포함할 수 있다. 도 3에서는 설명의 편의를 위해 데이터의 전송 방향을 화살표로 도식화하였으며, 전송되는 데 이터의 비트(bits)를 화살표의 하단에 도시하였다. 우선, 프로세서는 N-bits의 활성(Activation) 값을 레지스터(Reg)에 저장하며, M-bits의 가중치(Weight) 값을 레지스터(Reg)에 저장할 수 있다. 이어서, 프로세서는 곱셈기와 덧셈기를 이용한 활성 값 및 가중치 값 간의 곱셈-덧셈(multiply- accumulate) 연산 즉, 컨벌루션(convolution) 연산에 따라 P-bits의 피승수 데이터를 획득할 수 있다. P-bits의 피승수 데이터를 수학식으로 표현하면 다음과 같다. 우선, 프로세서에 양자화된 활성 값(Iqnt)(예를 들어, 입력 특징 맵(input feature map))과 가중치 값 (Fqnt)(예를 들어, 필터(filter))가 입력되며, 실제 값(즉, 실제 활성 값(i), 실제 가중치 값(f))과 양자화된 값의 관계는 하기의 수학식 1 및 수학식 2로 표현할 수 있다. [수학식 1]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "[수학식 2]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "이어서, 양자화 전의 출력 값(예를 들어, 출력 특징 맵(output feature map)(o[w][h])은, 하기의 수학식 3으로 표현할 수 있다.[수학식 3]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "여기서, 설명의 편의를 위해 input feature map, filter, 및 output feature map은 대칭적인(symmetric) 데이 터로 가정하면, ZeroPointi, ZeroPointf, ZeroPointo 각각은 영일 수 있다. 이어서, 출력 값을 양자화하며, 양자화는 하기의 수학식 4로 표현할 수 있다. [수학식 4]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "여기서, Oqnt[w][h]는 양자화된 출력 값일 수 있다. 한편, 프로세서는 나누기(Divide) 연산을 하기의 수학식 5와 같이 곱셈(Multiplication) 연산과 쉬프트 (Shift) 연산으로 대체할 수 있다. [수학식 5]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "따라서, 양자화된 출력 값은 하기의 수학식 6으로 표현할 수 있다. [수학식 6]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "한편, 도 3에 도시한 바와 같이, 프로세서는 컨벌루션 연산 후에 양자화 전용 곱셈기를 이용하지 않고, 곱 셈기와 덧셈기를 이용하여 재 양자화(requantize)된 출력 값을 획득할 수 있다. 재 양자화된 출력 값(Oqnt[w][h])은, 하기의 수학식 7로 표현할 수 있다. [수학식 7]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "여기서, Psum은, P-bits의 피승수 데이터(즉, 컨벌루션(convolution) 연산의 결과 값)이며, Ms는 Ms-bits의 승수 데이터이며, Psum과 Ms 간의 곱셈 연산의 결과 값은 (P+Ms)-bits의 데이터일 수 있다.한편, 수학식 5를 참조하면, 프로세서는 활성 값을 양자화하기 위한 제1 스케일 팩터(scalei), 가중치 값 을 양자화하기 위한 제2 스케일 팩터(scalef) 및 피승수 데이터(Psum)를 양자화하기 위한 제3 스케일 팩터 (scaleo)에 기초하여 승수 데이터(Ms) 및 비트 쉬프트 팩터(shift factor)(2-ms)를 획득할 수 있다. 이어서, 프로세서는 양자화 전용 곱셈기가 아닌, 곱셈기를 이용하여 피승수 데이터(Psum), 승수 데이 터(Ms) 및 비트 쉬프트 팩터(2-ms) 간의 곱셈 연산에 따라 피승수 데이터(Psum)를 양자화한 정수(Integer)를 출 력 값으로 획득할 수 있다. 도 4는 본 개시의 일 실시 예에 따른 피승수 데이터, 승수 데이터를 설명하기 위한 도면이다. 도 4를 참조하면, 피승수 데이터(Psum)는 P-bits의 데이터이며, 승수 데이터(Ms)는 Ms-bits의 데이터일 수 있다. 또한, 쉬프트 연산을 수행하기 전, 피승수 데이터(Psum)와 승수 데이터(Ms) 간의 곱셈 연산에 따른 결과 값 Temp는 (P+Ms)-bits의 데이터일 수 있다. 한편, 본 개시의 일 예에 따른 프로세서는 양자화 전용 곱셈기가 아닌, 곱셈기를 이용하여 곱셈 연산 을 수행하므로, 곱셈기가 P-bits × Ms-bits의 곱셈 연산을 수행할 수 없다. 이하에서는, 프로세서의 곱셈기가 P-bits × Ms-bits의 곱셈 연산을 수행하지 않으면서도, 프로세서 가 곱셈기를 이용하여 피승수 데이터(Psum)와 승수 데이터(Ms) 간의 곱셈 연산에 따른 결과 값(Temp) 즉, 피승수 데이터(Psum)를 양자화한 정수(Interger)를 획득하는 방법에 대해 설명하도록 한다. 도 5는 본 개시의 일 실시 예에 따른 제1 비트(bit)에 대응되는 자릿수 단위로 분할된 피승수 데이터 및 승수 데이터를 설명하기 위한 도면이다. 도 5를 참조하면, 일 예에 따른 프로세서는 피승수 데이터(Psum)를 제1 비트(bit)에 대응되는 자릿수 단위 로 분할하여 적어도 하나의 제1 파라미터를 획득할 수 있다. 예를 들어, P-bits의 피승수 데이터(Psum)를 N-bits에 대응되는 자릿수 단위로 분할하여 복수의 제1 파라미터 (Psum0 내지 Psum3)를 획득할 수 있다. 여기서, 복수의 제1 파라미터 중 Psum0은 피승수 데이터(Psum)에서 20부터 2n-1에 대응되는 자릿수를 포함할 수 있다. 또한, 복수의 제1 파라미터 중 Psum1은 피승수 데이터(Psum)에서 2n부터 22n-1에 대응되는 자릿수를 포함할 수 있다. 따라서, 복수의 제1 파라미터 중 Psumα는 피승수 데이터(Psum)에서 2α*n부터 2(α+1)*n-1에 대응되는 자릿수를 포 함할 수 있다. 도 5를 참조하면, 일 예에 따른 프로세서는 승수 데이터(Ms)를 제1 비트(bit)에 대응되는 자릿수 단위로 분할하여 적어도 하나의 제2 파라미터를 획득할 수 있다. 예를 들어, Ms-bits의 승수 데이터(Ms)를 N-bits에 대응되는 자릿수 단위로 분할하여 복수의 제2 파라미터(Ms0 내지 Ms3)를 획득할 수 있다. 여기서, 복수의 제2 파라미터 중 Ms0은 승수 데이터(Ms)에서 20부터 2n-1에 대응되는 자릿수를 포함할 수 있다. 또한, 복수의 제2 파라미터 중 Ms1은 승수 데이터(Ms)에서 2n부터 22n-1에 대응되는 자릿수를 포함할 수 있다. 따라서, 복수의 제2 파라미터 중 Msβ는 승수 데이터(Ms)에서 2β*n부터 2(β+1)*n-1에 대응되는 자릿수를 포함할 수 있다. 이어서, 프로세서는 복수의 제1 파라미터와 복수의 제2 파라미터 간의 곱셈 연산에 따른 복수의 조합을 식 별할 수 있다. 이어서, 프로세서는 복수의 조합을 제1 비트 단위로 그룹핑하여 복수의 조합을 획득할 수 있다. 우선, 도 6을 참조하여 복수의 제1 파라미터와 복수의 제2 파라미터 간의 곱셈 연산에 따른 복수의 조합을 설명 하도록 한다. 도 6은 본 개시의 일 실시 예에 따른 피승수 데이터와 승수 데이터 간의 곱셈 연산을 설명하기 위한 도면이다. 일 예에 따라 곱셈기가 N-bits Х M-bits의 곱셈 연산을 수행 가능할 수 있다. 도 5에서 설명한 바와 같이, P-bits의 피승수 데이터(Psum)를 곱셈기의 피승수 값인 N-bits(예를 들어, 8bits)로 분할하면 하기의 수학식 8로 표현할 수 있다. [수학식 8]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "일 예에 따라, 승수 데이터(Ms)가 곱셈기의 피승수 값인 M-bits이면, 피승수 데이터(Psum)와 승수 데이터 (Ms) 간의 곱셈 연산 즉, 피승수 데이터(Psum)의 양자화된 출력 값 Oqnt는 하기의 수학식 9로 표현할 수 있다. [수학식 9]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "복수의 제1 파라미터 즉, Psum# 각각은, N-bits이며, 승수 데이터(Ms)는 M-bits이므로, 프로세서는 N- bits Х M-bits의 곱셈기를 이용하여 Ms Х Psum# 의 연산 결과를 획득할 수 있고, 2-ms에 따른 쉬프트 연 산을 수행(즉, 2진수의 연산 결과를 ms 횟수 왼쪽으로 쉬프트)하여 양자화된 출력 값 Oqnt을 획득할 수 있다. 일 예에 따라, 프로세서는 메모리에 저장된 피승수 데이터(Psum)에 포함된 Psum0 및 승수 데이터(M s)를 곱셈기에 입력할 수 있다. 일 예에 따라 프로세서는 제1 반복 횟수에서 Ms Х Psum0의 연산 결 과를 획득 및 메모리에 저장할 수 있다. 이어서, 프로세서는 제2 반복 횟수에서 (Ms Х Psum1) Х 2N의 연산 결과를 획득(예를 들어, 곱셈기 를 이용하여 Ms Х Psum1의 곱셈 연산을 수행한 후 N-bits만큼 오른쪽 쉬프트)하고, 메모리에 저장할 수 있다. 이어서, 프로세서는 제3 반복 횟수에서 (Ms Х Psum2) Х 22N의 연산 결과를 획득하고, 메모리에 저 장할 수 있다. 이어서, 프로세서는 제4 반복 횟수에서 (Ms Х Psum3) Х 23N의 연산 결과를 획득하고, 메모리에 저 장할 수 있다. 일 예에 따라 프로세서는 메모리에 저장된 복수의 연산 결과를 덧셈기를 이용하여 덧셈 연산한 후에, 2-ms에 따른 쉬프트 연산을 수행하여 양자화된 출력 값 Oqnt을 획득할 수 있다. 한편, 상술한 예시에서 구체적인 숫자, 반복 횟수 등은 설명의 편의를 위한 예시이며 이에 한정되지 않음은 물 론이다. 한편, 본 개시의 일 실시 예에 따라 일정 조건(예를 들어, Overflow)에서 반복 횟수를 줄일 수 있으며, 메모리 의 Bit width를 줄일 수 있다. 예를 들어, 재 양자화된(Requantized) 출력 값은 Q-bits의 데이터이므로, 최대(Maximum) 출력 값은 2Q-1이다. 또한, 양자화를 위한 비트 쉬프트 팩터(shift factor)(2-ms)의 ms는 컨벌루션 연산 전에 상수로 설정되므로, 프 로세서는 반복 횟수 때마다 일정 조건 즉, Overflow(Output = Maximum) 여부를 식별하여, 연산의 중간 과 정에서 양자화된 출력 값을 획득할 수 있다. 또한, 일 예에 따른 프로세서는 반복 횟수 마다 쉬프트 연산으로 버려질 하위 bits에 따른 데이터들을 메 모리에 저장하지 않으므로, 메모리에 저장되는 데이터의 크기를 줄일 수 있다. 상술한 실시 예에 대한 설명의 편의를 위해, 곱셈기의 피승수(Multiplicancd)와 승수(Multiplier)의 비트 가 동일(예를 들어, N-bits × M-bits에서 N=M)한 경우를 상정하도록 한다. 예를 들어, 곱셈기가 8bits Х 8bits의 곱셈 연산을 수행 가능하며, 피승수 데이터(Psum)가 32bits이고, 승수 데이터(Ms)가 32bits이고, 비트 쉬프트 팩터(shift factor)(2-ms)의 ms가 64bits인 경우를 상정할 수 있다. 다만, 구체적인 숫자는 설명의 편의를 위한 예시에 불과하며, 이에 한정되지 않음은 물론이다. 또한, 피 승수와 승수의 비트가 상이할 수도 있음은 물론이다. 도 5에서 설명한 바와 같이, P-bits의 피승수 데이터(Psum)를 곱셈기의 피승수 값인 N-bits(예를 들어, 8bits)로 분할하면 하기의 수학식 10으로 표현할 수 있다. [수학식 10]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 11, "content": "(단, N=8bits일 때) 또한, Ms-bits의 승수 데이터(Ms)를 곱셈기의 승수 값인 M-bits(예를 들어, 8bits)로 분할하면 하기의 수 학식 11로 표현할 수 있다. [수학식 11]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "(단, M=8bits일 때) 일 예에 따라 프로세서는 피승수 데이터(Psum)를 제1 비트(예를 들어, 8bits)에 대응되는 자릿수 단위로 분할하여 복수의 제1 파라미터(Psum0 내지 Psum3)를 획득할 수 있다. 또한, 프로세서는 승수 데이터(Ms)를 제1 비트(예를 들어, 8bits)에 대응되는 자릿수 단위로 분할하여 복 수의 제2 파라미터(Ms0 내지 Ms3)를 획득할 수 있다. 이어서, 프로세서는 복수의 제1 파라미터와 복수의 제2 파라미터 간의 곱셈 연산에 따른 복수의 조합을 식 별하고, 식별된 복수의 조합을 제1 비트 단위로 그룹핑하여 복수의 그룹을 획득할 수 있다. 일 예에 따라, 피승수 데이터(Psum)와 승수 데이터(Ms) 간의 곱셈 연산의 결과 값 Temp는 하기의 수학식 12로 표현할 수 있다. [수학식 12]"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 13, "content": "수학식 12를 참조하면, 복수의 조합은, Psum3×Ms3×6, Psum2×Ms3×5, Psum3×Ms2×5, Psum1×Ms3 ×4, Psum2×Ms2×4, Psum3×Ms1×4, Psum0×Ms3×3, Psum1×Ms2×3, Psum2×Ms1×3, Psum3×Ms0×3, Psum0×Ms2×2, Psum1×Ms1×2, Psum2×Ms0×2, Psum0×Ms1×28, Psum1×Ms0× 28, Psum0×Ms0일 수 있다. 일 예에 따른 프로세서는 복수의 조합을 제1 비트(예를 들어, 8bits) 단위로 그룹핑하여 복수의 그룹을 획 득할 수 있고, 복수의 그룹은 하기와 같을 수 있다. 0에 따른 제1 그룹(이하, T0) = (Psum0×Ms0((=Temp0)), 1에 따른 제2 그룹(이하, T1) = (Psum0×Ms1(=Temp10), Psum1×Ms0(=Temp11)), 2에 따른 제3 그룹(이하, T2) = (Psum0×Ms2(=Temp20), Psum1×Ms1(=Temp21), Psum2×Ms0(=Temp22)), 3에 따른 제4 그룹(이하, T3) = (Psum0×Ms3(=Temp30), Psum1×Ms2(=Temp31), Psum2×Ms1(=Temp32), Psum3 ×Ms0(=Temp33)), 4에 따른 제5 그룹(이하, T4) = (Psum1×Ms3(=Temp40), Psum2×Ms2(=Temp41), Psum3×Ms1(=Temp42)), 5에 따른 제6 그룹(이하, T5) = (Psum2×Ms3(=Temp50), Psum3×Ms2(=Temp51)), 6에 따른 제7 그룹(이하, T6) = (Psum3×Ms3(=Temp6)) 이어서, 프로세서는 곱셈기를 이용하여 복수의 그룹 중 반복 횟수 정보에 대응되는 그룹에 포함된 조 합들에 대응되는 중간 연산 값을 획득할 수 있다. 이에 대한 구체적인 설명은 도 7을 참조하여 하도록 한다. 도 7은 본 개시의 일 실시 예에 따른 곱셈 연산에 따른 복수의 조합을 설명하기 위한 도면이다. 도 7을 참조하면, 피승수 데이터(Psum)와 승수 데이터(Ms) 간의 곱셈 연산의 결과 값 Temp는, 제1 비트 단위로 그룹핑된 복수의 그룹(예를 들어, T0 내지 T6)으로 구분될 수 있다. 일 예에 따라, 제1 그룹(T0)는, 한 개의 조합(Psum0×Ms0(=Temp0))을 포함할 수 있다. 다른 예로, 제2 그룹(T1)은, 두 개의 조합(Psum0×Ms1(=Temp10), Psum1×Ms0(=Temp11))을 포함할 수 있다. 한편, 프로세서는 곱셈기를 이용하여 복수의 그룹 중에서 연산 반복 횟수에 대응되는 특정 그룹에 포 함된 조합들 각각의 곱셈 연산을 수행하여 중간 연산 값들을 획득하고, 이어서, 덧셈기를 이용하여 중간 연산 값들의 합을 특정 그룹에 대응되는 연산 값으로 획득하여 메모리에 저장할 수 있다. 일 예에 따라, 프로세서는 연산 반복 횟수가 초기 값(예를 들어, 0회(Iteration 0))이면, 제1 그룹(T0)에 포함된 조합 즉, Psum0×Ms0의 연산 결과를 제1 그룹(T0)의 중간 연산 값으로 획득할 수 있다. 한편, 제1 그룹 (T0)에 포함된 조합이 하나이므로, Psum0×Ms0의 연산 결과를 제1 그룹(T0)의 연산 값으로 획득하여 메모리 에 저장할 수 있다. 일 예에 따라, 프로세서는 연산 반복 횟수가 초기 값이 아니면, 곱셈기를 이용하여 복수의 그룹 중에 서 연산 반복 횟수에 대응되는 특정 그룹에 포함된 조합들 각각의 곱셈 연산을 수행하여 중간 연산 값들을 획득 하고, 덧셈기를 이용하여 메모리에 직전에 저장된 연산 값과 중간 연산 값들의 합을 특정 그룹의 연 산 값을 획득하여 메모리에 저장할 수 있다. 이에 대한 구체적인 설명은 도 8을 참조하여 하도록 한다. <Iteration 0> 우선, 프로세서는 연산 반복 횟수가 초기 값이면, 복수의 그룹 중 제1 그룹(T1)에 포함된 조합인 Psum0× Ms0의 연산 결과를 제1 그룹(T0)의 중간 연산 값으로 획득할 수 있다. 이어서, 프로세서는 획득된 중간 연 산 값의 합을 제1 그룹(T0)의 연산 값으로 획득할 수 있다. 한편, 프로세서는 중간 연산 값의 합에서 제1 비트에 대응되는 자릿수까지의 수(예를 들어, 20부터 27)(이 하, 하위 bits에 따른 데이터들)를 제외한 나머지 수(예를 들어, 28부터 215) (이하, 상위 bits에 따른 데이터들)를 제1 그룹(T0)에 대응되는 연산 값으로 메모리에 저장할 수 있다. 따라서, 프로세서는 하 위 bits의 데이터들(즉, 20부터 2N-1)을 제외한 상위 bits의 데이터들(즉, 2N부터 22N-1)을 해당 그룹에 대응되는 연산 값으로 저장할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시킬 수 있다(예를 들어, 1회(Iteration 1)). <Iteration 1> 이어서, 프로세서는 복수의 그룹 중 연산 반복 횟수에 대응되는 제2 그룹(T1)에 포함된 조합들인 Psum0× Ms1, Psum1×Ms0 각각의 중간 연산 값을 곱셈기를 이용하여 획득할 수 있다. 이어서, 프로세서는 메모리에 직전에 저장된 연산 값 즉, 제1 그룹(T0)에 대응되는 연산 값과, 제2 그룹(T1)의 중간 연산 값들의 합을 획득할 수 있다. 일 예에 따른 프로세서는 제1 그룹(T0)에 대응되는 연산 값과, 제2 그룹(T1)의 중간 연산 값들의 합에서 제1 비트에 대응되는 자릿수까지의 수(예를 들어, 20부터 27)(이하, 하위 bits에 따른 데이터들)를 제외한 나머 지 수(예를 들어, 28부터 215)를 제1 그룹(T0)에 대응되는 연산 값으로 메모리에 저장할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시킬 수 있다(예를 들어, 2회(Iteration 2)). 도 8을 참조하면 일 예에 따라 프로세서는 곱셈기와 덧셈기를 이용하여 제1 그룹(T0)부터 부터 제6 그룹(T6)(또는, 제7 그룹(T7))까지 순차적으로 각각에 포함된 조합들을 곱셈 및 덧셈 연산할 수 있다. 이에 대한 구체적인 설명은 도 9를 참조하여 하도록 한다. 도 9는 본 개시의 일 실시 예에 따른 복수의 그룹 간의 덧셈 연산을 설명하기 위한 도면이다. 도 9는 설명의 편의를 위해, 현재의 연산 반복 횟수에 대응되는 제1 그룹을 T0로, 제1 그룹에 포함된 조합들의 중간 연산 값들(예를 들어, 곱셈기를 이용한 곱셈 연산의 결과)의 합(예를 들어, 덧셈기를 이용한 덧 셈 연산의 결과)을 Temp0로, Temp0에서 하위 bits에 따른 데이터들을 out으로, Temp0에서 상위 bits에 따른 데 이터들을 acc로 정의하도록 한다. 우선, 프로세서는 곱셈기를 이용하여 현재의 연산 반복 횟수에 대응되는 제1 그룹에 포함된 조합들에 기초한 곱셈 연산을 수행하여 중간 연산 값들을 획득하며, 덧셈기를 이용하여 덧셈 연산을 수행하여 중간 연산 값들의 합을 획득할 수 있다. 이어서, 프로세서는 중간 연산 값들의 합에서 하위 bits에 따른 데이터들(out)을 제외하고, 상위 bits에 따른 데이터들(acc)을 제1 그룹(T0)에 대응되는 연산 값으로 메모리에 저장할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시킬 수 있다. 이어서, 프로세서는 곱셈기를 이용하여 증가된 연산 반복 횟수에 대응되는 제2 그룹(T1)에 포함된 조 합들에 기초한 곱셈 연산을 수행하여 중간 연산 값들을 획득하며, 덧셈기를 이용하여 덧셈 연산을 수행하 여 중간 연산 값들의 합(예를 들어, Temp1)을 획득할 수 있다. 이어서, 프로세서는 덧셈기를 이용하여 메모리에 직전에 저장된 연산 값(예를 들어, acc)과 제2 그룹(T1)에 대응되는 중간 연산 값들의 합(예를 들어, Temp1)의 합(이하, SnC)을 획득할 수 있다. 한편, 프로세서는 SnC, out 및 비트 쉬프트 팩터(shift factor)(2-ms)의 ms에 기초하여 연산의 반복(또는, 종료) 여부를 식별할 수 있다. 예를 들어, 프로세서는 연산의 반복이 식별되면(예를 들어, ms ≥ 제1 비트(N)), 연산 반복 횟수를 증가시 키며, SnC의 하위 bits에 따른 데이터들(예를 들어, 20부터 27)을 out으로, 상위 bits에 따른 데이터들(예를 들 어, 20부터 27)을 해당 그룹의 연산 값(acc)로 정의할 수 있다. 다른 예로, 프로세서는 연산의 종료가 식별되면(예를 들어, ms < 제1 비트(N)), 일정 조건(예를 들어, Overflow)의 발생 여부를 식별하며, SnC와 out에 기초하여 양자화된 피승수 데이터(Qout)을 출력할 수 있다. 이에 대한 구체적인 설명은 도 10을 참조하여 하도록 한다. 도 10은 본 개시의 일 실시 예에 따른 연산을 종료하는 조건을 설명하기 위한 도면이다. 도 9 및 10을 참조하면, 프로세서는 비트 쉬프트 팩터(shift factor)(2-ms)의 ms에서 연산 반복 횟수(예를 들어, iteration #)만큼 제1 비트에 대응되는 수를 제외한 나머지가 제1 비트에 대응되는 수 미만이면(하기의 수학식 13으로 표현), 연산 반복 횟수에 대응되는 특정 그룹에 포함된 조합들에 대응되는 중간 연산 값들(예를 들어, Temp 1)을 획득하고, 직전의 연산 반복 횟수에 대응되는 그룹의 연산 값(Temp 0에서 acc)과 합할 수 있다. [수학식 13] ms - (iteration #) Х (N bits) < N 여기서, N은 제1 비트에 대응되는 수이며, iteration #은 연산 반복 횟수를 의미한다. 여기서, 연산 반복 횟수에 대응되는 특정 그룹에 포함된 조합들에 대응되는 중간 연산 값들(예를 들어, Temp 1)과 직전의 연산 반복 횟수에 대응되는 그룹의 연산 값(Temp 0에서 acc)의 합은 SnC로 정의한다. 이어서, 프로세서는 SnC 및 직전의 연산 반복 횟수에 대응되는 그룹의 하위 bits에 따른 데이터들(Temp 0 에서 out)에 기초하여 양자화된 피승수 데이터(Qout)를 출력할 수 있다. 일 예로, 프로세서는 SnC에서 2(ms - (iteration #) Х (N))부터 22N까지의 자릿수의 값이 0이 아니면, Overflow로 식별하며, Overflow 값인 2Q-1(Maximum)을 양자화된 피승수 데이터(Qout)으로 출력할 수 있다. 이어서, 프로세 서는 연산을 종료할 수 있다. 도 11은 본 개시의 일 실시 예에 따른 연산을 종료하는 조건을 설명하기 위한 도면이다. 일 예로, 프로세서는 비트 쉬프트 팩터(shift factor)(2-ms)의 ms에서 연산 반복 횟수(예를 들어, iteration #)만큼 제1 비트에 대응되는 수를 제외한 나머지가 제1 비트에 대응되는 수 미만이면, 연산 반복 횟 수에 대응되는 특정 그룹에 포함된 조합들에 대응되는 중간 연산 값들(예를 들어, Temp 1)을 획득하고, 직전의 연산 반복 횟수에 대응되는 그룹의 연산 값(Temp 0에서 acc)과 합할 수 있다. 여기서, 연산 반복 횟수에 대응되는 특정 그룹에 포함된 조합들에 대응되는 중간 연산 값들(예를 들어, Temp 1)과 직전의 연산 반복 횟수에 대응되는 그룹의 연산 값(Temp 0에서 acc)의 합은 SnC로 정의한다. 일 예에 따른 프로세서는 SnC에서 2(ms - (iteration #) Х (N))부터 22N까지의 자릿수의 값이 0이면, Overflow가 아 닌 것으로 식별할 수 있다. 이어서, 프로세서는 직전의 연산 반복 횟수에 대응되는 그룹의 하위 bits에 따른 데이터들(Temp 0에서 out)에서 2(ms - (iteration #) Х (N))부터 2N-1, SnC에서 20부터 2(ms - (iteration #) Х (N))-1+M-N까지의 자릿수에 대응되는 값을 양자화된 피승수 데이터(Qout)로 출력할 수 있다. [수학식 14] Qout [SnC[ms-1+M-N:0,out[N-1:ms]], at Temp 2 ~ 6 = 0 Qout = 2Q-1 (Maximum), at Temp 2 ~ 6 ≠ 0 이어서, 프로세서는 연산을 종료할 수 있다. 설명의 편의를 위해 이하에서는, 구체적인 숫자를 상정하여 곱셈기와 덧셈기를 이용하여 양자화된 피 승수 데이터(Qout)를 프로세서를 설명하도록 한다. 도 12는 본 개시의 일 실시 예에 따라 24 비트의 피승수 데이터 및 승수 데이터를 설명하기 위한 도면이다. 예를 들어, 피승수 데이터(Psum)을 1000000010로, 승수 데이터(Ms)를 2341341210로, 비트 쉬프트 팩터의 ms를 40 으로 상정하도록 한다. 일 예에 따라 피승수 데이터(Psum)는 1000000010=1001100010010110100000002이고, 승수 데이터(Ms)는 2341341210=10110010101000010101001002이다. 일 예에 따라 프로세서는 1001100010010110100000002를 제1 비트 단위로 분할할 수 있다. 예를 들어, 피승 수 데이터(Psum)는 하기의 수학식 15로 표현할 수 있다. [수학식 15] Psum = Psum0 × 0 + Psum1 × 1 + Psum2 × 2 = 10000000 × 0 + 10010110 × 1 + 10011000 × 2 일 예에 따라 프로세서는 10110010101000010101001002를 제1 비트 단위로 분할할 수 있다. 예를 들어, 승 수 데이터(Ms)는 하기의 수학식 16으로 표현할 수 있다. [수학식 16] Ms = Ms0 × 0 + Ms1 × 1 + Ms2 × 2 + Ms3 × 3 = 10100100 × 0 + 1000010 × 1 + 1100101 × 2+ 1 × 3 이어서, 프로세서는 피승수 데이터(Psum)에 대응되는 복수의 제1 파라미터(Psum0 내지 Psum2)와 승수 데이 터(Ms)에 대응되는 복수의 제2 파라미터(Ms0 내지 Ms3) 간의 곱셈 연산에 따른 복수의 조합을 식별할 수 있다. 이어서, 프로세서는 복수의 조합을 제1 비트(예를 들어, 8bits) 단위로 그룹핑하여 복수의 그룹을 획득할 수 있다. 한편, 프로세서는 곱셈기를 이용하여 복수의 조합을 순차적으로 곱셈 연산할 수 있으며, 이에 대한 구체적인 설명은 도 13을 참조하여 하도록 한다. 도 13은 본 개시의 일 실시 예에 따라 곱셈 연산에 따른 복수의 조합 각각의 연산 순서를 설명하기 위한 도면이 다. 도 13을 참조하면, 프로세서는 연산 반복 횟수가 초기 값(예를 들어, iteration 0)이면, 곱셈기를 이 용하여 복수의 그룹 중에서 제1 그룹에 포함된 Psum0×Ms0(=Temp0)의 결과 값을 획득할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시키며, 증가된 연산 반복 횟수(예를 들어, iteration 1)에 따 라, 곱셈기를 이용하여 복수의 그룹 중 제2 그룹에 포함된 Psum0×Ms1(=Temp10), Psum1×Ms0(=Temp11) 각 각의 결과 값을 순차적으로 획득할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시키며, 증가된 연산 반복 횟수(예를 들어, iteration 2)에 따 라, 곱셈기를 이용하여 복수의 그룹 중 제3 그룹에 포함된 Psum0×Ms2(=Temp20), Psum1×Ms1(=Temp21), Psum2×Ms0(=Temp22) 각각의 결과 값을 순차적으로 획득할 수 있다. 설명의 편의를 위해 복수의 조합 각각에 대응되는 결과 값은 도 14를 참조하여 설명하도록 한다. 도 14는 본 개시의 일 실시 예에 따라 복수의 조합 각각의 연산 결과를 설명하기 위한 도면이다. 도 14는 설명의 편의를 위해 결과 값들을 10진수로 표기하였다. 도 15는 본 개시의 일 실시 예에 따라 반복 횟수 정보에 따른 연산 결과를 설명하기 위한 도면이다. 도 14와 도 15를 참조하여, 반복 횟수 정보에 따라 곱셈기 및 덧셈기를 이용하여 획득된 SnC, acc 및 out 각각에 대해 설명하도록 한다. <iteration 0> 우선, 프로세서는 연산 반복 횟수가 초기 값(예를 들어, iteration 0)이면, 곱셈기를 이용하여 복수 의 그룹 중에서 제1 그룹에 포함된 Psum0×Ms0(=Temp0)의 결과 값인 2099210=1010010000000002 획득할 수 있다. 이어서, 프로세서는 덧셈기를 이용하여 제1 그룹에 포함된 조합들 각각의 곱셈 연산의 결과 값(이하, 중간 연산 값)들을 합하고, 중간 연산 값들의 합에서 하위 비트에 따른 데이터들을 out으로 정의하고, 상위 비 트에 따른 데이터들을 acc로 정의할 수 있다. 예를 들어, 프로세서는 1010010 000000002에서 하위 비트에 대응되는 00000000은 out으로, 1010010은 acc로 정의할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증 가시킬 수 있다. <iteration 1> 이어서, 프로세서는 비트 쉬프트 백터의 ms에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나 머지가 제1 비트에 대응되는 수 이상이므로(40 - 1 * 8 ≥ 8, 여기서, 40은 ms, 1은 연산 반복 횟수, 8은 제1 비트에 대응되는 수), 연산을 반복할 수 있다. 일 예에 따른 프로세서는 증가된 연산 반복 횟수(즉, iteration 1)에 대응되는 제2 그룹에 포함된 복수의 조합(Psum0×Ms1(=Temp10), Psum1×Ms0(=Temp11)) 각각의 곱셈 연산의 결과 값과, 메모리에 저장된 acc를 합할 수 있다. 예를 들어, 프로세서는 Psum0×Ms1(=Temp10)=844810=100001000000002, Psum1× Ms0(=Temp11)=2460010=1100000000110002을 획득하며, 메모리에 저장된 acc=10100102와 합할 수 있다. 이어서, 프로세서는 제2 그룹의 중간 연산 결과 값들의 합(Temp 1)과 메모리에 저장된 acc의 합인 3313010=10000001011010102을 SnC로 획득할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시킬 수 있다. <iteration 2> 이어서, 프로세서는 비트 쉬프트 백터의 ms에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나 머지가 제1 비트에 대응되는 수 이상이므로(40 - 2 * 8 ≥ 8, 여기서, 40은 ms, 2는 연산 반복 횟수, 8은 제1 비트에 대응되는 수), 연산을 반복할 수 있다. 일 예에 따른 프로세서는 메모리에 저장된 SnC에서 하위 비트에 따른 데이터들을 제외한, 상위 비트 에 따른 데이터들을 acc로 정의할 수 있다. 예를 들어, SnC=3313010=10000001011010102에서 1101010을 제외하고, 100000012=12910을 acc로 정의할 수 있다. 일 예에 따른 프로세서는 증가된 연산 반복 횟수(즉, iteration 2)에 대응되는 제3 그룹에 포함된 복수의 조합(Psum0×Ms2(=Temp20), Psum1×Ms1(=Temp21), Psum2×Ms0(=Temp22)) 각각의 곱셈 연산의 결과 값과, 메모리 에 저장된 acc를 합할 수 있다. 예를 들어, 프로세서는 Psum0×Ms2(=Temp20)=1292810=110010100000002, Psum1× Ms1(=Temp21)=990010=100110101011002, Psum2×Ms0(=Temp22)=2492810=1100001011000002을 획득하며, 메모리(11 0)에 저장된 acc=100000012=12910와 합할 수 있다. 이어서, 프로세서는 제3 그룹의 중간 연산 결과 값들의 합(Temp 2)과 메모리에 저장된 acc의 합인 4788510=10111011000011012을 SnC로 획득할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시킬 수 있다. <iteration 3> 이어서, 프로세서는 비트 쉬프트 백터의 ms에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나 머지가 제1 비트에 대응되는 수 이상이므로(40 - 3 * 8 ≥ 8, 여기서, 40은 ms, 3는 연산 반복 횟수, 8은 제1 비트에 대응되는 수), 연산을 반복할 수 있다. 일 예에 따른 프로세서는 메모리에 저장된 SnC에서 하위 비트에 따른 데이터들을 제외한, 상위 비트 에 따른 데이터들을 acc로 정의할 수 있다. 예를 들어, SnC=4788510=10111011000011012에서 1101을 제외하고, 101110112=18710을 acc로 정의할 수 있다. 일 예에 따른 프로세서는 증가된 연산 반복 횟수(즉, iteration 3)에 대응되는 제4 그룹에 포함된 복수의 조합((Psum0×Ms3(=Temp30), Psum1×Ms2(=Temp31), Psum2×Ms1(=Temp32)) 각각의 곱셈 연산의 결과 값과, 메모 리에 저장된 acc를 합할 수 있다. 예를 들어, 프로세서는 Psum0×Ms3(=Temp30)=12810=100000002, Psum1× Ms2(=Temp31)=1515010=111011001011102, Psum2×Ms1(=Temp32)=1003210=100111001100002을 획득하며, 메모리(11 0)에 저장된 acc=101110112=18710와 합할 수 있다. 이어서, 프로세서는 제4 그룹의 중간 연산 결과 값들의 합(Temp 3)과 메모리에 저장된 acc의 합인 2549710=1100011100110012을 SnC로 획득할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시킬 수 있다. <iteration 4> 이어서, 프로세서는 비트 쉬프트 백터의 ms에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나 머지가 제1 비트에 대응되는 수 이상이므로(40 - 4 * 8 ≥ 8, 여기서, 40은 ms, 4는 연산 반복 횟수, 8은 제1 비트에 대응되는 수), 연산을 반복할 수 있다. 일 예에 따른 프로세서는 메모리에 저장된 SnC에서 하위 비트에 따른 데이터들을 제외한, 상위 비트 에 따른 데이터들을 acc로 정의할 수 있다. 예를 들어, SnC=2549710=1100011100110012에서 10011001을 제외하고, 11000112=9910을 acc로 정의할 수 있다. 일 예에 따른 프로세서는 증가된 연산 반복 횟수(즉, iteration 4)에 대응되는 제5 그룹에 포함된 복수의 조합((Psum1×Ms3(=Temp40), Psum2×Ms2(=Temp41)) 각각의 곱셈 연산의 결과 값과, 메모리에 저장된 acc를 합할 수 있다. 예를 들어, 프로세서는 (Psum1×Ms3(=Temp40)=15010=100101102, Psum2× Ms2(=Temp41)=1535210=111011111110002을 획득하며, 메모리에 저장된 acc=11000112=9910와 합할 수 있다. 이어서, 프로세서는 제5 그룹의 중간 연산 결과 값들의 합(Temp 4)과 메모리에 저장된 acc의 합인 1560110=111100111100012을 SnC로 획득할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시킬 수 있다. <iteration 5> 이어서, 프로세서는 비트 쉬프트 백터의 ms에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나 머지가 제1 비트에 대응되는 수 미만이므로(40 - 5 * 8 < 8, 여기서, 40은 ms, 5는 연산 반복 횟수, 8은 제1 비 트에 대응되는 수), 연산의 반복 여부를 식별할 수 있다. 일 예에 따른 프로세서는 증가된 연산 반복 횟수(즉, iteration 5)에 대응되는 제6 그룹에 포함된 복수의 조합(Psum2×Ms3(=Temp50))의 곱셈 연산의 결과 값인 Psum2×Ms3(=Temp50)=15210=100110002에서 상위 비트에 따 른 데이터(즉, 2n부터 22n-1)가 0이므로 오버플로우(overflow)가 아닌 것으로 식별 할 수 있다. 따라서, 프로세서 는 연산을 반복할 수 있다. 이어서, 프로세서는 메모리에 저장된 SnC에서 하위 비트에 따른 데이터들을 제외한, 상위 비트에 따 른 데이터들을 acc로 정의할 수 있다. 예를 들어, SnC=1560110=111100111100012에서 11110001을 제외하고, 1111002=6010을 acc로 정의할 수 있다. 이어서 프로세서는 제6 그룹의 중간 연산 결과 값들의 합(Temp 5)과 메모리에 저장된 acc의 합인 21210를 SnC로 획득할 수 있다. 이어서, 프로세서는 연산 반복 횟수를 증가시킬 수 있다. <iteration 6> 이어서, 프로세서는 프로세서는 비트 쉬프트 백터의 ms에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나머지가 0 미만이므로(40 - 6 * 8 < 0, 여기서, 40은 ms, 6는 연산 반복 횟수, 8은 제1 비트에 대 응되는 수), 연산을 종료할 수 있다. 이어서, 프로세서는 메모리에 저장된 SnC=212를 양자화된 피승수 데이터(Qout)으로 출력할 수 있다. 예를 들어, 프로세서는 SnC=21210를 Qout으로 출력할 수 있다. 상술한 예시를 참조하면, Psum×Ms×2-ms=10000000×23413412×2-40≒212.9437이므로, 프로세서는 양자화 전 용 곱셈기가 아닌, 곱셈기(예를 들어, 8bits × 8bits의 곱셈 연산을 수행하는 곱셈기)를 이용하여 양자화 된 피승수 데이터(Qout)를 획득할 수 있다. 도 16은 본 개시의 일 실시 예에 따라 피승수 데이터를 양자화한 정수를 획득하는 방법을 설명하기 위한 도면이 다. 일 예에 따라 프로세서는 연산 반복 횟수, 비트 쉬프트 팩터의 ms, acc, out 각각을 초기 값으로 설정할 수 있다(S1601). 일 예에 따라 활성화 및 가중치 값 간의 컨벌루션 연산에 따라 피승수 데이터(Psum)를 획득(S1602)하며, 연산 반복 횟수에 따라 복수의 그룹 각각을 순차적으로 연산하여 복수의 그룹 각각에 대응되는 Temp #을 획득할 수 있다(S1603). 일 예로, 프로세서가 S1601 내지 S1603 단계에 따라 제2 그룹에 대응되는 연산 값(acc)를 획득한 후에, 비 트 시프트 팩터에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나머지가 제1 비트에 대응되는 수 이 상이면(S1605: Y, S1606: N, S1609: N), 곱셈기를 이용하여 복수의 그룹 중 연산 반복 횟수에 따른 제3 그룹에 포함된 조합들에 대응되는 제3 중간 연산 값들을 획득하고, 메모리에 직전에 저장된 제2 연산 값 및 제3 중간 연산 값들의 합에서 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수를 제3 그룹에 대응 되는 제3 연산 값을 획득하며, 제3 연산 값을 메모리에 저장한 후에 연산 반복 횟수를 증가시켜 연산 반복 횟수를 증가시킬 수 있다(S1614).일 예에 따라 프로세서는 비트 시프트 팩터에서 증가된 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제 외한 나머지 수가 제1 비트에 대응되는 수 미만이면(S1605: Y, S1606: N, S1609: Y), 증가된 연산 반복 횟수에 따른 제4 그룹에 포함된 조합들에 대응되는 제4 중간 연산 값들을 획득하고, 메모리에 직전에 저장된 제3 연산 값 및 제4 중간 연산 값들의 합에서 나머지 수에 대응되는 자릿수부터 제1 비트에 대응되는 자릿수까지의 수에 기초하여 오버플로우(overflow) 값을 정수로 출력할 수 있다(S1610: N, S1615). 일 예에 따른 프로세서는, 비트 시프트 팩터에서 증가된 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나머지 수가 영(zero)이면(S1606: Y), 증가된 연산 반복 횟수에 따른 제4 그룹에 포함된 조합들에 대응되는 제4 중간 연산 값들을 획득하고, 메모리에 직전에 저장된 제3 연산 값 및 제4 중간 연산 값들의 합에서 제1 비 트에 대응되는 자릿수까지의 수를 정수로 출력할 수 있다(S1607: Y, S1608, S1603, S1604, S1605: N, S1616). 일 예에 따른 프로세서는, 비트 시프트 팩터에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나머지 가 제1 비트에 대응되는 수 이상이면(S1605: Y, S1606: N, S1609: N), 곱셈기를 이용하여 복수의 그룹 중 연산 반복 횟수에 따른 제3 그룹에 포함된 조합들에 대응되는 제3 중간 연산 값들을 획득하고(S1614), 메모리에 직전에 저장된 제2 연산 값 및 제3 중간 연산 값들의 합에서 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수가 영(zero)이면(S1607: Y), 제1 비트에 대응되는 자릿수까지의 수를 정수로 출력할 수 있다(S1608, S1604, S1605, S1616). 한편, 도 16에 도시된 흐름도에 따른 S1601 내지 S1616 단계는 하기의 Psudo code로 표현할 수 있다. 표 1 Initial ms = ms + 8 If flag = 0: acc = SnC // 18 bit If ms = 0: Check overflow out = out // 8 bit else if 0 < ms < 8: Check overflow out = {SnC[ms-1:0], out[7:ms]} // 8 bit ms = 0 else if 8≤ms out = SnC [7:0] // 8 bit ms = ms - 8; Acc = SnC [17:8] // 10 bit 본 개시의 일 예에 따른 곱셈기(Multiplier), 덧셈기(Accumulator) 및 메모리를 포함하는 전자 장치의 제어 방 법은, 우선, 곱셈기 및 덧셈기를 이용한 활성(Activation) 값 및 가중치(Weight) 값 간의 컨벌루션 (convolution) 연산에 따라 피승수 데이터를 획득하여 메모리에 저장한다. 이어서, 활성 값을 양자화하기 위한 제1 스케일 팩터(scale factor), 가중치 값을 양자화하기 위한 제2 스케일 팩터 및 피승수 데이터를 양자화하기 위한 제3 스케일 팩터에 기초하여, 승수 데이터 및 비트 시프트(shift) 팩 터(factor)를 획득하여 메모리에 저장한다. 이어서, 곱셈기를 이용하여 피승수 데이터, 승수 데이터 및 비트 시프트 팩터 간의 곱셈 연산에 따라 피승수 데 이터를 양자화한 정수(integer)를 획득한다. 일 예에 따른 정수를 획득하는 단계는, 피승수 데이터를 제1 비트(bit)에 대응되는 자릿수 단위로 분할하여 적 어도 하나의 제1 파라미터를 획득하는 단계, 승수 데이터를 제1 비트에 대응되는 자릿수 단위로 분할하여 적어 도 하나의 제2 파라미터를 획득하는 단계, 적어도 하나의 제1 파라미터와 적어도 하나의 제2 파라미터 간의 곱 셈 연산에 따른 복수의 조합을 식별하는 단계, 식별된 복수의 조합을 제1 비트 단위로 그룹핑하여 복수의 그룹 을 획득하는 단계, 곱셈기를 이용하여 복수의 그룹 중 연산 반복 횟수에 따른 제1 그룹에 포함된 조합들에 대응 되는 제1 중간 연산 값들을 획득하는 단계, 덧셈기를 이용하여 제1 중간 연산 값들의 합을 획득하는 단계 및,제1 중간 연산 값들의 합에서 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수를 제1 그룹에 대응되는 제1 연산 값으로 획득하여 메모리에 저장하는 단계를 포함할 수 있다. 여기서, 제1 연산 값을 획득하는 단계는, 연산 반복 횟수가 초기화 설정 값에 대응되면, 제1 중간 연산 값들의 합에 기초하여 제1 연산 값을 획득하는 단계 및 연산 반복 횟수가 초기 설정 값에 대응되지 않으면, 메모리에 직전에 저장된 연산 값 및 제1 중간 연산 값들의 합에 기초하여 제1 연산 값을 획득하는 단계를 포함할 수 있다. 일 예에 따른 제어 방법은, 제1 연산 값을 메모리에 저장한 후에 연산 반복 횟수를 증가시켜 연산 반복 횟수를 증가시키는 단계를 더 포함할 수 있다. 여기서, 정수를 획득하는 단계는, 곱셈기를 이용하여 복수의 그룹 중 증가된 연산 반복 횟수에 따른 제2 그룹에 포함된 조합들에 대응되는 제2 중간 연산 값들을 획득하는 단계, 덧셈기를 이용하여 메모리에 저장된 제1 연산 값 및 제2 중간 연산 값들의 합을 획득하는 단계 및 제1 연산 값 및 제2 중간 연산 값들의 합에서 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수를 제2 그룹에 대응되는 제2 연산 값으로 획득하는 단계를 포함하 며, 증가시키는 단계는, 제2 연산 값을 메모리에 저장한 후에 연산 반복 횟수를 증가시키는 단계를 포함할 수 있다. 일 예에 따른 정수를 획득하는 단계는, 비트 시프트 팩터에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제 외한 나머지가 제1 비트에 대응되는 수 이상이면, 곱셈기를 이용하여 복수의 그룹 중 연산 반복 횟수에 따른 제 3 그룹에 포함된 조합들에 대응되는 제3 중간 연산 값들을 획득하는 단계 및 메모리에 직전에 저장된 제2 연산 값 및 제3 중간 연산 값들의 합에서 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수를 제3 그룹에 대 응되는 제3 연산 값을 획득하는 단계를 포함하며, 증가시키는 단계는, 제3 연산 값을 메모리에 저장한 후에 연 산 반복 횟수를 증가시켜 연산 반복 횟수를 증가시키는 단계를 포함할 수 있다. 여기서, 정수를 획득하는 단계는, 비트 시프트 팩터에서 증가된 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나머지 수가 제1 비트에 대응되는 수 미만이면, 증가된 연산 반복 횟수에 따른 제4 그룹에 포함된 조합 들에 대응되는 제4 중간 연산 값들을 획득하는 단계 및 메모리에 직전에 저장된 제3 연산 값 및 제4 중간 연산 값들의 합에서 나머지 수에 대응되는 자릿수부터 제1 비트에 대응되는 자릿수까지의 수에 기초하여 오버플로우 (overflow) 값을 정수로 출력하는 단계를 포함할 수 있다. 일 예에 따른 정수를 획득하는 단계는, 비트 시프트 팩터에서 증가된 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제외한 나머지 수가 영(zero)이면, 증가된 연산 반복 횟수에 따른 제4 그룹에 포함된 조합들에 대응되는 제4 중간 연산 값들을 획득하는 단계 및 메모리에 직전에 저장된 제3 연산 값 및 제4 중간 연산 값들의 합에서 제1 비트에 대응되는 자릿수까지의 수를 정수로 출력하는 단계를 포함할 수 있다. 일 예에 따른 정수를 획득하는 단계는, 비트 시프트 팩터에서 연산 반복 횟수만큼 제1 비트에 대응되는 수를 제 외한 나머지가 제1 비트에 대응되는 수 이상이면, 곱셈기를 이용하여 복수의 그룹 중 연산 반복 횟수에 따른 제 3 그룹에 포함된 조합들에 대응되는 제3 중간 연산 값들을 획득하는 단계 및 메모리에 직전에 저장된 제2 연산 값 및 제3 중간 연산 값들의 합에서 제1 비트에 대응되는 자릿수까지의 수를 제외한 나머지 수가 영(zero)이면, 제1 비트에 대응되는 자릿수까지의 수를 정수로 출력하는 단계를 포함할 수 있다. 한편, 상술한 본 개시의 다양한 실시 예들에 따른 방법들은, 기존 전자 장치에 설치 가능한 어플리케이션 형태 로 구현될 수 있다. 또한, 상술한 본 개시의 다양한 실시 예들에 따른 방법들은, 기존 전자 장치에 대한 소프트웨어 업그레이드, 또 는 하드웨어 업그레이드 만으로도 구현될 수 있다. 또한, 상술한 본 개시의 다양한 실시 예들은 전자 장치에 구비된 임베디드 서버, 또는 전자 장치 및 디스플레이 장치 중 적어도 하나의 외부 서버를 통해 수행되는 것도 가능하다. 한편, 본 개시의 일시 예에 따르면, 이상에서 설명된 다양한 실시 예들은 기기(machine)(예: 컴퓨터)로 읽을 수 있는 저장 매체(machine-readable storage media)에 저장된 명령어를 포함하는 소프트웨어로 구현될 수 있다. 기기는, 저장 매체로부터 저장된 명령어를 호출하고, 호출된 명령어에 따라 동작이 가능한 장치로서, 개시된 실 시 예들에 따른 전자 장치를 포함할 수 있다. 명령이 프로세서에 의해 실행될 경우, 프로세서가 직접, 또는 프 로세서의 제어 하에 다른 구성요소들을 이용하여 명령에 해당하는 기능을 수행할 수 있다. 명령은 컴파일러 또 는 인터프리터에 의해 생성 또는 실행되는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형태로 제공될 수 있다. 여기서, '비일시적'은 저장 매체가 신호(signal)를 포함 하지 않으며 실재(tangible)한다는 것을 의미할 뿐 데이터가 저장 매체에 반영구적 또는 임시적으로 저장됨을 구분하지 않는다. 또한, 본 개시의 일 실시 예에 따르면, 이상에서 설명된 다양한 실시 예들에 따른 방법은 컴퓨터 프로그램 제품 (computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory (CD-ROM))의 형태로, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 온라인으로 배포될 수 있 다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 또한, 상술한 다양한 실시 예들에 따른 구성 요소(예: 모듈 또는 프로그램) 각각은 단수 또는 복수의 개체로 구 성될 수 있으며, 전술한 해당 서브 구성 요소들 중 일부 서브 구성 요소가 생략되거나, 또는 다른 서브 구성 요 소가 다양한 실시 예에 더 포함될 수 있다. 대체적으로 또는 추가적으로, 일부 구성 요소들(예: 모듈 또는 프로 그램)은 하나의 개체로 통합되어, 통합되기 이전의 각각의 해당 구성 요소에 의해 수행되는 기능을 동일 또는 유사하게 수행할 수 있다. 다양한 실시 예들에 따른, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동 작들은 순차적, 병렬적, 반복적 또는 휴리스틱하게 실행되거나, 적어도 일부 동작이 다른 순서로 실행되거나, 생략되거나, 또는 다른 동작이 추가될 수 있다. 이상에서는 본 개시의 바람직한 실시 예에 대하여 도시하고 설명하였지만, 본 개시는 상술한 특정의 실시 예에"}
{"patent_id": "10-2023-0012931", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 14, "content": "한정되지 아니하며, 청구범위에서 청구하는 본 개시의 요지를 벗어남이 없이 당해 개시에 속하는 기술분야에서 통상의 지식을 가진 자에 의해 다양한 변형 실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 개시의 기술 적 사상이나 전망으로부터 개별적으로 이해되어져서는 안될 것이다."}
{"patent_id": "10-2023-0012931", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 종래 기술에 따른 양자화(Quantization)를 수행하는 전자 장치를 설명하기 위한 도면이다. 도 2는 본 개시의 일 실시 예에 따른 전자 장치의 구성을 설명하기 위한 블록도이다. 도 3은 본 개시의 일 실시 예에 따른 전자 장치의 구성을 설명하기 위한 상세 블록도이다. 도 4는 본 개시의 일 실시 예에 따른 피승수 데이터, 승수 데이터를 설명하기 위한 도면이다. 도 5는 본 개시의 일 실시 예에 따른 제1 비트(bit)에 대응되는 자릿수 단위로 분할된 피승수 데이터 및 승수 데이터를 설명하기 위한 도면이다. 도 6은 본 개시의 일 실시 예에 따른 피승수 데이터와 승수 데이터 간의 곱셈 연산을 설명하기 위한 도면이다. 도 7은 본 개시의 일 실시 예에 따른 곱셈 연산에 따른 복수의 조합을 설명하기 위한 도면이다. 도 8은 본 개시의 일 실시 예에 따른 복수의 조합을 그룹핑한 복수의 그룹을 설명하기 위한 도면이다. 도 9는 본 개시의 일 실시 예에 따른 복수의 그룹 간의 덧셈 연산을 설명하기 위한 도면이다. 도 10은 본 개시의 일 실시 예에 따른 연산을 종료하는 조건을 설명하기 위한 도면이다. 도 11은 본 개시의 일 실시 예에 따른 연산을 종료하는 조건을 설명하기 위한 도면이다. 도 12는 본 개시의 일 실시 예에 따라 24 비트의 피승수 데이터 및 승수 데이터를 설명하기 위한 도면이다. 도 13은 본 개시의 일 실시 예에 따라 곱셈 연산에 따른 복수의 조합 각각의 연산 순서를 설명하기 위한 도면이 다. 도 14는 본 개시의 일 실시 예에 따라 복수의 조합 각각의 연산 결과를 설명하기 위한 도면이다. 도 15는 본 개시의 일 실시 예에 따라 반복 횟수 정보에 따른 연산 결과를 설명하기 위한 도면이다. 도 16은 본 개시의 일 실시 예에 따라 피승수 데이터를 양자화한 정수를 획득하는 방법을 설명하기 위한 도면이 다."}
