{"patent_id": "10-2018-0040593", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2019-0117294", "출원번호": "10-2018-0040593", "발명의 명칭": "전자 장치 및 그의 제어방법", "출원인": "삼성전자주식회사", "발명자": "엄영익"}}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,컴퓨터 실행가능 명령어(computer executable instructions)를 저장하는 메모리; 및상기 컴퓨터 실행가능 명령어를 실행함으로써, 프로그램을 실행하기 위한 요청이 입력되고 상기 프로그램에 할당하기 위한 상기 메모리의 제1 영역의 가용 용량이 부족한 경우, 상기 제1 영역에 저장된 페이지 데이터를 상기 메모리의 제2 영역으로 스왑 아웃(swap-out)하는 프로세서;를 포함하며,상기 프로세서는,상기 페이지 데이터의 속성을 기초로, 상기 페이지 데이터를 일부 스왑 아웃하거나 전체 스왑 아웃하는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 프로세서는,상기 페이지 데이터가 저장된 제1 영역 상의 주소를 기초로 상기 페이지 데이터의 속성을 식별하는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 프로세서는,상기 페이지 데이터의 일부가 복구 가능한 데이터이면 상기 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 페이지 데이터가 복구 가능한 데이터를 포함하지 않으면 상기 페이지 데이터의 속성을 제2 속성으로 식별하며, 상기 페이지 데이터의 속성이 상기 제1 속성이면 상기 페이지 데이터에서 복구 가능한 데이터를 폐기(discard)한 나머지 데이터에 대해 일부 스왑 아웃하고, 상기 페이지 데이터의 속성이 상기 제2 속성이면 상기 페이지 데이터 전체를 스왑 아웃하는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 프로세서는,상기 일부 스왑 아웃한 데이터를 상기 제2 영역으로부터 상기 제1 영역으로 스왑 인(swap-in)하는 경우, 상기일부 스왑 아웃 시 폐기된 데이터를 복구하는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 프로세서는,상기 페이지 데이터에 대해 기 생성된 속성 정보를 기초로 상기 페이지 데이터의 속성을 식별하는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "공개특허 10-2019-0117294-2-제5항에 있어서,상기 프로세서는,상기 페이지 데이터에 상기 속성 정보를 추가하여 상기 제1 영역에 저장하는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 프로세서는,상기 스왑 아웃할 페이지 데이터를 특정 압축 알고리즘을 이용하여 압축하고, 상기 압축된 데이터를 상기 제2영역으로 스왑 아웃하며, 상기 특정 압축 알고리즘은, 상기 페이지 데이터의 속성을 기초로 손실 압축 알고리즘 또는 비손실 압축 알고리즘에서 선택되는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 프로세서는,상기 스왑 아웃할 페이지 데이터가 영상 데이터 및 비디오 데이터 중 적어도 하나의 데이터이면 상기 스왑 아웃할 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제1 속성이아니면 제2 속성으로 식별하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제1 속성이면 상기 스왑 아웃할 페이지 데이터를 손실 압축 알고리즘을 이용하여 압축하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제2 속성이면 상기 스왑 아웃할페이지 데이터를 비손실 압축 알고리즘을 이용하여 압축하는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제7항에 있어서,상기 프로세서는,상기 이용된 특정 압축 알고리즘에 대한 메타 데이터를 상기 제2 영역에 저장하고, 상기 제2 영역에 저장된 상기 압축된 데이터를 제1 영역으로 스왑 인(swap-in) 하는 경우 상기 메타 데이터를 기초로 상기 압축된 데이터를 압축 해제하는 전자 장치."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "전자 장치의 제어방법에 있어서,프로그램을 실행하기 위한 요청을 입력받는 단계; 및상기 프로그램에 할당하기 위한 상기 전자 장치의 메모리의 제1 영역의 가용 용량이 부족한 경우, 상기 제1 영역에 저장된 페이지 데이터를 상기 메모리의 제2 영역으로 스왑 아웃(swap-out)하는 단계;를 포함하며,상기 스왑 아웃하는 단계는,상기 페이지 데이터의 속성을 기초로, 상기 페이지 데이터를 일부 스왑 아웃하거나 전체 스왑 아웃하는 제어방법."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 스왑 아웃하는 단계는,상기 페이지 데이터가 저장된 제1 영역 상의 주소를 기초로 상기 페이지 데이터의 속성을 식별하는 단계를 포함하는 제어방법.공개특허 10-2019-0117294-3-청구항 12 제10항에 있어서,상기 스왑 아웃하는 단계는,상기 페이지 데이터의 일부가 복구 가능한 데이터이면 상기 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 페이지 데이터가 복구 가능한 데이터를 포함하지 않으면 상기 페이지 데이터의 속성을 제2 속성으로 식별하는 단계; 및상기 페이지 데이터의 속성이 상기 제1 속성이면 상기 페이지 데이터에서 복구 가능한 데이터를 폐기(discard)한 나머지 데이터에 대해 일부 스왑 아웃하고, 상기 페이지 데이터의 속성이 상기 제2 속성이면 상기 페이지 데이터 전체를 스왑 아웃하는 단계;를 포함하는 제어방법."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서,상기 일부 스왑 아웃한 데이터를 상기 제2 영역으로부터 상기 제1 영역으로 스왑 인(swap-in)하는 경우, 상기일부 스왑 아웃 시 폐기된 데이터를 복구하는 단계;를 더 포함하는 제어방법."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제10항에 있어서,상기 스왑 아웃하는 단계는,상기 페이지 데이터에 대해 기 생성된 속성 정보를 기초로 상기 페이지 데이터의 속성을 식별하는 단계를 포함하는 제어방법."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 페이지 데이터에 상기 속성 정보를 추가하여 상기 제1 영역에 저장하는 단계를 더 포함하는 제어방법."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제10항에 있어서,상기 스왑 아웃하는 단계는,상기 스왑 아웃할 페이지 데이터를 특정 압축 알고리즘을 이용하여 압축하고, 상기 압축된 데이터를 상기 제2영역으로 스왑 아웃하며, 상기 특정 압축 알고리즘은, 상기 페이지 데이터의 속성을 기초로 손실 압축 알고리즘 또는 비손실 압축 알고리즘에서 선택되는 제어방법."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제16항에 있어서,상기 스왑 아웃하는 단계는,상기 스왑 아웃할 페이지 데이터가 영상 데이터 및 비디오 데이터 중 적어도 하나의 데이터이면 상기 스왑 아웃할 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제1 속성이아니면 제2 속성으로 식별하는 단계; 및상기 스왑 아웃할 페이지 데이터의 속성이 상기 제1 속성이면 상기 스왑 아웃할 페이지 데이터를 손실 압축 알고리즘을 이용하여 압축하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제2 속성이면 상기 스왑 아웃할페이지 데이터를 비손실 압축 알고리즘을 이용하여 압축하는 단계;를 포함하는 제어방법."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "공개특허 10-2019-0117294-4-제16항에 있어서,상기 이용된 특정 압축 알고리즘에 대한 메타 데이터를 상기 제2 영역에 저장하고, 상기 제2 영역에 저장된 상기 압축된 데이터를 제1 영역으로 스왑 인(swap-in) 하는 경우 상기 메타 데이터를 기초로 상기 압축된 데이터를 압축 해제하는 단계;를 더 포함하는 제어방법."}
{"patent_id": "10-2018-0040593", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "전자 장치의 제어방법을 실행하기 위한 프로그램이 저장된 컴퓨터 판독 가능 기록매체에 있어서,상기 제어방법은,프로그램을 실행하기 위한 요청을 입력받는 단계; 및상기 프로그램에 할당하기 위한 상기 전자 장치의 메모리의 제1 영역의 가용 용량이 부족한 경우, 상기 제1 영역에 저장된 페이지 데이터를 상기 메모리의 제2 영역으로 스왑 아웃(swap-out)하는 단계;를 포함하며,상기 스왑 아웃하는 단계는,상기 페이지 데이터의 속성을 기초로, 상기 페이지 데이터를 일부 스왑 아웃하거나 전체 스왑 아웃하는 기록매체."}
{"patent_id": "10-2018-0040593", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "전자 장치가 개시된다. 본 전자 장치는 컴퓨터 실행가능 명령어(computer executable instructions)를 저장하는 메모리 및 컴퓨터 실행가능 명령어를 실행함으로써, 프로그램을 실행하기 위한 요청이 입력되고 프로그램에 할당 하기 위한 메모리의 제1 영역의 가용 용량이 부족한 경우, 제1 영역에 저장된 페이지 데이터를 메모리의 제2 영 역으로 스왑 아웃(swap-out)하는 프로세서를 포함하며, 프로세서는, 페이지 데이터의 속성을 기초로, 페이지 데 이터를 일부 스왑 아웃하거나 전체 스왑 아웃한다."}
{"patent_id": "10-2018-0040593", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 전자 장치 및 그의 제어방법에 대한 것으로, 더욱 상세하게는 자원 사용량 최소화를 위한 메모리 스 와핑 최적화를 수행하는 전자 장치 및 그의 제어방법에 관한 것이다."}
{"patent_id": "10-2018-0040593", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "스마트TV와 스마트 폰의 기능이 복잡해 지면서 SW 플랫폼의 HW자원 사용량이 크게 증가하고 있다. 가장 많이 사 용하는 HW 자원 중에는 CPU와 DRAM, Flash Memory, 등이 있다. 이 중 CPU는 동작 속도가 계속 증가하고 멀티코 어와 같이 대체할 수 있는 기술이 발전하고 있다. 하지만 DRAM과 Flash Memory는 임베디드 시스템의 특성상 메 모리 크기와 저장장치의 용량을 무한정 늘릴 수 없는 한계를 가지고 있고 상대적으로 느린 속도 증가를 보이고 있다. 특히, DRAM은 전원이 꺼졌을 때 데이터가 지워지는 휘발적인 특성에도 불구하고 가장 빠른 동작 속도를 가지고 있기 때문에, 어플리케이션의 동작을 빠르게 하기 위하여 가장 공격적으로 사용되고 있다. 지속적으로 대용량 DRAM을 적용하여 부족한 DRAM의 크기를 늘린다고 하더라도, 폭발적으로 증가하는 메모리 사 용에 대한 요구사항을 하드웨어적으로만 대응하기는 어렵다. 더구나 하드웨어적으로 DRAM의 크기를 증가시키는 것은 제품 개발 비용의 상승을 유발하기 때문에 가장 좋은 해결 방법으로 보기 어렵다. 이런 메모리 부족 문제를 해결하기 위하여 소프트웨어에는 다양한 연구가 존재하고, 특히 운영체제에서는 다양 한 기술을 지원하고 있다. 메모리 회수는 운영체제에서 지원하는 대표적인 메모리 관리 기술로 필요한 메모리를 확보하기 위한 기술을 지원하고 있다. 예를 들어, 파일의 읽기와 쓰기 동작을 더 빠르게 만들기 위하여 사용하 는 Page Cache 영역은 메모리 회수에 의하여 빠르게 회수되어 메모리가 필요한 어플리케이션에 할당된다. 또 다 른 예로는 메모리 스와핑이 있다. 메모리 스와핑은 현재 사용 빈도가 낮은 메모리의 데이터를 저장 공간에 복사 후 해당 메모리를 회수하여 메모리가 필요한 어플리케이션에 전달하는 방법으로 메모리를 확보한다. 기존 운영체제에서는 메모리 회수를 통하여 다양한 메모리 확보 방법을 제공하고 있지만 DRAM과 저장장치의 크 기에 제한적인 임베디드 시스템에서는 이런 방법을 모두 사용하기에는 많은 어려움을 가지고 있다. 예를 들어, 메모리 스와핑은 사용 빈도가 낮은 메모리 데이터를 저장장치로 옮겨야 하지만 스마트TV에서 사용하는 플레시 메모리는 HDD와 다른 특성과 낮은 수명을 가지고 있기 때문에 임시 데이터를 저장하는 용도로 사용할 수 없는 문제점을 가지고 있다. PC나 서버와 같은 다른 컴퓨팅 환경에서는 메모리 스와핑을 일시적인 메모리 사용량 증 가 문제를 완화시키는 목적으로 효율적으로 적용하고 있지만, 임베디드 시스템에서 동일 목적으로 사용에 제약 을 받고 있다. 메모리 스와핑을 사용하지 못하는 것은 메모리 사용량 증가 이슈를 해결하기 위한 목적에서는 큰 손실이라고 볼 수 있다. 이런 임베디드 시스템 환경의 제약사항을 극복하기 위하여 많은 연구가 이루어졌다. 공개 소프트웨어인 리눅스 커널에서 제공하는 zram과 zswap은 임베디드 시스템에서 플레시 메모리에 메모리의 데이터를 저장하지 못하는 문제를 극복하기 위하여 압축하여 메모리 영역에 저장하는 기법을 제안하였다. Zram은 2010년 리눅스 커널 3.14버전부터 지원하는 오픈소스 블록 디바이스 드라이버이다. Zram은 커널의 스와 핑 알고리즘이 전달하는 메모리 페이지를 압축하여 커널 메모리에 저장한다. 커널 메모리에 저장하기 위하여 zmalloc 메모리 할당자를 사용한다. Zram은 lz0를 기본 압축 알고리즘으로 사용하고 lz4, lz4hc, 842, 등 다양 한 압축 알고리즘을 사용한다. Zram은 블록 디바이스로 동작하기 때문에 다른 커널 코드의 수정 없이 디바이스 드라이버를 추가하는 것만으로도 동작이 가능하고, 압축된 메모리 페이지를 커널 메모리 공간에 저장하기 때문 에 스왑 파티션을 위한 실제 저장장치가 없는 임베디드 시스템에서도 쉽게 사용할 수 있는 장점을 가지고 있다. Zswap은 2013년 리눅스 3.11 버전부터 지원하는 리눅스 커널의 메모리 관리 기능이다. 그림 2b는 zswap의 동작 구조를 보여주고 있다. Zswap은 커널의 메모리 관리자 기능의 일부분으로 스왑된 페이지를 저장장치에 쓰는 대 신 커널 메모리에 압축하여 저장한다. 그리고 커널 메모리 공간이 부족할 때 스왑된 페이지를 저장장치에 저장 한다. 커널 메모리에 저장하기 위하여 zhud 메모리 할당자를 사용하고 zsmalloc 메모리 할당자도 지원한다. Zswap 역시 lz0와 lz4, 등 커널이 지원하는 압축 알고리즘을 제공한다. Zswap은 스왑 파티션이 있을 때 메모리 페이지를 압축하여 커널 메모리에 저장하는 기능과 스왑 파티션을 같이 사용할 수 있는 장점을 가지고 있다. 종래의 zram과 zswap과 같이 압축하여 데이터를 저장하는 것을 데이터 패턴에 따른 압축률의 한계와 성능의 제 약을 가지고 있게 된다. 압축률이 높은 알고리즘을 사용하면 데이터를 많이 압축할 수 있어서 메모리 공간을 절 약할 수 있지만, 메모리 페이지를 스와핑할 때나 스와핑된 메모리 페이지를 읽어올 때 압축과 해제에 따른 성능 손실이 크게 발생하게 된다. 반대로 성능위주의 압축 알고리즘을 선택한다면 압축률이 낮아지면서 메모리 데이 터 압축에 의한 메모리 공간 절약 효과가 미미한 부작용이 발생하게 된다. 예를 들어, 압축률을 높이기 위하여 lz4hc나 842 알고리즘을 적용하면 다른 알고리즘과 비교하여 높은 성능 저 하를 발생시킨다. 그리고 성능을 개선하기 위하여 lz0 알고리즘을 적용하면 압축률이 크게 저하된다. 상대적으 로 이 데이터 패턴의 경우에는 lz4 알고리즘이 압축률과 성능에서 유리한 결과를 보여주고 있다. 하지만 특정 데이터 패턴의 제외하고는 일반적인 스마트TV 제품 시나리오에서의 zram의 압축 성능은 75% 정도의 효율을 보여주고 있고, 그 이상의 메모리 절감 효과를 보이기는 어려운 한계를 보여주고 있다."}
{"patent_id": "10-2018-0040593", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 상술한 문제에 따라 고안된 것으로, 본 개시의 목적은 자원 사용량 최소화를 위한 메모리 스와핑 최 적화를 수행하는 전자 장치 및 그의 제어방법을 제공함에 있다."}
{"patent_id": "10-2018-0040593", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "이상과 같은 목적을 달성하기 위한 본 개시의 일 실시 예에 따른 전자 장치는, 컴퓨터 실행가능 명령어 (computer executable instructions)를 저장하는 메모리 및 상기 컴퓨터 실행가능 명령어를 실행함으로써, 프로 그램을 실행하기 위한 요청이 입력되고 상기 프로그램에 할당하기 위한 상기 메모리의 제1 영역의 가용 용량이 부족한 경우, 상기 제1 영역에 저장된 페이지 데이터를 상기 메모리의 제2 영역으로 스왑 아웃(swap-out)하는 프로세서를 포함하며, 상기 프로세서는, 상기 페이지 데이터의 속성을 기초로, 상기 페이지 데이터를 일부 스왑 아웃하거나 전체 스왑 아웃한다. 이 경우, 상기 프로세서는, 상기 페이지 데이터가 저장된 제1 영역 상의 주소를 기초로 상기 페이지 데이터의 속성을 식별할 수 있다. 한편, 상기 프로세서는, 상기 페이지 데이터의 일부가 복구 가능한 데이터이면 상기 페이지 데이터의 속성을 제 1 속성으로 식별하고, 상기 페이지 데이터가 복구 가능한 데이터를 포함하지 않으면 상기 페이지 데이터의 속성 을 제2 속성으로 식별하며, 상기 페이지 데이터의 속성이 상기 제1 속성이면 상기 페이지 데이터에서 복구 가능 한 데이터를 폐기(discard)한 나머지 데이터에 대해 일부 스왑 아웃하고, 상기 페이지 데이터의 속성이 상기 제 2 속성이면 상기 페이지 데이터 전체를 스왑 아웃할 수 있다. 이 경우, 상기 프로세서는, 상기 일부 스왑 아웃한 데이터를 상기 제2 영역으로부터 상기 제1 영역으로 스왑 인 (swap-in)하는 경우, 상기 일부 스왑 아웃 시 폐기된 데이터를 복구할 수 있다.한편, 상기 프로세서는, 상기 페이지 데이터에 대해 기 생성된 속성 정보를 기초로 상기 페이지 데이터의 속성 을 식별할 수 있다. 이 경우, 상기 프로세서는, 상기 페이지 데이터에 상기 속성 정보를 추가하여 상기 제1 영역에 저장할 수 있다. 한편, 상기 프로세서는, 상기 스왑 아웃할 페이지 데이터를 특정 압축 알고리즘을 이용하여 압축하고, 상기 압 축된 데이터를 상기 제2 영역으로 스왑 아웃하며, 상기 특정 압축 알고리즘은, 상기 페이지 데이터의 속성을 기 초로 손실 압축 알고리즘 또는 비손실 압축 알고리즘에서 선택될 수 있다. 이 경우, 상기 프로세서는, 상기 스왑 아웃할 페이지 데이터가 영상 데이터 및 비디오 데이터 중 적어도 하나의 데이터이면 상기 스왑 아웃할 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 스왑 아웃할 페이지 데이터 의 속성이 상기 제1 속성이 아니면 제2 속성으로 식별하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제1 속성이면 상기 스왑 아웃할 페이지 데이터를 손실 압축 알고리즘을 이용하여 압축하고, 상기 스왑 아웃할 페이 지 데이터의 속성이 상기 제2 속성이면 상기 스왑 아웃할 페이지 데이터를 비손실 압축 알고리즘을 이용하여 압 축할 수 있다. 한편, 상기 프로세서는, 상기 이용된 특정 압축 알고리즘에 대한 메타 데이터를 상기 제2 영역에 저장하고, 상 기 제2 영역에 저장된 상기 압축된 데이터를 제1 영역으로 스왑 인(swap-in) 하는 경우 상기 메타 데이터를 기 초로 상기 압축된 데이터를 압축 해제할 수 있다. 한편, 본 개시의 일 실시 예에 따른 전자 장치의 제어방법은, 프로그램을 실행하기 위한 요청을 입력받는 단계 및 상기 프로그램에 할당하기 위한 상기 전자 장치의 메모리의 제1 영역의 가용 용량이 부족한 경우, 상기 제1 영역에 저장된 페이지 데이터를 상기 메모리의 제2 영역으로 스왑 아웃(swap-out)하는 단계를 포함하며, 상기 스왑 아웃하는 단계는, 상기 페이지 데이터의 속성을 기초로, 상기 페이지 데이터를 일부 스왑 아웃하거나 전체 스왑 아웃할 수 있다. 이 경우, 상기 스왑 아웃하는 단계는, 상기 페이지 데이터가 저장된 제1 영역 상의 주소를 기초로 상기 페이지 데이터의 속성을 식별하는 단계를 포함할 수 있다. 한편, 상기 스왑 아웃하는 단계는, 상기 페이지 데이터의 일부가 복구 가능한 데이터이면 상기 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 페이지 데이터가 복구 가능한 데이터를 포함하지 않으면 상기 페이지 데이 터의 속성을 제2 속성으로 식별하는 단계 및 상기 페이지 데이터의 속성이 상기 제1 속성이면 상기 페이지 데이 터에서 복구 가능한 데이터를 폐기(discard)한 나머지 데이터에 대해 일부 스왑 아웃하고, 상기 페이지 데이터 의 속성이 상기 제2 속성이면 상기 페이지 데이터 전체를 스왑 아웃하는 단계를 포함할 수 있다. 이 경우, 본 실시 예에 따른 제어 방법은, 상기 일부 스왑 아웃한 데이터를 상기 제2 영역으로부터 상기 제1 영 역으로 스왑 인(swap-in)하는 경우, 상기 일부 스왑 아웃 시 폐기된 데이터를 복구하는 단계를 더 포함할 수 있 다. 한편, 상기 스왑 아웃하는 단계는, 상기 페이지 데이터에 대해 기 생성된 속성 정보를 기초로 상기 페이지 데이 터의 속성을 식별하는 단계를 포함할 수 있다. 이 경우, 상기 페이지 데이터에 상기 속성 정보를 추가하여 상기 제1 영역에 저장하는 단계를 더 포함할 수 있 다. 한편, 상기 스왑 아웃하는 단계는, 상기 스왑 아웃할 페이지 데이터를 특정 압축 알고리즘을 이용하여 압축하고, 상기 압축된 데이터를 상기 제2 영역으로 스왑 아웃하며, 상기 특정 압축 알고리즘은, 상기 페이지 데이터의 속성을 기초로 손실 압축 알고리즘 또는 비손실 압축 알고리즘에서 선택될 수 있다. 이 경우, 상기 스왑 아웃하는 단계는, 상기 스왑 아웃할 페이지 데이터가 영상 데이터 및 비디오 데이터 중 적 어도 하나의 데이터이면 상기 스왑 아웃할 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제1 속성이 아니면 제2 속성으로 식별하는 단계 및 상기 스왑 아웃할 페이지 데이 터의 속성이 상기 제1 속성이면 상기 스왑 아웃할 페이지 데이터를 손실 압축 알고리즘을 이용하여 압축하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제2 속성이면 상기 스왑 아웃할 페이지 데이터를 비손실 압축 알고리즘을 이용하여 압축하는 단계를 포함할 수 있다. 한편, 본 실시 예에 따른 제어 방법은, 상기 이용된 특정 압축 알고리즘에 대한 메타 데이터를 상기 제2 영역에 저장하고, 상기 제2 영역에 저장된 상기 압축된 데이터를 제1 영역으로 스왑 인(swap-in) 하는 경우 상기 메타데이터를 기초로 상기 압축된 데이터를 압축 해제하는 단계를 더 포함할 수 있다. 본 개시의 일 실시 예에 따른 전자 장치의 제어방법을 실행하기 위한 프로그램이 저장된 컴퓨터 판독 가능 기록 매체에 있어서, 상기 제어방법은, 프로그램을 실행하기 위한 요청을 입력받는 단계 및 상기 프로그램에 할당하 기 위한 상기 전자 장치의 메모리의 제1 영역의 가용 용량이 부족한 경우, 상기 제1 영역에 저장된 페이지 데이 터를 상기 메모리의 제2 영역으로 스왑 아웃(swap-out)하는 단계를 포함하며, 상기 스왑 아웃하는 단계는, 상기 페이지 데이터의 속성을 기초로, 상기 페이지 데이터를 일부 스왑 아웃하거나 전체 스왑 아웃할 수 있다."}
{"patent_id": "10-2018-0040593", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 문서의 다양한 실시 예가 첨부된 도면을 참조하여 기재된다. 그러나 이는 본 문서에 기재된 기술을 특 정한 실시 형태에 대해 한정하려는 것이 아니며, 본 문서의 실시 예의 다양한 변경(modifications), 균등물 (equivalents), 및/또는 대체물(alternatives)을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 본 문서에서, \"가진다,\" \"가질 수 있다,\" \"포함한다,\" 또는 \"포함할 수 있다\" 등의 표현은 해당 특징(예: 수치, 기능, 동작, 또는 부품 등의 구성요소)의 존재를 가리키며, 추가적인 특징의 존재를 배제하지 않는다. 본 문서에서, \"A 또는 B,\" \"A 또는/및 B 중 적어도 하나,\" 또는 \"A 또는/및 B 중 하나 또는 그 이상\" 등의 표현 은 함께 나열된 항목들의 모든 가능한 조합을 포함할 수 있다. 예를 들면, \"A 또는 B,\" \"A 및 B 중 적어도 하나,\" 또는 \"A 또는 B 중 적어도 하나\"는, 적어도 하나의 A를 포함, 적어도 하나의 B를 포함, 또는 적어도 하나의 A 및 적어도 하나의 B 모두를 포함하는 경우를 모두 지칭할 수 있다. 본 문서에서 사용된 \"제1,\" \"제2,\" \"첫째,\" 또는 \"둘째,\" 등의 표현들은 다양한 구성요소들을, 순서 및/또는 중 요도에 상관없이 수식할 수 있고, 한 구성요소를 다른 구성요소와 구분하기 위해 사용될 뿐 해당 구성요소들을 한정하지 않는다. 예를 들면, 제1 사용자 기기와 제2 사용자 기기는, 순서 또는 중요도와 무관하게, 서로 다른 사용자 기기를 나타낼 수 있다. 예를 들면, 본 문서에 기재된 권리 범위를 벗어나지 않으면서 제1 구성요소는 제2 구성요소로 명명될 수 있고, 유사하게 제2 구성요소도 제1 구성요소로 바꾸어 명명될 수 있다. 본 문서에서 사용된 \"모듈\", \"유닛\", \"부(part)\" 등과 같은 용어는 적어도 하나의 기능이나 동작을 수행하는 구 성요소를 지칭하기 위한 용어이며, 이러한 구성요소는 하드웨어 또는 소프트웨어로 구현되거나 하드웨어 및 소 프트웨어의 결합으로 구현될 수 있다. 또한, 복수의 \"모듈\", \"유닛\", \"부(part)\" 등은 각각이 개별적인 특정한 하드웨어로 구현될 필요가 있는 경우를 제외하고는, 적어도 하나의 모듈이나 칩으로 일체화되어 적어도 하나의 프로세서로 구현될 수 있다. 어떤 구성요소(예: 제1 구성요소)가 다른 구성요소(예: 제2 구성요소)에 \"(기능적으로 또는 통신적으로) 연결되 어((operatively or communicatively) coupled with/to)\" 있다거나 \"접속되어(connected to)\" 있다고 언급된 때에는, 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로 연결되거나, 다른 구성요소(예: 제3 구성요 소)를 통하여 연결될 수 있다고 이해되어야 할 것이다. 반면에, 어떤 구성요소(예: 제1 구성요소)가 다른 구성 요소(예: 제2 구성요소)에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있다고 언급된 때에는, 상기 어떤 구성요 소와 상기 다른 구성요소 사이에 다른 구성요소(예: 제3 구성요소)가 존재하지 않는 것으로 이해될 수 있다. 본 문서에서 사용된 표현 \"~하도록 구성된(또는 설정된)(configured to)\"은 상황에 따라, 예를 들면, \"~에 적합 한(suitable for),\" \"~하는 능력을 가지는(having the capacity to),\" \"~하도록 설계된(designed to),\" \"~하도 록 변경된(adapted to),\" \"~하도록 만들어진(made to),\" 또는 \"~를 할 수 있는(capable of)\"과 바꾸어 사용될 수 있다. 용어 \"~하도록 구성된(또는 설정된)\"은 하드웨어적으로 \"특별히 설계된(specifically designed to)\"것만을 반드시 의미하지 않을 수 있다. 대신, 어떤 상황에서는, \"~하도록 구성된 장치\"라는 표현은, 그 장치가 다른 장치 또는 부품들과 함께 \"~할 수 있는\" 것을 의미할 수 있다. 예를 들면, 문구 \"A, B, 및 C를 수행하도록 구성된(또는 설정된) 프로세서\"는 해당 동작을 수행하기 위한 전용 프로세서(예: 임베디드 프로세서), 또는 메 모리 장치에 저장된 하나 이상의 소프트웨어 프로그램들을 실행함으로써, 해당 동작들을 수행할 수 있는 범용 프로세서(generic-purpose processor)(예: CPU 또는 application processor)를 의미할 수 있다. 본 문서에서 사용된 용어들은 단지 특정한 실시 예를 설명하기 위해 사용된 것으로, 다른 실시 예의 범위를 한 정하려는 의도가 아닐 수 있다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함할 수 있다. 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 용어들은 본 문서에 기재된 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가질 수 있다. 본 문서에 사용된 용어 들 중 일반적인 사전에 정의된 용어들은, 관련 기술의 문맥상 가지는 의미와 동일 또는 유사한 의미로 해석될 수 있으며, 본 문서에서 명백하게 정의되지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다. 경우에 따라서, 본 문서에서 정의된 용어일지라도 본 문서의 실시 예들을 배제하도록 해석될 수 없다. 본 문서의 다양한 실시 예들에 따른 전자 장치는, 예를 들면, 스마트폰(smartphone), 태블릿 PC(tablet personal computer), 이동 전화기(mobile phone), 영상 전화기, 전자책 리더기(e-book reader), 데스크탑 PC(desktop personal computer), 랩탑 PC(laptop personal computer), 넷북 컴퓨터(netbook computer), 워크 스테이션(workstation), 서버, PDA(personal digital assistant), PMP(portable multimedia player), MP3 플 레이어, 모바일 의료기기, 카메라(camera), 또는 웨어러블 장치(wearable device) 중 적어도 하나를 포함할 수 있다. 다양한 실시 예에 따르면, 웨어러블 장치는 액세서리형(예: 시계, 반지, 팔찌, 발찌, 목걸이, 안경, 콘택 트렌즈, 또는 머리 착용형 장치(head-mounted-device(HMD)), 직물 또는 의류 일체형(예: 전자 의복), 신체 부착 형(예: 스킨 패드(skin pad) 또는 문신), 또는 생체 이식형(예: implantable circuit) 중 적어도 하나를 포함 할 수 있다. 어떤 실시 예들에서, 전자 장치는 가전제품(home appliance)일 수 있다. 가전제품은, 예를 들면, 텔레비전, DVD(digital video disk) 플레이어, 오디오, 냉장고, 에어컨, 청소기, 오븐, 전자레인지, 세탁기, 공기 청정기, 셋톱 박스(set-top box), 홈 오토매이션 컨트롤 패널(home automation control panel), 보안 컨트롤 패널 (security control panel), TV 박스(예: 삼성 HomeSync쪠, 애플TV쪠, 또는 구글 TV쪠), 게임 콘솔(예: Xbox쪠, PlayStation쪠), 전자 사전, 전자 키, 캠코더(camcorder), 또는 전자 액자 중 적어도 하나를 포함할 수 있다. 다른 실시 예에서, 전자 장치는, 각종 의료기기(예: 각종 휴대용 의료측정기기(혈당 측정기, 심박 측정기, 혈압 측정기, 또는 체온 측정기 등), MRA(magnetic resonance angiography), MRI(magnetic resonance imaging), CT(computed tomography), 촬영기, 또는 초음파기 등), 네비게이션(navigation) 장치, 위성 항법 시스템 (GNSS(global navigation satellite system)), EDR(event data recorder), FDR(flight data recorder), 자동 차 인포테인먼트(infotainment) 장치, 선박용 전자 장비(예: 선박용 항법 장치, 자이로 콤파스 등), 항공 전자 기기(avionics), 보안 기기, 차량용 헤드 유닛(head unit), 산업용 또는 가정용 로봇, 금융 기관의 ATM(automatic teller's machine), 상점의 POS(point of sales), 또는 사물 인터넷 장치(internet of things) (예: 전구, 각종 센서, 전기 또는 가스 미터기, 스프링클러 장치, 화재경보기, 온도조절기(thermostat), 가로등, 토스터(toaster), 운동기구, 온수탱크, 히터, 보일러 등) 중 적어도 하나를 포함할 수 있다. 어떤 실시 예에 따르면, 전자 장치는 가구(furniture) 또는 건물/구조물의 일부, 전자 보드(electronic board), 전자 사인 수신 장치(electronic signature receiving device), 프로젝터(projector), 또는 각종 계측 기기(예: 수도, 전기, 가스, 또는 전파 계측 기기 등) 중 적어도 하나를 포함할 수 있다. 다양한 실시 예에서, 전자 장치는 전술한 다양한 장치들 중 하나 또는 그 이상의 조합일 수 있다. 어떤 실시 예에 따른 전자 장치는 플렉서블 전자 장치일 수 있다. 또한, 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되지 않으며, 기술 발전에 따른 새로운 전자 장치를 포함할 수 있다. 이하에서는 첨부된 도면을 이용하여 본 개시에 대하여 구체적으로 설명한다. 도 1은 본 개시의 일 실시 예에 따른 전자 장치의 구성을 설명하기 위한 블록도이다. 도 1을 참고하면, 전자 장치는 메모리와 프로세서를 포함한다. 실시 형태에 따라 도시되지 않았 더라도 당업자에게 자명한 수준의 적절한 하드웨어/소프트웨어 구성들이 전자 장치에 추가로 포함될 수 있 다. 메모리는 휘발성 메모리, 비휘발성 메모리 중 적어도 하나를 포함할 수 있다. 휘발성 메모리로는 예컨대 DRAM (dynamic RAM), SRAM (static RAM), 또는 SDRAM (synchronous dynamic RAM) 등이 사용될 수 있고, 비휘발 성 메모리로는 예컨대 OTPROM (one time programmable ROM), PROM (programmable ROM), EPROM (erasable and programmable ROM), EEPROM (electrically erasable and programmable ROM), mask ROM, flash ROM, 플래시 메 모리(예: NAND flash 또는 NOR flash 등), 하드 드라이브, 또는 솔리드 스테이트 드라이브 (solid state drive (SSD) 등이 사용될 수 있다. 메모리는 외장 메모리를 포함할 수 있다. 외장 메모리로는 flash drive, 예를 들면, CF (compact flash), SD (secure digital), Micro-SD (micro secure digital), Mini-SD (mini secure digital), xD (extreme digital), 또는 메모리 스틱 (memory stick) 등을 사용할 수 있다. 외장 메모리는 다양한 인터페이스를 통하여 전자 장치과 기능적으로 및/또는 물리적으로 연결될 수 있다. 메모리는 전자 장치의 구성요소에 관련된 명령 또는 데이터를 저장할 수 있다. 메모리는 메모리 페이지(또는 페이지)라고 지칭되는 복수의 블록 또는 부분으로 이루어질 수 있다. 한 페 이지의 크기는 운영 체제에 따라 예컨대, 1 ~ 8KB가 될 수 있다. 데이터는 페이지 단위로 관리될 수 있다. 한 페이지에 저장된 데이터는 페이지 데이터로 지칭될 수 있다. 프로세서는 중앙처리장치(central processing unit (CPU)), 애플리케이션 프로세서 (application processor (AP)), 또는 커뮤니케이션 프로세서 (communication processor(CP)) 등 중 하나 또는 그 이상을 포 함할 수 있다. 프로세서는, 예를 들면, 전자 장치의 적어도 하나의 다른 구성요소들의 제어 및/또는 통신에 관한 연산이나 데이터 처리를 실행할 수 있다. 프로세서는 메모리에 저장된 컴퓨터 실행가능 명령어(computer executable instructions)를 실행함 으로써, 다양한 동작을 수행할 수 있다. 예컨대, 프로세서는 메모리 내에서의 데이터 저장을 관리할 수 있다. 일 실시 예에 따르면, 프로세서는 프로그램을 실행하기 위한 요청이 있으면 메모리의 일부 영역을 해 당 프로그램에 할당할 수 있다. 여기서 프로그램은 애플리케이션, 운영체제 프로그램 또는 모듈 등을 포함할 수 있다. 예를 들면, 프로세서는 메모리의 제1 영역 중 다른 프로그램에 의해 할당되지 않은 영역을, 실행이 요구된 프로그램에 할당할 수 있다. 여기서 제1 영역은 프로그램을 실행하기 위해 필요한 저장 공간으로서 시스 템 메모리(system memory) 영역일 수 있다. 리눅스의 경우, 제1 영역은 스택 영역(stack), 힙 영역(heap), 데 이터 영역(data, bss) 및 코드 영역(text) 등을 포함할 수 있다. 프로세서는 일정 크기의 페이지를 기반으로, 메모리의 제1 영역 중 다른 프로그램에 의해 할당되지 않은 영역을, 실행이 요구된 프로그램에 할당할 수 있다. 일 실시 예에 따르면 프로세서는 연속된 페이지 들을 하나의 프로세스 처리에 배정할 수 있으나 반드시 이에 한정되는 것은 아니다. 프로세서는 실행이 요구된 프로그램에 할당하기 위한 메모리의 제1 영역의 가용 용량이 부족할 경우, 제1 영역의 적어도 하나의 페이지 데이터를 메모리의 제2 영역으로 스왑 아웃(swap-out)할 수 있다. 프로 세서는 메모리의 제1 영역의 가용 용량이 기 설정된 용량 이하일 때 제1 영역의 가용 용량이 부족한 것으로 식별할 수 있다. 스왑 아웃은 현재 스케쥴링 되고 있는 프로세스 중에서 실행되고 있지 않은 프로세스, 즉 레디 상태이거나 웨이 팅 상태에 있는 프로세스의 데이터를 메모리의 제1 영역으로부터 제2 영역으로 이동시켜 보관하는 것을 의 미한다. 메모리의 제2 영역은 시스템 메모리 영역인 제1 영역의 용량이 부족할 경우에 제1 영역의 가용 용량을 확 보하기 위해, 일시적으로 이용되지 않을 것으로 예상되는 데이터를 제1 영역으로부터 옮겨 저장하도록 지정된 영역이다. 제2 영역의 크기는 고정될 수 있고, 가변될 수도 있다. 일 실시 예에 따르면, 메모리의 제1 영역과 제2 영역은 DRAM 또는 SRAM 등과 같은 휘발성 메모리에 구비될 수 있다. 또 다른 실시 예에 따르면, 메모리의 제1 영역은 휘발성 메모리에 구비되고, 제2 영역은 플래시 메모리, 하드 드라이브, SSD(solid state drive) 등과 같은 비휘발성 메모리에 구비될 수 있다. 메모리의 제1 영역과 제2 영역은 모두 내장 메모리에 구비되거나, 또는 제1 영역은 내장 메모리에, 제2 영역은 외장 메모 리에 구비될 수 있다.일 실시 예에 따르면 프로세서는 제 1 영역의 페이지 데이터들 중에서 가장 오랫동안 사용되지 않은 적어 도 하나의 페이지 데이터를 제2 영역으로 스왑 아웃할 수 있다. 또 다른 예로, 프로세서는 제1 영역의 페 이지 데이터들 중에서 사용 빈도가 낮은 적어도 하나의 페이지 데이터를 제2 영역으로 스왑 아웃할 수 있다. 프로세서는 저장 공간을 효율적으로 활용하기 위해 제1 영역의 페이지 데이터의 크기를 줄여서 제2 영역으 로 스왑 아웃할 수 있다. 데이터 크기를 줄이는 방법으로는 데이터를 압축하여 스왑 아웃하는 방법이 있는데, 종래에는 모든 데이터를 비 손실 압축하여 스왑 아웃하였기 때문에 데이터 패턴에 따른 압축률의 한계와 성능의 제약을 극복하기 어려웠다. 예컨대, 압축률이 높은 압축 알고리즘을 사용하면 데이터의 크기를 많이 줄일 수 있어 메모리 공간을 절약할 수 있지만, 압축 및 압축 해제 시 성능 손실이 크게 발생하게 된다. 반면에 성능 손실을 최소화하기 위해 압축률이 낮은 알고리즘을 선택한다면 메모리 공간 절약 효과가 미미하다는 문제가 있다. 따라서, 본 개시의 실시 예들에서는 메모리 스와핑의 압축률과 성능을 개선하기 위해, 페이지 데이터의 속성(또 는 상태)에 따라 데이터 폐기(data discard)(전체 폐기 또는 일부 폐기), 손실 압축, 비손실 압축을 선택적으로 적용하는 방식을 이용한다. 데이터 폐기(data discard)는 페이지 데이터 중 불필요한 부분을 제거하는 것을 의미한다. 여기서 불필요한 부 분은 프로세스 처리에 반드시 필요하지 않은 부분이거나 추후 복구가 가능한 부분을 의미할 수 있다. 비손실 압축 방식은 손실이 없다는 것을 의미하는 것으로서, 데이터를 압축하고 다시 압축 해제 시켰을 때 압축 전의 데이터와 일치하는 데이터로 복원이 가능한 경우를 의미한다. 손실 압축 방식은 데이터를 압축하고 다시 압축 해제 시켰을 때 압축 전의 데이터로 100% 복원시킬 수 없는 경 우를 의미한다. 즉, 본 개시의 실시 예들에서는 페이지 데이터의 속성을 식별하여, 불필요한 데이터가 포함되어 있으면 폐기하 고, 압축 해제 시 압축 전 데이터로 완벽히 복구될 필요가 없는 경우에는 손실 압축을 적용하고, 완벽히 복구가 필요한 경우에만 비손실 압축을 적용하는 등과 같이 데이터 속성에 따라 적절한 방식을 적용해서 개선된 압축률 을 보일 수 있고, 성능 저하를 최소화할 수 있다. 일 실시 예에 따르면, 프로세서는 메모리의 제1 영역에 저장된 페이지 데이터의 속성을 기초로 상기 페이지 데이터를 메모리의 제2 영역으로 일부 스왑 아웃하거나, 또는 전체 스왑 아웃할 수 있다. 일부 스왑 아웃은 페이지 데이터 중 일부 불필요한 데이터는 폐기하고 나머지만 스왑 아웃하는 것을 의미하고, 전체 스왑 아웃은 페이지 데이터 전부를 스왑 아웃하는 것을 의미한다. 또는, 프로세서는 메모리의 제1 영역이 가용 영역이 부족한 경우, 페이지 데이터의 속성을 기초로 해 당 페이지 데이터 전체를 폐기할 수도 있다. 일 실시 예에 따르면, 페이지 데이터의 속성은 페이지 데이터에 대해 기 생성된 속성 정보에 의해 식별될 수 있 다. 속성 정보는 페이지 데이터 내에 포함될 수 있다. 또 다른 실시 예에 따르면 페이지 데이터의 속성은 페이 지 데이터가 저장된 메모리 공간 상의 주소에 의해 식별될 수 있다. 페이지 데이터에 포함된 속성 정보에 의해 해당 페이지 데이터의 속성이 식별되는 실시 예의 경우, 페이지 데이 터에 포함된 속성 정보는 해당 페이지 데이터가 유래한 프로그램에 의해 제공된 것이거나, 프로세서가 프 로그램에 메모리 할당 시 생성하여 페이지 데이터마다 추가한 것일 수 있다. 일 실시 예에 따르면 페이지 데이 터에 포함된 속성 정보는 플래그(flag)일 수 있다. 페이지 데이터가 저장된 주소에 의해 해당 페이지 데이터의 속성이 식별되는 실시 예의 경우, 예컨대, 메모리 의 제1 영역 상의 특정한 주소 범위에 저장된 페이지 데이터는 제1 속성을 가지는 것으로 미리 정의되어 있고, 제1 영역 상의 또 다른 특정한 주소 범위에 저장된 페이지 데이터는 제2 속성을 가지는 것으로 미리 정의 되어 있는 등의 방식으로 페이지 메모리가 저장된 주소를 바탕으로 해당 페이지 메모리의 속성이 식별될 수 있 다. 예컨대 제1 주소 범위는 제1 속성을 가지는 페이지 데이터(보호되어야 하는 페이지 데이터)가 저장되는 곳 으로 정의되고, 제2 주소 범위는 제2 속성을 가지는 페이지 데이터(임의 조작 가능한 페이지 데이터)가 저장되 는 것으로 정의될 수 있다. 제1 주소 범위에 저장되어 있는 페이지 데이터가 스왑 아웃되는 경우에는 페이지 데 이터 전체가 스왑 아웃되고, 제2 주소 범위에 저장되어 있는 페이지 데이터가 스왑 아웃되는 경우에는 페이지 데이터 중 불필요한 데이터 부분을 폐기하고 나머지 데이터만 스왑 아웃될 수 있다. 프로세서는 메모리의 제1 영역 상의 어떤 주소가 어떤 속성과 대응되는 것인지를 나타내는 테이블 정보를 생성할 수 있다. 이러한 테이블 정보는, 프로세서가 프로그램에 어떤 메모리 공간을 할당할 지를 결정하는데 참조될 수 있 으며, 프로세서가 메모리 스왑 아웃 시 일부 스왑 아웃할 것인지 전체 스왑 아웃할 것인지를 결정하는 데 에도 참조될 수 있다. 한편, 일 실시 예에 따르면 일부 스왑 아웃이 가능한 속성을 가진 페이지 데이터는 항상 일부 스왑 아웃되도록 설정될 수 있으나, 또 다른 실시 예에 따르면 특정 경우에 있어선 전체 스왑 아웃되도록 설정될 수도 있다. 후 자의 경우, 일부 스왑 아웃이 가능한 속성을 가진 페이지 데이터를 일부 스왑 아웃할지 전체 스왑 아웃할지는 메모리의 제2 영역의 가용 용량에 기초하여 결정될 수 있다. 즉, 메모리의 제2 영역의 가용 용량이 충분한 경우에는 일부 스왑 아웃이 가능한 속성을 가진 페이지 데이터라도 전체 스왑 아웃될 수 있다. 일 예로, 일부 스왑 아웃이 가능한 속성을 가진 페이지 데이터를 더 세분화 하여, 제2 영역의 가용 용량에 따라 선택적으 로 전체 스왑 아웃 또는 일부 스왑 아웃이 수행될 데이터와, 항상 일부 스왑 아웃될 데이터로 구분할 수 있다. 본 개시의 또 다른 실시 예에 따르면, 프로세서는 인공지능 알고리즘에 의해 학습된 인공 지능 모델에 페 이지 데이터를 입력하여, 입력한 페이지 데이터의 속성을 식별하고, 식별된 속성에 기초하여 페이지 데이터를 일부 스왑 아웃할 것인지 전체 스왑 아웃할 것인지를 결정할 수 있다. 상기 인공 지능 모델은 입력 데이터를 어떻게 이해, 인식, 인지, 판단, 추록 등을 한 것인지에 관한 기준을 갖 도록 학습된 것일 수 있다. 일 실시 예에 따르면, 상기 인공지능 모델은 학습 데이트 중 적어도 일부를 판단 기 준으로 이용하는 지도 학습(supervised learning)을 통하여 학습된 것일 수 있다. 또는, 상기 인공지능모델은 별다른 지도 없이 학습 데이터를 이용하여 스스로 학습함으로써, 상황의 판단을 위한 판단 기준을 발견하는 비 지도 학습(unsupervised learning)을 통해 학습된 것일 수 있다. 또는, 상기 인공지능모델은 학습에 따른 상황 판단의 결과가 올바른 지에 대한 피드백을 이용하는 강화 학습(reinforcement learning)을 통하여 학습된 것일 수 있다. 페이지 데이터의 속성을 식별하기 위한 인공지능모델은 전자 장치에서 학습되어 생성된 것일 수 있고, 또 는 전자 장치는 미리 생성된 인공지능모델을 외부로부터 제공받아 이용할 수 있다. 프로세서는는 페이지 데이터의 일부가 복구 가능한 데이터이면 상기 페이지 데이터의 속성을 제1 속성으로 식별하고, 페이지 데이터가 복구 가능한 데이터를 포함하지 않으면 상기 페이지 데이터의 속성을 제2 속성으로 식별할 수 있다. 프로세서는 페이지 데이터의 속성이 상기 제1 속성이면 상기 페이지 데이터에서 복구 가 능한 데이터를 폐기(discard)한 나머지 데이터에 대해 일부 스왑 아웃하고, 상기 페이지 데이터의 속성이 상기 제2 속성이면 상기 페이지 데이터 전체를 스왑 아웃할 수 있다. 프로세서는 메모리의 제2 영역에 저장된 데이터를 다시 제1 영역으로 스왑 인(swap-in)하는 경우에, 스왑 아웃 시 폐기된 데이터를 복구하고, 복구된 데이터를 추가하여 스왑 인할 수 있다. 본 개시의 또 다른 실시 예에 따르면, 프로세서는 스왑 아웃할 적어도 하나의 페이지 데이터를 특정 압축 알고리즘을 이용하여 압축하고, 상기 압축된 데이터를 메모리의 제2 영역으로 스왑 아웃할 수 있다. 프로 세서는 페이지 데이터들은 개별적으로 압축하거나, 또는 둘 이상의 페이지 데이터를 함께 압축할 수 있다. 여기서 상기 특정 압축 알고리즘은, 상기 페이지 데이터의 속성을 바탕으로 하여 손실 압축 알고리즘 또는 비손 실 압축 알고리즘 중에서 선택될 수 있다. 즉, 페이지 데이터의 속성이, 압축 해제 시 압축 전 데이터와 완전 동일하게 복원이 필요 없는 경우라면 손실 압축 알고리즘으로 압축함으로써, 스와핑의 압축률과 성능을 개선할 수 있다. 페이지 데이터의 속성은 상술한 것과 같이 페이지 데이터가 저장된 주소를 기초로 식별되거나, 페이지 데이터에 포함된 속성 정보를 기초로 식별되거나 또는 인공지능모델을 이용하여 식별할 수 있다. 압축 해제 시 압축 전 데이터와 완전 동일하게 복원이 필요 없는 데이터의 예로서, 예컨대 영상(동영상 또는 정 지 영상) 데이터 또는 오디오 데이터가 있을 수 있다. 구체적인 예로, BMP 데이터는 JPEG 데이터로 손실 압축될 수 있다. 반면, 압축 해제 시 압축 전 데이터와 완전 동일하게 복원이 필요한 데이터는 중요 데이터로서, 예컨 대 데이터 스트럭쳐와 관련된 데이터일 수 있다. 일 실시 예에 따르면, 프로세서는 스왑 아웃할 페이지 데이터가 영상 데이터 및 비디오 데이터 중 적어도 하나의 데이터이면 상기 스왑 아웃할 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제1 속성이 아니면 제2 속성으로 식별할 수 있다. 스왑 아웃할 페이지 데이터의 속성이 상기 제1 속성이면 프로세서는 상기 스왑 아웃할 페이지 데이터를 손실 압축 알고리즘을 이용하여 압축하 고, 스왑 아웃할 페이지 데이터의 속성이 상기 제2 속성이면 상기 스왑 아웃할 페이지 데이터를 비손실 압축 알고리즘을 이용하여 압축할 수 있다. 프로세서는 압축 시 어떤 압축 알고리즘으로 압축하였는지를 식별하는데 참조하기 위한 메타 데이터를, 압 축한 데이터와 함께 메모리의 제2 영역에 저장할 수 있다. 프로세서는 메모리의 제2 영역에 저 장된 압축된 데이터를 다시 제1 영역으로 스왑 인(swap-in)할 때 상기와 같이 저장한 메타 데이터를 기초로 압 축된 데이터를 압축 해제할 수 있다. 본 개시의 다양한 실시 예들에 따르면, 페이지 데이터 단위로 스와핑 방식이 결정될 수 있고, 또는 프로그램 단 위로 스와핑 방식이 결정될 수 있다. 예컨대, 애플리케이션마다 중요도 레벨에 대한 정보를 가질 수 있고, 프로 세서는 메모리의 제1 영역의 가용 영역이 부족하다고 판단되면, 현재 실행 중인 프로세스에 대응하는 애플리케이션의 중요도 레벨에 따라 데이터 폐기, 손실 압축, 비손실 압축 등 다양한 방식 중 어느 하나의 방식 으로 메모리 스와핑을 수행할 수 있다. 애플리케이션의 중요도 레벨은 프로세서가 결정하거나, 애플리케이 션에 미리 지정되어 있을 수 있다. 한편, 본 개시의 또 다른 실시 예에 따르면, 메모리의 제2 영역의 저장 공간이 부족한 경우, 제2 영역에 저장된 데이터의 일부가 메모리의 제3 영역으로 옮겨질 수 있다. 메모리의 제1 영역 및 제2 영역은 휘발성 메모리에 구비되고 상기 제3 영역은 비휘발성 메모리에 구비될 수 있다. 또는, 메모리의 제1 영역 은 휘발성 메모리에 구비되고 제2 영역과 제3 영역은 비휘발성 메모리에 구비될 수 있다. 또는, 메모리의 제1 영역과 제2 영역은 전자 장치의 내장 메모리에, 제3 영역은 전자 장치의 외장 메모리에 구비될 수 있다. 도 2는 본 개시의 일 실시 예에 따른 전자 장치에 저장된 소프트웨어의 구조를 설명하기 위한 도면이다. 도 2에 따르면, 메모리에는 커널, 미들웨어, 응용프로그램 프로그래밍 인터페이스(API: application programming interface), 애플리케이션 모듈 등을 포함하는 소프트웨어가 저장될 수 있 다. 커널, 미들웨어, 응용프로그램 프로그래밍 인터페이스(API)의 적어도 일부는 운영 시스템 (OS: operating system)이라 불릴 수 있다. 운영 체제는, 예를 들면, 안드로이드(android), iOS, 윈도우즈 (windows), 심비안(symbian), 타이젠(tizen), 또는 바다(bada) 등이 될 수 있다. 커널은 다른 프로그램들(예: 미들웨어, API 또는 애플리케이션)에 구현된 동작 또는 기능 을 실행하는데 사용되는 시스템 리소스들(예: 메모리, 프로세서 등)을 제어 또는 관리할 수 있다. 커 널은 미들웨어, API 또는 애플리케이션에서 전자 장치의 개별 구성요소에 접근함으로 써, 시스템 리소스들의 제어 또는 관리할 수 있는 인터페이스를 제공할 수 있다. 커널은 메모리 관리를 위 해 스왑 태스크를 제어 또는 관리할 수 있다. 커널은 예를 들면, 시스템 리소스의 제어, 할당, 또는 회수 등을 수행할 수 있다. 한 실시 예에 따르면, 커널은 프로세스 관리부, 메모리 관리부, 또는 파일 시스템 관리부 등을 포함할 수 있다. 커널은 메 모리의 적어도 일부 영역을 프로그램에 할당하거나, 프로그램에 할당된 메모리의 적어도 일부 영역을 회수하기 위한 기능을 수행할 수 있다. 일 실시 예에 따르면, 커널은 프로그램에 할당할 메모리의 제 1 영역, 즉 시스템 메모리 용량이 부족한 상황을 감지하고, 메모리의 제2 영역으로 데이터를 스왑 아웃할 수 있다. 커널은 스왑 아웃할 데이터의 속성에 따라 일부 스왑 아웃 또는 전체 스왑 아웃을 수행할 수 있 다. 또한 커널은 스왑 아웃할 데이터의 속성에 따라 비손실 압축 또는 손실 압축하여 스왑 아웃할 수 있다. 그리고 커널은 메모리의 제2 영역에 저장된 데이터를 제1 영역으로 스왑 인할 수 있다. 커널 은 데이터를 스왑 인할 때, 압축을 해제할 수 있고, 일부 스왑 아웃에 의해 폐기된 데이터가 있는 경우에 는 폐기된 데이터를 복구할 수 있다. 미들웨어는 API 또는 애플리케이션이 커널과 통신하여 데이터를 주고받을 수 있도록 중개 역할을 수행할 수 있다. 또한, 미들웨어는 애플리케이션으로부터 수신된 하나 이상의 작업 요청들을 우선 순위에 따라 처리할 수 있다. 예를 들면, 미들웨어는 애플리케이션 중 적어도 하나에 전자 장치 의 시스템 리소스(예: 메모리, 프로세서 등)를 사용할 수 있는 우선 순위를 부여할 수 있다. 예 컨대, 미들웨어는 상기 적어도 하나에 부여된 우선 순위에 따라 상기 하나 이상의 작업 요청들을 처리함으 로써, 상기 하나 이상의 작업 요청들에 대한 스케쥴링 또는 로드 밸런싱 등을 수행할 수 있다. 미들웨어는, 예를 들면, 애플리케이션이 공통적으로 필요로 하는 기능을 제공하거나, 애플리케이션 이 전자 장치 내부의 제한된 시스템 자원을 효율적으로 사용할 수 있도록 API를 통해 다양한 기 능들을 애플리케이션으로 제공할 수 있다. 일 실시 예에 따르면, 미들웨어는 X11 모듈(220-1), 애플리케이션 매니저(App manager)(220-2), 연결 매니저(220-3), 보안 모듈(220-4), 시스템 매니저(230-5), 멀티미 디어 매니저(220-6), 데이터베이스 매니저(220-7), 윈도우 매니저(220-8), 그래픽 매니저(220-9) 중 적어도 하 나를 포함할 수 있다. X11 모듈(230-1)은 사용자 단말 장치에 구비된 각종 하드웨어들로부터 각종 이벤트 신호를 수신하는 모듈 이다. 여기서 이벤트란, 시스템 알람(alarm)이 발생하는 이벤트, 특정 프로그램이 실행 또는 종료되는 이벤트 등과 같이 다양하게 설정될 수 있다. APP 매니저(220-2)는 각종 어플리케이션의 실행 상태를 관리하는 모듈이다. APP 매니저(220-2)는 X11 모듈 (230-1)로부터 애플리케이션 실행 이벤트가 감지되면, 해당 이벤트에 대응되는 애플리케이션을 호출하여 실행시 킨다. 연결 매니저(230-3)는 유선 또는 무선 네트워크 연결을 지원하기 위한 모듈이다. 연결 매니저(230-3)는 DNET 모 듈, UPnP 모듈 등과 같은 다양한 세부 모듈들을 포함할 수 있다. 보안 모듈(220-4)은 하드웨어에 대한 인증(Certification), 요청 허용(Permission), 보안 저장(Secure Storage) 등을 지원하는 모듈이다. 시스템 매니저(230-5)는 사용자 단말 장치 내의 각 구성요소들의 상태를 모니터링하고, 그 모니터링 결과 를 타 모듈들에게 제공할 수 있다. 멀티미디어 매니저(220-6)는 다양한 미디어 파일들의 재생에 필요한 포맷을 파악하고, 해당 포맷에 맞는 코덱 (codec)을 이용하여 미디어 파일의 인코딩(encoding) 또는 디코딩(decoding)을 수행할 수 있다. 데이터베이스 매니저(220-7)는 적어도 하나의 애플리케이션에서 사용할 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 윈도우 매니저(220-8)는 화면에서 사용하는 GUI 자원을 관리할 수 있다. 그래픽 매니저(220-9)는 사용자에게 제공될 그래픽 효과 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 미들웨어는 차별화된 기능을 제공하기 위해 운영 체제의 종류별로 특화된 모듈을 제공할 수 있다. 또한, 미들웨어는 동적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. API는, 예를 들면, 애플리케이션이 커널 또는 미들웨어에서 제공되는 기능을 제어하기 위 한 인터페이스로, 예를 들면, 파일 제어, 창 제어, 영상 처리, 또는 문자 제어 등을 위한 적어도 하나의 인터페 이스 또는 함수(예: 명령어)를 포함할 수 있다. 애플리케이션 모듈은 다양한 기능을 지원하기 위한 애플리케이션들(240-1 ~ 240-n)을 포함한다. 애플리케 이션들은 디폴트로 설치되어 있을 수도 있고, 사용자가 사용 과정에서 임의로 설치하여 사용할 수도 있다. 도 2에 표시된 소프트웨어 구조는 일 예에 불과하므로, 반드시 이에 한정되어야 하는 것은 아니다. 따라서, 필 요에 따라 일부가 생략 또는 변형되거나, 추가될 수도 있음은 물론이다. 도 3은 데이터를 폐기하여 스왑 아웃하는 본 개시의 일 실시 예를 설명하기 위한 도면이다. 도 3은 데이터 폐기(data discard)의 구조를 쉽게 보여주기 위하여 메모리 에러 검사를 위하여 DUMA 툴을 실행 하는 경우를 예로 들어서 설명하는 것일 뿐, DUMA 툴을 실행하는 경우에만 데이터 버림(data discard)를 적용하 는 것으로 본 개시가 한정되는 것은 아니다. 도 3을 참고하면, 애플리케이션은 12 Bytes의 메모리를 할당하였다. 하지만 DUMA 툴을 실행하면서 4KB의 물리 메모리가 실제로 사용되었다. 종래의 비손실 압축 알고리즘 방식의 경우 이 4KB의 페이지 데이터가 모두 압축되 면서 애플리케이션이 원하는 데이터 크기 보다 큰 크기의 데이터가 저장되게 된다. 본 개시의 실시 예에 따르면 데이터 폐기(data discard)를 적용하기 위하여 해당 페이지 데이터의 속성을 식별하기 위한 워터마크 (watermark)와 크기(size) 정보를 페이지 데이터에 추가하였고, 커널의 메모리 스와핑 알고리즘에서 각 메모리 페이지 데이터의 속성을 검사한다. 검출된 페이지 데이터에 대해서는 해당 정보를 참조하여 실제 애플리케이션 이 할당만 데이터만 저장하도록 한다. 페이지 데이터에 워터마크와 크기 정보를 추가하는 것은 일 예시일 뿐, 이것에 본 개시가 한정되지는 않는다. 도 3의 예와 같이 데이터 폐기(data discard)가 가능한 페이지 데이터를 식별하는 방식을 통해 불필요한 데이터 를 제거하여 데이터 크기를 줄임으로써 다양한 장점을 가지게 된다. 우선적으로는 꼭 필요한 데이터만 저장하여필요한 저장공간의 크기를 줄일 수 있고, 압축에 필요한 성능 오버헤드도 절감할 수 있다. 분리된 데이터가 기 존 압축된 크기보다 작고 성능이 중요한 경우라면 분리된 데이터만 저장함으로써 압축에 필요한 성능 오버헤드 를 완전히 배제시킬 수도 있다. 도 4는 본 개시의 일 실시 예에 따른 애플리케이션의 동작 시나리오를 설명하기 위한 도면이다. 도 4를 참조하면, 애플리케이션의 실행 요청에 따라 프로세서가 애플리케이션에 메모리의 제1 영역을 할당하고, 애플리케이션이 해당 영역을 사용한다(S410). 프로세서는 메모리의 제1 영역에 저장된 애플리케이션 프로세스의 페이지 데이터들에 대해서, 데이터 폐기 또는 손실 압축 대상인지를 판단한다(S420). 예컨대, 페이지 데이터에 불필요한 데이터가 포함되어 있으면 데이터 폐기 대상인 것으로 판단하고, 페이지 데이터가 영상, 오디오와 같은 미디어 데이터이면 손실 압축 대상 인 것으로 판단할 수 있다. 데이터 폐기, 손실 압축 대상인 것으로 판단되면, 프로세서는 해당 페이지 데이터들에 속성 정보를 추가한 다(S430). 속성 정보는, 추후 해당 데이터 페이지들이 스왑 아웃 대상이 되었을 때 참조될 수 있다. 데이터 폐 기, 손실 압축 대상이 아닌 경우에는 속성 정보가 추가되지 않을 수 있다. 속성 정보가 추가되지 않은 경우에는 추후 스왑 아웃 시에 비손실 압축 대상인 것으로 판단될 수 있다. 도 5는 메모리의 제1 영역의 가용 용량이 부족한 상황에서 본 개시의 실시 예들의 방법이 적용된, 커널의 메모리 회수 시나리오의 일 실시 예를 설명하기 위한 도면이다. 도 5를 참조하면, 메모리의 제1 영역의 가용 용량이 부족한 상황이 발생하면, 커널의 메모리 회수 루틴이 동작한다(S510). 그리고 메모리 스와핑 동작을 수행한다(S520). 커널은 스왑 아웃할 페이지 데이터가 데이터 폐기 대상인지 검사한다(S530). 커널은 스왑 아웃할 페이지 데이터 에 포함된 속성 정보를 기초로 데이터 폐기 대상인지 판단할 수 있다. 페이지 데이터가 데이터 폐기 대상이면, 페이지 데이터에 포함된 속성 정보를 참고하거나, 기 저장되어 있는 정 보를 참고하여 불필요한 일부 데이터를 폐기(또는 삭제)한다(S540). 그리고 커널은 페이지 데이터에 포함된 속성 정보를 기초로, 페이지 데이터가 손실 압축 대상인지 검사한다 (S550). 손실 압축 대상이면, 손실 압축 알고리즘을 이용하여 데이터를 압축한다(S560). 손실 압축 대상이 아니 라면, 즉 비손실 압축 대상이면, 비손실 압축 알고리즘을 이용하여 데이터를 압축한다(S570). 그리고 커널은 사용된 압축 알고리즘이 어떤 것인지에 대한 메타 데이터와 압축 결과, 즉 압축된 데이터를 메모 리의 제2 영역에 저장한다(S580). 도 6은 애플리케이션이 스왑된 페이지 데이터에 접근하였을 때, 메모리 관리 루틴이 스왑된 페이지 데이터를 복 구하여 반환하는 시나리오의 일 실시 예를 설명하기 위한 도면이다. 도 6을 참고하면, 애플리케이션이 스왑 아웃된 페이지 데이터를 읽는다(S610). 즉, 애플리케이션이 물리 메모리 의 페이지가 할당되어 있지 않은 페이지에 접근하려고 하면, 페이지 폴트(page fault)가 발생한다. 그러면 커널은 페이지 폴트에 대한 처리를 위해 페이지 폴트 핸들러를 동작한다(S620). 페이지 폴트 핸들러가 동작하면서 스와핑 알고리즘에 해당 페이지 데이터를 요구한다. 커널은 스와핑된 페이지 데이터가 손실압축으로 저장되었는지 여부를 저장된 메타데이터를 읽어서 확인한다 (S630). 손실 압축된 메모리 페이지라면, 손실 압축을 해제한다(S640). 스와핑된 페이지 데이터가 비손실 압축 으로 저장되었다면, 비손실 압축을 해제한다(S650). 그리고 커널은 압축 해제된 데이터가 복구(또는 재생성) 가능한지 확인한다(S660). 즉, 손실 압축된 경우라면, 압축 전 데이터 상태로 복구가 가능한지, 또는, 데이터 폐기가 있었다면 폐기된 데이터가 복구 가능한지를 확인 한다. 데이터 복구가 가능하다면, 데이터를 복구한다(S670). 그리고 압축 해제된 결과로 생성된 페이지 데이터를 반환 한다(S680). 즉, 메모리의 제1 영역으로 데이터를 스왑 인한다. 도 7은 본 개시의 일 실시 예에 따른 전자 장치의 제어방법을 설명하기 위한 도면이다. 도 7에 도시된 흐름도는 본 명세서에서 설명되는 전자장치에서 처리되는 동작들로 구성될 수 있다. 따라서, 이하에서 생략된 내용이라 하더라도 전자장치에 관하여 기술된 내용은 도 7에 도시된 흐름도에도 적용될 수 있다. 도 7을 참고하면, 전자 장치는 프로그램을 실행하기 위한 요청을 입력 받는다(S710). 프로그램에 할당하기 위한 상기 메모리의 제1 영역의 가용 용량이 부족한 경우, 전자 장치는 상기 제1 영 역에 저장된 페이지 데이터를 상기 메모리의 제2 영역으로 스왑 아웃(swap-out)한다(S720). S720단계에서, 전자 장치는 페이지 데이터의 속성을 기초로, 상기 페이지 데이터를 일부 스왑 아웃하거나 전체 스왑 아웃한다. 한편, 전자 장치는 상기 페이지 데이터가 저장된 제1 영역 상의 주소를 기초로 상기 페이지 데이터의 속성 을 식별할 수 있다. 한편, 전자 장치는 페이지 데이터의 일부가 복구 가능한 데이터이면 상기 페이지 데이터의 속성을 제1 속 성으로 식별하고, 상기 페이지 데이터가 복구 가능한 데이터를 포함하지 않으면 상기 페이지 데이터의 속성을 제2 속성으로 식별할 수 있다. 그리고 전자 장치는 상기 페이지 데이터의 속성이 상기 제1 속성이면 상기 페이지 데이터에서 복구 가능한 데이터를 폐기(discard)한 나머지 데이터에 대해 일부 스왑 아웃하고, 상기 페 이지 데이터의 속성이 상기 제2 속성이면 상기 페이지 데이터 전체를 스왑 아웃할 수 있다. 이 경우, 상기 일부 스왑 아웃한 데이터를 상기 제2 영역으로부터 상기 제1 영역으로 스왑 인(swap-in)하는 경 우, 상기 일부 스왑 아웃 시 폐기된 데이터를 복구할 수 있다. 한편, 전자 장치는 페이지 데이터에 대해 기 생성된 속성 정보를 기초로 상기 페이지 데이터의 속성을 식별할 수 있다. 이 경우, 페이지 데이터에 상기 속성 정보를 추가하여 상기 제1 영역에 저장할 수 있다. 한편, 전자 장치는 스왑 아웃할 페이지 데이터를 특정 압축 알고리즘을 이용하여 압축하고, 상기 압축된 데이터를 상기 제2 영역으로 스왑 아웃할 수 있고, 상기 특정 압축 알고리즘은, 상기 페이지 데이터의 속성을 기초로 손실 압축 알고리즘 또는 비손실 압축 알고리즘에서 선택될 수 있다. 한편, 전자 장치는 스왑 아웃할 페이지 데이터가 영상 데이터 및 비디오 데이터 중 적어도 하나의 데이터 이면 상기 스왑 아웃할 페이지 데이터의 속성을 제1 속성으로 식별하고, 상기 스왑 아웃할 페이지 데이터의 속 성이 상기 제1 속성이 아니면 제2 속성으로 식별할 수 있다. 상기 스왑 아웃할 페이지 데이터의 속성이 상기 제 1 속성이면 상기 스왑 아웃할 페이지 데이터를 손실 압축 알고리즘을 이용하여 압축하고, 상기 스왑 아웃할 페 이지 데이터의 속성이 상기 제2 속성이면 상기 스왑 아웃할 페이지 데이터를 비손실 압축 알고리즘을 이용하여 압축할 수 있다. 이 경우, 전자 장치는 상기 이용된 특정 압축 알고리즘에 대한 메타 데이터를 상기 제2 영역에 저장하고, 상기 제2 영역에 저장된 상기 압축된 데이터를 제1 영역으로 스왑 인(swap-in) 하는 경우 상기 메타 데이터를 기초로 상기 압축된 데이터를 압축 해제할 수 있다. 상술한 다양한 실시 예들에 따르면, 데이터 폐기(data discard)와 비손실 압축을 이용한 메모리 압축률 극대화 와 손실 압축 알고리즘 대비 압축 알고리즘 성능 개선에 따른 메모리 스와핑 응답 성능을 개선할 수 있다. 도 8은 DUMA 툴을 실행 중에 Zram의 압축 알고리즘과 본 개시의 기법을 비교한 결과를 나타내고 있다. 도 8의 벤치마크 비교 결과에서는 메모리 압축률이 최대 1.8배 좋아지고, 스왑 응답 성능이 최대 58배까지 좋아지는 것 을 볼 수 있다. 이 벤치마크 결과는 성능 중심의 설정을 실행한 결과 이므로 메모리 공간 절감 중심의 설정으로 변경한다면 압축률은 더 좋아지고, 스왑 응답 성능은 상대적으로 저하된다는 것을 예상해 볼 수 있다. 도 9는 DUMA툴을 실제 어플리케이션에 적용하여 실행 중에 Zram의 압축 알고리즘과 본 발명의 기법을 비교한 결 과를 보여주고 있다. 커널 소스코드를 압축하는 중에 본 개시의 기법을 적용해 본 결과 역시 스와핑되는 메모리 사용량이 lzo와 lz4 알고리즘과 비교하여 각각 1.41배와 1.24배 감소되어 개선되는 것을 볼 수 있다. 이상에서 설명된 다양한 실시 예들은 소프트웨어(software), 하드웨어(hardware) 또는 이들의 조합으로 구현될 수 있다. 하드웨어적인 구현에 의하면, 본 개시에서 설명되는 실시 예들은 ASICs(Application Specific Integrated Circuits), DSPs(digital signal processors), DSPDs(digital signal processing devices), PLDs(programmable logic devices), FPGAs(field programmable gate arrays), 프로세서(processors), 제어기 (controllers), 마이크로 컨트롤러(micro-controllers), 마이크로 프로세서(microprocessors), 기타 기능 수행 을 위한 전기적인 유닛(unit) 중 적어도 하나를 이용하여 구현될 수 있다. 소프트웨어적인 구현에 의하면, 본 명세서에서 설명되는 절차 및 기능과 같은 실시 예들은 별도의 소프트웨어 모듈들로 구현될 수 있다. 상기 소프 트웨어 모듈들 각각은 본 명세서에서 설명되는 하나 이상의 기능 및 작동을 수행할 수 있다.본 개시의 다양한 실시 예들은 기기(machine)(예: 컴퓨터)로 읽을 수 있는 저장 매체(machine-readable storage media)에 저장될 수 있는 명령어를 포함하는 소프트웨어로 구현될 수 있다. 기기는, 저장 매체로부터 저장된 명령어를 호출하고, 호출된 명령어에 따라 동작이 가능한 장치로서, 개시된 실시 예들에 따른 전자 장치 (예: 전자 장치)를 포함할 수 있다. 상기 명령이 프로세서에 의해 실행될 경우, 프로세서가 직접, 또는 상 기 프로세서의 제어 하에 다른 구성요소들을 이용하여 상기 명령에 해당하는 기능을 수행할 수 있다. 명령은 컴 파일러 또는 인터프리터에 의해 생성 또는 실행되는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장매체는, 비일시적(non-transitory) 저장매체의 형태로 제공될 수 있다. 여기서, '비일시적'은 저장매체가 신호(signal) 를 포함하지 않으며 실재(tangible)한다는 것을 의미할 뿐 데이터가 저장매체에 반영구적 또는 임시적으로 저장 됨을 구분하지 않는다. 일 실시 예에 따르면, 본 문서에 개시된 다양한 실시 예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래 될 수 있다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory (CD- ROM))의 형태로, 또는 어플리케이션 스토어(예: 플레이 스토어™)를 통해 온라인으로 배포될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시 예들에 따른 구성 요소(예: 모듈 또는 프로그램) 각각은 단수 또는 복수의 개체로 구성될 수 있으 며, 전술한 해당 서브 구성 요소들 중 일부 서브 구성 요소가 생략되거나, 또는 다른 서브 구성 요소가 다양한 실시 예에 더 포함될 수 있다. 대체적으로 또는 추가적으로, 일부 구성 요소들(예: 모듈 또는 프로그램)은 하나 의 개체로 통합되어, 통합되기 이전의 각각의 해당 구성 요소에 의해 수행되는 기능을 동일 또는 유사하게 수행 할 수 있다. 다양한 실시 예들에 따른, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적, 병렬적, 반복적 또는 휴리스틱하게 실행되거나, 적어도 일부 동작이 다른 순서로 실행되거나, 생략되거나, 또는 다른 동작이 추가될 수 있다. 이상에서는 본 개시의 바람직한 실시 예에 대하여 도시하고 설명하였지만, 본 개시는 상술한 특정의 실시 예에"}
{"patent_id": "10-2018-0040593", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "한정되지 아니하며, 청구범위에서 청구하는 본 개시의 요지를 벗어남이 없이 당해 개시에 속하는 기술분야에서 통상의 지식을 가진 자에 의해 다양한 변형실시가 가능한 것은 물론이고, 이러한 변형실시들은 본 개시의 기술 적 사상이나 전망으로부터 개별적으로 이해되어서는 안될 것이다."}
{"patent_id": "10-2018-0040593", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시 예에 따른 전자 장치의 구성을 설명하기 위한 블록도, 도 2는 본 개시의 일 실시 예에 따른 전자 장치에 저장된 소프트웨어의 구조를 설명하기 위한 도면, 도 3 내지 도 7은 본 개시의 다양한 실시 예에 따른 전자 장치의 제어방법을 설명하기 위한 흐름도, 도 8은, DUMA 툴을 실행 중에 Zram의 압축 알고리즘과 본 개시의 실시 예의 기법을 비교한 결과, 그리고, 도 9는 DUMA툴을 실제 어플리케이션에 적용하여 실행 중에 Zram의 압축 알고리즘과 본 개시의 실시 예의 기법을 비교한 결과이다."}
