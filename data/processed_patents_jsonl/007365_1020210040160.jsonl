{"patent_id": "10-2021-0040160", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0134899", "출원번호": "10-2021-0040160", "발명의 명칭": "전자 장치 및 전자 장치에서 수신된 데이터 패킷을 처리하는 방법", "출원인": "삼성전자주식회사", "발명자": "김영욱"}}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,복수의 코어(core)들을 포함하는 어플리케이션 프로세서; 및상기 어플리케이션 프로세서와 전기적으로 연결된 통신 프로세서를 포함하고,상기 어플리케이션 프로세서는,각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 상기 복수의 코어들 중적어도 하나의 코어에 대응하도록 설정하고,상기 적어도 하나의 세션 중 제1 세션에 대해 설정된 제1 코어에 대응하는 정보를 상기 통신 프로세서로 전송하고,상기 통신 프로세서로부터 상기 제1 세션의 데이터 패킷을 수신하고,상기 제1 코어에 대응하는 정보에 기반하여, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 세션에 대해 설정된 상기 제1 코어를 통해 처리하는, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 제1 세션은 URLLC(ultra reliable low latency communication)와 관련된 세션이며,상기 제1 코어는 상기 복수의 코어들 중 상대적으로 처리 속도가 더 빠른 코어인, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 통신 프로세서는,상기 어플리케이션 프로세서로부터 상기 제1 코어에 대응하는 정보를 수신하고,상기 제1 코어에 대응하는 정보에 기반하여, 상기 제1 코어에 대응하는 논리 버퍼를 할당하고,외부 전자 장치로부터 상기 제1 세션의 데이터 패킷을 수신하면, 상기 수신된 제1 세션의 데이터 패킷을 상기제1 코어에 대응하여 할당된 논리 버퍼에 저장하는, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서, 상기 제1 코어에 대응하는 정보는,적어도 하나의 세션을 그룹화하여 설정한 제1 그룹 정보에 대응하는, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서, 상기 어플리케이션 프로세서는,상기 통신 프로세서로부터 수신된 데이터 패킷을 상기 복수의 코어들의 각 코어별로 분배하고,상기 각 코어별로 분배된 데이터 패킷에 대해 상기 수신된 데이터 패킷의 각 세션별로 패킷 병합 정책을 적용하도록 제어하는, 전자 장치.공개특허 10-2022-0134899-3-청구항 6 제1항에 있어서, 상기 어플리케이션 프로세서는,상기 통신 프로세서로부터 메타 정보를 수신하고,상기 수신된 메타 정보에 기반하여, 상기 통신 프로세서로부터 수신된 상기 제1 세션의 데이터 패킷을 상기 제1코어를 통해 처리하도록 제어하는, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서, 상기 어플리케이션 프로세서는,상기 제1 세션에 대해 상기 제1 코어에서 패킷 병합 처리를 수행하도록 제어하고,상기 제1 세션에 대해 상기 제1 코어와 다른 제2 코어에서 네트워크 패킷 처리를 수행하도록 제어하는, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "전자 장치에 있어서,복수의 코어(core)들을 포함하는 어플리케이션 프로세서; 및상기 어플리케이션 프로세서와 전기적으로 연결된 통신 프로세서를 포함하고,상기 어플리케이션 프로세서는,각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 어플리케이션 프로세서에포함된 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하고,상기 통신 프로세서로부터 상기 적어도 하나의 세션 중 제1 세션의 데이터 패킷을 수신하고,상기 수신된 제1 세션의 데이터 패킷을 상기 복수의 코어들 중 상기 제1 세션에 대응하여 설정된 제1 코어를 위해 할당된 버퍼에 저장하고,상기 버퍼에 저장된 제1 세션의 데이터 패킷을 상기 제1 코어를 통해 처리하는, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 어플리케이션 프로세서는,상기 제1 코어를 통해 상기 제1 세션의 데이터 패킷에 대한 패킷 병합 정책을 적용하는, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제8항에 있어서, 상기 제1 세션은 URLLC(ultra reliable low latency communication)와 관련된 세션이며,상기 제1 코어는 상기 복수의 코어들 중 상대적으로 처리 속도가 더 빠른 코어인, 전자 장치."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "전자 장치에서 수신된 데이터 패킷을 처리하는 방법에 있어서,각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 어플리케이션 프로세서에공개특허 10-2022-0134899-4-포함된 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하는 동작;상기 적어도 하나의 세션 중 제1 세션에 대해 설정된 제1 코어에 대응하는 정보를 상기 어플리케이션 프로세서에서 통신 프로세서로 전송하는 동작;상기 어플리케이션 프로세서에서 상기 통신 프로세서로부터 상기 제1 세션의 데이터 패킷을 수신하는 동작; 및상기 제1 코어에 대응하는 정보에 기반하여, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 세션에 대해 설정된 상기 제1 코어를 통해 처리하는 동작을 포함하는, 전자 장치에서 데이터 패킷을 처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 상기 제1 세션은 URLLC(ultra reliable low latency communication)와 관련된 세션이며,상기 제1 코어는 상기 복수의 코어들 중 상대적으로 처리 속도가 더 빠른 코어인, 전자 장치에서 데이터 패킷을처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제11항에 있어서, 상기 방법은,상기 어플리케이션 프로세서로부터 상기 제1 코어에 대응하는 정보를 수신하는 동작;상기 제1 코어에 대응하는 정보에 기반하여, 상기 제1 코어에 대응하는 논리 버퍼를 할당하는 동작; 및외부 전자 장치로부터 상기 제1 세션의 데이터 패킷을 수신하면, 상기 수신된 제1 세션의 데이터 패킷을 상기제1 코어에 대응하여 할당된 논리 버퍼에 저장하는 동작을 포함하는, 전자 장치에서 데이터 패킷을 처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서, 상기 제1 코어에 대응하는 정보는,적어도 하나의 세션을 그룹화하여 설정한 제1 그룹 정보에 대응하는, 전자 장치에서 데이터 패킷을 처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제11항에 있어서, 상기 방법은,상기 통신 프로세서로부터 수신된 데이터 패킷을 상기 복수의 코어들의 각 코어별로 분배하는 동작; 및상기 각 코어별로 분배된 데이터 패킷에 대해 상기 수신된 데이터 패킷의 각 세션별로 패킷 병합 정책을 적용하도록 제어하는 동작을 포함하는, 전자 장치에서 데이터 패킷을 처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제11항에 있어서, 상기 방법은,상기 어플리케이션 프로세서에서 상기 통신 프로세서로부터 메타 정보를 수신하는 동작; 및상기 수신된 메타 정보에 기반하여, 상기 통신 프로세서로부터 수신된 상기 제1 세션의 데이터 패킷을 상기 제1코어를 통해 처리하는 동작을 포함하는, 전자 장치에서 데이터 패킷을 처리하는 방법.공개특허 10-2022-0134899-5-청구항 17 제11항에 있어서, 상기 방법은,상기 제1 세션에 대해 상기 제1 코어에서 패킷 병합 처리를 수행하도록 제어하는 동작; 및상기 제1 세션에 대해 상기 제1 코어와 다른 제2 코어에서 네트워크 패킷 처리를 수행하도록 제어하는 동작을포함하는, 전자 장치에서 데이터 패킷을 처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "전자 장치에서 수신된 데이터 패킷을 처리하는 방법에 있어서,각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 어플리케이션 프로세서에포함된 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하는 동작;상기 어플리케이션 프로세서에서, 통신 프로세서로부터 상기 적어도 하나의 세션 중 제1 세션의 데이터 패킷을수신하는 동작;상기 수신된 제1 세션의 데이터 패킷을 상기 복수의 코어들 중 상기 제1 세션에 대응하여 설정된 제1 코어를 위해 할당된 버퍼에 저장하는 동작; 및상기 버퍼에 저장된 상기 제1 세션의 데이터 패킷을 상기 제1 코어를 통해 처리하는 동작을 포함하는, 전자 장치에서 데이터 패킷을 처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서, 상기 방법은,상기 제1 코어를 통해 상기 제1 세션의 데이터 패킷에 대한 패킷 병합 정책을 적용하는 동작을 포함하는, 전자장치에서 데이터 패킷을 처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제18항에 있어서, 상기 제1 세션은 URLLC(ultra reliable low latency communication)와 관련된 세션이며,상기 제1 코어는 상기 복수의 코어들 중 상대적으로 처리 속도가 더 빠른 코어인, 전자 장치에서 데이터 패킷을처리하는 방법."}
{"patent_id": "10-2021-0040160", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예에 따라서, 전자 장치는, 복수의 코어(core)들을 포함하는 어플리케이션 프로세서, 및 상기 어플리 케이션 프로세서와 전기적으로 연결된 통신 프로세서를 포함하고, 상기 어플리케이션 프로세서는, 각 어플리케이 션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 상기 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하고, 상기 적어도 하나의 세션 중 제1 세션에 대해 설정된 제1 코어에 대응하는 정보를 상기 통신 프로세서로 전송하고, 상기 통신 프로세서로부터 상기 제1 세션의 데이터 패킷을 수신하고, 상기 제1 코어에 대응하는 정보에 기반하여, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 세션에 대해 설정된 상기 제 1 코어를 통해 처리할 수 있다. 그 밖의 다양한 실시예가 가능하다."}
{"patent_id": "10-2021-0040160", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 다양한 실시예는 전자 장치 및 전자 장치에서 수신된 데이터 패킷을 처리하기 위한 방법에 관한 것이다."}
{"patent_id": "10-2021-0040160", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "이동통신 기술의 발전으로 다양한 기능을 제공하는 휴대 단말기의 사용이 보편화됨에 따라, 증가 추세에 있는 무선 데이터 트래픽 수요를 충족시키기 위해 5G 통신 시스템이 서비스되고 있다. 5G 통신 시스템은 높은 데이터 전송률을 달성하기 위해, 보다 빠른 데이터 전송 속도를 제공할 수 있도록, 3G 통신 시스템과 LTE(long term evolution) 통신 시스템에서 사용하던 주파수 대역에 추가하여, 더 높은 주파수 대역(예를 들어, 6~60GHz 대 역)에서의 구현이 고려되고 있다. 예컨대, 5G 통신 방식의 전자 장치에서는 서비스 또는 어플리케이션의 특성에 따라 IMS(IP multimedia subsystem) PDU(protocol data unit) 세션, eMBB(enhanced mobile broadband, 초광대역) PDU 세션, URLLC(utra-reliable and low latency communication, 초저지연) PDU 세션, mMTC(massive machine-type communications, 초연결) PDU 세션, LADN(local area data network) PDU 세션을 포함하는 다양한 유형의 PDU 세션들을 운용할 수 있다. 예를 들어, eMBB PDU 세션의 경우 높은 전송 속도(throughput)를 요구하는 서비스 또 는 어플리케이션에서 사용할 수 있는 방식이며, URLLC PDU 세션의 경우 저 지연(low-latency)이 필요한 서비스 또는 어플리케이션에서 사용할 수 있다."}
{"patent_id": "10-2021-0040160", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "각 서비스 또는 어플리케이션에 따라 전자 장치에서 수신되는 데이터는 통신 프로세서를 통해 어플리케이션 프 로세서에서 패킷(packet)의 형태로 전달될 수 있다. 통신 프로세서는 상기 패킷을 버퍼(buffer)에 저장한 후, 수신된 순서에 따라 순차적으로 어플리케이션 프로세서에 전달할 수 있다. 어플리케이션 프로세서는 통신 프로 세서로부터 수신된 복수의 패킷들을 패킷 병합 모듈을 통해 병합한 후 상위 계층으로 전달할 수 있다. 어플리케이션 프로세서가 복수의 코어(core)들을 포함하는 경우, 어플리케이션 프로세서는 수신된 패킷들을 복 수의 코어들로 분산하여 병렬적으로 처리할 수 있다. 예컨대, 상기 어플리케이션 프로세서의 복수의 코어들 중 어느 하나의 코어(예: 제어 코어)는 통신 프로세서로부터 수신된 복수의 패킷들을 상기 복수의 코어들 중 어느 하나의 코어로 분배할 수 있다. 상기 통신 프로세서에서 QoS(quality of service)가 서로 상이한 복수의 세션들에 대한 패킷들을 수신하는 경우, 상기 어플리케이션 프로세서의 제어 코어에서는 상기 통신 프로세서로부터 수신된 순서에 따라 패킷들을 병합 처리함에 따라 저지연 서비스의 패킷(예컨대, URLLC 데이터)이 대량의 일반 패킷들에 의해 지연 처리되어 저지연 서비스를 제공하지 못할 수 있다. 다양한 실시예에서는, 어플리케이션 프로세서가 어플리케이션 또는 서비스의 특성(예컨대, QoS)에 기반한 그룹 정보를 통신 프로세서와 공유하고, 통신 프로세서로부터 수신된 패킷을 복수의 코어들 중 상기 그룹 정보에 따 라 매핑된 해당 코어를 통해 처리하도록 함으로써 패킷 처리에 따른 지연 시간을 줄일 수 있는 전자 장치 및 전 자 장치에서 수신된 데이터 패킷을 처리하는 방법을 제공할 수 있다. 다양한 실시예에서는, 어플리케이션 또는 서비스의 특성(예컨대, QoS)에 기반한 그룹 정보를 복수의 코어들의 각 코어에 매핑하도록 설정하고, 통신 프로세서로부터 수신된 패킷을 상기 그룹 정보에 따라 매핑된 해당 코어 를 통해 처리하도록 함으로써 패킷 처리에 따른 지연 시간을 줄일 수 있는 전자 장치 및 전자 장치에서 수신된 데이터 패킷을 처리하는 방법을 제공할 수 있다."}
{"patent_id": "10-2021-0040160", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시예에 따라서, 전자 장치는, 복수의 코어(core)들을 포함하는 어플리케이션 프로세서, 및 상기 어플 리케이션 프로세서와 전기적으로 연결된 통신 프로세서를 포함하고, 상기 어플리케이션 프로세서는, 각 어플리 케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 상기 복수의 코어들 중 적어도 하 나의 코어에 대응하도록 설정하고, 상기 적어도 하나의 세션 중 제1 세션에 대해 설정된 제1 코어에 대응하는 정보를 상기 통신 프로세서로 전송하고, 상기 통신 프로세서로부터 상기 제1 세션의 데이터 패킷을 수신하고, 상기 제1 코어에 대응하는 정보에 기반하여, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 세션에 대해 설정 된 상기 제1 코어를 통해 처리할 수 있다. 다양한 실시예에 따라서, 전자 장치는, 복수의 코어(core)들을 포함하는 어플리케이션 프로세서, 및 상기 어플 리케이션 프로세서와 전기적으로 연결된 통신 프로세서를 포함하고, 상기 어플리케이션 프로세서는, 각 어플리 케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 상기 복수의 코어들 중 적어도 하 나의 코어에 대응하도록 설정하고, 상기 통신 프로세서로부터 상기 적어도 하나의 세션 중 제1 세션의 데이터 패킷을 수신하고, 상기 수신된 제1 세션의 데이터 패킷을 상기 복수의 코어들 중 상기 제1 세션에 대응하여 설 정된 제1 코어를 위해 할당된 논리 버퍼에 저장하고, 상기 논리 버퍼에 저장된 제1 세션의 데이터 패킷을 상기 제1 코어를 통해 처리할 수 있다. 다양한 실시예에 따라서, 전자 장치에서 수신된 데이터 패킷을 처리하는 방법은, 각 어플리케이션과 관련된 적 어도 하나의 세션을 QoS(quality of service)에 기반하여 어플리케이션 프로세서에 포함된 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하는 동작, 상기 적어도 하나의 세션 중 제1 세션에 대해 설정된 제1 코어 에 대응하는 정보를 상기 어플리케이션 프로세서에서 통신 프로세서로 전송하는 동작, 상기 어플리케이션 프로 세서에서 상기 통신 프로세서로부터 상기 제1 세션의 데이터 패킷을 수신하는 동작, 상기 제1 코어에 대응하는 정보에 기반하여, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 세션에 대해 설정된 상기 제1 코어를 통해 처리하는 동작을 포함할 수 있다. 다양한 실시예에 따라서, 전자 장치에서 수신된 데이터 패킷을 처리하는 방법은, 각 어플리케이션과 관련된 적 어도 하나의 세션을 QoS(quality of service)에 기반하여 어플리케이션 프로세서에 포함된 복수의 코어들 중 적 어도 하나의 코어에 대응하도록 설정하는 동작, 상기 어플리케이션 프로세서에서, 통신 프로세서로부터 상기 적 어도 하나의 세션 중 제1 세션의 데이터 패킷을 수신하는 동작, 상기 수신된 제1 세션의 데이터 패킷을 상기 복 수의 코어들 중 상기 제1 세션에 대응하여 설정된 제1 코어를 위해 할당된 버퍼에 저장하는 동작, 상기 버퍼에 저장된 상기 제1 세션의 데이터 패킷을 상기 제1 코어를 통해 처리하는 동작을 포함할 수 있다."}
{"patent_id": "10-2021-0040160", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 다양한 실시예들에 따른 전자 장치 및 전자 장치에서 수신된 데이터 패킷을 처리하는 방법은, 다양한 실시예에서는, 어플리케이션 프로세서가 어플리케이션 또는 서비스의 특성(예컨대, QoS)에 기반한 그룹 정보를 통신 프로세서와 공유하고, 통신 프로세서로부터 수신된 데이터 패킷을 상기 그룹 정보에 따라 복수의 코어에 매핑하여 처리하도록 함으로써 패킷 처리에 따른 지연 시간을 줄일 수 있다. 본 발명에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 않으며, 언급하지 않은 또 다른 효과들은 아래의 기재로부터 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2021-0040160", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또는 서버와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전자 장치와 통신 할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈, 음향 출력 모 듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능이 수행되는 전자 장치 자 체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi-supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않는다. 인공 지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워 크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지 능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제1 네트워크(예: 블 루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워크) 또는 제2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통 신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제1 네트워크 또는 제2 네트워크와 같은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제1 네트워크 또는 제2 네트워크와 같은 통신 네 트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제1 면(예: 아래 면)에 또는 그에 인접하여 배치 되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제2 네트워크에 연결된 서버를 통해서 전자 장치와 외 부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가 적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상 기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전 자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제 공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용 한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제2 네트워크 내 에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 다양한 실시예들에 따른, 데이터 패킷 처리를 위한 계층적 구성을 도시한다. 도 2를 참고하면, 다양한 실시예에 따른 전자 장치(예: 도 1의 전자 장치)는 데이터 패킷(이하, 설명의 편 의상 '패킷'이라고 한다.)을 송신 또는 수신하기 위한 디바이스 영역, 커널 영역, 및 사용자 영역 을 포함할 수 있다. 디바이스 영역에서의 동작들은 통신 프로세서(communication processor; CP)(예: 도 1의 보조 프로세서) 또는 통신 모듈(예컨대, 도 1의 통신 모듈)에 의해 실행될 수 있다. 커널 영역 및 사용자 영역은 프로그램의 적어도 일부에 포함된 메모리 주소 공간(memory address space)에 대응할 수 있다. 커널 영역 및 사용자 영역에서의 동작들은 프로세서(예: 도 1의 프로세서)(예: 어플리케이션 프로세서(application processor; AP))에 의해 실행될 수 있다. 프로세서 는 소프트웨어(예: 도 1의 프로그램)의 실행을 통해 커널 영역 및 사용자 영역에서의 동작들(또는, 기능들)을 수행할 수 있다. 상기 동작들과 관련된 명령어들(또는, 인스트럭션들(instructions))은 메모리(예: 도 1의 메모리)에 저장될 수 있다. 다양한 실시예들에 따르면, 디바이스 영역은, 패킷을 송신 또는 수신하기 위한 하드웨어 장치의 동작을 제 공할 수 있다. 디바이스 영역은 네트워크 연결 장치(예: 네트워크 인터페이스 컨트롤러(network interface controller; NIC) 또는 모뎀(modem))를 포함할 수 있다. 네트워크 연결 장치는 전자 장치(10 1)가 네트워크를 통해 전달하고자 하는 패킷을 신호 또는 비트열로 변환하여 물리적으로 송신 또는 수신하기 위 한 하드웨어 장치일 수 있다. 패킷은 송신단(또는, 송신측 전자 장치)이 수신단(또는, 수신측 전자 장치)에게 전달하고자 하는 데이터 패킷을 포함할 수 있다. 다양한 실시예에 따라, 네트워크 연결 장치가 프로세서 내에 포함되어 하나의 프로세싱 칩으로 구성되는 경우, 상기 네트워크 연결 장치는 통신 프로세서에서 어플리케이션 프로세서로 패킷을 전달하는 인터페이스(예컨대, IPC(inter-processor communication) 인터페 이스)를 의미할 수도 있다. 다양한 실시예들에 따르면, 어플리케이션 프로세서(application processor; AP)(예를 들면, 도 1의 프로세 서))는 네트워크 연결 장치(예를 들면, 도 1의 통신 모듈)를 통해 패킷을 수신할 수 있으며, 네 트워크 연결 장치를 통해 패킷을 전송할 수 있다. 예를 들면, 네트워크 연결 장치는 통신 프로세서 (communication processor; CP)(예: 도 1의 보조 프로세서 또는 통신 모듈) 및 통신 프로세서 와 프로세서 간 인터페이스를 포함할 수 있다. AP는 네트워크 연결 장치를 통해 외부 전자 장치(예를 들면, 도 1의 전자 장치(102, 104) 또는 서버(예를 들면, 도 1의 서버)에 패킷을 전송할 수 있으며, 외부 전자 장치 또는 서버로부터 전송된 패킷을 수신할 수 있다. 다양한 실시예에 따르면, 네트워크 연결 장치 는 프로세서(예: AP)에 전기적으로 연결된 모뎀(예: 통신 프로세서)과의 인터페이스(예:PCIe 인터페 이스, USB 인터페이스, 공유메모리(shared memory) 인터페이스)를 포함할 수 있다. 다양한 실시예에 따르면, 상 기 네트워크 연결 장치는 프로세서(예컨대, 메인 프로세서 또는 보조 프로세서) 내에 포함 될 수도 있다. 다양한 실시예들에 따르면, 커널 영역(kernel layer)은 전자 장치(예: 도 1의 전자 장치)의 운영 체 제(operating system, OS)(예: 도 1의 운영 체제)에 포함될 수 있다. 커널 영역(kernel layer)은 패 킷 처리를 제어할 수 있다. 커널 영역은 수신되는 패킷을 처리하기 위하여 다양한 모듈들을 포함할 수 있 다. 커널 영역은 디바이스 드라이버, 패킷 병합 모듈, 및 네트워크 패킷 처리 모듈을 포함 할 수 있다. 다양한 실시예들에 따르면, 디바이스 드라이버는 수신되는 패킷을 상위 계층에서 처리가 가능하도록 가공 할 수 있다. 디바이스 드라이버는 전자 장치에서 동작 중인 운영체제에 부합하도록 패킷을 가공할 수 있다. 디바이스 드라이버는 하나 또는 적어도 2개의 네트워크 디바이스 드라이버들(네트워크 디바이스 드 라이버(network device driver) #1, 네트워크 디바이스 드라이버 #2,... , 네트워크 디바이스 드라이버 #N)을 포함할 수 있다. 네트워크 디바이스 드라이버는, 네트워크 연결 장치의 제조사에서 정의된 통신 규약에 따 른 패킷을 수신할 수 있다. 네트워크 디바이스 드라이버는 네트워크 디바이스(예를 들면, 모뎀(modem), 랜카드 (lan card), 블루투스(Bluetooth), NFC(near field communication), 와이파이, 디스플레이, 오디오, 비디오)의 디바이스 드라이버들을 포함할 수 있다. 네트워크 연결 장치는 프로세서에 패킷(들)을 전송하면서 프 로세서에 인터럽트(interrupt)(예: HW IRQ(hardware interrupt request))를 발생시킬 수 있다. 네트워크 디바이스 드라이버는 인터럽트와 함께 패킷들을 수신할 수 있다. 각 네트워크 디바이스 드라이버는 수신되는 패 킷들을 구조체들로 가공할 수 있다. 다양한 실시예들에 따르면, 구조체들은 네트워크 처리를 위한 버퍼에 저장될 수 있다. 상기 버퍼는 패킷 병합을 위해 구조체들을 리스트의 형태로 저장할 수 있다. 패킷을 구조체로 가공 및 저장하는 동작은, 패킷 구조화로 지칭될 수 있다. 다양한 실시예들에 따르면, 패킷 병합 모듈은, 패킷 병합과 관련된 동작(예컨대, 병합(merge), 플러시 (flush), 또는 스킵(skip))을 수행할 수 있다. 패킷 병합 모듈은 수신되는 패킷들을 상위 계층(예: 네트워 크 패킷 처리 모듈)으로 전달할 수 있다. 패킷 병합 모듈은 디바이스 드라이버로부터 수신된 구 조화된 패킷들을 상위 계층으로 전달할 수 있다. 패킷 병합 모듈은 수신되는 패킷들을 병합하여 전달할 수 있다. 패킷 병합과 관련된 동작은 네트워크 디바이스 드라이버로부터 패킷 수신 시, IP/TCP 헤더(header) 정보 의 적어도 일부가 같은 연속된 패킷 데이터들을 하나의 패킷으로 병합하고(또는, 묶고), 병합된 패킷을 네트워 크 패킷 처리 모듈(예컨대, 네트워크 스택)로 올려주는 기법일 수 있다. 패킷 병합 모듈은 수신되는 패킷들을 병합하여 한 번에 상위 계층으로 전달함으로써, 네트워크 패킷 처리 모듈의 부하를 줄일 수 있다. 또한, 패킷 병합과 관련된 동작을 통해, 수신된 패킷에 대한 응답(예: acknowledge, ACK)의 횟수가 감소 하여, 네트워크 연결 장치의 부하가 줄어들 수 있다. 또는, 시스템 내 전체적인 부하가 감소함에 따라, 처 리 효율이 증가할 수 있어 처리량(throughput; Tput)이 상승할 수 있다. 다양한 실시예들에 따르면, 패킷 병합 모듈은 수신되는 패킷들을 바로 상위 계층(예: TCP(transmission control protocol)/IP(internet protocol))으로 전달할 수도 있다. 패킷들의 수신이 완료됨(complete)을 가리 키는 알림을 수신하거나 특정 조건이 만족되는 경우, 패킷 병합 모듈은 수신되는 패킷들을 바로 상위 계층 으로 전달할 수 있다. 다양한 실시예들에 따르면, 패킷 병합 모듈에서, 수신되는 패킷들을 병합하여 상위 계층으로 전달하거나 혹은 수신되는 패킷들을 바로 상위 계층으로 전달하는 동작은, 플러시(flush)로 지칭될 수 있다. 플러시는, 패 킷 병합 모듈의 버퍼에 저장된 구조체들을 상위 계층으로 전달하는 동작을 의미할 수 있다. 패킷 병합 모 듈은 구조체들을 스트림(예: TCP 스트림)에 대응하도록, 리스트 형태로 버퍼에 저장할 수 있다. 패킷 병합 모듈은 각 스트림에 대응하는 패킷 리스트를 포함할 수 있다. 다양한 실시예들에 따르면, 패킷 병합과 관련된 동작은, 오프로드(offload) 혹은 수신 오프로드(receive offload)로 지칭될 수 있다. 패킷 병합과 관련된 동작은, 전자 장치에서 동작 중인 OS에 정의된 함수로서 수행될 수 있다. 예를 들어, 패킷 병합과 관련된 동작은, LinuxTM의 GRO(generic receiver offload)를 포함할 수 있다. 다른 예를 들어, 패킷 병합과 관련된 동작은, WindowsTM의 RSC(receive segment coalescing)일 수 있 다. 다양한 실시예에서, 프로세서(예: 도 1의 프로세서)가 복수 개의 코어(코어 프로세서)를 가진 멀티코어 프 로세서일 경우, 상기 패킷 병합 모듈의 동작은 각 세션 별로 각기 다른 프로세서에서 병렬적으로 수행될 수도 있다. 예컨대, 적어도 하나의 네트워크 연결 장치에서 수신된 패킷은 복수 개의 코어 프로세서들 중 어느 하나의 코어 프로세서로 전달되고, 상기 복수 개의 코어 프로세서들 각각은 상기 적어도 하나의 네트워크 연결 장치로부터 수신된 패킷을 동시에 병렬적으로 처리할 수 있다. 다양한 실시예들에 따르면, 네트워크 패킷 처리 모듈은 패킷 병합 모듈로부터 수신된 패킷을 처리할 수 있다. 네트워크 패킷 처리 모듈은 네트워크 스택(network stack)을 포함할 수 있다. 네트워크 패킷 처 리 모듈은 네트워크 계층(예: IP(internet protocol), ICMP(internet control message protocol)) 및 전 송 계층(TCP(transmission control protocol), UDP(user datagram protocol))을 포함할 수 있다. 네트워크 패 킷 처리 모듈은 디바이스 드라이버 및 패킷 병합 모듈을 통해 네트워크 연결 장치로부터 패킷을 수신할 수 있다. 네트워크 패킷 처리 모듈은 사용자 영역에서 처리할 수 있도록 상기 디바이스 드 라이버 및 패킷 병합 모듈로부터 수신된 패킷을 처리한 뒤, 처리된 패킷을 사용자 영역으로 전달할 수 있다. 예를 들어, IP 계층에서, 네트워크 패킷 처리 모듈은 IP 라우팅을i 수행할 수 있다. 또한, 예를 들어, TCP 계층에서, 네트워크 패킷 처리 모듈은 TCP 제어 블록(TCP control block)을 식별할 수 있다. 네트워크 패킷 처리 모듈은 해당 패킷의 IP와 포트 번호를 식별할 수 있다. 다양한 실시예들에 따르면, 사용자 영역(user layer)은 커널 영역으로부터 전달된 패킷들을 사용하는 동작들이 수행될 수 있다. 사용자 영역(user layer)에서는 사용자 계층에서 동작하는 어플리케이션들의 목 적에 부합하도록, 전달된 패킷들이 사용될 수 있다. 예를 들어, 전자 장치의 사용자에게 메시지를 표시 (display)하거나, 비디오 스트리밍 서비스를 제공할 수 있다. 사용자 영역은 어플리케이션 프레임워크 및 어플리케이션을 포함할 수 있다. 다양한 실시예들에 따르면, 어플리케이션은 전자 장치에 관련된 자원을 제어하는 운영 체제(예를 들면, 도 1의 운영 체제) 및/또는 운영 체제상에서 구동될 수 있다. 운영 체제는, 예를 들면, AndroidTM, LinuxTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 어플리케이션 프레임워크는 어플리케 이션이 공통적으로 필요로 하는 기능을 제공하거나, 어플리케이션이 전자 장치 내부의 제한된 시스템 자원을 사용할 수 있도록 하는 다양한 기능들을 어플리케이션에 제공할 수 있다. 예컨대, 어플리케이션 프 레임워크는 패키지 매니저, 액티비티 매니저, 통화 매니저, 윈도우 매니저, 또는 리소스 매니저를 포함할 수 있다. 다양한 실시예들에 따르면, 네트워크 연결 장치로부터 수신되는 패킷들은, 소프트웨어(예: 도 1의 프 로그램)의 형태로 구현될 수 있는 디바이스 드라이버를 통해 패킷 병합 모듈을 거쳐 네트워크 패킷 처리 모듈(예컨대, 네트워크 스택)로 전달될 수 있으며, 어플리케이션은, 네트워크 패킷 처리 모듈(예컨대, 네트워크 스택)에서 처리된 패킷들을 사용할 수 있다. 다양한 실시예들에 따르면, 패킷 병합 모듈에서 제공되는 패킷 병합과 관련된 동작은, 여러 개의 수신된 패킷들을 하나로 병합하여 한 번에 네트워크 스택으로 전달함으로써, 네트워크 스택에서의 처리 부하를 줄일 수 있다. MTU(maximum transmission unit)는 네트워크 계층(예: 네트워크 스택의 IP 계층)으로 전달될 수 있는 패 킷의 최대 전송 단위일 수 있다. 패킷 병합과 관련된 동작이 적용되지 않는 경우, 네트워크 디바이스 드라이버 는, MTU 이하의 크기의 패킷을 네트워크 스택으로 전달할 수 있다. 패킷 병합과 관련된 동작이 적용되는 경우, 네트워크 스택으로 플러시되는i 패킷의 크기는 MTU(예컨대, 999개 또는 64KB(kilobyte))를 초과할 수 있다. 패킷 병합과 관련된 동작이 적용되면, 시스템의 네트워크 스택에 부하가 줄어들고 서버 측에 적은 수의 패킷에 대 한 응답(ACK)이 송신됨으로써 NIC 혹은 모뎀과 같은 데이터 전송 하드웨어와 전체 네트워크 처리기들에 부하가 줄어들 수 있다. 그러나, 패킷 병합 모듈이 일률적으로 패킷들을 병합하여 상위 계층으로 전달하면, 예컨 대, 패킷의 전송 초기와 같이 네트워크 속도가 낮은 경우 수신된 패킷에 대한 응답(ACK)의 송신이 지연되어 네 트워크 속도가 빠르게 증가하지 못할 수 있다. 다양한 실시예들에 따르면, TCP와 같은 전송 프로토콜은 혼잡 제어를 위하여 ACK이 수신될 때마다 윈도우 크기 를 증가시킬 수 있다. 예를 들어, 전송 초기에는 ACK이 수신될 때마다 윈도우 크기가 임계값을 초과할 때까지 지수적으로 증가시킬 수 있다. 예를 들어, 전송 초기에는, 전송된 패킷에 대한 응답이 빠를수록, 네트워크 속도 가 빠르게 증가할 수 있다. 그러나, 적은 양의 응답(ACK)을 송신하게 되면 네트워크 속도의 증가가 더디게 되고, 이로 인해 스트리밍 동영상 재생 시 처음 화면이 시작되는 때까지의 시간이 느려질 수 있다. 예를 들어, 수신되는 패킷마다 ACK을 전송하는 것이 아니라, 병합된 다수의 패킷들에 대해 1회의 ACK을 전송하게 되면, 송 신단에서는 1회의 ACK만을 고려하여 윈도우의 크기를 증가시킬 수 있다. 패킷 병합과 관련된 동작의 적용 시, ACK의 발생 횟수가 감소하여 처리량은 패킷 병합과 관련된 동작이 적용되지 않는 경우보다 감소할 수 있다. 네 트워크 상황이 좋을수록 ACK의 발생 횟수가 증가하기 때문에, 패킷 병합과 관련된 동작으로 인한 처리량 감소가 발생할 수 있다. 다양한 실시예에 따르면, 수신된 데이터 패킷에 해당하는 세션의 특성(예컨대, IP 유형 또는 어플리케이션 유형)에 기반하여 패킷들을 적응적(또는, 가변적)으로 병합하여 상위 계층으로 전달하거나, 수신된 패킷을 바로 상위 계층으로 전달함으로써 처리량을 향상시킬 수 있다. 상기 패킷 병합 모듈에서의 패킷(예: 병합된 패 킷)들을 상위 계층(예컨대, 네트워크 패킷 처리 모듈)으로 전달하는 동작은, 플러시(flush)로 지칭될 수 있다. 도 3은 다양한 실시예들에 따른, 전자 장치와 서버 간의 전송 지연을 나타내는 도면이다. 도 3을 참조하면, 5G 통신 네트워크에서 초저지연 서비스를 지원하는 URLLC 데이터의 경우 서버(예: MEC(mobile edge computing) 서버)로부터 어플리케이션까지 10ms 이내로 처리될 수 있다. 6G 통신 네트워크에서는 서버 로부터 어플리케이션까지 1ms 이내로 처리될 수 있다. 상기 서버로부터 전자 장치 내의 어 플리케이션까지 목표로 하는 처리 시간이 줄어들수록 상기 전자 장치 내에서 패킷을 처리하는데 점유 되는 시간의 비중이 상대적으로 증가할 수 있다. 예컨대, 저지연 서비스(예: 클라우드 게임, V2X)와 대용량 트 래픽(예: 고화질 비디오)이 동시에 발생하는 경우, 저지연 서비스의 최종 처리 시간이 지연될 수 있다. 이하, 도 4 및 도 5를 참조하여 상기 전자 장치 내에서 패킷 처리 시 발생할 수 있는 시간 지연을 설명한다. 도 4는 다양한 실시예들에 따른, 전자 장치에서의 RSS(receive side steering) 방식에 의한 데이터 패킷 처리의 예를 도시한다. 도 4를 참조하면, 전자 장치는 CP(예: 통신 모듈) 및 프로세서(예: 도 1의 프로세서)(이하, 설명의 편의상 AP라 한다.), 메모리(예: 도 1의 메모리)를 포함할 수 있다. AP는 복수의 코어(또는 코어 프로세서)들을 포함할 수 있으며, 후술하는 설명에서는 설명의 편의를 위하여 4개의 코어(예: 제1 코어(코어 0), 제2 코어(코어 1), 제3 코어(코어 2), 제4 코어(코어 3))를 포함하는 것으로 예시하고 있으나, 후술하는 실시예들이 상기 개수로 한정되는 것은 아니다. 다양한 실시 예에 따라, 제1 코어 및 제2 코어는 밸런스 클러스터(balance cluster)로 지칭될 수 있으며, 상기 제 3 코어 및 제4 코어는 퍼포먼스 클러스터(performance cluster)로 지칭될 수 있다. 상기 퍼포먼스 클러스터에 해당하는 코어들은 상기 밸런스 클러스터에 해당하는 코어들에 비해 상대적으로 성능이 우수하며 배 터리 소모가 큰 코어들일 수 있다. 상기 밸런스 클러스터에 해당하는 코어들은 상기 퍼포먼스 클러스터에 해당 하는 코어들에 비해 상대적으로 성능이 낮으며 배터리 소모가 작은 코어들일 수 있다. 상기 밸런스 클러스터에 해당하는 코어들은 작은 코어(little core)로 지칭될 수 있으며, 퍼포먼스 클러스터에 해당하는 코어들은 큰 코 어(big core)로 지칭될 수 있으나, 후술하는 실시예들이 상기 용어에 한정되는 것은 아니다. 다양한 실시예에 따라, 상기 밸런스 클러스터와 상기 퍼포먼스 클러스터의 중간 성능을 갖는 코어는 미들 코어(middle core)로 지칭될 수 있다. 다양한 실시예에 따라, CP는 필터 및 복수의 버퍼들을 포함할 수 있다. CP에 수신된 패킷들은 필터를 통해 복수의 버퍼들 중 어느 하나의 버퍼로 분배될 수 있다. 상기 필터는 수신된 패킷의 헤더 를 확인하여(또는, 헤더를 해싱(hashing)하여), 동일한 세션(session)(또는 동일한 플로우i(flow))의 패킷은 동 일한 버퍼에 저장할 수 있다. 예컨대, 제1 세션의 패킷들은 필터를 통해 제1 버퍼에 저장될 수 있으 며, 제2 세션의 패킷들 및 제3 세션의 패킷들은 필터를 통해 제2 버퍼에 저장될 수 있다. 상기 제1 버퍼에 저장된 제1 세션의 패킷들은 AP로 전달될 수 있으며, AP는 상기 제1 버퍼로부터 수신된 제1 세션의 패킷들을 제1 코어를 통해 처리하도록 제어할 수 있다. 상기 제2 버퍼에 저장된 제2 세션의 패킷들 및 제3 세션을 패킷들은 AP로 전달될 수 있으며, AP는 상기 제2 버퍼로부터 수신된 제2 세션의 패킷들 및 제3 세션의 패킷들을 제2 코어를 통해 처리하도록 제어할 수 있다. 다양한 실시예에 따라, 상기 각 코어에 전달된 패킷들은 패킷 병합 모듈(예: 도 2의 패킷 병합 모듈(23 3))을 통해 패킷 병합과 관련된 동작이 수행될 수 있다. 예컨대, 패킷 병합 모듈은, 패킷 병합과 관련된 동작(예컨대, 병합(merge), 플러시(flush), 또는 스킵(skip))을 수행할 수 있다. 패킷 병합 모듈은 수신되 는 패킷들을 상위 계층(예: 네트워크 패킷 처리 모듈(예: 도 2의 네트워크 패킷 처리 모듈)으로 전달 할 수 있다. 상기 패킷 병합 모듈의 구체적인 실시예는 도 2에서 설명하였으므로 상세한 설명은 생략하기 로 한다. 다양한 실시예에 따라, 도 4에 도시된 바와 같이 AP(예: 도 1의 프로세서)가 복수 개의 코어(예: 코 어 프로세서)를 가진 멀티 코어 프로세서일 경우, 상기 패킷 병합 모듈의 동작은 제1 코어에 대응하 는 버퍼, 제2 코어에 대응하는 버퍼, 제3 코어에 대응하는 버퍼, 제4 코어에 대응하는 버퍼에서 병렬적으로 수행될 수 있다. 예컨대, 제1 코어에 할당된 제1 세션의 패킷 데이터 는 제1 코어에 대응하는 버퍼에 저장된 후 패킷 병합과 관련된 동작이 수행될 수 있다. 동시에 제2 코어에 할당된 제2 세션의 패킷 데이터 또는 제3 세션의 패킷 데이터는 제2 코어에 대 응하는 버퍼에 저장된 후서 패킷 병합과 관련된 동작이 병렬적으로 수행될 수 있다. 상기 제1 코어에 대응하는 버퍼에 저장되어 병합 처리된 데이터 패킷들 및 상기 제2 코어에 대응하는 버퍼에 저 장되어 병합 처리된 데이터 패킷들은 네트워크 패킷 처리 모듈로 전달될 수 있다. 다양한 실시예에 따라, 제3 세션의 패킷 데이터가 저지연 서비스 데이터인 경우, 상기 제2 세션의 패킷 데 이터에 대한 패킷 병합 처리가 완료된 후 패킷 병합 처리가 수행될 수 있으므로, 시간 지연이 발생할 수 있다. 또한, 상기 제3 세션의 패킷 데이터는 퍼포먼스 클러스터에 해당하는 코어들(예: 제3 코어, 제 4 코어)이 아닌 밸런스 클러스터에 해당하는 코어들(예: 제1 코어, 제2 코어)을 통해 처리되어 상대적으로 처리 속도가 저하될 수 있다. 도 5는 다양한 실시예들에 따른, 전자 장치에서의 RPS(receive packet steering) 방식에 의한 데이터 패킷 처리 의 예를 도시한다. 도 5를 참조하면, 전자 장치는 CP(예: 통신 모듈) 및 AP, 메모리 (예: 도 1의 메모리)를 포함할 수 있다. AP는 복수의 코어(또는 코어 프로세서)들을 포함할 수 있다. 다양한 실시예에 따라, 제1 코어 및 제2 코어는 밸런스 클러스터(balance cluster)로 지칭될 수 있으며, 상기 제3 코어 및 제4 코어는 퍼포먼스 클러스터(performance cluster)로 지칭될 수 있 다. 다양한 실시예에 따라, CP는 필터 및 복수의 버퍼들을 포함할 수 있다. 상기 CP에 포함된 복수의 버퍼들은 물리적으로 하나의 버퍼일 수 있으며, 소프트웨어로 구현된 가상의 복수의 버퍼일 수 있다. CP에서 입력된 패킷들은 하나의 수신 버퍼로 입력될 수 있다. 상기 수신 버퍼는 CP로 입력된 순서에 따라 복수의 패킷들을 저장할 수 있다. 예컨대, 수신 버퍼는 제1 세션의 패킷들을 저장한 후, 제3 세션의 패킷들을 저장할 수 있다. 상기 수신 버퍼에 순차적으로 저장된 제1 세션의 패킷들 및 제3 세션의 패킷들은 AP로 전달될 수 있으며, AP는 제1 버퍼로부터 수신된 제1 세션의 패킷들 및 제3 세션의 패킷들을 제1 코어 를 통해 처리하도록 제어할 수 있다. 다양한 실시예에 따라, 상기 제1 코어에 전달된 패킷들은 패킷 병합 모듈(예: 도 2의 패킷 병합 모듈 )을 통해 패킷 병합과 관련된 동작이 수행될 수 있다. 예컨대, 패킷 병합 모듈은, 패킷 병합과 관련 된 동작(예컨대, 병합(merge), 플러시(flush), 또는 스킵(skip))을 수행할 수 있다. 패킷 병합 모듈은 수 신되는 제1 세션의 패킷들 및 제3 세션의 패킷들을 패킷 스티어링 모듈을 통해 상위 계층(예: 네트워크 패킷 처리 모듈(예: 도 2의 네트워크 패킷 처리 모듈)으로 전달할 수 있다. 상기 패킷 병합 모듈의 구체적인 설명은 도 2에서 설명하였으므로 상세한 설명은 생략하기로 한다. 다양한 실시예에 따라, 상기 제1 코어의 버퍼에 저장되어 패킷 병합 처리된 제1 세션의 데이터 패킷 및 제3 세션의 데이터 패킷은 패킷 병합 모듈에서 패킷 스티어링 모듈을 통해 각각 별개 의 코어에서 처리되도록 할 수 있다. 예컨대, 상기 패킷 스티어링 모듈은 병합 처리된 패킷을 수신하여 제 1 코어에 대응하는 버퍼에 저장하거나, 제2 코어에 대응하는 버퍼에 저장하거나, 제3 코어에 대응하는 버퍼에 저장하거나, 제4 코어에 대응하는 버퍼에 저장할 수 있다. 예컨대, 제 1 코어에 대응하는 버퍼에 저장된 패킷은 제1 코어의 네트워크 패킷 처리 모듈을 통해 처 리될 수 있으며, 제2 코어에 대응하는 버퍼에 저장된 패킷은 제2 코어의 네트워크 패킷 처리 모 듈을 통해 처리될 수 있으며, 제3 코어에 대응하는 버퍼에 저장된 패킷은 제3 코어의 네트 워크 패킷 처리 모듈을 통해 처리될 수 있으며, 제4 코어에 대응하는 버퍼에 저장된 패킷은 제4 코어의 네트워크 패킷 처리 모듈을 통해 처리될 수 있다. 예컨대, 제1 세션 데이터 패킷은 제1 코어에 대응하는 버퍼에 저장되어 병합 처리된 후 제3 코 어의 네트워크 패킷 처리 모듈로 전달될 수 있으며, 제3 세션 데이터 패킷은 제1 코어에 대응하는 버퍼에 저장되어 병합 처리된 후 제4 코어의 네트워크 패킷 처리 모듈로 전달될 수 있 다. 다양한 실시예에 따라, 도 5에 도시된 바와 같이 AP(예: 도 1의 프로세서)가 복수 개의 코어(코 어 프로세서)를 가진 멀티 코어 프로세서일 경우, 저지연 서비스 데이터에 해당하는 상기 제3 세션 데이터 패킷 은 상기 제1 세션 데이터 패킷과 별개의 코어에서 네트워크 패킷 처리될 수 있으나, 제1 코어에 서 제1 세션 데이터 패킷의 패킷 병합 처리 이후에 제4 코어로 재분배됨에 따라, 상기 제1 세션의 패 킷 데이터에 대한 패킷 병합 처리가 완료된 후 패킷 병합 처리가 수행될 수 있으므로, 시간 지연이 발생할 수 있다. 이하, 도 6 내지 도 34를 참조하여, 어플리케이션 또는 서비스의 특성(예컨대, QoS)에 기반한 그룹 정 보에 따라 복수의 코어에 매핑하여 처리하도록 함으로써 패킷 처리에 따른 지연 시간을 줄일 수 있는 다양한 실 시예들을 설명하기로 한다. 후술하는 다양한 실시예들에서는 AP와 CP가 별도의 구성으로 구분하여 설명하고 있으나, 상기 AP와 CP가 별도의 칩(chip)으로 구성되는 것을 한정하는 것은 아니다. 예컨대, 상기 AP와 CP는 각각 별도의 칩으로 구성될 수도 있으며, 하나의 칩 내에서 어플리케이션 프로세서와 통신 프로세서 가 포함되도록 구성될 수도 있다. 다양한 실시예에 따라, 후술하는 실시예에서, 컨트롤러는 상기 AP 내에 포함될 수도 있으며, 상기 AP와는 별도의 하드웨어 구성에 포함될 수도 있다. 예컨대, 상기 컨트롤러 는 상기 도 1의 메모리 내에 프로그램 형태로 저장될 수 있으며, 운영 체제(예: AndroidTM, LinuxTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM), 미들 웨어, 또는 어플리케이션 중 어느 하나의 형태로 구현될 수 있다. 도 6은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 6을 참조하면, 전자 장치는 CP(예: 통신 모듈) 및 AP, 메모리(예: 도 1의 메모리)를 포함할 수 있 다. AP는 복수의 코어(또는 코어 프로세서)들을 포함할 수 있다. 다양한 실시예에 따라, 제1 코어 및 제2 코어는 밸런스 클러스터(balance cluster)로 지칭될 수 있으며, 상기 제3 코어 및 제4 코어 는 퍼포먼스 클러스터(performance cluster)로 지칭될 수 있다. 다양한 실시예에 따라, CP는 필터 및 복수의 버퍼들을 포함할 수 있다. 상기 CP에 포함된 복수의 버퍼들은 물리적으로 하나의 버퍼일 수 있으며, 논리적으로 구분될 수 있다. 다양한 실시예에 따라, 컨트롤러는 데이터베이스에 저장된 정보에 기반하여 세션별 그룹 정보를 CP의 필터로 전송할 수 있다. 상기 필터는 컨트롤러로부터 세션별 그룹 정보를 수신하고, 수신된 패킷의 세션에 따라 해당 그룹에 매핑된 버퍼에 저장할 수 있다. 예컨대, 필터는 컨트롤러로 부터 세션별 그룹 정보를 수신하고, 해당 그룹에 대응하는 버퍼(예컨대, 논리 버퍼)를 생성할 수 있다. 상기 도 6을 참조하면, 두 개의 그룹에 대응하는 두 개의 논리 버퍼로서 수신 버퍼 A 및 수신 버퍼 B가 생성될 수 있다. 예컨대, 컨트롤러는 제1 세션을 제1 그룹에 매핑하고, 제3 세션을 제2 그룹에 매핑하여 데이터베이스(42 0)에 저장할 수 있다. 상기 컨트롤러는 상기 각 세션별 그룹 정보를 CP 내의 필터에 전송할 수 있다. 필터는 상기 컨트롤러로부터 세션별 그룹 정보를 수신하고, 제1 그룹에 대응하는 수신 버퍼 A 및 제2 그룹에 대응하는 수신 버퍼 B를 생성할 수 있다. 다양한 실시예에 따라, 필터는 각 세션에 대응하는 데이터 패킷을 수신하고, 해당 데이터 패킷의 헤더를 검사하여, 수신된 데이터 패킷의 세션을 확인할 수 있다. 예컨대, 상기 필터는 수신된 데이터 패킷의 세션 이 제1 세션의 데이터 패킷으로 확인되면, 확인된 제1 세션의 데이터 패킷을 상기 제1 세션에 매핑된 제1 그룹에 대응하여 생성된 수신 버퍼 A에 저장할 수 있다. 상기 필터는 수신된 데이터 패킷의 세션이 제 3 세션의 데이터 패킷으로 확인되면, 확인된 제3 세션의 데이터 패킷을 상기 제3 세션에 매핑된 제2 그룹에 대응하여 생성된 수신 버퍼 B에 저장할 수 있다. 상기 각 수신 버퍼에 저장된 제1 세션의 패킷들 및 제3 세션의 패킷들은 AP의 제어 코어(예: 제 1 코어(코어 0))로 전달될 수 있다. 상기 CP는 상기 패킷들을 AP로 전달할 때, 각 그룹에 대응 하여 생성된 해당 수신 버퍼와 관련된 메타 정보(예컨대, 버퍼 번호(또는 그룹 번호), 버퍼의 시작 위치, 버퍼 의 종료 위치, 버퍼의 패킷 수, 또는 버퍼의 세션 수)를 함께 전달할 수 있다. 다양한 실시예에 따라, AP 의 제어 코어(예: 제1 코어)는 수신된 패킷을 병합 처리하기 전 컨트롤러로부터 수신된 그룹과 코어 의 매핑 정보에 기반하여 매핑 모듈을 통해 설정된 코어로 분배할 수 있다. 예컨대, 제1 코어의 매핑 모듈은 컨트롤러로부터 수신된 정보에 기반하여 수신 버퍼 A로부터 수신된 제1 세션의 데이터 패킷 을 제1 코어의 패킷 병합 모듈로 전송할 수 있다. 제1 코어의 매핑 모듈은 컨트롤러 로부터 수신된 정보에 기반하여 수신 버퍼 B로부터 수신된 제3 세션의 데이터 패킷을 제4 코어 의 패킷 병합 모듈로 전송할 수 있다. 다양한 실시예에 따라, 상기 제1 코어에 전달된 제1 세션의 패킷들은 제1 코어에 대응하는 버퍼 에 저장되어 패킷 병합 모듈(예: 도 2의 패킷 병합 모듈)을 통해 패킷 병합과 관련된 동작이 수 행될 수 있다. 예컨대, 패킷 병합 모듈은, 패킷 병합과 관련된 동작(예컨대, 병합(merge), 플러시(flush), 또는 스킵(skip))을 수행할 수 있다. 상기 제4 코어에 전달된 제3 세션의 패킷들은 제4 코어에 대응하는 버퍼에 저장되어 패킷 병합 모듈(예: 도 2의 패킷 병합 모듈)을 통해 패킷 병합과 관 련된 동작이 수행될 수 있다. 다양한 실시예에 따라, 도 6 및 도 7 이하에서 후술하는 패킷 병합 모듈은 컨트롤러의 제어에 따라 각 코어(441, 442, 443, 444) 내에서 각 세션별로 독립적으로 패킷 병합 정책을 적용할 수도 있으며, 각 코어(441, 442, 443, 444) 별로 독립적으로 패킷 병합 정책을 적용할 수도 있다. 다양한 실시예에 따라, 상기 제1 코어를 통해 패킷 병합 처리된 제1 세션의 데이터 패킷은 패킷 병합 모듈에서 패킷 스티어링 모듈을 통해 각각 별개의 코어에서 처리되도록 할 수 있다. 예컨대, 상기 패 킷 스티어링 모듈은 병합 처리된 제1 세션의 데이터 패킷을 수신하여 제1 코어에 대응하는 버퍼 에 저장할 수 있다. 상기 제1 코어에 대응하는 버퍼에 저장된 제1 세션의 데이터 패킷은 제1 코어의 네트워크 패킷 처리 모듈을 통해 처리될 수 있다. 상기 제4 코어를 통해 패킷 병합 처리된 제3 세션의 데이터 패킷은 패킷 병합 모듈에서 패킷 스티어링 모듈을 통해 각각 별개의 코어에서 처리되도록 할 수 있다. 예컨대, 상기 패킷 스티어링 모듈은 병합 처리된 제3 세션의 데이터 패 킷을 수신하여 제4 코어에 대응하는 버퍼에 저장할 수 있다. 상기 제4 코어에 대응하는 버 퍼에 저장된 제3 세션의 데이터 패킷은 제4 코어의 네트워크 패킷 처리 모듈을 통해 처리 될 수 있다. 다양한 실시예에 따라, 상기 제3 세션이 저지연 서비스와 관련된 세션인 경우, 상기 제1 세션의 데이터 패킷 을 병합 처리하기 전 상기 제3 세션의 데이터 패킷을 상대적으로 성능이 우수한 퍼포먼스 클러스터의 제4 코어에 별도 매핑하여 병합 처리함으로써 패킷 처리에 따른 지연을 줄일 수 있다. 다양한 실시예에 따 라, 컨트롤러는 패킷 병합 모듈을 제어하여 상기 패킷 병합 모듈의 패킷 병합 정책을 각 코어별 로 적용하도록 할 수 있다. 다양한 실시예에 따라, 컨트롤러는 전술한 바와 같이 매핑 모듈 및/또는 패킷 스티어링 모듈을 제어하여 각 세션별 매핑된 그룹에 해당하는 특정 세션의 데이터 패킷이 설정된 코 어를 통해 처리되도록 제어할 수 있다. 다양한 실시예에 따라, 상기 제3 세션의 데이터 패킷이 저지연 서 비스와 관련된 데이터 패킷인 경우 빠른 패킷 처리를 위해 상기 패킷 병합 모듈 및/또는 상기 패킷 스티어 링 모듈을 거치지 않고 상기 매핑 모듈에서 네트워크 패킷 처리 모듈로 직접 전송할 수도 있다. 도 7은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 7을 참 조하면, 전자 장치는 복수의 코어(core)들을 포함하는 어플리케이션 프로세서(예: 도 1의 프로세서), 및 상기 어플리케이션 프로세서와 전기적으로 연결된 통신 프로세서(CP)(예: 도 1의 통신 모듈를 포 함할 수 있다. 다양한 실시예에 따라, 상기 전자 장치의 어플리케이션 프로세서는 동작 710에서 각 어플리케이션과 관련 된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 상기 복수의 코어들 중 적어도 하나의 코어에 대 응하도록 설정할 수 있다. 예컨대, 상기 어플리케이션 프로세서는 각 어플리케이션과 관련된 적어도 하나의 세 션을 그룹에 매핑하고, 상기 그룹은 상기 복수의 코어들 중 특정 코어에 매핑할 수 있다. 다양한 실시예에 따라, 상기 전자 장치의 어플리케이션 프로세서는 동작 720에서 적어도 하나의 세션 중 제1 세션에 대해 설정된 제1 코어에 대응하는 정보(예컨대, 제1 그룹 정보)를 통신 프로세서로 전송할 수 있다. 다양한 실시예에 따라, 상기 전자 장치의 통신 프로세서는 상기 어플리케이션 프로세서로부터 수신된 정보 에 기반하여 각 그룹에 대응하는 논리 버퍼를 생성할 수 있다.다양한 실시예에 따라, 상기 전자 장치의 어플리케이션 프로세서는 동작 730에서 상기 통신 프로세서로부 터 상기 제1 코어에 대응하는 정보(예컨대, 제1 코어에 대응하는 그룹 A에 대해 할당된 수신 버퍼 A의 메타 정 보)에 기반하여 상기 제1 세션의 패킷 데이터를 수신할 수 있다. 예컨대, 상기 통신 프로세서는 상기 패킷들을 AP로 전달할 때, 각 그룹에 대응하여 생성된 해당 수신 버퍼와 관련된 메타 정보(예컨대, 버퍼 번호(또는 그룹 번호), 버퍼의 시작 위치, 버퍼의 종료 위치, 버퍼의 패킷 수, 또는 버퍼의 세션 수)를 함께 전달할 수 있 다. 다양한 실시예에 따라, 상기 전자 장치의 어플리케이션 프로세서는 동작 740에서 상기 수신된 제1 세션의 패킷 데이터를 상기 제1 세션에 대해 설정된 제1 코어를 통해 처리할 수 있다. 상기 제1 세션과 상이한 그룹인 그룹 B로 설정된 제2 세션의 패킷 데이터는 상기 그룹 B에 대해 설정된 제2 코어를 통해 처리할 수 있다. 도 8은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 8을 참조하면, 전자 장치는 CP(예: 통신 모듈) 및 AP, 메모리(예: 도 1의 메모리)를 포함할 수 있 다. AP는 복수의 코어(또는 코어 프로세서)들을 포함할 수 있다. 다양한 실시예에 따라, 제1 코어 및 제2 코어는 밸런스 클러스터(balance cluster)로 지칭될 수 있으며, 상기 제3 코어 및 제4 코어 는 퍼포먼스 클러스터(performance cluster)로 지칭될 수 있다. 다양한 실시예에 따라, CP는 필터 및 복수의 버퍼들을 포함할 수 있다. 상기 CP에 포함된 복수의 버퍼들은 물리적으로 하나의 버퍼일 수 있으며, 논리적으로 구분될 수 있다. 다양한 실시예에 따라, 컨트롤러는 데이터베이스에 저장된 정보에 기반하여 세션별 그룹 정보를 CP의 필터로 전송할 수 있다. 상기 필터는 컨트롤러로부터 세션별 그룹 정보를 수신하고, 수신된 패킷의 세션에 따라 해당 그룹에 매핑된 버퍼에 저장할 수 있다. 예컨대, 필터는 컨트롤러로 부터 세션별 그룹 정보를 수신하고, 해당 그룹에 대응하는 버퍼(예컨대, 논리 버퍼)를 생성할 수 있다. 상기 도 8을 참조하면, 두 개의 그룹에 대응하는 두 개의 논리 버퍼로서 수신 버퍼 A 및 수신 버퍼 B가 생성될 수 있다. 예컨대, 컨트롤러는 제1 세션 및 제2 세션을 제1 그룹에 매핑하고, 제3 세션을 제2 그룹에 매핑하여 데이 터베이스에 저장할 수 있다. 상기 컨트롤러는 상기 각 세션별 그룹 정보를 CP 내의 필터에 전송할 수 있다. 필터는 상기 컨트롤러로부터 세션별 그룹 정보를 수신하고, 제1 그룹에 대응하는 수 신 버퍼 A 및 제2 그룹에 대응하는 수신 버퍼 B를 생성할 수 있다. 다양한 실시예에 따라, 필터는 각 세션에 대응하는 데이터 패킷을 수신하고, 해당 데이터 패킷의 헤더를 검사하여, 수신된 데이터 패킷의 세션을 확인할 수 있다. 예컨대, 상기 필터는 수신된 데이터 패킷의 세션 이 제1 세션의 데이터 패킷 또는 제2 세션의 데이터 패킷으로 확인되면, 확인된 제1 세션의 데이터 패킷 또는 제2 세션의 데이터 패킷을 상기 제1 세션 또는 제2 세션에 매핑된 제1 그룹에 대응하여 생 성된 수신 버퍼 A에 저장할 수 있다. 상기 필터는 수신된 데이터 패킷의 세션이 제3 세션의 데이터 패킷 으로 확인되면, 확인된 제3 세션의 데이터 패킷을 상기 제3 세션에 매핑된 제2 그룹에 대응하여 생성 된 수신 버퍼 B에 저장할 수 있다. 상기 각 수신 버퍼에 저장된 제1 세션의 패킷들, 제2 세션의 패킷들 및 제3 세션의 패킷들은 AP의 제어 코어(예: 제1 코어(코어 0))로 전달될 수 있다. 상기 CP는 상기 패킷들을 AP로 전달할 때, 각 그룹에 대응하여 생성된 해당 수신 버퍼와 관련된 메타 정보(예컨대, 버퍼 번호(또는 그룹 번 호), 버퍼의 시작 위치, 버퍼의 종료 위치, 버퍼의 패킷 수, 또는 버퍼의 세션 수)를 함께 전달할 수 있다. 다 양한 실시예에 따라, AP의 제어 코어(예: 제1 코어)는 수신된 패킷을 병합 처리하기 전 컨트롤러 로부터 수신된 그룹과 코어의 매핑 정보에 기반하여 매핑 모듈을 통해 설정된 코어로 분배할 수 있다. 예컨대, 제1 코어의 매핑 모듈은 컨트롤러로부터 수신된 정보에 기반하여 수신 버퍼 A로 부터 수신된 제1 세션의 데이터 패킷 및 제2 세션의 데이터 패킷을 제1 코어의 패킷 병합 모듈 로 전송할 수 있다. 제1 코어의 매핑 모듈은 컨트롤러로부터 수신된 정보에 기반하여 수신 버퍼 B로부터 수신된 제3 세션의 데이터 패킷을 제4 코어의 패킷 병합 모듈로 전송할 수 있다. 다양한 실시예에 따라, 상기 제1 코어에 대응하는 버퍼에 저장된 제1 세션의 패킷들 및 제2 세 션의 패킷들은 제1 코어의 패킷 병합 모듈(예: 도 2의 패킷 병합 모듈)을 통해 패킷 병합 과 관련된 동작이 수행될 수 있다. 예컨대, 패킷 병합 모듈은, 패킷 병합과 관련된 동작(예컨대, 병합 (merge), 플러시(flush), 또는 스킵(skip))을 수행할 수 있다. 상기 제4 코어에 대응하는 버퍼에 저 장된 제3 세션의 패킷들은 제4 코어의 패킷 병합 모듈(예: 도 2의 패킷 병합 모듈)을 통해 패킷 병합과 관련된 동작이 수행될 수 있다.다양한 실시예에 따라, 상기 제1 코어 및 제4 코어를 통해 패킷 병합 처리된 제1 세션의 데이터 패킷 , 제2 세션의 데이터 패킷, 제3 세션의 데이터 패킷은 패킷 병합 모듈에서 패킷 스티어링 모듈을 통해 각각 별개의 코어에서 처리되도록 할 수 있다. 예컨대, 상기 패킷 스티어링 모듈은 제1 코어를 통해 병합 처리된 제1 세션의 데이터 패킷을 수신하여 제2 코어에 대응하는 버퍼에 저장할 수 있다. 상기 제2 코어에 대응하는 버퍼에 저장된 제1 세션의 데이터 패킷은 제2 코어 의 네트워크 패킷 처리 모듈을 통해 처리될 수 있다. 상기 패킷 스티어링 모듈은 제1 코어(44 1)에서 병합 처리된 제2 세션의 데이터 패킷을 수신하여 제3 코어에 대응하는 버퍼에 저장할 수 있다. 상기 제3 코어에 대응하는 버퍼에 저장된 제2 세션의 데이터 패킷은 제3 코어의 네 트워크 패킷 처리 모듈을 통해 처리될 수 있다. 상기 패킷 스티어링 모듈은 제4 코어에서 병합 처리된 제3 세션의 데이터 패킷을 제4 코어에 대응하는 버퍼에 저장할 수 있다. 상기 제4 코어 에 대응하는 버퍼에 저장된 제3 세션의 데이터 패킷은 제4 코어의 네트워크 패킷 처리 모 듈을 통해 처리될 수 있다. 다양한 실시예에 따라, 상기 컨트롤러는 상기 CP로부터 AP로 전달되는 각 수신 버퍼(예: 수신 버퍼 A, 수신 버퍼 B)의 메타 정보 및/또는 각 세션의 상태 정보에 기반하여 각 세션의 데이터 패킷의 동 작 코어를 결정할 수 있다. 예컨대, 상기 컨트롤러는 상기 CP로부터 AP로 전달되는 각 수신 버 퍼의 메타 정보 및/또는 각 세션의 상태 정보에 기반하여, 각 세션별 데이터 패킷에 대해 패킷 병합 모듈 을 통해 패킷 병합 처리를 수행할 코어 및/또는 네트워크 패킷 처리 모듈을 통해 네트워크 패킷 처리를 수 행할 코어를 결정할 수 있다. 다양한 실시예에 따라, 상기 컨트롤러는 상기 CP로부터 AP로 전달 되는 각 수신 버퍼의 메타 정보 및/또는 각 세션의 상태 정보에 기반하여, 각 세션별 데이터 패킷에 대한 패킷 병합 처리 시 해당 패킷 병합 모듈의 패킷 병합 수준을 조절할 수 있다. 다양한 실시예에 따라, 상기 CP의 수신 버퍼(예: 수신 버퍼 A, 수신 버퍼 B)는 CP에서 수신된 패킷을 저장하는 메모리 공간으로서, 상기 AP 또는 컨트롤러의 그룹 추가 요청에 따라 해당 그룹에 대응하는 새로운 수신 버퍼가 생성되거나, 그룹 삭제 요청에 따라 해당 그룹에 대응하는 수신 버퍼가 삭제될 수 있다. 다양한 실시예에 따라, 상기 매핑 모듈은 CP로부터 전달받은 메타 정보(또는 메타 데이터)를 확인하 고, 수신된 각 세션의 패킷 데이터를 해당 코어에 분배할 수 있다. 상기 매핑 모듈은 상기 컨트롤러 를 통해 각 그룹별로 생성된 수신 버퍼(예: 수신 버퍼 A, 수신 버퍼 B)에 대한 패킷 병합 모듈에 대한 코 어 매핑 정보를 확인할 수 있다. 상기 매핑 모듈은 상기 확인 결과에 기반하여, 각 코어에 해당 버퍼를 할 당하고, 매핑된 코어를 활성화(activate)시킬 수 있다. 다양한 실시예에 따라, 상기 컨트롤러는 어플리케이션(앱), 서비스, 또는 프레임워크(framework)를 모니터 링할 수 있다. 상기 컨트롤러는 특징 앱, 특정 서비스, 또는 특정 세션을 모니터링하고, 데이터베이스에 저장된 정보에 기반하여 CP의 필터에 관련 정보를 제공할 수 있다. 상기 컨트롤러는 패킷 병합 모듈에 각 동작 코어별로 설정된 패킷 병합 정책을 전달할 수 있다. 상기 컨트롤러는 매핑 모듈 및 패킷 병합 모듈을 모니터링하여, 설정된 조건에 따라 그룹을 추가하여 CP에 전달하거나, 설정된 조건에 따라 특정 그룹에 대응하는 수신 버퍼에 매핑된 코어(예컨대, 패킷 병합 모듈의 코어, 또는 네트워 크 패킷 처리 모듈의 코어)를 갱신할 수 있다. 다양한 실시예에 따라, 상기 데이터베이스는 각 세션에 대한 그룹 매핑 정보를 저장할 수 있다. 상기 데이 터베이스는 컨트롤러를 통해 수신된 세션별 시간당 처리량, 그룹 상태별 코어 사용량 정책, 그룹 상 태별 병합 정책을 저장할 수 있다. 상기 컨트롤러는 상기 데이터베이스에 저장된 정보를 참조하여 매 핑 모듈 및/또는 패킷 스티어링 모듈의 코어 매핑을 제어 또는 변경하거나, 패킷 병합 모듈의 패킷 병합 정책을 조정할 수 있다. 다양한 실시예에 따라, 컨트롤러는 특정 서비스와 관련된 데이터(예컨대, URSP(UE route selection policy), 에지 디스커버리(edge discovery) 응답 메시지)를 수신하고, 데이터베이스를 갱신할 수 있다. 상 기 컨트롤러는 상기 갱신된 데이터베이스에 기반하여 변경된 세션별 그룹 정보를 CP의 필터 로 제공할 수 있다. CP의 필터는 수신된 데이터 패킷을 상기 그룹 정보에 기반하여 수신 버퍼에 저장할 수 있다. 상기 CP는 각 수신 버퍼에 데이터를 AP에 전달할 때, AP의 제어 코어(예: 제1 코어)를 인터럽트할 수 있으며, 각 수신 버퍼에 대한 메타 정보를 갱신할 수 있다. 다양한 실시예에 따라, AP의 제어 코어는 갱신된 메타 정보를 확인하고, 확인된 메타 정보에 기반하여 각 수신 버퍼를 패킷 병합 모듈의 각 코어에 매핑할 수 있다. AP는 매핑된 각 코어에서 해당 세션의 데이터 패킷을 병합 처리할수 있다. 상기 컨트롤러는 세션 상태를 모니터링하고, 상기 매핑 모듈 및/또는 패킷 스티어링 모듈 의 동작 코어를 업데이트할 수 있다. 상기 컨트롤러는 상기 패킷 병합 모듈의 동작 수준을 업데 이트할 수 있다. 도 9a 및 도 9b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 다양한 실시예 에 따르면, 컨트롤러로부터 수신된 정보에 기반하여 수신 버퍼(예: 논리 큐(logical queue))의 개수가 변 경되는 경우, 각 세션 또는 그룹에 대해 할당된 코어가 변경될 수도 있다. 예컨대, 수신 버퍼의 개수가 변경되 는 경우, 도 9a에 도시된 바와 같이 사전에 정의된 수신 버퍼별 코어 번호에 따라 패킷 병합 모듈에 매핑 되는 코어가 할당될 수 있다. 상기 수신 버퍼의 개수가 변경됨에 따라 네트워크 패킷 처리 모듈에 매핑되 는 코어가 중복되는 경우, 도 9b에 도시된 바와 같이 중복되는 세션의 코어를 변경된 해당 그룹의 클러스터 내 의 다른 코어로 변경할 수 있다. 도 9a를 참조하면, 제1 세션이 생성됨에 따라 상기 제1 세션에 매핑된 제1 그룹에 대응하는 논리 버퍼 1(431a) 이 생성될 수 있다. 컨트롤러는 상기 제1 그룹에 대해 패킷 병합 모듈에 매핑할 코어(이하, 설명의 편의상 '제1 동작 코어'라 지칭하기로 한다.)를 제1 코어로 설정하고, 네트워크 패킷 처리 모듈에 매 핑할 코어(이하, 설명의 편의상 '제2 동작 코어'라 지칭하기로 한다.)를 제4 코어로 설정할 수 있다. 도 9b를 참조하면, 제2 세션이 생성됨에 따라 상기 제2 세션에 매핑된 제2 그룹에 대응하는 논리 버퍼 2(431b) 가 생성될 수 있다. 컨트롤러는 상기 제2 그룹에 대해 제1 동작 코어를 제4 코어로 설정하고, 제2 동 작 코어를 제4 코어로 설정할 수 있다. 상기 제2 세션에 대한 코어 설정에 따라 상기 제1 세션의 제2 동작 코어와 상기 제2 세션의 제2 동작 코어가 중복될 수 있다. 상기 코어가 중복됨에 따라, 상기 제1 세션의 제2 동 작 코어는 상기 제4 코어와 동일 클러스터 내의 다른 코어인 제3 코어로 변경될 수 있다. 상기 중복 되는 세션에 따라 코어를 재할당하는 방법은 랜덤, 라운드 로빈(round robin), 또는 부하 인지 기반의 방법이 적용될 수 있으나 제한은 없다. 다양한 실시예에 따라, 특정 논리 버퍼(예: 논리 버퍼 2(431b))에 할당된 세션이 특정 프로토콜(예: URSP)을 사 용할 경우, 제2 동작 코어를 사용하지 않고, 제1 동작 코어에서 직접 상위 레이어로 데이터 패킷을 전달하거나, 제2 동작 코어를 제1 동작 코어와 동일한 코어로 할당할 수 있다. 도 10a 및 도 10b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 다양한 실시 예에 따라, 현재 사용 가능한 코어가 모든 그룹별 버퍼가 사용 가능한 제1 동작 코어를 포함하지 못하는 경우, 컨트롤러는 데이터베이스에 정의된 그룹의 우선순위에 따라 낮은 순서에 우선하여 하위 그룹의 제1 동작 코어로 이동시킬 수 있다. 예컨대, 전자 장치는 전자 장치의 상태(예: 낮은 배터리 상태, 또는 높은 온도), 시스템의 설계(예: CPU 사용량), 또는 알고리즘에 따라 핫 플러그(hotplug) 방식을 이용하여 특정 코어를 동적으로 온라인(online)/오프라인(offline) 처리할 수 있다. 이 경우, 전자 장치에서 현재 사용 가능한 코어와 버퍼가 사용하고자 하는 코어는 서로 상이하게 될 수 있다.다양한 실시예에 따라, 상이한 두 그 룹이 하나의 코어에 할당되는 경우, 컨트롤러는 높은 우선 순위의 그룹 버퍼를 우선하여 설정된 코어에 스 케줄링할 수 있다. 예컨대, 도 10a를 참조하면, 제1 세션의 데이터 패킷은 논리 버퍼 1에 저장되고, 제2 세션의 데이터 패킷은 논 리 버퍼 2에 저장되고, 제3 세션의 데이터 패킷은 논리 버퍼 3에 저장될 수 있다. 다양한 실시예에 따라, 제1 세션의 제1 동작 코어와 제2 동작 코어는 제1 코어로 설정될 수 있다. 제2 세션의 제1 동작 코어와 제2 동 작 코어는 제2 코어로 설정될 수 있다. 제3 세션의 제1 동작 코어와 제2 동작 코어는 제3 코어로 설 정될 수 있다. 전술한 바와 같이 제4 코어는 오프라인 상태로 제어 될 수 있다. 다양한 실시예에 따라, 도 10b를 참조하면, 상기 설명한 바와 같이 추가적인 코어(예: 제3 코어)가 오프라 인 상태가 되거나, 논리 버퍼의 추가 또는 증가로 가용 가능한 제 1 동작 코어와 논리 버퍼의 개수가 상이한 경 우 다음과 같이 동작할 수 있다. 컨트롤러는 상대적으로 우선 순위가 낮은 제1 세션 및 제2 세션은 제1 동 작 코어 및 제2 동작 코어를 제1 코어로 설정할 수 있다. 다음으로 컨트롤러는 우선 순위가 낮은 제3 세션에 대해 제1 동작 코어 및 제2 동작 코어를 제2 코어로 변경하여 처리되도록 제어할 수 있다. 도 11a 및 도 11b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 다양한 실시 예에 따라, 현재 사용 가능한 코어가 모든 그룹 버퍼의 사용 가능한 제2 동작 코어를 포함하지 못하는 경우, 컨 트롤러는 데이터베이스에 정의된 그룹의 우선순위에 따라 우선하여 동일 클러스터의 동작 코어와 마 스크를 할당할 수 있다. 상기 동작 코어와 마스크의 할당된 코어의 개수는 가용 코어 수에 비례하여 변경될 수있다. 상기 동작 코어와 마스크에 할당된 코어의 개수는 가용 코어 수에 따라 차등하여 사전에 정의된 정책을 따를 수 있다. 예컨대, 우선 순위에 따라 하위 그룹은 상위 그룹의 동작 코어를 회피하여 할당할 수 있다. 상기 하위 그룹이 가용한 동작 코어와 마스크에 할당된 코어의 개수가 임계 값 이하인 경우, 상위 그룹의 동작 코어 를 회피하지 않을 수 있다. 다양한 실시예에 따라, 도 11a를 참조하면, 제1 세션의 데이터 패킷 및 제2 세션의 데이터 패킷은 논리 버퍼 1 에 저장되고, 제3 세션의 데이터 패킷은 논리 버퍼 2에 저장될 수 있다. 다양한 실시예에 따라, 제1 세션의 데 이터 패킷 및 제2 세션의 데이터 패킷의 제1 동작 코어는 동일한 제1 코어로 설정될 수 있다. 다양한 실시 예에 따라, 제1 세션의 데이터 패킷의 제2 동작 코어는 제2 코어로 설정되고, 제2 세션의 데이터 패킷의 제2 동작 코어는 상기 제1 세션과 달리 제3 코어로 설정될 수 있다. 다양한 실시예에 따라, 제3 세션의 데 이터 패킷의 제1 동작 코어 및 제2 동작 코어는 제4 코어로 설정될 수 있다. 다양한 실시예에 따라, 도 11b를 참조하면, 제4 코어가 오프라인 상태가 되어 가용하지 않은 상태가 되면, 상기 제4 코어에 할당된 제3 세션은 상대적으로 우선 순위가 높으므로 동일한 클러스터 내의 다른 코어인 제3 코어로 변경하여 할당될 수 있다. 상기 제3 코어의 제2 동작 코어에 제2 세션과 제3 세션이 중복 되므로, 상대적으로 우선 순위가 낮은 제2 세션의 제2 동작 코어를 제3 코어에서 제2 코어로 변경시 킬 수 있다. 도 12는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 12를 참조하면, 컨트 롤러는 메타 정보를 확인할 수 있으며, 상기 메타 정보 확인 결과 CP의 논리 버퍼 개수가 직전의 메 타 정보와 상이한 경우, 컨트롤러는 각 동작 코어에 할당된 패킷들의 패킷 병합 정도를 임계 시간 및/또는 임계 패킷 수 동안 임계 수준 이상으로 증가시킬 수 있다. 예컨대, 도 12를 참조하면, 상기 컨트롤러는 상기 제1 세션에 대한 패킷 병합 모듈을 제1 코어 에 의해 처리할 때, 제2 세션에 의해 논리 버퍼 2가 생성됨에 따라 패킷 병합 모듈의 패킷 병합 정도를 임 계 시간 및/또는 임계 패킷 수 동안 임계 수준 이상으로 증가시킬 수 있다. 상기 제1 세션에 대한 패킷 병합 정 보를 조정함으로써 제2 세션에 대한 제2 동작 코어의 할당 및 제1 세션에 대한 제2 동작 코어의 이동 시간을 확 보할 수 있으며, 이에 따라 제1 세션의 제2 동작 코어 이동에 따른 오류 발생을 방지할 수 있다. 도 13은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 13을 참조하면, 전자 장치는 동작 1310에서 컨트롤러 이벤트 핸들러(controller event handler)를 시작할 수 있다. 전자 장치의 컨트롤러는 동작 1320에서 수신 논리 버퍼의 개수가 변경되었는지 확인할 수 있다. 상기 동작 1320의 확인 결과, 수신 논리 버퍼의 개수가 변경되지 않은 경우(동작 1320-아니오), 동작 1360에서 컨트롤러 이벤트 핸들러를 종료시킬 수 있다. 상기 동작 1320의 확인 결과, 수신 논리 버퍼의 개수가 변경된 경우(동작 1320-예), 도 12에서 상술한 바와 같이 동작 1330에서 임계 패킷 및/또는 임계 시간 동안 이 전 수신된 패킷들의 병합 수준의 임계값을 가중시킬 수 있다. 다양한 실시예에 따라, 전자 장치의 컨트롤러는 동작 1340에서 각 그룹별 제1 동작 코어를 신규 할당 하고, 이전 그룹의 동작 코어를 갱신할 수 있다. 컨트롤러는 도 12에 도시된 바와 같이 동작 1350에서 각 그룹별 제2 동작 코어를 신규 할당하고, 이전 그룹의 동작 코어를 갱신할 수 있다. 상기 제1 동작 코어 및 제2 동작 코어에 대한 신규 할당 및 갱신이 완료되면, 동작 1360에서 컨트롤러 이벤트 핸들러는 종료될 수 있다. 도 14는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 다양한 실시예에 따라, 전자 장치의 매핑 모듈에서 CP로부터 수신된 메타 정보의 확인 결과, 논리 버퍼에 저장된 패킷 의 수가 임계 값 이상인 경우 및/또는 해당 논리 버퍼에 삽입된 패킷의 세션 수가 임계 값 이하인 경우, 해당 세션의 패킷 병합 수준에 대한 임계 값을 가중시킬 수 있다. 도 14를 참조하면, 필터는 수신된 제1 세션의 데이터 패킷을 논리 버퍼 2에 저장할 수 있다. 컨트롤러 는 상기 제1 세션을 제2 그룹에 매핑할 수 있다. 상기 컨트롤러는 상기 제2 그룹에 대한 제1 동작 코 어 및 제2 동작 코어로서 제4 코어를 할당할 수 있다. 다양한 실시예에 따라, 상기 논리 버퍼 2에 저장된 제1 세션의 데이터 패킷의 개수가 임계값 이상이거나, 상기 CP의 논리 버퍼에 저장된 세션의 수가 임계값 이하인 경우(예컨대, 도 14에서는 세션이 하나인 경우), 컨트롤러는 상기 제4 코어에 대응하는 버퍼 에 저장되어 패킷 병합 모듈에서 처리되는 상기 제1 세션의 패킷 병합 수준의 임계값을 가중시킬 수 있다. 상기 제1 세션의 패킷 병합 수준의 임계값을 가중시킴에 따라, 컨트롤러는 상기 제1 세션에 매핑된 제2 그룹의 제2 동작 코어를 제4 코어에서 제3 코어로 변경시킬 수 있다. 상기 제1 세션에 대한 패킷병합 모듈의 패킷 병합 수준을 조정함으로써 제1 세션에 대한 제2 동작 코어의 이동 시간을 확보할 수 있 으며, 이에 따라 제1 세션의 제2 동작 코어 이동에 따른 오류 발생을 방지할 수 있다. 도 15는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 15를 참조하면, 전자 장치의 컨트롤러는 동작 1510에서 모니터링을 시작할 수 있다. 다양한 실시예에 따라, 컨트롤러는 매핑 모듈로부터 수신된 메타 정보를 확인할 수 있다. 예컨대, 컨트롤러는 동 작 1520에서 상기 메타 정보에 기반하여 각 수신 논리 버퍼의 패킷 수를 판단할 수 있으며, 동작 1530에서 각 수신 논리 버퍼에 삽입된 세션 수를 판단할 수 있으며, 동작 1540에서 관련 세션의 시간당 패킷 처리량을 판단 할 수 있다. 다양한 실시예에 따라, 상기 확인 결과 설정된 조건을 만족하면(예컨대, 수신 논리 버퍼에 저장된 패킷이 임계 값 이상인 경우 및/또는 해당 수신 논리 버퍼에 삽입된 패킷의 세션 수가 임계 값 이하인 경우), 상기 컨트롤러 는 동작 1550에서 해당 세션의 패킷 병합 수준에 대한 임계 값을 가중시킬 수 있다. 상기 제1 세션의 패킷 병합 수준의 임계값을 가중시킴에 따라, 도 14에 예시된 바와 같이 컨트롤러는 상기 제1 세션에 매핑된 제 2 그룹의 제2 동작 코어를 제4 코어에서 제3 코어로 변경시킬 수 있다. 도 16은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 16을 참조하면, CP의 필터는 제1 세션의 데이터 패킷 및 제2 세션의 데이터 패킷을 논리 버퍼 1에 저장하고, 제3 세 션의 데이터 패킷은 논리 버퍼 2에 저장할 수 있다. 다양한 실시예에 따라, 제1 세션의 데이터 패킷 및 제2 세 션의 데이터 패킷의 제1 동작 코어는 동일한 제1 코어로 설정될 수 있다. 다양한 실시예에 따라, 제1 세션 의 데이터 패킷의 제2 동작 코어는 제2 코어로 설정되고, 제2 세션의 데이터 패킷의 제2 동작 코어는 상기 제1 세션과 달리 제3 코어로 설정될 수 있다. 다양한 실시예에 따라, 제3 세션의 데이터 패킷의 제1 동작 코어 및 제2 동작 코어는 제4 코어로 설정될 수 있다. 다양한 실시예에 따라, 어플리케이션 또는 클라우드에서는 서비스 또는 앱에 대한 이벤트(예: 실행, 삭제, 또는 정보 갱신)가 발생하거나, 해당 서비스 또는 앱의 소캣(socket)에 대한 이벤트(예: 실행, 삭제, 또 는 정보 갱신 요청)가 발생할 수 있다. 상기 컨트롤러는 상기 어플리케이션 또는 클라우드로부 터 서비스 또는 앱에 대한 이벤트를 수신하거나, 해당 서비스 또는 앱의 소켓에 대한 이벤트를 수신하면, 상기 수신된 이벤트에 기반하여 해당 소켓의 IP 또는 포트(port), 그룹 정보를 데이터베이스에서 갱신할 수 있 다. 컨트롤러는 상기 데이터베이스에 갱신된 정보에 기반하여 세션별 그룹 정보를 CP의 필터 에 전달할 수 있다. CP의 수신 버퍼가 비워지고, 상기 컨트롤러로부터 수신된 세션별 그룹 정보 에 의해 그룹의 수가 갱신되면, 상기 갱신된 그룹 수에 대응하는 논리 버퍼가 생성될 수 있다. 도 17은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 17을 참조하면, 전자 장치는 동작 1710에서 컨트롤러 업데이트 이벤트 발생을 감지할 수 있다. 다양한 실시예에 따라, 상기 컨트롤러 업데이트 이벤트는 어플리케이션 또는 프로세스의 실행, 어플리케이션 또는 플랫폼에서 컨 트롤러로 이벤트 호출, MEC 서버로부터 특정 정보 수신, URSP 정책의 변경, 매핑 모듈 핸들러에서의 이벤 트 발생을 포함할 수 있다. 다양한 실시예에 따라, 전자 장치의 컨트롤러는 동작 1720에서 발생한 이벤트를 판단하고, 동작 1730 에서 도 16에서 전술한 바와 같이 데이터베이스를 갱신할 수 있다. 다양한 실시예에 따라, 동작 1740에서 변경된 내용과 관련된 소켓이 존재하는 것으로 판단되면(동작 1740-예), 전자 장치의 컨트롤러는 동 작 1750에서 그룹 갱신을 위해 필터로 변경된 세션별 그룹 정보를 전달함으로써 그룹 필터가 갱신될 수 있 다. 상기 그룹 필터가 갱신 처리되면, 동작 1760에서 이벤트 처리가 종료될 수 있다. 상기 동작 1740에서 변경 된 내용과 관련된 소켓이 존재하지 않는 것으로 판단되면(동작 1740-아니오), 동작 1760에서 이벤트 처리가 종 료될 수 있다. 도 18은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 18을 참조하면, 전자 장치는 동작 1810에서 소켓 이벤트 발생을 감지할 수 있다. 다양한 실시예에 따라, 상기 소켓 이벤트는 소켓의 열림(open) 또는 닫힘(close), 특정 프로토콜의 패킷 수신을 포함할 수 있다. 다양한 실시예에 따라, 전자 장치의 컨트롤러는 동작 1820에서 발생한 소켓 이벤트를 판단하고, 동작 1830에서 해당 소켓 주소를 이용하여 데이터베이스 관련 정보를 판단할 수 있다. 전자 장치의 컨트롤러 는 상기 데이터베이스 관련 정보 판단 결과, 동작 1840에서 그룹 필터의 갱신이 필요하다고 판단되면(동작 1840-예), 전자 장치의 컨트롤러는 동작 1850에서 그룹 갱신을 위해 필터로 변경된 세션별 그룹정보를 전달함으로써 그룹 필터가 갱신될 수 있다. 상기 그룹 필터가 갱신 처리되면, 동작 1860에서 이벤트 처 리가 종료될 수 있다. 상기 동작 1840에서 그룹 필터의 갱신이 필요하지 않다고 판단되면(동작 1840-아니오), 동작 1860에서 이벤트 처리가 종료될 수 있다. 다양한 실시예에 따라, 상기 데이터베이스는 앱 관리 테이블, 그룹 매핑 테이블, 세션 관리 테이블을 저장 할 수 있다. 다양한 실시예에 따라, 상기 앱 관리 테이블은 다음과 같이 관리될 수 있다. - 앱이 단말에 설치되었을 때. 앱 관리 테이블에서 해당 앱과 정보를 추가 - 앱이 단말에서 삭제 되었을 때, 앱 관리 테이블에서 해당 앱과 정보를 삭제 다양한 실시예에 따라, 상기 앱 관리 테이블에 앱 정보 추가 시 그룹 정의 방법은 미리 정의된 앱과 그룹의 매 핑 정보에 따라 할당되거나, 미리 정의된 메타정보 및 그룹의 매핑 정보에 따라 할당되거나 기본 값으로 할당될 수 있다. 상기 앱의 메타 정보 값은 운영 제제의 \"Manifest\" 정보, 앱 마켓에서 제공하는 앱의 메타 정보, 또는 사전에 정의된 앱 및 메타 정보의 매핑 정보로부터 획득할 수 있다. 다양한 실시예에 따라, 상기 앱 관리 테이블은 하기 <표 1>과 같은 형태로 관리될 수 있다. 표 1 앱 명 앱/서비스 ID 그룹 com.samXX.app1 10340 1 com.samXX.app6 10500 2 다양한 실시예에 따라, 상기 그룹 매핑 테이블은 하기 <표 2>와 같은 형태로 관리될 수 있다. 표 2 앱 명 그룹 com.samXX.app1 1 com.samXX.app6 2 다양한 실시예에 따라, 카테고리 및 그룹의 매핑 테이블은 하기 <표 3>과 같은 형태로 관리될 수 있다. 표 3 메타 정보 그룹 게임 1 VOIP 2 다양한 실시예에 따라, 세션 관리 테이블은 하기 <표 4>와 같은 형태로 관리될 수 있다. 표 4 Flow ID 앱/서비스 ID 그룹 프로토콜 Srcip address 00001 10340 1 TCP 192.168.0.1 00002 10340 1 UDP 192.168.0.1 00003 10400 1 VoIP 192.168.0.1 00004 10500 0 TCP 192.168.0.2 다양한 실시예에 따라, 세션 정보는 세션 관리 테이블에 없는 세션의 첫 수신 패킷 시 또는 첫 송신 패킷 발생 시 생성될 수 있다. 다양한 실시예에 따라, 세션이 임계 시간 이상 통신하지 않는 경우, 세션의 소켓이 닫히게 된 경우, 세션의 앱/서비스가 삭제된 경우, 세션의 인터페이스가 삭제되거나 변경된 경우 세션 정보는 삭제될 수 있다. 다양한 실시예에 따라, 세션의 인터페이스가 변경된 경우, 세션의 앱/서비스의 그룹이 변경된 경우,세션의 프로토콜에 대한 그룹이 변경된 경우, 컨트롤러가 세션의 그룹을 변경하는 경우 세션 정보가 변경될 수 있다. 다양한 실시예에 따라, 신규 세션 정보의 그룹은 다음과 같이 할당될 수 있다. - 앱 관리 테이블의 앱 및 그룹의 매핑 정보에 기반하여 할당 - 사전에 정의된 프로토콜 및 그룹의 매핑 정보에 기반하여 할당 - 인터페이스 주소 및 그룹의 매핑 정보에 기반하여 할당 - 기본 값으로 할당 다양한 실시예에 따라, 세션 정보는 <표 4>의 플로우 ID(flow ID)로 지칭될 수 있으며, 접속(connection)의 정 보에 기반하여 생성될 수 있다. 예컨대, 상기 세션 정보는, 소스 IP 주소(source IP address), 소스 포트 (source port), 목적지 IP 주소(destination IP address), 목적지 포트(destination port), IP 프로토콜(IP protocol) 중 적어도 하나를 해싱함으로써 생성될 수 있다. 다양한 실시예에 따라, 세션에 상이한 정책에 따라 상이한 그룹 적용이 요청될 때 세션의 그룹 적용 요청의 우 선순위에 따라 적용되거나 임의의 요청의 그룹을 적용할 수 있다. 예컨대, 세션의 그룹 적용 요청의 우선 순위 는 사전에 정의된 우선 순위, 요청의 시간 순서(예: 오래된 순서, 최신 순서), 임의의 우선 순위, 요청의 조합 에 따라 사전에 정의된 우선 순위를 포함할 수 있다. 다양한 실시예에 따라, 세션에 적용된 그룹이 해제될 때 세션의 그룹을 갱신하는 방식은 우선 순위에 따라 적용 된 경우 차 순위의 그룹을 적용할 수 있으며, 기본 그룹으로 적용하여 초기화하거나, 중복 적용 그룹 중 임의의 그룹을 적용할 수 있다. 다양한 실시예에 따라, 그룹별 CPU 매핑 테이블은 하기 <표 5>와 같이 나타낼 수 있으며, 그룹 별 병합 수준 가 중치 테이블은 하기 <표 6>과 같이 나타낼 수 있으며, 세션 패킷 관리 테이블은 하기 <표 7>과 같이 나타낼 수 있으며, 가용 코어 및 그룹 수준 별 정적 정책 테이블은 하기 <표 8>과 같이 나타낼 수 있다. 표 5 그룹 제1 동작 코어 마스크 제2 동작 코어 마스크 0 0x01(1000|0000) 0x22(0100|0100) 1 0x10(0000|1000) 0x44(0010|0010) 표 6 QoS 클래스 병합 수준 가중치 0 10 1 1 표 7 Flow ID 제1 동작 코어 번호 제2 동작 코어 번호 단위 시간당 패킷 처리량병합 수준 00001 4 6 200 2 00002 4 2 10,000 4 00003 4 6 5,000 2 00004 1 5 200,000 MAX표 8 가용 코어 그룹 수 정책 1 (그룹 별 코어 매핑 테이블 번호) 8 4개 이상 1 8 3 2 도 19는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 19를 참조하면, 전자 장치가 MEC(mobile edge computing) 서비스 앱 또는 MEC 서비스 IP를 컨트롤러에 지원하는 경우 컨트롤러 는 상기 MEC서비스 정보에 기반하여 그룹을 결정할 수 있다. 다양한 실시예에 따라, AP는 메모리에 저장된 운영체제, 미들웨어, 서비스의 프레임워크 중 적어도 하나를 통해 MEC 제어 서버와 통신을 할 수 있으며, 상기 AP는 상기 MEC 제어 서버와 통신하여 MEC 서비스 정보를 확인할 수 있다. 다양한 실시예에 따라, 상기 MEC 서비스 정보는 MEC 서비스 어플리케이션 명칭, MEC 서 비스 FQDN(full qualified domain name), MEC 서비스 IP 주소, 지정된 어플리케이션의 MEC 서비스 여부, 지정 된 IP 주소의 MEC 서비스 여부, 또는 지정된 FQDN 의 IP 주소를 포함할 수 있다. 다양한 실시예에 따라, 컨트롤 러는 상기 MEC 서비스 정보를 확인하고 데이터베이스를 통해 관리할 수 있다. 상기 컨트롤러는 상기 데이터베이스에 저장된 MEC 서비스 정보에 기반하여 그룹을 결정할 수 있다. 도 20은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 20을 참조하면, 전자 장치의 AP는 도 19에서 전술한 바와 같이 동작 2010에서 MEC 서버를 통해 MEC 서비스 정보를 확인하고 갱신할 수 있다. 다양한 실시예에 따라, 컨트롤러는 동작 2020에서 상기 MEC 서비스 정보 가 갱신된 것을 확인하고, 데이터베이스에 상기 MEC 서비스 관련 정보를 갱신할 수 있다. 컨트롤러는 동작 2040에서 상기 데이터베이스에 저장된 MEC 관련 정보에 기반하여 CP의 필터로 그룹 갱신 정보를 전달할 수 있다. 다양한 실시예에 따라, 상기 AP가 MEC 제어 서버로부터 수신하는 MEC 서비스 정보로서 MEC 서비스 앱 리스 트는 하기 <표 9>와 같이 데이터베이스에 저장될 수 있으며, MEC 서비스 정보는 하기 <표 10>과 같이 데이 터베이스에 저장될 수 있다. 표 9 앱 FQDN 메타 정보(카테고리, 우선 순위) com.samXX.app1 s1.domain.com 클라우드 게임, 1 com.samXX.app2 s2.domain.com 영상 스트리밍, 2 표 10 요청 FQDN 응답 IP s1.domain.com Ff:ff:ff:ff:ff:ff s3.domain.com - 다양한 실시예에 따라, AP는 MEC 정보 변경 시, 변경된 MEC 정보를 직접 데이터베이스에 저장하고 컨 트롤러에 변경 내용을 전달할 수 있다. 상기 AP는 상기 MEC 정보 변경 시, 컨트롤러에 이벤트를 발생시켜 컨트롤러가 데이터베이스 내의 MEC 정보 변경 내용을 확인하도록 할 수 있다. 다른 실시예 로서, 컨트롤러는 주기적으로 데이터베이스 내의 MEC 정보 변경 내용을 확인하도록 동작할 수도 있다. 다양한 실시예에 따라, MEC 정보 변경 시, 컨트롤러는 MEC 서비스 앱 리스트에 포함된 메타 정보에 기반하 여 앱 관리 테이블에 앱과 그룹을 정의할 수 있다. 상기 메타 정보는 카테고리, 명시된 그룹 정보를 포함할 수 있다. 상기 메타 정보에 기반하여 그룹을 정의하는 방법은 임의로 할당하거나 미리 정의된 메타 정보 및 그룹 매핑 정보에 기반하여 할당할 수 있다. 다양한 실시예에 따라, MEC 서비스 앱 리스트에서 MEC 정보가 삭제된 경 우, 컨트롤러는 임의 할당 방법, 기본값으로 할당하는 방법, 중복 적용 시 우선 순위에 기반하여 차 순위그룹을 적용하는 방법에 의해 앱 관리 테이블에서 앱과 그룹 정보를 갱신할 수 있다. 다양한 실시예에 따라, MEC 정보 변경 시, 컨트롤러는 갱신된 앱 관리 테이블을 기준으로 세션의 그룹을 갱신하거나, MEC 제어 서버로부터 수신된 MEC 서비스 정보에 기반하여 다음과 같은 방법으로 세션의 그룹을 갱 신할 수 있다. - 갱신된 MEC 서비스 앱 리스트를 기반으로 앱 관리 테이블을 갱신하고, 갱신된 앱 관리 테이블을 기준으로 세 션 관리 테이블에 세션을 갱신 - MEC 서비스 FQDN을 기반으로 해당 앱의 그룹을 결정하여 앱 관리 테이블을 갱신하고, 갱신된 앱 관리 테이블 을 기준으로 세션 관리 테이블에 세션을 갱신 - MEC 서비스 IP를 기반으로 해당 세션을 세션 관리 테이블에서 갱신 - MEC 서비스 여부 정보를 기반으로 앱 관리 테이블을 갱신하고, 갱신된 앱 관리 테이블을 기준으로 세션 관리 테이블에 세션을 갱신 - FQDN의 쿼리(query) 의 IP 를 기준으로 세션을 세션 관리 테이블에서 갱신 도 21은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 21을 참조하면, 전자 장치의 AP의 어플리케이션은 CP로부터 URSP 정책(URSP rule)을 수신할 수 있다. 예컨대, 어플리케이션은 CP로부터 수신된 URSP 정책을 해석하고 관리할 수 있다. 상기 어플리케이션은 상기 CP로부터 수신된 URSP 정책에 따라 특정 앱의 소켓을 특정 인터페이스에 할당할 수 있다. 상기 인터 페이스 할당 정보는 컨트롤러에 제공될 수 있다. 상기 컨트롤러는 상기 인터페이스 할당 정보를 데이 터베이스에 저장 및 관리할 수 있다. 상기 컨트롤러는 상기 데이터베이스에 저장된 인터페이스 할당 정보에 기반하여 세션별 그룹 정보를 생성하여 CP의 필터에 전달할 수 있다. 도 22는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 22를 참조하면, 다양한 실시예에 따라 AP는 동작 2210에서 CP로부터 URSP 규칙을 수신할 수 있다. AP(12 0)는 동작 2220에서 URSP 규칙에 따라 인터페이스를 생성할 수 있다. 다양한 실시예에 따라, 컨트롤러는 동작 2230에서 상기 새로운 인터페이스의 생성을 확인하고, 동작 2240에서 데이터베이스에 인터페이스 정 보 갱신이 필요한 지 여부를 판단할 수 있다. 상기 동작 2240의 판단 결과, 데이터베이스에 인터페이스 정보 갱 신이 필요하다고 판단되는 경우(동작 2240-예), 컨트롤러는 동작 2250에서 데이터베이스에 인터페이스 정 보를 갱신할 수 있다. 다양한 실시예에 따라, 컨트롤러는 동작 2250에서 상기 인터페이스 정보가 갱신된 것을 확인하고, 동작 2260에서 상기 데이터베이스에 저장된 인터페이스 갱신 정보에 기반하여 CP의 필터로 그룹 갱신 정보를 전달할 수 있다. 상기 동작 2240의 판단 결과, 데이터베이스에 인터페이스 정보 갱신이 필요하지 판단되는 경우(동작 2240-아니오), CP의 필터로 그룹 갱신 정보를 전달하지 않고 종 료할 수 있다. 다양한 실시예에 따라, 컨트롤러는 인터페이스 변경을 모니터링 할 수 있다. 예컨대, AP에서 인터페 이스 변경 명령 시, 컨트롤러에 명령 결과를 전달할 수 있다. 다른 실시예로서, 컨트롤러가 주기적으 로 인터페이스의 상태를 확인하도록 동작할 수도 있다. 다양한 실시예에 따라, 컨트롤러는 데이터베이스 에서 인터페이스 목록에 변경사항이 있는지 확인하거나, 갱신된 인터페이스 중, 인터페이스 이름에 사전 정의된 키워드가 포함되어 있는지 확인하거나, AP에서 컨트롤러에 갱신된 인터페이스 명이나 IP를 알 려주었는지 확인하거나, 미리 정의된 IP로 할당된 인터페이스가 생성되거나 삭제되었는지 확인함으로써 인터페 이스 정보 갱신 필요 여부를 판단할 수 있다. 상기 데이터베이스에 저장 및 관리되는 인터페이스 관리 테 이블은 하기 <표 11>과 같이 구성될 수 있다. 표 11 인터페이스 명 인터페이스 주소 그룹 Rmnet0 1.1.1.1 1.1.1.21 urllc-rmnet0 Ffff:ffff:ffff:ffff 2 embb-rmnet1 1.1.1.3 3다양한 실시예에 따라, 컨트롤러는 갱신이 필요한 인터페이스와 할당된 IP에 새로운 그룹을 할당하고, 데 이터베이스에 상기 <표 11>과 같이 인터페이스 관리 테이블로 저장할 수 있다. 다양한 실시예에 따라, 컨 트롤러는 상기 인터페이스에 기반하여 그룹을 임의 할당하거나, 기존에 정의되어 있지 않은 새로운 그룹을 할당하거나, 미리 정의된 인터페이스 및 그룹의 매핑 정보에 기반하여 그룹을 할당할 수 있다. 예컨대, 컨트롤 러는 기존 소켓 중에서 해당 인터페이스를 사용하거나 IP 주소를 주소로 사용하는 경우 해당 소켓의 그룹 을 해당 인터페이스의 그룹 주소로 갱신할 수 있다. 도 23은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 23을 참조하면, 다양한 실시예에 따라, AP는 동작 2310에서 새로운 인터페이스를 생성할 수 있다. 다양한 실시 예에 따라, 컨트롤러는 동작 2320에서 상기 새로운 인터페이스의 생성을 확인하고, 동작 2330에서 새로 생 성된 인터페이스가 URLLC 관련 인터페이스인지 여부를 판단할 수 있다. 상기 동작 2330의 판단 결과, 새로 생성 된 인터페이스가 URLLC 관련 인터페이스로 확인된 경우(동작 2330-예), 컨트롤러는 동작 2340에서 데이터 베이스에 인터페이스 정보를 갱신할 수 있다. 다양한 실시예에 따라, 컨트롤러는 동작 2340에서 상기 인터 페이스 정보가 갱신된 것을 확인하고, 동작 2350에서 상기 데이터베이스에 저장된 인터페이스 갱신 정보에 기반하여 CP의 필터로 그룹 갱신 정보를 전달할 수 있다. 상기 동작 2330의 판단 결과, 데이터베이스 에 인터페이스 정보 갱신이 필요하지 판단되는 경우(동작 2330-아니오), CP의 필터로 그룹 갱신 정보 를 전달하지 않고 종료할 수 있다. 다양한 실시예에 따라, AP에서 인터페이스 변경 명령 시, 컨트롤러에 명령 결과 전달함으로써 컨트롤 러는 인터페이스 변경 여부를 확인할 수 있다. 다른 방법으로서, 컨트롤러는 주기적으로 인터페이스 상태를 확인할 수 있다. 상기 컨트롤러는 인터페이스 이름에 미리 정의된 키워드(예: urllc, urllc- rmnet0)가 포함되어 있는지 여부를 통해 URLLC 관련 인터페이스 여부를 확인할 수 있다. 다양한 실시예에 따라, AP에서 컨트롤러에 URLLC 용 인터페이스 명 또는 IP를 통지함으로써 컨트롤러는 URLLC관련 인터 페이스 여부를 확인할 수 있다. 다양한 실시예에 따라, 컨트롤러는 미리 정의된 IP로 할당된 인터페이스인 지 여부를 통해 URLLC관련 인터페이스 여부를 확인할 수 있다. 다양한 실시예에 따라, 컨트롤러는 URLLC 인터페이스와 할당된 IP에 새로운 그룹 ID를 할당하고 데이터베 이스에 저장할 수 있다. 컨트롤러는 기존 소켓 중에서 해당 인터페이스를 사용하거나 IP 주소를 주소 로 사용하는 경우 해당 소켓의 그룹을 해당 인터페이스의 그룹 주소로 갱신할 수 있다. 상기 데이터베이스(42 0)에 저장 및 관리되는 URLLC 관련 인터페이스의 새로운 그룹 ID가 할당된 테이블은 하기 <표 12>와 같이 구성 될 수 있다. 표 12 인터페이스 명 IP 주소 그룹 rmnet0 192.168.0.1 1 urllc-rmnet0 192.168.0.2 2 예컨대, 데이터베이스에 저장된 URLLC 관련 소켓의 테이블은 하기 <표 13>에서 하기 <표 14>의 테이블로 갱신될 수 있다. 표 13 Flow ID 앱/서비스 ID 그룹 프로토콜 Src ip address 00001 10340 1 TCP 192.168.0.1 00002 10340 1 UDP 192.168.0.1 ... 00004 10500 1 TCP 192.168.0.2 표 14 Flow ID 앱/서비스 ID 그룹 프로토콜 Src ip address 00001 10340 1 TCP 192.168.0.100002 10340 1 UDP 192.168.0.1 ... 00004 10500 2 TCP 192.168.0.2 도 24a 및 도 24b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 24a를 참 조하면, 제1 세션, 제2 세션 및 제3 세션은 제2 그룹에 대응하는 논리 버퍼 2에 저장될 수 있다. 상기 제1 세션 의 데이터 패킷, 제2 세션의 데이터 패킷 및 제3 세션의 데이터 패킷은 제1 동작 코어로서 제4 코어가 할 당될 수 있다. 상기 제1 세션의 데이터 패킷은 제2 동작 코어로서 제2 코어가 할당될 수 있으며, 상기 제2 세션의 데이터 패킷 및 제3 세션의 데이터 패킷은 제2 동작 코어로서 제3 코어가 할당될 수 있다. 다양한 실시예에 따라, 매핑 모듈에서 CP로부터 수신한 메타 정보를 기반으로 수신 논리 버퍼의 패 킷이 임계 값 이상인 경우 또는 해당 수신 논리 버퍼에 삽입된 패킷의 세션 수가 임계 값 이상인 경우, 컨트롤 러는 패킷 병합 모듈에서 각 세션의 시간당 패킷 처리량에 기초하여, CP의 필터로 추가 그 룹의 갱신을 요청할 수 있다. 다양한 실시예에 따라, CP는 도 24b에 도시된 바와 같이 논리 버퍼 3을 생성 하여 해당 세션(예컨대, 제3 세션)의 데이터 패킷이 별도의 코어에서 처리되도록 할 수 있다. 예컨대, 도 24b에 도시된 바와 같이 제1 세션의 데이터 패킷 및 제2 세션의 데이터 패킷은 새로 생성된 논리 버퍼 3에 저장될 수 있다. 상기 제3 세션의 데이터 패킷은 기존 논리 버퍼 2에 그대로 저장될 수 있다. 다양한 실시예에 따라, 상기 논리 버퍼 2에 저장된 제3 세션은 제1 동작 코어 및 제2 동작 코어로서 제3 코어를 할당받을 수 있다. 상 기 제1 세션의 데이터 패킷 및 제2 세션의 데이터 패킷은 제1 동작 코어로서 제4 코어를 할당받을 수 있다. 상기 제1 세션의 데이터 패킷은 제2 동작 코어로서 제2 코어를 할당받을 수 있으며, 제2 세션의 데 이터 패킷은 제2 동작 코어로서 제1 코어를 할당받을 수 있다. 도 25는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 25를 참조하면, 다양한 실시예에 따라, 컨트롤러는 동작 2510에서 모니터링을 시작할 수 있다. 상기 컨트롤러 는 동작 2520에서 메타 정보에 기반하여 각 수신 논리 버퍼의 패킷 수 판단할 수 있으며, 동작 2530에서 각 수신 논리버퍼에 삽입된 세션 수를 판단할 수 있으며, 2540에서 관련 세션의 시간당 패킷 처리량 판단할 수 있다. 다양한 실시예에 따라, 상기 컨트롤러는 동작 2550에서 상기 판단한 정보들에 기반하여 해당 수신 논리 버 퍼 필터에서 해당 세션을 제거하고 신규 그룹 필터를 생성할 수 있다. 상기 컨트롤러는 상기 신규 그룹을 생성하도록 CP의 필터에 QoS 클래스 정보를 공유할 수 있다. 도 26은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 26을 참조하면, CP는 메모리 상 쓰기(write) 시작점을 복수로 나누고, 필터에 따라 복수의 오프셋(offset)을 기준으로 데 이터를 할당할 수 있다. CP는 AP에 링 버퍼(ring buffer)와 함께 메타 정보(또는 메타 데이터)를 함 께 전달하고, AP는 상기 전달된 메타 정보에 기반하여 수신된 데이터 패킷들을 복수의 동작 코어들(441, 442, 443, 444)로 맵핑할 수 있다. 예컨대, 필터는 A 세션의 데이터 패킷을 수신하고, 상기 수신된 데이터 패킷을 수신 버퍼 상에서 기 저장된 A 세션의 데이터 패킷 다음 위치에 저장할 수 있다. 상기 필터 는 B 세션의 데이터 패킷을 수신하고, 상기 수신된 데이터 패킷을 수신 버퍼 상에서 기 저장된 B 세션의 데이터 패킷 다음 위치에 저장할 수 있다. 상기 CP는 한 번의 물리적 인터럽트(physical interrupt(top half))를 활용하여 복수의 소프트웨어 인터럽트(bottom half) 병렬 처리할 수 있다. 다양한 실시 예에 따라, CP는 수신한 각 프레임의 크기와 메타 정보를 활용하여 플로우 ID(또는 세션 ID를 생성할 수 있다.) 예컨대, 도 26에 도시된 바와 같이 A는 메타 정보 A와 프레임 크기 15 bytes를 나타낼 수 있다. CP는 별도의 하드웨어나 CP 내부 리소스를 활용하여 프레임의 메타 정보를 기반으로 플로우 ID를 생성할 수 있다. 상기 CP가 활용하는 정보는 소스 IP 주소(source IP address), 소스 포트(source port), 목적지 IP 주소(destination IP address), 목적지 포트(destination port), IP 프로토콜(IP protocol) 중 적어도 하나 를 포함할 수 있다. 상기 CP는 전술한 AP에서의 플로우 ID 또는 세션 ID를 생성하는 방법과 동일 또 는 유사한 방법으로 플로우 ID 또는 세션 ID를 생성할 수 있다. 다양한 실시예에 따라, CP는 수신한 프레임의 플로우 ID를 기준으로 플로우 ID 및 그룹의 매핑 정보(또는 세션 ID 및 그룹의 매핑 정보) 활용하여 수신 버퍼를 결정할 수 있다. 해당 테이블에 없는 프레임은 임의의 그 룹으로 설정하거나, 사전에 정의된 기본 그룹을 설정할 수 있다. 상기 CP는 상기 결정된 수신 버퍼의 위치 에 해당 프레임 데이터를 위치시킨 후 버퍼의 상태를 갱신할 수 있다. 예컨대, CP는 수신한 프레임을 버퍼에 위치시킬 때, 버퍼에 삽입된 패킷의 수와, 삽입된 세션의 수를 갱신할 수 있다. 상기 CP가 AP로 현재 버퍼를 전달할 때 버퍼 메모리 정보를 메타 정보로 AP에 전달할 수 있다. 다양한 실시예에 따라, 상 기 메타 정보는 버퍼 번호, 버퍼의 시작 위치, 버퍼의 끝 위치, 버퍼의 패킷 수, 버퍼의 세션 수 중 적어도 하 나를 포함할 수 있다. 상기 CP가 AP로 버퍼와 메타 정보를 전달하면, CP는 버퍼 정보를 초기화 할 수 있다. 도 27a 및 도 27b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 27a를 참 조하면, CPU0에서 제1 세션 및 제2 세션에 대한 패킷 분배 및 병합 처리를 수행하는 경우, 제2 세션에 대한 스 택 처리는 최소 270μs에서 최대 730μs가 소요될 수 있다. 예컨대, 제1 세션에 대한 패킷 분배 및 병합 처리 및 제2 세션(예: 저지연 서비스와 관련된 세션)에 대한 패킷 분배 및 병합 처리는 CPU0(예: 제1 코어)에서 수행될 수 있다. 상기 제1 세션에 대한 네트워크 스택 처리는 CPU1(예: 제2 코어)에서 수행될 수 있다. 상기 제2 세션에 대한 네트워크 스택 처리는 2704a와 같이 CPU1에서 제1 세션에 대한 네트워크 스택 처리가 완료된 후에 처리되거나, 2704b와 같이 CPU2(예: 제3 코어)를 통해 병렬적으로 처리될 수 있다. 상기 제2 세션에 대한 네트워크 스택 처리가 2704a와 같이 처리되는 경우, 730μs가 소요될 수 있으며, 2704b와 같이 처리되는 경우 270 μs가 소요될 수 있다. 이와 비교할 때, 도 27b를 참조하면, 전술한 바와 같이 다양한 실시예에 따라 CPU0에서 2711과 같이 제2 세션을 패킷 병합 처리 전 별도 코어에 매핑할 수 있다. 상기 2711과 같이 각 세션에 대한 코어 매핑이 먼저 처리된 후, 제1 세션은 CPU0에서 패킷 병합 처리가 수행되고, CPU1에서 네트워크 스택 처리가 수행될 수 있다. 제2 세션은 CPU4에서 패킷 병합 처리 및 네트워크 스택 처리(2704c)가 수행될 수 있다. 예컨대, 제 2 세션은 패킷을 병합 처리하기 전 CPU0에서 CPU4(예: 제5 코어)로 매핑함으로써 제2 세션에 대한 스택 처리는 60μs가 소요될 수 있다. 상기 제2 세션인 URLLC 서비스와 관련된 세션인 경우 도 27b의 방법에 의해 패킷 처리 에 대한 지연을 감소시킬 수 있다. 도 28a 및 도 28b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 28a를 참 조하면, CPU0에서 제1 세션 및 제2 세션에 대한 패킷 분배 및 병합 처리를 수행하는 경우, 제2 세션에 대한 스 택 처리는 650μs가 소요될 수 있다. 예컨대, 제1 세션에 대한 패킷 분배 및 병합 처리 및 제2 세션(예: 저지연 서비스와 관련된 세션)에 대한 패킷 분배 및 병합 처리는 CPU0(예: 제1 코어)에서 수행될 수 있다. 상기 제1 세션에 대한 네트워크 스택 처리(2803a, 2803b, 2803c)는 CPU1, CPU2, CPU3에서 분산 처리될 수 있다. 상기 제2 세션에 대한 네트워크 스택 처리는 2804a, 2804b, 2804c와 같이 각 CPU에서 제1 세션에 대한 네트워크 스택 처리(2803a, 2803b, 2803c)가 완료된 후에 처리될 수 있다. 상기 제2 세션에 대한 네트워크 스택 처리가 2804a, 2804b, 2804c와 같이 처리되는 경우, 650μs가 소요될 수 있다. 이와 비교할 때, 도 28b를 참조하면, 전술한 바와 같이 다양한 실시예에 따라, 2811과 같이 CPU0에서 제2 세션 을 패킷 병합 처리 전 별도 코어에 매핑할 수 있다. 상기 2811과 같이 각 세션에 대한 코어 매핑이 먼저 처리된 후, 제1 세션은 CPU0에서 패킷 병합 처리가 수행되고, CPU1, CPU2, CPU3에서 병렬적으로 네트워크 스택 처리(2803a, 2803b, 2803c)가 수행될 수 있다. 제2 세션은 CPU4에서 패킷 병합 처리 및 네트워크 스택 처리(2804d)가 수행될 수 있다. 예컨대, 제2 세션은 패킷 병합 처리하기 전 CPU0에서 CPU4로 매핑함으로써 제2 세션에 대한 스택 처리는 60μs가 소요될 수 있다. 상기 제2 세션인 URLLC 서비스와 관련된 세션인 경우 도 28b 의 방법에 의해 패킷 처리에 대한 지연을 감소시킬 수 있다. 도 29a 및 도 29b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 29a를 참 조하면, 우선 순위에 따라 각 세션을 처리하는 경우 후순위의 세션은 처리가 지연될 수 있다. 예컨대, 제1 순위 데이터의 버퍼 처리가 완료된 후, 제2 순위 데이터의 버퍼 처리를 완료하고, 상기 제2 순위 데이터 의 버퍼 처리가 완료된 후 제3 순위 데이터의 버퍼 처리이 완료될 수 있다. 이와 비교할 때, 도 29b를 참조하면, 전술한 바와 같이 CPU0에서 패킷을 병합 처리하기 전 각 세션의 데이터 패 킷을 2910과 같이 CPU0에서 CPU1 내지 CPU3으로 매핑함으로써 전체적인 패킷 처리 속도를 향상시킬 수 있다. 예 컨대, 전술한 바와 같이 다양한 실시예에 따라 CPU0에서 2910과 같이 제1 순위 데이터와 제2 순위 데이터와 제3 순위 데이터를 각각 별도 코어에 매핑할 수 있다. 제1 순위 데이터의 버퍼 처리와 제 2 순위 데이터의 버 퍼 처리와 제3 순위 데이터의 버퍼 처리는 각각 CPU1, CPU2, CPU3에서 병렬 처리될 수 있다. 도 30은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 30을 참조하면, 동작 3010에서 CP는 데이터를 수신할 수 있다. 동작 3020에서, 메타 정보가 필터에 대응되는 것 이 존재하는 경우(동작 3020-예), CP의 필터는 동작 3030에서 기본 논리 큐(논리 버퍼)에 데이터를삽입할 수 있다. 동작 3020에서, 메타 정보가 필터에 대응되는 것이 존재하지 않는 경우(동작 3020-아니오), CP의 필터는 동작 3040에서 필터에 기반하여 지정된 논리 큐(논리 버퍼) 번호로 데이터를 삽입할 수 있다. 도 31은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 31을 참조하면, CP는 동작 3110에서 AP로부터 갱신된 필터 정보 수신할 수 있다. 동작 3120에서 갱신할 필 터가 존재하는 것으로 판단하면(동작 3120-예), 동작 3130에서 현재 큐가 비어 있는지 확인할 수 있다. 상기 동 작 3130에서 현재 큐가 비어 있는 것으로 판단하면(동작 3130-예), CP는 동작 3140에서 필터를 갱신하고, 동작 3150에서 현재 필터를 기준으로 데이터를 처리할 수 있다. 동작 3120에서 갱신할 필터가 존재하지 않는 것으로 판단하면(동작 3120-아니오), 동작 3150에서 현재 필터를 기준으로 데이터를 처리할 수 있다. 동작 3130에 서 현재 큐가 비어 있지 않는 것으로 판단하면(동작 3130-아니오), 동작 3150에서 현재 필터를 기준으로 데이터 를 처리할 수 있다. 도 32는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 32를 참조하면, 컨트롤러는 동작 3210에서 필터 갱신을 시작할 수 있다. 동작 3220에서 그룹의 종류 개수가 변 경된 것으로 판단되면(동작 3220-예), 컨트롤러는 동작 3230에서 사전에 정의된 그룹 수 당 각 논리 큐 시 작 주소로 논리 큐 정보를 갱신할 수 있다. 동작 3240에서, 컨트롤러는 CP로 필터 정보 갱신을 요청 할 수 있으며, 동작 3250에서 필터 정보 갱신이 종료될 수 있다. 동작 3220에서 그룹의 종류 개수가 변경되지 않은 것으로 판단되면(동작 3220-아니오), 컨트롤러는 동작 3240에서, 논리 큐 정보의 갱신 없이 CP 로 필터 정보 갱신을 요청할 수 있다. 도 33은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 33을 참조하면, AP는 동작 3310에서 AP 인터럽트 맵 엔진(매핑 모듈) 핸들러를 시작할 수 있다. AP는 동작 3320에서 메타 데이터를 조회하고, 동작 3330에서 그룹별 논리 큐의 개수가 직전과 상이한지 판단할 수 있다. 상기 동작 3330의 판단 결과, 그룹별 논리 큐의 개수가 직전과 상이하지 않으면(동작 3330-아니오), AP는 동작 3340에서 컨트롤러에 논리 큐 개수 변경 이벤트를 전달할 수 있다. 상기 동작 3330의 판단 결과, 그 룹별 논리 큐의 개수가 직전과 상이하면(동작 3330-예), AP는 동작 3350에서 컨트롤러를 통해 데이터 베이스의 그룹별 제1 동작 코어를 조회할 수 있다. 다양한 실시예에 따라, AP는 동작 3360에서 각 그룹 별 논리 큐를 각 그룹 별 제1 동작 코어에 매핑하고, 동작 3370에서 매핑된 각 제1 동작 코어를 활성화시킬 수 있다. 동작 3380에서 AP 인터럽트 핸들러는 종료될 수 있다. 다양한 실시예에 따라, 필터 구조는 하기 <표 15>와 같이 구성될 수 있으며, 논리 큐(수신 버퍼)는 하기 <표 16> 및 <표 17>가 같이 구성될 수 있다. 표 15 플로우 ID 그룹 0001 1 0002 1 표 16 그룹 수신 버퍼 번호 0 0 1 1 표 17 수신 버퍼 번호 시작 주소 오프셋 패킷 수 세션 수 0 0x0000 0x256 2 1 1 0xFFFF 0x0 2 1다양한 실시예에 따라, 수신 버퍼 크기는 CP 또는 AP에서 결정할 수 있다. 예컨대, CP가 내부 정책에 따라 버퍼의 크기를 결정할 수 있다. CP는 미리 정의된 정책 혹은 AP로부터 전달받은 정책에 따라 버퍼의 크기를 결정할 수 있다. 상기 CP에서 참조하는 각 정책은 CP의 버퍼별 통계, 임계 시간 동안 의 각 버퍼 삽입 프레임 수, 임계 시간 동안 수신된 총 프레임 수를 포함할 수 있다. 다양한 실시예에 따라, AP는 각 정책에 따라 CP의 인터페이스를 이용하여 버퍼의 크기를 결정할 수 있다. 예컨대, AP는 CP의 버퍼 별 통계로서 임계 시간 동안의 각 버퍼 삽입 프레임 수, 또는 임계 시 간 동안 수신된 총 프레임 수를 활용할 수 있으며, 세션 별 통계 및 정보로서 임계 시간 동안 수신된 각 세션의 패킷 수 또는 수신된 각 세션의 패킷 수와 각 세션이 할당된 버퍼 환산 시 버퍼 별 수신 패킷 수 또는 앱의 카 테고리 및 카테고리에 할당된 버퍼 크기를 참조할 수 있다. 다양한 실시예에 따라, 상기 미리 정의된 정책은 고정된 크기, 전체 크기 대비 동일 비율, 그룹 별 정의된 크기 또는 비율을 포함할 수 있으며, 상기 방법들의 버퍼 크기를 결정함에 있어서 크기는 절대 크기, 상대적 크기(비 율), 절대적 크기에 대한 상대적 비율, 버퍼의 절대 개수, 버퍼의 상대적 개수, 전체 개수에 대한 상대적 비율 을 포함할 수 있다. 도 34는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 34를 참조하면, CP가 그룹에 대응하는 논리 버퍼의 생성을 지원하지 않는 경우, AP 내에 수신 버퍼(491, 192)를 생성 하여 전술한 실시예들을 구현할 수 있다. 예컨대, AP의 메모리에 적어도 하나의 수신 버퍼(예: 수신 버퍼 A, 수신 버퍼 B)를 생성할 수 있다. AP는 CP에서 전달된 프레임(또는 데이터 패킷)에 대하여 컨트롤러로부터 전달받은 필터에 대응하여, 상기 AP 내의 수신 버퍼(491, 492)에 분류하여 저장할 수 있다. 상기 프레임의 형태는 상기 CP로부터 프레임(또는 데이터 패킷)을 수신하기 위해 상기 AP 내에 구현되는 플랫폼에 따라 CP 에서 수신 데이터를 처리하는 경우와 유사하게 커널에서 패킷을 관리하기 위한 구조체(예: 리눅스 커널의 경우, sk_buff)로 할당하기 전의 형태를 포함할 수 있다. 이후의 동작들에서 전술한 실시예들에서의 AP에서 전 술한 CP를 대체하는 구성은 커널(kernel)의 드라이버 또는 패킷 프로세싱 플랫폼 또는 필터 엔진 중 적어 도 하나에서 동작하는 프로그램으로 구현될 수 있다. 전술한 다양한 실시예들에서는 AP와 CP가 별도의 구성으로 구분하여 설명하고 있으나, 상기 AP 와 CP가 별도의 칩(chip)으로 구성되는 것을 한정하는 것은 아니다. 예컨대, 상기 AP와 CP는 각 각 별도의 칩으로 구성될 수도 있으며, 하나의 칩 내에서 어플리케이션 프로세서와 통신 프로세서가 포함되도록 구성될 수도 있다. 다양한 실시예에 따라, 전술한 실시예들에서, 컨트롤러는 상기 AP 내에 포함될 수 도 있으며, 상기 AP와는 별도의 하드웨어 구성에 포함될 수도 있다. 예컨대, 상기 컨트롤러는 상기 도 1 및 후술하는 도 35의 프로그램 형태로 저장될 수 있으며, 운영 체제(예: AndroidTM, LinuxTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM), 미들 웨어, 또는 어플리케이션 중 어느 하나의 형태로 구현될 수 있다. 도 35는 다양한 실시예에 따른 프로그램을 예시하는 블록도이다. 일실시예에 따르면, 프로그램(14 0)은 전자 장치의 하나 이상의 리소스들을 제어하기 위한 운영 체제, 미들웨어, 또는 상기 운영 체제에서 실행 가능한 어플리케이션을 포함할 수 있다. 운영 체제는, 예를 들면, AndroidTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 프로그램 중 적어도 일부 프로그램은, 예를 들면, 제조 시에 전자 장치에 프리로드되거나, 또는 사용자에 의해 사용 시 외부 전자 장치(예: 전자 장치(102 또는 104), 또는 서버)로부터 다운로드되거나 갱신 될 수 있다. 운영 체제는 전자 장치의 하나 이상의 시스템 리소스들(예: 프로세스, 메모리, 또는 전원)의 관리(예: 할당 또는 회수)를 제어할 수 있다. 운영 체제는, 추가적으로 또는 대체적으로, 전자 장치 의 다른 하드웨어 디바이스, 예를 들면, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈 , 오디오 모듈, 센서 모듈, 인터페이스, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 구동하기 위한 하나 이상의 드라이 버 프로그램들을 포함할 수 있다. 미들웨어는 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보가 어플리케이션 에 의해 사용될 수 있도록 다양한 기능들을 어플리케이션으로 제공할 수 있다. 미들웨어는, 예를 들면, 어플리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매니저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니 저, 로케이션 매니저, 그래픽 매니저, 시큐리티 매니저, 통화 매니저, 또는 음 성 인식 매니저를 포함할 수 있다. 어플리케이션 매니저는, 예를 들면, 어플리케이션의 생명 주기를 관리할 수 있다. 윈도우 매니저 는, 예를 들면, 화면에서 사용되는 하나 이상의 GUI 자원들을 관리할 수 있다. 멀티미디어 매니저 는, 예를 들면, 미디어 파일들의 재생에 필요한 하나 이상의 포맷들을 파악하고, 그 중 선택된 해당하는 포맷에 맞는 코덱을 이용하여 상기 미디어 파일들 중 해당하는 미디어 파일의 인코딩 또는 디코딩을 수행할 수 있다. 리소스 매니저는, 예를 들면, 어플리케이션의 소스 코드 또는 메모리의 메모리의 공간을 관리 할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량, 온도 또는 전원을 관리하고, 이 중 해당 정 보를 이용하여 전자 장치의 동작에 필요한 관련 정보를 결정 또는 제공할 수 있다. 일실시예에 따르면, 파 워 매니저는 전자 장치의 바이오스(BIOS: basic input/output system)(미도시)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 어플리케이션에 의해 사용될 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 패키지 매니저는, 예를 들면, 패키지 파일의 형태로 배포되는 어플리케이션의 설치 또는 갱신을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 전자 장치와 외부 전자 장치 간의 무선 연결 또는 직접 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 지정된 이벤트(예: 착신 통 화, 메시지, 또는 알람)의 발생을 사용자에게 알리기 위한 기능을 제공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치의 위치 정보를 관리할 수 있다. 그래픽 매니저는, 예를 들면, 사용자에게 제 공될 하나 이상의 그래픽 효과들 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 시큐리티 매니저는, 예를 들면, 시스템 보안 또는 사용자 인증을 제공할 수 있다. 통화(telephony) 매니 저는, 예를 들면, 전자 장치에 의해 제공되는 음성 통화 기능 또는 영상 통화 기능을 관리할 수 있 다. 음성 인식 매니저는, 예를 들면, 사용자의 음성 데이터를 서버로 전송하고, 그 음성 데이터에 적어도 일부 기반하여 전자 장치에서 수행될 기능에 대응하는 명령어(command), 또는 그 음성 데이터에 적 어도 일부 기반하여 변환된 문자 데이터를 서버로부터 수신할 수 있다. 일 실시예에 따르면, 미들웨어 는 동적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. 일 실시예에 따르 면, 미들웨어의 적어도 일부는 운영 체제의 일부로 포함되거나, 또는 운영 체제와는 다른 별도 의 소프트웨어로 구현될 수 있다. 어플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브 라우저, 카메라, 알람, 컨택트, 음성 인식, 이메일, 달력, 미디어 플레이어, 앨범, 와치, 헬스(예: 운동량 또는 혈당과 같은 생체 정보를 측정), 또는 환경 정보(예: 기압, 습도, 또는 온도 정보 측정) 어플리케이션을 포함할 수 있다. 일실시예에 따르면, 어플리케이션은 전자 장치와 외부 전자 장치 사이의 정보 교환을 지원할 수 있는 정보 교환 어플리케 이션(미도시)을 더 포함할 수 있다. 정보 교환 어플리케이션은, 예를 들면, 외부 전자 장치로 지정된 정보 (예: 통화, 메시지, 또는 알람)를 전달하도록 설정된 노티피케이션 릴레이 어플리케이션, 또는 외부 전자 장치를 관 리하도록 설정된 장치 관리 어플리케이션을 포함할 수 있다. 노티피케이션 릴레이 어플리케이션은, 예를 들면, 전자 장치의 다른 어플리케이션(예: 이메일 어플리케이션)에서 발생된 지정된 이벤트(예: 메일 수신)에 대응하는 알림 정보를 외부 전자 장치로 전달할 수 있다. 추가적으로 또는 대체적으로, 노티피케이션 릴레이 어플리케이션은 외부 전자 장치로부터 알림 정보를 수신하여 전자 장치의 사용자에게 제공할 수 있 다. 장치 관리 어플리케이션은, 예를 들면, 전자 장치와 통신하는 외부 전자 장치 또는 그 일부 구성 요소(예: 외부 전자 장치의 디스플레이 모듈 또는 카메라 모듈)의 전원(예: 턴-온 또는 턴-오프) 또는 기능(예: 밝기, 해 상도, 또는 포커스)을 제어할 수 있다. 장치 관리 어플리케이션은, 추가적으로 또는 대체적으로, 외부 전자 장 치에서 동작하는 어플리케이션의 설치, 삭제, 또는 갱신을 지원할 수 있다. 다양한 실시예 중 어느 하나에 따른 전자 장치는, 복수의 코어(core)들을 포함하는 어플리케이션 프로세서, 및 상기 어플리케이션 프로세서와 전기적으로 연결된 통신 프로세서를 포함하고, 상기 어플리케이션 프로세서는, 각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 상기 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하고, 상기 적어도 하나의 세션 중 제1 세션에 대해 설정된 제1 코어에 대응하는 정보를 상기 통신 프로세서로 전송하고, 상기 통신 프로세서로부터 상기 제1 세션의 데이터 패킷을 수신하고, 상기 제1 코어에 대응하는 정보에 기반하여, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 세션에 대해 설정된 상기 제1 코어를 통해 처리할 수 있다. 다양한 실시예에 따라, 상기 제1 세션은 URLLC(ultra reliable low latency communication)와 관련된 세션이며, 상기 제1 코어는 상기 복수의 코어들 중 상대적으로 처리 속도가 더 빠른 코어일 수 있다. 다양한 실시예에 따라, 상기 통신 프로세서는, 상기 어플리케이션 프로세서로부터 상기 제1 코어에 대응하는 정 보를 수신하고, 상기 제1 코어에 대응하는 정보에 기반하여, 상기 제1 코어에 대응하는 논리 버퍼를 할당하고, 외부 전자 장치로부터 상기 제1 세션의 데이터 패킷을 수신하면, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 코어에 대응하여 할당된 논리 버퍼에 저장할 수 있다. 다양한 실시예에 따라, 상기 제1 코어에 대응하는 정보는, 적어도 하나의 세션을 그룹화하여 설정한 제1 그룹 정보에 대응할 수 있다. 다양한 실시예에 따라, 상기 어플리케이션 프로세서는, 상기 통신 프로세서로부터 수신된 데이터 패킷을 상기 복수의 코어들의 각 코어별로 분배하고, 상기 각 코어별로 분배된 데이터 패킷에 대해 상기 수신된 데이터 패킷 의 각 세션별로 패킷 병합 정책을 적용하도록 제어할 수 있다. 다양한 실시예에 따라, 상기 어플리케이션 프로세서는, 상기 제1 세션에 대해 상기 제1 코어에서 패킷 병합 처 리를 수행하도록 제어하고, 상기 제1 세션에 대해 상기 제1 코어에서 네트워크 패킷 처리를 수행하도록 제어할 수 있다. 다양한 실시예에 따라, 상기 어플리케이션 프로세서는, 상기 제1 세션에 대해 상기 제1 코어에서 패킷 병합 처 리를 수행하도록 제어하고, 상기 제1 세션에 대해 상기 제1 코어와 다른 제2 코어에서 네트워크 패킷 처리를 수 행하도록 제어할 수 있다. 다양한 실시예에 따라, 상기 어플리케이션 프로세서는, 상기 통신 프로세서로부터 메타 정보를 수신하고, 상기 수신된 메타 정보에 기반하여, 상기 통신 프로세서로부터 수신된 상기 제1 세션의 데이터 패킷을 상기 제1 코어 를 통해 처리하도록 제어할 수 있다. 다양한 실시예 중 어느 하나에 따른 전자 장치는, 복수의 코어(core)들을 포함하는 어플리케이션 프로세서, 및 상기 어플리케이션 프로세서와 전기적으로 연결된 통신 프로세서를 포함하고, 상기 어플리케이션 프로세서는, 각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 어플리케이션 프로세서에 포함된 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하고, 상기 통신 프로세서로부터 상기 적어도 하나의 세션 중 제1 세션의 데이터 패킷을 수신하고, 상기 수신된 제1 세션의 데이터 패킷을 상기 복수의 코어 들 중 상기 제1 세션에 대응하여 설정된 제1 코어를 위해 할당된 버퍼에 저장하고, 상기 버퍼에 저장된 제1 세 션의 데이터 패킷을 상기 제1 코어를 통해 처리할 수 있다. 다양한 실시예에 따라, 상기 어플리케이션 프로세서는, 상기 제1 코어를 통해 상기 제1 세션의 데이터 패킷에 대한 패킷 병합 정책을 적용할 수 있다. 다양한 실시예에 따라, 상기 제1 세션은 URLLC(ultra reliable low latency communication)와 관련된 세션이며, 상기 제1 코어는 상기 복수의 코어들 중 상대적으로 처리 속도가 더 빠른 코어일 수 있다. 다양한 실시예 중 어느 하나에 따른 전자 장치의 동작 방법은, 전자 장치에서 수신된 데이터 패킷을 처리하는 방법에 있어서, 각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 어플리케 이션 프로세서에 포함된 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하는 동작, 상기 적어도 하나 의 세션 중 제1 세션에 대해 설정된 제1 코어에 대응하는 정보를 상기 어플리케이션 프로세서에서 통신 프로세 서로 전송하는 동작, 상기 어플리케이션 프로세서에서 상기 통신 프로세서로부터 상기 제1 세션의 데이터 패킷 을 수신하는 동작, 및 상기 제1 코어에 대응하는 정보에 기반하여, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 세션에 대해 설정된 상기 제1 코어를 통해 처리하는 동작을 포함할 수 있다. 다양한 실시예에 따라, 상기 제1 세션은 URLLC(ultra reliable low latency communication)와 관련된 세션이며, 상기 제1 코어는 상기 복수의 코어들 중 상대적으로 처리 속도가 더 빠른 코어일 수 있다. 다양한 실시예에 따라, 상기 방법은, 상기 어플리케이션 프로세서로부터 상기 제1 코어에 대응하는 정보를 수신 하는 동작, 상기 제1 코어에 대응하는 정보에 기반하여, 상기 제1 코어에 대응하는 논리 버퍼를 할당하는 동작, 및 외부 전자 장치로부터 상기 제1 세션의 데이터 패킷을 수신하면, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 코어에 대응하여 할당된 논리 버퍼에 저장하는 동작을 포함할 수 있다. 다양한 실시예에 따라, 상기 제1 코어에 대응하는 정보는, 적어도 하나의 세션을 그룹화하여 설정한 제1 그룹 정보에 대응할 수 있다. 다양한 실시예에 따라, 상기 방법은, 상기 통신 프로세서로부터 수신된 데이터 패킷을 상기 복수의 코어들의 각 코어별로 분배하는 동작, 및 상기 각 코어별로 분배된 데이터 패킷에 대해 상기 수신된 데이터 패킷의 각 세션 별로 패킷 병합 정책을 적용하도록 제어하는 동작을 포함할 수 있다. 다양한 실시예에 따라, 상기 방법은, 상기 제1 세션에 대해 상기 제1 코어에서 패킷 병합 처리를 수행하도록 제 어하는 동작, 및 상기 제1 세션에 대해 상기 제1 코어에서 네트워크 패킷 처리를 수행하도록 제어하는 동작을 포함할 수 있다. 다양한 실시예에 따라, 상기 방법은, 상기 제1 세션에 대해 상기 제1 코어에서 패킷 병합 처리를 수행하도록 제 어하는 동작, 및 상기 제1 세션에 대해 상기 제1 코어와 다른 제2 코어에서 네트워크 패킷 처리를 수행하도록 제어하는 동작을 포함할 수 있다. 다양한 실시예에 따라, 상기 방법은, 상기 어플리케이션 프로세서에서 상기 통신 프로세서로부터 메타 정보를 수신하는 동작, 및 상기 수신된 메타 정보에 기반하여, 상기 통신 프로세서로부터 수신된 상기 제1 세션의 데이 터 패킷을 상기 제1 코어를 통해 처리하는 동작을 포함할 수 있다. 다양한 실시예 중 어느 하나에 따른 전자 장치의 동작 방법은, 전자 장치에서 수신된 데이터 패킷을 처리하는 방법에 있어서, 각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하여 어플리케 이션 프로세서에 포함된 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하는 동작, 상기 어플리케이션 프로세서에서, 통신 프로세서로부터 상기 적어도 하나의 세션 중 제1 세션의 데이터 패킷을 수신하는 동작, 상 기 수신된 제1 세션의 데이터 패킷을 상기 복수의 코어들 중 상기 제1 세션에 대응하여 설정된 제1 코어를 위해 할당된 버퍼에 저장하는 동작 및 상기 버퍼에 저장된 상기 제1 세션의 데이터 패킷을 상기 제1 코어를 통해 처 리하는 동작을 포함할 수 있다. 다양한 실시예에 따라, 상기 방법은, 상기 제1 코어를 통해 상기 제1 세션의 데이터 패킷에 대한 패킷 병합 정 책을 적용하는 동작을 포함할 수 있다. 다양한 실시예에 따라, 상기 제1 세션은 URLLC(ultra reliable low latency communication)와 관련된 세션이며, 상기 제1 코어는 상기 복수의 코어들 중 상대적으로 처리 속도가 더 빠른 코어일 수 있다. 다양한 실시예 중 어느 하나에 따른 프로세싱 칩은, 복수의 코어(core)들을 포함하는 어플리케이션 프로세서, 및 상기 프로세싱 칩 내에서 상기 어플리케이션 프로세서와 전기적으로 연결된 통신 프로세서를 포함하고, 상기 어플리케이션 프로세서는, 각 어플리케이션과 관련된 적어도 하나의 세션을 QoS(quality of service)에 기반하 여 상기 복수의 코어들 중 적어도 하나의 코어에 대응하도록 설정하고, 상기 적어도 하나의 세션 중 제1 세션에 대해 설정된 제1 코어에 대응하는 정보를 상기 통신 프로세서로 전송하고, 상기 통신 프로세서로부터 상기 제1 세션의 데이터 패킷을 수신하고, 상기 제1 코어에 대응하는 정보에 기반하여, 상기 수신된 제1 세션의 데이터 패킷을 상기 제1 세션에 대해 설정된 상기 제1 코어를 통해 처리할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 컴퓨터 장치, 휴대용 통신 장치 (예: 스마트폰), 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\",“A 또는 B 중 적어도 하나,”\"A, B 또는 C,\" \"A, B 및 C 중 적어도 하나,”및 “A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제1\", \"제2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제1) 구성요소가 다른(예: 제2) 구성요소에, “기능적으로” 또는 “통신적으로”라는 용어와 함께 또는 이런 용 어 없이, “커플드” 또는 “커넥티드”라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로(예: 유선으로), 무선으로, 또는 제3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로 등의 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부가 될 수 있다. 예를 들 면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 마스터 장치 또는 태스크 수행 장치)의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨 어(예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 마스터 장치 또는 태스크 수행 장치)의 프로세서는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행 될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장매체 는, 비일시적(non-transitory) 저장매체의 형태로 제공될 수 있다. 여기서, '비일시적'은 저장매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장매체에 반영구적으로 저장되는 경우 와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory (CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있다. 다양한 실시예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통 합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수 의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다."}
{"patent_id": "10-2021-0040160", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 다양한 실시예들에 따른, 데이터 패킷의 처리를 위한 계층적 구성을 도시한다. 도 3은 다양한 실시예들에 따른, 전자 장치와 서버 간의 전송 지연을 나타내는 도면이다. 도 4는 다양한 실시예들에 따른, 전자 장치에서의 RSS 방식에 의한 데이터 패킷 처리의 예를 도시한다. 도 5는 다양한 실시예들에 따른, 전자 장치에서의 RPS 방식에 의한 데이터 패킷 처리의 예를 도시한다. 도 6은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 7은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 8은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 9a는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 9b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 10a는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 10b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 11a는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 11b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 12는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 13은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 14는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 15는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 16은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다.도 17은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 18은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 19는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 20은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 21은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 22는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 23은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 24a는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 24b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 25는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 26은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 27a는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 27b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 28a는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 28b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 29a는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 29b는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 30은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 31은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 32는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 33은 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리를 위한 동작의 흐름을 도시한다. 도 34는 다양한 실시예들에 따른, 전자 장치에서의 데이터 패킷 처리의 예를 도시한다. 도 35는 다양한 실시예에 따른 프로그램을 예시하는 블록도이다."}
