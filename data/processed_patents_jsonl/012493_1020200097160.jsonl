{"patent_id": "10-2020-0097160", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0017085", "출원번호": "10-2020-0097160", "발명의 명칭": "메모리 관리 방법 및 전자 장치", "출원인": "삼성전자주식회사", "발명자": "송지섭"}}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,메모리 관리 모듈;상기 메모리 관리 모듈에 작동적으로 연결된 프로세서; 및상기 메모리 관리 모듈에 의해 제어되고, 상기 프로세서와 작동적으로 연결된 메모리를 포함하고,상기 메모리는, 실행될 때, 상기 프로세서가,상기 적어도 하나의 프로세스를 실행하고, 기 설정된 제 1 사이클을 기반으로 상기 적어도 하나의 프로세스가종료되는 비율을 확인하고, 상기 확인된 비율이 제 1 임계값을 초과하는 상황을 감지하고, 상기 감지된 상황이연속적으로 발생하여 제 2 임계값을 초과하는 경우, 상기 전자 장치를 리부팅하도록 하는 인스트럭션들을 저장하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 프로세서는,상기 메모리의 용량을 확인하고,상기 확인된 메모리의 용량을 기반으로 상기 제 1 임계값을 설정하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1 항에 있어서,상기 프로세서는,상기 메모리의 용량을 확인하고,상기 확인된 메모리의 용량을 기반으로 상기 적어도 하나의 프로세스를 패키지로 그룹화하고,상기 패키지가 재실행되는 경우 상기 재실행과 관련된 실행 횟수는 상기 패키지가 종료되는 비율에 반영하지 않는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 3 항에 있어서,상기 프로세서는,상기 제 1 사이클을 기반으로 상기 패키지에 기반한 종료 비율을 확인하고,상기 확인된 패키지에 기반한 종료 비율이 제 3 임계값을 초과하는 경우, 상기 전자 장치를 리부팅하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 4 항에 있어서,상기 제 3 임계값은 약 50% 인 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,공개특허 10-2022-0017085-3-상기 프로세서는,상기 확인된 비율이 상기 제 1 임계값을 초과하는 경우 상기 메모리가 부족한 상황임을 확인하고,상기 메모리에 할당된 상기 적어도 하나의 프로세스를 종료시키는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6 항에 있어서,상기 프로세서는,상기 메모리에 할당된 상기 적어도 하나의 프로세스의 우선 순위를 확인하고,상기 확인된 우선 순위를 기반으로 상기 적어도 하나의 프로세스를 선택하고,상기 선택된 적어도 하나의 프로세스를 종료시키는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 1 항에 있어서,상기 프로세서는,상기 확인된 비율이 제 1 임계값을 초과하는 상황이 연속적으로 발생하여 상기 제 2 임계값을 초과하는 경우,지속적으로 상기 메모리에 문제가 발생하는 상태임을 확인하고,상기 메모리를 초기화하도록 상기 전자 장치를 리부팅하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 8 항에 있어서,상기 프로세서는,상기 확인된 비율이 제 1 임계값을 초과하는 상황이 연속적으로 발생하지 않는 경우, 제 2 사이클을 기반으로상기 적어도 하나의 프로세스가 종료되는 비율을 확인하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 1 항에 있어서,상기 리부팅 관련 사용자 인터페이스를 표시하기 위한 디스플레이 모듈을 더 포함하고,상기 프로세서는,상기 감지된 상황이 상기 제 2 임계값을 초과하여 발생할 때, 상기 디스플레이 모듈을 통해 가이드를 표시하고,상기 가이드에 대응하는 사용자 입력에 응답하여, 상기 전자 장치를 리부팅하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 1 항에 있어서,상기 프로세서는,상기 메모리에 저장된 사용 패턴을 확인하고,상기 확인된 사용 패턴을 기반으로 상기 전자 장치를 리부팅하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 1 항에 있어서,서버와 통신하기 위한 통신 모듈을 더 포함하고,상기 프로세서는,공개특허 10-2022-0017085-4-상기 통신 모듈을 사용하여 상기 서버와 무선 통신을 수행하고,상기 메모리와 관련된 정보, 로그 정보, 및 시간 정보 중 적어도 하나를 상기 서버로 전송하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 12 항에 있어서,상기 프로세서는,상기 통신 모듈을 사용하여, 상기 서버로부터 리부팅 명령을 수신하고, 상기 리부팅 명령에 응답하여, 상기 전자 장치를 리부팅하는 전자 장치."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "방법에 있어서,전자 장치의 메모리를 관리하는 메모리 관리 모듈의 제어 하에 적어도 하나의 프로세스를 실행하는 동작;기 설정된 제 1 사이클을 기반으로 상기 적어도 하나의 프로세스가 종료되는 비율을 확인하는 동작;상기 확인된 비율이 제 1 임계값을 초과하는 상황을 감지하는 동작; 및상기 감지된 상황이 연속적으로 발생하여 제 2 임계값을 초과하는 경우 리부팅 동작을 수행하는 동작; 을 포함하는 방법."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 14 항에 있어서,상기 제 1 임계값은 메모리의 용량을 기반으로 설정되는 것을 특징으로 하는 방법."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 14 항에 있어서,메모리의 용량을 확인하는 동작;상기 확인된 메모리의 용량을 기반으로 상기 적어도 하나의 프로세스를 패키지로 그룹화할지 여부를 결정하는동작; 및상기 적어도 하나의 프로세스를 패키지화하여, 상기 패키지가 재실행되는 경우 상기 재실행과 관련된 실행 횟수는 상기 패키지가 종료되는 비율에 반영하지 않는 동작; 을 더 포함하는 방법."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 16 항에 있어서,상기 제 1 사이클을 기반으로 상기 패키지에 기반한 종료 비율을 확인하는 동작; 및상기 확인된 패키지에 기반한 종료 비율이 제 3 임계값을 초과하는 경우, 상기 전자 장치를 리부팅하는 동작;을 더 포함하는 방법."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 14 항에 있어서,상기 확인된 비율이 상기 제 1 임계값을 초과하는 경우 상기 메모리가 부족한 상황임을 확인하는 동작;상기 메모리에 할당된 상기 적어도 하나의 프로세스의 우선 순위를 확인하는 동작;상기 확인된 우선 순위를 기반으로 상기 적어도 하나의 프로세스를 선택하는 동작; 및상기 선택된 적어도 하나의 프로세스를 종료시키는 동작; 을 더 포함하는 방법."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "공개특허 10-2022-0017085-5-제 14 항에 있어서,상기 리부팅 동작을 수행하는 동작은,상기 확인된 비율이 제 1 임계값을 초과하는 상황이 연속적으로 발생하여 상기 제 2 임계값을 초과하는 경우,지속적으로 상기 메모리에 문제가 발생하는 상태임을 확인하는 동작; 및상기 메모리를 초기화하도록 상기 전자 장치를 리부팅하는 동작; 을 포함하는 방법."}
{"patent_id": "10-2020-0097160", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 14 항에 있어서,상기 리부팅 동작을 수행하는 동작은,상기 메모리에 저장된 사용 패턴을 확인하는 동작; 및상기 확인된 사용 패턴을 기반으로 상기 전자 장치를 리부팅하는 동작; 을 포함하는 방법."}
{"patent_id": "10-2020-0097160", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "다양한 실시예에 따르면, 전자 장치는 메모리 관리 모듈, 상기 메모리 관리 모듈에 작동적으로 연결된 프로세서, 및 상기 메모리 관리 모듈에 의해 제어되고, 상기 프로세서와 작동적으로 연결된 메모리를 포함할 수 있다. 상기 메모리는, 실행될 때, 상기 프로세서가, 상기 적어도 하나의 프로세스를 실행하고, 기 설정된 제 1 사이클을 기 반으로 상기 적어도 하나의 프로세스가 종료되는 비율을 확인하고, 상기 확인된 비율이 제 1 임계값을 초과하는 상황을 감지하고, 상기 감지된 상황이 연속적으로 발생하여 제 2 임계값을 초과하는 경우, 상기 전자 장치를 리 부팅하도록 하는 인스트럭션들을 저장할 수 있다. 그 밖에 다양한 실시예들이 가능할 수 있다."}
{"patent_id": "10-2020-0097160", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명의 다양한 실시 예는 메모리 관리 방법 및 전자 장치에 관한 것이다."}
{"patent_id": "10-2020-0097160", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "무선 통신 기술의 발전에 따라 전자 장치(예: 통신용 전자 장치, 스마트 폰)가 일상 생활에 보편적으로 사용되 면서, 사용자의 요구 수준은 계속 높아지고 있다. 사용자의 높은 요구 수준을 충족시키기 위해, 전자 장치는 많 은 기능을 수행하게 된다. 전자 장치는 한정된 메모리 용량 내에서 많은 기능을 수행함으로써, 메모리 용량이 부족한 상황이 발생할 수 있고, 전자 장치의 사용성이 저하될 수 있다. 일 예로, 전자 장치는 메모리 용량이 부족할 때, 메모리 용량을 확보하기 위해 백그라운드에서 실행 중인 적어 도 하나의 어플리케이션을 종료시킬 수 있다."}
{"patent_id": "10-2020-0097160", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "다양한 실시예에 따르면, 전자 장치는 한정된 메모리 용량 내에서 메모리가 부족한 상황을 검출하고, 상기 메모 리가 부족한 상황에 대응하여 적절한 솔루션이 적용될 필요가 있다. 다양한 실시예에 따르면, 전자 장치는 메모리가 부족한 상황을 검출하는 기준을 설정할 수 있다. 전자 장치는 메모리가 부족한 상황이 발생했을 때, 실행 중인 어플리케이션 프로그램에 관련된 정보, 시간 정보, 및/또는 로 그 정보를 수집할 수 있고, 상기 수집된 정보들을 활용하여, 상기 메모리가 부족한 상황에 대한 솔루션을 사용 자에게 제공할 수 있다. 본 발명의 다양한 실시예는 전자 장치에서 메모리가 부족한 상황을 검출할 수 있고, 상기 검출된 상황에 대응하 여 적절한 솔루션이 제안됨으로써, 메모리를 관리하는 방법 및 이를 구현하는 전자 장치를 제공할 수 있다."}
{"patent_id": "10-2020-0097160", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시예에 따른 전자 장치에 있어서, 메모리 관리 모듈, 상기 메모리 관리 모듈에 작동적으로 연결된 프 로세서 및, 상기 메모리 관리 모듈에 의해 제어되고, 상기 프로세서와 작동적으로 연결된 메모리를 포함할 수 있다. 상기 메모리는, 실행될 때, 상기 프로세서가, 상기 적어도 하나의 프로세스를 실행하고, 기 설정된 제 1 사이클을 기반으로 상기 적어도 하나의 프로세스가 종료되는 비율을 확인하고, 상기 확인된 비율이 제 1 임계값 을 초과하는 상황을 감지하고, 상기 감지된 상황이 연속적으로 발생하여 제 2 임계값을 초과하는 경우, 상기 전 자 장치를 리부팅하도록 하는 인스트럭션들을 저장할 수 있다. 다양한 실시예에 따른 방법에 있어서, 전자 장치의 메모리를 관리하는 메모리 관리 모듈의 제어 하에 적어도 하 나의 프로세스를 실행하는 동작, 기 설정된 제 1 사이클을 기반으로 상기 적어도 하나의 프로세스가 종료되는비율을 확인하는 동작, 상기 확인된 비율이 제 1 임계값을 초과하는 상황을 감지하는 동작, 및 상기 감지된 상 황이 연속적으로 발생하여 제 2 임계값을 초과하는 경우 리부팅 동작을 수행하는 동작을 포함할 수 있다."}
{"patent_id": "10-2020-0097160", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 다양한 실시예들은 메모리가 부족한 상황을 검출할 수 있고, 상기 검출된 메모리 부족 상황에 대응하 여 기 설정된 솔루션을 적용함으로써, 상기 상황을 유동적으로 대처하는 것을 목적으로 한다. 다양한 실시예에 따르면, 전자 장치는 메모리가 부족한 상황에서의 상황 정보, 시간 정보, 및 실행 중인 어플리 케이션 프로그램에 관한 정보를 수집할 수 있고, 상기 수집된 정보들을 기반으로 솔루션에 적절하게 적용할 수 있다. 이 외에, 본 문서를 통해 직접적 또는 간접적으로 파악되는 다양한 효과들이 제공될 수 있다."}
{"patent_id": "10-2020-0097160", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네 트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장 치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또 는 서버와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서버를 통하여 전자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈, 음향 출 력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈, 가입자 식별 모듈 , 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에 서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테나 모듈)은 하나의 구성 요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처 리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서 를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특 화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있 다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)과 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능이 수행되는 전자 장치 자 체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi-supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않는다. 인공 지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워 크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지 능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일 실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일 실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일 실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 본 발명의 다양한 실시예에 따른 프로그램 모듈의 블록도이다. 일 실시예에 따르면, 프로그램 모듈(예: 도 1의 프로그램)은 전자 장치(예: 도 1의 전자 장치) 에 관련된 자원을 제어하는 운영 체제 및/또는 운영 체제 상에서 구동되는 다양한 어플리케이션(예: 도 1 의 어플리케이션)을 포함할 수 있다. 운영 체제는, 예를 들면, AndroidTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 도 2를 참조하면, 프로그램 모듈은 커널, 미들웨어(예: 도 1의 미들 웨어), API, 및/또는 어플리케이션(예: 도 1의 어플리케이션)을 포함할 수 있 다. 프로그램 모듈의 적어도 일부는 전자 장치 상에 프리로드 되거나, 외부 전자 장치(예: 전자 장치 (102, 104) 및/또는 서버)로부터 다운로드 가능하다. 일 실시예에 따르면, 커널은 시스템 리소스 매니저 및/또는 디바이스 드라이버를 포함할 수 있 다. 시스템 리소스 매니저는 시스템 리소스의 제어, 할당, 또는 회수를 수행할 수 있다. 예를 들어, 시스 템 리소스 매니저는 프로세스 관리부, 메모리 관리부, 또는 파일 시스템 관리부를 포함할 수 있다. 일 실 시예에 따르면, 커널 공간에 위치한 시스템 리소스 매니저는 메모리(예: 도 1의 메모리)를 관리하기 위한 메모리 관리 모듈(예: LMKD, low memory killer demon)을 포함할 수 있다. 예를 들어, 메모리 관리 모듈은 메모리 관리부로 정의될 수 있다. 일 실시예에 따르면, 메모리 관리 모듈은 메모리의 용량을 기반으로 메모리가 부족한 상황인지 여부 를 검출할 수 있다. 메모리 관리 모듈은 메모리를 사용 중인 적어도 하나의 어플리케이션 프로그램의 종료 여부를 결정할 수 있다. 예를 들어, 메모리 관리 모듈은 메모리에 상주하고 있는, 상기 어플리 케이션 프로그램과 관련된 적어도 하나의 프로세스의 종료 여부를 결정할 수 있다. 메모리 관리 모듈은 메 모리가 부족한 상황에서 메모리에 할당된 적어도 하나의 프로세스를 종료시킬 수 있고, 메모리를 확 보하기 위한 동작을 수행할 수 있다. 예를 들어, 메모리 관리 모듈은 특정 프로세스의 실행을 위해 가용 메모리를 확보해야 하는 상황이 발생하면, 현재 메모리에 상주하고 있는 적어도 하나의 프로세스를 종료시 킬 수 있다. 메모리 관리 모듈은 기 설정된 조건을 기반으로 해당 조건이 충족되는 경우 가용 메모리를 확 보하기 위해, 적어도 하나의 프로세스를 종료시킬 수 있다. 일 실시예에 따르면, 커널에 포함된 디바이스 드라이버는, 예를 들면, 디스플레이 드라이버, 카메라 드라이버, 블루투스 드라이버, 공유 메모리 드라이버, USB 드라이버, 키패드 드라이버, WiFi 드라이버, 오디오 드라이버, 또는 IPC(inter-process communication) 드라이버를 포함할 수 있다. 일 실시예에 따르면, 미들웨어는, 예를 들면, 어플리케이션이 공통적으로 필요로 하는 기능을 제공하 거나, 어플리케이션이 전자 장치 내부의 제한된 시스템 자원을 사용할 수 있도록 API를 통해 다양한 기능들을 어플리케이션으로 제공할 수 있다. 일 실시예에 따르면, 미들웨어 는 런타임 라이브러리 , 어플리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매 니저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니저 , 로케이션 매니저, 그래픽 매니저, 및/또는 시큐리티 매니저 중 적어도 하나를 포함할 수 있다. 일 실시예에 따르면, 미들웨어는 런타임 라이브러리를 포함할 수 있다. 런타임 라이브러리는, 예를 들면, 어플리케이션이 실행되는 동안에 프로그래밍 언어를 통해 새로운 기능을 추가하기 위해 컴파일 러가 사용하는 라이브러리 모듈을 포함할 수 있다. 런타임 라이브러리는 입출력 관리, 메모리 관리, 또는 산술 함수 처리를 수행할 수 있다. 도 2를 참조하면, 어플리케이션 매니저는, 예를 들면, 어플리케이션의 생명 주기를 관리할 수 있다. 윈도우 매니저는 화면에서 사용되는 GUI(graphic user interface) 자원을 관리할 수 있다. 멀티미디어 매 니저는 미디어 파일들의 재생에 필요한 포맷을 파악하고, 해당 포맷에 맞는 코덱을 이용하여 미디어 파일 의 인코딩 또는 디코딩을 수행할 수 있다. 리소스 매니저는 어플리케이션의 소스 코드 또는 메모리의 공간을 관리할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량 또는 전원을 관리하고, 전자 장치의 동 작에 필요한 전력 정보를 제공할 수 있다. 일 실시예에 따르면, 파워 매니저는 바이오스(BIOS: basic input/output system)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 어플리케이션에서 사용 될 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 패키지 매니저는 패키지 파일의 형태로 배포되는 어 플리케이션의 설치 또는 갱신을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 무선 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 도착 메시지, 약속, 근접성 알림 등의 이벤트를 사용자에게 제 공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치의 위치 정보를 관리할 수 있다. 그래픽 매니저 는, 예를 들면, 사용자에게 제공될 그래픽 효과 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 보안 매니저는, 예를 들면, 시스템 보안 또는 사용자 인증을 제공할 수 있다. 일 실시예에 따르면, 미들웨 어는 전자 장치의 음성 또는 영상 통화 기능을 관리하기 위한 통화(telephony) 매니저 또는 전술된 구성요 소들의 기능들의 조합을 형성할 수 있는 하는 미들웨어 모듈을 포함할 수 있다. 일 실시예에 따르면, 미들웨어는 운영 체제의 종류 별로 특화된 모듈을 제공할 수 있다. 미들웨어는 동적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. API는, 예를 들면, API 프로그래밍 함수들의 집합으로, 운영 체제에 따라 다른 구성으로 제공될 수 있다. 예를 들면, 안드로이드 또는 iOS의 경우, 플랫폼 별로 하나의 API 셋을 제공할 수 있으며, 타이젠의 경우, 플랫폼 별로 두 개 이상의 API 셋을 제공할 수 있다. 어플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브라우 저, 카메라, 알람, 컨택트, 음성 다이얼, 이메일, 달력, 미디어 플레이어 , 앨범, 와치, 헬스 케어(예: 운동량 또는 혈당 등을 측정), 및/또는 환경 정보(예: 기압, 습도, 또는 온도 정보) 제공 어플리케이션을 포함할 수 있다. 일 실시예에 따르면, 어플리케이션은 전자 장치와 외부 전자 장치(102, 104) 사이의 정보 교환을 지원할 수 있는 정보 교환 어플리케이션을 포함할 수 있다.예를 들어, 알림 전달 어플리케이션은 전자 장치의 다른 어플리케이션에서 발생된 알림 정보를 외부 전자 장치(102, 104)로 전달하거나, 또는 외부 전자 장치(102, 104)로부터 알림 정보를 수신하여 사용자에게 제공할 수 있다. 일 실시예에 따르면, 프로그램 모듈의 적어도 일부는 소프트웨어, 펌웨어, 하드웨어, 또는 이들 중 적어도 둘 이상의 조합으로 구현(예: 실행)될 수 있으며, 하나 이상의 기능을 수행하기 위한 모듈, 프로그램, 루틴, 명 령어 세트 또는 프로세스를 포함할 수 있다. 도 3은 본 발명의 다양한 실시예에 따른 커널 영역과 사용자 영역에서의 메모리 부족 상황을 검출하 는 과정이 도시된 블록도이다. 도 3을 참조하면, 프로그램 모듈이 저장되는 메모리 주소 공간(memory address space) 상 커널 영역(31 0)과 사용자 영역이 구분될 수 있고, 각각의 영역에서 메모리(예: 도 1의 메모리)가 부족한 상황을 검출하는 과정을 도시한다. 일 실시예에 따르면, 커널 영역은 도 2의 프로그램 모듈에 포함된 커널 로 정의될 수 있다. 일 실시예에 따르면, 커널 영역에 포함된 메모리 관리 모듈(예: LMKD, low memory killer demon)(예: 도 2의 메모리 관리 모듈)은 도 2의 시스템 리소스 매니저에 포함될 수 있다. 일 실시예에 따르면, 사용자 영역은 사용자에 의해 적어도 부분적으로 제어되는 영역을 포함할 수 있다. 예를 들어, 사용자 영역은 GUI(graphic user interface) 및 프레임워크(framework)를 포함할 수 있고, 사용자에게 특정 기능을 제공할 수 있다. 사용자 영역은 사용자가 프레임워크를 통해 어플 리케이션 프로그램을 실행할 때, 전자 장치에서 메모리를 확보하기 위해 설정된 알고리즘을 수행하는 과정을 도시한다. 도 3을 참조하면, 동작 351에서 메모리 관리 모듈은 메모리가 부족한 상황을 감지할 수 있다. 예를 들어, 적어도 하나의 어플리케이션 프로그램이 실행되면, 상기 실행과 관련된 적어도 하나의 프로세스가 메모리 에 할당될 수 있고, 가용 메모리가 부족한 상황이 발생할 수 있다. 메모리 관리 모듈은 메모리 가 부족한 상황을 감지할 수 있고, 가용 메모리를 확보하기 위한 동작을 수행할 수 있다. 일 실시예에 따르면, 메모리 관리 모듈은 메모리의 용량을 기준으로 메모리가 부족한 정도를 low 레벨, medium 레벨, 및/ 또는 critical 레벨로 구분할 수 있고, 메모리가 부족한 상황을 감지하는 기준을 다르게 설정할 수 있다. 예를 들어, 메모리 용량 대비 가용 메모리의 비율이 약 50%이면 low 레벨이고, 상기 비율이 약 70%이면 medium 레벨 이고, 상기 비율이 약 90%이면 critical 레벨로 설정될 수 있다. 메모리 관리 모듈은 메모리 용량 및 설정 된 레벨을 기반으로 메모리가 부족한 상황(예: 메모리에 상주하고 있는 적어도 하나의 프로세스를 종료시켜야 하는 상황)을 감지할 수 있다. 동작 353에서 메모리 관리 모듈은 현재 실행 중인 프로세스의 종료 조건을 확인할 수 있다. 예를 들어, 메 모리 관리 모듈은 약 100ms 이내에 프로세스가 종료되었는지, 현재의 가용 메모리가 충분한 상태인지 여부 를 확인할 수 있고, 프로세스의 종료 조건을 충족하는지 여부를 결정할 수 있다. 동작 355에서 메모리 관리 모듈은 메모리에 할당된 적어도 하나의 프로세스 중 종료할 프로세스를 선 택할 수 있다. 예를 들어, 메모리에 할당된 적어도 하나의 프로세스는 우선 순위(예: cached adj 값)가 설 정될 수 있고, 상기 우선 순위를 기반으로 종료될 프로세스가 결정될 수 있다. 메모리 관리 모듈은 메모리 레벨(예: low 레벨, medium 레벨, 및/또는 critical 레벨)에 대응하는 기준값을 설정할 수 있고, 상기 프로세스 의 우선 순위가 상기 기준값을 초과하는 경우 상기 프로세스를 종료시킬 수 있다. 예를 들어, foreground에서 실행 중인 프로세스의 우선순위(예: cached adj 값)는 \"0\"에 해당되고, background에서 동작 중인 프로세스 중 에서 중요도가 낮은 프로세스의 우선순위는 \"900-999\"에서 결정될 수 있다. 예를 들어, 메모리 관리 모듈 은 메모리 레벨이 medium 레벨일 때, 기준값이 \"850\"인 경우 \"850\"을 초과하는 우선 순위에 해당하는 적어도 하 나의 프로세스를 선택하고, 상기 선택된 적어도 하나의 프로세스를 종료시킬 수 있다. 동작 355에서 메모리 관리 모듈은 메모리 레벨의 기준값을 기반으로 적어도 하나의 프로세스를 선택할 수 있고, 동작 357에서 상기 선택된 적어도 하나의 프로세스를 종료시킬 수 있다. 메모리 관리 모듈은 상기 적어도 하나의 프로세스를 종료시킴으로써, 가용 메모리를 확보할 수 있다. 일 실시예에 따르면, 메모리 관리 모듈은 가용 메모리를 확보하기 위하여, 우선 순위를 기반으로, 메모리에 할당된 적어도 하나의 프로 세스 중 적어도 하나를 종료시킬 수 있다. 동작 359에서 메모리 관리 모듈은 종료시킨 적어도 하나의 프로세스를 카운팅할 수 있다. 예를 들어, 메모 리 관리 모듈은 메모리 레벨의 기준값을 기반으로, 종료시킨 프로세스를 카운팅할 수 있다. 예를 들어, 기준값이 \"850\"인 경우 \"850\"에 대응하여 종료된 프로세스를 카운팅할 수 있고, 기준값이 \"700\"인 경우 \"700\"에 대응하여 종료된 프로세스를 카운팅할 수 있다. 메모리 관리 모듈은 각각의 기준값을 기반으로 카운트 정 보를 관리할 수 있다. 일 실시예에 따르면, 전자 장치의 프로세서(예: 도 1의 프로세서)는 부팅 시점에 메모리(예: 도 1의 메모리, DRAM 메인 메모리)의 용량 및/또는 가용량(capacity)을 확인할 수 있고, 상기 확인된 메모리(13 0)의 용량 및/또는 가용량을 기반으로 제 1 임계값(예: 기준값)을 결정할 수 있다. 예를 들어, 프로세서는 프레임워크의 코드 생성 단계(예: 초기화 단계)에서 메모리의 용량 및/또는 가용량을 확인할 수 있고, 제 1 임계값을 설정할 수 있다. 전자 장치는 제 1 임계값을 기반으로 메모리에 할당된 적어도 하나의 프 로세스가 종료되는 상황을 카운팅할 수 있다. 도 3을 참조하면, 동작 361에서 전자 장치는 프레임워크를 통해 어플리케이션 프로그램과 관련된 적 어도 하나의 프로세스를 실행할 수 있다. 예를 들어, 전자 장치는 사용자 입력에 응답하여, 적어도 하나의 어플리케이션 프로그램에 대응하는 어플리케이션 프로세스를 실행할 수 있다. 일 실시예에 따르면, 전자 장치 는 적어도 하나의 어플리케이션 프로세스가 실행될 때, 메모리가 부족한 상황을 감지할 수 있다. 예를 들 어, 도 3의 동작 361에서 어플리케이션 프로그램과 관련된 적어도 하나의 프로세스가 실행되면, 동작 351에서 메모리가 부족한 상황을 감지할 수 있다. 동작 363에서 전자 장치는 프레임워크를 통해 메모리 관리 모듈에 카운트 정보(예: 메모리 부족 상황에 따라 프로세스가 종료된 회수, 프로세스의 adj 값에 따라, 프로세스가 종료된 횟수)를 요청할 수 있고, 상기 메모리 관리 모듈로부터 카운트 정보를 획득할 수 있다. 메모리 관리 모듈은 동작 359에서 기준 값을 기반으로 기록된 카운트 정보를 프레임워크로 전달할 수 있다. 일 실시예에 따르면, 전자 장치 는 메모리 관리 모듈에 의해 관리되는 카운트 정보를 직접 참조할 수 없고, 메모리 관리 모듈에 카운 트 정보를 요청함으로써, 획득할 수 있다. 일 실시예에 따르면, 전자 장치는 메모리 레벨의 기준값을 기반 으로 카운트 정보를 요청할 수도 있고, 해당되는 카운트 정보를 획득할 수 있다. 예를 들어, 메모리 관리 모듈 은 상기 기준값을 초과하는 적어도 하나의 프로세스를 종료시킬 수 있고, 상기 적어도 하나의 프로세스에 대응하는 adj 값(예: cached adj 값)에 대응하는 카운트 정보를 기록할 수 있다. 메모리 관리 모듈은 카운 트 정보의 요청에 응답하여, adj 값 별로 기록된 카운트 정보를 제공할 수 있다. 동작 365에서 전자 장치는 메모리 관리 모듈로부터 획득된 카운트 정보를 메모리에 저장할 수 있다. 일 실시예에 따르면, 전자 장치는 적어도 하나의 어플리케이션 프로세스가 실행될 때, 지속적으로 카운트 정보를 획득할 수 있고, 이전에 획득한 카운트 정보와 비교 및 분석할 수 있다. 예를 들어, 전자 장치 는 적어도 하나의 어플리케이션 프로세스가 실행됨에 따라, 메모리에 상주된 적어도 하나의 프로세스 가 종료되었다면, 상기 획득된 카운트 정보를 1만큼 증가시킬 수 있다. 예를 들어, 전자 장치는 메모리 에 상주된 적어도 하나의 프로세스 중 adj 값이 \"700\"인 적어도 하나의 프로세스를 종료시킬 수 있고, adj 값 \"700\"에 대응되는 카운트 정보를 1만큼 증가시킬 수 있다. adj 값이 \"700\"인 복수의 프로세스가 종료되더라 도 adj 값 \"700\"에 대응되는 카운트 정보는 1만큼 증가할 수 있다. 동작 367에서 전자 장치는 하나의 사이클(예: 제 1 사이클)을 기반으로 적어도 하나의 프로세스가 종료된 비율을 계산할 수 있다. 예를 들어, 어플리케이션 프로그램이 50회 실행되는 주기를 하나의 사이클로 결정할 수 있다. 상기 적어도 하나의 프로세스가 종료된 비율은 하나의 사이클을 기준으로 프로세스가 종료된 횟수가 차지 하는 비율로 정의될 수 있다. 일 실시예에 따르면, 전자 장치는 카운트 정보를 기반으로 하나의 사이클 동 안 프로세스가 종료된 비율을 계산할 수 있다. 동작 369에서 전자 장치는 상기 계산된 비율이 임계값을 초과하는지 여부를 확인할 수 있다. 일 실시예에 따르면, 프로세스가 종료된 비율이 임계값을 초과하는 상황이 메모리 크리티컬 상황으로 정의될 수 있다. 일 실 시예에 따르면, 임계값은 메모리의 용량을 기반으로 결정될 수 있다. 예를 들어, 메모리의 용량이 증가할수록 상기 임계값은 작아질 수 있다. 일 실시예에 따르면, 작은 용량의 메모리가 실장된 전자 장치는 메모리가 부족한 상황이 자주 발생할 수 있고, 상기 상황이 자주 발생함에 따라, 메모리 크리티컬 상황이 발생할 수 있다. 동작 371에서 전자 장치(예: 도 1의 프로세서)는 동작 369에서의 메모리 크리티컬 상황이 연속적으로 4회 이상 발생하였는지 여부를 확인할 수 있다. 예를 들어, 프로세서는 메모리 크리티컬 상황이 발생하면, 상기 발생 정보를 메모리 관리 프로그램(예: 헬스케어 어플리케이션 프로그램)에 전달할 수 있고, 상기 메모리 관리 프로그램을 통해, 상기 메모리 크리티컬 상황의 발생 횟수를 카운팅할 수 있다. 일 실시예에 따르면, 메모리 크리티컬 상황이 연속적으로 4회 발생하는 상황은 메모리 크리티컬 로우 상황으로 정의될 수 있다. 일 실시 예에 따르면, 메모리 크리티컬 로우 상황은 가용 메모리를 확보하기 어려운 상황일 수 있고, 메모리의 부족 문 제가 지속적으로 야기되는 상황일 수 있다. 일 실시예에 따르면, 프로세서는 메모리 크리티컬 로우 상황이 발생하면, 전자 장치를 리부팅하거나, 메모리를 초기화하는 동작을 수행하여, 가용 메모리를 확보하 기 위한 솔루션을 사용자에게 가이드할 수 있다. 동작 373에서 프로세서는 메모리 크리티컬 로우 상황의 발생에 응답하여, 복원 동작(예: 전자 장치의 리부팅, 복원 동작을 위한 사용자 인터페이스를 표시)을 수행할 수 있다. 예를 들어, 프로세서는 복원 프 로그램(예: 복원 어플리케이션 프로그램)을 통해 전자 장치를 리부팅하거나, 사용자 인터페이스를 제공하 여, 리부팅 시점을 설정할 수 있다. 예를 들어, 복원 프로그램은 복원 동작을 가이드하는 사용자 인터페이스를 표시할 수 있고, \"바로 재부팅\", \"심야 시간 재부팅\", \"재부팅 시점의 설정\" 등 다양한 옵션을 제공할 수 있다. 일 실시예에 따르면, 전자 장치는 메모리 크리티컬 로우 상황이 발생하면, 설정된 솔루션(예: 복원 동작) 을 수행하기 위한 가이드를 화면에 표시할 수 있고, 사용자의 선택에 응답하여, 상기 솔루션의 수행 여부를 결 정할 수 있다. 다양한 실시예에 따른 전자 장치에 있어서, 메모리 관리 모듈, 상기 메모리 관리 모듈에 작동적 으로 연결된 프로세서 및, 상기 메모리 관리 모듈에 의해 제어되고, 상기 프로세서와 작동적으 로 연결된 메모리를 포함할 수 있다. 상기 메모리는, 실행될 때, 상기 프로세서가, 상기 적어도 하나의 프로세스를 실행하고, 기 설정된 제 1 사이클을 기반으로 상기 적어도 하나의 프로세스가 종료되는 비율 을 확인하고, 상기 확인된 비율이 제 1 임계값을 초과하는 상황을 감지하고, 상기 감지된 상황이 연속적으로 발 생하여 제 2 임계값을 초과하는 경우, 상기 전자 장치를 리부팅하도록 하는 인스트럭션들을 저장할 수 있 다. 일 실시예에 따르면, 프로세서는, 상기 메모리의 용량을 확인하고, 상기 확인된 메모리의 용량 을 기반으로 상기 제 1 임계값을 설정할 수 있다. 일 실시예에 따르면, 프로세서는, 상기 메모리의 용량을 확인하고, 상기 확인된 메모리의 용량 을 기반으로 상기 적어도 하나의 프로세스를 패키지로 그룹화하고, 상기 패키지가 재실행되는 경우 상기 재실행 과 관련된 실행 횟수는 상기 패키지가 종료되는 비율에 반영하지 않을 수 있다. 예를 들어, 특정 어플리케이션 프로그램의 실행에 응답하여, 수행되는 적어도 하나의 프로세스는 하나의 패키지로 그룹화될 수 있다. 일 실시 예에 따르면, 패키지는 도 2의 패키지 매니저가 관리하는 패키지로 정의될 수 있다. 일 실시예에 따르면, 프로세서는, 상기 제 1 사이클을 기반으로 상기 패키지에 기반한 종료 비율을 확인하 고, 상기 확인된 패키지에 기반한 종료 비율이 제 3 임계값을 초과하는 경우, 상기 전자 장치를 리부팅할 수 있 다. 일 실시예에 따르면, 상기 제 3 임계값은 약 50% 인 것을 특징으로 한다. 일 실시예에 따르면, 프로세서는, 상기 확인된 비율이 상기 제 1 임계값을 초과하는 경우 상기 메모리 가 부족한 상황임을 확인하고, 상기 메모리에 할당된 상기 적어도 하나의 프로세스를 종료시킬 수 있 다. 일 실시예에 따르면, 프로세서는, 상기 메모리에 할당된 상기 적어도 하나의 프로세스의 우선 순위를 확인하고, 상기 확인된 우선 순위를 기반으로 상기 적어도 하나의 프로세스를 선택하고, 상기 선택된 적어도 하 나의 프로세스를 종료시킬 수 있다. 일 실시예에 따르면, 프로세서는, 상기 확인된 비율이 제 1 임계값을 초과하는 상황이 연속적으로 발생하 여 상기 제 2 임계값을 초과하는 경우, 지속적으로 상기 메모리에 문제가 발생하는 상태임을 확인하고, 상 기 메모리를 초기화하도록 상기 전자 장치를 리부팅할 수 있다. 일 실시예에 따르면, 프로세서는, 상기 확인된 비율이 제 1 임계값을 초과하는 상황이 연속적으로 발생하 지 않는 경우, 제 2 사이클을 기반으로 상기 적어도 하나의 프로세스가 종료되는 비율을 확인할 수 있다. 일 실시예에 따르면, 전자 장치는, 상기 리부팅 관련 사용자 인터페이스를 표시하기 위한 디스플레이 모듈 을 더 포함하고, 프로세서는, 상기 감지된 상황이 상기 제 2 임계값을 초과하여 발생할 때, 상기 디 스플레이 모듈을 통해 가이드를 표시하고, 상기 가이드에 대응하는 사용자 입력에 응답하여, 상기 전자 장 치를 리부팅할 수 있다.일 실시예에 따르면, 프로세서는, 상기 메모리에 저장된 사용 패턴을 확인하고, 상기 확인된 사용 패 턴을 기반으로 상기 전자 장치를 리부팅할 수 있다. 일 실시예에 따르면, 전자 장치는, 서버와 통신하기 위한 통신 모듈을 더 포함하고, 프로세서 는, 상기 통신 모듈을 사용하여 상기 서버와 무선 통신을 수행하고, 상기 메모리와 관련된 정보, 로그 정보, 및 시간 정보 중 적어도 하나를 상기 서버로 전송할 수 있다. 일 실시예에 따르면, 프로세서는, 상기 통신 모듈을 사용하여, 상기 서버로부터 리부팅 명령을 수신하고, 상기 리부팅 명령에 응답하여, 상기 전자 장치를 리부팅할 수 있다. 도 4는 본 발명의 다양한 실시예에 따른 하나의 사이클을 기준으로 메모리 부족 상황을 검출하는 과정이 도시된 예시도이다. 도 4를 참조하면, 전자 장치(예: 도 1의 전자 장치)는 어플리케이션 프로그램이 50회 실행되는 주기를 하 나의 사이클로 설정할 수 있다. 전자 장치는 제 1 사이클을 기반으로 실행되는 어플리케이션 프 로그램과 관련하여 실행되는 적어도 하나의 프로세스를 확인할 수 있다. 일 실시예에 따르면, 전자 장치는 제 1 사이클을 기준으로 프로세스의 종료 횟수(예: 메모리 부족으로 프로세스가 종료된 회수)가 차지하는 비율을 확인할 수 있고, 상기 확인된 비율이 제 1 임계값을 초과하는 경우 메모리 크리티컬 상황이 발생하 였음을 확인할 수 있다. 일 실시예에 따르면, 전자 장치는 제 1 사이클이 완료되면, 제 2 사이클 을 이어서 수행할 수 있고, 제 2 사이클이 완료되면, 제 3 사이클을 이어서 수행할 수 있다. 전 자 장치는 하나의 사이클을 기반으로 메모리가 부족한 상황(예: 메모리 크리티컬 상황)이 발생 하였는지 여부를 확인할 수 있다. 도 4를 참조하면, 제 1 사이클 구간 및 제 2 사이클 구간에서는 메 모리 크리티컬 상황이 발생하지 않았고, 제 3 사이클 구간 내지 제 6 사이클 구간에서는 메모리 크리티컬 상황이 발생했음을 확인할 수 있다. 일 실시예에 따르면, 전자 장치는 하나의 사이클(예: 어플리케이션 프로그램이 50회 실행)을 기준으 로, 적어도 하나의 프로세스의 종료 횟수가 차지하는 비율을 확인할 수 있고, 상기 비율이 제 1 임계값을 초과 하는 경우 메모리 크리티컬 상황이 발생하였다고 판단할 수 있다. 일 실시예에 따르면, 전자 장치는 메모리 크리티컬 상황이 연속적으로 제 2 임계값(예: 4회) 이상 발생하는 경우 메모리 크리티컬 로우 상황 이 발생하였다고 판단할 수 있다. 예를 들어, 메모리 크리티컬 로우 상황은 적어도 하나의 프로세스 를 종료시키더라도 지속적으로 메모리가 부족한 상황이 발생하는 상황일 수 있다. 일 실시예에 따르면, 전자 장 치는 메모리 크리티컬 로우 상황에 응답하여, 전자 장치의 리부팅을 수행할 수 있다. 다른 실시 예에 따르면, 전자 장치는 메모리 크리티컬 로우 상황에 응답하여, 리부팅 수행을 위한 가이드를 디 스플레이 모듈(예: 도 1의 디스플레이 모듈)에 표시할 수 있고, 상기 가이드에 대한 사용자의 선택에 대응 하여 상기 전자 장치를 리부팅할 수 있다. 일 실시예에 따르면, 제 1 임계값은 메모리 크리티컬 상황의 발생 여부를 판단하기 위한 기준값으로 정의 될 수 있다. 일 실시예에 따르면, 제 1 임계값은 메모리의 용량을 기반으로 결정될 수 있다. 예를 들어, 제 1 임계값은 50을 메모리 용량(예: 2GB, 4GB, 및/또는 8GB)으로 나눈 값을 포함할 수 있다. 전자 장치의 메모 리 용량이 2GB인 경우 임계값은 약 25%로 결정될 수 있고, 메모리 용량이 8GB인 경우 임계값은 약 12.5%로 결정 될 수 있다. 일 실시예에 따르면, 메모리 용량이 적은 전자 장치는 메모리에 할당된 프로세스가 종료될 확 률이 상대적으로 메모리 용량이 큰 전자 장치보다 높고, 메모리 크리티컬 상황임을 판단하기 위한 기준값 이 높을 수 있다. 반대로, 메모리 용량이 높은 전자 장치는 메모리 누수 문제가 발생하더라도 활용 가능한 공간 이 많기 때문에, 상대적으로 메모리에 할당된 프로세스가 종료될 확률이 낮을 수 있다. 메모리 용량이 높 은 전자 장치는 일시적으로 프로세스가 종료되는 경우에도 사용자가 불편함을 체감할 수 있으므로, 메모리 크리 티컬 상황임을 판단하기 위한 기준값이 낮을 수 있다. 일 실시예에 따르면, 저용량(예: 약 4GB 이하)의 메모리가 탑재된 전자 장치는 추가적으로 적어도 하나의 프로세스를 패키지 단위로 설정하고, 메모리 내에서 패키지 단위로 종료된 비율을 확인할 수 있다. 일 실 시예에 따르면, 저용량의 전자 장치는 메모리 내에서 패키지 단위로 종료된 비율이 약 50%를 초과하 는 경우 메모리 크리티컬 상황임을 판단할 수 있다. 예를 들어, 저용량의 전자 장치는 하나의 사이클 을 기준으로 적어도 하나의 프로세스가 종료되는 상황이 차지하는 비율을 확인하고, 상기 비율이 제 1 임계값을 초과하는지 여부를 확인할 수 있다. 저용량의 전자 장치는 상기 비율이 제 1 임계값을 초과할 때, 추가적 으로 상기 프로세스를 패키지 단위(예: 하나의 어플리케이션 프로그램을 하나의 패키지로 구분)로 그룹화하고, 메모리 내에서 패키지 단위로 종료된 비율이 약 50%를 초과하는지 여부를 확인할 수 있다. 예를 들어, 제1 어플리케이션 프로그램이 패키지 단위로 그룹화된 상태에서, 하나의 사이클을 기반으로 제 1 어플리케이션 프 로그램이 중복적으로 실행되는 경우 중복 실행된 횟수는 카운팅하지 않을 수 있다. 제 1 어플리케이션 프로그램 이 고사양의 프로그램인 경우 중복 실행될 때, 일시적으로 다수의 프로세스가 종료될 수 있고, 이로 인해 메모 리 크리티컬 상황이 감지될 수 있다. 일 실시예에 따르면, 저용량의 전자 장치는 적어도 하나의 프로 세스를 패키지 단위로 그룹화함으로써, 메모리 크리티컬 상황이 발생되는 오류를 방지할 수 있다. 저용량 의 전자 장치는 상기 패키지 단위로 종료된 비율이 50%를 초과하는 경우 메모리 크리티컬 상황임을 판단할 수 있다. 일 실시예에 따르면, 저용량의 전자 장치에서 추가적으로 패키지 단위의 종료 비율을 확인하는 것은 고사 양의 게임과 같은 특정 어플리케이션 프로그램이 실행되는 경우 일시적으로 다수의 프로세스가 종료되는 상황이 발생할 수 있고, 프로세스의 종료 비율만으로 메모리 크리티컬 상황 감지에 오류가 발생할 수 있기 때문이 다. 일 실시예에 따르면, 저용량의 전자 장치는 추가적으로 메모리 내에서 패키지 단위로 종료된 비율을 비교 및 분석하여, 메모리 크리티컬 상황을 확인할 수 있다. 예를 들어, 저용량의 전자 장치는 패키 지 단위로 메모리 크리티컬 상황을 재차 확인함으로써, 일시적으로 발생하게 된 메모리 크리티컬 상황 의 발생 오류를 방지할 수 있다. 도 5는 본 발명의 다양한 실시예에 따른 메모리 부족 상황에 따른 메모리 관리 방법을 도시한 흐름도이다. 일 실시예에 따르면, 전자 장치(예: 도 1의 전자 장치)는 적어도 하나의 어플리케이션 프로그램이 50회 실 행되는 주기를 하나의 사이클로 설정하고, 하나의 사이클을 기반으로 메모리가 부족한 상황(예: 메모리 크리티 컬 상황)이 발생했는지 여부를 확인할 수 있다. 일 실시예에 따르면, 전자 장치는 하나의 사이클을 기반으 로 메모리(예: 도 1의 메모리)에 할당된 적어도 하나의 프로세스가 종료되는 비율을 확인할 수 있고, 상기 비율이 설정된 제 1 임계값을 초과하는 경우 메모리가 부족한 상황이 발생하였음을 판단할 수 있다. 전자 장치 는 제 2 임계값(예: 4번)의 사이클 동안 연속적으로 메모리가 부족한 상황이 발생하게 되면, 리부팅 동작 을 수행할 수 있다. 동작 501에서 전자 장치의 프로세서(예: 도 1의 프로세서)는 제 1 사이클을 기반으로 메모리에 할당된 적어도 하나의 프로세스가 종료되는 비율을 확인할 수 있다. 예를 들어, 제 1 사이클은 전자 장치 에서 프로그램(예: 어플리케이션 프로그램)이 50회 실행되는 주기로 정의될 수 있다. 프로세서는 제 1 사 이클 동안 적어도 하나의 프로세스가 30번 종료되는 경우 상기 비율은 60%로 계산될 수 있다. 프로세서는 제 1 사이클 동안 적어도 하나의 프로세스가 10번 종료되는 경우 상기 비율은 20%로 계산될 수 있다. 일 실시예 에 따르면, 프로세서는 프로그램이 50회 실행되는 1 주기(예: 제 1 사이클) 동안 메모리(예: 도 1의 메모 리)에 할당된 적어도 하나의 프로세스가 종료되는 비율을 계산할 수 있다. 동작 503에서 프로세서는 상기 확인된 비율이 제 1 임계값을 초과하는지 여부를 판단할 수 있다. 일 실시 예에 따르면, 제 1 임계값은 메모리가 부족한 상황임을 판단하기 위한 기준값으로 정의될 수 있고, 메모리의 용 량을 기반으로 결정될 수 있다. 예를 들어, 메모리의 용량이 클수록 제 1 임계값은 작게 설정될 수 있다. 메모 리의 용량이 크다는 것은 메모리가 부족한 상황이 많이 발생하지 않는다고 해석되며, 메모리가 부족한 상황임을 판단하기 위해 제 1 임계값이 낮게 설정될 수 있다. 동작 505에서 프로세서는 상기 확인된 비율이 상기 제 1 임계값을 초과하는 횟수가 연속적으로 발생하여 제 2 임계값을 초과하는 경우 전자 장치를 리부팅할 수 있다. 예를 들어, 제 1 사이클을 주기로 상기 확인 된 비율이 제 1 임계값을 초과하는 상황을 메모리 크리티컬 상황이라고 지칭할 수 있다. 제 2 임계값은 상기 메 모리 크리티컬 상황이 연속적으로 발생된 횟수를 판단하기 위한 기준값일 수 있다. 일 실시예에 따르면, 제 2 임계값은 약 4회일 수 있고, 메모리 크리티컬 상황이 4번의 사이클동안 연속적으로 발생하는 상황은 메모리 크 리티컬 로우 상황이라고 지칭할 수 있다. 프로세서는 메모리 크리티컬 상황이 4번의 사이클 동안 연속적으 로 발생하는 경우(메모리 크리티컬 로우 상황이 발생한 경우) 메모리의 부족한 상황이 해결되지 않고, 지속적으 로 메모리 문제가 발생하는 상황이라고 판단할 수 있다. 프로세서는 메모리 부족 상황을 해결하기 위해 리 부팅 동작을 수행할 수 있다. 도 6은 본 발명의 다양한 실시예에 따른 메모리 용량을 고려하여 메모리를 관리하는 방법을 도시한 흐름도이다. 도 6의 동작 601 내지 동작 603은 도 5의 동작 501 내지 동작 503과 동일한 동작이 수행될 수 있다. 도 6의 흐 름도는 도 5와 비교하여, 추가적으로 메모리 용량이 저사양(예: 4GB 이하)인지 여부를 판단하고, 저사양인 경우 의 추가 동작을 수행하는 흐름도이다.동작 601에서 전자 장치의 프로세서(예: 도 1의 프로세서)는 제 1 사이클을 기반으로 적어도 하나의 프로세스가 종료되는 비율을 확인할 수 있다. 예를 들어, 제 1 사이클은 전자 장치에서 프로그램(예: 어플 리케이션 프로그램)이 50회 실행되는 주기로 정의될 수 있다. 동작 603에서 프로세서는 상기 확인된 비율이 제 1 임계값을 초과하는지 여부를 판단할 수 있다. 일 실시 예에 따르면, 제 1 임계값은 메모리가 부족한 상황임을 판단하기 위한 기준값으로 정의될 수 있고, 메모리의 용 량을 기반으로 결정될 수 있다. 예를 들어, 메모리의 용량이 클수록 제 1 임계값은 작게 설정될 수 있다. 일 실 시예에 따르면, 상기 확인된 비율이 제 1 임계값을 초과하는 상황을 메모리 크리티컬 상황이라고 지칭할 수 있 다. 동작 603에서 상기 확인된 비율이 제 1 임계값을 초과하면, 동작 605에서 프로세서는 메모리의 용량이 저 사양인지 여부를 확인할 수 있다. 예를 들어, 메모리의 용량이 저사양인 전자 장치는 메모리의 용량이 약 4GB 이하인 전자 장치를 포함할 수 있다. 메모리의 용량이 저사양인 전자 장치는 특정 어플리케이션 프로그램 이 실행될 때, 메모리의 용량이 고사양인 전자 장치보다 메모리가 부족한 상황(예: 메모리 크리티컬 상황)이 상 대적으로 자주 발생할 수 있다. 일 실시예에 따르면, 저사양의 메모리가 장착된 전자 장치는 추가적으로 메모리에 할당된 적어도 하나의 프로세스를 패키지로 그룹화하여, 상기 패키지를 기반으로 종료되는 비율을 확 인할 수 있다. 동작 605에서 메모리의 용량이 저사양이 아닌 경우 동작 607에서 프로세서는 상기 확인된 비율이 제 1 임 계값을 초과하는 횟수(예: 메모리 크리티컬 상황의 발행 횟수)가 연속적으로 발생하여 제 2 임계값(예: 약 4 회)을 초과하는지 여부를 확인할 수 있다. 예를 들어, 프로세서는 하나의 사이클에 기반한 메모리 크리티 컬 상황이 연속적으로 4회 이상 발생하는지 여부를 확인할 수 있다. 프로세서는 4번의 사이클 주기 동안 메모리 크리티컬 상황이 계속적으로 발생하게 되면, 메모리의 부족한 상황이 해결되지 않고 있음을 판단할 수 있다. 일 실시예에 따르면, 제 2 임계값은 4회일 수 있고, 메모리 크리티컬 상황이 4번의 사이클동안 연속적으 로 발생하는 상황은 메모리 크리티컬 로우 상황이라고 지칭할 수 있다. 다른 실시예에 따르면, 프로세서는 메모리 크리티컬 로우 상황이 발생할 때, 서버(예: 도 1의 서버) 에 전자 장치의 로그(log) 정보를 전송할 수 있고, 서버는 상기 로그 정보를 메모리에 저장할 수 있 다. 예를 들어, 서버는 메모리 크리티컬 로우 상황에 대응하는 로그 정보를 수집할 수 있고, 상기 메모리 크리티컬 로우 상황에 대응하는 솔루션을 전자 장치에 제공할 수 있다. 동작 609에서 프로세서는 메모리 크리티컬 로우 상황(예: 메모리 크리티컬 상황이 연속적으로 4회 발생하 는 상황)이 발생하는 경우 리부팅을 수행할 수 있다. 일 실시예에 따르면, 프로세서는 메모리의 부족 문제 가 지속적으로 발생하는 경우 시스템의 초기화 동작을 수행할 수 있다. 다른 실시예에 따르면, 프로세서는 리부팅을 수행하기 전에, 제 1 사이클에 기반한 메모리 크리티컬 상황의 발생 정보 및 시간 정보를 메모리(13 0)에 로그(log) 정보로 저장할 수 있다. 다른 실시예에 따르면, 프로세서는 메모리와 관련된 문제를 확인하기 위해, 메모리에 저장된 로그 정보를 활용할 수 있다. 동작 605에서 메모리의 용량이 저사양인 경우 동작 611에서 프로세서는 패키지 단위(예: 하나의 어플리케 이션 프로그램을 하나의 패키지로 구분)를 기반으로 적어도 하나의 프로세스가 종료되는 비율이 절반(예: 약 50%) 이상인지 여부를 확인할 수 있다. 예를 들어, 프로세서는 제 1 어플리케이션 프로그램을 제 1 그룹으 로 그룹화할 수 있고, 하나의 사이클을 기반으로 제 1 어플리케이션 프로그램이 중복 실행되더라도 중복 실행된 횟수는 카운팅하지 않을 수 있다. 예를 들어, 고사양 프로그램인 제 1 어플리케이션 프로그램이 중복적으로 실 행된다면, 메모리 용량이 저사양인 전자 장치는 일시적으로 메모리에 할당된 다수의 프로세스를 종료 하게 되고, 메모리 크리티컬 상황이 발생할 수 있다. 일 실시예에 따르면, 프로세서는 고사양의 특정 프로 그램의 실행으로 인해, 메모리 크리티컬 상황이 발생하는 문제를 방지하기 위해, 메모리에 할당된 적어도 하나의 프로세스를 패키지로 그룹화하여 관리할 수 있다. 동작 611에서 프로세서는 패키지화된 적어도 하 나의 프로세스의 종료 비율이 절반 이상인지 여부를 확인할 수 있다. 동작 611에서 상기 종료 비율이 절반 이상 인 경우 동작 607로 이동할 수 있다. 동작 607에서 메모리 크리티컬 로우 상황(예: 메모리 크리티컬 상황이 연속적으로 4회 발생하는 상황)이 발생하 지 않은 경우 프로세서는 동작 613에서 제 2 사이클에 기반하여 메모리에 할당된 적어도 하나의 프로 세스를 확인할 수 있다. 다른 실시예에 따르면, 프로세서는 제 2 사이클을 시작하기 전에, 제 1 사이클에 기반한 메모리 크리티컬 상황과 관련된 정보 및 시간 정보를 전자 장치의 로그(log) 정보로 메모리에저장할 수 있다. 다른 실시예에 따르면, 전자 장치는 최근 약 25개의 사이클 동안의 메모리 크리티컬 상황 및 메모리 크리 티컬 로우 상황의 발생 횟수를 비교 및 분석할 수 있다. 전자 장치는 상기 비교 및 분석된 정보 및 메모리 에 저장된 로그 정보를 서버에 전송할 수 있다. 다른 실시예에 따르면, 서버는 전자 장치 의 종류에 따라 메모리 문제가 발생되는 상황을 분석할 수 있다. 서버는 메모리 문제가 발생한 시간을 기 반으로 메모리 문제의 발생 원인을 분석할 수 있다. 서버는 주기적으로 전자 장치에서 발생된 메모리 크리티컬 상황 및 메모리 크리티컬 로우 상황을 분석할 수 있고, 메모리 문제를 해결하기 위한 솔루션을 생성할 수 있다. 예를 들어, 솔루션은 메모리 부족 상황에 따른 가이드 정보를 나타내는 사용자 인터페이스를 화면에 표시할 수 있고, 사용자에게 알림을 제공함으로써, 상기 메모리 부족 상황을 최소화하는 데 활용될 수 있다. 다 른 실시예에 따르면, 서버는 전자 장치의 모델(예: 종류, 및/또는 타입)을 기반으로 적어도 하나의 솔루션을 제공할 수 있다. 서버는 전자 장치의 사용 패턴을 확인하여, 전자 장치의 사용이 상대 적으로 적은 새벽 시간에 맞춰서 솔루션이 적용될 수 있도록 상기 솔루션을 설계 및 생성할 수 있다. 예를 들어, 사용 패턴은 사용자가 전자 장치를 사용하는 시간 정보, 사용자가 자주 사용하는 프로그램 정보 및/ 또는 전자 장치의 시간 대별 위치 정보를 포함할 수 있다. 도 7a는 본 발명의 다양한 실시예에 따른 하나의 사이클을 기준으로 프로세스가 종료되는 비율을 검출하는 방법 을 도시한 예시도이다. 도 7b는 본 발명의 다양한 실시예에 따른 메모리 용량을 기반으로, 프로세스의 종료 비 율이 다르게 적용되는 테이블이다. 도 7a를 참조하면, 전자 장치(예: 도 1의 전자 장치)의 프로세서(예: 도 1의 프로세서)는 하나의 사 이클을 기준으로 적어도 하나의 프로그램이 실행될 때, 메모리(예: 도 1의 메모리)에 할당된 적어도 하나 의 프로세스가 종료되는지 여부를 확인할 수 있다. 적어도 하나의 프로세스가 종료되는 상황을 크리티컬 킬이라 고 지칭할 수 있다. 예를 들어, 프로세서는 \"인터넷 프로그램\"이 실행될 때, 크리티컬 킬이 발생하지 않음 을 확인할 수 있다. 프로세서는 \"게임1 프로그램\"이 실행될 때, 크리티컬 킬이 발생하였음을 확인할 수 있 다. 일 실시예에 따르면, 전자 장치는 하나의 사이클(예: 적어도 하나의 어플리케이션 프로그램이 50회 실 행되는 주기)을 기반으로 크리티컬 킬이 발생하는 비율을 계산할 수 있다. 도 7a를 참조하면, 프로세서는 총 9번의 프로그램이 실행되는 동안 3번의 크리티컬 킬이 발생하였음을 확인할 수 있고, 프로세스가 종료되는 비율이 약 33% 임을 계산할 수 있다. 도 7a는 9번의 프로그램이 실행되는 상황이 도시되었으나, 이에 한정되지 는 않는다. 일 실시예에 따르면, 전자 장치는 50번의 어플리케이션 프로그램이 실행되는 주기(예: 제 1 사 이클) 동안 적어도 하나의 프로세스가 종료되는 비율을 확인할 수 있다. 일 실시예에 따르면, 전자 장치는 하나의 사이클을 기반으로 메모리에 할당된 적어도 하나의 프로세스가 종료되는 비율을 설정된 임계값과 비교할 수 있고, 메모리가 부족한 상황(예: 메모리 크리티컬 상황)이 발생하였는지 여부를 판단할 수 있다. 도 7b를 참조하면, 전자 장치는 메모리의 용량을 기반으로 제 1 임계값(예: 기준치, 메모리 크리티컬 상황임을 판단하기 위한 기준값)이 다르게 설정될 수 있다. 예를 들어, 전자 장치는 부팅 시점에서 프레임 워크(예: 도 3의 프레임워크)를 통해 메모리의 용량을 확인할 수 있고, 상기 확인된 메모리의 용량을 기반으로 제 1 임계값을 결정할 수 있다. 일 실시예에 따르면, 메모리의 용량이 낮은 전자 장치 는 상대적으로 제 1 임계값이 높게 설정될 수 있고, 메모리의 용량이 높은 전자 장치는 상대적 으로 제 1 임계값이 낮게 설정될 수 있다. 예를 들어, 제 1 임계값은 50을 메모리 용량(예: 2GB, 4GB, 및/또는 8GB)으로 나눈 값으로 결정될 수 있다. 일 실시예에 따르면, 메모리 용량이 적은 전자 장치는 프로세스가 종료 될 확률이 상대적으로 메모리 용량이 큰 전자 장치보다 높고, 메모리 크리티컬 상황임을 판단하기 위한 기준치 가 높을 수 있다. 반대로, 메모리 용량이 높은 전자 장치는 메모리 누수 문제가 발생하더라도 활용 가능한 공간 이 많기 때문에, 상대적으로 프로세스가 종료될 확률이 낮을 수 있다. 메모리 용량이 높은 전자 장치는 일시적 으로 프로세스가 종료되는 경우에도 사용자가 불편함을 체감할 수 있으므로, 메모리 크리티컬 상황임을 판단하 기 위한 기준치가 낮을 수 있다. 도 8a는 본 발명의 다양한 실시예에 따른 하나의 사이클을 기준으로 패키지화된 프로세스가 종료되는 비율을 검 출하는 방법을 도시한 예시도이다. 도 8b는 본 발명의 다양한 실시예에 따른 패키지화된 프로세스를 기반으로 해당 프로세스가 종료되었는지 여부를 확인하는 테이블이다. 도 8a를 참조하면, 전자 장치(예: 도 1의 전자 장치)의 프로세서(예: 도 1의 프로세서)는 하나의 사 이클을 기준으로 적어도 하나의 프로그램이 실행될 때, 메모리(예: 도 1의 메모리)에 할당된 적어도 하나의 프로세스가 종료되는지 여부를 확인할 수 있다. 적어도 하나의 프로세스가 종료되는 상황을 크리티컬 킬이라 고 지칭할 수 있다. 일 실시예에 따르면, 프로세서는 적어도 하나의 프로세스를 패키지로 그룹화하여, 적 어도 하나의 프로세스가 종료되는 횟수에 반영할 수 있다. 예를 들어, 특정 어플리케이션 프로그램의 실행에 응 답하여, 수행되는 적어도 하나의 프로세스는 하나의 패키지로 그룹화될 수 있다. 일 실시예에 따르면, 패키지는 도 2의 패키지 매니저가 관리하는 패키지로 정의될 수 있다. 일 실시예에 따르면, 메모리의 용량이 저사양 인 전자 장치는 적어도 하나의 프로세스를 패키지로 그룹화할 수 있고, 패키지화된 프로세스의 종료 비율 을 기반으로 메모리 크리티컬 상황의 발생 여부를 결정할 수 있다. 일 실시예에 따르면, 저사양의 메모리가 장 착된 전자 장치는 고사양의 프로세스를 실행함에 있어서, 메모리에 할당된 다수의 프로세스가 종료될 수 있고, 메모리 크리티컬 상황이 발생될 수 있다. 전자 장치는 고사양의 프로세스의 실행에 따른 메모리 크 리티컬 상황의 발생을 방지하기 위해, 메모리에 할당된 적어도 하나의 프로세스를 패키지로 그룹화하여 관 리할 수 있다. 예를 들어, 프로세서는 패키지화된 프로세스가 중복 실행되는 경우 크리티컬 킬의 발생 여부를 카운팅하지 않을 수 있다. 예를 들어, 프로세서는 최초 \"인터넷 프로그램\"이 실행되고, \"게임1 프로그램\"이 실행되고, 다시 \"인터넷 프로그램\"이 실행되는 경우 재실행된 \"인터넷 프로그램\"에 대응되는 크리티컬 킬의 발생 여부를 무시할 수 있다. \"게임1 프로그램\"도 재차 실행되는 경우, 재실행된 \"게임1 프로그램\"에 대응되는 크리티컬 킬 의 발생 여부를 무시할 수 있다. 도 8a 및 도 8b를 참조하면, 프로세서는 총 9번의 프로그램이 실행되는 동안 3번의 크리티컬 킬이 발생하 였음을 확인할 수 있다. 하지만, 9번의 프로그램이 실행된 것 중에서 4번이 중복되어 실행되었으므로, 프로세서 는 중복 실행된 4번의 실행 과정을 카운팅하지 않을 수 있다. 일 실시예에 따르면, 프로세서는 패키 지화된 프로세스를 기반으로, 총 5번의 프로그램 실행 중에서 크리티컬 킬이 2번 발생하였음을 확인할 수 있다. 프로세서는 패키지화된 프로세스의 종료 비율을 40%로 계산할 수 있다. 일 실시예에 따르면, 프로세서 는 패키지화된 프로세스의 종료 비율이 약 50% 이상인 경우 메모리 크리티컬 상황이 발생하였다고 판단할 수 있다. 다양한 실시예에 따른 방법에 있어서, 전자 장치의 메모리를 관리하는 메모리 관리 모듈의 제어 하에 적어도 하 나의 프로세스를 실행하는 동작, 기 설정된 제 1 사이클을 기반으로 상기 적어도 하나의 프로세스가 종료되는 비율을 확인하는 동작, 상기 확인된 비율이 제 1 임계값을 초과하는 상황을 감지하는 동작, 및 상기 감지된 상 황이 연속적으로 발생하여 제 2 임계값을 초과하는 경우 리부팅 동작을 수행하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 제 1 임계값은 메모리의 용량을 기반으로 설정되는 것을 특징으로 한다. 일 실시예에 따른 방법은, 메모리의 용량을 확인하는 동작, 상기 확인된 메모리의 용량을 기반으로 상기 적어도 하나의 프로세스를 패키지로 그룹화할지 여부를 결정하는 동작, 및 상기 적어도 하나의 프로세스를 패키지화하 여, 상기 패키지가 재실행되는 경우 상기 재실행과 관련된 실행 횟수는 상기 패키지가 종료되는 비율에 반영하 지 않는 동작을 더 포함할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적 으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다.본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다."}
{"patent_id": "10-2020-0097160", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면의 설명과 관련하여, 동일 또는 유사한 구성 요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있 다. 도 1은 본 발명의 다양한 실시예들에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 본 발명의 다양한 실시예에 따른 프로그램 모듈의 블록도이다. 도 3은 본 발명의 다양한 실시예에 따른 커널 공간과 사용자 공간에서의 메모리 부족 상황을 검출하는 과정이 도시된 블록도이다. 도 4는 본 발명의 다양한 실시예에 따른 하나의 사이클을 기준으로 메모리 부족 상황을 검출하는 과정이 도시된 예시도이다. 도 5는 본 발명의 다양한 실시예에 따른 메모리 부족 상황에 따른 메모리 관리 방법을 도시한 흐름도이다. 도 6은 본 발명의 다양한 실시예에 따른 메모리 용량을 고려하여 메모리를 관리하는 방법을 도시한 흐름도이다. 도 7a는 본 발명의 다양한 실시예에 따른 하나의 사이클을 기준으로 프로세스가 종료되는 비율을 검출하는 방법 을 도시한 예시도이다. 도 7b는 본 발명의 다양한 실시예에 따른 메모리 용량을 기반으로, 프로세스의 종료 비율이 다르게 적용되는 테 이블이다. 도 8a는 본 발명의 다양한 실시예에 따른 하나의 사이클을 기준으로 패키지화된 프로세스가 종료되는 비율을 검 출하는 방법을 도시한 예시도이다. 도 8b는 본 발명의 다양한 실시예에 따른 패키지화된 프로세스를 기반으로 해당 프로그램이 종료되었는지 여부 를 확인하는 테이블이다."}
