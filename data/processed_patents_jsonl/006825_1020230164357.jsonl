{"patent_id": "10-2023-0164357", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0035406", "출원번호": "10-2023-0164357", "발명의 명칭": "분리 메모리 환경의 하이퍼바이저 성능 개선 방법 및 장치", "출원인": "한국전자통신연구원", "발명자": "김태훈"}}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "분리 메모리 환경의 하이퍼바이저 성능 개선 방법에 있어서,가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계;반환할 페이지 프레임의 주소 범위를 기설정된 페이지 크기와 비교하는 단계;상기 기설정된 페이지 크기와의 비교 결과에 따라 상기 반환할 페이지 프레임에 대한 주소 공간 매핑을 제거하는 단계;를 포함하고,상기 주소 공간 매핑을 제거하는 단계는상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같으면 연속된 페이지 프레임 단위로 주소 공간 매핑을 제거하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "청구항 1에 있어서,상기 주소 공간 매핑을 제거하는 단계는상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 작으면 페이지 프레임 별로 주소 공간 매핑을 제거하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "청구항 2에 있어서,상기 주소 공간 매핑을 제거하는 단계는상기 페이지 프레임 별로 주소 공간 매핑을 제거하는 경우, 리버스 맵(reverse map; rmap) 형태의 자료 구조에기반하여 상기 페이지 프레임에 매핑되어 있는 주소 공간의 매핑을 제거하는 것을 특징으로 하는 분리 메모리환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "청구항 2에 있어서,상기 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계는물리적으로 연속된 메모리 페이지를 기설정된 단위로 할당하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "청구항 2에 있어서,주소 범위를 기설정된 페이지 크기와 비교하는 단계는반환할 페이지 프레임의 주소 범위가 연속 할당된 페이지에 상응하는지 판단하는 단계를 포함하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "청구항 3에 있어서,공개특허 10-2025-0035406-3-상기 주소 공간 매핑을 제거하는 단계는상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같은 경우, 상기 리버스 맵의 페이지 테이블 엔트리 리스트의 연속적으로 할당된 헤드 정보를 이용하여 주소 공간 매핑을 제거하는 것을 특징으로하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "청구항 1에 있어서,상기 방법은 가상머신 내 메모리 페이지가 프리페이지에 상응하면, 프리페이지에 상응하는 메모리 페이지의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 단계를 더 포함하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "청구항 7에 있어서,상기 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 단계는상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하는 단계; 및상기 물리 주소에 프리페이지 플래그를 마킹하는 단계를 포함하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "청구항 8에 있어서,상기 방법은상기 프리페이지 플래그가 마킹된 페이지에 대하여 페이지-폴트가 발생하면, 로컬 메모리에서 초기화된 페이지를 사용하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 메모리 할당부; 및반환할 페이지 프레임의 주소 범위를 기설정된 페이지 크기와 비교하고, 상기 기설정된 페이지 크기와의 비교결과에 따라 상기 반환할 페이지 프레임에 대한 주소 공간 매핑을 제거하는 메모리 반환부;를 포함하고상기 메모리 반환부는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같으면 연속된 페이지 프레임 단위로 주소 공간 매핑을 제거하는 분리 메모리 환경의 하이퍼바이저 성능 개선 장치."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "청구항 10에 있어서,상기 메모리 반환부는상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 작으면 페이지 프레임 별로 주소 공간 매핑을 제거하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 장치."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "청구항 11에 있어서,상기 메모리 반환부는상기 페이지 프레임 별로 주소 공간 매핑을 제거하는 경우, 리버스 맵(reverse map; rmap) 형태의 자료 구조에기반하여 상기 페이지 프레임에 매핑되어 있는 주소 공간의 매핑을 제거하는 것을 특징으로 하는 분리 메모리공개특허 10-2025-0035406-4-환경의 하이퍼바이저 성능 개선 장치."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "청구항 11에 있어서,상기 메모리 할당부는물리적으로 연속된 메모리 페이지를 기설정된 단위로 할당하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 장치."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "청구항 11에 있어서,상기 메모리 반환부는반환할 페이지 프레임의 주소 범위가 연속 할당된 페이지에 상응하는지 판단하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 장치."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "청구항 12에 있어서,상기 메모리 반환부는상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같은 경우, 상기 리버스 맵의 페이지 테이블 엔트리 리스트의 연속적으로 할당된 헤드 정보를 이용하여 주소 공간 매핑을 제거하는 것을 특징으로하는 분리 메모리 환경의 하이퍼바이저 성능 개선 장치."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "청구항 10에 있어서,상기 메모리 반환부는가상머신 내 메모리 페이지가 프리페이지에 상응하면, 프리페이지에 상응하는 메모리 페이지의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 장치."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "청구항 16에 있어서,상기 메모리 반환부는상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하고, 상기 물리 주소에 프리페이지 플래그를 마킹하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 장치."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "분리 메모리 환경의 하이퍼바이저 성능 개선 방법에 있어서,가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계; 가상머신 내 메모리 페이지가 프리페이지에 상응하면, 프리페이지에 상응하는 메모리 페이지의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 단계; 및상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하는 단계;를 포함하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "청구항 18에 있어서,공개특허 10-2025-0035406-5-상기 방법은상기 물리 주소에 프리페이지 플래그를 마킹하는 단계를 더 포함하는 것을 특징으로 하는 분리 메모리 환경의하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "청구항 19에 있어서,상기 마킹된 페이지에 대하여 페이지-폴트가 발생하면, 로컬 메모리에서 초기화된 페이지를 사용하는 것을 특징으로 하는 분리 메모리 환경의 하이퍼바이저 성능 개선 방법."}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법은 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계; 반환할 페이지 프레임의 주소 범위를 기설정된 페이지 크기와 비교하는 단계; 상기 기설정된 페이지 크기와의 비교 결과에 따라 상기 반환할 페이지 프레임에 대한 주소 공간 매핑을 제거하는 단계를 포함하고, 상기 주소 공간 매핑을 제거하는 단계는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같으면 연속된 페이지 프레임 단위로 주소 공간 매핑을 제거한다."}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 분리 메모리 시스템에서 하이퍼바이저의 성능을 개선하기 위한 기술이다. 구체적으로, 본 발명은 단위 기반 메모리 페이지 반환 및 반환 메모리 정보제공을 통해 하이퍼바이저 성능을 개 선하는 기술에 관한 것이다."}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "최근 클라우드 서비스를 제공하는 데이터센터는 자원 분리 기술(resource disaggregation)을 제공하려고 관심을 보이고 있다. 자원 분리 기술은 여러 컴퓨터의 컴퓨팅 및 메모리 자원을 공유하여 효율적으로 자원을 사용하는 기술이다. 특히, 최근에는 대규모 인공지능 언어모델 학습 및 추론에 따른 메모리 사용량이 많아지고 있기 때문 에 분리 메모리 기술에 대한 요구가 많아지고 있다. 데이터센터에서는 기본적으로 가상화 기술을 이용해서 여러 사용자에게 컴퓨팅 및 메모리 자원을 제공해주고, 가상머신 단위로 자원을 할당하는 방식을 취한다. 하지만 분리 메모리 시스템이 적용될 경우 가상머신 단위에서 도 메모리 자원을 잘게 쪼개어서 관리해주어야 하는데, 이러한 부분에 대한 고려가 되어있지 않다. 예를 들어서 가상머신을 생성하면 하이퍼바이저는 주어진 메모리 영역을 가상머신에게 할당하고 관리하게 된다. 해당 가상머 신은 보통 가상머신이 끝나거나 이주될 때까지 해당 메모리 영역을 반환하지 않고 사용하게 된다. 하지만 분리 메모리 시스템이 적용되면, 자주 사용되는 메모리 페이지는 호스트 로컬 메모리에 남아있고, 자주 사용되지 않 는 메모리 페이지들은 원격 메모리로 추출되기 때문에 메모리 페이지에 대한 할당/반환이 자주 일어나며, 잘게 쪼개져서 관리되어야 한다. 이러한 관리는 가상머신이 NPT(nested page table)를 사용하고 가상머신의 물리 메모리를 수정하려고 할 때 더 복잡하게 된다. 이는 하이퍼바이저 입장에서는 가상머신에 처음 메모리를 배정하고 나면 가상머신이 실제로 사 용하고 있는 메모리를 알 수 없기 때문에 발생하는 문제이다. Balloon 드라이버 기술이 이러한 가상머신과 하이 퍼바이저의 서로 다른 메모리 뷰 문제를 해결하는 데 도움이 된다. Balloon 드라이버 기술은 하이퍼바이저에서 반환할 메모리를 달라고 가상머신에 요청을 하면 가상머신이 자신이 관리하는 메모리 중에 불필요한 메모리를 하이퍼바이저에 반환하는 기술이다. 하지만, 큰 규모로 메모리를 반환하게 되고 성능 오버헤드가 커서 분리 메 모리 시스템에는 적용하기 어렵다. 따라서, 분리 메모리 시스템에서 이러한 문제를 해결할 수 있는 기술이 필요 하다. 선행기술문헌 특허문헌 (특허문헌 0001) 국내 공개특허공보 제2010-0012263호(발명의 명칭: 반도체 스토리지 시스템 및 그 제어 방법)"}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 목적은 분리 메모리 시스템을 인지하는 가상화 시스템의 성능을 개선하는 것이다. 또한, 본 발명의 목적은 하이퍼바이저 수준에서 가상머신의 메모리 반환 단위를 확장하여 하이퍼바이저의 성능 을 개선하는 것이다. 또한, 본 발명의 목적은 반환될 메모리에 대한 힌트를 제공하여 하이퍼바이저 성능을 개선하는 것이다."}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기한 목적을 달성하기 위한 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법은 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계; 반환할 페이지 프레임의 주소 범위를 기설정된 페이지 크기와 비교하는 단계; 상기 기설정된 페이지 크기와의 비교 결과에 따라 상기 반환할 페이지 프레임에 대한 주소 공간 매핑을 제거하는 단계를 포함하고, 상기 주소 공간 매핑을 제거하는 단계는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같으면 연속된 페이지 프레임 단위로 주소 공간 매핑을 제거한다. 이때, 상기 주소 공간 매핑을 제거하는 단계는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기 보다 작으면 페이지 프레임 별로 주소 공간 매핑을 제거할 수 있다. 이때, 상기 주소 공간 매핑을 제거하는 단계는 상기 페이지 프레임 별로 주소 공간 매핑을 제거하는 경우, 리버 스 맵(reverse map; rmap) 형태의 자료 구조에 기반하여 상기 페이지 프레임에 매핑되어 있는 주소 공간의 매핑 을 제거할 수 있다. 이때, 상기 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계는 물리적으로 연속된 메모리 페이지 를 기설정된 단위로 할당할 수 있다. 이때, 주소 범위를 기설정된 페이지 크기와 비교하는 단계는 반환할 페이지 프레임의 주소 범위가 연속 할당된 페이지에 상응하는지 판단하는 단계를 포함할 수 있다. 이때, 상기 주소 공간 매핑을 제거하는 단계는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기 보다 크거나 같은 경우, 상기 리버스 맵의 페이지 테이블 엔트리 리스트의 연속적으로 할당된 헤드 정보를 이용 하여 주소 공간 매핑을 제거할 수 있다. 이때, 상기 방법은 가상머신 내 메모리 페이지가 프리페이지에 상응하면, 프리페이지에 상응하는 메모리 페이지 의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 단계를 더 포함할 수 있다. 이때, 상기 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 단계는 상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하는 단계; 및 상기 물리 주소에 프리페이지 플래그를 마킹하는 단계를 포함할 수 있다. 이때, 상기 방법은 상기 프리페이지 플래그가 마킹된 페이지에 대하여 페이지-폴트가 발생하면, 로컬 메모리에 서 초기화된 페이지를 사용할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 장치는 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 메모리 할당부; 및 반환할 페이지 프레임의 주소 범위를 기설정된 페이지 크기와 비교하고, 상기 기설정된 페이지 크기와의 비교 결과에 따라 상기 반환할 페이지 프레임에 대한 주소 공간 매핑을 제거하는 메모리 반환부를 포함하고, 상기 메모리 반환부는 상기 반환 할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같으면 연속된 페이지 프레임 단위로 주소 공간 매핑을 제거한다. 이때, 상기 메모리 반환부는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 작으면 페이 지 프레임 별로 주소 공간 매핑을 제거할 수 있다. 이때, 상기 메모리 반환부는 상기 페이지 프레임 별로 주소 공간 매핑을 제거하는 경우, 리버스 맵(reverse map; rmap) 형태의 자료 구조에 기반하여 상기 페이지 프레임에 매핑되어 있는 주소 공간의 매핑을 제거할 수 있다. 이때, 상기 메모리 할당부는 물리적으로 연속된 메모리 페이지를 기설정된 단위로 할당할 수 있다. 이때, 상기 메모리 반환부는 반환할 페이지 프레임의 주소 범위가 연속 할당된 페이지에 상응하는지 판단할 수 있다. 이때, 상기 메모리 반환부는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같은 경우, 상기 리버스 맵의 페이지 테이블 엔트리 리스트의 연속적으로 할당된 헤드 정보를 이용하여 주소 공간 매 핑을 제거할 수 있다. 이때, 상기 메모리 반환부는 가상머신 내 메모리 페이지가 프리페이지에 상응하면, 프리페이지에 상응하는 메모 리 페이지의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달할 수 있다. 이때, 상기 메모리 반환부는 상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하고, 상기 물리 주 소에 프리페이지 플래그를 마킹할 수 있다. 또한, 상기한 목적을 달성하기 위한 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법은 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계; 가상머신 내 메모리 페이지가 프리페이 지에 상응하면, 프리페이지에 상응하는 메모리 페이지의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하 는 단계; 및 상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하는 단계를 포함한다. 이때, 상기 방법은 상기 물리 주소에 프리페이지 플래그를 마킹하는 단계를 더 포함할 수 있다. 이때, 상기 방법은 상기 마킹된 페이지에 대하여 페이지-폴트가 발생하면, 로컬 메모리에서 초기화된 페이지를 사용할 수 있다."}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 따르면, 분리 메모리 시스템을 인지하는 가상화 시스템의 성능을 개선할 수 있다. 또한, 본 발명은 하이퍼바이저 수준에서 가상머신의 메모리 반환 단위를 확장하여 하이퍼바이저의 성능을 개선 할 수 있다. 또한, 본 발명은 반환될 메모리에 대한 힌트를 제공하여 하이퍼바이저 성능을 개선할 수 있다."}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 이점 및 특징, 그리고 그것들을 달성하는 방법은 첨부되는 도면과 함께 상세하게 후술되어 있는 실시 예들을 참조하면 명확해질 것이다. 그러나 본 발명은 이하에서 개시되는 실시예들에 한정되는 것이 아니라 서로 다른 다양한 형태로 구현될 것이며, 단지 본 실시예들은 본 발명의 개시가 완전하도록 하며, 본 발명이 속하는"}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "기술분야에서 통상의 지식을 가진 자에게 발명의 범주를 완전하게 알려주기 위해 제공되는 것이며, 본 발명은 청구항의 범주에 의해 정의될 뿐이다. 명세서 전체에 걸쳐 동일 참조 부호는 동일 구성 요소를 지칭한다. 비록 \"제1\" 또는 \"제2\" 등이 다양한 구성요소를 서술하기 위해서 사용되나, 이러한 구성요소는 상기와 같은 용 어에 의해 제한되지 않는다. 상기와 같은 용어는 단지 하나의 구성요소를 다른 구성요소와 구별하기 위하여 사 용될 수 있다. 따라서, 이하에서 언급되는 제1 구성요소는 본 발명의 기술적 사상 내에서 제2 구성요소일 수도 있다. 본 명세서에서 사용된 용어는 실시예를 설명하기 위한 것이며 본 발명을 제한하고자 하는 것은 아니다. 본 명세 서에서, 단수형은 문구에서 특별히 언급하지 않는 한 복수형도 포함한다. 명세서에서 사용되는 \"포함한다 (comprises)\" 또는 \"포함하는(comprising)\"은 언급된 구성요소 또는 단계가 하나 이상의 다른 구성요소 또는 단 계의 존재 또는 추가를 배제하지 않는다는 의미를 내포한다. 본 명세서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함 께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다."}
{"patent_id": "10-2023-0164357", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "다른 정의가 없다면, 본 명세서에서 사용되는 모든 용어는 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자에게 공통적으로 이해될 수 있는 의미로 해석될 수 있다. 또한, 일반적으로 사용되는 사전에 정의되어 있는 용어들은 명백하게 특별히 정의되어 있지 않는 한 이상적으로 또는 과도하게 해석되지 않는다. 이하, 첨부된 도면을 참조하여 본 발명의 실시예들을 상세히 설명하기로 하며, 도면을 참조하여 설명할 때 동일 하거나 대응하는 구성 요소는 동일한 도면 부호를 부여하고 이에 대한 중복되는 설명은 생략하기로 한다. 도 1은 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법을 나타낸 흐름도이다. 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법은 컴퓨팅 디바이스, 서버와 같은 하이퍼바이저 성능 개선 장치에서 수행될 수 있다. 도 1을 참조하면, 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법은 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계(S110), 반환할 페이지 프레임의 주소 범위를 기설정된 페이 지 크기와 비교하는 단계(S120) 및 상기 기설정된 페이지 크기와의 비교 결과에 따라 상기 반환할 페이지 프레 임에 대한 주소 공간 매핑을 제거하는 단계(S130)를 포함하고, 상기 주소 공간 매핑을 제거하는 단계는 상기 반 환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같으면 연속된 페이지 프레임 단위로 주소 공간 매핑을 제거한다. 이때, 상기 주소 공간 매핑을 제거하는 단계(S130)는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이 지 크기보다 작으면 페이지 프레임 별로 주소 공간 매핑을 제거할 수 있다. 이때, 상기 주소 공간 매핑을 제거하는 단계(S130)는 상기 페이지 프레임 별로 주소 공간 매핑을 제거하는 경우, 리버스 맵(reverse map; rmap) 형태의 자료 구조에 기반하여 상기 페이지 프레임에 매핑되어 있는 주소 공간의 매핑을 제거할 수 있다. 이때, 상기 가상 머신에 기설정된 단위로 메모리 페이지들을 할당(S110)하는 단계는 물리적으로 연속된 메모리 페이지를 기설정된 단위로 할당할 수 있다. 이때, 주소 범위를 기설정된 페이지 크기와 비교하는 단계(S120)는 반환할 페이지 프레임의 주소 범위가 연속 할당된 페이지에 상응하는지 판단하는 단계를 포함할 수 있다. 이때, 상기 주소 공간 매핑을 제거하는 단계(S130)는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이 지 크기보다 크거나 같은 경우, 상기 리버스 맵의 페이지 테이블 엔트리 리스트의 연속적으로 할당된 헤드 정보 를 이용하여 주소 공간 매핑을 제거할 수 있다. 이때, 상기 방법은 가상머신 내 메모리 페이지가 프리페이지에 상응하면, 프리페이지에 상응하는 메모리 페이지 의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 단계를 더 포함할 수 있다. 이때, 상기 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 단계는 상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하는 단계; 및 상기 물리 주소에 프리페이지 플래그를 마킹하는 단계를 포함할 수 있다. 이때, 상기 방법은 상기 프리페이지 플래그가 마킹된 페이지에 대하여 페이지-폴트가 발생하면, 로컬 메모리에 서 초기화된 페이지를 사용할 수 있다. 도 2는 본 발명의 다른 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법을 나타낸 흐름도이다. 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법은 컴퓨팅 디바이스, 서버와 같은 하이퍼바이저 성능 개선 장치에서 수행될 수 있다. 도 2를 참조하면, 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법은 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 단계(S210), 가상머신 내 메모리 페이지가 프리페이지에 상응하면, 프리페이지에 상응하는 메모리 페이지의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달하는 단 계(S220) 및 상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하는 단계(S230)를 포함한다. 이때, 상기 방법은 상기 물리 주소에 프리페이지 플래그를 마킹하는 단계를 더 포함할 수 있다. 이때, 상기 방법은 상기 마킹된 페이지에 대하여 페이지-폴트가 발생하면, 로컬 메모리에서 초기화된 페이지를 사용할 수 있다. 이하, 도 3 내지 도 6을 참조하여 본 발명의 실시예들을 상세하게 설명한다. 도 3은 메모리 페이지 반환을 위한 rmap 선회 및 주소공간 매핑 제거 과정을 개념적으로 나타낸다. 가상화 시스템에서 하이퍼바이저는 처음 가상머신을 생성할 때 메모리를 크게 할당한 다음, 가상머신이 종료 혹 은 이주되기 전까지는 메모리를 반환하지 않고 사용할 수 있다. 따라서, 메모리를 반환하는 메커니즘에 대한 성 능 고려를 하지 않아도 되었다. 하지만 분리 메모리 시스템에서는 사용하고 있는 메모리 중에 자주 사용하는 메 모리의 경우에는 로컬 메모리에 두고 자주 사용하지 않는 메모리는 반환하여 원격 메모리로 추출해야 하기 때문 에 메모리의 할당과 반환, 프로세스 주소공간에 대한 수정이 자주 일어날 수 있다. 메모리 페이지가 원격 메모리로 이동해야 하는 경우, 하이퍼바이저는 해당 페이지의 가상머신 프로세스 주소공 간에 대한 매핑을 제거한 후 원격 메모리로 데이터를 전달하는 방식을 사용할 수 있다. 하나의 페이지는 페이지 공유를 통해서 다른 주소공간에서도 매핑이 되어있을 수 있으므로, 운영체제는 도 3과 같은 rmap(reverse map) 이라는 자료구조를 만들고, 하나의 페이지가 매핑되어 있는 주소공간을 인덱싱할 수 있다. 따라서, 하나의 페이지를 반환하기 위해서는 rmap을 선회하면서 각 주소공간에 있는 매핑을 제거하는 방식으로 매핑 제거를 수행하게 된다. 단, 가상머신 내에서도 가상머신의 프로세스에 의해서 주소공간이 수정될 수 있으 므로 이러한 매핑제거는 주소공간에 대한 락(lock)을 통해서 수행될 수 있다. 이렇게 메모리 페이지를 반환하기 위해서는 rmap을 선회하고 각 주소공간의 페이지 테이블 엔트리를 클리어 시 키는 작업을 해야 하기 때문에 많은 오버헤드가 발생할 수 있다. 기존의 가상화 시스템에서는 가상머신이 이주 하거나 종료될 경우에만 이러한 메모리 페이지 반환을 수행하였는데, 분리 메모리 시스템을 적용하게 되면, 이 러한 메모리 페이지 반환이 가상머신 실행 중간에 자주 발생할 수 있기 때문에 이 부분에 대한 성능 개선이 필 요할 수 있다. 따라서, 본 발명에서는 이러한 가상머신의 메모리 반환 단위를 키워서 빠르게 메모리 반환을 수 행할 수 있도록 하여 분리 메모리 환경에서의 하이퍼바이저 성능을 개선할 수 있다. 위의 메모리 페이지 반환의 문제점은 rmap을 통해서 리스트를 선회하기 때문에 수많은 포인터에 대한 추적이 필 요하고, 주소공간에 대한 락을 잡고 수행해야 하기 때문에 가상머신이나 호스트에서 해당 주소공간에 접근하고 있을 때는 수정을 할 수 없게 되는 단점이 발생할 수 있다. 도 4는 배치-언맵 기법의 rmap에 대한 단위 기반 초기화 방법을 개념적으로 나타내다. 본 발명에서는 가상머신의 메모리 페이지들을 물리적으로 연속적인 단위로 할당하고, 도 4와 같이 연속적인 페 이지 프레임에 대한 영역을 클리어 시키는 방법을 사용하고, 이를 배치-언맵(Batched Unmap)이라고 명명하여 제 안한다. 연속적으로 할당되어 있는 페이지 프레임들을 반환할 때, 해당 rmap의 페이지 테이블 엔트리 리스트에 대한 헤 드가 연속적으로 할당되어 있기 때문에 이 범위를 초기화하는 방식을 사용할 수 있다. 이는 물리적으로 연속된 페이지 프레임에 대해서 사용할 수 있는 기법이나, 분리 메모리 시스템에서는 공간적인 지역성을 살리기 위해서 프리페치를 주로 사용하기 때문에 이러한 연속된 페이지를 할당하는 것이 성능향상에 도움이 될 수 있다. 따라 서, 분리 메모리 시스템에서는 본 발명에서 제안하는 배치-언맵 기술이 잘 사용될 수 있다. 또한, 만약 연속적 으로 할당되어 있는 페이지가 아닌 경우에도 기존의 rmap을 선회하는 기술을 사용하기 때문에 페이지 반환이 오 동작하지 않는다. 도 5는 본 발명의 일 실시예에 따른 배치-언맵 기법을 나타낸 흐름도이다. 분리 메모리 시스템에서 자주 사용하지 않는 메모리 페이지로 선정되어 메모리 반환이 필요한 경우 큰 단위로 할당되어 있는 페이지를 반환하고, 이를 반환하기 위해서 배치-언맵의 프로세스를 거칠 수 있다. 우선 반환할 주소의 범위가 연속 할당된 페이지인지 확인한다. 이는 배치-언맵을 할 수 있는 메모리 페이지인지 판단하는 단 계이고, 만약 연속 할당 페이지보다 작은 크기라면 불연속 되어있는 페이지들이므로 기존의 rmap선회 방법을 수 행할 수 있다. 또한 배치-언맵이 가능한 연속 할당 페이지들이라도 선회할 리스트가 존재하지 않는다면 기존의 방법을 수행하게 된다. 이를 통해서 걸러진 배치-언맵 가능 페이지들의 rmap범위를 선정하고, 이 범위에 대해서 0으로 초기화 하는 방법을 통해서 배치-언맵이 수행되게 된다. 다음은 분리 메모리 환경에서 가상화 시스템 상의 하이퍼바이저와 가상머신 간의 메모리 뷰(view)에 대한 합의 를 제공해주는 기술에 대하여 설명한다. 가상화 시스템에서 하이퍼바이저는 처음 가상머신을 생성할 때 메모리 를 할당해준 이후에 해당 메모리에 대한 컨텍스트를 알 수 있는 방법이 없다. 즉, 가상머신에게 할당된 메모리 를 가상머신이 잘 쓰고 있는지, 해당 메모리 페이지가 쓰이는 메모리 페이지인지 안 쓰이는 메모리 페이지인지 알 수 있는 방법이 없다. 이러한 정보의 부재가 분리 메모리 시스템에서의 비효율성을 유발시키게 된다. 예를 들어서 가상머신에 배정된 메모리 페이지가 가상머신 내부의 어떠한 프로세스에 의해서도 할당되지 않을 수 있는데, 이에 대한 정보는 하이퍼바이저 입장에서는 알 수가 없다. 따라서, 분리 메모리 시스템 환경에서 현 재의 하이퍼바이저는 해당 페이지를 가상머신으로부터 반환하고자 한다면, 반환 전에 해당 메모리페이지의 데이 터는 따로 저장되어야 한다. 즉, 가상머신에서 자주 사용하지 않아 원격 메모리로 추출된 이후 가상머신 내 프 로세스에 의해서 프리된 페이지라고 하더라도 다시 그 페이지에 접근한다면, 실제로는 프리페이지이기 때문에 로컬 메모리로 가지고 오지 않아도 되는데, 원격 메모리에서 페이지를 가지고 와서 저장을 해야 한다. 본 발명의 일 실시예에 따른 프리페이지 힌트 제공 기능(FPA-Free Page Awareness)은 이러한 프리페이지에 대 한 정보를 하이퍼바이저에 전달하는 기능을 통해서 위의 문제점을 해결할 수 있다. 한 메모리 페이지가 가상머 신 내에서 프리페이지라면, 분리 메모리 시스템 하이퍼바이저에 의해서 원격 메모리로 추출된다고 하더라도 이 페이지의 데이터를 유지할 필요가 없고, 사용 중이었던 데이터가 분리 메모리 시스템에 의해서 원격 메모리로 추출되었다가 프리페이지가 되더라도 해당 페이지의 데이터를 유지하지 않아도 되는 것이다. 도 6은 프리페이지 힌트 제공 기능의 수행 과정을 개념적으로 나타낸 도면이다. 프리페이지 힌트 제공을 위해서는 가상머신 내의 응용 프로그램과 커널 모듈의 도움이 필요하다. 본 발명에서는 응용 프로그램을 수정하여도 되지만, 다른 예로 응용 프로그램을 수정하지 않고 유저레벨에 가상머신 도구를 만 들어 프리페이지들의 가상주소(guest virtual address)를 가상머신 도구 모듈에 전송할 수 있다. 가상머신 도구 모듈은 프리페이지의 가상주소에 따른 물리주소(guest physical address)를 생성하여, 하이퍼바이저에게 프리페 이지 힌트를 하이퍼 콜의 형태로 전달하는 LKM(Loadable Kernel Module)로, 하이퍼바이저는 이 하이퍼 콜의 파 라미터를 받아서 프리페이지를 인지한 후 페이지에 대한 프리페이지 플래그를 마킹하는 방법을 사용할 수 있다. 프리페이지 플래그가 마킹된 페이지의 경우 해당 페이지에 페이지-폴트가 발생하더라도, 원격 메모리에서 페치 하지 않고, 로컬 메모리에 초기화된 페이지를 사용한다. 이를 통해서 원격 메모리에 대한 접근의 횟수를 줄일 수 있게 된다. 도 7은 본 발명의 일 실시예에 따른 하이퍼바이저 성능 개선 기술 적용 시 시스템 성능을 나타내는 그래프이다. 도 7을 참조하면, Graph500, XSBench, BC 벤치마크를 분리 메모리 시스템에서 수행하였을 때 데이터의 로딩에 대한 성능을 DCM(Disaggregated Cloud Memory with Elastic Block Management)을 사용하였을 때의 성능에 정규 화한 그래프이며, 호스트 로컬 메모리의 크기는 각 벤치마크가 총 사용하는 메모리양의 30%로 고정하였을 때 결 과를 표현한다. 결과를 보면 배치-언맵(+BU)과 다른 성능 최적화 기법을 사용하였을 때 DCM대비 평균 29.7%정도 의 성능향상을 나타내며, 다른 성능 최적화 기법을 적용한 것 대비해서 배치-언맵은 평균 14%정도의 성능 향상 을 나타낸다. 또한, 프리페이지 힌트 제공 기능(+FPA)를 사용하게 되면 추가적으로 평균 5.5%의 성능이 향상되 는 것을 알 수 있다. 도 8은 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 장치를 나타낸 블록도이다. 도 8을 참조하면, 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 장치는 가상 머신에 기설정된 단위로 메모리 페이지들을 할당하는 메모리 할당부 및 반환할 페이지 프레임의 주소 범위를 기설 정된 페이지 크기와 비교하고, 상기 기설정된 페이지 크기와의 비교 결과에 따라 상기 반환할 페이지 프레임에 대한 주소 공간 매핑을 제거하는 메모리 반환부를 포함하고, 상기 메모리 반환부는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같으면 연속된 페이지 프레임 단위로 주소 공간 매핑을 제거한다. 이때, 상기 메모리 반환부는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 작으면 페이지 프레임 별로 주소 공간 매핑을 제거할 수 있다. 이때, 상기 메모리 반환부는 상기 페이지 프레임 별로 주소 공간 매핑을 제거하는 경우, 리버스 맵 (reverse map; rmap) 형태의 자료 구조에 기반하여 상기 페이지 프레임에 매핑되어 있는 주소 공간의 매핑을 제 거할 수 있다. 이때, 상기 메모리 할당부는 물리적으로 연속된 메모리 페이지를 기설정된 단위로 할당할 수 있다. 이때, 상기 메모리 반환부는 반환할 페이지 프레임의 주소 범위가 연속 할당된 페이지에 상응하는지 판단 할 수 있다. 이때, 상기 메모리 반환부는 상기 반환할 페이지 프레임의 범위가 상기 기설정된 페이지 크기보다 크거나 같은 경우, 상기 리버스 맵의 페이지 테이블 엔트리 리스트의 연속적으로 할당된 헤드 정보를 이용하여 주소 공 간 매핑을 제거할 수 있다. 이때, 상기 메모리 반환부는 가상머신 내 메모리 페이지가 프리페이지에 상응하면, 프리페이지에 상응하는 메모리 페이지의 가상 주소를 커널 레벨의 가상머신 도구 모듈에 전달할 수 있다. 이때, 상기 메모리 반환부는 상기 가상 주소에 상응하는 물리 주소를 하이퍼바이저에게 전달하고, 상기 물 리 주소에 프리페이지 플래그를 마킹할 수 있다. 도 9은 실시예에 따른 컴퓨터 시스템의 구성을 나타낸 도면이다. 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 장치는 컴퓨터로 읽을 수 있는 기록매체와 같은 컴 퓨터 시스템에서 구현될 수 있다. 컴퓨터 시스템은 버스를 통하여 서로 통신하는 하나 이상의 프로세서, 메모리, 사용자 인터페이스 입력 장치, 사용자 인터페이스 출력 장치 및 스토리지를 포함할 수 있다. 또한, 컴퓨터 시스템은 네트워크에 연결되는 네트워크 인터페이스를 더 포함할 수 있다. 프로세서 는 중앙 처리 장치 또는 메모리나 스토리지에 저장된 프로그램 또는 프로세싱 인스트럭션들 을 실행하는 반도체 장치일 수 있다. 메모리 및 스토리지는 휘발성 매체, 비휘발성 매체, 분리형 매체, 비분리형 매체, 통신 매체, 또는 정보 전달 매체 중에서 적어도 하나 이상을 포함하는 저장 매체일 수 있 다. 예를 들어, 메모리는 ROM이나 RAM을 포함할 수 있다. 본 발명에서 설명하는 특정 실행들은 실시예들로서, 어떠한 방법으로도 본 발명의 범위를 한정하는 것은 아니다. 명세서의 간결함을 위하여, 종래 전자적인 구성들, 제어시스템들, 소프트웨어, 상기 시스템들의 다른 기능적인 측면들의 기재는 생략될 수 있다. 또한, 도면에 도시된 구성 요소들 간의 선들의 연결 또는 연결 부재 들은 기능적인 연결 및/또는 물리적 또는 회로적 연결들을 예시적으로 나타낸 것으로서, 실제 장치에서는 대체 가능하거나 추가의 다양한 기능적인 연결, 물리적인 연결, 또는 회로 연결들로서 나타내어질 수 있다. 또한, “ 필수적인”, “중요하게” 등과 같이 구체적인 언급이 없다면 본 발명의 적용을 위하여 반드시 필요한 구성 요 소가 아닐 수 있다. 따라서, 본 발명의 사상은 상기 설명된 실시예에 국한되어 정해져서는 아니되며, 후술하는 특허청구범위뿐만 아 니라 이 특허청구범위와 균등한 또는 이로부터 등가적으로 변경된 모든 범위는 본 발명의 사상의 범주에 속한다 고 할 것이다."}
{"patent_id": "10-2023-0164357", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법을 나타낸 흐름도이다. 도 2는 본 발명의 다른 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 방법을 나타낸 흐름도이다. 도 3은 메모리 페이지 반환을 위한 rmap 선회 및 주소공간 매핑 제거 과정을 개념적으로 나타낸다. 도 4는 배치-언맵 기법의 rmap에 대한 단위 기반 초기화 방법을 개념적으로 나타내다. 도 5는 본 발명의 일 실시예에 따른 배치-언맵 기법을 나타낸 흐름도이다. 도 6은 프리페이지 힌트 제공 기능의 수행 과정을 개념적으로 나타낸 도면이다. 도 7은 본 발명의 일 실시예에 따른 하이퍼바이저 성능 개선 기술 적용 시 시스템 성능을 나타내는 그래프이다. 도 8은 본 발명의 일 실시예에 따른 분리 메모리 환경의 하이퍼바이저 성능 개선 장치를 나타낸 블록도이다. 도 9은 실시예에 따른 컴퓨터 시스템의 구성을 나타낸 도면이다."}
