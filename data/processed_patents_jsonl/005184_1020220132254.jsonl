{"patent_id": "10-2022-0132254", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0080303", "출원번호": "10-2022-0132254", "발명의 명칭": "이진화 신경망", "출원인": "주식회사 딥엑스", "발명자": "김녹원"}}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "BNN(Binarized Neural Network)을 위한 신경 프로세싱 유닛으로서,이진화 된(binarized) 피처 맵(Feature map)과 이진화 된 가중치를 이용하여 합성곱(Convolution)을 수행하는제1 블록; 및상기 제1 블록의 출력을 배치-정규화(batch Normalization) 하도록 구성된 제2 블록;를 포함하고,상기 제1 블록과 상기 제2 블록 사이에는 임의 크기의 레지스터가 배치되고,상기 제1 블록과 상기 제2 블록 각각은 하나 또는 복수의 프로세싱 엔진들을 포함하고,상기 하나 또는 복수의 프로세싱 엔진들은 파이프라인 형태로 연결되어 있는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 제1 블록 또는 상기 제2 블록은 입력단과 출력단 사이에 배치된 라인 버퍼를 더 포함하는, 신경 프로세싱유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 제2 블록의 출력에 대해서 최대 값 풀링을 수행하는 제3 블록을 더 포함하는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 제1 블록 및 상기 제2 블록은 상기 BNN의 제1 레이어에 해당되고, 상기 제3 블록은 상기 BNN의 제2 레이어에 해당되는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 BNN의 레이어에 대응되는 이진화 된 파라미터를 저장하도록 구성된 라인 버퍼 또는 메모리를 더 포함하는,신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 라인 버퍼의 크기는 대응되는 이진화 된 피처 맵과 대응되는 이진화 된 가중치의 크기에 기초하여 설정되는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,제1 블록은 NOT 논리 게이트를 포함하는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,공개특허 10-2023-0080303-3-상기 제1 블록은 상기 이진화 된 가중치 값에 기초하여 NOT 게이트를 선택하거나, 입력 값을 그대로 출력하도록설정되는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제1항에 있어서,상기 제2 블록은 임계값을 기반으로 상기 배치-정규화를 수행하는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 제1 블록은 K-mean 클러스터부를 더 포함하는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제1항에 있어서,상기 제1 블록은 pop-count 수행부를 더 포함하는 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서, 상기 pop-count 수행부는 압축기를 더 포함하는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제1항에 있어서,상기 제1 블록은 pop-count 재사용부를 더 포함하는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "ANN(Artificial Neural Network)을 위한 신경 프로세싱 유닛으로서,복수의 블록들을 포함하고,상기 복수의 블록들은 파이프라인 형태로 연결되고,상기 복수의 블록들의 개수는 상기 ANN의 레이어의 개수와 동일하고,상기 복수의 블록들 중 제1 블록은 이진화 된(binarized) 피처 맵(Feature map)과 이진화 된 가중치를 이용하여합성곱(Convolution)을 수행하는 제1 서브-블록; 그리고 상기 제1 서브-블록의 출력을 배치-정규화(batchNormalization) 하도록 구성된 제2 서브-블록;을 포함하고,상기 제1 서브-블록과 상기 서브-제2 블록 사이에는 임의 크기의 레지스터가 배치되고, 그리고상기 제1 서브-블록과 상기 서브-제2 블록 각각은 하나 또는 복수의 프로세싱 엔진들을 포함하는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서, 상기 제1 서브-블록 또는 상기 제2 서브-블록은 입력단과 출력단 사이에 배치된 라인 버퍼를 더 포함하는, 신경프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에 있어서, 상기 제2 서브-블록의 출력에 대해서 최대 값 풀링을 수행하는 제2 블록을 더 포함하는, 신경 프로세싱 유닛."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "공개특허 10-2023-0080303-4-전자 장치로서,메인 메모리와; 그리고ANN(Artificial Neural Processing)을 위해 구성된 NPU(Neural Processing Unit)을 포함하고,상기 NPU는 복수의 블록들을 포함하고,상기 복수의 블록들은 파이프라인 형태로 연결되고,상기 복수의 블록들의 개수는 상기 ANN의 레이어의 개수와 동일하고,상기 복수의 블록들 중 제1 블록은 이진화 된(binarized) 피처 맵(Feature map)과 이진화 된 가중치를 이용하여합성곱(Convolution)을 수행하는 제1 서브-블록; 그리고 상기 제1 서브-블록의 출력을 배치-정규화(batchNormalization) 하도록 구성된 제2 서브-블록;을 포함하고,상기 제1 서브-블록과 상기 서브-제2 블록 사이에는 임의 크기의 레지스터가 배치되고, 그리고상기 제1 서브-블록과 상기 서브-제2 블록 각각은 하나 또는 복수의 프로세싱 엔진들을 포함하는, 전자 장치."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서, 상기 제1 서브-블록 또는 상기 제2 서브-블록은 입력단과 출력단 사이에 배치된 라인 버퍼를 더 포함하는, 전자장치."}
{"patent_id": "10-2022-0132254", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제17항에 있어서, 상기 제2 서브-블록의 출력에 대해서 최대 값 풀링을 수행하는 제2 블록을 더 포함하는, 전자 장치."}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 일 예시에 따르면, BNN(Binarized Neural Network)을 위한 신경 프로세싱 유닛이 제공된다. 상기 신 경 프로세싱 유닛은 이진화 된(binarized) 피처 맵(Feature map)과 이진화 된 가중치를 이용하여 합성곱 (Convolution)을 수행하는 제1 블록; 및 상기 제1 블록의 출력을 배치-정규화(batch Normalization) 하도록 구 성된 제2 블록;를 포함할 수 있다. 상기 제1 블록과 상기 제2 블록 사이에는 임의 크기의 레지스터가 배치될 수 있다. 상기 제1 블록과 상기 제2 블록 각각은 하나 또는 복수의 프로세싱 엔진들을 포함할 수 있다. 상기 하나 또는 복수의 프로세싱 엔진들은 파이프라인 형태로 연결될 수 있다."}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 인공 신경망(artificial neural network)에 관한 것이다."}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인간은 인식(Recognition), 분류(Classification), 추론(Inference), 예측(Predict), 조작/의사결정 (Control/Decision making) 등을 할 수 있는 지능을 갖추고 있다. 인공지능(artificial intelligence: AI)은 인간의 지능을 인공적으로 모방하는 것을 의미한다. 인간의 뇌는 뉴런(Neuron)이라는 수많은 신경세포로 이루어져 있다. 각각의 뉴런은 시냅스(Synapse)라고 불리는 연결부위를 통해 수백에서 수천 개의 다른 뉴런들과 연결되어 있다. 인간의 지능을 모방하기 위하여, 생물학적 뉴런의 동작원리와 뉴런 간의 연결 관계를 모델링한 것을, 인공신경망(Artificial Neural Network, ANN) 모델이 라고 한다. 즉, 인공 신경망은 뉴런들을 모방한 노드들을 레이어(Layer: 계층) 구조로 연결시킨, 시스템이다. 이러한 인공신경망 모델은 레이어 수에 따라 '단층 신경망'과 '다층 신경망'으로 구분한다. 일반적인 다층신경 망은 입력 레이어와 은닉 레이어, 출력 레이어로 구성된다. 입력 레이어(input layer)은 외부의 자료들을 받아들이는 레이어로서, 입력 레이어의 뉴런 수는 입력되는 변수의 수와 동일하다. 은닉 레이어(hidden layer)은 입력 레이어와 출력 레이어 사이에 위치하며 입력 레이어로부터 신호를 받아 특성을 추출하여 출력층 으로 전달한다. 출력 레이어(output layer)은 은닉 레이어로부터 신호를 받아 외부로 출력한다. 뉴런 간의 입력신호는 0에서 1 사이의 값을 갖는 각각의 연결강도와 곱해진 후 합산되며 이 합이 뉴런의 임계치보다 크면 뉴런이 활성화되어 활성화 함수를 통하여 출력 값으로 구현된다. 한편, 보다 높은 인공 지능을 구현하기 위하여, 인공 신경망의 은닉 레이어의 개수를 늘린 것을 심층 신경망 (Deep Neural Network, DNN)이라고 한다. 다른 한편, DNN에는 여러 종류가 있으나, 컨볼루션 신경망(Convolutional Neural Network, CNN)은 입력 데이터 의 특징들을 추출하고, 특징들의 패턴을 파악하기에 용이한 것으로 알려져 있다. 컨볼루션 신경망(CNN)은 인간 뇌의 시각 피질에서 영상을 처리하는 것과 유사한 기능을 하는 신경망이다. 컨볼 루션 신경망은 영상처리에 적합한 것으로 알려져 있다. 그러나, CNN의 특성, 즉 부동 소수점을 위하여 매우 많은 양의 파라미터를 필요로 하기 때문에 메모리 요구량이 큰 문제점이 있다. 이런 문제를 해결하기 위해 신경망의 계층 입력 값의 크기 또는 파라미터의 크기를 줄이는 low precision network에 대한 연구가 진행되었다. Low precision network에 대한 연구로 인하여, BNN(Binarized Neural Network)이 제시되었다. 그러나, 기존의 연구들은 BNN에 대해서 이론적으로만 접근하였고, 실제 구현을 위한 하드웨어 구조를 제시하지 못하였다."}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "따라서, 본 개시는 BNN을 구현하기 위한 하드웨어 아키텍처를 제시하는 것을 목적으로 한다. 구체적으로, 본 개시는 BNN을 위한 스트리밍 아키텍처를 제시하는 것을 목적으로 한다."}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 일 예시에 따르면, BNN(Binarized Neural Network)을 위한 신경 프로세싱 유닛이 제공된다. 상기 신 경 프로세싱 유닛은 이진화 된(binarized) 피처 맵(Feature map)과 이진화 된 가중치를 이용하여 합성곱 (Convolution)을 수행하는 제1 블록; 및 상기 제1 블록의 출력을 배치-정규화(batch Normalization) 하도록 구 성된 제2 블록;를 포함할 수 있다. 상기 제1 블록과 상기 제2 블록 사이에는 임의 크기의 레지스터가 배치될 수 있다. 상기 제1 블록과 상기 제2 블록 각각은 하나 또는 복수의 프로세싱 엔진들을 포함할 수 있다. 상기 하나 또는 복수의 프로세싱 엔진들은 파이프라인 형태로 연결될 수 있다. 상기 신경 프로세싱 유닛은 상기 제1 블록 또는 상기 제2 블록은 입력단과 출력단 사이에 배치된 라인 버퍼를 더 포함할 수 있다. 상기 신경 프로세싱 유닛은 상기 제2 블록의 출력에 대해서 최대 값 풀링을 수행하는 제3 블록을 더 포함할 수 있다. 상기 제1 블록 및 상기 제2 블록은 상기 BNN의 제1 레이어에 해당되고, 상기 제3 블록은 상기 BNN의 제2 레이어 에 해당할 수 있다. 상기 신경 프로세싱 유닛은 상기 BNN의 레이어에 대응되는 이진화 된 파라미터를 저장하도록 구성된 라인 버퍼 또는 메모리를 더 포함할 수 있다. 상기 라인 버퍼의 크기는 대응되는 이진화 된 피처 맵과 대응되는 이진화 된 가중치의 크기에 기초하여 설정될 수 있다. 제1 블록은 NOT 논리 게이트 또는 XNOR 논리 게이트를 포함할 수 있다. 상기 제1 블록은 상기 이진화 된 가중치 값에 기초하여 NOT 게이트 또는 XNOR 게이트를 선택할 수 있다. 상기 제2 블록은 임계값을 기반으로 상기 배치-정규화를 수행할 수 있다. 상기 제1 블록은 K-mean 클러스터부를 더 포함할 수 있다. 상기 제1 블록은 pop-count 수행부를 더 포함할 수 있다. 상기 pop-count 수행부는 압축기를 더 포함할 수 있다. 상기 제1 블록은 pop-count 재사용부를 더 포함할 수 있다. 본 개시의 일 예시에 따르면, ANN(Artificial Neural Network)을 위한 신경 프로세싱 유닛이 제시된다. 상기 신 경 프로세싱 유닛은 복수의 블록들을 포함할 수 있다. 상기 복수의 블록들은 파이프라인 형태로 연결될 수 있다. 상기 복수의 블록들의 개수는 상기 ANN의 레이어의 개수와 동일할 수 있다. 상기 복수의 블록들 중 제1블록은 이진화 된(binarized) 피처 맵(Feature map)과 이진화 된 가중치를 이용하여 합성곱(Convolution)을 수 행하는 제1 서브-블록; 그리고 상기 제1 서브-블록의 출력을 배치-정규화(batch Normalization) 하도록 구성된 제2 서브-블록;을 포함할 수 있다. 상기 제1 서브-블록과 상기 서브-제2 블록 사이에는 임의 크기의 레지스터가 배치될 수 있다. 상기 제1 서브-블록과 상기 서브-제2 블록 각각은 하나 또는 복수의 프로세싱 엔진들을 포함할 수 있다. 상기 제1 서브-블록 또는 상기 제2 서브-블록은 입력단과 출력단 사이에 배치된 라인 버퍼를 더 포함할 수 있다. 상기 제2 서브-블록의 출력에 대해서 최대 값 풀링을 수행하는 제2 블록을 더 포함할 수 있다. 본 개시의 일 예시에 따르면, 전자 장치가 제시된다. 상기 전자 장치는 메인 메모리와; 그리고 ANN(Artificial Neural Processing)을 위해 구성된 NPU(Neural Processing Unit)을 포함할 수 있다. 상기 NPU는 복수의 블록들 을 포함할 수 있다. 상기 복수의 블록들은 파이프라인 형태로 연결될 수 있다. 상기 복수의 블록들의 개수는 상 기 ANN의 레이어의 개수와 동일할 수 있다. 상기 복수의 블록들 중 제1 블록은 이진화 된(binarized) 피처 맵 (Feature map)과 이진화 된 가중치를 이용하여 합성곱(Convolution)을 수행하는 제1 서브-블록; 그리고 상기 제 1 서브-블록의 출력을 배치-정규화(batch Normalization) 하도록 구성된 제2 서브-블록;을 포함할 수 있다. 상 기 제1 서브-블록과 상기 서브-제2 블록 사이에는 임의 크기의 레지스터가 배치될 수 있다. 상기 제1 서브-블록 과 상기 서브-제2 블록 각각은 하나 또는 복수의 프로세싱 엔진들을 포함할 수 있다."}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시들에 따르면, BNN을 구현하기 위한 효율적인 하드웨어 아키텍처를 제시된다. 또한, 본 개시들에 따르면 BNN을 위한 효율적인 스트리밍 아키텍처가 제시된다."}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 개시 또는 출원에 개시되어 있는 본 개시의 개념에 따른 실시 예들에 대해서 특정한 구조적 내지 단계적 설 명들은 단지 본 개시의 개념에 따른 실시 예를 설명하기 위한 목적으로 예시된 것이다. 따라서, 본 개시의 개념 에 따른 실시 예들은 다양한 형태로 실시될 수 있으며 본 개시의 개념에 따른 실시 예들은 다양한 형태로 실시 될 수 있으며 본 개시 또는 출원에 설명된 실시 예들에 한정되는 것으로 해석되어서는 아니 된다. 본 개시의 개념에 따른 실시 예는 다양한 변경을 가할 수 있고 여러 가지 형태를 가질 수 있으므로 특정 실시 예들을 도면에 예시하고 본 개시 또는 출원에 상세하게 설명하고자 한다. 그러나, 이는 본 개시의 개념에 따른 실시 예를 특정한 개시 형태에 대해 한정하려는 것이 아니며, 본 개시의 사상 및 기술 범위에 포함되는 모든 변 경, 균등물 내지 대체물을 포함하는 것으로 이해되어야 한다. 제1 및/또는 제2 등의 용어는 다양한 구성 요소들을 설명하는데 사용될 수 있지만, 상기 구성 요소들은 상기 용 어들에 의해 한정되어서는 안 된다. 상기 용어들은 하나의 구성 요소를 다른 구성 요소로부터 구별하는 목적으 로만, 예컨대 본 개시의 개념에 따른 권리 범위로부터 이탈되지 않은 채, 제1 구성요소는 제2 구성요소로 명명 될 수 있고, 유사하게 제2 구성요소는 제1 구성요소로도 명명될 수 있다. 어떤 구성요소가 다른 구성요소에 \"연결되어\" 있다거나 \"접속되어\" 있다고 언급된 때에는, 그 다른 구성요소에 직접적으로 연결되어 있거나 또는 접속되어 있을 수도 있지만, 중간에 다른 구성요소가 존재할 수도 있다고 이 해되어야 할 것이다. 반면에, 어떤 구성요소가 다른 구성요소에 \"직접 연결되어\" 있다거나 \"직접 접속되어\" 있 다고 언급된 때에는, 중간에 다른 구성요소가 존재하지 않는 것으로 이해되어야 할 것이다. 구성요소들 간의 관 계를 설명하는 다른 표현들, 즉 \"~사이에\"와 \"바로 ~사이에\" 또는 \"~에 이웃하는\"과 \"~에 직접 이웃하는\" 등도 마찬가지로 해석되어야 한다. 본 개시에서 사용한 용어는 단지 특정한 실시 예를 설명하기 위해 사용된 것으로, 본 개시를 한정하려는 의도가 아니다. 단수의 표현은 문맥상 명백하게 다르게 뜻하지 않는 한, 복수의 표현을 포함한다. 본 개시에서, \"포함 하다\" 또는 \"가지다\" 등의 용어는 서술된 특징, 숫자, 단계, 동작, 구성요소, 부분품 또는 이들을 조합한 것이 존재함을 지정하려는 것이다. 따라서 하나 또는 그 이상의 다른 특징들이나 숫자, 단계, 동작, 구성요소, 부분 품 또는 이들을 조합한 것들의 존재 또는 부가 가능성을 미리 배제하지 않는 것으로 이해되어야 한다. 다르게 정의되지 않는 한, 기술적이거나 과학적인 용어를 포함해서 여기서 사용되는 모든 용어들은 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자에 의해 일반적으로 이해되는 것과 동일한 의미를 가지고 있다. 일 반적으로 사용되는 사전에 정의되어 있는 것과 같은 용어들은 관련 기술의 문맥상 가지는 의미와 일치하는 의미 를 가지는 것으로 해석되어야 하며, 본 개시에서 명백하게 정의하지 않는 한, 이상적이거나 과도하게 형식적인 의미로 해석되지 않는다.실시 예를 설명함에 있어서 본 개시가 속하는 기술 분야에 익히 알려져 있고 본 개시와 직접적으로 관련이 없는 기술 내용에 대해서는 설명을 생략한다. 이는 불필요한 설명을 생략함으로써 본 개시의 요지를 흐리지 않고 더 욱 명확히 전달하기 위함이다. <용어의 정의> 이하, 본 개시에서 제시되는 개시들의 이해를 돕고자, 본 개시에서 사용되는 용어들에 대하여 간략하게 정리하 기로 한다. NPU: 신경망 프로세싱 유닛(Neural Processing Unit)의 약어로서, CPU(Central processing unit)과 별개로 인 공 신경망 모델의 연산을 위해 특화된 프로세서를 의미할 수 있다. ANN: 인공 신경망(artificial neural network)의 약어로서, 인간의 지능을 모방하기 위하여, 인간 뇌 속의 뉴런 들(Neurons)이 시냅스(Synapse)를 통하여 연결되는 것을 모방하여, 노드들을 레이어(Layer: 계층) 구조로 연결 시킨, 네트워크를 의미할 수 있다. DNN: 심층 신경망(Deep Neural Network)의 약어로서, 보다 높은 인공 지능을 구현하기 위하여, 인공 신경망의 은닉 레이어의 개수를 늘린 것을 의미할 수 있다. CNN: 컨볼루션 신경망(Convolutional Neural Network)의 약어로서, 인간 뇌의 시각 피질에서 영상을 처리하는 것과 유사한 기능을 하는 신경망이다. 컨볼루션 신경망은 영상처리에 적합한 것으로 알려져 있으며, 입력 데이 터의 특징들을 추출하고, 특징들의 패턴을 파악하기에 용이한 것으로 알려져 있다. 이하, 첨부한 도면을 참조하여 본 개시의 바람직한 실시 예를 설명함으로써, 본 개시를 상세히 설명한다. 이하, 본 개시의 실시 예를 첨부된 도면을 참조하여 상세하게 설명한다. 도 1은 예시적인 인공신경망모델을 설명하는 개략적인 개념도이다. 이하 신경망 프로세싱 유닛에서 작동될 수 있는 예시적인 인공신경망모델(110a)의 연산에 대하여 설명한다. 도 1의 예시적인 인공신경망모델(110a)은 객체 인식, 음성 인식 등 다양한 추론 기능을 수행하도록 학습된 인공 신경망일 수 있다. 인공신경망모델(110a)은 심층 신경망(DNN, Deep Neural Network)일 수 있다. 단, 본 개시의 예시들에 따른 인공신경망모델(110a)은 심층 신경망에 제한되지 않는다. 예를 들어, 인공신경망모델(110a)은 Transformer, YOLO, BiseNet, RCNN, VGG, VGG16, DenseNet, SegNet, DeconvNet, DeepLAB V3+, U-net, SqueezeNet, Alexnet, ResNet18, MobileNet-v2, GoogLeNet, Resnet-v2, Resnet50, Resnet101, Inception-v3 등의 모델로 구현될 수 있다. 단, 본 개시는 상술한 모델들에 제한되지 않 는다. 또한 인공신경망모델(110a)은 적어도 두 개의 서로 다른 모델들에 기초한 앙상블 모델일 수도 있다. 이하 예시적인 인공신경망모델(110a)에 의해서 수행되는 추론 과정에 대해서 설명하기로 한다. 인공신경망모델(110a)은 입력 레이어(110a-1), 제1 연결망(110a-2), 제1 은닉 레이어(110a-3), 제2 연결망 (110a-4), 제2 은닉 레이어(110a-5), 제3 연결망(110a-6), 및 출력 레이어(110a-7)을 포함하는 예시적인 심층 신경망 모델이다. 단, 본 개시는 도 1에 도시된 인공신경망모델에만 제한되는 것은 아니다. 제1 은닉 레이어 (110a-3) 및 제2 은닉 레이어(110a-5)는 복수의 은닉 레이어로 지칭되는 것도 가능하다. 입력 레이어(110a-1)는 예시적으로, x1 및 x2 입력 노드를 포함할 수 있다. 즉, 입력 레이어(110a-1)는 2개의 입력 값에 대한 정보를 포함할 수 있다. 제1 연결망(110a-2)은 예시적으로, 입력 레이어(110a-1)의 각각의 노드를 제1 은닉 레이어(110a-3)의 각각의 노 드로 연결시키기 위한 6개의 가중치 값에 대한 정보를 포함할 수 있다. 각각의 가중치 값은 입력 노드 값과 곱 해지고, 곱해진 값들의 누산된 값이 제1 은닉 레이어(110a-3)에 저장된다. 제1 은닉 레이어(110a-3)는 예시적으로 a1, a2, 및 a3 노드를 포함할 수 있다. 즉, 제1 은닉 레이어(110a-3)는 3개의 노드 값에 대한 정보를 포함할 수 있다. 제2 연결망(110a-4)은 예시적으로, 제1 은닉 레이어(110a-3)의 각각의 노드를 제2 은닉 레이어(110a-5)의 각각 의 노드로 연결시키기 위한 9개의 가중치 값에 대한 정보를 포함할 수 있다. 상기 제2 연결망(110a-4)의 가중치값은 제1 은닉 레이어(110a-3)로부터 입력되는 노드 값과 각기 곱해지고, 곱해진 값들의 누산된 값이 제2 은닉 레이어(110a-5)에 저장된다. 제2 은닉 레이어(110a-5)는 예시적으로 b1, b2, 및 b3 노드를 포함할 수 있다. 즉, 제2 은닉 레이어(110a-5)는 3개의 노드 값에 대한 정보를 포함할 수 있다. 제3 연결망(110a-6)은 예시적으로, 제2 은닉 레이어(110a-5)의 각각의 노드와 출력 레이어(110a-7)의 각각의 노 드를 연결하는 6개의 가중치 값에 대한 정보를 포함할 수 있다. 제3 연결망(110a-6)의 가중치 값은 제2 은닉 레 이어(110a-5)로부터 입력되는 노드 값과 각기 곱해지고, 곱해진 값들의 누산된 값이 출력 레이어(110a-7)에 저 장된다. 출력 레이어(110a-7)는 예시적으로 y1, 및 y2 노드를 포함할 수 있다. 즉, 출력 레이어(110a-7)는 2개의 노드 값에 대한 정보를 포함할 수 있다. 도 2a은 컨볼루션 신경망(CNN)의 기본 구조를 설명하기 위한 도면이다. 도 2a을 참조하면, 입력 이미지는 특정 크기의 행과 특정 크기의 열로 구성된 2차원적 행렬로 표시될 수 있다. 입력 이미지는 복수의 채널을 가질 수 있는데, 여기서 채널은 입력 데이터 이미지의 컬러 성분의 수를 나타낼 수 있다. 컨볼루션 과정은 입력 이미지를 지정된 간격으로 순회하면서 커널과 합성곱 연산을 수행하는 것을 의미한다. 컨볼루션 신경망은 현재 레이어에서 다음 레이어로 갈 때, 합성곱(컨볼루션)을 통해 레이어 간의 가중치를 반영 하여 다음 레이어에 전달될 수 있다. 예를 들면, 합성곱(컨볼루션)은, 두 개의 주요 파라미터에 의해 정의되는데, 입력 이미지의 크기(통상적으로 1 Х1, 3Х3 또는 5Х5 행렬)와 출력 피처 맵(Feature Map)의 깊이(커널의 수)는 컨볼루션에 의해 연산 될 수 있 다. 이들 컨볼루션은, 깊이 32에서 시작하여, 깊이 64로 계속되며, 깊이 128 또는 256에서 종료될 수 있다. 합성곱(컨볼루션)은, 3D 입력 피처 맵 위로 3Х3 또는 5Х5 크기의 이들 윈도우를 슬라이딩 하고, 모든 위치에 서 정지하고, 주변 피처의 3D 패치를 추출함으로써 동작할 수 있다. 이러한 각 3D 패치는 가중치라고 하는 동일한 학습 가중치 행렬을 갖는 텐서(tensor) 곱을 통해 1D 벡터로 변환 될 수 있다. 이러한 벡터는 3D 출력 맵으로 공간적으로 재조립될 수 있다. 출력 피처 맵의 모든 공간 위치는 입 력 피처 맵의 동일한 위치에 대응될 수 있다. 컨볼루션 신경망은, 학습 과정동안 많은 그라디언트 업데이트 반복에 걸쳐 학습되는 커널(즉, 가중치 행렬)과 입력 데이터 간의 합성곱(컨볼루션) 동작을 수행하는 컨볼루션 레이어를 포함할 수 있다. (m, n)을 커널 크기라 고 하고 W를 가중치 값이라고 설정하면, 컨볼루션 레이어는 내적을 계산함으로써 입력 데이터와 가중치 행렬의 합성곱(컨볼루션)을 수행할 수 있다. 커널이 입력 데이터를 가로질러 슬라이딩 하는 단차 크기를 보폭이라고 하며, 커널 면적(mХn)을 수용장 (receptive field)이라고 할 수 있다. 동일한 컨볼루션 커널이 입력의 상이한 위치에 걸쳐 적용되며, 이는 학습 되는 커널의 수가 감소시킨다. 이것은, 또한, 위치 불변 학습을 가능하게 하며, 중요한 패턴이 입력에 존재하는 경우, 컨볼루션 필터는 시퀀스의 위치에 관계없이 그 패턴을 학습할 수 있다. 컨볼루션 신경망은, 입력 데이터가 특정 출력 추정 값으로 이어지도록 조정되거나 학습될 수 있다. 컨볼루션 신 경망은, 출력 추정 값이 실측 자료(ground truth)에 점진적으로 일치하거나 근접할 때까지 출력 추정 값과 실측 자료 간의 비교에 기초하여 역전파(backpropagation)를 이용하여 조정될 수 있다. 컨볼루션 신경망은, 실측 자료와 실제 출력 간의 차이에 기초하는 뉴런들 간의 가중치를 조정함으로써 학습될 수 있다. 도 2b는 컨볼루션 신경망의 동작을 이해하기 쉽게 나타낸 종합도이다. 도 2b을 참조하면, 예시적으로 입력 이미지가 5 x 5 크기를 갖는 2차원적 행렬인 것으로 나타나 있다. 또한, 도 2b에는 예시적으로 3개의 노드, 즉 채널 1, 채널 2, 채널 3이 사용되는 것으로 도시하였다. 먼저, 레이어 1의 합성곱 동작에 대해서 설명하기로 한다. 입력 이미지는 레이어 1의 첫 번째 노드에서 채널 1을 위한 커널 1과 합성곱 되고, 그 결과로서 피처 맵1이 출 력된다. 또한, 상기 입력 이미지는 레이어 1의 두 번째 노드에서 채널 2를 위한 커널 2와 합성곱 되고 그 결과 로서 피처 맵 2가 출력된다. 또한, 상기 입력 이미지는 세 번째 노드에서 채널 3을 위한 커널 3과 합성곱 되고, 그 결과로서 피처 맵3이 출력된다. 다음으로, 레이어 2의 풀링(pooling) 동작에 대해서 설명하기로 한다. 상기 레이어 1 로부터 출력되는 피처 맵1, 피처 맵2, 피처 맵3은 레이어 2의 3개의 노드로 입력된다. 레이어 2 는 레이어 1로부터 출력되는 피처 맵들을 입력으로 받아서 풀링(pooling)을 수행할 수 있다. 상기 풀링이라 함 은 크기를 줄이거나 행렬 내의 특정 값을 강조할 수 있다. 풀링 방식으로는 최대값 풀링과 평균 풀링, 최소값 풀링이 있다. 최대값 풀링은 행렬의 특정 영역 안에 값의 최댓값을 모으기 위해서 사용되고, 평균 풀링은 특정 영역내의 평균을 구하기 위해서 사용될 수 있다. 도 2b의 예시에서는 5 x 5 행렬의 피처맵이 풀링에 의하여 4x4 행렬로 크기가 줄어지는 것으로 도시하였다. 구체적으로, 레이어 2의 첫 번째 노드는 채널 1을 위한 피처 맵1을 입력으로 받아 풀링을 수행한 후, 예컨대 4x4 행렬로 출력한다. 레이어 2의 두 번째 노드는 채널 2을 위한 피처 맵2을 입력으로 받아 풀링을 수행한 후, 예컨대 4x4 행렬로 출력한다. 레이어 2의 세 번째 노드는 채널 3을 위한 피처 맵3을 입력으로 받아 풀링을 수행 한 후, 예컨대 4x4 행렬로 출력한다. 다음으로, 레이어 3의 합성곱 동작에 대해서 설명하기로 한다. 레이어 3의 첫 번째 노드는 레이어 2의 첫 번째 노드로부터의 출력을 입력으로 받아, 커널 4와 합성곱을 수행하 고, 그 결과를 출력한다. 레이어 3의 두 번째 노드는 레이어 2의 두 번째 노드로부터의 출력을 입력으로 받아, 채널 2를 위한 커널 5와 합성곱을 수행하고, 그 결과를 출력한다. 마찬가지로, 레이어 3의 세 번째 노드는 레이 어 2의 세 번째 노드로부터의 출력을 입력으로 받아, 채널 3을 위한 커널 6과 합성곱을 수행하고, 그 결과를 출 력한다. 이와 같이 합성곱과 풀링이 반복되고 최종적으로는, 완전 연결(fully connected) 레이어로 출력될 수 있다. 해 당 출력은 다시 이미지 인식을 위한 인공 신경망으로 입력될 수 있다. 지금까지 설명한 CNN은 다양한 심층신경망(DNN) 방법 중에서도 컴퓨터 비전(Vision) 분야에서 가장 많이 쓰이는 방법이다. 그러나 CNN을 수행하는데 단점 중 하나는 매우 많은 양의 부동소수점을 연산해야 한다는 점 그리고 부동 소수점 을 위한 추가적인 파라미터가 필요하다는 점이었다. 그래서 CNN 연산은 통상적으로 하드웨어, 즉 GPU(Graphic Processing Unit)를 이용하여, 가속하는 경우가 많았다. 특히 TensorFlow, ONNX, PyTorch등의 다양한 Deep learning 개발 프레임워크들이 등장하였고, 이 프레임워크들은 사용자로 하여금 GPU를 이용하여, 연산을 쉽게 가속할 수 있게 해주었다. 하지만 GPU는 전력을 많이 소모한다는 단점이 있었기 때문에 소형 시스템에서 CNN을 수행하는데 적합하지 않았다. 그래서 GPU 보다 처리 속도는 낮지만 전력을 훨씬 덜 소모하는 하드웨어인 FPGA(Field Programmable Gate Array) 또는 ASIC(Application Specific Integrated Circuit) 기반을 이용하여 CNN을 가속 처리 하고자 연구가 진행되었다. ASIC 기반의 가속기는 통상적으로 FPGA 기반 가속기 보다 성능과 에너지 효율 두 가지 측면에서 앞 선다. 가장 큰 이유는 FPGA 보다, ASIC이 더 낮은 소비 전력과 더 빠른 클럭으로 동작할 수 있기 때문이다. 다른 한편, CNN의 특성, 즉 부동 소수점을 위하여 매우 많은 양의 파라미터를 필요로 하기 때문에 메모리 요구 량이 컸다. 2012년도 ImageNet recognition challenge에서 우승했던 CNN 구조인 AlexNet의 경우, 부동 소수점 을 위하여 약 240 MB의 파라미터를 필요로 했다. 이것은 소형 시스템의 메모리에 저장하기에는 부적합한 문제점 이 있다. 이런 문제를 해결하기 위해 신경망의 계층 입력 값의 크기 또는 파라미터의 크기를 줄이는 low precision network에 대한 연구가 진행되었다. <Binarized Neural Network (BNN)> Low precision network에 대한 연구로 인하여, Binarized Neural Network(BNN)이 제시되었다. Binarized Neural Network(BNN)은 Low precision neural network 구조 에서도 극단적인 구조로서 가중치 (weight)와 레이어 입력 값이 +1/-1로 이진화(binarizing)한 구조이다. 즉, BNN은 1 비트의 파라미터로 구성된 신경망이다. BNN에서는 CNN의 Multiplication and Accumulation(MAC) 연산이 간소화되며, 복잡도가 작은 이미 지(CIFAR-10, MNIST, SVHN)에 대해서 부동 소수점을 사용한 CNN과 정확도 차이가 거의 나지 않는다 이러한 BNN은 하드웨어로 가속 처리하는데 효율적인 구조를 가지고 있다. 가장 큰 이유는 기존에 필요한 파라미 터를 적재하기 위해 필요한 메모리 크기가 약 32배 정도 줄어들었고, 이것은 on-chip RAM에 대부분을 적재하는 데 무리가 없기 때문이다. 이와 같이, BNN은 곱셈 연산을 필요로 하지 않고 메모리 사용량이 극단적으로 감소되기 때문에, 상당히 효율적 으로 하드웨어 리소스를 절감할 수 있다. 보다 구체적으로, BNN은 1 비트 연산을 수행하기 위하여 논리 연산인 XNOR 연산을 이용한다. XNOR 연산을 통해 곱셈을 구현할 수 있으며, 레지스터 내의 1로 설정된 비트의 수를 알 수 있는 Pop-Count 명령을 통해 누적 덧셈 을 구현할 수 있다. 따라서, 실수나 정수 곱셈, 덧셈이 필요하지 않게 됨으로써, 연산 속도가 증가한다. 즉, 연 산 단위가 32 비트에서 1 비트로 줄어들게 되기 때문에, 이론적으로 메모리 대역폭이 32배 증가하게 된다. 아래의 표 1은 XNOR 연산의 일 예이다. 표 1 입력 출력 A b a XNOR b 0 0 1 1 1 0 1 0 0 1 1 1 곱셈 후 누적 덧셈을 구현하기 위해서는 Pop-Count 명령을 사용하여 구현이 가능하다. Pop-Count 명령은 아래의 표 2와 같이 비트 내에서 1로 설정된 비트의 개수를 반환한다. Pop-Count 명령의 수행 결과에 2를 곱하고 총 비 트 수를 빼면 누적 덧셈이 가능하다. 표 2 8 비트 레지스터 a 1011 0100 8 비트 레지스터 b 0110 1101 a XNOR b 0010 0110 Pop-Count (a XNOR b) 3 2 * Pop-Count (a XNOR b) - 8 -2 BNN의 파라미터를 아래의 수식과 같이 이진화 한 후 N 개의 파라미터를 N 비트 레지스터에 패킹(packing)하여 N 개의 곱셈을 한번의 XNOR 논리 연산을 통해 가속화할 수 있다. 수학식 1"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "지금까지는 BNN의 일반 개념에 대해서 설명하였다. 이하에서는, 발명자가 창안한 내용에 대해서 설명하기로 한 다. <본 개시의 예시들> 1) 서언 최근, 기계 학습(machine learning: ML)은 다양한 필드에서의 쉽게 적용될 수 있는 탓에 가장 유명한 기술이 되 었다. 특히, DNN은 컴퓨터 비전 및 음성 인식 분야에서 분류 작업을 수행하는데, 높은 정확도와 놀라운 성능을 갖는다고 입증되어 왔다. 방대한 데이터 세트를 가지면서, 더 높은 정확도를 필요로 하는 많은 애플리케이션을 위하여, 더 많은 파라미터, 더 큰 모델 크기의 레이어를 포함하는 심층 네트워크를 연구하는 경향이 있다. DNN이 복잡해질수록,파라미터 저장을 위한 메모리 요구 사항도 증가되고, 더 많은 연산을 요구하기 때문에, 전력 및 리소스 효율성 에도 큰 영향을 미친다. 특히 증가된 연산 횟수를 처리하기 위해서는, FPGA 또는 ASIC로 구현하기 위한 설계에서, 더 많은 수의 로직 게 이트가 필요하게 되고 결과적으로 에너지 소비도 증가되는 반면, 처리 성능은 낮아진다. 한편, 대부분의 대형 DNN에 필요한 데이터는 내부(On-chip) 메모리에 완전히 저장되지 않을 수 있으므로 외부 메모리(예컨대, off- chip DRAM)에 빈번히 액세스해야 한다. 이러한 액세스는 상당한 에너지를 소비하고, 성능도 저하시키는 단점을 야기한다. 최근 연구 중에는, DNN 성능을 향상시키기 위한 최적화 방안들이 제시된 적이 있고, 이러한 여러 방안들 중 하 나는 잠재적으로 중복 정보라고 판단되는 것에 대해서는 계산 정밀도를 낮추는 방안이다. 해당 방안은 모든 파 라미터들을 이진화(binarizing)하기 때문에, 메모리 크기를 획기적으로 줄일 수 있고, 곱셈 연산을 XNOR 함수로 대체하기 때문에, 연산의 크기를 줄여서, 에너지 소모를 획기적으로 줄일 수 있다. 그러나, 모든 파라미터와 피 처 맵 값들을 이진화(binarizing) 하는 것은 정확도를 저하시키는 단점이 있다. 따라서, 본 개시의 예시는 높은 정확도를 유지하는 최고의 성능을 달성하면서도, 자원을 효율적으로 사용할 수 있는 BNN 가속기(즉, NPU)를 제시하는 것을 목적으로 한다. DNN을 하드웨어로 구현하는 데에는 2가지 접근법이 있다. 첫 번째 접근법은 단독 레이어(single layer) 아키텍 처로서, 이는 하나의 하드웨어 블록이 한번에 하나의 레이어를 처리하는 아키텍처, 즉 layer-by-layer 아키텍처 이다. 두번째는, DNN 전체를 구현하는 스트리밍 아키텍처(streaming architecture)이다. 상기 스트리밍 아키텍 처는 단독 레이어 아키텍처에 비교하여, 레이어의 개수와 무관하게 성능을 획기적으로 증대 시킬 수 있다. 그러 나, 스트리밍 아키텍처는 고비용을 요구하고 설계에 있어서 유연성이 낮은 단점이 있다. 따라서, 본 개시의 예시는 최고의 성능과 효율성을 갖는 BNN 스트리밍 하드웨어를 제시하는 것을 목적으로 한다. 상기 최고의 성능과 효율성은 파워 대비 FPS(frame per second)의 비로 나타낼 수 있다. 본 개시의 예시에 의해서 제시되는 하드웨어 아키텍처의 주요 특징은 다음과 같이 정리될 수 있다. 1) 최대 풀링(max pooling) 레이어의 활용도를 극대화하는 효율적인 파이프라인 언롤링(unrolling) 메커니즘: 라인 버퍼는 동시에 둘 이상의 입력 윈도우를 제공할 수 있다. 따라서 풀링(pooling) 레이어에서 OR 연산을 항 상 활용할 수 있기 때문에, 전력 및 리소스 효율성이 향상될 수 있다. 또한 스트리밍 아키텍처의 특성으로 인해 가중치 값을 저장하는 메모리가 제거될 수 있다. 이에, 이진 컨볼루션 레이어에서 XNOR 논리 게이트가 제거되거 나 NOT 게이트로 대체될 수 있다. 2) 종래 컨볼루션 레이어 및 완전 연결(fully-connected) 레이어 모두에 적용되는, 가중치 재사용 방안 및 MAC 연산으로 불리는 K-mean의 조합: 이를 통해 추가적인 하드웨어 비용, 전 처리(pre-processing) 단계를 위한 타 이밍 소비, 동기화를 위해서 사용되는 플리-플롭(flip-flop)의 개수를 줄일 수 있다. 더욱이 제안된 아키텍처는 스트리밍 아키텍처이기 때문에, MAC 연산 방법은 추가적인 하드웨어를 사용하지 않고도 바로 구현될 수 있다. 3) 가산기에 대해 2가지 옵션(즉, 6 비트 가산기 및 3비트 덧셈 압축기)를 갖고 pop-count 트리를 압축하는 MAC 연산기: 이 방식은 인공신경망 모델이 큰 경우에, 정확도를 저하시키지 않으면서, 자원과 에너지를 감소시키는 데 도움이 되는 디자인이며, 동일한 pop-count 명령을 사용하여 하나 이상의 출력을 제공할 수 있다. 4) 다양한 유형에 대해서도 하드웨어 구현을 용이할 수 있도록 제안된 가속기(즉, NPU) 그리고 하드웨어 구현을 자동화하기 위한 워크 플로우. 특히, 상기 워크 플로우는 컨볼루션 레이어의 수, 완전 연결 레이어(FCN)의 수, 채널의 수, 각 레이어의 입력에 대한 비트-폭(Bit-Width) 설정, 동일한 pop count 명령을 사용하는 채널과 같은 사용자가 제공하는 세부 정보에 기초하여 RTL 코드를 자동으로 생성하는 스크립트이다. 제안된 아키텍처의 성능을 확인하기 위하여, MNIST 및 Cifar-10 벤치마크 데이터 세트를 이용하여 테스트를 수 행해 본 결과, 이전 대비 3배 더 적은 LUT(Lookup Table)를 소비하는 것으로 확인되었고, 또한 동일한 정확도를 가지면서, 거의 동일한 FPS/W를 나타내었다. 또한, 제안된 아키텍처는 FPGA 블록 램, DSP를 제거할 수 있었다. 이를 통해서, 본 개시에서 제안된 아키텍처는 높은 정확도로 최고의 전력 및 면적 효율성을 갖춘 BNN 하드웨어 아키텍처이라는 것이 확인되었다. 이하 II 섹션에서는 BNN 하드웨어 구현을 최적화하기 위하여 사용되는 이론들에 대해서 상세하게 설명한다. 그 리고 III 섹션에서는, 제안된 하드웨어 아키텍처에 대해서 상세하게 설명한다. 그리고, IV 섹션에서는 RTL(register transfer level) 설계를 생성하는 과정과 그리고 본 개시에서 제안하는 아키텍처의 성능을 다른연구와 대비하여 설명한다. II. 제안된 하드웨어 아키텍처의 이해를 도모하기 위한 BNN 이론 배경 II-1. BNN의 이론적 배경 BNN은 가중치와 활성 출력이 양수와 음수, 즉 -1과 +1로 제한되는 인공신경망의 일종이다. 실수 변수를 이러한 값들로 변환하기 위하여, 2개의 다른 이진화(binarizing) 함수를 사용할 수 있다. 첫 번째로, 결정적 함수 (deterministic function)는 다음과 같다. 수학식 2"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 3, "content": "두번째로, 확률적 함수(stochastic function)는 다음과 같다. 수학식 3"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "여기서, σ (x) = max(0; min(1, (x+1)/2))이고, xb는 이진화 이후 함수의 출력이다. 결정적 함수는 실질적 하 드웨어 구현을 위해서 사용되는 반면, 확률적 함수도 사용된다. 도 3은 컨볼루션 레이어에서 XNOR 연산과 누적 연산을 수행하기 위한 구조를 나타낸 예시도이다. BNN에서 이진화(binarizing) 함수를 사용함으로써, 컨볼루션 레이어 및 완전 연결 레이어를 위한 모든 가중치 및 출력들은 다음 연산을 위해서 사용되기 전에 하나의 비트로 줄어들게 된다. 따라서, 하드웨어 자원을 많이 소모하는 모든 곱셈 연산들은 도 3에 도시된 바와 같이 훨씬 간단해진 XNOR 로직 게이트(logic gate)으로 대체될 수 있다. 그 다음 과정인 누적을 위해서 사용되는 가산기 트리는 pop-count 수행부를 포함함으로써, 그 구조가 훨씬 간단하게 될 수 있다. 또한, MAC(즉 multiply-accumulate) 연산은 신경망을 과부하시키는 주요 요인이었기 때문에, 배치 정규화(batch Normalization: Batchnorm)와 최대 풀링(max pool)을 이용하여, BNN 성능을 향상시킬 수 있다. 연산의 각 타입 에 대해서 적용되는 기법들은 다음과 같다. 1) BNN에서 배치 정규화 (Batchnorm) 및 이진화 MAC 연산과 다르게, 배치 정규화 함수는 부동소수점(floating-point) 파라미터와 나눗셈(division), 제곱근 (root square) 그리고 곱셈(multiplication)과 같은 연산을 사용한다. 일반적으로, X의 배치 정규화 된 값은 다 음과 같이 계산될 수 있다. 수학식 4"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "여기서 ε는 반올림(round-off) 문제를 피하기 위한 작은 수이다. μ 와 var는 평균을 나타내고, 학습 데이터의 변수인 γ와 β는 학습 과정에서 얻어진 상수이다. 이와 같이 정규화 된 값 Y는 다음과 같이 이진화 될 수 있다. 수학식 5"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "정규화 및 이진화를 포함하는 2개의 단계는 다음 수식과 같은 더 간단한 임계 비교 과정을 통해서 하나로 합쳐 질 수 있다. 수학식 6"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "만약 이라면, 다음과 같은 수학식이 사용될 수 있다. 수학식 7"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 8, "content": "게다가, 하드웨어 구현에서 배치 정규화와 이진화의 조합은, 비교기 및 연속적인 XNOR 게이트의 출력이 된다. b. BNN에서 최대 풀링(pooling) 연산(operation) BNN에서, 배치 정규화 연산 이후에, 일부 레이어들은 연속적인 레이어들을 위한 입력의 활성화를 줄이기 위하여, 최대 풀링을 사용할 수 있다. 이론적으로, 최대 풀링 연산의 출력은 다음 레이어로 전달되기 전에 이진 화 될 수 있다. 이진화 모듈과 최대 풀링 모듈을 서로 교환함으로써, 배치 정규화와 이진 함수는 결합될 수 있 고, 결과 (Z)를 출력할 수 있다. 게다가, 이진 윈도우의 최대 값들을 산출하는 것은 이진 값을 입력 받아 OR 연 산의 출력을 찾는 것과 동일하다. 도 4a 내지 도 4c는 파이프라인(pipeline) 아키텍처에서 배치 정규화, 이진화 그리고 최대 풀링을 조합하는 예 시들을 나타낸다. 도 4a 내지 도 4c에 도시된 바와 같이 배치 정규화에서 시작하여 OR 연산을 수행하는 일련의 과정들이 하나의 파이프라인으로 나타내어질 수 있다. 하드웨어 구현 관점에서, OR 연산은 비-이진 신경망에서 최대 값 함수를 연산하는 것에 비해 대비 훨씬 간단하다. c. 가중치 재사용 방안 전술한 바와 같이, BNN는 하드웨어 자원과 소비 전력을 최소화하기 위한 솔루션으로 제시되었다. 특히, 1(one) 비트-폭을 갖는 BNN 모델은 XNOR 로직 게이트 및 pop-count 명령의 동작을 이용하여, 데이터 처리는 극대화하면 서, 연산 부하는 감소시킬 수 있는 효율적인 솔루션이라고 알려지게 되었다. 그러나, 가중치 값들의 패턴을 조 사해보면, 일반적인 BNN 모델들은 여전히 중복적인 군더더기가 존재하기 때문에, 추가적인 최적화가 필요하다. 이를 통하면, 컴퓨팅 연산을 일부 줄이고, 메모리 사용을 줄일 수 있다. 이진화 된 숫자는 \"0\"과 \"1\"의 2가지 상태를 나타내기 위해서 사용된다. 임의의 이진 숫자를 무작위로 선택할 때, 0 또는 1일 확률은 50%이다. N개의 이진 비트들로 이루어진 2개 세트를 무작위로 가지고 있을 때, 제2 세트내에 개별적으로 반복되어진 제1 세트의 비트 개수를 고려할 수 있다. 이진 컨볼루션 레이어를 위해서 K개의 출 력 채널을 산출할 때, (M x M x C) 이진 비트를 포함하는 입력 값들의 세트 내의 각 비트를 (M x M x C) 이진 커널 값들의 K개 세트 내의 대응 비트와 XNOR 연산을 수행할 수 있다. 여기서 M은 윈도우 크기이고, C는 입력 채널의 개수이다. 결과적으로, 커널 비트의 2개의 임의 세트들 중에서 유사한 비트의 개수가 고려될 수 있다. 이진 합성곱의 이점을 이용하기 위해서 가중치를 재사용함으로써 최적화가 달성될 수 있다. (M x M x C) 이진 가중치 값들의 대응 세트에 대하여 XNOR 연산과 pop-count 명령에 의한 연산을 수행하여 출력을 생성하고, 상기 출력을 다시 사용하여 또 다른 출력을 생성할 수 있다. 시각화를 쉽게 하기 위하여 이진 커널 비트들의 2개 세 트들 간에 N개의 다른 비트가 존재한다고 가정할 수 있다. 1부터 N까지 모든 i에 대해서 제1 커널 세트에 대해 서 A ({A1 A2 A3... AN})가 존재하고 제2 커널 세트를 위하여 B ({B1 B2 B3... BN})가 존재할 때, 미지의 입력 피처 맵 세트를 X {X1 X2 X3... XMxMxC}라고 가정할 수 있다. 여기서 {X1 X2... XN}는 이진 커널 비트들의 2개 세트에서 서로 다른 N개의 비트를 의미한다. 하나의 랜덤 비트를 1과 0을 이용하여 XNOR을 수행한 후 2개의 출력을 합 (sum)할 때, 최종 출력은 항상 1이다. N개의 랜덤 비트를 생성하기 위하여, 다음 수학식을 이용할 수 있다. 수학식 8"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 9, "content": "2개의 커널 세트에서 좌측의 C ({C1C2C3...CMxMxC-N}) 커널 비트들은 모두 동일하다. 따라서, 수학식 8에 따라 ({A, C} XNOR X)에 대한 pop-count 명령의 수행 결과는 다음 수학식과 같이 계산될 수 있다. 수학식 9"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 10, "content": "P1에 기초한 ({B, C} XNOR X)에 대한 pop-count 명령의 수행 결과를 위하여 다음 수학식과 같이 변형할 수 있다. 수학식 10"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 11, "content": "마지막으로, P1에 기초하여 P2를 계산하기 위하여 아래의 수학식을 이용할 수 있다. 수학식 11"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 12, "content": "수학식 7에 따라, 제2 채널의 출력은 다음과 같이 계산되어질 수 있다. 수학식 12"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 13, "content": "제1 컨볼루션 레이어에 대해서는 매우 유사하게 전체 입력 정밀 픽셀(precision pixel)을 이용할 수 있다. 특히, 2개의 곱셈의 합에 대해서 결과는 0 (Ax-1과 Ax1)이다. 여기서 A는 임의의 전체 정밀 픽셀(precision pixel)이다. 따라서, 커널 비트들의 2개 세트 사이에서 다른 비트의 개수, D개의 임의 전체-정밀 입력 픽셀들 간에 D개의 곱셈의 합, 그리고 D와 S2인 제2 채널에서 서로 다른 D개의 비트를 고려해야 한다. 제2 채널의 출력 은 다음 수학식을 이용하여 계산될 수 있다. 수학식 13"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 14, "content": "이러한 방식으로 전체 합성곱 연산을 구현할 수 있고 이는 정확도를 보정하면서도 하드웨어 자원을 상당하게 절 약할 수 있다. III. 본 개시에서 제안되는 아키텍처 III-1. HIGH-LEVEL 스트리밍 아키텍처 도 5는 본 개시에서 제안되는 BNN 스트리밍 아키텍처의 개념을 나타낸 예시도이다. 도 5를 참고하여 알 수 있는 바와 같이, BNN 스트리밍 아키텍처는 BNN 전용 가속기(즉, BNN 전용 NPU)와 메모리(예컨대 DDR 메모리)와 그리고 하나 이상의 DMA(Direct Memory Access)(300a 및/또는 300b)를 포함할 수 있다. 예시적으로, BNN 전용 가속기(즉, BNN 전용 NPU)와 상기 DMA(300a 및/또는 300b)는 PL(Programmable Logic)으로 구현될 수 있고, 상기 메모리는 PS(Processing System)로 구현될 수 있다. 상기 BNN 전용 가속기(즉, BNN 전용 NPU)는 하나 이상의 DMA(Direct Memory Access)(300a 및/또는 300b) 를 이용하고, AXI-4 스트림 버스를 통하여 메인 메모리(예컨대 DDR 메모리)에 연결될 수 있다. 상기 BNN 전용 가속기(즉, BNN 전용 NPU)는 첫 번째 레이어를 위한 제1 블록, 두번째 레이어를 위한 제2 블록, i번째 레이어를 위한 제3 블록 그리고 n번째 레이어를 위한 제4 블록을 포함할 수 있 다. 도 5에는 예시적으로 두번째 레이어는 컨볼루션 레이어이고, i번째 레이어는 최대 풀링 레이어이고, n번째 레이어는 완전 연결 레이어인 것으로 나타내었다. 상기 메모리는 2개의 영역으로 분할될 수 있다. 제1 영역은 입력 이미지를 저장하기 위해서 사용되고, 제2 영역은 출력을 저장하기 위해서 사용될 수 있다. 상기 하나 이상의 DMA(300a 및/또는 300b)는 상기 2개의 메모 리 영역에 대한 주소와 데이터 길이를 제공한다. 상기 제1 메모리 영역으로부터 각 입력 픽셀은 순차적으로 BNN 전용 가속기(즉, BNN 전용 NPU)로 전달된다. 일정 처리 시간 이후, 입력 이미지에 대한 분류 결과가 출력 되고, 제2 메모리 영역으로 전달된다.이하에서는, 스트리밍 데이터 버스의 대역폭에 대해서 설명하기로 한다. 인공 신경망의 오직 1개 레이어 만을 처리할 수 있었던 종래의 인공신경망 가속기(예를 들어, 일반적인 NPU)와 달리, 본 개시에서 제시되는 BNN 전용 가속기(즉, BNN 전용 NPU)는 전체 인공 신경망을 하드웨어로 구현할 수 있다. 본 개시에서 제시되는 BNN 전용 가속기(즉, BNN 전용 NPU)는 파이프라인 형태의 스트리밍 아키텍처에 기반 한다. 즉, 본 개시의 개시에 따른 BNN 전용 가속기(즉, BNN 전용 NPU)는 추론을 수행하면서 발생되는 부하 를 레이어들로 분산한다. 파이프라인의 개수는 레이어의 개수와 같다. 따라서, 입력 이미지의 픽셀들이 계속 수 신된다면, 모든 레이어들은 동시에 동작할 수 있고, 매우 높은 성능을 낼 수 있다. 추가적으로, 이전 레이어의 출력이 중간 저장 없이 바로 다음 레이어로 전달되기 때문에, 전달 지연을 줄일 수 있고, 필요로 하는 메모리의 크기를 획기적으로 줄일 수 있다. 한편, 모든 레이어들은 다른 하드웨어 모듈로 구현되기 때문에, 입력 데이터는 중단 없이 계속하여 처리될 수 있다. 레이어의 개수가 증가하게 되면 파이프라인만 늘리면 되므로, 성능 저하가 발생하지 않을 수 있다. 예를 들어, E*F 크기의 이미지가 입력된다고 가정하면, 상기 입력 이미지의 데이터는 매 클럭 사이클 마다 전달될 수 있다. 이 경우, 본 개시의 개시에 따른 BNN 전용 가속기(즉, BNN 전용 NPU)는 E*F 클럭 사이클 만에 이미 지를 분류하는 추론을 끝낼 수 있다. 결과적으로, 본 명세의 개시에 따른 BNN 전용 가속기(즉, BNN 전용 NPU)의 성능은 매 클럭 사이클 마다 입력되는 이미지 픽셀의 개수에 따라서 유연하게 상향될 수 있다. 구체적으로, 각 레이어를 위한 블록들은 파이프라인 기법 하에서 구현될 수 있다. 도 5에 도시된 바와 같이 제2 레이어, 즉 컨볼루션 레이어를 위한 제2 블록은 4개의 부분으로 나뉠 수 있다. 예시적으로 상기 4개의 부 분들 중 제1 부분은 도 3에 도시된 바와 같이 XNOR 로직 게이트(logic gate)로서, 곱셈 연산을 수행한다. 제2 부분은 가산기 트리로서 도 3에 도시된 바와 같이 pop-count 수행부를 포함할 수 있다. 그리고, 제3 부분은 배치 정규화 수행부이고, 제4 부분은 이진화(binarizing)를 수행하기 위한 이진화 부일 수 있 다. 만약, 제2 블록 다음에 위치하는 제3 블록이 최대 풀링(max pooling) 레이어를 위한 것일 경우, 상기 이진화 부의 출력은 상기 최대 풀링 레이어를 위한 제3 블록으로 바로 전달될 수 있다. 이처럼 본 개 시에서 제시되는 아키텍처 내에 기존 컨볼루션 레이어와 풀링 레이어를 완벽하게 구현할 수 있다. 도 6은 도 5에 도시된 제2 블록와 제3 레이어의 연결 관계를 나타낸 예시도이다. 도 5에 도시되었던 두번째 레이어를 위한 제2 블록은 도 6에 도시된 바와 같이, 제1 라인 버퍼, XNOR 논리 게이트, pop-count 수행부를 포함하는 가산기 트리 그리고 배치 정규화 수행부 및 이진화 (binarizing)부를 포함할 수 있다. 그리고, 도 5에 도시되었던 제3 블록은 도 6에 도시된 바와 같이 제2 라인 버퍼, 최대 풀링 수행부 (153 및/또는 155)를 포함할 수 있다. 레이어의 입력으로부터 출력까지의 과정을 완료 시키기 위하여, 이전 레이어로부터 입력되는 픽셀들의 값들은 제2 블록의 제1 라인 버퍼로 전달된다. 상기 제1 라인 버퍼는 각 픽셀들의 값들을 XNOR 논리 게이트 로 전달한다. 구체적으로, 일정 개수의 픽셀 값들이 제1 라인 버퍼 내에 로딩되면, 상기 제1 라인 버 퍼는 윈도우 값들을 생성하고, 상기 XNOR 논리 게이트으로 전달한다. 상기 XNOR 논리 게이트의 출력은 배치 정규화 수행부에서 임계 값과 비교되고, 배치 정규화를 위한 가중치(γ)에 따라서 적당한 동작이 수행된다. 한편, 본 개시의 일 예시에 따르면, 모든 파라미터들이 저장되는 것이 아니라, 임계 값들 만을 배치 정규화 수 행부를 위해서 저장한다. 따라서, 가중치를 저장하기 위한 메모리 그리고 배치 정규화를 수행하기 위한 sign(γ) 함수는 완벽하게 제거될 수 있다. 이와 같은 본 개시의 일 예시에 따르면, 임계값들이 지연없이 전달 될 수 있어서, 처리 속도를 향상시킬 수 있다. 상기 배치 정규화 수행부 및 이진화 부의 출력은 제3 블록의 제2 라인 버퍼로 전달된다. 도 6에서는 컨볼루션 레이어를 위한 제2 블록 다음에 최대 풀링 레이어를 위한 제3 블록 연결되어 있 는 것으로 도시되었으나, 도시된 바와 달리 제3 블록이 최대 풀링 레이어가 아닌 컨볼루션 레이어를 위한 것일 수도 있다 상기 제3 블록의 제2 라인 버퍼 내에 로딩된 다수의 값들이 일정 조건에 도달하면, 출력 윈도우가 생 성되고, 상기 최대 풀링 수행부(153 및/또는 155)로 전달한다. 상기 최대 풀링 수행부(153 및/또는 155)는 OR 연산을 수행하여 데이터를 변환하고, 후속 레이어 제4 블록의 제 3 라인 버퍼로 출력할 수 있다. III-2. 컨볼루션 레이어 및 풀링 레이어 내에 윈도우 생성을 위한 마이크로 아키텍처(MICROARCHITECTURE FOR WINDOW GENERATION INTO CONVOLUTION AND POOLING LAYER) 이하, 컨볼루션 레이어와 풀링 레이어를 위한 아키텍처에 대해서 상세하게 설명하기로 한다. 도 7은 C 윈도우(M x M)과 (K x C x M x M) 필터들 간에 일반적인 합성곱의 예시를 나타낸 예시도이다. 도 7을 참조하면, 쉽게 이해할 수 있도록 (E x F) 크기의 입력 피처 맵이 나타나 있다. 필터의 크기 는 (M x M)일 수 있고, 입력 채널의 개수는 C일 수 있다. 출력 채널(711, 712, 713)의 개수는 K일 수 있다. 합성곱 연산을 위하여, (M x M) 크기의 입력 피처 맵의 데이터를 포함하는 윈도우는 동일한 크기를 갖는 필터와 곱해진다. 예시적으로 M은 3일 수 있고, 풀링 레이어에서 풀링 윈도우의 크기는 (2 x 2)일 수 있다. 후속 레이어로 데이터를 전달하기 위하여, 이전 레이어의 후단에는 쉬프트-레지스터 기반 라인 버퍼가 배 치될 수 있다. 이와 같은 쉬프트-레지스터 기반 라인 버퍼를 이용하게 되면, 이전 레이어에서 피처 맵이 완벽하 게 생성되기 까지 기다리지 않고, 필요한 만큼의 데이터가 전달되면 바로 연산을 수행할 수 있다. 즉, 각 레이 어는 이전 레이어가 종료될 때까지 기다릴 필요가 없게 되므로, 처리 시간을 획기적으로 단축할 수 있다. 본 개시의 일 예시에 따르면 2가지 타입의 라인 버퍼가 제시된다. 제1 타입의 라인 버퍼는 컨볼루션 라인 버퍼 (convolution line buffer, CLB)이고, 제2 타입의 라인 버퍼는 풀링 라인 버퍼(pooling line buffer, PLB)일 수 있다. 예시적으로, 도 6에 도시된 바와 같이 상기 제1 타입의 라인 버퍼(즉, CLB)는 제2 블록 내의 제1 라인 버 퍼일 수 있다. 이 경우, 상기 제1 타입의 라인 버퍼(즉, CLB), 즉 제1 라인 버퍼는 이전 레이어로부 터의 입력 픽셀들의 값들을 저장한 다음, 곱셈 연산을 위하여 컨볼루션 윈도우를 제공할 수 있다. 일반적으로, 생성된 윈도우들의 개수가 단지 1개일 경우, 제1 타입의 라인 버퍼(즉, CLB)는 ((M - 1) x E + M) 파이프라인 레지스터를 포함할 수 있다. 도 8은 제1 타입의 라인 버퍼(즉, CLB) 상에 2개의 윈도우를 갖는 출력의 예시를 나타낸 예시도이다. 도 8에 도시된 바와 같이, 생성된 윈도우들(820, 830)의 개수가 매 N 클럭 사이클 마다 증가할 때, 제1 타입의 라인 버퍼(즉, CLB)의 크기는 ((M - 1) x E + M + N - 1)일 수 있다. 곱셈 및 pop-count 연산 과정에서, 연산 의 횟수는 하나의 윈도우를 생성하는 것에 비해 N배 클 수 있다. 상기 제1 타입의 라인 버퍼(즉, CLB) 상에 레 지스터들의 개수가 일 때, 상기 제1 타입의 라인 버퍼(즉, CLB) 상의 좌표들 (coordinates)을 통해 상기 제1 타입의 라인 버퍼(즉, CLB)는 출력 윈도우에 대해서 적절한 값들을 선택하기 시 작한다. 그 다음 pop-out 동작을 수행한 후 대응하는 유효한 출력 시그널(예컨대, out_valid)을 표명(assert)한 다. N > 1인 경우를 위하여, 매 클럭 사이클 마다 N개의 윈도우를 계속해서 생성하기 위하여, 상기 제1 타입의 라인 버퍼(즉, CLB)는 동일한 구간 동안에 새로운 N개의 입력 값들을 수신한다. 제1 컨볼루션 레이어에 대해서, 메모리가 매 클럭 사이클 마다 N개의 입력 픽셀을 제공하는 경우, 모든 레이어들에서 문제가 발생하지 않는다. 자세한 과정은 표 3에 나타나 있다. 표 3"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 15, "content": "위 표 3에서 rx 및 ry은 프레임 상의 윈도우 중심 좌표이다. ix 및 iy는 윈도우 상에 각 픽셀의 좌표를 나타내 고, L은 ((M -1) x E + M + N-- 1) 크기를 갖는 CLB를 나타낸다. 알고리즘 1을 이해하기 쉽게 하기 위하여, 도 9 및 도 10을 참조하여 설명하기로 한다. 도 9는 출력을 생성할 준비가 되었을 시점에 이미지 프레임 상에서 윈도우의 위치 및 제1 타입의 라인 버퍼(즉, CLB)를 나타내는 예시도이다. 그리고 도 10은 수행이 완료되었을 시점에 이미지 프레임 상에서 윈도우의 위치 및 제1 타입의 라인 버퍼(즉, CLB)를 나타내는 예시도이다. 예시적으로, 도 6에 도시된 바와 같이 상기 제1 타입의 라인 버퍼(즉, CLB)는 제2 블록 내의 제1 라인 버 퍼일 수 있다. 제1 타입의 라인 버퍼(즉, CLB), 즉 제1 라인 버퍼가 하나의 윈도우를 이용하여 출력을 생성하기 시 작하는 시점에 상기 제1 타입의 라인 버퍼(즉, CLB), 즉 제1 라인 버퍼의 상태가 도 9에 시각적으로 나타 나 있고, 이미지 프레임을 전송하는 도중 상기 제1 타입의 라인 버퍼(즉, CLB), 즉 제1 라인 버퍼의 상태 는 도 10에 나타나 있다. 도 9 및 도 10의 예시들에서 MNIST 데이터 세트의 경우 M은 3이고 E와 F는 28이다. 그 리고, 도 9 및 도 10의 예시들에서 Cifar-10 데이터 세트가 이용되는 경우, E와 F는 동일하게 32일 수 있다. 다른 한편, 제2 타입의 라인 버퍼는 PLB(pooling line buffer)일 수 있다. 예를 들어, 상기 제2 타입의 라인 버 퍼(즉, PLB)는 도 6에 도시된 바와 같이 제3 블록 내의 제2 라인 버퍼일 수 있다. 구체적으로, 도 6 에 도시된 바와 같이 상기 제2 타입의 라인 버퍼(즉, PLB), 즉 제2 라인 버퍼는 풀링 레이어를 위한 제3 블록 내의 전단에 위치하여, 배치 정규화 수행부를 포함하는 제2 블록과 연결될 수 있다 수 있 다. 대안적으로, 상기 제2 타입의 라인 버퍼(즉, PLB), 즉 제2 라인 버퍼는 제3 블록 외부에 위치하 되, 제2 블록과 상기 제3 블록 사이에 위치할 수 있다. 상기 제2 블록으로부터 나오는 출력은 상기 제2 타 입의 라인 버퍼(즉, PLB), 제2 라인 버퍼로 전달되고, 상기 PLB로부터 생성된 윈도우들은 상기 최대 풀링 수행부(153 및/또는 155)로 전달될 수 있다. 도 11a는 제2 타입의 라인 버퍼(즉, PLB)를 예시적으로 나타낸 예시도이고, 도 11b는 제2 타입의 라인 버퍼(즉, PLB)의 출력을 나타낸 예시도이다. 상기 제2 타입의 라인 버퍼(즉, PLB)는 도 6에 도시된 바와 같이 제3 블록 내의 제2 라인 버퍼일 수 있다. 도 11a에 도시된 바와 같은 상기 제2 타입의 라인 버퍼(즉, PLB)는 상기 제1 타입의 라인 버퍼(즉, CLB)와 비교 하여, 경계 상의 패딩을 고려하지 않을 수 있다. 오직 유효한 시그널만이 입력 피처 맵 내의 대응 위치에서 표 명(assert)될 수 있다. 윈도우의 크기는 2x2라고 가정하고, 생성된 윈도우의 개수는 1개라고 가정 할 경우, 제1 풀링 레이어를 위한 매 2개의 클럭 사이클 이후 그리고 i번째 풀링 레이어에 대해서 매 2 i 클럭 사이클 이후에 유효 시그널이 인에이블(enable)될 수 있다. 이는 조건 y%2 = 0를 만족할 수 있다.제2 타입의 라인 버퍼(즉, PLB)가 윈도우를 생성하는 2개의 시간 구간들 간에 여유 구간(spare interval)을 이 용하기 위하여, 일 실시예는 입력 데이터의 레벨을 증가시킴으로써, 매 클럭 사이클 마다 제2 타입의 라인 버퍼 (즉, PLB)로부터 윈도우들을 생성하는 것을 제안한다. 특히, 도 11b에 도시된 최대 풀링 수행부가 N (N은 > 1이고, 2의 배수이다) 개의 입력 값들을 동시에 제공 받을 경우, 생성된 윈도우의 개수는 N/2일 수 있다. 풀링 레이어 내의 이러한 윈도우들은 조건 y%2 = 0이 충족될 경우, 매 클럭 사이클 마다 생성되는 것이 확인될 수 있다. 따라서, N개의 동시 입력(parallel inputs) 값들에 대해서 상기 제2 타입의 라인 버퍼(즉, PLB)는 처리 속도를 N배 증가시킬 수 있다. 이는 후속 곱셈 연산 및 pop-count 동작을 위해서 필요로 하는 하드웨어 자원을 반으로 줄일 수 있다는 것을 의미한다. 상기 제2 타입의 라인 버퍼(즉, PLB)의 사이즈에 관해서 설명하면 다음과 같다. 만약 상기 제2 타입의 라인 버 퍼(즉, PLB)가 N개의 동시 입력들(parallel inputs)에 대응하는 N/2 개 윈도우를 출력할 경우, 상기 제2 타입의 라인 버퍼의 크기는 (E + N) 레지스터들에 의해서 결정될 수 있다. 나아가, 이전 레이어로부터 제공되는 동시 입력들(parallel inputs)의 개수에 기초하여 상기 제2 타입의 라인 버퍼(즉, PLB)의 크기가 (N/2 > 1)일 경우에 는 상기 크기는 더 커질 필요가 있고, (N/2 = 1)일 경우에는 상기 크기가 더 커질 필요가 없다. 게다가, 동시 (parallel) 입력 픽셀의 개수는 2의 제곱일 필요가 없고, E로 나누어질 필요도 없다. 예를 들어, 풀링 윈도우의 크기가 (2 x 2)일 경우 그리고 이전 레이어로부터의 동시 입력(parallel inputs)의 개수 N은 2일 경우, 상기 제 2 타입의 라인 버퍼(즉, PLB)의 크기는 E+2개의 레지스터에 의해서 결정될 수 있고, 매 클럭 사이클 마다 1개의 풀링 윈도우를 2번 생성할 수 있다. 한편, 이전 레이어가 (N = 4)개의 동시 입력들을 제공하는 경우, 상기 제2 타입의 라인 버퍼(즉, PLB)의 크기는 (E + 4)개의 레지스터에 의해서 결정될 수 있고, 매 클럭 사이클 이후에 2 개의 윈도우를 (N = 1) 일 때에 비해서 4배 더 생성할 수 있다. 동작 메커니즘 관점에서, 상기 제2 타입의 라인 버퍼(즉, PLB)가 유효한 데이터로 완전히 채워질 때, 상기 제2 타입의 라인 버퍼(즉, PLB)는 풀링 윈도우를 생성하기 시작한다. 특히, 입력 신호가 유효하다고 표명될 때로부 터 시간 지연은 (E + N)/N 클럭 사이클에 기초하여 결정될 수 있다. 자세한 사항은 아래의 표에 나타난 알고리 즘 2와 같다. 알고리즘 2는 (N = 1)일 때 라인 버퍼의 동작을 나타내는 도 11a 및 도 11b를 참고하여 나타낸 것 이다. 표 4"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 16, "content": "III-3. MAC 연산과 배치 정규화 동작을 위한 마이크로 아키텍처(MICRO-ARCHITECTURE FOR MAC OPERATION AND BATCHNORM) 전술한 윈도우들이 쉬프트-레지스터 기반 라인 버퍼를 통해서 생성된 이후에, 데이터는 다음 레이어로 전달되기 전에 일련의 연산, 즉 곱셈 연산, pop-count 명령을 통한 덧셈 그리고 배치 정규화 과정을 거치게 된다. 이러한 과정들은 항상 가장 중요한 시간 경로들이고 대부분의 에너지를 소모하는 구간이다. 이 때문에, 동작 클럭 주파 수가 낮아지게 되고, 시스템 성능이 저하되게 된다. 그러나, 본 명세에서 제시하는 아키텍처는 이러한 과정들의 데이터 경로들은 최적하고, 처리 시간 지연을 최소 화하고 전력 소모를 절감시킬 수 있다. 구체적으로, 설명하면 다음과 같다. 첫 번째로, 모든 가중치 값들은 곱셈 연산에서 상수이기 때문에, 가중치 값이 0일 때에는 XNOR 게이트들을 NOT 게이트로 대체할 수 있고, 상기 가중치 값이 1일 때에는 상기 입력을 pop-count 명령 처리부로 바로 연결할 수있다. 유사하게, 배치 정규화 동작에서, 사인(sign) 값(즉, γ)은 NOT 게이트를 사용해야 할지 아니면 XNOR 게 이트를 사용해야 할지를 결정할 수 있게 한다. XNOR 게이트를 사용함으로써 시간 지연을 상당히 줄일 수 있고 또한 메모리 자원의 사용을 최소화할 수 있다. 두번째로, 본 개시에서 제시되는 아키텍처는 동시 수행(parallelism), 파이프라인 기법 그리고 가중치 재사용 최적화를 이용하여 BNN을 효율적으로 처리할 수 있다. 이에 대해서 상세하게 설명하면 다음과 같다. 1) 파이프라인 및 페럴렐리즘(Parallelism) 메커니즘 프로세서의 성능을 결정하는 주요한 인자는 최대 클럭 주파수이다. 그러나 주요한 시간 경로들은 클럭 주파수를 낮추는 요인으로 작용한다. 따라서, 본 개시는 이러한 시간 경로들을 단축시키기 위하여 중간 레지스터를 BNN 아키텍처 내에 추가하는 것을 제안한다. 시스템 성능은 상기 중간 레지스터의 초기 지연 사이클 이후에는 괄목 하게 개선될 수 있다. 요구 조건(주파수, 영역, 전력) 및 파라미터 입력(즉, 채널의 개수 및 입력 비트폭)에 기 초하여, 상기 중간 레지스터들을 적당한 곳에 배치함으로써, 전체 논리 회로의 지연 경로는 목표 클럭 구간 보 다 짧아질 수 있다. 곱셈 연산의 출력에 추가한 파이프라인의 예시적인 디자인이 도 12에 나타나 있다. 도 12는 XNOR 게이트, 가산기 트리 그리고 배치 정규화의 파이프라인을 나타낸 예시도이다. 도 12에 도시된 바와 같이, 곱셈 연산을 위한 XNOR 게이트, pop-count를 포함하는 가산기 트리, 배치 정규화부가 파이프라인으로 연결되어 있다. 상기 XNOR 게이트, 상기 pop-count를 포함하는 가산기 트리, 그리고 상기 배치 정규화부 사이에 는 중간 레지스터(intermediate register)가 배치될 수 있다. 상기 중간 레지스터는 도시된 바와 같이 물리적으 로 하나만 존재하는 대신, 여러 영역으로 파티셔닝(partitioning) 될 수 있다. 예를 들어, 상기 중간 레지스터 의 제1 영역은 상기 XNOR 게이트와 상기 가산기 트리 사이의 파이프라인을 통하여, 필요한 제1 파라 미터(예컨대 X)를 전달할 수 있다. 그리고 상기 중간 레지스터의 제2 영역은 상기 가산기 트리와 상기 배 치 정규화부 사이의 파이프라인을 통하여 필요한 제2 파라미터(예컨대 Z)를 전달할 수 있다. 또는, 대안적 으로, 상기 중간 레지스터는 다수개가 존재할 수 있다. 예를 들어, 상기 제1 중간 레지스터는 상기 XNOR 게이트 와 상기 가산기 트리 사이의 파이프라인을 통하여, 필요한 제1 파라미터를 전달할 수 있다. 그리고, 상기 제2 중간 레지스터는 상기 가산기 트리와 상기 배치 정규화부 사이의 파이프라인을 통하여 필요 한 제2 파라미터를 전달할 수 있다. 페럴렐리즘 기법에 관하여, 동시적인 컴퓨팅은 하드웨어 구현에서 전체 시스템 성능을 개선하는데 도움이 된다. 그러나 이는 트레이드-오프 관계에 있다. 우선 i) 상당한 양의 하드웨어가 필요로 하고 이는 전력 소모를 증가 시킨다. 그리고 ii) 혼잡도가 증가되고 결과적으로 설계의 어려움이 따른다. BNN에서 가중치 데이터와 피처 맵 데이터 둘 다는 1개의 비트로 줄어들기 때문에, 합성곱 연산에서 많은 루프는 하드웨어 자원 없이는 제대로 역 할을 할 수 없다. 이에 대해서 도 13을 참고하여 설명하기로 한다. 도 13은 합성곱 연산에서 전체 6개의 루프를 코드로 나타낸 예시도이다. 도 13에 나타난 전체 6개의 루프 중에서 3번째 루프부터 6번째 루프까지의 내부 루프가 펼쳐지도록 할 수 있다. 먼저, 루프 3부터 루프 6까지를 해제(펼침 또는 unrolling)하게 되면, 데이터 처리와 데이터 생성 간에 밸런스 를 맞출 수 있다. 이는 후속 레이어의 필터 사이즈 및 커널의 개수와 무관하게 후속 레이어에서 유휴 시간이 발 생되지 않도록 한다. 이와 같이 모든 루프들을 해제(펼침 또는 unrolling)으로써, 라인 버퍼에서 생성되는 모든 입력 윈도우들은 동시에 수행될 수 있고 결과적으로 시간 지연을 상당히 감소시킬 수 있다. 추가적으로, 하드웨어 이용률을 검토하기 위해서 루프 2를 펼칠 수 있다. 루프 2를 해제(펼침 또는 unrolling) 하는 것은 단순히 라인 버퍼로부터 매 클럭 사이클 마다 생성되는 윈도우의 개수들을 증가시키고 MAC 블록의 연 산을 중복하여 복사함으로써 달성될 수 있다. 2) MAC 연산 앞선 II절에서 설명된 바와 같이, pop-count 명령 수행을 최적화하기 위하여 가중치 재사용 기법을 활용하는 것 이 매우 효과적이다. 가중치 재사용 기법은 그래프 파티셔닝 및 해밀토니안(Hamiltonian)의 최단 경로 알고리즘 을 활용할 수 있다. 상기 해밀토니안(Hamiltonian)의 최단 경로를 위하여, 가중치 재사용 동작의 횟수를 증가시 키는 것이 손쉬운 방법이다. 그러나, 많은 채널을 포함하는 컨볼루션 레이어에 대해서, 위 기법은 많은 수의 플리-플롭(Flip-flops) 소자를 필요로 하고 지연을 상당히 증가시킨다. 일반적으로, 해밀토니안(Hamiltonian) 경 로를 사용하는 것은 각 채널의 출력을 첫 번째 출력을 제외한 이전 채널의 출력에 의존하게 만든다. 결과적으로, 많은 레지스터들이 후속 레이어와 동기화되기 위하여 추가되어야 하고, 이는 초기 지연을 증가시키 고 더 많은 하드웨어 자원을 요구하게 된다. 예를 들어, 해밀토니안(Hamiltonian) 그래프가 K개의 출력 채널들 에 대해서 적용될 경우, 동기화를 위해서 사용되는 플리-플롭의 개수는 다음 수식에 의해서 결정된다. 수학식 14"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 17, "content": "여기서 m은 동일 클럭 구간 내에서 산출되는 출력 채널들의 개수이고, bitwidth은 pop-count 명령 동작의 출력 을 저장하기 위해서 사용되는 데이터의 폭이다. 전술한 불이익에 대해서 도 14a를 참고하여 설명하기로 한다. 도 14a 및 도 14b는 2개의 기법, 즉 해밀토니안(Hamiltonian) 최단 경로 기법과 K-means 클러스터 기법을 사용 할 때, 서로 다른 메커니즘들을 나타낸 예시도들이다. 구체적으로 도 14a는 해밀토니안(Hamiltonian) 최단 경로 기법을 사용할 때, 컨볼루션 레이어를 위한 제2 블록 에서 XNOR 연산 및 pop-count 명령 수행의 순차적인 과정들을 나타낸 예시도이고, 도 14b는 K-mean 클러스 터 기법을 사용할 때, 컨볼루션 레이어를 위한 제2 블록에서 XNOR 연산과 pop-count 명령 수행을 동시에 수행하는 과정을 나타낸 예시도이다. 한편, 해밀토니안(Hamiltonian) 최단 경로를 찾기 위한 알고리즘이 실질적으로 존재하지 않기 때문에, 꼭지점들 (vertices)의 개수를 고려하면 상당히 흥미 있는 연구이다. 예를 들어, N개의 꼭지점들을 갖는 완전 연결 그래 프에 대해서 해밀토니안(Hamiltonian) 최단 경로는 찾는 연구는 도전할 만 가치가 있다. 해밀토니안(Hamiltonian) 최단 경로를 찾기 위한 가장 짧은 해밀토니안(Hamiltonian) 사이클을 찾기 위하여 2가 지 논의가 진행되고 있다. 첫 번째 논의는 해밀토니안(Hamiltonian) 사이클의 검색 횟수를 줄임으로써, 가장 짧 은 해밀토니안(Hamiltonian) 사이클 정확하게 찾는데 사용되는 \"정확 해법(exact solution)\"이다. 그러나 이는 커다란 그래프에 대해서 최종 결과를 산출하는데 상당히 오랜 시간과 노력을 허비한다. 일반적으로 꼭지점들이 개수가 증가할 때, 처리 시간은 지수승, 예컨대 N22N 로 증가한다. 두번째 논의는 거대한 그래프에 대해서 보다 공통이 되는 근사치 알고리즘이다. 위 문제를 해소하기 위하여, 전체 그래프를 작은 개수의 서브-그래프로 분할하는 파티셔닝 기법이 논의 되었다. 상기 서브-그래프에서 꼭지점의 개수는 64개로 제한된다. 그러나, 이러한 논의는 하드웨어 설계에서 구현되는 출력 채널의 개수를 증가시키는 단점이 있다. 게다가 서브-그래프의 개수는 서브-그래프에서 제한된 꼭지점의 개수(즉, 64개)에 의존한다. 그러므로 출력 채널이 더 많아 질 수 록, 출력 채널을 구현하기 위하여 하드웨어 자원을 더 많이 요구하기 되고 전력 소모를 증가시킨다. 따라서 본 개시의 일 예시는 유사하게 그래프를 이용하되, 이를 개선시키는 방안을 제시한다. 제시되는 방안에 따르면, (M x M x C) 이진 가중치 값들의 각 세트는 꼭지점을 나타내고, 2개의 세트들 간에 서로 다른 비트의 개수는 2개의 꼭지점을 연결하는 모서리의 거리라고 가정된다. 그래프를 파티셔닝하기 위하여, 1부터 K까지 매 R(즉, 출력 채널의 개수)에 대해서 K-mean 클러스터 알고리즘이 사용될 수 있다. 최적의 R 값은 모든 출력 채널의 결과를 산출하기 위해서 사용되는 이진 비트의 가장 작은 개 수를 제시한다. 이를 통해 모든 반복 이진 비트가 제거될 수 있다. 제안 방법은 K-mean 클러스터를 사용한다. 이는 도 14b에 나타나 있다. 최적의 R 값을 찾기 위한 수학식은 다음과 같다.수학식 15"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 18, "content": "여기서 R은 서브-그래프의 개수이고, mi는 동일한 중심을 갖는 꼭지점의 개수를 나타내고, Distij는 중심점 ith 와 꼭지점 j를 연결하는 거리이고, (R x C x M x M)은 R개의 출력 채널에서 전체 비트의 개수를 나타낸다. 제안 방법에서, K-mean 클러스터는 꼭지점 및 대응 중심점들의 R 그룹을 찾기 위해서 사용된다. 이론적으로, K-mean 클러스터 알고리즘의 출력은 R개의 서브 그래프를 포함한다. 여기서 R은 초기 R 중심 및 모 든 꼭지점들의 좌표에 기초한 대응하는 중심들을 나타낸다. 첫째 과정에서, 각 꼭지점에서 그룹의 중심까지의 거리가 가장 짧도록, 각 꼭지점은 그룹화된다. 두 번째 과정에서, 꼭지점들의 각 그룹에서 새로운 그룹의 중심 이 다음의 수학식을 통해서 선택된다. 수학식 16"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 19, "content": "여기서, Mi 및 xj는 ith 그룹의 중심 및 jth 꼭지점 좌표이다. 모든 꼭지점에서 중심점까지의 거리의 모든 합이 최소가 되도록 위 2개의 단계들은 반복될 수 있다. 그러나, 임의의 2개 꼭지점들 간의 거리가 유효한 정보일 수 있다. 따라서, 위 두 번째 과정에서 그룹 내의 모든 꼭지점들까지의 거리의 합이 가장 짧은 꼭지점만을 선택할 수 있다. 한편, K-mean 클러스터는 다음과 같은 제한을 갖는다: 각기 다른 R개의 초기 중심점들은 파티셔닝 방식을 다르 게 만든다. 반면, 다른 R개의 초기 중심점들 그리고 1부터 K까지의 R 값(즉, 출력 채널의 개수) 모두를 산출하 는 것은 출력 채널의 개수가 방대한 레이어일 경우 엄청나게 긴 시간을 허비하게 만든다. 예를 들어, 레이어가 K 출력 채널들을 포함할 경우, 분석해야 할 전체 경우의 수는 다음과 같다. 수학식 17"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 20, "content": "탐색 경우의 수가 100,000만 이상일 경우, 경우의 수를 줄이기 위하여, 제1 R 중심을 초기화하기 위한 K-mean++ 를 사용할 수 있다. 게다가, 출력 결과를 보다 정확하게 하기 위하여, 모든 경우의 수에 대한 제2 중심이 연산 되고, 최적의 값이 선택될 수 있다. 또한, 하나의 레이어가 K개이 출력 채널을 갖고 그리고 클러스터의 개수가 1부터 K까지 변화될 경우, 전체 경우의 수는 기본 K-mean 알고리즘을 사용할 때(여기서 K > 5)의 경우의 수(즉, 2K-2)일 경우 보다 작은 K2일 수 있다. 3) MAC compression 도 15는 6:3 가산기의 Pop-count 압축을 나타낸 그래프이고, 도 16은 3:2 가산기의 Pop-count 압축을 나타낸 그 래프이다. 도 17은 Cifar-10 데이터 세트를 사용하는 경우 본 개시에서 제안되는 BNN 아키텍처의 전략 사용량을 백분율로 나타낸 그래프이다. 도 18은 Cifar-10 데이터 세트를 사용하는 경우에, 본 개시에서 제안되는 BNN 아키텍처의 영역을 배분율로 나타낸 그래프이다. 도 17 및 도 18에 도시된 바와 같은 BNN 아키텍처에서 대부분의 하드웨어 자원과 전력을 소모하는 MAC 연산을 추가적으로 최적화하기 위하여, pop-count 명령에서 압축을 사용하는 2개의 기법을 적용할 수 있다. 첫 번째로, 도 15에 도시된 바와 같이 LUT 개수를 줄이기 위하여 가산기 트리에 6:3 가산기를 추가함으로써 6:3 압축 이 적용될 수 있다. LSB(low significant bit)로부터 MSB (most significant bit) 까지의 출력 결과의 각 비트 는 6:3 가산기를 이용하여 순차적으로 계산될 수 있다. 이러한 방식으로, 너무 많은 비트들이 가산기에 입력되 는 것을 방지할 수 있고 하드웨어 자원을 절약할 수 있다. 유사하게, 자동화된 하드웨어의 구현에서, 도 16에 도시된 바와 같은 가산기 트리 내에 3:2 가산기 압축이 제공될 수 있다. pop-count 명령 동작의 입력 비트폭에 기초하여, 3:2 압축 및 6:3 압축이 가산기 트리에 선택되어 적용될 수 있 다. 아래의 표는 3:2 압축이 일부 자원(MNIST 모델에 대해서 7.5%의 LUT 그리고 Cifar-10 모델에 대해서 905% LUTs)만을 사용하는, 6:3 압축은 2개의 모델 모두에서 더 적은 전력(MNIST 모델의 경우 6.7% 그리고 Cifar-10 모델의 경우 11.5%)을 소모하는 것을 나타낸다. 아래의 표 5는 가산기 트리에 3개의 옵션(무압축, 3:2 압축, 6:3 압축)을 적용하였을 때, 하드웨어 자원과 전력 소모를 나타낸다. 표 5 윈도우 개수 =1 룩업 테이블 (LUTs)플리-플롭(FF s) Power MNIST (100Mhz)Non-compress 10,527 5,923 0.428 Compress 3:2 9,740 5,723 0.413 Compress 6:3 10,310 5,720 0.399 CIFAR-10 (50Mhz)Non-compress 311,546 38,571 6.598 Compress 3:2 281,861 38,566 6.256 Compress 6:3 290,600 38,530 5.837 도 19a는 pop-count 명령의 재사용이 없을 경우 MAC 연산 과정을 나타내고, 도 19b는 pop-count 명령을 재사용 할 경우 MAC 연산 과정을 나타낸다. 본 개시의 일 예시는 하드웨어 자원을 획기적으로 절약하기 위하여 pop-count 명령의 재사용 기법을 제안한다. 도 19a에 도시된 바와 같이 pop-count 명령을 재사용하지 않는 경우 K개의 출력 채널을 위해서 K개의 pop-count 명령의 수행이 구현될 수 있는 반면, 도 19b에 도시된 바와 같이 pop-count 명령을 재사용하는 경우 pop-count 명령의 수행은 X번으로 줄어들 수 있다. 여기서 X는 동일한 Pop-count 명령을 사용하는 출력 채널의 개수이다. 스트리밍 아키텍처의 지속성을 유지하기 위하여, pop-count 명령을 사용하는 클럭 소스는 다른 것을 사용하는 클럭 소스에 비하여 X 배 빠를 수 있다. X의 값은 요구되는 성능에 기초하여 결정될 수 있다. X의 값을 증가시 킬 경우, 하드웨어 오버헤드와 성능은 저하된다. 반면에 X를 감소시키는 경우 하드웨어 오버헤드와 성능은 증가 될 수 있다. III-4. 아키텍처의 동작 시간 III-1절에서 설명한 바와 같이, 본 명세에서 제안하는 아키텍처 디자인은 레이어의 개수와 동일한 파이프라인 단계를 갖는 구조이다. 단계들을 중첩 시킴으로써, 성능과 초기 파이프라인 충전(filling) 시간은 비약적으로 개선될 수 있다. 특히, 특정 레이어의 CLB(convolution line buffer)는 하기 수학식에 따른 클럭 사이클 이후에 윈도우 값들을 생성할 수 있다. 수학식 18"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 21, "content": "게다가, 루프 해제(또는 펼침 또는 unrolling하고, 파이프라인을 적용함으로써, 곱셈 및 pop-count 명령 수행 모듈은 일반적인 횟수의 클럭 사이클(즉, Np)만을 필요로 할 수 있게 된다. 출력 채널의 개수와 입력 비트폭에 기초하여, 클럭 사이클의 개수는 가장 높은 주파수를 갖도록 변형되고 타이밍 조건을 맞출 수 있게 된다. 따라 서, 도 20에 도시된 바와 같이, 특정 레이어의 시작 시간 보다 늦은 Nf + Np 클럭 사이클 이후에, 후속 레이어의 동작이 수행될 수 있다. 도 20은 본 개시에서 제안되는 아키텍처의 처리 시간을 나타낸 예시도이다. 각 풀링 레이어에 대하여, 출력(윈도우 사이즈는 2x2이고, 동시 입력의 개수는 N)을 생성하기 위해서 E+N 클럭 사이클이 필요할 수 있다. 따라서 후속하는 컨볼루션 레이어는 현재 풀링 레이어 이후 E+N 사이클을 기다려야 한다. 완전 연결 레이어의 관점에서 제1 데이터를 수신하고 10개 출력 채널의 제2 임시 최대 값을 생성하기까지 Nfc 클럭 사이클이 요구된다. 상기 클럭 사이클의 개수는 요구되는 주파수에 따라서 유연하게 변경될 수 있다. 특히, 300 Mhz의 주파수를 이용하는 실험에서, 10개의 임시 출력 값으로부터 최대 값을 찾기 위하여 완전 연결 레이어는 3개의 클럭 사이클을 필요로 하는 것으로 확인되었다. 제안된 BNN 하드웨어 가속기(즉, NPU) 내에 입력 데이터가 연속적으로 채워지기 때문에, 루프 2가 해제되지 않 는 경우 하나의 추론 동작을 처리하기 위하여 모든 레이어들(컨볼루션 레이어, 풀링 레이어 그리고 완전 연결 레이어)에서 초기 시간 지연의 합계는 E * F 클럭 사이클에 의해서 결정될 수 있다. 루프 2를 해제하지 않는 경 우에 대해서, 요구되는 클럭 사이클의 개수는 N배(여기서 N은 CLB의 윈도우 개수임) 감소될 수 있다. 결과적으 로 하나의 입력 이미지를 분류하기 위해서는 (E x F / N) 클럭 사이클이 요구된다. IV. 실험 결과 IV-1. BNN 모델 분석 잠재적인 모델 아키텍처 공간을 탐색하고 최적의 BNN 모델을 얻고, 정확도가 향상되면서 소프트웨어 모델이 제 안된 최적화 기법과 호환되도록 하기 위해서는, 모든 모델에 대해 몇 가지 학습 조건이 필요하다. 특히, 각 컨 볼루션 레이어 뒤에 배치 정규화 연산이 추가되고, 최대 풀링 레이어는 두 번째 컨볼루션 레이어의 배치 정규화 연산 다음에 배치될 수 있다. MNIST 데이터 세트를 사용하는 모델의 경우 이진 검색은 레이어일 수 있다. MNIST 데이터 세트에 대한 학습을 수행하기 위한 초기 입력은 다음과 같을 수 있다 1) BNN 모델의 레이어 개수 범위: L ={3; 4; 5} 2) 레이어당 채널의 최대 개수: Ci 50 3) 목표 정확도 임계값 위와 같은 3개의 입력을 기반으로, 모든 계층에 대해 최소 채널 수를 가진 BNN 모델이 찾아질 때까지, 각 L 값 에 대해 이진 검색을 사용하여 각 계층의 채널 수를 균일하게 줄일 수 있다. 다음으로, 상기 모델을 기반으로, 각 특정 계층에 대한 채널 수를 최소화하기 위하여 이진 검색을 계속 사용할 수 있다. 결과적으로, 특정 L 값에 해당하는 최적의 BNN 모델이 결정될 수 있다. 각 모델은 집합 L의 요소로 표현되는 가 변 레이어 수를 가질 수 있다. 따라서 출력 모델의 수는 집합 L의 크기로 표현됩니다. 게다가 각 초기 BNN 모델 에서 각 레이어의 채널 개수만 최적화된 경우 검색 공간을 줄이기 위해 네트워크 아키텍처의 모든 구성 요소를 독립적으로 미리 정의할 수 있다. 학습 환경 측면에서 Adaptive Moment Estimation(Adam) 옵티마이저를 처음 30 epoch에 사용하고 Stochastic gradient descent(SGD) 옵티마이저를 나머지 70 epoch에 사용하는 생산적인 옵티마이저를 활용할 수 있다. 여기서 학습률은 0.03으로, 모멘텀을 0.5은 설정될 수 있다. Cifar-10 데이터 세트를 사용하는 모델의 경우, 제안된 하드웨어 아키텍처와 호환되도록, 모델 구조를 기반으로 일부 학습 조건을 변경할 수 있다. 특히, 더 적은 수의 채널만으로 정확도를 향상시키기 위해 각 컨볼루션 레이 어에 대해 -1 값으로 패딩을 추가한다. 또한 마지막 컨볼루션 레이어의 출력 피처 맵은 1x1 차원으로 보장되고, 이는 완전 연결된 레이어에 MAC 최적화 방법을 적용할 수 있도록 한다. 훈련 환경의 경우 Adam 옵티마이저는 500 Epoch로 사용될 수 있다. 학습률은 처음 40 Epoch 동안에 0.005, 80번째 Epoch에서 0.0001, 120 번째 Epoch에서 5e-05 (또는 5*10^-5), 160번째 Epoch에서 5e-06 (또는 5*10^-6)를 보였다. 본 개시는 앞서 언급한 접근 방식을 사용하여 Cifar-10 데이터 세트에 대한 한가지 모델과 MNIST 데이터 세트에 대한 두 가지 모델을 찾는 것을 목표로 한다. 첫 번째 모델은 Cifar-10 데이터 세트에 대한 것이다. 이러한 모 델을 사용하여 제안된 아키텍처의 효율성을 입증할 수 있다. 먼저 MNIST 데이터 세트의 경우 MNIST에 대한 첫번째 모델 최적화에서 목표 정확도를 98.4% 이상으로 설정할 때 하드웨어 구현 측면에서 BNN 모델을 단순화할 수 있다. 이 모델을 MD1이라고 정의한다. 반면에 하드웨어 구현에서 합리적인 정확도로 매우 효율적인 BNN 모델 을 찾기 위해 다양한 구성의 많은 BNN 모델을 탐색한 결과, 정확도가 97.7%인 효율적인 두 번째 모델을 찾을 수 있었다. 이 두 번째 모델을 MD2라고 정의한다. 아키텍처 검색을 수행한 결과, 두 개의 각각의 정확도 임계값 98.4% 및 97.7%를 위한 2개의 최적 모델을 찾을 수 있었다. 98.4%를 위한 모델의 경우 표 6에 따르면 3개의 컨볼루션 레이어가 있는 모델이 레이어 수가 가장 적기 때문에 동일한 정확도를 가진 다른 모델에 비해 추론 지연 시간이 가장 짧은 것을 알 수 있다. 또한 이 3 개의 레이어 모델은 하드웨어 리소스 측면에서 최상의 결과를 나타내는 것을 알 수 있다. 따라서 이 모델을 MD1 모델로 선택할 수 있다. 마찬가지로 필요한 하드웨어 자원과 해당 정확도를 고려하여 유사한 정확도를 가진 많은 후보들 중에서 MD2 모"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 22, "content": "델을 찾을 수 있다. 요약하면 두 모델 모두 3개의 컨볼루션 레이어와 1개의 완전 연결 레이어를 가지고 있다. MD1 모델은 첫 번째 컨볼루션 레이어에 대해 26개의 채널, 두 번째 레이어에 대해 24개의 채널, 마지막 컨볼루 션 레이어에 대해 31개의 채널을 포함한다. MD2 모델은 첫 번째 컨볼루션 레이어를 위한 17개의 채널, 두 번째 레이어를 위한 15개의 채널, 마지막 컨볼루션 레이어를 위한 22개의 채널을 가지고 있다. 두 모델의 각 컨볼루 션 레이어 뒤에는 배치 정규화 함수가 적용되고, 마지막 두 개의 컨볼루션 레이어에 최대 풀링이 적용될 수 있 다. 마지막으로 전술한 바와 같이 두 모델 모두 첫 번째 합성곱에 16비트 고정 소수점 입력 픽셀과 이진 가중치를 사용한다. 가중치와 입력 피처 맵은 두 번째 레이어에서 이진화 된다. 두 번째로, Cifar-10의 경우 80.2%의 정 확도를 가진 모델을 찾을 수 있었다. 여기서 6개의 컨볼루션 레이어(사이즈 64, 사이즈 96, 사이즈 96, 사이즈 128, 사이즈 192)와 끝에 2개의 완전 연결 레이어(사이즈 256, 사이즈 10)가 배치될 수 있다. 각 레이어 뒤에 배치 정규화 연산을 연결시키고 두 번째 컨볼루션 레이어부터 마지막 컨볼루션 레이어까지 배치 정규화 연산을 수행한 후에 최대 풀링 레이어를 추가할 수 있다. 표 6 Layer Output channels 5 Layers 4 Layers 3 Layers 1 19 24 26 2 20 22 24 3 20 23 31 4 20 22 5 19 LUTs 19,954 21737 19211 Flip-flops 10026 9830 9104 위 표 6은 최적 모델들 간에 하드웨어 자원 사용을 비교한 것이다. IV-2. 자동화된 하드웨어 구현 및 검증 과정 각 모델에 대한 하드웨어 가속기(즉, NPU)를 설계하는 것은 시간과 노력이 많이 들고 오류가 발생하기 쉬운 문 제점이 있다. 도 21은 특별 모듈과 파라미터 추출에 기초하여 하드웨어의 자동화된 구현 과정을 나타낸 예시적인 흐름도이다. 본 개시는 BNN 모델에 대한 사용자 제약 조건을 기반으로 RTL(Register Transfer Level)에서 하드웨어 아키텍처 생성을 자동화하는 하드웨어 구현 프레임워크를 제안한다. 사용자 지정 제약 조건에 따라 RTL 디자인을 자동으 로 생성할 수 있도록 하기 위하여, 스크립트가 이용될 수 있다. 모든 파라미터는 2개 세트(모듈 파라미터의 세트와 일반 파라미터의 세트)로 구분되며, 제안된 하드웨어 아키텍 처에는 배치 정규화, CLB, 곱셈 및 pop-count 명령, PLB, 풀링 같은 일반적인 기능에 특화된 하드웨어 모듈이 포함될 수 있다. RTL 디자인을 생성하기 위해, 일반 파라미터 세트를 사용하여 일반 구조(개략적인 구조)를 스크립트에 기초하여 먼저 정의할 수 있다. 여기서 디자인은 특정 모듈의 개수와 위치에 따라 결정될 수 있다. 다음으로, 모듈 파라미터 세트는 아키텍처의 특정 위치에서 각 일반 모듈의 모든 입력 모듈 파라미터를 설정하 는 데 사용될 수 있다. 마지막으로 설정된 모든 하드웨어 모듈을 스크립트를 통해 연결하여 전체 RTL 디자인을 자동으로 생성할 수 있 다. 도 21에서는 각 모듈의 모든 매개변수를 설명하고 일반 파라미터 세트를 나타낸다. 도 22는 하드웨어 구현의 검증 과정을 나타낸 예시적인 흐름도이다. 도 22를 참고하여 알 수 있는 바와 같이, 소프트웨어 구현에서 BNN 모델과 구현된 하드웨어 가속기가 서로 동등 하다는 것을 검증하기 위해, 제안된 아키텍처를 다양한 레이어, 채널 및 정확도를 갖는 다양한 BNN 모델에 대해 검증하였다. 첫째, C/C++ 모델은 PyTorch 모델의 파라미터와 모델 구조를 기반으로 생성된다(S2201). 그리고 파이썬 모델의 각 레이어는 C/C++ 함수로 생성된다(S2203). 각 레이어의 출력은 C/C++ 모델과 PyTorch 모델 간에 비교될 수 있 다. C/C++ 모델을 만든 후 서로 다른 채널, 레이어 수에 해당하는 일련의 C/C++ 모델을 준비하였다. 두번째로, 자동 스크립트로 각 하드웨어 가속기를 구현한다(S2205). 그런 다음 Synopsys의 VCS 시뮬레이션 도구 를 사용하여 해당 C/C++ 모델과 결과를 비교하여 각 데이터 경로의 파형을 정밀하게 검증한다. 마지막으로, 구현된 가속기는 FPGA로 이식되고(S2207), C/C++ 모델을 사용하여 하드웨어 가속기의 작동을 확인 한다. VCS 시뮬레이션 결과는 Xilinx FPGA가 제공하는 Integrated Logic Analyzer(ILA)를 통해 데이터 경로에 서 비트별로 검증되었다. 이 자동화된 프로세스를 사용하여 학습 후, 업데이트된 소프트웨어 모델에 해당하는 하드웨어 가속기를 즉시 구 현할 수 있다. 결과적으로 하드웨어 설계 단계에서 대상 응용 프로그램에 대한 검증 단계까지 수작업이 제거될 수 있다. IV-3. 하드웨어 구현 실험 모든 모델 기능을 평가하기 위해, 제안된 하드웨어 아키텍처, 입력 BNN 모델 구조 및 사용자 지정 설계 파라미 터를 기반으로, RTL 사양서를 자동화된 스크립트를 사용하여 생성한다. 하드웨어 장치와 관련하여 제안된 아키 텍처는 Ultrascale+ MPSoC를 포함하는 Xilinx의 Ultra96 평가 보드에서 구현되었다. 특히, 쿼드코어 Arm Cortex-A53 Application processing unit(APU)와 듀얼코어 Arm Cortex-R5 실시간 처리 장치를 프로세스 서브시 스템(PS)에 장착하였다. programable logic(PL) 부품은 141,120개의 플립-플롭, 70,560개의 룩업 테이블(LUT), 360개의 DSP 슬라이스 및 7.6 Mbits 블록 램으로 구성된다. 앞서 설명한 바와 같이, Synopsys VCS를 사용하여 생성된 RTL 디자인에 대한 시뮬레이션을 수행한 다음, 그 이 미지 분류 결과를 입력 BNN 모델에 대한 bit-true C++ 모델의 출력과 비교하였다. 다음 단계에서는 Vivado 2018.3을 사용하여 제안된 디자인을 합성하고 구현하였다. LUT 개수, 플립-플롭 개수, 예상 전력 소비를 설명하 는 모든 실험 결과는 Vivado의 보고서에서 수집되었다. 특히, BNN 코어의 전력 효율을 추정하기 위해 FPGA 로직 게이트로 구성된 칩의 PL 부분에서만 전력 소비를 수집하였다. 소프트웨어 기반 모델과 구현된 하드웨어 가속기를 비트 별로 비교하였다. 특히, FPGA 비트스트림의 기능은 데 이터 세트의 10,000개 이미지에 대해 완전히 검증되었다. PS 측에서 ARM 프로세서에서 실행되는 호스트 C 코드 에는 두 가지 작업을 포함한다. 첫째, Direct Memory Access(DMA)를 설정 및 실행하여 테스트 이미지를 프레임 단위로 DRAM에서 하드웨어 가속기로 전송하고 분류 결과를 하드웨어 가속기에서 DRAM으로 다시 전송한다. 그런 다음 마지막 결과가 도착한 후 수신된 모든 분류 결과를 C/C++ 모델의 미리 알려진 출력과 비교한다. 도 23은 BNN을 위한 시스템 아키텍처의 예시를 나타낸 예시도이다. 도 23에는 Programmable Logic(PL)와 Processing System(PS)가 나타나 있다. 상기 PL은 BNN 전용 가속기(즉, BNN 전용 NPU)와 DMA을 포함한다. 상기 PS는 ARM 프로세서와 DDR 컨트롤러를 포함한다. 상기 PS는 DMA를 통해 BNN 전용 가속기(즉, BNN 전용 NPU)에 연결될 수 있다. 상기 DDR 컨트롤러는 AXI-4 버스를 통하여 DMA과 통신하는 반면, 상기 ARM 프로세서는 AXI-Lite 버스를 통하여 DMA와 통신할 수 있다. IV-4. 실험 평가 제안된 아키텍처의 효율성을 추정하기 위해 다양한 파라미터 세트 및 목표에 해당하는 일련의 실험들을 수행했 다. 특히 클럭 속도, 루프2의 해제 수준, MAC 최적화 방법, MAC 압축 방법 및 분류 정확도의 5가지 요소를 조사 했다. 도 24는 루프 2의 해제와 상황에서 전력 효율성과 주파수 영향을 나타낸 예시적인 그래프이다. 먼저 100, 150, 200, 250 및 300Mhz의 다른 주파수 값으로 MD1 모델을 합성했다. 결과를 확인하면 하드웨어 리 소스가 작동 주파수에 완전히 영향을 받지 않는다는 것을 알 수 있다. 이와 대조적으로 프레임 속도(또는 초당 프레임)는 하드웨어 구현의 전력 소비를 증가시킨다. 구체적으로 도 24에 따르면 모든 루프-2 언롤링 레벨에 대 해 클럭 주파수와 함께 FPS/W 비율이 꾸준히 증가한다는 것을 주목할 필요가 있다. 이는 제안된 아키텍처의 경 우 소비 전력 증가보다 이미지 분류 속도가 더 빠르게 증가하여 더 높은 주파수에서 더 나은 전력 효율을 가져 온다는 것을 나타낸다. 표 7"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 23, "content": "위 표는 루프의 해제에 의한 영향, 정확도 그리고 가중치 재사용 방안을 하드웨어 인덱스 별로 나타낸 것이다. 주파수는 300 Mhz이다. 두 번째로, 루프 2 해제 펙터(factor)의 영향을 연구하기 위해 N: 1, 2, 4의 다른 값을 가진 동일한 MD1도 합성 했다. N배 증가하면 전체 시스템 처리량도 N배 증가한다. N = 1의 경우 가속기의 프레임 속도는 3.83 Х 105이 고, N = 2 및 N = 4의 경우 프레임 속도는 각각 7.65 Х 105 및 1.53 Х 106으로 증가한다. 한편, 표 7의 결과 에 따르면 N > 1인 경우 하드웨어 자원과 소비 전력은 N = 1에 비해 N배보다 훨씬 적게 증가한다. 일반적으로 가중치 재사용 없이 MD1 그리고 N = 1에 사용되는 LUT(Look-up Tables)의 개수는 19,211개 인 반면, N = 2에 사용되는 개수는 28,534(1.48x)이고, N = 4에 사용되는 개수는 54,595(2.8x)이다. 플리-플롭(FF) 사용은 N = 1 과 비교할 때 인상적인 숫자를 제공한다. N = 2의 경우 12,910(1.42x)이고, N = 4의 경우 23,080(2.53x)입니다. MD2에서도 가중치 재사용 여부와 상관없이 비슷한 결과를 얻을 수 있었다. 전력 평가를 위해, 도 24는 가중치 재사용이 활성화된 MD1 모델에 대해 N 값을 증가시킬 때 효율성 향상을 나타 낸다. 도시된 그래프에 따르면 N을 1에서 4로 증가시키면, FPS/W 비율이 2배 커진다. 게다가 도시된 그래프는 병렬 처리 수준이 높을수록 주파수를 변경하지 않고도 전력 효율이 항상 훨씬 더 좋다는 것을 나타낸다. 따라서 제안하는 아키텍처는 주파수와 병렬 레벨을 최대화하여 최고의 효율을 얻을 수 있다. 다음으로 MAC 최적화 방법 적용의 영향을 확인하기 위하여, 가중치 재사용을 활성화하거나 혹은 활성화하지 않 은 MD1 및 MD2 모델을 모두 합성하고 300Mhz에서 실험하였다. 표 7의 결과는 중복 계산을 제거하기 위해 커널 가중치를 재사용할 때 하드웨어 리소스와 전력 소비가 크게 감소함을 보여준다. 일반적으로 MAC 최적화 방법이 활성화된 경우 LUT의 개수는 MAC 최적화가 없는 설계와 비교하여 53%에서 56% 범위인 반면, FF의 개수는 약 30% 에서 35%로 감소하고 전력 소비도 모델 크기 및 루프 해제 수준에 따라 개략적으로 약 35% 내지 48% 정도로 감 소된다. 반면에 수평 방향(동일 모델, 다른 윈도우의 개수) 및 수직 방향(N 값은 같고 모델 크기가 다름)으로 결과를 분석하면 (i) 하드웨어 리소스 및 전력 소비 개선은 채널이 더 많은 모델에서 더 높은 경향이 있으며 (ii) 페럴렐리즘 수준을 높일 때 동일한 경향을 보인다. MD1과 MD2 사이의 상관관계 측면에서, MD2에서 사용되는 LUT의 양은 다른 N 값에 대해 MD1에서 필요한 것보다 1.7배 내지 1.9배 적으며, FF 사용량과 전력 소비도 1.3~1.5배 및 1.4~1.9배 감소된다. 분류 정확도는 0.7%의 정도로만 작게 감소된다. 최적의 솔루션을 찾기 위해서는, 적절하게 효율적인 하드웨어 구현을 생성하는 정확도수준을 정의할 수 있다. 모든 조사 후에 특정 정확도를 가진 모델의 경우 제안된 아키텍처가 가장 높은 주파수 및 페럴렐리즘 수준에서 실행되어 가장 효과적으로 활용될 수 있다는 결론을 내릴 수 있었다. IV-5. 기존과의 비교 본 절에서는, 제안된 아키텍처의 가장 바람직한 결과를 MNIST 및 Cifar-10 데이터 세트를 모두 사용하여 기존과 비교 설명한다. MNIST 데이터 세트의 경우, MAC 최적화 방법, pop-count 압축 또는 pop-count 압축 없이 구현된 두 가지 모델 MD1 및 MD2를 선택하여 기존과 대비하여 표 8에 나타내었다. 결과에 따르면 300Mhz에서 pop-count 압축 방법은 더 적은 수의 LUT 및 FF로 설계를 더 작게 만들 수 있음을 확인할 수 있다. 그러나 전력 소비는 pop-count 압축 없이 구현된 모델에 비해 더 많이 사용하는 것으로 확인되었다. Pop-count 압축을 사용할 때와 사용하지 않을 때의 에너지 차이는 주파수가 낮거나 큰 모델에서 감소한다. 표 8"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 24, "content": "위 표에서는 MNIST 데이터 세트를 사용했을 때 제안된 아키텍처의 성능을 기존과 대비하여 나타내었다. MNIST 데이터 세트와 바이너리 가중치를 사용하여 경쟁력 있는 성능을 제공하는 5가지 아키텍처를 선택하였다. 선택된 첫번째는 FINN 로서, 이는 BNN 모델들을 하드웨어로 구현한 것이다. FINN은 3개의 완전히 연결된 레이어 를 포함하고, 28x28 바이너리 이미지를 입력으로 사용하는 MLP 모델을 구현한다. FINN은 MNIST 데이터 세트에서 가장 빠른 이미지 분류 속도(1,561k fps)를 보인다. 선택된 두 번째는, 레퍼런스인 FINN-R로서 MLP 모델의 일종 이다. 이 모델은 정확도가 낮지만 하드웨어 리소스를 훨씬 적게 사용한다. BNN-PYNQ는 GitHub에 게시된 Xilinx 의 오픈 소스 프로젝트 중에서 FINN의 최신 버전이다. 비교를 위하여, 언급한 하드웨어를 이용하여 재현하기 위 하여 프로젝트를 다운로드하고 합성했다. 이 모델은 FINN과 동일한 정확도를 갖지만 아키텍처는 4개의 완전히 연결된 레이어를 포함한다. 또한 FINN에 비해 이 모델은 훨씬 적은 리소스를 사용하지만 훨씬 낮은 성능을 제공 한다(FPS = 356.6k fps). FP-BNN 모델은 MNIST 데이터 세트를 분류하기 위해 4개의 완전히 연결된 레이어도 사 용한다. FP-BNN 모델은 Altera Intel의 Stratix V를 사용하고 Pop-count 연산을 최적화하기 위해 압축 트리를 사용한다. 선택된 마지막은 Re-BNet으로서 FINN의 개선된 버전이다. 이 모델은 98.29%의 정확도를 유지할 때 효 율성을 보여주며 원래 FINN보다 훨씬 작은 25,600 LUT와 같은 하드웨어 리소스만을 필요로 한다. 표 8은 모든 참조와 본 개시에서 제시된 2개 모델의 전체 구성 및 하드웨어 구현 결과를 나타낸다. 제안된 아키 텍처를 기반으로 한 하드웨어 구현은 하드웨어 활용에 관한 다른 모든 작업에 비해 최소한의 영역을 제공합니다. Xilinx의 가장 가벼운 아키텍처를 포함하는 BNN-PYNQ와 비교하면, 본 개시에서 제시되는 모델, 즉 2개의 윈도우를 갖는 MD1모델은 1.84배 더 적은 LUT를 소비하고 또한 3.77배 더 적은 FF를 소비하는 반면, 2.14 배 높은 프레임 속도를 가질 수 있고, 소비 전력은 1.36배 낮다. 4개의 윈도우 생성의 경우에도 본 개시에서 제 시되는 모델 MD1은 BNN-PYNQ보다 적은 리소스를 사용했으며 LUT 수는 조금 더 많고 FF는 2.1배 적었지만 동일한 정확도를 유지하면서 여전히 4.3배 더 높은 프레임 속도를 보였다. 원래의 FINN과 비교할 때 4개의 윈도우를 갖는 MD1은 3배 더 적은 LUT를 사용하면서, 98%의 프레임 속도를 내었 다. 반면에 더 작은 모델 MD2는 FINN-R 처럼 적당한 정확도를 제공할 수 있지만, 동일한 클럭 속도로 작동할 때 에는 2.4배 더 적은 LUT를 사용하고 1.8배 더 높은 프레임 속도를 내었다. 다른 모든 아키텍처와 달리 MD1과 MD2는 모두 온칩 메모리 장치와 DSP 슬라이스의 사용을 완전히 제거하여 상당한 전력 소비를 개선할 수 있었다. 앞서 설명한 바와 같이, 본 명세에서 제시되는 아키텍처의 전력 효율성은 클럭 속도와 루프 해제 레벨을 모두 높일 때, 최대화될 수 있다. 300MHz 및 N = 4에서 4개의 윈도우를 사용하는 MD1 및 MD2는 BNN-PYNQ에 비해 각각 3.8배 및 6.1배 더 높은 FPS/W를 제공할 수 있다. 표 8에 모두 열거하지는 않았지만, 프레임 속도에 대해 하드 웨어 리소스만큼 높은 우선 순위가 지정되지 않은 경우, 두 모델 모두 낮은 값 N으로 구성할 수 있다. 표 9"}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 25, "content": "Cifar-10Freq. (Mhz)LUTsAcc. (%)kfpsArea eff. (fps/lut s) Ours (X=1)210290,01280.22050.707 Ours (X=1)177281,56080.21730.614 Ours (X=2)150232,29880.21460.630 Ours (X=4) 75156,38480.2730.468 FINN 20046,25380.1130.280 FINN 125365,96380.11250.340 FINN-R 237332,63780.11020.306 FINN-R 30041,73380.119.50.467 FBNA -26,90088.610.50.02 ReBNet 20053,20080.5960.11 FINN-PYNQ30025,43180.11.90.074 위 표는 본 개시에서 제시되는 아키텍처의 효율성을 종래에 대비하여 나타낸 것이다. Cifar-10 데이터 세트에 대해서, 본 절에서는 X 값이 서로 다른 4가지 아키텍처를 제시한다. X = 1일 때 제안된 아키텍처는 210Mhz 및 177Mhz에서 구현될 수 있다. 결과를 바탕으로 최대 주파수로 아키텍처를 디자인하면, 면 적 효율성이 증가한다는 결론을 내릴 수 있었다. X = 2일 때 MAC 동작에 사용되는 주파수는 300Mhz이고 나머지 는 150Mhz로 동작한다. 이때, X = 1인 경우에 비해 LUT의 수는 18%에서 20%로 감소될 수 있었다. X = 4에서 MAC 동작은 300Mhz에서 계속 실행되고 나머지는 75Mhz로 동작된다. 하드웨어 오버헤드는 X = 2 및 X = 1에 비해 각각 32% 및 46% 감소되었다. 면적 효율성을 평가하기 위해 표 9와 같이 FPS/LUTs 비율을 사용하여 제안된 디자 인을 종래와 비교했다. 제안된 디자인은 이전의 모든 설계에 비해 더 나은 면적 효율성을 제공할 수 있었다. 특 히 X = 1(0.707)일 때 제안된 설계의 면적 효율은 이전 최고의 설계(0.467)보다 1.5배 더 높다는 것을 알 수 있 다. 성능과 관련하여 제안된 설계는 초당 205,000프레임의 초고속 프레임 속도를 제공할 수 있었다."}
{"patent_id": "10-2022-0132254", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 26, "content": "요약하면, 표 8 및 표 9의 결과를 기반으로 MNIST 및 Cifar-10 데이터 세트에 대해, 본 개시에서 제안한 디자인 은 이전 작업보다 훨씬 높은 전력 및 면적 효율성을 제공할 수 있음을 것을 알 수 있다. 주된 이유는 스트리밍 및 바이너리 아키텍처의 기능을 기반으로 몇 가지 새로운 최적화 방법을 성공적으로 적용했기 때문이다. 특히, 표 8과 표 9에서 비교한 종래의 디자인들과 달리 모든 XNOR 논리 게이트를 제거하거나 NOT 게이트(XNOR보다 작 음)로 대체했기 때문이다. 결과적으로 가중치 커널 값을 저장하는 메모리도 제거될 수 있다. 따라서 본 개시에서 제안된 디자인에서 내부 메모리는 표 8과 같이 0인 반면, 기존 디자인에서는 일정량의 메모 리(Block RAM, BRAM)가 필요하다. 또한, 본 개시에서 제안되는 디자인은 추가적인 자원 없이 MAC 최적화 방법을 직접 구현한다. 또한 제안된 디자인에서 라인 버퍼는 모든 출력 피처 맵을 저장하지 않고, 다음 레이어에 제공 하는데 필요한 데이터만 저장하므로, 하드웨어 리소스를 이전 디자인보다 훨씬 적게 사용한다. 또한, 파이프라 인 언롤링 방식은 다양한 병렬 레벨을 지원하는 라인 버퍼로 최대 풀링 레이어의 활용도를 극대화하여 최고의 전력 및 자원 효율성을 이끌어낸다. 보다 구체적으로, 처리량은 N배 증가할 수 있지만 필요한 하드웨어 오버헤 드는 N배보다 훨씬 낮다. 마지막으로 언급한 MAC 압축 기술은 제안된 디자인에서 성능에 영향을 미치지 않으면 서 상당한 양의 하드웨어 자원을 줄이는 데 도움을 준다. V. 소결 작은 크기의 파라미터와 저비용 연산을 갖춘 BNN은 사물 인터넷(IoT) 또는 에지 애플리케이션에 구현하기에 적 합하다. 본 개시에서 제시된 스트리밍 아키텍처는 하드웨어 및 알고리즘 관점에서 다양한 최적화 기술을 채용하 였다. 스트리밍 아키텍처와 해제(unrolling) 메커니즘은 높은 처리 처리량을 가능하게 하는 반면 BRAM(Block RAM)이 없는 아키텍처와 가중치 재사용 방식은 최종 라우팅 구현에서 하드웨어 리소스와 전력 소비를 크게 줄일 수 있는 이점이 있다. 또한 처리량을 최대화하고 전력 소비를 최소화한다는 목표를 달성하기 위해, 사용자가 정 의한 BNN 구조를 기반으로 임의의 BNN 모델을 FPGA에 구현하는 자동화된 설계 생성 흐름을 본 개시는 제시한다. 본 개시에서 제시된 BNN을 위한 아키텍처는 추론 정확도를 희생하지 않으면서 처리량과 전력 효율성 측면에서 최고의 성능을 제공한다. 본 개시에서 제시된 디자인은 면적이 작고 지연 시간이 짧기 때문에 낮은 전력 소비와 실시간 응답이 핵심인 IoT 또는 에지 애플리케이션에 가장 적합한 후보 중 하나라고 할 수 있다. 도 25는 본 개시의 일 예시에 따른 예시적인 아키텍처를 나타낸 예시도이다. 도 25를 참고하여 알 수 있는 바와 같이, 예시적인 아키텍처은 BNN 전용 가속기(즉, BNN 전용 NPU) 와 메인 메모리(예컨대 DDR 메모리)와 그리고 하나 이상의 Direct Memory Access(DMA)(300a 및/또는 300b)를 포함할 수 있다. 상기 BNN 전용 가속기(즉, BNN 전용 NPU)는 제1 레이어를 위한 제1 블록, 제2 레이어를 위한 제2 블 록, 제3 레이어를 위한 제3 블록 그리고 내부 메모리(즉, on-chip 메모리)를 포함할 수 있다. 도 25에는 도시되지 않았으나, 상기 BNN 전용 가속기(즉, BNN 전용 NPU)는 도 5에 도시된 바와 같이 i번째 레이어를 위한 제3 블록 그리고 n번째 레이어를 위한 제4 블록을 더 포함할 수 있다. 이와 같이, 본 개시의 일 예시에 따른 BNN 전용 가속기(즉, BNN 전용 NPU)는 레이어 별 전용의 블록을 포함할 수 있다. 상기 내부 메모리(즉, on-chip 메모리)는 제1 레이어를 위한 제1 입력 피처 맵(도 25에는 L1_INFMAP으로 도시됨)과 제1 레이어를 위한 제1 파라미터(즉, 제1 가중치로서 도 25에는 L1_weight로 도시됨)를 포함할 수 있 다. 또한, 상기 내부 메모리(즉, on-chip 메모리)는 제2 레이어를 위한 제2 입력 피처 맵(도 25에는 L2_INFMAP으로 도시됨)과 제2 레이어를 위한 제2 파라미터(즉, 제2 가중치로서 도 25에는 L2_weight로 도시됨) 를 포함할 수 있다. 상기 제1 파라미터 및 상기 제2 파라미터는 이진화 된 값일 수 있다. 상기 제1 블록, 제2 블록 그리고 제3 블록은 각기 하나 또는 복수의 프로세싱 엔진을 포함할 수 있다. 상기 하나 또는 복수의 프로세싱 엔진들은 스트리밍 형태, 즉 파이프라인 형태로 연결될 수 있다. 구체적 으로, 상기 하나 또는 복수의 프로세싱 엔진들은 컴파일 된 BNN 구조에 기초하여 파이프라인 구조로 서로 연결 될 수 있다. 각 블록 내의 하나 또는 복수의 프로세싱 엔진은 상기 내부 메모리(즉, on-chip 메모리)로부터 입력 피처 맵과 파라미터를 가져와서 필요한 연산을 수행할 수 있다. 이를 위해서, 각 블록 내의 하나 또는 복수의 프로세 싱 엔진은 상기 입력 피처 맵과 상기 파라미터를 잠시 저장할 수 있는 라인 버퍼를 포함할 수 있다. 상기 라인 버퍼는 전술한 바와 같이 제1 타입의 라인 버퍼(즉, CLB)이거나, 제2 타입의 라인 버퍼(즉, PLB)일 수 있다. 각 라인 버퍼의 크기는 대응되는 이진화 된 피처 맵과 대응되는 이진화 된 가중치의 크기에 기초하여 설정될 수 있 다. 상기 하나 또는 복수의 프로세싱 엔진은 XNOR 논리 게이트 또는 NOT 논리 게이트, pop-count 연산을 위한 회로, 배치 정규화를 위한 회로, 이진화를 위한 회로, 풀링을 위한 회로를 포함할 수 있다. 상기 pop-count 연산을 위 한 회로는 압축기(예컨대, 6:3 압축 또는 3: 2 압축기)를 더 포함할 수 있다. 한편, 상기 pop-count 연산은 전술한 바와 같이 재사용될 수 있다. 상기 배치 정규화를 위한 회로는 도 6에 도시된 바와 같이, 임계값에 기반하여 배치 정규화를 수행할 수 있다. 상기 배치 정규화를 위한 회로는 이진화 된 값에 기초하여 NOT 논리 게이트 또는 XNOR 게이트를 선택할 수 있다. 본 개시와 도면에 게시된 본 개시의 예시들은 본 개시의 기술내용을 쉽게 설명하고 본 개시의 이해를 돕기 위해 특정 예를 제시한 것뿐이며, 본 명의 범위를 한정하고자 하는 것은 아니다. 여기에 게시된 예시들 이외에도 발 명의 기술적 사상에 바탕을 둔 다른 변형 예들이 실시 가능하다는 것은 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자에게 자명한 것이다.도면 도면1 도면2a 도면2b 도면3 도면4a 도면4b 도면4c 도면5 도면6 도면7 도면8 도면9 도면10 도면11a 도면11b 도면12 도면13 도면14a 도면14b 도면15 도면16 도면17 도면18 도면19a 도면19b 도면20 도면21 도면22 도면23 도면24 도면25"}
{"patent_id": "10-2022-0132254", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 예시적인 인공신경망모델을 설명하는 개략적인 개념도이다. 도 2a은 컨볼루션 신경망(CNN)의 기본 구조를 설명하기 위한 도면이다. 도 2b는 컨볼루션 신경망의 동작을 이해하기 쉽게 나타낸 종합도이다. 도 3은 컨볼루션 레이어에서 XNOR 연산과 누적 연산을 수행하기 위한 구조를 나타낸 예시도이다. 도 4a 내지 도 4c는 파이프라인(pipeline) 아키텍처에서 배치 정규화, 이진화(binarizing) 그리고 최대 풀링 (max pooling)을 조합하는 예시들을 나타낸다. 도 5는 본 개시에서 제안되는 BNN 스트리밍 아키텍처의 개념을 나타낸 예시도이다. 도 6은 도 5에 도시된 제2 블록와 제3 레이어의 연결 관계를 나타낸 예시도이다. 도 7은 C 윈도우(M x M)과 (K x C x M x M) 필터들 간에 일반적인 합성곱의 예시를 나타낸 예시도이다. 도 8은 제1 타입의 라인 버퍼(즉, CLB) 상에 2개의 윈도우를 갖는 출력의 예시를 나타낸 예시도이다. 도 9는 출력을 생성할 준비가 되었을 시점에 이미지 프레임 상에서 윈도우의 위치 및 제1 타입의 라인 버퍼(즉, CLB)를 나타내는 예시도이다. 도 10은 수행이 완료되었을 시점에 이미지 프레임 상에서 윈도우의 위치 및 제1 타입의 라인 버퍼(즉, CLB)를 나타내는 예시도이다. 도 11a는 제2 타입의 라인 버퍼(즉, PLB)를 예시적으로 나타낸 예시도이고, 도 11b는 제2 타입의 라인 버퍼(즉, PLB)의 출력을 나타낸 예시도이다. 도 12는 XNOR 게이트, 가산기 트리 그리고 배치 정규화의 파이프라인을 나타낸 예시도이다. 도 13은 합성곱 연산에서 전체 6개의 루프를 코드로 나타낸 예시도이다. 도 14a 및 도 14b는 2개의 기법, 즉 해밀토니안(Hamiltonian) 최단 경로 기법과 K-means 클러스터 기법을 사용 할 때, 서로 다른 메커니즘들을 나타낸 예시도들이다.도 15는 6:3 가산기의 Pop-count 압축을 나타낸 그래프이다. 도 16은 3: 2 가산기의 Pop-count 압축을 나타낸 그래프이다. 도 17은 Cifar-10 데이터 세트를 사용하는 경우 본 개시에서 제안되는 BNN 아키텍처의 전략 사용량을 백분율로 나타낸 그래프이다. 도 18은 Cifar-10 데이터 세트를 사용하는 경우에, 본 개시에서 제안되는 BNN 아키텍처의 영역을 배분율로 나타 낸 그래프이다. 도 19a는 pop-count 명령의 재사용이 없을 경우 MAC 연산 과정을 나타내고, 도 19b는 pop-count 명령을 재사용 할 경우 MAC 연산 과정을 나타낸다. 도 20은 본 개시에서 제안되는 아키텍처의 처리 시간을 나타낸 예시도이다. 도 21은 특별 모듈과 파라미터 추출에 기초하여 하드웨어의 자동화된 구현 과정을 나타낸 예시적인 흐름도이다. 도 22는 하드웨어 구현의 검증 과정을 나타낸 예시적인 흐름도이다. 도 23은 BNN을 위한 시스템 아키텍처의 예시를 나타낸 예시도이다. 도 24는 루프 2의 해제와 상황에서 전력 효율성과 주파수 영향을 나타낸 예시적인 그래프이다. 도 25는 본 개시의 일 예시에 따른 예시적인 아키텍처를 나타낸 예시도이다."}
