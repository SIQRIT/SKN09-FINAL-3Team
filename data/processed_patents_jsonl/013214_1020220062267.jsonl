{"patent_id": "10-2022-0062267", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0162413", "출원번호": "10-2022-0062267", "발명의 명칭": "스토리지 장치를 검사하는 디버그 장치, 디버그 시스템 및 디버그 방법", "출원인": "에스케이하이닉스 주식회사", "발명자": "박진"}}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "스토리지 장치의 디버그 인터페이스에 연결된 통신부; 및명령어의 동작 시간을 측정하기 위한 요청이 수신되면, 인터럽트 동작을 수행하도록 제어하는 인터럽트 신호를상기 통신부를 통해 상기 스토리지 장치로 출력하는 인터럽트 신호 발생부;상기 통신부를 통해, 상기 인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카운트들을 획득하고,상기 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카운트들을 획득하는 틱 카운트 검출부; 및상기 제1 틱 카운트들 및 상기 제2 틱 카운트들을 이용하여, 상기 동작 시간을 결정하는 캘리브레이터;를 포함하는 디버그 장치."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 인터럽트 동작은, 상기 스토리지 장치의 프로세서 코어가 상기 스토리지 장치의 레지스터에 틱 카운트를 저장하는 동작인 디버그장치."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 캘리브레이터는,상기 제2 틱 카운트들의 차이 값에서 상기 제1 틱 카운트들의 차이 값을 감산함으로써 감산 값을 획득하고, 상기 감산 값을 상기 통신부를 통해 수신된 상기 프로세서 코어의 스피드로 나눈 값을 상기 동작 시간으로 획득하는 디버그 장치."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 통신부는, 상기 스토리지 장치에 포함된 복수의 포트들 중에서, 호스트 장치와 연결되는 호스트 인터페이스와 다른 상기디버그 인터페이스에 연결되는 디버그 장치."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 통신부는,JTAG (Joint Test Action Group) 방식으로 상기 디버그 인터페이스와 통신하는 디버그 장치.공개특허 10-2023-0162413-3-청구항 6 메모리 장치, 상기 메모리 장치를 제어하는 컨트롤러, 및 디버그 인터페이스를 포함하는 스토리지 장치;명령어의 동작 시간을 측정하기 위한 요청이 수신되면, 인터럽트 동작을 수행하도록 제어하는 인터럽트 신호를상기 디버그 인터페이스를 통해 상기 컨트롤러로 출력하고, 상기 디버그 인터페이스를 통해 상기 인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카운트들을 획득하고, 상기 명령어의 시작 시점 및 완료 시점에대응되는 제2 틱 카운트들을 획득하고, 상기 제1 틱 카운트들 및 상기 제2 틱 카운트들을 출력하는 디버그장치; 및상기 요청을 상기 디버그 장치로 출력하고, 상기 요청에 대한 응답으로 상기 디버그 장치 로부터 수신된 상기제1 틱 카운트들 및 상기 제2 틱 카운트들을 이용하여, 상기 동작 시간을 결정하는 호스트 장치;를 포함하는 디버그 시스템."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제6항에 있어서,상기 컨트롤러는, 상기 인터럽트 동작 및 상기 명령어를 수행하는 프로세서 코어; 및 상기 프로세서 코어에 의해 상기 제1 틱 카운트들 및 상기 제2 틱 카운트들을 저장하는 레지스터;를 포함하고, 상기 인터럽트 동작은, 상기 프로세서 코어가 상기 레지스터에 틱 카운트를 저장하는 동작인 디버그 시스템."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 호스트 장치는,상기 제2 틱 카운트들의 차이 값에서 상기 제1 틱 카운트들의 차이 값을 감산함으로써 감산 값을 획득하고, 상기 감산 값을 상기 프로세서 코어의 스피드로 나눈 값을 상기 동작 시간으로 획득하는 디버그 시스템."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "명령어의 동작 시간을 측정하기 위한 요청이 수신되면, 인터럽트 동작을 수행하도록 제어하는 인터럽트 신호를스토리지 장치의 디버그 인터페이스를 통해 상기 스토리지 장치의 컨트롤러로 전송하는 단계;상기 디버그 인터페이스를 통해 상기 인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카운트들을획득하는 단계;상기 디버그 인터페이스를 통해 상기 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카운트들을 획득하는단계; 및상기 제1 틱 카운트들 및 상기 제2 틱 카운트들을 이용해 상기 동작 시간을 결정하는 단계;를 포함하는 디버그방법."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 인터럽트 신호에 응답하여, 상기 컨트롤러에 포함된 프로세서 코어가 수행 중인 동작을 모두 중단하는 단공개특허 10-2023-0162413-4-계; 상기 프로세서 코어가 상기 컨트롤러에 포함된 레지스터에 틱 카운트를 저장하는 상기 인터럽트 동작을 수행하는 단계; 및상기 인터럽트 동작이 완료된 이후, 상기 프로세서 코어가 상기 명령어를 수행하는 단계;를 더 포함하는 디버그방법."}
{"patent_id": "10-2022-0062267", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,상기 동작 시간을 결정하는 단계는,상기 제2 틱 카운트들의 차이 값에서 상기 제1 틱 카운트들의 차이 값을 감산함으로써 감산 값을 획득하는단계; 및 상기 감산 값을 상기 프로세서 코어의 스피드로 나눈 값을 상기 동작 시간으로 결정하는 단계;를 포함하는 디버그 방법."}
{"patent_id": "10-2022-0062267", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시에 따른 디버그 장치는 스토리지 장치의 디버그 인터페이스에 연결된 통신부, 명령어의 동작 시간을 측정 하기 위한 요청이 수신되면, 인터럽트 동작을 수행하도록 제어하는 인터럽트 신호를 통신부를 통해 스토리지 장 치로 출력하는 인터럽트 신호 발생부, 통신부를 통해, 인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카운트들을 획득하고, 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카운트들을 획득하는 틱 카운트 검출부 및 제1 틱 카운트들 및 제2 틱 카운트들을 이용하여, 동작 시간을 결정하는 캘리브레이터를 포함한다."}
{"patent_id": "10-2022-0062267", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 전자 장치에 관한 것으로, 보다 구체적으로는 스토리지 장치를 검사하는 디버그 장치, 디버그 시스템 및 디버그 방법에 관한 것이다."}
{"patent_id": "10-2022-0062267", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "디버그(debug) 장치(또는 디버거(debugger, 디버깅 도구(debugging tool))는 오류 검증, 성능 측정 등의 다양 한 목적으로 다른 전자 장치(또는 스토리지 장치)를 검사하고 분석하는 장치이다. 디버그 장치는 전자 장치로부터 획득된 틱 카운트를 통해 전자 장치의 동작 시간을 측정할 수 있다. 이를 위해, 개발자는 전자 장치의 다양한 환경을 고려해 전자 장치가 내부의 특정 영역(가령, 코어의 레지스터)에 틱 카운 트 값을 저장하도록 코드를 일일이 수정/삽입해야 하는 어려움이 있다. 또한, 전자 장치가 틱 카운트를 저장하 는데 소요한 시간이 레이턴시로 작용하게 되어 측정된 동작 시간이 정확하지 않다는 문제가 있다. 이에 따라, 보다 정확하고 편리하게 동작 시간을 측정하는 방안이 요구되고 있다."}
{"patent_id": "10-2022-0062267", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 스토리지 장치의 정확한 동작 시간을 측정하는 디버그 장치, 디버그 시스템 및 디버그 방법을 제공하 기 위함이다."}
{"patent_id": "10-2022-0062267", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 개시의 일 실시 예에 따른 디버그 장치는 스토리지 장치의 디버그 인터페이스에 연결된 통신부, 명령어의 동 작 시간을 측정하기 위한 요청이 수신되면, 인터럽트 동작을 수행하도록 제어하는 인터럽트 신호를 통신부를 통 해 스토리지 장치로 출력하는 인터럽트 신호 발생부, 통신부를 통해, 인터럽트 동작의 시작 시점 및 완료 시점 에 대응되는 제1 틱 카운트들을 획득하고, 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카운트들을 획 득하는 틱 카운트 검출부 및 제1 틱 카운트들 및 제2 틱 카운트들을 이용하여, 동작 시간을 결정하는 캘리브레 이터를 포함할 수 있다. 본 개시의 일 실시 예에 따른 디버그 시스템은 메모리 장치, 메모리 장치를 제어하는 컨트롤러, 및 디버그 인터 페이스를 포함하는 스토리지 장치, 명령어의 동작 시간을 측정하기 위한 요청이 수신되면, 인터럽트 동작을 수 행하도록 제어하는 인터럽트 신호를 디버그 인터페이스를 통해 컨트롤러로 출력하고, 디버그 인터페이스를 통해인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카운트들을 획득하고, 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카운트들을 획득하고, 제1 틱 카운트들 및 제2 틱 카운트들을 출력하는 디버그 장치, 및 요청을 디버그 장치로 출력하고, 요청에 대한 응답으로 디버그 장치 로부터 수신된 제1 틱 카운트들 및 제2 틱 카운트들을 이용하여, 동작 시간을 결정하는 호스트 장치를 포함할 수 있다. 본 개시의 일 실시 예에 따른 디버그 방법은 명령어의 동작 시간을 측정하기 위한 요청이 수신되면, 인터럽트 동작을 수행하도록 제어하는 인터럽트 신호를 스토리지 장치의 디버그 인터페이스를 통해 스토리지 장치의 컨트 롤러로 전송하는 단계, 디버그 인터페이스를 통해 인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카운트들을 획득하는 단계, 디버그 인터페이스를 통해 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카 운트들을 획득하는 단계, 및 제1 틱 카운트들 및 제2 틱 카운트들을 이용해 동작 시간을 결정하는 단계를 포함 할 수 있다."}
{"patent_id": "10-2022-0062267", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시에 따르면, 스토리지 장치의 정확한 동작 시간을 측정하는 디버그 장치, 디버그 시스템 및 디버그 방법 을 제공할 수 있다. 본 개시에 따르면, 스토리지 장치의 성능 및 컴파일러 옵션에 따른 개별적인 세팅 없이도 스토리지 장치의 정확 한 동작 시간을 측정할 수 있다."}
{"patent_id": "10-2022-0062267", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 명세서 또는 출원에 개시되어 있는 본 발명의 개념에 따른 실시 예들에 대해서 특정한 구조적 내지 기능적 설명들은 단지 본 발명의 개념에 따른 실시 예를 설명하기 위한 목적으로 예시된 것으로, 본 발명의 개념에 따 른 실시 예들은 다양한 형태로 실시될 수 있으며 본 명세서 또는 출원에 설명된 실시 예들에 한정되는 것으로 해석되어서는 아니 된다. 도 1은 본 개시의 일 실시 예에 따른 디버그 시스템을 설명하기 위한 도면이다. 도 1을 참조하면, 본 개시의 일 실시 예에 따른 디버그 시스템은 디버그 장치, 스토리지 장치 및 호스트 장치를 포함할 수 있다. 디버그 장치는 스토리지 장치에 대한 디버깅(debugging) 기능을 수행할 수 있다. 일 실시 예에서, 디 버그 장치는 스토리지 장치의 내부를 검사하거나, 스토리지 장치의 성능을 측정하거나, 또는 스 토리지 장치를 제어할 수 있다. 이를 위해, 디버그 장치는 스토리지 장치의 디버그 인터페이스 와 연결될 수 있다. 예를 들어, 디버그 장치는 디버그 인터페이스를 통해 스토리지 장치를 제어하기 위한 제어 신호를 전달할 수 있다. 디버그 장치는 디버그 인터페이스를 통해 스토리지 장치 의 정보를 가져올 수 있다. 스토리지 장치는 데이터를 저장할 수 있는 전자 장치이다. 예를 들어, 스토리지 장치는 SSD(Solid State Disk) 장치, SD(Secure Digital) 카드 장치, mini-SD 카드 장치, micro-SD 카드 장치, MMC(Multi Media Card) 장치, eMMC(embedded MMC) 장치, USB(universal serial bus) 스토리지 장치, UFS(universal flash storage) 장치 등으로 구현될 수 있다. 다만 이는 일 실시 예일 뿐이며, 본 개시의 스토리지 장치는 데스 크탑 컴퓨터, 랩탑 컴퓨터, 스마트폰 등으로 구현될 수 있다. 이와 같이, 스토리지 장치는 그 구현 형태에 제한되지 아니하고 다양한 전자 장치에 적용될 수 있다. 스토리지 장치는 컨트롤러, 메모리 장치, 디버그 인터페이스(230, Deburg I/F) 및 호스트 인터 페이스(240, Host I/F)를 포함할 수 있다. 컨트롤러는 스토리지 장치의 전반적인 동작을 제어할 수 있다. 예를 들어, 컨트롤러는 데이터를 저장하는 프로그램 동작, 저장된 데이터를 요청하는 리드 동작 또는 저장된 데이터를 삭제하는 이레이즈 동작을 수행하도록 메모리 장치를 제어할 수 있다. 이를 위해, 컨트롤러는 CPU(Central Processing Unit), AP(Application Processor), 프로세서 등으로 구현될 수 있다. 메모리 장치는 데이터를 저장할 수 있다. 이를 위해, 메모리 장치는 다양한 종류의 반도체 메모리 장 치로 구현될 수 있다. 예를 들어, 메모리 장치는 낸드 플래시 메모리(NAND flash memory) 장치, 노아 플래 시 메모리(NOR flash memory) 장치, SRAM(Static Random Access Memory, Static RAM) 장치, DRAM(Dynamic RAM) 장치 등으로 구현될 수 있다. 디버그 인터페이스는 다양한 통신 규격에 따라 디버그 장치와 통신을 수행할 수 있다. 예를 들어, 디 버그 인터페이스는 JTAG(Joint Test Action Group), cJTAG(compact JTAG), SWD(Serial Wire Debug) 방식 등과 같은 다양한 통신 규격에 따라 디버그 장치와 통신을 수행할 수 있다. 호스트 인터페이스는 다양한 통신 규격에 따라 호스트 장치와 통신을 수행할 수 있다. 예를 들어, 호 스트 인터페이스는 PCI(peripheral component interconnection), PCI-E(PCI-express), ATA(Advanced Technology Attachment), Serial-ATA, Parallel-ATA, USB(Universal Serial Bus), SCSI(small computer small interface), ESDI(enhanced small disk interface), IDE(Integrated Drive Electronics), 파이어와이어 (Firewire), UFS(Universal Flash Storage), UART(Universal asynchronous receiver/transmitter), 썬더볼트 방식 등과 같은 다양한 통신 규격에 따라 통신을 수행할 수 있다. 한편, 스토리지 장치는 호스트 인터페이스를 통해 연결된 호스트 장치의 요청에 응답하여 동작 할 수 있다. 구체적으로, 스토리지 장치는 호스트 장치로부터 수신된 요청에 대응되는 동작을 수행할 수 있다. 예를 들어, 스토리지 장치는 호스트 장치로부터 데이터의 저장 요청이 수신되면, 스토리지 장치 내부에 데이터를 저장할 수 있다. 다른 예를 들어, 스토리지 장치는 호스트 장치로부터 데 이터의 리드 요청이 수신되면, 스토리지 장치 내부에 저장된 데이터를 호스트 장치로 제공할 수 있다. 호스트 장치는 데스크탑 컴퓨터, 랩탑 컴퓨터, 스마트폰, 게임기, TV(Television), 태블릿 컴퓨터, 게임기, 셋톱박스, 세탁기, 로봇, 냉장고, 인공지능 스피커, 웨어러블 장치(wearable device), CPU(Central Processing Unit), APU(Accelerated Processing Unit), GPU(Graphic Processor Unit), NPU(Neural Processing Unit) 등과 같은 다양한 전자 장치 중 하나일 수 있다. 한편, 디버그 장치는 상위 제어 권한이 있는 호스트 장치에 의해 동작하거나, 또는 디버그 장치(10 0)는 호스트 장치 없이 독자적으로 동작할 수 있다. 본 개시의 일 실시 예에 따르면 디버그 장치를 이용해 스토리지 장치의 정확한 동작 시간을 측정할 수 있다. 이하에서는 첨부된 도면을 참조하여 보다 구체적으로 설명하도록 한다. 도 2는 본 개시의 일 실시 예에 따른 디버그 장치 및 컨트롤러를 설명하기 위한 도면이다. 도 2를 참조하면, 일 실시 예에서 디버그 장치는 인터럽트 신호 발생부, 틱 카운트 검출부, 캘 리브레이터, 통신부를 포함할 수 있다. 일 실시 예에서 컨트롤러는 프로세서 코어 및 레지 스터를 포함할 수 있다. 디버그 장치의 인터럽트 신호 발생부는 명령어의 동작 시간을 측정하기 위한 요청(Req)이 수신되면, 인터럽트 신호(Int_Sig)를 통신부를 통해 스토리지 장치로 출력할 수 있다. 일 실시 예에서, 요청(Req)은 호스트 장치로부터 수신된 것일 수 있다. 다른 실시 예에서, 요청(Req)은 디 버그 장치에 포함된 입력 장치를 통해 수신된 사용자 입력일 수 있다. 예를 들어, 입력 장치는 사용자 터 치 스크린, 버튼, 키 등일 수 있다. 여기서, 인터럽트 신호(Int_Sig)는 스토리지 장치의 프로세서 코어가 인터럽트 동작을 수행하도록 제 어하는 신호일 수 있다. 일 실시 예에서, 인터럽트 신호(Int_Sig)는 미리 정의된 인터럽트 동작에 대한 정보를 포함할 수 있다. 스토리지 장치의 프로세서 코어는 디버그 인터페이스를 통해 디버그 장치로부터 인터럽트 신호(Int_Sig)가 수신되면, 인터럽트 동작을 수행할 수 있다. 일 실시 예에서, 프로세서 코어는 인터럽트 신호(Int_Sig)에 대한 응답으로 노말 루틴에서 수행하던 동작 을 중단할 수 있다. 프로세서 코어는 노말 루틴에서 인터럽트 루틴으로 전환하여, 인터럽트 루틴 동안 인 터럽트 동작을 수행할 수 있다. 일 실시 예에 있어서, 인터럽트 동작은 프로세서 코어가 레지스터에 틱 카운트(tick_ct)를 저장하는 동작일 수 있다. 틱 카운트(tick_ct)는 제1 논리 상태(예: 0)과 제2 논리 상태(예: 1)이 주기적으로 반복되는 클록 신호(clock signal)의 논리 상태에 따라 점진적으로 증가하는 값일 수 있다. 예를 들어, 클록 신호가 0에 서 1로 변경될 때 틱 카운트의 값이 1이 증가할 수 있다. 클록 신호는 프로세서 코어의 동작을 동기화하기 위한 신호를 나타낸다. 그리고, 프로세서 코어는 인터럽트 동작이 완료되면, 노말 루틴으로 전환하여 노말 루틴에서 중단된 동작 을 재수행할 수 있다. 이후, 프로세서 코어는 동작 시간을 측정하기 위한 명령어를 수행할 수 있다. 여기서, 명령어는 기계어 명 령어를 말한다. 예를 들어, 명령어는 사칙 연산, 논리 연산, 메모리에 쓰고 읽는 명령, 분기, 호출 명령 등의 기계어를 나타낼 수 있다. 틱 카운트 검출부는 통신부를 통해, 인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카 운트들을 획득할 수 있다. 여기서, 제1 틱 카운트들은 인터럽트 동작의 시작 시점을 나타내는 제1 시작 틱 카운 트 및 인터럽트 동작의 완료 시점을 나타내는 제1 완료 틱 카운트를 포함할 수 있다. 즉, 제1 시작 틱 카운트는 인터럽트 동작이 시작된 때의 틱 카운트이고, 제1 완료 틱 카운트는 인터럽트 동작이 완료된 때의 틱 카운트일 수 있다. 틱 카운트 검출부는 통신부를 통해, 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카운트들을 획득할 수 있다. 여기서, 제2 틱 카운트들은 명령어의 시작 시점을 나타내는 제2 시작 틱 카운트 및 명령어의 완료 시점을 나타내는 제2 완료 틱 카운트를 포함할 수 있다. 즉, 제2 시작 틱 카운트는 명령어의 수행이 시작 된 때의 틱 카운트이고, 제2 완료 틱 카운트는 명령어의 수행이 완료된 때의 틱 카운트일 수 있다. 캘리브레이터는 제1 틱 카운트들 및 제2 틱 카운트들을 이용하여, 명령어의 동작 시간을 결정할 수 있다. 일 실시 예에 있어서, 캘리브레이터는 제2 틱 카운트들의 차이 값에서 제1 틱 카운트들의 차이 값을 감산 함으로써 감산 값을 획득할 수 있다. 캘리브레이터는 획득된 감산 값을 프로세서 코어의 스피드로 나 눈 값을 동작 시간으로 획득할 수 있다. 프로세서 코어의 스피드는 통신부를 통해 획득될 수 있다. 통신부는 스토리지 장치의 디버그 인터페이스에 연결될 수 있다. 통신부는 JTAG(Joint Test Action Group), cJTAG(compact JTAG), SWD(Serial Wire Debug) 등의 통신 방식 중에서 디버그 인터페이스 와 같은 통신 방식을 사용하는 플러그 또는 소켓일 수 있다. 일 실시 예에 있어서, 통신부는 JTAG (Joint Test Action Group) 방식으로 디버그 인터페이스와 통 신할 수 있다. 예를 들어, 디버그 인터페이스는 TDI 핀, TDO 핀을 포함할 수 있다. 통신부는 TDI 핀 을 통해 테스트하기 위한 데이터 신호를 입력할 수 있다. 통신부는 TDO 핀을 통해 테스트 결과에 대한 정 보를 획득할 수 있다. 예를 들어, 통신부는 TDP 핀을 통해 인터럽트 신호를 입력할 수 있다. 예를 들어, 통신부는 TDO 핀을 통해 레지스터에 저장된 틱 카운트를 획득할 수 있다. 일 실시 예에 있어서, 통신부는 스토리지 장치에 포함된 복수의 포트들 중에서, 호스트 인터페이스 와 다른 디버그 인터페이스에 연결될 수 있다. 즉, 디버그 인터페이스는 호스트 인터페이스 와 다른 별도의 인터페이스이다. 이 경우, 호스트 장치와 스토리지 장치 간의 통신과 무관하게, 디버그 장치는 스토리지 장치와 통신을 수행할 수 있다. 또한, 디버그 장치는 컨트롤러의 동작에 영향을 주지 않으면서 스토리지 장치로부터 틱 카운트를 가져올 수 있다. 한편, 상술한 실시 예에서는 캘리브레이터는 디버그 장치에 포함되는 것으로 설명하였으나, 이는 일 실시 예일 뿐이며, 캘리브레이터는 호스트 장치에 포함되는 것으로 변형되어 실시될 수 있다. 구체적인 실시 예에서, 호스트 장치는 스토리지 장치의 디버그 인터페이스에 연결된 디버그 장 치를 통해 스토리지 장치를 디버깅할 수 있다. 이때, 호스트 장치는 디버그 장치와 USB,이더넷 등의 방식으로 통신할 수 있으며, 호스트 장치는 디버그 장치의 제어 권한을 갖는 마스터 장 치일 수 있다. 이 경우, 호스트 장치는 요청(Req)을 디버그 장치로 출력할 수 있다. 디버그 장치는 호스트 장 치로부터 수신된 요청(Req)에 따라 컨트롤러로부터 제1 틱 카운트들 및 제2 틱 카운트들을 획득할 수 있다. 디버그 장치는 제1 틱 카운트들 및 제2 틱 카운트들을 호스트 장치로 전송할 수 있다. 그리고, 호스트 장치는 요청(Req)에 대한 응답으로 디버그 장치로부터 제1 틱 카운트들 및 제2 틱 카 운트들을 수신할 수 있다. 호스트 장치는 제1 틱 카운트들 및 제2 틱 카운트들을 이용하여, 동작 시간을 결정할 수 있다. 일 실시 예에 있어서, 호스트 장치는 제2 틱 카운트들의 차이 값에서 제1 틱 카운트들의 차이 값을 감산함 으로써 감산 값을 획득할 수 있다. 호스트 장치는 감산 값을 프로세서 코어의 스피드로 나눈 값을 동 작 시간으로 획득할 수 있다. 도 3a는 본 개시의 일 실시 예에 따른 동작의 흐름을 설명하기 위한 도면이다. 도 3a를 참조하면, 디버그 장치는 명령어의 동작 시간을 측정하기 위한 요청(Req)이 수신되면, 인터럽트 신호(Int_Sig)를 프로세서 코어로 전송할 수 있다. 프로세서 코어는 노말 루틴에서 동작을 수행하던 중, 인터럽트 신호(Int_Sig)가 수신되면, 인터럽트 루틴 으로 전환할 수 있다. 이 경우, 프로세서 코어는 노말 루틴에서 수행하던 동작을 중단할 수 있다. 프로세 서 코어는 노말 루틴에서 인터럽트 루틴으로 전환하여, 인터럽트 루틴 동안 인터럽트 동작을 수행할 수 있 다. 일 예를 들어, 프로세서 코어는 인터럽트 신호(Int_Sig)에 대한 응답으로, 틱 카운트를 레지스터에 저장하는 인터럽트 동작을 수행할 수 있다. 틱 카운트 검출부는 인터럽트 신호(Int_Sig)가 출력된 시점에 프로세서 코어의 틱 카운트를 제1 시작 틱 카운트(start_tick1)로서 획득할 수 있다. 인터럽트 동작이 완 료되면, 틱 카운트가 레지스터에 저장될 수 있다. 틱 카운트 검출부는 레지스터에 저장된 틱 카 운트를 제1 완료 틱 카운트(end_tick1)로서 획득할 수 있다. 다른 예를 들어, 프로세서 코어는 인터럽트 신호(Int_Sig)에 대한 응답으로, 틱 카운트를 레지스터에 저장하는 제1 인터럽트 동작을 수행할 수 있다. 프로세서 코어는 제1 인터럽트 동작이 완료되면, 틱 카운 트를 레지스터에 저장하는 제2 인터럽트 동작을 수행할 수 있다. 제1 인터럽트 동작의 완료로 인해 레지스 터에 저장된 틱 카운트가 제1 시작 틱 카운트(start_tick1)이고, 제2 인터럽트 동작의 완료로 인해 레지스 터에 저장된 틱 카운트가 제1 완료 틱 카운트(end_tick1)일 수 있다. 틱 카운트 검출부는 레지스터 에 저장된 제1 시작 틱 카운트(start_tick1) 및 제1 완료 틱 카운트(end_tick1)를 획득할 수 있다. 그리고, 프로세서 코어는 인터럽트 동작이 완료되면, 노말 루틴으로 전환하여 노말 루틴에서 중단된 동작 을 재수행할 수 있다. 이후 프로세서 코어는 명령어를 수행할 수 있다. 이 경우, 틱 카운트 검출부는 명령어가 시작된 시점에 프로세서 코어의 틱 카운트를 제2 시작 틱 카운트(start_tick2)로서 획득할 수 있 다. 명령어의 수행이 완료되면, 프로세서 코어는 틱 카운트를 레지스터에 저장될 수 있다. 틱 카운트 검출부는 레지스터에 저장된 틱 카운트를 제2 완료 틱 카운트(end_tick2)로서 획득할 수 있다. 캘리브레이터는 제1 틱 카운트들 및 제2 틱 카운트들을 이용하여, 명령어의 동작 시간을 결정할 수 있다. 예를 들어, 캘리브레이터는 제1 완료 틱 카운트(end_tick1) 및 제1 시작 틱 카운트(start_tick1)의 차이를 오프셋 값(offset_value)으로 획득할 수 있다. 오프셋 값(offset_value)은 레이턴시를 나타낼 수 있다. 그리고, 캘리브레이터는 제2 완료 틱 카운트(end_tick2) 및 제2 시작 틱 카운트(start_tick2)의 차이를 틱 값 (tick_value)으로 획득할 수 있다. 틱 값(tick_value)과 오프셋 값(offset_value)을 이용해 동작 시간을 결정 하는 방법은 도 3b를 참조하여 구체적으로 설명하도록 한다. 도 3b는 본 개시의 일 실시 예에 따른 동작 시간을 결정하는 방법을 설명하기 위한 도면이다. 도 3b를 참조하면, 실시 예에 따른 캘리브레이터는 틱 값(tick_value)에서 오프셋 값(offset_value)를 감 산함으로써 감산 값을 획득할 수 있다. 캘리브레이터는 감산 값을 프로세서 코어의 스피드(speed)로 나눈 값을 동작 시간(ot)으로 획득할 수 있다. 여기서, 틱 값(tick_value)은 제2 완료 틱 카운트에서 제2 시작 틱 카운트를 뺀 값이고, 오프셋 값 (offset_value)은 제1 완료 틱 카운트에서 제1 시작 틱 카운트를 뺀 값일 수 있다. 예를 들어, 틱 값(tick_value)이 538 cycle이고, 오프셋 값(offset_value)이 2 cycle이고, 스피드(speed)가 600Hz인 것을 가정하도록 한다. 이 경우, 도 3b의 수학식에 각각의 값을 입력하면, 명령어의 동작 시간은 (538 - 2) / 600 = 0.893 초로 계산될 수 있다. 이상과 같은 본 개시의 일 실시 예에 따르면, 스토리지 장치의 정확한 동작 시간을 측정하는 디버그 장치 및 디버그 시스템을 제공할 수 있다. 또한, 스토리지 장치의 성능 및 컴파일러 옵션에 따른 개별적인 세팅 없이도 스토리지 장치의 정확한 동작 시간을 보다 편리하게 측정할 수 있다. 도 4는 본 개시의 일 실시 예에 따른 디버그 방법을 설명하기 위한 도면이다. 도 4를 참조하면, 본 개시의 일 실시 예에 따른 디버그 방법은 명령어의 동작 시간을 측정하기 위한 요청이 수 신되면, 인터럽트 동작을 수행하도록 제어하는 인터럽트 신호를 스토리지 장치의 디버그 인터페이스 를 통해 스토리지 장치의 컨트롤러로 전송하는 단계(S410), 디버그 인터페이스를 통해 인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카운트들을 획득하는 단계(S420), 디버그 인터페이스를 통해 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카운트들을 획득하는 단계(S430), 및 제1 틱 카운트 들 및 제2 틱 카운트들을 이용해 동작 시간을 결정하는 단계(S440)를 포함할 수 있다. 구체적으로, 명령어의 동작 시간을 측정하기 위한 요청이 수신되면, 인터럽트 동작을 수행하도록 제어하는 인터 럽트 신호를 스토리지 장치의 디버그 인터페이스를 통해 스토리지 장치의 컨트롤러로 전송 할 수 있다(S410). 일 실시 예에 있어서, 인터럽트 신호에 응답하여, 컨트롤러에 포함된 프로세서 코어가 수행 중인 동 작을 모두 중단할 수 있다. 그리고, 프로세서 코어가 컨트롤러에 포함된 레지스터에 틱 카운트 를 저장하는 인터럽트 동작을 수행할 수 있다. 인터럽트 동작이 완료된 이후, 프로세서 코어가 명령어를 수행할 수 있다. 그리고, 디버그 인터페이스를 통해 인터럽트 동작의 시작 시점 및 완료 시점에 대응되는 제1 틱 카운트들 을 획득할 수 있다(S420). 여기서, 제1 틱 카운트들은 인터럽트 동작이 시작되는 시점을 나타내는 제1 시작 틱 카운트 및 인터럽트 동작이 완료되는 시점을 나타내는 제1 완료 틱 카운트를 포함할 수 있다. 예를 들어, 스토리지 장치의 프로세서 코어는 인터럽트 동작이 시작되는 시점에 제1 시작 틱 카운트를 레지스터에 저장하고, 인터럽트 동작 이 완료되는 시점에 제1 완료 틱 카운트를 레지스터에 저장할 수 있다. 디버그 장치의 틱 카운트 검 출부는 디버그 인터페이스를 통해 레지스터로부터 제1 시작 틱 카운트 및 제1 완료 틱 카운트를 가져올 수 있다. 그리고, 디버그 인터페이스를 통해 명령어의 시작 시점 및 완료 시점에 대응되는 제2 틱 카운트들을 획득 할 수 있다(S430). 여기서, 제2 틱 카운트들은 명령어가 시작되는 시점을 나타내는 제2 시작 틱 카운트 및 명령어가 완료되는 시점 을 나타내는 제2 완료 틱 카운트를 포함할 수 있다. 예를 들어, 스토리지 장치의 프로세서 코어는 명 령어가 시작되는 시점에 제2 시작 틱 카운트를 레지스터에 저장하고, 명령어가 완료되는 시점에 제2 완료 틱 카운트를 레지스터에 저장할 수 있다. 디버그 장치의 틱 카운트 검출부는 디버그 인터페이스 를 통해 레지스터에서 제2 시작 틱 카운트 및 제2 완료 틱 카운트를 가져올 수 있다. 그리고, 제1 틱 카운트들 및 제2 틱 카운트들을 이용해 동작 시간을 결정할 수 있다(S440). 일 실시 예에 있어서, 제2 틱 카운트들의 차이 값에서 제1 틱 카운트들의 차이 값을 감산함으로써 감산 값을 획 득할 수 있다. 그리고, 감산 값을 프로세서 코어의 스피드로 나눈 값을 동작 시간으로 결정할 수 있다. 이상과 같은 본 개시의 일 실시 예에 따르면, 스토리지 장치의 정확한 동작 시간을 측정하는 디버그 장치 , 디버그 시스템 및 디버그 방법을 제공할 수 있다. 실시 예에 따르면, 스토리지 장치의 성능 및 컴파일러 옵션에 따른 개별적인 세팅 없이도 스토리지 장치의 정확한 동작 시간을 측정할 수 있다."}
{"patent_id": "10-2022-0062267", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 개시의 일 실시 예에 따른 디버그 시스템을 설명하기 위한 도면이다. 도 2는 본 개시의 일 실시 예에 따른 디버그 장치 및 컨트롤러를 설명하기 위한 도면이다. 도 3a는 본 개시의 일 실시 예에 따른 동작의 흐름을 설명하기 위한 도면이다. 도 3b는 본 개시의 일 실시 예에 따른 동작 시간을 결정하는 방법을 설명하기 위한 도면이다. 도 4는 본 개시의 일 실시 예에 따른 디버그 방법을 설명하기 위한 도면이다."}
