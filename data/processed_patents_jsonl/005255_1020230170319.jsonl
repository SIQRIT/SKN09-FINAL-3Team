{"patent_id": "10-2023-0170319", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0042040", "출원번호": "10-2023-0170319", "발명의 명칭": "메모리 안전 버그를 탐지하는 방법 및 이를 지원하는 전자 장치", "출원인": "삼성전자주식회사", "발명자": "한찬규"}}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "다중 도메인을 지원하는 전자 장치(101)에 있어서, 인스트럭션들을 저장하는 메모리(130); 및제1 도메인 및 제2 도메인에서 동작 가능한 적어도 하나의 프로세서(230)를 포함하는 하드웨어(430, 760)를 포함하고,상기 인스트럭션들은, 상기 프로세서(230)에 의해 실행될 때, 상기 전자 장치(101)로 하여금,상기 제1 도메인 또는 상기 제2 도메인에 의한 공유 메모리 사용 요청을 감지하고,상기 공유 메모리 사용 요청에 기반하여, 상기 메모리(130)에서 지정된 메모리 영역에 기반하여 상기 제1 도메인과 상기 제2 도메인을 포함하는 다중 도메인 간의 통신을 위한 공유 메모리를 할당하고, 상기 제1 도메인의 제1 메모리 영역과 상기 제2 도메인의 제2 메모리 영역에 상기 공유 메모리에 대한 태그를등록하고, 및상기 태그에 기반하여, 상기 제1 도메인과 상기 제2 도메인 간에 공유되는 상기 공유 메모리에 대한 메모리 안전 버그(memory safety bug)를 탐지하도록 하는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 다중 도메인은 넌-시큐어 월드(non-secure world)(410)의 도메인 및 시큐어 월드(secure world)(420)의도메인을 포함하고,상기 넌-시큐어 월드(410)의 도메인 및 상기 시큐어 월드(420)의 도메인은 하나 또는 그 이상의 도메인들을 포함하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 인스트럭션들은, 상기 전자 장치(101)로 하여금,상기 하드웨어(430, 760)를 통해 메모리 안전 버그를 탐지 가능한 MTE(memory tagging extension)를 이용하여,상기 공유 메모리에 대한 메모리 안전 버그를 탐지하도록 하는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 다중 도메인 각각은, 소프트웨어 계층과 하드웨어 계층으로 구성되고,상기 하드웨어 계층은 상기 다중 도메인에 대해 공유되고,상기 소프트웨어 계층은 상기 다중 도메인 별로 구분되고, 어플리케이션 계층(440), 운영체제 계층(450), 가상화 계층(460) 및 모니터 계층(470)을 포함하는 전자 장치.공개특허 10-2025-0042040-3-청구항 5 제4항에 있어서,상기 가상화 계층(460)은 상기 공유 메모리의 제한된 동작을 수행할 수 있는 프리빌리지드 모드(privilegedmode)로 동작하고, 상기 다중 도메인 간에 침범되는 메모리 안전 버그를 모니터링 및 탐지하는 컨트롤러(controller)(800)를 포함하는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서, 상기 컨트롤러(800)는, 상기 공유 메모리를 요청, 등록, 관리, 및/또는 거부하는 동작을 처리하는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5항에 있어서, 상기 컨트롤러(800)는,메모리 요청, 권한 및 태그 정보를 체크하는 인터페이스(810),상기 인터페이스를 통해 전달된 요청을 처리하는 매니저(manager)(820),상기 공유 메모리에 대해 메모리 안전 버그를 탐지하는 태그 에이전트(tag agent)(830)를 포함하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 태그 에이전트(830)는,공유 메모리에 대해 메모리 영역을 할당 요청한 도메인의 식별번호, 메모리 주소, 메모리 크기, 공유 메모리에할당 요청한 태그 및/또는 변환 주소에 기반하여 테이블을 관리하도록 설정된 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제7항에 있어서, 상기 컨트롤러(800)는,상기 다중 도메인의 제1 도메인으로부터 공유 메모리 할당 요청을 수신하고,주소를 변환하기 위한 테이블을 관리하고, 상기 테이블에서 주소 변환을 통해 공유 메모리에 대한 태그를 할당하고,상기 할당된 태그에 관련된 태그 정보에 기반하여 상기 공유 메모리에서 공유 메모리 태그를 설정하고, 공유 메모리 할당 요청을 상기 다중 도메인의 제2 도메인에 전달하고, 상기 제2 도메인으로부터 커밋 메시지(commit message)를 수신하고,상기 제1 도메인에서 할당 요청한 메모리 영역과 상기 제2 도메인에서 할당 요청한 메모리 영역이 일치하는지판단하고, 할당 요청한 메모리 영역이 일치하는 경우, 상기 공유 메모리에 대한 최종 등록을 완료하고,상기 제1 도메인과 상기 제2 도메인에서 동일한 공유 메모리 태그를 가지는 공유 메모리에 대한 등록 완료 응답을 상기 제1 도메인 및 상기 제2 도메인에 전달하도록 설정된 전자 장치.공개특허 10-2025-0042040-4-청구항 10 제9항에 있어서,상기 제1 도메인 및 상기 제2 도메인에 의해, 상기 공유 메모리에서 동일한 태그를 가지는 메모리 영역이 등록되는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서, 상기 컨트롤러(800)는,상기 등록된 태그에 기반하여 상기 다중 도메인 별 메모리 안전 버그를 탐지하고, 메모리 안전 버그가 탐지되는 경우, 태그의 불일치로 인해 해당 도메인에 의한 메모리 영역 접근을 거부하는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제1항에 있어서, 상기 하드웨어(430, 760)는, 실행 가능한 인스트럭션들을 저장하고, 상기 인스트럭션들을 실행 가능한 프로그래밍 가능(programmable)한 제1프로세서; 및상기 다중 도메인 별 메모리 할당 및 해제를 관리하는 제2 프로세서를 포함하고,상기 제1 프로세서 및 상기 제2 프로세서는 다중 도메인 간에 공유되는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제12항에 있어서, 상기 메모리(130)는,상기 제1 프로세서의 동작 상에서 사용되는 동적 메모리를 포함하는 것을 특징으로 하는 전자 장치."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "다중 도메인을 지원하는 전자 장치(101)의 동작 방법에 있어서,제1 도메인 또는 제2 도메인에 의한 공유 메모리 사용 요청을 감지하는 동작;상기 공유 메모리 사용 요청에 기반하여, 메모리(130)에서 지정된 메모리 영역에 기반하여 상기 제1 도메인과상기 제2 도메인을 포함하는 다중 도메인 간의 통신을 위한 공유 메모리를 할당하는 동작; 상기 제1 도메인의 제1 메모리 영역과 상기 제2 도메인의 제2 메모리 영역에 상기 공유 메모리에 대한 태그를등록하는 동작; 및상기 태그에 기반하여, 상기 제1 도메인과 상기 제2 도메인 간에 공유되는 상기 공유 메모리에 대한 메모리 안전 버그(memory safety bug)를 탐지하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제14항에 있어서,상기 다중 도메인은 넌-시큐어 월드(non-secure world)(410)의 도메인 및 시큐어 월드(secure world)(420)의도메인을 포함하고,상기 넌-시큐어 월드(410)의 도메인 및 상기 시큐어 월드(420)의 도메인은 하나 또는 그 이상의 도메인들을 포공개특허 10-2025-0042040-5-함하는 방법."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제14항에 있어서, 상기 하드웨어(430, 760)를 통해 메모리 안전 버그를 탐지 가능한 MTE(memory tagging extension)를 이용하여,상기 공유 메모리에 대한 메모리 안전 버그를 탐지하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제14항에 있어서, 상기 다중 도메인 각각은, 소프트웨어 계층과 하드웨어 계층으로 구성되고,상기 하드웨어 계층은 상기 다중 도메인에 대해 공유되고,상기 소프트웨어 계층은 상기 다중 도메인 별로 구분되고, 어플리케이션 계층(440), 운영체제 계층(450), 가상화 계층(460) 및 모니터 계층(470)을 포함하고,상기 가상화 계층(460)은 상기 공유 메모리의 제한된 동작을 수행할 수 있는 프리빌리지드 모드(privilegedmode)로 동작하고, 상기 다중 도메인 간에 침범되는 메모리 안전 버그를 모니터링 및 탐지하는 컨트롤러(controller)(800)를 포함하고,상기 컨트롤러(800)에 의해, 상기 공유 메모리를 요청, 등록, 관리, 및/또는 거부하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서, 상기 다중 도메인의 제1 도메인으로부터 공유 메모리 할당 요청을 수신하는 동작,주소를 변환하기 위한 테이블을 관리하고, 상기 테이블에서 주소 변환을 통해 공유 메모리에 대한 태그를 할당하는 동작,상기 할당된 태그에 관련된 태그 정보에 기반하여 상기 공유 메모리에서 공유 메모리 태그를 설정하는 동작, 공유 메모리 할당 요청을 상기 다중 도메인의 제2 도메인에 전달하는 동작, 상기 제2 도메인으로부터 커밋 메시지(commit message)를 수신하는 동작,상기 제1 도메인에서 할당 요청한 메모리 영역과 상기 제2 도메인에서 할당 요청한 메모리 영역이 일치하는지판단하는 동작, 할당 요청한 메모리 영역이 일치하는 경우, 상기 공유 메모리에 대한 최종 등록을 완료하는 동작,상기 제1 도메인과 상기 제2 도메인에서 동일한 공유 메모리 태그를 가지는 공유 메모리에 대한 등록 완료 응답을 상기 제1 도메인 및 상기 제2 도메인에 전달하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0170319", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제18항에 있어서,상기 제1 도메인 및 상기 제2 도메인에 의해, 상기 공유 메모리에서 동일한 태그를 가지는 메모리 영역을 등록하는 동작을 포함하는 방법.공개특허 10-2025-0042040-6-청구항 20 제18항에 있어서,상기 등록된 태그에 기반하여 상기 다중 도메인 별 메모리 안전 버그를 탐지하는 동작, 메모리 안전 버그가 탐지되는 경우, 태그의 불일치로 인해 해당 도메인에 의한 메모리 영역 접근을 거부하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0170319", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 실시예는 메모리 안전 버그(memory safety bug)를 탐지하는 방법 및 이를 지원하는 전자 장치를 제공 한다. 일 실시예에 따른 다중 도메인을 지원하는 전자 장치는, 인스트럭션들을 저장하는 메모리, 및 제1 도에미 인 및 제2 도메인에서 동작 가능한 프로세서를 포함하는 하드웨어를 포함할 수 있다. 일 실시예에 따르면, 상기 (뒷면에 계속)"}
{"patent_id": "10-2023-0170319", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시의 실시예는 메모리 안전 버그(memory safety bug)를 탐지하는 방법 및 이를 지원하는 전자 장치를 제공 한다."}
{"patent_id": "10-2023-0170319", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "디지털 기술의 발달과 함께 스마트 폰(smart phone), 디지털 카메라, 및/또는 웨어러블 장치(wearable device) 와 같은 다양한 유형의 전자 장치가 널리 사용되고 있다. 이러한, 전자 장치는 기능 지지 및 증대를 위해, 전자 장치의 하드웨어적인 부분 및/또는 소프트웨어적인 부분이 지속적으로 개발되고 있다. 스마트폰으로 대표되는 휴대용 전자 장치(이하 ‘전자 장치’)는 다양한 어플리케이션들(또는 기능들)을 탑재할 수 있게 되고, 다양한 어플리케이션들에서 사용되는 데이터를 위한 메모리의 사용이 증가할 수 있다. 전자 장치 에서 메모리의 사용 증가에 따라 메모리 안전(memory safety)(또는 메모리 보안) 보장에 대한 이슈가 제기되고 있다. 예를 들어, 전자 장치는 메모리 안전 버그(memory safety bug)로 인해 메모리의 보안 취약점이 존재할 수 있다. 예를 들어, 메모리 안전 버그는 전자 장치의 품질과 안정성에 부정적인 영향을 미치고, 전자 장치에서 관 찰되는 비정상 종료의 상당 부분을 차지할 수 있다. 상술한 정보는 본 개시에 대한 이해를 돕기 위한 목적으로 하는 배경 기술(related art)로 제공될 수 있다. 상 술한 내용 중 어느 것도 본 개시와 관련된 종래 기술(prior art)로서 적용될 수 있는지에 대하여 어떠한 주장이 나 결정이 제기되지 않는다. 따라서, 전자 장치에서는 메모리 안전 버그를 탐지(또는 감지)하여 메모리의 보안을 강화할 수 있는 기술의 제 공이 필요할 수 있다. 본 개시의 일 실시예에서는, 전자 장치에서 메모리 안전 버그(memory safety bug)를 탐지할 수 있는 방법 및 이 를 지원하는 전자 장치를 제공한다. 본 개시의 일 실시예에서는, 전자 장치 내의 다중 도메인 환경에서 메모리 안전 버그를 탐지할 수 있는 방법 및 이를 지원하는 전자 장치를 제공한다. 본 개시의 일 실시예에서는, 다중 도메인을 지원하는 전자 장치에서 MTE(memory tagging extension)를 이용한 다중 도메인 간 메모리 안전 버그 탐지 방법 및 이를 지원하는 전자 장치를 제공한다. 본 문서에서 이루고자 하는 기술적 과제는 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또"}
{"patent_id": "10-2023-0170319", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 2, "content": "다른 기술적 과제들은 아래의 기재로부터 본 발명이 속하는 기술분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다. 본 개시의 일 실시예에 따른 다중 도메인을 지원하는 전자 장치는, 인스트럭션들을 저장하는 메모리, 및 제1 도 메인 및 제2 도메인에서 동작 가능한 적어도 하나의 프로세서를 포함하는 하드웨어를 포함할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상기 전자 장치로 하여금, 상기 제1 도메인 또는 상기 제2 도메인에 의한 공유 메모리 사용 요청을 감지하도록 할 수 있다. 상기 인스트럭션들 은, 상기 프로세서에 의해 실행될 때, 상기 전자 장치로 하여금, 상기 공유 메모리 사용 요청에 기반하여, 상기 메모리에서 지정된 메모리 영역에 기반하여 상기 제1 도메인과 상기 제2 도메인을 포함하는 다중 도메인 간의 통신을 위한 공유 메모리를 할당하도록 할 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상기 전자 장치로 하여금, 상기 제1 도메인의 제1 메모리 영역과 상기 제2 도메인의 제2 메모리 영역에 상기 공유 메모리에 대한 태그를 등록하도록 할 수 있다. 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상기 전 자 장치로 하여금, 상기 태그에 기반하여, 상기 제1 도메인과 상기 제2 도메인 간에 공유되는 상기 공유 메모리 에 대한 메모리 안전 버그(memory safety bug)를 탐지하도록 할 수 있다. 본 개시의 일 실시예에 따른 다중 도메인을 지원하는 전자 장치의 동작 방법은, 제1 도메인 또는 제2 도메인에 의한 공유 메모리 사용 요청을 감지하는 동작을 포함할 수 있다. 상기 동작 방법은, 상기 공유 메모리 사용 요 청에 기반하여, 메모리에서 지정된 메모리 영역에 기반하여 상기 제1 도메인과 상기 제2 도메인을 포함하는 다 중 도메인 간의 통신을 위한 공유 메모리를 할당하는 동작을 포함할 수 있다. 상기 동작 방법은, 상기 제1 도메 인의 제1 메모리 영역과 상기 제2 도메인의 제2 메모리 영역에 상기 공유 메모리에 대한 태그를 등록하는 동작 을 포함할 수 있다. 상기 동작 방법은, 상기 태그에 기반하여, 상기 제1 도메인과 상기 제2 도메인 간에 공유되 는 상기 공유 메모리에 대한 메모리 안전 버그(memory safety bug)를 탐지하는 동작을 포함할 수 있다. 상기와 같은 과제를 해결하기 위하여 본 개시의 다양한 실시예들에서는, 상기 방법을 프로세서에서 실행시키기 위한 프로그램을 기록한 컴퓨터로 판독 가능한 기록 매체를 포함할 수 있다. 일 실시예에 따르면, 하나 이상의 프로그램들을 저장하는 비 일시적(non-transitory) 컴퓨터 판독 가능 저장 매 체(또는 컴퓨터 프로그램 프로덕트(product))가 기술된다. 일 실시예에 따르면, 하나 이상의 프로그램들은, 제1 도메인 또는 제2 도메인에 의한 공유 메모리 사용 요청을 감지하는 동작, 상기 공유 메모리 사용 요청에 기반하 여, 메모리에서 지정된 메모리 영역에 기반하여 상기 제1 도메인과 상기 제2 도메인을 포함하는 다중 도메인 간 의 통신을 위한 공유 메모리를 할당하는 동작, 상기 제1 도메인의 제1 메모리 영역과 상기 제2 도메인의 제2 메 모리 영역에 상기 공유 메모리에 대한 태그를 등록하는 동작, 및 상기 태그에 기반하여, 상기 제1 도메인과 상 기 제2 도메인 간에 공유되는 상기 공유 메모리에 대한 메모리 안전 버그(memory safety bug)를 탐지하는 동작 을 수행하는 명령어들을 포함할 수 있다. 본 개시의 적용 가능성의 추가적인 범위는 이하의 상세한 설명으로부터 명백해질 것이다. 그러나 본 개시의 사 상 및 범위 내에서 다양한 변경 및 수정은 당업자에게 명확하게 이해될 수 있으므로, 상세한 설명 및 본 개시의 바람직한 실시예와 같은 특정 실시예는 단지 예시로 주어진 것으로 이해되어야 한다. 본 개시의 일 실시예에 따른 전자 장치, 그 동작 방법 및 기록 매체에 따르면, 다중 도메인 간에 공유되는 메모 리도 MTE에 의해 보호 가능할 수 있다. 일 실시예에 따르면, 다중 도메인 환경에서 발생 가능한 메모리 안전 버 그를 효과적으로 탐지하여, 보안성을 향상시킬 수 있다. 일 실시예에 따르면, 전자 장치 내에서 호스트(host)로 동작하는 제1 도메인(예: Android)이 프라이머리(primary)로 존재하고, 제2 도메인(예: Trustzone, Virtual Machine, Secure Element, 및/또는 Secure processor/SEE(secure execution environment)와 같은 추가적인 환 경)이 동작하는 다중 도메인 환경에서, 다중 도메인 간에 공유 메모리를 통해 통신이 필요할 때, 다중 도메인에 서 공유 메모리에 대한 간섭이 없도록 구현할 수 있다. 일 실시예에 따르면, 메모리 안전 버그를 효과적으로 탐 지하여, 메모리 안전 버그에 의한 비정상 종료를 방지하여, 사용자의 전자 장치 사용에 대한 편의성을 향상할 수 있다. 이 외에, 본 문서를 통해 직접적 또는 간접적으로 파악되는 다양한 효과들이 제공될 수 있다. 본 개시에서 얻을 수 있는 효과는 이상에서 언급한 효과들로 제한되지 않으며, 언급하지 않은 또 다른 효과들은 아래의 기재로부 터 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2023-0170319", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 도면을 참조하여 본 개시의 실시예에 대하여 본 개시가 속하는 기술 분야에서 통상의 지식을 가진 자가 용이하게 실시할 수 있도록 상세히 설명한다. 그러나 본 개시는 여러 가지 상이한 형태로 구현될 수 있으 며 여기에서 설명하는 실시예에 한정되지 않는다. 도면의 설명과 관련하여, 동일하거나 유사한 구성요소에 대해 서는 동일하거나 유사한 참조 부호가 사용될 수 있다. 또한, 도면 및 관련된 설명에서는, 잘 알려진 기능 및 구성에 대한 설명이 명확성과 간결성을 위해 생략될 수 있다. 도 1은 다양한 실시예들에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장치와 통신하거나, 또는 제2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일 실시예에 따르면, 전자 장치(10 1)는 서버를 통하여 전자 장치와 통신할 수 있다. 일 실시예에 따르면, 전자 장치는 프로세서 , 메모리, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서 는, 전자 장치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈 , 또는 안테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일 실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세 서는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 (CPU, central processing unit) 또는 어플리케이션 프로세서(AP, application processor)) 또는 이와는 독립 적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치(GPU, graphic processing unit), 신 경망 처리 장치(NPU, neural processing unit), 이미지 시그널 프로세서(ISP, image signal processor), 센서 허브 프로세서(sensor hub processor), 또는 커뮤니케이션 프로세서(CP, communication processor))를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서를 포함하는 경우, 보조 프로 세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특화되도록 설정될 수 있다. 보조 프 로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(inactive)(예: 슬립(sleep)) 상태에 있는 동 안 메인 프로세서를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동 안 메인 프로세서와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈 , 센서 모듈, 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일 실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일 실시예에따르면, 보조 프로세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행 되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알 고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi-supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경 망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포 함할 수 있다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제(OS, operating system), 미들 웨어(middleware) 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일 실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일 실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일 실시 예에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일 실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일 실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD(secure digital) 카드 인터페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일 실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일 실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다.카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일 실시예에 따르면, 카메라 모듈은 하나 이 상의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일 실시예에 따르면, 전력 관리 모 듈은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일 실시예에 따르면, 배터 리는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일 실시예에 따르면, 통 신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제1 네트워크(예: 블 루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워크) 또는 제2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN(wide area network))와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거 나, 또는 서로 별도의 복수의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식 별 모듈에 저장된 가입자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제1 네트워크 또는 제2 네트워크와 같은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB, enhanced mobile broadband), 단말 전력 최소화와 다수 단말의 접속(mMTC, massive machine type communications), 또는 고신뢰도와 저지연(URLLC, ultra-reliable and low-latency communications)을 지원할 수 있다. 무선 통신 모 듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무 선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거 대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO, full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테 나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일 실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일 실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일 실시예에 따르면, 안테나 모듈은 복수의 안테나 들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제1 네트워크 또는 제2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예들에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일 실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제1 면(예: 아래 면)에 또는 그에 인접하여 배치 되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일 실시예에 따르면, 명령 또는 데이터는 제2 네트워크에 연결된 서버를 통해서 전자 장치와 외 부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일 실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가 적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상 기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전 자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제 공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC, mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용 한 지능형 서버일 수 있다. 일 실시예에 따르면, 외부의 전자 장치 또는 서버는 제2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 본 개시의 일 실시예에 따른 전자 장치의 구성을 개략적으로 도시하는 도면이다. 도 2를 참조하면, 본 개시의 일 실시예에 따른 전자 장치는 메모리(예: 도 1의 메모리) 및 프로 세서(예: 도 1의 프로세서)를 포함할 수 있다. 일 실시예에 따르면, 전자 장치는 도 1을 참조한 설명 부분에서 설명한 바와 같은 전자 장치의 구성요소의 전부 또는 적어도 일부를 포함할 수 있다. 일 실시예에 따르면, 메모리는 도 1의 메모리에 대응할 수 있다. 일 실시예에 따르면, 메모리는 전자 장치의 적어도 하나의 구성요소(예: 프로세서)에 의해 사용되는 다양한 데이터를 저장할 수 있 다. 일 실시예에서, 데이터는, 예를 들어, 소프트웨어(예: 도 1의 프로그램(예: 도 1의 운영 체제, 미들 웨어, 및/또는 어플리케이션), 및 소프트웨어와 관련된 명령(command)에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 일 실시예에 따라, 메모리는 휘발성 메모리(예: 도 1의 휘발성 메모리) 또는 비휘발성 메모리 (예: 도 1의 비휘발성 메모리)를 포함할 수 있다. 일 실시예에 따르면, 메모리는 프로세서(12 0)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터가 프로세서에 의해 처리된 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따르면, 메모리는 동적 메모리(예: 휘발성 메모리, RAM, 또는 DRAM)로서, 메모리 할당 또는 메모리 해제에 기반하여 소프트웨어에 대해 메모리 영역을 관리할 수 있다. 일 실시예에 따르면, 메모리는 MTE(memory tagging extension) 기술을 통해 보호(예: 프로그래밍 언어의 메모리 처리 오류 방지)될 수 있다. 일 실시예에서, MTE 기술과 관련하여 후술하는 도면들을 참조하여 설명된다. 일 실시예에 따라, 메모리는, 실행 시에, 프로세서가 동작하도록 하는 인스트럭션들(instructions)을 저장할 수 있다. 예를 들어, 인스트럭션들은 메모리 상에 소프트웨어(예: 도 1의 프로그램)로서 저장 될 수 있고, 프로세서에 의해 실행 가능할 수 있다. 일 실시예에 따르면, 프로세서는, 전자 장치의 사용자에 의해 요구되는 응용 계층 처리 기능을 할 수 있다. 일 실시예에 따르면, 프로세서는 전자 장치의 다양한 블록들을 위한 기능의 제어 및 명령을 제 공할 수 있다. 일 실시예에 따르면, 프로세서는 전자 장치의 각 구성요소들의 제어 및/또는 통신에 관한 연산이나 데이터 처리를 수행할 수 있다. 예를 들어, 프로세서는 도 1의 프로세서의 구성 및/또 는 기능 중 적어도 일부를 포함할 수 있다. 일 실시예에 따르면, 프로세서는 전자 장치의 구성요소들 과 작동적으로 연결될 수 있다. 일 실시예에 따르면, 프로세서는 전자 장치의 다른 구성요소로부터 수신된 명령 또는 데이터를 메모리에 로드(load)하고, 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 저장할 수 있다. 일 실시예에 따르면, 프로세서는 처리 회로(processing circuitry) 및/또는 실행 가능한 프로그램 요소 (executable program elements)를 포함할 수 있다. 일 실시예에 따르면, 프로세서는 처리 회로 및/또는 실행 가능한 프로그램 요소에 기반하여, 다중 도메인 환경에서 메모리 안전 버그를 탐지하는 것과 관련된 전반 적인 동작을 제어(또는 처리)할 수 있다. 일 실시예에 따르면, 프로세서는 후술하는 제어 모듈(또는 컨트롤러(controller))(예: 도 8의 제어 모듈 )에 대응하는 동작을 수행할 수 있다. 일 실시예에 따라, 전자 장치의 프로세서(또는 제어 모듈)의 상세 동작에 관하여 후술하는 도면 들을 참조하여 설명된다. 일 실시예에 따르면, 프로세서는 어플리케이션 프로세서(AP, application processor)일 수 있다. 일 실시 예에 따르면, 프로세서는 전자 장치의 연산과 멀티미디어 구동 기능을 수행하는 시스템 반도체일 수 있다. 일 실시예에 따르면, 프로세서는 시스템 온 칩(SoC, system-on-chip) 형태로 구성되어, 여러 반도체 기술을 하나로 집적하고, 시스템 블록들을 하나의 칩으로 구현한 기술집약적 반도체 칩을 포함할 수 있다. 일 실시예에 따르면, 프로세서의 시스템 블록들은, 도 2에 예시한 바와 같이, 그래픽 처리 장치(GPU, graphics processing unit), 이미지 시그널 프로세서(ISP, image signal processor), 중앙 처리 장 치(CPU, central processing unit), 신경망 처리 장치(NPU, neural processing unit), 디지털 시그 널 프로세서(DSP, digital signal processor), 모뎀(modem), 커넥티비티(connectivity), 및/또 는 시큐리티(security) 블록을 포함할 수 있다. 일 실시예에 따라, GPU는 그래픽 처리를 수행할 수 있다. 일 실시예에 따르면, GPU는 CPU의 명 령을 받아 디스플레이 상에 사물(또는 물체)들의 모양, 위치, 색상, 음영, 움직임, 및/또는 질감을 표현하기 위 한 그래픽 처리를 수행할 수 있다. 일 실시예에 따라, ISP는 이미지 및 비디오의 영상 처리 및 보정을 수행할 수 있다. 일 실시예에 따르면, ISP는 카메라(예: 도 1의 카메라 모듈)의 이미지 센서에서 전송된 가공되지 않은 데이터(예: 로우 데 이터(raw data))를 보정하여 사용자가 보다 선호하는 형태의 이미지를 생성할 수 있다. 일 실시예에 따르면, ISP는 이미지의 부분적인 밝기를 조절하고, 디테일한 부분을 강조하는 것과 같은 후처리를 수행할 수 있다. 예를 들어, ISP는 카메라를 통해 획득하는 영상의 화질 튜닝 및 보정 과정을 자체적으로 거쳐 사용 자가 선호하는 결과물을 생성할 수 있다. 일 실시예에 따르면, ISP는 인공지능(AI, artificial intelligence) 기반 영상 처리 기술을 지원할 수 있 다. 일 실시예에 따르면, ISP는 NPU와 연동하여 촬영 중인 장면의 부분들을 인식 및/또는 분류하는 장면 세분화(scene segmentation)(예: 이미지 세그멘테이션(image segmentation)) 기술을 지원할 수 있다. 예 를 들어, ISP는 하늘, 수풀, 및/또는 피부와 같은 객체에 각기 다른 파라미터를 적용하여 처리하는 기능을 포함할 수 있다. 일 실시예에 따르면, ISP는 인공지능 기능을 통해 영상 촬영 시, 사람 얼굴을 감지하여 표시하거나 그 얼굴의 좌표와 정보를 이용하여 이미지의 밝기, 초점, 및/또는 색상을 조절할 수 있다. 일 실시예에 따라, CPU는 프로세서에 대응하는 기능을 수행할 수 있다. 일 실시예에 따르면, CPU는 사용자의 명령을 해독하고, 산술과 논리연산, 및/또는 데이터 처리를 수행할 수 있다. 예를 들어, CPU는 기억, 해석, 연산, 및 제어라는 기능을 수행할 수 있다. 일 실시예에 따르면, CPU는 전자 장치 의 전반적인 기능을 제어할 수 있다. 예를 들어, CPU는 운영체제(예: 도 1의 운영 체제) 위에서 전자 장치의 모든 소프트웨어(예: 도 1의 어플리케이션)를 실행하고, 하드웨어 장치를 제어할 수 있 다. 일 실시예에 따르면, CPU는 어플리케이션을 실행하고, 어플리케이션의 실행에 따라 요구되는 뉴럴 네 트워크 기반의 태스크들을 수행하도록 프로세서의 전반적인 동작을 제어할 수 있다. 일 실시예에 따르면, CPU는 데이터 처리 또는 연산의 적어도 일부로서, 명령 또는 데이터를 메모리의 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 메 모리의 비휘발성 메모리에 저장할 수 있다. 일 실시예에 따라, CPU는 하나의 프로세서 코어(single core)를 포함하거나, 복수의 프로세서 코어들 (multi-core)을 포함할 수 있다. 일 실시예에 따르면, CPU는 실행 가능한 인스트럭션들(예: CPU의 연 산을 수행할 수 있는 인스트럭션들)을 저장하고, 인스트럭션들을 실행 가능한 프로그래밍 가능(programmable)한 프로세서일 수 있다. 일 실시예에 따르면, CPU는 다중 도메인 상에서 동작할 수 있다. 일 실시예에 따르면, CPU는 노멀 월드(normal world)(예: 넌-시큐어 월드(non-secure world), 프레임워크 또는 비보안 환경)의 도메인과 시큐어 월드(secure world)(예: 보안 프레임워크 또는 보안 환경)의 다중 도메인 환경에서 동작할 수 있다. 일 실시예에서, 시큐어 월드의 도메인은 하나 또는 그 이상을 도메인들(예: 신뢰할 수 있는 OS(trusted OS), 트러스트존(Trustzone) 및/또는 가상화 프레임워크)을 포함할 수 있다. 일 실시예에 따르면, CPU는 다중 도메인 간에 공유될 수 있다. 일 실시예에 따르면, CPU는 CPU를 통해 메모 리 안전 버그를 탐지 가능한 MTE(memory tagging extension)를 이용하여, 메모리(예: 동적 메모리)의 공 유 메모리에 대한 메모리 안전 버그를 탐지할 수 있다. 일 실시예에 따라, 메모리 안전 버그를 탐지하는 상세 동작에 관하여 후술하는 도면들을 참조하여 설명된다. 일 실시예에 따라, NPU는 인공지능의 딥-러닝 알고리즘에 최적화된 처리를 수행할 수 있다. 일 실시예에 따르면, NPU는 딥-러닝 알고리즘 연산(예: 인공지능 연산)에 최적화된 프로세서로, 빅데이터(big data)를 사람의 신경망처럼 빠르고 효율적으로 처리할 수 있다. 예를 들어, NPU는 인공지능 연산에 주로 이용될 수 있다. 일 실시예에 따르면, NPU는 카메라를 통해 영상 촬영 시 배경 안의 사물, 환경, 및/또는 인물을 인 식하여 자동으로 초점을 조정하거나, 음식 사진 촬영 시 카메라 모듈의 촬영 모드를 음식 모드로 자동 전 환하거나, 및/또는 촬영된 결과물에서 불필요한 피사체만 지우는 처리를 수행할 수 있다. 일 실시예에 따르면, 전자 장치는 GPU, ISP, CPU, 및 NPU와 같은 모든 프로세서를 상호작용하여 통합 머신 러닝(machine learning) 처리를 지원할 수 있다. 일 실시예에 따라, DSP는 디지털 신호를 빠르게 처리하도록 도와주는 집적회로를 나타낼 수 있다. 일 실시 예에 따르면, DSP는 아날로그 신호를 디지털로 변경하여 고속 처리하는 기능을 수행할 수 있다. 일 실시예에 따라, 모뎀은 전자 장치에서 다양한 통신 기능을 사용할 수 있도록 할 수 있다. 예를 들 어, 모뎀은 기지국과 신호를 주고받으면서 전화 및 데이터 송수신과 같은 통신을 지원할 수 있다. 일 실시 예에 따르면, 모뎀은 LTE(long term evolution) 및 2G 내지 5G와 같은 통신 기술을 지원하는 통합 모뎀 (예: 셀룰러(cellular) 모뎀, LTE 모뎀, 5G 모뎀, 5G-Advanced 모뎀, 및 6G 모뎀)을 포함할 수 있다. 일 실시 예에 따르면, 모뎀은 인공지능 알고리즘을 적용한 인공지능 모뎀을 포함할 수 있다. 일 실시예에 따라, 커넥티비티는 IEEE 802.11에 기반한 무선 데이터 전송을 지원할 수 있다. 일 실시예에 따르면, 커넥티비티는 IEEE 802.11(예: Wi-Fi) 및/또는 802.15(예: Bluetooth, ZigBee, UWB)에 기반한 통 신 서비스를 지원할 수 있다. 예를 들어, 커넥티비티는 비면허 대역을 사용하여 실내와 같이 국지적인 지 역에서 불특정 다수를 대상으로 통신 서비스를 지원할 수 있다. 일 실시예에 따라, 시큐리티는 전자 장치에 저장된 데이터나 서비스 간의 독립적인 보안 실행 환경을 제공할 수 있다. 일 실시예에 따르면, 시큐리티는 전자 장치의 생체 인식, 모바일 신분증, 및/또는 페이먼트와 같은 서비스 제공 시, 사용자 인증을 하는 과정에서 소프트웨어 및 하드웨어 상의 보안을 통해 외부 로부터 해킹 발생을 방지할 수 있다. 예를 들어, 시큐리티는 전자 장치의 자체의 보안 강화를 위한 기기 보안(device security)과 전자 장치에서의 모바일 신분증, 페이먼트, 자동차 키와 같은 사용자 정보 를 기반으로 하는 보안 서비스(security service)에서 독립적인 보안 실행 환경을 제공할 수 있다. 일 실시예에 따르면, 프로세서(예: CPU)에서 수행하는 동작들은, 기록 매체(또는 컴퓨터 프로그램 프 로덕트(computer program product))로 구현될 수 있다. 예를 들어, 기록 매체는 프로세서에서 수행하는 다 양한 동작을 실행시키기 위한 프로그램을 기록한 비 일시적(non-transitory) 컴퓨터(computer)로 판독 가능한 기록 매체를 포함할 수 있다. 본 개시에서 설명되는 실시예들은 소프트웨어(software), 하드웨어(hardware) 또는 이들의 조합된 것을 이용하 여 컴퓨터 또는 이와 유사한 장치로 읽을 수 있는 기록 매체 내에서 구현될 수 있다. 하드웨어적인 구현에 의하 면, 일 실시예에서 설명되는 동작들은 ASICs(application specific integrated circuits), DSPs(digital signal processors), DSPDs(digital signal processing devices), PLDs(programmable logic devices), FPGAs(field programmable gate arrays), 프로세서(processors), 제어기(controllers), 마이크로 컨트롤러 (micro-controllers), 마이크로프로세서(microprocessors), 및/또는 기타 기능 수행을 위한 전기적인 유닛 (unit) 중 적어도 하나를 이용하여 구현될 수 있다. 일 실시예에서, 기록 매체(또는 컴퓨터 프로그램 프로덕트)는, 메모리에서 지정된 메모리 영역에 기반하여 다중 도메인 간의 통신을 위한 공유 메모리를 제공하는 동작, 및 하드웨어(430, 760)를 통해서 상기 다중 도메 인 간에 공유되는 상기 공유 메모리에 대한 메모리 안전 버그(memory safety bug)를 탐지하는 동작을 실행시키 기 위한 프로그램을 기록한 컴퓨터로 판독 가능한 기록 매체를 포함할 수 있다.일 실시예에서, 기록 매체(또는 컴퓨터 프로그램 프로덕트)는, 상기 다중 도메인의 제1 도메인으로부터 공유 메 모리 할당 요청을 수신하는 동작, 주소를 변환하기 위한 테이블을 관리하고, 상기 테이블에서 주소 변환을 통해 공유 메모리에 대한 태그를 할당하는 동작, 상기 할당된 태그에 관련된 태그 정보에 기반하여 상기 공유 메모리 에서 공유 메모리 태그를 설정하는 동작, 공유 메모리 할당 요청을 상기 다중 도메인의 제2 도메인에 전달하는 동작, 상기 제2 도메인으로부터 커밋 메시지(commit message)를 수신하는 동작, 상기 제1 도메인에서 할당 요청 한 메모리 영역과 상기 제2 도메인에서 할당 요청한 메모리 영역이 일치하는지 판단하는 동작, 할당 요청한 메 모리 영역이 일치하는 경우, 상기 공유 메모리에 대한 최종 등록을 완료하는 동작, 및 상기 제1 도메인과 상기 제2 도메인에서 동일한 공유 메모리 태그를 가지는 공유 메모리에 대한 등록 완료 응답을 상기 제1 도메인 및 상기 제2 도메인에 전달하는 동작을 실행시키기 위한 프로그램을 기록한 컴퓨터로 판독 가능한 기록 매체를 포 함할 수 있다. 도 3은 일 실시예에 따른 전자 장치에서 메모리 안전 버그 탐지에 이용되는 MTE 기술을 설명하는 도면이다. 일 실시예에 따라, MTE(memory tagging extension) 기술은 전자 장치에서 메모리(예: 동적 메모리) 의 메모리 보호 기능(또는 메모리 안전 문제 해결)을 지원하는 기술(또는 기능)로, 예를 들어, 메모리 안전 버 그를 하드웨어(예: 도 4의 하드웨어)(예: CPU, MMU(memory management unit))를 사용하여 효과적으 로 탐지할 수 있는 기술(또는 기능)일 수 있다. 예를 들어, MTE 기술은 메모리 영역(또는 메모리 공간)을 접근 하기 위해 사용되는 포인터(pointer)(또는 변수)가 할당 요청한 메모리 영역 외의 다른 메모리 영역에 접근하는 것을 방지하는 기술을 포함할 수 있다. 일 실시예에서, 포인터는 메모리의 임의의 주소 값(예: 참조하기 위한 변수의 주소)을 지정하는 변수(또는 함수)를 나타낼 수 있다. 예를 들어, 포인터는 프로그래밍 언어에서 다른 변수, 또는 그 변수의 메모리 영역 주 소(또는 메모리 공간 주소)를 가리키는 변수(또는 함수)를 의미할 수 있다. 일 실시예에 따라, 도 3은 MTE 기술의 기본적인 동작의 예를 나타낼 수 있다. 일 실시예에 따라, 도 3에서는 메 모리의 메모리 영역 중 16 바이트(byte)에 해당하는 메모리 영역이 할당되고, 해당 메모리 영역에 랜덤 (random)한 태그(tag)를 할당하여, 해당 메모리 영역에 대해서만 접근이 허용되는 예를 나타낼 수 있다. 도 3을 참조하면, 메모리(예: 도 2의 휘발성 메모리, 동적 메모리, RAM 또는 DRAM)의 메모리 영역(또 는 공간)에서 할당 요청한 영역에 대한 접근을 허용하기 위해, 포인터(pointer)(또는 함수 또는 변수) 주소 할 당 시 포인터의 상위 비트(bit)에 랜덤(random)한 태그(tag)(또는 태그 값)를 할당하고, 실제 메모리 주소에도 동일한 태그를 할당할 수 있다(S301). 일 실시예에서, 포인터 주소는 할당하는 메모리 영역(또는 공간)의 첫 주 소(또는 첫 주소 값)(예: 할당된 크기(예: 16바이트)의 시작 주소)와 크기(예: 16 바이트와 같은 할당하는 메모 리 영역의 크기)를 포함할 수 있다. 예를 들어, 포인터 주소는 {시작, 크기}로 나타낼 수 있고, 포인트 주소는 할당된 바이트의 첫 주소가 할당된 바이트의 공간을 의미할 수 있다. 일 실시예에서, 태그는 지정된 컬러 (color) 또는 지정된 패턴(pattern)과 같은 소프트웨어(예: 도 1의 프로그램)에서 인지할 수 있는 방법의 하나로 나타낼 수 있으며, 예를 들어, 지정된 컬러를 나타내는 컬러 값 또는 지정된 패턴을 나타내는 패턴 값과 같은 값으로 정의될 수 있다. 일 실시예에 따르면, 컬러 값은 다양한 컬러에 관련 컬러 코드에 기반하여 정의될 수 있다. 일 실시예에 따라, 태그는 지정된 컬러를 나타내는 “RRGGBB”와 같은 코드로 정의될 수 있다. 예를 들어, “red” 컬러로 태그를 나타내는 경우, red를 지시하는 코드 “FF0000”가 컬러 값으로 사용되고, “blue” 컬러로 태그를 나타내는 경 우, blue를 지시하는 코드 “0000FF”가 컬러 값으로 사용되고, “black” 컬러로 태그를 나타내는 경우, black 을 지시하는 코드 “000000”가 컬러 값으로 사용되고, “white” 컬러로 태그를 나타내는 경우, white를 지시 하는 코드 “FFFFFF”가 컬러 값으로 사용될 수 있다. 일 실시예에 따르면, 패턴 값은 패턴을 정의하는 값을 나타낼 수 있다. 예를 들어, 패턴 값은 특정 값의 형태가 아닌 값의 구조(예: 패턴)를 소프트웨어(예: 도 1의 프로그램)가 처리(또는 이해)할 수 있는 패턴의 범위 값(예: (x, y) 또는 (1, 2, ..., n)) 또는 패턴의 식별자(예: n, n은 자연수)의 형태를 나타낼 수 있다. 이후, 포인터를 이용하여 해당 포인터에 할당된 메모리 영역(예: 해당 포인터가 할당 받은 주소 값 영역)을 넘 어서서 접근(S302)이 발생하는 경우, 할당 요청한 메모리 영역을 벗어나는 메모리 영역의 태그가 이전에 할당된 태그와 다르기 때문에 할당 요청한 메모리 영역을 벗어나는 메모리 영역에 대한 접근은 허용되지 않을 수 있다. 예를 들어, 태그가 지정된 포인터를 사용하는 경우 포인터의 최상위 바이트를 잘못 사용하는 것을 보다 쉽게 감 지(예: 메모리 안전 버그 탐지)하여, 해당 접근을 거부(또는 거절)할 수 있다. 예를 들어, 메모리 안전 버그의탐지는 메모리 태깅(memory tagging)(예: MTE)에 의해 할당된 메모리 영역 이외의 메모리 영역에 대한 접근을 탐지하는 것을 포함할 수 있다. 또한, 할당된 메모리 영역에서 포인터가 해제되는 경우(S303), 해당 메모리 영역 또한 다른 태그(또는 태그 값)로 변경 설정될 수 있다. 따라서, 이후 동일한 포인터를 이용하여 해당 메모리 영역에 대한 접근은 거부될 수 있다(S304). 예를 들어, 포인터 해제 이후, 동일한 포인터를 이용한 접근은 이전에 할당 받은 주소 값의 메 모리 영역 내에서라도 태그 값이 다르게 설정되기 때문에 더 이상 허용되지 않을 수 있다. 일 실시예에 따르면, MTE 기술은 메모리 안전 문제를 해결하기 위한 기술로, 할당 요청한 메모리 영역을 태그하 여 동작할 수 있다. 하드웨어(예: 도 2의 CPU)는 어플리케이션(예: 넌-시큐어 월드의 어플리케이션 또는 시큐어 월드의 어플리케이션(예: trusted services))에서 메모리 접근이 발생할 때마다 올바른 태그가 사용되는 지 자동으로 확인할 수 있다. 도 4는 일 실시예에 따른 전자 장치에서 아키텍쳐(architecture)의 예를 도시하는 도면이다. 도 4를 참조하면, 일 실시예에 따른 전자 장치의 아키텍쳐(또는 프레임워크)는 하드웨어 계층(A)과 소프트 웨어 계층(B)으로 구분할 수 있다. 일 실시예에서, 하드웨어 계층(A)은 전자 장치가 포함하는 적어도 하나의 하드웨어를 포함할 수 있다. 일 실시예에 따라, 하드웨어는 프로세서(예: 도 2의 CPU) 및/또는 MMU(미도시)를 포함할 수 있다. 일 실시예에 따르면, 하드웨어(예: 도 2의 CPU)는 포인터 할당/해제에 관련된 기능들(예: load, store, add, sub, jump, halt, access, mov(move), push, pop)의 연산을 수행할 수 있는 인스트럭션들 (예: 실행 가능한 인스트럭션들 또는 CPU 인스트럭션들)을 저장할 수 있다. 일 실시예에 따르면, 하드웨어 (예: 도 2의 CPU는 메모리 영역을 접근하는 인스트럭션마다 메모리 영역 및 포인터에서 태그를 읽고 비교할 수 있다. 예를 들어, 하드웨어(예: 도 2의 CPU)는 어플리케이션(예: 넌-시큐어 월드의 어플리 케이션 또는 시큐어 월드의 어플리케이션(예: trusted services))에서 메모리 접근이 발생할 때마다 올바른 태 그가 사용되는지 확인할 수 있다. 일 실시예에서, 소프트웨어 계층(B)은 포인터를 할당하거나 해제할 때 그에 맞추어 태그를 할당하거나, 해제하 는 인스트럭션을 호출하는 소프트웨어(예: 주로 메모리 관리 및 할당자(예: memory allocator)를 통해 구현될 수 있다. 일 실시예에 따르면, 소프트웨어 계층(B)은 EL0(exception level 0) 계층, EL1 계층, EL2 계층, 및 EL3 계층을 포함할 수 있다. 일 실시예에 따라, EL0 계층은 어플리케이션 계층을 포함 할 수 있다. 일 실시예에 따라, EL1 계층은 운영체제 계층을 포함할 수 있다. 일 실시예에 따라, EL2 계층 은 가상화 계층(또는 모드 계층)을 포함할 수 있다. 일 실시예에 따라, EL3 계층은 모니터 계층을 포 함할 수 있다. 일 실시예에 따르면, EL0 계층과 EL1 계층은 신뢰할 수 있는 환경(TEE, trusted execution environment)이 구분될 수 있다. 예를 들어, EL0 계층과 EL1 계층은 넌-시큐어 월드(non-secure (NS) world)(또는 비보안 환경, 노멀 월드(normal world), 또는 프레임워크)와 시큐어 월드(secure (S) world)(또는 보안 환경, 보안 프레임워크)와 같이 2개의 월드(world)로 구분될 수 있다. 예를 들어, 2개의 월드는 넌-시큐어 월드의 도메인과 시큐어 월드의 하나 또는 그 이상의 도메인들과 같은 다중 도메인 환경을 제공할 수 있다. 일 실시예에서, EL0 계층은 어플리케이션을 포함할 수 있다. 일 실시예에서, 넌-시큐어 월드에서는 일반적인 어플리케이션(예: applications)이 동작(또는 실행)하고, 시큐어 월드에서는 금융 어플리케 이션이나 정보 보안이 필요한 서비스와 같은 신뢰할 수 있는 서비스(또는 어플리케이션)(예: trusted services)가 동작(또는 실행)할 수 있다. 일 실시예에서, EL1 계층은 운영체제를 포함할 수 있다. 예를 들어, 어플리케이션(또는 서비스)를 실행하 기 위해서는 운영체제가 필요할 수 있다. 일 실시예에서, 넌-시큐어 월드에서는 일반적인 운영체제(예: operating system)(예: android, linux kernel)이 동작하고, 시큐어 월드는 신뢰할 수 있는 운영체 제(예: secure OS)(예: trusted OS, trustzone, virtual machine, secure element)이 동작할 수 있다. 일 실시예에서, EL2 계층은 EL1 계층의 운영체제 및/또는 어플리케이션(또는 서비스)를 실행하기 위 해 필요한 모드(mode)를 지원할 수 있다. 예를 들어, EL2 계층은 다수의 운영체제(또는 다중 도메 인)를 동시에 실행하기 위한 논리적 플랫폼인 하이퍼바이저 모드(hypervisor mode)(예: 가상화 머신 모니터 (virtual machine monitor) 또는 가상화 머신 매니저(virtual machine manager))를 지원할 수 있다. 일 실시예에 따르면, EL2 계층은 다중 도메인 간에 공유 메모리의 메모리 안전 버그를 탐지하는 것에 관련된 프리빌 리지드 모드(privileged mode)를 지원할 수 있다. 일 실시예에서, 하이퍼바이저 모드는 넌-시큐어 월드 및 /또는 시큐어 월드에서 지원될 수 있고, 프리빌리지드 모드는 시큐어 월드에서 지원될 수 있다. 일 실시예에서, 하이퍼바이저 모드에서는 사용할 수 있는 명령은 제약적일 수 있으나, 프리빌리지드 모드는 사용할 수 있는 명령은 제약없이 하드웨어의 모든 명령이 가능할 수 있다. 일 실시예에 따르면, 프리빌리지드 모 드를 지원하기 위한 구성의 예를 후술된다. 일 실시예에서, EL3 계층은 정보를 보호하기 위한 클래스(또는 게이트)인 모니터(예: monitor)를 포 함할 수 있다. 일 실시예에 따르면, EL3 계층의 모니터는 넌-시큐어 월드와 시큐어 월드 간의 스위칭(switching)을 제어할 수 있다. 도 4에 예시한 바와 같이, 하드웨어 계층(A)의 하드웨어(예: CPU, MMU)는 넌-시큐어 월드와 시 큐어 월드에 따른 다중 도메인 간에 공유될 수 있고, 소프트웨어 계층(B)의 소프트웨어는 EL0 계층과 EL1 계층에서 넌-시큐어 월드와 시큐어 월드로 각각 분리될 수 있다. 최근 전자 장치 내 보안 환경이 다변화되면서, 다중 보안 아키텍쳐/프레임워크를 지원하고 있다. 예를 들 어, 기존 운영체제 기반 모바일 환경에 더하여, 보안 프레임워크로 트러스트존과 가상화 프레임워크가 추가되면 서 전자 장치 내 다중 도메인(또는 프레임워크)을 지원할 수 있다. 이러한 환경을 다중 도메인 환경이라고 정의할 수 있다. 이하에서는, 다중 도메인 환경에서 MTE 기술에 대하여 설명된다. 도 5 및 도 6은 일 실시예에 따른 전자 장치에서 지원하는 다중 도메인 환경에서 메모리 안전 버그 탐지에 대한 동작 예를 도시하는 도면들이다. 일 실시예에 따르면, 도 5 및 도 6에서는 제1 도메인과 제2 도메인으로 구분되는 다중 도메인 환경에 서, MTE 기술이 가지는 보안 취약점에 대한 예를 도시할 수 있다. 도 5를 참조하면, 다중 도메인 환경에서 MTE 구현은, 제1 도메인(예: Domain-1)은 제1 도메인에 속하 는 메모리 영역(예: domain-1 memory)을 보호(예: protected by domain-1 MTE)하고, 제2 도메인 (예: domain-2)은 제2 도메인에 속하는 메모리 영역(예: domain-2 memory)을 보호(예: protected by domain-2 MTE)하게 되며, 이는 하드웨어(예: MMU)를 통해 관리될 수 있다. 또한, 제1 도메인과 제2 도메인 간에는 공유 메모리(예: shared memory)라고 하는 전자 장치 내 메 모리의 일부 영역을 지정하여 다중 도메인(예: 제1 도메인과 제2 도메인) 간 통신 목적으로 사 용할 수 있다. 일 실시예에서, 공유 메모리는 통신을 요청한 도메인(예: 제1 도메인 또는 제2 도메인)에 소속 될 수 있다. 일 실시예에서, 도 5에서는 제1 도메인에 의해 통신이 요청되고, 공유 메모리가 제1 도 메인에 소속된 예를 나타낼 수 있다. 도 5의 예시에 따르면, 공유 메모리는 통신을 요청한 제1 도메인에 할당되어 제1 도메인의 태그 로 보호될 수 있다. 하지만, 제2 도메인으로 전달한 부분에 대해서는 정당성(sanity) 및 권한(permission) 인가가 미비한 경우, 제2 도메인에서 요청하는 메모리 연산에 대해서는 메모리 안전 버그를 탐지하지 못할 수 있다. 예를 들어, 공유 메모리의 경우, 제1 도메인의 태그로 지정되며, 제2 도메인에서 요청 하는 포인터 제어가 정상적으로 수행되지 않을 수 있다. 예를 들어, 제2 도메인에서는 공유 메모리가 할당된 메모리 영역이 아니기 때문에, 제2 도메인에서 요청하는 포인터에 공유 메모리에 대한 태그 (또는 태그 정보)가 없을 수 있다. 따라서, 제2 도메인에서 요청하는 포인터에 태그 정보가 없으므로 공유 메모리는 MTE 기술에 의해 보호되지 않을 수 있다. 예를 들어, 제2 도메인에 소속된 하드웨어 (예: MMU)는 메모리 안전 버그를 탐지하지 못할 수 있다. 이의 예가 도 6에 예시된다. 도 6에 예시한 바와 같이, 제1 도메인(예: domain-1)에서 할당된 메모리 연산(예: 태그 태깅 (tagging))은, 제1 도메인의 MTE로 인해 정상 메모리 접근(S601)만 허용되고, 허용된 메모리 연산이 아닌 메모리 안전 버그(S603)는 제1 도메인의 MTE에 의해 탐지가 가능할 수 있다. 마찬가지로, 제2 도메인 (예: domain-2)에서 할당된 메모리 연산(예: 태그(예: 노란색) 태깅)은, 제2 도메인의 MTE로 인해 정상 메모리 접근(S605)만 허용하고, 허용된 메모리 연산이 아닌 메모리 안전 버그(S607)는 제2 도메인 의 MTE에 의해 탐지 가능할 수 있다. 일 실시예에 따르면, 도 6에 예시한 바와 같이, 제1 도메인에서 공유 메모리를 통해 제2 도메인(52 0)의 운영체제(예: secure OS, trusted OS)에 등록(S609)되는 경우에, 제2 도메인에서는 제1 도메인에서 할당된 메모리 연산(예: 태그)은 태깅되지 않을 수 있다(예: 해칭 영역). 예를 들어, 공유 메 모리는 제2 도메인에 소속된 하드웨어(예: MMU)에 단순히 매핑되는 형태일 수 있다. 이러한 경 우, 공유 메모리가 제1 도메인에 의해서 제어되지 못하고, 제2 도메인에 메모리 할당 받은 크기 보다 큰 크기(예: 해칭 영역)로 등록될 수 있고, 제2 도메인에서 매핑된 공유 메모리를 통해 접 근하는 메모리 안전 버그(S611)는 보호되지 않을 수 있다. 예를 들어, 제2 도메인에는 태깅된 메모리 영역 이 없고, 이러한 공유 메모리에 대해서는 제1 도메인 및 제2 도메인의 MTE에 의해 보호하지 못 할 수 있다. 따라서, 이러한 경우, 악의적인 메모리 안전 버그(S611)에 따른 메모리 연산(예: 태그(예: 빨 간색) 태깅)에 의해, 오류가 제2 도메인에서 제1 도메인으로 전파(S613)되어, 제1 도메인의 메 모리(예: 도 5의 제1 도메인에 속하는 메모리 영역)는 침해당하고, 메모리 안전 버그에 노출되어 악 용(exploit)될 수 있다. 이상에서와 같이, 공유 메모리 등록은, 다중 도메인 간 제어하기 어려우며, 프로그래머의 실수 혹은 공격 코드에 의해 공유 메모리 등록 시 실제 도메인(예: 제1 도메인 또는 제2 도메인)에 허용된 크기 보다 더 큰 공유 메모리(예: 해칭 영역)로 등록 할 수 있고, 다른 도메인(예: 제2 도메인 또는 제1 도메인)은 이를 구분하지 못하는 경우가 발생할 수 있다. 이러한 메모리 안전 버그(예: 공격) 미탐지 상황 으로 인해, 제2 도메인에서 실행하는 서비스에서의 사용자의 입력(예: 식별 정보, 금융 정보, 또는 개인 정보)에 대한 응답이 제1 도메인으로 유출될 수 있다. 예를 들어, 공유 메모리를 통해서 식별 정보 (예: 아이디)가 입력되고, 그 다음 연속적인 메모리 영역을 통하여 제2 도메인에서 비밀 정보(예: 패스워드, 금 융 정보 또는 개인 정보)를 연산하는 상황에서 비밀 정보가 공유 메모리로 메모리 안전 버그를 통해 전파 되어, 제1 도메인에서 사용자 비밀 정보가 노출될 수 있다. 일 실시예에 따라, 상기에서는 넌-시큐어 월드의 도메인과 시큐어 월드의 도메인의 2개의 다중 도메인에 대한 예를 설명하지만, 3개 이상의 다중 도메인 환경을 포함할 수 있다. 예를 들어, 시큐어 월드의 도메인은 하나 또 는 그 이상의 복수의 도메인들을 포함할 수 있다. 예를 들어, 도메인이 3개 이상인 경우, 동일 메모리 영역에 대해서 제1 도메인에서 제2 도메인 및 제3 도메인으로 메모리 연산을 등록하게 된다면, 상기 기술한 보안 취약 점에 의해 제2 도메인 및 제3 도메인 간의 상호 메모리 안전 또한 보장받지 못할 수 있다. 이러한 경우, 제2 도 메인에 의해서 제3 도메인의 메모리 안전이 보장되지 못하는 것과 같은 다중 오류 전파 상황이 발생할 수 있다. 본 개시의 일 실시예에 따르면, 전자 장치 내 도메인 환경이 다변화되는 환경(예: 다중 도메인 환경)에서 메모리 안전 버그를 탐지할 수 있도록 MTE 기술을 이용한 다중 도메인 간 메모리 아키텍쳐 구성 및 소프트웨어 구현 방법을 제공한다. 도 7은 본 개시의 일 실시예에 따른 전자 장치에서 다중 도메인 간 메모리 안전 버그를 지원하는 방법의 예를 도시하는 도면이다. 도 8은 본 개시의 일 실시예에 따른 전자 장치에서 다중 도메인 간 메모리 안전 버그를 지원하기 위한 구성의 예를 도시하는 도면이다. 도 7을 참조하면, 도 7은 넌-시큐어 월드(A)의 제1 도메인(예: linux kernel)과 시큐어 월드(B)의 제2 도 메인(예: trustzone), 제3 도메인(예: virtual machine) 및 제4 도메인(예: secure element)와 같이 다중 도메인을 지원하는 전자 장치에서, 다중 도메인 간 메모리 안전 버그 탐지를 위한 EL2 계층(예: 도 4의 EL2 계층)을 구성하는 예를 나타낼 수 있다. 본 개시의 실시예에 따른 다중 도메인 환경은 도 7에서 예시한 다중 도메인 환경에 제한되지 않으며, 도 7에 예 시된 다중 도메인 환경은 본 개시의 이해를 돕기 위해 특정 예를 제시한 것을 뿐, 본 개시의 범위를 한정하고자 하는 것은 아니다. 예를 들어, 다중 도메인 환경은 언급되지 않은 다른 다중 도메인 환경을 포함할 수 있다. 일 실시예에 따르면, 넌-시큐어 월드(A)에 복수의 도메인들이 존재하고 넌-시큐어 월드(A) 내의 복수의 도메인들 간 메모리 안전 버그 탐지, 시큐어 월드(B) 내의 복수의 도메인들 간 메모리 안전 버그 탐지, 및/또는 넌-시큐 어 월드(A)의 도메인과 시큐어 월드(B)의 도메인 간 메모리 안전 버그 탐지와 같이, 서로 다른 복수의 도메인들 을 기반으로 하는 다양한 다중 도메인 환경에서 구현될 수 있으며, 전술한 예에 한정되지 않는다. 도 7에 예시한 바와 같이, EL1 계층에서 제1 도메인, 제2 도메인, 제3 도메인, 및 제4 도메인 과 같은 다중 도메인 환경이 구성되고, EL2 계층에서 다중 도메인(710, 720, 730, 740)에 관련된 운영체제 및/또는 어플리케이션(또는 서비스)을 실행하기 위해 필요한 복수의 모드들을 지원할 수 있다. 예를 들어, EL2 계층은 다수의 운영체제(또는 다중 도메인)를 동시에 실행하기 위한 논리적 플랫폼인 하이퍼바이저 모드와다중 도메인 간에 공유 메모리의 메모리 안전 버그를 탐지하는 것에 관련된 프리빌리지드 모드를 지원할 수 있 다. 일 실시예에서, 하이퍼바이저 모드는 넌-시큐어 월드(A) 및/또는 시큐어 월드(B)에서 지원될 수 있고, 프리 빌리지드 모드는 시큐어 월드(B)에서 지원될 수 있다. 일 실시예에서, 하이퍼바이저 모드에서는 사용할 수 있는 명령은 제약적일 수 있으나, 프리빌리지드 모드는 사 용할 수 있는 명령은 제약없이 하드웨어의 모든 명령이 가능할 수 있다. 예를 들어, 전자 장치는 EL2 계층에서 프리빌리지드 모드 동작에 기반하여 공유 메모리의 제한된 동작을 수행할 수 있다. 일 실시예에 따르 면, 전자 장치는 프리빌리지드 모드 지원을 위한 제어 모듈(또는 컨트롤러)(예: 도 8의 제어 모듈)을 포함할 수 있다. 이의 예가 도 8에 도시된다. 도 8을 참조하면, EL2 계층(예: 모드)은 다중 도메인 간에 공유 메모리의 메모리 안전 버그를 탐지 가능한 프리빌리지드 모드를 지원하기 위한 제어 모듈을 포함할 수 있다. 일 실시예에 따르면, 제어 모듈은 다중 도메인 간에 침범되는 메모리 안전 버그를 모니터링 및 탐지할 수 있는 컨트롤러(controller)일 수 있다. 예를 들어, 제어 모듈은 공유 메모리를 요청, 등록, 관리, 및/또는 거부하는 동작을 수행할 수 있다. 일 실시예에 따르면, 제어 모듈(또는 컨트롤러)은 인터페이스(interface)(예: memory API interface), 관리 모듈(또는 매니저(manager)) 및 태그 처리 모듈(또는 태그 에이전트(tag agent)) (예: shared memory tag)을 포함할 수 있다. 일 실시예에서, 인터페이스는 메모리 요청, 권한 및 태그 정 보를 체크하는 구성일 수 있다. 일 실시예에서, 관리 모듈은 인터페이스를 통해 전달된 요청을 처리 하는 매니저일 수 있다. 일 실시예에서, 태그 처리 모듈은 공유 메모리에 대해 메모리 안전 버그를 탐지하 는 태그 에이전트일 수 있다. 일 실시예에 따라, 제어 모듈을 이용하여 공유 메모리에 대한 메모리 안전 버그를 탐지하는 동작과 관련하여 후술하는 도면들을 참조하여 설명된다. 도 7 및 도 8을 참조하면, 일 실시예에 따른 전자 장치는 전술한 도 5를 참조한 설명 부분에서 설명한 바 와 같이, 넌-시큐어 월드(A)의 제1 도메인에 속하는 메모리 영역을 보호하고, 시큐어 월드(B)의 제2 도메 인, 제3 도메인 및 제4 도메인에 속하는 메모리 영역을 보호할 수 있다. 일 실시예에 따르면, 전자 장치는 다중 도메인의 각각에 속하는 메모리 영역에 대한 메모리 관리 및 보호(예: 엘리먼트 701)할 수 있다. 예를 들어, 각각의 도메인들(710, 720, 730, 740)은 하드웨어(예: MMU)에 직접 인스트럭션(예: CPU instruction)을 전송하면서 해당 도메인의 메모리 안전 버그를 모니터링 및 탐지할 수 있다. 예를 들어, 엘 리먼트 701에 따른 동작은 각 도메인에서 MTE를 이용하여 메모리 안전 버그를 탐지하는 동작을 나타낼 수 있다. 일 실시예에 따르면, 전자 장치는 엘리먼트 702로 나타낸 바와 같이, 각각의 도메인(710, 720, 730, 740) 에서 관리되지 못하는 공유 메모리에 대해서 EL2 계층의 제어 모듈에서 관리하고, 다중 도메인 간 침범되 는 공유 메모리의 메모리 안전 버그를 모니터링 및 탐지할 수 있도록 구성할 수 있다. 예를 들어, 엘리먼트 702 에 따른 동작은 다중 도메인 간에 MTE를 이용하여 메모리 안전 버그를 탐지하는 동작을 나타낼 수 있다. 일 실시예에 따르면, 전자 장치는 엘리먼트 702로 나타낸 바와 같이, 제어 모듈을 통해 공유 메모리 를 요청, 등록, 관리, 및 거부할 수 있는 동작을 포함할 수 있다. 예를 들어, 전자 장치는 EL1 계층(예: 운영체제 계층)에 각 도메인(710, 720, 730, 740)에 대응하는 메모리 관리/할당자가 구성될 수 있다. 예를 들어, 전자 장치는 EL2 계층(예: 모드 계층)에 제어 모듈이 구현될 수 있다. 도 9 및 도 10은 본 개시의 일 실시예에 따른 전자 장치에서 공유 메모리에 대한 메모리 안전 버그를 탐지하는 동작 예를 도시하는 도면들이다. 일 실시예에 따라, 도 9에서는 일 실시예에 따른 전자 장치에서 공유 메모리에 대한 요청, 등록, 및 관리 하는 동작의 예를 나타낼 수 있다. 이하 실시예에서 각 동작들은 순차적으로 수행될 수도 있으나, 반드시 순차적으로 수행되는 것은 아니다. 예를 들어, 각 동작들의 순서가 변경될 수도 있으며, 적어도 두 동작들이 병렬적으로 수행될 수도 있다. 일 실시예에 따라, 도 9에서는 제1 도메인에서 제2 도메인으로 보안 서비스(예: 생체 인식, 모바일 신분증, 또는 페이먼트와 같은 사용자 인증 서비스)를 요청하는 경우의 동작 예를 나타낼 수 있다. 일 실시예에 따라, 제1 도메인에서 제2 도메인으로 보안 서비스를 요청하는 것과 같이 다중 도메인 간의 명령은, 예를 들어, 공유 메모리로 전달될 수 있다. 일 실시예에 따르면, 다중 도메인 간에 보안 서비스를 사용하는 경 우, 보안 서비스를 요청하는 제1 도메인에서 공유 메모리로 사용할 메모리 영역을 할당 받고, 제2 도메인 으로 등록할 수 있다. 예를 들어, 본 개시의 일 실시예에 따르면, 전자 장치는 다중 도메인 간에 관 련 태그 등록을 통해, 공유 메모리에 대한 메모리 안전 버그를 탐지할 수 있다. 종래에서는 제1 도메인에대해서만 태그가 등록될 수 있고, 제2 도메인에서는 태그 등록이 불가하여 메모리 안전 버그를 탐지할 수 없다. 도 9를 참조하면, 동작 901에서, 제1 도메인은 공유 메모리 할당 요청을 제어 모듈(예: 인터페이스 )로 전달할 수 있다. 일 실시예에 따르면, 제1 도메인은 EL2 계층의 프리빌리지드 모드 지원을 위한 제어 모듈로 서비스 실행에 따른 공유 메모리 할당 요청을 전달할 수 있다. 일 실시예에 따르면, 제1 도메 인은 제1 도메인에 속하는 메모리 영역에 대한 메모리 정보(예: {시작, 크기}를 지시하는 정보)를 제 어 모듈에 전달하여 공유 메모리 할당을 요청할 수 있다. 동작 903에서, 제어 모듈(예: 인터페이스, 관리 모듈)은, 제1 도메인으로부터 수신된 공유 메모리 할당 요청에 응답하여, 페이지 테이블(page table) 관리 및 태그 할당을 수행할 수 있다. 일 실시예에서, 페이지 테이블은 주소를 변환하기 위한 시스템을 나타낼 수 있다. 예를 들어, 페이지 테이블은, 프 로세스(process)(또는 태스크(task))의 페이지 정보를 저장하는 테이블을 나타낼 수 있다. 일 실시예에 따르면, 전자 장치의 모든 프로그램마다 페이지 테이블이 존재할 수 있고, CPU는 페이지 테이블의 시작 주소로부터 테이블의 정보를 읽어올 수 있다. 예를 들어, 프로세스의 메모리를 페이지 단위로 구 분하고, 실제 물리적(physical) 메모리도 페이지 단위로 구분할 수 있으며, 구분된 물리적 메모리를 페이지 또 는 페이지 프레임(page frame)이라고 한다. 예를 들어, 가상 페이지 번호(VPN, virtual page number)를 물리적 프레임 넘버(PFN, physical frame number)로 매핑할 수 있고, 이러한 매핑을 위한 테이블을 페이지 테이블이라 할 수 있다. 일 실시예에 따르면, 각각의 프로세스는 자신만의 페이지 테이블을 독립적으로 가질 수 있다. 일 실시예에 따르면, 페이지 테이블은 운영체제로부터 관리되고, 하드웨어(예: MMU)가 접근하여 읽을 수 있다. 일 실시예에 따른 페이지 테이블과 관련하여 후술된다. 일 실시예에 따르면, 제어 모듈은 인터페이스를 통해 제1 도메인의 공유 메모리 할당 요청을 수 신할 수 있다. 일 실시예에 따르면, 인터페이스는 공유 메모리 할당 요청을 관리 모듈로 전달하여 페 이지 테이블을 관리(예: 생성)하도록 할 수 있다. 일 실시예에 따르면, 제어 모듈의 관리 모듈은 페 이지 테이블에서 주소 변환(예: 페이지 워크(page-walk) 수정)을 통해 공유 메모리의 지정된 메모리 영역에 태 그를 할당할 수 있다. 일 실시예에 따르면, 관리 모듈은 공유 메모리의 태그를 할당하고, 인터페이스(81 0)에 반환할 수 있다. 동작 905에서, 제어 모듈의 인터페이스는 관리 모듈에 의해 공유 메모리의 태그가 할당되는 것 에 응답하여, 등록 요청을 제어 모듈의 태그 처리 모듈에 전달할 수 있다. 일 실시예에 따르면, 인터 페이스는 메모리 정보(예: {시작, 크기}를 지시하는 정보)와 태그 정보를 태그 처리 모듈에 전달하고 등록을 요청할 수 있다. 동작 907에서, 제어 모듈의 태그 처리 모듈(또는 태그 에이전트)은 인터페이스로부터 등록 요청 을 수신하고, 등록 요청과 함께 수신된 메모리 정보 및 태그 정보에 기반하여 페이지 테이블을 구성(예: {시작, 크기, 태그 정보}로 구성)하여 페이지 테이블에 공유 메모리를 등록 및 관리할 수 있다. 예를 들어, 태그 처리 모듈은 메모리 정보 및 태그 정보에 기반하여 공유 메모리에서 제1 도메인의 메모리 영역에 대한 태그를 설정할 수 있다. 동작 909에서, 제어 모듈의 태그 처리 모듈은 페이지 테이블 등록을 완료하는 것에 응답하여, 등록 완료 응답을 인터페이스에 전달할 수 있다. 동작 911에서, 제어 모듈의 인터페이스는 공유 메모리 등록이 완료되는 등록 완료 응답을 수신하고, 공유 메모리 할당 요청을 제2 도메인으로 전달할 수 있다. 동작 913에서, 제2 도메인은 제어 모듈(예: 인터페이스로부터 공유 메모리 할당 요청을 수신하 고, 제2 도메인에 속하는 메모리 영역에 공유 메모리 매핑을 위해 제어 모듈(예: 인터페이스)에 커밋 메시지(commit message)를 전달할 수 있다. 일 실시예에 따르면, 제2 도메인은 커밋 메시지에 제2 도 메인(예: 메모리 관리/할당자)에서 할당된 메모리 정보(예: {시작, 크기} 정보)를 포함하여 인터페이스 에 전달할 수 있다. 동작 915에서, 제어 모듈의 인터페이스는 제2 도메인으로부터 커밋 메시지를 수신하고, 동작 901에서 제1 도메인이 할당 요청한 메모리 영역과 동작 913에서 제2 도메인이 할당 요청한 메모리 영 역이 일치하는지 여부를 판단할 수 있다. 예를 들어, 인터페이스는 제1 도메인에 의해 요청되고 태그 처리 모듈에 등록된 메모리 정보(예: 제1 도메인이 할당 요청한 {시작, 크기} 정보)와 제2 도메인에 의해 요청되는 메모리 정보(예: 제2 도메인이 할당 요청한 {시작, 크기} 정보)가 일치하는지 여부 를 판단할 수 있다. 동작 917에서, 제어 모듈(예: 인터페이스, 관리 모듈)은 최종 등록을 완료할 수 있다. 일 실시 예에 따르면, 인터페이스는 제1 도메인과 제2 도메인에서 할당 요청한 메모리 영역이 일치하는 경우, 관리 모듈에 등록 요청을 전달하고, 관리 모듈은 할당 요청한 메모리 영역에 대한 최종 등록을 완료할 수 있다. 동작 919에서, 제어 모듈의 인터페이스는 최종 등록을 완료하는 것에 응답하여, 태그 등록 요청을 제 2 도메인에 전달하고, 제2 도메인에서는 제1 도메인에서 등록한 태그와 동일한 태그를 가진 공 유 메모리를 등록할 수 있다. 동작 921에서, 제어 모듈의 인터페이스는 최종 등록을 완료하는 것에 응답하여, 등록 완료 응답을 제 1 도메인에 전달하고, 제1 도메인에서는 할당 요청한 공유 메모리 등록이 완료되었다는 응답을 수신 할 수 있다. 도 9에 예시한 바와 같이, 전자 장치는 제1 도메인과 제2 도메인에서 동일한 태그를 가지는 메 모리 영역을 제어 모듈을 통해 등록 및 관리할 수 있고, 등록 완료에 대한 응답을 제1 도메인 및 제2 도메인에 전달할 수 있다. 이를 통해, 제1 도메인과 제2 도메인에서 동일한 태그를 가지는 메모 리 영역이 등록되고, 공유 메모리 연산 시 제1 도메인과 제2 도메인 모두에 대해 메모리 안전 버그를 탐지할 수 있고, 메모리 안전 버그 탐지 시 종래와 달리 해당 접근을 허용하지 않을 수 있다. 이의 예가 도 10 에 예시된다. 도 10에 예시한 바와 같이, 제1 도메인(예: domain-1)에서 할당 요청한 메모리 영역(예: 공유 메모리 )은 제2 도메인의 EL1 계층(예: secure OS)에 등록을 위해, EL2 계층의 제어 모듈(예: 태그 처리 모듈)에 먼저 등록 요청될 수 있다(S1001). EL2 계층에서는 제어 모듈(예: 태그 처리 모듈 )을 통해 제1 도메인에 의해 할당 요청한 메모리 영역에 대응하여 태그를 기록하고, 이와 동일하게 제2 도메인의 EL1 계층(예: secure OS)에 공유 메모리로 등록할 수 있다(S1002). 예를 들어, 제어 모듈은 제2 도메인에 공유 메모리 매핑(shared memory mapping)을 수행할 수 있다. 일 실시예에 따르면, 제2 도메인의 EL1 계층(예: secure OS)에서는 도 6에 예시한 바와 같은 동작과는 달 리, 제2 도메인에서는 제1 도메인의 태그 정보와 동일한 태그 정보에 기반하여 메모리 할당 및 관 리할 수 있다. 이를 통해, 제2 도메인에서 공유 메모리를 통해 접근하는 메모리 안전 버그에 대해 서도 보호할 수 있다. 따라서, 제1 도메인에서의 메모리 안전 버그(S1003) 및 제2 도메인에서의 메모 리 안전 버그(S1004)를 탐지할 수 있다. 일 실시예에 따라, EL2 계층의 제어 모듈(예: 태그 처리 모듈)에 의해 관리되는 공유 메모리 태그(예: 태그)의 예가 <표 1>에 예시된다. 표 1 Domain ID Memory address Memory size Memory tag ID 1 0xffff_ffff_0000_0000 0x100 0xaa ID 3 0xffff_ffff_0000_1000 0x100 0xab ID 2 0xffff_ffff_0000_2000 0x400 0xac ID 4 0xffff_ffff_0000_3000 0x100 0xba 일 실시예에 따르면, 도 9 및 도 10을 참조한 설명 부분에서 설명한 바와 같이, 시큐어 월드의 도메인(예: 제2 도메인)의 EL2 계층에서는 제어 모듈을 포함할 수 있다. 일 실시예에 따르면, 제어 모듈(또는 컨트롤 러)은 인터페이스, 관리 모듈(또는 매니저) 및 태그 처리 모듈(또는 태그 에이전트)을 포함할 수 있다. 일 실시예에 따르면, 인터페이스는 시큐어 월드의 다른 도메인 또는 넌-시큐어 월드의 다른 도메 인(예: 제1 도메인)으로부터 전달되는 공유 메모리 요청 및 권한 체크를 수행할 수 있다. 일 실시예에 따르면, 전자 장치는 인터페이스를 통해 전달받은 요청을 관리 모듈을 통해 메모리 주소 변환(예: page- walk) 절차를 수행하고, 최종적으로 태그 처리 모듈을 통해 공유 메모리 태그(shared memory tag)를 등록 할 수 있다.일 실시예에 따르면, 태그 처리 모듈에서는, <표 1>에 예시한 바와 같이, 요청 받은 도메인의 도메인 식별 번호(예: domain ID)와, 공유 메모리 주소(예: memory address), 공유 메모리 크기(예: memory size) 및 해당 공유 메모리에 할당한 태그(예: 랜덤 태그 값(예: 16bit))를 포함하여 공유 메모리 태그를 구성할 수 있다. 일 실시예에서, 태그는 지정된 컬러를 나타내는 컬러 값 또는 지정된 패턴을 나타내는 패턴 값과 같은 소프트웨어 (예: 도 1의 프로그램)에서 인지할 수 있는 지정된 값으로 정의될 수 있다. 일 실시예에 따르면, 컬러 값은 다양한 컬러에 관련 컬러 코드에 기반하여 정의될 수 있다. 일 실시예에 따라, 태그는 지정된 컬러를 나타내는 “RRGGBB”와 같은 코드로 정의될 수 있다. 예를 들어, “red” 컬러로 태그를 나타내는 경우, red를 지시하는 코드 “FF0000”가 컬러 값으로 사용되고, “blue” 컬러로 태그를 나타내는 경 우, blue를 지시하는 코드 “0000FF”가 컬러 값으로 사용되고, “black” 컬러로 태그를 나타내는 경우, black 을 지시하는 코드 “000000”가 컬러 값으로 사용되고, “white” 컬러로 태그를 나타내는 경우, white를 지시 하는 코드 “FFFFFF”가 컬러 값으로 사용될 수 있다. 일 실시예에 따르면, 패턴 값은 패턴을 정의하는 값을 나타낼 수 있다. 예를 들어, 패턴 값은 특정 값의 형태가 아닌 값의 구조(예: 패턴)를 소프트웨어(예: 도 1의 프로그램)가 처리(또는 이해)할 수 있는 패턴의 범위 값 또는 패턴의 식별자의 형태를 나타낼 수 있다. 일 실시예에 따르면, <표 1>에서는 포함하지 않았으나, 공유 메모리 태그는 EL2 계층에서 중간 주소 (intermediate address) 변환을 위해 필요한 변환 주소(예: stage-2 변환 주소)를 더 포함할 수 있다. 본 개시의 일 실시예에 따른 다중 도메인을 지원하는 전자 장치는, 인스트럭션들을 저장하는 메모리, 및 제1 도메인 및 제2 도메인에서 동작 가능한 적어도 하나의 프로세서(예: 도 2의 CPU)를 포함하는 하드 웨어(430, 760)를 포함할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 상기 프로세서에 의해 실행 될 때, 상기 전자 장치로 하여금, 상기 제1 도메인 또는 상기 제2 도메인에 의한 공유 메모리 사용 요청을 감지하도록 할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상 기 전자 장치로 하여금, 상기 공유 메모리 사용 요청에 기반하여, 상기 메모리에서 지정된 메모리 영 역에 기반하여 상기 제1 도메인과 상기 제2 도메인을 포함하는 다중 도메인 간의 통신을 위한 공유 메모리를 할 당하도록 할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 상기 프로세서에 의해 실행될 때, 상기 전자 장치로 하여금, 상기 제1 도메인의 제1 메모리 영역과 상기 제2 도메인의 제2 메모리 영역에 상기 공 유 메모리에 대한 태그를 등록하도록 할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 상기 프로세서 에 의해 실행될 때, 상기 전자 장치로 하여금, 상기 태그에 기반하여, 상기 제1 도메인과 상기 제2 도메인 간에 공유되는 상기 공유 메모리에 대한 메모리 안전 버그(memory safety bug)를 탐지하도록 할 수 있다. 일 실시예에 따르면, 상기 다중 도메인은 넌-시큐어 월드(non-secure world)의 도메인 및 시큐어 월드 (secure world)의 도메인을 포함할 수 있다. 일 실시예에 따르면, 상기 넌-시큐어 월드의 도메인 및 상기 시큐어 월드의 도메인은 하나 또는 그 이상의 도메인들을 포함할 수 있다. 일 실시예에 따르면, 상기 인스트럭션들은, 상기 전자 장치로 하여금, 상기 하드웨어(430, 760)를 통해 메 모리 안전 버그를 탐지 가능한 MTE(memory tagging extension)를 이용하여, 상기 공유 메모리에 대한 메모리 안 전 버그를 탐지하도록 할 수 있다. 일 실시예에 따르면, 상기 다중 도메인 각각은, 소프트웨어 계층과 하드웨어 계층으로 구성될 수 있다. 일 실시 예에 따르면, 상기 하드웨어 계층은 상기 다중 도메인에 대해 공유될 수 있다. 일 실시예에 따르면, 상기 소프 트웨어 계층은 상기 다중 도메인 별로 구분되고, 어플리케이션 계층, 운영체제 계층, 가상화 계층 및 모니터 계층을 포함할 수 있다. 일 실시예에 따르면, 상기 가상화 계층은 상기 공유 메모리의 제한된 동작을 수행할 수 있는 프리빌리지드 모드(privileged mode)로 동작하고, 상기 다중 도메인 간에 침범되는 메모리 안전 버그를 모니터링 및 탐지하는 컨트롤러(controller)(예: 제어 모듈)를 포함할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 상기 공유 메모리를 요청, 등록, 관리, 및/또는 거부하는 동작을 처리할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 메모리 요청, 권한 및 태그 정보를 체크하는 인터페이스를 포 함할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 상기 인터페이스를 통해 전달된 요청을 처리하는 매니저(manager)(예: 관리 모듈)를 포함할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 상기 공유 메모리에 대해 메모리 안전 버그를 탐지하는 태그 에이전트(tag agent)(예: 태그 처리 모듈)를 포함할 수 있다. 일 실시예에 따르면, 상기 태그 에이전트는, 공유 메모리에 대해 메모리 영역을 할당 요청한 도메인의 식별번호, 메모리 주소, 메모리 크기, 공유 메모리에 할당 요청한 태그 및/또는 변환 주소에 기반하여 테이블을 관리할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 상기 다중 도메인의 제1 도메인으로부터 공유 메모리 할당 요청을 수신할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 주소를 변환하기 위한 테이블을 관리하고, 상기 테이블에서 주소 변환을 통해 공유 메모리에 대한 태그를 할당할 수 있다. 일 실시예에 따르면, 상기 컨트롤러 는, 상기 할당된 태그에 관련된 태그 정보에 기반하여 상기 공유 메모리에서 공유 메모리 태그를 설정할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 공유 메모리 할당 요청을 상기 다중 도메인의 제2 도메인 에 전달할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 상기 제2 도메인으로부터 커밋 메시지(commit message)를 수신할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 상기 제1 도메인에서 할당 요청한 메모리 영역과 상기 제2 도메인 에서 할당 요청한 메모리 영역이 일치하는지 판단할 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 할당 요청한 메모리 영역이 일치하는 경우, 상기 공유 메모리에 대한 최종 등록을 완료할 수 있다. 일 실시예에 따르 면, 상기 컨트롤러는, 상기 제1 도메인과 상기 제2 도메인에서 동일한 공유 메모리 태그를 가지는 공유 메 모리에 대한 등록 완료 응답을 상기 제1 도메인 및 상기 제2 도메인에 전달할 수 있다. 일 실시예에 따르면, 상기 제1 도메인 및 상기 제2 도메인에 의해, 상기 공유 메모리에서 동일한 태그를 가지는 메모리 영역이 등록될 수 있다. 일 실시예에 따르면, 상기 컨트롤러는, 상기 등록된 태그에 기반하여 상기 다중 도메인 별 메모리 안전 버 그를 탐지할 수 있다. 일 실시예에 따르면, 상기 제어 모듈은, 메모리 안전 버그가 탐지되는 경우, 태그의 불일치로 인해 해당 도메인에 의한 메모리 영역 접근을 거부할 수 있다. 일 실시예에 따르면, 상기 하드웨어(430, 760)는, 실행 가능한 인스트럭션들을 저장하고, 상기 인스트럭션들을 실행 가능한 프로그래밍 가능(programmable)한 제1 프로세서(예: 도 2의 CPU)를 포함할 수 있다. 일 실시 예에 따르면, 상기 하드웨어(430, 760)는, 상기 다중 도메인 별 메모리 할당 및 해제를 관리하는 제2 프로세서 (예: MMU)를 포함할 수 있다. 일 실시예에 따르면, 상기 제1 프로세서 및 상기 제2 프로세서는 다중 도메인 간 에 공유될 수 있다. 일 실시예에 따르면, 상기 메모리는, 상기 제1 프로세서의 동작 상에서 사용되는 동적 메모리를 포함할 수 있다. 이하에서는 다양한 실시예들의 전자 장치의 동작 방법에 대해서 상세하게 설명한다. 다양한 실시예들에 따 른 전자 장치에서 수행하는 동작들은, 전자 장치의 다양한 프로세싱 회로(various processing circuitry) 및/또는 실행 가능한 프로그램 요소(executable program elements)를 포함하는 프로세서에 의 해 실행될 수 있다. 일 실시예에 따라, 전자 장치에서 수행하는 동작들은, 메모리에 저장되고, 실행 시에, 프로세서가 동작하도록 하는 인스트럭션들(instructions)에 의해 실행될 수 있다. 도 11은 본 개시의 일 실시예에 따른 전자 장치의 동작 방법을 도시하는 흐름도이다. 일 실시예에 따라, 도 11은 일 실시예에 따른 전자 장치에서 다중 도메인 간 공유 메모리를 할당, 등록 및 관리하는 동작의 예를 나타낼 수 있다. 본 개시의 일 실시예에 따른 전자 장치(예: 도 8 또는 도 9의 제어 모듈(또는 컨트롤러))에서 지원하 는 동작 방법은, 예를 들어, 도 11에 도시된 흐름도에 따라 수행될 수 있다. 도 11에 도시된 흐름도는 전자 장 치의 동작의 일 실시예에 따른 흐름도에 불과하며, 적어도 일부 동작의 순서는 변경되거나 병렬적으로 수 행되거나, 독립적인 동작으로 수행되거나, 또는 적어도 일부 다른 동작이 적어도 일부 동작에 보완적으로 수행 될 수 있다. 본 개시의 일 실시예에 따르면, 동작 1101 내지 동작 1155는 전자 장치의 제어 모듈(예: 도 8 또는 도 9의 제어 모듈(또는 컨트롤러)) 및/또는 적어도 하나의 프로세서(예: 도 1 또는 도 2의 프로세서 )에서 수행될 수 있다. 일 실시예에 따르면, 도 11에서 설명되는 동작은, 예를 들어, 도 7 내지 도 10에서 설명된 동작들에 결합하여 휴리스틱하게 수행되거나, 설명된 동작의 적어도 일부 동작을 대체하고 적어도 일부 다른 동작에 결합하여 휴리 스틱하게 수행되거나, 설명된 동작들의 적어도 일부 동작의 상세 동작으로 휴리스틱하게 수행될 수 있다. 도 11에 도시한 바와 같이, 일 실시예에 따른 전자 장치가 수행하는 동작 방법은, 제1 도메인으로부터 공 유 메모리 할당 요청을 수신하는 동작, 페이지 테이블 관리 및 태그 할당을 수행하는 동작, 메모리 정보와 태그 정보에 기반하여 페이지 테이블을 구성하는 동작, 공유 메모리를 등록하는 동작, 제2 도메인에 공유 메모리 할당을 요청하는 동작, 제2 도메인으로부터 커밋 메시지를 수신하는 동작, 메모리 영역을 비교하는 동작, 및 메모리 영역 일치에 기반하여 다중 도메인 간 공유 메모리 등록을 수행 하는 동작을 포함할 수 있다. 도 11을 참조하면, 동작 1101에서, 전자 장치의 제어 모듈(또는 컨트롤러)은 제1 도메인으로부터 공 유 메모리 할당 요청을 수신할 수 있다. 일 실시예에 따르면, 제1 도메인은 서비스(또는 어플리케이션) 실행에 따라 공유 메모리 할당 요청을 EL2 계층의 제어 모듈로 전달할 수 있다. 일 실시예에 따르면, 제1 도메인 의 공유 메모리 할당 요청은, 제1 도메인에 속하는 메모리 영역에 대한 메모리 정보(예: {시작, 크기}를 지시하 는 정보)를 포함할 수 있다. 동작 1103에서, 제어 모듈은 페이지 테이블 관리 및 태그 할당을 수행할 수 있다. 일 실시예에 따르면, 제 어 모듈은 제1 도메인으로부터 공유 메모리 할당 요청에 응답하여, 페이지 테이블에서 공유 메모리의 지정 된 메모리 영역에 공유 메모리 태그를 할당할 수 있다. 동작 1105에서, 제어 모듈은 메모리 정보와 태그 정보에 기반하여 페이지 테이블을 구성할 수 있다. 일 실 시예에 따르면, 제어 모듈은 공유 메모리 태그가 할당되는 것에 응답하여, 메모리 정보(예: {시작, 크기} 를 지시하는 정보)와 태그 정보(예: 랜덤 태그 값(예: 컬러 값 또는 패턴 값))를 등록할 수 있다. 동작 1107에서, 제어 모듈은 공유 메모리를 등록할 수 있다. 일 실시예에 따르면, 제어 모듈은 페이 지 테이블을 구성(예: {시작, 크기, 태그 정보}로 구성)하고, 페이지 테이블에 공유 메모리를 등록 및 관리할 수 있다. 예를 들어, 제어 모듈은 메모리 정보 및 태그 정보에 기반하여 공유 메모리에서 제1 도메인의 메 모리 영역에 대한 공유 메모리 태그를 설정할 수 있다. 동작 1109에서, 제어 모듈은 제2 도메인에 공유 메모리 할당을 요청할 수 있다. 일 실시예에 따르면, 제어 모듈은 공유 메모리 등록을 완료하는 것에 응답하여, 공유 메모리 할당 요청을 다중 도메인의 제2 도메인 으로 전달할 수 있다. 동작 1111에서, 제어 모듈은 제2 도메인으로부터 커밋 메시지를 수신할 수 있다. 일 실시예에 따르면, 제2 도메인은 제어 모듈로부터 공유 메모리 할당 요청에 응답하여, 제2 도메인에 속하는 메모리 영역에 공유 메모리 매핑을 위한 커밋 메시지(commit message)를 제어 모듈에 전달할 수 있다. 일 실시예에 따르면, 커 밋 메시지는 제2 도메인에서 할당된 메모리 정보(예: {시작, 크기} 정보)를 포함할 수 있다. 동작 1113에서, 제어 모듈은 메모리 영역을 비교할 수 있다. 일 실시예에 따르면, 제어 모듈은 커밋 메시지 수신에 응답하여, 제1 도메인이 할당 요청한 메모리 영역과 제2 도메인이 할당 요청한 메모리 영역이 일 치하는지 여부를 판단할 수 있다. 예를 들어, 제어 모듈은 제1 도메인에 의해 요청되고 제어 모듈에 의해 관리되는 메모리 정보(예: 제1 도메인이 할당 요청한 {시작, 크기} 정보)와 제2 도메인에 의해 커밋 메시 지를 통해 요청되는 메모리 정보(예: 제2 도메인이 할당 요청한 {시작, 크기} 정보)가 일치하는지 여부를 판단 할 수 있다. 동작 1115에서, 제어 모듈은 메모리 영역 일치에 기반하여 다중 도메인 간 공유 메모리 등록을 수행할 수 있다. 일 실시예에 따르면, 제어 모듈은 제1 도메인과 제2 도메인에 의해 할당 요청된 메모리 영역이 일치 하는 경우, 할당 요청된 메모리 영역에 대한 최종 등록을 완료할 수 있다. 일 실시예에 따르면, 제어 모듈(80 0)은 최종 등록을 완료하는 것에 응답하여, 제1 도메인 및 제2 도메인에 공유 메모리 등록 완료에 대한 응답을 전달할 수 있다. 예를 들어, 제어 모듈은 태그 등록 요청을 제2 도메인에 전달하고, 제2 도메인에서는 제1 도메인에서 등록한 태그와 동일한 태그를 가진 공유 메모리를 등록할 수 있다. 예를 들어, 제어 모듈은 등 록 완료 응답을 제1 도메인에 전달하고, 제1 도메인에서는 할당 요청한 공유 메모리 등록이 완료됨을 확인할 수 있다. 도 12는 본 개시의 일 실시예에 따른 전자 장치의 동작 방법을 도시하는 흐름도이다. 일 실시예에 따라, 도 12는 일 실시예에 따른 전자 장치에서 다중 도메인(예: 제1 도메인 및 제2 도메인) 간 공유 메모리를 할당 및 공유 메모리에 대한 메모리 안전 버그를 탐지하는 동작의 예를 나타낼 수 있다. 본 개시의 일 실시예에 따른 전자 장치(예: 도 8 또는 도 9의 제어 모듈(또는 컨트롤러))에서 지원하 는 동작 방법은, 예를 들어, 도 12에 도시된 흐름도에 따라 수행될 수 있다. 도 12에 도시된 흐름도는 전자 장 치의 동작의 일 실시예에 따른 흐름도에 불과하며, 적어도 일부 동작의 순서는 변경되거나 병렬적으로 수 행되거나, 독립적인 동작으로 수행되거나, 또는 적어도 일부 다른 동작이 적어도 일부 동작에 보완적으로 수행 될 수 있다. 본 개시의 일 실시예에 따르면, 동작 1201 내지 동작 1209는 전자 장치의 제어 모듈(예: 도 8 또는 도 9의 제어 모듈(또는 컨트롤러)) 및/또는 적어도 하나의 프로세서(예: 도 1 또는 도 2의 프로세서 )에서 수행될 수 있다. 일 실시예에 따르면, 도 12에서 설명되는 동작은, 예를 들어, 도 7 내지 도 11에서 설명된 동작들에 결합하여 휴리스틱하게 수행되거나, 설명된 동작의 적어도 일부 동작을 대체하고 적어도 일부 다른 동작에 결합하여 휴리 스틱하게 수행되거나, 설명된 동작들의 적어도 일부 동작의 상세 동작으로 휴리스틱하게 수행될 수 있다. 도 12에 도시한 바와 같이, 일 실시예에 따른 전자 장치가 수행하는 동작 방법은, 제1 도메인에 속하는 제 1 메모리 영역과 제2 도메인에 속하는 제2 메모리 영역을 각각 보호하는 동작, 제1 도메인 또는 제2 도메 인에 의한 공유 메모리 사용 요청을 감지하는 동작, 공유 메모리 사용 요청에 기반하여, 지정된 메모리 영역에 기반하여 제1 도메인과 제2 도메인을 포함하는 다중 도메인 간의 통신을 위한 공유 메모리를 할당하는 동작, 제1 도메인의 제1 메모리 영역과 제2 도메인의 제2 메모리 영역에 공유 메모리에 대한 태그를 등록 하는 동작, 및 태그에 기반하여, 제1 도메인과 제2 도메인 간에 공유되는 공유 메모리에 대한 메모리 안 전 버그(memory safety bug)를 탐지하는 동작을 포함할 수 있다. 도 12를 참조하면, 동작 1201에서, 전자 장치의 제어 모듈(또는 컨트롤러)은 제1 도메인 또는 제2 도 메인에 의한 공유 메모리 사용 요청을 감지할 수 있다. 일 실시예에 따르면, 제어 모듈은 제1 도메인 또는 제2 도메인으로부터 서비스(또는 어플리케이션) 실행에 따른 공유 메모리 할당 요청을 수신할 수 있다. 일 실시 예에 따르면, 공유 메모리 할당 요청은, 해당 도메인(예: 제1 도메인 또는 제2 도메인)에 속하는 메모리 영역 (예: 제1 메모리 영역 또는 제2 메모리 영역)에 대한 메모리 정보(예: {시작, 크기}를 지시하는 정보)를 포함할 수 있다. 동작 1203에서, 제어 모듈은 공유 메모리 사용 요청에 기반하여, 메모리에서 지정된 메모리 영역에 기반하여 제1 도메인과 제2 도메인을 포함하는 다중 도메인 간의 통신을 위한 공유 메모리를 할당할 수 있다. 일 실시예에 따르면, 제어 모듈은 전자 장치의 메모리의 일부 영역을 지정하여 다중 도메인(예: 제1 도메인 및 제2 도메인) 간 통신 목적으로 공유 메모리를 할당할 수 있다. 동작 1205에서, 제어 모듈은 제1 도메인의 제1 메모리 영역과 제2 도메인의 제2 메모리 영역에 공유 메모 리에 대한 태그를 등록할 수 있다. 일 실시예에 따르면, 제어 모듈은 공유 메모리 사용 요청에 응답하여, 공유 메모리의 지정된 메모리 영역에 태그를 할당할 수 있다. 일 실시예에 따르면, 제어 모듈은 공유 메모 리 사용에 관련된 다중 도메인(예: 제1 도메인과 제2 도메인)에 속하는 각 메모리 영역들에 대한 메모리 정보 (예: {시작, 크기}를 지시하는 정보)에 기반하여 다중 도메인의 각 메모리 영역에 공유 메모리에 대한 동일한 태그를 설정하도록 동작할 수 있다. 일 실시예에 따르면, 제어 모듈은 제1 도메인의 메모리 정보(예: 제1 도메인이 할당 요청한 {시작, 크기} 정보)와 제2 도메인의 메모리 정보(예: 제2 도메인이 할당 요청한 {시작, 크기} 정보)를 비교할 수 있다. 일 실 시예에 따르면, 제어 모듈은 제1 도메인과 제2 도메인에서 할당 요청한 메모리 영역이 일치하는 경우, 제1 도메인과 제2 도메인이 동일한 태그를 가지는 공유 메모리를 등록하도록 동작할 수 있다. 동작 1207에서, 제어 모듈은 태그에 기반하여, 제1 도메인과 제2 도메인 간에 공유되는 공유 메모리에 대 한 메모리 안전 버그를 탐지하는 동작을 수행할 수 있다. 본 개시의 일 실시예에 따르면, 도 12를 참조한 설명 부분에서 설명한 바와 같이, 제어 모듈을 통해 공유 메모리를 위한 태그를 모니터링하여 관련 동작(예: 읽고, 비교하고, 및/또는 탐지)을 수행할 수 있다. 본 개시 의 일 실시예에 따르면, 제어 모듈에 대응하는 동작은, 도 4 및 도 5를 참조한 설명 부분에서 설명한 바와 같이, MMU를 포함하는 하드웨어를 통해, 공유 메모리 접근 시 태그를 모니터링하여 관련 동작(예: 읽고, 비교하고, 및/또는 탐지)을 수행할 수 있다. 본 개시의 일 실시예에 따른 다중 도메인을 지원하는 전자 장치에서 수행하는 동작 방법은, 제1 도메인 또 는 제2 도메인에 의한 공유 메모리 사용 요청을 감지하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 공유 메모리 사용 요청에 기반하여, 메모리에서 지정된 메모리 영역에 기반하여 상기 제1 도메인과 상기 제2 도메인을 포함하는 다중 도메인 간의 통신을 위한 공유 메모리를 할당하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 제1 도메인의 제1 메모리 영역과 상기 제2 도메인의 제2 메 모리 영역에 상기 공유 메모리에 대한 태그를 등록하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 태그에 기반하여, 상기 제1 도메인과 상기 제2 도메인 간에 공유되는 상기 공유 메모리에 대한 메 모리 안전 버그(memory safety bug)를 탐지하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 다중 도메인은 넌-시큐어 월드(non-secure world)의 도메인 및 시큐어 월드 (secure world)의 도메인을 포함할 수 있다. 일 실시예에 따르면, 상기 넌-시큐어 월드의 도메인 및 상기 시큐어 월드의 도메인은 하나 또는 그 이상의 도메인들을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 하드웨어(430, 760)를 통해 메모리 안전 버그를 탐지 가능한 MTE(memory tagging extension)를 이용하여, 상기 공유 메모리에 대한 메모리 안전 버그를 탐지하는 동작을 포 함할 수 있다. 일 실시예에 따르면, 상기 다중 도메인 각각은, 소프트웨어 계층과 하드웨어 계층으로 구성될 수 있다. 일 실시 예에 따르면, 상기 하드웨어 계층은 상기 다중 도메인에 대해 공유될 수 있다. 일 실시예에 따르면, 상기 소프 트웨어 계층은 상기 다중 도메인 별로 구분되고, 어플리케이션 계층, 운영체제 계층, 가상화 계층 및 모니터 계층을 포함할 수 있다. 일 실시예에 따르면, 상기 가상화 계층은 상기 공유 메모리의 제한된 동작을 수행할 수 있는 프리빌리지드 모드(privileged mode)로 동작하고, 상기 다중 도메인 간에 침범되는 메모리 안전 버그를 모니터링 및 탐지하는 컨트롤러(controller)(예: 제어 모듈)를 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 컨트롤러에 의해, 상기 공유 메모리를 요청, 등록, 관리, 및/또는 거부하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 다중 도메인의 제1 도메인으로부터 공유 메모리 할당 요청을 수신 하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 주소를 변환하기 위한 테이블을 관리하고, 상기 테이블에서 주소 변환을 통해 공유 메모리에 대한 태그를 할당하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 할당된 태그에 관련된 태그 정보에 기반하여 상기 공유 메모리에서 공유 메모리 태그를 설정하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 공유 메모리 할 당 요청을 상기 다중 도메인의 제2 도메인에 전달하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 제2 도메인으로부터 커밋 메시지(commit message)를 수신하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 제1 도메인에서 할당 요청한 메모리 영역과 상기 제2 도메인에서 할당 요청한 메모리 영역이 일치하는지 판단하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법 은, 할당 요청한 메모리 영역이 일치하는 경우, 상기 공유 메모리에 대한 최종 등록을 완료하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 제1 도메인과 상기 제2 도메인에서 동일한 공유 메모리 태그를 가지는 공유 메모리에 대한 등록 완료 응답을 상기 제1 도메인 및 상기 제2 도메인에 전달하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 제1 도메인 및 상기 제2 도메인에 의해, 상기 공유 메모리에서 동 일한 태그를 가지는 메모리 영역을 등록하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 상기 등록된 태그에 기반하여 상기 다중 도메인 별 메모리 안전 버그를 탐지하는 동작을 포함할 수 있다. 일 실시예에 따르면, 상기 동작 방법은, 메모리 안전 버그가 탐지되는 경우, 태그의 불일치로 인해 해당 도메인에 의한 메모리 영역 접근을 거부하는 동작을 포함할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, “A 또는 B”, “A 및 B 중 적어도 하나”, “A 또는 B 중 적어도 하나”, “A, B 또는 C”, “A, B 및 C 중 적어도 하나”, 및 “A, B, 또는 C 중 적어도 하나”와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. “제1”, “제2”, 또는 “첫째” 또는 “둘째”와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구 성요소와 구분하기 위해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제1) 구성요소가 다른(예: 제2) 구성요소에, “기능적으로” 또는 “통신적으로”라는 용어와 함께 또는 이런 용어 없이, “커플드” 또는 “커넥티드”라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로(예: 유선으로), 무선으로, 또는 제3 구성요소를 통하여 연결될 수 있다는 것을 의 미한다. 본 문서의 다양한 실시예들에서 사용된 용어 “모듈”은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포 함할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부가 될 수 있다. 예를 들면, 일 실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit) 의 형태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스 마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체들을 포함할 수 있으며, 복수의 개체들 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요 소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱(heuristic)하게 실행 되거나, 상기 동작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추 가될 수 있다. 본 명세서와 도면에 개시된 본 개시의 다양한 실시예들은 본 개시의 기술 내용을 쉽게 설명하고 본 개시의 이해 를 돕기 위해 특정 예를 제시한 것일 뿐이며, 본 개시의 범위를 한정하고자 하는 것은 아니다. 따라서 본 개시 의 범위는 여기에 개시된 실시예들 이외에도 본 개시의 기술적 사상을 바탕으로 도출되는 모든 변경 또는 변형 된 형태가 본 개시의 범위에 포함되는 것으로 해석되어야 한다. 부호의 설명101: 전자 장치 120: 프로세서 130: 메모리 230: CPU 410: 넌-시큐어 월드 420: 시큐어 월드 430, 760: 하드웨어 800: 제어 모듈 (또는 컨트롤러) 810: 인터페이스 820: 관리 모듈 (또는 매니저) 830: 태그 처리 모듈 (또는 태그 에이전트)도면 도면1 도면2 도면3 도면4 도면5 도면6 도면7 도면8 도면9 도면10 도면11 도면12"}
{"patent_id": "10-2023-0170319", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면 설명과 관련하여, 동일 또는 유사한 구성요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있다. 도 1은 다양한 실시예들에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 본 개시의 일 실시예에 따른 전자 장치의 구성을 개략적으로 도시하는 도면이다. 도 3은 일 실시예에 따른 전자 장치에서 메모리 안전 버그 탐지에 이용되는 MTE 기술을 설명하는 도면이다. 도 4는 일 실시예에 따른 전자 장치에서 아키텍쳐(architecture)의 예를 도시하는 도면이다. 도 5는 일 실시예에 따른 전자 장치에서 지원하는 다중 도메인 환경에서 메모리 안전 버그 탐지에 대한 동작 예 를 도시하는 도면이다. 도 6은 일 실시예에 따른 전자 장치에서 지원하는 다중 도메인 환경에서 메모리 안전 버그 탐지에 대한 동작 예를 도시하는 도면이다. 도 7은 본 개시의 일 실시예에 따른 전자 장치에서 다중 도메인 간 메모리 안전 버그를 지원하는 방법의 예를 도시하는 도면이다. 도 8은 본 개시의 일 실시예에 따른 전자 장치에서 다중 도메인 간 메모리 안전 버그를 지원하기 위한 구성의 예를 도시하는 도면이다. 도 9는 본 개시의 일 실시예에 따른 전자 장치에서 공유 메모리에 대한 메모리 안전 버그를 탐지하는 동작 예를 도시하는 도면이다. 도 10은 본 개시의 일 실시예에 따른 전자 장치에서 공유 메모리에 대한 메모리 안전 버그를 탐지하는 동작 예 를 도시하는 도면이다. 도 11은 본 개시의 일 실시예에 따른 전자 장치의 동작 방법을 도시하는 흐름도이다."}
