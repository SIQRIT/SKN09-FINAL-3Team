{"patent_id": "10-2021-0179092", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0090112", "출원번호": "10-2021-0179092", "발명의 명칭": "오픈소스 프로젝트 코드 평가 방법 및 장치", "출원인": "성균관대학교산학협력단", "발명자": "김형식"}}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "오픈소스 프로젝트 코드 평가 방법에 있어서,호스팅된 소스 코드들의 분기 정보들을 기반으로 유사도의 판단기준 및 임계값을 설정하는 단계;평가될 프로젝트인 제1 프로젝트 및 비교 대상 프로젝트인 제2 프로젝트를 입력 받는 단계;상기 설정된 유사도 판단기준 및 임계값을 이용하여 상기 제1 및 제2 프로젝트에 대한 분기 시점을 판단하는 단계;상기 판단된 분기 시점을 이용하여 상기 제1 및 제2 프로젝트에 대한 유사도를 측정하는 단계; 및상기 평가될 프로젝트를 평가하는 단계를 포함하는 코드 평가 방법."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 분기 시점을 판단하는 단계는,상기 제1 및 제2 프로젝트에서 기록된 코드들 전부를 입력 받는 단계;상기 제1 프로젝트의 기록된 코드들 각각과 상기 제2 프로젝트의 기록된 코드들 각각이 이루는 모든 쌍의 유사도를 판단하는 단계; 및상기 판단된 유사도 값 중 가장 높은 값이 상기 설정된 임계값 이상일 경우 상기 가장 높은 유사도 값을 갖는상기 평가될 프로젝트의 코드 생성 시점을 분기 시점으로 결정하는 단계를 포함하는 것을 특징으로 하는 코드평가 방법."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 판단된 분기 시점을 이용한 상기 제1 및 제2 프로젝트에 대한 유사도의 측정은, 상기 판단된 분기 시점의상기 제1 프로젝트의 코드 및 현재 시점의 상기 제2 프로젝트의 코드의 유사도를 측정하고, 상기 판단된 분기시점의 상기 제2 프로젝트의 코드 및 현재 시점의 상기 제1 프로젝트의 코드의 유사도를 측정하는 것을 특징으로 하는 코드 평가 방법."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서,상기 평가될 프로젝트를 평가하는 단계는, 상기 평가될 프로젝트에 대해 유지보수도를 측정하는 단계; 상기 평가될 프로젝트에 대해 보안도를 측정하는 단계; 및 상기 측정된 유사도, 유지보수도 및 보안도 각각을 정규화(normalize)하여 곱하는 단계를 추가적으로 포함하는 것을 특징으로 하는 코드 평가 방법."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서,상기 유지보수도의 측정은 평가를 원하는 기간에서 데이터를 추출하고, 클러스터링 알고리즘을 통해 평가할 프로젝트를 구분하며, 클러스터링의 센터 역할을 하는 프로젝트들을 확인하여 등급을 구분하여 측정되는 것을 특징으로 하는 코드 평가 방법."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "공개특허 10-2023-0090112-3-제4항에 있어서,상기 보안도의 측정은 입력된 목표 호스팅 주소의 모든 기록된 코드들에 대한 삭제 코드들 및 추가 코드들을 입력 받고, 취약한 코드들 및 패치된 코드들을 저장하여, 상기 입력된 코드들 및 상기 저장된 코드들을 조합해서판단하여 측정되는 것을 특징으로 하는 코드 평가 방법."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "오픈소스 프로젝트 코드 평가 장치에 있어서,코드 정보를 저장 가능한 메모리;컴퓨터에서 판독 가능한 명령을 실행하도록 구현되는 프로세서;입출력부; 및 통신부를 포함하고,상기 프로세서는,호스팅된 소스 코드들의 분기 정보들을 기반으로 유사도의 판단기준 및 임계값을 설정하는 동작;평가될 프로젝트인 제1 프로젝트 및 비교 대상 프로젝트인 제2 프로젝트를 입력 받는 동작;상기 설정된 유사도 판단기준 및 임계값을 이용하여 상기 제1 및 제2 프로젝트에 대한 분기 시점을 판단하는 동작;상기 판단된 분기 시점을 이용하여 상기 제1 및 제2 프로젝트에 대한 유사도를 측정하는 동작; 및상기 평가될 프로젝트를 평가하는 동작을 수행하는 코드 평가 장치."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서,상기 분기 시점을 판단하는 동작은,상기 제1 및 제2 프로젝트에서 기록된 코드들 전부를 입력 받는 동작;상기 제1 프로젝트의 기록된 코드들 각각과 상기 제2 프로젝트의 기록된 코드들 각각이 이루는 모든 쌍의 유사도를 판단하는 동작; 및상기 판단된 유사도 값 중 가장 높은 값이 상기 설정된 임계값 이상일 경우 상기 가장 높은 유사도 값을 갖는상기 평가될 프로젝트의 코드 생성 시점을 분기 시점으로 결정하는 동작을 포함하는 것을 특징으로 하는 코드평가 장치."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제7항에 있어서,상기 판단된 분기 시점을 이용한 상기 제1 및 제2 프로젝트에 대한 유사도의 측정은, 상기 판단된 분기 시점의상기 제1 프로젝트의 코드 및 현재 시점의 상기 제2 프로젝트의 코드의 유사도를 측정하고, 상기 판단된 분기시점의 상기 제2 프로젝트의 코드 및 현재 시점의 상기 제1 프로젝트의 코드의 유사도를 측정하는 것을 특징으로 하는 코드 평가 장치."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제7항에 있어서,상기 평가될 프로젝트를 평가하는 동작은, 상기 평가될 프로젝트에 대해 유지보수도를 측정하는 동작; 상기 평가될 프로젝트에 대해 보안도를 측정하는 동작; 및 상기 측정된 유사도, 유지보수도 및 보안도 각각을 정규화(normalize)하여 곱하는 동작을 추가적으로 포함하는 것을 특징으로 하는 코드 평가 장치."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제10항에 있어서,공개특허 10-2023-0090112-4-상기 유지보수도의 측정은 평가를 원하는 기간에서 데이터를 추출하고, 클러스터링 알고리즘을 통해 평가할 프로젝트를 구분하며, 클러스터링의 센터 역할을 하는 프로젝트들을 확인하여 등급을 구분하여 측정되는 것을 특징으로 하는 코드 평가 장치."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제10항에 있어서,상기 보안도의 측정은 입력된 목표 호스팅 주소의 모든 기록된 코드들에 대한 삭제 코드들 및 추가 코드들을 입력 받고, 취약한 코드들 및 패치된 코드들을 저장하며, 상기 입력된 코드들 및 상기 저장된 코드들을 조합해서판단하여 측정되는 것을 특징으로 하는 코드 평가 장치."}
{"patent_id": "10-2021-0179092", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "오픈소스 프로젝트 코드 평가를 제공하기 위해 디지털 처리 장치에 의해 실행될 수 있는 명령어들의 프로그램이유형적으로 구현되어 있으며, 디지털 처리 장치에 의해 판독될 수 있는 기록매체로서,제1항 내지 제6항 중 어느 한 항의 방법을 컴퓨터에서 실행시키기 위한 프로그램이 기록된 컴퓨터 판독 가능한기록매체."}
{"patent_id": "10-2021-0179092", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 방법은, 호스팅된 소스 코드의 분기 정보들을 기반으 로 유사도의 판단기준 및 임계값을 설정하는 단계; 평가될 프로젝트인 제1 프로젝트 및 비교 대상 프로젝트인 제 2 프로젝트를 입력 받는 단계; 상기 설정된 유사도 판단기준 및 임계값을 이용하여 상기 제1 및 제2 프로젝트에 대한 분기 시점을 판단하는 단계; 상기 판단된 분기 시점을 이용하여 상기 제1 및 제2 프로젝트에 대한 유사도를 측정하는 단계; 및 상기 평가될 프로젝트를 평가하는 단계를 포함하는 것을 특징으로 한다. 이에 따라, 본 발명 의 일 실시 예에서는, 코드의 변경 이력을 모두 반영하여 보다 정확하게 유사도를 측정하고, 추가적으로 프로젝 트의 유지보수성 및 보안성 측면까지 반영하여 오픈소스 프로젝트의 가치에 대한 정확한 평가가 가능하다."}
{"patent_id": "10-2021-0179092", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 오픈소스 프로젝트 코드 평가 방법 및 장치에 관한 것으로, 보다 구체적으로는 오픈소스 프로젝트 간 의 분기 시점을 판단하여 판단된 분기 시점을 이용하여 유사도를 측정하여 프로젝트를 평가하는 오픈소스 프로 젝트 코드 평가 방법 및 장치에 관한 것이다."}
{"patent_id": "10-2021-0179092", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "오픈소스는 자유 소프트웨어에서 진화하여 소스 코드를 공개하여 개발하는 개방형 소프트웨어 개발 방식의 확산 을 위해 정의된 개념으로서, 소스 코드가 공개되어 누구나 개발에 참여 및 활용 가능하므로 최신 기술 습득, 개 발 기간 단축, 개발 비용 절감 및 중복 개발 예방과 같이 소프트웨어 개발 효율성이 증대 가능하고, 결과물 품 질 향상, 내부 역량 강화, 성과 확산 등 개발 결과물의 효과성 제고가 가능하다. 최근의 오픈소스 관련 보고서에 따르면 소프트웨어 개발 과정의 대부분에서 오픈소스가 활용될 정도로 오픈소스 의 활용이 보편화되고 있으며, 이미 오픈소스 환경은 소프트웨어 산업을 넘어 다양한 산업에서도 주목을 받으며 성장하고 있는 실정이다. 기술적으로 소프트웨어 핵심 기술 분야의 오픈소스는 성숙 단계로 진입하였고 최근 주 목받는 인공지능, 빅데이터, 클라우드 기술 발전을 오픈소스가 주도하고 있으며 5G, 자율주행, 스마트시티 등 타 산업 분야의 오픈소스가 새롭게 등장하며 주목받고 있다. 또한 오픈소스 개발 환경을 제공해주는 호스팅 서 비스로서 대표적인 오픈소스 개발 커뮤니티인 깃허브(GitHub)의 사용자와 활용 조직 수는 근래에 계속 증가하고 있는 추세이다. 이러한 상황에서 오픈소스 프로젝트에 대한 가치를 파악하는 것이 점차 중요해지게 되었으나 일반적으로 오픈소 스 프로젝트에 대한 평가는 코드 업데이트, 개발자 수 등을 기반으로 이루어졌다. 오픈소스로 제공되는 암호화 폐들에 있어서 자신의 가치를 높이기 위해 무의미한 코드 업데이트, 허수의 개발자 등록 등의 전략을 사용하고 특히 분기 기능을 사용하지 않은 채 프로젝트 코드를 다운로드한 후 업로드하여 원천 프로젝트를 불명하게 하여 표절하는 문제가 발생하였다. 상술한 일반적인 오픈소스 프로젝트 평가 방법은, 1) 업데이트 빈도수를 평가 기 준으로 사용하는 경우 코드에 영향을 주지 않는 주석 영역의 값을 추가, 삭제하는 행위에 취약하고, 2) 복제에 기준이 되었던 프로젝트 코드가 복제 후 다수의 업데이트를 통해 많은 변경이 이루어진 경우 복제된 두 코드 간 의 유사도가 낮아지는 오류가 발생한다. 이에 따라, 오픈소스 프로젝트 코드 평가 방법에 있어서, 코드의 변경 이력을 모두 반영하여 보다 정확하게 유사도를 측정하고, 추가적으로 프로젝트의 유지보수성 및 보안성 측면까 지 반영하여 오픈소스 프로젝트의 가치를 정확하게 판단 가능한 평가 방법이 필요하다."}
{"patent_id": "10-2021-0179092", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명은 상술한 바와 같은 종래 기술의 문제점을 해결하기 위한 것으로서, 오픈소스 프로젝트 코드의 변경 이 력을 모두 반영하여 보다 정확하게 유사도를 측정하고, 추가적으로 프로젝트의 유지보수성 및 보안성을 반영하 여 오픈소스 프로젝트의 가치를 판단하는 오픈소스 프로젝트 코드 평가 방법 및 장치를 제공하는 것이다."}
{"patent_id": "10-2021-0179092", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "본 발명의 제1 특징에 따른 오픈소스 프로젝트 코드 평가 방법은, 호스팅된 소스 코드들의 분기 정보들을 기반 으로 유사도의 판단기준 및 임계값을 설정하는 단계; 평가될 프로젝트인 제1 프로젝트 및 비교 대상 프로젝트인 제2 프로젝트를 입력 받는 단계; 상기 설정된 유사도 판단기준 및 임계값을 이용하여 상기 제1 및 제2 프로젝트 에 대한 분기 시점을 판단하는 단계; 상기 판단된 분기 시점을 이용하여 상기 제1 및 제2 프로젝트에 대한 유사 도를 측정하는 단계; 및 상기 평가될 프로젝트를 평가하는 단계를 포함하는 것을 특징으로 한다. 본 발명의 제2 특징에 따른 오픈소스 프로젝트 코드 평가 장치는, 코드 정보를 저장 가능한 메모리; 컴퓨터에서 판독 가능한 명령을 실행하도록 구현되는 프로세서; 입출력부; 및 통신부를 포함하고, 상기 프로세서는, 호스팅 된 소스 코드들의 분기 정보들을 기반으로 유사도의 판단기준 및 임계값을 설정하는 동작; 평가될 프로젝트인 제1 프로젝트 및 비교 대상 프로젝트인 제2 프로젝트를 입력 받는 동작; 상기 설정된 유사도 판단기준 및 임계 값을 이용하여 상기 제1 및 제2 프로젝트에 대한 분기 시점을 판단하는 동작; 상기 판단된 분기 시점을 이용하 여 상기 제1 및 제2 프로젝트에 대한 유사도를 측정하는 동작; 및 상기 평가될 프로젝트를 평가하는 동작을 수 행하는 것을 특징으로 한다. 본 발명의 제3 특징에 따른 오픈소스 프로젝트 코드 평가를 제공하기 위해 디지털 처리 장치에 의해 실행될 수 있는 명령어들의 프로그램이 유형적으로 구현되어 있으며, 디지털 처리 장치에 의해 판독될 수 있는 기록매체는, 본 발명의 제1 특징에 따른 오픈소스 프로젝트 코드 평가 방법을 컴퓨터에서 실행시키기 위한 프로 그램이 기록된 것을 특징으로 한다."}
{"patent_id": "10-2021-0179092", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시 예에 따른 오픈소스 프로젝트 코드 평가 방법 및 장치는 다음과 같은 효과를 제공한다. 오픈소스 프로젝트들의 변경 이력이 반영되도록 기록된 코드들 전부를 입력 받아 전체 코드쌍의 유사도 분석을 통해 분기 시점을 결정하여 이를 이용하여 현재 프로젝트들의 유사성을 판단하는 바, 무의미한 업데이트, 복제 후의 다수의 업데이트 등 업데이트 사정이 유사성 판단에 미치는 영향을 감소시켜 보다 정확한 프로젝트 평가가 가능해진다. 분기 기능을 사용하지 않은 채 프로젝트 코드를 다운로드한 후 업로드하여 원천 프로젝트를 불명하게 하여 표절 하는 프로젝트에 대한 검열이 가능해진다. 오픈소스 프로젝트 간의 유사성 뿐 아니라 프로젝트의 유지보수성 및 보안성을 함께 판단하여 오픈소스 프로젝 트의 이용자들이 신뢰하고 활용할 수 있는 평가 지표를 제공할 수 있다."}
{"patent_id": "10-2021-0179092", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 본 발명에 대해서 실시예 및 도면을 참조하여 구체적으로 설명한다. 그러나, 이하의 설명은 본 발명을 특 정한 실시 형태에 대해 한정하려는 것이 아니며, 본 발명을 설명함에 있어서 관련된 공지 기술에 대한 구체적인 설명이 본 발명의 요지를 흐릴 수 있다고 판단되는 경우 그 상세한 설명을 생략한다. 본 발명은 웹 호스팅 등 호스팅 되어 있는 오픈소스 프로젝트 및 상기 프로젝트의 소스 코드를 사용하여 실시될 수 있다. 현재 대표적인 오픈소스 호스팅 서비스는 깃허브(GitHub)인 바, 본 명세서 전체에서 설명의 편의를 위 해 깃허브(GitHub)와 관련된 기능 혹은 용어가 사용될 수 있으나, 그럼에도 불구하고 본 발명이 특정한 호스팅 서비스의 실시 예에 의해 제한되거나 상기 특정 호스팅 서비스의 기능에 한정되지 않는다는 점에 유의해야 한다. 도 1은 본 발명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 장치를 나타내는 블록도이고, 도 2는 본 발 명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 방법을 나타내는 플로우차트이다. 도 2를 참조하면, 본 발명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 방법은, 호스팅된 소스 코드 들의 분기 정보들을 기반으로 유사도의 판단기준 및 임계값을 설정하는 단계; 평가될 프로젝트인 제1 프로 젝트 및 비교 대상 프로젝트인 제2 프로젝트를 입력 받는 단계; 상기 설정된 유사도 판단기준 및 임계값을 이용하여 상기 제1 및 제2 프로젝트에 대한 분기 시점을 판단하는 단계; 상기 판단된 분기 시점을 이용하 여 상기 제1 및 제2 프로젝트에 대한 유사도를 측정하는 단계; 및 상기 평가될 프로젝트를 평가하는 단계 를 포함하는 것을 특징으로 한다. 도 1을 참조하면, 본 발명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 장치는, 코드 정보를 저장 가능한 메모리; 컴퓨터에서 판독 가능한 명령을 실행하도록 구현되는 프로세서; 입출력부; 및 통신부를 포함하고, 상기 프로세서는, 호스팅된 소스 코드들의 분기 정보들을 기반으로 유사도의 판 단기준 및 임계값을 설정하는 동작; 평가될 프로젝트인 제1 프로젝트 및 비교 대상 프로젝트인 제2 프로젝 트를 입력 받는 동작; 상기 설정된 유사도 판단기준 및 임계값을 이용하여 상기 제1 및 제2 프로젝트에 대 한 분기 시점을 판단하는 동작; 상기 판단된 분기 시점을 이용하여 상기 제1 및 제2 프로젝트에 대한 유사 도를 측정하는 동작; 및 상기 평가될 프로젝트를 평가하는 동작을 수행하는 것을 특징으로 한다. 오픈소스 프로젝트 코드 평가 장치는 메모리, 프로세서, 입출력부, 및 통신부를 포함 할 수 있다. 메모리는 오픈소스 프로젝트 코드 평가 장치에 의해 사용되거나 그에 의해 출력되는 정 보를 저장하기 위한 상기 장치에서 판독 가능한 기록 매체로서, RAM(random access memory), ROM(read only memory) 및 디스크 드라이브와 같은 비소멸성 대용량 기록장치(permanent mass storage device)를 포함할 수 있다. 또한, 메모리에는 오픈소스 프로젝트 코드 평가를 위한 프로그램 코드가 저장될 수 있다. 프로세서는 기본적인 산술, 로직 및 오픈소스 프로젝트 코드 평가 방법에 관한 입출력 연산을 수행함 으로써, 컴퓨터 프로그램의 명령을 처리하도록 구성될 수 있다. 명령은 메모리 또는 통신부에 의해 프로세서로 제공될 수 있다. 예를 들어 프로세서는 메모리와 같은 기록 장치에 저장된 프로그램 코드에 따라 수신되는 명령을 실행하도록 구성될 수 있다. 프로세서는 유사성 분석부, 유지보수성 분석부 및 보안성 분석부(도 1 참조)를 위한 프로그램 코드를 실행하도록 구성될 수 있다. 이러한 프로그램 코드는 메 모리와 같은 기록 장치에 저장될 수 있다. 입출력부는 사용자로부터 정보를 입력 받는 장치 및 정보를 출력하는 디스플레이일 수 있다. 예를 들어 입 력 장치는 마이크(microphone), 키보드(keyboard) 또는 마우스(mouse) 등의 장치를, 출력 장치는 디스플레이 (display), 스피커(speaker) 등의 장치를 포함할 수 있다. 통신부는 네트워크를 통해 오픈소스 프로젝트 코드 평가 장치가 오픈소스 호스팅 서버와 통신하기 위한 기능을 제공할 수 있다. 또한, 다른 실시 예들에서 오픈소스 프로젝트 코드 평가 장치는 도 1의 구성요소들보다 더 적은 혹은 더 많은 구성요소들을 포함할 수도 있다. 그러나, 대부분의 종래기술적 구성요소들에 대한 명확한 도시는 생략하도 록 한다. 예를 들어, 오픈소스 프로젝트 코드 평가 장치는 상술한 입출력 장치들 중 적어도 일부를 포함하 도록 구현되거나 또는 네트워크 인터페이스 등의 인터페이스(interface), 트랜시버(transceiver), 데이터베이스 (database) 등과 같은 다른 구성요소들을 더 포함할 수도 있다. 오픈소스 호스팅 서버에서는 프로젝트의 코드에 대한 업데이트가 이루어지는 경우 커밋(commit)이라는 이전 버 전의 코드들이 저장된다. 이러한 이전 버전의 코드들을 본 명세서에서는 “기록된 코드들”로 표기하도록 한다.프로젝트의 복제가 이루어지면 해당 시점이 분기(Fork) 시점이 되며, 원래의 프로젝트와 복제된 프로젝트는 분 기 시점까지의 초기 수정사항 로그가 일치하게 되고 분기 시점 이후부터는 서로 다른 로그를 가지게 되므로 이 를 통해서 추후 프로젝트가 어느 시점에서 복제가 되었는지 판단할 수 있게 된다. 본 발명의 일 실시 예에 있어서, 오픈소스 프로젝트 코드 평가 장치는, 외부의 오픈소스 호스팅 서버와 통 신하여 호스팅된 소스 코드들의 분기와 관련된 정보들을 수집하고, 이렇게 수집된 정보들을 기반으로 분석하여 비교할 프로젝트들에 대한 분기 시점 판단에 사용될 기록된 코드들 간의 유사도를 판단하는 기준을 설정할 수 있으며, 또한 기록된 코드들 간의 분기 여부를 판단할 임계값을 설정할 수 있다. 이후 오픈소스 프로젝트 코드 평가 장치는, 외부의 오픈소스 호스팅 서버로부터 평가하고자 할 프로젝트를 포함한 제1 프로젝트 및 제2 프로젝트를 다운로드 받을 수 있으며, 설정된 유사도 판단기준 및 임계값을 이용하여 제1 및 제2 프로젝트에 대 한 분기 시점을 판단하게 된다. 도 3은 본 발명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 방법에 있어서 분기 시점을 판단하는 방법을 보다 상세하게 나타내는 플로우차트이다. 도 3을 참조하면, 본 발명의 일 실시 예에 있어서, 제1 및 제2 프로젝트에 대한 분기 시점을 판단하는 단계 는, 상기 제1 및 제2 프로젝트에서 기록된 코드들 전부를 입력 받는 단계; 상기 제1 프로젝트의 기록 된 코드들 각각과 상기 제2 프로젝트의 기록된 코드들 각각이 이루는 모든 쌍의 유사도를 판단하는 단계; 및 상기 판단된 유사도 값 중 가장 높은 값이 상기 설정된 임계값 이상일 경우 상기 가장 높은 유사도 값을 갖 는 상기 평가될 프로젝트의 코드 생성 시점을 분기 시점으로 결정하는 단계를 포함할 수 있다. 예시적으로 보다 상세하게는, 제1 프로젝트의 모든 기록된 코드들을 “C_A1, C_A2, C_A3, …, C_Am”이라고 하 고, 제2 프로젝트의 모든 기록된 코드들을 “C_B1, C_B2, C_B3, …, C_Bn”이라고 하면, 제1 프로젝트의 코드 및 제2 프로젝트의 코드가 이루는 모든 쌍의 유사도 값을 측정하여 가장 높은 값의 유사도를 갖는 C_Ai 및 C_Bj 를 제1 및 제2 프로젝트 간의 유사도로 결정할 수 있다. 이렇게 결정된 제1 및 제2 프로젝트의 유사도가 설정된 임계값 이상인 경우 이를 제1 및 제2 프로젝트의 분기 시점으로 판단할 수 있다. 도 4는 본 발명의 일 실시 예에 따른 분기 시점 판단에 있어서 프로젝트들의 기록된 코드들이 이루는 모든 쌍의 유사도를 판단하는 예시적인 과정을 간략히 도시한 도면이다. 도 4를 참조하여 구체적으로는, 프로젝트 A의 모든 기록된 코드들 “Commit α, Commit β, Commit γ, …, Commit δ” 중 하나와 프로젝트 B의 모든 기록된 코드들 “Commit a, Commit b, Commit c, …, Commit d” 중 하나가 쌍을 이루도록 모든 경우의 수에 대해 유사도 값을 측정하여 Commit γ와 Commit b가 95%로 가장 높은 값의 유사도를 가지므로 이를 프로젝트 A 및 B 간의 유사도로 결정하고, 만약 95%가 설정된 임계값 이상에 해당한다면 이를 프로젝트 A 및 프로젝트 B의 분기 시점으로 판단할 수 있다. 본 발명의 일 실시 예에 있어서, 분기 시점이 정해지면 분기 시점의 제1 프로젝트 및 현재 시점의 제2 프로젝트 의 유사성을 비교하여 제2 프로젝트에서의 제1 프로젝트와의 유사도를 측정할 수 있고, 분기 시점의 제2 프로젝 트 및 현재 시점의 제1 프로젝트의 유사성을 비교하여 제1 프로젝트에서의 제2 프로젝트와의 유사도를 측정할 수 있다. 이와 같이 측정된 수치들을 기반으로 분석하여 평가되어야 할 대상 프로젝트에 대해 평가를 하게 된다. 다시 도 4를 참조하여 구체적으로는, 분기 시점의 프로젝트 A 및 현재 시점의 프로젝트 B의 유사성을 비교하여 프로젝트 B에서의 프로젝트 A와의 유사도를 측정할 수 있고, 분기 시점의 프로젝트 B 및 현재 시 점의 프로젝트 A의 유사성을 비교하여 프로젝트 A에서의 프로젝트 B와의 유사도를 측정할 수 있다. 본 발명의 일 실시 예에 있어서, 측정된 유사도는 프로젝트의 평가에 있어서 반비례하게 관련되도록 적용될 수 있으며, 상술한 프로젝트 A 및 B의 유사도 측정을 예로 들면, 프로젝트 A에서 프로젝트 B와의 유사도 측정에서 99%, 프로젝트 B에서 프로젝트 A와의 유사도 측정이 30%가 측정된 경우, 유사도 평가 점수를 0~100점으로 환산 한다면 프로젝트 A에서 프로젝트 B에 대한 유사도 평가 점수는 1점, 프로젝트 B에서 프로젝트 A에 대한 유사도 평가 점수는 70점이 될 수 있다. 상술한 환산 점수 및 평가 점수는 설명의 편의를 위한 일 예시로서 본 발명은 이에 제한되지 않으며 측정된 유사도 값과 관련하여 다른 방식으로 평가가 이루어질 수도 있다는 점에 유의해야 한다. 다시 도 1을 참조하여 본 발명의 일 실시 예에 있어서, 평가될 프로젝트에 대한 평가는 상술한 바와 같이 프로 젝트 간의 유사도를 측정하여 이루어질 수 있고, 추가적으로 평가될 프로젝트에 대해 유지보수도 및 보안도를측정하여 상기 측정된 유사도, 유지보수도 및 보안도 각각을 정규화(normalize)하여 곱함으로써 평가 대상 프로 젝트에 대한 평가가 이루어질 수 있다. 예시적으로, 평가될 프로젝트에 대한 평가를 각 항목의 점수로 결정함에 있어서, 유사도 점수가 50점, 유지보수 도 점수가 70점, 보안도 점수가 80점이고, 각 항목의 중요도를 각 1/3로 설정하는 경우, 평가될 프로젝트의 평 가 점수는 66.67점이 된다. 상술한 바와 마찬가지로, 상기 평가 점수는 설명의 편의를 위한 일 예시로서 본 발 명은 이에 제한되지 않음에 유의해야 한다. 도 5는 본 발명의 일 실시 예에 따른 프로젝트의 유지보수성을 측정하는 모습을 도시한 도면이다. 본 발명의 일 실시 예에 있어서, 유지보수도의 측정은 평가를 원하는 기간에서 데이터를 추출하고, 클러스터링 알고리즘을 통해 평가할 프로젝트를 구분하며, 클러스터링의 센터 역할을 하는 프로젝트들을 확인하여 등급을 구분하여 측정될 수 있다. 예시적으로, 평가를 원하는 기간 동안 32개의 항목에서 데이터를 추출할 수 있고, 만일 평가를 원하는 기간 동 안의 기록이 없는 경우라면 최대값 혹은 최소값으로 설정할 수 있다. 도 6은 본 발명의 일 실시 예에 따른 프로젝트의 보안성을 측정하는 과정을 개략적으로 도시한 도면이다. 본 발명의 일 실시 예에 있어서, 보안도의 측정은 입력된 목표 호스팅 주소의 모든 기록된 코드들에 대한 삭제 코드들 및 추가 코드들을 입력 받고, 취약한 코드들 및 패치된 코드들을 저장하여, 상기 입력된 코드들 및 상기 저장된 코드들을 조합해서 판단하여 측정될 수 있다. 도 7은 본 발명의 일 실시 예에 따른 예시적인, 데이터베이스에 저장된 패치 코드 및 커밋 메시지에서의 패치 코드를 도시한 도면이다. 도 6 및 도 7을 참조하면, 본 발명의 특수한 실시 예에 있어서 보다 상세하게는, 오픈소스 호스팅 서비스가 깃 허브(GitHub)인 경우, 깃허브에는 모든 업데이트마다 커밋(commit)이라는 기록이 남으며, 기록은 코드 변경 시 간, 삭제된 코드, 새롭게 추가된 코드 등을 포함한다. 보안성 측정을 위한 탐지 도구는 브라우징 컨트롤러, 취 약점 저장소, 취약점 탐색의 3가지 구성 요소를 포함한다. 브라우징 컨트롤러는 타겟 깃허브 주소를 입력 받아 모든 커밋에 대해서 삭제 및 추가된 코드를 읽어 들이고, 취약점 데이터베이스는 탐색하고자 하는 취약점 및 패 치된 코드들을 데이터베이스 형태로 저장하며, 취약점 탐색은 브라우징 컨트롤러에서 전달받은 정보와 취약점 데이터베이스에 저장된 취약한 코드 및 패치 코드를 조합하여 유사도를 확인하고, 취약점의 발생 시기, 패치 시 기에 대한 정보를 자동으로 기록하고 리포트를 작성한다. 추가적으로, 본 발명에 대한 실험 결과는 다음과 같다. 오픈소스 프로젝트의 최신 버전 간을 비교했을 때 종래 의 기술을 사용하면 33.2%의 유사도가 측정되었으나 본 발명의 방법을 사용하면 98.4%로 정확하게 유사도 측정 이 가능했으며 실제 코드 확인 결과로도 대부분의 코드가 유사함을 파악할 수 있었다. 또한, 유지보수성과 보안 성을 통해서도 프로젝트의 신뢰 여부를 예측 가능한 수준에서 파악 가능하였다. 지금까지 살펴본 바와 같이, 본 발명의 실시 예에 따른 오픈소스 프로젝트 코드 평가 방법 및 장치는 오픈소스 프로젝트들의 변경 이력이 반영되도록 기록된 코드들 전부를 입력 받아 전체 코드쌍의 유사도 분석을 통해 분기 시점을 결정하여 이를 이용하여 현재 프로젝트들의 유사성을 판단하는 바, 무의미한 업데이트, 복제 후의 다수 의 업데이트 등 업데이트 사정이 유사성 판단에 미치는 영향을 감소시켜 보다 정확한 프로젝트 평가가 가능해지 는 효과를 제공한다. 이상에서 설명된 장치는 하드웨어 구성요소, 소프트웨어 구성요소, 및/또는 하드웨어 구성요소 및 소프트웨어 구성요소의 조합으로 구현될 수 있다. 예를 들어, 실시 예들에서 설명된 장치 및 구성요소는, 프로세서, 컨트롤 러, ALU(arithmetic logic unit), 디지털 신호 프로세서(digital signal processor), 마이크로컴퓨터, FPGA(field programmable gate array), PLU(programmable logic unit), 마이크로프로세서, 또는 명령 (instruction)을 실행하고 응답할 수 있는 다른 어떠한 장치와 같이, 하나 이상의 범용 컴퓨터 또는 특수 목적 컴퓨터를 이용하여 구현될 수 있다. 처리 장치는 운영 체제(OS) 및 상기 운영 체제 상에서 수행되는 하나 이상 의 소프트웨어 어플리케이션을 수행할 수 있다. 또한, 처리 장치는 소프트웨어의 실행에 응답하여, 데이터를 접 근, 저장, 조작, 처리 및 생성할 수도 있다. 이해의 편의를 위하여, 처리 장치는 하나가 사용되는 것으로 설명"}
{"patent_id": "10-2021-0179092", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "된 경우도 있지만, 해당 기술분야에서 통상의 지식을 가진 자는, 처리 장치가 복수 개의 처리 요소 (processing element) 및/또는 복수 유형의 처리 요소를 포함할 수 있음을 알 수 있다. 예를 들어, 처리 장치는 복수 개의 프로세서 또는 하나의 프로세서 및 하나의 컨트롤러를 포함할 수 있다. 또한, 병렬 프로세서(parallelprocessor)와 같은, 다른 처리 구성(processing configuration)도 가능하다. 한편, 본 발명의 실시예들은 컴퓨터로 읽을 수 있는 기록 매체에 컴퓨터가 읽을 수 있는 코드로 구현하는 것이 가능하다. 컴퓨터가 읽을 수 있는 기록 매체는 컴퓨터 시스템에 의하여 읽혀질 수 있는 데이터가 저장되는 모든 종류의 기록 장치를 포함한다. 컴퓨터가 읽을 수 있는 기록 매체의 예로는 ROM, RAM, CD-ROM, 자기 테이프, 플로피디스크, 광 데이터 저장장치 등이 있으며, 또한 캐리어 웨이브(예를 들어 인터넷을 통한 전송)의 형태로 구현하는 것을 포함한다. 또한, 컴 퓨터가 읽을 수 있는 기록 매체는 네트워크로 연결된 컴퓨터 시스템에 분산되어, 분산 방식으로 컴퓨터가 읽을 수 있는 코드가 저장되고 실행될 수 있다. 그리고 본 발명을 구현하기 위한 기능적인(functional) 프로그램, 코 드 및 코드 세그먼트들은 본 발명이 속하는 기술 분야의 프로그래머들에 의하여 용이하게 추론될 수 있다. 다양한 변형예가 본 발명의 범위를 벗어남이 없이 본 명세서에 기술되고 예시된 구성 및 방법으로 만들어질 수 있으므로, 상기 상세한 설명에 포함되거나 첨부 도면에 도시된 모든 사항은 예시적인 것으로 본 발명을 제한하 기 위한 것이 아니다. 따라서, 본 발명의 범위는 상술한 예시적인 실시예에 의해 제한되지 않으며, 이하의 청구 범위 및 그 균등물에 따라서만 정해져야 한다."}
{"patent_id": "10-2021-0179092", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 장치를 나타내는 블록도이다. 도 2는 본 발명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 방법을 나타내는 플로우차트이다. 도 3은 본 발명의 일 실시 예에 따른 오픈소스 프로젝트 코드 평가 방법에 있어서 분기 시점을 판단하는 방법을 보다 상세하게 나타내는 플로우차트이다. 도 4는 본 발명의 일 실시 예에 따른 분기 시점 판단에 있어서 프로젝트들의 기록된 코드들이 이루는 모든 쌍의 유사도를 판단하는 예시적인 과정을 간략히 도시한 도면이다. 도 5는 본 발명의 일 실시 예에 따른 프로젝트의 유지보수성을 측정하는 모습을 도시한 도면이다. 도 6은 본 발명의 일 실시 예에 따른 프로젝트의 보안성을 측정하는 과정을 개략적으로 도시한 도면이다. 도 7은 본 발명의 일 실시 예에 따른 예시적인, 데이터베이스에 저장된 패치 코드 및 커밋 메시지에서의 패치 코드를 도시한 도면이다."}
