{"patent_id": "10-2022-0054843", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2023-0091750", "출원번호": "10-2022-0054843", "발명의 명칭": "전자 장치 및 이의 동작 방법", "출원인": "삼성전자주식회사", "발명자": "김도현"}}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,그래픽스 데이터를 기초로 렌더 스테이지들(render stages)을 수행하여 프레임들을 생성하는 제1 프로세서;상기 제1 프로세서에 관한 정보를 획득하기 위한 어플리케이션을 저장하는 메모리;디스플레이; 및상기 제1 프로세서, 상기 메모리, 및 상기 디스플레이와 전기적으로 연결되는 제2 프로세서를 포함하고,상기 제2 프로세서는,상기 어플리케이션을 실행하고, 상기 실행된 어플리케이션을 통해 상기 프레임들의 렌더 스테이지 정보를 획득하며, 상기 획득된 렌더 스테이지 정보에서 상기 프레임들 중 제1 프레임의 제1 렌더 스테이지 정보를추출하고, 상기 추출된 제1 렌더 스테이지 정보를 가공하고, 상기 가공된 제1 렌더 스테이지 정보를 포함하는UI(user interface) 화면을 상기 디스플레이에 표시하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 제2 프로세서는,제1 그래픽 렌더링 라이브러리의 큐 제출(queue submission) 시간을 기초로 상기 획득된 렌더 스테이지 정보를프레임 별로 구분하고, 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출하는, 전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서,상기 추출된 제1 렌더 스테이지 정보는,상기 제1 프레임의 렌더 패스(render pass)들 각각의 수행 시간을 포함하고,상기 제2 프로세서는,상기 렌더 패스들 각각의 수행 시간을 기초로 상기 추출된 제1 렌더 스테이지 정보를 정렬하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제3항에 있어서,상기 제2 프로세서는,상기 렌더 패스들 각각의 수행 시간과 상기 렌더 패스들 각각이 수행한 개별 렌더 스테이지의 수행 시간 사이의공개특허 10-2023-0091750-3-비율에 해당하는 막대 그래프를 상기 디스플레이에 표시하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 제2 프로세서는,프레임 버퍼들의 사용 패턴을 이용하여 상기 획득된 렌더 스테이지 정보를 프레임 별로 구분하고, 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,상기 추출된 제1 렌더 스테이지 정보는,상기 프레임 버퍼들 각각의 수행 시간을 포함하고,상기 제2 프로세서는,상기 프레임 버퍼들 각각의 수행 시간을 기초로 상기 추출된 제1 렌더 스테이지 정보를 정렬하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제1항에 있어서,상기 제2 프로세서는,상기 UI 화면 상의 업데이트 버튼에 대한 사용자 입력을 감지하는 경우, 상기 실행된 어플리케이션을 통해 상기제1 프레임의 이후 프레임들의 렌더 스테이지 정보를 획득하고, 상기 이후 프레임들의 렌더 스테이지 정보에서제2 프레임의 제2 렌더 스테이지 정보를 추출하며, 상기 추출된 제2 렌더 스테이지 정보를 가공하고, 상기 UI화면에서 상기 가공된 제1 렌더 스테이지 정보를 상기 가공된 제2 렌더 스테이지 정보로 업데이트하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 획득된 렌더 스테이지 정보는,상기 실행된 어플리케이션에 대응되는 렌더 스테이지 정보와 하나 이상의 실행된 다른 어플리케이션에 대응되는렌더 스테이지 정보를 포함하고,상기 제2 프로세서는,상기 실행된 어플리케이션과 상기 하나 이상의 실행된 다른 어플리케이션 중에서 타겟 어플리케이션을식별하고, 상기 획득된 렌더 스테이지 정보에서 상기 식별된 타겟 어플리케이션에 대응되는 렌더 스테이지 정보를 추출하는,공개특허 10-2023-0091750-4-전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "전자 장치에 있어서,제1 및 제2 어플리케이션을 저장하는 메모리;상기 제1 어플리케이션의 그래픽스 데이터를 기초로 렌더 스테이지들을 수행하여 프레임들을 생성하는 제1 프로세서; 디스플레이; 및상기 메모리, 상기 제1 프로세서, 및 상기 디스플레이를 상기 디스플레이에 표시하는 제2 프로세서를 포함하고,상기 제2 프로세서는,상기 제1 어플리케이션의 실행에 따라 상기 제2 어플리케이션을 실행하고, 상기 실행된 제2 어플리케이션을 통해 상기 프레임들의 렌더 스테이지 정보를 획득하며, 상기 획득된 렌더 스테이지 정보에서 상기 프레임들 중 상기 제1 프레임의 제1 렌더 스테이지 정보를 추출하고, 상기 추출된 제1 렌더 스테이지 정보를 가공하고, 상기가공된 제1 렌더 스테이지 정보를 포함하는 UI 화면을 상기 디스플레이에 표시하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제9항에 있어서,상기 제2 프로세서는,제1 그래픽 렌더링 라이브러리의 큐 제출 시간을 기초로 상기 획득된 렌더 스테이지 정보를 프레임 별로 구분하고, 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출하는, 전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제9항에 있어서,상기 추출된 제1 렌더 스테이지 정보는,상기 제1 프레임의 렌더 패스들 각각의 수행 시간을 포함하고,상기 제2 프로세서는,상기 렌더 패스들 각각의 수행 시간을 기초로 상기 추출된 제1 렌더 스테이지 정보를 정렬하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제11항에 있어서,상기 제2 프로세서는,상기 렌더 패스들 각각의 수행 시간과 상기 렌더 패스들 각각에 의해 수행된 개별 렌더 스테이지의 수행 시간사이의 비율에 해당하는 막대 그래프를 상기 디스플레이에 표시하는,공개특허 10-2023-0091750-5-전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제9항에 있어서,상기 제2 프로세서는,프레임 버퍼들의 사용 패턴을 이용하여 상기 획득된 렌더 스테이지 정보를 프레임 별로 구분하고, 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제13항에 있어서,상기 추출된 제1 렌더 스테이지 정보는,상기 프레임 버퍼들 각각의 수행 시간을 포함하고,상기 제2 프로세서는,상기 프레임 버퍼들 각각의 수행 시간을 기초로 상기 추출된 제1 렌더 스테이지 정보를 정렬하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제9항에 있어서,상기 제2 프로세서는,상기 UI 화면 상의 업데이트 버튼에 대한 사용자 입력을 감지하는 경우, 상기 실행된 어플리케이션을 통해 상기제1 프레임의 이후 프레임들의 렌더 스테이지 정보를 획득하고, 상기 이후 프레임들의 렌더 스테이지 정보에서제2 프레임의 제2 렌더 스테이지 정보를 추출하며, 상기 추출된 제2 렌더 스테이지 정보를 가공하고, 상기 UI화면에서 상기 가공된 제1 렌더 스테이지 정보를 상기 가공된 제2 렌더 스테이지 정보로 업데이트하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제9항에 있어서,상기 획득된 렌더 스테이지 정보는,상기 실행된 제1 어플리케이션에 대응되는 렌더 스테이지 정보, 상기 실행된 제2 어플리케이션에 대응되는 렌더스테이지 정보, 및 실행된 제3 어플리케이션에 대응되는 렌더 스테이지 정보를 포함하고,상기 제2 프로세서는,상기 획득된 렌더 스테이지 정보에서 상기 제1 어플리케이션에 대응되는 렌더 스테이지 정보를 추출하는,전자 장치."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "공개특허 10-2023-0091750-6-전자 장치의 동작 방법에 있어서,그래픽 처리를 수행하는 제1 프로세서에 관한 정보를 획득하기 위한 어플리케이션을 실행하는 동작;상기 실행된 어플리케이션을 통해 상기 수행된 그래픽 처리에 따른 프레임들의 렌더 스테이지 정보를 획득하는동작;상기 획득된 렌더 스테이지 정보에서 상기 프레임들 중 제1 프레임의 제1 렌더 스테이지 정보를 추출하는 동작;상기 추출된 제1 렌더 스테이지 정보를 가공하는 동작; 및상기 가공된 제1 렌더 스테이지 정보를 포함하는 UI 화면을 디스플레이에 표시하는 동작을 포함하는,전자 장치의 동작 방법."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제17항에 있어서,상기 추출하는 동작은, 제1 그래픽 렌더링 라이브러리의 큐 제출 시간을 기초로 상기 획득된 렌더 스테이지 정보를 프레임 별로 구분하는 동작; 및상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출하는 동작을 포함하는, 전자 장치의 동작 방법."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_19", "content": "제17항에 있어서,상기 추출하는 동작은, 프레임 버퍼들의 사용 패턴을 이용하여 상기 획득된 렌더 스테이지 정보를 프레임 별로 구분하는 동작; 및상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출하는 동작을 포함하는,전자 장치의 동작 방법."}
{"patent_id": "10-2022-0054843", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제17항에 있어서,상기 UI 화면 상의 업데이트 버튼에 대한 사용자 입력을 감지하는 경우, 상기 실행된 어플리케이션을 통해 상기제1 프레임의 이후 프레임들의 렌더 스테이지 정보를 획득하는 동작;상기 이후 프레임들의 렌더 스테이지 정보에서 제2 프레임의 제2 렌더 스테이지 정보를 추출하는 동작;상기 추출된 제2 렌더 스테이지 정보를 가공하는 동작; 및상기 UI 화면에서 상기 가공된 제1 렌더 스테이지 정보를 상기 가공된 제2 렌더 스테이지 정보로 업데이트하는동작을 더 포함하는,공개특허 10-2023-0091750-7-전자 장치의 동작 방법."}
{"patent_id": "10-2022-0054843", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "전자 장치가 개시된다. 다양한 실시 예들에 따르면, 전자 장치는 그래픽스 데이터를 기초로 렌더 스테이지들을 수행하여 프레임들을 생성하는 제1 프로세서, 상기 제1 프로세서에 관한 정보를 획득하기 위한 어플리케이션을 저장하는 메모리, 디스플레이, 및 상기 제1 프로세서, 상기 메모리, 및 상기 디스플레이와 전기적으로 연결되는 제2 프로세서를 포함할 수 있다. 상기 제2 프로세서는 상기 어플리케이션을 실행하고, 상기 실행된 어플리케이 션을 통해 상기 프레임들의 렌더 스테이지 정보를 획득하며, 상기 획득된 렌더 스테이지 정보에서 상기 프레임들 중 제1 프레임의 제1 렌더 스테이지 정보를 추출하고, 상기 추출된 제1 렌더 스테이지 정보를 가공하고, 상기 가 공된 제1 렌더 스테이지 정보를 포함하는 UI 화면을 상기 디스플레이에 표시할 수 있다."}
{"patent_id": "10-2022-0054843", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "다양한 실시 예들은 전자 장치에 관한 것이다."}
{"patent_id": "10-2022-0054843", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "전자 장치(예: 모바일 단말)는 그래픽 처리를 위한 GPU(graphic processing unit)를 포함할 수 있다. 기존에는 전자 장치의 GPU의 렌더 스테이지(render stage) 정보를 확인하기 위해서 전자 장치를 PC(personal computer)에 연결하는 것이 필요할 수 있다."}
{"patent_id": "10-2022-0054843", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "PC는 자신의 디스플레이에 전자 장치의 GPU의 렌더 스테이지 정보를 표시할 수 있다. 사용자는 PC의 디스플레 이에 표시된 렌더 스테이지 정보에서 원하는 정보를 확인하기 위해 표시된 렌더 스테이지 정보 중 일부분을 드 래그 또는 줌 인/줌 아웃할 수 있다. 전자 장치를 PC에 연결하지 않고 GPU의 렌더 스테이지 정보를 사용자에게 제공하고, 사용자가 GPU의 렌더 스테이지 정보를 쉽게 확인하게 할 수 있도록 하는 것이 요구될 수 있다. 다양한 실시 예들은 PC에 연결하지 않고 GPU의 렌더 스테이지 정보를 사용자에게 제공할 수 있는 전자 장치를 제공할 수 있다. 다양한 실시 예들은 사용자가 전자 장치의 작은 화면에서 GPU의 렌더 스테이지 정보를 쉽게 확인하게 할 수 있 는 전자 장치를 제공할 수 있다. 본 문서에서 이루고자 하는 기술적 과제는 위에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다 른 기술적 과제들은 아래의 기재로부터 본 발명이 속하는 기술 분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2022-0054843", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "다양한 실시 예들에 따른 전자 장치는 그래픽스 데이터를 기초로 렌더 스테이지들(render stages)을 수행하여 프레임들을 생성하는 제1 프로세서, 상기 제1 프로세서에 관한 정보를 획득하기 위한 어플리케이션을 저장하는 메모리, 디스플레이, 및 상기 제1 프로세서, 상기 메모리, 및 상기 디스플레이와 전기적으로 연결되는 제2 프로 세서를 포함할 수 있다. 상기 제2 프로세서는 상기 어플리케이션을 실행하고, 상기 실행된 어플리케이션을 통 해 상기 프레임들의 렌더 스테이지 정보를 획득하며, 상기 획득된 렌더 스테이지 정보에서 상기 프레임들 중 제 1 프레임의 제1 렌더 스테이지 정보를 추출하고, 상기 추출된 제1 렌더 스테이지 정보를 가공하고, 상기 가공된 제1 렌더 스테이지 정보를 포함하는 UI(user interface) 화면을 상기 디스플레이에 표시할 수 있다. 다양한 실시 예들에 따른 전자 장치는 제1 및 제2 어플리케이션을 저장하는 메모리, 상기 제1 어플리케이션의 그래픽스 데이터를 기초로 렌더 스테이지들을 수행하여 프레임들을 생성하는 제1 프로세서, 디스플레이, 및 상 기 메모리, 상기 제1 프로세서, 및 상기 디스플레이를 상기 디스플레이에 표시하는 제2 프로세서를 포함할 수 있다. 상기 제2 프로세서는 상기 제1 어플리케이션의 실행에 따라 상기 제2 어플리케이션을 실행하고, 상기 실 행된 제2 어플리케이션을 통해 상기 프레임들의 렌더 스테이지 정보를 획득하며, 상기 획득된 렌더 스테이지 정 보에서 상기 프레임들 중 상기 제1 프레임의 제1 렌더 스테이지 정보를 추출하고, 상기 추출된 제1 렌더 스테이 지 정보를 가공하고, 상기 가공된 제1 렌더 스테이지 정보를 포함하는 UI 화면을 상기 디스플레이에 표시할 수 있다. 다양한 실시 예들에 따른 전자 장치의 동작 방법은 그래픽 처리를 수행하는 제1 프로세서에 관한 정보를 획득하 기 위한 어플리케이션을 실행하는 동작, 상기 실행된 어플리케이션을 통해 상기 수행된 그래픽 처리에 따른 프 레임들의 렌더 스테이지 정보를 획득하는 동작, 상기 획득된 렌더 스테이지 정보에서 상기 프레임들 중 제1 프 레임의 제1 렌더 스테이지 정보를 추출하는 동작, 상기 추출된 제1 렌더 스테이지 정보를 가공하는 동작, 및 상기 가공된 제1 렌더 스테이지 정보를 포함하는 UI 화면을 디스플레이에 표시하는 동작을 포함할 수 있다."}
{"patent_id": "10-2022-0054843", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "다양한 실시 예들에 따른 전자 장치는 사용자가 원하는 시점에 GPU의 렌더 스테이지 정보를 확인하게 끔 할 수 있다. 다양한 실시 예들에 따른 전자 장치는 어느 렌더 패스가 얼마나 수행되었는지 및/또는 어떤 렌더 스테이지의 부 하가 큰 지를 전자 장치의 화면에서 사용자가 직관적으로 확인하게 끔 할 수 있다. 이 외에, 본 문서를 통해 직접적 또는 간접적으로 파악되는 다양한 효과들이 제공될 수 있다."}
{"patent_id": "10-2022-0054843", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하, 실시 예들을 첨부된 도면들을 참조하여 상세하게 설명한다. 첨부 도면을 참조하여 설명함에 있어, 도면 부호에 관계없이 동일한 구성 요소는 동일한 참조 부호를 부여하고, 이에 대한 중복되는 설명은 생략하기로 한 다. 도 1은, 다양한 실시 예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워크)를 통하여 전자 장치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일실시 예에 따르면, 전자 장치는 서버를 통하여 전자 장치와 통신할 수 있다. 일실시 예에 따르면, 전자 장치는 프로세서, 메모리, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스 , 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통신 모듈 , 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시 예에서는, 전자 장치(10 1)에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가 될 수 있다. 어떤 실시 예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안테 나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시 예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세 서는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메모리에 저장할 수 있다. 일실시 예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또는 어플리케이션 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또 는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로 세서를 포함하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특화되도록 설정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시 예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시 예에 따르면, 보조 프로세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restricted boltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시 예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시 예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 디스플레이 모듈 은 예시적으로 폴딩 가능한 구조 및/또는 롤러블 구조로 구현될 수 있다. 예시적으로 디스플레이 모듈 의 표시 화면의 크기는 폴딩시 감소되고, 언폴딩시 확장될 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시 예에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시 예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시 예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시 예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시 예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시 예에 따르면, 카메라 모듈은 하나 이 상의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시 예에 따르면, 전력 관리 모 듈은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시 예에 따르면, 배터 리는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다. 통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시 예에 따르면, 통 신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시 예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시 예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시 예에 따르면, 안테나 모듈은 복수의 안테나 들(예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통 신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통 신 모듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시 예에 따르면, 방사체 이외에 다 른 부품(예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시 예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시 예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시 예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시 예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는 추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시 예에 있어서, 외부 의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망 을 이용한 지능형 서버일 수 있다. 일실시 예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워 크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2은 다양한 실시 예들에 따른, 프로그램을 예시하는 블록도이다. 일 실시 예에 따르면, 프로그램 은 전자 장치의 하나 이상의 리소스들을 제어하기 위한 운영 체제, 미들웨어, 또는 상기 운영 체제에서 실행 가능한 어플리케이션을 포함할 수 있다. 운영 체제는, 예를 들면, AndroidTM, iOSTM, WindowsTM, SymbianTM, TizenTM, 또는 BadaTM를 포함할 수 있다. 프로그램 중 적어도 일부 프로그램은, 예를 들면, 제조 시에 전자 장치에 프리로드되거나, 또는 사용자에 의해 사용 시 외부 전자 장치(예: 전자 장치(102 또는 104), 또는 서버)로부터 다운로드되거나 갱신 될 수 있다. 운영 체제는 전자 장치의 하나 이상의 시스템 리소스들(예: 프로세스, 메모리, 또는 전원)의 관리(예: 할당 또는 회수)를 제어할 수 있다. 운영 체제는, 추가적으로 또는 대체적으로, 전자 장치 의 다른 하드웨어 디바이스, 예를 들면, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터 리, 통신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 구동하기 위한 하나 이상의 드라이 버 프로그램들을 포함할 수 있다. 미들웨어는 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보가 어플리케이션 에 의해 사용될 수 있도록 다양한 기능들을 어플리케이션으로 제공할 수 있다. 미들웨어는, 예를 들 면, 어플리케이션 매니저, 윈도우 매니저, 멀티미디어 매니저, 리소스 매니저, 파워 매니 저, 데이터베이스 매니저, 패키지 매니저, 커넥티비티 매니저, 노티피케이션 매니저, 로케이션 매니저, 그래픽 매니저, 시큐리티 매니저, 통화 매니저, 또는 음성 인식 매니저를 포함할 수 있다. 어플리케이션 매니저는, 예를 들면, 어플리케이션의 생명 주기를 관리할 수 있다. 윈도우 매니저 는, 예를 들면, 화면에서 사용되는 하나 이상의 GUI 자원들을 관리할 수 있다. 멀티미디어 매니저는, 예를 들면, 미디어 파일들의 재생에 필요한 하나 이상의 포맷들을 파악하고, 그 중 선택된 해당하는 포맷에 맞 는 코덱을 이용하여 상기 미디어 파일들 중 해당하는 미디어 파일의 인코딩 또는 디코딩을 수행할 수 있다. 리 소스 매니저는, 예를 들면, 어플리케이션의 소스 코드 또는 메모리의 메모리의 공간을 관리할 수 있다. 파워 매니저는, 예를 들면, 배터리의 용량, 온도 또는 전원을 관리하고, 이 중 해당 정보를 이용하여 전자 장치의 동작에 필요한 관련 정보를 결정 또는 제공할 수 있다. 일 실시 예에 따르면, 파워 매니저는 전자 장치의 바이오스(BIOS: basic input/output system)(미도시)와 연동할 수 있다. 데이터베이스 매니저는, 예를 들면, 어플리케이션에 의해 사용될 데이터베이스를 생성, 검색, 또는 변경할 수 있다. 패키지 매니저는, 예를 들면, 패키지 파일의 형태로 배포되는 어플리케이션의 설치 또는 갱신을 관리할 수 있다. 커넥티비티 매니저는, 예를 들면, 전자 장치와 외부 전자 장치 간의 무선 연 결 또는 직접 연결을 관리할 수 있다. 노티피케이션 매니저는, 예를 들면, 지정된 이벤트(예: 착신 통화, 메시지, 또는 알람)의 발생을 사용자에게 알리기 위한 기능을 제공할 수 있다. 로케이션 매니저는, 예를 들면, 전자 장치의 위치 정보를 관리할 수 있다. 그래픽 매니저는, 예를 들면, 사용자에게 제공될 하 나 이상의 그래픽 효과들 또는 이와 관련된 사용자 인터페이스를 관리할 수 있다. 시큐리티 매니저는, 예를 들면, 시스템 보안 또는 사용자 인증을 제공할 수 있다. 통화(telephony) 매니저 는, 예를 들면, 전자 장치에 의해 제공되는 음성 통화 기능 또는 영상 통화 기능을 관리할 수 있다. 음성 인식 매니저는, 예를 들면, 사용자의 음성 데이터를 서버로 전송하고, 그 음성 데이터에 적어도 일부 기반하여 전자 장치에서 수행될 기능에 대응하는 명령어(command), 또는 그 음성 데이터에 적어도 일 부 기반하여 변환된 문자 데이터를 서버로부터 수신할 수 있다. 일 실시예에 따르면, 미들웨어는 동 적으로 기존의 구성요소를 일부 삭제하거나 새로운 구성요소들을 추가할 수 있다. 일 실시예에 따르면, 미들웨 어의 적어도 일부는 운영 체제의 일부로 포함되거나, 또는 운영 체제와는 다른 별도의 소프트웨 어로 구현될 수 있다. 어플리케이션은, 예를 들면, 홈, 다이얼러, SMS/MMS, IM(instant message), 브라우 저, 카메라, 알람, 컨택트, 음성 인식, 이메일, 달력, 미디어 플레이어 , 앨범, 와치, 헬스(예: 운동량 또는 혈당과 같은 생체 정보를 측정), 또는 환경 정보 (예: 기압, 습도, 또는 온도 정보 측정) 어플리케이션을 포함할 수 있다. 일 실시 예에 따르면, 어플리케 이션은 전자 장치와 외부 전자 장치 사이의 정보 교환을 지원할 수 있는 정보 교환 어플리케이션(미 도시)을 더 포함할 수 있다. 정보 교환 어플리케이션은, 예를 들면, 외부 전자 장치로 지정된 정보 (예: 통화, 메시지, 또는 알람)를 전달하도록 설정된 노티피케이션 릴레이 어플리케이션, 또는 외부 전자 장치를 관리하도 록 설정된 장치 관리 어플리케이션을 포함할 수 있다. 노티피케이션 릴레이 어플리케이션은, 예를 들면, 전자 장치의 다른 어플리케이션(예: 이메일 어플리케이션)에서 발생된 지정된 이벤트(예: 메일 수신)에 대 응하는 알림 정보를 외부 전자 장치로 전달할 수 있다. 추가적으로 또는 대체적으로, 노티피케이션 릴레이 어플 리케이션은 외부 전자 장치로부터 알림 정보를 수신하여 전자 장치의 사용자에게 제공할 수 있다. 장치 관리 어플리케이션은, 예를 들면, 전자 장치와 통신하는 외부 전자 장치 또는 그 일부 구성 요소(예: 외부 전자장치의 디스플레이 모듈 또는 카메라 모듈)의 전원(예: 턴-온 또는 턴-오프) 또는 기능(예: 밝기, 해 상도, 또는 포커스)을 제어할 수 있다. 장치 관리 어플리케이션은, 추가적으로 또는 대체적으로, 외부 전자 장 치에서 동작하는 어플리케이션의 설치, 삭제, 또는 갱신을 지원할 수 있다. 일 실시 예에 따르면, 어플리케이션은 하나 이상의 게임 어플리케이션(미도시)과 GPU 관련 정보를 표시하 는 GPU 와치(watch) 어플리케이션(미도시)을 포함할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정 되지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다.도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이 템에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복 수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구 들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제1\", \"제2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분 하기 위해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤 (예: 제1) 구성요소가 다른(예: 제2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직 접적으로(예: 유선으로), 무선으로, 또는 제3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일 실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 도 1의 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD- ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치 들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우 에, 컴퓨터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메 모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실 시예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이 상의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모 듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소 들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의 해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다. 도 3은 다양한 실시 예들에 따른, 전자 장치의 일 예시를 설명하기 위한 블록도이다. 다양한 실시 예들에 따르면, 도 3의 전자 장치(예: 도 1의 전자 장치)는 메모리(예: 도 1의 메 모리), 제1 프로세서(예: 도 1의 보조 프로세서), 디스플레이(예: 도 1의 디스플레이 모듈 ), 및 제2 프로세서(예: 도 1의 메인 프로세서)를 포함할 수 있다. 다양한 실시 예들에 따르면, 제1 프로세서는 GPU(graphic processing unit)에 해당할 수 있고 제2 프로세 서는 CPU(central processing unit)에 해당할 수 있다. 다양한 실시 예들에 따르면, 제1 프로세서와 제2 프로세서는 어플리케이션 프로세서(AP: application processor)에 포함될 수 있다. AP는 SoC(system on chip)으로 구성될 수 있어 제1 프로세서와 제2 프로 세서를 포함할 수 있다. 다양한 실시 예들에 따르면, 제1 프로세서는 그래픽스 데이터를 기초로 그래픽스 파이프라인(graphics pipeline)을 수행할 수 있다. 그래픽스 데이터는, 예를 들어, 버텍스(vertex) 데이터, 인덱스(index) 데이터, 속성(attribute) 데이터, 셰이더(shader), 및/또는 텍스쳐(texture) 중 하나 이상 또는 전부를 포함할 수 있으 니, 이에 제한되지 않는다. 다양한 실시 예들에 따르면, 메모리는 제1 어플리케이션(예: 게임 어플리케이션)과 제1 프로세서에 관한 정보를 획득 및/또는 표시하는 제2 어플리케이션(예: 도 2를 통해 설명한 GPU watch 어플리케이션)을 저장 할 수 있다. 다양한 실시 예들에 따르면, 제2 어플리케이션은 제1 프로세서의 렌더 스테이지 정보를 가공하기 위한 렌 더 스테이지 정보 가공부(미도시) 및/또는 제1 프로세서로부터 렌더 스테이지 정보를 획득(또는 수신)하기 위한 렌더 스테이지 정보 수신부(미도시)를 포함할 수 있다. 일 실시 예에 있어서, 렌더 스테이지 정보 가공부 및/또는 렌더 스테이지 정보 수신부는 라이브러리 형태일 수 있으나 이에 제한되지 않는다. 일 실시 예에 있어 서, 제2 프로세서는 렌더 스테이지 정보 수신부를 통해 실행 중인 어플리케이션(예: 제1 어플리케이션 및/ 또는 제2 어플리케이션)의 프로세스 별 렌더 스테이지 정보를 제1 프로세서로부터 수신할 수 있고, 수신된 렌더 스테이지 정보에서 타겟 어플리케이션(예: 제1 어플리케이션)의 렌더 스테이지 정보를 추출할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제2 어플리케이션에 대한 실행 요청(예: 사용자의 제2 어플리 케이션의 아이콘에 대한 터치 입력)이 있는 경우, 제2 어플리케이션을 실행할 수 있다. 제2 프로세서는 제1 어플리케이션에 대한 실행 요청(예: 사용자의 제1 어플리케이션의 아이콘에 대한 터치 입력)이 있는 경우, 제1 어플리케이션을 실행할 수 있다. 일 실시 예에 있어서, 사용자는 원활한 렌더 스테이지 정보를 획득할 수 있도록 제2 어플리케이션을 실행 시킨 후에 제1 어플리케이션을 실행시킬 수 있다. 제2 프로세서는 제1 어플리케이션을 통해 그래픽스 API(application programming interface)를 호출하여 그래픽 렌더링 라이브러리 (예:openGLES(open graphics library embedded system), 불칸(vulkan))의 기능을 이용할 수 있다. 다양한 실시 예들에 따르면, 제1 프로세서는 제1 어플리케이션이 실행 중인 경우, 제1 어플리케이션의 그 래픽스 데이터를 기초로 그래픽 처리를 수행할 수 있다. 일례로, 제1 프로세서는 렌더 스테이지(render stage)들을 수행할 수 있다. 렌더 스테이지들은, 예를 들어, 비닝(binning) 동작, 렌더(render) 동작, 컬러 저 장 동작, 데이터 복사를 나타내는 Blit(block image transfer) 동작을 포함할 수 있으나 이에 제한되지 않는다. 제2 프로세서는 그래픽 처리를 통해 디스플레이에 출력될 프레임들을 생성할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 실행된 제2 어플리케이션을 통해 제1 프로세서로부터 프 레임들의 렌더 스테이지 정보를 획득(또는 수신)할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 프레임들의 렌더 스테이지 정보에서 제1 프레임(예: 가장 최 근 프레임의 이전 프레임)의 렌더 스테이지 정보를 추출할 수 있다. 후술하겠지만, 프레임들의 렌더 스테이지 정보에서 가장 최근 프레임의 렌더 스테이지 정보는 그래픽 처리가 완료되지 않은 상태에서 생성된 것일 수 있 다. 제2 프로세서는 프레임들의 렌더 스테이지 정보에서 제1 프레임(예: 가장 최근 프레임의 이전 프레임)의 렌더 스테이지 정보를 추출할 수 있다. 이하, 제1 프레임의 렌더 스테이지 정보를 \"제1 렌더 스테이 지 정보\"라 지칭한다. 일 실시 예에 있어서, 제2 프로세서는 제1 그래픽 렌더링 라이브러리(예: vulka n))의 큐 제출(queue submission) 시간을 기초로 프레임들의 렌더 스테이지 정보를 프레임 별로 구분할 수 있고, 이러한 구분 결과에서 제1 렌더 스테이지 정보를 추출할 수 있다. 이에 대한 실시 예는 도 4와 도 5를 통해 자세히 설명한다. 다른 실시 예에 있어서, 제2 프로세서는 프레임 버퍼들의 사용 패턴을 기초로 프 레임들의 렌더 스테이지 정보를 프레임 별로 구분할 수 있고, 이러한 구분 결과에서 제1 렌더 스테이지 정보를 추출할 수 있다. 이에 대한 실시 예는 도 6과 도 7을 통해 자세히 설명한다. 도 4 내지 도 5는 다양한 실시 예들에 따른, 전자 장치가 프레임들의 렌더 스테이지 정보에서 제1 렌더 스테이 지 정보를 추출하는 일 예시를 설명하기 위한 도면이다.다양한 실시 예들에 따르면, 제2 프로세서는 제2 어플리케이션을 실행할 수 있다. 제2 프로세서 는 제1 어플리케이션(예: 게임 어플리케이션)을 실행할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제1 어플리케이션을 실행하는 경우, 제1 어플리케이션 을 통해 그래픽스 API(401-1)를 호출하여 제1 그래픽 렌더링 라이브러리(예: vulkan)의 기능을 이용 할 수 있다. 일 실시 예에 있어서, 제1 어플리케이션은 그래픽스 API(401-1)를 사용(또는 호출)하여 제1 그래픽 렌더링 라이브러리의 기능을 이용할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제1 그래픽 렌더링 라이브러리를 통해 데이터 저장을 위 한 큐를 제1 프로세서 전용 메모리(미도시)에 할당할 수 있다. 일 실시예에 있어서 상기 제1프로세서 전용 메모리는 제1 프로세서 내의 메모리(미도시)일 수 있다. 다른 실시 예에 있어서, 상기 제1프로세서 전용 메모리는 메모리(예: 도 1의 메모리, 도 3의 메모리)에 포함된 메모리 일 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제1 그래픽 렌더링 라이브러리를 통해 큐 제출을 수행할 수 있다. 큐 제출은 프레임의 출력(또는 생성)을 위한 그래픽 처리가 수행될 수 있도록 제2 프로세서가 제1 그래픽 렌더링 라이브러리를 통해 하나 이상의 명령어를 큐에 인큐잉(enqueuing)하는 동작을 나 타낼 수 있다. 도 4에 도시된 예에서, 제2 프로세서는 프레임1의 생성을 위한 그래픽 처리가 수행될 수 있도록 시간 t1에 서 제1 그래픽 렌더링 라이브러리를 통해 큐 제출을 수행할 수 있다. 제1 프로세서는 그래픽 처리 (예: 렌더 스테이지들)를 수행하여 프레임1을 생성할 수 있다. 일례로, 제1 프로세서는 렌더 패스들을 이 용하여 프레임1을 생성할 수 있다. 렌더 패스들 각각은 하나 이상의 렌더 스테이지를 수행할 수 있다. 도 4에 도시된 예에서, 제2 프로세서는 프레임2의 생성을 위한 그래픽 처리가 수행될 수 있도록 시간 t2에 서 제1 그래픽 렌더링 라이브러리를 통해 큐 제출을 수행할 수 있다. 제1 프로세서는 렌더 패스들을 이용하여 프레임2를 생성할 수 있다. 제2 프로세서는 프레임n-1의 생성을 위한 그래픽 처리가 수행될 수 있 도록 시간 tn-1에서 제1 그래픽 렌더링 라이브러리를 통해 큐 제출을 수행할 수 있다. 제1 프로세서 는 렌더 패스들을 이용하여 프레임n-1을 생성할 수 있다. 제2 프로세서는 프레임n의 생성을 위한 그래픽 처 리가 수행될 수 있도록 시간 tn에서 제1 그래픽 렌더링 라이브러리를 통해 큐 제출을 수행할 수 있다. 제 1 프로세서는 렌더 패스들을 이용하여 프레임n을 생성할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제2 어플리케이션의 제2 라이브러리를 통해 프레임 들(예: 프레임1 내지 프레임n)의 렌더 스테이지 정보를 제1 프로세서로부터 획득할 수 있다. 도 5에 렌더 스테이지 정보의 예시가 도시된다. 도 5에 도시된 예에서, 프레임들의 렌더 스테이지 정보는 일련의 시간 동안(예: 도 5의 ta~tz)의 프레임1 내지 프레임n의 렌더 스테이지 정보를 포함할 수 있다. 각 프레임의 렌더 스테이지 정보는, 예를 들어, 각 프레 임의 렌더 패스들 각각의 수행 시간, 각 프레임의 렌더 패스들 각각이 수행한 렌더 스테이지를 포함할 수 있으 나 이에 제한되지 않는다. 도 5의 렌더 스테이지 정보는 각 프레임 별로 구분되어 있지 않을 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 렌더 스테이지 정보 가공부를 통해 큐 제출 시간을 기초 로 렌더 스테이지 정보를 프레임 별로 구분할 수 있다. 도 5에 도시된 예에서, 제2 프로세서는 프레 임1 내지 프레임n 각각에 대한 큐 제출 시간을 제1 그래픽 렌더링 라이브러리를 통해 획득할 수 있고, 획득 된 각 큐 제출 시간을 기초로 렌더 스테이지 정보 가공부를 통해 렌더 스테이지 정보를 각 프레임 별 렌더 스테이지 정보로 구분할 수 있다. 도 5의 렌더 스테이지 정보의 시간(ta) 내지 시간(tb)가 프레임1에 대한 큐 제출 시간(t1)과 프레임2에 대한 큐 제출 시간(t2) 사이에 있으면, 제2 프로세서는 렌더 스테이지 정보 가공부를 통해 시간(ta) 내지 시간(tb) 동안의 렌더 스테이지 정보(510-1)를 프레임1의 렌더 스테이지 정보(또는 프레임1 동안의 렌더 스테이지 정보)로 식별 또는 결정할 수 있다. 도 5의 렌더 스테이지 정보 의 시간(tb+1) 내지 시간(tc)가 프레임2에 대한 큐 제출 시간(t2)과 프레임3에 대한 큐 제출 시간(t3) 사이에 있으 면, 제2 프로세서는 렌더 스테이지 정보 가공부를 통해 시간(tb+1) 내지 시간(tc) 동안의 렌더 스테이지 정보(510-2)를 프레임2의 렌더 스테이지 정보(또는 프레임2 동안의 렌더 스테이지 정보)로 식별 또는 결정할 수 있다. 도 5의 렌더 스테이지 정보의 시간(tx) 내지 시간(ty)가 프레임n-1에 대한 큐 제출 시간(t n-1)과 프레임n에 대한 큐 제출 시간(tn) 사이에 있으면, 제2 프로세서는 렌더 스테이지 정보 가공부를 통해 시간(tx) 내지 시간(ty) 동안의 렌더 스테이지 정보(510-(n-1))를 프레임n-1의 렌더 스테이지 정보(또는 프레임n-1 동안의 렌더 스테이지 정보)로 식별 또는 결정할 수 있다. 제2 프로세서는 렌더 스테이지 정보 가공부 를 통해 도 5의 렌더 스테이지 정보에서의 시간(ty+1) 내지 시간(tz) 동안의 렌더 스테이지 정보(510- n)를 프레임n의 렌더 스테이지 정보(또는 프레임n 동안의 렌더 스테이지 정보)로 식별 또는 결정할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 구분된 각 프레임별 렌더 스테이지 정보에서 가장 최근 프레 임(또는 마지막 프레임)의 렌더 스테이지 정보가 아닌 가장 최근 프레임의 이전 프레임의 렌더 스테이지 정보를 추출 또는 획득할 수 있다. 가장 최근 프레임의 렌더 스테이지 정보는 그래픽 처리가 완료되지 않은 상태에서 생성된 것일 수 있다. 제2 프로세서는 가장 최근 프레임의 렌더 스테이지 정보가 아닌 가장 최근 프레임 의 이전 프레임의 렌더 스테이지 정보를 추출할 수 있다. 도 5를 통해 설명한 예에서, 제2 프로세서는 구 분된 각 프레임별 렌더 스테이지 정보에서 프레임n-1의 렌더 스테이지 정보((510-(n-1)))를 추출할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 추출된 제1 렌더 스테이지 정보(예: 렌더 스테이지 정보 ((510-(n-1))))를 가공할 수 있다. 일례로, 렌더 스테이지 정보((510-(n-1))는 프레임n-1의 렌더 패스들 각각의 수행 시간, 프레임n-1의 렌더 패스들 각각이 수행한 렌더 스테이지를 포함할 수 있다. 제2 프로세서는 렌 더 스테이지 정보((510-(n-1))를 프레임n-1의 렌더 패스들 각각의 수행 시간을 기준으로 정렬할 수 있다. 다양한 실시 예들에 따르면, 프레임들(예: 프레임1 내지 프레임n) 중 적어도 일부 또는 전부에는 제1 어플리케이 션의 실행 화면, 제2 어플리케이션의 실행 화면, 및 제3 어플리케이션(미도시)(예: 상태를 표시하기 위한 노티피케이션 어플리케이션)의 실행 화면이 합성되어 있을 수 있다. 일 실시 예에 있어서, 제1 프로세서 는 제2 어플리케이션의 실행 화면을 그릴 수 있다. 제3 어플리케이션이 실행 중일 수 있고, 제1 프 로세서는 제3 어플리케이션의 실행 화면을 그릴 수 있다. 제1 프로세서는 제1 어플리케이션의 실행 화면, 제2 어플리케이션의 실행 화면, 및 제3 어플리케이션의 실행 화면을 합성한 프레임(또는 이미 지)을 생성할 수 있다. 다양한 실시 예들에 따르면, 프레임들의 렌더 스테이지 정보(예: 도 4의 렌더 스테이지 정보)는, 예를 들 어, 제1 어플리케이션에 대응되는 렌더 스테이지 정보, 제2 어플리케이션에 대응되는 렌더 스테이지 정보, 및 제3 어플리케이션에 대응되는 렌더 스테이지 정보를 포함할 수 있다. 제2 프로세서는 획득한 렌 더 스테이지 정보(예: 도 4의 렌더 스테이지 정보)에서 제1 어플리케이션에 대응되는 렌더 스테이지 정보(예: 도 5의 렌더 스테이지 정보)를 추출할 수 있다. 획득한 렌더 스테이지 정보(예: 도 4의 렌더 스 테이지 정보)는 실행 중인 복수의 어플리케이션들(예: 제1 어플리케이션, 제2 어플리케이션, 및 제3 어플리케이션) 각각에 대응되는 렌더 스테이지 정보를 포함할 수 있다. 제2 프로세서는 실행 중인 복 수의 어플리케이션들(예: 제1 어플리케이션, 제2 어플리케이션, 및 제3 어플리케이션) 중 타겟 어플 리케이션(예: 제1 어플리케이션)을 식별할 수 있다. 제2 프로세서는 획득한 렌더 스테이지 정보(예: 도 4의 렌더 스테이지 정보) 중 타겟 어플리케이션(예: 제1 어플리케이션)에 대응되는 렌더 스테이지 정보를 추출할 수 있다. 일례로, 제2 프로세서는 렌더 스테이지 정보 수신부를 통해 제1 어플리케이 션의 프로세스 ID를 확인할 수 있고, 제1 어플리케이션의 프로세스 ID를 이용하여 렌더 스테이지 정 보에서 제1 어플리케이션에 대응되는 렌더 스테이지 정보를 추출할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제1 어플리케이션에 대응되는 렌더 스테이지 정보를 프 레임 별로 구분할 수 있고, 구분된 각 프레임별 렌더 스테이지 정보에서 제1 렌더 스테이지 정보(예: 렌더 스테 이지 정보((510-(n-1))))를 추출할 수 있으며, 추출된 제1 렌더 스테이지 정보를 가공할 수 있다. 도 6 내지 도 7은 다양한 실시 예들에 따른, 전자 장치가 프레임들의 렌더 스테이지 정보에서 제1 렌더 스테이 지 정보를 추출하는 다른 예시를 설명하기 위한 도면이다. 다양한 실시 예들에 따르면, 제2 프로세서는 제2 어플리케이션을 실행할 수 있다. 제2 프로세서 는 제1 어플리케이션(예: 게임 어플리케이션)을 실행할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제1 어플리케이션을 실행하는 경우, 제1 어플리케이션 을 통해 그래픽스 API(601-1)를 호출하여 제2 그래픽 렌더링 라이브러리(예: openGLES)의 기능을 이 용할 수 있다. 일 실시 예에 있어서, 제1 어플리케이션은 그래픽스 API(601-1)를 사용(또는 호출)하여 제 2 그래픽 렌더링 라이브러리의 기능을 이용할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제1 어플리케이션의 그래픽스 데이터에 그래픽 처리가 수행될 수 있도록 제2 그래픽 렌더링 라이브러리를 통해 프레임 버퍼들(610-1 내지 610-m)을 할당할 수 있 다. 일 실시 예에 있어서, 제2 프로세서는 제2 그래픽 렌더링 라이브러리를 통해 제1 프로세서 내의 메모리(미도시)에 프레임 버퍼들(610-1 내지 610-m)을 할당할 수 있다. 다른 실시 예에 있어서, 제2 프로 세서는 제2 그래픽 렌더링 라이브러리를 통해 프레임 버퍼들(610-1 내지 610-m)을 메모리(예: 도 1의 메모리, 도 3의 메모리)에 할당할 수 있다. 다양한 실시 예들에 따르면, 프레임 버퍼들(610-1 내지 610-m) 각각은 제1 어플리케이션이 커널(예: 메모 리 관리자)로부터 할당 받은 그래픽 버퍼일 수 있다. 일례로, 제2 프로세서는 커널의 버퍼 할당이 있는 경우, 제2 그래픽 렌더링 라이브러리를 통해 그래픽 버퍼들(예: 프레임 버퍼들(610-1 내지 610-m))을 제1 프로세서 내의 메모리(미도시)에 할당 또는 메모리(예: 도 1의 메모리, 도 3의 메모리)에 할당 할 수 있다. 다른 실시 예에 있어서, 프레임 버퍼들(610-1 내지 610-m) 각각은 제2 그래픽스 API의 프레임 버 퍼로, 컬러, 깊이, 스텐실(stencil) 첨부(attachment)를 사용할 수 있는 프레임 버퍼 오브젝트(FBO: frame buffer object)에 해당할 수 있다. 다양한 실시 예들에 따르면, 제1 프로세서는 프레임 버퍼#1(610-1)→프레임 버퍼#2(610-2)→, … , →프레 임 버퍼#m(610-m)의 순서로 프레임 버퍼들(610-1 내지 610-m)을 반복 사용하여 제1 어플리케이션의 실행 화면이 그려진 프레임들(예: 프레임1 내지 프레임n)을 생성할 수 있다. 일례로, 제1 프로세서는 프레임 버 퍼#1(610-1)→프레임 버퍼#2(610-2)→, … , →프레임 버퍼#m(610-m)의 순서로 프레임 버퍼들(610-1 내지 610- m)을 사용하여 프레임1을 생성할 수 있다. 제1 프로세서는 프레임 버퍼#1(610-1)→프레임 버퍼#2(610- 2)→, … , →프레임 버퍼#m(610-m)의 순서로 프레임 버퍼들(610-1 내지 610-m)을 사용하여 프레임2를 생성할 수 있다. 제1 프로세서는 프레임 버퍼#1(610-1)→프레임 버퍼#2(610-2)→, … , →프레임 버퍼#m(610- m)의 순서로 프레임 버퍼들(610-1 내지 610-m)을 사용하여 프레임n을 생성할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제2 어플리케이션의 렌더 스테이지 정보 수신부를 통해 프레임들(예: 프레임1 내지 프레임n)의 렌더 스테이지 정보를 제1 프로세서로부터 획득할 수 있 다. 렌더 스테이지 정보의 일 예시가 도 7에 도시된다. 도 7에 도시된 예에서, 렌더 스테이지 정보는 프레임 버퍼들(610-1 내지 610-m) 각각의 ID와 프레임1 내지 프레임n의 렌더 스테이지 정보를 포함할 수 있다. 각 프레임의 렌더 스테이지 정보는, 예를 들어, 프레임 버퍼 들(610-1 내지 610-m) 각각의 수행 시간, 제1 프로세서가 프레임 버퍼들(610-1 내지 610-m) 각각을 이용하 여 수행한 렌더 스테이지의 종류를 포함할 수 있으나, 이에 제한되지 않는다. 프레임 버퍼들(610-1 내지 610- m) 각각의 수행 시간은, 예를 들어, 제1 프로세서가 프레임 버퍼들(610-1 내지 610-m) 각각을 이용하여 렌 더 스테이지를 수행한 시간을 나타낼 수 있다. 일례로, 제1 프로세서(예: 도 3의 제 1 프로세서)가 프레 임 버퍼(610-1)를 이용하여 binning 동작을 1.5ms(millisecond)만큼 수행할 수 있고, render 동작을 0.5ms만큼 수행할 수 있으며, 다른 동작을 수행하지 않은 경우, 프레임 버퍼(610-1)의 수행 시간은 2ms일 수 있다. 도 7 의 렌더 스테이지 정보는 각 프레임 별로 구분되어 있지 않을 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서(예: 도 3의 제 2 프로세서)는 렌더 스테이지 정보 가공부 를 통해 프레임 버퍼들(610-1 내지 610-m)의 사용 패턴을 기초로 렌더 스테이지 정보를 프레임 별로 구분 할 수 있다. 도 7에 도시된 예에서, 제2 프로세서는 하나의 프레임에 대한 그래픽 처리를 위해 프레임 버 퍼#1(610-1)→프레임 버퍼#2(610-2)→, … , →프레임 버퍼#m(610-m)의 순서로 프레임 버퍼들(610-1 내지 610- m)이 사용되고 있는 것을 알고 있을 수 있다. 제2 프로세서는 프레임 버퍼들(610-1 내지 610-m)의 사용 패턴을 알고 있을 수 있다. 제2 프로세서는 렌더 스테이지 정보에서 프레임 버퍼 ID(identification)가 1에서 시작하여 m으로 끝나는 구간 동안의 렌더 스테이지 정보를 렌더 스테이지 정보 가 공부를 통해 개별 프레임의 렌더 스테이지 정보로 식별 또는 결정할 수 있다. 제2 프로세서는 렌더스테이지 정보에서 렌더 스테이지 정보(710-1)를 렌더 스테이지 정보 가공부를 통해 프레임1의 렌더 스테이지 정보로 식별 또는 결정할 수 있고, 렌더 스테이지 정보(710-2)를 렌더 스테이지 정보 가공부를 통해 프레임2의 렌더 스테이지 정보로 식별 또는 결정할 수 있다. 제2 프로세서는 렌더 스테이지 정보 에서 렌더 스테이지 정보(710-(n-1))를 렌더 스테이지 정보 가공부를 통해 프레임n-1의 렌더 스테이지 정보로 식별 또는 결정할 수 있고, 렌더 스테이지 정보(710-n)를 렌더 스테이지 정보 가공부를 통해 프레 임n의 렌더 스테이지 정보로 식별 또는 결정할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 구분된 각 프레임별 렌더 스테이지 정보에서 가장 최근 프레 임(또는 마지막 프레임)의 렌더 스테이지 정보가 아닌 가장 최근 프레임의 이전 프레임의 렌더 스테이지 정보를 추출 또는 획득할 수 있다. 도 7에 도시된 예에서, 프레임n의 그래픽 처리가 완료되지 않을 수 있어, 제2 프 로세서는 렌더 스테이지 정보에서 프레임n-1의 렌더 스테이지 정보(710-(n-1))를 추출할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 추출된 제1 렌더 스테이지 정보(예: 렌더 스테이지 정보(710- (n-1)))를 가공할 수 있다. 일례로, 렌더 스테이지 정보(710-(n-1))는 프레임n-1의 프레임 버퍼들(610-1 내지 610-m) 각각의 수행 시간, 프레임n-1의 프레임 버퍼들(610-1 내지 610-m) 각각에 의해 수행된 렌더 스테이지를 포함할 수 있다. 제2 프로세서는 렌더 스테이지 정보(710-(n-1))를 프레임 버퍼들(610-1 내지 610-m) 각 각의 수행 시간을 기준으로 정렬할 수 있다. 다양한 실시 예들에 따르면, 제3 어플리케이션(미도시)(예: 상태를 표시하기 위한 노티피케이션 어플리케이션) 이 실행 중일 수 있다. 프레임들의 렌더 스테이지 정보(예: 도 6의 렌더 스테이지 정보)는 실행 중인 복 수의 어플리케이션들(예: 제1 어플리케이션, 제2 어플리케이션, 및/또는 제3 어플리케이션) 각각에 대응되는 렌더 스테이지 정보를 포함할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 획득한 렌더 스테이지 정보에서 제1 어플리케이션 에 대응되는 렌더 스테이지 정보(예: 도 7의 렌더 스테이지 정보)를 추출할 수 있다. 제2 프로세서 는 실행 중인 복수의 어플리케이션들(예: 제1 어플리케이션, 제2 어플리케이션, 및 제3 어플리케이션) 중 타겟 어플리케이션(예: 제1 어플리케이션)을 식별할 수 있다. 제2 프로세서는 획 득한 렌더 스테이지 정보 중 타겟 어플리케이션(예: 제1 어플리케이션)에 대응되는 렌더 스테이지 정 보를 추출할 수 있다. 일례로, 제2 프로세서는 렌더 스테이지 정보 수신부를 통해 제1 어플리케이션 의 프로세스 ID를 확인할 수 있고, 제1 어플리케이션의 프로세스 ID를 이용하여 렌더 스테이지 정보 에서 제1 어플리케이션에 대응되는 렌더 스테이지 정보(예: 도 7의 렌더 스테이지 정보)를 추출 할 수 있다. 제2 프로세서는 제1 어플리케이션에 대응되는 렌더 스테이지 정보를 프레임 별로 구분 할 수 있고, 구분된 각 프레임별 렌더 스테이지 정보에서 제1 렌더 스테이지 정보(예: 렌더 스테이지 정보(710- (n-1)))를 추출할 수 있으며, 추출된 제1 렌더 스테이지 정보를 가공할 수 있다. 도 8 내지 도 10은 다양한 실시 예들에 따른, 제1 및 제2 어플리케이션의 실행 화면의 예시를 설명하기 위한 도 면이다. 다양한 실시 예들에 따르면, 제2 프로세서는 디스플레이에 제1 어플리케이션의 실행 화면을 표 시할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제2 어플리케이션의 실행 화면(예: 항목들(810 내지 840)을 포함하는 UI 화면)을 제1 어플리케이션의 실행 화면 위에 표시할 수 있다. 제2 프로세서는 제1 어플리케이션의 실행 화면과 제2 어플리케이션의 실행 화면(예: 항목들(810 내지 840)을 포함하는 UI 화면)이 합성된 이미지(또는 프레임)을 디스플레이에 표시할 수 있다. 다양한 실시 예들에 따르면, 제1 항목은 FPS(frame per second)일 수 있고, 제2 항목은 CPU/GPU 사 용량일 수 있으며, 제3 항목은 컨텍스트 정보일 수 있고, 제4 항목은 가공된 제1 렌더 스테이지 정보 및 후술할 업데이트 버튼일 수 있다. 가공된 제1 렌더 스테이지 정보와 업데이트 버튼의 제4 항목의 일 예시가 도 9에 도시된다. 도 9에 도시된 제4 항목은 도 5의 렌더 스테이지 정보((510-(n-1)))가 프레임n-1의 각 렌더 패스의 수행 시 간을 기준으로 정렬된 결과 및 업데이트 버튼을 포함할 수 있다. 도 9에 도시된 예에서, 프레임n-1의 렌더 패스들의 개수는 14개일 수 있고, 프레임n-1의 프레임 시간(frame tim e)은 7.73ms일 수 있다. RP는 렌더 패스의 순서를 나타낼 수 있고, duration은 렌더 패스의 수행 시간을 나타낼 수 있으며, binning과 render 각각은 렌더 스테이지의 종류를 나타낼 수 있다. RES는 렌더 패스의 결과 이미지의 해상도를 나타낼 수 있다. 구현에 따라, RES는 생략될 수 있다. 도 9에 설명의 편의 상 14개의 렌더 패스들 각각에 대한 정보 전부를 도시하지 않았고 일부 렌더 패스들 각각에 대한 정보를 도시하였다. 도 9에 도시된 예에서, #13은 프레임n-1의 시작 이후 14개의 렌더 패스들 중 13번째로 수행된 렌더 패스를 나타 낼 수 있다. #13의 렌더 패스의 수행 시간은 1.373ms일 수 있고, 프레임 시간(7.73ms)에서 렌더 패스#13의 수 행 시간(1.373ms)이 차지하는 비율은 17.76%일 수 있다. #13의 렌더 패스는 binning 동작을 수행하지 않았고 100% 비율로 render 동작을 수행하였다. #13의 렌더 패스의 결과 이미지는 2325×1080의 해상도를 가질 수 있 다. #13의 렌더 패스에 대한 정보의 좌측에 render 동작의 비율(100%)에 해당하는 막대 그래프가 표시될 수 있 다. 도 9에 도시된 예에서, #9는 프레임n-1의 시작 이후 14개의 렌더 패스들 중 9번째로 수행된 렌더 패스를 나타낼 수 있다. #9의 렌더 패스의 수행 시간은 1.011ms일 수 있고, 프레임 시간(7.73ms)에서 렌더 패스#9의 수행 시 간(1.011ms)이 차지하는 비율은 13.08%일 수 있다. #9의 렌더 패스는 binning 동작을 12.66%만큼 수행하였고, render 동작을79.13%만큼 수행하였으며, binning 동작과 render 동작 이외의 동작(other 동작)을 8.21%만큼 수 행하였다. #9의 렌더 패스의 결과 이미지는 1280×594의 해상도를 가질 수 있다. #9의 렌더 패스에 대한 정보 의 좌측에 binning 동작의 비율, render 동작의 비율, 및 other 동작의 비율 각각에 대한 막대 그래프가 표시될 수 있다. 도 9에 도시된 #11, #6, #4 각각의 렌더 패스에 대한 설명은 #13과 #9 각각의 렌더 패스에 대한 설명이 적용될 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서(예: 도 3의 제 2 프로세서)는 업데이트 버튼에 대한 사용 자 입력(예: 터치 입력)을 감지할 수 있다. 제2 프로세서는 제2 어플리케이션을 통해 프레임들(예: 제1 프레임의 이후 프레임들)의 렌더 스테이지 정보를 획득할 수 있다. 제2 프로세서는 제1 프레임의 이후 프 레임들의 렌더 스테이지 정보에서 제2 프레임의 렌더 스테이지 정보(이하, \"제2 렌더 스테이지 정보\"라 지칭 함)를 추출할 수 있다. 일례로, 제2 프로세서는 제1 프레임의 이후 프레임들 각각에 대한 큐 제출 시간을 기초로 제1 프레임의 이후 프레임들의 렌더 스테이지 정보를 프레임 별로 구분할 수 있다. 제2 프로세서 는 구분된 프레임 별 렌더 스테이지 정보에서 제2 렌더 스테이지 정보(예: 가장 최근 프레임의 이전 프레임의 렌더 스테이지 정보)를 추출할 수 있다. 제2 프로세서는 추출된 제2 렌더 스테이지 정보를 가공할 수 있 다. 제2 프로세서는 화면 UI의 제4 항목에서, 가공된 제1 렌더 스테이지 정보를 가공된 제2 렌더 스 테이지 정보로 업데이트(또는 변경)할 수 있다. 사용자는 업데이트된 렌더 스테이지 정보를 확인할 수 있다. 도 10에, 가공된 제1 렌더 스테이지 정보와 업데이트 버튼의 제4 항목의 다른 예시가 도시된다. 도 10에 도시된 제4 항목은 프레임n-1의 각 프레임 버퍼의 수행 시간을 기준으로 도 7의 렌더 스테이지 정 보(710-(n-1))가 정렬된 결과 및 업데이트 버튼을 포함될 수 있다. 도 10에 도시된 예에서, 프레임n-1의 프레임 버퍼들(예: 도 6의 프레임 버퍼들(610-1 내지 610-m))의 개수는 8개 일 수 있고, 프레임n-1의 프레임 시간(frame time)은 7.73ms일 수 있다. FBID는 프레임 버퍼의 ID를 나타 낼 수 있고, duration은 프레임 버퍼의 수행 시간을 나타낼 수 있으며, binning과 render 각각은 렌더 스테이지의 종류를 나타낼 수 있다. RES는 프레임 버퍼 내의 이미지의 해상도를 나타낼 수 있다. 구현에 따라, RES는 생략될 수 있다. 도 10에 설명의 편의 상 8개의 프레임 버퍼들 각각에 대한 정보 전부를 도시하지 않았고 일부 프레임 버퍼들 각 각에 대한 정보를 도시하였다.도 10에 도시된 예에서, 프레임 버퍼 #7의 수행 시간은 1.373ms일 수 있고, 프레임 시간(7.73ms)에서 프레임 버 퍼 #7의 수행 시간(1.373ms)이 차지하는 비율은 17.76%일 수 있다. 제1 프로세서는 프레임 버퍼 #7 사용 시 binning 동작을 수행하지 않았고 100% 비율로 render 동작을 수행하였다. 프레임 버퍼 #7 내의 이미지는 2325×1080의 해상도를 가질 수 있다. 프레임 버퍼 #7에 대한 정보의 좌측에 render 동작의 비율(100%)에 해당 하는 막대 그래프가 표시될 수 있다. 도 10에 도시된 예에서, 프레임 버퍼 #2의 수행 시간은 1.011ms일 수 있고, 프레임 시간(7.73ms)에서 프레임 버 퍼 #2의 수행 시간(1.011ms)이 차지하는 비율은 13.08%일 수 있다. 제1 프로세서는 프레임 버퍼 #2 사용 시 수행한 렌더 스테이지들 중 binning 동작을 12.66%만큼 수행하였고 render 동작을 79.13%만큼 수행하였으며, binning 동작과 render 동작 이외의 동작(other 동작)을 8.21%만큼 수행하였다. 프레임 버퍼 #2 내의 이미지는 1280×594의 해상도를 가질 수 있다. 프레임 버퍼 #2에 대한 정보의 좌측에 binning 동작의 비율, render 동작 의 비율, 및 other 동작의 비율 각각에 대한 막대 그래프가 표시될 수 있다. 도 10에 도시된 프레임 버퍼 #3, #5, #1 각각에 대한 설명은 프레임 버퍼 #7 및 #2 각각에 대한 설명이 적용될 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서(예: 도3의 제 2 프로세서)는 업데이트 버튼에 대한 사용 자 입력(예: 터치 입력)을 감지할 수 있다. 제2 프로세서는 제2 어플리케이션을 통해 프레임들(예: 제1 프레임의 이후 프레임들)의 렌더 스테이지 정보를 획득할 수 있다. 제2 프로세서는 프레임들(예: 제1 프 레임의 이후 프레임들)의 렌더 스테이지 정보에서 제2 렌더 스테이지 정보를 추출할 수 있다. 일례로, 제2 프 로세서는 프레임 버퍼들(예: 도 10의 8개의 프레임 버퍼들)의 사용 패턴을 기초로 제1 프레임의 이후 프레 임들의 렌더 스테이지 정보를 프레임 별로 구분할 수 있고, 구분된 프레임 별 렌더 스테이지 정보에서 제2 렌더 스테이지 정보(예: 가장 최근 프레임의 이전 프레임의 렌더 스테이지 정보)를 추출할 수 있다. 제2 프로세서 는 추출된 제2 렌더 스테이지 정보를 가공할 수 있고, 제4 항목에서, 가공된 제1 렌더 스테이지 정 보를 가공된 제2 렌더 스테이지 정보로 업데이트(또는 변경)할 수 있다. 사용자는 업데이트된 렌더 스테이지 정보를 확인할 수 있다. 도 11은 다양한 실시 예들에 따른, 전자 장치의 동작 방법을 설명하기 위한 흐름도이다. 동작 1110에서, 전자 장치(예: 도 3의 제2 프로세서)는 그래픽 처리(예: 렌더 스테이지들)를 수행하 는 제1 프로세서에 관한 정보를 획득하기 위한 어플리케이션(예: 도 3 내지 도 10을 통해 설명한 제2 어플 리케이션)을 실행할 수 있다. 동작 1120에서, 전자 장치는 실행된 어플리케이션을 통해 프레임들의 렌더 스테이지 정보(예: 도 5의 렌더 스테이지 정보, 도 7의 렌더 스테이지 정보)를 획득할 수 있다. 동작 1130에서, 전자 장치는 획득된 렌더 스테이지 정보에서 프레임들 중 제1 프레임의 제1 렌더 스테이지 정보(예: 도 5의 렌더 스테이지 정보(510-(n-1)), 도 7의 렌더 스테이지 정보(710-(n-1)))를 추출할 수 있다. 동작 1140에서, 전자 장치는 추출된 제1 렌더 스테이지 정보를 가공할 수 있다. 동작 1150에서, 전자 장치는 가공된 제1 렌더 스테이지 정보(예: 도 9의 항목, 도 10의 항목) 를 포함하는 UI 화면(예: 도 8의 항목들(810 내지 840)을 포함하는 UI 화면)을 디스플레이에 표시할 수 있 다. 도 1 내지 도 10을 통해 설명된 실시 예들은 도 11을 통해 설명된 실시 예들에 적용될 수 있어, 상세한 설명을 생략한다. 다양한 실시 예들에 따르면, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치)는 그래픽스 데이터 를 기초로 렌더 스테이지들을 수행하여 프레임들을 생성하는 제1 프로세서, 제1 프로세서에 관한 정 보를 획득하기 위한 어플리케이션(예: 제2 어플리케이션)을 저장하는 메모리, 디스플레이, 및 제1 프 로세서, 메모리, 및 디스플레이와 전기적으로 연결되는 제2 프로세서를 포함할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 어플리케이션(예: 제2 어플리케이션)을 실행하고, 상기 실행 된 어플리케이션을 통해 상기 프레임들의 렌더 스테이지 정보(예: 도 4의 렌더 스테이지 정보, 도 6의 렌더 스테이지 정보)를 획득하며, 상기 획득된 렌더 스테이지 정보에서 상기 프레임들 중 제1 프레임의 제1 렌더 스테이지 정보를 추출하고, 상기 추출된 제1 렌더 스테이지 정보를 가공하고, 상기 가공된 제1 렌더 스테 이지 정보를 포함하는 UI 화면을 디스플레이에 표시할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제1 그래픽 렌더링 라이브러리(예: vulkan)의 큐 제출 시간을 기초로 상기 획득된 렌더 스테이지 정보를 프레임 별로 구분하고, 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출할 수 있다. 다양한 실시 예들에 따르면, 상기 추출된 제1 렌더 스테이지 정보는 상기 제1 프레임의 렌더 패스(render pas s)들 각각의 수행 시간을 포함할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 상기 렌더 패스들 각각의 수행 시간을 기초로 상기 추출된 제 1 렌더 스테이지 정보를 정렬할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 상기 렌더 패스들 각각의 수행 시간과 상기 렌더 패스들 각각 이 수행한 개별 렌더 스테이지의 수행 시간 사이의 비율에 해당하는 막대 그래프를 디스플레이에 표시할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 프레임 버퍼들의 사용 패턴을 이용하여 상기 획득된 렌더 스 테이지 정보를 프레임 별로 구분하고, 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출할 수 있다. 다양한 실시 예들에 따르면, 상기 추출된 제1 렌더 스테이지 정보는 상기 프레임 버퍼들 각각의 수행 시간을 포 함할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 상기 프레임 버퍼들 각각의 수행 시간을 기초로 상기 추출된 제1 렌더 스테이지 정보를 정렬할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 상기 UI 화면 상의 업데이트 버튼에 대한 사용자 입력을 감지 하는 경우, 상기 실행된 어플리케이션을 통해 상기 제1 프레임의 이후 프레임들의 렌더 스테이지 정보를 획득하 고, 상기 이후 프레임들의 렌더 스테이지 정보에서 제2 프레임의 제2 렌더 스테이지 정보를 추출하며, 상기 추 출된 제2 렌더 스테이지 정보를 가공하고, 상기 UI 화면에서 상기 가공된 제1 렌더 스테이지 정보를 상기 가공 된 제2 렌더 스테이지 정보로 업데이트할 수 있다. 다양한 실시 예들에 따르면, 상기 획득된 렌더 스테이지 정보는 상기 실행된 어플리케이션에 대응되는 렌더 스 테이지 정보와 하나 이상의 실행된 다른 어플리케이션(예: 제1 어플리케이션 및/또는 제3 어플리케이션)에 대응 되는 렌더 스테이지 정보를 포함할 수 있다. 상기 제2 프로세서는 상기 실행된 어플리케이션과 상기 하나 이상 의 실행된 다른 어플리케이션 중에서 타겟 어플리케이션(예: 제1 어플리케이션)을 식별하고, 상기 획득된 렌더 스테이지 정보에서 상기 식별된 타겟 어플리케이션에 대응되는 렌더 스테이지 정보를 추출할 수 있다. 다양한 실시 예들에 따르면, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치)는 제1 및 제2 어플 리케이션을 저장하는 메모리, 상기 제1 어플리케이션의 그래픽스 데이터를 기초로 렌더 스테이지들을 수행 하여 프레임들을 생성하는 제1 프로세서, 디스플레이, 및 메모리, 제1 프로세서, 및 디스 플레이와 전기적으로 연결된 제2 프로세서를 포함할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 상기 제1 어플리케이션의 실행에 따라 상기 제2 어플리케이션 을 실행하고, 상기 실행된 제2 어플리케이션을 통해 상기 프레임들의 렌더 스테이지 정보(예: 도 4의 렌더 스테 이지 정보, 도 6의 렌더 스테이지 정보)를 획득하며, 상기 획득된 렌더 스테이지 정보에서 상기 프레 임들 중 상기 제1 프레임의 제1 렌더 스테이지 정보를 추출하고, 상기 추출된 제1 렌더 스테이지 정보를 가공하 고, 상기 가공된 제1 렌더 스테이지 정보를 포함하는 UI 화면을 디스플레이에 표시할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 제1 그래픽 렌더링 라이브러리의 큐 제출 시간을 기초로 상기 획득된 렌더 스테이지 정보를 프레임 별로 구분하고, 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출 할 수 있다. 다양한 실시 예들에 따르면, 상기 추출된 제1 렌더 스테이지 정보는 상기 제1 프레임의 렌더 패스들 각각의 수 행 시간을 포함할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 상기 렌더 패스들 각각의 수행 시간을 기초로 상기 추출된 제 1 렌더 스테이지 정보를 정렬할 수 있다.다양한 실시 예들에 따르면, 제2 프로세서는 상기 렌더 패스들 각각의 수행 시간과 상기 렌더 패스들 각각 에 의해 수행된 개별 렌더 스테이지의 수행 시간 사이의 비율에 해당하는 막대 그래프를 디스플레이에 표 시할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 프레임 버퍼들의 사용 패턴을 이용하여 상기 획득된 렌더 스 테이지 정보를 프레임 별로 구분하고, 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출할 수 있다. 다양한 실시 예들에 따르면, 상기 추출된 제1 렌더 스테이지 정보는 상기 프레임 버퍼들 각각의 수행 시간을 포 함할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 상기 프레임 버퍼들 각각의 수행 시간을 기초로 상기 추출된 제1 렌더 스테이지 정보를 정렬할 수 있다. 다양한 실시 예들에 따르면, 제2 프로세서는 상기 UI 화면 상의 업데이트 버튼에 대한 사용자 입력을 감지 하는 경우, 상기 실행된 어플리케이션을 통해 상기 제1 프레임의 이후 프레임들의 렌더 스테이지 정보를 획득하 고, 상기 이후 프레임들의 렌더 스테이지 정보에서 제2 프레임의 제2 렌더 스테이지 정보를 추출하며, 상기 추 출된 제2 렌더 스테이지 정보를 가공하고, 상기 UI 화면에서 상기 가공된 제1 렌더 스테이지 정보를 상기 가공 된 제2 렌더 스테이지 정보로 업데이트할 수 있다. 다양한 실시 예들에 따르면, 상기 획득된 렌더 스테이지 정보는 상기 실행된 제1 어플리케이션에 대응되는 렌더 스테이지 정보, 상기 실행된 제2 어플리케이션에 대응되는 렌더 스테이지 정보, 및 실행된 제3 어플리케이션에 대응되는 렌더 스테이지 정보를 포함할 수 있다. 상기 제2 프로세서는 상기 획득된 렌더 스테이지 정보에서 상 기 제1 어플리케이션에 대응되는 렌더 스테이지 정보를 추출할 수 있다. 다양한 실시 예들에 따르면, 전자 장치(예: 도 1의 전자 장치, 도 3의 전자 장치)의 동작 방법은 그 래픽 처리를 수행하는 제1 프로세서에 관한 정보를 획득하기 위한 어플리케이션을 실행하는 동작, 상기 실 행된 어플리케이션을 통해 상기 수행된 그래픽 처리에 따른 프레임들의 렌더 스테이지 정보를 획득하는 동작, 상기 획득된 렌더 스테이지 정보에서 상기 프레임들 중 제1 프레임의 제1 렌더 스테이지 정보를 추출하는 동작, 상기 추출된 제1 렌더 스테이지 정보를 가공하는 동작, 상기 가공된 제1 렌더 스테이지 정보를 포함하는 UI 화 면을 디스플레이에 표시하는 동작을 포함할 수 있다. 다양한 실시 예들에 따르면, 상기 추출하는 동작은 제1 그래픽 렌더링 라이브러리의 큐 제출 시간을 기초로 상 기 획득된 렌더 스테이지 정보를 프레임 별로 구분하는 동작 및 상기 구분 결과에서 상기 제1 렌더 스테이지 정 보를 추출하는 동작을 포함할 수 있다. 다양한 실시 예들에 따르면, 상기 추출하는 동작은 프레임 버퍼들의 사용 패턴을 이용하여 상기 획득된 렌더 스 테이지 정보를 프레임 별로 구분하는 동작 및 상기 구분 결과에서 상기 제1 렌더 스테이지 정보를 추출하는 동 작을 포함할 수 있다. 다양한 실시 예들에 따르면, 전자 장치의 동작 방법은 상기 UI 화면 상의 업데이트 버튼에 대한 사용자 입력을 감지하는 경우, 상기 실행된 어플리케이션을 통해 상기 제1 프레임의 이후 프레임들의 렌더 스테이지 정보를 획 득하는 동작, 상기 이후 프레임들의 렌더 스테이지 정보에서 제2 프레임의 제2 렌더 스테이지 정보를 추출하는 동작, 상기 추출된 제2 렌더 스테이지 정보를 가공하는 동작, 및 상기 UI 화면에서 상기 가공된 제1 렌더 스테 이지 정보를 상기 가공된 제2 렌더 스테이지 정보로 업데이트하는 동작을 더 포함할 수 있다."}
{"patent_id": "10-2022-0054843", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 다양한 실시 예들에 따른, 네트워크 환경 내의 전자 장치의 블록도를 도시한다. 도 2은 다양한 실시 예들에 따른, 프로그램을 예시하는 블록도이다. 도 3은 다양한 실시 예들에 따른, 전자 장치의 일 예시를 설명하기 위한 블록도이다. 도 4 내지 도 5는 다양한 실시 예들에 따른, 전자 장치가 프레임들의 렌더 스테이지 정보에서 제1 렌더 스테이 지 정보를 추출하는 일 예시를 설명하기 위한 도면이다. 도 6 내지 도 7은 다양한 실시 예들에 따른, 전자 장치가 프레임들의 렌더 스테이지 정보에서 제1 렌더 스테이 지 정보를 추출하는 다른 예시를 설명하기 위한 도면이다. 도 8 내지 도 10은 다양한 실시 예들에 따른, 제1 및 제2 어플리케이션의 실행 화면의 예시를 설명하기 위한 도 면이다. 도 11은 다양한 실시 예들에 따른, 전자 장치의 동작 방법을 설명하기 위한 흐름도이다."}
