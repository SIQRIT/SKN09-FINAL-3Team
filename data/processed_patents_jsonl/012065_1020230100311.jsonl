{"patent_id": "10-2023-0100311", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2025-0007376", "출원번호": "10-2023-0100311", "발명의 명칭": "전자 장치 및 어플리케이션을 최적화하는 방법", "출원인": "삼성전자주식회사", "발명자": "정관희"}}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자 장치에 있어서,프로세서; 배터리; 및메모리를 포함하며,상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,상기 전자 장치의 상태가 어플리케이션 최적화 실행 조건에 대응하는지 여부를 확인하고, 충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같은지 여부를 확인하며, 충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같으면, 어플리케이션 최적화를 실행할 어플리케이션들에 대한 리스트를 생성하고,상기 전자 장치의 온도에 관한 정보를 확인하며,상기 리스트 및 상기 온도에 기반하여, 어플리케이션 최적화를 실행하도록 제어하는 명령어들을 저장하는 전자장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1항에 있어서,상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,상기 배터리의 충전 구간에 따라, 상기 리스트를 기반으로 최적화 대상이 되는 어플리케이션들의 개수를 조정하는 명령어들을 저장하는 전자 장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 1항에 있어서,상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,지정된 시간 내에 실행된 포어그라운드(foreground) 액티비티 및/또는 서비스를 포함하는 어플리케이션을 최근실행 순서대로 정렬하여 상기 리스트를 생성하도록 제어하는 명령어들을 저장하는 전자 장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1항에 있어서,상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨을 초과하면, 재 스케쥴링을 실행하도록 제어하는 명령어들을 저장하는 전자 장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 4항에 있어서,공개특허 10-2025-0007376-3-상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨을 초과하면, 어플리케이션 전체에 대한 최적화 동작을실행하도록 제어하는 명령어들을 저장하는 전자 장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1항에 있어서,상기 어플리케이션 최적화 실행 조건은상기 전자 장치가 충전 상태이고, 상기 전자 장치가 유휴 상태인 전자 장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 1항에 있어서,상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,상기 리스트 및 상기 온도에 기반하여, 어플리케이션 최적화를 순차적으로 실행하며, 상기 전자 장치의 상태가 어플리케이션 최적화 중단 조건에 대응하는지 여부를 확인하고, 상기 전자 장치의 상태가 상기 중단 조건에 대응하면, 재 스케쥴링을 실행하도록 제어하는 명령어들을 저장하는전자 장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7항에 있어서,상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,상기 전자 장치가 충전 상태에서 이탈한 상태, 또는 유휴 상태에서 이탈한 상태면, 재 스케쥴링 동작을 실행하도록 제어하는 명령어들을 저장하는 전자 장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 7항에 있어서,상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,상기 리스트에 기반하여 적어도 하나의 어플리케이션에 대해 어플리케이션 최적화를 수행한 후에, 상기 전자 장치의 현재 온도가 지정된 온도를 초과하면, 재 스케쥴링 동작을 실행하도록 제어하는 명령어들을 저장하는 전자장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 7항에 있어서,상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금,상기 전자 장치의 현재 온도가 어플리케이션 최적화를 수행하기 전에 확인한 온도로부터 지정된 범위 이내를 초과하면, 재 스케쥴링 동작을 실행하도록 제어하는 명령어들을 저장하는 전자 장치."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "공개특허 10-2025-0007376-4-전자 장치의 어플리케이션을 최적화하는 방법에 있어서,상기 전자 장치의 상태가 어플리케이션 최적화 실행 조건에 대응하는지 여부를 확인하는 동작;충전 중인 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같은지 여부를 확인하는 동작;충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같으면, 어플리케이션 최적화를 실행할 어플리케이션들에 대한 리스트를 생성하는 동작;상기 전자 장치의 온도에 관한 정보를 확인하는 동작; 및상기 리스트 및 상기 온도에 기반하여, 어플리케이션 최적화를 실행하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11항에 있어서,상기 배터리의 충전 구간에 따라, 상기 리스트를 기반으로 최적화 대상이 되는 어플리케이션들의 개수를 조정하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 11항에 있어서,지정된 시간 내에 실행된 포어그라운드(foreground) 액티비티 및/또는 서비스를 포함하는 어플리케이션을 최근실행 순서대로 정렬하여 상기 리스트를 생성하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 11항에 있어서,충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨을 초과하면, 재 스케쥴링을 실행하는 동작을 포함하는방법."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 14항에 있어서,충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨을 초과하면, 어플리케이션 전체에 대한 최적화 동작을실행하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "제 11항에 있어서,상기 어플리케이션 최적화 실행 조건은상기 전자 장치가 충전 상태이고, 상기 전자 장치가 유휴 상태인 방법."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 11항에 있어서,상기 리스트 및 상기 온도에 기반하여, 어플리케이션 최적화를 순차적으로 실행하는 동작; 상기 전자 장치의 상태가 어플리케이션 최적화 중단 조건에 대응하는지 여부를 확인하는 동작; 및상기 전자 장치의 상태가 상기 중단 조건에 대응하면, 재 스케쥴링을 실행하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_18", "content": "제 17항에 있어서,상기 전자 장치가 충전 상태에서 이탈한 상태, 또는 유휴 상태에서 이탈한 상태면, 재 스케쥴링 동작을 실행하는 동작을 포함하는 방법.공개특허 10-2025-0007376-5-청구항 19 제 17항에 있어서,상기 리스트에 기반하여 적어도 하나의 어플리케이션에 대해 어플리케이션 최적화를 수행한 후에, 상기 전자 장치의 현재 온도가 지정된 온도를 초과하면, 재 스케쥴링 동작을 실행하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0100311", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_20", "content": "제 17항에 있어서,상기 전자 장치의 현재 온도가 어플리케이션 최적화를 수행하기 전에 확인한 온도로부터 지정된 범위 이내를 초과하면, 재 스케쥴링 동작을 실행하는 동작을 포함하는 방법."}
{"patent_id": "10-2023-0100311", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 전자 장치는 프로세서; 배터리; 및 메모리를 포함하며, 상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금, 상기 전자 장치의 상태가 어플리케이션 최적화 실행 조건에 대응하는지 여부를 확인하 고, 충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같은지 여부를 확인하며, 충전 중인 상 기 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같으면, 어플리케이션 최적화를 실행할 어플리케이션들에 대한 리스트를 생성하고, 상기 전자 장치의 온도에 관한 정보를 확인하며, 상기 리스트 및 상기 온도에 기반하여, 어플리케이션 최적화를 실행하도록 제어하는 명령어들을 저장할 수 있다."}
{"patent_id": "10-2023-0100311", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 전자 장치 및 어플리케이션을 최적화하는 방법에 관한 것이다."}
{"patent_id": "10-2023-0100311", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "어플리케이션이 전자 장치에 설치될 때, 프로그래밍 언어로 작성된 상기 코드들은 전자 장치가 지원하는 플랫폼 에 맞춰 변환될 수 있고, 변환된 코드들은 상기 특정 목적을 달성하기 위한 명령어 집합으로서 사용될 수 있다. 예를 들어, 안드로이드 운영체제가 적용된 전자 장치에서, 어플리케이션의 코드들은 런타임(runtime) 환경에 맞 게 컴파일(compile)되어 실행 코드(native code)들로 변환될 수 있다. 컴파일은 소스 코드 또는 바이트 코드를, 네이티브 코드로 변환하는 것일 수 있다. 하이브리드 방식은 실행 조건(예: 충전 상태, 휴면(idle) 상태, 또는 하루 한번과 같은 지정된 시간이 도래한 상태)이 만족할 때 어플리케이션의 코드들이 컴파일될 수 있다. 사용자의 사용 양태에 따라 어플리케이션을 최적화하기 위한 실행 조건에 오랜 시간 동안 도달하지 못하면, 하 이브리드 방식을 포함하는 전자 장치는 어플리케이션을 최적화하기 어려운 문제가 있다. 본 개시의 일 실시예에 따른 전자 장치 및 어플리케이션을 최적화하는 방법은 하이브리드 방식을 이용하여 실행 코드를 생성하는 전자 장치가 충전 중에 어플리케이션 또는 패키지를 최적화하는 목적이 있다. 본 개시의 일 실시예에 따른 전자 장치 및 어플리케이션을 최적화하는 방법은 하이브리드 방식을 이용하여 실행 코드를 생성하는 전자 장치가 발열 상태를 제어하면서 어플리케이션 또는 패키지를 최적화하는 목적이 있다. 본 개시의 전자 장치는 프로세서; 배터리; 및 메모리를 포함하며, 상기 메모리는, 상기 프로세서에 의해 실행될 때, 전자 장치로 하여금, 상기 전자 장치의 상태가 어플리케이션 최적화 실행 조건에 대응하는지 여부를 확인하 고, 충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같은지 여부를 확인하며, 충전 중인 상 기 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같으면, 어플리케이션 최적화를 실행할 어플리케이션들 에 대한 리스트를 생성하고, 상기 전자 장치의 온도(예: 온도(예: 표면 온도))에 관한 정보를 확인하며, 상기 리스트 및 상기 온도(예: 표면 온도)에 기반하여, 어플리케이션 최적화를 실행하도록 제어하는 명령어들을 저장 할 수 있다. 본 개시의 전자 장치의 어플리케이션을 최적화하는 방법은 상기 전자 장치의 상태가 어플리케이션 최적화 실행 조건에 대응하는지 여부를 확인하는 동작; 충전 중인 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같은 지 여부를 확인하는 동작; 충전 중인 상기 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같으면, 어플리 케이션 최적화를 실행할 어플리케이션들에 대한 리스트를 생성하는 동작; 상기 전자 장치의 온도에 관한 정보를 확인하는 동작; 및 상기 리스트 및 상기 온도에 기반하여, 어플리케이션 최적화를 실행하는 동작을 포함할 수 있다. 본 개시의 일 실시예에 따른 전자 장치 및 어플리케이션을 최적화하는 방법은 전자 장치의 충전 상태를 유지하 고 발열은 억제하여 어플리케이션을 최적화함으로써, 전자 장치의 성능을 향상할 수 있다."}
{"patent_id": "10-2023-0100311", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 1, "content": "도 1은, 다양한 실시예들에 따른, 네트워크 환경 내의 전자 장치의 블록도이다. 도 1을 참조하면, 네트워크 환경에서 전자 장치는 제 1 네트워크(예: 근거리 무선 통신 네트워 크)를 통하여 전자 장치와 통신하거나, 또는 제 2 네트워크(예: 원거리 무선 통신 네트워크)를 통하 여 전자 장치 또는 서버 중 적어도 하나와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 서 버를 통하여 전자 장치와 통신할 수 있다. 일실시예에 따르면, 전자 장치는 프로세서, 메 모리, 입력 모듈, 음향 출력 모듈, 디스플레이 모듈, 오디오 모듈, 센서 모듈, 인터페이스, 연결 단자, 햅틱 모듈, 카메라 모듈, 전력 관리 모듈, 배터리, 통 신 모듈, 가입자 식별 모듈, 또는 안테나 모듈을 포함할 수 있다. 어떤 실시예에서는, 전자 장 치에는, 이 구성요소들 중 적어도 하나(예: 연결 단자)가 생략되거나, 하나 이상의 다른 구성요소가 추가될 수 있다. 어떤 실시예에서는, 이 구성요소들 중 일부들(예: 센서 모듈, 카메라 모듈, 또는 안 테나 모듈)은 하나의 구성요소(예: 디스플레이 모듈)로 통합될 수 있다. 프로세서는, 예를 들면, 소프트웨어(예: 프로그램)를 실행하여 프로세서에 연결된 전자 장치 의 적어도 하나의 다른 구성요소(예: 하드웨어 또는 소프트웨어 구성요소)를 제어할 수 있고, 다양한 데이 터 처리 또는 연산을 수행할 수 있다. 일실시예에 따르면, 데이터 처리 또는 연산의 적어도 일부로서, 프로세서 는 다른 구성요소(예: 센서 모듈 또는 통신 모듈)로부터 수신된 명령 또는 데이터를 휘발성 메 모리에 저장하고, 휘발성 메모리에 저장된 명령 또는 데이터를 처리하고, 결과 데이터를 비휘발성 메 모리에 저장할 수 있다. 일실시예에 따르면, 프로세서는 메인 프로세서(예: 중앙 처리 장치 또 는 프로세서) 또는 이와는 독립적으로 또는 함께 운영 가능한 보조 프로세서(예: 그래픽 처리 장치, 신경 망 처리 장치(NPU: neural processing unit), 이미지 시그널 프로세서, 센서 허브 프로세서, 또는 커뮤니케이션 프로세서)를 포함할 수 있다. 예를 들어, 전자 장치가 메인 프로세서 및 보조 프로세서를 포함 하는 경우, 보조 프로세서는 메인 프로세서보다 저전력을 사용하거나, 지정된 기능에 특화되도록 설 정될 수 있다. 보조 프로세서는 메인 프로세서와 별개로, 또는 그 일부로서 구현될 수 있다. 보조 프로세서는, 예를 들면, 메인 프로세서가 인액티브(예: 슬립) 상태에 있는 동안 메인 프로세서 를 대신하여, 또는 메인 프로세서가 액티브(예: 어플리케이션 실행) 상태에 있는 동안 메인 프로세서 와 함께, 전자 장치의 구성요소들 중 적어도 하나의 구성요소(예: 디스플레이 모듈, 센서 모듈 , 또는 통신 모듈)와 관련된 기능 또는 상태들의 적어도 일부를 제어할 수 있다. 일실시예에 따르면, 보조 프로세서(예: 이미지 시그널 프로세서 또는 커뮤니케이션 프로세서)는 기능적으로 관련 있는 다른 구 성요소(예: 카메라 모듈 또는 통신 모듈)의 일부로서 구현될 수 있다. 일실시예에 따르면, 보조 프로 세서(예: 신경망 처리 장치)는 인공지능 모델의 처리에 특화된 하드웨어 구조를 포함할 수 있다. 인공지능 모델은 기계 학습을 통해 생성될 수 있다. 이러한 학습은, 예를 들어, 인공지능 모델이 수행되는 전자 장치 자체에서 수행될 수 있고, 별도의 서버(예: 서버)를 통해 수행될 수도 있다. 학습 알고리즘은, 예를 들어, 지도형 학습(supervised learning), 비지도형 학습(unsupervised learning), 준지도형 학습(semi- supervised learning) 또는 강화 학습(reinforcement learning)을 포함할 수 있으나, 전술한 예에 한정되지 않 는다. 인공지능 모델은, 복수의 인공 신경망 레이어들을 포함할 수 있다. 인공 신경망은 심층 신경망(DNN: deep neural network), CNN(convolutional neural network), RNN(recurrent neural network), RBM(restrictedboltzmann machine), DBN(deep belief network), BRDNN(bidirectional recurrent deep neural network), 심층 Q-네트워크(deep Q-networks) 또는 상기 중 둘 이상의 조합 중 하나일 수 있으나, 전술한 예에 한정되지 않는다. 인공지능 모델은 하드웨어 구조 이외에, 추가적으로 또는 대체적으로, 소프트웨어 구조를 포함할 수 있 다. 메모리는, 전자 장치의 적어도 하나의 구성요소(예: 프로세서 또는 센서 모듈)에 의해 사 용되는 다양한 데이터를 저장할 수 있다. 데이터는, 예를 들어, 소프트웨어(예: 프로그램) 및, 이와 관련 된 명령에 대한 입력 데이터 또는 출력 데이터를 포함할 수 있다. 메모리는, 휘발성 메모리 또는 비 휘발성 메모리를 포함할 수 있다. 프로그램은 메모리에 소프트웨어로서 저장될 수 있으며, 예를 들면, 운영 체제, 미들 웨어 또는 어플리케이션을 포함할 수 있다. 입력 모듈은, 전자 장치의 구성요소(예: 프로세서)에 사용될 명령 또는 데이터를 전자 장치 의 외부(예: 사용자)로부터 수신할 수 있다. 입력 모듈은, 예를 들면, 마이크, 마우스, 키보드, 키 (예: 버튼), 또는 디지털 펜(예: 스타일러스 펜)을 포함할 수 있다. 음향 출력 모듈은 음향 신호를 전자 장치의 외부로 출력할 수 있다. 음향 출력 모듈은, 예를 들 면, 스피커 또는 리시버를 포함할 수 있다. 스피커는 멀티미디어 재생 또는 녹음 재생과 같이 일반적인 용도로 사용될 수 있다. 리시버는 착신 전화를 수신하기 위해 사용될 수 있다. 일실시예에 따르면, 리시버는 스피커와 별개로, 또는 그 일부로서 구현될 수 있다. 디스플레이 모듈은 전자 장치의 외부(예: 사용자)로 정보를 시각적으로 제공할 수 있다. 디스플레이 모듈은, 예를 들면, 디스플레이, 홀로그램 장치, 또는 프로젝터 및 해당 장치를 제어하기 위한 제어 회로 를 포함할 수 있다. 일실시예에 따르면, 디스플레이 모듈은 터치를 감지하도록 설정된 터치 센서, 또는 상 기 터치에 의해 발생되는 힘의 세기를 측정하도록 설정된 압력 센서를 포함할 수 있다. 오디오 모듈은 소리를 전기 신호로 변환시키거나, 반대로 전기 신호를 소리로 변환시킬 수 있다. 일실시예 에 따르면, 오디오 모듈은, 입력 모듈을 통해 소리를 획득하거나, 음향 출력 모듈, 또는 전자 장치와 직접 또는 무선으로 연결된 외부 전자 장치(예: 전자 장치)(예: 스피커 또는 헤드폰)를 통해 소리를 출력할 수 있다. 센서 모듈은 전자 장치의 작동 상태(예: 전력 또는 온도), 또는 외부의 환경 상태(예: 사용자 상태) 를 감지하고, 감지된 상태에 대응하는 전기 신호 또는 데이터 값을 생성할 수 있다. 일실시예에 따르면, 센서 모듈은, 예를 들면, 제스처 센서, 자이로 센서, 기압 센서, 마그네틱 센서, 가속도 센서, 그립 센서, 근접 센서, 컬러 센서, IR(infrared) 센서, 생체 센서, 온도 센서, 습도 센서, 또는 조도 센서를 포함할 수 있다. 인터페이스는 전자 장치가 외부 전자 장치(예: 전자 장치)와 직접 또는 무선으로 연결되기 위해 사용될 수 있는 하나 이상의 지정된 프로토콜들을 지원할 수 있다. 일실시예에 따르면, 인터페이스는, 예 를 들면, HDMI(high definition multimedia interface), USB(universal serial bus) 인터페이스, SD카드 인터 페이스, 또는 오디오 인터페이스를 포함할 수 있다. 연결 단자는, 그를 통해서 전자 장치가 외부 전자 장치(예: 전자 장치)와 물리적으로 연결될 수 있는 커넥터를 포함할 수 있다. 일실시예에 따르면, 연결 단자는, 예를 들면, HDMI 커넥터, USB 커넥터, SD 카드 커넥터, 또는 오디오 커넥터(예: 헤드폰 커넥터)를 포함할 수 있다. 햅틱 모듈은 전기적 신호를 사용자가 촉각 또는 운동 감각을 통해서 인지할 수 있는 기계적인 자극(예: 진 동 또는 움직임) 또는 전기적인 자극으로 변환할 수 있다. 일실시예에 따르면, 햅틱 모듈은, 예를 들면, 모터, 압전 소자, 또는 전기 자극 장치를 포함할 수 있다. 카메라 모듈은 정지 영상 및 동영상을 촬영할 수 있다. 일실시예에 따르면, 카메라 모듈은 하나 이상 의 렌즈들, 이미지 센서들, 이미지 시그널 프로세서들, 또는 플래시들을 포함할 수 있다. 전력 관리 모듈은 전자 장치에 공급되는 전력을 관리할 수 있다. 일실시예에 따르면, 전력 관리 모듈 은, 예를 들면, PMIC(power management integrated circuit)의 적어도 일부로서 구현될 수 있다. 배터리는 전자 장치의 적어도 하나의 구성요소에 전력을 공급할 수 있다. 일실시예에 따르면, 배터리 는, 예를 들면, 재충전 불가능한 1차 전지, 재충전 가능한 2차 전지 또는 연료 전지를 포함할 수 있다.통신 모듈은 전자 장치와 외부 전자 장치(예: 전자 장치, 전자 장치, 또는 서버) 간 의 직접(예: 유선) 통신 채널 또는 무선 통신 채널의 수립, 및 수립된 통신 채널을 통한 통신 수행을 지원할 수 있다. 통신 모듈은 프로세서(예: 어플리케이션 프로세서)와 독립적으로 운영되고, 직접(예: 유선) 통 신 또는 무선 통신을 지원하는 하나 이상의 커뮤니케이션 프로세서를 포함할 수 있다. 일실시예에 따르면, 통신 모듈은 무선 통신 모듈(예: 셀룰러 통신 모듈, 근거리 무선 통신 모듈, 또는 GNSS(global navigation satellite system) 통신 모듈) 또는 유선 통신 모듈(예: LAN(local area network) 통신 모듈, 또는 전력선 통신 모듈)을 포함할 수 있다. 이들 통신 모듈 중 해당하는 통신 모듈은 제 1 네트워크(예: 블루투스, WiFi(wireless fidelity) direct 또는 IrDA(infrared data association)와 같은 근거리 통신 네트워 크) 또는 제 2 네트워크(예: 레거시 셀룰러 네트워크, 5G 네트워크, 차세대 통신 네트워크, 인터넷, 또는 컴퓨터 네트워크(예: LAN 또는 WAN)와 같은 원거리 통신 네트워크)를 통하여 외부의 전자 장치와 통신할 수 있다. 이런 여러 종류의 통신 모듈들은 하나의 구성요소(예: 단일 칩)로 통합되거나, 또는 서로 별도의 복수 의 구성요소들(예: 복수 칩들)로 구현될 수 있다. 무선 통신 모듈은 가입자 식별 모듈에 저장된 가입 자 정보(예: 국제 모바일 가입자 식별자(IMSI))를 이용하여 제 1 네트워크 또는 제 2 네트워크와 같 은 통신 네트워크 내에서 전자 장치를 확인 또는 인증할 수 있다. 무선 통신 모듈은 4G 네트워크 이후의 5G 네트워크 및 차세대 통신 기술, 예를 들어, NR 접속 기술(new radio access technology)을 지원할 수 있다. NR 접속 기술은 고용량 데이터의 고속 전송(eMBB(enhanced mobile broadband)), 단말 전력 최소화와 다수 단말의 접속(mMTC(massive machine type communications)), 또 는 고신뢰도와 저지연(URLLC(ultra-reliable and low-latency communications))을 지원할 수 있다. 무선 통신 모듈은, 예를 들어, 높은 데이터 전송률 달성을 위해, 고주파 대역(예: mmWave 대역)을 지원할 수 있다. 무선 통신 모듈은 고주파 대역에서의 성능 확보를 위한 다양한 기술들, 예를 들어, 빔포밍(beamforming), 거대 배열 다중 입출력(massive MIMO(multiple-input and multiple-output)), 전차원 다중입출력(FD-MIMO: full dimensional MIMO), 어레이 안테나(array antenna), 아날로그 빔형성(analog beam-forming), 또는 대규모 안테나(large scale antenna)와 같은 기술들을 지원할 수 있다. 무선 통신 모듈은 전자 장치, 외부 전자 장치(예: 전자 장치) 또는 네트워크 시스템(예: 제 2 네트워크)에 규정되는 다양한 요구사항을 지원할 수 있다. 일실시예에 따르면, 무선 통신 모듈은 eMBB 실현을 위한 Peak data rate(예: 20Gbps 이 상), mMTC 실현을 위한 손실 Coverage(예: 164dB 이하), 또는 URLLC 실현을 위한 U-plane latency(예: 다운링 크(DL) 및 업링크(UL) 각각 0.5ms 이하, 또는 라운드 트립 1ms 이하)를 지원할 수 있다. 안테나 모듈은 신호 또는 전력을 외부(예: 외부의 전자 장치)로 송신하거나 외부로부터 수신할 수 있다. 일실시예에 따르면, 안테나 모듈은 서브스트레이트(예: PCB) 위에 형성된 도전체 또는 도전성 패턴으로 이 루어진 방사체를 포함하는 안테나를 포함할 수 있다. 일실시예에 따르면, 안테나 모듈은 복수의 안테나들 (예: 어레이 안테나)을 포함할 수 있다. 이런 경우, 제 1 네트워크 또는 제 2 네트워크와 같은 통신 네트워크에서 사용되는 통신 방식에 적합한 적어도 하나의 안테나가, 예를 들면, 통신 모듈에 의하여 상기 복수의 안테나들로부터 선택될 수 있다. 신호 또는 전력은 상기 선택된 적어도 하나의 안테나를 통하여 통신 모 듈과 외부의 전자 장치 간에 송신되거나 수신될 수 있다. 어떤 실시예에 따르면, 방사체 이외에 다른 부품 (예: RFIC(radio frequency integrated circuit))이 추가로 안테나 모듈의 일부로 형성될 수 있다. 다양한 실시예에 따르면, 안테나 모듈은 mmWave 안테나 모듈을 형성할 수 있다. 일실시예에 따르면, mmWave 안테나 모듈은 인쇄 회로 기판, 상기 인쇄 회로 기판의 제 1 면(예: 아래 면)에 또는 그에 인접하여 배 치되고 지정된 고주파 대역(예: mmWave 대역)을 지원할 수 있는 RFIC, 및 상기 인쇄 회로 기판의 제 2 면(예: 윗 면 또는 측 면)에 또는 그에 인접하여 배치되고 상기 지정된 고주파 대역의 신호를 송신 또는 수신할 수 있 는 복수의 안테나들(예: 어레이 안테나)을 포함할 수 있다. 상기 구성요소들 중 적어도 일부는 주변 기기들간 통신 방식(예: 버스, GPIO(general purpose input and output), SPI(serial peripheral interface), 또는 MIPI(mobile industry processor interface))을 통해 서로 연결되고 신호(예: 명령 또는 데이터)를 상호간에 교환할 수 있다. 일실시예에 따르면, 명령 또는 데이터는 제 2 네트워크에 연결된 서버를 통해서 전자 장치와 외부의 전자 장치간에 송신 또는 수신될 수 있다. 외부의 전자 장치(102, 또는 104) 각각은 전자 장치 와 동일한 또는 다른 종류의 장치일 수 있다. 일실시예에 따르면, 전자 장치에서 실행되는 동작들의 전부 또는 일부는 외부의 전자 장치들(102, 104, 또는 108) 중 하나 이상의 외부의 전자 장치들에서 실행될 수 있다. 예를 들면, 전자 장치가 어떤 기능이나 서비스를 자동으로, 또는 사용자 또는 다른 장치로부터의 요 청에 반응하여 수행해야 할 경우에, 전자 장치는 기능 또는 서비스를 자체적으로 실행시키는 대신에 또는추가적으로, 하나 이상의 외부의 전자 장치들에게 그 기능 또는 그 서비스의 적어도 일부를 수행하라고 요청할 수 있다. 상기 요청을 수신한 하나 이상의 외부의 전자 장치들은 요청된 기능 또는 서비스의 적어도 일부, 또는 상기 요청과 관련된 추가 기능 또는 서비스를 실행하고, 그 실행의 결과를 전자 장치로 전달할 수 있다. 전자 장치는 상기 결과를, 그대로 또는 추가적으로 처리하여, 상기 요청에 대한 응답의 적어도 일부로서 제공할 수 있다. 이를 위하여, 예를 들면, 클라우드 컴퓨팅, 분산 컴퓨팅, 모바일 에지 컴퓨팅(MEC: mobile edge computing), 또는 클라이언트-서버 컴퓨팅 기술이 이용될 수 있다. 전자 장치는, 예를 들어, 분산 컴퓨팅 또는 모바일 에지 컴퓨팅을 이용하여 초저지연 서비스를 제공할 수 있다. 다른 실시예에 있어서, 외부의 전자 장치는 IoT(internet of things) 기기를 포함할 수 있다. 서버는 기계 학습 및/또는 신경망을 이용한 지능형 서버일 수 있다. 일실시예에 따르면, 외부의 전자 장치 또는 서버는 제 2 네트워크 내에 포함될 수 있다. 전자 장치는 5G 통신 기술 및 IoT 관련 기술을 기반으로 지능형 서비스(예: 스마트 홈, 스마트 시티, 스마트 카, 또는 헬스 케어)에 적용될 수 있다. 도 2는 본 개시의 일 실시예에 따른 프로그램의 예시적인 블록도이다. 일 실시예에서, 프로그램은 메모리에 저장될 수 있다. 메모리에 저장된 프로그램은 프로세 서의 제어 하에 실행될 때, 전자 장치로 하여금 프로그램에 포함된 명령어들을 실행하게 할 수 있다. 일 실시예에서, 프로그램은 운영체제, 어플리케이션, 프레임 워크, 런타임 및/또는 AOT(ahead-of-time) 백그라운드 서비스 모듈을 포함할 수 있다. 프로그램 중 적어도 일부 프로그램은, 예를 들면, 제조 시에 전자 장치에 프리 로드(preload)되거나, 또는 사용자에 의해 사용 시 외부 전자 장치(예: 전자 장치 (102 또는 104), 또는 서버)로부터 다운로드되거나 업데이트될 수 있다. 코 드들을 컴파일하는 방식에는 AOT(ahead-of-time) 방식, JIT(just-in-time) 방식 또는 상기 AOT 방식과 상기 JIT 방식을 혼합한 하이브리드(hybrid) 방식이 사용되고 있다. AOT 방식은, 어플리케이션을 설치하는 시점에 코드들을 컴파일하여 실행 코드들로 변환하여 저장한 뒤, 어플리 케이션의 실행 시점에 변환된 실행 코드들을 직접 읽어 들이는 방식이다. AOT 방식에서는, 어플리케이션의 설치 시에 코드들이 이미 실행 코드들로 변환되기 때문에, 어플리케이션을 실행시키는 시간이 단축될 수 있으나, 어 플리케이션의 설치 시간이 많이 소요되며 어플리케이션의 설치를 위한 저장 공간도 많이 요구될 수 있다. JIT 방식은, 어플리케이션을 실행할 때 코드들 중 필요한 코드만을 적절한 시점에 컴파일하는 방식이다. JIT 방 식에서는, 코드들 중 로드(load)된 클래스에 대해 인터프리터(interpreter) 방식으로 동작하다가 반복 수행을 감지하면, 적절하게 JIT 컴파일러가 동작하여 실행 속도를 향상시킬 수 있다. 즉, 실행 코드를 실행하는 시간이 매우 빠르고, 기본적으로 메모리 캐시가 이루어지기 때문에 클래스의 반복 호출 시 성능이 극대화될 수 있다. 그러나, JIT 방식에서는, 런타임 중에 코드들이 실행 코드들로 컴파일되기 때문에 어플리케이션의 설치 시간은 단축되나 어플리케이션의 실행 시간이 많이 소요될 수 있다. 또한, 메모리에 캐시된 코드들이 해제되었을 때, 코드들에 대한 재수행이 감지되면 코드들을 재변환하는 시간이 소요되기 때문에, 어플리케이션의 동작에 지연이 발생할 수도 있다. 하이브리드 방식은, 어플리케이션의 설치 시에는 JIT 방식을 사용하여 어플리케이션의 설치 시간을 단축하고 어 플리케이션의 설치 공간을 줄일 수 있으며, 인터프리터를 통해 사용자 패턴에 따른 프로파일을 저장한 후, 실행 조건이 부합될 때 잡 스케줄러(job scheduler)에 의해 AOT 백그라운드 데몬(daemon)이 시작되어 백 그라운드로 컴파일하여 실행 코드들을 생성하고, 어플리케이션의 실행 시에는 실행 코드를 바로 사용함으로써, 실행 시간을 단축할 수 있다. 한편, 최근의 안드로이드 운영 체제가 적용된 전자 장치에서는, 안드로이드 런타임(android runtime)(이하 ART 라 한다)이라고 하는 실행 환경이 지원되는데, ART는 하이브리드 방식을 사용할 수 있다. ART는 어플리케이션의 덱스(dex(dalvik executable)) 파일(코드들의 집합)을 컴파일하기 위해 dex2oat라는 툴(tool)을 사용하는데, 이때 동작하는 방식은 컴파일 필터(compile filter)의 설정 값에 의해 지정될 수 있고, 컴파일 필터는 사용자 패턴에 따른 프로파일에 기반하여 설정될 수 있다. 즉, ART에서는 사용자 패턴에 따른 프로파일에 기반하여 설 정된 컴파일 필터에 따라 어플리케이션의 코드들이 컴파일될 수 있다. 일 실시예에서, 운영체제는 전자 장치의 하나 이상의 시스템 리소스들(예: 프로세스, 메모리 , 또는 전원)의 관리(예: 할당 또는 회수)를 제어할 수 있다. 예를 들어, 운영체제는 AndroidTM, iOSTM, 및/또는 WindowsTM 일 수 있다. 운영체제는 하드웨어뿐만 아니라 어플리케이션과 같은 소프트웨어를 실행하기 위한 환경을 제어할 수 있다. 일 실시예에서, 어플리케이션은 특정 목적을 달성하기 위한 복수의 코드(code)들로 구성될 수 있고, 패키 지화되어 배포될 수 있다. 어플리케이션은 복수의 어플리케이션들을 포함할 수 있다. 예를 들어, 어플리케 이션은 다이얼 , 카메라 및/또는 캘린더 어플리케이션을 포함할 수 있다. 그러나, 이에 한 정되는 것은 아니며, 어플리케이션은 게임, 홈, SMS/MMS, IM(instant message), 브라우저, 알람, 컨택트, 이메일, 건강, 시계, 앨범, 음성 음식 및/또는 환경 정보와 같은 어플리케이션을 더 포함할 수 있다. 일 실시예에서, 프레임워크는 전자 장치의 하나 이상의 리소스들로부터 제공되는 기능 또는 정보를 어플리케이션에 제공할 수 있다. 일 실시예에서, 프레임워크는 패키지 매니저(package manager), 노티피케이션 매니저(notification manager), 윈도우 매니저(window manager) 및/또는 잡 스케쥴러(job scheduler)를 포함할 수 있다. 그러나, 이에 한정되는 것은 아니며, 프레임워크는 리소스 매니저(resource manager), 액티비티 매 니저(activity manager), 컨텐츠 제공자(content provider)를 더 포함할 수 있다. 일 실시예에서, 패키지 매니저는 패키지 파일의 형태로 배포되는 어플리케이션의 설치 및/또는 갱신 (update)을 관리할 수 있다. 어플리케이션은 패키지 파일(예: apk 파일)의 형태로 배포될 수 있으며, 패키지 매 니저는 프로세서의 제어 하에 패키지를 파싱(parsing)하여 패키지에 포함된 코드 및 데이터를 분리하 여 메모리에 저장할 수 있다. 일 실시예에서, 패키지 파일은 복수의 인스트럭션들의 세트이고 어플리케이션의 실행을 위해 메모리내에 저장되 는 하나 이상의 파일들의 그룹 또는 하나 이상의 파일들이 압축된 파일을 의미할 수 있다. 일 실시예에서, 인스트럭션들은, 네이티브 코드(native code)를 포함할 수 있다. 예를 들어, 인스트럭션들은, 메모리에 저장된 바이너리 파일에 포함되고, 이진 포맷으로 인코딩된 기계어(machine language), 및/또는 어셈블리 언어(assembly language)의 적어도 일부분일 수 있다. 예를 들어, 인스트럭션들은, 다른 인스트럭션 들을 컴파일하여 생성된 인스트럭션들을 포함할 수 있다. 예를 들어, 다른 인스트럭션들은, 소스 코드(source code), 및/또는 바이트 코드(byte code)로 구성될 수 있다. 예를 들어, 소스 코드는, C 언어, JAVA 언어, 및/또는 베이직(beginner’s all-purpose symbolic instruction code)을 포함할 수 있다. 하지만, 이에 제한되지 않는다. 예를 들어, 인스트럭션들은, 바이트 코드와 같이, 프로세서에 의해 실행되는 소프트웨어인, 인터프리터, 및/또는 가상 머신(예: JVM(java virtual machine))에 의 해 판독 가능한 인스트럭션들을 의미할 수 있다. 바이트 코드는, 지정된 길이(예: 1 바이트(byte))를 가지는 인스트럭션일 수 있다. 이하에서, 패키지는, 인스트럭션들의 세트를 의미할 수 있다. 일 실시예에서, 패키지 내에 압축된, 하나 이상의 파일들은, 패키지에 대응하는 어플리케이션의 실행에 요구되 는 데이터를 포함할 수 있다. 예를 들어, 하나 이상의 파일들은, 어플리케이션의 구동을 위해 필요한 하나 이 상의 리소스(예: 아이콘, 이미지, 및/또는 비디오), 디자인 요소(예: 액티비티를 정의하기 위한 xml 파일), 및/ 또는 메타 데이터(예: 매니페스트(manifest)와 같은 지정된 명칭을 가지는 xml 파일) 중 적어도 하나를 포함할 수 있다. 일 실시예에서, 패키지 매니저는, 프로세서의 제어 하에, 어플리케이션들 중 적어도 하나 이상이 실 행될 때, 어플리케이션들의 최근 실행 시간 정보를 메모리에 저장할 수 있다. 일 실시예에서, 안드로이드 운영 체제가 적용된 전자 장치는 패키지 매니저는, 프로세서의 제어 하에, 어플리케이션들 중 적어도 하나 이상이 실행될 때, 어플리케이션의 실행 시간을 API를 통해 분류하여 메 모리에 저장할 수 있다. 예를 들어, 전자 장치는 notifyPackageUse API를 통해 사유(reason)에 따라 구분하여 타임스탬프(timestamp)로 관리하여 메모리에 저장할 수 있다. 예를 들어, 사유(reason)는 어플리 케이션의 실행 이력에 관한 정보일 수 있다. 일 실시예에서, 런타임은, 프로세서의 제어 하에, 사용자의 사용하는 패턴에 따라 어플리케이션 별로 사용자 기반 프로파일(profile)을 메모리에 저장할 수 있다. 예를 들어, 사용하는 패턴은 사용자가 어플리 케이션들 중에 자주 사용하는 순서에 관한 것일 수 있다. 일 실시예에서, 노티픽케이션 매니저는 지정된 이벤트(예: 착신 통화, 메시지 또는 알람)의 발생을 사용자 에게 알리기 위한 기능을 제공할 수 있다.일 실시예에서, 윈도우 매니저는 디스플레이(예: 디스플레이 모듈)에 표시되는 화면(screen)에서 사 용되는 하나 이상의 그래픽 유저 인터페이스, 현지화된 문자열, 그래픽 및 레이아웃에 관한 자원을 관리할 수 있다. 일 실시예에서, 리소스 매니저는 어플리케이션의 소스 코드 또는 메모리의 저장 공간을 관리할 수 있고, 액티비티 매니저는 어플리케이션의 수명 주기를 관리할 수 있다. 컨텐츠 제공자는 어플리케이션이 다른 어플리케이션의 데이터에 액세스하거나 어플리케이션의 데이터를 공유할 수 있게 지원할 수 있다. 일 실시예에서, 잡 스케쥴러는 잡 서비스(job service)와 잡 인포(job info)를 포함할 수 있다. 일 실시예에서, 잡(job)은 컴퓨팅 처리에서 작업 또는 실행 단위일 수 있다. 잡 스케쥴러는 상황에 따라 잡(job)들의 실행 동작 등에 대한 처리를 수행할 수 있다. 예를 들어, 잡 스케쥴러는 상황에 따라 어떤 잡 들을 수행할지, 미룰지, 백그라운드에서 동작할지, 순서에 따라서 실행할지에 대한 처리를 할 수 있다. 일 실시예에서, 잡 스케쥴러는 작업을 실행할 때 수행해야 하는 내용을 잡 서비스(job service)에 정의하 고, 어떤 상황에서 작업을 실행해야 하는지 여부는 잡 인포(job info)에 정의할 수 있다. 일 실시예에서, 잡 스케쥴러는 작업의 시작, 완료, 중단등의 상황에 따라 서로 다른 함수를 호출할 수 있 다. 예를 들어, 예약된 작업을 실행할 때, 잡 서비스에 정의되어 있는 특정 함수(onStartJob)를 호출할 수 있다. 잡 스케쥴러는 작업을 중지해야하는 경우 특정 함수(onStopJob)를 호출할 수 있다. 잡 스케쥴러 는 예약된 작업이 완료 또는 중단되면, 잡 서비스에서 특정 함수(JobFinished)를 호출하여 해당 작업이 종 료했음을 잡 스케줄러에 알릴 수 있다. 잡 스케쥴러는 작업이 중단되면 중단 사유를 확인하여 중단된 작업 에 대해서 재 스케쥴링(rescheduling)할 수 있다. 일 실시예에서, 잡 스케쥴러는 실행 조건에서 수행할 백그라운드 작업을 관리할 수 있다. 예컨대, 잡 스케 쥴러는 실행 조건에서 AOT 데몬(Ahead of Time Daemon) 또는 AOT 백그라운드 서비스 모듈을 활성화 시킬 수 있고, AOT 백그라운드 서비스 모듈을 통해 어플리케이션의 코드들이 컴파일되도록 제어할 수 있다. 데몬(daemon)은 백그라운드에서 어플리리케이션 서비스를 제공하도록 부팅때 자동으로 실행되어 백그라운 드에서 계속 실행되는 프로세스를 포함할 수 있다. 일 실시예에서, 잡 스케쥴러는 중단 조건에서 수행할 백그라운드 작업을 중단시키고 재 스케쥴링할 수 있 다. 일 실시예에서, 잡 스케쥴러는, 프로세서의 제어 하에, 실행 조건에 관한 정보를 잡 인포에 정의 및/ 또는 저장할 수 있다. 일 실시예에서, 잡 스케쥴러는, 프로세서의 제어 하에, 수행할 백그라운드 작업을 잡 서비스에 정의 및/또는 저장할 수 있다. 일 실시예에서, 실행 조건은 전자 장치가 어플리케이션 최적화를 실행하기 위한 전자 장치의 상태 및 /또는 실행 주기에 관한 조건일 수 있다. 일 실시예에서, 전자 장치는, 프로세서 제어 하에, 실행 주기(예: 24시간)로 잡 스케쥴러 및/ 또는 AOT 백그라운드 서비스 모듈을 실행할 수 있다. 예를 들어, 전자 장치는, 프로세서 제어 하에, 실행 주기에 기반하여 1 회씩 잡 스케쥴러 및/또는 AOT 백그라운드 서비스모듈을 실행하여, 어 플리케이션을 컴파일할 수 있다.일 실시예에서, 전자 장치의 상태는 전자 장치의 충전 상태 및/ 또는 전자 장치의 유휴(idle) 상태일 수 있다. 예를 들어, 전자 장치의 충전 상태는 전자 장치가 외 부 전력으로부터 전원을 공급받아 배터리를 충전을 수행하는 상태 및 또는 배터리의 전체 용량 중에 서 어느정도 충전 되고 있는지에 대한 정보를 포함하는 상태 일 수 있다. 일 실시예에서, 전자 장치는, 프로세서 제어 하에, 최적화 실행 조건이 유지되는 것에 기반하여, 잡 스케쥴러 및/또는 AOT 백그라운드 서비스 모듈을 실행할 수 있다. 예를 들어, 전자 장치의 충전 상태는 전자 장치가 외부 전력으로부터 전원을 공급받아 배터리를 충전을 수행할 때, 배터리가 완전 충전될 때의 전력 레벨을 기준으로 지정된 레벨(예: 완전 충전된 전력 대비 80%)보다 작거나 같게 충전하는 상태일 수 있다. 일 실시예에서, 프로세서는 전자 장치가 외부 전력으로부터 전원을 공급받아 배터리를 충전을 수행하는 상태면, 전자 장치가 충전 상태에 있다고 판단할 수 있다. 일 실시예에서, 프로세서는 전자 장치가 외부 전력으로부터 전원을 공급받아 배터리를 충전을 수행하는 상태에서, 배터리가 완전 충전될 때의 전력 레벨을 기준으로 지정된 레벨(예: 완전 충전된 전력 대비 80%)보다 작거나 같게 충전하는 상태면, 전자 장치가 충전 상태에 있다고 판단할 수 있다. 일 실시예에서, 프로세서는 전자 장치의 디스플레이(예: 디스플레이 모듈)가 오프(off)되고 지 정된 시간이 경과(예: 오프 후 31분 경과)하면 전자 장치가 유휴(idle) 상태에 있다고 판단할 수 있다. 그 러나, 이에 한정되는 것은 아니며, 전자 장치의 유휴 상태는 디스플레이 온, 오프와 관계없을 수 있다. 예 를 들어, 프로세서는 전자 장치에서 실행 중인 프로세스(process)가 일정 레벨 이하로 리소스를 사용 할 때 유휴 상태에 있다고 판단할 수 있다. 일 실시예에서, 전자 장치는 실행 조건에 기반하여 실행 주기가 도래하고, 충전 상태 및 유휴 상태이면, 프로세서의 제어 하에, 어플리케이션 최적화를 실행할 수 있다. 예를 들어, 하이브리드 방식으로 전자 장치에 설치된 어플리케이션들(예: 어플리케이션에 포함된 어 플리케이션들)은 실행 조건에서 AOT 데몬 또는 AOT 백그라운드 서비스 모듈을 통해 어플리케이션의 적어도 하나의 코드가 컴파일되어 컴파일 파일(예: oat 파일 또는 odex 파일)을 생성할 수 있다. 런타임은 적어도 하나의 컴파일 파일을 이용하여 어플리케이션들을 실행할 수 있다. 다만, 컴파일 파일은 운영체제, 프레임워크, 어플리케이션 및/또는 프로그램의 업데이트(예: OTA(over the air) 업데이트 및/또 는 메인라인(mainline) 업데이트)가 있으면, 사용이 불가하여 다시 AOT 백그라운드 서비스 모듈을 통해 어 플리케이션의 코드들을 컴파일할 필요가 있다. 일 실시예에 따라, 운영체제, 프레임워크, 어플 리케이션 및/또는 프로그램의 업데이트에 의해, AOT 백그라운드 서비스 모듈을 통해 어플리케이 션의 코드들을 컴파일을 다시 생성하는 동작을 어플리케이션 최적화 및/또는 패키지 최적화 동작이라고 할 수 있다. 일 실시예에서, 중단 조건은 전자 장치가 실행 중인 어플리케이션 최적화를 중단하기 위한 전자 장치(10 1)의 상태에 관한 조건일 수 있다. 일 실시예에서, 중단 조건은 전자 장치가 충전 상태에서 이탈한 상태, 또는 유휴 상태에서 이탈한 상태일 수 있다. 일 실시예에서, 중단 조건은 전자 장치가 어플리케이션을 최적화하는 시간이 지정된 시간(예: 10분)을 초 과한 상태일 수 있다. 일 실시예에서, 중단 조건은 배터리가 완전 충전될 때의 전력 레벨을 기준으로 지정된 레벨(예: 완전 충전 된 전력 대비 80%)보다 높게 충전 중인 상태일 수 있다. 일 실시예에서, 중단 조건은 전자 장치의 현재 온도가 지정된 온도(예: 40℃)를 초과한 상태일 수 있다. 전자 장치의 온도 또는 표면 온도는 전자 장치에 포함된 온도 센서를 기반으로 측정될 수 있다. 전자 장치의 현재 온도는 전자 장치의 온도(예: 표면 온도)를 어플리케이션 최적화를 수행하면서 측정한 온도일 수 있다. 일 실시예에서, 중단 조건은 전자 장치의 현재 온도가 어플리케이션 최적화를 수행하기 전에 확인한 온도 로부터 지정된 범위를 초과한 상태일 수 있다. 확인한 온도는 전자 장치의 온도(예: 표면 온도)일 수 있다. 예를 들어, 전자 장치가 어플리케이션 최적화를 수행하기 전에 확인한 전자 장치의 온도가 36℃인 경우 지정된 범위는 1.0 ℃일 수 있다. 어플리케이션 최적화를 수행한 후의 전자 장치의 현재 온도가 37℃ 를 초과하게 되면, 전자 장치는, 프로세서의 제어 하에, 어플리케이션 최적화를 중단할 수 있다. 전 자 장치는 어플리케이션 최적화를 수행하기 전에 확인한 전자 장치의 온도(예: 표면 온도)를 메모리 에 저장할 수 있다. 표 1은 일 실시예에 따른 어플리케이션 최적화를 수행하기 전에 확인한 전자 장치의 온도(예: 표면 온도) 와 지정된 범위를 나타낼 수 있다.표 1 어플리케이션 최적화를 수행하기 전에 확인한 전 자 장치의 온도(예: 표면 온도)지정된 범위 36℃ 이하 확인된 온도로부터 1.0℃ 변화 이내 36℃ 초과 37℃ 이하 확인된 온도로부터 0.8℃ 변화 이내 37℃ 초과 38℃ 이하 확인된 온도로부터 0.5℃ 변화 이내 38℃ 초과 39℃ 이하 확인된 온도로부터 0.2℃ 변화 이내 39℃ 초과 어플리케이션 최적화를 수행한 후의 전자 장치 의 온도(예: 표면 온도)가 40℃ 이하 일 실시예에서, 중단 조건은 전자 장치의 메모리에 저장 가능한 공간이 지정된 사이즈(예: 전체 메모 리 사이즈의 5%)보다 작은 상태일 수 있다. 일 실시예에서, 잡 스케쥴러는 어플리케이션 최적화 리스트를 기반으로 특정 조건(예: 전자 장치의 온도)에 따라 최적화 대상이 되는 어플리케이션들을 선택할 수 있다. 예를 들어, 전자 장치의 온도(예: 표면 온도)가 지정된 온도(예: 39℃)를 초과하면, 잡 스케쥴러는 AOT 백그라운드 서비스 모듈로 하여금 리스트 상의 어플리케이션들 중에서 상위에 포함된 몇 개(예: 5개) 의 어플리케이션에 대해서만 최적화를 수행하게 조정할 수 있다. 일 실시예에서, 배터리가 완전 충전될 때의 전력 레벨을 기준으로 지정된 레벨(예: 완전 충전된 전력 대비 80%)을 초과하는 경우, 배터리의 완전 충전을 기대할 수 있다. 이때, 잡 스케쥴러는 배터리가 완전 충전될 때 전체 어플리케이션이 최적화 동작을 수행할 수 있도록 재 스케쥴링할 수 있다. 일 실시예에서, 잡 스케쥴러는 AOT 백그라운드 서비스 모듈로 하여금 리스트 상의 어플리케이션들 중 에서 상위에 포함된 몇 개(예: 5개)의 어플리케이션에 대해서, 배터리의 전력 레벨과 관계없이 최적화를 실행하도록 스케쥴링할 수 있다. 일 실시예에서, 잡 스케쥴러는 배터리의 충전 구간에 따라 어플리케이션 최적화 리스트를 기반으로 최적화 대상이 되는 어플리케이션들의 개수를 조정할 수 있다. 예를 들어, 배터리의 충전 구간은 CC(constant current) 구간 또는 CV(constant voltage) 구간이 있을 수 있다. 패키지 매니저 또는 AOT 백그라운드 서비스 모듈는 배터리의 충전 구간이 CC(constant current) 구간일 때보다 CV(constant voltage) 구간에 있을 때 더 많은 어플리케이션이 최적화될 수 있도록 리 스트를 생성, 정의 및/또는 저장할 수 있다. 예를 들어, 배터리 의 충전 구간은 일정한 전류를 계속 흘려 보내기 위해 지정된 암페어로 충전되는 CC(Constant Current, 정전류) 구간 또는 일정한 전압 유지하기 위해 지 정한 볼트로 충전하는 CV(Constant Voltage, 정전압) 구간이 있을 수 있다. 적정 배터리 전압에 도달하면 전압 이 고정되어 전류가 흘러가기 때문에 발열이 줄어들게 되어 더 많은 어플리케이션이 최적화될 수 있다. 일 실시예에서, 패키지 매니저 또는 AOT 백그라운드 서비스 모듈는 시스템 서비스인 배터리 매니저를 통해 배터리의 충전 구간에 대한 정보 및/또는 배터리의 충전 레벨에 관한 정보를 획득할 수 있다. 일 실시예에서, 잡 스케쥴러는, 프로세서의 제어 하에, 어플리케이션 최적화에 대한 재 스케쥴링 동 작이 지정된 횟수(예: 3회) 이상 반복되면, 재 스케쥴하지 않고 다음 실행 주기(예: 24시간 후)에 잡 서비스(예: 어플리케이션 최적화)를 수행하도록 할 수 있다. 일 실시예에서, 런타임은 프로그램을 관리하기 위해서, 컴파일러나 가상 머신이 사용하는 기본 코드 의 라이브러리 또는 프로그램일 수 있다. 전자 장치는 ART(android runtime)을 런타임으로 포함할 수 있다. 일 실시예에서, 런타임은 어플리케이션과 시스템 서비스에서 사용되는 런타임으로, dex2oat 툴을 이 용해 dex 파일을 컴파일하여 oat 파일을 생성할 수 있으며, 어플리케이션 실행 시에 oat 파일을 바로 사용 하여 실행시킬 수 있다. 런타임은 AOT(ahead-of-time) 컴파일을 수행할 수 있다. 일 실시예에서, 안드로이드 운영 체제가 적용된 전자 장치는, 안드로이드 런타임(android runtime)(이하 ART라 한다) 이라고 하는 실행 환경이 지원될 수 있다. ART는 하이브리드 방식을 사용할 수 있다. 일 실시예에 서, ART는 dalvik(안드로이드 버추얼 머신)에서 실행가능한 어플리케이션의 덱스 파일(dex file)을 컴파일하기위해 dex2oat라는 툴(tool)을 사용하는데, 이때 동작하는 방식은 컴파일러 필터 (compiler filter)의 설정 값에 의해 지정될 수 있고, 컴파일러 필터는 사용자의 어플리케이션 사용 패턴에 따른 프로파일에 기반하여 설정될 수 있다. ART에서는 설정된 컴파일러 필터에 따라 어플리케이션의 코드들이 컴파일될 수 있다. 예를 들어, 안드로이드 운영체제가 적용된 전자 장치에서, 프로세서는 어플리케이션의 코드들을 런타 임(runtime) 환경에 맞게 컴파일(compile)하여 실행 코드(native code)들로 변환할 수 있다. 코드들을 컴파일하 는 방식에는 AOT(ahead-of-time) 방식, JIT(just-in-time) 방식 또는 AOT 방식과 JIT 방식을 혼합한 하이브리 드(hybrid) 방식이 사용될 수 있다. 전자 장치는, 프로세서의 제어 하에, 어플리케이션을 설치하는 시점에서, 어플리케이션 내 에 포함된 제 2 타입의 인스트럭션들(예: 소스코드, 바이트 코드, 인터프리터 및 가상 머신에 의해 판독 가능한 인스트럭션), 을, 제 1 타입의 인스트럭션(네이티브 코드)들로 변환하여 저장할 수 있다. 예를 들어, 패키지들 을 설치하는 시점에서, 제 2 타입의 인스트럭션들로부터 제 1 타입의 인스트럭션들로 변환하여 저장하는 것은, AOT(ahead of time) 방식으로 참조될 수 있다. AOT 방식은 어플리케이션을 설치하는 시점에 코드들을 컴파일하여 실행 코드들로 변환하여 저장한 뒤, 어플리케 이션의 실행 시점에 변환된 실행 코드들을 직접 읽어 들이는 방식이다. AOT 방식에서는 어플리케이션의 설치 시 에 이미 코드들이 실행 코드들로 변환되기 때문에, 어플리케이션을 실행시키는 시간이 단축될 수 있으나, 어플 리케이션의 설치 시간이 많이 소요되며 어플리케이션의 설치를 위한 저장 공간도 많이 요구될 수 있다. JIT 방식은 어플리케이션을 실행할 때 코드들 중 필요한 코드만을 적절한 시점에 컴파일하는 방식이다. JIT 방 식에서는, 코드들 중 로드(load)된 클래스에 대해 인터프리터(interpreter) 방식으로 동작 하다가 반복 수행을 감지하면, 적절하게 JIT 컴파일러가 동작하여 실행 속도를 향상시킬 수 있다. JIT 방식은 실행 코드를 실행하는 시간이 매우 빠르고, 기본적으로 메모리에 캐시가 이루어지기 때문에 클래스의 반복 호출 시 성능이 극대 화될 수 있다. 예를 들어, 메모리의 일부 영역은 JIT 캐시 코드(cache code) 영역을 포함하고, JIT 방식을 통해서 코드를 JIT 캐시 코드(cache code)에서 실행하기 때문에, 성능이 극대화 될 수 있다. 그러나, JIT 방식 에서는, 런타임 중에 코드들이 실행 코드들로 컴파일되기 때문에 어플리케이션의 설치 시간은 단축되나 어플리 케이션의 실행 시간이 많이 소요될 수 있다. 또한, 메모리에 캐시된 코드들이 해제되었을 때, 코드들에 대 한 재수행이 감지되면 코드들을 재변환하는 시간이 소요되기 때문에, 어플리케이션의 동작에 지연이 발생할 수 도 있다. 예를 들어, 코드들에 대한 재수행이 감지될 경우, 메모리에 포함된 JIT 캐시 코드(cache code)에 저장되어 있던 코드들이 다시 메모리로 이동된 후, 다시 코드들에 대한 재수행이 감지되면 코드들을 캐시 메모리로 읽어들이거나 재변환하는 시간이 소요되기 때문에, 어플리케이션의 동작에 지연이 발생할 수도 있다. 하이브리드 방식은, 어플리케이션의 설치 시에는 JIT 방식을 사용하여 어플리케이션의 설치 시간을 단축하고 어 플리케이션의 설치 공간을 줄일 수 있다. 하이브리드 방식은 인터프리터를 통해 사용자의 어플리케이션 사용 패 턴에 따른 프로파일을 저장한 후, 실행 조건이 부합될 때 AOT 백그라운드 서비스 모듈이 시작되어 백그라 운드에서 어플리케이션을 컴파일하여 실행 코드들을 생성하고, 어플리케이션의 실행 시에는 실행 코드를 바로 사용할 수 있다. 예를 들어, 실행 조건내에서 컴파일 하는 것은, 하이브리드 방식(예: AOT 방식과 JIT 방식의 혼합)을 포함할 수 있다. 일 실시예에서, 런타임은 어플리케이션에 대한 최적화가 필요한지 여부를 판단할 수 있다. 예컨대, 런타임은 사용자 패턴에 따른 프로파일에 기반하여 해당 어플리케이션에 대한 최적화 필요 여부를 판 단할 수 있다. 일 실시예에서, AOT 백그라운드 서비스 모듈은 잡 스케쥴러에 의해 실행되며, 백그라운드 서비스로 동작할 수 있다. AOT 백그라운드 서비스 모듈은 어플리케이션의 패키지 형태인 apk 파일 내에 존재하 는 dex 파일을 dex2oat 툴을 이용하여 컴파일할 수 있다. AOT 백그라운드 서비스 모듈에 의해 컴파일된 dex 파일은 oat 파일로 생성될 수 있다. 일 실시예에서, AOT 백그라운드 서비스 모듈은 잡 스케쥴러에 기반하여 어플리케이션 최적화 리스트 에 기반하여 어플리케이션의 최적화를 수행하거나 중단할 수 있다 일 실시예에서, 패키지 매니저 또는 AOT 백그라운드 서비스 모듈는, 프로세서의 제어 하에, 어 플리케이션 최적화를 실행할 어플리케이션 최적화 리스트를 정의 및/또는 저장할 수 있다. 일 실시예에서, 패키지 매니저 또는 AOT 백그라운드 서비스 모듈는, 프로세서의 제어 하에, 패 키지 매니저에 의해 저장된 어플리케이션 별 사용자 프로파일을 기반으로 어플리케이션 최적화를 실행할어플리케이션 최적화 리스트를 생성, 정의 및/또는 저장할 수 있다. 일 실시예에서, 패키지 매니저 또는 AOT 백그라운드 서비스 모듈는 바이트 코드가 없는 어플리케이션 또는 패키지는 어플리케이션 최적화를 실행할 어플리케이션 최적화 리스트에서 제외할 수 있다. 일 실시예에서, 패키지 매니저 또는 AOT 백그라운드 서비스 모듈는 최대 절전모드( 예: 하버네이션 (hibernation)) 상태에 있는 어플리케이션 또는 패키지는 어플리케이션 최적화를 실행할 어플리케이션 최적화 리스트에서 제외할 수 있다. 예를 들어, 어플리케이션이 지정된 기간(예, 90일) 동안 사용되지 않으면 하버네이 션 상태라고 할 수 있다. 예를 들어, 전자 장치는 하이버네이션 상태에 있는 경우, 전력 소모를 줄이기 위하여, 어플리케이션 또는 패키지를 실행을 하지 않고 전력 소모를 줄이는 동작을 수행할 수 있다. 일 실시예에서, 패키지 매니저 또는 AOT 백그라운드 서비스 모듈는 지정된 시간(예: 3일) 내에 실행 된 포어그라운드(foreground) 액티비티 및/또는 서비스를 포함하는 어플리케이션 또는 패키지를 최근 실행 순서 대로 정렬하여 리스트를 생성, 정의 및/또는 저장할 수 있다. 도 3은 본 개시의 일 실시예에 따른 어플리케이션(예: 어플리케이션)을 컴파일하여, 컴파일된 패키지들을 획득하는 방법을 나타내는 도면이다. 도 3을 참조하면, 전자 장치는, 프로세서 제어 하에, 잡 스케쥴러 및/또는 AOT 백그라운드 서비 스 모듈에 기반하여 어플리케이션을 컴파일하여, 컴파일된 패키지들을 획득할 수 있다. 예를 들어, 어플리케이션은, 바이트 코드와 같은 제 2 타입의 인스트럭션들을 포함할 수 있다. 예를 들어, 컴 파일된 패키지들은, 네이티브 코드와 같은 제 1 타입의 인스트럭션들을 포함할 수 있다. 일 실시예에서, 전자 장치는, 프로세서의 제어 하에, 제 1 타입의 인스트럭션들을 구동할 수 있다. 예를 들어, 제 1 타입의 인스트럭션들은, 네이티브 코드(native code)를 포함할 수 있다. 예를 들어, 제 1 타 입의 인스트럭션들은, 메모리에 저장된 바이너리 파일에 포함되고, 이진 포맷으로 인코딩된 기계어 (machine language), 및/또는 어셈블리 언어(assembly language)의 적어도 일부분일 수 있다. 예를 들어, 제 1 타입의 인스트럭션들은, 제 2 타입의 인스트럭션들을 컴파일하여 생성된 인스트럭션들을 포함할 수 있다. 예를 들어, 제 2 타입의 인스트럭션들은, 소스 코드(source code), 및/또는 바이트 코드(byte code)로 구성될 수 있다. 예를 들어, 소스 코드는, C 언어, JAVA 언어, 및/또는 베이직(beginner’s all-purpose symbolic instruction code)을 포함할 수 있다. 하지만, 이에 제한되지 않는다. 예를 들어, 제 2 타입의 인스트럭션들 은, 바이트 코드와 같이, 프로세서에 의해 실행되는 소프트웨어인, 인터프리터, 및/또는 가상 머신 (예: JVM(java virtual machine))에 의해 판독 가능한 인스트럭션들을 의미할 수 있다. 바이트 코드는, 지정된 길이(예: 1 바이트(byte))를 가지는 인스트럭션일 수 있다. 이하에서, 패키지는, 제 2 타입의 인스트럭션들의 세트이고, 어플리케이션의 실행을 위해 메모리 내에 저장되는 하나 이상의 파일들의 그룹(또는 상기 하나 이상의 파일들이 압축된 단일의 파일)을 의미할 수 있다. 도 4는 본 개시의 전자 장치의 AOT 방식, JIT 방식 및/또는 하이브리드 방식을 설명하기 위한 도면이다. 일 실시예에서, 런타임은 프로그램을 관리하기 위해서, 컴파일러나 가상 머신이 사용하는 기본 코드 의 라이브러리 또는 프로그램일 수 있다. 전자 장치는 ART(android runtime)을 런타임으로 포함할 수 있다. 일 실시예에서, 런타임은 어플리케이션과 시스템 서비스에서 사용되는 런타임으로, dex2oat 툴을 이 용해 dex 파일을 컴파일하여 oat 파일을 생성할 수 있다. 일 실시예에서, 전자 장치는, 프로세서의 제어 하에, 401 동작에서, 어플리케이션 실행 시에 oat 파일을 사용할 수 있다. 일 실시예에서, 전자 장치는, 프로세서의 제어 하에, 403 동작에서, 런타임은 AOT(ahead-of- time) 컴파일을 수행할 수 있다. 전자 장치는, 프로세서의 제어 하에, 405 동작에서, AOT(ahead-of- time) 컴파일을 수행하여 어플리케이션을 실행할 수 있다. 어플리케이션의 최초 설치 시, 예를 들어, 제 2 타입의 인스트럭션들로부터 제 1 타입의 인스트럭션들로 변환하 여 저장하는 것은, AOT(ahead of time) 방식이라 할 수 있다. 어플리케이션의 최초 설치 시, 전자 장치는, 프로세서의 제어 하에, 405 동작에서, 어플리케이션의 설치 시에는 덱스(dex) 파일을 이용할 수 있다. 전자 장치는, 프로세서의 제어 하에, 407 동작에서,런타임을 어플리케이션 최초 설치인지 여부를 확인할 수 있다. 어플리케이션 최초 설치면, 전자 장치(10 1)는, 프로세서의 제어 하에, 411 동작에서, JIT 컴파일러를 이용하여 덱스(dex) 파일을 컴파일할 수 있다. 405 동작, 407 동작, 411 동작, 413 동작을 참조하면, 어플리케이션의 최초 설치 시, 전자 장치는 프로세 서의 제어 하에, JIT 컴파일러를 이용하여 덱스(dex) 파일을 컴파일하여 어플리케이션을 실행할 수 있다. 어플리케이션 최초 설치가 아니면, 전자 장치는 프로세서의 제어 하에, 409 동작에서, 덱스(dex) 파 일을 인터프리터를 이용하여 실행할 수 있다. 전자 장치는 프로세서의 제어 하에, 409 동작에서, 덱스(dex) 파일을 인터프리터를 이용하여 사용자 의 어플리케이션 사용 패턴에 따른 프로파일을 저장할 수 있다. 인터프리터를 통해 사용자의 어플리케이션 사용 패턴에 따른 프로파일을 저장한 후, 전자 장치는 실행 조 건이 부합될 때 AOT 백그라운드 서비스 모듈이 시작되어 백그라운드에서 어플리케이션을 컴파일하여 실행 코드들을 생성할 수 있다. 하이브리드 방식은, 어플리케이션의 설치 시에는 JIT 방식을 사용하여 어플리케이션의 설치 시간을 단축하고 어 플리케이션의 설치 공간을 줄일 수 있으며, 인터프리터를 통해 사용자의 어플리케이션 사용 패턴에 따른 프로파 일을 저장한 후, 실행 조건이 부합될 때 AOT 백그라운드 서비스 모듈이 시작되어 백그라운드에서 어플리케 이션을 컴파일하여 실행 코드들을 생성하고, 어플리케이션의 실행 시에는 실행 코드를 바로 사용할 수 있다. 도 5은 본 개시의 일 실시예에 따른 전자 장치의 어플리케이션을 최적화하는 방법을 나타내는 흐름도이다. 일 실시예에서, 전자 장치는, 501 동작에서, 프로세서의 제어 하에, 전자 장치의 상태가 어플리 케이션 최적화 실행 조건에 대응하는지 여부를 판단할 수 있다. 일 실시예에서, 전자 장치는 501 동작에서, 프로세서의 제어 하에, 잡 스케쥴러를 기반으로 실 행 조건에서 수행할 백그라운드 작업을 관리할 수 있다. 일 실시예에서, 전자 장치는 501 동작에서, 프로세서의 제어 하에, 잡 스케쥴러를 기반으로 실 행 조건에 관한 정보를 잡 인포에 정의 및/또는 저장할 수 있다. 일 실시예에서, 실행 조건은 전자 장치가 어플리케이션 최적화를 실행하기 위한 전자 장치의 상태 및 /또는 실행 주기에 관한 조건일 수 있다. 일 실시예에서, 실행 주기는 1일(24시간)일 수 있다. 예를 들어, 전자 장치는, 프로세서의 제어 하 에, 실행 주기가 1일로 설정되어 있을 경우 실행 주기에 따라 최적화 실행을 해야한다고 판단할 수 있다. 일 실시예에서, 전자 장치의 상태는 전자 장치의 충전 상태 및/또는 전자 장치의 유휴(idle) 상 태일 수 있다. 충전 상태는 전자 장치가 충전 중인 상태를 포함할 수 있다. 예를 들어, 전자 장치는, 프로세서의 제어 하에, 충전 상태 및/또는 전자 장치의 유휴(idle) 상태 최적화 실행을 해야한다고 판단할 수 있다. 일 실시예에서, 전자 장치는 501 동작에서, 프로세서의 제어 하에, 전자 장치가 외부 전력으로 부터 전원을 공급받아 배터리를 충전을 수행하는 상태면, 전자 장치가 충전 상태에 있다고 판단할 수 있다. 일 실시예에서, 전자 장치는 501 동작에서, 프로세서의 제어 하에, 전자 장치의 디스플레이(예: 디스플레이 모듈)가 오프(off)되고 지정된 시간이 경과(예: 오프 후 31분 경과)하면 전자 장치가 유 휴 상태에 있다고 판단할 수 있다. 그러나, 이에 한정되는 것은 아니며, 전자 장치의 유휴 상태는 디스플 레이 온, 오프와 관계없을 수 있다. 예를 들어, 전자 장치는 501 동작에서, 프로세서의 제어 하에, 전자 장치에서 실행 중인 프로세스(process)들이 일정 레벨 이하로 리소스를 사용할 때 유휴 상태에 있다 고 판단할 수 있다. 예를 들어, 유휴(idle) 상태는, 전자 장치, 및 사용자의 상호작용(interaction)이 지 정된 기간(예: 31 분) 이상 발생되지 않는 상태를 포함할 수 있다. 예를 들어, 실행 조건은, 전자 장치의 배터리가 외부 객체에 의해 충전 중이고, 디스플레이(예: 디스플레이 모듈)가 오프(off)되어 있는 상 태를 포함할 수 있다. 예를 들어, 전자 장치가의 유휴 상태는 AOD(always-on-display) 기능의 실행에 기 반하여, 디스플레이(예: 디스플레이 모듈) 상에 유휴 상태와 관련된 화면을 표시하는 상태를 포함할 수 있다. 일 실시예에서, 전자 장치는, 프로세서의 제어 하에, 전자 장치의 상태가 어플리케이션 최적화 실행 조건인 충전 중이고, 유휴(idle) 상태이며, 하루 한번이라는 조건이 만족할 경우 oat/art 파일 생성할 수 있다. 일 실시예에서, 전자 장치의 상태가 어플리케이션 최적화 실행 조건에 대응하면, 전자 장치는 501 동 작에서 503 동작으로 분기할 수 있다. 일 실시예에서, 전자 장치의 상태가 어플리케이션 최적화 실행 조건에 대응하지 않으면, 전자 장치의 어플리케이션 최적화 동작은 종료되고, 수행하던 작업을 계속할 수 있다. 일 실시예에서, 전자 장치는, 503 동작에서, 프로세서의 제어 하에, 충전 중인 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같은지 여부를 확인할 수 있다. 일 실시예에서, 전자 장치는, 503 동작에서, 프로세서의 제어 하에, 시스템 서비스인 배터리 매니저 를 통해 배터리의 충전 구간에 대한 정보 및/또는 배터리의 충전 레벨에 관한 정보를 획득할 수 있다. 예를 들어, 전자 장치의 충전 상태는 전자 장치가 외부 전력으로부터 전원을 공급받아 배터리를 충전을 수행하는 상태일 수 있다. 일 실시예에서, 전자 장치가 외부 전력으로부터 전원을 공급받아 배터리를 충전을 수행할 때, 전자 장치는 503 동작에서, 프로세서의 제어 하에, 배터리가 완전 충전될 때의 전력 레벨을 기준으로 지정된 레벨(예: 완전 충전된 전력 대비 80%)보다 작거나 같게 충전하는지 여부를 판단할 수 있다. 일 실시예에서, 전자 장치는, 503 동작에서, 프로세서의 제어 하에, 어플리케이션 최적화를 실행할 어플리케이션들에 대한 리스트에 기반하여 최적화를 수행할 때마다 충전 중인 배터리의 전력 레벨이 지정 된 전력 레벨보다 작거나 같은지 여부를 확인할 수 있다. 일 실시예에서, 충전 중인 배터리의 레벨이 지정된 레벨보다 작거나 같으면, 전자 장치는 503 동작에 서 505 동작으로 분기할 수 있다. 일 실시예에서, 충전 중인 배터리의 레벨이 지정된 레벨을 초과하면, 전자 장치는 503 동작에서 513 동작으로 분기할 수 있다. 일 실시예에서, 전자 장치는 505동작에서, 프로세서의 제어 하에, 어플리케이션 최적화를 실행할 어 플리케이션들에 대한 리스트를 생성할 수 있다. 그러나, 이에 한정되는 것은 아니며, 전자 장치는 어플리케이션 최적화를 실행할 어플리케이션들에 대한 리스트를 미리 생성할 수 있다. 전자 장치가 어플리케이션 최적화를 실행할 어플리케이션들에 대한 리스트 를 미리 생성한 경우, 505동작은 생략될 수 있다. 일 실시예에서, 전자 장치는 505동작에서, 프로세서의 제어 하에, 패키지 매니저에 의해 저장된 어플리케이션 별 사용자 프로파일을 기반으로 어플리케이션 최적화를 실행할 어플리케이션 최적화 리스트를 생 성, 정의 및/또는 저장할 수 있다. 일 실시예에서, 전자 장치는, 505 동작에서, 프로세서의 제어 하에, 바이트 코드가 없는 어플리케이 션 또는 패키지는 어플리케이션 최적화를 실행할 어플리케이션 최적화 리스트에서 제외할 수 있다. 일 실시예에서, 전자 장치는, 505 동작에서, 프로세서의 제어 하에, 하버네이션(hibernation) 상태에 있는 어플리케이션 또는 패키지는 어플리케이션 최적화를 실행할 어플리케이션 최적화 리스트에서 제외할 수 있 다. 일 실시예에서, 전자 장치는, 505 동작에서, 프로세서의 제어 하에, 지정된 시간(예: 3일) 내에 실행 된 포어그라운드(foreground) 액티비티 및/또는 서비스를 포함하는 어플리케이션 또는 패키지를 최근 실행 순서 대로 정렬하여 리스트를 생성, 정의 및/또는 저장할 수 있다. 일 실시예에서, 전자 장치는, 505 동작에서, 프로세서의 제어 하에, 어플리케이션 최적화 리스트를 기반으로 최적화 대상이 되는 어플리케이션들의 개수를 조정할 수 있다.일 실시예에서, 어플리케이션 최적화를 수행하기 전에, 전자 장치의 온도(예: 표면 온도)가 지정된 온도 (예: 39℃) 이하면, 전자 장치는, 505 동작에서, 프로세서의 제어 하에, AOT 백그라운드 서비스 모듈 로 하여금 리스트에 있는 어플리케이션들에 대해서 최적화를 수행하게 할 수 있다. 일 실시예에서, 전자 장치의 온도(예: 표면 온도)가 지정된 온도(예: 39℃)를 초과하면, 전자 장치는, 505 동작에서, 프로세서의 제어 하에, AOT 백그라운드 서비스 모듈로 하여금 리스트 상 의 어플리케이션들 중에서 상위에 포함된 몇 개(예: 5개)의 어플리케이션에 대해서만 최적화를 수행하게 조정할 수 있다. 일 실시예에서, 전자 장치는, 505 동작에서, 프로세서의 제어 하에, 배터리의 충전 구간에 따라 어플리케이션 최적화 리스트를 기반으로 최적화 대상이 되는 어플리케이션들의 개수를 조정할 수 있다. 예를 들어, 배터리의 충전 구간은 CC(constant current) 구간 또는 CV(constant voltage) 구간이 있을 수 있다. 전자 장치는, 303 동작에서, 프로세서의 제어 하에, 배터리의 충전 구간이 CC(constant current) 구간일 때보다 CV(constant voltage) 구간에 있을 때 더 많은 어플리케이션이 최적화될 수 있도록 리 스트를 생성할 수 있다. 일 실시예에서, 전자 장치는, 507 동작에서, 프로세서의 제어 하에, 전자 장치의 온도 를 확인 할 수 있다. 일 실시예에서, 전자 장치는, 507 동작에서, 프로세서의 제어 하에, 전자 장치의 온도, 온도에 관한 정보, 전자 장치의 온도(예: 표면 온도) 및/또는 배터리의 표면 온도를 확인할 수 있다. 전자 장치의 온도 또는 온도(예: 표면 온도)는 전자 장치에 포함된 온도 센서를 기반으로 측정될 수 있다. 일 실시예에서, 전자 장치는, 507 동작에서, 프로세서의 제어 하에, 확인한 전자 장치의 온도 (예: 표면 온도)에 관한 정보를 메모리에 저장할 수 있다. 일 실시예에서, 전자 장치는, 509 동작에서, 프로세서의 제어 하에, 어플리케이션 최적화 리스트 및 확인한 온도에 기반하여 어플리케이션 최적화를 수행할 수 있다. 일 실시예에서, 전자 장치는, 509 동작에서, 프로세서의 제어 하에, 어플리케이션 최적화 리스트 및 확인한 온도에 기반하여 순차적으로 어플리케이션 최적화를 수행할 수 있다. 예를 들어, 전자 장치는 전자 장치는, 509 동작에서, 프로세서의 제어 하에, 어플리케이션 최적 화 리스트에 있는 순위에 따라 순차적으로 어플리케이션을 최적화하며, 하나의 어플리케이션에 대해서 어플리케 이션 최적화가 수행되면, 509 동작에서 511 동작으로 분기하여 어플리케이션 최적화 중단 여부를 확인할 수 있 다. 일 실시예에서, 전자 장치는 어플리케이션 최적화에 따른 전자 장치의 발열을 줄이고, 안정적인 배터 리 충전을 위해서, 어플리케이션 최적화 리스트에 있는 순위에 따라 순차적으로 어플리케이션을 최적화하 며, 하나의 어플리케이션에 대해서 어플리케이션 최적화가 수행되면, 어플리케이션 최적화 중단 여부를 확인할 수 있다. 일 실시예에서, 하이브리드 방식으로 전자 장치에 설치된 어플리케이션들(예: 어플리케이션에 포함된 어플리케이션들)은 실행 조건에서 AOT 데몬 또는 AOT 백그라운드 서비스 모듈을 통해 어플리케이션의 코드들이 컴파일되어 컴파일 파일(예: oat 파일 또는 odex 파일)을 생성할 수 있다. 런타임은 컴파일 파일 을 이용하여 어플리케이션들을 실행할 수 있다. 다만, 컴파일 파일은 운영체제, 프레임워크, 어플리 케이션 및/또는 프로그램의 업데이트(예: OTA(over the air) 업데이트 및/또는 메인라인(mainline) 업데이트)가 있으면, 사용이 불가하여 다시 AOT 백그라운드 서비스 모듈을 통해 어플리케이션의 코드 들을 컴파일할 필요가 있다. 운영체제, 프레임워크, 어플리케이션 및/또는 프로그램의 업 데이트에 의해, AOT 백그라운드 서비스 모듈을 통해 어플리케이션의 코드들을 컴파일을 다시 생성하 는 동작을 어플리케이션 최적화 및/또는 패키지 최적화 동작이라고 할 수 있다. 일 실시예에서, 전자 장치는, 511 동작에서, 프로세서의 제어 하에, 전자 장치의 상태가 어플리 케이션 최적화 중단 조건에 대응하는지 여부를 확인할 수 있다. 일 실시예에서, 중단 조건은 전자 장치가 실행 중인 어플리케이션 최적화를 중단하기 위한 전자 장치(10 1)의 상태에 관한 조건일 수 있다. 전자 장치의 상태가 어플리케이션 최적화 중단 조건에 대응하면, 전자 장치는 511 동작에서 513 동작 으로 분기할 수 있다. 전자 장치의 상태가 어플리케이션 최적화 중단 조건에 대응하면, 전자 장치는 511 동작에서 509 동작 으로 분기하여, 어플리케이션 최적화 리스트 상에 최적화가 완료된 어플리케이션 다음에 최적화가 진행되지 않 은 어플리케이션에 대해서 최적화를 수행할 수 있다. 일 실시예에서, 전자 장치는, 513 동작에서, 프로세서의 제어 하에, 어플리케이션 최적화 동작을 중 단하고 재 스케쥴링 동작을 수행할 수 있다. 일 실시예에서, 전자 장치는, 513 동작에서, 프로세서의 제어 하에, 어플리케이션 최적화에 대한 재 스케쥴링 동작이 지정된 횟수(예: 3회) 이상 반복되면, 재 스케쥴하지 않고 다음 실행 주기(예: 24시간 후)에 어플리케이션 최적화를 수행하도록 할 수 있다. 일 실시예에서, 중단 조건은 전자 장치가 충전 상태에서 이탈한 상태, 또는 유휴 상태에서 이탈한 상태일 수 있다. 일 실시예에서, 중단 조건은 전자 장치가 어플리케이션을 최적화하는 시간이 지정된 시간(예: 10분)을 초 과한 상태일 수 있다. 일 실시예에서, 중단 조건은 배터리가 완전 충전될 때의 전력 레벨을 기준으로 지정된 레벨(예: 완전 충전 된 전력 대비 80%)보다 높게 충전 중인 상태일 수 있다. 일 실시예에서, 중단 조건은 전자 장치의 현재 온도가 지정된 온도(예: 40℃)를 초과한 상태일 수 있다. 전자 장치의 온도 또는 표면 온도는 전자 장치에 포함된 온도 센서를 기반으로 측정될 수 있다. 전자 장치의 현재 온도는 전자 장치의 온도(예: 표면 온도)를 어플리케이션 최적화를 수행하면서 측정한 온도일 수 있다. 표 1을 참조하면, 중단 조건은 전자 장치의 현재 온도가 어플리케이션 최적화를 수행하기 전에 확인한 온 도로부터 지정된 범위를 초과한 상태일 수 있다. 확인한 온도는 전자 장치의 온도(예: 표면 온도)일 수 있 다. 일 실시예에서, 중단 조건은 전자 장치의 메모리에 저장 가능한 공간이 지정된 사이즈(예: 전체 메 모리 사이즈의 5%)보다 작은 상태일 수 있다. 일 실시예에서, 전자 장치는, 311 동작에서, 프로세서의 제어 하에, 전자 장치의 현재 온도가 지정된 온도(예: 40℃)보다 낮은지 여부를 판단할 수 있다. 일 실시예에서, 전자 장치의 현재 온도가 지정된 온도(예: 40℃)보다 낮으면, 전자 장치는, 프로세서 의 제어 하에, 어플리케이션 최적화 리스트 및 확인한 온도에 기반하여 순차적으로 어플리케이션 최적화를 수행할 수 있다. 일 실시예에서, 전자 장치의 현재 온도가 지정된 온도(예: 40℃)를 초과하면, 전자 장치는, 프로세서 의 제어 하에, 어플리케이션 최적화 동작을 중단하고 재 스케쥴링 동작을 수행할 수 있다. 일 실시예에서, 전자 장치는, 311 동작에서, 프로세서의 제어 하에, 전자 장치의 현재 온도가 어플리케이션 최적화를 수행하기 전에 확인한 온도로부터 지정된 범위 이내인지 여부를 판단할 수 있다. 일 실시예에서, 전자 장치의 현재 온도가 어플리케이션 최적화를 수행하기 전에 확인한 온도로부터 지정된 범위 이내면, 전자 장치는, 프로세서의 제어 하에, 어플리케이션 최적화 리스트 및 확인한 온도에 기 반하여 순차적으로 어플리케이션 최적화를 수행할 수 있다. 일 실시예에서, 전자 장치의 현재 온도가 어플리케이션 최적화를 수행하기 전에 확인한 온도로부터 지정된 범위를 초과하면, 전자 장치는, 프로세서의 제어 하에, 어플리케이션 최적화 동작을 중단하고 재 스 케쥴링 동작을 수행할 수 있다. 표 1을 참조하면, 전자 장치가 어플리케이션 최적화를 수행하기 전에 확인한 전자 장치의 온도가 36 ℃ 인 경우 지정된 범위는 1.0 ℃일 수 있다. 어플리케이션 최적화를 수행한 후의 전자 장치의 현재 온도 가 37℃를 초과하게 되면, 전자 장치는, 프로세서의 제어 하에, 어플리케이션 최적화를 중단할 수 있다. 표 1을 참조하면, 전자 장치가 어플리케이션 최적화를 수행하기 전에 확인한 전자 장치의 온도가 36. 5℃인 경우 지정된 범위는 0.8℃일 수 있다. 어플리케이션 최적화를 수행한 후의 전자 장치의 현재 온도가 37.3℃를 초과하게 되면, 전자 장치는, 프로세서의 제어 하에, 어플리케이션 최적화를 중단할 수 있 다. 표 1을 참조하면, 전자 장치가 어플리케이션 최적화를 수행하기 전에 확인한 전자 장치의 온도가 37. 5℃인 경우 지정된 범위는 0.5℃일 수 있다. 어플리케이션 최적화를 수행한 후의 전자 장치의 현재 온도가 38℃를 초과하게 되면, 전자 장치는, 프로세서의 제어 하에, 어플리케이션 최적화를 중단할 수 있다. 표 1을 참조하면, 전자 장치가 어플리케이션 최적화를 수행하기 전에 확인한 전자 장치의 온도가 38. 5℃인 경우 지정된 범위는 0.2℃일 수 있다. 어플리케이션 최적화를 수행한 후의 전자 장치의 현재 온도가 38.7℃를 초과하게 되면, 전자 장치는, 프로세서의 제어 하에, 어플리케이션 최적화를 중단할 수 있 다. 표 1을 참조하면, 전자 장치가 어플리케이션 최적화를 수행하기 전에 확인한 전자 장치의 온도가 39. 5℃인 경우 지정된 범위는 40℃일 수 있다. 어플리케이션 최적화를 수행한 후의 전자 장치의 현재 온도가 40℃를 초과하게 되면, 전자 장치는, 프로세서의 제어 하에, 어플리케이션 최적화를 중단할 수 있다. 일 실시예에서, 전자 장치는 프로세서, 배터리, 및 메모리를 포함할 수 있다. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 전자 장치의 상태가 어플리케이션 최적화 실행 조건에 대응하는지 여부를 확인하고, 충전 중인 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같은지 여부를 확인하며, 충전 중인 배터리의 전력 레벨이 지정된 전력 레벨 보다 작거나 같으면, 어플리케이션 최적화를 실행할 어플리케이션들에 대한 리스트를 생성하고, 전자 장치(10 1)의 온도에 관한 정보를 확인하며, 리스트 및 온도에 기반하여, 어플리케이션 최적화를 실행하도록 제어하는 명령어들을 저장할 수 있다. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 배터리의 충 전 구간에 따라, 리스트를 기반으로 최적화 대상이 되는 어플리케이션들의 개수를 조정하는 명령어들을 저장할 수 있다. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 지정된 시간 내에 실행된 포어그라운드(foreground) 액티비티 및/또는 서비스를 포함하는 어플리케이션을 최근 실행 순서대로 정 렬하여 리스트를 생성하도록 제어하는 명령어들을 저장할 수 있다. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 충전 중인 배터리 의 전력 레벨이 지정된 전력 레벨을 초과하면, 재 스케쥴링을 실행하도록 제어하는 명령어들을 저장하는 전자 장치. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 충전 중인 배터리 의 전력 레벨이 지정된 전력 레벨을 초과하면, 어플리케이션 전체에 대한 최적화 동작을 실행하도록 제어 하는 명령어들을 저장할 수 있다. 일 실시예에서, 어플리케이션 최적화 실행 조건은 전자 장치가 충전 상태이고, 전자 장치가 유휴 상 태일 수 있다. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 리스트 및 온도에 기반하여, 어플리케이션 최적화를 순차적으로 실행하며, 전자 장치의 상태가 어플리케이션 최적화 중단 조 건에 대응하는지 여부를 확인하고, 전자 장치의 상태가 중단 조건에 대응하면, 재 스케쥴링을 실행하도록 제어하는 명령어들을 저장할 수 있다. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 전자 장치가 충전 상태에서 이탈한 상태, 또는 유휴 상태에서 이탈한 상태면, 재 스케쥴링 동작을 실행하도록 제어하는 명령 어들을 저장할 수 있다. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 리스트에 기반하여 적어도 하나의 어플리케이션에 대해 어플리케이션 최적화를 수행한 후에, 전자 장치의 현재 온도가 지정된온도를 초과하면, 재 스케쥴링 동작을 실행하도록 제어하는 명령어들을 저장할 수 있다. 일 실시예에서, 메모리는, 프로세서에 의해 실행될 때, 전자 장치로 하여금, 전자 장치의 현재 온도가 어플리케이션 최적화를 수행하기 전에 확인한 온도로부터 지정된 범위 이내를 초과하면, 재 스케쥴 링 동작을 실행하도록 제어하는 명령어들을 저장할 수 있다. 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 전자 장치의 상태가 어플리케이션 최 적화 실행 조건에 대응하는지 여부를 확인하는 동작, 충전 중인 배터리의 전력 레벨이 지정된 전력 레벨보 다 작거나 같은지 여부를 확인하는 동작, 충전 중인 배터리의 전력 레벨이 지정된 전력 레벨보다 작거나 같으면, 어플리케이션 최적화를 실행할 어플리케이션들에 대한 리스트를 생성하는 동작,전자 장치의 온도 에 관한 정보를 확인하는 동작,및 리스트 및 온도에 기반하여, 어플리케이션 최적화를 실행하는 동작을 포함할 수 있다. 일 실시예에서, 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 배터리의 충전 구간 에 따라, 리스트를 기반으로 최적화 대상이 되는 어플리케이션들의 개수를 조정하는 동작을 포함할 수 있다. 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 지정된 시간 내에 실행된 포어그라운드 (foreground) 액티비티 및/또는 서비스를 포함하는 어플리케이션을 최근 실행 순서대로 정렬하여 리스트를 생성 하는 동작을 포함할 수 있다. 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 충전 중인 배터리의 전력 레벨이 지 정된 전력 레벨을 초과하면, 재 스케쥴링을 실행하는 동작을 포함할 수 있다. 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 충전 중인 배터리의 전력 레벨이 지 정된 전력 레벨을 초과하면, 어플리케이션 전체에 대한 최적화 동작을 실행하는 동작을 포함할 수 있다. 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 리스트 및 온도에 기반하여, 어플리케이션 최적화를 순차적으로 실행하는 동작,전자 장치의 상태가 어플리케이션 최적화 중단 조건에 대응하는지 여 부를 확인하는 동작,및 전자 장치의 상태가 중단 조건에 대응하면, 재 스케쥴링을 실행하는 동작을 포함할 수 있다. 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 전자 장치가 충전 상태에서 이탈한 상태, 또는 유휴 상태에서 이탈한 상태면, 재 스케쥴링 동작을 실행하는 동작을 포함할 수 있다. 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 리스트에 기반하여 적어도 하나의 어플리 케이션에 대해 어플리케이션 최적화를 수행한 후에, 전자 장치의 현재 온도가 지정된 온도를 초과하면, 재 스케쥴링 동작을 실행하는 동작을 포함할 수 있다. 일 실시예에서, 전자 장치의 어플리케이션을 최적화하는 방법은 전자 장치의 현재 온도가 어플리케이 션 최적화를 수행하기 전에 확인한 온도로부터 지정된 범위 이내를 초과하면, 재 스케쥴링 동작을 실행하는 동 작을 포함할 수 있다. 본 문서에 개시된 다양한 실시예들에 따른 전자 장치는 다양한 형태의 장치가 될 수 있다. 전자 장치는, 예를 들면, 휴대용 통신 장치(예: 스마트폰), 컴퓨터 장치, 휴대용 멀티미디어 장치, 휴대용 의료 기기, 카메라, 웨 어러블 장치, 또는 가전 장치를 포함할 수 있다. 본 문서의 실시예에 따른 전자 장치는 전술한 기기들에 한정되 지 않는다. 본 문서의 다양한 실시예들 및 이에 사용된 용어들은 본 문서에 기재된 기술적 특징들을 특정한 실시예들로 한 정하려는 것이 아니며, 해당 실시예의 다양한 변경, 균등물, 또는 대체물을 포함하는 것으로 이해되어야 한다. 도면의 설명과 관련하여, 유사한 또는 관련된 구성요소에 대해서는 유사한 참조 부호가 사용될 수 있다. 아이템 에 대응하는 명사의 단수 형은 관련된 문맥상 명백하게 다르게 지시하지 않는 한, 상기 아이템 한 개 또는 복수 개를 포함할 수 있다. 본 문서에서, \"A 또는 B\", \"A 및 B 중 적어도 하나\", \"A 또는 B 중 적어도 하나\", \"A, B 또는 C\", \"A, B 및 C 중 적어도 하나\", 및 \"A, B, 또는 C 중 적어도 하나\"와 같은 문구들 각각은 그 문구들 중 해당하는 문구에 함께 나열된 항목들 중 어느 하나, 또는 그들의 모든 가능한 조합을 포함할 수 있다. \"제 1\", \"제 2\", 또는 \"첫째\" 또는 \"둘째\"와 같은 용어들은 단순히 해당 구성요소를 다른 해당 구성요소와 구분하기 위 해 사용될 수 있으며, 해당 구성요소들을 다른 측면(예: 중요성 또는 순서)에서 한정하지 않는다. 어떤(예: 제 1) 구성요소가 다른(예: 제 2) 구성요소에, \"기능적으로\" 또는 \"통신적으로\"라는 용어와 함께 또는 이런 용어 없이, \"커플드\" 또는 \"커넥티드\"라고 언급된 경우, 그것은 상기 어떤 구성요소가 상기 다른 구성요소에 직접적으로(예: 유선으로), 무선으로, 또는 제 3 구성요소를 통하여 연결될 수 있다는 것을 의미한다. 본 문서의 다양한 실시예들에서 사용된 용어 \"모듈\"은 하드웨어, 소프트웨어 또는 펌웨어로 구현된 유닛을 포함 할 수 있으며, 예를 들면, 로직, 논리 블록, 부품, 또는 회로와 같은 용어와 상호 호환적으로 사용될 수 있다. 모듈은, 일체로 구성된 부품 또는 하나 또는 그 이상의 기능을 수행하는, 상기 부품의 최소 단위 또는 그 일부 가 될 수 있다. 예를 들면, 일실시예에 따르면, 모듈은 ASIC(application-specific integrated circuit)의 형 태로 구현될 수 있다. 본 문서의 다양한 실시예들은 기기(machine)(예: 전자 장치) 의해 읽을 수 있는 저장 매체(storage medium)(예: 내장 메모리 또는 외장 메모리)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어 (예: 프로그램)로서 구현될 수 있다. 예를 들면, 기기(예: 전자 장치)의 프로세서(예: 프로세서 )는, 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행할 수 있다. 이것은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수행하도록 운영되는 것 을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터프리터에 의해 실행될 수 있는 코드를 포함할 수 있다. 기기로 읽을 수 있는 저장 매체는, 비일시적(non-transitory) 저장 매체의 형 태로 제공될 수 있다. 여기서, ‘비일시적’은 저장 매체가 실재(tangible)하는 장치이고, 신호(signal)(예: 전 자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장 매체에 반영구적으로 저장되는 경 우와 임시적으로 저장되는 경우를 구분하지 않는다. 일실시예에 따르면, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(computer program product)에 포함되어 제공될 수 있다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래될 수 있 다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예: compact disc read only memory(CD-ROM))의 형태로 배포되거나, 또는 어플리케이션 스토어(예: 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예: 스마트 폰들) 간에 직접, 온라인으로 배포(예: 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨 터 프로그램 제품의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또는 중계 서버의 메모리와 같 은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 다양한 실시예들에 따르면, 상기 기술한 구성요소들의 각각의 구성요소(예: 모듈 또는 프로그램)는 단수 또는 복수의 개체를 포함할 수 있으며, 복수의 개체 중 일부는 다른 구성요소에 분리 배치될 수도 있다. 다양한 실시 예들에 따르면, 전술한 해당 구성요소들 중 하나 이상의 구성요소들 또는 동작들이 생략되거나, 또는 하나 이상 의 다른 구성요소들 또는 동작들이 추가될 수 있다. 대체적으로 또는 추가적으로, 복수의 구성요소들(예: 모듈 또는 프로그램)은 하나의 구성요소로 통합될 수 있다. 이런 경우, 통합된 구성요소는 상기 복수의 구성요소들 각각의 구성요소의 하나 이상의 기능들을 상기 통합 이전에 상기 복수의 구성요소들 중 해당 구성요소에 의해 수행되는 것과 동일 또는 유사하게 수행할 수 있다. 다양한 실시예들에 따르면, 모듈, 프로그램 또는 다른 구성 요소에 의해 수행되는 동작들은 순차적으로, 병렬적으로, 반복적으로, 또는 휴리스틱하게 실행되거나, 상기 동 작들 중 하나 이상이 다른 순서로 실행되거나, 생략되거나, 또는 하나 이상의 다른 동작들이 추가될 수 있다.도면 도면1 도면2 도면3 도면4 도면5"}
{"patent_id": "10-2023-0100311", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도면의 설명과 관련하여, 동일 또는 유사한 구성 요소에 대해서는 동일 또는 유사한 참조 부호가 사용될 수 있 다. 도 1은 본 개시의 다양한 실시예에 따른 네트워크 환경 내의 전자 장치의 블록도이다. 도 2는 본 개시의 일 실시예에 따른 프로그램의 예시적인 블록도이다. 도 3은 본 개시의 일 실시예에 따른 어플리케이션을 컴파일하여, 컴파일된 패키지들을 획득하는 방법을 나타내 는 도면이다. 도 4는 본 개시의 전자 장치의 AOT 방식, JIT 방식 및/또는 하이브리드 방식을 설명하기 위한 도면이다. 도 5은 본 개시의 일 실시예에 따른 전자 장치의 어플리케이션을 최적화하는 방법을 나타내는 흐름도이다."}
