{"patent_id": "10-2019-0172641", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0080756", "출원번호": "10-2019-0172641", "발명의 명칭": "인공지능 모델의 분산 학습 기법", "출원인": "주식회사 제로원에이아이", "발명자": "송준호"}}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램으로서, 상기 컴퓨터 프로그램은 마스터 노드의 프로세서로 하여금 이하의 단계들을 수행하기 위한 명령들을 포함하며, 상기 단계들은:클라이언트로부터 모델의 학습을 위한 분산 자원 요청 신호를 수신하는 단계;상기 분산 자원 요청 신호를 수신함에 따라, 하나의 클러스터에 포함된 상기 마스터 노드 및 하나 이상의 서브노드들 중 상기 모델의 학습을 수행할 노드를 결정하는 단계;상기 모델의 학습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여 상기 모델을 업데이트하는 단계; 및상기 업데이트된 모델이 기 설정된 조건을 만족하는 경우, 상기 모델의 학습을 완료하고, 상기 업데이트된 모델을 상기 클라이언트로 전송하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제 1 항에 있어서,상기 분산 자원 요청 신호를 수신함에 따라, 하나의 클러스터에 포함된 상기 마스터 노드 및 하나 이상의 서브노드들 중 상기 모델의 학습을 수행할 노드를 결정하는 단계는,상기 분산 자원 요청 신호에 포함된 상기 모델의 학습을 위한 태스크를 인식하는 단계;상기 태스크를 분산하기 위해 상기 하나 이상의 서브 노드들 각각의 자원을 인식하는 단계;상기 하나 이상의 서브 노드들 각각의 자원에 기초하여, 상기 태스크를 서브 태스크로 분할하는 단계; 및상기 서브 태스크를 수행할 노드를 결정하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제 2 항에 있어서,상기 태스크는 상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 독립적으로 수행되거나, 상기 마스터 노드 및 상기 하나 이상의 서브 노드들에서 종속적으로 수행되는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제 1 항에 있어서,상기 분산 자원 요청 신호를 수신함에 따라, 하나의 클러스터에 포함된 상기 마스터 노드 및 하나 이상의 서브공개특허 10-2021-0080756-3-노드들 중 상기 모델의 학습을 수행할 노드를 결정하는 단계는,상기 분산 자원 요청 신호에 기초하여 학습 설정 정보를 결정하는 단계; 및상기 학습 설정 정보에 기초하여, 상기 마스터 노드 및 하나 이상의 서브 노드들 중 상기 모델의 학습을 수행할노드를 결정하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제 1 항에 있어서,상기 분산 자원 요청 신호에 포함된 상기 모델을 이용하여 수행되는 잡(Job)에 대한 정보를 인식하는 단계; 및상기 잡에 대한 정보에 기초하여, 최적의 학습 설정 정보를 결정하는 단계;를 더 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제 1 항에 있어서,상기 모델의 학습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여 상기 모델을 업데이트하는 단계는,상기 학습 결과 정보에 기초하여 최적의 학습 설정 정보를 결정하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제 6 항에 있어서,상기 학습 결과 정보에 기초하여 최적의 학습 설정 정보를 결정하는 단계는,상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 학습된 모델의 성능을 판단하고, 각각의 모델 별성능에 기초하여 각각의 모델에 매칭된 학습 설정 정보 중 최적의 학습 설정 정보를 결정하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제 7 항에 있어서,상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 학습된 모델의 성능을 판단하고, 각각의 모델 별성능에 기초하여 각각의 모델에 매칭된 학습 설정 정보 중 최적의 학습 설정 정보를 결정하는 단계는,상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 수행된 상기 모델의 학습에 따른 복수의 서브 학습 결과 정보 및 상기 복수의 서브 학습 결과 정보에 대응하는 서브 학습 설정 정보를 획득하는 단계;상기 복수의 서브 학습 결과 정보를 이용하여 상기 모델을 복수의 서브 모델들로 업데이트하고, 테스트 데이터공개특허 10-2021-0080756-4-세트를 이용하여 상기 복수의 서브 모델들 각각의 성능을 판별하는 단계;상기 복수의 서브 모델들 중 상기 성능이 가장 높은 특정 모델의 업데이트에 이용된 제 1 서브 학습 결과 정보를 인식하는 단계; 및상기 제 1 서브 학습 결과 정보에 대응하는 제 1 서브 학습 설정 정보를 상기 최적의 학습 설정 정보로 결정하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제 1 항에 있어서,상기 모델의 학습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여 상기 모델을 업데이트하는 단계는,상기 하나 이상의 서브 노드들 각각에서 수행된 상기 모델의 학습에 따른 제 1 학습 결과 정보를 수신하는단계;상기 마스터 노드에서 수행된 상기 모델의 학습에 따른 제 2 학습 결과 정보를 획득하는 단계; 및상기 제 1 학습 결과 정보 및 상기 제 2 학습 결과 정보를 합산하여 상기 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여, 상기 모델을 업데이트 하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제 1 항에 있어서,상기 모델의 학습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여 상기 모델을 업데이트하는 단계는,상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 수행된 상기 모델의 학습에 따른 복수의 서브 학습 결과 정보를 획득하는 단계;상기 복수의 서브 학습 결과 정보를 이용하여 상기 모델을 복수의 서브 모델들로 업데이트하고, 테스트 데이터세트를 이용하여 상기 복수의 서브 모델들 각각의 성능을 판별하는 단계; 및상기 복수의 서브 모델들 각각의 성능에 기초하여 결정된 모델의 학습 결과 정보를 상기 학습 결과 정보로 결정하고, 상기 성능에 기초하여 결정된 모델을 상기 업데이트된 모델로 결정하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_11", "content": "제 1 항에 있어서,상기 업데이트된 모델이 기 설정된 조건을 만족하는 경우, 상기 모델의 학습을 완료하고, 상기 업데이트된 모델을 상기 클라이언트로 전송하는 단계는,상기 업데이트된 모델의 평가 정보를 획득하는 단계;공개특허 10-2021-0080756-5-상기 분산 자원 요청 신호에 포함된 학습 목표 정보 및 상기 평가 정보에 기초하여, 상기 기 설정된 조건의 만족 여부를 결정하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_12", "content": "제 11 항에 있어서,상기 분산 자원 요청 신호에 포함된 학습 목표 정보 및 상기 평가 정보에 기초하여, 상기 기 설정된 조건의 만족 여부를 결정하는 단계는,상기 학습 목표 정보에 포함된 상기 모델의 목표 성능보다 상기 평가 정보에 포함된 상기 업데이트된 모델의 성능이 높은 경우, 상기 기 설정된 조건이 만족되었다고 인식하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_13", "content": "제 5 항 및 제 6 항 중 어느 한 항 있어서,상기 업데이트된 모델이 기 설정된 조건을 만족하는 경우, 상기 모델의 학습을 완료하고, 상기 업데이트된 모델을 상기 클라이언트로 전송하는 단계는,상기 업데이트된 모델과 함께 상기 최적의 학습 설정 정보를 전송하는 단계;를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_14", "content": "제 1 항에 있어서,상기 모델의 학습을 위한 상기 분산 자원 요청 신호는,상기 클라이언트를 식별 가능한 식별 정보, 상기 모델의 학습에 요구되는 학습 설정 정보, 상기 모델의 학습 목표인 학습 목표 정보 및 학습되는 상기 모델을 이용하여 수행되는 잡에 대한 정보 중 적어도 하나를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_15", "content": "제 14 항에 있어서, 상기 학습 설정 정보는,상기 모델에 관련한 하이퍼 파라미터 정보를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_16", "content": "공개특허 10-2021-0080756-6-제 1 항에 있어서,상기 학습 결과 정보는,상기 학습된 모델의 버전 정보, 상기 학습된 모델의 가중치, 상기 학습에 따른 가중치 변화량 및 모델의 학습방법에 대한 정보 중 적어도 하나를 포함하는,컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_17", "content": "제 16 항에 있어서,상기 학습된 모델의 가중치는,상기 마스터 노드 및 상기 하나 이상의 서브 노드들에서 상기 모델을 학습시키기 위해 사용된 학습 데이터 세트로부터 추출된 지식을 반영하는,컴퓨터 판독가능 저장매체에 저장된 컴퓨터 프로그램."}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 개시의 일 실시예에 따라, 컴퓨터 판독가능 저장 매체에 저장된 컴퓨터 프로그램이 개시된다. 상기 컴퓨터 프 로그램은 마스터 노드의 프로세서로 하여금 이하의 단계들을 수행하기 위한 명령들을 포함하며, 상기 단계들은: 클라이언트로부터 모델의 학습을 위한 분산 자원 요청 신호를 수신하는 단계; 상기 분산 자원 요청 신호를 수신 함에 따라, 하나의 클러스터에 포함된 상기 마스터 노드 및 하나 이상의 서브 노드들 중 상기 모델의 학습을 수 행할 노드를 결정하는 단계; 상기 모델의 학습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초 하여 상기 모델을 업데이트하는 단계; 및 상기 업데이트된 모델이 기 설정된 조건을 만족하는 경우, 상기 모델의 학습을 완료하고, 상기 업데이트된 모델을 상기 클라이언트로 전송하는 단계;를 포함할 수 있다."}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 개시는 컴퓨팅 장치를 활용한 정보 처리 방법에 관한 것으로서, 보다 구체적으로는 인공지능 모델의 분산 학 습 기법을 제공하기 위한 기술에 관한 것이다."}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "인공지능(Artificial Intelligence, AI) 시스템은 인간 수준의 지능을 구현하는 컴퓨터 시스템이며, 기존 룰 (Rule) 기반 스마트 시스템과 달리 기계가 스스로 학습하고 판단하며 똑똑해지는 시스템이다. 인공지능 시스템 은 사용할수록 인식률이 향상되고 사용자 취향을 보다 정확하게 이해할 수 있게 되어, 기존 룰 기반 스마트 시 스템은 점차 딥러닝 기반 인공지능 시스템으로 대체되고 있다. 이러한 인공지능 시스템은 다양한 분야에 활용되기 이전에 인공지능 모델의 학습이 이루어져야 한다. 한편, 인공지능 모델의 학습을 처리하기 위해서는 컴퓨팅 장치의 큰 자원이 요구될 수 있다. 하지만, 인공지능 시스템을 구현하고자 하는 개인 또는 소규모의 기업이 인공지능 모델의 학습을 처리하기 위해서 컴퓨팅 장치의 큰 자원을 확보하는데 어려움(예컨대, 높은 비용 발생 등)이 발생될 수 있다. 따라서, 큰 자원이 요구되는 인공지능 모델의 학습을 분산하여 학습시키는 인공지능 모델의 분산 학습 기법에 대한 수요가 당업계에 존재할 수 있다. 대한민국 등록특허공보 제10-1944090호는 특정 분야(과제 매칭)에 이용되는 인공지능 모델의 학습 방법을 개시 하고 있다."}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 개시는 전술한 배경기술에 대응하여 안출된 것으로, 인공지능 모델의 분산 학습 기법을 제공하기 위함이다. 본 개시의 기술적 과제들은 이상에서 언급한 기술적 과제로 제한되지 않으며, 언급되지 않은 또 다른 기술적 과 제들은 아래의 기재로부터 당업자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "전술한 바와 같은 과제를 해결하기 위한 본 개시의 일 실시예에 따라, 본 개시의 일 실시예에 따른, 컴퓨터 판 독가능 저장 매체에 저장된 컴퓨터 프로그램으로서, 상기 컴퓨터 프로그램은 마스터 노드의 프로세서로 하여금이하의 단계들을 수행하기 위한 명령들을 포함하며, 상기 단계들은: 클라이언트로부터 모델의 학습을 위한 분산 자원 요청 신호를 수신하는 단계; 상기 분산 자원 요청 신호를 수신함에 따라, 하나의 클러스터에 포함된 상기 마스터 노드 및 하나 이상의 서브 노드들 중 상기 모델의 학습을 수행할 노드를 결정하는 단계; 상기 모델의 학 습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여 상기 모델을 업데이트하는 단계; 및 상 기 업데이트된 모델이 기 설정된 조건을 만족하는 경우, 상기 모델의 학습을 완료하고, 상기 업데이트된 모델을 상기 클라이언트로 전송하는 단계;를 포함할 수 있다. 또한, 상기 분산 자원 요청 신호를 수신함에 따라, 하나의 클러스터에 포함된 상기 마스터 노드 및 하나 이상의 서브 노드들 중 상기 모델의 학습을 수행할 노드를 결정하는 단계는, 상기 분산 자원 요청 신호에 포함된 상기 모델의 학습을 위한 태스크를 인식하는 단계; 상기 태스크를 분산하기 위해 상기 하나 이상의 서브 노드들 각각 의 자원을 인식하는 단계; 상기 하나 이상의 서브 노드들 각각의 자원에 기초하여, 상기 태스크를 서브 태스크 로 분할하는 단계; 및 상기 서브 태스크를 수행할 노드를 결정하는 단계;를 포함할 수 있다. 또한, 상기 태스크는 상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 독립적으로 수행되거나, 상 기 마스터 노드 및 상기 하나 이상의 서브 노드들에서 종속적으로 수행될 수 있다. 또한, 상기 분산 자원 요청 신호를 수신함에 따라, 하나의 클러스터에 포함된 상기 마스터 노드 및 하나 이상의 서브 노드들 중 상기 모델의 학습을 수행할 노드를 결정하는 단계는, 상기 분산 자원 요청 신호에 기초하여 학 습 설정 정보를 결정하는 단계; 및 상기 학습 설정 정보에 기초하여, 상기 마스터 노드 및 하나 이상의 서브 노 드들 중 상기 모델의 학습을 수행할 노드를 결정하는 단계;를 포함할 수 있다. 또한, 상기 단계들은: 상기 분산 자원 요청 신호에 포함된 상기 모델을 이용하여 수행되는 잡(Job)에 대한 정보 를 인식하는 단계; 및 상기 잡에 대한 정보에 기초하여, 최적의 학습 설정 정보를 결정하는 단계;를 더 포함할 수 있다. 또한, 상기 모델의 학습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여 상기 모델을 업데 이트하는 단계는, 상기 학습 결과 정보에 기초하여 최적의 학습 설정 정보를 결정하는 단계;를 포함할 수 있다. 또한, 상기 학습 결과 정보에 기초하여 최적의 학습 설정 정보를 결정하는 단계는, 상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 학습된 모델의 성능을 판단하고, 각각의 모델 별 성능에 기초하여 각각의 모 델에 매칭된 학습 설정 정보 중 최적의 학습 설정 정보를 결정하는 단계;를 포함할 수 있다. 또한, 상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 학습된 모델의 성능을 판단하고, 각각의 모 델 별 성능에 기초하여 각각의 모델에 매칭된 학습 설정 정보 중 최적의 학습 설정 정보를 결정하는 단계는, 상 기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 수행된 상기 모델의 학습에 따른 복수의 서브 학습 결과 정보 및 상기 복수의 서브 학습 결과 정보에 대응하는 서브 학습 설정 정보를 획득하는 단계; 상기 복수의 서브 학습 결과 정보를 이용하여 상기 모델을 복수의 서브 모델들로 업데이트하고, 테스트 데이터 세트를 이용 하여 상기 복수의 서브 모델들 각각의 성능을 판별하는 단계; 상기 복수의 서브 모델들 중 상기 성능이 가장 높 은 특정 모델의 업데이트에 이용된 제 1 서브 학습 결과 정보를 인식하는 단계; 및 상기 제 1 서브 학습 결과 정보에 대응하는 제 1 서브 학습 설정 정보를 상기 최적의 학습 설정 정보로 결정하는 단계;를 포함할 수 있다. 또한, 상기 모델의 학습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여 상기 모델을 업데 이트하는 단계는, 상기 하나 이상의 서브 노드들 각각에서 수행된 상기 모델의 학습에 따른 제 1 학습 결과 정 보를 수신하는 단계; 상기 마스터 노드에서 수행된 상기 모델의 학습에 따른 제 2 학습 결과 정보를 획득하는 단계; 및 상기 제 1 학습 결과 정보 및 상기 제 2 학습 결과 정보를 합산하여 상기 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여, 상기 모델을 업데이트 하는 단계;를 포함할 수 있다. 또한, 상기 모델의 학습에 따른 학습 결과 정보를 획득하고, 상기 학습 결과 정보에 기초하여 상기 모델을 업데 이트하는 단계는, 상기 마스터 노드 및 상기 하나 이상의 서브 노드들 각각에서 수행된 상기 모델의 학습에 따 른 복수의 서브 학습 결과 정보를 획득하는 단계; 상기 복수의 서브 학습 결과 정보를 이용하여 상기 모델을 복 수의 서브 모델들로 업데이트하고, 테스트 데이터 세트를 이용하여 상기 복수의 서브 모델들 각각의 성능을 판 별하는 단계; 및 상기 복수의 서브 모델들 각각의 성능에 기초하여 결정된 모델의 학습 결과 정보를 상기 학습 결과 정보로 결정하고, 상기 성능에 기초하여 결정된 모델을 상기 업데이트된 모델로 결정하는 단계;를 포함할 수 있다. 또한, 상기 업데이트된 모델이 기 설정된 조건을 만족하는 경우, 상기 모델의 학습을 완료하고, 상기 업데이트 된 모델을 상기 클라이언트로 전송하는 단계는, 상기 업데이트된 모델의 평가 정보를 획득하는 단계; 상기 분산자원 요청 신호에 포함된 학습 목표 정보 및 상기 평가 정보에 기초하여, 상기 기 설정된 조건의 만족 여부를 결정하는 단계;를 포함할 수 있다. 또한, 상기 분산 자원 요청 신호에 포함된 학습 목표 정보 및 상기 평가 정보에 기초하여, 상기 기 설정된 조건 의 만족 여부를 결정하는 단계는, 상기 학습 목표 정보에 포함된 상기 모델의 목표 성능보다 상기 평가 정보에 포함된 상기 업데이트된 모델의 성능이 높은 경우, 상기 기 설정된 조건이 만족되었다고 인식하는 단계;를 포함 할 수 있다. 또한, 상기 업데이트된 모델이 기 설정된 조건을 만족하는 경우, 상기 모델의 학습을 완료하고, 상기 업데이트 된 모델을 상기 클라이언트로 전송하는 단계는, 상기 업데이트된 모델과 함께 상기 최적의 학습 설정 정보를 전 송하는 단계;를 포함할 수 있다. 또한, 상기 모델의 학습을 위한 상기 분산 자원 요청 신호는, 상기 클라이언트를 식별 가능한 식별 정보, 상기 모델의 학습에 요구되는 학습 설정 정보, 상기 모델의 학습 목표인 학습 목표 정보 및 학습되는 상기 모델을 이 용하여 수행되는 잡에 대한 정보 중 적어도 하나를 포함할 수 있다. 또한, 상기 학습 설정 정보는, 상기 모델에 관련한 하이퍼 파라미터 정보를 포함할 수 있다. 또한, 상기 학습 결과 정보는, 상기 학습된 모델의 버전 정보, 상기 학습된 모델의 가중치, 상기 학습에 따른 가중치 변화량 및 모델의 학습 방법에 대한 정보 중 적어도 하나를 포함할 수 있다. 또한, 상기 학습된 모델의 가중치는, 상기 마스터 노드 및 상기 하나 이상의 서브 노드들에서 상기 모델을 학습 시키기 위해 사용된 학습 데이터 세트로부터 추출된 지식을 반영할 수 있다. 본 개시에서 얻을 수 있는 기술적 해결 수단은 이상에서 언급한 해결 수단들로 제한되지 않으며, 언급하지 않은"}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 2, "content": "또 다른 해결 수단들은 아래의 기재로부터 본 개시가 속하는 기술분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 개시의 몇몇 실시예에 따르면, 컴퓨팅 장치의 자원의 크기에 한정되지 않고, 인공지능 모델의 학습을 수행할 수 있는 인공지능 모델의 분산 학습 기법을 제공할 수 있다. 본 개시에서 얻을 수 있는 효과는 이상에서 언급한 효과로 제한되지 않으며, 언급하지 않은 또 다른 효과들은"}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 2, "content": "아래의 기재로부터 본 개시가 속하는 기술분야에서 통상의 지식을 가진 자에게 명확하게 이해될 수 있을 것이다."}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "다양한 실시예들이 이제 도면을 참조하여 설명된다. 본 명세서에서, 다양한 설명들이 본 개시의 이해를 제공하 기 위해서 제시된다. 그러나, 이러한 실시예들은 이러한 구체적인 설명 없이도 실행될 수 있음이 명백하다. 본 명세서에서 사용되는 용어 \"컴포넌트\", \"모듈\", \"시스템\" 등은 컴퓨터-관련 엔티티, 하드웨어, 펌웨어, 소프 트웨어, 소프트웨어 및 하드웨어의 조합, 또는 소프트웨어의 실행을 지칭한다. 예를 들어, 컴포넌트는 프로세서 상에서 실행되는 처리과정(procedure), 프로세서, 객체, 실행 스레드, 프로그램, 및/또는 컴퓨터일 수 있지만, 이들로 제한되는 것은 아니다. 예를 들어, 서버에서 실행되는 애플리케이션 및 서버 모두 컴포넌트일 수 있다. 하나 이상의 컴포넌트는 프로세서 및/또는 실행 스레드 내에 상주할 수 있다. 일 컴포넌트는 하나의 컴퓨터 내 에 로컬화 될 수 있다. 일 컴포넌트는 2개 이상의 컴퓨터들 사이에 분배될 수 있다. 또한, 이러한 컴포넌트들은 그 내부에 저장된 다양한 데이터 구조들을 갖는 다양한 컴퓨터 판독가능한 매체로부터 실행할 수 있다. 컴포넌 트들은 예를 들어 하나 이상의 데이터 패킷들을 갖는 신호(예를 들면, 로컬 시스템, 분산 시스템에서 다른 컴포 넌트와 상호작용하는 하나의 컴포넌트로부터의 데이터 및/또는 신호를 통해 다른 시스템과 인터넷과 같은 네트 워크를 통해 전송되는 데이터)에 따라 로컬 및/또는 원격 처리들을 통해 통신할 수 있다. 더불어, 용어 \"또는\"은 배타적 \"또는\"이 아니라 내포적 \"또는\"을 의미하는 것으로 의도된다. 즉, 달리 특정되지 않거나 문맥상 명확하지 않은 경우에, \"X는 A 또는 B를 이용한다\"는 자연적인 내포적 치환 중 하나를 의미하는 것으로 의도된다. 즉, X가 A를 이용하거나; X가 B를 이용하거나; 또는 X가 A 및 B 모두를 이용하는 경우, \"X는 A 또는 B를 이용한다\"가 이들 경우들 어느 것으로도 적용될 수 있다. 또한, 본 명세서에 사용된 \"및/또는\"이라 는 용어는 열거된 관련 아이템들 중 하나 이상의 아이템의 가능한 모든 조합을 지칭하고 포함하는 것으로 이해 되어야 한다. 또한, \"포함한다\" 및/또는 \"포함하는\"이라는 용어는, 해당 특징 및/또는 구성요소가 존재함을 의미하는 것으로 이해되어야 한다. 다만, \"포함한다\" 및/또는 \"포함하는\"이라는 용어는, 하나 이상의 다른 특징, 구성요소 및/또 는 이들의 그룹의 존재 또는 추가를 배제하지 않는 것으로 이해되어야 한다. 또한, 달리 특정되지 않거나 단수 형태를 지시하는 것으로 문맥상 명확하지 않은 경우에, 본 명세서와 청구범위에서 단수는 일반적으로 \"하나 또 는 그 이상\"을 의미하는 것으로 해석되어야 한다. 또한, 본 명세서에서 사용되는 용어 \"정보\" 및 \"데이터\"는 종종 서로 상호교환 가능하도록 사용될 수 있다. 그리고, “A 또는 B 중 적어도 하나”이라는 용어는, “A만을 포함하는 경우”, “B 만을 포함하는 경우”, “A 와 B의 구성으로 조합된 경우”를 의미하는 것으로 해석되어야 한다. 당업자들은 추가적으로 여기서 개시된 실시예들과 관련되어 설명된 다양한 예시적 논리적 블록들, 구성들, 모듈 들, 회로들, 수단들, 로직들, 및 알고리즘 단계들이 전자 하드웨어, 컴퓨터 소프트웨어, 또는 양쪽 모두의 조합 들로 구현될 수 있음을 인식해야 한다. 하드웨어 및 소프트웨어의 상호교환성을 명백하게 예시하기 위해, 다양 한 예시적 컴포넌트들, 블록들, 구성들, 수단들, 로직들, 모듈들, 회로들, 및 단계들은 그들의 기능성 측면에서 일반적으로 위에서 설명되었다. 그러한 기능성이 하드웨어로 또는 소프트웨어로서 구현되는지 여부는 전반적인 시스템에 부과된 특정 어플리케이션(application) 및 설계 제한들에 달려 있다. 숙련된 기술자들은 각각의 특정 어플리케이션들을 위해 다양한 방법들로 설명된 기능성을 구현할 수 있다. 다만, 그러한 구현의 결정들이 본 개 시내용의 영역을 벗어나게 하는 것으로 해석되어서는 안된다. 이하의 설명에서 사용되는 구성 요소에 대한 접미사 “모듈” 및 “부”는 명세서 작성의 용이함만이 고려되어 부여되거나 혼용되는 것으로서 그 자체로 서로 구별되는 의미 또는 역할을 갖는 것은 아니다. 본 개시의 목적 및 효과, 그리고 그것들을 달성하기 위한 기술적 구성들은 첨부되는 도면과 함께 상세하게 후술 되어 있는 실시예들을 참조하면 명확해질 것이다. 본 개시를 설명하는데 있어서 공지 기능 또는 구성에 대한 구 체적인 설명이 본 개시의 요지를 불필요하게 흐릴 수 있다고 판단되는 경우에는 그 상세한 설명을 생략할 것이다. 그리고 후술되는 용어들은 본 개시에서의 기능을 고려하여 정의된 용어들로서 이는 사용자, 운용자의 의도 또는 관례 등에 따라 달라질 수 있다. 그러나 본 개시는 이하에서 개시되는 실시예들에 한정되는 것이 아니라 서로 다른 다양한 형태로 구현될 수 있"}
{"patent_id": "10-2019-0172641", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "다. 단지 본 실시예들은 본 개시가 완전하도록 하고, 본 개시가 속하는 기술분야에서 통상의 지식을 가진 자에 게 개시의 범주를 완전하게 알려주기 위해 제공되는 것이며, 본 개시는 청구항의 범주에 의해 정의될 뿐이다. 그러므로 그 정의는 본 명세서 전반에 걸친 내용을 토대로 내려져야 할 것이다.본 개시의 청구범위에서의 방법에 대한 권리범위는, 각 단계들에 기재된 기능 및 특징들에 의해 발생되는 것이 지, 방법을 구성하는 각각의 단계에서 그 순서의 선후관계를 명시하지 않는 이상, 청구범위에서의 각 단계들의 기재 순서에 영향을 받지 않는다. 예를 들어, A단계 및 B단계를 포함하는 방법으로 기재된 청구범위에서, A단계 가 B단계 보다 먼저 기재되었다고 하더라도, A단계가 B단계에 선행해야한다는 것으로 권리범위가 제한되지는 않 는다. 도 1은 본 개시의 몇몇 실시예에 따른 인공지능 모델의 분산 학습 시스템의 개략도이다. 이하의 설명에서 사용 되는 용어 \"인공지능 모델\" 및 \"모델\"은 종종 서로 상호교환 가능하도록 사용될 수 있다. 도 1을 참조하면, 클러스터는 마스터 노드 및 하나 이상의 서브 노드들을 포함할 수 있다. 여 기서, 클러스터는 특정 태스크(예컨대, 인공지능 모델의 학습)를 분산하여 수행하기 위한 노드들의 집합 을 의미할 수 있다. 구체적으로, 클러스터 시스템(Cluster system)은 네트워크로 연결된 단일 컴퓨팅들의 집합을 통해 하나의 작업 을 공동으로 처리하는 것을 의미할 수 있다. 즉, 본 명세서에서 언급되는 클러스터에 포함된 마스터 노드 및 하나 이상의 서브 노드들 각각은 네트워크를 통해 예를 들어, 인공지능 모델의 학습과 같은 특정 태스크를 분산하여 수행하기 위한 데이터를 상호 송수신할 수 있다. 본 명세서에서 언급되는 마스터 노드 및 하나 이상의 서브 노드들은 수직적인 관계를 형성하는 것이 아닌, 수평적인 관계를 형성할 수 있다. 예를 들어, 마스터 노드 및 하나 이상의 서브 노드들은 P2P(peer to peer) 시스템에서 동등한 관계를 갖는 각각의 피어(peer)일 수 있다. 즉, 마스터 노드 및 하나 이상의 서브 노드들 각각은 특정 태스크를 분할하고, 분할된 태스크를 다른 노드들에게 할당하는 작업을 수행하는 여부에 따라 변경될 수 있다. 다심 말해, 클러스터에 포함된 노드 중 어느 하나의 노드는 특정 태스크를 분할하고, 분할된 특정 태스크를 다른 노드들에게 할당하는 마스터 노드 가 될 수 있다. 다만, 이에 한정되는 것은 아니다. 마스터 노드 및 하나 이상의 서브 노드 각각은 마이크로프로세서, 메인프레임 컴퓨터, 디지털 프로세 서, 휴대용 디바이스 및 디바이스 제어기 등과 같은 임의의 타입의 컴퓨터 시스템 또는 컴퓨터 디바이스를 포함 할 수 있다. 다만 이에 한정되는 것은 아니고, 마스터 노드는 예를 들어, PC(personal computer), 노트북 (note book), 모바일 단말기(mobile terminal), 스마트 폰(smart phone), 태블릿 PC(tablet pc) 및 웨어러블 디바이스(wearable device) 등을 포함할 수 있으며, 유/무선 네트워크에 접속할 수 있는 모든 종류의 단말을 포 함할 수도 있다. 마스터 노드는 프로세서, 통신부 및 메모리를 포함할 수 있다. 다만, 상술한 구성 요소들 은 마스터 노드를 구현하는데 있어서 필수적인 것은 아니어서, 마스터 노드는 위에서 열거된 구성요 소들 보다 많거나, 또는 적은 구성요소들을 가질 수 있다. 여기서, 각각의 구성 요소들은 별개의 칩이나 모듈이 나 장치로 구성될 수 있고, 하나의 장치 내에 포함될 수도 있다. 마스터 노드의 통신부는 네트워크 접속을 위한 유/무선 인터넷 모듈을 포함할 수 있다. 무선 인터넷 기술로는 WLAN(Wireless LAN)(Wi-Fi), Wibro(Wireless broadband) Wimax(World Interoperability for Microwave Access), HSDPA(High Speed Downlink Packet Access) 등이 이용될 수 있다. 유선 인터넷 기술로는 XDSL(Digital Subscriber Line), FTTH(Fibers to the home), PLC(Power Line Communication) 등이 이용될 수 있다. 또한, 통신부는 근거리 통신(short range communication) 모듈을 포함할 수 있다. 근거리 통신 기 술로 블루투스(Bluetooth), RFID(Radio Frequency Identification), 적외선 통신(IrDA, infrared Data Association), UWB(Ultra Wideband), ZigBee 등이 이용될 수 있다. 메모리는 프로세서가 생성하거나 결정한 임의의 형태의 정보 및 통신부가 수신한 임의의 형태의 정보를 저장할 수 있다. 메모리는 메모리 및/또는 영구저장매체를 포함할 수 있다. 메모리는 플래시 메모리 타입(flash memory type), 하드디스크 타입(hard disk type), 멀티미디어 카드 마이크로 타입(multimedia card micro type), 카드 타입의 메모리(예를 들어 SD 또는 XD 메모리 등), 램(Random Access Memory, RAM), SRAM(Static Random Access Memory), 롬(Read-Only Memory, ROM), EEPROM(Electrically Erasable Programmable Read-Only Memory), PROM(Programmable Read-Only Memory), 자기 메모리, 자기 디스크, 광디스크 중 적어도 하나의 타입의 저장매체를 포함할 수 있다. 한편, 마스터 노드의 프로세서는 통상적으로 마스터 노드의 전반적인 동작을 처리할 수 있다. 프로세서는 위에서 살펴본 구성요소들을 통해 입력 또는 출력되는 신호, 데이터, 정보 등을 처리하거나 메 모리에 저장된 응용 프로그램을 구동함으로써, 사용자에게 적절한 정보 또는 기능을 제공 또는 처리할 수 있다. 프로세서는 하나 이상의 코어로 구성될 수 있으며, 마스터 노드의 중앙 처리 장치(CPU: central processing unit), 범용 그래픽 처리 장치 (GPGPU: general purpose graphics processing unit), 텐서 처리 장 치(TPU: tensor processing unit) 등과 같이 메모리 상에 저장된 명령어들을 실행시키는 임의의 형태의 프 로세서를 포함할 수 있다. 프로세서는 메모리에 저장된 컴퓨터 프로그램을 판독하여 본 개시의 몇몇 실시예에 따른 동작을 수행할 수 있다. 도 1에 도시된 바와 같이, 하나 이상의 서브 노드는 제 1 서브 노드 및 제 2 서브 노드를 포함 할 수 있다. 다만, 상술한 하나 이상의 서브 노드는 본 개시의 설명의 편의를 위해 표현된 것이므로, 하나 이상의 서브 노드는 위에서 열거된 서브 노드들의 개수 보다 많거나, 또는 적을 수 있다. 그리고, 하나 이상의 서브 노드들 각각은 위에서 언급한 마스터 노드에 포함된 구성요소들과 유사하 거나, 또는 동일한 구성요소들을 가질 수 있다. 한편, 클라이언트는 인공지능 모델을 학습시키고자 하는 사용자의 단말과 관련될 수 있다. 예를 들어, 클 라이언트는 PC(personal computer), 노트북(note book), 모바일 단말기(mobile terminal), 스마트 폰 (smart phone), 태블릿 PC(tablet pc) 및 웨어러블 디바이스(wearable device) 등을 포함할 수 있으며, 유/무 선 네트워크에 접속할 수 있는 모든 종류의 단말을 포함할 수도 있다. 본 개시의 몇몇 실시예에 따르면, 마스터 노드의 프로세서는 통신부를 통해 클라이언트로 부터 모델의 학습을 위한 분산 자원 요청 신호를 수신할 수 있다. 그리고, 프로세서는 클러스터에 포함된 하나 이상의 서브 노드들과 분산 자원 요청 신호에 기초하여, 인공지능 모델의 학습을 수행할 수 있다. 이하, 마스터 노드의 프로세서가 인공지능 모델의 학습을 수행하는 구체적인 방법에 대한 설명은 도 2 내지 도 4를 참조하여 후술한다. 그리고, 마스터 노드 및/또는 하나 이상의 서브 노드들에 의해 학습되는 인공지능 모델의 네트워크 구조에 대한 설명은 도 5를 참조하여 후술한다. 도 2는 본 개시의 몇몇 실시예에 따른 마스터 노드가 인공지능 모델의 분산 학습을 수행하는 방법의 일례를 설 명하기 위한 흐름도이다. 도 2를 참조하면, 마스터 노드의 프로세서는 통신부를 통해 클라이언트로부터 모델의 학습 을 위한 자원 요청 신호를 수신할 수 있다(S110). 여기서, 분산 자원 요청 신호는 상기 클라이언트를 식별 가능한 식별 정보, 상기 모델의 학습에 요구되는 학습 설정 정보, 상기 모델의 학습 목표인 학습 목표 정보 및 학습되는 상기 모델을 이용하여 수행되는 잡(job)에 대한 정보 중 적어도 하나를 포함할 수 있다. 모델의 학습에 요구되는 학습 설정 정보는 상기 모델에 관련한 하이퍼 파라미터 정보를 포함할 수 있다. 여기서, 하이러 파라미터 정보는 학습률(learning rate), 비용 함수(cost function), 학습 사이클 반복 횟수, 가중치 초기화(Weight initialization)(예를 들어, 가중치 초기화 대상이 되는 가중치 값의 범위 설정), Hidden Unit 개수(예를 들어, 히든 레이어의 개수, 히든 레이어의 노드 수)를 포함할 수 있다. 한편, 마스터 노드의 프로세서는 클라이언트로부터 분산 자원 요청 신호를 수신함에 따라, 하나 의 클러스터에 포함된 마스터 노드 및 하나 이상의 서브 노드들 중 모델의 학습을 수행할 노드 를 결정할 수 있다(S120). 구체적으로, 프로세서는 분산 자원 요청 신호에 포함된 모델의 학습을 위한 태스크를 인식할 수 있다. 그 리고, 프로세서는 태스크를 서브 태스크로 분할하고, 서브 태스크를 수행할 노드를 결정할 수 있다. 이하, 마스터 노드의 프로세서가 모델의 학습을 위한 태스크를 분할한 서브 태스크를 수행할 노드를 결정하는 방법에 대한 설명은 도 3을 참조하여 후술한다. 추가적으로, 프로세서는 모델의 학습을 수행할 노드를 결정하기 이전에, 분산 자원 요청 신호에 학습 설정 정보가 포함되었는지 여부를 인식할 수 있다. 그리고, 프로세서는 분산 자원 요청 신호에 학습 설정 정보 가 포함되었다고 인식한 경우, 분산 자원 요청 신호에 기초하여 학습 설정 정보를 결정할 수 있다. 즉, 프로세 서는 분산 자원 요청 신호에 포함된 학습 설정 정보를 인식할 수 있다. 한편, 프로세서는 분산 자원 요청 신호에 학습 설정 정보가 포함되지 않았다고 인식한 경우, 분산 자원 요 청 신호에 포함된 모델을 이용하여 수행되는 잡(Job)에 대한 정보를 인식할 수 있다. 그리고, 프로세서는 잡에 대한 정보에 기초하여, 학습 설정 정보를 결정할 수 있다. 그리고, 프로세서는 학습 설정 정보에 기초하여, 마스터 노드 및 하나 이상의 서브 노드들 중 모델의 학습을 수행할 노드를 결정할 수 있다. 본 개시의 몇몇 실시예에 따르면, 마스터 노드의 프로세서는 분산 자원 요청 신호에 기초하여, 최적 의 학습 설정 정보를 결정할 수 있다. 구체적으로, 프로세서는 분산 자원 요청 신호에 포함된 모델을 이용하여 수행되는 잡(Job)에 대한 정보를 인식할 수 있다. 그리고, 프로세서는 모델의 잡에 대한 정보에 기초하여, 최적의 학습 설정 정보를 결정할 수 있다. 여기서, 마스터 노드의 메모리는 인공지능 모델이 수행할 수 있는 하나 이상의 잡 각각에 대응하는 최적의 학습 설정 정보를 저장하고 있을 수 있다. 다만, 이에 한정되는 것은 아니다. 예를 들어, 프로세서는 분산 자원 요청 신호에 기초하여, 학습을 수행할 모델이 이미지 인식과 관련된 잡 을 수행하는 모델이라고 인식할 수 있다. 이 경우, 프로세서는 메모리에 저장된 하나 이상의 잡 각각 에 대응하는 최적의 학습 설정 정보를 이용하여 이미지 인식과 관련된 모델의 학습에 대한 효율이 높은 학습 설 정 정보를 결정할 수 있다. 다른 예를 들어, 프로세서는 분산 자원 요청 신호에 기초하여, 학습을 수행할 모델이 자연어 처리와 관련 된 잡을 수행하는 모델이라고 인식할 수 있다. 이 경우, 프로세서는 메모리에 저장된 하나 이상의 잡 각각에 대응하는 최적의 학습 설정 정보를 이용하여 자연어 처리와 관련된 모델의 학습에 대한 효율이 높은 학 습 설정 정보를 결정할 수 있다. 한편, 마스터 노드의 프로세서는 모델의 잡에 대한 정보에 기초하여 결정된 최적의 학습 설정 정보를 클라이언트로 전송하도록 통신부를 제어할 수 있다. 따라서, 클라이언트는 동일한 잡을 수행하는 모델의 학습을 위한 다음 분산 자원 요청 신호를 마스터 노드 로 전송할 때, 최적의 학습 설정 정보를 함께 전송할 수 있다. 다시 도 2를 참조하면, 마스터 노드의 프로세서는 모델의 학습에 따른 학습 결과 정보를 획득할 수 있다. 그리고, 프로세서는 학습 결과 정보에 기초하여 상기 모델을 업데이트할 수 있다(S130). 구체적으로, 프로세서는 마스터 노드에서 수행된 모델의 학습 결과 정보를 획득할 수 있다. 그리고, 프로세서는 통신부를 통해 하나 이상의 서브 노드들에서 수행된 모델의 학습 결과 정보를 수신 할 수 있다. 추가적으로, 프로세서는 마스터 노드 및 하나 이상의 서브 노드들 각각으로부터 반복 에포크 (epoch) 마다, 기 설정된 데이터 세트에 대한 학습이 완료될 때마다 또는, 기 설정된 시간 간격마다 상기 학습 결과 정보를 획득할 수 있다. 다만, 이에 한정되는 것은 아니다. 여기서, 학습 결과 정보는 상기 학습된 모델의 버전 정보, 상기 학습된 모델의 가중치, 상기 학습에 따른 가중 치 변화량 및 모델의 학습 방법에 대한 정보 중 적어도 하나를 포함할 수 있다. 학습된 모델의 버전 정보는, 학습된 모델이 언제 업데이트되었는지를 식별하기 위한 정보를 포함할 수 있다. 예 를 들어, 버전 정보는 업데이트된 날짜, 업데이트된 시간, 업데이트 주체, 업데이트된 장소(예를 들어, 마스터 노드 또는 하나 이상의 서브 노드), 업데이트의 원인이 된 학습 데이터의 메타 정보 등에 대한 정보를 포함할 수 있다. 즉, 프로세서는 학습결과 정보에 기초하여 모델을 업데이트하는 경우, 모델의 버전 정보도 함께 업데이트할 수 있다. 학습된 모델의 가중치는, 마스터 노드 및 하나 이상의 서브 노드들에서 상기 모델을 학습시키기 위해 사용된 학습 데이터 세트로부터 추출된 지식을 반영할 수 있다. 그리고, 학습된 모델의 가중치는 학습된 모델의 전체에 대한 가중치(즉, 학습된 모델 그 자체)일 수도 있고, 학습된 모델의 일부에 대한 가중치일 수도 있다. 모델의 학습 방법에 대한 정보는, 학습 에폭, 에폭별 학습률, 학습 소요 시간, 바이어스(bias) 등을 포함할 수 있다. 즉, 프로세서는 모델의 학습 방법에 대한 정보를 획득함으로써, 모델을 어떤 방법으로 학습시켰는지 인식할 수 있다. 한편, 모델의 학습은 마스터 노드 및 하나 이상의 서브 노드들 각각에서 독립적으로 수행되거나, 마 스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수행될 수 있다. 즉, 프로세서는 모델의 학습이 수행된 방식(독립적 수행 또는, 종속적 수행)에 따라 획득된 학습 결과 정 보를 합산하거나, 어느 하나의 학습 결과 정보를 선택하여, 모델을 업데이트할 수 있다. 본 개시의 몇몇 실시예에 따르면, 상술한 바와 같이, 프로세서는 학습 결과 정보를 이용하여, 모델을 업데 이트할 수 있다. 구체적으로, 프로세서는 하나 이상의 서브 노드로 모델A를 전송할 수 있다. 또한, 프로세서는 하나 이상의 서브 노드에서 학습된 모델A'를 수신할 수 있다. 이 경우, 프로세서는 모델A'를 이용하 여 모델A의 가중치 일부를 업데이트할 수 있다. 여기서, 프로세서가 하나 이상의 서브 노드로부터 수 신하는 모델A'은 학습 결과 정보일 수 있다. 그리고, 학습 결과 정보는 가중치를 포함할 수 있다. 다만, 상술한 예시에 한정되는 것은 아니고, 프로세서는 모델A의 가중치 중 적어도 일부를 모델A'의 가중 치로 변경하는 업데이트를 수행할 수도 있다. 또한, 프로세서는 모델A를 모델A'로 대체함으로써 모델A를 업데이트할 수도 있다. 한편, 프로세서는 테스트 데이터 세트를 이용하여 모델A'의 성능을 평가할 수 있다. 프로세서는 테스트 데이터 세트를 입력하여 획득한 모델A'의 성능이 모델A보다 우수한 경우, 모델A 를 모델A'로 대체하는 업데이트를 수행할 수 있다. 한편, 프로세서는 모델A'의 성능이 모델A보다 낮은 경 우, 모델A에 대하여 업데이트를 수행하지 않을 수도 있다. 상술한 학습 결과 정보를 이용하여, 모델을 업데이트하는 방법에 대한 내용은 본 개시의 몇몇 예시일 뿐, 본 개 시는 이에 한정되지 않는다. 이하, 프로세서가 학습 결과 정보에 기초하여 모델을 업데이트하는 방법에 대한 설명은 도 4를 참조하여 후술한다. 본 개시의 몇몇 실시예에 따르면, 마스터 노드의 프로세서는 학습 결과 정보에 기초하여 최적의 학습 설정 정보를 결정할 수 있다. 구체적으로, 프로세서는 마스터 노드 및 하나 이상의 서브 노드들 각각에서 학습된 모델의 성능 을 판단할 수 있다. 그리고, 프로세서는 각각의 모델 별 성능에 기초하여 각각의 모델에 매칭된 학습 설정 정보 중 최적의 학습 설정 정보를 결정할 수 있다. 좀더 구체적으로, 프로세서는 마스터 노드 및 하나 이상의 서브 노드들 각각에서 수행된 모델의 학습에 따른 복수의 서브 학습 결과 정보 및 복수의 서브 학습 결과 정보에 대응하는 서브 학습 설정 정보를 획 득할 수 있다. 또한, 프로세서는 복수의 서브 학습 결과 정보를 이용하여 상기 모델을 복수의 서브 모델들 로 업데이트할 수 있다. 또한, 프로세서는 테스트 데이터 세트를 이용하여 상기 복수의 서브 모델들 각각 의 성능을 판별할 수 있다. 프로세서는 복수의 서브 모델들 중 상기 성능이 가장 높은 특정 모델의 업데이트에 이용된 제 1 서브 학습 결과 정보를 인식할 수 있다. 그리고, 프로세서는 제 1 서브 학습 결과 정보에 대응하는 제 1 서브 학습 설정 정보를 최적의 학습 설정 정보로 결정할 수 있다. 한편, 마스터 노드의 프로세서는 학습 결과 정보에 기초하여 결정된 최적의 학습 설정 정보를 클라이 언트로 전송하도록 통신부를 제어할 수 있다. 따라서, 클라이언트는 특정 모델의 학습을 위한 다음 분산 자원 요청 신호를 마스터 노드로 전송할 때, 최적의 학습 설정 정보를 함께 전송할 수 있다. 다시 도 2를 참조하면, 프로세서는 학습 결과 정보에 기초하여 모델을 업데이트하고, 업데이트 된 모델이 기 설정된 조건을 만족하는지 여부를 결정할 수 있다.구체적으로, 프로세서는 업데이트된 모델의 평가 정보를 획득할 수 있다. 그리고, 프로세서는 분산 자원 요청 신호에 포함된 학습 목표 정보 및 평가 정보에 기초하여, 기 설정된 조건의 만족 여부를 결정할 수 있다. 좀더 구체적으로, 프로세서는 학습 목표 정보에 포함된 모델의 목표 성능보다 평가 정보에 포함된 상기 업 데이트된 모델의 성능이 높은 경우, 기 설정된 조건이 만족되었다고 인식할 수 있다. 한편, 프로세서는 업데이트된 모델이 기 설정된 조건을 만족하는 경우, 상기 모델의 학습을 완료하고, 업 데이트된 모델을 클라이언트로 전송하도록 통신부를 제어할 수 있다(S140). 추가적으로, 프로세서는 업데이트된 모델을 클라이언트로 전송할 때, 상술한 최적의 학습 설정 정보 를 함께 전송할 수 있다. 다른 한편, 프로세서는 업데이트된 모델이 기 설정된 조건을 만족하지 못하는 경우, 상기 모델의 학습을 다시 수행할 수 있다. 다만, 이에 한정되는 것은 아니다. 도 3은 본 개시의 몇몇 실시예에 따른 마스터 노드가 인공지능 모델의 분산 학습을 위한 태스크를 분할하는 방 법의 일례를 설명하기 위한 흐름도이다. 도 3의 설명에서는 도 1 및 도 2의 설명에서 상술한 바와 중복되는 내 용은 다시 설명하지 않고, 이하 차이가 존재하는 내용을 중심으로 설명한다. 본 개시의 몇몇 실시예에 따르면, 마스터 노드의 프로세서는 클라이언트로부터 모델의 학습을 위한 분산 자원 요청 신호를 수신할 수 있다. 이 경우, 프로세서는 마스터 노드 및 하나 이상의 서브 노드들 중 모델의 학습을 수행할 노드를 결정할 수 있다. 구체적으로, 도 3을 참조하면, 프로세서는 분산 자원 요청 신호에 포함된 모델의 학습을 위한 태스크를 인 식할 수 있다(S121). 그리고, 프로세서는 태스크를 분산하기 위해 하나 이상의 서브 노드들 각각의 자원을 인식할 수 있다. 여기서, 자원은 컴퓨팅 자원일 수 있다. 예를 들어, 자원은 CPU, GPU, 메모리 및 디스 크 중 적어도 하나일 수 있다. 그리고, 태스크(즉, 모델의 학습)는 마스터 노드 및 하나 이상의 서브 노드 들 각각에서 독립적으로 수행되거나, 마스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수행될 수 있다. 한편, 프로세서는 하나 이상의 서브 노드들 각각의 자원에 기초하여, 태스크를 서브 태스크로 분할할 수 있다(S123). 구체적으로, 프로세서는 인식된 하나 이상의 서브 노드들 각각의 자원에 기초하여, 서브 태스크를 할 당할 하나 이상의 특정 노드들을 결정할 수 있다. 그리고, 예를 들어, 프로세서는 하나 이상의 특정 노드 들 각각의 자원의 크기에 대응되도록 태스크를 서브 태스크로 분할할 수 있다. 좀더 구체적으로, 프로세서(11 0)는 클러스터 내에서 병렬로 운용되고 있는 노드들 사이에서의 부하가 균등하게 되도록 서브 태스크를 분할하여 할당(즉, 로드 밸런싱)할 수 있다. 다만, 이에 한정되는 것은 아니고, 프로세서는 인식된 하나 이상의 서브 노드들 각각의 자원에 기초하여, 서브 태스크의 크기를 동일하게 분할할 수도 있다. 그리고, 프로세서는 서브 태스크를 수행할 노드를 결정할 수 있다(S124). 즉, 프로세서는 서브 태스 크를 수행할 노드로 상기 서브 태스크를 전송하도록 통신부를 제어할 수 있다. 한편, 상술한 바와 같이, 태스크(즉, 모델의 학습)는 마스터 노드 및 하나 이상의 서브 노드들 각각 에서 독립적으로 수행되거나, 마스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수행될 수 있 다. 예를 들어, 태스크는 하나 이상의 노드에서 병렬적, 비동기적으로 수행가능하도록 구성될 수도 있고, 하나 이상의 노드에서 직렬적, 동기적으로 수행가능하도록 구성될 수도 있다. 예를 들어, 학습에 소요되는 시간 및 자원을 절약하기 위하여, 학습 데이터 세트를 임의의 기준으로 분리한 학습 데이터 서브 세트 각각에 대한 학습 이 서브 태스크를 구성할 수도 있다. 또한, 다른 예를 들어, 학습된 모델의 성능을 위하여 각각의 노드가 학습 데이터 세트에 대한 학습을 수행하도록 서브 태스크를 구성할 수도 있다. 먼저, 태스크가 마스터 노드 및 하나 이상의 서브 노드들 각각에서 독립적으로 수행되는 경우, 태스 크와 서브 태스크의 크기가 동일할 수 있다. 예를 들어, 태스크가 100의 크기를 갖는 경우, 서브 태스크 또한 100의 크기를 가질 수 있다. 다시 말해, 마스터 노드 및 하나 이상의 서브 노드들 각각은 태스크의 크기와 동일한 크기의 서브 태 스크를 병렬적으로 처리할 수 있다. 이 경우, 서브 태스크 각각에 대한 학습 설정 정보가 서로 다를 수 있다. 즉, 마스터 노드 및 하나 이상의 서브 노드들 각각은 서로 다른 방법을 통해 모델의 학습을 수행할 수 있다. 예를 들어, 마스터 노드, 제 1 서브 노드 및 제 2 서브 노드 각각에서 학습되는 모델 은 모델A로 동일할 수 있다. 그리고, 마스터 노드, 제 1 서브 노드 및 제 2 서브 노드 각각은 서로 다른 학습 방법(학습 설정 정보)을 이용하여 모델A의 학습을 수행할 수 있다. 여기서, 마스터 노드, 제 1 서브 노드 및 제 2 서브 노드 각각에서 모델A를 학습하기 위한 태스크의 크기는 동일할 수 있다. 다만, 이에 한정되는 것은 아니고, 상기 태스크의 크기는 학습 방법에 따라 상이할 수도 있다. 이 경우, 프로세서는 마스터 노드 및 하나 이상의 서브 노드들 각각에서 수행된 모델의 학습에 따른 복수의 서브 학습 결과 정보 중 어느 하나를 선택할 수 있다. 그리고, 프로세서는 선택된 학습 결과 정보를 이용하여 모델을 업데이트할 수 있다. 한편, 태스크가 마스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수행되는 경우, 서브 태스 크의 크기의 합산 값이 태스크의 크기와 동일할 수 있다. 예를 들어, 태스크가 100의 크기를 갖는 경우, 10의 크기를 갖는 서브 태스크가 10개 존재할 수 있다(이 경우, 마스터 노드 및 하나 이상의 서브 노드들 의 수가 10 개). 다른 예를 들어, 태스크가 100의 크기를 갖는 경우, 20의 크기를 갖는 서브 태스크 2개 및 10 의 크기를 갖는 서브 태스크 6개가 존재할 수 있다(이 경우, 마스터 노드 및 하나 이상의 서브 노드 들의 수가 5 개). 다시 말해, 마스터 노드 및 하나 이상의 서브 노드들 각각은 태스크를 서브 태스크로 나누어 처리할 수 있다. 이 경우, 서브 태스크 각각에 대한 학습 설정 정보가 동일할 수 있다. 예를 들어, 마스터 노드에 서 학습되는 모델은 모델A1이고, 제 1 서브 노드에서 학습되는 모델은 모델A2이며 제 2 서브 노드에 서 학습되는 모델은 모델A3일 수 있다. 그리고, 마스터 노드, 제 1 서브 노드 및 제 2 서브 노드 각각은 동일한 학습 방법(학습 설정 정보)을 이용하여 모델A1, 모델A2 및 모델A3 각각의 학습을 수행할 수 있다. 여기서, 마스터 노드, 제 1 서브 노드 및 제 2 서브 노드 각각에서 모델A1, 모델A2 및 모델A3 각각을 학습하기 위한 태스크의 크기는 동일하거나, 상이할 수 있다. 이 경우, 프로세서는 마스터 노드 및 하나 이상의 서브 노드들 각각에서 수행된 모델의 학습에 따른 복수의 서브 학습 결과 정보를 합산할 수 있다. 그리고, 프로세서는 합산된 학습 결과 정보를 이용하 여 모델을 업데이트할 수 있다. 이하, 태스크가 마스터 노드 및 하나 이상의 서브 노드들 각각에서 독립적으로 수행되거나, 마스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수행됨에 따라, 모델을 업데이트하는 방법에 대한 설명은 도 4를 참조하여 후술한다. 도 4는 본 개시의 몇몇 실시예에 따른 마스터 노드가 학습 결과 정보에 기초하여 인공지능 모델을 업데이트하는 방법의 일례를 설명하기 위한 흐름도이다. 도 4의 설명에서는 도 1 내지 도 3의 설명에서 상술한 바와 중복되는 내용은 다시 설명하지 않고, 이하 차이가 존재하는 내용을 중심으로 설명한다. 본 개시의 몇몇 실시예에 따르면, 태스크(즉, 모델의 학습)는 마스터 노드 및 하나 이상의 서브 노드(20 0)들 각각에서 독립적으로 수행되거나, 마스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수 행될 수 있다. 한편, 태스크가 독립적으로 수행되거나 종속적으로 수행됨에 따라, 획득되는 학습 결과 정보를 이용하여 모델을 업데이트하는 방법이 상이할 수 있다. 구체적으로, 도 4를 참조하면, 프로세서는 모델의 학습이 마스터 노드 및 하나 이상의 서브 노드 들에서 종속적으로 수행되었는지 여부를 인식할 수 있다(S131). 좀더 구체적으로, 프로세서는 태스크를 서브 태스크를 어떤 방식으로 분할하였는지 여부에 기초하여, 모델 의 학습이 마스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수행되었는지 여부를 인식할 수 있다. 그리고, 프로세서는 모델의 학습이 마스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수 행되었다고 인식한 경우(S131, Yes), 하나 이상의 서브 노드들 각각에서 수행된 모델의 학습에 따른 제 1학습 결과 정보를 통신부를 통해 수신할 수 있다(S132). 또한, 프로세서는 마스터 노드에서 수 행된 모델의 학습에 따른 제 2 학습 결과 정보를 획득할 수 있다(S133). 그리고, 프로세서는 제 1 학습 결과 정보 및 제 2 학습 결과 정보를 합산하여 학습 결과 정보를 획득할 수 있다. 그리고, 프로세서는 학습 결과 정보에 기초하여 모델을 업데이트할 수 있다(S134). 한편, 프로세서는 모델의 학습이 마스터 노드 및 하나 이상의 서브 노드들에서 종속적으로 수행 되지 않았다고 인식한 경우(S131, No), 모델의 학습이 마스터 노드 및 하나 이상의 서브 노드들 각각 에서 독립적으로 수행되었다고 인식할 수 있다. 이 경우, 프로세서는 마스터 노드 및 하나 이상의 서브 노드들 각각에서 수행된 모델의 학습에 따른 복수의 서브 학습 결과 정보를 획득할 수 있다(S135). 또한, 프로세서는 복수의 서브 학습 결과 정보 를 이용하여 모델을 복수의 서브 모델들로 업데이트할 수 있다. 또한, 프로세서는 테스트 데이터 세트를 이용하여 복수의 서브 모델들 각각의 성능을 판별할 수 있다(S136). 그리고, 프로세서는 복수의 서브 모델들 각각의 성능에 기초하여 결정된 모델의 학습 결과 정보를 학습 결 과 정보로 결정할 수 있다. 또한, 프로세서는 성능에 기초하여 결정된 모델을 업데이트된 모델로 결정할 수 있다(S137). 상술한 바와 같이, 본 개시의 몇몇 실시예에 따른 프로세서는 모델의 학습이 수행된 방식(독립적 또는, 종 속적)에 따라, 다른 방법을 이용하여 학습 결과 정보를 결정하고, 결정된 학습 결과 정보를 이용하여 모델을 업 데이트할 수 있다. 도 5는 본 개시의 몇몇 실시예에 따라 학습될 수 있는 인공지능 모델의 네트워크 구조를 간략히 나타낸 예시도 이다. 본 명세서에 걸쳐, 연산 모델, 신경망, 네트워크 함수, 뉴럴 네트워크(neural network)는 동일한 의미로 사용될 수 있다. 신경망은 일반적으로 노드라 지칭될 수 있는 상호 연결된 계산 단위들의 집합으로 구성될 수 있다. 이 러한 노드들은 뉴런(neuron)들로 지칭될 수도 있다. 신경망은 적어도 하나 이상의 노드들을 포함하여 구성된다. 신경망들을 구성하는 노드(또는 뉴런)들은 하나 이상의 링크에 의해 상호 연결될 수 있다. 신경망 내에서, 링크를 통해 연결된 하나 이상의 노드들은 상대적으로 입력 노드 및 출력 노드의 관계를 형성할 수 있다. 입력 노드 및 출력 노드의 개념은 상대적인 것으로서, 하나의 노드에 대하여 출력 노드 관계에 있는 임의의 노드는 다른 노드와의 관계에서 입력 노드 관계에 있을 수 있으며, 그 역도 성립할 수 있다. 상술한 바 와 같이, 입력 노드 대 출력 노드 관계는 링크를 중심으로 생성될 수 있다. 하나의 입력 노드에 하나 이상의 출 력 노드가 링크를 통해 연결될 수 있으며, 그 역도 성립할 수 있다. 하나의 링크를 통해 연결된 입력 노드 및 출력 노드 관계에서, 출력 노드는 입력 노드에 입력된 데이터에 기초 하여 그 값이 결정될 수 있다. 여기서 입력 노드와 출력 노드를 상호 연결하는 노드는 가중치(weight)를 가질 수 있다. 가중치는 가변적일 수 있으며, 신경망이 원하는 기능을 수행하기 위해, 사용자 또는 알고리즘에 의해 가변 될 수 있다. 예를 들어, 하나의 출력 노드에 하나 이상의 입력 노드가 각각의 링크에 의해 상호 연결된 경 우, 출력 노드는 상기 출력 노드와 연결된 입력 노드들에 입력된 값들 및 각각의 입력 노드들에 대응하는 링크 에 설정된 가중치에 기초하여 출력 노드 값을 결정할 수 있다. 상술한 바와 같이, 신경망은 하나 이상의 노드들이 하나 이상의 링크를 통해 상호 연결되어 신경망 내에서 입력 노드 및 출력 노드 관계를 형성한다. 신경망 내에서 노드들과 링크들의 개수 및 노드들과 링크들 사이의 연관관 계, 링크들 각각에 부여된 가중치의 값에 따라, 신경망의 특성이 결정될 수 있다. 예를 들어, 동일한 개수의 노 드 및 링크들이 존재하고, 링크들 사이의 가중치 값이 상이한 두 신경망이 존재하는 경우, 두 개의 신경망들은 서로 상이한 것으로 인식될 수 있다. 신경망은 하나 이상의 노드들을 포함하여 구성될 수 있다. 신경망을 구성하는 노드들 중 일부는, 최초 입력 노 드로부터의 거리들에 기초하여, 하나의 레이어(layer)를 구성할 수 있다. 예를 들어, 최초 입력 노드로부터 거 리가 n인 노드들의 집합은, n 레이어를 구성할 수 있다. 최초 입력 노드로부터 거리는, 최초 입력 노드로부터 해당 노드까지 도달하기 위해 거쳐야 하는 링크들의 최소 개수에 의해 정의될 수 있다. 그러나, 이러한 레이어 의 정의는 설명을 위한 임의적인 것으로서, 신경망 내에서 레이어의 차수는 상술한 것과 상이한 방법으로 정의될 수 있다. 예를 들어, 노드들의 레이어는 최종 출력 노드로부터 거리에 의해 정의될 수도 있다. 최초 입력 노드는 신경망 내의 노드들 중 다른 노드들과의 관계에서 링크를 거치지 않고 데이터가 직접 입력되 는 하나 이상의 노드들을 의미할 수 있다. 또는, 신경망 네트워크 내에서, 링크를 기준으로 한 노드 간의 관계 에 있어서, 링크로 연결된 다른 입력 노드들이 가지지 않는 노드들을 의미할 수 있다. 이와 유사하게, 최종 출 력 노드는 신경망 내의 노드들 중 다른 노드들과의 관계에서, 출력 노드를 가지지 않는 하나 이상의 노드들을 의미할 수 있다. 또한, 히든 노드는 최초 입력 노드 및 최후 출력 노드가 아닌 신경망을 구성하는 노드들을 의 미할 수 있다. 본 개시의 몇몇 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개 수와 동일할 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 감소하다가 다시 증가하는 형태의 신경망일 수 있다. 또한, 본 개시의 다른 몇몇 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출 력 레이어의 노드의 개수 보다 적을 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 감 소하는 형태의 신경망일 수 있다. 또한, 본 개시의 또 다른 몇몇 실시예에 따른 신경망은 입력 레이어의 노드의 개수가 출력 레이어의 노드의 개수보다 많을 수 있으며, 입력 레이어에서 히든 레이어로 진행됨에 따라 노드의 수가 증가하는 형태의 신경망일 수 있다. 본 개시의 또 다른 몇몇 실시예에 따른 신경망은 상술한 신경망들의 조합된 형태의 신경망일 수 있다. 딥 뉴럴 네트워크(DNN: deep neural network, 심층신경망)는 입력 레이어와 출력 레이어 외에 복수의 히든 레이 어를 포함하는 신경망을 의미할 수 있다. 딥 뉴럴 네트워크를 이용하면 데이터의 잠재적인 구조(latent structures)를 파악할 수 있다. 즉, 사진, 글, 비디오, 음성, 음악의 잠재적인 구조(예를 들어, 어떤 물체가 사 진에 있는지, 글의 내용과 감정이 무엇인지, 음성의 내용과 감정이 무엇인지 등)를 파악할 수 있다. 딥 뉴럴 네 트워크는 컨벌루셔널 뉴럴 네트워크(CNN: convolutional neural network), 리커런트 뉴럴 네트워크(RNN: recurrent neural network), 오토 인코더(auto encoder), GAN(Generative Adversarial Networks), 제한 볼츠 만 머신(RBM: restricted boltzmann machine), 심층 신뢰 네트워크(DBN: deep belief network), Q 네트워크, U 네트워크, 샴 네트워크 등을 포함할 수 있다. 전술한 딥 뉴럴 네트워크의 기재는 예시일 뿐이며 본 개시는 이에 제한되지 않는다. 본 개시의 몇몇 실시예에서 네트워크 함수는 오토 인코더를 포함할 수도 있다. 오토 인코더는 입력 데이터와 유 사한 출력 데이터를 출력하기 위한 인공 신경망의 일종일 수 있다. 오토 인코더는 적어도 하나의 히든 레이어를 포함할 수 있으며, 홀수 개의 히든 레이어가 입출력 레이어 사이에 배치될 수 있다. 각각의 레이어의 노드의 수 는 입력 레이어의 노드의 수에서 병목 레이어(인코딩)라는 중간 레이어로 축소되었다가, 병목 레이어에서 출력 레이어(입력 레이어와 대칭)로 축소와 대칭되어 확장될 수도 있다. 이 경우, 차원 감소 레이어와 차원 복원 레 이어가 대칭될 수 있으나, 본 개시는 이에 제한되지 않으며, 차원 감소 레이어와 차원 복원 레이어의 노드는 대 칭이 아닐 수도 있다. 오토 인코더는 비선형 차원 감소를 수행할 수 있다. 입력 레이어 및 출력 레이어의 수는 입력 데이터의 전처리 이후에 남은 센서들의 수와 대응될 수 있다. 오토 인코더 구조에서 인코더에 포함된 히든 레이어의 노드의 수는 입력 레이어에서 멀어질수록 감소하는 구조를 가질 수 있다. 병목 레이어(인코더와 디코 더 사이에 위치하는 가장 적은 노드를 가진 레이어)의 노드의 수는 너무 작은 경우 충분한 양의 정보가 전달되 지 않을 수 있으므로, 특정 수 이상(예를 들어, 입력 레이어의 절반 이상 등)으로 유지될 수도 있다. 뉴럴 네트워크는 교사 학습(supervised learning), 비교사 학습(unsupervised learning), 및 반교사학습(semi supervised learning) 중 적어도 하나의 방식으로 학습될 수 있다. 뉴럴 네트워크의 학습은 출력의 오류를 최소 화하기 위한 것이다. 뉴럴 네트워크의 학습에서 반복적으로 학습 데이터를 뉴럴 네트워크에 입력시키고 학습 데 이터에 대한 뉴럴 네트워크의 출력과 타겟의 에러를 계산하고, 에러를 줄이기 위한 방향으로 뉴럴 네트워크의 에러를 뉴럴 네트워크의 출력 레이어에서부터 입력 레이어 방향으로 역전파(backpropagation)하여 뉴럴 네트워 크의 각 노드의 가중치를 업데이트 하는 과정이다. 교사 학습의 경우 각각의 학습 데이터에 정답이 라벨링되어 있는 학습 데이터를 사용하며(즉, 라벨링된 학습 데이터), 비교사 학습의 경우는 각각의 학습 데이터에 정답이 라벨링되어 있지 않을 수 있다. 즉, 예를 들어 데이터 분류에 관한 교사 학습의 경우의 학습 데이터는 학습 데 이터 각각에 카테고리가 라벨링 된 데이터 일 수 있다. 라벨링된 학습 데이터가 뉴럴 네트워크에 입력되고, 뉴 럴 네트워크의 출력(카테고리)과 학습 데이터의 라벨을 비교함으로써 오류(error)가 계산될 수 있다. 다른 예로, 데이터 분류에 관한 비교사 학습의 경우 입력인 학습 데이터가 뉴럴 네트워크 출력과 비교됨으로써 오류 가 계산될 수 있다. 계산된 오류는 뉴럴 네트워크에서 역방향(즉, 출력 레이어에서 입력 레이어 방향)으로 역전 파 되며, 역전파에 따라 뉴럴 네트워크의 각 레이어의 각 노드들의 연결 가중치가 업데이트 될 수 있다. 업데이 트 되는 각 노드의 연결 가중치는 학습률(learning rate)에 따라 변화량이 결정될 수 있다. 입력 데이터에 대한 뉴럴 네트워크의 계산과 에러의 역전파는 학습 사이클(epoch)을 구성할 수 있다. 학습률은 뉴럴 네트워크의 학습 사이클의 반복 횟수에 따라 상이하게 적용될 수 있다. 예를 들어, 뉴럴 네트워크의 학습 초기에는 높은 학습 률을 사용하여 뉴럴 네트워크가 빠르게 일정 수준의 성능을 확보하도록 하여 효율성을 높이고, 학습 후기에는 낮은 학습률을 사용하여 정확도를 높일 수 있다. 뉴럴 네트워크의 학습에서 일반적으로 학습 데이터는 실제 데이터(즉, 학습된 뉴럴 네트워크를 이용하여 처리하 고자 하는 데이터)의 부분집합일 수 있으며, 따라서, 학습 데이터에 대한 오류는 감소하나 실제 데이터에 대해 서는 오류가 증가하는 학습 사이클이 존재할 수 있다. 과적합(overfitting)은 이와 같이 학습 데이터에 과하게 학습하여 실제 데이터에 대한 오류가 증가하는 현상이다. 예를 들어, 노란색 고양이를 보여 고양이를 학습한 뉴 럴 네트워크가 노란색 이외의 고양이를 보고는 고양이임을 인식하지 못하는 현상이 과적합의 일종일 수 있다. 과적합은 머신러닝 알고리즘의 오류를 증가시키는 원인으로 작용할 수 있다. 이러한 과적합을 막기 위하여 다양 한 최적화 방법이 사용될 수 있다. 과적합을 막기 위해서는 학습 데이터를 증가시키거나, 레귤라이제이션 (regularization), 학습의 과정에서 네트워크의 노드 일부를 생략하는 드롭아웃(dropout) 등의 방법이 적용될 수 있다. 본 개시의 몇몇 실시예에 따라 데이터 구조를 저장한 컴퓨터 판독가능 매체가 개시된다. 데이터 구조는 데이터에 효율적인 접근 및 수정을 가능하게 하는 데이터의 조직, 관리, 저장을 의미할 수 있다. 데이터 구조는 특정 문제(예를 들어, 최단 시간으로 데이터 검색, 데이터 저장, 데이터 수정) 해결을 위한 데이 터의 조직을 의미할 수 있다. 데이터 구조는 특정한 데이터 처리 기능을 지원하도록 설계된, 데이터 요소들 간 의 물리적이거나 논리적인 관계로 정의될 수도 있다. 데이터 요소들 간의 논리적인 관계는 사용자가 생각하는 데이터 요소들 간의 연결관계를 포함할 수 있다. 데이터 요소들 간의 물리적인 관계는 컴퓨터 판독가능 저장매 체(예를 들어, 하드 디스크)에 물리적으로 저장되어 있는 데이터 요소들 간의 실제 관계를 포함할 수 있다. 데 이터 구조는 구체적으로 데이터의 집합, 데이터 간의 관계, 데이터에 적용할 수 있는 함수 또는 명령어를 포함 할 수 있다. 효과적으로 설계된 데이터 구조를 통해 컴퓨팅 장치는 컴퓨팅 장치의 자원을 최소한으로 사용하면 서 연산을 수행할 수 있다. 구체적으로 컴퓨팅 장치는 효과적으로 설계된 데이터 구조를 통해 연산, 읽기, 삽입, 삭제, 비교, 교환, 검색의 효율성을 높일 수 있다. 데이터 구조는 데이터 구조의 형태에 따라 선형 데이터 구조와 비선형 데이터 구조로 구분될 수 있다. 선형 데 이터 구조는 하나의 데이터 뒤에 하나의 데이터만이 연결되는 구조일 수 있다. 선형 데이터 구조는 리스트 (List), 스택(Stack), 큐(Queue), 데크(Deque)를 포함할 수 있다. 리스트는 내부적으로 순서가 존재하는 일련의 데이터 집합을 의미할 수 있다. 리스트는 연결 리스트(Linked List)를 포함할 수 있다. 연결 리스트는 각각의 데이터가 포인터를 가지고 한 줄로 연결되어 있는 방식으로 데이터가 연결된 데이터 구조일 수 있다. 연결 리스 트에서 포인터는 다음이나 이전 데이터와의 연결 정보를 포함할 수 있다. 연결 리스트는 형태에 따라 단일 연결 리스트, 이중 연결 리스트, 원형 연결 리스트로 표현될 수 있다. 스택은 제한적으로 데이터에 접근할 수 있는 데이터 나열 구조일 수 있다. 스택은 데이터 구조의 한 쪽 끝에서만 데이터를 처리(예를 들어, 삽입 또는 삭 제)할 수 있는 선형 데이터 구조일 수 있다. 스택에 저장된 데이터는 늦게 들어갈수록 빨리 나오는 데이터 구조 (LIFO-Last in First Out)일 수 있다. 큐는 제한적으로 데이터에 접근할 수 있는 데이터 나열 구조로서, 스택과 달리 늦게 저장된 데이터일수록 늦게 나오는 데이터 구조(FIFO-First in First Out)일 수 있다. 데크는 데이터 구조의 양 쪽 끝에서 데이터를 처리할 수 있는 데이터 구조일 수 있다. 비선형 데이터 구조는 하나의 데이터 뒤에 복수개의 데이터가 연결되는 구조일 수 있다. 비선형 데이터 구조는 그래프(Graph) 데이터 구조를 포함할 수 있다. 그래프 데이터 구조는 정점(Vertex)과 간선(Edge)으로 정의될 수 있으며 간선은 서로 다른 두개의 정점을 연결하는 선을 포함할 수 있다. 그래프 데이터 구조 트리(Tree) 데이터 구조를 포함할 수 있다. 트리 데이터 구조는 트리에 포함된 복수개의 정점 중에서 서로 다른 두개의 정점을 연 결시키는 경로가 하나인 데이터 구조일 수 있다. 즉 그래프 데이터 구조에서 루프(loop)를 형성하지 않는 데이 터 구조일 수 있다. 본 명세서에 걸쳐, 연산 모델, 신경망, 네트워크 함수, 뉴럴 네트워크(neural network)는 동일한 의미로 사용될 수 있다. (이하에서는 신경망으로 통일하여 기술한다.) 데이터 구조는 신경망을 포함할 수 있다. 그리고 신경망 을 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망을 포함한 데이터 구조는 또한 신경망 에 입력되는 데이터, 신경망의 가중치, 신경망의 하이퍼 파라미터, 신경망으로부터 획득한 데이터, 신경망의 각 노드 또는 레이어와 연관된 활성 함수, 신경망의 학습을 위한 손실 함수를 포함할 수 있다. 신경망을 포함한 데 이터 구조는 상기 개시된 구성들 중 임의의 구성 요소들을 포함할 수 있다. 즉 신경망을 포함한 데이터 구조는 신경망에 입력되는 데이터, 신경망의 가중치, 신경망의 하이퍼 파라미터, 신경망으로부터 획득한 데이터, 신경망의 각 노드 또는 레이어와 연관된 활성 함수, 신경망의 트레이닝을 위한 손실 함수 등 전부 또는 이들의 임의 의 조합을 포함하여 구성될 수 있다. 전술한 구성들 이외에도, 신경망을 포함한 데이터 구조는 신경망의 특성을 결정하는 임의의 다른 정보를 포함할 수 있다. 또한, 데이터 구조는 신경망의 연산 과정에 사용되거나 발생되는 모든 형태의 데이터를 포함할 수 있으며 전술한 사항에 제한되는 것은 아니다. 컴퓨터 판독가능 매체는 컴퓨터 판독가능 기록 매체 및/또는 컴퓨터 판독가능 전송 매체를 포함할 수 있다. 신경망은 일반적으로 노드라 지칭될 수 있는 상호 연결된 계산 단위들의 집합으로 구성될 수 있다. 이러한 노드들은 뉴런(neuron)들로 지칭될 수도 있다. 신경망은 적어도 하나 이상의 노드들을 포함하여 구성된다. 데이터 구조는 신경망에 입력되는 데이터를 포함할 수 있다. 신경망에 입력되는 데이터를 포함하는 데이터 구조 는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망에 입력되는 데이터는 신경망 학습 과정에서 입력되는 학습 데이터 및/또는 학습이 완료된 신경망에 입력되는 입력 데이터를 포함할 수 있다. 신경망에 입력되는 데이터는 전처리(pre-processing)를 거친 데이터 및/또는 전처리 대상이 되는 데이터를 포함할 수 있다. 전처리는 데이터 를 신경망에 입력시키기 위한 데이터 처리 과정을 포함할 수 있다. 따라서 데이터 구조는 전처리 대상이 되는 데이터 및 전처리로 발생되는 데이터를 포함할 수 있다. 전술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한 되지 않는다. 데이터 구조는 신경망에 입력되거나, 신경망에서 출력되는 데이터를 포함할 수 있다. 신경망에 입력되거나, 출 력되는 데이터를 포함하는 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 컴퓨터 판독가능 매체에 저 장된 데이터 구조는 신경망의 추론 과정에서 입력되는 데이터, 또는 신경망의 추론 결과 출력되는 출력 데이터 를 포함할 수 있다. 또한, 데이터 구조는 특정한 데이터 가공 방법에 의하여 가공되는 데이터를 포함할 수 있으 므로, 가공 전 후의 데이터를 포함할 수 있다. 따라서, 데이터 구조는 가공의 대상이 되는 데이터 및 데이터 가 공 방법을 통해 가공된 데이터를 포함할 수 있다. 데이터 구조는 신경망의 가중치를 포함할 수 있다. (본 명세서에서 가중치, 파라미터는 동일한 의미로 사용될 수 있다.) 그리고 신경망의 가중치를 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 신경망은 복수개의 가중치를 포함할 수 있다. 가중치는 가변적일 수 있으며, 신경망이 원하는 기능을 수행하기 위해, 사 용자 또는 알고리즘에 의해 가변 될 수 있다. 예를 들어, 하나의 출력 노드에 하나 이상의 입력 노드가 각각의 링크에 의해 상호 연결된 경우, 출력 노드는 상기 출력 노드와 연결된 입력 노드들에 입력된 값들 및 각각의 입 력 노드들에 대응하는 링크에 설정된 파라미터에 기초하여 출력 노드 값을 결정할 수 있다. 전술한 데이터 구조 는 예시일 뿐 본 개시는 이에 제한되지 않는다. 제한이 아닌 예로서, 가중치는 신경망 학습 과정에서 가변되는 가중치 및/또는 신경망 학습이 완료된 가중치를 포함할 수 있다. 신경망 학습 과정에서 가변되는 가중치는 학습 사이클이 시작되는 시점의 가중치 및/또는 학습 사이클 동안 가변되는 가중치를 포함할 수 있다. 신경망 학습이 완료된 가중치는 학습 사이클이 완료된 가중치 를 포함할 수 있다. 따라서 신경망의 가중치를 포함한 데이터 구조는 신경망 학습 과정에서 가변되는 가중치 및 /또는 신경망 학습이 완료된 가중치를 포함한 데이터 구조를 포함할 수 있다. 그러므로 상술한 가중치 및/또는 각 가중치의 조합은 신경망의 가중치를 포함한 데이터 구조에 포함되는 것으로 한다. 전술한 데이터 구조는 예 시일 뿐 본 개시는 이에 제한되지 않는다. 신경망의 가중치를 포함한 데이터 구조는 직렬화(serialization) 과정을 거친 후 컴퓨터 판독가능 저장 매체(예 를 들어, 메모리, 하드 디스크)에 저장될 수 있다. 직렬화는 데이터 구조를 동일하거나 다른 컴퓨팅 장치에 저 장하고 나중에 다시 재구성하여 사용할 수 있는 형태로 변환하는 과정일 수 있다. 컴퓨팅 장치는 데이터 구조를 직렬화하여 네트워크를 통해 데이터를 송수신할 수 있다. 직렬화된 신경망의 가중치를 포함한 데이터 구조는 역 직렬화(deserialization)를 통해 동일한 컴퓨팅 장치 또는 다른 컴퓨팅 장치에서 재구성될 수 있다. 신경망의 가중치를 포함한 데이터 구조는 직렬화에 한정되는 것은 아니다. 나아가 신경망의 가중치를 포함한 데이터 구조 는 컴퓨팅 장치의 자원을 최소한으로 사용하면서 연산의 효율을 높이기 위한 데이터 구조(예를 들어, 비선형 데 이터 구조에서 B-Tree, Trie, m-way search tree, AVL tree, Red-Black Tree)를 포함할 수 있다. 전술한 사항 은 예시일 뿐 본 개시는 이에 제한되지 않는다. 데이터 구조는 신경망의 하이퍼 파라미터(Hyper-parameter)를 포함할 수 있다. 그리고 신경망의 하이퍼 파라미 터를 포함한 데이터 구조는 컴퓨터 판독가능 매체에 저장될 수 있다. 하이퍼 파라미터는 사용자에 의해 가변되 는 변수일 수 있다. 하이퍼 파라미터는 예를 들어, 학습률(learning rate), 비용 함수(cost function), 학습 사이클 반복 횟수, 가중치 초기화(Weight initialization)(예를 들어, 가중치 초기화 대상이 되는 가중치 값의 범위 설정), Hidden Unit 개수(예를 들어, 히든 레이어의 개수, 히든 레이어의 노드 수)를 포함할 수 있다. 전술한 데이터 구조는 예시일 뿐 본 개시는 이에 제한되지 않는다. 도 6은 본 개시내용의 실시예들이 구현될 수 있는 예시적인 컴퓨팅 환경에 대한 일반적인 개략도를 도시한다. 도 6에서 도시되는 컴퓨터는 클러스터에 포함된 마스터 노드 및/또는 하나 이상의 서브 노드 들 각각에 대응될 수 있다. 본 개시내용이 일반적으로 하나 이상의 컴퓨터 상에서 실행될 수 있는 컴퓨터 실행가능 명령어와 관련하여 전술 되었지만, 당업자라면 본 개시내용 기타 프로그램 모듈들과 결합되어 및/또는 하드웨어와 소프트웨어의 조합으 로서 구현될 수 있다는 것을 잘 알 것이다. 일반적으로, 본 명세서에서의 모듈은 특정의 태스크를 수행하거나 특정의 추상 데이터 유형을 구현하는 루틴, 프로시져, 프로그램, 컴포넌트, 데이터 구조, 기타 등등을 포함한다. 또한, 당업자라면 본 개시의 방법이 단일- 프로세서 또는 멀티프로세서 컴퓨터 시스템, 미니컴퓨터, 메인프레임 컴퓨터는 물론 퍼스널 컴퓨터, 핸드헬드 컴퓨팅 장치, 마이크로프로세서-기반 또는 프로그램가능 가전 제품, 기타 등등(이들 각각은 하나 이상의 연관된 장치와 연결되어 동작할 수 있음)을 비롯한 다른 컴퓨터 시스템 구성으로 실시될 수 있다는 것을 잘 알 것이다. 본 개시의 설명된 실시예들은 또한 어떤 태스크들이 통신 네트워크를 통해 연결되어 있는 원격 처리 장치들에 의해 수행되는 분산 컴퓨팅 환경에서 실시될 수 있다. 분산 컴퓨팅 환경에서, 프로그램 모듈은 로컬 및 원격 메 모리 저장 장치 둘다에 위치할 수 있다. 컴퓨터는 통상적으로 다양한컴퓨터 판독가능 매체를 포함한다. 컴퓨터에 의해 액세스 가능한 매체 로서, 휘발성 및 비휘발성 매체, 일시적(transitory) 및 비일시적(non-transitory) 매체, 이동식 및 비-이동식 매체를 포함한 다. 제한이 아닌 예로서, 컴퓨터 판독가능 매체는 컴퓨터 판독가능 저장 매체 및 컴퓨터 판독가능 전송 매체를 포함할 수 있다. 컴퓨터 판독가능 저장 매체는 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터와 같은 정보를 저장하는 임의의 방법 또는 기술로 구현되는 휘발성 및 비휘발성 매체, 일시적 및 비-일시적 매체, 이동 식 및 비이동식 매체를 포함한다. 컴퓨터 판독가능 저장 매체는 RAM, ROM, EEPROM, 플래시 메모리 또는 기타 메 모리 기술, CD-ROM, DVD(digital video disk) 또는 기타 광 디스크 저장 장치, 자기 카세트, 자기 테이프, 자 기 디스크 저장 장치 또는 기타 자기 저장 장치, 또는 컴퓨터에 의해 액세스될 수 있고 원하는 정보를 저장하는 데 사용될 수 있는 임의의 기타 매체를 포함하지만, 이에 한정되지 않는다. 컴퓨터 판독가능 전송 매체는 통상적으로 반송파(carrier wave) 또는 기타 전송 메커니즘(transport mechanis m)과 같은 피변조 데이터 신호(modulated data signal)에 컴퓨터 판독가능 명령어, 데이터 구조, 프로그램 모듈 또는 기타 데이터등을 구현하고 모든 정보 전달 매체를 포함한다. 피변조 데이터 신호라는 용어는 신호 내에 정 보를 인코딩하도록 그 신호의 특성들 중 하나 이상을 설정 또는 변경시킨 신호를 의미한다. 제한이 아닌 예로서, 컴퓨터 판독가능 전송 매체는 유선 네트워크 또는 직접 배선 접속(direct-wired connection)과 같은 유 선 매체, 그리고 음향, RF, 적외선, 기타 무선 매체와 같은 무선 매체를 포함한다. 상술된 매체들 중 임의의 것 의 조합도 역시 컴퓨터 판독가능 전송 매체의 범위 안에 포함되는 것으로 한다. 컴퓨터를 포함하는 본 개시의 여러가지 측면들을 구현하는 예시적인 환경이 나타내어져 있으며, 컴 퓨터는 처리 장치, 시스템 메모리 및 시스템 버스를 포함한다. 시스템 버스는 시스템 메모리(이에 한정되지 않음)를 비롯한 시스템 컴포넌트들을 처리 장치에 연결시킨다. 처리 장치는 다양한 상용 프로세서들 중 임의의 프로세서일 수 있다. 듀얼 프로세서 및 기타 멀티프로세서 아 키텍처도 역시 처리 장치로서 이용될 수 있다. 시스템 버스는 메모리 버스, 주변장치 버스, 및 다양한 상용 버스 아키텍처 중 임의의 것을 사용하는 로 컬 버스에 추가적으로 상호 연결될 수 있는 몇 가지 유형의 버스 구조 중 임의의 것일 수 있다. 시스템 메모리 는 판독 전용 메모리(ROM) 및 랜덤 액세스 메모리(RAM)를 포함한다. 기본 입/출력 시스템 (BIOS)은 ROM, EPROM, EEPROM 등의 비휘발성 메모리에 저장되며, 이 BIOS는 시동 중과 같은 때에 컴퓨터 내의 구성요소들 간에 정보를 전송하는 일을 돕는 기본적인 루틴을 포함한다. RAM은 또한 데이터 를 캐싱하기 위한 정적 RAM 등의 고속 RAM을 포함할 수 있다. 컴퓨터는 또한 내장형 하드 디스크 드라이브(HDD)(예를 들어, EIDE, SATA)―이 내장형 하드 디스크 드라이브는 또한 적당한 섀시(도시 생략) 내에서 외장형 용도로 구성될 수 있음―, 자기 플로피 디스크드라이브(FDD)(예를 들어, 이동식 디스켓으로부터 판독을 하거나 그에 기록을 하기 위한 것임), 및 광 디스크 드라이브(예를 들어, CD-ROM 디스크를 판독하거나 DVD 등의 기타 고용량 광 매체로부터 판독을 하거나 그에 기록을 하기 위한 것임)를 포함한다. 하드 디스크 드라이브, 자기 디스크 드라이브 및 광 디스크 드라이브는 각각 하드 디스크 드라이브 인터페이스, 자기 디스크 드라이브 인 터페이스 및 광 드라이브 인터페이스에 의해 시스템 버스에 연결될 수 있다. 외장형 드라이 브 구현을 위한 인터페이스는 예를 들어, USB(Universal Serial Bus) 및 IEEE 1394 인터페이스 기술 중 적어도 하나 또는 그 둘 다를 포함한다. 이들 드라이브 및 그와 연관된 컴퓨터 판독가능 매체는 데이터, 데이터 구조, 컴퓨터 실행가능 명령어, 기타 등 등의 비휘발성 저장을 제공한다. 컴퓨터의 경우, 드라이브 및 매체는 임의의 데이터를 적당한 디지털 형 식으로 저장하는 것에 대응한다. 상기에서의 컴퓨터 판독가능 저장 매체에 대한 설명이 HDD, 이동식 자기 디스 크, 및 CD 또는 DVD 등의 이동식 광 매체를 언급하고 있지만, 당업자라면 집 드라이브(zip drive), 자기 카세트, 플래쉬 메모리 카드, 카트리지, 기타 등등의 컴퓨터에 의해 판독가능한 다른 유형의 저장 매체도 역시 예시적인 운영 환경에서 사용될 수 있으며 또 임의의 이러한 매체가 본 개시의 방법들을 수행하기 위한 컴퓨터 실행가능 명령어를 포함할 수 있다는 것을 잘 알 것이다. 운영 체제, 하나 이상의 애플리케이션 프로그램, 기타 프로그램 모듈 및 프로그램 데이터 를 비롯한 다수의 프로그램 모듈이 드라이브 및 RAM에 저장될 수 있다. 운영 체제, 애플리케이션, 모듈 및/또는 데이터의 전부 또는 그 일부분이 또한 RAM에 캐싱될 수 있다. 본 개시가 여러가지 상업적으 로 이용가능한 운영 체제 또는 운영 체제들의 조합에서 구현될 수 있다는 것을 잘 알 것이다. 사용자는 하나 이상의 유선/무선 입력 장치, 예를 들어, 키보드 및 마우스 등의 포인팅 장치를 통 해 컴퓨터에 명령 및 정보를 입력할 수 있다. 기타 입력 장치(도시 생략)로는 마이크, IR 리모콘, 조이스 틱, 게임 패드, 스타일러스 펜, 터치 스크린, 기타 등등이 있을 수 있다. 이들 및 기타 입력 장치가 종종 시스 템 버스에 연결되어 있는 입력 장치 인터페이스를 통해 처리 장치에 연결되지만, 병렬 포트, IEEE 1394 직렬 포트, 게임 포트, USB 포트, IR 인터페이스, 기타 등등의 기타 인터페이스에 의해 연결될 수 있 다. 모니터 또는 다른 유형의 디스플레이 장치도 역시 비디오 어댑터 등의 인터페이스를 통해 시스템 버스에 연결된다. 모니터에 부가하여, 컴퓨터는 일반적으로 스피커, 프린터, 기타 등등의 기타 주 변 출력 장치(도시 생략)를 포함한다. 컴퓨터는 유선 및/또는 무선 통신을 통한 원격 컴퓨터(들) 등의 하나 이상의 원격 컴퓨터로의 논리 적 연결을 사용하여 네트워크화된 환경에서 동작할 수 있다. 원격 컴퓨터(들)는 워크스테이션, 서버 컴퓨 터, 라우터, 퍼스널 컴퓨터, 휴대용 컴퓨터, 마이크로프로세서-기반 오락 기기, 피어 장치 또는 기타 통상의 네 트워크 노드일 수 있으며, 일반적으로 컴퓨터에 대해 기술된 구성요소들 중 다수 또는 그 전부를 포함하 지만, 간략함을 위해, 메모리 저장 장치만이 도시되어 있다. 도시되어 있는 논리적 연결은 근거리 통신망 (LAN) 및/또는 더 큰 네트워크, 예를 들어, 원거리 통신망(WAN)에의 유선/무선 연결을 포함한다. 이러한 LAN 및 WAN 네트워킹 환경은 사무실 및 회사에서 일반적인 것이며, 인트라넷 등의 전사적 컴퓨터 네트워 크(enterprise-wide computer network)를 용이하게 해주며, 이들 모두는 전세계 컴퓨터 네트워크, 예를 들어, 인터넷에 연결될 수 있다. LAN 네트워킹 환경에서 사용될 때, 컴퓨터는 유선 및/또는 무선 통신 네트워크 인터페이스 또는 어댑터 를 통해 로컬 네트워크에 연결된다. 어댑터는 LAN에의 유선 또는 무선 통신을 용이하 게 해줄 수 있으며, 이 LAN은 또한 무선 어댑터와 통신하기 위해 그에 설치되어 있는 무선 액세스 포인트를 포함하고 있다. WAN 네트워킹 환경에서 사용될 때, 컴퓨터는 모뎀을 포함할 수 있거나, WAN 상의 통신 서버에 연결되거나, 또는 인터넷을 통하는 등, WAN을 통해 통신을 설정하는 기타 수 단을 갖는다. 내장형 또는 외장형 및 유선 또는 무선 장치일 수 있는 모뎀은 직렬 포트 인터페이스(114 2)를 통해 시스템 버스에 연결된다. 네트워크화된 환경에서, 컴퓨터에 대해 설명된 프로그램 모듈 들 또는 그의 일부분이 원격 메모리/저장 장치에 저장될 수 있다. 도시된 네트워크 연결이 예시적인 것이 며 컴퓨터들 사이에 통신 링크를 설정하는 기타 수단이 사용될 수 있다는 것을 잘 알 것이다. 컴퓨터는 무선 통신으로 배치되어 동작하는 임의의 무선 장치 또는 개체, 예를 들어, 프린터, 스캐너, 데 스크톱 및/또는 휴대용 컴퓨터, PDA(portable data assistant), 통신 위성, 무선 검출가능 태그와 연관된 임의 의 장비 또는 장소, 및 전화와 통신을 하는 동작을 한다. 이것은 적어도 Wi-Fi 및 블루투스 무선 기술을 포함한다. 따라서, 통신은 종래의 네트워크에서와 같이 미리 정의된 구조이거나 단순하게 적어도 2개의 장치 사이의 애드혹 통신(ad hoc communication)일 수 있다. Wi-Fi(Wireless Fidelity)는 유선 없이도 인터넷 등으로의 연결을 가능하게 해준다. Wi-Fi는 이러한 장치, 예를 들어, 컴퓨터가 실내에서 및 실외에서, 즉 기지국의 통화권 내의 아무 곳에서나 데이터를 전송 및 수신할 수 있 게 해주는 셀 전화와 같은 무선 기술이다. Wi-Fi 네트워크는 안전하고 신뢰성 있으며 고속인 무선 연결을 제공 하기 위해 IEEE 802.11(a,b,g, 기타)이라고 하는 무선 기술을 사용한다. 컴퓨터를 서로에, 인터넷에 및 유선 네 트워크(IEEE 802.3 또는 이더넷을 사용함)에 연결시키기 위해 Wi-Fi가 사용될 수 있다. Wi-Fi 네트워크는 비인 가 2.4 및 5 GHz 무선 대역에서, 예를 들어, 11Mbps(802.11a) 또는 54 Mbps(802.11b) 데이터 레이트로 동작하 거나, 양 대역(듀얼 대역)을 포함하는 제품에서 동작할 수 있다. 본 개시의 기술 분야에서 통상의 지식을 가진 자는 여기에 개시된 실시예들과 관련하여 설명된 다양한 예시적인 논리 블록들, 모듈들, 프로세서들, 수단들, 회로들 및 알고리즘 단계들이 전자 하드웨어, (편의를 위해, 여기에 서 \"소프트웨어\"로 지칭되는) 다양한 형태들의 프로그램 또는 설계 코드 또는 이들 모두의 결합에 의해 구현될 수 있다는 것을 이해할 것이다. 하드웨어 및 소프트웨어의 이러한 상호 호환성을 명확하게 설명하기 위해, 다양 한 예시적인 컴포넌트들, 블록들, 모듈들, 회로들 및 단계들이 이들의 기능과 관련하여 위에서 일반적으로 설명 되었다. 이러한 기능이 하드웨어 또는 소프트웨어로서 구현되는지 여부는 특정한 애플리케이션 및 전체 시스템 에 대하여 부과되는 설계 제약들에 따라 좌우된다. 본 개시의 기술 분야에서 통상의 지식을 가진 자는 각각의 특정한 애플리케이션에 대하여 다양한 방식들로 설명된 기능을 구현할 수 있으나, 이러한 구현 결정들은 본 개 시의 범위를 벗어나는 것으로 해석되어서는 안 될 것이다. 여기서 제시된 다양한 실시예들은 방법, 장치, 또는 표준 프로그래밍 및/또는 엔지니어링 기술을 사용한 제조 물품(article)으로 구현될 수 있다. 용어 \"제조 물품\"은 임의의 컴퓨터-판독가능 장치로부터 액세스 가능한 컴 퓨터 프로그램 또는 매체(media)를 포함한다. 예를 들어, 컴퓨터-판독가능 저장 매체는 자기 저장 장치(예를 들면, 하드 디스크, 플로피 디스크, 자기 스트립, 등), 광학 디스크(예를 들면, CD, DVD, 등), 스마트 카드, 및 플래쉬 메모리 장치(예를 들면, EEPROM, 카드, 스틱, 키 드라이브, 등)를 포함하지만, 이들로 제한되는 것은 아 니다. 용어 \"기계-판독가능 매체\"는 명령(들) 및/또는 데이터를 저장, 보유, 및/또는 전달할 수 있는 무선 채 널 및 다양한 다른 매체를 포함하지만, 이들로 제한되는 것은 아니다. 제시된 실시예들에 대한 설명은 임의의 본 개시의 기술 분야에서 통상의 지식을 가진 자가 본 개시를 이용하거 나 또는 실시할 수 있도록 제공된다. 이러한 실시예들에 대한 다양한 변형들은 본 개시의 기술 분야에서 통상 의 지식을 가진 자에게 명백할 것이며, 여기에 정의된 일반적인 원리들은 본 개시의 범위를 벗어남이 없이 다른 실시예들에 적용될 수 있다. 그리하여, 본 개시는 여기에 제시된 실시예들로 한정되는 것이 아니라, 여기에 제 시된 원리들 및 신규한 특징들과 일관되는 최광의의 범위에서 해석되어야 할 것이다.도면 도면1 도면2 도면3 도면4 도면5 도면6"}
{"patent_id": "10-2019-0172641", "section": "도면", "subsection": "도면설명", "item": 1, "content": "다양한 양상들이 이제 도면들을 참조로 기재되며, 여기서 유사한 참조 번호들은 총괄적으로 유사한 구성요소들 을 지칭하는데 이용된다. 이하의 실시예에서, 설명 목적을 위해, 다수의 특정 세부사항들이 하나 이상의 양상들 의 총체적 이해를 제공하기 위해 제시된다. 그러나, 그러한 양상(들)이 이러한 구체적인 세부사항들 없이 실시 될 수 있음은 명백할 것이다. 도 1은 본 개시의 몇몇 실시예에 따른 인공지능 모델의 분산 학습 시스템의 개략도이다. 도 2는 본 개시의 몇몇 실시예에 따른 마스터 노드가 인공지능 모델의 분산 학습을 수행하는 방법의 일례를 설 명하기 위한 흐름도이다. 도 3은 본 개시의 몇몇 실시예에 따른 마스터 노드가 인공지능 모델의 분산 학습을 위한 태스크를 분할하는 방 법의 일례를 설명하기 위한 흐름도이다. 도 4는 본 개시의 몇몇 실시예에 따른 마스터 노드가 학습 결과 정보에 기초하여 인공지능 모델을 업데이트하는 방법의 일례를 설명하기 위한 흐름도이다. 도 5는 본 개시의 몇몇 실시예에 따라 학습될 수 있는 인공지능 모델의 네트워크 구조를 간략히 나타낸 예시도 이다. 도 6은 본 개시내용의 실시예들이 구현될 수 있는 예시적인 컴퓨팅 환경에 대한 일반적인 개략도를 도시한다."}
