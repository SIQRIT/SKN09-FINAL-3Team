{"patent_id": "10-2020-0042125", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2021-0124727", "출원번호": "10-2020-0042125", "발명의 명칭": "로고 생성 방법", "출원인": "고려대학교 산학협력단", "발명자": "이홍철"}}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "적어도 프로세서(processor)를 포함하는 컴퓨팅 장치에 의해 수행되는 로고 생성 방법에 있어서,딥러닝 기반으로 로고 이미지를 생성하는 단계; 및상기 생성된 로고 이미지를 벡터화하는 단계를 포함하는 로고 생성 방법."}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서,상기 로고 이미지를 생성하는 단계는,크롤링(crawling)을 통해 상기 로고 이미지 데이터를 수집하는 단계;상기 수집된 로고 이미지마다 라벨(label)을 정의하는 단계; 및상기 정의된 라벨 중 목적하는 라벨에 적합한 이미지를 조건 GAN(conditional generative adversarialnetwork)를 이용하여 상기 로고 이미지를 생성하는 단계를 포함하는 로고 생성 방법."}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제2항에 있어서,상기 수집된 로고 이미지마다 라벨을 정의하는 단계는, 상기 로고 이미지의 메타 데이터(metadata)를 활용하거나 군집화(clustering) 및 분류(classification) 알고리즘을 활용하는 로고 생성 방법."}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제2항에 있어서,상기 생성된 로고 이미지에 보간법(Interpolation)과 단순화(Simplification) 기법을 적용하여 다양한 합성 이미지를 생성하는 단계를 더 포함하는 로고 생성 방법."}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제1항에 있어서,상기 로고 이미지를 생성하는 단계는,사용자가 뼈대(skeleton)를 제공하는 단계; 및상기 뼈대를 기반으로 픽셀간(pixel to pixel) 모델을 활용하여 상기 로고 이미지를 생성하는 단계를 포함하는로고 생성 방법."}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서,공개특허 10-2021-0124727-3-상기 픽셀간 모델은 대립 손실(adversarial loss) 및 지각적 손실(perceptual loss)을 포함하는 하기 식 1의손실함수가 적용되는 로고 생성 방법.[식 1]"}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "제5항에 있어서,상기 픽셀간 모델은 잔여 블록(Residual Block(ResNet))을 적용하여 차원축소(Down)와 차원확장(Up)의 과정을거쳐 로고를 생성하는 생성자, 입력 이미지 데이터를 쌍으로 가지며 상기 이미지에 대해 연관성을 가지는 부분이미지 (patch)로 진짜와 가짜를 판별하도록 구성되는 메인 판별자, 및 입력 이미지 데이터를 단일로 가지며,부분이미지가 아닌 기존의 전체이미지로 진짜와 가짜를 판별하도록 구성되는 보조 판별자를 포함하는 로고 생성방법."}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제1항에 있어서,상기 생성된 로고 이미지를 벡터화하는 단계는 트레이싱(tracing) 방법을 이용하는 로고 생성 방법."}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서,상기 생성된 로고 이미지 벡터화는,상기 생성된 로고 이미지를 색별로 클러스터링하는 단계;상기 클러스터의 중심 색상(centroid color)을 구하는 단계;상기 중심 색상을 기준으로 이미지 층(image layer)을 분리하는 단계;상기 이미지 층별 트레이싱을 수행하여 벡터를 생성하는 단계;상기 생성된 벡터 결과에 상기 중심 색상을 부여하는 단계; 및상기 분리된 이미지 층과, 생성된 벡터, 및 부여된 중심 색상을 합치는 단계를 포함하는 로고 생성 방법."}
{"patent_id": "10-2020-0042125", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제1항에 있어서,상기 벡터화된 로고 이미지에 대하여 노이즈 필터링 및 경계선 적용을 통한 후보정하는 단계를 더 포함하는 로고 생성 방법.공개특허 10-2021-0124727-4-"}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "로고 생성 방법을 제공한다. 로고 생성 방법은 적어도 프로세서(processor)를 포함하는 컴퓨팅 장치에 의해 수행 되고, 딥러닝 기반으로 로고 이미지를 생성하는 단계 및 상기 생성된 로고 이미지를 벡터화하는 단계를 포함한다."}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 로고 생성 방법에 관한 것으로, 보다 상세하게는 딥러닝을 기반으로 하는 로고 생성 방법에 관한 것 이다."}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "로고란 상품이나 기업과 기관 등의 조직에 사용되는 시각 디자인을 말하며, 기업의 정신과 철학이 압축되어 담 긴 브랜드 디자인 요소를 의미한다. 또한, 로고는 기업의 아이덴티티(identity)를 형성하여, 모든 마케팅 활동 의 출발점이므로 자영업자를 비롯한 일반 창업자들에게 중요하게 여겨지는 요소이다. 이러한 로고 디자인 서비스를 이용하기 위해서는 많은 시간과 비용이 필요하므로 시간과 자금이 부족한 창업기 업과 소상공인들에게는 디자인 활용이 어려운 실정이다. 따라서 기존 디자인 과정에서 수행되는 복잡한 과정을 줄이고, 자동생성된 디자인 컨텐츠를 사용자가 직접 활용 하여 시간과 비용을 줄일 수 있는 로고 디자인 서비스가 필요하다. 저비용으로 신속하게 고품질의 디자인 컨텐 츠를 사용자에게 제공하기 위해서는 디자이너가 고객의 요구사항부터 설계안으로 이어지는 시간과 비용이 발생 하는 반복적인 단계를 개선할 수 있는 인공지능 기반의 로고 디자인 생성 방식이 요구되고 있다. 이에, 국내등록특허 제10-2002974호(이하, 선행특허문헌)에서는 인공지능을 이용하여 입력에 대응하는 로고를 생성하는 기술이 개시되어 있다. 그러나, 다양하고 응용 가능한 로고를 생성하는 기술이 요구되고 있다. 선행기술문헌 특허문헌 (특허문헌 0001) 국내등록특허 제10-2002974호"}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본원 발명이 해결하고자 하는 과제는 신속하고 저비용으로 고품질의 로고를 제공하기 위한 로고 생성 방법을 제 공하는 것이다."}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "해결하고자 하는 과제를 달성하기 위하여 본 발명의 실시 예들에 따른 로고 생성 방법은 딥러닝 기반으로 로고 이미지를 생성하는 단계 및 상기 생성된 로고 이미지를 벡터화하는 단계를 포함한다. 또한, 상기 로고 이미지를 생성하는 단계는 크롤링(crawling)을 통해 상기 로고 이미지 데이터를 수집하는 단계, 상기 수집된 로고 이미지마다 라벨(label)을 정의하는 단계, 및 상기 정의된 라벨 중 목적하는 라벨에 적 합한 이미지를 조건 GAN(conditional generative adversarial network)를 이용하여 상기 로고 이미지를 생성하 는 단계를 포함할 수 있다. 또한, 상기 수집된 로고 이미지마다 라벨을 정의하는 단계는 상기 로고 이미지의 메타 데이터(metadata)를 활용 하거나 군집화(clustering) 및 분류(classification) 알고리즘을 활용할 수 있다. 또한, 상기 로고 생성 방법은 상기 생성된 로고 이미지에 보간법(Interpolation)과 단순화(Simplification)를 적용하여 다양한 합성 이미지를 생성하는 단계를 더 포함할 수 있다. 또한, 상기 로고 이미지를 생성하는 단계는 사용자가 뼈대(skeleton)를 제공하는 단계, 및 상기 뼈대를 기반으 로 픽셀간(pixel to pixel) 모델을 활용하여 상기 로고 이미지를 생성하는 단계를 포함할 수 있다. 또한, 상기 픽셀간 모델은 대립 손실(adversarial loss) 및 지각적 손실(perceptual loss)을 포함하는 손실함 수가 적용될 수 있다.또한, 상기 픽셀간 모델은 잔여 블록(Residual Block(ResNet))을 적용하여 차원축소(Down)와 차원확장(Up)의 과 정을 거쳐 로고를 생성하는 생성자, 입력 이미지 데이터를 쌍으로 가지며 상기 이미지에 대해 연관성을 가지는 부분이미지 (patch)로 진짜와 가짜를 판별하도록 구성되는 메인 판별자, 및 입력 이미지 데이터를 단일로 가지 며, 부분이미지가 아닌 기존의 전체이미지로 진짜와 가짜를 판별하도록 구성되는 보조 판별자를 포함할 수 있다. 또한, 상기 생성된 로고 이미지를 벡터화하는 단계는 트레이싱(tracing) 방법을 이용할 수 있다. 또한, 상기 생성된 로고 이미지 벡터화는 상기 생성된 로고 이미지를 색별로 클러스터링하는 단계, 상기 클러스 터의 중심 색상(centroid color)을 구하는 단계, 상기 중심 색상을 기준으로 이미지 층(image layer)을 분리하 는 단계, 상기 이미지 층별 트레이싱을 수행하여 벡터를 생성하는 단계, 상기 생성된 벡터 결과에 상기 중심 색 상을 부여하는 단계, 및 상기 분리된 이미지 층과, 생성된 벡터, 및 부여된 중심 색상을 합치는 단계를 포함할 수 있다. 또한, 상기 로고 생성 방법은 상기 벡터화된 로고 이미지에 대하여 노이즈 필터링 및 경계선 적용을 통한 후보 정하는 단계를 더 포함할 수 있다."}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명의 실시 예들에 따른 로고 생성 방법은 복잡한 이미지를 단순화시킨 새로운 로고생성을 통해 다양화할 수 있다. 또한, 연산속도가 빠르고, 선명하고, 실사와 동일한 이미지를 생성하는 장점이 있다. 더불어, 학습의 안정화 및 이미지의 진짜와 가짜를 판별하는 성능을 향상시킨다. 저비용으로 고품질의 로고를 소비자에게 제공할 수 있으며, 디자인 시간 단축 및 아이디어 제공으로 활용될 수 있다."}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "본 발명의 구성 및 효과를 충분히 이해하기 위하여, 첨부한 도면을 참조하여 본 발명의 바람직한 실시 예들을 설명한다. 그러나 본 발명은, 이하에서 개시되는 실시 예들에 한정되는 것이 아니라, 여러 가지 형태로 구현될 수 있고 다양한 변경을 가할 수 있다.또한, 본 발명의 실시 예들에서 사용되는 용어들은 다르게 정의되지 않는 한, 해당 기술 분야에서 통상의 지식 을 가진 자에게 통상적으로 알려진 의미로 해석될 수 있다. 이하, 첨부된 도면을 참조하여, 본 발명의 실시예들에 따른 로고 이미지 생성 방법을 설명하기로 한다. 도 1은 본 발명의 일 실시예에 따른 로고 생성 방법을 설명하기 위한 순서도이다. 도 1을 참조하면, 로고 생성 방법은 로고 이미지를 생성하고(S100), 생성된 로고 이미지를 벡터화(S200)하는 것 을 포함한다. 로고 이미지를 생성하는 것은 크게 두 가지로 나뉠 수 있는데, 정의된 라벨 중 목적하는 라벨의 이미지를 조건 GAN를 이용하는 방법과 사용자가 제공한 뼈대를 기반으로 픽셀간(pixel to pixel) 모델을 활용하는 방법을 포함 한다. 이에 대한 설명은 이후에서 상세하게 설명하기로 한다. 일 실시예에 따르면, 로고 이미지를 생성하는 것은 GAN(Generative Adversarial Network)을 기반으로 할 수 있 다. 따라서, GAN에 대하여 간략하게 설명하기로 한다. GAN은 2014년에 Ian Goodfellow가 NIPS에서 발표한 딥러 닝 모델(Generative Adversarial Nets - Ian Goodfellow et al. 2014 논문)이다. 도 2는 본 발명의 일 실시예 에 따른 GAN를 설명하기 위한 블록도이다. 도 2를 참조하면, GAN는 생성자(Generator)에서 생성한 결과물을 평 가하는 판별자(Discriminator)가 서로 대립(Adversarial)하며 두 모듈(생성자 및 판별자)의 성능을 점차 개선해 나가는 학습모델이다. 생성자(G)는 데이터 x (data x)의 분포(distribution)를 알아내기 위해 학습하는 네트워 크 모델이며, 구별자(D)는 생성자의 결과물과 데이터 x의 동일성 여부를 확률로 추정하는 네트워크 모델로, G와 D가 기본으로 다층 퍼셉트론(multilayer perceptron) 모델을 사용한다. G의 입력값은 노이즈(noise) 값, z이며 데이터 공간으로의 매핑을 G(z;θg)로 표현하고, D는 D(x;θd)이며 두 네트워크의 가치 함수(value function, loss function)는 V(G,D)로 정의하고, 수학식 1과 같다. [수학식 1]"}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 2, "content": "이때, 판별자의 분류 결과는 정확하게 하고, 생성자의 결과를 판별자가 최대한 틀리도록 한다. 다시 도 1을 참조하면, 생성된 로고 이미지는 픽셀 단위의 레스터 이미지(raster image)이기 때문에 실제 작업 시 사용하는 벡터 이미지로 변환한다. 생성된 로고 이미지는 트레이싱(tracing) 방법을 통해 벡터화될 수 있다. 또한, 본 발명의 일 실시예에 따르면, 컬러 이미지 벡터화 알고리즘을 이용할 수 있다. 이에 대한 설명은 후속 하여 상세하게 설명하기로 한다. 선택적으로, 벡터화된 로고 이미지를 후보정할 수 있다(S300). 벡터화된 로고 이미지는 노이즈 필터링 및 경계 선 적용 등을 통해 후보정될 수 있다. 이하, 도 1에서 설명된 각 단계에 대한 설명을 상세하게 설명하기로 한다. 도 3은 본 발명의 일 실시예에 따른 로고 생성 방법에서 로고 이미지를 생성하는 방법을 설명하는 순서도이다. 도 3에서는 정의된 라벨 중 목적하는 라벨의 이미지를 조건 GAN를 이용하는 방법을 상세하게 설명한다. 도 3을 참조하면, 우선, 딥러닝 모델(deep learning model)을 학습하기 위한 로고 이미지 데이터(logo image data) 수집 및 처리를 수행한다(S1100). 일 실시예에 따르면, 로고 이미지 데이터셋(logo image data set)은 기존의 인터넷 사이트를 이용하여 구축할 수 있다. 예를 들어, noun project 또는 flaticon과 같은 사이트에서 크롤링(crawling)하여 구축될 수 있다. Noun project는 픽토그램 사이트로 다양한 형태의 흑백 아이콘만 이용 가능하며, 키워드 기반의 검색이 가능하다. Flaticon는 픽토그램 사이트로 컬러 아이콘을 지원하며, 이미지 집 합을 팩(pack) 단위로 관리한다. 한편, 이미 구축된 로고 이미지 데이터셋이 있다면 그것을 활용하여도 무방하 다. 각 로고 이미지마다 라벨을 정의한다(S1110). 이 단계는 사용자가 주는 라벨에 적합한 이미지를 생성하는 딥러 닝 모델을 학습시키기 위해 이미지에 라벨을 붙이는 단계이다. 구축된 로고 이미지 데이터셋의 이미지에 라벨을 붙이는 방법은 크게 두 가지로 나누어질 수 있다. 첫째는 로고 이미지의 메타 데이터(metadata)를 활용한 라벨 정의이다. 로고 이미지 데이터에 메타 데이터가 있 다면, 해당 메타 데이터를 라벨로 활용할 수 있다. 예를 들어, 강아지와 관련된 로고 이미지에 ‘강아지’라는메타 데이터가 있다면, 해당하는 메타 데이터인 ‘강아지’를 이미지의 라벨로 활용하는 방식이다. 둘째는 군집화(clustering) 및 분류(classification) 알고리즘을 활용한 라벨 정의이다. 군집화는 라벨이 없는 데이터 집합을 학습시키는 비지도학습(unsupervised learning)의 하나로 데이터의 특징을 추출하여 그 특징 별 로 데이터 집합을 묶어주는 방식이다. 군집의 타당성 평가는 일반 학습모델에서 사용하는 지표를 사용하기 어렵 지만, 군집 간 거리, 군집 지름, 및 군집 분산 등을 고려하여 판단할 수 있다. 일 예로, 군집화의 종류로는 K- means, self-organizing map (SOM), DBSCAN, Hierarchical 등이 있다. 예를 들어, K-means를 간략하게 설명하 기로 한다. K-means는 군집화의 일반적이고 대표적인 알고리즘으로 분리형 군집화 알고리즘으로 로고 데이터의 군집화의 타당한 알고리즘이다. 각 군집의 K개의 중심(centroid)을 구하고, 그 중심들에서 가까운 개체끼리 묶 어주는 과정을 중심의 이동이 없을 때까지 반복하는 방식으로, 사용자가 사전에 군집 수(K)를 정해야 알고리즘 을 수행할 수 있다. 중심에서 가까운 개체를 찾아내는 식은 수학식 2와 같다. [수학식 2]"}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "item": 3, "content": "도 4는 본 발명의 일 실시예에 따른 군집화를 설명하기 위한 도면이다. 도 4를 참조하면, 로고 이미지에서 특징(feature)을 추출한 후 해당 특징에 군집화 알고리즘, 예컨대, K-means 클러스터링을 적용하여 해당 군집의 번호를 이미지의 라벨로 활용할 수 있다. 일 예로, 분류하고자 하는 데이터 의 특징 추출은 ResNet50의 네트워크 모델을 사용하며, 유사 특징끼리 묶이는 군집의 수는 100/50/20 순으로 선 택하여 묶을 수 있다. 분류(classification)는 지도학습(supervised learning)의 일종으로 기존에 존재하는 데이터의 라벨(label) 또 는 카테고리(category)를 스스로 판별하는 과정이다. 분류모델의 성능 및 타당성은 정확성(accuracy), 정밀성 (precision), 재현성(recall) 등으로 판단할 수 있다. 일 예로, 분류 알고리즘으로는 로지스틱회귀(Logistic Regression), 의사결정트리(Decision Tree), k-NN (k-Nearest Neighbor), 다수의 딥러닝 네트워크 모델(CNN, auto encoder) 등이 있다. 이하, CNN 딥러닝 네트워크 모델 중 VGG16을 사용하여 분류모델을 구현하는 것을 간략하게 설명하기로 한다. 도 5는 본 발명의 일 실시예에 따른 분류를 설명하기 위한 도면이다. 도 5를 참조하면, VGG16 네트워크 모델은 합 성곱 신경망(CNN, Convolution Neural Network)에 기반한 모델로 16의 의미는 16개의 층(layer)으로 구성된 네 트워크 모델을 의미하며, 8개의 층을 가지 AlexNet과 유사하지만, 병렬적 구조를 이루고 있지는 않다. CNN의 합 성곱 필터커널(convolution filter kernel)의 사이즈는 가장 작은 3x3으로 고정한 모델로 3x3 이상의 필터커널 보다 훈련시킬 가중치가 적어지므로 학습의 속도가 빨라지고, 동시에 층의 개수는 늘어남으로 특성에 비선형성 을 더 증가시키기 때문에 특성이 점점 더 유용해진다. 즉, 3x3으로 다수의 합성곱을 하는 것이 7x7필터로 한 번 합성곱하는 것보다 나은 실험결과를 얻는다. 일 예로써, 총 16개의 층으로 구성되며, 마지막 층을 제외하고, 각 층에서 다음 층으로의 입력값 변환에 사용되 는 활성화 함수는 ReLU 함수를 사용하고, 마지막 층에서 결과 층으로의 출력함수는 softmax 함수를 사용할 수 있다. 다시 도 3을 참조하면, 이미지 로고를 생성한다. 본 실시예에서는 각 로고 이미지마다 라벨 정의하는 단계에서 구한 라벨을 조건(condition)으로 활용하여, '주어진 라벨에 맞는 로고 이미지를 생성하는 조건 GAN 모델'이다 (S1120). 주어진 라벨에 맞는 로고 이미지를 생성해주는 모델은 라벨(label)을 입력 받아, 해당 라벨에 맞는 이미지를 생 성해주는 모델이다. 본 모델은 조건 GAN을 기반으로 하며, 각 로고 이미지마다 라벨 정의하는 단계에서 얻은 라 벨과 이미지 데이터셋을 학습 데이터셋으로 활용한다. 원-핫 인코딩(one-hot encoding) 라벨을 입력으로 받는 조건 GAN 모델을 모두 활용할 수 있다. 본 발명의 프로토타입에서는 iWGAN (Improved Training Wasserstein Generative Adversarial Network)-ResNet(residual learning)-LC(Layer Condition) 모델을 활용하는 것을 예시 적으로 설명한다. 우선, iWGAN은 딥러닝 학습상태에 대해 측정하는 하나의 지표 및 학습 방향을 결정짓는 손실함수를 와서스테인 (Wasserstein) 거리 계산식을 사용하는 WGAN을 기반으로 한 모델이다. 와서스테인 거리는 두 확률분포 간의 거 리를 측정하는 지표로 Earth Mover’s Distance (EM)이며, 즉, 추정하고자 하는 분포에 도달하기 위하여 양 (mass)과 거리(distance)를 모두 고려한 계산 방식으로 이 두 개 값의 곱이 최소가 될 수 있는 방향으로 학습을 시키도록 유도한다. 실제 데이터 분포와 추정 데이터 분포의 결합확률분포 중에서 두 분포의 거리 기대값을 가 장 작게 추정하는 거리 계산식이다. 일반적인 다른 거리 계산식은 두 분포가 같아지는, 즉 겹치는 경우에 0의 값을 계산하며, 반대의 경우에는 무한대 또는 상수로 극단적인 거리값의 결과로 학습에 어려움이 발생하는데, 와서스테인 거리는 두 경우에 일정한 값(θ)을 유지하므로 학습에 용이하다. 와서스테인 거리를 손실함수로 사 용하기 위해서는 미분가능해야 하므로 두 점 사이의 거리를 일정 비 이상으로 증가시키지 않는 조건을 추가해야 한다. 이를 립쉬쯔(Lipschitz) 조건이라 한다. 하기 수학식 3은 립쉬쯔 조건이 추가된 와서스테인 손실함수와 WGAN의 구조를 보여준다. [수학식 3]"}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 4, "content": "이 경우, WGAN은 판별자(discriminator)를 'critic' 용어로 사용한다. 와서스테인의 손실함수에 학습의 속도 향상을 위해 학습의 범위에 제한을 두는 구배형(gradient penalty)를 추 가한 것이 iWGAN 모델이다. 다음 수학식 4의 오른쪽에 작성된 ‘Our gradient penalty’수식이 구배형 (gradient penalty)를 나타낸다. [수학식 4]"}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 5, "content": "ResNet은 2015년에 Kaiming He에 의해 잔재 학습(Residual Learning)이란 이름으로 소개되었으며, 152 층들의 깊은 신경망구조를 가지고 있으며 네트워크 내부에는 바로가기 연결(Shortcut Connection) 및 아이덴티티 매핑 (Identity mapping)을 적용하여 망이 깊어질 때 발생하는 소실/폭발 경사(vanishing/exploding gradient)와 에 러가 증가하는 상황을 개선했다는 점에 큰 의의가 있는 네트워크 구조이다. 이미지 분류뿐만 아니라 측위 (localization)와 인식(detection)에도 우수한 성능을 보이는 구조이다. 도 6a 및 도 6b는 일반 CNN 네트워크 구조와 ResNet 네트워크 구조의 차이를 보여주는 도면들이다. 도 6a 및 도 6b를 참조하면, ResNet은 입력에서 출력으로 바로 연결되는 바로가기 연결(스킵 구조)의 추가로 깊은 신경망의 학습이 가능하고, 몇 개의 층들을 건너뛰면서 입력과 출력이 연결되기 때문에 전진 경로(forward path) 및 후방 경로(backward path)가 단순해지는 효과를 얻을 수 있다. 본 실시예에서는 기본 ResNet 구조를 로고의 다양성 및 분류된 라벨의 조건에 적합한 생성을 위해 조건을 추가 한 네트워크 구조로 재구성하여 사용한다. 도 7a 내지 도 7c은 ResNet 네트워크 구조가 적용된 생성자 및 판별 자 네트워크의 전체 잔재 블록(Residual Block) 형태를 보여주는 도면이다. 특히 도 7c를 참조하면, 차원 확대 (up)과 차원 축소(down) 표시가 없는 층(layer)에서는 기본 ResNet 구조를 적용한다. 마지막으로, LC는 판별자와 생성자의 모든 층에 라벨(condition) 정보를 전달하여 네트워크 가중치(network weight)가 라벨에 대한 정보를 학습할 수 있도록 유도하는 구조이다. 본 실시예에서는 분류된 라벨 수만큼의 차 원을 각 층에 추가하여 학습한다. 한편, 선택적으로 생성된 로고 이미지에 보간법(Interpolation)과 단순화(Simplification)을 적용하여 다양한 합성 이미지를 생성하는 것을 더 포함할 수 있다(S1130). 보간법 모델은 생성 결과물에 선형보간법을 이용하여 합성하며, 단순화(Simplification) 모델은 생성 결과물에 Mean-Shift 알고리즘을 적용하여 이미지 분할을 적용하여 단순화를 시킨 합성모델이다. 보간법 모델은 생성자(G)에서 생성된 최종결과물의 잠재공간(latent space, z)에서 두 지점 사이의 보간을 통해 같은 라벨 또는 다른 라벨 간 로고의 부드러운 이미지변형을 수행한다. 이는 잠재공간 내의 의미 있는, 즉 특정 한 방향을 탐색할 수 있도록 조정이 가능한 방법이다. 본 실시예에서는 선형법을 이용하여 내삽(Interpolatio n)을 한다. 로고는 기업 또는 상품의 구체적인 전체를 대표하는 상징으로 명확성과 간결성을 가지는 특징을 가지도록 생성 된 결과물 또는 기존 로고나 사진 등의 복잡한 이미지를 단순화시킨 새로운 로고생성을 통해 다양화를 시도한다. 이 경우, 중심이 되는 알고리즘은 민-쉬프트(Mean-Shift) 알고리즘으로, 어떤 데이터 분포의 무게중 심을 찾는 한 방법으로, 중심점을 밀도가 밀집된 방향으로 이동시키는 알고리즘이다. 영상의 개체추적 및 인식, 분할(segmentation), 및 클러스터링(clustering) 등에 사용된다. 본 실시예에서는 적용분야 중 분할에 사용되는 민-쉬프트 세그멘테이션(Mean-Shift Segmentation) 알고리즘을 기반으로 구현한다. 즉, 복잡한 이미지를 데이터 가 밀집된 부분들로 분할시켜 이미지를 단순화시키는 분할기법을 적용한다. 이하에서는 뼈대를 기반으로 픽셀간(pixel to pixel) 모델을 활용하여 상기 로고 이미지를 생성하는 'Skeletonized2Logo 모델'에 대하여 설명하기로 한다. 도 8은 본 발명의 일 실시예에 따른 로고 생성 방법에서 로고 이미지를 생성하는 방법을 설명하는 순서도이다. 도 8을 참조하면, Skeletonized2Logo 모델에서는 로고 이미지 생성을 위해 각 로고 이미지마다 라벨 정의하는 단계에서 이미지에 라벨을 정의하지 않아도 된다. 대신 사용자가 그린 뼈대(skeleton) 이미지가 필요한 모델이 다(S1200). Skeletonized2Logo 모델은 이미지를 뼈대로 변환하는 문제와 관련된 디지털 이미지 처리 기법 연구에 착안하여 그 역변환 기법을 적용한 로고생성에 대한 픽셀 투 픽셀 (pix2pix) 모델 기반의 생성모델이다(S1210). 단순한 뼈대로부터 다양한 이미지를 생성해낼 수 있게 된다면 사용자가 원하는 방향의 로고생성이 쉬워지고, 디자인 작 업시간을 단축하는 효과를 얻을 수 있다. 전술한 바와 같이, Skeletonized2Logo 모델의 기본 모델로는 픽셀 투 픽셀 모델을 활용한다. 도 9는 본 발명의 일 실시예 따른 Skeletonized2Logo 모델을 설명하기 위한 모식도이다. 도 9을 참조하면, 픽셀 투 픽셀 모델을 대립 손실(adversarial loss) 및 지각적 손실(perceptual loss)을 포함한다. 또한, 픽셀간 모델은 잔여 블록 (Residual Block(ResNet))을 적용하여 차원축소(Down)와 차원확장(Up)의 과정을 거쳐 로고를 생성하는 생성자, 입력 이미지 데이터를 쌍으로 가지며 상기 이미지에 대해 연관성을 가지는 부분이미지 (patch)로 진짜와 가짜를 판별하도록 구성되는 메인 판별자, 및 입력 이미지 데이터를 단일로 가지며, 부분이미지가 아닌 기존의 전체이 미지로 진짜와 가짜를 판별하도록 구성되는 보조 판별자를 포함할 수 있다. 따라서, 메인 판별자와 보조 판별자 를 두어 학습의 안정화 및 이미지의 진짜와 가짜를 판별하는 성능을 향상시킨다. 우선, 픽셀 투 픽셀은 이미지를 다른 이미지로 변환시키는 모델의 일종으로써, 입력데이터가 쌍데이터(paired image)로 구성된다. 예를 들어 흑백과 컬러이미지를 쌍으로 학습시키면, 흑백이미지를 컬러이미지로 변환시키는 결과를 얻을 수 있다. 픽셀 투 픽셀의 손실함수는 L1 함수를 추가하여 대상이 되는 이미지와 거의 유사한 결과 가 나올 수 있도록 재현 손실(Reconstruction Loss)이 생성자 모델의 학습에 추가되고, 다음 수학식 5와 같다. 이때, L1 함수는 맨하턴거리와 유사한 두 점 사이의 거리 차의 절댓값이다. [수학식 5] 도 10은 본 발명의 일 실시예에 따른 픽셀 투 픽셀 구조를 설명하는 도면이다. 도 10을 참조하면, 픽셀 투 픽셀 의 구조에서, 생성자(G)는 입력값을 랜덤노이즈인 z 뿐만 아니라 실제 이미지인 x를 쌍으로 하여 학습을 시키고, 판별자(D)는 타겟(target)이 되는 y와 실제 이미지 x가 쌍인 입력값으로 판별하는 학습을 시킨다. 예를 들어 흑백이미지와 컬러이미지가 동일한 이미지인지에 대한 판별이라면 흑백이미지가 x, 컬러이미지가 y가 되어 학습한다. 생성자에서는 U-Net을 적용하고, U-Net은 건너뛰기 연결(skip-connection) 구조를 가지고 있으며, 이 구조는 축 소 경로(contracting path)의 정보를 확장 경로(expanding path)에 연결함으로써 손실된 정보를 보강한다. 도 11은 본 발명의 일 실시예에 따른 U-Net 구조를 설명하기 위한 도면이며, 도 11에서 왼쪽에서 오른쪽으로의 회 색선이 정보손실을 보강하는 정보 연결선(skip connection)이다. 이미지를 줄여나가는 축소 경로(contracting path)에서는 3x3 컨볼루션(convolution)을 사용하며, 확장 경로(expanding path)에서는 2x2 업 컨볼루션(up convolution)을 사용하고, 같은 계층 내에서는 3x3 컨볼루션(convolution)을 사용한다. 판별자는 PatchGAN을 적용하고, 기존 GAN의 판별자는 이미지 전체를 보고 진짜와 가짜를 구별한다. 이미지 전체에 대한 손실을 구하 기 때문에 흐릿한(blurry) 결과를 얻을 확률이 높다. 따라서 생성자가 만든 가짜 이미지에 대해 연관성을 가지 는 부분 이미지(patch)들로 진짜와 가짜를 판별할 수 있다. 기존의 GAN은 한 개의 수치(one scalar)를 판별자의 결과로 생성하는 반면에 PatchGAN은 NxN 배열형태의 결과를 생성하되, 여기서 N는 부분 이미지(patch)의 수이다. 도 12는 본 발명의 일 실시예에 따른 픽셀 투 픽셀에서 PatchGAN의 개념을 보여주는 도면이며, 도 12를 참조하면, 픽셀 투 픽셀 모델은 영상변환의 범용 프레임워크를 제공하며, U-Net과 PatchGAN의 적용은 결과적으로 연산속도가 빠르고, 선명하고, 실사와 동일한 이미지를 생성 하는 장점이 있다. 다양한 로고생성을 위해 데이터 확대(Augmentation) 전처리 과정을 거친 후, 두 개의 판별자 모델을 학습시키고, 한 개의 생성자 모델을 학습시킨다. 데이터 확대(Augmentation)는 기존 로고 이미지에 크기조절 (Resize), 뒤집기(Flip), 회전(Rotate) 및 전단(기울기)변환(Shear mapping)을 적용한다. 메인 판별자는 입력 데이터를 쌍(pair)으로 하며, patchGAN을 적용한다. 보조 판별자는 입력데이터를 단일(single)로 하며, 전체 이 미지를 대상으로 진짜와 가짜를 판별하는 구조를 적용한다. 손실함수는 기본 대립 손실(adversarial loss)에 지 각적 손실(perceptual loss)를 추가하여 구성한다. 적용한 손실함수는 하기 수학식 6와 같다. [수학식 6]"}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 6, "content": "지각적 손실(perceptual loss)은 사전 학습된 CNN의 숨겨진 특징들(hidden features) 간의 차이로 정의된다. VGG-19를 활용하여 숨겨진 특징들 간의 L2 손실을 사용한다. VGG54는 VGG-19를 최대 풀링 층(Max Pooling Layer)의 기준으로 5개의 블록(block)으로 나누었을 때, 5번째 블록의 마지막 ReLU 활성층(Activation Layer) 의 아웃풋(output)을 활용한 모델을 의미한다. 도 13a 내지 도 13c는 본 발명의 일 실시예에 따른 픽셀 투 픽셀 모델의 생성자, 메인 판별자, 및 보조 판별자 구조를 설명하는 도면들이다. 도 13a 내지 도 13c를 참조하면, 생성자는 잔재 블록(Residual Block(ResNet))을 적용하여 차원축소(Down)와 차원확장(Up)의 과정을 거쳐 로고를 생성한다. 메인 판별자는 입력은 쌍으로 구성되 는 이미지이며, 이미지에 대해 연관성을 가지는 부분 이미지(patch)로 진짜와 가짜를 판별하도록 구성한다. 보 조 판별자는 입력은 단일로 구성한 이미지이며, 부분이미지가 아닌 기존의 전체이미지로 진짜와 가짜를 판별하 도록 구성한다. 한편, 선택적으로 생성된 로고 이미지에 보간법(Interpolation)과 단순화(Simplification)을 적용하여 다양한 합성 이미지를 생성하는 것을 더 포함할 수 있다(S1220). 이에 대한 설명은 전술한 것과 동일하여 상세한 설명 을 생략하기로 한다.다시 도 1을 참조하여, 로고의 벡터화 모델을 구축하는 방법을 이하에서 상세하게 설명하기로 한다. 픽셀 (pixel) 단위로 이루어진 이미지를 벡터(vector)화하는 과정으로 픽셀로 이루어진 이미지(Raster Image)는 크기 에 변화가 생기면 픽셀공간이 변형되어 이미지 정보의 손실이 발생하므로 라인(line)과 곡선(curve) 등의 속성 으로 정의되어 크기 변환 등에 자유로운 벡터 이미지로의 변환이 필요하다. 래스터 이미지(Raster Image)에서 벡터 이미지로 변환하는 대표적인 방법으로는 트레이싱(Tracing)이 있다. 트레이싱(Tracing)은 대고 그린다의 의미가 있는 작업으로 원본의 투명도를 낮추고 그 위에 대고 따라 그리는 동작을 말한다. 대부분 선(외곽선)만 따라 그리나, 색을 스포이드로 집어다 쓰는 색 트레이싱도 있으며, 일부만 따라 그리거나, 변경해서 사용하는 등의 부분 트레이싱도 존재한다. 다각형 기반 트레이싱(Polygon-based tracing) 알고리즘을 적용한 대표적인 벡터화 프로그램인 Potrace가 있으며, 본 실시예에서는 픽셀이미지를 벡 터이미지로 변환하는 모듈을 개발하기 위하여 Potrace 알고리즘을 위한 파시썬(python) 프로그래밍 언어 바인딩 인 PyPotrace를 사용한다. 그러나 PyPotrace은 흑백만 지원하는 한계를 가지고 있어 본 실시예에서는 컬러 (color)지원 알고리즘을 추가한다. 다음은 본 실시예에 따른 컬러 이미지 벡터화 알고리즘(color image vectorization algorithm)을 설명하기로 한다. 도 14는 본 발명의 일 실시예에 따른 컬러 이미지 벡터화 알고리즘을 설명하기 위한 순서도이다. 도 14를 참조하면, 전처리과정으로 생성된 결과물은 64x64의 저해상도 이미지이므로, 색상의 선명도 등의 성능향상을 위 해 128x128의 이미지로 초해상(super resolution)을 시킨 후 알고리즘을 적용한다. 우선, K-means 클러스터링 (clustering)을 사용하여 색깔 별 클러스터링한 후(S210), 클러스터의 중심 색상(centroid color)을 구하고 (S220), 중심 색상을 기준으로 이미지 층(image layer)을 분리한다(S230). 각 이미지 층 별 트레이싱을 수행 (Pypotrace 적용)한다(S240). 생성된 벡터(vector) 결과에 중심 색상을 부여하고(S250), 생성된 결과물을 합친 다(merge) (S260)."}
{"patent_id": "10-2020-0042125", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 7, "content": "이상, 첨부된 도면을 참조하여 본 발명의 실시 예를 설명하였지만, 본 발명이 속하는 기술분야에서 통상의 지식 을 가진 자는 본 발명이 그 기술적 사상이나 필수적인 특징을 변경하지 않고서 다른 구체적인 형태로 실시될 수 있다는 것을 이해할 수 있을 것이다. 그러므로 이상에서 기술한 실시 예에는 모든 면에서 예시적인 것이며 한정 적이 아닌 것으로 이해해야만 한다. 또한, 상술한 로고 생성 방법은 적어도 프로세서(processor) 및/또는 메모리(memory)를 포함하고, 로고 생성 장 치로 명명될 수 있는 컴퓨팅 장치에 의해 수행될 수 있다. 즉, 상기 로고 생성 방법은 상기 컴퓨팅 장치에 포함 된 프로세서의 동작을 의미할 수도 있다."}
{"patent_id": "10-2020-0042125", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 로고 생성 방법을 설명하기 위한 순서도이다. 도 2는 본 발명의 일 실시예에 따른 GAN를 설명하기 위한 블록도이다. 도 3은 본 발명의 일 실시예에 따른 로고 생성 방법에서 로고 이미지를 생성하는 방법을 설명하는 순서도이다. 도 4는 본 발명의 일 실시예에 따른 군집화를 설명하기 위한 도면이다. 도 5는 본 발명의 일 실시예에 따른 분류를 설명하기 위한 도면이다. 도 6a 및 도 6b는 일반 CNN 네트워크 구조와 ResNet 네트워크 구조의 차이를 보여주는 도면들이다. 도 7a 내지 도 7c은 ResNet 네트워크 구조가 적용된 생성자 및 판별자 네트워크의 전체 잔재 블록(Residual Block) 형태를 보여주는 도면이다. 도 8은 본 발명의 일 실시예에 따른 로고 생성 방법에서 로고 이미지를 생성하는 방법을 설명하는 순서도이다. 도 9는 본 발명의 일 실시예 따른 Skeletonized2Logo 모델을 설명하기 위한 모식도이다. 도 10은 본 발명의 일 실시예에 따른 픽셀 투 픽셀 구조를 설명하는 도면이다. 도 11은 본 발명의 일 실시예에 따른 U-Net 구조를 설명하기 위한 도면이다. 도 12은 본 발명의 일 실시예에 따른 픽셀 투 픽셀에서 PatchGAN의 개념을 보여주는 도면이다. 도 13a 내지 도 13c는 본 발명의 일 실시예에 따른 픽셀 투 픽셀 모델의 생성자, 메인 판별자, 및 보조 판별자 구조를 설명하는 도면들이다. 도 14는 본 발명의 일 실시예에 따른 컬러 이미지 벡터화 알고리즘을 설명하기 위한 순서도이다."}
