{"patent_id": "10-2020-0111838", "section": "특허_기본정보", "subsection": "특허정보", "content": {"공개번호": "10-2022-0030081", "출원번호": "10-2020-0111838", "발명의 명칭": "전자장치 및 그 제어방법", "출원인": "삼성전자주식회사", "발명자": "이정우"}}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_1", "content": "전자장치에 있어서,제1어플리케이션의 코드가 저장되는 제1저장부; 제2저장부; 및상기 제1저장부에 저장된 상기 제1어플리케이션의 코드를 상기 제2저장부에 로드하여 상기 제1어플리케이션을실행하고,상기 제1어플리케이션의 실행 중에 상기 제1어플리케이션의 코드 중 제2어플리케이션의 실행과 연관된 코드에기초하여 상기 제2어플리케이션의 실행을 제어하는 프로세서를 포함하며,상기 제1저장부에 저장되는 제1어플리케이션의 코드 중 상기 제2어플리케이션의 실행과 연관된 코드는 상기 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드를 포함하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_2", "content": "제1항에 있어서, 상기 프로세서는, 상기 제2저장부에 로드된 상기 제1어플리케이션의 코드를 실행하여 상기 제2어플리케이션의 항목을 디스플레이에 표시하고,사용자입력에 의한 상기 항목의 선택에 따라 상기 제2어플리케이션의 실행을 제어하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_3", "content": "제1항에 있어서, 상기 컴파일된 코드는, 제1코드이고,컴파일되지 않은 상기 제1어플리케이션의 제2코드에 기초하여 상기 제1어플리케이션의 실행을 개시하고, 상기 제2코드에 기초하여 상기 제2어플리케이션의 메타정보를 로드하고, 상기 로드된 메타정보에 기초하여 상기 제2코드 중 상기 제2어플리케이션의 실행과 연관된 코드를 컴파일하는사전 과정을 통해 획득되는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_4", "content": "제1항에 있어서, 상기 프로세서는, 상기 제2어플리케이션과 다른 제3어플리케이션을 상기 제1어플리케이션의 실행 중에 상기 제3어플리케이션의 실행이 제어되는 새로운 어플리케이션으로 추가하고, 상기 추가된 제3어플리케이션의 메타정보에 기초하여 상기 제1어플리케이션의 코드를 업데이트하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_5", "content": "제4항에 있어서, 인터페이스부를 더 포함하고,상기 프로세서는, 상기 제3어플리케이션의 메타정보를 획득할 수 있는 참조정보가 서버로 전송되도록 상기 인터공개특허 10-2022-0030081-3-페이스부를 제어하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_6", "content": "제5항에 있어서, 상기 프로세서는, 상기 서버로부터 상기 제3어플리케이션의 메타정보에 기초하여 업데이트된 상기 제1어플리케이션의 코드를 수신하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_7", "content": "전자장치에 있어서,외부장치와 연결될 수 있는 인터페이스부; 및컴파일되지 않은 제1어플리케이션의 제1코드에 기초하여 제1어플리케이션의 실행을 개시하고, 상기 제1코드에 기초하여 제2어플리케이션의 메타정보를 로드하고, 상기 로드된 메타정보에 기초하여 상기 제1코드를 컴파일하여 생성된 상기 제1어플리케이션의 제2코드를 저장하고,상기 저장된 제1어플리케이션의 제2코드를 상기 인터페이스부를 통하여 상기 외부장치에 전송하도록 제어하는프로세서를 포함하며,상기 제2코드 중 상기 제2어플리케이션의 실행과 연관된 코드는 상기 제2어플리케이션의 메타정보에 기초하여컴파일된 코드를 포함하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_8", "content": "제7항에 있어서, 상기 프로세서는, 상기 제2어플리케이션의 메타정보에 관한 참조정보를 상기 외부장치로부터 수신하고,상기 수신된 참조정보에 기초하여 상기 제2어플리케이션의 메타정보를 로드하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_9", "content": "제8항에 있어서, 상기 프로세서는, 상기 참조정보에 기초하여 상기 제1코드에 포함된 상기 제2어플리케이션의 메타정보를 로드하기 위한 코드 또는상기 대응하는 코드의 상기 제1코드 중 구간을 식별하고, 상기 식별된 코드 또는 상기 식별된 구간의 코드를, 상기 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드 또는 코드 구간으로 대체하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "청구범위", "subsection": "청구항", "claim_number": "청구항_10", "content": "제7항에 있어서, 상기 프로세서는, 상기 제1어플리케이션의 실행 중에 제3어플리케이션의 실행이 제어되는 상기 제3어플리케이션이 새로운 어플리케이션으로 추가되도록 상기 제3어플리케이션의 메타정보에 기초하여 상기 제1어플리케이션의 제2코드를 업데이트하고,상기 업데이트된 제1어플리케이션의 제2코드가 상기 외부장치로 전송되도록 상기 인터페이스부를 제어하는 전자장치."}
{"patent_id": "10-2020-0111838", "section": "발명의_설명", "subsection": "요약", "paragraph": 1, "content": "본 발명은 제1어플리케이션의 실행 중에 제1어플리케이션의 코드 중 제2어플리케이션의 실행과 연관된 코드에 기 초하여 제2어플리케이션의 실행을 제어하며, 제1어플리케이션의 제1코드 중 제2어플리케이션의 실행과 연관된 코 드는 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드 포함하는 전자장치에 관한 발명이다."}
{"patent_id": "10-2020-0111838", "section": "발명의_설명", "subsection": "기술분야", "paragraph": 1, "content": "본 발명은 전자장치 및 그 제어방법에 관한 것으로서, 상세하게는, 플러그인 어플리케이션을 동적으로 로드하는 전자장치 및 그 제어방법에 관한 것이다."}
{"patent_id": "10-2020-0111838", "section": "발명의_설명", "subsection": "배경기술", "paragraph": 1, "content": "플러그인 아키텍처(Plug-in Architecture)는 플러그인 어플리케이션을 활용하여 메인 어플리케이션의 기능을 확 장 가능하게 하는 소프트웨어 설계기법이다. 플러그인 아키텍처는 이러한 확장성에 기반하여 추가 기능의 활용 이 요구되는 시스템, 어플리케이션 등에 널리 적용되고 있다. 메인 어플리케이션은 플러그인 어플리케이션의 기능을 활용하기 위해 플러그인 모듈을 이용한다. TV의 경우를 예로 들면, TV는 메인 어플리케이션의 실행 중 플러그인 모듈을 로드하고, 로드된 플러그인 모듈에 기초하여 컴 파일을 수행한다. 플러그인 모듈은 메인 어플리케이션과 플러그인 어플리케이션 간의 데이터 통신이 가능하게 하므로, TV는 메인 어플리케이션의 실행 중 로드된 플러그인 모듈에 기초하여 컴파일된 코드에 기초하여 플러그 인 어플리케이션의 실행을 제어한다. 즉, TV는 플러그인 어플리케이션의 기능을 활용할 수 있다. 다만 메인 어플리케이션의 실행 중 플러그인 모듈이 로드되고, 로드된 플러그인 모듈에 기초하여 코드에 대한 컴파일이 수행되기 때문에, 메인 어플리케이션의 실행 속도가 저하될 수 있다. 이러한 실행 속도 저하는 앞서 언급한 플러그인 아키텍처의 뛰어난 확장성에도 불구하고, 플러그인 아키텍처에 대한 활용성을 저하시키는 요인 이 되고 있다. 따라서 플러그인 아키텍처 구현 시 메인 어플리케이션의 실행 속도를 향상시킴으로써, 플러그인 아키텍처의 확 장성과 함께 활용성을 향상시킬 수 있는 방안이 절실히 요구되고 있다."}
{"patent_id": "10-2020-0111838", "section": "발명의_설명", "subsection": "해결하려는과제", "paragraph": 1, "content": "본 발명의 목적은, 플러그인 아키텍처 구현 시 메인 어플리케이션의 실행 속도를 향상시킴으로써, 플러그인 아 키텍처의 확장성과 함께 향상된 활용성을 제공할 수 있는 전자장치 및 그 제어방법을 제공하는 것이다."}
{"patent_id": "10-2020-0111838", "section": "발명의_설명", "subsection": "과제의해결수단", "paragraph": 1, "content": "상기한 본 발명의 목적은, 제1어플리케이션의 코드가 저장되는 제1저장부; 제2저장부; 및 상기 제1저장부에 저 장된 상기 제1어플리케이션의 코드를 상기 제2저장부에 로드하여 상기 제1어플리케이션을 실행하고, 상기 제1어 플리케이션의 실행 중에 상기 제1어플리케이션의 코드 중 제2어플리케이션의 실행과 연관된 코드에 기초하여 상 기 제2어플리케이션의 실행을 제어하는 프로세서를 포함하며, 상기 제1저장부에 저장되는 제1어플리케이션의 코 드 중 상기 제2어플리케이션의 실행과 연관된 코드는 상기 제2어플리케이션의 메타정보에 기초하여 컴파일된 코 드를 포함하는 전자장치에 의해 달성될 수 있다. 상기 프로세서는, 상기 제2저장부에 로드된 상기 제1어플리케이션의 코드를 실행하여 상기 제2어플리케이션의 항목을 디스플레이에 표시하고, 사용자입력에 의한 상기 항목의 선택에 따라 상기 제2어플리케이션의 실행을 제 어할 수 있다. 상기 컴파일된 코드는, 제1코드이고, 컴파일되지 않은 상기 제1어플리케이션의 제2코드에 기초하여 상기 제1어 플리케이션의 실행을 개시하고, 상기 제2코드에 기초하여 상기 제2어플리케이션의 메타정보를 로드하고, 상기 로드된 메타정보에 기초하여 상기 제2코드 중 상기 제2어플리케이션의 실행과 연관된 코드를 컴파일하는 사전 과정을 통해 획득될 수 있다. 상기 프로세서는, 상기 제2어플리케이션과 다른 제3어플리케이션을 상기 제1어플리케이션의 실행 중에 상기 제3 어플리케이션의 실행이 제어되는 새로운 어플리케이션으로 추가하고, 상기 추가된 제3어플리케이션의 메타정보 에 기초하여 상기 제1어플리케이션의 코드를 업데이트할 수 있다. 인터페이스부를 더 포함하고, 상기 프로세서는, 상기 제3어플리케이션의 메타정보를 획득할 수 있는 참조정보가 서버로 전송되도록 상기 인터페이스부를 제어할 수 있다. 상기 프로세서는, 상기 서버로부터 상기 제3어플리케이션의 메타정보에 기초하여 업데이트된 상기 제1어플리케 이션의 코드를 수신할 수 있다. 상기한 본 발명의 목적은, 외부장치와 연결될 수 있는 인터페이스부; 및 컴파일되지 않은 제1어플리케이션의 제 1코드에 기초하여 제1어플리케이션의 실행을 개시하고, 상기 제1코드에 기초하여 제2어플리케이션의 메타정보를 로드하고, 상기 로드된 메타정보에 기초하여 상기 제1코드를 컴파일하여 생성된 상기 제1어플리케이션의 제2코 드를 저장하고, 상기 저장된 제1어플리케이션의 제2코드를 상기 인터페이스부를 통하여 상기 외부장치에 전송하 도록 제어하는 프로세서를 포함하며, 상기 제2코드 중 상기 제2어플리케이션의 실행과 연관된 코드는 상기 제2 어플리케이션의 메타정보에 기초하여 컴파일된 코드를 포함하는 전자장치에 의해서도 달성될 수 있다. 상기 프로세서는, 상기 제2어플리케이션의 메타정보에 관한 참조정보를 상기 외부장치로부터 수신하고, 상기 수 신된 참조정보에 기초하여 상기 제2어플리케이션의 메타정보를 로드할 수 있다. 상기 프로세서는, 상기 참조정보에 기초하여 상기 제1코드에 포함된 상기 제2어플리케이션의 메타정보를 로드하 기 위한 코드 또는 상기 대응하는 코드의 상기 제1코드 중 구간을 식별하고, 상기 식별된 코드 또는 상기 식별 된 구간의 코드를, 상기 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드 또는 코드 구간으로 대체할 수 있다. 상기 프로세서는, 상기 제1어플리케이션의 실행 중에 제3어플리케이션의 실행이 제어되는 상기 제3어플리케이션 이 새로운 어플리케이션으로 추가되도록 상기 제3어플리케이션의 메타정보에 기초하여 상기 제1어플리케이션의 제2코드를 업데이트하고, 상기 업데이트된 제1어플리케이션의 제2코드가 상기 외부장치로 전송되도록 상기 인터 페이스부를 제어할 수 있다."}
{"patent_id": "10-2020-0111838", "section": "발명의_설명", "subsection": "발명의효과", "paragraph": 1, "content": "본 발명에 의하면, 플러그인 아키텍처 구현 시 메인 어플리케이션의 실행 속도를 향상시킴으로써, 플러그인 아 키텍처의 확장성과 함께 향상된 활용성을 제공할 수 있는 전자장치 및 그 제어방법을 제공한다."}
{"patent_id": "10-2020-0111838", "section": "발명의_설명", "subsection": "발명을실시하기위한구체적인내용", "paragraph": 1, "content": "이하에서는 첨부도면을 참조하여 본 발명에 따른 실시예들에 관해 상세히 설명한다. 이하 실시예들의 설명에서 는 첨부된 도면들에 기재된 사항들을 참조하는 바, 각 도면에서 제시된 동일한 참조번호 또는 부호는 실질적으 로 동일한 동작을 수행하는 구성요소를 나타낸다. 본 명세서에서의 복수의 구성 중 적어도 하나(at least one) 는, 복수의 구성 전부뿐만 아니라, 복수의 구성 중 나머지를 배제한 각 하나 혹은 이들의 조합 모두를 지칭한다. 도 1은 본 발명의 일 실시예에 따른 전자장치를 도시한다. 도 1에 도시된 바와 같이, 전자장치는 TV, 태블릿, 휴대용 미디어 플레이어, 웨어러블 디바이스, 비디오 월, 전자액자 등과 같이 영상표시장치뿐만 아니라, 디스플레이를 구비하지 않는 셋탑박스 등의 영상처리장치, 냉장고, 세탁기 등의 생활가전, 컴퓨터본체와 같은 정보처리장치 등 다양한 종류의 장치로 구현될 수 있다. 또 한, 전자장치는 인공지능 기능을 탑재한 인공지능(Artificial Intelligence, AI) 스피커, AI 로봇 등으로 구현될 수 있다. 다만, 전자장치의 종류는 이에 한정되는 것은 아니지만, 이하에서는 설명의 편의를 위해 전자장치가 TV로 구현되는 경우를 가정한다. 전자장치는 플러그인 아키텍처를 제공한다. 플러그인 아키텍처는 제1어플리케이션에 플러그인 된 제2어 플리케이션의 기능을 활용함으로써, 제1어플리케이션의 기능을 확장하기 위한 소프트웨어 설계기법이다. 여기서 제1어플리케이션은 호스트 기능을 수행하는 코어 어플리케이션 또는 메인 어플리케이션이며, 제2어플 리케이션은 코어 어플리케이션 또는 메인 어플리케이션에 플러그인 되어 호스트 기능에 대하여 추가 기능을 제공하는 플러그인 어플리케이션을 포함한다. 일 예로, 제1어플리케이션이 동영상 제공 기능을 제공하는 경 우, 제1어플리케이션은 파일 확장 기능을 갖는 제2어플리케이션을 이용하여, 다양한 종류의 동영상 파일 을 처리하여 제공할 수 있다. 다른 예로, 제1어플리케이션이 이메일 기능을 제공하는 경우, 제1어플리케이션 은 제2어플리케이션의 보안 기능을 이용하여 이메일을 암호화한다. 제1어플리케이션은 동영상 제공 기 능 및 이메일 기능에 대해서 확장된 기능을 제공할 뿐만 아니라, 소프트웨어 개발 기능, 메뉴 표시 기능 등에 대해서도 확장된 기능을 제공할 수 있다. 제1어플리케이션은 각 기능 별로 복수 개로 마련될 수 있으며, 제2어플리케이션는 각 제1어플리케이션 별로 플러그인된 복수 개로 마련될 수 있다. 다만, 이하에서는 설명의 편의를 위해 하나의 제1어플리케이션 에 하나의 제2어플리케이션이 플러그인된 경우를 가정하여, 제1어플리케이션의 실행 중 제2어플리케이션 의 실행이 제어되는 과정에 대해 설명한다. 전자장치는 제1어플리케이션의 제1코드에 기초하여 제1어플리케이션을 실행한다. 제1코드는 제 1어플리케이션의 실행 이전에 마련된 것일 수 있다. 전자장치는 제1어플리케이션의 실행 중 제1어플 리케이션의 제1코드에 포함된 제2어플리케이션의 실행과 연관된 코드에 기초하여 제2어플리케이션 의 실행을 제어함으로써, 제2어플리케이션의 기능을 활용한다. 제1어플리케이션의 제1코드에 포함된 제2어플리케이션의 실행과 연관된 코드는 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드를 포함한다. 메타정보는 제1어플리케이션 및 제2어플리케이션을 기능적으로 연결하기 위한 정보로서, 제2어플리케이션에 대응하는 클래스 타입(class type), 방법(method), 특성(property) 등을 포함한다. 메타정보의 로드를 통해 제2어플리케이션은 제1어플리케이션에 플러그인 어플리케이션으로 설정 또는 추가될 수 있다. 제2어플리케이션이 플러그인 어플리케이션으로 설정 또는 추가 되면, 제2어플리케이션은 제1어플리케이션의 제어명령을 수신하고, 수신된 제어명령에 대응하는 처리결과 를 제1어플리케이션에 전달한다. 이와 같이, 전자장치는 제1어플리케이션의 실행 이전에 마련되는 제1코드에 기초하여 제1어플리케이 션을 실행하며, 제1코드에 포함된 제2어플리케이션의 실행과 연관된 코드로서, 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드에 기초하여 제2어플리케이션의 실행을 제어할 수 있으므로, 제1어플 리케이션의 실행 중 코드를 컴파일하여 제2어플리케이션의 실행을 제어하는 경우 대비 제1어플리케이션 의 실행 속도를 향상시킬 수 있다. 도 2는 도 1의 전자장치에 관한 구성의 일 예를 도시한다. 이하에서는 도 2를 참조하여, 전자장치의 구성에 관해 자세히 설명한다. 본 실시예서는 전자장치가 TV인 경우에 관해 설명하지만, 전자장치는 다양한 종류의 장치로 구현될 수 있으므로, 본 실시예가 전자장치의 구성을 한정하는 것은 아니다. 전자장치가 TV와 같은 디스플레이장 치로 구현되지 않는 경우도 가능하며, 이 경우의 전자장치는 디스플레이와 같은 영상 표시를 위한 구성 요소들을 포함하지 않을 수 있다. 예를 들면 전자장치가 셋탑박스로 구현되는 경우에, 전자장치는 인터 페이스부를 통해 외부의 TV에 영상 신호를 출력한다. 전자장치는 인터페이스부를 포함한다. 인터페이스부는 서버와 연결하여 데이터를 송수신한다. 인터페이스부는 유선 인터페이스부를 포함한다. 유선 인터페이스부는 지상파/위성방송 등 방송규격에 따른 방송신호를 수신할 수 있는 안테나가 연결되거나, 케이블 방송 규격에 따른 방송신호를 수신할 수 있는 케이블 이 연결될 수 있는 커넥터 또는 포트를 포함한다. 다른 예로서, 전자장치는 방송신호를 수신할 수 있는 안테나를 내장할 수도 있다. 유선 인터페이스부는 HDMI 포트, DisplayPort, DVI 포트, 썬더볼트, 컴포지트 (Composite) 비디오, 컴포넌트(Component) 비디오, 슈퍼 비디오(Super Video), SCART 등과 같이, 비디오 및/또 는 오디오 전송규격에 따른 커넥터 또는 포트 등을 포함한다. 유선 인터페이스부는 USB 포트 등과 같은 범용 데 이터 전송규격에 따른 커넥터 또는 포트 등을 포함한다. 유선 인터페이스부는 광 전송규격에 따라 광케이블이 연결될 수 있는 커넥터 또는 포트 등을 포함한다. 유선 인터페이스부는 외부 오디오 수신부 또는 오디오 수 신부을 구비한 외부 오디오기기가 연결되며, 오디오기기로부터 오디오신호를 수신 또는 입력할 수 있는 커넥 터 또는 포트 등을 포함한다. 유선 인터페이스부는 헤드셋, 이어폰, 외부 스피커 등과 같은 오디오기기가 연결 되며, 오디오기기로 오디오신호를 전송 또는 출력할 수 있는 커넥터 또는 포트 등을 포함한다. 유선 인터페이스 부는 이더넷 등과 같은 네트워크 전송규격에 따른 커넥터 또는 포트를 포함한다. 예컨대, 유선 인터페이스부는 라우터 또는 게이트웨이에 유선 접속된 랜카드 등으로 구현될 수 있다. 유선 인터페이스부는 상기 커넥터 또는 포트를 통해 셋탑박스, 광학미디어 재생장치와 같은 외부기기, 또는 외 부 디스플레이장치나, 스피커, 서버 등과 1:1 또는 1:N(N은 자연수) 방식으로 유선 접속됨으로써, 해당 외부기 기로부터 비디오/오디오신호를 수신하거나 또는 해당 외부기기에 비디오/오디오신호를 송신한다. 유선 인터페이 스부는, 비디오/오디오신호를 각각 별개로 전송하는 커넥터 또는 포트를 포함할 수도 있다. 유선 인터페이스부는 전자장치에 내장되거나, 동글(Dongle) 또는 모듈(Module) 형태로 구현되어 전자장치 의 커넥터에 착탈될 수도 있다. 인터페이스부는 무선 인터페이스부를 포함한다. 무선 인터페이스부는 전자장치의 구현 형태에 대응하여 다양한 방식으로 구현될 수 있다. 예를 들면, 무선 인터페이스부는 통신방식으로 RF(Radio Frequency), 지그비 (Zigbee), 블루투스(Bluetooth), 와이파이(Wi-Fi), UWB(Ultra-Wideband) 및 NFC(Near Field Communication) 등 무선통신을 사용한다. 무선 인터페이스부는 와이파이 방식에 따라서 AP와 무선통신을 수행하는 무선통신모듈 이나, 블루투스 등과 같은 1대 1 다이렉트 무선통신을 수행하는 무선통신모듈 등으로 구현될 수 있다. 무선 인 터페이스부는 네트워크 상의 서버와 무선 통신함으로써, 적어도 하나의 서버와의 사이에 데이터 패킷을 송 수신한다. 무선 인터페이스부는 적외선 통신규격에 따라 IR(Infrared) 신호를 송신 및/또는 수신할 수 있는 IR 송신부 및/또는 IR수신부를 포함한다. 무선 인터페이스부는 IR송신부 및/또는 IR수신부를 통해 리모컨 또는 다 른 외부기기로부터 리모컨신호를 수신 또는 입력하거나, 리모컨 또는 다른 외부기기로 리모컨신호를 전송 또는 출력한다. 다른 예로서, 전자장치는 와이파이, 블루투스 등 다른 방식의 무선 인터페이스부를 통해 리모컨 또는 다른 외부기기와 리모컨신호를 송수신한다. 전자장치는 인터페이스부를 통해 수신하는 비디오/오디오신호가 방송신호인 경우, 수신된 방송신호를 채널 별로 튜닝하는 튜너(Tuner)를 더 포함한다. 전자장치는 디스플레이를 포함한다. 디스플레이는 화면 상에 영상을 표시할 수 있는 디스플레이 패 널을 포함한다. 디스플레이 패널은 액정 방식과 같은 수광 구조 또는 OLED 방식과 같은 자발광 구조로 마련된다. 디스플레이는 디스플레이 패널의 구조에 따라서 부가적인 구성을 추가로 포함할 수 있는데, 예를 들면, 디스플레이 패널이 액정 방식이라면, 디스플레이는 액정 디스플레이 패널과, 광을 공급하는 백라이트 유닛과, 액정 디스플레이 패널의 액정을 구동시키는 패널구동기판을 포함한다. 다만, 디스플레이는 전자장 치가 셋탑박스 등으로 구현되는 경우 생략될 수 있다. 전자장치는 사용자입력부를 포함한다. 사용자입력부는 사용자의 입력을 수행하기 위해 사용자가 조 작할 수 있도록 마련된 다양한 종류의 입력 인터페이스 관련 회로를 포함한다. 사용자입력부는 전자장치 의 종류에 따라서 여러 가지 형태의 구성이 가능하며, 예를 들면 전자장치의 기계적 또는 전자적 버튼 부, 터치패드, 디스플레이에 설치된 터치스크린 등이 있다. 전자장치는 통신부를 포함한다. 통신부는 적어도 하나의 통신부로 구현될 수 있다. 통신부는 적어도 하나의 서버와 통신하는 제1통신부 및 서버 이외의 다른 외부 장치들과 연결되어 비디오/오디오 신 호를 전송하는 제2통신부를 포함한다. 통신부는 설계 방법에 따라 유선 인터페이스부 또는 무선 인터페이스 중 적어도 하나의 구성을 포함하며, 유선 인터페이스부 또는 무선 인터페이스 중 적어도 하나의 기능을 수행한 다. 전자장치는 출력부를 포함한다. 출력부가 오디오를 출력하는 오디오 출력부로 구현되는 경우, 출력 부는 적어도 하나 이상의 스피커로 구현될 수 있다. 출력부는 전자장치에 마련된 내부 스피커 또는 외부에 마련되는 외부 스피커로 구현될 수 있다. 출력부가 외부 스피커로 구현되는 경우, 전자장치는오디오신호를 외부 스피커로 유선 또는 무선으로 전송한다. 스마트폰 등에는 리모컨 어플리케이션이 설치될 수 있다. 스마트폰 등은 설치된 어플리케이션을 통해 리모컨의 기능, 예컨대, 전자장치를 제어한다. 이러한 리모컨 어플리케이션은 AI 스피커, AI 로봇 등 다양한 외부 장 치에 설치될 수 있다. 디스플레이, 사용자입력부, 출력부 등은 인터페이스부와 별도의 구성으로 기재되었으나, 설계 방법에 따라 인터페이스부에 포함되도록 구성될 수 있다. 전자장치는 저장부를 포함한다. 저장부는 디지털화된 데이터를 저장한다. 저장부는 제1저장부 및 제2저장부를 포함한다. 제1저장부는 전원의 제공 유무와 무관하게 데이터를 보존할 수 있는 비 휘발성 속성의 스토리지(storage)를 포함한다. 스토리지는 플래시메모리(flash-memory), HDD(hard-disc drive), SSD(solid-state drive), ROM(Read Only Memory) 등을 포함한다. 일 예로, 제1저장부에는 제1어플 리케이션 및 제2어플리케이션이 설치될 수 있다. 제2저장부는 프로세서에 의해 처리되기 위한 데이터 등이 로드 되며, 전원이 제공되지 않으면 데이터를 보존할 수 없는 휘발성 속성의 메모리(memory)를 포함한다. 메모리는 버퍼(buffer), 램(RAM; Random Access Memory) 등을 포함한다. 일 예로, 제2저장부에는 제1어플리케이션의 제1코드가 로드될 수 있다. 전자장치는 프로세서를 포함한다. 프로세서는 인쇄회로기판 상에 장착되는 CPU, 칩셋, 버퍼, 회로 등 으로 구현되는 하나 이상의 하드웨어 프로세서를 포함하며, 설계 방식에 따라서는 SOC(system on chip)로 구현 될 수도 있다. 프로세서는 전자장치가 디스플레이장치로 구현되는 경우에 디멀티플렉서, 디코더, 스케일 러, 오디오 DSP(Digital Signal Processor), 앰프 등의 다양한 프로세스에 대응하는 모듈들을 포함한다. 여기서, 이러한 모듈들 중 일부 또는 전체가 SOC로 구현될 수 있다. 예를 들면, 디멀티플렉서, 디코더, 스케일 러 등 영상처리와 관련된 모듈이 영상처리 SOC로 구현되고, 오디오 DSP는 SOC와 별도의 칩셋으로 구현되는 것이 가능하다. 프로세서는 제1저장부에 저장된 제1어플리케이션의 제1코드를 제2저장부에 로드하고, 로드된 제1코드에 기초하여 제1어플리케이션을 실행한다. 프로세서는 제1어플리케이션의 실행 중에 제1어플리케이션의 제1코드에 포함된 제2어플리케이션 의 실행과 연관된 코드에 기초하여 제2어플리케이션의 실행을 제어한다. 제1어플리케이션의 제1코드에 포함된 제2어플리케이션의 실행과 연관된 코드는 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드를 포함한다. 전자장치의 구성은 도 2에 도시된 바에 한정되는 것은 아니므로, 설계 방법에 따라 상기한 구성 중 일부를 제외하거나, 상기한 구성 이외의 구성을 포함한다. 이하에서는, 도 2를 참조하여 서버의 구성에 대해 자세히 설명한다. 서버는 서버인터페이스부를 포함한다. 앞서 설명한 바와 같이, 전자장치 및 서버는 인터페이스 부 및 서버인터페이스부를 통해 연결되어, 데이터를 송수신한다. 서버인터페이스부는 유선 인터페 이스부 및 무선 인터페이스부를 포함한다. 유선 인터페이스부 및 무선 인터페이스부에 대한 설명은 전자장치 에서 인터페이스부에 포함된 유선 인터페이스부 및 무선 인터페이스부에 대한 설명과 중복되므로 생략 하기로 한다. 서버는 서버통신부를 포함한다. 서버통신부는 적어도 하나의 통신부로 구현될 수 있다. 통신부(1 4)는 적어도 하나의 서버와 통신하는 제1통신부 및 서버 이외의 다른 외부 장치들과 연결되어 비디오/오디 오 신호를 전송하는 제2통신부를 포함한다. 통신부는 설계 방법에 따라 유선 인터페이스부 또는 무선 인터 페이스 중 적어도 하나의 구성을 포함하며, 유선 인터페이스부 또는 무선 인터페이스 중 적어도 하나의 기능을 수행한다. 서버는 서버사용자입력부를 포함한다. 서버사용자입력부는 사용자의 입력을 수행하기 위해 사용자 가 조작할 수 있도록 마련된 다양한 종류의 입력 인터페이스 관련 회로를 포함한다. 서버사용자입력부는 서 버의 종류에 따라서 여러 가지 형태의 구성이 가능하며, 예를 들면 서버의 기계적 또는 전자적 버튼부, 터치패드 등이 있다. 서버사용자입력부는 서버인터페이스부와 별도의 구성으로 기재되었으나, 설계 방 법에 따라 서버인터페이스부에 포함되도록 구성될 수 있다. 서버는 서버저장부를 포함한다. 서버저장부는 디지털화된 데이터를 저장한다. 서버저장부는 제 1서버저장부 및 제2서버저장부를 포함한다. 제1서버저장부는 전원의 제공 유무와 무관하게 데이터를 보존할 수 있는 비휘발성 속성의 스토리지를 포함한다. 스토리지는 플래시메모리, HDD, SSD, ROM 등을 포함한다. 제2서버 저장부는 서버프로세서에 의해 처리되기 위한 데이터 등이 로드 되며, 전원이 제공되지 않으면 데이터를 보 존할 수 없는 휘발성 속성의 메모리를 포함한다. 메모리는 버퍼, 램 등을 포함한다. 서버는 서버프로세서를 포함한다. 서버프로세서는 인쇄회로기판 상에 장착되는 CPU, 칩셋, 버퍼, 회 로 등으로 구현되는 하나 이상의 하드웨어 프로세서를 포함하며, 설계 방식에 따라서는 SOC(로 구현될 수도 있 다. 이하에서는 도 3을 함께 참조하여, 서버프로세서의 동작에 대해 간략히 설명한다. 서버프로세서는 컴파일 되지 않은 제1어플리케이션의 제2코드에 기초하여 제1어플리케이션의 실행을 개시한다. 서버프로세서는 제1어플리케이션의 제2코드에 기초하여 제2어플리케이션의 메타정보를 로드한다. 서버프로세서는 로드된 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드를 포함하는 제1어플리 케이션의 제1코드를 저장한다. 서버프로세서는 저장된 제1어플리케이션의 제1코드를 서버인터페이스부를 통하여 전자장치와 같은 외부장치에 전송하여, 전자장치로 하여금 제1어플리케이션의 실행 중 제1어플리케이션의 제1코 드에 포함된 제2어플리케이션의 실행과 연관된 코드에 기초하여 제2어플리케이션의 실행을 제어하도록 한다. 제1어플리케이션의 제1코드 중 제2어플리케이션의 실행과 연관된 코드는 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드를 포함한다. 서버의 구성은 도 2에 도시된 바에 한정되는 것은 아니므로, 설계 방법에 따라 상기한 구성 중 일부를 제외 하거나, 상기한 구성 이외의 구성을 포함한다. 전자장치의 프로세서 또는 서버의 서버프로세서는 상기한 동작들을 위한 데이터 분석, 처리, 및 결과 정보 생성 중 적어도 일부를 규칙 기반 또는 인공지능 알고리즘으로서 기계학습, 신경망 네트워크(Neural Network), 또는 딥러닝 알고리즘 중 적어도 하나를 이용하여 수행한다. 이하에서는 인공지능 동작 등과 관련하 여 전자장치의 프로세서 위주로 설명하지만, 서버의 서버프로세서도 동일한 인공지능 동작 등을 수행할 수 있음을 밝혀둔다. 일 예로, 프로세서는 학습부 및 인식부의 기능을 함께 수행한다. 학습부는 학습된 신경망 네트워크를 생성하 는 기능을 수행하고, 인식부는 학습된 신경망 네트워크를 이용하여 데이터를 인식(또는, 추론, 예측, 추정, 판 단)하는 기능을 수행한다. 학습부는 신경망 네트워크를 생성하거나 갱신한다. 학습부는 신경망 네트워크를 생성 하기 위해서 학습 데이터를 획득한다. 일 예로, 학습부는 학습 데이터를 저장부 또는 서버저장부로부터 획득하거나, 외부로부터 획득한다. 학습 데이터는, 신경망 네트워크의 학습을 위해 이용되는 데이터일 수 있으 며, 상기한 동작을 수행한 데이터를 학습데이터로 이용하여 신경망 네트워크를 학습시킬 수 있다. 학습부는 학습 데이터를 이용하여 신경망 네트워크를 학습시키기 전에, 획득된 학습 데이터에 대하여 전처리 작 업을 수행하거나, 또는 복수 개의 학습 데이터들 중에서 학습에 이용될 데이터를 선별한다. 일 예로, 학습부는 학습 데이터를 기 설정된 포맷으로 가공하거나, 필터링하거나, 또는 노이즈를 추가/제거하여 학습에 적절한 데 이터의 형태로 가공한다. 학습부는 전처리된 학습 데이터를 이용하여 상기한 동작을 수행하도록 설정된 신경망 네트워크를 생성한다. 학습된 신경망 네트워크는, 복수의 신경망 네트워크(또는, 레이어)들로 구성될 수 있다. 복수의 신경망 네트워 크의 노드들은 가중치를 가지며, 복수의 신경망 네트워크들은 일 신경망 네트워크의 출력 값이 다른 신경망 네 트워크의 입력 값으로 이용되도록 서로 연결될 수 있다. 신경망 네트워크의 예로는, CNN (Convolutional Neural Network), DNN (Deep Neural Network), RNN (Recurrent Neural Network), RBM (Restricted Boltzmann Machine), DBN (Deep Belief Network), BRDNN (Bidirectional Recurrent Deep Neural Network) 및 심층 Q-네 트워크 (Deep Q-Networks)과 같은 모델을 포함한다. 한편, 인식부는 상기한 동작을 수행하기 위해, 타겟 데이터를 획득한다. 타겟 데이터는 저장부 또는 서버저 장부로부터 획득하거나, 외부로부터 획득한다. 타겟 데이터는 신경망 네트워크의 인식 대상이 되는 데이터 일 수 있다. 인식부는 타겟 데이터를 학습된 신경망 네트워크에 적용하기 전에, 획득된 타겟 데이터에 대하여 전처리 작업을 수행하거나, 또는 복수 개의 타겟 데이터들 중에서 인식에 이용될 데이터를 선별한다. 일 예로,인식부는 타겟 데이터를 기 설정된 포맷으로 가공하거나, 필터링 하거나, 또는 노이즈를 추가/제거하여 인식에 적절한 데이터의 형태로 가공한다. 인식부는 전처리된 타겟 데이터를 신경망 네트워크에 적용함으로써, 신경망 네트워크로부터 출력되는 츨력값을 획득한다. 인식부는 출력값과 함께, 확률값 또는 신뢰도값을 획득한다. 도 3은 도 2의 프로세서 및 서버프로세서에 관한 구성의 일 예를 도시한다. 이하에서는 도 3를 참조하여, 프로세서 및 서버프로세서의 구성에 관해 자세히 설명한다. 프로세서는 프로파일링부를 포함한다. 프로파일링부는 제1어플리케이션의 제2코드 중 제2어 플리케이션의 메타정보를 동적으로 로드하기 위한 동적코드에 관한 정보를 획득한다. 제2코드는 컴 파일되지 않는 소스코드를 포함한다. 다만, 이에 한정되는 것은 아니므로, 제2코드는 사전적, 1차적 또는 중간적으로 컴파일되나, 아직 최종적으로 컴파일되지 않은 코드를 포함한다. 동적코드는 제1어플리케이션의 실행 중에 제2어플리케이션의 메타정보를 로드하기 위한 코드를 포함 한다. 일 예로, 동적코드는 리플렉션(reflection)과 같이 런타임(runtime)에 기반한 코드를 포함한다. 동적 코드는 동적코드 자체뿐만 아니라, 동적코드를 포함하는 코드 구간을 포함한다. 다만, 이하에서는 설명의 편의를 위해 동적코드로 통일하여 설명한다. 동적코드에 관한 정보는 동적코드 자체에 관한 정보뿐만 아니라, 제1어플리케이션의 제2코드 중 동적코드의 위치, 동적코드가 사용된 구간의 위치에 관한 정보가 포함될 수 있다. 다만, 이에 한정되는 것은 아니므로, 동적코드에 관한 정보는 콜트리(call tree)에 관한 정보를 포함한다. 프로세서는 최적화부를 포함한다. 최적화부는 프로파일링부에 의해 획득된 동적코드에 관한 정보에 기초하여 동적코드에 따라 제2어플리케이션의 메타정보를 로드하고, 로드된 제2어플리케이션 의 메타정보에 대응하는 결과코드를 획득한다. 결과코드는 식별된 동적코드에 따라 제2어플리케이션의 메타정보를 로드한 결과에 대하여 컴파일이 수행된 코드를 포함한다. 다만, 이에 한정되는 것은 아니므로, 결과코드는 식별된 동적코드에 따라 제2 어플리케이션의 메타정보를 로드한 결과로서, 사전적, 1차적 또는 중간적으로 컴파일되나, 아직 최종적으로 컴파일되지 않은 코드를 포함할 수 있다. 메타정보를 로드한 결과에 따라 제2어플리케이션이 플러그인 어플 리케이션으로 설정 또는 추가되므로, 결과코드는 제2어플리케이션이 플러그인 어플리케이션으로 설정 또 는 추가하기 위한 코드를 포함한다. 최적화부는 획득된 결과코드에 기초하여 제1어플리케이션의 제2코드 중 동적코드를 변경한 다. 일 예로, 최적화부는 제1어플리케이션의 제2코드에 포함된 동적코드를 앞서 획득된 결과코 드로 대체한다. 프로세서는 컴파일부를 포함한다. 컴파일부는 결과코드가 포함된 제1어플리케이션의 제2코드 에 대하여 컴파일을 수행한다. 컴파일부는 컴파일을 통해 제1어플리케이션의 제1코드를 마련한다. 제1코드는 제2어플리케이션의 메타정보에 대응하는 결과코드에 대하여 컴파일이 수행된 코 드를 포함한다. 제1코드에 기초하여 제1어플리케이션이 실행되면, 제1어플리케이션의 실행 중에 제1코드에 포함된 코드에 기초하여 제2어플리케이션의 실행이 제어된다. 프로세서는 업데이트부를 포함한다. 업데이트부는 기존 제1어플리케이션의 제1코드가 있는 경우, 앞서 컴파일부에 의해 마련된 제1어플리케이션의 제1코드에 대응하도록 기존 제1어플리케이션의 제1코드를 업데이트한다. 업데이트부는 제1어플리케이션의 제1코드를 설치 파일 형태로 저장한다. 제 1어플리케이션의 제1코드가 업데이트되면, 업데이트된 제1코드에 포함된 코드에 기초하여 제2어플 리케이션의 실행이 제어된다. 설계 방법에 따라 서버프로세서가 프로파일링부, 최적화부, 컴파일부 또는 업데이트부 중 적어도 하나를 포함하고, 상기 프로세서의 일부 동작을 서버프로세서와 함께 수행한다. 이하에서는 설계 방법에 따라 서버프로세서에 포함되는 최적화부, 컴파일부 및 업데이트부의 동작에 대해 설명한 다. 서버프로세서는 최적화부를 포함한다. 최적화부는 전자장치로부터 동적코드에 관한 정보를 수신한다. 최적화부는 수신된 동적코드에 관한 정보에 기초하여 제1어플리케이션의 제2코드 중 동적코드를 결과코드로 변경한다. 결과코드는 동적코드에 따라 제2어플리케이션의 메타정보를 로드한 결과에 대하여 컴파일이 수행된 코드를 포함한다. 서버프로세서는 컴파일부를 포함한다. 컴파일부는 결과코드를 포함하는 제1어플리케이션의 제2코드에 대하여 컴파일을 수행하여 제1어플리케이션의 제1코드를 마련한다. 제1어플리케이션의 제1코드는 제2어플리케이션의 메타정보에 대응하는 결과코드에 대하여 컴파일이 수행된 코드를 포함한다. 서버프로세서는 업데이트부를 포함한다. 업데이트부는 기존 제1어플리케이션의 제1코드를 앞서 마련된 제1어플리케이션의 제1코드로 업데이트한다. 업데이트부는 제1어플리케이션의 제1코드 를 설치 파일 형태로 저장하거나, 저장된 제1코드를 전자장치로 전송한다. 이와 같이, 프로세서는 서버의 서버프로세서와 함께 제1어플리케이션의 제1코드의 마련을 위한 일부 동작을 수행하여, 자원이 더욱 효율적으로 관리될 수 있으므로, 제1어플리케이션의 실행 속도를 더욱 향상시킬 수 있다. 도 4는 제2어플리케이션이 제1어플리케이션의 기능을 확장하는 일 예를 도시한다. 앞서 설명한 바와 같이, 프로세서는 제1어플리케이션의 실행 이전에 마련된 제1어플리케이션의 제1코 드에 기초하여 제1어플리케이션을 실행하고, 제2어플리케이션의 실행을 제어한다. 이하에서는 도 4를 참조하여, 제1어플리케이션이 TV에 설치된 어플리케이션을 나타내는 TV의 홈 화면을 표시하는 기능을 제공하고, 제2어플리케이션이 동영상 제공 기능을 제공하는 경우를 가정하여, 제2어플리케 이션이 제1어플리케이션의 기능을 확장하는 일 예에 대해 자세히 설명한다. 도 4에 도시된 바와 같이, 프로세서는 제1어플리케이션의 실행명령을 수신한다. 실행명령은 사용자로부터 수신될 수 있으나, 이에 한정되는 것은 아니므로, 전자장치의 파워 온과 같이 특정 이벤트에 대응하여 발생 한다. 프로세서는 실행명령이 수신되면, 미리 마련된 제1어플리케이션의 제1코드에 기초하여 제1어플리케이 션을 실행하고, 앞서 가정한 바와 같이 TV의 홈 화면을 디스플레이에 표시한다. 프로세서는 제1어플리케이션의 제1코드에 포함된 제2어플리케이션의 실행과 연관된 코드에 기초하 여 제2어플리케이션의 기능인 동영상 제공에 대응하는 항목을 TV 홈 화면에 표시한다. 제2어플리케 이션의 실행과 연관된 코드는 앞서 도 3을 참조하여 설명한 바와 같이, 결과코드 또는 결과코드에 대하여 컴파일이 수행된 코드를 포함한다. 동영상 제공 항목이 선택되면, 동영상 제공 항목에 대응하는 제2어플리케이션이 실행될 수 있다. 프 로세서는 제2어플리케이션의 실행에 따라 제2어플리케이션의 기능에 대응하는 동영상 제공 화면을 표시한다. 이와 같이, 제2어플리케이션은 제1어플리케이션의 플러그인 어플리케이션으로서, TV 홈 화면을 표시 하는 제1어플리케이션의 기능에 추가하여 동영상 제공 기능을 제공할 수 있으므로, 제1어플리케이션의 기 능을 확장한다. 만일, 제2어플리케이션과 다른 제3어플리케이션이 플러그인 어플리케이션으로서 새로 설치되면, 앞서 설명한 바와 마찬가지로, 제1어플리케이션의 제1코드에 포함된 제3어플리케이션의 실행과 연관된 코드에 기초하 여 제3어플리케이션의 기능에 대응하는 항목이 TV 홈 화면에 표시된다. 제3어플리케이션의 기능에 대응하는 항목이 선택되면, 제3어플리케이션이 실행되어 제3어플리케이션의 기능이 수행될 수 있으므로, 제3어플리케이션도 제1어플리케이션의 플러그인 어플리케이션으로서, 제1어플리케이션 의 기능을 확장한다. 설계 방법에 따라 프로세서는 제1어플리케이션의 제1코드에 포함된 디폴트(default) 어플리케이션의 실행과 연관된 코드에 기초하여 디폴트 어플리케이션의 기능에 대응하는 항목을 표시한다. 디폴트 어플리케 이션은 플러그인 어플리케이션과 달리 제1어플리케이션에 전용되는 어플리케이션을 포함한다. 일 예로, 디폴 트 어플리케이션의 기능은 홈, 고객센터, 설정, 검색 등을 포함한다. 만일, 사용자에 의해 \"설정\" 항목이 선택 되면, \"설정\"에 대응하는 디폴트 어플리케이션이 실행될 수 있다. 이와 같이, 프로세서는 제1어플리케이션의 실행 이전에 마련된 제1코드를 활용할 수 있으므로, 제1어 플리케이션의 실행 속도를 향상시킬 수 있다. 예컨대, 제1어플리케이션의 기능에 대응하는 TV 홈 화면 이 표시되고 나서 제2어플리케이션의 기능에 대응하는 항목이 표시되기까지의 시간이 대폭 줄어들 수 있다. 도 5는 도 2 및 3과 관련하여 제1어플리케이션의 제1코드가 마련되는 일 예를 도시한다. 이하에서는 도 5를 참조하여 제1어플리케이션의 제1코드가 마련되는 과정에 대해 설명한다. 다만 앞서 도 3을 참조하여 설명한 바와 같이, 상기한 동작의 전부 또는 일부는 서버프로세서에 의해서 수행될 수 있다. 프로세서는 컴파일되지 않은 제1어플리케이션의 제2코드에 기초하여 제1어플리케이션의 실행을 개 시한다(S51). 제1어플리케이션의 제2코드는 제1어플리케이션을 실행하기 위해 프로그래머 등에 의해 작성된 프로그램 문장들이다. 제1코드가 컴파일된 이후의 목적코드인 반면에, 제2코드는 컴파일되기 이전의 소스코드를 의미한다. 다만 설계 방법에 따라 제2코드는 사전적, 1차적 또는 중간적으로 컴파일되나, 아직 최종적으로 컴파일되지 않은 목적코드를 포함한다. 프로세서는 제1어플리케이션의 제2코드에 기초하여 제2어플리케이션의 메타정보를 로드한다(S52). 제2어플리케이션의 메타정보는 제1어플리케이션 및 제2어플리케이션을 기능적으로 연결하기 위한 정보 로서, 제2어플리케이션에 대응하는 클래스 타입, 방법, 특성 등을 포함한다. 메타정보의 로드를 통해 제2어 플리케이션은 제1어플리케이션에 플러그인 어플리케이션으로 설정 또는 추가될 수 있다. 제2코드는 제1어플리케이션의 실행 중에 제2어플리케이션의 메타정보를 로드하기 위한 코드를 포함한 다. 이러한 코드를 동적코드라 하며, 예컨대, 리플렉션과 같이 런타임 기반 코드를 포함한다. 프로세서는 로드된 메타정보에 기초하여 제1어플리케이션의 제2코드를 컴파일하여 제1어플리케이션 의 제1코드를 획득한다(S53). 프로세서는 결과코드에 기초하여 앞서 설명한 제1어플리케이션의 제2코드 중 동적코드를 변 경한다. 결과코드는 동적코드에 따라 메타정보를 로드한 결과에 대응하는 코드로서, 제2어플리케이션 의 실행과 연관된 코드를 포함한다. 일 예로, 프로세서는 제1어플리케이션의 제2코드에 포함된 동 적코드를 결과코드로 대체한다. 프로세서는 결과코드를 포함하는 제1어플리케이션의 제2코드 에 대한 컴파일 수행 결과, 제1어플리케이션의 제1코드를 마련한다. 이상의 동작은 전자장치가 직접 수행할 수 있으나, 이에 한정되는 것은 아니므로, 전자장치의 제조 이 전에 이루어질 수 있다. 이 경우 획득된 제1어플리케이션의 제1코드는 전자장치의 제조 시에 설치 파 일의 형태로 저장부에 미리 저장될 수 있다. 만일, 전자장치의 사용 중 제2어플리케이션과 다른 플러그인 어플리케이션인 제3어플리케이션이 설치되 면, 앞서 설명한 동작 S51 내지 S53과 마찬가지로, 프로세서는 제1어플리케이션의 제2코드에 기초하 여 제3어플리케이션의 메타정보를 로드한다. 제3어플리케이션의 메타정보는 제1어플리케이션 및 제3어플리케 이션을 기능적으로 연결하기 위한 정보로서, 제3어플리케이션에 대응하는 클래스 타입, 방법, 특성 등을 포함한 다. 메타정보의 로드를 통해 제3어플리케이션은 제1어플리케이션에 플러그인 어플리케이션으로 설정 또는 추 가될 수 있다. 프로세서는 제3어플리케이션의 메타정보를 로드한 결과에 대응하는 결과코드에 기초하여 제1어플리케이 션의 제2코드에 대한 컴파일을 수행한다. 일 예로, 프로세서는 제1어플리케이션의 제2코드에 포함된 동적코드를 결과코드로 대체하고, 결과코드를 포함하는 제1어플리케이션의 제2코드 에 대한 컴파일 수행 결과, 제1어플리케이션의 제1코드를 마련한다. 이와 같이, 프로세서는 제1어플이케이션의 실행 이전에 마련된 제1어플리케이션의 제1코드를 활용 할 수 있으므로, 제1어플리케이션의 실행 속도가 향상될 수 있다. 도 6은 제1어플리케이션의 제1코드가 생성되는 일 예를 도시한다. 앞서 도 1을 참조하여, 제1어플리케이션의 제1코드는 제2어플리케이션의 메타정보에 기초하여 컴파일 된 코드를 포함하며, 제2어플리케이션는 전자장치에 이미 설치된 플러그인 어플리케이션임을 설명한 바 있다. 이하에서는 도 1에서 설명한 제1어플리케이션의 제1코드를 기존 제1코드라 가정하고, 제2어플리케이 션과 다른 플러그 어플리케이션인 제3어플리케이션이 전자장치에 새로 설치된 경우 기존 제1코드가새로운 제1코드로 업데이트되는 과정에 대해 설명한다. 프로세서는 전자장치에 제3어플리케이션이 설치되면 제1어플리케이션의 제2코드 중 제3어플리케 이션의 메타정보를 로드하기 위한 동적코드에 관한 정보를 획득한다. 프로세서는 획득된 동적코드에 관한 정보에 기초하여 동적코드에 따라 제3어플리케이션의 메타정보 를 로드한다. 제3어플리케이션의 메타정보는 제1어플리케이션 및 제3어플리케이션을 기능적으로 연결하기 위 한 정보로서, 제3어플리케이션에 대응하는 클래스 타입, 방법, 특성 등을 포함한다. 메타정보의 로드를 통해 제 3어플리케이션은 제1어플리케이션에 플러그인 어플리케이션으로 설정 또는 추가될 수 있다. 프로세서는 로드된 제3어플리케이션의 메타정보에 대응하는 결과코드를 획득한다. 결과코드는 식별 된 동적코드에 따라 제3어플리케이션의 메타정보를 로드한 결과에 대응하는 코드를 포함한다. 프로세서는 획득된 결과코드에 기초하여 제1어플리케이션의 제2코드 중 제3어플리케이션에 대한 동적코드를 변경한다. 일 예로, 프로세서는 제1어플리케이션의 제2코드에 포함된 제3어플리케이 션에 대한 동적코드를 획득된 결과코드로 대체한다. 프로세서는 결과코드가 포함된 제1어플리케이션의 제2코드에 대하여 컴파일을 수행하고, 컴파일 을 통해 제1어플리케이션의 새로운 제1코드를 마련한다. 프로세서는 기존 제1코드를 새로운 제1코드로 업데이트한다. 새로운 제1코드에는 이미 설치된 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드뿐만 아니라, 새로 설치된 제3어플리케이션의 메타 정보에 기초하여 컴파일된 코드가 포함될 수 있다. 프로세서는 업데이트된 제1코드에 기초하여 제1어플리케이션을 실행하고, 제1어플리케이션의 실행 중 제1코드에 포함된 제2어플리케이션의 메타정보에 대응하는 코드 및 제3어플리케이션의 메타정보에 대응하는 코드에 기초하여 플러그인 어플리케이션인 제2어플리케이션 및 제3어플리케이션의 기능을 활용 한다. 이와 같이, 프로세서는 플러그인 어플리케이션이 새로 설치되더라도, 제1어플이케이션의 실행 이전에 제1 어플리케이션의 제1코드를 업데이트하고, 업데이트된 제1코드를 활용할 수 있으므로, 제1어플리케이 션의 실행 속도가 더욱 향상될 수 있다. 도 7은 도 6과 관련하여 서버로부터 업데이트된 제1어플리케이션의 제1코드를 수신하는 일 예를 도시한다. 앞서 도 6을 참조하여 프로세서가 제1어플리케이션의 제1코드로 업데이트하는 일 예에 대해서 설명하 였으나, 이하에서는 서버로부터 업데이트된 제1코드를 수신하는 일 예에 대해 설명한다. 프로세서는 제3어플리케이션이 설치되면 제1어플리케이션의 제2코드에 포함된, 제3어플리케이션의 메 타정보를 로드하기 위한 동적코드에 관한 정보를 획득하고, 획득된 정보를 참조정보로서 서버에 전송한 다. 서버의 서버프로세서는 수신된 참조정보에 기초하여 제1어플리케이션의 제2코드 중 동적코드(3 2)를 식별한다. 제1어플리케이션의 제2코드는 서버에 미리 저장된 것일 수 있다. 서버프로세서는 식별된 동적코드에 대응하는 결과코드를 획득한다. 서버프로세서는 획득된 결과 코드에 기초하여 제1어플리케이션의 제2코드 중 동적코드를 변경한다. 예컨대, 동적코드를 결과코드로 대체한다. 서버프로세서는 결과코드를 포함하는 제1어플리케이션의 제2코드에 대한 컴파일을 수행하여, 새 로운 제1코드를 마련한다. 서버프로세서는 기존 제1코드를 새로운 제1코드로 업데이트한다. 기존 제1코드는 서버에 미 리 저장된 것일 수 있다. 기존 제1코드에는 이미 설치된 제2어플리케이션의 메타정보에 기초하여 컴파일 된 코드가 포함되는 반면에, 새로운 제1코드에는 제2어플리케이션의 메타정보에 기초하여 컴파일된 코드뿐만 아니라, 새로 설치된 제3어플리케이션의 메타정보에 기초하여 컴파일된 코드가 포함될 수 있다. 서버프로세서는 업데이트된 제1코드를 전자장치로 전송하여, 전자장치에 설치 파일 형태로 저장 되도록 한다. 프로세서는 제1코드에 기초하여 제1어플리케이션을 실행하고, 제1어플리케이션의 제1코드에 포함된 제2어플리케이션의 메타정보에 대응하는 코드 및 제3어플리케이션의 메타정보에 대응하는 코드 에 기초하여 플러그인 어플리케이션인 제2어플리케이션 및 제3어플리케이션의 기능을 활용한다. 이와 같이, 프로세서는 플러그인 어플리케이션이 새로 설치되더라도, 제1어플이케이션의 실행 이전에 업 데이트된 제1코드를 서버로부터 수신하여 활용할 수 있으므로, 제1어플리케이션의 실행 속도가 더욱 향상될 수 있을 뿐만 아니라, 자원이 더욱 효율적으로 관리될 수 있다. 도 8은 도 2의 서버에 의해 제1어플리케이션의 제1코드가 마련되는 일 예를 도시한다. 앞서 도 1을 참조하여, 전자장치의 프로세서가 전자장치에 설치된 제2어플리케이션에 대응하여 제1어플리케이션의 제1코드를 마련하는 일 예에 대해 설명하였으나, 이하에서는 서버의 서버프로세서 가 전자장치에 설치된 제2어플리케이션에 대응하여 제1어플리케이션의 제1코드를 마련하는 일 예에 대해 설명한다. 서버의 서버프로세서는 제1어플리케이션의 제2코드 중 제2어플리케이션의 메타정보를 로드하 기 위한 동적코드를 식별한다. 제1어플리케이션의 제2코드는 소스코드로서 서버에 미리 저장된 것일 수 있다. 제2코드는 사전적 또는 1차적으로 컴파일이 수행된 코드를 포함한다. 서버프로세서는 동 적코드를 식별하기 위해 전자장치로부터 동적코드에 관한 정보를 수신한다. 서버프로세서는 식별된 동적코드에 대응하는 결과코드를 획득한다. 결과코드는 식별된 동적코드 에 따라 제2어플리케이션의 메타정보를 로드한 결과에 대응하는 코드를 포함한다. 서버프로세서는 획득된 결과코드에 기초하여 제1어플리케이션의 제2코드 중 동적코드를 변경 한다. 예컨대, 서버프로세서는 동적코드를 결과코드로 대체한다. 서버프로세서는 결과코드를 포함하는 제1어플리케이션의 제2코드에 대한 컴파일을 수행하여, 새 로운 제1코드를 마련한다. 새로 마련된 제1코드에는 제2어플리케이션의 메타정보에 기초하여 컴파일 된 코드가 포함될 수 있다. 서버프로세서는 새로 마련된 제1어플리케이션의 제1코드를 전자장치로 전송한다. 전자장치의 프로세서는 서버로부터 수신된 제1어플리케이션의 제1코드에 기초하여 제1어플리케이션을 실 행하고, 제1어플리케이션의 제1코드 중 제2어플리케이션에 대응하는 코드에 기초하여 제2어플리케 이션의 실행을 제어한다. 이와 같이, 서버의 서버프로세서는 전자장치에서 제1어플리케이션의 실행 이전에 제2어플리케이 션의 메타정보에 기초하여 마련된 제1코드를 전자장치로 제공할 수 있으므로, 전자장치로 하여 금 제1어플리케이션의 실행 속도를 향상시키도록 한다. 도 9는 도 8의 서버의 제어방법의 일 예를 도시한다. 도 9에 도시된 바와 같이, 서버의 서버프로세서는 제1어플리케이션의 제2코드에 기초하여 제1어플리 케이션의 실행을 개시한다(S91). 제1어플리케이션의 제2코드는 컴파일되지 않는 소스코드 또는 컴파 일된 목적코드를 포함한다. 서버프로세서는 제2코드에 기초하여 제2어플리케이션의 메타정보를 로드한다(S92). 제2어플리케이션 의 메타정보는 제1어플리케이션 및 제2어플리케이션을 기능적으로 연결하기 위한 정보로서, 제2어플리 케이션에 대응하는 클래스 타입, 방법, 특성 등을 포함한다. 제2코드는 제1어플리케이션의 실행 중에 제2어플리케이션의 메타정보를 로드하기 위한 동적코드를 포함한다. 서버프로세서는 로드된 메타정보에 기초하여 제2코드를 컴파일하여 제1어플리케이션의 제1코드를 생성한다(S93). 일 예로, 서버프로세서는 제2어플리케이션의 메타정보에 대응하는 결과코드에 기초하 여 제1어플리케이션의 제2코드에 대한 컴파일을 수행한다. 결과코드는 제2어플리케이션의 메타정 보를 로드한 결과에 대응하는 코드를 의미한다. 결과코드에 기초하여 제1어플리케이션의 제2코드 중 동적코드가 변경될 수 있다. 프로세서는 결과코드에 기초한 컴파일 수행 결과, 제1어플리케이션 의 제1코드를 생성한다. 서버프로세서는 제1어플리케이션의 제1코드를 외부장치, 즉, 전자장치에 전송한다(S94). 전자장치 의 프로세서는 제1어플리케이션의 제1코드 중 제2어플리케이션의 실행과 연관된 코드, 즉, 제 2어플리케이션의 메타정보에 대응하는 코드에 기초하여 제2어플리케이션의 실행을 제어함으로써, 제2어플리케이션의 기능을 활용한다. 이와 같이, 서버프로세서는 전자장치에서 제1어플리케이션의 실행 이전에 제2어플리케이션의 메타 정보에 기초하여 마련된 제1코드를 전자장치로 제공할 수 있으므로, 전자장치로 하여금 제1어플리 케이션의 실행 속도를 향상시키도록 한다. 도 10은 도 9의 동작 S92와 관련하여 참조정보를 활용하는 일 예를 도시한다. 앞서 도 8을 참조하여 설명한 바와 같이, 서버의 서버프로세서는 제1어플리케이션의 제2코드 중 제2어플리케이션의 메타정보를 로드하기 위한 동적코드를 식별하고, 식별된 동적코드에 대응하는 결 과코드를 획득한다. 서버프로세서는 동적코드를 식별함에 있어서, 전자장치로부터 수신된 참조정보를 활용한다. 참조정 보는 동적코드에 관한 정보로서 동적코드 자체에 관한 정보뿐만 아니라, 제1어플리케이션의 제2코드 중 동적코드의 위치, 동적코드가 사용된 구간의 위치에 관한 정보, 콜트리에 관한 정보 등을 포함 한다. 서버프로세서는 참조정보에 기초하여 식별된 동적코드에 따라 제2어플리케이션의 메타정보를 로드하 고, 메타정보를 로드한 결과에 대응하는 결과코드를 획득한다. 서버프로세서는 획득된 결과코드에 기초하여 제1어플리케이션의 제2코드 중 동적코드를 변경 한다. 일 예로 서버프로세서는 동적코드를 결과코드로 대체한다. 서버프로세서는 결과코드를 포함하는 제1어플리케이션의 제2코드에 대한 컴파일을 수행하여, 새 로운 제1코드를 마련한다. 새로운 제1코드에는 제2어플리케이션의 메타정보에 기초하여 컴파일된 코 드가 포함된다. 서버프로세서는 마련된 제1어플리케이션의 제1코드를 전자장치로 전송한다. 전자장치의 프로 세서는 서버로부터 수신된 제1어플리케이션의 제1코드에 기초하여 제1어플리케이션을 실행하 고, 제1어플리케이션의 실행 중 제2어플리케이션의 실행과 연관된 코드, 즉, 제2어플리케이션의 메타 정보에 대응하는 코드에 기초하여 제2어플리케이션의 실행을 제어한다. 이와 같이, 서버의 서버프로세서는 전자장치로부터 수신된 참조정보에 기초하여 동적코드를 식 별할 수 있으므로, 제1어플리케이션의 제1코드를 보다 신속하게 마련한다. 도 11은 도 9의 동작 S92와 관련하여 참조정보를 활용하는 다른 예를 도시한다. 도 11에 도시된 바와 같이, 서버프로세서는 전자장치로부터 수신된 참조정보에 기초하여 제1어플리케이 션의 제2코드 중 동적코드를 식별한다. 서버프로세서는 식별된 동적코드에 따라 제2어플리케이션의 메타정보를 로드하고, 로드된 메타정보의 결과에 대응하는 결과코드를 획득한다. 결과코드는 동적코드에 따라 로드된 결과에 대한 컴파일이 수행된 코드를 포함한다. 서버프로세서는 결과코드를 포함하는 제1어플리케이션의 제2코드에 대한 컴파일을 수행하여, 새 로운 제1코드를 마련한다. 이와 같이, 서버의 서버프로세서는 전자장치로부터 수신된 참조정보에 기초하여 동적코드를 식 별할 수 있으므로, 제1어플리케이션의 제1코드를 보다 신속하게 마련한다. 도 12는 도 9의 동작 S93과 관련하여, 제1어플리케이션의 제1코드를 업데이트하는 일 예를 도시한다. 앞서 도 8을 참조하여, 제1어플리케이션의 제1코드는 제2어플리케이션의 메타정보에 기초하여 컴파일 된 제1코드를 포함하며, 여기서 제2어플리케이션는 전자장치에 이미 설치된 플러그인 어플리케이션임을 설명한 바 있다. 이하에서는 도 8에서 설명한 제1어플리케이션의 제1코드를 기존 제1코드라 가정하 고, 제2어플리케이션과 다른 플러그 어플리케이션인 제3어플리케이션이 전자장치에 새로 설치된 경우 기 존 제1코드가 새로운 제1코드로 업데이트되는 과정에 대해 설명한다. 서버프로세서는 전자장치에 제3어플리케이션이 설치되면 제3어플리케이션의 메타정보를 로드하기 위한 동적코드에 관한 정보를 전자장치로부터 수신한다. 서버프로세서는 획득된 정보를 참조정보로서 활용하여 제1어플리케이션의 제2코드 중 동적코드를 식별한다. 제3어플리케이션의 메타정보는 제1어플리케이션 및 제3어플리케이션을 기능적으로 연결하기 위한 정보로서, 제3어플리케이션에 대응하는 클래스 타입, 방법, 특성 등을 포함한다. 메타정보의 로드를 통해 제3어 플리케이션은 제1어플리케이션에 플러그인 어플리케이션으로 설정 또는 추가될 수 있다.서버프로세서는 식별된 동적코드에 대응하는 결과코드를 획득한다. 결과코드는 식별된 동적코드에 따라 제3어 플리케이션의 메타정보를 로드한 결과에 대응하는 코드를 포함한다. 서버프로세서는 획득된 결과코드에 기초하여 제1어플리케이션의 제2코드 중 동적코드를 변경 한다. 예컨대, 동적코드를 결과코드로 대체한다. 서버프로세서는 결과코드를 포함하는 제1어플리케이션의 제2코드에 대한 컴파일을 수행하여, 새 로운 제1코드를 마련한다. 서버프로세서는 기존 제1코드를 새로운 제1코드로 업데이트한다. 기 존 제1코드는 서버에 미리 저장된 것일 수 있다. 기존 제1코드에는 이미 설치된 제2어플리케이션 의 메타정보에 기초하여 컴파일된 코드가 포함되는 반면에, 새로운 제1코드에는 제2어플리케이션 의 메타정보에 기초하여 컴파일된 코드뿐만 아니라, 새로 설치된 제3어플리케이션의 메타정보에 기초하여 컴 파일된 코드가 포함될 수 있다. 서버프로세서는 업데이트된 제1코드를 전자장치로 전송하고, 프로세서는 서버로부터 수신된 제1코드에 기초하여 제1어플리케이션을 실행하고, 제1어플리케이션의 제1코드에 포함된 제2어플리 케이션 및 제3어플리케이션의 실행과 연관된 코드, 즉, 제2어플리케이션의 메타정보에 대응하는 코드 및 제3어플리케이션의 메타정보에 대응하는 코드에 기초하여 플러그인 어플리케이션인 제2어플리케이션 및 제3어플리케이션의 기능을 활용한다. 이와 같이, 서버프로세서는 전자장치에 플러그인 어플리케이션이 새로 설치되더라도, 제1어플이케이션 의 실행 이전에 업데이트된 제1코드를 전자장치로 제공할 수 있으므로, 전자장치로 하여금 제1 어플리케이션의 실행 속도를 더욱 향상시킬 수 있도록 할 뿐만 아니라, 자원을 더욱 효율적으로 관리할 수 있도록 한다. 본 문서에 개시된 다양한 실시예들은 전자장치와 같은 기기(Machine)가 읽을 수 있는 저장 매체(Storage Medium)에 저장된 하나 이상의 명령어들을 포함하는 소프트웨어로서 구현될 수 있다. 일 예로, 전자장치의 프로세서는 저장 매체로부터 저장된 하나 이상의 명령어들 중 적어도 하나의 명령을 호출하고, 그것을 실행 한다. 이것은 전자장치와 같은 기기가 상기 호출된 적어도 하나의 명령어에 따라 적어도 하나의 기능을 수 행하도록 운영되는 것을 가능하게 한다. 상기 하나 이상의 명령어들은 컴파일러에 의해 생성된 코드 또는 인터 프리터에 의해 실행될 수 있는 코드를 포함한다. 기기로 읽을 수 있는 저장매체는, 비일시적(Non-transitory) 저장매체의 형태로 제공될 수 있다. 여기서, ‘비일시적 저장매체'는 실재(tangible)하는 장치이고, 신호(예컨 대, 전자기파)를 포함하지 않는다는 것을 의미할 뿐이며, 이 용어는 데이터가 저장매체에 반영구적으로 저장되 는 경우와 임시적으로 저장되는 경우를 구분하지 않는다. 일 예로, '비일시적 저장매체'는 데이터가 임시적으로 저장되는 버퍼를 포함한다. 일 예로, 본 문서에 개시된 다양한 실시예들에 따른 방법은 컴퓨터 프로그램 제품(Computer Program Product)에 포함되어 제공될 수 있다. 본 개시에 의한 컴퓨터 프로그램 제품은, 앞서 언급된 바와 같은, 프로세서에 의해 실행되는 소프트웨어의 명령어들을 포함한다. 컴퓨터 프로그램 제품은 상품으로서 판매자 및 구매자 간에 거래 될 수 있다. 컴퓨터 프로그램 제품은 기기로 읽을 수 있는 저장 매체(예컨대, CD-ROM)의 형태로 배포되거나, 또 는 어플리케이션 스토어(예컨대, 플레이 스토어TM)를 통해 또는 두 개의 사용자 장치들(예컨대, 스마트폰들) 간 에 직접, 온라인으로 배포(예컨대, 다운로드 또는 업로드)될 수 있다. 온라인 배포의 경우에, 컴퓨터 프로그램 제품(예: 다운로더블 앱(downloadable app))의 적어도 일부는 제조사의 서버, 어플리케이션 스토어의 서버, 또 는 중계 서버의 메모리와 같은 기기로 읽을 수 있는 저장 매체에 적어도 일시 저장되거나, 임시적으로 생성될 수 있다. 이상, 바람직한 실시예를 통하여 본 발명에 관하여 상세히 설명하였으나, 본 발명은 이에 한정되는 것은 아니며 특허청구범위 내에서 다양하게 실시될 수 있다."}
{"patent_id": "10-2020-0111838", "section": "도면", "subsection": "도면설명", "item": 1, "content": "도 1은 본 발명의 일 실시예에 따른 전자장치를 도시한다. 도 2는 도 1의 전자장치에 관한 구성의 일 예를 도시한다. 도 3은 도 2의 프로세서 및 서버프로세서에 관한 구성의 일 예를 도시한다. 도 4는 제2어플리케이션이 제1어플리케이션의 기능을 확장하는 일 예를 도시한다. 도 5는 도 2 및 3과 관련하여 제1어플리케이션의 제1코드가 마련되는 일 예를 도시한다. 도 6은 제1어플리케이션의 제1코드가 생성되는 일 예를 도시한다. 도 7은 도 6과 관련하여 서버로부터 업데이트된 제1어플리케이션의 제1코드를 수신하는 일 예를 도시한다. 도 8은 도 2의 서버에 의해 제1어플리케이션의 제1코드가 마련되는 일 예를 도시한다. 도 9는 도 8의 서버의 제어방법의 일 예를 도시한다. 도 10은 도 9의 동작 S92와 관련하여 참조정보를 활용하는 일 예를 도시한다. 도 11은 도 9의 동작 S92와 관련하여 참조정보를 활용하는 다른 예를 도시한다. 도 12는 도 9의 동작 S93과 관련하여, 제1어플리케이션의 제1코드를 업데이트하는 일 예를 도시한다."}
