// 초안 관련 기능
App.draft = {
  // 특허 초안 표시 (마크다운 렌더링)
  display(content) {
    const noDraftMessage = document.getElementById('noDraftMessage');
    const draftContent = document.getElementById('draftContent');
    
    if (noDraftMessage) noDraftMessage.style.display = 'none';
    if (draftContent) {
      draftContent.style.display = 'block';
      
      // 기존 textarea 제거하고 마크다운 렌더링 영역 생성
      const existingTextarea = draftContent.querySelector('#draft_text');
      if (existingTextarea) {
        existingTextarea.remove();
      }
      
      const existingMarkdown = draftContent.querySelector('.markdown-content');
      if (existingMarkdown) {
        existingMarkdown.remove();
      }
      
      // 마크다운 컨텐츠 영역 생성
      const markdownDiv = document.createElement('div');
      markdownDiv.className = 'markdown-content';
      markdownDiv.innerHTML = App.utils.convertMarkdownToHTML(content);
      
      // 버튼 행 앞에 삽입
      const buttonRow = draftContent.querySelector('.button-row');
      draftContent.insertBefore(markdownDiv, buttonRow);
      
      // 버튼 상태 초기화
      const normalButtons = document.getElementById('normalButtons');
      const editButtons = document.getElementById('editButtons');
      if (normalButtons) normalButtons.style.display = 'flex';
      if (editButtons) editButtons.style.display = 'none';
    }
    
    App.utils.showNotification('특허 명세서 초안이 마크다운 형식으로 생성되었습니다.');
  },
  
  // 저장 기능
  save() {
    // 직접 수정 모드인 경우 textarea의 내용을 가져옴
    const textarea = document.getElementById('draft_text');
    if (textarea) {
      App.data.currentDraftContent = textarea.value;
    }
    
    if (!App.data.currentDraftContent) {
      App.utils.showNotification('저장할 내용이 없습니다.');
      return;
    }

    if (window.CURRENT_TEMPLATE_ID == null) {
      alert('template_id가 없습니다.');
      return;
    }

    console.log("template_id::", window.CURRENT_TEMPLATE_ID);

    let parsedResult = App.draft.parseDraftContent(App.data.currentDraftContent);
    parsedResult['sc_flag'] = 'update';
    parsedResult['create_draft'] = App.data.currentDraftContent;
    parsedResult['template_id'] = window.CURRENT_TEMPLATE_ID;
    
    const now = new Date();
    const timestamp = now.getFullYear() + '-' + 
      String(now.getMonth() + 1).padStart(2, '0') + '-' + 
      String(now.getDate()).padStart(2, '0') + '_' + 
      String(now.getHours()).padStart(2, '0') + ':' + 
      String(now.getMinutes()).padStart(2, '0');

    fetch('/assist/insert_patent_report/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRFToken': App.draft.getCSRFToken(),
      },
      body: JSON.stringify(parsedResult)
    })
    .then(response => {
      if(!response.ok) {
        throw new Error('서버 응답 오류');
      }
      return response.json();
    })
    .then(data => {
      console.log('서버 응답:',data);
      if(data.status == "error") {
        let errorMsg = data.message;
        App.utils.showNotification(errorMsg);
      } else {
        App.data.currentDraftId = data.draft_id;
        App.utils.showNotification(`특허명세서_${timestamp}로 저장되었습니다.`);
      }
    })
    .catch(error => {
      console.error('저장 중 오류 발생:', error);
      App.utils.showNotification('저장 중 오류가 발생했습니다.');
    })
    
  },

  parseDraftContent(draftText) {
    const sections = {
      '발명의 명칭': 'tech_name',
      '기술분야': 'tech_description',
      '배경기술': null,
      '해결하려는 과제': 'problem_solved',
      '과제의 해결 수단': 'tech_differentation',
      '활용 분야': 'application_field',
      '발명의 효과': null,
      '발명을 실시하기 위한 구체적인 내용': null,
      '주요 구성 요소': 'components_functions',
      '구현 방식': 'implementation_example',
      '특허청구범위': null,
      '도면의 간단한 설명': 'drawing_description',
      '출원인': 'application_info',
      '발명자': 'inventor_info'
    }

    const lines = draftText.split('\n');
    const result = {};

    let currentKey = null;
    let currentContent = [];

    for(let line of lines) {
      const headingMatch = line.match(/^#{1,3}\s*(.+)$/);
      if(headingMatch) {
        const title = headingMatch[1].trim();
        if(sections.hasOwnProperty(title)) {
          if(currentKey=="발명의 명칭") {
            result['tech_title'] = currentContent.join('\n').trim();
          }
          if(currentKey && sections[currentKey]) {
            result[sections[currentKey]] = currentContent.join('\n').trim();
          }
          currentKey = title;
          currentContent = [];
        }
      } else if(line.trim() && currentKey) {
        currentContent.push(line);
      }
    }

    if(currentKey && sections[currentKey]) {
      result[sections[currentKey]] = currentContent.join('\n').trim();
    }

    return result
  },
  
  // 직접 수정 모드 활성화
  enableEdit() {
    const draftContent = document.getElementById('draftContent');
    const markdownContent = draftContent.querySelector('.markdown-content');
    const normalButtons = document.getElementById('normalButtons');
    const editButtons = document.getElementById('editButtons');
    
    if (markdownContent) {
      // 마크다운 렌더링 영역 제거
      markdownContent.remove();
      
      // textarea 생성
      const textarea = document.createElement('textarea');
      textarea.id = 'draft_text';
      textarea.className = 'textarea-input editing';
      textarea.value = App.data.currentDraftContent;
      
      // 버튼 행 앞에 삽입
      const buttonRow = draftContent.querySelector('.button-row');
      draftContent.insertBefore(textarea, buttonRow);
      
      // 버튼 변경
      normalButtons.style.display = 'none';
      editButtons.style.display = 'flex';
      
      textarea.focus();
      App.utils.showNotification('수정 모드가 활성화되었습니다. 자유롭게 편집하세요.');
    }
  },
  
  // 수정 취소
  cancelEdit() {
    const draftContent = document.getElementById('draftContent');
    const textarea = draftContent.querySelector('#draft_text');
    const normalButtons = document.getElementById('normalButtons');
    const editButtons = document.getElementById('editButtons');
    
    if (textarea) {
      // textarea 제거
      textarea.remove();
      
      // 마크다운 컨텐츠 영역 다시 생성
      const markdownDiv = document.createElement('div');
      markdownDiv.className = 'markdown-content';
      markdownDiv.innerHTML = App.utils.convertMarkdownToHTML(App.data.currentDraftContent);
      
      // 버튼 행 앞에 삽입
      const buttonRow = draftContent.querySelector('.button-row');
      draftContent.insertBefore(markdownDiv, buttonRow);
      
      // 버튼 변경
      editButtons.style.display = 'none';
      normalButtons.style.display = 'flex';
      
      App.utils.showNotification('수정이 취소되었습니다.');
    }
  },
  
  // 수정 완료
  saveEdit() {
    const textarea = document.getElementById('draft_text');
    const draftContent = document.getElementById('draftContent');
    const normalButtons = document.getElementById('normalButtons');
    const editButtons = document.getElementById('editButtons');
    
    if (textarea) {
      // 수정된 내용 저장
      App.data.currentDraftContent = textarea.value;
      
      // textarea 제거
      textarea.remove();
      
      // 마크다운 컨텐츠 영역 다시 생성
      const markdownDiv = document.createElement('div');
      markdownDiv.className = 'markdown-content';
      markdownDiv.innerHTML = App.utils.convertMarkdownToHTML(App.data.currentDraftContent);
      
      // 버튼 행 앞에 삽입
      const buttonRow = draftContent.querySelector('.button-row');
      draftContent.insertBefore(markdownDiv, buttonRow);
      
      // 버튼 변경
      editButtons.style.display = 'none';
      normalButtons.style.display = 'flex';
      
      App.utils.showNotification('수정이 완료되었습니다.');
    }
  },
  
  // AI 요청 기능
  requestAI() {
    const requestAIDiv = document.getElementById("activeRequestAI");
    if(requestAIDiv.style.display !== "block"){
        requestAIDiv.style.display = "block";
        const buttonRowDivs = document.getElementsByClassName('button-row');
        for (const div of buttonRowDivs) {
          div.style.paddingTop = "2px";
        }
    } else {
        requestAIDiv.style.display = 'none';
    }
  },
  
  // 다운로드 기능 (모달 열기)
  download() {
    if (App.download) {
      App.download.openModal();
    } else {
      // 백업 다운로드 (모달 모듈이 없는 경우)
      this.fallbackDownload();
    }
  },
  
  // 백업 다운로드 함수
  fallbackDownload() {
    if (!App.data.currentDraftContent) {
      App.utils.showNotification('다운로드할 내용이 없습니다.');
      return;
    }
    
    const now = new Date();
    const timestamp = now.getFullYear() + '-' + 
      String(now.getMonth() + 1).padStart(2, '0') + '-' + 
      String(now.getDate()).padStart(2, '0');
    
    // 마크다운 파일로 다운로드
    const blob = new Blob([App.data.currentDraftContent], { type: 'text/markdown;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `특허명세서_초안_${timestamp}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    App.utils.showNotification('특허 명세서가 마크다운 파일로 다운로드되었습니다.');
  },
  
  getCSRFToken() {
    const name = 'csrftoken';
    const cookies = document.cookie.split(';');
    for(let cookie of cookies) {
      const trimmed = cookie.trim();
      if(trimmed.startsWith(name + '=')) {
        return trimmed.substring(name.length + 1);
      }
    }
    return '';
  }
};
